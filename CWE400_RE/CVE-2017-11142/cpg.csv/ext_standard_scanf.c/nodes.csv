command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2011820	File	data/converged/CVE-2017-11142_php-src/ext_standard_scanf.c								
ANR	2011821	ClassDef	CharSet	104:8:4731:4904							
ANR	2011822	DeclStmt									
ANR	2011823	Decl							int	int	exclude
ANR	2011824	DeclStmt									
ANR	2011825	Decl							int	int	nchars
ANR	2011826	DeclStmt									
ANR	2011827	Decl							char	char *	chars
ANR	2011828	DeclStmt									
ANR	2011829	Decl							int	int	nranges
ANR	2011830	ClassDef	Range	109:1:4842:4893							
ANR	2011831	DeclStmt									
ANR	2011832	Decl							char	char	start
ANR	2011833	DeclStmt									
ANR	2011834	Decl							char	char	end
ANR	2011835	DeclStmt									
ANR	2011836	Decl							Range	Range *	ranges
ANR	2011837	DeclStmt									
ANR	2011838	Decl							CharSet	CharSet	CharSet
ANR	2011839	DeclStmt									
ANR	2011840	Decl							char	"char * ( CharSet * cset , char * format )"	BuildCharSet
ANR	2011841	DeclStmt									
ANR	2011842	Decl							int	"int ( CharSet * cset , int ch )"	CharInSet
ANR	2011843	DeclStmt									
ANR	2011844	Decl							void	void ( CharSet * cset )	ReleaseCharSet
ANR	2011845	DeclStmt									
ANR	2011846	Decl							void	"void ( int numVars , zval * * return_value )"	scan_set_error_return
ANR	2011847	Function	BuildCharSet	141:0:5647:7420							
ANR	2011848	FunctionDef	"BuildCharSet (CharSet * cset , char * format)"		2011847	0					
ANR	2011849	CompoundStatement		142:0:5703:7420	2011847	0					
ANR	2011850	IdentifierDeclStatement	"char * ch , start ;"	143:1:5706:5721	2011847	0	True				
ANR	2011851	IdentifierDecl	* ch		2011847	0					
ANR	2011852	IdentifierDeclType	char *		2011847	0					
ANR	2011853	Identifier	ch		2011847	1					
ANR	2011854	IdentifierDecl	start		2011847	1					
ANR	2011855	IdentifierDeclType	char		2011847	0					
ANR	2011856	Identifier	start		2011847	1					
ANR	2011857	IdentifierDeclStatement	int nranges ;	144:1:5724:5736	2011847	1	True				
ANR	2011858	IdentifierDecl	nranges		2011847	0					
ANR	2011859	IdentifierDeclType	int		2011847	0					
ANR	2011860	Identifier	nranges		2011847	1					
ANR	2011861	IdentifierDeclStatement	char * end ;	145:1:5739:5748	2011847	2	True				
ANR	2011862	IdentifierDecl	* end		2011847	0					
ANR	2011863	IdentifierDeclType	char *		2011847	0					
ANR	2011864	Identifier	end		2011847	1					
ANR	2011865	ExpressionStatement	"memset ( cset , 0 , sizeof ( CharSet ) )"	147:1:5752:5784	2011847	3	True				
ANR	2011866	CallExpression	"memset ( cset , 0 , sizeof ( CharSet ) )"		2011847	0					
ANR	2011867	Callee	memset		2011847	0					
ANR	2011868	Identifier	memset		2011847	0					
ANR	2011869	ArgumentList	cset		2011847	1					
ANR	2011870	Argument	cset		2011847	0					
ANR	2011871	Identifier	cset		2011847	0					
ANR	2011872	Argument	0		2011847	1					
ANR	2011873	PrimaryExpression	0		2011847	0					
ANR	2011874	Argument	sizeof ( CharSet )		2011847	2					
ANR	2011875	SizeofExpression	sizeof ( CharSet )		2011847	0					
ANR	2011876	Sizeof	sizeof		2011847	0					
ANR	2011877	SizeofOperand	CharSet		2011847	1					
ANR	2011878	ExpressionStatement	ch = format	149:1:5788:5799	2011847	4	True				
ANR	2011879	AssignmentExpression	ch = format		2011847	0		=			
ANR	2011880	Identifier	ch		2011847	0					
ANR	2011881	Identifier	format		2011847	1					
ANR	2011882	IfStatement	if ( * ch == '^' )		2011847	5					
ANR	2011883	Condition	* ch == '^'	150:5:5806:5815	2011847	0	True				
ANR	2011884	EqualityExpression	* ch == '^'		2011847	0		==			
ANR	2011885	UnaryOperationExpression	* ch		2011847	0					
ANR	2011886	UnaryOperator	*		2011847	0					
ANR	2011887	Identifier	ch		2011847	1					
ANR	2011888	PrimaryExpression	'^'		2011847	1					
ANR	2011889	CompoundStatement		9:17:114:114	2011847	1					
ANR	2011890	ExpressionStatement	cset -> exclude = 1	151:2:5822:5839	2011847	0	True				
ANR	2011891	AssignmentExpression	cset -> exclude = 1		2011847	0		=			
ANR	2011892	PtrMemberAccess	cset -> exclude		2011847	0					
ANR	2011893	Identifier	cset		2011847	0					
ANR	2011894	Identifier	exclude		2011847	1					
ANR	2011895	PrimaryExpression	1		2011847	1					
ANR	2011896	ExpressionStatement	ch = ++ format	152:2:5843:5856	2011847	1	True				
ANR	2011897	AssignmentExpression	ch = ++ format		2011847	0		=			
ANR	2011898	Identifier	ch		2011847	0					
ANR	2011899	UnaryExpression	++ format		2011847	1					
ANR	2011900	IncDec	++		2011847	0					
ANR	2011901	Identifier	format		2011847	1					
ANR	2011902	ExpressionStatement	end = format + 1	154:1:5862:5878	2011847	6	True				
ANR	2011903	AssignmentExpression	end = format + 1		2011847	0		=			
ANR	2011904	Identifier	end		2011847	0					
ANR	2011905	AdditiveExpression	format + 1		2011847	1		+			
ANR	2011906	Identifier	format		2011847	0					
ANR	2011907	PrimaryExpression	1		2011847	1					
ANR	2011908	IfStatement	if ( * ch == ']' )		2011847	7					
ANR	2011909	Condition	* ch == ']'	159:5:5977:5986	2011847	0	True				
ANR	2011910	EqualityExpression	* ch == ']'		2011847	0		==			
ANR	2011911	UnaryOperationExpression	* ch		2011847	0					
ANR	2011912	UnaryOperator	*		2011847	0					
ANR	2011913	Identifier	ch		2011847	1					
ANR	2011914	PrimaryExpression	']'		2011847	1					
ANR	2011915	CompoundStatement		18:17:285:285	2011847	1					
ANR	2011916	ExpressionStatement	ch = end ++	160:2:5993:6003	2011847	0	True				
ANR	2011917	AssignmentExpression	ch = end ++		2011847	0		=			
ANR	2011918	Identifier	ch		2011847	0					
ANR	2011919	PostIncDecOperationExpression	end ++		2011847	1					
ANR	2011920	Identifier	end		2011847	0					
ANR	2011921	IncDec	++		2011847	1					
ANR	2011922	ExpressionStatement	nranges = 0	162:1:6009:6020	2011847	8	True				
ANR	2011923	AssignmentExpression	nranges = 0		2011847	0		=			
ANR	2011924	Identifier	nranges		2011847	0					
ANR	2011925	PrimaryExpression	0		2011847	1					
ANR	2011926	WhileStatement	while ( * ch != ']' )		2011847	9					
ANR	2011927	Condition	* ch != ']'	163:8:6030:6039	2011847	0	True				
ANR	2011928	EqualityExpression	* ch != ']'		2011847	0		!=			
ANR	2011929	UnaryOperationExpression	* ch		2011847	0					
ANR	2011930	UnaryOperator	*		2011847	0					
ANR	2011931	Identifier	ch		2011847	1					
ANR	2011932	PrimaryExpression	']'		2011847	1					
ANR	2011933	CompoundStatement		22:20:338:338	2011847	1					
ANR	2011934	IfStatement	if ( * ch == '-' )		2011847	0					
ANR	2011935	Condition	* ch == '-'	164:6:6050:6059	2011847	0	True				
ANR	2011936	EqualityExpression	* ch == '-'		2011847	0		==			
ANR	2011937	UnaryOperationExpression	* ch		2011847	0					
ANR	2011938	UnaryOperator	*		2011847	0					
ANR	2011939	Identifier	ch		2011847	1					
ANR	2011940	PrimaryExpression	'-'		2011847	1					
ANR	2011941	CompoundStatement		23:18:358:358	2011847	1					
ANR	2011942	ExpressionStatement	nranges ++	165:3:6067:6076	2011847	0	True				
ANR	2011943	PostIncDecOperationExpression	nranges ++		2011847	0					
ANR	2011944	Identifier	nranges		2011847	0					
ANR	2011945	IncDec	++		2011847	1					
ANR	2011946	ExpressionStatement	ch = end ++	167:2:6084:6094	2011847	1	True				
ANR	2011947	AssignmentExpression	ch = end ++		2011847	0		=			
ANR	2011948	Identifier	ch		2011847	0					
ANR	2011949	PostIncDecOperationExpression	end ++		2011847	1					
ANR	2011950	Identifier	end		2011847	0					
ANR	2011951	IncDec	++		2011847	1					
ANR	2011952	ExpressionStatement	"cset -> chars = ( char * ) safe_emalloc ( sizeof ( char ) , ( end - format - 1 ) , 0 )"	170:1:6101:6173	2011847	10	True				
ANR	2011953	AssignmentExpression	"cset -> chars = ( char * ) safe_emalloc ( sizeof ( char ) , ( end - format - 1 ) , 0 )"		2011847	0		=			
ANR	2011954	PtrMemberAccess	cset -> chars		2011847	0					
ANR	2011955	Identifier	cset		2011847	0					
ANR	2011956	Identifier	chars		2011847	1					
ANR	2011957	CastExpression	"( char * ) safe_emalloc ( sizeof ( char ) , ( end - format - 1 ) , 0 )"		2011847	1					
ANR	2011958	CastTarget	char *		2011847	0					
ANR	2011959	CallExpression	"safe_emalloc ( sizeof ( char ) , ( end - format - 1 ) , 0 )"		2011847	1					
ANR	2011960	Callee	safe_emalloc		2011847	0					
ANR	2011961	Identifier	safe_emalloc		2011847	0					
ANR	2011962	ArgumentList	sizeof ( char )		2011847	1					
ANR	2011963	Argument	sizeof ( char )		2011847	0					
ANR	2011964	SizeofExpression	sizeof ( char )		2011847	0					
ANR	2011965	Sizeof	sizeof		2011847	0					
ANR	2011966	SizeofOperand	char		2011847	1					
ANR	2011967	Argument	end - format - 1		2011847	1					
ANR	2011968	AdditiveExpression	end - format - 1		2011847	0		-			
ANR	2011969	Identifier	end		2011847	0					
ANR	2011970	AdditiveExpression	format - 1		2011847	1		-			
ANR	2011971	Identifier	format		2011847	0					
ANR	2011972	PrimaryExpression	1		2011847	1					
ANR	2011973	Argument	0		2011847	2					
ANR	2011974	PrimaryExpression	0		2011847	0					
ANR	2011975	IfStatement	if ( nranges > 0 )		2011847	11					
ANR	2011976	Condition	nranges > 0	171:5:6180:6190	2011847	0	True				
ANR	2011977	RelationalExpression	nranges > 0		2011847	0		>			
ANR	2011978	Identifier	nranges		2011847	0					
ANR	2011979	PrimaryExpression	0		2011847	1					
ANR	2011980	CompoundStatement		30:18:489:489	2011847	1					
ANR	2011981	ExpressionStatement	"cset -> ranges = ( struct Range * ) safe_emalloc ( sizeof ( struct Range ) , nranges , 0 )"	172:2:6197:6275	2011847	0	True				
ANR	2011982	AssignmentExpression	"cset -> ranges = ( struct Range * ) safe_emalloc ( sizeof ( struct Range ) , nranges , 0 )"		2011847	0		=			
ANR	2011983	PtrMemberAccess	cset -> ranges		2011847	0					
ANR	2011984	Identifier	cset		2011847	0					
ANR	2011985	Identifier	ranges		2011847	1					
ANR	2011986	CastExpression	"( struct Range * ) safe_emalloc ( sizeof ( struct Range ) , nranges , 0 )"		2011847	1					
ANR	2011987	CastTarget	struct Range *		2011847	0					
ANR	2011988	CallExpression	"safe_emalloc ( sizeof ( struct Range ) , nranges , 0 )"		2011847	1					
ANR	2011989	Callee	safe_emalloc		2011847	0					
ANR	2011990	Identifier	safe_emalloc		2011847	0					
ANR	2011991	ArgumentList	sizeof ( struct Range )		2011847	1					
ANR	2011992	Argument	sizeof ( struct Range )		2011847	0					
ANR	2011993	SizeofExpression	sizeof ( struct Range )		2011847	0					
ANR	2011994	Sizeof	sizeof		2011847	0					
ANR	2011995	SizeofOperand	struct Range		2011847	1					
ANR	2011996	Argument	nranges		2011847	1					
ANR	2011997	Identifier	nranges		2011847	0					
ANR	2011998	Argument	0		2011847	2					
ANR	2011999	PrimaryExpression	0		2011847	0					
ANR	2012000	ElseStatement	else		2011847	0					
ANR	2012001	CompoundStatement		32:8:581:581	2011847	0					
ANR	2012002	ExpressionStatement	cset -> ranges = NULL	174:2:6289:6308	2011847	0	True				
ANR	2012003	AssignmentExpression	cset -> ranges = NULL		2011847	0		=			
ANR	2012004	PtrMemberAccess	cset -> ranges		2011847	0					
ANR	2012005	Identifier	cset		2011847	0					
ANR	2012006	Identifier	ranges		2011847	1					
ANR	2012007	Identifier	NULL		2011847	1					
ANR	2012008	ExpressionStatement	cset -> nchars = cset -> nranges = 0	180:1:6357:6389	2011847	12	True				
ANR	2012009	AssignmentExpression	cset -> nchars = cset -> nranges = 0		2011847	0		=			
ANR	2012010	PtrMemberAccess	cset -> nchars		2011847	0					
ANR	2012011	Identifier	cset		2011847	0					
ANR	2012012	Identifier	nchars		2011847	1					
ANR	2012013	AssignmentExpression	cset -> nranges = 0		2011847	1		=			
ANR	2012014	PtrMemberAccess	cset -> nranges		2011847	0					
ANR	2012015	Identifier	cset		2011847	0					
ANR	2012016	Identifier	nranges		2011847	1					
ANR	2012017	PrimaryExpression	0		2011847	1					
ANR	2012018	ExpressionStatement	ch = format ++	181:1:6392:6408	2011847	13	True				
ANR	2012019	AssignmentExpression	ch = format ++		2011847	0		=			
ANR	2012020	Identifier	ch		2011847	0					
ANR	2012021	PostIncDecOperationExpression	format ++		2011847	1					
ANR	2012022	Identifier	format		2011847	0					
ANR	2012023	IncDec	++		2011847	1					
ANR	2012024	ExpressionStatement	start = * ch	182:1:6411:6422	2011847	14	True				
ANR	2012025	AssignmentExpression	start = * ch		2011847	0		=			
ANR	2012026	Identifier	start		2011847	0					
ANR	2012027	UnaryOperationExpression	* ch		2011847	1					
ANR	2012028	UnaryOperator	*		2011847	0					
ANR	2012029	Identifier	ch		2011847	1					
ANR	2012030	IfStatement	if ( * ch == ']' || * ch == '-' )		2011847	15					
ANR	2012031	Condition	* ch == ']' || * ch == '-'	183:5:6429:6452	2011847	0	True				
ANR	2012032	OrExpression	* ch == ']' || * ch == '-'		2011847	0		||			
ANR	2012033	EqualityExpression	* ch == ']'		2011847	0		==			
ANR	2012034	UnaryOperationExpression	* ch		2011847	0					
ANR	2012035	UnaryOperator	*		2011847	0					
ANR	2012036	Identifier	ch		2011847	1					
ANR	2012037	PrimaryExpression	']'		2011847	1					
ANR	2012038	EqualityExpression	* ch == '-'		2011847	1		==			
ANR	2012039	UnaryOperationExpression	* ch		2011847	0					
ANR	2012040	UnaryOperator	*		2011847	0					
ANR	2012041	Identifier	ch		2011847	1					
ANR	2012042	PrimaryExpression	'-'		2011847	1					
ANR	2012043	CompoundStatement		42:31:751:751	2011847	1					
ANR	2012044	ExpressionStatement	cset -> chars [ cset -> nchars ++ ] = * ch	184:2:6459:6492	2011847	0	True				
ANR	2012045	AssignmentExpression	cset -> chars [ cset -> nchars ++ ] = * ch		2011847	0		=			
ANR	2012046	ArrayIndexing	cset -> chars [ cset -> nchars ++ ]		2011847	0					
ANR	2012047	PtrMemberAccess	cset -> chars		2011847	0					
ANR	2012048	Identifier	cset		2011847	0					
ANR	2012049	Identifier	chars		2011847	1					
ANR	2012050	PostIncDecOperationExpression	cset -> nchars ++		2011847	1					
ANR	2012051	PtrMemberAccess	cset -> nchars		2011847	0					
ANR	2012052	Identifier	cset		2011847	0					
ANR	2012053	Identifier	nchars		2011847	1					
ANR	2012054	IncDec	++		2011847	1					
ANR	2012055	UnaryOperationExpression	* ch		2011847	1					
ANR	2012056	UnaryOperator	*		2011847	0					
ANR	2012057	Identifier	ch		2011847	1					
ANR	2012058	ExpressionStatement	ch = format ++	185:2:6496:6509	2011847	1	True				
ANR	2012059	AssignmentExpression	ch = format ++		2011847	0		=			
ANR	2012060	Identifier	ch		2011847	0					
ANR	2012061	PostIncDecOperationExpression	format ++		2011847	1					
ANR	2012062	Identifier	format		2011847	0					
ANR	2012063	IncDec	++		2011847	1					
ANR	2012064	WhileStatement	while ( * ch != ']' )		2011847	16					
ANR	2012065	Condition	* ch != ']'	187:8:6522:6531	2011847	0	True				
ANR	2012066	EqualityExpression	* ch != ']'		2011847	0		!=			
ANR	2012067	UnaryOperationExpression	* ch		2011847	0					
ANR	2012068	UnaryOperator	*		2011847	0					
ANR	2012069	Identifier	ch		2011847	1					
ANR	2012070	PrimaryExpression	']'		2011847	1					
ANR	2012071	CompoundStatement		46:20:830:830	2011847	1					
ANR	2012072	IfStatement	if ( * format == '-' )		2011847	0					
ANR	2012073	Condition	* format == '-'	188:6:6542:6555	2011847	0	True				
ANR	2012074	EqualityExpression	* format == '-'		2011847	0		==			
ANR	2012075	UnaryOperationExpression	* format		2011847	0					
ANR	2012076	UnaryOperator	*		2011847	0					
ANR	2012077	Identifier	format		2011847	1					
ANR	2012078	PrimaryExpression	'-'		2011847	1					
ANR	2012079	CompoundStatement		47:22:854:854	2011847	1					
ANR	2012080	ExpressionStatement	start = * ch	193:3:6653:6664	2011847	0	True				
ANR	2012081	AssignmentExpression	start = * ch		2011847	0		=			
ANR	2012082	Identifier	start		2011847	0					
ANR	2012083	UnaryOperationExpression	* ch		2011847	1					
ANR	2012084	UnaryOperator	*		2011847	0					
ANR	2012085	Identifier	ch		2011847	1					
ANR	2012086	ElseStatement	else		2011847	0					
ANR	2012087	IfStatement	if ( * ch == '-' )		2011847	0					
ANR	2012088	Condition	* ch == '-'	194:13:6679:6688	2011847	0	True				
ANR	2012089	EqualityExpression	* ch == '-'		2011847	0		==			
ANR	2012090	UnaryOperationExpression	* ch		2011847	0					
ANR	2012091	UnaryOperator	*		2011847	0					
ANR	2012092	Identifier	ch		2011847	1					
ANR	2012093	PrimaryExpression	'-'		2011847	1					
ANR	2012094	CompoundStatement		53:25:987:987	2011847	1					
ANR	2012095	IfStatement	if ( * format == ']' )		2011847	0					
ANR	2012096	Condition	* format == ']'	200:7:6880:6893	2011847	0	True				
ANR	2012097	EqualityExpression	* format == ']'		2011847	0		==			
ANR	2012098	UnaryOperationExpression	* format		2011847	0					
ANR	2012099	UnaryOperator	*		2011847	0					
ANR	2012100	Identifier	format		2011847	1					
ANR	2012101	PrimaryExpression	']'		2011847	1					
ANR	2012102	CompoundStatement		59:23:1192:1192	2011847	1					
ANR	2012103	ExpressionStatement	cset -> chars [ cset -> nchars ++ ] = start	201:4:6902:6937	2011847	0	True				
ANR	2012104	AssignmentExpression	cset -> chars [ cset -> nchars ++ ] = start		2011847	0		=			
ANR	2012105	ArrayIndexing	cset -> chars [ cset -> nchars ++ ]		2011847	0					
ANR	2012106	PtrMemberAccess	cset -> chars		2011847	0					
ANR	2012107	Identifier	cset		2011847	0					
ANR	2012108	Identifier	chars		2011847	1					
ANR	2012109	PostIncDecOperationExpression	cset -> nchars ++		2011847	1					
ANR	2012110	PtrMemberAccess	cset -> nchars		2011847	0					
ANR	2012111	Identifier	cset		2011847	0					
ANR	2012112	Identifier	nchars		2011847	1					
ANR	2012113	IncDec	++		2011847	1					
ANR	2012114	Identifier	start		2011847	1					
ANR	2012115	ExpressionStatement	cset -> chars [ cset -> nchars ++ ] = * ch	202:4:6943:6976	2011847	1	True				
ANR	2012116	AssignmentExpression	cset -> chars [ cset -> nchars ++ ] = * ch		2011847	0		=			
ANR	2012117	ArrayIndexing	cset -> chars [ cset -> nchars ++ ]		2011847	0					
ANR	2012118	PtrMemberAccess	cset -> chars		2011847	0					
ANR	2012119	Identifier	cset		2011847	0					
ANR	2012120	Identifier	chars		2011847	1					
ANR	2012121	PostIncDecOperationExpression	cset -> nchars ++		2011847	1					
ANR	2012122	PtrMemberAccess	cset -> nchars		2011847	0					
ANR	2012123	Identifier	cset		2011847	0					
ANR	2012124	Identifier	nchars		2011847	1					
ANR	2012125	IncDec	++		2011847	1					
ANR	2012126	UnaryOperationExpression	* ch		2011847	1					
ANR	2012127	UnaryOperator	*		2011847	0					
ANR	2012128	Identifier	ch		2011847	1					
ANR	2012129	ElseStatement	else		2011847	0					
ANR	2012130	CompoundStatement		62:10:1284:1284	2011847	0					
ANR	2012131	ExpressionStatement	ch = format ++	204:4:6994:7007	2011847	0	True				
ANR	2012132	AssignmentExpression	ch = format ++		2011847	0		=			
ANR	2012133	Identifier	ch		2011847	0					
ANR	2012134	PostIncDecOperationExpression	format ++		2011847	1					
ANR	2012135	Identifier	format		2011847	0					
ANR	2012136	IncDec	++		2011847	1					
ANR	2012137	IfStatement	if ( start < * ch )		2011847	1					
ANR	2012138	Condition	start < * ch	209:8:7087:7097	2011847	0	True				
ANR	2012139	RelationalExpression	start < * ch		2011847	0		<			
ANR	2012140	Identifier	start		2011847	0					
ANR	2012141	UnaryOperationExpression	* ch		2011847	1					
ANR	2012142	UnaryOperator	*		2011847	0					
ANR	2012143	Identifier	ch		2011847	1					
ANR	2012144	CompoundStatement		68:21:1396:1396	2011847	1					
ANR	2012145	ExpressionStatement	cset -> ranges [ cset -> nranges ] . start = start	210:5:7107:7148	2011847	0	True				
ANR	2012146	AssignmentExpression	cset -> ranges [ cset -> nranges ] . start = start		2011847	0		=			
ANR	2012147	MemberAccess	cset -> ranges [ cset -> nranges ] . start		2011847	0					
ANR	2012148	ArrayIndexing	cset -> ranges [ cset -> nranges ]		2011847	0					
ANR	2012149	PtrMemberAccess	cset -> ranges		2011847	0					
ANR	2012150	Identifier	cset		2011847	0					
ANR	2012151	Identifier	ranges		2011847	1					
ANR	2012152	PtrMemberAccess	cset -> nranges		2011847	1					
ANR	2012153	Identifier	cset		2011847	0					
ANR	2012154	Identifier	nranges		2011847	1					
ANR	2012155	Identifier	start		2011847	1					
ANR	2012156	Identifier	start		2011847	1					
ANR	2012157	ExpressionStatement	cset -> ranges [ cset -> nranges ] . end = * ch	211:5:7155:7192	2011847	1	True				
ANR	2012158	AssignmentExpression	cset -> ranges [ cset -> nranges ] . end = * ch		2011847	0		=			
ANR	2012159	MemberAccess	cset -> ranges [ cset -> nranges ] . end		2011847	0					
ANR	2012160	ArrayIndexing	cset -> ranges [ cset -> nranges ]		2011847	0					
ANR	2012161	PtrMemberAccess	cset -> ranges		2011847	0					
ANR	2012162	Identifier	cset		2011847	0					
ANR	2012163	Identifier	ranges		2011847	1					
ANR	2012164	PtrMemberAccess	cset -> nranges		2011847	1					
ANR	2012165	Identifier	cset		2011847	0					
ANR	2012166	Identifier	nranges		2011847	1					
ANR	2012167	Identifier	end		2011847	1					
ANR	2012168	UnaryOperationExpression	* ch		2011847	1					
ANR	2012169	UnaryOperator	*		2011847	0					
ANR	2012170	Identifier	ch		2011847	1					
ANR	2012171	ElseStatement	else		2011847	0					
ANR	2012172	CompoundStatement		71:11:1501:1501	2011847	0					
ANR	2012173	ExpressionStatement	cset -> ranges [ cset -> nranges ] . start = * ch	213:5:7212:7251	2011847	0	True				
ANR	2012174	AssignmentExpression	cset -> ranges [ cset -> nranges ] . start = * ch		2011847	0		=			
ANR	2012175	MemberAccess	cset -> ranges [ cset -> nranges ] . start		2011847	0					
ANR	2012176	ArrayIndexing	cset -> ranges [ cset -> nranges ]		2011847	0					
ANR	2012177	PtrMemberAccess	cset -> ranges		2011847	0					
ANR	2012178	Identifier	cset		2011847	0					
ANR	2012179	Identifier	ranges		2011847	1					
ANR	2012180	PtrMemberAccess	cset -> nranges		2011847	1					
ANR	2012181	Identifier	cset		2011847	0					
ANR	2012182	Identifier	nranges		2011847	1					
ANR	2012183	Identifier	start		2011847	1					
ANR	2012184	UnaryOperationExpression	* ch		2011847	1					
ANR	2012185	UnaryOperator	*		2011847	0					
ANR	2012186	Identifier	ch		2011847	1					
ANR	2012187	ExpressionStatement	cset -> ranges [ cset -> nranges ] . end = start	214:5:7258:7297	2011847	1	True				
ANR	2012188	AssignmentExpression	cset -> ranges [ cset -> nranges ] . end = start		2011847	0		=			
ANR	2012189	MemberAccess	cset -> ranges [ cset -> nranges ] . end		2011847	0					
ANR	2012190	ArrayIndexing	cset -> ranges [ cset -> nranges ]		2011847	0					
ANR	2012191	PtrMemberAccess	cset -> ranges		2011847	0					
ANR	2012192	Identifier	cset		2011847	0					
ANR	2012193	Identifier	ranges		2011847	1					
ANR	2012194	PtrMemberAccess	cset -> nranges		2011847	1					
ANR	2012195	Identifier	cset		2011847	0					
ANR	2012196	Identifier	nranges		2011847	1					
ANR	2012197	Identifier	end		2011847	1					
ANR	2012198	Identifier	start		2011847	1					
ANR	2012199	ExpressionStatement	cset -> nranges ++	216:4:7309:7324	2011847	2	True				
ANR	2012200	PostIncDecOperationExpression	cset -> nranges ++		2011847	0					
ANR	2012201	PtrMemberAccess	cset -> nranges		2011847	0					
ANR	2012202	Identifier	cset		2011847	0					
ANR	2012203	Identifier	nranges		2011847	1					
ANR	2012204	IncDec	++		2011847	1					
ANR	2012205	ElseStatement	else		2011847	0					
ANR	2012206	CompoundStatement		77:9:1636:1636	2011847	0					
ANR	2012207	ExpressionStatement	cset -> chars [ cset -> nchars ++ ] = * ch	219:3:7345:7378	2011847	0	True				
ANR	2012208	AssignmentExpression	cset -> chars [ cset -> nchars ++ ] = * ch		2011847	0		=			
ANR	2012209	ArrayIndexing	cset -> chars [ cset -> nchars ++ ]		2011847	0					
ANR	2012210	PtrMemberAccess	cset -> chars		2011847	0					
ANR	2012211	Identifier	cset		2011847	0					
ANR	2012212	Identifier	chars		2011847	1					
ANR	2012213	PostIncDecOperationExpression	cset -> nchars ++		2011847	1					
ANR	2012214	PtrMemberAccess	cset -> nchars		2011847	0					
ANR	2012215	Identifier	cset		2011847	0					
ANR	2012216	Identifier	nchars		2011847	1					
ANR	2012217	IncDec	++		2011847	1					
ANR	2012218	UnaryOperationExpression	* ch		2011847	1					
ANR	2012219	UnaryOperator	*		2011847	0					
ANR	2012220	Identifier	ch		2011847	1					
ANR	2012221	ExpressionStatement	ch = format ++	221:2:7386:7399	2011847	1	True				
ANR	2012222	AssignmentExpression	ch = format ++		2011847	0		=			
ANR	2012223	Identifier	ch		2011847	0					
ANR	2012224	PostIncDecOperationExpression	format ++		2011847	1					
ANR	2012225	Identifier	format		2011847	0					
ANR	2012226	IncDec	++		2011847	1					
ANR	2012227	ReturnStatement	return format ;	223:1:7405:7418	2011847	17	True				
ANR	2012228	Identifier	format		2011847	0					
ANR	2012229	ReturnType	static char *		2011847	1					
ANR	2012230	Identifier	BuildCharSet		2011847	2					
ANR	2012231	ParameterList	"CharSet * cset , char * format"		2011847	3					
ANR	2012232	Parameter	CharSet * cset	141:27:5674:5686	2011847	0	True				
ANR	2012233	ParameterType	CharSet *		2011847	0					
ANR	2012234	Identifier	cset		2011847	1					
ANR	2012235	Parameter	char * format	141:42:5689:5700	2011847	1	True				
ANR	2012236	ParameterType	char *		2011847	0					
ANR	2012237	Identifier	format		2011847	1					
ANR	2012238	CFGEntryNode	ENTRY		2011847		True				
ANR	2012239	CFGExitNode	EXIT		2011847		True				
ANR	2012240	Symbol	NULL		2011847						
ANR	2012241	Symbol	nranges		2011847						
ANR	2012242	Symbol	cset -> ranges [ cset -> nranges ] . end		2011847						
ANR	2012243	Symbol	ch		2011847						
ANR	2012244	Symbol	format		2011847						
ANR	2012245	Symbol	start		2011847						
ANR	2012246	Symbol	* ch		2011847						
ANR	2012247	Symbol	cset -> exclude		2011847						
ANR	2012248	Symbol	* cset		2011847						
ANR	2012249	Symbol	cset -> nchars		2011847						
ANR	2012250	Symbol	* cset -> chars		2011847						
ANR	2012251	Symbol	cset		2011847						
ANR	2012252	Symbol	cset -> chars		2011847						
ANR	2012253	Symbol	cset -> nranges		2011847						
ANR	2012254	Symbol	cset -> ranges		2011847						
ANR	2012255	Symbol	cset -> ranges [ cset -> nranges ] . start		2011847						
ANR	2012256	Symbol	* format		2011847						
ANR	2012257	Symbol	* cset -> ranges		2011847						
ANR	2012258	Symbol	end		2011847						
ANR	2012259	Symbol	safe_emalloc		2011847						
ANR	2012260	Symbol	* * cset		2011847						
ANR	2012261	Symbol	* cset -> nranges		2011847						
ANR	2012262	Function	CharInSet	242:0:7783:8178							
ANR	2012263	FunctionDef	"CharInSet (CharSet * cset , int c)"		2012262	0					
ANR	2012264	CompoundStatement		243:0:7826:8178	2012262	0					
ANR	2012265	IdentifierDeclStatement	char ch = ( char ) c ;	244:1:7829:7847	2012262	0	True				
ANR	2012266	IdentifierDecl	ch = ( char ) c		2012262	0					
ANR	2012267	IdentifierDeclType	char		2012262	0					
ANR	2012268	Identifier	ch		2012262	1					
ANR	2012269	AssignmentExpression	ch = ( char ) c		2012262	2		=			
ANR	2012270	Identifier	ch		2012262	0					
ANR	2012271	CastExpression	( char ) c		2012262	1					
ANR	2012272	CastTarget	char		2012262	0					
ANR	2012273	Identifier	c		2012262	1					
ANR	2012274	IdentifierDeclStatement	"int i , match = 0 ;"	245:1:7850:7866	2012262	1	True				
ANR	2012275	IdentifierDecl	i		2012262	0					
ANR	2012276	IdentifierDeclType	int		2012262	0					
ANR	2012277	Identifier	i		2012262	1					
ANR	2012278	IdentifierDecl	match = 0		2012262	1					
ANR	2012279	IdentifierDeclType	int		2012262	0					
ANR	2012280	Identifier	match		2012262	1					
ANR	2012281	AssignmentExpression	match = 0		2012262	2		=			
ANR	2012282	Identifier	match		2012262	0					
ANR	2012283	PrimaryExpression	0		2012262	1					
ANR	2012284	ForStatement	for ( i = 0 ; i < cset -> nchars ; i ++ )		2012262	2					
ANR	2012285	ForInit	i = 0 ;	247:6:7875:7880	2012262	0	True				
ANR	2012286	AssignmentExpression	i = 0		2012262	0		=			
ANR	2012287	Identifier	i		2012262	0					
ANR	2012288	PrimaryExpression	0		2012262	1					
ANR	2012289	Condition	i < cset -> nchars	247:13:7882:7897	2012262	1	True				
ANR	2012290	RelationalExpression	i < cset -> nchars		2012262	0		<			
ANR	2012291	Identifier	i		2012262	0					
ANR	2012292	PtrMemberAccess	cset -> nchars		2012262	1					
ANR	2012293	Identifier	cset		2012262	0					
ANR	2012294	Identifier	nchars		2012262	1					
ANR	2012295	PostIncDecOperationExpression	i ++	247:31:7900:7902	2012262	2	True				
ANR	2012296	Identifier	i		2012262	0					
ANR	2012297	IncDec	++		2012262	1					
ANR	2012298	CompoundStatement		5:36:78:78	2012262	3					
ANR	2012299	IfStatement	if ( cset -> chars [ i ] == ch )		2012262	0					
ANR	2012300	Condition	cset -> chars [ i ] == ch	248:6:7913:7932	2012262	0	True				
ANR	2012301	EqualityExpression	cset -> chars [ i ] == ch		2012262	0		==			
ANR	2012302	ArrayIndexing	cset -> chars [ i ]		2012262	0					
ANR	2012303	PtrMemberAccess	cset -> chars		2012262	0					
ANR	2012304	Identifier	cset		2012262	0					
ANR	2012305	Identifier	chars		2012262	1					
ANR	2012306	Identifier	i		2012262	1					
ANR	2012307	Identifier	ch		2012262	1					
ANR	2012308	CompoundStatement		6:28:108:108	2012262	1					
ANR	2012309	ExpressionStatement	match = 1	249:3:7940:7949	2012262	0	True				
ANR	2012310	AssignmentExpression	match = 1		2012262	0		=			
ANR	2012311	Identifier	match		2012262	0					
ANR	2012312	PrimaryExpression	1		2012262	1					
ANR	2012313	BreakStatement	break ;	250:3:7954:7959	2012262	1	True				
ANR	2012314	IfStatement	if ( ! match )		2012262	3					
ANR	2012315	Condition	! match	253:5:7973:7978	2012262	0	True				
ANR	2012316	UnaryOperationExpression	! match		2012262	0					
ANR	2012317	UnaryOperator	!		2012262	0					
ANR	2012318	Identifier	match		2012262	1					
ANR	2012319	CompoundStatement		11:13:154:154	2012262	1					
ANR	2012320	ForStatement	for ( i = 0 ; i < cset -> nranges ; i ++ )		2012262	0					
ANR	2012321	ForInit	i = 0 ;	254:7:7990:7995	2012262	0	True				
ANR	2012322	AssignmentExpression	i = 0		2012262	0		=			
ANR	2012323	Identifier	i		2012262	0					
ANR	2012324	PrimaryExpression	0		2012262	1					
ANR	2012325	Condition	i < cset -> nranges	254:14:7997:8013	2012262	1	True				
ANR	2012326	RelationalExpression	i < cset -> nranges		2012262	0		<			
ANR	2012327	Identifier	i		2012262	0					
ANR	2012328	PtrMemberAccess	cset -> nranges		2012262	1					
ANR	2012329	Identifier	cset		2012262	0					
ANR	2012330	Identifier	nranges		2012262	1					
ANR	2012331	PostIncDecOperationExpression	i ++	254:33:8016:8018	2012262	2	True				
ANR	2012332	Identifier	i		2012262	0					
ANR	2012333	IncDec	++		2012262	1					
ANR	2012334	CompoundStatement		12:38:194:194	2012262	3					
ANR	2012335	IfStatement	if ( ( cset -> ranges [ i ] . start <= ch ) && ( ch <= cset -> ranges [ i ] . end ) )		2012262	0					
ANR	2012336	Condition	( cset -> ranges [ i ] . start <= ch ) && ( ch <= cset -> ranges [ i ] . end )	255:7:8030:8093	2012262	0	True				
ANR	2012337	AndExpression	( cset -> ranges [ i ] . start <= ch ) && ( ch <= cset -> ranges [ i ] . end )		2012262	0		&&			
ANR	2012338	RelationalExpression	cset -> ranges [ i ] . start <= ch		2012262	0		<=			
ANR	2012339	MemberAccess	cset -> ranges [ i ] . start		2012262	0					
ANR	2012340	ArrayIndexing	cset -> ranges [ i ]		2012262	0					
ANR	2012341	PtrMemberAccess	cset -> ranges		2012262	0					
ANR	2012342	Identifier	cset		2012262	0					
ANR	2012343	Identifier	ranges		2012262	1					
ANR	2012344	Identifier	i		2012262	1					
ANR	2012345	Identifier	start		2012262	1					
ANR	2012346	Identifier	ch		2012262	1					
ANR	2012347	RelationalExpression	ch <= cset -> ranges [ i ] . end		2012262	1		<=			
ANR	2012348	Identifier	ch		2012262	0					
ANR	2012349	MemberAccess	cset -> ranges [ i ] . end		2012262	1					
ANR	2012350	ArrayIndexing	cset -> ranges [ i ]		2012262	0					
ANR	2012351	PtrMemberAccess	cset -> ranges		2012262	0					
ANR	2012352	Identifier	cset		2012262	0					
ANR	2012353	Identifier	ranges		2012262	1					
ANR	2012354	Identifier	i		2012262	1					
ANR	2012355	Identifier	end		2012262	1					
ANR	2012356	CompoundStatement		14:36:269:269	2012262	1					
ANR	2012357	ExpressionStatement	match = 1	257:4:8102:8111	2012262	0	True				
ANR	2012358	AssignmentExpression	match = 1		2012262	0		=			
ANR	2012359	Identifier	match		2012262	0					
ANR	2012360	PrimaryExpression	1		2012262	1					
ANR	2012361	BreakStatement	break ;	258:4:8117:8122	2012262	1	True				
ANR	2012362	ReturnStatement	return ( cset -> exclude ? ! match : match ) ;	262:1:8137:8176	2012262	4	True				
ANR	2012363	ConditionalExpression	cset -> exclude ? ! match : match		2012262	0					
ANR	2012364	Condition	cset -> exclude		2012262	0					
ANR	2012365	PtrMemberAccess	cset -> exclude		2012262	0					
ANR	2012366	Identifier	cset		2012262	0					
ANR	2012367	Identifier	exclude		2012262	1					
ANR	2012368	UnaryOperationExpression	! match		2012262	1					
ANR	2012369	UnaryOperator	!		2012262	0					
ANR	2012370	Identifier	match		2012262	1					
ANR	2012371	Identifier	match		2012262	2					
ANR	2012372	ReturnType	static int		2012262	1					
ANR	2012373	Identifier	CharInSet		2012262	2					
ANR	2012374	ParameterList	"CharSet * cset , int c"		2012262	3					
ANR	2012375	Parameter	CharSet * cset	242:21:7804:7816	2012262	0	True				
ANR	2012376	ParameterType	CharSet *		2012262	0					
ANR	2012377	Identifier	cset		2012262	1					
ANR	2012378	Parameter	int c	242:36:7819:7823	2012262	1	True				
ANR	2012379	ParameterType	int		2012262	0					
ANR	2012380	Identifier	c		2012262	1					
ANR	2012381	CFGEntryNode	ENTRY		2012262		True				
ANR	2012382	CFGExitNode	EXIT		2012262		True				
ANR	2012383	Symbol	cset -> ranges [ i ] . start		2012262						
ANR	2012384	Symbol	cset -> ranges [ i ] . end		2012262						
ANR	2012385	Symbol	c		2012262						
ANR	2012386	Symbol	ch		2012262						
ANR	2012387	Symbol	match		2012262						
ANR	2012388	Symbol	* cset		2012262						
ANR	2012389	Symbol	cset -> exclude		2012262						
ANR	2012390	Symbol	i		2012262						
ANR	2012391	Symbol	cset -> nchars		2012262						
ANR	2012392	Symbol	* cset -> chars		2012262						
ANR	2012393	Symbol	cset		2012262						
ANR	2012394	Symbol	cset -> chars		2012262						
ANR	2012395	Symbol	cset -> nranges		2012262						
ANR	2012396	Symbol	* i		2012262						
ANR	2012397	Symbol	cset -> ranges		2012262						
ANR	2012398	Symbol	* cset -> ranges		2012262						
ANR	2012399	Symbol	* * cset		2012262						
ANR	2012400	Function	ReleaseCharSet	281:0:8499:8627							
ANR	2012401	FunctionDef	ReleaseCharSet (CharSet * cset)		2012400	0					
ANR	2012402	CompoundStatement		282:0:8541:8627	2012400	0					
ANR	2012403	ExpressionStatement	efree ( ( char * ) cset -> chars )	283:1:8544:8570	2012400	0	True				
ANR	2012404	CallExpression	efree ( ( char * ) cset -> chars )		2012400	0					
ANR	2012405	Callee	efree		2012400	0					
ANR	2012406	Identifier	efree		2012400	0					
ANR	2012407	ArgumentList	( char * ) cset -> chars		2012400	1					
ANR	2012408	Argument	( char * ) cset -> chars		2012400	0					
ANR	2012409	CastExpression	( char * ) cset -> chars		2012400	0					
ANR	2012410	CastTarget	char *		2012400	0					
ANR	2012411	PtrMemberAccess	cset -> chars		2012400	1					
ANR	2012412	Identifier	cset		2012400	0					
ANR	2012413	Identifier	chars		2012400	1					
ANR	2012414	IfStatement	if ( cset -> ranges )		2012400	1					
ANR	2012415	Condition	cset -> ranges	284:5:8577:8588	2012400	0	True				
ANR	2012416	PtrMemberAccess	cset -> ranges		2012400	0					
ANR	2012417	Identifier	cset		2012400	0					
ANR	2012418	Identifier	ranges		2012400	1					
ANR	2012419	CompoundStatement		3:19:49:49	2012400	1					
ANR	2012420	ExpressionStatement	efree ( ( char * ) cset -> ranges )	285:2:8595:8622	2012400	0	True				
ANR	2012421	CallExpression	efree ( ( char * ) cset -> ranges )		2012400	0					
ANR	2012422	Callee	efree		2012400	0					
ANR	2012423	Identifier	efree		2012400	0					
ANR	2012424	ArgumentList	( char * ) cset -> ranges		2012400	1					
ANR	2012425	Argument	( char * ) cset -> ranges		2012400	0					
ANR	2012426	CastExpression	( char * ) cset -> ranges		2012400	0					
ANR	2012427	CastTarget	char *		2012400	0					
ANR	2012428	PtrMemberAccess	cset -> ranges		2012400	1					
ANR	2012429	Identifier	cset		2012400	0					
ANR	2012430	Identifier	ranges		2012400	1					
ANR	2012431	ReturnType	static void		2012400	1					
ANR	2012432	Identifier	ReleaseCharSet		2012400	2					
ANR	2012433	ParameterList	CharSet * cset		2012400	3					
ANR	2012434	Parameter	CharSet * cset	281:27:8526:8538	2012400	0	True				
ANR	2012435	ParameterType	CharSet *		2012400	0					
ANR	2012436	Identifier	cset		2012400	1					
ANR	2012437	CFGEntryNode	ENTRY		2012400		True				
ANR	2012438	CFGExitNode	EXIT		2012400		True				
ANR	2012439	Symbol	cset		2012400						
ANR	2012440	Symbol	cset -> chars		2012400						
ANR	2012441	Symbol	cset -> ranges		2012400						
ANR	2012442	Symbol	* cset		2012400						
ANR	2012443	Function	ValidateFormat	311:0:9281:15206							
ANR	2012444	FunctionDef	"ValidateFormat (char * format , int numVars , int * totalSubs)"		2012443	0					
ANR	2012445	CompoundStatement		312:0:9350:15206	2012443	0					
ANR	2012446	Statement	define	313:1:9353:9358	2012443	0	True				
ANR	2012447	Statement	STATIC_LIST_SIZE	313:8:9360:9375	2012443	1	True				
ANR	2012448	Statement	16	313:25:9377:9378	2012443	2	True				
ANR	2012449	IdentifierDeclStatement	"int gotXpg , gotSequential , value , i , flags ;"	314:1:9381:9423	2012443	3	True				
ANR	2012450	IdentifierDecl	gotXpg		2012443	0					
ANR	2012451	IdentifierDeclType	int		2012443	0					
ANR	2012452	Identifier	gotXpg		2012443	1					
ANR	2012453	IdentifierDecl	gotSequential		2012443	1					
ANR	2012454	IdentifierDeclType	int		2012443	0					
ANR	2012455	Identifier	gotSequential		2012443	1					
ANR	2012456	IdentifierDecl	value		2012443	2					
ANR	2012457	IdentifierDeclType	int		2012443	0					
ANR	2012458	Identifier	value		2012443	1					
ANR	2012459	IdentifierDecl	i		2012443	3					
ANR	2012460	IdentifierDeclType	int		2012443	0					
ANR	2012461	Identifier	i		2012443	1					
ANR	2012462	IdentifierDecl	flags		2012443	4					
ANR	2012463	IdentifierDeclType	int		2012443	0					
ANR	2012464	Identifier	flags		2012443	1					
ANR	2012465	IdentifierDeclStatement	"char * end , * ch = NULL ;"	315:1:9426:9447	2012443	4	True				
ANR	2012466	IdentifierDecl	* end		2012443	0					
ANR	2012467	IdentifierDeclType	char *		2012443	0					
ANR	2012468	Identifier	end		2012443	1					
ANR	2012469	IdentifierDecl	* ch = NULL		2012443	1					
ANR	2012470	IdentifierDeclType	char *		2012443	0					
ANR	2012471	Identifier	ch		2012443	1					
ANR	2012472	AssignmentExpression	* ch = NULL		2012443	2		=			
ANR	2012473	Identifier	NULL		2012443	0					
ANR	2012474	Identifier	NULL		2012443	1					
ANR	2012475	IdentifierDeclStatement	int staticAssign [ STATIC_LIST_SIZE ] ;	316:1:9450:9484	2012443	5	True				
ANR	2012476	IdentifierDecl	staticAssign [ STATIC_LIST_SIZE ]		2012443	0					
ANR	2012477	IdentifierDeclType	int [ STATIC_LIST_SIZE ]		2012443	0					
ANR	2012478	Identifier	staticAssign		2012443	1					
ANR	2012479	Identifier	STATIC_LIST_SIZE		2012443	2					
ANR	2012480	IdentifierDeclStatement	int * nassign = staticAssign ;	317:1:9487:9514	2012443	6	True				
ANR	2012481	IdentifierDecl	* nassign = staticAssign		2012443	0					
ANR	2012482	IdentifierDeclType	int *		2012443	0					
ANR	2012483	Identifier	nassign		2012443	1					
ANR	2012484	AssignmentExpression	* nassign = staticAssign		2012443	2		=			
ANR	2012485	Identifier	staticAssign		2012443	0					
ANR	2012486	Identifier	staticAssign		2012443	1					
ANR	2012487	IdentifierDeclStatement	"int objIndex , xpgSize , nspace = STATIC_LIST_SIZE ;"	318:1:9517:9565	2012443	7	True				
ANR	2012488	IdentifierDecl	objIndex		2012443	0					
ANR	2012489	IdentifierDeclType	int		2012443	0					
ANR	2012490	Identifier	objIndex		2012443	1					
ANR	2012491	IdentifierDecl	xpgSize		2012443	1					
ANR	2012492	IdentifierDeclType	int		2012443	0					
ANR	2012493	Identifier	xpgSize		2012443	1					
ANR	2012494	IdentifierDecl	nspace = STATIC_LIST_SIZE		2012443	2					
ANR	2012495	IdentifierDeclType	int		2012443	0					
ANR	2012496	Identifier	nspace		2012443	1					
ANR	2012497	AssignmentExpression	nspace = STATIC_LIST_SIZE		2012443	2		=			
ANR	2012498	Identifier	STATIC_LIST_SIZE		2012443	0					
ANR	2012499	Identifier	STATIC_LIST_SIZE		2012443	1					
ANR	2012500	ExpressionStatement	TSRMLS_FETCH ( )	319:1:9568:9582	2012443	8	True				
ANR	2012501	CallExpression	TSRMLS_FETCH ( )		2012443	0					
ANR	2012502	Callee	TSRMLS_FETCH		2012443	0					
ANR	2012503	Identifier	TSRMLS_FETCH		2012443	0					
ANR	2012504	ArgumentList			2012443	1					
ANR	2012505	IfStatement	if ( numVars > nspace )		2012443	9					
ANR	2012506	Condition	numVars > nspace	326:5:9790:9805	2012443	0	True				
ANR	2012507	RelationalExpression	numVars > nspace		2012443	0		>			
ANR	2012508	Identifier	numVars		2012443	0					
ANR	2012509	Identifier	nspace		2012443	1					
ANR	2012510	CompoundStatement		15:23:457:457	2012443	1					
ANR	2012511	ExpressionStatement	"nassign = ( int * ) safe_emalloc ( sizeof ( int ) , numVars , 0 )"	327:2:9812:9865	2012443	0	True				
ANR	2012512	AssignmentExpression	"nassign = ( int * ) safe_emalloc ( sizeof ( int ) , numVars , 0 )"		2012443	0		=			
ANR	2012513	Identifier	nassign		2012443	0					
ANR	2012514	CastExpression	"( int * ) safe_emalloc ( sizeof ( int ) , numVars , 0 )"		2012443	1					
ANR	2012515	CastTarget	int *		2012443	0					
ANR	2012516	CallExpression	"safe_emalloc ( sizeof ( int ) , numVars , 0 )"		2012443	1					
ANR	2012517	Callee	safe_emalloc		2012443	0					
ANR	2012518	Identifier	safe_emalloc		2012443	0					
ANR	2012519	ArgumentList	sizeof ( int )		2012443	1					
ANR	2012520	Argument	sizeof ( int )		2012443	0					
ANR	2012521	SizeofExpression	sizeof ( int )		2012443	0					
ANR	2012522	Sizeof	sizeof		2012443	0					
ANR	2012523	SizeofOperand	int		2012443	1					
ANR	2012524	Argument	numVars		2012443	1					
ANR	2012525	Identifier	numVars		2012443	0					
ANR	2012526	Argument	0		2012443	2					
ANR	2012527	PrimaryExpression	0		2012443	0					
ANR	2012528	ExpressionStatement	nspace = numVars	328:2:9869:9885	2012443	1	True				
ANR	2012529	AssignmentExpression	nspace = numVars		2012443	0		=			
ANR	2012530	Identifier	nspace		2012443	0					
ANR	2012531	Identifier	numVars		2012443	1					
ANR	2012532	ForStatement	for ( i = 0 ; i < nspace ; i ++ )		2012443	10					
ANR	2012533	ForInit	i = 0 ;	330:6:9896:9901	2012443	0	True				
ANR	2012534	AssignmentExpression	i = 0		2012443	0		=			
ANR	2012535	Identifier	i		2012443	0					
ANR	2012536	PrimaryExpression	0		2012443	1					
ANR	2012537	Condition	i < nspace	330:13:9903:9912	2012443	1	True				
ANR	2012538	RelationalExpression	i < nspace		2012443	0		<			
ANR	2012539	Identifier	i		2012443	0					
ANR	2012540	Identifier	nspace		2012443	1					
ANR	2012541	PostIncDecOperationExpression	i ++	330:25:9915:9917	2012443	2	True				
ANR	2012542	Identifier	i		2012443	0					
ANR	2012543	IncDec	++		2012443	1					
ANR	2012544	CompoundStatement		19:30:569:569	2012443	3					
ANR	2012545	ExpressionStatement	nassign [ i ] = 0	331:2:9924:9938	2012443	0	True				
ANR	2012546	AssignmentExpression	nassign [ i ] = 0		2012443	0		=			
ANR	2012547	ArrayIndexing	nassign [ i ]		2012443	0					
ANR	2012548	Identifier	nassign		2012443	0					
ANR	2012549	Identifier	i		2012443	1					
ANR	2012550	PrimaryExpression	0		2012443	1					
ANR	2012551	ExpressionStatement	xpgSize = objIndex = gotXpg = gotSequential = 0	334:1:9945:9992	2012443	11	True				
ANR	2012552	AssignmentExpression	xpgSize = objIndex = gotXpg = gotSequential = 0		2012443	0		=			
ANR	2012553	Identifier	xpgSize		2012443	0					
ANR	2012554	AssignmentExpression	objIndex = gotXpg = gotSequential = 0		2012443	1		=			
ANR	2012555	Identifier	objIndex		2012443	0					
ANR	2012556	AssignmentExpression	gotXpg = gotSequential = 0		2012443	1		=			
ANR	2012557	Identifier	gotXpg		2012443	0					
ANR	2012558	AssignmentExpression	gotSequential = 0		2012443	1		=			
ANR	2012559	Identifier	gotSequential		2012443	0					
ANR	2012560	PrimaryExpression	0		2012443	1					
ANR	2012561	WhileStatement	while ( * format != '\\0' )		2012443	12					
ANR	2012562	Condition	* format != '\\0'	336:8:10003:10017	2012443	0	True				
ANR	2012563	EqualityExpression	* format != '\\0'		2012443	0		!=			
ANR	2012564	UnaryOperationExpression	* format		2012443	0					
ANR	2012565	UnaryOperator	*		2012443	0					
ANR	2012566	Identifier	format		2012443	1					
ANR	2012567	PrimaryExpression	'\\0'		2012443	1					
ANR	2012568	CompoundStatement		25:25:669:669	2012443	1					
ANR	2012569	ExpressionStatement	ch = format ++	337:2:10024:10037	2012443	0	True				
ANR	2012570	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012571	Identifier	ch		2012443	0					
ANR	2012572	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012573	Identifier	format		2012443	0					
ANR	2012574	IncDec	++		2012443	1					
ANR	2012575	ExpressionStatement	flags = 0	338:2:10041:10050	2012443	1	True				
ANR	2012576	AssignmentExpression	flags = 0		2012443	0		=			
ANR	2012577	Identifier	flags		2012443	0					
ANR	2012578	PrimaryExpression	0		2012443	1					
ANR	2012579	IfStatement	if ( * ch != '%' )		2012443	2					
ANR	2012580	Condition	* ch != '%'	340:6:10059:10068	2012443	0	True				
ANR	2012581	EqualityExpression	* ch != '%'		2012443	0		!=			
ANR	2012582	UnaryOperationExpression	* ch		2012443	0					
ANR	2012583	UnaryOperator	*		2012443	0					
ANR	2012584	Identifier	ch		2012443	1					
ANR	2012585	PrimaryExpression	'%'		2012443	1					
ANR	2012586	CompoundStatement		29:18:720:720	2012443	1					
ANR	2012587	ContinueStatement	continue ;	341:3:10076:10084	2012443	0	True				
ANR	2012588	ExpressionStatement	ch = format ++	343:2:10092:10105	2012443	3	True				
ANR	2012589	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012590	Identifier	ch		2012443	0					
ANR	2012591	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012592	Identifier	format		2012443	0					
ANR	2012593	IncDec	++		2012443	1					
ANR	2012594	IfStatement	if ( * ch == '%' )		2012443	4					
ANR	2012595	Condition	* ch == '%'	344:6:10113:10122	2012443	0	True				
ANR	2012596	EqualityExpression	* ch == '%'		2012443	0		==			
ANR	2012597	UnaryOperationExpression	* ch		2012443	0					
ANR	2012598	UnaryOperator	*		2012443	0					
ANR	2012599	Identifier	ch		2012443	1					
ANR	2012600	PrimaryExpression	'%'		2012443	1					
ANR	2012601	CompoundStatement		33:18:774:774	2012443	1					
ANR	2012602	ContinueStatement	continue ;	345:3:10130:10138	2012443	0	True				
ANR	2012603	IfStatement	if ( * ch == '*' )		2012443	5					
ANR	2012604	Condition	* ch == '*'	347:6:10150:10159	2012443	0	True				
ANR	2012605	EqualityExpression	* ch == '*'		2012443	0		==			
ANR	2012606	UnaryOperationExpression	* ch		2012443	0					
ANR	2012607	UnaryOperator	*		2012443	0					
ANR	2012608	Identifier	ch		2012443	1					
ANR	2012609	PrimaryExpression	'*'		2012443	1					
ANR	2012610	CompoundStatement		36:18:811:811	2012443	1					
ANR	2012611	ExpressionStatement	flags |= SCAN_SUPPRESS	348:3:10167:10189	2012443	0	True				
ANR	2012612	AssignmentExpression	flags |= SCAN_SUPPRESS		2012443	0		|=			
ANR	2012613	Identifier	flags		2012443	0					
ANR	2012614	Identifier	SCAN_SUPPRESS		2012443	1					
ANR	2012615	ExpressionStatement	ch = format ++	349:3:10194:10207	2012443	1	True				
ANR	2012616	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012617	Identifier	ch		2012443	0					
ANR	2012618	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012619	Identifier	format		2012443	0					
ANR	2012620	IncDec	++		2012443	1					
ANR	2012621	GotoStatement	goto xpgCheckDone ;	350:3:10212:10229	2012443	2	True				
ANR	2012622	Identifier	xpgCheckDone		2012443	0					
ANR	2012623	IfStatement	if ( isdigit ( ( int ) * ch ) )		2012443	6					
ANR	2012624	Condition	isdigit ( ( int ) * ch )	353:7:10243:10261	2012443	0	True				
ANR	2012625	CallExpression	isdigit ( ( int ) * ch )		2012443	0					
ANR	2012626	Callee	isdigit		2012443	0					
ANR	2012627	Identifier	isdigit		2012443	0					
ANR	2012628	ArgumentList	( int ) * ch		2012443	1					
ANR	2012629	Argument	( int ) * ch		2012443	0					
ANR	2012630	CastExpression	( int ) * ch		2012443	0					
ANR	2012631	CastTarget	int		2012443	0					
ANR	2012632	UnaryOperationExpression	* ch		2012443	1					
ANR	2012633	UnaryOperator	*		2012443	0					
ANR	2012634	Identifier	ch		2012443	1					
ANR	2012635	CompoundStatement		42:29:914:914	2012443	1					
ANR	2012636	ExpressionStatement	"value = strtoul ( format - 1 , & end , 10 )"	359:3:10439:10474	2012443	0	True				
ANR	2012637	AssignmentExpression	"value = strtoul ( format - 1 , & end , 10 )"		2012443	0		=			
ANR	2012638	Identifier	value		2012443	0					
ANR	2012639	CallExpression	"strtoul ( format - 1 , & end , 10 )"		2012443	1					
ANR	2012640	Callee	strtoul		2012443	0					
ANR	2012641	Identifier	strtoul		2012443	0					
ANR	2012642	ArgumentList	format - 1		2012443	1					
ANR	2012643	Argument	format - 1		2012443	0					
ANR	2012644	AdditiveExpression	format - 1		2012443	0		-			
ANR	2012645	Identifier	format		2012443	0					
ANR	2012646	PrimaryExpression	1		2012443	1					
ANR	2012647	Argument	& end		2012443	1					
ANR	2012648	UnaryOperationExpression	& end		2012443	0					
ANR	2012649	UnaryOperator	&		2012443	0					
ANR	2012650	Identifier	end		2012443	1					
ANR	2012651	Argument	10		2012443	2					
ANR	2012652	PrimaryExpression	10		2012443	0					
ANR	2012653	IfStatement	if ( * end != '$' )		2012443	1					
ANR	2012654	Condition	* end != '$'	360:7:10483:10493	2012443	0	True				
ANR	2012655	EqualityExpression	* end != '$'		2012443	0		!=			
ANR	2012656	UnaryOperationExpression	* end		2012443	0					
ANR	2012657	UnaryOperator	*		2012443	0					
ANR	2012658	Identifier	end		2012443	1					
ANR	2012659	PrimaryExpression	'$'		2012443	1					
ANR	2012660	CompoundStatement		49:20:1145:1145	2012443	1					
ANR	2012661	GotoStatement	goto notXpg ;	361:4:10502:10513	2012443	0	True				
ANR	2012662	Identifier	notXpg		2012443	0					
ANR	2012663	ExpressionStatement	format = end + 1	363:3:10523:10537	2012443	2	True				
ANR	2012664	AssignmentExpression	format = end + 1		2012443	0		=			
ANR	2012665	Identifier	format		2012443	0					
ANR	2012666	AdditiveExpression	end + 1		2012443	1		+			
ANR	2012667	Identifier	end		2012443	0					
ANR	2012668	PrimaryExpression	1		2012443	1					
ANR	2012669	ExpressionStatement	ch = format ++	364:3:10542:10559	2012443	3	True				
ANR	2012670	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012671	Identifier	ch		2012443	0					
ANR	2012672	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012673	Identifier	format		2012443	0					
ANR	2012674	IncDec	++		2012443	1					
ANR	2012675	ExpressionStatement	gotXpg = 1	365:3:10564:10574	2012443	4	True				
ANR	2012676	AssignmentExpression	gotXpg = 1		2012443	0		=			
ANR	2012677	Identifier	gotXpg		2012443	0					
ANR	2012678	PrimaryExpression	1		2012443	1					
ANR	2012679	IfStatement	if ( gotSequential )		2012443	5					
ANR	2012680	Condition	gotSequential	366:7:10583:10595	2012443	0	True				
ANR	2012681	Identifier	gotSequential		2012443	0					
ANR	2012682	CompoundStatement		55:22:1247:1247	2012443	1					
ANR	2012683	GotoStatement	goto mixedXPG ;	367:4:10604:10617	2012443	0	True				
ANR	2012684	Identifier	mixedXPG		2012443	0					
ANR	2012685	ExpressionStatement	objIndex = value - 1	369:3:10627:10647	2012443	6	True				
ANR	2012686	AssignmentExpression	objIndex = value - 1		2012443	0		=			
ANR	2012687	Identifier	objIndex		2012443	0					
ANR	2012688	AdditiveExpression	value - 1		2012443	1		-			
ANR	2012689	Identifier	value		2012443	0					
ANR	2012690	PrimaryExpression	1		2012443	1					
ANR	2012691	IfStatement	if ( ( objIndex < 0 ) || ( numVars && ( objIndex >= numVars ) ) )		2012443	7					
ANR	2012692	Condition	( objIndex < 0 ) || ( numVars && ( objIndex >= numVars ) )	370:7:10656:10707	2012443	0	True				
ANR	2012693	OrExpression	( objIndex < 0 ) || ( numVars && ( objIndex >= numVars ) )		2012443	0		||			
ANR	2012694	RelationalExpression	objIndex < 0		2012443	0		<			
ANR	2012695	Identifier	objIndex		2012443	0					
ANR	2012696	PrimaryExpression	0		2012443	1					
ANR	2012697	AndExpression	numVars && ( objIndex >= numVars )		2012443	1		&&			
ANR	2012698	Identifier	numVars		2012443	0					
ANR	2012699	RelationalExpression	objIndex >= numVars		2012443	1		>=			
ANR	2012700	Identifier	objIndex		2012443	0					
ANR	2012701	Identifier	numVars		2012443	1					
ANR	2012702	CompoundStatement		59:61:1359:1359	2012443	1					
ANR	2012703	GotoStatement	goto badIndex ;	371:4:10716:10729	2012443	0	True				
ANR	2012704	Identifier	badIndex		2012443	0					
ANR	2012705	ElseStatement	else		2012443	0					
ANR	2012706	IfStatement	if ( numVars == 0 )		2012443	0					
ANR	2012707	Condition	numVars == 0	372:14:10745:10756	2012443	0	True				
ANR	2012708	EqualityExpression	numVars == 0		2012443	0		==			
ANR	2012709	Identifier	numVars		2012443	0					
ANR	2012710	PrimaryExpression	0		2012443	1					
ANR	2012711	CompoundStatement		61:28:1408:1408	2012443	1					
ANR	2012712	IfStatement	if ( value > SCAN_MAX_ARGS )		2012443	0					
ANR	2012713	Condition	value > SCAN_MAX_ARGS	384:8:11159:11179	2012443	0	True				
ANR	2012714	RelationalExpression	value > SCAN_MAX_ARGS		2012443	0		>			
ANR	2012715	Identifier	value		2012443	0					
ANR	2012716	Identifier	SCAN_MAX_ARGS		2012443	1					
ANR	2012717	CompoundStatement		73:31:1831:1831	2012443	1					
ANR	2012718	GotoStatement	goto badIndex ;	385:5:11189:11202	2012443	0	True				
ANR	2012719	Identifier	badIndex		2012443	0					
ANR	2012720	ExpressionStatement	xpgSize = ( xpgSize > value ) ? xpgSize : value	388:4:11215:11260	2012443	1	True				
ANR	2012721	AssignmentExpression	xpgSize = ( xpgSize > value ) ? xpgSize : value		2012443	0		=			
ANR	2012722	Identifier	xpgSize		2012443	0					
ANR	2012723	ConditionalExpression	( xpgSize > value ) ? xpgSize : value		2012443	1					
ANR	2012724	Condition	xpgSize > value		2012443	0					
ANR	2012725	RelationalExpression	xpgSize > value		2012443	0		>			
ANR	2012726	Identifier	xpgSize		2012443	0					
ANR	2012727	Identifier	value		2012443	1					
ANR	2012728	Identifier	xpgSize		2012443	1					
ANR	2012729	Identifier	value		2012443	2					
ANR	2012730	GotoStatement	goto xpgCheckDone ;	390:3:11270:11287	2012443	8	True				
ANR	2012731	Identifier	xpgCheckDone		2012443	0					
ANR	2012732	Label	notXpg :	393:0:11294:11300	2012443	7	True				
ANR	2012733	Identifier	notXpg		2012443	0					
ANR	2012734	ExpressionStatement	gotSequential = 1	394:2:11304:11321	2012443	8	True				
ANR	2012735	AssignmentExpression	gotSequential = 1		2012443	0		=			
ANR	2012736	Identifier	gotSequential		2012443	0					
ANR	2012737	PrimaryExpression	1		2012443	1					
ANR	2012738	IfStatement	if ( gotXpg )		2012443	9					
ANR	2012739	Condition	gotXpg	395:6:11329:11334	2012443	0	True				
ANR	2012740	Identifier	gotXpg		2012443	0					
ANR	2012741	CompoundStatement		84:14:1986:1986	2012443	1					
ANR	2012742	Label	mixedXPG :	396:0:11339:11347	2012443	0	True				
ANR	2012743	Identifier	mixedXPG		2012443	0					
ANR	2012744	Statement	php_error_docref	397:3:11352:11367	2012443	1	True				
ANR	2012745	Statement	(	397:19:11368:11368	2012443	2	True				
ANR	2012746	Statement	NULL	397:20:11369:11372	2012443	3	True				
ANR	2012747	Statement	TSRMLS_CC	397:25:11374:11382	2012443	4	True				
ANR	2012748	Statement	","	397:34:11383:11383	2012443	5	True				
ANR	2012749	Statement	E_WARNING	397:36:11385:11393	2012443	6	True				
ANR	2012750	Statement	","	397:45:11394:11394	2012443	7	True				
ANR	2012751	Statement	"""%s"""	397:47:11396:11399	2012443	8	True				
ANR	2012752	Statement	","	397:51:11400:11400	2012443	9	True				
ANR	2012753	Statement	"""cannot mix \\""%\\"" and \\""%n$\\"" conversion specifiers"""	397:53:11402:11453	2012443	10	True				
ANR	2012754	Statement	)	397:105:11454:11454	2012443	11	True				
ANR	2012755	ExpressionStatement		397:106:11455:11455	2012443	12	True				
ANR	2012756	GotoStatement	goto error ;	398:3:11460:11470	2012443	13	True				
ANR	2012757	Identifier	error		2012443	0					
ANR	2012758	Label	xpgCheckDone :	401:0:11477:11489	2012443	10	True				
ANR	2012759	Identifier	xpgCheckDone		2012443	0					
ANR	2012760	IfStatement	if ( isdigit ( UCHAR ( * ch ) ) )		2012443	11					
ANR	2012761	Condition	isdigit ( UCHAR ( * ch ) )	405:6:11540:11558	2012443	0	True				
ANR	2012762	CallExpression	isdigit ( UCHAR ( * ch ) )		2012443	0					
ANR	2012763	Callee	isdigit		2012443	0					
ANR	2012764	Identifier	isdigit		2012443	0					
ANR	2012765	ArgumentList	UCHAR ( * ch )		2012443	1					
ANR	2012766	Argument	UCHAR ( * ch )		2012443	0					
ANR	2012767	CallExpression	UCHAR ( * ch )		2012443	0					
ANR	2012768	Callee	UCHAR		2012443	0					
ANR	2012769	Identifier	UCHAR		2012443	0					
ANR	2012770	ArgumentList	* ch		2012443	1					
ANR	2012771	Argument	* ch		2012443	0					
ANR	2012772	UnaryOperationExpression	* ch		2012443	0					
ANR	2012773	UnaryOperator	*		2012443	0					
ANR	2012774	Identifier	ch		2012443	1					
ANR	2012775	CompoundStatement		94:27:2210:2210	2012443	1					
ANR	2012776	ExpressionStatement	"value = strtoul ( format - 1 , & format , 10 )"	406:3:11566:11604	2012443	0	True				
ANR	2012777	AssignmentExpression	"value = strtoul ( format - 1 , & format , 10 )"		2012443	0		=			
ANR	2012778	Identifier	value		2012443	0					
ANR	2012779	CallExpression	"strtoul ( format - 1 , & format , 10 )"		2012443	1					
ANR	2012780	Callee	strtoul		2012443	0					
ANR	2012781	Identifier	strtoul		2012443	0					
ANR	2012782	ArgumentList	format - 1		2012443	1					
ANR	2012783	Argument	format - 1		2012443	0					
ANR	2012784	AdditiveExpression	format - 1		2012443	0		-			
ANR	2012785	Identifier	format		2012443	0					
ANR	2012786	PrimaryExpression	1		2012443	1					
ANR	2012787	Argument	& format		2012443	1					
ANR	2012788	UnaryOperationExpression	& format		2012443	0					
ANR	2012789	UnaryOperator	&		2012443	0					
ANR	2012790	Identifier	format		2012443	1					
ANR	2012791	Argument	10		2012443	2					
ANR	2012792	PrimaryExpression	10		2012443	0					
ANR	2012793	ExpressionStatement	flags |= SCAN_WIDTH	407:3:11609:11628	2012443	1	True				
ANR	2012794	AssignmentExpression	flags |= SCAN_WIDTH		2012443	0		|=			
ANR	2012795	Identifier	flags		2012443	0					
ANR	2012796	Identifier	SCAN_WIDTH		2012443	1					
ANR	2012797	ExpressionStatement	ch = format ++	408:3:11633:11646	2012443	2	True				
ANR	2012798	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012799	Identifier	ch		2012443	0					
ANR	2012800	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012801	Identifier	format		2012443	0					
ANR	2012802	IncDec	++		2012443	1					
ANR	2012803	IfStatement	if ( ( * ch == 'l' ) || ( * ch == 'L' ) || ( * ch == 'h' ) )		2012443	12					
ANR	2012804	Condition	( * ch == 'l' ) || ( * ch == 'L' ) || ( * ch == 'h' )	414:6:11698:11741	2012443	0	True				
ANR	2012805	OrExpression	( * ch == 'l' ) || ( * ch == 'L' ) || ( * ch == 'h' )		2012443	0		||			
ANR	2012806	EqualityExpression	* ch == 'l'		2012443	0		==			
ANR	2012807	UnaryOperationExpression	* ch		2012443	0					
ANR	2012808	UnaryOperator	*		2012443	0					
ANR	2012809	Identifier	ch		2012443	1					
ANR	2012810	PrimaryExpression	'l'		2012443	1					
ANR	2012811	OrExpression	( * ch == 'L' ) || ( * ch == 'h' )		2012443	1		||			
ANR	2012812	EqualityExpression	* ch == 'L'		2012443	0		==			
ANR	2012813	UnaryOperationExpression	* ch		2012443	0					
ANR	2012814	UnaryOperator	*		2012443	0					
ANR	2012815	Identifier	ch		2012443	1					
ANR	2012816	PrimaryExpression	'L'		2012443	1					
ANR	2012817	EqualityExpression	* ch == 'h'		2012443	1		==			
ANR	2012818	UnaryOperationExpression	* ch		2012443	0					
ANR	2012819	UnaryOperator	*		2012443	0					
ANR	2012820	Identifier	ch		2012443	1					
ANR	2012821	PrimaryExpression	'h'		2012443	1					
ANR	2012822	CompoundStatement		103:52:2393:2393	2012443	1					
ANR	2012823	ExpressionStatement	ch = format ++	415:3:11749:11762	2012443	0	True				
ANR	2012824	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012825	Identifier	ch		2012443	0					
ANR	2012826	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012827	Identifier	format		2012443	0					
ANR	2012828	IncDec	++		2012443	1					
ANR	2012829	IfStatement	if ( ! ( flags & SCAN_SUPPRESS ) && numVars && ( objIndex >= numVars ) )		2012443	13					
ANR	2012830	Condition	! ( flags & SCAN_SUPPRESS ) && numVars && ( objIndex >= numVars )	418:6:11775:11834	2012443	0	True				
ANR	2012831	AndExpression	! ( flags & SCAN_SUPPRESS ) && numVars && ( objIndex >= numVars )		2012443	0		&&			
ANR	2012832	UnaryOperationExpression	! ( flags & SCAN_SUPPRESS )		2012443	0					
ANR	2012833	UnaryOperator	!		2012443	0					
ANR	2012834	BitAndExpression	flags & SCAN_SUPPRESS		2012443	1		&			
ANR	2012835	Identifier	flags		2012443	0					
ANR	2012836	Identifier	SCAN_SUPPRESS		2012443	1					
ANR	2012837	AndExpression	numVars && ( objIndex >= numVars )		2012443	1		&&			
ANR	2012838	Identifier	numVars		2012443	0					
ANR	2012839	RelationalExpression	objIndex >= numVars		2012443	1		>=			
ANR	2012840	Identifier	objIndex		2012443	0					
ANR	2012841	Identifier	numVars		2012443	1					
ANR	2012842	CompoundStatement		107:68:2486:2486	2012443	1					
ANR	2012843	GotoStatement	goto badIndex ;	419:3:11842:11855	2012443	0	True				
ANR	2012844	Identifier	badIndex		2012443	0					
ANR	2012845	SwitchStatement	switch ( * ch )		2012443	14					
ANR	2012846	Condition	* ch	425:10:11920:11922	2012443	0	True				
ANR	2012847	UnaryOperationExpression	* ch		2012443	0					
ANR	2012848	UnaryOperator	*		2012443	0					
ANR	2012849	Identifier	ch		2012443	1					
ANR	2012850	CompoundStatement		114:15:2574:2574	2012443	1					
ANR	2012851	Label	case 'n' :	426:3:11930:11938	2012443	0	True				
ANR	2012852	Label	case 'd' :	427:3:11943:11951	2012443	1	True				
ANR	2012853	Label	case 'D' :	428:3:11956:11964	2012443	2	True				
ANR	2012854	Label	case 'i' :	429:3:11969:11977	2012443	3	True				
ANR	2012855	Label	case 'o' :	430:3:11982:11990	2012443	4	True				
ANR	2012856	Label	case 'x' :	431:3:11995:12003	2012443	5	True				
ANR	2012857	Label	case 'X' :	432:3:12008:12016	2012443	6	True				
ANR	2012858	Label	case 'u' :	433:3:12021:12029	2012443	7	True				
ANR	2012859	Label	case 'f' :	434:3:12034:12042	2012443	8	True				
ANR	2012860	Label	case 'e' :	435:3:12047:12055	2012443	9	True				
ANR	2012861	Label	case 'E' :	436:3:12060:12068	2012443	10	True				
ANR	2012862	Label	case 'g' :	437:3:12073:12081	2012443	11	True				
ANR	2012863	Label	case 's' :	438:3:12086:12094	2012443	12	True				
ANR	2012864	BreakStatement	break ;	439:4:12100:12105	2012443	13	True				
ANR	2012865	Label	case 'c' :	441:3:12111:12119	2012443	14	True				
ANR	2012866	BreakStatement	break ;	452:4:12572:12577	2012443	15	True				
ANR	2012867	Label	case '[' :	454:3:12583:12591	2012443	16	True				
ANR	2012868	IfStatement	if ( * format == '\\0' )		2012443	17					
ANR	2012869	Condition	* format == '\\0'	455:8:12601:12615	2012443	0	True				
ANR	2012870	EqualityExpression	* format == '\\0'		2012443	0		==			
ANR	2012871	UnaryOperationExpression	* format		2012443	0					
ANR	2012872	UnaryOperator	*		2012443	0					
ANR	2012873	Identifier	format		2012443	1					
ANR	2012874	PrimaryExpression	'\\0'		2012443	1					
ANR	2012875	CompoundStatement		144:25:3267:3267	2012443	1					
ANR	2012876	GotoStatement	goto badSet ;	456:5:12625:12636	2012443	0	True				
ANR	2012877	Identifier	badSet		2012443	0					
ANR	2012878	ExpressionStatement	ch = format ++	458:4:12648:12661	2012443	18	True				
ANR	2012879	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012880	Identifier	ch		2012443	0					
ANR	2012881	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012882	Identifier	format		2012443	0					
ANR	2012883	IncDec	++		2012443	1					
ANR	2012884	IfStatement	if ( * ch == '^' )		2012443	19					
ANR	2012885	Condition	* ch == '^'	459:8:12671:12680	2012443	0	True				
ANR	2012886	EqualityExpression	* ch == '^'		2012443	0		==			
ANR	2012887	UnaryOperationExpression	* ch		2012443	0					
ANR	2012888	UnaryOperator	*		2012443	0					
ANR	2012889	Identifier	ch		2012443	1					
ANR	2012890	PrimaryExpression	'^'		2012443	1					
ANR	2012891	CompoundStatement		148:20:3332:3332	2012443	1					
ANR	2012892	IfStatement	if ( * format == '\\0' )		2012443	0					
ANR	2012893	Condition	* format == '\\0'	460:9:12694:12708	2012443	0	True				
ANR	2012894	EqualityExpression	* format == '\\0'		2012443	0		==			
ANR	2012895	UnaryOperationExpression	* format		2012443	0					
ANR	2012896	UnaryOperator	*		2012443	0					
ANR	2012897	Identifier	format		2012443	1					
ANR	2012898	PrimaryExpression	'\\0'		2012443	1					
ANR	2012899	CompoundStatement		149:26:3360:3360	2012443	1					
ANR	2012900	GotoStatement	goto badSet ;	461:6:12719:12730	2012443	0	True				
ANR	2012901	Identifier	badSet		2012443	0					
ANR	2012902	ExpressionStatement	ch = format ++	463:5:12744:12757	2012443	1	True				
ANR	2012903	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012904	Identifier	ch		2012443	0					
ANR	2012905	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012906	Identifier	format		2012443	0					
ANR	2012907	IncDec	++		2012443	1					
ANR	2012908	IfStatement	if ( * ch == ']' )		2012443	20					
ANR	2012909	Condition	* ch == ']'	465:8:12773:12782	2012443	0	True				
ANR	2012910	EqualityExpression	* ch == ']'		2012443	0		==			
ANR	2012911	UnaryOperationExpression	* ch		2012443	0					
ANR	2012912	UnaryOperator	*		2012443	0					
ANR	2012913	Identifier	ch		2012443	1					
ANR	2012914	PrimaryExpression	']'		2012443	1					
ANR	2012915	CompoundStatement		154:20:3434:3434	2012443	1					
ANR	2012916	IfStatement	if ( * format == '\\0' )		2012443	0					
ANR	2012917	Condition	* format == '\\0'	466:9:12796:12810	2012443	0	True				
ANR	2012918	EqualityExpression	* format == '\\0'		2012443	0		==			
ANR	2012919	UnaryOperationExpression	* format		2012443	0					
ANR	2012920	UnaryOperator	*		2012443	0					
ANR	2012921	Identifier	format		2012443	1					
ANR	2012922	PrimaryExpression	'\\0'		2012443	1					
ANR	2012923	CompoundStatement		155:26:3462:3462	2012443	1					
ANR	2012924	GotoStatement	goto badSet ;	467:6:12821:12832	2012443	0	True				
ANR	2012925	Identifier	badSet		2012443	0					
ANR	2012926	ExpressionStatement	ch = format ++	469:5:12846:12859	2012443	1	True				
ANR	2012927	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012928	Identifier	ch		2012443	0					
ANR	2012929	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012930	Identifier	format		2012443	0					
ANR	2012931	IncDec	++		2012443	1					
ANR	2012932	WhileStatement	while ( * ch != ']' )		2012443	21					
ANR	2012933	Condition	* ch != ']'	471:11:12878:12887	2012443	0	True				
ANR	2012934	EqualityExpression	* ch != ']'		2012443	0		!=			
ANR	2012935	UnaryOperationExpression	* ch		2012443	0					
ANR	2012936	UnaryOperator	*		2012443	0					
ANR	2012937	Identifier	ch		2012443	1					
ANR	2012938	PrimaryExpression	']'		2012443	1					
ANR	2012939	CompoundStatement		160:23:3539:3539	2012443	1					
ANR	2012940	IfStatement	if ( * format == '\\0' )		2012443	0					
ANR	2012941	Condition	* format == '\\0'	472:9:12901:12915	2012443	0	True				
ANR	2012942	EqualityExpression	* format == '\\0'		2012443	0		==			
ANR	2012943	UnaryOperationExpression	* format		2012443	0					
ANR	2012944	UnaryOperator	*		2012443	0					
ANR	2012945	Identifier	format		2012443	1					
ANR	2012946	PrimaryExpression	'\\0'		2012443	1					
ANR	2012947	CompoundStatement		161:26:3567:3567	2012443	1					
ANR	2012948	GotoStatement	goto badSet ;	473:6:12926:12937	2012443	0	True				
ANR	2012949	Identifier	badSet		2012443	0					
ANR	2012950	ExpressionStatement	ch = format ++	475:5:12951:12964	2012443	1	True				
ANR	2012951	AssignmentExpression	ch = format ++		2012443	0		=			
ANR	2012952	Identifier	ch		2012443	0					
ANR	2012953	PostIncDecOperationExpression	format ++		2012443	1					
ANR	2012954	Identifier	format		2012443	0					
ANR	2012955	IncDec	++		2012443	1					
ANR	2012956	BreakStatement	break ;	477:4:12976:12981	2012443	22	True				
ANR	2012957	Label	badSet :	478:0:12983:12989	2012443	23	True				
ANR	2012958	Identifier	badSet		2012443	0					
ANR	2012959	Statement	php_error_docref	479:4:12995:13010	2012443	24	True				
ANR	2012960	Statement	(	479:20:13011:13011	2012443	25	True				
ANR	2012961	Statement	NULL	479:21:13012:13015	2012443	26	True				
ANR	2012962	Statement	TSRMLS_CC	479:26:13017:13025	2012443	27	True				
ANR	2012963	Statement	","	479:35:13026:13026	2012443	28	True				
ANR	2012964	Statement	E_WARNING	479:37:13028:13036	2012443	29	True				
ANR	2012965	Statement	","	479:46:13037:13037	2012443	30	True				
ANR	2012966	Statement	"""Unmatched [ in format string"""	479:48:13039:13068	2012443	31	True				
ANR	2012967	Statement	)	479:78:13069:13069	2012443	32	True				
ANR	2012968	ExpressionStatement		479:79:13070:13070	2012443	33	True				
ANR	2012969	GotoStatement	goto error ;	480:4:13076:13086	2012443	34	True				
ANR	2012970	Identifier	error		2012443	0					
ANR	2012971	Label	default :	482:3:13092:13099	2012443	35	True				
ANR	2012972	Identifier	default		2012443	0					
ANR	2012973	CompoundStatement		171:12:3750:3750	2012443	36					
ANR	2012974	Statement	php_error_docref	483:4:13107:13122	2012443	0	True				
ANR	2012975	Statement	(	483:20:13123:13123	2012443	1	True				
ANR	2012976	Statement	NULL	483:21:13124:13127	2012443	2	True				
ANR	2012977	Statement	TSRMLS_CC	483:26:13129:13137	2012443	3	True				
ANR	2012978	Statement	","	483:35:13138:13138	2012443	4	True				
ANR	2012979	Statement	E_WARNING	483:37:13140:13148	2012443	5	True				
ANR	2012980	Statement	","	483:46:13149:13149	2012443	6	True				
ANR	2012981	Statement	"""Bad scan conversion character \\""%c\\"""""	483:48:13151:13188	2012443	7	True				
ANR	2012982	Statement	","	483:86:13189:13189	2012443	8	True				
ANR	2012983	Statement	*	483:88:13191:13191	2012443	9	True				
ANR	2012984	Statement	ch	483:89:13192:13193	2012443	10	True				
ANR	2012985	Statement	)	483:91:13194:13194	2012443	11	True				
ANR	2012986	ExpressionStatement		483:92:13195:13195	2012443	12	True				
ANR	2012987	GotoStatement	goto error ;	484:4:13201:13211	2012443	13	True				
ANR	2012988	Identifier	error		2012443	0					
ANR	2012989	IfStatement	if ( ! ( flags & SCAN_SUPPRESS ) )		2012443	15					
ANR	2012990	Condition	! ( flags & SCAN_SUPPRESS )	488:6:13229:13252	2012443	0	True				
ANR	2012991	UnaryOperationExpression	! ( flags & SCAN_SUPPRESS )		2012443	0					
ANR	2012992	UnaryOperator	!		2012443	0					
ANR	2012993	BitAndExpression	flags & SCAN_SUPPRESS		2012443	1		&			
ANR	2012994	Identifier	flags		2012443	0					
ANR	2012995	Identifier	SCAN_SUPPRESS		2012443	1					
ANR	2012996	CompoundStatement		177:32:3904:3904	2012443	1					
ANR	2012997	IfStatement	if ( objIndex >= nspace )		2012443	0					
ANR	2012998	Condition	objIndex >= nspace	489:7:13264:13281	2012443	0	True				
ANR	2012999	RelationalExpression	objIndex >= nspace		2012443	0		>=			
ANR	2013000	Identifier	objIndex		2012443	0					
ANR	2013001	Identifier	nspace		2012443	1					
ANR	2013002	CompoundStatement		178:27:3933:3933	2012443	1					
ANR	2013003	ExpressionStatement	value = nspace	495:4:13497:13511	2012443	0	True				
ANR	2013004	AssignmentExpression	value = nspace		2012443	0		=			
ANR	2013005	Identifier	value		2012443	0					
ANR	2013006	Identifier	nspace		2012443	1					
ANR	2013007	IfStatement	if ( xpgSize )		2012443	1					
ANR	2013008	Condition	xpgSize	496:8:13521:13527	2012443	0	True				
ANR	2013009	Identifier	xpgSize		2012443	0					
ANR	2013010	CompoundStatement		185:17:4179:4179	2012443	1					
ANR	2013011	ExpressionStatement	nspace = xpgSize	497:5:13537:13553	2012443	0	True				
ANR	2013012	AssignmentExpression	nspace = xpgSize		2012443	0		=			
ANR	2013013	Identifier	nspace		2012443	0					
ANR	2013014	Identifier	xpgSize		2012443	1					
ANR	2013015	ElseStatement	else		2012443	0					
ANR	2013016	CompoundStatement		187:11:4215:4215	2012443	0					
ANR	2013017	ExpressionStatement	nspace += STATIC_LIST_SIZE	499:5:13573:13599	2012443	0	True				
ANR	2013018	AssignmentExpression	nspace += STATIC_LIST_SIZE		2012443	0		+=			
ANR	2013019	Identifier	nspace		2012443	0					
ANR	2013020	Identifier	STATIC_LIST_SIZE		2012443	1					
ANR	2013021	IfStatement	if ( nassign == staticAssign )		2012443	2					
ANR	2013022	Condition	nassign == staticAssign	501:8:13615:13637	2012443	0	True				
ANR	2013023	EqualityExpression	nassign == staticAssign		2012443	0		==			
ANR	2013024	Identifier	nassign		2012443	0					
ANR	2013025	Identifier	staticAssign		2012443	1					
ANR	2013026	CompoundStatement		190:33:4289:4289	2012443	1					
ANR	2013027	ExpressionStatement	"nassign = ( void * ) safe_emalloc ( nspace , sizeof ( int ) , 0 )"	502:5:13647:13701	2012443	0	True				
ANR	2013028	AssignmentExpression	"nassign = ( void * ) safe_emalloc ( nspace , sizeof ( int ) , 0 )"		2012443	0		=			
ANR	2013029	Identifier	nassign		2012443	0					
ANR	2013030	CastExpression	"( void * ) safe_emalloc ( nspace , sizeof ( int ) , 0 )"		2012443	1					
ANR	2013031	CastTarget	void *		2012443	0					
ANR	2013032	CallExpression	"safe_emalloc ( nspace , sizeof ( int ) , 0 )"		2012443	1					
ANR	2013033	Callee	safe_emalloc		2012443	0					
ANR	2013034	Identifier	safe_emalloc		2012443	0					
ANR	2013035	ArgumentList	nspace		2012443	1					
ANR	2013036	Argument	nspace		2012443	0					
ANR	2013037	Identifier	nspace		2012443	0					
ANR	2013038	Argument	sizeof ( int )		2012443	1					
ANR	2013039	SizeofExpression	sizeof ( int )		2012443	0					
ANR	2013040	Sizeof	sizeof		2012443	0					
ANR	2013041	SizeofOperand	int		2012443	1					
ANR	2013042	Argument	0		2012443	2					
ANR	2013043	PrimaryExpression	0		2012443	0					
ANR	2013044	ForStatement	for ( i = 0 ; i < STATIC_LIST_SIZE ; ++ i )		2012443	1					
ANR	2013045	ForInit	i = 0 ;	503:10:13713:13718	2012443	0	True				
ANR	2013046	AssignmentExpression	i = 0		2012443	0		=			
ANR	2013047	Identifier	i		2012443	0					
ANR	2013048	PrimaryExpression	0		2012443	1					
ANR	2013049	Condition	i < STATIC_LIST_SIZE	503:17:13720:13739	2012443	1	True				
ANR	2013050	RelationalExpression	i < STATIC_LIST_SIZE		2012443	0		<			
ANR	2013051	Identifier	i		2012443	0					
ANR	2013052	Identifier	STATIC_LIST_SIZE		2012443	1					
ANR	2013053	UnaryExpression	++ i	503:39:13742:13744	2012443	2	True				
ANR	2013054	IncDec	++		2012443	0					
ANR	2013055	Identifier	i		2012443	1					
ANR	2013056	CompoundStatement		192:44:4396:4396	2012443	3					
ANR	2013057	ExpressionStatement	nassign [ i ] = staticAssign [ i ]	504:6:13755:13783	2012443	0	True				
ANR	2013058	AssignmentExpression	nassign [ i ] = staticAssign [ i ]		2012443	0		=			
ANR	2013059	ArrayIndexing	nassign [ i ]		2012443	0					
ANR	2013060	Identifier	nassign		2012443	0					
ANR	2013061	Identifier	i		2012443	1					
ANR	2013062	ArrayIndexing	staticAssign [ i ]		2012443	1					
ANR	2013063	Identifier	staticAssign		2012443	0					
ANR	2013064	Identifier	i		2012443	1					
ANR	2013065	ElseStatement	else		2012443	0					
ANR	2013066	CompoundStatement		195:11:4452:4452	2012443	0					
ANR	2013067	ExpressionStatement	"nassign = ( void * ) erealloc ( ( void * ) nassign , nspace * sizeof ( int ) )"	507:5:13810:13875	2012443	0	True				
ANR	2013068	AssignmentExpression	"nassign = ( void * ) erealloc ( ( void * ) nassign , nspace * sizeof ( int ) )"		2012443	0		=			
ANR	2013069	Identifier	nassign		2012443	0					
ANR	2013070	CastExpression	"( void * ) erealloc ( ( void * ) nassign , nspace * sizeof ( int ) )"		2012443	1					
ANR	2013071	CastTarget	void *		2012443	0					
ANR	2013072	CallExpression	"erealloc ( ( void * ) nassign , nspace * sizeof ( int ) )"		2012443	1					
ANR	2013073	Callee	erealloc		2012443	0					
ANR	2013074	Identifier	erealloc		2012443	0					
ANR	2013075	ArgumentList	( void * ) nassign		2012443	1					
ANR	2013076	Argument	( void * ) nassign		2012443	0					
ANR	2013077	CastExpression	( void * ) nassign		2012443	0					
ANR	2013078	CastTarget	void *		2012443	0					
ANR	2013079	Identifier	nassign		2012443	1					
ANR	2013080	Argument	nspace * sizeof ( int )		2012443	1					
ANR	2013081	MultiplicativeExpression	nspace * sizeof ( int )		2012443	0		*			
ANR	2013082	Identifier	nspace		2012443	0					
ANR	2013083	SizeofExpression	sizeof ( int )		2012443	1					
ANR	2013084	Sizeof	sizeof		2012443	0					
ANR	2013085	SizeofOperand	int		2012443	1					
ANR	2013086	ForStatement	for ( i = value ; i < nspace ; i ++ )		2012443	3					
ANR	2013087	ForInit	i = value ;	509:9:13892:13901	2012443	0	True				
ANR	2013088	AssignmentExpression	i = value		2012443	0		=			
ANR	2013089	Identifier	i		2012443	0					
ANR	2013090	Identifier	value		2012443	1					
ANR	2013091	Condition	i < nspace	509:20:13903:13912	2012443	1	True				
ANR	2013092	RelationalExpression	i < nspace		2012443	0		<			
ANR	2013093	Identifier	i		2012443	0					
ANR	2013094	Identifier	nspace		2012443	1					
ANR	2013095	PostIncDecOperationExpression	i ++	509:32:13915:13917	2012443	2	True				
ANR	2013096	Identifier	i		2012443	0					
ANR	2013097	IncDec	++		2012443	1					
ANR	2013098	CompoundStatement		198:37:4569:4569	2012443	3					
ANR	2013099	ExpressionStatement	nassign [ i ] = 0	510:5:13927:13941	2012443	0	True				
ANR	2013100	AssignmentExpression	nassign [ i ] = 0		2012443	0		=			
ANR	2013101	ArrayIndexing	nassign [ i ]		2012443	0					
ANR	2013102	Identifier	nassign		2012443	0					
ANR	2013103	Identifier	i		2012443	1					
ANR	2013104	PrimaryExpression	0		2012443	1					
ANR	2013105	ExpressionStatement	nassign [ objIndex ] ++	513:3:13957:13976	2012443	1	True				
ANR	2013106	PostIncDecOperationExpression	nassign [ objIndex ] ++		2012443	0					
ANR	2013107	ArrayIndexing	nassign [ objIndex ]		2012443	0					
ANR	2013108	Identifier	nassign		2012443	0					
ANR	2013109	Identifier	objIndex		2012443	1					
ANR	2013110	IncDec	++		2012443	1					
ANR	2013111	ExpressionStatement	objIndex ++	514:3:13981:13991	2012443	2	True				
ANR	2013112	PostIncDecOperationExpression	objIndex ++		2012443	0					
ANR	2013113	Identifier	objIndex		2012443	0					
ANR	2013114	IncDec	++		2012443	1					
ANR	2013115	IfStatement	if ( numVars == 0 )		2012443	13					
ANR	2013116	Condition	numVars == 0	521:5:14109:14120	2012443	0	True				
ANR	2013117	EqualityExpression	numVars == 0		2012443	0		==			
ANR	2013118	Identifier	numVars		2012443	0					
ANR	2013119	PrimaryExpression	0		2012443	1					
ANR	2013120	CompoundStatement		210:19:4772:4772	2012443	1					
ANR	2013121	IfStatement	if ( xpgSize )		2012443	0					
ANR	2013122	Condition	xpgSize	522:6:14131:14137	2012443	0	True				
ANR	2013123	Identifier	xpgSize		2012443	0					
ANR	2013124	CompoundStatement		211:15:4789:4789	2012443	1					
ANR	2013125	ExpressionStatement	numVars = xpgSize	523:3:14145:14162	2012443	0	True				
ANR	2013126	AssignmentExpression	numVars = xpgSize		2012443	0		=			
ANR	2013127	Identifier	numVars		2012443	0					
ANR	2013128	Identifier	xpgSize		2012443	1					
ANR	2013129	ElseStatement	else		2012443	0					
ANR	2013130	CompoundStatement		213:9:4822:4822	2012443	0					
ANR	2013131	ExpressionStatement	numVars = objIndex	525:3:14178:14196	2012443	0	True				
ANR	2013132	AssignmentExpression	numVars = objIndex		2012443	0		=			
ANR	2013133	Identifier	numVars		2012443	0					
ANR	2013134	Identifier	objIndex		2012443	1					
ANR	2013135	IfStatement	if ( totalSubs )		2012443	14					
ANR	2013136	Condition	totalSubs	528:5:14210:14218	2012443	0	True				
ANR	2013137	Identifier	totalSubs		2012443	0					
ANR	2013138	CompoundStatement		217:16:4870:4870	2012443	1					
ANR	2013139	ExpressionStatement	* totalSubs = numVars	529:2:14225:14245	2012443	0	True				
ANR	2013140	AssignmentExpression	* totalSubs = numVars		2012443	0		=			
ANR	2013141	UnaryOperationExpression	* totalSubs		2012443	0					
ANR	2013142	UnaryOperator	*		2012443	0					
ANR	2013143	Identifier	totalSubs		2012443	1					
ANR	2013144	Identifier	numVars		2012443	1					
ANR	2013145	ForStatement	for ( i = 0 ; i < numVars ; i ++ )		2012443	15					
ANR	2013146	ForInit	i = 0 ;	531:6:14256:14261	2012443	0	True				
ANR	2013147	AssignmentExpression	i = 0		2012443	0		=			
ANR	2013148	Identifier	i		2012443	0					
ANR	2013149	PrimaryExpression	0		2012443	1					
ANR	2013150	Condition	i < numVars	531:13:14263:14273	2012443	1	True				
ANR	2013151	RelationalExpression	i < numVars		2012443	0		<			
ANR	2013152	Identifier	i		2012443	0					
ANR	2013153	Identifier	numVars		2012443	1					
ANR	2013154	PostIncDecOperationExpression	i ++	531:26:14276:14278	2012443	2	True				
ANR	2013155	Identifier	i		2012443	0					
ANR	2013156	IncDec	++		2012443	1					
ANR	2013157	CompoundStatement		220:31:4930:4930	2012443	3					
ANR	2013158	IfStatement	if ( nassign [ i ] > 1 )		2012443	0					
ANR	2013159	Condition	nassign [ i ] > 1	532:6:14289:14302	2012443	0	True				
ANR	2013160	RelationalExpression	nassign [ i ] > 1		2012443	0		>			
ANR	2013161	ArrayIndexing	nassign [ i ]		2012443	0					
ANR	2013162	Identifier	nassign		2012443	0					
ANR	2013163	Identifier	i		2012443	1					
ANR	2013164	PrimaryExpression	1		2012443	1					
ANR	2013165	CompoundStatement		221:22:4954:4954	2012443	1					
ANR	2013166	Statement	php_error_docref	533:3:14310:14325	2012443	0	True				
ANR	2013167	Statement	(	533:19:14326:14326	2012443	1	True				
ANR	2013168	Statement	NULL	533:20:14327:14330	2012443	2	True				
ANR	2013169	Statement	TSRMLS_CC	533:25:14332:14340	2012443	3	True				
ANR	2013170	Statement	","	533:34:14341:14341	2012443	4	True				
ANR	2013171	Statement	E_WARNING	533:36:14343:14351	2012443	5	True				
ANR	2013172	Statement	","	533:45:14352:14352	2012443	6	True				
ANR	2013173	Statement	"""%s"""	533:47:14354:14357	2012443	7	True				
ANR	2013174	Statement	","	533:51:14358:14358	2012443	8	True				
ANR	2013175	Statement	"""Variable is assigned by multiple \\""%n$\\"" conversion specifiers"""	533:53:14360:14423	2012443	9	True				
ANR	2013176	Statement	)	533:117:14424:14424	2012443	10	True				
ANR	2013177	ExpressionStatement		533:118:14425:14425	2012443	11	True				
ANR	2013178	GotoStatement	goto error ;	534:3:14430:14440	2012443	12	True				
ANR	2013179	Identifier	error		2012443	0					
ANR	2013180	ElseStatement	else		2012443	0					
ANR	2013181	IfStatement	if ( ! xpgSize && ( nassign [ i ] == 0 ) )		2012443	0					
ANR	2013182	Condition	! xpgSize && ( nassign [ i ] == 0 )	535:13:14455:14483	2012443	0	True				
ANR	2013183	AndExpression	! xpgSize && ( nassign [ i ] == 0 )		2012443	0		&&			
ANR	2013184	UnaryOperationExpression	! xpgSize		2012443	0					
ANR	2013185	UnaryOperator	!		2012443	0					
ANR	2013186	Identifier	xpgSize		2012443	1					
ANR	2013187	EqualityExpression	nassign [ i ] == 0		2012443	1		==			
ANR	2013188	ArrayIndexing	nassign [ i ]		2012443	0					
ANR	2013189	Identifier	nassign		2012443	0					
ANR	2013190	Identifier	i		2012443	1					
ANR	2013191	PrimaryExpression	0		2012443	1					
ANR	2013192	CompoundStatement		224:44:5135:5135	2012443	1					
ANR	2013193	Statement	php_error_docref	540:3:14632:14647	2012443	0	True				
ANR	2013194	Statement	(	540:19:14648:14648	2012443	1	True				
ANR	2013195	Statement	NULL	540:20:14649:14652	2012443	2	True				
ANR	2013196	Statement	TSRMLS_CC	540:25:14654:14662	2012443	3	True				
ANR	2013197	Statement	","	540:34:14663:14663	2012443	4	True				
ANR	2013198	Statement	E_WARNING	540:36:14665:14673	2012443	5	True				
ANR	2013199	Statement	","	540:45:14674:14674	2012443	6	True				
ANR	2013200	Statement	"""Variable is not assigned by any conversion specifiers"""	540:47:14676:14730	2012443	7	True				
ANR	2013201	Statement	)	540:102:14731:14731	2012443	8	True				
ANR	2013202	ExpressionStatement		540:103:14732:14732	2012443	9	True				
ANR	2013203	GotoStatement	goto error ;	541:3:14737:14747	2012443	10	True				
ANR	2013204	Identifier	error		2012443	0					
ANR	2013205	IfStatement	if ( nassign != staticAssign )		2012443	16					
ANR	2013206	Condition	nassign != staticAssign	545:5:14762:14784	2012443	0	True				
ANR	2013207	EqualityExpression	nassign != staticAssign		2012443	0		!=			
ANR	2013208	Identifier	nassign		2012443	0					
ANR	2013209	Identifier	staticAssign		2012443	1					
ANR	2013210	CompoundStatement		234:30:5436:5436	2012443	1					
ANR	2013211	ExpressionStatement	efree ( ( char * ) nassign )	546:2:14791:14813	2012443	0	True				
ANR	2013212	CallExpression	efree ( ( char * ) nassign )		2012443	0					
ANR	2013213	Callee	efree		2012443	0					
ANR	2013214	Identifier	efree		2012443	0					
ANR	2013215	ArgumentList	( char * ) nassign		2012443	1					
ANR	2013216	Argument	( char * ) nassign		2012443	0					
ANR	2013217	CastExpression	( char * ) nassign		2012443	0					
ANR	2013218	CastTarget	char *		2012443	0					
ANR	2013219	Identifier	nassign		2012443	1					
ANR	2013220	ReturnStatement	return SCAN_SUCCESS ;	548:1:14819:14838	2012443	17	True				
ANR	2013221	Identifier	SCAN_SUCCESS		2012443	0					
ANR	2013222	Label	badIndex :	550:0:14841:14849	2012443	18	True				
ANR	2013223	Identifier	badIndex		2012443	0					
ANR	2013224	IfStatement	if ( gotXpg )		2012443	19					
ANR	2013225	Condition	gotXpg	551:5:14856:14861	2012443	0	True				
ANR	2013226	Identifier	gotXpg		2012443	0					
ANR	2013227	CompoundStatement		240:13:5513:5513	2012443	1					
ANR	2013228	Statement	php_error_docref	552:2:14868:14883	2012443	0	True				
ANR	2013229	Statement	(	552:18:14884:14884	2012443	1	True				
ANR	2013230	Statement	NULL	552:19:14885:14888	2012443	2	True				
ANR	2013231	Statement	TSRMLS_CC	552:24:14890:14898	2012443	3	True				
ANR	2013232	Statement	","	552:33:14899:14899	2012443	4	True				
ANR	2013233	Statement	E_WARNING	552:35:14901:14909	2012443	5	True				
ANR	2013234	Statement	","	552:44:14910:14910	2012443	6	True				
ANR	2013235	Statement	"""%s"""	552:46:14912:14915	2012443	7	True				
ANR	2013236	Statement	","	552:50:14916:14916	2012443	8	True				
ANR	2013237	Statement	"""\\""%n$\\"" argument index out of range"""	552:52:14918:14954	2012443	9	True				
ANR	2013238	Statement	)	552:89:14955:14955	2012443	10	True				
ANR	2013239	ExpressionStatement		552:90:14956:14956	2012443	11	True				
ANR	2013240	ElseStatement	else		2012443	0					
ANR	2013241	CompoundStatement		242:8:5615:5615	2012443	0					
ANR	2013242	Statement	php_error_docref	554:2:14970:14985	2012443	0	True				
ANR	2013243	Statement	(	554:18:14986:14986	2012443	1	True				
ANR	2013244	Statement	NULL	554:19:14987:14990	2012443	2	True				
ANR	2013245	Statement	TSRMLS_CC	554:24:14992:15000	2012443	3	True				
ANR	2013246	Statement	","	554:33:15001:15001	2012443	4	True				
ANR	2013247	Statement	E_WARNING	554:35:15003:15011	2012443	5	True				
ANR	2013248	Statement	","	554:44:15012:15012	2012443	6	True				
ANR	2013249	Statement	"""Different numbers of variable names and field specifiers"""	554:46:15014:15071	2012443	7	True				
ANR	2013250	Statement	)	554:104:15072:15072	2012443	8	True				
ANR	2013251	ExpressionStatement		554:105:15073:15073	2012443	9	True				
ANR	2013252	Label	error :	557:0:15079:15084	2012443	20	True				
ANR	2013253	Identifier	error		2012443	0					
ANR	2013254	IfStatement	if ( nassign != staticAssign )		2012443	21					
ANR	2013255	Condition	nassign != staticAssign	558:5:15091:15113	2012443	0	True				
ANR	2013256	EqualityExpression	nassign != staticAssign		2012443	0		!=			
ANR	2013257	Identifier	nassign		2012443	0					
ANR	2013258	Identifier	staticAssign		2012443	1					
ANR	2013259	CompoundStatement		247:30:5765:5765	2012443	1					
ANR	2013260	ExpressionStatement	efree ( ( char * ) nassign )	559:2:15120:15142	2012443	0	True				
ANR	2013261	CallExpression	efree ( ( char * ) nassign )		2012443	0					
ANR	2013262	Callee	efree		2012443	0					
ANR	2013263	Identifier	efree		2012443	0					
ANR	2013264	ArgumentList	( char * ) nassign		2012443	1					
ANR	2013265	Argument	( char * ) nassign		2012443	0					
ANR	2013266	CastExpression	( char * ) nassign		2012443	0					
ANR	2013267	CastTarget	char *		2012443	0					
ANR	2013268	Identifier	nassign		2012443	1					
ANR	2013269	ReturnStatement	return SCAN_ERROR_INVALID_FORMAT ;	561:1:15148:15180	2012443	22	True				
ANR	2013270	Identifier	SCAN_ERROR_INVALID_FORMAT		2012443	0					
ANR	2013271	Statement	undef	562:1:15183:15187	2012443	23	True				
ANR	2013272	Statement	STATIC_LIST_SIZE	562:7:15189:15204	2012443	24	True				
ANR	2013273	ReturnType	PHPAPI int		2012443	1					
ANR	2013274	Identifier	ValidateFormat		2012443	2					
ANR	2013275	ParameterList	"char * format , int numVars , int * totalSubs"		2012443	3					
ANR	2013276	Parameter	char * format	311:26:9307:9318	2012443	0	True				
ANR	2013277	ParameterType	char *		2012443	0					
ANR	2013278	Identifier	format		2012443	1					
ANR	2013279	Parameter	int numVars	311:40:9321:9331	2012443	1	True				
ANR	2013280	ParameterType	int		2012443	0					
ANR	2013281	Identifier	numVars		2012443	1					
ANR	2013282	Parameter	int * totalSubs	311:53:9334:9347	2012443	2	True				
ANR	2013283	ParameterType	int *		2012443	0					
ANR	2013284	Identifier	totalSubs		2012443	1					
ANR	2013285	CFGEntryNode	ENTRY		2012443		True				
ANR	2013286	CFGExitNode	EXIT		2012443		True				
ANR	2013287	Symbol	totalSubs		2012443						
ANR	2013288	Symbol	gotSequential		2012443						
ANR	2013289	Symbol	objIndex		2012443						
ANR	2013290	Symbol	& end		2012443						
ANR	2013291	Symbol	flags		2012443						
ANR	2013292	Symbol	* ch		2012443						
ANR	2013293	Symbol	xpgSize		2012443						
ANR	2013294	Symbol	SCAN_ERROR_INVALID_FORMAT		2012443						
ANR	2013295	Symbol	* staticAssign		2012443						
ANR	2013296	Symbol	gotXpg		2012443						
ANR	2013297	Symbol	strtoul		2012443						
ANR	2013298	Symbol	end		2012443						
ANR	2013299	Symbol	value		2012443						
ANR	2013300	Symbol	isdigit		2012443						
ANR	2013301	Symbol	erealloc		2012443						
ANR	2013302	Symbol	nassign		2012443						
ANR	2013303	Symbol	SCAN_SUPPRESS		2012443						
ANR	2013304	Symbol	SCAN_SUCCESS		2012443						
ANR	2013305	Symbol	NULL		2012443						
ANR	2013306	Symbol	staticAssign		2012443						
ANR	2013307	Symbol	ch		2012443						
ANR	2013308	Symbol	& format		2012443						
ANR	2013309	Symbol	nspace		2012443						
ANR	2013310	Symbol	UCHAR		2012443						
ANR	2013311	Symbol	format		2012443						
ANR	2013312	Symbol	* objIndex		2012443						
ANR	2013313	Symbol	i		2012443						
ANR	2013314	Symbol	* totalSubs		2012443						
ANR	2013315	Symbol	numVars		2012443						
ANR	2013316	Symbol	STATIC_LIST_SIZE		2012443						
ANR	2013317	Symbol	* i		2012443						
ANR	2013318	Symbol	* format		2012443						
ANR	2013319	Symbol	SCAN_WIDTH		2012443						
ANR	2013320	Symbol	SCAN_MAX_ARGS		2012443						
ANR	2013321	Symbol	* nassign		2012443						
ANR	2013322	Symbol	* end		2012443						
ANR	2013323	Symbol	safe_emalloc		2012443						
ANR	2013324	DeclStmt									
ANR	2013325	Decl							int	int	numVars
ANR	2013326	Decl							int	int	nconversions
ANR	2013327	Decl							int	int	totalVars
ANR	2013328	DeclStmt									
ANR	2013329	Decl							int	int	i
ANR	2013330	Decl							int	int	result
ANR	2013331	DeclStmt									
ANR	2013332	Decl							long	long	value
ANR	2013333	DeclStmt									
ANR	2013334	Decl							int	int	objIndex
ANR	2013335	DeclStmt									
ANR	2013336	Decl							char	char *	end
ANR	2013337	Decl							char	char *	baseString
ANR	2013338	DeclStmt									
ANR	2013339	Decl							zval	zval * *	current
ANR	2013340	DeclStmt									
ANR	2013341	Decl							char	char	op
ANR	2013342	DeclStmt									
ANR	2013343	Decl							int	int	base
ANR	2013344	DeclStmt									
ANR	2013345	Decl							int	int	underflow
ANR	2013346	DeclStmt									
ANR	2013347	Decl							size_t	size_t	width
ANR	2013348	DeclStmt									
ANR	2013349	Decl							long ( * ) ( )	long ( * ) ( )	fn
ANR	2013350	DeclStmt									
ANR	2013351	Decl							char	char *	ch
ANR	2013352	Decl							char	char	sch
ANR	2013353	DeclStmt									
ANR	2013354	Decl							int	int	flags
ANR	2013355	DeclStmt									
ANR	2013356	Decl							char	char [ 64 ]	buf
ANR	2013357	DeclStmt									
ANR	2013358	Decl							zval	zval *	tmp
ANR	2013359	DeclStmt									
ANR	2013360	Decl							zend_uint	zend_uint	refcount
ANR	2013361	DeclStmt									
ANR	2013362	Decl							zend_uint	zend_uint	refcount
ANR	2013363	DeclStmt									
ANR	2013364	Decl							CharSet	CharSet	cset
ANR	2013365	DeclStmt									
ANR	2013366	Decl							double	double	dvalue
ANR	2013367	Function	scan_set_error_return	1214:0:29724:30016							
ANR	2013368	FunctionDef	"scan_set_error_return (int numVars , zval * * return_value)"		2013367	0					
ANR	2013369	CompoundStatement		1215:0:29809:30016	2013367	0					
ANR	2013370	IfStatement	if ( numVars )		2013367	0					
ANR	2013371	Condition	numVars	1216:5:29816:29822	2013367	0	True				
ANR	2013372	Identifier	numVars		2013367	0					
ANR	2013373	CompoundStatement		2:14:15:15	2013367	1					
ANR	2013374	ExpressionStatement	Z_TYPE_PP ( return_value ) = IS_LONG	1217:2:29829:29862	2013367	0	True				
ANR	2013375	AssignmentExpression	Z_TYPE_PP ( return_value ) = IS_LONG		2013367	0		=			
ANR	2013376	CallExpression	Z_TYPE_PP ( return_value )		2013367	0					
ANR	2013377	Callee	Z_TYPE_PP		2013367	0					
ANR	2013378	Identifier	Z_TYPE_PP		2013367	0					
ANR	2013379	ArgumentList	return_value		2013367	1					
ANR	2013380	Argument	return_value		2013367	0					
ANR	2013381	Identifier	return_value		2013367	0					
ANR	2013382	Identifier	IS_LONG		2013367	1					
ANR	2013383	ExpressionStatement	Z_LVAL_PP ( return_value ) = SCAN_ERROR_EOF	1218:2:29866:29906	2013367	1	True				
ANR	2013384	AssignmentExpression	Z_LVAL_PP ( return_value ) = SCAN_ERROR_EOF		2013367	0		=			
ANR	2013385	CallExpression	Z_LVAL_PP ( return_value )		2013367	0					
ANR	2013386	Callee	Z_LVAL_PP		2013367	0					
ANR	2013387	Identifier	Z_LVAL_PP		2013367	0					
ANR	2013388	ArgumentList	return_value		2013367	1					
ANR	2013389	Argument	return_value		2013367	0					
ANR	2013390	Identifier	return_value		2013367	0					
ANR	2013391	Identifier	SCAN_ERROR_EOF		2013367	1					
ANR	2013392	ElseStatement	else		2013367	0					
ANR	2013393	CompoundStatement		5:8:124:124	2013367	0					
ANR	2013394	ExpressionStatement	convert_to_null ( * return_value )	1221:2:29979:30011	2013367	0	True				
ANR	2013395	CallExpression	convert_to_null ( * return_value )		2013367	0					
ANR	2013396	Callee	convert_to_null		2013367	0					
ANR	2013397	Identifier	convert_to_null		2013367	0					
ANR	2013398	ArgumentList	* return_value		2013367	1					
ANR	2013399	Argument	* return_value		2013367	0					
ANR	2013400	UnaryOperationExpression	* return_value		2013367	0					
ANR	2013401	UnaryOperator	*		2013367	0					
ANR	2013402	Identifier	return_value		2013367	1					
ANR	2013403	ReturnType	static inline void		2013367	1					
ANR	2013404	Identifier	scan_set_error_return		2013367	2					
ANR	2013405	ParameterList	"int numVars , zval * * return_value"		2013367	3					
ANR	2013406	Parameter	int numVars	1214:41:29765:29775	2013367	0	True				
ANR	2013407	ParameterType	int		2013367	0					
ANR	2013408	Identifier	numVars		2013367	1					
ANR	2013409	Parameter	zval * * return_value	1214:54:29778:29796	2013367	1	True				
ANR	2013410	ParameterType	zval * *		2013367	0					
ANR	2013411	Identifier	return_value		2013367	1					
ANR	2013412	CFGEntryNode	ENTRY		2013367		True				
ANR	2013413	CFGExitNode	EXIT		2013367		True				
ANR	2013414	Symbol	Z_TYPE_PP		2013367						
ANR	2013415	Symbol	return_value		2013367						
ANR	2013416	Symbol	Z_LVAL_PP		2013367						
ANR	2013417	Symbol	IS_LONG		2013367						
ANR	2013418	Symbol	* return_value		2013367						
ANR	2013419	Symbol	SCAN_ERROR_EOF		2013367						
ANR	2013420	Symbol	numVars		2013367						
