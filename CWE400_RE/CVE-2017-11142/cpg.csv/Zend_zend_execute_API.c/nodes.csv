command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	70438	File	data/converged/CVE-2017-11142_php-src/Zend_zend_execute_API.c								
ANR	70439	DeclStmt									
ANR	70440	Decl							"ZEND_API void ( * ) ( zend_execute_data * execute_data_ptr , zend_fcall_info * fci , int return_value_used TSRMLS_DC )"	"ZEND_API void ( * ) ( zend_execute_data * execute_data_ptr , zend_fcall_info * fci , int return_value_used TSRMLS_DC )"	zend_execute_internal
ANR	70441	DeclStmt									
ANR	70442	Decl							const zend_fcall_info	const zend_fcall_info	empty_fcall_info
ANR	70443	DeclStmt									
ANR	70444	Decl							const zend_fcall_info_cache	const zend_fcall_info_cache	empty_fcall_info_cache
ANR	70445	DeclStmt									
ANR	70446	Decl							HANDLE	HANDLE	tq_timer
ANR	70447	DeclStmt									
ANR	70448	Decl							void ( * ) ( int )	void ( * ) ( int )	original_sigsegv_handler
ANR	70449	Function	zend_handle_sigsegv	57:0:2208:2928							
ANR	70450	FunctionDef	zend_handle_sigsegv (int dummy)		70449	0					
ANR	70451	CompoundStatement		58:0:2261:2928	70449	0					
ANR	70452	ExpressionStatement	fflush ( stdout )	59:1:2264:2278	70449	0	True				
ANR	70453	CallExpression	fflush ( stdout )		70449	0					
ANR	70454	Callee	fflush		70449	0					
ANR	70455	Identifier	fflush		70449	0					
ANR	70456	ArgumentList	stdout		70449	1					
ANR	70457	Argument	stdout		70449	0					
ANR	70458	Identifier	stdout		70449	0					
ANR	70459	ExpressionStatement	fflush ( stderr )	60:1:2281:2295	70449	1	True				
ANR	70460	CallExpression	fflush ( stderr )		70449	0					
ANR	70461	Callee	fflush		70449	0					
ANR	70462	Identifier	fflush		70449	0					
ANR	70463	ArgumentList	stderr		70449	1					
ANR	70464	Argument	stderr		70449	0					
ANR	70465	Identifier	stderr		70449	0					
ANR	70466	IfStatement	if ( original_sigsegv_handler == zend_handle_sigsegv )		70449	2					
ANR	70467	Condition	original_sigsegv_handler == zend_handle_sigsegv	61:5:2302:2348	70449	0	True				
ANR	70468	EqualityExpression	original_sigsegv_handler == zend_handle_sigsegv		70449	0		==			
ANR	70469	Identifier	original_sigsegv_handler		70449	0					
ANR	70470	Identifier	zend_handle_sigsegv		70449	1					
ANR	70471	CompoundStatement		4:54:89:89	70449	1					
ANR	70472	ExpressionStatement	"signal ( SIGSEGV , original_sigsegv_handler )"	62:2:2355:2396	70449	0	True				
ANR	70473	CallExpression	"signal ( SIGSEGV , original_sigsegv_handler )"		70449	0					
ANR	70474	Callee	signal		70449	0					
ANR	70475	Identifier	signal		70449	0					
ANR	70476	ArgumentList	SIGSEGV		70449	1					
ANR	70477	Argument	SIGSEGV		70449	0					
ANR	70478	Identifier	SIGSEGV		70449	0					
ANR	70479	Argument	original_sigsegv_handler		70449	1					
ANR	70480	Identifier	original_sigsegv_handler		70449	0					
ANR	70481	ElseStatement	else		70449	0					
ANR	70482	CompoundStatement		6:8:144:144	70449	0					
ANR	70483	ExpressionStatement	"signal ( SIGSEGV , SIG_DFL )"	64:2:2410:2434	70449	0	True				
ANR	70484	CallExpression	"signal ( SIGSEGV , SIG_DFL )"		70449	0					
ANR	70485	Callee	signal		70449	0					
ANR	70486	Identifier	signal		70449	0					
ANR	70487	ArgumentList	SIGSEGV		70449	1					
ANR	70488	Argument	SIGSEGV		70449	0					
ANR	70489	Identifier	SIGSEGV		70449	0					
ANR	70490	Argument	SIG_DFL		70449	1					
ANR	70491	Identifier	SIG_DFL		70449	0					
ANR	70492	CompoundStatement		9:1:178:178	70449	3					
ANR	70493	ExpressionStatement	TSRMLS_FETCH ( )	67:2:2444:2458	70449	0	True				
ANR	70494	CallExpression	TSRMLS_FETCH ( )		70449	0					
ANR	70495	Callee	TSRMLS_FETCH		70449	0					
ANR	70496	Identifier	TSRMLS_FETCH		70449	0					
ANR	70497	ArgumentList			70449	1					
ANR	70498	ExpressionStatement	"fprintf ( stderr , ""SIGSEGV caught on opcode %d on opline %d of %s() at %s:%d\\n\\n"" , active_opline -> opcode , active_opline - EG ( active_op_array ) -> opcodes , get_active_function_name ( TSRMLS_C ) , zend_get_executed_filename ( TSRMLS_C ) , zend_get_executed_lineno ( TSRMLS_C ) )"	69:2:2463:2740	70449	1	True				
ANR	70499	CallExpression	"fprintf ( stderr , ""SIGSEGV caught on opcode %d on opline %d of %s() at %s:%d\\n\\n"" , active_opline -> opcode , active_opline - EG ( active_op_array ) -> opcodes , get_active_function_name ( TSRMLS_C ) , zend_get_executed_filename ( TSRMLS_C ) , zend_get_executed_lineno ( TSRMLS_C ) )"		70449	0					
ANR	70500	Callee	fprintf		70449	0					
ANR	70501	Identifier	fprintf		70449	0					
ANR	70502	ArgumentList	stderr		70449	1					
ANR	70503	Argument	stderr		70449	0					
ANR	70504	Identifier	stderr		70449	0					
ANR	70505	Argument	"""SIGSEGV caught on opcode %d on opline %d of %s() at %s:%d\\n\\n"""		70449	1					
ANR	70506	PrimaryExpression	"""SIGSEGV caught on opcode %d on opline %d of %s() at %s:%d\\n\\n"""		70449	0					
ANR	70507	Argument	active_opline -> opcode		70449	2					
ANR	70508	PtrMemberAccess	active_opline -> opcode		70449	0					
ANR	70509	Identifier	active_opline		70449	0					
ANR	70510	Identifier	opcode		70449	1					
ANR	70511	Argument	active_opline - EG ( active_op_array ) -> opcodes		70449	3					
ANR	70512	AdditiveExpression	active_opline - EG ( active_op_array ) -> opcodes		70449	0		-			
ANR	70513	Identifier	active_opline		70449	0					
ANR	70514	PtrMemberAccess	EG ( active_op_array ) -> opcodes		70449	1					
ANR	70515	CallExpression	EG ( active_op_array )		70449	0					
ANR	70516	Callee	EG		70449	0					
ANR	70517	Identifier	EG		70449	0					
ANR	70518	ArgumentList	active_op_array		70449	1					
ANR	70519	Argument	active_op_array		70449	0					
ANR	70520	Identifier	active_op_array		70449	0					
ANR	70521	Identifier	opcodes		70449	1					
ANR	70522	Argument	get_active_function_name ( TSRMLS_C )		70449	4					
ANR	70523	CallExpression	get_active_function_name ( TSRMLS_C )		70449	0					
ANR	70524	Callee	get_active_function_name		70449	0					
ANR	70525	Identifier	get_active_function_name		70449	0					
ANR	70526	ArgumentList	TSRMLS_C		70449	1					
ANR	70527	Argument	TSRMLS_C		70449	0					
ANR	70528	Identifier	TSRMLS_C		70449	0					
ANR	70529	Argument	zend_get_executed_filename ( TSRMLS_C )		70449	5					
ANR	70530	CallExpression	zend_get_executed_filename ( TSRMLS_C )		70449	0					
ANR	70531	Callee	zend_get_executed_filename		70449	0					
ANR	70532	Identifier	zend_get_executed_filename		70449	0					
ANR	70533	ArgumentList	TSRMLS_C		70449	1					
ANR	70534	Argument	TSRMLS_C		70449	0					
ANR	70535	Identifier	TSRMLS_C		70449	0					
ANR	70536	Argument	zend_get_executed_lineno ( TSRMLS_C )		70449	6					
ANR	70537	CallExpression	zend_get_executed_lineno ( TSRMLS_C )		70449	0					
ANR	70538	Callee	zend_get_executed_lineno		70449	0					
ANR	70539	Identifier	zend_get_executed_lineno		70449	0					
ANR	70540	ArgumentList	TSRMLS_C		70449	1					
ANR	70541	Argument	TSRMLS_C		70449	0					
ANR	70542	Identifier	TSRMLS_C		70449	0					
ANR	70543	ExpressionStatement	fflush ( stderr )	77:2:2810:2824	70449	2	True				
ANR	70544	CallExpression	fflush ( stderr )		70449	0					
ANR	70545	Callee	fflush		70449	0					
ANR	70546	Identifier	fflush		70449	0					
ANR	70547	ArgumentList	stderr		70449	1					
ANR	70548	Argument	stderr		70449	0					
ANR	70549	Identifier	stderr		70449	0					
ANR	70550	IfStatement	if ( original_sigsegv_handler != zend_handle_sigsegv )		70449	4					
ANR	70551	Condition	original_sigsegv_handler != zend_handle_sigsegv	80:5:2841:2885	70449	0	True				
ANR	70552	EqualityExpression	original_sigsegv_handler != zend_handle_sigsegv		70449	0		!=			
ANR	70553	Identifier	original_sigsegv_handler		70449	0					
ANR	70554	Identifier	zend_handle_sigsegv		70449	1					
ANR	70555	CompoundStatement		23:52:626:626	70449	1					
ANR	70556	ExpressionStatement	original_sigsegv_handler ( dummy )	81:2:2892:2923	70449	0	True				
ANR	70557	CallExpression	original_sigsegv_handler ( dummy )		70449	0					
ANR	70558	Callee	original_sigsegv_handler		70449	0					
ANR	70559	Identifier	original_sigsegv_handler		70449	0					
ANR	70560	ArgumentList	dummy		70449	1					
ANR	70561	Argument	dummy		70449	0					
ANR	70562	Identifier	dummy		70449	0					
ANR	70563	ReturnType	static void		70449	1					
ANR	70564	Identifier	zend_handle_sigsegv		70449	2					
ANR	70565	ParameterList	int dummy		70449	3					
ANR	70566	Parameter	int dummy	57:32:2240:2248	70449	0	True				
ANR	70567	ParameterType	int		70449	0					
ANR	70568	Identifier	dummy		70449	1					
ANR	70569	CFGEntryNode	ENTRY		70449		True				
ANR	70570	CFGExitNode	EXIT		70449		True				
ANR	70571	Symbol	EG ( active_op_array ) -> opcodes		70449						
ANR	70572	Symbol	EG		70449						
ANR	70573	Symbol	stdout		70449						
ANR	70574	Symbol	original_sigsegv_handler		70449						
ANR	70575	Symbol	active_op_array		70449						
ANR	70576	Symbol	get_active_function_name		70449						
ANR	70577	Symbol	* EG		70449						
ANR	70578	Symbol	stderr		70449						
ANR	70579	Symbol	zend_handle_sigsegv		70449						
ANR	70580	Symbol	dummy		70449						
ANR	70581	Symbol	zend_get_executed_lineno		70449						
ANR	70582	Symbol	* active_opline		70449						
ANR	70583	Symbol	TSRMLS_C		70449						
ANR	70584	Symbol	SIGSEGV		70449						
ANR	70585	Symbol	zend_get_executed_filename		70449						
ANR	70586	Symbol	SIG_DFL		70449						
ANR	70587	Symbol	active_opline -> opcode		70449						
ANR	70588	Symbol	active_opline		70449						
ANR	70589	DeclStmt									
ANR	70590	Decl							int	int	symbols
ANR	70591	DeclStmt									
ANR	70592	Decl							zval	zval *	zeh
ANR	70593	DeclStmt									
ANR	70594	Decl							zend_class_entry	zend_class_entry *	ce
ANR	70595	DeclStmt									
ANR	70596	Decl							const char	const char *	function_name
ANR	70597	Function	zend_is_true	443:0:13331:13407							
ANR	70598	FunctionDef	zend_is_true (zval * op)		70597	0					
ANR	70599	CompoundStatement		444:0:13377:13407	70597	0					
ANR	70600	ReturnStatement	return i_zend_is_true ( op ) ;	445:1:13380:13405	70597	0	True				
ANR	70601	CallExpression	i_zend_is_true ( op )		70597	0					
ANR	70602	Callee	i_zend_is_true		70597	0					
ANR	70603	Identifier	i_zend_is_true		70597	0					
ANR	70604	ArgumentList	op		70597	1					
ANR	70605	Argument	op		70597	0					
ANR	70606	Identifier	op		70597	0					
ANR	70607	ReturnType	ZEND_API int		70597	1					
ANR	70608	Identifier	zend_is_true		70597	2					
ANR	70609	ParameterList	zval * op		70597	3					
ANR	70610	Parameter	zval * op	443:26:13357:13364	70597	0	True				
ANR	70611	ParameterType	zval *		70597	0					
ANR	70612	Identifier	op		70597	1					
ANR	70613	CFGEntryNode	ENTRY		70597		True				
ANR	70614	CFGExitNode	EXIT		70597		True				
ANR	70615	Symbol	op		70597						
ANR	70616	Symbol	i_zend_is_true		70597						
ANR	70617	DeclStmt									
ANR	70618	Decl							zval	zval *	p
ANR	70619	DeclStmt									
ANR	70620	Decl							zval	zval	const_value
ANR	70621	DeclStmt									
ANR	70622	Decl							char	char *	colon
ANR	70623	DeclStmt									
ANR	70624	Decl							int	int	refcount
ANR	70625	DeclStmt									
ANR	70626	Decl							zend_uchar	zend_uchar	is_ref
ANR	70627	DeclStmt									
ANR	70628	Decl							char	char *	actual
ANR	70629	DeclStmt									
ANR	70630	Decl							char	char *	save
ANR	70631	Decl							char	char *	slash
ANR	70632	DeclStmt									
ANR	70633	Decl							int	int	actual_len
ANR	70634	DeclStmt									
ANR	70635	Decl							int	int	fix_save
ANR	70636	Function	zval_update_constant	569:0:16760:16920							
ANR	70637	FunctionDef	"zval_update_constant (zval * * pp , zend_bool inline_change TSRMLS_DC)"		70636	0					
ANR	70638	CompoundStatement		570:0:16850:16920	70636	0					
ANR	70639	Statement	return	571:1:16853:16858	70636	0	True				
ANR	70640	Statement	zval_update_constant_ex	571:8:16860:16882	70636	1	True				
ANR	70641	Statement	(	571:31:16883:16883	70636	2	True				
ANR	70642	Statement	pp	571:32:16884:16885	70636	3	True				
ANR	70643	Statement	","	571:34:16886:16886	70636	4	True				
ANR	70644	Statement	inline_change	571:36:16888:16900	70636	5	True				
ANR	70645	Statement	","	571:49:16901:16901	70636	6	True				
ANR	70646	Statement	NULL	571:51:16903:16906	70636	7	True				
ANR	70647	Statement	TSRMLS_CC	571:56:16908:16916	70636	8	True				
ANR	70648	Statement	)	571:65:16917:16917	70636	9	True				
ANR	70649	ExpressionStatement		571:66:16918:16918	70636	10	True				
ANR	70650	ReturnType	ZEND_API int		70636	1					
ANR	70651	Identifier	zval_update_constant		70636	2					
ANR	70652	ParameterList	"zval * * pp , zend_bool inline_change TSRMLS_DC"		70636	3					
ANR	70653	Parameter	zval * * pp	569:34:16794:16802	70636	0	True				
ANR	70654	ParameterType	zval * *		70636	0					
ANR	70655	Identifier	pp		70636	1					
ANR	70656	Parameter	zend_bool inline_change TSRMLS_DC	569:45:16805:16837	70636	1	True				
ANR	70657	ParameterType	zend_bool inline_change		70636	0					
ANR	70658	Identifier	TSRMLS_DC		70636	1					
ANR	70659	CFGEntryNode	ENTRY		70636		True				
ANR	70660	CFGExitNode	EXIT		70636		True				
ANR	70661	Symbol	pp		70636						
ANR	70662	Symbol	TSRMLS_DC		70636						
ANR	70663	DeclStmt									
ANR	70664	Decl							zval	zval * * *	params_array
ANR	70665	DeclStmt									
ANR	70666	Decl							zend_uint	zend_uint	i
ANR	70667	DeclStmt									
ANR	70668	Decl							int	int	ex_retval
ANR	70669	DeclStmt									
ANR	70670	Decl							zval	zval *	local_retval_ptr
ANR	70671	DeclStmt									
ANR	70672	Decl							zend_fcall_info	zend_fcall_info	fci
ANR	70673	DeclStmt									
ANR	70674	Decl							zend_uint	zend_uint	i
ANR	70675	DeclStmt									
ANR	70676	Decl							zval	zval * *	original_return_value
ANR	70677	DeclStmt									
ANR	70678	Decl							HashTable	HashTable *	calling_symbol_table
ANR	70679	DeclStmt									
ANR	70680	Decl							zend_op_array	zend_op_array *	original_op_array
ANR	70681	DeclStmt									
ANR	70682	Decl							zend_op	zend_op * *	original_opline_ptr
ANR	70683	DeclStmt									
ANR	70684	Decl							zend_class_entry	zend_class_entry *	current_scope
ANR	70685	DeclStmt									
ANR	70686	Decl							zend_class_entry	zend_class_entry *	current_called_scope
ANR	70687	DeclStmt									
ANR	70688	Decl							zend_class_entry	zend_class_entry *	calling_scope
ANR	70689	DeclStmt									
ANR	70690	Decl							zend_class_entry	zend_class_entry *	called_scope
ANR	70691	DeclStmt									
ANR	70692	Decl							zval	zval *	current_this
ANR	70693	DeclStmt									
ANR	70694	Decl							zend_execute_data	zend_execute_data	execute_data
ANR	70695	DeclStmt									
ANR	70696	Decl							zend_fcall_info_cache	zend_fcall_info_cache	fci_cache_local
ANR	70697	DeclStmt									
ANR	70698	Decl							char	char *	callable_name
ANR	70699	DeclStmt									
ANR	70700	Decl							char	char *	error
ANR	70701	DeclStmt									
ANR	70702	Decl							zval	zval *	param
ANR	70703	DeclStmt									
ANR	70704	Decl							zval	zval *	new_zval
ANR	70705	DeclStmt									
ANR	70706	Decl							zval	zval *	this_ptr
ANR	70707	DeclStmt									
ANR	70708	Decl							const zend_op	const zend_op *	current_opline_before_exception
ANR	70709	DeclStmt									
ANR	70710	Decl							int	int	call_via_handler
ANR	70711	DeclStmt									
ANR	70712	Decl							zval	zval * * [ 1 ]	args
ANR	70713	DeclStmt									
ANR	70714	Decl							zval	zval	autoload_function
ANR	70715	DeclStmt									
ANR	70716	Decl							zval	zval *	class_name_ptr
ANR	70717	DeclStmt									
ANR	70718	Decl							zval	zval *	retval_ptr
ANR	70719	DeclStmt									
ANR	70720	Decl							int	int	retval
ANR	70721	Decl							int	int	lc_length
ANR	70722	DeclStmt									
ANR	70723	Decl							char	char *	lc_name
ANR	70724	DeclStmt									
ANR	70725	Decl							char	char *	lc_free
ANR	70726	DeclStmt									
ANR	70727	Decl							zend_fcall_info	zend_fcall_info	fcall_info
ANR	70728	DeclStmt									
ANR	70729	Decl							zend_fcall_info_cache	zend_fcall_info_cache	fcall_cache
ANR	70730	DeclStmt									
ANR	70731	Decl							char	char	dummy
ANR	70732	DeclStmt									
ANR	70733	Decl							ulong	ulong	hash
ANR	70734	DeclStmt									
ANR	70735	Decl							zval	zval	pv
ANR	70736	DeclStmt									
ANR	70737	Decl							zend_op_array	zend_op_array *	new_op_array
ANR	70738	DeclStmt									
ANR	70739	Decl							zend_op_array	zend_op_array *	original_active_op_array
ANR	70740	DeclStmt									
ANR	70741	Decl							zend_uint	zend_uint	original_compiler_options
ANR	70742	DeclStmt									
ANR	70743	Decl							int	int	retval
ANR	70744	DeclStmt									
ANR	70745	Decl							zval	zval *	local_retval_ptr
ANR	70746	DeclStmt									
ANR	70747	Decl							zval	zval * *	original_return_value_ptr_ptr
ANR	70748	DeclStmt									
ANR	70749	Decl							zend_op	zend_op * *	original_opline_ptr
ANR	70750	DeclStmt									
ANR	70751	Decl							int	int	orig_interactive
ANR	70752	Function	zend_eval_stringl_ex	1123:0:34177:34549							
ANR	70753	FunctionDef	"zend_eval_stringl_ex (char * str , int str_len , zval * retval_ptr , char * string_name , int handle_exceptions TSRMLS_DC)"		70752	0					
ANR	70754	CompoundStatement		1124:0:34315:34549	70752	0					
ANR	70755	IdentifierDeclStatement	int result ;	1125:1:34318:34328	70752	0	True				
ANR	70756	IdentifierDecl	result		70752	0					
ANR	70757	IdentifierDeclType	int		70752	0					
ANR	70758	Identifier	result		70752	1					
ANR	70759	Statement	result	1127:1:34332:34337	70752	1	True				
ANR	70760	Statement	=	1127:8:34339:34339	70752	2	True				
ANR	70761	Statement	zend_eval_stringl	1127:10:34341:34357	70752	3	True				
ANR	70762	Statement	(	1127:27:34358:34358	70752	4	True				
ANR	70763	Statement	str	1127:28:34359:34361	70752	5	True				
ANR	70764	Statement	","	1127:31:34362:34362	70752	6	True				
ANR	70765	Statement	str_len	1127:33:34364:34370	70752	7	True				
ANR	70766	Statement	","	1127:40:34371:34371	70752	8	True				
ANR	70767	Statement	retval_ptr	1127:42:34373:34382	70752	9	True				
ANR	70768	Statement	","	1127:52:34383:34383	70752	10	True				
ANR	70769	Statement	string_name	1127:54:34385:34395	70752	11	True				
ANR	70770	Statement	TSRMLS_CC	1127:66:34397:34405	70752	12	True				
ANR	70771	Statement	)	1127:75:34406:34406	70752	13	True				
ANR	70772	ExpressionStatement		1127:76:34407:34407	70752	14	True				
ANR	70773	IfStatement	if ( handle_exceptions && EG ( exception ) )		70752	15					
ANR	70774	Condition	handle_exceptions && EG ( exception )	1128:5:34414:34447	70752	0	True				
ANR	70775	AndExpression	handle_exceptions && EG ( exception )		70752	0		&&			
ANR	70776	Identifier	handle_exceptions		70752	0					
ANR	70777	CallExpression	EG ( exception )		70752	1					
ANR	70778	Callee	EG		70752	0					
ANR	70779	Identifier	EG		70752	0					
ANR	70780	ArgumentList	exception		70752	1					
ANR	70781	Argument	exception		70752	0					
ANR	70782	Identifier	exception		70752	0					
ANR	70783	CompoundStatement		5:41:134:134	70752	1					
ANR	70784	Statement	zend_exception_error	1129:2:34454:34473	70752	0	True				
ANR	70785	Statement	(	1129:22:34474:34474	70752	1	True				
ANR	70786	Statement	EG	1129:23:34475:34476	70752	2	True				
ANR	70787	Statement	(	1129:25:34477:34477	70752	3	True				
ANR	70788	Statement	exception	1129:26:34478:34486	70752	4	True				
ANR	70789	Statement	)	1129:35:34487:34487	70752	5	True				
ANR	70790	Statement	","	1129:36:34488:34488	70752	6	True				
ANR	70791	Statement	E_ERROR	1129:38:34490:34496	70752	7	True				
ANR	70792	Statement	TSRMLS_CC	1129:46:34498:34506	70752	8	True				
ANR	70793	Statement	)	1129:55:34507:34507	70752	9	True				
ANR	70794	ExpressionStatement		1129:56:34508:34508	70752	10	True				
ANR	70795	ExpressionStatement	result = FAILURE	1130:2:34512:34528	70752	11	True				
ANR	70796	AssignmentExpression	result = FAILURE		70752	0		=			
ANR	70797	Identifier	result		70752	0					
ANR	70798	Identifier	FAILURE		70752	1					
ANR	70799	ReturnStatement	return result ;	1132:1:34534:34547	70752	16	True				
ANR	70800	Identifier	result		70752	0					
ANR	70801	ReturnType	ZEND_API int		70752	1					
ANR	70802	Identifier	zend_eval_stringl_ex		70752	2					
ANR	70803	ParameterList	"char * str , int str_len , zval * retval_ptr , char * string_name , int handle_exceptions TSRMLS_DC"		70752	3					
ANR	70804	Parameter	char * str	1123:34:34211:34219	70752	0	True				
ANR	70805	ParameterType	char *		70752	0					
ANR	70806	Identifier	str		70752	1					
ANR	70807	Parameter	int str_len	1123:45:34222:34232	70752	1	True				
ANR	70808	ParameterType	int		70752	0					
ANR	70809	Identifier	str_len		70752	1					
ANR	70810	Parameter	zval * retval_ptr	1123:58:34235:34250	70752	2	True				
ANR	70811	ParameterType	zval *		70752	0					
ANR	70812	Identifier	retval_ptr		70752	1					
ANR	70813	Parameter	char * string_name	1123:76:34253:34269	70752	3	True				
ANR	70814	ParameterType	char *		70752	0					
ANR	70815	Identifier	string_name		70752	1					
ANR	70816	Parameter	int handle_exceptions TSRMLS_DC	1123:95:34272:34302	70752	4	True				
ANR	70817	ParameterType	int handle_exceptions		70752	0					
ANR	70818	Identifier	TSRMLS_DC		70752	1					
ANR	70819	CFGEntryNode	ENTRY		70752		True				
ANR	70820	CFGExitNode	EXIT		70752		True				
ANR	70821	Symbol	str		70752						
ANR	70822	Symbol	result		70752						
ANR	70823	Symbol	exception		70752						
ANR	70824	Symbol	EG		70752						
ANR	70825	Symbol	str_len		70752						
ANR	70826	Symbol	handle_exceptions		70752						
ANR	70827	Symbol	TSRMLS_DC		70752						
ANR	70828	Symbol	FAILURE		70752						
ANR	70829	Symbol	string_name		70752						
ANR	70830	Symbol	retval_ptr		70752						
ANR	70831	Function	zend_eval_string_ex	1136:0:34562:34790							
ANR	70832	FunctionDef	"zend_eval_string_ex (char * str , zval * retval_ptr , char * string_name , int handle_exceptions TSRMLS_DC)"		70831	0					
ANR	70833	CompoundStatement		1137:0:34686:34790	70831	0					
ANR	70834	Statement	return	1138:1:34689:34694	70831	0	True				
ANR	70835	Statement	zend_eval_stringl_ex	1138:8:34696:34715	70831	1	True				
ANR	70836	Statement	(	1138:28:34716:34716	70831	2	True				
ANR	70837	Statement	str	1138:29:34717:34719	70831	3	True				
ANR	70838	Statement	","	1138:32:34720:34720	70831	4	True				
ANR	70839	Statement	strlen	1138:34:34722:34727	70831	5	True				
ANR	70840	Statement	(	1138:40:34728:34728	70831	6	True				
ANR	70841	Statement	str	1138:41:34729:34731	70831	7	True				
ANR	70842	Statement	)	1138:44:34732:34732	70831	8	True				
ANR	70843	Statement	","	1138:45:34733:34733	70831	9	True				
ANR	70844	Statement	retval_ptr	1138:47:34735:34744	70831	10	True				
ANR	70845	Statement	","	1138:57:34745:34745	70831	11	True				
ANR	70846	Statement	string_name	1138:59:34747:34757	70831	12	True				
ANR	70847	Statement	","	1138:70:34758:34758	70831	13	True				
ANR	70848	Statement	handle_exceptions	1138:72:34760:34776	70831	14	True				
ANR	70849	Statement	TSRMLS_CC	1138:90:34778:34786	70831	15	True				
ANR	70850	Statement	)	1138:99:34787:34787	70831	16	True				
ANR	70851	ExpressionStatement		1138:100:34788:34788	70831	17	True				
ANR	70852	ReturnType	ZEND_API int		70831	1					
ANR	70853	Identifier	zend_eval_string_ex		70831	2					
ANR	70854	ParameterList	"char * str , zval * retval_ptr , char * string_name , int handle_exceptions TSRMLS_DC"		70831	3					
ANR	70855	Parameter	char * str	1136:33:34595:34603	70831	0	True				
ANR	70856	ParameterType	char *		70831	0					
ANR	70857	Identifier	str		70831	1					
ANR	70858	Parameter	zval * retval_ptr	1136:44:34606:34621	70831	1	True				
ANR	70859	ParameterType	zval *		70831	0					
ANR	70860	Identifier	retval_ptr		70831	1					
ANR	70861	Parameter	char * string_name	1136:62:34624:34640	70831	2	True				
ANR	70862	ParameterType	char *		70831	0					
ANR	70863	Identifier	string_name		70831	1					
ANR	70864	Parameter	int handle_exceptions TSRMLS_DC	1136:81:34643:34673	70831	3	True				
ANR	70865	ParameterType	int handle_exceptions		70831	0					
ANR	70866	Identifier	TSRMLS_DC		70831	1					
ANR	70867	CFGEntryNode	ENTRY		70831		True				
ANR	70868	CFGExitNode	EXIT		70831		True				
ANR	70869	Symbol	str		70831						
ANR	70870	Symbol	TSRMLS_DC		70831						
ANR	70871	Symbol	string_name		70831						
ANR	70872	Symbol	retval_ptr		70831						
ANR	70873	DeclStmt									
ANR	70874	Decl							zend_op	zend_op *	opline
ANR	70875	Decl							zend_op	zend_op *	end
ANR	70876	DeclStmt									
ANR	70877	Decl							zend_op	zend_op *	ret_opline
ANR	70878	DeclStmt									
ANR	70879	Decl							int	int	orig_interactive
ANR	70880	Function	zend_timeout	1215:0:36907:37497							
ANR	70881	FunctionDef	zend_timeout (int dummy)		70880	0					
ANR	70882	CompoundStatement		1216:0:36955:37497	70880	0					
ANR	70883	ExpressionStatement	TSRMLS_FETCH ( )	1217:1:36958:36972	70880	0	True				
ANR	70884	CallExpression	TSRMLS_FETCH ( )		70880	0					
ANR	70885	Callee	TSRMLS_FETCH		70880	0					
ANR	70886	Identifier	TSRMLS_FETCH		70880	0					
ANR	70887	ArgumentList			70880	1					
ANR	70888	IfStatement	if ( zend_on_timeout )		70880	1					
ANR	70889	Condition	zend_on_timeout	1219:5:36980:36994	70880	0	True				
ANR	70890	Identifier	zend_on_timeout		70880	0					
ANR	70891	CompoundStatement		4:22:41:41	70880	1					
ANR	70892	ExpressionStatement	SIGG ( running ) = 0	1227:2:37287:37304	70880	0	True				
ANR	70893	AssignmentExpression	SIGG ( running ) = 0		70880	0		=			
ANR	70894	CallExpression	SIGG ( running )		70880	0					
ANR	70895	Callee	SIGG		70880	0					
ANR	70896	Identifier	SIGG		70880	0					
ANR	70897	ArgumentList	running		70880	1					
ANR	70898	Argument	running		70880	0					
ANR	70899	Identifier	running		70880	0					
ANR	70900	PrimaryExpression	0		70880	1					
ANR	70901	Statement	zend_on_timeout	1229:2:37315:37329	70880	1	True				
ANR	70902	Statement	(	1229:17:37330:37330	70880	2	True				
ANR	70903	Statement	EG	1229:18:37331:37332	70880	3	True				
ANR	70904	Statement	(	1229:20:37333:37333	70880	4	True				
ANR	70905	Statement	timeout_seconds	1229:21:37334:37348	70880	5	True				
ANR	70906	Statement	)	1229:36:37349:37349	70880	6	True				
ANR	70907	Statement	TSRMLS_CC	1229:38:37351:37359	70880	7	True				
ANR	70908	Statement	)	1229:47:37360:37360	70880	8	True				
ANR	70909	ExpressionStatement		1229:48:37361:37361	70880	9	True				
ANR	70910	ExpressionStatement	"zend_error ( E_ERROR , ""Maximum execution time of %d second%s exceeded"" , EG ( timeout_seconds ) , EG ( timeout_seconds ) == 1 ? """" : ""s"" )"	1232:1:37368:37495	70880	2	True				
ANR	70911	CallExpression	"zend_error ( E_ERROR , ""Maximum execution time of %d second%s exceeded"" , EG ( timeout_seconds ) , EG ( timeout_seconds ) == 1 ? """" : ""s"" )"		70880	0					
ANR	70912	Callee	zend_error		70880	0					
ANR	70913	Identifier	zend_error		70880	0					
ANR	70914	ArgumentList	E_ERROR		70880	1					
ANR	70915	Argument	E_ERROR		70880	0					
ANR	70916	Identifier	E_ERROR		70880	0					
ANR	70917	Argument	"""Maximum execution time of %d second%s exceeded"""		70880	1					
ANR	70918	PrimaryExpression	"""Maximum execution time of %d second%s exceeded"""		70880	0					
ANR	70919	Argument	EG ( timeout_seconds )		70880	2					
ANR	70920	CallExpression	EG ( timeout_seconds )		70880	0					
ANR	70921	Callee	EG		70880	0					
ANR	70922	Identifier	EG		70880	0					
ANR	70923	ArgumentList	timeout_seconds		70880	1					
ANR	70924	Argument	timeout_seconds		70880	0					
ANR	70925	Identifier	timeout_seconds		70880	0					
ANR	70926	Argument	"EG ( timeout_seconds ) == 1 ? """" : ""s"""		70880	3					
ANR	70927	ConditionalExpression	"EG ( timeout_seconds ) == 1 ? """" : ""s"""		70880	0					
ANR	70928	Condition	EG ( timeout_seconds ) == 1		70880	0					
ANR	70929	EqualityExpression	EG ( timeout_seconds ) == 1		70880	0		==			
ANR	70930	CallExpression	EG ( timeout_seconds )		70880	0					
ANR	70931	Callee	EG		70880	0					
ANR	70932	Identifier	EG		70880	0					
ANR	70933	ArgumentList	timeout_seconds		70880	1					
ANR	70934	Argument	timeout_seconds		70880	0					
ANR	70935	Identifier	timeout_seconds		70880	0					
ANR	70936	PrimaryExpression	1		70880	1					
ANR	70937	PrimaryExpression	""""""		70880	1					
ANR	70938	PrimaryExpression	"""s"""		70880	2					
ANR	70939	ReturnType	ZEND_API void		70880	1					
ANR	70940	Identifier	zend_timeout		70880	2					
ANR	70941	ParameterList	int dummy		70880	3					
ANR	70942	Parameter	int dummy	1215:27:36934:36942	70880	0	True				
ANR	70943	ParameterType	int		70880	0					
ANR	70944	Identifier	dummy		70880	1					
ANR	70945	CFGEntryNode	ENTRY		70880		True				
ANR	70946	CFGExitNode	EXIT		70880		True				
ANR	70947	Symbol	dummy		70880						
ANR	70948	Symbol	zend_on_timeout		70880						
ANR	70949	Symbol	SIGG		70880						
ANR	70950	Symbol	running		70880						
ANR	70951	Symbol	EG		70880						
ANR	70952	Symbol	E_ERROR		70880						
ANR	70953	Symbol	timeout_seconds		70880						
ANR	70954	Function	tq_timer_cb	1237:0:37528:37819							
ANR	70955	FunctionDef	"tq_timer_cb (PVOID arg , BOOLEAN timed_out)"		70954	0					
ANR	70956	CompoundStatement		1238:0:37584:37819	70954	0					
ANR	70957	IdentifierDeclStatement	zend_bool * php_timed_out ;	1239:1:37587:37611	70954	0	True				
ANR	70958	IdentifierDecl	* php_timed_out		70954	0					
ANR	70959	IdentifierDeclType	zend_bool *		70954	0					
ANR	70960	Identifier	php_timed_out		70954	1					
ANR	70961	IfStatement	if ( ! timed_out )		70954	1					
ANR	70962	Condition	! timed_out	1243:5:37735:37744	70954	0	True				
ANR	70963	UnaryOperationExpression	! timed_out		70954	0					
ANR	70964	UnaryOperator	!		70954	0					
ANR	70965	Identifier	timed_out		70954	1					
ANR	70966	CompoundStatement		6:17:162:162	70954	1					
ANR	70967	ReturnStatement	return ;	1244:2:37751:37757	70954	0	True				
ANR	70968	ExpressionStatement	php_timed_out = ( zend_bool * ) arg	1247:1:37764:37796	70954	2	True				
ANR	70969	AssignmentExpression	php_timed_out = ( zend_bool * ) arg		70954	0		=			
ANR	70970	Identifier	php_timed_out		70954	0					
ANR	70971	CastExpression	( zend_bool * ) arg		70954	1					
ANR	70972	CastTarget	zend_bool *		70954	0					
ANR	70973	Identifier	arg		70954	1					
ANR	70974	ExpressionStatement	* php_timed_out = 1	1248:1:37799:37817	70954	3	True				
ANR	70975	AssignmentExpression	* php_timed_out = 1		70954	0		=			
ANR	70976	UnaryOperationExpression	* php_timed_out		70954	0					
ANR	70977	UnaryOperator	*		70954	0					
ANR	70978	Identifier	php_timed_out		70954	1					
ANR	70979	PrimaryExpression	1		70954	1					
ANR	70980	ReturnType	VOID CALLBACK		70954	1					
ANR	70981	Identifier	tq_timer_cb		70954	2					
ANR	70982	ParameterList	"PVOID arg , BOOLEAN timed_out"		70954	3					
ANR	70983	Parameter	PVOID arg	1237:26:37554:37562	70954	0	True				
ANR	70984	ParameterType	PVOID		70954	0					
ANR	70985	Identifier	arg		70954	1					
ANR	70986	Parameter	BOOLEAN timed_out	1237:37:37565:37581	70954	1	True				
ANR	70987	ParameterType	BOOLEAN		70954	0					
ANR	70988	Identifier	timed_out		70954	1					
ANR	70989	CFGEntryNode	ENTRY		70954		True				
ANR	70990	CFGExitNode	EXIT		70954		True				
ANR	70991	Symbol	php_timed_out		70954						
ANR	70992	Symbol	arg		70954						
ANR	70993	Symbol	timed_out		70954						
ANR	70994	Symbol	* php_timed_out		70954						
ANR	70995	Function	zend_set_timeout	1257:0:37909:39500							
ANR	70996	FunctionDef	"zend_set_timeout (long seconds , int reset_signals)"		70995	0					
ANR	70997	CompoundStatement		1258:0:37974:39500	70995	0					
ANR	70998	ExpressionStatement	TSRMLS_FETCH ( )	1259:1:37977:37991	70995	0	True				
ANR	70999	CallExpression	TSRMLS_FETCH ( )		70995	0					
ANR	71000	Callee	TSRMLS_FETCH		70995	0					
ANR	71001	Identifier	TSRMLS_FETCH		70995	0					
ANR	71002	ArgumentList			70995	1					
ANR	71003	ExpressionStatement	EG ( timeout_seconds ) = seconds	1261:1:37995:38024	70995	1	True				
ANR	71004	AssignmentExpression	EG ( timeout_seconds ) = seconds		70995	0		=			
ANR	71005	CallExpression	EG ( timeout_seconds )		70995	0					
ANR	71006	Callee	EG		70995	0					
ANR	71007	Identifier	EG		70995	0					
ANR	71008	ArgumentList	timeout_seconds		70995	1					
ANR	71009	Argument	timeout_seconds		70995	0					
ANR	71010	Identifier	timeout_seconds		70995	0					
ANR	71011	Identifier	seconds		70995	1					
ANR	71012	IfStatement	if ( ! seconds )		70995	2					
ANR	71013	Condition	! seconds	1264:4:38049:38056	70995	0	True				
ANR	71014	UnaryOperationExpression	! seconds		70995	0					
ANR	71015	UnaryOperator	!		70995	0					
ANR	71016	Identifier	seconds		70995	1					
ANR	71017	CompoundStatement		7:14:84:84	70995	1					
ANR	71018	ReturnStatement	return ;	1265:2:38063:38069	70995	0	True				
ANR	71019	IfStatement	if ( NULL != tq_timer )		70995	3					
ANR	71020	Condition	NULL != tq_timer	1271:5:38251:38266	70995	0	True				
ANR	71021	EqualityExpression	NULL != tq_timer		70995	0		!=			
ANR	71022	Identifier	NULL		70995	0					
ANR	71023	Identifier	tq_timer		70995	1					
ANR	71024	CompoundStatement		14:23:294:294	70995	1					
ANR	71025	IfStatement	"if ( ! DeleteTimerQueueTimer ( NULL , tq_timer , NULL ) )"		70995	0					
ANR	71026	Condition	"! DeleteTimerQueueTimer ( NULL , tq_timer , NULL )"	1272:6:38277:38320	70995	0	True				
ANR	71027	UnaryOperationExpression	"! DeleteTimerQueueTimer ( NULL , tq_timer , NULL )"		70995	0					
ANR	71028	UnaryOperator	!		70995	0					
ANR	71029	CallExpression	"DeleteTimerQueueTimer ( NULL , tq_timer , NULL )"		70995	1					
ANR	71030	Callee	DeleteTimerQueueTimer		70995	0					
ANR	71031	Identifier	DeleteTimerQueueTimer		70995	0					
ANR	71032	ArgumentList	NULL		70995	1					
ANR	71033	Argument	NULL		70995	0					
ANR	71034	Identifier	NULL		70995	0					
ANR	71035	Argument	tq_timer		70995	1					
ANR	71036	Identifier	tq_timer		70995	0					
ANR	71037	Argument	NULL		70995	2					
ANR	71038	Identifier	NULL		70995	0					
ANR	71039	CompoundStatement		15:52:348:348	70995	1					
ANR	71040	ExpressionStatement	EG ( timed_out ) = 0	1273:3:38328:38345	70995	0	True				
ANR	71041	AssignmentExpression	EG ( timed_out ) = 0		70995	0		=			
ANR	71042	CallExpression	EG ( timed_out )		70995	0					
ANR	71043	Callee	EG		70995	0					
ANR	71044	Identifier	EG		70995	0					
ANR	71045	ArgumentList	timed_out		70995	1					
ANR	71046	Argument	timed_out		70995	0					
ANR	71047	Identifier	timed_out		70995	0					
ANR	71048	PrimaryExpression	0		70995	1					
ANR	71049	ExpressionStatement	tq_timer = NULL	1274:3:38350:38365	70995	1	True				
ANR	71050	AssignmentExpression	tq_timer = NULL		70995	0		=			
ANR	71051	Identifier	tq_timer		70995	0					
ANR	71052	Identifier	NULL		70995	1					
ANR	71053	ExpressionStatement	"zend_error ( E_ERROR , ""Could not delete queued timer"" )"	1275:3:38370:38422	70995	2	True				
ANR	71054	CallExpression	"zend_error ( E_ERROR , ""Could not delete queued timer"" )"		70995	0					
ANR	71055	Callee	zend_error		70995	0					
ANR	71056	Identifier	zend_error		70995	0					
ANR	71057	ArgumentList	E_ERROR		70995	1					
ANR	71058	Argument	E_ERROR		70995	0					
ANR	71059	Identifier	E_ERROR		70995	0					
ANR	71060	Argument	"""Could not delete queued timer"""		70995	1					
ANR	71061	PrimaryExpression	"""Could not delete queued timer"""		70995	0					
ANR	71062	ReturnStatement	return ;	1276:3:38427:38433	70995	3	True				
ANR	71063	ExpressionStatement	tq_timer = NULL	1278:2:38441:38456	70995	1	True				
ANR	71064	AssignmentExpression	tq_timer = NULL		70995	0		=			
ANR	71065	Identifier	tq_timer		70995	0					
ANR	71066	Identifier	NULL		70995	1					
ANR	71067	IfStatement	"if ( ! CreateTimerQueueTimer ( & tq_timer , NULL , ( WAITORTIMERCALLBACK ) tq_timer_cb , ( VOID * ) & EG ( timed_out ) , seconds * 1000 , 0 , WT_EXECUTEONLYONCE ) )"		70995	4					
ANR	71068	Condition	"! CreateTimerQueueTimer ( & tq_timer , NULL , ( WAITORTIMERCALLBACK ) tq_timer_cb , ( VOID * ) & EG ( timed_out ) , seconds * 1000 , 0 , WT_EXECUTEONLYONCE )"	1282:5:38552:38684	70995	0	True				
ANR	71069	UnaryOperationExpression	"! CreateTimerQueueTimer ( & tq_timer , NULL , ( WAITORTIMERCALLBACK ) tq_timer_cb , ( VOID * ) & EG ( timed_out ) , seconds * 1000 , 0 , WT_EXECUTEONLYONCE )"		70995	0					
ANR	71070	UnaryOperator	!		70995	0					
ANR	71071	CallExpression	"CreateTimerQueueTimer ( & tq_timer , NULL , ( WAITORTIMERCALLBACK ) tq_timer_cb , ( VOID * ) & EG ( timed_out ) , seconds * 1000 , 0 , WT_EXECUTEONLYONCE )"		70995	1					
ANR	71072	Callee	CreateTimerQueueTimer		70995	0					
ANR	71073	Identifier	CreateTimerQueueTimer		70995	0					
ANR	71074	ArgumentList	& tq_timer		70995	1					
ANR	71075	Argument	& tq_timer		70995	0					
ANR	71076	UnaryOperationExpression	& tq_timer		70995	0					
ANR	71077	UnaryOperator	&		70995	0					
ANR	71078	Identifier	tq_timer		70995	1					
ANR	71079	Argument	NULL		70995	1					
ANR	71080	Identifier	NULL		70995	0					
ANR	71081	Argument	( WAITORTIMERCALLBACK ) tq_timer_cb		70995	2					
ANR	71082	CastExpression	( WAITORTIMERCALLBACK ) tq_timer_cb		70995	0					
ANR	71083	CastTarget	WAITORTIMERCALLBACK		70995	0					
ANR	71084	Identifier	tq_timer_cb		70995	1					
ANR	71085	Argument	( VOID * ) & EG ( timed_out )		70995	3					
ANR	71086	CastExpression	( VOID * ) & EG ( timed_out )		70995	0					
ANR	71087	CastTarget	VOID *		70995	0					
ANR	71088	UnaryOperationExpression	& EG ( timed_out )		70995	1					
ANR	71089	UnaryOperator	&		70995	0					
ANR	71090	CallExpression	EG ( timed_out )		70995	1					
ANR	71091	Callee	EG		70995	0					
ANR	71092	Identifier	EG		70995	0					
ANR	71093	ArgumentList	timed_out		70995	1					
ANR	71094	Argument	timed_out		70995	0					
ANR	71095	Identifier	timed_out		70995	0					
ANR	71096	Argument	seconds * 1000		70995	4					
ANR	71097	MultiplicativeExpression	seconds * 1000		70995	0		*			
ANR	71098	Identifier	seconds		70995	0					
ANR	71099	PrimaryExpression	1000		70995	1					
ANR	71100	Argument	0		70995	5					
ANR	71101	PrimaryExpression	0		70995	0					
ANR	71102	Argument	WT_EXECUTEONLYONCE		70995	6					
ANR	71103	Identifier	WT_EXECUTEONLYONCE		70995	0					
ANR	71104	CompoundStatement		25:140:712:712	70995	1					
ANR	71105	ExpressionStatement	EG ( timed_out ) = 0	1283:2:38691:38708	70995	0	True				
ANR	71106	AssignmentExpression	EG ( timed_out ) = 0		70995	0		=			
ANR	71107	CallExpression	EG ( timed_out )		70995	0					
ANR	71108	Callee	EG		70995	0					
ANR	71109	Identifier	EG		70995	0					
ANR	71110	ArgumentList	timed_out		70995	1					
ANR	71111	Argument	timed_out		70995	0					
ANR	71112	Identifier	timed_out		70995	0					
ANR	71113	PrimaryExpression	0		70995	1					
ANR	71114	ExpressionStatement	tq_timer = NULL	1284:2:38712:38727	70995	1	True				
ANR	71115	AssignmentExpression	tq_timer = NULL		70995	0		=			
ANR	71116	Identifier	tq_timer		70995	0					
ANR	71117	Identifier	NULL		70995	1					
ANR	71118	ExpressionStatement	"zend_error ( E_ERROR , ""Could not queue new timer"" )"	1285:2:38731:38779	70995	2	True				
ANR	71119	CallExpression	"zend_error ( E_ERROR , ""Could not queue new timer"" )"		70995	0					
ANR	71120	Callee	zend_error		70995	0					
ANR	71121	Identifier	zend_error		70995	0					
ANR	71122	ArgumentList	E_ERROR		70995	1					
ANR	71123	Argument	E_ERROR		70995	0					
ANR	71124	Identifier	E_ERROR		70995	0					
ANR	71125	Argument	"""Could not queue new timer"""		70995	1					
ANR	71126	PrimaryExpression	"""Could not queue new timer"""		70995	0					
ANR	71127	ReturnStatement	return ;	1286:2:38783:38789	70995	3	True				
ANR	71128	ExpressionStatement	EG ( timed_out ) = 0	1288:1:38795:38812	70995	5	True				
ANR	71129	AssignmentExpression	EG ( timed_out ) = 0		70995	0		=			
ANR	71130	CallExpression	EG ( timed_out )		70995	0					
ANR	71131	Callee	EG		70995	0					
ANR	71132	Identifier	EG		70995	0					
ANR	71133	ArgumentList	timed_out		70995	1					
ANR	71134	Argument	timed_out		70995	0					
ANR	71135	Identifier	timed_out		70995	0					
ANR	71136	PrimaryExpression	0		70995	1					
ANR	71137	ReturnType	void		70995	1					
ANR	71138	Identifier	zend_set_timeout		70995	2					
ANR	71139	ParameterList	"long seconds , int reset_signals"		70995	3					
ANR	71140	Parameter	long seconds	1257:22:37931:37942	70995	0	True				
ANR	71141	ParameterType	long		70995	0					
ANR	71142	Identifier	seconds		70995	1					
ANR	71143	Parameter	int reset_signals	1257:36:37945:37961	70995	1	True				
ANR	71144	ParameterType	int		70995	0					
ANR	71145	Identifier	reset_signals		70995	1					
ANR	71146	CFGEntryNode	ENTRY		70995		True				
ANR	71147	CFGExitNode	EXIT		70995		True				
ANR	71148	Symbol	EG		70995						
ANR	71149	Symbol	NULL		70995						
ANR	71150	Symbol	timed_out		70995						
ANR	71151	Symbol	& EG		70995						
ANR	71152	Symbol	& tq_timer		70995						
ANR	71153	Symbol	seconds		70995						
ANR	71154	Symbol	E_ERROR		70995						
ANR	71155	Symbol	reset_signals		70995						
ANR	71156	Symbol	DeleteTimerQueueTimer		70995						
ANR	71157	Symbol	CreateTimerQueueTimer		70995						
ANR	71158	Symbol	tq_timer_cb		70995						
ANR	71159	Symbol	WT_EXECUTEONLYONCE		70995						
ANR	71160	Symbol	tq_timer		70995						
ANR	71161	Symbol	timeout_seconds		70995						
ANR	71162	DeclStmt									
ANR	71163	Decl							struct itimerval	struct itimerval	no_timeout
ANR	71164	Function	zend_fetch_class	1358:0:40183:41912							
ANR	71165	FunctionDef	"zend_fetch_class (const char * class_name , uint class_name_len , int fetch_type TSRMLS_DC)"		71164	0					
ANR	71166	CompoundStatement		1359:0:40299:41912	71164	0					
ANR	71167	IdentifierDeclStatement	zend_class_entry * * pce ;	1360:1:40302:40324	71164	0	True				
ANR	71168	IdentifierDecl	* * pce		71164	0					
ANR	71169	IdentifierDeclType	zend_class_entry * *		71164	0					
ANR	71170	Identifier	pce		71164	1					
ANR	71171	IdentifierDeclStatement	int use_autoload = ( fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD ) == 0 ;	1361:1:40327:40394	71164	1	True				
ANR	71172	IdentifierDecl	use_autoload = ( fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD ) == 0		71164	0					
ANR	71173	IdentifierDeclType	int		71164	0					
ANR	71174	Identifier	use_autoload		71164	1					
ANR	71175	AssignmentExpression	use_autoload = ( fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD ) == 0		71164	2		=			
ANR	71176	Identifier	use_autoload		71164	0					
ANR	71177	EqualityExpression	( fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD ) == 0		71164	1		==			
ANR	71178	BitAndExpression	fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD		71164	0		&			
ANR	71179	Identifier	fetch_type		71164	0					
ANR	71180	Identifier	ZEND_FETCH_CLASS_NO_AUTOLOAD		71164	1					
ANR	71181	PrimaryExpression	0		71164	1					
ANR	71182	IdentifierDeclStatement	int silent = ( fetch_type & ZEND_FETCH_CLASS_SILENT ) != 0 ;	1362:1:40397:40459	71164	2	True				
ANR	71183	IdentifierDecl	silent = ( fetch_type & ZEND_FETCH_CLASS_SILENT ) != 0		71164	0					
ANR	71184	IdentifierDeclType	int		71164	0					
ANR	71185	Identifier	silent		71164	1					
ANR	71186	AssignmentExpression	silent = ( fetch_type & ZEND_FETCH_CLASS_SILENT ) != 0		71164	2		=			
ANR	71187	Identifier	silent		71164	0					
ANR	71188	EqualityExpression	( fetch_type & ZEND_FETCH_CLASS_SILENT ) != 0		71164	1		!=			
ANR	71189	BitAndExpression	fetch_type & ZEND_FETCH_CLASS_SILENT		71164	0		&			
ANR	71190	Identifier	fetch_type		71164	0					
ANR	71191	Identifier	ZEND_FETCH_CLASS_SILENT		71164	1					
ANR	71192	PrimaryExpression	0		71164	1					
ANR	71193	ExpressionStatement	fetch_type &= ZEND_FETCH_CLASS_MASK	1364:1:40463:40498	71164	3	True				
ANR	71194	AssignmentExpression	fetch_type &= ZEND_FETCH_CLASS_MASK		71164	0		&=			
ANR	71195	Identifier	fetch_type		71164	0					
ANR	71196	Identifier	ZEND_FETCH_CLASS_MASK		71164	1					
ANR	71197	Label	check_fetch_type :	1366:0:40501:40517	71164	4	True				
ANR	71198	Identifier	check_fetch_type		71164	0					
ANR	71199	SwitchStatement	switch ( fetch_type )		71164	5					
ANR	71200	Condition	fetch_type	1367:9:40528:40537	71164	0	True				
ANR	71201	Identifier	fetch_type		71164	0					
ANR	71202	CompoundStatement		9:21:240:240	71164	1					
ANR	71203	Label	case ZEND_FETCH_CLASS_SELF :	1368:2:40544:40570	71164	0	True				
ANR	71204	Identifier	ZEND_FETCH_CLASS_SELF		71164	0					
ANR	71205	IfStatement	if ( ! EG ( scope ) )		71164	1					
ANR	71206	Condition	! EG ( scope )	1369:7:40579:40588	71164	0	True				
ANR	71207	UnaryOperationExpression	! EG ( scope )		71164	0					
ANR	71208	UnaryOperator	!		71164	0					
ANR	71209	CallExpression	EG ( scope )		71164	1					
ANR	71210	Callee	EG		71164	0					
ANR	71211	Identifier	EG		71164	0					
ANR	71212	ArgumentList	scope		71164	1					
ANR	71213	Argument	scope		71164	0					
ANR	71214	Identifier	scope		71164	0					
ANR	71215	CompoundStatement		11:19:291:291	71164	1					
ANR	71216	ExpressionStatement	"zend_error ( E_ERROR , ""Cannot access self:: when no class scope is active"" )"	1370:4:40597:40670	71164	0	True				
ANR	71217	CallExpression	"zend_error ( E_ERROR , ""Cannot access self:: when no class scope is active"" )"		71164	0					
ANR	71218	Callee	zend_error		71164	0					
ANR	71219	Identifier	zend_error		71164	0					
ANR	71220	ArgumentList	E_ERROR		71164	1					
ANR	71221	Argument	E_ERROR		71164	0					
ANR	71222	Identifier	E_ERROR		71164	0					
ANR	71223	Argument	"""Cannot access self:: when no class scope is active"""		71164	1					
ANR	71224	PrimaryExpression	"""Cannot access self:: when no class scope is active"""		71164	0					
ANR	71225	ReturnStatement	return EG ( scope ) ;	1372:3:40680:40696	71164	2	True				
ANR	71226	CallExpression	EG ( scope )		71164	0					
ANR	71227	Callee	EG		71164	0					
ANR	71228	Identifier	EG		71164	0					
ANR	71229	ArgumentList	scope		71164	1					
ANR	71230	Argument	scope		71164	0					
ANR	71231	Identifier	scope		71164	0					
ANR	71232	Label	case ZEND_FETCH_CLASS_PARENT :	1373:2:40700:40728	71164	3	True				
ANR	71233	Identifier	ZEND_FETCH_CLASS_PARENT		71164	0					
ANR	71234	IfStatement	if ( ! EG ( scope ) )		71164	4					
ANR	71235	Condition	! EG ( scope )	1374:7:40737:40746	71164	0	True				
ANR	71236	UnaryOperationExpression	! EG ( scope )		71164	0					
ANR	71237	UnaryOperator	!		71164	0					
ANR	71238	CallExpression	EG ( scope )		71164	1					
ANR	71239	Callee	EG		71164	0					
ANR	71240	Identifier	EG		71164	0					
ANR	71241	ArgumentList	scope		71164	1					
ANR	71242	Argument	scope		71164	0					
ANR	71243	Identifier	scope		71164	0					
ANR	71244	CompoundStatement		16:19:449:449	71164	1					
ANR	71245	ExpressionStatement	"zend_error ( E_ERROR , ""Cannot access parent:: when no class scope is active"" )"	1375:4:40755:40830	71164	0	True				
ANR	71246	CallExpression	"zend_error ( E_ERROR , ""Cannot access parent:: when no class scope is active"" )"		71164	0					
ANR	71247	Callee	zend_error		71164	0					
ANR	71248	Identifier	zend_error		71164	0					
ANR	71249	ArgumentList	E_ERROR		71164	1					
ANR	71250	Argument	E_ERROR		71164	0					
ANR	71251	Identifier	E_ERROR		71164	0					
ANR	71252	Argument	"""Cannot access parent:: when no class scope is active"""		71164	1					
ANR	71253	PrimaryExpression	"""Cannot access parent:: when no class scope is active"""		71164	0					
ANR	71254	IfStatement	if ( ! EG ( scope ) -> parent )		71164	5					
ANR	71255	Condition	! EG ( scope ) -> parent	1377:7:40844:40861	71164	0	True				
ANR	71256	UnaryOperationExpression	! EG ( scope ) -> parent		71164	0					
ANR	71257	UnaryOperator	!		71164	0					
ANR	71258	PtrMemberAccess	EG ( scope ) -> parent		71164	1					
ANR	71259	CallExpression	EG ( scope )		71164	0					
ANR	71260	Callee	EG		71164	0					
ANR	71261	Identifier	EG		71164	0					
ANR	71262	ArgumentList	scope		71164	1					
ANR	71263	Argument	scope		71164	0					
ANR	71264	Identifier	scope		71164	0					
ANR	71265	Identifier	parent		71164	1					
ANR	71266	CompoundStatement		19:27:564:564	71164	1					
ANR	71267	ExpressionStatement	"zend_error ( E_ERROR , ""Cannot access parent:: when current class scope has no parent"" )"	1378:4:40870:40954	71164	0	True				
ANR	71268	CallExpression	"zend_error ( E_ERROR , ""Cannot access parent:: when current class scope has no parent"" )"		71164	0					
ANR	71269	Callee	zend_error		71164	0					
ANR	71270	Identifier	zend_error		71164	0					
ANR	71271	ArgumentList	E_ERROR		71164	1					
ANR	71272	Argument	E_ERROR		71164	0					
ANR	71273	Identifier	E_ERROR		71164	0					
ANR	71274	Argument	"""Cannot access parent:: when current class scope has no parent"""		71164	1					
ANR	71275	PrimaryExpression	"""Cannot access parent:: when current class scope has no parent"""		71164	0					
ANR	71276	ReturnStatement	return EG ( scope ) -> parent ;	1380:3:40964:40988	71164	6	True				
ANR	71277	PtrMemberAccess	EG ( scope ) -> parent		71164	0					
ANR	71278	CallExpression	EG ( scope )		71164	0					
ANR	71279	Callee	EG		71164	0					
ANR	71280	Identifier	EG		71164	0					
ANR	71281	ArgumentList	scope		71164	1					
ANR	71282	Argument	scope		71164	0					
ANR	71283	Identifier	scope		71164	0					
ANR	71284	Identifier	parent		71164	1					
ANR	71285	Label	case ZEND_FETCH_CLASS_STATIC :	1381:2:40992:41020	71164	7	True				
ANR	71286	Identifier	ZEND_FETCH_CLASS_STATIC		71164	0					
ANR	71287	IfStatement	if ( ! EG ( called_scope ) )		71164	8					
ANR	71288	Condition	! EG ( called_scope )	1382:7:41029:41045	71164	0	True				
ANR	71289	UnaryOperationExpression	! EG ( called_scope )		71164	0					
ANR	71290	UnaryOperator	!		71164	0					
ANR	71291	CallExpression	EG ( called_scope )		71164	1					
ANR	71292	Callee	EG		71164	0					
ANR	71293	Identifier	EG		71164	0					
ANR	71294	ArgumentList	called_scope		71164	1					
ANR	71295	Argument	called_scope		71164	0					
ANR	71296	Identifier	called_scope		71164	0					
ANR	71297	CompoundStatement		24:26:748:748	71164	1					
ANR	71298	ExpressionStatement	"zend_error ( E_ERROR , ""Cannot access static:: when no class scope is active"" )"	1383:4:41054:41129	71164	0	True				
ANR	71299	CallExpression	"zend_error ( E_ERROR , ""Cannot access static:: when no class scope is active"" )"		71164	0					
ANR	71300	Callee	zend_error		71164	0					
ANR	71301	Identifier	zend_error		71164	0					
ANR	71302	ArgumentList	E_ERROR		71164	1					
ANR	71303	Argument	E_ERROR		71164	0					
ANR	71304	Identifier	E_ERROR		71164	0					
ANR	71305	Argument	"""Cannot access static:: when no class scope is active"""		71164	1					
ANR	71306	PrimaryExpression	"""Cannot access static:: when no class scope is active"""		71164	0					
ANR	71307	ReturnStatement	return EG ( called_scope ) ;	1385:3:41139:41162	71164	9	True				
ANR	71308	CallExpression	EG ( called_scope )		71164	0					
ANR	71309	Callee	EG		71164	0					
ANR	71310	Identifier	EG		71164	0					
ANR	71311	ArgumentList	called_scope		71164	1					
ANR	71312	Argument	called_scope		71164	0					
ANR	71313	Identifier	called_scope		71164	0					
ANR	71314	Label	case ZEND_FETCH_CLASS_AUTO :	1386:2:41166:41192	71164	10	True				
ANR	71315	Identifier	ZEND_FETCH_CLASS_AUTO		71164	0					
ANR	71316	CompoundStatement		28:30:894:894	71164	11					
ANR	71317	ExpressionStatement	"fetch_type = zend_get_class_fetch_type ( class_name , class_name_len )"	1387:4:41200:41266	71164	0	True				
ANR	71318	AssignmentExpression	"fetch_type = zend_get_class_fetch_type ( class_name , class_name_len )"		71164	0		=			
ANR	71319	Identifier	fetch_type		71164	0					
ANR	71320	CallExpression	"zend_get_class_fetch_type ( class_name , class_name_len )"		71164	1					
ANR	71321	Callee	zend_get_class_fetch_type		71164	0					
ANR	71322	Identifier	zend_get_class_fetch_type		71164	0					
ANR	71323	ArgumentList	class_name		71164	1					
ANR	71324	Argument	class_name		71164	0					
ANR	71325	Identifier	class_name		71164	0					
ANR	71326	Argument	class_name_len		71164	1					
ANR	71327	Identifier	class_name_len		71164	0					
ANR	71328	IfStatement	if ( fetch_type != ZEND_FETCH_CLASS_DEFAULT )		71164	1					
ANR	71329	Condition	fetch_type != ZEND_FETCH_CLASS_DEFAULT	1388:8:41276:41311	71164	0	True				
ANR	71330	EqualityExpression	fetch_type != ZEND_FETCH_CLASS_DEFAULT		71164	0		!=			
ANR	71331	Identifier	fetch_type		71164	0					
ANR	71332	Identifier	ZEND_FETCH_CLASS_DEFAULT		71164	1					
ANR	71333	CompoundStatement		30:46:1014:1014	71164	1					
ANR	71334	GotoStatement	goto check_fetch_type ;	1389:5:41321:41342	71164	0	True				
ANR	71335	Identifier	check_fetch_type		71164	0					
ANR	71336	BreakStatement	break ;	1392:3:41358:41363	71164	12	True				
ANR	71337	Statement	if	1395:1:41370:41371	71164	6	True				
ANR	71338	Statement	(	1395:4:41373:41373	71164	7	True				
ANR	71339	Statement	zend_lookup_class_ex	1395:5:41374:41393	71164	8	True				
ANR	71340	Statement	(	1395:25:41394:41394	71164	9	True				
ANR	71341	Statement	class_name	1395:26:41395:41404	71164	10	True				
ANR	71342	Statement	","	1395:36:41405:41405	71164	11	True				
ANR	71343	Statement	class_name_len	1395:38:41407:41420	71164	12	True				
ANR	71344	Statement	","	1395:52:41421:41421	71164	13	True				
ANR	71345	Statement	NULL	1395:54:41423:41426	71164	14	True				
ANR	71346	Statement	","	1395:58:41427:41427	71164	15	True				
ANR	71347	Statement	use_autoload	1395:60:41429:41440	71164	16	True				
ANR	71348	Statement	","	1395:72:41441:41441	71164	17	True				
ANR	71349	Statement	&	1395:74:41443:41443	71164	18	True				
ANR	71350	Statement	pce	1395:75:41444:41446	71164	19	True				
ANR	71351	Statement	TSRMLS_CC	1395:79:41448:41456	71164	20	True				
ANR	71352	Statement	)	1395:88:41457:41457	71164	21	True				
ANR	71353	Statement	==	1395:90:41459:41460	71164	22	True				
ANR	71354	Statement	FAILURE	1395:93:41462:41468	71164	23	True				
ANR	71355	Statement	)	1395:100:41469:41469	71164	24	True				
ANR	71356	CompoundStatement		37:102:1171:1171	71164	25					
ANR	71357	IfStatement	if ( use_autoload )		71164	0					
ANR	71358	Condition	use_autoload	1396:6:41479:41490	71164	0	True				
ANR	71359	Identifier	use_autoload		71164	0					
ANR	71360	CompoundStatement		38:20:1193:1193	71164	1					
ANR	71361	IfStatement	if ( ! silent && ! EG ( exception ) )		71164	0					
ANR	71362	Condition	! silent && ! EG ( exception )	1397:7:41502:41526	71164	0	True				
ANR	71363	AndExpression	! silent && ! EG ( exception )		71164	0		&&			
ANR	71364	UnaryOperationExpression	! silent		71164	0					
ANR	71365	UnaryOperator	!		71164	0					
ANR	71366	Identifier	silent		71164	1					
ANR	71367	UnaryOperationExpression	! EG ( exception )		71164	1					
ANR	71368	UnaryOperator	!		71164	0					
ANR	71369	CallExpression	EG ( exception )		71164	1					
ANR	71370	Callee	EG		71164	0					
ANR	71371	Identifier	EG		71164	0					
ANR	71372	ArgumentList	exception		71164	1					
ANR	71373	Argument	exception		71164	0					
ANR	71374	Identifier	exception		71164	0					
ANR	71375	CompoundStatement		39:34:1229:1229	71164	1					
ANR	71376	IfStatement	if ( fetch_type == ZEND_FETCH_CLASS_INTERFACE )		71164	0					
ANR	71377	Condition	fetch_type == ZEND_FETCH_CLASS_INTERFACE	1398:8:41539:41578	71164	0	True				
ANR	71378	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_INTERFACE		71164	0		==			
ANR	71379	Identifier	fetch_type		71164	0					
ANR	71380	Identifier	ZEND_FETCH_CLASS_INTERFACE		71164	1					
ANR	71381	CompoundStatement		40:50:1281:1281	71164	1					
ANR	71382	ExpressionStatement	"zend_error ( E_ERROR , ""Interface '%s' not found"" , class_name )"	1399:5:41588:41647	71164	0	True				
ANR	71383	CallExpression	"zend_error ( E_ERROR , ""Interface '%s' not found"" , class_name )"		71164	0					
ANR	71384	Callee	zend_error		71164	0					
ANR	71385	Identifier	zend_error		71164	0					
ANR	71386	ArgumentList	E_ERROR		71164	1					
ANR	71387	Argument	E_ERROR		71164	0					
ANR	71388	Identifier	E_ERROR		71164	0					
ANR	71389	Argument	"""Interface '%s' not found"""		71164	1					
ANR	71390	PrimaryExpression	"""Interface '%s' not found"""		71164	0					
ANR	71391	Argument	class_name		71164	2					
ANR	71392	Identifier	class_name		71164	0					
ANR	71393	ElseStatement	else		71164	0					
ANR	71394	IfStatement	if ( fetch_type == ZEND_FETCH_CLASS_TRAIT )		71164	0					
ANR	71395	Condition	fetch_type == ZEND_FETCH_CLASS_TRAIT	1400:15:41664:41699	71164	0	True				
ANR	71396	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_TRAIT		71164	0		==			
ANR	71397	Identifier	fetch_type		71164	0					
ANR	71398	Identifier	ZEND_FETCH_CLASS_TRAIT		71164	1					
ANR	71399	CompoundStatement		42:53:1402:1402	71164	1					
ANR	71400	ExpressionStatement	"zend_error ( E_ERROR , ""Trait '%s' not found"" , class_name )"	1401:17:41721:41776	71164	0	True				
ANR	71401	CallExpression	"zend_error ( E_ERROR , ""Trait '%s' not found"" , class_name )"		71164	0					
ANR	71402	Callee	zend_error		71164	0					
ANR	71403	Identifier	zend_error		71164	0					
ANR	71404	ArgumentList	E_ERROR		71164	1					
ANR	71405	Argument	E_ERROR		71164	0					
ANR	71406	Identifier	E_ERROR		71164	0					
ANR	71407	Argument	"""Trait '%s' not found"""		71164	1					
ANR	71408	PrimaryExpression	"""Trait '%s' not found"""		71164	0					
ANR	71409	Argument	class_name		71164	2					
ANR	71410	Identifier	class_name		71164	0					
ANR	71411	ElseStatement	else		71164	0					
ANR	71412	CompoundStatement		44:23:1501:1501	71164	0					
ANR	71413	ExpressionStatement	"zend_error ( E_ERROR , ""Class '%s' not found"" , class_name )"	1403:5:41808:41863	71164	0	True				
ANR	71414	CallExpression	"zend_error ( E_ERROR , ""Class '%s' not found"" , class_name )"		71164	0					
ANR	71415	Callee	zend_error		71164	0					
ANR	71416	Identifier	zend_error		71164	0					
ANR	71417	ArgumentList	E_ERROR		71164	1					
ANR	71418	Argument	E_ERROR		71164	0					
ANR	71419	Identifier	E_ERROR		71164	0					
ANR	71420	Argument	"""Class '%s' not found"""		71164	1					
ANR	71421	PrimaryExpression	"""Class '%s' not found"""		71164	0					
ANR	71422	Argument	class_name		71164	2					
ANR	71423	Identifier	class_name		71164	0					
ANR	71424	ReturnStatement	return NULL ;	1407:2:41882:41893	71164	1	True				
ANR	71425	Identifier	NULL		71164	0					
ANR	71426	ReturnStatement	return * pce ;	1409:1:41899:41910	71164	26	True				
ANR	71427	UnaryOperationExpression	* pce		71164	0					
ANR	71428	UnaryOperator	*		71164	0					
ANR	71429	Identifier	pce		71164	1					
ANR	71430	ReturnType	zend_class_entry *		71164	1					
ANR	71431	Identifier	zend_fetch_class		71164	2					
ANR	71432	ParameterList	"const char * class_name , uint class_name_len , int fetch_type TSRMLS_DC"		71164	3					
ANR	71433	Parameter	const char * class_name	1358:35:40218:40239	71164	0	True				
ANR	71434	ParameterType	const char *		71164	0					
ANR	71435	Identifier	class_name		71164	1					
ANR	71436	Parameter	uint class_name_len	1358:59:40242:40260	71164	1	True				
ANR	71437	ParameterType	uint		71164	0					
ANR	71438	Identifier	class_name_len		71164	1					
ANR	71439	Parameter	int fetch_type TSRMLS_DC	1358:80:40263:40286	71164	2	True				
ANR	71440	ParameterType	int fetch_type		71164	0					
ANR	71441	Identifier	TSRMLS_DC		71164	1					
ANR	71442	CFGEntryNode	ENTRY		71164		True				
ANR	71443	CFGExitNode	EXIT		71164		True				
ANR	71444	Symbol	ZEND_FETCH_CLASS_DEFAULT		71164						
ANR	71445	Symbol	exception		71164						
ANR	71446	Symbol	fetch_type		71164						
ANR	71447	Symbol	silent		71164						
ANR	71448	Symbol	EG		71164						
ANR	71449	Symbol	NULL		71164						
ANR	71450	Symbol	ZEND_FETCH_CLASS_SILENT		71164						
ANR	71451	Symbol	EG ( scope ) -> parent		71164						
ANR	71452	Symbol	called_scope		71164						
ANR	71453	Symbol	ZEND_FETCH_CLASS_NO_AUTOLOAD		71164						
ANR	71454	Symbol	* EG		71164						
ANR	71455	Symbol	TSRMLS_DC		71164						
ANR	71456	Symbol	pce		71164						
ANR	71457	Symbol	E_ERROR		71164						
ANR	71458	Symbol	ZEND_FETCH_CLASS_TRAIT		71164						
ANR	71459	Symbol	ZEND_FETCH_CLASS_MASK		71164						
ANR	71460	Symbol	scope		71164						
ANR	71461	Symbol	ZEND_FETCH_CLASS_INTERFACE		71164						
ANR	71462	Symbol	use_autoload		71164						
ANR	71463	Symbol	class_name_len		71164						
ANR	71464	Symbol	* pce		71164						
ANR	71465	Symbol	class_name		71164						
ANR	71466	Symbol	zend_get_class_fetch_type		71164						
ANR	71467	Function	zend_fetch_class_by_name	1413:0:41925:42778							
ANR	71468	FunctionDef	"zend_fetch_class_by_name (const char * class_name , uint class_name_len , const zend_literal * key , int fetch_type TSRMLS_DC)"		71467	0					
ANR	71469	CompoundStatement		1414:0:42074:42778	71467	0					
ANR	71470	IdentifierDeclStatement	zend_class_entry * * pce ;	1415:1:42077:42099	71467	0	True				
ANR	71471	IdentifierDecl	* * pce		71467	0					
ANR	71472	IdentifierDeclType	zend_class_entry * *		71467	0					
ANR	71473	Identifier	pce		71467	1					
ANR	71474	IdentifierDeclStatement	int use_autoload = ( fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD ) == 0 ;	1416:1:42102:42169	71467	1	True				
ANR	71475	IdentifierDecl	use_autoload = ( fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD ) == 0		71467	0					
ANR	71476	IdentifierDeclType	int		71467	0					
ANR	71477	Identifier	use_autoload		71467	1					
ANR	71478	AssignmentExpression	use_autoload = ( fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD ) == 0		71467	2		=			
ANR	71479	Identifier	use_autoload		71467	0					
ANR	71480	EqualityExpression	( fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD ) == 0		71467	1		==			
ANR	71481	BitAndExpression	fetch_type & ZEND_FETCH_CLASS_NO_AUTOLOAD		71467	0		&			
ANR	71482	Identifier	fetch_type		71467	0					
ANR	71483	Identifier	ZEND_FETCH_CLASS_NO_AUTOLOAD		71467	1					
ANR	71484	PrimaryExpression	0		71467	1					
ANR	71485	Statement	if	1418:1:42173:42174	71467	2	True				
ANR	71486	Statement	(	1418:4:42176:42176	71467	3	True				
ANR	71487	Statement	zend_lookup_class_ex	1418:5:42177:42196	71467	4	True				
ANR	71488	Statement	(	1418:25:42197:42197	71467	5	True				
ANR	71489	Statement	class_name	1418:26:42198:42207	71467	6	True				
ANR	71490	Statement	","	1418:36:42208:42208	71467	7	True				
ANR	71491	Statement	class_name_len	1418:38:42210:42223	71467	8	True				
ANR	71492	Statement	","	1418:52:42224:42224	71467	9	True				
ANR	71493	Statement	key	1418:54:42226:42228	71467	10	True				
ANR	71494	Statement	","	1418:57:42229:42229	71467	11	True				
ANR	71495	Statement	use_autoload	1418:59:42231:42242	71467	12	True				
ANR	71496	Statement	","	1418:71:42243:42243	71467	13	True				
ANR	71497	Statement	&	1418:73:42245:42245	71467	14	True				
ANR	71498	Statement	pce	1418:74:42246:42248	71467	15	True				
ANR	71499	Statement	TSRMLS_CC	1418:78:42250:42258	71467	16	True				
ANR	71500	Statement	)	1418:87:42259:42259	71467	17	True				
ANR	71501	Statement	==	1418:89:42261:42262	71467	18	True				
ANR	71502	Statement	FAILURE	1418:92:42264:42270	71467	19	True				
ANR	71503	Statement	)	1418:99:42271:42271	71467	20	True				
ANR	71504	CompoundStatement		5:101:198:198	71467	21					
ANR	71505	IfStatement	if ( use_autoload )		71467	0					
ANR	71506	Condition	use_autoload	1419:6:42281:42292	71467	0	True				
ANR	71507	Identifier	use_autoload		71467	0					
ANR	71508	CompoundStatement		6:20:220:220	71467	1					
ANR	71509	IfStatement	if ( ( fetch_type & ZEND_FETCH_CLASS_SILENT ) == 0 && ! EG ( exception ) )		71467	0					
ANR	71510	Condition	( fetch_type & ZEND_FETCH_CLASS_SILENT ) == 0 && ! EG ( exception )	1420:7:42304:42364	71467	0	True				
ANR	71511	AndExpression	( fetch_type & ZEND_FETCH_CLASS_SILENT ) == 0 && ! EG ( exception )		71467	0		&&			
ANR	71512	EqualityExpression	( fetch_type & ZEND_FETCH_CLASS_SILENT ) == 0		71467	0		==			
ANR	71513	BitAndExpression	fetch_type & ZEND_FETCH_CLASS_SILENT		71467	0		&			
ANR	71514	Identifier	fetch_type		71467	0					
ANR	71515	Identifier	ZEND_FETCH_CLASS_SILENT		71467	1					
ANR	71516	PrimaryExpression	0		71467	1					
ANR	71517	UnaryOperationExpression	! EG ( exception )		71467	1					
ANR	71518	UnaryOperator	!		71467	0					
ANR	71519	CallExpression	EG ( exception )		71467	1					
ANR	71520	Callee	EG		71467	0					
ANR	71521	Identifier	EG		71467	0					
ANR	71522	ArgumentList	exception		71467	1					
ANR	71523	Argument	exception		71467	0					
ANR	71524	Identifier	exception		71467	0					
ANR	71525	CompoundStatement		7:70:292:292	71467	1					
ANR	71526	IfStatement	if ( ( fetch_type & ZEND_FETCH_CLASS_MASK ) == ZEND_FETCH_CLASS_INTERFACE )		71467	0					
ANR	71527	Condition	( fetch_type & ZEND_FETCH_CLASS_MASK ) == ZEND_FETCH_CLASS_INTERFACE	1421:8:42377:42442	71467	0	True				
ANR	71528	EqualityExpression	( fetch_type & ZEND_FETCH_CLASS_MASK ) == ZEND_FETCH_CLASS_INTERFACE		71467	0		==			
ANR	71529	BitAndExpression	fetch_type & ZEND_FETCH_CLASS_MASK		71467	0		&			
ANR	71530	Identifier	fetch_type		71467	0					
ANR	71531	Identifier	ZEND_FETCH_CLASS_MASK		71467	1					
ANR	71532	Identifier	ZEND_FETCH_CLASS_INTERFACE		71467	1					
ANR	71533	CompoundStatement		8:76:370:370	71467	1					
ANR	71534	ExpressionStatement	"zend_error ( E_ERROR , ""Interface '%s' not found"" , class_name )"	1422:5:42452:42511	71467	0	True				
ANR	71535	CallExpression	"zend_error ( E_ERROR , ""Interface '%s' not found"" , class_name )"		71467	0					
ANR	71536	Callee	zend_error		71467	0					
ANR	71537	Identifier	zend_error		71467	0					
ANR	71538	ArgumentList	E_ERROR		71467	1					
ANR	71539	Argument	E_ERROR		71467	0					
ANR	71540	Identifier	E_ERROR		71467	0					
ANR	71541	Argument	"""Interface '%s' not found"""		71467	1					
ANR	71542	PrimaryExpression	"""Interface '%s' not found"""		71467	0					
ANR	71543	Argument	class_name		71467	2					
ANR	71544	Identifier	class_name		71467	0					
ANR	71545	ElseStatement	else		71467	0					
ANR	71546	IfStatement	if ( ( fetch_type & ZEND_FETCH_CLASS_MASK ) == ZEND_FETCH_CLASS_TRAIT )		71467	0					
ANR	71547	Condition	( fetch_type & ZEND_FETCH_CLASS_MASK ) == ZEND_FETCH_CLASS_TRAIT	1423:15:42528:42589	71467	0	True				
ANR	71548	EqualityExpression	( fetch_type & ZEND_FETCH_CLASS_MASK ) == ZEND_FETCH_CLASS_TRAIT		71467	0		==			
ANR	71549	BitAndExpression	fetch_type & ZEND_FETCH_CLASS_MASK		71467	0		&			
ANR	71550	Identifier	fetch_type		71467	0					
ANR	71551	Identifier	ZEND_FETCH_CLASS_MASK		71467	1					
ANR	71552	Identifier	ZEND_FETCH_CLASS_TRAIT		71467	1					
ANR	71553	CompoundStatement		10:79:517:517	71467	1					
ANR	71554	ExpressionStatement	"zend_error ( E_ERROR , ""Trait '%s' not found"" , class_name )"	1424:5:42599:42654	71467	0	True				
ANR	71555	CallExpression	"zend_error ( E_ERROR , ""Trait '%s' not found"" , class_name )"		71467	0					
ANR	71556	Callee	zend_error		71467	0					
ANR	71557	Identifier	zend_error		71467	0					
ANR	71558	ArgumentList	E_ERROR		71467	1					
ANR	71559	Argument	E_ERROR		71467	0					
ANR	71560	Identifier	E_ERROR		71467	0					
ANR	71561	Argument	"""Trait '%s' not found"""		71467	1					
ANR	71562	PrimaryExpression	"""Trait '%s' not found"""		71467	0					
ANR	71563	Argument	class_name		71467	2					
ANR	71564	Identifier	class_name		71467	0					
ANR	71565	ElseStatement	else		71467	0					
ANR	71566	CompoundStatement		12:11:592:592	71467	0					
ANR	71567	ExpressionStatement	"zend_error ( E_ERROR , ""Class '%s' not found"" , class_name )"	1426:5:42674:42729	71467	0	True				
ANR	71568	CallExpression	"zend_error ( E_ERROR , ""Class '%s' not found"" , class_name )"		71467	0					
ANR	71569	Callee	zend_error		71467	0					
ANR	71570	Identifier	zend_error		71467	0					
ANR	71571	ArgumentList	E_ERROR		71467	1					
ANR	71572	Argument	E_ERROR		71467	0					
ANR	71573	Identifier	E_ERROR		71467	0					
ANR	71574	Argument	"""Class '%s' not found"""		71467	1					
ANR	71575	PrimaryExpression	"""Class '%s' not found"""		71467	0					
ANR	71576	Argument	class_name		71467	2					
ANR	71577	Identifier	class_name		71467	0					
ANR	71578	ReturnStatement	return NULL ;	1430:2:42748:42759	71467	1	True				
ANR	71579	Identifier	NULL		71467	0					
ANR	71580	ReturnStatement	return * pce ;	1432:1:42765:42776	71467	22	True				
ANR	71581	UnaryOperationExpression	* pce		71467	0					
ANR	71582	UnaryOperator	*		71467	0					
ANR	71583	Identifier	pce		71467	1					
ANR	71584	ReturnType	zend_class_entry *		71467	1					
ANR	71585	Identifier	zend_fetch_class_by_name		71467	2					
ANR	71586	ParameterList	"const char * class_name , uint class_name_len , const zend_literal * key , int fetch_type TSRMLS_DC"		71467	3					
ANR	71587	Parameter	const char * class_name	1413:43:41968:41989	71467	0	True				
ANR	71588	ParameterType	const char *		71467	0					
ANR	71589	Identifier	class_name		71467	1					
ANR	71590	Parameter	uint class_name_len	1413:67:41992:42010	71467	1	True				
ANR	71591	ParameterType	uint		71467	0					
ANR	71592	Identifier	class_name_len		71467	1					
ANR	71593	Parameter	const zend_literal * key	1413:88:42013:42035	71467	2	True				
ANR	71594	ParameterType	const zend_literal *		71467	0					
ANR	71595	Identifier	key		71467	1					
ANR	71596	Parameter	int fetch_type TSRMLS_DC	1413:113:42038:42061	71467	3	True				
ANR	71597	ParameterType	int fetch_type		71467	0					
ANR	71598	Identifier	TSRMLS_DC		71467	1					
ANR	71599	CFGEntryNode	ENTRY		71467		True				
ANR	71600	CFGExitNode	EXIT		71467		True				
ANR	71601	Symbol	exception		71467						
ANR	71602	Symbol	fetch_type		71467						
ANR	71603	Symbol	EG		71467						
ANR	71604	Symbol	NULL		71467						
ANR	71605	Symbol	ZEND_FETCH_CLASS_SILENT		71467						
ANR	71606	Symbol	ZEND_FETCH_CLASS_NO_AUTOLOAD		71467						
ANR	71607	Symbol	TSRMLS_DC		71467						
ANR	71608	Symbol	pce		71467						
ANR	71609	Symbol	E_ERROR		71467						
ANR	71610	Symbol	ZEND_FETCH_CLASS_TRAIT		71467						
ANR	71611	Symbol	ZEND_FETCH_CLASS_MASK		71467						
ANR	71612	Symbol	ZEND_FETCH_CLASS_INTERFACE		71467						
ANR	71613	Symbol	use_autoload		71467						
ANR	71614	Symbol	class_name_len		71467						
ANR	71615	Symbol	* pce		71467						
ANR	71616	Symbol	class_name		71467						
ANR	71617	Symbol	key		71467						
ANR	71618	ClassDef	_zend_abstract_info	1444:8:43152:43270							
ANR	71619	DeclStmt									
ANR	71620	Decl							zend_function	zend_function * [ MAX_ABSTRACT_INFO_CNT + 1 ]	afn
ANR	71621	DeclStmt									
ANR	71622	Decl							int	int	cnt
ANR	71623	DeclStmt									
ANR	71624	Decl							int	int	ctor
ANR	71625	DeclStmt									
ANR	71626	Decl							_zend_abstract_info	_zend_abstract_info	zend_abstract_info
ANR	71627	DeclStmt									
ANR	71628	Decl							zend_abstract_info	zend_abstract_info	ai
ANR	71629	DeclStmt									
ANR	71630	Decl							zend_execute_data	zend_execute_data *	ex
ANR	71631	DeclStmt									
ANR	71632	Decl							int	int	i
ANR	71633	Function	zend_delete_variable	1508:0:44807:45436							
ANR	71634	FunctionDef	"zend_delete_variable (zend_execute_data * ex , HashTable * ht , const char * name , int name_len , ulong hash_value TSRMLS_DC)"		71633	0					
ANR	71635	CompoundStatement		1509:0:44950:45436	71633	0					
ANR	71636	IfStatement	"if ( zend_hash_quick_del ( ht , name , name_len , hash_value ) == SUCCESS )"		71633	0					
ANR	71637	Condition	"zend_hash_quick_del ( ht , name , name_len , hash_value ) == SUCCESS"	1510:5:44957:45018	71633	0	True				
ANR	71638	EqualityExpression	"zend_hash_quick_del ( ht , name , name_len , hash_value ) == SUCCESS"		71633	0		==			
ANR	71639	CallExpression	"zend_hash_quick_del ( ht , name , name_len , hash_value )"		71633	0					
ANR	71640	Callee	zend_hash_quick_del		71633	0					
ANR	71641	Identifier	zend_hash_quick_del		71633	0					
ANR	71642	ArgumentList	ht		71633	1					
ANR	71643	Argument	ht		71633	0					
ANR	71644	Identifier	ht		71633	0					
ANR	71645	Argument	name		71633	1					
ANR	71646	Identifier	name		71633	0					
ANR	71647	Argument	name_len		71633	2					
ANR	71648	Identifier	name_len		71633	0					
ANR	71649	Argument	hash_value		71633	3					
ANR	71650	Identifier	hash_value		71633	0					
ANR	71651	Identifier	SUCCESS		71633	1					
ANR	71652	CompoundStatement		2:69:70:70	71633	1					
ANR	71653	ExpressionStatement	name_len --	1511:2:45025:45035	71633	0	True				
ANR	71654	PostIncDecOperationExpression	name_len --		71633	0					
ANR	71655	Identifier	name_len		71633	0					
ANR	71656	IncDec	--		71633	1					
ANR	71657	WhileStatement	while ( ex && ex -> symbol_table == ht )		71633	1					
ANR	71658	Condition	ex && ex -> symbol_table == ht	1512:9:45046:45073	71633	0	True				
ANR	71659	AndExpression	ex && ex -> symbol_table == ht		71633	0		&&			
ANR	71660	Identifier	ex		71633	0					
ANR	71661	EqualityExpression	ex -> symbol_table == ht		71633	1		==			
ANR	71662	PtrMemberAccess	ex -> symbol_table		71633	0					
ANR	71663	Identifier	ex		71633	0					
ANR	71664	Identifier	symbol_table		71633	1					
ANR	71665	Identifier	ht		71633	1					
ANR	71666	CompoundStatement		5:3:130:135	71633	1					
ANR	71667	IdentifierDeclStatement	int i ;	1513:3:45081:45086	71633	0	True				
ANR	71668	IdentifierDecl	i		71633	0					
ANR	71669	IdentifierDeclType	int		71633	0					
ANR	71670	Identifier	i		71633	1					
ANR	71671	IfStatement	if ( ex -> op_array )		71633	1					
ANR	71672	Condition	ex -> op_array	1515:7:45096:45107	71633	0	True				
ANR	71673	PtrMemberAccess	ex -> op_array		71633	0					
ANR	71674	Identifier	ex		71633	0					
ANR	71675	Identifier	op_array		71633	1					
ANR	71676	CompoundStatement		7:21:159:159	71633	1					
ANR	71677	ForStatement	for ( i = 0 ; i < ex -> op_array -> last_var ; i ++ )		71633	0					
ANR	71678	ForInit	i = 0 ;	1516:9:45121:45126	71633	0	True				
ANR	71679	AssignmentExpression	i = 0		71633	0		=			
ANR	71680	Identifier	i		71633	0					
ANR	71681	PrimaryExpression	0		71633	1					
ANR	71682	Condition	i < ex -> op_array -> last_var	1516:16:45128:45153	71633	1	True				
ANR	71683	RelationalExpression	i < ex -> op_array -> last_var		71633	0		<			
ANR	71684	Identifier	i		71633	0					
ANR	71685	PtrMemberAccess	ex -> op_array -> last_var		71633	1					
ANR	71686	PtrMemberAccess	ex -> op_array		71633	0					
ANR	71687	Identifier	ex		71633	0					
ANR	71688	Identifier	op_array		71633	1					
ANR	71689	Identifier	last_var		71633	1					
ANR	71690	PostIncDecOperationExpression	i ++	1516:44:45156:45158	71633	2	True				
ANR	71691	Identifier	i		71633	0					
ANR	71692	IncDec	++		71633	1					
ANR	71693	CompoundStatement		8:49:210:210	71633	3					
ANR	71694	IfStatement	"if ( ex -> op_array -> vars [ i ] . hash_value == hash_value && ex -> op_array -> vars [ i ] . name_len == name_len && ! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len ) )"		71633	0					
ANR	71695	Condition	"ex -> op_array -> vars [ i ] . hash_value == hash_value && ex -> op_array -> vars [ i ] . name_len == name_len && ! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"	1517:9:45172:45330	71633	0	True				
ANR	71696	AndExpression	"ex -> op_array -> vars [ i ] . hash_value == hash_value && ex -> op_array -> vars [ i ] . name_len == name_len && ! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"		71633	0		&&			
ANR	71697	EqualityExpression	ex -> op_array -> vars [ i ] . hash_value == hash_value		71633	0		==			
ANR	71698	MemberAccess	ex -> op_array -> vars [ i ] . hash_value		71633	0					
ANR	71699	ArrayIndexing	ex -> op_array -> vars [ i ]		71633	0					
ANR	71700	PtrMemberAccess	ex -> op_array -> vars		71633	0					
ANR	71701	PtrMemberAccess	ex -> op_array		71633	0					
ANR	71702	Identifier	ex		71633	0					
ANR	71703	Identifier	op_array		71633	1					
ANR	71704	Identifier	vars		71633	1					
ANR	71705	Identifier	i		71633	1					
ANR	71706	Identifier	hash_value		71633	1					
ANR	71707	Identifier	hash_value		71633	1					
ANR	71708	AndExpression	"ex -> op_array -> vars [ i ] . name_len == name_len && ! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"		71633	1		&&			
ANR	71709	EqualityExpression	ex -> op_array -> vars [ i ] . name_len == name_len		71633	0		==			
ANR	71710	MemberAccess	ex -> op_array -> vars [ i ] . name_len		71633	0					
ANR	71711	ArrayIndexing	ex -> op_array -> vars [ i ]		71633	0					
ANR	71712	PtrMemberAccess	ex -> op_array -> vars		71633	0					
ANR	71713	PtrMemberAccess	ex -> op_array		71633	0					
ANR	71714	Identifier	ex		71633	0					
ANR	71715	Identifier	op_array		71633	1					
ANR	71716	Identifier	vars		71633	1					
ANR	71717	Identifier	i		71633	1					
ANR	71718	Identifier	name_len		71633	1					
ANR	71719	Identifier	name_len		71633	1					
ANR	71720	UnaryOperationExpression	"! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"		71633	1					
ANR	71721	UnaryOperator	!		71633	0					
ANR	71722	CallExpression	"memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"		71633	1					
ANR	71723	Callee	memcmp		71633	0					
ANR	71724	Identifier	memcmp		71633	0					
ANR	71725	ArgumentList	ex -> op_array -> vars [ i ] . name		71633	1					
ANR	71726	Argument	ex -> op_array -> vars [ i ] . name		71633	0					
ANR	71727	MemberAccess	ex -> op_array -> vars [ i ] . name		71633	0					
ANR	71728	ArrayIndexing	ex -> op_array -> vars [ i ]		71633	0					
ANR	71729	PtrMemberAccess	ex -> op_array -> vars		71633	0					
ANR	71730	PtrMemberAccess	ex -> op_array		71633	0					
ANR	71731	Identifier	ex		71633	0					
ANR	71732	Identifier	op_array		71633	1					
ANR	71733	Identifier	vars		71633	1					
ANR	71734	Identifier	i		71633	1					
ANR	71735	Identifier	name		71633	1					
ANR	71736	Argument	name		71633	1					
ANR	71737	Identifier	name		71633	0					
ANR	71738	Argument	name_len		71633	2					
ANR	71739	Identifier	name_len		71633	0					
ANR	71740	CompoundStatement		11:59:382:382	71633	1					
ANR	71741	ExpressionStatement	"* EX_CV_NUM ( ex , i ) = NULL"	1520:6:45341:45365	71633	0	True				
ANR	71742	AssignmentExpression	"* EX_CV_NUM ( ex , i ) = NULL"		71633	0		=			
ANR	71743	UnaryOperationExpression	"* EX_CV_NUM ( ex , i )"		71633	0					
ANR	71744	UnaryOperator	*		71633	0					
ANR	71745	CallExpression	"EX_CV_NUM ( ex , i )"		71633	1					
ANR	71746	Callee	EX_CV_NUM		71633	0					
ANR	71747	Identifier	EX_CV_NUM		71633	0					
ANR	71748	ArgumentList	ex		71633	1					
ANR	71749	Argument	ex		71633	0					
ANR	71750	Identifier	ex		71633	0					
ANR	71751	Argument	i		71633	1					
ANR	71752	Identifier	i		71633	0					
ANR	71753	Identifier	NULL		71633	1					
ANR	71754	BreakStatement	break ;	1521:6:45373:45378	71633	1	True				
ANR	71755	ExpressionStatement	ex = ex -> prev_execute_data	1525:3:45401:45427	71633	2	True				
ANR	71756	AssignmentExpression	ex = ex -> prev_execute_data		71633	0		=			
ANR	71757	Identifier	ex		71633	0					
ANR	71758	PtrMemberAccess	ex -> prev_execute_data		71633	1					
ANR	71759	Identifier	ex		71633	0					
ANR	71760	Identifier	prev_execute_data		71633	1					
ANR	71761	ReturnType	ZEND_API void		71633	1					
ANR	71762	Identifier	zend_delete_variable		71633	2					
ANR	71763	ParameterList	"zend_execute_data * ex , HashTable * ht , const char * name , int name_len , ulong hash_value TSRMLS_DC"		71633	3					
ANR	71764	Parameter	zend_execute_data * ex	1508:35:44842:44862	71633	0	True				
ANR	71765	ParameterType	zend_execute_data *		71633	0					
ANR	71766	Identifier	ex		71633	1					
ANR	71767	Parameter	HashTable * ht	1508:58:44865:44877	71633	1	True				
ANR	71768	ParameterType	HashTable *		71633	0					
ANR	71769	Identifier	ht		71633	1					
ANR	71770	Parameter	const char * name	1508:73:44880:44895	71633	2	True				
ANR	71771	ParameterType	const char *		71633	0					
ANR	71772	Identifier	name		71633	1					
ANR	71773	Parameter	int name_len	1508:91:44898:44909	71633	3	True				
ANR	71774	ParameterType	int		71633	0					
ANR	71775	Identifier	name_len		71633	1					
ANR	71776	Parameter	ulong hash_value TSRMLS_DC	1508:105:44912:44937	71633	4	True				
ANR	71777	ParameterType	ulong hash_value		71633	0					
ANR	71778	Identifier	TSRMLS_DC		71633	1					
ANR	71779	CFGEntryNode	ENTRY		71633		True				
ANR	71780	CFGExitNode	EXIT		71633		True				
ANR	71781	Symbol	"* EX_CV_NUM ( ex , i )"		71633						
ANR	71782	Symbol	* EX_CV_NUM		71633						
ANR	71783	Symbol	ht		71633						
ANR	71784	Symbol	TSRMLS_DC		71633						
ANR	71785	Symbol	zend_hash_quick_del		71633						
ANR	71786	Symbol	ex -> op_array -> vars		71633						
ANR	71787	Symbol	ex -> op_array -> vars [ i ] . hash_value		71633						
ANR	71788	Symbol	ex -> op_array -> vars [ i ] . name		71633						
ANR	71789	Symbol	memcmp		71633						
ANR	71790	Symbol	* ex -> op_array		71633						
ANR	71791	Symbol	name_len		71633						
ANR	71792	Symbol	* * ex		71633						
ANR	71793	Symbol	EX_CV_NUM		71633						
ANR	71794	Symbol	SUCCESS		71633						
ANR	71795	Symbol	NULL		71633						
ANR	71796	Symbol	ex -> prev_execute_data		71633						
ANR	71797	Symbol	ex -> op_array -> last_var		71633						
ANR	71798	Symbol	ex -> op_array -> vars [ i ] . name_len		71633						
ANR	71799	Symbol	ex -> symbol_table		71633						
ANR	71800	Symbol	i		71633						
ANR	71801	Symbol	ex -> op_array		71633						
ANR	71802	Symbol	* * * ex		71633						
ANR	71803	Symbol	ex		71633						
ANR	71804	Symbol	* ex -> op_array -> vars		71633						
ANR	71805	Symbol	* i		71633						
ANR	71806	Symbol	name		71633						
ANR	71807	Symbol	* ex		71633						
ANR	71808	Symbol	hash_value		71633						
ANR	71809	Symbol	* * ex -> op_array		71633						
ANR	71810	Function	zend_delete_global_variable_ex	1531:0:45449:46216							
ANR	71811	FunctionDef	"zend_delete_global_variable_ex (const char * name , int name_len , ulong hash_value TSRMLS_DC)"		71810	0					
ANR	71812	CompoundStatement		1532:0:45563:46216	71810	0					
ANR	71813	IdentifierDeclStatement	zend_execute_data * ex ;	1533:1:45566:45587	71810	0	True				
ANR	71814	IdentifierDecl	* ex		71810	0					
ANR	71815	IdentifierDeclType	zend_execute_data *		71810	0					
ANR	71816	Identifier	ex		71810	1					
ANR	71817	IfStatement	"if ( zend_hash_quick_exists ( & EG ( symbol_table ) , name , name_len + 1 , hash_value ) )"		71810	1					
ANR	71818	Condition	"zend_hash_quick_exists ( & EG ( symbol_table ) , name , name_len + 1 , hash_value )"	1535:5:45595:45667	71810	0	True				
ANR	71819	CallExpression	"zend_hash_quick_exists ( & EG ( symbol_table ) , name , name_len + 1 , hash_value )"		71810	0					
ANR	71820	Callee	zend_hash_quick_exists		71810	0					
ANR	71821	Identifier	zend_hash_quick_exists		71810	0					
ANR	71822	ArgumentList	& EG ( symbol_table )		71810	1					
ANR	71823	Argument	& EG ( symbol_table )		71810	0					
ANR	71824	UnaryOperationExpression	& EG ( symbol_table )		71810	0					
ANR	71825	UnaryOperator	&		71810	0					
ANR	71826	CallExpression	EG ( symbol_table )		71810	1					
ANR	71827	Callee	EG		71810	0					
ANR	71828	Identifier	EG		71810	0					
ANR	71829	ArgumentList	symbol_table		71810	1					
ANR	71830	Argument	symbol_table		71810	0					
ANR	71831	Identifier	symbol_table		71810	0					
ANR	71832	Argument	name		71810	1					
ANR	71833	Identifier	name		71810	0					
ANR	71834	Argument	name_len + 1		71810	2					
ANR	71835	AdditiveExpression	name_len + 1		71810	0		+			
ANR	71836	Identifier	name_len		71810	0					
ANR	71837	PrimaryExpression	1		71810	1					
ANR	71838	Argument	hash_value		71810	3					
ANR	71839	Identifier	hash_value		71810	0					
ANR	71840	CompoundStatement		4:80:106:106	71810	1					
ANR	71841	ForStatement	for ( ex = EG ( current_execute_data ) ; ex ; ex = ex -> prev_execute_data )		71810	0					
ANR	71842	ForInit	ex = EG ( current_execute_data ) ;	1536:7:45679:45708	71810	0	True				
ANR	71843	AssignmentExpression	ex = EG ( current_execute_data )		71810	0		=			
ANR	71844	Identifier	ex		71810	0					
ANR	71845	CallExpression	EG ( current_execute_data )		71810	1					
ANR	71846	Callee	EG		71810	0					
ANR	71847	Identifier	EG		71810	0					
ANR	71848	ArgumentList	current_execute_data		71810	1					
ANR	71849	Argument	current_execute_data		71810	0					
ANR	71850	Identifier	current_execute_data		71810	0					
ANR	71851	Condition	ex	1536:38:45710:45711	71810	1	True				
ANR	71852	Identifier	ex		71810	0					
ANR	71853	AssignmentExpression	ex = ex -> prev_execute_data	1536:42:45714:45739	71810	2	True	=			
ANR	71854	Identifier	ex		71810	0					
ANR	71855	PtrMemberAccess	ex -> prev_execute_data		71810	1					
ANR	71856	Identifier	ex		71810	0					
ANR	71857	Identifier	prev_execute_data		71810	1					
ANR	71858	CompoundStatement		5:70:178:178	71810	3					
ANR	71859	IfStatement	if ( ex -> op_array && ex -> symbol_table == & EG ( symbol_table ) )		71810	0					
ANR	71860	Condition	ex -> op_array && ex -> symbol_table == & EG ( symbol_table )	1537:7:45751:45803	71810	0	True				
ANR	71861	AndExpression	ex -> op_array && ex -> symbol_table == & EG ( symbol_table )		71810	0		&&			
ANR	71862	PtrMemberAccess	ex -> op_array		71810	0					
ANR	71863	Identifier	ex		71810	0					
ANR	71864	Identifier	op_array		71810	1					
ANR	71865	EqualityExpression	ex -> symbol_table == & EG ( symbol_table )		71810	1		==			
ANR	71866	PtrMemberAccess	ex -> symbol_table		71810	0					
ANR	71867	Identifier	ex		71810	0					
ANR	71868	Identifier	symbol_table		71810	1					
ANR	71869	UnaryOperationExpression	& EG ( symbol_table )		71810	1					
ANR	71870	UnaryOperator	&		71810	0					
ANR	71871	CallExpression	EG ( symbol_table )		71810	1					
ANR	71872	Callee	EG		71810	0					
ANR	71873	Identifier	EG		71810	0					
ANR	71874	ArgumentList	symbol_table		71810	1					
ANR	71875	Argument	symbol_table		71810	0					
ANR	71876	Identifier	symbol_table		71810	0					
ANR	71877	CompoundStatement		7:4:248:253	71810	1					
ANR	71878	IdentifierDeclStatement	int i ;	1538:4:45812:45817	71810	0	True				
ANR	71879	IdentifierDecl	i		71810	0					
ANR	71880	IdentifierDeclType	int		71810	0					
ANR	71881	Identifier	i		71810	1					
ANR	71882	ForStatement	for ( i = 0 ; i < ex -> op_array -> last_var ; i ++ )		71810	1					
ANR	71883	ForInit	i = 0 ;	1539:9:45828:45833	71810	0	True				
ANR	71884	AssignmentExpression	i = 0		71810	0		=			
ANR	71885	Identifier	i		71810	0					
ANR	71886	PrimaryExpression	0		71810	1					
ANR	71887	Condition	i < ex -> op_array -> last_var	1539:16:45835:45860	71810	1	True				
ANR	71888	RelationalExpression	i < ex -> op_array -> last_var		71810	0		<			
ANR	71889	Identifier	i		71810	0					
ANR	71890	PtrMemberAccess	ex -> op_array -> last_var		71810	1					
ANR	71891	PtrMemberAccess	ex -> op_array		71810	0					
ANR	71892	Identifier	ex		71810	0					
ANR	71893	Identifier	op_array		71810	1					
ANR	71894	Identifier	last_var		71810	1					
ANR	71895	PostIncDecOperationExpression	i ++	1539:44:45863:45865	71810	2	True				
ANR	71896	Identifier	i		71810	0					
ANR	71897	IncDec	++		71810	1					
ANR	71898	CompoundStatement		8:49:304:304	71810	3					
ANR	71899	IfStatement	"if ( ex -> op_array -> vars [ i ] . hash_value == hash_value && ex -> op_array -> vars [ i ] . name_len == name_len && ! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len ) )"		71810	0					
ANR	71900	Condition	"ex -> op_array -> vars [ i ] . hash_value == hash_value && ex -> op_array -> vars [ i ] . name_len == name_len && ! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"	1540:9:45879:46037	71810	0	True				
ANR	71901	AndExpression	"ex -> op_array -> vars [ i ] . hash_value == hash_value && ex -> op_array -> vars [ i ] . name_len == name_len && ! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"		71810	0		&&			
ANR	71902	EqualityExpression	ex -> op_array -> vars [ i ] . hash_value == hash_value		71810	0		==			
ANR	71903	MemberAccess	ex -> op_array -> vars [ i ] . hash_value		71810	0					
ANR	71904	ArrayIndexing	ex -> op_array -> vars [ i ]		71810	0					
ANR	71905	PtrMemberAccess	ex -> op_array -> vars		71810	0					
ANR	71906	PtrMemberAccess	ex -> op_array		71810	0					
ANR	71907	Identifier	ex		71810	0					
ANR	71908	Identifier	op_array		71810	1					
ANR	71909	Identifier	vars		71810	1					
ANR	71910	Identifier	i		71810	1					
ANR	71911	Identifier	hash_value		71810	1					
ANR	71912	Identifier	hash_value		71810	1					
ANR	71913	AndExpression	"ex -> op_array -> vars [ i ] . name_len == name_len && ! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"		71810	1		&&			
ANR	71914	EqualityExpression	ex -> op_array -> vars [ i ] . name_len == name_len		71810	0		==			
ANR	71915	MemberAccess	ex -> op_array -> vars [ i ] . name_len		71810	0					
ANR	71916	ArrayIndexing	ex -> op_array -> vars [ i ]		71810	0					
ANR	71917	PtrMemberAccess	ex -> op_array -> vars		71810	0					
ANR	71918	PtrMemberAccess	ex -> op_array		71810	0					
ANR	71919	Identifier	ex		71810	0					
ANR	71920	Identifier	op_array		71810	1					
ANR	71921	Identifier	vars		71810	1					
ANR	71922	Identifier	i		71810	1					
ANR	71923	Identifier	name_len		71810	1					
ANR	71924	Identifier	name_len		71810	1					
ANR	71925	UnaryOperationExpression	"! memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"		71810	1					
ANR	71926	UnaryOperator	!		71810	0					
ANR	71927	CallExpression	"memcmp ( ex -> op_array -> vars [ i ] . name , name , name_len )"		71810	1					
ANR	71928	Callee	memcmp		71810	0					
ANR	71929	Identifier	memcmp		71810	0					
ANR	71930	ArgumentList	ex -> op_array -> vars [ i ] . name		71810	1					
ANR	71931	Argument	ex -> op_array -> vars [ i ] . name		71810	0					
ANR	71932	MemberAccess	ex -> op_array -> vars [ i ] . name		71810	0					
ANR	71933	ArrayIndexing	ex -> op_array -> vars [ i ]		71810	0					
ANR	71934	PtrMemberAccess	ex -> op_array -> vars		71810	0					
ANR	71935	PtrMemberAccess	ex -> op_array		71810	0					
ANR	71936	Identifier	ex		71810	0					
ANR	71937	Identifier	op_array		71810	1					
ANR	71938	Identifier	vars		71810	1					
ANR	71939	Identifier	i		71810	1					
ANR	71940	Identifier	name		71810	1					
ANR	71941	Argument	name		71810	1					
ANR	71942	Identifier	name		71810	0					
ANR	71943	Argument	name_len		71810	2					
ANR	71944	Identifier	name_len		71810	0					
ANR	71945	CompoundStatement		12:7:482:482	71810	1					
ANR	71946	ExpressionStatement	"* EX_CV_NUM ( ex , i ) = NULL"	1544:6:46054:46078	71810	0	True				
ANR	71947	AssignmentExpression	"* EX_CV_NUM ( ex , i ) = NULL"		71810	0		=			
ANR	71948	UnaryOperationExpression	"* EX_CV_NUM ( ex , i )"		71810	0					
ANR	71949	UnaryOperator	*		71810	0					
ANR	71950	CallExpression	"EX_CV_NUM ( ex , i )"		71810	1					
ANR	71951	Callee	EX_CV_NUM		71810	0					
ANR	71952	Identifier	EX_CV_NUM		71810	0					
ANR	71953	ArgumentList	ex		71810	1					
ANR	71954	Argument	ex		71810	0					
ANR	71955	Identifier	ex		71810	0					
ANR	71956	Argument	i		71810	1					
ANR	71957	Identifier	i		71810	0					
ANR	71958	Identifier	NULL		71810	1					
ANR	71959	BreakStatement	break ;	1545:6:46086:46091	71810	1	True				
ANR	71960	ReturnStatement	"return zend_hash_quick_del ( & EG ( symbol_table ) , name , name_len + 1 , hash_value ) ;"	1550:2:46117:46194	71810	1	True				
ANR	71961	CallExpression	"zend_hash_quick_del ( & EG ( symbol_table ) , name , name_len + 1 , hash_value )"		71810	0					
ANR	71962	Callee	zend_hash_quick_del		71810	0					
ANR	71963	Identifier	zend_hash_quick_del		71810	0					
ANR	71964	ArgumentList	& EG ( symbol_table )		71810	1					
ANR	71965	Argument	& EG ( symbol_table )		71810	0					
ANR	71966	UnaryOperationExpression	& EG ( symbol_table )		71810	0					
ANR	71967	UnaryOperator	&		71810	0					
ANR	71968	CallExpression	EG ( symbol_table )		71810	1					
ANR	71969	Callee	EG		71810	0					
ANR	71970	Identifier	EG		71810	0					
ANR	71971	ArgumentList	symbol_table		71810	1					
ANR	71972	Argument	symbol_table		71810	0					
ANR	71973	Identifier	symbol_table		71810	0					
ANR	71974	Argument	name		71810	1					
ANR	71975	Identifier	name		71810	0					
ANR	71976	Argument	name_len + 1		71810	2					
ANR	71977	AdditiveExpression	name_len + 1		71810	0		+			
ANR	71978	Identifier	name_len		71810	0					
ANR	71979	PrimaryExpression	1		71810	1					
ANR	71980	Argument	hash_value		71810	3					
ANR	71981	Identifier	hash_value		71810	0					
ANR	71982	ReturnStatement	return FAILURE ;	1552:1:46200:46214	71810	2	True				
ANR	71983	Identifier	FAILURE		71810	0					
ANR	71984	ReturnType	ZEND_API int		71810	1					
ANR	71985	Identifier	zend_delete_global_variable_ex		71810	2					
ANR	71986	ParameterList	"const char * name , int name_len , ulong hash_value TSRMLS_DC"		71810	3					
ANR	71987	Parameter	const char * name	1531:44:45493:45508	71810	0	True				
ANR	71988	ParameterType	const char *		71810	0					
ANR	71989	Identifier	name		71810	1					
ANR	71990	Parameter	int name_len	1531:62:45511:45522	71810	1	True				
ANR	71991	ParameterType	int		71810	0					
ANR	71992	Identifier	name_len		71810	1					
ANR	71993	Parameter	ulong hash_value TSRMLS_DC	1531:76:45525:45550	71810	2	True				
ANR	71994	ParameterType	ulong hash_value		71810	0					
ANR	71995	Identifier	TSRMLS_DC		71810	1					
ANR	71996	CFGEntryNode	ENTRY		71810		True				
ANR	71997	CFGExitNode	EXIT		71810		True				
ANR	71998	Symbol	"* EX_CV_NUM ( ex , i )"		71810						
ANR	71999	Symbol	current_execute_data		71810						
ANR	72000	Symbol	* EX_CV_NUM		71810						
ANR	72001	Symbol	TSRMLS_DC		71810						
ANR	72002	Symbol	& EG		71810						
ANR	72003	Symbol	zend_hash_quick_del		71810						
ANR	72004	Symbol	ex -> op_array -> vars		71810						
ANR	72005	Symbol	ex -> op_array -> vars [ i ] . hash_value		71810						
ANR	72006	Symbol	memcmp		71810						
ANR	72007	Symbol	ex -> op_array -> vars [ i ] . name		71810						
ANR	72008	Symbol	* ex -> op_array		71810						
ANR	72009	Symbol	name_len		71810						
ANR	72010	Symbol	* * ex		71810						
ANR	72011	Symbol	EX_CV_NUM		71810						
ANR	72012	Symbol	EG		71810						
ANR	72013	Symbol	ex -> prev_execute_data		71810						
ANR	72014	Symbol	NULL		71810						
ANR	72015	Symbol	ex -> op_array -> last_var		71810						
ANR	72016	Symbol	ex -> op_array -> vars [ i ] . name_len		71810						
ANR	72017	Symbol	ex -> symbol_table		71810						
ANR	72018	Symbol	i		71810						
ANR	72019	Symbol	symbol_table		71810						
ANR	72020	Symbol	ex -> op_array		71810						
ANR	72021	Symbol	FAILURE		71810						
ANR	72022	Symbol	* * * ex		71810						
ANR	72023	Symbol	ex		71810						
ANR	72024	Symbol	* ex -> op_array -> vars		71810						
ANR	72025	Symbol	* i		71810						
ANR	72026	Symbol	name		71810						
ANR	72027	Symbol	* ex		71810						
ANR	72028	Symbol	zend_hash_quick_exists		71810						
ANR	72029	Symbol	hash_value		71810						
ANR	72030	Symbol	* * ex -> op_array		71810						
ANR	72031	Function	zend_delete_global_variable	1556:0:46229:46433							
ANR	72032	FunctionDef	"zend_delete_global_variable (const char * name , int name_len TSRMLS_DC)"		72031	0					
ANR	72033	CompoundStatement		1557:0:46322:46433	72031	0					
ANR	72034	Statement	return	1558:1:46325:46330	72031	0	True				
ANR	72035	Statement	zend_delete_global_variable_ex	1558:8:46332:46361	72031	1	True				
ANR	72036	Statement	(	1558:38:46362:46362	72031	2	True				
ANR	72037	Statement	name	1558:39:46363:46366	72031	3	True				
ANR	72038	Statement	","	1558:43:46367:46367	72031	4	True				
ANR	72039	Statement	name_len	1558:45:46369:46376	72031	5	True				
ANR	72040	Statement	","	1558:53:46377:46377	72031	6	True				
ANR	72041	Statement	zend_inline_hash_func	1558:55:46379:46399	72031	7	True				
ANR	72042	Statement	(	1558:76:46400:46400	72031	8	True				
ANR	72043	Statement	name	1558:77:46401:46404	72031	9	True				
ANR	72044	Statement	","	1558:81:46405:46405	72031	10	True				
ANR	72045	Statement	name_len	1558:83:46407:46414	72031	11	True				
ANR	72046	Statement	+	1558:92:46416:46416	72031	12	True				
ANR	72047	Statement	1	1558:94:46418:46418	72031	13	True				
ANR	72048	Statement	)	1558:95:46419:46419	72031	14	True				
ANR	72049	Statement	TSRMLS_CC	1558:97:46421:46429	72031	15	True				
ANR	72050	Statement	)	1558:106:46430:46430	72031	16	True				
ANR	72051	ExpressionStatement		1558:107:46431:46431	72031	17	True				
ANR	72052	ReturnType	ZEND_API int		72031	1					
ANR	72053	Identifier	zend_delete_global_variable		72031	2					
ANR	72054	ParameterList	"const char * name , int name_len TSRMLS_DC"		72031	3					
ANR	72055	Parameter	const char * name	1556:41:46270:46285	72031	0	True				
ANR	72056	ParameterType	const char *		72031	0					
ANR	72057	Identifier	name		72031	1					
ANR	72058	Parameter	int name_len TSRMLS_DC	1556:59:46288:46309	72031	1	True				
ANR	72059	ParameterType	int name_len		72031	0					
ANR	72060	Identifier	TSRMLS_DC		72031	1					
ANR	72061	CFGEntryNode	ENTRY		72031		True				
ANR	72062	CFGExitNode	EXIT		72031		True				
ANR	72063	Symbol	name		72031						
ANR	72064	Symbol	TSRMLS_DC		72031						
ANR	72065	DeclStmt									
ANR	72066	Decl							zend_uint	zend_uint	i
ANR	72067	DeclStmt									
ANR	72068	Decl							zend_execute_data	zend_execute_data *	ex
