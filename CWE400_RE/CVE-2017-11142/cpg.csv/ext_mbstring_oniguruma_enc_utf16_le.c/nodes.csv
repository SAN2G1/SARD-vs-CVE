command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	693486	File	data/converged/CVE-2017-11142_php-src/ext_mbstring_oniguruma_enc_utf16_le.c								
ANR	693487	DeclStmt									
ANR	693488	Decl							const int	const int [ ]	EncLen_UTF16
ANR	693489	Function	utf16le_code_to_mbclen	51:0:2449:2539							
ANR	693490	FunctionDef	utf16le_code_to_mbclen (OnigCodePoint code)		693489	0					
ANR	693491	CompoundStatement		53:0:2503:2539	693489	0					
ANR	693492	ReturnStatement	return ( code > 0xffff ? 4 : 2 ) ;	54:2:2507:2537	693489	0	True				
ANR	693493	ConditionalExpression	code > 0xffff ? 4 : 2		693489	0					
ANR	693494	Condition	code > 0xffff		693489	0					
ANR	693495	RelationalExpression	code > 0xffff		693489	0		>			
ANR	693496	Identifier	code		693489	0					
ANR	693497	PrimaryExpression	0xffff		693489	1					
ANR	693498	PrimaryExpression	4		693489	1					
ANR	693499	PrimaryExpression	2		693489	2					
ANR	693500	ReturnType	static int		693489	1					
ANR	693501	Identifier	utf16le_code_to_mbclen		693489	2					
ANR	693502	ParameterList	OnigCodePoint code		693489	3					
ANR	693503	Parameter	OnigCodePoint code	52:23:2483:2500	693489	0	True				
ANR	693504	ParameterType	OnigCodePoint		693489	0					
ANR	693505	Identifier	code		693489	1					
ANR	693506	CFGEntryNode	ENTRY		693489		True				
ANR	693507	CFGExitNode	EXIT		693489		True				
ANR	693508	Symbol	code		693489						
ANR	693509	Function	utf16le_mbc_enc_len	57:0:2542:2622							
ANR	693510	FunctionDef	utf16le_mbc_enc_len (const UChar * p)		693509	0					
ANR	693511	CompoundStatement		59:0:2589:2622	693509	0					
ANR	693512	ReturnStatement	return EncLen_UTF16 [ * ( p + 1 ) ] ;	60:2:2593:2620	693509	0	True				
ANR	693513	ArrayIndexing	EncLen_UTF16 [ * ( p + 1 ) ]		693509	0					
ANR	693514	Identifier	EncLen_UTF16		693509	0					
ANR	693515	UnaryOperationExpression	* ( p + 1 )		693509	1					
ANR	693516	UnaryOperator	*		693509	0					
ANR	693517	AdditiveExpression	p + 1		693509	1		+			
ANR	693518	Identifier	p		693509	0					
ANR	693519	PrimaryExpression	1		693509	1					
ANR	693520	ReturnType	static int		693509	1					
ANR	693521	Identifier	utf16le_mbc_enc_len		693509	2					
ANR	693522	ParameterList	const UChar * p		693509	3					
ANR	693523	Parameter	const UChar * p	58:20:2573:2586	693509	0	True				
ANR	693524	ParameterType	const UChar *		693509	0					
ANR	693525	Identifier	p		693509	1					
ANR	693526	CFGEntryNode	ENTRY		693509		True				
ANR	693527	CFGExitNode	EXIT		693509		True				
ANR	693528	Symbol	p		693509						
ANR	693529	Symbol	* * ( p + 1 )		693509						
ANR	693530	Symbol	* EncLen_UTF16		693509						
ANR	693531	Symbol	* p		693509						
ANR	693532	Symbol	EncLen_UTF16		693509						
ANR	693533	Symbol	* ( p + 1 )		693509						
ANR	693534	Symbol	* * p		693509						
ANR	693535	Function	utf16le_is_mbc_newline	63:0:2625:3021							
ANR	693536	FunctionDef	"utf16le_is_mbc_newline (const UChar * p , const UChar * end)"		693535	0					
ANR	693537	CompoundStatement		65:0:2693:3021	693535	0					
ANR	693538	IfStatement	if ( p + 1 < end )		693535	0					
ANR	693539	Condition	p + 1 < end	66:6:2701:2711	693535	0	True				
ANR	693540	RelationalExpression	p + 1 < end		693535	0		<			
ANR	693541	AdditiveExpression	p + 1		693535	0		+			
ANR	693542	Identifier	p		693535	0					
ANR	693543	PrimaryExpression	1		693535	1					
ANR	693544	Identifier	end		693535	1					
ANR	693545	CompoundStatement		2:19:20:20	693535	1					
ANR	693546	IfStatement	if ( * p == 0x0a && * ( p + 1 ) == 0x00 )		693535	0					
ANR	693547	Condition	* p == 0x0a && * ( p + 1 ) == 0x00	67:8:2724:2751	693535	0	True				
ANR	693548	AndExpression	* p == 0x0a && * ( p + 1 ) == 0x00		693535	0		&&			
ANR	693549	EqualityExpression	* p == 0x0a		693535	0		==			
ANR	693550	UnaryOperationExpression	* p		693535	0					
ANR	693551	UnaryOperator	*		693535	0					
ANR	693552	Identifier	p		693535	1					
ANR	693553	PrimaryExpression	0x0a		693535	1					
ANR	693554	EqualityExpression	* ( p + 1 ) == 0x00		693535	1		==			
ANR	693555	UnaryOperationExpression	* ( p + 1 )		693535	0					
ANR	693556	UnaryOperator	*		693535	0					
ANR	693557	AdditiveExpression	p + 1		693535	1		+			
ANR	693558	Identifier	p		693535	0					
ANR	693559	PrimaryExpression	1		693535	1					
ANR	693560	PrimaryExpression	0x00		693535	1					
ANR	693561	ReturnStatement	return 1 ;	68:6:2760:2768	693535	1	True				
ANR	693562	PrimaryExpression	1		693535	0					
ANR	693563	Statement	if	70:4:2814:2815	693535	1	True				
ANR	693564	Statement	(	70:7:2817:2817	693535	2	True				
ANR	693565	Statement	(	70:8:2818:2818	693535	3	True				
ANR	693566	Statement	*	72:2:2858:2858	693535	4	True				
ANR	693567	Statement	p	72:3:2859:2859	693535	5	True				
ANR	693568	Statement	==	72:5:2861:2862	693535	6	True				
ANR	693569	Statement	0x0d	72:8:2864:2867	693535	7	True				
ANR	693570	Statement	||	72:13:2869:2870	693535	8	True				
ANR	693571	Statement	*	74:2:2881:2881	693535	9	True				
ANR	693572	Statement	p	74:3:2882:2882	693535	10	True				
ANR	693573	Statement	==	74:5:2884:2885	693535	11	True				
ANR	693574	Statement	0x85	74:8:2887:2890	693535	12	True				
ANR	693575	Statement	)	74:12:2891:2891	693535	13	True				
ANR	693576	Statement	&&	74:14:2893:2894	693535	14	True				
ANR	693577	Statement	*	74:17:2896:2896	693535	15	True				
ANR	693578	Statement	(	74:18:2897:2897	693535	16	True				
ANR	693579	Statement	p	74:19:2898:2898	693535	17	True				
ANR	693580	Statement	+	74:20:2899:2899	693535	18	True				
ANR	693581	Statement	1	74:21:2900:2900	693535	19	True				
ANR	693582	Statement	)	74:22:2901:2901	693535	20	True				
ANR	693583	Statement	==	74:24:2903:2904	693535	21	True				
ANR	693584	Statement	0x00	74:27:2906:2909	693535	22	True				
ANR	693585	Statement	)	74:31:2910:2910	693535	23	True				
ANR	693586	ReturnStatement	return 1 ;	75:6:2918:2926	693535	24	True				
ANR	693587	PrimaryExpression	1		693535	0					
ANR	693588	IfStatement	if ( * ( p + 1 ) == 0x20 && ( * p == 0x29 || * p == 0x28 ) )		693535	25					
ANR	693589	Condition	* ( p + 1 ) == 0x20 && ( * p == 0x29 || * p == 0x28 )	76:8:2936:2979	693535	0	True				
ANR	693590	AndExpression	* ( p + 1 ) == 0x20 && ( * p == 0x29 || * p == 0x28 )		693535	0		&&			
ANR	693591	EqualityExpression	* ( p + 1 ) == 0x20		693535	0		==			
ANR	693592	UnaryOperationExpression	* ( p + 1 )		693535	0					
ANR	693593	UnaryOperator	*		693535	0					
ANR	693594	AdditiveExpression	p + 1		693535	1		+			
ANR	693595	Identifier	p		693535	0					
ANR	693596	PrimaryExpression	1		693535	1					
ANR	693597	PrimaryExpression	0x20		693535	1					
ANR	693598	OrExpression	* p == 0x29 || * p == 0x28		693535	1		||			
ANR	693599	EqualityExpression	* p == 0x29		693535	0		==			
ANR	693600	UnaryOperationExpression	* p		693535	0					
ANR	693601	UnaryOperator	*		693535	0					
ANR	693602	Identifier	p		693535	1					
ANR	693603	PrimaryExpression	0x29		693535	1					
ANR	693604	EqualityExpression	* p == 0x28		693535	1		==			
ANR	693605	UnaryOperationExpression	* p		693535	0					
ANR	693606	UnaryOperator	*		693535	0					
ANR	693607	Identifier	p		693535	1					
ANR	693608	PrimaryExpression	0x28		693535	1					
ANR	693609	ReturnStatement	return 1 ;	77:6:2988:2996	693535	1	True				
ANR	693610	PrimaryExpression	1		693535	0					
ANR	693611	ReturnStatement	return 0 ;	80:2:3011:3019	693535	1	True				
ANR	693612	PrimaryExpression	0		693535	0					
ANR	693613	ReturnType	static int		693535	1					
ANR	693614	Identifier	utf16le_is_mbc_newline		693535	2					
ANR	693615	ParameterList	"const UChar * p , const UChar * end"		693535	3					
ANR	693616	Parameter	const UChar * p	64:23:2659:2672	693535	0	True				
ANR	693617	ParameterType	const UChar *		693535	0					
ANR	693618	Identifier	p		693535	1					
ANR	693619	Parameter	const UChar * end	64:39:2675:2690	693535	1	True				
ANR	693620	ParameterType	const UChar *		693535	0					
ANR	693621	Identifier	end		693535	1					
ANR	693622	CFGEntryNode	ENTRY		693535		True				
ANR	693623	CFGExitNode	EXIT		693535		True				
ANR	693624	Symbol	p		693535						
ANR	693625	Symbol	end		693535						
ANR	693626	Symbol	* p		693535						
ANR	693627	Symbol	* ( p + 1 )		693535						
ANR	693628	DeclStmt									
ANR	693629	Decl							OnigCodePoint	OnigCodePoint	code
ANR	693630	DeclStmt									
ANR	693631	Decl							UChar	UChar	c0
ANR	693632	DeclStmt									
ANR	693633	Decl							UChar	UChar	c1
ANR	693634	Function	utf16le_code_to_mbc	101:0:3412:3883							
ANR	693635	FunctionDef	"utf16le_code_to_mbc (OnigCodePoint code , UChar * buf)"		693634	0					
ANR	693636	CompoundStatement		103:0:3475:3883	693634	0					
ANR	693637	IdentifierDeclStatement	UChar * p = buf ;	104:2:3479:3493	693634	0	True				
ANR	693638	IdentifierDecl	* p = buf		693634	0					
ANR	693639	IdentifierDeclType	UChar *		693634	0					
ANR	693640	Identifier	p		693634	1					
ANR	693641	AssignmentExpression	* p = buf		693634	2		=			
ANR	693642	Identifier	buf		693634	0					
ANR	693643	Identifier	buf		693634	1					
ANR	693644	IfStatement	if ( code > 0xffff )		693634	1					
ANR	693645	Condition	code > 0xffff	106:6:3502:3514	693634	0	True				
ANR	693646	RelationalExpression	code > 0xffff		693634	0		>			
ANR	693647	Identifier	code		693634	0					
ANR	693648	PrimaryExpression	0xffff		693634	1					
ANR	693649	CompoundStatement		5:4:47:71	693634	1					
ANR	693650	IdentifierDeclStatement	"unsigned int plane , high ;"	107:4:3523:3547	693634	0	True				
ANR	693651	IdentifierDecl	plane		693634	0					
ANR	693652	IdentifierDeclType	unsigned int		693634	0					
ANR	693653	Identifier	plane		693634	1					
ANR	693654	IdentifierDecl	high		693634	1					
ANR	693655	IdentifierDeclType	unsigned int		693634	0					
ANR	693656	Identifier	high		693634	1					
ANR	693657	ExpressionStatement	plane = ( code >> 16 ) - 1	109:4:3554:3578	693634	1	True				
ANR	693658	AssignmentExpression	plane = ( code >> 16 ) - 1		693634	0		=			
ANR	693659	Identifier	plane		693634	0					
ANR	693660	AdditiveExpression	( code >> 16 ) - 1		693634	1		-			
ANR	693661	ShiftExpression	code >> 16		693634	0		>>			
ANR	693662	Identifier	code		693634	0					
ANR	693663	PrimaryExpression	16		693634	1					
ANR	693664	PrimaryExpression	1		693634	1					
ANR	693665	ExpressionStatement	high = ( code & 0xff00 ) >> 8	110:4:3584:3611	693634	2	True				
ANR	693666	AssignmentExpression	high = ( code & 0xff00 ) >> 8		693634	0		=			
ANR	693667	Identifier	high		693634	0					
ANR	693668	ShiftExpression	( code & 0xff00 ) >> 8		693634	1		>>			
ANR	693669	BitAndExpression	code & 0xff00		693634	0		&			
ANR	693670	Identifier	code		693634	0					
ANR	693671	PrimaryExpression	0xff00		693634	1					
ANR	693672	PrimaryExpression	8		693634	1					
ANR	693673	ExpressionStatement	* p ++ = ( ( plane & 0x03 ) << 6 ) + ( high >> 2 )	112:4:3618:3660	693634	3	True				
ANR	693674	AssignmentExpression	* p ++ = ( ( plane & 0x03 ) << 6 ) + ( high >> 2 )		693634	0		=			
ANR	693675	UnaryOperationExpression	* p ++		693634	0					
ANR	693676	UnaryOperator	*		693634	0					
ANR	693677	PostIncDecOperationExpression	p ++		693634	1					
ANR	693678	Identifier	p		693634	0					
ANR	693679	IncDec	++		693634	1					
ANR	693680	AdditiveExpression	( ( plane & 0x03 ) << 6 ) + ( high >> 2 )		693634	1		+			
ANR	693681	ShiftExpression	( plane & 0x03 ) << 6		693634	0		<<			
ANR	693682	BitAndExpression	plane & 0x03		693634	0		&			
ANR	693683	Identifier	plane		693634	0					
ANR	693684	PrimaryExpression	0x03		693634	1					
ANR	693685	PrimaryExpression	6		693634	1					
ANR	693686	ShiftExpression	high >> 2		693634	1		>>			
ANR	693687	Identifier	high		693634	0					
ANR	693688	PrimaryExpression	2		693634	1					
ANR	693689	ExpressionStatement	* p ++ = ( plane >> 2 ) + 0xd8	113:4:3666:3692	693634	4	True				
ANR	693690	AssignmentExpression	* p ++ = ( plane >> 2 ) + 0xd8		693634	0		=			
ANR	693691	UnaryOperationExpression	* p ++		693634	0					
ANR	693692	UnaryOperator	*		693634	0					
ANR	693693	PostIncDecOperationExpression	p ++		693634	1					
ANR	693694	Identifier	p		693634	0					
ANR	693695	IncDec	++		693634	1					
ANR	693696	AdditiveExpression	( plane >> 2 ) + 0xd8		693634	1		+			
ANR	693697	ShiftExpression	plane >> 2		693634	0		>>			
ANR	693698	Identifier	plane		693634	0					
ANR	693699	PrimaryExpression	2		693634	1					
ANR	693700	PrimaryExpression	0xd8		693634	1					
ANR	693701	ExpressionStatement	* p ++ = ( UChar ) ( code & 0xff )	114:4:3698:3726	693634	5	True				
ANR	693702	AssignmentExpression	* p ++ = ( UChar ) ( code & 0xff )		693634	0		=			
ANR	693703	UnaryOperationExpression	* p ++		693634	0					
ANR	693704	UnaryOperator	*		693634	0					
ANR	693705	PostIncDecOperationExpression	p ++		693634	1					
ANR	693706	Identifier	p		693634	0					
ANR	693707	IncDec	++		693634	1					
ANR	693708	CastExpression	( UChar ) ( code & 0xff )		693634	1					
ANR	693709	CastTarget	UChar		693634	0					
ANR	693710	BitAndExpression	code & 0xff		693634	1		&			
ANR	693711	Identifier	code		693634	0					
ANR	693712	PrimaryExpression	0xff		693634	1					
ANR	693713	ExpressionStatement	* p = ( high & 0x03 ) + 0xdc	115:4:3732:3759	693634	6	True				
ANR	693714	AssignmentExpression	* p = ( high & 0x03 ) + 0xdc		693634	0		=			
ANR	693715	UnaryOperationExpression	* p		693634	0					
ANR	693716	UnaryOperator	*		693634	0					
ANR	693717	Identifier	p		693634	1					
ANR	693718	AdditiveExpression	( high & 0x03 ) + 0xdc		693634	1		+			
ANR	693719	BitAndExpression	high & 0x03		693634	0		&			
ANR	693720	Identifier	high		693634	0					
ANR	693721	PrimaryExpression	0x03		693634	1					
ANR	693722	PrimaryExpression	0xdc		693634	1					
ANR	693723	ReturnStatement	return 4 ;	116:4:3765:3773	693634	7	True				
ANR	693724	PrimaryExpression	4		693634	0					
ANR	693725	ElseStatement	else		693634	0					
ANR	693726	CompoundStatement		16:7:310:310	693634	0					
ANR	693727	ExpressionStatement	* p ++ = ( UChar ) ( code & 0xff )	119:4:3792:3820	693634	0	True				
ANR	693728	AssignmentExpression	* p ++ = ( UChar ) ( code & 0xff )		693634	0		=			
ANR	693729	UnaryOperationExpression	* p ++		693634	0					
ANR	693730	UnaryOperator	*		693634	0					
ANR	693731	PostIncDecOperationExpression	p ++		693634	1					
ANR	693732	Identifier	p		693634	0					
ANR	693733	IncDec	++		693634	1					
ANR	693734	CastExpression	( UChar ) ( code & 0xff )		693634	1					
ANR	693735	CastTarget	UChar		693634	0					
ANR	693736	BitAndExpression	code & 0xff		693634	1		&			
ANR	693737	Identifier	code		693634	0					
ANR	693738	PrimaryExpression	0xff		693634	1					
ANR	693739	ExpressionStatement	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )	120:4:3826:3863	693634	1	True				
ANR	693740	AssignmentExpression	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )		693634	0		=			
ANR	693741	UnaryOperationExpression	* p ++		693634	0					
ANR	693742	UnaryOperator	*		693634	0					
ANR	693743	PostIncDecOperationExpression	p ++		693634	1					
ANR	693744	Identifier	p		693634	0					
ANR	693745	IncDec	++		693634	1					
ANR	693746	CastExpression	( UChar ) ( ( code & 0xff00 ) >> 8 )		693634	1					
ANR	693747	CastTarget	UChar		693634	0					
ANR	693748	ShiftExpression	( code & 0xff00 ) >> 8		693634	1		>>			
ANR	693749	BitAndExpression	code & 0xff00		693634	0		&			
ANR	693750	Identifier	code		693634	0					
ANR	693751	PrimaryExpression	0xff00		693634	1					
ANR	693752	PrimaryExpression	8		693634	1					
ANR	693753	ReturnStatement	return 2 ;	121:4:3869:3877	693634	2	True				
ANR	693754	PrimaryExpression	2		693634	0					
ANR	693755	ReturnType	static int		693634	1					
ANR	693756	Identifier	utf16le_code_to_mbc		693634	2					
ANR	693757	ParameterList	"OnigCodePoint code , UChar * buf"		693634	3					
ANR	693758	Parameter	OnigCodePoint code	102:20:3443:3460	693634	0	True				
ANR	693759	ParameterType	OnigCodePoint		693634	0					
ANR	693760	Identifier	code		693634	1					
ANR	693761	Parameter	UChar * buf	102:40:3463:3472	693634	1	True				
ANR	693762	ParameterType	UChar *		693634	0					
ANR	693763	Identifier	buf		693634	1					
ANR	693764	CFGEntryNode	ENTRY		693634		True				
ANR	693765	CFGExitNode	EXIT		693634		True				
ANR	693766	Symbol	p		693634						
ANR	693767	Symbol	plane		693634						
ANR	693768	Symbol	buf		693634						
ANR	693769	Symbol	high		693634						
ANR	693770	Symbol	code		693634						
ANR	693771	Symbol	* p ++		693634						
ANR	693772	Symbol	* p		693634						
ANR	693773	Function	utf16le_mbc_case_fold	125:0:3886:4481							
ANR	693774	FunctionDef	"utf16le_mbc_case_fold (OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold)"		693773	0					
ANR	693775	CompoundStatement		128:0:3999:4481	693773	0					
ANR	693776	IdentifierDeclStatement	const UChar * p = * pp ;	129:2:4003:4023	693773	0	True				
ANR	693777	IdentifierDecl	* p = * pp		693773	0					
ANR	693778	IdentifierDeclType	const UChar *		693773	0					
ANR	693779	Identifier	p		693773	1					
ANR	693780	AssignmentExpression	* p = * pp		693773	2		=			
ANR	693781	Identifier	p		693773	0					
ANR	693782	UnaryOperationExpression	* pp		693773	1					
ANR	693783	UnaryOperator	*		693773	0					
ANR	693784	Identifier	pp		693773	1					
ANR	693785	IfStatement	if ( ONIGENC_IS_ASCII_CODE ( * p ) && * ( p + 1 ) == 0 )		693773	1					
ANR	693786	Condition	ONIGENC_IS_ASCII_CODE ( * p ) && * ( p + 1 ) == 0	131:6:4032:4071	693773	0	True				
ANR	693787	AndExpression	ONIGENC_IS_ASCII_CODE ( * p ) && * ( p + 1 ) == 0		693773	0		&&			
ANR	693788	CallExpression	ONIGENC_IS_ASCII_CODE ( * p )		693773	0					
ANR	693789	Callee	ONIGENC_IS_ASCII_CODE		693773	0					
ANR	693790	Identifier	ONIGENC_IS_ASCII_CODE		693773	0					
ANR	693791	ArgumentList	* p		693773	1					
ANR	693792	Argument	* p		693773	0					
ANR	693793	UnaryOperationExpression	* p		693773	0					
ANR	693794	UnaryOperator	*		693773	0					
ANR	693795	Identifier	p		693773	1					
ANR	693796	EqualityExpression	* ( p + 1 ) == 0		693773	1		==			
ANR	693797	UnaryOperationExpression	* ( p + 1 )		693773	0					
ANR	693798	UnaryOperator	*		693773	0					
ANR	693799	AdditiveExpression	p + 1		693773	1		+			
ANR	693800	Identifier	p		693773	0					
ANR	693801	PrimaryExpression	1		693773	1					
ANR	693802	PrimaryExpression	0		693773	1					
ANR	693803	CompoundStatement		4:48:74:74	693773	1					
ANR	693804	IfStatement	if ( ( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0 )		693773	0					
ANR	693805	Condition	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0	133:8:4127:4171	693773	0	True				
ANR	693806	EqualityExpression	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0		693773	0		!=			
ANR	693807	BitAndExpression	flag & ONIGENC_CASE_FOLD_TURKISH_AZERI		693773	0		&			
ANR	693808	Identifier	flag		693773	0					
ANR	693809	Identifier	ONIGENC_CASE_FOLD_TURKISH_AZERI		693773	1					
ANR	693810	PrimaryExpression	0		693773	1					
ANR	693811	CompoundStatement		6:55:174:174	693773	1					
ANR	693812	IfStatement	if ( * p == 0x49 )		693773	0					
ANR	693813	Condition	* p == 0x49	134:10:4186:4195	693773	0	True				
ANR	693814	EqualityExpression	* p == 0x49		693773	0		==			
ANR	693815	UnaryOperationExpression	* p		693773	0					
ANR	693816	UnaryOperator	*		693773	0					
ANR	693817	Identifier	p		693773	1					
ANR	693818	PrimaryExpression	0x49		693773	1					
ANR	693819	CompoundStatement		7:22:198:198	693773	1					
ANR	693820	ExpressionStatement	* fold ++ = 0x31	135:1:4201:4215	693773	0	True				
ANR	693821	AssignmentExpression	* fold ++ = 0x31		693773	0		=			
ANR	693822	UnaryOperationExpression	* fold ++		693773	0					
ANR	693823	UnaryOperator	*		693773	0					
ANR	693824	PostIncDecOperationExpression	fold ++		693773	1					
ANR	693825	Identifier	fold		693773	0					
ANR	693826	IncDec	++		693773	1					
ANR	693827	PrimaryExpression	0x31		693773	1					
ANR	693828	ExpressionStatement	* fold = 0x01	136:1:4218:4232	693773	1	True				
ANR	693829	AssignmentExpression	* fold = 0x01		693773	0		=			
ANR	693830	UnaryOperationExpression	* fold		693773	0					
ANR	693831	UnaryOperator	*		693773	0					
ANR	693832	Identifier	fold		693773	1					
ANR	693833	PrimaryExpression	0x01		693773	1					
ANR	693834	ExpressionStatement	( * pp ) += 2	137:1:4235:4245	693773	2	True				
ANR	693835	AssignmentExpression	( * pp ) += 2		693773	0		+=			
ANR	693836	UnaryOperationExpression	* pp		693773	0					
ANR	693837	UnaryOperator	*		693773	0					
ANR	693838	Identifier	pp		693773	1					
ANR	693839	PrimaryExpression	2		693773	1					
ANR	693840	ReturnStatement	return 2 ;	138:1:4248:4256	693773	3	True				
ANR	693841	PrimaryExpression	2		693773	0					
ANR	693842	ExpressionStatement	* fold ++ = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )	143:4:4284:4330	693773	1	True				
ANR	693843	AssignmentExpression	* fold ++ = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )		693773	0		=			
ANR	693844	UnaryOperationExpression	* fold ++		693773	0					
ANR	693845	UnaryOperator	*		693773	0					
ANR	693846	PostIncDecOperationExpression	fold ++		693773	1					
ANR	693847	Identifier	fold		693773	0					
ANR	693848	IncDec	++		693773	1					
ANR	693849	CallExpression	ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )		693773	1					
ANR	693850	Callee	ONIGENC_ASCII_CODE_TO_LOWER_CASE		693773	0					
ANR	693851	Identifier	ONIGENC_ASCII_CODE_TO_LOWER_CASE		693773	0					
ANR	693852	ArgumentList	* p		693773	1					
ANR	693853	Argument	* p		693773	0					
ANR	693854	UnaryOperationExpression	* p		693773	0					
ANR	693855	UnaryOperator	*		693773	0					
ANR	693856	Identifier	p		693773	1					
ANR	693857	ExpressionStatement	* fold = 0	144:4:4336:4347	693773	2	True				
ANR	693858	AssignmentExpression	* fold = 0		693773	0		=			
ANR	693859	UnaryOperationExpression	* fold		693773	0					
ANR	693860	UnaryOperator	*		693773	0					
ANR	693861	Identifier	fold		693773	1					
ANR	693862	PrimaryExpression	0		693773	1					
ANR	693863	ExpressionStatement	* pp += 2	145:4:4353:4361	693773	3	True				
ANR	693864	AssignmentExpression	* pp += 2		693773	0		+=			
ANR	693865	UnaryOperationExpression	* pp		693773	0					
ANR	693866	UnaryOperator	*		693773	0					
ANR	693867	Identifier	pp		693773	1					
ANR	693868	PrimaryExpression	2		693773	1					
ANR	693869	ReturnStatement	return 2 ;	146:4:4367:4375	693773	4	True				
ANR	693870	PrimaryExpression	2		693773	0					
ANR	693871	ElseStatement	else		693773	0					
ANR	693872	ReturnStatement	"return onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF16_LE , flag , pp , end , fold ) ;"	149:4:4392:4479	693773	0	True				
ANR	693873	CallExpression	"onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF16_LE , flag , pp , end , fold )"		693773	0					
ANR	693874	Callee	onigenc_unicode_mbc_case_fold		693773	0					
ANR	693875	Identifier	onigenc_unicode_mbc_case_fold		693773	0					
ANR	693876	ArgumentList	ONIG_ENCODING_UTF16_LE		693773	1					
ANR	693877	Argument	ONIG_ENCODING_UTF16_LE		693773	0					
ANR	693878	Identifier	ONIG_ENCODING_UTF16_LE		693773	0					
ANR	693879	Argument	flag		693773	1					
ANR	693880	Identifier	flag		693773	0					
ANR	693881	Argument	pp		693773	2					
ANR	693882	Identifier	pp		693773	0					
ANR	693883	Argument	end		693773	3					
ANR	693884	Identifier	end		693773	0					
ANR	693885	Argument	fold		693773	4					
ANR	693886	Identifier	fold		693773	0					
ANR	693887	ReturnType	static int		693773	1					
ANR	693888	Identifier	utf16le_mbc_case_fold		693773	2					
ANR	693889	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold"		693773	3					
ANR	693890	Parameter	OnigCaseFoldType flag	126:22:3919:3939	693773	0	True				
ANR	693891	ParameterType	OnigCaseFoldType		693773	0					
ANR	693892	Identifier	flag		693773	1					
ANR	693893	Parameter	const UChar * * pp	127:8:3950:3965	693773	1	True				
ANR	693894	ParameterType	const UChar * *		693773	0					
ANR	693895	Identifier	pp		693773	1					
ANR	693896	Parameter	const UChar * end	127:26:3968:3983	693773	2	True				
ANR	693897	ParameterType	const UChar *		693773	0					
ANR	693898	Identifier	end		693773	1					
ANR	693899	Parameter	UChar * fold	127:44:3986:3996	693773	3	True				
ANR	693900	ParameterType	UChar *		693773	0					
ANR	693901	Identifier	fold		693773	1					
ANR	693902	CFGEntryNode	ENTRY		693773		True				
ANR	693903	CFGExitNode	EXIT		693773		True				
ANR	693904	Symbol	pp		693773						
ANR	693905	Symbol	ONIGENC_IS_ASCII_CODE		693773						
ANR	693906	Symbol	flag		693773						
ANR	693907	Symbol	* pp		693773						
ANR	693908	Symbol	* fold		693773						
ANR	693909	Symbol	* ( p + 1 )		693773						
ANR	693910	Symbol	* fold ++		693773						
ANR	693911	Symbol	ONIG_ENCODING_UTF16_LE		693773						
ANR	693912	Symbol	p		693773						
ANR	693913	Symbol	fold		693773						
ANR	693914	Symbol	ONIGENC_ASCII_CODE_TO_LOWER_CASE		693773						
ANR	693915	Symbol	ONIGENC_CASE_FOLD_TURKISH_AZERI		693773						
ANR	693916	Symbol	end		693773						
ANR	693917	Symbol	* p		693773						
ANR	693918	Symbol	onigenc_unicode_mbc_case_fold		693773						
ANR	693919	Function	utf16le_is_mbc_ambiguous	154:0:4490:5159							
ANR	693920	FunctionDef	"utf16le_is_mbc_ambiguous (OnigCaseFoldType flag , const UChar * * pp , const UChar * end)"		693919	0					
ANR	693921	CompoundStatement		157:0:4589:5159	693919	0					
ANR	693922	IdentifierDeclStatement	const UChar * p = * pp ;	158:2:4593:4613	693919	0	True				
ANR	693923	IdentifierDecl	* p = * pp		693919	0					
ANR	693924	IdentifierDeclType	const UChar *		693919	0					
ANR	693925	Identifier	p		693919	1					
ANR	693926	AssignmentExpression	* p = * pp		693919	2		=			
ANR	693927	Identifier	p		693919	0					
ANR	693928	UnaryOperationExpression	* pp		693919	1					
ANR	693929	UnaryOperator	*		693919	0					
ANR	693930	Identifier	pp		693919	1					
ANR	693931	ExpressionStatement	( * pp ) += EncLen_UTF16 [ * ( p + 1 ) ]	160:2:4618:4647	693919	1	True				
ANR	693932	AssignmentExpression	( * pp ) += EncLen_UTF16 [ * ( p + 1 ) ]		693919	0		+=			
ANR	693933	UnaryOperationExpression	* pp		693919	0					
ANR	693934	UnaryOperator	*		693919	0					
ANR	693935	Identifier	pp		693919	1					
ANR	693936	ArrayIndexing	EncLen_UTF16 [ * ( p + 1 ) ]		693919	1					
ANR	693937	Identifier	EncLen_UTF16		693919	0					
ANR	693938	UnaryOperationExpression	* ( p + 1 )		693919	1					
ANR	693939	UnaryOperator	*		693919	0					
ANR	693940	AdditiveExpression	p + 1		693919	1		+			
ANR	693941	Identifier	p		693919	0					
ANR	693942	PrimaryExpression	1		693919	1					
ANR	693943	IfStatement	if ( * ( p + 1 ) == 0 )		693919	2					
ANR	693944	Condition	* ( p + 1 ) == 0	162:6:4656:4666	693919	0	True				
ANR	693945	EqualityExpression	* ( p + 1 ) == 0		693919	0		==			
ANR	693946	UnaryOperationExpression	* ( p + 1 )		693919	0					
ANR	693947	UnaryOperator	*		693919	0					
ANR	693948	AdditiveExpression	p + 1		693919	1		+			
ANR	693949	Identifier	p		693919	0					
ANR	693950	PrimaryExpression	1		693919	1					
ANR	693951	PrimaryExpression	0		693919	1					
ANR	693952	CompoundStatement		7:4:85:93	693919	1					
ANR	693953	IdentifierDeclStatement	"int c , v ;"	163:4:4675:4683	693919	0	True				
ANR	693954	IdentifierDecl	c		693919	0					
ANR	693955	IdentifierDeclType	int		693919	0					
ANR	693956	Identifier	c		693919	1					
ANR	693957	IdentifierDecl	v		693919	1					
ANR	693958	IdentifierDeclType	int		693919	0					
ANR	693959	Identifier	v		693919	1					
ANR	693960	IfStatement	if ( * p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0 )		693919	1					
ANR	693961	Condition	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0	165:8:4694:4758	693919	0	True				
ANR	693962	AndExpression	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		693919	0		&&			
ANR	693963	EqualityExpression	* p == 0xdf		693919	0		==			
ANR	693964	UnaryOperationExpression	* p		693919	0					
ANR	693965	UnaryOperator	*		693919	0					
ANR	693966	Identifier	p		693919	1					
ANR	693967	PrimaryExpression	0xdf		693919	1					
ANR	693968	EqualityExpression	( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		693919	1		!=			
ANR	693969	BitAndExpression	flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		693919	0		&			
ANR	693970	Identifier	flag		693919	0					
ANR	693971	Identifier	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		693919	1					
ANR	693972	PrimaryExpression	0		693919	1					
ANR	693973	CompoundStatement		9:75:171:171	693919	1					
ANR	693974	ReturnStatement	return TRUE ;	166:6:4769:4780	693919	0	True				
ANR	693975	Identifier	TRUE		693919	0					
ANR	693976	ExpressionStatement	c = * p	169:4:4793:4799	693919	2	True				
ANR	693977	AssignmentExpression	c = * p		693919	0		=			
ANR	693978	Identifier	c		693919	0					
ANR	693979	UnaryOperationExpression	* p		693919	1					
ANR	693980	UnaryOperator	*		693919	0					
ANR	693981	Identifier	p		693919	1					
ANR	693982	ExpressionStatement	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"	170:4:4805:4911	693919	3	True				
ANR	693983	AssignmentExpression	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		693919	0		=			
ANR	693984	Identifier	v		693919	0					
ANR	693985	CallExpression	"ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		693919	1					
ANR	693986	Callee	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		693919	0					
ANR	693987	Identifier	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		693919	0					
ANR	693988	ArgumentList	c		693919	1					
ANR	693989	Argument	c		693919	0					
ANR	693990	Identifier	c		693919	0					
ANR	693991	Argument	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		693919	1					
ANR	693992	InclusiveOrExpression	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		693919	0		|			
ANR	693993	Identifier	BIT_CTYPE_UPPER		693919	0					
ANR	693994	Identifier	BIT_CTYPE_LOWER		693919	1					
ANR	693995	IfStatement	if ( ( v | BIT_CTYPE_LOWER ) != 0 )		693919	4					
ANR	693996	Condition	( v | BIT_CTYPE_LOWER ) != 0	172:8:4921:4946	693919	0	True				
ANR	693997	EqualityExpression	( v | BIT_CTYPE_LOWER ) != 0		693919	0		!=			
ANR	693998	InclusiveOrExpression	v | BIT_CTYPE_LOWER		693919	0		|			
ANR	693999	Identifier	v		693919	0					
ANR	694000	Identifier	BIT_CTYPE_LOWER		693919	1					
ANR	694001	PrimaryExpression	0		693919	1					
ANR	694002	CompoundStatement		16:36:359:359	693919	1					
ANR	694003	IfStatement	if ( c >= 0xaa && c <= 0xba )		693919	0					
ANR	694004	Condition	c >= 0xaa && c <= 0xba	174:10:5032:5053	693919	0	True				
ANR	694005	AndExpression	c >= 0xaa && c <= 0xba		693919	0		&&			
ANR	694006	RelationalExpression	c >= 0xaa		693919	0		>=			
ANR	694007	Identifier	c		693919	0					
ANR	694008	PrimaryExpression	0xaa		693919	1					
ANR	694009	RelationalExpression	c <= 0xba		693919	1		<=			
ANR	694010	Identifier	c		693919	0					
ANR	694011	PrimaryExpression	0xba		693919	1					
ANR	694012	ReturnStatement	return FALSE ;	175:1:5057:5069	693919	1	True				
ANR	694013	Identifier	FALSE		693919	0					
ANR	694014	ElseStatement	else		693919	0					
ANR	694015	ReturnStatement	return TRUE ;	177:1:5083:5094	693919	0	True				
ANR	694016	Identifier	TRUE		693919	0					
ANR	694017	ReturnStatement	return ( v != 0 ? TRUE : FALSE ) ;	179:4:5106:5136	693919	5	True				
ANR	694018	ConditionalExpression	v != 0 ? TRUE : FALSE		693919	0					
ANR	694019	Condition	v != 0		693919	0					
ANR	694020	EqualityExpression	v != 0		693919	0		!=			
ANR	694021	Identifier	v		693919	0					
ANR	694022	PrimaryExpression	0		693919	1					
ANR	694023	Identifier	TRUE		693919	1					
ANR	694024	Identifier	FALSE		693919	2					
ANR	694025	ReturnStatement	return FALSE ;	182:2:5145:5157	693919	3	True				
ANR	694026	Identifier	FALSE		693919	0					
ANR	694027	ReturnType	static int		693919	1					
ANR	694028	Identifier	utf16le_is_mbc_ambiguous		693919	2					
ANR	694029	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end"		693919	3					
ANR	694030	Parameter	OnigCaseFoldType flag	155:25:4526:4546	693919	0	True				
ANR	694031	ParameterType	OnigCaseFoldType		693919	0					
ANR	694032	Identifier	flag		693919	1					
ANR	694033	Parameter	const UChar * * pp	155:48:4549:4564	693919	1	True				
ANR	694034	ParameterType	const UChar * *		693919	0					
ANR	694035	Identifier	pp		693919	1					
ANR	694036	Parameter	const UChar * end	156:4:4571:4586	693919	2	True				
ANR	694037	ParameterType	const UChar *		693919	0					
ANR	694038	Identifier	end		693919	1					
ANR	694039	CFGEntryNode	ENTRY		693919		True				
ANR	694040	CFGExitNode	EXIT		693919		True				
ANR	694041	Symbol	pp		693919						
ANR	694042	Symbol	flag		693919						
ANR	694043	Symbol	c		693919						
ANR	694044	Symbol	* pp		693919						
ANR	694045	Symbol	* EncLen_UTF16		693919						
ANR	694046	Symbol	TRUE		693919						
ANR	694047	Symbol	* ( p + 1 )		693919						
ANR	694048	Symbol	p		693919						
ANR	694049	Symbol	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		693919						
ANR	694050	Symbol	* * ( p + 1 )		693919						
ANR	694051	Symbol	v		693919						
ANR	694052	Symbol	BIT_CTYPE_LOWER		693919						
ANR	694053	Symbol	end		693919						
ANR	694054	Symbol	* p		693919						
ANR	694055	Symbol	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		693919						
ANR	694056	Symbol	BIT_CTYPE_UPPER		693919						
ANR	694057	Symbol	FALSE		693919						
ANR	694058	Symbol	* * p		693919						
ANR	694059	Symbol	EncLen_UTF16		693919						
ANR	694060	Function	utf16le_left_adjust_char_head	186:0:5169:5425							
ANR	694061	FunctionDef	"utf16le_left_adjust_char_head (const UChar * start , const UChar * s)"		694060	0					
ANR	694062	CompoundStatement		188:0:5249:5425	694060	0					
ANR	694063	IfStatement	if ( s <= start )		694060	0					
ANR	694064	Condition	s <= start	189:6:5257:5266	694060	0	True				
ANR	694065	RelationalExpression	s <= start		694060	0		<=			
ANR	694066	Identifier	s		694060	0					
ANR	694067	Identifier	start		694060	1					
ANR	694068	ReturnStatement	return ( UChar * ) s ;	189:18:5269:5286	694060	1	True				
ANR	694069	CastExpression	( UChar * ) s		694060	0					
ANR	694070	CastTarget	UChar *		694060	0					
ANR	694071	Identifier	s		694060	1					
ANR	694072	IfStatement	if ( ( s - start ) % 2 == 1 )		694060	1					
ANR	694073	Condition	( s - start ) % 2 == 1	191:6:5295:5314	694060	0	True				
ANR	694074	EqualityExpression	( s - start ) % 2 == 1		694060	0		==			
ANR	694075	MultiplicativeExpression	( s - start ) % 2		694060	0		%			
ANR	694076	AdditiveExpression	s - start		694060	0		-			
ANR	694077	Identifier	s		694060	0					
ANR	694078	Identifier	start		694060	1					
ANR	694079	PrimaryExpression	2		694060	1					
ANR	694080	PrimaryExpression	1		694060	1					
ANR	694081	CompoundStatement		4:28:67:67	694060	1					
ANR	694082	ExpressionStatement	s --	192:4:5323:5326	694060	0	True				
ANR	694083	PostIncDecOperationExpression	s --		694060	0					
ANR	694084	Identifier	s		694060	0					
ANR	694085	IncDec	--		694060	1					
ANR	694086	IfStatement	if ( UTF16_IS_SURROGATE_SECOND ( * ( s + 1 ) ) && s > start + 1 )		694060	2					
ANR	694087	Condition	UTF16_IS_SURROGATE_SECOND ( * ( s + 1 ) ) && s > start + 1	195:6:5339:5388	694060	0	True				
ANR	694088	AndExpression	UTF16_IS_SURROGATE_SECOND ( * ( s + 1 ) ) && s > start + 1		694060	0		&&			
ANR	694089	CallExpression	UTF16_IS_SURROGATE_SECOND ( * ( s + 1 ) )		694060	0					
ANR	694090	Callee	UTF16_IS_SURROGATE_SECOND		694060	0					
ANR	694091	Identifier	UTF16_IS_SURROGATE_SECOND		694060	0					
ANR	694092	ArgumentList	* ( s + 1 )		694060	1					
ANR	694093	Argument	* ( s + 1 )		694060	0					
ANR	694094	UnaryOperationExpression	* ( s + 1 )		694060	0					
ANR	694095	UnaryOperator	*		694060	0					
ANR	694096	AdditiveExpression	s + 1		694060	1		+			
ANR	694097	Identifier	s		694060	0					
ANR	694098	PrimaryExpression	1		694060	1					
ANR	694099	RelationalExpression	s > start + 1		694060	1		>			
ANR	694100	Identifier	s		694060	0					
ANR	694101	AdditiveExpression	start + 1		694060	1		+			
ANR	694102	Identifier	start		694060	0					
ANR	694103	PrimaryExpression	1		694060	1					
ANR	694104	ExpressionStatement	s -= 2	196:4:5395:5401	694060	1	True				
ANR	694105	AssignmentExpression	s -= 2		694060	0		-=			
ANR	694106	Identifier	s		694060	0					
ANR	694107	PrimaryExpression	2		694060	1					
ANR	694108	ReturnStatement	return ( UChar * ) s ;	198:2:5406:5423	694060	3	True				
ANR	694109	CastExpression	( UChar * ) s		694060	0					
ANR	694110	CastTarget	UChar *		694060	0					
ANR	694111	Identifier	s		694060	1					
ANR	694112	ReturnType	static UChar *		694060	1					
ANR	694113	Identifier	utf16le_left_adjust_char_head		694060	2					
ANR	694114	ParameterList	"const UChar * start , const UChar * s"		694060	3					
ANR	694115	Parameter	const UChar * start	187:30:5213:5230	694060	0	True				
ANR	694116	ParameterType	const UChar *		694060	0					
ANR	694117	Identifier	start		694060	1					
ANR	694118	Parameter	const UChar * s	187:50:5233:5246	694060	1	True				
ANR	694119	ParameterType	const UChar *		694060	0					
ANR	694120	Identifier	s		694060	1					
ANR	694121	CFGEntryNode	ENTRY		694060		True				
ANR	694122	CFGExitNode	EXIT		694060		True				
ANR	694123	Symbol	s		694060						
ANR	694124	Symbol	* ( s + 1 )		694060						
ANR	694125	Symbol	start		694060						
ANR	694126	Symbol	* s		694060						
ANR	694127	Symbol	UTF16_IS_SURROGATE_SECOND		694060						
ANR	694128	Function	utf16le_get_case_fold_codes_by_str	201:0:5428:5683							
ANR	694129	FunctionDef	"utf16le_get_case_fold_codes_by_str (OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ])"		694128	0					
ANR	694130	CompoundStatement		204:0:5573:5683	694128	0					
ANR	694131	ReturnStatement	"return onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF16_LE , flag , p , end , items ) ;"	205:2:5577:5681	694128	0	True				
ANR	694132	CallExpression	"onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF16_LE , flag , p , end , items )"		694128	0					
ANR	694133	Callee	onigenc_unicode_get_case_fold_codes_by_str		694128	0					
ANR	694134	Identifier	onigenc_unicode_get_case_fold_codes_by_str		694128	0					
ANR	694135	ArgumentList	ONIG_ENCODING_UTF16_LE		694128	1					
ANR	694136	Argument	ONIG_ENCODING_UTF16_LE		694128	0					
ANR	694137	Identifier	ONIG_ENCODING_UTF16_LE		694128	0					
ANR	694138	Argument	flag		694128	1					
ANR	694139	Identifier	flag		694128	0					
ANR	694140	Argument	p		694128	2					
ANR	694141	Identifier	p		694128	0					
ANR	694142	Argument	end		694128	3					
ANR	694143	Identifier	end		694128	0					
ANR	694144	Argument	items		694128	4					
ANR	694145	Identifier	items		694128	0					
ANR	694146	ReturnType	static int		694128	1					
ANR	694147	Identifier	utf16le_get_case_fold_codes_by_str		694128	2					
ANR	694148	ParameterList	"OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ]"		694128	3					
ANR	694149	Parameter	OnigCaseFoldType flag	202:35:5474:5494	694128	0	True				
ANR	694150	ParameterType	OnigCaseFoldType		694128	0					
ANR	694151	Identifier	flag		694128	1					
ANR	694152	Parameter	const OnigUChar * p	203:4:5501:5518	694128	1	True				
ANR	694153	ParameterType	const OnigUChar *		694128	0					
ANR	694154	Identifier	p		694128	1					
ANR	694155	Parameter	const OnigUChar * end	203:24:5521:5540	694128	2	True				
ANR	694156	ParameterType	const OnigUChar *		694128	0					
ANR	694157	Identifier	end		694128	1					
ANR	694158	Parameter	OnigCaseFoldCodeItem items [ ]	203:46:5543:5570	694128	3	True				
ANR	694159	ParameterType	OnigCaseFoldCodeItem [ ]		694128	0					
ANR	694160	Identifier	items		694128	1					
ANR	694161	CFGEntryNode	ENTRY		694128		True				
ANR	694162	CFGExitNode	EXIT		694128		True				
ANR	694163	Symbol	p		694128						
ANR	694164	Symbol	flag		694128						
ANR	694165	Symbol	onigenc_unicode_get_case_fold_codes_by_str		694128						
ANR	694166	Symbol	end		694128						
ANR	694167	Symbol	items		694128						
ANR	694168	Symbol	ONIG_ENCODING_UTF16_LE		694128						
ANR	694169	DeclStmt									
ANR	694170	Decl							OnigEncodingType	OnigEncodingType	OnigEncodingUTF16_LE
