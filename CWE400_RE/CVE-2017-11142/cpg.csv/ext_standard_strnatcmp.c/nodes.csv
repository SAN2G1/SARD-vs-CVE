command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2025251	File	data/converged/CVE-2017-11142_php-src/ext_standard_strnatcmp.c								
ANR	2025252	DeclStmt									
ANR	2025253	Decl							version	version	UNUSED
ANR	2025254	Function	compare_right	45:0:1379:2151							
ANR	2025255	FunctionDef	"compare_right (char const * * a , char const * aend , char const * * b , char const * bend)"		2025254	0					
ANR	2025256	CompoundStatement		47:0:1472:2151	2025254	0					
ANR	2025257	IdentifierDeclStatement	int bias = 0 ;	48:1:1475:1487	2025254	0	True				
ANR	2025258	IdentifierDecl	bias = 0		2025254	0					
ANR	2025259	IdentifierDeclType	int		2025254	0					
ANR	2025260	Identifier	bias		2025254	1					
ANR	2025261	AssignmentExpression	bias = 0		2025254	2		=			
ANR	2025262	Identifier	bias		2025254	0					
ANR	2025263	PrimaryExpression	0		2025254	1					
ANR	2025264	ForStatement	"for ( ; ; ( * a ) ++ , ( * b ) ++ )"		2025254	1					
ANR	2025265	Expression	"( * a ) ++ , ( * b ) ++"	54:8:1721:1734	2025254	0	True				
ANR	2025266	PostIncDecOperationExpression	( * a ) ++		2025254	0					
ANR	2025267	UnaryOperationExpression	* a		2025254	0					
ANR	2025268	UnaryOperator	*		2025254	0					
ANR	2025269	Identifier	a		2025254	1					
ANR	2025270	IncDec	++		2025254	1					
ANR	2025271	PostIncDecOperationExpression	( * b ) ++		2025254	1					
ANR	2025272	UnaryOperationExpression	* b		2025254	0					
ANR	2025273	UnaryOperator	*		2025254	0					
ANR	2025274	Identifier	b		2025254	1					
ANR	2025275	IncDec	++		2025254	1					
ANR	2025276	CompoundStatement		8:24:264:264	2025254	1					
ANR	2025277	IfStatement	if ( ( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) ) )		2025254	0					
ANR	2025278	Condition	( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )	55:6:1745:1849	2025254	0	True				
ANR	2025279	AndExpression	( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )		2025254	0		&&			
ANR	2025280	OrExpression	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )		2025254	0		||			
ANR	2025281	EqualityExpression	* a == aend		2025254	0		==			
ANR	2025282	UnaryOperationExpression	* a		2025254	0					
ANR	2025283	UnaryOperator	*		2025254	0					
ANR	2025284	Identifier	a		2025254	1					
ANR	2025285	Identifier	aend		2025254	1					
ANR	2025286	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * a )		2025254	1					
ANR	2025287	UnaryOperator	!		2025254	0					
ANR	2025288	CallExpression	isdigit ( ( int ) ( unsigned char ) * * a )		2025254	1					
ANR	2025289	Callee	isdigit		2025254	0					
ANR	2025290	Identifier	isdigit		2025254	0					
ANR	2025291	ArgumentList	( int ) ( unsigned char ) * * a		2025254	1					
ANR	2025292	Argument	( int ) ( unsigned char ) * * a		2025254	0					
ANR	2025293	CastExpression	( int ) ( unsigned char ) * * a		2025254	0					
ANR	2025294	CastTarget	int		2025254	0					
ANR	2025295	CastExpression	( unsigned char ) * * a		2025254	1					
ANR	2025296	CastTarget	unsigned char		2025254	0					
ANR	2025297	UnaryOperationExpression	* * a		2025254	1					
ANR	2025298	UnaryOperator	*		2025254	0					
ANR	2025299	UnaryOperationExpression	* a		2025254	1					
ANR	2025300	UnaryOperator	*		2025254	0					
ANR	2025301	Identifier	a		2025254	1					
ANR	2025302	OrExpression	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )		2025254	1		||			
ANR	2025303	EqualityExpression	* b == bend		2025254	0		==			
ANR	2025304	UnaryOperationExpression	* b		2025254	0					
ANR	2025305	UnaryOperator	*		2025254	0					
ANR	2025306	Identifier	b		2025254	1					
ANR	2025307	Identifier	bend		2025254	1					
ANR	2025308	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * b )		2025254	1					
ANR	2025309	UnaryOperator	!		2025254	0					
ANR	2025310	CallExpression	isdigit ( ( int ) ( unsigned char ) * * b )		2025254	1					
ANR	2025311	Callee	isdigit		2025254	0					
ANR	2025312	Identifier	isdigit		2025254	0					
ANR	2025313	ArgumentList	( int ) ( unsigned char ) * * b		2025254	1					
ANR	2025314	Argument	( int ) ( unsigned char ) * * b		2025254	0					
ANR	2025315	CastExpression	( int ) ( unsigned char ) * * b		2025254	0					
ANR	2025316	CastTarget	int		2025254	0					
ANR	2025317	CastExpression	( unsigned char ) * * b		2025254	1					
ANR	2025318	CastTarget	unsigned char		2025254	0					
ANR	2025319	UnaryOperationExpression	* * b		2025254	1					
ANR	2025320	UnaryOperator	*		2025254	0					
ANR	2025321	UnaryOperationExpression	* b		2025254	1					
ANR	2025322	UnaryOperator	*		2025254	0					
ANR	2025323	Identifier	b		2025254	1					
ANR	2025324	ReturnStatement	return bias ;	57:3:1855:1866	2025254	1	True				
ANR	2025325	Identifier	bias		2025254	0					
ANR	2025326	ElseStatement	else		2025254	0					
ANR	2025327	IfStatement	if ( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) )		2025254	0					
ANR	2025328	Condition	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )	58:11:1879:1925	2025254	0	True				
ANR	2025329	OrExpression	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )		2025254	0		||			
ANR	2025330	EqualityExpression	* a == aend		2025254	0		==			
ANR	2025331	UnaryOperationExpression	* a		2025254	0					
ANR	2025332	UnaryOperator	*		2025254	0					
ANR	2025333	Identifier	a		2025254	1					
ANR	2025334	Identifier	aend		2025254	1					
ANR	2025335	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * a )		2025254	1					
ANR	2025336	UnaryOperator	!		2025254	0					
ANR	2025337	CallExpression	isdigit ( ( int ) ( unsigned char ) * * a )		2025254	1					
ANR	2025338	Callee	isdigit		2025254	0					
ANR	2025339	Identifier	isdigit		2025254	0					
ANR	2025340	ArgumentList	( int ) ( unsigned char ) * * a		2025254	1					
ANR	2025341	Argument	( int ) ( unsigned char ) * * a		2025254	0					
ANR	2025342	CastExpression	( int ) ( unsigned char ) * * a		2025254	0					
ANR	2025343	CastTarget	int		2025254	0					
ANR	2025344	CastExpression	( unsigned char ) * * a		2025254	1					
ANR	2025345	CastTarget	unsigned char		2025254	0					
ANR	2025346	UnaryOperationExpression	* * a		2025254	1					
ANR	2025347	UnaryOperator	*		2025254	0					
ANR	2025348	UnaryOperationExpression	* a		2025254	1					
ANR	2025349	UnaryOperator	*		2025254	0					
ANR	2025350	Identifier	a		2025254	1					
ANR	2025351	ReturnStatement	return - 1 ;	59:3:1931:1940	2025254	1	True				
ANR	2025352	UnaryOperationExpression	- 1		2025254	0					
ANR	2025353	UnaryOperator	-		2025254	0					
ANR	2025354	PrimaryExpression	1		2025254	1					
ANR	2025355	ElseStatement	else		2025254	0					
ANR	2025356	IfStatement	if ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )		2025254	0					
ANR	2025357	Condition	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )	60:11:1953:1999	2025254	0	True				
ANR	2025358	OrExpression	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )		2025254	0		||			
ANR	2025359	EqualityExpression	* b == bend		2025254	0		==			
ANR	2025360	UnaryOperationExpression	* b		2025254	0					
ANR	2025361	UnaryOperator	*		2025254	0					
ANR	2025362	Identifier	b		2025254	1					
ANR	2025363	Identifier	bend		2025254	1					
ANR	2025364	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * b )		2025254	1					
ANR	2025365	UnaryOperator	!		2025254	0					
ANR	2025366	CallExpression	isdigit ( ( int ) ( unsigned char ) * * b )		2025254	1					
ANR	2025367	Callee	isdigit		2025254	0					
ANR	2025368	Identifier	isdigit		2025254	0					
ANR	2025369	ArgumentList	( int ) ( unsigned char ) * * b		2025254	1					
ANR	2025370	Argument	( int ) ( unsigned char ) * * b		2025254	0					
ANR	2025371	CastExpression	( int ) ( unsigned char ) * * b		2025254	0					
ANR	2025372	CastTarget	int		2025254	0					
ANR	2025373	CastExpression	( unsigned char ) * * b		2025254	1					
ANR	2025374	CastTarget	unsigned char		2025254	0					
ANR	2025375	UnaryOperationExpression	* * b		2025254	1					
ANR	2025376	UnaryOperator	*		2025254	0					
ANR	2025377	UnaryOperationExpression	* b		2025254	1					
ANR	2025378	UnaryOperator	*		2025254	0					
ANR	2025379	Identifier	b		2025254	1					
ANR	2025380	ReturnStatement	return + 1 ;	61:3:2005:2014	2025254	1	True				
ANR	2025381	UnaryOperationExpression	+ 1		2025254	0					
ANR	2025382	UnaryOperator	+		2025254	0					
ANR	2025383	PrimaryExpression	1		2025254	1					
ANR	2025384	ElseStatement	else		2025254	0					
ANR	2025385	IfStatement	if ( * * a < * * b )		2025254	0					
ANR	2025386	Condition	* * a < * * b	62:11:2027:2035	2025254	0	True				
ANR	2025387	RelationalExpression	* * a < * * b		2025254	0		<			
ANR	2025388	UnaryOperationExpression	* * a		2025254	0					
ANR	2025389	UnaryOperator	*		2025254	0					
ANR	2025390	UnaryOperationExpression	* a		2025254	1					
ANR	2025391	UnaryOperator	*		2025254	0					
ANR	2025392	Identifier	a		2025254	1					
ANR	2025393	UnaryOperationExpression	* * b		2025254	1					
ANR	2025394	UnaryOperator	*		2025254	0					
ANR	2025395	UnaryOperationExpression	* b		2025254	1					
ANR	2025396	UnaryOperator	*		2025254	0					
ANR	2025397	Identifier	b		2025254	1					
ANR	2025398	CompoundStatement		16:22:565:565	2025254	1					
ANR	2025399	IfStatement	if ( ! bias )		2025254	0					
ANR	2025400	Condition	! bias	63:7:2047:2051	2025254	0	True				
ANR	2025401	UnaryOperationExpression	! bias		2025254	0					
ANR	2025402	UnaryOperator	!		2025254	0					
ANR	2025403	Identifier	bias		2025254	1					
ANR	2025404	ExpressionStatement	bias = - 1	64:4:2058:2067	2025254	1	True				
ANR	2025405	AssignmentExpression	bias = - 1		2025254	0		=			
ANR	2025406	Identifier	bias		2025254	0					
ANR	2025407	UnaryOperationExpression	- 1		2025254	1					
ANR	2025408	UnaryOperator	-		2025254	0					
ANR	2025409	PrimaryExpression	1		2025254	1					
ANR	2025410	ElseStatement	else		2025254	0					
ANR	2025411	IfStatement	if ( * * a > * * b )		2025254	0					
ANR	2025412	Condition	* * a > * * b	65:13:2082:2090	2025254	0	True				
ANR	2025413	RelationalExpression	* * a > * * b		2025254	0		>			
ANR	2025414	UnaryOperationExpression	* * a		2025254	0					
ANR	2025415	UnaryOperator	*		2025254	0					
ANR	2025416	UnaryOperationExpression	* a		2025254	1					
ANR	2025417	UnaryOperator	*		2025254	0					
ANR	2025418	Identifier	a		2025254	1					
ANR	2025419	UnaryOperationExpression	* * b		2025254	1					
ANR	2025420	UnaryOperator	*		2025254	0					
ANR	2025421	UnaryOperationExpression	* b		2025254	1					
ANR	2025422	UnaryOperator	*		2025254	0					
ANR	2025423	Identifier	b		2025254	1					
ANR	2025424	CompoundStatement		19:24:620:620	2025254	1					
ANR	2025425	IfStatement	if ( ! bias )		2025254	0					
ANR	2025426	Condition	! bias	66:7:2102:2106	2025254	0	True				
ANR	2025427	UnaryOperationExpression	! bias		2025254	0					
ANR	2025428	UnaryOperator	!		2025254	0					
ANR	2025429	Identifier	bias		2025254	1					
ANR	2025430	ExpressionStatement	bias = + 1	67:4:2113:2122	2025254	1	True				
ANR	2025431	AssignmentExpression	bias = + 1		2025254	0		=			
ANR	2025432	Identifier	bias		2025254	0					
ANR	2025433	UnaryOperationExpression	+ 1		2025254	1					
ANR	2025434	UnaryOperator	+		2025254	0					
ANR	2025435	PrimaryExpression	1		2025254	1					
ANR	2025436	ReturnStatement	return 0 ;	71:5:2141:2149	2025254	2	True				
ANR	2025437	PrimaryExpression	0		2025254	0					
ANR	2025438	ReturnType	static int		2025254	1					
ANR	2025439	Identifier	compare_right		2025254	2					
ANR	2025440	ParameterList	"char const * * a , char const * aend , char const * * b , char const * bend"		2025254	3					
ANR	2025441	Parameter	char const * * a	46:14:1404:1417	2025254	0	True				
ANR	2025442	ParameterType	char const * *		2025254	0					
ANR	2025443	Identifier	a		2025254	1					
ANR	2025444	Parameter	char const * aend	46:30:1420:1435	2025254	1	True				
ANR	2025445	ParameterType	char const *		2025254	0					
ANR	2025446	Identifier	aend		2025254	1					
ANR	2025447	Parameter	char const * * b	46:48:1438:1451	2025254	2	True				
ANR	2025448	ParameterType	char const * *		2025254	0					
ANR	2025449	Identifier	b		2025254	1					
ANR	2025450	Parameter	char const * bend	46:64:1454:1469	2025254	3	True				
ANR	2025451	ParameterType	char const *		2025254	0					
ANR	2025452	Identifier	bend		2025254	1					
ANR	2025453	CFGEntryNode	ENTRY		2025254		True				
ANR	2025454	CFGExitNode	EXIT		2025254		True				
ANR	2025455	InfiniteForNode	true		2025254		True				
ANR	2025456	Symbol	a		2025254						
ANR	2025457	Symbol	b		2025254						
ANR	2025458	Symbol	aend		2025254						
ANR	2025459	Symbol	bend		2025254						
ANR	2025460	Symbol	bias		2025254						
ANR	2025461	Symbol	* * b		2025254						
ANR	2025462	Symbol	* * a		2025254						
ANR	2025463	Symbol	* a		2025254						
ANR	2025464	Symbol	* b		2025254						
ANR	2025465	Symbol	isdigit		2025254						
ANR	2025466	Function	compare_left	77:0:2188:2779							
ANR	2025467	FunctionDef	"compare_left (char const * * a , char const * aend , char const * * b , char const * bend)"		2025466	0					
ANR	2025468	CompoundStatement		79:0:2280:2779	2025466	0					
ANR	2025469	ForStatement	"for ( ; ; ( * a ) ++ , ( * b ) ++ )"		2025466	0					
ANR	2025470	Expression	"( * a ) ++ , ( * b ) ++"	82:8:2385:2398	2025466	0	True				
ANR	2025471	PostIncDecOperationExpression	( * a ) ++		2025466	0					
ANR	2025472	UnaryOperationExpression	* a		2025466	0					
ANR	2025473	UnaryOperator	*		2025466	0					
ANR	2025474	Identifier	a		2025466	1					
ANR	2025475	IncDec	++		2025466	1					
ANR	2025476	PostIncDecOperationExpression	( * b ) ++		2025466	1					
ANR	2025477	UnaryOperationExpression	* b		2025466	0					
ANR	2025478	UnaryOperator	*		2025466	0					
ANR	2025479	Identifier	b		2025466	1					
ANR	2025480	IncDec	++		2025466	1					
ANR	2025481	CompoundStatement		4:24:120:120	2025466	1					
ANR	2025482	IfStatement	if ( ( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) ) )		2025466	0					
ANR	2025483	Condition	( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )	83:6:2409:2513	2025466	0	True				
ANR	2025484	AndExpression	( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )		2025466	0		&&			
ANR	2025485	OrExpression	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )		2025466	0		||			
ANR	2025486	EqualityExpression	* a == aend		2025466	0		==			
ANR	2025487	UnaryOperationExpression	* a		2025466	0					
ANR	2025488	UnaryOperator	*		2025466	0					
ANR	2025489	Identifier	a		2025466	1					
ANR	2025490	Identifier	aend		2025466	1					
ANR	2025491	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * a )		2025466	1					
ANR	2025492	UnaryOperator	!		2025466	0					
ANR	2025493	CallExpression	isdigit ( ( int ) ( unsigned char ) * * a )		2025466	1					
ANR	2025494	Callee	isdigit		2025466	0					
ANR	2025495	Identifier	isdigit		2025466	0					
ANR	2025496	ArgumentList	( int ) ( unsigned char ) * * a		2025466	1					
ANR	2025497	Argument	( int ) ( unsigned char ) * * a		2025466	0					
ANR	2025498	CastExpression	( int ) ( unsigned char ) * * a		2025466	0					
ANR	2025499	CastTarget	int		2025466	0					
ANR	2025500	CastExpression	( unsigned char ) * * a		2025466	1					
ANR	2025501	CastTarget	unsigned char		2025466	0					
ANR	2025502	UnaryOperationExpression	* * a		2025466	1					
ANR	2025503	UnaryOperator	*		2025466	0					
ANR	2025504	UnaryOperationExpression	* a		2025466	1					
ANR	2025505	UnaryOperator	*		2025466	0					
ANR	2025506	Identifier	a		2025466	1					
ANR	2025507	OrExpression	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )		2025466	1		||			
ANR	2025508	EqualityExpression	* b == bend		2025466	0		==			
ANR	2025509	UnaryOperationExpression	* b		2025466	0					
ANR	2025510	UnaryOperator	*		2025466	0					
ANR	2025511	Identifier	b		2025466	1					
ANR	2025512	Identifier	bend		2025466	1					
ANR	2025513	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * b )		2025466	1					
ANR	2025514	UnaryOperator	!		2025466	0					
ANR	2025515	CallExpression	isdigit ( ( int ) ( unsigned char ) * * b )		2025466	1					
ANR	2025516	Callee	isdigit		2025466	0					
ANR	2025517	Identifier	isdigit		2025466	0					
ANR	2025518	ArgumentList	( int ) ( unsigned char ) * * b		2025466	1					
ANR	2025519	Argument	( int ) ( unsigned char ) * * b		2025466	0					
ANR	2025520	CastExpression	( int ) ( unsigned char ) * * b		2025466	0					
ANR	2025521	CastTarget	int		2025466	0					
ANR	2025522	CastExpression	( unsigned char ) * * b		2025466	1					
ANR	2025523	CastTarget	unsigned char		2025466	0					
ANR	2025524	UnaryOperationExpression	* * b		2025466	1					
ANR	2025525	UnaryOperator	*		2025466	0					
ANR	2025526	UnaryOperationExpression	* b		2025466	1					
ANR	2025527	UnaryOperator	*		2025466	0					
ANR	2025528	Identifier	b		2025466	1					
ANR	2025529	ReturnStatement	return 0 ;	85:3:2519:2527	2025466	1	True				
ANR	2025530	PrimaryExpression	0		2025466	0					
ANR	2025531	ElseStatement	else		2025466	0					
ANR	2025532	IfStatement	if ( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) )		2025466	0					
ANR	2025533	Condition	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )	86:11:2540:2586	2025466	0	True				
ANR	2025534	OrExpression	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )		2025466	0		||			
ANR	2025535	EqualityExpression	* a == aend		2025466	0		==			
ANR	2025536	UnaryOperationExpression	* a		2025466	0					
ANR	2025537	UnaryOperator	*		2025466	0					
ANR	2025538	Identifier	a		2025466	1					
ANR	2025539	Identifier	aend		2025466	1					
ANR	2025540	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * a )		2025466	1					
ANR	2025541	UnaryOperator	!		2025466	0					
ANR	2025542	CallExpression	isdigit ( ( int ) ( unsigned char ) * * a )		2025466	1					
ANR	2025543	Callee	isdigit		2025466	0					
ANR	2025544	Identifier	isdigit		2025466	0					
ANR	2025545	ArgumentList	( int ) ( unsigned char ) * * a		2025466	1					
ANR	2025546	Argument	( int ) ( unsigned char ) * * a		2025466	0					
ANR	2025547	CastExpression	( int ) ( unsigned char ) * * a		2025466	0					
ANR	2025548	CastTarget	int		2025466	0					
ANR	2025549	CastExpression	( unsigned char ) * * a		2025466	1					
ANR	2025550	CastTarget	unsigned char		2025466	0					
ANR	2025551	UnaryOperationExpression	* * a		2025466	1					
ANR	2025552	UnaryOperator	*		2025466	0					
ANR	2025553	UnaryOperationExpression	* a		2025466	1					
ANR	2025554	UnaryOperator	*		2025466	0					
ANR	2025555	Identifier	a		2025466	1					
ANR	2025556	ReturnStatement	return - 1 ;	87:3:2592:2601	2025466	1	True				
ANR	2025557	UnaryOperationExpression	- 1		2025466	0					
ANR	2025558	UnaryOperator	-		2025466	0					
ANR	2025559	PrimaryExpression	1		2025466	1					
ANR	2025560	ElseStatement	else		2025466	0					
ANR	2025561	IfStatement	if ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )		2025466	0					
ANR	2025562	Condition	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )	88:11:2614:2660	2025466	0	True				
ANR	2025563	OrExpression	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )		2025466	0		||			
ANR	2025564	EqualityExpression	* b == bend		2025466	0		==			
ANR	2025565	UnaryOperationExpression	* b		2025466	0					
ANR	2025566	UnaryOperator	*		2025466	0					
ANR	2025567	Identifier	b		2025466	1					
ANR	2025568	Identifier	bend		2025466	1					
ANR	2025569	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * b )		2025466	1					
ANR	2025570	UnaryOperator	!		2025466	0					
ANR	2025571	CallExpression	isdigit ( ( int ) ( unsigned char ) * * b )		2025466	1					
ANR	2025572	Callee	isdigit		2025466	0					
ANR	2025573	Identifier	isdigit		2025466	0					
ANR	2025574	ArgumentList	( int ) ( unsigned char ) * * b		2025466	1					
ANR	2025575	Argument	( int ) ( unsigned char ) * * b		2025466	0					
ANR	2025576	CastExpression	( int ) ( unsigned char ) * * b		2025466	0					
ANR	2025577	CastTarget	int		2025466	0					
ANR	2025578	CastExpression	( unsigned char ) * * b		2025466	1					
ANR	2025579	CastTarget	unsigned char		2025466	0					
ANR	2025580	UnaryOperationExpression	* * b		2025466	1					
ANR	2025581	UnaryOperator	*		2025466	0					
ANR	2025582	UnaryOperationExpression	* b		2025466	1					
ANR	2025583	UnaryOperator	*		2025466	0					
ANR	2025584	Identifier	b		2025466	1					
ANR	2025585	ReturnStatement	return + 1 ;	89:3:2666:2675	2025466	1	True				
ANR	2025586	UnaryOperationExpression	+ 1		2025466	0					
ANR	2025587	UnaryOperator	+		2025466	0					
ANR	2025588	PrimaryExpression	1		2025466	1					
ANR	2025589	ElseStatement	else		2025466	0					
ANR	2025590	IfStatement	if ( * * a < * * b )		2025466	0					
ANR	2025591	Condition	* * a < * * b	90:12:2689:2697	2025466	0	True				
ANR	2025592	RelationalExpression	* * a < * * b		2025466	0		<			
ANR	2025593	UnaryOperationExpression	* * a		2025466	0					
ANR	2025594	UnaryOperator	*		2025466	0					
ANR	2025595	UnaryOperationExpression	* a		2025466	1					
ANR	2025596	UnaryOperator	*		2025466	0					
ANR	2025597	Identifier	a		2025466	1					
ANR	2025598	UnaryOperationExpression	* * b		2025466	1					
ANR	2025599	UnaryOperator	*		2025466	0					
ANR	2025600	UnaryOperationExpression	* b		2025466	1					
ANR	2025601	UnaryOperator	*		2025466	0					
ANR	2025602	Identifier	b		2025466	1					
ANR	2025603	ReturnStatement	return - 1 ;	91:4:2704:2713	2025466	1	True				
ANR	2025604	UnaryOperationExpression	- 1		2025466	0					
ANR	2025605	UnaryOperator	-		2025466	0					
ANR	2025606	PrimaryExpression	1		2025466	1					
ANR	2025607	ElseStatement	else		2025466	0					
ANR	2025608	IfStatement	if ( * * a > * * b )		2025466	0					
ANR	2025609	Condition	* * a > * * b	92:12:2727:2735	2025466	0	True				
ANR	2025610	RelationalExpression	* * a > * * b		2025466	0		>			
ANR	2025611	UnaryOperationExpression	* * a		2025466	0					
ANR	2025612	UnaryOperator	*		2025466	0					
ANR	2025613	UnaryOperationExpression	* a		2025466	1					
ANR	2025614	UnaryOperator	*		2025466	0					
ANR	2025615	Identifier	a		2025466	1					
ANR	2025616	UnaryOperationExpression	* * b		2025466	1					
ANR	2025617	UnaryOperator	*		2025466	0					
ANR	2025618	UnaryOperationExpression	* b		2025466	1					
ANR	2025619	UnaryOperator	*		2025466	0					
ANR	2025620	Identifier	b		2025466	1					
ANR	2025621	ReturnStatement	return + 1 ;	93:4:2742:2751	2025466	1	True				
ANR	2025622	UnaryOperationExpression	+ 1		2025466	0					
ANR	2025623	UnaryOperator	+		2025466	0					
ANR	2025624	PrimaryExpression	1		2025466	1					
ANR	2025625	ReturnStatement	return 0 ;	96:5:2769:2777	2025466	1	True				
ANR	2025626	PrimaryExpression	0		2025466	0					
ANR	2025627	ReturnType	static int		2025466	1					
ANR	2025628	Identifier	compare_left		2025466	2					
ANR	2025629	ParameterList	"char const * * a , char const * aend , char const * * b , char const * bend"		2025466	3					
ANR	2025630	Parameter	char const * * a	78:13:2212:2225	2025466	0	True				
ANR	2025631	ParameterType	char const * *		2025466	0					
ANR	2025632	Identifier	a		2025466	1					
ANR	2025633	Parameter	char const * aend	78:29:2228:2243	2025466	1	True				
ANR	2025634	ParameterType	char const *		2025466	0					
ANR	2025635	Identifier	aend		2025466	1					
ANR	2025636	Parameter	char const * * b	78:47:2246:2259	2025466	2	True				
ANR	2025637	ParameterType	char const * *		2025466	0					
ANR	2025638	Identifier	b		2025466	1					
ANR	2025639	Parameter	char const * bend	78:63:2262:2277	2025466	3	True				
ANR	2025640	ParameterType	char const *		2025466	0					
ANR	2025641	Identifier	bend		2025466	1					
ANR	2025642	CFGEntryNode	ENTRY		2025466		True				
ANR	2025643	CFGExitNode	EXIT		2025466		True				
ANR	2025644	InfiniteForNode	true		2025466		True				
ANR	2025645	Symbol	a		2025466						
ANR	2025646	Symbol	b		2025466						
ANR	2025647	Symbol	aend		2025466						
ANR	2025648	Symbol	bend		2025466						
ANR	2025649	Symbol	* * b		2025466						
ANR	2025650	Symbol	* * a		2025466						
ANR	2025651	Symbol	* a		2025466						
ANR	2025652	Symbol	* b		2025466						
ANR	2025653	Symbol	isdigit		2025466						
ANR	2025654	Function	strnatcmp_ex	102:0:2816:4538							
ANR	2025655	FunctionDef	"strnatcmp_ex (char const * a , size_t a_len , char const * b , size_t b_len , int fold_case)"		2025654	0					
ANR	2025656	CompoundStatement		103:0:2913:4538	2025654	0					
ANR	2025657	IdentifierDeclStatement	"unsigned char ca , cb ;"	104:1:2916:2936	2025654	0	True				
ANR	2025658	IdentifierDecl	ca		2025654	0					
ANR	2025659	IdentifierDeclType	unsigned char		2025654	0					
ANR	2025660	Identifier	ca		2025654	1					
ANR	2025661	IdentifierDecl	cb		2025654	1					
ANR	2025662	IdentifierDeclType	unsigned char		2025654	0					
ANR	2025663	Identifier	cb		2025654	1					
ANR	2025664	IdentifierDeclStatement	"char const * ap , * bp ;"	105:1:2939:2958	2025654	1	True				
ANR	2025665	IdentifierDecl	* ap		2025654	0					
ANR	2025666	IdentifierDeclType	char const *		2025654	0					
ANR	2025667	Identifier	ap		2025654	1					
ANR	2025668	IdentifierDecl	* bp		2025654	1					
ANR	2025669	IdentifierDeclType	char const *		2025654	0					
ANR	2025670	Identifier	bp		2025654	1					
ANR	2025671	IdentifierDeclStatement	"char const * aend = a + a_len , * bend = b + b_len ;"	106:1:2961:3014	2025654	2	True				
ANR	2025672	IdentifierDecl	* aend = a + a_len		2025654	0					
ANR	2025673	IdentifierDeclType	char const *		2025654	0					
ANR	2025674	Identifier	aend		2025654	1					
ANR	2025675	AssignmentExpression	* aend = a + a_len		2025654	2		=			
ANR	2025676	Identifier	aend		2025654	0					
ANR	2025677	AdditiveExpression	a + a_len		2025654	1		+			
ANR	2025678	Identifier	a		2025654	0					
ANR	2025679	Identifier	a_len		2025654	1					
ANR	2025680	IdentifierDecl	* bend = b + b_len		2025654	1					
ANR	2025681	IdentifierDeclType	char const *		2025654	0					
ANR	2025682	Identifier	bend		2025654	1					
ANR	2025683	AssignmentExpression	* bend = b + b_len		2025654	2		=			
ANR	2025684	Identifier	bend		2025654	0					
ANR	2025685	AdditiveExpression	b + b_len		2025654	1		+			
ANR	2025686	Identifier	b		2025654	0					
ANR	2025687	Identifier	b_len		2025654	1					
ANR	2025688	IdentifierDeclStatement	"int fractional , result ;"	108:1:3017:3039	2025654	3	True				
ANR	2025689	IdentifierDecl	fractional		2025654	0					
ANR	2025690	IdentifierDeclType	int		2025654	0					
ANR	2025691	Identifier	fractional		2025654	1					
ANR	2025692	IdentifierDecl	result		2025654	1					
ANR	2025693	IdentifierDeclType	int		2025654	0					
ANR	2025694	Identifier	result		2025654	1					
ANR	2025695	IdentifierDeclStatement	short leading = 1 ;	109:1:3042:3059	2025654	4	True				
ANR	2025696	IdentifierDecl	leading = 1		2025654	0					
ANR	2025697	IdentifierDeclType	short		2025654	0					
ANR	2025698	Identifier	leading		2025654	1					
ANR	2025699	AssignmentExpression	leading = 1		2025654	2		=			
ANR	2025700	Identifier	leading		2025654	0					
ANR	2025701	PrimaryExpression	1		2025654	1					
ANR	2025702	IfStatement	if ( a_len == 0 || b_len == 0 )		2025654	5					
ANR	2025703	Condition	a_len == 0 || b_len == 0	111:5:3067:3090	2025654	0	True				
ANR	2025704	OrExpression	a_len == 0 || b_len == 0		2025654	0		||			
ANR	2025705	EqualityExpression	a_len == 0		2025654	0		==			
ANR	2025706	Identifier	a_len		2025654	0					
ANR	2025707	PrimaryExpression	0		2025654	1					
ANR	2025708	EqualityExpression	b_len == 0		2025654	1		==			
ANR	2025709	Identifier	b_len		2025654	0					
ANR	2025710	PrimaryExpression	0		2025654	1					
ANR	2025711	ReturnStatement	return a_len - b_len ;	112:2:3095:3115	2025654	1	True				
ANR	2025712	AdditiveExpression	a_len - b_len		2025654	0		-			
ANR	2025713	Identifier	a_len		2025654	0					
ANR	2025714	Identifier	b_len		2025654	1					
ANR	2025715	ExpressionStatement	ap = a	114:1:3119:3125	2025654	6	True				
ANR	2025716	AssignmentExpression	ap = a		2025654	0		=			
ANR	2025717	Identifier	ap		2025654	0					
ANR	2025718	Identifier	a		2025654	1					
ANR	2025719	ExpressionStatement	bp = b	115:1:3128:3134	2025654	7	True				
ANR	2025720	AssignmentExpression	bp = b		2025654	0		=			
ANR	2025721	Identifier	bp		2025654	0					
ANR	2025722	Identifier	b		2025654	1					
ANR	2025723	WhileStatement	while ( 1 )		2025654	8					
ANR	2025724	Condition	1	116:8:3144:3144	2025654	0	True				
ANR	2025725	PrimaryExpression	1		2025654	0					
ANR	2025726	CompoundStatement		14:11:233:233	2025654	1					
ANR	2025727	ExpressionStatement	ca = * ap	117:2:3151:3159	2025654	0	True				
ANR	2025728	AssignmentExpression	ca = * ap		2025654	0		=			
ANR	2025729	Identifier	ca		2025654	0					
ANR	2025730	UnaryOperationExpression	* ap		2025654	1					
ANR	2025731	UnaryOperator	*		2025654	0					
ANR	2025732	Identifier	ap		2025654	1					
ANR	2025733	ExpressionStatement	cb = * bp	117:12:3161:3169	2025654	1	True				
ANR	2025734	AssignmentExpression	cb = * bp		2025654	0		=			
ANR	2025735	Identifier	cb		2025654	0					
ANR	2025736	UnaryOperationExpression	* bp		2025654	1					
ANR	2025737	UnaryOperator	*		2025654	0					
ANR	2025738	Identifier	bp		2025654	1					
ANR	2025739	WhileStatement	while ( leading && ca == '0' && ( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) ) )		2025654	2					
ANR	2025740	Condition	leading && ca == '0' && ( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )	120:9:3213:3289	2025654	0	True				
ANR	2025741	AndExpression	leading && ca == '0' && ( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )		2025654	0		&&			
ANR	2025742	Identifier	leading		2025654	0					
ANR	2025743	AndExpression	ca == '0' && ( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )		2025654	1		&&			
ANR	2025744	EqualityExpression	ca == '0'		2025654	0		==			
ANR	2025745	Identifier	ca		2025654	0					
ANR	2025746	PrimaryExpression	'0'		2025654	1					
ANR	2025747	AndExpression	( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )		2025654	1		&&			
ANR	2025748	RelationalExpression	ap + 1 < aend		2025654	0		<			
ANR	2025749	AdditiveExpression	ap + 1		2025654	0		+			
ANR	2025750	Identifier	ap		2025654	0					
ANR	2025751	PrimaryExpression	1		2025654	1					
ANR	2025752	Identifier	aend		2025654	1					
ANR	2025753	CallExpression	isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )		2025654	1					
ANR	2025754	Callee	isdigit		2025654	0					
ANR	2025755	Identifier	isdigit		2025654	0					
ANR	2025756	ArgumentList	( int ) ( unsigned char ) * ( ap + 1 )		2025654	1					
ANR	2025757	Argument	( int ) ( unsigned char ) * ( ap + 1 )		2025654	0					
ANR	2025758	CastExpression	( int ) ( unsigned char ) * ( ap + 1 )		2025654	0					
ANR	2025759	CastTarget	int		2025654	0					
ANR	2025760	CastExpression	( unsigned char ) * ( ap + 1 )		2025654	1					
ANR	2025761	CastTarget	unsigned char		2025654	0					
ANR	2025762	UnaryOperationExpression	* ( ap + 1 )		2025654	1					
ANR	2025763	UnaryOperator	*		2025654	0					
ANR	2025764	AdditiveExpression	ap + 1		2025654	1		+			
ANR	2025765	Identifier	ap		2025654	0					
ANR	2025766	PrimaryExpression	1		2025654	1					
ANR	2025767	CompoundStatement		18:88:378:378	2025654	1					
ANR	2025768	ExpressionStatement	ca = * ++ ap	121:3:3297:3307	2025654	0	True				
ANR	2025769	AssignmentExpression	ca = * ++ ap		2025654	0		=			
ANR	2025770	Identifier	ca		2025654	0					
ANR	2025771	UnaryOperationExpression	* ++ ap		2025654	1					
ANR	2025772	UnaryOperator	*		2025654	0					
ANR	2025773	UnaryExpression	++ ap		2025654	1					
ANR	2025774	IncDec	++		2025654	0					
ANR	2025775	Identifier	ap		2025654	1					
ANR	2025776	WhileStatement	while ( leading && cb == '0' && ( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) ) )		2025654	3					
ANR	2025777	Condition	leading && cb == '0' && ( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )	124:9:3323:3399	2025654	0	True				
ANR	2025778	AndExpression	leading && cb == '0' && ( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )		2025654	0		&&			
ANR	2025779	Identifier	leading		2025654	0					
ANR	2025780	AndExpression	cb == '0' && ( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )		2025654	1		&&			
ANR	2025781	EqualityExpression	cb == '0'		2025654	0		==			
ANR	2025782	Identifier	cb		2025654	0					
ANR	2025783	PrimaryExpression	'0'		2025654	1					
ANR	2025784	AndExpression	( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )		2025654	1		&&			
ANR	2025785	RelationalExpression	bp + 1 < bend		2025654	0		<			
ANR	2025786	AdditiveExpression	bp + 1		2025654	0		+			
ANR	2025787	Identifier	bp		2025654	0					
ANR	2025788	PrimaryExpression	1		2025654	1					
ANR	2025789	Identifier	bend		2025654	1					
ANR	2025790	CallExpression	isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )		2025654	1					
ANR	2025791	Callee	isdigit		2025654	0					
ANR	2025792	Identifier	isdigit		2025654	0					
ANR	2025793	ArgumentList	( int ) ( unsigned char ) * ( bp + 1 )		2025654	1					
ANR	2025794	Argument	( int ) ( unsigned char ) * ( bp + 1 )		2025654	0					
ANR	2025795	CastExpression	( int ) ( unsigned char ) * ( bp + 1 )		2025654	0					
ANR	2025796	CastTarget	int		2025654	0					
ANR	2025797	CastExpression	( unsigned char ) * ( bp + 1 )		2025654	1					
ANR	2025798	CastTarget	unsigned char		2025654	0					
ANR	2025799	UnaryOperationExpression	* ( bp + 1 )		2025654	1					
ANR	2025800	UnaryOperator	*		2025654	0					
ANR	2025801	AdditiveExpression	bp + 1		2025654	1		+			
ANR	2025802	Identifier	bp		2025654	0					
ANR	2025803	PrimaryExpression	1		2025654	1					
ANR	2025804	CompoundStatement		22:88:488:488	2025654	1					
ANR	2025805	ExpressionStatement	cb = * ++ bp	125:3:3407:3417	2025654	0	True				
ANR	2025806	AssignmentExpression	cb = * ++ bp		2025654	0		=			
ANR	2025807	Identifier	cb		2025654	0					
ANR	2025808	UnaryOperationExpression	* ++ bp		2025654	1					
ANR	2025809	UnaryOperator	*		2025654	0					
ANR	2025810	UnaryExpression	++ bp		2025654	1					
ANR	2025811	IncDec	++		2025654	0					
ANR	2025812	Identifier	bp		2025654	1					
ANR	2025813	ExpressionStatement	leading = 0	128:2:3426:3437	2025654	4	True				
ANR	2025814	AssignmentExpression	leading = 0		2025654	0		=			
ANR	2025815	Identifier	leading		2025654	0					
ANR	2025816	PrimaryExpression	0		2025654	1					
ANR	2025817	WhileStatement	while ( isspace ( ( int ) ( unsigned char ) ca ) )		2025654	5					
ANR	2025818	Condition	isspace ( ( int ) ( unsigned char ) ca )	131:9:3485:3515	2025654	0	True				
ANR	2025819	CallExpression	isspace ( ( int ) ( unsigned char ) ca )		2025654	0					
ANR	2025820	Callee	isspace		2025654	0					
ANR	2025821	Identifier	isspace		2025654	0					
ANR	2025822	ArgumentList	( int ) ( unsigned char ) ca		2025654	1					
ANR	2025823	Argument	( int ) ( unsigned char ) ca		2025654	0					
ANR	2025824	CastExpression	( int ) ( unsigned char ) ca		2025654	0					
ANR	2025825	CastTarget	int		2025654	0					
ANR	2025826	CastExpression	( unsigned char ) ca		2025654	1					
ANR	2025827	CastTarget	unsigned char		2025654	0					
ANR	2025828	Identifier	ca		2025654	1					
ANR	2025829	CompoundStatement		29:42:604:604	2025654	1					
ANR	2025830	ExpressionStatement	ca = * ++ ap	132:3:3523:3533	2025654	0	True				
ANR	2025831	AssignmentExpression	ca = * ++ ap		2025654	0		=			
ANR	2025832	Identifier	ca		2025654	0					
ANR	2025833	UnaryOperationExpression	* ++ ap		2025654	1					
ANR	2025834	UnaryOperator	*		2025654	0					
ANR	2025835	UnaryExpression	++ ap		2025654	1					
ANR	2025836	IncDec	++		2025654	0					
ANR	2025837	Identifier	ap		2025654	1					
ANR	2025838	WhileStatement	while ( isspace ( ( int ) ( unsigned char ) cb ) )		2025654	6					
ANR	2025839	Condition	isspace ( ( int ) ( unsigned char ) cb )	135:9:3549:3579	2025654	0	True				
ANR	2025840	CallExpression	isspace ( ( int ) ( unsigned char ) cb )		2025654	0					
ANR	2025841	Callee	isspace		2025654	0					
ANR	2025842	Identifier	isspace		2025654	0					
ANR	2025843	ArgumentList	( int ) ( unsigned char ) cb		2025654	1					
ANR	2025844	Argument	( int ) ( unsigned char ) cb		2025654	0					
ANR	2025845	CastExpression	( int ) ( unsigned char ) cb		2025654	0					
ANR	2025846	CastTarget	int		2025654	0					
ANR	2025847	CastExpression	( unsigned char ) cb		2025654	1					
ANR	2025848	CastTarget	unsigned char		2025654	0					
ANR	2025849	Identifier	cb		2025654	1					
ANR	2025850	CompoundStatement		33:42:668:668	2025654	1					
ANR	2025851	ExpressionStatement	cb = * ++ bp	136:3:3587:3597	2025654	0	True				
ANR	2025852	AssignmentExpression	cb = * ++ bp		2025654	0		=			
ANR	2025853	Identifier	cb		2025654	0					
ANR	2025854	UnaryOperationExpression	* ++ bp		2025654	1					
ANR	2025855	UnaryOperator	*		2025654	0					
ANR	2025856	UnaryExpression	++ bp		2025654	1					
ANR	2025857	IncDec	++		2025654	0					
ANR	2025858	Identifier	bp		2025654	1					
ANR	2025859	IfStatement	if ( isdigit ( ( int ) ( unsigned char ) ca ) && isdigit ( ( int ) ( unsigned char ) cb ) )		2025654	7					
ANR	2025860	Condition	isdigit ( ( int ) ( unsigned char ) ca ) && isdigit ( ( int ) ( unsigned char ) cb )	140:6:3640:3707	2025654	0	True				
ANR	2025861	AndExpression	isdigit ( ( int ) ( unsigned char ) ca ) && isdigit ( ( int ) ( unsigned char ) cb )		2025654	0		&&			
ANR	2025862	CallExpression	isdigit ( ( int ) ( unsigned char ) ca )		2025654	0					
ANR	2025863	Callee	isdigit		2025654	0					
ANR	2025864	Identifier	isdigit		2025654	0					
ANR	2025865	ArgumentList	( int ) ( unsigned char ) ca		2025654	1					
ANR	2025866	Argument	( int ) ( unsigned char ) ca		2025654	0					
ANR	2025867	CastExpression	( int ) ( unsigned char ) ca		2025654	0					
ANR	2025868	CastTarget	int		2025654	0					
ANR	2025869	CastExpression	( unsigned char ) ca		2025654	1					
ANR	2025870	CastTarget	unsigned char		2025654	0					
ANR	2025871	Identifier	ca		2025654	1					
ANR	2025872	CallExpression	isdigit ( ( int ) ( unsigned char ) cb )		2025654	1					
ANR	2025873	Callee	isdigit		2025654	0					
ANR	2025874	Identifier	isdigit		2025654	0					
ANR	2025875	ArgumentList	( int ) ( unsigned char ) cb		2025654	1					
ANR	2025876	Argument	( int ) ( unsigned char ) cb		2025654	0					
ANR	2025877	CastExpression	( int ) ( unsigned char ) cb		2025654	0					
ANR	2025878	CastTarget	int		2025654	0					
ANR	2025879	CastExpression	( unsigned char ) cb		2025654	1					
ANR	2025880	CastTarget	unsigned char		2025654	0					
ANR	2025881	Identifier	cb		2025654	1					
ANR	2025882	CompoundStatement		38:76:796:796	2025654	1					
ANR	2025883	ExpressionStatement	fractional = ( ca == '0' || cb == '0' )	141:3:3715:3752	2025654	0	True				
ANR	2025884	AssignmentExpression	fractional = ( ca == '0' || cb == '0' )		2025654	0		=			
ANR	2025885	Identifier	fractional		2025654	0					
ANR	2025886	OrExpression	ca == '0' || cb == '0'		2025654	1		||			
ANR	2025887	EqualityExpression	ca == '0'		2025654	0		==			
ANR	2025888	Identifier	ca		2025654	0					
ANR	2025889	PrimaryExpression	'0'		2025654	1					
ANR	2025890	EqualityExpression	cb == '0'		2025654	1		==			
ANR	2025891	Identifier	cb		2025654	0					
ANR	2025892	PrimaryExpression	'0'		2025654	1					
ANR	2025893	IfStatement	if ( fractional )		2025654	1					
ANR	2025894	Condition	fractional	143:7:3762:3771	2025654	0	True				
ANR	2025895	Identifier	fractional		2025654	0					
ANR	2025896	ExpressionStatement	"result = compare_left ( & ap , aend , & bp , bend )"	144:4:3778:3821	2025654	1	True				
ANR	2025897	AssignmentExpression	"result = compare_left ( & ap , aend , & bp , bend )"		2025654	0		=			
ANR	2025898	Identifier	result		2025654	0					
ANR	2025899	CallExpression	"compare_left ( & ap , aend , & bp , bend )"		2025654	1					
ANR	2025900	Callee	compare_left		2025654	0					
ANR	2025901	Identifier	compare_left		2025654	0					
ANR	2025902	ArgumentList	& ap		2025654	1					
ANR	2025903	Argument	& ap		2025654	0					
ANR	2025904	UnaryOperationExpression	& ap		2025654	0					
ANR	2025905	UnaryOperator	&		2025654	0					
ANR	2025906	Identifier	ap		2025654	1					
ANR	2025907	Argument	aend		2025654	1					
ANR	2025908	Identifier	aend		2025654	0					
ANR	2025909	Argument	& bp		2025654	2					
ANR	2025910	UnaryOperationExpression	& bp		2025654	0					
ANR	2025911	UnaryOperator	&		2025654	0					
ANR	2025912	Identifier	bp		2025654	1					
ANR	2025913	Argument	bend		2025654	3					
ANR	2025914	Identifier	bend		2025654	0					
ANR	2025915	ElseStatement	else		2025654	0					
ANR	2025916	ExpressionStatement	"result = compare_right ( & ap , aend , & bp , bend )"	146:4:3835:3879	2025654	0	True				
ANR	2025917	AssignmentExpression	"result = compare_right ( & ap , aend , & bp , bend )"		2025654	0		=			
ANR	2025918	Identifier	result		2025654	0					
ANR	2025919	CallExpression	"compare_right ( & ap , aend , & bp , bend )"		2025654	1					
ANR	2025920	Callee	compare_right		2025654	0					
ANR	2025921	Identifier	compare_right		2025654	0					
ANR	2025922	ArgumentList	& ap		2025654	1					
ANR	2025923	Argument	& ap		2025654	0					
ANR	2025924	UnaryOperationExpression	& ap		2025654	0					
ANR	2025925	UnaryOperator	&		2025654	0					
ANR	2025926	Identifier	ap		2025654	1					
ANR	2025927	Argument	aend		2025654	1					
ANR	2025928	Identifier	aend		2025654	0					
ANR	2025929	Argument	& bp		2025654	2					
ANR	2025930	UnaryOperationExpression	& bp		2025654	0					
ANR	2025931	UnaryOperator	&		2025654	0					
ANR	2025932	Identifier	bp		2025654	1					
ANR	2025933	Argument	bend		2025654	3					
ANR	2025934	Identifier	bend		2025654	0					
ANR	2025935	IfStatement	if ( result != 0 )		2025654	2					
ANR	2025936	Condition	result != 0	148:7:3889:3899	2025654	0	True				
ANR	2025937	EqualityExpression	result != 0		2025654	0		!=			
ANR	2025938	Identifier	result		2025654	0					
ANR	2025939	PrimaryExpression	0		2025654	1					
ANR	2025940	ReturnStatement	return result ;	149:4:3906:3919	2025654	1	True				
ANR	2025941	Identifier	result		2025654	0					
ANR	2025942	ElseStatement	else		2025654	0					
ANR	2025943	IfStatement	if ( ap == aend && bp == bend )		2025654	0					
ANR	2025944	Condition	ap == aend && bp == bend	150:12:3933:3956	2025654	0	True				
ANR	2025945	AndExpression	ap == aend && bp == bend		2025654	0		&&			
ANR	2025946	EqualityExpression	ap == aend		2025654	0		==			
ANR	2025947	Identifier	ap		2025654	0					
ANR	2025948	Identifier	aend		2025654	1					
ANR	2025949	EqualityExpression	bp == bend		2025654	1		==			
ANR	2025950	Identifier	bp		2025654	0					
ANR	2025951	Identifier	bend		2025654	1					
ANR	2025952	ReturnStatement	return 0 ;	152:4:4019:4027	2025654	1	True				
ANR	2025953	PrimaryExpression	0		2025654	0					
ANR	2025954	ElseStatement	else		2025654	0					
ANR	2025955	CompoundStatement		51:8:1123:1123	2025654	0					
ANR	2025956	ExpressionStatement	ca = * ap	155:4:4095:4103	2025654	0	True				
ANR	2025957	AssignmentExpression	ca = * ap		2025654	0		=			
ANR	2025958	Identifier	ca		2025654	0					
ANR	2025959	UnaryOperationExpression	* ap		2025654	1					
ANR	2025960	UnaryOperator	*		2025654	0					
ANR	2025961	Identifier	ap		2025654	1					
ANR	2025962	ExpressionStatement	cb = * bp	155:14:4105:4113	2025654	1	True				
ANR	2025963	AssignmentExpression	cb = * bp		2025654	0		=			
ANR	2025964	Identifier	cb		2025654	0					
ANR	2025965	UnaryOperationExpression	* bp		2025654	1					
ANR	2025966	UnaryOperator	*		2025654	0					
ANR	2025967	Identifier	bp		2025654	1					
ANR	2025968	IfStatement	if ( fold_case )		2025654	8					
ANR	2025969	Condition	fold_case	159:6:4131:4139	2025654	0	True				
ANR	2025970	Identifier	fold_case		2025654	0					
ANR	2025971	CompoundStatement		57:17:1228:1228	2025654	1					
ANR	2025972	ExpressionStatement	ca = toupper ( ( int ) ( unsigned char ) ca )	160:3:4147:4183	2025654	0	True				
ANR	2025973	AssignmentExpression	ca = toupper ( ( int ) ( unsigned char ) ca )		2025654	0		=			
ANR	2025974	Identifier	ca		2025654	0					
ANR	2025975	CallExpression	toupper ( ( int ) ( unsigned char ) ca )		2025654	1					
ANR	2025976	Callee	toupper		2025654	0					
ANR	2025977	Identifier	toupper		2025654	0					
ANR	2025978	ArgumentList	( int ) ( unsigned char ) ca		2025654	1					
ANR	2025979	Argument	( int ) ( unsigned char ) ca		2025654	0					
ANR	2025980	CastExpression	( int ) ( unsigned char ) ca		2025654	0					
ANR	2025981	CastTarget	int		2025654	0					
ANR	2025982	CastExpression	( unsigned char ) ca		2025654	1					
ANR	2025983	CastTarget	unsigned char		2025654	0					
ANR	2025984	Identifier	ca		2025654	1					
ANR	2025985	ExpressionStatement	cb = toupper ( ( int ) ( unsigned char ) cb )	161:3:4188:4224	2025654	1	True				
ANR	2025986	AssignmentExpression	cb = toupper ( ( int ) ( unsigned char ) cb )		2025654	0		=			
ANR	2025987	Identifier	cb		2025654	0					
ANR	2025988	CallExpression	toupper ( ( int ) ( unsigned char ) cb )		2025654	1					
ANR	2025989	Callee	toupper		2025654	0					
ANR	2025990	Identifier	toupper		2025654	0					
ANR	2025991	ArgumentList	( int ) ( unsigned char ) cb		2025654	1					
ANR	2025992	Argument	( int ) ( unsigned char ) cb		2025654	0					
ANR	2025993	CastExpression	( int ) ( unsigned char ) cb		2025654	0					
ANR	2025994	CastTarget	int		2025654	0					
ANR	2025995	CastExpression	( unsigned char ) cb		2025654	1					
ANR	2025996	CastTarget	unsigned char		2025654	0					
ANR	2025997	Identifier	cb		2025654	1					
ANR	2025998	IfStatement	if ( ca < cb )		2025654	9					
ANR	2025999	Condition	ca < cb	164:6:4237:4243	2025654	0	True				
ANR	2026000	RelationalExpression	ca < cb		2025654	0		<			
ANR	2026001	Identifier	ca		2025654	0					
ANR	2026002	Identifier	cb		2025654	1					
ANR	2026003	ReturnStatement	return - 1 ;	165:3:4249:4258	2025654	1	True				
ANR	2026004	UnaryOperationExpression	- 1		2025654	0					
ANR	2026005	UnaryOperator	-		2025654	0					
ANR	2026006	PrimaryExpression	1		2025654	1					
ANR	2026007	ElseStatement	else		2025654	0					
ANR	2026008	IfStatement	if ( ca > cb )		2025654	0					
ANR	2026009	Condition	ca > cb	166:11:4271:4277	2025654	0	True				
ANR	2026010	RelationalExpression	ca > cb		2025654	0		>			
ANR	2026011	Identifier	ca		2025654	0					
ANR	2026012	Identifier	cb		2025654	1					
ANR	2026013	ReturnStatement	return + 1 ;	167:3:4283:4292	2025654	1	True				
ANR	2026014	UnaryOperationExpression	+ 1		2025654	0					
ANR	2026015	UnaryOperator	+		2025654	0					
ANR	2026016	PrimaryExpression	1		2025654	1					
ANR	2026017	ExpressionStatement	++ ap	169:2:4297:4301	2025654	10	True				
ANR	2026018	UnaryExpression	++ ap		2025654	0					
ANR	2026019	IncDec	++		2025654	0					
ANR	2026020	Identifier	ap		2025654	1					
ANR	2026021	ExpressionStatement	++ bp	169:8:4303:4307	2025654	11	True				
ANR	2026022	UnaryExpression	++ bp		2025654	0					
ANR	2026023	IncDec	++		2025654	0					
ANR	2026024	Identifier	bp		2025654	1					
ANR	2026025	IfStatement	if ( ap >= aend && bp >= bend )		2025654	12					
ANR	2026026	Condition	ap >= aend && bp >= bend	170:6:4315:4338	2025654	0	True				
ANR	2026027	AndExpression	ap >= aend && bp >= bend		2025654	0		&&			
ANR	2026028	RelationalExpression	ap >= aend		2025654	0		>=			
ANR	2026029	Identifier	ap		2025654	0					
ANR	2026030	Identifier	aend		2025654	1					
ANR	2026031	RelationalExpression	bp >= bend		2025654	1		>=			
ANR	2026032	Identifier	bp		2025654	0					
ANR	2026033	Identifier	bend		2025654	1					
ANR	2026034	ReturnStatement	return 0 ;	173:3:4452:4460	2025654	1	True				
ANR	2026035	PrimaryExpression	0		2025654	0					
ANR	2026036	ElseStatement	else		2025654	0					
ANR	2026037	IfStatement	if ( ap >= aend )		2025654	0					
ANR	2026038	Condition	ap >= aend	174:11:4473:4482	2025654	0	True				
ANR	2026039	RelationalExpression	ap >= aend		2025654	0		>=			
ANR	2026040	Identifier	ap		2025654	0					
ANR	2026041	Identifier	aend		2025654	1					
ANR	2026042	ReturnStatement	return - 1 ;	175:3:4488:4497	2025654	1	True				
ANR	2026043	UnaryOperationExpression	- 1		2025654	0					
ANR	2026044	UnaryOperator	-		2025654	0					
ANR	2026045	PrimaryExpression	1		2025654	1					
ANR	2026046	ElseStatement	else		2025654	0					
ANR	2026047	IfStatement	if ( bp >= bend )		2025654	0					
ANR	2026048	Condition	bp >= bend	176:11:4510:4519	2025654	0	True				
ANR	2026049	RelationalExpression	bp >= bend		2025654	0		>=			
ANR	2026050	Identifier	bp		2025654	0					
ANR	2026051	Identifier	bend		2025654	1					
ANR	2026052	ReturnStatement	return 1 ;	177:3:4525:4533	2025654	1	True				
ANR	2026053	PrimaryExpression	1		2025654	0					
ANR	2026054	ReturnType	PHPAPI int		2025654	1					
ANR	2026055	Identifier	strnatcmp_ex		2025654	2					
ANR	2026056	ParameterList	"char const * a , size_t a_len , char const * b , size_t b_len , int fold_case"		2025654	3					
ANR	2026057	Parameter	char const * a	102:24:2840:2852	2025654	0	True				
ANR	2026058	ParameterType	char const *		2025654	0					
ANR	2026059	Identifier	a		2025654	1					
ANR	2026060	Parameter	size_t a_len	102:39:2855:2866	2025654	1	True				
ANR	2026061	ParameterType	size_t		2025654	0					
ANR	2026062	Identifier	a_len		2025654	1					
ANR	2026063	Parameter	char const * b	102:53:2869:2881	2025654	2	True				
ANR	2026064	ParameterType	char const *		2025654	0					
ANR	2026065	Identifier	b		2025654	1					
ANR	2026066	Parameter	size_t b_len	102:68:2884:2895	2025654	3	True				
ANR	2026067	ParameterType	size_t		2025654	0					
ANR	2026068	Identifier	b_len		2025654	1					
ANR	2026069	Parameter	int fold_case	102:82:2898:2910	2025654	4	True				
ANR	2026070	ParameterType	int		2025654	0					
ANR	2026071	Identifier	fold_case		2025654	1					
ANR	2026072	CFGEntryNode	ENTRY		2025654		True				
ANR	2026073	CFGExitNode	EXIT		2025654		True				
ANR	2026074	Symbol	leading		2025654						
ANR	2026075	Symbol	* ++ bp		2025654						
ANR	2026076	Symbol	bp		2025654						
ANR	2026077	Symbol	result		2025654						
ANR	2026078	Symbol	compare_left		2025654						
ANR	2026079	Symbol	compare_right		2025654						
ANR	2026080	Symbol	* ( ap + 1 )		2025654						
ANR	2026081	Symbol	bend		2025654						
ANR	2026082	Symbol	* bp		2025654						
ANR	2026083	Symbol	* ( bp + 1 )		2025654						
ANR	2026084	Symbol	& bp		2025654						
ANR	2026085	Symbol	isdigit		2025654						
ANR	2026086	Symbol	ca		2025654						
ANR	2026087	Symbol	cb		2025654						
ANR	2026088	Symbol	a		2025654						
ANR	2026089	Symbol	b		2025654						
ANR	2026090	Symbol	toupper		2025654						
ANR	2026091	Symbol	fractional		2025654						
ANR	2026092	Symbol	isspace		2025654						
ANR	2026093	Symbol	b_len		2025654						
ANR	2026094	Symbol	* ++ ap		2025654						
ANR	2026095	Symbol	ap		2025654						
ANR	2026096	Symbol	a_len		2025654						
ANR	2026097	Symbol	* ap		2025654						
ANR	2026098	Symbol	aend		2025654						
ANR	2026099	Symbol	& ap		2025654						
ANR	2026100	Symbol	fold_case		2025654						
