command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	40183	File	data/converged/CVE-2017-11142_php-src/Zend_zend_compile.c								
ANR	40184	DeclStmt									
ANR	40185	Decl							target	target	_type
ANR	40186	DeclStmt									
ANR	40187	Decl							src	src	_type
ANR	40188	DeclStmt									
ANR	40189	Decl							target	target	_type
ANR	40190	DeclStmt									
ANR	40191	Decl							zval	zval *	c
ANR	40192	DeclStmt									
ANR	40193	Decl							"ZEND_API zend_op_array * ( * ) ( zend_file_handle * file_handle , int type TSRMLS_DC )"	"ZEND_API zend_op_array * ( * ) ( zend_file_handle * file_handle , int type TSRMLS_DC )"	zend_compile_file
ANR	40194	DeclStmt									
ANR	40195	Decl							ZEND_API zend_compiler_globals	ZEND_API zend_compiler_globals	compiler_globals
ANR	40196	DeclStmt									
ANR	40197	Decl							ZEND_API zend_executor_globals	ZEND_API zend_executor_globals	executor_globals
ANR	40198	DeclStmt									
ANR	40199	Decl							zend_function_call_entry	zend_function_call_entry	fcall
ANR	40200	Function	zend_duplicate_property_info	112:0:4564:4877							
ANR	40201	FunctionDef	zend_duplicate_property_info (zend_property_info * property_info)		40200	0					
ANR	40202	CompoundStatement		113:0:4650:4877	40200	0					
ANR	40203	ExpressionStatement	"property_info -> name = str_estrndup ( property_info -> name , property_info -> name_length )"	114:1:4653:4736	40200	0	True				
ANR	40204	AssignmentExpression	"property_info -> name = str_estrndup ( property_info -> name , property_info -> name_length )"		40200	0		=			
ANR	40205	PtrMemberAccess	property_info -> name		40200	0					
ANR	40206	Identifier	property_info		40200	0					
ANR	40207	Identifier	name		40200	1					
ANR	40208	CallExpression	"str_estrndup ( property_info -> name , property_info -> name_length )"		40200	1					
ANR	40209	Callee	str_estrndup		40200	0					
ANR	40210	Identifier	str_estrndup		40200	0					
ANR	40211	ArgumentList	property_info -> name		40200	1					
ANR	40212	Argument	property_info -> name		40200	0					
ANR	40213	PtrMemberAccess	property_info -> name		40200	0					
ANR	40214	Identifier	property_info		40200	0					
ANR	40215	Identifier	name		40200	1					
ANR	40216	Argument	property_info -> name_length		40200	1					
ANR	40217	PtrMemberAccess	property_info -> name_length		40200	0					
ANR	40218	Identifier	property_info		40200	0					
ANR	40219	Identifier	name_length		40200	1					
ANR	40220	IfStatement	if ( property_info -> doc_comment )		40200	1					
ANR	40221	Condition	property_info -> doc_comment	115:5:4743:4768	40200	0	True				
ANR	40222	PtrMemberAccess	property_info -> doc_comment		40200	0					
ANR	40223	Identifier	property_info		40200	0					
ANR	40224	Identifier	doc_comment		40200	1					
ANR	40225	CompoundStatement		3:33:120:120	40200	1					
ANR	40226	ExpressionStatement	"property_info -> doc_comment = estrndup ( property_info -> doc_comment , property_info -> doc_comment_len )"	116:2:4775:4872	40200	0	True				
ANR	40227	AssignmentExpression	"property_info -> doc_comment = estrndup ( property_info -> doc_comment , property_info -> doc_comment_len )"		40200	0		=			
ANR	40228	PtrMemberAccess	property_info -> doc_comment		40200	0					
ANR	40229	Identifier	property_info		40200	0					
ANR	40230	Identifier	doc_comment		40200	1					
ANR	40231	CallExpression	"estrndup ( property_info -> doc_comment , property_info -> doc_comment_len )"		40200	1					
ANR	40232	Callee	estrndup		40200	0					
ANR	40233	Identifier	estrndup		40200	0					
ANR	40234	ArgumentList	property_info -> doc_comment		40200	1					
ANR	40235	Argument	property_info -> doc_comment		40200	0					
ANR	40236	PtrMemberAccess	property_info -> doc_comment		40200	0					
ANR	40237	Identifier	property_info		40200	0					
ANR	40238	Identifier	doc_comment		40200	1					
ANR	40239	Argument	property_info -> doc_comment_len		40200	1					
ANR	40240	PtrMemberAccess	property_info -> doc_comment_len		40200	0					
ANR	40241	Identifier	property_info		40200	0					
ANR	40242	Identifier	doc_comment_len		40200	1					
ANR	40243	ReturnType	static void		40200	1					
ANR	40244	Identifier	zend_duplicate_property_info		40200	2					
ANR	40245	ParameterList	zend_property_info * property_info		40200	3					
ANR	40246	Parameter	zend_property_info * property_info	112:41:4605:4637	40200	0	True				
ANR	40247	ParameterType	zend_property_info *		40200	0					
ANR	40248	Identifier	property_info		40200	1					
ANR	40249	CFGEntryNode	ENTRY		40200		True				
ANR	40250	CFGExitNode	EXIT		40200		True				
ANR	40251	Symbol	property_info		40200						
ANR	40252	Symbol	property_info -> doc_comment		40200						
ANR	40253	Symbol	estrndup		40200						
ANR	40254	Symbol	property_info -> doc_comment_len		40200						
ANR	40255	Symbol	* property_info		40200						
ANR	40256	Symbol	property_info -> name		40200						
ANR	40257	Symbol	property_info -> name_length		40200						
ANR	40258	Symbol	str_estrndup		40200						
ANR	40259	Function	zend_duplicate_property_info_internal	121:0:4890:5072							
ANR	40260	FunctionDef	zend_duplicate_property_info_internal (zend_property_info * property_info)		40259	0					
ANR	40261	CompoundStatement		122:0:4985:5072	40259	0					
ANR	40262	ExpressionStatement	"property_info -> name = str_strndup ( property_info -> name , property_info -> name_length )"	123:1:4988:5070	40259	0	True				
ANR	40263	AssignmentExpression	"property_info -> name = str_strndup ( property_info -> name , property_info -> name_length )"		40259	0		=			
ANR	40264	PtrMemberAccess	property_info -> name		40259	0					
ANR	40265	Identifier	property_info		40259	0					
ANR	40266	Identifier	name		40259	1					
ANR	40267	CallExpression	"str_strndup ( property_info -> name , property_info -> name_length )"		40259	1					
ANR	40268	Callee	str_strndup		40259	0					
ANR	40269	Identifier	str_strndup		40259	0					
ANR	40270	ArgumentList	property_info -> name		40259	1					
ANR	40271	Argument	property_info -> name		40259	0					
ANR	40272	PtrMemberAccess	property_info -> name		40259	0					
ANR	40273	Identifier	property_info		40259	0					
ANR	40274	Identifier	name		40259	1					
ANR	40275	Argument	property_info -> name_length		40259	1					
ANR	40276	PtrMemberAccess	property_info -> name_length		40259	0					
ANR	40277	Identifier	property_info		40259	0					
ANR	40278	Identifier	name_length		40259	1					
ANR	40279	ReturnType	static void		40259	1					
ANR	40280	Identifier	zend_duplicate_property_info_internal		40259	2					
ANR	40281	ParameterList	zend_property_info * property_info		40259	3					
ANR	40282	Parameter	zend_property_info * property_info	121:50:4940:4972	40259	0	True				
ANR	40283	ParameterType	zend_property_info *		40259	0					
ANR	40284	Identifier	property_info		40259	1					
ANR	40285	CFGEntryNode	ENTRY		40259		True				
ANR	40286	CFGExitNode	EXIT		40259		True				
ANR	40287	Symbol	property_info		40259						
ANR	40288	Symbol	str_strndup		40259						
ANR	40289	Symbol	* property_info		40259						
ANR	40290	Symbol	property_info -> name		40259						
ANR	40291	Symbol	property_info -> name_length		40259						
ANR	40292	Function	zend_destroy_property_info	127:0:5085:5286							
ANR	40293	FunctionDef	zend_destroy_property_info (zend_property_info * property_info)		40292	0					
ANR	40294	CompoundStatement		128:0:5169:5286	40292	0					
ANR	40295	ExpressionStatement	str_efree ( property_info -> name )	129:1:5172:5202	40292	0	True				
ANR	40296	CallExpression	str_efree ( property_info -> name )		40292	0					
ANR	40297	Callee	str_efree		40292	0					
ANR	40298	Identifier	str_efree		40292	0					
ANR	40299	ArgumentList	property_info -> name		40292	1					
ANR	40300	Argument	property_info -> name		40292	0					
ANR	40301	PtrMemberAccess	property_info -> name		40292	0					
ANR	40302	Identifier	property_info		40292	0					
ANR	40303	Identifier	name		40292	1					
ANR	40304	IfStatement	if ( property_info -> doc_comment )		40292	1					
ANR	40305	Condition	property_info -> doc_comment	130:5:5209:5234	40292	0	True				
ANR	40306	PtrMemberAccess	property_info -> doc_comment		40292	0					
ANR	40307	Identifier	property_info		40292	0					
ANR	40308	Identifier	doc_comment		40292	1					
ANR	40309	CompoundStatement		3:33:67:67	40292	1					
ANR	40310	ExpressionStatement	efree ( ( char * ) property_info -> doc_comment )	131:2:5241:5281	40292	0	True				
ANR	40311	CallExpression	efree ( ( char * ) property_info -> doc_comment )		40292	0					
ANR	40312	Callee	efree		40292	0					
ANR	40313	Identifier	efree		40292	0					
ANR	40314	ArgumentList	( char * ) property_info -> doc_comment		40292	1					
ANR	40315	Argument	( char * ) property_info -> doc_comment		40292	0					
ANR	40316	CastExpression	( char * ) property_info -> doc_comment		40292	0					
ANR	40317	CastTarget	char *		40292	0					
ANR	40318	PtrMemberAccess	property_info -> doc_comment		40292	1					
ANR	40319	Identifier	property_info		40292	0					
ANR	40320	Identifier	doc_comment		40292	1					
ANR	40321	ReturnType	static void		40292	1					
ANR	40322	Identifier	zend_destroy_property_info		40292	2					
ANR	40323	ParameterList	zend_property_info * property_info		40292	3					
ANR	40324	Parameter	zend_property_info * property_info	127:39:5124:5156	40292	0	True				
ANR	40325	ParameterType	zend_property_info *		40292	0					
ANR	40326	Identifier	property_info		40292	1					
ANR	40327	CFGEntryNode	ENTRY		40292		True				
ANR	40328	CFGExitNode	EXIT		40292		True				
ANR	40329	Symbol	property_info		40292						
ANR	40330	Symbol	property_info -> doc_comment		40292						
ANR	40331	Symbol	* property_info		40292						
ANR	40332	Symbol	property_info -> name		40292						
ANR	40333	Function	zend_destroy_property_info_internal	136:0:5299:5433							
ANR	40334	FunctionDef	zend_destroy_property_info_internal (zend_property_info * property_info)		40333	0					
ANR	40335	CompoundStatement		137:0:5392:5433	40333	0					
ANR	40336	ExpressionStatement	str_free ( ( char * ) property_info -> name )	138:1:5395:5431	40333	0	True				
ANR	40337	CallExpression	str_free ( ( char * ) property_info -> name )		40333	0					
ANR	40338	Callee	str_free		40333	0					
ANR	40339	Identifier	str_free		40333	0					
ANR	40340	ArgumentList	( char * ) property_info -> name		40333	1					
ANR	40341	Argument	( char * ) property_info -> name		40333	0					
ANR	40342	CastExpression	( char * ) property_info -> name		40333	0					
ANR	40343	CastTarget	char *		40333	0					
ANR	40344	PtrMemberAccess	property_info -> name		40333	1					
ANR	40345	Identifier	property_info		40333	0					
ANR	40346	Identifier	name		40333	1					
ANR	40347	ReturnType	static void		40333	1					
ANR	40348	Identifier	zend_destroy_property_info_internal		40333	2					
ANR	40349	ParameterList	zend_property_info * property_info		40333	3					
ANR	40350	Parameter	zend_property_info * property_info	136:48:5347:5379	40333	0	True				
ANR	40351	ParameterType	zend_property_info *		40333	0					
ANR	40352	Identifier	property_info		40333	1					
ANR	40353	CFGEntryNode	ENTRY		40333		True				
ANR	40354	CFGExitNode	EXIT		40333		True				
ANR	40355	Symbol	property_info		40333						
ANR	40356	Symbol	* property_info		40333						
ANR	40357	Symbol	property_info -> name		40333						
ANR	40358	Function	build_runtime_defined_function_key	142:0:5446:6226							
ANR	40359	FunctionDef	"build_runtime_defined_function_key (zval * result , const char * name , int name_length TSRMLS_DC)"		40358	0					
ANR	40360	CompoundStatement		143:0:5562:6226	40358	0					
ANR	40361	IdentifierDeclStatement	char char_pos_buf [ 32 ] ;	144:1:5565:5586	40358	0	True				
ANR	40362	IdentifierDecl	char_pos_buf [ 32 ]		40358	0					
ANR	40363	IdentifierDeclType	char [ 32 ]		40358	0					
ANR	40364	Identifier	char_pos_buf		40358	1					
ANR	40365	PrimaryExpression	32		40358	2					
ANR	40366	IdentifierDeclStatement	uint char_pos_len ;	145:1:5589:5606	40358	1	True				
ANR	40367	IdentifierDecl	char_pos_len		40358	0					
ANR	40368	IdentifierDeclType	uint		40358	0					
ANR	40369	Identifier	char_pos_len		40358	1					
ANR	40370	IdentifierDeclStatement	const char * filename ;	146:1:5609:5629	40358	2	True				
ANR	40371	IdentifierDecl	* filename		40358	0					
ANR	40372	IdentifierDeclType	const char *		40358	0					
ANR	40373	Identifier	filename		40358	1					
ANR	40374	ExpressionStatement	"char_pos_len = zend_sprintf ( char_pos_buf , ""%p"" , LANG_SCNG ( yy_text ) )"	148:1:5633:5700	40358	3	True				
ANR	40375	AssignmentExpression	"char_pos_len = zend_sprintf ( char_pos_buf , ""%p"" , LANG_SCNG ( yy_text ) )"		40358	0		=			
ANR	40376	Identifier	char_pos_len		40358	0					
ANR	40377	CallExpression	"zend_sprintf ( char_pos_buf , ""%p"" , LANG_SCNG ( yy_text ) )"		40358	1					
ANR	40378	Callee	zend_sprintf		40358	0					
ANR	40379	Identifier	zend_sprintf		40358	0					
ANR	40380	ArgumentList	char_pos_buf		40358	1					
ANR	40381	Argument	char_pos_buf		40358	0					
ANR	40382	Identifier	char_pos_buf		40358	0					
ANR	40383	Argument	"""%p"""		40358	1					
ANR	40384	PrimaryExpression	"""%p"""		40358	0					
ANR	40385	Argument	LANG_SCNG ( yy_text )		40358	2					
ANR	40386	CallExpression	LANG_SCNG ( yy_text )		40358	0					
ANR	40387	Callee	LANG_SCNG		40358	0					
ANR	40388	Identifier	LANG_SCNG		40358	0					
ANR	40389	ArgumentList	yy_text		40358	1					
ANR	40390	Argument	yy_text		40358	0					
ANR	40391	Identifier	yy_text		40358	0					
ANR	40392	IfStatement	if ( CG ( active_op_array ) -> filename )		40358	4					
ANR	40393	Condition	CG ( active_op_array ) -> filename	149:5:5707:5735	40358	0	True				
ANR	40394	PtrMemberAccess	CG ( active_op_array ) -> filename		40358	0					
ANR	40395	CallExpression	CG ( active_op_array )		40358	0					
ANR	40396	Callee	CG		40358	0					
ANR	40397	Identifier	CG		40358	0					
ANR	40398	ArgumentList	active_op_array		40358	1					
ANR	40399	Argument	active_op_array		40358	0					
ANR	40400	Identifier	active_op_array		40358	0					
ANR	40401	Identifier	filename		40358	1					
ANR	40402	CompoundStatement		7:36:175:175	40358	1					
ANR	40403	ExpressionStatement	filename = CG ( active_op_array ) -> filename	150:2:5742:5782	40358	0	True				
ANR	40404	AssignmentExpression	filename = CG ( active_op_array ) -> filename		40358	0		=			
ANR	40405	Identifier	filename		40358	0					
ANR	40406	PtrMemberAccess	CG ( active_op_array ) -> filename		40358	1					
ANR	40407	CallExpression	CG ( active_op_array )		40358	0					
ANR	40408	Callee	CG		40358	0					
ANR	40409	Identifier	CG		40358	0					
ANR	40410	ArgumentList	active_op_array		40358	1					
ANR	40411	Argument	active_op_array		40358	0					
ANR	40412	Identifier	active_op_array		40358	0					
ANR	40413	Identifier	filename		40358	1					
ANR	40414	ElseStatement	else		40358	0					
ANR	40415	CompoundStatement		9:8:229:229	40358	0					
ANR	40416	ExpressionStatement	"filename = ""-"""	152:2:5796:5810	40358	0	True				
ANR	40417	AssignmentExpression	"filename = ""-"""		40358	0		=			
ANR	40418	Identifier	filename		40358	0					
ANR	40419	PrimaryExpression	"""-"""		40358	1					
ANR	40420	ExpressionStatement	Z_STRLEN_P ( result ) = 1 + name_length + strlen ( filename ) + char_pos_len	156:1:5896:5960	40358	5	True				
ANR	40421	AssignmentExpression	Z_STRLEN_P ( result ) = 1 + name_length + strlen ( filename ) + char_pos_len		40358	0		=			
ANR	40422	CallExpression	Z_STRLEN_P ( result )		40358	0					
ANR	40423	Callee	Z_STRLEN_P		40358	0					
ANR	40424	Identifier	Z_STRLEN_P		40358	0					
ANR	40425	ArgumentList	result		40358	1					
ANR	40426	Argument	result		40358	0					
ANR	40427	Identifier	result		40358	0					
ANR	40428	AdditiveExpression	1 + name_length + strlen ( filename ) + char_pos_len		40358	1		+			
ANR	40429	PrimaryExpression	1		40358	0					
ANR	40430	AdditiveExpression	name_length + strlen ( filename ) + char_pos_len		40358	1		+			
ANR	40431	Identifier	name_length		40358	0					
ANR	40432	AdditiveExpression	strlen ( filename ) + char_pos_len		40358	1		+			
ANR	40433	CallExpression	strlen ( filename )		40358	0					
ANR	40434	Callee	strlen		40358	0					
ANR	40435	Identifier	strlen		40358	0					
ANR	40436	ArgumentList	filename		40358	1					
ANR	40437	Argument	filename		40358	0					
ANR	40438	Identifier	filename		40358	0					
ANR	40439	Identifier	char_pos_len		40358	1					
ANR	40440	ExpressionStatement	"Z_STRVAL_P ( result ) = ( char * ) safe_emalloc ( Z_STRLEN_P ( result ) , 1 , 1 )"	159:2:5993:6061	40358	6	True				
ANR	40441	AssignmentExpression	"Z_STRVAL_P ( result ) = ( char * ) safe_emalloc ( Z_STRLEN_P ( result ) , 1 , 1 )"		40358	0		=			
ANR	40442	CallExpression	Z_STRVAL_P ( result )		40358	0					
ANR	40443	Callee	Z_STRVAL_P		40358	0					
ANR	40444	Identifier	Z_STRVAL_P		40358	0					
ANR	40445	ArgumentList	result		40358	1					
ANR	40446	Argument	result		40358	0					
ANR	40447	Identifier	result		40358	0					
ANR	40448	CastExpression	"( char * ) safe_emalloc ( Z_STRLEN_P ( result ) , 1 , 1 )"		40358	1					
ANR	40449	CastTarget	char *		40358	0					
ANR	40450	CallExpression	"safe_emalloc ( Z_STRLEN_P ( result ) , 1 , 1 )"		40358	1					
ANR	40451	Callee	safe_emalloc		40358	0					
ANR	40452	Identifier	safe_emalloc		40358	0					
ANR	40453	ArgumentList	Z_STRLEN_P ( result )		40358	1					
ANR	40454	Argument	Z_STRLEN_P ( result )		40358	0					
ANR	40455	CallExpression	Z_STRLEN_P ( result )		40358	0					
ANR	40456	Callee	Z_STRLEN_P		40358	0					
ANR	40457	Identifier	Z_STRLEN_P		40358	0					
ANR	40458	ArgumentList	result		40358	1					
ANR	40459	Argument	result		40358	0					
ANR	40460	Identifier	result		40358	0					
ANR	40461	Argument	1		40358	1					
ANR	40462	PrimaryExpression	1		40358	0					
ANR	40463	Argument	1		40358	2					
ANR	40464	PrimaryExpression	1		40358	0					
ANR	40465	ExpressionStatement	Z_STRVAL_P ( result ) [ 0 ] = '\\0'	160:2:6065:6093	40358	7	True				
ANR	40466	AssignmentExpression	Z_STRVAL_P ( result ) [ 0 ] = '\\0'		40358	0		=			
ANR	40467	ArrayIndexing	Z_STRVAL_P ( result ) [ 0 ]		40358	0					
ANR	40468	CallExpression	Z_STRVAL_P ( result )		40358	0					
ANR	40469	Callee	Z_STRVAL_P		40358	0					
ANR	40470	Identifier	Z_STRVAL_P		40358	0					
ANR	40471	ArgumentList	result		40358	1					
ANR	40472	Argument	result		40358	0					
ANR	40473	Identifier	result		40358	0					
ANR	40474	PrimaryExpression	0		40358	1					
ANR	40475	PrimaryExpression	'\\0'		40358	1					
ANR	40476	ExpressionStatement	"sprintf ( Z_STRVAL_P ( result ) + 1 , ""%s%s%s"" , name , filename , char_pos_buf )"	161:2:6097:6166	40358	8	True				
ANR	40477	CallExpression	"sprintf ( Z_STRVAL_P ( result ) + 1 , ""%s%s%s"" , name , filename , char_pos_buf )"		40358	0					
ANR	40478	Callee	sprintf		40358	0					
ANR	40479	Identifier	sprintf		40358	0					
ANR	40480	ArgumentList	Z_STRVAL_P ( result ) + 1		40358	1					
ANR	40481	Argument	Z_STRVAL_P ( result ) + 1		40358	0					
ANR	40482	AdditiveExpression	Z_STRVAL_P ( result ) + 1		40358	0		+			
ANR	40483	CallExpression	Z_STRVAL_P ( result )		40358	0					
ANR	40484	Callee	Z_STRVAL_P		40358	0					
ANR	40485	Identifier	Z_STRVAL_P		40358	0					
ANR	40486	ArgumentList	result		40358	1					
ANR	40487	Argument	result		40358	0					
ANR	40488	Identifier	result		40358	0					
ANR	40489	PrimaryExpression	1		40358	1					
ANR	40490	Argument	"""%s%s%s"""		40358	1					
ANR	40491	PrimaryExpression	"""%s%s%s"""		40358	0					
ANR	40492	Argument	name		40358	2					
ANR	40493	Identifier	name		40358	0					
ANR	40494	Argument	filename		40358	3					
ANR	40495	Identifier	filename		40358	0					
ANR	40496	Argument	char_pos_buf		40358	4					
ANR	40497	Identifier	char_pos_buf		40358	0					
ANR	40498	ExpressionStatement	result -> type = IS_STRING	163:1:6170:6194	40358	9	True				
ANR	40499	AssignmentExpression	result -> type = IS_STRING		40358	0		=			
ANR	40500	PtrMemberAccess	result -> type		40358	0					
ANR	40501	Identifier	result		40358	0					
ANR	40502	Identifier	type		40358	1					
ANR	40503	Identifier	IS_STRING		40358	1					
ANR	40504	ExpressionStatement	"Z_SET_REFCOUNT_P ( result , 1 )"	164:1:6197:6224	40358	10	True				
ANR	40505	CallExpression	"Z_SET_REFCOUNT_P ( result , 1 )"		40358	0					
ANR	40506	Callee	Z_SET_REFCOUNT_P		40358	0					
ANR	40507	Identifier	Z_SET_REFCOUNT_P		40358	0					
ANR	40508	ArgumentList	result		40358	1					
ANR	40509	Argument	result		40358	0					
ANR	40510	Identifier	result		40358	0					
ANR	40511	Argument	1		40358	1					
ANR	40512	PrimaryExpression	1		40358	0					
ANR	40513	ReturnType	static void		40358	1					
ANR	40514	Identifier	build_runtime_defined_function_key		40358	2					
ANR	40515	ParameterList	"zval * result , const char * name , int name_length TSRMLS_DC"		40358	3					
ANR	40516	Parameter	zval * result	142:47:5493:5504	40358	0	True				
ANR	40517	ParameterType	zval *		40358	0					
ANR	40518	Identifier	result		40358	1					
ANR	40519	Parameter	const char * name	142:61:5507:5522	40358	1	True				
ANR	40520	ParameterType	const char *		40358	0					
ANR	40521	Identifier	name		40358	1					
ANR	40522	Parameter	int name_length TSRMLS_DC	142:79:5525:5549	40358	2	True				
ANR	40523	ParameterType	int name_length		40358	0					
ANR	40524	Identifier	TSRMLS_DC		40358	1					
ANR	40525	CFGEntryNode	ENTRY		40358		True				
ANR	40526	CFGExitNode	EXIT		40358		True				
ANR	40527	Symbol	char_pos_buf		40358						
ANR	40528	Symbol	CG		40358						
ANR	40529	Symbol	active_op_array		40358						
ANR	40530	Symbol	* CG		40358						
ANR	40531	Symbol	name_length		40358						
ANR	40532	Symbol	result -> type		40358						
ANR	40533	Symbol	TSRMLS_DC		40358						
ANR	40534	Symbol	Z_STRVAL_P		40358						
ANR	40535	Symbol	zend_sprintf		40358						
ANR	40536	Symbol	result		40358						
ANR	40537	Symbol	yy_text		40358						
ANR	40538	Symbol	strlen		40358						
ANR	40539	Symbol	filename		40358						
ANR	40540	Symbol	* result		40358						
ANR	40541	Symbol	LANG_SCNG		40358						
ANR	40542	Symbol	CG ( active_op_array ) -> filename		40358						
ANR	40543	Symbol	name		40358						
ANR	40544	Symbol	Z_STRLEN_P		40358						
ANR	40545	Symbol	* Z_STRVAL_P		40358						
ANR	40546	Symbol	IS_STRING		40358						
ANR	40547	Symbol	char_pos_len		40358						
ANR	40548	Symbol	safe_emalloc		40358						
ANR	40549	Function	file_handle_dtor	217:0:7759:7880							
ANR	40550	FunctionDef	file_handle_dtor (zend_file_handle * fh)		40549	0					
ANR	40551	CompoundStatement		218:0:7822:7880	40549	0					
ANR	40552	ExpressionStatement	TSRMLS_FETCH ( )	219:1:7825:7839	40549	0	True				
ANR	40553	CallExpression	TSRMLS_FETCH ( )		40549	0					
ANR	40554	Callee	TSRMLS_FETCH		40549	0					
ANR	40555	Identifier	TSRMLS_FETCH		40549	0					
ANR	40556	ArgumentList			40549	1					
ANR	40557	Statement	zend_file_handle_dtor	221:1:7843:7863	40549	1	True				
ANR	40558	Statement	(	221:22:7864:7864	40549	2	True				
ANR	40559	Statement	fh	221:23:7865:7866	40549	3	True				
ANR	40560	Statement	TSRMLS_CC	221:26:7868:7876	40549	4	True				
ANR	40561	Statement	)	221:35:7877:7877	40549	5	True				
ANR	40562	ExpressionStatement		221:36:7878:7878	40549	6	True				
ANR	40563	ReturnType	ZEND_API void		40549	1					
ANR	40564	Identifier	file_handle_dtor		40549	2					
ANR	40565	ParameterList	zend_file_handle * fh		40549	3					
ANR	40566	Parameter	zend_file_handle * fh	217:31:7790:7809	40549	0	True				
ANR	40567	ParameterType	zend_file_handle *		40549	0					
ANR	40568	Identifier	fh		40549	1					
ANR	40569	CFGEntryNode	ENTRY		40549		True				
ANR	40570	CFGExitNode	EXIT		40549		True				
ANR	40571	Symbol	fh		40549						
ANR	40572	DeclStmt									
ANR	40573	Decl							char	char * *	pp
ANR	40574	Decl							char	char *	p
ANR	40575	DeclStmt									
ANR	40576	Decl							int	int	length
ANR	40577	Function	get_temporary_variable	293:0:9816:9964							
ANR	40578	FunctionDef	get_temporary_variable (zend_op_array * op_array)		40577	0					
ANR	40579	CompoundStatement		294:0:9891:9964	40577	0					
ANR	40580	ReturnStatement	"return ( zend_uint ) ( zend_uintptr_t ) EX_TMP_VAR_NUM ( 0 , ( op_array -> T ) ++ ) ;"	295:1:9894:9962	40577	0	True				
ANR	40581	CastExpression	"( zend_uint ) ( zend_uintptr_t ) EX_TMP_VAR_NUM ( 0 , ( op_array -> T ) ++ )"		40577	0					
ANR	40582	CastTarget	zend_uint		40577	0					
ANR	40583	CastExpression	"( zend_uintptr_t ) EX_TMP_VAR_NUM ( 0 , ( op_array -> T ) ++ )"		40577	1					
ANR	40584	CastTarget	zend_uintptr_t		40577	0					
ANR	40585	CallExpression	"EX_TMP_VAR_NUM ( 0 , ( op_array -> T ) ++ )"		40577	1					
ANR	40586	Callee	EX_TMP_VAR_NUM		40577	0					
ANR	40587	Identifier	EX_TMP_VAR_NUM		40577	0					
ANR	40588	ArgumentList	0		40577	1					
ANR	40589	Argument	0		40577	0					
ANR	40590	PrimaryExpression	0		40577	0					
ANR	40591	Argument	( op_array -> T ) ++		40577	1					
ANR	40592	PostIncDecOperationExpression	( op_array -> T ) ++		40577	0					
ANR	40593	PtrMemberAccess	op_array -> T		40577	0					
ANR	40594	Identifier	op_array		40577	0					
ANR	40595	Identifier	T		40577	1					
ANR	40596	IncDec	++		40577	1					
ANR	40597	ReturnType	static zend_uint		40577	1					
ANR	40598	Identifier	get_temporary_variable		40577	2					
ANR	40599	ParameterList	zend_op_array * op_array		40577	3					
ANR	40600	Parameter	zend_op_array * op_array	293:40:9856:9878	40577	0	True				
ANR	40601	ParameterType	zend_op_array *		40577	0					
ANR	40602	Identifier	op_array		40577	1					
ANR	40603	CFGEntryNode	ENTRY		40577		True				
ANR	40604	CFGExitNode	EXIT		40577		True				
ANR	40605	Symbol	op_array -> T		40577						
ANR	40606	Symbol	op_array		40577						
ANR	40607	Symbol	* op_array		40577						
ANR	40608	Symbol	EX_TMP_VAR_NUM		40577						
ANR	40609	Function	lookup_cv	299:0:9977:10883							
ANR	40610	FunctionDef	"lookup_cv (zend_op_array * op_array , char * name , int name_len , ulong hash TSRMLS_DC)"		40609	0					
ANR	40611	CompoundStatement		300:0:10081:10883	40609	0					
ANR	40612	IdentifierDeclStatement	int i = 0 ;	301:1:10084:10093	40609	0	True				
ANR	40613	IdentifierDecl	i = 0		40609	0					
ANR	40614	IdentifierDeclType	int		40609	0					
ANR	40615	Identifier	i		40609	1					
ANR	40616	AssignmentExpression	i = 0		40609	2		=			
ANR	40617	Identifier	i		40609	0					
ANR	40618	PrimaryExpression	0		40609	1					
ANR	40619	IdentifierDeclStatement	"ulong hash_value = hash ? hash : zend_inline_hash_func ( name , name_len + 1 ) ;"	302:1:10096:10168	40609	1	True				
ANR	40620	IdentifierDecl	"hash_value = hash ? hash : zend_inline_hash_func ( name , name_len + 1 )"		40609	0					
ANR	40621	IdentifierDeclType	ulong		40609	0					
ANR	40622	Identifier	hash_value		40609	1					
ANR	40623	AssignmentExpression	"hash_value = hash ? hash : zend_inline_hash_func ( name , name_len + 1 )"		40609	2		=			
ANR	40624	Identifier	hash_value		40609	0					
ANR	40625	ConditionalExpression	"hash ? hash : zend_inline_hash_func ( name , name_len + 1 )"		40609	1					
ANR	40626	Condition	hash		40609	0					
ANR	40627	Identifier	hash		40609	0					
ANR	40628	Identifier	hash		40609	1					
ANR	40629	CallExpression	"zend_inline_hash_func ( name , name_len + 1 )"		40609	2					
ANR	40630	Callee	zend_inline_hash_func		40609	0					
ANR	40631	Identifier	zend_inline_hash_func		40609	0					
ANR	40632	ArgumentList	name		40609	1					
ANR	40633	Argument	name		40609	0					
ANR	40634	Identifier	name		40609	0					
ANR	40635	Argument	name_len + 1		40609	1					
ANR	40636	AdditiveExpression	name_len + 1		40609	0		+			
ANR	40637	Identifier	name_len		40609	0					
ANR	40638	PrimaryExpression	1		40609	1					
ANR	40639	WhileStatement	while ( i < op_array -> last_var )		40609	2					
ANR	40640	Condition	i < op_array -> last_var	304:8:10179:10200	40609	0	True				
ANR	40641	RelationalExpression	i < op_array -> last_var		40609	0		<			
ANR	40642	Identifier	i		40609	0					
ANR	40643	PtrMemberAccess	op_array -> last_var		40609	1					
ANR	40644	Identifier	op_array		40609	0					
ANR	40645	Identifier	last_var		40609	1					
ANR	40646	CompoundStatement		5:32:121:121	40609	1					
ANR	40647	IfStatement	"if ( op_array -> vars [ i ] . name == name || ( op_array -> vars [ i ] . hash_value == hash_value && op_array -> vars [ i ] . name_len == name_len && memcmp ( op_array -> vars [ i ] . name , name , name_len ) == 0 ) )"		40609	0					
ANR	40648	Condition	"op_array -> vars [ i ] . name == name || ( op_array -> vars [ i ] . hash_value == hash_value && op_array -> vars [ i ] . name_len == name_len && memcmp ( op_array -> vars [ i ] . name , name , name_len ) == 0 )"	305:6:10211:10405	40609	0	True				
ANR	40649	OrExpression	"op_array -> vars [ i ] . name == name || ( op_array -> vars [ i ] . hash_value == hash_value && op_array -> vars [ i ] . name_len == name_len && memcmp ( op_array -> vars [ i ] . name , name , name_len ) == 0 )"		40609	0		||			
ANR	40650	EqualityExpression	op_array -> vars [ i ] . name == name		40609	0		==			
ANR	40651	MemberAccess	op_array -> vars [ i ] . name		40609	0					
ANR	40652	ArrayIndexing	op_array -> vars [ i ]		40609	0					
ANR	40653	PtrMemberAccess	op_array -> vars		40609	0					
ANR	40654	Identifier	op_array		40609	0					
ANR	40655	Identifier	vars		40609	1					
ANR	40656	Identifier	i		40609	1					
ANR	40657	Identifier	name		40609	1					
ANR	40658	Identifier	name		40609	1					
ANR	40659	AndExpression	"op_array -> vars [ i ] . hash_value == hash_value && op_array -> vars [ i ] . name_len == name_len && memcmp ( op_array -> vars [ i ] . name , name , name_len ) == 0"		40609	1		&&			
ANR	40660	EqualityExpression	op_array -> vars [ i ] . hash_value == hash_value		40609	0		==			
ANR	40661	MemberAccess	op_array -> vars [ i ] . hash_value		40609	0					
ANR	40662	ArrayIndexing	op_array -> vars [ i ]		40609	0					
ANR	40663	PtrMemberAccess	op_array -> vars		40609	0					
ANR	40664	Identifier	op_array		40609	0					
ANR	40665	Identifier	vars		40609	1					
ANR	40666	Identifier	i		40609	1					
ANR	40667	Identifier	hash_value		40609	1					
ANR	40668	Identifier	hash_value		40609	1					
ANR	40669	AndExpression	"op_array -> vars [ i ] . name_len == name_len && memcmp ( op_array -> vars [ i ] . name , name , name_len ) == 0"		40609	1		&&			
ANR	40670	EqualityExpression	op_array -> vars [ i ] . name_len == name_len		40609	0		==			
ANR	40671	MemberAccess	op_array -> vars [ i ] . name_len		40609	0					
ANR	40672	ArrayIndexing	op_array -> vars [ i ]		40609	0					
ANR	40673	PtrMemberAccess	op_array -> vars		40609	0					
ANR	40674	Identifier	op_array		40609	0					
ANR	40675	Identifier	vars		40609	1					
ANR	40676	Identifier	i		40609	1					
ANR	40677	Identifier	name_len		40609	1					
ANR	40678	Identifier	name_len		40609	1					
ANR	40679	EqualityExpression	"memcmp ( op_array -> vars [ i ] . name , name , name_len ) == 0"		40609	1		==			
ANR	40680	CallExpression	"memcmp ( op_array -> vars [ i ] . name , name , name_len )"		40609	0					
ANR	40681	Callee	memcmp		40609	0					
ANR	40682	Identifier	memcmp		40609	0					
ANR	40683	ArgumentList	op_array -> vars [ i ] . name		40609	1					
ANR	40684	Argument	op_array -> vars [ i ] . name		40609	0					
ANR	40685	MemberAccess	op_array -> vars [ i ] . name		40609	0					
ANR	40686	ArrayIndexing	op_array -> vars [ i ]		40609	0					
ANR	40687	PtrMemberAccess	op_array -> vars		40609	0					
ANR	40688	Identifier	op_array		40609	0					
ANR	40689	Identifier	vars		40609	1					
ANR	40690	Identifier	i		40609	1					
ANR	40691	Identifier	name		40609	1					
ANR	40692	Argument	name		40609	1					
ANR	40693	Identifier	name		40609	0					
ANR	40694	Argument	name_len		40609	2					
ANR	40695	Identifier	name_len		40609	0					
ANR	40696	PrimaryExpression	0		40609	1					
ANR	40697	CompoundStatement		9:61:326:326	40609	1					
ANR	40698	ExpressionStatement	str_efree ( name )	309:3:10413:10428	40609	0	True				
ANR	40699	CallExpression	str_efree ( name )		40609	0					
ANR	40700	Callee	str_efree		40609	0					
ANR	40701	Identifier	str_efree		40609	0					
ANR	40702	ArgumentList	name		40609	1					
ANR	40703	Argument	name		40609	0					
ANR	40704	Identifier	name		40609	0					
ANR	40705	ReturnStatement	return i ;	310:3:10433:10441	40609	1	True				
ANR	40706	Identifier	i		40609	0					
ANR	40707	ExpressionStatement	i ++	312:2:10449:10452	40609	1	True				
ANR	40708	PostIncDecOperationExpression	i ++		40609	0					
ANR	40709	Identifier	i		40609	0					
ANR	40710	IncDec	++		40609	1					
ANR	40711	ExpressionStatement	i = op_array -> last_var	314:1:10458:10480	40609	3	True				
ANR	40712	AssignmentExpression	i = op_array -> last_var		40609	0		=			
ANR	40713	Identifier	i		40609	0					
ANR	40714	PtrMemberAccess	op_array -> last_var		40609	1					
ANR	40715	Identifier	op_array		40609	0					
ANR	40716	Identifier	last_var		40609	1					
ANR	40717	ExpressionStatement	op_array -> last_var ++	315:1:10483:10503	40609	4	True				
ANR	40718	PostIncDecOperationExpression	op_array -> last_var ++		40609	0					
ANR	40719	PtrMemberAccess	op_array -> last_var		40609	0					
ANR	40720	Identifier	op_array		40609	0					
ANR	40721	Identifier	last_var		40609	1					
ANR	40722	IncDec	++		40609	1					
ANR	40723	IfStatement	if ( op_array -> last_var > CG ( context ) . vars_size )		40609	5					
ANR	40724	Condition	op_array -> last_var > CG ( context ) . vars_size	316:5:10510:10551	40609	0	True				
ANR	40725	RelationalExpression	op_array -> last_var > CG ( context ) . vars_size		40609	0		>			
ANR	40726	PtrMemberAccess	op_array -> last_var		40609	0					
ANR	40727	Identifier	op_array		40609	0					
ANR	40728	Identifier	last_var		40609	1					
ANR	40729	MemberAccess	CG ( context ) . vars_size		40609	1					
ANR	40730	CallExpression	CG ( context )		40609	0					
ANR	40731	Callee	CG		40609	0					
ANR	40732	Identifier	CG		40609	0					
ANR	40733	ArgumentList	context		40609	1					
ANR	40734	Argument	context		40609	0					
ANR	40735	Identifier	context		40609	0					
ANR	40736	Identifier	vars_size		40609	1					
ANR	40737	CompoundStatement		17:49:472:472	40609	1					
ANR	40738	ExpressionStatement	CG ( context ) . vars_size += 16	317:2:10558:10585	40609	0	True				
ANR	40739	AssignmentExpression	CG ( context ) . vars_size += 16		40609	0		+=			
ANR	40740	MemberAccess	CG ( context ) . vars_size		40609	0					
ANR	40741	CallExpression	CG ( context )		40609	0					
ANR	40742	Callee	CG		40609	0					
ANR	40743	Identifier	CG		40609	0					
ANR	40744	ArgumentList	context		40609	1					
ANR	40745	Argument	context		40609	0					
ANR	40746	Identifier	context		40609	0					
ANR	40747	Identifier	vars_size		40609	1					
ANR	40748	PrimaryExpression	16		40609	1					
ANR	40749	ExpressionStatement	"op_array -> vars = erealloc ( op_array -> vars , CG ( context ) . vars_size * sizeof ( zend_compiled_variable ) )"	318:2:10601:10698	40609	1	True				
ANR	40750	AssignmentExpression	"op_array -> vars = erealloc ( op_array -> vars , CG ( context ) . vars_size * sizeof ( zend_compiled_variable ) )"		40609	0		=			
ANR	40751	PtrMemberAccess	op_array -> vars		40609	0					
ANR	40752	Identifier	op_array		40609	0					
ANR	40753	Identifier	vars		40609	1					
ANR	40754	CallExpression	"erealloc ( op_array -> vars , CG ( context ) . vars_size * sizeof ( zend_compiled_variable ) )"		40609	1					
ANR	40755	Callee	erealloc		40609	0					
ANR	40756	Identifier	erealloc		40609	0					
ANR	40757	ArgumentList	op_array -> vars		40609	1					
ANR	40758	Argument	op_array -> vars		40609	0					
ANR	40759	PtrMemberAccess	op_array -> vars		40609	0					
ANR	40760	Identifier	op_array		40609	0					
ANR	40761	Identifier	vars		40609	1					
ANR	40762	Argument	CG ( context ) . vars_size * sizeof ( zend_compiled_variable )		40609	1					
ANR	40763	MultiplicativeExpression	CG ( context ) . vars_size * sizeof ( zend_compiled_variable )		40609	0		*			
ANR	40764	MemberAccess	CG ( context ) . vars_size		40609	0					
ANR	40765	CallExpression	CG ( context )		40609	0					
ANR	40766	Callee	CG		40609	0					
ANR	40767	Identifier	CG		40609	0					
ANR	40768	ArgumentList	context		40609	1					
ANR	40769	Argument	context		40609	0					
ANR	40770	Identifier	context		40609	0					
ANR	40771	Identifier	vars_size		40609	1					
ANR	40772	SizeofExpression	sizeof ( zend_compiled_variable )		40609	1					
ANR	40773	Sizeof	sizeof		40609	0					
ANR	40774	SizeofOperand	zend_compiled_variable		40609	1					
ANR	40775	Statement	op_array	320:1:10704:10711	40609	6	True				
ANR	40776	Statement	->	320:9:10712:10713	40609	7	True				
ANR	40777	Statement	vars	320:11:10714:10717	40609	8	True				
ANR	40778	Statement	[	320:15:10718:10718	40609	9	True				
ANR	40779	Statement	i	320:16:10719:10719	40609	10	True				
ANR	40780	Statement	]	320:17:10720:10720	40609	11	True				
ANR	40781	Statement	.	320:18:10721:10721	40609	12	True				
ANR	40782	Statement	name	320:19:10722:10725	40609	13	True				
ANR	40783	Statement	=	320:24:10727:10727	40609	14	True				
ANR	40784	Statement	zend_new_interned_string	320:26:10729:10752	40609	15	True				
ANR	40785	Statement	(	320:50:10753:10753	40609	16	True				
ANR	40786	Statement	name	320:51:10754:10757	40609	17	True				
ANR	40787	Statement	","	320:55:10758:10758	40609	18	True				
ANR	40788	Statement	name_len	320:57:10760:10767	40609	19	True				
ANR	40789	Statement	+	320:66:10769:10769	40609	20	True				
ANR	40790	Statement	1	320:68:10771:10771	40609	21	True				
ANR	40791	Statement	","	320:69:10772:10772	40609	22	True				
ANR	40792	Statement	1	320:71:10774:10774	40609	23	True				
ANR	40793	Statement	TSRMLS_CC	320:73:10776:10784	40609	24	True				
ANR	40794	Statement	)	320:82:10785:10785	40609	25	True				
ANR	40795	ExpressionStatement		320:83:10786:10786	40609	26	True				
ANR	40796	ExpressionStatement	op_array -> vars [ i ] . name_len = name_len	321:1:10789:10826	40609	27	True				
ANR	40797	AssignmentExpression	op_array -> vars [ i ] . name_len = name_len		40609	0		=			
ANR	40798	MemberAccess	op_array -> vars [ i ] . name_len		40609	0					
ANR	40799	ArrayIndexing	op_array -> vars [ i ]		40609	0					
ANR	40800	PtrMemberAccess	op_array -> vars		40609	0					
ANR	40801	Identifier	op_array		40609	0					
ANR	40802	Identifier	vars		40609	1					
ANR	40803	Identifier	i		40609	1					
ANR	40804	Identifier	name_len		40609	1					
ANR	40805	Identifier	name_len		40609	1					
ANR	40806	ExpressionStatement	op_array -> vars [ i ] . hash_value = hash_value	322:1:10829:10870	40609	28	True				
ANR	40807	AssignmentExpression	op_array -> vars [ i ] . hash_value = hash_value		40609	0		=			
ANR	40808	MemberAccess	op_array -> vars [ i ] . hash_value		40609	0					
ANR	40809	ArrayIndexing	op_array -> vars [ i ]		40609	0					
ANR	40810	PtrMemberAccess	op_array -> vars		40609	0					
ANR	40811	Identifier	op_array		40609	0					
ANR	40812	Identifier	vars		40609	1					
ANR	40813	Identifier	i		40609	1					
ANR	40814	Identifier	hash_value		40609	1					
ANR	40815	Identifier	hash_value		40609	1					
ANR	40816	ReturnStatement	return i ;	323:1:10873:10881	40609	29	True				
ANR	40817	Identifier	i		40609	0					
ANR	40818	ReturnType	static int		40609	1					
ANR	40819	Identifier	lookup_cv		40609	2					
ANR	40820	ParameterList	"zend_op_array * op_array , char * name , int name_len , ulong hash TSRMLS_DC"		40609	3					
ANR	40821	Parameter	zend_op_array * op_array	299:21:9998:10020	40609	0	True				
ANR	40822	ParameterType	zend_op_array *		40609	0					
ANR	40823	Identifier	op_array		40609	1					
ANR	40824	Parameter	char * name	299:46:10023:10032	40609	1	True				
ANR	40825	ParameterType	char *		40609	0					
ANR	40826	Identifier	name		40609	1					
ANR	40827	Parameter	int name_len	299:58:10035:10046	40609	2	True				
ANR	40828	ParameterType	int		40609	0					
ANR	40829	Identifier	name_len		40609	1					
ANR	40830	Parameter	ulong hash TSRMLS_DC	299:72:10049:10068	40609	3	True				
ANR	40831	ParameterType	ulong hash		40609	0					
ANR	40832	Identifier	TSRMLS_DC		40609	1					
ANR	40833	CFGEntryNode	ENTRY		40609		True				
ANR	40834	CFGExitNode	EXIT		40609		True				
ANR	40835	Symbol	op_array -> vars [ i ] . name		40609						
ANR	40836	Symbol	CG ( context ) . vars_size		40609						
ANR	40837	Symbol	op_array -> vars		40609						
ANR	40838	Symbol	CG		40609						
ANR	40839	Symbol	op_array -> last_var		40609						
ANR	40840	Symbol	i		40609						
ANR	40841	Symbol	TSRMLS_DC		40609						
ANR	40842	Symbol	zend_inline_hash_func		40609						
ANR	40843	Symbol	* op_array		40609						
ANR	40844	Symbol	memcmp		40609						
ANR	40845	Symbol	* op_array -> vars		40609						
ANR	40846	Symbol	* i		40609						
ANR	40847	Symbol	op_array -> vars [ i ] . name_len		40609						
ANR	40848	Symbol	name		40609						
ANR	40849	Symbol	context		40609						
ANR	40850	Symbol	name_len		40609						
ANR	40851	Symbol	op_array -> vars [ i ] . hash_value		40609						
ANR	40852	Symbol	hash_value		40609						
ANR	40853	Symbol	* * op_array		40609						
ANR	40854	Symbol	erealloc		40609						
ANR	40855	Symbol	op_array		40609						
ANR	40856	Symbol	hash		40609						
ANR	40857	Function	zend_del_literal	327:0:10896:11128							
ANR	40858	FunctionDef	"zend_del_literal (zend_op_array * op_array , int n)"		40857	0					
ANR	40859	CompoundStatement		328:0:10960:11128	40857	0					
ANR	40860	ExpressionStatement	"zval_dtor ( & CONSTANT_EX ( op_array , n ) )"	329:1:10963:10999	40857	0	True				
ANR	40861	CallExpression	"zval_dtor ( & CONSTANT_EX ( op_array , n ) )"		40857	0					
ANR	40862	Callee	zval_dtor		40857	0					
ANR	40863	Identifier	zval_dtor		40857	0					
ANR	40864	ArgumentList	"& CONSTANT_EX ( op_array , n )"		40857	1					
ANR	40865	Argument	"& CONSTANT_EX ( op_array , n )"		40857	0					
ANR	40866	UnaryOperationExpression	"& CONSTANT_EX ( op_array , n )"		40857	0					
ANR	40867	UnaryOperator	&		40857	0					
ANR	40868	CallExpression	"CONSTANT_EX ( op_array , n )"		40857	1					
ANR	40869	Callee	CONSTANT_EX		40857	0					
ANR	40870	Identifier	CONSTANT_EX		40857	0					
ANR	40871	ArgumentList	op_array		40857	1					
ANR	40872	Argument	op_array		40857	0					
ANR	40873	Identifier	op_array		40857	0					
ANR	40874	Argument	n		40857	1					
ANR	40875	Identifier	n		40857	0					
ANR	40876	IfStatement	if ( n + 1 == op_array -> last_literal )		40857	1					
ANR	40877	Condition	n + 1 == op_array -> last_literal	330:5:11006:11036	40857	0	True				
ANR	40878	EqualityExpression	n + 1 == op_array -> last_literal		40857	0		==			
ANR	40879	AdditiveExpression	n + 1		40857	0		+			
ANR	40880	Identifier	n		40857	0					
ANR	40881	PrimaryExpression	1		40857	1					
ANR	40882	PtrMemberAccess	op_array -> last_literal		40857	1					
ANR	40883	Identifier	op_array		40857	0					
ANR	40884	Identifier	last_literal		40857	1					
ANR	40885	CompoundStatement		3:38:78:78	40857	1					
ANR	40886	ExpressionStatement	op_array -> last_literal --	331:2:11043:11067	40857	0	True				
ANR	40887	PostIncDecOperationExpression	op_array -> last_literal --		40857	0					
ANR	40888	PtrMemberAccess	op_array -> last_literal		40857	0					
ANR	40889	Identifier	op_array		40857	0					
ANR	40890	Identifier	last_literal		40857	1					
ANR	40891	IncDec	--		40857	1					
ANR	40892	ElseStatement	else		40857	0					
ANR	40893	CompoundStatement		5:8:116:116	40857	0					
ANR	40894	ExpressionStatement	"Z_TYPE ( CONSTANT_EX ( op_array , n ) ) = IS_NULL"	333:2:11081:11123	40857	0	True				
ANR	40895	AssignmentExpression	"Z_TYPE ( CONSTANT_EX ( op_array , n ) ) = IS_NULL"		40857	0		=			
ANR	40896	CallExpression	"Z_TYPE ( CONSTANT_EX ( op_array , n ) )"		40857	0					
ANR	40897	Callee	Z_TYPE		40857	0					
ANR	40898	Identifier	Z_TYPE		40857	0					
ANR	40899	ArgumentList	"CONSTANT_EX ( op_array , n )"		40857	1					
ANR	40900	Argument	"CONSTANT_EX ( op_array , n )"		40857	0					
ANR	40901	CallExpression	"CONSTANT_EX ( op_array , n )"		40857	0					
ANR	40902	Callee	CONSTANT_EX		40857	0					
ANR	40903	Identifier	CONSTANT_EX		40857	0					
ANR	40904	ArgumentList	op_array		40857	1					
ANR	40905	Argument	op_array		40857	0					
ANR	40906	Identifier	op_array		40857	0					
ANR	40907	Argument	n		40857	1					
ANR	40908	Identifier	n		40857	0					
ANR	40909	Identifier	IS_NULL		40857	1					
ANR	40910	ReturnType	void		40857	1					
ANR	40911	Identifier	zend_del_literal		40857	2					
ANR	40912	ParameterList	"zend_op_array * op_array , int n"		40857	3					
ANR	40913	Parameter	zend_op_array * op_array	327:22:10918:10940	40857	0	True				
ANR	40914	ParameterType	zend_op_array *		40857	0					
ANR	40915	Identifier	op_array		40857	1					
ANR	40916	Parameter	int n	327:47:10943:10947	40857	1	True				
ANR	40917	ParameterType	int		40857	0					
ANR	40918	Identifier	n		40857	1					
ANR	40919	CFGEntryNode	ENTRY		40857		True				
ANR	40920	CFGExitNode	EXIT		40857		True				
ANR	40921	Symbol	& CONSTANT_EX		40857						
ANR	40922	Symbol	IS_NULL		40857						
ANR	40923	Symbol	op_array -> last_literal		40857						
ANR	40924	Symbol	CONSTANT_EX		40857						
ANR	40925	Symbol	Z_TYPE		40857						
ANR	40926	Symbol	op_array		40857						
ANR	40927	Symbol	n		40857						
ANR	40928	Symbol	* op_array		40857						
ANR	40929	Function	zend_insert_literal	339:0:11214:11802							
ANR	40930	FunctionDef	"zend_insert_literal (zend_op_array * op_array , const zval * zv , int literal_position TSRMLS_DC)"		40929	0					
ANR	40931	CompoundStatement		340:0:11336:11802	40929	0					
ANR	40932	IfStatement	if ( Z_TYPE_P ( zv ) == IS_STRING || Z_TYPE_P ( zv ) == IS_CONSTANT )		40929	0					
ANR	40933	Condition	Z_TYPE_P ( zv ) == IS_STRING || Z_TYPE_P ( zv ) == IS_CONSTANT	341:5:11343:11398	40929	0	True				
ANR	40934	OrExpression	Z_TYPE_P ( zv ) == IS_STRING || Z_TYPE_P ( zv ) == IS_CONSTANT		40929	0		||			
ANR	40935	EqualityExpression	Z_TYPE_P ( zv ) == IS_STRING		40929	0		==			
ANR	40936	CallExpression	Z_TYPE_P ( zv )		40929	0					
ANR	40937	Callee	Z_TYPE_P		40929	0					
ANR	40938	Identifier	Z_TYPE_P		40929	0					
ANR	40939	ArgumentList	zv		40929	1					
ANR	40940	Argument	zv		40929	0					
ANR	40941	Identifier	zv		40929	0					
ANR	40942	Identifier	IS_STRING		40929	1					
ANR	40943	EqualityExpression	Z_TYPE_P ( zv ) == IS_CONSTANT		40929	1		==			
ANR	40944	CallExpression	Z_TYPE_P ( zv )		40929	0					
ANR	40945	Callee	Z_TYPE_P		40929	0					
ANR	40946	Identifier	Z_TYPE_P		40929	0					
ANR	40947	ArgumentList	zv		40929	1					
ANR	40948	Argument	zv		40929	0					
ANR	40949	Identifier	zv		40929	0					
ANR	40950	Identifier	IS_CONSTANT		40929	1					
ANR	40951	CompoundStatement		3:2:68:87	40929	1					
ANR	40952	IdentifierDeclStatement	zval * z = ( zval * ) zv ;	342:2:11405:11424	40929	0	True				
ANR	40953	IdentifierDecl	* z = ( zval * ) zv		40929	0					
ANR	40954	IdentifierDeclType	zval *		40929	0					
ANR	40955	Identifier	z		40929	1					
ANR	40956	AssignmentExpression	* z = ( zval * ) zv		40929	2		=			
ANR	40957	Identifier	z		40929	0					
ANR	40958	CastExpression	( zval * ) zv		40929	1					
ANR	40959	CastTarget	zval *		40929	0					
ANR	40960	Identifier	zv		40929	1					
ANR	40961	Statement	Z_STRVAL_P	343:2:11428:11437	40929	1	True				
ANR	40962	Statement	(	343:12:11438:11438	40929	2	True				
ANR	40963	Statement	z	343:13:11439:11439	40929	3	True				
ANR	40964	Statement	)	343:14:11440:11440	40929	4	True				
ANR	40965	Statement	=	343:16:11442:11442	40929	5	True				
ANR	40966	Statement	(	343:18:11444:11444	40929	6	True				
ANR	40967	Statement	char	343:19:11445:11448	40929	7	True				
ANR	40968	Statement	*	343:23:11449:11449	40929	8	True				
ANR	40969	Statement	)	343:24:11450:11450	40929	9	True				
ANR	40970	Statement	zend_new_interned_string	343:25:11451:11474	40929	10	True				
ANR	40971	Statement	(	343:49:11475:11475	40929	11	True				
ANR	40972	Statement	Z_STRVAL_P	343:50:11476:11485	40929	12	True				
ANR	40973	Statement	(	343:60:11486:11486	40929	13	True				
ANR	40974	Statement	zv	343:61:11487:11488	40929	14	True				
ANR	40975	Statement	)	343:63:11489:11489	40929	15	True				
ANR	40976	Statement	","	343:64:11490:11490	40929	16	True				
ANR	40977	Statement	Z_STRLEN_P	343:66:11492:11501	40929	17	True				
ANR	40978	Statement	(	343:76:11502:11502	40929	18	True				
ANR	40979	Statement	zv	343:77:11503:11504	40929	19	True				
ANR	40980	Statement	)	343:79:11505:11505	40929	20	True				
ANR	40981	Statement	+	343:81:11507:11507	40929	21	True				
ANR	40982	Statement	1	343:83:11509:11509	40929	22	True				
ANR	40983	Statement	","	343:84:11510:11510	40929	23	True				
ANR	40984	Statement	1	343:86:11512:11512	40929	24	True				
ANR	40985	Statement	TSRMLS_CC	343:88:11514:11522	40929	25	True				
ANR	40986	Statement	)	343:97:11523:11523	40929	26	True				
ANR	40987	ExpressionStatement		343:98:11524:11524	40929	27	True				
ANR	40988	ExpressionStatement	"CONSTANT_EX ( op_array , literal_position ) = * zv"	345:1:11530:11575	40929	1	True				
ANR	40989	AssignmentExpression	"CONSTANT_EX ( op_array , literal_position ) = * zv"		40929	0		=			
ANR	40990	CallExpression	"CONSTANT_EX ( op_array , literal_position )"		40929	0					
ANR	40991	Callee	CONSTANT_EX		40929	0					
ANR	40992	Identifier	CONSTANT_EX		40929	0					
ANR	40993	ArgumentList	op_array		40929	1					
ANR	40994	Argument	op_array		40929	0					
ANR	40995	Identifier	op_array		40929	0					
ANR	40996	Argument	literal_position		40929	1					
ANR	40997	Identifier	literal_position		40929	0					
ANR	40998	UnaryOperationExpression	* zv		40929	1					
ANR	40999	UnaryOperator	*		40929	0					
ANR	41000	Identifier	zv		40929	1					
ANR	41001	ExpressionStatement	"Z_SET_REFCOUNT ( CONSTANT_EX ( op_array , literal_position ) , 2 )"	346:1:11578:11636	40929	2	True				
ANR	41002	CallExpression	"Z_SET_REFCOUNT ( CONSTANT_EX ( op_array , literal_position ) , 2 )"		40929	0					
ANR	41003	Callee	Z_SET_REFCOUNT		40929	0					
ANR	41004	Identifier	Z_SET_REFCOUNT		40929	0					
ANR	41005	ArgumentList	"CONSTANT_EX ( op_array , literal_position )"		40929	1					
ANR	41006	Argument	"CONSTANT_EX ( op_array , literal_position )"		40929	0					
ANR	41007	CallExpression	"CONSTANT_EX ( op_array , literal_position )"		40929	0					
ANR	41008	Callee	CONSTANT_EX		40929	0					
ANR	41009	Identifier	CONSTANT_EX		40929	0					
ANR	41010	ArgumentList	op_array		40929	1					
ANR	41011	Argument	op_array		40929	0					
ANR	41012	Identifier	op_array		40929	0					
ANR	41013	Argument	literal_position		40929	1					
ANR	41014	Identifier	literal_position		40929	0					
ANR	41015	Argument	2		40929	1					
ANR	41016	PrimaryExpression	2		40929	0					
ANR	41017	ExpressionStatement	"Z_SET_ISREF ( CONSTANT_EX ( op_array , literal_position ) )"	347:1:11639:11691	40929	3	True				
ANR	41018	CallExpression	"Z_SET_ISREF ( CONSTANT_EX ( op_array , literal_position ) )"		40929	0					
ANR	41019	Callee	Z_SET_ISREF		40929	0					
ANR	41020	Identifier	Z_SET_ISREF		40929	0					
ANR	41021	ArgumentList	"CONSTANT_EX ( op_array , literal_position )"		40929	1					
ANR	41022	Argument	"CONSTANT_EX ( op_array , literal_position )"		40929	0					
ANR	41023	CallExpression	"CONSTANT_EX ( op_array , literal_position )"		40929	0					
ANR	41024	Callee	CONSTANT_EX		40929	0					
ANR	41025	Identifier	CONSTANT_EX		40929	0					
ANR	41026	ArgumentList	op_array		40929	1					
ANR	41027	Argument	op_array		40929	0					
ANR	41028	Identifier	op_array		40929	0					
ANR	41029	Argument	literal_position		40929	1					
ANR	41030	Identifier	literal_position		40929	0					
ANR	41031	ExpressionStatement	op_array -> literals [ literal_position ] . hash_value = 0	348:1:11694:11745	40929	4	True				
ANR	41032	AssignmentExpression	op_array -> literals [ literal_position ] . hash_value = 0		40929	0		=			
ANR	41033	MemberAccess	op_array -> literals [ literal_position ] . hash_value		40929	0					
ANR	41034	ArrayIndexing	op_array -> literals [ literal_position ]		40929	0					
ANR	41035	PtrMemberAccess	op_array -> literals		40929	0					
ANR	41036	Identifier	op_array		40929	0					
ANR	41037	Identifier	literals		40929	1					
ANR	41038	Identifier	literal_position		40929	1					
ANR	41039	Identifier	hash_value		40929	1					
ANR	41040	PrimaryExpression	0		40929	1					
ANR	41041	ExpressionStatement	op_array -> literals [ literal_position ] . cache_slot = - 1	349:1:11748:11800	40929	5	True				
ANR	41042	AssignmentExpression	op_array -> literals [ literal_position ] . cache_slot = - 1		40929	0		=			
ANR	41043	MemberAccess	op_array -> literals [ literal_position ] . cache_slot		40929	0					
ANR	41044	ArrayIndexing	op_array -> literals [ literal_position ]		40929	0					
ANR	41045	PtrMemberAccess	op_array -> literals		40929	0					
ANR	41046	Identifier	op_array		40929	0					
ANR	41047	Identifier	literals		40929	1					
ANR	41048	Identifier	literal_position		40929	1					
ANR	41049	Identifier	cache_slot		40929	1					
ANR	41050	UnaryOperationExpression	- 1		40929	1					
ANR	41051	UnaryOperator	-		40929	0					
ANR	41052	PrimaryExpression	1		40929	1					
ANR	41053	ReturnType	static inline void		40929	1					
ANR	41054	Identifier	zend_insert_literal		40929	2					
ANR	41055	ParameterList	"zend_op_array * op_array , const zval * zv , int literal_position TSRMLS_DC"		40929	3					
ANR	41056	Parameter	zend_op_array * op_array	339:39:11253:11275	40929	0	True				
ANR	41057	ParameterType	zend_op_array *		40929	0					
ANR	41058	Identifier	op_array		40929	1					
ANR	41059	Parameter	const zval * zv	339:64:11278:11291	40929	1	True				
ANR	41060	ParameterType	const zval *		40929	0					
ANR	41061	Identifier	zv		40929	1					
ANR	41062	Parameter	int literal_position TSRMLS_DC	339:80:11294:11323	40929	2	True				
ANR	41063	ParameterType	int literal_position		40929	0					
ANR	41064	Identifier	TSRMLS_DC		40929	1					
ANR	41065	CFGEntryNode	ENTRY		40929		True				
ANR	41066	CFGExitNode	EXIT		40929		True				
ANR	41067	Symbol	IS_CONSTANT		40929						
ANR	41068	Symbol	* zv		40929						
ANR	41069	Symbol	CONSTANT_EX		40929						
ANR	41070	Symbol	Z_TYPE_P		40929						
ANR	41071	Symbol	TSRMLS_DC		40929						
ANR	41072	Symbol	* op_array		40929						
ANR	41073	Symbol	* op_array -> literals		40929						
ANR	41074	Symbol	* literal_position		40929						
ANR	41075	Symbol	op_array -> literals		40929						
ANR	41076	Symbol	literal_position		40929						
ANR	41077	Symbol	op_array -> literals [ literal_position ] . cache_slot		40929						
ANR	41078	Symbol	z		40929						
ANR	41079	Symbol	IS_STRING		40929						
ANR	41080	Symbol	zv		40929						
ANR	41081	Symbol	* * op_array		40929						
ANR	41082	Symbol	op_array -> literals [ literal_position ] . hash_value		40929						
ANR	41083	Symbol	op_array		40929						
ANR	41084	DeclStmt									
ANR	41085	Decl							int	int	i
ANR	41086	DeclStmt									
ANR	41087	Decl							int	int	i
ANR	41088	DeclStmt									
ANR	41089	Decl							int	int	ret
ANR	41090	DeclStmt									
ANR	41091	Decl							char	char *	lc_name
ANR	41092	DeclStmt									
ANR	41093	Decl							zval	zval	c
ANR	41094	DeclStmt									
ANR	41095	Decl							int	int	lc_literal
ANR	41096	DeclStmt									
ANR	41097	Decl							int	int	ret
ANR	41098	DeclStmt									
ANR	41099	Decl							char	char *	lc_name
ANR	41100	DeclStmt									
ANR	41101	Decl							const char	const char *	ns_separator
ANR	41102	DeclStmt									
ANR	41103	Decl							int	int	lc_len
ANR	41104	DeclStmt									
ANR	41105	Decl							zval	zval	c
ANR	41106	DeclStmt									
ANR	41107	Decl							int	int	lc_literal
ANR	41108	DeclStmt									
ANR	41109	Decl							int	int	ret
ANR	41110	DeclStmt									
ANR	41111	Decl							char	char *	lc_name
ANR	41112	DeclStmt									
ANR	41113	Decl							int	int	lc_len
ANR	41114	DeclStmt									
ANR	41115	Decl							zval	zval	c
ANR	41116	DeclStmt									
ANR	41117	Decl							int	int	lc_literal
ANR	41118	Function	zend_add_const_name_literal	480:0:15777:17805							
ANR	41119	FunctionDef	"zend_add_const_name_literal (zend_op_array * op_array , const zval * zv , int unqualified TSRMLS_DC)"		41118	0					
ANR	41120	CompoundStatement		481:0:15887:17805	41118	0					
ANR	41121	IdentifierDeclStatement	"int ret , tmp_literal ;"	482:1:15890:15910	41118	0	True				
ANR	41122	IdentifierDecl	ret		41118	0					
ANR	41123	IdentifierDeclType	int		41118	0					
ANR	41124	Identifier	ret		41118	1					
ANR	41125	IdentifierDecl	tmp_literal		41118	1					
ANR	41126	IdentifierDeclType	int		41118	0					
ANR	41127	Identifier	tmp_literal		41118	1					
ANR	41128	IdentifierDeclStatement	"char * name , * tmp_name ;"	483:1:15913:15934	41118	1	True				
ANR	41129	IdentifierDecl	* name		41118	0					
ANR	41130	IdentifierDeclType	char *		41118	0					
ANR	41131	Identifier	name		41118	1					
ANR	41132	IdentifierDecl	* tmp_name		41118	1					
ANR	41133	IdentifierDeclType	char *		41118	0					
ANR	41134	Identifier	tmp_name		41118	1					
ANR	41135	IdentifierDeclStatement	const char * ns_separator ;	484:1:15937:15961	41118	2	True				
ANR	41136	IdentifierDecl	* ns_separator		41118	0					
ANR	41137	IdentifierDeclType	const char *		41118	0					
ANR	41138	Identifier	ns_separator		41118	1					
ANR	41139	IdentifierDeclStatement	"int name_len , ns_len ;"	485:1:15964:15984	41118	3	True				
ANR	41140	IdentifierDecl	name_len		41118	0					
ANR	41141	IdentifierDeclType	int		41118	0					
ANR	41142	Identifier	name_len		41118	1					
ANR	41143	IdentifierDecl	ns_len		41118	1					
ANR	41144	IdentifierDeclType	int		41118	0					
ANR	41145	Identifier	ns_len		41118	1					
ANR	41146	IdentifierDeclStatement	zval c ;	486:1:15987:15993	41118	4	True				
ANR	41147	IdentifierDecl	c		41118	0					
ANR	41148	IdentifierDeclType	zval		41118	0					
ANR	41149	Identifier	c		41118	1					
ANR	41150	IfStatement	if ( op_array -> last_literal > 0 && & op_array -> literals [ op_array -> last_literal - 1 ] . constant == zv && op_array -> literals [ op_array -> last_literal - 1 ] . cache_slot == - 1 )		41118	5					
ANR	41151	Condition	op_array -> last_literal > 0 && & op_array -> literals [ op_array -> last_literal - 1 ] . constant == zv && op_array -> literals [ op_array -> last_literal - 1 ] . cache_slot == - 1	488:5:16001:16169	41118	0	True				
ANR	41152	AndExpression	op_array -> last_literal > 0 && & op_array -> literals [ op_array -> last_literal - 1 ] . constant == zv && op_array -> literals [ op_array -> last_literal - 1 ] . cache_slot == - 1		41118	0		&&			
ANR	41153	RelationalExpression	op_array -> last_literal > 0		41118	0		>			
ANR	41154	PtrMemberAccess	op_array -> last_literal		41118	0					
ANR	41155	Identifier	op_array		41118	0					
ANR	41156	Identifier	last_literal		41118	1					
ANR	41157	PrimaryExpression	0		41118	1					
ANR	41158	AndExpression	& op_array -> literals [ op_array -> last_literal - 1 ] . constant == zv && op_array -> literals [ op_array -> last_literal - 1 ] . cache_slot == - 1		41118	1		&&			
ANR	41159	EqualityExpression	& op_array -> literals [ op_array -> last_literal - 1 ] . constant == zv		41118	0		==			
ANR	41160	UnaryOperationExpression	& op_array -> literals [ op_array -> last_literal - 1 ] . constant		41118	0					
ANR	41161	UnaryOperator	&		41118	0					
ANR	41162	MemberAccess	op_array -> literals [ op_array -> last_literal - 1 ] . constant		41118	1					
ANR	41163	ArrayIndexing	op_array -> literals [ op_array -> last_literal - 1 ]		41118	0					
ANR	41164	PtrMemberAccess	op_array -> literals		41118	0					
ANR	41165	Identifier	op_array		41118	0					
ANR	41166	Identifier	literals		41118	1					
ANR	41167	AdditiveExpression	op_array -> last_literal - 1		41118	1		-			
ANR	41168	PtrMemberAccess	op_array -> last_literal		41118	0					
ANR	41169	Identifier	op_array		41118	0					
ANR	41170	Identifier	last_literal		41118	1					
ANR	41171	PrimaryExpression	1		41118	1					
ANR	41172	Identifier	constant		41118	1					
ANR	41173	Identifier	zv		41118	1					
ANR	41174	EqualityExpression	op_array -> literals [ op_array -> last_literal - 1 ] . cache_slot == - 1		41118	1		==			
ANR	41175	MemberAccess	op_array -> literals [ op_array -> last_literal - 1 ] . cache_slot		41118	0					
ANR	41176	ArrayIndexing	op_array -> literals [ op_array -> last_literal - 1 ]		41118	0					
ANR	41177	PtrMemberAccess	op_array -> literals		41118	0					
ANR	41178	Identifier	op_array		41118	0					
ANR	41179	Identifier	literals		41118	1					
ANR	41180	AdditiveExpression	op_array -> last_literal - 1		41118	1		-			
ANR	41181	PtrMemberAccess	op_array -> last_literal		41118	0					
ANR	41182	Identifier	op_array		41118	0					
ANR	41183	Identifier	last_literal		41118	1					
ANR	41184	PrimaryExpression	1		41118	1					
ANR	41185	Identifier	cache_slot		41118	1					
ANR	41186	UnaryOperationExpression	- 1		41118	1					
ANR	41187	UnaryOperator	-		41118	0					
ANR	41188	PrimaryExpression	1		41118	1					
ANR	41189	CompoundStatement		10:70:284:284	41118	1					
ANR	41190	ExpressionStatement	ret = op_array -> last_literal - 1	492:2:16243:16275	41118	0	True				
ANR	41191	AssignmentExpression	ret = op_array -> last_literal - 1		41118	0		=			
ANR	41192	Identifier	ret		41118	0					
ANR	41193	AdditiveExpression	op_array -> last_literal - 1		41118	1		-			
ANR	41194	PtrMemberAccess	op_array -> last_literal		41118	0					
ANR	41195	Identifier	op_array		41118	0					
ANR	41196	Identifier	last_literal		41118	1					
ANR	41197	PrimaryExpression	1		41118	1					
ANR	41198	ElseStatement	else		41118	0					
ANR	41199	CompoundStatement		13:8:397:397	41118	0					
ANR	41200	Statement	ret	494:2:16289:16291	41118	0	True				
ANR	41201	Statement	=	494:6:16293:16293	41118	1	True				
ANR	41202	Statement	zend_add_literal	494:8:16295:16310	41118	2	True				
ANR	41203	Statement	(	494:24:16311:16311	41118	3	True				
ANR	41204	Statement	op_array	494:25:16312:16319	41118	4	True				
ANR	41205	Statement	","	494:33:16320:16320	41118	5	True				
ANR	41206	Statement	zv	494:35:16322:16323	41118	6	True				
ANR	41207	Statement	TSRMLS_CC	494:38:16325:16333	41118	7	True				
ANR	41208	Statement	)	494:47:16334:16334	41118	8	True				
ANR	41209	ExpressionStatement		494:48:16335:16335	41118	9	True				
ANR	41210	IfStatement	if ( Z_STRVAL_P ( zv ) [ 0 ] == '\\\\' )		41118	6					
ANR	41211	Condition	Z_STRVAL_P ( zv ) [ 0 ] == '\\\\'	498:5:16371:16395	41118	0	True				
ANR	41212	EqualityExpression	Z_STRVAL_P ( zv ) [ 0 ] == '\\\\'		41118	0		==			
ANR	41213	ArrayIndexing	Z_STRVAL_P ( zv ) [ 0 ]		41118	0					
ANR	41214	CallExpression	Z_STRVAL_P ( zv )		41118	0					
ANR	41215	Callee	Z_STRVAL_P		41118	0					
ANR	41216	Identifier	Z_STRVAL_P		41118	0					
ANR	41217	ArgumentList	zv		41118	1					
ANR	41218	Argument	zv		41118	0					
ANR	41219	Identifier	zv		41118	0					
ANR	41220	PrimaryExpression	0		41118	1					
ANR	41221	PrimaryExpression	'\\\\'		41118	1					
ANR	41222	CompoundStatement		18:32:510:510	41118	1					
ANR	41223	ExpressionStatement	name_len = Z_STRLEN_P ( zv ) - 1	499:2:16402:16431	41118	0	True				
ANR	41224	AssignmentExpression	name_len = Z_STRLEN_P ( zv ) - 1		41118	0		=			
ANR	41225	Identifier	name_len		41118	0					
ANR	41226	AdditiveExpression	Z_STRLEN_P ( zv ) - 1		41118	1		-			
ANR	41227	CallExpression	Z_STRLEN_P ( zv )		41118	0					
ANR	41228	Callee	Z_STRLEN_P		41118	0					
ANR	41229	Identifier	Z_STRLEN_P		41118	0					
ANR	41230	ArgumentList	zv		41118	1					
ANR	41231	Argument	zv		41118	0					
ANR	41232	Identifier	zv		41118	0					
ANR	41233	PrimaryExpression	1		41118	1					
ANR	41234	ExpressionStatement	name = Z_STRVAL_P ( zv ) + 1	500:2:16435:16460	41118	1	True				
ANR	41235	AssignmentExpression	name = Z_STRVAL_P ( zv ) + 1		41118	0		=			
ANR	41236	Identifier	name		41118	0					
ANR	41237	AdditiveExpression	Z_STRVAL_P ( zv ) + 1		41118	1		+			
ANR	41238	CallExpression	Z_STRVAL_P ( zv )		41118	0					
ANR	41239	Callee	Z_STRVAL_P		41118	0					
ANR	41240	Identifier	Z_STRVAL_P		41118	0					
ANR	41241	ArgumentList	zv		41118	1					
ANR	41242	Argument	zv		41118	0					
ANR	41243	Identifier	zv		41118	0					
ANR	41244	PrimaryExpression	1		41118	1					
ANR	41245	ElseStatement	else		41118	0					
ANR	41246	CompoundStatement		21:8:582:582	41118	0					
ANR	41247	ExpressionStatement	name_len = Z_STRLEN_P ( zv )	502:2:16474:16499	41118	0	True				
ANR	41248	AssignmentExpression	name_len = Z_STRLEN_P ( zv )		41118	0		=			
ANR	41249	Identifier	name_len		41118	0					
ANR	41250	CallExpression	Z_STRLEN_P ( zv )		41118	1					
ANR	41251	Callee	Z_STRLEN_P		41118	0					
ANR	41252	Identifier	Z_STRLEN_P		41118	0					
ANR	41253	ArgumentList	zv		41118	1					
ANR	41254	Argument	zv		41118	0					
ANR	41255	Identifier	zv		41118	0					
ANR	41256	ExpressionStatement	name = Z_STRVAL_P ( zv )	503:2:16503:16524	41118	1	True				
ANR	41257	AssignmentExpression	name = Z_STRVAL_P ( zv )		41118	0		=			
ANR	41258	Identifier	name		41118	0					
ANR	41259	CallExpression	Z_STRVAL_P ( zv )		41118	1					
ANR	41260	Callee	Z_STRVAL_P		41118	0					
ANR	41261	Identifier	Z_STRVAL_P		41118	0					
ANR	41262	ArgumentList	zv		41118	1					
ANR	41263	Argument	zv		41118	0					
ANR	41264	Identifier	zv		41118	0					
ANR	41265	ExpressionStatement	"ns_separator = zend_memrchr ( name , '\\\\' , name_len )"	505:1:16530:16579	41118	7	True				
ANR	41266	AssignmentExpression	"ns_separator = zend_memrchr ( name , '\\\\' , name_len )"		41118	0		=			
ANR	41267	Identifier	ns_separator		41118	0					
ANR	41268	CallExpression	"zend_memrchr ( name , '\\\\' , name_len )"		41118	1					
ANR	41269	Callee	zend_memrchr		41118	0					
ANR	41270	Identifier	zend_memrchr		41118	0					
ANR	41271	ArgumentList	name		41118	1					
ANR	41272	Argument	name		41118	0					
ANR	41273	Identifier	name		41118	0					
ANR	41274	Argument	'\\\\'		41118	1					
ANR	41275	PrimaryExpression	'\\\\'		41118	0					
ANR	41276	Argument	name_len		41118	2					
ANR	41277	Identifier	name_len		41118	0					
ANR	41278	IfStatement	if ( ns_separator )		41118	8					
ANR	41279	Condition	ns_separator	506:5:16586:16597	41118	0	True				
ANR	41280	Identifier	ns_separator		41118	0					
ANR	41281	CompoundStatement		26:19:712:712	41118	1					
ANR	41282	ExpressionStatement	ns_len = ns_separator - name	507:2:16604:16632	41118	0	True				
ANR	41283	AssignmentExpression	ns_len = ns_separator - name		41118	0		=			
ANR	41284	Identifier	ns_len		41118	0					
ANR	41285	AdditiveExpression	ns_separator - name		41118	1		-			
ANR	41286	Identifier	ns_separator		41118	0					
ANR	41287	Identifier	name		41118	1					
ANR	41288	ElseStatement	else		41118	0					
ANR	41289	CompoundStatement		28:8:754:754	41118	0					
ANR	41290	ExpressionStatement	ns_len = 0	509:2:16646:16656	41118	0	True				
ANR	41291	AssignmentExpression	ns_len = 0		41118	0		=			
ANR	41292	Identifier	ns_len		41118	0					
ANR	41293	PrimaryExpression	0		41118	1					
ANR	41294	IfStatement	if ( ns_len )		41118	9					
ANR	41295	Condition	ns_len	512:5:16667:16672	41118	0	True				
ANR	41296	Identifier	ns_len		41118	0					
ANR	41297	CompoundStatement		32:13:787:787	41118	1					
ANR	41298	ExpressionStatement	"tmp_name = estrndup ( name , name_len )"	514:2:16738:16773	41118	0	True				
ANR	41299	AssignmentExpression	"tmp_name = estrndup ( name , name_len )"		41118	0		=			
ANR	41300	Identifier	tmp_name		41118	0					
ANR	41301	CallExpression	"estrndup ( name , name_len )"		41118	1					
ANR	41302	Callee	estrndup		41118	0					
ANR	41303	Identifier	estrndup		41118	0					
ANR	41304	ArgumentList	name		41118	1					
ANR	41305	Argument	name		41118	0					
ANR	41306	Identifier	name		41118	0					
ANR	41307	Argument	name_len		41118	1					
ANR	41308	Identifier	name_len		41118	0					
ANR	41309	ExpressionStatement	"zend_str_tolower ( tmp_name , ns_len )"	515:2:16777:16811	41118	1	True				
ANR	41310	CallExpression	"zend_str_tolower ( tmp_name , ns_len )"		41118	0					
ANR	41311	Callee	zend_str_tolower		41118	0					
ANR	41312	Identifier	zend_str_tolower		41118	0					
ANR	41313	ArgumentList	tmp_name		41118	1					
ANR	41314	Argument	tmp_name		41118	0					
ANR	41315	Identifier	tmp_name		41118	0					
ANR	41316	Argument	ns_len		41118	1					
ANR	41317	Identifier	ns_len		41118	0					
ANR	41318	ExpressionStatement	"ZVAL_STRINGL ( & c , tmp_name , name_len , 0 )"	516:2:16815:16854	41118	2	True				
ANR	41319	CallExpression	"ZVAL_STRINGL ( & c , tmp_name , name_len , 0 )"		41118	0					
ANR	41320	Callee	ZVAL_STRINGL		41118	0					
ANR	41321	Identifier	ZVAL_STRINGL		41118	0					
ANR	41322	ArgumentList	& c		41118	1					
ANR	41323	Argument	& c		41118	0					
ANR	41324	UnaryOperationExpression	& c		41118	0					
ANR	41325	UnaryOperator	&		41118	0					
ANR	41326	Identifier	c		41118	1					
ANR	41327	Argument	tmp_name		41118	1					
ANR	41328	Identifier	tmp_name		41118	0					
ANR	41329	Argument	name_len		41118	2					
ANR	41330	Identifier	name_len		41118	0					
ANR	41331	Argument	0		41118	3					
ANR	41332	PrimaryExpression	0		41118	0					
ANR	41333	Statement	tmp_literal	517:2:16858:16868	41118	3	True				
ANR	41334	Statement	=	517:14:16870:16870	41118	4	True				
ANR	41335	Statement	zend_add_literal	517:16:16872:16887	41118	5	True				
ANR	41336	Statement	(	517:32:16888:16888	41118	6	True				
ANR	41337	Statement	CG	517:33:16889:16890	41118	7	True				
ANR	41338	Statement	(	517:35:16891:16891	41118	8	True				
ANR	41339	Statement	active_op_array	517:36:16892:16906	41118	9	True				
ANR	41340	Statement	)	517:51:16907:16907	41118	10	True				
ANR	41341	Statement	","	517:52:16908:16908	41118	11	True				
ANR	41342	Statement	&	517:54:16910:16910	41118	12	True				
ANR	41343	Statement	c	517:55:16911:16911	41118	13	True				
ANR	41344	Statement	TSRMLS_CC	517:57:16913:16921	41118	14	True				
ANR	41345	Statement	)	517:66:16922:16922	41118	15	True				
ANR	41346	ExpressionStatement		517:67:16923:16923	41118	16	True				
ANR	41347	ExpressionStatement	CALCULATE_LITERAL_HASH ( tmp_literal )	518:2:16927:16962	41118	17	True				
ANR	41348	CallExpression	CALCULATE_LITERAL_HASH ( tmp_literal )		41118	0					
ANR	41349	Callee	CALCULATE_LITERAL_HASH		41118	0					
ANR	41350	Identifier	CALCULATE_LITERAL_HASH		41118	0					
ANR	41351	ArgumentList	tmp_literal		41118	1					
ANR	41352	Argument	tmp_literal		41118	0					
ANR	41353	Identifier	tmp_literal		41118	0					
ANR	41354	ExpressionStatement	"tmp_name = zend_str_tolower_dup ( name , name_len )"	521:2:17028:17075	41118	18	True				
ANR	41355	AssignmentExpression	"tmp_name = zend_str_tolower_dup ( name , name_len )"		41118	0		=			
ANR	41356	Identifier	tmp_name		41118	0					
ANR	41357	CallExpression	"zend_str_tolower_dup ( name , name_len )"		41118	1					
ANR	41358	Callee	zend_str_tolower_dup		41118	0					
ANR	41359	Identifier	zend_str_tolower_dup		41118	0					
ANR	41360	ArgumentList	name		41118	1					
ANR	41361	Argument	name		41118	0					
ANR	41362	Identifier	name		41118	0					
ANR	41363	Argument	name_len		41118	1					
ANR	41364	Identifier	name_len		41118	0					
ANR	41365	ExpressionStatement	"ZVAL_STRINGL ( & c , tmp_name , name_len , 0 )"	522:2:17079:17118	41118	19	True				
ANR	41366	CallExpression	"ZVAL_STRINGL ( & c , tmp_name , name_len , 0 )"		41118	0					
ANR	41367	Callee	ZVAL_STRINGL		41118	0					
ANR	41368	Identifier	ZVAL_STRINGL		41118	0					
ANR	41369	ArgumentList	& c		41118	1					
ANR	41370	Argument	& c		41118	0					
ANR	41371	UnaryOperationExpression	& c		41118	0					
ANR	41372	UnaryOperator	&		41118	0					
ANR	41373	Identifier	c		41118	1					
ANR	41374	Argument	tmp_name		41118	1					
ANR	41375	Identifier	tmp_name		41118	0					
ANR	41376	Argument	name_len		41118	2					
ANR	41377	Identifier	name_len		41118	0					
ANR	41378	Argument	0		41118	3					
ANR	41379	PrimaryExpression	0		41118	0					
ANR	41380	Statement	tmp_literal	523:2:17122:17132	41118	20	True				
ANR	41381	Statement	=	523:14:17134:17134	41118	21	True				
ANR	41382	Statement	zend_add_literal	523:16:17136:17151	41118	22	True				
ANR	41383	Statement	(	523:32:17152:17152	41118	23	True				
ANR	41384	Statement	CG	523:33:17153:17154	41118	24	True				
ANR	41385	Statement	(	523:35:17155:17155	41118	25	True				
ANR	41386	Statement	active_op_array	523:36:17156:17170	41118	26	True				
ANR	41387	Statement	)	523:51:17171:17171	41118	27	True				
ANR	41388	Statement	","	523:52:17172:17172	41118	28	True				
ANR	41389	Statement	&	523:54:17174:17174	41118	29	True				
ANR	41390	Statement	c	523:55:17175:17175	41118	30	True				
ANR	41391	Statement	TSRMLS_CC	523:57:17177:17185	41118	31	True				
ANR	41392	Statement	)	523:66:17186:17186	41118	32	True				
ANR	41393	ExpressionStatement		523:67:17187:17187	41118	33	True				
ANR	41394	ExpressionStatement	CALCULATE_LITERAL_HASH ( tmp_literal )	524:2:17191:17226	41118	34	True				
ANR	41395	CallExpression	CALCULATE_LITERAL_HASH ( tmp_literal )		41118	0					
ANR	41396	Callee	CALCULATE_LITERAL_HASH		41118	0					
ANR	41397	Identifier	CALCULATE_LITERAL_HASH		41118	0					
ANR	41398	ArgumentList	tmp_literal		41118	1					
ANR	41399	Argument	tmp_literal		41118	0					
ANR	41400	Identifier	tmp_literal		41118	0					
ANR	41401	IfStatement	if ( ns_len )		41118	10					
ANR	41402	Condition	ns_len	527:5:17237:17242	41118	0	True				
ANR	41403	Identifier	ns_len		41118	0					
ANR	41404	CompoundStatement		47:13:1357:1357	41118	1					
ANR	41405	IfStatement	if ( ! unqualified )		41118	0					
ANR	41406	Condition	! unqualified	528:6:17253:17264	41118	0	True				
ANR	41407	UnaryOperationExpression	! unqualified		41118	0					
ANR	41408	UnaryOperator	!		41118	0					
ANR	41409	Identifier	unqualified		41118	1					
ANR	41410	CompoundStatement		48:20:1379:1379	41118	1					
ANR	41411	ReturnStatement	return ret ;	529:3:17272:17282	41118	0	True				
ANR	41412	Identifier	ret		41118	0					
ANR	41413	ExpressionStatement	ns_len ++	531:2:17290:17298	41118	1	True				
ANR	41414	PostIncDecOperationExpression	ns_len ++		41118	0					
ANR	41415	Identifier	ns_len		41118	0					
ANR	41416	IncDec	++		41118	1					
ANR	41417	ExpressionStatement	name += ns_len	532:2:17302:17316	41118	2	True				
ANR	41418	AssignmentExpression	name += ns_len		41118	0		+=			
ANR	41419	Identifier	name		41118	0					
ANR	41420	Identifier	ns_len		41118	1					
ANR	41421	ExpressionStatement	name_len -= ns_len	533:2:17320:17338	41118	3	True				
ANR	41422	AssignmentExpression	name_len -= ns_len		41118	0		-=			
ANR	41423	Identifier	name_len		41118	0					
ANR	41424	Identifier	ns_len		41118	1					
ANR	41425	ExpressionStatement	"tmp_name = estrndup ( name , name_len )"	537:1:17375:17410	41118	11	True				
ANR	41426	AssignmentExpression	"tmp_name = estrndup ( name , name_len )"		41118	0		=			
ANR	41427	Identifier	tmp_name		41118	0					
ANR	41428	CallExpression	"estrndup ( name , name_len )"		41118	1					
ANR	41429	Callee	estrndup		41118	0					
ANR	41430	Identifier	estrndup		41118	0					
ANR	41431	ArgumentList	name		41118	1					
ANR	41432	Argument	name		41118	0					
ANR	41433	Identifier	name		41118	0					
ANR	41434	Argument	name_len		41118	1					
ANR	41435	Identifier	name_len		41118	0					
ANR	41436	ExpressionStatement	"ZVAL_STRINGL ( & c , tmp_name , name_len , 0 )"	538:1:17413:17452	41118	12	True				
ANR	41437	CallExpression	"ZVAL_STRINGL ( & c , tmp_name , name_len , 0 )"		41118	0					
ANR	41438	Callee	ZVAL_STRINGL		41118	0					
ANR	41439	Identifier	ZVAL_STRINGL		41118	0					
ANR	41440	ArgumentList	& c		41118	1					
ANR	41441	Argument	& c		41118	0					
ANR	41442	UnaryOperationExpression	& c		41118	0					
ANR	41443	UnaryOperator	&		41118	0					
ANR	41444	Identifier	c		41118	1					
ANR	41445	Argument	tmp_name		41118	1					
ANR	41446	Identifier	tmp_name		41118	0					
ANR	41447	Argument	name_len		41118	2					
ANR	41448	Identifier	name_len		41118	0					
ANR	41449	Argument	0		41118	3					
ANR	41450	PrimaryExpression	0		41118	0					
ANR	41451	Statement	tmp_literal	539:1:17455:17465	41118	13	True				
ANR	41452	Statement	=	539:13:17467:17467	41118	14	True				
ANR	41453	Statement	zend_add_literal	539:15:17469:17484	41118	15	True				
ANR	41454	Statement	(	539:31:17485:17485	41118	16	True				
ANR	41455	Statement	CG	539:32:17486:17487	41118	17	True				
ANR	41456	Statement	(	539:34:17488:17488	41118	18	True				
ANR	41457	Statement	active_op_array	539:35:17489:17503	41118	19	True				
ANR	41458	Statement	)	539:50:17504:17504	41118	20	True				
ANR	41459	Statement	","	539:51:17505:17505	41118	21	True				
ANR	41460	Statement	&	539:53:17507:17507	41118	22	True				
ANR	41461	Statement	c	539:54:17508:17508	41118	23	True				
ANR	41462	Statement	TSRMLS_CC	539:56:17510:17518	41118	24	True				
ANR	41463	Statement	)	539:65:17519:17519	41118	25	True				
ANR	41464	ExpressionStatement		539:66:17520:17520	41118	26	True				
ANR	41465	ExpressionStatement	CALCULATE_LITERAL_HASH ( tmp_literal )	540:1:17523:17558	41118	27	True				
ANR	41466	CallExpression	CALCULATE_LITERAL_HASH ( tmp_literal )		41118	0					
ANR	41467	Callee	CALCULATE_LITERAL_HASH		41118	0					
ANR	41468	Identifier	CALCULATE_LITERAL_HASH		41118	0					
ANR	41469	ArgumentList	tmp_literal		41118	1					
ANR	41470	Argument	tmp_literal		41118	0					
ANR	41471	Identifier	tmp_literal		41118	0					
ANR	41472	ExpressionStatement	"tmp_name = zend_str_tolower_dup ( name , name_len )"	543:1:17594:17641	41118	28	True				
ANR	41473	AssignmentExpression	"tmp_name = zend_str_tolower_dup ( name , name_len )"		41118	0		=			
ANR	41474	Identifier	tmp_name		41118	0					
ANR	41475	CallExpression	"zend_str_tolower_dup ( name , name_len )"		41118	1					
ANR	41476	Callee	zend_str_tolower_dup		41118	0					
ANR	41477	Identifier	zend_str_tolower_dup		41118	0					
ANR	41478	ArgumentList	name		41118	1					
ANR	41479	Argument	name		41118	0					
ANR	41480	Identifier	name		41118	0					
ANR	41481	Argument	name_len		41118	1					
ANR	41482	Identifier	name_len		41118	0					
ANR	41483	ExpressionStatement	"ZVAL_STRINGL ( & c , tmp_name , name_len , 0 )"	544:1:17644:17683	41118	29	True				
ANR	41484	CallExpression	"ZVAL_STRINGL ( & c , tmp_name , name_len , 0 )"		41118	0					
ANR	41485	Callee	ZVAL_STRINGL		41118	0					
ANR	41486	Identifier	ZVAL_STRINGL		41118	0					
ANR	41487	ArgumentList	& c		41118	1					
ANR	41488	Argument	& c		41118	0					
ANR	41489	UnaryOperationExpression	& c		41118	0					
ANR	41490	UnaryOperator	&		41118	0					
ANR	41491	Identifier	c		41118	1					
ANR	41492	Argument	tmp_name		41118	1					
ANR	41493	Identifier	tmp_name		41118	0					
ANR	41494	Argument	name_len		41118	2					
ANR	41495	Identifier	name_len		41118	0					
ANR	41496	Argument	0		41118	3					
ANR	41497	PrimaryExpression	0		41118	0					
ANR	41498	Statement	tmp_literal	545:1:17686:17696	41118	30	True				
ANR	41499	Statement	=	545:13:17698:17698	41118	31	True				
ANR	41500	Statement	zend_add_literal	545:15:17700:17715	41118	32	True				
ANR	41501	Statement	(	545:31:17716:17716	41118	33	True				
ANR	41502	Statement	CG	545:32:17717:17718	41118	34	True				
ANR	41503	Statement	(	545:34:17719:17719	41118	35	True				
ANR	41504	Statement	active_op_array	545:35:17720:17734	41118	36	True				
ANR	41505	Statement	)	545:50:17735:17735	41118	37	True				
ANR	41506	Statement	","	545:51:17736:17736	41118	38	True				
ANR	41507	Statement	&	545:53:17738:17738	41118	39	True				
ANR	41508	Statement	c	545:54:17739:17739	41118	40	True				
ANR	41509	Statement	TSRMLS_CC	545:56:17741:17749	41118	41	True				
ANR	41510	Statement	)	545:65:17750:17750	41118	42	True				
ANR	41511	ExpressionStatement		545:66:17751:17751	41118	43	True				
ANR	41512	ExpressionStatement	CALCULATE_LITERAL_HASH ( tmp_literal )	546:1:17754:17789	41118	44	True				
ANR	41513	CallExpression	CALCULATE_LITERAL_HASH ( tmp_literal )		41118	0					
ANR	41514	Callee	CALCULATE_LITERAL_HASH		41118	0					
ANR	41515	Identifier	CALCULATE_LITERAL_HASH		41118	0					
ANR	41516	ArgumentList	tmp_literal		41118	1					
ANR	41517	Argument	tmp_literal		41118	0					
ANR	41518	Identifier	tmp_literal		41118	0					
ANR	41519	ReturnStatement	return ret ;	548:1:17793:17803	41118	45	True				
ANR	41520	Identifier	ret		41118	0					
ANR	41521	ReturnType	int		41118	1					
ANR	41522	Identifier	zend_add_const_name_literal		41118	2					
ANR	41523	ParameterList	"zend_op_array * op_array , const zval * zv , int unqualified TSRMLS_DC"		41118	3					
ANR	41524	Parameter	zend_op_array * op_array	480:32:15809:15831	41118	0	True				
ANR	41525	ParameterType	zend_op_array *		41118	0					
ANR	41526	Identifier	op_array		41118	1					
ANR	41527	Parameter	const zval * zv	480:57:15834:15847	41118	1	True				
ANR	41528	ParameterType	const zval *		41118	0					
ANR	41529	Identifier	zv		41118	1					
ANR	41530	Parameter	int unqualified TSRMLS_DC	480:73:15850:15874	41118	2	True				
ANR	41531	ParameterType	int unqualified		41118	0					
ANR	41532	Identifier	TSRMLS_DC		41118	1					
ANR	41533	CFGEntryNode	ENTRY		41118		True				
ANR	41534	CFGExitNode	EXIT		41118		True				
ANR	41535	Symbol	tmp_literal		41118						
ANR	41536	Symbol	TSRMLS_DC		41118						
ANR	41537	Symbol	* op_array -> literals		41118						
ANR	41538	Symbol	unqualified		41118						
ANR	41539	Symbol	estrndup		41118						
ANR	41540	Symbol	op_array -> last_literal		41118						
ANR	41541	Symbol	Z_STRLEN_P		41118						
ANR	41542	Symbol	name_len		41118						
ANR	41543	Symbol	* Z_STRVAL_P		41118						
ANR	41544	Symbol	op_array -> literals [ op_array -> last_literal - 1 ] . cache_slot		41118						
ANR	41545	Symbol	zend_str_tolower_dup		41118						
ANR	41546	Symbol	ret		41118						
ANR	41547	Symbol	zend_memrchr		41118						
ANR	41548	Symbol	c		41118						
ANR	41549	Symbol	& c		41118						
ANR	41550	Symbol	& op_array -> literals [ op_array -> last_literal - 1 ] . constant		41118						
ANR	41551	Symbol	ns_len		41118						
ANR	41552	Symbol	Z_STRVAL_P		41118						
ANR	41553	Symbol	* op_array		41118						
ANR	41554	Symbol	tmp_name		41118						
ANR	41555	Symbol	ns_separator		41118						
ANR	41556	Symbol	* op_array -> last_literal		41118						
ANR	41557	Symbol	op_array -> literals		41118						
ANR	41558	Symbol	name		41118						
ANR	41559	Symbol	zv		41118						
ANR	41560	Symbol	* * op_array		41118						
ANR	41561	Symbol	op_array		41118						
ANR	41562	DeclStmt									
ANR	41563	Decl							zval	zval	_c
ANR	41564	DeclStmt									
ANR	41565	Decl							zval	zval	_c
ANR	41566	DeclStmt									
ANR	41567	Decl							zval	zval	_c
ANR	41568	DeclStmt									
ANR	41569	Decl							zval	zval	_c
ANR	41570	Function	zend_is_function_or_method_call	576:0:18482:18690							
ANR	41571	FunctionDef	zend_is_function_or_method_call (const znode * variable)		41570	0					
ANR	41572	CompoundStatement		577:0:18571:18690	41570	0					
ANR	41573	IdentifierDeclStatement	zend_uint type = variable -> EA ;	578:1:18574:18603	41570	0	True				
ANR	41574	IdentifierDecl	type = variable -> EA		41570	0					
ANR	41575	IdentifierDeclType	zend_uint		41570	0					
ANR	41576	Identifier	type		41570	1					
ANR	41577	AssignmentExpression	type = variable -> EA		41570	2		=			
ANR	41578	Identifier	type		41570	0					
ANR	41579	PtrMemberAccess	variable -> EA		41570	1					
ANR	41580	Identifier	variable		41570	0					
ANR	41581	Identifier	EA		41570	1					
ANR	41582	ReturnStatement	return ( ( type & ZEND_PARSED_METHOD_CALL ) || ( type == ZEND_PARSED_FUNCTION_CALL ) ) ;	580:1:18607:18688	41570	1	True				
ANR	41583	OrExpression	( type & ZEND_PARSED_METHOD_CALL ) || ( type == ZEND_PARSED_FUNCTION_CALL )		41570	0		||			
ANR	41584	BitAndExpression	type & ZEND_PARSED_METHOD_CALL		41570	0		&			
ANR	41585	Identifier	type		41570	0					
ANR	41586	Identifier	ZEND_PARSED_METHOD_CALL		41570	1					
ANR	41587	EqualityExpression	type == ZEND_PARSED_FUNCTION_CALL		41570	1		==			
ANR	41588	Identifier	type		41570	0					
ANR	41589	Identifier	ZEND_PARSED_FUNCTION_CALL		41570	1					
ANR	41590	ReturnType	static inline zend_bool		41570	1					
ANR	41591	Identifier	zend_is_function_or_method_call		41570	2					
ANR	41592	ParameterList	const znode * variable		41570	3					
ANR	41593	Parameter	const znode * variable	576:56:18538:18558	41570	0	True				
ANR	41594	ParameterType	const znode *		41570	0					
ANR	41595	Identifier	variable		41570	1					
ANR	41596	CFGEntryNode	ENTRY		41570		True				
ANR	41597	CFGExitNode	EXIT		41570		True				
ANR	41598	Symbol	variable -> EA		41570						
ANR	41599	Symbol	ZEND_PARSED_FUNCTION_CALL		41570						
ANR	41600	Symbol	variable		41570						
ANR	41601	Symbol	type		41570						
ANR	41602	Symbol	* variable		41570						
ANR	41603	Symbol	ZEND_PARSED_METHOD_CALL		41570						
ANR	41604	DeclStmt									
ANR	41605	Decl							zend_op	zend_op *	opline
ANR	41606	DeclStmt									
ANR	41607	Decl							zend_op	zend_op *	opline
ANR	41608	DeclStmt									
ANR	41609	Decl							int	int	last_op_number
ANR	41610	DeclStmt									
ANR	41611	Decl							zend_op	zend_op *	opline
ANR	41612	DeclStmt									
ANR	41613	Decl							zend_op	zend_op *	last_op
ANR	41614	Function	fetch_simple_variable_ex	661:0:21128:23078							
ANR	41615	FunctionDef	"fetch_simple_variable_ex (znode * result , znode * varname , int bp , zend_uchar op TSRMLS_DC)"		41614	0					
ANR	41616	CompoundStatement		662:0:21232:23078	41614	0					
ANR	41617	IdentifierDeclStatement	zend_op opline ;	663:1:21235:21249	41614	0	True				
ANR	41618	IdentifierDecl	opline		41614	0					
ANR	41619	IdentifierDeclType	zend_op		41614	0					
ANR	41620	Identifier	opline		41614	1					
ANR	41621	IdentifierDeclStatement	zend_op * opline_ptr ;	664:1:21252:21271	41614	1	True				
ANR	41622	IdentifierDecl	* opline_ptr		41614	0					
ANR	41623	IdentifierDeclType	zend_op *		41614	0					
ANR	41624	Identifier	opline_ptr		41614	1					
ANR	41625	IdentifierDeclStatement	zend_llist * fetch_list_ptr ;	665:1:21274:21300	41614	2	True				
ANR	41626	IdentifierDecl	* fetch_list_ptr		41614	0					
ANR	41627	IdentifierDeclType	zend_llist *		41614	0					
ANR	41628	Identifier	fetch_list_ptr		41614	1					
ANR	41629	IfStatement	if ( varname -> op_type == IS_CONST )		41614	3					
ANR	41630	Condition	varname -> op_type == IS_CONST	667:5:21308:21335	41614	0	True				
ANR	41631	EqualityExpression	varname -> op_type == IS_CONST		41614	0		==			
ANR	41632	PtrMemberAccess	varname -> op_type		41614	0					
ANR	41633	Identifier	varname		41614	0					
ANR	41634	Identifier	op_type		41614	1					
ANR	41635	Identifier	IS_CONST		41614	1					
ANR	41636	CompoundStatement		7:2:109:119	41614	1					
ANR	41637	IdentifierDeclStatement	ulong hash ;	668:2:21342:21352	41614	0	True				
ANR	41638	IdentifierDecl	hash		41614	0					
ANR	41639	IdentifierDeclType	ulong		41614	0					
ANR	41640	Identifier	hash		41614	1					
ANR	41641	IfStatement	if ( Z_TYPE ( varname -> u . constant ) != IS_STRING )		41614	1					
ANR	41642	Condition	Z_TYPE ( varname -> u . constant ) != IS_STRING	670:6:21361:21400	41614	0	True				
ANR	41643	EqualityExpression	Z_TYPE ( varname -> u . constant ) != IS_STRING		41614	0		!=			
ANR	41644	CallExpression	Z_TYPE ( varname -> u . constant )		41614	0					
ANR	41645	Callee	Z_TYPE		41614	0					
ANR	41646	Identifier	Z_TYPE		41614	0					
ANR	41647	ArgumentList	varname -> u . constant		41614	1					
ANR	41648	Argument	varname -> u . constant		41614	0					
ANR	41649	MemberAccess	varname -> u . constant		41614	0					
ANR	41650	PtrMemberAccess	varname -> u		41614	0					
ANR	41651	Identifier	varname		41614	0					
ANR	41652	Identifier	u		41614	1					
ANR	41653	Identifier	constant		41614	1					
ANR	41654	Identifier	IS_STRING		41614	1					
ANR	41655	CompoundStatement		9:48:170:170	41614	1					
ANR	41656	ExpressionStatement	convert_to_string ( & varname -> u . constant )	671:3:21408:21447	41614	0	True				
ANR	41657	CallExpression	convert_to_string ( & varname -> u . constant )		41614	0					
ANR	41658	Callee	convert_to_string		41614	0					
ANR	41659	Identifier	convert_to_string		41614	0					
ANR	41660	ArgumentList	& varname -> u . constant		41614	1					
ANR	41661	Argument	& varname -> u . constant		41614	0					
ANR	41662	UnaryOperationExpression	& varname -> u . constant		41614	0					
ANR	41663	UnaryOperator	&		41614	0					
ANR	41664	MemberAccess	varname -> u . constant		41614	1					
ANR	41665	PtrMemberAccess	varname -> u		41614	0					
ANR	41666	Identifier	varname		41614	0					
ANR	41667	Identifier	u		41614	1					
ANR	41668	Identifier	constant		41614	1					
ANR	41669	ExpressionStatement	"hash = str_hash ( Z_STRVAL ( varname -> u . constant ) , Z_STRLEN ( varname -> u . constant ) )"	674:2:21456:21533	41614	2	True				
ANR	41670	AssignmentExpression	"hash = str_hash ( Z_STRVAL ( varname -> u . constant ) , Z_STRLEN ( varname -> u . constant ) )"		41614	0		=			
ANR	41671	Identifier	hash		41614	0					
ANR	41672	CallExpression	"str_hash ( Z_STRVAL ( varname -> u . constant ) , Z_STRLEN ( varname -> u . constant ) )"		41614	1					
ANR	41673	Callee	str_hash		41614	0					
ANR	41674	Identifier	str_hash		41614	0					
ANR	41675	ArgumentList	Z_STRVAL ( varname -> u . constant )		41614	1					
ANR	41676	Argument	Z_STRVAL ( varname -> u . constant )		41614	0					
ANR	41677	CallExpression	Z_STRVAL ( varname -> u . constant )		41614	0					
ANR	41678	Callee	Z_STRVAL		41614	0					
ANR	41679	Identifier	Z_STRVAL		41614	0					
ANR	41680	ArgumentList	varname -> u . constant		41614	1					
ANR	41681	Argument	varname -> u . constant		41614	0					
ANR	41682	MemberAccess	varname -> u . constant		41614	0					
ANR	41683	PtrMemberAccess	varname -> u		41614	0					
ANR	41684	Identifier	varname		41614	0					
ANR	41685	Identifier	u		41614	1					
ANR	41686	Identifier	constant		41614	1					
ANR	41687	Argument	Z_STRLEN ( varname -> u . constant )		41614	1					
ANR	41688	CallExpression	Z_STRLEN ( varname -> u . constant )		41614	0					
ANR	41689	Callee	Z_STRLEN		41614	0					
ANR	41690	Identifier	Z_STRLEN		41614	0					
ANR	41691	ArgumentList	varname -> u . constant		41614	1					
ANR	41692	Argument	varname -> u . constant		41614	0					
ANR	41693	MemberAccess	varname -> u . constant		41614	0					
ANR	41694	PtrMemberAccess	varname -> u		41614	0					
ANR	41695	Identifier	varname		41614	0					
ANR	41696	Identifier	u		41614	1					
ANR	41697	Identifier	constant		41614	1					
ANR	41698	Statement	if	675:2:21537:21538	41614	3	True				
ANR	41699	Statement	(	675:5:21540:21540	41614	4	True				
ANR	41700	Statement	!	675:6:21541:21541	41614	5	True				
ANR	41701	Statement	zend_is_auto_global_quick	675:7:21542:21566	41614	6	True				
ANR	41702	Statement	(	675:32:21567:21567	41614	7	True				
ANR	41703	Statement	Z_STRVAL	675:33:21568:21575	41614	8	True				
ANR	41704	Statement	(	675:41:21576:21576	41614	9	True				
ANR	41705	Statement	varname	675:42:21577:21583	41614	10	True				
ANR	41706	Statement	->	675:49:21584:21585	41614	11	True				
ANR	41707	Statement	u	675:51:21586:21586	41614	12	True				
ANR	41708	Statement	.	675:52:21587:21587	41614	13	True				
ANR	41709	Statement	constant	675:53:21588:21595	41614	14	True				
ANR	41710	Statement	)	675:61:21596:21596	41614	15	True				
ANR	41711	Statement	","	675:62:21597:21597	41614	16	True				
ANR	41712	Statement	Z_STRLEN	675:64:21599:21606	41614	17	True				
ANR	41713	Statement	(	675:72:21607:21607	41614	18	True				
ANR	41714	Statement	varname	675:73:21608:21614	41614	19	True				
ANR	41715	Statement	->	675:80:21615:21616	41614	20	True				
ANR	41716	Statement	u	675:82:21617:21617	41614	21	True				
ANR	41717	Statement	.	675:83:21618:21618	41614	22	True				
ANR	41718	Statement	constant	675:84:21619:21626	41614	23	True				
ANR	41719	Statement	)	675:92:21627:21627	41614	24	True				
ANR	41720	Statement	","	675:93:21628:21628	41614	25	True				
ANR	41721	Statement	hash	675:95:21630:21633	41614	26	True				
ANR	41722	Statement	TSRMLS_CC	675:100:21635:21643	41614	27	True				
ANR	41723	Statement	)	675:109:21644:21644	41614	28	True				
ANR	41724	Statement	&&	675:111:21646:21647	41614	29	True				
ANR	41725	Statement	!	676:6:21655:21655	41614	30	True				
ANR	41726	Statement	(	676:7:21656:21656	41614	31	True				
ANR	41727	Statement	Z_STRLEN	676:8:21657:21664	41614	32	True				
ANR	41728	Statement	(	676:16:21665:21665	41614	33	True				
ANR	41729	Statement	varname	676:17:21666:21672	41614	34	True				
ANR	41730	Statement	->	676:24:21673:21674	41614	35	True				
ANR	41731	Statement	u	676:26:21675:21675	41614	36	True				
ANR	41732	Statement	.	676:27:21676:21676	41614	37	True				
ANR	41733	Statement	constant	676:28:21677:21684	41614	38	True				
ANR	41734	Statement	)	676:36:21685:21685	41614	39	True				
ANR	41735	Statement	==	676:38:21687:21688	41614	40	True				
ANR	41736	Statement	(	676:41:21690:21690	41614	41	True				
ANR	41737	Statement	sizeof	676:42:21691:21696	41614	42	True				
ANR	41738	Statement	(	676:48:21697:21697	41614	43	True				
ANR	41739	Statement	"""this"""	676:49:21698:21703	41614	44	True				
ANR	41740	Statement	)	676:55:21704:21704	41614	45	True				
ANR	41741	Statement	-	676:56:21705:21705	41614	46	True				
ANR	41742	Statement	1	676:57:21706:21706	41614	47	True				
ANR	41743	Statement	)	676:58:21707:21707	41614	48	True				
ANR	41744	Statement	&&	676:60:21709:21710	41614	49	True				
ANR	41745	Statement	!	677:8:21720:21720	41614	50	True				
ANR	41746	Statement	memcmp	677:9:21721:21726	41614	51	True				
ANR	41747	Statement	(	677:15:21727:21727	41614	52	True				
ANR	41748	Statement	Z_STRVAL	677:16:21728:21735	41614	53	True				
ANR	41749	Statement	(	677:24:21736:21736	41614	54	True				
ANR	41750	Statement	varname	677:25:21737:21743	41614	55	True				
ANR	41751	Statement	->	677:32:21744:21745	41614	56	True				
ANR	41752	Statement	u	677:34:21746:21746	41614	57	True				
ANR	41753	Statement	.	677:35:21747:21747	41614	58	True				
ANR	41754	Statement	constant	677:36:21748:21755	41614	59	True				
ANR	41755	Statement	)	677:44:21756:21756	41614	60	True				
ANR	41756	Statement	","	677:45:21757:21757	41614	61	True				
ANR	41757	Statement	"""this"""	677:47:21759:21764	41614	62	True				
ANR	41758	Statement	","	677:53:21765:21765	41614	63	True				
ANR	41759	Statement	sizeof	677:55:21767:21772	41614	64	True				
ANR	41760	Statement	(	677:61:21773:21773	41614	65	True				
ANR	41761	Statement	"""this"""	677:62:21774:21779	41614	66	True				
ANR	41762	Statement	)	677:68:21780:21780	41614	67	True				
ANR	41763	Statement	-	677:70:21782:21782	41614	68	True				
ANR	41764	Statement	1	677:72:21784:21784	41614	69	True				
ANR	41765	Statement	)	677:73:21785:21785	41614	70	True				
ANR	41766	Statement	)	677:74:21786:21786	41614	71	True				
ANR	41767	Statement	&&	677:76:21788:21789	41614	72	True				
ANR	41768	Statement	(	678:6:21797:21797	41614	73	True				
ANR	41769	Statement	CG	678:7:21798:21799	41614	74	True				
ANR	41770	Statement	(	678:9:21800:21800	41614	75	True				
ANR	41771	Statement	active_op_array	678:10:21801:21815	41614	76	True				
ANR	41772	Statement	)	678:25:21816:21816	41614	77	True				
ANR	41773	Statement	->	678:26:21817:21818	41614	78	True				
ANR	41774	Statement	last	678:28:21819:21822	41614	79	True				
ANR	41775	Statement	==	678:33:21824:21825	41614	80	True				
ANR	41776	Statement	0	678:36:21827:21827	41614	81	True				
ANR	41777	Statement	||	678:38:21829:21830	41614	82	True				
ANR	41778	Statement	CG	679:7:21839:21840	41614	83	True				
ANR	41779	Statement	(	679:9:21841:21841	41614	84	True				
ANR	41780	Statement	active_op_array	679:10:21842:21856	41614	85	True				
ANR	41781	Statement	)	679:25:21857:21857	41614	86	True				
ANR	41782	Statement	->	679:26:21858:21859	41614	87	True				
ANR	41783	Statement	opcodes	679:28:21860:21866	41614	88	True				
ANR	41784	Statement	[	679:35:21867:21867	41614	89	True				
ANR	41785	Statement	CG	679:36:21868:21869	41614	90	True				
ANR	41786	Statement	(	679:38:21870:21870	41614	91	True				
ANR	41787	Statement	active_op_array	679:39:21871:21885	41614	92	True				
ANR	41788	Statement	)	679:54:21886:21886	41614	93	True				
ANR	41789	Statement	->	679:55:21887:21888	41614	94	True				
ANR	41790	Statement	last	679:57:21889:21892	41614	95	True				
ANR	41791	Statement	-	679:61:21893:21893	41614	96	True				
ANR	41792	Statement	1	679:62:21894:21894	41614	97	True				
ANR	41793	Statement	]	679:63:21895:21895	41614	98	True				
ANR	41794	Statement	.	679:64:21896:21896	41614	99	True				
ANR	41795	Statement	opcode	679:65:21897:21902	41614	100	True				
ANR	41796	Statement	!=	679:72:21904:21905	41614	101	True				
ANR	41797	Statement	ZEND_BEGIN_SILENCE	679:75:21907:21924	41614	102	True				
ANR	41798	Statement	)	679:93:21925:21925	41614	103	True				
ANR	41799	Statement	)	679:94:21926:21926	41614	104	True				
ANR	41800	CompoundStatement		18:96:695:695	41614	105					
ANR	41801	ExpressionStatement	result -> op_type = IS_CV	680:3:21933:21956	41614	0	True				
ANR	41802	AssignmentExpression	result -> op_type = IS_CV		41614	0		=			
ANR	41803	PtrMemberAccess	result -> op_type		41614	0					
ANR	41804	Identifier	result		41614	0					
ANR	41805	Identifier	op_type		41614	1					
ANR	41806	Identifier	IS_CV		41614	1					
ANR	41807	Statement	result	681:3:21961:21966	41614	1	True				
ANR	41808	Statement	->	681:9:21967:21968	41614	2	True				
ANR	41809	Statement	u	681:11:21969:21969	41614	3	True				
ANR	41810	Statement	.	681:12:21970:21970	41614	4	True				
ANR	41811	Statement	op	681:13:21971:21972	41614	5	True				
ANR	41812	Statement	.	681:15:21973:21973	41614	6	True				
ANR	41813	Statement	var	681:16:21974:21976	41614	7	True				
ANR	41814	Statement	=	681:20:21978:21978	41614	8	True				
ANR	41815	Statement	lookup_cv	681:22:21980:21988	41614	9	True				
ANR	41816	Statement	(	681:31:21989:21989	41614	10	True				
ANR	41817	Statement	CG	681:32:21990:21991	41614	11	True				
ANR	41818	Statement	(	681:34:21992:21992	41614	12	True				
ANR	41819	Statement	active_op_array	681:35:21993:22007	41614	13	True				
ANR	41820	Statement	)	681:50:22008:22008	41614	14	True				
ANR	41821	Statement	","	681:51:22009:22009	41614	15	True				
ANR	41822	Statement	Z_STRVAL	681:53:22011:22018	41614	16	True				
ANR	41823	Statement	(	681:61:22019:22019	41614	17	True				
ANR	41824	Statement	varname	681:62:22020:22026	41614	18	True				
ANR	41825	Statement	->	681:69:22027:22028	41614	19	True				
ANR	41826	Statement	u	681:71:22029:22029	41614	20	True				
ANR	41827	Statement	.	681:72:22030:22030	41614	21	True				
ANR	41828	Statement	constant	681:73:22031:22038	41614	22	True				
ANR	41829	Statement	)	681:81:22039:22039	41614	23	True				
ANR	41830	Statement	","	681:82:22040:22040	41614	24	True				
ANR	41831	Statement	Z_STRLEN	681:84:22042:22049	41614	25	True				
ANR	41832	Statement	(	681:92:22050:22050	41614	26	True				
ANR	41833	Statement	varname	681:93:22051:22057	41614	27	True				
ANR	41834	Statement	->	681:100:22058:22059	41614	28	True				
ANR	41835	Statement	u	681:102:22060:22060	41614	29	True				
ANR	41836	Statement	.	681:103:22061:22061	41614	30	True				
ANR	41837	Statement	constant	681:104:22062:22069	41614	31	True				
ANR	41838	Statement	)	681:112:22070:22070	41614	32	True				
ANR	41839	Statement	","	681:113:22071:22071	41614	33	True				
ANR	41840	Statement	hash	681:115:22073:22076	41614	34	True				
ANR	41841	Statement	TSRMLS_CC	681:120:22078:22086	41614	35	True				
ANR	41842	Statement	)	681:129:22087:22087	41614	36	True				
ANR	41843	ExpressionStatement		681:130:22088:22088	41614	37	True				
ANR	41844	ExpressionStatement	Z_STRVAL ( varname -> u . constant ) = ( char * ) CG ( active_op_array ) -> vars [ result -> u . op . var ] . name	682:3:22093:22180	41614	38	True				
ANR	41845	AssignmentExpression	Z_STRVAL ( varname -> u . constant ) = ( char * ) CG ( active_op_array ) -> vars [ result -> u . op . var ] . name		41614	0		=			
ANR	41846	CallExpression	Z_STRVAL ( varname -> u . constant )		41614	0					
ANR	41847	Callee	Z_STRVAL		41614	0					
ANR	41848	Identifier	Z_STRVAL		41614	0					
ANR	41849	ArgumentList	varname -> u . constant		41614	1					
ANR	41850	Argument	varname -> u . constant		41614	0					
ANR	41851	MemberAccess	varname -> u . constant		41614	0					
ANR	41852	PtrMemberAccess	varname -> u		41614	0					
ANR	41853	Identifier	varname		41614	0					
ANR	41854	Identifier	u		41614	1					
ANR	41855	Identifier	constant		41614	1					
ANR	41856	CastExpression	( char * ) CG ( active_op_array ) -> vars [ result -> u . op . var ] . name		41614	1					
ANR	41857	CastTarget	char *		41614	0					
ANR	41858	MemberAccess	CG ( active_op_array ) -> vars [ result -> u . op . var ] . name		41614	1					
ANR	41859	ArrayIndexing	CG ( active_op_array ) -> vars [ result -> u . op . var ]		41614	0					
ANR	41860	PtrMemberAccess	CG ( active_op_array ) -> vars		41614	0					
ANR	41861	CallExpression	CG ( active_op_array )		41614	0					
ANR	41862	Callee	CG		41614	0					
ANR	41863	Identifier	CG		41614	0					
ANR	41864	ArgumentList	active_op_array		41614	1					
ANR	41865	Argument	active_op_array		41614	0					
ANR	41866	Identifier	active_op_array		41614	0					
ANR	41867	Identifier	vars		41614	1					
ANR	41868	MemberAccess	result -> u . op . var		41614	1					
ANR	41869	MemberAccess	result -> u . op		41614	0					
ANR	41870	PtrMemberAccess	result -> u		41614	0					
ANR	41871	Identifier	result		41614	0					
ANR	41872	Identifier	u		41614	1					
ANR	41873	Identifier	op		41614	1					
ANR	41874	Identifier	var		41614	1					
ANR	41875	Identifier	name		41614	1					
ANR	41876	ExpressionStatement	result -> EA = 0	683:3:22185:22199	41614	39	True				
ANR	41877	AssignmentExpression	result -> EA = 0		41614	0		=			
ANR	41878	PtrMemberAccess	result -> EA		41614	0					
ANR	41879	Identifier	result		41614	0					
ANR	41880	Identifier	EA		41614	1					
ANR	41881	PrimaryExpression	0		41614	1					
ANR	41882	ReturnStatement	return ;	684:3:22204:22210	41614	40	True				
ANR	41883	IfStatement	if ( bp )		41614	4					
ANR	41884	Condition	bp	688:5:22225:22226	41614	0	True				
ANR	41885	Identifier	bp		41614	0					
ANR	41886	CompoundStatement		27:9:996:996	41614	1					
ANR	41887	ExpressionStatement	opline_ptr = & opline	689:2:22233:22253	41614	0	True				
ANR	41888	AssignmentExpression	opline_ptr = & opline		41614	0		=			
ANR	41889	Identifier	opline_ptr		41614	0					
ANR	41890	UnaryOperationExpression	& opline		41614	1					
ANR	41891	UnaryOperator	&		41614	0					
ANR	41892	Identifier	opline		41614	1					
ANR	41893	Statement	init_op	690:2:22257:22263	41614	1	True				
ANR	41894	Statement	(	690:9:22264:22264	41614	2	True				
ANR	41895	Statement	opline_ptr	690:10:22265:22274	41614	3	True				
ANR	41896	Statement	TSRMLS_CC	690:21:22276:22284	41614	4	True				
ANR	41897	Statement	)	690:30:22285:22285	41614	5	True				
ANR	41898	ExpressionStatement		690:31:22286:22286	41614	6	True				
ANR	41899	ElseStatement	else		41614	0					
ANR	41900	CompoundStatement		30:8:1063:1063	41614	0					
ANR	41901	Statement	opline_ptr	692:2:22300:22309	41614	0	True				
ANR	41902	Statement	=	692:13:22311:22311	41614	1	True				
ANR	41903	Statement	get_next_op	692:15:22313:22323	41614	2	True				
ANR	41904	Statement	(	692:26:22324:22324	41614	3	True				
ANR	41905	Statement	CG	692:27:22325:22326	41614	4	True				
ANR	41906	Statement	(	692:29:22327:22327	41614	5	True				
ANR	41907	Statement	active_op_array	692:30:22328:22342	41614	6	True				
ANR	41908	Statement	)	692:45:22343:22343	41614	7	True				
ANR	41909	Statement	TSRMLS_CC	692:47:22345:22353	41614	8	True				
ANR	41910	Statement	)	692:56:22354:22354	41614	9	True				
ANR	41911	ExpressionStatement		692:57:22355:22355	41614	10	True				
ANR	41912	ExpressionStatement	opline_ptr -> opcode = op	695:1:22362:22385	41614	5	True				
ANR	41913	AssignmentExpression	opline_ptr -> opcode = op		41614	0		=			
ANR	41914	PtrMemberAccess	opline_ptr -> opcode		41614	0					
ANR	41915	Identifier	opline_ptr		41614	0					
ANR	41916	Identifier	opcode		41614	1					
ANR	41917	Identifier	op		41614	1					
ANR	41918	ExpressionStatement	opline_ptr -> result_type = IS_VAR	696:1:22388:22420	41614	6	True				
ANR	41919	AssignmentExpression	opline_ptr -> result_type = IS_VAR		41614	0		=			
ANR	41920	PtrMemberAccess	opline_ptr -> result_type		41614	0					
ANR	41921	Identifier	opline_ptr		41614	0					
ANR	41922	Identifier	result_type		41614	1					
ANR	41923	Identifier	IS_VAR		41614	1					
ANR	41924	ExpressionStatement	opline_ptr -> result . var = get_temporary_variable ( CG ( active_op_array ) )	697:1:22423:22491	41614	7	True				
ANR	41925	AssignmentExpression	opline_ptr -> result . var = get_temporary_variable ( CG ( active_op_array ) )		41614	0		=			
ANR	41926	MemberAccess	opline_ptr -> result . var		41614	0					
ANR	41927	PtrMemberAccess	opline_ptr -> result		41614	0					
ANR	41928	Identifier	opline_ptr		41614	0					
ANR	41929	Identifier	result		41614	1					
ANR	41930	Identifier	var		41614	1					
ANR	41931	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		41614	1					
ANR	41932	Callee	get_temporary_variable		41614	0					
ANR	41933	Identifier	get_temporary_variable		41614	0					
ANR	41934	ArgumentList	CG ( active_op_array )		41614	1					
ANR	41935	Argument	CG ( active_op_array )		41614	0					
ANR	41936	CallExpression	CG ( active_op_array )		41614	0					
ANR	41937	Callee	CG		41614	0					
ANR	41938	Identifier	CG		41614	0					
ANR	41939	ArgumentList	active_op_array		41614	1					
ANR	41940	Argument	active_op_array		41614	0					
ANR	41941	Identifier	active_op_array		41614	0					
ANR	41942	ExpressionStatement	"SET_NODE ( opline_ptr -> op1 , varname )"	698:1:22494:22528	41614	8	True				
ANR	41943	CallExpression	"SET_NODE ( opline_ptr -> op1 , varname )"		41614	0					
ANR	41944	Callee	SET_NODE		41614	0					
ANR	41945	Identifier	SET_NODE		41614	0					
ANR	41946	ArgumentList	opline_ptr -> op1		41614	1					
ANR	41947	Argument	opline_ptr -> op1		41614	0					
ANR	41948	PtrMemberAccess	opline_ptr -> op1		41614	0					
ANR	41949	Identifier	opline_ptr		41614	0					
ANR	41950	Identifier	op1		41614	1					
ANR	41951	Argument	varname		41614	1					
ANR	41952	Identifier	varname		41614	0					
ANR	41953	ExpressionStatement	"GET_NODE ( result , opline_ptr -> result )"	699:1:22531:22567	41614	9	True				
ANR	41954	CallExpression	"GET_NODE ( result , opline_ptr -> result )"		41614	0					
ANR	41955	Callee	GET_NODE		41614	0					
ANR	41956	Identifier	GET_NODE		41614	0					
ANR	41957	ArgumentList	result		41614	1					
ANR	41958	Argument	result		41614	0					
ANR	41959	Identifier	result		41614	0					
ANR	41960	Argument	opline_ptr -> result		41614	1					
ANR	41961	PtrMemberAccess	opline_ptr -> result		41614	0					
ANR	41962	Identifier	opline_ptr		41614	0					
ANR	41963	Identifier	result		41614	1					
ANR	41964	ExpressionStatement	SET_UNUSED ( opline_ptr -> op2 )	700:1:22570:22597	41614	10	True				
ANR	41965	CallExpression	SET_UNUSED ( opline_ptr -> op2 )		41614	0					
ANR	41966	Callee	SET_UNUSED		41614	0					
ANR	41967	Identifier	SET_UNUSED		41614	0					
ANR	41968	ArgumentList	opline_ptr -> op2		41614	1					
ANR	41969	Argument	opline_ptr -> op2		41614	0					
ANR	41970	PtrMemberAccess	opline_ptr -> op2		41614	0					
ANR	41971	Identifier	opline_ptr		41614	0					
ANR	41972	Identifier	op2		41614	1					
ANR	41973	ExpressionStatement	opline_ptr -> extended_value = ZEND_FETCH_LOCAL	701:1:22600:22645	41614	11	True				
ANR	41974	AssignmentExpression	opline_ptr -> extended_value = ZEND_FETCH_LOCAL		41614	0		=			
ANR	41975	PtrMemberAccess	opline_ptr -> extended_value		41614	0					
ANR	41976	Identifier	opline_ptr		41614	0					
ANR	41977	Identifier	extended_value		41614	1					
ANR	41978	Identifier	ZEND_FETCH_LOCAL		41614	1					
ANR	41979	IfStatement	if ( varname -> op_type == IS_CONST )		41614	12					
ANR	41980	Condition	varname -> op_type == IS_CONST	703:5:22653:22680	41614	0	True				
ANR	41981	EqualityExpression	varname -> op_type == IS_CONST		41614	0		==			
ANR	41982	PtrMemberAccess	varname -> op_type		41614	0					
ANR	41983	Identifier	varname		41614	0					
ANR	41984	Identifier	op_type		41614	1					
ANR	41985	Identifier	IS_CONST		41614	1					
ANR	41986	CompoundStatement		42:35:1450:1450	41614	1					
ANR	41987	ExpressionStatement	CALCULATE_LITERAL_HASH ( opline_ptr -> op1 . constant )	704:2:22687:22735	41614	0	True				
ANR	41988	CallExpression	CALCULATE_LITERAL_HASH ( opline_ptr -> op1 . constant )		41614	0					
ANR	41989	Callee	CALCULATE_LITERAL_HASH		41614	0					
ANR	41990	Identifier	CALCULATE_LITERAL_HASH		41614	0					
ANR	41991	ArgumentList	opline_ptr -> op1 . constant		41614	1					
ANR	41992	Argument	opline_ptr -> op1 . constant		41614	0					
ANR	41993	MemberAccess	opline_ptr -> op1 . constant		41614	0					
ANR	41994	PtrMemberAccess	opline_ptr -> op1		41614	0					
ANR	41995	Identifier	opline_ptr		41614	0					
ANR	41996	Identifier	op1		41614	1					
ANR	41997	Identifier	constant		41614	1					
ANR	41998	Statement	if	705:2:22739:22740	41614	1	True				
ANR	41999	Statement	(	705:5:22742:22742	41614	2	True				
ANR	42000	Statement	zend_is_auto_global_quick	705:6:22743:22767	41614	3	True				
ANR	42001	Statement	(	705:31:22768:22768	41614	4	True				
ANR	42002	Statement	Z_STRVAL	705:32:22769:22776	41614	5	True				
ANR	42003	Statement	(	705:40:22777:22777	41614	6	True				
ANR	42004	Statement	varname	705:41:22778:22784	41614	7	True				
ANR	42005	Statement	->	705:48:22785:22786	41614	8	True				
ANR	42006	Statement	u	705:50:22787:22787	41614	9	True				
ANR	42007	Statement	.	705:51:22788:22788	41614	10	True				
ANR	42008	Statement	constant	705:52:22789:22796	41614	11	True				
ANR	42009	Statement	)	705:60:22797:22797	41614	12	True				
ANR	42010	Statement	","	705:61:22798:22798	41614	13	True				
ANR	42011	Statement	Z_STRLEN	705:63:22800:22807	41614	14	True				
ANR	42012	Statement	(	705:71:22808:22808	41614	15	True				
ANR	42013	Statement	varname	705:72:22809:22815	41614	16	True				
ANR	42014	Statement	->	705:79:22816:22817	41614	17	True				
ANR	42015	Statement	u	705:81:22818:22818	41614	18	True				
ANR	42016	Statement	.	705:82:22819:22819	41614	19	True				
ANR	42017	Statement	constant	705:83:22820:22827	41614	20	True				
ANR	42018	Statement	)	705:91:22828:22828	41614	21	True				
ANR	42019	Statement	","	705:92:22829:22829	41614	22	True				
ANR	42020	Statement	Z_HASH_P	705:94:22831:22838	41614	23	True				
ANR	42021	Statement	(	705:102:22839:22839	41614	24	True				
ANR	42022	Statement	&	705:103:22840:22840	41614	25	True				
ANR	42023	Statement	CONSTANT	705:104:22841:22848	41614	26	True				
ANR	42024	Statement	(	705:112:22849:22849	41614	27	True				
ANR	42025	Statement	opline_ptr	705:113:22850:22859	41614	28	True				
ANR	42026	Statement	->	705:123:22860:22861	41614	29	True				
ANR	42027	Statement	op1	705:125:22862:22864	41614	30	True				
ANR	42028	Statement	.	705:128:22865:22865	41614	31	True				
ANR	42029	Statement	constant	705:129:22866:22873	41614	32	True				
ANR	42030	Statement	)	705:137:22874:22874	41614	33	True				
ANR	42031	Statement	)	705:138:22875:22875	41614	34	True				
ANR	42032	Statement	TSRMLS_CC	705:140:22877:22885	41614	35	True				
ANR	42033	Statement	)	705:149:22886:22886	41614	36	True				
ANR	42034	Statement	)	705:150:22887:22887	41614	37	True				
ANR	42035	CompoundStatement		44:152:1656:1656	41614	38					
ANR	42036	ExpressionStatement	opline_ptr -> extended_value = ZEND_FETCH_GLOBAL	706:3:22894:22940	41614	0	True				
ANR	42037	AssignmentExpression	opline_ptr -> extended_value = ZEND_FETCH_GLOBAL		41614	0		=			
ANR	42038	PtrMemberAccess	opline_ptr -> extended_value		41614	0					
ANR	42039	Identifier	opline_ptr		41614	0					
ANR	42040	Identifier	extended_value		41614	1					
ANR	42041	Identifier	ZEND_FETCH_GLOBAL		41614	1					
ANR	42042	IfStatement	if ( bp )		41614	13					
ANR	42043	Condition	bp	710:5:22955:22956	41614	0	True				
ANR	42044	Identifier	bp		41614	0					
ANR	42045	CompoundStatement		49:9:1726:1726	41614	1					
ANR	42046	ExpressionStatement	"zend_stack_top ( & CG ( bp_stack ) , ( void * * ) & fetch_list_ptr )"	711:2:22963:23019	41614	0	True				
ANR	42047	CallExpression	"zend_stack_top ( & CG ( bp_stack ) , ( void * * ) & fetch_list_ptr )"		41614	0					
ANR	42048	Callee	zend_stack_top		41614	0					
ANR	42049	Identifier	zend_stack_top		41614	0					
ANR	42050	ArgumentList	& CG ( bp_stack )		41614	1					
ANR	42051	Argument	& CG ( bp_stack )		41614	0					
ANR	42052	UnaryOperationExpression	& CG ( bp_stack )		41614	0					
ANR	42053	UnaryOperator	&		41614	0					
ANR	42054	CallExpression	CG ( bp_stack )		41614	1					
ANR	42055	Callee	CG		41614	0					
ANR	42056	Identifier	CG		41614	0					
ANR	42057	ArgumentList	bp_stack		41614	1					
ANR	42058	Argument	bp_stack		41614	0					
ANR	42059	Identifier	bp_stack		41614	0					
ANR	42060	Argument	( void * * ) & fetch_list_ptr		41614	1					
ANR	42061	CastExpression	( void * * ) & fetch_list_ptr		41614	0					
ANR	42062	CastTarget	void * *		41614	0					
ANR	42063	UnaryOperationExpression	& fetch_list_ptr		41614	1					
ANR	42064	UnaryOperator	&		41614	0					
ANR	42065	Identifier	fetch_list_ptr		41614	1					
ANR	42066	ExpressionStatement	"zend_llist_add_element ( fetch_list_ptr , opline_ptr )"	712:2:23023:23073	41614	1	True				
ANR	42067	CallExpression	"zend_llist_add_element ( fetch_list_ptr , opline_ptr )"		41614	0					
ANR	42068	Callee	zend_llist_add_element		41614	0					
ANR	42069	Identifier	zend_llist_add_element		41614	0					
ANR	42070	ArgumentList	fetch_list_ptr		41614	1					
ANR	42071	Argument	fetch_list_ptr		41614	0					
ANR	42072	Identifier	fetch_list_ptr		41614	0					
ANR	42073	Argument	opline_ptr		41614	1					
ANR	42074	Identifier	opline_ptr		41614	0					
ANR	42075	ReturnType	void		41614	1					
ANR	42076	Identifier	fetch_simple_variable_ex		41614	2					
ANR	42077	ParameterList	"znode * result , znode * varname , int bp , zend_uchar op TSRMLS_DC"		41614	3					
ANR	42078	Parameter	znode * result	661:30:21158:21170	41614	0	True				
ANR	42079	ParameterType	znode *		41614	0					
ANR	42080	Identifier	result		41614	1					
ANR	42081	Parameter	znode * varname	661:45:21173:21186	41614	1	True				
ANR	42082	ParameterType	znode *		41614	0					
ANR	42083	Identifier	varname		41614	1					
ANR	42084	Parameter	int bp	661:61:21189:21194	41614	2	True				
ANR	42085	ParameterType	int		41614	0					
ANR	42086	Identifier	bp		41614	1					
ANR	42087	Parameter	zend_uchar op TSRMLS_DC	661:69:21197:21219	41614	3	True				
ANR	42088	ParameterType	zend_uchar op		41614	0					
ANR	42089	Identifier	TSRMLS_DC		41614	1					
ANR	42090	CFGEntryNode	ENTRY		41614		True				
ANR	42091	CFGExitNode	EXIT		41614		True				
ANR	42092	Symbol	IS_CV		41614						
ANR	42093	Symbol	opline_ptr -> result_type		41614						
ANR	42094	Symbol	CG ( active_op_array ) -> vars		41614						
ANR	42095	Symbol	result -> u . op . var		41614						
ANR	42096	Symbol	CG ( active_op_array ) -> vars [ result -> u . op . var ] . name		41614						
ANR	42097	Symbol	Z_TYPE		41614						
ANR	42098	Symbol	* CG		41614						
ANR	42099	Symbol	get_temporary_variable		41614						
ANR	42100	Symbol	TSRMLS_DC		41614						
ANR	42101	Symbol	result -> u		41614						
ANR	42102	Symbol	& CG		41614						
ANR	42103	Symbol	opline		41614						
ANR	42104	Symbol	IS_STRING		41614						
ANR	42105	Symbol	ZEND_FETCH_GLOBAL		41614						
ANR	42106	Symbol	IS_CONST		41614						
ANR	42107	Symbol	opline_ptr		41614						
ANR	42108	Symbol	opline_ptr -> result		41614						
ANR	42109	Symbol	* * result		41614						
ANR	42110	Symbol	opline_ptr -> op2		41614						
ANR	42111	Symbol	opline_ptr -> op1		41614						
ANR	42112	Symbol	varname		41614						
ANR	42113	Symbol	str_hash		41614						
ANR	42114	Symbol	result -> EA		41614						
ANR	42115	Symbol	* CG ( active_op_array ) -> vars		41614						
ANR	42116	Symbol	IS_VAR		41614						
ANR	42117	Symbol	hash		41614						
ANR	42118	Symbol	* varname		41614						
ANR	42119	Symbol	bp_stack		41614						
ANR	42120	Symbol	varname -> u		41614						
ANR	42121	Symbol	fetch_list_ptr		41614						
ANR	42122	Symbol	varname -> op_type		41614						
ANR	42123	Symbol	Z_STRLEN		41614						
ANR	42124	Symbol	result -> u . op		41614						
ANR	42125	Symbol	result -> op_type		41614						
ANR	42126	Symbol	bp		41614						
ANR	42127	Symbol	result		41614						
ANR	42128	Symbol	* * CG		41614						
ANR	42129	Symbol	opline_ptr -> op1 . constant		41614						
ANR	42130	Symbol	& varname -> u		41614						
ANR	42131	Symbol	* result		41614						
ANR	42132	Symbol	Z_STRVAL		41614						
ANR	42133	Symbol	* opline_ptr		41614						
ANR	42134	Symbol	* result -> u . op . var		41614						
ANR	42135	Symbol	& varname -> u . constant		41614						
ANR	42136	Symbol	op		41614						
ANR	42137	Symbol	* result -> u		41614						
ANR	42138	Symbol	CG		41614						
ANR	42139	Symbol	& fetch_list_ptr		41614						
ANR	42140	Symbol	active_op_array		41614						
ANR	42141	Symbol	ZEND_FETCH_LOCAL		41614						
ANR	42142	Symbol	* result -> u . op		41614						
ANR	42143	Symbol	opline_ptr -> result . var		41614						
ANR	42144	Symbol	opline_ptr -> opcode		41614						
ANR	42145	Symbol	opline_ptr -> extended_value		41614						
ANR	42146	Symbol	& opline		41614						
ANR	42147	Symbol	varname -> u . constant		41614						
ANR	42148	Function	fetch_simple_variable	717:0:23091:23357							
ANR	42149	FunctionDef	"fetch_simple_variable (znode * result , znode * varname , int bp TSRMLS_DC)"		42148	0					
ANR	42150	CompoundStatement		718:0:23177:23357	42148	0					
ANR	42151	Statement	fetch_simple_variable_ex	720:1:23286:23309	42148	0	True				
ANR	42152	Statement	(	720:25:23310:23310	42148	1	True				
ANR	42153	Statement	result	720:26:23311:23316	42148	2	True				
ANR	42154	Statement	","	720:32:23317:23317	42148	3	True				
ANR	42155	Statement	varname	720:34:23319:23325	42148	4	True				
ANR	42156	Statement	","	720:41:23326:23326	42148	5	True				
ANR	42157	Statement	bp	720:43:23328:23329	42148	6	True				
ANR	42158	Statement	","	720:45:23330:23330	42148	7	True				
ANR	42159	Statement	ZEND_FETCH_W	720:47:23332:23343	42148	8	True				
ANR	42160	Statement	TSRMLS_CC	720:60:23345:23353	42148	9	True				
ANR	42161	Statement	)	720:69:23354:23354	42148	10	True				
ANR	42162	ExpressionStatement		720:70:23355:23355	42148	11	True				
ANR	42163	ReturnType	void		42148	1					
ANR	42164	Identifier	fetch_simple_variable		42148	2					
ANR	42165	ParameterList	"znode * result , znode * varname , int bp TSRMLS_DC"		42148	3					
ANR	42166	Parameter	znode * result	717:27:23118:23130	42148	0	True				
ANR	42167	ParameterType	znode *		42148	0					
ANR	42168	Identifier	result		42148	1					
ANR	42169	Parameter	znode * varname	717:42:23133:23146	42148	1	True				
ANR	42170	ParameterType	znode *		42148	0					
ANR	42171	Identifier	varname		42148	1					
ANR	42172	Parameter	int bp TSRMLS_DC	717:58:23149:23164	42148	2	True				
ANR	42173	ParameterType	int bp		42148	0					
ANR	42174	Identifier	TSRMLS_DC		42148	1					
ANR	42175	CFGEntryNode	ENTRY		42148		True				
ANR	42176	CFGExitNode	EXIT		42148		True				
ANR	42177	Symbol	result		42148						
ANR	42178	Symbol	varname		42148						
ANR	42179	Symbol	TSRMLS_DC		42148						
ANR	42180	DeclStmt									
ANR	42181	Decl							znode	znode	class_node
ANR	42182	DeclStmt									
ANR	42183	Decl							zend_llist	zend_llist *	fetch_list_ptr
ANR	42184	DeclStmt									
ANR	42185	Decl							zend_llist_element	zend_llist_element *	le
ANR	42186	DeclStmt									
ANR	42187	Decl							zend_op	zend_op *	opline_ptr
ANR	42188	DeclStmt									
ANR	42189	Decl							zend_op	zend_op	opline
ANR	42190	DeclStmt									
ANR	42191	Decl							zend_op	zend_op	opline
ANR	42192	DeclStmt									
ANR	42193	Decl							zend_llist	zend_llist *	fetch_list_ptr
ANR	42194	DeclStmt									
ANR	42195	Decl							ulong	ulong	index
ANR	42196	DeclStmt									
ANR	42197	Decl							int	int	numeric
ANR	42198	DeclStmt									
ANR	42199	Decl							zend_op	zend_op *	opline
ANR	42200	DeclStmt									
ANR	42201	Decl							zend_op	zend_op *	opline
ANR	42202	DeclStmt									
ANR	42203	Decl							char	char *	method_type
ANR	42204	DeclStmt									
ANR	42205	Decl							zend_op	zend_op *	opline
ANR	42206	DeclStmt									
ANR	42207	Decl							int	int	last_op_number
ANR	42208	DeclStmt									
ANR	42209	Decl							zend_op	zend_op *	opline
ANR	42210	DeclStmt									
ANR	42211	Decl							zend_llist	zend_llist *	fetch_list_ptr
ANR	42212	DeclStmt									
ANR	42213	Decl							int	int	n
ANR	42214	DeclStmt									
ANR	42215	Decl							zend_op	zend_op *	last_op
ANR	42216	DeclStmt									
ANR	42217	Decl							int	int	opline_no
ANR	42218	DeclStmt									
ANR	42219	Decl							int	int	opline_no
ANR	42220	DeclStmt									
ANR	42221	Decl							zend_op	zend_op *	opline
ANR	42222	DeclStmt									
ANR	42223	Decl							int	int	last_op_number
ANR	42224	DeclStmt									
ANR	42225	Decl							zend_brk_cont_element	zend_brk_cont_element *	brk_cont_element
ANR	42226	DeclStmt									
ANR	42227	Decl							int	int	parent
ANR	42228	Function	do_end_loop	1086:0:35452:36103							
ANR	42229	FunctionDef	"do_end_loop (int cont_addr , int has_loop_var TSRMLS_DC)"		42228	0					
ANR	42230	CompoundStatement		1087:0:35536:36103	42228	0					
ANR	42231	IfStatement	if ( ! has_loop_var )		42228	0					
ANR	42232	Condition	! has_loop_var	1088:5:35543:35555	42228	0	True				
ANR	42233	UnaryOperationExpression	! has_loop_var		42228	0					
ANR	42234	UnaryOperator	!		42228	0					
ANR	42235	Identifier	has_loop_var		42228	1					
ANR	42236	CompoundStatement		2:20:21:21	42228	1					
ANR	42237	ExpressionStatement	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . start = - 1	1092:2:35717:35793	42228	0	True				
ANR	42238	AssignmentExpression	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . start = - 1		42228	0		=			
ANR	42239	MemberAccess	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . start		42228	0					
ANR	42240	ArrayIndexing	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ]		42228	0					
ANR	42241	PtrMemberAccess	CG ( active_op_array ) -> brk_cont_array		42228	0					
ANR	42242	CallExpression	CG ( active_op_array )		42228	0					
ANR	42243	Callee	CG		42228	0					
ANR	42244	Identifier	CG		42228	0					
ANR	42245	ArgumentList	active_op_array		42228	1					
ANR	42246	Argument	active_op_array		42228	0					
ANR	42247	Identifier	active_op_array		42228	0					
ANR	42248	Identifier	brk_cont_array		42228	1					
ANR	42249	MemberAccess	CG ( context ) . current_brk_cont		42228	1					
ANR	42250	CallExpression	CG ( context )		42228	0					
ANR	42251	Callee	CG		42228	0					
ANR	42252	Identifier	CG		42228	0					
ANR	42253	ArgumentList	context		42228	1					
ANR	42254	Argument	context		42228	0					
ANR	42255	Identifier	context		42228	0					
ANR	42256	Identifier	current_brk_cont		42228	1					
ANR	42257	Identifier	start		42228	1					
ANR	42258	UnaryOperationExpression	- 1		42228	1					
ANR	42259	UnaryOperator	-		42228	0					
ANR	42260	PrimaryExpression	1		42228	1					
ANR	42261	ExpressionStatement	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . cont = cont_addr	1094:1:35799:35881	42228	1	True				
ANR	42262	AssignmentExpression	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . cont = cont_addr		42228	0		=			
ANR	42263	MemberAccess	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . cont		42228	0					
ANR	42264	ArrayIndexing	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ]		42228	0					
ANR	42265	PtrMemberAccess	CG ( active_op_array ) -> brk_cont_array		42228	0					
ANR	42266	CallExpression	CG ( active_op_array )		42228	0					
ANR	42267	Callee	CG		42228	0					
ANR	42268	Identifier	CG		42228	0					
ANR	42269	ArgumentList	active_op_array		42228	1					
ANR	42270	Argument	active_op_array		42228	0					
ANR	42271	Identifier	active_op_array		42228	0					
ANR	42272	Identifier	brk_cont_array		42228	1					
ANR	42273	MemberAccess	CG ( context ) . current_brk_cont		42228	1					
ANR	42274	CallExpression	CG ( context )		42228	0					
ANR	42275	Callee	CG		42228	0					
ANR	42276	Identifier	CG		42228	0					
ANR	42277	ArgumentList	context		42228	1					
ANR	42278	Argument	context		42228	0					
ANR	42279	Identifier	context		42228	0					
ANR	42280	Identifier	current_brk_cont		42228	1					
ANR	42281	Identifier	cont		42228	1					
ANR	42282	Identifier	cont_addr		42228	1					
ANR	42283	ExpressionStatement	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . brk = get_next_op_number ( CG ( active_op_array ) )	1095:1:35884:35995	42228	2	True				
ANR	42284	AssignmentExpression	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . brk = get_next_op_number ( CG ( active_op_array ) )		42228	0		=			
ANR	42285	MemberAccess	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . brk		42228	0					
ANR	42286	ArrayIndexing	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ]		42228	0					
ANR	42287	PtrMemberAccess	CG ( active_op_array ) -> brk_cont_array		42228	0					
ANR	42288	CallExpression	CG ( active_op_array )		42228	0					
ANR	42289	Callee	CG		42228	0					
ANR	42290	Identifier	CG		42228	0					
ANR	42291	ArgumentList	active_op_array		42228	1					
ANR	42292	Argument	active_op_array		42228	0					
ANR	42293	Identifier	active_op_array		42228	0					
ANR	42294	Identifier	brk_cont_array		42228	1					
ANR	42295	MemberAccess	CG ( context ) . current_brk_cont		42228	1					
ANR	42296	CallExpression	CG ( context )		42228	0					
ANR	42297	Callee	CG		42228	0					
ANR	42298	Identifier	CG		42228	0					
ANR	42299	ArgumentList	context		42228	1					
ANR	42300	Argument	context		42228	0					
ANR	42301	Identifier	context		42228	0					
ANR	42302	Identifier	current_brk_cont		42228	1					
ANR	42303	Identifier	brk		42228	1					
ANR	42304	CallExpression	get_next_op_number ( CG ( active_op_array ) )		42228	1					
ANR	42305	Callee	get_next_op_number		42228	0					
ANR	42306	Identifier	get_next_op_number		42228	0					
ANR	42307	ArgumentList	CG ( active_op_array )		42228	1					
ANR	42308	Argument	CG ( active_op_array )		42228	0					
ANR	42309	CallExpression	CG ( active_op_array )		42228	0					
ANR	42310	Callee	CG		42228	0					
ANR	42311	Identifier	CG		42228	0					
ANR	42312	ArgumentList	active_op_array		42228	1					
ANR	42313	Argument	active_op_array		42228	0					
ANR	42314	Identifier	active_op_array		42228	0					
ANR	42315	ExpressionStatement	CG ( context ) . current_brk_cont = CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . parent	1096:1:35998:36101	42228	3	True				
ANR	42316	AssignmentExpression	CG ( context ) . current_brk_cont = CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . parent		42228	0		=			
ANR	42317	MemberAccess	CG ( context ) . current_brk_cont		42228	0					
ANR	42318	CallExpression	CG ( context )		42228	0					
ANR	42319	Callee	CG		42228	0					
ANR	42320	Identifier	CG		42228	0					
ANR	42321	ArgumentList	context		42228	1					
ANR	42322	Argument	context		42228	0					
ANR	42323	Identifier	context		42228	0					
ANR	42324	Identifier	current_brk_cont		42228	1					
ANR	42325	MemberAccess	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . parent		42228	1					
ANR	42326	ArrayIndexing	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ]		42228	0					
ANR	42327	PtrMemberAccess	CG ( active_op_array ) -> brk_cont_array		42228	0					
ANR	42328	CallExpression	CG ( active_op_array )		42228	0					
ANR	42329	Callee	CG		42228	0					
ANR	42330	Identifier	CG		42228	0					
ANR	42331	ArgumentList	active_op_array		42228	1					
ANR	42332	Argument	active_op_array		42228	0					
ANR	42333	Identifier	active_op_array		42228	0					
ANR	42334	Identifier	brk_cont_array		42228	1					
ANR	42335	MemberAccess	CG ( context ) . current_brk_cont		42228	1					
ANR	42336	CallExpression	CG ( context )		42228	0					
ANR	42337	Callee	CG		42228	0					
ANR	42338	Identifier	CG		42228	0					
ANR	42339	ArgumentList	context		42228	1					
ANR	42340	Argument	context		42228	0					
ANR	42341	Identifier	context		42228	0					
ANR	42342	Identifier	current_brk_cont		42228	1					
ANR	42343	Identifier	parent		42228	1					
ANR	42344	ReturnType	static inline void		42228	1					
ANR	42345	Identifier	do_end_loop		42228	2					
ANR	42346	ParameterList	"int cont_addr , int has_loop_var TSRMLS_DC"		42228	3					
ANR	42347	Parameter	int cont_addr	1086:31:35483:35495	42228	0	True				
ANR	42348	ParameterType	int		42228	0					
ANR	42349	Identifier	cont_addr		42228	1					
ANR	42350	Parameter	int has_loop_var TSRMLS_DC	1086:46:35498:35523	42228	1	True				
ANR	42351	ParameterType	int has_loop_var		42228	0					
ANR	42352	Identifier	TSRMLS_DC		42228	1					
ANR	42353	CFGEntryNode	ENTRY		42228		True				
ANR	42354	CFGExitNode	EXIT		42228		True				
ANR	42355	Symbol	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . start		42228						
ANR	42356	Symbol	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . cont		42228						
ANR	42357	Symbol	CG		42228						
ANR	42358	Symbol	CG ( active_op_array ) -> brk_cont_array		42228						
ANR	42359	Symbol	active_op_array		42228						
ANR	42360	Symbol	* CG ( context ) . current_brk_cont		42228						
ANR	42361	Symbol	* CG		42228						
ANR	42362	Symbol	TSRMLS_DC		42228						
ANR	42363	Symbol	* * CG		42228						
ANR	42364	Symbol	* CG ( active_op_array ) -> brk_cont_array		42228						
ANR	42365	Symbol	has_loop_var		42228						
ANR	42366	Symbol	context		42228						
ANR	42367	Symbol	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . brk		42228						
ANR	42368	Symbol	get_next_op_number		42228						
ANR	42369	Symbol	cont_addr		42228						
ANR	42370	Symbol	CG ( context ) . current_brk_cont		42228						
ANR	42371	Symbol	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] . parent		42228						
ANR	42372	DeclStmt									
ANR	42373	Decl							int	int	while_cond_op_number
ANR	42374	DeclStmt									
ANR	42375	Decl							zend_op	zend_op *	opline
ANR	42376	DeclStmt									
ANR	42377	Decl							zend_op	zend_op *	opline
ANR	42378	DeclStmt									
ANR	42379	Decl							int	int	for_cond_op_number
ANR	42380	DeclStmt									
ANR	42381	Decl							zend_op	zend_op *	opline
ANR	42382	DeclStmt									
ANR	42383	Decl							zend_op	zend_op *	opline
ANR	42384	DeclStmt									
ANR	42385	Decl							zend_op	zend_op *	opline
ANR	42386	Function	zend_do_pre_incdec	1178:0:38641:39461							
ANR	42387	FunctionDef	"zend_do_pre_incdec (znode * result , const znode * op1 , zend_uchar op TSRMLS_DC)"		42386	0					
ANR	42388	CompoundStatement		1179:0:38733:39461	42386	0					
ANR	42389	IdentifierDeclStatement	int last_op_number = get_next_op_number ( CG ( active_op_array ) ) ;	1180:1:38736:38796	42386	0	True				
ANR	42390	IdentifierDecl	last_op_number = get_next_op_number ( CG ( active_op_array ) )		42386	0					
ANR	42391	IdentifierDeclType	int		42386	0					
ANR	42392	Identifier	last_op_number		42386	1					
ANR	42393	AssignmentExpression	last_op_number = get_next_op_number ( CG ( active_op_array ) )		42386	2		=			
ANR	42394	Identifier	last_op_number		42386	0					
ANR	42395	CallExpression	get_next_op_number ( CG ( active_op_array ) )		42386	1					
ANR	42396	Callee	get_next_op_number		42386	0					
ANR	42397	Identifier	get_next_op_number		42386	0					
ANR	42398	ArgumentList	CG ( active_op_array )		42386	1					
ANR	42399	Argument	CG ( active_op_array )		42386	0					
ANR	42400	CallExpression	CG ( active_op_array )		42386	0					
ANR	42401	Callee	CG		42386	0					
ANR	42402	Identifier	CG		42386	0					
ANR	42403	ArgumentList	active_op_array		42386	1					
ANR	42404	Argument	active_op_array		42386	0					
ANR	42405	Identifier	active_op_array		42386	0					
ANR	42406	IdentifierDeclStatement	zend_op * opline ;	1181:1:38799:38814	42386	1	True				
ANR	42407	IdentifierDecl	* opline		42386	0					
ANR	42408	IdentifierDeclType	zend_op *		42386	0					
ANR	42409	Identifier	opline		42386	1					
ANR	42410	IfStatement	if ( last_op_number > 0 )		42386	2					
ANR	42411	Condition	last_op_number > 0	1183:5:38822:38839	42386	0	True				
ANR	42412	RelationalExpression	last_op_number > 0		42386	0		>			
ANR	42413	Identifier	last_op_number		42386	0					
ANR	42414	PrimaryExpression	0		42386	1					
ANR	42415	CompoundStatement		6:2:112:178	42386	1					
ANR	42416	IdentifierDeclStatement	zend_op * last_op = & CG ( active_op_array ) -> opcodes [ last_op_number - 1 ] ;	1184:2:38846:38912	42386	0	True				
ANR	42417	IdentifierDecl	* last_op = & CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		42386	0					
ANR	42418	IdentifierDeclType	zend_op *		42386	0					
ANR	42419	Identifier	last_op		42386	1					
ANR	42420	AssignmentExpression	* last_op = & CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		42386	2		=			
ANR	42421	Identifier	last_op		42386	0					
ANR	42422	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		42386	1					
ANR	42423	UnaryOperator	&		42386	0					
ANR	42424	ArrayIndexing	CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		42386	1					
ANR	42425	PtrMemberAccess	CG ( active_op_array ) -> opcodes		42386	0					
ANR	42426	CallExpression	CG ( active_op_array )		42386	0					
ANR	42427	Callee	CG		42386	0					
ANR	42428	Identifier	CG		42386	0					
ANR	42429	ArgumentList	active_op_array		42386	1					
ANR	42430	Argument	active_op_array		42386	0					
ANR	42431	Identifier	active_op_array		42386	0					
ANR	42432	Identifier	opcodes		42386	1					
ANR	42433	AdditiveExpression	last_op_number - 1		42386	1		-			
ANR	42434	Identifier	last_op_number		42386	0					
ANR	42435	PrimaryExpression	1		42386	1					
ANR	42436	IfStatement	if ( last_op -> opcode == ZEND_FETCH_OBJ_RW )		42386	1					
ANR	42437	Condition	last_op -> opcode == ZEND_FETCH_OBJ_RW	1186:6:38921:38956	42386	0	True				
ANR	42438	EqualityExpression	last_op -> opcode == ZEND_FETCH_OBJ_RW		42386	0		==			
ANR	42439	PtrMemberAccess	last_op -> opcode		42386	0					
ANR	42440	Identifier	last_op		42386	0					
ANR	42441	Identifier	opcode		42386	1					
ANR	42442	Identifier	ZEND_FETCH_OBJ_RW		42386	1					
ANR	42443	CompoundStatement		8:44:225:225	42386	1					
ANR	42444	ExpressionStatement	last_op -> opcode = ( op == ZEND_PRE_INC ) ? ZEND_PRE_INC_OBJ : ZEND_PRE_DEC_OBJ	1187:3:38964:39034	42386	0	True				
ANR	42445	AssignmentExpression	last_op -> opcode = ( op == ZEND_PRE_INC ) ? ZEND_PRE_INC_OBJ : ZEND_PRE_DEC_OBJ		42386	0		=			
ANR	42446	PtrMemberAccess	last_op -> opcode		42386	0					
ANR	42447	Identifier	last_op		42386	0					
ANR	42448	Identifier	opcode		42386	1					
ANR	42449	ConditionalExpression	( op == ZEND_PRE_INC ) ? ZEND_PRE_INC_OBJ : ZEND_PRE_DEC_OBJ		42386	1					
ANR	42450	Condition	op == ZEND_PRE_INC		42386	0					
ANR	42451	EqualityExpression	op == ZEND_PRE_INC		42386	0		==			
ANR	42452	Identifier	op		42386	0					
ANR	42453	Identifier	ZEND_PRE_INC		42386	1					
ANR	42454	Identifier	ZEND_PRE_INC_OBJ		42386	1					
ANR	42455	Identifier	ZEND_PRE_DEC_OBJ		42386	2					
ANR	42456	ExpressionStatement	last_op -> result_type = IS_VAR	1188:3:39039:39068	42386	1	True				
ANR	42457	AssignmentExpression	last_op -> result_type = IS_VAR		42386	0		=			
ANR	42458	PtrMemberAccess	last_op -> result_type		42386	0					
ANR	42459	Identifier	last_op		42386	0					
ANR	42460	Identifier	result_type		42386	1					
ANR	42461	Identifier	IS_VAR		42386	1					
ANR	42462	ExpressionStatement	last_op -> result . var = get_temporary_variable ( CG ( active_op_array ) )	1189:3:39073:39138	42386	2	True				
ANR	42463	AssignmentExpression	last_op -> result . var = get_temporary_variable ( CG ( active_op_array ) )		42386	0		=			
ANR	42464	MemberAccess	last_op -> result . var		42386	0					
ANR	42465	PtrMemberAccess	last_op -> result		42386	0					
ANR	42466	Identifier	last_op		42386	0					
ANR	42467	Identifier	result		42386	1					
ANR	42468	Identifier	var		42386	1					
ANR	42469	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		42386	1					
ANR	42470	Callee	get_temporary_variable		42386	0					
ANR	42471	Identifier	get_temporary_variable		42386	0					
ANR	42472	ArgumentList	CG ( active_op_array )		42386	1					
ANR	42473	Argument	CG ( active_op_array )		42386	0					
ANR	42474	CallExpression	CG ( active_op_array )		42386	0					
ANR	42475	Callee	CG		42386	0					
ANR	42476	Identifier	CG		42386	0					
ANR	42477	ArgumentList	active_op_array		42386	1					
ANR	42478	Argument	active_op_array		42386	0					
ANR	42479	Identifier	active_op_array		42386	0					
ANR	42480	ExpressionStatement	"GET_NODE ( result , last_op -> result )"	1190:3:39143:39176	42386	3	True				
ANR	42481	CallExpression	"GET_NODE ( result , last_op -> result )"		42386	0					
ANR	42482	Callee	GET_NODE		42386	0					
ANR	42483	Identifier	GET_NODE		42386	0					
ANR	42484	ArgumentList	result		42386	1					
ANR	42485	Argument	result		42386	0					
ANR	42486	Identifier	result		42386	0					
ANR	42487	Argument	last_op -> result		42386	1					
ANR	42488	PtrMemberAccess	last_op -> result		42386	0					
ANR	42489	Identifier	last_op		42386	0					
ANR	42490	Identifier	result		42386	1					
ANR	42491	ReturnStatement	return ;	1191:3:39181:39187	42386	4	True				
ANR	42492	Statement	opline	1195:1:39198:39203	42386	3	True				
ANR	42493	Statement	=	1195:8:39205:39205	42386	4	True				
ANR	42494	Statement	get_next_op	1195:10:39207:39217	42386	5	True				
ANR	42495	Statement	(	1195:21:39218:39218	42386	6	True				
ANR	42496	Statement	CG	1195:22:39219:39220	42386	7	True				
ANR	42497	Statement	(	1195:24:39221:39221	42386	8	True				
ANR	42498	Statement	active_op_array	1195:25:39222:39236	42386	9	True				
ANR	42499	Statement	)	1195:40:39237:39237	42386	10	True				
ANR	42500	Statement	TSRMLS_CC	1195:42:39239:39247	42386	11	True				
ANR	42501	Statement	)	1195:51:39248:39248	42386	12	True				
ANR	42502	ExpressionStatement		1195:52:39249:39249	42386	13	True				
ANR	42503	ExpressionStatement	opline -> opcode = op	1196:1:39252:39271	42386	14	True				
ANR	42504	AssignmentExpression	opline -> opcode = op		42386	0		=			
ANR	42505	PtrMemberAccess	opline -> opcode		42386	0					
ANR	42506	Identifier	opline		42386	0					
ANR	42507	Identifier	opcode		42386	1					
ANR	42508	Identifier	op		42386	1					
ANR	42509	ExpressionStatement	"SET_NODE ( opline -> op1 , op1 )"	1197:1:39274:39300	42386	15	True				
ANR	42510	CallExpression	"SET_NODE ( opline -> op1 , op1 )"		42386	0					
ANR	42511	Callee	SET_NODE		42386	0					
ANR	42512	Identifier	SET_NODE		42386	0					
ANR	42513	ArgumentList	opline -> op1		42386	1					
ANR	42514	Argument	opline -> op1		42386	0					
ANR	42515	PtrMemberAccess	opline -> op1		42386	0					
ANR	42516	Identifier	opline		42386	0					
ANR	42517	Identifier	op1		42386	1					
ANR	42518	Argument	op1		42386	1					
ANR	42519	Identifier	op1		42386	0					
ANR	42520	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1198:1:39303:39326	42386	16	True				
ANR	42521	CallExpression	SET_UNUSED ( opline -> op2 )		42386	0					
ANR	42522	Callee	SET_UNUSED		42386	0					
ANR	42523	Identifier	SET_UNUSED		42386	0					
ANR	42524	ArgumentList	opline -> op2		42386	1					
ANR	42525	Argument	opline -> op2		42386	0					
ANR	42526	PtrMemberAccess	opline -> op2		42386	0					
ANR	42527	Identifier	opline		42386	0					
ANR	42528	Identifier	op2		42386	1					
ANR	42529	ExpressionStatement	opline -> result_type = IS_VAR	1199:1:39329:39357	42386	17	True				
ANR	42530	AssignmentExpression	opline -> result_type = IS_VAR		42386	0		=			
ANR	42531	PtrMemberAccess	opline -> result_type		42386	0					
ANR	42532	Identifier	opline		42386	0					
ANR	42533	Identifier	result_type		42386	1					
ANR	42534	Identifier	IS_VAR		42386	1					
ANR	42535	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	1200:1:39360:39424	42386	18	True				
ANR	42536	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		42386	0		=			
ANR	42537	MemberAccess	opline -> result . var		42386	0					
ANR	42538	PtrMemberAccess	opline -> result		42386	0					
ANR	42539	Identifier	opline		42386	0					
ANR	42540	Identifier	result		42386	1					
ANR	42541	Identifier	var		42386	1					
ANR	42542	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		42386	1					
ANR	42543	Callee	get_temporary_variable		42386	0					
ANR	42544	Identifier	get_temporary_variable		42386	0					
ANR	42545	ArgumentList	CG ( active_op_array )		42386	1					
ANR	42546	Argument	CG ( active_op_array )		42386	0					
ANR	42547	CallExpression	CG ( active_op_array )		42386	0					
ANR	42548	Callee	CG		42386	0					
ANR	42549	Identifier	CG		42386	0					
ANR	42550	ArgumentList	active_op_array		42386	1					
ANR	42551	Argument	active_op_array		42386	0					
ANR	42552	Identifier	active_op_array		42386	0					
ANR	42553	ExpressionStatement	"GET_NODE ( result , opline -> result )"	1201:1:39427:39459	42386	19	True				
ANR	42554	CallExpression	"GET_NODE ( result , opline -> result )"		42386	0					
ANR	42555	Callee	GET_NODE		42386	0					
ANR	42556	Identifier	GET_NODE		42386	0					
ANR	42557	ArgumentList	result		42386	1					
ANR	42558	Argument	result		42386	0					
ANR	42559	Identifier	result		42386	0					
ANR	42560	Argument	opline -> result		42386	1					
ANR	42561	PtrMemberAccess	opline -> result		42386	0					
ANR	42562	Identifier	opline		42386	0					
ANR	42563	Identifier	result		42386	1					
ANR	42564	ReturnType	void		42386	1					
ANR	42565	Identifier	zend_do_pre_incdec		42386	2					
ANR	42566	ParameterList	"znode * result , const znode * op1 , zend_uchar op TSRMLS_DC"		42386	3					
ANR	42567	Parameter	znode * result	1178:24:38665:38677	42386	0	True				
ANR	42568	ParameterType	znode *		42386	0					
ANR	42569	Identifier	result		42386	1					
ANR	42570	Parameter	const znode * op1	1178:39:38680:38695	42386	1	True				
ANR	42571	ParameterType	const znode *		42386	0					
ANR	42572	Identifier	op1		42386	1					
ANR	42573	Parameter	zend_uchar op TSRMLS_DC	1178:57:38698:38720	42386	2	True				
ANR	42574	ParameterType	zend_uchar op		42386	0					
ANR	42575	Identifier	TSRMLS_DC		42386	1					
ANR	42576	CFGEntryNode	ENTRY		42386		True				
ANR	42577	CFGExitNode	EXIT		42386		True				
ANR	42578	Symbol	opline -> op1		42386						
ANR	42579	Symbol	opline -> op2		42386						
ANR	42580	Symbol	* CG		42386						
ANR	42581	Symbol	get_temporary_variable		42386						
ANR	42582	Symbol	TSRMLS_DC		42386						
ANR	42583	Symbol	CG ( active_op_array ) -> opcodes		42386						
ANR	42584	Symbol	opline -> result		42386						
ANR	42585	Symbol	result		42386						
ANR	42586	Symbol	opline		42386						
ANR	42587	Symbol	last_op -> result_type		42386						
ANR	42588	Symbol	last_op		42386						
ANR	42589	Symbol	ZEND_PRE_DEC_OBJ		42386						
ANR	42590	Symbol	last_op -> opcode		42386						
ANR	42591	Symbol	last_op_number		42386						
ANR	42592	Symbol	opline -> result_type		42386						
ANR	42593	Symbol	op		42386						
ANR	42594	Symbol	CG		42386						
ANR	42595	Symbol	* last_op		42386						
ANR	42596	Symbol	active_op_array		42386						
ANR	42597	Symbol	ZEND_PRE_INC		42386						
ANR	42598	Symbol	ZEND_PRE_INC_OBJ		42386						
ANR	42599	Symbol	ZEND_FETCH_OBJ_RW		42386						
ANR	42600	Symbol	last_op -> result		42386						
ANR	42601	Symbol	op1		42386						
ANR	42602	Symbol	* opline		42386						
ANR	42603	Symbol	opline -> opcode		42386						
ANR	42604	Symbol	get_next_op_number		42386						
ANR	42605	Symbol	IS_VAR		42386						
ANR	42606	Symbol	last_op -> result . var		42386						
ANR	42607	Symbol	opline -> result . var		42386						
ANR	42608	Function	zend_do_post_incdec	1205:0:39474:40306							
ANR	42609	FunctionDef	"zend_do_post_incdec (znode * result , const znode * op1 , zend_uchar op TSRMLS_DC)"		42608	0					
ANR	42610	CompoundStatement		1206:0:39567:40306	42608	0					
ANR	42611	IdentifierDeclStatement	int last_op_number = get_next_op_number ( CG ( active_op_array ) ) ;	1207:1:39570:39630	42608	0	True				
ANR	42612	IdentifierDecl	last_op_number = get_next_op_number ( CG ( active_op_array ) )		42608	0					
ANR	42613	IdentifierDeclType	int		42608	0					
ANR	42614	Identifier	last_op_number		42608	1					
ANR	42615	AssignmentExpression	last_op_number = get_next_op_number ( CG ( active_op_array ) )		42608	2		=			
ANR	42616	Identifier	last_op_number		42608	0					
ANR	42617	CallExpression	get_next_op_number ( CG ( active_op_array ) )		42608	1					
ANR	42618	Callee	get_next_op_number		42608	0					
ANR	42619	Identifier	get_next_op_number		42608	0					
ANR	42620	ArgumentList	CG ( active_op_array )		42608	1					
ANR	42621	Argument	CG ( active_op_array )		42608	0					
ANR	42622	CallExpression	CG ( active_op_array )		42608	0					
ANR	42623	Callee	CG		42608	0					
ANR	42624	Identifier	CG		42608	0					
ANR	42625	ArgumentList	active_op_array		42608	1					
ANR	42626	Argument	active_op_array		42608	0					
ANR	42627	Identifier	active_op_array		42608	0					
ANR	42628	IdentifierDeclStatement	zend_op * opline ;	1208:1:39633:39648	42608	1	True				
ANR	42629	IdentifierDecl	* opline		42608	0					
ANR	42630	IdentifierDeclType	zend_op *		42608	0					
ANR	42631	Identifier	opline		42608	1					
ANR	42632	IfStatement	if ( last_op_number > 0 )		42608	2					
ANR	42633	Condition	last_op_number > 0	1210:5:39656:39673	42608	0	True				
ANR	42634	RelationalExpression	last_op_number > 0		42608	0		>			
ANR	42635	Identifier	last_op_number		42608	0					
ANR	42636	PrimaryExpression	0		42608	1					
ANR	42637	CompoundStatement		6:2:112:178	42608	1					
ANR	42638	IdentifierDeclStatement	zend_op * last_op = & CG ( active_op_array ) -> opcodes [ last_op_number - 1 ] ;	1211:2:39680:39746	42608	0	True				
ANR	42639	IdentifierDecl	* last_op = & CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		42608	0					
ANR	42640	IdentifierDeclType	zend_op *		42608	0					
ANR	42641	Identifier	last_op		42608	1					
ANR	42642	AssignmentExpression	* last_op = & CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		42608	2		=			
ANR	42643	Identifier	last_op		42608	0					
ANR	42644	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		42608	1					
ANR	42645	UnaryOperator	&		42608	0					
ANR	42646	ArrayIndexing	CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		42608	1					
ANR	42647	PtrMemberAccess	CG ( active_op_array ) -> opcodes		42608	0					
ANR	42648	CallExpression	CG ( active_op_array )		42608	0					
ANR	42649	Callee	CG		42608	0					
ANR	42650	Identifier	CG		42608	0					
ANR	42651	ArgumentList	active_op_array		42608	1					
ANR	42652	Argument	active_op_array		42608	0					
ANR	42653	Identifier	active_op_array		42608	0					
ANR	42654	Identifier	opcodes		42608	1					
ANR	42655	AdditiveExpression	last_op_number - 1		42608	1		-			
ANR	42656	Identifier	last_op_number		42608	0					
ANR	42657	PrimaryExpression	1		42608	1					
ANR	42658	IfStatement	if ( last_op -> opcode == ZEND_FETCH_OBJ_RW )		42608	1					
ANR	42659	Condition	last_op -> opcode == ZEND_FETCH_OBJ_RW	1213:6:39755:39790	42608	0	True				
ANR	42660	EqualityExpression	last_op -> opcode == ZEND_FETCH_OBJ_RW		42608	0		==			
ANR	42661	PtrMemberAccess	last_op -> opcode		42608	0					
ANR	42662	Identifier	last_op		42608	0					
ANR	42663	Identifier	opcode		42608	1					
ANR	42664	Identifier	ZEND_FETCH_OBJ_RW		42608	1					
ANR	42665	CompoundStatement		8:44:225:225	42608	1					
ANR	42666	ExpressionStatement	last_op -> opcode = ( op == ZEND_POST_INC ) ? ZEND_POST_INC_OBJ : ZEND_POST_DEC_OBJ	1214:3:39798:39871	42608	0	True				
ANR	42667	AssignmentExpression	last_op -> opcode = ( op == ZEND_POST_INC ) ? ZEND_POST_INC_OBJ : ZEND_POST_DEC_OBJ		42608	0		=			
ANR	42668	PtrMemberAccess	last_op -> opcode		42608	0					
ANR	42669	Identifier	last_op		42608	0					
ANR	42670	Identifier	opcode		42608	1					
ANR	42671	ConditionalExpression	( op == ZEND_POST_INC ) ? ZEND_POST_INC_OBJ : ZEND_POST_DEC_OBJ		42608	1					
ANR	42672	Condition	op == ZEND_POST_INC		42608	0					
ANR	42673	EqualityExpression	op == ZEND_POST_INC		42608	0		==			
ANR	42674	Identifier	op		42608	0					
ANR	42675	Identifier	ZEND_POST_INC		42608	1					
ANR	42676	Identifier	ZEND_POST_INC_OBJ		42608	1					
ANR	42677	Identifier	ZEND_POST_DEC_OBJ		42608	2					
ANR	42678	ExpressionStatement	last_op -> result_type = IS_TMP_VAR	1215:3:39876:39909	42608	1	True				
ANR	42679	AssignmentExpression	last_op -> result_type = IS_TMP_VAR		42608	0		=			
ANR	42680	PtrMemberAccess	last_op -> result_type		42608	0					
ANR	42681	Identifier	last_op		42608	0					
ANR	42682	Identifier	result_type		42608	1					
ANR	42683	Identifier	IS_TMP_VAR		42608	1					
ANR	42684	ExpressionStatement	last_op -> result . var = get_temporary_variable ( CG ( active_op_array ) )	1216:3:39914:39979	42608	2	True				
ANR	42685	AssignmentExpression	last_op -> result . var = get_temporary_variable ( CG ( active_op_array ) )		42608	0		=			
ANR	42686	MemberAccess	last_op -> result . var		42608	0					
ANR	42687	PtrMemberAccess	last_op -> result		42608	0					
ANR	42688	Identifier	last_op		42608	0					
ANR	42689	Identifier	result		42608	1					
ANR	42690	Identifier	var		42608	1					
ANR	42691	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		42608	1					
ANR	42692	Callee	get_temporary_variable		42608	0					
ANR	42693	Identifier	get_temporary_variable		42608	0					
ANR	42694	ArgumentList	CG ( active_op_array )		42608	1					
ANR	42695	Argument	CG ( active_op_array )		42608	0					
ANR	42696	CallExpression	CG ( active_op_array )		42608	0					
ANR	42697	Callee	CG		42608	0					
ANR	42698	Identifier	CG		42608	0					
ANR	42699	ArgumentList	active_op_array		42608	1					
ANR	42700	Argument	active_op_array		42608	0					
ANR	42701	Identifier	active_op_array		42608	0					
ANR	42702	ExpressionStatement	"GET_NODE ( result , last_op -> result )"	1217:3:39984:40017	42608	3	True				
ANR	42703	CallExpression	"GET_NODE ( result , last_op -> result )"		42608	0					
ANR	42704	Callee	GET_NODE		42608	0					
ANR	42705	Identifier	GET_NODE		42608	0					
ANR	42706	ArgumentList	result		42608	1					
ANR	42707	Argument	result		42608	0					
ANR	42708	Identifier	result		42608	0					
ANR	42709	Argument	last_op -> result		42608	1					
ANR	42710	PtrMemberAccess	last_op -> result		42608	0					
ANR	42711	Identifier	last_op		42608	0					
ANR	42712	Identifier	result		42608	1					
ANR	42713	ReturnStatement	return ;	1218:3:40022:40028	42608	4	True				
ANR	42714	Statement	opline	1222:1:40039:40044	42608	3	True				
ANR	42715	Statement	=	1222:8:40046:40046	42608	4	True				
ANR	42716	Statement	get_next_op	1222:10:40048:40058	42608	5	True				
ANR	42717	Statement	(	1222:21:40059:40059	42608	6	True				
ANR	42718	Statement	CG	1222:22:40060:40061	42608	7	True				
ANR	42719	Statement	(	1222:24:40062:40062	42608	8	True				
ANR	42720	Statement	active_op_array	1222:25:40063:40077	42608	9	True				
ANR	42721	Statement	)	1222:40:40078:40078	42608	10	True				
ANR	42722	Statement	TSRMLS_CC	1222:42:40080:40088	42608	11	True				
ANR	42723	Statement	)	1222:51:40089:40089	42608	12	True				
ANR	42724	ExpressionStatement		1222:52:40090:40090	42608	13	True				
ANR	42725	ExpressionStatement	opline -> opcode = op	1223:1:40093:40112	42608	14	True				
ANR	42726	AssignmentExpression	opline -> opcode = op		42608	0		=			
ANR	42727	PtrMemberAccess	opline -> opcode		42608	0					
ANR	42728	Identifier	opline		42608	0					
ANR	42729	Identifier	opcode		42608	1					
ANR	42730	Identifier	op		42608	1					
ANR	42731	ExpressionStatement	"SET_NODE ( opline -> op1 , op1 )"	1224:1:40115:40141	42608	15	True				
ANR	42732	CallExpression	"SET_NODE ( opline -> op1 , op1 )"		42608	0					
ANR	42733	Callee	SET_NODE		42608	0					
ANR	42734	Identifier	SET_NODE		42608	0					
ANR	42735	ArgumentList	opline -> op1		42608	1					
ANR	42736	Argument	opline -> op1		42608	0					
ANR	42737	PtrMemberAccess	opline -> op1		42608	0					
ANR	42738	Identifier	opline		42608	0					
ANR	42739	Identifier	op1		42608	1					
ANR	42740	Argument	op1		42608	1					
ANR	42741	Identifier	op1		42608	0					
ANR	42742	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1225:1:40144:40167	42608	16	True				
ANR	42743	CallExpression	SET_UNUSED ( opline -> op2 )		42608	0					
ANR	42744	Callee	SET_UNUSED		42608	0					
ANR	42745	Identifier	SET_UNUSED		42608	0					
ANR	42746	ArgumentList	opline -> op2		42608	1					
ANR	42747	Argument	opline -> op2		42608	0					
ANR	42748	PtrMemberAccess	opline -> op2		42608	0					
ANR	42749	Identifier	opline		42608	0					
ANR	42750	Identifier	op2		42608	1					
ANR	42751	ExpressionStatement	opline -> result_type = IS_TMP_VAR	1226:1:40170:40202	42608	17	True				
ANR	42752	AssignmentExpression	opline -> result_type = IS_TMP_VAR		42608	0		=			
ANR	42753	PtrMemberAccess	opline -> result_type		42608	0					
ANR	42754	Identifier	opline		42608	0					
ANR	42755	Identifier	result_type		42608	1					
ANR	42756	Identifier	IS_TMP_VAR		42608	1					
ANR	42757	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	1227:1:40205:40269	42608	18	True				
ANR	42758	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		42608	0		=			
ANR	42759	MemberAccess	opline -> result . var		42608	0					
ANR	42760	PtrMemberAccess	opline -> result		42608	0					
ANR	42761	Identifier	opline		42608	0					
ANR	42762	Identifier	result		42608	1					
ANR	42763	Identifier	var		42608	1					
ANR	42764	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		42608	1					
ANR	42765	Callee	get_temporary_variable		42608	0					
ANR	42766	Identifier	get_temporary_variable		42608	0					
ANR	42767	ArgumentList	CG ( active_op_array )		42608	1					
ANR	42768	Argument	CG ( active_op_array )		42608	0					
ANR	42769	CallExpression	CG ( active_op_array )		42608	0					
ANR	42770	Callee	CG		42608	0					
ANR	42771	Identifier	CG		42608	0					
ANR	42772	ArgumentList	active_op_array		42608	1					
ANR	42773	Argument	active_op_array		42608	0					
ANR	42774	Identifier	active_op_array		42608	0					
ANR	42775	ExpressionStatement	"GET_NODE ( result , opline -> result )"	1228:1:40272:40304	42608	19	True				
ANR	42776	CallExpression	"GET_NODE ( result , opline -> result )"		42608	0					
ANR	42777	Callee	GET_NODE		42608	0					
ANR	42778	Identifier	GET_NODE		42608	0					
ANR	42779	ArgumentList	result		42608	1					
ANR	42780	Argument	result		42608	0					
ANR	42781	Identifier	result		42608	0					
ANR	42782	Argument	opline -> result		42608	1					
ANR	42783	PtrMemberAccess	opline -> result		42608	0					
ANR	42784	Identifier	opline		42608	0					
ANR	42785	Identifier	result		42608	1					
ANR	42786	ReturnType	void		42608	1					
ANR	42787	Identifier	zend_do_post_incdec		42608	2					
ANR	42788	ParameterList	"znode * result , const znode * op1 , zend_uchar op TSRMLS_DC"		42608	3					
ANR	42789	Parameter	znode * result	1205:25:39499:39511	42608	0	True				
ANR	42790	ParameterType	znode *		42608	0					
ANR	42791	Identifier	result		42608	1					
ANR	42792	Parameter	const znode * op1	1205:40:39514:39529	42608	1	True				
ANR	42793	ParameterType	const znode *		42608	0					
ANR	42794	Identifier	op1		42608	1					
ANR	42795	Parameter	zend_uchar op TSRMLS_DC	1205:58:39532:39554	42608	2	True				
ANR	42796	ParameterType	zend_uchar op		42608	0					
ANR	42797	Identifier	TSRMLS_DC		42608	1					
ANR	42798	CFGEntryNode	ENTRY		42608		True				
ANR	42799	CFGExitNode	EXIT		42608		True				
ANR	42800	Symbol	opline -> op1		42608						
ANR	42801	Symbol	opline -> op2		42608						
ANR	42802	Symbol	* CG		42608						
ANR	42803	Symbol	get_temporary_variable		42608						
ANR	42804	Symbol	TSRMLS_DC		42608						
ANR	42805	Symbol	CG ( active_op_array ) -> opcodes		42608						
ANR	42806	Symbol	opline -> result		42608						
ANR	42807	Symbol	result		42608						
ANR	42808	Symbol	opline		42608						
ANR	42809	Symbol	last_op -> result_type		42608						
ANR	42810	Symbol	last_op		42608						
ANR	42811	Symbol	last_op -> opcode		42608						
ANR	42812	Symbol	ZEND_POST_INC		42608						
ANR	42813	Symbol	IS_TMP_VAR		42608						
ANR	42814	Symbol	last_op_number		42608						
ANR	42815	Symbol	ZEND_POST_DEC_OBJ		42608						
ANR	42816	Symbol	opline -> result_type		42608						
ANR	42817	Symbol	ZEND_POST_INC_OBJ		42608						
ANR	42818	Symbol	op		42608						
ANR	42819	Symbol	CG		42608						
ANR	42820	Symbol	* last_op		42608						
ANR	42821	Symbol	active_op_array		42608						
ANR	42822	Symbol	ZEND_FETCH_OBJ_RW		42608						
ANR	42823	Symbol	last_op -> result		42608						
ANR	42824	Symbol	op1		42608						
ANR	42825	Symbol	* opline		42608						
ANR	42826	Symbol	opline -> opcode		42608						
ANR	42827	Symbol	get_next_op_number		42608						
ANR	42828	Symbol	last_op -> result . var		42608						
ANR	42829	Symbol	opline -> result . var		42608						
ANR	42830	DeclStmt									
ANR	42831	Decl							int	int	if_cond_op_number
ANR	42832	DeclStmt									
ANR	42833	Decl							zend_op	zend_op *	opline
ANR	42834	Function	zend_do_if_after_statement	1245:0:40731:41507							
ANR	42835	FunctionDef	"zend_do_if_after_statement (const znode * closing_bracket_token , unsigned char initialize TSRMLS_DC)"		42834	0					
ANR	42836	CompoundStatement		1246:0:40845:41507	42834	0					
ANR	42837	IdentifierDeclStatement	int if_end_op_number = get_next_op_number ( CG ( active_op_array ) ) ;	1247:1:40848:40910	42834	0	True				
ANR	42838	IdentifierDecl	if_end_op_number = get_next_op_number ( CG ( active_op_array ) )		42834	0					
ANR	42839	IdentifierDeclType	int		42834	0					
ANR	42840	Identifier	if_end_op_number		42834	1					
ANR	42841	AssignmentExpression	if_end_op_number = get_next_op_number ( CG ( active_op_array ) )		42834	2		=			
ANR	42842	Identifier	if_end_op_number		42834	0					
ANR	42843	CallExpression	get_next_op_number ( CG ( active_op_array ) )		42834	1					
ANR	42844	Callee	get_next_op_number		42834	0					
ANR	42845	Identifier	get_next_op_number		42834	0					
ANR	42846	ArgumentList	CG ( active_op_array )		42834	1					
ANR	42847	Argument	CG ( active_op_array )		42834	0					
ANR	42848	CallExpression	CG ( active_op_array )		42834	0					
ANR	42849	Callee	CG		42834	0					
ANR	42850	Identifier	CG		42834	0					
ANR	42851	ArgumentList	active_op_array		42834	1					
ANR	42852	Argument	active_op_array		42834	0					
ANR	42853	Identifier	active_op_array		42834	0					
ANR	42854	Statement	zend_op	1248:1:40913:40919	42834	1	True				
ANR	42855	Statement	*	1248:9:40921:40921	42834	2	True				
ANR	42856	Statement	opline	1248:10:40922:40927	42834	3	True				
ANR	42857	Statement	=	1248:17:40929:40929	42834	4	True				
ANR	42858	Statement	get_next_op	1248:19:40931:40941	42834	5	True				
ANR	42859	Statement	(	1248:30:40942:40942	42834	6	True				
ANR	42860	Statement	CG	1248:31:40943:40944	42834	7	True				
ANR	42861	Statement	(	1248:33:40945:40945	42834	8	True				
ANR	42862	Statement	active_op_array	1248:34:40946:40960	42834	9	True				
ANR	42863	Statement	)	1248:49:40961:40961	42834	10	True				
ANR	42864	Statement	TSRMLS_CC	1248:51:40963:40971	42834	11	True				
ANR	42865	Statement	)	1248:60:40972:40972	42834	12	True				
ANR	42866	ExpressionStatement		1248:61:40973:40973	42834	13	True				
ANR	42867	IdentifierDeclStatement	zend_llist * jmp_list_ptr ;	1249:1:40976:41000	42834	14	True				
ANR	42868	IdentifierDecl	* jmp_list_ptr		42834	0					
ANR	42869	IdentifierDeclType	zend_llist *		42834	0					
ANR	42870	Identifier	jmp_list_ptr		42834	1					
ANR	42871	ExpressionStatement	opline -> opcode = ZEND_JMP	1251:1:41004:41029	42834	15	True				
ANR	42872	AssignmentExpression	opline -> opcode = ZEND_JMP		42834	0		=			
ANR	42873	PtrMemberAccess	opline -> opcode		42834	0					
ANR	42874	Identifier	opline		42834	0					
ANR	42875	Identifier	opcode		42834	1					
ANR	42876	Identifier	ZEND_JMP		42834	1					
ANR	42877	IfStatement	if ( initialize )		42834	16					
ANR	42878	Condition	initialize	1253:5:41065:41074	42834	0	True				
ANR	42879	Identifier	initialize		42834	0					
ANR	42880	CompoundStatement		9:2:235:254	42834	1					
ANR	42881	IdentifierDeclStatement	zend_llist jmp_list ;	1254:2:41081:41100	42834	0	True				
ANR	42882	IdentifierDecl	jmp_list		42834	0					
ANR	42883	IdentifierDeclType	zend_llist		42834	0					
ANR	42884	Identifier	jmp_list		42834	1					
ANR	42885	ExpressionStatement	"zend_llist_init ( & jmp_list , sizeof ( int ) , NULL , 0 )"	1256:2:41105:41153	42834	1	True				
ANR	42886	CallExpression	"zend_llist_init ( & jmp_list , sizeof ( int ) , NULL , 0 )"		42834	0					
ANR	42887	Callee	zend_llist_init		42834	0					
ANR	42888	Identifier	zend_llist_init		42834	0					
ANR	42889	ArgumentList	& jmp_list		42834	1					
ANR	42890	Argument	& jmp_list		42834	0					
ANR	42891	UnaryOperationExpression	& jmp_list		42834	0					
ANR	42892	UnaryOperator	&		42834	0					
ANR	42893	Identifier	jmp_list		42834	1					
ANR	42894	Argument	sizeof ( int )		42834	1					
ANR	42895	SizeofExpression	sizeof ( int )		42834	0					
ANR	42896	Sizeof	sizeof		42834	0					
ANR	42897	SizeofOperand	int		42834	1					
ANR	42898	Argument	NULL		42834	2					
ANR	42899	Identifier	NULL		42834	0					
ANR	42900	Argument	0		42834	3					
ANR	42901	PrimaryExpression	0		42834	0					
ANR	42902	ExpressionStatement	"zend_stack_push ( & CG ( bp_stack ) , ( void * ) & jmp_list , sizeof ( zend_llist ) )"	1257:2:41157:41227	42834	2	True				
ANR	42903	CallExpression	"zend_stack_push ( & CG ( bp_stack ) , ( void * ) & jmp_list , sizeof ( zend_llist ) )"		42834	0					
ANR	42904	Callee	zend_stack_push		42834	0					
ANR	42905	Identifier	zend_stack_push		42834	0					
ANR	42906	ArgumentList	& CG ( bp_stack )		42834	1					
ANR	42907	Argument	& CG ( bp_stack )		42834	0					
ANR	42908	UnaryOperationExpression	& CG ( bp_stack )		42834	0					
ANR	42909	UnaryOperator	&		42834	0					
ANR	42910	CallExpression	CG ( bp_stack )		42834	1					
ANR	42911	Callee	CG		42834	0					
ANR	42912	Identifier	CG		42834	0					
ANR	42913	ArgumentList	bp_stack		42834	1					
ANR	42914	Argument	bp_stack		42834	0					
ANR	42915	Identifier	bp_stack		42834	0					
ANR	42916	Argument	( void * ) & jmp_list		42834	1					
ANR	42917	CastExpression	( void * ) & jmp_list		42834	0					
ANR	42918	CastTarget	void *		42834	0					
ANR	42919	UnaryOperationExpression	& jmp_list		42834	1					
ANR	42920	UnaryOperator	&		42834	0					
ANR	42921	Identifier	jmp_list		42834	1					
ANR	42922	Argument	sizeof ( zend_llist )		42834	2					
ANR	42923	SizeofExpression	sizeof ( zend_llist )		42834	0					
ANR	42924	Sizeof	sizeof		42834	0					
ANR	42925	SizeofOperand	zend_llist		42834	1					
ANR	42926	ExpressionStatement	"zend_stack_top ( & CG ( bp_stack ) , ( void * * ) & jmp_list_ptr )"	1259:1:41233:41287	42834	17	True				
ANR	42927	CallExpression	"zend_stack_top ( & CG ( bp_stack ) , ( void * * ) & jmp_list_ptr )"		42834	0					
ANR	42928	Callee	zend_stack_top		42834	0					
ANR	42929	Identifier	zend_stack_top		42834	0					
ANR	42930	ArgumentList	& CG ( bp_stack )		42834	1					
ANR	42931	Argument	& CG ( bp_stack )		42834	0					
ANR	42932	UnaryOperationExpression	& CG ( bp_stack )		42834	0					
ANR	42933	UnaryOperator	&		42834	0					
ANR	42934	CallExpression	CG ( bp_stack )		42834	1					
ANR	42935	Callee	CG		42834	0					
ANR	42936	Identifier	CG		42834	0					
ANR	42937	ArgumentList	bp_stack		42834	1					
ANR	42938	Argument	bp_stack		42834	0					
ANR	42939	Identifier	bp_stack		42834	0					
ANR	42940	Argument	( void * * ) & jmp_list_ptr		42834	1					
ANR	42941	CastExpression	( void * * ) & jmp_list_ptr		42834	0					
ANR	42942	CastTarget	void * *		42834	0					
ANR	42943	UnaryOperationExpression	& jmp_list_ptr		42834	1					
ANR	42944	UnaryOperator	&		42834	0					
ANR	42945	Identifier	jmp_list_ptr		42834	1					
ANR	42946	ExpressionStatement	"zend_llist_add_element ( jmp_list_ptr , & if_end_op_number )"	1260:1:41290:41345	42834	18	True				
ANR	42947	CallExpression	"zend_llist_add_element ( jmp_list_ptr , & if_end_op_number )"		42834	0					
ANR	42948	Callee	zend_llist_add_element		42834	0					
ANR	42949	Identifier	zend_llist_add_element		42834	0					
ANR	42950	ArgumentList	jmp_list_ptr		42834	1					
ANR	42951	Argument	jmp_list_ptr		42834	0					
ANR	42952	Identifier	jmp_list_ptr		42834	0					
ANR	42953	Argument	& if_end_op_number		42834	1					
ANR	42954	UnaryOperationExpression	& if_end_op_number		42834	0					
ANR	42955	UnaryOperator	&		42834	0					
ANR	42956	Identifier	if_end_op_number		42834	1					
ANR	42957	ExpressionStatement	CG ( active_op_array ) -> opcodes [ closing_bracket_token -> u . op . opline_num ] . op2 . opline_num = if_end_op_number + 1	1262:1:41349:41453	42834	19	True				
ANR	42958	AssignmentExpression	CG ( active_op_array ) -> opcodes [ closing_bracket_token -> u . op . opline_num ] . op2 . opline_num = if_end_op_number + 1		42834	0		=			
ANR	42959	MemberAccess	CG ( active_op_array ) -> opcodes [ closing_bracket_token -> u . op . opline_num ] . op2 . opline_num		42834	0					
ANR	42960	MemberAccess	CG ( active_op_array ) -> opcodes [ closing_bracket_token -> u . op . opline_num ] . op2		42834	0					
ANR	42961	ArrayIndexing	CG ( active_op_array ) -> opcodes [ closing_bracket_token -> u . op . opline_num ]		42834	0					
ANR	42962	PtrMemberAccess	CG ( active_op_array ) -> opcodes		42834	0					
ANR	42963	CallExpression	CG ( active_op_array )		42834	0					
ANR	42964	Callee	CG		42834	0					
ANR	42965	Identifier	CG		42834	0					
ANR	42966	ArgumentList	active_op_array		42834	1					
ANR	42967	Argument	active_op_array		42834	0					
ANR	42968	Identifier	active_op_array		42834	0					
ANR	42969	Identifier	opcodes		42834	1					
ANR	42970	MemberAccess	closing_bracket_token -> u . op . opline_num		42834	1					
ANR	42971	MemberAccess	closing_bracket_token -> u . op		42834	0					
ANR	42972	PtrMemberAccess	closing_bracket_token -> u		42834	0					
ANR	42973	Identifier	closing_bracket_token		42834	0					
ANR	42974	Identifier	u		42834	1					
ANR	42975	Identifier	op		42834	1					
ANR	42976	Identifier	opline_num		42834	1					
ANR	42977	Identifier	op2		42834	1					
ANR	42978	Identifier	opline_num		42834	1					
ANR	42979	AdditiveExpression	if_end_op_number + 1		42834	1		+			
ANR	42980	Identifier	if_end_op_number		42834	0					
ANR	42981	PrimaryExpression	1		42834	1					
ANR	42982	ExpressionStatement	SET_UNUSED ( opline -> op1 )	1263:1:41456:41479	42834	20	True				
ANR	42983	CallExpression	SET_UNUSED ( opline -> op1 )		42834	0					
ANR	42984	Callee	SET_UNUSED		42834	0					
ANR	42985	Identifier	SET_UNUSED		42834	0					
ANR	42986	ArgumentList	opline -> op1		42834	1					
ANR	42987	Argument	opline -> op1		42834	0					
ANR	42988	PtrMemberAccess	opline -> op1		42834	0					
ANR	42989	Identifier	opline		42834	0					
ANR	42990	Identifier	op1		42834	1					
ANR	42991	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1264:1:41482:41505	42834	21	True				
ANR	42992	CallExpression	SET_UNUSED ( opline -> op2 )		42834	0					
ANR	42993	Callee	SET_UNUSED		42834	0					
ANR	42994	Identifier	SET_UNUSED		42834	0					
ANR	42995	ArgumentList	opline -> op2		42834	1					
ANR	42996	Argument	opline -> op2		42834	0					
ANR	42997	PtrMemberAccess	opline -> op2		42834	0					
ANR	42998	Identifier	opline		42834	0					
ANR	42999	Identifier	op2		42834	1					
ANR	43000	ReturnType	void		42834	1					
ANR	43001	Identifier	zend_do_if_after_statement		42834	2					
ANR	43002	ParameterList	"const znode * closing_bracket_token , unsigned char initialize TSRMLS_DC"		42834	3					
ANR	43003	Parameter	const znode * closing_bracket_token	1245:32:40763:40796	42834	0	True				
ANR	43004	ParameterType	const znode *		42834	0					
ANR	43005	Identifier	closing_bracket_token		42834	1					
ANR	43006	Parameter	unsigned char initialize TSRMLS_DC	1245:68:40799:40832	42834	1	True				
ANR	43007	ParameterType	unsigned char initialize		42834	0					
ANR	43008	Identifier	TSRMLS_DC		42834	1					
ANR	43009	CFGEntryNode	ENTRY		42834		True				
ANR	43010	CFGExitNode	EXIT		42834		True				
ANR	43011	Symbol	opline -> op1		42834						
ANR	43012	Symbol	opline -> op2		42834						
ANR	43013	Symbol	bp_stack		42834						
ANR	43014	Symbol	if_end_op_number		42834						
ANR	43015	Symbol	& jmp_list_ptr		42834						
ANR	43016	Symbol	* closing_bracket_token -> u . op . opline_num		42834						
ANR	43017	Symbol	* closing_bracket_token -> u . op		42834						
ANR	43018	Symbol	* CG		42834						
ANR	43019	Symbol	closing_bracket_token -> u . op . opline_num		42834						
ANR	43020	Symbol	* closing_bracket_token		42834						
ANR	43021	Symbol	TSRMLS_DC		42834						
ANR	43022	Symbol	CG ( active_op_array ) -> opcodes		42834						
ANR	43023	Symbol	& jmp_list		42834						
ANR	43024	Symbol	* closing_bracket_token -> u		42834						
ANR	43025	Symbol	& CG		42834						
ANR	43026	Symbol	jmp_list_ptr		42834						
ANR	43027	Symbol	* * CG		42834						
ANR	43028	Symbol	opline		42834						
ANR	43029	Symbol	closing_bracket_token -> u		42834						
ANR	43030	Symbol	CG ( active_op_array ) -> opcodes [ closing_bracket_token -> u . op . opline_num ] . op2		42834						
ANR	43031	Symbol	closing_bracket_token		42834						
ANR	43032	Symbol	& if_end_op_number		42834						
ANR	43033	Symbol	closing_bracket_token -> u . op		42834						
ANR	43034	Symbol	jmp_list		42834						
ANR	43035	Symbol	* CG ( active_op_array ) -> opcodes		42834						
ANR	43036	Symbol	NULL		42834						
ANR	43037	Symbol	CG		42834						
ANR	43038	Symbol	active_op_array		42834						
ANR	43039	Symbol	CG ( active_op_array ) -> opcodes [ closing_bracket_token -> u . op . opline_num ] . op2 . opline_num		42834						
ANR	43040	Symbol	* * closing_bracket_token		42834						
ANR	43041	Symbol	ZEND_JMP		42834						
ANR	43042	Symbol	* opline		42834						
ANR	43043	Symbol	opline -> opcode		42834						
ANR	43044	Symbol	initialize		42834						
ANR	43045	Symbol	get_next_op_number		42834						
ANR	43046	DeclStmt									
ANR	43047	Decl							int	int	next_op_number
ANR	43048	DeclStmt									
ANR	43049	Decl							zend_llist	zend_llist *	jmp_list_ptr
ANR	43050	DeclStmt									
ANR	43051	Decl							zend_llist_element	zend_llist_element *	le
ANR	43052	Function	zend_check_writable_variable	1284:0:41988:42359							
ANR	43053	FunctionDef	zend_check_writable_variable (const znode * variable)		43052	0					
ANR	43054	CompoundStatement		1285:0:42055:42359	43052	0					
ANR	43055	IdentifierDeclStatement	zend_uint type = variable -> EA ;	1286:1:42058:42087	43052	0	True				
ANR	43056	IdentifierDecl	type = variable -> EA		43052	0					
ANR	43057	IdentifierDeclType	zend_uint		43052	0					
ANR	43058	Identifier	type		43052	1					
ANR	43059	AssignmentExpression	type = variable -> EA		43052	2		=			
ANR	43060	Identifier	type		43052	0					
ANR	43061	PtrMemberAccess	variable -> EA		43052	1					
ANR	43062	Identifier	variable		43052	0					
ANR	43063	Identifier	EA		43052	1					
ANR	43064	IfStatement	if ( type & ZEND_PARSED_METHOD_CALL )		43052	1					
ANR	43065	Condition	type & ZEND_PARSED_METHOD_CALL	1288:5:42095:42124	43052	0	True				
ANR	43066	BitAndExpression	type & ZEND_PARSED_METHOD_CALL		43052	0		&			
ANR	43067	Identifier	type		43052	0					
ANR	43068	Identifier	ZEND_PARSED_METHOD_CALL		43052	1					
ANR	43069	CompoundStatement		4:37:71:71	43052	1					
ANR	43070	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Can't use method return value in write context"" )"	1289:2:42131:42217	43052	0	True				
ANR	43071	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Can't use method return value in write context"" )"		43052	0					
ANR	43072	Callee	zend_error_noreturn		43052	0					
ANR	43073	Identifier	zend_error_noreturn		43052	0					
ANR	43074	ArgumentList	E_COMPILE_ERROR		43052	1					
ANR	43075	Argument	E_COMPILE_ERROR		43052	0					
ANR	43076	Identifier	E_COMPILE_ERROR		43052	0					
ANR	43077	Argument	"""Can't use method return value in write context"""		43052	1					
ANR	43078	PrimaryExpression	"""Can't use method return value in write context"""		43052	0					
ANR	43079	IfStatement	if ( type == ZEND_PARSED_FUNCTION_CALL )		43052	2					
ANR	43080	Condition	type == ZEND_PARSED_FUNCTION_CALL	1291:5:42227:42259	43052	0	True				
ANR	43081	EqualityExpression	type == ZEND_PARSED_FUNCTION_CALL		43052	0		==			
ANR	43082	Identifier	type		43052	0					
ANR	43083	Identifier	ZEND_PARSED_FUNCTION_CALL		43052	1					
ANR	43084	CompoundStatement		7:40:206:206	43052	1					
ANR	43085	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Can't use function return value in write context"" )"	1292:2:42266:42354	43052	0	True				
ANR	43086	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Can't use function return value in write context"" )"		43052	0					
ANR	43087	Callee	zend_error_noreturn		43052	0					
ANR	43088	Identifier	zend_error_noreturn		43052	0					
ANR	43089	ArgumentList	E_COMPILE_ERROR		43052	1					
ANR	43090	Argument	E_COMPILE_ERROR		43052	0					
ANR	43091	Identifier	E_COMPILE_ERROR		43052	0					
ANR	43092	Argument	"""Can't use function return value in write context"""		43052	1					
ANR	43093	PrimaryExpression	"""Can't use function return value in write context"""		43052	0					
ANR	43094	ReturnType	void		43052	1					
ANR	43095	Identifier	zend_check_writable_variable		43052	2					
ANR	43096	ParameterList	const znode * variable		43052	3					
ANR	43097	Parameter	const znode * variable	1284:34:42022:42042	43052	0	True				
ANR	43098	ParameterType	const znode *		43052	0					
ANR	43099	Identifier	variable		43052	1					
ANR	43100	CFGEntryNode	ENTRY		43052		True				
ANR	43101	CFGExitNode	EXIT		43052		True				
ANR	43102	Symbol	variable -> EA		43052						
ANR	43103	Symbol	ZEND_PARSED_FUNCTION_CALL		43052						
ANR	43104	Symbol	E_COMPILE_ERROR		43052						
ANR	43105	Symbol	variable		43052						
ANR	43106	Symbol	type		43052						
ANR	43107	Symbol	* variable		43052						
ANR	43108	Symbol	ZEND_PARSED_METHOD_CALL		43052						
ANR	43109	DeclStmt									
ANR	43110	Decl							zend_llist	zend_llist	fetch_list
ANR	43111	Function	zend_do_end_variable_parse	1306:0:42598:45815							
ANR	43112	FunctionDef	"zend_do_end_variable_parse (znode * variable , int type , int arg_offset TSRMLS_DC)"		43111	0					
ANR	43113	CompoundStatement		1307:0:42693:45815	43111	0					
ANR	43114	IdentifierDeclStatement	zend_llist * fetch_list_ptr ;	1308:1:42696:42722	43111	0	True				
ANR	43115	IdentifierDecl	* fetch_list_ptr		43111	0					
ANR	43116	IdentifierDeclType	zend_llist *		43111	0					
ANR	43117	Identifier	fetch_list_ptr		43111	1					
ANR	43118	IdentifierDeclStatement	zend_llist_element * le ;	1309:1:42725:42747	43111	1	True				
ANR	43119	IdentifierDecl	* le		43111	0					
ANR	43120	IdentifierDeclType	zend_llist_element *		43111	0					
ANR	43121	Identifier	le		43111	1					
ANR	43122	IdentifierDeclStatement	zend_op * opline = NULL ;	1310:1:42750:42772	43111	2	True				
ANR	43123	IdentifierDecl	* opline = NULL		43111	0					
ANR	43124	IdentifierDeclType	zend_op *		43111	0					
ANR	43125	Identifier	opline		43111	1					
ANR	43126	AssignmentExpression	* opline = NULL		43111	2		=			
ANR	43127	Identifier	NULL		43111	0					
ANR	43128	Identifier	NULL		43111	1					
ANR	43129	IdentifierDeclStatement	zend_op * opline_ptr ;	1311:1:42775:42794	43111	3	True				
ANR	43130	IdentifierDecl	* opline_ptr		43111	0					
ANR	43131	IdentifierDeclType	zend_op *		43111	0					
ANR	43132	Identifier	opline_ptr		43111	1					
ANR	43133	IdentifierDeclStatement	zend_uint this_var = - 1 ;	1312:1:42797:42820	43111	4	True				
ANR	43134	IdentifierDecl	this_var = - 1		43111	0					
ANR	43135	IdentifierDeclType	zend_uint		43111	0					
ANR	43136	Identifier	this_var		43111	1					
ANR	43137	AssignmentExpression	this_var = - 1		43111	2		=			
ANR	43138	Identifier	this_var		43111	0					
ANR	43139	UnaryOperationExpression	- 1		43111	1					
ANR	43140	UnaryOperator	-		43111	0					
ANR	43141	PrimaryExpression	1		43111	1					
ANR	43142	ExpressionStatement	"zend_stack_top ( & CG ( bp_stack ) , ( void * * ) & fetch_list_ptr )"	1314:1:42824:42880	43111	5	True				
ANR	43143	CallExpression	"zend_stack_top ( & CG ( bp_stack ) , ( void * * ) & fetch_list_ptr )"		43111	0					
ANR	43144	Callee	zend_stack_top		43111	0					
ANR	43145	Identifier	zend_stack_top		43111	0					
ANR	43146	ArgumentList	& CG ( bp_stack )		43111	1					
ANR	43147	Argument	& CG ( bp_stack )		43111	0					
ANR	43148	UnaryOperationExpression	& CG ( bp_stack )		43111	0					
ANR	43149	UnaryOperator	&		43111	0					
ANR	43150	CallExpression	CG ( bp_stack )		43111	1					
ANR	43151	Callee	CG		43111	0					
ANR	43152	Identifier	CG		43111	0					
ANR	43153	ArgumentList	bp_stack		43111	1					
ANR	43154	Argument	bp_stack		43111	0					
ANR	43155	Identifier	bp_stack		43111	0					
ANR	43156	Argument	( void * * ) & fetch_list_ptr		43111	1					
ANR	43157	CastExpression	( void * * ) & fetch_list_ptr		43111	0					
ANR	43158	CastTarget	void * *		43111	0					
ANR	43159	UnaryOperationExpression	& fetch_list_ptr		43111	1					
ANR	43160	UnaryOperator	&		43111	0					
ANR	43161	Identifier	fetch_list_ptr		43111	1					
ANR	43162	ExpressionStatement	le = fetch_list_ptr -> head	1316:1:42884:42909	43111	6	True				
ANR	43163	AssignmentExpression	le = fetch_list_ptr -> head		43111	0		=			
ANR	43164	Identifier	le		43111	0					
ANR	43165	PtrMemberAccess	fetch_list_ptr -> head		43111	1					
ANR	43166	Identifier	fetch_list_ptr		43111	0					
ANR	43167	Identifier	head		43111	1					
ANR	43168	IfStatement	if ( le )		43111	7					
ANR	43169	Condition	le	1320:5:42998:42999	43111	0	True				
ANR	43170	Identifier	le		43111	0					
ANR	43171	CompoundStatement		14:9:308:308	43111	1					
ANR	43172	ExpressionStatement	opline_ptr = ( zend_op * ) le -> data	1321:2:43006:43038	43111	0	True				
ANR	43173	AssignmentExpression	opline_ptr = ( zend_op * ) le -> data		43111	0		=			
ANR	43174	Identifier	opline_ptr		43111	0					
ANR	43175	CastExpression	( zend_op * ) le -> data		43111	1					
ANR	43176	CastTarget	zend_op *		43111	0					
ANR	43177	PtrMemberAccess	le -> data		43111	1					
ANR	43178	Identifier	le		43111	0					
ANR	43179	Identifier	data		43111	1					
ANR	43180	Statement	if	1322:2:43042:43043	43111	1	True				
ANR	43181	Statement	(	1322:5:43045:43045	43111	2	True				
ANR	43182	Statement	opline_is_fetch_this	1322:6:43046:43065	43111	3	True				
ANR	43183	Statement	(	1322:26:43066:43066	43111	4	True				
ANR	43184	Statement	opline_ptr	1322:27:43067:43076	43111	5	True				
ANR	43185	Statement	TSRMLS_CC	1322:38:43078:43086	43111	6	True				
ANR	43186	Statement	)	1322:47:43087:43087	43111	7	True				
ANR	43187	Statement	)	1322:48:43088:43088	43111	8	True				
ANR	43188	CompoundStatement		16:50:396:396	43111	9					
ANR	43189	IfStatement	if ( CG ( active_op_array ) -> last == 0 || CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode != ZEND_BEGIN_SILENCE )		43111	0					
ANR	43190	Condition	CG ( active_op_array ) -> last == 0 || CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode != ZEND_BEGIN_SILENCE	1324:7:43144:43270	43111	0	True				
ANR	43191	OrExpression	CG ( active_op_array ) -> last == 0 || CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode != ZEND_BEGIN_SILENCE		43111	0		||			
ANR	43192	EqualityExpression	CG ( active_op_array ) -> last == 0		43111	0		==			
ANR	43193	PtrMemberAccess	CG ( active_op_array ) -> last		43111	0					
ANR	43194	CallExpression	CG ( active_op_array )		43111	0					
ANR	43195	Callee	CG		43111	0					
ANR	43196	Identifier	CG		43111	0					
ANR	43197	ArgumentList	active_op_array		43111	1					
ANR	43198	Argument	active_op_array		43111	0					
ANR	43199	Identifier	active_op_array		43111	0					
ANR	43200	Identifier	last		43111	1					
ANR	43201	PrimaryExpression	0		43111	1					
ANR	43202	EqualityExpression	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode != ZEND_BEGIN_SILENCE		43111	1		!=			
ANR	43203	MemberAccess	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode		43111	0					
ANR	43204	ArrayIndexing	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		43111	0					
ANR	43205	PtrMemberAccess	CG ( active_op_array ) -> opcodes		43111	0					
ANR	43206	CallExpression	CG ( active_op_array )		43111	0					
ANR	43207	Callee	CG		43111	0					
ANR	43208	Identifier	CG		43111	0					
ANR	43209	ArgumentList	active_op_array		43111	1					
ANR	43210	Argument	active_op_array		43111	0					
ANR	43211	Identifier	active_op_array		43111	0					
ANR	43212	Identifier	opcodes		43111	1					
ANR	43213	AdditiveExpression	CG ( active_op_array ) -> last - 1		43111	1		-			
ANR	43214	PtrMemberAccess	CG ( active_op_array ) -> last		43111	0					
ANR	43215	CallExpression	CG ( active_op_array )		43111	0					
ANR	43216	Callee	CG		43111	0					
ANR	43217	Identifier	CG		43111	0					
ANR	43218	ArgumentList	active_op_array		43111	1					
ANR	43219	Argument	active_op_array		43111	0					
ANR	43220	Identifier	active_op_array		43111	0					
ANR	43221	Identifier	last		43111	1					
ANR	43222	PrimaryExpression	1		43111	1					
ANR	43223	Identifier	opcode		43111	1					
ANR	43224	Identifier	ZEND_BEGIN_SILENCE		43111	1					
ANR	43225	CompoundStatement		19:95:579:579	43111	1					
ANR	43226	ExpressionStatement	this_var = opline_ptr -> result . var	1327:4:43280:43313	43111	0	True				
ANR	43227	AssignmentExpression	this_var = opline_ptr -> result . var		43111	0		=			
ANR	43228	Identifier	this_var		43111	0					
ANR	43229	MemberAccess	opline_ptr -> result . var		43111	1					
ANR	43230	PtrMemberAccess	opline_ptr -> result		43111	0					
ANR	43231	Identifier	opline_ptr		43111	0					
ANR	43232	Identifier	result		43111	1					
ANR	43233	Identifier	var		43111	1					
ANR	43234	IfStatement	if ( CG ( active_op_array ) -> this_var == - 1 )		43111	1					
ANR	43235	Condition	CG ( active_op_array ) -> this_var == - 1	1328:8:43323:43357	43111	0	True				
ANR	43236	EqualityExpression	CG ( active_op_array ) -> this_var == - 1		43111	0		==			
ANR	43237	PtrMemberAccess	CG ( active_op_array ) -> this_var		43111	0					
ANR	43238	CallExpression	CG ( active_op_array )		43111	0					
ANR	43239	Callee	CG		43111	0					
ANR	43240	Identifier	CG		43111	0					
ANR	43241	ArgumentList	active_op_array		43111	1					
ANR	43242	Argument	active_op_array		43111	0					
ANR	43243	Identifier	active_op_array		43111	0					
ANR	43244	Identifier	this_var		43111	1					
ANR	43245	UnaryOperationExpression	- 1		43111	1					
ANR	43246	UnaryOperator	-		43111	0					
ANR	43247	PrimaryExpression	1		43111	1					
ANR	43248	CompoundStatement		22:45:666:666	43111	1					
ANR	43249	Statement	CG	1329:5:43367:43368	43111	0	True				
ANR	43250	Statement	(	1329:7:43369:43369	43111	1	True				
ANR	43251	Statement	active_op_array	1329:8:43370:43384	43111	2	True				
ANR	43252	Statement	)	1329:23:43385:43385	43111	3	True				
ANR	43253	Statement	->	1329:24:43386:43387	43111	4	True				
ANR	43254	Statement	this_var	1329:26:43388:43395	43111	5	True				
ANR	43255	Statement	=	1329:35:43397:43397	43111	6	True				
ANR	43256	Statement	lookup_cv	1329:37:43399:43407	43111	7	True				
ANR	43257	Statement	(	1329:46:43408:43408	43111	8	True				
ANR	43258	Statement	CG	1329:47:43409:43410	43111	9	True				
ANR	43259	Statement	(	1329:49:43411:43411	43111	10	True				
ANR	43260	Statement	active_op_array	1329:50:43412:43426	43111	11	True				
ANR	43261	Statement	)	1329:65:43427:43427	43111	12	True				
ANR	43262	Statement	","	1329:66:43428:43428	43111	13	True				
ANR	43263	Statement	Z_STRVAL	1329:68:43430:43437	43111	14	True				
ANR	43264	Statement	(	1329:76:43438:43438	43111	15	True				
ANR	43265	Statement	CONSTANT	1329:77:43439:43446	43111	16	True				
ANR	43266	Statement	(	1329:85:43447:43447	43111	17	True				
ANR	43267	Statement	opline_ptr	1329:86:43448:43457	43111	18	True				
ANR	43268	Statement	->	1329:96:43458:43459	43111	19	True				
ANR	43269	Statement	op1	1329:98:43460:43462	43111	20	True				
ANR	43270	Statement	.	1329:101:43463:43463	43111	21	True				
ANR	43271	Statement	constant	1329:102:43464:43471	43111	22	True				
ANR	43272	Statement	)	1329:110:43472:43472	43111	23	True				
ANR	43273	Statement	)	1329:111:43473:43473	43111	24	True				
ANR	43274	Statement	","	1329:112:43474:43474	43111	25	True				
ANR	43275	Statement	Z_STRLEN	1329:114:43476:43483	43111	26	True				
ANR	43276	Statement	(	1329:122:43484:43484	43111	27	True				
ANR	43277	Statement	CONSTANT	1329:123:43485:43492	43111	28	True				
ANR	43278	Statement	(	1329:131:43493:43493	43111	29	True				
ANR	43279	Statement	opline_ptr	1329:132:43494:43503	43111	30	True				
ANR	43280	Statement	->	1329:142:43504:43505	43111	31	True				
ANR	43281	Statement	op1	1329:144:43506:43508	43111	32	True				
ANR	43282	Statement	.	1329:147:43509:43509	43111	33	True				
ANR	43283	Statement	constant	1329:148:43510:43517	43111	34	True				
ANR	43284	Statement	)	1329:156:43518:43518	43111	35	True				
ANR	43285	Statement	)	1329:157:43519:43519	43111	36	True				
ANR	43286	Statement	","	1329:158:43520:43520	43111	37	True				
ANR	43287	Statement	Z_HASH_P	1329:160:43522:43529	43111	38	True				
ANR	43288	Statement	(	1329:168:43530:43530	43111	39	True				
ANR	43289	Statement	&	1329:169:43531:43531	43111	40	True				
ANR	43290	Statement	CONSTANT	1329:170:43532:43539	43111	41	True				
ANR	43291	Statement	(	1329:178:43540:43540	43111	42	True				
ANR	43292	Statement	opline_ptr	1329:179:43541:43550	43111	43	True				
ANR	43293	Statement	->	1329:189:43551:43552	43111	44	True				
ANR	43294	Statement	op1	1329:191:43553:43555	43111	45	True				
ANR	43295	Statement	.	1329:194:43556:43556	43111	46	True				
ANR	43296	Statement	constant	1329:195:43557:43564	43111	47	True				
ANR	43297	Statement	)	1329:203:43565:43565	43111	48	True				
ANR	43298	Statement	)	1329:204:43566:43566	43111	49	True				
ANR	43299	Statement	TSRMLS_CC	1329:206:43568:43576	43111	50	True				
ANR	43300	Statement	)	1329:215:43577:43577	43111	51	True				
ANR	43301	ExpressionStatement		1329:216:43578:43578	43111	52	True				
ANR	43302	ExpressionStatement	Z_TYPE ( CONSTANT ( opline_ptr -> op1 . constant ) ) = IS_NULL	1330:5:43585:43637	43111	53	True				
ANR	43303	AssignmentExpression	Z_TYPE ( CONSTANT ( opline_ptr -> op1 . constant ) ) = IS_NULL		43111	0		=			
ANR	43304	CallExpression	Z_TYPE ( CONSTANT ( opline_ptr -> op1 . constant ) )		43111	0					
ANR	43305	Callee	Z_TYPE		43111	0					
ANR	43306	Identifier	Z_TYPE		43111	0					
ANR	43307	ArgumentList	CONSTANT ( opline_ptr -> op1 . constant )		43111	1					
ANR	43308	Argument	CONSTANT ( opline_ptr -> op1 . constant )		43111	0					
ANR	43309	CallExpression	CONSTANT ( opline_ptr -> op1 . constant )		43111	0					
ANR	43310	Callee	CONSTANT		43111	0					
ANR	43311	Identifier	CONSTANT		43111	0					
ANR	43312	ArgumentList	opline_ptr -> op1 . constant		43111	1					
ANR	43313	Argument	opline_ptr -> op1 . constant		43111	0					
ANR	43314	MemberAccess	opline_ptr -> op1 . constant		43111	0					
ANR	43315	PtrMemberAccess	opline_ptr -> op1		43111	0					
ANR	43316	Identifier	opline_ptr		43111	0					
ANR	43317	Identifier	op1		43111	1					
ANR	43318	Identifier	constant		43111	1					
ANR	43319	Identifier	IS_NULL		43111	1					
ANR	43320	ElseStatement	else		43111	0					
ANR	43321	CompoundStatement		25:11:956:956	43111	0					
ANR	43322	ExpressionStatement	"zend_del_literal ( CG ( active_op_array ) , opline_ptr -> op1 . constant )"	1332:5:43657:43720	43111	0	True				
ANR	43323	CallExpression	"zend_del_literal ( CG ( active_op_array ) , opline_ptr -> op1 . constant )"		43111	0					
ANR	43324	Callee	zend_del_literal		43111	0					
ANR	43325	Identifier	zend_del_literal		43111	0					
ANR	43326	ArgumentList	CG ( active_op_array )		43111	1					
ANR	43327	Argument	CG ( active_op_array )		43111	0					
ANR	43328	CallExpression	CG ( active_op_array )		43111	0					
ANR	43329	Callee	CG		43111	0					
ANR	43330	Identifier	CG		43111	0					
ANR	43331	ArgumentList	active_op_array		43111	1					
ANR	43332	Argument	active_op_array		43111	0					
ANR	43333	Identifier	active_op_array		43111	0					
ANR	43334	Argument	opline_ptr -> op1 . constant		43111	1					
ANR	43335	MemberAccess	opline_ptr -> op1 . constant		43111	0					
ANR	43336	PtrMemberAccess	opline_ptr -> op1		43111	0					
ANR	43337	Identifier	opline_ptr		43111	0					
ANR	43338	Identifier	op1		43111	1					
ANR	43339	Identifier	constant		43111	1					
ANR	43340	ExpressionStatement	le = le -> next	1334:4:43732:43745	43111	2	True				
ANR	43341	AssignmentExpression	le = le -> next		43111	0		=			
ANR	43342	Identifier	le		43111	0					
ANR	43343	PtrMemberAccess	le -> next		43111	1					
ANR	43344	Identifier	le		43111	0					
ANR	43345	Identifier	next		43111	1					
ANR	43346	IfStatement	if ( variable -> op_type == IS_VAR && variable -> u . op . var == this_var )		43111	3					
ANR	43347	Condition	variable -> op_type == IS_VAR && variable -> u . op . var == this_var	1335:8:43755:43823	43111	0	True				
ANR	43348	AndExpression	variable -> op_type == IS_VAR && variable -> u . op . var == this_var		43111	0		&&			
ANR	43349	EqualityExpression	variable -> op_type == IS_VAR		43111	0		==			
ANR	43350	PtrMemberAccess	variable -> op_type		43111	0					
ANR	43351	Identifier	variable		43111	0					
ANR	43352	Identifier	op_type		43111	1					
ANR	43353	Identifier	IS_VAR		43111	1					
ANR	43354	EqualityExpression	variable -> u . op . var == this_var		43111	1		==			
ANR	43355	MemberAccess	variable -> u . op . var		43111	0					
ANR	43356	MemberAccess	variable -> u . op		43111	0					
ANR	43357	PtrMemberAccess	variable -> u		43111	0					
ANR	43358	Identifier	variable		43111	0					
ANR	43359	Identifier	u		43111	1					
ANR	43360	Identifier	op		43111	1					
ANR	43361	Identifier	var		43111	1					
ANR	43362	Identifier	this_var		43111	1					
ANR	43363	CompoundStatement		30:40:1132:1132	43111	1					
ANR	43364	ExpressionStatement	variable -> op_type = IS_CV	1337:5:43833:43858	43111	0	True				
ANR	43365	AssignmentExpression	variable -> op_type = IS_CV		43111	0		=			
ANR	43366	PtrMemberAccess	variable -> op_type		43111	0					
ANR	43367	Identifier	variable		43111	0					
ANR	43368	Identifier	op_type		43111	1					
ANR	43369	Identifier	IS_CV		43111	1					
ANR	43370	ExpressionStatement	variable -> u . op . var = CG ( active_op_array ) -> this_var	1338:5:43865:43915	43111	1	True				
ANR	43371	AssignmentExpression	variable -> u . op . var = CG ( active_op_array ) -> this_var		43111	0		=			
ANR	43372	MemberAccess	variable -> u . op . var		43111	0					
ANR	43373	MemberAccess	variable -> u . op		43111	0					
ANR	43374	PtrMemberAccess	variable -> u		43111	0					
ANR	43375	Identifier	variable		43111	0					
ANR	43376	Identifier	u		43111	1					
ANR	43377	Identifier	op		43111	1					
ANR	43378	Identifier	var		43111	1					
ANR	43379	PtrMemberAccess	CG ( active_op_array ) -> this_var		43111	1					
ANR	43380	CallExpression	CG ( active_op_array )		43111	0					
ANR	43381	Callee	CG		43111	0					
ANR	43382	Identifier	CG		43111	0					
ANR	43383	ArgumentList	active_op_array		43111	1					
ANR	43384	Argument	active_op_array		43111	0					
ANR	43385	Identifier	active_op_array		43111	0					
ANR	43386	Identifier	this_var		43111	1					
ANR	43387	ElseStatement	else		43111	0					
ANR	43388	IfStatement	if ( CG ( active_op_array ) -> this_var == - 1 )		43111	0					
ANR	43389	Condition	CG ( active_op_array ) -> this_var == - 1	1340:14:43937:43971	43111	0	True				
ANR	43390	EqualityExpression	CG ( active_op_array ) -> this_var == - 1		43111	0		==			
ANR	43391	PtrMemberAccess	CG ( active_op_array ) -> this_var		43111	0					
ANR	43392	CallExpression	CG ( active_op_array )		43111	0					
ANR	43393	Callee	CG		43111	0					
ANR	43394	Identifier	CG		43111	0					
ANR	43395	ArgumentList	active_op_array		43111	1					
ANR	43396	Argument	active_op_array		43111	0					
ANR	43397	Identifier	active_op_array		43111	0					
ANR	43398	Identifier	this_var		43111	1					
ANR	43399	UnaryOperationExpression	- 1		43111	1					
ANR	43400	UnaryOperator	-		43111	0					
ANR	43401	PrimaryExpression	1		43111	1					
ANR	43402	CompoundStatement		34:51:1280:1280	43111	1					
ANR	43403	Statement	CG	1341:4:43980:43981	43111	0	True				
ANR	43404	Statement	(	1341:6:43982:43982	43111	1	True				
ANR	43405	Statement	active_op_array	1341:7:43983:43997	43111	2	True				
ANR	43406	Statement	)	1341:22:43998:43998	43111	3	True				
ANR	43407	Statement	->	1341:23:43999:44000	43111	4	True				
ANR	43408	Statement	this_var	1341:25:44001:44008	43111	5	True				
ANR	43409	Statement	=	1341:34:44010:44010	43111	6	True				
ANR	43410	Statement	lookup_cv	1341:36:44012:44020	43111	7	True				
ANR	43411	Statement	(	1341:45:44021:44021	43111	8	True				
ANR	43412	Statement	CG	1341:46:44022:44023	43111	9	True				
ANR	43413	Statement	(	1341:48:44024:44024	43111	10	True				
ANR	43414	Statement	active_op_array	1341:49:44025:44039	43111	11	True				
ANR	43415	Statement	)	1341:64:44040:44040	43111	12	True				
ANR	43416	Statement	","	1341:65:44041:44041	43111	13	True				
ANR	43417	Statement	estrndup	1341:67:44043:44050	43111	14	True				
ANR	43418	Statement	(	1341:75:44051:44051	43111	15	True				
ANR	43419	Statement	"""this"""	1341:76:44052:44057	43111	16	True				
ANR	43420	Statement	","	1341:82:44058:44058	43111	17	True				
ANR	43421	Statement	sizeof	1341:84:44060:44065	43111	18	True				
ANR	43422	Statement	(	1341:90:44066:44066	43111	19	True				
ANR	43423	Statement	"""this"""	1341:91:44067:44072	43111	20	True				
ANR	43424	Statement	)	1341:97:44073:44073	43111	21	True				
ANR	43425	Statement	-	1341:98:44074:44074	43111	22	True				
ANR	43426	Statement	1	1341:99:44075:44075	43111	23	True				
ANR	43427	Statement	)	1341:100:44076:44076	43111	24	True				
ANR	43428	Statement	","	1341:101:44077:44077	43111	25	True				
ANR	43429	Statement	sizeof	1341:103:44079:44084	43111	26	True				
ANR	43430	Statement	(	1341:109:44085:44085	43111	27	True				
ANR	43431	Statement	"""this"""	1341:110:44086:44091	43111	28	True				
ANR	43432	Statement	)	1341:116:44092:44092	43111	29	True				
ANR	43433	Statement	-	1341:117:44093:44093	43111	30	True				
ANR	43434	Statement	1	1341:118:44094:44094	43111	31	True				
ANR	43435	Statement	","	1341:119:44095:44095	43111	32	True				
ANR	43436	Statement	THIS_HASHVAL	1341:121:44097:44108	43111	33	True				
ANR	43437	Statement	TSRMLS_CC	1341:134:44110:44118	43111	34	True				
ANR	43438	Statement	)	1341:143:44119:44119	43111	35	True				
ANR	43439	ExpressionStatement		1341:144:44120:44120	43111	36	True				
ANR	43440	WhileStatement	while ( le )		43111	10					
ANR	43441	Condition	le	1345:9:44141:44142	43111	0	True				
ANR	43442	Identifier	le		43111	0					
ANR	43443	CompoundStatement		39:13:1451:1451	43111	1					
ANR	43444	ExpressionStatement	opline_ptr = ( zend_op * ) le -> data	1346:3:44150:44182	43111	0	True				
ANR	43445	AssignmentExpression	opline_ptr = ( zend_op * ) le -> data		43111	0		=			
ANR	43446	Identifier	opline_ptr		43111	0					
ANR	43447	CastExpression	( zend_op * ) le -> data		43111	1					
ANR	43448	CastTarget	zend_op *		43111	0					
ANR	43449	PtrMemberAccess	le -> data		43111	1					
ANR	43450	Identifier	le		43111	0					
ANR	43451	Identifier	data		43111	1					
ANR	43452	IfStatement	if ( opline_ptr -> opcode == ZEND_SEPARATE )		43111	1					
ANR	43453	Condition	opline_ptr -> opcode == ZEND_SEPARATE	1347:7:44191:44225	43111	0	True				
ANR	43454	EqualityExpression	opline_ptr -> opcode == ZEND_SEPARATE		43111	0		==			
ANR	43455	PtrMemberAccess	opline_ptr -> opcode		43111	0					
ANR	43456	Identifier	opline_ptr		43111	0					
ANR	43457	Identifier	opcode		43111	1					
ANR	43458	Identifier	ZEND_SEPARATE		43111	1					
ANR	43459	CompoundStatement		41:44:1534:1534	43111	1					
ANR	43460	IfStatement	if ( type != BP_VAR_R && type != BP_VAR_IS )		43111	0					
ANR	43461	Condition	type != BP_VAR_R && type != BP_VAR_IS	1348:8:44238:44274	43111	0	True				
ANR	43462	AndExpression	type != BP_VAR_R && type != BP_VAR_IS		43111	0		&&			
ANR	43463	EqualityExpression	type != BP_VAR_R		43111	0		!=			
ANR	43464	Identifier	type		43111	0					
ANR	43465	Identifier	BP_VAR_R		43111	1					
ANR	43466	EqualityExpression	type != BP_VAR_IS		43111	1		!=			
ANR	43467	Identifier	type		43111	0					
ANR	43468	Identifier	BP_VAR_IS		43111	1					
ANR	43469	CompoundStatement		42:47:1583:1583	43111	1					
ANR	43470	Statement	opline	1349:5:44284:44289	43111	0	True				
ANR	43471	Statement	=	1349:12:44291:44291	43111	1	True				
ANR	43472	Statement	get_next_op	1349:14:44293:44303	43111	2	True				
ANR	43473	Statement	(	1349:25:44304:44304	43111	3	True				
ANR	43474	Statement	CG	1349:26:44305:44306	43111	4	True				
ANR	43475	Statement	(	1349:28:44307:44307	43111	5	True				
ANR	43476	Statement	active_op_array	1349:29:44308:44322	43111	6	True				
ANR	43477	Statement	)	1349:44:44323:44323	43111	7	True				
ANR	43478	Statement	TSRMLS_CC	1349:46:44325:44333	43111	8	True				
ANR	43479	Statement	)	1349:55:44334:44334	43111	9	True				
ANR	43480	ExpressionStatement		1349:56:44335:44335	43111	10	True				
ANR	43481	ExpressionStatement	"memcpy ( opline , opline_ptr , sizeof ( zend_op ) )"	1350:5:44342:44385	43111	11	True				
ANR	43482	CallExpression	"memcpy ( opline , opline_ptr , sizeof ( zend_op ) )"		43111	0					
ANR	43483	Callee	memcpy		43111	0					
ANR	43484	Identifier	memcpy		43111	0					
ANR	43485	ArgumentList	opline		43111	1					
ANR	43486	Argument	opline		43111	0					
ANR	43487	Identifier	opline		43111	0					
ANR	43488	Argument	opline_ptr		43111	1					
ANR	43489	Identifier	opline_ptr		43111	0					
ANR	43490	Argument	sizeof ( zend_op )		43111	2					
ANR	43491	SizeofExpression	sizeof ( zend_op )		43111	0					
ANR	43492	Sizeof	sizeof		43111	0					
ANR	43493	SizeofOperand	zend_op		43111	1					
ANR	43494	ExpressionStatement	le = le -> next	1352:4:44397:44410	43111	1	True				
ANR	43495	AssignmentExpression	le = le -> next		43111	0		=			
ANR	43496	Identifier	le		43111	0					
ANR	43497	PtrMemberAccess	le -> next		43111	1					
ANR	43498	Identifier	le		43111	0					
ANR	43499	Identifier	next		43111	1					
ANR	43500	ContinueStatement	continue ;	1353:4:44416:44424	43111	2	True				
ANR	43501	Statement	opline	1355:3:44434:44439	43111	2	True				
ANR	43502	Statement	=	1355:10:44441:44441	43111	3	True				
ANR	43503	Statement	get_next_op	1355:12:44443:44453	43111	4	True				
ANR	43504	Statement	(	1355:23:44454:44454	43111	5	True				
ANR	43505	Statement	CG	1355:24:44455:44456	43111	6	True				
ANR	43506	Statement	(	1355:26:44457:44457	43111	7	True				
ANR	43507	Statement	active_op_array	1355:27:44458:44472	43111	8	True				
ANR	43508	Statement	)	1355:42:44473:44473	43111	9	True				
ANR	43509	Statement	TSRMLS_CC	1355:44:44475:44483	43111	10	True				
ANR	43510	Statement	)	1355:53:44484:44484	43111	11	True				
ANR	43511	ExpressionStatement		1355:54:44485:44485	43111	12	True				
ANR	43512	ExpressionStatement	"memcpy ( opline , opline_ptr , sizeof ( zend_op ) )"	1356:3:44490:44533	43111	13	True				
ANR	43513	CallExpression	"memcpy ( opline , opline_ptr , sizeof ( zend_op ) )"		43111	0					
ANR	43514	Callee	memcpy		43111	0					
ANR	43515	Identifier	memcpy		43111	0					
ANR	43516	ArgumentList	opline		43111	1					
ANR	43517	Argument	opline		43111	0					
ANR	43518	Identifier	opline		43111	0					
ANR	43519	Argument	opline_ptr		43111	1					
ANR	43520	Identifier	opline_ptr		43111	0					
ANR	43521	Argument	sizeof ( zend_op )		43111	2					
ANR	43522	SizeofExpression	sizeof ( zend_op )		43111	0					
ANR	43523	Sizeof	sizeof		43111	0					
ANR	43524	SizeofOperand	zend_op		43111	1					
ANR	43525	IfStatement	if ( opline -> op1_type == IS_VAR && opline -> op1 . var == this_var )		43111	14					
ANR	43526	Condition	opline -> op1_type == IS_VAR && opline -> op1 . var == this_var	1357:7:44542:44605	43111	0	True				
ANR	43527	AndExpression	opline -> op1_type == IS_VAR && opline -> op1 . var == this_var		43111	0		&&			
ANR	43528	EqualityExpression	opline -> op1_type == IS_VAR		43111	0		==			
ANR	43529	PtrMemberAccess	opline -> op1_type		43111	0					
ANR	43530	Identifier	opline		43111	0					
ANR	43531	Identifier	op1_type		43111	1					
ANR	43532	Identifier	IS_VAR		43111	1					
ANR	43533	EqualityExpression	opline -> op1 . var == this_var		43111	1		==			
ANR	43534	MemberAccess	opline -> op1 . var		43111	0					
ANR	43535	PtrMemberAccess	opline -> op1		43111	0					
ANR	43536	Identifier	opline		43111	0					
ANR	43537	Identifier	op1		43111	1					
ANR	43538	Identifier	var		43111	1					
ANR	43539	Identifier	this_var		43111	1					
ANR	43540	CompoundStatement		52:36:1914:1914	43111	1					
ANR	43541	ExpressionStatement	opline -> op1_type = IS_CV	1359:4:44614:44638	43111	0	True				
ANR	43542	AssignmentExpression	opline -> op1_type = IS_CV		43111	0		=			
ANR	43543	PtrMemberAccess	opline -> op1_type		43111	0					
ANR	43544	Identifier	opline		43111	0					
ANR	43545	Identifier	op1_type		43111	1					
ANR	43546	Identifier	IS_CV		43111	1					
ANR	43547	ExpressionStatement	opline -> op1 . var = CG ( active_op_array ) -> this_var	1360:4:44644:44691	43111	1	True				
ANR	43548	AssignmentExpression	opline -> op1 . var = CG ( active_op_array ) -> this_var		43111	0		=			
ANR	43549	MemberAccess	opline -> op1 . var		43111	0					
ANR	43550	PtrMemberAccess	opline -> op1		43111	0					
ANR	43551	Identifier	opline		43111	0					
ANR	43552	Identifier	op1		43111	1					
ANR	43553	Identifier	var		43111	1					
ANR	43554	PtrMemberAccess	CG ( active_op_array ) -> this_var		43111	1					
ANR	43555	CallExpression	CG ( active_op_array )		43111	0					
ANR	43556	Callee	CG		43111	0					
ANR	43557	Identifier	CG		43111	0					
ANR	43558	ArgumentList	active_op_array		43111	1					
ANR	43559	Argument	active_op_array		43111	0					
ANR	43560	Identifier	active_op_array		43111	0					
ANR	43561	Identifier	this_var		43111	1					
ANR	43562	SwitchStatement	switch ( type )		43111	15					
ANR	43563	Condition	type	1362:11:44709:44712	43111	0	True				
ANR	43564	Identifier	type		43111	0					
ANR	43565	CompoundStatement		56:17:2021:2021	43111	1					
ANR	43566	Label	case BP_VAR_R :	1363:4:44721:44734	43111	0	True				
ANR	43567	Identifier	BP_VAR_R		43111	0					
ANR	43568	IfStatement	if ( opline -> opcode == ZEND_FETCH_DIM_W && opline -> op2_type == IS_UNUSED )		43111	1					
ANR	43569	Condition	opline -> opcode == ZEND_FETCH_DIM_W && opline -> op2_type == IS_UNUSED	1364:9:44745:44811	43111	0	True				
ANR	43570	AndExpression	opline -> opcode == ZEND_FETCH_DIM_W && opline -> op2_type == IS_UNUSED		43111	0		&&			
ANR	43571	EqualityExpression	opline -> opcode == ZEND_FETCH_DIM_W		43111	0		==			
ANR	43572	PtrMemberAccess	opline -> opcode		43111	0					
ANR	43573	Identifier	opline		43111	0					
ANR	43574	Identifier	opcode		43111	1					
ANR	43575	Identifier	ZEND_FETCH_DIM_W		43111	1					
ANR	43576	EqualityExpression	opline -> op2_type == IS_UNUSED		43111	1		==			
ANR	43577	PtrMemberAccess	opline -> op2_type		43111	0					
ANR	43578	Identifier	opline		43111	0					
ANR	43579	Identifier	op2_type		43111	1					
ANR	43580	Identifier	IS_UNUSED		43111	1					
ANR	43581	CompoundStatement		58:78:2120:2120	43111	1					
ANR	43582	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for reading"" )"	1365:6:44822:44887	43111	0	True				
ANR	43583	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for reading"" )"		43111	0					
ANR	43584	Callee	zend_error_noreturn		43111	0					
ANR	43585	Identifier	zend_error_noreturn		43111	0					
ANR	43586	ArgumentList	E_COMPILE_ERROR		43111	1					
ANR	43587	Argument	E_COMPILE_ERROR		43111	0					
ANR	43588	Identifier	E_COMPILE_ERROR		43111	0					
ANR	43589	Argument	"""Cannot use [] for reading"""		43111	1					
ANR	43590	PrimaryExpression	"""Cannot use [] for reading"""		43111	0					
ANR	43591	ExpressionStatement	opline -> opcode -= 3	1367:5:44901:44920	43111	2	True				
ANR	43592	AssignmentExpression	opline -> opcode -= 3		43111	0		-=			
ANR	43593	PtrMemberAccess	opline -> opcode		43111	0					
ANR	43594	Identifier	opline		43111	0					
ANR	43595	Identifier	opcode		43111	1					
ANR	43596	PrimaryExpression	3		43111	1					
ANR	43597	BreakStatement	break ;	1368:5:44927:44932	43111	3	True				
ANR	43598	Label	case BP_VAR_W :	1369:4:44938:44951	43111	4	True				
ANR	43599	Identifier	BP_VAR_W		43111	0					
ANR	43600	BreakStatement	break ;	1370:5:44958:44963	43111	5	True				
ANR	43601	Label	case BP_VAR_RW :	1371:4:44969:44983	43111	6	True				
ANR	43602	Identifier	BP_VAR_RW		43111	0					
ANR	43603	ExpressionStatement	opline -> opcode += 3	1372:5:44990:45009	43111	7	True				
ANR	43604	AssignmentExpression	opline -> opcode += 3		43111	0		+=			
ANR	43605	PtrMemberAccess	opline -> opcode		43111	0					
ANR	43606	Identifier	opline		43111	0					
ANR	43607	Identifier	opcode		43111	1					
ANR	43608	PrimaryExpression	3		43111	1					
ANR	43609	BreakStatement	break ;	1373:5:45016:45021	43111	8	True				
ANR	43610	Label	case BP_VAR_IS :	1374:4:45027:45041	43111	9	True				
ANR	43611	Identifier	BP_VAR_IS		43111	0					
ANR	43612	IfStatement	if ( opline -> opcode == ZEND_FETCH_DIM_W && opline -> op2_type == IS_UNUSED )		43111	10					
ANR	43613	Condition	opline -> opcode == ZEND_FETCH_DIM_W && opline -> op2_type == IS_UNUSED	1375:9:45052:45118	43111	0	True				
ANR	43614	AndExpression	opline -> opcode == ZEND_FETCH_DIM_W && opline -> op2_type == IS_UNUSED		43111	0		&&			
ANR	43615	EqualityExpression	opline -> opcode == ZEND_FETCH_DIM_W		43111	0		==			
ANR	43616	PtrMemberAccess	opline -> opcode		43111	0					
ANR	43617	Identifier	opline		43111	0					
ANR	43618	Identifier	opcode		43111	1					
ANR	43619	Identifier	ZEND_FETCH_DIM_W		43111	1					
ANR	43620	EqualityExpression	opline -> op2_type == IS_UNUSED		43111	1		==			
ANR	43621	PtrMemberAccess	opline -> op2_type		43111	0					
ANR	43622	Identifier	opline		43111	0					
ANR	43623	Identifier	op2_type		43111	1					
ANR	43624	Identifier	IS_UNUSED		43111	1					
ANR	43625	CompoundStatement		69:78:2427:2427	43111	1					
ANR	43626	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for reading"" )"	1376:6:45129:45194	43111	0	True				
ANR	43627	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for reading"" )"		43111	0					
ANR	43628	Callee	zend_error_noreturn		43111	0					
ANR	43629	Identifier	zend_error_noreturn		43111	0					
ANR	43630	ArgumentList	E_COMPILE_ERROR		43111	1					
ANR	43631	Argument	E_COMPILE_ERROR		43111	0					
ANR	43632	Identifier	E_COMPILE_ERROR		43111	0					
ANR	43633	Argument	"""Cannot use [] for reading"""		43111	1					
ANR	43634	PrimaryExpression	"""Cannot use [] for reading"""		43111	0					
ANR	43635	ExpressionStatement	opline -> opcode += 6	1378:5:45208:45227	43111	11	True				
ANR	43636	AssignmentExpression	opline -> opcode += 6		43111	0		+=			
ANR	43637	PtrMemberAccess	opline -> opcode		43111	0					
ANR	43638	Identifier	opline		43111	0					
ANR	43639	Identifier	opcode		43111	1					
ANR	43640	PrimaryExpression	6		43111	1					
ANR	43641	BreakStatement	break ;	1379:5:45244:45249	43111	12	True				
ANR	43642	Label	case BP_VAR_FUNC_ARG :	1380:4:45255:45275	43111	13	True				
ANR	43643	Identifier	BP_VAR_FUNC_ARG		43111	0					
ANR	43644	ExpressionStatement	opline -> opcode += 9	1381:5:45282:45301	43111	14	True				
ANR	43645	AssignmentExpression	opline -> opcode += 9		43111	0		+=			
ANR	43646	PtrMemberAccess	opline -> opcode		43111	0					
ANR	43647	Identifier	opline		43111	0					
ANR	43648	Identifier	opcode		43111	1					
ANR	43649	PrimaryExpression	9		43111	1					
ANR	43650	ExpressionStatement	opline -> extended_value |= arg_offset	1382:5:45320:45356	43111	15	True				
ANR	43651	AssignmentExpression	opline -> extended_value |= arg_offset		43111	0		|=			
ANR	43652	PtrMemberAccess	opline -> extended_value		43111	0					
ANR	43653	Identifier	opline		43111	0					
ANR	43654	Identifier	extended_value		43111	1					
ANR	43655	Identifier	arg_offset		43111	1					
ANR	43656	BreakStatement	break ;	1383:5:45363:45368	43111	16	True				
ANR	43657	Label	case BP_VAR_UNSET :	1384:4:45374:45391	43111	17	True				
ANR	43658	Identifier	BP_VAR_UNSET		43111	0					
ANR	43659	IfStatement	if ( opline -> opcode == ZEND_FETCH_DIM_W && opline -> op2_type == IS_UNUSED )		43111	18					
ANR	43660	Condition	opline -> opcode == ZEND_FETCH_DIM_W && opline -> op2_type == IS_UNUSED	1385:9:45402:45468	43111	0	True				
ANR	43661	AndExpression	opline -> opcode == ZEND_FETCH_DIM_W && opline -> op2_type == IS_UNUSED		43111	0		&&			
ANR	43662	EqualityExpression	opline -> opcode == ZEND_FETCH_DIM_W		43111	0		==			
ANR	43663	PtrMemberAccess	opline -> opcode		43111	0					
ANR	43664	Identifier	opline		43111	0					
ANR	43665	Identifier	opcode		43111	1					
ANR	43666	Identifier	ZEND_FETCH_DIM_W		43111	1					
ANR	43667	EqualityExpression	opline -> op2_type == IS_UNUSED		43111	1		==			
ANR	43668	PtrMemberAccess	opline -> op2_type		43111	0					
ANR	43669	Identifier	opline		43111	0					
ANR	43670	Identifier	op2_type		43111	1					
ANR	43671	Identifier	IS_UNUSED		43111	1					
ANR	43672	CompoundStatement		79:78:2777:2777	43111	1					
ANR	43673	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for unsetting"" )"	1386:6:45479:45546	43111	0	True				
ANR	43674	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for unsetting"" )"		43111	0					
ANR	43675	Callee	zend_error_noreturn		43111	0					
ANR	43676	Identifier	zend_error_noreturn		43111	0					
ANR	43677	ArgumentList	E_COMPILE_ERROR		43111	1					
ANR	43678	Argument	E_COMPILE_ERROR		43111	0					
ANR	43679	Identifier	E_COMPILE_ERROR		43111	0					
ANR	43680	Argument	"""Cannot use [] for unsetting"""		43111	1					
ANR	43681	PrimaryExpression	"""Cannot use [] for unsetting"""		43111	0					
ANR	43682	ExpressionStatement	opline -> opcode += 12	1388:5:45560:45580	43111	19	True				
ANR	43683	AssignmentExpression	opline -> opcode += 12		43111	0		+=			
ANR	43684	PtrMemberAccess	opline -> opcode		43111	0					
ANR	43685	Identifier	opline		43111	0					
ANR	43686	Identifier	opcode		43111	1					
ANR	43687	PrimaryExpression	12		43111	1					
ANR	43688	BreakStatement	break ;	1389:5:45601:45606	43111	20	True				
ANR	43689	ExpressionStatement	le = le -> next	1391:3:45616:45629	43111	16	True				
ANR	43690	AssignmentExpression	le = le -> next		43111	0		=			
ANR	43691	Identifier	le		43111	0					
ANR	43692	PtrMemberAccess	le -> next		43111	1					
ANR	43693	Identifier	le		43111	0					
ANR	43694	Identifier	next		43111	1					
ANR	43695	IfStatement	if ( opline && type == BP_VAR_W && arg_offset )		43111	11					
ANR	43696	Condition	opline && type == BP_VAR_W && arg_offset	1393:6:45641:45680	43111	0	True				
ANR	43697	AndExpression	opline && type == BP_VAR_W && arg_offset		43111	0		&&			
ANR	43698	Identifier	opline		43111	0					
ANR	43699	AndExpression	type == BP_VAR_W && arg_offset		43111	1		&&			
ANR	43700	EqualityExpression	type == BP_VAR_W		43111	0		==			
ANR	43701	Identifier	type		43111	0					
ANR	43702	Identifier	BP_VAR_W		43111	1					
ANR	43703	Identifier	arg_offset		43111	1					
ANR	43704	CompoundStatement		87:48:2989:2989	43111	1					
ANR	43705	ExpressionStatement	opline -> extended_value |= ZEND_FETCH_MAKE_REF	1394:3:45688:45733	43111	0	True				
ANR	43706	AssignmentExpression	opline -> extended_value |= ZEND_FETCH_MAKE_REF		43111	0		|=			
ANR	43707	PtrMemberAccess	opline -> extended_value		43111	0					
ANR	43708	Identifier	opline		43111	0					
ANR	43709	Identifier	extended_value		43111	1					
ANR	43710	Identifier	ZEND_FETCH_MAKE_REF		43111	1					
ANR	43711	ExpressionStatement	zend_llist_destroy ( fetch_list_ptr )	1397:1:45743:45777	43111	8	True				
ANR	43712	CallExpression	zend_llist_destroy ( fetch_list_ptr )		43111	0					
ANR	43713	Callee	zend_llist_destroy		43111	0					
ANR	43714	Identifier	zend_llist_destroy		43111	0					
ANR	43715	ArgumentList	fetch_list_ptr		43111	1					
ANR	43716	Argument	fetch_list_ptr		43111	0					
ANR	43717	Identifier	fetch_list_ptr		43111	0					
ANR	43718	ExpressionStatement	zend_stack_del_top ( & CG ( bp_stack ) )	1398:1:45780:45813	43111	9	True				
ANR	43719	CallExpression	zend_stack_del_top ( & CG ( bp_stack ) )		43111	0					
ANR	43720	Callee	zend_stack_del_top		43111	0					
ANR	43721	Identifier	zend_stack_del_top		43111	0					
ANR	43722	ArgumentList	& CG ( bp_stack )		43111	1					
ANR	43723	Argument	& CG ( bp_stack )		43111	0					
ANR	43724	UnaryOperationExpression	& CG ( bp_stack )		43111	0					
ANR	43725	UnaryOperator	&		43111	0					
ANR	43726	CallExpression	CG ( bp_stack )		43111	1					
ANR	43727	Callee	CG		43111	0					
ANR	43728	Identifier	CG		43111	0					
ANR	43729	ArgumentList	bp_stack		43111	1					
ANR	43730	Argument	bp_stack		43111	0					
ANR	43731	Identifier	bp_stack		43111	0					
ANR	43732	ReturnType	void		43111	1					
ANR	43733	Identifier	zend_do_end_variable_parse		43111	2					
ANR	43734	ParameterList	"znode * variable , int type , int arg_offset TSRMLS_DC"		43111	3					
ANR	43735	Parameter	znode * variable	1306:32:42630:42644	43111	0	True				
ANR	43736	ParameterType	znode *		43111	0					
ANR	43737	Identifier	variable		43111	1					
ANR	43738	Parameter	int type	1306:49:42647:42654	43111	1	True				
ANR	43739	ParameterType	int		43111	0					
ANR	43740	Identifier	type		43111	1					
ANR	43741	Parameter	int arg_offset TSRMLS_DC	1306:59:42657:42680	43111	2	True				
ANR	43742	ParameterType	int arg_offset		43111	0					
ANR	43743	Identifier	TSRMLS_DC		43111	1					
ANR	43744	CFGEntryNode	ENTRY		43111		True				
ANR	43745	CFGExitNode	EXIT		43111		True				
ANR	43746	Symbol	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode		43111						
ANR	43747	Symbol	IS_CV		43111						
ANR	43748	Symbol	le -> next		43111						
ANR	43749	Symbol	E_COMPILE_ERROR		43111						
ANR	43750	Symbol	* CG		43111						
ANR	43751	Symbol	Z_TYPE		43111						
ANR	43752	Symbol	type		43111						
ANR	43753	Symbol	TSRMLS_DC		43111						
ANR	43754	Symbol	CG ( active_op_array ) -> opcodes		43111						
ANR	43755	Symbol	opline -> extended_value		43111						
ANR	43756	Symbol	& CG		43111						
ANR	43757	Symbol	CG ( active_op_array ) -> last		43111						
ANR	43758	Symbol	arg_offset		43111						
ANR	43759	Symbol	opline		43111						
ANR	43760	Symbol	ZEND_FETCH_DIM_W		43111						
ANR	43761	Symbol	BP_VAR_W		43111						
ANR	43762	Symbol	BP_VAR_IS		43111						
ANR	43763	Symbol	BP_VAR_R		43111						
ANR	43764	Symbol	* CG ( active_op_array ) -> opcodes		43111						
ANR	43765	Symbol	NULL		43111						
ANR	43766	Symbol	opline_ptr		43111						
ANR	43767	Symbol	* CG ( active_op_array ) -> last		43111						
ANR	43768	Symbol	opline_ptr -> result		43111						
ANR	43769	Symbol	opline_ptr -> op1		43111						
ANR	43770	Symbol	* variable		43111						
ANR	43771	Symbol	opline -> op1_type		43111						
ANR	43772	Symbol	this_var		43111						
ANR	43773	Symbol	* fetch_list_ptr		43111						
ANR	43774	Symbol	variable -> u . op . var		43111						
ANR	43775	Symbol	* le		43111						
ANR	43776	Symbol	IS_VAR		43111						
ANR	43777	Symbol	ZEND_BEGIN_SILENCE		43111						
ANR	43778	Symbol	opline -> op1		43111						
ANR	43779	Symbol	bp_stack		43111						
ANR	43780	Symbol	le -> data		43111						
ANR	43781	Symbol	variable -> op_type		43111						
ANR	43782	Symbol	fetch_list_ptr		43111						
ANR	43783	Symbol	fetch_list_ptr -> head		43111						
ANR	43784	Symbol	* * CG		43111						
ANR	43785	Symbol	opline_ptr -> op1 . constant		43111						
ANR	43786	Symbol	IS_NULL		43111						
ANR	43787	Symbol	ZEND_SEPARATE		43111						
ANR	43788	Symbol	* opline_ptr		43111						
ANR	43789	Symbol	opline -> op1 . var		43111						
ANR	43790	Symbol	CG		43111						
ANR	43791	Symbol	& fetch_list_ptr		43111						
ANR	43792	Symbol	active_op_array		43111						
ANR	43793	Symbol	CONSTANT		43111						
ANR	43794	Symbol	opline_ptr -> result . var		43111						
ANR	43795	Symbol	CG ( active_op_array ) -> this_var		43111						
ANR	43796	Symbol	opline_ptr -> opcode		43111						
ANR	43797	Symbol	* opline		43111						
ANR	43798	Symbol	ZEND_FETCH_MAKE_REF		43111						
ANR	43799	Symbol	variable -> u		43111						
ANR	43800	Symbol	opline -> opcode		43111						
ANR	43801	Symbol	variable		43111						
ANR	43802	Symbol	le		43111						
ANR	43803	Symbol	variable -> u . op		43111						
ANR	43804	Symbol	opline -> op2_type		43111						
ANR	43805	Symbol	IS_UNUSED		43111						
ANR	43806	DeclStmt									
ANR	43807	Decl							zend_op	zend_op *	opline
ANR	43808	DeclStmt									
ANR	43809	Decl							int	int	ch
ANR	43810	DeclStmt									
ANR	43811	Decl							zend_op	zend_op *	opline
ANR	43812	DeclStmt									
ANR	43813	Decl							zend_op	zend_op *	opline
ANR	43814	DeclStmt									
ANR	43815	Decl							zend_op	zend_op *	opline
ANR	43816	Function	zend_do_verify_access_types	1510:0:49061:50390							
ANR	43817	FunctionDef	"zend_do_verify_access_types (const znode * current_access_type , const znode * new_modifier)"		43816	0					
ANR	43818	CompoundStatement		1511:0:49164:50390	43816	0					
ANR	43819	IfStatement	if ( ( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_PPP_MASK ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_PPP_MASK ) )		43816	0					
ANR	43820	Condition	( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_PPP_MASK ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_PPP_MASK )	1512:5:49171:49291	43816	0	True				
ANR	43821	AndExpression	( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_PPP_MASK ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_PPP_MASK )		43816	0		&&			
ANR	43822	BitAndExpression	Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_PPP_MASK		43816	0		&			
ANR	43823	CallExpression	Z_LVAL ( current_access_type -> u . constant )		43816	0					
ANR	43824	Callee	Z_LVAL		43816	0					
ANR	43825	Identifier	Z_LVAL		43816	0					
ANR	43826	ArgumentList	current_access_type -> u . constant		43816	1					
ANR	43827	Argument	current_access_type -> u . constant		43816	0					
ANR	43828	MemberAccess	current_access_type -> u . constant		43816	0					
ANR	43829	PtrMemberAccess	current_access_type -> u		43816	0					
ANR	43830	Identifier	current_access_type		43816	0					
ANR	43831	Identifier	u		43816	1					
ANR	43832	Identifier	constant		43816	1					
ANR	43833	Identifier	ZEND_ACC_PPP_MASK		43816	1					
ANR	43834	BitAndExpression	Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_PPP_MASK		43816	1		&			
ANR	43835	CallExpression	Z_LVAL ( new_modifier -> u . constant )		43816	0					
ANR	43836	Callee	Z_LVAL		43816	0					
ANR	43837	Identifier	Z_LVAL		43816	0					
ANR	43838	ArgumentList	new_modifier -> u . constant		43816	1					
ANR	43839	Argument	new_modifier -> u . constant		43816	0					
ANR	43840	MemberAccess	new_modifier -> u . constant		43816	0					
ANR	43841	PtrMemberAccess	new_modifier -> u		43816	0					
ANR	43842	Identifier	new_modifier		43816	0					
ANR	43843	Identifier	u		43816	1					
ANR	43844	Identifier	constant		43816	1					
ANR	43845	Identifier	ZEND_ACC_PPP_MASK		43816	1					
ANR	43846	CompoundStatement		3:61:129:129	43816	1					
ANR	43847	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple access type modifiers are not allowed"" )"	1514:2:49298:49384	43816	0	True				
ANR	43848	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple access type modifiers are not allowed"" )"		43816	0					
ANR	43849	Callee	zend_error_noreturn		43816	0					
ANR	43850	Identifier	zend_error_noreturn		43816	0					
ANR	43851	ArgumentList	E_COMPILE_ERROR		43816	1					
ANR	43852	Argument	E_COMPILE_ERROR		43816	0					
ANR	43853	Identifier	E_COMPILE_ERROR		43816	0					
ANR	43854	Argument	"""Multiple access type modifiers are not allowed"""		43816	1					
ANR	43855	PrimaryExpression	"""Multiple access type modifiers are not allowed"""		43816	0					
ANR	43856	IfStatement	if ( ( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_ABSTRACT ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_ABSTRACT ) )		43816	1					
ANR	43857	Condition	( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_ABSTRACT ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_ABSTRACT )	1516:5:49394:49514	43816	0	True				
ANR	43858	AndExpression	( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_ABSTRACT ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_ABSTRACT )		43816	0		&&			
ANR	43859	BitAndExpression	Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_ABSTRACT		43816	0		&			
ANR	43860	CallExpression	Z_LVAL ( current_access_type -> u . constant )		43816	0					
ANR	43861	Callee	Z_LVAL		43816	0					
ANR	43862	Identifier	Z_LVAL		43816	0					
ANR	43863	ArgumentList	current_access_type -> u . constant		43816	1					
ANR	43864	Argument	current_access_type -> u . constant		43816	0					
ANR	43865	MemberAccess	current_access_type -> u . constant		43816	0					
ANR	43866	PtrMemberAccess	current_access_type -> u		43816	0					
ANR	43867	Identifier	current_access_type		43816	0					
ANR	43868	Identifier	u		43816	1					
ANR	43869	Identifier	constant		43816	1					
ANR	43870	Identifier	ZEND_ACC_ABSTRACT		43816	1					
ANR	43871	BitAndExpression	Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_ABSTRACT		43816	1		&			
ANR	43872	CallExpression	Z_LVAL ( new_modifier -> u . constant )		43816	0					
ANR	43873	Callee	Z_LVAL		43816	0					
ANR	43874	Identifier	Z_LVAL		43816	0					
ANR	43875	ArgumentList	new_modifier -> u . constant		43816	1					
ANR	43876	Argument	new_modifier -> u . constant		43816	0					
ANR	43877	MemberAccess	new_modifier -> u . constant		43816	0					
ANR	43878	PtrMemberAccess	new_modifier -> u		43816	0					
ANR	43879	Identifier	new_modifier		43816	0					
ANR	43880	Identifier	u		43816	1					
ANR	43881	Identifier	constant		43816	1					
ANR	43882	Identifier	ZEND_ACC_ABSTRACT		43816	1					
ANR	43883	CompoundStatement		7:61:352:352	43816	1					
ANR	43884	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple abstract modifiers are not allowed"" )"	1518:2:49521:49604	43816	0	True				
ANR	43885	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple abstract modifiers are not allowed"" )"		43816	0					
ANR	43886	Callee	zend_error_noreturn		43816	0					
ANR	43887	Identifier	zend_error_noreturn		43816	0					
ANR	43888	ArgumentList	E_COMPILE_ERROR		43816	1					
ANR	43889	Argument	E_COMPILE_ERROR		43816	0					
ANR	43890	Identifier	E_COMPILE_ERROR		43816	0					
ANR	43891	Argument	"""Multiple abstract modifiers are not allowed"""		43816	1					
ANR	43892	PrimaryExpression	"""Multiple abstract modifiers are not allowed"""		43816	0					
ANR	43893	IfStatement	if ( ( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_STATIC ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_STATIC ) )		43816	2					
ANR	43894	Condition	( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_STATIC ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_STATIC )	1520:5:49614:49730	43816	0	True				
ANR	43895	AndExpression	( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_STATIC ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_STATIC )		43816	0		&&			
ANR	43896	BitAndExpression	Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_STATIC		43816	0		&			
ANR	43897	CallExpression	Z_LVAL ( current_access_type -> u . constant )		43816	0					
ANR	43898	Callee	Z_LVAL		43816	0					
ANR	43899	Identifier	Z_LVAL		43816	0					
ANR	43900	ArgumentList	current_access_type -> u . constant		43816	1					
ANR	43901	Argument	current_access_type -> u . constant		43816	0					
ANR	43902	MemberAccess	current_access_type -> u . constant		43816	0					
ANR	43903	PtrMemberAccess	current_access_type -> u		43816	0					
ANR	43904	Identifier	current_access_type		43816	0					
ANR	43905	Identifier	u		43816	1					
ANR	43906	Identifier	constant		43816	1					
ANR	43907	Identifier	ZEND_ACC_STATIC		43816	1					
ANR	43908	BitAndExpression	Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_STATIC		43816	1		&			
ANR	43909	CallExpression	Z_LVAL ( new_modifier -> u . constant )		43816	0					
ANR	43910	Callee	Z_LVAL		43816	0					
ANR	43911	Identifier	Z_LVAL		43816	0					
ANR	43912	ArgumentList	new_modifier -> u . constant		43816	1					
ANR	43913	Argument	new_modifier -> u . constant		43816	0					
ANR	43914	MemberAccess	new_modifier -> u . constant		43816	0					
ANR	43915	PtrMemberAccess	new_modifier -> u		43816	0					
ANR	43916	Identifier	new_modifier		43816	0					
ANR	43917	Identifier	u		43816	1					
ANR	43918	Identifier	constant		43816	1					
ANR	43919	Identifier	ZEND_ACC_STATIC		43816	1					
ANR	43920	CompoundStatement		11:59:568:568	43816	1					
ANR	43921	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple static modifiers are not allowed"" )"	1522:2:49737:49818	43816	0	True				
ANR	43922	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple static modifiers are not allowed"" )"		43816	0					
ANR	43923	Callee	zend_error_noreturn		43816	0					
ANR	43924	Identifier	zend_error_noreturn		43816	0					
ANR	43925	ArgumentList	E_COMPILE_ERROR		43816	1					
ANR	43926	Argument	E_COMPILE_ERROR		43816	0					
ANR	43927	Identifier	E_COMPILE_ERROR		43816	0					
ANR	43928	Argument	"""Multiple static modifiers are not allowed"""		43816	1					
ANR	43929	PrimaryExpression	"""Multiple static modifiers are not allowed"""		43816	0					
ANR	43930	IfStatement	if ( ( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_FINAL ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_FINAL ) )		43816	3					
ANR	43931	Condition	( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_FINAL ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_FINAL )	1524:5:49828:49942	43816	0	True				
ANR	43932	AndExpression	( Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_FINAL ) && ( Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_FINAL )		43816	0		&&			
ANR	43933	BitAndExpression	Z_LVAL ( current_access_type -> u . constant ) & ZEND_ACC_FINAL		43816	0		&			
ANR	43934	CallExpression	Z_LVAL ( current_access_type -> u . constant )		43816	0					
ANR	43935	Callee	Z_LVAL		43816	0					
ANR	43936	Identifier	Z_LVAL		43816	0					
ANR	43937	ArgumentList	current_access_type -> u . constant		43816	1					
ANR	43938	Argument	current_access_type -> u . constant		43816	0					
ANR	43939	MemberAccess	current_access_type -> u . constant		43816	0					
ANR	43940	PtrMemberAccess	current_access_type -> u		43816	0					
ANR	43941	Identifier	current_access_type		43816	0					
ANR	43942	Identifier	u		43816	1					
ANR	43943	Identifier	constant		43816	1					
ANR	43944	Identifier	ZEND_ACC_FINAL		43816	1					
ANR	43945	BitAndExpression	Z_LVAL ( new_modifier -> u . constant ) & ZEND_ACC_FINAL		43816	1		&			
ANR	43946	CallExpression	Z_LVAL ( new_modifier -> u . constant )		43816	0					
ANR	43947	Callee	Z_LVAL		43816	0					
ANR	43948	Identifier	Z_LVAL		43816	0					
ANR	43949	ArgumentList	new_modifier -> u . constant		43816	1					
ANR	43950	Argument	new_modifier -> u . constant		43816	0					
ANR	43951	MemberAccess	new_modifier -> u . constant		43816	0					
ANR	43952	PtrMemberAccess	new_modifier -> u		43816	0					
ANR	43953	Identifier	new_modifier		43816	0					
ANR	43954	Identifier	u		43816	1					
ANR	43955	Identifier	constant		43816	1					
ANR	43956	Identifier	ZEND_ACC_FINAL		43816	1					
ANR	43957	CompoundStatement		15:58:780:780	43816	1					
ANR	43958	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple final modifiers are not allowed"" )"	1526:2:49949:50029	43816	0	True				
ANR	43959	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple final modifiers are not allowed"" )"		43816	0					
ANR	43960	Callee	zend_error_noreturn		43816	0					
ANR	43961	Identifier	zend_error_noreturn		43816	0					
ANR	43962	ArgumentList	E_COMPILE_ERROR		43816	1					
ANR	43963	Argument	E_COMPILE_ERROR		43816	0					
ANR	43964	Identifier	E_COMPILE_ERROR		43816	0					
ANR	43965	Argument	"""Multiple final modifiers are not allowed"""		43816	1					
ANR	43966	PrimaryExpression	"""Multiple final modifiers are not allowed"""		43816	0					
ANR	43967	IfStatement	if ( ( ( Z_LVAL ( current_access_type -> u . constant ) | Z_LVAL ( new_modifier -> u . constant ) ) & ( ZEND_ACC_ABSTRACT | ZEND_ACC_FINAL ) ) == ( ZEND_ACC_ABSTRACT | ZEND_ACC_FINAL ) )		43816	4					
ANR	43968	Condition	( ( Z_LVAL ( current_access_type -> u . constant ) | Z_LVAL ( new_modifier -> u . constant ) ) & ( ZEND_ACC_ABSTRACT | ZEND_ACC_FINAL ) ) == ( ZEND_ACC_ABSTRACT | ZEND_ACC_FINAL )	1528:5:50039:50195	43816	0	True				
ANR	43969	EqualityExpression	( ( Z_LVAL ( current_access_type -> u . constant ) | Z_LVAL ( new_modifier -> u . constant ) ) & ( ZEND_ACC_ABSTRACT | ZEND_ACC_FINAL ) ) == ( ZEND_ACC_ABSTRACT | ZEND_ACC_FINAL )		43816	0		==			
ANR	43970	BitAndExpression	( Z_LVAL ( current_access_type -> u . constant ) | Z_LVAL ( new_modifier -> u . constant ) ) & ( ZEND_ACC_ABSTRACT | ZEND_ACC_FINAL )		43816	0		&			
ANR	43971	InclusiveOrExpression	Z_LVAL ( current_access_type -> u . constant ) | Z_LVAL ( new_modifier -> u . constant )		43816	0		|			
ANR	43972	CallExpression	Z_LVAL ( current_access_type -> u . constant )		43816	0					
ANR	43973	Callee	Z_LVAL		43816	0					
ANR	43974	Identifier	Z_LVAL		43816	0					
ANR	43975	ArgumentList	current_access_type -> u . constant		43816	1					
ANR	43976	Argument	current_access_type -> u . constant		43816	0					
ANR	43977	MemberAccess	current_access_type -> u . constant		43816	0					
ANR	43978	PtrMemberAccess	current_access_type -> u		43816	0					
ANR	43979	Identifier	current_access_type		43816	0					
ANR	43980	Identifier	u		43816	1					
ANR	43981	Identifier	constant		43816	1					
ANR	43982	CallExpression	Z_LVAL ( new_modifier -> u . constant )		43816	1					
ANR	43983	Callee	Z_LVAL		43816	0					
ANR	43984	Identifier	Z_LVAL		43816	0					
ANR	43985	ArgumentList	new_modifier -> u . constant		43816	1					
ANR	43986	Argument	new_modifier -> u . constant		43816	0					
ANR	43987	MemberAccess	new_modifier -> u . constant		43816	0					
ANR	43988	PtrMemberAccess	new_modifier -> u		43816	0					
ANR	43989	Identifier	new_modifier		43816	0					
ANR	43990	Identifier	u		43816	1					
ANR	43991	Identifier	constant		43816	1					
ANR	43992	InclusiveOrExpression	ZEND_ACC_ABSTRACT | ZEND_ACC_FINAL		43816	1		|			
ANR	43993	Identifier	ZEND_ACC_ABSTRACT		43816	0					
ANR	43994	Identifier	ZEND_ACC_FINAL		43816	1					
ANR	43995	InclusiveOrExpression	ZEND_ACC_ABSTRACT | ZEND_ACC_FINAL		43816	1		|			
ANR	43996	Identifier	ZEND_ACC_ABSTRACT		43816	0					
ANR	43997	Identifier	ZEND_ACC_FINAL		43816	1					
ANR	43998	CompoundStatement		18:164:1033:1033	43816	1					
ANR	43999	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use the final modifier on an abstract class member"" )"	1529:2:50202:50299	43816	0	True				
ANR	44000	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use the final modifier on an abstract class member"" )"		43816	0					
ANR	44001	Callee	zend_error_noreturn		43816	0					
ANR	44002	Identifier	zend_error_noreturn		43816	0					
ANR	44003	ArgumentList	E_COMPILE_ERROR		43816	1					
ANR	44004	Argument	E_COMPILE_ERROR		43816	0					
ANR	44005	Identifier	E_COMPILE_ERROR		43816	0					
ANR	44006	Argument	"""Cannot use the final modifier on an abstract class member"""		43816	1					
ANR	44007	PrimaryExpression	"""Cannot use the final modifier on an abstract class member"""		43816	0					
ANR	44008	ReturnStatement	return ( Z_LVAL ( current_access_type -> u . constant ) | Z_LVAL ( new_modifier -> u . constant ) ) ;	1531:1:50305:50388	43816	5	True				
ANR	44009	InclusiveOrExpression	Z_LVAL ( current_access_type -> u . constant ) | Z_LVAL ( new_modifier -> u . constant )		43816	0		|			
ANR	44010	CallExpression	Z_LVAL ( current_access_type -> u . constant )		43816	0					
ANR	44011	Callee	Z_LVAL		43816	0					
ANR	44012	Identifier	Z_LVAL		43816	0					
ANR	44013	ArgumentList	current_access_type -> u . constant		43816	1					
ANR	44014	Argument	current_access_type -> u . constant		43816	0					
ANR	44015	MemberAccess	current_access_type -> u . constant		43816	0					
ANR	44016	PtrMemberAccess	current_access_type -> u		43816	0					
ANR	44017	Identifier	current_access_type		43816	0					
ANR	44018	Identifier	u		43816	1					
ANR	44019	Identifier	constant		43816	1					
ANR	44020	CallExpression	Z_LVAL ( new_modifier -> u . constant )		43816	1					
ANR	44021	Callee	Z_LVAL		43816	0					
ANR	44022	Identifier	Z_LVAL		43816	0					
ANR	44023	ArgumentList	new_modifier -> u . constant		43816	1					
ANR	44024	Argument	new_modifier -> u . constant		43816	0					
ANR	44025	MemberAccess	new_modifier -> u . constant		43816	0					
ANR	44026	PtrMemberAccess	new_modifier -> u		43816	0					
ANR	44027	Identifier	new_modifier		43816	0					
ANR	44028	Identifier	u		43816	1					
ANR	44029	Identifier	constant		43816	1					
ANR	44030	ReturnType	int		43816	1					
ANR	44031	Identifier	zend_do_verify_access_types		43816	2					
ANR	44032	ParameterList	"const znode * current_access_type , const znode * new_modifier"		43816	3					
ANR	44033	Parameter	const znode * current_access_type	1510:32:49093:49124	43816	0	True				
ANR	44034	ParameterType	const znode *		43816	0					
ANR	44035	Identifier	current_access_type		43816	1					
ANR	44036	Parameter	const znode * new_modifier	1510:66:49127:49151	43816	1	True				
ANR	44037	ParameterType	const znode *		43816	0					
ANR	44038	Identifier	new_modifier		43816	1					
ANR	44039	CFGEntryNode	ENTRY		43816		True				
ANR	44040	CFGExitNode	EXIT		43816		True				
ANR	44041	Symbol	* new_modifier		43816						
ANR	44042	Symbol	new_modifier -> u		43816						
ANR	44043	Symbol	* current_access_type		43816						
ANR	44044	Symbol	ZEND_ACC_PPP_MASK		43816						
ANR	44045	Symbol	current_access_type		43816						
ANR	44046	Symbol	E_COMPILE_ERROR		43816						
ANR	44047	Symbol	current_access_type -> u		43816						
ANR	44048	Symbol	Z_LVAL		43816						
ANR	44049	Symbol	new_modifier -> u . constant		43816						
ANR	44050	Symbol	ZEND_ACC_FINAL		43816						
ANR	44051	Symbol	ZEND_ACC_ABSTRACT		43816						
ANR	44052	Symbol	current_access_type -> u . constant		43816						
ANR	44053	Symbol	ZEND_ACC_STATIC		43816						
ANR	44054	Symbol	new_modifier		43816						
ANR	44055	DeclStmt									
ANR	44056	Decl							zend_op_array	zend_op_array	op_array
ANR	44057	DeclStmt									
ANR	44058	Decl							char	char *	name
ANR	44059	DeclStmt									
ANR	44060	Decl							int	int	name_len
ANR	44061	DeclStmt									
ANR	44062	Decl							int	int	function_begin_line
ANR	44063	DeclStmt									
ANR	44064	Decl							zend_uint	zend_uint	fn_flags
ANR	44065	DeclStmt									
ANR	44066	Decl							const char	const char *	lcname
ANR	44067	DeclStmt									
ANR	44068	Decl							zend_bool	zend_bool	orig_interactive
ANR	44069	DeclStmt									
ANR	44070	Decl							zend_ulong	zend_ulong	hash
ANR	44071	DeclStmt									
ANR	44072	Decl							char	char *	class_lcname
ANR	44073	DeclStmt									
ANR	44074	Decl							zend_op	zend_op *	opline
ANR	44075	DeclStmt									
ANR	44076	Decl							zval	zval	key
ANR	44077	DeclStmt									
ANR	44078	Decl							zval	zval * *	ns_name
ANR	44079	DeclStmt									
ANR	44080	Decl							znode	znode	tmp
ANR	44081	DeclStmt									
ANR	44082	Decl							char	char *	tmp
ANR	44083	DeclStmt									
ANR	44084	Decl							zend_op	zend_op *	opline
ANR	44085	DeclStmt									
ANR	44086	Decl							zend_switch_entry	zend_switch_entry	switch_entry
ANR	44087	DeclStmt									
ANR	44088	Decl							zend_op	zend_op	dummy_opline
ANR	44089	Function	zend_do_begin_lambda_function_declaration	1794:0:64393:65418							
ANR	44090	FunctionDef	"zend_do_begin_lambda_function_declaration (znode * result , znode * function_token , int return_reference , int is_static TSRMLS_DC)"		44089	0					
ANR	44091	CompoundStatement		1795:0:64535:65418	44089	0					
ANR	44092	IdentifierDeclStatement	znode function_name ;	1796:1:64538:64566	44089	0	True				
ANR	44093	IdentifierDecl	function_name		44089	0					
ANR	44094	IdentifierDeclType	znode		44089	0					
ANR	44095	Identifier	function_name		44089	1					
ANR	44096	IdentifierDeclStatement	zend_op_array * current_op_array = CG ( active_op_array ) ;	1797:1:64569:64622	44089	1	True				
ANR	44097	IdentifierDecl	* current_op_array = CG ( active_op_array )		44089	0					
ANR	44098	IdentifierDeclType	zend_op_array *		44089	0					
ANR	44099	Identifier	current_op_array		44089	1					
ANR	44100	AssignmentExpression	* current_op_array = CG ( active_op_array )		44089	2		=			
ANR	44101	Identifier	current_op_array		44089	0					
ANR	44102	CallExpression	CG ( active_op_array )		44089	1					
ANR	44103	Callee	CG		44089	0					
ANR	44104	Identifier	CG		44089	0					
ANR	44105	ArgumentList	active_op_array		44089	1					
ANR	44106	Argument	active_op_array		44089	0					
ANR	44107	Identifier	active_op_array		44089	0					
ANR	44108	IdentifierDeclStatement	int current_op_number = get_next_op_number ( CG ( active_op_array ) ) ;	1798:1:64625:64699	44089	2	True				
ANR	44109	IdentifierDecl	current_op_number = get_next_op_number ( CG ( active_op_array ) )		44089	0					
ANR	44110	IdentifierDeclType	int		44089	0					
ANR	44111	Identifier	current_op_number		44089	1					
ANR	44112	AssignmentExpression	current_op_number = get_next_op_number ( CG ( active_op_array ) )		44089	2		=			
ANR	44113	Identifier	current_op_number		44089	0					
ANR	44114	CallExpression	get_next_op_number ( CG ( active_op_array ) )		44089	1					
ANR	44115	Callee	get_next_op_number		44089	0					
ANR	44116	Identifier	get_next_op_number		44089	0					
ANR	44117	ArgumentList	CG ( active_op_array )		44089	1					
ANR	44118	Argument	CG ( active_op_array )		44089	0					
ANR	44119	CallExpression	CG ( active_op_array )		44089	0					
ANR	44120	Callee	CG		44089	0					
ANR	44121	Identifier	CG		44089	0					
ANR	44122	ArgumentList	active_op_array		44089	1					
ANR	44123	Argument	active_op_array		44089	0					
ANR	44124	Identifier	active_op_array		44089	0					
ANR	44125	IdentifierDeclStatement	zend_op * current_op ;	1799:1:64702:64727	44089	3	True				
ANR	44126	IdentifierDecl	* current_op		44089	0					
ANR	44127	IdentifierDeclType	zend_op *		44089	0					
ANR	44128	Identifier	current_op		44089	1					
ANR	44129	ExpressionStatement	function_name . op_type = IS_CONST	1801:1:64731:64763	44089	4	True				
ANR	44130	AssignmentExpression	function_name . op_type = IS_CONST		44089	0		=			
ANR	44131	MemberAccess	function_name . op_type		44089	0					
ANR	44132	Identifier	function_name		44089	0					
ANR	44133	Identifier	op_type		44089	1					
ANR	44134	Identifier	IS_CONST		44089	1					
ANR	44135	ExpressionStatement	"ZVAL_STRINGL ( & function_name . u . constant , ""{closure}"" , sizeof ( ""{closure}"" ) - 1 , 1 )"	1802:1:64766:64844	44089	5	True				
ANR	44136	CallExpression	"ZVAL_STRINGL ( & function_name . u . constant , ""{closure}"" , sizeof ( ""{closure}"" ) - 1 , 1 )"		44089	0					
ANR	44137	Callee	ZVAL_STRINGL		44089	0					
ANR	44138	Identifier	ZVAL_STRINGL		44089	0					
ANR	44139	ArgumentList	& function_name . u . constant		44089	1					
ANR	44140	Argument	& function_name . u . constant		44089	0					
ANR	44141	UnaryOperationExpression	& function_name . u . constant		44089	0					
ANR	44142	UnaryOperator	&		44089	0					
ANR	44143	MemberAccess	function_name . u . constant		44089	1					
ANR	44144	MemberAccess	function_name . u		44089	0					
ANR	44145	Identifier	function_name		44089	0					
ANR	44146	Identifier	u		44089	1					
ANR	44147	Identifier	constant		44089	1					
ANR	44148	Argument	"""{closure}"""		44089	1					
ANR	44149	PrimaryExpression	"""{closure}"""		44089	0					
ANR	44150	Argument	"sizeof ( ""{closure}"" ) - 1"		44089	2					
ANR	44151	AdditiveExpression	"sizeof ( ""{closure}"" ) - 1"		44089	0		-			
ANR	44152	SizeofExpression	"sizeof ( ""{closure}"" )"		44089	0					
ANR	44153	Sizeof	sizeof		44089	0					
ANR	44154	PrimaryExpression	"""{closure}"""		44089	1					
ANR	44155	PrimaryExpression	1		44089	1					
ANR	44156	Argument	1		44089	3					
ANR	44157	PrimaryExpression	1		44089	0					
ANR	44158	Statement	zend_do_begin_function_declaration	1804:1:64848:64881	44089	6	True				
ANR	44159	Statement	(	1804:35:64882:64882	44089	7	True				
ANR	44160	Statement	function_token	1804:36:64883:64896	44089	8	True				
ANR	44161	Statement	","	1804:50:64897:64897	44089	9	True				
ANR	44162	Statement	&	1804:52:64899:64899	44089	10	True				
ANR	44163	Statement	function_name	1804:53:64900:64912	44089	11	True				
ANR	44164	Statement	","	1804:66:64913:64913	44089	12	True				
ANR	44165	Statement	0	1804:68:64915:64915	44089	13	True				
ANR	44166	Statement	","	1804:69:64916:64916	44089	14	True				
ANR	44167	Statement	return_reference	1804:71:64918:64933	44089	15	True				
ANR	44168	Statement	","	1804:87:64934:64934	44089	16	True				
ANR	44169	Statement	NULL	1804:89:64936:64939	44089	17	True				
ANR	44170	Statement	TSRMLS_CC	1804:94:64941:64949	44089	18	True				
ANR	44171	Statement	)	1804:103:64950:64950	44089	19	True				
ANR	44172	ExpressionStatement		1804:104:64951:64951	44089	20	True				
ANR	44173	ExpressionStatement	result -> op_type = IS_TMP_VAR	1806:1:64955:64983	44089	21	True				
ANR	44174	AssignmentExpression	result -> op_type = IS_TMP_VAR		44089	0		=			
ANR	44175	PtrMemberAccess	result -> op_type		44089	0					
ANR	44176	Identifier	result		44089	0					
ANR	44177	Identifier	op_type		44089	1					
ANR	44178	Identifier	IS_TMP_VAR		44089	1					
ANR	44179	ExpressionStatement	result -> u . op . var = get_temporary_variable ( current_op_array )	1807:1:64986:65045	44089	22	True				
ANR	44180	AssignmentExpression	result -> u . op . var = get_temporary_variable ( current_op_array )		44089	0		=			
ANR	44181	MemberAccess	result -> u . op . var		44089	0					
ANR	44182	MemberAccess	result -> u . op		44089	0					
ANR	44183	PtrMemberAccess	result -> u		44089	0					
ANR	44184	Identifier	result		44089	0					
ANR	44185	Identifier	u		44089	1					
ANR	44186	Identifier	op		44089	1					
ANR	44187	Identifier	var		44089	1					
ANR	44188	CallExpression	get_temporary_variable ( current_op_array )		44089	1					
ANR	44189	Callee	get_temporary_variable		44089	0					
ANR	44190	Identifier	get_temporary_variable		44089	0					
ANR	44191	ArgumentList	current_op_array		44089	1					
ANR	44192	Argument	current_op_array		44089	0					
ANR	44193	Identifier	current_op_array		44089	0					
ANR	44194	ExpressionStatement	current_op = & current_op_array -> opcodes [ current_op_number ]	1809:1:65049:65107	44089	23	True				
ANR	44195	AssignmentExpression	current_op = & current_op_array -> opcodes [ current_op_number ]		44089	0		=			
ANR	44196	Identifier	current_op		44089	0					
ANR	44197	UnaryOperationExpression	& current_op_array -> opcodes [ current_op_number ]		44089	1					
ANR	44198	UnaryOperator	&		44089	0					
ANR	44199	ArrayIndexing	current_op_array -> opcodes [ current_op_number ]		44089	1					
ANR	44200	PtrMemberAccess	current_op_array -> opcodes		44089	0					
ANR	44201	Identifier	current_op_array		44089	0					
ANR	44202	Identifier	opcodes		44089	1					
ANR	44203	Identifier	current_op_number		44089	1					
ANR	44204	ExpressionStatement	current_op -> opcode = ZEND_DECLARE_LAMBDA_FUNCTION	1810:1:65110:65159	44089	24	True				
ANR	44205	AssignmentExpression	current_op -> opcode = ZEND_DECLARE_LAMBDA_FUNCTION		44089	0		=			
ANR	44206	PtrMemberAccess	current_op -> opcode		44089	0					
ANR	44207	Identifier	current_op		44089	0					
ANR	44208	Identifier	opcode		44089	1					
ANR	44209	Identifier	ZEND_DECLARE_LAMBDA_FUNCTION		44089	1					
ANR	44210	ExpressionStatement	"zend_del_literal ( current_op_array , current_op -> op2 . constant )"	1811:1:65162:65222	44089	25	True				
ANR	44211	CallExpression	"zend_del_literal ( current_op_array , current_op -> op2 . constant )"		44089	0					
ANR	44212	Callee	zend_del_literal		44089	0					
ANR	44213	Identifier	zend_del_literal		44089	0					
ANR	44214	ArgumentList	current_op_array		44089	1					
ANR	44215	Argument	current_op_array		44089	0					
ANR	44216	Identifier	current_op_array		44089	0					
ANR	44217	Argument	current_op -> op2 . constant		44089	1					
ANR	44218	MemberAccess	current_op -> op2 . constant		44089	0					
ANR	44219	PtrMemberAccess	current_op -> op2		44089	0					
ANR	44220	Identifier	current_op		44089	0					
ANR	44221	Identifier	op2		44089	1					
ANR	44222	Identifier	constant		44089	1					
ANR	44223	ExpressionStatement	SET_UNUSED ( current_op -> op2 )	1812:1:65225:65252	44089	26	True				
ANR	44224	CallExpression	SET_UNUSED ( current_op -> op2 )		44089	0					
ANR	44225	Callee	SET_UNUSED		44089	0					
ANR	44226	Identifier	SET_UNUSED		44089	0					
ANR	44227	ArgumentList	current_op -> op2		44089	1					
ANR	44228	Argument	current_op -> op2		44089	0					
ANR	44229	PtrMemberAccess	current_op -> op2		44089	0					
ANR	44230	Identifier	current_op		44089	0					
ANR	44231	Identifier	op2		44089	1					
ANR	44232	ExpressionStatement	"SET_NODE ( current_op -> result , result )"	1813:1:65255:65291	44089	27	True				
ANR	44233	CallExpression	"SET_NODE ( current_op -> result , result )"		44089	0					
ANR	44234	Callee	SET_NODE		44089	0					
ANR	44235	Identifier	SET_NODE		44089	0					
ANR	44236	ArgumentList	current_op -> result		44089	1					
ANR	44237	Argument	current_op -> result		44089	0					
ANR	44238	PtrMemberAccess	current_op -> result		44089	0					
ANR	44239	Identifier	current_op		44089	0					
ANR	44240	Identifier	result		44089	1					
ANR	44241	Argument	result		44089	1					
ANR	44242	Identifier	result		44089	0					
ANR	44243	IfStatement	if ( is_static )		44089	28					
ANR	44244	Condition	is_static	1814:5:65298:65306	44089	0	True				
ANR	44245	Identifier	is_static		44089	0					
ANR	44246	CompoundStatement		20:16:773:773	44089	1					
ANR	44247	ExpressionStatement	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_STATIC	1815:2:65313:65361	44089	0	True				
ANR	44248	AssignmentExpression	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_STATIC		44089	0		|=			
ANR	44249	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		44089	0					
ANR	44250	CallExpression	CG ( active_op_array )		44089	0					
ANR	44251	Callee	CG		44089	0					
ANR	44252	Identifier	CG		44089	0					
ANR	44253	ArgumentList	active_op_array		44089	1					
ANR	44254	Argument	active_op_array		44089	0					
ANR	44255	Identifier	active_op_array		44089	0					
ANR	44256	Identifier	fn_flags		44089	1					
ANR	44257	Identifier	ZEND_ACC_STATIC		44089	1					
ANR	44258	ExpressionStatement	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_CLOSURE	1817:1:65367:65416	44089	29	True				
ANR	44259	AssignmentExpression	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_CLOSURE		44089	0		|=			
ANR	44260	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		44089	0					
ANR	44261	CallExpression	CG ( active_op_array )		44089	0					
ANR	44262	Callee	CG		44089	0					
ANR	44263	Identifier	CG		44089	0					
ANR	44264	ArgumentList	active_op_array		44089	1					
ANR	44265	Argument	active_op_array		44089	0					
ANR	44266	Identifier	active_op_array		44089	0					
ANR	44267	Identifier	fn_flags		44089	1					
ANR	44268	Identifier	ZEND_ACC_CLOSURE		44089	1					
ANR	44269	ReturnType	void		44089	1					
ANR	44270	Identifier	zend_do_begin_lambda_function_declaration		44089	2					
ANR	44271	ParameterList	"znode * result , znode * function_token , int return_reference , int is_static TSRMLS_DC"		44089	3					
ANR	44272	Parameter	znode * result	1794:47:64440:64452	44089	0	True				
ANR	44273	ParameterType	znode *		44089	0					
ANR	44274	Identifier	result		44089	1					
ANR	44275	Parameter	znode * function_token	1794:62:64455:64475	44089	1	True				
ANR	44276	ParameterType	znode *		44089	0					
ANR	44277	Identifier	function_token		44089	1					
ANR	44278	Parameter	int return_reference	1794:85:64478:64497	44089	2	True				
ANR	44279	ParameterType	int		44089	0					
ANR	44280	Identifier	return_reference		44089	1					
ANR	44281	Parameter	int is_static TSRMLS_DC	1794:107:64500:64522	44089	3	True				
ANR	44282	ParameterType	int is_static		44089	0					
ANR	44283	Identifier	TSRMLS_DC		44089	1					
ANR	44284	CFGEntryNode	ENTRY		44089		True				
ANR	44285	CFGExitNode	EXIT		44089		True				
ANR	44286	Symbol	current_op -> opcode		44089						
ANR	44287	Symbol	result -> u . op . var		44089						
ANR	44288	Symbol	get_temporary_variable		44089						
ANR	44289	Symbol	current_op -> op2 . constant		44089						
ANR	44290	Symbol	* CG		44089						
ANR	44291	Symbol	result -> u . op		44089						
ANR	44292	Symbol	result -> op_type		44089						
ANR	44293	Symbol	TSRMLS_DC		44089						
ANR	44294	Symbol	result -> u		44089						
ANR	44295	Symbol	* current_op		44089						
ANR	44296	Symbol	result		44089						
ANR	44297	Symbol	current_op_number		44089						
ANR	44298	Symbol	* result		44089						
ANR	44299	Symbol	is_static		44089						
ANR	44300	Symbol	function_name . op_type		44089						
ANR	44301	Symbol	current_op_array		44089						
ANR	44302	Symbol	current_op -> result		44089						
ANR	44303	Symbol	ZEND_ACC_STATIC		44089						
ANR	44304	Symbol	& function_name . u		44089						
ANR	44305	Symbol	current_op_array -> opcodes		44089						
ANR	44306	Symbol	& function_name . u . constant		44089						
ANR	44307	Symbol	return_reference		44089						
ANR	44308	Symbol	IS_TMP_VAR		44089						
ANR	44309	Symbol	IS_CONST		44089						
ANR	44310	Symbol	current_op -> op2		44089						
ANR	44311	Symbol	CG		44089						
ANR	44312	Symbol	active_op_array		44089						
ANR	44313	Symbol	& function_name		44089						
ANR	44314	Symbol	function_name . u		44089						
ANR	44315	Symbol	CG ( active_op_array ) -> fn_flags		44089						
ANR	44316	Symbol	ZEND_DECLARE_LAMBDA_FUNCTION		44089						
ANR	44317	Symbol	function_token		44089						
ANR	44318	Symbol	current_op		44089						
ANR	44319	Symbol	ZEND_ACC_CLOSURE		44089						
ANR	44320	Symbol	* current_op_array		44089						
ANR	44321	Symbol	function_name		44089						
ANR	44322	Symbol	get_next_op_number		44089						
ANR	44323	DeclStmt									
ANR	44324	Decl							zend_op	zend_op *	opline
ANR	44325	DeclStmt									
ANR	44326	Decl							char	char [ 16 ]	lcname
ANR	44327	DeclStmt									
ANR	44328	Decl							int	int	name_len
ANR	44329	Function	zend_do_receive_param	1865:0:67046:72256							
ANR	44330	FunctionDef	"zend_do_receive_param (zend_uchar op , znode * varname , const znode * initialization , znode * class_type , zend_uchar pass_by_reference , zend_bool is_variadic TSRMLS_DC)"		44329	0					
ANR	44331	CompoundStatement		1866:0:67225:72256	44329	0					
ANR	44332	IdentifierDeclStatement	zend_op * opline ;	1867:1:67228:67243	44329	0	True				
ANR	44333	IdentifierDecl	* opline		44329	0					
ANR	44334	IdentifierDeclType	zend_op *		44329	0					
ANR	44335	Identifier	opline		44329	1					
ANR	44336	IdentifierDeclStatement	zend_arg_info * cur_arg_info ;	1868:1:67246:67273	44329	1	True				
ANR	44337	IdentifierDecl	* cur_arg_info		44329	0					
ANR	44338	IdentifierDeclType	zend_arg_info *		44329	0					
ANR	44339	Identifier	cur_arg_info		44329	1					
ANR	44340	IdentifierDeclStatement	znode var ;	1869:1:67276:67285	44329	2	True				
ANR	44341	IdentifierDecl	var		44329	0					
ANR	44342	IdentifierDeclType	znode		44329	0					
ANR	44343	Identifier	var		44329	1					
ANR	44344	Statement	if	1871:1:67289:67290	44329	3	True				
ANR	44345	Statement	(	1871:4:67292:67292	44329	4	True				
ANR	44346	Statement	zend_is_auto_global	1871:5:67293:67311	44329	5	True				
ANR	44347	Statement	(	1871:24:67312:67312	44329	6	True				
ANR	44348	Statement	Z_STRVAL	1871:25:67313:67320	44329	7	True				
ANR	44349	Statement	(	1871:33:67321:67321	44329	8	True				
ANR	44350	Statement	varname	1871:34:67322:67328	44329	9	True				
ANR	44351	Statement	->	1871:41:67329:67330	44329	10	True				
ANR	44352	Statement	u	1871:43:67331:67331	44329	11	True				
ANR	44353	Statement	.	1871:44:67332:67332	44329	12	True				
ANR	44354	Statement	constant	1871:45:67333:67340	44329	13	True				
ANR	44355	Statement	)	1871:53:67341:67341	44329	14	True				
ANR	44356	Statement	","	1871:54:67342:67342	44329	15	True				
ANR	44357	Statement	Z_STRLEN	1871:56:67344:67351	44329	16	True				
ANR	44358	Statement	(	1871:64:67352:67352	44329	17	True				
ANR	44359	Statement	varname	1871:65:67353:67359	44329	18	True				
ANR	44360	Statement	->	1871:72:67360:67361	44329	19	True				
ANR	44361	Statement	u	1871:74:67362:67362	44329	20	True				
ANR	44362	Statement	.	1871:75:67363:67363	44329	21	True				
ANR	44363	Statement	constant	1871:76:67364:67371	44329	22	True				
ANR	44364	Statement	)	1871:84:67372:67372	44329	23	True				
ANR	44365	Statement	TSRMLS_CC	1871:86:67374:67382	44329	24	True				
ANR	44366	Statement	)	1871:95:67383:67383	44329	25	True				
ANR	44367	Statement	)	1871:96:67384:67384	44329	26	True				
ANR	44368	CompoundStatement		6:98:160:160	44329	27					
ANR	44369	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign auto-global variable %s"" , Z_STRVAL ( varname -> u . constant ) )"	1872:2:67390:67501	44329	0	True				
ANR	44370	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign auto-global variable %s"" , Z_STRVAL ( varname -> u . constant ) )"		44329	0					
ANR	44371	Callee	zend_error_noreturn		44329	0					
ANR	44372	Identifier	zend_error_noreturn		44329	0					
ANR	44373	ArgumentList	E_COMPILE_ERROR		44329	1					
ANR	44374	Argument	E_COMPILE_ERROR		44329	0					
ANR	44375	Identifier	E_COMPILE_ERROR		44329	0					
ANR	44376	Argument	"""Cannot re-assign auto-global variable %s"""		44329	1					
ANR	44377	PrimaryExpression	"""Cannot re-assign auto-global variable %s"""		44329	0					
ANR	44378	Argument	Z_STRVAL ( varname -> u . constant )		44329	2					
ANR	44379	CallExpression	Z_STRVAL ( varname -> u . constant )		44329	0					
ANR	44380	Callee	Z_STRVAL		44329	0					
ANR	44381	Identifier	Z_STRVAL		44329	0					
ANR	44382	ArgumentList	varname -> u . constant		44329	1					
ANR	44383	Argument	varname -> u . constant		44329	0					
ANR	44384	MemberAccess	varname -> u . constant		44329	0					
ANR	44385	PtrMemberAccess	varname -> u		44329	0					
ANR	44386	Identifier	varname		44329	0					
ANR	44387	Identifier	u		44329	1					
ANR	44388	Identifier	constant		44329	1					
ANR	44389	ReturnType	void		44329	1					
ANR	44390	Identifier	zend_do_receive_param		44329	2					
ANR	44391	ParameterList	"zend_uchar op , znode * varname , const znode * initialization , znode * class_type , zend_uchar pass_by_reference , zend_bool is_variadic TSRMLS_DC"		44329	3					
ANR	44392	Parameter	zend_uchar op	1865:27:67073:67085	44329	0	True				
ANR	44393	ParameterType	zend_uchar		44329	0					
ANR	44394	Identifier	op		44329	1					
ANR	44395	Parameter	znode * varname	1865:42:67088:67101	44329	1	True				
ANR	44396	ParameterType	znode *		44329	0					
ANR	44397	Identifier	varname		44329	1					
ANR	44398	Parameter	const znode * initialization	1865:58:67104:67130	44329	2	True				
ANR	44399	ParameterType	const znode *		44329	0					
ANR	44400	Identifier	initialization		44329	1					
ANR	44401	Parameter	znode * class_type	1865:87:67133:67149	44329	3	True				
ANR	44402	ParameterType	znode *		44329	0					
ANR	44403	Identifier	class_type		44329	1					
ANR	44404	Parameter	zend_uchar pass_by_reference	1865:106:67152:67179	44329	4	True				
ANR	44405	ParameterType	zend_uchar		44329	0					
ANR	44406	Identifier	pass_by_reference		44329	1					
ANR	44407	Parameter	zend_bool is_variadic TSRMLS_DC	1865:136:67182:67212	44329	5	True				
ANR	44408	ParameterType	zend_bool is_variadic		44329	0					
ANR	44409	Identifier	TSRMLS_DC		44329	1					
ANR	44410	CFGEntryNode	ENTRY		44329		True				
ANR	44411	CFGExitNode	EXIT		44329		True				
ANR	44412	Symbol	op		44329						
ANR	44413	Symbol	* varname		44329						
ANR	44414	Symbol	varname -> u		44329						
ANR	44415	Symbol	var		44329						
ANR	44416	Symbol	E_COMPILE_ERROR		44329						
ANR	44417	Symbol	pass_by_reference		44329						
ANR	44418	Symbol	varname		44329						
ANR	44419	Symbol	TSRMLS_DC		44329						
ANR	44420	Symbol	cur_arg_info		44329						
ANR	44421	Symbol	class_type		44329						
ANR	44422	Symbol	opline		44329						
ANR	44423	Symbol	varname -> u . constant		44329						
ANR	44424	Symbol	Z_STRVAL		44329						
ANR	44425	Symbol	initialization		44329						
ANR	44426	Function	zend_do_begin_function_call	1979:0:72269:73751							
ANR	44427	FunctionDef	"zend_do_begin_function_call (znode * function_name , zend_bool check_namespace TSRMLS_DC)"		44426	0					
ANR	44428	CompoundStatement		1980:0:72370:73751	44426	0					
ANR	44429	IdentifierDeclStatement	zend_function * function ;	1981:1:72373:72396	44426	0	True				
ANR	44430	IdentifierDecl	* function		44426	0					
ANR	44431	IdentifierDeclType	zend_function *		44426	0					
ANR	44432	Identifier	function		44426	1					
ANR	44433	IdentifierDeclStatement	char * lcname ;	1982:1:72399:72411	44426	1	True				
ANR	44434	IdentifierDecl	* lcname		44426	0					
ANR	44435	IdentifierDeclType	char *		44426	0					
ANR	44436	Identifier	lcname		44426	1					
ANR	44437	IdentifierDeclStatement	"char * is_compound = memchr ( Z_STRVAL ( function_name -> u . constant ) , '\\\\' , Z_STRLEN ( function_name -> u . constant ) ) ;"	1983:1:72414:72520	44426	2	True				
ANR	44438	IdentifierDecl	"* is_compound = memchr ( Z_STRVAL ( function_name -> u . constant ) , '\\\\' , Z_STRLEN ( function_name -> u . constant ) )"		44426	0					
ANR	44439	IdentifierDeclType	char *		44426	0					
ANR	44440	Identifier	is_compound		44426	1					
ANR	44441	AssignmentExpression	"* is_compound = memchr ( Z_STRVAL ( function_name -> u . constant ) , '\\\\' , Z_STRLEN ( function_name -> u . constant ) )"		44426	2		=			
ANR	44442	Identifier	is_compound		44426	0					
ANR	44443	CallExpression	"memchr ( Z_STRVAL ( function_name -> u . constant ) , '\\\\' , Z_STRLEN ( function_name -> u . constant ) )"		44426	1					
ANR	44444	Callee	memchr		44426	0					
ANR	44445	Identifier	memchr		44426	0					
ANR	44446	ArgumentList	Z_STRVAL ( function_name -> u . constant )		44426	1					
ANR	44447	Argument	Z_STRVAL ( function_name -> u . constant )		44426	0					
ANR	44448	CallExpression	Z_STRVAL ( function_name -> u . constant )		44426	0					
ANR	44449	Callee	Z_STRVAL		44426	0					
ANR	44450	Identifier	Z_STRVAL		44426	0					
ANR	44451	ArgumentList	function_name -> u . constant		44426	1					
ANR	44452	Argument	function_name -> u . constant		44426	0					
ANR	44453	MemberAccess	function_name -> u . constant		44426	0					
ANR	44454	PtrMemberAccess	function_name -> u		44426	0					
ANR	44455	Identifier	function_name		44426	0					
ANR	44456	Identifier	u		44426	1					
ANR	44457	Identifier	constant		44426	1					
ANR	44458	Argument	'\\\\'		44426	1					
ANR	44459	PrimaryExpression	'\\\\'		44426	0					
ANR	44460	Argument	Z_STRLEN ( function_name -> u . constant )		44426	2					
ANR	44461	CallExpression	Z_STRLEN ( function_name -> u . constant )		44426	0					
ANR	44462	Callee	Z_STRLEN		44426	0					
ANR	44463	Identifier	Z_STRLEN		44426	0					
ANR	44464	ArgumentList	function_name -> u . constant		44426	1					
ANR	44465	Argument	function_name -> u . constant		44426	0					
ANR	44466	MemberAccess	function_name -> u . constant		44426	0					
ANR	44467	PtrMemberAccess	function_name -> u		44426	0					
ANR	44468	Identifier	function_name		44426	0					
ANR	44469	Identifier	u		44426	1					
ANR	44470	Identifier	constant		44426	1					
ANR	44471	Statement	zend_resolve_function_name	1985:1:72524:72549	44426	3	True				
ANR	44472	Statement	(	1985:27:72550:72550	44426	4	True				
ANR	44473	Statement	function_name	1985:28:72551:72563	44426	5	True				
ANR	44474	Statement	","	1985:41:72564:72564	44426	6	True				
ANR	44475	Statement	&	1985:43:72566:72566	44426	7	True				
ANR	44476	Statement	check_namespace	1985:44:72567:72581	44426	8	True				
ANR	44477	Statement	TSRMLS_CC	1985:60:72583:72591	44426	9	True				
ANR	44478	Statement	)	1985:69:72592:72592	44426	10	True				
ANR	44479	ExpressionStatement		1985:70:72593:72593	44426	11	True				
ANR	44480	IfStatement	if ( check_namespace && CG ( current_namespace ) && ! is_compound )		44426	12					
ANR	44481	Condition	check_namespace && CG ( current_namespace ) && ! is_compound	1987:5:72601:72656	44426	0	True				
ANR	44482	AndExpression	check_namespace && CG ( current_namespace ) && ! is_compound		44426	0		&&			
ANR	44483	Identifier	check_namespace		44426	0					
ANR	44484	AndExpression	CG ( current_namespace ) && ! is_compound		44426	1		&&			
ANR	44485	CallExpression	CG ( current_namespace )		44426	0					
ANR	44486	Callee	CG		44426	0					
ANR	44487	Identifier	CG		44426	0					
ANR	44488	ArgumentList	current_namespace		44426	1					
ANR	44489	Argument	current_namespace		44426	0					
ANR	44490	Identifier	current_namespace		44426	0					
ANR	44491	UnaryOperationExpression	! is_compound		44426	1					
ANR	44492	UnaryOperator	!		44426	0					
ANR	44493	Identifier	is_compound		44426	1					
ANR	44494	CompoundStatement		8:63:288:288	44426	1					
ANR	44495	Statement	zend_do_begin_dynamic_function_call	1993:3:72859:72893	44426	0	True				
ANR	44496	Statement	(	1993:38:72894:72894	44426	1	True				
ANR	44497	Statement	function_name	1993:39:72895:72907	44426	2	True				
ANR	44498	Statement	","	1993:52:72908:72908	44426	3	True				
ANR	44499	Statement	1	1993:54:72910:72910	44426	4	True				
ANR	44500	Statement	TSRMLS_CC	1993:56:72912:72920	44426	5	True				
ANR	44501	Statement	)	1993:65:72921:72921	44426	6	True				
ANR	44502	ExpressionStatement		1993:66:72922:72922	44426	7	True				
ANR	44503	ReturnStatement	return 1 ;	1994:3:72927:72935	44426	8	True				
ANR	44504	PrimaryExpression	1		44426	0					
ANR	44505	ExpressionStatement	"lcname = zend_str_tolower_dup ( Z_STRVAL ( function_name -> u . constant ) , Z_STRLEN ( function_name -> u . constant ) )"	1997:1:72942:73045	44426	13	True				
ANR	44506	AssignmentExpression	"lcname = zend_str_tolower_dup ( Z_STRVAL ( function_name -> u . constant ) , Z_STRLEN ( function_name -> u . constant ) )"		44426	0		=			
ANR	44507	Identifier	lcname		44426	0					
ANR	44508	CallExpression	"zend_str_tolower_dup ( Z_STRVAL ( function_name -> u . constant ) , Z_STRLEN ( function_name -> u . constant ) )"		44426	1					
ANR	44509	Callee	zend_str_tolower_dup		44426	0					
ANR	44510	Identifier	zend_str_tolower_dup		44426	0					
ANR	44511	ArgumentList	Z_STRVAL ( function_name -> u . constant )		44426	1					
ANR	44512	Argument	Z_STRVAL ( function_name -> u . constant )		44426	0					
ANR	44513	CallExpression	Z_STRVAL ( function_name -> u . constant )		44426	0					
ANR	44514	Callee	Z_STRVAL		44426	0					
ANR	44515	Identifier	Z_STRVAL		44426	0					
ANR	44516	ArgumentList	function_name -> u . constant		44426	1					
ANR	44517	Argument	function_name -> u . constant		44426	0					
ANR	44518	MemberAccess	function_name -> u . constant		44426	0					
ANR	44519	PtrMemberAccess	function_name -> u		44426	0					
ANR	44520	Identifier	function_name		44426	0					
ANR	44521	Identifier	u		44426	1					
ANR	44522	Identifier	constant		44426	1					
ANR	44523	Argument	Z_STRLEN ( function_name -> u . constant )		44426	1					
ANR	44524	CallExpression	Z_STRLEN ( function_name -> u . constant )		44426	0					
ANR	44525	Callee	Z_STRLEN		44426	0					
ANR	44526	Identifier	Z_STRLEN		44426	0					
ANR	44527	ArgumentList	function_name -> u . constant		44426	1					
ANR	44528	Argument	function_name -> u . constant		44426	0					
ANR	44529	MemberAccess	function_name -> u . constant		44426	0					
ANR	44530	PtrMemberAccess	function_name -> u		44426	0					
ANR	44531	Identifier	function_name		44426	0					
ANR	44532	Identifier	u		44426	1					
ANR	44533	Identifier	constant		44426	1					
ANR	44534	IfStatement	"if ( ( zend_hash_find ( CG ( function_table ) , lcname , Z_STRLEN ( function_name -> u . constant ) + 1 , ( void * * ) & function ) == FAILURE ) || ( ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) && ( function -> type == ZEND_INTERNAL_FUNCTION ) ) )"		44426	14					
ANR	44535	Condition	"( zend_hash_find ( CG ( function_table ) , lcname , Z_STRLEN ( function_name -> u . constant ) + 1 , ( void * * ) & function ) == FAILURE ) || ( ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) && ( function -> type == ZEND_INTERNAL_FUNCTION ) )"	1998:5:73052:73285	44426	0	True				
ANR	44536	OrExpression	"( zend_hash_find ( CG ( function_table ) , lcname , Z_STRLEN ( function_name -> u . constant ) + 1 , ( void * * ) & function ) == FAILURE ) || ( ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) && ( function -> type == ZEND_INTERNAL_FUNCTION ) )"		44426	0		||			
ANR	44537	EqualityExpression	"zend_hash_find ( CG ( function_table ) , lcname , Z_STRLEN ( function_name -> u . constant ) + 1 , ( void * * ) & function ) == FAILURE"		44426	0		==			
ANR	44538	CallExpression	"zend_hash_find ( CG ( function_table ) , lcname , Z_STRLEN ( function_name -> u . constant ) + 1 , ( void * * ) & function )"		44426	0					
ANR	44539	Callee	zend_hash_find		44426	0					
ANR	44540	Identifier	zend_hash_find		44426	0					
ANR	44541	ArgumentList	CG ( function_table )		44426	1					
ANR	44542	Argument	CG ( function_table )		44426	0					
ANR	44543	CallExpression	CG ( function_table )		44426	0					
ANR	44544	Callee	CG		44426	0					
ANR	44545	Identifier	CG		44426	0					
ANR	44546	ArgumentList	function_table		44426	1					
ANR	44547	Argument	function_table		44426	0					
ANR	44548	Identifier	function_table		44426	0					
ANR	44549	Argument	lcname		44426	1					
ANR	44550	Identifier	lcname		44426	0					
ANR	44551	Argument	Z_STRLEN ( function_name -> u . constant ) + 1		44426	2					
ANR	44552	AdditiveExpression	Z_STRLEN ( function_name -> u . constant ) + 1		44426	0		+			
ANR	44553	CallExpression	Z_STRLEN ( function_name -> u . constant )		44426	0					
ANR	44554	Callee	Z_STRLEN		44426	0					
ANR	44555	Identifier	Z_STRLEN		44426	0					
ANR	44556	ArgumentList	function_name -> u . constant		44426	1					
ANR	44557	Argument	function_name -> u . constant		44426	0					
ANR	44558	MemberAccess	function_name -> u . constant		44426	0					
ANR	44559	PtrMemberAccess	function_name -> u		44426	0					
ANR	44560	Identifier	function_name		44426	0					
ANR	44561	Identifier	u		44426	1					
ANR	44562	Identifier	constant		44426	1					
ANR	44563	PrimaryExpression	1		44426	1					
ANR	44564	Argument	( void * * ) & function		44426	3					
ANR	44565	CastExpression	( void * * ) & function		44426	0					
ANR	44566	CastTarget	void * *		44426	0					
ANR	44567	UnaryOperationExpression	& function		44426	1					
ANR	44568	UnaryOperator	&		44426	0					
ANR	44569	Identifier	function		44426	1					
ANR	44570	Identifier	FAILURE		44426	1					
ANR	44571	AndExpression	( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) && ( function -> type == ZEND_INTERNAL_FUNCTION )		44426	1		&&			
ANR	44572	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS		44426	0		&			
ANR	44573	CallExpression	CG ( compiler_options )		44426	0					
ANR	44574	Callee	CG		44426	0					
ANR	44575	Identifier	CG		44426	0					
ANR	44576	ArgumentList	compiler_options		44426	1					
ANR	44577	Argument	compiler_options		44426	0					
ANR	44578	Identifier	compiler_options		44426	0					
ANR	44579	Identifier	ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS		44426	1					
ANR	44580	EqualityExpression	function -> type == ZEND_INTERNAL_FUNCTION		44426	1		==			
ANR	44581	PtrMemberAccess	function -> type		44426	0					
ANR	44582	Identifier	function		44426	0					
ANR	44583	Identifier	type		44426	1					
ANR	44584	Identifier	ZEND_INTERNAL_FUNCTION		44426	1					
ANR	44585	CompoundStatement		21:48:917:917	44426	1					
ANR	44586	Statement	zend_do_begin_dynamic_function_call	2001:4:73294:73328	44426	0	True				
ANR	44587	Statement	(	2001:39:73329:73329	44426	1	True				
ANR	44588	Statement	function_name	2001:40:73330:73342	44426	2	True				
ANR	44589	Statement	","	2001:53:73343:73343	44426	3	True				
ANR	44590	Statement	0	2001:55:73345:73345	44426	4	True				
ANR	44591	Statement	TSRMLS_CC	2001:57:73347:73355	44426	5	True				
ANR	44592	Statement	)	2001:66:73356:73356	44426	6	True				
ANR	44593	ExpressionStatement		2001:67:73357:73357	44426	7	True				
ANR	44594	ExpressionStatement	efree ( lcname )	2002:4:73363:73376	44426	8	True				
ANR	44595	CallExpression	efree ( lcname )		44426	0					
ANR	44596	Callee	efree		44426	0					
ANR	44597	Identifier	efree		44426	0					
ANR	44598	ArgumentList	lcname		44426	1					
ANR	44599	Argument	lcname		44426	0					
ANR	44600	Identifier	lcname		44426	0					
ANR	44601	ReturnStatement	return 1 ;	2003:4:73382:73390	44426	9	True				
ANR	44602	PrimaryExpression	1		44426	0					
ANR	44603	ExpressionStatement	efree ( Z_STRVAL ( function_name -> u . constant ) )	2005:1:73411:73453	44426	15	True				
ANR	44604	CallExpression	efree ( Z_STRVAL ( function_name -> u . constant ) )		44426	0					
ANR	44605	Callee	efree		44426	0					
ANR	44606	Identifier	efree		44426	0					
ANR	44607	ArgumentList	Z_STRVAL ( function_name -> u . constant )		44426	1					
ANR	44608	Argument	Z_STRVAL ( function_name -> u . constant )		44426	0					
ANR	44609	CallExpression	Z_STRVAL ( function_name -> u . constant )		44426	0					
ANR	44610	Callee	Z_STRVAL		44426	0					
ANR	44611	Identifier	Z_STRVAL		44426	0					
ANR	44612	ArgumentList	function_name -> u . constant		44426	1					
ANR	44613	Argument	function_name -> u . constant		44426	0					
ANR	44614	MemberAccess	function_name -> u . constant		44426	0					
ANR	44615	PtrMemberAccess	function_name -> u		44426	0					
ANR	44616	Identifier	function_name		44426	0					
ANR	44617	Identifier	u		44426	1					
ANR	44618	Identifier	constant		44426	1					
ANR	44619	ExpressionStatement	Z_STRVAL ( function_name -> u . constant ) = lcname	2006:1:73456:73500	44426	16	True				
ANR	44620	AssignmentExpression	Z_STRVAL ( function_name -> u . constant ) = lcname		44426	0		=			
ANR	44621	CallExpression	Z_STRVAL ( function_name -> u . constant )		44426	0					
ANR	44622	Callee	Z_STRVAL		44426	0					
ANR	44623	Identifier	Z_STRVAL		44426	0					
ANR	44624	ArgumentList	function_name -> u . constant		44426	1					
ANR	44625	Argument	function_name -> u . constant		44426	0					
ANR	44626	MemberAccess	function_name -> u . constant		44426	0					
ANR	44627	PtrMemberAccess	function_name -> u		44426	0					
ANR	44628	Identifier	function_name		44426	0					
ANR	44629	Identifier	u		44426	1					
ANR	44630	Identifier	constant		44426	1					
ANR	44631	Identifier	lcname		44426	1					
ANR	44632	Statement	zend_push_function_call_entry	2008:1:73504:73532	44426	17	True				
ANR	44633	Statement	(	2008:30:73533:73533	44426	18	True				
ANR	44634	Statement	function	2008:31:73534:73541	44426	19	True				
ANR	44635	Statement	TSRMLS_CC	2008:40:73543:73551	44426	20	True				
ANR	44636	Statement	)	2008:49:73552:73552	44426	21	True				
ANR	44637	ExpressionStatement		2008:50:73553:73553	44426	22	True				
ANR	44638	IfStatement	if ( CG ( context ) . nested_calls + 1 > CG ( active_op_array ) -> nested_calls )		44426	23					
ANR	44639	Condition	CG ( context ) . nested_calls + 1 > CG ( active_op_array ) -> nested_calls	2009:5:73560:73623	44426	0	True				
ANR	44640	RelationalExpression	CG ( context ) . nested_calls + 1 > CG ( active_op_array ) -> nested_calls		44426	0		>			
ANR	44641	AdditiveExpression	CG ( context ) . nested_calls + 1		44426	0		+			
ANR	44642	MemberAccess	CG ( context ) . nested_calls		44426	0					
ANR	44643	CallExpression	CG ( context )		44426	0					
ANR	44644	Callee	CG		44426	0					
ANR	44645	Identifier	CG		44426	0					
ANR	44646	ArgumentList	context		44426	1					
ANR	44647	Argument	context		44426	0					
ANR	44648	Identifier	context		44426	0					
ANR	44649	Identifier	nested_calls		44426	1					
ANR	44650	PrimaryExpression	1		44426	1					
ANR	44651	PtrMemberAccess	CG ( active_op_array ) -> nested_calls		44426	1					
ANR	44652	CallExpression	CG ( active_op_array )		44426	0					
ANR	44653	Callee	CG		44426	0					
ANR	44654	Identifier	CG		44426	0					
ANR	44655	ArgumentList	active_op_array		44426	1					
ANR	44656	Argument	active_op_array		44426	0					
ANR	44657	Identifier	active_op_array		44426	0					
ANR	44658	Identifier	nested_calls		44426	1					
ANR	44659	CompoundStatement		30:71:1255:1255	44426	1					
ANR	44660	ExpressionStatement	CG ( active_op_array ) -> nested_calls = CG ( context ) . nested_calls + 1	2010:2:73630:73694	44426	0	True				
ANR	44661	AssignmentExpression	CG ( active_op_array ) -> nested_calls = CG ( context ) . nested_calls + 1		44426	0		=			
ANR	44662	PtrMemberAccess	CG ( active_op_array ) -> nested_calls		44426	0					
ANR	44663	CallExpression	CG ( active_op_array )		44426	0					
ANR	44664	Callee	CG		44426	0					
ANR	44665	Identifier	CG		44426	0					
ANR	44666	ArgumentList	active_op_array		44426	1					
ANR	44667	Argument	active_op_array		44426	0					
ANR	44668	Identifier	active_op_array		44426	0					
ANR	44669	Identifier	nested_calls		44426	1					
ANR	44670	AdditiveExpression	CG ( context ) . nested_calls + 1		44426	1		+			
ANR	44671	MemberAccess	CG ( context ) . nested_calls		44426	0					
ANR	44672	CallExpression	CG ( context )		44426	0					
ANR	44673	Callee	CG		44426	0					
ANR	44674	Identifier	CG		44426	0					
ANR	44675	ArgumentList	context		44426	1					
ANR	44676	Argument	context		44426	0					
ANR	44677	Identifier	context		44426	0					
ANR	44678	Identifier	nested_calls		44426	1					
ANR	44679	PrimaryExpression	1		44426	1					
ANR	44680	ExpressionStatement	zend_do_extended_fcall_begin ( TSRMLS_C )	2012:1:73700:73738	44426	24	True				
ANR	44681	CallExpression	zend_do_extended_fcall_begin ( TSRMLS_C )		44426	0					
ANR	44682	Callee	zend_do_extended_fcall_begin		44426	0					
ANR	44683	Identifier	zend_do_extended_fcall_begin		44426	0					
ANR	44684	ArgumentList	TSRMLS_C		44426	1					
ANR	44685	Argument	TSRMLS_C		44426	0					
ANR	44686	Identifier	TSRMLS_C		44426	0					
ANR	44687	ReturnStatement	return 0 ;	2013:1:73741:73749	44426	25	True				
ANR	44688	PrimaryExpression	0		44426	0					
ANR	44689	ReturnType	int		44426	1					
ANR	44690	Identifier	zend_do_begin_function_call		44426	2					
ANR	44691	ParameterList	"znode * function_name , zend_bool check_namespace TSRMLS_DC"		44426	3					
ANR	44692	Parameter	znode * function_name	1979:32:72301:72320	44426	0	True				
ANR	44693	ParameterType	znode *		44426	0					
ANR	44694	Identifier	function_name		44426	1					
ANR	44695	Parameter	zend_bool check_namespace TSRMLS_DC	1979:54:72323:72357	44426	1	True				
ANR	44696	ParameterType	zend_bool check_namespace		44426	0					
ANR	44697	Identifier	TSRMLS_DC		44426	1					
ANR	44698	CFGEntryNode	ENTRY		44426		True				
ANR	44699	CFGExitNode	EXIT		44426		True				
ANR	44700	Symbol	CG ( active_op_array ) -> nested_calls		44426						
ANR	44701	Symbol	* function_name		44426						
ANR	44702	Symbol	* CG		44426						
ANR	44703	Symbol	Z_STRLEN		44426						
ANR	44704	Symbol	TSRMLS_DC		44426						
ANR	44705	Symbol	function -> type		44426						
ANR	44706	Symbol	ZEND_INTERNAL_FUNCTION		44426						
ANR	44707	Symbol	zend_hash_find		44426						
ANR	44708	Symbol	compiler_options		44426						
ANR	44709	Symbol	function_name -> u		44426						
ANR	44710	Symbol	CG ( context ) . nested_calls		44426						
ANR	44711	Symbol	TSRMLS_C		44426						
ANR	44712	Symbol	& function		44426						
ANR	44713	Symbol	function		44426						
ANR	44714	Symbol	is_compound		44426						
ANR	44715	Symbol	Z_STRVAL		44426						
ANR	44716	Symbol	context		44426						
ANR	44717	Symbol	zend_str_tolower_dup		44426						
ANR	44718	Symbol	CG		44426						
ANR	44719	Symbol	active_op_array		44426						
ANR	44720	Symbol	* function		44426						
ANR	44721	Symbol	function_name -> u . constant		44426						
ANR	44722	Symbol	FAILURE		44426						
ANR	44723	Symbol	lcname		44426						
ANR	44724	Symbol	ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS		44426						
ANR	44725	Symbol	current_namespace		44426						
ANR	44726	Symbol	function_name		44426						
ANR	44727	Symbol	check_namespace		44426						
ANR	44728	Symbol	memchr		44426						
ANR	44729	Symbol	function_table		44426						
ANR	44730	DeclStmt									
ANR	44731	Decl							zend_op	zend_op *	last_op
ANR	44732	DeclStmt									
ANR	44733	Decl							int	int	last_op_number
ANR	44734	DeclStmt									
ANR	44735	Decl							zval	zval	name
ANR	44736	DeclStmt									
ANR	44737	Decl							zend_op	zend_op *	opline
ANR	44738	DeclStmt									
ANR	44739	Decl							zend_op	zend_op *	opline
ANR	44740	Function	zend_do_begin_dynamic_function_call	2085:0:76383:77632							
ANR	44741	FunctionDef	"zend_do_begin_dynamic_function_call (znode * function_name , int ns_call TSRMLS_DC)"		44740	0					
ANR	44742	CompoundStatement		2086:0:76479:77632	44740	0					
ANR	44743	IdentifierDeclStatement	zend_op * opline ;	2087:1:76482:76497	44740	0	True				
ANR	44744	IdentifierDecl	* opline		44740	0					
ANR	44745	IdentifierDeclType	zend_op *		44740	0					
ANR	44746	Identifier	opline		44740	1					
ANR	44747	Statement	opline	2089:1:76501:76506	44740	1	True				
ANR	44748	Statement	=	2089:8:76508:76508	44740	2	True				
ANR	44749	Statement	get_next_op	2089:10:76510:76520	44740	3	True				
ANR	44750	Statement	(	2089:21:76521:76521	44740	4	True				
ANR	44751	Statement	CG	2089:22:76522:76523	44740	5	True				
ANR	44752	Statement	(	2089:24:76524:76524	44740	6	True				
ANR	44753	Statement	active_op_array	2089:25:76525:76539	44740	7	True				
ANR	44754	Statement	)	2089:40:76540:76540	44740	8	True				
ANR	44755	Statement	TSRMLS_CC	2089:42:76542:76550	44740	9	True				
ANR	44756	Statement	)	2089:51:76551:76551	44740	10	True				
ANR	44757	ExpressionStatement		2089:52:76552:76552	44740	11	True				
ANR	44758	IfStatement	if ( ns_call )		44740	12					
ANR	44759	Condition	ns_call	2090:5:76559:76565	44740	0	True				
ANR	44760	Identifier	ns_call		44740	0					
ANR	44761	CompoundStatement		5:14:88:88	44740	1					
ANR	44762	ExpressionStatement	opline -> opcode = ZEND_INIT_NS_FCALL_BY_NAME	2093:2:76678:76721	44740	0	True				
ANR	44763	AssignmentExpression	opline -> opcode = ZEND_INIT_NS_FCALL_BY_NAME		44740	0		=			
ANR	44764	PtrMemberAccess	opline -> opcode		44740	0					
ANR	44765	Identifier	opline		44740	0					
ANR	44766	Identifier	opcode		44740	1					
ANR	44767	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		44740	1					
ANR	44768	ExpressionStatement	opline -> result . num = CG ( context ) . nested_calls	2094:2:76725:76770	44740	1	True				
ANR	44769	AssignmentExpression	opline -> result . num = CG ( context ) . nested_calls		44740	0		=			
ANR	44770	MemberAccess	opline -> result . num		44740	0					
ANR	44771	PtrMemberAccess	opline -> result		44740	0					
ANR	44772	Identifier	opline		44740	0					
ANR	44773	Identifier	result		44740	1					
ANR	44774	Identifier	num		44740	1					
ANR	44775	MemberAccess	CG ( context ) . nested_calls		44740	1					
ANR	44776	CallExpression	CG ( context )		44740	0					
ANR	44777	Callee	CG		44740	0					
ANR	44778	Identifier	CG		44740	0					
ANR	44779	ArgumentList	context		44740	1					
ANR	44780	Argument	context		44740	0					
ANR	44781	Identifier	context		44740	0					
ANR	44782	Identifier	nested_calls		44740	1					
ANR	44783	ExpressionStatement	SET_UNUSED ( opline -> op1 )	2095:2:76774:76797	44740	2	True				
ANR	44784	CallExpression	SET_UNUSED ( opline -> op1 )		44740	0					
ANR	44785	Callee	SET_UNUSED		44740	0					
ANR	44786	Identifier	SET_UNUSED		44740	0					
ANR	44787	ArgumentList	opline -> op1		44740	1					
ANR	44788	Argument	opline -> op1		44740	0					
ANR	44789	PtrMemberAccess	opline -> op1		44740	0					
ANR	44790	Identifier	opline		44740	0					
ANR	44791	Identifier	op1		44740	1					
ANR	44792	ExpressionStatement	opline -> op2_type = IS_CONST	2096:2:76801:76828	44740	3	True				
ANR	44793	AssignmentExpression	opline -> op2_type = IS_CONST		44740	0		=			
ANR	44794	PtrMemberAccess	opline -> op2_type		44740	0					
ANR	44795	Identifier	opline		44740	0					
ANR	44796	Identifier	op2_type		44740	1					
ANR	44797	Identifier	IS_CONST		44740	1					
ANR	44798	Statement	opline	2097:2:76832:76837	44740	4	True				
ANR	44799	Statement	->	2097:8:76838:76839	44740	5	True				
ANR	44800	Statement	op2	2097:10:76840:76842	44740	6	True				
ANR	44801	Statement	.	2097:13:76843:76843	44740	7	True				
ANR	44802	Statement	constant	2097:14:76844:76851	44740	8	True				
ANR	44803	Statement	=	2097:23:76853:76853	44740	9	True				
ANR	44804	Statement	zend_add_ns_func_name_literal	2097:25:76855:76883	44740	10	True				
ANR	44805	Statement	(	2097:54:76884:76884	44740	11	True				
ANR	44806	Statement	CG	2097:55:76885:76886	44740	12	True				
ANR	44807	Statement	(	2097:57:76887:76887	44740	13	True				
ANR	44808	Statement	active_op_array	2097:58:76888:76902	44740	14	True				
ANR	44809	Statement	)	2097:73:76903:76903	44740	15	True				
ANR	44810	Statement	","	2097:74:76904:76904	44740	16	True				
ANR	44811	Statement	&	2097:76:76906:76906	44740	17	True				
ANR	44812	Statement	function_name	2097:77:76907:76919	44740	18	True				
ANR	44813	Statement	->	2097:90:76920:76921	44740	19	True				
ANR	44814	Statement	u	2097:92:76922:76922	44740	20	True				
ANR	44815	Statement	.	2097:93:76923:76923	44740	21	True				
ANR	44816	Statement	constant	2097:94:76924:76931	44740	22	True				
ANR	44817	Statement	TSRMLS_CC	2097:103:76933:76941	44740	23	True				
ANR	44818	Statement	)	2097:112:76942:76942	44740	24	True				
ANR	44819	ExpressionStatement		2097:113:76943:76943	44740	25	True				
ANR	44820	ExpressionStatement	GET_CACHE_SLOT ( opline -> op2 . constant )	2098:2:76947:76983	44740	26	True				
ANR	44821	CallExpression	GET_CACHE_SLOT ( opline -> op2 . constant )		44740	0					
ANR	44822	Callee	GET_CACHE_SLOT		44740	0					
ANR	44823	Identifier	GET_CACHE_SLOT		44740	0					
ANR	44824	ArgumentList	opline -> op2 . constant		44740	1					
ANR	44825	Argument	opline -> op2 . constant		44740	0					
ANR	44826	MemberAccess	opline -> op2 . constant		44740	0					
ANR	44827	PtrMemberAccess	opline -> op2		44740	0					
ANR	44828	Identifier	opline		44740	0					
ANR	44829	Identifier	op2		44740	1					
ANR	44830	Identifier	constant		44740	1					
ANR	44831	ElseStatement	else		44740	0					
ANR	44832	CompoundStatement		14:8:513:513	44740	0					
ANR	44833	ExpressionStatement	opline -> opcode = ZEND_INIT_FCALL_BY_NAME	2100:2:76997:77037	44740	0	True				
ANR	44834	AssignmentExpression	opline -> opcode = ZEND_INIT_FCALL_BY_NAME		44740	0		=			
ANR	44835	PtrMemberAccess	opline -> opcode		44740	0					
ANR	44836	Identifier	opline		44740	0					
ANR	44837	Identifier	opcode		44740	1					
ANR	44838	Identifier	ZEND_INIT_FCALL_BY_NAME		44740	1					
ANR	44839	ExpressionStatement	opline -> result . num = CG ( context ) . nested_calls	2101:2:77041:77086	44740	1	True				
ANR	44840	AssignmentExpression	opline -> result . num = CG ( context ) . nested_calls		44740	0		=			
ANR	44841	MemberAccess	opline -> result . num		44740	0					
ANR	44842	PtrMemberAccess	opline -> result		44740	0					
ANR	44843	Identifier	opline		44740	0					
ANR	44844	Identifier	result		44740	1					
ANR	44845	Identifier	num		44740	1					
ANR	44846	MemberAccess	CG ( context ) . nested_calls		44740	1					
ANR	44847	CallExpression	CG ( context )		44740	0					
ANR	44848	Callee	CG		44740	0					
ANR	44849	Identifier	CG		44740	0					
ANR	44850	ArgumentList	context		44740	1					
ANR	44851	Argument	context		44740	0					
ANR	44852	Identifier	context		44740	0					
ANR	44853	Identifier	nested_calls		44740	1					
ANR	44854	ExpressionStatement	SET_UNUSED ( opline -> op1 )	2102:2:77090:77113	44740	2	True				
ANR	44855	CallExpression	SET_UNUSED ( opline -> op1 )		44740	0					
ANR	44856	Callee	SET_UNUSED		44740	0					
ANR	44857	Identifier	SET_UNUSED		44740	0					
ANR	44858	ArgumentList	opline -> op1		44740	1					
ANR	44859	Argument	opline -> op1		44740	0					
ANR	44860	PtrMemberAccess	opline -> op1		44740	0					
ANR	44861	Identifier	opline		44740	0					
ANR	44862	Identifier	op1		44740	1					
ANR	44863	IfStatement	if ( function_name -> op_type == IS_CONST )		44740	3					
ANR	44864	Condition	function_name -> op_type == IS_CONST	2103:6:77121:77154	44740	0	True				
ANR	44865	EqualityExpression	function_name -> op_type == IS_CONST		44740	0		==			
ANR	44866	PtrMemberAccess	function_name -> op_type		44740	0					
ANR	44867	Identifier	function_name		44740	0					
ANR	44868	Identifier	op_type		44740	1					
ANR	44869	Identifier	IS_CONST		44740	1					
ANR	44870	CompoundStatement		18:42:677:677	44740	1					
ANR	44871	ExpressionStatement	opline -> op2_type = IS_CONST	2104:3:77162:77189	44740	0	True				
ANR	44872	AssignmentExpression	opline -> op2_type = IS_CONST		44740	0		=			
ANR	44873	PtrMemberAccess	opline -> op2_type		44740	0					
ANR	44874	Identifier	opline		44740	0					
ANR	44875	Identifier	op2_type		44740	1					
ANR	44876	Identifier	IS_CONST		44740	1					
ANR	44877	Statement	opline	2105:3:77194:77199	44740	1	True				
ANR	44878	Statement	->	2105:9:77200:77201	44740	2	True				
ANR	44879	Statement	op2	2105:11:77202:77204	44740	3	True				
ANR	44880	Statement	.	2105:14:77205:77205	44740	4	True				
ANR	44881	Statement	constant	2105:15:77206:77213	44740	5	True				
ANR	44882	Statement	=	2105:24:77215:77215	44740	6	True				
ANR	44883	Statement	zend_add_func_name_literal	2105:26:77217:77242	44740	7	True				
ANR	44884	Statement	(	2105:52:77243:77243	44740	8	True				
ANR	44885	Statement	CG	2105:53:77244:77245	44740	9	True				
ANR	44886	Statement	(	2105:55:77246:77246	44740	10	True				
ANR	44887	Statement	active_op_array	2105:56:77247:77261	44740	11	True				
ANR	44888	Statement	)	2105:71:77262:77262	44740	12	True				
ANR	44889	Statement	","	2105:72:77263:77263	44740	13	True				
ANR	44890	Statement	&	2105:74:77265:77265	44740	14	True				
ANR	44891	Statement	function_name	2105:75:77266:77278	44740	15	True				
ANR	44892	Statement	->	2105:88:77279:77280	44740	16	True				
ANR	44893	Statement	u	2105:90:77281:77281	44740	17	True				
ANR	44894	Statement	.	2105:91:77282:77282	44740	18	True				
ANR	44895	Statement	constant	2105:92:77283:77290	44740	19	True				
ANR	44896	Statement	TSRMLS_CC	2105:101:77292:77300	44740	20	True				
ANR	44897	Statement	)	2105:110:77301:77301	44740	21	True				
ANR	44898	ExpressionStatement		2105:111:77302:77302	44740	22	True				
ANR	44899	ExpressionStatement	GET_CACHE_SLOT ( opline -> op2 . constant )	2106:3:77307:77343	44740	23	True				
ANR	44900	CallExpression	GET_CACHE_SLOT ( opline -> op2 . constant )		44740	0					
ANR	44901	Callee	GET_CACHE_SLOT		44740	0					
ANR	44902	Identifier	GET_CACHE_SLOT		44740	0					
ANR	44903	ArgumentList	opline -> op2 . constant		44740	1					
ANR	44904	Argument	opline -> op2 . constant		44740	0					
ANR	44905	MemberAccess	opline -> op2 . constant		44740	0					
ANR	44906	PtrMemberAccess	opline -> op2		44740	0					
ANR	44907	Identifier	opline		44740	0					
ANR	44908	Identifier	op2		44740	1					
ANR	44909	Identifier	constant		44740	1					
ANR	44910	ElseStatement	else		44740	0					
ANR	44911	CompoundStatement		22:9:874:874	44740	0					
ANR	44912	ExpressionStatement	"SET_NODE ( opline -> op2 , function_name )"	2108:3:77359:77395	44740	0	True				
ANR	44913	CallExpression	"SET_NODE ( opline -> op2 , function_name )"		44740	0					
ANR	44914	Callee	SET_NODE		44740	0					
ANR	44915	Identifier	SET_NODE		44740	0					
ANR	44916	ArgumentList	opline -> op2		44740	1					
ANR	44917	Argument	opline -> op2		44740	0					
ANR	44918	PtrMemberAccess	opline -> op2		44740	0					
ANR	44919	Identifier	opline		44740	0					
ANR	44920	Identifier	op2		44740	1					
ANR	44921	Argument	function_name		44740	1					
ANR	44922	Identifier	function_name		44740	0					
ANR	44923	Statement	zend_push_function_call_entry	2112:1:77406:77434	44740	13	True				
ANR	44924	Statement	(	2112:30:77435:77435	44740	14	True				
ANR	44925	Statement	NULL	2112:31:77436:77439	44740	15	True				
ANR	44926	Statement	TSRMLS_CC	2112:36:77441:77449	44740	16	True				
ANR	44927	Statement	)	2112:45:77450:77450	44740	17	True				
ANR	44928	ExpressionStatement		2112:46:77451:77451	44740	18	True				
ANR	44929	IfStatement	if ( ++ CG ( context ) . nested_calls > CG ( active_op_array ) -> nested_calls )		44740	19					
ANR	44930	Condition	++ CG ( context ) . nested_calls > CG ( active_op_array ) -> nested_calls	2113:5:77458:77519	44740	0	True				
ANR	44931	RelationalExpression	++ CG ( context ) . nested_calls > CG ( active_op_array ) -> nested_calls		44740	0		>			
ANR	44932	UnaryExpression	++ CG ( context ) . nested_calls		44740	0					
ANR	44933	IncDec	++		44740	0					
ANR	44934	MemberAccess	CG ( context ) . nested_calls		44740	1					
ANR	44935	CallExpression	CG ( context )		44740	0					
ANR	44936	Callee	CG		44740	0					
ANR	44937	Identifier	CG		44740	0					
ANR	44938	ArgumentList	context		44740	1					
ANR	44939	Argument	context		44740	0					
ANR	44940	Identifier	context		44740	0					
ANR	44941	Identifier	nested_calls		44740	1					
ANR	44942	PtrMemberAccess	CG ( active_op_array ) -> nested_calls		44740	1					
ANR	44943	CallExpression	CG ( active_op_array )		44740	0					
ANR	44944	Callee	CG		44740	0					
ANR	44945	Identifier	CG		44740	0					
ANR	44946	ArgumentList	active_op_array		44740	1					
ANR	44947	Argument	active_op_array		44740	0					
ANR	44948	Identifier	active_op_array		44740	0					
ANR	44949	Identifier	nested_calls		44740	1					
ANR	44950	CompoundStatement		28:69:1042:1042	44740	1					
ANR	44951	ExpressionStatement	CG ( active_op_array ) -> nested_calls = CG ( context ) . nested_calls	2114:2:77526:77586	44740	0	True				
ANR	44952	AssignmentExpression	CG ( active_op_array ) -> nested_calls = CG ( context ) . nested_calls		44740	0		=			
ANR	44953	PtrMemberAccess	CG ( active_op_array ) -> nested_calls		44740	0					
ANR	44954	CallExpression	CG ( active_op_array )		44740	0					
ANR	44955	Callee	CG		44740	0					
ANR	44956	Identifier	CG		44740	0					
ANR	44957	ArgumentList	active_op_array		44740	1					
ANR	44958	Argument	active_op_array		44740	0					
ANR	44959	Identifier	active_op_array		44740	0					
ANR	44960	Identifier	nested_calls		44740	1					
ANR	44961	MemberAccess	CG ( context ) . nested_calls		44740	1					
ANR	44962	CallExpression	CG ( context )		44740	0					
ANR	44963	Callee	CG		44740	0					
ANR	44964	Identifier	CG		44740	0					
ANR	44965	ArgumentList	context		44740	1					
ANR	44966	Argument	context		44740	0					
ANR	44967	Identifier	context		44740	0					
ANR	44968	Identifier	nested_calls		44740	1					
ANR	44969	ExpressionStatement	zend_do_extended_fcall_begin ( TSRMLS_C )	2116:1:77592:77630	44740	20	True				
ANR	44970	CallExpression	zend_do_extended_fcall_begin ( TSRMLS_C )		44740	0					
ANR	44971	Callee	zend_do_extended_fcall_begin		44740	0					
ANR	44972	Identifier	zend_do_extended_fcall_begin		44740	0					
ANR	44973	ArgumentList	TSRMLS_C		44740	1					
ANR	44974	Argument	TSRMLS_C		44740	0					
ANR	44975	Identifier	TSRMLS_C		44740	0					
ANR	44976	ReturnType	void		44740	1					
ANR	44977	Identifier	zend_do_begin_dynamic_function_call		44740	2					
ANR	44978	ParameterList	"znode * function_name , int ns_call TSRMLS_DC"		44740	3					
ANR	44979	Parameter	znode * function_name	2085:41:76424:76443	44740	0	True				
ANR	44980	ParameterType	znode *		44740	0					
ANR	44981	Identifier	function_name		44740	1					
ANR	44982	Parameter	int ns_call TSRMLS_DC	2085:63:76446:76466	44740	1	True				
ANR	44983	ParameterType	int ns_call		44740	0					
ANR	44984	Identifier	TSRMLS_DC		44740	1					
ANR	44985	CFGEntryNode	ENTRY		44740		True				
ANR	44986	CFGExitNode	EXIT		44740		True				
ANR	44987	Symbol	opline -> op1		44740						
ANR	44988	Symbol	CG ( active_op_array ) -> nested_calls		44740						
ANR	44989	Symbol	opline -> op2		44740						
ANR	44990	Symbol	IS_CONST		44740						
ANR	44991	Symbol	* function_name		44740						
ANR	44992	Symbol	ZEND_INIT_NS_FCALL_BY_NAME		44740						
ANR	44993	Symbol	CG		44740						
ANR	44994	Symbol	active_op_array		44740						
ANR	44995	Symbol	* CG		44740						
ANR	44996	Symbol	ns_call		44740						
ANR	44997	Symbol	TSRMLS_DC		44740						
ANR	44998	Symbol	opline -> result		44740						
ANR	44999	Symbol	opline		44740						
ANR	45000	Symbol	CG ( context ) . nested_calls		44740						
ANR	45001	Symbol	TSRMLS_C		44740						
ANR	45002	Symbol	* opline		44740						
ANR	45003	Symbol	opline -> opcode		44740						
ANR	45004	Symbol	function_name		44740						
ANR	45005	Symbol	context		44740						
ANR	45006	Symbol	opline -> op2 . constant		44740						
ANR	45007	Symbol	opline -> op2_type		44740						
ANR	45008	Symbol	opline -> result . num		44740						
ANR	45009	Symbol	function_name -> op_type		44740						
ANR	45010	Symbol	ZEND_INIT_FCALL_BY_NAME		44740						
ANR	45011	DeclStmt									
ANR	45012	Decl							znode	znode	tmp
ANR	45013	DeclStmt									
ANR	45014	Decl							int	int	len
ANR	45015	DeclStmt									
ANR	45016	Decl							zval	zval * *	ns
ANR	45017	DeclStmt									
ANR	45018	Decl							char	char *	lookup_name
ANR	45019	Decl							char	char *	compound
ANR	45020	Function	zend_do_resolve_class_name	2204:0:80914:82934							
ANR	45021	FunctionDef	"zend_do_resolve_class_name (znode * result , znode * class_name , int is_static TSRMLS_DC)"		45020	0					
ANR	45022	CompoundStatement		2205:0:81015:82934	45020	0					
ANR	45023	IdentifierDeclStatement	char * lcname ;	2206:1:81018:81030	45020	0	True				
ANR	45024	IdentifierDecl	* lcname		45020	0					
ANR	45025	IdentifierDeclType	char *		45020	0					
ANR	45026	Identifier	lcname		45020	1					
ANR	45027	IdentifierDeclStatement	int lctype ;	2207:1:81033:81043	45020	1	True				
ANR	45028	IdentifierDecl	lctype		45020	0					
ANR	45029	IdentifierDeclType	int		45020	0					
ANR	45030	Identifier	lctype		45020	1					
ANR	45031	IdentifierDeclStatement	znode constant_name ;	2208:1:81046:81065	45020	2	True				
ANR	45032	IdentifierDecl	constant_name		45020	0					
ANR	45033	IdentifierDeclType	znode		45020	0					
ANR	45034	Identifier	constant_name		45020	1					
ANR	45035	ExpressionStatement	"lcname = zend_str_tolower_dup ( Z_STRVAL ( class_name -> u . constant ) , Z_STRLEN ( class_name -> u . constant ) )"	2210:1:81069:81166	45020	3	True				
ANR	45036	AssignmentExpression	"lcname = zend_str_tolower_dup ( Z_STRVAL ( class_name -> u . constant ) , Z_STRLEN ( class_name -> u . constant ) )"		45020	0		=			
ANR	45037	Identifier	lcname		45020	0					
ANR	45038	CallExpression	"zend_str_tolower_dup ( Z_STRVAL ( class_name -> u . constant ) , Z_STRLEN ( class_name -> u . constant ) )"		45020	1					
ANR	45039	Callee	zend_str_tolower_dup		45020	0					
ANR	45040	Identifier	zend_str_tolower_dup		45020	0					
ANR	45041	ArgumentList	Z_STRVAL ( class_name -> u . constant )		45020	1					
ANR	45042	Argument	Z_STRVAL ( class_name -> u . constant )		45020	0					
ANR	45043	CallExpression	Z_STRVAL ( class_name -> u . constant )		45020	0					
ANR	45044	Callee	Z_STRVAL		45020	0					
ANR	45045	Identifier	Z_STRVAL		45020	0					
ANR	45046	ArgumentList	class_name -> u . constant		45020	1					
ANR	45047	Argument	class_name -> u . constant		45020	0					
ANR	45048	MemberAccess	class_name -> u . constant		45020	0					
ANR	45049	PtrMemberAccess	class_name -> u		45020	0					
ANR	45050	Identifier	class_name		45020	0					
ANR	45051	Identifier	u		45020	1					
ANR	45052	Identifier	constant		45020	1					
ANR	45053	Argument	Z_STRLEN ( class_name -> u . constant )		45020	1					
ANR	45054	CallExpression	Z_STRLEN ( class_name -> u . constant )		45020	0					
ANR	45055	Callee	Z_STRLEN		45020	0					
ANR	45056	Identifier	Z_STRLEN		45020	0					
ANR	45057	ArgumentList	class_name -> u . constant		45020	1					
ANR	45058	Argument	class_name -> u . constant		45020	0					
ANR	45059	MemberAccess	class_name -> u . constant		45020	0					
ANR	45060	PtrMemberAccess	class_name -> u		45020	0					
ANR	45061	Identifier	class_name		45020	0					
ANR	45062	Identifier	u		45020	1					
ANR	45063	Identifier	constant		45020	1					
ANR	45064	ExpressionStatement	"lctype = zend_get_class_fetch_type ( lcname , strlen ( lcname ) )"	2211:1:81169:81227	45020	4	True				
ANR	45065	AssignmentExpression	"lctype = zend_get_class_fetch_type ( lcname , strlen ( lcname ) )"		45020	0		=			
ANR	45066	Identifier	lctype		45020	0					
ANR	45067	CallExpression	"zend_get_class_fetch_type ( lcname , strlen ( lcname ) )"		45020	1					
ANR	45068	Callee	zend_get_class_fetch_type		45020	0					
ANR	45069	Identifier	zend_get_class_fetch_type		45020	0					
ANR	45070	ArgumentList	lcname		45020	1					
ANR	45071	Argument	lcname		45020	0					
ANR	45072	Identifier	lcname		45020	0					
ANR	45073	Argument	strlen ( lcname )		45020	1					
ANR	45074	CallExpression	strlen ( lcname )		45020	0					
ANR	45075	Callee	strlen		45020	0					
ANR	45076	Identifier	strlen		45020	0					
ANR	45077	ArgumentList	lcname		45020	1					
ANR	45078	Argument	lcname		45020	0					
ANR	45079	Identifier	lcname		45020	0					
ANR	45080	SwitchStatement	switch ( lctype )		45020	5					
ANR	45081	Condition	lctype	2212:9:81238:81243	45020	0	True				
ANR	45082	Identifier	lctype		45020	0					
ANR	45083	CompoundStatement		8:17:230:230	45020	1					
ANR	45084	Label	case ZEND_FETCH_CLASS_SELF :	2213:2:81250:81276	45020	0	True				
ANR	45085	Identifier	ZEND_FETCH_CLASS_SELF		45020	0					
ANR	45086	IfStatement	if ( ! CG ( active_class_entry ) )		45020	1					
ANR	45087	Condition	! CG ( active_class_entry )	2214:7:81285:81307	45020	0	True				
ANR	45088	UnaryOperationExpression	! CG ( active_class_entry )		45020	0					
ANR	45089	UnaryOperator	!		45020	0					
ANR	45090	CallExpression	CG ( active_class_entry )		45020	1					
ANR	45091	Callee	CG		45020	0					
ANR	45092	Identifier	CG		45020	0					
ANR	45093	ArgumentList	active_class_entry		45020	1					
ANR	45094	Argument	active_class_entry		45020	0					
ANR	45095	Identifier	active_class_entry		45020	0					
ANR	45096	CompoundStatement		10:32:294:294	45020	1					
ANR	45097	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot access self::class when no class scope is active"" )"	2215:4:81316:81411	45020	0	True				
ANR	45098	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot access self::class when no class scope is active"" )"		45020	0					
ANR	45099	Callee	zend_error_noreturn		45020	0					
ANR	45100	Identifier	zend_error_noreturn		45020	0					
ANR	45101	ArgumentList	E_COMPILE_ERROR		45020	1					
ANR	45102	Argument	E_COMPILE_ERROR		45020	0					
ANR	45103	Identifier	E_COMPILE_ERROR		45020	0					
ANR	45104	Argument	"""Cannot access self::class when no class scope is active"""		45020	1					
ANR	45105	PrimaryExpression	"""Cannot access self::class when no class scope is active"""		45020	0					
ANR	45106	IfStatement	if ( ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) == ZEND_ACC_TRAIT )		45020	2					
ANR	45107	Condition	( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) == ZEND_ACC_TRAIT	2217:7:81425:81493	45020	0	True				
ANR	45108	EqualityExpression	( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) == ZEND_ACC_TRAIT		45020	0		==			
ANR	45109	BitAndExpression	CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT		45020	0		&			
ANR	45110	PtrMemberAccess	CG ( active_class_entry ) -> ce_flags		45020	0					
ANR	45111	CallExpression	CG ( active_class_entry )		45020	0					
ANR	45112	Callee	CG		45020	0					
ANR	45113	Identifier	CG		45020	0					
ANR	45114	ArgumentList	active_class_entry		45020	1					
ANR	45115	Argument	active_class_entry		45020	0					
ANR	45116	Identifier	active_class_entry		45020	0					
ANR	45117	Identifier	ce_flags		45020	1					
ANR	45118	Identifier	ZEND_ACC_TRAIT		45020	1					
ANR	45119	Identifier	ZEND_ACC_TRAIT		45020	1					
ANR	45120	CompoundStatement		13:78:480:480	45020	1					
ANR	45121	ExpressionStatement	zval_dtor ( & class_name -> u . constant )	2218:4:81502:81536	45020	0	True				
ANR	45122	CallExpression	zval_dtor ( & class_name -> u . constant )		45020	0					
ANR	45123	Callee	zval_dtor		45020	0					
ANR	45124	Identifier	zval_dtor		45020	0					
ANR	45125	ArgumentList	& class_name -> u . constant		45020	1					
ANR	45126	Argument	& class_name -> u . constant		45020	0					
ANR	45127	UnaryOperationExpression	& class_name -> u . constant		45020	0					
ANR	45128	UnaryOperator	&		45020	0					
ANR	45129	MemberAccess	class_name -> u . constant		45020	1					
ANR	45130	PtrMemberAccess	class_name -> u		45020	0					
ANR	45131	Identifier	class_name		45020	0					
ANR	45132	Identifier	u		45020	1					
ANR	45133	Identifier	constant		45020	1					
ANR	45134	ExpressionStatement	constant_name . op_type = IS_CONST	2219:4:81542:81574	45020	1	True				
ANR	45135	AssignmentExpression	constant_name . op_type = IS_CONST		45020	0		=			
ANR	45136	MemberAccess	constant_name . op_type		45020	0					
ANR	45137	Identifier	constant_name		45020	0					
ANR	45138	Identifier	op_type		45020	1					
ANR	45139	Identifier	IS_CONST		45020	1					
ANR	45140	ExpressionStatement	"ZVAL_STRINGL ( & constant_name . u . constant , ""__CLASS__"" , sizeof ( ""__CLASS__"" ) - 1 , 1 )"	2220:4:81580:81658	45020	2	True				
ANR	45141	CallExpression	"ZVAL_STRINGL ( & constant_name . u . constant , ""__CLASS__"" , sizeof ( ""__CLASS__"" ) - 1 , 1 )"		45020	0					
ANR	45142	Callee	ZVAL_STRINGL		45020	0					
ANR	45143	Identifier	ZVAL_STRINGL		45020	0					
ANR	45144	ArgumentList	& constant_name . u . constant		45020	1					
ANR	45145	Argument	& constant_name . u . constant		45020	0					
ANR	45146	UnaryOperationExpression	& constant_name . u . constant		45020	0					
ANR	45147	UnaryOperator	&		45020	0					
ANR	45148	MemberAccess	constant_name . u . constant		45020	1					
ANR	45149	MemberAccess	constant_name . u		45020	0					
ANR	45150	Identifier	constant_name		45020	0					
ANR	45151	Identifier	u		45020	1					
ANR	45152	Identifier	constant		45020	1					
ANR	45153	Argument	"""__CLASS__"""		45020	1					
ANR	45154	PrimaryExpression	"""__CLASS__"""		45020	0					
ANR	45155	Argument	"sizeof ( ""__CLASS__"" ) - 1"		45020	2					
ANR	45156	AdditiveExpression	"sizeof ( ""__CLASS__"" ) - 1"		45020	0		-			
ANR	45157	SizeofExpression	"sizeof ( ""__CLASS__"" )"		45020	0					
ANR	45158	Sizeof	sizeof		45020	0					
ANR	45159	PrimaryExpression	"""__CLASS__"""		45020	1					
ANR	45160	PrimaryExpression	1		45020	1					
ANR	45161	Argument	1		45020	3					
ANR	45162	PrimaryExpression	1		45020	0					
ANR	45163	IfStatement	if ( is_static )		45020	3					
ANR	45164	Condition	is_static	2221:8:81668:81676	45020	0	True				
ANR	45165	Identifier	is_static		45020	0					
ANR	45166	CompoundStatement		17:19:663:663	45020	1					
ANR	45167	ExpressionStatement	* result = constant_name	2222:5:81686:81709	45020	0	True				
ANR	45168	AssignmentExpression	* result = constant_name		45020	0		=			
ANR	45169	UnaryOperationExpression	* result		45020	0					
ANR	45170	UnaryOperator	*		45020	0					
ANR	45171	Identifier	result		45020	1					
ANR	45172	Identifier	constant_name		45020	1					
ANR	45173	ExpressionStatement	result -> u . constant . type = IS_CONSTANT	2223:5:81716:81753	45020	1	True				
ANR	45174	AssignmentExpression	result -> u . constant . type = IS_CONSTANT		45020	0		=			
ANR	45175	MemberAccess	result -> u . constant . type		45020	0					
ANR	45176	MemberAccess	result -> u . constant		45020	0					
ANR	45177	PtrMemberAccess	result -> u		45020	0					
ANR	45178	Identifier	result		45020	0					
ANR	45179	Identifier	u		45020	1					
ANR	45180	Identifier	constant		45020	1					
ANR	45181	Identifier	type		45020	1					
ANR	45182	Identifier	IS_CONSTANT		45020	1					
ANR	45183	ElseStatement	else		45020	0					
ANR	45184	CompoundStatement		20:11:750:750	45020	0					
ANR	45185	Statement	zend_do_fetch_constant	2225:5:81773:81794	45020	0	True				
ANR	45186	Statement	(	2225:27:81795:81795	45020	1	True				
ANR	45187	Statement	result	2225:28:81796:81801	45020	2	True				
ANR	45188	Statement	","	2225:34:81802:81802	45020	3	True				
ANR	45189	Statement	NULL	2225:36:81804:81807	45020	4	True				
ANR	45190	Statement	","	2225:40:81808:81808	45020	5	True				
ANR	45191	Statement	&	2225:42:81810:81810	45020	6	True				
ANR	45192	Statement	constant_name	2225:43:81811:81823	45020	7	True				
ANR	45193	Statement	","	2225:56:81824:81824	45020	8	True				
ANR	45194	Statement	ZEND_RT	2225:58:81826:81832	45020	9	True				
ANR	45195	Statement	","	2225:65:81833:81833	45020	10	True				
ANR	45196	Statement	1	2225:67:81835:81835	45020	11	True				
ANR	45197	Statement	TSRMLS_CC	2225:69:81837:81845	45020	12	True				
ANR	45198	Statement	)	2225:78:81846:81846	45020	13	True				
ANR	45199	ExpressionStatement		2225:79:81847:81847	45020	14	True				
ANR	45200	BreakStatement	break ;	2227:4:81859:81864	45020	4	True				
ANR	45201	ExpressionStatement	zval_dtor ( & class_name -> u . constant )	2229:3:81874:81908	45020	3	True				
ANR	45202	CallExpression	zval_dtor ( & class_name -> u . constant )		45020	0					
ANR	45203	Callee	zval_dtor		45020	0					
ANR	45204	Identifier	zval_dtor		45020	0					
ANR	45205	ArgumentList	& class_name -> u . constant		45020	1					
ANR	45206	Argument	& class_name -> u . constant		45020	0					
ANR	45207	UnaryOperationExpression	& class_name -> u . constant		45020	0					
ANR	45208	UnaryOperator	&		45020	0					
ANR	45209	MemberAccess	class_name -> u . constant		45020	1					
ANR	45210	PtrMemberAccess	class_name -> u		45020	0					
ANR	45211	Identifier	class_name		45020	0					
ANR	45212	Identifier	u		45020	1					
ANR	45213	Identifier	constant		45020	1					
ANR	45214	ExpressionStatement	class_name -> op_type = IS_CONST	2230:3:81913:81943	45020	4	True				
ANR	45215	AssignmentExpression	class_name -> op_type = IS_CONST		45020	0		=			
ANR	45216	PtrMemberAccess	class_name -> op_type		45020	0					
ANR	45217	Identifier	class_name		45020	0					
ANR	45218	Identifier	op_type		45020	1					
ANR	45219	Identifier	IS_CONST		45020	1					
ANR	45220	ExpressionStatement	"ZVAL_STRINGL ( & class_name -> u . constant , CG ( active_class_entry ) -> name , CG ( active_class_entry ) -> name_length , 1 )"	2231:3:81948:82055	45020	5	True				
ANR	45221	CallExpression	"ZVAL_STRINGL ( & class_name -> u . constant , CG ( active_class_entry ) -> name , CG ( active_class_entry ) -> name_length , 1 )"		45020	0					
ANR	45222	Callee	ZVAL_STRINGL		45020	0					
ANR	45223	Identifier	ZVAL_STRINGL		45020	0					
ANR	45224	ArgumentList	& class_name -> u . constant		45020	1					
ANR	45225	Argument	& class_name -> u . constant		45020	0					
ANR	45226	UnaryOperationExpression	& class_name -> u . constant		45020	0					
ANR	45227	UnaryOperator	&		45020	0					
ANR	45228	MemberAccess	class_name -> u . constant		45020	1					
ANR	45229	PtrMemberAccess	class_name -> u		45020	0					
ANR	45230	Identifier	class_name		45020	0					
ANR	45231	Identifier	u		45020	1					
ANR	45232	Identifier	constant		45020	1					
ANR	45233	Argument	CG ( active_class_entry ) -> name		45020	1					
ANR	45234	PtrMemberAccess	CG ( active_class_entry ) -> name		45020	0					
ANR	45235	CallExpression	CG ( active_class_entry )		45020	0					
ANR	45236	Callee	CG		45020	0					
ANR	45237	Identifier	CG		45020	0					
ANR	45238	ArgumentList	active_class_entry		45020	1					
ANR	45239	Argument	active_class_entry		45020	0					
ANR	45240	Identifier	active_class_entry		45020	0					
ANR	45241	Identifier	name		45020	1					
ANR	45242	Argument	CG ( active_class_entry ) -> name_length		45020	2					
ANR	45243	PtrMemberAccess	CG ( active_class_entry ) -> name_length		45020	0					
ANR	45244	CallExpression	CG ( active_class_entry )		45020	0					
ANR	45245	Callee	CG		45020	0					
ANR	45246	Identifier	CG		45020	0					
ANR	45247	ArgumentList	active_class_entry		45020	1					
ANR	45248	Argument	active_class_entry		45020	0					
ANR	45249	Identifier	active_class_entry		45020	0					
ANR	45250	Identifier	name_length		45020	1					
ANR	45251	Argument	1		45020	3					
ANR	45252	PrimaryExpression	1		45020	0					
ANR	45253	ExpressionStatement	* result = * class_name	2232:3:82060:82081	45020	6	True				
ANR	45254	AssignmentExpression	* result = * class_name		45020	0		=			
ANR	45255	UnaryOperationExpression	* result		45020	0					
ANR	45256	UnaryOperator	*		45020	0					
ANR	45257	Identifier	result		45020	1					
ANR	45258	UnaryOperationExpression	* class_name		45020	1					
ANR	45259	UnaryOperator	*		45020	0					
ANR	45260	Identifier	class_name		45020	1					
ANR	45261	BreakStatement	break ;	2233:3:82086:82091	45020	7	True				
ANR	45262	Label	case ZEND_FETCH_CLASS_STATIC :	2234:8:82101:82129	45020	8	True				
ANR	45263	Identifier	ZEND_FETCH_CLASS_STATIC		45020	0					
ANR	45264	Label	case ZEND_FETCH_CLASS_PARENT :	2235:8:82139:82167	45020	9	True				
ANR	45265	Identifier	ZEND_FETCH_CLASS_PARENT		45020	0					
ANR	45266	IfStatement	if ( is_static )		45020	10					
ANR	45267	Condition	is_static	2236:7:82176:82184	45020	0	True				
ANR	45268	Identifier	is_static		45020	0					
ANR	45269	CompoundStatement		32:18:1171:1171	45020	1					
ANR	45270	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s::class cannot be used for compile-time class name resolution"" , lctype == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"" )"	2237:4:82193:82369	45020	0	True				
ANR	45271	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s::class cannot be used for compile-time class name resolution"" , lctype == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"" )"		45020	0					
ANR	45272	Callee	zend_error_noreturn		45020	0					
ANR	45273	Identifier	zend_error_noreturn		45020	0					
ANR	45274	ArgumentList	E_COMPILE_ERROR		45020	1					
ANR	45275	Argument	E_COMPILE_ERROR		45020	0					
ANR	45276	Identifier	E_COMPILE_ERROR		45020	0					
ANR	45277	Argument	"""%s::class cannot be used for compile-time class name resolution"""		45020	1					
ANR	45278	PrimaryExpression	"""%s::class cannot be used for compile-time class name resolution"""		45020	0					
ANR	45279	Argument	"lctype == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"""		45020	2					
ANR	45280	ConditionalExpression	"lctype == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"""		45020	0					
ANR	45281	Condition	lctype == ZEND_FETCH_CLASS_STATIC		45020	0					
ANR	45282	EqualityExpression	lctype == ZEND_FETCH_CLASS_STATIC		45020	0		==			
ANR	45283	Identifier	lctype		45020	0					
ANR	45284	Identifier	ZEND_FETCH_CLASS_STATIC		45020	1					
ANR	45285	PrimaryExpression	"""static"""		45020	1					
ANR	45286	PrimaryExpression	"""parent"""		45020	2					
ANR	45287	IfStatement	if ( ! CG ( active_class_entry ) )		45020	11					
ANR	45288	Condition	! CG ( active_class_entry )	2242:7:82383:82405	45020	0	True				
ANR	45289	UnaryOperationExpression	! CG ( active_class_entry )		45020	0					
ANR	45290	UnaryOperator	!		45020	0					
ANR	45291	CallExpression	CG ( active_class_entry )		45020	1					
ANR	45292	Callee	CG		45020	0					
ANR	45293	Identifier	CG		45020	0					
ANR	45294	ArgumentList	active_class_entry		45020	1					
ANR	45295	Argument	active_class_entry		45020	0					
ANR	45296	Identifier	active_class_entry		45020	0					
ANR	45297	CompoundStatement		38:32:1392:1392	45020	1					
ANR	45298	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot access %s::class when no class scope is active"" , lctype == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"" )"	2243:4:82414:82580	45020	0	True				
ANR	45299	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot access %s::class when no class scope is active"" , lctype == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"" )"		45020	0					
ANR	45300	Callee	zend_error_noreturn		45020	0					
ANR	45301	Identifier	zend_error_noreturn		45020	0					
ANR	45302	ArgumentList	E_COMPILE_ERROR		45020	1					
ANR	45303	Argument	E_COMPILE_ERROR		45020	0					
ANR	45304	Identifier	E_COMPILE_ERROR		45020	0					
ANR	45305	Argument	"""Cannot access %s::class when no class scope is active"""		45020	1					
ANR	45306	PrimaryExpression	"""Cannot access %s::class when no class scope is active"""		45020	0					
ANR	45307	Argument	"lctype == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"""		45020	2					
ANR	45308	ConditionalExpression	"lctype == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"""		45020	0					
ANR	45309	Condition	lctype == ZEND_FETCH_CLASS_STATIC		45020	0					
ANR	45310	EqualityExpression	lctype == ZEND_FETCH_CLASS_STATIC		45020	0		==			
ANR	45311	Identifier	lctype		45020	0					
ANR	45312	Identifier	ZEND_FETCH_CLASS_STATIC		45020	1					
ANR	45313	PrimaryExpression	"""static"""		45020	1					
ANR	45314	PrimaryExpression	"""parent"""		45020	2					
ANR	45315	ExpressionStatement	constant_name . op_type = IS_CONST	2248:3:82590:82622	45020	12	True				
ANR	45316	AssignmentExpression	constant_name . op_type = IS_CONST		45020	0		=			
ANR	45317	MemberAccess	constant_name . op_type		45020	0					
ANR	45318	Identifier	constant_name		45020	0					
ANR	45319	Identifier	op_type		45020	1					
ANR	45320	Identifier	IS_CONST		45020	1					
ANR	45321	ExpressionStatement	"ZVAL_STRINGL ( & constant_name . u . constant , ""class"" , sizeof ( ""class"" ) - 1 , 1 )"	2249:3:82627:82697	45020	13	True				
ANR	45322	CallExpression	"ZVAL_STRINGL ( & constant_name . u . constant , ""class"" , sizeof ( ""class"" ) - 1 , 1 )"		45020	0					
ANR	45323	Callee	ZVAL_STRINGL		45020	0					
ANR	45324	Identifier	ZVAL_STRINGL		45020	0					
ANR	45325	ArgumentList	& constant_name . u . constant		45020	1					
ANR	45326	Argument	& constant_name . u . constant		45020	0					
ANR	45327	UnaryOperationExpression	& constant_name . u . constant		45020	0					
ANR	45328	UnaryOperator	&		45020	0					
ANR	45329	MemberAccess	constant_name . u . constant		45020	1					
ANR	45330	MemberAccess	constant_name . u		45020	0					
ANR	45331	Identifier	constant_name		45020	0					
ANR	45332	Identifier	u		45020	1					
ANR	45333	Identifier	constant		45020	1					
ANR	45334	Argument	"""class"""		45020	1					
ANR	45335	PrimaryExpression	"""class"""		45020	0					
ANR	45336	Argument	"sizeof ( ""class"" ) - 1"		45020	2					
ANR	45337	AdditiveExpression	"sizeof ( ""class"" ) - 1"		45020	0		-			
ANR	45338	SizeofExpression	"sizeof ( ""class"" )"		45020	0					
ANR	45339	Sizeof	sizeof		45020	0					
ANR	45340	PrimaryExpression	"""class"""		45020	1					
ANR	45341	PrimaryExpression	1		45020	1					
ANR	45342	Argument	1		45020	3					
ANR	45343	PrimaryExpression	1		45020	0					
ANR	45344	Statement	zend_do_fetch_constant	2250:3:82702:82723	45020	14	True				
ANR	45345	Statement	(	2250:25:82724:82724	45020	15	True				
ANR	45346	Statement	result	2250:26:82725:82730	45020	16	True				
ANR	45347	Statement	","	2250:32:82731:82731	45020	17	True				
ANR	45348	Statement	class_name	2250:34:82733:82742	45020	18	True				
ANR	45349	Statement	","	2250:44:82743:82743	45020	19	True				
ANR	45350	Statement	&	2250:46:82745:82745	45020	20	True				
ANR	45351	Statement	constant_name	2250:47:82746:82758	45020	21	True				
ANR	45352	Statement	","	2250:60:82759:82759	45020	22	True				
ANR	45353	Statement	ZEND_RT	2250:62:82761:82767	45020	23	True				
ANR	45354	Statement	","	2250:69:82768:82768	45020	24	True				
ANR	45355	Statement	1	2250:71:82770:82770	45020	25	True				
ANR	45356	Statement	TSRMLS_CC	2250:73:82772:82780	45020	26	True				
ANR	45357	Statement	)	2250:82:82781:82781	45020	27	True				
ANR	45358	ExpressionStatement		2250:83:82782:82782	45020	28	True				
ANR	45359	BreakStatement	break ;	2251:3:82787:82792	45020	29	True				
ANR	45360	Label	case ZEND_FETCH_CLASS_DEFAULT :	2252:2:82796:82825	45020	30	True				
ANR	45361	Identifier	ZEND_FETCH_CLASS_DEFAULT		45020	0					
ANR	45362	Statement	zend_resolve_class_name	2253:3:82830:82852	45020	31	True				
ANR	45363	Statement	(	2253:26:82853:82853	45020	32	True				
ANR	45364	Statement	class_name	2253:27:82854:82863	45020	33	True				
ANR	45365	Statement	TSRMLS_CC	2253:38:82865:82873	45020	34	True				
ANR	45366	Statement	)	2253:47:82874:82874	45020	35	True				
ANR	45367	ExpressionStatement		2253:48:82875:82875	45020	36	True				
ANR	45368	ExpressionStatement	* result = * class_name	2254:3:82880:82901	45020	37	True				
ANR	45369	AssignmentExpression	* result = * class_name		45020	0		=			
ANR	45370	UnaryOperationExpression	* result		45020	0					
ANR	45371	UnaryOperator	*		45020	0					
ANR	45372	Identifier	result		45020	1					
ANR	45373	UnaryOperationExpression	* class_name		45020	1					
ANR	45374	UnaryOperator	*		45020	0					
ANR	45375	Identifier	class_name		45020	1					
ANR	45376	BreakStatement	break ;	2255:3:82906:82911	45020	38	True				
ANR	45377	ExpressionStatement	efree ( lcname )	2258:1:82918:82931	45020	6	True				
ANR	45378	CallExpression	efree ( lcname )		45020	0					
ANR	45379	Callee	efree		45020	0					
ANR	45380	Identifier	efree		45020	0					
ANR	45381	ArgumentList	lcname		45020	1					
ANR	45382	Argument	lcname		45020	0					
ANR	45383	Identifier	lcname		45020	0					
ANR	45384	ReturnType	void		45020	1					
ANR	45385	Identifier	zend_do_resolve_class_name		45020	2					
ANR	45386	ParameterList	"znode * result , znode * class_name , int is_static TSRMLS_DC"		45020	3					
ANR	45387	Parameter	znode * result	2204:32:80946:80958	45020	0	True				
ANR	45388	ParameterType	znode *		45020	0					
ANR	45389	Identifier	result		45020	1					
ANR	45390	Parameter	znode * class_name	2204:47:80961:80977	45020	1	True				
ANR	45391	ParameterType	znode *		45020	0					
ANR	45392	Identifier	class_name		45020	1					
ANR	45393	Parameter	int is_static TSRMLS_DC	2204:66:80980:81002	45020	2	True				
ANR	45394	ParameterType	int is_static		45020	0					
ANR	45395	Identifier	TSRMLS_DC		45020	1					
ANR	45396	CFGEntryNode	ENTRY		45020		True				
ANR	45397	CFGExitNode	EXIT		45020		True				
ANR	45398	Symbol	* class_name		45020						
ANR	45399	Symbol	lctype		45020						
ANR	45400	Symbol	result -> u . constant . type		45020						
ANR	45401	Symbol	active_class_entry		45020						
ANR	45402	Symbol	E_COMPILE_ERROR		45020						
ANR	45403	Symbol	* CG		45020						
ANR	45404	Symbol	Z_STRLEN		45020						
ANR	45405	Symbol	TSRMLS_DC		45020						
ANR	45406	Symbol	result -> u		45020						
ANR	45407	Symbol	result		45020						
ANR	45408	Symbol	constant_name		45020						
ANR	45409	Symbol	strlen		45020						
ANR	45410	Symbol	& constant_name . u . constant		45020						
ANR	45411	Symbol	is_static		45020						
ANR	45412	Symbol	* result		45020						
ANR	45413	Symbol	class_name -> op_type		45020						
ANR	45414	Symbol	ZEND_FETCH_CLASS_STATIC		45020						
ANR	45415	Symbol	Z_STRVAL		45020						
ANR	45416	Symbol	CG ( active_class_entry ) -> name_length		45020						
ANR	45417	Symbol	CG ( active_class_entry ) -> ce_flags		45020						
ANR	45418	Symbol	class_name		45020						
ANR	45419	Symbol	zend_get_class_fetch_type		45020						
ANR	45420	Symbol	zend_str_tolower_dup		45020						
ANR	45421	Symbol	IS_CONSTANT		45020						
ANR	45422	Symbol	IS_CONST		45020						
ANR	45423	Symbol	result -> u . constant		45020						
ANR	45424	Symbol	CG		45020						
ANR	45425	Symbol	& class_name -> u . constant		45020						
ANR	45426	Symbol	constant_name . op_type		45020						
ANR	45427	Symbol	class_name -> u . constant		45020						
ANR	45428	Symbol	& constant_name		45020						
ANR	45429	Symbol	ZEND_ACC_TRAIT		45020						
ANR	45430	Symbol	lcname		45020						
ANR	45431	Symbol	& constant_name . u		45020						
ANR	45432	Symbol	class_name -> u		45020						
ANR	45433	Symbol	& class_name -> u		45020						
ANR	45434	Symbol	CG ( active_class_entry ) -> name		45020						
ANR	45435	Symbol	constant_name . u		45020						
ANR	45436	DeclStmt									
ANR	45437	Decl							char	char *	compound
ANR	45438	DeclStmt									
ANR	45439	Decl							char	char *	lcname
ANR	45440	DeclStmt									
ANR	45441	Decl							zval	zval * *	ns
ANR	45442	DeclStmt									
ANR	45443	Decl							znode	znode	tmp
ANR	45444	DeclStmt									
ANR	45445	Decl							int	int	len
ANR	45446	DeclStmt									
ANR	45447	Decl							long	long	fetch_class_op_number
ANR	45448	DeclStmt									
ANR	45449	Decl							zend_op	zend_op *	opline
ANR	45450	DeclStmt									
ANR	45451	Decl							int	int	fetch_type
ANR	45452	DeclStmt									
ANR	45453	Decl							zend_label	zend_label	dest
ANR	45454	Function	zend_resolve_goto_label	2399:0:87829:89377							
ANR	45455	FunctionDef	"zend_resolve_goto_label (zend_op_array * op_array , zend_op * opline , int pass2 TSRMLS_DC)"		45454	0					
ANR	45456	CompoundStatement		2400:0:87931:89377	45454	0					
ANR	45457	IdentifierDeclStatement	zend_label * dest ;	2401:1:87934:87950	45454	0	True				
ANR	45458	IdentifierDecl	* dest		45454	0					
ANR	45459	IdentifierDeclType	zend_label *		45454	0					
ANR	45460	Identifier	dest		45454	1					
ANR	45461	IdentifierDeclStatement	"long current , distance ;"	2402:1:87953:87975	45454	1	True				
ANR	45462	IdentifierDecl	current		45454	0					
ANR	45463	IdentifierDeclType	long		45454	0					
ANR	45464	Identifier	current		45454	1					
ANR	45465	IdentifierDecl	distance		45454	1					
ANR	45466	IdentifierDeclType	long		45454	0					
ANR	45467	Identifier	distance		45454	1					
ANR	45468	IdentifierDeclStatement	zval * label ;	2403:1:87978:87989	45454	2	True				
ANR	45469	IdentifierDecl	* label		45454	0					
ANR	45470	IdentifierDeclType	zval *		45454	0					
ANR	45471	Identifier	label		45454	1					
ANR	45472	IfStatement	if ( pass2 )		45454	3					
ANR	45473	Condition	pass2	2405:5:87997:88001	45454	0	True				
ANR	45474	Identifier	pass2		45454	0					
ANR	45475	CompoundStatement		6:12:72:72	45454	1					
ANR	45476	ExpressionStatement	label = opline -> op2 . zv	2406:2:88008:88030	45454	0	True				
ANR	45477	AssignmentExpression	label = opline -> op2 . zv		45454	0		=			
ANR	45478	Identifier	label		45454	0					
ANR	45479	MemberAccess	opline -> op2 . zv		45454	1					
ANR	45480	PtrMemberAccess	opline -> op2		45454	0					
ANR	45481	Identifier	opline		45454	0					
ANR	45482	Identifier	op2		45454	1					
ANR	45483	Identifier	zv		45454	1					
ANR	45484	ElseStatement	else		45454	0					
ANR	45485	CompoundStatement		8:8:108:108	45454	0					
ANR	45486	ExpressionStatement	"label = & CONSTANT_EX ( op_array , opline -> op2 . constant )"	2408:2:88044:88096	45454	0	True				
ANR	45487	AssignmentExpression	"label = & CONSTANT_EX ( op_array , opline -> op2 . constant )"		45454	0		=			
ANR	45488	Identifier	label		45454	0					
ANR	45489	UnaryOperationExpression	"& CONSTANT_EX ( op_array , opline -> op2 . constant )"		45454	1					
ANR	45490	UnaryOperator	&		45454	0					
ANR	45491	CallExpression	"CONSTANT_EX ( op_array , opline -> op2 . constant )"		45454	1					
ANR	45492	Callee	CONSTANT_EX		45454	0					
ANR	45493	Identifier	CONSTANT_EX		45454	0					
ANR	45494	ArgumentList	op_array		45454	1					
ANR	45495	Argument	op_array		45454	0					
ANR	45496	Identifier	op_array		45454	0					
ANR	45497	Argument	opline -> op2 . constant		45454	1					
ANR	45498	MemberAccess	opline -> op2 . constant		45454	0					
ANR	45499	PtrMemberAccess	opline -> op2		45454	0					
ANR	45500	Identifier	opline		45454	0					
ANR	45501	Identifier	op2		45454	1					
ANR	45502	Identifier	constant		45454	1					
ANR	45503	IfStatement	"if ( CG ( context ) . labels == NULL || zend_hash_find ( CG ( context ) . labels , Z_STRVAL_P ( label ) , Z_STRLEN_P ( label ) + 1 , ( void * * ) & dest ) == FAILURE )"		45454	4					
ANR	45504	Condition	"CG ( context ) . labels == NULL || zend_hash_find ( CG ( context ) . labels , Z_STRVAL_P ( label ) , Z_STRLEN_P ( label ) + 1 , ( void * * ) & dest ) == FAILURE"	2410:5:88106:88240	45454	0	True				
ANR	45505	OrExpression	"CG ( context ) . labels == NULL || zend_hash_find ( CG ( context ) . labels , Z_STRVAL_P ( label ) , Z_STRLEN_P ( label ) + 1 , ( void * * ) & dest ) == FAILURE"		45454	0		||			
ANR	45506	EqualityExpression	CG ( context ) . labels == NULL		45454	0		==			
ANR	45507	MemberAccess	CG ( context ) . labels		45454	0					
ANR	45508	CallExpression	CG ( context )		45454	0					
ANR	45509	Callee	CG		45454	0					
ANR	45510	Identifier	CG		45454	0					
ANR	45511	ArgumentList	context		45454	1					
ANR	45512	Argument	context		45454	0					
ANR	45513	Identifier	context		45454	0					
ANR	45514	Identifier	labels		45454	1					
ANR	45515	Identifier	NULL		45454	1					
ANR	45516	EqualityExpression	"zend_hash_find ( CG ( context ) . labels , Z_STRVAL_P ( label ) , Z_STRLEN_P ( label ) + 1 , ( void * * ) & dest ) == FAILURE"		45454	1		==			
ANR	45517	CallExpression	"zend_hash_find ( CG ( context ) . labels , Z_STRVAL_P ( label ) , Z_STRLEN_P ( label ) + 1 , ( void * * ) & dest )"		45454	0					
ANR	45518	Callee	zend_hash_find		45454	0					
ANR	45519	Identifier	zend_hash_find		45454	0					
ANR	45520	ArgumentList	CG ( context ) . labels		45454	1					
ANR	45521	Argument	CG ( context ) . labels		45454	0					
ANR	45522	MemberAccess	CG ( context ) . labels		45454	0					
ANR	45523	CallExpression	CG ( context )		45454	0					
ANR	45524	Callee	CG		45454	0					
ANR	45525	Identifier	CG		45454	0					
ANR	45526	ArgumentList	context		45454	1					
ANR	45527	Argument	context		45454	0					
ANR	45528	Identifier	context		45454	0					
ANR	45529	Identifier	labels		45454	1					
ANR	45530	Argument	Z_STRVAL_P ( label )		45454	1					
ANR	45531	CallExpression	Z_STRVAL_P ( label )		45454	0					
ANR	45532	Callee	Z_STRVAL_P		45454	0					
ANR	45533	Identifier	Z_STRVAL_P		45454	0					
ANR	45534	ArgumentList	label		45454	1					
ANR	45535	Argument	label		45454	0					
ANR	45536	Identifier	label		45454	0					
ANR	45537	Argument	Z_STRLEN_P ( label ) + 1		45454	2					
ANR	45538	AdditiveExpression	Z_STRLEN_P ( label ) + 1		45454	0		+			
ANR	45539	CallExpression	Z_STRLEN_P ( label )		45454	0					
ANR	45540	Callee	Z_STRLEN_P		45454	0					
ANR	45541	Identifier	Z_STRLEN_P		45454	0					
ANR	45542	ArgumentList	label		45454	1					
ANR	45543	Argument	label		45454	0					
ANR	45544	Identifier	label		45454	0					
ANR	45545	PrimaryExpression	1		45454	1					
ANR	45546	Argument	( void * * ) & dest		45454	3					
ANR	45547	CastExpression	( void * * ) & dest		45454	0					
ANR	45548	CastTarget	void * *		45454	0					
ANR	45549	UnaryOperationExpression	& dest		45454	1					
ANR	45550	UnaryOperator	&		45454	0					
ANR	45551	Identifier	dest		45454	1					
ANR	45552	Identifier	FAILURE		45454	1					
ANR	45553	CompoundStatement		12:107:311:311	45454	1					
ANR	45554	IfStatement	if ( pass2 )		45454	0					
ANR	45555	Condition	pass2	2413:6:88252:88256	45454	0	True				
ANR	45556	Identifier	pass2		45454	0					
ANR	45557	CompoundStatement		14:13:327:327	45454	1					
ANR	45558	ExpressionStatement	CG ( in_compilation ) = 1	2414:3:88264:88286	45454	0	True				
ANR	45559	AssignmentExpression	CG ( in_compilation ) = 1		45454	0		=			
ANR	45560	CallExpression	CG ( in_compilation )		45454	0					
ANR	45561	Callee	CG		45454	0					
ANR	45562	Identifier	CG		45454	0					
ANR	45563	ArgumentList	in_compilation		45454	1					
ANR	45564	Argument	in_compilation		45454	0					
ANR	45565	Identifier	in_compilation		45454	0					
ANR	45566	PrimaryExpression	1		45454	1					
ANR	45567	ExpressionStatement	CG ( active_op_array ) = op_array	2415:3:88291:88321	45454	1	True				
ANR	45568	AssignmentExpression	CG ( active_op_array ) = op_array		45454	0		=			
ANR	45569	CallExpression	CG ( active_op_array )		45454	0					
ANR	45570	Callee	CG		45454	0					
ANR	45571	Identifier	CG		45454	0					
ANR	45572	ArgumentList	active_op_array		45454	1					
ANR	45573	Argument	active_op_array		45454	0					
ANR	45574	Identifier	active_op_array		45454	0					
ANR	45575	Identifier	op_array		45454	1					
ANR	45576	ExpressionStatement	CG ( zend_lineno ) = opline -> lineno	2416:3:88326:88358	45454	2	True				
ANR	45577	AssignmentExpression	CG ( zend_lineno ) = opline -> lineno		45454	0		=			
ANR	45578	CallExpression	CG ( zend_lineno )		45454	0					
ANR	45579	Callee	CG		45454	0					
ANR	45580	Identifier	CG		45454	0					
ANR	45581	ArgumentList	zend_lineno		45454	1					
ANR	45582	Argument	zend_lineno		45454	0					
ANR	45583	Identifier	zend_lineno		45454	0					
ANR	45584	PtrMemberAccess	opline -> lineno		45454	1					
ANR	45585	Identifier	opline		45454	0					
ANR	45586	Identifier	lineno		45454	1					
ANR	45587	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""'goto' to undefined label '%s'"" , Z_STRVAL_P ( label ) )"	2417:3:88363:88452	45454	3	True				
ANR	45588	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""'goto' to undefined label '%s'"" , Z_STRVAL_P ( label ) )"		45454	0					
ANR	45589	Callee	zend_error_noreturn		45454	0					
ANR	45590	Identifier	zend_error_noreturn		45454	0					
ANR	45591	ArgumentList	E_COMPILE_ERROR		45454	1					
ANR	45592	Argument	E_COMPILE_ERROR		45454	0					
ANR	45593	Identifier	E_COMPILE_ERROR		45454	0					
ANR	45594	Argument	"""'goto' to undefined label '%s'"""		45454	1					
ANR	45595	PrimaryExpression	"""'goto' to undefined label '%s'"""		45454	0					
ANR	45596	Argument	Z_STRVAL_P ( label )		45454	2					
ANR	45597	CallExpression	Z_STRVAL_P ( label )		45454	0					
ANR	45598	Callee	Z_STRVAL_P		45454	0					
ANR	45599	Identifier	Z_STRVAL_P		45454	0					
ANR	45600	ArgumentList	label		45454	1					
ANR	45601	Argument	label		45454	0					
ANR	45602	Identifier	label		45454	0					
ANR	45603	ElseStatement	else		45454	0					
ANR	45604	CompoundStatement		19:9:531:531	45454	0					
ANR	45605	ExpressionStatement	INC_BPC ( op_array )	2420:3:88516:88533	45454	0	True				
ANR	45606	CallExpression	INC_BPC ( op_array )		45454	0					
ANR	45607	Callee	INC_BPC		45454	0					
ANR	45608	Identifier	INC_BPC		45454	0					
ANR	45609	ArgumentList	op_array		45454	1					
ANR	45610	Argument	op_array		45454	0					
ANR	45611	Identifier	op_array		45454	0					
ANR	45612	ReturnStatement	return ;	2421:3:88538:88544	45454	1	True				
ANR	45613	ExpressionStatement	opline -> op1 . opline_num = dest -> opline_num	2425:1:88555:88596	45454	5	True				
ANR	45614	AssignmentExpression	opline -> op1 . opline_num = dest -> opline_num		45454	0		=			
ANR	45615	MemberAccess	opline -> op1 . opline_num		45454	0					
ANR	45616	PtrMemberAccess	opline -> op1		45454	0					
ANR	45617	Identifier	opline		45454	0					
ANR	45618	Identifier	op1		45454	1					
ANR	45619	Identifier	opline_num		45454	1					
ANR	45620	PtrMemberAccess	dest -> opline_num		45454	1					
ANR	45621	Identifier	dest		45454	0					
ANR	45622	Identifier	opline_num		45454	1					
ANR	45623	ExpressionStatement	zval_dtor ( label )	2426:1:88599:88615	45454	6	True				
ANR	45624	CallExpression	zval_dtor ( label )		45454	0					
ANR	45625	Callee	zval_dtor		45454	0					
ANR	45626	Identifier	zval_dtor		45454	0					
ANR	45627	ArgumentList	label		45454	1					
ANR	45628	Argument	label		45454	0					
ANR	45629	Identifier	label		45454	0					
ANR	45630	ExpressionStatement	Z_TYPE_P ( label ) = IS_NULL	2427:1:88618:88643	45454	7	True				
ANR	45631	AssignmentExpression	Z_TYPE_P ( label ) = IS_NULL		45454	0		=			
ANR	45632	CallExpression	Z_TYPE_P ( label )		45454	0					
ANR	45633	Callee	Z_TYPE_P		45454	0					
ANR	45634	Identifier	Z_TYPE_P		45454	0					
ANR	45635	ArgumentList	label		45454	1					
ANR	45636	Argument	label		45454	0					
ANR	45637	Identifier	label		45454	0					
ANR	45638	Identifier	IS_NULL		45454	1					
ANR	45639	ExpressionStatement	current = opline -> extended_value	2430:1:88703:88735	45454	8	True				
ANR	45640	AssignmentExpression	current = opline -> extended_value		45454	0		=			
ANR	45641	Identifier	current		45454	0					
ANR	45642	PtrMemberAccess	opline -> extended_value		45454	1					
ANR	45643	Identifier	opline		45454	0					
ANR	45644	Identifier	extended_value		45454	1					
ANR	45645	ForStatement	for ( distance = 0 ; current != dest -> brk_cont ; distance ++ )		45454	9					
ANR	45646	ForInit	distance = 0 ;	2431:6:88743:88755	45454	0	True				
ANR	45647	AssignmentExpression	distance = 0		45454	0		=			
ANR	45648	Identifier	distance		45454	0					
ANR	45649	PrimaryExpression	0		45454	1					
ANR	45650	Condition	current != dest -> brk_cont	2431:20:88757:88781	45454	1	True				
ANR	45651	EqualityExpression	current != dest -> brk_cont		45454	0		!=			
ANR	45652	Identifier	current		45454	0					
ANR	45653	PtrMemberAccess	dest -> brk_cont		45454	1					
ANR	45654	Identifier	dest		45454	0					
ANR	45655	Identifier	brk_cont		45454	1					
ANR	45656	PostIncDecOperationExpression	distance ++	2431:47:88784:88793	45454	2	True				
ANR	45657	Identifier	distance		45454	0					
ANR	45658	IncDec	++		45454	1					
ANR	45659	CompoundStatement		32:59:864:864	45454	3					
ANR	45660	IfStatement	if ( current == - 1 )		45454	0					
ANR	45661	Condition	current == - 1	2432:6:88804:88816	45454	0	True				
ANR	45662	EqualityExpression	current == - 1		45454	0		==			
ANR	45663	Identifier	current		45454	0					
ANR	45664	UnaryOperationExpression	- 1		45454	1					
ANR	45665	UnaryOperator	-		45454	0					
ANR	45666	PrimaryExpression	1		45454	1					
ANR	45667	CompoundStatement		33:21:887:887	45454	1					
ANR	45668	IfStatement	if ( pass2 )		45454	0					
ANR	45669	Condition	pass2	2433:7:88828:88832	45454	0	True				
ANR	45670	Identifier	pass2		45454	0					
ANR	45671	CompoundStatement		34:14:903:903	45454	1					
ANR	45672	ExpressionStatement	CG ( in_compilation ) = 1	2434:4:88841:88863	45454	0	True				
ANR	45673	AssignmentExpression	CG ( in_compilation ) = 1		45454	0		=			
ANR	45674	CallExpression	CG ( in_compilation )		45454	0					
ANR	45675	Callee	CG		45454	0					
ANR	45676	Identifier	CG		45454	0					
ANR	45677	ArgumentList	in_compilation		45454	1					
ANR	45678	Argument	in_compilation		45454	0					
ANR	45679	Identifier	in_compilation		45454	0					
ANR	45680	PrimaryExpression	1		45454	1					
ANR	45681	ExpressionStatement	CG ( active_op_array ) = op_array	2435:4:88869:88899	45454	1	True				
ANR	45682	AssignmentExpression	CG ( active_op_array ) = op_array		45454	0		=			
ANR	45683	CallExpression	CG ( active_op_array )		45454	0					
ANR	45684	Callee	CG		45454	0					
ANR	45685	Identifier	CG		45454	0					
ANR	45686	ArgumentList	active_op_array		45454	1					
ANR	45687	Argument	active_op_array		45454	0					
ANR	45688	Identifier	active_op_array		45454	0					
ANR	45689	Identifier	op_array		45454	1					
ANR	45690	ExpressionStatement	CG ( zend_lineno ) = opline -> lineno	2436:4:88905:88937	45454	2	True				
ANR	45691	AssignmentExpression	CG ( zend_lineno ) = opline -> lineno		45454	0		=			
ANR	45692	CallExpression	CG ( zend_lineno )		45454	0					
ANR	45693	Callee	CG		45454	0					
ANR	45694	Identifier	CG		45454	0					
ANR	45695	ArgumentList	zend_lineno		45454	1					
ANR	45696	Argument	zend_lineno		45454	0					
ANR	45697	Identifier	zend_lineno		45454	0					
ANR	45698	PtrMemberAccess	opline -> lineno		45454	1					
ANR	45699	Identifier	opline		45454	0					
ANR	45700	Identifier	lineno		45454	1					
ANR	45701	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""'goto' into loop or switch statement is disallowed"" )"	2438:3:88947:89037	45454	1	True				
ANR	45702	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""'goto' into loop or switch statement is disallowed"" )"		45454	0					
ANR	45703	Callee	zend_error_noreturn		45454	0					
ANR	45704	Identifier	zend_error_noreturn		45454	0					
ANR	45705	ArgumentList	E_COMPILE_ERROR		45454	1					
ANR	45706	Argument	E_COMPILE_ERROR		45454	0					
ANR	45707	Identifier	E_COMPILE_ERROR		45454	0					
ANR	45708	Argument	"""'goto' into loop or switch statement is disallowed"""		45454	1					
ANR	45709	PrimaryExpression	"""'goto' into loop or switch statement is disallowed"""		45454	0					
ANR	45710	ExpressionStatement	current = op_array -> brk_cont_array [ current ] . parent	2440:2:89045:89095	45454	1	True				
ANR	45711	AssignmentExpression	current = op_array -> brk_cont_array [ current ] . parent		45454	0		=			
ANR	45712	Identifier	current		45454	0					
ANR	45713	MemberAccess	op_array -> brk_cont_array [ current ] . parent		45454	1					
ANR	45714	ArrayIndexing	op_array -> brk_cont_array [ current ]		45454	0					
ANR	45715	PtrMemberAccess	op_array -> brk_cont_array		45454	0					
ANR	45716	Identifier	op_array		45454	0					
ANR	45717	Identifier	brk_cont_array		45454	1					
ANR	45718	Identifier	current		45454	1					
ANR	45719	Identifier	parent		45454	1					
ANR	45720	IfStatement	if ( distance == 0 )		45454	10					
ANR	45721	Condition	distance == 0	2443:5:89106:89118	45454	0	True				
ANR	45722	EqualityExpression	distance == 0		45454	0		==			
ANR	45723	Identifier	distance		45454	0					
ANR	45724	PrimaryExpression	0		45454	1					
ANR	45725	CompoundStatement		44:20:1189:1189	45454	1					
ANR	45726	ExpressionStatement	opline -> opcode = ZEND_JMP	2445:2:89179:89204	45454	0	True				
ANR	45727	AssignmentExpression	opline -> opcode = ZEND_JMP		45454	0		=			
ANR	45728	PtrMemberAccess	opline -> opcode		45454	0					
ANR	45729	Identifier	opline		45454	0					
ANR	45730	Identifier	opcode		45454	1					
ANR	45731	Identifier	ZEND_JMP		45454	1					
ANR	45732	ExpressionStatement	opline -> extended_value = 0	2446:2:89208:89234	45454	1	True				
ANR	45733	AssignmentExpression	opline -> extended_value = 0		45454	0		=			
ANR	45734	PtrMemberAccess	opline -> extended_value		45454	0					
ANR	45735	Identifier	opline		45454	0					
ANR	45736	Identifier	extended_value		45454	1					
ANR	45737	PrimaryExpression	0		45454	1					
ANR	45738	ExpressionStatement	SET_UNUSED ( opline -> op2 )	2447:2:89238:89261	45454	2	True				
ANR	45739	CallExpression	SET_UNUSED ( opline -> op2 )		45454	0					
ANR	45740	Callee	SET_UNUSED		45454	0					
ANR	45741	Identifier	SET_UNUSED		45454	0					
ANR	45742	ArgumentList	opline -> op2		45454	1					
ANR	45743	Argument	opline -> op2		45454	0					
ANR	45744	PtrMemberAccess	opline -> op2		45454	0					
ANR	45745	Identifier	opline		45454	0					
ANR	45746	Identifier	op2		45454	1					
ANR	45747	ElseStatement	else		45454	0					
ANR	45748	CompoundStatement		49:8:1339:1339	45454	0					
ANR	45749	ExpressionStatement	"ZVAL_LONG ( label , distance )"	2450:2:89307:89333	45454	0	True				
ANR	45750	CallExpression	"ZVAL_LONG ( label , distance )"		45454	0					
ANR	45751	Callee	ZVAL_LONG		45454	0					
ANR	45752	Identifier	ZVAL_LONG		45454	0					
ANR	45753	ArgumentList	label		45454	1					
ANR	45754	Argument	label		45454	0					
ANR	45755	Identifier	label		45454	0					
ANR	45756	Argument	distance		45454	1					
ANR	45757	Identifier	distance		45454	0					
ANR	45758	IfStatement	if ( pass2 )		45454	11					
ANR	45759	Condition	pass2	2453:5:89344:89348	45454	0	True				
ANR	45760	Identifier	pass2		45454	0					
ANR	45761	CompoundStatement		54:12:1419:1419	45454	1					
ANR	45762	ExpressionStatement	DEC_BPC ( op_array )	2454:2:89355:89372	45454	0	True				
ANR	45763	CallExpression	DEC_BPC ( op_array )		45454	0					
ANR	45764	Callee	DEC_BPC		45454	0					
ANR	45765	Identifier	DEC_BPC		45454	0					
ANR	45766	ArgumentList	op_array		45454	1					
ANR	45767	Argument	op_array		45454	0					
ANR	45768	Identifier	op_array		45454	0					
ANR	45769	ReturnType	void		45454	1					
ANR	45770	Identifier	zend_resolve_goto_label		45454	2					
ANR	45771	ParameterList	"zend_op_array * op_array , zend_op * opline , int pass2 TSRMLS_DC"		45454	3					
ANR	45772	Parameter	zend_op_array * op_array	2399:29:87858:87880	45454	0	True				
ANR	45773	ParameterType	zend_op_array *		45454	0					
ANR	45774	Identifier	op_array		45454	1					
ANR	45775	Parameter	zend_op * opline	2399:54:87883:87897	45454	1	True				
ANR	45776	ParameterType	zend_op *		45454	0					
ANR	45777	Identifier	opline		45454	1					
ANR	45778	Parameter	int pass2 TSRMLS_DC	2399:71:87900:87918	45454	2	True				
ANR	45779	ParameterType	int pass2		45454	0					
ANR	45780	Identifier	TSRMLS_DC		45454	1					
ANR	45781	CFGEntryNode	ENTRY		45454		True				
ANR	45782	CFGExitNode	EXIT		45454		True				
ANR	45783	Symbol	opline -> op1		45454						
ANR	45784	Symbol	op_array -> brk_cont_array [ current ] . parent		45454						
ANR	45785	Symbol	opline -> op2		45454						
ANR	45786	Symbol	distance		45454						
ANR	45787	Symbol	& CONSTANT_EX		45454						
ANR	45788	Symbol	* dest		45454						
ANR	45789	Symbol	E_COMPILE_ERROR		45454						
ANR	45790	Symbol	* current		45454						
ANR	45791	Symbol	dest		45454						
ANR	45792	Symbol	TSRMLS_DC		45454						
ANR	45793	Symbol	in_compilation		45454						
ANR	45794	Symbol	opline -> extended_value		45454						
ANR	45795	Symbol	zend_hash_find		45454						
ANR	45796	Symbol	opline -> lineno		45454						
ANR	45797	Symbol	current		45454						
ANR	45798	Symbol	op_array -> brk_cont_array		45454						
ANR	45799	Symbol	opline		45454						
ANR	45800	Symbol	IS_NULL		45454						
ANR	45801	Symbol	dest -> opline_num		45454						
ANR	45802	Symbol	& dest		45454						
ANR	45803	Symbol	context		45454						
ANR	45804	Symbol	pass2		45454						
ANR	45805	Symbol	zend_lineno		45454						
ANR	45806	Symbol	Z_STRLEN_P		45454						
ANR	45807	Symbol	CG ( context ) . labels		45454						
ANR	45808	Symbol	opline -> op2 . zv		45454						
ANR	45809	Symbol	NULL		45454						
ANR	45810	Symbol	dest -> brk_cont		45454						
ANR	45811	Symbol	CG		45454						
ANR	45812	Symbol	* op_array -> brk_cont_array		45454						
ANR	45813	Symbol	active_op_array		45454						
ANR	45814	Symbol	opline -> op1 . opline_num		45454						
ANR	45815	Symbol	label		45454						
ANR	45816	Symbol	Z_TYPE_P		45454						
ANR	45817	Symbol	Z_STRVAL_P		45454						
ANR	45818	Symbol	FAILURE		45454						
ANR	45819	Symbol	* op_array		45454						
ANR	45820	Symbol	ZEND_JMP		45454						
ANR	45821	Symbol	* opline		45454						
ANR	45822	Symbol	opline -> opcode		45454						
ANR	45823	Symbol	opline -> op2 . constant		45454						
ANR	45824	Symbol	* * op_array		45454						
ANR	45825	Symbol	op_array		45454						
ANR	45826	DeclStmt									
ANR	45827	Decl							zend_op	zend_op *	opline
ANR	45828	Function	zend_release_labels	2471:0:89737:90150							
ANR	45829	FunctionDef	zend_release_labels (int temporary TSRMLS_DC)		45828	0					
ANR	45830	CompoundStatement		2472:0:89797:90150	45828	0					
ANR	45831	IfStatement	if ( CG ( context ) . labels )		45828	0					
ANR	45832	Condition	CG ( context ) . labels	2473:5:89804:89821	45828	0	True				
ANR	45833	MemberAccess	CG ( context ) . labels		45828	0					
ANR	45834	CallExpression	CG ( context )		45828	0					
ANR	45835	Callee	CG		45828	0					
ANR	45836	Identifier	CG		45828	0					
ANR	45837	ArgumentList	context		45828	1					
ANR	45838	Argument	context		45828	0					
ANR	45839	Identifier	context		45828	0					
ANR	45840	Identifier	labels		45828	1					
ANR	45841	CompoundStatement		2:25:26:26	45828	1					
ANR	45842	ExpressionStatement	zend_hash_destroy ( CG ( context ) . labels )	2474:2:89828:89865	45828	0	True				
ANR	45843	CallExpression	zend_hash_destroy ( CG ( context ) . labels )		45828	0					
ANR	45844	Callee	zend_hash_destroy		45828	0					
ANR	45845	Identifier	zend_hash_destroy		45828	0					
ANR	45846	ArgumentList	CG ( context ) . labels		45828	1					
ANR	45847	Argument	CG ( context ) . labels		45828	0					
ANR	45848	MemberAccess	CG ( context ) . labels		45828	0					
ANR	45849	CallExpression	CG ( context )		45828	0					
ANR	45850	Callee	CG		45828	0					
ANR	45851	Identifier	CG		45828	0					
ANR	45852	ArgumentList	context		45828	1					
ANR	45853	Argument	context		45828	0					
ANR	45854	Identifier	context		45828	0					
ANR	45855	Identifier	labels		45828	1					
ANR	45856	ExpressionStatement	FREE_HASHTABLE ( CG ( context ) . labels )	2475:2:89869:89903	45828	1	True				
ANR	45857	CallExpression	FREE_HASHTABLE ( CG ( context ) . labels )		45828	0					
ANR	45858	Callee	FREE_HASHTABLE		45828	0					
ANR	45859	Identifier	FREE_HASHTABLE		45828	0					
ANR	45860	ArgumentList	CG ( context ) . labels		45828	1					
ANR	45861	Argument	CG ( context ) . labels		45828	0					
ANR	45862	MemberAccess	CG ( context ) . labels		45828	0					
ANR	45863	CallExpression	CG ( context )		45828	0					
ANR	45864	Callee	CG		45828	0					
ANR	45865	Identifier	CG		45828	0					
ANR	45866	ArgumentList	context		45828	1					
ANR	45867	Argument	context		45828	0					
ANR	45868	Identifier	context		45828	0					
ANR	45869	Identifier	labels		45828	1					
ANR	45870	ExpressionStatement	CG ( context ) . labels = NULL	2476:2:89907:89932	45828	2	True				
ANR	45871	AssignmentExpression	CG ( context ) . labels = NULL		45828	0		=			
ANR	45872	MemberAccess	CG ( context ) . labels		45828	0					
ANR	45873	CallExpression	CG ( context )		45828	0					
ANR	45874	Callee	CG		45828	0					
ANR	45875	Identifier	CG		45828	0					
ANR	45876	ArgumentList	context		45828	1					
ANR	45877	Argument	context		45828	0					
ANR	45878	Identifier	context		45828	0					
ANR	45879	Identifier	labels		45828	1					
ANR	45880	Identifier	NULL		45828	1					
ANR	45881	IfStatement	if ( ! temporary && ! zend_stack_is_empty ( & CG ( context_stack ) ) )		45828	1					
ANR	45882	Condition	! temporary && ! zend_stack_is_empty ( & CG ( context_stack ) )	2478:5:89942:89995	45828	0	True				
ANR	45883	AndExpression	! temporary && ! zend_stack_is_empty ( & CG ( context_stack ) )		45828	0		&&			
ANR	45884	UnaryOperationExpression	! temporary		45828	0					
ANR	45885	UnaryOperator	!		45828	0					
ANR	45886	Identifier	temporary		45828	1					
ANR	45887	UnaryOperationExpression	! zend_stack_is_empty ( & CG ( context_stack ) )		45828	1					
ANR	45888	UnaryOperator	!		45828	0					
ANR	45889	CallExpression	zend_stack_is_empty ( & CG ( context_stack ) )		45828	1					
ANR	45890	Callee	zend_stack_is_empty		45828	0					
ANR	45891	Identifier	zend_stack_is_empty		45828	0					
ANR	45892	ArgumentList	& CG ( context_stack )		45828	1					
ANR	45893	Argument	& CG ( context_stack )		45828	0					
ANR	45894	UnaryOperationExpression	& CG ( context_stack )		45828	0					
ANR	45895	UnaryOperator	&		45828	0					
ANR	45896	CallExpression	CG ( context_stack )		45828	1					
ANR	45897	Callee	CG		45828	0					
ANR	45898	Identifier	CG		45828	0					
ANR	45899	ArgumentList	context_stack		45828	1					
ANR	45900	Argument	context_stack		45828	0					
ANR	45901	Identifier	context_stack		45828	0					
ANR	45902	CompoundStatement		8:2:204:230	45828	1					
ANR	45903	IdentifierDeclStatement	zend_compiler_context * ctx ;	2479:2:90002:90028	45828	0	True				
ANR	45904	IdentifierDecl	* ctx		45828	0					
ANR	45905	IdentifierDeclType	zend_compiler_context *		45828	0					
ANR	45906	Identifier	ctx		45828	1					
ANR	45907	ExpressionStatement	"zend_stack_top ( & CG ( context_stack ) , ( void * * ) & ctx )"	2481:2:90033:90081	45828	1	True				
ANR	45908	CallExpression	"zend_stack_top ( & CG ( context_stack ) , ( void * * ) & ctx )"		45828	0					
ANR	45909	Callee	zend_stack_top		45828	0					
ANR	45910	Identifier	zend_stack_top		45828	0					
ANR	45911	ArgumentList	& CG ( context_stack )		45828	1					
ANR	45912	Argument	& CG ( context_stack )		45828	0					
ANR	45913	UnaryOperationExpression	& CG ( context_stack )		45828	0					
ANR	45914	UnaryOperator	&		45828	0					
ANR	45915	CallExpression	CG ( context_stack )		45828	1					
ANR	45916	Callee	CG		45828	0					
ANR	45917	Identifier	CG		45828	0					
ANR	45918	ArgumentList	context_stack		45828	1					
ANR	45919	Argument	context_stack		45828	0					
ANR	45920	Identifier	context_stack		45828	0					
ANR	45921	Argument	( void * * ) & ctx		45828	1					
ANR	45922	CastExpression	( void * * ) & ctx		45828	0					
ANR	45923	CastTarget	void * *		45828	0					
ANR	45924	UnaryOperationExpression	& ctx		45828	1					
ANR	45925	UnaryOperator	&		45828	0					
ANR	45926	Identifier	ctx		45828	1					
ANR	45927	ExpressionStatement	CG ( context ) = * ctx	2482:2:90085:90103	45828	2	True				
ANR	45928	AssignmentExpression	CG ( context ) = * ctx		45828	0		=			
ANR	45929	CallExpression	CG ( context )		45828	0					
ANR	45930	Callee	CG		45828	0					
ANR	45931	Identifier	CG		45828	0					
ANR	45932	ArgumentList	context		45828	1					
ANR	45933	Argument	context		45828	0					
ANR	45934	Identifier	context		45828	0					
ANR	45935	UnaryOperationExpression	* ctx		45828	1					
ANR	45936	UnaryOperator	*		45828	0					
ANR	45937	Identifier	ctx		45828	1					
ANR	45938	ExpressionStatement	zend_stack_del_top ( & CG ( context_stack ) )	2483:2:90107:90145	45828	3	True				
ANR	45939	CallExpression	zend_stack_del_top ( & CG ( context_stack ) )		45828	0					
ANR	45940	Callee	zend_stack_del_top		45828	0					
ANR	45941	Identifier	zend_stack_del_top		45828	0					
ANR	45942	ArgumentList	& CG ( context_stack )		45828	1					
ANR	45943	Argument	& CG ( context_stack )		45828	0					
ANR	45944	UnaryOperationExpression	& CG ( context_stack )		45828	0					
ANR	45945	UnaryOperator	&		45828	0					
ANR	45946	CallExpression	CG ( context_stack )		45828	1					
ANR	45947	Callee	CG		45828	0					
ANR	45948	Identifier	CG		45828	0					
ANR	45949	ArgumentList	context_stack		45828	1					
ANR	45950	Argument	context_stack		45828	0					
ANR	45951	Identifier	context_stack		45828	0					
ANR	45952	ReturnType	void		45828	1					
ANR	45953	Identifier	zend_release_labels		45828	2					
ANR	45954	ParameterList	int temporary TSRMLS_DC		45828	3					
ANR	45955	Parameter	int temporary TSRMLS_DC	2471:25:89762:89784	45828	0	True				
ANR	45956	ParameterType	int temporary		45828	0					
ANR	45957	Identifier	TSRMLS_DC		45828	1					
ANR	45958	CFGEntryNode	ENTRY		45828		True				
ANR	45959	CFGExitNode	EXIT		45828		True				
ANR	45960	Symbol	temporary		45828						
ANR	45961	Symbol	NULL		45828						
ANR	45962	Symbol	CG		45828						
ANR	45963	Symbol	ctx		45828						
ANR	45964	Symbol	context		45828						
ANR	45965	Symbol	zend_stack_is_empty		45828						
ANR	45966	Symbol	& ctx		45828						
ANR	45967	Symbol	CG ( context ) . labels		45828						
ANR	45968	Symbol	TSRMLS_DC		45828						
ANR	45969	Symbol	context_stack		45828						
ANR	45970	Symbol	* ctx		45828						
ANR	45971	Symbol	& CG		45828						
ANR	45972	Function	zend_do_build_full_name	2488:0:90163:91395							
ANR	45973	FunctionDef	"zend_do_build_full_name (znode * result , znode * prefix , znode * name , int is_class_member TSRMLS_DC)"		45972	0					
ANR	45974	CompoundStatement		2489:0:90276:91395	45972	0					
ANR	45975	IdentifierDeclStatement	zend_uint length ;	2490:1:90279:90295	45972	0	True				
ANR	45976	IdentifierDecl	length		45972	0					
ANR	45977	IdentifierDeclType	zend_uint		45972	0					
ANR	45978	Identifier	length		45972	1					
ANR	45979	IfStatement	if ( ! result )		45972	1					
ANR	45980	Condition	! result	2492:5:90303:90309	45972	0	True				
ANR	45981	UnaryOperationExpression	! result		45972	0					
ANR	45982	UnaryOperator	!		45972	0					
ANR	45983	Identifier	result		45972	1					
ANR	45984	CompoundStatement		4:14:35:35	45972	1					
ANR	45985	ExpressionStatement	result = prefix	2493:2:90316:90331	45972	0	True				
ANR	45986	AssignmentExpression	result = prefix		45972	0		=			
ANR	45987	Identifier	result		45972	0					
ANR	45988	Identifier	prefix		45972	1					
ANR	45989	ElseStatement	else		45972	0					
ANR	45990	CompoundStatement		6:8:64:64	45972	0					
ANR	45991	ExpressionStatement	* result = * prefix	2495:2:90345:90362	45972	0	True				
ANR	45992	AssignmentExpression	* result = * prefix		45972	0		=			
ANR	45993	UnaryOperationExpression	* result		45972	0					
ANR	45994	UnaryOperator	*		45972	0					
ANR	45995	Identifier	result		45972	1					
ANR	45996	UnaryOperationExpression	* prefix		45972	1					
ANR	45997	UnaryOperator	*		45972	0					
ANR	45998	Identifier	prefix		45972	1					
ANR	45999	IfStatement	if ( is_class_member )		45972	2					
ANR	46000	Condition	is_class_member	2498:5:90373:90387	45972	0	True				
ANR	46001	Identifier	is_class_member		45972	0					
ANR	46002	CompoundStatement		10:22:113:113	45972	1					
ANR	46003	ExpressionStatement	"length = sizeof ( ""::"" ) - 1 + Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )"	2499:2:90394:90477	45972	0	True				
ANR	46004	AssignmentExpression	"length = sizeof ( ""::"" ) - 1 + Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )"		45972	0		=			
ANR	46005	Identifier	length		45972	0					
ANR	46006	AdditiveExpression	"sizeof ( ""::"" ) - 1 + Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )"		45972	1		-			
ANR	46007	SizeofExpression	"sizeof ( ""::"" )"		45972	0					
ANR	46008	Sizeof	sizeof		45972	0					
ANR	46009	PrimaryExpression	"""::"""		45972	1					
ANR	46010	AdditiveExpression	1 + Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )		45972	1		+			
ANR	46011	PrimaryExpression	1		45972	0					
ANR	46012	AdditiveExpression	Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )		45972	1		+			
ANR	46013	CallExpression	Z_STRLEN ( result -> u . constant )		45972	0					
ANR	46014	Callee	Z_STRLEN		45972	0					
ANR	46015	Identifier	Z_STRLEN		45972	0					
ANR	46016	ArgumentList	result -> u . constant		45972	1					
ANR	46017	Argument	result -> u . constant		45972	0					
ANR	46018	MemberAccess	result -> u . constant		45972	0					
ANR	46019	PtrMemberAccess	result -> u		45972	0					
ANR	46020	Identifier	result		45972	0					
ANR	46021	Identifier	u		45972	1					
ANR	46022	Identifier	constant		45972	1					
ANR	46023	CallExpression	Z_STRLEN ( name -> u . constant )		45972	1					
ANR	46024	Callee	Z_STRLEN		45972	0					
ANR	46025	Identifier	Z_STRLEN		45972	0					
ANR	46026	ArgumentList	name -> u . constant		45972	1					
ANR	46027	Argument	name -> u . constant		45972	0					
ANR	46028	MemberAccess	name -> u . constant		45972	0					
ANR	46029	PtrMemberAccess	name -> u		45972	0					
ANR	46030	Identifier	name		45972	0					
ANR	46031	Identifier	u		45972	1					
ANR	46032	Identifier	constant		45972	1					
ANR	46033	ExpressionStatement	"Z_STRVAL ( result -> u . constant ) = str_erealloc ( Z_STRVAL ( result -> u . constant ) , length + 1 )"	2500:2:90481:90564	45972	1	True				
ANR	46034	AssignmentExpression	"Z_STRVAL ( result -> u . constant ) = str_erealloc ( Z_STRVAL ( result -> u . constant ) , length + 1 )"		45972	0		=			
ANR	46035	CallExpression	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46036	Callee	Z_STRVAL		45972	0					
ANR	46037	Identifier	Z_STRVAL		45972	0					
ANR	46038	ArgumentList	result -> u . constant		45972	1					
ANR	46039	Argument	result -> u . constant		45972	0					
ANR	46040	MemberAccess	result -> u . constant		45972	0					
ANR	46041	PtrMemberAccess	result -> u		45972	0					
ANR	46042	Identifier	result		45972	0					
ANR	46043	Identifier	u		45972	1					
ANR	46044	Identifier	constant		45972	1					
ANR	46045	CallExpression	"str_erealloc ( Z_STRVAL ( result -> u . constant ) , length + 1 )"		45972	1					
ANR	46046	Callee	str_erealloc		45972	0					
ANR	46047	Identifier	str_erealloc		45972	0					
ANR	46048	ArgumentList	Z_STRVAL ( result -> u . constant )		45972	1					
ANR	46049	Argument	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46050	CallExpression	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46051	Callee	Z_STRVAL		45972	0					
ANR	46052	Identifier	Z_STRVAL		45972	0					
ANR	46053	ArgumentList	result -> u . constant		45972	1					
ANR	46054	Argument	result -> u . constant		45972	0					
ANR	46055	MemberAccess	result -> u . constant		45972	0					
ANR	46056	PtrMemberAccess	result -> u		45972	0					
ANR	46057	Identifier	result		45972	0					
ANR	46058	Identifier	u		45972	1					
ANR	46059	Identifier	constant		45972	1					
ANR	46060	Argument	length + 1		45972	1					
ANR	46061	AdditiveExpression	length + 1		45972	0		+			
ANR	46062	Identifier	length		45972	0					
ANR	46063	PrimaryExpression	1		45972	1					
ANR	46064	ExpressionStatement	"memcpy ( & Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ] , ""::"" , sizeof ( ""::"" ) - 1 )"	2501:2:90568:90657	45972	2	True				
ANR	46065	CallExpression	"memcpy ( & Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ] , ""::"" , sizeof ( ""::"" ) - 1 )"		45972	0					
ANR	46066	Callee	memcpy		45972	0					
ANR	46067	Identifier	memcpy		45972	0					
ANR	46068	ArgumentList	& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ]		45972	1					
ANR	46069	Argument	& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ]		45972	0					
ANR	46070	UnaryOperationExpression	& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ]		45972	0					
ANR	46071	UnaryOperator	&		45972	0					
ANR	46072	ArrayIndexing	Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ]		45972	1					
ANR	46073	CallExpression	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46074	Callee	Z_STRVAL		45972	0					
ANR	46075	Identifier	Z_STRVAL		45972	0					
ANR	46076	ArgumentList	result -> u . constant		45972	1					
ANR	46077	Argument	result -> u . constant		45972	0					
ANR	46078	MemberAccess	result -> u . constant		45972	0					
ANR	46079	PtrMemberAccess	result -> u		45972	0					
ANR	46080	Identifier	result		45972	0					
ANR	46081	Identifier	u		45972	1					
ANR	46082	Identifier	constant		45972	1					
ANR	46083	CallExpression	Z_STRLEN ( result -> u . constant )		45972	1					
ANR	46084	Callee	Z_STRLEN		45972	0					
ANR	46085	Identifier	Z_STRLEN		45972	0					
ANR	46086	ArgumentList	result -> u . constant		45972	1					
ANR	46087	Argument	result -> u . constant		45972	0					
ANR	46088	MemberAccess	result -> u . constant		45972	0					
ANR	46089	PtrMemberAccess	result -> u		45972	0					
ANR	46090	Identifier	result		45972	0					
ANR	46091	Identifier	u		45972	1					
ANR	46092	Identifier	constant		45972	1					
ANR	46093	Argument	"""::"""		45972	1					
ANR	46094	PrimaryExpression	"""::"""		45972	0					
ANR	46095	Argument	"sizeof ( ""::"" ) - 1"		45972	2					
ANR	46096	AdditiveExpression	"sizeof ( ""::"" ) - 1"		45972	0		-			
ANR	46097	SizeofExpression	"sizeof ( ""::"" )"		45972	0					
ANR	46098	Sizeof	sizeof		45972	0					
ANR	46099	PrimaryExpression	"""::"""		45972	1					
ANR	46100	PrimaryExpression	1		45972	1					
ANR	46101	ExpressionStatement	"memcpy ( & Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""::"" ) - 1 ] , Z_STRVAL ( name -> u . constant ) , Z_STRLEN ( name -> u . constant ) + 1 )"	2502:2:90661:90803	45972	3	True				
ANR	46102	CallExpression	"memcpy ( & Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""::"" ) - 1 ] , Z_STRVAL ( name -> u . constant ) , Z_STRLEN ( name -> u . constant ) + 1 )"		45972	0					
ANR	46103	Callee	memcpy		45972	0					
ANR	46104	Identifier	memcpy		45972	0					
ANR	46105	ArgumentList	"& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""::"" ) - 1 ]"		45972	1					
ANR	46106	Argument	"& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""::"" ) - 1 ]"		45972	0					
ANR	46107	UnaryOperationExpression	"& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""::"" ) - 1 ]"		45972	0					
ANR	46108	UnaryOperator	&		45972	0					
ANR	46109	ArrayIndexing	"Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""::"" ) - 1 ]"		45972	1					
ANR	46110	CallExpression	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46111	Callee	Z_STRVAL		45972	0					
ANR	46112	Identifier	Z_STRVAL		45972	0					
ANR	46113	ArgumentList	result -> u . constant		45972	1					
ANR	46114	Argument	result -> u . constant		45972	0					
ANR	46115	MemberAccess	result -> u . constant		45972	0					
ANR	46116	PtrMemberAccess	result -> u		45972	0					
ANR	46117	Identifier	result		45972	0					
ANR	46118	Identifier	u		45972	1					
ANR	46119	Identifier	constant		45972	1					
ANR	46120	AdditiveExpression	"Z_STRLEN ( result -> u . constant ) + sizeof ( ""::"" ) - 1"		45972	1		+			
ANR	46121	CallExpression	Z_STRLEN ( result -> u . constant )		45972	0					
ANR	46122	Callee	Z_STRLEN		45972	0					
ANR	46123	Identifier	Z_STRLEN		45972	0					
ANR	46124	ArgumentList	result -> u . constant		45972	1					
ANR	46125	Argument	result -> u . constant		45972	0					
ANR	46126	MemberAccess	result -> u . constant		45972	0					
ANR	46127	PtrMemberAccess	result -> u		45972	0					
ANR	46128	Identifier	result		45972	0					
ANR	46129	Identifier	u		45972	1					
ANR	46130	Identifier	constant		45972	1					
ANR	46131	AdditiveExpression	"sizeof ( ""::"" ) - 1"		45972	1		-			
ANR	46132	SizeofExpression	"sizeof ( ""::"" )"		45972	0					
ANR	46133	Sizeof	sizeof		45972	0					
ANR	46134	PrimaryExpression	"""::"""		45972	1					
ANR	46135	PrimaryExpression	1		45972	1					
ANR	46136	Argument	Z_STRVAL ( name -> u . constant )		45972	1					
ANR	46137	CallExpression	Z_STRVAL ( name -> u . constant )		45972	0					
ANR	46138	Callee	Z_STRVAL		45972	0					
ANR	46139	Identifier	Z_STRVAL		45972	0					
ANR	46140	ArgumentList	name -> u . constant		45972	1					
ANR	46141	Argument	name -> u . constant		45972	0					
ANR	46142	MemberAccess	name -> u . constant		45972	0					
ANR	46143	PtrMemberAccess	name -> u		45972	0					
ANR	46144	Identifier	name		45972	0					
ANR	46145	Identifier	u		45972	1					
ANR	46146	Identifier	constant		45972	1					
ANR	46147	Argument	Z_STRLEN ( name -> u . constant ) + 1		45972	2					
ANR	46148	AdditiveExpression	Z_STRLEN ( name -> u . constant ) + 1		45972	0		+			
ANR	46149	CallExpression	Z_STRLEN ( name -> u . constant )		45972	0					
ANR	46150	Callee	Z_STRLEN		45972	0					
ANR	46151	Identifier	Z_STRLEN		45972	0					
ANR	46152	ArgumentList	name -> u . constant		45972	1					
ANR	46153	Argument	name -> u . constant		45972	0					
ANR	46154	MemberAccess	name -> u . constant		45972	0					
ANR	46155	PtrMemberAccess	name -> u		45972	0					
ANR	46156	Identifier	name		45972	0					
ANR	46157	Identifier	u		45972	1					
ANR	46158	Identifier	constant		45972	1					
ANR	46159	PrimaryExpression	1		45972	1					
ANR	46160	ExpressionStatement	str_efree ( Z_STRVAL ( name -> u . constant ) )	2503:2:90807:90844	45972	4	True				
ANR	46161	CallExpression	str_efree ( Z_STRVAL ( name -> u . constant ) )		45972	0					
ANR	46162	Callee	str_efree		45972	0					
ANR	46163	Identifier	str_efree		45972	0					
ANR	46164	ArgumentList	Z_STRVAL ( name -> u . constant )		45972	1					
ANR	46165	Argument	Z_STRVAL ( name -> u . constant )		45972	0					
ANR	46166	CallExpression	Z_STRVAL ( name -> u . constant )		45972	0					
ANR	46167	Callee	Z_STRVAL		45972	0					
ANR	46168	Identifier	Z_STRVAL		45972	0					
ANR	46169	ArgumentList	name -> u . constant		45972	1					
ANR	46170	Argument	name -> u . constant		45972	0					
ANR	46171	MemberAccess	name -> u . constant		45972	0					
ANR	46172	PtrMemberAccess	name -> u		45972	0					
ANR	46173	Identifier	name		45972	0					
ANR	46174	Identifier	u		45972	1					
ANR	46175	Identifier	constant		45972	1					
ANR	46176	ExpressionStatement	Z_STRLEN ( result -> u . constant ) = length	2504:2:90848:90885	45972	5	True				
ANR	46177	AssignmentExpression	Z_STRLEN ( result -> u . constant ) = length		45972	0		=			
ANR	46178	CallExpression	Z_STRLEN ( result -> u . constant )		45972	0					
ANR	46179	Callee	Z_STRLEN		45972	0					
ANR	46180	Identifier	Z_STRLEN		45972	0					
ANR	46181	ArgumentList	result -> u . constant		45972	1					
ANR	46182	Argument	result -> u . constant		45972	0					
ANR	46183	MemberAccess	result -> u . constant		45972	0					
ANR	46184	PtrMemberAccess	result -> u		45972	0					
ANR	46185	Identifier	result		45972	0					
ANR	46186	Identifier	u		45972	1					
ANR	46187	Identifier	constant		45972	1					
ANR	46188	Identifier	length		45972	1					
ANR	46189	ElseStatement	else		45972	0					
ANR	46190	CompoundStatement		17:8:618:618	45972	0					
ANR	46191	ExpressionStatement	"length = sizeof ( ""\\\\"" ) - 1 + Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )"	2506:2:90899:90982	45972	0	True				
ANR	46192	AssignmentExpression	"length = sizeof ( ""\\\\"" ) - 1 + Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )"		45972	0		=			
ANR	46193	Identifier	length		45972	0					
ANR	46194	AdditiveExpression	"sizeof ( ""\\\\"" ) - 1 + Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )"		45972	1		-			
ANR	46195	SizeofExpression	"sizeof ( ""\\\\"" )"		45972	0					
ANR	46196	Sizeof	sizeof		45972	0					
ANR	46197	PrimaryExpression	"""\\\\"""		45972	1					
ANR	46198	AdditiveExpression	1 + Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )		45972	1		+			
ANR	46199	PrimaryExpression	1		45972	0					
ANR	46200	AdditiveExpression	Z_STRLEN ( result -> u . constant ) + Z_STRLEN ( name -> u . constant )		45972	1		+			
ANR	46201	CallExpression	Z_STRLEN ( result -> u . constant )		45972	0					
ANR	46202	Callee	Z_STRLEN		45972	0					
ANR	46203	Identifier	Z_STRLEN		45972	0					
ANR	46204	ArgumentList	result -> u . constant		45972	1					
ANR	46205	Argument	result -> u . constant		45972	0					
ANR	46206	MemberAccess	result -> u . constant		45972	0					
ANR	46207	PtrMemberAccess	result -> u		45972	0					
ANR	46208	Identifier	result		45972	0					
ANR	46209	Identifier	u		45972	1					
ANR	46210	Identifier	constant		45972	1					
ANR	46211	CallExpression	Z_STRLEN ( name -> u . constant )		45972	1					
ANR	46212	Callee	Z_STRLEN		45972	0					
ANR	46213	Identifier	Z_STRLEN		45972	0					
ANR	46214	ArgumentList	name -> u . constant		45972	1					
ANR	46215	Argument	name -> u . constant		45972	0					
ANR	46216	MemberAccess	name -> u . constant		45972	0					
ANR	46217	PtrMemberAccess	name -> u		45972	0					
ANR	46218	Identifier	name		45972	0					
ANR	46219	Identifier	u		45972	1					
ANR	46220	Identifier	constant		45972	1					
ANR	46221	ExpressionStatement	"Z_STRVAL ( result -> u . constant ) = str_erealloc ( Z_STRVAL ( result -> u . constant ) , length + 1 )"	2507:2:90986:91069	45972	1	True				
ANR	46222	AssignmentExpression	"Z_STRVAL ( result -> u . constant ) = str_erealloc ( Z_STRVAL ( result -> u . constant ) , length + 1 )"		45972	0		=			
ANR	46223	CallExpression	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46224	Callee	Z_STRVAL		45972	0					
ANR	46225	Identifier	Z_STRVAL		45972	0					
ANR	46226	ArgumentList	result -> u . constant		45972	1					
ANR	46227	Argument	result -> u . constant		45972	0					
ANR	46228	MemberAccess	result -> u . constant		45972	0					
ANR	46229	PtrMemberAccess	result -> u		45972	0					
ANR	46230	Identifier	result		45972	0					
ANR	46231	Identifier	u		45972	1					
ANR	46232	Identifier	constant		45972	1					
ANR	46233	CallExpression	"str_erealloc ( Z_STRVAL ( result -> u . constant ) , length + 1 )"		45972	1					
ANR	46234	Callee	str_erealloc		45972	0					
ANR	46235	Identifier	str_erealloc		45972	0					
ANR	46236	ArgumentList	Z_STRVAL ( result -> u . constant )		45972	1					
ANR	46237	Argument	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46238	CallExpression	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46239	Callee	Z_STRVAL		45972	0					
ANR	46240	Identifier	Z_STRVAL		45972	0					
ANR	46241	ArgumentList	result -> u . constant		45972	1					
ANR	46242	Argument	result -> u . constant		45972	0					
ANR	46243	MemberAccess	result -> u . constant		45972	0					
ANR	46244	PtrMemberAccess	result -> u		45972	0					
ANR	46245	Identifier	result		45972	0					
ANR	46246	Identifier	u		45972	1					
ANR	46247	Identifier	constant		45972	1					
ANR	46248	Argument	length + 1		45972	1					
ANR	46249	AdditiveExpression	length + 1		45972	0		+			
ANR	46250	Identifier	length		45972	0					
ANR	46251	PrimaryExpression	1		45972	1					
ANR	46252	ExpressionStatement	"memcpy ( & Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ] , ""\\\\"" , sizeof ( ""\\\\"" ) - 1 )"	2508:2:91073:91162	45972	2	True				
ANR	46253	CallExpression	"memcpy ( & Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ] , ""\\\\"" , sizeof ( ""\\\\"" ) - 1 )"		45972	0					
ANR	46254	Callee	memcpy		45972	0					
ANR	46255	Identifier	memcpy		45972	0					
ANR	46256	ArgumentList	& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ]		45972	1					
ANR	46257	Argument	& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ]		45972	0					
ANR	46258	UnaryOperationExpression	& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ]		45972	0					
ANR	46259	UnaryOperator	&		45972	0					
ANR	46260	ArrayIndexing	Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) ]		45972	1					
ANR	46261	CallExpression	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46262	Callee	Z_STRVAL		45972	0					
ANR	46263	Identifier	Z_STRVAL		45972	0					
ANR	46264	ArgumentList	result -> u . constant		45972	1					
ANR	46265	Argument	result -> u . constant		45972	0					
ANR	46266	MemberAccess	result -> u . constant		45972	0					
ANR	46267	PtrMemberAccess	result -> u		45972	0					
ANR	46268	Identifier	result		45972	0					
ANR	46269	Identifier	u		45972	1					
ANR	46270	Identifier	constant		45972	1					
ANR	46271	CallExpression	Z_STRLEN ( result -> u . constant )		45972	1					
ANR	46272	Callee	Z_STRLEN		45972	0					
ANR	46273	Identifier	Z_STRLEN		45972	0					
ANR	46274	ArgumentList	result -> u . constant		45972	1					
ANR	46275	Argument	result -> u . constant		45972	0					
ANR	46276	MemberAccess	result -> u . constant		45972	0					
ANR	46277	PtrMemberAccess	result -> u		45972	0					
ANR	46278	Identifier	result		45972	0					
ANR	46279	Identifier	u		45972	1					
ANR	46280	Identifier	constant		45972	1					
ANR	46281	Argument	"""\\\\"""		45972	1					
ANR	46282	PrimaryExpression	"""\\\\"""		45972	0					
ANR	46283	Argument	"sizeof ( ""\\\\"" ) - 1"		45972	2					
ANR	46284	AdditiveExpression	"sizeof ( ""\\\\"" ) - 1"		45972	0		-			
ANR	46285	SizeofExpression	"sizeof ( ""\\\\"" )"		45972	0					
ANR	46286	Sizeof	sizeof		45972	0					
ANR	46287	PrimaryExpression	"""\\\\"""		45972	1					
ANR	46288	PrimaryExpression	1		45972	1					
ANR	46289	ExpressionStatement	"memcpy ( & Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""\\\\"" ) - 1 ] , Z_STRVAL ( name -> u . constant ) , Z_STRLEN ( name -> u . constant ) + 1 )"	2509:2:91166:91308	45972	3	True				
ANR	46290	CallExpression	"memcpy ( & Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""\\\\"" ) - 1 ] , Z_STRVAL ( name -> u . constant ) , Z_STRLEN ( name -> u . constant ) + 1 )"		45972	0					
ANR	46291	Callee	memcpy		45972	0					
ANR	46292	Identifier	memcpy		45972	0					
ANR	46293	ArgumentList	"& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""\\\\"" ) - 1 ]"		45972	1					
ANR	46294	Argument	"& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""\\\\"" ) - 1 ]"		45972	0					
ANR	46295	UnaryOperationExpression	"& Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""\\\\"" ) - 1 ]"		45972	0					
ANR	46296	UnaryOperator	&		45972	0					
ANR	46297	ArrayIndexing	"Z_STRVAL ( result -> u . constant ) [ Z_STRLEN ( result -> u . constant ) + sizeof ( ""\\\\"" ) - 1 ]"		45972	1					
ANR	46298	CallExpression	Z_STRVAL ( result -> u . constant )		45972	0					
ANR	46299	Callee	Z_STRVAL		45972	0					
ANR	46300	Identifier	Z_STRVAL		45972	0					
ANR	46301	ArgumentList	result -> u . constant		45972	1					
ANR	46302	Argument	result -> u . constant		45972	0					
ANR	46303	MemberAccess	result -> u . constant		45972	0					
ANR	46304	PtrMemberAccess	result -> u		45972	0					
ANR	46305	Identifier	result		45972	0					
ANR	46306	Identifier	u		45972	1					
ANR	46307	Identifier	constant		45972	1					
ANR	46308	AdditiveExpression	"Z_STRLEN ( result -> u . constant ) + sizeof ( ""\\\\"" ) - 1"		45972	1		+			
ANR	46309	CallExpression	Z_STRLEN ( result -> u . constant )		45972	0					
ANR	46310	Callee	Z_STRLEN		45972	0					
ANR	46311	Identifier	Z_STRLEN		45972	0					
ANR	46312	ArgumentList	result -> u . constant		45972	1					
ANR	46313	Argument	result -> u . constant		45972	0					
ANR	46314	MemberAccess	result -> u . constant		45972	0					
ANR	46315	PtrMemberAccess	result -> u		45972	0					
ANR	46316	Identifier	result		45972	0					
ANR	46317	Identifier	u		45972	1					
ANR	46318	Identifier	constant		45972	1					
ANR	46319	AdditiveExpression	"sizeof ( ""\\\\"" ) - 1"		45972	1		-			
ANR	46320	SizeofExpression	"sizeof ( ""\\\\"" )"		45972	0					
ANR	46321	Sizeof	sizeof		45972	0					
ANR	46322	PrimaryExpression	"""\\\\"""		45972	1					
ANR	46323	PrimaryExpression	1		45972	1					
ANR	46324	Argument	Z_STRVAL ( name -> u . constant )		45972	1					
ANR	46325	CallExpression	Z_STRVAL ( name -> u . constant )		45972	0					
ANR	46326	Callee	Z_STRVAL		45972	0					
ANR	46327	Identifier	Z_STRVAL		45972	0					
ANR	46328	ArgumentList	name -> u . constant		45972	1					
ANR	46329	Argument	name -> u . constant		45972	0					
ANR	46330	MemberAccess	name -> u . constant		45972	0					
ANR	46331	PtrMemberAccess	name -> u		45972	0					
ANR	46332	Identifier	name		45972	0					
ANR	46333	Identifier	u		45972	1					
ANR	46334	Identifier	constant		45972	1					
ANR	46335	Argument	Z_STRLEN ( name -> u . constant ) + 1		45972	2					
ANR	46336	AdditiveExpression	Z_STRLEN ( name -> u . constant ) + 1		45972	0		+			
ANR	46337	CallExpression	Z_STRLEN ( name -> u . constant )		45972	0					
ANR	46338	Callee	Z_STRLEN		45972	0					
ANR	46339	Identifier	Z_STRLEN		45972	0					
ANR	46340	ArgumentList	name -> u . constant		45972	1					
ANR	46341	Argument	name -> u . constant		45972	0					
ANR	46342	MemberAccess	name -> u . constant		45972	0					
ANR	46343	PtrMemberAccess	name -> u		45972	0					
ANR	46344	Identifier	name		45972	0					
ANR	46345	Identifier	u		45972	1					
ANR	46346	Identifier	constant		45972	1					
ANR	46347	PrimaryExpression	1		45972	1					
ANR	46348	ExpressionStatement	str_efree ( Z_STRVAL ( name -> u . constant ) )	2510:2:91312:91349	45972	4	True				
ANR	46349	CallExpression	str_efree ( Z_STRVAL ( name -> u . constant ) )		45972	0					
ANR	46350	Callee	str_efree		45972	0					
ANR	46351	Identifier	str_efree		45972	0					
ANR	46352	ArgumentList	Z_STRVAL ( name -> u . constant )		45972	1					
ANR	46353	Argument	Z_STRVAL ( name -> u . constant )		45972	0					
ANR	46354	CallExpression	Z_STRVAL ( name -> u . constant )		45972	0					
ANR	46355	Callee	Z_STRVAL		45972	0					
ANR	46356	Identifier	Z_STRVAL		45972	0					
ANR	46357	ArgumentList	name -> u . constant		45972	1					
ANR	46358	Argument	name -> u . constant		45972	0					
ANR	46359	MemberAccess	name -> u . constant		45972	0					
ANR	46360	PtrMemberAccess	name -> u		45972	0					
ANR	46361	Identifier	name		45972	0					
ANR	46362	Identifier	u		45972	1					
ANR	46363	Identifier	constant		45972	1					
ANR	46364	ExpressionStatement	Z_STRLEN ( result -> u . constant ) = length	2511:2:91353:91390	45972	5	True				
ANR	46365	AssignmentExpression	Z_STRLEN ( result -> u . constant ) = length		45972	0		=			
ANR	46366	CallExpression	Z_STRLEN ( result -> u . constant )		45972	0					
ANR	46367	Callee	Z_STRLEN		45972	0					
ANR	46368	Identifier	Z_STRLEN		45972	0					
ANR	46369	ArgumentList	result -> u . constant		45972	1					
ANR	46370	Argument	result -> u . constant		45972	0					
ANR	46371	MemberAccess	result -> u . constant		45972	0					
ANR	46372	PtrMemberAccess	result -> u		45972	0					
ANR	46373	Identifier	result		45972	0					
ANR	46374	Identifier	u		45972	1					
ANR	46375	Identifier	constant		45972	1					
ANR	46376	Identifier	length		45972	1					
ANR	46377	ReturnType	void		45972	1					
ANR	46378	Identifier	zend_do_build_full_name		45972	2					
ANR	46379	ParameterList	"znode * result , znode * prefix , znode * name , int is_class_member TSRMLS_DC"		45972	3					
ANR	46380	Parameter	znode * result	2488:29:90192:90204	45972	0	True				
ANR	46381	ParameterType	znode *		45972	0					
ANR	46382	Identifier	result		45972	1					
ANR	46383	Parameter	znode * prefix	2488:44:90207:90219	45972	1	True				
ANR	46384	ParameterType	znode *		45972	0					
ANR	46385	Identifier	prefix		45972	1					
ANR	46386	Parameter	znode * name	2488:59:90222:90232	45972	2	True				
ANR	46387	ParameterType	znode *		45972	0					
ANR	46388	Identifier	name		45972	1					
ANR	46389	Parameter	int is_class_member TSRMLS_DC	2488:72:90235:90263	45972	3	True				
ANR	46390	ParameterType	int is_class_member		45972	0					
ANR	46391	Identifier	TSRMLS_DC		45972	1					
ANR	46392	CFGEntryNode	ENTRY		45972		True				
ANR	46393	CFGExitNode	EXIT		45972		True				
ANR	46394	Symbol	* name		45972						
ANR	46395	Symbol	result -> u . constant		45972						
ANR	46396	Symbol	str_erealloc		45972						
ANR	46397	Symbol	* prefix		45972						
ANR	46398	Symbol	prefix		45972						
ANR	46399	Symbol	length		45972						
ANR	46400	Symbol	name -> u		45972						
ANR	46401	Symbol	Z_STRLEN		45972						
ANR	46402	Symbol	TSRMLS_DC		45972						
ANR	46403	Symbol	result -> u		45972						
ANR	46404	Symbol	is_class_member		45972						
ANR	46405	Symbol	result		45972						
ANR	46406	Symbol	name -> u . constant		45972						
ANR	46407	Symbol	* result		45972						
ANR	46408	Symbol	Z_STRVAL		45972						
ANR	46409	Symbol	name		45972						
ANR	46410	DeclStmt									
ANR	46411	Decl							znode	znode	class_node
ANR	46412	DeclStmt									
ANR	46413	Decl							zend_op	zend_op *	opline
ANR	46414	DeclStmt									
ANR	46415	Decl							char	char *	lcname
ANR	46416	Function	zend_do_end_function_call	2576:0:93574:95279							
ANR	46417	FunctionDef	"zend_do_end_function_call (znode * function_name , znode * result , int is_method , int is_dynamic_fcall TSRMLS_DC)"		46416	0					
ANR	46418	CompoundStatement		2577:0:93699:95279	46416	0					
ANR	46419	IdentifierDeclStatement	zend_op * opline ;	2578:1:93702:93717	46416	0	True				
ANR	46420	IdentifierDecl	* opline		46416	0					
ANR	46421	IdentifierDeclType	zend_op *		46416	0					
ANR	46422	Identifier	opline		46416	1					
ANR	46423	IdentifierDeclStatement	zend_function_call_entry * fcall ;	2579:1:93720:93751	46416	1	True				
ANR	46424	IdentifierDecl	* fcall		46416	0					
ANR	46425	IdentifierDeclType	zend_function_call_entry *		46416	0					
ANR	46426	Identifier	fcall		46416	1					
ANR	46427	ExpressionStatement	"zend_stack_top ( & CG ( function_call_stack ) , ( void * * ) & fcall )"	2580:1:93754:93812	46416	2	True				
ANR	46428	CallExpression	"zend_stack_top ( & CG ( function_call_stack ) , ( void * * ) & fcall )"		46416	0					
ANR	46429	Callee	zend_stack_top		46416	0					
ANR	46430	Identifier	zend_stack_top		46416	0					
ANR	46431	ArgumentList	& CG ( function_call_stack )		46416	1					
ANR	46432	Argument	& CG ( function_call_stack )		46416	0					
ANR	46433	UnaryOperationExpression	& CG ( function_call_stack )		46416	0					
ANR	46434	UnaryOperator	&		46416	0					
ANR	46435	CallExpression	CG ( function_call_stack )		46416	1					
ANR	46436	Callee	CG		46416	0					
ANR	46437	Identifier	CG		46416	0					
ANR	46438	ArgumentList	function_call_stack		46416	1					
ANR	46439	Argument	function_call_stack		46416	0					
ANR	46440	Identifier	function_call_stack		46416	0					
ANR	46441	Argument	( void * * ) & fcall		46416	1					
ANR	46442	CastExpression	( void * * ) & fcall		46416	0					
ANR	46443	CastTarget	void * *		46416	0					
ANR	46444	UnaryOperationExpression	& fcall		46416	1					
ANR	46445	UnaryOperator	&		46416	0					
ANR	46446	Identifier	fcall		46416	1					
ANR	46447	IfStatement	if ( is_method && function_name && function_name -> op_type == IS_UNUSED )		46416	3					
ANR	46448	Condition	is_method && function_name && function_name -> op_type == IS_UNUSED	2582:5:93820:93884	46416	0	True				
ANR	46449	AndExpression	is_method && function_name && function_name -> op_type == IS_UNUSED		46416	0		&&			
ANR	46450	Identifier	is_method		46416	0					
ANR	46451	AndExpression	function_name && function_name -> op_type == IS_UNUSED		46416	1		&&			
ANR	46452	Identifier	function_name		46416	0					
ANR	46453	EqualityExpression	function_name -> op_type == IS_UNUSED		46416	1		==			
ANR	46454	PtrMemberAccess	function_name -> op_type		46416	0					
ANR	46455	Identifier	function_name		46416	0					
ANR	46456	Identifier	op_type		46416	1					
ANR	46457	Identifier	IS_UNUSED		46416	1					
ANR	46458	CompoundStatement		6:72:187:187	46416	1					
ANR	46459	IfStatement	if ( fcall -> arg_num != 0 )		46416	0					
ANR	46460	Condition	fcall -> arg_num != 0	2584:6:93909:93927	46416	0	True				
ANR	46461	EqualityExpression	fcall -> arg_num != 0		46416	0		!=			
ANR	46462	PtrMemberAccess	fcall -> arg_num		46416	0					
ANR	46463	Identifier	fcall		46416	0					
ANR	46464	Identifier	arg_num		46416	1					
ANR	46465	PrimaryExpression	0		46416	1					
ANR	46466	CompoundStatement		8:27:230:230	46416	1					
ANR	46467	ExpressionStatement	"zend_error ( E_WARNING , ""Clone method does not require arguments"" )"	2585:3:93935:93999	46416	0	True				
ANR	46468	CallExpression	"zend_error ( E_WARNING , ""Clone method does not require arguments"" )"		46416	0					
ANR	46469	Callee	zend_error		46416	0					
ANR	46470	Identifier	zend_error		46416	0					
ANR	46471	ArgumentList	E_WARNING		46416	1					
ANR	46472	Argument	E_WARNING		46416	0					
ANR	46473	Identifier	E_WARNING		46416	0					
ANR	46474	Argument	"""Clone method does not require arguments"""		46416	1					
ANR	46475	PrimaryExpression	"""Clone method does not require arguments"""		46416	0					
ANR	46476	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ Z_LVAL ( function_name -> u . constant ) ]	2587:2:94007:94080	46416	1	True				
ANR	46477	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ Z_LVAL ( function_name -> u . constant ) ]		46416	0		=			
ANR	46478	Identifier	opline		46416	0					
ANR	46479	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ Z_LVAL ( function_name -> u . constant ) ]		46416	1					
ANR	46480	UnaryOperator	&		46416	0					
ANR	46481	ArrayIndexing	CG ( active_op_array ) -> opcodes [ Z_LVAL ( function_name -> u . constant ) ]		46416	1					
ANR	46482	PtrMemberAccess	CG ( active_op_array ) -> opcodes		46416	0					
ANR	46483	CallExpression	CG ( active_op_array )		46416	0					
ANR	46484	Callee	CG		46416	0					
ANR	46485	Identifier	CG		46416	0					
ANR	46486	ArgumentList	active_op_array		46416	1					
ANR	46487	Argument	active_op_array		46416	0					
ANR	46488	Identifier	active_op_array		46416	0					
ANR	46489	Identifier	opcodes		46416	1					
ANR	46490	CallExpression	Z_LVAL ( function_name -> u . constant )		46416	1					
ANR	46491	Callee	Z_LVAL		46416	0					
ANR	46492	Identifier	Z_LVAL		46416	0					
ANR	46493	ArgumentList	function_name -> u . constant		46416	1					
ANR	46494	Argument	function_name -> u . constant		46416	0					
ANR	46495	MemberAccess	function_name -> u . constant		46416	0					
ANR	46496	PtrMemberAccess	function_name -> u		46416	0					
ANR	46497	Identifier	function_name		46416	0					
ANR	46498	Identifier	u		46416	1					
ANR	46499	Identifier	constant		46416	1					
ANR	46500	ElseStatement	else		46416	0					
ANR	46501	CompoundStatement		12:8:390:390	46416	0					
ANR	46502	Statement	opline	2589:2:94094:94099	46416	0	True				
ANR	46503	Statement	=	2589:9:94101:94101	46416	1	True				
ANR	46504	Statement	get_next_op	2589:11:94103:94113	46416	2	True				
ANR	46505	Statement	(	2589:22:94114:94114	46416	3	True				
ANR	46506	Statement	CG	2589:23:94115:94116	46416	4	True				
ANR	46507	Statement	(	2589:25:94117:94117	46416	5	True				
ANR	46508	Statement	active_op_array	2589:26:94118:94132	46416	6	True				
ANR	46509	Statement	)	2589:41:94133:94133	46416	7	True				
ANR	46510	Statement	TSRMLS_CC	2589:43:94135:94143	46416	8	True				
ANR	46511	Statement	)	2589:52:94144:94144	46416	9	True				
ANR	46512	ExpressionStatement		2589:53:94145:94145	46416	10	True				
ANR	46513	IfStatement	if ( fcall -> fbc )		46416	11					
ANR	46514	Condition	fcall -> fbc	2590:6:94153:94162	46416	0	True				
ANR	46515	PtrMemberAccess	fcall -> fbc		46416	0					
ANR	46516	Identifier	fcall		46416	0					
ANR	46517	Identifier	fbc		46416	1					
ANR	46518	CompoundStatement		14:18:465:465	46416	1					
ANR	46519	ExpressionStatement	opline -> opcode = ZEND_DO_FCALL	2591:3:94170:94200	46416	0	True				
ANR	46520	AssignmentExpression	opline -> opcode = ZEND_DO_FCALL		46416	0		=			
ANR	46521	PtrMemberAccess	opline -> opcode		46416	0					
ANR	46522	Identifier	opline		46416	0					
ANR	46523	Identifier	opcode		46416	1					
ANR	46524	Identifier	ZEND_DO_FCALL		46416	1					
ANR	46525	ExpressionStatement	"SET_NODE ( opline -> op1 , function_name )"	2592:3:94205:94241	46416	1	True				
ANR	46526	CallExpression	"SET_NODE ( opline -> op1 , function_name )"		46416	0					
ANR	46527	Callee	SET_NODE		46416	0					
ANR	46528	Identifier	SET_NODE		46416	0					
ANR	46529	ArgumentList	opline -> op1		46416	1					
ANR	46530	Argument	opline -> op1		46416	0					
ANR	46531	PtrMemberAccess	opline -> op1		46416	0					
ANR	46532	Identifier	opline		46416	0					
ANR	46533	Identifier	op1		46416	1					
ANR	46534	Argument	function_name		46416	1					
ANR	46535	Identifier	function_name		46416	0					
ANR	46536	ExpressionStatement	SET_UNUSED ( opline -> op2 )	2593:3:94246:94269	46416	2	True				
ANR	46537	CallExpression	SET_UNUSED ( opline -> op2 )		46416	0					
ANR	46538	Callee	SET_UNUSED		46416	0					
ANR	46539	Identifier	SET_UNUSED		46416	0					
ANR	46540	ArgumentList	opline -> op2		46416	1					
ANR	46541	Argument	opline -> op2		46416	0					
ANR	46542	PtrMemberAccess	opline -> op2		46416	0					
ANR	46543	Identifier	opline		46416	0					
ANR	46544	Identifier	op2		46416	1					
ANR	46545	ExpressionStatement	opline -> op2 . num = CG ( context ) . nested_calls	2594:3:94274:94316	46416	3	True				
ANR	46546	AssignmentExpression	opline -> op2 . num = CG ( context ) . nested_calls		46416	0		=			
ANR	46547	MemberAccess	opline -> op2 . num		46416	0					
ANR	46548	PtrMemberAccess	opline -> op2		46416	0					
ANR	46549	Identifier	opline		46416	0					
ANR	46550	Identifier	op2		46416	1					
ANR	46551	Identifier	num		46416	1					
ANR	46552	MemberAccess	CG ( context ) . nested_calls		46416	1					
ANR	46553	CallExpression	CG ( context )		46416	0					
ANR	46554	Callee	CG		46416	0					
ANR	46555	Identifier	CG		46416	0					
ANR	46556	ArgumentList	context		46416	1					
ANR	46557	Argument	context		46416	0					
ANR	46558	Identifier	context		46416	0					
ANR	46559	Identifier	nested_calls		46416	1					
ANR	46560	ExpressionStatement	CALCULATE_LITERAL_HASH ( opline -> op1 . constant )	2595:3:94321:94365	46416	4	True				
ANR	46561	CallExpression	CALCULATE_LITERAL_HASH ( opline -> op1 . constant )		46416	0					
ANR	46562	Callee	CALCULATE_LITERAL_HASH		46416	0					
ANR	46563	Identifier	CALCULATE_LITERAL_HASH		46416	0					
ANR	46564	ArgumentList	opline -> op1 . constant		46416	1					
ANR	46565	Argument	opline -> op1 . constant		46416	0					
ANR	46566	MemberAccess	opline -> op1 . constant		46416	0					
ANR	46567	PtrMemberAccess	opline -> op1		46416	0					
ANR	46568	Identifier	opline		46416	0					
ANR	46569	Identifier	op1		46416	1					
ANR	46570	Identifier	constant		46416	1					
ANR	46571	ExpressionStatement	GET_CACHE_SLOT ( opline -> op1 . constant )	2596:3:94370:94406	46416	5	True				
ANR	46572	CallExpression	GET_CACHE_SLOT ( opline -> op1 . constant )		46416	0					
ANR	46573	Callee	GET_CACHE_SLOT		46416	0					
ANR	46574	Identifier	GET_CACHE_SLOT		46416	0					
ANR	46575	ArgumentList	opline -> op1 . constant		46416	1					
ANR	46576	Argument	opline -> op1 . constant		46416	0					
ANR	46577	MemberAccess	opline -> op1 . constant		46416	0					
ANR	46578	PtrMemberAccess	opline -> op1		46416	0					
ANR	46579	Identifier	opline		46416	0					
ANR	46580	Identifier	op1		46416	1					
ANR	46581	Identifier	constant		46416	1					
ANR	46582	ElseStatement	else		46416	0					
ANR	46583	CompoundStatement		21:9:717:717	46416	0					
ANR	46584	ExpressionStatement	opline -> opcode = ZEND_DO_FCALL_BY_NAME	2598:3:94422:94460	46416	0	True				
ANR	46585	AssignmentExpression	opline -> opcode = ZEND_DO_FCALL_BY_NAME		46416	0		=			
ANR	46586	PtrMemberAccess	opline -> opcode		46416	0					
ANR	46587	Identifier	opline		46416	0					
ANR	46588	Identifier	opcode		46416	1					
ANR	46589	Identifier	ZEND_DO_FCALL_BY_NAME		46416	1					
ANR	46590	ExpressionStatement	SET_UNUSED ( opline -> op1 )	2599:3:94465:94488	46416	1	True				
ANR	46591	CallExpression	SET_UNUSED ( opline -> op1 )		46416	0					
ANR	46592	Callee	SET_UNUSED		46416	0					
ANR	46593	Identifier	SET_UNUSED		46416	0					
ANR	46594	ArgumentList	opline -> op1		46416	1					
ANR	46595	Argument	opline -> op1		46416	0					
ANR	46596	PtrMemberAccess	opline -> op1		46416	0					
ANR	46597	Identifier	opline		46416	0					
ANR	46598	Identifier	op1		46416	1					
ANR	46599	ExpressionStatement	SET_UNUSED ( opline -> op2 )	2600:3:94493:94516	46416	2	True				
ANR	46600	CallExpression	SET_UNUSED ( opline -> op2 )		46416	0					
ANR	46601	Callee	SET_UNUSED		46416	0					
ANR	46602	Identifier	SET_UNUSED		46416	0					
ANR	46603	ArgumentList	opline -> op2		46416	1					
ANR	46604	Argument	opline -> op2		46416	0					
ANR	46605	PtrMemberAccess	opline -> op2		46416	0					
ANR	46606	Identifier	opline		46416	0					
ANR	46607	Identifier	op2		46416	1					
ANR	46608	ExpressionStatement	opline -> op2 . num = -- CG ( context ) . nested_calls	2601:3:94521:94565	46416	3	True				
ANR	46609	AssignmentExpression	opline -> op2 . num = -- CG ( context ) . nested_calls		46416	0		=			
ANR	46610	MemberAccess	opline -> op2 . num		46416	0					
ANR	46611	PtrMemberAccess	opline -> op2		46416	0					
ANR	46612	Identifier	opline		46416	0					
ANR	46613	Identifier	op2		46416	1					
ANR	46614	Identifier	num		46416	1					
ANR	46615	UnaryExpression	-- CG ( context ) . nested_calls		46416	1					
ANR	46616	IncDec	--		46416	0					
ANR	46617	MemberAccess	CG ( context ) . nested_calls		46416	1					
ANR	46618	CallExpression	CG ( context )		46416	0					
ANR	46619	Callee	CG		46416	0					
ANR	46620	Identifier	CG		46416	0					
ANR	46621	ArgumentList	context		46416	1					
ANR	46622	Argument	context		46416	0					
ANR	46623	Identifier	context		46416	0					
ANR	46624	Identifier	nested_calls		46416	1					
ANR	46625	IfStatement	if ( ! is_method && ! is_dynamic_fcall && function_name -> op_type == IS_CONST )		46416	4					
ANR	46626	Condition	! is_method && ! is_dynamic_fcall && function_name -> op_type == IS_CONST	2606:7:94750:94816	46416	0	True				
ANR	46627	AndExpression	! is_method && ! is_dynamic_fcall && function_name -> op_type == IS_CONST		46416	0		&&			
ANR	46628	UnaryOperationExpression	! is_method		46416	0					
ANR	46629	UnaryOperator	!		46416	0					
ANR	46630	Identifier	is_method		46416	1					
ANR	46631	AndExpression	! is_dynamic_fcall && function_name -> op_type == IS_CONST		46416	1		&&			
ANR	46632	UnaryOperationExpression	! is_dynamic_fcall		46416	0					
ANR	46633	UnaryOperator	!		46416	0					
ANR	46634	Identifier	is_dynamic_fcall		46416	1					
ANR	46635	EqualityExpression	function_name -> op_type == IS_CONST		46416	1		==			
ANR	46636	PtrMemberAccess	function_name -> op_type		46416	0					
ANR	46637	Identifier	function_name		46416	0					
ANR	46638	Identifier	op_type		46416	1					
ANR	46639	Identifier	IS_CONST		46416	1					
ANR	46640	CompoundStatement		30:76:1119:1119	46416	1					
ANR	46641	ExpressionStatement	zval_dtor ( & function_name -> u . constant )	2607:4:94825:94862	46416	0	True				
ANR	46642	CallExpression	zval_dtor ( & function_name -> u . constant )		46416	0					
ANR	46643	Callee	zval_dtor		46416	0					
ANR	46644	Identifier	zval_dtor		46416	0					
ANR	46645	ArgumentList	& function_name -> u . constant		46416	1					
ANR	46646	Argument	& function_name -> u . constant		46416	0					
ANR	46647	UnaryOperationExpression	& function_name -> u . constant		46416	0					
ANR	46648	UnaryOperator	&		46416	0					
ANR	46649	MemberAccess	function_name -> u . constant		46416	1					
ANR	46650	PtrMemberAccess	function_name -> u		46416	0					
ANR	46651	Identifier	function_name		46416	0					
ANR	46652	Identifier	u		46416	1					
ANR	46653	Identifier	constant		46416	1					
ANR	46654	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	2612:1:94878:94942	46416	4	True				
ANR	46655	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		46416	0		=			
ANR	46656	MemberAccess	opline -> result . var		46416	0					
ANR	46657	PtrMemberAccess	opline -> result		46416	0					
ANR	46658	Identifier	opline		46416	0					
ANR	46659	Identifier	result		46416	1					
ANR	46660	Identifier	var		46416	1					
ANR	46661	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		46416	1					
ANR	46662	Callee	get_temporary_variable		46416	0					
ANR	46663	Identifier	get_temporary_variable		46416	0					
ANR	46664	ArgumentList	CG ( active_op_array )		46416	1					
ANR	46665	Argument	CG ( active_op_array )		46416	0					
ANR	46666	CallExpression	CG ( active_op_array )		46416	0					
ANR	46667	Callee	CG		46416	0					
ANR	46668	Identifier	CG		46416	0					
ANR	46669	ArgumentList	active_op_array		46416	1					
ANR	46670	Argument	active_op_array		46416	0					
ANR	46671	Identifier	active_op_array		46416	0					
ANR	46672	ExpressionStatement	opline -> result_type = IS_VAR	2613:1:94945:94973	46416	5	True				
ANR	46673	AssignmentExpression	opline -> result_type = IS_VAR		46416	0		=			
ANR	46674	PtrMemberAccess	opline -> result_type		46416	0					
ANR	46675	Identifier	opline		46416	0					
ANR	46676	Identifier	result_type		46416	1					
ANR	46677	Identifier	IS_VAR		46416	1					
ANR	46678	ExpressionStatement	"GET_NODE ( result , opline -> result )"	2614:1:94976:95008	46416	6	True				
ANR	46679	CallExpression	"GET_NODE ( result , opline -> result )"		46416	0					
ANR	46680	Callee	GET_NODE		46416	0					
ANR	46681	Identifier	GET_NODE		46416	0					
ANR	46682	ArgumentList	result		46416	1					
ANR	46683	Argument	result		46416	0					
ANR	46684	Identifier	result		46416	0					
ANR	46685	Argument	opline -> result		46416	1					
ANR	46686	PtrMemberAccess	opline -> result		46416	0					
ANR	46687	Identifier	opline		46416	0					
ANR	46688	Identifier	result		46416	1					
ANR	46689	ExpressionStatement	opline -> extended_value = fcall -> arg_num	2615:1:95011:95050	46416	7	True				
ANR	46690	AssignmentExpression	opline -> extended_value = fcall -> arg_num		46416	0		=			
ANR	46691	PtrMemberAccess	opline -> extended_value		46416	0					
ANR	46692	Identifier	opline		46416	0					
ANR	46693	Identifier	extended_value		46416	1					
ANR	46694	PtrMemberAccess	fcall -> arg_num		46416	1					
ANR	46695	Identifier	fcall		46416	0					
ANR	46696	Identifier	arg_num		46416	1					
ANR	46697	IfStatement	if ( CG ( context ) . used_stack + 1 > CG ( active_op_array ) -> used_stack )		46416	8					
ANR	46698	Condition	CG ( context ) . used_stack + 1 > CG ( active_op_array ) -> used_stack	2617:5:95058:95117	46416	0	True				
ANR	46699	RelationalExpression	CG ( context ) . used_stack + 1 > CG ( active_op_array ) -> used_stack		46416	0		>			
ANR	46700	AdditiveExpression	CG ( context ) . used_stack + 1		46416	0		+			
ANR	46701	MemberAccess	CG ( context ) . used_stack		46416	0					
ANR	46702	CallExpression	CG ( context )		46416	0					
ANR	46703	Callee	CG		46416	0					
ANR	46704	Identifier	CG		46416	0					
ANR	46705	ArgumentList	context		46416	1					
ANR	46706	Argument	context		46416	0					
ANR	46707	Identifier	context		46416	0					
ANR	46708	Identifier	used_stack		46416	1					
ANR	46709	PrimaryExpression	1		46416	1					
ANR	46710	PtrMemberAccess	CG ( active_op_array ) -> used_stack		46416	1					
ANR	46711	CallExpression	CG ( active_op_array )		46416	0					
ANR	46712	Callee	CG		46416	0					
ANR	46713	Identifier	CG		46416	0					
ANR	46714	ArgumentList	active_op_array		46416	1					
ANR	46715	Argument	active_op_array		46416	0					
ANR	46716	Identifier	active_op_array		46416	0					
ANR	46717	Identifier	used_stack		46416	1					
ANR	46718	CompoundStatement		41:67:1420:1420	46416	1					
ANR	46719	ExpressionStatement	CG ( active_op_array ) -> used_stack = CG ( context ) . used_stack + 1	2618:2:95124:95184	46416	0	True				
ANR	46720	AssignmentExpression	CG ( active_op_array ) -> used_stack = CG ( context ) . used_stack + 1		46416	0		=			
ANR	46721	PtrMemberAccess	CG ( active_op_array ) -> used_stack		46416	0					
ANR	46722	CallExpression	CG ( active_op_array )		46416	0					
ANR	46723	Callee	CG		46416	0					
ANR	46724	Identifier	CG		46416	0					
ANR	46725	ArgumentList	active_op_array		46416	1					
ANR	46726	Argument	active_op_array		46416	0					
ANR	46727	Identifier	active_op_array		46416	0					
ANR	46728	Identifier	used_stack		46416	1					
ANR	46729	AdditiveExpression	CG ( context ) . used_stack + 1		46416	1		+			
ANR	46730	MemberAccess	CG ( context ) . used_stack		46416	0					
ANR	46731	CallExpression	CG ( context )		46416	0					
ANR	46732	Callee	CG		46416	0					
ANR	46733	Identifier	CG		46416	0					
ANR	46734	ArgumentList	context		46416	1					
ANR	46735	Argument	context		46416	0					
ANR	46736	Identifier	context		46416	0					
ANR	46737	Identifier	used_stack		46416	1					
ANR	46738	PrimaryExpression	1		46416	1					
ANR	46739	ExpressionStatement	CG ( context ) . used_stack -= fcall -> arg_num	2620:1:95190:95230	46416	9	True				
ANR	46740	AssignmentExpression	CG ( context ) . used_stack -= fcall -> arg_num		46416	0		-=			
ANR	46741	MemberAccess	CG ( context ) . used_stack		46416	0					
ANR	46742	CallExpression	CG ( context )		46416	0					
ANR	46743	Callee	CG		46416	0					
ANR	46744	Identifier	CG		46416	0					
ANR	46745	ArgumentList	context		46416	1					
ANR	46746	Argument	context		46416	0					
ANR	46747	Identifier	context		46416	0					
ANR	46748	Identifier	used_stack		46416	1					
ANR	46749	PtrMemberAccess	fcall -> arg_num		46416	1					
ANR	46750	Identifier	fcall		46416	0					
ANR	46751	Identifier	arg_num		46416	1					
ANR	46752	ExpressionStatement	zend_stack_del_top ( & CG ( function_call_stack ) )	2621:1:95233:95277	46416	10	True				
ANR	46753	CallExpression	zend_stack_del_top ( & CG ( function_call_stack ) )		46416	0					
ANR	46754	Callee	zend_stack_del_top		46416	0					
ANR	46755	Identifier	zend_stack_del_top		46416	0					
ANR	46756	ArgumentList	& CG ( function_call_stack )		46416	1					
ANR	46757	Argument	& CG ( function_call_stack )		46416	0					
ANR	46758	UnaryOperationExpression	& CG ( function_call_stack )		46416	0					
ANR	46759	UnaryOperator	&		46416	0					
ANR	46760	CallExpression	CG ( function_call_stack )		46416	1					
ANR	46761	Callee	CG		46416	0					
ANR	46762	Identifier	CG		46416	0					
ANR	46763	ArgumentList	function_call_stack		46416	1					
ANR	46764	Argument	function_call_stack		46416	0					
ANR	46765	Identifier	function_call_stack		46416	0					
ANR	46766	ReturnType	void		46416	1					
ANR	46767	Identifier	zend_do_end_function_call		46416	2					
ANR	46768	ParameterList	"znode * function_name , znode * result , int is_method , int is_dynamic_fcall TSRMLS_DC"		46416	3					
ANR	46769	Parameter	znode * function_name	2576:31:93605:93624	46416	0	True				
ANR	46770	ParameterType	znode *		46416	0					
ANR	46771	Identifier	function_name		46416	1					
ANR	46772	Parameter	znode * result	2576:53:93627:93639	46416	1	True				
ANR	46773	ParameterType	znode *		46416	0					
ANR	46774	Identifier	result		46416	1					
ANR	46775	Parameter	int is_method	2576:68:93642:93654	46416	2	True				
ANR	46776	ParameterType	int		46416	0					
ANR	46777	Identifier	is_method		46416	1					
ANR	46778	Parameter	int is_dynamic_fcall TSRMLS_DC	2576:83:93657:93686	46416	3	True				
ANR	46779	ParameterType	int is_dynamic_fcall		46416	0					
ANR	46780	Identifier	TSRMLS_DC		46416	1					
ANR	46781	CFGEntryNode	ENTRY		46416		True				
ANR	46782	CFGExitNode	EXIT		46416		True				
ANR	46783	Symbol	opline -> op1		46416						
ANR	46784	Symbol	opline -> op2		46416						
ANR	46785	Symbol	* function_name		46416						
ANR	46786	Symbol	ZEND_DO_FCALL_BY_NAME		46416						
ANR	46787	Symbol	fcall -> arg_num		46416						
ANR	46788	Symbol	Z_LVAL		46416						
ANR	46789	Symbol	* CG		46416						
ANR	46790	Symbol	get_temporary_variable		46416						
ANR	46791	Symbol	CG ( context ) . used_stack		46416						
ANR	46792	Symbol	TSRMLS_DC		46416						
ANR	46793	Symbol	CG ( active_op_array ) -> opcodes		46416						
ANR	46794	Symbol	opline -> result		46416						
ANR	46795	Symbol	opline -> extended_value		46416						
ANR	46796	Symbol	fcall		46416						
ANR	46797	Symbol	& CG		46416						
ANR	46798	Symbol	is_dynamic_fcall		46416						
ANR	46799	Symbol	result		46416						
ANR	46800	Symbol	E_WARNING		46416						
ANR	46801	Symbol	function_name -> u		46416						
ANR	46802	Symbol	opline		46416						
ANR	46803	Symbol	CG ( context ) . nested_calls		46416						
ANR	46804	Symbol	opline -> op1 . constant		46416						
ANR	46805	Symbol	function_call_stack		46416						
ANR	46806	Symbol	& function_name -> u		46416						
ANR	46807	Symbol	context		46416						
ANR	46808	Symbol	& fcall		46416						
ANR	46809	Symbol	& function_name -> u . constant		46416						
ANR	46810	Symbol	CG ( active_op_array ) -> used_stack		46416						
ANR	46811	Symbol	opline -> result_type		46416						
ANR	46812	Symbol	fcall -> fbc		46416						
ANR	46813	Symbol	opline -> op2 . num		46416						
ANR	46814	Symbol	* fcall		46416						
ANR	46815	Symbol	IS_CONST		46416						
ANR	46816	Symbol	CG		46416						
ANR	46817	Symbol	active_op_array		46416						
ANR	46818	Symbol	function_name -> u . constant		46416						
ANR	46819	Symbol	* opline		46416						
ANR	46820	Symbol	ZEND_DO_FCALL		46416						
ANR	46821	Symbol	opline -> opcode		46416						
ANR	46822	Symbol	function_name		46416						
ANR	46823	Symbol	is_method		46416						
ANR	46824	Symbol	function_name -> op_type		46416						
ANR	46825	Symbol	IS_VAR		46416						
ANR	46826	Symbol	opline -> result . var		46416						
ANR	46827	Symbol	IS_UNUSED		46416						
ANR	46828	Function	zend_do_pass_param	2625:0:95292:98625							
ANR	46829	FunctionDef	"zend_do_pass_param (znode * param , zend_uchar op TSRMLS_DC)"		46828	0					
ANR	46830	CompoundStatement		2626:0:95365:98625	46828	0					
ANR	46831	IdentifierDeclStatement	zend_op * opline ;	2627:1:95368:95383	46828	0	True				
ANR	46832	IdentifierDecl	* opline		46828	0					
ANR	46833	IdentifierDeclType	zend_op *		46828	0					
ANR	46834	Identifier	opline		46828	1					
ANR	46835	IdentifierDeclStatement	int original_op = op ;	2628:1:95386:95406	46828	1	True				
ANR	46836	IdentifierDecl	original_op = op		46828	0					
ANR	46837	IdentifierDeclType	int		46828	0					
ANR	46838	Identifier	original_op		46828	1					
ANR	46839	AssignmentExpression	original_op = op		46828	2		=			
ANR	46840	Identifier	op		46828	0					
ANR	46841	Identifier	op		46828	1					
ANR	46842	IdentifierDeclStatement	zend_function_call_entry * fcall ;	2629:1:95409:95440	46828	2	True				
ANR	46843	IdentifierDecl	* fcall		46828	0					
ANR	46844	IdentifierDeclType	zend_function_call_entry *		46828	0					
ANR	46845	Identifier	fcall		46828	1					
ANR	46846	IdentifierDeclStatement	zend_function * function_ptr ;	2630:1:95443:95470	46828	3	True				
ANR	46847	IdentifierDecl	* function_ptr		46828	0					
ANR	46848	IdentifierDeclType	zend_function *		46828	0					
ANR	46849	Identifier	function_ptr		46828	1					
ANR	46850	IdentifierDeclStatement	int send_by_reference = 0 ;	2631:1:95473:95498	46828	4	True				
ANR	46851	IdentifierDecl	send_by_reference = 0		46828	0					
ANR	46852	IdentifierDeclType	int		46828	0					
ANR	46853	Identifier	send_by_reference		46828	1					
ANR	46854	AssignmentExpression	send_by_reference = 0		46828	2		=			
ANR	46855	Identifier	send_by_reference		46828	0					
ANR	46856	PrimaryExpression	0		46828	1					
ANR	46857	IdentifierDeclStatement	int send_function = 0 ;	2632:1:95501:95522	46828	5	True				
ANR	46858	IdentifierDecl	send_function = 0		46828	0					
ANR	46859	IdentifierDeclType	int		46828	0					
ANR	46860	Identifier	send_function		46828	1					
ANR	46861	AssignmentExpression	send_function = 0		46828	2		=			
ANR	46862	Identifier	send_function		46828	0					
ANR	46863	PrimaryExpression	0		46828	1					
ANR	46864	ExpressionStatement	"zend_stack_top ( & CG ( function_call_stack ) , ( void * * ) & fcall )"	2634:1:95526:95584	46828	6	True				
ANR	46865	CallExpression	"zend_stack_top ( & CG ( function_call_stack ) , ( void * * ) & fcall )"		46828	0					
ANR	46866	Callee	zend_stack_top		46828	0					
ANR	46867	Identifier	zend_stack_top		46828	0					
ANR	46868	ArgumentList	& CG ( function_call_stack )		46828	1					
ANR	46869	Argument	& CG ( function_call_stack )		46828	0					
ANR	46870	UnaryOperationExpression	& CG ( function_call_stack )		46828	0					
ANR	46871	UnaryOperator	&		46828	0					
ANR	46872	CallExpression	CG ( function_call_stack )		46828	1					
ANR	46873	Callee	CG		46828	0					
ANR	46874	Identifier	CG		46828	0					
ANR	46875	ArgumentList	function_call_stack		46828	1					
ANR	46876	Argument	function_call_stack		46828	0					
ANR	46877	Identifier	function_call_stack		46828	0					
ANR	46878	Argument	( void * * ) & fcall		46828	1					
ANR	46879	CastExpression	( void * * ) & fcall		46828	0					
ANR	46880	CastTarget	void * *		46828	0					
ANR	46881	UnaryOperationExpression	& fcall		46828	1					
ANR	46882	UnaryOperator	&		46828	0					
ANR	46883	Identifier	fcall		46828	1					
ANR	46884	ExpressionStatement	function_ptr = fcall -> fbc	2635:1:95587:95612	46828	7	True				
ANR	46885	AssignmentExpression	function_ptr = fcall -> fbc		46828	0		=			
ANR	46886	Identifier	function_ptr		46828	0					
ANR	46887	PtrMemberAccess	fcall -> fbc		46828	1					
ANR	46888	Identifier	fcall		46828	0					
ANR	46889	Identifier	fbc		46828	1					
ANR	46890	ExpressionStatement	fcall -> arg_num ++	2636:1:95615:95631	46828	8	True				
ANR	46891	PostIncDecOperationExpression	fcall -> arg_num ++		46828	0					
ANR	46892	PtrMemberAccess	fcall -> arg_num		46828	0					
ANR	46893	Identifier	fcall		46828	0					
ANR	46894	Identifier	arg_num		46828	1					
ANR	46895	IncDec	++		46828	1					
ANR	46896	IfStatement	if ( fcall -> uses_argument_unpacking )		46828	9					
ANR	46897	Condition	fcall -> uses_argument_unpacking	2638:5:95639:95668	46828	0	True				
ANR	46898	PtrMemberAccess	fcall -> uses_argument_unpacking		46828	0					
ANR	46899	Identifier	fcall		46828	0					
ANR	46900	Identifier	uses_argument_unpacking		46828	1					
ANR	46901	CompoundStatement		13:37:305:305	46828	1					
ANR	46902	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use positional argument after argument unpacking"" )"	2639:2:95675:95773	46828	0	True				
ANR	46903	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use positional argument after argument unpacking"" )"		46828	0					
ANR	46904	Callee	zend_error_noreturn		46828	0					
ANR	46905	Identifier	zend_error_noreturn		46828	0					
ANR	46906	ArgumentList	E_COMPILE_ERROR		46828	1					
ANR	46907	Argument	E_COMPILE_ERROR		46828	0					
ANR	46908	Identifier	E_COMPILE_ERROR		46828	0					
ANR	46909	Argument	"""Cannot use positional argument after argument unpacking"""		46828	1					
ANR	46910	PrimaryExpression	"""Cannot use positional argument after argument unpacking"""		46828	0					
ANR	46911	IfStatement	if ( original_op == ZEND_SEND_REF )		46828	10					
ANR	46912	Condition	original_op == ZEND_SEND_REF	2643:5:95784:95811	46828	0	True				
ANR	46913	EqualityExpression	original_op == ZEND_SEND_REF		46828	0		==			
ANR	46914	Identifier	original_op		46828	0					
ANR	46915	Identifier	ZEND_SEND_REF		46828	1					
ANR	46916	CompoundStatement		18:35:448:448	46828	1					
ANR	46917	IfStatement	"if ( function_ptr && function_ptr -> common . function_name && function_ptr -> common . type == ZEND_USER_FUNCTION && ! ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num ) )"		46828	0					
ANR	46918	Condition	"function_ptr && function_ptr -> common . function_name && function_ptr -> common . type == ZEND_USER_FUNCTION && ! ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"	2644:6:95822:96000	46828	0	True				
ANR	46919	AndExpression	"function_ptr && function_ptr -> common . function_name && function_ptr -> common . type == ZEND_USER_FUNCTION && ! ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"		46828	0		&&			
ANR	46920	Identifier	function_ptr		46828	0					
ANR	46921	AndExpression	"function_ptr -> common . function_name && function_ptr -> common . type == ZEND_USER_FUNCTION && ! ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"		46828	1		&&			
ANR	46922	MemberAccess	function_ptr -> common . function_name		46828	0					
ANR	46923	PtrMemberAccess	function_ptr -> common		46828	0					
ANR	46924	Identifier	function_ptr		46828	0					
ANR	46925	Identifier	common		46828	1					
ANR	46926	Identifier	function_name		46828	1					
ANR	46927	AndExpression	"function_ptr -> common . type == ZEND_USER_FUNCTION && ! ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"		46828	1		&&			
ANR	46928	EqualityExpression	function_ptr -> common . type == ZEND_USER_FUNCTION		46828	0		==			
ANR	46929	MemberAccess	function_ptr -> common . type		46828	0					
ANR	46930	PtrMemberAccess	function_ptr -> common		46828	0					
ANR	46931	Identifier	function_ptr		46828	0					
ANR	46932	Identifier	common		46828	1					
ANR	46933	Identifier	type		46828	1					
ANR	46934	Identifier	ZEND_USER_FUNCTION		46828	1					
ANR	46935	UnaryOperationExpression	"! ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"		46828	1					
ANR	46936	UnaryOperator	!		46828	0					
ANR	46937	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"		46828	1					
ANR	46938	Callee	ARG_SHOULD_BE_SENT_BY_REF		46828	0					
ANR	46939	Identifier	ARG_SHOULD_BE_SENT_BY_REF		46828	0					
ANR	46940	ArgumentList	function_ptr		46828	1					
ANR	46941	Argument	function_ptr		46828	0					
ANR	46942	Identifier	function_ptr		46828	0					
ANR	46943	Argument	fcall -> arg_num		46828	1					
ANR	46944	PtrMemberAccess	fcall -> arg_num		46828	0					
ANR	46945	Identifier	fcall		46828	0					
ANR	46946	Identifier	arg_num		46828	1					
ANR	46947	CompoundStatement		22:64:637:637	46828	1					
ANR	46948	Statement	zend_error_noreturn	2648:3:96008:96026	46828	0	True				
ANR	46949	Statement	(	2648:22:96027:96027	46828	1	True				
ANR	46950	Statement	E_COMPILE_ERROR	2648:23:96028:96042	46828	2	True				
ANR	46951	Statement	","	2648:38:96043:96043	46828	3	True				
ANR	46952	Statement	"""Call-time pass-by-reference has been removed; """	2649:6:96051:96098	46828	4	True				
ANR	46953	Statement	"""If you would like to pass argument by reference, modify the declaration of %s()."""	2650:6:96106:96187	46828	5	True				
ANR	46954	Statement	","	2650:88:96188:96188	46828	6	True				
ANR	46955	Statement	function_ptr	2651:6:96196:96207	46828	7	True				
ANR	46956	Statement	->	2651:18:96208:96209	46828	8	True				
ANR	46957	Statement	common	2651:20:96210:96215	46828	9	True				
ANR	46958	Statement	.	2651:26:96216:96216	46828	10	True				
ANR	46959	Statement	function_name	2651:27:96217:96229	46828	11	True				
ANR	46960	Statement	)	2651:40:96230:96230	46828	12	True				
ANR	46961	ExpressionStatement		2651:41:96231:96231	46828	13	True				
ANR	46962	ElseStatement	else		46828	0					
ANR	46963	CompoundStatement		27:9:876:876	46828	0					
ANR	46964	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Call-time pass-by-reference has been removed"" )"	2653:3:96247:96331	46828	0	True				
ANR	46965	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Call-time pass-by-reference has been removed"" )"		46828	0					
ANR	46966	Callee	zend_error_noreturn		46828	0					
ANR	46967	Identifier	zend_error_noreturn		46828	0					
ANR	46968	ArgumentList	E_COMPILE_ERROR		46828	1					
ANR	46969	Argument	E_COMPILE_ERROR		46828	0					
ANR	46970	Identifier	E_COMPILE_ERROR		46828	0					
ANR	46971	Argument	"""Call-time pass-by-reference has been removed"""		46828	1					
ANR	46972	PrimaryExpression	"""Call-time pass-by-reference has been removed"""		46828	0					
ANR	46973	ReturnStatement	return ;	2655:2:96339:96345	46828	1	True				
ANR	46974	IfStatement	if ( function_ptr )		46828	11					
ANR	46975	Condition	function_ptr	2658:5:96356:96367	46828	0	True				
ANR	46976	Identifier	function_ptr		46828	0					
ANR	46977	CompoundStatement		33:19:1004:1004	46828	1					
ANR	46978	IfStatement	"if ( ARG_MAY_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num ) )"		46828	0					
ANR	46979	Condition	"ARG_MAY_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"	2659:6:96378:96429	46828	0	True				
ANR	46980	CallExpression	"ARG_MAY_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"		46828	0					
ANR	46981	Callee	ARG_MAY_BE_SENT_BY_REF		46828	0					
ANR	46982	Identifier	ARG_MAY_BE_SENT_BY_REF		46828	0					
ANR	46983	ArgumentList	function_ptr		46828	1					
ANR	46984	Argument	function_ptr		46828	0					
ANR	46985	Identifier	function_ptr		46828	0					
ANR	46986	Argument	fcall -> arg_num		46828	1					
ANR	46987	PtrMemberAccess	fcall -> arg_num		46828	0					
ANR	46988	Identifier	fcall		46828	0					
ANR	46989	Identifier	arg_num		46828	1					
ANR	46990	CompoundStatement		34:60:1066:1066	46828	1					
ANR	46991	IfStatement	if ( op == ZEND_SEND_VAR && param -> op_type & ( IS_VAR | IS_CV ) )		46828	0					
ANR	46992	Condition	op == ZEND_SEND_VAR && param -> op_type & ( IS_VAR | IS_CV )	2660:7:96441:96494	46828	0	True				
ANR	46993	AndExpression	op == ZEND_SEND_VAR && param -> op_type & ( IS_VAR | IS_CV )		46828	0		&&			
ANR	46994	EqualityExpression	op == ZEND_SEND_VAR		46828	0		==			
ANR	46995	Identifier	op		46828	0					
ANR	46996	Identifier	ZEND_SEND_VAR		46828	1					
ANR	46997	BitAndExpression	param -> op_type & ( IS_VAR | IS_CV )		46828	1		&			
ANR	46998	PtrMemberAccess	param -> op_type		46828	0					
ANR	46999	Identifier	param		46828	0					
ANR	47000	Identifier	op_type		46828	1					
ANR	47001	InclusiveOrExpression	IS_VAR | IS_CV		46828	1		|			
ANR	47002	Identifier	IS_VAR		46828	0					
ANR	47003	Identifier	IS_CV		46828	1					
ANR	47004	CompoundStatement		35:63:1131:1131	46828	1					
ANR	47005	ExpressionStatement	send_by_reference = ZEND_ARG_SEND_BY_REF	2661:4:96503:96543	46828	0	True				
ANR	47006	AssignmentExpression	send_by_reference = ZEND_ARG_SEND_BY_REF		46828	0		=			
ANR	47007	Identifier	send_by_reference		46828	0					
ANR	47008	Identifier	ZEND_ARG_SEND_BY_REF		46828	1					
ANR	47009	IfStatement	if ( zend_is_function_or_method_call ( param ) )		46828	1					
ANR	47010	Condition	zend_is_function_or_method_call ( param )	2662:8:96553:96590	46828	0	True				
ANR	47011	CallExpression	zend_is_function_or_method_call ( param )		46828	0					
ANR	47012	Callee	zend_is_function_or_method_call		46828	0					
ANR	47013	Identifier	zend_is_function_or_method_call		46828	0					
ANR	47014	ArgumentList	param		46828	1					
ANR	47015	Argument	param		46828	0					
ANR	47016	Identifier	param		46828	0					
ANR	47017	CompoundStatement		37:48:1227:1227	46828	1					
ANR	47018	ExpressionStatement	op = ZEND_SEND_VAR_NO_REF	2664:5:96623:96648	46828	0	True				
ANR	47019	AssignmentExpression	op = ZEND_SEND_VAR_NO_REF		46828	0		=			
ANR	47020	Identifier	op		46828	0					
ANR	47021	Identifier	ZEND_SEND_VAR_NO_REF		46828	1					
ANR	47022	ExpressionStatement	send_function = ZEND_ARG_SEND_FUNCTION | ZEND_ARG_SEND_SILENT	2665:5:96655:96716	46828	1	True				
ANR	47023	AssignmentExpression	send_function = ZEND_ARG_SEND_FUNCTION | ZEND_ARG_SEND_SILENT		46828	0		=			
ANR	47024	Identifier	send_function		46828	0					
ANR	47025	InclusiveOrExpression	ZEND_ARG_SEND_FUNCTION | ZEND_ARG_SEND_SILENT		46828	1		|			
ANR	47026	Identifier	ZEND_ARG_SEND_FUNCTION		46828	0					
ANR	47027	Identifier	ZEND_ARG_SEND_SILENT		46828	1					
ANR	47028	ElseStatement	else		46828	0					
ANR	47029	CompoundStatement		42:10:1368:1368	46828	0					
ANR	47030	ExpressionStatement	op = ZEND_SEND_VAL	2668:4:96740:96758	46828	0	True				
ANR	47031	AssignmentExpression	op = ZEND_SEND_VAL		46828	0		=			
ANR	47032	Identifier	op		46828	0					
ANR	47033	Identifier	ZEND_SEND_VAL		46828	1					
ANR	47034	ElseStatement	else		46828	0					
ANR	47035	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num ) )"		46828	0					
ANR	47036	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"	2670:13:96778:96832	46828	0	True				
ANR	47037	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( function_ptr , fcall -> arg_num )"		46828	0					
ANR	47038	Callee	ARG_SHOULD_BE_SENT_BY_REF		46828	0					
ANR	47039	Identifier	ARG_SHOULD_BE_SENT_BY_REF		46828	0					
ANR	47040	ArgumentList	function_ptr		46828	1					
ANR	47041	Argument	function_ptr		46828	0					
ANR	47042	Identifier	function_ptr		46828	0					
ANR	47043	Argument	fcall -> arg_num		46828	1					
ANR	47044	PtrMemberAccess	fcall -> arg_num		46828	0					
ANR	47045	Identifier	fcall		46828	0					
ANR	47046	Identifier	arg_num		46828	1					
ANR	47047	CompoundStatement		45:70:1469:1469	46828	1					
ANR	47048	ExpressionStatement	send_by_reference = ZEND_ARG_SEND_BY_REF	2671:3:96840:96880	46828	0	True				
ANR	47049	AssignmentExpression	send_by_reference = ZEND_ARG_SEND_BY_REF		46828	0		=			
ANR	47050	Identifier	send_by_reference		46828	0					
ANR	47051	Identifier	ZEND_ARG_SEND_BY_REF		46828	1					
ANR	47052	IfStatement	if ( op == ZEND_SEND_VAR && zend_is_function_or_method_call ( param ) )		46828	12					
ANR	47053	Condition	op == ZEND_SEND_VAR && zend_is_function_or_method_call ( param )	2675:5:96895:96955	46828	0	True				
ANR	47054	AndExpression	op == ZEND_SEND_VAR && zend_is_function_or_method_call ( param )		46828	0		&&			
ANR	47055	EqualityExpression	op == ZEND_SEND_VAR		46828	0		==			
ANR	47056	Identifier	op		46828	0					
ANR	47057	Identifier	ZEND_SEND_VAR		46828	1					
ANR	47058	CallExpression	zend_is_function_or_method_call ( param )		46828	1					
ANR	47059	Callee	zend_is_function_or_method_call		46828	0					
ANR	47060	Identifier	zend_is_function_or_method_call		46828	0					
ANR	47061	ArgumentList	param		46828	1					
ANR	47062	Argument	param		46828	0					
ANR	47063	Identifier	param		46828	0					
ANR	47064	CompoundStatement		50:68:1592:1592	46828	1					
ANR	47065	ExpressionStatement	op = ZEND_SEND_VAR_NO_REF	2677:2:96982:97007	46828	0	True				
ANR	47066	AssignmentExpression	op = ZEND_SEND_VAR_NO_REF		46828	0		=			
ANR	47067	Identifier	op		46828	0					
ANR	47068	Identifier	ZEND_SEND_VAR_NO_REF		46828	1					
ANR	47069	ExpressionStatement	send_function = ZEND_ARG_SEND_FUNCTION	2678:2:97011:97049	46828	1	True				
ANR	47070	AssignmentExpression	send_function = ZEND_ARG_SEND_FUNCTION		46828	0		=			
ANR	47071	Identifier	send_function		46828	0					
ANR	47072	Identifier	ZEND_ARG_SEND_FUNCTION		46828	1					
ANR	47073	ElseStatement	else		46828	0					
ANR	47074	IfStatement	if ( op == ZEND_SEND_VAL && ( param -> op_type & ( IS_VAR | IS_CV ) ) )		46828	0					
ANR	47075	Condition	op == ZEND_SEND_VAL && ( param -> op_type & ( IS_VAR | IS_CV ) )	2679:12:97063:97118	46828	0	True				
ANR	47076	AndExpression	op == ZEND_SEND_VAL && ( param -> op_type & ( IS_VAR | IS_CV ) )		46828	0		&&			
ANR	47077	EqualityExpression	op == ZEND_SEND_VAL		46828	0		==			
ANR	47078	Identifier	op		46828	0					
ANR	47079	Identifier	ZEND_SEND_VAL		46828	1					
ANR	47080	BitAndExpression	param -> op_type & ( IS_VAR | IS_CV )		46828	1		&			
ANR	47081	PtrMemberAccess	param -> op_type		46828	0					
ANR	47082	Identifier	param		46828	0					
ANR	47083	Identifier	op_type		46828	1					
ANR	47084	InclusiveOrExpression	IS_VAR | IS_CV		46828	1		|			
ANR	47085	Identifier	IS_VAR		46828	0					
ANR	47086	Identifier	IS_CV		46828	1					
ANR	47087	CompoundStatement		54:70:1755:1755	46828	1					
ANR	47088	ExpressionStatement	op = ZEND_SEND_VAR_NO_REF	2680:2:97125:97150	46828	0	True				
ANR	47089	AssignmentExpression	op = ZEND_SEND_VAR_NO_REF		46828	0		=			
ANR	47090	Identifier	op		46828	0					
ANR	47091	Identifier	ZEND_SEND_VAR_NO_REF		46828	1					
ANR	47092	IfStatement	if ( op != ZEND_SEND_VAR_NO_REF && send_by_reference == ZEND_ARG_SEND_BY_REF )		46828	13					
ANR	47093	Condition	op != ZEND_SEND_VAR_NO_REF && send_by_reference == ZEND_ARG_SEND_BY_REF	2683:5:97161:97227	46828	0	True				
ANR	47094	AndExpression	op != ZEND_SEND_VAR_NO_REF && send_by_reference == ZEND_ARG_SEND_BY_REF		46828	0		&&			
ANR	47095	EqualityExpression	op != ZEND_SEND_VAR_NO_REF		46828	0		!=			
ANR	47096	Identifier	op		46828	0					
ANR	47097	Identifier	ZEND_SEND_VAR_NO_REF		46828	1					
ANR	47098	EqualityExpression	send_by_reference == ZEND_ARG_SEND_BY_REF		46828	1		==			
ANR	47099	Identifier	send_by_reference		46828	0					
ANR	47100	Identifier	ZEND_ARG_SEND_BY_REF		46828	1					
ANR	47101	CompoundStatement		58:74:1864:1864	46828	1					
ANR	47102	SwitchStatement	switch ( param -> op_type )		46828	0					
ANR	47103	Condition	param -> op_type	2685:10:97281:97294	46828	0	True				
ANR	47104	PtrMemberAccess	param -> op_type		46828	0					
ANR	47105	Identifier	param		46828	0					
ANR	47106	Identifier	op_type		46828	1					
ANR	47107	CompoundStatement		60:26:1931:1931	46828	1					
ANR	47108	Label	case IS_VAR :	2686:3:97302:97313	46828	0	True				
ANR	47109	Identifier	IS_VAR		46828	0					
ANR	47110	Label	case IS_CV :	2687:3:97318:97328	46828	1	True				
ANR	47111	Identifier	IS_CV		46828	0					
ANR	47112	ExpressionStatement	op = ZEND_SEND_REF	2688:4:97334:97352	46828	2	True				
ANR	47113	AssignmentExpression	op = ZEND_SEND_REF		46828	0		=			
ANR	47114	Identifier	op		46828	0					
ANR	47115	Identifier	ZEND_SEND_REF		46828	1					
ANR	47116	BreakStatement	break ;	2689:4:97358:97363	46828	3	True				
ANR	47117	Label	default :	2690:3:97368:97375	46828	4	True				
ANR	47118	Identifier	default		46828	0					
ANR	47119	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Only variables can be passed by reference"" )"	2691:4:97381:97462	46828	5	True				
ANR	47120	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Only variables can be passed by reference"" )"		46828	0					
ANR	47121	Callee	zend_error_noreturn		46828	0					
ANR	47122	Identifier	zend_error_noreturn		46828	0					
ANR	47123	ArgumentList	E_COMPILE_ERROR		46828	1					
ANR	47124	Argument	E_COMPILE_ERROR		46828	0					
ANR	47125	Identifier	E_COMPILE_ERROR		46828	0					
ANR	47126	Argument	"""Only variables can be passed by reference"""		46828	1					
ANR	47127	PrimaryExpression	"""Only variables can be passed by reference"""		46828	0					
ANR	47128	BreakStatement	break ;	2692:4:97468:97473	46828	6	True				
ANR	47129	IfStatement	if ( original_op == ZEND_SEND_VAR )		46828	14					
ANR	47130	Condition	original_op == ZEND_SEND_VAR	2696:5:97488:97515	46828	0	True				
ANR	47131	EqualityExpression	original_op == ZEND_SEND_VAR		46828	0		==			
ANR	47132	Identifier	original_op		46828	0					
ANR	47133	Identifier	ZEND_SEND_VAR		46828	1					
ANR	47134	CompoundStatement		71:35:2152:2152	46828	1					
ANR	47135	SwitchStatement	switch ( op )		46828	0					
ANR	47136	Condition	op	2697:10:97530:97531	46828	0	True				
ANR	47137	Identifier	op		46828	0					
ANR	47138	CompoundStatement		72:14:2168:2168	46828	1					
ANR	47139	Label	case ZEND_SEND_VAR_NO_REF :	2698:3:97539:97564	46828	0	True				
ANR	47140	Identifier	ZEND_SEND_VAR_NO_REF		46828	0					
ANR	47141	Statement	zend_do_end_variable_parse	2699:4:97570:97595	46828	1	True				
ANR	47142	Statement	(	2699:30:97596:97596	46828	2	True				
ANR	47143	Statement	param	2699:31:97597:97601	46828	3	True				
ANR	47144	Statement	","	2699:36:97602:97602	46828	4	True				
ANR	47145	Statement	BP_VAR_R	2699:38:97604:97611	46828	5	True				
ANR	47146	Statement	","	2699:46:97612:97612	46828	6	True				
ANR	47147	Statement	0	2699:48:97614:97614	46828	7	True				
ANR	47148	Statement	TSRMLS_CC	2699:50:97616:97624	46828	8	True				
ANR	47149	Statement	)	2699:59:97625:97625	46828	9	True				
ANR	47150	ExpressionStatement		2699:60:97626:97626	46828	10	True				
ANR	47151	BreakStatement	break ;	2700:4:97632:97637	46828	11	True				
ANR	47152	Label	case ZEND_SEND_VAR :	2701:3:97642:97660	46828	12	True				
ANR	47153	Identifier	ZEND_SEND_VAR		46828	0					
ANR	47154	IfStatement	if ( function_ptr )		46828	13					
ANR	47155	Condition	function_ptr	2702:8:97670:97681	46828	0	True				
ANR	47156	Identifier	function_ptr		46828	0					
ANR	47157	CompoundStatement		77:22:2318:2318	46828	1					
ANR	47158	Statement	zend_do_end_variable_parse	2703:5:97691:97716	46828	0	True				
ANR	47159	Statement	(	2703:31:97717:97717	46828	1	True				
ANR	47160	Statement	param	2703:32:97718:97722	46828	2	True				
ANR	47161	Statement	","	2703:37:97723:97723	46828	3	True				
ANR	47162	Statement	BP_VAR_R	2703:39:97725:97732	46828	4	True				
ANR	47163	Statement	","	2703:47:97733:97733	46828	5	True				
ANR	47164	Statement	0	2703:49:97735:97735	46828	6	True				
ANR	47165	Statement	TSRMLS_CC	2703:51:97737:97745	46828	7	True				
ANR	47166	Statement	)	2703:60:97746:97746	46828	8	True				
ANR	47167	ExpressionStatement		2703:61:97747:97747	46828	9	True				
ANR	47168	ElseStatement	else		46828	0					
ANR	47169	CompoundStatement		79:11:2394:2394	46828	0					
ANR	47170	Statement	zend_do_end_variable_parse	2705:5:97767:97792	46828	0	True				
ANR	47171	Statement	(	2705:31:97793:97793	46828	1	True				
ANR	47172	Statement	param	2705:32:97794:97798	46828	2	True				
ANR	47173	Statement	","	2705:37:97799:97799	46828	3	True				
ANR	47174	Statement	BP_VAR_FUNC_ARG	2705:39:97801:97815	46828	4	True				
ANR	47175	Statement	","	2705:54:97816:97816	46828	5	True				
ANR	47176	Statement	fcall	2705:56:97818:97822	46828	6	True				
ANR	47177	Statement	->	2705:61:97823:97824	46828	7	True				
ANR	47178	Statement	arg_num	2705:63:97825:97831	46828	8	True				
ANR	47179	Statement	TSRMLS_CC	2705:71:97833:97841	46828	9	True				
ANR	47180	Statement	)	2705:80:97842:97842	46828	10	True				
ANR	47181	ExpressionStatement		2705:81:97843:97843	46828	11	True				
ANR	47182	BreakStatement	break ;	2707:4:97855:97860	46828	14	True				
ANR	47183	Label	case ZEND_SEND_REF :	2708:3:97865:97883	46828	15	True				
ANR	47184	Identifier	ZEND_SEND_REF		46828	0					
ANR	47185	Statement	zend_do_end_variable_parse	2709:4:97889:97914	46828	16	True				
ANR	47186	Statement	(	2709:30:97915:97915	46828	17	True				
ANR	47187	Statement	param	2709:31:97916:97920	46828	18	True				
ANR	47188	Statement	","	2709:36:97921:97921	46828	19	True				
ANR	47189	Statement	BP_VAR_W	2709:38:97923:97930	46828	20	True				
ANR	47190	Statement	","	2709:46:97931:97931	46828	21	True				
ANR	47191	Statement	0	2709:48:97933:97933	46828	22	True				
ANR	47192	Statement	TSRMLS_CC	2709:50:97935:97943	46828	23	True				
ANR	47193	Statement	)	2709:59:97944:97944	46828	24	True				
ANR	47194	ExpressionStatement		2709:60:97945:97945	46828	25	True				
ANR	47195	BreakStatement	break ;	2710:4:97951:97956	46828	26	True				
ANR	47196	Statement	opline	2714:1:97967:97972	46828	15	True				
ANR	47197	Statement	=	2714:8:97974:97974	46828	16	True				
ANR	47198	Statement	get_next_op	2714:10:97976:97986	46828	17	True				
ANR	47199	Statement	(	2714:21:97987:97987	46828	18	True				
ANR	47200	Statement	CG	2714:22:97988:97989	46828	19	True				
ANR	47201	Statement	(	2714:24:97990:97990	46828	20	True				
ANR	47202	Statement	active_op_array	2714:25:97991:98005	46828	21	True				
ANR	47203	Statement	)	2714:40:98006:98006	46828	22	True				
ANR	47204	Statement	TSRMLS_CC	2714:42:98008:98016	46828	23	True				
ANR	47205	Statement	)	2714:51:98017:98017	46828	24	True				
ANR	47206	ExpressionStatement		2714:52:98018:98018	46828	25	True				
ANR	47207	IfStatement	if ( op == ZEND_SEND_VAR_NO_REF )		46828	26					
ANR	47208	Condition	op == ZEND_SEND_VAR_NO_REF	2716:5:98026:98051	46828	0	True				
ANR	47209	EqualityExpression	op == ZEND_SEND_VAR_NO_REF		46828	0		==			
ANR	47210	Identifier	op		46828	0					
ANR	47211	Identifier	ZEND_SEND_VAR_NO_REF		46828	1					
ANR	47212	CompoundStatement		91:33:2688:2688	46828	1					
ANR	47213	IfStatement	if ( function_ptr )		46828	0					
ANR	47214	Condition	function_ptr	2717:6:98062:98073	46828	0	True				
ANR	47215	Identifier	function_ptr		46828	0					
ANR	47216	CompoundStatement		92:20:2710:2710	46828	1					
ANR	47217	ExpressionStatement	opline -> extended_value = ZEND_ARG_COMPILE_TIME_BOUND | send_by_reference | send_function	2718:3:98081:98169	46828	0	True				
ANR	47218	AssignmentExpression	opline -> extended_value = ZEND_ARG_COMPILE_TIME_BOUND | send_by_reference | send_function		46828	0		=			
ANR	47219	PtrMemberAccess	opline -> extended_value		46828	0					
ANR	47220	Identifier	opline		46828	0					
ANR	47221	Identifier	extended_value		46828	1					
ANR	47222	InclusiveOrExpression	ZEND_ARG_COMPILE_TIME_BOUND | send_by_reference | send_function		46828	1		|			
ANR	47223	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		46828	0					
ANR	47224	InclusiveOrExpression	send_by_reference | send_function		46828	1		|			
ANR	47225	Identifier	send_by_reference		46828	0					
ANR	47226	Identifier	send_function		46828	1					
ANR	47227	ElseStatement	else		46828	0					
ANR	47228	CompoundStatement		94:9:2814:2814	46828	0					
ANR	47229	ExpressionStatement	opline -> extended_value = send_function	2720:3:98185:98223	46828	0	True				
ANR	47230	AssignmentExpression	opline -> extended_value = send_function		46828	0		=			
ANR	47231	PtrMemberAccess	opline -> extended_value		46828	0					
ANR	47232	Identifier	opline		46828	0					
ANR	47233	Identifier	extended_value		46828	1					
ANR	47234	Identifier	send_function		46828	1					
ANR	47235	ElseStatement	else		46828	0					
ANR	47236	CompoundStatement		97:8:2871:2871	46828	0					
ANR	47237	IfStatement	if ( function_ptr )		46828	0					
ANR	47238	Condition	function_ptr	2723:6:98245:98256	46828	0	True				
ANR	47239	Identifier	function_ptr		46828	0					
ANR	47240	CompoundStatement		98:20:2893:2893	46828	1					
ANR	47241	ExpressionStatement	opline -> extended_value = ZEND_DO_FCALL	2724:3:98264:98302	46828	0	True				
ANR	47242	AssignmentExpression	opline -> extended_value = ZEND_DO_FCALL		46828	0		=			
ANR	47243	PtrMemberAccess	opline -> extended_value		46828	0					
ANR	47244	Identifier	opline		46828	0					
ANR	47245	Identifier	extended_value		46828	1					
ANR	47246	Identifier	ZEND_DO_FCALL		46828	1					
ANR	47247	ElseStatement	else		46828	0					
ANR	47248	CompoundStatement		100:9:2947:2947	46828	0					
ANR	47249	ExpressionStatement	opline -> extended_value = ZEND_DO_FCALL_BY_NAME	2726:3:98318:98364	46828	0	True				
ANR	47250	AssignmentExpression	opline -> extended_value = ZEND_DO_FCALL_BY_NAME		46828	0		=			
ANR	47251	PtrMemberAccess	opline -> extended_value		46828	0					
ANR	47252	Identifier	opline		46828	0					
ANR	47253	Identifier	extended_value		46828	1					
ANR	47254	Identifier	ZEND_DO_FCALL_BY_NAME		46828	1					
ANR	47255	ExpressionStatement	opline -> opcode = op	2729:1:98374:98393	46828	27	True				
ANR	47256	AssignmentExpression	opline -> opcode = op		46828	0		=			
ANR	47257	PtrMemberAccess	opline -> opcode		46828	0					
ANR	47258	Identifier	opline		46828	0					
ANR	47259	Identifier	opcode		46828	1					
ANR	47260	Identifier	op		46828	1					
ANR	47261	ExpressionStatement	"SET_NODE ( opline -> op1 , param )"	2730:1:98396:98424	46828	28	True				
ANR	47262	CallExpression	"SET_NODE ( opline -> op1 , param )"		46828	0					
ANR	47263	Callee	SET_NODE		46828	0					
ANR	47264	Identifier	SET_NODE		46828	0					
ANR	47265	ArgumentList	opline -> op1		46828	1					
ANR	47266	Argument	opline -> op1		46828	0					
ANR	47267	PtrMemberAccess	opline -> op1		46828	0					
ANR	47268	Identifier	opline		46828	0					
ANR	47269	Identifier	op1		46828	1					
ANR	47270	Argument	param		46828	1					
ANR	47271	Identifier	param		46828	0					
ANR	47272	ExpressionStatement	opline -> op2 . opline_num = fcall -> arg_num	2731:1:98427:98466	46828	29	True				
ANR	47273	AssignmentExpression	opline -> op2 . opline_num = fcall -> arg_num		46828	0		=			
ANR	47274	MemberAccess	opline -> op2 . opline_num		46828	0					
ANR	47275	PtrMemberAccess	opline -> op2		46828	0					
ANR	47276	Identifier	opline		46828	0					
ANR	47277	Identifier	op2		46828	1					
ANR	47278	Identifier	opline_num		46828	1					
ANR	47279	PtrMemberAccess	fcall -> arg_num		46828	1					
ANR	47280	Identifier	fcall		46828	0					
ANR	47281	Identifier	arg_num		46828	1					
ANR	47282	ExpressionStatement	SET_UNUSED ( opline -> op2 )	2732:1:98469:98492	46828	30	True				
ANR	47283	CallExpression	SET_UNUSED ( opline -> op2 )		46828	0					
ANR	47284	Callee	SET_UNUSED		46828	0					
ANR	47285	Identifier	SET_UNUSED		46828	0					
ANR	47286	ArgumentList	opline -> op2		46828	1					
ANR	47287	Argument	opline -> op2		46828	0					
ANR	47288	PtrMemberAccess	opline -> op2		46828	0					
ANR	47289	Identifier	opline		46828	0					
ANR	47290	Identifier	op2		46828	1					
ANR	47291	IfStatement	if ( ++ CG ( context ) . used_stack > CG ( active_op_array ) -> used_stack )		46828	31					
ANR	47292	Condition	++ CG ( context ) . used_stack > CG ( active_op_array ) -> used_stack	2734:5:98500:98557	46828	0	True				
ANR	47293	RelationalExpression	++ CG ( context ) . used_stack > CG ( active_op_array ) -> used_stack		46828	0		>			
ANR	47294	UnaryExpression	++ CG ( context ) . used_stack		46828	0					
ANR	47295	IncDec	++		46828	0					
ANR	47296	MemberAccess	CG ( context ) . used_stack		46828	1					
ANR	47297	CallExpression	CG ( context )		46828	0					
ANR	47298	Callee	CG		46828	0					
ANR	47299	Identifier	CG		46828	0					
ANR	47300	ArgumentList	context		46828	1					
ANR	47301	Argument	context		46828	0					
ANR	47302	Identifier	context		46828	0					
ANR	47303	Identifier	used_stack		46828	1					
ANR	47304	PtrMemberAccess	CG ( active_op_array ) -> used_stack		46828	1					
ANR	47305	CallExpression	CG ( active_op_array )		46828	0					
ANR	47306	Callee	CG		46828	0					
ANR	47307	Identifier	CG		46828	0					
ANR	47308	ArgumentList	active_op_array		46828	1					
ANR	47309	Argument	active_op_array		46828	0					
ANR	47310	Identifier	active_op_array		46828	0					
ANR	47311	Identifier	used_stack		46828	1					
ANR	47312	CompoundStatement		109:65:3194:3194	46828	1					
ANR	47313	ExpressionStatement	CG ( active_op_array ) -> used_stack = CG ( context ) . used_stack	2735:2:98564:98620	46828	0	True				
ANR	47314	AssignmentExpression	CG ( active_op_array ) -> used_stack = CG ( context ) . used_stack		46828	0		=			
ANR	47315	PtrMemberAccess	CG ( active_op_array ) -> used_stack		46828	0					
ANR	47316	CallExpression	CG ( active_op_array )		46828	0					
ANR	47317	Callee	CG		46828	0					
ANR	47318	Identifier	CG		46828	0					
ANR	47319	ArgumentList	active_op_array		46828	1					
ANR	47320	Argument	active_op_array		46828	0					
ANR	47321	Identifier	active_op_array		46828	0					
ANR	47322	Identifier	used_stack		46828	1					
ANR	47323	MemberAccess	CG ( context ) . used_stack		46828	1					
ANR	47324	CallExpression	CG ( context )		46828	0					
ANR	47325	Callee	CG		46828	0					
ANR	47326	Identifier	CG		46828	0					
ANR	47327	ArgumentList	context		46828	1					
ANR	47328	Argument	context		46828	0					
ANR	47329	Identifier	context		46828	0					
ANR	47330	Identifier	used_stack		46828	1					
ANR	47331	ReturnType	void		46828	1					
ANR	47332	Identifier	zend_do_pass_param		46828	2					
ANR	47333	ParameterList	"znode * param , zend_uchar op TSRMLS_DC"		46828	3					
ANR	47334	Parameter	znode * param	2625:24:95316:95327	46828	0	True				
ANR	47335	ParameterType	znode *		46828	0					
ANR	47336	Identifier	param		46828	1					
ANR	47337	Parameter	zend_uchar op TSRMLS_DC	2625:38:95330:95352	46828	1	True				
ANR	47338	ParameterType	zend_uchar op		46828	0					
ANR	47339	Identifier	TSRMLS_DC		46828	1					
ANR	47340	CFGEntryNode	ENTRY		46828		True				
ANR	47341	CFGExitNode	EXIT		46828		True				
ANR	47342	Symbol	ZEND_SEND_VAR_NO_REF		46828						
ANR	47343	Symbol	ZEND_SEND_REF		46828						
ANR	47344	Symbol	IS_CV		46828						
ANR	47345	Symbol	ZEND_DO_FCALL_BY_NAME		46828						
ANR	47346	Symbol	fcall -> arg_num		46828						
ANR	47347	Symbol	E_COMPILE_ERROR		46828						
ANR	47348	Symbol	ARG_MAY_BE_SENT_BY_REF		46828						
ANR	47349	Symbol	* CG		46828						
ANR	47350	Symbol	CG ( context ) . used_stack		46828						
ANR	47351	Symbol	TSRMLS_DC		46828						
ANR	47352	Symbol	opline -> extended_value		46828						
ANR	47353	Symbol	fcall		46828						
ANR	47354	Symbol	& CG		46828						
ANR	47355	Symbol	* function_ptr		46828						
ANR	47356	Symbol	opline		46828						
ANR	47357	Symbol	ZEND_ARG_SEND_FUNCTION		46828						
ANR	47358	Symbol	ZEND_USER_FUNCTION		46828						
ANR	47359	Symbol	context		46828						
ANR	47360	Symbol	ZEND_ARG_SEND_SILENT		46828						
ANR	47361	Symbol	zend_is_function_or_method_call		46828						
ANR	47362	Symbol	CG ( active_op_array ) -> used_stack		46828						
ANR	47363	Symbol	send_by_reference		46828						
ANR	47364	Symbol	* param		46828						
ANR	47365	Symbol	function_ptr -> common . type		46828						
ANR	47366	Symbol	ZEND_SEND_VAL		46828						
ANR	47367	Symbol	send_function		46828						
ANR	47368	Symbol	ZEND_DO_FCALL		46828						
ANR	47369	Symbol	ZEND_SEND_VAR		46828						
ANR	47370	Symbol	original_op		46828						
ANR	47371	Symbol	IS_VAR		46828						
ANR	47372	Symbol	ZEND_ARG_SEND_BY_REF		46828						
ANR	47373	Symbol	ARG_SHOULD_BE_SENT_BY_REF		46828						
ANR	47374	Symbol	param -> op_type		46828						
ANR	47375	Symbol	opline -> op1		46828						
ANR	47376	Symbol	opline -> op2		46828						
ANR	47377	Symbol	function_ptr -> common		46828						
ANR	47378	Symbol	param		46828						
ANR	47379	Symbol	function_call_stack		46828						
ANR	47380	Symbol	fcall -> uses_argument_unpacking		46828						
ANR	47381	Symbol	& fcall		46828						
ANR	47382	Symbol	op		46828						
ANR	47383	Symbol	fcall -> fbc		46828						
ANR	47384	Symbol	* fcall		46828						
ANR	47385	Symbol	opline -> op2 . opline_num		46828						
ANR	47386	Symbol	CG		46828						
ANR	47387	Symbol	function_ptr -> common . function_name		46828						
ANR	47388	Symbol	active_op_array		46828						
ANR	47389	Symbol	function_ptr		46828						
ANR	47390	Symbol	* opline		46828						
ANR	47391	Symbol	opline -> opcode		46828						
ANR	47392	Symbol	ZEND_ARG_COMPILE_TIME_BOUND		46828						
ANR	47393	DeclStmt									
ANR	47394	Decl							zend_op	zend_op *	opline
ANR	47395	DeclStmt									
ANR	47396	Decl							zend_function_call_entry	zend_function_call_entry *	fcall
ANR	47397	DeclStmt									
ANR	47398	Decl							zval	zval	func_name
ANR	47399	DeclStmt									
ANR	47400	Decl							zend_op	zend_op *	opline
ANR	47401	DeclStmt									
ANR	47402	Decl							zend_op	zend_op *	opline
ANR	47403	Function	zend_do_return	2812:0:100769:102800							
ANR	47404	FunctionDef	"zend_do_return (znode * expr , int do_end_vparse TSRMLS_DC)"		47403	0					
ANR	47405	CompoundStatement		2813:0:100841:102800	47403	0					
ANR	47406	IdentifierDeclStatement	zend_op * opline ;	2814:1:100844:100859	47403	0	True				
ANR	47407	IdentifierDecl	* opline		47403	0					
ANR	47408	IdentifierDeclType	zend_op *		47403	0					
ANR	47409	Identifier	opline		47403	1					
ANR	47410	IdentifierDeclStatement	"int start_op_number , end_op_number ;"	2815:1:100862:100896	47403	1	True				
ANR	47411	IdentifierDecl	start_op_number		47403	0					
ANR	47412	IdentifierDeclType	int		47403	0					
ANR	47413	Identifier	start_op_number		47403	1					
ANR	47414	IdentifierDecl	end_op_number		47403	1					
ANR	47415	IdentifierDeclType	int		47403	0					
ANR	47416	Identifier	end_op_number		47403	1					
ANR	47417	IdentifierDeclStatement	zend_bool returns_reference = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0 ;	2816:1:100899:100993	47403	2	True				
ANR	47418	IdentifierDecl	returns_reference = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		47403	0					
ANR	47419	IdentifierDeclType	zend_bool		47403	0					
ANR	47420	Identifier	returns_reference		47403	1					
ANR	47421	AssignmentExpression	returns_reference = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		47403	2		=			
ANR	47422	Identifier	returns_reference		47403	0					
ANR	47423	EqualityExpression	( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		47403	1		!=			
ANR	47424	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE		47403	0		&			
ANR	47425	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		47403	0					
ANR	47426	CallExpression	CG ( active_op_array )		47403	0					
ANR	47427	Callee	CG		47403	0					
ANR	47428	Identifier	CG		47403	0					
ANR	47429	ArgumentList	active_op_array		47403	1					
ANR	47430	Argument	active_op_array		47403	0					
ANR	47431	Identifier	active_op_array		47403	0					
ANR	47432	Identifier	fn_flags		47403	1					
ANR	47433	Identifier	ZEND_ACC_RETURN_REFERENCE		47403	1					
ANR	47434	PrimaryExpression	0		47403	1					
ANR	47435	IfStatement	if ( do_end_vparse )		47403	3					
ANR	47436	Condition	do_end_vparse	2820:5:101079:101091	47403	0	True				
ANR	47437	Identifier	do_end_vparse		47403	0					
ANR	47438	CompoundStatement		8:20:252:252	47403	1					
ANR	47439	IfStatement	if ( returns_reference && ! zend_is_function_or_method_call ( expr ) )		47403	0					
ANR	47440	Condition	returns_reference && ! zend_is_function_or_method_call ( expr )	2821:6:101102:101160	47403	0	True				
ANR	47441	AndExpression	returns_reference && ! zend_is_function_or_method_call ( expr )		47403	0		&&			
ANR	47442	Identifier	returns_reference		47403	0					
ANR	47443	UnaryOperationExpression	! zend_is_function_or_method_call ( expr )		47403	1					
ANR	47444	UnaryOperator	!		47403	0					
ANR	47445	CallExpression	zend_is_function_or_method_call ( expr )		47403	1					
ANR	47446	Callee	zend_is_function_or_method_call		47403	0					
ANR	47447	Identifier	zend_is_function_or_method_call		47403	0					
ANR	47448	ArgumentList	expr		47403	1					
ANR	47449	Argument	expr		47403	0					
ANR	47450	Identifier	expr		47403	0					
ANR	47451	CompoundStatement		9:67:321:321	47403	1					
ANR	47452	Statement	zend_do_end_variable_parse	2822:3:101168:101193	47403	0	True				
ANR	47453	Statement	(	2822:29:101194:101194	47403	1	True				
ANR	47454	Statement	expr	2822:30:101195:101198	47403	2	True				
ANR	47455	Statement	","	2822:34:101199:101199	47403	3	True				
ANR	47456	Statement	BP_VAR_W	2822:36:101201:101208	47403	4	True				
ANR	47457	Statement	","	2822:44:101209:101209	47403	5	True				
ANR	47458	Statement	0	2822:46:101211:101211	47403	6	True				
ANR	47459	Statement	TSRMLS_CC	2822:48:101213:101221	47403	7	True				
ANR	47460	Statement	)	2822:57:101222:101222	47403	8	True				
ANR	47461	ExpressionStatement		2822:58:101223:101223	47403	9	True				
ANR	47462	ElseStatement	else		47403	0					
ANR	47463	CompoundStatement		11:9:392:392	47403	0					
ANR	47464	Statement	zend_do_end_variable_parse	2824:3:101239:101264	47403	0	True				
ANR	47465	Statement	(	2824:29:101265:101265	47403	1	True				
ANR	47466	Statement	expr	2824:30:101266:101269	47403	2	True				
ANR	47467	Statement	","	2824:34:101270:101270	47403	3	True				
ANR	47468	Statement	BP_VAR_R	2824:36:101272:101279	47403	4	True				
ANR	47469	Statement	","	2824:44:101280:101280	47403	5	True				
ANR	47470	Statement	0	2824:46:101282:101282	47403	6	True				
ANR	47471	Statement	TSRMLS_CC	2824:48:101284:101292	47403	7	True				
ANR	47472	Statement	)	2824:57:101293:101293	47403	8	True				
ANR	47473	ExpressionStatement		2824:58:101294:101294	47403	9	True				
ANR	47474	ExpressionStatement	start_op_number = get_next_op_number ( CG ( active_op_array ) )	2828:1:101305:101362	47403	4	True				
ANR	47475	AssignmentExpression	start_op_number = get_next_op_number ( CG ( active_op_array ) )		47403	0		=			
ANR	47476	Identifier	start_op_number		47403	0					
ANR	47477	CallExpression	get_next_op_number ( CG ( active_op_array ) )		47403	1					
ANR	47478	Callee	get_next_op_number		47403	0					
ANR	47479	Identifier	get_next_op_number		47403	0					
ANR	47480	ArgumentList	CG ( active_op_array )		47403	1					
ANR	47481	Argument	CG ( active_op_array )		47403	0					
ANR	47482	CallExpression	CG ( active_op_array )		47403	0					
ANR	47483	Callee	CG		47403	0					
ANR	47484	Identifier	CG		47403	0					
ANR	47485	ArgumentList	active_op_array		47403	1					
ANR	47486	Argument	active_op_array		47403	0					
ANR	47487	Identifier	active_op_array		47403	0					
ANR	47488	Statement	zend_stack_apply_with_argument	2831:1:101377:101406	47403	5	True				
ANR	47489	Statement	(	2831:31:101407:101407	47403	6	True				
ANR	47490	Statement	&	2831:32:101408:101408	47403	7	True				
ANR	47491	Statement	CG	2831:33:101409:101410	47403	8	True				
ANR	47492	Statement	(	2831:35:101411:101411	47403	9	True				
ANR	47493	Statement	switch_cond_stack	2831:36:101412:101428	47403	10	True				
ANR	47494	Statement	)	2831:53:101429:101429	47403	11	True				
ANR	47495	Statement	","	2831:54:101430:101430	47403	12	True				
ANR	47496	Statement	ZEND_STACK_APPLY_TOPDOWN	2831:56:101432:101455	47403	13	True				
ANR	47497	Statement	","	2831:80:101456:101456	47403	14	True				
ANR	47498	Statement	(	2831:82:101458:101458	47403	15	True				
ANR	47499	Statement	int	2831:83:101459:101461	47403	16	True				
ANR	47500	Statement	(	2831:87:101463:101463	47403	17	True				
ANR	47501	Statement	*	2831:88:101464:101464	47403	18	True				
ANR	47502	Statement	)	2831:89:101465:101465	47403	19	True				
ANR	47503	Statement	(	2831:90:101466:101466	47403	20	True				
ANR	47504	Statement	void	2831:91:101467:101470	47403	21	True				
ANR	47505	Statement	*	2831:96:101472:101472	47403	22	True				
ANR	47506	Statement	element	2831:97:101473:101479	47403	23	True				
ANR	47507	Statement	","	2831:104:101480:101480	47403	24	True				
ANR	47508	Statement	void	2831:106:101482:101485	47403	25	True				
ANR	47509	Statement	*	2831:111:101487:101487	47403	26	True				
ANR	47510	Statement	)	2831:112:101488:101488	47403	27	True				
ANR	47511	Statement	)	2831:113:101489:101489	47403	28	True				
ANR	47512	Statement	generate_free_switch_expr	2831:115:101491:101515	47403	29	True				
ANR	47513	Statement	TSRMLS_CC	2831:141:101517:101525	47403	30	True				
ANR	47514	Statement	)	2831:150:101526:101526	47403	31	True				
ANR	47515	ExpressionStatement		2831:151:101527:101527	47403	32	True				
ANR	47516	Statement	zend_stack_apply_with_argument	2832:1:101530:101559	47403	33	True				
ANR	47517	Statement	(	2832:31:101560:101560	47403	34	True				
ANR	47518	Statement	&	2832:32:101561:101561	47403	35	True				
ANR	47519	Statement	CG	2832:33:101562:101563	47403	36	True				
ANR	47520	Statement	(	2832:35:101564:101564	47403	37	True				
ANR	47521	Statement	foreach_copy_stack	2832:36:101565:101582	47403	38	True				
ANR	47522	Statement	)	2832:54:101583:101583	47403	39	True				
ANR	47523	Statement	","	2832:55:101584:101584	47403	40	True				
ANR	47524	Statement	ZEND_STACK_APPLY_TOPDOWN	2832:57:101586:101609	47403	41	True				
ANR	47525	Statement	","	2832:81:101610:101610	47403	42	True				
ANR	47526	Statement	(	2832:83:101612:101612	47403	43	True				
ANR	47527	Statement	int	2832:84:101613:101615	47403	44	True				
ANR	47528	Statement	(	2832:88:101617:101617	47403	45	True				
ANR	47529	Statement	*	2832:89:101618:101618	47403	46	True				
ANR	47530	Statement	)	2832:90:101619:101619	47403	47	True				
ANR	47531	Statement	(	2832:91:101620:101620	47403	48	True				
ANR	47532	Statement	void	2832:92:101621:101624	47403	49	True				
ANR	47533	Statement	*	2832:97:101626:101626	47403	50	True				
ANR	47534	Statement	element	2832:98:101627:101633	47403	51	True				
ANR	47535	Statement	","	2832:105:101634:101634	47403	52	True				
ANR	47536	Statement	void	2832:107:101636:101639	47403	53	True				
ANR	47537	Statement	*	2832:112:101641:101641	47403	54	True				
ANR	47538	Statement	)	2832:113:101642:101642	47403	55	True				
ANR	47539	Statement	)	2832:114:101643:101643	47403	56	True				
ANR	47540	Statement	generate_free_foreach_copy	2832:116:101645:101670	47403	57	True				
ANR	47541	Statement	TSRMLS_CC	2832:143:101672:101680	47403	58	True				
ANR	47542	Statement	)	2832:152:101681:101681	47403	59	True				
ANR	47543	ExpressionStatement		2832:153:101682:101682	47403	60	True				
ANR	47544	ExpressionStatement	end_op_number = get_next_op_number ( CG ( active_op_array ) )	2838:1:101943:101998	47403	61	True				
ANR	47545	AssignmentExpression	end_op_number = get_next_op_number ( CG ( active_op_array ) )		47403	0		=			
ANR	47546	Identifier	end_op_number		47403	0					
ANR	47547	CallExpression	get_next_op_number ( CG ( active_op_array ) )		47403	1					
ANR	47548	Callee	get_next_op_number		47403	0					
ANR	47549	Identifier	get_next_op_number		47403	0					
ANR	47550	ArgumentList	CG ( active_op_array )		47403	1					
ANR	47551	Argument	CG ( active_op_array )		47403	0					
ANR	47552	CallExpression	CG ( active_op_array )		47403	0					
ANR	47553	Callee	CG		47403	0					
ANR	47554	Identifier	CG		47403	0					
ANR	47555	ArgumentList	active_op_array		47403	1					
ANR	47556	Argument	active_op_array		47403	0					
ANR	47557	Identifier	active_op_array		47403	0					
ANR	47558	WhileStatement	while ( start_op_number < end_op_number )		47403	62					
ANR	47559	Condition	start_op_number < end_op_number	2839:8:102008:102038	47403	0	True				
ANR	47560	RelationalExpression	start_op_number < end_op_number		47403	0		<			
ANR	47561	Identifier	start_op_number		47403	0					
ANR	47562	Identifier	end_op_number		47403	1					
ANR	47563	CompoundStatement		27:41:1199:1199	47403	1					
ANR	47564	ExpressionStatement	CG ( active_op_array ) -> opcodes [ start_op_number ] . extended_value |= EXT_TYPE_FREE_ON_RETURN	2840:2:102045:102132	47403	0	True				
ANR	47565	AssignmentExpression	CG ( active_op_array ) -> opcodes [ start_op_number ] . extended_value |= EXT_TYPE_FREE_ON_RETURN		47403	0		|=			
ANR	47566	MemberAccess	CG ( active_op_array ) -> opcodes [ start_op_number ] . extended_value		47403	0					
ANR	47567	ArrayIndexing	CG ( active_op_array ) -> opcodes [ start_op_number ]		47403	0					
ANR	47568	PtrMemberAccess	CG ( active_op_array ) -> opcodes		47403	0					
ANR	47569	CallExpression	CG ( active_op_array )		47403	0					
ANR	47570	Callee	CG		47403	0					
ANR	47571	Identifier	CG		47403	0					
ANR	47572	ArgumentList	active_op_array		47403	1					
ANR	47573	Argument	active_op_array		47403	0					
ANR	47574	Identifier	active_op_array		47403	0					
ANR	47575	Identifier	opcodes		47403	1					
ANR	47576	Identifier	start_op_number		47403	1					
ANR	47577	Identifier	extended_value		47403	1					
ANR	47578	Identifier	EXT_TYPE_FREE_ON_RETURN		47403	1					
ANR	47579	ExpressionStatement	start_op_number ++	2841:2:102136:102153	47403	1	True				
ANR	47580	PostIncDecOperationExpression	start_op_number ++		47403	0					
ANR	47581	Identifier	start_op_number		47403	0					
ANR	47582	IncDec	++		47403	1					
ANR	47583	IfStatement	if ( CG ( context ) . in_finally )		47403	63					
ANR	47584	Condition	CG ( context ) . in_finally	2844:5:102164:102185	47403	0	True				
ANR	47585	MemberAccess	CG ( context ) . in_finally		47403	0					
ANR	47586	CallExpression	CG ( context )		47403	0					
ANR	47587	Callee	CG		47403	0					
ANR	47588	Identifier	CG		47403	0					
ANR	47589	ArgumentList	context		47403	1					
ANR	47590	Argument	context		47403	0					
ANR	47591	Identifier	context		47403	0					
ANR	47592	Identifier	in_finally		47403	1					
ANR	47593	CompoundStatement		32:29:1346:1346	47403	1					
ANR	47594	Statement	opline	2845:2:102192:102197	47403	0	True				
ANR	47595	Statement	=	2845:9:102199:102199	47403	1	True				
ANR	47596	Statement	get_next_op	2845:11:102201:102211	47403	2	True				
ANR	47597	Statement	(	2845:22:102212:102212	47403	3	True				
ANR	47598	Statement	CG	2845:23:102213:102214	47403	4	True				
ANR	47599	Statement	(	2845:25:102215:102215	47403	5	True				
ANR	47600	Statement	active_op_array	2845:26:102216:102230	47403	6	True				
ANR	47601	Statement	)	2845:41:102231:102231	47403	7	True				
ANR	47602	Statement	TSRMLS_CC	2845:43:102233:102241	47403	8	True				
ANR	47603	Statement	)	2845:52:102242:102242	47403	9	True				
ANR	47604	ExpressionStatement		2845:53:102243:102243	47403	10	True				
ANR	47605	ExpressionStatement	opline -> opcode = ZEND_DISCARD_EXCEPTION	2846:2:102247:102286	47403	11	True				
ANR	47606	AssignmentExpression	opline -> opcode = ZEND_DISCARD_EXCEPTION		47403	0		=			
ANR	47607	PtrMemberAccess	opline -> opcode		47403	0					
ANR	47608	Identifier	opline		47403	0					
ANR	47609	Identifier	opcode		47403	1					
ANR	47610	Identifier	ZEND_DISCARD_EXCEPTION		47403	1					
ANR	47611	ExpressionStatement	SET_UNUSED ( opline -> op1 )	2847:2:102290:102313	47403	12	True				
ANR	47612	CallExpression	SET_UNUSED ( opline -> op1 )		47403	0					
ANR	47613	Callee	SET_UNUSED		47403	0					
ANR	47614	Identifier	SET_UNUSED		47403	0					
ANR	47615	ArgumentList	opline -> op1		47403	1					
ANR	47616	Argument	opline -> op1		47403	0					
ANR	47617	PtrMemberAccess	opline -> op1		47403	0					
ANR	47618	Identifier	opline		47403	0					
ANR	47619	Identifier	op1		47403	1					
ANR	47620	ExpressionStatement	SET_UNUSED ( opline -> op2 )	2848:2:102317:102340	47403	13	True				
ANR	47621	CallExpression	SET_UNUSED ( opline -> op2 )		47403	0					
ANR	47622	Callee	SET_UNUSED		47403	0					
ANR	47623	Identifier	SET_UNUSED		47403	0					
ANR	47624	ArgumentList	opline -> op2		47403	1					
ANR	47625	Argument	opline -> op2		47403	0					
ANR	47626	PtrMemberAccess	opline -> op2		47403	0					
ANR	47627	Identifier	opline		47403	0					
ANR	47628	Identifier	op2		47403	1					
ANR	47629	Statement	opline	2851:1:102347:102352	47403	64	True				
ANR	47630	Statement	=	2851:8:102354:102354	47403	65	True				
ANR	47631	Statement	get_next_op	2851:10:102356:102366	47403	66	True				
ANR	47632	Statement	(	2851:21:102367:102367	47403	67	True				
ANR	47633	Statement	CG	2851:22:102368:102369	47403	68	True				
ANR	47634	Statement	(	2851:24:102370:102370	47403	69	True				
ANR	47635	Statement	active_op_array	2851:25:102371:102385	47403	70	True				
ANR	47636	Statement	)	2851:40:102386:102386	47403	71	True				
ANR	47637	Statement	TSRMLS_CC	2851:42:102388:102396	47403	72	True				
ANR	47638	Statement	)	2851:51:102397:102397	47403	73	True				
ANR	47639	ExpressionStatement		2851:52:102398:102398	47403	74	True				
ANR	47640	ExpressionStatement	opline -> opcode = returns_reference ? ZEND_RETURN_BY_REF : ZEND_RETURN	2853:1:102402:102471	47403	75	True				
ANR	47641	AssignmentExpression	opline -> opcode = returns_reference ? ZEND_RETURN_BY_REF : ZEND_RETURN		47403	0		=			
ANR	47642	PtrMemberAccess	opline -> opcode		47403	0					
ANR	47643	Identifier	opline		47403	0					
ANR	47644	Identifier	opcode		47403	1					
ANR	47645	ConditionalExpression	returns_reference ? ZEND_RETURN_BY_REF : ZEND_RETURN		47403	1					
ANR	47646	Condition	returns_reference		47403	0					
ANR	47647	Identifier	returns_reference		47403	0					
ANR	47648	Identifier	ZEND_RETURN_BY_REF		47403	1					
ANR	47649	Identifier	ZEND_RETURN		47403	2					
ANR	47650	IfStatement	if ( expr )		47403	76					
ANR	47651	Condition	expr	2855:5:102479:102482	47403	0	True				
ANR	47652	Identifier	expr		47403	0					
ANR	47653	CompoundStatement		43:11:1643:1643	47403	1					
ANR	47654	ExpressionStatement	"SET_NODE ( opline -> op1 , expr )"	2856:2:102489:102516	47403	0	True				
ANR	47655	CallExpression	"SET_NODE ( opline -> op1 , expr )"		47403	0					
ANR	47656	Callee	SET_NODE		47403	0					
ANR	47657	Identifier	SET_NODE		47403	0					
ANR	47658	ArgumentList	opline -> op1		47403	1					
ANR	47659	Argument	opline -> op1		47403	0					
ANR	47660	PtrMemberAccess	opline -> op1		47403	0					
ANR	47661	Identifier	opline		47403	0					
ANR	47662	Identifier	op1		47403	1					
ANR	47663	Argument	expr		47403	1					
ANR	47664	Identifier	expr		47403	0					
ANR	47665	IfStatement	if ( ! do_end_vparse )		47403	1					
ANR	47666	Condition	! do_end_vparse	2858:6:102525:102538	47403	0	True				
ANR	47667	UnaryOperationExpression	! do_end_vparse		47403	0					
ANR	47668	UnaryOperator	!		47403	0					
ANR	47669	Identifier	do_end_vparse		47403	1					
ANR	47670	CompoundStatement		46:22:1699:1699	47403	1					
ANR	47671	ExpressionStatement	opline -> extended_value = ZEND_RETURNS_VALUE	2859:3:102546:102589	47403	0	True				
ANR	47672	AssignmentExpression	opline -> extended_value = ZEND_RETURNS_VALUE		47403	0		=			
ANR	47673	PtrMemberAccess	opline -> extended_value		47403	0					
ANR	47674	Identifier	opline		47403	0					
ANR	47675	Identifier	extended_value		47403	1					
ANR	47676	Identifier	ZEND_RETURNS_VALUE		47403	1					
ANR	47677	ElseStatement	else		47403	0					
ANR	47678	IfStatement	if ( zend_is_function_or_method_call ( expr ) )		47403	0					
ANR	47679	Condition	zend_is_function_or_method_call ( expr )	2860:13:102604:102640	47403	0	True				
ANR	47680	CallExpression	zend_is_function_or_method_call ( expr )		47403	0					
ANR	47681	Callee	zend_is_function_or_method_call		47403	0					
ANR	47682	Identifier	zend_is_function_or_method_call		47403	0					
ANR	47683	ArgumentList	expr		47403	1					
ANR	47684	Argument	expr		47403	0					
ANR	47685	Identifier	expr		47403	0					
ANR	47686	CompoundStatement		48:52:1801:1801	47403	1					
ANR	47687	ExpressionStatement	opline -> extended_value = ZEND_RETURNS_FUNCTION	2861:3:102648:102694	47403	0	True				
ANR	47688	AssignmentExpression	opline -> extended_value = ZEND_RETURNS_FUNCTION		47403	0		=			
ANR	47689	PtrMemberAccess	opline -> extended_value		47403	0					
ANR	47690	Identifier	opline		47403	0					
ANR	47691	Identifier	extended_value		47403	1					
ANR	47692	Identifier	ZEND_RETURNS_FUNCTION		47403	1					
ANR	47693	ElseStatement	else		47403	0					
ANR	47694	CompoundStatement		51:8:1866:1866	47403	0					
ANR	47695	ExpressionStatement	opline -> op1_type = IS_CONST	2864:2:102712:102739	47403	0	True				
ANR	47696	AssignmentExpression	opline -> op1_type = IS_CONST		47403	0		=			
ANR	47697	PtrMemberAccess	opline -> op1_type		47403	0					
ANR	47698	Identifier	opline		47403	0					
ANR	47699	Identifier	op1_type		47403	1					
ANR	47700	Identifier	IS_CONST		47403	1					
ANR	47701	ExpressionStatement	LITERAL_NULL ( opline -> op1 )	2865:2:102743:102768	47403	1	True				
ANR	47702	CallExpression	LITERAL_NULL ( opline -> op1 )		47403	0					
ANR	47703	Callee	LITERAL_NULL		47403	0					
ANR	47704	Identifier	LITERAL_NULL		47403	0					
ANR	47705	ArgumentList	opline -> op1		47403	1					
ANR	47706	Argument	opline -> op1		47403	0					
ANR	47707	PtrMemberAccess	opline -> op1		47403	0					
ANR	47708	Identifier	opline		47403	0					
ANR	47709	Identifier	op1		47403	1					
ANR	47710	ExpressionStatement	SET_UNUSED ( opline -> op2 )	2868:1:102775:102798	47403	77	True				
ANR	47711	CallExpression	SET_UNUSED ( opline -> op2 )		47403	0					
ANR	47712	Callee	SET_UNUSED		47403	0					
ANR	47713	Identifier	SET_UNUSED		47403	0					
ANR	47714	ArgumentList	opline -> op2		47403	1					
ANR	47715	Argument	opline -> op2		47403	0					
ANR	47716	PtrMemberAccess	opline -> op2		47403	0					
ANR	47717	Identifier	opline		47403	0					
ANR	47718	Identifier	op2		47403	1					
ANR	47719	ReturnType	void		47403	1					
ANR	47720	Identifier	zend_do_return		47403	2					
ANR	47721	ParameterList	"znode * expr , int do_end_vparse TSRMLS_DC"		47403	3					
ANR	47722	Parameter	znode * expr	2812:20:100789:100799	47403	0	True				
ANR	47723	ParameterType	znode *		47403	0					
ANR	47724	Identifier	expr		47403	1					
ANR	47725	Parameter	int do_end_vparse TSRMLS_DC	2812:33:100802:100828	47403	1	True				
ANR	47726	ParameterType	int do_end_vparse		47403	0					
ANR	47727	Identifier	TSRMLS_DC		47403	1					
ANR	47728	CFGEntryNode	ENTRY		47403		True				
ANR	47729	CFGExitNode	EXIT		47403		True				
ANR	47730	Symbol	opline -> op1		47403						
ANR	47731	Symbol	opline -> op2		47403						
ANR	47732	Symbol	* CG		47403						
ANR	47733	Symbol	TSRMLS_DC		47403						
ANR	47734	Symbol	CG ( active_op_array ) -> opcodes		47403						
ANR	47735	Symbol	returns_reference		47403						
ANR	47736	Symbol	opline -> extended_value		47403						
ANR	47737	Symbol	* start_op_number		47403						
ANR	47738	Symbol	* * CG		47403						
ANR	47739	Symbol	EXT_TYPE_FREE_ON_RETURN		47403						
ANR	47740	Symbol	opline		47403						
ANR	47741	Symbol	ZEND_RETURNS_VALUE		47403						
ANR	47742	Symbol	end_op_number		47403						
ANR	47743	Symbol	ZEND_RETURN_BY_REF		47403						
ANR	47744	Symbol	context		47403						
ANR	47745	Symbol	expr		47403						
ANR	47746	Symbol	do_end_vparse		47403						
ANR	47747	Symbol	zend_is_function_or_method_call		47403						
ANR	47748	Symbol	* CG ( active_op_array ) -> opcodes		47403						
ANR	47749	Symbol	CG ( context ) . in_finally		47403						
ANR	47750	Symbol	start_op_number		47403						
ANR	47751	Symbol	IS_CONST		47403						
ANR	47752	Symbol	ZEND_RETURN		47403						
ANR	47753	Symbol	CG		47403						
ANR	47754	Symbol	active_op_array		47403						
ANR	47755	Symbol	CG ( active_op_array ) -> opcodes [ start_op_number ] . extended_value		47403						
ANR	47756	Symbol	CG ( active_op_array ) -> fn_flags		47403						
ANR	47757	Symbol	ZEND_RETURNS_FUNCTION		47403						
ANR	47758	Symbol	opline -> op1_type		47403						
ANR	47759	Symbol	* opline		47403						
ANR	47760	Symbol	opline -> opcode		47403						
ANR	47761	Symbol	ZEND_ACC_RETURN_REFERENCE		47403						
ANR	47762	Symbol	ZEND_DISCARD_EXCEPTION		47403						
ANR	47763	Symbol	get_next_op_number		47403						
ANR	47764	Function	zend_do_yield	2872:0:102813:103930							
ANR	47765	FunctionDef	"zend_do_yield (znode * result , znode * value , const znode * key , zend_bool is_variable TSRMLS_DC)"		47764	0					
ANR	47766	CompoundStatement		2873:0:102922:103930	47764	0					
ANR	47767	IdentifierDeclStatement	zend_op * opline ;	2874:1:102925:102940	47764	0	True				
ANR	47768	IdentifierDecl	* opline		47764	0					
ANR	47769	IdentifierDeclType	zend_op *		47764	0					
ANR	47770	Identifier	opline		47764	1					
ANR	47771	IfStatement	if ( ! CG ( active_op_array ) -> function_name )		47764	1					
ANR	47772	Condition	! CG ( active_op_array ) -> function_name	2876:5:102948:102982	47764	0	True				
ANR	47773	UnaryOperationExpression	! CG ( active_op_array ) -> function_name		47764	0					
ANR	47774	UnaryOperator	!		47764	0					
ANR	47775	PtrMemberAccess	CG ( active_op_array ) -> function_name		47764	1					
ANR	47776	CallExpression	CG ( active_op_array )		47764	0					
ANR	47777	Callee	CG		47764	0					
ANR	47778	Identifier	CG		47764	0					
ANR	47779	ArgumentList	active_op_array		47764	1					
ANR	47780	Argument	active_op_array		47764	0					
ANR	47781	Identifier	active_op_array		47764	0					
ANR	47782	Identifier	function_name		47764	1					
ANR	47783	CompoundStatement		4:42:62:62	47764	1					
ANR	47784	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""The \\""yield\\"" expression can only be used inside a function"" )"	2877:2:102989:103088	47764	0	True				
ANR	47785	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""The \\""yield\\"" expression can only be used inside a function"" )"		47764	0					
ANR	47786	Callee	zend_error_noreturn		47764	0					
ANR	47787	Identifier	zend_error_noreturn		47764	0					
ANR	47788	ArgumentList	E_COMPILE_ERROR		47764	1					
ANR	47789	Argument	E_COMPILE_ERROR		47764	0					
ANR	47790	Identifier	E_COMPILE_ERROR		47764	0					
ANR	47791	Argument	"""The \\""yield\\"" expression can only be used inside a function"""		47764	1					
ANR	47792	PrimaryExpression	"""The \\""yield\\"" expression can only be used inside a function"""		47764	0					
ANR	47793	ExpressionStatement	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_GENERATOR	2880:1:103095:103146	47764	2	True				
ANR	47794	AssignmentExpression	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_GENERATOR		47764	0		|=			
ANR	47795	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		47764	0					
ANR	47796	CallExpression	CG ( active_op_array )		47764	0					
ANR	47797	Callee	CG		47764	0					
ANR	47798	Identifier	CG		47764	0					
ANR	47799	ArgumentList	active_op_array		47764	1					
ANR	47800	Argument	active_op_array		47764	0					
ANR	47801	Identifier	active_op_array		47764	0					
ANR	47802	Identifier	fn_flags		47764	1					
ANR	47803	Identifier	ZEND_ACC_GENERATOR		47764	1					
ANR	47804	IfStatement	if ( is_variable )		47764	3					
ANR	47805	Condition	is_variable	2882:5:103154:103164	47764	0	True				
ANR	47806	Identifier	is_variable		47764	0					
ANR	47807	CompoundStatement		10:18:244:244	47764	1					
ANR	47808	IfStatement	if ( ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) && ! zend_is_function_or_method_call ( value ) )		47764	0					
ANR	47809	Condition	( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) && ! zend_is_function_or_method_call ( value )	2883:6:103175:103276	47764	0	True				
ANR	47810	AndExpression	( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) && ! zend_is_function_or_method_call ( value )		47764	0		&&			
ANR	47811	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE		47764	0		&			
ANR	47812	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		47764	0					
ANR	47813	CallExpression	CG ( active_op_array )		47764	0					
ANR	47814	Callee	CG		47764	0					
ANR	47815	Identifier	CG		47764	0					
ANR	47816	ArgumentList	active_op_array		47764	1					
ANR	47817	Argument	active_op_array		47764	0					
ANR	47818	Identifier	active_op_array		47764	0					
ANR	47819	Identifier	fn_flags		47764	1					
ANR	47820	Identifier	ZEND_ACC_RETURN_REFERENCE		47764	1					
ANR	47821	UnaryOperationExpression	! zend_is_function_or_method_call ( value )		47764	1					
ANR	47822	UnaryOperator	!		47764	0					
ANR	47823	CallExpression	zend_is_function_or_method_call ( value )		47764	1					
ANR	47824	Callee	zend_is_function_or_method_call		47764	0					
ANR	47825	Identifier	zend_is_function_or_method_call		47764	0					
ANR	47826	ArgumentList	value		47764	1					
ANR	47827	Argument	value		47764	0					
ANR	47828	Identifier	value		47764	0					
ANR	47829	CompoundStatement		11:110:356:356	47764	1					
ANR	47830	Statement	zend_do_end_variable_parse	2884:3:103284:103309	47764	0	True				
ANR	47831	Statement	(	2884:29:103310:103310	47764	1	True				
ANR	47832	Statement	value	2884:30:103311:103315	47764	2	True				
ANR	47833	Statement	","	2884:35:103316:103316	47764	3	True				
ANR	47834	Statement	BP_VAR_W	2884:37:103318:103325	47764	4	True				
ANR	47835	Statement	","	2884:45:103326:103326	47764	5	True				
ANR	47836	Statement	0	2884:47:103328:103328	47764	6	True				
ANR	47837	Statement	TSRMLS_CC	2884:49:103330:103338	47764	7	True				
ANR	47838	Statement	)	2884:58:103339:103339	47764	8	True				
ANR	47839	ExpressionStatement		2884:59:103340:103340	47764	9	True				
ANR	47840	ElseStatement	else		47764	0					
ANR	47841	CompoundStatement		13:9:428:428	47764	0					
ANR	47842	Statement	zend_do_end_variable_parse	2886:3:103356:103381	47764	0	True				
ANR	47843	Statement	(	2886:29:103382:103382	47764	1	True				
ANR	47844	Statement	value	2886:30:103383:103387	47764	2	True				
ANR	47845	Statement	","	2886:35:103388:103388	47764	3	True				
ANR	47846	Statement	BP_VAR_R	2886:37:103390:103397	47764	4	True				
ANR	47847	Statement	","	2886:45:103398:103398	47764	5	True				
ANR	47848	Statement	0	2886:47:103400:103400	47764	6	True				
ANR	47849	Statement	TSRMLS_CC	2886:49:103402:103410	47764	7	True				
ANR	47850	Statement	)	2886:58:103411:103411	47764	8	True				
ANR	47851	ExpressionStatement		2886:59:103412:103412	47764	9	True				
ANR	47852	Statement	opline	2890:1:103423:103428	47764	4	True				
ANR	47853	Statement	=	2890:8:103430:103430	47764	5	True				
ANR	47854	Statement	get_next_op	2890:10:103432:103442	47764	6	True				
ANR	47855	Statement	(	2890:21:103443:103443	47764	7	True				
ANR	47856	Statement	CG	2890:22:103444:103445	47764	8	True				
ANR	47857	Statement	(	2890:24:103446:103446	47764	9	True				
ANR	47858	Statement	active_op_array	2890:25:103447:103461	47764	10	True				
ANR	47859	Statement	)	2890:40:103462:103462	47764	11	True				
ANR	47860	Statement	TSRMLS_CC	2890:42:103464:103472	47764	12	True				
ANR	47861	Statement	)	2890:51:103473:103473	47764	13	True				
ANR	47862	ExpressionStatement		2890:52:103474:103474	47764	14	True				
ANR	47863	ExpressionStatement	opline -> opcode = ZEND_YIELD	2892:1:103478:103505	47764	15	True				
ANR	47864	AssignmentExpression	opline -> opcode = ZEND_YIELD		47764	0		=			
ANR	47865	PtrMemberAccess	opline -> opcode		47764	0					
ANR	47866	Identifier	opline		47764	0					
ANR	47867	Identifier	opcode		47764	1					
ANR	47868	Identifier	ZEND_YIELD		47764	1					
ANR	47869	IfStatement	if ( value )		47764	16					
ANR	47870	Condition	value	2894:5:103513:103517	47764	0	True				
ANR	47871	Identifier	value		47764	0					
ANR	47872	CompoundStatement		22:12:597:597	47764	1					
ANR	47873	ExpressionStatement	"SET_NODE ( opline -> op1 , value )"	2895:2:103524:103552	47764	0	True				
ANR	47874	CallExpression	"SET_NODE ( opline -> op1 , value )"		47764	0					
ANR	47875	Callee	SET_NODE		47764	0					
ANR	47876	Identifier	SET_NODE		47764	0					
ANR	47877	ArgumentList	opline -> op1		47764	1					
ANR	47878	Argument	opline -> op1		47764	0					
ANR	47879	PtrMemberAccess	opline -> op1		47764	0					
ANR	47880	Identifier	opline		47764	0					
ANR	47881	Identifier	op1		47764	1					
ANR	47882	Argument	value		47764	1					
ANR	47883	Identifier	value		47764	0					
ANR	47884	IfStatement	if ( is_variable && zend_is_function_or_method_call ( value ) )		47764	1					
ANR	47885	Condition	is_variable && zend_is_function_or_method_call ( value )	2897:6:103561:103613	47764	0	True				
ANR	47886	AndExpression	is_variable && zend_is_function_or_method_call ( value )		47764	0		&&			
ANR	47887	Identifier	is_variable		47764	0					
ANR	47888	CallExpression	zend_is_function_or_method_call ( value )		47764	1					
ANR	47889	Callee	zend_is_function_or_method_call		47764	0					
ANR	47890	Identifier	zend_is_function_or_method_call		47764	0					
ANR	47891	ArgumentList	value		47764	1					
ANR	47892	Argument	value		47764	0					
ANR	47893	Identifier	value		47764	0					
ANR	47894	CompoundStatement		25:61:693:693	47764	1					
ANR	47895	ExpressionStatement	opline -> extended_value = ZEND_RETURNS_FUNCTION	2898:3:103621:103667	47764	0	True				
ANR	47896	AssignmentExpression	opline -> extended_value = ZEND_RETURNS_FUNCTION		47764	0		=			
ANR	47897	PtrMemberAccess	opline -> extended_value		47764	0					
ANR	47898	Identifier	opline		47764	0					
ANR	47899	Identifier	extended_value		47764	1					
ANR	47900	Identifier	ZEND_RETURNS_FUNCTION		47764	1					
ANR	47901	ElseStatement	else		47764	0					
ANR	47902	CompoundStatement		28:8:758:758	47764	0					
ANR	47903	ExpressionStatement	SET_UNUSED ( opline -> op1 )	2901:2:103685:103708	47764	0	True				
ANR	47904	CallExpression	SET_UNUSED ( opline -> op1 )		47764	0					
ANR	47905	Callee	SET_UNUSED		47764	0					
ANR	47906	Identifier	SET_UNUSED		47764	0					
ANR	47907	ArgumentList	opline -> op1		47764	1					
ANR	47908	Argument	opline -> op1		47764	0					
ANR	47909	PtrMemberAccess	opline -> op1		47764	0					
ANR	47910	Identifier	opline		47764	0					
ANR	47911	Identifier	op1		47764	1					
ANR	47912	IfStatement	if ( key )		47764	17					
ANR	47913	Condition	key	2904:5:103719:103721	47764	0	True				
ANR	47914	Identifier	key		47764	0					
ANR	47915	CompoundStatement		32:10:801:801	47764	1					
ANR	47916	ExpressionStatement	"SET_NODE ( opline -> op2 , key )"	2905:2:103728:103754	47764	0	True				
ANR	47917	CallExpression	"SET_NODE ( opline -> op2 , key )"		47764	0					
ANR	47918	Callee	SET_NODE		47764	0					
ANR	47919	Identifier	SET_NODE		47764	0					
ANR	47920	ArgumentList	opline -> op2		47764	1					
ANR	47921	Argument	opline -> op2		47764	0					
ANR	47922	PtrMemberAccess	opline -> op2		47764	0					
ANR	47923	Identifier	opline		47764	0					
ANR	47924	Identifier	op2		47764	1					
ANR	47925	Argument	key		47764	1					
ANR	47926	Identifier	key		47764	0					
ANR	47927	ElseStatement	else		47764	0					
ANR	47928	CompoundStatement		34:8:841:841	47764	0					
ANR	47929	ExpressionStatement	SET_UNUSED ( opline -> op2 )	2907:2:103768:103791	47764	0	True				
ANR	47930	CallExpression	SET_UNUSED ( opline -> op2 )		47764	0					
ANR	47931	Callee	SET_UNUSED		47764	0					
ANR	47932	Identifier	SET_UNUSED		47764	0					
ANR	47933	ArgumentList	opline -> op2		47764	1					
ANR	47934	Argument	opline -> op2		47764	0					
ANR	47935	PtrMemberAccess	opline -> op2		47764	0					
ANR	47936	Identifier	opline		47764	0					
ANR	47937	Identifier	op2		47764	1					
ANR	47938	ExpressionStatement	opline -> result_type = IS_VAR	2910:1:103798:103826	47764	18	True				
ANR	47939	AssignmentExpression	opline -> result_type = IS_VAR		47764	0		=			
ANR	47940	PtrMemberAccess	opline -> result_type		47764	0					
ANR	47941	Identifier	opline		47764	0					
ANR	47942	Identifier	result_type		47764	1					
ANR	47943	Identifier	IS_VAR		47764	1					
ANR	47944	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	2911:1:103829:103893	47764	19	True				
ANR	47945	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		47764	0		=			
ANR	47946	MemberAccess	opline -> result . var		47764	0					
ANR	47947	PtrMemberAccess	opline -> result		47764	0					
ANR	47948	Identifier	opline		47764	0					
ANR	47949	Identifier	result		47764	1					
ANR	47950	Identifier	var		47764	1					
ANR	47951	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		47764	1					
ANR	47952	Callee	get_temporary_variable		47764	0					
ANR	47953	Identifier	get_temporary_variable		47764	0					
ANR	47954	ArgumentList	CG ( active_op_array )		47764	1					
ANR	47955	Argument	CG ( active_op_array )		47764	0					
ANR	47956	CallExpression	CG ( active_op_array )		47764	0					
ANR	47957	Callee	CG		47764	0					
ANR	47958	Identifier	CG		47764	0					
ANR	47959	ArgumentList	active_op_array		47764	1					
ANR	47960	Argument	active_op_array		47764	0					
ANR	47961	Identifier	active_op_array		47764	0					
ANR	47962	ExpressionStatement	"GET_NODE ( result , opline -> result )"	2912:1:103896:103928	47764	20	True				
ANR	47963	CallExpression	"GET_NODE ( result , opline -> result )"		47764	0					
ANR	47964	Callee	GET_NODE		47764	0					
ANR	47965	Identifier	GET_NODE		47764	0					
ANR	47966	ArgumentList	result		47764	1					
ANR	47967	Argument	result		47764	0					
ANR	47968	Identifier	result		47764	0					
ANR	47969	Argument	opline -> result		47764	1					
ANR	47970	PtrMemberAccess	opline -> result		47764	0					
ANR	47971	Identifier	opline		47764	0					
ANR	47972	Identifier	result		47764	1					
ANR	47973	ReturnType	void		47764	1					
ANR	47974	Identifier	zend_do_yield		47764	2					
ANR	47975	ParameterList	"znode * result , znode * value , const znode * key , zend_bool is_variable TSRMLS_DC"		47764	3					
ANR	47976	Parameter	znode * result	2872:19:102832:102844	47764	0	True				
ANR	47977	ParameterType	znode *		47764	0					
ANR	47978	Identifier	result		47764	1					
ANR	47979	Parameter	znode * value	2872:34:102847:102858	47764	1	True				
ANR	47980	ParameterType	znode *		47764	0					
ANR	47981	Identifier	value		47764	1					
ANR	47982	Parameter	const znode * key	2872:48:102861:102876	47764	2	True				
ANR	47983	ParameterType	const znode *		47764	0					
ANR	47984	Identifier	key		47764	1					
ANR	47985	Parameter	zend_bool is_variable TSRMLS_DC	2872:66:102879:102909	47764	3	True				
ANR	47986	ParameterType	zend_bool is_variable		47764	0					
ANR	47987	Identifier	TSRMLS_DC		47764	1					
ANR	47988	CFGEntryNode	ENTRY		47764		True				
ANR	47989	CFGExitNode	EXIT		47764		True				
ANR	47990	Symbol	CG ( active_op_array ) -> function_name		47764						
ANR	47991	Symbol	opline -> op1		47764						
ANR	47992	Symbol	opline -> op2		47764						
ANR	47993	Symbol	is_variable		47764						
ANR	47994	Symbol	E_COMPILE_ERROR		47764						
ANR	47995	Symbol	* CG		47764						
ANR	47996	Symbol	get_temporary_variable		47764						
ANR	47997	Symbol	TSRMLS_DC		47764						
ANR	47998	Symbol	opline -> extended_value		47764						
ANR	47999	Symbol	opline -> result		47764						
ANR	48000	Symbol	result		47764						
ANR	48001	Symbol	opline		47764						
ANR	48002	Symbol	ZEND_ACC_GENERATOR		47764						
ANR	48003	Symbol	zend_is_function_or_method_call		47764						
ANR	48004	Symbol	value		47764						
ANR	48005	Symbol	key		47764						
ANR	48006	Symbol	opline -> result_type		47764						
ANR	48007	Symbol	CG		47764						
ANR	48008	Symbol	ZEND_YIELD		47764						
ANR	48009	Symbol	active_op_array		47764						
ANR	48010	Symbol	CG ( active_op_array ) -> fn_flags		47764						
ANR	48011	Symbol	ZEND_RETURNS_FUNCTION		47764						
ANR	48012	Symbol	* opline		47764						
ANR	48013	Symbol	opline -> opcode		47764						
ANR	48014	Symbol	ZEND_ACC_RETURN_REFERENCE		47764						
ANR	48015	Symbol	IS_VAR		47764						
ANR	48016	Symbol	opline -> result . var		47764						
ANR	48017	Function	zend_add_try_element	2916:0:103943:104549							
ANR	48018	FunctionDef	zend_add_try_element (zend_uint try_op TSRMLS_DC)		48017	0					
ANR	48019	CompoundStatement		2917:0:104013:104549	48017	0					
ANR	48020	IdentifierDeclStatement	int try_catch_offset = CG ( active_op_array ) -> last_try_catch ++ ;	2918:1:104016:104076	48017	0	True				
ANR	48021	IdentifierDecl	try_catch_offset = CG ( active_op_array ) -> last_try_catch ++		48017	0					
ANR	48022	IdentifierDeclType	int		48017	0					
ANR	48023	Identifier	try_catch_offset		48017	1					
ANR	48024	AssignmentExpression	try_catch_offset = CG ( active_op_array ) -> last_try_catch ++		48017	2		=			
ANR	48025	Identifier	try_catch_offset		48017	0					
ANR	48026	PostIncDecOperationExpression	CG ( active_op_array ) -> last_try_catch ++		48017	1					
ANR	48027	PtrMemberAccess	CG ( active_op_array ) -> last_try_catch		48017	0					
ANR	48028	CallExpression	CG ( active_op_array )		48017	0					
ANR	48029	Callee	CG		48017	0					
ANR	48030	Identifier	CG		48017	0					
ANR	48031	ArgumentList	active_op_array		48017	1					
ANR	48032	Argument	active_op_array		48017	0					
ANR	48033	Identifier	active_op_array		48017	0					
ANR	48034	Identifier	last_try_catch		48017	1					
ANR	48035	IncDec	++		48017	1					
ANR	48036	ExpressionStatement	"CG ( active_op_array ) -> try_catch_array = erealloc ( CG ( active_op_array ) -> try_catch_array , sizeof ( zend_try_catch_element ) * CG ( active_op_array ) -> last_try_catch )"	2920:1:104080:104233	48017	1	True				
ANR	48037	AssignmentExpression	"CG ( active_op_array ) -> try_catch_array = erealloc ( CG ( active_op_array ) -> try_catch_array , sizeof ( zend_try_catch_element ) * CG ( active_op_array ) -> last_try_catch )"		48017	0		=			
ANR	48038	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		48017	0					
ANR	48039	CallExpression	CG ( active_op_array )		48017	0					
ANR	48040	Callee	CG		48017	0					
ANR	48041	Identifier	CG		48017	0					
ANR	48042	ArgumentList	active_op_array		48017	1					
ANR	48043	Argument	active_op_array		48017	0					
ANR	48044	Identifier	active_op_array		48017	0					
ANR	48045	Identifier	try_catch_array		48017	1					
ANR	48046	CallExpression	"erealloc ( CG ( active_op_array ) -> try_catch_array , sizeof ( zend_try_catch_element ) * CG ( active_op_array ) -> last_try_catch )"		48017	1					
ANR	48047	Callee	erealloc		48017	0					
ANR	48048	Identifier	erealloc		48017	0					
ANR	48049	ArgumentList	CG ( active_op_array ) -> try_catch_array		48017	1					
ANR	48050	Argument	CG ( active_op_array ) -> try_catch_array		48017	0					
ANR	48051	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		48017	0					
ANR	48052	CallExpression	CG ( active_op_array )		48017	0					
ANR	48053	Callee	CG		48017	0					
ANR	48054	Identifier	CG		48017	0					
ANR	48055	ArgumentList	active_op_array		48017	1					
ANR	48056	Argument	active_op_array		48017	0					
ANR	48057	Identifier	active_op_array		48017	0					
ANR	48058	Identifier	try_catch_array		48017	1					
ANR	48059	Argument	sizeof ( zend_try_catch_element ) * CG ( active_op_array ) -> last_try_catch		48017	1					
ANR	48060	MultiplicativeExpression	sizeof ( zend_try_catch_element ) * CG ( active_op_array ) -> last_try_catch		48017	0		*			
ANR	48061	SizeofExpression	sizeof ( zend_try_catch_element )		48017	0					
ANR	48062	Sizeof	sizeof		48017	0					
ANR	48063	SizeofOperand	zend_try_catch_element		48017	1					
ANR	48064	PtrMemberAccess	CG ( active_op_array ) -> last_try_catch		48017	1					
ANR	48065	CallExpression	CG ( active_op_array )		48017	0					
ANR	48066	Callee	CG		48017	0					
ANR	48067	Identifier	CG		48017	0					
ANR	48068	ArgumentList	active_op_array		48017	1					
ANR	48069	Argument	active_op_array		48017	0					
ANR	48070	Identifier	active_op_array		48017	0					
ANR	48071	Identifier	last_try_catch		48017	1					
ANR	48072	ExpressionStatement	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . try_op = try_op	2921:1:104236:104306	48017	2	True				
ANR	48073	AssignmentExpression	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . try_op = try_op		48017	0		=			
ANR	48074	MemberAccess	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . try_op		48017	0					
ANR	48075	ArrayIndexing	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ]		48017	0					
ANR	48076	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		48017	0					
ANR	48077	CallExpression	CG ( active_op_array )		48017	0					
ANR	48078	Callee	CG		48017	0					
ANR	48079	Identifier	CG		48017	0					
ANR	48080	ArgumentList	active_op_array		48017	1					
ANR	48081	Argument	active_op_array		48017	0					
ANR	48082	Identifier	active_op_array		48017	0					
ANR	48083	Identifier	try_catch_array		48017	1					
ANR	48084	Identifier	try_catch_offset		48017	1					
ANR	48085	Identifier	try_op		48017	1					
ANR	48086	Identifier	try_op		48017	1					
ANR	48087	ExpressionStatement	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . catch_op = 0	2922:1:104309:104376	48017	3	True				
ANR	48088	AssignmentExpression	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . catch_op = 0		48017	0		=			
ANR	48089	MemberAccess	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . catch_op		48017	0					
ANR	48090	ArrayIndexing	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ]		48017	0					
ANR	48091	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		48017	0					
ANR	48092	CallExpression	CG ( active_op_array )		48017	0					
ANR	48093	Callee	CG		48017	0					
ANR	48094	Identifier	CG		48017	0					
ANR	48095	ArgumentList	active_op_array		48017	1					
ANR	48096	Argument	active_op_array		48017	0					
ANR	48097	Identifier	active_op_array		48017	0					
ANR	48098	Identifier	try_catch_array		48017	1					
ANR	48099	Identifier	try_catch_offset		48017	1					
ANR	48100	Identifier	catch_op		48017	1					
ANR	48101	PrimaryExpression	0		48017	1					
ANR	48102	ExpressionStatement	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_op = 0	2923:1:104379:104448	48017	4	True				
ANR	48103	AssignmentExpression	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_op = 0		48017	0		=			
ANR	48104	MemberAccess	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_op		48017	0					
ANR	48105	ArrayIndexing	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ]		48017	0					
ANR	48106	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		48017	0					
ANR	48107	CallExpression	CG ( active_op_array )		48017	0					
ANR	48108	Callee	CG		48017	0					
ANR	48109	Identifier	CG		48017	0					
ANR	48110	ArgumentList	active_op_array		48017	1					
ANR	48111	Argument	active_op_array		48017	0					
ANR	48112	Identifier	active_op_array		48017	0					
ANR	48113	Identifier	try_catch_array		48017	1					
ANR	48114	Identifier	try_catch_offset		48017	1					
ANR	48115	Identifier	finally_op		48017	1					
ANR	48116	PrimaryExpression	0		48017	1					
ANR	48117	ExpressionStatement	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_end = 0	2924:1:104451:104521	48017	5	True				
ANR	48118	AssignmentExpression	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_end = 0		48017	0		=			
ANR	48119	MemberAccess	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_end		48017	0					
ANR	48120	ArrayIndexing	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ]		48017	0					
ANR	48121	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		48017	0					
ANR	48122	CallExpression	CG ( active_op_array )		48017	0					
ANR	48123	Callee	CG		48017	0					
ANR	48124	Identifier	CG		48017	0					
ANR	48125	ArgumentList	active_op_array		48017	1					
ANR	48126	Argument	active_op_array		48017	0					
ANR	48127	Identifier	active_op_array		48017	0					
ANR	48128	Identifier	try_catch_array		48017	1					
ANR	48129	Identifier	try_catch_offset		48017	1					
ANR	48130	Identifier	finally_end		48017	1					
ANR	48131	PrimaryExpression	0		48017	1					
ANR	48132	ReturnStatement	return try_catch_offset ;	2925:1:104524:104547	48017	6	True				
ANR	48133	Identifier	try_catch_offset		48017	0					
ANR	48134	ReturnType	static int		48017	1					
ANR	48135	Identifier	zend_add_try_element		48017	2					
ANR	48136	ParameterList	zend_uint try_op TSRMLS_DC		48017	3					
ANR	48137	Parameter	zend_uint try_op TSRMLS_DC	2916:32:103975:104000	48017	0	True				
ANR	48138	ParameterType	zend_uint try_op		48017	0					
ANR	48139	Identifier	TSRMLS_DC		48017	1					
ANR	48140	CFGEntryNode	ENTRY		48017		True				
ANR	48141	CFGExitNode	EXIT		48017		True				
ANR	48142	Symbol	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . try_op		48017						
ANR	48143	Symbol	CG		48017						
ANR	48144	Symbol	active_op_array		48017						
ANR	48145	Symbol	try_catch_offset		48017						
ANR	48146	Symbol	* CG		48017						
ANR	48147	Symbol	CG ( active_op_array ) -> try_catch_array		48017						
ANR	48148	Symbol	TSRMLS_DC		48017						
ANR	48149	Symbol	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_op		48017						
ANR	48150	Symbol	* * CG		48017						
ANR	48151	Symbol	try_op		48017						
ANR	48152	Symbol	* CG ( active_op_array ) -> try_catch_array		48017						
ANR	48153	Symbol	* try_catch_offset		48017						
ANR	48154	Symbol	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . catch_op		48017						
ANR	48155	Symbol	CG ( active_op_array ) -> last_try_catch		48017						
ANR	48156	Symbol	erealloc		48017						
ANR	48157	Symbol	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_end		48017						
ANR	48158	Function	zend_add_catch_element	2929:0:104562:104718							
ANR	48159	FunctionDef	"zend_add_catch_element (int offset , zend_uint catch_op TSRMLS_DC)"		48158	0					
ANR	48160	CompoundStatement		2930:0:104649:104718	48158	0					
ANR	48161	ExpressionStatement	CG ( active_op_array ) -> try_catch_array [ offset ] . catch_op = catch_op	2931:1:104652:104716	48158	0	True				
ANR	48162	AssignmentExpression	CG ( active_op_array ) -> try_catch_array [ offset ] . catch_op = catch_op		48158	0		=			
ANR	48163	MemberAccess	CG ( active_op_array ) -> try_catch_array [ offset ] . catch_op		48158	0					
ANR	48164	ArrayIndexing	CG ( active_op_array ) -> try_catch_array [ offset ]		48158	0					
ANR	48165	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		48158	0					
ANR	48166	CallExpression	CG ( active_op_array )		48158	0					
ANR	48167	Callee	CG		48158	0					
ANR	48168	Identifier	CG		48158	0					
ANR	48169	ArgumentList	active_op_array		48158	1					
ANR	48170	Argument	active_op_array		48158	0					
ANR	48171	Identifier	active_op_array		48158	0					
ANR	48172	Identifier	try_catch_array		48158	1					
ANR	48173	Identifier	offset		48158	1					
ANR	48174	Identifier	catch_op		48158	1					
ANR	48175	Identifier	catch_op		48158	1					
ANR	48176	ReturnType	static void		48158	1					
ANR	48177	Identifier	zend_add_catch_element		48158	2					
ANR	48178	ParameterList	"int offset , zend_uint catch_op TSRMLS_DC"		48158	3					
ANR	48179	Parameter	int offset	2929:35:104597:104606	48158	0	True				
ANR	48180	ParameterType	int		48158	0					
ANR	48181	Identifier	offset		48158	1					
ANR	48182	Parameter	zend_uint catch_op TSRMLS_DC	2929:47:104609:104636	48158	1	True				
ANR	48183	ParameterType	zend_uint catch_op		48158	0					
ANR	48184	Identifier	TSRMLS_DC		48158	1					
ANR	48185	CFGEntryNode	ENTRY		48158		True				
ANR	48186	CFGExitNode	EXIT		48158		True				
ANR	48187	Symbol	* * CG		48158						
ANR	48188	Symbol	catch_op		48158						
ANR	48189	Symbol	offset		48158						
ANR	48190	Symbol	CG		48158						
ANR	48191	Symbol	* CG ( active_op_array ) -> try_catch_array		48158						
ANR	48192	Symbol	active_op_array		48158						
ANR	48193	Symbol	* offset		48158						
ANR	48194	Symbol	* CG		48158						
ANR	48195	Symbol	CG ( active_op_array ) -> try_catch_array [ offset ] . catch_op		48158						
ANR	48196	Symbol	CG ( active_op_array ) -> try_catch_array		48158						
ANR	48197	Symbol	TSRMLS_DC		48158						
ANR	48198	DeclStmt									
ANR	48199	Decl							int	int	jmp_op_number
ANR	48200	DeclStmt									
ANR	48201	Decl							zend_op	zend_op *	opline
ANR	48202	DeclStmt									
ANR	48203	Decl							zend_llist	zend_llist	jmp_list
ANR	48204	DeclStmt									
ANR	48205	Decl							zend_llist	zend_llist *	jmp_list_ptr
ANR	48206	DeclStmt									
ANR	48207	Decl							zend_op	zend_op *	opline
ANR	48208	DeclStmt									
ANR	48209	Decl							long	long	catch_op_number
ANR	48210	DeclStmt									
ANR	48211	Decl							zend_op	zend_op *	opline
ANR	48212	DeclStmt									
ANR	48213	Decl							znode	znode	catch_class
ANR	48214	DeclStmt									
ANR	48215	Decl							int	int	jmp_op_number
ANR	48216	DeclStmt									
ANR	48217	Decl							zend_op	zend_op *	opline
ANR	48218	DeclStmt									
ANR	48219	Decl							zend_llist	zend_llist *	jmp_list_ptr
ANR	48220	DeclStmt									
ANR	48221	Decl							zend_op	zend_op *	opline
ANR	48222	DeclStmt									
ANR	48223	Decl							zend_op	zend_op *	opline
ANR	48224	Function	function_add_ref	3098:0:110379:111023							
ANR	48225	FunctionDef	function_add_ref (zend_function * function)		48224	0					
ANR	48226	CompoundStatement		3099:0:110445:111023	48224	0					
ANR	48227	IfStatement	if ( function -> type == ZEND_USER_FUNCTION )		48224	0					
ANR	48228	Condition	function -> type == ZEND_USER_FUNCTION	3100:5:110452:110487	48224	0	True				
ANR	48229	EqualityExpression	function -> type == ZEND_USER_FUNCTION		48224	0		==			
ANR	48230	PtrMemberAccess	function -> type		48224	0					
ANR	48231	Identifier	function		48224	0					
ANR	48232	Identifier	type		48224	1					
ANR	48233	Identifier	ZEND_USER_FUNCTION		48224	1					
ANR	48234	CompoundStatement		3:2:48:93	48224	1					
ANR	48235	IdentifierDeclStatement	zend_op_array * op_array = & function -> op_array ;	3101:2:110494:110539	48224	0	True				
ANR	48236	IdentifierDecl	* op_array = & function -> op_array		48224	0					
ANR	48237	IdentifierDeclType	zend_op_array *		48224	0					
ANR	48238	Identifier	op_array		48224	1					
ANR	48239	AssignmentExpression	* op_array = & function -> op_array		48224	2		=			
ANR	48240	Identifier	op_array		48224	0					
ANR	48241	UnaryOperationExpression	& function -> op_array		48224	1					
ANR	48242	UnaryOperator	&		48224	0					
ANR	48243	PtrMemberAccess	function -> op_array		48224	1					
ANR	48244	Identifier	function		48224	0					
ANR	48245	Identifier	op_array		48224	1					
ANR	48246	ExpressionStatement	( * op_array -> refcount ) ++	3103:2:110544:110567	48224	1	True				
ANR	48247	PostIncDecOperationExpression	( * op_array -> refcount ) ++		48224	0					
ANR	48248	UnaryOperationExpression	* op_array -> refcount		48224	0					
ANR	48249	UnaryOperator	*		48224	0					
ANR	48250	PtrMemberAccess	op_array -> refcount		48224	1					
ANR	48251	Identifier	op_array		48224	0					
ANR	48252	Identifier	refcount		48224	1					
ANR	48253	IncDec	++		48224	1					
ANR	48254	IfStatement	if ( op_array -> static_variables )		48224	2					
ANR	48255	Condition	op_array -> static_variables	3104:6:110575:110600	48224	0	True				
ANR	48256	PtrMemberAccess	op_array -> static_variables		48224	0					
ANR	48257	Identifier	op_array		48224	0					
ANR	48258	Identifier	static_variables		48224	1					
ANR	48259	CompoundStatement		8:3:223:237	48224	1					
ANR	48260	IdentifierDeclStatement	HashTable * static_variables = op_array -> static_variables ;	3105:3:110608:110664	48224	0	True				
ANR	48261	IdentifierDecl	* static_variables = op_array -> static_variables		48224	0					
ANR	48262	IdentifierDeclType	HashTable *		48224	0					
ANR	48263	Identifier	static_variables		48224	1					
ANR	48264	AssignmentExpression	* static_variables = op_array -> static_variables		48224	2		=			
ANR	48265	Identifier	static_variables		48224	0					
ANR	48266	PtrMemberAccess	op_array -> static_variables		48224	1					
ANR	48267	Identifier	op_array		48224	0					
ANR	48268	Identifier	static_variables		48224	1					
ANR	48269	IdentifierDeclStatement	zval * tmp_zval ;	3106:3:110669:110683	48224	1	True				
ANR	48270	IdentifierDecl	* tmp_zval		48224	0					
ANR	48271	IdentifierDeclType	zval *		48224	0					
ANR	48272	Identifier	tmp_zval		48224	1					
ANR	48273	ExpressionStatement	ALLOC_HASHTABLE ( op_array -> static_variables )	3108:3:110689:110732	48224	2	True				
ANR	48274	CallExpression	ALLOC_HASHTABLE ( op_array -> static_variables )		48224	0					
ANR	48275	Callee	ALLOC_HASHTABLE		48224	0					
ANR	48276	Identifier	ALLOC_HASHTABLE		48224	0					
ANR	48277	ArgumentList	op_array -> static_variables		48224	1					
ANR	48278	Argument	op_array -> static_variables		48224	0					
ANR	48279	PtrMemberAccess	op_array -> static_variables		48224	0					
ANR	48280	Identifier	op_array		48224	0					
ANR	48281	Identifier	static_variables		48224	1					
ANR	48282	ExpressionStatement	"zend_hash_init ( op_array -> static_variables , zend_hash_num_elements ( static_variables ) , NULL , ZVAL_PTR_DTOR , 0 )"	3109:3:110737:110845	48224	3	True				
ANR	48283	CallExpression	"zend_hash_init ( op_array -> static_variables , zend_hash_num_elements ( static_variables ) , NULL , ZVAL_PTR_DTOR , 0 )"		48224	0					
ANR	48284	Callee	zend_hash_init		48224	0					
ANR	48285	Identifier	zend_hash_init		48224	0					
ANR	48286	ArgumentList	op_array -> static_variables		48224	1					
ANR	48287	Argument	op_array -> static_variables		48224	0					
ANR	48288	PtrMemberAccess	op_array -> static_variables		48224	0					
ANR	48289	Identifier	op_array		48224	0					
ANR	48290	Identifier	static_variables		48224	1					
ANR	48291	Argument	zend_hash_num_elements ( static_variables )		48224	1					
ANR	48292	CallExpression	zend_hash_num_elements ( static_variables )		48224	0					
ANR	48293	Callee	zend_hash_num_elements		48224	0					
ANR	48294	Identifier	zend_hash_num_elements		48224	0					
ANR	48295	ArgumentList	static_variables		48224	1					
ANR	48296	Argument	static_variables		48224	0					
ANR	48297	Identifier	static_variables		48224	0					
ANR	48298	Argument	NULL		48224	2					
ANR	48299	Identifier	NULL		48224	0					
ANR	48300	Argument	ZVAL_PTR_DTOR		48224	3					
ANR	48301	Identifier	ZVAL_PTR_DTOR		48224	0					
ANR	48302	Argument	0		48224	4					
ANR	48303	PrimaryExpression	0		48224	0					
ANR	48304	ExpressionStatement	"zend_hash_copy ( op_array -> static_variables , static_variables , ( copy_ctor_func_t ) zval_add_ref , ( void * ) & tmp_zval , sizeof ( zval * ) )"	3110:3:110850:110979	48224	4	True				
ANR	48305	CallExpression	"zend_hash_copy ( op_array -> static_variables , static_variables , ( copy_ctor_func_t ) zval_add_ref , ( void * ) & tmp_zval , sizeof ( zval * ) )"		48224	0					
ANR	48306	Callee	zend_hash_copy		48224	0					
ANR	48307	Identifier	zend_hash_copy		48224	0					
ANR	48308	ArgumentList	op_array -> static_variables		48224	1					
ANR	48309	Argument	op_array -> static_variables		48224	0					
ANR	48310	PtrMemberAccess	op_array -> static_variables		48224	0					
ANR	48311	Identifier	op_array		48224	0					
ANR	48312	Identifier	static_variables		48224	1					
ANR	48313	Argument	static_variables		48224	1					
ANR	48314	Identifier	static_variables		48224	0					
ANR	48315	Argument	( copy_ctor_func_t ) zval_add_ref		48224	2					
ANR	48316	CastExpression	( copy_ctor_func_t ) zval_add_ref		48224	0					
ANR	48317	CastTarget	copy_ctor_func_t		48224	0					
ANR	48318	Identifier	zval_add_ref		48224	1					
ANR	48319	Argument	( void * ) & tmp_zval		48224	3					
ANR	48320	CastExpression	( void * ) & tmp_zval		48224	0					
ANR	48321	CastTarget	void *		48224	0					
ANR	48322	UnaryOperationExpression	& tmp_zval		48224	1					
ANR	48323	UnaryOperator	&		48224	0					
ANR	48324	Identifier	tmp_zval		48224	1					
ANR	48325	Argument	sizeof ( zval * )		48224	4					
ANR	48326	SizeofExpression	sizeof ( zval * )		48224	0					
ANR	48327	Sizeof	sizeof		48224	0					
ANR	48328	SizeofOperand	zval *		48224	1					
ANR	48329	ExpressionStatement	op_array -> run_time_cache = NULL	3112:2:110987:111018	48224	3	True				
ANR	48330	AssignmentExpression	op_array -> run_time_cache = NULL		48224	0		=			
ANR	48331	PtrMemberAccess	op_array -> run_time_cache		48224	0					
ANR	48332	Identifier	op_array		48224	0					
ANR	48333	Identifier	run_time_cache		48224	1					
ANR	48334	Identifier	NULL		48224	1					
ANR	48335	ReturnType	ZEND_API void		48224	1					
ANR	48336	Identifier	function_add_ref		48224	2					
ANR	48337	ParameterList	zend_function * function		48224	3					
ANR	48338	Parameter	zend_function * function	3098:31:110410:110432	48224	0	True				
ANR	48339	ParameterType	zend_function *		48224	0					
ANR	48340	Identifier	function		48224	1					
ANR	48341	CFGEntryNode	ENTRY		48224		True				
ANR	48342	CFGExitNode	EXIT		48224		True				
ANR	48343	Symbol	NULL		48224						
ANR	48344	Symbol	zend_hash_num_elements		48224						
ANR	48345	Symbol	* function		48224						
ANR	48346	Symbol	* op_array -> refcount		48224						
ANR	48347	Symbol	tmp_zval		48224						
ANR	48348	Symbol	* op_array		48224						
ANR	48349	Symbol	op_array -> refcount		48224						
ANR	48350	Symbol	function -> type		48224						
ANR	48351	Symbol	ZVAL_PTR_DTOR		48224						
ANR	48352	Symbol	op_array -> run_time_cache		48224						
ANR	48353	Symbol	ZEND_USER_FUNCTION		48224						
ANR	48354	Symbol	function		48224						
ANR	48355	Symbol	& function -> op_array		48224						
ANR	48356	Symbol	static_variables		48224						
ANR	48357	Symbol	zval_add_ref		48224						
ANR	48358	Symbol	op_array -> static_variables		48224						
ANR	48359	Symbol	* * op_array		48224						
ANR	48360	Symbol	op_array		48224						
ANR	48361	Symbol	& tmp_zval		48224						
ANR	48362	Function	do_inherit_parent_constructor	3117:0:111036:114005							
ANR	48363	FunctionDef	do_inherit_parent_constructor (zend_class_entry * ce)		48362	0					
ANR	48364	CompoundStatement		3118:0:111110:114005	48362	0					
ANR	48365	IdentifierDeclStatement	"zend_function * function , * new_function ;"	3119:1:111113:111151	48362	0	True				
ANR	48366	IdentifierDecl	* function		48362	0					
ANR	48367	IdentifierDeclType	zend_function *		48362	0					
ANR	48368	Identifier	function		48362	1					
ANR	48369	IdentifierDecl	* new_function		48362	1					
ANR	48370	IdentifierDeclType	zend_function *		48362	0					
ANR	48371	Identifier	new_function		48362	1					
ANR	48372	IfStatement	if ( ! ce -> parent )		48362	1					
ANR	48373	Condition	! ce -> parent	3121:5:111159:111169	48362	0	True				
ANR	48374	UnaryOperationExpression	! ce -> parent		48362	0					
ANR	48375	UnaryOperator	!		48362	0					
ANR	48376	PtrMemberAccess	ce -> parent		48362	1					
ANR	48377	Identifier	ce		48362	0					
ANR	48378	Identifier	parent		48362	1					
ANR	48379	CompoundStatement		4:18:61:61	48362	1					
ANR	48380	ReturnStatement	return ;	3122:2:111176:111182	48362	0	True				
ANR	48381	ExpressionStatement	ce -> create_object = ce -> parent -> create_object	3126:1:111228:111273	48362	2	True				
ANR	48382	AssignmentExpression	ce -> create_object = ce -> parent -> create_object		48362	0		=			
ANR	48383	PtrMemberAccess	ce -> create_object		48362	0					
ANR	48384	Identifier	ce		48362	0					
ANR	48385	Identifier	create_object		48362	1					
ANR	48386	PtrMemberAccess	ce -> parent -> create_object		48362	1					
ANR	48387	PtrMemberAccess	ce -> parent		48362	0					
ANR	48388	Identifier	ce		48362	0					
ANR	48389	Identifier	parent		48362	1					
ANR	48390	Identifier	create_object		48362	1					
ANR	48391	IfStatement	if ( ! ce -> get_iterator )		48362	3					
ANR	48392	Condition	! ce -> get_iterator	3129:5:111324:111340	48362	0	True				
ANR	48393	UnaryOperationExpression	! ce -> get_iterator		48362	0					
ANR	48394	UnaryOperator	!		48362	0					
ANR	48395	PtrMemberAccess	ce -> get_iterator		48362	1					
ANR	48396	Identifier	ce		48362	0					
ANR	48397	Identifier	get_iterator		48362	1					
ANR	48398	CompoundStatement		12:24:232:232	48362	1					
ANR	48399	ExpressionStatement	ce -> get_iterator = ce -> parent -> get_iterator	3130:2:111347:111390	48362	0	True				
ANR	48400	AssignmentExpression	ce -> get_iterator = ce -> parent -> get_iterator		48362	0		=			
ANR	48401	PtrMemberAccess	ce -> get_iterator		48362	0					
ANR	48402	Identifier	ce		48362	0					
ANR	48403	Identifier	get_iterator		48362	1					
ANR	48404	PtrMemberAccess	ce -> parent -> get_iterator		48362	1					
ANR	48405	PtrMemberAccess	ce -> parent		48362	0					
ANR	48406	Identifier	ce		48362	0					
ANR	48407	Identifier	parent		48362	1					
ANR	48408	Identifier	get_iterator		48362	1					
ANR	48409	IfStatement	if ( ! ce -> iterator_funcs . funcs )		48362	4					
ANR	48410	Condition	! ce -> iterator_funcs . funcs	3132:5:111400:111424	48362	0	True				
ANR	48411	UnaryOperationExpression	! ce -> iterator_funcs . funcs		48362	0					
ANR	48412	UnaryOperator	!		48362	0					
ANR	48413	MemberAccess	ce -> iterator_funcs . funcs		48362	1					
ANR	48414	PtrMemberAccess	ce -> iterator_funcs		48362	0					
ANR	48415	Identifier	ce		48362	0					
ANR	48416	Identifier	iterator_funcs		48362	1					
ANR	48417	Identifier	funcs		48362	1					
ANR	48418	CompoundStatement		15:32:316:316	48362	1					
ANR	48419	ExpressionStatement	ce -> iterator_funcs . funcs = ce -> parent -> iterator_funcs . funcs	3133:2:111431:111490	48362	0	True				
ANR	48420	AssignmentExpression	ce -> iterator_funcs . funcs = ce -> parent -> iterator_funcs . funcs		48362	0		=			
ANR	48421	MemberAccess	ce -> iterator_funcs . funcs		48362	0					
ANR	48422	PtrMemberAccess	ce -> iterator_funcs		48362	0					
ANR	48423	Identifier	ce		48362	0					
ANR	48424	Identifier	iterator_funcs		48362	1					
ANR	48425	Identifier	funcs		48362	1					
ANR	48426	MemberAccess	ce -> parent -> iterator_funcs . funcs		48362	1					
ANR	48427	PtrMemberAccess	ce -> parent -> iterator_funcs		48362	0					
ANR	48428	PtrMemberAccess	ce -> parent		48362	0					
ANR	48429	Identifier	ce		48362	0					
ANR	48430	Identifier	parent		48362	1					
ANR	48431	Identifier	iterator_funcs		48362	1					
ANR	48432	Identifier	funcs		48362	1					
ANR	48433	IfStatement	if ( ! ce -> __get )		48362	5					
ANR	48434	Condition	! ce -> __get	3135:5:111500:111509	48362	0	True				
ANR	48435	UnaryOperationExpression	! ce -> __get		48362	0					
ANR	48436	UnaryOperator	!		48362	0					
ANR	48437	PtrMemberAccess	ce -> __get		48362	1					
ANR	48438	Identifier	ce		48362	0					
ANR	48439	Identifier	__get		48362	1					
ANR	48440	CompoundStatement		18:17:401:401	48362	1					
ANR	48441	ExpressionStatement	ce -> __get = ce -> parent -> __get	3136:2:111516:111547	48362	0	True				
ANR	48442	AssignmentExpression	ce -> __get = ce -> parent -> __get		48362	0		=			
ANR	48443	PtrMemberAccess	ce -> __get		48362	0					
ANR	48444	Identifier	ce		48362	0					
ANR	48445	Identifier	__get		48362	1					
ANR	48446	PtrMemberAccess	ce -> parent -> __get		48362	1					
ANR	48447	PtrMemberAccess	ce -> parent		48362	0					
ANR	48448	Identifier	ce		48362	0					
ANR	48449	Identifier	parent		48362	1					
ANR	48450	Identifier	__get		48362	1					
ANR	48451	IfStatement	if ( ! ce -> __set )		48362	6					
ANR	48452	Condition	! ce -> __set	3138:5:111557:111566	48362	0	True				
ANR	48453	UnaryOperationExpression	! ce -> __set		48362	0					
ANR	48454	UnaryOperator	!		48362	0					
ANR	48455	PtrMemberAccess	ce -> __set		48362	1					
ANR	48456	Identifier	ce		48362	0					
ANR	48457	Identifier	__set		48362	1					
ANR	48458	CompoundStatement		21:17:458:458	48362	1					
ANR	48459	ExpressionStatement	ce -> __set = ce -> parent -> __set	3139:2:111573:111602	48362	0	True				
ANR	48460	AssignmentExpression	ce -> __set = ce -> parent -> __set		48362	0		=			
ANR	48461	PtrMemberAccess	ce -> __set		48362	0					
ANR	48462	Identifier	ce		48362	0					
ANR	48463	Identifier	__set		48362	1					
ANR	48464	PtrMemberAccess	ce -> parent -> __set		48362	1					
ANR	48465	PtrMemberAccess	ce -> parent		48362	0					
ANR	48466	Identifier	ce		48362	0					
ANR	48467	Identifier	parent		48362	1					
ANR	48468	Identifier	__set		48362	1					
ANR	48469	IfStatement	if ( ! ce -> __unset )		48362	7					
ANR	48470	Condition	! ce -> __unset	3141:5:111612:111623	48362	0	True				
ANR	48471	UnaryOperationExpression	! ce -> __unset		48362	0					
ANR	48472	UnaryOperator	!		48362	0					
ANR	48473	PtrMemberAccess	ce -> __unset		48362	1					
ANR	48474	Identifier	ce		48362	0					
ANR	48475	Identifier	__unset		48362	1					
ANR	48476	CompoundStatement		24:19:515:515	48362	1					
ANR	48477	ExpressionStatement	ce -> __unset = ce -> parent -> __unset	3142:2:111630:111663	48362	0	True				
ANR	48478	AssignmentExpression	ce -> __unset = ce -> parent -> __unset		48362	0		=			
ANR	48479	PtrMemberAccess	ce -> __unset		48362	0					
ANR	48480	Identifier	ce		48362	0					
ANR	48481	Identifier	__unset		48362	1					
ANR	48482	PtrMemberAccess	ce -> parent -> __unset		48362	1					
ANR	48483	PtrMemberAccess	ce -> parent		48362	0					
ANR	48484	Identifier	ce		48362	0					
ANR	48485	Identifier	parent		48362	1					
ANR	48486	Identifier	__unset		48362	1					
ANR	48487	IfStatement	if ( ! ce -> __isset )		48362	8					
ANR	48488	Condition	! ce -> __isset	3144:5:111673:111684	48362	0	True				
ANR	48489	UnaryOperationExpression	! ce -> __isset		48362	0					
ANR	48490	UnaryOperator	!		48362	0					
ANR	48491	PtrMemberAccess	ce -> __isset		48362	1					
ANR	48492	Identifier	ce		48362	0					
ANR	48493	Identifier	__isset		48362	1					
ANR	48494	CompoundStatement		27:19:576:576	48362	1					
ANR	48495	ExpressionStatement	ce -> __isset = ce -> parent -> __isset	3145:2:111691:111724	48362	0	True				
ANR	48496	AssignmentExpression	ce -> __isset = ce -> parent -> __isset		48362	0		=			
ANR	48497	PtrMemberAccess	ce -> __isset		48362	0					
ANR	48498	Identifier	ce		48362	0					
ANR	48499	Identifier	__isset		48362	1					
ANR	48500	PtrMemberAccess	ce -> parent -> __isset		48362	1					
ANR	48501	PtrMemberAccess	ce -> parent		48362	0					
ANR	48502	Identifier	ce		48362	0					
ANR	48503	Identifier	parent		48362	1					
ANR	48504	Identifier	__isset		48362	1					
ANR	48505	IfStatement	if ( ! ce -> __call )		48362	9					
ANR	48506	Condition	! ce -> __call	3147:5:111734:111744	48362	0	True				
ANR	48507	UnaryOperationExpression	! ce -> __call		48362	0					
ANR	48508	UnaryOperator	!		48362	0					
ANR	48509	PtrMemberAccess	ce -> __call		48362	1					
ANR	48510	Identifier	ce		48362	0					
ANR	48511	Identifier	__call		48362	1					
ANR	48512	CompoundStatement		30:18:636:636	48362	1					
ANR	48513	ExpressionStatement	ce -> __call = ce -> parent -> __call	3148:2:111751:111782	48362	0	True				
ANR	48514	AssignmentExpression	ce -> __call = ce -> parent -> __call		48362	0		=			
ANR	48515	PtrMemberAccess	ce -> __call		48362	0					
ANR	48516	Identifier	ce		48362	0					
ANR	48517	Identifier	__call		48362	1					
ANR	48518	PtrMemberAccess	ce -> parent -> __call		48362	1					
ANR	48519	PtrMemberAccess	ce -> parent		48362	0					
ANR	48520	Identifier	ce		48362	0					
ANR	48521	Identifier	parent		48362	1					
ANR	48522	Identifier	__call		48362	1					
ANR	48523	IfStatement	if ( ! ce -> __callstatic )		48362	10					
ANR	48524	Condition	! ce -> __callstatic	3150:5:111792:111808	48362	0	True				
ANR	48525	UnaryOperationExpression	! ce -> __callstatic		48362	0					
ANR	48526	UnaryOperator	!		48362	0					
ANR	48527	PtrMemberAccess	ce -> __callstatic		48362	1					
ANR	48528	Identifier	ce		48362	0					
ANR	48529	Identifier	__callstatic		48362	1					
ANR	48530	CompoundStatement		33:24:700:700	48362	1					
ANR	48531	ExpressionStatement	ce -> __callstatic = ce -> parent -> __callstatic	3151:2:111815:111858	48362	0	True				
ANR	48532	AssignmentExpression	ce -> __callstatic = ce -> parent -> __callstatic		48362	0		=			
ANR	48533	PtrMemberAccess	ce -> __callstatic		48362	0					
ANR	48534	Identifier	ce		48362	0					
ANR	48535	Identifier	__callstatic		48362	1					
ANR	48536	PtrMemberAccess	ce -> parent -> __callstatic		48362	1					
ANR	48537	PtrMemberAccess	ce -> parent		48362	0					
ANR	48538	Identifier	ce		48362	0					
ANR	48539	Identifier	parent		48362	1					
ANR	48540	Identifier	__callstatic		48362	1					
ANR	48541	IfStatement	if ( ! ce -> __tostring )		48362	11					
ANR	48542	Condition	! ce -> __tostring	3153:5:111868:111882	48362	0	True				
ANR	48543	UnaryOperationExpression	! ce -> __tostring		48362	0					
ANR	48544	UnaryOperator	!		48362	0					
ANR	48545	PtrMemberAccess	ce -> __tostring		48362	1					
ANR	48546	Identifier	ce		48362	0					
ANR	48547	Identifier	__tostring		48362	1					
ANR	48548	CompoundStatement		36:22:774:774	48362	1					
ANR	48549	ExpressionStatement	ce -> __tostring = ce -> parent -> __tostring	3154:2:111889:111928	48362	0	True				
ANR	48550	AssignmentExpression	ce -> __tostring = ce -> parent -> __tostring		48362	0		=			
ANR	48551	PtrMemberAccess	ce -> __tostring		48362	0					
ANR	48552	Identifier	ce		48362	0					
ANR	48553	Identifier	__tostring		48362	1					
ANR	48554	PtrMemberAccess	ce -> parent -> __tostring		48362	1					
ANR	48555	PtrMemberAccess	ce -> parent		48362	0					
ANR	48556	Identifier	ce		48362	0					
ANR	48557	Identifier	parent		48362	1					
ANR	48558	Identifier	__tostring		48362	1					
ANR	48559	IfStatement	if ( ! ce -> clone )		48362	12					
ANR	48560	Condition	! ce -> clone	3156:5:111938:111947	48362	0	True				
ANR	48561	UnaryOperationExpression	! ce -> clone		48362	0					
ANR	48562	UnaryOperator	!		48362	0					
ANR	48563	PtrMemberAccess	ce -> clone		48362	1					
ANR	48564	Identifier	ce		48362	0					
ANR	48565	Identifier	clone		48362	1					
ANR	48566	CompoundStatement		39:17:839:839	48362	1					
ANR	48567	ExpressionStatement	ce -> clone = ce -> parent -> clone	3157:2:111954:111983	48362	0	True				
ANR	48568	AssignmentExpression	ce -> clone = ce -> parent -> clone		48362	0		=			
ANR	48569	PtrMemberAccess	ce -> clone		48362	0					
ANR	48570	Identifier	ce		48362	0					
ANR	48571	Identifier	clone		48362	1					
ANR	48572	PtrMemberAccess	ce -> parent -> clone		48362	1					
ANR	48573	PtrMemberAccess	ce -> parent		48362	0					
ANR	48574	Identifier	ce		48362	0					
ANR	48575	Identifier	parent		48362	1					
ANR	48576	Identifier	clone		48362	1					
ANR	48577	IfStatement	if ( ! ce -> serialize )		48362	13					
ANR	48578	Condition	! ce -> serialize	3159:4:111992:112005	48362	0	True				
ANR	48579	UnaryOperationExpression	! ce -> serialize		48362	0					
ANR	48580	UnaryOperator	!		48362	0					
ANR	48581	PtrMemberAccess	ce -> serialize		48362	1					
ANR	48582	Identifier	ce		48362	0					
ANR	48583	Identifier	serialize		48362	1					
ANR	48584	CompoundStatement		42:20:897:897	48362	1					
ANR	48585	ExpressionStatement	ce -> serialize = ce -> parent -> serialize	3160:2:112012:112049	48362	0	True				
ANR	48586	AssignmentExpression	ce -> serialize = ce -> parent -> serialize		48362	0		=			
ANR	48587	PtrMemberAccess	ce -> serialize		48362	0					
ANR	48588	Identifier	ce		48362	0					
ANR	48589	Identifier	serialize		48362	1					
ANR	48590	PtrMemberAccess	ce -> parent -> serialize		48362	1					
ANR	48591	PtrMemberAccess	ce -> parent		48362	0					
ANR	48592	Identifier	ce		48362	0					
ANR	48593	Identifier	parent		48362	1					
ANR	48594	Identifier	serialize		48362	1					
ANR	48595	IfStatement	if ( ! ce -> unserialize )		48362	14					
ANR	48596	Condition	! ce -> unserialize	3162:4:112058:112073	48362	0	True				
ANR	48597	UnaryOperationExpression	! ce -> unserialize		48362	0					
ANR	48598	UnaryOperator	!		48362	0					
ANR	48599	PtrMemberAccess	ce -> unserialize		48362	1					
ANR	48600	Identifier	ce		48362	0					
ANR	48601	Identifier	unserialize		48362	1					
ANR	48602	CompoundStatement		45:22:965:965	48362	1					
ANR	48603	ExpressionStatement	ce -> unserialize = ce -> parent -> unserialize	3163:2:112080:112121	48362	0	True				
ANR	48604	AssignmentExpression	ce -> unserialize = ce -> parent -> unserialize		48362	0		=			
ANR	48605	PtrMemberAccess	ce -> unserialize		48362	0					
ANR	48606	Identifier	ce		48362	0					
ANR	48607	Identifier	unserialize		48362	1					
ANR	48608	PtrMemberAccess	ce -> parent -> unserialize		48362	1					
ANR	48609	PtrMemberAccess	ce -> parent		48362	0					
ANR	48610	Identifier	ce		48362	0					
ANR	48611	Identifier	parent		48362	1					
ANR	48612	Identifier	unserialize		48362	1					
ANR	48613	IfStatement	if ( ! ce -> destructor )		48362	15					
ANR	48614	Condition	! ce -> destructor	3165:5:112131:112145	48362	0	True				
ANR	48615	UnaryOperationExpression	! ce -> destructor		48362	0					
ANR	48616	UnaryOperator	!		48362	0					
ANR	48617	PtrMemberAccess	ce -> destructor		48362	1					
ANR	48618	Identifier	ce		48362	0					
ANR	48619	Identifier	destructor		48362	1					
ANR	48620	CompoundStatement		48:22:1037:1037	48362	1					
ANR	48621	ExpressionStatement	ce -> destructor = ce -> parent -> destructor	3166:2:112152:112193	48362	0	True				
ANR	48622	AssignmentExpression	ce -> destructor = ce -> parent -> destructor		48362	0		=			
ANR	48623	PtrMemberAccess	ce -> destructor		48362	0					
ANR	48624	Identifier	ce		48362	0					
ANR	48625	Identifier	destructor		48362	1					
ANR	48626	PtrMemberAccess	ce -> parent -> destructor		48362	1					
ANR	48627	PtrMemberAccess	ce -> parent		48362	0					
ANR	48628	Identifier	ce		48362	0					
ANR	48629	Identifier	parent		48362	1					
ANR	48630	Identifier	destructor		48362	1					
ANR	48631	IfStatement	if ( ! ce -> __debugInfo )		48362	16					
ANR	48632	Condition	! ce -> __debugInfo	3168:5:112203:112218	48362	0	True				
ANR	48633	UnaryOperationExpression	! ce -> __debugInfo		48362	0					
ANR	48634	UnaryOperator	!		48362	0					
ANR	48635	PtrMemberAccess	ce -> __debugInfo		48362	1					
ANR	48636	Identifier	ce		48362	0					
ANR	48637	Identifier	__debugInfo		48362	1					
ANR	48638	CompoundStatement		51:23:1110:1110	48362	1					
ANR	48639	ExpressionStatement	ce -> __debugInfo = ce -> parent -> __debugInfo	3169:2:112225:112266	48362	0	True				
ANR	48640	AssignmentExpression	ce -> __debugInfo = ce -> parent -> __debugInfo		48362	0		=			
ANR	48641	PtrMemberAccess	ce -> __debugInfo		48362	0					
ANR	48642	Identifier	ce		48362	0					
ANR	48643	Identifier	__debugInfo		48362	1					
ANR	48644	PtrMemberAccess	ce -> parent -> __debugInfo		48362	1					
ANR	48645	PtrMemberAccess	ce -> parent		48362	0					
ANR	48646	Identifier	ce		48362	0					
ANR	48647	Identifier	parent		48362	1					
ANR	48648	Identifier	__debugInfo		48362	1					
ANR	48649	IfStatement	if ( ce -> constructor )		48362	17					
ANR	48650	Condition	ce -> constructor	3171:5:112276:112290	48362	0	True				
ANR	48651	PtrMemberAccess	ce -> constructor		48362	0					
ANR	48652	Identifier	ce		48362	0					
ANR	48653	Identifier	constructor		48362	1					
ANR	48654	CompoundStatement		54:22:1182:1182	48362	1					
ANR	48655	IfStatement	if ( ce -> parent -> constructor && ce -> parent -> constructor -> common . fn_flags & ZEND_ACC_FINAL )		48362	0					
ANR	48656	Condition	ce -> parent -> constructor && ce -> parent -> constructor -> common . fn_flags & ZEND_ACC_FINAL	3172:6:112301:112384	48362	0	True				
ANR	48657	AndExpression	ce -> parent -> constructor && ce -> parent -> constructor -> common . fn_flags & ZEND_ACC_FINAL		48362	0		&&			
ANR	48658	PtrMemberAccess	ce -> parent -> constructor		48362	0					
ANR	48659	PtrMemberAccess	ce -> parent		48362	0					
ANR	48660	Identifier	ce		48362	0					
ANR	48661	Identifier	parent		48362	1					
ANR	48662	Identifier	constructor		48362	1					
ANR	48663	BitAndExpression	ce -> parent -> constructor -> common . fn_flags & ZEND_ACC_FINAL		48362	1		&			
ANR	48664	MemberAccess	ce -> parent -> constructor -> common . fn_flags		48362	0					
ANR	48665	PtrMemberAccess	ce -> parent -> constructor -> common		48362	0					
ANR	48666	PtrMemberAccess	ce -> parent -> constructor		48362	0					
ANR	48667	PtrMemberAccess	ce -> parent		48362	0					
ANR	48668	Identifier	ce		48362	0					
ANR	48669	Identifier	parent		48362	1					
ANR	48670	Identifier	constructor		48362	1					
ANR	48671	Identifier	common		48362	1					
ANR	48672	Identifier	fn_flags		48362	1					
ANR	48673	Identifier	ZEND_ACC_FINAL		48362	1					
ANR	48674	CompoundStatement		55:92:1276:1276	48362	1					
ANR	48675	ExpressionStatement	"zend_error ( E_ERROR , ""Cannot override final %s::%s() with %s::%s()"" , ce -> parent -> name , ce -> parent -> constructor -> common . function_name , ce -> name , ce -> constructor -> common . function_name )"	3173:3:112392:112586	48362	0	True				
ANR	48676	CallExpression	"zend_error ( E_ERROR , ""Cannot override final %s::%s() with %s::%s()"" , ce -> parent -> name , ce -> parent -> constructor -> common . function_name , ce -> name , ce -> constructor -> common . function_name )"		48362	0					
ANR	48677	Callee	zend_error		48362	0					
ANR	48678	Identifier	zend_error		48362	0					
ANR	48679	ArgumentList	E_ERROR		48362	1					
ANR	48680	Argument	E_ERROR		48362	0					
ANR	48681	Identifier	E_ERROR		48362	0					
ANR	48682	Argument	"""Cannot override final %s::%s() with %s::%s()"""		48362	1					
ANR	48683	PrimaryExpression	"""Cannot override final %s::%s() with %s::%s()"""		48362	0					
ANR	48684	Argument	ce -> parent -> name		48362	2					
ANR	48685	PtrMemberAccess	ce -> parent -> name		48362	0					
ANR	48686	PtrMemberAccess	ce -> parent		48362	0					
ANR	48687	Identifier	ce		48362	0					
ANR	48688	Identifier	parent		48362	1					
ANR	48689	Identifier	name		48362	1					
ANR	48690	Argument	ce -> parent -> constructor -> common . function_name		48362	3					
ANR	48691	MemberAccess	ce -> parent -> constructor -> common . function_name		48362	0					
ANR	48692	PtrMemberAccess	ce -> parent -> constructor -> common		48362	0					
ANR	48693	PtrMemberAccess	ce -> parent -> constructor		48362	0					
ANR	48694	PtrMemberAccess	ce -> parent		48362	0					
ANR	48695	Identifier	ce		48362	0					
ANR	48696	Identifier	parent		48362	1					
ANR	48697	Identifier	constructor		48362	1					
ANR	48698	Identifier	common		48362	1					
ANR	48699	Identifier	function_name		48362	1					
ANR	48700	Argument	ce -> name		48362	4					
ANR	48701	PtrMemberAccess	ce -> name		48362	0					
ANR	48702	Identifier	ce		48362	0					
ANR	48703	Identifier	name		48362	1					
ANR	48704	Argument	ce -> constructor -> common . function_name		48362	5					
ANR	48705	MemberAccess	ce -> constructor -> common . function_name		48362	0					
ANR	48706	PtrMemberAccess	ce -> constructor -> common		48362	0					
ANR	48707	PtrMemberAccess	ce -> constructor		48362	0					
ANR	48708	Identifier	ce		48362	0					
ANR	48709	Identifier	constructor		48362	1					
ANR	48710	Identifier	common		48362	1					
ANR	48711	Identifier	function_name		48362	1					
ANR	48712	ReturnStatement	return ;	3178:2:112594:112600	48362	1	True				
ANR	48713	IfStatement	"if ( zend_hash_find ( & ce -> parent -> function_table , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) , ( void * * ) & function ) == SUCCESS )"		48362	18					
ANR	48714	Condition	"zend_hash_find ( & ce -> parent -> function_table , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) , ( void * * ) & function ) == SUCCESS"	3181:5:112611:112746	48362	0	True				
ANR	48715	EqualityExpression	"zend_hash_find ( & ce -> parent -> function_table , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) , ( void * * ) & function ) == SUCCESS"		48362	0		==			
ANR	48716	CallExpression	"zend_hash_find ( & ce -> parent -> function_table , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) , ( void * * ) & function )"		48362	0					
ANR	48717	Callee	zend_hash_find		48362	0					
ANR	48718	Identifier	zend_hash_find		48362	0					
ANR	48719	ArgumentList	& ce -> parent -> function_table		48362	1					
ANR	48720	Argument	& ce -> parent -> function_table		48362	0					
ANR	48721	UnaryOperationExpression	& ce -> parent -> function_table		48362	0					
ANR	48722	UnaryOperator	&		48362	0					
ANR	48723	PtrMemberAccess	ce -> parent -> function_table		48362	1					
ANR	48724	PtrMemberAccess	ce -> parent		48362	0					
ANR	48725	Identifier	ce		48362	0					
ANR	48726	Identifier	parent		48362	1					
ANR	48727	Identifier	function_table		48362	1					
ANR	48728	Argument	ZEND_CONSTRUCTOR_FUNC_NAME		48362	1					
ANR	48729	Identifier	ZEND_CONSTRUCTOR_FUNC_NAME		48362	0					
ANR	48730	Argument	sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME )		48362	2					
ANR	48731	SizeofExpression	sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME )		48362	0					
ANR	48732	Sizeof	sizeof		48362	0					
ANR	48733	SizeofOperand	ZEND_CONSTRUCTOR_FUNC_NAME		48362	1					
ANR	48734	Argument	( void * * ) & function		48362	3					
ANR	48735	CastExpression	( void * * ) & function		48362	0					
ANR	48736	CastTarget	void * *		48362	0					
ANR	48737	UnaryOperationExpression	& function		48362	1					
ANR	48738	UnaryOperator	&		48362	0					
ANR	48739	Identifier	function		48362	1					
ANR	48740	Identifier	SUCCESS		48362	1					
ANR	48741	CompoundStatement		64:143:1638:1638	48362	1					
ANR	48742	ExpressionStatement	"zend_hash_update ( & ce -> function_table , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) , function , sizeof ( zend_function ) , ( void * * ) & new_function )"	3183:2:112790:112947	48362	0	True				
ANR	48743	CallExpression	"zend_hash_update ( & ce -> function_table , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) , function , sizeof ( zend_function ) , ( void * * ) & new_function )"		48362	0					
ANR	48744	Callee	zend_hash_update		48362	0					
ANR	48745	Identifier	zend_hash_update		48362	0					
ANR	48746	ArgumentList	& ce -> function_table		48362	1					
ANR	48747	Argument	& ce -> function_table		48362	0					
ANR	48748	UnaryOperationExpression	& ce -> function_table		48362	0					
ANR	48749	UnaryOperator	&		48362	0					
ANR	48750	PtrMemberAccess	ce -> function_table		48362	1					
ANR	48751	Identifier	ce		48362	0					
ANR	48752	Identifier	function_table		48362	1					
ANR	48753	Argument	ZEND_CONSTRUCTOR_FUNC_NAME		48362	1					
ANR	48754	Identifier	ZEND_CONSTRUCTOR_FUNC_NAME		48362	0					
ANR	48755	Argument	sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME )		48362	2					
ANR	48756	SizeofExpression	sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME )		48362	0					
ANR	48757	Sizeof	sizeof		48362	0					
ANR	48758	SizeofOperand	ZEND_CONSTRUCTOR_FUNC_NAME		48362	1					
ANR	48759	Argument	function		48362	3					
ANR	48760	Identifier	function		48362	0					
ANR	48761	Argument	sizeof ( zend_function )		48362	4					
ANR	48762	SizeofExpression	sizeof ( zend_function )		48362	0					
ANR	48763	Sizeof	sizeof		48362	0					
ANR	48764	SizeofOperand	zend_function		48362	1					
ANR	48765	Argument	( void * * ) & new_function		48362	5					
ANR	48766	CastExpression	( void * * ) & new_function		48362	0					
ANR	48767	CastTarget	void * *		48362	0					
ANR	48768	UnaryOperationExpression	& new_function		48362	1					
ANR	48769	UnaryOperator	&		48362	0					
ANR	48770	Identifier	new_function		48362	1					
ANR	48771	ExpressionStatement	function_add_ref ( new_function )	3184:2:112951:112981	48362	1	True				
ANR	48772	CallExpression	function_add_ref ( new_function )		48362	0					
ANR	48773	Callee	function_add_ref		48362	0					
ANR	48774	Identifier	function_add_ref		48362	0					
ANR	48775	ArgumentList	new_function		48362	1					
ANR	48776	Argument	new_function		48362	0					
ANR	48777	Identifier	new_function		48362	0					
ANR	48778	ElseStatement	else		48362	0					
ANR	48779	CompoundStatement		71:2:2000:2026	48362	0					
ANR	48780	IdentifierDeclStatement	char * lc_class_name ;	3187:2:113088:113107	48362	0	True				
ANR	48781	IdentifierDecl	* lc_class_name		48362	0					
ANR	48782	IdentifierDeclType	char *		48362	0					
ANR	48783	Identifier	lc_class_name		48362	1					
ANR	48784	IdentifierDeclStatement	char * lc_parent_class_name ;	3188:2:113111:113137	48362	1	True				
ANR	48785	IdentifierDecl	* lc_parent_class_name		48362	0					
ANR	48786	IdentifierDeclType	char *		48362	0					
ANR	48787	Identifier	lc_parent_class_name		48362	1					
ANR	48788	ExpressionStatement	"lc_class_name = zend_str_tolower_dup ( ce -> name , ce -> name_length )"	3190:2:113142:113205	48362	2	True				
ANR	48789	AssignmentExpression	"lc_class_name = zend_str_tolower_dup ( ce -> name , ce -> name_length )"		48362	0		=			
ANR	48790	Identifier	lc_class_name		48362	0					
ANR	48791	CallExpression	"zend_str_tolower_dup ( ce -> name , ce -> name_length )"		48362	1					
ANR	48792	Callee	zend_str_tolower_dup		48362	0					
ANR	48793	Identifier	zend_str_tolower_dup		48362	0					
ANR	48794	ArgumentList	ce -> name		48362	1					
ANR	48795	Argument	ce -> name		48362	0					
ANR	48796	PtrMemberAccess	ce -> name		48362	0					
ANR	48797	Identifier	ce		48362	0					
ANR	48798	Identifier	name		48362	1					
ANR	48799	Argument	ce -> name_length		48362	1					
ANR	48800	PtrMemberAccess	ce -> name_length		48362	0					
ANR	48801	Identifier	ce		48362	0					
ANR	48802	Identifier	name_length		48362	1					
ANR	48803	IfStatement	"if ( ! zend_hash_exists ( & ce -> function_table , lc_class_name , ce -> name_length + 1 ) )"		48362	3					
ANR	48804	Condition	"! zend_hash_exists ( & ce -> function_table , lc_class_name , ce -> name_length + 1 )"	3191:6:113213:113284	48362	0	True				
ANR	48805	UnaryOperationExpression	"! zend_hash_exists ( & ce -> function_table , lc_class_name , ce -> name_length + 1 )"		48362	0					
ANR	48806	UnaryOperator	!		48362	0					
ANR	48807	CallExpression	"zend_hash_exists ( & ce -> function_table , lc_class_name , ce -> name_length + 1 )"		48362	1					
ANR	48808	Callee	zend_hash_exists		48362	0					
ANR	48809	Identifier	zend_hash_exists		48362	0					
ANR	48810	ArgumentList	& ce -> function_table		48362	1					
ANR	48811	Argument	& ce -> function_table		48362	0					
ANR	48812	UnaryOperationExpression	& ce -> function_table		48362	0					
ANR	48813	UnaryOperator	&		48362	0					
ANR	48814	PtrMemberAccess	ce -> function_table		48362	1					
ANR	48815	Identifier	ce		48362	0					
ANR	48816	Identifier	function_table		48362	1					
ANR	48817	Argument	lc_class_name		48362	1					
ANR	48818	Identifier	lc_class_name		48362	0					
ANR	48819	Argument	ce -> name_length + 1		48362	2					
ANR	48820	AdditiveExpression	ce -> name_length + 1		48362	0		+			
ANR	48821	PtrMemberAccess	ce -> name_length		48362	0					
ANR	48822	Identifier	ce		48362	0					
ANR	48823	Identifier	name_length		48362	1					
ANR	48824	PrimaryExpression	1		48362	1					
ANR	48825	CompoundStatement		74:80:2176:2176	48362	1					
ANR	48826	ExpressionStatement	"lc_parent_class_name = zend_str_tolower_dup ( ce -> parent -> name , ce -> parent -> name_length )"	3192:3:113292:113378	48362	0	True				
ANR	48827	AssignmentExpression	"lc_parent_class_name = zend_str_tolower_dup ( ce -> parent -> name , ce -> parent -> name_length )"		48362	0		=			
ANR	48828	Identifier	lc_parent_class_name		48362	0					
ANR	48829	CallExpression	"zend_str_tolower_dup ( ce -> parent -> name , ce -> parent -> name_length )"		48362	1					
ANR	48830	Callee	zend_str_tolower_dup		48362	0					
ANR	48831	Identifier	zend_str_tolower_dup		48362	0					
ANR	48832	ArgumentList	ce -> parent -> name		48362	1					
ANR	48833	Argument	ce -> parent -> name		48362	0					
ANR	48834	PtrMemberAccess	ce -> parent -> name		48362	0					
ANR	48835	PtrMemberAccess	ce -> parent		48362	0					
ANR	48836	Identifier	ce		48362	0					
ANR	48837	Identifier	parent		48362	1					
ANR	48838	Identifier	name		48362	1					
ANR	48839	Argument	ce -> parent -> name_length		48362	1					
ANR	48840	PtrMemberAccess	ce -> parent -> name_length		48362	0					
ANR	48841	PtrMemberAccess	ce -> parent		48362	0					
ANR	48842	Identifier	ce		48362	0					
ANR	48843	Identifier	parent		48362	1					
ANR	48844	Identifier	name_length		48362	1					
ANR	48845	IfStatement	"if ( ! zend_hash_exists ( & ce -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 ) && zend_hash_find ( & ce -> parent -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 , ( void * * ) & function ) == SUCCESS )"		48362	1					
ANR	48846	Condition	"! zend_hash_exists ( & ce -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 ) && zend_hash_find ( & ce -> parent -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 , ( void * * ) & function ) == SUCCESS"	3193:7:113387:113603	48362	0	True				
ANR	48847	AndExpression	"! zend_hash_exists ( & ce -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 ) && zend_hash_find ( & ce -> parent -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 , ( void * * ) & function ) == SUCCESS"		48362	0		&&			
ANR	48848	UnaryOperationExpression	"! zend_hash_exists ( & ce -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 )"		48362	0					
ANR	48849	UnaryOperator	!		48362	0					
ANR	48850	CallExpression	"zend_hash_exists ( & ce -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 )"		48362	1					
ANR	48851	Callee	zend_hash_exists		48362	0					
ANR	48852	Identifier	zend_hash_exists		48362	0					
ANR	48853	ArgumentList	& ce -> function_table		48362	1					
ANR	48854	Argument	& ce -> function_table		48362	0					
ANR	48855	UnaryOperationExpression	& ce -> function_table		48362	0					
ANR	48856	UnaryOperator	&		48362	0					
ANR	48857	PtrMemberAccess	ce -> function_table		48362	1					
ANR	48858	Identifier	ce		48362	0					
ANR	48859	Identifier	function_table		48362	1					
ANR	48860	Argument	lc_parent_class_name		48362	1					
ANR	48861	Identifier	lc_parent_class_name		48362	0					
ANR	48862	Argument	ce -> parent -> name_length + 1		48362	2					
ANR	48863	AdditiveExpression	ce -> parent -> name_length + 1		48362	0		+			
ANR	48864	PtrMemberAccess	ce -> parent -> name_length		48362	0					
ANR	48865	PtrMemberAccess	ce -> parent		48362	0					
ANR	48866	Identifier	ce		48362	0					
ANR	48867	Identifier	parent		48362	1					
ANR	48868	Identifier	name_length		48362	1					
ANR	48869	PrimaryExpression	1		48362	1					
ANR	48870	EqualityExpression	"zend_hash_find ( & ce -> parent -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 , ( void * * ) & function ) == SUCCESS"		48362	1		==			
ANR	48871	CallExpression	"zend_hash_find ( & ce -> parent -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 , ( void * * ) & function )"		48362	0					
ANR	48872	Callee	zend_hash_find		48362	0					
ANR	48873	Identifier	zend_hash_find		48362	0					
ANR	48874	ArgumentList	& ce -> parent -> function_table		48362	1					
ANR	48875	Argument	& ce -> parent -> function_table		48362	0					
ANR	48876	UnaryOperationExpression	& ce -> parent -> function_table		48362	0					
ANR	48877	UnaryOperator	&		48362	0					
ANR	48878	PtrMemberAccess	ce -> parent -> function_table		48362	1					
ANR	48879	PtrMemberAccess	ce -> parent		48362	0					
ANR	48880	Identifier	ce		48362	0					
ANR	48881	Identifier	parent		48362	1					
ANR	48882	Identifier	function_table		48362	1					
ANR	48883	Argument	lc_parent_class_name		48362	1					
ANR	48884	Identifier	lc_parent_class_name		48362	0					
ANR	48885	Argument	ce -> parent -> name_length + 1		48362	2					
ANR	48886	AdditiveExpression	ce -> parent -> name_length + 1		48362	0		+			
ANR	48887	PtrMemberAccess	ce -> parent -> name_length		48362	0					
ANR	48888	PtrMemberAccess	ce -> parent		48362	0					
ANR	48889	Identifier	ce		48362	0					
ANR	48890	Identifier	parent		48362	1					
ANR	48891	Identifier	name_length		48362	1					
ANR	48892	PrimaryExpression	1		48362	1					
ANR	48893	Argument	( void * * ) & function		48362	3					
ANR	48894	CastExpression	( void * * ) & function		48362	0					
ANR	48895	CastTarget	void * *		48362	0					
ANR	48896	UnaryOperationExpression	& function		48362	1					
ANR	48897	UnaryOperator	&		48362	0					
ANR	48898	Identifier	function		48362	1					
ANR	48899	Identifier	SUCCESS		48362	1					
ANR	48900	CompoundStatement		77:128:2495:2495	48362	1					
ANR	48901	IfStatement	if ( function -> common . fn_flags & ZEND_ACC_CTOR )		48362	0					
ANR	48902	Condition	function -> common . fn_flags & ZEND_ACC_CTOR	3195:8:113616:113656	48362	0	True				
ANR	48903	BitAndExpression	function -> common . fn_flags & ZEND_ACC_CTOR		48362	0		&			
ANR	48904	MemberAccess	function -> common . fn_flags		48362	0					
ANR	48905	PtrMemberAccess	function -> common		48362	0					
ANR	48906	Identifier	function		48362	0					
ANR	48907	Identifier	common		48362	1					
ANR	48908	Identifier	fn_flags		48362	1					
ANR	48909	Identifier	ZEND_ACC_CTOR		48362	1					
ANR	48910	CompoundStatement		78:51:2548:2548	48362	1					
ANR	48911	ExpressionStatement	"zend_hash_update ( & ce -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 , function , sizeof ( zend_function ) , ( void * * ) & new_function )"	3197:5:113706:113848	48362	0	True				
ANR	48912	CallExpression	"zend_hash_update ( & ce -> function_table , lc_parent_class_name , ce -> parent -> name_length + 1 , function , sizeof ( zend_function ) , ( void * * ) & new_function )"		48362	0					
ANR	48913	Callee	zend_hash_update		48362	0					
ANR	48914	Identifier	zend_hash_update		48362	0					
ANR	48915	ArgumentList	& ce -> function_table		48362	1					
ANR	48916	Argument	& ce -> function_table		48362	0					
ANR	48917	UnaryOperationExpression	& ce -> function_table		48362	0					
ANR	48918	UnaryOperator	&		48362	0					
ANR	48919	PtrMemberAccess	ce -> function_table		48362	1					
ANR	48920	Identifier	ce		48362	0					
ANR	48921	Identifier	function_table		48362	1					
ANR	48922	Argument	lc_parent_class_name		48362	1					
ANR	48923	Identifier	lc_parent_class_name		48362	0					
ANR	48924	Argument	ce -> parent -> name_length + 1		48362	2					
ANR	48925	AdditiveExpression	ce -> parent -> name_length + 1		48362	0		+			
ANR	48926	PtrMemberAccess	ce -> parent -> name_length		48362	0					
ANR	48927	PtrMemberAccess	ce -> parent		48362	0					
ANR	48928	Identifier	ce		48362	0					
ANR	48929	Identifier	parent		48362	1					
ANR	48930	Identifier	name_length		48362	1					
ANR	48931	PrimaryExpression	1		48362	1					
ANR	48932	Argument	function		48362	3					
ANR	48933	Identifier	function		48362	0					
ANR	48934	Argument	sizeof ( zend_function )		48362	4					
ANR	48935	SizeofExpression	sizeof ( zend_function )		48362	0					
ANR	48936	Sizeof	sizeof		48362	0					
ANR	48937	SizeofOperand	zend_function		48362	1					
ANR	48938	Argument	( void * * ) & new_function		48362	5					
ANR	48939	CastExpression	( void * * ) & new_function		48362	0					
ANR	48940	CastTarget	void * *		48362	0					
ANR	48941	UnaryOperationExpression	& new_function		48362	1					
ANR	48942	UnaryOperator	&		48362	0					
ANR	48943	Identifier	new_function		48362	1					
ANR	48944	ExpressionStatement	function_add_ref ( new_function )	3198:5:113855:113885	48362	1	True				
ANR	48945	CallExpression	function_add_ref ( new_function )		48362	0					
ANR	48946	Callee	function_add_ref		48362	0					
ANR	48947	Identifier	function_add_ref		48362	0					
ANR	48948	ArgumentList	new_function		48362	1					
ANR	48949	Argument	new_function		48362	0					
ANR	48950	Identifier	new_function		48362	0					
ANR	48951	ExpressionStatement	efree ( lc_parent_class_name )	3201:3:113901:113928	48362	2	True				
ANR	48952	CallExpression	efree ( lc_parent_class_name )		48362	0					
ANR	48953	Callee	efree		48362	0					
ANR	48954	Identifier	efree		48362	0					
ANR	48955	ArgumentList	lc_parent_class_name		48362	1					
ANR	48956	Argument	lc_parent_class_name		48362	0					
ANR	48957	Identifier	lc_parent_class_name		48362	0					
ANR	48958	ExpressionStatement	efree ( lc_class_name )	3203:2:113936:113956	48362	4	True				
ANR	48959	CallExpression	efree ( lc_class_name )		48362	0					
ANR	48960	Callee	efree		48362	0					
ANR	48961	Identifier	efree		48362	0					
ANR	48962	ArgumentList	lc_class_name		48362	1					
ANR	48963	Argument	lc_class_name		48362	0					
ANR	48964	Identifier	lc_class_name		48362	0					
ANR	48965	ExpressionStatement	ce -> constructor = ce -> parent -> constructor	3205:1:113962:114003	48362	19	True				
ANR	48966	AssignmentExpression	ce -> constructor = ce -> parent -> constructor		48362	0		=			
ANR	48967	PtrMemberAccess	ce -> constructor		48362	0					
ANR	48968	Identifier	ce		48362	0					
ANR	48969	Identifier	constructor		48362	1					
ANR	48970	PtrMemberAccess	ce -> parent -> constructor		48362	1					
ANR	48971	PtrMemberAccess	ce -> parent		48362	0					
ANR	48972	Identifier	ce		48362	0					
ANR	48973	Identifier	parent		48362	1					
ANR	48974	Identifier	constructor		48362	1					
ANR	48975	ReturnType	static void		48362	1					
ANR	48976	Identifier	do_inherit_parent_constructor		48362	2					
ANR	48977	ParameterList	zend_class_entry * ce		48362	3					
ANR	48978	Parameter	zend_class_entry * ce	3117:42:111078:111097	48362	0	True				
ANR	48979	ParameterType	zend_class_entry *		48362	0					
ANR	48980	Identifier	ce		48362	1					
ANR	48981	CFGEntryNode	ENTRY		48362		True				
ANR	48982	CFGExitNode	EXIT		48362		True				
ANR	48983	Symbol	ce -> name_length		48362						
ANR	48984	Symbol	ce -> constructor -> common . function_name		48362						
ANR	48985	Symbol	ce -> __set		48362						
ANR	48986	Symbol	ce -> parent -> destructor		48362						
ANR	48987	Symbol	ce -> parent -> constructor -> common . fn_flags		48362						
ANR	48988	Symbol	ZEND_CONSTRUCTOR_FUNC_NAME		48362						
ANR	48989	Symbol	ce -> parent -> clone		48362						
ANR	48990	Symbol	* ce -> constructor		48362						
ANR	48991	Symbol	zend_hash_exists		48362						
ANR	48992	Symbol	* ce		48362						
ANR	48993	Symbol	ce -> unserialize		48362						
ANR	48994	Symbol	zend_hash_find		48362						
ANR	48995	Symbol	ce -> __tostring		48362						
ANR	48996	Symbol	* ce -> parent		48362						
ANR	48997	Symbol	function		48362						
ANR	48998	Symbol	ce -> __get		48362						
ANR	48999	Symbol	ce -> parent -> constructor -> common . function_name		48362						
ANR	49000	Symbol	* * ce -> parent		48362						
ANR	49001	Symbol	ce -> name		48362						
ANR	49002	Symbol	ce -> __callstatic		48362						
ANR	49003	Symbol	ce -> parent -> iterator_funcs . funcs		48362						
ANR	49004	Symbol	ce -> parent -> constructor		48362						
ANR	49005	Symbol	ce -> parent -> __set		48362						
ANR	49006	Symbol	ce -> destructor		48362						
ANR	49007	Symbol	ce -> __isset		48362						
ANR	49008	Symbol	ce -> parent		48362						
ANR	49009	Symbol	& ce -> parent -> function_table		48362						
ANR	49010	Symbol	ce -> parent -> name		48362						
ANR	49011	Symbol	lc_parent_class_name		48362						
ANR	49012	Symbol	ce -> parent -> constructor -> common		48362						
ANR	49013	Symbol	ce -> __debugInfo		48362						
ANR	49014	Symbol	ce -> parent -> __callstatic		48362						
ANR	49015	Symbol	ZEND_ACC_CTOR		48362						
ANR	49016	Symbol	ce -> parent -> __get		48362						
ANR	49017	Symbol	ce -> __call		48362						
ANR	49018	Symbol	ce -> get_iterator		48362						
ANR	49019	Symbol	ce -> clone		48362						
ANR	49020	Symbol	lc_class_name		48362						
ANR	49021	Symbol	* * * ce		48362						
ANR	49022	Symbol	& ce -> function_table		48362						
ANR	49023	Symbol	ce -> parent -> iterator_funcs		48362						
ANR	49024	Symbol	* * ce		48362						
ANR	49025	Symbol	ce -> constructor -> common		48362						
ANR	49026	Symbol	ZEND_ACC_FINAL		48362						
ANR	49027	Symbol	ce -> parent -> __call		48362						
ANR	49028	Symbol	ce -> parent -> __debugInfo		48362						
ANR	49029	Symbol	* ce -> parent -> constructor		48362						
ANR	49030	Symbol	function -> common . fn_flags		48362						
ANR	49031	Symbol	ce -> parent -> get_iterator		48362						
ANR	49032	Symbol	& function		48362						
ANR	49033	Symbol	ce -> parent -> __unset		48362						
ANR	49034	Symbol	ce -> parent -> unserialize		48362						
ANR	49035	Symbol	zend_str_tolower_dup		48362						
ANR	49036	Symbol	ce -> parent -> create_object		48362						
ANR	49037	Symbol	ce		48362						
ANR	49038	Symbol	ce -> constructor		48362						
ANR	49039	Symbol	SUCCESS		48362						
ANR	49040	Symbol	& new_function		48362						
ANR	49041	Symbol	function -> common		48362						
ANR	49042	Symbol	* function		48362						
ANR	49043	Symbol	new_function		48362						
ANR	49044	Symbol	ce -> __unset		48362						
ANR	49045	Symbol	E_ERROR		48362						
ANR	49046	Symbol	ce -> iterator_funcs		48362						
ANR	49047	Symbol	ce -> parent -> __isset		48362						
ANR	49048	Symbol	ce -> serialize		48362						
ANR	49049	Symbol	ce -> parent -> __tostring		48362						
ANR	49050	Symbol	ce -> parent -> serialize		48362						
ANR	49051	Symbol	ce -> create_object		48362						
ANR	49052	Symbol	ce -> parent -> name_length		48362						
ANR	49053	Symbol	ce -> iterator_funcs . funcs		48362						
ANR	49054	Function	zend_visibility_string	3209:0:114018:114270							
ANR	49055	FunctionDef	zend_visibility_string (zend_uint fn_flags)		49054	0					
ANR	49056	CompoundStatement		3210:0:114077:114270	49054	0					
ANR	49057	IfStatement	if ( fn_flags & ZEND_ACC_PRIVATE )		49054	0					
ANR	49058	Condition	fn_flags & ZEND_ACC_PRIVATE	3211:5:114084:114110	49054	0	True				
ANR	49059	BitAndExpression	fn_flags & ZEND_ACC_PRIVATE		49054	0		&			
ANR	49060	Identifier	fn_flags		49054	0					
ANR	49061	Identifier	ZEND_ACC_PRIVATE		49054	1					
ANR	49062	CompoundStatement		2:34:35:35	49054	1					
ANR	49063	ReturnStatement	"return ""private"" ;"	3212:2:114117:114133	49054	0	True				
ANR	49064	PrimaryExpression	"""private"""		49054	0					
ANR	49065	IfStatement	if ( fn_flags & ZEND_ACC_PROTECTED )		49054	1					
ANR	49066	Condition	fn_flags & ZEND_ACC_PROTECTED	3214:5:114143:114171	49054	0	True				
ANR	49067	BitAndExpression	fn_flags & ZEND_ACC_PROTECTED		49054	0		&			
ANR	49068	Identifier	fn_flags		49054	0					
ANR	49069	Identifier	ZEND_ACC_PROTECTED		49054	1					
ANR	49070	CompoundStatement		5:36:96:96	49054	1					
ANR	49071	ReturnStatement	"return ""protected"" ;"	3215:2:114178:114196	49054	0	True				
ANR	49072	PrimaryExpression	"""protected"""		49054	0					
ANR	49073	IfStatement	if ( fn_flags & ZEND_ACC_PUBLIC )		49054	2					
ANR	49074	Condition	fn_flags & ZEND_ACC_PUBLIC	3217:5:114206:114231	49054	0	True				
ANR	49075	BitAndExpression	fn_flags & ZEND_ACC_PUBLIC		49054	0		&			
ANR	49076	Identifier	fn_flags		49054	0					
ANR	49077	Identifier	ZEND_ACC_PUBLIC		49054	1					
ANR	49078	CompoundStatement		8:33:156:156	49054	1					
ANR	49079	ReturnStatement	"return ""public"" ;"	3218:2:114238:114253	49054	0	True				
ANR	49080	PrimaryExpression	"""public"""		49054	0					
ANR	49081	ReturnStatement	"return """" ;"	3220:1:114259:114268	49054	3	True				
ANR	49082	PrimaryExpression	""""""		49054	0					
ANR	49083	ReturnType	char *		49054	1					
ANR	49084	Identifier	zend_visibility_string		49054	2					
ANR	49085	ParameterList	zend_uint fn_flags		49054	3					
ANR	49086	Parameter	zend_uint fn_flags	3209:29:114047:114064	49054	0	True				
ANR	49087	ParameterType	zend_uint		49054	0					
ANR	49088	Identifier	fn_flags		49054	1					
ANR	49089	CFGEntryNode	ENTRY		49054		True				
ANR	49090	CFGExitNode	EXIT		49054		True				
ANR	49091	Symbol	fn_flags		49054						
ANR	49092	Symbol	ZEND_ACC_PUBLIC		49054						
ANR	49093	Symbol	ZEND_ACC_PROTECTED		49054						
ANR	49094	Symbol	ZEND_ACC_PRIVATE		49054						
ANR	49095	Function	do_inherit_method	3224:0:114283:114594							
ANR	49096	FunctionDef	do_inherit_method (zend_function * function)		49095	0					
ANR	49097	CompoundStatement		3225:0:114348:114594	49095	0					
ANR	49098	ExpressionStatement	function_add_ref ( function )	3230:1:114566:114592	49095	0	True				
ANR	49099	CallExpression	function_add_ref ( function )		49095	0					
ANR	49100	Callee	function_add_ref		49095	0					
ANR	49101	Identifier	function_add_ref		49095	0					
ANR	49102	ArgumentList	function		49095	1					
ANR	49103	Argument	function		49095	0					
ANR	49104	Identifier	function		49095	0					
ANR	49105	ReturnType	static void		49095	1					
ANR	49106	Identifier	do_inherit_method		49095	2					
ANR	49107	ParameterList	zend_function * function		49095	3					
ANR	49108	Parameter	zend_function * function	3224:30:114313:114335	49095	0	True				
ANR	49109	ParameterType	zend_function *		49095	0					
ANR	49110	Identifier	function		49095	1					
ANR	49111	CFGEntryNode	ENTRY		49095		True				
ANR	49112	CFGExitNode	EXIT		49095		True				
ANR	49113	Symbol	function		49095						
ANR	49114	DeclStmt									
ANR	49115	Decl							zend_uint	zend_uint	i
ANR	49116	Decl							zend_uint	zend_uint	num_args
ANR	49117	DeclStmt									
ANR	49118	Decl							zend_arg_info	zend_arg_info *	fe_arg_info
ANR	49119	DeclStmt									
ANR	49120	Decl							zend_arg_info	zend_arg_info *	proto_arg_info
ANR	49121	DeclStmt									
ANR	49122	Decl							const char	const char *	fe_class_name
ANR	49123	Decl							const char	const char *	proto_class_name
ANR	49124	DeclStmt									
ANR	49125	Decl							zend_uint	zend_uint	fe_class_name_len
ANR	49126	Decl							zend_uint	zend_uint	proto_class_name_len
ANR	49127	DeclStmt									
ANR	49128	Decl							const char	const char *	colon
ANR	49129	DeclStmt									
ANR	49130	Decl							zend_class_entry	zend_class_entry * *	fe_ce
ANR	49131	Decl							zend_class_entry	zend_class_entry * *	proto_ce
ANR	49132	DeclStmt									
ANR	49133	Decl							int	int	found
ANR	49134	Decl							int	int	found2
ANR	49135	DeclStmt									
ANR	49136	Decl							char	char *	offset
ANR	49137	Decl							char	char *	buf
ANR	49138	DeclStmt									
ANR	49139	Decl							zend_uint	zend_uint	length
ANR	49140	DeclStmt									
ANR	49141	Decl							size_t	size_t	name_len
ANR	49142	DeclStmt									
ANR	49143	Decl							zend_uint	zend_uint	i
ANR	49144	Decl							zend_uint	zend_uint	required
ANR	49145	DeclStmt									
ANR	49146	Decl							zend_arg_info	zend_arg_info *	arg_info
ANR	49147	DeclStmt									
ANR	49148	Decl							const char	const char *	class_name
ANR	49149	DeclStmt									
ANR	49150	Decl							zend_uint	zend_uint	class_name_len
ANR	49151	DeclStmt									
ANR	49152	Decl							zend_uint	zend_uint	type_name_len
ANR	49153	DeclStmt									
ANR	49154	Decl							char	char *	type_name
ANR	49155	DeclStmt									
ANR	49156	Decl							zend_uint	zend_uint	idx
ANR	49157	DeclStmt									
ANR	49158	Decl							zend_op	zend_op *	precv
ANR	49159	DeclStmt									
ANR	49160	Decl							zend_uint	zend_uint	idx
ANR	49161	DeclStmt									
ANR	49162	Decl							zend_op	zend_op *	op
ANR	49163	DeclStmt									
ANR	49164	Decl							zend_op	zend_op *	end
ANR	49165	DeclStmt									
ANR	49166	Decl							zval	zval *	zv
ANR	49167	Decl							zval	zval	zv_copy
ANR	49168	DeclStmt									
ANR	49169	Decl							int	int	use_copy
ANR	49170	DeclStmt									
ANR	49171	Decl							zend_uint	zend_uint	child_flags
ANR	49172	DeclStmt									
ANR	49173	Decl							zend_uint	zend_uint	parent_flags
ANR	49174	DeclStmt									
ANR	49175	Decl							char	char *	method_prototype
ANR	49176	Function	do_inherit_method_check	3617:0:128593:129230							
ANR	49177	FunctionDef	"do_inherit_method_check (HashTable * child_function_table , zend_function * parent , const zend_hash_key * hash_key , zend_class_entry * child_ce)"		49176	0					
ANR	49178	CompoundStatement		3618:0:128759:129230	49176	0					
ANR	49179	IdentifierDeclStatement	zend_uint parent_flags = parent -> common . fn_flags ;	3619:1:128762:128810	49176	0	True				
ANR	49180	IdentifierDecl	parent_flags = parent -> common . fn_flags		49176	0					
ANR	49181	IdentifierDeclType	zend_uint		49176	0					
ANR	49182	Identifier	parent_flags		49176	1					
ANR	49183	AssignmentExpression	parent_flags = parent -> common . fn_flags		49176	2		=			
ANR	49184	Identifier	parent_flags		49176	0					
ANR	49185	MemberAccess	parent -> common . fn_flags		49176	1					
ANR	49186	PtrMemberAccess	parent -> common		49176	0					
ANR	49187	Identifier	parent		49176	0					
ANR	49188	Identifier	common		49176	1					
ANR	49189	Identifier	fn_flags		49176	1					
ANR	49190	IdentifierDeclStatement	zend_function * child ;	3620:1:128813:128833	49176	1	True				
ANR	49191	IdentifierDecl	* child		49176	0					
ANR	49192	IdentifierDeclType	zend_function *		49176	0					
ANR	49193	Identifier	child		49176	1					
ANR	49194	ExpressionStatement	TSRMLS_FETCH ( )	3621:1:128836:128850	49176	2	True				
ANR	49195	CallExpression	TSRMLS_FETCH ( )		49176	0					
ANR	49196	Callee	TSRMLS_FETCH		49176	0					
ANR	49197	Identifier	TSRMLS_FETCH		49176	0					
ANR	49198	ArgumentList			49176	1					
ANR	49199	IfStatement	"if ( zend_hash_quick_find ( child_function_table , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child ) == FAILURE )"		49176	3					
ANR	49200	Condition	"zend_hash_quick_find ( child_function_table , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child ) == FAILURE"	3623:5:128858:128978	49176	0	True				
ANR	49201	EqualityExpression	"zend_hash_quick_find ( child_function_table , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child ) == FAILURE"		49176	0		==			
ANR	49202	CallExpression	"zend_hash_quick_find ( child_function_table , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child )"		49176	0					
ANR	49203	Callee	zend_hash_quick_find		49176	0					
ANR	49204	Identifier	zend_hash_quick_find		49176	0					
ANR	49205	ArgumentList	child_function_table		49176	1					
ANR	49206	Argument	child_function_table		49176	0					
ANR	49207	Identifier	child_function_table		49176	0					
ANR	49208	Argument	hash_key -> arKey		49176	1					
ANR	49209	PtrMemberAccess	hash_key -> arKey		49176	0					
ANR	49210	Identifier	hash_key		49176	0					
ANR	49211	Identifier	arKey		49176	1					
ANR	49212	Argument	hash_key -> nKeyLength		49176	2					
ANR	49213	PtrMemberAccess	hash_key -> nKeyLength		49176	0					
ANR	49214	Identifier	hash_key		49176	0					
ANR	49215	Identifier	nKeyLength		49176	1					
ANR	49216	Argument	hash_key -> h		49176	3					
ANR	49217	PtrMemberAccess	hash_key -> h		49176	0					
ANR	49218	Identifier	hash_key		49176	0					
ANR	49219	Identifier	h		49176	1					
ANR	49220	Argument	( void * * ) & child		49176	4					
ANR	49221	CastExpression	( void * * ) & child		49176	0					
ANR	49222	CastTarget	void * *		49176	0					
ANR	49223	UnaryOperationExpression	& child		49176	1					
ANR	49224	UnaryOperator	&		49176	0					
ANR	49225	Identifier	child		49176	1					
ANR	49226	Identifier	FAILURE		49176	1					
ANR	49227	CompoundStatement		6:128:221:221	49176	1					
ANR	49228	IfStatement	if ( parent_flags & ( ZEND_ACC_ABSTRACT ) )		49176	0					
ANR	49229	Condition	parent_flags & ( ZEND_ACC_ABSTRACT )	3624:6:128989:129022	49176	0	True				
ANR	49230	BitAndExpression	parent_flags & ( ZEND_ACC_ABSTRACT )		49176	0		&			
ANR	49231	Identifier	parent_flags		49176	0					
ANR	49232	Identifier	ZEND_ACC_ABSTRACT		49176	1					
ANR	49233	CompoundStatement		7:42:265:265	49176	1					
ANR	49234	ExpressionStatement	child_ce -> ce_flags |= ZEND_ACC_IMPLICIT_ABSTRACT_CLASS	3625:3:129030:129084	49176	0	True				
ANR	49235	AssignmentExpression	child_ce -> ce_flags |= ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		49176	0		|=			
ANR	49236	PtrMemberAccess	child_ce -> ce_flags		49176	0					
ANR	49237	Identifier	child_ce		49176	0					
ANR	49238	Identifier	ce_flags		49176	1					
ANR	49239	Identifier	ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		49176	1					
ANR	49240	ReturnStatement	return 1 ;	3627:2:129092:129100	49176	1	True				
ANR	49241	PrimaryExpression	1		49176	0					
ANR	49242	Statement	do_inheritance_check_on_method	3630:1:129161:129190	49176	4	True				
ANR	49243	Statement	(	3630:31:129191:129191	49176	5	True				
ANR	49244	Statement	child	3630:32:129192:129196	49176	6	True				
ANR	49245	Statement	","	3630:37:129197:129197	49176	7	True				
ANR	49246	Statement	parent	3630:39:129199:129204	49176	8	True				
ANR	49247	Statement	TSRMLS_CC	3630:46:129206:129214	49176	9	True				
ANR	49248	Statement	)	3630:55:129215:129215	49176	10	True				
ANR	49249	ExpressionStatement		3630:56:129216:129216	49176	11	True				
ANR	49250	ReturnStatement	return 0 ;	3632:1:129220:129228	49176	12	True				
ANR	49251	PrimaryExpression	0		49176	0					
ANR	49252	ReturnType	static zend_bool		49176	1					
ANR	49253	Identifier	do_inherit_method_check		49176	2					
ANR	49254	ParameterList	"HashTable * child_function_table , zend_function * parent , const zend_hash_key * hash_key , zend_class_entry * child_ce"		49176	3					
ANR	49255	Parameter	HashTable * child_function_table	3617:41:128634:128664	49176	0	True				
ANR	49256	ParameterType	HashTable *		49176	0					
ANR	49257	Identifier	child_function_table		49176	1					
ANR	49258	Parameter	zend_function * parent	3617:74:128667:128687	49176	1	True				
ANR	49259	ParameterType	zend_function *		49176	0					
ANR	49260	Identifier	parent		49176	1					
ANR	49261	Parameter	const zend_hash_key * hash_key	3617:97:128690:128718	49176	2	True				
ANR	49262	ParameterType	const zend_hash_key *		49176	0					
ANR	49263	Identifier	hash_key		49176	1					
ANR	49264	Parameter	zend_class_entry * child_ce	3617:128:128721:128746	49176	3	True				
ANR	49265	ParameterType	zend_class_entry *		49176	0					
ANR	49266	Identifier	child_ce		49176	1					
ANR	49267	CFGEntryNode	ENTRY		49176		True				
ANR	49268	CFGExitNode	EXIT		49176		True				
ANR	49269	Symbol	parent -> common		49176						
ANR	49270	Symbol	parent		49176						
ANR	49271	Symbol	* parent		49176						
ANR	49272	Symbol	child_function_table		49176						
ANR	49273	Symbol	parent_flags		49176						
ANR	49274	Symbol	& child		49176						
ANR	49275	Symbol	hash_key -> h		49176						
ANR	49276	Symbol	FAILURE		49176						
ANR	49277	Symbol	child_ce		49176						
ANR	49278	Symbol	* hash_key		49176						
ANR	49279	Symbol	ZEND_ACC_ABSTRACT		49176						
ANR	49280	Symbol	ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		49176						
ANR	49281	Symbol	zend_hash_quick_find		49176						
ANR	49282	Symbol	hash_key		49176						
ANR	49283	Symbol	hash_key -> nKeyLength		49176						
ANR	49284	Symbol	child_ce -> ce_flags		49176						
ANR	49285	Symbol	parent -> common . fn_flags		49176						
ANR	49286	Symbol	child		49176						
ANR	49287	Symbol	hash_key -> arKey		49176						
ANR	49288	Symbol	* child_ce		49176						
ANR	49289	Function	do_inherit_property_access_check	3636:0:129243:131787							
ANR	49290	FunctionDef	"do_inherit_property_access_check (HashTable * target_ht , zend_property_info * parent_info , const zend_hash_key * hash_key , zend_class_entry * ce)"		49289	0					
ANR	49291	CompoundStatement		3637:0:129411:131787	49289	0					
ANR	49292	IdentifierDeclStatement	zend_property_info * child_info ;	3638:1:129414:129444	49289	0	True				
ANR	49293	IdentifierDecl	* child_info		49289	0					
ANR	49294	IdentifierDeclType	zend_property_info *		49289	0					
ANR	49295	Identifier	child_info		49289	1					
ANR	49296	IdentifierDeclStatement	zend_class_entry * parent_ce = ce -> parent ;	3639:1:129447:129487	49289	1	True				
ANR	49297	IdentifierDecl	* parent_ce = ce -> parent		49289	0					
ANR	49298	IdentifierDeclType	zend_class_entry *		49289	0					
ANR	49299	Identifier	parent_ce		49289	1					
ANR	49300	AssignmentExpression	* parent_ce = ce -> parent		49289	2		=			
ANR	49301	Identifier	parent_ce		49289	0					
ANR	49302	PtrMemberAccess	ce -> parent		49289	1					
ANR	49303	Identifier	ce		49289	0					
ANR	49304	Identifier	parent		49289	1					
ANR	49305	ExpressionStatement	TSRMLS_FETCH ( )	3640:1:129490:129504	49289	2	True				
ANR	49306	CallExpression	TSRMLS_FETCH ( )		49289	0					
ANR	49307	Callee	TSRMLS_FETCH		49289	0					
ANR	49308	Identifier	TSRMLS_FETCH		49289	0					
ANR	49309	ArgumentList			49289	1					
ANR	49310	IfStatement	if ( parent_info -> flags & ( ZEND_ACC_PRIVATE | ZEND_ACC_SHADOW ) )		49289	3					
ANR	49311	Condition	parent_info -> flags & ( ZEND_ACC_PRIVATE | ZEND_ACC_SHADOW )	3642:5:129512:129566	49289	0	True				
ANR	49312	BitAndExpression	parent_info -> flags & ( ZEND_ACC_PRIVATE | ZEND_ACC_SHADOW )		49289	0		&			
ANR	49313	PtrMemberAccess	parent_info -> flags		49289	0					
ANR	49314	Identifier	parent_info		49289	0					
ANR	49315	Identifier	flags		49289	1					
ANR	49316	InclusiveOrExpression	ZEND_ACC_PRIVATE | ZEND_ACC_SHADOW		49289	1		|			
ANR	49317	Identifier	ZEND_ACC_PRIVATE		49289	0					
ANR	49318	Identifier	ZEND_ACC_SHADOW		49289	1					
ANR	49319	CompoundStatement		6:62:157:157	49289	1					
ANR	49320	IfStatement	"if ( zend_hash_quick_find ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child_info ) == SUCCESS )"		49289	0					
ANR	49321	Condition	"zend_hash_quick_find ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child_info ) == SUCCESS"	3643:6:129577:129702	49289	0	True				
ANR	49322	EqualityExpression	"zend_hash_quick_find ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child_info ) == SUCCESS"		49289	0		==			
ANR	49323	CallExpression	"zend_hash_quick_find ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child_info )"		49289	0					
ANR	49324	Callee	zend_hash_quick_find		49289	0					
ANR	49325	Identifier	zend_hash_quick_find		49289	0					
ANR	49326	ArgumentList	& ce -> properties_info		49289	1					
ANR	49327	Argument	& ce -> properties_info		49289	0					
ANR	49328	UnaryOperationExpression	& ce -> properties_info		49289	0					
ANR	49329	UnaryOperator	&		49289	0					
ANR	49330	PtrMemberAccess	ce -> properties_info		49289	1					
ANR	49331	Identifier	ce		49289	0					
ANR	49332	Identifier	properties_info		49289	1					
ANR	49333	Argument	hash_key -> arKey		49289	1					
ANR	49334	PtrMemberAccess	hash_key -> arKey		49289	0					
ANR	49335	Identifier	hash_key		49289	0					
ANR	49336	Identifier	arKey		49289	1					
ANR	49337	Argument	hash_key -> nKeyLength		49289	2					
ANR	49338	PtrMemberAccess	hash_key -> nKeyLength		49289	0					
ANR	49339	Identifier	hash_key		49289	0					
ANR	49340	Identifier	nKeyLength		49289	1					
ANR	49341	Argument	hash_key -> h		49289	3					
ANR	49342	PtrMemberAccess	hash_key -> h		49289	0					
ANR	49343	Identifier	hash_key		49289	0					
ANR	49344	Identifier	h		49289	1					
ANR	49345	Argument	( void * * ) & child_info		49289	4					
ANR	49346	CastExpression	( void * * ) & child_info		49289	0					
ANR	49347	CastTarget	void * *		49289	0					
ANR	49348	UnaryOperationExpression	& child_info		49289	1					
ANR	49349	UnaryOperator	&		49289	0					
ANR	49350	Identifier	child_info		49289	1					
ANR	49351	Identifier	SUCCESS		49289	1					
ANR	49352	CompoundStatement		7:134:293:293	49289	1					
ANR	49353	ExpressionStatement	child_info -> flags |= ZEND_ACC_CHANGED	3644:3:129710:129747	49289	0	True				
ANR	49354	AssignmentExpression	child_info -> flags |= ZEND_ACC_CHANGED		49289	0		|=			
ANR	49355	PtrMemberAccess	child_info -> flags		49289	0					
ANR	49356	Identifier	child_info		49289	0					
ANR	49357	Identifier	flags		49289	1					
ANR	49358	Identifier	ZEND_ACC_CHANGED		49289	1					
ANR	49359	ElseStatement	else		49289	0					
ANR	49360	CompoundStatement		9:9:346:346	49289	0					
ANR	49361	ExpressionStatement	"zend_hash_quick_update ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , parent_info , sizeof ( zend_property_info ) , ( void * * ) & child_info )"	3646:3:129763:129923	49289	0	True				
ANR	49362	CallExpression	"zend_hash_quick_update ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , parent_info , sizeof ( zend_property_info ) , ( void * * ) & child_info )"		49289	0					
ANR	49363	Callee	zend_hash_quick_update		49289	0					
ANR	49364	Identifier	zend_hash_quick_update		49289	0					
ANR	49365	ArgumentList	& ce -> properties_info		49289	1					
ANR	49366	Argument	& ce -> properties_info		49289	0					
ANR	49367	UnaryOperationExpression	& ce -> properties_info		49289	0					
ANR	49368	UnaryOperator	&		49289	0					
ANR	49369	PtrMemberAccess	ce -> properties_info		49289	1					
ANR	49370	Identifier	ce		49289	0					
ANR	49371	Identifier	properties_info		49289	1					
ANR	49372	Argument	hash_key -> arKey		49289	1					
ANR	49373	PtrMemberAccess	hash_key -> arKey		49289	0					
ANR	49374	Identifier	hash_key		49289	0					
ANR	49375	Identifier	arKey		49289	1					
ANR	49376	Argument	hash_key -> nKeyLength		49289	2					
ANR	49377	PtrMemberAccess	hash_key -> nKeyLength		49289	0					
ANR	49378	Identifier	hash_key		49289	0					
ANR	49379	Identifier	nKeyLength		49289	1					
ANR	49380	Argument	hash_key -> h		49289	3					
ANR	49381	PtrMemberAccess	hash_key -> h		49289	0					
ANR	49382	Identifier	hash_key		49289	0					
ANR	49383	Identifier	h		49289	1					
ANR	49384	Argument	parent_info		49289	4					
ANR	49385	Identifier	parent_info		49289	0					
ANR	49386	Argument	sizeof ( zend_property_info )		49289	5					
ANR	49387	SizeofExpression	sizeof ( zend_property_info )		49289	0					
ANR	49388	Sizeof	sizeof		49289	0					
ANR	49389	SizeofOperand	zend_property_info		49289	1					
ANR	49390	Argument	( void * * ) & child_info		49289	6					
ANR	49391	CastExpression	( void * * ) & child_info		49289	0					
ANR	49392	CastTarget	void * *		49289	0					
ANR	49393	UnaryOperationExpression	& child_info		49289	1					
ANR	49394	UnaryOperator	&		49289	0					
ANR	49395	Identifier	child_info		49289	1					
ANR	49396	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		49289	1					
ANR	49397	Condition	ce -> type & ZEND_INTERNAL_CLASS	3647:6:129931:129960	49289	0	True				
ANR	49398	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		49289	0		&			
ANR	49399	PtrMemberAccess	ce -> type		49289	0					
ANR	49400	Identifier	ce		49289	0					
ANR	49401	Identifier	type		49289	1					
ANR	49402	Identifier	ZEND_INTERNAL_CLASS		49289	1					
ANR	49403	CompoundStatement		11:38:551:551	49289	1					
ANR	49404	ExpressionStatement	zend_duplicate_property_info_internal ( child_info )	3648:4:129969:130018	49289	0	True				
ANR	49405	CallExpression	zend_duplicate_property_info_internal ( child_info )		49289	0					
ANR	49406	Callee	zend_duplicate_property_info_internal		49289	0					
ANR	49407	Identifier	zend_duplicate_property_info_internal		49289	0					
ANR	49408	ArgumentList	child_info		49289	1					
ANR	49409	Argument	child_info		49289	0					
ANR	49410	Identifier	child_info		49289	0					
ANR	49411	ElseStatement	else		49289	0					
ANR	49412	CompoundStatement		13:10:618:618	49289	0					
ANR	49413	ExpressionStatement	zend_duplicate_property_info ( child_info )	3650:4:130036:130076	49289	0	True				
ANR	49414	CallExpression	zend_duplicate_property_info ( child_info )		49289	0					
ANR	49415	Callee	zend_duplicate_property_info		49289	0					
ANR	49416	Identifier	zend_duplicate_property_info		49289	0					
ANR	49417	ArgumentList	child_info		49289	1					
ANR	49418	Argument	child_info		49289	0					
ANR	49419	Identifier	child_info		49289	0					
ANR	49420	ExpressionStatement	child_info -> flags &= ~ZEND_ACC_PRIVATE	3652:3:130086:130124	49289	2	True				
ANR	49421	AssignmentExpression	child_info -> flags &= ~ZEND_ACC_PRIVATE		49289	0		&=			
ANR	49422	PtrMemberAccess	child_info -> flags		49289	0					
ANR	49423	Identifier	child_info		49289	0					
ANR	49424	Identifier	flags		49289	1					
ANR	49425	Identifier	~ZEND_ACC_PRIVATE		49289	1					
ANR	49426	ExpressionStatement	child_info -> flags |= ZEND_ACC_SHADOW	3653:3:130160:130196	49289	3	True				
ANR	49427	AssignmentExpression	child_info -> flags |= ZEND_ACC_SHADOW		49289	0		|=			
ANR	49428	PtrMemberAccess	child_info -> flags		49289	0					
ANR	49429	Identifier	child_info		49289	0					
ANR	49430	Identifier	flags		49289	1					
ANR	49431	Identifier	ZEND_ACC_SHADOW		49289	1					
ANR	49432	ReturnStatement	return 0 ;	3655:2:130239:130247	49289	1	True				
ANR	49433	PrimaryExpression	0		49289	0					
ANR	49434	IfStatement	"if ( zend_hash_quick_find ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child_info ) == SUCCESS )"		49289	4					
ANR	49435	Condition	"zend_hash_quick_find ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child_info ) == SUCCESS"	3658:5:130303:130428	49289	0	True				
ANR	49436	EqualityExpression	"zend_hash_quick_find ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child_info ) == SUCCESS"		49289	0		==			
ANR	49437	CallExpression	"zend_hash_quick_find ( & ce -> properties_info , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & child_info )"		49289	0					
ANR	49438	Callee	zend_hash_quick_find		49289	0					
ANR	49439	Identifier	zend_hash_quick_find		49289	0					
ANR	49440	ArgumentList	& ce -> properties_info		49289	1					
ANR	49441	Argument	& ce -> properties_info		49289	0					
ANR	49442	UnaryOperationExpression	& ce -> properties_info		49289	0					
ANR	49443	UnaryOperator	&		49289	0					
ANR	49444	PtrMemberAccess	ce -> properties_info		49289	1					
ANR	49445	Identifier	ce		49289	0					
ANR	49446	Identifier	properties_info		49289	1					
ANR	49447	Argument	hash_key -> arKey		49289	1					
ANR	49448	PtrMemberAccess	hash_key -> arKey		49289	0					
ANR	49449	Identifier	hash_key		49289	0					
ANR	49450	Identifier	arKey		49289	1					
ANR	49451	Argument	hash_key -> nKeyLength		49289	2					
ANR	49452	PtrMemberAccess	hash_key -> nKeyLength		49289	0					
ANR	49453	Identifier	hash_key		49289	0					
ANR	49454	Identifier	nKeyLength		49289	1					
ANR	49455	Argument	hash_key -> h		49289	3					
ANR	49456	PtrMemberAccess	hash_key -> h		49289	0					
ANR	49457	Identifier	hash_key		49289	0					
ANR	49458	Identifier	h		49289	1					
ANR	49459	Argument	( void * * ) & child_info		49289	4					
ANR	49460	CastExpression	( void * * ) & child_info		49289	0					
ANR	49461	CastTarget	void * *		49289	0					
ANR	49462	UnaryOperationExpression	& child_info		49289	1					
ANR	49463	UnaryOperator	&		49289	0					
ANR	49464	Identifier	child_info		49289	1					
ANR	49465	Identifier	SUCCESS		49289	1					
ANR	49466	CompoundStatement		22:133:1019:1019	49289	1					
ANR	49467	IfStatement	if ( ( parent_info -> flags & ZEND_ACC_STATIC ) != ( child_info -> flags & ZEND_ACC_STATIC ) )		49289	0					
ANR	49468	Condition	( parent_info -> flags & ZEND_ACC_STATIC ) != ( child_info -> flags & ZEND_ACC_STATIC )	3659:6:130439:130517	49289	0	True				
ANR	49469	EqualityExpression	( parent_info -> flags & ZEND_ACC_STATIC ) != ( child_info -> flags & ZEND_ACC_STATIC )		49289	0		!=			
ANR	49470	BitAndExpression	parent_info -> flags & ZEND_ACC_STATIC		49289	0		&			
ANR	49471	PtrMemberAccess	parent_info -> flags		49289	0					
ANR	49472	Identifier	parent_info		49289	0					
ANR	49473	Identifier	flags		49289	1					
ANR	49474	Identifier	ZEND_ACC_STATIC		49289	1					
ANR	49475	BitAndExpression	child_info -> flags & ZEND_ACC_STATIC		49289	1		&			
ANR	49476	PtrMemberAccess	child_info -> flags		49289	0					
ANR	49477	Identifier	child_info		49289	0					
ANR	49478	Identifier	flags		49289	1					
ANR	49479	Identifier	ZEND_ACC_STATIC		49289	1					
ANR	49480	CompoundStatement		23:87:1108:1108	49289	1					
ANR	49481	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare %s%s::$%s as %s%s::$%s"" , ( parent_info -> flags & ZEND_ACC_STATIC ) ? ""static "" : ""non static "" , parent_ce -> name , hash_key -> arKey , ( child_info -> flags & ZEND_ACC_STATIC ) ? ""static "" : ""non static "" , ce -> name , hash_key -> arKey )"	3660:3:130525:130808	49289	0	True				
ANR	49482	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare %s%s::$%s as %s%s::$%s"" , ( parent_info -> flags & ZEND_ACC_STATIC ) ? ""static "" : ""non static "" , parent_ce -> name , hash_key -> arKey , ( child_info -> flags & ZEND_ACC_STATIC ) ? ""static "" : ""non static "" , ce -> name , hash_key -> arKey )"		49289	0					
ANR	49483	Callee	zend_error_noreturn		49289	0					
ANR	49484	Identifier	zend_error_noreturn		49289	0					
ANR	49485	ArgumentList	E_COMPILE_ERROR		49289	1					
ANR	49486	Argument	E_COMPILE_ERROR		49289	0					
ANR	49487	Identifier	E_COMPILE_ERROR		49289	0					
ANR	49488	Argument	"""Cannot redeclare %s%s::$%s as %s%s::$%s"""		49289	1					
ANR	49489	PrimaryExpression	"""Cannot redeclare %s%s::$%s as %s%s::$%s"""		49289	0					
ANR	49490	Argument	"( parent_info -> flags & ZEND_ACC_STATIC ) ? ""static "" : ""non static """		49289	2					
ANR	49491	ConditionalExpression	"( parent_info -> flags & ZEND_ACC_STATIC ) ? ""static "" : ""non static """		49289	0					
ANR	49492	Condition	parent_info -> flags & ZEND_ACC_STATIC		49289	0					
ANR	49493	BitAndExpression	parent_info -> flags & ZEND_ACC_STATIC		49289	0		&			
ANR	49494	PtrMemberAccess	parent_info -> flags		49289	0					
ANR	49495	Identifier	parent_info		49289	0					
ANR	49496	Identifier	flags		49289	1					
ANR	49497	Identifier	ZEND_ACC_STATIC		49289	1					
ANR	49498	PrimaryExpression	"""static """		49289	1					
ANR	49499	PrimaryExpression	"""non static """		49289	2					
ANR	49500	Argument	parent_ce -> name		49289	3					
ANR	49501	PtrMemberAccess	parent_ce -> name		49289	0					
ANR	49502	Identifier	parent_ce		49289	0					
ANR	49503	Identifier	name		49289	1					
ANR	49504	Argument	hash_key -> arKey		49289	4					
ANR	49505	PtrMemberAccess	hash_key -> arKey		49289	0					
ANR	49506	Identifier	hash_key		49289	0					
ANR	49507	Identifier	arKey		49289	1					
ANR	49508	Argument	"( child_info -> flags & ZEND_ACC_STATIC ) ? ""static "" : ""non static """		49289	5					
ANR	49509	ConditionalExpression	"( child_info -> flags & ZEND_ACC_STATIC ) ? ""static "" : ""non static """		49289	0					
ANR	49510	Condition	child_info -> flags & ZEND_ACC_STATIC		49289	0					
ANR	49511	BitAndExpression	child_info -> flags & ZEND_ACC_STATIC		49289	0		&			
ANR	49512	PtrMemberAccess	child_info -> flags		49289	0					
ANR	49513	Identifier	child_info		49289	0					
ANR	49514	Identifier	flags		49289	1					
ANR	49515	Identifier	ZEND_ACC_STATIC		49289	1					
ANR	49516	PrimaryExpression	"""static """		49289	1					
ANR	49517	PrimaryExpression	"""non static """		49289	2					
ANR	49518	Argument	ce -> name		49289	6					
ANR	49519	PtrMemberAccess	ce -> name		49289	0					
ANR	49520	Identifier	ce		49289	0					
ANR	49521	Identifier	name		49289	1					
ANR	49522	Argument	hash_key -> arKey		49289	7					
ANR	49523	PtrMemberAccess	hash_key -> arKey		49289	0					
ANR	49524	Identifier	hash_key		49289	0					
ANR	49525	Identifier	arKey		49289	1					
ANR	49526	IfStatement	if ( parent_info -> flags & ZEND_ACC_CHANGED )		49289	1					
ANR	49527	Condition	parent_info -> flags & ZEND_ACC_CHANGED	3666:5:130821:130857	49289	0	True				
ANR	49528	BitAndExpression	parent_info -> flags & ZEND_ACC_CHANGED		49289	0		&			
ANR	49529	PtrMemberAccess	parent_info -> flags		49289	0					
ANR	49530	Identifier	parent_info		49289	0					
ANR	49531	Identifier	flags		49289	1					
ANR	49532	Identifier	ZEND_ACC_CHANGED		49289	1					
ANR	49533	CompoundStatement		30:44:1448:1448	49289	1					
ANR	49534	ExpressionStatement	child_info -> flags |= ZEND_ACC_CHANGED	3667:3:130865:130902	49289	0	True				
ANR	49535	AssignmentExpression	child_info -> flags |= ZEND_ACC_CHANGED		49289	0		|=			
ANR	49536	PtrMemberAccess	child_info -> flags		49289	0					
ANR	49537	Identifier	child_info		49289	0					
ANR	49538	Identifier	flags		49289	1					
ANR	49539	Identifier	ZEND_ACC_CHANGED		49289	1					
ANR	49540	IfStatement	if ( ( child_info -> flags & ZEND_ACC_PPP_MASK ) > ( parent_info -> flags & ZEND_ACC_PPP_MASK ) )		49289	2					
ANR	49541	Condition	( child_info -> flags & ZEND_ACC_PPP_MASK ) > ( parent_info -> flags & ZEND_ACC_PPP_MASK )	3670:6:130915:130996	49289	0	True				
ANR	49542	RelationalExpression	( child_info -> flags & ZEND_ACC_PPP_MASK ) > ( parent_info -> flags & ZEND_ACC_PPP_MASK )		49289	0		>			
ANR	49543	BitAndExpression	child_info -> flags & ZEND_ACC_PPP_MASK		49289	0		&			
ANR	49544	PtrMemberAccess	child_info -> flags		49289	0					
ANR	49545	Identifier	child_info		49289	0					
ANR	49546	Identifier	flags		49289	1					
ANR	49547	Identifier	ZEND_ACC_PPP_MASK		49289	1					
ANR	49548	BitAndExpression	parent_info -> flags & ZEND_ACC_PPP_MASK		49289	1		&			
ANR	49549	PtrMemberAccess	parent_info -> flags		49289	0					
ANR	49550	Identifier	parent_info		49289	0					
ANR	49551	Identifier	flags		49289	1					
ANR	49552	Identifier	ZEND_ACC_PPP_MASK		49289	1					
ANR	49553	CompoundStatement		34:90:1587:1587	49289	1					
ANR	49554	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Access level to %s::$%s must be %s (as in class %s)%s"" , ce -> name , hash_key -> arKey , zend_visibility_string ( parent_info -> flags ) , parent_ce -> name , ( parent_info -> flags & ZEND_ACC_PUBLIC ) ? """" : "" or weaker"" )"	3671:3:131004:131243	49289	0	True				
ANR	49555	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Access level to %s::$%s must be %s (as in class %s)%s"" , ce -> name , hash_key -> arKey , zend_visibility_string ( parent_info -> flags ) , parent_ce -> name , ( parent_info -> flags & ZEND_ACC_PUBLIC ) ? """" : "" or weaker"" )"		49289	0					
ANR	49556	Callee	zend_error_noreturn		49289	0					
ANR	49557	Identifier	zend_error_noreturn		49289	0					
ANR	49558	ArgumentList	E_COMPILE_ERROR		49289	1					
ANR	49559	Argument	E_COMPILE_ERROR		49289	0					
ANR	49560	Identifier	E_COMPILE_ERROR		49289	0					
ANR	49561	Argument	"""Access level to %s::$%s must be %s (as in class %s)%s"""		49289	1					
ANR	49562	PrimaryExpression	"""Access level to %s::$%s must be %s (as in class %s)%s"""		49289	0					
ANR	49563	Argument	ce -> name		49289	2					
ANR	49564	PtrMemberAccess	ce -> name		49289	0					
ANR	49565	Identifier	ce		49289	0					
ANR	49566	Identifier	name		49289	1					
ANR	49567	Argument	hash_key -> arKey		49289	3					
ANR	49568	PtrMemberAccess	hash_key -> arKey		49289	0					
ANR	49569	Identifier	hash_key		49289	0					
ANR	49570	Identifier	arKey		49289	1					
ANR	49571	Argument	zend_visibility_string ( parent_info -> flags )		49289	4					
ANR	49572	CallExpression	zend_visibility_string ( parent_info -> flags )		49289	0					
ANR	49573	Callee	zend_visibility_string		49289	0					
ANR	49574	Identifier	zend_visibility_string		49289	0					
ANR	49575	ArgumentList	parent_info -> flags		49289	1					
ANR	49576	Argument	parent_info -> flags		49289	0					
ANR	49577	PtrMemberAccess	parent_info -> flags		49289	0					
ANR	49578	Identifier	parent_info		49289	0					
ANR	49579	Identifier	flags		49289	1					
ANR	49580	Argument	parent_ce -> name		49289	5					
ANR	49581	PtrMemberAccess	parent_ce -> name		49289	0					
ANR	49582	Identifier	parent_ce		49289	0					
ANR	49583	Identifier	name		49289	1					
ANR	49584	Argument	"( parent_info -> flags & ZEND_ACC_PUBLIC ) ? """" : "" or weaker"""		49289	6					
ANR	49585	ConditionalExpression	"( parent_info -> flags & ZEND_ACC_PUBLIC ) ? """" : "" or weaker"""		49289	0					
ANR	49586	Condition	parent_info -> flags & ZEND_ACC_PUBLIC		49289	0					
ANR	49587	BitAndExpression	parent_info -> flags & ZEND_ACC_PUBLIC		49289	0		&			
ANR	49588	PtrMemberAccess	parent_info -> flags		49289	0					
ANR	49589	Identifier	parent_info		49289	0					
ANR	49590	Identifier	flags		49289	1					
ANR	49591	Identifier	ZEND_ACC_PUBLIC		49289	1					
ANR	49592	PrimaryExpression	""""""		49289	1					
ANR	49593	PrimaryExpression	""" or weaker"""		49289	2					
ANR	49594	ElseStatement	else		49289	0					
ANR	49595	IfStatement	if ( ( child_info -> flags & ZEND_ACC_STATIC ) == 0 )		49289	0					
ANR	49596	Condition	( child_info -> flags & ZEND_ACC_STATIC ) == 0	3672:13:131258:131299	49289	0	True				
ANR	49597	EqualityExpression	( child_info -> flags & ZEND_ACC_STATIC ) == 0		49289	0		==			
ANR	49598	BitAndExpression	child_info -> flags & ZEND_ACC_STATIC		49289	0		&			
ANR	49599	PtrMemberAccess	child_info -> flags		49289	0					
ANR	49600	Identifier	child_info		49289	0					
ANR	49601	Identifier	flags		49289	1					
ANR	49602	Identifier	ZEND_ACC_STATIC		49289	1					
ANR	49603	PrimaryExpression	0		49289	1					
ANR	49604	CompoundStatement		36:57:1890:1890	49289	1					
ANR	49605	Statement	i_zval_ptr_dtor_nogc	3674:3:131383:131402	49289	0	True				
ANR	49606	Statement	(	3674:23:131403:131403	49289	1	True				
ANR	49607	Statement	ce	3674:24:131404:131405	49289	2	True				
ANR	49608	Statement	->	3674:26:131406:131407	49289	3	True				
ANR	49609	Statement	default_properties_table	3674:28:131408:131431	49289	4	True				
ANR	49610	Statement	[	3674:52:131432:131432	49289	5	True				
ANR	49611	Statement	parent_info	3674:53:131433:131443	49289	6	True				
ANR	49612	Statement	->	3674:64:131444:131445	49289	7	True				
ANR	49613	Statement	offset	3674:66:131446:131451	49289	8	True				
ANR	49614	Statement	]	3674:72:131452:131452	49289	9	True				
ANR	49615	Statement	ZEND_FILE_LINE_CC	3674:74:131454:131470	49289	10	True				
ANR	49616	Statement	TSRMLS_CC	3674:92:131472:131480	49289	11	True				
ANR	49617	Statement	)	3674:101:131481:131481	49289	12	True				
ANR	49618	ExpressionStatement		3674:102:131482:131482	49289	13	True				
ANR	49619	ExpressionStatement	ce -> default_properties_table [ parent_info -> offset ] = ce -> default_properties_table [ child_info -> offset ]	3675:3:131487:131587	49289	14	True				
ANR	49620	AssignmentExpression	ce -> default_properties_table [ parent_info -> offset ] = ce -> default_properties_table [ child_info -> offset ]		49289	0		=			
ANR	49621	ArrayIndexing	ce -> default_properties_table [ parent_info -> offset ]		49289	0					
ANR	49622	PtrMemberAccess	ce -> default_properties_table		49289	0					
ANR	49623	Identifier	ce		49289	0					
ANR	49624	Identifier	default_properties_table		49289	1					
ANR	49625	PtrMemberAccess	parent_info -> offset		49289	1					
ANR	49626	Identifier	parent_info		49289	0					
ANR	49627	Identifier	offset		49289	1					
ANR	49628	ArrayIndexing	ce -> default_properties_table [ child_info -> offset ]		49289	1					
ANR	49629	PtrMemberAccess	ce -> default_properties_table		49289	0					
ANR	49630	Identifier	ce		49289	0					
ANR	49631	Identifier	default_properties_table		49289	1					
ANR	49632	PtrMemberAccess	child_info -> offset		49289	1					
ANR	49633	Identifier	child_info		49289	0					
ANR	49634	Identifier	offset		49289	1					
ANR	49635	ExpressionStatement	ce -> default_properties_table [ child_info -> offset ] = NULL	3676:3:131592:131647	49289	15	True				
ANR	49636	AssignmentExpression	ce -> default_properties_table [ child_info -> offset ] = NULL		49289	0		=			
ANR	49637	ArrayIndexing	ce -> default_properties_table [ child_info -> offset ]		49289	0					
ANR	49638	PtrMemberAccess	ce -> default_properties_table		49289	0					
ANR	49639	Identifier	ce		49289	0					
ANR	49640	Identifier	default_properties_table		49289	1					
ANR	49641	PtrMemberAccess	child_info -> offset		49289	1					
ANR	49642	Identifier	child_info		49289	0					
ANR	49643	Identifier	offset		49289	1					
ANR	49644	Identifier	NULL		49289	1					
ANR	49645	ExpressionStatement	child_info -> offset = parent_info -> offset	3677:3:131652:131692	49289	16	True				
ANR	49646	AssignmentExpression	child_info -> offset = parent_info -> offset		49289	0		=			
ANR	49647	PtrMemberAccess	child_info -> offset		49289	0					
ANR	49648	Identifier	child_info		49289	0					
ANR	49649	Identifier	offset		49289	1					
ANR	49650	PtrMemberAccess	parent_info -> offset		49289	1					
ANR	49651	Identifier	parent_info		49289	0					
ANR	49652	Identifier	offset		49289	1					
ANR	49653	ReturnStatement	return 0 ;	3679:2:131700:131708	49289	3	True				
ANR	49654	PrimaryExpression	0		49289	0					
ANR	49655	ElseStatement	else		49289	0					
ANR	49656	CompoundStatement		44:8:2335:2335	49289	0					
ANR	49657	ReturnStatement	return 1 ;	3681:2:131751:131759	49289	0	True				
ANR	49658	PrimaryExpression	1		49289	0					
ANR	49659	ReturnType	static zend_bool		49289	1					
ANR	49660	Identifier	do_inherit_property_access_check		49289	2					
ANR	49661	ParameterList	"HashTable * target_ht , zend_property_info * parent_info , const zend_hash_key * hash_key , zend_class_entry * ce"		49289	3					
ANR	49662	Parameter	HashTable * target_ht	3636:50:129293:129312	49289	0	True				
ANR	49663	ParameterType	HashTable *		49289	0					
ANR	49664	Identifier	target_ht		49289	1					
ANR	49665	Parameter	zend_property_info * parent_info	3636:72:129315:129345	49289	1	True				
ANR	49666	ParameterType	zend_property_info *		49289	0					
ANR	49667	Identifier	parent_info		49289	1					
ANR	49668	Parameter	const zend_hash_key * hash_key	3636:105:129348:129376	49289	2	True				
ANR	49669	ParameterType	const zend_hash_key *		49289	0					
ANR	49670	Identifier	hash_key		49289	1					
ANR	49671	Parameter	zend_class_entry * ce	3636:136:129379:129398	49289	3	True				
ANR	49672	ParameterType	zend_class_entry *		49289	0					
ANR	49673	Identifier	ce		49289	1					
ANR	49674	CFGEntryNode	ENTRY		49289		True				
ANR	49675	CFGExitNode	EXIT		49289		True				
ANR	49676	Symbol	ce -> type		49289						
ANR	49677	Symbol	ZEND_ACC_PPP_MASK		49289						
ANR	49678	Symbol	parent_info -> offset		49289						
ANR	49679	Symbol	~ZEND_ACC_PRIVATE		49289						
ANR	49680	Symbol	ZEND_ACC_PUBLIC		49289						
ANR	49681	Symbol	E_COMPILE_ERROR		49289						
ANR	49682	Symbol	ZEND_ACC_CHANGED		49289						
ANR	49683	Symbol	* ce		49289						
ANR	49684	Symbol	* * ce		49289						
ANR	49685	Symbol	zend_visibility_string		49289						
ANR	49686	Symbol	* hash_key		49289						
ANR	49687	Symbol	zend_hash_quick_find		49289						
ANR	49688	Symbol	* parent_info -> offset		49289						
ANR	49689	Symbol	child_info -> offset		49289						
ANR	49690	Symbol	ZEND_ACC_SHADOW		49289						
ANR	49691	Symbol	target_ht		49289						
ANR	49692	Symbol	hash_key -> nKeyLength		49289						
ANR	49693	Symbol	ZEND_ACC_STATIC		49289						
ANR	49694	Symbol	* child_info		49289						
ANR	49695	Symbol	ce -> name		49289						
ANR	49696	Symbol	* parent_info		49289						
ANR	49697	Symbol	child_info -> flags		49289						
ANR	49698	Symbol	* * child_info		49289						
ANR	49699	Symbol	* * parent_info		49289						
ANR	49700	Symbol	parent_info		49289						
ANR	49701	Symbol	& child_info		49289						
ANR	49702	Symbol	* child_info -> offset		49289						
ANR	49703	Symbol	ZEND_INTERNAL_CLASS		49289						
ANR	49704	Symbol	ce		49289						
ANR	49705	Symbol	SUCCESS		49289						
ANR	49706	Symbol	NULL		49289						
ANR	49707	Symbol	ce -> parent		49289						
ANR	49708	Symbol	ce -> default_properties_table		49289						
ANR	49709	Symbol	parent_info -> flags		49289						
ANR	49710	Symbol	hash_key -> h		49289						
ANR	49711	Symbol	parent_ce -> name		49289						
ANR	49712	Symbol	ZEND_ACC_PRIVATE		49289						
ANR	49713	Symbol	child_info		49289						
ANR	49714	Symbol	parent_ce		49289						
ANR	49715	Symbol	hash_key		49289						
ANR	49716	Symbol	& ce -> properties_info		49289						
ANR	49717	Symbol	* parent_ce		49289						
ANR	49718	Symbol	* ce -> default_properties_table		49289						
ANR	49719	Symbol	hash_key -> arKey		49289						
ANR	49720	DeclStmt									
ANR	49721	Decl							zend_uint	zend_uint	i
ANR	49722	Decl							zend_uint	zend_uint	ce_num
ANR	49723	Decl							zend_uint	zend_uint	if_num
ANR	49724	DeclStmt									
ANR	49725	Decl							zend_class_entry	zend_class_entry *	entry
ANR	49726	Function	zval_internal_ctor	3735:0:133369:133494							
ANR	49727	FunctionDef	zval_internal_ctor (zval * * p)		49726	0					
ANR	49728	CompoundStatement		3736:0:133420:133494	49726	0					
ANR	49729	IdentifierDeclStatement	zval * orig_ptr = * p ;	3737:1:133423:133442	49726	0	True				
ANR	49730	IdentifierDecl	* orig_ptr = * p		49726	0					
ANR	49731	IdentifierDeclType	zval *		49726	0					
ANR	49732	Identifier	orig_ptr		49726	1					
ANR	49733	AssignmentExpression	* orig_ptr = * p		49726	2		=			
ANR	49734	Identifier	orig_ptr		49726	0					
ANR	49735	UnaryOperationExpression	* p		49726	1					
ANR	49736	UnaryOperator	*		49726	0					
ANR	49737	Identifier	p		49726	1					
ANR	49738	ExpressionStatement	ALLOC_ZVAL ( * p )	3739:1:133446:133460	49726	1	True				
ANR	49739	CallExpression	ALLOC_ZVAL ( * p )		49726	0					
ANR	49740	Callee	ALLOC_ZVAL		49726	0					
ANR	49741	Identifier	ALLOC_ZVAL		49726	0					
ANR	49742	ArgumentList	* p		49726	1					
ANR	49743	Argument	* p		49726	0					
ANR	49744	UnaryOperationExpression	* p		49726	0					
ANR	49745	UnaryOperator	*		49726	0					
ANR	49746	Identifier	p		49726	1					
ANR	49747	ExpressionStatement	"MAKE_COPY_ZVAL ( & orig_ptr , * p )"	3740:1:133463:133492	49726	2	True				
ANR	49748	CallExpression	"MAKE_COPY_ZVAL ( & orig_ptr , * p )"		49726	0					
ANR	49749	Callee	MAKE_COPY_ZVAL		49726	0					
ANR	49750	Identifier	MAKE_COPY_ZVAL		49726	0					
ANR	49751	ArgumentList	& orig_ptr		49726	1					
ANR	49752	Argument	& orig_ptr		49726	0					
ANR	49753	UnaryOperationExpression	& orig_ptr		49726	0					
ANR	49754	UnaryOperator	&		49726	0					
ANR	49755	Identifier	orig_ptr		49726	1					
ANR	49756	Argument	* p		49726	1					
ANR	49757	UnaryOperationExpression	* p		49726	0					
ANR	49758	UnaryOperator	*		49726	0					
ANR	49759	Identifier	p		49726	1					
ANR	49760	ReturnType	static void		49726	1					
ANR	49761	Identifier	zval_internal_ctor		49726	2					
ANR	49762	ParameterList	zval * * p		49726	3					
ANR	49763	Parameter	zval * * p	3735:31:133400:133407	49726	0	True				
ANR	49764	ParameterType	zval * *		49726	0					
ANR	49765	Identifier	p		49726	1					
ANR	49766	CFGEntryNode	ENTRY		49726		True				
ANR	49767	CFGExitNode	EXIT		49726		True				
ANR	49768	Symbol	p		49726						
ANR	49769	Symbol	& orig_ptr		49726						
ANR	49770	Symbol	* p		49726						
ANR	49771	Symbol	orig_ptr		49726						
ANR	49772	DeclStmt									
ANR	49773	Decl							zend_property_info	zend_property_info *	property_info
ANR	49774	DeclStmt									
ANR	49775	Decl							int	int	i
ANR	49776	DeclStmt									
ANR	49777	Decl							zval	zval *	p
ANR	49778	DeclStmt									
ANR	49779	Decl							int	int	i
ANR	49780	DeclStmt									
ANR	49781	Decl							int	int	i
ANR	49782	DeclStmt									
ANR	49783	Decl							ce_flags	ce_flags &	ZEND_HAS_STATIC_IN_METHODS
ANR	49784	Function	do_inherit_constant_check	3876:0:139166:139733							
ANR	49785	FunctionDef	"do_inherit_constant_check (HashTable * child_constants_table , const zval * * parent_constant , const zend_hash_key * hash_key , const zend_class_entry * iface)"		49784	0					
ANR	49786	CompoundStatement		3877:0:139345:139733	49784	0					
ANR	49787	IdentifierDeclStatement	zval * * old_constant ;	3878:1:139348:139367	49784	0	True				
ANR	49788	IdentifierDecl	* * old_constant		49784	0					
ANR	49789	IdentifierDeclType	zval * *		49784	0					
ANR	49790	Identifier	old_constant		49784	1					
ANR	49791	IfStatement	"if ( zend_hash_quick_find ( child_constants_table , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & old_constant ) == SUCCESS )"		49784	1					
ANR	49792	Condition	"zend_hash_quick_find ( child_constants_table , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & old_constant ) == SUCCESS"	3880:5:139375:139503	49784	0	True				
ANR	49793	EqualityExpression	"zend_hash_quick_find ( child_constants_table , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & old_constant ) == SUCCESS"		49784	0		==			
ANR	49794	CallExpression	"zend_hash_quick_find ( child_constants_table , hash_key -> arKey , hash_key -> nKeyLength , hash_key -> h , ( void * * ) & old_constant )"		49784	0					
ANR	49795	Callee	zend_hash_quick_find		49784	0					
ANR	49796	Identifier	zend_hash_quick_find		49784	0					
ANR	49797	ArgumentList	child_constants_table		49784	1					
ANR	49798	Argument	child_constants_table		49784	0					
ANR	49799	Identifier	child_constants_table		49784	0					
ANR	49800	Argument	hash_key -> arKey		49784	1					
ANR	49801	PtrMemberAccess	hash_key -> arKey		49784	0					
ANR	49802	Identifier	hash_key		49784	0					
ANR	49803	Identifier	arKey		49784	1					
ANR	49804	Argument	hash_key -> nKeyLength		49784	2					
ANR	49805	PtrMemberAccess	hash_key -> nKeyLength		49784	0					
ANR	49806	Identifier	hash_key		49784	0					
ANR	49807	Identifier	nKeyLength		49784	1					
ANR	49808	Argument	hash_key -> h		49784	3					
ANR	49809	PtrMemberAccess	hash_key -> h		49784	0					
ANR	49810	Identifier	hash_key		49784	0					
ANR	49811	Identifier	h		49784	1					
ANR	49812	Argument	( void * * ) & old_constant		49784	4					
ANR	49813	CastExpression	( void * * ) & old_constant		49784	0					
ANR	49814	CastTarget	void * *		49784	0					
ANR	49815	UnaryOperationExpression	& old_constant		49784	1					
ANR	49816	UnaryOperator	&		49784	0					
ANR	49817	Identifier	old_constant		49784	1					
ANR	49818	Identifier	SUCCESS		49784	1					
ANR	49819	CompoundStatement		4:136:160:160	49784	1					
ANR	49820	IfStatement	if ( * old_constant != * parent_constant )		49784	0					
ANR	49821	Condition	* old_constant != * parent_constant	3881:6:139514:139546	49784	0	True				
ANR	49822	EqualityExpression	* old_constant != * parent_constant		49784	0		!=			
ANR	49823	UnaryOperationExpression	* old_constant		49784	0					
ANR	49824	UnaryOperator	*		49784	0					
ANR	49825	Identifier	old_constant		49784	1					
ANR	49826	UnaryOperationExpression	* parent_constant		49784	1					
ANR	49827	UnaryOperator	*		49784	0					
ANR	49828	Identifier	parent_constant		49784	1					
ANR	49829	CompoundStatement		5:41:203:203	49784	1					
ANR	49830	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot inherit previously-inherited or override constant %s from interface %s"" , hash_key -> arKey , iface -> name )"	3882:3:139554:139701	49784	0	True				
ANR	49831	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot inherit previously-inherited or override constant %s from interface %s"" , hash_key -> arKey , iface -> name )"		49784	0					
ANR	49832	Callee	zend_error_noreturn		49784	0					
ANR	49833	Identifier	zend_error_noreturn		49784	0					
ANR	49834	ArgumentList	E_COMPILE_ERROR		49784	1					
ANR	49835	Argument	E_COMPILE_ERROR		49784	0					
ANR	49836	Identifier	E_COMPILE_ERROR		49784	0					
ANR	49837	Argument	"""Cannot inherit previously-inherited or override constant %s from interface %s"""		49784	1					
ANR	49838	PrimaryExpression	"""Cannot inherit previously-inherited or override constant %s from interface %s"""		49784	0					
ANR	49839	Argument	hash_key -> arKey		49784	2					
ANR	49840	PtrMemberAccess	hash_key -> arKey		49784	0					
ANR	49841	Identifier	hash_key		49784	0					
ANR	49842	Identifier	arKey		49784	1					
ANR	49843	Argument	iface -> name		49784	3					
ANR	49844	PtrMemberAccess	iface -> name		49784	0					
ANR	49845	Identifier	iface		49784	0					
ANR	49846	Identifier	name		49784	1					
ANR	49847	ReturnStatement	return 0 ;	3884:2:139709:139717	49784	1	True				
ANR	49848	PrimaryExpression	0		49784	0					
ANR	49849	ReturnStatement	return 1 ;	3886:1:139723:139731	49784	2	True				
ANR	49850	PrimaryExpression	1		49784	0					
ANR	49851	ReturnType	static zend_bool		49784	1					
ANR	49852	Identifier	do_inherit_constant_check		49784	2					
ANR	49853	ParameterList	"HashTable * child_constants_table , const zval * * parent_constant , const zend_hash_key * hash_key , const zend_class_entry * iface"		49784	3					
ANR	49854	Parameter	HashTable * child_constants_table	3876:43:139209:139240	49784	0	True				
ANR	49855	ParameterType	HashTable *		49784	0					
ANR	49856	Identifier	child_constants_table		49784	1					
ANR	49857	Parameter	const zval * * parent_constant	3876:77:139243:139270	49784	1	True				
ANR	49858	ParameterType	const zval * *		49784	0					
ANR	49859	Identifier	parent_constant		49784	1					
ANR	49860	Parameter	const zend_hash_key * hash_key	3876:107:139273:139301	49784	2	True				
ANR	49861	ParameterType	const zend_hash_key *		49784	0					
ANR	49862	Identifier	hash_key		49784	1					
ANR	49863	Parameter	const zend_class_entry * iface	3876:138:139304:139332	49784	3	True				
ANR	49864	ParameterType	const zend_class_entry *		49784	0					
ANR	49865	Identifier	iface		49784	1					
ANR	49866	CFGEntryNode	ENTRY		49784		True				
ANR	49867	CFGExitNode	EXIT		49784		True				
ANR	49868	Symbol	old_constant		49784						
ANR	49869	Symbol	SUCCESS		49784						
ANR	49870	Symbol	E_COMPILE_ERROR		49784						
ANR	49871	Symbol	* iface		49784						
ANR	49872	Symbol	parent_constant		49784						
ANR	49873	Symbol	* parent_constant		49784						
ANR	49874	Symbol	hash_key -> h		49784						
ANR	49875	Symbol	* hash_key		49784						
ANR	49876	Symbol	iface		49784						
ANR	49877	Symbol	* old_constant		49784						
ANR	49878	Symbol	zend_hash_quick_find		49784						
ANR	49879	Symbol	hash_key		49784						
ANR	49880	Symbol	iface -> name		49784						
ANR	49881	Symbol	child_constants_table		49784						
ANR	49882	Symbol	hash_key -> nKeyLength		49784						
ANR	49883	Symbol	& old_constant		49784						
ANR	49884	Symbol	hash_key -> arKey		49784						
ANR	49885	DeclStmt									
ANR	49886	Decl							zend_class_entry	zend_class_entry * *	iface
ANR	49887	DeclStmt									
ANR	49888	Decl							zend_uint	zend_uint	i
ANR	49889	Decl							zend_uint	zend_uint	ignore
ANR	49890	DeclStmt									
ANR	49891	Decl							zend_uint	zend_uint	current_iface_num
ANR	49892	DeclStmt									
ANR	49893	Decl							zend_uint	zend_uint	parent_iface_num
ANR	49894	DeclStmt									
ANR	49895	Decl							zend_uint	zend_uint	i
ANR	49896	Decl							zend_uint	zend_uint	ignore
ANR	49897	DeclStmt									
ANR	49898	Decl							zend_uint	zend_uint	current_trait_num
ANR	49899	DeclStmt									
ANR	49900	Decl							zend_uint	zend_uint	parent_trait_num
ANR	49901	DeclStmt									
ANR	49902	Decl							zend_uint	zend_uint	fn_flags
ANR	49903	DeclStmt									
ANR	49904	Decl							zend_uint	zend_uint	other_flags
ANR	49905	DeclStmt									
ANR	49906	Decl							char	char *	lowercase_name
ANR	49907	DeclStmt									
ANR	49908	Decl							zend_function	zend_function *	existing_fn
ANR	49909	DeclStmt									
ANR	49910	Decl							ulong	ulong	h
ANR	49911	DeclStmt									
ANR	49912	Decl							zend_class_entry	zend_class_entry *	ce
ANR	49913	DeclStmt									
ANR	49914	Decl							HashTable	HashTable * *	overriden
ANR	49915	DeclStmt									
ANR	49916	Decl							zend_trait_alias	zend_trait_alias *	alias
ANR	49917	Decl							zend_trait_alias	zend_trait_alias * *	alias_ptr
ANR	49918	DeclStmt									
ANR	49919	Decl							HashTable	HashTable *	exclude_table
ANR	49920	DeclStmt									
ANR	49921	Decl							char	char *	lcname
ANR	49922	DeclStmt									
ANR	49923	Decl							unsigned int	unsigned int	fnname_len
ANR	49924	DeclStmt									
ANR	49925	Decl							zend_function	zend_function	fn_copy
ANR	49926	DeclStmt									
ANR	49927	Decl							void	void *	dummy
ANR	49928	DeclStmt									
ANR	49929	Decl							zend_uint	zend_uint	i
ANR	49930	DeclStmt									
ANR	49931	Decl							size_t	size_t	i
ANR	49932	Decl							size_t	size_t	j
ANR	49933	DeclStmt									
ANR	49934	Decl							zend_trait_precedence	zend_trait_precedence * *	precedences
ANR	49935	DeclStmt									
ANR	49936	Decl							zend_trait_precedence	zend_trait_precedence *	cur_precedence
ANR	49937	DeclStmt									
ANR	49938	Decl							zend_trait_method_reference	zend_trait_method_reference *	cur_method_ref
ANR	49939	DeclStmt									
ANR	49940	Decl							char	char *	lcname
ANR	49941	DeclStmt									
ANR	49942	Decl							zend_bool	zend_bool	method_exists
ANR	49943	DeclStmt									
ANR	49944	Decl							char	char *	class_name
ANR	49945	DeclStmt									
ANR	49946	Decl							zend_uint	zend_uint	name_length
ANR	49947	Function	zend_traits_compile_exclude_table	4319:0:157439:158377							
ANR	49948	FunctionDef	"zend_traits_compile_exclude_table (HashTable * exclude_table , zend_trait_precedence * * precedences , zend_class_entry * trait)"		49947	0					
ANR	49949	CompoundStatement		4320:0:157583:158377	49947	0					
ANR	49950	IdentifierDeclStatement	"size_t i = 0 , j ;"	4321:1:157586:157601	49947	0	True				
ANR	49951	IdentifierDecl	i = 0		49947	0					
ANR	49952	IdentifierDeclType	size_t		49947	0					
ANR	49953	Identifier	i		49947	1					
ANR	49954	AssignmentExpression	i = 0		49947	2		=			
ANR	49955	Identifier	i		49947	0					
ANR	49956	PrimaryExpression	0		49947	1					
ANR	49957	IdentifierDecl	j		49947	1					
ANR	49958	IdentifierDeclType	size_t		49947	0					
ANR	49959	Identifier	j		49947	1					
ANR	49960	IfStatement	if ( ! precedences )		49947	1					
ANR	49961	Condition	! precedences	4323:5:157609:157620	49947	0	True				
ANR	49962	UnaryOperationExpression	! precedences		49947	0					
ANR	49963	UnaryOperator	!		49947	0					
ANR	49964	Identifier	precedences		49947	1					
ANR	49965	CompoundStatement		4:19:39:39	49947	1					
ANR	49966	ReturnStatement	return ;	4324:2:157627:157633	49947	0	True				
ANR	49967	WhileStatement	while ( precedences [ i ] )		49947	2					
ANR	49968	Condition	precedences [ i ]	4326:8:157646:157659	49947	0	True				
ANR	49969	ArrayIndexing	precedences [ i ]		49947	0					
ANR	49970	Identifier	precedences		49947	0					
ANR	49971	Identifier	i		49947	1					
ANR	49972	CompoundStatement		7:24:78:78	49947	1					
ANR	49973	IfStatement	if ( precedences [ i ] -> exclude_from_classes )		49947	0					
ANR	49974	Condition	precedences [ i ] -> exclude_from_classes	4327:6:157670:157705	49947	0	True				
ANR	49975	PtrMemberAccess	precedences [ i ] -> exclude_from_classes		49947	0					
ANR	49976	ArrayIndexing	precedences [ i ]		49947	0					
ANR	49977	Identifier	precedences		49947	0					
ANR	49978	Identifier	i		49947	1					
ANR	49979	Identifier	exclude_from_classes		49947	1					
ANR	49980	CompoundStatement		8:44:124:124	49947	1					
ANR	49981	ExpressionStatement	j = 0	4328:3:157713:157718	49947	0	True				
ANR	49982	AssignmentExpression	j = 0		49947	0		=			
ANR	49983	Identifier	j		49947	0					
ANR	49984	PrimaryExpression	0		49947	1					
ANR	49985	WhileStatement	while ( precedences [ i ] -> exclude_from_classes [ j ] )		49947	1					
ANR	49986	Condition	precedences [ i ] -> exclude_from_classes [ j ]	4329:10:157730:157768	49947	0	True				
ANR	49987	ArrayIndexing	precedences [ i ] -> exclude_from_classes [ j ]		49947	0					
ANR	49988	PtrMemberAccess	precedences [ i ] -> exclude_from_classes		49947	0					
ANR	49989	ArrayIndexing	precedences [ i ]		49947	0					
ANR	49990	Identifier	precedences		49947	0					
ANR	49991	Identifier	i		49947	1					
ANR	49992	Identifier	exclude_from_classes		49947	1					
ANR	49993	Identifier	j		49947	1					
ANR	49994	CompoundStatement		10:51:187:187	49947	1					
ANR	49995	IfStatement	if ( precedences [ i ] -> exclude_from_classes [ j ] == trait )		49947	0					
ANR	49996	Condition	precedences [ i ] -> exclude_from_classes [ j ] == trait	4330:8:157781:157828	49947	0	True				
ANR	49997	EqualityExpression	precedences [ i ] -> exclude_from_classes [ j ] == trait		49947	0		==			
ANR	49998	ArrayIndexing	precedences [ i ] -> exclude_from_classes [ j ]		49947	0					
ANR	49999	PtrMemberAccess	precedences [ i ] -> exclude_from_classes		49947	0					
ANR	50000	ArrayIndexing	precedences [ i ]		49947	0					
ANR	50001	Identifier	precedences		49947	0					
ANR	50002	Identifier	i		49947	1					
ANR	50003	Identifier	exclude_from_classes		49947	1					
ANR	50004	Identifier	j		49947	1					
ANR	50005	Identifier	trait		49947	1					
ANR	50006	CompoundStatement		13:5:323:413	49947	1					
ANR	50007	IdentifierDeclStatement	zend_uint lcname_len = precedences [ i ] -> trait_method -> mname_len ;	4331:5:157838:157900	49947	0	True				
ANR	50008	IdentifierDecl	lcname_len = precedences [ i ] -> trait_method -> mname_len		49947	0					
ANR	50009	IdentifierDeclType	zend_uint		49947	0					
ANR	50010	Identifier	lcname_len		49947	1					
ANR	50011	AssignmentExpression	lcname_len = precedences [ i ] -> trait_method -> mname_len		49947	2		=			
ANR	50012	Identifier	lcname_len		49947	0					
ANR	50013	PtrMemberAccess	precedences [ i ] -> trait_method -> mname_len		49947	1					
ANR	50014	PtrMemberAccess	precedences [ i ] -> trait_method		49947	0					
ANR	50015	ArrayIndexing	precedences [ i ]		49947	0					
ANR	50016	Identifier	precedences		49947	0					
ANR	50017	Identifier	i		49947	1					
ANR	50018	Identifier	trait_method		49947	1					
ANR	50019	Identifier	mname_len		49947	1					
ANR	50020	IdentifierDeclStatement	"char * lcname = zend_str_tolower_dup ( precedences [ i ] -> trait_method -> method_name , lcname_len ) ;"	4332:5:157907:157997	49947	1	True				
ANR	50021	IdentifierDecl	"* lcname = zend_str_tolower_dup ( precedences [ i ] -> trait_method -> method_name , lcname_len )"		49947	0					
ANR	50022	IdentifierDeclType	char *		49947	0					
ANR	50023	Identifier	lcname		49947	1					
ANR	50024	AssignmentExpression	"* lcname = zend_str_tolower_dup ( precedences [ i ] -> trait_method -> method_name , lcname_len )"		49947	2		=			
ANR	50025	Identifier	lcname		49947	0					
ANR	50026	CallExpression	"zend_str_tolower_dup ( precedences [ i ] -> trait_method -> method_name , lcname_len )"		49947	1					
ANR	50027	Callee	zend_str_tolower_dup		49947	0					
ANR	50028	Identifier	zend_str_tolower_dup		49947	0					
ANR	50029	ArgumentList	precedences [ i ] -> trait_method -> method_name		49947	1					
ANR	50030	Argument	precedences [ i ] -> trait_method -> method_name		49947	0					
ANR	50031	PtrMemberAccess	precedences [ i ] -> trait_method -> method_name		49947	0					
ANR	50032	PtrMemberAccess	precedences [ i ] -> trait_method		49947	0					
ANR	50033	ArrayIndexing	precedences [ i ]		49947	0					
ANR	50034	Identifier	precedences		49947	0					
ANR	50035	Identifier	i		49947	1					
ANR	50036	Identifier	trait_method		49947	1					
ANR	50037	Identifier	method_name		49947	1					
ANR	50038	Argument	lcname_len		49947	1					
ANR	50039	Identifier	lcname_len		49947	0					
ANR	50040	IfStatement	"if ( zend_hash_add ( exclude_table , lcname , lcname_len , NULL , 0 , NULL ) == FAILURE )"		49947	2					
ANR	50041	Condition	"zend_hash_add ( exclude_table , lcname , lcname_len , NULL , 0 , NULL ) == FAILURE"	4334:9:158009:158082	49947	0	True				
ANR	50042	EqualityExpression	"zend_hash_add ( exclude_table , lcname , lcname_len , NULL , 0 , NULL ) == FAILURE"		49947	0		==			
ANR	50043	CallExpression	"zend_hash_add ( exclude_table , lcname , lcname_len , NULL , 0 , NULL )"		49947	0					
ANR	50044	Callee	zend_hash_add		49947	0					
ANR	50045	Identifier	zend_hash_add		49947	0					
ANR	50046	ArgumentList	exclude_table		49947	1					
ANR	50047	Argument	exclude_table		49947	0					
ANR	50048	Identifier	exclude_table		49947	0					
ANR	50049	Argument	lcname		49947	1					
ANR	50050	Identifier	lcname		49947	0					
ANR	50051	Argument	lcname_len		49947	2					
ANR	50052	Identifier	lcname_len		49947	0					
ANR	50053	Argument	NULL		49947	3					
ANR	50054	Identifier	NULL		49947	0					
ANR	50055	Argument	0		49947	4					
ANR	50056	PrimaryExpression	0		49947	0					
ANR	50057	Argument	NULL		49947	5					
ANR	50058	Identifier	NULL		49947	0					
ANR	50059	Identifier	FAILURE		49947	1					
ANR	50060	CompoundStatement		15:85:501:501	49947	1					
ANR	50061	ExpressionStatement	efree ( lcname )	4335:6:158093:158106	49947	0	True				
ANR	50062	CallExpression	efree ( lcname )		49947	0					
ANR	50063	Callee	efree		49947	0					
ANR	50064	Identifier	efree		49947	0					
ANR	50065	ArgumentList	lcname		49947	1					
ANR	50066	Argument	lcname		49947	0					
ANR	50067	Identifier	lcname		49947	0					
ANR	50068	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Failed to evaluate a trait precedence (%s). Method of trait %s was defined to be excluded multiple times"" , precedences [ i ] -> trait_method -> method_name , trait -> name )"	4336:6:158114:158314	49947	1	True				
ANR	50069	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Failed to evaluate a trait precedence (%s). Method of trait %s was defined to be excluded multiple times"" , precedences [ i ] -> trait_method -> method_name , trait -> name )"		49947	0					
ANR	50070	Callee	zend_error_noreturn		49947	0					
ANR	50071	Identifier	zend_error_noreturn		49947	0					
ANR	50072	ArgumentList	E_COMPILE_ERROR		49947	1					
ANR	50073	Argument	E_COMPILE_ERROR		49947	0					
ANR	50074	Identifier	E_COMPILE_ERROR		49947	0					
ANR	50075	Argument	"""Failed to evaluate a trait precedence (%s). Method of trait %s was defined to be excluded multiple times"""		49947	1					
ANR	50076	PrimaryExpression	"""Failed to evaluate a trait precedence (%s). Method of trait %s was defined to be excluded multiple times"""		49947	0					
ANR	50077	Argument	precedences [ i ] -> trait_method -> method_name		49947	2					
ANR	50078	PtrMemberAccess	precedences [ i ] -> trait_method -> method_name		49947	0					
ANR	50079	PtrMemberAccess	precedences [ i ] -> trait_method		49947	0					
ANR	50080	ArrayIndexing	precedences [ i ]		49947	0					
ANR	50081	Identifier	precedences		49947	0					
ANR	50082	Identifier	i		49947	1					
ANR	50083	Identifier	trait_method		49947	1					
ANR	50084	Identifier	method_name		49947	1					
ANR	50085	Argument	trait -> name		49947	3					
ANR	50086	PtrMemberAccess	trait -> name		49947	0					
ANR	50087	Identifier	trait		49947	0					
ANR	50088	Identifier	name		49947	1					
ANR	50089	ExpressionStatement	efree ( lcname )	4338:5:158328:158341	49947	3	True				
ANR	50090	CallExpression	efree ( lcname )		49947	0					
ANR	50091	Callee	efree		49947	0					
ANR	50092	Identifier	efree		49947	0					
ANR	50093	ArgumentList	lcname		49947	1					
ANR	50094	Argument	lcname		49947	0					
ANR	50095	Identifier	lcname		49947	0					
ANR	50096	ExpressionStatement	++ j	4340:4:158353:158356	49947	1	True				
ANR	50097	UnaryExpression	++ j		49947	0					
ANR	50098	IncDec	++		49947	0					
ANR	50099	Identifier	j		49947	1					
ANR	50100	ExpressionStatement	++ i	4343:2:158369:158372	49947	1	True				
ANR	50101	UnaryExpression	++ i		49947	0					
ANR	50102	IncDec	++		49947	0					
ANR	50103	Identifier	i		49947	1					
ANR	50104	ReturnType	static void		49947	1					
ANR	50105	Identifier	zend_traits_compile_exclude_table		49947	2					
ANR	50106	ParameterList	"HashTable * exclude_table , zend_trait_precedence * * precedences , zend_class_entry * trait"		49947	3					
ANR	50107	Parameter	HashTable * exclude_table	4319:46:157485:157508	49947	0	True				
ANR	50108	ParameterType	HashTable *		49947	0					
ANR	50109	Identifier	exclude_table		49947	1					
ANR	50110	Parameter	zend_trait_precedence * * precedences	4319:72:157511:157545	49947	1	True				
ANR	50111	ParameterType	zend_trait_precedence * *		49947	0					
ANR	50112	Identifier	precedences		49947	1					
ANR	50113	Parameter	zend_class_entry * trait	4319:109:157548:157570	49947	2	True				
ANR	50114	ParameterType	zend_class_entry *		49947	0					
ANR	50115	Identifier	trait		49947	1					
ANR	50116	CFGEntryNode	ENTRY		49947		True				
ANR	50117	CFGExitNode	EXIT		49947		True				
ANR	50118	Symbol	precedences [ i ] -> exclude_from_classes		49947						
ANR	50119	Symbol	* * precedences		49947						
ANR	50120	Symbol	E_COMPILE_ERROR		49947						
ANR	50121	Symbol	exclude_table		49947						
ANR	50122	Symbol	precedences [ i ] -> trait_method		49947						
ANR	50123	Symbol	trait		49947						
ANR	50124	Symbol	* * * precedences		49947						
ANR	50125	Symbol	zend_str_tolower_dup		49947						
ANR	50126	Symbol	* trait		49947						
ANR	50127	Symbol	* * i		49947						
ANR	50128	Symbol	NULL		49947						
ANR	50129	Symbol	i		49947						
ANR	50130	Symbol	j		49947						
ANR	50131	Symbol	trait -> name		49947						
ANR	50132	Symbol	FAILURE		49947						
ANR	50133	Symbol	precedences [ i ] -> trait_method -> mname_len		49947						
ANR	50134	Symbol	precedences [ i ] -> trait_method -> method_name		49947						
ANR	50135	Symbol	* precedences [ i ] -> trait_method		49947						
ANR	50136	Symbol	* i		49947						
ANR	50137	Symbol	lcname		49947						
ANR	50138	Symbol	* precedences		49947						
ANR	50139	Symbol	* j		49947						
ANR	50140	Symbol	lcname_len		49947						
ANR	50141	Symbol	zend_hash_add		49947						
ANR	50142	Symbol	* precedences [ i ] -> exclude_from_classes		49947						
ANR	50143	Symbol	* * * i		49947						
ANR	50144	Symbol	precedences		49947						
ANR	50145	DeclStmt									
ANR	50146	Decl							zend_uint	zend_uint	i
ANR	50147	DeclStmt									
ANR	50148	Decl							HashTable	HashTable *	overriden
ANR	50149	DeclStmt									
ANR	50150	Decl							HashTable	HashTable	exclude_table
ANR	50151	DeclStmt									
ANR	50152	Decl							zend_trait_precedence	zend_trait_precedence * *	precedences
ANR	50153	Function	find_first_definition	4395:0:159914:160356							
ANR	50154	FunctionDef	"find_first_definition (zend_class_entry * ce , size_t current_trait , const char * prop_name , int prop_name_length , ulong prop_hash , zend_class_entry * coliding_ce)"		50153	0					
ANR	50155	CompoundStatement		4396:0:160108:160356	50153	0					
ANR	50156	IdentifierDeclStatement	size_t i ;	4397:1:160111:160119	50153	0	True				
ANR	50157	IdentifierDecl	i		50153	0					
ANR	50158	IdentifierDeclType	size_t		50153	0					
ANR	50159	Identifier	i		50153	1					
ANR	50160	IfStatement	if ( coliding_ce == ce )		50153	1					
ANR	50161	Condition	coliding_ce == ce	4399:5:160127:160143	50153	0	True				
ANR	50162	EqualityExpression	coliding_ce == ce		50153	0		==			
ANR	50163	Identifier	coliding_ce		50153	0					
ANR	50164	Identifier	ce		50153	1					
ANR	50165	CompoundStatement		4:24:37:37	50153	1					
ANR	50166	ForStatement	for ( i = 0 ; i < current_trait ; i ++ )		50153	0					
ANR	50167	ForInit	i = 0 ;	4400:7:160155:160160	50153	0	True				
ANR	50168	AssignmentExpression	i = 0		50153	0		=			
ANR	50169	Identifier	i		50153	0					
ANR	50170	PrimaryExpression	0		50153	1					
ANR	50171	Condition	i < current_trait	4400:14:160162:160178	50153	1	True				
ANR	50172	RelationalExpression	i < current_trait		50153	0		<			
ANR	50173	Identifier	i		50153	0					
ANR	50174	Identifier	current_trait		50153	1					
ANR	50175	PostIncDecOperationExpression	i ++	4400:33:160181:160183	50153	2	True				
ANR	50176	Identifier	i		50153	0					
ANR	50177	IncDec	++		50153	1					
ANR	50178	CompoundStatement		5:38:77:77	50153	3					
ANR	50179	IfStatement	"if ( zend_hash_quick_exists ( & ce -> traits [ i ] -> properties_info , prop_name , prop_name_length + 1 , prop_hash ) )"		50153	0					
ANR	50180	Condition	"zend_hash_quick_exists ( & ce -> traits [ i ] -> properties_info , prop_name , prop_name_length + 1 , prop_hash )"	4401:7:160195:160291	50153	0	True				
ANR	50181	CallExpression	"zend_hash_quick_exists ( & ce -> traits [ i ] -> properties_info , prop_name , prop_name_length + 1 , prop_hash )"		50153	0					
ANR	50182	Callee	zend_hash_quick_exists		50153	0					
ANR	50183	Identifier	zend_hash_quick_exists		50153	0					
ANR	50184	ArgumentList	& ce -> traits [ i ] -> properties_info		50153	1					
ANR	50185	Argument	& ce -> traits [ i ] -> properties_info		50153	0					
ANR	50186	UnaryOperationExpression	& ce -> traits [ i ] -> properties_info		50153	0					
ANR	50187	UnaryOperator	&		50153	0					
ANR	50188	PtrMemberAccess	ce -> traits [ i ] -> properties_info		50153	1					
ANR	50189	ArrayIndexing	ce -> traits [ i ]		50153	0					
ANR	50190	PtrMemberAccess	ce -> traits		50153	0					
ANR	50191	Identifier	ce		50153	0					
ANR	50192	Identifier	traits		50153	1					
ANR	50193	Identifier	i		50153	1					
ANR	50194	Identifier	properties_info		50153	1					
ANR	50195	Argument	prop_name		50153	1					
ANR	50196	Identifier	prop_name		50153	0					
ANR	50197	Argument	prop_name_length + 1		50153	2					
ANR	50198	AdditiveExpression	prop_name_length + 1		50153	0		+			
ANR	50199	Identifier	prop_name_length		50153	0					
ANR	50200	PrimaryExpression	1		50153	1					
ANR	50201	Argument	prop_hash		50153	3					
ANR	50202	Identifier	prop_hash		50153	0					
ANR	50203	CompoundStatement		6:106:185:185	50153	1					
ANR	50204	ReturnStatement	return ce -> traits [ i ] ;	4402:4:160300:160320	50153	0	True				
ANR	50205	ArrayIndexing	ce -> traits [ i ]		50153	0					
ANR	50206	PtrMemberAccess	ce -> traits		50153	0					
ANR	50207	Identifier	ce		50153	0					
ANR	50208	Identifier	traits		50153	1					
ANR	50209	Identifier	i		50153	1					
ANR	50210	ReturnStatement	return coliding_ce ;	4407:1:160336:160354	50153	2	True				
ANR	50211	Identifier	coliding_ce		50153	0					
ANR	50212	ReturnType	static zend_class_entry *		50153	1					
ANR	50213	Identifier	find_first_definition		50153	2					
ANR	50214	ParameterList	"zend_class_entry * ce , size_t current_trait , const char * prop_name , int prop_name_length , ulong prop_hash , zend_class_entry * coliding_ce"		50153	3					
ANR	50215	Parameter	zend_class_entry * ce	4395:47:159961:159980	50153	0	True				
ANR	50216	ParameterType	zend_class_entry *		50153	0					
ANR	50217	Identifier	ce		50153	1					
ANR	50218	Parameter	size_t current_trait	4395:69:159983:160002	50153	1	True				
ANR	50219	ParameterType	size_t		50153	0					
ANR	50220	Identifier	current_trait		50153	1					
ANR	50221	Parameter	const char * prop_name	4395:91:160005:160025	50153	2	True				
ANR	50222	ParameterType	const char *		50153	0					
ANR	50223	Identifier	prop_name		50153	1					
ANR	50224	Parameter	int prop_name_length	4395:114:160028:160047	50153	3	True				
ANR	50225	ParameterType	int		50153	0					
ANR	50226	Identifier	prop_name_length		50153	1					
ANR	50227	Parameter	ulong prop_hash	4395:136:160050:160064	50153	4	True				
ANR	50228	ParameterType	ulong		50153	0					
ANR	50229	Identifier	prop_hash		50153	1					
ANR	50230	Parameter	zend_class_entry * coliding_ce	4395:153:160067:160095	50153	5	True				
ANR	50231	ParameterType	zend_class_entry *		50153	0					
ANR	50232	Identifier	coliding_ce		50153	1					
ANR	50233	CFGEntryNode	ENTRY		50153		True				
ANR	50234	CFGExitNode	EXIT		50153		True				
ANR	50235	Symbol	ce		50153						
ANR	50236	Symbol	coliding_ce		50153						
ANR	50237	Symbol	i		50153						
ANR	50238	Symbol	* ce		50153						
ANR	50239	Symbol	* * ce		50153						
ANR	50240	Symbol	ce -> traits		50153						
ANR	50241	Symbol	& ce -> traits [ i ] -> properties_info		50153						
ANR	50242	Symbol	prop_name		50153						
ANR	50243	Symbol	* ce -> traits		50153						
ANR	50244	Symbol	* i		50153						
ANR	50245	Symbol	current_trait		50153						
ANR	50246	Symbol	zend_hash_quick_exists		50153						
ANR	50247	Symbol	prop_name_length		50153						
ANR	50248	Symbol	prop_hash		50153						
ANR	50249	DeclStmt									
ANR	50250	Decl							size_t	size_t	i
ANR	50251	DeclStmt									
ANR	50252	Decl							zend_property_info	zend_property_info *	property_info
ANR	50253	DeclStmt									
ANR	50254	Decl							zend_property_info	zend_property_info *	coliding_prop
ANR	50255	DeclStmt									
ANR	50256	Decl							zval	zval	compare_result
ANR	50257	DeclStmt									
ANR	50258	Decl							const char	const char *	prop_name
ANR	50259	DeclStmt									
ANR	50260	Decl							int	int	prop_name_length
ANR	50261	DeclStmt									
ANR	50262	Decl							ulong	ulong	prop_hash
ANR	50263	DeclStmt									
ANR	50264	Decl							const char	const char *	class_name_unused
ANR	50265	DeclStmt									
ANR	50266	Decl							zend_bool	zend_bool	not_compatible
ANR	50267	DeclStmt									
ANR	50268	Decl							zval	zval *	prop_value
ANR	50269	DeclStmt									
ANR	50270	Decl							char	char *	doc_comment
ANR	50271	DeclStmt									
ANR	50272	Decl							zend_uint	zend_uint	flags
ANR	50273	DeclStmt									
ANR	50274	Decl							int	int	i
ANR	50275	DeclStmt									
ANR	50276	Decl							zend_trait_alias	zend_trait_alias *	cur_alias
ANR	50277	DeclStmt									
ANR	50278	Decl							char	char *	lc_method_name
ANR	50279	Function	do_bind_function	4591:0:167485:168898							
ANR	50280	FunctionDef	"do_bind_function (const zend_op_array * op_array , zend_op * opline , HashTable * function_table , zend_bool compile_time)"		50279	0					
ANR	50281	CompoundStatement		4592:0:167624:168898	50279	0					
ANR	50282	IdentifierDeclStatement	zend_function * function ;	4593:1:167627:167650	50279	0	True				
ANR	50283	IdentifierDecl	* function		50279	0					
ANR	50284	IdentifierDeclType	zend_function *		50279	0					
ANR	50285	Identifier	function		50279	1					
ANR	50286	IdentifierDeclStatement	"zval * op1 , * op2 ;"	4594:1:167653:167668	50279	1	True				
ANR	50287	IdentifierDecl	* op1		50279	0					
ANR	50288	IdentifierDeclType	zval *		50279	0					
ANR	50289	Identifier	op1		50279	1					
ANR	50290	IdentifierDecl	* op2		50279	1					
ANR	50291	IdentifierDeclType	zval *		50279	0					
ANR	50292	Identifier	op2		50279	1					
ANR	50293	IfStatement	if ( compile_time )		50279	2					
ANR	50294	Condition	compile_time	4596:5:167676:167687	50279	0	True				
ANR	50295	Identifier	compile_time		50279	0					
ANR	50296	CompoundStatement		5:19:65:65	50279	1					
ANR	50297	ExpressionStatement	"op1 = & CONSTANT_EX ( op_array , opline -> op1 . constant )"	4597:2:167694:167744	50279	0	True				
ANR	50298	AssignmentExpression	"op1 = & CONSTANT_EX ( op_array , opline -> op1 . constant )"		50279	0		=			
ANR	50299	Identifier	op1		50279	0					
ANR	50300	UnaryOperationExpression	"& CONSTANT_EX ( op_array , opline -> op1 . constant )"		50279	1					
ANR	50301	UnaryOperator	&		50279	0					
ANR	50302	CallExpression	"CONSTANT_EX ( op_array , opline -> op1 . constant )"		50279	1					
ANR	50303	Callee	CONSTANT_EX		50279	0					
ANR	50304	Identifier	CONSTANT_EX		50279	0					
ANR	50305	ArgumentList	op_array		50279	1					
ANR	50306	Argument	op_array		50279	0					
ANR	50307	Identifier	op_array		50279	0					
ANR	50308	Argument	opline -> op1 . constant		50279	1					
ANR	50309	MemberAccess	opline -> op1 . constant		50279	0					
ANR	50310	PtrMemberAccess	opline -> op1		50279	0					
ANR	50311	Identifier	opline		50279	0					
ANR	50312	Identifier	op1		50279	1					
ANR	50313	Identifier	constant		50279	1					
ANR	50314	ExpressionStatement	"op2 = & CONSTANT_EX ( op_array , opline -> op2 . constant )"	4598:2:167748:167798	50279	1	True				
ANR	50315	AssignmentExpression	"op2 = & CONSTANT_EX ( op_array , opline -> op2 . constant )"		50279	0		=			
ANR	50316	Identifier	op2		50279	0					
ANR	50317	UnaryOperationExpression	"& CONSTANT_EX ( op_array , opline -> op2 . constant )"		50279	1					
ANR	50318	UnaryOperator	&		50279	0					
ANR	50319	CallExpression	"CONSTANT_EX ( op_array , opline -> op2 . constant )"		50279	1					
ANR	50320	Callee	CONSTANT_EX		50279	0					
ANR	50321	Identifier	CONSTANT_EX		50279	0					
ANR	50322	ArgumentList	op_array		50279	1					
ANR	50323	Argument	op_array		50279	0					
ANR	50324	Identifier	op_array		50279	0					
ANR	50325	Argument	opline -> op2 . constant		50279	1					
ANR	50326	MemberAccess	opline -> op2 . constant		50279	0					
ANR	50327	PtrMemberAccess	opline -> op2		50279	0					
ANR	50328	Identifier	opline		50279	0					
ANR	50329	Identifier	op2		50279	1					
ANR	50330	Identifier	constant		50279	1					
ANR	50331	ElseStatement	else		50279	0					
ANR	50332	CompoundStatement		8:8:183:183	50279	0					
ANR	50333	ExpressionStatement	op1 = opline -> op1 . zv	4600:2:167812:167832	50279	0	True				
ANR	50334	AssignmentExpression	op1 = opline -> op1 . zv		50279	0		=			
ANR	50335	Identifier	op1		50279	0					
ANR	50336	MemberAccess	opline -> op1 . zv		50279	1					
ANR	50337	PtrMemberAccess	opline -> op1		50279	0					
ANR	50338	Identifier	opline		50279	0					
ANR	50339	Identifier	op1		50279	1					
ANR	50340	Identifier	zv		50279	1					
ANR	50341	ExpressionStatement	op2 = opline -> op2 . zv	4601:2:167836:167856	50279	1	True				
ANR	50342	AssignmentExpression	op2 = opline -> op2 . zv		50279	0		=			
ANR	50343	Identifier	op2		50279	0					
ANR	50344	MemberAccess	opline -> op2 . zv		50279	1					
ANR	50345	PtrMemberAccess	opline -> op2		50279	0					
ANR	50346	Identifier	opline		50279	0					
ANR	50347	Identifier	op2		50279	1					
ANR	50348	Identifier	zv		50279	1					
ANR	50349	ExpressionStatement	"zend_hash_quick_find ( function_table , Z_STRVAL_P ( op1 ) , Z_STRLEN_P ( op1 ) , Z_HASH_P ( op1 ) , ( void * ) & function )"	4604:1:167863:167968	50279	3	True				
ANR	50350	CallExpression	"zend_hash_quick_find ( function_table , Z_STRVAL_P ( op1 ) , Z_STRLEN_P ( op1 ) , Z_HASH_P ( op1 ) , ( void * ) & function )"		50279	0					
ANR	50351	Callee	zend_hash_quick_find		50279	0					
ANR	50352	Identifier	zend_hash_quick_find		50279	0					
ANR	50353	ArgumentList	function_table		50279	1					
ANR	50354	Argument	function_table		50279	0					
ANR	50355	Identifier	function_table		50279	0					
ANR	50356	Argument	Z_STRVAL_P ( op1 )		50279	1					
ANR	50357	CallExpression	Z_STRVAL_P ( op1 )		50279	0					
ANR	50358	Callee	Z_STRVAL_P		50279	0					
ANR	50359	Identifier	Z_STRVAL_P		50279	0					
ANR	50360	ArgumentList	op1		50279	1					
ANR	50361	Argument	op1		50279	0					
ANR	50362	Identifier	op1		50279	0					
ANR	50363	Argument	Z_STRLEN_P ( op1 )		50279	2					
ANR	50364	CallExpression	Z_STRLEN_P ( op1 )		50279	0					
ANR	50365	Callee	Z_STRLEN_P		50279	0					
ANR	50366	Identifier	Z_STRLEN_P		50279	0					
ANR	50367	ArgumentList	op1		50279	1					
ANR	50368	Argument	op1		50279	0					
ANR	50369	Identifier	op1		50279	0					
ANR	50370	Argument	Z_HASH_P ( op1 )		50279	3					
ANR	50371	CallExpression	Z_HASH_P ( op1 )		50279	0					
ANR	50372	Callee	Z_HASH_P		50279	0					
ANR	50373	Identifier	Z_HASH_P		50279	0					
ANR	50374	ArgumentList	op1		50279	1					
ANR	50375	Argument	op1		50279	0					
ANR	50376	Identifier	op1		50279	0					
ANR	50377	Argument	( void * ) & function		50279	4					
ANR	50378	CastExpression	( void * ) & function		50279	0					
ANR	50379	CastTarget	void *		50279	0					
ANR	50380	UnaryOperationExpression	& function		50279	1					
ANR	50381	UnaryOperator	&		50279	0					
ANR	50382	Identifier	function		50279	1					
ANR	50383	IfStatement	"if ( zend_hash_quick_add ( function_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , function , sizeof ( zend_function ) , NULL ) == FAILURE )"		50279	4					
ANR	50384	Condition	"zend_hash_quick_add ( function_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , function , sizeof ( zend_function ) , NULL ) == FAILURE"	4605:5:167975:168108	50279	0	True				
ANR	50385	EqualityExpression	"zend_hash_quick_add ( function_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , function , sizeof ( zend_function ) , NULL ) == FAILURE"		50279	0		==			
ANR	50386	CallExpression	"zend_hash_quick_add ( function_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , function , sizeof ( zend_function ) , NULL )"		50279	0					
ANR	50387	Callee	zend_hash_quick_add		50279	0					
ANR	50388	Identifier	zend_hash_quick_add		50279	0					
ANR	50389	ArgumentList	function_table		50279	1					
ANR	50390	Argument	function_table		50279	0					
ANR	50391	Identifier	function_table		50279	0					
ANR	50392	Argument	Z_STRVAL_P ( op2 )		50279	1					
ANR	50393	CallExpression	Z_STRVAL_P ( op2 )		50279	0					
ANR	50394	Callee	Z_STRVAL_P		50279	0					
ANR	50395	Identifier	Z_STRVAL_P		50279	0					
ANR	50396	ArgumentList	op2		50279	1					
ANR	50397	Argument	op2		50279	0					
ANR	50398	Identifier	op2		50279	0					
ANR	50399	Argument	Z_STRLEN_P ( op2 ) + 1		50279	2					
ANR	50400	AdditiveExpression	Z_STRLEN_P ( op2 ) + 1		50279	0		+			
ANR	50401	CallExpression	Z_STRLEN_P ( op2 )		50279	0					
ANR	50402	Callee	Z_STRLEN_P		50279	0					
ANR	50403	Identifier	Z_STRLEN_P		50279	0					
ANR	50404	ArgumentList	op2		50279	1					
ANR	50405	Argument	op2		50279	0					
ANR	50406	Identifier	op2		50279	0					
ANR	50407	PrimaryExpression	1		50279	1					
ANR	50408	Argument	Z_HASH_P ( op2 )		50279	3					
ANR	50409	CallExpression	Z_HASH_P ( op2 )		50279	0					
ANR	50410	Callee	Z_HASH_P		50279	0					
ANR	50411	Identifier	Z_HASH_P		50279	0					
ANR	50412	ArgumentList	op2		50279	1					
ANR	50413	Argument	op2		50279	0					
ANR	50414	Identifier	op2		50279	0					
ANR	50415	Argument	function		50279	4					
ANR	50416	Identifier	function		50279	0					
ANR	50417	Argument	sizeof ( zend_function )		50279	5					
ANR	50418	SizeofExpression	sizeof ( zend_function )		50279	0					
ANR	50419	Sizeof	sizeof		50279	0					
ANR	50420	SizeofOperand	zend_function		50279	1					
ANR	50421	Argument	NULL		50279	6					
ANR	50422	Identifier	NULL		50279	0					
ANR	50423	Identifier	FAILURE		50279	1					
ANR	50424	CompoundStatement		16:2:552:579	50279	1					
ANR	50425	IdentifierDeclStatement	int error_level = compile_time ? E_COMPILE_ERROR : E_ERROR ;	4606:2:168115:168173	50279	0	True				
ANR	50426	IdentifierDecl	error_level = compile_time ? E_COMPILE_ERROR : E_ERROR		50279	0					
ANR	50427	IdentifierDeclType	int		50279	0					
ANR	50428	Identifier	error_level		50279	1					
ANR	50429	AssignmentExpression	error_level = compile_time ? E_COMPILE_ERROR : E_ERROR		50279	2		=			
ANR	50430	Identifier	error_level		50279	0					
ANR	50431	ConditionalExpression	compile_time ? E_COMPILE_ERROR : E_ERROR		50279	1					
ANR	50432	Condition	compile_time		50279	0					
ANR	50433	Identifier	compile_time		50279	0					
ANR	50434	Identifier	E_COMPILE_ERROR		50279	1					
ANR	50435	Identifier	E_ERROR		50279	2					
ANR	50436	IdentifierDeclStatement	zend_function * old_function ;	4607:2:168177:168204	50279	1	True				
ANR	50437	IdentifierDecl	* old_function		50279	0					
ANR	50438	IdentifierDeclType	zend_function *		50279	0					
ANR	50439	Identifier	old_function		50279	1					
ANR	50440	IfStatement	"if ( zend_hash_quick_find ( function_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , ( void * ) & old_function ) == SUCCESS && old_function -> type == ZEND_USER_FUNCTION && old_function -> op_array . last > 0 )"		50279	2					
ANR	50441	Condition	"zend_hash_quick_find ( function_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , ( void * ) & old_function ) == SUCCESS && old_function -> type == ZEND_USER_FUNCTION && old_function -> op_array . last > 0"	4609:6:168213:168417	50279	0	True				
ANR	50442	AndExpression	"zend_hash_quick_find ( function_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , ( void * ) & old_function ) == SUCCESS && old_function -> type == ZEND_USER_FUNCTION && old_function -> op_array . last > 0"		50279	0		&&			
ANR	50443	EqualityExpression	"zend_hash_quick_find ( function_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , ( void * ) & old_function ) == SUCCESS"		50279	0		==			
ANR	50444	CallExpression	"zend_hash_quick_find ( function_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , ( void * ) & old_function )"		50279	0					
ANR	50445	Callee	zend_hash_quick_find		50279	0					
ANR	50446	Identifier	zend_hash_quick_find		50279	0					
ANR	50447	ArgumentList	function_table		50279	1					
ANR	50448	Argument	function_table		50279	0					
ANR	50449	Identifier	function_table		50279	0					
ANR	50450	Argument	Z_STRVAL_P ( op2 )		50279	1					
ANR	50451	CallExpression	Z_STRVAL_P ( op2 )		50279	0					
ANR	50452	Callee	Z_STRVAL_P		50279	0					
ANR	50453	Identifier	Z_STRVAL_P		50279	0					
ANR	50454	ArgumentList	op2		50279	1					
ANR	50455	Argument	op2		50279	0					
ANR	50456	Identifier	op2		50279	0					
ANR	50457	Argument	Z_STRLEN_P ( op2 ) + 1		50279	2					
ANR	50458	AdditiveExpression	Z_STRLEN_P ( op2 ) + 1		50279	0		+			
ANR	50459	CallExpression	Z_STRLEN_P ( op2 )		50279	0					
ANR	50460	Callee	Z_STRLEN_P		50279	0					
ANR	50461	Identifier	Z_STRLEN_P		50279	0					
ANR	50462	ArgumentList	op2		50279	1					
ANR	50463	Argument	op2		50279	0					
ANR	50464	Identifier	op2		50279	0					
ANR	50465	PrimaryExpression	1		50279	1					
ANR	50466	Argument	Z_HASH_P ( op2 )		50279	3					
ANR	50467	CallExpression	Z_HASH_P ( op2 )		50279	0					
ANR	50468	Callee	Z_HASH_P		50279	0					
ANR	50469	Identifier	Z_HASH_P		50279	0					
ANR	50470	ArgumentList	op2		50279	1					
ANR	50471	Argument	op2		50279	0					
ANR	50472	Identifier	op2		50279	0					
ANR	50473	Argument	( void * ) & old_function		50279	4					
ANR	50474	CastExpression	( void * ) & old_function		50279	0					
ANR	50475	CastTarget	void *		50279	0					
ANR	50476	UnaryOperationExpression	& old_function		50279	1					
ANR	50477	UnaryOperator	&		50279	0					
ANR	50478	Identifier	old_function		50279	1					
ANR	50479	Identifier	SUCCESS		50279	1					
ANR	50480	AndExpression	old_function -> type == ZEND_USER_FUNCTION && old_function -> op_array . last > 0		50279	1		&&			
ANR	50481	EqualityExpression	old_function -> type == ZEND_USER_FUNCTION		50279	0		==			
ANR	50482	PtrMemberAccess	old_function -> type		50279	0					
ANR	50483	Identifier	old_function		50279	0					
ANR	50484	Identifier	type		50279	1					
ANR	50485	Identifier	ZEND_USER_FUNCTION		50279	1					
ANR	50486	RelationalExpression	old_function -> op_array . last > 0		50279	1		>			
ANR	50487	MemberAccess	old_function -> op_array . last		50279	0					
ANR	50488	PtrMemberAccess	old_function -> op_array		50279	0					
ANR	50489	Identifier	old_function		50279	0					
ANR	50490	Identifier	op_array		50279	1					
ANR	50491	Identifier	last		50279	1					
ANR	50492	PrimaryExpression	0		50279	1					
ANR	50493	CompoundStatement		20:39:795:795	50279	1					
ANR	50494	ExpressionStatement	"zend_error ( error_level , ""Cannot redeclare %s() (previously declared in %s:%d)"" , function -> common . function_name , old_function -> op_array . filename , old_function -> op_array . opcodes [ 0 ] . lineno )"	4612:3:168425:168629	50279	0	True				
ANR	50495	CallExpression	"zend_error ( error_level , ""Cannot redeclare %s() (previously declared in %s:%d)"" , function -> common . function_name , old_function -> op_array . filename , old_function -> op_array . opcodes [ 0 ] . lineno )"		50279	0					
ANR	50496	Callee	zend_error		50279	0					
ANR	50497	Identifier	zend_error		50279	0					
ANR	50498	ArgumentList	error_level		50279	1					
ANR	50499	Argument	error_level		50279	0					
ANR	50500	Identifier	error_level		50279	0					
ANR	50501	Argument	"""Cannot redeclare %s() (previously declared in %s:%d)"""		50279	1					
ANR	50502	PrimaryExpression	"""Cannot redeclare %s() (previously declared in %s:%d)"""		50279	0					
ANR	50503	Argument	function -> common . function_name		50279	2					
ANR	50504	MemberAccess	function -> common . function_name		50279	0					
ANR	50505	PtrMemberAccess	function -> common		50279	0					
ANR	50506	Identifier	function		50279	0					
ANR	50507	Identifier	common		50279	1					
ANR	50508	Identifier	function_name		50279	1					
ANR	50509	Argument	old_function -> op_array . filename		50279	3					
ANR	50510	MemberAccess	old_function -> op_array . filename		50279	0					
ANR	50511	PtrMemberAccess	old_function -> op_array		50279	0					
ANR	50512	Identifier	old_function		50279	0					
ANR	50513	Identifier	op_array		50279	1					
ANR	50514	Identifier	filename		50279	1					
ANR	50515	Argument	old_function -> op_array . opcodes [ 0 ] . lineno		50279	4					
ANR	50516	MemberAccess	old_function -> op_array . opcodes [ 0 ] . lineno		50279	0					
ANR	50517	ArrayIndexing	old_function -> op_array . opcodes [ 0 ]		50279	0					
ANR	50518	MemberAccess	old_function -> op_array . opcodes		50279	0					
ANR	50519	PtrMemberAccess	old_function -> op_array		50279	0					
ANR	50520	Identifier	old_function		50279	0					
ANR	50521	Identifier	op_array		50279	1					
ANR	50522	Identifier	opcodes		50279	1					
ANR	50523	PrimaryExpression	0		50279	1					
ANR	50524	Identifier	lineno		50279	1					
ANR	50525	ElseStatement	else		50279	0					
ANR	50526	CompoundStatement		25:9:1015:1015	50279	0					
ANR	50527	ExpressionStatement	"zend_error ( error_level , ""Cannot redeclare %s()"" , function -> common . function_name )"	4617:3:168645:168725	50279	0	True				
ANR	50528	CallExpression	"zend_error ( error_level , ""Cannot redeclare %s()"" , function -> common . function_name )"		50279	0					
ANR	50529	Callee	zend_error		50279	0					
ANR	50530	Identifier	zend_error		50279	0					
ANR	50531	ArgumentList	error_level		50279	1					
ANR	50532	Argument	error_level		50279	0					
ANR	50533	Identifier	error_level		50279	0					
ANR	50534	Argument	"""Cannot redeclare %s()"""		50279	1					
ANR	50535	PrimaryExpression	"""Cannot redeclare %s()"""		50279	0					
ANR	50536	Argument	function -> common . function_name		50279	2					
ANR	50537	MemberAccess	function -> common . function_name		50279	0					
ANR	50538	PtrMemberAccess	function -> common		50279	0					
ANR	50539	Identifier	function		50279	0					
ANR	50540	Identifier	common		50279	1					
ANR	50541	Identifier	function_name		50279	1					
ANR	50542	ReturnStatement	return FAILURE ;	4619:2:168733:168747	50279	3	True				
ANR	50543	Identifier	FAILURE		50279	0					
ANR	50544	ElseStatement	else		50279	0					
ANR	50545	CompoundStatement		29:8:1132:1132	50279	0					
ANR	50546	ExpressionStatement	( * function -> op_array . refcount ) ++	4621:2:168761:168793	50279	0	True				
ANR	50547	PostIncDecOperationExpression	( * function -> op_array . refcount ) ++		50279	0					
ANR	50548	UnaryOperationExpression	* function -> op_array . refcount		50279	0					
ANR	50549	UnaryOperator	*		50279	0					
ANR	50550	MemberAccess	function -> op_array . refcount		50279	1					
ANR	50551	PtrMemberAccess	function -> op_array		50279	0					
ANR	50552	Identifier	function		50279	0					
ANR	50553	Identifier	op_array		50279	1					
ANR	50554	Identifier	refcount		50279	1					
ANR	50555	IncDec	++		50279	1					
ANR	50556	ExpressionStatement	function -> op_array . static_variables = NULL	4622:2:168797:168839	50279	1	True				
ANR	50557	AssignmentExpression	function -> op_array . static_variables = NULL		50279	0		=			
ANR	50558	MemberAccess	function -> op_array . static_variables		50279	0					
ANR	50559	PtrMemberAccess	function -> op_array		50279	0					
ANR	50560	Identifier	function		50279	0					
ANR	50561	Identifier	op_array		50279	1					
ANR	50562	Identifier	static_variables		50279	1					
ANR	50563	Identifier	NULL		50279	1					
ANR	50564	ReturnStatement	return SUCCESS ;	4623:2:168879:168893	50279	2	True				
ANR	50565	Identifier	SUCCESS		50279	0					
ANR	50566	ReturnType	ZEND_API int		50279	1					
ANR	50567	Identifier	do_bind_function		50279	2					
ANR	50568	ParameterList	"const zend_op_array * op_array , zend_op * opline , HashTable * function_table , zend_bool compile_time"		50279	3					
ANR	50569	Parameter	const zend_op_array * op_array	4591:30:167515:167543	50279	0	True				
ANR	50570	ParameterType	const zend_op_array *		50279	0					
ANR	50571	Identifier	op_array		50279	1					
ANR	50572	Parameter	zend_op * opline	4591:61:167546:167560	50279	1	True				
ANR	50573	ParameterType	zend_op *		50279	0					
ANR	50574	Identifier	opline		50279	1					
ANR	50575	Parameter	HashTable * function_table	4591:78:167563:167587	50279	2	True				
ANR	50576	ParameterType	HashTable *		50279	0					
ANR	50577	Identifier	function_table		50279	1					
ANR	50578	Parameter	zend_bool compile_time	4591:105:167590:167611	50279	3	True				
ANR	50579	ParameterType	zend_bool		50279	0					
ANR	50580	Identifier	compile_time		50279	1					
ANR	50581	CFGEntryNode	ENTRY		50279		True				
ANR	50582	CFGExitNode	EXIT		50279		True				
ANR	50583	Symbol	compile_time		50279						
ANR	50584	Symbol	E_COMPILE_ERROR		50279						
ANR	50585	Symbol	old_function -> op_array . last		50279						
ANR	50586	Symbol	* old_function -> op_array . opcodes		50279						
ANR	50587	Symbol	* old_function		50279						
ANR	50588	Symbol	function -> op_array . static_variables		50279						
ANR	50589	Symbol	opline		50279						
ANR	50590	Symbol	old_function		50279						
ANR	50591	Symbol	ZEND_USER_FUNCTION		50279						
ANR	50592	Symbol	function		50279						
ANR	50593	Symbol	& old_function		50279						
ANR	50594	Symbol	old_function -> op_array . opcodes [ 0 ] . lineno		50279						
ANR	50595	Symbol	NULL		50279						
ANR	50596	Symbol	function -> op_array . refcount		50279						
ANR	50597	Symbol	function_table		50279						
ANR	50598	Symbol	opline -> op1		50279						
ANR	50599	Symbol	* function -> op_array . refcount		50279						
ANR	50600	Symbol	opline -> op2		50279						
ANR	50601	Symbol	error_level		50279						
ANR	50602	Symbol	old_function -> op_array . filename		50279						
ANR	50603	Symbol	& CONSTANT_EX		50279						
ANR	50604	Symbol	* old_function -> op_array		50279						
ANR	50605	Symbol	opline -> op1 . zv		50279						
ANR	50606	Symbol	function -> common . function_name		50279						
ANR	50607	Symbol	function -> op_array		50279						
ANR	50608	Symbol	zend_hash_quick_find		50279						
ANR	50609	Symbol	zend_hash_quick_add		50279						
ANR	50610	Symbol	opline -> op1 . constant		50279						
ANR	50611	Symbol	Z_HASH_P		50279						
ANR	50612	Symbol	& function		50279						
ANR	50613	Symbol	Z_STRLEN_P		50279						
ANR	50614	Symbol	* * old_function		50279						
ANR	50615	Symbol	opline -> op2 . zv		50279						
ANR	50616	Symbol	old_function -> op_array . opcodes		50279						
ANR	50617	Symbol	* * function		50279						
ANR	50618	Symbol	SUCCESS		50279						
ANR	50619	Symbol	* function -> op_array		50279						
ANR	50620	Symbol	function -> common		50279						
ANR	50621	Symbol	* function		50279						
ANR	50622	Symbol	Z_STRVAL_P		50279						
ANR	50623	Symbol	FAILURE		50279						
ANR	50624	Symbol	op2		50279						
ANR	50625	Symbol	op1		50279						
ANR	50626	Symbol	E_ERROR		50279						
ANR	50627	Symbol	* opline		50279						
ANR	50628	Symbol	opline -> op2 . constant		50279						
ANR	50629	Symbol	old_function -> type		50279						
ANR	50630	Symbol	old_function -> op_array		50279						
ANR	50631	Symbol	op_array		50279						
ANR	50632	DeclStmt									
ANR	50633	Decl							zend_trait_method_reference	zend_trait_method_reference *	method_ref
ANR	50634	DeclStmt									
ANR	50635	Decl							zend_class_entry	zend_class_entry *	ce
ANR	50636	DeclStmt									
ANR	50637	Decl							zend_trait_alias	zend_trait_alias *	trait_alias
ANR	50638	DeclStmt									
ANR	50639	Decl							zend_class_entry	zend_class_entry *	ce
ANR	50640	DeclStmt									
ANR	50641	Decl							zend_trait_precedence	zend_trait_precedence *	trait_precedence
ANR	50642	Function	do_bind_class	4693:0:171293:172685							
ANR	50643	FunctionDef	"do_bind_class (const zend_op_array * op_array , const zend_op * opline , HashTable * class_table , zend_bool compile_time TSRMLS_DC)"		50642	0					
ANR	50644	CompoundStatement		4694:0:171456:172685	50642	0					
ANR	50645	IdentifierDeclStatement	"zend_class_entry * ce , * * pce ;"	4695:1:171459:171486	50642	0	True				
ANR	50646	IdentifierDecl	* ce		50642	0					
ANR	50647	IdentifierDeclType	zend_class_entry *		50642	0					
ANR	50648	Identifier	ce		50642	1					
ANR	50649	IdentifierDecl	* * pce		50642	1					
ANR	50650	IdentifierDeclType	zend_class_entry * *		50642	0					
ANR	50651	Identifier	pce		50642	1					
ANR	50652	IdentifierDeclStatement	"zval * op1 , * op2 ;"	4696:1:171489:171504	50642	1	True				
ANR	50653	IdentifierDecl	* op1		50642	0					
ANR	50654	IdentifierDeclType	zval *		50642	0					
ANR	50655	Identifier	op1		50642	1					
ANR	50656	IdentifierDecl	* op2		50642	1					
ANR	50657	IdentifierDeclType	zval *		50642	0					
ANR	50658	Identifier	op2		50642	1					
ANR	50659	IfStatement	if ( compile_time )		50642	2					
ANR	50660	Condition	compile_time	4698:5:171512:171523	50642	0	True				
ANR	50661	Identifier	compile_time		50642	0					
ANR	50662	CompoundStatement		5:19:69:69	50642	1					
ANR	50663	ExpressionStatement	"op1 = & CONSTANT_EX ( op_array , opline -> op1 . constant )"	4699:2:171530:171580	50642	0	True				
ANR	50664	AssignmentExpression	"op1 = & CONSTANT_EX ( op_array , opline -> op1 . constant )"		50642	0		=			
ANR	50665	Identifier	op1		50642	0					
ANR	50666	UnaryOperationExpression	"& CONSTANT_EX ( op_array , opline -> op1 . constant )"		50642	1					
ANR	50667	UnaryOperator	&		50642	0					
ANR	50668	CallExpression	"CONSTANT_EX ( op_array , opline -> op1 . constant )"		50642	1					
ANR	50669	Callee	CONSTANT_EX		50642	0					
ANR	50670	Identifier	CONSTANT_EX		50642	0					
ANR	50671	ArgumentList	op_array		50642	1					
ANR	50672	Argument	op_array		50642	0					
ANR	50673	Identifier	op_array		50642	0					
ANR	50674	Argument	opline -> op1 . constant		50642	1					
ANR	50675	MemberAccess	opline -> op1 . constant		50642	0					
ANR	50676	PtrMemberAccess	opline -> op1		50642	0					
ANR	50677	Identifier	opline		50642	0					
ANR	50678	Identifier	op1		50642	1					
ANR	50679	Identifier	constant		50642	1					
ANR	50680	ExpressionStatement	"op2 = & CONSTANT_EX ( op_array , opline -> op2 . constant )"	4700:2:171584:171634	50642	1	True				
ANR	50681	AssignmentExpression	"op2 = & CONSTANT_EX ( op_array , opline -> op2 . constant )"		50642	0		=			
ANR	50682	Identifier	op2		50642	0					
ANR	50683	UnaryOperationExpression	"& CONSTANT_EX ( op_array , opline -> op2 . constant )"		50642	1					
ANR	50684	UnaryOperator	&		50642	0					
ANR	50685	CallExpression	"CONSTANT_EX ( op_array , opline -> op2 . constant )"		50642	1					
ANR	50686	Callee	CONSTANT_EX		50642	0					
ANR	50687	Identifier	CONSTANT_EX		50642	0					
ANR	50688	ArgumentList	op_array		50642	1					
ANR	50689	Argument	op_array		50642	0					
ANR	50690	Identifier	op_array		50642	0					
ANR	50691	Argument	opline -> op2 . constant		50642	1					
ANR	50692	MemberAccess	opline -> op2 . constant		50642	0					
ANR	50693	PtrMemberAccess	opline -> op2		50642	0					
ANR	50694	Identifier	opline		50642	0					
ANR	50695	Identifier	op2		50642	1					
ANR	50696	Identifier	constant		50642	1					
ANR	50697	ElseStatement	else		50642	0					
ANR	50698	CompoundStatement		8:8:187:187	50642	0					
ANR	50699	ExpressionStatement	op1 = opline -> op1 . zv	4702:2:171648:171668	50642	0	True				
ANR	50700	AssignmentExpression	op1 = opline -> op1 . zv		50642	0		=			
ANR	50701	Identifier	op1		50642	0					
ANR	50702	MemberAccess	opline -> op1 . zv		50642	1					
ANR	50703	PtrMemberAccess	opline -> op1		50642	0					
ANR	50704	Identifier	opline		50642	0					
ANR	50705	Identifier	op1		50642	1					
ANR	50706	Identifier	zv		50642	1					
ANR	50707	ExpressionStatement	op2 = opline -> op2 . zv	4703:2:171672:171692	50642	1	True				
ANR	50708	AssignmentExpression	op2 = opline -> op2 . zv		50642	0		=			
ANR	50709	Identifier	op2		50642	0					
ANR	50710	MemberAccess	opline -> op2 . zv		50642	1					
ANR	50711	PtrMemberAccess	opline -> op2		50642	0					
ANR	50712	Identifier	opline		50642	0					
ANR	50713	Identifier	op2		50642	1					
ANR	50714	Identifier	zv		50642	1					
ANR	50715	IfStatement	"if ( zend_hash_quick_find ( class_table , Z_STRVAL_P ( op1 ) , Z_STRLEN_P ( op1 ) , Z_HASH_P ( op1 ) , ( void * * ) & pce ) == FAILURE )"		50642	3					
ANR	50716	Condition	"zend_hash_quick_find ( class_table , Z_STRVAL_P ( op1 ) , Z_STRLEN_P ( op1 ) , Z_HASH_P ( op1 ) , ( void * * ) & pce ) == FAILURE"	4705:5:171702:171808	50642	0	True				
ANR	50717	EqualityExpression	"zend_hash_quick_find ( class_table , Z_STRVAL_P ( op1 ) , Z_STRLEN_P ( op1 ) , Z_HASH_P ( op1 ) , ( void * * ) & pce ) == FAILURE"		50642	0		==			
ANR	50718	CallExpression	"zend_hash_quick_find ( class_table , Z_STRVAL_P ( op1 ) , Z_STRLEN_P ( op1 ) , Z_HASH_P ( op1 ) , ( void * * ) & pce )"		50642	0					
ANR	50719	Callee	zend_hash_quick_find		50642	0					
ANR	50720	Identifier	zend_hash_quick_find		50642	0					
ANR	50721	ArgumentList	class_table		50642	1					
ANR	50722	Argument	class_table		50642	0					
ANR	50723	Identifier	class_table		50642	0					
ANR	50724	Argument	Z_STRVAL_P ( op1 )		50642	1					
ANR	50725	CallExpression	Z_STRVAL_P ( op1 )		50642	0					
ANR	50726	Callee	Z_STRVAL_P		50642	0					
ANR	50727	Identifier	Z_STRVAL_P		50642	0					
ANR	50728	ArgumentList	op1		50642	1					
ANR	50729	Argument	op1		50642	0					
ANR	50730	Identifier	op1		50642	0					
ANR	50731	Argument	Z_STRLEN_P ( op1 )		50642	2					
ANR	50732	CallExpression	Z_STRLEN_P ( op1 )		50642	0					
ANR	50733	Callee	Z_STRLEN_P		50642	0					
ANR	50734	Identifier	Z_STRLEN_P		50642	0					
ANR	50735	ArgumentList	op1		50642	1					
ANR	50736	Argument	op1		50642	0					
ANR	50737	Identifier	op1		50642	0					
ANR	50738	Argument	Z_HASH_P ( op1 )		50642	3					
ANR	50739	CallExpression	Z_HASH_P ( op1 )		50642	0					
ANR	50740	Callee	Z_HASH_P		50642	0					
ANR	50741	Identifier	Z_HASH_P		50642	0					
ANR	50742	ArgumentList	op1		50642	1					
ANR	50743	Argument	op1		50642	0					
ANR	50744	Identifier	op1		50642	0					
ANR	50745	Argument	( void * * ) & pce		50642	4					
ANR	50746	CastExpression	( void * * ) & pce		50642	0					
ANR	50747	CastTarget	void * *		50642	0					
ANR	50748	UnaryOperationExpression	& pce		50642	1					
ANR	50749	UnaryOperator	&		50642	0					
ANR	50750	Identifier	pce		50642	1					
ANR	50751	Identifier	FAILURE		50642	1					
ANR	50752	CompoundStatement		12:114:354:354	50642	1					
ANR	50753	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Internal Zend error - Missing class information for %s"" , Z_STRVAL_P ( op1 ) )"	4706:2:171815:171926	50642	0	True				
ANR	50754	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Internal Zend error - Missing class information for %s"" , Z_STRVAL_P ( op1 ) )"		50642	0					
ANR	50755	Callee	zend_error_noreturn		50642	0					
ANR	50756	Identifier	zend_error_noreturn		50642	0					
ANR	50757	ArgumentList	E_COMPILE_ERROR		50642	1					
ANR	50758	Argument	E_COMPILE_ERROR		50642	0					
ANR	50759	Identifier	E_COMPILE_ERROR		50642	0					
ANR	50760	Argument	"""Internal Zend error - Missing class information for %s"""		50642	1					
ANR	50761	PrimaryExpression	"""Internal Zend error - Missing class information for %s"""		50642	0					
ANR	50762	Argument	Z_STRVAL_P ( op1 )		50642	2					
ANR	50763	CallExpression	Z_STRVAL_P ( op1 )		50642	0					
ANR	50764	Callee	Z_STRVAL_P		50642	0					
ANR	50765	Identifier	Z_STRVAL_P		50642	0					
ANR	50766	ArgumentList	op1		50642	1					
ANR	50767	Argument	op1		50642	0					
ANR	50768	Identifier	op1		50642	0					
ANR	50769	ReturnStatement	return NULL ;	4707:2:171930:171941	50642	1	True				
ANR	50770	Identifier	NULL		50642	0					
ANR	50771	ElseStatement	else		50642	0					
ANR	50772	CompoundStatement		15:8:494:494	50642	0					
ANR	50773	ExpressionStatement	ce = * pce	4709:2:171955:171964	50642	0	True				
ANR	50774	AssignmentExpression	ce = * pce		50642	0		=			
ANR	50775	Identifier	ce		50642	0					
ANR	50776	UnaryOperationExpression	* pce		50642	1					
ANR	50777	UnaryOperator	*		50642	0					
ANR	50778	Identifier	pce		50642	1					
ANR	50779	ExpressionStatement	ce -> refcount ++	4711:1:171970:171984	50642	4	True				
ANR	50780	PostIncDecOperationExpression	ce -> refcount ++		50642	0					
ANR	50781	PtrMemberAccess	ce -> refcount		50642	0					
ANR	50782	Identifier	ce		50642	0					
ANR	50783	Identifier	refcount		50642	1					
ANR	50784	IncDec	++		50642	1					
ANR	50785	IfStatement	"if ( zend_hash_quick_add ( class_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , & ce , sizeof ( zend_class_entry * ) , NULL ) == FAILURE )"		50642	5					
ANR	50786	Condition	"zend_hash_quick_add ( class_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , & ce , sizeof ( zend_class_entry * ) , NULL ) == FAILURE"	4712:5:171991:172121	50642	0	True				
ANR	50787	EqualityExpression	"zend_hash_quick_add ( class_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , & ce , sizeof ( zend_class_entry * ) , NULL ) == FAILURE"		50642	0		==			
ANR	50788	CallExpression	"zend_hash_quick_add ( class_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , & ce , sizeof ( zend_class_entry * ) , NULL )"		50642	0					
ANR	50789	Callee	zend_hash_quick_add		50642	0					
ANR	50790	Identifier	zend_hash_quick_add		50642	0					
ANR	50791	ArgumentList	class_table		50642	1					
ANR	50792	Argument	class_table		50642	0					
ANR	50793	Identifier	class_table		50642	0					
ANR	50794	Argument	Z_STRVAL_P ( op2 )		50642	1					
ANR	50795	CallExpression	Z_STRVAL_P ( op2 )		50642	0					
ANR	50796	Callee	Z_STRVAL_P		50642	0					
ANR	50797	Identifier	Z_STRVAL_P		50642	0					
ANR	50798	ArgumentList	op2		50642	1					
ANR	50799	Argument	op2		50642	0					
ANR	50800	Identifier	op2		50642	0					
ANR	50801	Argument	Z_STRLEN_P ( op2 ) + 1		50642	2					
ANR	50802	AdditiveExpression	Z_STRLEN_P ( op2 ) + 1		50642	0		+			
ANR	50803	CallExpression	Z_STRLEN_P ( op2 )		50642	0					
ANR	50804	Callee	Z_STRLEN_P		50642	0					
ANR	50805	Identifier	Z_STRLEN_P		50642	0					
ANR	50806	ArgumentList	op2		50642	1					
ANR	50807	Argument	op2		50642	0					
ANR	50808	Identifier	op2		50642	0					
ANR	50809	PrimaryExpression	1		50642	1					
ANR	50810	Argument	Z_HASH_P ( op2 )		50642	3					
ANR	50811	CallExpression	Z_HASH_P ( op2 )		50642	0					
ANR	50812	Callee	Z_HASH_P		50642	0					
ANR	50813	Identifier	Z_HASH_P		50642	0					
ANR	50814	ArgumentList	op2		50642	1					
ANR	50815	Argument	op2		50642	0					
ANR	50816	Identifier	op2		50642	0					
ANR	50817	Argument	& ce		50642	4					
ANR	50818	UnaryOperationExpression	& ce		50642	0					
ANR	50819	UnaryOperator	&		50642	0					
ANR	50820	Identifier	ce		50642	1					
ANR	50821	Argument	sizeof ( zend_class_entry * )		50642	5					
ANR	50822	SizeofExpression	sizeof ( zend_class_entry * )		50642	0					
ANR	50823	Sizeof	sizeof		50642	0					
ANR	50824	SizeofOperand	zend_class_entry *		50642	1					
ANR	50825	Argument	NULL		50642	6					
ANR	50826	Identifier	NULL		50642	0					
ANR	50827	Identifier	FAILURE		50642	1					
ANR	50828	CompoundStatement		19:138:667:667	50642	1					
ANR	50829	ExpressionStatement	ce -> refcount --	4713:2:172128:172142	50642	0	True				
ANR	50830	PostIncDecOperationExpression	ce -> refcount --		50642	0					
ANR	50831	PtrMemberAccess	ce -> refcount		50642	0					
ANR	50832	Identifier	ce		50642	0					
ANR	50833	Identifier	refcount		50642	1					
ANR	50834	IncDec	--		50642	1					
ANR	50835	IfStatement	if ( ! compile_time )		50642	1					
ANR	50836	Condition	! compile_time	4714:6:172150:172162	50642	0	True				
ANR	50837	UnaryOperationExpression	! compile_time		50642	0					
ANR	50838	UnaryOperator	!		50642	0					
ANR	50839	Identifier	compile_time		50642	1					
ANR	50840	CompoundStatement		21:21:708:708	50642	1					
ANR	50841	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare class %s"" , ce -> name )"	4720:3:172410:172485	50642	0	True				
ANR	50842	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare class %s"" , ce -> name )"		50642	0					
ANR	50843	Callee	zend_error_noreturn		50642	0					
ANR	50844	Identifier	zend_error_noreturn		50642	0					
ANR	50845	ArgumentList	E_COMPILE_ERROR		50642	1					
ANR	50846	Argument	E_COMPILE_ERROR		50642	0					
ANR	50847	Identifier	E_COMPILE_ERROR		50642	0					
ANR	50848	Argument	"""Cannot redeclare class %s"""		50642	1					
ANR	50849	PrimaryExpression	"""Cannot redeclare class %s"""		50642	0					
ANR	50850	Argument	ce -> name		50642	2					
ANR	50851	PtrMemberAccess	ce -> name		50642	0					
ANR	50852	Identifier	ce		50642	0					
ANR	50853	Identifier	name		50642	1					
ANR	50854	ReturnStatement	return NULL ;	4722:2:172493:172504	50642	2	True				
ANR	50855	Identifier	NULL		50642	0					
ANR	50856	ElseStatement	else		50642	0					
ANR	50857	CompoundStatement		30:8:1057:1057	50642	0					
ANR	50858	IfStatement	if ( ! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS ) ) )		50642	0					
ANR	50859	Condition	! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS ) )	4724:6:172522:172615	50642	0	True				
ANR	50860	UnaryOperationExpression	! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS ) )		50642	0					
ANR	50861	UnaryOperator	!		50642	0					
ANR	50862	BitAndExpression	ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS )		50642	1		&			
ANR	50863	PtrMemberAccess	ce -> ce_flags		50642	0					
ANR	50864	Identifier	ce		50642	0					
ANR	50865	Identifier	ce_flags		50642	1					
ANR	50866	InclusiveOrExpression	ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS		50642	1		|			
ANR	50867	Identifier	ZEND_ACC_INTERFACE		50642	0					
ANR	50868	InclusiveOrExpression	ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS		50642	1		|			
ANR	50869	Identifier	ZEND_ACC_IMPLEMENT_INTERFACES		50642	0					
ANR	50870	Identifier	ZEND_ACC_IMPLEMENT_TRAITS		50642	1					
ANR	50871	CompoundStatement		31:102:1161:1161	50642	1					
ANR	50872	Statement	zend_verify_abstract_class	4725:3:172623:172648	50642	0	True				
ANR	50873	Statement	(	4725:29:172649:172649	50642	1	True				
ANR	50874	Statement	ce	4725:30:172650:172651	50642	2	True				
ANR	50875	Statement	TSRMLS_CC	4725:33:172653:172661	50642	3	True				
ANR	50876	Statement	)	4725:42:172662:172662	50642	4	True				
ANR	50877	ExpressionStatement		4725:43:172663:172663	50642	5	True				
ANR	50878	ReturnStatement	return ce ;	4727:2:172671:172680	50642	1	True				
ANR	50879	Identifier	ce		50642	0					
ANR	50880	ReturnType	ZEND_API zend_class_entry *		50642	1					
ANR	50881	Identifier	do_bind_class		50642	2					
ANR	50882	ParameterList	"const zend_op_array * op_array , const zend_op * opline , HashTable * class_table , zend_bool compile_time TSRMLS_DC"		50642	3					
ANR	50883	Parameter	const zend_op_array * op_array	4693:41:171334:171362	50642	0	True				
ANR	50884	ParameterType	const zend_op_array *		50642	0					
ANR	50885	Identifier	op_array		50642	1					
ANR	50886	Parameter	const zend_op * opline	4693:72:171365:171385	50642	1	True				
ANR	50887	ParameterType	const zend_op *		50642	0					
ANR	50888	Identifier	opline		50642	1					
ANR	50889	Parameter	HashTable * class_table	4693:95:171388:171409	50642	2	True				
ANR	50890	ParameterType	HashTable *		50642	0					
ANR	50891	Identifier	class_table		50642	1					
ANR	50892	Parameter	zend_bool compile_time TSRMLS_DC	4693:119:171412:171443	50642	3	True				
ANR	50893	ParameterType	zend_bool compile_time		50642	0					
ANR	50894	Identifier	TSRMLS_DC		50642	1					
ANR	50895	CFGEntryNode	ENTRY		50642		True				
ANR	50896	CFGExitNode	EXIT		50642		True				
ANR	50897	Symbol	compile_time		50642						
ANR	50898	Symbol	opline -> op1		50642						
ANR	50899	Symbol	opline -> op2		50642						
ANR	50900	Symbol	& CONSTANT_EX		50642						
ANR	50901	Symbol	ZEND_ACC_IMPLEMENT_TRAITS		50642						
ANR	50902	Symbol	E_COMPILE_ERROR		50642						
ANR	50903	Symbol	opline -> op1 . zv		50642						
ANR	50904	Symbol	* ce		50642						
ANR	50905	Symbol	TSRMLS_DC		50642						
ANR	50906	Symbol	& ce		50642						
ANR	50907	Symbol	opline		50642						
ANR	50908	Symbol	pce		50642						
ANR	50909	Symbol	zend_hash_quick_find		50642						
ANR	50910	Symbol	zend_hash_quick_add		50642						
ANR	50911	Symbol	opline -> op1 . constant		50642						
ANR	50912	Symbol	Z_HASH_P		50642						
ANR	50913	Symbol	Z_STRLEN_P		50642						
ANR	50914	Symbol	ce -> name		50642						
ANR	50915	Symbol	ZEND_ACC_INTERFACE		50642						
ANR	50916	Symbol	class_table		50642						
ANR	50917	Symbol	opline -> op2 . zv		50642						
ANR	50918	Symbol	ce		50642						
ANR	50919	Symbol	NULL		50642						
ANR	50920	Symbol	ce -> refcount		50642						
ANR	50921	Symbol	FAILURE		50642						
ANR	50922	Symbol	Z_STRVAL_P		50642						
ANR	50923	Symbol	op2		50642						
ANR	50924	Symbol	ce -> ce_flags		50642						
ANR	50925	Symbol	ZEND_ACC_IMPLEMENT_INTERFACES		50642						
ANR	50926	Symbol	op1		50642						
ANR	50927	Symbol	* opline		50642						
ANR	50928	Symbol	opline -> op2 . constant		50642						
ANR	50929	Symbol	* pce		50642						
ANR	50930	Symbol	op_array		50642						
ANR	50931	Symbol	& pce		50642						
ANR	50932	Function	do_bind_inherited_class	4732:0:172698:174371							
ANR	50933	FunctionDef	"do_bind_inherited_class (const zend_op_array * op_array , const zend_op * opline , HashTable * class_table , zend_class_entry * parent_ce , zend_bool compile_time TSRMLS_DC)"		50932	0					
ANR	50934	CompoundStatement		4733:0:172900:174371	50932	0					
ANR	50935	IdentifierDeclStatement	"zend_class_entry * ce , * * pce ;"	4734:1:172903:172930	50932	0	True				
ANR	50936	IdentifierDecl	* ce		50932	0					
ANR	50937	IdentifierDeclType	zend_class_entry *		50932	0					
ANR	50938	Identifier	ce		50932	1					
ANR	50939	IdentifierDecl	* * pce		50932	1					
ANR	50940	IdentifierDeclType	zend_class_entry * *		50932	0					
ANR	50941	Identifier	pce		50932	1					
ANR	50942	IdentifierDeclStatement	int found_ce ;	4735:1:172933:172945	50932	1	True				
ANR	50943	IdentifierDecl	found_ce		50932	0					
ANR	50944	IdentifierDeclType	int		50932	0					
ANR	50945	Identifier	found_ce		50932	1					
ANR	50946	IdentifierDeclStatement	"zval * op1 , * op2 ;"	4736:1:172948:172963	50932	2	True				
ANR	50947	IdentifierDecl	* op1		50932	0					
ANR	50948	IdentifierDeclType	zval *		50932	0					
ANR	50949	Identifier	op1		50932	1					
ANR	50950	IdentifierDecl	* op2		50932	1					
ANR	50951	IdentifierDeclType	zval *		50932	0					
ANR	50952	Identifier	op2		50932	1					
ANR	50953	IfStatement	if ( compile_time )		50932	3					
ANR	50954	Condition	compile_time	4738:5:172971:172982	50932	0	True				
ANR	50955	Identifier	compile_time		50932	0					
ANR	50956	CompoundStatement		6:19:84:84	50932	1					
ANR	50957	ExpressionStatement	"op1 = & CONSTANT_EX ( op_array , opline -> op1 . constant )"	4739:2:172989:173039	50932	0	True				
ANR	50958	AssignmentExpression	"op1 = & CONSTANT_EX ( op_array , opline -> op1 . constant )"		50932	0		=			
ANR	50959	Identifier	op1		50932	0					
ANR	50960	UnaryOperationExpression	"& CONSTANT_EX ( op_array , opline -> op1 . constant )"		50932	1					
ANR	50961	UnaryOperator	&		50932	0					
ANR	50962	CallExpression	"CONSTANT_EX ( op_array , opline -> op1 . constant )"		50932	1					
ANR	50963	Callee	CONSTANT_EX		50932	0					
ANR	50964	Identifier	CONSTANT_EX		50932	0					
ANR	50965	ArgumentList	op_array		50932	1					
ANR	50966	Argument	op_array		50932	0					
ANR	50967	Identifier	op_array		50932	0					
ANR	50968	Argument	opline -> op1 . constant		50932	1					
ANR	50969	MemberAccess	opline -> op1 . constant		50932	0					
ANR	50970	PtrMemberAccess	opline -> op1		50932	0					
ANR	50971	Identifier	opline		50932	0					
ANR	50972	Identifier	op1		50932	1					
ANR	50973	Identifier	constant		50932	1					
ANR	50974	ExpressionStatement	"op2 = & CONSTANT_EX ( op_array , opline -> op2 . constant )"	4740:2:173043:173093	50932	1	True				
ANR	50975	AssignmentExpression	"op2 = & CONSTANT_EX ( op_array , opline -> op2 . constant )"		50932	0		=			
ANR	50976	Identifier	op2		50932	0					
ANR	50977	UnaryOperationExpression	"& CONSTANT_EX ( op_array , opline -> op2 . constant )"		50932	1					
ANR	50978	UnaryOperator	&		50932	0					
ANR	50979	CallExpression	"CONSTANT_EX ( op_array , opline -> op2 . constant )"		50932	1					
ANR	50980	Callee	CONSTANT_EX		50932	0					
ANR	50981	Identifier	CONSTANT_EX		50932	0					
ANR	50982	ArgumentList	op_array		50932	1					
ANR	50983	Argument	op_array		50932	0					
ANR	50984	Identifier	op_array		50932	0					
ANR	50985	Argument	opline -> op2 . constant		50932	1					
ANR	50986	MemberAccess	opline -> op2 . constant		50932	0					
ANR	50987	PtrMemberAccess	opline -> op2		50932	0					
ANR	50988	Identifier	opline		50932	0					
ANR	50989	Identifier	op2		50932	1					
ANR	50990	Identifier	constant		50932	1					
ANR	50991	ElseStatement	else		50932	0					
ANR	50992	CompoundStatement		9:8:202:202	50932	0					
ANR	50993	ExpressionStatement	op1 = opline -> op1 . zv	4742:2:173107:173127	50932	0	True				
ANR	50994	AssignmentExpression	op1 = opline -> op1 . zv		50932	0		=			
ANR	50995	Identifier	op1		50932	0					
ANR	50996	MemberAccess	opline -> op1 . zv		50932	1					
ANR	50997	PtrMemberAccess	opline -> op1		50932	0					
ANR	50998	Identifier	opline		50932	0					
ANR	50999	Identifier	op1		50932	1					
ANR	51000	Identifier	zv		50932	1					
ANR	51001	ExpressionStatement	op2 = opline -> op2 . zv	4743:2:173131:173151	50932	1	True				
ANR	51002	AssignmentExpression	op2 = opline -> op2 . zv		50932	0		=			
ANR	51003	Identifier	op2		50932	0					
ANR	51004	MemberAccess	opline -> op2 . zv		50932	1					
ANR	51005	PtrMemberAccess	opline -> op2		50932	0					
ANR	51006	Identifier	opline		50932	0					
ANR	51007	Identifier	op2		50932	1					
ANR	51008	Identifier	zv		50932	1					
ANR	51009	ExpressionStatement	"found_ce = zend_hash_quick_find ( class_table , Z_STRVAL_P ( op1 ) , Z_STRLEN_P ( op1 ) , Z_HASH_P ( op1 ) , ( void * * ) & pce )"	4746:1:173158:173267	50932	4	True				
ANR	51010	AssignmentExpression	"found_ce = zend_hash_quick_find ( class_table , Z_STRVAL_P ( op1 ) , Z_STRLEN_P ( op1 ) , Z_HASH_P ( op1 ) , ( void * * ) & pce )"		50932	0		=			
ANR	51011	Identifier	found_ce		50932	0					
ANR	51012	CallExpression	"zend_hash_quick_find ( class_table , Z_STRVAL_P ( op1 ) , Z_STRLEN_P ( op1 ) , Z_HASH_P ( op1 ) , ( void * * ) & pce )"		50932	1					
ANR	51013	Callee	zend_hash_quick_find		50932	0					
ANR	51014	Identifier	zend_hash_quick_find		50932	0					
ANR	51015	ArgumentList	class_table		50932	1					
ANR	51016	Argument	class_table		50932	0					
ANR	51017	Identifier	class_table		50932	0					
ANR	51018	Argument	Z_STRVAL_P ( op1 )		50932	1					
ANR	51019	CallExpression	Z_STRVAL_P ( op1 )		50932	0					
ANR	51020	Callee	Z_STRVAL_P		50932	0					
ANR	51021	Identifier	Z_STRVAL_P		50932	0					
ANR	51022	ArgumentList	op1		50932	1					
ANR	51023	Argument	op1		50932	0					
ANR	51024	Identifier	op1		50932	0					
ANR	51025	Argument	Z_STRLEN_P ( op1 )		50932	2					
ANR	51026	CallExpression	Z_STRLEN_P ( op1 )		50932	0					
ANR	51027	Callee	Z_STRLEN_P		50932	0					
ANR	51028	Identifier	Z_STRLEN_P		50932	0					
ANR	51029	ArgumentList	op1		50932	1					
ANR	51030	Argument	op1		50932	0					
ANR	51031	Identifier	op1		50932	0					
ANR	51032	Argument	Z_HASH_P ( op1 )		50932	3					
ANR	51033	CallExpression	Z_HASH_P ( op1 )		50932	0					
ANR	51034	Callee	Z_HASH_P		50932	0					
ANR	51035	Identifier	Z_HASH_P		50932	0					
ANR	51036	ArgumentList	op1		50932	1					
ANR	51037	Argument	op1		50932	0					
ANR	51038	Identifier	op1		50932	0					
ANR	51039	Argument	( void * * ) & pce		50932	4					
ANR	51040	CastExpression	( void * * ) & pce		50932	0					
ANR	51041	CastTarget	void * *		50932	0					
ANR	51042	UnaryOperationExpression	& pce		50932	1					
ANR	51043	UnaryOperator	&		50932	0					
ANR	51044	Identifier	pce		50932	1					
ANR	51045	IfStatement	if ( found_ce == FAILURE )		50932	5					
ANR	51046	Condition	found_ce == FAILURE	4748:5:173275:173293	50932	0	True				
ANR	51047	EqualityExpression	found_ce == FAILURE		50932	0		==			
ANR	51048	Identifier	found_ce		50932	0					
ANR	51049	Identifier	FAILURE		50932	1					
ANR	51050	CompoundStatement		16:26:395:395	50932	1					
ANR	51051	IfStatement	if ( ! compile_time )		50932	0					
ANR	51052	Condition	! compile_time	4749:6:173304:173316	50932	0	True				
ANR	51053	UnaryOperationExpression	! compile_time		50932	0					
ANR	51054	UnaryOperator	!		50932	0					
ANR	51055	Identifier	compile_time		50932	1					
ANR	51056	CompoundStatement		17:21:418:418	50932	1					
ANR	51057	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare class %s"" , Z_STRVAL_P ( op2 ) )"	4755:3:173564:173646	50932	0	True				
ANR	51058	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare class %s"" , Z_STRVAL_P ( op2 ) )"		50932	0					
ANR	51059	Callee	zend_error_noreturn		50932	0					
ANR	51060	Identifier	zend_error_noreturn		50932	0					
ANR	51061	ArgumentList	E_COMPILE_ERROR		50932	1					
ANR	51062	Argument	E_COMPILE_ERROR		50932	0					
ANR	51063	Identifier	E_COMPILE_ERROR		50932	0					
ANR	51064	Argument	"""Cannot redeclare class %s"""		50932	1					
ANR	51065	PrimaryExpression	"""Cannot redeclare class %s"""		50932	0					
ANR	51066	Argument	Z_STRVAL_P ( op2 )		50932	2					
ANR	51067	CallExpression	Z_STRVAL_P ( op2 )		50932	0					
ANR	51068	Callee	Z_STRVAL_P		50932	0					
ANR	51069	Identifier	Z_STRVAL_P		50932	0					
ANR	51070	ArgumentList	op2		50932	1					
ANR	51071	Argument	op2		50932	0					
ANR	51072	Identifier	op2		50932	0					
ANR	51073	ReturnStatement	return NULL ;	4757:2:173654:173665	50932	1	True				
ANR	51074	Identifier	NULL		50932	0					
ANR	51075	ElseStatement	else		50932	0					
ANR	51076	CompoundStatement		26:8:774:774	50932	0					
ANR	51077	ExpressionStatement	ce = * pce	4759:2:173679:173688	50932	0	True				
ANR	51078	AssignmentExpression	ce = * pce		50932	0		=			
ANR	51079	Identifier	ce		50932	0					
ANR	51080	UnaryOperationExpression	* pce		50932	1					
ANR	51081	UnaryOperator	*		50932	0					
ANR	51082	Identifier	pce		50932	1					
ANR	51083	IfStatement	if ( parent_ce -> ce_flags & ZEND_ACC_INTERFACE )		50932	6					
ANR	51084	Condition	parent_ce -> ce_flags & ZEND_ACC_INTERFACE	4762:5:173699:173738	50932	0	True				
ANR	51085	BitAndExpression	parent_ce -> ce_flags & ZEND_ACC_INTERFACE		50932	0		&			
ANR	51086	PtrMemberAccess	parent_ce -> ce_flags		50932	0					
ANR	51087	Identifier	parent_ce		50932	0					
ANR	51088	Identifier	ce_flags		50932	1					
ANR	51089	Identifier	ZEND_ACC_INTERFACE		50932	1					
ANR	51090	CompoundStatement		30:47:840:840	50932	1					
ANR	51091	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Class %s cannot extend from interface %s"" , ce -> name , parent_ce -> name )"	4763:2:173745:173852	50932	0	True				
ANR	51092	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Class %s cannot extend from interface %s"" , ce -> name , parent_ce -> name )"		50932	0					
ANR	51093	Callee	zend_error_noreturn		50932	0					
ANR	51094	Identifier	zend_error_noreturn		50932	0					
ANR	51095	ArgumentList	E_COMPILE_ERROR		50932	1					
ANR	51096	Argument	E_COMPILE_ERROR		50932	0					
ANR	51097	Identifier	E_COMPILE_ERROR		50932	0					
ANR	51098	Argument	"""Class %s cannot extend from interface %s"""		50932	1					
ANR	51099	PrimaryExpression	"""Class %s cannot extend from interface %s"""		50932	0					
ANR	51100	Argument	ce -> name		50932	2					
ANR	51101	PtrMemberAccess	ce -> name		50932	0					
ANR	51102	Identifier	ce		50932	0					
ANR	51103	Identifier	name		50932	1					
ANR	51104	Argument	parent_ce -> name		50932	3					
ANR	51105	PtrMemberAccess	parent_ce -> name		50932	0					
ANR	51106	Identifier	parent_ce		50932	0					
ANR	51107	Identifier	name		50932	1					
ANR	51108	ElseStatement	else		50932	0					
ANR	51109	IfStatement	if ( ( parent_ce -> ce_flags & ZEND_ACC_TRAIT ) == ZEND_ACC_TRAIT )		50932	0					
ANR	51110	Condition	( parent_ce -> ce_flags & ZEND_ACC_TRAIT ) == ZEND_ACC_TRAIT	4764:12:173866:173921	50932	0	True				
ANR	51111	EqualityExpression	( parent_ce -> ce_flags & ZEND_ACC_TRAIT ) == ZEND_ACC_TRAIT		50932	0		==			
ANR	51112	BitAndExpression	parent_ce -> ce_flags & ZEND_ACC_TRAIT		50932	0		&			
ANR	51113	PtrMemberAccess	parent_ce -> ce_flags		50932	0					
ANR	51114	Identifier	parent_ce		50932	0					
ANR	51115	Identifier	ce_flags		50932	1					
ANR	51116	Identifier	ZEND_ACC_TRAIT		50932	1					
ANR	51117	Identifier	ZEND_ACC_TRAIT		50932	1					
ANR	51118	CompoundStatement		32:70:1023:1023	50932	1					
ANR	51119	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Class %s cannot extend from trait %s"" , ce -> name , parent_ce -> name )"	4765:2:173928:174031	50932	0	True				
ANR	51120	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Class %s cannot extend from trait %s"" , ce -> name , parent_ce -> name )"		50932	0					
ANR	51121	Callee	zend_error_noreturn		50932	0					
ANR	51122	Identifier	zend_error_noreturn		50932	0					
ANR	51123	ArgumentList	E_COMPILE_ERROR		50932	1					
ANR	51124	Argument	E_COMPILE_ERROR		50932	0					
ANR	51125	Identifier	E_COMPILE_ERROR		50932	0					
ANR	51126	Argument	"""Class %s cannot extend from trait %s"""		50932	1					
ANR	51127	PrimaryExpression	"""Class %s cannot extend from trait %s"""		50932	0					
ANR	51128	Argument	ce -> name		50932	2					
ANR	51129	PtrMemberAccess	ce -> name		50932	0					
ANR	51130	Identifier	ce		50932	0					
ANR	51131	Identifier	name		50932	1					
ANR	51132	Argument	parent_ce -> name		50932	3					
ANR	51133	PtrMemberAccess	parent_ce -> name		50932	0					
ANR	51134	Identifier	parent_ce		50932	0					
ANR	51135	Identifier	name		50932	1					
ANR	51136	Statement	zend_do_inheritance	4768:1:174038:174056	50932	7	True				
ANR	51137	Statement	(	4768:20:174057:174057	50932	8	True				
ANR	51138	Statement	ce	4768:21:174058:174059	50932	9	True				
ANR	51139	Statement	","	4768:23:174060:174060	50932	10	True				
ANR	51140	Statement	parent_ce	4768:25:174062:174070	50932	11	True				
ANR	51141	Statement	TSRMLS_CC	4768:35:174072:174080	50932	12	True				
ANR	51142	Statement	)	4768:44:174081:174081	50932	13	True				
ANR	51143	ExpressionStatement		4768:45:174082:174082	50932	14	True				
ANR	51144	ExpressionStatement	ce -> refcount ++	4770:1:174086:174100	50932	15	True				
ANR	51145	PostIncDecOperationExpression	ce -> refcount ++		50932	0					
ANR	51146	PtrMemberAccess	ce -> refcount		50932	0					
ANR	51147	Identifier	ce		50932	0					
ANR	51148	Identifier	refcount		50932	1					
ANR	51149	IncDec	++		50932	1					
ANR	51150	IfStatement	"if ( zend_hash_quick_add ( class_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , pce , sizeof ( zend_class_entry * ) , NULL ) == FAILURE )"		50932	16					
ANR	51151	Condition	"zend_hash_quick_add ( class_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , pce , sizeof ( zend_class_entry * ) , NULL ) == FAILURE"	4773:5:174142:174272	50932	0	True				
ANR	51152	EqualityExpression	"zend_hash_quick_add ( class_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , pce , sizeof ( zend_class_entry * ) , NULL ) == FAILURE"		50932	0		==			
ANR	51153	CallExpression	"zend_hash_quick_add ( class_table , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op2 ) + 1 , Z_HASH_P ( op2 ) , pce , sizeof ( zend_class_entry * ) , NULL )"		50932	0					
ANR	51154	Callee	zend_hash_quick_add		50932	0					
ANR	51155	Identifier	zend_hash_quick_add		50932	0					
ANR	51156	ArgumentList	class_table		50932	1					
ANR	51157	Argument	class_table		50932	0					
ANR	51158	Identifier	class_table		50932	0					
ANR	51159	Argument	Z_STRVAL_P ( op2 )		50932	1					
ANR	51160	CallExpression	Z_STRVAL_P ( op2 )		50932	0					
ANR	51161	Callee	Z_STRVAL_P		50932	0					
ANR	51162	Identifier	Z_STRVAL_P		50932	0					
ANR	51163	ArgumentList	op2		50932	1					
ANR	51164	Argument	op2		50932	0					
ANR	51165	Identifier	op2		50932	0					
ANR	51166	Argument	Z_STRLEN_P ( op2 ) + 1		50932	2					
ANR	51167	AdditiveExpression	Z_STRLEN_P ( op2 ) + 1		50932	0		+			
ANR	51168	CallExpression	Z_STRLEN_P ( op2 )		50932	0					
ANR	51169	Callee	Z_STRLEN_P		50932	0					
ANR	51170	Identifier	Z_STRLEN_P		50932	0					
ANR	51171	ArgumentList	op2		50932	1					
ANR	51172	Argument	op2		50932	0					
ANR	51173	Identifier	op2		50932	0					
ANR	51174	PrimaryExpression	1		50932	1					
ANR	51175	Argument	Z_HASH_P ( op2 )		50932	3					
ANR	51176	CallExpression	Z_HASH_P ( op2 )		50932	0					
ANR	51177	Callee	Z_HASH_P		50932	0					
ANR	51178	Identifier	Z_HASH_P		50932	0					
ANR	51179	ArgumentList	op2		50932	1					
ANR	51180	Argument	op2		50932	0					
ANR	51181	Identifier	op2		50932	0					
ANR	51182	Argument	pce		50932	4					
ANR	51183	Identifier	pce		50932	0					
ANR	51184	Argument	sizeof ( zend_class_entry * )		50932	5					
ANR	51185	SizeofExpression	sizeof ( zend_class_entry * )		50932	0					
ANR	51186	Sizeof	sizeof		50932	0					
ANR	51187	SizeofOperand	zend_class_entry *		50932	1					
ANR	51188	Argument	NULL		50932	6					
ANR	51189	Identifier	NULL		50932	0					
ANR	51190	Identifier	FAILURE		50932	1					
ANR	51191	CompoundStatement		41:138:1374:1374	50932	1					
ANR	51192	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare class %s"" , ce -> name )"	4774:2:174279:174354	50932	0	True				
ANR	51193	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare class %s"" , ce -> name )"		50932	0					
ANR	51194	Callee	zend_error_noreturn		50932	0					
ANR	51195	Identifier	zend_error_noreturn		50932	0					
ANR	51196	ArgumentList	E_COMPILE_ERROR		50932	1					
ANR	51197	Argument	E_COMPILE_ERROR		50932	0					
ANR	51198	Identifier	E_COMPILE_ERROR		50932	0					
ANR	51199	Argument	"""Cannot redeclare class %s"""		50932	1					
ANR	51200	PrimaryExpression	"""Cannot redeclare class %s"""		50932	0					
ANR	51201	Argument	ce -> name		50932	2					
ANR	51202	PtrMemberAccess	ce -> name		50932	0					
ANR	51203	Identifier	ce		50932	0					
ANR	51204	Identifier	name		50932	1					
ANR	51205	ReturnStatement	return ce ;	4776:1:174360:174369	50932	17	True				
ANR	51206	Identifier	ce		50932	0					
ANR	51207	ReturnType	ZEND_API zend_class_entry *		50932	1					
ANR	51208	Identifier	do_bind_inherited_class		50932	2					
ANR	51209	ParameterList	"const zend_op_array * op_array , const zend_op * opline , HashTable * class_table , zend_class_entry * parent_ce , zend_bool compile_time TSRMLS_DC"		50932	3					
ANR	51210	Parameter	const zend_op_array * op_array	4732:51:172749:172777	50932	0	True				
ANR	51211	ParameterType	const zend_op_array *		50932	0					
ANR	51212	Identifier	op_array		50932	1					
ANR	51213	Parameter	const zend_op * opline	4732:82:172780:172800	50932	1	True				
ANR	51214	ParameterType	const zend_op *		50932	0					
ANR	51215	Identifier	opline		50932	1					
ANR	51216	Parameter	HashTable * class_table	4732:105:172803:172824	50932	2	True				
ANR	51217	ParameterType	HashTable *		50932	0					
ANR	51218	Identifier	class_table		50932	1					
ANR	51219	Parameter	zend_class_entry * parent_ce	4732:129:172827:172853	50932	3	True				
ANR	51220	ParameterType	zend_class_entry *		50932	0					
ANR	51221	Identifier	parent_ce		50932	1					
ANR	51222	Parameter	zend_bool compile_time TSRMLS_DC	4732:158:172856:172887	50932	4	True				
ANR	51223	ParameterType	zend_bool compile_time		50932	0					
ANR	51224	Identifier	TSRMLS_DC		50932	1					
ANR	51225	CFGEntryNode	ENTRY		50932		True				
ANR	51226	CFGExitNode	EXIT		50932		True				
ANR	51227	Symbol	compile_time		50932						
ANR	51228	Symbol	opline -> op1		50932						
ANR	51229	Symbol	opline -> op2		50932						
ANR	51230	Symbol	& CONSTANT_EX		50932						
ANR	51231	Symbol	E_COMPILE_ERROR		50932						
ANR	51232	Symbol	opline -> op1 . zv		50932						
ANR	51233	Symbol	parent_ce -> ce_flags		50932						
ANR	51234	Symbol	* ce		50932						
ANR	51235	Symbol	TSRMLS_DC		50932						
ANR	51236	Symbol	found_ce		50932						
ANR	51237	Symbol	opline		50932						
ANR	51238	Symbol	pce		50932						
ANR	51239	Symbol	zend_hash_quick_find		50932						
ANR	51240	Symbol	zend_hash_quick_add		50932						
ANR	51241	Symbol	opline -> op1 . constant		50932						
ANR	51242	Symbol	Z_HASH_P		50932						
ANR	51243	Symbol	Z_STRLEN_P		50932						
ANR	51244	Symbol	ZEND_ACC_INTERFACE		50932						
ANR	51245	Symbol	ce -> name		50932						
ANR	51246	Symbol	class_table		50932						
ANR	51247	Symbol	opline -> op2 . zv		50932						
ANR	51248	Symbol	ce		50932						
ANR	51249	Symbol	NULL		50932						
ANR	51250	Symbol	ce -> refcount		50932						
ANR	51251	Symbol	parent_ce -> name		50932						
ANR	51252	Symbol	Z_STRVAL_P		50932						
ANR	51253	Symbol	FAILURE		50932						
ANR	51254	Symbol	ZEND_ACC_TRAIT		50932						
ANR	51255	Symbol	op2		50932						
ANR	51256	Symbol	parent_ce		50932						
ANR	51257	Symbol	op1		50932						
ANR	51258	Symbol	* opline		50932						
ANR	51259	Symbol	opline -> op2 . constant		50932						
ANR	51260	Symbol	* parent_ce		50932						
ANR	51261	Symbol	* pce		50932						
ANR	51262	Symbol	op_array		50932						
ANR	51263	Symbol	& pce		50932						
ANR	51264	DeclStmt									
ANR	51265	Decl							zend_op	zend_op *	opline
ANR	51266	DeclStmt									
ANR	51267	Decl							HashTable	HashTable *	table
ANR	51268	DeclStmt									
ANR	51269	Decl							zend_op	zend_op *	fetch_class_opline
ANR	51270	DeclStmt									
ANR	51271	Decl							zval	zval *	parent_name
ANR	51272	DeclStmt									
ANR	51273	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	51274	DeclStmt									
ANR	51275	Decl							zend_uint	zend_uint *	opline_num
ANR	51276	DeclStmt									
ANR	51277	Decl							zend_bool	zend_bool	orig_in_compilation
ANR	51278	DeclStmt									
ANR	51279	Decl							zend_uint	zend_uint	opline_num
ANR	51280	DeclStmt									
ANR	51281	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	51282	DeclStmt									
ANR	51283	Decl							int	int	next_op_number
ANR	51284	DeclStmt									
ANR	51285	Decl							zend_op	zend_op *	opline
ANR	51286	DeclStmt									
ANR	51287	Decl							zend_op	zend_op *	opline
ANR	51288	DeclStmt									
ANR	51289	Decl							int	int	next_op_number
ANR	51290	DeclStmt									
ANR	51291	Decl							zend_op	zend_op *	opline
ANR	51292	DeclStmt									
ANR	51293	Decl							zend_op	zend_op *	opline
ANR	51294	DeclStmt									
ANR	51295	Decl							zend_op	zend_op *	opline
ANR	51296	DeclStmt									
ANR	51297	Decl							zend_op	zend_op *	opline
ANR	51298	DeclStmt									
ANR	51299	Decl							zend_switch_entry	zend_switch_entry	switch_entry
ANR	51300	DeclStmt									
ANR	51301	Decl							zend_op	zend_op *	opline
ANR	51302	DeclStmt									
ANR	51303	Decl							zend_switch_entry	zend_switch_entry *	switch_entry_ptr
ANR	51304	DeclStmt									
ANR	51305	Decl							int	int	next_op_number
ANR	51306	DeclStmt									
ANR	51307	Decl							zend_op	zend_op *	opline
ANR	51308	DeclStmt									
ANR	51309	Decl							int	int	next_op_number
ANR	51310	DeclStmt									
ANR	51311	Decl							zend_switch_entry	zend_switch_entry *	switch_entry_ptr
ANR	51312	DeclStmt									
ANR	51313	Decl							znode	znode	result
ANR	51314	DeclStmt									
ANR	51315	Decl							int	int	next_op_number
ANR	51316	DeclStmt									
ANR	51317	Decl							zend_op	zend_op *	opline
ANR	51318	DeclStmt									
ANR	51319	Decl							int	int	next_op_number
ANR	51320	DeclStmt									
ANR	51321	Decl							zend_op	zend_op *	opline
ANR	51322	DeclStmt									
ANR	51323	Decl							zend_switch_entry	zend_switch_entry *	switch_entry_ptr
ANR	51324	DeclStmt									
ANR	51325	Decl							zend_op	zend_op *	opline
ANR	51326	DeclStmt									
ANR	51327	Decl							int	int	doing_inheritance
ANR	51328	DeclStmt									
ANR	51329	Decl							zend_class_entry	zend_class_entry *	new_class_entry
ANR	51330	DeclStmt									
ANR	51331	Decl							char	char *	lcname
ANR	51332	DeclStmt									
ANR	51333	Decl							int	int	error
ANR	51334	DeclStmt									
ANR	51335	Decl							zval	zval * *	ns_name
ANR	51336	Decl							zval	zval	key
ANR	51337	DeclStmt									
ANR	51338	Decl							znode	znode	tmp
ANR	51339	DeclStmt									
ANR	51340	Decl							char	char *	tmp
ANR	51341	DeclStmt									
ANR	51342	Decl							zend_op	zend_op *	opline
ANR	51343	DeclStmt									
ANR	51344	Decl							zend_class_entry	zend_class_entry *	ce
ANR	51345	DeclStmt									
ANR	51346	Decl							zend_op	zend_op *	opline
ANR	51347	DeclStmt									
ANR	51348	Decl							zend_op	zend_op *	opline
ANR	51349	DeclStmt									
ANR	51350	Decl							zend_op	zend_op *	opline
ANR	51351	Function	zend_mangle_property_name	5377:0:195185:195689							
ANR	51352	FunctionDef	"zend_mangle_property_name (char * * dest , int * dest_length , const char * src1 , int src1_length , const char * src2 , int src2_length , int internal)"		51351	0					
ANR	51353	CompoundStatement		5378:0:195350:195689	51351	0					
ANR	51354	IdentifierDeclStatement	char * prop_name ;	5379:1:195353:195368	51351	0	True				
ANR	51355	IdentifierDecl	* prop_name		51351	0					
ANR	51356	IdentifierDeclType	char *		51351	0					
ANR	51357	Identifier	prop_name		51351	1					
ANR	51358	IdentifierDeclStatement	int prop_name_length ;	5380:1:195371:195391	51351	1	True				
ANR	51359	IdentifierDecl	prop_name_length		51351	0					
ANR	51360	IdentifierDeclType	int		51351	0					
ANR	51361	Identifier	prop_name_length		51351	1					
ANR	51362	ExpressionStatement	prop_name_length = 1 + src1_length + 1 + src2_length	5382:1:195395:195447	51351	2	True				
ANR	51363	AssignmentExpression	prop_name_length = 1 + src1_length + 1 + src2_length		51351	0		=			
ANR	51364	Identifier	prop_name_length		51351	0					
ANR	51365	AdditiveExpression	1 + src1_length + 1 + src2_length		51351	1		+			
ANR	51366	PrimaryExpression	1		51351	0					
ANR	51367	AdditiveExpression	src1_length + 1 + src2_length		51351	1		+			
ANR	51368	Identifier	src1_length		51351	0					
ANR	51369	AdditiveExpression	1 + src2_length		51351	1		+			
ANR	51370	PrimaryExpression	1		51351	0					
ANR	51371	Identifier	src2_length		51351	1					
ANR	51372	ExpressionStatement	"prop_name = pemalloc ( prop_name_length + 1 , internal )"	5383:1:195450:195502	51351	3	True				
ANR	51373	AssignmentExpression	"prop_name = pemalloc ( prop_name_length + 1 , internal )"		51351	0		=			
ANR	51374	Identifier	prop_name		51351	0					
ANR	51375	CallExpression	"pemalloc ( prop_name_length + 1 , internal )"		51351	1					
ANR	51376	Callee	pemalloc		51351	0					
ANR	51377	Identifier	pemalloc		51351	0					
ANR	51378	ArgumentList	prop_name_length + 1		51351	1					
ANR	51379	Argument	prop_name_length + 1		51351	0					
ANR	51380	AdditiveExpression	prop_name_length + 1		51351	0		+			
ANR	51381	Identifier	prop_name_length		51351	0					
ANR	51382	PrimaryExpression	1		51351	1					
ANR	51383	Argument	internal		51351	1					
ANR	51384	Identifier	internal		51351	0					
ANR	51385	ExpressionStatement	prop_name [ 0 ] = '\\0'	5384:1:195505:195524	51351	4	True				
ANR	51386	AssignmentExpression	prop_name [ 0 ] = '\\0'		51351	0		=			
ANR	51387	ArrayIndexing	prop_name [ 0 ]		51351	0					
ANR	51388	Identifier	prop_name		51351	0					
ANR	51389	PrimaryExpression	0		51351	1					
ANR	51390	PrimaryExpression	'\\0'		51351	1					
ANR	51391	ExpressionStatement	"memcpy ( prop_name + 1 , src1 , src1_length + 1 )"	5385:1:195527:195569	51351	5	True				
ANR	51392	CallExpression	"memcpy ( prop_name + 1 , src1 , src1_length + 1 )"		51351	0					
ANR	51393	Callee	memcpy		51351	0					
ANR	51394	Identifier	memcpy		51351	0					
ANR	51395	ArgumentList	prop_name + 1		51351	1					
ANR	51396	Argument	prop_name + 1		51351	0					
ANR	51397	AdditiveExpression	prop_name + 1		51351	0		+			
ANR	51398	Identifier	prop_name		51351	0					
ANR	51399	PrimaryExpression	1		51351	1					
ANR	51400	Argument	src1		51351	1					
ANR	51401	Identifier	src1		51351	0					
ANR	51402	Argument	src1_length + 1		51351	2					
ANR	51403	AdditiveExpression	src1_length + 1		51351	0		+			
ANR	51404	Identifier	src1_length		51351	0					
ANR	51405	PrimaryExpression	1		51351	1					
ANR	51406	ExpressionStatement	"memcpy ( prop_name + 1 + src1_length + 1 , src2 , src2_length + 1 )"	5386:1:195572:195632	51351	6	True				
ANR	51407	CallExpression	"memcpy ( prop_name + 1 + src1_length + 1 , src2 , src2_length + 1 )"		51351	0					
ANR	51408	Callee	memcpy		51351	0					
ANR	51409	Identifier	memcpy		51351	0					
ANR	51410	ArgumentList	prop_name + 1 + src1_length + 1		51351	1					
ANR	51411	Argument	prop_name + 1 + src1_length + 1		51351	0					
ANR	51412	AdditiveExpression	prop_name + 1 + src1_length + 1		51351	0		+			
ANR	51413	Identifier	prop_name		51351	0					
ANR	51414	AdditiveExpression	1 + src1_length + 1		51351	1		+			
ANR	51415	PrimaryExpression	1		51351	0					
ANR	51416	AdditiveExpression	src1_length + 1		51351	1		+			
ANR	51417	Identifier	src1_length		51351	0					
ANR	51418	PrimaryExpression	1		51351	1					
ANR	51419	Argument	src2		51351	1					
ANR	51420	Identifier	src2		51351	0					
ANR	51421	Argument	src2_length + 1		51351	2					
ANR	51422	AdditiveExpression	src2_length + 1		51351	0		+			
ANR	51423	Identifier	src2_length		51351	0					
ANR	51424	PrimaryExpression	1		51351	1					
ANR	51425	ExpressionStatement	* dest = prop_name	5388:1:195636:195653	51351	7	True				
ANR	51426	AssignmentExpression	* dest = prop_name		51351	0		=			
ANR	51427	UnaryOperationExpression	* dest		51351	0					
ANR	51428	UnaryOperator	*		51351	0					
ANR	51429	Identifier	dest		51351	1					
ANR	51430	Identifier	prop_name		51351	1					
ANR	51431	ExpressionStatement	* dest_length = prop_name_length	5389:1:195656:195687	51351	8	True				
ANR	51432	AssignmentExpression	* dest_length = prop_name_length		51351	0		=			
ANR	51433	UnaryOperationExpression	* dest_length		51351	0					
ANR	51434	UnaryOperator	*		51351	0					
ANR	51435	Identifier	dest_length		51351	1					
ANR	51436	Identifier	prop_name_length		51351	1					
ANR	51437	ReturnType	ZEND_API void		51351	1					
ANR	51438	Identifier	zend_mangle_property_name		51351	2					
ANR	51439	ParameterList	"char * * dest , int * dest_length , const char * src1 , int src1_length , const char * src2 , int src2_length , int internal"		51351	3					
ANR	51440	Parameter	char * * dest	5377:40:195225:195235	51351	0	True				
ANR	51441	ParameterType	char * *		51351	0					
ANR	51442	Identifier	dest		51351	1					
ANR	51443	Parameter	int * dest_length	5377:53:195238:195253	51351	1	True				
ANR	51444	ParameterType	int *		51351	0					
ANR	51445	Identifier	dest_length		51351	1					
ANR	51446	Parameter	const char * src1	5377:71:195256:195271	51351	2	True				
ANR	51447	ParameterType	const char *		51351	0					
ANR	51448	Identifier	src1		51351	1					
ANR	51449	Parameter	int src1_length	5377:89:195274:195288	51351	3	True				
ANR	51450	ParameterType	int		51351	0					
ANR	51451	Identifier	src1_length		51351	1					
ANR	51452	Parameter	const char * src2	5377:106:195291:195306	51351	4	True				
ANR	51453	ParameterType	const char *		51351	0					
ANR	51454	Identifier	src2		51351	1					
ANR	51455	Parameter	int src2_length	5377:124:195309:195323	51351	5	True				
ANR	51456	ParameterType	int		51351	0					
ANR	51457	Identifier	src2_length		51351	1					
ANR	51458	Parameter	int internal	5377:141:195326:195337	51351	6	True				
ANR	51459	ParameterType	int		51351	0					
ANR	51460	Identifier	internal		51351	1					
ANR	51461	CFGEntryNode	ENTRY		51351		True				
ANR	51462	CFGExitNode	EXIT		51351		True				
ANR	51463	Symbol	internal		51351						
ANR	51464	Symbol	* dest		51351						
ANR	51465	Symbol	src1_length		51351						
ANR	51466	Symbol	* dest_length		51351						
ANR	51467	Symbol	dest		51351						
ANR	51468	Symbol	dest_length		51351						
ANR	51469	Symbol	prop_name		51351						
ANR	51470	Symbol	src2_length		51351						
ANR	51471	Symbol	src1		51351						
ANR	51472	Symbol	src2		51351						
ANR	51473	Symbol	* prop_name		51351						
ANR	51474	Symbol	prop_name_length		51351						
ANR	51475	Symbol	pemalloc		51351						
ANR	51476	Function	zend_strnlen	5393:0:195702:195825							
ANR	51477	FunctionDef	"zend_strnlen (const char * s , int maxlen)"		51476	0					
ANR	51478	CompoundStatement		5394:0:195763:195825	51476	0					
ANR	51479	IdentifierDeclStatement	int len = 0 ;	5395:1:195766:195777	51476	0	True				
ANR	51480	IdentifierDecl	len = 0		51476	0					
ANR	51481	IdentifierDeclType	int		51476	0					
ANR	51482	Identifier	len		51476	1					
ANR	51483	AssignmentExpression	len = 0		51476	2		=			
ANR	51484	Identifier	len		51476	0					
ANR	51485	PrimaryExpression	0		51476	1					
ANR	51486	WhileStatement	while ( * s ++ && maxlen -- )		51476	1					
ANR	51487	Condition	* s ++ && maxlen --	5396:8:195787:195802	51476	0	True				
ANR	51488	AndExpression	* s ++ && maxlen --		51476	0		&&			
ANR	51489	UnaryOperationExpression	* s ++		51476	0					
ANR	51490	UnaryOperator	*		51476	0					
ANR	51491	PostIncDecOperationExpression	s ++		51476	1					
ANR	51492	Identifier	s		51476	0					
ANR	51493	IncDec	++		51476	1					
ANR	51494	PostIncDecOperationExpression	maxlen --		51476	1					
ANR	51495	Identifier	maxlen		51476	0					
ANR	51496	IncDec	--		51476	1					
ANR	51497	ExpressionStatement	len ++	5396:26:195805:195810	51476	1	True				
ANR	51498	PostIncDecOperationExpression	len ++		51476	0					
ANR	51499	Identifier	len		51476	0					
ANR	51500	IncDec	++		51476	1					
ANR	51501	ReturnStatement	return len ;	5397:1:195813:195823	51476	2	True				
ANR	51502	Identifier	len		51476	0					
ANR	51503	ReturnType	static int		51476	1					
ANR	51504	Identifier	zend_strnlen		51476	2					
ANR	51505	ParameterList	"const char * s , int maxlen"		51476	3					
ANR	51506	Parameter	const char * s	5393:24:195726:195738	51476	0	True				
ANR	51507	ParameterType	const char *		51476	0					
ANR	51508	Identifier	s		51476	1					
ANR	51509	Parameter	int maxlen	5393:39:195741:195750	51476	1	True				
ANR	51510	ParameterType	int		51476	0					
ANR	51511	Identifier	maxlen		51476	1					
ANR	51512	CFGEntryNode	ENTRY		51476		True				
ANR	51513	CFGExitNode	EXIT		51476		True				
ANR	51514	Symbol	* s ++		51476						
ANR	51515	Symbol	s		51476						
ANR	51516	Symbol	len		51476						
ANR	51517	Symbol	maxlen		51476						
ANR	51518	Function	zend_unmangle_property_name_ex	5401:0:195838:196823							
ANR	51519	FunctionDef	"zend_unmangle_property_name_ex (const char * mangled_property , int len , const char * * class_name , const char * * prop_name , int * prop_len)"		51518	0					
ANR	51520	CompoundStatement		5402:0:195995:196823	51518	0					
ANR	51521	IdentifierDeclStatement	int class_name_len ;	5403:1:195998:196016	51518	0	True				
ANR	51522	IdentifierDecl	class_name_len		51518	0					
ANR	51523	IdentifierDeclType	int		51518	0					
ANR	51524	Identifier	class_name_len		51518	1					
ANR	51525	ExpressionStatement	* class_name = NULL	5405:1:196020:196038	51518	1	True				
ANR	51526	AssignmentExpression	* class_name = NULL		51518	0		=			
ANR	51527	UnaryOperationExpression	* class_name		51518	0					
ANR	51528	UnaryOperator	*		51518	0					
ANR	51529	Identifier	class_name		51518	1					
ANR	51530	Identifier	NULL		51518	1					
ANR	51531	IfStatement	if ( ! len || mangled_property [ 0 ] != 0 )		51518	2					
ANR	51532	Condition	! len || mangled_property [ 0 ] != 0	5407:5:196046:196077	51518	0	True				
ANR	51533	OrExpression	! len || mangled_property [ 0 ] != 0		51518	0		||			
ANR	51534	UnaryOperationExpression	! len		51518	0					
ANR	51535	UnaryOperator	!		51518	0					
ANR	51536	Identifier	len		51518	1					
ANR	51537	EqualityExpression	mangled_property [ 0 ] != 0		51518	1		!=			
ANR	51538	ArrayIndexing	mangled_property [ 0 ]		51518	0					
ANR	51539	Identifier	mangled_property		51518	0					
ANR	51540	PrimaryExpression	0		51518	1					
ANR	51541	PrimaryExpression	0		51518	1					
ANR	51542	CompoundStatement		6:39:84:84	51518	1					
ANR	51543	ExpressionStatement	* prop_name = mangled_property	5408:2:196084:196113	51518	0	True				
ANR	51544	AssignmentExpression	* prop_name = mangled_property		51518	0		=			
ANR	51545	UnaryOperationExpression	* prop_name		51518	0					
ANR	51546	UnaryOperator	*		51518	0					
ANR	51547	Identifier	prop_name		51518	1					
ANR	51548	Identifier	mangled_property		51518	1					
ANR	51549	IfStatement	if ( prop_len )		51518	1					
ANR	51550	Condition	prop_len	5409:6:196121:196128	51518	0	True				
ANR	51551	Identifier	prop_len		51518	0					
ANR	51552	CompoundStatement		8:16:135:135	51518	1					
ANR	51553	ExpressionStatement	* prop_len = len	5410:3:196136:196151	51518	0	True				
ANR	51554	AssignmentExpression	* prop_len = len		51518	0		=			
ANR	51555	UnaryOperationExpression	* prop_len		51518	0					
ANR	51556	UnaryOperator	*		51518	0					
ANR	51557	Identifier	prop_len		51518	1					
ANR	51558	Identifier	len		51518	1					
ANR	51559	ReturnStatement	return SUCCESS ;	5412:2:196159:196173	51518	2	True				
ANR	51560	Identifier	SUCCESS		51518	0					
ANR	51561	IfStatement	if ( len < 3 || mangled_property [ 1 ] == 0 )		51518	3					
ANR	51562	Condition	len < 3 || mangled_property [ 1 ] == 0	5414:5:196183:196215	51518	0	True				
ANR	51563	OrExpression	len < 3 || mangled_property [ 1 ] == 0		51518	0		||			
ANR	51564	RelationalExpression	len < 3		51518	0		<			
ANR	51565	Identifier	len		51518	0					
ANR	51566	PrimaryExpression	3		51518	1					
ANR	51567	EqualityExpression	mangled_property [ 1 ] == 0		51518	1		==			
ANR	51568	ArrayIndexing	mangled_property [ 1 ]		51518	0					
ANR	51569	Identifier	mangled_property		51518	0					
ANR	51570	PrimaryExpression	1		51518	1					
ANR	51571	PrimaryExpression	0		51518	1					
ANR	51572	CompoundStatement		13:40:222:222	51518	1					
ANR	51573	ExpressionStatement	"zend_error ( E_NOTICE , ""Illegal member variable name"" )"	5415:2:196222:196274	51518	0	True				
ANR	51574	CallExpression	"zend_error ( E_NOTICE , ""Illegal member variable name"" )"		51518	0					
ANR	51575	Callee	zend_error		51518	0					
ANR	51576	Identifier	zend_error		51518	0					
ANR	51577	ArgumentList	E_NOTICE		51518	1					
ANR	51578	Argument	E_NOTICE		51518	0					
ANR	51579	Identifier	E_NOTICE		51518	0					
ANR	51580	Argument	"""Illegal member variable name"""		51518	1					
ANR	51581	PrimaryExpression	"""Illegal member variable name"""		51518	0					
ANR	51582	ExpressionStatement	* prop_name = mangled_property	5416:2:196278:196307	51518	1	True				
ANR	51583	AssignmentExpression	* prop_name = mangled_property		51518	0		=			
ANR	51584	UnaryOperationExpression	* prop_name		51518	0					
ANR	51585	UnaryOperator	*		51518	0					
ANR	51586	Identifier	prop_name		51518	1					
ANR	51587	Identifier	mangled_property		51518	1					
ANR	51588	IfStatement	if ( prop_len )		51518	2					
ANR	51589	Condition	prop_len	5417:6:196315:196322	51518	0	True				
ANR	51590	Identifier	prop_len		51518	0					
ANR	51591	CompoundStatement		16:16:329:329	51518	1					
ANR	51592	ExpressionStatement	* prop_len = len	5418:3:196330:196345	51518	0	True				
ANR	51593	AssignmentExpression	* prop_len = len		51518	0		=			
ANR	51594	UnaryOperationExpression	* prop_len		51518	0					
ANR	51595	UnaryOperator	*		51518	0					
ANR	51596	Identifier	prop_len		51518	1					
ANR	51597	Identifier	len		51518	1					
ANR	51598	ReturnStatement	return FAILURE ;	5420:2:196353:196367	51518	3	True				
ANR	51599	Identifier	FAILURE		51518	0					
ANR	51600	ExpressionStatement	"class_name_len = zend_strnlen ( mangled_property + 1 , -- len - 1 ) + 1"	5423:1:196374:196440	51518	4	True				
ANR	51601	AssignmentExpression	"class_name_len = zend_strnlen ( mangled_property + 1 , -- len - 1 ) + 1"		51518	0		=			
ANR	51602	Identifier	class_name_len		51518	0					
ANR	51603	AdditiveExpression	"zend_strnlen ( mangled_property + 1 , -- len - 1 ) + 1"		51518	1		+			
ANR	51604	CallExpression	"zend_strnlen ( mangled_property + 1 , -- len - 1 )"		51518	0					
ANR	51605	Callee	zend_strnlen		51518	0					
ANR	51606	Identifier	zend_strnlen		51518	0					
ANR	51607	ArgumentList	mangled_property + 1		51518	1					
ANR	51608	Argument	mangled_property + 1		51518	0					
ANR	51609	AdditiveExpression	mangled_property + 1		51518	0		+			
ANR	51610	Identifier	mangled_property		51518	0					
ANR	51611	PrimaryExpression	1		51518	1					
ANR	51612	Argument	-- len - 1		51518	1					
ANR	51613	AdditiveExpression	-- len - 1		51518	0		-			
ANR	51614	UnaryExpression	-- len		51518	0					
ANR	51615	IncDec	--		51518	0					
ANR	51616	Identifier	len		51518	1					
ANR	51617	PrimaryExpression	1		51518	1					
ANR	51618	PrimaryExpression	1		51518	1					
ANR	51619	IfStatement	if ( class_name_len >= len || mangled_property [ class_name_len ] != 0 )		51518	5					
ANR	51620	Condition	class_name_len >= len || mangled_property [ class_name_len ] != 0	5424:5:196447:196506	51518	0	True				
ANR	51621	OrExpression	class_name_len >= len || mangled_property [ class_name_len ] != 0		51518	0		||			
ANR	51622	RelationalExpression	class_name_len >= len		51518	0		>=			
ANR	51623	Identifier	class_name_len		51518	0					
ANR	51624	Identifier	len		51518	1					
ANR	51625	EqualityExpression	mangled_property [ class_name_len ] != 0		51518	1		!=			
ANR	51626	ArrayIndexing	mangled_property [ class_name_len ]		51518	0					
ANR	51627	Identifier	mangled_property		51518	0					
ANR	51628	Identifier	class_name_len		51518	1					
ANR	51629	PrimaryExpression	0		51518	1					
ANR	51630	CompoundStatement		23:67:513:513	51518	1					
ANR	51631	ExpressionStatement	"zend_error ( E_NOTICE , ""Corrupt member variable name"" )"	5425:2:196513:196565	51518	0	True				
ANR	51632	CallExpression	"zend_error ( E_NOTICE , ""Corrupt member variable name"" )"		51518	0					
ANR	51633	Callee	zend_error		51518	0					
ANR	51634	Identifier	zend_error		51518	0					
ANR	51635	ArgumentList	E_NOTICE		51518	1					
ANR	51636	Argument	E_NOTICE		51518	0					
ANR	51637	Identifier	E_NOTICE		51518	0					
ANR	51638	Argument	"""Corrupt member variable name"""		51518	1					
ANR	51639	PrimaryExpression	"""Corrupt member variable name"""		51518	0					
ANR	51640	ExpressionStatement	* prop_name = mangled_property	5426:2:196569:196598	51518	1	True				
ANR	51641	AssignmentExpression	* prop_name = mangled_property		51518	0		=			
ANR	51642	UnaryOperationExpression	* prop_name		51518	0					
ANR	51643	UnaryOperator	*		51518	0					
ANR	51644	Identifier	prop_name		51518	1					
ANR	51645	Identifier	mangled_property		51518	1					
ANR	51646	IfStatement	if ( prop_len )		51518	2					
ANR	51647	Condition	prop_len	5427:6:196606:196613	51518	0	True				
ANR	51648	Identifier	prop_len		51518	0					
ANR	51649	CompoundStatement		26:16:620:620	51518	1					
ANR	51650	ExpressionStatement	* prop_len = len + 1	5428:3:196621:196640	51518	0	True				
ANR	51651	AssignmentExpression	* prop_len = len + 1		51518	0		=			
ANR	51652	UnaryOperationExpression	* prop_len		51518	0					
ANR	51653	UnaryOperator	*		51518	0					
ANR	51654	Identifier	prop_len		51518	1					
ANR	51655	AdditiveExpression	len + 1		51518	1		+			
ANR	51656	Identifier	len		51518	0					
ANR	51657	PrimaryExpression	1		51518	1					
ANR	51658	ReturnStatement	return FAILURE ;	5430:2:196648:196662	51518	3	True				
ANR	51659	Identifier	FAILURE		51518	0					
ANR	51660	ExpressionStatement	* class_name = mangled_property + 1	5432:1:196668:196702	51518	6	True				
ANR	51661	AssignmentExpression	* class_name = mangled_property + 1		51518	0		=			
ANR	51662	UnaryOperationExpression	* class_name		51518	0					
ANR	51663	UnaryOperator	*		51518	0					
ANR	51664	Identifier	class_name		51518	1					
ANR	51665	AdditiveExpression	mangled_property + 1		51518	1		+			
ANR	51666	Identifier	mangled_property		51518	0					
ANR	51667	PrimaryExpression	1		51518	1					
ANR	51668	ExpressionStatement	* prop_name = ( * class_name ) + class_name_len	5433:1:196705:196748	51518	7	True				
ANR	51669	AssignmentExpression	* prop_name = ( * class_name ) + class_name_len		51518	0		=			
ANR	51670	UnaryOperationExpression	* prop_name		51518	0					
ANR	51671	UnaryOperator	*		51518	0					
ANR	51672	Identifier	prop_name		51518	1					
ANR	51673	AdditiveExpression	( * class_name ) + class_name_len		51518	1		+			
ANR	51674	UnaryOperationExpression	* class_name		51518	0					
ANR	51675	UnaryOperator	*		51518	0					
ANR	51676	Identifier	class_name		51518	1					
ANR	51677	Identifier	class_name_len		51518	1					
ANR	51678	IfStatement	if ( prop_len )		51518	8					
ANR	51679	Condition	prop_len	5434:5:196755:196762	51518	0	True				
ANR	51680	Identifier	prop_len		51518	0					
ANR	51681	CompoundStatement		33:15:769:769	51518	1					
ANR	51682	ExpressionStatement	* prop_len = len - class_name_len	5435:2:196769:196801	51518	0	True				
ANR	51683	AssignmentExpression	* prop_len = len - class_name_len		51518	0		=			
ANR	51684	UnaryOperationExpression	* prop_len		51518	0					
ANR	51685	UnaryOperator	*		51518	0					
ANR	51686	Identifier	prop_len		51518	1					
ANR	51687	AdditiveExpression	len - class_name_len		51518	1		-			
ANR	51688	Identifier	len		51518	0					
ANR	51689	Identifier	class_name_len		51518	1					
ANR	51690	ReturnStatement	return SUCCESS ;	5437:1:196807:196821	51518	9	True				
ANR	51691	Identifier	SUCCESS		51518	0					
ANR	51692	ReturnType	ZEND_API int		51518	1					
ANR	51693	Identifier	zend_unmangle_property_name_ex		51518	2					
ANR	51694	ParameterList	"const char * mangled_property , int len , const char * * class_name , const char * * prop_name , int * prop_len"		51518	3					
ANR	51695	Parameter	const char * mangled_property	5401:44:195882:195909	51518	0	True				
ANR	51696	ParameterType	const char *		51518	0					
ANR	51697	Identifier	mangled_property		51518	1					
ANR	51698	Parameter	int len	5401:74:195912:195918	51518	1	True				
ANR	51699	ParameterType	int		51518	0					
ANR	51700	Identifier	len		51518	1					
ANR	51701	Parameter	const char * * class_name	5401:83:195921:195943	51518	2	True				
ANR	51702	ParameterType	const char * *		51518	0					
ANR	51703	Identifier	class_name		51518	1					
ANR	51704	Parameter	const char * * prop_name	5401:108:195946:195967	51518	3	True				
ANR	51705	ParameterType	const char * *		51518	0					
ANR	51706	Identifier	prop_name		51518	1					
ANR	51707	Parameter	int * prop_len	5401:132:195970:195982	51518	4	True				
ANR	51708	ParameterType	int *		51518	0					
ANR	51709	Identifier	prop_len		51518	1					
ANR	51710	CFGEntryNode	ENTRY		51518		True				
ANR	51711	CFGExitNode	EXIT		51518		True				
ANR	51712	Symbol	NULL		51518						
ANR	51713	Symbol	* class_name		51518						
ANR	51714	Symbol	SUCCESS		51518						
ANR	51715	Symbol	mangled_property		51518						
ANR	51716	Symbol	E_NOTICE		51518						
ANR	51717	Symbol	* prop_len		51518						
ANR	51718	Symbol	FAILURE		51518						
ANR	51719	Symbol	* class_name_len		51518						
ANR	51720	Symbol	zend_strnlen		51518						
ANR	51721	Symbol	prop_name		51518						
ANR	51722	Symbol	* mangled_property		51518						
ANR	51723	Symbol	prop_len		51518						
ANR	51724	Symbol	len		51518						
ANR	51725	Symbol	* prop_name		51518						
ANR	51726	Symbol	class_name_len		51518						
ANR	51727	Symbol	class_name		51518						
ANR	51728	Function	zend_do_declare_property	5441:0:196836:198473							
ANR	51729	FunctionDef	"zend_do_declare_property (const znode * var_name , const znode * value , zend_uint access_type TSRMLS_DC)"		51728	0					
ANR	51730	CompoundStatement		5442:0:196952:198473	51728	0					
ANR	51731	IdentifierDeclStatement	zval * property ;	5443:1:196955:196969	51728	0	True				
ANR	51732	IdentifierDecl	* property		51728	0					
ANR	51733	IdentifierDeclType	zval *		51728	0					
ANR	51734	Identifier	property		51728	1					
ANR	51735	IdentifierDeclStatement	zend_property_info * existing_property_info ;	5444:1:196972:197014	51728	1	True				
ANR	51736	IdentifierDecl	* existing_property_info		51728	0					
ANR	51737	IdentifierDeclType	zend_property_info *		51728	0					
ANR	51738	Identifier	existing_property_info		51728	1					
ANR	51739	IdentifierDeclStatement	char * comment = NULL ;	5445:1:197017:197037	51728	2	True				
ANR	51740	IdentifierDecl	* comment = NULL		51728	0					
ANR	51741	IdentifierDeclType	char *		51728	0					
ANR	51742	Identifier	comment		51728	1					
ANR	51743	AssignmentExpression	* comment = NULL		51728	2		=			
ANR	51744	Identifier	NULL		51728	0					
ANR	51745	Identifier	NULL		51728	1					
ANR	51746	IdentifierDeclStatement	int comment_len = 0 ;	5446:1:197040:197059	51728	3	True				
ANR	51747	IdentifierDecl	comment_len = 0		51728	0					
ANR	51748	IdentifierDeclType	int		51728	0					
ANR	51749	Identifier	comment_len		51728	1					
ANR	51750	AssignmentExpression	comment_len = 0		51728	2		=			
ANR	51751	Identifier	comment_len		51728	0					
ANR	51752	PrimaryExpression	0		51728	1					
ANR	51753	IfStatement	if ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_INTERFACE )		51728	4					
ANR	51754	Condition	CG ( active_class_entry ) -> ce_flags & ZEND_ACC_INTERFACE	5448:5:197067:197119	51728	0	True				
ANR	51755	BitAndExpression	CG ( active_class_entry ) -> ce_flags & ZEND_ACC_INTERFACE		51728	0		&			
ANR	51756	PtrMemberAccess	CG ( active_class_entry ) -> ce_flags		51728	0					
ANR	51757	CallExpression	CG ( active_class_entry )		51728	0					
ANR	51758	Callee	CG		51728	0					
ANR	51759	Identifier	CG		51728	0					
ANR	51760	ArgumentList	active_class_entry		51728	1					
ANR	51761	Argument	active_class_entry		51728	0					
ANR	51762	Identifier	active_class_entry		51728	0					
ANR	51763	Identifier	ce_flags		51728	1					
ANR	51764	Identifier	ZEND_ACC_INTERFACE		51728	1					
ANR	51765	CompoundStatement		7:60:169:169	51728	1					
ANR	51766	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Interfaces may not include member variables"" )"	5449:2:197126:197209	51728	0	True				
ANR	51767	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Interfaces may not include member variables"" )"		51728	0					
ANR	51768	Callee	zend_error_noreturn		51728	0					
ANR	51769	Identifier	zend_error_noreturn		51728	0					
ANR	51770	ArgumentList	E_COMPILE_ERROR		51728	1					
ANR	51771	Argument	E_COMPILE_ERROR		51728	0					
ANR	51772	Identifier	E_COMPILE_ERROR		51728	0					
ANR	51773	Argument	"""Interfaces may not include member variables"""		51728	1					
ANR	51774	PrimaryExpression	"""Interfaces may not include member variables"""		51728	0					
ANR	51775	IfStatement	if ( access_type & ZEND_ACC_ABSTRACT )		51728	5					
ANR	51776	Condition	access_type & ZEND_ACC_ABSTRACT	5452:5:197220:197250	51728	0	True				
ANR	51777	BitAndExpression	access_type & ZEND_ACC_ABSTRACT		51728	0		&			
ANR	51778	Identifier	access_type		51728	0					
ANR	51779	Identifier	ZEND_ACC_ABSTRACT		51728	1					
ANR	51780	CompoundStatement		11:38:300:300	51728	1					
ANR	51781	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Properties cannot be declared abstract"" )"	5453:2:197257:197335	51728	0	True				
ANR	51782	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Properties cannot be declared abstract"" )"		51728	0					
ANR	51783	Callee	zend_error_noreturn		51728	0					
ANR	51784	Identifier	zend_error_noreturn		51728	0					
ANR	51785	ArgumentList	E_COMPILE_ERROR		51728	1					
ANR	51786	Argument	E_COMPILE_ERROR		51728	0					
ANR	51787	Identifier	E_COMPILE_ERROR		51728	0					
ANR	51788	Argument	"""Properties cannot be declared abstract"""		51728	1					
ANR	51789	PrimaryExpression	"""Properties cannot be declared abstract"""		51728	0					
ANR	51790	IfStatement	if ( access_type & ZEND_ACC_FINAL )		51728	6					
ANR	51791	Condition	access_type & ZEND_ACC_FINAL	5456:5:197346:197373	51728	0	True				
ANR	51792	BitAndExpression	access_type & ZEND_ACC_FINAL		51728	0		&			
ANR	51793	Identifier	access_type		51728	0					
ANR	51794	Identifier	ZEND_ACC_FINAL		51728	1					
ANR	51795	CompoundStatement		15:35:423:423	51728	1					
ANR	51796	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare property %s::$%s final, the final modifier is allowed only for methods and classes"" , CG ( active_class_entry ) -> name , Z_STRVAL ( var_name -> u . constant ) )"	5457:2:197380:197586	51728	0	True				
ANR	51797	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare property %s::$%s final, the final modifier is allowed only for methods and classes"" , CG ( active_class_entry ) -> name , Z_STRVAL ( var_name -> u . constant ) )"		51728	0					
ANR	51798	Callee	zend_error_noreturn		51728	0					
ANR	51799	Identifier	zend_error_noreturn		51728	0					
ANR	51800	ArgumentList	E_COMPILE_ERROR		51728	1					
ANR	51801	Argument	E_COMPILE_ERROR		51728	0					
ANR	51802	Identifier	E_COMPILE_ERROR		51728	0					
ANR	51803	Argument	"""Cannot declare property %s::$%s final, the final modifier is allowed only for methods and classes"""		51728	1					
ANR	51804	PrimaryExpression	"""Cannot declare property %s::$%s final, the final modifier is allowed only for methods and classes"""		51728	0					
ANR	51805	Argument	CG ( active_class_entry ) -> name		51728	2					
ANR	51806	PtrMemberAccess	CG ( active_class_entry ) -> name		51728	0					
ANR	51807	CallExpression	CG ( active_class_entry )		51728	0					
ANR	51808	Callee	CG		51728	0					
ANR	51809	Identifier	CG		51728	0					
ANR	51810	ArgumentList	active_class_entry		51728	1					
ANR	51811	Argument	active_class_entry		51728	0					
ANR	51812	Identifier	active_class_entry		51728	0					
ANR	51813	Identifier	name		51728	1					
ANR	51814	Argument	Z_STRVAL ( var_name -> u . constant )		51728	3					
ANR	51815	CallExpression	Z_STRVAL ( var_name -> u . constant )		51728	0					
ANR	51816	Callee	Z_STRVAL		51728	0					
ANR	51817	Identifier	Z_STRVAL		51728	0					
ANR	51818	ArgumentList	var_name -> u . constant		51728	1					
ANR	51819	Argument	var_name -> u . constant		51728	0					
ANR	51820	MemberAccess	var_name -> u . constant		51728	0					
ANR	51821	PtrMemberAccess	var_name -> u		51728	0					
ANR	51822	Identifier	var_name		51728	0					
ANR	51823	Identifier	u		51728	1					
ANR	51824	Identifier	constant		51728	1					
ANR	51825	IfStatement	"if ( zend_hash_find ( & CG ( active_class_entry ) -> properties_info , Z_STRVAL ( var_name -> u . constant ) , Z_STRLEN ( var_name -> u . constant ) + 1 , ( void * * ) & existing_property_info ) == SUCCESS )"		51728	7					
ANR	51826	Condition	"zend_hash_find ( & CG ( active_class_entry ) -> properties_info , Z_STRVAL ( var_name -> u . constant ) , Z_STRLEN ( var_name -> u . constant ) + 1 , ( void * * ) & existing_property_info ) == SUCCESS"	5461:5:197597:197762	51728	0	True				
ANR	51827	EqualityExpression	"zend_hash_find ( & CG ( active_class_entry ) -> properties_info , Z_STRVAL ( var_name -> u . constant ) , Z_STRLEN ( var_name -> u . constant ) + 1 , ( void * * ) & existing_property_info ) == SUCCESS"		51728	0		==			
ANR	51828	CallExpression	"zend_hash_find ( & CG ( active_class_entry ) -> properties_info , Z_STRVAL ( var_name -> u . constant ) , Z_STRLEN ( var_name -> u . constant ) + 1 , ( void * * ) & existing_property_info )"		51728	0					
ANR	51829	Callee	zend_hash_find		51728	0					
ANR	51830	Identifier	zend_hash_find		51728	0					
ANR	51831	ArgumentList	& CG ( active_class_entry ) -> properties_info		51728	1					
ANR	51832	Argument	& CG ( active_class_entry ) -> properties_info		51728	0					
ANR	51833	UnaryOperationExpression	& CG ( active_class_entry ) -> properties_info		51728	0					
ANR	51834	UnaryOperator	&		51728	0					
ANR	51835	PtrMemberAccess	CG ( active_class_entry ) -> properties_info		51728	1					
ANR	51836	CallExpression	CG ( active_class_entry )		51728	0					
ANR	51837	Callee	CG		51728	0					
ANR	51838	Identifier	CG		51728	0					
ANR	51839	ArgumentList	active_class_entry		51728	1					
ANR	51840	Argument	active_class_entry		51728	0					
ANR	51841	Identifier	active_class_entry		51728	0					
ANR	51842	Identifier	properties_info		51728	1					
ANR	51843	Argument	Z_STRVAL ( var_name -> u . constant )		51728	1					
ANR	51844	CallExpression	Z_STRVAL ( var_name -> u . constant )		51728	0					
ANR	51845	Callee	Z_STRVAL		51728	0					
ANR	51846	Identifier	Z_STRVAL		51728	0					
ANR	51847	ArgumentList	var_name -> u . constant		51728	1					
ANR	51848	Argument	var_name -> u . constant		51728	0					
ANR	51849	MemberAccess	var_name -> u . constant		51728	0					
ANR	51850	PtrMemberAccess	var_name -> u		51728	0					
ANR	51851	Identifier	var_name		51728	0					
ANR	51852	Identifier	u		51728	1					
ANR	51853	Identifier	constant		51728	1					
ANR	51854	Argument	Z_STRLEN ( var_name -> u . constant ) + 1		51728	2					
ANR	51855	AdditiveExpression	Z_STRLEN ( var_name -> u . constant ) + 1		51728	0		+			
ANR	51856	CallExpression	Z_STRLEN ( var_name -> u . constant )		51728	0					
ANR	51857	Callee	Z_STRLEN		51728	0					
ANR	51858	Identifier	Z_STRLEN		51728	0					
ANR	51859	ArgumentList	var_name -> u . constant		51728	1					
ANR	51860	Argument	var_name -> u . constant		51728	0					
ANR	51861	MemberAccess	var_name -> u . constant		51728	0					
ANR	51862	PtrMemberAccess	var_name -> u		51728	0					
ANR	51863	Identifier	var_name		51728	0					
ANR	51864	Identifier	u		51728	1					
ANR	51865	Identifier	constant		51728	1					
ANR	51866	PrimaryExpression	1		51728	1					
ANR	51867	Argument	( void * * ) & existing_property_info		51728	3					
ANR	51868	CastExpression	( void * * ) & existing_property_info		51728	0					
ANR	51869	CastTarget	void * *		51728	0					
ANR	51870	UnaryOperationExpression	& existing_property_info		51728	1					
ANR	51871	UnaryOperator	&		51728	0					
ANR	51872	Identifier	existing_property_info		51728	1					
ANR	51873	Identifier	SUCCESS		51728	1					
ANR	51874	CompoundStatement		20:173:812:812	51728	1					
ANR	51875	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare %s::$%s"" , CG ( active_class_entry ) -> name , Z_STRVAL ( var_name -> u . constant ) )"	5462:2:197769:197895	51728	0	True				
ANR	51876	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare %s::$%s"" , CG ( active_class_entry ) -> name , Z_STRVAL ( var_name -> u . constant ) )"		51728	0					
ANR	51877	Callee	zend_error_noreturn		51728	0					
ANR	51878	Identifier	zend_error_noreturn		51728	0					
ANR	51879	ArgumentList	E_COMPILE_ERROR		51728	1					
ANR	51880	Argument	E_COMPILE_ERROR		51728	0					
ANR	51881	Identifier	E_COMPILE_ERROR		51728	0					
ANR	51882	Argument	"""Cannot redeclare %s::$%s"""		51728	1					
ANR	51883	PrimaryExpression	"""Cannot redeclare %s::$%s"""		51728	0					
ANR	51884	Argument	CG ( active_class_entry ) -> name		51728	2					
ANR	51885	PtrMemberAccess	CG ( active_class_entry ) -> name		51728	0					
ANR	51886	CallExpression	CG ( active_class_entry )		51728	0					
ANR	51887	Callee	CG		51728	0					
ANR	51888	Identifier	CG		51728	0					
ANR	51889	ArgumentList	active_class_entry		51728	1					
ANR	51890	Argument	active_class_entry		51728	0					
ANR	51891	Identifier	active_class_entry		51728	0					
ANR	51892	Identifier	name		51728	1					
ANR	51893	Argument	Z_STRVAL ( var_name -> u . constant )		51728	3					
ANR	51894	CallExpression	Z_STRVAL ( var_name -> u . constant )		51728	0					
ANR	51895	Callee	Z_STRVAL		51728	0					
ANR	51896	Identifier	Z_STRVAL		51728	0					
ANR	51897	ArgumentList	var_name -> u . constant		51728	1					
ANR	51898	Argument	var_name -> u . constant		51728	0					
ANR	51899	MemberAccess	var_name -> u . constant		51728	0					
ANR	51900	PtrMemberAccess	var_name -> u		51728	0					
ANR	51901	Identifier	var_name		51728	0					
ANR	51902	Identifier	u		51728	1					
ANR	51903	Identifier	constant		51728	1					
ANR	51904	ExpressionStatement	ALLOC_ZVAL ( property )	5464:1:197901:197921	51728	8	True				
ANR	51905	CallExpression	ALLOC_ZVAL ( property )		51728	0					
ANR	51906	Callee	ALLOC_ZVAL		51728	0					
ANR	51907	Identifier	ALLOC_ZVAL		51728	0					
ANR	51908	ArgumentList	property		51728	1					
ANR	51909	Argument	property		51728	0					
ANR	51910	Identifier	property		51728	0					
ANR	51911	IfStatement	if ( value )		51728	9					
ANR	51912	Condition	value	5466:5:197929:197933	51728	0	True				
ANR	51913	Identifier	value		51728	0					
ANR	51914	CompoundStatement		25:12:983:983	51728	1					
ANR	51915	ExpressionStatement	* property = value -> u . constant	5467:2:197940:197969	51728	0	True				
ANR	51916	AssignmentExpression	* property = value -> u . constant		51728	0		=			
ANR	51917	UnaryOperationExpression	* property		51728	0					
ANR	51918	UnaryOperator	*		51728	0					
ANR	51919	Identifier	property		51728	1					
ANR	51920	MemberAccess	value -> u . constant		51728	1					
ANR	51921	PtrMemberAccess	value -> u		51728	0					
ANR	51922	Identifier	value		51728	0					
ANR	51923	Identifier	u		51728	1					
ANR	51924	Identifier	constant		51728	1					
ANR	51925	ElseStatement	else		51728	0					
ANR	51926	CompoundStatement		27:8:1026:1026	51728	0					
ANR	51927	ExpressionStatement	INIT_PZVAL ( property )	5469:2:197983:198003	51728	0	True				
ANR	51928	CallExpression	INIT_PZVAL ( property )		51728	0					
ANR	51929	Callee	INIT_PZVAL		51728	0					
ANR	51930	Identifier	INIT_PZVAL		51728	0					
ANR	51931	ArgumentList	property		51728	1					
ANR	51932	Argument	property		51728	0					
ANR	51933	Identifier	property		51728	0					
ANR	51934	ExpressionStatement	Z_TYPE_P ( property ) = IS_NULL	5470:2:198007:198035	51728	1	True				
ANR	51935	AssignmentExpression	Z_TYPE_P ( property ) = IS_NULL		51728	0		=			
ANR	51936	CallExpression	Z_TYPE_P ( property )		51728	0					
ANR	51937	Callee	Z_TYPE_P		51728	0					
ANR	51938	Identifier	Z_TYPE_P		51728	0					
ANR	51939	ArgumentList	property		51728	1					
ANR	51940	Argument	property		51728	0					
ANR	51941	Identifier	property		51728	0					
ANR	51942	Identifier	IS_NULL		51728	1					
ANR	51943	IfStatement	if ( CG ( doc_comment ) )		51728	10					
ANR	51944	Condition	CG ( doc_comment )	5473:5:198046:198060	51728	0	True				
ANR	51945	CallExpression	CG ( doc_comment )		51728	0					
ANR	51946	Callee	CG		51728	0					
ANR	51947	Identifier	CG		51728	0					
ANR	51948	ArgumentList	doc_comment		51728	1					
ANR	51949	Argument	doc_comment		51728	0					
ANR	51950	Identifier	doc_comment		51728	0					
ANR	51951	CompoundStatement		32:22:1110:1110	51728	1					
ANR	51952	ExpressionStatement	comment = CG ( doc_comment )	5474:2:198067:198092	51728	0	True				
ANR	51953	AssignmentExpression	comment = CG ( doc_comment )		51728	0		=			
ANR	51954	Identifier	comment		51728	0					
ANR	51955	CallExpression	CG ( doc_comment )		51728	1					
ANR	51956	Callee	CG		51728	0					
ANR	51957	Identifier	CG		51728	0					
ANR	51958	ArgumentList	doc_comment		51728	1					
ANR	51959	Argument	doc_comment		51728	0					
ANR	51960	Identifier	doc_comment		51728	0					
ANR	51961	ExpressionStatement	comment_len = CG ( doc_comment_len )	5475:2:198096:198129	51728	1	True				
ANR	51962	AssignmentExpression	comment_len = CG ( doc_comment_len )		51728	0		=			
ANR	51963	Identifier	comment_len		51728	0					
ANR	51964	CallExpression	CG ( doc_comment_len )		51728	1					
ANR	51965	Callee	CG		51728	0					
ANR	51966	Identifier	CG		51728	0					
ANR	51967	ArgumentList	doc_comment_len		51728	1					
ANR	51968	Argument	doc_comment_len		51728	0					
ANR	51969	Identifier	doc_comment_len		51728	0					
ANR	51970	ExpressionStatement	CG ( doc_comment ) = NULL	5476:2:198133:198155	51728	2	True				
ANR	51971	AssignmentExpression	CG ( doc_comment ) = NULL		51728	0		=			
ANR	51972	CallExpression	CG ( doc_comment )		51728	0					
ANR	51973	Callee	CG		51728	0					
ANR	51974	Identifier	CG		51728	0					
ANR	51975	ArgumentList	doc_comment		51728	1					
ANR	51976	Argument	doc_comment		51728	0					
ANR	51977	Identifier	doc_comment		51728	0					
ANR	51978	Identifier	NULL		51728	1					
ANR	51979	ExpressionStatement	CG ( doc_comment_len ) = 0	5477:2:198159:198182	51728	3	True				
ANR	51980	AssignmentExpression	CG ( doc_comment_len ) = 0		51728	0		=			
ANR	51981	CallExpression	CG ( doc_comment_len )		51728	0					
ANR	51982	Callee	CG		51728	0					
ANR	51983	Identifier	CG		51728	0					
ANR	51984	ArgumentList	doc_comment_len		51728	1					
ANR	51985	Argument	doc_comment_len		51728	0					
ANR	51986	Identifier	doc_comment_len		51728	0					
ANR	51987	PrimaryExpression	0		51728	1					
ANR	51988	Statement	zend_declare_property_ex	5480:1:198189:198212	51728	11	True				
ANR	51989	Statement	(	5480:25:198213:198213	51728	12	True				
ANR	51990	Statement	CG	5480:26:198214:198215	51728	13	True				
ANR	51991	Statement	(	5480:28:198216:198216	51728	14	True				
ANR	51992	Statement	active_class_entry	5480:29:198217:198234	51728	15	True				
ANR	51993	Statement	)	5480:47:198235:198235	51728	16	True				
ANR	51994	Statement	","	5480:48:198236:198236	51728	17	True				
ANR	51995	Statement	zend_new_interned_string	5480:50:198238:198261	51728	18	True				
ANR	51996	Statement	(	5480:74:198262:198262	51728	19	True				
ANR	51997	Statement	Z_STRVAL	5480:75:198263:198270	51728	20	True				
ANR	51998	Statement	(	5480:83:198271:198271	51728	21	True				
ANR	51999	Statement	var_name	5480:84:198272:198279	51728	22	True				
ANR	52000	Statement	->	5480:92:198280:198281	51728	23	True				
ANR	52001	Statement	u	5480:94:198282:198282	51728	24	True				
ANR	52002	Statement	.	5480:95:198283:198283	51728	25	True				
ANR	52003	Statement	constant	5480:96:198284:198291	51728	26	True				
ANR	52004	Statement	)	5480:104:198292:198292	51728	27	True				
ANR	52005	Statement	","	5480:105:198293:198293	51728	28	True				
ANR	52006	Statement	Z_STRLEN	5480:107:198295:198302	51728	29	True				
ANR	52007	Statement	(	5480:115:198303:198303	51728	30	True				
ANR	52008	Statement	var_name	5480:116:198304:198311	51728	31	True				
ANR	52009	Statement	->	5480:124:198312:198313	51728	32	True				
ANR	52010	Statement	u	5480:126:198314:198314	51728	33	True				
ANR	52011	Statement	.	5480:127:198315:198315	51728	34	True				
ANR	52012	Statement	constant	5480:128:198316:198323	51728	35	True				
ANR	52013	Statement	)	5480:136:198324:198324	51728	36	True				
ANR	52014	Statement	+	5480:138:198326:198326	51728	37	True				
ANR	52015	Statement	1	5480:140:198328:198328	51728	38	True				
ANR	52016	Statement	","	5480:141:198329:198329	51728	39	True				
ANR	52017	Statement	0	5480:143:198331:198331	51728	40	True				
ANR	52018	Statement	TSRMLS_CC	5480:145:198333:198341	51728	41	True				
ANR	52019	Statement	)	5480:154:198342:198342	51728	42	True				
ANR	52020	Statement	","	5480:155:198343:198343	51728	43	True				
ANR	52021	Statement	Z_STRLEN	5480:157:198345:198352	51728	44	True				
ANR	52022	Statement	(	5480:165:198353:198353	51728	45	True				
ANR	52023	Statement	var_name	5480:166:198354:198361	51728	46	True				
ANR	52024	Statement	->	5480:174:198362:198363	51728	47	True				
ANR	52025	Statement	u	5480:176:198364:198364	51728	48	True				
ANR	52026	Statement	.	5480:177:198365:198365	51728	49	True				
ANR	52027	Statement	constant	5480:178:198366:198373	51728	50	True				
ANR	52028	Statement	)	5480:186:198374:198374	51728	51	True				
ANR	52029	Statement	","	5480:187:198375:198375	51728	52	True				
ANR	52030	Statement	property	5480:189:198377:198384	51728	53	True				
ANR	52031	Statement	","	5480:197:198385:198385	51728	54	True				
ANR	52032	Statement	access_type	5480:199:198387:198397	51728	55	True				
ANR	52033	Statement	","	5480:210:198398:198398	51728	56	True				
ANR	52034	Statement	comment	5480:212:198400:198406	51728	57	True				
ANR	52035	Statement	","	5480:219:198407:198407	51728	58	True				
ANR	52036	Statement	comment_len	5480:221:198409:198419	51728	59	True				
ANR	52037	Statement	TSRMLS_CC	5480:233:198421:198429	51728	60	True				
ANR	52038	Statement	)	5480:242:198430:198430	51728	61	True				
ANR	52039	ExpressionStatement		5480:243:198431:198431	51728	62	True				
ANR	52040	ExpressionStatement	efree ( Z_STRVAL ( var_name -> u . constant ) )	5481:1:198434:198471	51728	63	True				
ANR	52041	CallExpression	efree ( Z_STRVAL ( var_name -> u . constant ) )		51728	0					
ANR	52042	Callee	efree		51728	0					
ANR	52043	Identifier	efree		51728	0					
ANR	52044	ArgumentList	Z_STRVAL ( var_name -> u . constant )		51728	1					
ANR	52045	Argument	Z_STRVAL ( var_name -> u . constant )		51728	0					
ANR	52046	CallExpression	Z_STRVAL ( var_name -> u . constant )		51728	0					
ANR	52047	Callee	Z_STRVAL		51728	0					
ANR	52048	Identifier	Z_STRVAL		51728	0					
ANR	52049	ArgumentList	var_name -> u . constant		51728	1					
ANR	52050	Argument	var_name -> u . constant		51728	0					
ANR	52051	MemberAccess	var_name -> u . constant		51728	0					
ANR	52052	PtrMemberAccess	var_name -> u		51728	0					
ANR	52053	Identifier	var_name		51728	0					
ANR	52054	Identifier	u		51728	1					
ANR	52055	Identifier	constant		51728	1					
ANR	52056	ReturnType	void		51728	1					
ANR	52057	Identifier	zend_do_declare_property		51728	2					
ANR	52058	ParameterList	"const znode * var_name , const znode * value , zend_uint access_type TSRMLS_DC"		51728	3					
ANR	52059	Parameter	const znode * var_name	5441:30:196866:196886	51728	0	True				
ANR	52060	ParameterType	const znode *		51728	0					
ANR	52061	Identifier	var_name		51728	1					
ANR	52062	Parameter	const znode * value	5441:53:196889:196906	51728	1	True				
ANR	52063	ParameterType	const znode *		51728	0					
ANR	52064	Identifier	value		51728	1					
ANR	52065	Parameter	zend_uint access_type TSRMLS_DC	5441:73:196909:196939	51728	2	True				
ANR	52066	ParameterType	zend_uint access_type		51728	0					
ANR	52067	Identifier	TSRMLS_DC		51728	1					
ANR	52068	CFGEntryNode	ENTRY		51728		True				
ANR	52069	CFGExitNode	EXIT		51728		True				
ANR	52070	Symbol	* var_name		51728						
ANR	52071	Symbol	access_type		51728						
ANR	52072	Symbol	doc_comment		51728						
ANR	52073	Symbol	existing_property_info		51728						
ANR	52074	Symbol	active_class_entry		51728						
ANR	52075	Symbol	E_COMPILE_ERROR		51728						
ANR	52076	Symbol	* CG		51728						
ANR	52077	Symbol	Z_STRLEN		51728						
ANR	52078	Symbol	TSRMLS_DC		51728						
ANR	52079	Symbol	ZEND_ACC_FINAL		51728						
ANR	52080	Symbol	& existing_property_info		51728						
ANR	52081	Symbol	var_name -> u . constant		51728						
ANR	52082	Symbol	zend_hash_find		51728						
ANR	52083	Symbol	comment_len		51728						
ANR	52084	Symbol	IS_NULL		51728						
ANR	52085	Symbol	Z_STRVAL		51728						
ANR	52086	Symbol	property		51728						
ANR	52087	Symbol	CG ( active_class_entry ) -> ce_flags		51728						
ANR	52088	Symbol	ZEND_ACC_INTERFACE		51728						
ANR	52089	Symbol	var_name -> u		51728						
ANR	52090	Symbol	value		51728						
ANR	52091	Symbol	var_name		51728						
ANR	52092	Symbol	NULL		51728						
ANR	52093	Symbol	SUCCESS		51728						
ANR	52094	Symbol	* property		51728						
ANR	52095	Symbol	CG		51728						
ANR	52096	Symbol	value -> u		51728						
ANR	52097	Symbol	Z_TYPE_P		51728						
ANR	52098	Symbol	doc_comment_len		51728						
ANR	52099	Symbol	ZEND_ACC_ABSTRACT		51728						
ANR	52100	Symbol	* value		51728						
ANR	52101	Symbol	value -> u . constant		51728						
ANR	52102	Symbol	comment		51728						
ANR	52103	Symbol	CG ( active_class_entry ) -> name		51728						
ANR	52104	Symbol	& CG ( active_class_entry ) -> properties_info		51728						
ANR	52105	DeclStmt									
ANR	52106	Decl							zval	zval *	property
ANR	52107	DeclStmt									
ANR	52108	Decl							const char	const char *	cname
ANR	52109	DeclStmt									
ANR	52110	Decl							zend_ulong	zend_ulong	hash
ANR	52111	DeclStmt									
ANR	52112	Decl							zend_op	zend_op	opline
ANR	52113	DeclStmt									
ANR	52114	Decl							zend_llist	zend_llist *	fetch_list_ptr
ANR	52115	DeclStmt									
ANR	52116	Decl							zend_llist_element	zend_llist_element *	le
ANR	52117	DeclStmt									
ANR	52118	Decl							zend_op	zend_op *	opline_ptr
ANR	52119	DeclStmt									
ANR	52120	Decl							char	char *	name
ANR	52121	Decl							char	char *	cfilename
ANR	52122	DeclStmt									
ANR	52123	Decl							char	char [ ]	haltoff
ANR	52124	DeclStmt									
ANR	52125	Decl							int	int	len
ANR	52126	Decl							int	int	clen
ANR	52127	DeclStmt									
ANR	52128	Decl							znode	znode *	tmp
ANR	52129	DeclStmt									
ANR	52130	Decl							zend_op	zend_op *	opline
ANR	52131	DeclStmt									
ANR	52132	Decl							znode	znode	ctor_result
ANR	52133	Function	zend_get_ct_const	5662:0:204110:205538							
ANR	52134	FunctionDef	"zend_get_ct_const (const zval * const_name , int all_internal_constants_substitution TSRMLS_DC)"		52133	0					
ANR	52135	CompoundStatement		5663:0:204235:205538	52133	0					
ANR	52136	IdentifierDeclStatement	zend_constant * c = NULL ;	5664:1:204238:204261	52133	0	True				
ANR	52137	IdentifierDecl	* c = NULL		52133	0					
ANR	52138	IdentifierDeclType	zend_constant *		52133	0					
ANR	52139	Identifier	c		52133	1					
ANR	52140	AssignmentExpression	* c = NULL		52133	2		=			
ANR	52141	Identifier	NULL		52133	0					
ANR	52142	Identifier	NULL		52133	1					
ANR	52143	IfStatement	if ( Z_STRVAL_P ( const_name ) [ 0 ] == '\\\\' )		52133	1					
ANR	52144	Condition	Z_STRVAL_P ( const_name ) [ 0 ] == '\\\\'	5666:5:204269:204301	52133	0	True				
ANR	52145	EqualityExpression	Z_STRVAL_P ( const_name ) [ 0 ] == '\\\\'		52133	0		==			
ANR	52146	ArrayIndexing	Z_STRVAL_P ( const_name ) [ 0 ]		52133	0					
ANR	52147	CallExpression	Z_STRVAL_P ( const_name )		52133	0					
ANR	52148	Callee	Z_STRVAL_P		52133	0					
ANR	52149	Identifier	Z_STRVAL_P		52133	0					
ANR	52150	ArgumentList	const_name		52133	1					
ANR	52151	Argument	const_name		52133	0					
ANR	52152	Identifier	const_name		52133	0					
ANR	52153	PrimaryExpression	0		52133	1					
ANR	52154	PrimaryExpression	'\\\\'		52133	1					
ANR	52155	CompoundStatement		4:40:68:68	52133	1					
ANR	52156	IfStatement	"if ( zend_hash_find ( EG ( zend_constants ) , Z_STRVAL_P ( const_name ) + 1 , Z_STRLEN_P ( const_name ) , ( void * * ) & c ) == FAILURE )"		52133	0					
ANR	52157	Condition	"zend_hash_find ( EG ( zend_constants ) , Z_STRVAL_P ( const_name ) + 1 , Z_STRLEN_P ( const_name ) , ( void * * ) & c ) == FAILURE"	5667:6:204312:204420	52133	0	True				
ANR	52158	EqualityExpression	"zend_hash_find ( EG ( zend_constants ) , Z_STRVAL_P ( const_name ) + 1 , Z_STRLEN_P ( const_name ) , ( void * * ) & c ) == FAILURE"		52133	0		==			
ANR	52159	CallExpression	"zend_hash_find ( EG ( zend_constants ) , Z_STRVAL_P ( const_name ) + 1 , Z_STRLEN_P ( const_name ) , ( void * * ) & c )"		52133	0					
ANR	52160	Callee	zend_hash_find		52133	0					
ANR	52161	Identifier	zend_hash_find		52133	0					
ANR	52162	ArgumentList	EG ( zend_constants )		52133	1					
ANR	52163	Argument	EG ( zend_constants )		52133	0					
ANR	52164	CallExpression	EG ( zend_constants )		52133	0					
ANR	52165	Callee	EG		52133	0					
ANR	52166	Identifier	EG		52133	0					
ANR	52167	ArgumentList	zend_constants		52133	1					
ANR	52168	Argument	zend_constants		52133	0					
ANR	52169	Identifier	zend_constants		52133	0					
ANR	52170	Argument	Z_STRVAL_P ( const_name ) + 1		52133	1					
ANR	52171	AdditiveExpression	Z_STRVAL_P ( const_name ) + 1		52133	0		+			
ANR	52172	CallExpression	Z_STRVAL_P ( const_name )		52133	0					
ANR	52173	Callee	Z_STRVAL_P		52133	0					
ANR	52174	Identifier	Z_STRVAL_P		52133	0					
ANR	52175	ArgumentList	const_name		52133	1					
ANR	52176	Argument	const_name		52133	0					
ANR	52177	Identifier	const_name		52133	0					
ANR	52178	PrimaryExpression	1		52133	1					
ANR	52179	Argument	Z_STRLEN_P ( const_name )		52133	2					
ANR	52180	CallExpression	Z_STRLEN_P ( const_name )		52133	0					
ANR	52181	Callee	Z_STRLEN_P		52133	0					
ANR	52182	Identifier	Z_STRLEN_P		52133	0					
ANR	52183	ArgumentList	const_name		52133	1					
ANR	52184	Argument	const_name		52133	0					
ANR	52185	Identifier	const_name		52133	0					
ANR	52186	Argument	( void * * ) & c		52133	3					
ANR	52187	CastExpression	( void * * ) & c		52133	0					
ANR	52188	CastTarget	void * *		52133	0					
ANR	52189	UnaryOperationExpression	& c		52133	1					
ANR	52190	UnaryOperator	&		52133	0					
ANR	52191	Identifier	c		52133	1					
ANR	52192	Identifier	FAILURE		52133	1					
ANR	52193	CompoundStatement		6:3:192:284	52133	1					
ANR	52194	IdentifierDeclStatement	"char * lookup_name = zend_str_tolower_dup ( Z_STRVAL_P ( const_name ) + 1 , Z_STRLEN_P ( const_name ) - 1 ) ;"	5668:3:204428:204520	52133	0	True				
ANR	52195	IdentifierDecl	"* lookup_name = zend_str_tolower_dup ( Z_STRVAL_P ( const_name ) + 1 , Z_STRLEN_P ( const_name ) - 1 )"		52133	0					
ANR	52196	IdentifierDeclType	char *		52133	0					
ANR	52197	Identifier	lookup_name		52133	1					
ANR	52198	AssignmentExpression	"* lookup_name = zend_str_tolower_dup ( Z_STRVAL_P ( const_name ) + 1 , Z_STRLEN_P ( const_name ) - 1 )"		52133	2		=			
ANR	52199	Identifier	lookup_name		52133	0					
ANR	52200	CallExpression	"zend_str_tolower_dup ( Z_STRVAL_P ( const_name ) + 1 , Z_STRLEN_P ( const_name ) - 1 )"		52133	1					
ANR	52201	Callee	zend_str_tolower_dup		52133	0					
ANR	52202	Identifier	zend_str_tolower_dup		52133	0					
ANR	52203	ArgumentList	Z_STRVAL_P ( const_name ) + 1		52133	1					
ANR	52204	Argument	Z_STRVAL_P ( const_name ) + 1		52133	0					
ANR	52205	AdditiveExpression	Z_STRVAL_P ( const_name ) + 1		52133	0		+			
ANR	52206	CallExpression	Z_STRVAL_P ( const_name )		52133	0					
ANR	52207	Callee	Z_STRVAL_P		52133	0					
ANR	52208	Identifier	Z_STRVAL_P		52133	0					
ANR	52209	ArgumentList	const_name		52133	1					
ANR	52210	Argument	const_name		52133	0					
ANR	52211	Identifier	const_name		52133	0					
ANR	52212	PrimaryExpression	1		52133	1					
ANR	52213	Argument	Z_STRLEN_P ( const_name ) - 1		52133	1					
ANR	52214	AdditiveExpression	Z_STRLEN_P ( const_name ) - 1		52133	0		-			
ANR	52215	CallExpression	Z_STRLEN_P ( const_name )		52133	0					
ANR	52216	Callee	Z_STRLEN_P		52133	0					
ANR	52217	Identifier	Z_STRLEN_P		52133	0					
ANR	52218	ArgumentList	const_name		52133	1					
ANR	52219	Argument	const_name		52133	0					
ANR	52220	Identifier	const_name		52133	0					
ANR	52221	PrimaryExpression	1		52133	1					
ANR	52222	IfStatement	"if ( zend_hash_find ( EG ( zend_constants ) , lookup_name , Z_STRLEN_P ( const_name ) , ( void * * ) & c ) == SUCCESS )"		52133	1					
ANR	52223	Condition	"zend_hash_find ( EG ( zend_constants ) , lookup_name , Z_STRLEN_P ( const_name ) , ( void * * ) & c ) == SUCCESS"	5670:7:204530:204623	52133	0	True				
ANR	52224	EqualityExpression	"zend_hash_find ( EG ( zend_constants ) , lookup_name , Z_STRLEN_P ( const_name ) , ( void * * ) & c ) == SUCCESS"		52133	0		==			
ANR	52225	CallExpression	"zend_hash_find ( EG ( zend_constants ) , lookup_name , Z_STRLEN_P ( const_name ) , ( void * * ) & c )"		52133	0					
ANR	52226	Callee	zend_hash_find		52133	0					
ANR	52227	Identifier	zend_hash_find		52133	0					
ANR	52228	ArgumentList	EG ( zend_constants )		52133	1					
ANR	52229	Argument	EG ( zend_constants )		52133	0					
ANR	52230	CallExpression	EG ( zend_constants )		52133	0					
ANR	52231	Callee	EG		52133	0					
ANR	52232	Identifier	EG		52133	0					
ANR	52233	ArgumentList	zend_constants		52133	1					
ANR	52234	Argument	zend_constants		52133	0					
ANR	52235	Identifier	zend_constants		52133	0					
ANR	52236	Argument	lookup_name		52133	1					
ANR	52237	Identifier	lookup_name		52133	0					
ANR	52238	Argument	Z_STRLEN_P ( const_name )		52133	2					
ANR	52239	CallExpression	Z_STRLEN_P ( const_name )		52133	0					
ANR	52240	Callee	Z_STRLEN_P		52133	0					
ANR	52241	Identifier	Z_STRLEN_P		52133	0					
ANR	52242	ArgumentList	const_name		52133	1					
ANR	52243	Argument	const_name		52133	0					
ANR	52244	Identifier	const_name		52133	0					
ANR	52245	Argument	( void * * ) & c		52133	3					
ANR	52246	CastExpression	( void * * ) & c		52133	0					
ANR	52247	CastTarget	void * *		52133	0					
ANR	52248	UnaryOperationExpression	& c		52133	1					
ANR	52249	UnaryOperator	&		52133	0					
ANR	52250	Identifier	c		52133	1					
ANR	52251	Identifier	SUCCESS		52133	1					
ANR	52252	CompoundStatement		8:103:390:390	52133	1					
ANR	52253	IfStatement	if ( ( c -> flags & CONST_CT_SUBST ) && ! ( c -> flags & CONST_CS ) )		52133	0					
ANR	52254	Condition	( c -> flags & CONST_CT_SUBST ) && ! ( c -> flags & CONST_CS )	5671:8:204636:204688	52133	0	True				
ANR	52255	AndExpression	( c -> flags & CONST_CT_SUBST ) && ! ( c -> flags & CONST_CS )		52133	0		&&			
ANR	52256	BitAndExpression	c -> flags & CONST_CT_SUBST		52133	0		&			
ANR	52257	PtrMemberAccess	c -> flags		52133	0					
ANR	52258	Identifier	c		52133	0					
ANR	52259	Identifier	flags		52133	1					
ANR	52260	Identifier	CONST_CT_SUBST		52133	1					
ANR	52261	UnaryOperationExpression	! ( c -> flags & CONST_CS )		52133	1					
ANR	52262	UnaryOperator	!		52133	0					
ANR	52263	BitAndExpression	c -> flags & CONST_CS		52133	1		&			
ANR	52264	PtrMemberAccess	c -> flags		52133	0					
ANR	52265	Identifier	c		52133	0					
ANR	52266	Identifier	flags		52133	1					
ANR	52267	Identifier	CONST_CS		52133	1					
ANR	52268	CompoundStatement		9:63:455:455	52133	1					
ANR	52269	ExpressionStatement	efree ( lookup_name )	5672:5:204698:204716	52133	0	True				
ANR	52270	CallExpression	efree ( lookup_name )		52133	0					
ANR	52271	Callee	efree		52133	0					
ANR	52272	Identifier	efree		52133	0					
ANR	52273	ArgumentList	lookup_name		52133	1					
ANR	52274	Argument	lookup_name		52133	0					
ANR	52275	Identifier	lookup_name		52133	0					
ANR	52276	ReturnStatement	return c ;	5673:5:204723:204731	52133	1	True				
ANR	52277	Identifier	c		52133	0					
ANR	52278	ExpressionStatement	efree ( lookup_name )	5676:3:204747:204765	52133	2	True				
ANR	52279	CallExpression	efree ( lookup_name )		52133	0					
ANR	52280	Callee	efree		52133	0					
ANR	52281	Identifier	efree		52133	0					
ANR	52282	ArgumentList	lookup_name		52133	1					
ANR	52283	Argument	lookup_name		52133	0					
ANR	52284	Identifier	lookup_name		52133	0					
ANR	52285	ReturnStatement	return NULL ;	5677:3:204770:204781	52133	3	True				
ANR	52286	Identifier	NULL		52133	0					
ANR	52287	ElseStatement	else		52133	0					
ANR	52288	IfStatement	"if ( zend_hash_find ( EG ( zend_constants ) , Z_STRVAL_P ( const_name ) , Z_STRLEN_P ( const_name ) + 1 , ( void * * ) & c ) == FAILURE )"		52133	0					
ANR	52289	Condition	"zend_hash_find ( EG ( zend_constants ) , Z_STRVAL_P ( const_name ) , Z_STRLEN_P ( const_name ) + 1 , ( void * * ) & c ) == FAILURE"	5679:12:204799:204907	52133	0	True				
ANR	52290	EqualityExpression	"zend_hash_find ( EG ( zend_constants ) , Z_STRVAL_P ( const_name ) , Z_STRLEN_P ( const_name ) + 1 , ( void * * ) & c ) == FAILURE"		52133	0		==			
ANR	52291	CallExpression	"zend_hash_find ( EG ( zend_constants ) , Z_STRVAL_P ( const_name ) , Z_STRLEN_P ( const_name ) + 1 , ( void * * ) & c )"		52133	0					
ANR	52292	Callee	zend_hash_find		52133	0					
ANR	52293	Identifier	zend_hash_find		52133	0					
ANR	52294	ArgumentList	EG ( zend_constants )		52133	1					
ANR	52295	Argument	EG ( zend_constants )		52133	0					
ANR	52296	CallExpression	EG ( zend_constants )		52133	0					
ANR	52297	Callee	EG		52133	0					
ANR	52298	Identifier	EG		52133	0					
ANR	52299	ArgumentList	zend_constants		52133	1					
ANR	52300	Argument	zend_constants		52133	0					
ANR	52301	Identifier	zend_constants		52133	0					
ANR	52302	Argument	Z_STRVAL_P ( const_name )		52133	1					
ANR	52303	CallExpression	Z_STRVAL_P ( const_name )		52133	0					
ANR	52304	Callee	Z_STRVAL_P		52133	0					
ANR	52305	Identifier	Z_STRVAL_P		52133	0					
ANR	52306	ArgumentList	const_name		52133	1					
ANR	52307	Argument	const_name		52133	0					
ANR	52308	Identifier	const_name		52133	0					
ANR	52309	Argument	Z_STRLEN_P ( const_name ) + 1		52133	2					
ANR	52310	AdditiveExpression	Z_STRLEN_P ( const_name ) + 1		52133	0		+			
ANR	52311	CallExpression	Z_STRLEN_P ( const_name )		52133	0					
ANR	52312	Callee	Z_STRLEN_P		52133	0					
ANR	52313	Identifier	Z_STRLEN_P		52133	0					
ANR	52314	ArgumentList	const_name		52133	1					
ANR	52315	Argument	const_name		52133	0					
ANR	52316	Identifier	const_name		52133	0					
ANR	52317	PrimaryExpression	1		52133	1					
ANR	52318	Argument	( void * * ) & c		52133	3					
ANR	52319	CastExpression	( void * * ) & c		52133	0					
ANR	52320	CastTarget	void * *		52133	0					
ANR	52321	UnaryOperationExpression	& c		52133	1					
ANR	52322	UnaryOperator	&		52133	0					
ANR	52323	Identifier	c		52133	1					
ANR	52324	Identifier	FAILURE		52133	1					
ANR	52325	CompoundStatement		18:2:678:766	52133	1					
ANR	52326	IdentifierDeclStatement	"char * lookup_name = zend_str_tolower_dup ( Z_STRVAL_P ( const_name ) , Z_STRLEN_P ( const_name ) ) ;"	5680:2:204914:205002	52133	0	True				
ANR	52327	IdentifierDecl	"* lookup_name = zend_str_tolower_dup ( Z_STRVAL_P ( const_name ) , Z_STRLEN_P ( const_name ) )"		52133	0					
ANR	52328	IdentifierDeclType	char *		52133	0					
ANR	52329	Identifier	lookup_name		52133	1					
ANR	52330	AssignmentExpression	"* lookup_name = zend_str_tolower_dup ( Z_STRVAL_P ( const_name ) , Z_STRLEN_P ( const_name ) )"		52133	2		=			
ANR	52331	Identifier	lookup_name		52133	0					
ANR	52332	CallExpression	"zend_str_tolower_dup ( Z_STRVAL_P ( const_name ) , Z_STRLEN_P ( const_name ) )"		52133	1					
ANR	52333	Callee	zend_str_tolower_dup		52133	0					
ANR	52334	Identifier	zend_str_tolower_dup		52133	0					
ANR	52335	ArgumentList	Z_STRVAL_P ( const_name )		52133	1					
ANR	52336	Argument	Z_STRVAL_P ( const_name )		52133	0					
ANR	52337	CallExpression	Z_STRVAL_P ( const_name )		52133	0					
ANR	52338	Callee	Z_STRVAL_P		52133	0					
ANR	52339	Identifier	Z_STRVAL_P		52133	0					
ANR	52340	ArgumentList	const_name		52133	1					
ANR	52341	Argument	const_name		52133	0					
ANR	52342	Identifier	const_name		52133	0					
ANR	52343	Argument	Z_STRLEN_P ( const_name )		52133	1					
ANR	52344	CallExpression	Z_STRLEN_P ( const_name )		52133	0					
ANR	52345	Callee	Z_STRLEN_P		52133	0					
ANR	52346	Identifier	Z_STRLEN_P		52133	0					
ANR	52347	ArgumentList	const_name		52133	1					
ANR	52348	Argument	const_name		52133	0					
ANR	52349	Identifier	const_name		52133	0					
ANR	52350	IfStatement	"if ( zend_hash_find ( EG ( zend_constants ) , lookup_name , Z_STRLEN_P ( const_name ) + 1 , ( void * * ) & c ) == SUCCESS )"		52133	1					
ANR	52351	Condition	"zend_hash_find ( EG ( zend_constants ) , lookup_name , Z_STRLEN_P ( const_name ) + 1 , ( void * * ) & c ) == SUCCESS"	5682:6:205011:205106	52133	0	True				
ANR	52352	EqualityExpression	"zend_hash_find ( EG ( zend_constants ) , lookup_name , Z_STRLEN_P ( const_name ) + 1 , ( void * * ) & c ) == SUCCESS"		52133	0		==			
ANR	52353	CallExpression	"zend_hash_find ( EG ( zend_constants ) , lookup_name , Z_STRLEN_P ( const_name ) + 1 , ( void * * ) & c )"		52133	0					
ANR	52354	Callee	zend_hash_find		52133	0					
ANR	52355	Identifier	zend_hash_find		52133	0					
ANR	52356	ArgumentList	EG ( zend_constants )		52133	1					
ANR	52357	Argument	EG ( zend_constants )		52133	0					
ANR	52358	CallExpression	EG ( zend_constants )		52133	0					
ANR	52359	Callee	EG		52133	0					
ANR	52360	Identifier	EG		52133	0					
ANR	52361	ArgumentList	zend_constants		52133	1					
ANR	52362	Argument	zend_constants		52133	0					
ANR	52363	Identifier	zend_constants		52133	0					
ANR	52364	Argument	lookup_name		52133	1					
ANR	52365	Identifier	lookup_name		52133	0					
ANR	52366	Argument	Z_STRLEN_P ( const_name ) + 1		52133	2					
ANR	52367	AdditiveExpression	Z_STRLEN_P ( const_name ) + 1		52133	0		+			
ANR	52368	CallExpression	Z_STRLEN_P ( const_name )		52133	0					
ANR	52369	Callee	Z_STRLEN_P		52133	0					
ANR	52370	Identifier	Z_STRLEN_P		52133	0					
ANR	52371	ArgumentList	const_name		52133	1					
ANR	52372	Argument	const_name		52133	0					
ANR	52373	Identifier	const_name		52133	0					
ANR	52374	PrimaryExpression	1		52133	1					
ANR	52375	Argument	( void * * ) & c		52133	3					
ANR	52376	CastExpression	( void * * ) & c		52133	0					
ANR	52377	CastTarget	void * *		52133	0					
ANR	52378	UnaryOperationExpression	& c		52133	1					
ANR	52379	UnaryOperator	&		52133	0					
ANR	52380	Identifier	c		52133	1					
ANR	52381	Identifier	SUCCESS		52133	1					
ANR	52382	CompoundStatement		20:104:873:873	52133	1					
ANR	52383	IfStatement	if ( ( c -> flags & CONST_CT_SUBST ) && ! ( c -> flags & CONST_CS ) )		52133	0					
ANR	52384	Condition	( c -> flags & CONST_CT_SUBST ) && ! ( c -> flags & CONST_CS )	5683:7:205118:205170	52133	0	True				
ANR	52385	AndExpression	( c -> flags & CONST_CT_SUBST ) && ! ( c -> flags & CONST_CS )		52133	0		&&			
ANR	52386	BitAndExpression	c -> flags & CONST_CT_SUBST		52133	0		&			
ANR	52387	PtrMemberAccess	c -> flags		52133	0					
ANR	52388	Identifier	c		52133	0					
ANR	52389	Identifier	flags		52133	1					
ANR	52390	Identifier	CONST_CT_SUBST		52133	1					
ANR	52391	UnaryOperationExpression	! ( c -> flags & CONST_CS )		52133	1					
ANR	52392	UnaryOperator	!		52133	0					
ANR	52393	BitAndExpression	c -> flags & CONST_CS		52133	1		&			
ANR	52394	PtrMemberAccess	c -> flags		52133	0					
ANR	52395	Identifier	c		52133	0					
ANR	52396	Identifier	flags		52133	1					
ANR	52397	Identifier	CONST_CS		52133	1					
ANR	52398	CompoundStatement		21:62:937:937	52133	1					
ANR	52399	ExpressionStatement	efree ( lookup_name )	5684:4:205179:205197	52133	0	True				
ANR	52400	CallExpression	efree ( lookup_name )		52133	0					
ANR	52401	Callee	efree		52133	0					
ANR	52402	Identifier	efree		52133	0					
ANR	52403	ArgumentList	lookup_name		52133	1					
ANR	52404	Argument	lookup_name		52133	0					
ANR	52405	Identifier	lookup_name		52133	0					
ANR	52406	ReturnStatement	return c ;	5685:4:205203:205211	52133	1	True				
ANR	52407	Identifier	c		52133	0					
ANR	52408	ExpressionStatement	efree ( lookup_name )	5688:2:205224:205242	52133	2	True				
ANR	52409	CallExpression	efree ( lookup_name )		52133	0					
ANR	52410	Callee	efree		52133	0					
ANR	52411	Identifier	efree		52133	0					
ANR	52412	ArgumentList	lookup_name		52133	1					
ANR	52413	Argument	lookup_name		52133	0					
ANR	52414	Identifier	lookup_name		52133	0					
ANR	52415	ReturnStatement	return NULL ;	5689:2:205246:205257	52133	3	True				
ANR	52416	Identifier	NULL		52133	0					
ANR	52417	IfStatement	if ( c -> flags & CONST_CT_SUBST )		52133	2					
ANR	52418	Condition	c -> flags & CONST_CT_SUBST	5691:5:205267:205291	52133	0	True				
ANR	52419	BitAndExpression	c -> flags & CONST_CT_SUBST		52133	0		&			
ANR	52420	PtrMemberAccess	c -> flags		52133	0					
ANR	52421	Identifier	c		52133	0					
ANR	52422	Identifier	flags		52133	1					
ANR	52423	Identifier	CONST_CT_SUBST		52133	1					
ANR	52424	CompoundStatement		29:32:1058:1058	52133	1					
ANR	52425	ReturnStatement	return c ;	5692:2:205298:205306	52133	0	True				
ANR	52426	Identifier	c		52133	0					
ANR	52427	IfStatement	if ( all_internal_constants_substitution && ( c -> flags & CONST_PERSISTENT ) && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) && ! IS_CONSTANT_TYPE ( Z_TYPE ( c -> value ) ) )		52133	3					
ANR	52428	Condition	all_internal_constants_substitution && ( c -> flags & CONST_PERSISTENT ) && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) && ! IS_CONSTANT_TYPE ( Z_TYPE ( c -> value ) )	5694:5:205316:205504	52133	0	True				
ANR	52429	AndExpression	all_internal_constants_substitution && ( c -> flags & CONST_PERSISTENT ) && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) && ! IS_CONSTANT_TYPE ( Z_TYPE ( c -> value ) )		52133	0		&&			
ANR	52430	Identifier	all_internal_constants_substitution		52133	0					
ANR	52431	AndExpression	( c -> flags & CONST_PERSISTENT ) && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) && ! IS_CONSTANT_TYPE ( Z_TYPE ( c -> value ) )		52133	1		&&			
ANR	52432	BitAndExpression	c -> flags & CONST_PERSISTENT		52133	0		&			
ANR	52433	PtrMemberAccess	c -> flags		52133	0					
ANR	52434	Identifier	c		52133	0					
ANR	52435	Identifier	flags		52133	1					
ANR	52436	Identifier	CONST_PERSISTENT		52133	1					
ANR	52437	AndExpression	! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) && ! IS_CONSTANT_TYPE ( Z_TYPE ( c -> value ) )		52133	1		&&			
ANR	52438	UnaryOperationExpression	! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION )		52133	0					
ANR	52439	UnaryOperator	!		52133	0					
ANR	52440	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		52133	1		&			
ANR	52441	CallExpression	CG ( compiler_options )		52133	0					
ANR	52442	Callee	CG		52133	0					
ANR	52443	Identifier	CG		52133	0					
ANR	52444	ArgumentList	compiler_options		52133	1					
ANR	52445	Argument	compiler_options		52133	0					
ANR	52446	Identifier	compiler_options		52133	0					
ANR	52447	Identifier	ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		52133	1					
ANR	52448	UnaryOperationExpression	! IS_CONSTANT_TYPE ( Z_TYPE ( c -> value ) )		52133	1					
ANR	52449	UnaryOperator	!		52133	0					
ANR	52450	CallExpression	IS_CONSTANT_TYPE ( Z_TYPE ( c -> value ) )		52133	1					
ANR	52451	Callee	IS_CONSTANT_TYPE		52133	0					
ANR	52452	Identifier	IS_CONSTANT_TYPE		52133	0					
ANR	52453	ArgumentList	Z_TYPE ( c -> value )		52133	1					
ANR	52454	Argument	Z_TYPE ( c -> value )		52133	0					
ANR	52455	CallExpression	Z_TYPE ( c -> value )		52133	0					
ANR	52456	Callee	Z_TYPE		52133	0					
ANR	52457	Identifier	Z_TYPE		52133	0					
ANR	52458	ArgumentList	c -> value		52133	1					
ANR	52459	Argument	c -> value		52133	0					
ANR	52460	PtrMemberAccess	c -> value		52133	0					
ANR	52461	Identifier	c		52133	0					
ANR	52462	Identifier	value		52133	1					
ANR	52463	CompoundStatement		35:42:1271:1271	52133	1					
ANR	52464	ReturnStatement	return c ;	5698:2:205511:205519	52133	0	True				
ANR	52465	Identifier	c		52133	0					
ANR	52466	ReturnStatement	return NULL ;	5700:1:205525:205536	52133	4	True				
ANR	52467	Identifier	NULL		52133	0					
ANR	52468	ReturnType	static zend_constant *		52133	1					
ANR	52469	Identifier	zend_get_ct_const		52133	2					
ANR	52470	ParameterList	"const zval * const_name , int all_internal_constants_substitution TSRMLS_DC"		52133	3					
ANR	52471	Parameter	const zval * const_name	5662:40:204150:204171	52133	0	True				
ANR	52472	ParameterType	const zval *		52133	0					
ANR	52473	Identifier	const_name		52133	1					
ANR	52474	Parameter	int all_internal_constants_substitution TSRMLS_DC	5662:64:204174:204222	52133	1	True				
ANR	52475	ParameterType	int all_internal_constants_substitution		52133	0					
ANR	52476	Identifier	TSRMLS_DC		52133	1					
ANR	52477	CFGEntryNode	ENTRY		52133		True				
ANR	52478	CFGExitNode	EXIT		52133		True				
ANR	52479	Symbol	c -> flags		52133						
ANR	52480	Symbol	IS_CONSTANT_TYPE		52133						
ANR	52481	Symbol	const_name		52133						
ANR	52482	Symbol	Z_TYPE		52133						
ANR	52483	Symbol	c -> value		52133						
ANR	52484	Symbol	TSRMLS_DC		52133						
ANR	52485	Symbol	zend_hash_find		52133						
ANR	52486	Symbol	compiler_options		52133						
ANR	52487	Symbol	lookup_name		52133						
ANR	52488	Symbol	zend_constants		52133						
ANR	52489	Symbol	Z_STRLEN_P		52133						
ANR	52490	Symbol	* Z_STRVAL_P		52133						
ANR	52491	Symbol	ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		52133						
ANR	52492	Symbol	CONST_PERSISTENT		52133						
ANR	52493	Symbol	all_internal_constants_substitution		52133						
ANR	52494	Symbol	zend_str_tolower_dup		52133						
ANR	52495	Symbol	CONST_CT_SUBST		52133						
ANR	52496	Symbol	EG		52133						
ANR	52497	Symbol	CONST_CS		52133						
ANR	52498	Symbol	c		52133						
ANR	52499	Symbol	NULL		52133						
ANR	52500	Symbol	SUCCESS		52133						
ANR	52501	Symbol	CG		52133						
ANR	52502	Symbol	& c		52133						
ANR	52503	Symbol	Z_STRVAL_P		52133						
ANR	52504	Symbol	FAILURE		52133						
ANR	52505	Symbol	* c		52133						
ANR	52506	Function	zend_constant_ct_subst	5704:0:205551:205978							
ANR	52507	FunctionDef	"zend_constant_ct_subst (znode * result , zval * const_name , int all_internal_constants_substitution TSRMLS_DC)"		52506	0					
ANR	52508	CompoundStatement		5705:0:205679:205978	52506	0					
ANR	52509	Statement	zend_constant	5706:1:205682:205694	52506	0	True				
ANR	52510	Statement	*	5706:15:205696:205696	52506	1	True				
ANR	52511	Statement	c	5706:16:205697:205697	52506	2	True				
ANR	52512	Statement	=	5706:18:205699:205699	52506	3	True				
ANR	52513	Statement	zend_get_ct_const	5706:20:205701:205717	52506	4	True				
ANR	52514	Statement	(	5706:37:205718:205718	52506	5	True				
ANR	52515	Statement	const_name	5706:38:205719:205728	52506	6	True				
ANR	52516	Statement	","	5706:48:205729:205729	52506	7	True				
ANR	52517	Statement	all_internal_constants_substitution	5706:50:205731:205765	52506	8	True				
ANR	52518	Statement	TSRMLS_CC	5706:86:205767:205775	52506	9	True				
ANR	52519	Statement	)	5706:95:205776:205776	52506	10	True				
ANR	52520	ExpressionStatement		5706:96:205777:205777	52506	11	True				
ANR	52521	IfStatement	if ( c )		52506	12					
ANR	52522	Condition	c	5708:5:205785:205785	52506	0	True				
ANR	52523	Identifier	c		52506	0					
ANR	52524	CompoundStatement		4:8:108:108	52506	1					
ANR	52525	ExpressionStatement	zval_dtor ( const_name )	5709:2:205792:205813	52506	0	True				
ANR	52526	CallExpression	zval_dtor ( const_name )		52506	0					
ANR	52527	Callee	zval_dtor		52506	0					
ANR	52528	Identifier	zval_dtor		52506	0					
ANR	52529	ArgumentList	const_name		52506	1					
ANR	52530	Argument	const_name		52506	0					
ANR	52531	Identifier	const_name		52506	0					
ANR	52532	ExpressionStatement	result -> op_type = IS_CONST	5710:2:205817:205843	52506	1	True				
ANR	52533	AssignmentExpression	result -> op_type = IS_CONST		52506	0		=			
ANR	52534	PtrMemberAccess	result -> op_type		52506	0					
ANR	52535	Identifier	result		52506	0					
ANR	52536	Identifier	op_type		52506	1					
ANR	52537	Identifier	IS_CONST		52506	1					
ANR	52538	ExpressionStatement	result -> u . constant = c -> value	5711:2:205847:205876	52506	2	True				
ANR	52539	AssignmentExpression	result -> u . constant = c -> value		52506	0		=			
ANR	52540	MemberAccess	result -> u . constant		52506	0					
ANR	52541	PtrMemberAccess	result -> u		52506	0					
ANR	52542	Identifier	result		52506	0					
ANR	52543	Identifier	u		52506	1					
ANR	52544	Identifier	constant		52506	1					
ANR	52545	PtrMemberAccess	c -> value		52506	1					
ANR	52546	Identifier	c		52506	0					
ANR	52547	Identifier	value		52506	1					
ANR	52548	ExpressionStatement	zval_copy_ctor ( & result -> u . constant )	5712:2:205880:205915	52506	3	True				
ANR	52549	CallExpression	zval_copy_ctor ( & result -> u . constant )		52506	0					
ANR	52550	Callee	zval_copy_ctor		52506	0					
ANR	52551	Identifier	zval_copy_ctor		52506	0					
ANR	52552	ArgumentList	& result -> u . constant		52506	1					
ANR	52553	Argument	& result -> u . constant		52506	0					
ANR	52554	UnaryOperationExpression	& result -> u . constant		52506	0					
ANR	52555	UnaryOperator	&		52506	0					
ANR	52556	MemberAccess	result -> u . constant		52506	1					
ANR	52557	PtrMemberAccess	result -> u		52506	0					
ANR	52558	Identifier	result		52506	0					
ANR	52559	Identifier	u		52506	1					
ANR	52560	Identifier	constant		52506	1					
ANR	52561	ExpressionStatement	INIT_PZVAL ( & result -> u . constant )	5713:2:205919:205950	52506	4	True				
ANR	52562	CallExpression	INIT_PZVAL ( & result -> u . constant )		52506	0					
ANR	52563	Callee	INIT_PZVAL		52506	0					
ANR	52564	Identifier	INIT_PZVAL		52506	0					
ANR	52565	ArgumentList	& result -> u . constant		52506	1					
ANR	52566	Argument	& result -> u . constant		52506	0					
ANR	52567	UnaryOperationExpression	& result -> u . constant		52506	0					
ANR	52568	UnaryOperator	&		52506	0					
ANR	52569	MemberAccess	result -> u . constant		52506	1					
ANR	52570	PtrMemberAccess	result -> u		52506	0					
ANR	52571	Identifier	result		52506	0					
ANR	52572	Identifier	u		52506	1					
ANR	52573	Identifier	constant		52506	1					
ANR	52574	ReturnStatement	return 1 ;	5714:2:205954:205962	52506	5	True				
ANR	52575	PrimaryExpression	1		52506	0					
ANR	52576	ReturnStatement	return 0 ;	5716:1:205968:205976	52506	13	True				
ANR	52577	PrimaryExpression	0		52506	0					
ANR	52578	ReturnType	static int		52506	1					
ANR	52579	Identifier	zend_constant_ct_subst		52506	2					
ANR	52580	ParameterList	"znode * result , zval * const_name , int all_internal_constants_substitution TSRMLS_DC"		52506	3					
ANR	52581	Parameter	znode * result	5704:34:205585:205597	52506	0	True				
ANR	52582	ParameterType	znode *		52506	0					
ANR	52583	Identifier	result		52506	1					
ANR	52584	Parameter	zval * const_name	5704:49:205600:205615	52506	1	True				
ANR	52585	ParameterType	zval *		52506	0					
ANR	52586	Identifier	const_name		52506	1					
ANR	52587	Parameter	int all_internal_constants_substitution TSRMLS_DC	5704:67:205618:205666	52506	2	True				
ANR	52588	ParameterType	int all_internal_constants_substitution		52506	0					
ANR	52589	Identifier	TSRMLS_DC		52506	1					
ANR	52590	CFGEntryNode	ENTRY		52506		True				
ANR	52591	CFGExitNode	EXIT		52506		True				
ANR	52592	Symbol	IS_CONST		52506						
ANR	52593	Symbol	result -> u . constant		52506						
ANR	52594	Symbol	c		52506						
ANR	52595	Symbol	& result -> u		52506						
ANR	52596	Symbol	const_name		52506						
ANR	52597	Symbol	result -> op_type		52506						
ANR	52598	Symbol	c -> value		52506						
ANR	52599	Symbol	TSRMLS_DC		52506						
ANR	52600	Symbol	* c		52506						
ANR	52601	Symbol	result -> u		52506						
ANR	52602	Symbol	result		52506						
ANR	52603	Symbol	* result		52506						
ANR	52604	Symbol	& result -> u . constant		52506						
ANR	52605	Function	zend_do_fetch_constant	5720:0:205991:209988							
ANR	52606	FunctionDef	"zend_do_fetch_constant (znode * result , znode * constant_container , znode * constant_name , int mode , zend_bool check_namespace TSRMLS_DC)"		52605	0					
ANR	52607	CompoundStatement		5721:0:206140:209988	52605	0					
ANR	52608	IdentifierDeclStatement	znode tmp ;	5722:1:206143:206152	52605	0	True				
ANR	52609	IdentifierDecl	tmp		52605	0					
ANR	52610	IdentifierDeclType	znode		52605	0					
ANR	52611	Identifier	tmp		52605	1					
ANR	52612	IdentifierDeclStatement	zend_op * opline ;	5723:1:206155:206170	52605	1	True				
ANR	52613	IdentifierDecl	* opline		52605	0					
ANR	52614	IdentifierDeclType	zend_op *		52605	0					
ANR	52615	Identifier	opline		52605	1					
ANR	52616	IdentifierDeclStatement	int type ;	5724:1:206173:206181	52605	2	True				
ANR	52617	IdentifierDecl	type		52605	0					
ANR	52618	IdentifierDeclType	int		52605	0					
ANR	52619	Identifier	type		52605	1					
ANR	52620	IdentifierDeclStatement	char * compound ;	5725:1:206184:206198	52605	3	True				
ANR	52621	IdentifierDecl	* compound		52605	0					
ANR	52622	IdentifierDeclType	char *		52605	0					
ANR	52623	Identifier	compound		52605	1					
ANR	52624	IdentifierDeclStatement	ulong fetch_type = 0 ;	5726:1:206201:206221	52605	4	True				
ANR	52625	IdentifierDecl	fetch_type = 0		52605	0					
ANR	52626	IdentifierDeclType	ulong		52605	0					
ANR	52627	Identifier	fetch_type		52605	1					
ANR	52628	AssignmentExpression	fetch_type = 0		52605	2		=			
ANR	52629	Identifier	fetch_type		52605	0					
ANR	52630	PrimaryExpression	0		52605	1					
ANR	52631	IfStatement	if ( constant_container )		52605	5					
ANR	52632	Condition	constant_container	5728:5:206229:206246	52605	0	True				
ANR	52633	Identifier	constant_container		52605	0					
ANR	52634	CompoundStatement		8:25:108:108	52605	1					
ANR	52635	SwitchStatement	switch ( mode )		52605	0					
ANR	52636	Condition	mode	5729:10:206261:206264	52605	0	True				
ANR	52637	Identifier	mode		52605	0					
ANR	52638	CompoundStatement		9:16:126:126	52605	1					
ANR	52639	Label	case ZEND_CT :	5730:3:206272:206284	52605	0	True				
ANR	52640	Identifier	ZEND_CT		52605	0					
ANR	52641	ExpressionStatement	"type = zend_get_class_fetch_type ( Z_STRVAL ( constant_container -> u . constant ) , Z_STRLEN ( constant_container -> u . constant ) )"	5732:4:206325:206441	52605	1	True				
ANR	52642	AssignmentExpression	"type = zend_get_class_fetch_type ( Z_STRVAL ( constant_container -> u . constant ) , Z_STRLEN ( constant_container -> u . constant ) )"		52605	0		=			
ANR	52643	Identifier	type		52605	0					
ANR	52644	CallExpression	"zend_get_class_fetch_type ( Z_STRVAL ( constant_container -> u . constant ) , Z_STRLEN ( constant_container -> u . constant ) )"		52605	1					
ANR	52645	Callee	zend_get_class_fetch_type		52605	0					
ANR	52646	Identifier	zend_get_class_fetch_type		52605	0					
ANR	52647	ArgumentList	Z_STRVAL ( constant_container -> u . constant )		52605	1					
ANR	52648	Argument	Z_STRVAL ( constant_container -> u . constant )		52605	0					
ANR	52649	CallExpression	Z_STRVAL ( constant_container -> u . constant )		52605	0					
ANR	52650	Callee	Z_STRVAL		52605	0					
ANR	52651	Identifier	Z_STRVAL		52605	0					
ANR	52652	ArgumentList	constant_container -> u . constant		52605	1					
ANR	52653	Argument	constant_container -> u . constant		52605	0					
ANR	52654	MemberAccess	constant_container -> u . constant		52605	0					
ANR	52655	PtrMemberAccess	constant_container -> u		52605	0					
ANR	52656	Identifier	constant_container		52605	0					
ANR	52657	Identifier	u		52605	1					
ANR	52658	Identifier	constant		52605	1					
ANR	52659	Argument	Z_STRLEN ( constant_container -> u . constant )		52605	1					
ANR	52660	CallExpression	Z_STRLEN ( constant_container -> u . constant )		52605	0					
ANR	52661	Callee	Z_STRLEN		52605	0					
ANR	52662	Identifier	Z_STRLEN		52605	0					
ANR	52663	ArgumentList	constant_container -> u . constant		52605	1					
ANR	52664	Argument	constant_container -> u . constant		52605	0					
ANR	52665	MemberAccess	constant_container -> u . constant		52605	0					
ANR	52666	PtrMemberAccess	constant_container -> u		52605	0					
ANR	52667	Identifier	constant_container		52605	0					
ANR	52668	Identifier	u		52605	1					
ANR	52669	Identifier	constant		52605	1					
ANR	52670	IfStatement	if ( ZEND_FETCH_CLASS_STATIC == type )		52605	2					
ANR	52671	Condition	ZEND_FETCH_CLASS_STATIC == type	5734:8:206452:206482	52605	0	True				
ANR	52672	EqualityExpression	ZEND_FETCH_CLASS_STATIC == type		52605	0		==			
ANR	52673	Identifier	ZEND_FETCH_CLASS_STATIC		52605	0					
ANR	52674	Identifier	type		52605	1					
ANR	52675	CompoundStatement		14:41:344:344	52605	1					
ANR	52676	ExpressionStatement	"zend_error ( E_ERROR , ""\\""static::\\"" is not allowed in compile-time constants"" )"	5735:5:206492:206568	52605	0	True				
ANR	52677	CallExpression	"zend_error ( E_ERROR , ""\\""static::\\"" is not allowed in compile-time constants"" )"		52605	0					
ANR	52678	Callee	zend_error		52605	0					
ANR	52679	Identifier	zend_error		52605	0					
ANR	52680	ArgumentList	E_ERROR		52605	1					
ANR	52681	Argument	E_ERROR		52605	0					
ANR	52682	Identifier	E_ERROR		52605	0					
ANR	52683	Argument	"""\\""static::\\"" is not allowed in compile-time constants"""		52605	1					
ANR	52684	PrimaryExpression	"""\\""static::\\"" is not allowed in compile-time constants"""		52605	0					
ANR	52685	ElseStatement	else		52605	0					
ANR	52686	IfStatement	if ( ZEND_FETCH_CLASS_DEFAULT == type )		52605	0					
ANR	52687	Condition	ZEND_FETCH_CLASS_DEFAULT == type	5736:15:206585:206616	52605	0	True				
ANR	52688	EqualityExpression	ZEND_FETCH_CLASS_DEFAULT == type		52605	0		==			
ANR	52689	Identifier	ZEND_FETCH_CLASS_DEFAULT		52605	0					
ANR	52690	Identifier	type		52605	1					
ANR	52691	CompoundStatement		16:49:478:478	52605	1					
ANR	52692	Statement	zend_resolve_class_name	5737:5:206626:206648	52605	0	True				
ANR	52693	Statement	(	5737:28:206649:206649	52605	1	True				
ANR	52694	Statement	constant_container	5737:29:206650:206667	52605	2	True				
ANR	52695	Statement	TSRMLS_CC	5737:48:206669:206677	52605	3	True				
ANR	52696	Statement	)	5737:57:206678:206678	52605	4	True				
ANR	52697	ExpressionStatement		5737:58:206679:206679	52605	5	True				
ANR	52698	Statement	zend_do_build_full_name	5739:4:206691:206713	52605	3	True				
ANR	52699	Statement	(	5739:27:206714:206714	52605	4	True				
ANR	52700	Statement	NULL	5739:28:206715:206718	52605	5	True				
ANR	52701	Statement	","	5739:32:206719:206719	52605	6	True				
ANR	52702	Statement	constant_container	5739:34:206721:206738	52605	7	True				
ANR	52703	Statement	","	5739:52:206739:206739	52605	8	True				
ANR	52704	Statement	constant_name	5739:54:206741:206753	52605	9	True				
ANR	52705	Statement	","	5739:67:206754:206754	52605	10	True				
ANR	52706	Statement	1	5739:69:206756:206756	52605	11	True				
ANR	52707	Statement	TSRMLS_CC	5739:71:206758:206766	52605	12	True				
ANR	52708	Statement	)	5739:80:206767:206767	52605	13	True				
ANR	52709	ExpressionStatement		5739:81:206768:206768	52605	14	True				
ANR	52710	ExpressionStatement	* result = * constant_container	5740:4:206774:206803	52605	15	True				
ANR	52711	AssignmentExpression	* result = * constant_container		52605	0		=			
ANR	52712	UnaryOperationExpression	* result		52605	0					
ANR	52713	UnaryOperator	*		52605	0					
ANR	52714	Identifier	result		52605	1					
ANR	52715	UnaryOperationExpression	* constant_container		52605	1					
ANR	52716	UnaryOperator	*		52605	0					
ANR	52717	Identifier	constant_container		52605	1					
ANR	52718	ExpressionStatement	result -> u . constant . type = IS_CONSTANT | fetch_type	5741:4:206809:206859	52605	16	True				
ANR	52719	AssignmentExpression	result -> u . constant . type = IS_CONSTANT | fetch_type		52605	0		=			
ANR	52720	MemberAccess	result -> u . constant . type		52605	0					
ANR	52721	MemberAccess	result -> u . constant		52605	0					
ANR	52722	PtrMemberAccess	result -> u		52605	0					
ANR	52723	Identifier	result		52605	0					
ANR	52724	Identifier	u		52605	1					
ANR	52725	Identifier	constant		52605	1					
ANR	52726	Identifier	type		52605	1					
ANR	52727	InclusiveOrExpression	IS_CONSTANT | fetch_type		52605	1		|			
ANR	52728	Identifier	IS_CONSTANT		52605	0					
ANR	52729	Identifier	fetch_type		52605	1					
ANR	52730	BreakStatement	break ;	5742:4:206865:206870	52605	17	True				
ANR	52731	Label	case ZEND_RT :	5743:3:206875:206887	52605	18	True				
ANR	52732	Identifier	ZEND_RT		52605	0					
ANR	52733	IfStatement	"if ( constant_container -> op_type == IS_CONST && ZEND_FETCH_CLASS_DEFAULT == zend_get_class_fetch_type ( Z_STRVAL ( constant_container -> u . constant ) , Z_STRLEN ( constant_container -> u . constant ) ) )"		52605	19					
ANR	52734	Condition	"constant_container -> op_type == IS_CONST && ZEND_FETCH_CLASS_DEFAULT == zend_get_class_fetch_type ( Z_STRVAL ( constant_container -> u . constant ) , Z_STRLEN ( constant_container -> u . constant ) )"	5744:8:206897:207080	52605	0	True				
ANR	52735	AndExpression	"constant_container -> op_type == IS_CONST && ZEND_FETCH_CLASS_DEFAULT == zend_get_class_fetch_type ( Z_STRVAL ( constant_container -> u . constant ) , Z_STRLEN ( constant_container -> u . constant ) )"		52605	0		&&			
ANR	52736	EqualityExpression	constant_container -> op_type == IS_CONST		52605	0		==			
ANR	52737	PtrMemberAccess	constant_container -> op_type		52605	0					
ANR	52738	Identifier	constant_container		52605	0					
ANR	52739	Identifier	op_type		52605	1					
ANR	52740	Identifier	IS_CONST		52605	1					
ANR	52741	EqualityExpression	"ZEND_FETCH_CLASS_DEFAULT == zend_get_class_fetch_type ( Z_STRVAL ( constant_container -> u . constant ) , Z_STRLEN ( constant_container -> u . constant ) )"		52605	1		==			
ANR	52742	Identifier	ZEND_FETCH_CLASS_DEFAULT		52605	0					
ANR	52743	CallExpression	"zend_get_class_fetch_type ( Z_STRVAL ( constant_container -> u . constant ) , Z_STRLEN ( constant_container -> u . constant ) )"		52605	1					
ANR	52744	Callee	zend_get_class_fetch_type		52605	0					
ANR	52745	Identifier	zend_get_class_fetch_type		52605	0					
ANR	52746	ArgumentList	Z_STRVAL ( constant_container -> u . constant )		52605	1					
ANR	52747	Argument	Z_STRVAL ( constant_container -> u . constant )		52605	0					
ANR	52748	CallExpression	Z_STRVAL ( constant_container -> u . constant )		52605	0					
ANR	52749	Callee	Z_STRVAL		52605	0					
ANR	52750	Identifier	Z_STRVAL		52605	0					
ANR	52751	ArgumentList	constant_container -> u . constant		52605	1					
ANR	52752	Argument	constant_container -> u . constant		52605	0					
ANR	52753	MemberAccess	constant_container -> u . constant		52605	0					
ANR	52754	PtrMemberAccess	constant_container -> u		52605	0					
ANR	52755	Identifier	constant_container		52605	0					
ANR	52756	Identifier	u		52605	1					
ANR	52757	Identifier	constant		52605	1					
ANR	52758	Argument	Z_STRLEN ( constant_container -> u . constant )		52605	1					
ANR	52759	CallExpression	Z_STRLEN ( constant_container -> u . constant )		52605	0					
ANR	52760	Callee	Z_STRLEN		52605	0					
ANR	52761	Identifier	Z_STRLEN		52605	0					
ANR	52762	ArgumentList	constant_container -> u . constant		52605	1					
ANR	52763	Argument	constant_container -> u . constant		52605	0					
ANR	52764	MemberAccess	constant_container -> u . constant		52605	0					
ANR	52765	PtrMemberAccess	constant_container -> u		52605	0					
ANR	52766	Identifier	constant_container		52605	0					
ANR	52767	Identifier	u		52605	1					
ANR	52768	Identifier	constant		52605	1					
ANR	52769	CompoundStatement		25:143:942:942	52605	1					
ANR	52770	Statement	zend_resolve_class_name	5746:5:207090:207112	52605	0	True				
ANR	52771	Statement	(	5746:28:207113:207113	52605	1	True				
ANR	52772	Statement	constant_container	5746:29:207114:207131	52605	2	True				
ANR	52773	Statement	TSRMLS_CC	5746:48:207133:207141	52605	3	True				
ANR	52774	Statement	)	5746:57:207142:207142	52605	4	True				
ANR	52775	ExpressionStatement		5746:58:207143:207143	52605	5	True				
ANR	52776	ElseStatement	else		52605	0					
ANR	52777	CompoundStatement		27:11:1015:1015	52605	0					
ANR	52778	Statement	zend_do_fetch_class	5748:5:207163:207181	52605	0	True				
ANR	52779	Statement	(	5748:24:207182:207182	52605	1	True				
ANR	52780	Statement	&	5748:25:207183:207183	52605	2	True				
ANR	52781	Statement	tmp	5748:26:207184:207186	52605	3	True				
ANR	52782	Statement	","	5748:29:207187:207187	52605	4	True				
ANR	52783	Statement	constant_container	5748:31:207189:207206	52605	5	True				
ANR	52784	Statement	TSRMLS_CC	5748:50:207208:207216	52605	6	True				
ANR	52785	Statement	)	5748:59:207217:207217	52605	7	True				
ANR	52786	ExpressionStatement		5748:60:207218:207218	52605	8	True				
ANR	52787	ExpressionStatement	constant_container = & tmp	5749:5:207225:207250	52605	9	True				
ANR	52788	AssignmentExpression	constant_container = & tmp		52605	0		=			
ANR	52789	Identifier	constant_container		52605	0					
ANR	52790	UnaryOperationExpression	& tmp		52605	1					
ANR	52791	UnaryOperator	&		52605	0					
ANR	52792	Identifier	tmp		52605	1					
ANR	52793	Statement	opline	5751:4:207262:207267	52605	20	True				
ANR	52794	Statement	=	5751:11:207269:207269	52605	21	True				
ANR	52795	Statement	get_next_op	5751:13:207271:207281	52605	22	True				
ANR	52796	Statement	(	5751:24:207282:207282	52605	23	True				
ANR	52797	Statement	CG	5751:25:207283:207284	52605	24	True				
ANR	52798	Statement	(	5751:27:207285:207285	52605	25	True				
ANR	52799	Statement	active_op_array	5751:28:207286:207300	52605	26	True				
ANR	52800	Statement	)	5751:43:207301:207301	52605	27	True				
ANR	52801	Statement	TSRMLS_CC	5751:45:207303:207311	52605	28	True				
ANR	52802	Statement	)	5751:54:207312:207312	52605	29	True				
ANR	52803	ExpressionStatement		5751:55:207313:207313	52605	30	True				
ANR	52804	ExpressionStatement	opline -> opcode = ZEND_FETCH_CONSTANT	5752:4:207319:207355	52605	31	True				
ANR	52805	AssignmentExpression	opline -> opcode = ZEND_FETCH_CONSTANT		52605	0		=			
ANR	52806	PtrMemberAccess	opline -> opcode		52605	0					
ANR	52807	Identifier	opline		52605	0					
ANR	52808	Identifier	opcode		52605	1					
ANR	52809	Identifier	ZEND_FETCH_CONSTANT		52605	1					
ANR	52810	ExpressionStatement	opline -> result_type = IS_TMP_VAR	5753:4:207361:207393	52605	32	True				
ANR	52811	AssignmentExpression	opline -> result_type = IS_TMP_VAR		52605	0		=			
ANR	52812	PtrMemberAccess	opline -> result_type		52605	0					
ANR	52813	Identifier	opline		52605	0					
ANR	52814	Identifier	result_type		52605	1					
ANR	52815	Identifier	IS_TMP_VAR		52605	1					
ANR	52816	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	5754:4:207399:207463	52605	33	True				
ANR	52817	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		52605	0		=			
ANR	52818	MemberAccess	opline -> result . var		52605	0					
ANR	52819	PtrMemberAccess	opline -> result		52605	0					
ANR	52820	Identifier	opline		52605	0					
ANR	52821	Identifier	result		52605	1					
ANR	52822	Identifier	var		52605	1					
ANR	52823	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		52605	1					
ANR	52824	Callee	get_temporary_variable		52605	0					
ANR	52825	Identifier	get_temporary_variable		52605	0					
ANR	52826	ArgumentList	CG ( active_op_array )		52605	1					
ANR	52827	Argument	CG ( active_op_array )		52605	0					
ANR	52828	CallExpression	CG ( active_op_array )		52605	0					
ANR	52829	Callee	CG		52605	0					
ANR	52830	Identifier	CG		52605	0					
ANR	52831	ArgumentList	active_op_array		52605	1					
ANR	52832	Argument	active_op_array		52605	0					
ANR	52833	Identifier	active_op_array		52605	0					
ANR	52834	IfStatement	if ( constant_container -> op_type == IS_CONST )		52605	34					
ANR	52835	Condition	constant_container -> op_type == IS_CONST	5755:8:207473:207511	52605	0	True				
ANR	52836	EqualityExpression	constant_container -> op_type == IS_CONST		52605	0		==			
ANR	52837	PtrMemberAccess	constant_container -> op_type		52605	0					
ANR	52838	Identifier	constant_container		52605	0					
ANR	52839	Identifier	op_type		52605	1					
ANR	52840	Identifier	IS_CONST		52605	1					
ANR	52841	CompoundStatement		35:49:1373:1373	52605	1					
ANR	52842	ExpressionStatement	opline -> op1_type = IS_CONST	5756:5:207521:207548	52605	0	True				
ANR	52843	AssignmentExpression	opline -> op1_type = IS_CONST		52605	0		=			
ANR	52844	PtrMemberAccess	opline -> op1_type		52605	0					
ANR	52845	Identifier	opline		52605	0					
ANR	52846	Identifier	op1_type		52605	1					
ANR	52847	Identifier	IS_CONST		52605	1					
ANR	52848	Statement	opline	5757:5:207555:207560	52605	1	True				
ANR	52849	Statement	->	5757:11:207561:207562	52605	2	True				
ANR	52850	Statement	op1	5757:13:207563:207565	52605	3	True				
ANR	52851	Statement	.	5757:16:207566:207566	52605	4	True				
ANR	52852	Statement	constant	5757:17:207567:207574	52605	5	True				
ANR	52853	Statement	=	5757:26:207576:207576	52605	6	True				
ANR	52854	Statement	zend_add_class_name_literal	5757:28:207578:207604	52605	7	True				
ANR	52855	Statement	(	5757:55:207605:207605	52605	8	True				
ANR	52856	Statement	CG	5757:56:207606:207607	52605	9	True				
ANR	52857	Statement	(	5757:58:207608:207608	52605	10	True				
ANR	52858	Statement	active_op_array	5757:59:207609:207623	52605	11	True				
ANR	52859	Statement	)	5757:74:207624:207624	52605	12	True				
ANR	52860	Statement	","	5757:75:207625:207625	52605	13	True				
ANR	52861	Statement	&	5757:77:207627:207627	52605	14	True				
ANR	52862	Statement	constant_container	5757:78:207628:207645	52605	15	True				
ANR	52863	Statement	->	5757:96:207646:207647	52605	16	True				
ANR	52864	Statement	u	5757:98:207648:207648	52605	17	True				
ANR	52865	Statement	.	5757:99:207649:207649	52605	18	True				
ANR	52866	Statement	constant	5757:100:207650:207657	52605	19	True				
ANR	52867	Statement	TSRMLS_CC	5757:109:207659:207667	52605	20	True				
ANR	52868	Statement	)	5757:118:207668:207668	52605	21	True				
ANR	52869	ExpressionStatement		5757:119:207669:207669	52605	22	True				
ANR	52870	ElseStatement	else		52605	0					
ANR	52871	CompoundStatement		38:11:1541:1541	52605	0					
ANR	52872	ExpressionStatement	"SET_NODE ( opline -> op1 , constant_container )"	5759:5:207689:207730	52605	0	True				
ANR	52873	CallExpression	"SET_NODE ( opline -> op1 , constant_container )"		52605	0					
ANR	52874	Callee	SET_NODE		52605	0					
ANR	52875	Identifier	SET_NODE		52605	0					
ANR	52876	ArgumentList	opline -> op1		52605	1					
ANR	52877	Argument	opline -> op1		52605	0					
ANR	52878	PtrMemberAccess	opline -> op1		52605	0					
ANR	52879	Identifier	opline		52605	0					
ANR	52880	Identifier	op1		52605	1					
ANR	52881	Argument	constant_container		52605	1					
ANR	52882	Identifier	constant_container		52605	0					
ANR	52883	ExpressionStatement	"SET_NODE ( opline -> op2 , constant_name )"	5761:4:207742:207778	52605	35	True				
ANR	52884	CallExpression	"SET_NODE ( opline -> op2 , constant_name )"		52605	0					
ANR	52885	Callee	SET_NODE		52605	0					
ANR	52886	Identifier	SET_NODE		52605	0					
ANR	52887	ArgumentList	opline -> op2		52605	1					
ANR	52888	Argument	opline -> op2		52605	0					
ANR	52889	PtrMemberAccess	opline -> op2		52605	0					
ANR	52890	Identifier	opline		52605	0					
ANR	52891	Identifier	op2		52605	1					
ANR	52892	Argument	constant_name		52605	1					
ANR	52893	Identifier	constant_name		52605	0					
ANR	52894	ExpressionStatement	CALCULATE_LITERAL_HASH ( opline -> op2 . constant )	5762:4:207784:207828	52605	36	True				
ANR	52895	CallExpression	CALCULATE_LITERAL_HASH ( opline -> op2 . constant )		52605	0					
ANR	52896	Callee	CALCULATE_LITERAL_HASH		52605	0					
ANR	52897	Identifier	CALCULATE_LITERAL_HASH		52605	0					
ANR	52898	ArgumentList	opline -> op2 . constant		52605	1					
ANR	52899	Argument	opline -> op2 . constant		52605	0					
ANR	52900	MemberAccess	opline -> op2 . constant		52605	0					
ANR	52901	PtrMemberAccess	opline -> op2		52605	0					
ANR	52902	Identifier	opline		52605	0					
ANR	52903	Identifier	op2		52605	1					
ANR	52904	Identifier	constant		52605	1					
ANR	52905	IfStatement	if ( opline -> op1_type == IS_CONST )		52605	37					
ANR	52906	Condition	opline -> op1_type == IS_CONST	5763:8:207838:207865	52605	0	True				
ANR	52907	EqualityExpression	opline -> op1_type == IS_CONST		52605	0		==			
ANR	52908	PtrMemberAccess	opline -> op1_type		52605	0					
ANR	52909	Identifier	opline		52605	0					
ANR	52910	Identifier	op1_type		52605	1					
ANR	52911	Identifier	IS_CONST		52605	1					
ANR	52912	CompoundStatement		43:38:1727:1727	52605	1					
ANR	52913	ExpressionStatement	GET_CACHE_SLOT ( opline -> op2 . constant )	5764:5:207875:207911	52605	0	True				
ANR	52914	CallExpression	GET_CACHE_SLOT ( opline -> op2 . constant )		52605	0					
ANR	52915	Callee	GET_CACHE_SLOT		52605	0					
ANR	52916	Identifier	GET_CACHE_SLOT		52605	0					
ANR	52917	ArgumentList	opline -> op2 . constant		52605	1					
ANR	52918	Argument	opline -> op2 . constant		52605	0					
ANR	52919	MemberAccess	opline -> op2 . constant		52605	0					
ANR	52920	PtrMemberAccess	opline -> op2		52605	0					
ANR	52921	Identifier	opline		52605	0					
ANR	52922	Identifier	op2		52605	1					
ANR	52923	Identifier	constant		52605	1					
ANR	52924	ElseStatement	else		52605	0					
ANR	52925	CompoundStatement		45:11:1783:1783	52605	0					
ANR	52926	ExpressionStatement	GET_POLYMORPHIC_CACHE_SLOT ( opline -> op2 . constant )	5766:5:207931:207979	52605	0	True				
ANR	52927	CallExpression	GET_POLYMORPHIC_CACHE_SLOT ( opline -> op2 . constant )		52605	0					
ANR	52928	Callee	GET_POLYMORPHIC_CACHE_SLOT		52605	0					
ANR	52929	Identifier	GET_POLYMORPHIC_CACHE_SLOT		52605	0					
ANR	52930	ArgumentList	opline -> op2 . constant		52605	1					
ANR	52931	Argument	opline -> op2 . constant		52605	0					
ANR	52932	MemberAccess	opline -> op2 . constant		52605	0					
ANR	52933	PtrMemberAccess	opline -> op2		52605	0					
ANR	52934	Identifier	opline		52605	0					
ANR	52935	Identifier	op2		52605	1					
ANR	52936	Identifier	constant		52605	1					
ANR	52937	ExpressionStatement	"GET_NODE ( result , opline -> result )"	5768:4:207991:208023	52605	38	True				
ANR	52938	CallExpression	"GET_NODE ( result , opline -> result )"		52605	0					
ANR	52939	Callee	GET_NODE		52605	0					
ANR	52940	Identifier	GET_NODE		52605	0					
ANR	52941	ArgumentList	result		52605	1					
ANR	52942	Argument	result		52605	0					
ANR	52943	Identifier	result		52605	0					
ANR	52944	Argument	opline -> result		52605	1					
ANR	52945	PtrMemberAccess	opline -> result		52605	0					
ANR	52946	Identifier	opline		52605	0					
ANR	52947	Identifier	result		52605	1					
ANR	52948	BreakStatement	break ;	5769:4:208029:208034	52605	39	True				
ANR	52949	ReturnStatement	return ;	5771:2:208042:208048	52605	1	True				
ANR	52950	SwitchStatement	switch ( mode )		52605	6					
ANR	52951	Condition	mode	5775:9:208180:208183	52605	0	True				
ANR	52952	Identifier	mode		52605	0					
ANR	52953	CompoundStatement		55:15:2045:2045	52605	1					
ANR	52954	Label	case ZEND_CT :	5776:2:208190:208202	52605	0	True				
ANR	52955	Identifier	ZEND_CT		52605	0					
ANR	52956	ExpressionStatement	"compound = memchr ( Z_STRVAL ( constant_name -> u . constant ) , '\\\\' , Z_STRLEN ( constant_name -> u . constant ) )"	5777:3:208207:208304	52605	1	True				
ANR	52957	AssignmentExpression	"compound = memchr ( Z_STRVAL ( constant_name -> u . constant ) , '\\\\' , Z_STRLEN ( constant_name -> u . constant ) )"		52605	0		=			
ANR	52958	Identifier	compound		52605	0					
ANR	52959	CallExpression	"memchr ( Z_STRVAL ( constant_name -> u . constant ) , '\\\\' , Z_STRLEN ( constant_name -> u . constant ) )"		52605	1					
ANR	52960	Callee	memchr		52605	0					
ANR	52961	Identifier	memchr		52605	0					
ANR	52962	ArgumentList	Z_STRVAL ( constant_name -> u . constant )		52605	1					
ANR	52963	Argument	Z_STRVAL ( constant_name -> u . constant )		52605	0					
ANR	52964	CallExpression	Z_STRVAL ( constant_name -> u . constant )		52605	0					
ANR	52965	Callee	Z_STRVAL		52605	0					
ANR	52966	Identifier	Z_STRVAL		52605	0					
ANR	52967	ArgumentList	constant_name -> u . constant		52605	1					
ANR	52968	Argument	constant_name -> u . constant		52605	0					
ANR	52969	MemberAccess	constant_name -> u . constant		52605	0					
ANR	52970	PtrMemberAccess	constant_name -> u		52605	0					
ANR	52971	Identifier	constant_name		52605	0					
ANR	52972	Identifier	u		52605	1					
ANR	52973	Identifier	constant		52605	1					
ANR	52974	Argument	'\\\\'		52605	1					
ANR	52975	PrimaryExpression	'\\\\'		52605	0					
ANR	52976	Argument	Z_STRLEN ( constant_name -> u . constant )		52605	2					
ANR	52977	CallExpression	Z_STRLEN ( constant_name -> u . constant )		52605	0					
ANR	52978	Callee	Z_STRLEN		52605	0					
ANR	52979	Identifier	Z_STRLEN		52605	0					
ANR	52980	ArgumentList	constant_name -> u . constant		52605	1					
ANR	52981	Argument	constant_name -> u . constant		52605	0					
ANR	52982	MemberAccess	constant_name -> u . constant		52605	0					
ANR	52983	PtrMemberAccess	constant_name -> u		52605	0					
ANR	52984	Identifier	constant_name		52605	0					
ANR	52985	Identifier	u		52605	1					
ANR	52986	Identifier	constant		52605	1					
ANR	52987	Statement	if	5780:3:208375:208376	52605	2	True				
ANR	52988	Statement	(	5780:6:208378:208378	52605	3	True				
ANR	52989	Statement	zend_constant_ct_subst	5780:7:208379:208400	52605	4	True				
ANR	52990	Statement	(	5780:29:208401:208401	52605	5	True				
ANR	52991	Statement	result	5780:30:208402:208407	52605	6	True				
ANR	52992	Statement	","	5780:36:208408:208408	52605	7	True				
ANR	52993	Statement	&	5780:38:208410:208410	52605	8	True				
ANR	52994	Statement	constant_name	5780:39:208411:208423	52605	9	True				
ANR	52995	Statement	->	5780:52:208424:208425	52605	10	True				
ANR	52996	Statement	u	5780:54:208426:208426	52605	11	True				
ANR	52997	Statement	.	5780:55:208427:208427	52605	12	True				
ANR	52998	Statement	constant	5780:56:208428:208435	52605	13	True				
ANR	52999	Statement	","	5780:64:208436:208436	52605	14	True				
ANR	53000	Statement	0	5780:66:208438:208438	52605	15	True				
ANR	53001	Statement	TSRMLS_CC	5780:68:208440:208448	52605	16	True				
ANR	53002	Statement	)	5780:77:208449:208449	52605	17	True				
ANR	53003	Statement	)	5780:78:208450:208450	52605	18	True				
ANR	53004	CompoundStatement		60:80:2311:2311	52605	19					
ANR	53005	BreakStatement	break ;	5781:4:208458:208463	52605	0	True				
ANR	53006	Statement	zend_resolve_const_name	5784:3:208474:208496	52605	20	True				
ANR	53007	Statement	(	5784:26:208497:208497	52605	21	True				
ANR	53008	Statement	constant_name	5784:27:208498:208510	52605	22	True				
ANR	53009	Statement	","	5784:40:208511:208511	52605	23	True				
ANR	53010	Statement	&	5784:42:208513:208513	52605	24	True				
ANR	53011	Statement	check_namespace	5784:43:208514:208528	52605	25	True				
ANR	53012	Statement	TSRMLS_CC	5784:59:208530:208538	52605	26	True				
ANR	53013	Statement	)	5784:68:208539:208539	52605	27	True				
ANR	53014	ExpressionStatement		5784:69:208540:208540	52605	28	True				
ANR	53015	IfStatement	if ( ! compound )		52605	29					
ANR	53016	Condition	! compound	5786:6:208549:208557	52605	0	True				
ANR	53017	UnaryOperationExpression	! compound		52605	0					
ANR	53018	UnaryOperator	!		52605	0					
ANR	53019	Identifier	compound		52605	1					
ANR	53020	CompoundStatement		66:17:2419:2419	52605	1					
ANR	53021	ExpressionStatement	fetch_type |= IS_CONSTANT_UNQUALIFIED	5787:4:208566:208603	52605	0	True				
ANR	53022	AssignmentExpression	fetch_type |= IS_CONSTANT_UNQUALIFIED		52605	0		|=			
ANR	53023	Identifier	fetch_type		52605	0					
ANR	53024	Identifier	IS_CONSTANT_UNQUALIFIED		52605	1					
ANR	53025	ExpressionStatement	* result = * constant_name	5790:3:208614:208638	52605	30	True				
ANR	53026	AssignmentExpression	* result = * constant_name		52605	0		=			
ANR	53027	UnaryOperationExpression	* result		52605	0					
ANR	53028	UnaryOperator	*		52605	0					
ANR	53029	Identifier	result		52605	1					
ANR	53030	UnaryOperationExpression	* constant_name		52605	1					
ANR	53031	UnaryOperator	*		52605	0					
ANR	53032	Identifier	constant_name		52605	1					
ANR	53033	ExpressionStatement	result -> u . constant . type = IS_CONSTANT | fetch_type	5791:3:208643:208693	52605	31	True				
ANR	53034	AssignmentExpression	result -> u . constant . type = IS_CONSTANT | fetch_type		52605	0		=			
ANR	53035	MemberAccess	result -> u . constant . type		52605	0					
ANR	53036	MemberAccess	result -> u . constant		52605	0					
ANR	53037	PtrMemberAccess	result -> u		52605	0					
ANR	53038	Identifier	result		52605	0					
ANR	53039	Identifier	u		52605	1					
ANR	53040	Identifier	constant		52605	1					
ANR	53041	Identifier	type		52605	1					
ANR	53042	InclusiveOrExpression	IS_CONSTANT | fetch_type		52605	1		|			
ANR	53043	Identifier	IS_CONSTANT		52605	0					
ANR	53044	Identifier	fetch_type		52605	1					
ANR	53045	BreakStatement	break ;	5792:3:208698:208703	52605	32	True				
ANR	53046	Label	case ZEND_RT :	5793:2:208707:208719	52605	33	True				
ANR	53047	Identifier	ZEND_RT		52605	0					
ANR	53048	ExpressionStatement	"compound = memchr ( Z_STRVAL ( constant_name -> u . constant ) , '\\\\' , Z_STRLEN ( constant_name -> u . constant ) )"	5794:3:208724:208821	52605	34	True				
ANR	53049	AssignmentExpression	"compound = memchr ( Z_STRVAL ( constant_name -> u . constant ) , '\\\\' , Z_STRLEN ( constant_name -> u . constant ) )"		52605	0		=			
ANR	53050	Identifier	compound		52605	0					
ANR	53051	CallExpression	"memchr ( Z_STRVAL ( constant_name -> u . constant ) , '\\\\' , Z_STRLEN ( constant_name -> u . constant ) )"		52605	1					
ANR	53052	Callee	memchr		52605	0					
ANR	53053	Identifier	memchr		52605	0					
ANR	53054	ArgumentList	Z_STRVAL ( constant_name -> u . constant )		52605	1					
ANR	53055	Argument	Z_STRVAL ( constant_name -> u . constant )		52605	0					
ANR	53056	CallExpression	Z_STRVAL ( constant_name -> u . constant )		52605	0					
ANR	53057	Callee	Z_STRVAL		52605	0					
ANR	53058	Identifier	Z_STRVAL		52605	0					
ANR	53059	ArgumentList	constant_name -> u . constant		52605	1					
ANR	53060	Argument	constant_name -> u . constant		52605	0					
ANR	53061	MemberAccess	constant_name -> u . constant		52605	0					
ANR	53062	PtrMemberAccess	constant_name -> u		52605	0					
ANR	53063	Identifier	constant_name		52605	0					
ANR	53064	Identifier	u		52605	1					
ANR	53065	Identifier	constant		52605	1					
ANR	53066	Argument	'\\\\'		52605	1					
ANR	53067	PrimaryExpression	'\\\\'		52605	0					
ANR	53068	Argument	Z_STRLEN ( constant_name -> u . constant )		52605	2					
ANR	53069	CallExpression	Z_STRLEN ( constant_name -> u . constant )		52605	0					
ANR	53070	Callee	Z_STRLEN		52605	0					
ANR	53071	Identifier	Z_STRLEN		52605	0					
ANR	53072	ArgumentList	constant_name -> u . constant		52605	1					
ANR	53073	Argument	constant_name -> u . constant		52605	0					
ANR	53074	MemberAccess	constant_name -> u . constant		52605	0					
ANR	53075	PtrMemberAccess	constant_name -> u		52605	0					
ANR	53076	Identifier	constant_name		52605	0					
ANR	53077	Identifier	u		52605	1					
ANR	53078	Identifier	constant		52605	1					
ANR	53079	Statement	zend_resolve_const_name	5796:3:208827:208849	52605	35	True				
ANR	53080	Statement	(	5796:26:208850:208850	52605	36	True				
ANR	53081	Statement	constant_name	5796:27:208851:208863	52605	37	True				
ANR	53082	Statement	","	5796:40:208864:208864	52605	38	True				
ANR	53083	Statement	&	5796:42:208866:208866	52605	39	True				
ANR	53084	Statement	check_namespace	5796:43:208867:208881	52605	40	True				
ANR	53085	Statement	TSRMLS_CC	5796:59:208883:208891	52605	41	True				
ANR	53086	Statement	)	5796:68:208892:208892	52605	42	True				
ANR	53087	ExpressionStatement		5796:69:208893:208893	52605	43	True				
ANR	53088	Statement	if	5798:3:208899:208900	52605	44	True				
ANR	53089	Statement	(	5798:5:208901:208901	52605	45	True				
ANR	53090	Statement	zend_constant_ct_subst	5798:6:208902:208923	52605	46	True				
ANR	53091	Statement	(	5798:28:208924:208924	52605	47	True				
ANR	53092	Statement	result	5798:29:208925:208930	52605	48	True				
ANR	53093	Statement	","	5798:35:208931:208931	52605	49	True				
ANR	53094	Statement	&	5798:37:208933:208933	52605	50	True				
ANR	53095	Statement	constant_name	5798:38:208934:208946	52605	51	True				
ANR	53096	Statement	->	5798:51:208947:208948	52605	52	True				
ANR	53097	Statement	u	5798:53:208949:208949	52605	53	True				
ANR	53098	Statement	.	5798:54:208950:208950	52605	54	True				
ANR	53099	Statement	constant	5798:55:208951:208958	52605	55	True				
ANR	53100	Statement	","	5798:63:208959:208959	52605	56	True				
ANR	53101	Statement	1	5798:65:208961:208961	52605	57	True				
ANR	53102	Statement	TSRMLS_CC	5798:67:208963:208971	52605	58	True				
ANR	53103	Statement	)	5798:76:208972:208972	52605	59	True				
ANR	53104	Statement	)	5798:77:208973:208973	52605	60	True				
ANR	53105	CompoundStatement		78:79:2834:2834	52605	61					
ANR	53106	BreakStatement	break ;	5799:4:208981:208986	52605	0	True				
ANR	53107	Statement	opline	5802:3:208997:209002	52605	62	True				
ANR	53108	Statement	=	5802:10:209004:209004	52605	63	True				
ANR	53109	Statement	get_next_op	5802:12:209006:209016	52605	64	True				
ANR	53110	Statement	(	5802:23:209017:209017	52605	65	True				
ANR	53111	Statement	CG	5802:24:209018:209019	52605	66	True				
ANR	53112	Statement	(	5802:26:209020:209020	52605	67	True				
ANR	53113	Statement	active_op_array	5802:27:209021:209035	52605	68	True				
ANR	53114	Statement	)	5802:42:209036:209036	52605	69	True				
ANR	53115	Statement	TSRMLS_CC	5802:44:209038:209046	52605	70	True				
ANR	53116	Statement	)	5802:53:209047:209047	52605	71	True				
ANR	53117	ExpressionStatement		5802:54:209048:209048	52605	72	True				
ANR	53118	ExpressionStatement	opline -> opcode = ZEND_FETCH_CONSTANT	5803:3:209053:209089	52605	73	True				
ANR	53119	AssignmentExpression	opline -> opcode = ZEND_FETCH_CONSTANT		52605	0		=			
ANR	53120	PtrMemberAccess	opline -> opcode		52605	0					
ANR	53121	Identifier	opline		52605	0					
ANR	53122	Identifier	opcode		52605	1					
ANR	53123	Identifier	ZEND_FETCH_CONSTANT		52605	1					
ANR	53124	ExpressionStatement	opline -> result_type = IS_TMP_VAR	5804:3:209094:209126	52605	74	True				
ANR	53125	AssignmentExpression	opline -> result_type = IS_TMP_VAR		52605	0		=			
ANR	53126	PtrMemberAccess	opline -> result_type		52605	0					
ANR	53127	Identifier	opline		52605	0					
ANR	53128	Identifier	result_type		52605	1					
ANR	53129	Identifier	IS_TMP_VAR		52605	1					
ANR	53130	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	5805:3:209131:209195	52605	75	True				
ANR	53131	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		52605	0		=			
ANR	53132	MemberAccess	opline -> result . var		52605	0					
ANR	53133	PtrMemberAccess	opline -> result		52605	0					
ANR	53134	Identifier	opline		52605	0					
ANR	53135	Identifier	result		52605	1					
ANR	53136	Identifier	var		52605	1					
ANR	53137	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		52605	1					
ANR	53138	Callee	get_temporary_variable		52605	0					
ANR	53139	Identifier	get_temporary_variable		52605	0					
ANR	53140	ArgumentList	CG ( active_op_array )		52605	1					
ANR	53141	Argument	CG ( active_op_array )		52605	0					
ANR	53142	CallExpression	CG ( active_op_array )		52605	0					
ANR	53143	Callee	CG		52605	0					
ANR	53144	Identifier	CG		52605	0					
ANR	53145	ArgumentList	active_op_array		52605	1					
ANR	53146	Argument	active_op_array		52605	0					
ANR	53147	Identifier	active_op_array		52605	0					
ANR	53148	ExpressionStatement	"GET_NODE ( result , opline -> result )"	5806:3:209200:209232	52605	76	True				
ANR	53149	CallExpression	"GET_NODE ( result , opline -> result )"		52605	0					
ANR	53150	Callee	GET_NODE		52605	0					
ANR	53151	Identifier	GET_NODE		52605	0					
ANR	53152	ArgumentList	result		52605	1					
ANR	53153	Argument	result		52605	0					
ANR	53154	Identifier	result		52605	0					
ANR	53155	Argument	opline -> result		52605	1					
ANR	53156	PtrMemberAccess	opline -> result		52605	0					
ANR	53157	Identifier	opline		52605	0					
ANR	53158	Identifier	result		52605	1					
ANR	53159	ExpressionStatement	SET_UNUSED ( opline -> op1 )	5807:3:209237:209260	52605	77	True				
ANR	53160	CallExpression	SET_UNUSED ( opline -> op1 )		52605	0					
ANR	53161	Callee	SET_UNUSED		52605	0					
ANR	53162	Identifier	SET_UNUSED		52605	0					
ANR	53163	ArgumentList	opline -> op1		52605	1					
ANR	53164	Argument	opline -> op1		52605	0					
ANR	53165	PtrMemberAccess	opline -> op1		52605	0					
ANR	53166	Identifier	opline		52605	0					
ANR	53167	Identifier	op1		52605	1					
ANR	53168	ExpressionStatement	opline -> op2_type = IS_CONST	5808:3:209265:209292	52605	78	True				
ANR	53169	AssignmentExpression	opline -> op2_type = IS_CONST		52605	0		=			
ANR	53170	PtrMemberAccess	opline -> op2_type		52605	0					
ANR	53171	Identifier	opline		52605	0					
ANR	53172	Identifier	op2_type		52605	1					
ANR	53173	Identifier	IS_CONST		52605	1					
ANR	53174	IfStatement	if ( compound )		52605	79					
ANR	53175	Condition	compound	5809:7:209301:209308	52605	0	True				
ANR	53176	Identifier	compound		52605	0					
ANR	53177	CompoundStatement		89:17:3170:3170	52605	1					
ANR	53178	ExpressionStatement	opline -> extended_value = 0	5811:4:209351:209377	52605	0	True				
ANR	53179	AssignmentExpression	opline -> extended_value = 0		52605	0		=			
ANR	53180	PtrMemberAccess	opline -> extended_value		52605	0					
ANR	53181	Identifier	opline		52605	0					
ANR	53182	Identifier	extended_value		52605	1					
ANR	53183	PrimaryExpression	0		52605	1					
ANR	53184	Statement	opline	5812:4:209383:209388	52605	1	True				
ANR	53185	Statement	->	5812:10:209389:209390	52605	2	True				
ANR	53186	Statement	op2	5812:12:209391:209393	52605	3	True				
ANR	53187	Statement	.	5812:15:209394:209394	52605	4	True				
ANR	53188	Statement	constant	5812:16:209395:209402	52605	5	True				
ANR	53189	Statement	=	5812:25:209404:209404	52605	6	True				
ANR	53190	Statement	zend_add_const_name_literal	5812:27:209406:209432	52605	7	True				
ANR	53191	Statement	(	5812:54:209433:209433	52605	8	True				
ANR	53192	Statement	CG	5812:55:209434:209435	52605	9	True				
ANR	53193	Statement	(	5812:57:209436:209436	52605	10	True				
ANR	53194	Statement	active_op_array	5812:58:209437:209451	52605	11	True				
ANR	53195	Statement	)	5812:73:209452:209452	52605	12	True				
ANR	53196	Statement	","	5812:74:209453:209453	52605	13	True				
ANR	53197	Statement	&	5812:76:209455:209455	52605	14	True				
ANR	53198	Statement	constant_name	5812:77:209456:209468	52605	15	True				
ANR	53199	Statement	->	5812:90:209469:209470	52605	16	True				
ANR	53200	Statement	u	5812:92:209471:209471	52605	17	True				
ANR	53201	Statement	.	5812:93:209472:209472	52605	18	True				
ANR	53202	Statement	constant	5812:94:209473:209480	52605	19	True				
ANR	53203	Statement	","	5812:102:209481:209481	52605	20	True				
ANR	53204	Statement	0	5812:104:209483:209483	52605	21	True				
ANR	53205	Statement	TSRMLS_CC	5812:106:209485:209493	52605	22	True				
ANR	53206	Statement	)	5812:115:209494:209494	52605	23	True				
ANR	53207	ExpressionStatement		5812:116:209495:209495	52605	24	True				
ANR	53208	ElseStatement	else		52605	0					
ANR	53209	CompoundStatement		93:10:3366:3366	52605	0					
ANR	53210	ExpressionStatement	opline -> extended_value = IS_CONSTANT_UNQUALIFIED	5814:4:209513:209561	52605	0	True				
ANR	53211	AssignmentExpression	opline -> extended_value = IS_CONSTANT_UNQUALIFIED		52605	0		=			
ANR	53212	PtrMemberAccess	opline -> extended_value		52605	0					
ANR	53213	Identifier	opline		52605	0					
ANR	53214	Identifier	extended_value		52605	1					
ANR	53215	Identifier	IS_CONSTANT_UNQUALIFIED		52605	1					
ANR	53216	IfStatement	if ( check_namespace && CG ( current_namespace ) )		52605	1					
ANR	53217	Condition	check_namespace && CG ( current_namespace )	5815:8:209571:209610	52605	0	True				
ANR	53218	AndExpression	check_namespace && CG ( current_namespace )		52605	0		&&			
ANR	53219	Identifier	check_namespace		52605	0					
ANR	53220	CallExpression	CG ( current_namespace )		52605	1					
ANR	53221	Callee	CG		52605	0					
ANR	53222	Identifier	CG		52605	0					
ANR	53223	ArgumentList	current_namespace		52605	1					
ANR	53224	Argument	current_namespace		52605	0					
ANR	53225	Identifier	current_namespace		52605	0					
ANR	53226	CompoundStatement		95:50:3472:3472	52605	1					
ANR	53227	ExpressionStatement	opline -> extended_value |= IS_CONSTANT_IN_NAMESPACE	5816:5:209620:209670	52605	0	True				
ANR	53228	AssignmentExpression	opline -> extended_value |= IS_CONSTANT_IN_NAMESPACE		52605	0		|=			
ANR	53229	PtrMemberAccess	opline -> extended_value		52605	0					
ANR	53230	Identifier	opline		52605	0					
ANR	53231	Identifier	extended_value		52605	1					
ANR	53232	Identifier	IS_CONSTANT_IN_NAMESPACE		52605	1					
ANR	53233	Statement	opline	5817:5:209677:209682	52605	1	True				
ANR	53234	Statement	->	5817:11:209683:209684	52605	2	True				
ANR	53235	Statement	op2	5817:13:209685:209687	52605	3	True				
ANR	53236	Statement	.	5817:16:209688:209688	52605	4	True				
ANR	53237	Statement	constant	5817:17:209689:209696	52605	5	True				
ANR	53238	Statement	=	5817:26:209698:209698	52605	6	True				
ANR	53239	Statement	zend_add_const_name_literal	5817:28:209700:209726	52605	7	True				
ANR	53240	Statement	(	5817:55:209727:209727	52605	8	True				
ANR	53241	Statement	CG	5817:56:209728:209729	52605	9	True				
ANR	53242	Statement	(	5817:58:209730:209730	52605	10	True				
ANR	53243	Statement	active_op_array	5817:59:209731:209745	52605	11	True				
ANR	53244	Statement	)	5817:74:209746:209746	52605	12	True				
ANR	53245	Statement	","	5817:75:209747:209747	52605	13	True				
ANR	53246	Statement	&	5817:77:209749:209749	52605	14	True				
ANR	53247	Statement	constant_name	5817:78:209750:209762	52605	15	True				
ANR	53248	Statement	->	5817:91:209763:209764	52605	16	True				
ANR	53249	Statement	u	5817:93:209765:209765	52605	17	True				
ANR	53250	Statement	.	5817:94:209766:209766	52605	18	True				
ANR	53251	Statement	constant	5817:95:209767:209774	52605	19	True				
ANR	53252	Statement	","	5817:103:209775:209775	52605	20	True				
ANR	53253	Statement	1	5817:105:209777:209777	52605	21	True				
ANR	53254	Statement	TSRMLS_CC	5817:107:209779:209787	52605	22	True				
ANR	53255	Statement	)	5817:116:209788:209788	52605	23	True				
ANR	53256	ExpressionStatement		5817:117:209789:209789	52605	24	True				
ANR	53257	ElseStatement	else		52605	0					
ANR	53258	CompoundStatement		98:11:3661:3661	52605	0					
ANR	53259	Statement	opline	5819:5:209809:209814	52605	0	True				
ANR	53260	Statement	->	5819:11:209815:209816	52605	1	True				
ANR	53261	Statement	op2	5819:13:209817:209819	52605	2	True				
ANR	53262	Statement	.	5819:16:209820:209820	52605	3	True				
ANR	53263	Statement	constant	5819:17:209821:209828	52605	4	True				
ANR	53264	Statement	=	5819:26:209830:209830	52605	5	True				
ANR	53265	Statement	zend_add_const_name_literal	5819:28:209832:209858	52605	6	True				
ANR	53266	Statement	(	5819:55:209859:209859	52605	7	True				
ANR	53267	Statement	CG	5819:56:209860:209861	52605	8	True				
ANR	53268	Statement	(	5819:58:209862:209862	52605	9	True				
ANR	53269	Statement	active_op_array	5819:59:209863:209877	52605	10	True				
ANR	53270	Statement	)	5819:74:209878:209878	52605	11	True				
ANR	53271	Statement	","	5819:75:209879:209879	52605	12	True				
ANR	53272	Statement	&	5819:77:209881:209881	52605	13	True				
ANR	53273	Statement	constant_name	5819:78:209882:209894	52605	14	True				
ANR	53274	Statement	->	5819:91:209895:209896	52605	15	True				
ANR	53275	Statement	u	5819:93:209897:209897	52605	16	True				
ANR	53276	Statement	.	5819:94:209898:209898	52605	17	True				
ANR	53277	Statement	constant	5819:95:209899:209906	52605	18	True				
ANR	53278	Statement	","	5819:103:209907:209907	52605	19	True				
ANR	53279	Statement	0	5819:105:209909:209909	52605	20	True				
ANR	53280	Statement	TSRMLS_CC	5819:107:209911:209919	52605	21	True				
ANR	53281	Statement	)	5819:116:209920:209920	52605	22	True				
ANR	53282	ExpressionStatement		5819:117:209921:209921	52605	23	True				
ANR	53283	ExpressionStatement	GET_CACHE_SLOT ( opline -> op2 . constant )	5822:3:209937:209973	52605	80	True				
ANR	53284	CallExpression	GET_CACHE_SLOT ( opline -> op2 . constant )		52605	0					
ANR	53285	Callee	GET_CACHE_SLOT		52605	0					
ANR	53286	Identifier	GET_CACHE_SLOT		52605	0					
ANR	53287	ArgumentList	opline -> op2 . constant		52605	1					
ANR	53288	Argument	opline -> op2 . constant		52605	0					
ANR	53289	MemberAccess	opline -> op2 . constant		52605	0					
ANR	53290	PtrMemberAccess	opline -> op2		52605	0					
ANR	53291	Identifier	opline		52605	0					
ANR	53292	Identifier	op2		52605	1					
ANR	53293	Identifier	constant		52605	1					
ANR	53294	BreakStatement	break ;	5823:3:209978:209983	52605	81	True				
ANR	53295	ReturnType	void		52605	1					
ANR	53296	Identifier	zend_do_fetch_constant		52605	2					
ANR	53297	ParameterList	"znode * result , znode * constant_container , znode * constant_name , int mode , zend_bool check_namespace TSRMLS_DC"		52605	3					
ANR	53298	Parameter	znode * result	5720:28:206019:206031	52605	0	True				
ANR	53299	ParameterType	znode *		52605	0					
ANR	53300	Identifier	result		52605	1					
ANR	53301	Parameter	znode * constant_container	5720:43:206034:206058	52605	1	True				
ANR	53302	ParameterType	znode *		52605	0					
ANR	53303	Identifier	constant_container		52605	1					
ANR	53304	Parameter	znode * constant_name	5720:70:206061:206080	52605	2	True				
ANR	53305	ParameterType	znode *		52605	0					
ANR	53306	Identifier	constant_name		52605	1					
ANR	53307	Parameter	int mode	5720:92:206083:206090	52605	3	True				
ANR	53308	ParameterType	int		52605	0					
ANR	53309	Identifier	mode		52605	1					
ANR	53310	Parameter	zend_bool check_namespace TSRMLS_DC	5720:102:206093:206127	52605	4	True				
ANR	53311	ParameterType	zend_bool check_namespace		52605	0					
ANR	53312	Identifier	TSRMLS_DC		52605	1					
ANR	53313	CFGEntryNode	ENTRY		52605		True				
ANR	53314	CFGExitNode	EXIT		52605		True				
ANR	53315	Symbol	ZEND_FETCH_CLASS_DEFAULT		52605						
ANR	53316	Symbol	result -> u . constant . type		52605						
ANR	53317	Symbol	get_temporary_variable		52605						
ANR	53318	Symbol	constant_container		52605						
ANR	53319	Symbol	type		52605						
ANR	53320	Symbol	TSRMLS_DC		52605						
ANR	53321	Symbol	result -> u		52605						
ANR	53322	Symbol	opline -> result		52605						
ANR	53323	Symbol	opline -> extended_value		52605						
ANR	53324	Symbol	mode		52605						
ANR	53325	Symbol	opline		52605						
ANR	53326	Symbol	IS_CONSTANT_UNQUALIFIED		52605						
ANR	53327	Symbol	tmp		52605						
ANR	53328	Symbol	constant_container -> u . constant		52605						
ANR	53329	Symbol	constant_container -> op_type		52605						
ANR	53330	Symbol	ZEND_FETCH_CONSTANT		52605						
ANR	53331	Symbol	IS_TMP_VAR		52605						
ANR	53332	Symbol	* constant_name		52605						
ANR	53333	Symbol	IS_CONSTANT		52605						
ANR	53334	Symbol	fetch_type		52605						
ANR	53335	Symbol	IS_CONST		52605						
ANR	53336	Symbol	IS_CONSTANT_IN_NAMESPACE		52605						
ANR	53337	Symbol	opline -> op1_type		52605						
ANR	53338	Symbol	check_namespace		52605						
ANR	53339	Symbol	& tmp		52605						
ANR	53340	Symbol	opline -> op1		52605						
ANR	53341	Symbol	opline -> op2		52605						
ANR	53342	Symbol	Z_STRLEN		52605						
ANR	53343	Symbol	result		52605						
ANR	53344	Symbol	constant_name		52605						
ANR	53345	Symbol	* result		52605						
ANR	53346	Symbol	ZEND_FETCH_CLASS_STATIC		52605						
ANR	53347	Symbol	Z_STRVAL		52605						
ANR	53348	Symbol	* constant_container		52605						
ANR	53349	Symbol	zend_get_class_fetch_type		52605						
ANR	53350	Symbol	opline -> result_type		52605						
ANR	53351	Symbol	result -> u . constant		52605						
ANR	53352	Symbol	CG		52605						
ANR	53353	Symbol	active_op_array		52605						
ANR	53354	Symbol	constant_name -> u . constant		52605						
ANR	53355	Symbol	compound		52605						
ANR	53356	Symbol	E_ERROR		52605						
ANR	53357	Symbol	* opline		52605						
ANR	53358	Symbol	current_namespace		52605						
ANR	53359	Symbol	opline -> opcode		52605						
ANR	53360	Symbol	opline -> op2 . constant		52605						
ANR	53361	Symbol	memchr		52605						
ANR	53362	Symbol	constant_container -> u		52605						
ANR	53363	Symbol	opline -> op2_type		52605						
ANR	53364	Symbol	opline -> result . var		52605						
ANR	53365	Symbol	constant_name -> u		52605						
ANR	53366	DeclStmt									
ANR	53367	Decl							zend_op	zend_op *	opline
ANR	53368	Function	zend_do_init_array	5869:0:211325:212384							
ANR	53369	FunctionDef	"zend_do_init_array (znode * result , const znode * expr , const znode * offset , zend_bool is_ref TSRMLS_DC)"		53368	0					
ANR	53370	CompoundStatement		5870:0:211442:212384	53368	0					
ANR	53371	Statement	zend_op	5871:1:211445:211451	53368	0	True				
ANR	53372	Statement	*	5871:9:211453:211453	53368	1	True				
ANR	53373	Statement	opline	5871:10:211454:211459	53368	2	True				
ANR	53374	Statement	=	5871:17:211461:211461	53368	3	True				
ANR	53375	Statement	get_next_op	5871:19:211463:211473	53368	4	True				
ANR	53376	Statement	(	5871:30:211474:211474	53368	5	True				
ANR	53377	Statement	CG	5871:31:211475:211476	53368	6	True				
ANR	53378	Statement	(	5871:33:211477:211477	53368	7	True				
ANR	53379	Statement	active_op_array	5871:34:211478:211492	53368	8	True				
ANR	53380	Statement	)	5871:49:211493:211493	53368	9	True				
ANR	53381	Statement	TSRMLS_CC	5871:51:211495:211503	53368	10	True				
ANR	53382	Statement	)	5871:60:211504:211504	53368	11	True				
ANR	53383	ExpressionStatement		5871:61:211505:211505	53368	12	True				
ANR	53384	ExpressionStatement	opline -> opcode = ZEND_INIT_ARRAY	5873:1:211509:211541	53368	13	True				
ANR	53385	AssignmentExpression	opline -> opcode = ZEND_INIT_ARRAY		53368	0		=			
ANR	53386	PtrMemberAccess	opline -> opcode		53368	0					
ANR	53387	Identifier	opline		53368	0					
ANR	53388	Identifier	opcode		53368	1					
ANR	53389	Identifier	ZEND_INIT_ARRAY		53368	1					
ANR	53390	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	5874:1:211544:211608	53368	14	True				
ANR	53391	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		53368	0		=			
ANR	53392	MemberAccess	opline -> result . var		53368	0					
ANR	53393	PtrMemberAccess	opline -> result		53368	0					
ANR	53394	Identifier	opline		53368	0					
ANR	53395	Identifier	result		53368	1					
ANR	53396	Identifier	var		53368	1					
ANR	53397	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		53368	1					
ANR	53398	Callee	get_temporary_variable		53368	0					
ANR	53399	Identifier	get_temporary_variable		53368	0					
ANR	53400	ArgumentList	CG ( active_op_array )		53368	1					
ANR	53401	Argument	CG ( active_op_array )		53368	0					
ANR	53402	CallExpression	CG ( active_op_array )		53368	0					
ANR	53403	Callee	CG		53368	0					
ANR	53404	Identifier	CG		53368	0					
ANR	53405	ArgumentList	active_op_array		53368	1					
ANR	53406	Argument	active_op_array		53368	0					
ANR	53407	Identifier	active_op_array		53368	0					
ANR	53408	ExpressionStatement	opline -> result_type = IS_TMP_VAR	5875:1:211611:211643	53368	15	True				
ANR	53409	AssignmentExpression	opline -> result_type = IS_TMP_VAR		53368	0		=			
ANR	53410	PtrMemberAccess	opline -> result_type		53368	0					
ANR	53411	Identifier	opline		53368	0					
ANR	53412	Identifier	result_type		53368	1					
ANR	53413	Identifier	IS_TMP_VAR		53368	1					
ANR	53414	ExpressionStatement	"GET_NODE ( result , opline -> result )"	5876:1:211646:211678	53368	16	True				
ANR	53415	CallExpression	"GET_NODE ( result , opline -> result )"		53368	0					
ANR	53416	Callee	GET_NODE		53368	0					
ANR	53417	Identifier	GET_NODE		53368	0					
ANR	53418	ArgumentList	result		53368	1					
ANR	53419	Argument	result		53368	0					
ANR	53420	Identifier	result		53368	0					
ANR	53421	Argument	opline -> result		53368	1					
ANR	53422	PtrMemberAccess	opline -> result		53368	0					
ANR	53423	Identifier	opline		53368	0					
ANR	53424	Identifier	result		53368	1					
ANR	53425	IfStatement	if ( expr )		53368	17					
ANR	53426	Condition	expr	5877:5:211685:211688	53368	0	True				
ANR	53427	Identifier	expr		53368	0					
ANR	53428	CompoundStatement		8:11:248:248	53368	1					
ANR	53429	ExpressionStatement	"SET_NODE ( opline -> op1 , expr )"	5878:2:211695:211722	53368	0	True				
ANR	53430	CallExpression	"SET_NODE ( opline -> op1 , expr )"		53368	0					
ANR	53431	Callee	SET_NODE		53368	0					
ANR	53432	Identifier	SET_NODE		53368	0					
ANR	53433	ArgumentList	opline -> op1		53368	1					
ANR	53434	Argument	opline -> op1		53368	0					
ANR	53435	PtrMemberAccess	opline -> op1		53368	0					
ANR	53436	Identifier	opline		53368	0					
ANR	53437	Identifier	op1		53368	1					
ANR	53438	Argument	expr		53368	1					
ANR	53439	Identifier	expr		53368	0					
ANR	53440	IfStatement	if ( offset )		53368	1					
ANR	53441	Condition	offset	5879:6:211730:211735	53368	0	True				
ANR	53442	Identifier	offset		53368	0					
ANR	53443	CompoundStatement		10:14:295:295	53368	1					
ANR	53444	ExpressionStatement	"SET_NODE ( opline -> op2 , offset )"	5880:3:211743:211772	53368	0	True				
ANR	53445	CallExpression	"SET_NODE ( opline -> op2 , offset )"		53368	0					
ANR	53446	Callee	SET_NODE		53368	0					
ANR	53447	Identifier	SET_NODE		53368	0					
ANR	53448	ArgumentList	opline -> op2		53368	1					
ANR	53449	Argument	opline -> op2		53368	0					
ANR	53450	PtrMemberAccess	opline -> op2		53368	0					
ANR	53451	Identifier	opline		53368	0					
ANR	53452	Identifier	op2		53368	1					
ANR	53453	Argument	offset		53368	1					
ANR	53454	Identifier	offset		53368	0					
ANR	53455	IfStatement	if ( opline -> op2_type == IS_CONST && Z_TYPE ( CONSTANT ( opline -> op2 . constant ) ) == IS_STRING )		53368	1					
ANR	53456	Condition	opline -> op2_type == IS_CONST && Z_TYPE ( CONSTANT ( opline -> op2 . constant ) ) == IS_STRING	5881:7:211781:211863	53368	0	True				
ANR	53457	AndExpression	opline -> op2_type == IS_CONST && Z_TYPE ( CONSTANT ( opline -> op2 . constant ) ) == IS_STRING		53368	0		&&			
ANR	53458	EqualityExpression	opline -> op2_type == IS_CONST		53368	0		==			
ANR	53459	PtrMemberAccess	opline -> op2_type		53368	0					
ANR	53460	Identifier	opline		53368	0					
ANR	53461	Identifier	op2_type		53368	1					
ANR	53462	Identifier	IS_CONST		53368	1					
ANR	53463	EqualityExpression	Z_TYPE ( CONSTANT ( opline -> op2 . constant ) ) == IS_STRING		53368	1		==			
ANR	53464	CallExpression	Z_TYPE ( CONSTANT ( opline -> op2 . constant ) )		53368	0					
ANR	53465	Callee	Z_TYPE		53368	0					
ANR	53466	Identifier	Z_TYPE		53368	0					
ANR	53467	ArgumentList	CONSTANT ( opline -> op2 . constant )		53368	1					
ANR	53468	Argument	CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53469	CallExpression	CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53470	Callee	CONSTANT		53368	0					
ANR	53471	Identifier	CONSTANT		53368	0					
ANR	53472	ArgumentList	opline -> op2 . constant		53368	1					
ANR	53473	Argument	opline -> op2 . constant		53368	0					
ANR	53474	MemberAccess	opline -> op2 . constant		53368	0					
ANR	53475	PtrMemberAccess	opline -> op2		53368	0					
ANR	53476	Identifier	opline		53368	0					
ANR	53477	Identifier	op2		53368	1					
ANR	53478	Identifier	constant		53368	1					
ANR	53479	Identifier	IS_STRING		53368	1					
ANR	53480	CompoundStatement		14:4:446:461	53368	1					
ANR	53481	IdentifierDeclStatement	ulong index ;	5882:4:211872:211883	53368	0	True				
ANR	53482	IdentifierDecl	index		53368	0					
ANR	53483	IdentifierDeclType	ulong		53368	0					
ANR	53484	Identifier	index		53368	1					
ANR	53485	IdentifierDeclStatement	int numeric = 0 ;	5883:4:211889:211904	53368	1	True				
ANR	53486	IdentifierDecl	numeric = 0		53368	0					
ANR	53487	IdentifierDeclType	int		53368	0					
ANR	53488	Identifier	numeric		53368	1					
ANR	53489	AssignmentExpression	numeric = 0		53368	2		=			
ANR	53490	Identifier	numeric		53368	0					
ANR	53491	PrimaryExpression	0		53368	1					
ANR	53492	ExpressionStatement	"ZEND_HANDLE_NUMERIC_EX ( Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) ) , Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) ) + 1 , index , numeric = 1 )"	5885:4:211911:212039	53368	2	True				
ANR	53493	CallExpression	"ZEND_HANDLE_NUMERIC_EX ( Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) ) , Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) ) + 1 , index , numeric = 1 )"		53368	0					
ANR	53494	Callee	ZEND_HANDLE_NUMERIC_EX		53368	0					
ANR	53495	Identifier	ZEND_HANDLE_NUMERIC_EX		53368	0					
ANR	53496	ArgumentList	Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) )		53368	1					
ANR	53497	Argument	Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) )		53368	0					
ANR	53498	CallExpression	Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) )		53368	0					
ANR	53499	Callee	Z_STRVAL		53368	0					
ANR	53500	Identifier	Z_STRVAL		53368	0					
ANR	53501	ArgumentList	CONSTANT ( opline -> op2 . constant )		53368	1					
ANR	53502	Argument	CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53503	CallExpression	CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53504	Callee	CONSTANT		53368	0					
ANR	53505	Identifier	CONSTANT		53368	0					
ANR	53506	ArgumentList	opline -> op2 . constant		53368	1					
ANR	53507	Argument	opline -> op2 . constant		53368	0					
ANR	53508	MemberAccess	opline -> op2 . constant		53368	0					
ANR	53509	PtrMemberAccess	opline -> op2		53368	0					
ANR	53510	Identifier	opline		53368	0					
ANR	53511	Identifier	op2		53368	1					
ANR	53512	Identifier	constant		53368	1					
ANR	53513	Argument	Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) ) + 1		53368	1					
ANR	53514	AdditiveExpression	Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) ) + 1		53368	0		+			
ANR	53515	CallExpression	Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) )		53368	0					
ANR	53516	Callee	Z_STRLEN		53368	0					
ANR	53517	Identifier	Z_STRLEN		53368	0					
ANR	53518	ArgumentList	CONSTANT ( opline -> op2 . constant )		53368	1					
ANR	53519	Argument	CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53520	CallExpression	CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53521	Callee	CONSTANT		53368	0					
ANR	53522	Identifier	CONSTANT		53368	0					
ANR	53523	ArgumentList	opline -> op2 . constant		53368	1					
ANR	53524	Argument	opline -> op2 . constant		53368	0					
ANR	53525	MemberAccess	opline -> op2 . constant		53368	0					
ANR	53526	PtrMemberAccess	opline -> op2		53368	0					
ANR	53527	Identifier	opline		53368	0					
ANR	53528	Identifier	op2		53368	1					
ANR	53529	Identifier	constant		53368	1					
ANR	53530	PrimaryExpression	1		53368	1					
ANR	53531	Argument	index		53368	2					
ANR	53532	Identifier	index		53368	0					
ANR	53533	Argument	numeric = 1		53368	3					
ANR	53534	AssignmentExpression	numeric = 1		53368	0		=			
ANR	53535	Identifier	numeric		53368	0					
ANR	53536	PrimaryExpression	1		53368	1					
ANR	53537	IfStatement	if ( numeric )		53368	3					
ANR	53538	Condition	numeric	5886:8:212049:212055	53368	0	True				
ANR	53539	Identifier	numeric		53368	0					
ANR	53540	CompoundStatement		17:17:615:615	53368	1					
ANR	53541	ExpressionStatement	zval_dtor ( & CONSTANT ( opline -> op2 . constant ) )	5887:5:212065:212107	53368	0	True				
ANR	53542	CallExpression	zval_dtor ( & CONSTANT ( opline -> op2 . constant ) )		53368	0					
ANR	53543	Callee	zval_dtor		53368	0					
ANR	53544	Identifier	zval_dtor		53368	0					
ANR	53545	ArgumentList	& CONSTANT ( opline -> op2 . constant )		53368	1					
ANR	53546	Argument	& CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53547	UnaryOperationExpression	& CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53548	UnaryOperator	&		53368	0					
ANR	53549	CallExpression	CONSTANT ( opline -> op2 . constant )		53368	1					
ANR	53550	Callee	CONSTANT		53368	0					
ANR	53551	Identifier	CONSTANT		53368	0					
ANR	53552	ArgumentList	opline -> op2 . constant		53368	1					
ANR	53553	Argument	opline -> op2 . constant		53368	0					
ANR	53554	MemberAccess	opline -> op2 . constant		53368	0					
ANR	53555	PtrMemberAccess	opline -> op2		53368	0					
ANR	53556	Identifier	opline		53368	0					
ANR	53557	Identifier	op2		53368	1					
ANR	53558	Identifier	constant		53368	1					
ANR	53559	ExpressionStatement	"ZVAL_LONG ( & CONSTANT ( opline -> op2 . constant ) , index )"	5888:5:212114:212163	53368	1	True				
ANR	53560	CallExpression	"ZVAL_LONG ( & CONSTANT ( opline -> op2 . constant ) , index )"		53368	0					
ANR	53561	Callee	ZVAL_LONG		53368	0					
ANR	53562	Identifier	ZVAL_LONG		53368	0					
ANR	53563	ArgumentList	& CONSTANT ( opline -> op2 . constant )		53368	1					
ANR	53564	Argument	& CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53565	UnaryOperationExpression	& CONSTANT ( opline -> op2 . constant )		53368	0					
ANR	53566	UnaryOperator	&		53368	0					
ANR	53567	CallExpression	CONSTANT ( opline -> op2 . constant )		53368	1					
ANR	53568	Callee	CONSTANT		53368	0					
ANR	53569	Identifier	CONSTANT		53368	0					
ANR	53570	ArgumentList	opline -> op2 . constant		53368	1					
ANR	53571	Argument	opline -> op2 . constant		53368	0					
ANR	53572	MemberAccess	opline -> op2 . constant		53368	0					
ANR	53573	PtrMemberAccess	opline -> op2		53368	0					
ANR	53574	Identifier	opline		53368	0					
ANR	53575	Identifier	op2		53368	1					
ANR	53576	Identifier	constant		53368	1					
ANR	53577	Argument	index		53368	1					
ANR	53578	Identifier	index		53368	0					
ANR	53579	ElseStatement	else		53368	0					
ANR	53580	CompoundStatement		20:11:733:733	53368	0					
ANR	53581	ExpressionStatement	CALCULATE_LITERAL_HASH ( opline -> op2 . constant )	5890:5:212183:212227	53368	0	True				
ANR	53582	CallExpression	CALCULATE_LITERAL_HASH ( opline -> op2 . constant )		53368	0					
ANR	53583	Callee	CALCULATE_LITERAL_HASH		53368	0					
ANR	53584	Identifier	CALCULATE_LITERAL_HASH		53368	0					
ANR	53585	ArgumentList	opline -> op2 . constant		53368	1					
ANR	53586	Argument	opline -> op2 . constant		53368	0					
ANR	53587	MemberAccess	opline -> op2 . constant		53368	0					
ANR	53588	PtrMemberAccess	opline -> op2		53368	0					
ANR	53589	Identifier	opline		53368	0					
ANR	53590	Identifier	op2		53368	1					
ANR	53591	Identifier	constant		53368	1					
ANR	53592	ElseStatement	else		53368	0					
ANR	53593	CompoundStatement		24:9:806:806	53368	0					
ANR	53594	ExpressionStatement	SET_UNUSED ( opline -> op2 )	5894:3:212254:212277	53368	0	True				
ANR	53595	CallExpression	SET_UNUSED ( opline -> op2 )		53368	0					
ANR	53596	Callee	SET_UNUSED		53368	0					
ANR	53597	Identifier	SET_UNUSED		53368	0					
ANR	53598	ArgumentList	opline -> op2		53368	1					
ANR	53599	Argument	opline -> op2		53368	0					
ANR	53600	PtrMemberAccess	opline -> op2		53368	0					
ANR	53601	Identifier	opline		53368	0					
ANR	53602	Identifier	op2		53368	1					
ANR	53603	ElseStatement	else		53368	0					
ANR	53604	CompoundStatement		27:8:848:848	53368	0					
ANR	53605	ExpressionStatement	SET_UNUSED ( opline -> op1 )	5897:2:212295:212318	53368	0	True				
ANR	53606	CallExpression	SET_UNUSED ( opline -> op1 )		53368	0					
ANR	53607	Callee	SET_UNUSED		53368	0					
ANR	53608	Identifier	SET_UNUSED		53368	0					
ANR	53609	ArgumentList	opline -> op1		53368	1					
ANR	53610	Argument	opline -> op1		53368	0					
ANR	53611	PtrMemberAccess	opline -> op1		53368	0					
ANR	53612	Identifier	opline		53368	0					
ANR	53613	Identifier	op1		53368	1					
ANR	53614	ExpressionStatement	SET_UNUSED ( opline -> op2 )	5898:2:212322:212345	53368	1	True				
ANR	53615	CallExpression	SET_UNUSED ( opline -> op2 )		53368	0					
ANR	53616	Callee	SET_UNUSED		53368	0					
ANR	53617	Identifier	SET_UNUSED		53368	0					
ANR	53618	ArgumentList	opline -> op2		53368	1					
ANR	53619	Argument	opline -> op2		53368	0					
ANR	53620	PtrMemberAccess	opline -> op2		53368	0					
ANR	53621	Identifier	opline		53368	0					
ANR	53622	Identifier	op2		53368	1					
ANR	53623	ExpressionStatement	opline -> extended_value = is_ref	5900:1:212351:212382	53368	18	True				
ANR	53624	AssignmentExpression	opline -> extended_value = is_ref		53368	0		=			
ANR	53625	PtrMemberAccess	opline -> extended_value		53368	0					
ANR	53626	Identifier	opline		53368	0					
ANR	53627	Identifier	extended_value		53368	1					
ANR	53628	Identifier	is_ref		53368	1					
ANR	53629	ReturnType	void		53368	1					
ANR	53630	Identifier	zend_do_init_array		53368	2					
ANR	53631	ParameterList	"znode * result , const znode * expr , const znode * offset , zend_bool is_ref TSRMLS_DC"		53368	3					
ANR	53632	Parameter	znode * result	5869:24:211349:211361	53368	0	True				
ANR	53633	ParameterType	znode *		53368	0					
ANR	53634	Identifier	result		53368	1					
ANR	53635	Parameter	const znode * expr	5869:39:211364:211380	53368	1	True				
ANR	53636	ParameterType	const znode *		53368	0					
ANR	53637	Identifier	expr		53368	1					
ANR	53638	Parameter	const znode * offset	5869:58:211383:211401	53368	2	True				
ANR	53639	ParameterType	const znode *		53368	0					
ANR	53640	Identifier	offset		53368	1					
ANR	53641	Parameter	zend_bool is_ref TSRMLS_DC	5869:79:211404:211429	53368	3	True				
ANR	53642	ParameterType	zend_bool is_ref		53368	0					
ANR	53643	Identifier	TSRMLS_DC		53368	1					
ANR	53644	CFGEntryNode	ENTRY		53368		True				
ANR	53645	CFGExitNode	EXIT		53368		True				
ANR	53646	Symbol	opline -> op1		53368						
ANR	53647	Symbol	opline -> op2		53368						
ANR	53648	Symbol	get_temporary_variable		53368						
ANR	53649	Symbol	Z_TYPE		53368						
ANR	53650	Symbol	numeric		53368						
ANR	53651	Symbol	Z_STRLEN		53368						
ANR	53652	Symbol	TSRMLS_DC		53368						
ANR	53653	Symbol	opline -> result		53368						
ANR	53654	Symbol	opline -> extended_value		53368						
ANR	53655	Symbol	result		53368						
ANR	53656	Symbol	is_ref		53368						
ANR	53657	Symbol	opline		53368						
ANR	53658	Symbol	Z_STRVAL		53368						
ANR	53659	Symbol	expr		53368						
ANR	53660	Symbol	IS_STRING		53368						
ANR	53661	Symbol	& CONSTANT		53368						
ANR	53662	Symbol	IS_TMP_VAR		53368						
ANR	53663	Symbol	ZEND_INIT_ARRAY		53368						
ANR	53664	Symbol	opline -> result_type		53368						
ANR	53665	Symbol	IS_CONST		53368						
ANR	53666	Symbol	offset		53368						
ANR	53667	Symbol	CG		53368						
ANR	53668	Symbol	active_op_array		53368						
ANR	53669	Symbol	CONSTANT		53368						
ANR	53670	Symbol	index		53368						
ANR	53671	Symbol	* opline		53368						
ANR	53672	Symbol	opline -> opcode		53368						
ANR	53673	Symbol	opline -> op2 . constant		53368						
ANR	53674	Symbol	opline -> op2_type		53368						
ANR	53675	Symbol	opline -> result . var		53368						
ANR	53676	Function	zend_do_add_array_element	5904:0:212397:213271							
ANR	53677	FunctionDef	"zend_do_add_array_element (znode * result , const znode * expr , const znode * offset , zend_bool is_ref TSRMLS_DC)"		53676	0					
ANR	53678	CompoundStatement		5905:0:212521:213271	53676	0					
ANR	53679	Statement	zend_op	5906:1:212524:212530	53676	0	True				
ANR	53680	Statement	*	5906:9:212532:212532	53676	1	True				
ANR	53681	Statement	opline	5906:10:212533:212538	53676	2	True				
ANR	53682	Statement	=	5906:17:212540:212540	53676	3	True				
ANR	53683	Statement	get_next_op	5906:19:212542:212552	53676	4	True				
ANR	53684	Statement	(	5906:30:212553:212553	53676	5	True				
ANR	53685	Statement	CG	5906:31:212554:212555	53676	6	True				
ANR	53686	Statement	(	5906:33:212556:212556	53676	7	True				
ANR	53687	Statement	active_op_array	5906:34:212557:212571	53676	8	True				
ANR	53688	Statement	)	5906:49:212572:212572	53676	9	True				
ANR	53689	Statement	TSRMLS_CC	5906:51:212574:212582	53676	10	True				
ANR	53690	Statement	)	5906:60:212583:212583	53676	11	True				
ANR	53691	ExpressionStatement		5906:61:212584:212584	53676	12	True				
ANR	53692	ExpressionStatement	opline -> opcode = ZEND_ADD_ARRAY_ELEMENT	5908:1:212588:212627	53676	13	True				
ANR	53693	AssignmentExpression	opline -> opcode = ZEND_ADD_ARRAY_ELEMENT		53676	0		=			
ANR	53694	PtrMemberAccess	opline -> opcode		53676	0					
ANR	53695	Identifier	opline		53676	0					
ANR	53696	Identifier	opcode		53676	1					
ANR	53697	Identifier	ZEND_ADD_ARRAY_ELEMENT		53676	1					
ANR	53698	ExpressionStatement	"SET_NODE ( opline -> result , result )"	5909:1:212630:212662	53676	14	True				
ANR	53699	CallExpression	"SET_NODE ( opline -> result , result )"		53676	0					
ANR	53700	Callee	SET_NODE		53676	0					
ANR	53701	Identifier	SET_NODE		53676	0					
ANR	53702	ArgumentList	opline -> result		53676	1					
ANR	53703	Argument	opline -> result		53676	0					
ANR	53704	PtrMemberAccess	opline -> result		53676	0					
ANR	53705	Identifier	opline		53676	0					
ANR	53706	Identifier	result		53676	1					
ANR	53707	Argument	result		53676	1					
ANR	53708	Identifier	result		53676	0					
ANR	53709	ExpressionStatement	"SET_NODE ( opline -> op1 , expr )"	5910:1:212665:212692	53676	15	True				
ANR	53710	CallExpression	"SET_NODE ( opline -> op1 , expr )"		53676	0					
ANR	53711	Callee	SET_NODE		53676	0					
ANR	53712	Identifier	SET_NODE		53676	0					
ANR	53713	ArgumentList	opline -> op1		53676	1					
ANR	53714	Argument	opline -> op1		53676	0					
ANR	53715	PtrMemberAccess	opline -> op1		53676	0					
ANR	53716	Identifier	opline		53676	0					
ANR	53717	Identifier	op1		53676	1					
ANR	53718	Argument	expr		53676	1					
ANR	53719	Identifier	expr		53676	0					
ANR	53720	IfStatement	if ( offset )		53676	16					
ANR	53721	Condition	offset	5911:5:212699:212704	53676	0	True				
ANR	53722	Identifier	offset		53676	0					
ANR	53723	CompoundStatement		7:13:185:185	53676	1					
ANR	53724	ExpressionStatement	"SET_NODE ( opline -> op2 , offset )"	5912:2:212711:212740	53676	0	True				
ANR	53725	CallExpression	"SET_NODE ( opline -> op2 , offset )"		53676	0					
ANR	53726	Callee	SET_NODE		53676	0					
ANR	53727	Identifier	SET_NODE		53676	0					
ANR	53728	ArgumentList	opline -> op2		53676	1					
ANR	53729	Argument	opline -> op2		53676	0					
ANR	53730	PtrMemberAccess	opline -> op2		53676	0					
ANR	53731	Identifier	opline		53676	0					
ANR	53732	Identifier	op2		53676	1					
ANR	53733	Argument	offset		53676	1					
ANR	53734	Identifier	offset		53676	0					
ANR	53735	IfStatement	if ( opline -> op2_type == IS_CONST && Z_TYPE ( CONSTANT ( opline -> op2 . constant ) ) == IS_STRING )		53676	1					
ANR	53736	Condition	opline -> op2_type == IS_CONST && Z_TYPE ( CONSTANT ( opline -> op2 . constant ) ) == IS_STRING	5913:6:212748:212830	53676	0	True				
ANR	53737	AndExpression	opline -> op2_type == IS_CONST && Z_TYPE ( CONSTANT ( opline -> op2 . constant ) ) == IS_STRING		53676	0		&&			
ANR	53738	EqualityExpression	opline -> op2_type == IS_CONST		53676	0		==			
ANR	53739	PtrMemberAccess	opline -> op2_type		53676	0					
ANR	53740	Identifier	opline		53676	0					
ANR	53741	Identifier	op2_type		53676	1					
ANR	53742	Identifier	IS_CONST		53676	1					
ANR	53743	EqualityExpression	Z_TYPE ( CONSTANT ( opline -> op2 . constant ) ) == IS_STRING		53676	1		==			
ANR	53744	CallExpression	Z_TYPE ( CONSTANT ( opline -> op2 . constant ) )		53676	0					
ANR	53745	Callee	Z_TYPE		53676	0					
ANR	53746	Identifier	Z_TYPE		53676	0					
ANR	53747	ArgumentList	CONSTANT ( opline -> op2 . constant )		53676	1					
ANR	53748	Argument	CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53749	CallExpression	CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53750	Callee	CONSTANT		53676	0					
ANR	53751	Identifier	CONSTANT		53676	0					
ANR	53752	ArgumentList	opline -> op2 . constant		53676	1					
ANR	53753	Argument	opline -> op2 . constant		53676	0					
ANR	53754	MemberAccess	opline -> op2 . constant		53676	0					
ANR	53755	PtrMemberAccess	opline -> op2		53676	0					
ANR	53756	Identifier	opline		53676	0					
ANR	53757	Identifier	op2		53676	1					
ANR	53758	Identifier	constant		53676	1					
ANR	53759	Identifier	IS_STRING		53676	1					
ANR	53760	CompoundStatement		11:3:332:347	53676	1					
ANR	53761	IdentifierDeclStatement	ulong index ;	5914:3:212838:212849	53676	0	True				
ANR	53762	IdentifierDecl	index		53676	0					
ANR	53763	IdentifierDeclType	ulong		53676	0					
ANR	53764	Identifier	index		53676	1					
ANR	53765	IdentifierDeclStatement	int numeric = 0 ;	5915:3:212854:212869	53676	1	True				
ANR	53766	IdentifierDecl	numeric = 0		53676	0					
ANR	53767	IdentifierDeclType	int		53676	0					
ANR	53768	Identifier	numeric		53676	1					
ANR	53769	AssignmentExpression	numeric = 0		53676	2		=			
ANR	53770	Identifier	numeric		53676	0					
ANR	53771	PrimaryExpression	0		53676	1					
ANR	53772	ExpressionStatement	"ZEND_HANDLE_NUMERIC_EX ( Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) ) , Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) ) + 1 , index , numeric = 1 )"	5917:3:212875:213003	53676	2	True				
ANR	53773	CallExpression	"ZEND_HANDLE_NUMERIC_EX ( Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) ) , Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) ) + 1 , index , numeric = 1 )"		53676	0					
ANR	53774	Callee	ZEND_HANDLE_NUMERIC_EX		53676	0					
ANR	53775	Identifier	ZEND_HANDLE_NUMERIC_EX		53676	0					
ANR	53776	ArgumentList	Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) )		53676	1					
ANR	53777	Argument	Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) )		53676	0					
ANR	53778	CallExpression	Z_STRVAL ( CONSTANT ( opline -> op2 . constant ) )		53676	0					
ANR	53779	Callee	Z_STRVAL		53676	0					
ANR	53780	Identifier	Z_STRVAL		53676	0					
ANR	53781	ArgumentList	CONSTANT ( opline -> op2 . constant )		53676	1					
ANR	53782	Argument	CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53783	CallExpression	CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53784	Callee	CONSTANT		53676	0					
ANR	53785	Identifier	CONSTANT		53676	0					
ANR	53786	ArgumentList	opline -> op2 . constant		53676	1					
ANR	53787	Argument	opline -> op2 . constant		53676	0					
ANR	53788	MemberAccess	opline -> op2 . constant		53676	0					
ANR	53789	PtrMemberAccess	opline -> op2		53676	0					
ANR	53790	Identifier	opline		53676	0					
ANR	53791	Identifier	op2		53676	1					
ANR	53792	Identifier	constant		53676	1					
ANR	53793	Argument	Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) ) + 1		53676	1					
ANR	53794	AdditiveExpression	Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) ) + 1		53676	0		+			
ANR	53795	CallExpression	Z_STRLEN ( CONSTANT ( opline -> op2 . constant ) )		53676	0					
ANR	53796	Callee	Z_STRLEN		53676	0					
ANR	53797	Identifier	Z_STRLEN		53676	0					
ANR	53798	ArgumentList	CONSTANT ( opline -> op2 . constant )		53676	1					
ANR	53799	Argument	CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53800	CallExpression	CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53801	Callee	CONSTANT		53676	0					
ANR	53802	Identifier	CONSTANT		53676	0					
ANR	53803	ArgumentList	opline -> op2 . constant		53676	1					
ANR	53804	Argument	opline -> op2 . constant		53676	0					
ANR	53805	MemberAccess	opline -> op2 . constant		53676	0					
ANR	53806	PtrMemberAccess	opline -> op2		53676	0					
ANR	53807	Identifier	opline		53676	0					
ANR	53808	Identifier	op2		53676	1					
ANR	53809	Identifier	constant		53676	1					
ANR	53810	PrimaryExpression	1		53676	1					
ANR	53811	Argument	index		53676	2					
ANR	53812	Identifier	index		53676	0					
ANR	53813	Argument	numeric = 1		53676	3					
ANR	53814	AssignmentExpression	numeric = 1		53676	0		=			
ANR	53815	Identifier	numeric		53676	0					
ANR	53816	PrimaryExpression	1		53676	1					
ANR	53817	IfStatement	if ( numeric )		53676	3					
ANR	53818	Condition	numeric	5918:7:213012:213018	53676	0	True				
ANR	53819	Identifier	numeric		53676	0					
ANR	53820	CompoundStatement		14:16:499:499	53676	1					
ANR	53821	ExpressionStatement	zval_dtor ( & CONSTANT ( opline -> op2 . constant ) )	5919:4:213027:213069	53676	0	True				
ANR	53822	CallExpression	zval_dtor ( & CONSTANT ( opline -> op2 . constant ) )		53676	0					
ANR	53823	Callee	zval_dtor		53676	0					
ANR	53824	Identifier	zval_dtor		53676	0					
ANR	53825	ArgumentList	& CONSTANT ( opline -> op2 . constant )		53676	1					
ANR	53826	Argument	& CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53827	UnaryOperationExpression	& CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53828	UnaryOperator	&		53676	0					
ANR	53829	CallExpression	CONSTANT ( opline -> op2 . constant )		53676	1					
ANR	53830	Callee	CONSTANT		53676	0					
ANR	53831	Identifier	CONSTANT		53676	0					
ANR	53832	ArgumentList	opline -> op2 . constant		53676	1					
ANR	53833	Argument	opline -> op2 . constant		53676	0					
ANR	53834	MemberAccess	opline -> op2 . constant		53676	0					
ANR	53835	PtrMemberAccess	opline -> op2		53676	0					
ANR	53836	Identifier	opline		53676	0					
ANR	53837	Identifier	op2		53676	1					
ANR	53838	Identifier	constant		53676	1					
ANR	53839	ExpressionStatement	"ZVAL_LONG ( & CONSTANT ( opline -> op2 . constant ) , index )"	5920:4:213075:213124	53676	1	True				
ANR	53840	CallExpression	"ZVAL_LONG ( & CONSTANT ( opline -> op2 . constant ) , index )"		53676	0					
ANR	53841	Callee	ZVAL_LONG		53676	0					
ANR	53842	Identifier	ZVAL_LONG		53676	0					
ANR	53843	ArgumentList	& CONSTANT ( opline -> op2 . constant )		53676	1					
ANR	53844	Argument	& CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53845	UnaryOperationExpression	& CONSTANT ( opline -> op2 . constant )		53676	0					
ANR	53846	UnaryOperator	&		53676	0					
ANR	53847	CallExpression	CONSTANT ( opline -> op2 . constant )		53676	1					
ANR	53848	Callee	CONSTANT		53676	0					
ANR	53849	Identifier	CONSTANT		53676	0					
ANR	53850	ArgumentList	opline -> op2 . constant		53676	1					
ANR	53851	Argument	opline -> op2 . constant		53676	0					
ANR	53852	MemberAccess	opline -> op2 . constant		53676	0					
ANR	53853	PtrMemberAccess	opline -> op2		53676	0					
ANR	53854	Identifier	opline		53676	0					
ANR	53855	Identifier	op2		53676	1					
ANR	53856	Identifier	constant		53676	1					
ANR	53857	Argument	index		53676	1					
ANR	53858	Identifier	index		53676	0					
ANR	53859	ElseStatement	else		53676	0					
ANR	53860	CompoundStatement		17:10:614:614	53676	0					
ANR	53861	ExpressionStatement	CALCULATE_LITERAL_HASH ( opline -> op2 . constant )	5922:4:213142:213186	53676	0	True				
ANR	53862	CallExpression	CALCULATE_LITERAL_HASH ( opline -> op2 . constant )		53676	0					
ANR	53863	Callee	CALCULATE_LITERAL_HASH		53676	0					
ANR	53864	Identifier	CALCULATE_LITERAL_HASH		53676	0					
ANR	53865	ArgumentList	opline -> op2 . constant		53676	1					
ANR	53866	Argument	opline -> op2 . constant		53676	0					
ANR	53867	MemberAccess	opline -> op2 . constant		53676	0					
ANR	53868	PtrMemberAccess	opline -> op2		53676	0					
ANR	53869	Identifier	opline		53676	0					
ANR	53870	Identifier	op2		53676	1					
ANR	53871	Identifier	constant		53676	1					
ANR	53872	ElseStatement	else		53676	0					
ANR	53873	CompoundStatement		21:8:683:683	53676	0					
ANR	53874	ExpressionStatement	SET_UNUSED ( opline -> op2 )	5926:2:213209:213232	53676	0	True				
ANR	53875	CallExpression	SET_UNUSED ( opline -> op2 )		53676	0					
ANR	53876	Callee	SET_UNUSED		53676	0					
ANR	53877	Identifier	SET_UNUSED		53676	0					
ANR	53878	ArgumentList	opline -> op2		53676	1					
ANR	53879	Argument	opline -> op2		53676	0					
ANR	53880	PtrMemberAccess	opline -> op2		53676	0					
ANR	53881	Identifier	opline		53676	0					
ANR	53882	Identifier	op2		53676	1					
ANR	53883	ExpressionStatement	opline -> extended_value = is_ref	5928:1:213238:213269	53676	17	True				
ANR	53884	AssignmentExpression	opline -> extended_value = is_ref		53676	0		=			
ANR	53885	PtrMemberAccess	opline -> extended_value		53676	0					
ANR	53886	Identifier	opline		53676	0					
ANR	53887	Identifier	extended_value		53676	1					
ANR	53888	Identifier	is_ref		53676	1					
ANR	53889	ReturnType	void		53676	1					
ANR	53890	Identifier	zend_do_add_array_element		53676	2					
ANR	53891	ParameterList	"znode * result , const znode * expr , const znode * offset , zend_bool is_ref TSRMLS_DC"		53676	3					
ANR	53892	Parameter	znode * result	5904:31:212428:212440	53676	0	True				
ANR	53893	ParameterType	znode *		53676	0					
ANR	53894	Identifier	result		53676	1					
ANR	53895	Parameter	const znode * expr	5904:46:212443:212459	53676	1	True				
ANR	53896	ParameterType	const znode *		53676	0					
ANR	53897	Identifier	expr		53676	1					
ANR	53898	Parameter	const znode * offset	5904:65:212462:212480	53676	2	True				
ANR	53899	ParameterType	const znode *		53676	0					
ANR	53900	Identifier	offset		53676	1					
ANR	53901	Parameter	zend_bool is_ref TSRMLS_DC	5904:86:212483:212508	53676	3	True				
ANR	53902	ParameterType	zend_bool is_ref		53676	0					
ANR	53903	Identifier	TSRMLS_DC		53676	1					
ANR	53904	CFGEntryNode	ENTRY		53676		True				
ANR	53905	CFGExitNode	EXIT		53676		True				
ANR	53906	Symbol	opline -> op1		53676						
ANR	53907	Symbol	opline -> op2		53676						
ANR	53908	Symbol	IS_CONST		53676						
ANR	53909	Symbol	offset		53676						
ANR	53910	Symbol	Z_TYPE		53676						
ANR	53911	Symbol	CONSTANT		53676						
ANR	53912	Symbol	index		53676						
ANR	53913	Symbol	numeric		53676						
ANR	53914	Symbol	Z_STRLEN		53676						
ANR	53915	Symbol	TSRMLS_DC		53676						
ANR	53916	Symbol	opline -> result		53676						
ANR	53917	Symbol	opline -> extended_value		53676						
ANR	53918	Symbol	result		53676						
ANR	53919	Symbol	is_ref		53676						
ANR	53920	Symbol	opline		53676						
ANR	53921	Symbol	* opline		53676						
ANR	53922	Symbol	opline -> opcode		53676						
ANR	53923	Symbol	Z_STRVAL		53676						
ANR	53924	Symbol	opline -> op2 . constant		53676						
ANR	53925	Symbol	ZEND_ADD_ARRAY_ELEMENT		53676						
ANR	53926	Symbol	expr		53676						
ANR	53927	Symbol	opline -> op2_type		53676						
ANR	53928	Symbol	IS_STRING		53676						
ANR	53929	Symbol	& CONSTANT		53676						
ANR	53930	Function	zend_do_add_static_array_element	5932:0:213284:214485							
ANR	53931	FunctionDef	"zend_do_add_static_array_element (zval * result , zval * offset , zval * expr)"		53930	0					
ANR	53932	CompoundStatement		5933:0:213372:214485	53930	0					
ANR	53933	IfStatement	if ( offset )		53930	0					
ANR	53934	Condition	offset	5934:5:213379:213384	53930	0	True				
ANR	53935	Identifier	offset		53930	0					
ANR	53936	CompoundStatement		2:13:14:14	53930	1					
ANR	53937	SwitchStatement	switch ( Z_TYPE_P ( offset ) )		53930	0					
ANR	53938	Condition	Z_TYPE_P ( offset )	5935:10:213399:213414	53930	0	True				
ANR	53939	CallExpression	Z_TYPE_P ( offset )		53930	0					
ANR	53940	Callee	Z_TYPE_P		53930	0					
ANR	53941	Identifier	Z_TYPE_P		53930	0					
ANR	53942	ArgumentList	offset		53930	1					
ANR	53943	Argument	offset		53930	0					
ANR	53944	Identifier	offset		53930	0					
ANR	53945	CompoundStatement		3:28:44:44	53930	1					
ANR	53946	Label	case IS_STRING :	5936:3:213422:213436	53930	0	True				
ANR	53947	Identifier	IS_STRING		53930	0					
ANR	53948	ExpressionStatement	"zend_symtable_update ( Z_ARRVAL_P ( result ) , Z_STRVAL_P ( offset ) , Z_STRLEN_P ( offset ) + 1 , & expr , sizeof ( zval * ) , NULL )"	5937:4:213442:213553	53930	1	True				
ANR	53949	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( result ) , Z_STRVAL_P ( offset ) , Z_STRLEN_P ( offset ) + 1 , & expr , sizeof ( zval * ) , NULL )"		53930	0					
ANR	53950	Callee	zend_symtable_update		53930	0					
ANR	53951	Identifier	zend_symtable_update		53930	0					
ANR	53952	ArgumentList	Z_ARRVAL_P ( result )		53930	1					
ANR	53953	Argument	Z_ARRVAL_P ( result )		53930	0					
ANR	53954	CallExpression	Z_ARRVAL_P ( result )		53930	0					
ANR	53955	Callee	Z_ARRVAL_P		53930	0					
ANR	53956	Identifier	Z_ARRVAL_P		53930	0					
ANR	53957	ArgumentList	result		53930	1					
ANR	53958	Argument	result		53930	0					
ANR	53959	Identifier	result		53930	0					
ANR	53960	Argument	Z_STRVAL_P ( offset )		53930	1					
ANR	53961	CallExpression	Z_STRVAL_P ( offset )		53930	0					
ANR	53962	Callee	Z_STRVAL_P		53930	0					
ANR	53963	Identifier	Z_STRVAL_P		53930	0					
ANR	53964	ArgumentList	offset		53930	1					
ANR	53965	Argument	offset		53930	0					
ANR	53966	Identifier	offset		53930	0					
ANR	53967	Argument	Z_STRLEN_P ( offset ) + 1		53930	2					
ANR	53968	AdditiveExpression	Z_STRLEN_P ( offset ) + 1		53930	0		+			
ANR	53969	CallExpression	Z_STRLEN_P ( offset )		53930	0					
ANR	53970	Callee	Z_STRLEN_P		53930	0					
ANR	53971	Identifier	Z_STRLEN_P		53930	0					
ANR	53972	ArgumentList	offset		53930	1					
ANR	53973	Argument	offset		53930	0					
ANR	53974	Identifier	offset		53930	0					
ANR	53975	PrimaryExpression	1		53930	1					
ANR	53976	Argument	& expr		53930	3					
ANR	53977	UnaryOperationExpression	& expr		53930	0					
ANR	53978	UnaryOperator	&		53930	0					
ANR	53979	Identifier	expr		53930	1					
ANR	53980	Argument	sizeof ( zval * )		53930	4					
ANR	53981	SizeofExpression	sizeof ( zval * )		53930	0					
ANR	53982	Sizeof	sizeof		53930	0					
ANR	53983	SizeofOperand	zval *		53930	1					
ANR	53984	Argument	NULL		53930	5					
ANR	53985	Identifier	NULL		53930	0					
ANR	53986	ExpressionStatement	zval_dtor ( offset )	5938:4:213559:213576	53930	2	True				
ANR	53987	CallExpression	zval_dtor ( offset )		53930	0					
ANR	53988	Callee	zval_dtor		53930	0					
ANR	53989	Identifier	zval_dtor		53930	0					
ANR	53990	ArgumentList	offset		53930	1					
ANR	53991	Argument	offset		53930	0					
ANR	53992	Identifier	offset		53930	0					
ANR	53993	BreakStatement	break ;	5939:4:213582:213587	53930	3	True				
ANR	53994	Label	case IS_NULL :	5940:3:213592:213604	53930	4	True				
ANR	53995	Identifier	IS_NULL		53930	0					
ANR	53996	ExpressionStatement	"zend_symtable_update ( Z_ARRVAL_P ( result ) , """" , 1 , & expr , sizeof ( zval * ) , NULL )"	5941:4:213610:213686	53930	5	True				
ANR	53997	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( result ) , """" , 1 , & expr , sizeof ( zval * ) , NULL )"		53930	0					
ANR	53998	Callee	zend_symtable_update		53930	0					
ANR	53999	Identifier	zend_symtable_update		53930	0					
ANR	54000	ArgumentList	Z_ARRVAL_P ( result )		53930	1					
ANR	54001	Argument	Z_ARRVAL_P ( result )		53930	0					
ANR	54002	CallExpression	Z_ARRVAL_P ( result )		53930	0					
ANR	54003	Callee	Z_ARRVAL_P		53930	0					
ANR	54004	Identifier	Z_ARRVAL_P		53930	0					
ANR	54005	ArgumentList	result		53930	1					
ANR	54006	Argument	result		53930	0					
ANR	54007	Identifier	result		53930	0					
ANR	54008	Argument	""""""		53930	1					
ANR	54009	PrimaryExpression	""""""		53930	0					
ANR	54010	Argument	1		53930	2					
ANR	54011	PrimaryExpression	1		53930	0					
ANR	54012	Argument	& expr		53930	3					
ANR	54013	UnaryOperationExpression	& expr		53930	0					
ANR	54014	UnaryOperator	&		53930	0					
ANR	54015	Identifier	expr		53930	1					
ANR	54016	Argument	sizeof ( zval * )		53930	4					
ANR	54017	SizeofExpression	sizeof ( zval * )		53930	0					
ANR	54018	Sizeof	sizeof		53930	0					
ANR	54019	SizeofOperand	zval *		53930	1					
ANR	54020	Argument	NULL		53930	5					
ANR	54021	Identifier	NULL		53930	0					
ANR	54022	BreakStatement	break ;	5942:4:213692:213697	53930	6	True				
ANR	54023	Label	case IS_RESOURCE :	5943:3:213702:213718	53930	7	True				
ANR	54024	Identifier	IS_RESOURCE		53930	0					
ANR	54025	ExpressionStatement	"zend_error ( E_STRICT , ""Resource ID#%ld used as offset, casting to integer (%ld)"" , Z_LVAL_P ( offset ) , Z_LVAL_P ( offset ) )"	5944:4:213724:213840	53930	8	True				
ANR	54026	CallExpression	"zend_error ( E_STRICT , ""Resource ID#%ld used as offset, casting to integer (%ld)"" , Z_LVAL_P ( offset ) , Z_LVAL_P ( offset ) )"		53930	0					
ANR	54027	Callee	zend_error		53930	0					
ANR	54028	Identifier	zend_error		53930	0					
ANR	54029	ArgumentList	E_STRICT		53930	1					
ANR	54030	Argument	E_STRICT		53930	0					
ANR	54031	Identifier	E_STRICT		53930	0					
ANR	54032	Argument	"""Resource ID#%ld used as offset, casting to integer (%ld)"""		53930	1					
ANR	54033	PrimaryExpression	"""Resource ID#%ld used as offset, casting to integer (%ld)"""		53930	0					
ANR	54034	Argument	Z_LVAL_P ( offset )		53930	2					
ANR	54035	CallExpression	Z_LVAL_P ( offset )		53930	0					
ANR	54036	Callee	Z_LVAL_P		53930	0					
ANR	54037	Identifier	Z_LVAL_P		53930	0					
ANR	54038	ArgumentList	offset		53930	1					
ANR	54039	Argument	offset		53930	0					
ANR	54040	Identifier	offset		53930	0					
ANR	54041	Argument	Z_LVAL_P ( offset )		53930	3					
ANR	54042	CallExpression	Z_LVAL_P ( offset )		53930	0					
ANR	54043	Callee	Z_LVAL_P		53930	0					
ANR	54044	Identifier	Z_LVAL_P		53930	0					
ANR	54045	ArgumentList	offset		53930	1					
ANR	54046	Argument	offset		53930	0					
ANR	54047	Identifier	offset		53930	0					
ANR	54048	Label	case IS_LONG :	5946:3:213883:213895	53930	9	True				
ANR	54049	Identifier	IS_LONG		53930	0					
ANR	54050	Label	case IS_BOOL :	5947:3:213900:213912	53930	10	True				
ANR	54051	Identifier	IS_BOOL		53930	0					
ANR	54052	ExpressionStatement	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , Z_LVAL_P ( offset ) , & expr , sizeof ( zval * ) , NULL )"	5948:4:213918:214007	53930	11	True				
ANR	54053	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , Z_LVAL_P ( offset ) , & expr , sizeof ( zval * ) , NULL )"		53930	0					
ANR	54054	Callee	zend_hash_index_update		53930	0					
ANR	54055	Identifier	zend_hash_index_update		53930	0					
ANR	54056	ArgumentList	Z_ARRVAL_P ( result )		53930	1					
ANR	54057	Argument	Z_ARRVAL_P ( result )		53930	0					
ANR	54058	CallExpression	Z_ARRVAL_P ( result )		53930	0					
ANR	54059	Callee	Z_ARRVAL_P		53930	0					
ANR	54060	Identifier	Z_ARRVAL_P		53930	0					
ANR	54061	ArgumentList	result		53930	1					
ANR	54062	Argument	result		53930	0					
ANR	54063	Identifier	result		53930	0					
ANR	54064	Argument	Z_LVAL_P ( offset )		53930	1					
ANR	54065	CallExpression	Z_LVAL_P ( offset )		53930	0					
ANR	54066	Callee	Z_LVAL_P		53930	0					
ANR	54067	Identifier	Z_LVAL_P		53930	0					
ANR	54068	ArgumentList	offset		53930	1					
ANR	54069	Argument	offset		53930	0					
ANR	54070	Identifier	offset		53930	0					
ANR	54071	Argument	& expr		53930	2					
ANR	54072	UnaryOperationExpression	& expr		53930	0					
ANR	54073	UnaryOperator	&		53930	0					
ANR	54074	Identifier	expr		53930	1					
ANR	54075	Argument	sizeof ( zval * )		53930	3					
ANR	54076	SizeofExpression	sizeof ( zval * )		53930	0					
ANR	54077	Sizeof	sizeof		53930	0					
ANR	54078	SizeofOperand	zval *		53930	1					
ANR	54079	Argument	NULL		53930	4					
ANR	54080	Identifier	NULL		53930	0					
ANR	54081	BreakStatement	break ;	5949:4:214013:214018	53930	12	True				
ANR	54082	Label	case IS_DOUBLE :	5950:3:214023:214037	53930	13	True				
ANR	54083	Identifier	IS_DOUBLE		53930	0					
ANR	54084	ExpressionStatement	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , zend_dval_to_lval ( Z_DVAL_P ( offset ) ) , & expr , sizeof ( zval * ) , NULL )"	5951:4:214043:214151	53930	14	True				
ANR	54085	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , zend_dval_to_lval ( Z_DVAL_P ( offset ) ) , & expr , sizeof ( zval * ) , NULL )"		53930	0					
ANR	54086	Callee	zend_hash_index_update		53930	0					
ANR	54087	Identifier	zend_hash_index_update		53930	0					
ANR	54088	ArgumentList	Z_ARRVAL_P ( result )		53930	1					
ANR	54089	Argument	Z_ARRVAL_P ( result )		53930	0					
ANR	54090	CallExpression	Z_ARRVAL_P ( result )		53930	0					
ANR	54091	Callee	Z_ARRVAL_P		53930	0					
ANR	54092	Identifier	Z_ARRVAL_P		53930	0					
ANR	54093	ArgumentList	result		53930	1					
ANR	54094	Argument	result		53930	0					
ANR	54095	Identifier	result		53930	0					
ANR	54096	Argument	zend_dval_to_lval ( Z_DVAL_P ( offset ) )		53930	1					
ANR	54097	CallExpression	zend_dval_to_lval ( Z_DVAL_P ( offset ) )		53930	0					
ANR	54098	Callee	zend_dval_to_lval		53930	0					
ANR	54099	Identifier	zend_dval_to_lval		53930	0					
ANR	54100	ArgumentList	Z_DVAL_P ( offset )		53930	1					
ANR	54101	Argument	Z_DVAL_P ( offset )		53930	0					
ANR	54102	CallExpression	Z_DVAL_P ( offset )		53930	0					
ANR	54103	Callee	Z_DVAL_P		53930	0					
ANR	54104	Identifier	Z_DVAL_P		53930	0					
ANR	54105	ArgumentList	offset		53930	1					
ANR	54106	Argument	offset		53930	0					
ANR	54107	Identifier	offset		53930	0					
ANR	54108	Argument	& expr		53930	2					
ANR	54109	UnaryOperationExpression	& expr		53930	0					
ANR	54110	UnaryOperator	&		53930	0					
ANR	54111	Identifier	expr		53930	1					
ANR	54112	Argument	sizeof ( zval * )		53930	3					
ANR	54113	SizeofExpression	sizeof ( zval * )		53930	0					
ANR	54114	Sizeof	sizeof		53930	0					
ANR	54115	SizeofOperand	zval *		53930	1					
ANR	54116	Argument	NULL		53930	4					
ANR	54117	Identifier	NULL		53930	0					
ANR	54118	BreakStatement	break ;	5952:4:214157:214162	53930	15	True				
ANR	54119	Label	case IS_ARRAY :	5953:3:214167:214180	53930	16	True				
ANR	54120	Identifier	IS_ARRAY		53930	0					
ANR	54121	ExpressionStatement	"zend_error ( E_ERROR , ""Illegal offset type"" )"	5954:4:214186:214228	53930	17	True				
ANR	54122	CallExpression	"zend_error ( E_ERROR , ""Illegal offset type"" )"		53930	0					
ANR	54123	Callee	zend_error		53930	0					
ANR	54124	Identifier	zend_error		53930	0					
ANR	54125	ArgumentList	E_ERROR		53930	1					
ANR	54126	Argument	E_ERROR		53930	0					
ANR	54127	Identifier	E_ERROR		53930	0					
ANR	54128	Argument	"""Illegal offset type"""		53930	1					
ANR	54129	PrimaryExpression	"""Illegal offset type"""		53930	0					
ANR	54130	BreakStatement	break ;	5955:4:214234:214239	53930	18	True				
ANR	54131	ElseStatement	else		53930	0					
ANR	54132	CompoundStatement		25:8:880:880	53930	0					
ANR	54133	IfStatement	"if ( zend_hash_next_index_insert ( Z_ARRVAL_P ( result ) , & expr , sizeof ( zval * ) , NULL ) == FAILURE )"		53930	0					
ANR	54134	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( result ) , & expr , sizeof ( zval * ) , NULL ) == FAILURE"	5958:6:214261:214347	53930	0	True				
ANR	54135	EqualityExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( result ) , & expr , sizeof ( zval * ) , NULL ) == FAILURE"		53930	0		==			
ANR	54136	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( result ) , & expr , sizeof ( zval * ) , NULL )"		53930	0					
ANR	54137	Callee	zend_hash_next_index_insert		53930	0					
ANR	54138	Identifier	zend_hash_next_index_insert		53930	0					
ANR	54139	ArgumentList	Z_ARRVAL_P ( result )		53930	1					
ANR	54140	Argument	Z_ARRVAL_P ( result )		53930	0					
ANR	54141	CallExpression	Z_ARRVAL_P ( result )		53930	0					
ANR	54142	Callee	Z_ARRVAL_P		53930	0					
ANR	54143	Identifier	Z_ARRVAL_P		53930	0					
ANR	54144	ArgumentList	result		53930	1					
ANR	54145	Argument	result		53930	0					
ANR	54146	Identifier	result		53930	0					
ANR	54147	Argument	& expr		53930	1					
ANR	54148	UnaryOperationExpression	& expr		53930	0					
ANR	54149	UnaryOperator	&		53930	0					
ANR	54150	Identifier	expr		53930	1					
ANR	54151	Argument	sizeof ( zval * )		53930	2					
ANR	54152	SizeofExpression	sizeof ( zval * )		53930	0					
ANR	54153	Sizeof	sizeof		53930	0					
ANR	54154	SizeofOperand	zval *		53930	1					
ANR	54155	Argument	NULL		53930	3					
ANR	54156	Identifier	NULL		53930	0					
ANR	54157	Identifier	FAILURE		53930	1					
ANR	54158	CompoundStatement		26:95:977:977	53930	1					
ANR	54159	ExpressionStatement	"zend_error ( E_WARNING , ""Cannot add element to the array as the next element is already occupied"" )"	5959:3:214355:214451	53930	0	True				
ANR	54160	CallExpression	"zend_error ( E_WARNING , ""Cannot add element to the array as the next element is already occupied"" )"		53930	0					
ANR	54161	Callee	zend_error		53930	0					
ANR	54162	Identifier	zend_error		53930	0					
ANR	54163	ArgumentList	E_WARNING		53930	1					
ANR	54164	Argument	E_WARNING		53930	0					
ANR	54165	Identifier	E_WARNING		53930	0					
ANR	54166	Argument	"""Cannot add element to the array as the next element is already occupied"""		53930	1					
ANR	54167	PrimaryExpression	"""Cannot add element to the array as the next element is already occupied"""		53930	0					
ANR	54168	ExpressionStatement	zval_ptr_dtor ( & expr )	5960:3:214456:214476	53930	1	True				
ANR	54169	CallExpression	zval_ptr_dtor ( & expr )		53930	0					
ANR	54170	Callee	zval_ptr_dtor		53930	0					
ANR	54171	Identifier	zval_ptr_dtor		53930	0					
ANR	54172	ArgumentList	& expr		53930	1					
ANR	54173	Argument	& expr		53930	0					
ANR	54174	UnaryOperationExpression	& expr		53930	0					
ANR	54175	UnaryOperator	&		53930	0					
ANR	54176	Identifier	expr		53930	1					
ANR	54177	ReturnType	void		53930	1					
ANR	54178	Identifier	zend_do_add_static_array_element		53930	2					
ANR	54179	ParameterList	"zval * result , zval * offset , zval * expr"		53930	3					
ANR	54180	Parameter	zval * result	5932:38:213322:213333	53930	0	True				
ANR	54181	ParameterType	zval *		53930	0					
ANR	54182	Identifier	result		53930	1					
ANR	54183	Parameter	zval * offset	5932:52:213336:213347	53930	1	True				
ANR	54184	ParameterType	zval *		53930	0					
ANR	54185	Identifier	offset		53930	1					
ANR	54186	Parameter	zval * expr	5932:66:213350:213359	53930	2	True				
ANR	54187	ParameterType	zval *		53930	0					
ANR	54188	Identifier	expr		53930	1					
ANR	54189	CFGEntryNode	ENTRY		53930		True				
ANR	54190	CFGExitNode	EXIT		53930		True				
ANR	54191	Symbol	zend_hash_next_index_insert		53930						
ANR	54192	Symbol	NULL		53930						
ANR	54193	Symbol	offset		53930						
ANR	54194	Symbol	& expr		53930						
ANR	54195	Symbol	E_STRICT		53930						
ANR	54196	Symbol	Z_TYPE_P		53930						
ANR	54197	Symbol	Z_STRVAL_P		53930						
ANR	54198	Symbol	FAILURE		53930						
ANR	54199	Symbol	Z_DVAL_P		53930						
ANR	54200	Symbol	Z_LVAL_P		53930						
ANR	54201	Symbol	result		53930						
ANR	54202	Symbol	zend_dval_to_lval		53930						
ANR	54203	Symbol	E_WARNING		53930						
ANR	54204	Symbol	E_ERROR		53930						
ANR	54205	Symbol	expr		53930						
ANR	54206	Symbol	Z_STRLEN_P		53930						
ANR	54207	Symbol	Z_ARRVAL_P		53930						
ANR	54208	DeclStmt									
ANR	54209	Decl							list_llist_element	list_llist_element	lle
ANR	54210	DeclStmt									
ANR	54211	Decl							int	int	current_dimension
ANR	54212	DeclStmt									
ANR	54213	Decl							zend_llist_element	zend_llist_element *	le
ANR	54214	DeclStmt									
ANR	54215	Decl							zend_llist_element	zend_llist_element *	dimension
ANR	54216	DeclStmt									
ANR	54217	Decl							zend_op	zend_op *	opline
ANR	54218	DeclStmt									
ANR	54219	Decl							znode	znode	last_container
ANR	54220	DeclStmt									
ANR	54221	Decl							zend_llist	zend_llist *	tmp_dimension_llist
ANR	54222	DeclStmt									
ANR	54223	Decl							zend_llist	zend_llist *	p
ANR	54224	DeclStmt									
ANR	54225	Decl							void	void * *	list
ANR	54226	DeclStmt									
ANR	54227	Decl							void	void * *	list
ANR	54228	DeclStmt									
ANR	54229	Decl							size_t	size_t	n
ANR	54230	Function	zend_do_fetch_static_variable	6099:0:218024:220022							
ANR	54231	FunctionDef	"zend_do_fetch_static_variable (znode * varname , const znode * static_assignment , int fetch_type TSRMLS_DC)"		54230	0					
ANR	54232	CompoundStatement		6100:0:218143:220022	54230	0					
ANR	54233	IdentifierDeclStatement	zval * tmp ;	6101:1:218146:218155	54230	0	True				
ANR	54234	IdentifierDecl	* tmp		54230	0					
ANR	54235	IdentifierDeclType	zval *		54230	0					
ANR	54236	Identifier	tmp		54230	1					
ANR	54237	IdentifierDeclStatement	zend_op * opline ;	6102:1:218158:218173	54230	1	True				
ANR	54238	IdentifierDecl	* opline		54230	0					
ANR	54239	IdentifierDeclType	zend_op *		54230	0					
ANR	54240	Identifier	opline		54230	1					
ANR	54241	IdentifierDeclStatement	znode lval ;	6103:1:218176:218186	54230	2	True				
ANR	54242	IdentifierDecl	lval		54230	0					
ANR	54243	IdentifierDeclType	znode		54230	0					
ANR	54244	Identifier	lval		54230	1					
ANR	54245	IdentifierDeclStatement	znode result ;	6104:1:218189:218201	54230	3	True				
ANR	54246	IdentifierDecl	result		54230	0					
ANR	54247	IdentifierDeclType	znode		54230	0					
ANR	54248	Identifier	result		54230	1					
ANR	54249	ExpressionStatement	ALLOC_ZVAL ( tmp )	6106:1:218205:218220	54230	4	True				
ANR	54250	CallExpression	ALLOC_ZVAL ( tmp )		54230	0					
ANR	54251	Callee	ALLOC_ZVAL		54230	0					
ANR	54252	Identifier	ALLOC_ZVAL		54230	0					
ANR	54253	ArgumentList	tmp		54230	1					
ANR	54254	Argument	tmp		54230	0					
ANR	54255	Identifier	tmp		54230	0					
ANR	54256	IfStatement	if ( static_assignment )		54230	5					
ANR	54257	Condition	static_assignment	6108:5:218228:218244	54230	0	True				
ANR	54258	Identifier	static_assignment		54230	0					
ANR	54259	CompoundStatement		9:24:103:103	54230	1					
ANR	54260	ExpressionStatement	* tmp = static_assignment -> u . constant	6109:2:218251:218287	54230	0	True				
ANR	54261	AssignmentExpression	* tmp = static_assignment -> u . constant		54230	0		=			
ANR	54262	UnaryOperationExpression	* tmp		54230	0					
ANR	54263	UnaryOperator	*		54230	0					
ANR	54264	Identifier	tmp		54230	1					
ANR	54265	MemberAccess	static_assignment -> u . constant		54230	1					
ANR	54266	PtrMemberAccess	static_assignment -> u		54230	0					
ANR	54267	Identifier	static_assignment		54230	0					
ANR	54268	Identifier	u		54230	1					
ANR	54269	Identifier	constant		54230	1					
ANR	54270	ElseStatement	else		54230	0					
ANR	54271	CompoundStatement		11:8:153:153	54230	0					
ANR	54272	ExpressionStatement	INIT_ZVAL ( * tmp )	6111:2:218301:218316	54230	0	True				
ANR	54273	CallExpression	INIT_ZVAL ( * tmp )		54230	0					
ANR	54274	Callee	INIT_ZVAL		54230	0					
ANR	54275	Identifier	INIT_ZVAL		54230	0					
ANR	54276	ArgumentList	* tmp		54230	1					
ANR	54277	Argument	* tmp		54230	0					
ANR	54278	UnaryOperationExpression	* tmp		54230	0					
ANR	54279	UnaryOperator	*		54230	0					
ANR	54280	Identifier	tmp		54230	1					
ANR	54281	IfStatement	if ( ! CG ( active_op_array ) -> static_variables )		54230	6					
ANR	54282	Condition	! CG ( active_op_array ) -> static_variables	6113:5:218326:218363	54230	0	True				
ANR	54283	UnaryOperationExpression	! CG ( active_op_array ) -> static_variables		54230	0					
ANR	54284	UnaryOperator	!		54230	0					
ANR	54285	PtrMemberAccess	CG ( active_op_array ) -> static_variables		54230	1					
ANR	54286	CallExpression	CG ( active_op_array )		54230	0					
ANR	54287	Callee	CG		54230	0					
ANR	54288	Identifier	CG		54230	0					
ANR	54289	ArgumentList	active_op_array		54230	1					
ANR	54290	Argument	active_op_array		54230	0					
ANR	54291	Identifier	active_op_array		54230	0					
ANR	54292	Identifier	static_variables		54230	1					
ANR	54293	CompoundStatement		14:45:222:222	54230	1					
ANR	54294	IfStatement	if ( CG ( active_op_array ) -> scope )		54230	0					
ANR	54295	Condition	CG ( active_op_array ) -> scope	6114:6:218374:218399	54230	0	True				
ANR	54296	PtrMemberAccess	CG ( active_op_array ) -> scope		54230	0					
ANR	54297	CallExpression	CG ( active_op_array )		54230	0					
ANR	54298	Callee	CG		54230	0					
ANR	54299	Identifier	CG		54230	0					
ANR	54300	ArgumentList	active_op_array		54230	1					
ANR	54301	Argument	active_op_array		54230	0					
ANR	54302	Identifier	active_op_array		54230	0					
ANR	54303	Identifier	scope		54230	1					
ANR	54304	CompoundStatement		15:34:258:258	54230	1					
ANR	54305	ExpressionStatement	CG ( active_op_array ) -> scope -> ce_flags |= ZEND_HAS_STATIC_IN_METHODS	6115:3:218407:218473	54230	0	True				
ANR	54306	AssignmentExpression	CG ( active_op_array ) -> scope -> ce_flags |= ZEND_HAS_STATIC_IN_METHODS		54230	0		|=			
ANR	54307	PtrMemberAccess	CG ( active_op_array ) -> scope -> ce_flags		54230	0					
ANR	54308	PtrMemberAccess	CG ( active_op_array ) -> scope		54230	0					
ANR	54309	CallExpression	CG ( active_op_array )		54230	0					
ANR	54310	Callee	CG		54230	0					
ANR	54311	Identifier	CG		54230	0					
ANR	54312	ArgumentList	active_op_array		54230	1					
ANR	54313	Argument	active_op_array		54230	0					
ANR	54314	Identifier	active_op_array		54230	0					
ANR	54315	Identifier	scope		54230	1					
ANR	54316	Identifier	ce_flags		54230	1					
ANR	54317	Identifier	ZEND_HAS_STATIC_IN_METHODS		54230	1					
ANR	54318	ExpressionStatement	ALLOC_HASHTABLE ( CG ( active_op_array ) -> static_variables )	6117:2:218481:218535	54230	1	True				
ANR	54319	CallExpression	ALLOC_HASHTABLE ( CG ( active_op_array ) -> static_variables )		54230	0					
ANR	54320	Callee	ALLOC_HASHTABLE		54230	0					
ANR	54321	Identifier	ALLOC_HASHTABLE		54230	0					
ANR	54322	ArgumentList	CG ( active_op_array ) -> static_variables		54230	1					
ANR	54323	Argument	CG ( active_op_array ) -> static_variables		54230	0					
ANR	54324	PtrMemberAccess	CG ( active_op_array ) -> static_variables		54230	0					
ANR	54325	CallExpression	CG ( active_op_array )		54230	0					
ANR	54326	Callee	CG		54230	0					
ANR	54327	Identifier	CG		54230	0					
ANR	54328	ArgumentList	active_op_array		54230	1					
ANR	54329	Argument	active_op_array		54230	0					
ANR	54330	Identifier	active_op_array		54230	0					
ANR	54331	Identifier	static_variables		54230	1					
ANR	54332	ExpressionStatement	"zend_hash_init ( CG ( active_op_array ) -> static_variables , 2 , NULL , ZVAL_PTR_DTOR , 0 )"	6118:2:218539:218619	54230	2	True				
ANR	54333	CallExpression	"zend_hash_init ( CG ( active_op_array ) -> static_variables , 2 , NULL , ZVAL_PTR_DTOR , 0 )"		54230	0					
ANR	54334	Callee	zend_hash_init		54230	0					
ANR	54335	Identifier	zend_hash_init		54230	0					
ANR	54336	ArgumentList	CG ( active_op_array ) -> static_variables		54230	1					
ANR	54337	Argument	CG ( active_op_array ) -> static_variables		54230	0					
ANR	54338	PtrMemberAccess	CG ( active_op_array ) -> static_variables		54230	0					
ANR	54339	CallExpression	CG ( active_op_array )		54230	0					
ANR	54340	Callee	CG		54230	0					
ANR	54341	Identifier	CG		54230	0					
ANR	54342	ArgumentList	active_op_array		54230	1					
ANR	54343	Argument	active_op_array		54230	0					
ANR	54344	Identifier	active_op_array		54230	0					
ANR	54345	Identifier	static_variables		54230	1					
ANR	54346	Argument	2		54230	1					
ANR	54347	PrimaryExpression	2		54230	0					
ANR	54348	Argument	NULL		54230	2					
ANR	54349	Identifier	NULL		54230	0					
ANR	54350	Argument	ZVAL_PTR_DTOR		54230	3					
ANR	54351	Identifier	ZVAL_PTR_DTOR		54230	0					
ANR	54352	Argument	0		54230	4					
ANR	54353	PrimaryExpression	0		54230	0					
ANR	54354	ExpressionStatement	"zend_hash_update ( CG ( active_op_array ) -> static_variables , Z_STRVAL ( varname -> u . constant ) , Z_STRLEN ( varname -> u . constant ) + 1 , & tmp , sizeof ( zval * ) , NULL )"	6120:1:218625:218772	54230	7	True				
ANR	54355	CallExpression	"zend_hash_update ( CG ( active_op_array ) -> static_variables , Z_STRVAL ( varname -> u . constant ) , Z_STRLEN ( varname -> u . constant ) + 1 , & tmp , sizeof ( zval * ) , NULL )"		54230	0					
ANR	54356	Callee	zend_hash_update		54230	0					
ANR	54357	Identifier	zend_hash_update		54230	0					
ANR	54358	ArgumentList	CG ( active_op_array ) -> static_variables		54230	1					
ANR	54359	Argument	CG ( active_op_array ) -> static_variables		54230	0					
ANR	54360	PtrMemberAccess	CG ( active_op_array ) -> static_variables		54230	0					
ANR	54361	CallExpression	CG ( active_op_array )		54230	0					
ANR	54362	Callee	CG		54230	0					
ANR	54363	Identifier	CG		54230	0					
ANR	54364	ArgumentList	active_op_array		54230	1					
ANR	54365	Argument	active_op_array		54230	0					
ANR	54366	Identifier	active_op_array		54230	0					
ANR	54367	Identifier	static_variables		54230	1					
ANR	54368	Argument	Z_STRVAL ( varname -> u . constant )		54230	1					
ANR	54369	CallExpression	Z_STRVAL ( varname -> u . constant )		54230	0					
ANR	54370	Callee	Z_STRVAL		54230	0					
ANR	54371	Identifier	Z_STRVAL		54230	0					
ANR	54372	ArgumentList	varname -> u . constant		54230	1					
ANR	54373	Argument	varname -> u . constant		54230	0					
ANR	54374	MemberAccess	varname -> u . constant		54230	0					
ANR	54375	PtrMemberAccess	varname -> u		54230	0					
ANR	54376	Identifier	varname		54230	0					
ANR	54377	Identifier	u		54230	1					
ANR	54378	Identifier	constant		54230	1					
ANR	54379	Argument	Z_STRLEN ( varname -> u . constant ) + 1		54230	2					
ANR	54380	AdditiveExpression	Z_STRLEN ( varname -> u . constant ) + 1		54230	0		+			
ANR	54381	CallExpression	Z_STRLEN ( varname -> u . constant )		54230	0					
ANR	54382	Callee	Z_STRLEN		54230	0					
ANR	54383	Identifier	Z_STRLEN		54230	0					
ANR	54384	ArgumentList	varname -> u . constant		54230	1					
ANR	54385	Argument	varname -> u . constant		54230	0					
ANR	54386	MemberAccess	varname -> u . constant		54230	0					
ANR	54387	PtrMemberAccess	varname -> u		54230	0					
ANR	54388	Identifier	varname		54230	0					
ANR	54389	Identifier	u		54230	1					
ANR	54390	Identifier	constant		54230	1					
ANR	54391	PrimaryExpression	1		54230	1					
ANR	54392	Argument	& tmp		54230	3					
ANR	54393	UnaryOperationExpression	& tmp		54230	0					
ANR	54394	UnaryOperator	&		54230	0					
ANR	54395	Identifier	tmp		54230	1					
ANR	54396	Argument	sizeof ( zval * )		54230	4					
ANR	54397	SizeofExpression	sizeof ( zval * )		54230	0					
ANR	54398	Sizeof	sizeof		54230	0					
ANR	54399	SizeofOperand	zval *		54230	1					
ANR	54400	Argument	NULL		54230	5					
ANR	54401	Identifier	NULL		54230	0					
ANR	54402	IfStatement	if ( varname -> op_type == IS_CONST )		54230	8					
ANR	54403	Condition	varname -> op_type == IS_CONST	6122:5:218780:218807	54230	0	True				
ANR	54404	EqualityExpression	varname -> op_type == IS_CONST		54230	0		==			
ANR	54405	PtrMemberAccess	varname -> op_type		54230	0					
ANR	54406	Identifier	varname		54230	0					
ANR	54407	Identifier	op_type		54230	1					
ANR	54408	Identifier	IS_CONST		54230	1					
ANR	54409	CompoundStatement		23:35:666:666	54230	1					
ANR	54410	IfStatement	if ( Z_TYPE ( varname -> u . constant ) != IS_STRING )		54230	0					
ANR	54411	Condition	Z_TYPE ( varname -> u . constant ) != IS_STRING	6123:6:218818:218857	54230	0	True				
ANR	54412	EqualityExpression	Z_TYPE ( varname -> u . constant ) != IS_STRING		54230	0		!=			
ANR	54413	CallExpression	Z_TYPE ( varname -> u . constant )		54230	0					
ANR	54414	Callee	Z_TYPE		54230	0					
ANR	54415	Identifier	Z_TYPE		54230	0					
ANR	54416	ArgumentList	varname -> u . constant		54230	1					
ANR	54417	Argument	varname -> u . constant		54230	0					
ANR	54418	MemberAccess	varname -> u . constant		54230	0					
ANR	54419	PtrMemberAccess	varname -> u		54230	0					
ANR	54420	Identifier	varname		54230	0					
ANR	54421	Identifier	u		54230	1					
ANR	54422	Identifier	constant		54230	1					
ANR	54423	Identifier	IS_STRING		54230	1					
ANR	54424	CompoundStatement		24:48:716:716	54230	1					
ANR	54425	ExpressionStatement	convert_to_string ( & varname -> u . constant )	6124:3:218865:218904	54230	0	True				
ANR	54426	CallExpression	convert_to_string ( & varname -> u . constant )		54230	0					
ANR	54427	Callee	convert_to_string		54230	0					
ANR	54428	Identifier	convert_to_string		54230	0					
ANR	54429	ArgumentList	& varname -> u . constant		54230	1					
ANR	54430	Argument	& varname -> u . constant		54230	0					
ANR	54431	UnaryOperationExpression	& varname -> u . constant		54230	0					
ANR	54432	UnaryOperator	&		54230	0					
ANR	54433	MemberAccess	varname -> u . constant		54230	1					
ANR	54434	PtrMemberAccess	varname -> u		54230	0					
ANR	54435	Identifier	varname		54230	0					
ANR	54436	Identifier	u		54230	1					
ANR	54437	Identifier	constant		54230	1					
ANR	54438	Statement	opline	6128:1:218915:218920	54230	9	True				
ANR	54439	Statement	=	6128:8:218922:218922	54230	10	True				
ANR	54440	Statement	get_next_op	6128:10:218924:218934	54230	11	True				
ANR	54441	Statement	(	6128:21:218935:218935	54230	12	True				
ANR	54442	Statement	CG	6128:22:218936:218937	54230	13	True				
ANR	54443	Statement	(	6128:24:218938:218938	54230	14	True				
ANR	54444	Statement	active_op_array	6128:25:218939:218953	54230	15	True				
ANR	54445	Statement	)	6128:40:218954:218954	54230	16	True				
ANR	54446	Statement	TSRMLS_CC	6128:42:218956:218964	54230	17	True				
ANR	54447	Statement	)	6128:51:218965:218965	54230	18	True				
ANR	54448	ExpressionStatement		6128:52:218966:218966	54230	19	True				
ANR	54449	ExpressionStatement	opline -> opcode = ( fetch_type == ZEND_FETCH_LEXICAL ) ? ZEND_FETCH_R : ZEND_FETCH_W	6129:1:218969:219050	54230	20	True				
ANR	54450	AssignmentExpression	opline -> opcode = ( fetch_type == ZEND_FETCH_LEXICAL ) ? ZEND_FETCH_R : ZEND_FETCH_W		54230	0		=			
ANR	54451	PtrMemberAccess	opline -> opcode		54230	0					
ANR	54452	Identifier	opline		54230	0					
ANR	54453	Identifier	opcode		54230	1					
ANR	54454	ConditionalExpression	( fetch_type == ZEND_FETCH_LEXICAL ) ? ZEND_FETCH_R : ZEND_FETCH_W		54230	1					
ANR	54455	Condition	fetch_type == ZEND_FETCH_LEXICAL		54230	0					
ANR	54456	EqualityExpression	fetch_type == ZEND_FETCH_LEXICAL		54230	0		==			
ANR	54457	Identifier	fetch_type		54230	0					
ANR	54458	Identifier	ZEND_FETCH_LEXICAL		54230	1					
ANR	54459	Identifier	ZEND_FETCH_R		54230	1					
ANR	54460	Identifier	ZEND_FETCH_W		54230	2					
ANR	54461	ExpressionStatement	opline -> result_type = IS_VAR	6130:1:219159:219187	54230	21	True				
ANR	54462	AssignmentExpression	opline -> result_type = IS_VAR		54230	0		=			
ANR	54463	PtrMemberAccess	opline -> result_type		54230	0					
ANR	54464	Identifier	opline		54230	0					
ANR	54465	Identifier	result_type		54230	1					
ANR	54466	Identifier	IS_VAR		54230	1					
ANR	54467	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6131:1:219190:219254	54230	22	True				
ANR	54468	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		54230	0		=			
ANR	54469	MemberAccess	opline -> result . var		54230	0					
ANR	54470	PtrMemberAccess	opline -> result		54230	0					
ANR	54471	Identifier	opline		54230	0					
ANR	54472	Identifier	result		54230	1					
ANR	54473	Identifier	var		54230	1					
ANR	54474	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		54230	1					
ANR	54475	Callee	get_temporary_variable		54230	0					
ANR	54476	Identifier	get_temporary_variable		54230	0					
ANR	54477	ArgumentList	CG ( active_op_array )		54230	1					
ANR	54478	Argument	CG ( active_op_array )		54230	0					
ANR	54479	CallExpression	CG ( active_op_array )		54230	0					
ANR	54480	Callee	CG		54230	0					
ANR	54481	Identifier	CG		54230	0					
ANR	54482	ArgumentList	active_op_array		54230	1					
ANR	54483	Argument	active_op_array		54230	0					
ANR	54484	Identifier	active_op_array		54230	0					
ANR	54485	ExpressionStatement	"SET_NODE ( opline -> op1 , varname )"	6132:1:219257:219287	54230	23	True				
ANR	54486	CallExpression	"SET_NODE ( opline -> op1 , varname )"		54230	0					
ANR	54487	Callee	SET_NODE		54230	0					
ANR	54488	Identifier	SET_NODE		54230	0					
ANR	54489	ArgumentList	opline -> op1		54230	1					
ANR	54490	Argument	opline -> op1		54230	0					
ANR	54491	PtrMemberAccess	opline -> op1		54230	0					
ANR	54492	Identifier	opline		54230	0					
ANR	54493	Identifier	op1		54230	1					
ANR	54494	Argument	varname		54230	1					
ANR	54495	Identifier	varname		54230	0					
ANR	54496	IfStatement	if ( opline -> op1_type == IS_CONST )		54230	24					
ANR	54497	Condition	opline -> op1_type == IS_CONST	6133:5:219294:219321	54230	0	True				
ANR	54498	EqualityExpression	opline -> op1_type == IS_CONST		54230	0		==			
ANR	54499	PtrMemberAccess	opline -> op1_type		54230	0					
ANR	54500	Identifier	opline		54230	0					
ANR	54501	Identifier	op1_type		54230	1					
ANR	54502	Identifier	IS_CONST		54230	1					
ANR	54503	CompoundStatement		34:35:1180:1180	54230	1					
ANR	54504	ExpressionStatement	CALCULATE_LITERAL_HASH ( opline -> op1 . constant )	6134:2:219328:219372	54230	0	True				
ANR	54505	CallExpression	CALCULATE_LITERAL_HASH ( opline -> op1 . constant )		54230	0					
ANR	54506	Callee	CALCULATE_LITERAL_HASH		54230	0					
ANR	54507	Identifier	CALCULATE_LITERAL_HASH		54230	0					
ANR	54508	ArgumentList	opline -> op1 . constant		54230	1					
ANR	54509	Argument	opline -> op1 . constant		54230	0					
ANR	54510	MemberAccess	opline -> op1 . constant		54230	0					
ANR	54511	PtrMemberAccess	opline -> op1		54230	0					
ANR	54512	Identifier	opline		54230	0					
ANR	54513	Identifier	op1		54230	1					
ANR	54514	Identifier	constant		54230	1					
ANR	54515	ExpressionStatement	SET_UNUSED ( opline -> op2 )	6136:1:219378:219401	54230	25	True				
ANR	54516	CallExpression	SET_UNUSED ( opline -> op2 )		54230	0					
ANR	54517	Callee	SET_UNUSED		54230	0					
ANR	54518	Identifier	SET_UNUSED		54230	0					
ANR	54519	ArgumentList	opline -> op2		54230	1					
ANR	54520	Argument	opline -> op2		54230	0					
ANR	54521	PtrMemberAccess	opline -> op2		54230	0					
ANR	54522	Identifier	opline		54230	0					
ANR	54523	Identifier	op2		54230	1					
ANR	54524	ExpressionStatement	opline -> extended_value = ZEND_FETCH_STATIC	6137:1:219404:219446	54230	26	True				
ANR	54525	AssignmentExpression	opline -> extended_value = ZEND_FETCH_STATIC		54230	0		=			
ANR	54526	PtrMemberAccess	opline -> extended_value		54230	0					
ANR	54527	Identifier	opline		54230	0					
ANR	54528	Identifier	extended_value		54230	1					
ANR	54529	Identifier	ZEND_FETCH_STATIC		54230	1					
ANR	54530	ExpressionStatement	"GET_NODE ( & result , opline -> result )"	6138:1:219449:219482	54230	27	True				
ANR	54531	CallExpression	"GET_NODE ( & result , opline -> result )"		54230	0					
ANR	54532	Callee	GET_NODE		54230	0					
ANR	54533	Identifier	GET_NODE		54230	0					
ANR	54534	ArgumentList	& result		54230	1					
ANR	54535	Argument	& result		54230	0					
ANR	54536	UnaryOperationExpression	& result		54230	0					
ANR	54537	UnaryOperator	&		54230	0					
ANR	54538	Identifier	result		54230	1					
ANR	54539	Argument	opline -> result		54230	1					
ANR	54540	PtrMemberAccess	opline -> result		54230	0					
ANR	54541	Identifier	opline		54230	0					
ANR	54542	Identifier	result		54230	1					
ANR	54543	IfStatement	if ( varname -> op_type == IS_CONST )		54230	28					
ANR	54544	Condition	varname -> op_type == IS_CONST	6140:5:219490:219517	54230	0	True				
ANR	54545	EqualityExpression	varname -> op_type == IS_CONST		54230	0		==			
ANR	54546	PtrMemberAccess	varname -> op_type		54230	0					
ANR	54547	Identifier	varname		54230	0					
ANR	54548	Identifier	op_type		54230	1					
ANR	54549	Identifier	IS_CONST		54230	1					
ANR	54550	CompoundStatement		41:35:1376:1376	54230	1					
ANR	54551	ExpressionStatement	zval_copy_ctor ( & varname -> u . constant )	6141:2:219524:219560	54230	0	True				
ANR	54552	CallExpression	zval_copy_ctor ( & varname -> u . constant )		54230	0					
ANR	54553	Callee	zval_copy_ctor		54230	0					
ANR	54554	Identifier	zval_copy_ctor		54230	0					
ANR	54555	ArgumentList	& varname -> u . constant		54230	1					
ANR	54556	Argument	& varname -> u . constant		54230	0					
ANR	54557	UnaryOperationExpression	& varname -> u . constant		54230	0					
ANR	54558	UnaryOperator	&		54230	0					
ANR	54559	MemberAccess	varname -> u . constant		54230	1					
ANR	54560	PtrMemberAccess	varname -> u		54230	0					
ANR	54561	Identifier	varname		54230	0					
ANR	54562	Identifier	u		54230	1					
ANR	54563	Identifier	constant		54230	1					
ANR	54564	Statement	fetch_simple_variable	6143:1:219566:219586	54230	29	True				
ANR	54565	Statement	(	6143:22:219587:219587	54230	30	True				
ANR	54566	Statement	&	6143:23:219588:219588	54230	31	True				
ANR	54567	Statement	lval	6143:24:219589:219592	54230	32	True				
ANR	54568	Statement	","	6143:28:219593:219593	54230	33	True				
ANR	54569	Statement	varname	6143:30:219595:219601	54230	34	True				
ANR	54570	Statement	","	6143:37:219602:219602	54230	35	True				
ANR	54571	Statement	0	6143:39:219604:219604	54230	36	True				
ANR	54572	Statement	TSRMLS_CC	6143:41:219606:219614	54230	37	True				
ANR	54573	Statement	)	6143:50:219615:219615	54230	38	True				
ANR	54574	ExpressionStatement		6143:51:219616:219616	54230	39	True				
ANR	54575	IfStatement	if ( fetch_type == ZEND_FETCH_LEXICAL )		54230	40					
ANR	54576	Condition	fetch_type == ZEND_FETCH_LEXICAL	6145:5:219684:219715	54230	0	True				
ANR	54577	EqualityExpression	fetch_type == ZEND_FETCH_LEXICAL		54230	0		==			
ANR	54578	Identifier	fetch_type		54230	0					
ANR	54579	Identifier	ZEND_FETCH_LEXICAL		54230	1					
ANR	54580	CompoundStatement		47:2:1578:1589	54230	1					
ANR	54581	IdentifierDeclStatement	znode dummy ;	6146:2:219722:219733	54230	0	True				
ANR	54582	IdentifierDecl	dummy		54230	0					
ANR	54583	IdentifierDeclType	znode		54230	0					
ANR	54584	Identifier	dummy		54230	1					
ANR	54585	ExpressionStatement	zend_do_begin_variable_parse ( TSRMLS_C )	6148:2:219738:219776	54230	1	True				
ANR	54586	CallExpression	zend_do_begin_variable_parse ( TSRMLS_C )		54230	0					
ANR	54587	Callee	zend_do_begin_variable_parse		54230	0					
ANR	54588	Identifier	zend_do_begin_variable_parse		54230	0					
ANR	54589	ArgumentList	TSRMLS_C		54230	1					
ANR	54590	Argument	TSRMLS_C		54230	0					
ANR	54591	Identifier	TSRMLS_C		54230	0					
ANR	54592	Statement	zend_do_assign	6149:2:219780:219793	54230	2	True				
ANR	54593	Statement	(	6149:16:219794:219794	54230	3	True				
ANR	54594	Statement	&	6149:17:219795:219795	54230	4	True				
ANR	54595	Statement	dummy	6149:18:219796:219800	54230	5	True				
ANR	54596	Statement	","	6149:23:219801:219801	54230	6	True				
ANR	54597	Statement	&	6149:25:219803:219803	54230	7	True				
ANR	54598	Statement	lval	6149:26:219804:219807	54230	8	True				
ANR	54599	Statement	","	6149:30:219808:219808	54230	9	True				
ANR	54600	Statement	&	6149:32:219810:219810	54230	10	True				
ANR	54601	Statement	result	6149:33:219811:219816	54230	11	True				
ANR	54602	Statement	TSRMLS_CC	6149:40:219818:219826	54230	12	True				
ANR	54603	Statement	)	6149:49:219827:219827	54230	13	True				
ANR	54604	ExpressionStatement		6149:50:219828:219828	54230	14	True				
ANR	54605	Statement	zend_do_free	6150:2:219832:219843	54230	15	True				
ANR	54606	Statement	(	6150:14:219844:219844	54230	16	True				
ANR	54607	Statement	&	6150:15:219845:219845	54230	17	True				
ANR	54608	Statement	dummy	6150:16:219846:219850	54230	18	True				
ANR	54609	Statement	TSRMLS_CC	6150:22:219852:219860	54230	19	True				
ANR	54610	Statement	)	6150:31:219861:219861	54230	20	True				
ANR	54611	ExpressionStatement		6150:32:219862:219862	54230	21	True				
ANR	54612	ElseStatement	else		54230	0					
ANR	54613	CompoundStatement		52:8:1728:1728	54230	0					
ANR	54614	Statement	zend_do_assign_ref	6152:2:219876:219893	54230	0	True				
ANR	54615	Statement	(	6152:20:219894:219894	54230	1	True				
ANR	54616	Statement	NULL	6152:21:219895:219898	54230	2	True				
ANR	54617	Statement	","	6152:25:219899:219899	54230	3	True				
ANR	54618	Statement	&	6152:27:219901:219901	54230	4	True				
ANR	54619	Statement	lval	6152:28:219902:219905	54230	5	True				
ANR	54620	Statement	","	6152:32:219906:219906	54230	6	True				
ANR	54621	Statement	&	6152:34:219908:219908	54230	7	True				
ANR	54622	Statement	result	6152:35:219909:219914	54230	8	True				
ANR	54623	Statement	TSRMLS_CC	6152:42:219916:219924	54230	9	True				
ANR	54624	Statement	)	6152:51:219925:219925	54230	10	True				
ANR	54625	ExpressionStatement		6152:52:219926:219926	54230	11	True				
ANR	54626	ExpressionStatement	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . result_type |= EXT_TYPE_UNUSED	6154:1:219932:220020	54230	41	True				
ANR	54627	AssignmentExpression	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . result_type |= EXT_TYPE_UNUSED		54230	0		|=			
ANR	54628	MemberAccess	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . result_type		54230	0					
ANR	54629	ArrayIndexing	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		54230	0					
ANR	54630	PtrMemberAccess	CG ( active_op_array ) -> opcodes		54230	0					
ANR	54631	CallExpression	CG ( active_op_array )		54230	0					
ANR	54632	Callee	CG		54230	0					
ANR	54633	Identifier	CG		54230	0					
ANR	54634	ArgumentList	active_op_array		54230	1					
ANR	54635	Argument	active_op_array		54230	0					
ANR	54636	Identifier	active_op_array		54230	0					
ANR	54637	Identifier	opcodes		54230	1					
ANR	54638	AdditiveExpression	CG ( active_op_array ) -> last - 1		54230	1		-			
ANR	54639	PtrMemberAccess	CG ( active_op_array ) -> last		54230	0					
ANR	54640	CallExpression	CG ( active_op_array )		54230	0					
ANR	54641	Callee	CG		54230	0					
ANR	54642	Identifier	CG		54230	0					
ANR	54643	ArgumentList	active_op_array		54230	1					
ANR	54644	Argument	active_op_array		54230	0					
ANR	54645	Identifier	active_op_array		54230	0					
ANR	54646	Identifier	last		54230	1					
ANR	54647	PrimaryExpression	1		54230	1					
ANR	54648	Identifier	result_type		54230	1					
ANR	54649	Identifier	EXT_TYPE_UNUSED		54230	1					
ANR	54650	ReturnType	void		54230	1					
ANR	54651	Identifier	zend_do_fetch_static_variable		54230	2					
ANR	54652	ParameterList	"znode * varname , const znode * static_assignment , int fetch_type TSRMLS_DC"		54230	3					
ANR	54653	Parameter	znode * varname	6099:35:218059:218072	54230	0	True				
ANR	54654	ParameterType	znode *		54230	0					
ANR	54655	Identifier	varname		54230	1					
ANR	54656	Parameter	const znode * static_assignment	6099:51:218075:218104	54230	1	True				
ANR	54657	ParameterType	const znode *		54230	0					
ANR	54658	Identifier	static_assignment		54230	1					
ANR	54659	Parameter	int fetch_type TSRMLS_DC	6099:83:218107:218130	54230	2	True				
ANR	54660	ParameterType	int fetch_type		54230	0					
ANR	54661	Identifier	TSRMLS_DC		54230	1					
ANR	54662	CFGEntryNode	ENTRY		54230		True				
ANR	54663	CFGExitNode	EXIT		54230		True				
ANR	54664	Symbol	lval		54230						
ANR	54665	Symbol	* CG		54230						
ANR	54666	Symbol	Z_TYPE		54230						
ANR	54667	Symbol	get_temporary_variable		54230						
ANR	54668	Symbol	TSRMLS_DC		54230						
ANR	54669	Symbol	CG ( active_op_array ) -> opcodes		54230						
ANR	54670	Symbol	opline -> result		54230						
ANR	54671	Symbol	opline -> extended_value		54230						
ANR	54672	Symbol	dummy		54230						
ANR	54673	Symbol	CG ( active_op_array ) -> last		54230						
ANR	54674	Symbol	* CG ( active_op_array ) -> scope		54230						
ANR	54675	Symbol	opline		54230						
ANR	54676	Symbol	tmp		54230						
ANR	54677	Symbol	CG ( active_op_array ) -> static_variables		54230						
ANR	54678	Symbol	IS_STRING		54230						
ANR	54679	Symbol	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . result_type		54230						
ANR	54680	Symbol	* CG ( active_op_array ) -> opcodes		54230						
ANR	54681	Symbol	IS_CONST		54230						
ANR	54682	Symbol	fetch_type		54230						
ANR	54683	Symbol	NULL		54230						
ANR	54684	Symbol	* CG ( active_op_array ) -> last		54230						
ANR	54685	Symbol	ZEND_HAS_STATIC_IN_METHODS		54230						
ANR	54686	Symbol	varname		54230						
ANR	54687	Symbol	opline -> op1_type		54230						
ANR	54688	Symbol	ZVAL_PTR_DTOR		54230						
ANR	54689	Symbol	static_assignment		54230						
ANR	54690	Symbol	static_assignment -> u		54230						
ANR	54691	Symbol	& tmp		54230						
ANR	54692	Symbol	IS_VAR		54230						
ANR	54693	Symbol	opline -> op1		54230						
ANR	54694	Symbol	* tmp		54230						
ANR	54695	Symbol	opline -> op2		54230						
ANR	54696	Symbol	* varname		54230						
ANR	54697	Symbol	varname -> u		54230						
ANR	54698	Symbol	Z_STRLEN		54230						
ANR	54699	Symbol	varname -> op_type		54230						
ANR	54700	Symbol	result		54230						
ANR	54701	Symbol	CG ( active_op_array ) -> scope -> ce_flags		54230						
ANR	54702	Symbol	* * CG		54230						
ANR	54703	Symbol	& varname -> u		54230						
ANR	54704	Symbol	TSRMLS_C		54230						
ANR	54705	Symbol	opline -> op1 . constant		54230						
ANR	54706	Symbol	CG ( active_op_array ) -> scope		54230						
ANR	54707	Symbol	& result		54230						
ANR	54708	Symbol	Z_STRVAL		54230						
ANR	54709	Symbol	& varname -> u . constant		54230						
ANR	54710	Symbol	ZEND_FETCH_STATIC		54230						
ANR	54711	Symbol	EXT_TYPE_UNUSED		54230						
ANR	54712	Symbol	opline -> result_type		54230						
ANR	54713	Symbol	CG		54230						
ANR	54714	Symbol	active_op_array		54230						
ANR	54715	Symbol	ZEND_FETCH_R		54230						
ANR	54716	Symbol	static_assignment -> u . constant		54230						
ANR	54717	Symbol	ZEND_FETCH_LEXICAL		54230						
ANR	54718	Symbol	ZEND_FETCH_W		54230						
ANR	54719	Symbol	* opline		54230						
ANR	54720	Symbol	varname -> u . constant		54230						
ANR	54721	Symbol	opline -> opcode		54230						
ANR	54722	Symbol	* static_assignment		54230						
ANR	54723	Symbol	opline -> result . var		54230						
ANR	54724	Function	zend_do_fetch_lexical_variable	6158:0:220035:220691							
ANR	54725	FunctionDef	"zend_do_fetch_lexical_variable (znode * varname , zend_bool is_ref TSRMLS_DC)"		54724	0					
ANR	54726	CompoundStatement		6159:0:220125:220691	54724	0					
ANR	54727	IdentifierDeclStatement	znode value ;	6160:1:220128:220139	54724	0	True				
ANR	54728	IdentifierDecl	value		54724	0					
ANR	54729	IdentifierDeclType	znode		54724	0					
ANR	54730	Identifier	value		54724	1					
ANR	54731	IfStatement	"if ( Z_STRLEN ( varname -> u . constant ) == sizeof ( ""this"" ) - 1 && memcmp ( Z_STRVAL ( varname -> u . constant ) , ""this"" , sizeof ( ""this"" ) - 1 ) == 0 )"		54724	1					
ANR	54732	Condition	"Z_STRLEN ( varname -> u . constant ) == sizeof ( ""this"" ) - 1 && memcmp ( Z_STRVAL ( varname -> u . constant ) , ""this"" , sizeof ( ""this"" ) - 1 ) == 0"	6162:5:220147:220276	54724	0	True				
ANR	54733	AndExpression	"Z_STRLEN ( varname -> u . constant ) == sizeof ( ""this"" ) - 1 && memcmp ( Z_STRVAL ( varname -> u . constant ) , ""this"" , sizeof ( ""this"" ) - 1 ) == 0"		54724	0		&&			
ANR	54734	EqualityExpression	"Z_STRLEN ( varname -> u . constant ) == sizeof ( ""this"" ) - 1"		54724	0		==			
ANR	54735	CallExpression	Z_STRLEN ( varname -> u . constant )		54724	0					
ANR	54736	Callee	Z_STRLEN		54724	0					
ANR	54737	Identifier	Z_STRLEN		54724	0					
ANR	54738	ArgumentList	varname -> u . constant		54724	1					
ANR	54739	Argument	varname -> u . constant		54724	0					
ANR	54740	MemberAccess	varname -> u . constant		54724	0					
ANR	54741	PtrMemberAccess	varname -> u		54724	0					
ANR	54742	Identifier	varname		54724	0					
ANR	54743	Identifier	u		54724	1					
ANR	54744	Identifier	constant		54724	1					
ANR	54745	AdditiveExpression	"sizeof ( ""this"" ) - 1"		54724	1		-			
ANR	54746	SizeofExpression	"sizeof ( ""this"" )"		54724	0					
ANR	54747	Sizeof	sizeof		54724	0					
ANR	54748	PrimaryExpression	"""this"""		54724	1					
ANR	54749	PrimaryExpression	1		54724	1					
ANR	54750	EqualityExpression	"memcmp ( Z_STRVAL ( varname -> u . constant ) , ""this"" , sizeof ( ""this"" ) - 1 ) == 0"		54724	1		==			
ANR	54751	CallExpression	"memcmp ( Z_STRVAL ( varname -> u . constant ) , ""this"" , sizeof ( ""this"" ) - 1 )"		54724	0					
ANR	54752	Callee	memcmp		54724	0					
ANR	54753	Identifier	memcmp		54724	0					
ANR	54754	ArgumentList	Z_STRVAL ( varname -> u . constant )		54724	1					
ANR	54755	Argument	Z_STRVAL ( varname -> u . constant )		54724	0					
ANR	54756	CallExpression	Z_STRVAL ( varname -> u . constant )		54724	0					
ANR	54757	Callee	Z_STRVAL		54724	0					
ANR	54758	Identifier	Z_STRVAL		54724	0					
ANR	54759	ArgumentList	varname -> u . constant		54724	1					
ANR	54760	Argument	varname -> u . constant		54724	0					
ANR	54761	MemberAccess	varname -> u . constant		54724	0					
ANR	54762	PtrMemberAccess	varname -> u		54724	0					
ANR	54763	Identifier	varname		54724	0					
ANR	54764	Identifier	u		54724	1					
ANR	54765	Identifier	constant		54724	1					
ANR	54766	Argument	"""this"""		54724	1					
ANR	54767	PrimaryExpression	"""this"""		54724	0					
ANR	54768	Argument	"sizeof ( ""this"" ) - 1"		54724	2					
ANR	54769	AdditiveExpression	"sizeof ( ""this"" ) - 1"		54724	0		-			
ANR	54770	SizeofExpression	"sizeof ( ""this"" )"		54724	0					
ANR	54771	Sizeof	sizeof		54724	0					
ANR	54772	PrimaryExpression	"""this"""		54724	1					
ANR	54773	PrimaryExpression	1		54724	1					
ANR	54774	PrimaryExpression	0		54724	1					
ANR	54775	CompoundStatement		5:77:153:153	54724	1					
ANR	54776	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use $this as lexical variable"" )"	6164:2:220283:220359	54724	0	True				
ANR	54777	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use $this as lexical variable"" )"		54724	0					
ANR	54778	Callee	zend_error_noreturn		54724	0					
ANR	54779	Identifier	zend_error_noreturn		54724	0					
ANR	54780	ArgumentList	E_COMPILE_ERROR		54724	1					
ANR	54781	Argument	E_COMPILE_ERROR		54724	0					
ANR	54782	Identifier	E_COMPILE_ERROR		54724	0					
ANR	54783	Argument	"""Cannot use $this as lexical variable"""		54724	1					
ANR	54784	PrimaryExpression	"""Cannot use $this as lexical variable"""		54724	0					
ANR	54785	ReturnStatement	return ;	6165:2:220363:220369	54724	1	True				
ANR	54786	ExpressionStatement	value . op_type = IS_CONST	6168:1:220376:220400	54724	2	True				
ANR	54787	AssignmentExpression	value . op_type = IS_CONST		54724	0		=			
ANR	54788	MemberAccess	value . op_type		54724	0					
ANR	54789	Identifier	value		54724	0					
ANR	54790	Identifier	op_type		54724	1					
ANR	54791	Identifier	IS_CONST		54724	1					
ANR	54792	ExpressionStatement	ZVAL_NULL ( & value . u . constant )	6169:1:220403:220431	54724	3	True				
ANR	54793	CallExpression	ZVAL_NULL ( & value . u . constant )		54724	0					
ANR	54794	Callee	ZVAL_NULL		54724	0					
ANR	54795	Identifier	ZVAL_NULL		54724	0					
ANR	54796	ArgumentList	& value . u . constant		54724	1					
ANR	54797	Argument	& value . u . constant		54724	0					
ANR	54798	UnaryOperationExpression	& value . u . constant		54724	0					
ANR	54799	UnaryOperator	&		54724	0					
ANR	54800	MemberAccess	value . u . constant		54724	1					
ANR	54801	MemberAccess	value . u		54724	0					
ANR	54802	Identifier	value		54724	0					
ANR	54803	Identifier	u		54724	1					
ANR	54804	Identifier	constant		54724	1					
ANR	54805	ExpressionStatement	Z_TYPE ( value . u . constant ) |= is_ref ? IS_LEXICAL_REF : IS_LEXICAL_VAR	6170:1:220434:220502	54724	4	True				
ANR	54806	AssignmentExpression	Z_TYPE ( value . u . constant ) |= is_ref ? IS_LEXICAL_REF : IS_LEXICAL_VAR		54724	0		|=			
ANR	54807	CallExpression	Z_TYPE ( value . u . constant )		54724	0					
ANR	54808	Callee	Z_TYPE		54724	0					
ANR	54809	Identifier	Z_TYPE		54724	0					
ANR	54810	ArgumentList	value . u . constant		54724	1					
ANR	54811	Argument	value . u . constant		54724	0					
ANR	54812	MemberAccess	value . u . constant		54724	0					
ANR	54813	MemberAccess	value . u		54724	0					
ANR	54814	Identifier	value		54724	0					
ANR	54815	Identifier	u		54724	1					
ANR	54816	Identifier	constant		54724	1					
ANR	54817	ConditionalExpression	is_ref ? IS_LEXICAL_REF : IS_LEXICAL_VAR		54724	1					
ANR	54818	Condition	is_ref		54724	0					
ANR	54819	Identifier	is_ref		54724	0					
ANR	54820	Identifier	IS_LEXICAL_REF		54724	1					
ANR	54821	Identifier	IS_LEXICAL_VAR		54724	2					
ANR	54822	ExpressionStatement	"Z_SET_REFCOUNT_P ( & value . u . constant , 1 )"	6171:1:220505:220543	54724	5	True				
ANR	54823	CallExpression	"Z_SET_REFCOUNT_P ( & value . u . constant , 1 )"		54724	0					
ANR	54824	Callee	Z_SET_REFCOUNT_P		54724	0					
ANR	54825	Identifier	Z_SET_REFCOUNT_P		54724	0					
ANR	54826	ArgumentList	& value . u . constant		54724	1					
ANR	54827	Argument	& value . u . constant		54724	0					
ANR	54828	UnaryOperationExpression	& value . u . constant		54724	0					
ANR	54829	UnaryOperator	&		54724	0					
ANR	54830	MemberAccess	value . u . constant		54724	1					
ANR	54831	MemberAccess	value . u		54724	0					
ANR	54832	Identifier	value		54724	0					
ANR	54833	Identifier	u		54724	1					
ANR	54834	Identifier	constant		54724	1					
ANR	54835	Argument	1		54724	1					
ANR	54836	PrimaryExpression	1		54724	0					
ANR	54837	ExpressionStatement	Z_UNSET_ISREF_P ( & value . u . constant )	6172:1:220546:220580	54724	6	True				
ANR	54838	CallExpression	Z_UNSET_ISREF_P ( & value . u . constant )		54724	0					
ANR	54839	Callee	Z_UNSET_ISREF_P		54724	0					
ANR	54840	Identifier	Z_UNSET_ISREF_P		54724	0					
ANR	54841	ArgumentList	& value . u . constant		54724	1					
ANR	54842	Argument	& value . u . constant		54724	0					
ANR	54843	UnaryOperationExpression	& value . u . constant		54724	0					
ANR	54844	UnaryOperator	&		54724	0					
ANR	54845	MemberAccess	value . u . constant		54724	1					
ANR	54846	MemberAccess	value . u		54724	0					
ANR	54847	Identifier	value		54724	0					
ANR	54848	Identifier	u		54724	1					
ANR	54849	Identifier	constant		54724	1					
ANR	54850	Statement	zend_do_fetch_static_variable	6174:1:220584:220612	54724	7	True				
ANR	54851	Statement	(	6174:30:220613:220613	54724	8	True				
ANR	54852	Statement	varname	6174:31:220614:220620	54724	9	True				
ANR	54853	Statement	","	6174:38:220621:220621	54724	10	True				
ANR	54854	Statement	&	6174:40:220623:220623	54724	11	True				
ANR	54855	Statement	value	6174:41:220624:220628	54724	12	True				
ANR	54856	Statement	","	6174:46:220629:220629	54724	13	True				
ANR	54857	Statement	is_ref	6174:48:220631:220636	54724	14	True				
ANR	54858	Statement	?	6174:55:220638:220638	54724	15	True				
ANR	54859	Label	ZEND_FETCH_STATIC :	6174:57:220640:220658	54724	16	True				
ANR	54860	Identifier	ZEND_FETCH_STATIC		54724	0					
ANR	54861	Statement	ZEND_FETCH_LEXICAL	6174:77:220660:220677	54724	17	True				
ANR	54862	Statement	TSRMLS_CC	6174:96:220679:220687	54724	18	True				
ANR	54863	Statement	)	6174:105:220688:220688	54724	19	True				
ANR	54864	ExpressionStatement		6174:106:220689:220689	54724	20	True				
ANR	54865	ReturnType	void		54724	1					
ANR	54866	Identifier	zend_do_fetch_lexical_variable		54724	2					
ANR	54867	ParameterList	"znode * varname , zend_bool is_ref TSRMLS_DC"		54724	3					
ANR	54868	Parameter	znode * varname	6158:36:220071:220084	54724	0	True				
ANR	54869	ParameterType	znode *		54724	0					
ANR	54870	Identifier	varname		54724	1					
ANR	54871	Parameter	zend_bool is_ref TSRMLS_DC	6158:52:220087:220112	54724	1	True				
ANR	54872	ParameterType	zend_bool is_ref		54724	0					
ANR	54873	Identifier	TSRMLS_DC		54724	1					
ANR	54874	CFGEntryNode	ENTRY		54724		True				
ANR	54875	CFGExitNode	EXIT		54724		True				
ANR	54876	Symbol	IS_CONST		54724						
ANR	54877	Symbol	* varname		54724						
ANR	54878	Symbol	& value		54724						
ANR	54879	Symbol	varname -> u		54724						
ANR	54880	Symbol	E_COMPILE_ERROR		54724						
ANR	54881	Symbol	Z_TYPE		54724						
ANR	54882	Symbol	Z_STRLEN		54724						
ANR	54883	Symbol	varname		54724						
ANR	54884	Symbol	TSRMLS_DC		54724						
ANR	54885	Symbol	& value . u . constant		54724						
ANR	54886	Symbol	IS_LEXICAL_VAR		54724						
ANR	54887	Symbol	is_ref		54724						
ANR	54888	Symbol	memcmp		54724						
ANR	54889	Symbol	varname -> u . constant		54724						
ANR	54890	Symbol	value . op_type		54724						
ANR	54891	Symbol	Z_STRVAL		54724						
ANR	54892	Symbol	value . u		54724						
ANR	54893	Symbol	IS_LEXICAL_REF		54724						
ANR	54894	Symbol	value . u . constant		54724						
ANR	54895	Symbol	value		54724						
ANR	54896	Symbol	& value . u		54724						
ANR	54897	Function	zend_do_fetch_global_variable	6178:0:220704:221861							
ANR	54898	FunctionDef	"zend_do_fetch_global_variable (znode * varname , const znode * static_assignment , int fetch_type TSRMLS_DC)"		54897	0					
ANR	54899	CompoundStatement		6179:0:220823:221861	54897	0					
ANR	54900	IdentifierDeclStatement	zend_op * opline ;	6180:1:220826:220841	54897	0	True				
ANR	54901	IdentifierDecl	* opline		54897	0					
ANR	54902	IdentifierDeclType	zend_op *		54897	0					
ANR	54903	Identifier	opline		54897	1					
ANR	54904	IdentifierDeclStatement	znode lval ;	6181:1:220844:220854	54897	1	True				
ANR	54905	IdentifierDecl	lval		54897	0					
ANR	54906	IdentifierDeclType	znode		54897	0					
ANR	54907	Identifier	lval		54897	1					
ANR	54908	IdentifierDeclStatement	znode result ;	6182:1:220857:220869	54897	2	True				
ANR	54909	IdentifierDecl	result		54897	0					
ANR	54910	IdentifierDeclType	znode		54897	0					
ANR	54911	Identifier	result		54897	1					
ANR	54912	IfStatement	if ( varname -> op_type == IS_CONST )		54897	3					
ANR	54913	Condition	varname -> op_type == IS_CONST	6184:5:220877:220904	54897	0	True				
ANR	54914	EqualityExpression	varname -> op_type == IS_CONST		54897	0		==			
ANR	54915	PtrMemberAccess	varname -> op_type		54897	0					
ANR	54916	Identifier	varname		54897	0					
ANR	54917	Identifier	op_type		54897	1					
ANR	54918	Identifier	IS_CONST		54897	1					
ANR	54919	CompoundStatement		6:35:83:83	54897	1					
ANR	54920	IfStatement	if ( Z_TYPE ( varname -> u . constant ) != IS_STRING )		54897	0					
ANR	54921	Condition	Z_TYPE ( varname -> u . constant ) != IS_STRING	6185:6:220915:220954	54897	0	True				
ANR	54922	EqualityExpression	Z_TYPE ( varname -> u . constant ) != IS_STRING		54897	0		!=			
ANR	54923	CallExpression	Z_TYPE ( varname -> u . constant )		54897	0					
ANR	54924	Callee	Z_TYPE		54897	0					
ANR	54925	Identifier	Z_TYPE		54897	0					
ANR	54926	ArgumentList	varname -> u . constant		54897	1					
ANR	54927	Argument	varname -> u . constant		54897	0					
ANR	54928	MemberAccess	varname -> u . constant		54897	0					
ANR	54929	PtrMemberAccess	varname -> u		54897	0					
ANR	54930	Identifier	varname		54897	0					
ANR	54931	Identifier	u		54897	1					
ANR	54932	Identifier	constant		54897	1					
ANR	54933	Identifier	IS_STRING		54897	1					
ANR	54934	CompoundStatement		7:48:133:133	54897	1					
ANR	54935	ExpressionStatement	convert_to_string ( & varname -> u . constant )	6186:3:220962:221001	54897	0	True				
ANR	54936	CallExpression	convert_to_string ( & varname -> u . constant )		54897	0					
ANR	54937	Callee	convert_to_string		54897	0					
ANR	54938	Identifier	convert_to_string		54897	0					
ANR	54939	ArgumentList	& varname -> u . constant		54897	1					
ANR	54940	Argument	& varname -> u . constant		54897	0					
ANR	54941	UnaryOperationExpression	& varname -> u . constant		54897	0					
ANR	54942	UnaryOperator	&		54897	0					
ANR	54943	MemberAccess	varname -> u . constant		54897	1					
ANR	54944	PtrMemberAccess	varname -> u		54897	0					
ANR	54945	Identifier	varname		54897	0					
ANR	54946	Identifier	u		54897	1					
ANR	54947	Identifier	constant		54897	1					
ANR	54948	Statement	opline	6190:1:221012:221017	54897	4	True				
ANR	54949	Statement	=	6190:8:221019:221019	54897	5	True				
ANR	54950	Statement	get_next_op	6190:10:221021:221031	54897	6	True				
ANR	54951	Statement	(	6190:21:221032:221032	54897	7	True				
ANR	54952	Statement	CG	6190:22:221033:221034	54897	8	True				
ANR	54953	Statement	(	6190:24:221035:221035	54897	9	True				
ANR	54954	Statement	active_op_array	6190:25:221036:221050	54897	10	True				
ANR	54955	Statement	)	6190:40:221051:221051	54897	11	True				
ANR	54956	Statement	TSRMLS_CC	6190:42:221053:221061	54897	12	True				
ANR	54957	Statement	)	6190:51:221062:221062	54897	13	True				
ANR	54958	ExpressionStatement		6190:52:221063:221063	54897	14	True				
ANR	54959	ExpressionStatement	opline -> opcode = ZEND_FETCH_W	6191:1:221066:221095	54897	15	True				
ANR	54960	AssignmentExpression	opline -> opcode = ZEND_FETCH_W		54897	0		=			
ANR	54961	PtrMemberAccess	opline -> opcode		54897	0					
ANR	54962	Identifier	opline		54897	0					
ANR	54963	Identifier	opcode		54897	1					
ANR	54964	Identifier	ZEND_FETCH_W		54897	1					
ANR	54965	ExpressionStatement	opline -> result_type = IS_VAR	6192:1:221204:221232	54897	16	True				
ANR	54966	AssignmentExpression	opline -> result_type = IS_VAR		54897	0		=			
ANR	54967	PtrMemberAccess	opline -> result_type		54897	0					
ANR	54968	Identifier	opline		54897	0					
ANR	54969	Identifier	result_type		54897	1					
ANR	54970	Identifier	IS_VAR		54897	1					
ANR	54971	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6193:1:221235:221299	54897	17	True				
ANR	54972	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		54897	0		=			
ANR	54973	MemberAccess	opline -> result . var		54897	0					
ANR	54974	PtrMemberAccess	opline -> result		54897	0					
ANR	54975	Identifier	opline		54897	0					
ANR	54976	Identifier	result		54897	1					
ANR	54977	Identifier	var		54897	1					
ANR	54978	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		54897	1					
ANR	54979	Callee	get_temporary_variable		54897	0					
ANR	54980	Identifier	get_temporary_variable		54897	0					
ANR	54981	ArgumentList	CG ( active_op_array )		54897	1					
ANR	54982	Argument	CG ( active_op_array )		54897	0					
ANR	54983	CallExpression	CG ( active_op_array )		54897	0					
ANR	54984	Callee	CG		54897	0					
ANR	54985	Identifier	CG		54897	0					
ANR	54986	ArgumentList	active_op_array		54897	1					
ANR	54987	Argument	active_op_array		54897	0					
ANR	54988	Identifier	active_op_array		54897	0					
ANR	54989	ExpressionStatement	"SET_NODE ( opline -> op1 , varname )"	6194:1:221302:221332	54897	18	True				
ANR	54990	CallExpression	"SET_NODE ( opline -> op1 , varname )"		54897	0					
ANR	54991	Callee	SET_NODE		54897	0					
ANR	54992	Identifier	SET_NODE		54897	0					
ANR	54993	ArgumentList	opline -> op1		54897	1					
ANR	54994	Argument	opline -> op1		54897	0					
ANR	54995	PtrMemberAccess	opline -> op1		54897	0					
ANR	54996	Identifier	opline		54897	0					
ANR	54997	Identifier	op1		54897	1					
ANR	54998	Argument	varname		54897	1					
ANR	54999	Identifier	varname		54897	0					
ANR	55000	IfStatement	if ( opline -> op1_type == IS_CONST )		54897	19					
ANR	55001	Condition	opline -> op1_type == IS_CONST	6195:5:221339:221366	54897	0	True				
ANR	55002	EqualityExpression	opline -> op1_type == IS_CONST		54897	0		==			
ANR	55003	PtrMemberAccess	opline -> op1_type		54897	0					
ANR	55004	Identifier	opline		54897	0					
ANR	55005	Identifier	op1_type		54897	1					
ANR	55006	Identifier	IS_CONST		54897	1					
ANR	55007	CompoundStatement		17:35:545:545	54897	1					
ANR	55008	ExpressionStatement	CALCULATE_LITERAL_HASH ( opline -> op1 . constant )	6196:2:221373:221417	54897	0	True				
ANR	55009	CallExpression	CALCULATE_LITERAL_HASH ( opline -> op1 . constant )		54897	0					
ANR	55010	Callee	CALCULATE_LITERAL_HASH		54897	0					
ANR	55011	Identifier	CALCULATE_LITERAL_HASH		54897	0					
ANR	55012	ArgumentList	opline -> op1 . constant		54897	1					
ANR	55013	Argument	opline -> op1 . constant		54897	0					
ANR	55014	MemberAccess	opline -> op1 . constant		54897	0					
ANR	55015	PtrMemberAccess	opline -> op1		54897	0					
ANR	55016	Identifier	opline		54897	0					
ANR	55017	Identifier	op1		54897	1					
ANR	55018	Identifier	constant		54897	1					
ANR	55019	ExpressionStatement	SET_UNUSED ( opline -> op2 )	6198:1:221423:221446	54897	20	True				
ANR	55020	CallExpression	SET_UNUSED ( opline -> op2 )		54897	0					
ANR	55021	Callee	SET_UNUSED		54897	0					
ANR	55022	Identifier	SET_UNUSED		54897	0					
ANR	55023	ArgumentList	opline -> op2		54897	1					
ANR	55024	Argument	opline -> op2		54897	0					
ANR	55025	PtrMemberAccess	opline -> op2		54897	0					
ANR	55026	Identifier	opline		54897	0					
ANR	55027	Identifier	op2		54897	1					
ANR	55028	ExpressionStatement	opline -> extended_value = fetch_type	6199:1:221449:221484	54897	21	True				
ANR	55029	AssignmentExpression	opline -> extended_value = fetch_type		54897	0		=			
ANR	55030	PtrMemberAccess	opline -> extended_value		54897	0					
ANR	55031	Identifier	opline		54897	0					
ANR	55032	Identifier	extended_value		54897	1					
ANR	55033	Identifier	fetch_type		54897	1					
ANR	55034	ExpressionStatement	"GET_NODE ( & result , opline -> result )"	6200:1:221487:221520	54897	22	True				
ANR	55035	CallExpression	"GET_NODE ( & result , opline -> result )"		54897	0					
ANR	55036	Callee	GET_NODE		54897	0					
ANR	55037	Identifier	GET_NODE		54897	0					
ANR	55038	ArgumentList	& result		54897	1					
ANR	55039	Argument	& result		54897	0					
ANR	55040	UnaryOperationExpression	& result		54897	0					
ANR	55041	UnaryOperator	&		54897	0					
ANR	55042	Identifier	result		54897	1					
ANR	55043	Argument	opline -> result		54897	1					
ANR	55044	PtrMemberAccess	opline -> result		54897	0					
ANR	55045	Identifier	opline		54897	0					
ANR	55046	Identifier	result		54897	1					
ANR	55047	IfStatement	if ( varname -> op_type == IS_CONST )		54897	23					
ANR	55048	Condition	varname -> op_type == IS_CONST	6202:5:221528:221555	54897	0	True				
ANR	55049	EqualityExpression	varname -> op_type == IS_CONST		54897	0		==			
ANR	55050	PtrMemberAccess	varname -> op_type		54897	0					
ANR	55051	Identifier	varname		54897	0					
ANR	55052	Identifier	op_type		54897	1					
ANR	55053	Identifier	IS_CONST		54897	1					
ANR	55054	CompoundStatement		24:35:734:734	54897	1					
ANR	55055	ExpressionStatement	zval_copy_ctor ( & varname -> u . constant )	6203:2:221562:221598	54897	0	True				
ANR	55056	CallExpression	zval_copy_ctor ( & varname -> u . constant )		54897	0					
ANR	55057	Callee	zval_copy_ctor		54897	0					
ANR	55058	Identifier	zval_copy_ctor		54897	0					
ANR	55059	ArgumentList	& varname -> u . constant		54897	1					
ANR	55060	Argument	& varname -> u . constant		54897	0					
ANR	55061	UnaryOperationExpression	& varname -> u . constant		54897	0					
ANR	55062	UnaryOperator	&		54897	0					
ANR	55063	MemberAccess	varname -> u . constant		54897	1					
ANR	55064	PtrMemberAccess	varname -> u		54897	0					
ANR	55065	Identifier	varname		54897	0					
ANR	55066	Identifier	u		54897	1					
ANR	55067	Identifier	constant		54897	1					
ANR	55068	Statement	fetch_simple_variable	6205:1:221604:221624	54897	24	True				
ANR	55069	Statement	(	6205:22:221625:221625	54897	25	True				
ANR	55070	Statement	&	6205:23:221626:221626	54897	26	True				
ANR	55071	Statement	lval	6205:24:221627:221630	54897	27	True				
ANR	55072	Statement	","	6205:28:221631:221631	54897	28	True				
ANR	55073	Statement	varname	6205:30:221633:221639	54897	29	True				
ANR	55074	Statement	","	6205:37:221640:221640	54897	30	True				
ANR	55075	Statement	0	6205:39:221642:221642	54897	31	True				
ANR	55076	Statement	TSRMLS_CC	6205:41:221644:221652	54897	32	True				
ANR	55077	Statement	)	6205:50:221653:221653	54897	33	True				
ANR	55078	ExpressionStatement		6205:51:221654:221654	54897	34	True				
ANR	55079	Statement	zend_do_assign_ref	6207:1:221718:221735	54897	35	True				
ANR	55080	Statement	(	6207:19:221736:221736	54897	36	True				
ANR	55081	Statement	NULL	6207:20:221737:221740	54897	37	True				
ANR	55082	Statement	","	6207:24:221741:221741	54897	38	True				
ANR	55083	Statement	&	6207:26:221743:221743	54897	39	True				
ANR	55084	Statement	lval	6207:27:221744:221747	54897	40	True				
ANR	55085	Statement	","	6207:31:221748:221748	54897	41	True				
ANR	55086	Statement	&	6207:33:221750:221750	54897	42	True				
ANR	55087	Statement	result	6207:34:221751:221756	54897	43	True				
ANR	55088	Statement	TSRMLS_CC	6207:41:221758:221766	54897	44	True				
ANR	55089	Statement	)	6207:50:221767:221767	54897	45	True				
ANR	55090	ExpressionStatement		6207:51:221768:221768	54897	46	True				
ANR	55091	ExpressionStatement	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . result_type |= EXT_TYPE_UNUSED	6208:1:221771:221859	54897	47	True				
ANR	55092	AssignmentExpression	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . result_type |= EXT_TYPE_UNUSED		54897	0		|=			
ANR	55093	MemberAccess	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . result_type		54897	0					
ANR	55094	ArrayIndexing	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		54897	0					
ANR	55095	PtrMemberAccess	CG ( active_op_array ) -> opcodes		54897	0					
ANR	55096	CallExpression	CG ( active_op_array )		54897	0					
ANR	55097	Callee	CG		54897	0					
ANR	55098	Identifier	CG		54897	0					
ANR	55099	ArgumentList	active_op_array		54897	1					
ANR	55100	Argument	active_op_array		54897	0					
ANR	55101	Identifier	active_op_array		54897	0					
ANR	55102	Identifier	opcodes		54897	1					
ANR	55103	AdditiveExpression	CG ( active_op_array ) -> last - 1		54897	1		-			
ANR	55104	PtrMemberAccess	CG ( active_op_array ) -> last		54897	0					
ANR	55105	CallExpression	CG ( active_op_array )		54897	0					
ANR	55106	Callee	CG		54897	0					
ANR	55107	Identifier	CG		54897	0					
ANR	55108	ArgumentList	active_op_array		54897	1					
ANR	55109	Argument	active_op_array		54897	0					
ANR	55110	Identifier	active_op_array		54897	0					
ANR	55111	Identifier	last		54897	1					
ANR	55112	PrimaryExpression	1		54897	1					
ANR	55113	Identifier	result_type		54897	1					
ANR	55114	Identifier	EXT_TYPE_UNUSED		54897	1					
ANR	55115	ReturnType	void		54897	1					
ANR	55116	Identifier	zend_do_fetch_global_variable		54897	2					
ANR	55117	ParameterList	"znode * varname , const znode * static_assignment , int fetch_type TSRMLS_DC"		54897	3					
ANR	55118	Parameter	znode * varname	6178:35:220739:220752	54897	0	True				
ANR	55119	ParameterType	znode *		54897	0					
ANR	55120	Identifier	varname		54897	1					
ANR	55121	Parameter	const znode * static_assignment	6178:51:220755:220784	54897	1	True				
ANR	55122	ParameterType	const znode *		54897	0					
ANR	55123	Identifier	static_assignment		54897	1					
ANR	55124	Parameter	int fetch_type TSRMLS_DC	6178:83:220787:220810	54897	2	True				
ANR	55125	ParameterType	int fetch_type		54897	0					
ANR	55126	Identifier	TSRMLS_DC		54897	1					
ANR	55127	CFGEntryNode	ENTRY		54897		True				
ANR	55128	CFGExitNode	EXIT		54897		True				
ANR	55129	Symbol	opline -> op1		54897						
ANR	55130	Symbol	opline -> op2		54897						
ANR	55131	Symbol	* varname		54897						
ANR	55132	Symbol	varname -> u		54897						
ANR	55133	Symbol	lval		54897						
ANR	55134	Symbol	Z_TYPE		54897						
ANR	55135	Symbol	get_temporary_variable		54897						
ANR	55136	Symbol	* CG		54897						
ANR	55137	Symbol	varname -> op_type		54897						
ANR	55138	Symbol	TSRMLS_DC		54897						
ANR	55139	Symbol	CG ( active_op_array ) -> opcodes		54897						
ANR	55140	Symbol	opline -> result		54897						
ANR	55141	Symbol	opline -> extended_value		54897						
ANR	55142	Symbol	result		54897						
ANR	55143	Symbol	CG ( active_op_array ) -> last		54897						
ANR	55144	Symbol	* * CG		54897						
ANR	55145	Symbol	opline		54897						
ANR	55146	Symbol	& varname -> u		54897						
ANR	55147	Symbol	opline -> op1 . constant		54897						
ANR	55148	Symbol	& result		54897						
ANR	55149	Symbol	& varname -> u . constant		54897						
ANR	55150	Symbol	IS_STRING		54897						
ANR	55151	Symbol	EXT_TYPE_UNUSED		54897						
ANR	55152	Symbol	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . result_type		54897						
ANR	55153	Symbol	* CG ( active_op_array ) -> opcodes		54897						
ANR	55154	Symbol	opline -> result_type		54897						
ANR	55155	Symbol	IS_CONST		54897						
ANR	55156	Symbol	fetch_type		54897						
ANR	55157	Symbol	CG		54897						
ANR	55158	Symbol	* CG ( active_op_array ) -> last		54897						
ANR	55159	Symbol	active_op_array		54897						
ANR	55160	Symbol	varname		54897						
ANR	55161	Symbol	opline -> op1_type		54897						
ANR	55162	Symbol	ZEND_FETCH_W		54897						
ANR	55163	Symbol	* opline		54897						
ANR	55164	Symbol	varname -> u . constant		54897						
ANR	55165	Symbol	opline -> opcode		54897						
ANR	55166	Symbol	static_assignment		54897						
ANR	55167	Symbol	IS_VAR		54897						
ANR	55168	Symbol	opline -> result . var		54897						
ANR	55169	Function	zend_do_cast	6212:0:221874:222276							
ANR	55170	FunctionDef	"zend_do_cast (znode * result , const znode * expr , int type TSRMLS_DC)"		55169	0					
ANR	55171	CompoundStatement		6213:0:221956:222276	55169	0					
ANR	55172	Statement	zend_op	6214:1:221959:221965	55169	0	True				
ANR	55173	Statement	*	6214:9:221967:221967	55169	1	True				
ANR	55174	Statement	opline	6214:10:221968:221973	55169	2	True				
ANR	55175	Statement	=	6214:17:221975:221975	55169	3	True				
ANR	55176	Statement	get_next_op	6214:19:221977:221987	55169	4	True				
ANR	55177	Statement	(	6214:30:221988:221988	55169	5	True				
ANR	55178	Statement	CG	6214:31:221989:221990	55169	6	True				
ANR	55179	Statement	(	6214:33:221991:221991	55169	7	True				
ANR	55180	Statement	active_op_array	6214:34:221992:222006	55169	8	True				
ANR	55181	Statement	)	6214:49:222007:222007	55169	9	True				
ANR	55182	Statement	TSRMLS_CC	6214:51:222009:222017	55169	10	True				
ANR	55183	Statement	)	6214:60:222018:222018	55169	11	True				
ANR	55184	ExpressionStatement		6214:61:222019:222019	55169	12	True				
ANR	55185	ExpressionStatement	opline -> opcode = ZEND_CAST	6216:1:222023:222049	55169	13	True				
ANR	55186	AssignmentExpression	opline -> opcode = ZEND_CAST		55169	0		=			
ANR	55187	PtrMemberAccess	opline -> opcode		55169	0					
ANR	55188	Identifier	opline		55169	0					
ANR	55189	Identifier	opcode		55169	1					
ANR	55190	Identifier	ZEND_CAST		55169	1					
ANR	55191	ExpressionStatement	opline -> result_type = IS_TMP_VAR	6217:1:222052:222084	55169	14	True				
ANR	55192	AssignmentExpression	opline -> result_type = IS_TMP_VAR		55169	0		=			
ANR	55193	PtrMemberAccess	opline -> result_type		55169	0					
ANR	55194	Identifier	opline		55169	0					
ANR	55195	Identifier	result_type		55169	1					
ANR	55196	Identifier	IS_TMP_VAR		55169	1					
ANR	55197	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6218:1:222087:222151	55169	15	True				
ANR	55198	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		55169	0		=			
ANR	55199	MemberAccess	opline -> result . var		55169	0					
ANR	55200	PtrMemberAccess	opline -> result		55169	0					
ANR	55201	Identifier	opline		55169	0					
ANR	55202	Identifier	result		55169	1					
ANR	55203	Identifier	var		55169	1					
ANR	55204	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		55169	1					
ANR	55205	Callee	get_temporary_variable		55169	0					
ANR	55206	Identifier	get_temporary_variable		55169	0					
ANR	55207	ArgumentList	CG ( active_op_array )		55169	1					
ANR	55208	Argument	CG ( active_op_array )		55169	0					
ANR	55209	CallExpression	CG ( active_op_array )		55169	0					
ANR	55210	Callee	CG		55169	0					
ANR	55211	Identifier	CG		55169	0					
ANR	55212	ArgumentList	active_op_array		55169	1					
ANR	55213	Argument	active_op_array		55169	0					
ANR	55214	Identifier	active_op_array		55169	0					
ANR	55215	ExpressionStatement	"SET_NODE ( opline -> op1 , expr )"	6219:1:222154:222181	55169	16	True				
ANR	55216	CallExpression	"SET_NODE ( opline -> op1 , expr )"		55169	0					
ANR	55217	Callee	SET_NODE		55169	0					
ANR	55218	Identifier	SET_NODE		55169	0					
ANR	55219	ArgumentList	opline -> op1		55169	1					
ANR	55220	Argument	opline -> op1		55169	0					
ANR	55221	PtrMemberAccess	opline -> op1		55169	0					
ANR	55222	Identifier	opline		55169	0					
ANR	55223	Identifier	op1		55169	1					
ANR	55224	Argument	expr		55169	1					
ANR	55225	Identifier	expr		55169	0					
ANR	55226	ExpressionStatement	SET_UNUSED ( opline -> op2 )	6220:1:222184:222207	55169	17	True				
ANR	55227	CallExpression	SET_UNUSED ( opline -> op2 )		55169	0					
ANR	55228	Callee	SET_UNUSED		55169	0					
ANR	55229	Identifier	SET_UNUSED		55169	0					
ANR	55230	ArgumentList	opline -> op2		55169	1					
ANR	55231	Argument	opline -> op2		55169	0					
ANR	55232	PtrMemberAccess	opline -> op2		55169	0					
ANR	55233	Identifier	opline		55169	0					
ANR	55234	Identifier	op2		55169	1					
ANR	55235	ExpressionStatement	opline -> extended_value = type	6221:1:222210:222239	55169	18	True				
ANR	55236	AssignmentExpression	opline -> extended_value = type		55169	0		=			
ANR	55237	PtrMemberAccess	opline -> extended_value		55169	0					
ANR	55238	Identifier	opline		55169	0					
ANR	55239	Identifier	extended_value		55169	1					
ANR	55240	Identifier	type		55169	1					
ANR	55241	ExpressionStatement	"GET_NODE ( result , opline -> result )"	6222:1:222242:222274	55169	19	True				
ANR	55242	CallExpression	"GET_NODE ( result , opline -> result )"		55169	0					
ANR	55243	Callee	GET_NODE		55169	0					
ANR	55244	Identifier	GET_NODE		55169	0					
ANR	55245	ArgumentList	result		55169	1					
ANR	55246	Argument	result		55169	0					
ANR	55247	Identifier	result		55169	0					
ANR	55248	Argument	opline -> result		55169	1					
ANR	55249	PtrMemberAccess	opline -> result		55169	0					
ANR	55250	Identifier	opline		55169	0					
ANR	55251	Identifier	result		55169	1					
ANR	55252	ReturnType	void		55169	1					
ANR	55253	Identifier	zend_do_cast		55169	2					
ANR	55254	ParameterList	"znode * result , const znode * expr , int type TSRMLS_DC"		55169	3					
ANR	55255	Parameter	znode * result	6212:18:221892:221904	55169	0	True				
ANR	55256	ParameterType	znode *		55169	0					
ANR	55257	Identifier	result		55169	1					
ANR	55258	Parameter	const znode * expr	6212:33:221907:221923	55169	1	True				
ANR	55259	ParameterType	const znode *		55169	0					
ANR	55260	Identifier	expr		55169	1					
ANR	55261	Parameter	int type TSRMLS_DC	6212:52:221926:221943	55169	2	True				
ANR	55262	ParameterType	int type		55169	0					
ANR	55263	Identifier	TSRMLS_DC		55169	1					
ANR	55264	CFGEntryNode	ENTRY		55169		True				
ANR	55265	CFGExitNode	EXIT		55169		True				
ANR	55266	Symbol	opline -> result_type		55169						
ANR	55267	Symbol	opline -> op1		55169						
ANR	55268	Symbol	opline -> op2		55169						
ANR	55269	Symbol	CG		55169						
ANR	55270	Symbol	active_op_array		55169						
ANR	55271	Symbol	get_temporary_variable		55169						
ANR	55272	Symbol	type		55169						
ANR	55273	Symbol	TSRMLS_DC		55169						
ANR	55274	Symbol	opline -> result		55169						
ANR	55275	Symbol	opline -> extended_value		55169						
ANR	55276	Symbol	result		55169						
ANR	55277	Symbol	opline		55169						
ANR	55278	Symbol	* opline		55169						
ANR	55279	Symbol	ZEND_CAST		55169						
ANR	55280	Symbol	opline -> opcode		55169						
ANR	55281	Symbol	expr		55169						
ANR	55282	Symbol	opline -> result . var		55169						
ANR	55283	Symbol	IS_TMP_VAR		55169						
ANR	55284	DeclStmt									
ANR	55285	Decl							zend_op	zend_op *	opline
ANR	55286	DeclStmt									
ANR	55287	Decl							int	int	i
ANR	55288	DeclStmt									
ANR	55289	Decl							zend_op	zend_op *	last_op
ANR	55290	DeclStmt									
ANR	55291	Decl							zend_op	zend_op *	opline
ANR	55292	DeclStmt									
ANR	55293	Decl							zend_op	zend_op *	last_op
ANR	55294	Function	zend_do_instanceof	6343:0:225815:226641							
ANR	55295	FunctionDef	"zend_do_instanceof (znode * result , const znode * expr , const znode * class_znode , int type TSRMLS_DC)"		55294	0					
ANR	55296	CompoundStatement		6344:0:225929:226641	55294	0					
ANR	55297	IdentifierDeclStatement	int last_op_number = get_next_op_number ( CG ( active_op_array ) ) ;	6345:1:225932:225992	55294	0	True				
ANR	55298	IdentifierDecl	last_op_number = get_next_op_number ( CG ( active_op_array ) )		55294	0					
ANR	55299	IdentifierDeclType	int		55294	0					
ANR	55300	Identifier	last_op_number		55294	1					
ANR	55301	AssignmentExpression	last_op_number = get_next_op_number ( CG ( active_op_array ) )		55294	2		=			
ANR	55302	Identifier	last_op_number		55294	0					
ANR	55303	CallExpression	get_next_op_number ( CG ( active_op_array ) )		55294	1					
ANR	55304	Callee	get_next_op_number		55294	0					
ANR	55305	Identifier	get_next_op_number		55294	0					
ANR	55306	ArgumentList	CG ( active_op_array )		55294	1					
ANR	55307	Argument	CG ( active_op_array )		55294	0					
ANR	55308	CallExpression	CG ( active_op_array )		55294	0					
ANR	55309	Callee	CG		55294	0					
ANR	55310	Identifier	CG		55294	0					
ANR	55311	ArgumentList	active_op_array		55294	1					
ANR	55312	Argument	active_op_array		55294	0					
ANR	55313	Identifier	active_op_array		55294	0					
ANR	55314	IdentifierDeclStatement	zend_op * opline ;	6346:1:225995:226010	55294	1	True				
ANR	55315	IdentifierDecl	* opline		55294	0					
ANR	55316	IdentifierDeclType	zend_op *		55294	0					
ANR	55317	Identifier	opline		55294	1					
ANR	55318	IfStatement	if ( last_op_number > 0 )		55294	2					
ANR	55319	Condition	last_op_number > 0	6348:5:226018:226035	55294	0	True				
ANR	55320	RelationalExpression	last_op_number > 0		55294	0		>			
ANR	55321	Identifier	last_op_number		55294	0					
ANR	55322	PrimaryExpression	0		55294	1					
ANR	55323	CompoundStatement		5:25:108:108	55294	1					
ANR	55324	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]	6349:2:226042:226098	55294	0	True				
ANR	55325	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		55294	0		=			
ANR	55326	Identifier	opline		55294	0					
ANR	55327	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		55294	1					
ANR	55328	UnaryOperator	&		55294	0					
ANR	55329	ArrayIndexing	CG ( active_op_array ) -> opcodes [ last_op_number - 1 ]		55294	1					
ANR	55330	PtrMemberAccess	CG ( active_op_array ) -> opcodes		55294	0					
ANR	55331	CallExpression	CG ( active_op_array )		55294	0					
ANR	55332	Callee	CG		55294	0					
ANR	55333	Identifier	CG		55294	0					
ANR	55334	ArgumentList	active_op_array		55294	1					
ANR	55335	Argument	active_op_array		55294	0					
ANR	55336	Identifier	active_op_array		55294	0					
ANR	55337	Identifier	opcodes		55294	1					
ANR	55338	AdditiveExpression	last_op_number - 1		55294	1		-			
ANR	55339	Identifier	last_op_number		55294	0					
ANR	55340	PrimaryExpression	1		55294	1					
ANR	55341	IfStatement	if ( opline -> opcode == ZEND_FETCH_CLASS )		55294	1					
ANR	55342	Condition	opline -> opcode == ZEND_FETCH_CLASS	6350:6:226106:226139	55294	0	True				
ANR	55343	EqualityExpression	opline -> opcode == ZEND_FETCH_CLASS		55294	0		==			
ANR	55344	PtrMemberAccess	opline -> opcode		55294	0					
ANR	55345	Identifier	opline		55294	0					
ANR	55346	Identifier	opcode		55294	1					
ANR	55347	Identifier	ZEND_FETCH_CLASS		55294	1					
ANR	55348	CompoundStatement		7:42:212:212	55294	1					
ANR	55349	ExpressionStatement	opline -> extended_value |= ZEND_FETCH_CLASS_NO_AUTOLOAD	6351:3:226147:226201	55294	0	True				
ANR	55350	AssignmentExpression	opline -> extended_value |= ZEND_FETCH_CLASS_NO_AUTOLOAD		55294	0		|=			
ANR	55351	PtrMemberAccess	opline -> extended_value		55294	0					
ANR	55352	Identifier	opline		55294	0					
ANR	55353	Identifier	extended_value		55294	1					
ANR	55354	Identifier	ZEND_FETCH_CLASS_NO_AUTOLOAD		55294	1					
ANR	55355	IfStatement	if ( expr -> op_type == IS_CONST )		55294	3					
ANR	55356	Condition	expr -> op_type == IS_CONST	6355:5:226216:226240	55294	0	True				
ANR	55357	EqualityExpression	expr -> op_type == IS_CONST		55294	0		==			
ANR	55358	PtrMemberAccess	expr -> op_type		55294	0					
ANR	55359	Identifier	expr		55294	0					
ANR	55360	Identifier	op_type		55294	1					
ANR	55361	Identifier	IS_CONST		55294	1					
ANR	55362	CompoundStatement		12:32:313:313	55294	1					
ANR	55363	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""instanceof expects an object instance, constant given"" )"	6356:2:226247:226340	55294	0	True				
ANR	55364	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""instanceof expects an object instance, constant given"" )"		55294	0					
ANR	55365	Callee	zend_error_noreturn		55294	0					
ANR	55366	Identifier	zend_error_noreturn		55294	0					
ANR	55367	ArgumentList	E_COMPILE_ERROR		55294	1					
ANR	55368	Argument	E_COMPILE_ERROR		55294	0					
ANR	55369	Identifier	E_COMPILE_ERROR		55294	0					
ANR	55370	Argument	"""instanceof expects an object instance, constant given"""		55294	1					
ANR	55371	PrimaryExpression	"""instanceof expects an object instance, constant given"""		55294	0					
ANR	55372	Statement	opline	6359:1:226347:226352	55294	4	True				
ANR	55373	Statement	=	6359:8:226354:226354	55294	5	True				
ANR	55374	Statement	get_next_op	6359:10:226356:226366	55294	6	True				
ANR	55375	Statement	(	6359:21:226367:226367	55294	7	True				
ANR	55376	Statement	CG	6359:22:226368:226369	55294	8	True				
ANR	55377	Statement	(	6359:24:226370:226370	55294	9	True				
ANR	55378	Statement	active_op_array	6359:25:226371:226385	55294	10	True				
ANR	55379	Statement	)	6359:40:226386:226386	55294	11	True				
ANR	55380	Statement	TSRMLS_CC	6359:42:226388:226396	55294	12	True				
ANR	55381	Statement	)	6359:51:226397:226397	55294	13	True				
ANR	55382	ExpressionStatement		6359:52:226398:226398	55294	14	True				
ANR	55383	ExpressionStatement	opline -> opcode = ZEND_INSTANCEOF	6360:1:226401:226433	55294	15	True				
ANR	55384	AssignmentExpression	opline -> opcode = ZEND_INSTANCEOF		55294	0		=			
ANR	55385	PtrMemberAccess	opline -> opcode		55294	0					
ANR	55386	Identifier	opline		55294	0					
ANR	55387	Identifier	opcode		55294	1					
ANR	55388	Identifier	ZEND_INSTANCEOF		55294	1					
ANR	55389	ExpressionStatement	opline -> result_type = IS_TMP_VAR	6361:1:226436:226468	55294	16	True				
ANR	55390	AssignmentExpression	opline -> result_type = IS_TMP_VAR		55294	0		=			
ANR	55391	PtrMemberAccess	opline -> result_type		55294	0					
ANR	55392	Identifier	opline		55294	0					
ANR	55393	Identifier	result_type		55294	1					
ANR	55394	Identifier	IS_TMP_VAR		55294	1					
ANR	55395	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6362:1:226471:226535	55294	17	True				
ANR	55396	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		55294	0		=			
ANR	55397	MemberAccess	opline -> result . var		55294	0					
ANR	55398	PtrMemberAccess	opline -> result		55294	0					
ANR	55399	Identifier	opline		55294	0					
ANR	55400	Identifier	result		55294	1					
ANR	55401	Identifier	var		55294	1					
ANR	55402	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		55294	1					
ANR	55403	Callee	get_temporary_variable		55294	0					
ANR	55404	Identifier	get_temporary_variable		55294	0					
ANR	55405	ArgumentList	CG ( active_op_array )		55294	1					
ANR	55406	Argument	CG ( active_op_array )		55294	0					
ANR	55407	CallExpression	CG ( active_op_array )		55294	0					
ANR	55408	Callee	CG		55294	0					
ANR	55409	Identifier	CG		55294	0					
ANR	55410	ArgumentList	active_op_array		55294	1					
ANR	55411	Argument	active_op_array		55294	0					
ANR	55412	Identifier	active_op_array		55294	0					
ANR	55413	ExpressionStatement	"SET_NODE ( opline -> op1 , expr )"	6363:1:226538:226565	55294	18	True				
ANR	55414	CallExpression	"SET_NODE ( opline -> op1 , expr )"		55294	0					
ANR	55415	Callee	SET_NODE		55294	0					
ANR	55416	Identifier	SET_NODE		55294	0					
ANR	55417	ArgumentList	opline -> op1		55294	1					
ANR	55418	Argument	opline -> op1		55294	0					
ANR	55419	PtrMemberAccess	opline -> op1		55294	0					
ANR	55420	Identifier	opline		55294	0					
ANR	55421	Identifier	op1		55294	1					
ANR	55422	Argument	expr		55294	1					
ANR	55423	Identifier	expr		55294	0					
ANR	55424	ExpressionStatement	"SET_NODE ( opline -> op2 , class_znode )"	6365:1:226569:226603	55294	19	True				
ANR	55425	CallExpression	"SET_NODE ( opline -> op2 , class_znode )"		55294	0					
ANR	55426	Callee	SET_NODE		55294	0					
ANR	55427	Identifier	SET_NODE		55294	0					
ANR	55428	ArgumentList	opline -> op2		55294	1					
ANR	55429	Argument	opline -> op2		55294	0					
ANR	55430	PtrMemberAccess	opline -> op2		55294	0					
ANR	55431	Identifier	opline		55294	0					
ANR	55432	Identifier	op2		55294	1					
ANR	55433	Argument	class_znode		55294	1					
ANR	55434	Identifier	class_znode		55294	0					
ANR	55435	ExpressionStatement	"GET_NODE ( result , opline -> result )"	6367:1:226607:226639	55294	20	True				
ANR	55436	CallExpression	"GET_NODE ( result , opline -> result )"		55294	0					
ANR	55437	Callee	GET_NODE		55294	0					
ANR	55438	Identifier	GET_NODE		55294	0					
ANR	55439	ArgumentList	result		55294	1					
ANR	55440	Argument	result		55294	0					
ANR	55441	Identifier	result		55294	0					
ANR	55442	Argument	opline -> result		55294	1					
ANR	55443	PtrMemberAccess	opline -> result		55294	0					
ANR	55444	Identifier	opline		55294	0					
ANR	55445	Identifier	result		55294	1					
ANR	55446	ReturnType	void		55294	1					
ANR	55447	Identifier	zend_do_instanceof		55294	2					
ANR	55448	ParameterList	"znode * result , const znode * expr , const znode * class_znode , int type TSRMLS_DC"		55294	3					
ANR	55449	Parameter	znode * result	6343:24:225839:225851	55294	0	True				
ANR	55450	ParameterType	znode *		55294	0					
ANR	55451	Identifier	result		55294	1					
ANR	55452	Parameter	const znode * expr	6343:39:225854:225870	55294	1	True				
ANR	55453	ParameterType	const znode *		55294	0					
ANR	55454	Identifier	expr		55294	1					
ANR	55455	Parameter	const znode * class_znode	6343:58:225873:225896	55294	2	True				
ANR	55456	ParameterType	const znode *		55294	0					
ANR	55457	Identifier	class_znode		55294	1					
ANR	55458	Parameter	int type TSRMLS_DC	6343:84:225899:225916	55294	3	True				
ANR	55459	ParameterType	int type		55294	0					
ANR	55460	Identifier	TSRMLS_DC		55294	1					
ANR	55461	CFGEntryNode	ENTRY		55294		True				
ANR	55462	CFGExitNode	EXIT		55294		True				
ANR	55463	Symbol	class_znode		55294						
ANR	55464	Symbol	opline -> op1		55294						
ANR	55465	Symbol	opline -> op2		55294						
ANR	55466	Symbol	E_COMPILE_ERROR		55294						
ANR	55467	Symbol	* CG		55294						
ANR	55468	Symbol	get_temporary_variable		55294						
ANR	55469	Symbol	ZEND_FETCH_CLASS_NO_AUTOLOAD		55294						
ANR	55470	Symbol	TSRMLS_DC		55294						
ANR	55471	Symbol	CG ( active_op_array ) -> opcodes		55294						
ANR	55472	Symbol	opline -> extended_value		55294						
ANR	55473	Symbol	opline -> result		55294						
ANR	55474	Symbol	result		55294						
ANR	55475	Symbol	opline		55294						
ANR	55476	Symbol	ZEND_INSTANCEOF		55294						
ANR	55477	Symbol	expr		55294						
ANR	55478	Symbol	IS_TMP_VAR		55294						
ANR	55479	Symbol	last_op_number		55294						
ANR	55480	Symbol	opline -> result_type		55294						
ANR	55481	Symbol	IS_CONST		55294						
ANR	55482	Symbol	CG		55294						
ANR	55483	Symbol	expr -> op_type		55294						
ANR	55484	Symbol	active_op_array		55294						
ANR	55485	Symbol	ZEND_FETCH_CLASS		55294						
ANR	55486	Symbol	* opline		55294						
ANR	55487	Symbol	* expr		55294						
ANR	55488	Symbol	opline -> opcode		55294						
ANR	55489	Symbol	get_next_op_number		55294						
ANR	55490	Symbol	opline -> result . var		55294						
ANR	55491	Function	zend_do_foreach_begin	6371:0:226654:228720							
ANR	55492	FunctionDef	"zend_do_foreach_begin (znode * foreach_token , znode * open_brackets_token , znode * array , znode * as_token , int variable TSRMLS_DC)"		55491	0					
ANR	55493	CompoundStatement		6372:0:226796:228720	55491	0					
ANR	55494	IdentifierDeclStatement	zend_op * opline ;	6373:1:226799:226814	55491	0	True				
ANR	55495	IdentifierDecl	* opline		55491	0					
ANR	55496	IdentifierDeclType	zend_op *		55491	0					
ANR	55497	Identifier	opline		55491	1					
ANR	55498	IdentifierDeclStatement	zend_bool is_variable ;	6374:1:226817:226838	55491	1	True				
ANR	55499	IdentifierDecl	is_variable		55491	0					
ANR	55500	IdentifierDeclType	zend_bool		55491	0					
ANR	55501	Identifier	is_variable		55491	1					
ANR	55502	IdentifierDeclStatement	zend_op dummy_opline ;	6375:1:226841:226861	55491	2	True				
ANR	55503	IdentifierDecl	dummy_opline		55491	0					
ANR	55504	IdentifierDeclType	zend_op		55491	0					
ANR	55505	Identifier	dummy_opline		55491	1					
ANR	55506	IfStatement	if ( variable )		55491	3					
ANR	55507	Condition	variable	6377:5:226869:226876	55491	0	True				
ANR	55508	Identifier	variable		55491	0					
ANR	55509	CompoundStatement		6:15:82:82	55491	1					
ANR	55510	IfStatement	if ( zend_is_function_or_method_call ( array ) )		55491	0					
ANR	55511	Condition	zend_is_function_or_method_call ( array )	6378:6:226887:226924	55491	0	True				
ANR	55512	CallExpression	zend_is_function_or_method_call ( array )		55491	0					
ANR	55513	Callee	zend_is_function_or_method_call		55491	0					
ANR	55514	Identifier	zend_is_function_or_method_call		55491	0					
ANR	55515	ArgumentList	array		55491	1					
ANR	55516	Argument	array		55491	0					
ANR	55517	Identifier	array		55491	0					
ANR	55518	CompoundStatement		7:46:130:130	55491	1					
ANR	55519	ExpressionStatement	is_variable = 0	6379:3:226932:226947	55491	0	True				
ANR	55520	AssignmentExpression	is_variable = 0		55491	0		=			
ANR	55521	Identifier	is_variable		55491	0					
ANR	55522	PrimaryExpression	0		55491	1					
ANR	55523	ElseStatement	else		55491	0					
ANR	55524	CompoundStatement		9:9:161:161	55491	0					
ANR	55525	ExpressionStatement	is_variable = 1	6381:3:226963:226978	55491	0	True				
ANR	55526	AssignmentExpression	is_variable = 1		55491	0		=			
ANR	55527	Identifier	is_variable		55491	0					
ANR	55528	PrimaryExpression	1		55491	1					
ANR	55529	ExpressionStatement	open_brackets_token -> u . op . opline_num = get_next_op_number ( CG ( active_op_array ) )	6384:2:227038:227116	55491	1	True				
ANR	55530	AssignmentExpression	open_brackets_token -> u . op . opline_num = get_next_op_number ( CG ( active_op_array ) )		55491	0		=			
ANR	55531	MemberAccess	open_brackets_token -> u . op . opline_num		55491	0					
ANR	55532	MemberAccess	open_brackets_token -> u . op		55491	0					
ANR	55533	PtrMemberAccess	open_brackets_token -> u		55491	0					
ANR	55534	Identifier	open_brackets_token		55491	0					
ANR	55535	Identifier	u		55491	1					
ANR	55536	Identifier	op		55491	1					
ANR	55537	Identifier	opline_num		55491	1					
ANR	55538	CallExpression	get_next_op_number ( CG ( active_op_array ) )		55491	1					
ANR	55539	Callee	get_next_op_number		55491	0					
ANR	55540	Identifier	get_next_op_number		55491	0					
ANR	55541	ArgumentList	CG ( active_op_array )		55491	1					
ANR	55542	Argument	CG ( active_op_array )		55491	0					
ANR	55543	CallExpression	CG ( active_op_array )		55491	0					
ANR	55544	Callee	CG		55491	0					
ANR	55545	Identifier	CG		55491	0					
ANR	55546	ArgumentList	active_op_array		55491	1					
ANR	55547	Argument	active_op_array		55491	0					
ANR	55548	Identifier	active_op_array		55491	0					
ANR	55549	Statement	zend_do_end_variable_parse	6385:2:227120:227145	55491	2	True				
ANR	55550	Statement	(	6385:28:227146:227146	55491	3	True				
ANR	55551	Statement	array	6385:29:227147:227151	55491	4	True				
ANR	55552	Statement	","	6385:34:227152:227152	55491	5	True				
ANR	55553	Statement	BP_VAR_W	6385:36:227154:227161	55491	6	True				
ANR	55554	Statement	","	6385:44:227162:227162	55491	7	True				
ANR	55555	Statement	0	6385:46:227164:227164	55491	8	True				
ANR	55556	Statement	TSRMLS_CC	6385:48:227166:227174	55491	9	True				
ANR	55557	Statement	)	6385:57:227175:227175	55491	10	True				
ANR	55558	ExpressionStatement		6385:58:227176:227176	55491	11	True				
ANR	55559	IfStatement	if ( zend_is_function_or_method_call ( array ) )		55491	12					
ANR	55560	Condition	zend_is_function_or_method_call ( array )	6387:6:227185:227222	55491	0	True				
ANR	55561	CallExpression	zend_is_function_or_method_call ( array )		55491	0					
ANR	55562	Callee	zend_is_function_or_method_call		55491	0					
ANR	55563	Identifier	zend_is_function_or_method_call		55491	0					
ANR	55564	ArgumentList	array		55491	1					
ANR	55565	Argument	array		55491	0					
ANR	55566	Identifier	array		55491	0					
ANR	55567	CompoundStatement		16:46:428:428	55491	1					
ANR	55568	Statement	opline	6388:3:227230:227235	55491	0	True				
ANR	55569	Statement	=	6388:10:227237:227237	55491	1	True				
ANR	55570	Statement	get_next_op	6388:12:227239:227249	55491	2	True				
ANR	55571	Statement	(	6388:23:227250:227250	55491	3	True				
ANR	55572	Statement	CG	6388:24:227251:227252	55491	4	True				
ANR	55573	Statement	(	6388:26:227253:227253	55491	5	True				
ANR	55574	Statement	active_op_array	6388:27:227254:227268	55491	6	True				
ANR	55575	Statement	)	6388:42:227269:227269	55491	7	True				
ANR	55576	Statement	TSRMLS_CC	6388:44:227271:227279	55491	8	True				
ANR	55577	Statement	)	6388:53:227280:227280	55491	9	True				
ANR	55578	ExpressionStatement		6388:54:227281:227281	55491	10	True				
ANR	55579	ExpressionStatement	opline -> opcode = ZEND_SEPARATE	6389:3:227286:227316	55491	11	True				
ANR	55580	AssignmentExpression	opline -> opcode = ZEND_SEPARATE		55491	0		=			
ANR	55581	PtrMemberAccess	opline -> opcode		55491	0					
ANR	55582	Identifier	opline		55491	0					
ANR	55583	Identifier	opcode		55491	1					
ANR	55584	Identifier	ZEND_SEPARATE		55491	1					
ANR	55585	ExpressionStatement	"SET_NODE ( opline -> op1 , array )"	6390:3:227321:227349	55491	12	True				
ANR	55586	CallExpression	"SET_NODE ( opline -> op1 , array )"		55491	0					
ANR	55587	Callee	SET_NODE		55491	0					
ANR	55588	Identifier	SET_NODE		55491	0					
ANR	55589	ArgumentList	opline -> op1		55491	1					
ANR	55590	Argument	opline -> op1		55491	0					
ANR	55591	PtrMemberAccess	opline -> op1		55491	0					
ANR	55592	Identifier	opline		55491	0					
ANR	55593	Identifier	op1		55491	1					
ANR	55594	Argument	array		55491	1					
ANR	55595	Identifier	array		55491	0					
ANR	55596	ExpressionStatement	SET_UNUSED ( opline -> op2 )	6391:3:227354:227377	55491	13	True				
ANR	55597	CallExpression	SET_UNUSED ( opline -> op2 )		55491	0					
ANR	55598	Callee	SET_UNUSED		55491	0					
ANR	55599	Identifier	SET_UNUSED		55491	0					
ANR	55600	ArgumentList	opline -> op2		55491	1					
ANR	55601	Argument	opline -> op2		55491	0					
ANR	55602	PtrMemberAccess	opline -> op2		55491	0					
ANR	55603	Identifier	opline		55491	0					
ANR	55604	Identifier	op2		55491	1					
ANR	55605	ExpressionStatement	opline -> result_type = IS_VAR	6392:3:227382:227410	55491	14	True				
ANR	55606	AssignmentExpression	opline -> result_type = IS_VAR		55491	0		=			
ANR	55607	PtrMemberAccess	opline -> result_type		55491	0					
ANR	55608	Identifier	opline		55491	0					
ANR	55609	Identifier	result_type		55491	1					
ANR	55610	Identifier	IS_VAR		55491	1					
ANR	55611	ExpressionStatement	opline -> result . var = opline -> op1 . var	6393:3:227415:227451	55491	15	True				
ANR	55612	AssignmentExpression	opline -> result . var = opline -> op1 . var		55491	0		=			
ANR	55613	MemberAccess	opline -> result . var		55491	0					
ANR	55614	PtrMemberAccess	opline -> result		55491	0					
ANR	55615	Identifier	opline		55491	0					
ANR	55616	Identifier	result		55491	1					
ANR	55617	Identifier	var		55491	1					
ANR	55618	MemberAccess	opline -> op1 . var		55491	1					
ANR	55619	PtrMemberAccess	opline -> op1		55491	0					
ANR	55620	Identifier	opline		55491	0					
ANR	55621	Identifier	op1		55491	1					
ANR	55622	Identifier	var		55491	1					
ANR	55623	ElseStatement	else		55491	0					
ANR	55624	CompoundStatement		24:8:668:668	55491	0					
ANR	55625	ExpressionStatement	is_variable = 0	6396:2:227469:227484	55491	0	True				
ANR	55626	AssignmentExpression	is_variable = 0		55491	0		=			
ANR	55627	Identifier	is_variable		55491	0					
ANR	55628	PrimaryExpression	0		55491	1					
ANR	55629	ExpressionStatement	open_brackets_token -> u . op . opline_num = get_next_op_number ( CG ( active_op_array ) )	6397:2:227488:227566	55491	1	True				
ANR	55630	AssignmentExpression	open_brackets_token -> u . op . opline_num = get_next_op_number ( CG ( active_op_array ) )		55491	0		=			
ANR	55631	MemberAccess	open_brackets_token -> u . op . opline_num		55491	0					
ANR	55632	MemberAccess	open_brackets_token -> u . op		55491	0					
ANR	55633	PtrMemberAccess	open_brackets_token -> u		55491	0					
ANR	55634	Identifier	open_brackets_token		55491	0					
ANR	55635	Identifier	u		55491	1					
ANR	55636	Identifier	op		55491	1					
ANR	55637	Identifier	opline_num		55491	1					
ANR	55638	CallExpression	get_next_op_number ( CG ( active_op_array ) )		55491	1					
ANR	55639	Callee	get_next_op_number		55491	0					
ANR	55640	Identifier	get_next_op_number		55491	0					
ANR	55641	ArgumentList	CG ( active_op_array )		55491	1					
ANR	55642	Argument	CG ( active_op_array )		55491	0					
ANR	55643	CallExpression	CG ( active_op_array )		55491	0					
ANR	55644	Callee	CG		55491	0					
ANR	55645	Identifier	CG		55491	0					
ANR	55646	ArgumentList	active_op_array		55491	1					
ANR	55647	Argument	active_op_array		55491	0					
ANR	55648	Identifier	active_op_array		55491	0					
ANR	55649	ExpressionStatement	foreach_token -> u . op . opline_num = get_next_op_number ( CG ( active_op_array ) )	6401:1:227610:227682	55491	4	True				
ANR	55650	AssignmentExpression	foreach_token -> u . op . opline_num = get_next_op_number ( CG ( active_op_array ) )		55491	0		=			
ANR	55651	MemberAccess	foreach_token -> u . op . opline_num		55491	0					
ANR	55652	MemberAccess	foreach_token -> u . op		55491	0					
ANR	55653	PtrMemberAccess	foreach_token -> u		55491	0					
ANR	55654	Identifier	foreach_token		55491	0					
ANR	55655	Identifier	u		55491	1					
ANR	55656	Identifier	op		55491	1					
ANR	55657	Identifier	opline_num		55491	1					
ANR	55658	CallExpression	get_next_op_number ( CG ( active_op_array ) )		55491	1					
ANR	55659	Callee	get_next_op_number		55491	0					
ANR	55660	Identifier	get_next_op_number		55491	0					
ANR	55661	ArgumentList	CG ( active_op_array )		55491	1					
ANR	55662	Argument	CG ( active_op_array )		55491	0					
ANR	55663	CallExpression	CG ( active_op_array )		55491	0					
ANR	55664	Callee	CG		55491	0					
ANR	55665	Identifier	CG		55491	0					
ANR	55666	ArgumentList	active_op_array		55491	1					
ANR	55667	Argument	active_op_array		55491	0					
ANR	55668	Identifier	active_op_array		55491	0					
ANR	55669	Statement	opline	6403:1:227686:227691	55491	5	True				
ANR	55670	Statement	=	6403:8:227693:227693	55491	6	True				
ANR	55671	Statement	get_next_op	6403:10:227695:227705	55491	7	True				
ANR	55672	Statement	(	6403:21:227706:227706	55491	8	True				
ANR	55673	Statement	CG	6403:22:227707:227708	55491	9	True				
ANR	55674	Statement	(	6403:24:227709:227709	55491	10	True				
ANR	55675	Statement	active_op_array	6403:25:227710:227724	55491	11	True				
ANR	55676	Statement	)	6403:40:227725:227725	55491	12	True				
ANR	55677	Statement	TSRMLS_CC	6403:42:227727:227735	55491	13	True				
ANR	55678	Statement	)	6403:51:227736:227736	55491	14	True				
ANR	55679	ExpressionStatement		6403:52:227737:227737	55491	15	True				
ANR	55680	ExpressionStatement	opline -> opcode = ZEND_FE_RESET	6406:1:227768:227798	55491	16	True				
ANR	55681	AssignmentExpression	opline -> opcode = ZEND_FE_RESET		55491	0		=			
ANR	55682	PtrMemberAccess	opline -> opcode		55491	0					
ANR	55683	Identifier	opline		55491	0					
ANR	55684	Identifier	opcode		55491	1					
ANR	55685	Identifier	ZEND_FE_RESET		55491	1					
ANR	55686	ExpressionStatement	opline -> result_type = IS_VAR	6407:1:227801:227829	55491	17	True				
ANR	55687	AssignmentExpression	opline -> result_type = IS_VAR		55491	0		=			
ANR	55688	PtrMemberAccess	opline -> result_type		55491	0					
ANR	55689	Identifier	opline		55491	0					
ANR	55690	Identifier	result_type		55491	1					
ANR	55691	Identifier	IS_VAR		55491	1					
ANR	55692	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6408:1:227832:227896	55491	18	True				
ANR	55693	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		55491	0		=			
ANR	55694	MemberAccess	opline -> result . var		55491	0					
ANR	55695	PtrMemberAccess	opline -> result		55491	0					
ANR	55696	Identifier	opline		55491	0					
ANR	55697	Identifier	result		55491	1					
ANR	55698	Identifier	var		55491	1					
ANR	55699	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		55491	1					
ANR	55700	Callee	get_temporary_variable		55491	0					
ANR	55701	Identifier	get_temporary_variable		55491	0					
ANR	55702	ArgumentList	CG ( active_op_array )		55491	1					
ANR	55703	Argument	CG ( active_op_array )		55491	0					
ANR	55704	CallExpression	CG ( active_op_array )		55491	0					
ANR	55705	Callee	CG		55491	0					
ANR	55706	Identifier	CG		55491	0					
ANR	55707	ArgumentList	active_op_array		55491	1					
ANR	55708	Argument	active_op_array		55491	0					
ANR	55709	Identifier	active_op_array		55491	0					
ANR	55710	ExpressionStatement	"SET_NODE ( opline -> op1 , array )"	6409:1:227899:227927	55491	19	True				
ANR	55711	CallExpression	"SET_NODE ( opline -> op1 , array )"		55491	0					
ANR	55712	Callee	SET_NODE		55491	0					
ANR	55713	Identifier	SET_NODE		55491	0					
ANR	55714	ArgumentList	opline -> op1		55491	1					
ANR	55715	Argument	opline -> op1		55491	0					
ANR	55716	PtrMemberAccess	opline -> op1		55491	0					
ANR	55717	Identifier	opline		55491	0					
ANR	55718	Identifier	op1		55491	1					
ANR	55719	Argument	array		55491	1					
ANR	55720	Identifier	array		55491	0					
ANR	55721	ExpressionStatement	SET_UNUSED ( opline -> op2 )	6410:1:227930:227953	55491	20	True				
ANR	55722	CallExpression	SET_UNUSED ( opline -> op2 )		55491	0					
ANR	55723	Callee	SET_UNUSED		55491	0					
ANR	55724	Identifier	SET_UNUSED		55491	0					
ANR	55725	ArgumentList	opline -> op2		55491	1					
ANR	55726	Argument	opline -> op2		55491	0					
ANR	55727	PtrMemberAccess	opline -> op2		55491	0					
ANR	55728	Identifier	opline		55491	0					
ANR	55729	Identifier	op2		55491	1					
ANR	55730	ExpressionStatement	opline -> extended_value = is_variable ? ZEND_FE_RESET_VARIABLE : 0	6411:1:227956:228021	55491	21	True				
ANR	55731	AssignmentExpression	opline -> extended_value = is_variable ? ZEND_FE_RESET_VARIABLE : 0		55491	0		=			
ANR	55732	PtrMemberAccess	opline -> extended_value		55491	0					
ANR	55733	Identifier	opline		55491	0					
ANR	55734	Identifier	extended_value		55491	1					
ANR	55735	ConditionalExpression	is_variable ? ZEND_FE_RESET_VARIABLE : 0		55491	1					
ANR	55736	Condition	is_variable		55491	0					
ANR	55737	Identifier	is_variable		55491	0					
ANR	55738	Identifier	ZEND_FE_RESET_VARIABLE		55491	1					
ANR	55739	PrimaryExpression	0		55491	2					
ANR	55740	ExpressionStatement	"COPY_NODE ( dummy_opline . result , opline -> result )"	6413:1:228025:228071	55491	22	True				
ANR	55741	CallExpression	"COPY_NODE ( dummy_opline . result , opline -> result )"		55491	0					
ANR	55742	Callee	COPY_NODE		55491	0					
ANR	55743	Identifier	COPY_NODE		55491	0					
ANR	55744	ArgumentList	dummy_opline . result		55491	1					
ANR	55745	Argument	dummy_opline . result		55491	0					
ANR	55746	MemberAccess	dummy_opline . result		55491	0					
ANR	55747	Identifier	dummy_opline		55491	0					
ANR	55748	Identifier	result		55491	1					
ANR	55749	Argument	opline -> result		55491	1					
ANR	55750	PtrMemberAccess	opline -> result		55491	0					
ANR	55751	Identifier	opline		55491	0					
ANR	55752	Identifier	result		55491	1					
ANR	55753	ExpressionStatement	"zend_stack_push ( & CG ( foreach_copy_stack ) , ( void * ) & dummy_opline , sizeof ( zend_op ) )"	6414:1:228074:228155	55491	23	True				
ANR	55754	CallExpression	"zend_stack_push ( & CG ( foreach_copy_stack ) , ( void * ) & dummy_opline , sizeof ( zend_op ) )"		55491	0					
ANR	55755	Callee	zend_stack_push		55491	0					
ANR	55756	Identifier	zend_stack_push		55491	0					
ANR	55757	ArgumentList	& CG ( foreach_copy_stack )		55491	1					
ANR	55758	Argument	& CG ( foreach_copy_stack )		55491	0					
ANR	55759	UnaryOperationExpression	& CG ( foreach_copy_stack )		55491	0					
ANR	55760	UnaryOperator	&		55491	0					
ANR	55761	CallExpression	CG ( foreach_copy_stack )		55491	1					
ANR	55762	Callee	CG		55491	0					
ANR	55763	Identifier	CG		55491	0					
ANR	55764	ArgumentList	foreach_copy_stack		55491	1					
ANR	55765	Argument	foreach_copy_stack		55491	0					
ANR	55766	Identifier	foreach_copy_stack		55491	0					
ANR	55767	Argument	( void * ) & dummy_opline		55491	1					
ANR	55768	CastExpression	( void * ) & dummy_opline		55491	0					
ANR	55769	CastTarget	void *		55491	0					
ANR	55770	UnaryOperationExpression	& dummy_opline		55491	1					
ANR	55771	UnaryOperator	&		55491	0					
ANR	55772	Identifier	dummy_opline		55491	1					
ANR	55773	Argument	sizeof ( zend_op )		55491	2					
ANR	55774	SizeofExpression	sizeof ( zend_op )		55491	0					
ANR	55775	Sizeof	sizeof		55491	0					
ANR	55776	SizeofOperand	zend_op		55491	1					
ANR	55777	ExpressionStatement	as_token -> u . op . opline_num = get_next_op_number ( CG ( active_op_array ) )	6417:1:228196:228263	55491	24	True				
ANR	55778	AssignmentExpression	as_token -> u . op . opline_num = get_next_op_number ( CG ( active_op_array ) )		55491	0		=			
ANR	55779	MemberAccess	as_token -> u . op . opline_num		55491	0					
ANR	55780	MemberAccess	as_token -> u . op		55491	0					
ANR	55781	PtrMemberAccess	as_token -> u		55491	0					
ANR	55782	Identifier	as_token		55491	0					
ANR	55783	Identifier	u		55491	1					
ANR	55784	Identifier	op		55491	1					
ANR	55785	Identifier	opline_num		55491	1					
ANR	55786	CallExpression	get_next_op_number ( CG ( active_op_array ) )		55491	1					
ANR	55787	Callee	get_next_op_number		55491	0					
ANR	55788	Identifier	get_next_op_number		55491	0					
ANR	55789	ArgumentList	CG ( active_op_array )		55491	1					
ANR	55790	Argument	CG ( active_op_array )		55491	0					
ANR	55791	CallExpression	CG ( active_op_array )		55491	0					
ANR	55792	Callee	CG		55491	0					
ANR	55793	Identifier	CG		55491	0					
ANR	55794	ArgumentList	active_op_array		55491	1					
ANR	55795	Argument	active_op_array		55491	0					
ANR	55796	Identifier	active_op_array		55491	0					
ANR	55797	Statement	opline	6419:1:228267:228272	55491	25	True				
ANR	55798	Statement	=	6419:8:228274:228274	55491	26	True				
ANR	55799	Statement	get_next_op	6419:10:228276:228286	55491	27	True				
ANR	55800	Statement	(	6419:21:228287:228287	55491	28	True				
ANR	55801	Statement	CG	6419:22:228288:228289	55491	29	True				
ANR	55802	Statement	(	6419:24:228290:228290	55491	30	True				
ANR	55803	Statement	active_op_array	6419:25:228291:228305	55491	31	True				
ANR	55804	Statement	)	6419:40:228306:228306	55491	32	True				
ANR	55805	Statement	TSRMLS_CC	6419:42:228308:228316	55491	33	True				
ANR	55806	Statement	)	6419:51:228317:228317	55491	34	True				
ANR	55807	ExpressionStatement		6419:52:228318:228318	55491	35	True				
ANR	55808	ExpressionStatement	opline -> opcode = ZEND_FE_FETCH	6420:1:228321:228351	55491	36	True				
ANR	55809	AssignmentExpression	opline -> opcode = ZEND_FE_FETCH		55491	0		=			
ANR	55810	PtrMemberAccess	opline -> opcode		55491	0					
ANR	55811	Identifier	opline		55491	0					
ANR	55812	Identifier	opcode		55491	1					
ANR	55813	Identifier	ZEND_FE_FETCH		55491	1					
ANR	55814	ExpressionStatement	opline -> result_type = IS_VAR	6421:1:228354:228382	55491	37	True				
ANR	55815	AssignmentExpression	opline -> result_type = IS_VAR		55491	0		=			
ANR	55816	PtrMemberAccess	opline -> result_type		55491	0					
ANR	55817	Identifier	opline		55491	0					
ANR	55818	Identifier	result_type		55491	1					
ANR	55819	Identifier	IS_VAR		55491	1					
ANR	55820	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6422:1:228385:228449	55491	38	True				
ANR	55821	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		55491	0		=			
ANR	55822	MemberAccess	opline -> result . var		55491	0					
ANR	55823	PtrMemberAccess	opline -> result		55491	0					
ANR	55824	Identifier	opline		55491	0					
ANR	55825	Identifier	result		55491	1					
ANR	55826	Identifier	var		55491	1					
ANR	55827	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		55491	1					
ANR	55828	Callee	get_temporary_variable		55491	0					
ANR	55829	Identifier	get_temporary_variable		55491	0					
ANR	55830	ArgumentList	CG ( active_op_array )		55491	1					
ANR	55831	Argument	CG ( active_op_array )		55491	0					
ANR	55832	CallExpression	CG ( active_op_array )		55491	0					
ANR	55833	Callee	CG		55491	0					
ANR	55834	Identifier	CG		55491	0					
ANR	55835	ArgumentList	active_op_array		55491	1					
ANR	55836	Argument	active_op_array		55491	0					
ANR	55837	Identifier	active_op_array		55491	0					
ANR	55838	ExpressionStatement	"COPY_NODE ( opline -> op1 , dummy_opline . result )"	6423:1:228452:228495	55491	39	True				
ANR	55839	CallExpression	"COPY_NODE ( opline -> op1 , dummy_opline . result )"		55491	0					
ANR	55840	Callee	COPY_NODE		55491	0					
ANR	55841	Identifier	COPY_NODE		55491	0					
ANR	55842	ArgumentList	opline -> op1		55491	1					
ANR	55843	Argument	opline -> op1		55491	0					
ANR	55844	PtrMemberAccess	opline -> op1		55491	0					
ANR	55845	Identifier	opline		55491	0					
ANR	55846	Identifier	op1		55491	1					
ANR	55847	Argument	dummy_opline . result		55491	1					
ANR	55848	MemberAccess	dummy_opline . result		55491	0					
ANR	55849	Identifier	dummy_opline		55491	0					
ANR	55850	Identifier	result		55491	1					
ANR	55851	ExpressionStatement	opline -> extended_value = 0	6424:1:228498:228524	55491	40	True				
ANR	55852	AssignmentExpression	opline -> extended_value = 0		55491	0		=			
ANR	55853	PtrMemberAccess	opline -> extended_value		55491	0					
ANR	55854	Identifier	opline		55491	0					
ANR	55855	Identifier	extended_value		55491	1					
ANR	55856	PrimaryExpression	0		55491	1					
ANR	55857	ExpressionStatement	SET_UNUSED ( opline -> op2 )	6425:1:228527:228550	55491	41	True				
ANR	55858	CallExpression	SET_UNUSED ( opline -> op2 )		55491	0					
ANR	55859	Callee	SET_UNUSED		55491	0					
ANR	55860	Identifier	SET_UNUSED		55491	0					
ANR	55861	ArgumentList	opline -> op2		55491	1					
ANR	55862	Argument	opline -> op2		55491	0					
ANR	55863	PtrMemberAccess	opline -> op2		55491	0					
ANR	55864	Identifier	opline		55491	0					
ANR	55865	Identifier	op2		55491	1					
ANR	55866	Statement	opline	6427:1:228554:228559	55491	42	True				
ANR	55867	Statement	=	6427:8:228561:228561	55491	43	True				
ANR	55868	Statement	get_next_op	6427:10:228563:228573	55491	44	True				
ANR	55869	Statement	(	6427:21:228574:228574	55491	45	True				
ANR	55870	Statement	CG	6427:22:228575:228576	55491	46	True				
ANR	55871	Statement	(	6427:24:228577:228577	55491	47	True				
ANR	55872	Statement	active_op_array	6427:25:228578:228592	55491	48	True				
ANR	55873	Statement	)	6427:40:228593:228593	55491	49	True				
ANR	55874	Statement	TSRMLS_CC	6427:42:228595:228603	55491	50	True				
ANR	55875	Statement	)	6427:51:228604:228604	55491	51	True				
ANR	55876	ExpressionStatement		6427:52:228605:228605	55491	52	True				
ANR	55877	ExpressionStatement	opline -> opcode = ZEND_OP_DATA	6428:1:228608:228637	55491	53	True				
ANR	55878	AssignmentExpression	opline -> opcode = ZEND_OP_DATA		55491	0		=			
ANR	55879	PtrMemberAccess	opline -> opcode		55491	0					
ANR	55880	Identifier	opline		55491	0					
ANR	55881	Identifier	opcode		55491	1					
ANR	55882	Identifier	ZEND_OP_DATA		55491	1					
ANR	55883	ExpressionStatement	SET_UNUSED ( opline -> op1 )	6429:1:228640:228663	55491	54	True				
ANR	55884	CallExpression	SET_UNUSED ( opline -> op1 )		55491	0					
ANR	55885	Callee	SET_UNUSED		55491	0					
ANR	55886	Identifier	SET_UNUSED		55491	0					
ANR	55887	ArgumentList	opline -> op1		55491	1					
ANR	55888	Argument	opline -> op1		55491	0					
ANR	55889	PtrMemberAccess	opline -> op1		55491	0					
ANR	55890	Identifier	opline		55491	0					
ANR	55891	Identifier	op1		55491	1					
ANR	55892	ExpressionStatement	SET_UNUSED ( opline -> op2 )	6430:1:228666:228689	55491	55	True				
ANR	55893	CallExpression	SET_UNUSED ( opline -> op2 )		55491	0					
ANR	55894	Callee	SET_UNUSED		55491	0					
ANR	55895	Identifier	SET_UNUSED		55491	0					
ANR	55896	ArgumentList	opline -> op2		55491	1					
ANR	55897	Argument	opline -> op2		55491	0					
ANR	55898	PtrMemberAccess	opline -> op2		55491	0					
ANR	55899	Identifier	opline		55491	0					
ANR	55900	Identifier	op2		55491	1					
ANR	55901	ExpressionStatement	SET_UNUSED ( opline -> result )	6431:1:228692:228718	55491	56	True				
ANR	55902	CallExpression	SET_UNUSED ( opline -> result )		55491	0					
ANR	55903	Callee	SET_UNUSED		55491	0					
ANR	55904	Identifier	SET_UNUSED		55491	0					
ANR	55905	ArgumentList	opline -> result		55491	1					
ANR	55906	Argument	opline -> result		55491	0					
ANR	55907	PtrMemberAccess	opline -> result		55491	0					
ANR	55908	Identifier	opline		55491	0					
ANR	55909	Identifier	result		55491	1					
ANR	55910	ReturnType	void		55491	1					
ANR	55911	Identifier	zend_do_foreach_begin		55491	2					
ANR	55912	ParameterList	"znode * foreach_token , znode * open_brackets_token , znode * array , znode * as_token , int variable TSRMLS_DC"		55491	3					
ANR	55913	Parameter	znode * foreach_token	6371:27:226681:226700	55491	0	True				
ANR	55914	ParameterType	znode *		55491	0					
ANR	55915	Identifier	foreach_token		55491	1					
ANR	55916	Parameter	znode * open_brackets_token	6371:49:226703:226728	55491	1	True				
ANR	55917	ParameterType	znode *		55491	0					
ANR	55918	Identifier	open_brackets_token		55491	1					
ANR	55919	Parameter	znode * array	6371:77:226731:226742	55491	2	True				
ANR	55920	ParameterType	znode *		55491	0					
ANR	55921	Identifier	array		55491	1					
ANR	55922	Parameter	znode * as_token	6371:91:226745:226759	55491	3	True				
ANR	55923	ParameterType	znode *		55491	0					
ANR	55924	Identifier	as_token		55491	1					
ANR	55925	Parameter	int variable TSRMLS_DC	6371:108:226762:226783	55491	4	True				
ANR	55926	ParameterType	int variable		55491	0					
ANR	55927	Identifier	TSRMLS_DC		55491	1					
ANR	55928	CFGEntryNode	ENTRY		55491		True				
ANR	55929	CFGExitNode	EXIT		55491		True				
ANR	55930	Symbol	opline -> op1		55491						
ANR	55931	Symbol	opline -> op2		55491						
ANR	55932	Symbol	& dummy_opline		55491						
ANR	55933	Symbol	is_variable		55491						
ANR	55934	Symbol	ZEND_FE_FETCH		55491						
ANR	55935	Symbol	foreach_copy_stack		55491						
ANR	55936	Symbol	as_token -> u . op		55491						
ANR	55937	Symbol	get_temporary_variable		55491						
ANR	55938	Symbol	ZEND_OP_DATA		55491						
ANR	55939	Symbol	* foreach_token		55491						
ANR	55940	Symbol	TSRMLS_DC		55491						
ANR	55941	Symbol	ZEND_FE_RESET_VARIABLE		55491						
ANR	55942	Symbol	foreach_token		55491						
ANR	55943	Symbol	opline -> result		55491						
ANR	55944	Symbol	opline -> extended_value		55491						
ANR	55945	Symbol	& CG		55491						
ANR	55946	Symbol	dummy_opline . result		55491						
ANR	55947	Symbol	opline		55491						
ANR	55948	Symbol	ZEND_SEPARATE		55491						
ANR	55949	Symbol	array		55491						
ANR	55950	Symbol	open_brackets_token -> u		55491						
ANR	55951	Symbol	* open_brackets_token		55491						
ANR	55952	Symbol	opline -> op1 . var		55491						
ANR	55953	Symbol	zend_is_function_or_method_call		55491						
ANR	55954	Symbol	foreach_token -> u . op		55491						
ANR	55955	Symbol	as_token		55491						
ANR	55956	Symbol	foreach_token -> u		55491						
ANR	55957	Symbol	open_brackets_token -> u . op . opline_num		55491						
ANR	55958	Symbol	opline -> result_type		55491						
ANR	55959	Symbol	open_brackets_token -> u . op		55491						
ANR	55960	Symbol	CG		55491						
ANR	55961	Symbol	ZEND_FE_RESET		55491						
ANR	55962	Symbol	active_op_array		55491						
ANR	55963	Symbol	* as_token		55491						
ANR	55964	Symbol	as_token -> u . op . opline_num		55491						
ANR	55965	Symbol	* opline		55491						
ANR	55966	Symbol	open_brackets_token		55491						
ANR	55967	Symbol	opline -> opcode		55491						
ANR	55968	Symbol	variable		55491						
ANR	55969	Symbol	dummy_opline		55491						
ANR	55970	Symbol	foreach_token -> u . op . opline_num		55491						
ANR	55971	Symbol	get_next_op_number		55491						
ANR	55972	Symbol	IS_VAR		55491						
ANR	55973	Symbol	opline -> result . var		55491						
ANR	55974	Symbol	as_token -> u		55491						
ANR	55975	DeclStmt									
ANR	55976	Decl							zend_op	zend_op *	opline
ANR	55977	DeclStmt									
ANR	55978	Decl							znode	znode	dummy
ANR	55979	Decl							znode	znode	value_node
ANR	55980	DeclStmt									
ANR	55981	Decl							zend_bool	zend_bool	assign_by_ref
ANR	55982	DeclStmt									
ANR	55983	Decl							znode	znode *	tmp
ANR	55984	DeclStmt									
ANR	55985	Decl							zend_op	zend_op *	fetch
ANR	55986	DeclStmt									
ANR	55987	Decl							zend_op	zend_op *	end
ANR	55988	DeclStmt									
ANR	55989	Decl							znode	znode	key_node
ANR	55990	DeclStmt									
ANR	55991	Decl							zend_op	zend_op *	container_ptr
ANR	55992	DeclStmt									
ANR	55993	Decl							zend_op	zend_op *	opline
ANR	55994	DeclStmt									
ANR	55995	Decl							int	int	num
ANR	55996	DeclStmt									
ANR	55997	Decl							const zend_encoding	const zend_encoding *	new_encoding
ANR	55998	Decl							const zend_encoding	const zend_encoding *	old_encoding
ANR	55999	DeclStmt									
ANR	56000	Decl							zend_encoding_filter	zend_encoding_filter	old_input_filter
ANR	56001	DeclStmt									
ANR	56002	Decl							zend_declarables	zend_declarables *	declarables
ANR	56003	DeclStmt									
ANR	56004	Decl							zend_op	zend_op *	opline
ANR	56005	DeclStmt									
ANR	56006	Decl							zend_op	zend_op *	opline
ANR	56007	DeclStmt									
ANR	56008	Decl							zend_op	zend_op *	opline
ANR	56009	DeclStmt									
ANR	56010	Decl							int	int	op_number
ANR	56011	DeclStmt									
ANR	56012	Decl							zend_op	zend_op *	opline
ANR	56013	DeclStmt									
ANR	56014	Decl							zend_op	zend_op *	opline
ANR	56015	DeclStmt									
ANR	56016	Decl							int	int	jmpz_op_number
ANR	56017	DeclStmt									
ANR	56018	Decl							zend_op	zend_op *	opline
ANR	56019	DeclStmt									
ANR	56020	Decl							zend_op	zend_op *	opline
ANR	56021	DeclStmt									
ANR	56022	Decl							zend_op	zend_op *	opline
ANR	56023	DeclStmt									
ANR	56024	Decl							zend_op	zend_op *	opline
ANR	56025	DeclStmt									
ANR	56026	Decl							zend_op	zend_op *	opline
ANR	56027	DeclStmt									
ANR	56028	Decl							zend_op	zend_op *	opline
ANR	56029	DeclStmt									
ANR	56030	Decl							zend_op	zend_op *	opline
ANR	56031	Function	zend_is_auto_global_quick	6856:0:241733:242142							
ANR	56032	FunctionDef	"zend_is_auto_global_quick (const char * name , uint name_len , ulong hash TSRMLS_DC)"		56031	0					
ANR	56033	CompoundStatement		6857:0:241834:242142	56031	0					
ANR	56034	IdentifierDeclStatement	zend_auto_global * auto_global ;	6858:1:241837:241866	56031	0	True				
ANR	56035	IdentifierDecl	* auto_global		56031	0					
ANR	56036	IdentifierDeclType	zend_auto_global *		56031	0					
ANR	56037	Identifier	auto_global		56031	1					
ANR	56038	IfStatement	"if ( zend_hash_quick_find ( CG ( auto_globals ) , name , name_len + 1 , hash , ( void * * ) & auto_global ) == SUCCESS )"		56031	1					
ANR	56039	Condition	"zend_hash_quick_find ( CG ( auto_globals ) , name , name_len + 1 , hash , ( void * * ) & auto_global ) == SUCCESS"	6860:5:241874:241968	56031	0	True				
ANR	56040	EqualityExpression	"zend_hash_quick_find ( CG ( auto_globals ) , name , name_len + 1 , hash , ( void * * ) & auto_global ) == SUCCESS"		56031	0		==			
ANR	56041	CallExpression	"zend_hash_quick_find ( CG ( auto_globals ) , name , name_len + 1 , hash , ( void * * ) & auto_global )"		56031	0					
ANR	56042	Callee	zend_hash_quick_find		56031	0					
ANR	56043	Identifier	zend_hash_quick_find		56031	0					
ANR	56044	ArgumentList	CG ( auto_globals )		56031	1					
ANR	56045	Argument	CG ( auto_globals )		56031	0					
ANR	56046	CallExpression	CG ( auto_globals )		56031	0					
ANR	56047	Callee	CG		56031	0					
ANR	56048	Identifier	CG		56031	0					
ANR	56049	ArgumentList	auto_globals		56031	1					
ANR	56050	Argument	auto_globals		56031	0					
ANR	56051	Identifier	auto_globals		56031	0					
ANR	56052	Argument	name		56031	1					
ANR	56053	Identifier	name		56031	0					
ANR	56054	Argument	name_len + 1		56031	2					
ANR	56055	AdditiveExpression	name_len + 1		56031	0		+			
ANR	56056	Identifier	name_len		56031	0					
ANR	56057	PrimaryExpression	1		56031	1					
ANR	56058	Argument	hash		56031	3					
ANR	56059	Identifier	hash		56031	0					
ANR	56060	Argument	( void * * ) & auto_global		56031	4					
ANR	56061	CastExpression	( void * * ) & auto_global		56031	0					
ANR	56062	CastTarget	void * *		56031	0					
ANR	56063	UnaryOperationExpression	& auto_global		56031	1					
ANR	56064	UnaryOperator	&		56031	0					
ANR	56065	Identifier	auto_global		56031	1					
ANR	56066	Identifier	SUCCESS		56031	1					
ANR	56067	CompoundStatement		4:102:136:136	56031	1					
ANR	56068	IfStatement	if ( auto_global -> armed )		56031	0					
ANR	56069	Condition	auto_global -> armed	6861:6:241979:241996	56031	0	True				
ANR	56070	PtrMemberAccess	auto_global -> armed		56031	0					
ANR	56071	Identifier	auto_global		56031	0					
ANR	56072	Identifier	armed		56031	1					
ANR	56073	CompoundStatement		5:26:164:164	56031	1					
ANR	56074	Statement	auto_global	6862:3:242004:242014	56031	0	True				
ANR	56075	Statement	->	6862:14:242015:242016	56031	1	True				
ANR	56076	Statement	armed	6862:16:242017:242021	56031	2	True				
ANR	56077	Statement	=	6862:22:242023:242023	56031	3	True				
ANR	56078	Statement	auto_global	6862:24:242025:242035	56031	4	True				
ANR	56079	Statement	->	6862:35:242036:242037	56031	5	True				
ANR	56080	Statement	auto_global_callback	6862:37:242038:242057	56031	6	True				
ANR	56081	Statement	(	6862:57:242058:242058	56031	7	True				
ANR	56082	Statement	auto_global	6862:58:242059:242069	56031	8	True				
ANR	56083	Statement	->	6862:69:242070:242071	56031	9	True				
ANR	56084	Statement	name	6862:71:242072:242075	56031	10	True				
ANR	56085	Statement	","	6862:75:242076:242076	56031	11	True				
ANR	56086	Statement	auto_global	6862:77:242078:242088	56031	12	True				
ANR	56087	Statement	->	6862:88:242089:242090	56031	13	True				
ANR	56088	Statement	name_len	6862:90:242091:242098	56031	14	True				
ANR	56089	Statement	TSRMLS_CC	6862:99:242100:242108	56031	15	True				
ANR	56090	Statement	)	6862:108:242109:242109	56031	16	True				
ANR	56091	ExpressionStatement		6862:109:242110:242110	56031	17	True				
ANR	56092	ReturnStatement	return 1 ;	6864:2:242118:242126	56031	1	True				
ANR	56093	PrimaryExpression	1		56031	0					
ANR	56094	ReturnStatement	return 0 ;	6866:1:242132:242140	56031	2	True				
ANR	56095	PrimaryExpression	0		56031	0					
ANR	56096	ReturnType	zend_bool		56031	1					
ANR	56097	Identifier	zend_is_auto_global_quick		56031	2					
ANR	56098	ParameterList	"const char * name , uint name_len , ulong hash TSRMLS_DC"		56031	3					
ANR	56099	Parameter	const char * name	6856:36:241769:241784	56031	0	True				
ANR	56100	ParameterType	const char *		56031	0					
ANR	56101	Identifier	name		56031	1					
ANR	56102	Parameter	uint name_len	6856:54:241787:241799	56031	1	True				
ANR	56103	ParameterType	uint		56031	0					
ANR	56104	Identifier	name_len		56031	1					
ANR	56105	Parameter	ulong hash TSRMLS_DC	6856:69:241802:241821	56031	2	True				
ANR	56106	ParameterType	ulong hash		56031	0					
ANR	56107	Identifier	TSRMLS_DC		56031	1					
ANR	56108	CFGEntryNode	ENTRY		56031		True				
ANR	56109	CFGExitNode	EXIT		56031		True				
ANR	56110	Symbol	SUCCESS		56031						
ANR	56111	Symbol	zend_hash_quick_find		56031						
ANR	56112	Symbol	& auto_global		56031						
ANR	56113	Symbol	CG		56031						
ANR	56114	Symbol	* auto_global		56031						
ANR	56115	Symbol	auto_global -> armed		56031						
ANR	56116	Symbol	auto_global		56031						
ANR	56117	Symbol	name		56031						
ANR	56118	Symbol	name_len		56031						
ANR	56119	Symbol	TSRMLS_DC		56031						
ANR	56120	Symbol	hash		56031						
ANR	56121	Symbol	auto_globals		56031						
ANR	56122	Function	zend_is_auto_global	6870:0:242155:242335							
ANR	56123	FunctionDef	"zend_is_auto_global (const char * name , uint name_len TSRMLS_DC)"		56122	0					
ANR	56124	CompoundStatement		6871:0:242238:242335	56122	0					
ANR	56125	Statement	return	6872:1:242241:242246	56122	0	True				
ANR	56126	Statement	zend_is_auto_global_quick	6872:8:242248:242272	56122	1	True				
ANR	56127	Statement	(	6872:33:242273:242273	56122	2	True				
ANR	56128	Statement	name	6872:34:242274:242277	56122	3	True				
ANR	56129	Statement	","	6872:38:242278:242278	56122	4	True				
ANR	56130	Statement	name_len	6872:40:242280:242287	56122	5	True				
ANR	56131	Statement	","	6872:48:242288:242288	56122	6	True				
ANR	56132	Statement	zend_hash_func	6872:50:242290:242303	56122	7	True				
ANR	56133	Statement	(	6872:64:242304:242304	56122	8	True				
ANR	56134	Statement	name	6872:65:242305:242308	56122	9	True				
ANR	56135	Statement	","	6872:69:242309:242309	56122	10	True				
ANR	56136	Statement	name_len	6872:71:242311:242318	56122	11	True				
ANR	56137	Statement	+	6872:79:242319:242319	56122	12	True				
ANR	56138	Statement	1	6872:80:242320:242320	56122	13	True				
ANR	56139	Statement	)	6872:81:242321:242321	56122	14	True				
ANR	56140	Statement	TSRMLS_CC	6872:83:242323:242331	56122	15	True				
ANR	56141	Statement	)	6872:92:242332:242332	56122	16	True				
ANR	56142	ExpressionStatement		6872:93:242333:242333	56122	17	True				
ANR	56143	ReturnType	zend_bool		56122	1					
ANR	56144	Identifier	zend_is_auto_global		56122	2					
ANR	56145	ParameterList	"const char * name , uint name_len TSRMLS_DC"		56122	3					
ANR	56146	Parameter	const char * name	6870:30:242185:242200	56122	0	True				
ANR	56147	ParameterType	const char *		56122	0					
ANR	56148	Identifier	name		56122	1					
ANR	56149	Parameter	uint name_len TSRMLS_DC	6870:48:242203:242225	56122	1	True				
ANR	56150	ParameterType	uint name_len		56122	0					
ANR	56151	Identifier	TSRMLS_DC		56122	1					
ANR	56152	CFGEntryNode	ENTRY		56122		True				
ANR	56153	CFGExitNode	EXIT		56122		True				
ANR	56154	Symbol	name		56122						
ANR	56155	Symbol	TSRMLS_DC		56122						
ANR	56156	Function	zend_register_auto_global	6876:0:242348:242836							
ANR	56157	FunctionDef	"zend_register_auto_global (const char * name , uint name_len , zend_bool jit , zend_auto_global_callback auto_global_callback TSRMLS_DC)"		56156	0					
ANR	56158	CompoundStatement		6877:0:242494:242836	56156	0					
ANR	56159	IdentifierDeclStatement	zend_auto_global auto_global ;	6878:1:242497:242525	56156	0	True				
ANR	56160	IdentifierDecl	auto_global		56156	0					
ANR	56161	IdentifierDeclType	zend_auto_global		56156	0					
ANR	56162	Identifier	auto_global		56156	1					
ANR	56163	Statement	auto_global	6880:1:242529:242539	56156	1	True				
ANR	56164	Statement	.	6880:12:242540:242540	56156	2	True				
ANR	56165	Statement	name	6880:13:242541:242544	56156	3	True				
ANR	56166	Statement	=	6880:18:242546:242546	56156	4	True				
ANR	56167	Statement	zend_new_interned_string	6880:20:242548:242571	56156	5	True				
ANR	56168	Statement	(	6880:44:242572:242572	56156	6	True				
ANR	56169	Statement	(	6880:45:242573:242573	56156	7	True				
ANR	56170	Statement	char	6880:46:242574:242577	56156	8	True				
ANR	56171	Statement	*	6880:50:242578:242578	56156	9	True				
ANR	56172	Statement	)	6880:51:242579:242579	56156	10	True				
ANR	56173	Statement	name	6880:52:242580:242583	56156	11	True				
ANR	56174	Statement	","	6880:56:242584:242584	56156	12	True				
ANR	56175	Statement	name_len	6880:58:242586:242593	56156	13	True				
ANR	56176	Statement	+	6880:67:242595:242595	56156	14	True				
ANR	56177	Statement	1	6880:69:242597:242597	56156	15	True				
ANR	56178	Statement	","	6880:70:242598:242598	56156	16	True				
ANR	56179	Statement	0	6880:72:242600:242600	56156	17	True				
ANR	56180	Statement	TSRMLS_CC	6880:74:242602:242610	56156	18	True				
ANR	56181	Statement	)	6880:83:242611:242611	56156	19	True				
ANR	56182	ExpressionStatement		6880:84:242612:242612	56156	20	True				
ANR	56183	ExpressionStatement	auto_global . name_len = name_len	6881:1:242615:242646	56156	21	True				
ANR	56184	AssignmentExpression	auto_global . name_len = name_len		56156	0		=			
ANR	56185	MemberAccess	auto_global . name_len		56156	0					
ANR	56186	Identifier	auto_global		56156	0					
ANR	56187	Identifier	name_len		56156	1					
ANR	56188	Identifier	name_len		56156	1					
ANR	56189	ExpressionStatement	auto_global . auto_global_callback = auto_global_callback	6882:1:242649:242704	56156	22	True				
ANR	56190	AssignmentExpression	auto_global . auto_global_callback = auto_global_callback		56156	0		=			
ANR	56191	MemberAccess	auto_global . auto_global_callback		56156	0					
ANR	56192	Identifier	auto_global		56156	0					
ANR	56193	Identifier	auto_global_callback		56156	1					
ANR	56194	Identifier	auto_global_callback		56156	1					
ANR	56195	ExpressionStatement	auto_global . jit = jit	6883:1:242707:242728	56156	23	True				
ANR	56196	AssignmentExpression	auto_global . jit = jit		56156	0		=			
ANR	56197	MemberAccess	auto_global . jit		56156	0					
ANR	56198	Identifier	auto_global		56156	0					
ANR	56199	Identifier	jit		56156	1					
ANR	56200	Identifier	jit		56156	1					
ANR	56201	ReturnStatement	"return zend_hash_add ( CG ( auto_globals ) , name , name_len + 1 , & auto_global , sizeof ( zend_auto_global ) , NULL ) ;"	6885:1:242732:242834	56156	24	True				
ANR	56202	CallExpression	"zend_hash_add ( CG ( auto_globals ) , name , name_len + 1 , & auto_global , sizeof ( zend_auto_global ) , NULL )"		56156	0					
ANR	56203	Callee	zend_hash_add		56156	0					
ANR	56204	Identifier	zend_hash_add		56156	0					
ANR	56205	ArgumentList	CG ( auto_globals )		56156	1					
ANR	56206	Argument	CG ( auto_globals )		56156	0					
ANR	56207	CallExpression	CG ( auto_globals )		56156	0					
ANR	56208	Callee	CG		56156	0					
ANR	56209	Identifier	CG		56156	0					
ANR	56210	ArgumentList	auto_globals		56156	1					
ANR	56211	Argument	auto_globals		56156	0					
ANR	56212	Identifier	auto_globals		56156	0					
ANR	56213	Argument	name		56156	1					
ANR	56214	Identifier	name		56156	0					
ANR	56215	Argument	name_len + 1		56156	2					
ANR	56216	AdditiveExpression	name_len + 1		56156	0		+			
ANR	56217	Identifier	name_len		56156	0					
ANR	56218	PrimaryExpression	1		56156	1					
ANR	56219	Argument	& auto_global		56156	3					
ANR	56220	UnaryOperationExpression	& auto_global		56156	0					
ANR	56221	UnaryOperator	&		56156	0					
ANR	56222	Identifier	auto_global		56156	1					
ANR	56223	Argument	sizeof ( zend_auto_global )		56156	4					
ANR	56224	SizeofExpression	sizeof ( zend_auto_global )		56156	0					
ANR	56225	Sizeof	sizeof		56156	0					
ANR	56226	SizeofOperand	zend_auto_global		56156	1					
ANR	56227	Argument	NULL		56156	5					
ANR	56228	Identifier	NULL		56156	0					
ANR	56229	ReturnType	int		56156	1					
ANR	56230	Identifier	zend_register_auto_global		56156	2					
ANR	56231	ParameterList	"const char * name , uint name_len , zend_bool jit , zend_auto_global_callback auto_global_callback TSRMLS_DC"		56156	3					
ANR	56232	Parameter	const char * name	6876:30:242378:242393	56156	0	True				
ANR	56233	ParameterType	const char *		56156	0					
ANR	56234	Identifier	name		56156	1					
ANR	56235	Parameter	uint name_len	6876:48:242396:242408	56156	1	True				
ANR	56236	ParameterType	uint		56156	0					
ANR	56237	Identifier	name_len		56156	1					
ANR	56238	Parameter	zend_bool jit	6876:63:242411:242423	56156	2	True				
ANR	56239	ParameterType	zend_bool		56156	0					
ANR	56240	Identifier	jit		56156	1					
ANR	56241	Parameter	zend_auto_global_callback auto_global_callback TSRMLS_DC	6876:78:242426:242481	56156	3	True				
ANR	56242	ParameterType	zend_auto_global_callback auto_global_callback		56156	0					
ANR	56243	Identifier	TSRMLS_DC		56156	1					
ANR	56244	CFGEntryNode	ENTRY		56156		True				
ANR	56245	CFGExitNode	EXIT		56156		True				
ANR	56246	Symbol	auto_global . name_len		56156						
ANR	56247	Symbol	NULL		56156						
ANR	56248	Symbol	& auto_global		56156						
ANR	56249	Symbol	CG		56156						
ANR	56250	Symbol	auto_global		56156						
ANR	56251	Symbol	TSRMLS_DC		56156						
ANR	56252	Symbol	auto_global . auto_global_callback		56156						
ANR	56253	Symbol	auto_globals		56156						
ANR	56254	Symbol	auto_global_callback		56156						
ANR	56255	Symbol	jit		56156						
ANR	56256	Symbol	auto_global . jit		56156						
ANR	56257	Symbol	zend_hash_add		56156						
ANR	56258	Symbol	name		56156						
ANR	56259	Symbol	name_len		56156						
ANR	56260	DeclStmt									
ANR	56261	Decl							int	int	retval
ANR	56262	Function	zend_initialize_class_data	6947:0:244128:246459							
ANR	56263	FunctionDef	"zend_initialize_class_data (zend_class_entry * ce , zend_bool nullify_handlers TSRMLS_DC)"		56262	0					
ANR	56264	CompoundStatement		6948:0:244239:246459	56262	0					
ANR	56265	IdentifierDeclStatement	zend_bool persistent_hashes = ( ce -> type == ZEND_INTERNAL_CLASS ) ? 1 : 0 ;	6949:1:244242:244313	56262	0	True				
ANR	56266	IdentifierDecl	persistent_hashes = ( ce -> type == ZEND_INTERNAL_CLASS ) ? 1 : 0		56262	0					
ANR	56267	IdentifierDeclType	zend_bool		56262	0					
ANR	56268	Identifier	persistent_hashes		56262	1					
ANR	56269	AssignmentExpression	persistent_hashes = ( ce -> type == ZEND_INTERNAL_CLASS ) ? 1 : 0		56262	2		=			
ANR	56270	Identifier	persistent_hashes		56262	0					
ANR	56271	ConditionalExpression	( ce -> type == ZEND_INTERNAL_CLASS ) ? 1 : 0		56262	1					
ANR	56272	Condition	ce -> type == ZEND_INTERNAL_CLASS		56262	0					
ANR	56273	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		56262	0		==			
ANR	56274	PtrMemberAccess	ce -> type		56262	0					
ANR	56275	Identifier	ce		56262	0					
ANR	56276	Identifier	type		56262	1					
ANR	56277	Identifier	ZEND_INTERNAL_CLASS		56262	1					
ANR	56278	PrimaryExpression	1		56262	1					
ANR	56279	PrimaryExpression	0		56262	2					
ANR	56280	IdentifierDeclStatement	dtor_func_t zval_ptr_dtor_func = ( ( persistent_hashes ) ? ZVAL_INTERNAL_PTR_DTOR : ZVAL_PTR_DTOR ) ;	6950:1:244316:244411	56262	1	True				
ANR	56281	IdentifierDecl	zval_ptr_dtor_func = ( ( persistent_hashes ) ? ZVAL_INTERNAL_PTR_DTOR : ZVAL_PTR_DTOR )		56262	0					
ANR	56282	IdentifierDeclType	dtor_func_t		56262	0					
ANR	56283	Identifier	zval_ptr_dtor_func		56262	1					
ANR	56284	AssignmentExpression	zval_ptr_dtor_func = ( ( persistent_hashes ) ? ZVAL_INTERNAL_PTR_DTOR : ZVAL_PTR_DTOR )		56262	2		=			
ANR	56285	Identifier	zval_ptr_dtor_func		56262	0					
ANR	56286	ConditionalExpression	( persistent_hashes ) ? ZVAL_INTERNAL_PTR_DTOR : ZVAL_PTR_DTOR		56262	1					
ANR	56287	Condition	persistent_hashes		56262	0					
ANR	56288	Identifier	persistent_hashes		56262	0					
ANR	56289	Identifier	ZVAL_INTERNAL_PTR_DTOR		56262	1					
ANR	56290	Identifier	ZVAL_PTR_DTOR		56262	2					
ANR	56291	ExpressionStatement	ce -> refcount = 1	6952:1:244415:244431	56262	2	True				
ANR	56292	AssignmentExpression	ce -> refcount = 1		56262	0		=			
ANR	56293	PtrMemberAccess	ce -> refcount		56262	0					
ANR	56294	Identifier	ce		56262	0					
ANR	56295	Identifier	refcount		56262	1					
ANR	56296	PrimaryExpression	1		56262	1					
ANR	56297	ExpressionStatement	ce -> ce_flags = 0	6953:1:244434:244450	56262	3	True				
ANR	56298	AssignmentExpression	ce -> ce_flags = 0		56262	0		=			
ANR	56299	PtrMemberAccess	ce -> ce_flags		56262	0					
ANR	56300	Identifier	ce		56262	0					
ANR	56301	Identifier	ce_flags		56262	1					
ANR	56302	PrimaryExpression	0		56262	1					
ANR	56303	ExpressionStatement	ce -> default_properties_table = NULL	6955:1:244454:244489	56262	4	True				
ANR	56304	AssignmentExpression	ce -> default_properties_table = NULL		56262	0		=			
ANR	56305	PtrMemberAccess	ce -> default_properties_table		56262	0					
ANR	56306	Identifier	ce		56262	0					
ANR	56307	Identifier	default_properties_table		56262	1					
ANR	56308	Identifier	NULL		56262	1					
ANR	56309	ExpressionStatement	ce -> default_static_members_table = NULL	6956:1:244492:244531	56262	5	True				
ANR	56310	AssignmentExpression	ce -> default_static_members_table = NULL		56262	0		=			
ANR	56311	PtrMemberAccess	ce -> default_static_members_table		56262	0					
ANR	56312	Identifier	ce		56262	0					
ANR	56313	Identifier	default_static_members_table		56262	1					
ANR	56314	Identifier	NULL		56262	1					
ANR	56315	ExpressionStatement	"zend_hash_init_ex ( & ce -> properties_info , 0 , NULL , ( dtor_func_t ) ( persistent_hashes ? zend_destroy_property_info_internal : zend_destroy_property_info ) , persistent_hashes , 0 )"	6957:1:244534:244706	56262	6	True				
ANR	56316	CallExpression	"zend_hash_init_ex ( & ce -> properties_info , 0 , NULL , ( dtor_func_t ) ( persistent_hashes ? zend_destroy_property_info_internal : zend_destroy_property_info ) , persistent_hashes , 0 )"		56262	0					
ANR	56317	Callee	zend_hash_init_ex		56262	0					
ANR	56318	Identifier	zend_hash_init_ex		56262	0					
ANR	56319	ArgumentList	& ce -> properties_info		56262	1					
ANR	56320	Argument	& ce -> properties_info		56262	0					
ANR	56321	UnaryOperationExpression	& ce -> properties_info		56262	0					
ANR	56322	UnaryOperator	&		56262	0					
ANR	56323	PtrMemberAccess	ce -> properties_info		56262	1					
ANR	56324	Identifier	ce		56262	0					
ANR	56325	Identifier	properties_info		56262	1					
ANR	56326	Argument	0		56262	1					
ANR	56327	PrimaryExpression	0		56262	0					
ANR	56328	Argument	NULL		56262	2					
ANR	56329	Identifier	NULL		56262	0					
ANR	56330	Argument	( dtor_func_t ) ( persistent_hashes ? zend_destroy_property_info_internal : zend_destroy_property_info )		56262	3					
ANR	56331	CastExpression	( dtor_func_t ) ( persistent_hashes ? zend_destroy_property_info_internal : zend_destroy_property_info )		56262	0					
ANR	56332	CastTarget	dtor_func_t		56262	0					
ANR	56333	ConditionalExpression	persistent_hashes ? zend_destroy_property_info_internal : zend_destroy_property_info		56262	1					
ANR	56334	Condition	persistent_hashes		56262	0					
ANR	56335	Identifier	persistent_hashes		56262	0					
ANR	56336	Identifier	zend_destroy_property_info_internal		56262	1					
ANR	56337	Identifier	zend_destroy_property_info		56262	2					
ANR	56338	Argument	persistent_hashes		56262	4					
ANR	56339	Identifier	persistent_hashes		56262	0					
ANR	56340	Argument	0		56262	5					
ANR	56341	PrimaryExpression	0		56262	0					
ANR	56342	ExpressionStatement	"zend_hash_init_ex ( & ce -> constants_table , 0 , NULL , zval_ptr_dtor_func , persistent_hashes , 0 )"	6958:1:244709:244799	56262	7	True				
ANR	56343	CallExpression	"zend_hash_init_ex ( & ce -> constants_table , 0 , NULL , zval_ptr_dtor_func , persistent_hashes , 0 )"		56262	0					
ANR	56344	Callee	zend_hash_init_ex		56262	0					
ANR	56345	Identifier	zend_hash_init_ex		56262	0					
ANR	56346	ArgumentList	& ce -> constants_table		56262	1					
ANR	56347	Argument	& ce -> constants_table		56262	0					
ANR	56348	UnaryOperationExpression	& ce -> constants_table		56262	0					
ANR	56349	UnaryOperator	&		56262	0					
ANR	56350	PtrMemberAccess	ce -> constants_table		56262	1					
ANR	56351	Identifier	ce		56262	0					
ANR	56352	Identifier	constants_table		56262	1					
ANR	56353	Argument	0		56262	1					
ANR	56354	PrimaryExpression	0		56262	0					
ANR	56355	Argument	NULL		56262	2					
ANR	56356	Identifier	NULL		56262	0					
ANR	56357	Argument	zval_ptr_dtor_func		56262	3					
ANR	56358	Identifier	zval_ptr_dtor_func		56262	0					
ANR	56359	Argument	persistent_hashes		56262	4					
ANR	56360	Identifier	persistent_hashes		56262	0					
ANR	56361	Argument	0		56262	5					
ANR	56362	PrimaryExpression	0		56262	0					
ANR	56363	ExpressionStatement	"zend_hash_init_ex ( & ce -> function_table , 0 , NULL , ZEND_FUNCTION_DTOR , persistent_hashes , 0 )"	6959:1:244802:244891	56262	8	True				
ANR	56364	CallExpression	"zend_hash_init_ex ( & ce -> function_table , 0 , NULL , ZEND_FUNCTION_DTOR , persistent_hashes , 0 )"		56262	0					
ANR	56365	Callee	zend_hash_init_ex		56262	0					
ANR	56366	Identifier	zend_hash_init_ex		56262	0					
ANR	56367	ArgumentList	& ce -> function_table		56262	1					
ANR	56368	Argument	& ce -> function_table		56262	0					
ANR	56369	UnaryOperationExpression	& ce -> function_table		56262	0					
ANR	56370	UnaryOperator	&		56262	0					
ANR	56371	PtrMemberAccess	ce -> function_table		56262	1					
ANR	56372	Identifier	ce		56262	0					
ANR	56373	Identifier	function_table		56262	1					
ANR	56374	Argument	0		56262	1					
ANR	56375	PrimaryExpression	0		56262	0					
ANR	56376	Argument	NULL		56262	2					
ANR	56377	Identifier	NULL		56262	0					
ANR	56378	Argument	ZEND_FUNCTION_DTOR		56262	3					
ANR	56379	Identifier	ZEND_FUNCTION_DTOR		56262	0					
ANR	56380	Argument	persistent_hashes		56262	4					
ANR	56381	Identifier	persistent_hashes		56262	0					
ANR	56382	Argument	0		56262	5					
ANR	56383	PrimaryExpression	0		56262	0					
ANR	56384	IfStatement	if ( ce -> type == ZEND_INTERNAL_CLASS )		56262	9					
ANR	56385	Condition	ce -> type == ZEND_INTERNAL_CLASS	6961:5:244899:244929	56262	0	True				
ANR	56386	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		56262	0		==			
ANR	56387	PtrMemberAccess	ce -> type		56262	0					
ANR	56388	Identifier	ce		56262	0					
ANR	56389	Identifier	type		56262	1					
ANR	56390	Identifier	ZEND_INTERNAL_CLASS		56262	1					
ANR	56391	CompoundStatement		16:2:707:754	56262	1					
ANR	56392	IdentifierDeclStatement	int n = zend_hash_num_elements ( CG ( class_table ) ) ;	6963:2:244947:244994	56262	0	True				
ANR	56393	IdentifierDecl	n = zend_hash_num_elements ( CG ( class_table ) )		56262	0					
ANR	56394	IdentifierDeclType	int		56262	0					
ANR	56395	Identifier	n		56262	1					
ANR	56396	AssignmentExpression	n = zend_hash_num_elements ( CG ( class_table ) )		56262	2		=			
ANR	56397	Identifier	n		56262	0					
ANR	56398	CallExpression	zend_hash_num_elements ( CG ( class_table ) )		56262	1					
ANR	56399	Callee	zend_hash_num_elements		56262	0					
ANR	56400	Identifier	zend_hash_num_elements		56262	0					
ANR	56401	ArgumentList	CG ( class_table )		56262	1					
ANR	56402	Argument	CG ( class_table )		56262	0					
ANR	56403	CallExpression	CG ( class_table )		56262	0					
ANR	56404	Callee	CG		56262	0					
ANR	56405	Identifier	CG		56262	0					
ANR	56406	ArgumentList	class_table		56262	1					
ANR	56407	Argument	class_table		56262	0					
ANR	56408	Identifier	class_table		56262	0					
ANR	56409	IfStatement	if ( CG ( static_members_table ) && n >= CG ( last_static_member ) )		56262	1					
ANR	56410	Condition	CG ( static_members_table ) && n >= CG ( last_static_member )	6965:6:245003:245057	56262	0	True				
ANR	56411	AndExpression	CG ( static_members_table ) && n >= CG ( last_static_member )		56262	0		&&			
ANR	56412	CallExpression	CG ( static_members_table )		56262	0					
ANR	56413	Callee	CG		56262	0					
ANR	56414	Identifier	CG		56262	0					
ANR	56415	ArgumentList	static_members_table		56262	1					
ANR	56416	Argument	static_members_table		56262	0					
ANR	56417	Identifier	static_members_table		56262	0					
ANR	56418	RelationalExpression	n >= CG ( last_static_member )		56262	1		>=			
ANR	56419	Identifier	n		56262	0					
ANR	56420	CallExpression	CG ( last_static_member )		56262	1					
ANR	56421	Callee	CG		56262	0					
ANR	56422	Identifier	CG		56262	0					
ANR	56423	ArgumentList	last_static_member		56262	1					
ANR	56424	Argument	last_static_member		56262	0					
ANR	56425	Identifier	last_static_member		56262	0					
ANR	56426	CompoundStatement		18:63:820:820	56262	1					
ANR	56427	ExpressionStatement	CG ( last_static_member ) = n + 1	6967:3:245113:245141	56262	0	True				
ANR	56428	AssignmentExpression	CG ( last_static_member ) = n + 1		56262	0		=			
ANR	56429	CallExpression	CG ( last_static_member )		56262	0					
ANR	56430	Callee	CG		56262	0					
ANR	56431	Identifier	CG		56262	0					
ANR	56432	ArgumentList	last_static_member		56262	1					
ANR	56433	Argument	last_static_member		56262	0					
ANR	56434	Identifier	last_static_member		56262	0					
ANR	56435	AdditiveExpression	n + 1		56262	1		+			
ANR	56436	Identifier	n		56262	0					
ANR	56437	PrimaryExpression	1		56262	1					
ANR	56438	ExpressionStatement	"CG ( static_members_table ) = realloc ( CG ( static_members_table ) , ( n + 1 ) * sizeof ( zval * * ) )"	6968:3:245146:245228	56262	1	True				
ANR	56439	AssignmentExpression	"CG ( static_members_table ) = realloc ( CG ( static_members_table ) , ( n + 1 ) * sizeof ( zval * * ) )"		56262	0		=			
ANR	56440	CallExpression	CG ( static_members_table )		56262	0					
ANR	56441	Callee	CG		56262	0					
ANR	56442	Identifier	CG		56262	0					
ANR	56443	ArgumentList	static_members_table		56262	1					
ANR	56444	Argument	static_members_table		56262	0					
ANR	56445	Identifier	static_members_table		56262	0					
ANR	56446	CallExpression	"realloc ( CG ( static_members_table ) , ( n + 1 ) * sizeof ( zval * * ) )"		56262	1					
ANR	56447	Callee	realloc		56262	0					
ANR	56448	Identifier	realloc		56262	0					
ANR	56449	ArgumentList	CG ( static_members_table )		56262	1					
ANR	56450	Argument	CG ( static_members_table )		56262	0					
ANR	56451	CallExpression	CG ( static_members_table )		56262	0					
ANR	56452	Callee	CG		56262	0					
ANR	56453	Identifier	CG		56262	0					
ANR	56454	ArgumentList	static_members_table		56262	1					
ANR	56455	Argument	static_members_table		56262	0					
ANR	56456	Identifier	static_members_table		56262	0					
ANR	56457	Argument	( n + 1 ) * sizeof ( zval * * )		56262	1					
ANR	56458	MultiplicativeExpression	( n + 1 ) * sizeof ( zval * * )		56262	0		*			
ANR	56459	AdditiveExpression	n + 1		56262	0		+			
ANR	56460	Identifier	n		56262	0					
ANR	56461	PrimaryExpression	1		56262	1					
ANR	56462	SizeofExpression	sizeof ( zval * * )		56262	1					
ANR	56463	Sizeof	sizeof		56262	0					
ANR	56464	SizeofOperand	zval * *		56262	1					
ANR	56465	ExpressionStatement	CG ( static_members_table ) [ n ] = NULL	6969:3:245233:245267	56262	2	True				
ANR	56466	AssignmentExpression	CG ( static_members_table ) [ n ] = NULL		56262	0		=			
ANR	56467	ArrayIndexing	CG ( static_members_table ) [ n ]		56262	0					
ANR	56468	CallExpression	CG ( static_members_table )		56262	0					
ANR	56469	Callee	CG		56262	0					
ANR	56470	Identifier	CG		56262	0					
ANR	56471	ArgumentList	static_members_table		56262	1					
ANR	56472	Argument	static_members_table		56262	0					
ANR	56473	Identifier	static_members_table		56262	0					
ANR	56474	Identifier	n		56262	1					
ANR	56475	Identifier	NULL		56262	1					
ANR	56476	ExpressionStatement	ce -> static_members_table = ( zval * * ) ( zend_intptr_t ) n	6971:2:245275:245326	56262	2	True				
ANR	56477	AssignmentExpression	ce -> static_members_table = ( zval * * ) ( zend_intptr_t ) n		56262	0		=			
ANR	56478	PtrMemberAccess	ce -> static_members_table		56262	0					
ANR	56479	Identifier	ce		56262	0					
ANR	56480	Identifier	static_members_table		56262	1					
ANR	56481	CastExpression	( zval * * ) ( zend_intptr_t ) n		56262	1					
ANR	56482	CastTarget	zval * *		56262	0					
ANR	56483	CastExpression	( zend_intptr_t ) n		56262	1					
ANR	56484	CastTarget	zend_intptr_t		56262	0					
ANR	56485	Identifier	n		56262	1					
ANR	56486	ElseStatement	else		56262	0					
ANR	56487	CompoundStatement		28:8:1144:1144	56262	0					
ANR	56488	ExpressionStatement	ce -> static_members_table = ce -> default_static_members_table	6976:2:245388:245447	56262	0	True				
ANR	56489	AssignmentExpression	ce -> static_members_table = ce -> default_static_members_table		56262	0		=			
ANR	56490	PtrMemberAccess	ce -> static_members_table		56262	0					
ANR	56491	Identifier	ce		56262	0					
ANR	56492	Identifier	static_members_table		56262	1					
ANR	56493	PtrMemberAccess	ce -> default_static_members_table		56262	1					
ANR	56494	Identifier	ce		56262	0					
ANR	56495	Identifier	default_static_members_table		56262	1					
ANR	56496	ExpressionStatement	ce -> info . user . doc_comment = NULL	6977:2:245451:245483	56262	1	True				
ANR	56497	AssignmentExpression	ce -> info . user . doc_comment = NULL		56262	0		=			
ANR	56498	MemberAccess	ce -> info . user . doc_comment		56262	0					
ANR	56499	MemberAccess	ce -> info . user		56262	0					
ANR	56500	PtrMemberAccess	ce -> info		56262	0					
ANR	56501	Identifier	ce		56262	0					
ANR	56502	Identifier	info		56262	1					
ANR	56503	Identifier	user		56262	1					
ANR	56504	Identifier	doc_comment		56262	1					
ANR	56505	Identifier	NULL		56262	1					
ANR	56506	ExpressionStatement	ce -> info . user . doc_comment_len = 0	6978:2:245487:245520	56262	2	True				
ANR	56507	AssignmentExpression	ce -> info . user . doc_comment_len = 0		56262	0		=			
ANR	56508	MemberAccess	ce -> info . user . doc_comment_len		56262	0					
ANR	56509	MemberAccess	ce -> info . user		56262	0					
ANR	56510	PtrMemberAccess	ce -> info		56262	0					
ANR	56511	Identifier	ce		56262	0					
ANR	56512	Identifier	info		56262	1					
ANR	56513	Identifier	user		56262	1					
ANR	56514	Identifier	doc_comment_len		56262	1					
ANR	56515	PrimaryExpression	0		56262	1					
ANR	56516	ExpressionStatement	ce -> default_properties_count = 0	6981:1:245527:245559	56262	10	True				
ANR	56517	AssignmentExpression	ce -> default_properties_count = 0		56262	0		=			
ANR	56518	PtrMemberAccess	ce -> default_properties_count		56262	0					
ANR	56519	Identifier	ce		56262	0					
ANR	56520	Identifier	default_properties_count		56262	1					
ANR	56521	PrimaryExpression	0		56262	1					
ANR	56522	ExpressionStatement	ce -> default_static_members_count = 0	6982:1:245562:245598	56262	11	True				
ANR	56523	AssignmentExpression	ce -> default_static_members_count = 0		56262	0		=			
ANR	56524	PtrMemberAccess	ce -> default_static_members_count		56262	0					
ANR	56525	Identifier	ce		56262	0					
ANR	56526	Identifier	default_static_members_count		56262	1					
ANR	56527	PrimaryExpression	0		56262	1					
ANR	56528	IfStatement	if ( nullify_handlers )		56262	12					
ANR	56529	Condition	nullify_handlers	6984:5:245606:245621	56262	0	True				
ANR	56530	Identifier	nullify_handlers		56262	0					
ANR	56531	CompoundStatement		37:23:1384:1384	56262	1					
ANR	56532	ExpressionStatement	ce -> constructor = NULL	6985:2:245628:245650	56262	0	True				
ANR	56533	AssignmentExpression	ce -> constructor = NULL		56262	0		=			
ANR	56534	PtrMemberAccess	ce -> constructor		56262	0					
ANR	56535	Identifier	ce		56262	0					
ANR	56536	Identifier	constructor		56262	1					
ANR	56537	Identifier	NULL		56262	1					
ANR	56538	ExpressionStatement	ce -> destructor = NULL	6986:2:245654:245675	56262	1	True				
ANR	56539	AssignmentExpression	ce -> destructor = NULL		56262	0		=			
ANR	56540	PtrMemberAccess	ce -> destructor		56262	0					
ANR	56541	Identifier	ce		56262	0					
ANR	56542	Identifier	destructor		56262	1					
ANR	56543	Identifier	NULL		56262	1					
ANR	56544	ExpressionStatement	ce -> clone = NULL	6987:2:245679:245695	56262	2	True				
ANR	56545	AssignmentExpression	ce -> clone = NULL		56262	0		=			
ANR	56546	PtrMemberAccess	ce -> clone		56262	0					
ANR	56547	Identifier	ce		56262	0					
ANR	56548	Identifier	clone		56262	1					
ANR	56549	Identifier	NULL		56262	1					
ANR	56550	ExpressionStatement	ce -> __get = NULL	6988:2:245699:245715	56262	3	True				
ANR	56551	AssignmentExpression	ce -> __get = NULL		56262	0		=			
ANR	56552	PtrMemberAccess	ce -> __get		56262	0					
ANR	56553	Identifier	ce		56262	0					
ANR	56554	Identifier	__get		56262	1					
ANR	56555	Identifier	NULL		56262	1					
ANR	56556	ExpressionStatement	ce -> __set = NULL	6989:2:245719:245735	56262	4	True				
ANR	56557	AssignmentExpression	ce -> __set = NULL		56262	0		=			
ANR	56558	PtrMemberAccess	ce -> __set		56262	0					
ANR	56559	Identifier	ce		56262	0					
ANR	56560	Identifier	__set		56262	1					
ANR	56561	Identifier	NULL		56262	1					
ANR	56562	ExpressionStatement	ce -> __unset = NULL	6990:2:245739:245757	56262	5	True				
ANR	56563	AssignmentExpression	ce -> __unset = NULL		56262	0		=			
ANR	56564	PtrMemberAccess	ce -> __unset		56262	0					
ANR	56565	Identifier	ce		56262	0					
ANR	56566	Identifier	__unset		56262	1					
ANR	56567	Identifier	NULL		56262	1					
ANR	56568	ExpressionStatement	ce -> __isset = NULL	6991:2:245761:245779	56262	6	True				
ANR	56569	AssignmentExpression	ce -> __isset = NULL		56262	0		=			
ANR	56570	PtrMemberAccess	ce -> __isset		56262	0					
ANR	56571	Identifier	ce		56262	0					
ANR	56572	Identifier	__isset		56262	1					
ANR	56573	Identifier	NULL		56262	1					
ANR	56574	ExpressionStatement	ce -> __call = NULL	6992:2:245783:245800	56262	7	True				
ANR	56575	AssignmentExpression	ce -> __call = NULL		56262	0		=			
ANR	56576	PtrMemberAccess	ce -> __call		56262	0					
ANR	56577	Identifier	ce		56262	0					
ANR	56578	Identifier	__call		56262	1					
ANR	56579	Identifier	NULL		56262	1					
ANR	56580	ExpressionStatement	ce -> __callstatic = NULL	6993:2:245804:245827	56262	8	True				
ANR	56581	AssignmentExpression	ce -> __callstatic = NULL		56262	0		=			
ANR	56582	PtrMemberAccess	ce -> __callstatic		56262	0					
ANR	56583	Identifier	ce		56262	0					
ANR	56584	Identifier	__callstatic		56262	1					
ANR	56585	Identifier	NULL		56262	1					
ANR	56586	ExpressionStatement	ce -> __tostring = NULL	6994:2:245831:245852	56262	9	True				
ANR	56587	AssignmentExpression	ce -> __tostring = NULL		56262	0		=			
ANR	56588	PtrMemberAccess	ce -> __tostring		56262	0					
ANR	56589	Identifier	ce		56262	0					
ANR	56590	Identifier	__tostring		56262	1					
ANR	56591	Identifier	NULL		56262	1					
ANR	56592	ExpressionStatement	ce -> create_object = NULL	6995:2:245856:245880	56262	10	True				
ANR	56593	AssignmentExpression	ce -> create_object = NULL		56262	0		=			
ANR	56594	PtrMemberAccess	ce -> create_object		56262	0					
ANR	56595	Identifier	ce		56262	0					
ANR	56596	Identifier	create_object		56262	1					
ANR	56597	Identifier	NULL		56262	1					
ANR	56598	ExpressionStatement	ce -> get_iterator = NULL	6996:2:245884:245907	56262	11	True				
ANR	56599	AssignmentExpression	ce -> get_iterator = NULL		56262	0		=			
ANR	56600	PtrMemberAccess	ce -> get_iterator		56262	0					
ANR	56601	Identifier	ce		56262	0					
ANR	56602	Identifier	get_iterator		56262	1					
ANR	56603	Identifier	NULL		56262	1					
ANR	56604	ExpressionStatement	ce -> iterator_funcs . funcs = NULL	6997:2:245911:245942	56262	12	True				
ANR	56605	AssignmentExpression	ce -> iterator_funcs . funcs = NULL		56262	0		=			
ANR	56606	MemberAccess	ce -> iterator_funcs . funcs		56262	0					
ANR	56607	PtrMemberAccess	ce -> iterator_funcs		56262	0					
ANR	56608	Identifier	ce		56262	0					
ANR	56609	Identifier	iterator_funcs		56262	1					
ANR	56610	Identifier	funcs		56262	1					
ANR	56611	Identifier	NULL		56262	1					
ANR	56612	ExpressionStatement	ce -> interface_gets_implemented = NULL	6998:2:245946:245983	56262	13	True				
ANR	56613	AssignmentExpression	ce -> interface_gets_implemented = NULL		56262	0		=			
ANR	56614	PtrMemberAccess	ce -> interface_gets_implemented		56262	0					
ANR	56615	Identifier	ce		56262	0					
ANR	56616	Identifier	interface_gets_implemented		56262	1					
ANR	56617	Identifier	NULL		56262	1					
ANR	56618	ExpressionStatement	ce -> get_static_method = NULL	6999:2:245987:246015	56262	14	True				
ANR	56619	AssignmentExpression	ce -> get_static_method = NULL		56262	0		=			
ANR	56620	PtrMemberAccess	ce -> get_static_method		56262	0					
ANR	56621	Identifier	ce		56262	0					
ANR	56622	Identifier	get_static_method		56262	1					
ANR	56623	Identifier	NULL		56262	1					
ANR	56624	ExpressionStatement	ce -> parent = NULL	7000:2:246019:246036	56262	15	True				
ANR	56625	AssignmentExpression	ce -> parent = NULL		56262	0		=			
ANR	56626	PtrMemberAccess	ce -> parent		56262	0					
ANR	56627	Identifier	ce		56262	0					
ANR	56628	Identifier	parent		56262	1					
ANR	56629	Identifier	NULL		56262	1					
ANR	56630	ExpressionStatement	ce -> num_interfaces = 0	7001:2:246040:246062	56262	16	True				
ANR	56631	AssignmentExpression	ce -> num_interfaces = 0		56262	0		=			
ANR	56632	PtrMemberAccess	ce -> num_interfaces		56262	0					
ANR	56633	Identifier	ce		56262	0					
ANR	56634	Identifier	num_interfaces		56262	1					
ANR	56635	PrimaryExpression	0		56262	1					
ANR	56636	ExpressionStatement	ce -> interfaces = NULL	7002:2:246066:246087	56262	17	True				
ANR	56637	AssignmentExpression	ce -> interfaces = NULL		56262	0		=			
ANR	56638	PtrMemberAccess	ce -> interfaces		56262	0					
ANR	56639	Identifier	ce		56262	0					
ANR	56640	Identifier	interfaces		56262	1					
ANR	56641	Identifier	NULL		56262	1					
ANR	56642	ExpressionStatement	ce -> num_traits = 0	7003:2:246091:246109	56262	18	True				
ANR	56643	AssignmentExpression	ce -> num_traits = 0		56262	0		=			
ANR	56644	PtrMemberAccess	ce -> num_traits		56262	0					
ANR	56645	Identifier	ce		56262	0					
ANR	56646	Identifier	num_traits		56262	1					
ANR	56647	PrimaryExpression	0		56262	1					
ANR	56648	ExpressionStatement	ce -> traits = NULL	7004:2:246113:246130	56262	19	True				
ANR	56649	AssignmentExpression	ce -> traits = NULL		56262	0		=			
ANR	56650	PtrMemberAccess	ce -> traits		56262	0					
ANR	56651	Identifier	ce		56262	0					
ANR	56652	Identifier	traits		56262	1					
ANR	56653	Identifier	NULL		56262	1					
ANR	56654	ExpressionStatement	ce -> trait_aliases = NULL	7005:2:246134:246158	56262	20	True				
ANR	56655	AssignmentExpression	ce -> trait_aliases = NULL		56262	0		=			
ANR	56656	PtrMemberAccess	ce -> trait_aliases		56262	0					
ANR	56657	Identifier	ce		56262	0					
ANR	56658	Identifier	trait_aliases		56262	1					
ANR	56659	Identifier	NULL		56262	1					
ANR	56660	ExpressionStatement	ce -> trait_precedences = NULL	7006:2:246162:246190	56262	21	True				
ANR	56661	AssignmentExpression	ce -> trait_precedences = NULL		56262	0		=			
ANR	56662	PtrMemberAccess	ce -> trait_precedences		56262	0					
ANR	56663	Identifier	ce		56262	0					
ANR	56664	Identifier	trait_precedences		56262	1					
ANR	56665	Identifier	NULL		56262	1					
ANR	56666	ExpressionStatement	ce -> serialize = NULL	7007:2:246194:246214	56262	22	True				
ANR	56667	AssignmentExpression	ce -> serialize = NULL		56262	0		=			
ANR	56668	PtrMemberAccess	ce -> serialize		56262	0					
ANR	56669	Identifier	ce		56262	0					
ANR	56670	Identifier	serialize		56262	1					
ANR	56671	Identifier	NULL		56262	1					
ANR	56672	ExpressionStatement	ce -> unserialize = NULL	7008:2:246218:246240	56262	23	True				
ANR	56673	AssignmentExpression	ce -> unserialize = NULL		56262	0		=			
ANR	56674	PtrMemberAccess	ce -> unserialize		56262	0					
ANR	56675	Identifier	ce		56262	0					
ANR	56676	Identifier	unserialize		56262	1					
ANR	56677	Identifier	NULL		56262	1					
ANR	56678	ExpressionStatement	ce -> serialize_func = NULL	7009:2:246244:246269	56262	24	True				
ANR	56679	AssignmentExpression	ce -> serialize_func = NULL		56262	0		=			
ANR	56680	PtrMemberAccess	ce -> serialize_func		56262	0					
ANR	56681	Identifier	ce		56262	0					
ANR	56682	Identifier	serialize_func		56262	1					
ANR	56683	Identifier	NULL		56262	1					
ANR	56684	ExpressionStatement	ce -> unserialize_func = NULL	7010:2:246273:246300	56262	25	True				
ANR	56685	AssignmentExpression	ce -> unserialize_func = NULL		56262	0		=			
ANR	56686	PtrMemberAccess	ce -> unserialize_func		56262	0					
ANR	56687	Identifier	ce		56262	0					
ANR	56688	Identifier	unserialize_func		56262	1					
ANR	56689	Identifier	NULL		56262	1					
ANR	56690	ExpressionStatement	ce -> __debugInfo = NULL	7011:2:246304:246326	56262	26	True				
ANR	56691	AssignmentExpression	ce -> __debugInfo = NULL		56262	0		=			
ANR	56692	PtrMemberAccess	ce -> __debugInfo		56262	0					
ANR	56693	Identifier	ce		56262	0					
ANR	56694	Identifier	__debugInfo		56262	1					
ANR	56695	Identifier	NULL		56262	1					
ANR	56696	IfStatement	if ( ce -> type == ZEND_INTERNAL_CLASS )		56262	27					
ANR	56697	Condition	ce -> type == ZEND_INTERNAL_CLASS	7012:6:246334:246364	56262	0	True				
ANR	56698	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		56262	0		==			
ANR	56699	PtrMemberAccess	ce -> type		56262	0					
ANR	56700	Identifier	ce		56262	0					
ANR	56701	Identifier	type		56262	1					
ANR	56702	Identifier	ZEND_INTERNAL_CLASS		56262	1					
ANR	56703	CompoundStatement		65:39:2127:2127	56262	1					
ANR	56704	ExpressionStatement	ce -> info . internal . module = NULL	7013:3:246372:246403	56262	0	True				
ANR	56705	AssignmentExpression	ce -> info . internal . module = NULL		56262	0		=			
ANR	56706	MemberAccess	ce -> info . internal . module		56262	0					
ANR	56707	MemberAccess	ce -> info . internal		56262	0					
ANR	56708	PtrMemberAccess	ce -> info		56262	0					
ANR	56709	Identifier	ce		56262	0					
ANR	56710	Identifier	info		56262	1					
ANR	56711	Identifier	internal		56262	1					
ANR	56712	Identifier	module		56262	1					
ANR	56713	Identifier	NULL		56262	1					
ANR	56714	ExpressionStatement	ce -> info . internal . builtin_functions = NULL	7014:3:246408:246450	56262	1	True				
ANR	56715	AssignmentExpression	ce -> info . internal . builtin_functions = NULL		56262	0		=			
ANR	56716	MemberAccess	ce -> info . internal . builtin_functions		56262	0					
ANR	56717	MemberAccess	ce -> info . internal		56262	0					
ANR	56718	PtrMemberAccess	ce -> info		56262	0					
ANR	56719	Identifier	ce		56262	0					
ANR	56720	Identifier	info		56262	1					
ANR	56721	Identifier	internal		56262	1					
ANR	56722	Identifier	builtin_functions		56262	1					
ANR	56723	Identifier	NULL		56262	1					
ANR	56724	ReturnType	ZEND_API void		56262	1					
ANR	56725	Identifier	zend_initialize_class_data		56262	2					
ANR	56726	ParameterList	"zend_class_entry * ce , zend_bool nullify_handlers TSRMLS_DC"		56262	3					
ANR	56727	Parameter	zend_class_entry * ce	6947:41:244169:244188	56262	0	True				
ANR	56728	ParameterType	zend_class_entry *		56262	0					
ANR	56729	Identifier	ce		56262	1					
ANR	56730	Parameter	zend_bool nullify_handlers TSRMLS_DC	6947:63:244191:244226	56262	1	True				
ANR	56731	ParameterType	zend_bool nullify_handlers		56262	0					
ANR	56732	Identifier	TSRMLS_DC		56262	1					
ANR	56733	CFGEntryNode	ENTRY		56262		True				
ANR	56734	CFGExitNode	EXIT		56262		True				
ANR	56735	Symbol	ce -> default_properties_count		56262						
ANR	56736	Symbol	ce -> __set		56262						
ANR	56737	Symbol	* CG		56262						
ANR	56738	Symbol	* ce		56262						
ANR	56739	Symbol	realloc		56262						
ANR	56740	Symbol	ce -> interface_gets_implemented		56262						
ANR	56741	Symbol	ce -> unserialize		56262						
ANR	56742	Symbol	ce -> static_members_table		56262						
ANR	56743	Symbol	TSRMLS_DC		56262						
ANR	56744	Symbol	ce -> __tostring		56262						
ANR	56745	Symbol	ce -> info . user . doc_comment_len		56262						
ANR	56746	Symbol	ce -> __get		56262						
ANR	56747	Symbol	zend_destroy_property_info		56262						
ANR	56748	Symbol	ce -> __callstatic		56262						
ANR	56749	Symbol	ce -> info . internal		56262						
ANR	56750	Symbol	ZEND_INTERNAL_CLASS		56262						
ANR	56751	Symbol	ZEND_FUNCTION_DTOR		56262						
ANR	56752	Symbol	NULL		56262						
ANR	56753	Symbol	ce -> destructor		56262						
ANR	56754	Symbol	ce -> info . user		56262						
ANR	56755	Symbol	ce -> __isset		56262						
ANR	56756	Symbol	ce -> parent		56262						
ANR	56757	Symbol	ce -> info . internal . module		56262						
ANR	56758	Symbol	ce -> default_properties_table		56262						
ANR	56759	Symbol	ce -> refcount		56262						
ANR	56760	Symbol	ce -> default_static_members_table		56262						
ANR	56761	Symbol	ce -> trait_precedences		56262						
ANR	56762	Symbol	ZVAL_PTR_DTOR		56262						
ANR	56763	Symbol	ce -> ce_flags		56262						
ANR	56764	Symbol	ce -> __debugInfo		56262						
ANR	56765	Symbol	& ce -> properties_info		56262						
ANR	56766	Symbol	ce -> __call		56262						
ANR	56767	Symbol	ce -> get_iterator		56262						
ANR	56768	Symbol	ce -> info		56262						
ANR	56769	Symbol	ce -> serialize_func		56262						
ANR	56770	Symbol	ce -> clone		56262						
ANR	56771	Symbol	ce -> get_static_method		56262						
ANR	56772	Symbol	ce -> type		56262						
ANR	56773	Symbol	ce -> default_static_members_count		56262						
ANR	56774	Symbol	ZVAL_INTERNAL_PTR_DTOR		56262						
ANR	56775	Symbol	static_members_table		56262						
ANR	56776	Symbol	& ce -> function_table		56262						
ANR	56777	Symbol	zend_destroy_property_info_internal		56262						
ANR	56778	Symbol	zval_ptr_dtor_func		56262						
ANR	56779	Symbol	nullify_handlers		56262						
ANR	56780	Symbol	ce -> num_interfaces		56262						
ANR	56781	Symbol	persistent_hashes		56262						
ANR	56782	Symbol	class_table		56262						
ANR	56783	Symbol	ce		56262						
ANR	56784	Symbol	ce -> info . internal . builtin_functions		56262						
ANR	56785	Symbol	ce -> constructor		56262						
ANR	56786	Symbol	ce -> trait_aliases		56262						
ANR	56787	Symbol	CG		56262						
ANR	56788	Symbol	ce -> interfaces		56262						
ANR	56789	Symbol	zend_hash_num_elements		56262						
ANR	56790	Symbol	last_static_member		56262						
ANR	56791	Symbol	ce -> unserialize_func		56262						
ANR	56792	Symbol	ce -> num_traits		56262						
ANR	56793	Symbol	n		56262						
ANR	56794	Symbol	ce -> traits		56262						
ANR	56795	Symbol	& ce -> constants_table		56262						
ANR	56796	Symbol	ce -> info . user . doc_comment		56262						
ANR	56797	Symbol	ce -> __unset		56262						
ANR	56798	Symbol	ce -> iterator_funcs		56262						
ANR	56799	Symbol	ce -> serialize		56262						
ANR	56800	Symbol	* n		56262						
ANR	56801	Symbol	ce -> create_object		56262						
ANR	56802	Symbol	ce -> iterator_funcs . funcs		56262						
ANR	56803	Function	zend_get_class_fetch_type	7020:0:246472:247036							
ANR	56804	FunctionDef	"zend_get_class_fetch_type (const char * class_name , uint class_name_len)"		56803	0					
ANR	56805	CompoundStatement		7021:0:246557:247036	56803	0					
ANR	56806	IfStatement	"if ( ( class_name_len == sizeof ( ""self"" ) - 1 ) && ! strncasecmp ( class_name , ""self"" , sizeof ( ""self"" ) - 1 ) )"		56803	0					
ANR	56807	Condition	"( class_name_len == sizeof ( ""self"" ) - 1 ) && ! strncasecmp ( class_name , ""self"" , sizeof ( ""self"" ) - 1 )"	7022:5:246564:246655	56803	0	True				
ANR	56808	AndExpression	"( class_name_len == sizeof ( ""self"" ) - 1 ) && ! strncasecmp ( class_name , ""self"" , sizeof ( ""self"" ) - 1 )"		56803	0		&&			
ANR	56809	EqualityExpression	"class_name_len == sizeof ( ""self"" ) - 1"		56803	0		==			
ANR	56810	Identifier	class_name_len		56803	0					
ANR	56811	AdditiveExpression	"sizeof ( ""self"" ) - 1"		56803	1		-			
ANR	56812	SizeofExpression	"sizeof ( ""self"" )"		56803	0					
ANR	56813	Sizeof	sizeof		56803	0					
ANR	56814	PrimaryExpression	"""self"""		56803	1					
ANR	56815	PrimaryExpression	1		56803	1					
ANR	56816	UnaryOperationExpression	"! strncasecmp ( class_name , ""self"" , sizeof ( ""self"" ) - 1 )"		56803	1					
ANR	56817	UnaryOperator	!		56803	0					
ANR	56818	CallExpression	"strncasecmp ( class_name , ""self"" , sizeof ( ""self"" ) - 1 )"		56803	1					
ANR	56819	Callee	strncasecmp		56803	0					
ANR	56820	Identifier	strncasecmp		56803	0					
ANR	56821	ArgumentList	class_name		56803	1					
ANR	56822	Argument	class_name		56803	0					
ANR	56823	Identifier	class_name		56803	0					
ANR	56824	Argument	"""self"""		56803	1					
ANR	56825	PrimaryExpression	"""self"""		56803	0					
ANR	56826	Argument	"sizeof ( ""self"" ) - 1"		56803	2					
ANR	56827	AdditiveExpression	"sizeof ( ""self"" ) - 1"		56803	0		-			
ANR	56828	SizeofExpression	"sizeof ( ""self"" )"		56803	0					
ANR	56829	Sizeof	sizeof		56803	0					
ANR	56830	PrimaryExpression	"""self"""		56803	1					
ANR	56831	PrimaryExpression	1		56803	1					
ANR	56832	CompoundStatement		3:54:100:100	56803	1					
ANR	56833	ReturnStatement	return ZEND_FETCH_CLASS_SELF ;	7024:2:246662:246690	56803	0	True				
ANR	56834	Identifier	ZEND_FETCH_CLASS_SELF		56803	0					
ANR	56835	ElseStatement	else		56803	0					
ANR	56836	IfStatement	"if ( ( class_name_len == sizeof ( ""parent"" ) - 1 ) && ! strncasecmp ( class_name , ""parent"" , sizeof ( ""parent"" ) - 1 ) )"		56803	0					
ANR	56837	Condition	"( class_name_len == sizeof ( ""parent"" ) - 1 ) && ! strncasecmp ( class_name , ""parent"" , sizeof ( ""parent"" ) - 1 )"	7025:12:246704:246801	56803	0	True				
ANR	56838	AndExpression	"( class_name_len == sizeof ( ""parent"" ) - 1 ) && ! strncasecmp ( class_name , ""parent"" , sizeof ( ""parent"" ) - 1 )"		56803	0		&&			
ANR	56839	EqualityExpression	"class_name_len == sizeof ( ""parent"" ) - 1"		56803	0		==			
ANR	56840	Identifier	class_name_len		56803	0					
ANR	56841	AdditiveExpression	"sizeof ( ""parent"" ) - 1"		56803	1		-			
ANR	56842	SizeofExpression	"sizeof ( ""parent"" )"		56803	0					
ANR	56843	Sizeof	sizeof		56803	0					
ANR	56844	PrimaryExpression	"""parent"""		56803	1					
ANR	56845	PrimaryExpression	1		56803	1					
ANR	56846	UnaryOperationExpression	"! strncasecmp ( class_name , ""parent"" , sizeof ( ""parent"" ) - 1 )"		56803	1					
ANR	56847	UnaryOperator	!		56803	0					
ANR	56848	CallExpression	"strncasecmp ( class_name , ""parent"" , sizeof ( ""parent"" ) - 1 )"		56803	1					
ANR	56849	Callee	strncasecmp		56803	0					
ANR	56850	Identifier	strncasecmp		56803	0					
ANR	56851	ArgumentList	class_name		56803	1					
ANR	56852	Argument	class_name		56803	0					
ANR	56853	Identifier	class_name		56803	0					
ANR	56854	Argument	"""parent"""		56803	1					
ANR	56855	PrimaryExpression	"""parent"""		56803	0					
ANR	56856	Argument	"sizeof ( ""parent"" ) - 1"		56803	2					
ANR	56857	AdditiveExpression	"sizeof ( ""parent"" ) - 1"		56803	0		-			
ANR	56858	SizeofExpression	"sizeof ( ""parent"" )"		56803	0					
ANR	56859	Sizeof	sizeof		56803	0					
ANR	56860	PrimaryExpression	"""parent"""		56803	1					
ANR	56861	PrimaryExpression	1		56803	1					
ANR	56862	CompoundStatement		6:58:246:246	56803	1					
ANR	56863	ReturnStatement	return ZEND_FETCH_CLASS_PARENT ;	7027:2:246808:246838	56803	0	True				
ANR	56864	Identifier	ZEND_FETCH_CLASS_PARENT		56803	0					
ANR	56865	ElseStatement	else		56803	0					
ANR	56866	IfStatement	"if ( ( class_name_len == sizeof ( ""static"" ) - 1 ) && ! strncasecmp ( class_name , ""static"" , sizeof ( ""static"" ) - 1 ) )"		56803	0					
ANR	56867	Condition	"( class_name_len == sizeof ( ""static"" ) - 1 ) && ! strncasecmp ( class_name , ""static"" , sizeof ( ""static"" ) - 1 )"	7028:12:246852:246949	56803	0	True				
ANR	56868	AndExpression	"( class_name_len == sizeof ( ""static"" ) - 1 ) && ! strncasecmp ( class_name , ""static"" , sizeof ( ""static"" ) - 1 )"		56803	0		&&			
ANR	56869	EqualityExpression	"class_name_len == sizeof ( ""static"" ) - 1"		56803	0		==			
ANR	56870	Identifier	class_name_len		56803	0					
ANR	56871	AdditiveExpression	"sizeof ( ""static"" ) - 1"		56803	1		-			
ANR	56872	SizeofExpression	"sizeof ( ""static"" )"		56803	0					
ANR	56873	Sizeof	sizeof		56803	0					
ANR	56874	PrimaryExpression	"""static"""		56803	1					
ANR	56875	PrimaryExpression	1		56803	1					
ANR	56876	UnaryOperationExpression	"! strncasecmp ( class_name , ""static"" , sizeof ( ""static"" ) - 1 )"		56803	1					
ANR	56877	UnaryOperator	!		56803	0					
ANR	56878	CallExpression	"strncasecmp ( class_name , ""static"" , sizeof ( ""static"" ) - 1 )"		56803	1					
ANR	56879	Callee	strncasecmp		56803	0					
ANR	56880	Identifier	strncasecmp		56803	0					
ANR	56881	ArgumentList	class_name		56803	1					
ANR	56882	Argument	class_name		56803	0					
ANR	56883	Identifier	class_name		56803	0					
ANR	56884	Argument	"""static"""		56803	1					
ANR	56885	PrimaryExpression	"""static"""		56803	0					
ANR	56886	Argument	"sizeof ( ""static"" ) - 1"		56803	2					
ANR	56887	AdditiveExpression	"sizeof ( ""static"" ) - 1"		56803	0		-			
ANR	56888	SizeofExpression	"sizeof ( ""static"" )"		56803	0					
ANR	56889	Sizeof	sizeof		56803	0					
ANR	56890	PrimaryExpression	"""static"""		56803	1					
ANR	56891	PrimaryExpression	1		56803	1					
ANR	56892	CompoundStatement		9:58:394:394	56803	1					
ANR	56893	ReturnStatement	return ZEND_FETCH_CLASS_STATIC ;	7030:2:246956:246986	56803	0	True				
ANR	56894	Identifier	ZEND_FETCH_CLASS_STATIC		56803	0					
ANR	56895	ElseStatement	else		56803	0					
ANR	56896	CompoundStatement		11:8:438:438	56803	0					
ANR	56897	ReturnStatement	return ZEND_FETCH_CLASS_DEFAULT ;	7032:2:247000:247031	56803	0	True				
ANR	56898	Identifier	ZEND_FETCH_CLASS_DEFAULT		56803	0					
ANR	56899	ReturnType	int		56803	1					
ANR	56900	Identifier	zend_get_class_fetch_type		56803	2					
ANR	56901	ParameterList	"const char * class_name , uint class_name_len"		56803	3					
ANR	56902	Parameter	const char * class_name	7020:30:246502:246523	56803	0	True				
ANR	56903	ParameterType	const char *		56803	0					
ANR	56904	Identifier	class_name		56803	1					
ANR	56905	Parameter	uint class_name_len	7020:54:246526:246544	56803	1	True				
ANR	56906	ParameterType	uint		56803	0					
ANR	56907	Identifier	class_name_len		56803	1					
ANR	56908	CFGEntryNode	ENTRY		56803		True				
ANR	56909	CFGExitNode	EXIT		56803		True				
ANR	56910	Symbol	ZEND_FETCH_CLASS_DEFAULT		56803						
ANR	56911	Symbol	ZEND_FETCH_CLASS_SELF		56803						
ANR	56912	Symbol	ZEND_FETCH_CLASS_STATIC		56803						
ANR	56913	Symbol	strncasecmp		56803						
ANR	56914	Symbol	ZEND_FETCH_CLASS_PARENT		56803						
ANR	56915	Symbol	class_name_len		56803						
ANR	56916	Symbol	class_name		56803						
ANR	56917	Function	zend_get_compiled_variable_name	7037:9:247058:247273							
ANR	56918	FunctionDef	"zend_get_compiled_variable_name (const zend_op_array * op_array , zend_uint var , int * name_len)"		56917	0					
ANR	56919	CompoundStatement		7038:0:247173:247273	56917	0					
ANR	56920	IfStatement	if ( name_len )		56917	0					
ANR	56921	Condition	name_len	7039:5:247180:247187	56917	0	True				
ANR	56922	Identifier	name_len		56917	0					
ANR	56923	CompoundStatement		2:15:16:16	56917	1					
ANR	56924	ExpressionStatement	* name_len = op_array -> vars [ var ] . name_len	7040:2:247194:247234	56917	0	True				
ANR	56925	AssignmentExpression	* name_len = op_array -> vars [ var ] . name_len		56917	0		=			
ANR	56926	UnaryOperationExpression	* name_len		56917	0					
ANR	56927	UnaryOperator	*		56917	0					
ANR	56928	Identifier	name_len		56917	1					
ANR	56929	MemberAccess	op_array -> vars [ var ] . name_len		56917	1					
ANR	56930	ArrayIndexing	op_array -> vars [ var ]		56917	0					
ANR	56931	PtrMemberAccess	op_array -> vars		56917	0					
ANR	56932	Identifier	op_array		56917	0					
ANR	56933	Identifier	vars		56917	1					
ANR	56934	Identifier	var		56917	1					
ANR	56935	Identifier	name_len		56917	1					
ANR	56936	ReturnStatement	return op_array -> vars [ var ] . name ;	7042:1:247240:247271	56917	1	True				
ANR	56937	MemberAccess	op_array -> vars [ var ] . name		56917	0					
ANR	56938	ArrayIndexing	op_array -> vars [ var ]		56917	0					
ANR	56939	PtrMemberAccess	op_array -> vars		56917	0					
ANR	56940	Identifier	op_array		56917	0					
ANR	56941	Identifier	vars		56917	1					
ANR	56942	Identifier	var		56917	1					
ANR	56943	Identifier	name		56917	1					
ANR	56944	ReturnType	const char *		56917	1					
ANR	56945	Identifier	zend_get_compiled_variable_name		56917	2					
ANR	56946	ParameterList	"const zend_op_array * op_array , zend_uint var , int * name_len"		56917	3					
ANR	56947	Parameter	const zend_op_array * op_array	7037:53:247102:247130	56917	0	True				
ANR	56948	ParameterType	const zend_op_array *		56917	0					
ANR	56949	Identifier	op_array		56917	1					
ANR	56950	Parameter	zend_uint var	7037:84:247133:247145	56917	1	True				
ANR	56951	ParameterType	zend_uint		56917	0					
ANR	56952	Identifier	var		56917	1					
ANR	56953	Parameter	int * name_len	7037:99:247148:247160	56917	2	True				
ANR	56954	ParameterType	int *		56917	0					
ANR	56955	Identifier	name_len		56917	1					
ANR	56956	CFGEntryNode	ENTRY		56917		True				
ANR	56957	CFGExitNode	EXIT		56917		True				
ANR	56958	Symbol	* var		56917						
ANR	56959	Symbol	op_array -> vars		56917						
ANR	56960	Symbol	* op_array -> vars		56917						
ANR	56961	Symbol	* name_len		56917						
ANR	56962	Symbol	op_array -> vars [ var ] . name_len		56917						
ANR	56963	Symbol	var		56917						
ANR	56964	Symbol	op_array -> vars [ var ] . name		56917						
ANR	56965	Symbol	name_len		56917						
ANR	56966	Symbol	* * op_array		56917						
ANR	56967	Symbol	op_array		56917						
ANR	56968	Symbol	* op_array		56917						
ANR	56969	DeclStmt									
ANR	56970	Decl							znode	znode	tmp
ANR	56971	Function	zend_do_begin_namespace	7074:0:248055:250853							
ANR	56972	FunctionDef	"zend_do_begin_namespace (const znode * name , zend_bool with_bracket TSRMLS_DC)"		56971	0					
ANR	56973	CompoundStatement		7075:0:248147:250853	56971	0					
ANR	56974	IdentifierDeclStatement	char * lcname ;	7076:1:248150:248162	56971	0	True				
ANR	56975	IdentifierDecl	* lcname		56971	0					
ANR	56976	IdentifierDeclType	char *		56971	0					
ANR	56977	Identifier	lcname		56971	1					
ANR	56978	IfStatement	if ( ! CG ( has_bracketed_namespaces ) )		56971	1					
ANR	56979	Condition	! CG ( has_bracketed_namespaces )	7079:5:248230:248258	56971	0	True				
ANR	56980	UnaryOperationExpression	! CG ( has_bracketed_namespaces )		56971	0					
ANR	56981	UnaryOperator	!		56971	0					
ANR	56982	CallExpression	CG ( has_bracketed_namespaces )		56971	1					
ANR	56983	Callee	CG		56971	0					
ANR	56984	Identifier	CG		56971	0					
ANR	56985	ArgumentList	has_bracketed_namespaces		56971	1					
ANR	56986	Argument	has_bracketed_namespaces		56971	0					
ANR	56987	Identifier	has_bracketed_namespaces		56971	0					
ANR	56988	CompoundStatement		5:36:113:113	56971	1					
ANR	56989	IfStatement	if ( CG ( current_namespace ) )		56971	0					
ANR	56990	Condition	CG ( current_namespace )	7080:6:248269:248289	56971	0	True				
ANR	56991	CallExpression	CG ( current_namespace )		56971	0					
ANR	56992	Callee	CG		56971	0					
ANR	56993	Identifier	CG		56971	0					
ANR	56994	ArgumentList	current_namespace		56971	1					
ANR	56995	Argument	current_namespace		56971	0					
ANR	56996	Identifier	current_namespace		56971	0					
ANR	56997	CompoundStatement		6:29:144:144	56971	1					
ANR	56998	IfStatement	if ( with_bracket )		56971	0					
ANR	56999	Condition	with_bracket	7082:7:248359:248370	56971	0	True				
ANR	57000	Identifier	with_bracket		56971	0					
ANR	57001	CompoundStatement		8:21:225:225	56971	1					
ANR	57002	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot mix bracketed namespace declarations with unbracketed namespace declarations"" )"	7083:4:248379:248502	56971	0	True				
ANR	57003	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot mix bracketed namespace declarations with unbracketed namespace declarations"" )"		56971	0					
ANR	57004	Callee	zend_error_noreturn		56971	0					
ANR	57005	Identifier	zend_error_noreturn		56971	0					
ANR	57006	ArgumentList	E_COMPILE_ERROR		56971	1					
ANR	57007	Argument	E_COMPILE_ERROR		56971	0					
ANR	57008	Identifier	E_COMPILE_ERROR		56971	0					
ANR	57009	Argument	"""Cannot mix bracketed namespace declarations with unbracketed namespace declarations"""		56971	1					
ANR	57010	PrimaryExpression	"""Cannot mix bracketed namespace declarations with unbracketed namespace declarations"""		56971	0					
ANR	57011	ElseStatement	else		56971	0					
ANR	57012	CompoundStatement		12:8:373:373	56971	0					
ANR	57013	IfStatement	if ( ! with_bracket )		56971	0					
ANR	57014	Condition	! with_bracket	7088:6:248584:248596	56971	0	True				
ANR	57015	UnaryOperationExpression	! with_bracket		56971	0					
ANR	57016	UnaryOperator	!		56971	0					
ANR	57017	Identifier	with_bracket		56971	1					
ANR	57018	CompoundStatement		14:21:451:451	56971	1					
ANR	57019	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot mix bracketed namespace declarations with unbracketed namespace declarations"" )"	7089:3:248604:248727	56971	0	True				
ANR	57020	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot mix bracketed namespace declarations with unbracketed namespace declarations"" )"		56971	0					
ANR	57021	Callee	zend_error_noreturn		56971	0					
ANR	57022	Identifier	zend_error_noreturn		56971	0					
ANR	57023	ArgumentList	E_COMPILE_ERROR		56971	1					
ANR	57024	Argument	E_COMPILE_ERROR		56971	0					
ANR	57025	Identifier	E_COMPILE_ERROR		56971	0					
ANR	57026	Argument	"""Cannot mix bracketed namespace declarations with unbracketed namespace declarations"""		56971	1					
ANR	57027	PrimaryExpression	"""Cannot mix bracketed namespace declarations with unbracketed namespace declarations"""		56971	0					
ANR	57028	ElseStatement	else		56971	0					
ANR	57029	IfStatement	if ( CG ( current_namespace ) || CG ( in_namespace ) )		56971	0					
ANR	57030	Condition	CG ( current_namespace ) || CG ( in_namespace )	7090:13:248742:248782	56971	0	True				
ANR	57031	OrExpression	CG ( current_namespace ) || CG ( in_namespace )		56971	0		||			
ANR	57032	CallExpression	CG ( current_namespace )		56971	0					
ANR	57033	Callee	CG		56971	0					
ANR	57034	Identifier	CG		56971	0					
ANR	57035	ArgumentList	current_namespace		56971	1					
ANR	57036	Argument	current_namespace		56971	0					
ANR	57037	Identifier	current_namespace		56971	0					
ANR	57038	CallExpression	CG ( in_namespace )		56971	1					
ANR	57039	Callee	CG		56971	0					
ANR	57040	Identifier	CG		56971	0					
ANR	57041	ArgumentList	in_namespace		56971	1					
ANR	57042	Argument	in_namespace		56971	0					
ANR	57043	Identifier	in_namespace		56971	0					
ANR	57044	CompoundStatement		16:56:637:637	56971	1					
ANR	57045	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Namespace declarations cannot be nested"" )"	7091:3:248790:248869	56971	0	True				
ANR	57046	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Namespace declarations cannot be nested"" )"		56971	0					
ANR	57047	Callee	zend_error_noreturn		56971	0					
ANR	57048	Identifier	zend_error_noreturn		56971	0					
ANR	57049	ArgumentList	E_COMPILE_ERROR		56971	1					
ANR	57050	Argument	E_COMPILE_ERROR		56971	0					
ANR	57051	Identifier	E_COMPILE_ERROR		56971	0					
ANR	57052	Argument	"""Namespace declarations cannot be nested"""		56971	1					
ANR	57053	PrimaryExpression	"""Namespace declarations cannot be nested"""		56971	0					
ANR	57054	IfStatement	if ( ( ( ! with_bracket && ! CG ( current_namespace ) ) || ( with_bracket && ! CG ( has_bracketed_namespaces ) ) ) && CG ( active_op_array ) -> last > 0 )		56971	2					
ANR	57055	Condition	( ( ! with_bracket && ! CG ( current_namespace ) ) || ( with_bracket && ! CG ( has_bracketed_namespaces ) ) ) && CG ( active_op_array ) -> last > 0	7095:5:248884:249010	56971	0	True				
ANR	57056	AndExpression	( ( ! with_bracket && ! CG ( current_namespace ) ) || ( with_bracket && ! CG ( has_bracketed_namespaces ) ) ) && CG ( active_op_array ) -> last > 0		56971	0		&&			
ANR	57057	OrExpression	( ! with_bracket && ! CG ( current_namespace ) ) || ( with_bracket && ! CG ( has_bracketed_namespaces ) )		56971	0		||			
ANR	57058	AndExpression	! with_bracket && ! CG ( current_namespace )		56971	0		&&			
ANR	57059	UnaryOperationExpression	! with_bracket		56971	0					
ANR	57060	UnaryOperator	!		56971	0					
ANR	57061	Identifier	with_bracket		56971	1					
ANR	57062	UnaryOperationExpression	! CG ( current_namespace )		56971	1					
ANR	57063	UnaryOperator	!		56971	0					
ANR	57064	CallExpression	CG ( current_namespace )		56971	1					
ANR	57065	Callee	CG		56971	0					
ANR	57066	Identifier	CG		56971	0					
ANR	57067	ArgumentList	current_namespace		56971	1					
ANR	57068	Argument	current_namespace		56971	0					
ANR	57069	Identifier	current_namespace		56971	0					
ANR	57070	AndExpression	with_bracket && ! CG ( has_bracketed_namespaces )		56971	1		&&			
ANR	57071	Identifier	with_bracket		56971	0					
ANR	57072	UnaryOperationExpression	! CG ( has_bracketed_namespaces )		56971	1					
ANR	57073	UnaryOperator	!		56971	0					
ANR	57074	CallExpression	CG ( has_bracketed_namespaces )		56971	1					
ANR	57075	Callee	CG		56971	0					
ANR	57076	Identifier	CG		56971	0					
ANR	57077	ArgumentList	has_bracketed_namespaces		56971	1					
ANR	57078	Argument	has_bracketed_namespaces		56971	0					
ANR	57079	Identifier	has_bracketed_namespaces		56971	0					
ANR	57080	RelationalExpression	CG ( active_op_array ) -> last > 0		56971	1		>			
ANR	57081	PtrMemberAccess	CG ( active_op_array ) -> last		56971	0					
ANR	57082	CallExpression	CG ( active_op_array )		56971	0					
ANR	57083	Callee	CG		56971	0					
ANR	57084	Identifier	CG		56971	0					
ANR	57085	ArgumentList	active_op_array		56971	1					
ANR	57086	Argument	active_op_array		56971	0					
ANR	57087	Identifier	active_op_array		56971	0					
ANR	57088	Identifier	last		56971	1					
ANR	57089	PrimaryExpression	0		56971	1					
ANR	57090	CompoundStatement		23:2:913:948	56971	1					
ANR	57091	IdentifierDeclStatement	int num = CG ( active_op_array ) -> last ;	7097:2:249061:249096	56971	0	True				
ANR	57092	IdentifierDecl	num = CG ( active_op_array ) -> last		56971	0					
ANR	57093	IdentifierDeclType	int		56971	0					
ANR	57094	Identifier	num		56971	1					
ANR	57095	AssignmentExpression	num = CG ( active_op_array ) -> last		56971	2		=			
ANR	57096	Identifier	num		56971	0					
ANR	57097	PtrMemberAccess	CG ( active_op_array ) -> last		56971	1					
ANR	57098	CallExpression	CG ( active_op_array )		56971	0					
ANR	57099	Callee	CG		56971	0					
ANR	57100	Identifier	CG		56971	0					
ANR	57101	ArgumentList	active_op_array		56971	1					
ANR	57102	Argument	active_op_array		56971	0					
ANR	57103	Identifier	active_op_array		56971	0					
ANR	57104	Identifier	last		56971	1					
ANR	57105	WhileStatement	while ( num > 0 && ( CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT || CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS ) )		56971	1					
ANR	57106	Condition	num > 0 && ( CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT || CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS )	7098:9:249107:249257	56971	0	True				
ANR	57107	AndExpression	num > 0 && ( CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT || CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS )		56971	0		&&			
ANR	57108	RelationalExpression	num > 0		56971	0		>			
ANR	57109	Identifier	num		56971	0					
ANR	57110	PrimaryExpression	0		56971	1					
ANR	57111	OrExpression	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT || CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS		56971	1		||			
ANR	57112	EqualityExpression	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT		56971	0		==			
ANR	57113	MemberAccess	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode		56971	0					
ANR	57114	ArrayIndexing	CG ( active_op_array ) -> opcodes [ num - 1 ]		56971	0					
ANR	57115	PtrMemberAccess	CG ( active_op_array ) -> opcodes		56971	0					
ANR	57116	CallExpression	CG ( active_op_array )		56971	0					
ANR	57117	Callee	CG		56971	0					
ANR	57118	Identifier	CG		56971	0					
ANR	57119	ArgumentList	active_op_array		56971	1					
ANR	57120	Argument	active_op_array		56971	0					
ANR	57121	Identifier	active_op_array		56971	0					
ANR	57122	Identifier	opcodes		56971	1					
ANR	57123	AdditiveExpression	num - 1		56971	1		-			
ANR	57124	Identifier	num		56971	0					
ANR	57125	PrimaryExpression	1		56971	1					
ANR	57126	Identifier	opcode		56971	1					
ANR	57127	Identifier	ZEND_EXT_STMT		56971	1					
ANR	57128	EqualityExpression	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS		56971	1		==			
ANR	57129	MemberAccess	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode		56971	0					
ANR	57130	ArrayIndexing	CG ( active_op_array ) -> opcodes [ num - 1 ]		56971	0					
ANR	57131	PtrMemberAccess	CG ( active_op_array ) -> opcodes		56971	0					
ANR	57132	CallExpression	CG ( active_op_array )		56971	0					
ANR	57133	Callee	CG		56971	0					
ANR	57134	Identifier	CG		56971	0					
ANR	57135	ArgumentList	active_op_array		56971	1					
ANR	57136	Argument	active_op_array		56971	0					
ANR	57137	Identifier	active_op_array		56971	0					
ANR	57138	Identifier	opcodes		56971	1					
ANR	57139	AdditiveExpression	num - 1		56971	1		-			
ANR	57140	Identifier	num		56971	0					
ANR	57141	PrimaryExpression	1		56971	1					
ANR	57142	Identifier	opcode		56971	1					
ANR	57143	Identifier	ZEND_TICKS		56971	1					
ANR	57144	CompoundStatement		26:69:1112:1112	56971	1					
ANR	57145	ExpressionStatement	-- num	7101:3:249265:249270	56971	0	True				
ANR	57146	UnaryExpression	-- num		56971	0					
ANR	57147	IncDec	--		56971	0					
ANR	57148	Identifier	num		56971	1					
ANR	57149	IfStatement	if ( num > 0 )		56971	2					
ANR	57150	Condition	num > 0	7103:6:249282:249288	56971	0	True				
ANR	57151	RelationalExpression	num > 0		56971	0		>			
ANR	57152	Identifier	num		56971	0					
ANR	57153	PrimaryExpression	0		56971	1					
ANR	57154	CompoundStatement		29:15:1143:1143	56971	1					
ANR	57155	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Namespace declaration statement has to be the very first statement in the script"" )"	7104:3:249296:249416	56971	0	True				
ANR	57156	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Namespace declaration statement has to be the very first statement in the script"" )"		56971	0					
ANR	57157	Callee	zend_error_noreturn		56971	0					
ANR	57158	Identifier	zend_error_noreturn		56971	0					
ANR	57159	ArgumentList	E_COMPILE_ERROR		56971	1					
ANR	57160	Argument	E_COMPILE_ERROR		56971	0					
ANR	57161	Identifier	E_COMPILE_ERROR		56971	0					
ANR	57162	Argument	"""Namespace declaration statement has to be the very first statement in the script"""		56971	1					
ANR	57163	PrimaryExpression	"""Namespace declaration statement has to be the very first statement in the script"""		56971	0					
ANR	57164	ExpressionStatement	CG ( in_namespace ) = 1	7108:1:249427:249447	56971	3	True				
ANR	57165	AssignmentExpression	CG ( in_namespace ) = 1		56971	0		=			
ANR	57166	CallExpression	CG ( in_namespace )		56971	0					
ANR	57167	Callee	CG		56971	0					
ANR	57168	Identifier	CG		56971	0					
ANR	57169	ArgumentList	in_namespace		56971	1					
ANR	57170	Argument	in_namespace		56971	0					
ANR	57171	Identifier	in_namespace		56971	0					
ANR	57172	PrimaryExpression	1		56971	1					
ANR	57173	IfStatement	if ( with_bracket )		56971	4					
ANR	57174	Condition	with_bracket	7109:5:249454:249465	56971	0	True				
ANR	57175	Identifier	with_bracket		56971	0					
ANR	57176	CompoundStatement		35:19:1320:1320	56971	1					
ANR	57177	ExpressionStatement	CG ( has_bracketed_namespaces ) = 1	7110:2:249472:249504	56971	0	True				
ANR	57178	AssignmentExpression	CG ( has_bracketed_namespaces ) = 1		56971	0		=			
ANR	57179	CallExpression	CG ( has_bracketed_namespaces )		56971	0					
ANR	57180	Callee	CG		56971	0					
ANR	57181	Identifier	CG		56971	0					
ANR	57182	ArgumentList	has_bracketed_namespaces		56971	1					
ANR	57183	Argument	has_bracketed_namespaces		56971	0					
ANR	57184	Identifier	has_bracketed_namespaces		56971	0					
ANR	57185	PrimaryExpression	1		56971	1					
ANR	57186	IfStatement	if ( name )		56971	5					
ANR	57187	Condition	name	7113:5:249515:249518	56971	0	True				
ANR	57188	Identifier	name		56971	0					
ANR	57189	CompoundStatement		39:11:1373:1373	56971	1					
ANR	57190	ExpressionStatement	"lcname = zend_str_tolower_dup ( Z_STRVAL ( name -> u . constant ) , Z_STRLEN ( name -> u . constant ) )"	7114:2:249525:249610	56971	0	True				
ANR	57191	AssignmentExpression	"lcname = zend_str_tolower_dup ( Z_STRVAL ( name -> u . constant ) , Z_STRLEN ( name -> u . constant ) )"		56971	0		=			
ANR	57192	Identifier	lcname		56971	0					
ANR	57193	CallExpression	"zend_str_tolower_dup ( Z_STRVAL ( name -> u . constant ) , Z_STRLEN ( name -> u . constant ) )"		56971	1					
ANR	57194	Callee	zend_str_tolower_dup		56971	0					
ANR	57195	Identifier	zend_str_tolower_dup		56971	0					
ANR	57196	ArgumentList	Z_STRVAL ( name -> u . constant )		56971	1					
ANR	57197	Argument	Z_STRVAL ( name -> u . constant )		56971	0					
ANR	57198	CallExpression	Z_STRVAL ( name -> u . constant )		56971	0					
ANR	57199	Callee	Z_STRVAL		56971	0					
ANR	57200	Identifier	Z_STRVAL		56971	0					
ANR	57201	ArgumentList	name -> u . constant		56971	1					
ANR	57202	Argument	name -> u . constant		56971	0					
ANR	57203	MemberAccess	name -> u . constant		56971	0					
ANR	57204	PtrMemberAccess	name -> u		56971	0					
ANR	57205	Identifier	name		56971	0					
ANR	57206	Identifier	u		56971	1					
ANR	57207	Identifier	constant		56971	1					
ANR	57208	Argument	Z_STRLEN ( name -> u . constant )		56971	1					
ANR	57209	CallExpression	Z_STRLEN ( name -> u . constant )		56971	0					
ANR	57210	Callee	Z_STRLEN		56971	0					
ANR	57211	Identifier	Z_STRLEN		56971	0					
ANR	57212	ArgumentList	name -> u . constant		56971	1					
ANR	57213	Argument	name -> u . constant		56971	0					
ANR	57214	MemberAccess	name -> u . constant		56971	0					
ANR	57215	PtrMemberAccess	name -> u		56971	0					
ANR	57216	Identifier	name		56971	0					
ANR	57217	Identifier	u		56971	1					
ANR	57218	Identifier	constant		56971	1					
ANR	57219	IfStatement	"if ( ( ( Z_STRLEN ( name -> u . constant ) == sizeof ( ""self"" ) - 1 ) && ! memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 ) ) || ( ( Z_STRLEN ( name -> u . constant ) == sizeof ( ""parent"" ) - 1 ) && ! memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 ) ) )"		56971	1					
ANR	57220	Condition	"( ( Z_STRLEN ( name -> u . constant ) == sizeof ( ""self"" ) - 1 ) && ! memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 ) ) || ( ( Z_STRLEN ( name -> u . constant ) == sizeof ( ""parent"" ) - 1 ) && ! memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 ) )"	7115:6:249618:249842	56971	0	True				
ANR	57221	OrExpression	"( ( Z_STRLEN ( name -> u . constant ) == sizeof ( ""self"" ) - 1 ) && ! memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 ) ) || ( ( Z_STRLEN ( name -> u . constant ) == sizeof ( ""parent"" ) - 1 ) && ! memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 ) )"		56971	0		||			
ANR	57222	AndExpression	"( Z_STRLEN ( name -> u . constant ) == sizeof ( ""self"" ) - 1 ) && ! memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 )"		56971	0		&&			
ANR	57223	EqualityExpression	"Z_STRLEN ( name -> u . constant ) == sizeof ( ""self"" ) - 1"		56971	0		==			
ANR	57224	CallExpression	Z_STRLEN ( name -> u . constant )		56971	0					
ANR	57225	Callee	Z_STRLEN		56971	0					
ANR	57226	Identifier	Z_STRLEN		56971	0					
ANR	57227	ArgumentList	name -> u . constant		56971	1					
ANR	57228	Argument	name -> u . constant		56971	0					
ANR	57229	MemberAccess	name -> u . constant		56971	0					
ANR	57230	PtrMemberAccess	name -> u		56971	0					
ANR	57231	Identifier	name		56971	0					
ANR	57232	Identifier	u		56971	1					
ANR	57233	Identifier	constant		56971	1					
ANR	57234	AdditiveExpression	"sizeof ( ""self"" ) - 1"		56971	1		-			
ANR	57235	SizeofExpression	"sizeof ( ""self"" )"		56971	0					
ANR	57236	Sizeof	sizeof		56971	0					
ANR	57237	PrimaryExpression	"""self"""		56971	1					
ANR	57238	PrimaryExpression	1		56971	1					
ANR	57239	UnaryOperationExpression	"! memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 )"		56971	1					
ANR	57240	UnaryOperator	!		56971	0					
ANR	57241	CallExpression	"memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 )"		56971	1					
ANR	57242	Callee	memcmp		56971	0					
ANR	57243	Identifier	memcmp		56971	0					
ANR	57244	ArgumentList	lcname		56971	1					
ANR	57245	Argument	lcname		56971	0					
ANR	57246	Identifier	lcname		56971	0					
ANR	57247	Argument	"""self"""		56971	1					
ANR	57248	PrimaryExpression	"""self"""		56971	0					
ANR	57249	Argument	"sizeof ( ""self"" ) - 1"		56971	2					
ANR	57250	AdditiveExpression	"sizeof ( ""self"" ) - 1"		56971	0		-			
ANR	57251	SizeofExpression	"sizeof ( ""self"" )"		56971	0					
ANR	57252	Sizeof	sizeof		56971	0					
ANR	57253	PrimaryExpression	"""self"""		56971	1					
ANR	57254	PrimaryExpression	1		56971	1					
ANR	57255	AndExpression	"( Z_STRLEN ( name -> u . constant ) == sizeof ( ""parent"" ) - 1 ) && ! memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 )"		56971	1		&&			
ANR	57256	EqualityExpression	"Z_STRLEN ( name -> u . constant ) == sizeof ( ""parent"" ) - 1"		56971	0		==			
ANR	57257	CallExpression	Z_STRLEN ( name -> u . constant )		56971	0					
ANR	57258	Callee	Z_STRLEN		56971	0					
ANR	57259	Identifier	Z_STRLEN		56971	0					
ANR	57260	ArgumentList	name -> u . constant		56971	1					
ANR	57261	Argument	name -> u . constant		56971	0					
ANR	57262	MemberAccess	name -> u . constant		56971	0					
ANR	57263	PtrMemberAccess	name -> u		56971	0					
ANR	57264	Identifier	name		56971	0					
ANR	57265	Identifier	u		56971	1					
ANR	57266	Identifier	constant		56971	1					
ANR	57267	AdditiveExpression	"sizeof ( ""parent"" ) - 1"		56971	1		-			
ANR	57268	SizeofExpression	"sizeof ( ""parent"" )"		56971	0					
ANR	57269	Sizeof	sizeof		56971	0					
ANR	57270	PrimaryExpression	"""parent"""		56971	1					
ANR	57271	PrimaryExpression	1		56971	1					
ANR	57272	UnaryOperationExpression	"! memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 )"		56971	1					
ANR	57273	UnaryOperator	!		56971	0					
ANR	57274	CallExpression	"memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 )"		56971	1					
ANR	57275	Callee	memcmp		56971	0					
ANR	57276	Identifier	memcmp		56971	0					
ANR	57277	ArgumentList	lcname		56971	1					
ANR	57278	Argument	lcname		56971	0					
ANR	57279	Identifier	lcname		56971	0					
ANR	57280	Argument	"""parent"""		56971	1					
ANR	57281	PrimaryExpression	"""parent"""		56971	0					
ANR	57282	Argument	"sizeof ( ""parent"" ) - 1"		56971	2					
ANR	57283	AdditiveExpression	"sizeof ( ""parent"" ) - 1"		56971	0		-			
ANR	57284	SizeofExpression	"sizeof ( ""parent"" )"		56971	0					
ANR	57285	Sizeof	sizeof		56971	0					
ANR	57286	PrimaryExpression	"""parent"""		56971	1					
ANR	57287	PrimaryExpression	1		56971	1					
ANR	57288	CompoundStatement		44:59:1697:1697	56971	1					
ANR	57289	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as namespace name"" , Z_STRVAL ( name -> u . constant ) )"	7119:3:249850:249951	56971	0	True				
ANR	57290	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as namespace name"" , Z_STRVAL ( name -> u . constant ) )"		56971	0					
ANR	57291	Callee	zend_error_noreturn		56971	0					
ANR	57292	Identifier	zend_error_noreturn		56971	0					
ANR	57293	ArgumentList	E_COMPILE_ERROR		56971	1					
ANR	57294	Argument	E_COMPILE_ERROR		56971	0					
ANR	57295	Identifier	E_COMPILE_ERROR		56971	0					
ANR	57296	Argument	"""Cannot use '%s' as namespace name"""		56971	1					
ANR	57297	PrimaryExpression	"""Cannot use '%s' as namespace name"""		56971	0					
ANR	57298	Argument	Z_STRVAL ( name -> u . constant )		56971	2					
ANR	57299	CallExpression	Z_STRVAL ( name -> u . constant )		56971	0					
ANR	57300	Callee	Z_STRVAL		56971	0					
ANR	57301	Identifier	Z_STRVAL		56971	0					
ANR	57302	ArgumentList	name -> u . constant		56971	1					
ANR	57303	Argument	name -> u . constant		56971	0					
ANR	57304	MemberAccess	name -> u . constant		56971	0					
ANR	57305	PtrMemberAccess	name -> u		56971	0					
ANR	57306	Identifier	name		56971	0					
ANR	57307	Identifier	u		56971	1					
ANR	57308	Identifier	constant		56971	1					
ANR	57309	ExpressionStatement	efree ( lcname )	7121:2:249959:249972	56971	2	True				
ANR	57310	CallExpression	efree ( lcname )		56971	0					
ANR	57311	Callee	efree		56971	0					
ANR	57312	Identifier	efree		56971	0					
ANR	57313	ArgumentList	lcname		56971	1					
ANR	57314	Argument	lcname		56971	0					
ANR	57315	Identifier	lcname		56971	0					
ANR	57316	IfStatement	if ( CG ( current_namespace ) )		56971	3					
ANR	57317	Condition	CG ( current_namespace )	7123:6:249981:250001	56971	0	True				
ANR	57318	CallExpression	CG ( current_namespace )		56971	0					
ANR	57319	Callee	CG		56971	0					
ANR	57320	Identifier	CG		56971	0					
ANR	57321	ArgumentList	current_namespace		56971	1					
ANR	57322	Argument	current_namespace		56971	0					
ANR	57323	Identifier	current_namespace		56971	0					
ANR	57324	CompoundStatement		49:29:1856:1856	56971	1					
ANR	57325	ExpressionStatement	zval_dtor ( CG ( current_namespace ) )	7124:3:250009:250041	56971	0	True				
ANR	57326	CallExpression	zval_dtor ( CG ( current_namespace ) )		56971	0					
ANR	57327	Callee	zval_dtor		56971	0					
ANR	57328	Identifier	zval_dtor		56971	0					
ANR	57329	ArgumentList	CG ( current_namespace )		56971	1					
ANR	57330	Argument	CG ( current_namespace )		56971	0					
ANR	57331	CallExpression	CG ( current_namespace )		56971	0					
ANR	57332	Callee	CG		56971	0					
ANR	57333	Identifier	CG		56971	0					
ANR	57334	ArgumentList	current_namespace		56971	1					
ANR	57335	Argument	current_namespace		56971	0					
ANR	57336	Identifier	current_namespace		56971	0					
ANR	57337	ElseStatement	else		56971	0					
ANR	57338	CompoundStatement		51:9:1904:1904	56971	0					
ANR	57339	ExpressionStatement	ALLOC_ZVAL ( CG ( current_namespace ) )	7126:3:250057:250090	56971	0	True				
ANR	57340	CallExpression	ALLOC_ZVAL ( CG ( current_namespace ) )		56971	0					
ANR	57341	Callee	ALLOC_ZVAL		56971	0					
ANR	57342	Identifier	ALLOC_ZVAL		56971	0					
ANR	57343	ArgumentList	CG ( current_namespace )		56971	1					
ANR	57344	Argument	CG ( current_namespace )		56971	0					
ANR	57345	CallExpression	CG ( current_namespace )		56971	0					
ANR	57346	Callee	CG		56971	0					
ANR	57347	Identifier	CG		56971	0					
ANR	57348	ArgumentList	current_namespace		56971	1					
ANR	57349	Argument	current_namespace		56971	0					
ANR	57350	Identifier	current_namespace		56971	0					
ANR	57351	ExpressionStatement	* CG ( current_namespace ) = name -> u . constant	7128:2:250098:250139	56971	4	True				
ANR	57352	AssignmentExpression	* CG ( current_namespace ) = name -> u . constant		56971	0		=			
ANR	57353	UnaryOperationExpression	* CG ( current_namespace )		56971	0					
ANR	57354	UnaryOperator	*		56971	0					
ANR	57355	CallExpression	CG ( current_namespace )		56971	1					
ANR	57356	Callee	CG		56971	0					
ANR	57357	Identifier	CG		56971	0					
ANR	57358	ArgumentList	current_namespace		56971	1					
ANR	57359	Argument	current_namespace		56971	0					
ANR	57360	Identifier	current_namespace		56971	0					
ANR	57361	MemberAccess	name -> u . constant		56971	1					
ANR	57362	PtrMemberAccess	name -> u		56971	0					
ANR	57363	Identifier	name		56971	0					
ANR	57364	Identifier	u		56971	1					
ANR	57365	Identifier	constant		56971	1					
ANR	57366	ElseStatement	else		56971	0					
ANR	57367	CompoundStatement		55:8:2001:2001	56971	0					
ANR	57368	IfStatement	if ( CG ( current_namespace ) )		56971	0					
ANR	57369	Condition	CG ( current_namespace )	7130:6:250157:250177	56971	0	True				
ANR	57370	CallExpression	CG ( current_namespace )		56971	0					
ANR	57371	Callee	CG		56971	0					
ANR	57372	Identifier	CG		56971	0					
ANR	57373	ArgumentList	current_namespace		56971	1					
ANR	57374	Argument	current_namespace		56971	0					
ANR	57375	Identifier	current_namespace		56971	0					
ANR	57376	CompoundStatement		56:29:2032:2032	56971	1					
ANR	57377	ExpressionStatement	zval_dtor ( CG ( current_namespace ) )	7131:3:250185:250217	56971	0	True				
ANR	57378	CallExpression	zval_dtor ( CG ( current_namespace ) )		56971	0					
ANR	57379	Callee	zval_dtor		56971	0					
ANR	57380	Identifier	zval_dtor		56971	0					
ANR	57381	ArgumentList	CG ( current_namespace )		56971	1					
ANR	57382	Argument	CG ( current_namespace )		56971	0					
ANR	57383	CallExpression	CG ( current_namespace )		56971	0					
ANR	57384	Callee	CG		56971	0					
ANR	57385	Identifier	CG		56971	0					
ANR	57386	ArgumentList	current_namespace		56971	1					
ANR	57387	Argument	current_namespace		56971	0					
ANR	57388	Identifier	current_namespace		56971	0					
ANR	57389	ExpressionStatement	FREE_ZVAL ( CG ( current_namespace ) )	7132:3:250222:250254	56971	1	True				
ANR	57390	CallExpression	FREE_ZVAL ( CG ( current_namespace ) )		56971	0					
ANR	57391	Callee	FREE_ZVAL		56971	0					
ANR	57392	Identifier	FREE_ZVAL		56971	0					
ANR	57393	ArgumentList	CG ( current_namespace )		56971	1					
ANR	57394	Argument	CG ( current_namespace )		56971	0					
ANR	57395	CallExpression	CG ( current_namespace )		56971	0					
ANR	57396	Callee	CG		56971	0					
ANR	57397	Identifier	CG		56971	0					
ANR	57398	ArgumentList	current_namespace		56971	1					
ANR	57399	Argument	current_namespace		56971	0					
ANR	57400	Identifier	current_namespace		56971	0					
ANR	57401	ExpressionStatement	CG ( current_namespace ) = NULL	7133:3:250259:250287	56971	2	True				
ANR	57402	AssignmentExpression	CG ( current_namespace ) = NULL		56971	0		=			
ANR	57403	CallExpression	CG ( current_namespace )		56971	0					
ANR	57404	Callee	CG		56971	0					
ANR	57405	Identifier	CG		56971	0					
ANR	57406	ArgumentList	current_namespace		56971	1					
ANR	57407	Argument	current_namespace		56971	0					
ANR	57408	Identifier	current_namespace		56971	0					
ANR	57409	Identifier	NULL		56971	1					
ANR	57410	IfStatement	if ( CG ( current_import ) )		56971	6					
ANR	57411	Condition	CG ( current_import )	7137:5:250302:250319	56971	0	True				
ANR	57412	CallExpression	CG ( current_import )		56971	0					
ANR	57413	Callee	CG		56971	0					
ANR	57414	Identifier	CG		56971	0					
ANR	57415	ArgumentList	current_import		56971	1					
ANR	57416	Argument	current_import		56971	0					
ANR	57417	Identifier	current_import		56971	0					
ANR	57418	CompoundStatement		63:25:2174:2174	56971	1					
ANR	57419	ExpressionStatement	zend_hash_destroy ( CG ( current_import ) )	7138:2:250326:250363	56971	0	True				
ANR	57420	CallExpression	zend_hash_destroy ( CG ( current_import ) )		56971	0					
ANR	57421	Callee	zend_hash_destroy		56971	0					
ANR	57422	Identifier	zend_hash_destroy		56971	0					
ANR	57423	ArgumentList	CG ( current_import )		56971	1					
ANR	57424	Argument	CG ( current_import )		56971	0					
ANR	57425	CallExpression	CG ( current_import )		56971	0					
ANR	57426	Callee	CG		56971	0					
ANR	57427	Identifier	CG		56971	0					
ANR	57428	ArgumentList	current_import		56971	1					
ANR	57429	Argument	current_import		56971	0					
ANR	57430	Identifier	current_import		56971	0					
ANR	57431	ExpressionStatement	efree ( CG ( current_import ) )	7139:2:250367:250392	56971	1	True				
ANR	57432	CallExpression	efree ( CG ( current_import ) )		56971	0					
ANR	57433	Callee	efree		56971	0					
ANR	57434	Identifier	efree		56971	0					
ANR	57435	ArgumentList	CG ( current_import )		56971	1					
ANR	57436	Argument	CG ( current_import )		56971	0					
ANR	57437	CallExpression	CG ( current_import )		56971	0					
ANR	57438	Callee	CG		56971	0					
ANR	57439	Identifier	CG		56971	0					
ANR	57440	ArgumentList	current_import		56971	1					
ANR	57441	Argument	current_import		56971	0					
ANR	57442	Identifier	current_import		56971	0					
ANR	57443	ExpressionStatement	CG ( current_import ) = NULL	7140:2:250396:250421	56971	2	True				
ANR	57444	AssignmentExpression	CG ( current_import ) = NULL		56971	0		=			
ANR	57445	CallExpression	CG ( current_import )		56971	0					
ANR	57446	Callee	CG		56971	0					
ANR	57447	Identifier	CG		56971	0					
ANR	57448	ArgumentList	current_import		56971	1					
ANR	57449	Argument	current_import		56971	0					
ANR	57450	Identifier	current_import		56971	0					
ANR	57451	Identifier	NULL		56971	1					
ANR	57452	IfStatement	if ( CG ( current_import_function ) )		56971	7					
ANR	57453	Condition	CG ( current_import_function )	7143:5:250432:250458	56971	0	True				
ANR	57454	CallExpression	CG ( current_import_function )		56971	0					
ANR	57455	Callee	CG		56971	0					
ANR	57456	Identifier	CG		56971	0					
ANR	57457	ArgumentList	current_import_function		56971	1					
ANR	57458	Argument	current_import_function		56971	0					
ANR	57459	Identifier	current_import_function		56971	0					
ANR	57460	CompoundStatement		69:34:2313:2313	56971	1					
ANR	57461	ExpressionStatement	zend_hash_destroy ( CG ( current_import_function ) )	7144:2:250465:250511	56971	0	True				
ANR	57462	CallExpression	zend_hash_destroy ( CG ( current_import_function ) )		56971	0					
ANR	57463	Callee	zend_hash_destroy		56971	0					
ANR	57464	Identifier	zend_hash_destroy		56971	0					
ANR	57465	ArgumentList	CG ( current_import_function )		56971	1					
ANR	57466	Argument	CG ( current_import_function )		56971	0					
ANR	57467	CallExpression	CG ( current_import_function )		56971	0					
ANR	57468	Callee	CG		56971	0					
ANR	57469	Identifier	CG		56971	0					
ANR	57470	ArgumentList	current_import_function		56971	1					
ANR	57471	Argument	current_import_function		56971	0					
ANR	57472	Identifier	current_import_function		56971	0					
ANR	57473	ExpressionStatement	efree ( CG ( current_import_function ) )	7145:2:250515:250549	56971	1	True				
ANR	57474	CallExpression	efree ( CG ( current_import_function ) )		56971	0					
ANR	57475	Callee	efree		56971	0					
ANR	57476	Identifier	efree		56971	0					
ANR	57477	ArgumentList	CG ( current_import_function )		56971	1					
ANR	57478	Argument	CG ( current_import_function )		56971	0					
ANR	57479	CallExpression	CG ( current_import_function )		56971	0					
ANR	57480	Callee	CG		56971	0					
ANR	57481	Identifier	CG		56971	0					
ANR	57482	ArgumentList	current_import_function		56971	1					
ANR	57483	Argument	current_import_function		56971	0					
ANR	57484	Identifier	current_import_function		56971	0					
ANR	57485	ExpressionStatement	CG ( current_import_function ) = NULL	7146:2:250553:250587	56971	2	True				
ANR	57486	AssignmentExpression	CG ( current_import_function ) = NULL		56971	0		=			
ANR	57487	CallExpression	CG ( current_import_function )		56971	0					
ANR	57488	Callee	CG		56971	0					
ANR	57489	Identifier	CG		56971	0					
ANR	57490	ArgumentList	current_import_function		56971	1					
ANR	57491	Argument	current_import_function		56971	0					
ANR	57492	Identifier	current_import_function		56971	0					
ANR	57493	Identifier	NULL		56971	1					
ANR	57494	IfStatement	if ( CG ( current_import_const ) )		56971	8					
ANR	57495	Condition	CG ( current_import_const )	7149:5:250598:250621	56971	0	True				
ANR	57496	CallExpression	CG ( current_import_const )		56971	0					
ANR	57497	Callee	CG		56971	0					
ANR	57498	Identifier	CG		56971	0					
ANR	57499	ArgumentList	current_import_const		56971	1					
ANR	57500	Argument	current_import_const		56971	0					
ANR	57501	Identifier	current_import_const		56971	0					
ANR	57502	CompoundStatement		75:31:2476:2476	56971	1					
ANR	57503	ExpressionStatement	zend_hash_destroy ( CG ( current_import_const ) )	7150:2:250628:250671	56971	0	True				
ANR	57504	CallExpression	zend_hash_destroy ( CG ( current_import_const ) )		56971	0					
ANR	57505	Callee	zend_hash_destroy		56971	0					
ANR	57506	Identifier	zend_hash_destroy		56971	0					
ANR	57507	ArgumentList	CG ( current_import_const )		56971	1					
ANR	57508	Argument	CG ( current_import_const )		56971	0					
ANR	57509	CallExpression	CG ( current_import_const )		56971	0					
ANR	57510	Callee	CG		56971	0					
ANR	57511	Identifier	CG		56971	0					
ANR	57512	ArgumentList	current_import_const		56971	1					
ANR	57513	Argument	current_import_const		56971	0					
ANR	57514	Identifier	current_import_const		56971	0					
ANR	57515	ExpressionStatement	efree ( CG ( current_import_const ) )	7151:2:250675:250706	56971	1	True				
ANR	57516	CallExpression	efree ( CG ( current_import_const ) )		56971	0					
ANR	57517	Callee	efree		56971	0					
ANR	57518	Identifier	efree		56971	0					
ANR	57519	ArgumentList	CG ( current_import_const )		56971	1					
ANR	57520	Argument	CG ( current_import_const )		56971	0					
ANR	57521	CallExpression	CG ( current_import_const )		56971	0					
ANR	57522	Callee	CG		56971	0					
ANR	57523	Identifier	CG		56971	0					
ANR	57524	ArgumentList	current_import_const		56971	1					
ANR	57525	Argument	current_import_const		56971	0					
ANR	57526	Identifier	current_import_const		56971	0					
ANR	57527	ExpressionStatement	CG ( current_import_const ) = NULL	7152:2:250710:250741	56971	2	True				
ANR	57528	AssignmentExpression	CG ( current_import_const ) = NULL		56971	0		=			
ANR	57529	CallExpression	CG ( current_import_const )		56971	0					
ANR	57530	Callee	CG		56971	0					
ANR	57531	Identifier	CG		56971	0					
ANR	57532	ArgumentList	current_import_const		56971	1					
ANR	57533	Argument	current_import_const		56971	0					
ANR	57534	Identifier	current_import_const		56971	0					
ANR	57535	Identifier	NULL		56971	1					
ANR	57536	IfStatement	if ( CG ( doc_comment ) )		56971	9					
ANR	57537	Condition	CG ( doc_comment )	7155:5:250752:250766	56971	0	True				
ANR	57538	CallExpression	CG ( doc_comment )		56971	0					
ANR	57539	Callee	CG		56971	0					
ANR	57540	Identifier	CG		56971	0					
ANR	57541	ArgumentList	doc_comment		56971	1					
ANR	57542	Argument	doc_comment		56971	0					
ANR	57543	Identifier	doc_comment		56971	0					
ANR	57544	CompoundStatement		81:22:2621:2621	56971	1					
ANR	57545	ExpressionStatement	efree ( CG ( doc_comment ) )	7156:2:250773:250795	56971	0	True				
ANR	57546	CallExpression	efree ( CG ( doc_comment ) )		56971	0					
ANR	57547	Callee	efree		56971	0					
ANR	57548	Identifier	efree		56971	0					
ANR	57549	ArgumentList	CG ( doc_comment )		56971	1					
ANR	57550	Argument	CG ( doc_comment )		56971	0					
ANR	57551	CallExpression	CG ( doc_comment )		56971	0					
ANR	57552	Callee	CG		56971	0					
ANR	57553	Identifier	CG		56971	0					
ANR	57554	ArgumentList	doc_comment		56971	1					
ANR	57555	Argument	doc_comment		56971	0					
ANR	57556	Identifier	doc_comment		56971	0					
ANR	57557	ExpressionStatement	CG ( doc_comment ) = NULL	7157:2:250799:250821	56971	1	True				
ANR	57558	AssignmentExpression	CG ( doc_comment ) = NULL		56971	0		=			
ANR	57559	CallExpression	CG ( doc_comment )		56971	0					
ANR	57560	Callee	CG		56971	0					
ANR	57561	Identifier	CG		56971	0					
ANR	57562	ArgumentList	doc_comment		56971	1					
ANR	57563	Argument	doc_comment		56971	0					
ANR	57564	Identifier	doc_comment		56971	0					
ANR	57565	Identifier	NULL		56971	1					
ANR	57566	ExpressionStatement	CG ( doc_comment_len ) = 0	7158:2:250825:250848	56971	2	True				
ANR	57567	AssignmentExpression	CG ( doc_comment_len ) = 0		56971	0		=			
ANR	57568	CallExpression	CG ( doc_comment_len )		56971	0					
ANR	57569	Callee	CG		56971	0					
ANR	57570	Identifier	CG		56971	0					
ANR	57571	ArgumentList	doc_comment_len		56971	1					
ANR	57572	Argument	doc_comment_len		56971	0					
ANR	57573	Identifier	doc_comment_len		56971	0					
ANR	57574	PrimaryExpression	0		56971	1					
ANR	57575	ReturnType	void		56971	1					
ANR	57576	Identifier	zend_do_begin_namespace		56971	2					
ANR	57577	ParameterList	"const znode * name , zend_bool with_bracket TSRMLS_DC"		56971	3					
ANR	57578	Parameter	const znode * name	7074:29:248084:248100	56971	0	True				
ANR	57579	ParameterType	const znode *		56971	0					
ANR	57580	Identifier	name		56971	1					
ANR	57581	Parameter	zend_bool with_bracket TSRMLS_DC	7074:48:248103:248134	56971	1	True				
ANR	57582	ParameterType	zend_bool with_bracket		56971	0					
ANR	57583	Identifier	TSRMLS_DC		56971	1					
ANR	57584	CFGEntryNode	ENTRY		56971		True				
ANR	57585	CFGExitNode	EXIT		56971		True				
ANR	57586	Symbol	doc_comment		56971						
ANR	57587	Symbol	in_namespace		56971						
ANR	57588	Symbol	E_COMPILE_ERROR		56971						
ANR	57589	Symbol	num		56971						
ANR	57590	Symbol	* CG		56971						
ANR	57591	Symbol	name -> u		56971						
ANR	57592	Symbol	* CG ( current_namespace )		56971						
ANR	57593	Symbol	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode		56971						
ANR	57594	Symbol	Z_STRLEN		56971						
ANR	57595	Symbol	TSRMLS_DC		56971						
ANR	57596	Symbol	CG ( active_op_array ) -> opcodes		56971						
ANR	57597	Symbol	CG ( active_op_array ) -> last		56971						
ANR	57598	Symbol	* * CG		56971						
ANR	57599	Symbol	memcmp		56971						
ANR	57600	Symbol	name -> u . constant		56971						
ANR	57601	Symbol	Z_STRVAL		56971						
ANR	57602	Symbol	with_bracket		56971						
ANR	57603	Symbol	ZEND_TICKS		56971						
ANR	57604	Symbol	* CG ( active_op_array ) -> opcodes		56971						
ANR	57605	Symbol	zend_str_tolower_dup		56971						
ANR	57606	Symbol	* name		56971						
ANR	57607	Symbol	NULL		56971						
ANR	57608	Symbol	CG		56971						
ANR	57609	Symbol	current_import_const		56971						
ANR	57610	Symbol	active_op_array		56971						
ANR	57611	Symbol	has_bracketed_namespaces		56971						
ANR	57612	Symbol	* num		56971						
ANR	57613	Symbol	doc_comment_len		56971						
ANR	57614	Symbol	ZEND_EXT_STMT		56971						
ANR	57615	Symbol	lcname		56971						
ANR	57616	Symbol	current_namespace		56971						
ANR	57617	Symbol	name		56971						
ANR	57618	Symbol	current_import_function		56971						
ANR	57619	Symbol	current_import		56971						
ANR	57620	DeclStmt									
ANR	57621	Decl							char	char *	lcname
ANR	57622	DeclStmt									
ANR	57623	Decl							zval	zval *	name
ANR	57624	Decl							zval	zval *	ns
ANR	57625	Decl							zval	zval	tmp
ANR	57626	DeclStmt									
ANR	57627	Decl							zend_bool	zend_bool	warn
ANR	57628	DeclStmt									
ANR	57629	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	57630	DeclStmt									
ANR	57631	Decl							const char	const char *	p
ANR	57632	DeclStmt									
ANR	57633	Decl							char	char *	c_ns_name
ANR	57634	DeclStmt									
ANR	57635	Decl							char	char *	tmp2
ANR	57636	DeclStmt									
ANR	57637	Decl							char	char *	c_tmp
ANR	57638	DeclStmt									
ANR	57639	Decl							char	char *	lookup_name
ANR	57640	DeclStmt									
ANR	57641	Decl							zval	zval *	name
ANR	57642	Decl							zval	zval *	ns
ANR	57643	Decl							zval	zval	tmp
ANR	57644	DeclStmt									
ANR	57645	Decl							zend_bool	zend_bool	warn
ANR	57646	DeclStmt									
ANR	57647	Decl							const char	const char *	p
ANR	57648	DeclStmt									
ANR	57649	Decl							char	char *	c_ns_name
ANR	57650	DeclStmt									
ANR	57651	Decl							char	char *	tmp2
ANR	57652	DeclStmt									
ANR	57653	Decl							zend_function	zend_function *	function
ANR	57654	DeclStmt									
ANR	57655	Decl							char	char *	c_tmp
ANR	57656	DeclStmt									
ANR	57657	Decl							const char	const char *	filename
ANR	57658	DeclStmt									
ANR	57659	Decl							char	char *	c_tmp
ANR	57660	DeclStmt									
ANR	57661	Decl							zend_op	zend_op *	opline
ANR	57662	DeclStmt									
ANR	57663	Decl							zval	zval * *	ns_name
ANR	57664	DeclStmt									
ANR	57665	Decl							znode	znode	tmp
ANR	57666	DeclStmt									
ANR	57667	Decl							char	char *	tmp
ANR	57668	Function	zend_dirname	7454:0:261377:263462							
ANR	57669	FunctionDef	"zend_dirname (char * path , size_t len)"		57668	0					
ANR	57670	CompoundStatement		7455:0:261430:263462	57668	0					
ANR	57671	Statement	register	7456:1:261433:261440	57668	0	True				
ANR	57672	IdentifierDeclStatement	char * end = path + len - 1 ;	7456:10:261442:261468	57668	1	True				
ANR	57673	IdentifierDecl	* end = path + len - 1		57668	0					
ANR	57674	IdentifierDeclType	char *		57668	0					
ANR	57675	Identifier	end		57668	1					
ANR	57676	AssignmentExpression	* end = path + len - 1		57668	2		=			
ANR	57677	Identifier	end		57668	0					
ANR	57678	AdditiveExpression	path + len - 1		57668	1		+			
ANR	57679	Identifier	path		57668	0					
ANR	57680	AdditiveExpression	len - 1		57668	1		-			
ANR	57681	Identifier	len		57668	0					
ANR	57682	PrimaryExpression	1		57668	1					
ANR	57683	IdentifierDeclStatement	unsigned int len_adjust = 0 ;	7457:1:261471:261498	57668	2	True				
ANR	57684	IdentifierDecl	len_adjust = 0		57668	0					
ANR	57685	IdentifierDeclType	unsigned int		57668	0					
ANR	57686	Identifier	len_adjust		57668	1					
ANR	57687	AssignmentExpression	len_adjust = 0		57668	2		=			
ANR	57688	Identifier	len_adjust		57668	0					
ANR	57689	PrimaryExpression	0		57668	1					
ANR	57690	IfStatement	if ( ( 2 <= len ) && isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] ) && ( ':' == path [ 1 ] ) )		57668	3					
ANR	57691	Condition	( 2 <= len ) && isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] ) && ( ':' == path [ 1 ] )	7463:5:261675:261748	57668	0	True				
ANR	57692	AndExpression	( 2 <= len ) && isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] ) && ( ':' == path [ 1 ] )		57668	0		&&			
ANR	57693	RelationalExpression	2 <= len		57668	0		<=			
ANR	57694	PrimaryExpression	2		57668	0					
ANR	57695	Identifier	len		57668	1					
ANR	57696	AndExpression	isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] ) && ( ':' == path [ 1 ] )		57668	1		&&			
ANR	57697	CallExpression	isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] )		57668	0					
ANR	57698	Callee	isalpha		57668	0					
ANR	57699	Identifier	isalpha		57668	0					
ANR	57700	ArgumentList	( int ) ( ( unsigned char * ) path ) [ 0 ]		57668	1					
ANR	57701	Argument	( int ) ( ( unsigned char * ) path ) [ 0 ]		57668	0					
ANR	57702	CastExpression	( int ) ( ( unsigned char * ) path ) [ 0 ]		57668	0					
ANR	57703	CastTarget	int		57668	0					
ANR	57704	ArrayIndexing	( ( unsigned char * ) path ) [ 0 ]		57668	1					
ANR	57705	CastExpression	( unsigned char * ) path		57668	0					
ANR	57706	CastTarget	unsigned char *		57668	0					
ANR	57707	Identifier	path		57668	1					
ANR	57708	PrimaryExpression	0		57668	1					
ANR	57709	EqualityExpression	':' == path [ 1 ]		57668	1		==			
ANR	57710	PrimaryExpression	':'		57668	0					
ANR	57711	ArrayIndexing	path [ 1 ]		57668	1					
ANR	57712	Identifier	path		57668	0					
ANR	57713	PrimaryExpression	1		57668	1					
ANR	57714	CompoundStatement		9:81:320:320	57668	1					
ANR	57715	ExpressionStatement	path += 2	7465:2:261817:261826	57668	0	True				
ANR	57716	AssignmentExpression	path += 2		57668	0		+=			
ANR	57717	Identifier	path		57668	0					
ANR	57718	PrimaryExpression	2		57668	1					
ANR	57719	ExpressionStatement	len_adjust += 2	7466:2:261830:261845	57668	1	True				
ANR	57720	AssignmentExpression	len_adjust += 2		57668	0		+=			
ANR	57721	Identifier	len_adjust		57668	0					
ANR	57722	PrimaryExpression	2		57668	1					
ANR	57723	IfStatement	if ( 2 == len )		57668	2					
ANR	57724	Condition	2 == len	7467:6:261853:261860	57668	0	True				
ANR	57725	EqualityExpression	2 == len		57668	0		==			
ANR	57726	PrimaryExpression	2		57668	0					
ANR	57727	Identifier	len		57668	1					
ANR	57728	CompoundStatement		13:16:432:432	57668	1					
ANR	57729	ReturnStatement	return len ;	7472:3:262028:262038	57668	0	True				
ANR	57730	Identifier	len		57668	0					
ANR	57731	IfStatement	if ( len == 0 )		57668	4					
ANR	57732	Condition	len == 0	7493:5:262526:262533	57668	0	True				
ANR	57733	EqualityExpression	len == 0		57668	0		==			
ANR	57734	Identifier	len		57668	0					
ANR	57735	PrimaryExpression	0		57668	1					
ANR	57736	CompoundStatement		39:15:1105:1105	57668	1					
ANR	57737	ReturnStatement	return 0 ;	7495:2:262577:262585	57668	0	True				
ANR	57738	PrimaryExpression	0		57668	0					
ANR	57739	WhileStatement	while ( end >= path && IS_SLASH_P ( end ) )		57668	5					
ANR	57740	Condition	end >= path && IS_SLASH_P ( end )	7499:8:262629:262658	57668	0	True				
ANR	57741	AndExpression	end >= path && IS_SLASH_P ( end )		57668	0		&&			
ANR	57742	RelationalExpression	end >= path		57668	0		>=			
ANR	57743	Identifier	end		57668	0					
ANR	57744	Identifier	path		57668	1					
ANR	57745	CallExpression	IS_SLASH_P ( end )		57668	1					
ANR	57746	Callee	IS_SLASH_P		57668	0					
ANR	57747	Identifier	IS_SLASH_P		57668	0					
ANR	57748	ArgumentList	end		57668	1					
ANR	57749	Argument	end		57668	0					
ANR	57750	Identifier	end		57668	0					
ANR	57751	CompoundStatement		45:40:1230:1230	57668	1					
ANR	57752	ExpressionStatement	end --	7500:2:262665:262670	57668	0	True				
ANR	57753	PostIncDecOperationExpression	end --		57668	0					
ANR	57754	Identifier	end		57668	0					
ANR	57755	IncDec	--		57668	1					
ANR	57756	IfStatement	if ( end < path )		57668	6					
ANR	57757	Condition	end < path	7502:5:262680:262689	57668	0	True				
ANR	57758	RelationalExpression	end < path		57668	0		<			
ANR	57759	Identifier	end		57668	0					
ANR	57760	Identifier	path		57668	1					
ANR	57761	CompoundStatement		48:17:1261:1261	57668	1					
ANR	57762	ExpressionStatement	path [ 0 ] = DEFAULT_SLASH	7504:2:262736:262759	57668	0	True				
ANR	57763	AssignmentExpression	path [ 0 ] = DEFAULT_SLASH		57668	0		=			
ANR	57764	ArrayIndexing	path [ 0 ]		57668	0					
ANR	57765	Identifier	path		57668	0					
ANR	57766	PrimaryExpression	0		57668	1					
ANR	57767	Identifier	DEFAULT_SLASH		57668	1					
ANR	57768	ExpressionStatement	path [ 1 ] = '\\0'	7505:2:262763:262777	57668	1	True				
ANR	57769	AssignmentExpression	path [ 1 ] = '\\0'		57668	0		=			
ANR	57770	ArrayIndexing	path [ 1 ]		57668	0					
ANR	57771	Identifier	path		57668	0					
ANR	57772	PrimaryExpression	1		57668	1					
ANR	57773	PrimaryExpression	'\\0'		57668	1					
ANR	57774	ReturnStatement	return 1 + len_adjust ;	7506:2:262781:262802	57668	2	True				
ANR	57775	AdditiveExpression	1 + len_adjust		57668	0		+			
ANR	57776	PrimaryExpression	1		57668	0					
ANR	57777	Identifier	len_adjust		57668	1					
ANR	57778	WhileStatement	while ( end >= path && ! IS_SLASH_P ( end ) )		57668	7					
ANR	57779	Condition	end >= path && ! IS_SLASH_P ( end )	7510:8:262838:262868	57668	0	True				
ANR	57780	AndExpression	end >= path && ! IS_SLASH_P ( end )		57668	0		&&			
ANR	57781	RelationalExpression	end >= path		57668	0		>=			
ANR	57782	Identifier	end		57668	0					
ANR	57783	Identifier	path		57668	1					
ANR	57784	UnaryOperationExpression	! IS_SLASH_P ( end )		57668	1					
ANR	57785	UnaryOperator	!		57668	0					
ANR	57786	CallExpression	IS_SLASH_P ( end )		57668	1					
ANR	57787	Callee	IS_SLASH_P		57668	0					
ANR	57788	Identifier	IS_SLASH_P		57668	0					
ANR	57789	ArgumentList	end		57668	1					
ANR	57790	Argument	end		57668	0					
ANR	57791	Identifier	end		57668	0					
ANR	57792	CompoundStatement		56:41:1440:1440	57668	1					
ANR	57793	ExpressionStatement	end --	7511:2:262875:262880	57668	0	True				
ANR	57794	PostIncDecOperationExpression	end --		57668	0					
ANR	57795	Identifier	end		57668	0					
ANR	57796	IncDec	--		57668	1					
ANR	57797	IfStatement	if ( end < path )		57668	8					
ANR	57798	Condition	end < path	7513:5:262890:262899	57668	0	True				
ANR	57799	RelationalExpression	end < path		57668	0		<			
ANR	57800	Identifier	end		57668	0					
ANR	57801	Identifier	path		57668	1					
ANR	57802	CompoundStatement		59:17:1471:1471	57668	1					
ANR	57803	IfStatement	if ( len_adjust == 0 )		57668	0					
ANR	57804	Condition	len_adjust == 0	7516:6:262970:262984	57668	0	True				
ANR	57805	EqualityExpression	len_adjust == 0		57668	0		==			
ANR	57806	Identifier	len_adjust		57668	0					
ANR	57807	PrimaryExpression	0		57668	1					
ANR	57808	CompoundStatement		62:23:1556:1556	57668	1					
ANR	57809	ExpressionStatement	path [ 0 ] = '.'	7517:3:262992:263005	57668	0	True				
ANR	57810	AssignmentExpression	path [ 0 ] = '.'		57668	0		=			
ANR	57811	ArrayIndexing	path [ 0 ]		57668	0					
ANR	57812	Identifier	path		57668	0					
ANR	57813	PrimaryExpression	0		57668	1					
ANR	57814	PrimaryExpression	'.'		57668	1					
ANR	57815	ExpressionStatement	path [ 1 ] = '\\0'	7518:3:263010:263024	57668	1	True				
ANR	57816	AssignmentExpression	path [ 1 ] = '\\0'		57668	0		=			
ANR	57817	ArrayIndexing	path [ 1 ]		57668	0					
ANR	57818	Identifier	path		57668	0					
ANR	57819	PrimaryExpression	1		57668	1					
ANR	57820	PrimaryExpression	'\\0'		57668	1					
ANR	57821	ReturnStatement	return 1 ;	7519:3:263029:263037	57668	2	True				
ANR	57822	PrimaryExpression	1		57668	0					
ANR	57823	ElseStatement	else		57668	0					
ANR	57824	CompoundStatement		66:9:1642:1642	57668	0					
ANR	57825	ExpressionStatement	path [ 0 ] = '\\0'	7521:3:263078:263092	57668	0	True				
ANR	57826	AssignmentExpression	path [ 0 ] = '\\0'		57668	0		=			
ANR	57827	ArrayIndexing	path [ 0 ]		57668	0					
ANR	57828	Identifier	path		57668	0					
ANR	57829	PrimaryExpression	0		57668	1					
ANR	57830	PrimaryExpression	'\\0'		57668	1					
ANR	57831	ReturnStatement	return len_adjust ;	7522:3:263097:263114	57668	1	True				
ANR	57832	Identifier	len_adjust		57668	0					
ANR	57833	WhileStatement	while ( end >= path && IS_SLASH_P ( end ) )		57668	9					
ANR	57834	Condition	end >= path && IS_SLASH_P ( end )	7532:8:263258:263287	57668	0	True				
ANR	57835	AndExpression	end >= path && IS_SLASH_P ( end )		57668	0		&&			
ANR	57836	RelationalExpression	end >= path		57668	0		>=			
ANR	57837	Identifier	end		57668	0					
ANR	57838	Identifier	path		57668	1					
ANR	57839	CallExpression	IS_SLASH_P ( end )		57668	1					
ANR	57840	Callee	IS_SLASH_P		57668	0					
ANR	57841	Identifier	IS_SLASH_P		57668	0					
ANR	57842	ArgumentList	end		57668	1					
ANR	57843	Argument	end		57668	0					
ANR	57844	Identifier	end		57668	0					
ANR	57845	CompoundStatement		78:40:1859:1859	57668	1					
ANR	57846	ExpressionStatement	end --	7533:2:263294:263299	57668	0	True				
ANR	57847	PostIncDecOperationExpression	end --		57668	0					
ANR	57848	Identifier	end		57668	0					
ANR	57849	IncDec	--		57668	1					
ANR	57850	IfStatement	if ( end < path )		57668	10					
ANR	57851	Condition	end < path	7535:5:263309:263318	57668	0	True				
ANR	57852	RelationalExpression	end < path		57668	0		<			
ANR	57853	Identifier	end		57668	0					
ANR	57854	Identifier	path		57668	1					
ANR	57855	CompoundStatement		81:17:1890:1890	57668	1					
ANR	57856	ExpressionStatement	path [ 0 ] = DEFAULT_SLASH	7536:2:263325:263348	57668	0	True				
ANR	57857	AssignmentExpression	path [ 0 ] = DEFAULT_SLASH		57668	0		=			
ANR	57858	ArrayIndexing	path [ 0 ]		57668	0					
ANR	57859	Identifier	path		57668	0					
ANR	57860	PrimaryExpression	0		57668	1					
ANR	57861	Identifier	DEFAULT_SLASH		57668	1					
ANR	57862	ExpressionStatement	path [ 1 ] = '\\0'	7537:2:263352:263366	57668	1	True				
ANR	57863	AssignmentExpression	path [ 1 ] = '\\0'		57668	0		=			
ANR	57864	ArrayIndexing	path [ 1 ]		57668	0					
ANR	57865	Identifier	path		57668	0					
ANR	57866	PrimaryExpression	1		57668	1					
ANR	57867	PrimaryExpression	'\\0'		57668	1					
ANR	57868	ReturnStatement	return 1 + len_adjust ;	7538:2:263370:263391	57668	2	True				
ANR	57869	AdditiveExpression	1 + len_adjust		57668	0		+			
ANR	57870	PrimaryExpression	1		57668	0					
ANR	57871	Identifier	len_adjust		57668	1					
ANR	57872	ExpressionStatement	* ( end + 1 ) = '\\0'	7540:1:263397:263412	57668	11	True				
ANR	57873	AssignmentExpression	* ( end + 1 ) = '\\0'		57668	0		=			
ANR	57874	UnaryOperationExpression	* ( end + 1 )		57668	0					
ANR	57875	UnaryOperator	*		57668	0					
ANR	57876	AdditiveExpression	end + 1		57668	1		+			
ANR	57877	Identifier	end		57668	0					
ANR	57878	PrimaryExpression	1		57668	1					
ANR	57879	PrimaryExpression	'\\0'		57668	1					
ANR	57880	ReturnStatement	return ( size_t ) ( end + 1 - path ) + len_adjust ;	7542:1:263416:263460	57668	12	True				
ANR	57881	AdditiveExpression	( size_t ) ( end + 1 - path ) + len_adjust		57668	0		+			
ANR	57882	CastExpression	( size_t ) ( end + 1 - path )		57668	0					
ANR	57883	CastTarget	size_t		57668	0					
ANR	57884	AdditiveExpression	end + 1 - path		57668	1		+			
ANR	57885	Identifier	end		57668	0					
ANR	57886	AdditiveExpression	1 - path		57668	1		-			
ANR	57887	PrimaryExpression	1		57668	0					
ANR	57888	Identifier	path		57668	1					
ANR	57889	Identifier	len_adjust		57668	1					
ANR	57890	ReturnType	ZEND_API size_t		57668	1					
ANR	57891	Identifier	zend_dirname		57668	2					
ANR	57892	ParameterList	"char * path , size_t len"		57668	3					
ANR	57893	Parameter	char * path	7454:29:261406:261415	57668	0	True				
ANR	57894	ParameterType	char *		57668	0					
ANR	57895	Identifier	path		57668	1					
ANR	57896	Parameter	size_t len	7454:41:261418:261427	57668	1	True				
ANR	57897	ParameterType	size_t		57668	0					
ANR	57898	Identifier	len		57668	1					
ANR	57899	CFGEntryNode	ENTRY		57668		True				
ANR	57900	CFGExitNode	EXIT		57668		True				
ANR	57901	Symbol	path		57668						
ANR	57902	Symbol	isalpha		57668						
ANR	57903	Symbol	DEFAULT_SLASH		57668						
ANR	57904	Symbol	len		57668						
ANR	57905	Symbol	* ( end + 1 )		57668						
ANR	57906	Symbol	IS_SLASH_P		57668						
ANR	57907	Symbol	* path		57668						
ANR	57908	Symbol	end		57668						
ANR	57909	Symbol	* end		57668						
ANR	57910	Symbol	len_adjust		57668						
