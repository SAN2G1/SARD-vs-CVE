command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	107532	File	data/converged/CVE-2017-11142_php-src/Zend_zend_stack.c								
ANR	107533	Function	zend_stack_init	25:0:1279:1405							
ANR	107534	FunctionDef	zend_stack_init (zend_stack * stack)		107533	0					
ANR	107535	CompoundStatement		26:0:1327:1405	107533	0					
ANR	107536	ExpressionStatement	stack -> top = 0	27:1:1330:1344	107533	0	True				
ANR	107537	AssignmentExpression	stack -> top = 0		107533	0		=			
ANR	107538	PtrMemberAccess	stack -> top		107533	0					
ANR	107539	Identifier	stack		107533	0					
ANR	107540	Identifier	top		107533	1					
ANR	107541	PrimaryExpression	0		107533	1					
ANR	107542	ExpressionStatement	stack -> max = 0	28:1:1347:1361	107533	1	True				
ANR	107543	AssignmentExpression	stack -> max = 0		107533	0		=			
ANR	107544	PtrMemberAccess	stack -> max		107533	0					
ANR	107545	Identifier	stack		107533	0					
ANR	107546	Identifier	max		107533	1					
ANR	107547	PrimaryExpression	0		107533	1					
ANR	107548	ExpressionStatement	stack -> elements = NULL	29:1:1364:1386	107533	2	True				
ANR	107549	AssignmentExpression	stack -> elements = NULL		107533	0		=			
ANR	107550	PtrMemberAccess	stack -> elements		107533	0					
ANR	107551	Identifier	stack		107533	0					
ANR	107552	Identifier	elements		107533	1					
ANR	107553	Identifier	NULL		107533	1					
ANR	107554	ReturnStatement	return SUCCESS ;	30:1:1389:1403	107533	3	True				
ANR	107555	Identifier	SUCCESS		107533	0					
ANR	107556	ReturnType	ZEND_API int		107533	1					
ANR	107557	Identifier	zend_stack_init		107533	2					
ANR	107558	ParameterList	zend_stack * stack		107533	3					
ANR	107559	Parameter	zend_stack * stack	25:29:1308:1324	107533	0	True				
ANR	107560	ParameterType	zend_stack *		107533	0					
ANR	107561	Identifier	stack		107533	1					
ANR	107562	CFGEntryNode	ENTRY		107533		True				
ANR	107563	CFGExitNode	EXIT		107533		True				
ANR	107564	Symbol	stack		107533						
ANR	107565	Symbol	NULL		107533						
ANR	107566	Symbol	SUCCESS		107533						
ANR	107567	Symbol	* stack		107533						
ANR	107568	Symbol	stack -> top		107533						
ANR	107569	Symbol	stack -> elements		107533						
ANR	107570	Symbol	stack -> max		107533						
ANR	107571	Function	zend_stack_push	33:0:1408:1861							
ANR	107572	FunctionDef	"zend_stack_push (zend_stack * stack , const void * element , int size)"		107571	0					
ANR	107573	CompoundStatement		34:0:1487:1861	107571	0					
ANR	107574	IfStatement	if ( stack -> top >= stack -> max )		107571	0					
ANR	107575	Condition	stack -> top >= stack -> max	35:5:1494:1517	107571	0	True				
ANR	107576	RelationalExpression	stack -> top >= stack -> max		107571	0		>=			
ANR	107577	PtrMemberAccess	stack -> top		107571	0					
ANR	107578	Identifier	stack		107571	0					
ANR	107579	Identifier	top		107571	1					
ANR	107580	PtrMemberAccess	stack -> max		107571	1					
ANR	107581	Identifier	stack		107571	0					
ANR	107582	Identifier	max		107571	1					
ANR	107583	CompoundStatement		2:31:32:32	107571	1					
ANR	107584	ExpressionStatement	"stack -> elements = ( void * * ) erealloc ( stack -> elements , ( sizeof ( void * * ) * ( stack -> max += STACK_BLOCK_SIZE ) ) )"	36:2:1563:1677	107571	0	True				
ANR	107585	AssignmentExpression	"stack -> elements = ( void * * ) erealloc ( stack -> elements , ( sizeof ( void * * ) * ( stack -> max += STACK_BLOCK_SIZE ) ) )"		107571	0		=			
ANR	107586	PtrMemberAccess	stack -> elements		107571	0					
ANR	107587	Identifier	stack		107571	0					
ANR	107588	Identifier	elements		107571	1					
ANR	107589	CastExpression	"( void * * ) erealloc ( stack -> elements , ( sizeof ( void * * ) * ( stack -> max += STACK_BLOCK_SIZE ) ) )"		107571	1					
ANR	107590	CastTarget	void * *		107571	0					
ANR	107591	CallExpression	"erealloc ( stack -> elements , ( sizeof ( void * * ) * ( stack -> max += STACK_BLOCK_SIZE ) ) )"		107571	1					
ANR	107592	Callee	erealloc		107571	0					
ANR	107593	Identifier	erealloc		107571	0					
ANR	107594	ArgumentList	stack -> elements		107571	1					
ANR	107595	Argument	stack -> elements		107571	0					
ANR	107596	PtrMemberAccess	stack -> elements		107571	0					
ANR	107597	Identifier	stack		107571	0					
ANR	107598	Identifier	elements		107571	1					
ANR	107599	Argument	sizeof ( void * * ) * ( stack -> max += STACK_BLOCK_SIZE )		107571	1					
ANR	107600	MultiplicativeExpression	sizeof ( void * * ) * ( stack -> max += STACK_BLOCK_SIZE )		107571	0		*			
ANR	107601	SizeofExpression	sizeof ( void * * )		107571	0					
ANR	107602	Sizeof	sizeof		107571	0					
ANR	107603	SizeofOperand	void * *		107571	1					
ANR	107604	AssignmentExpression	stack -> max += STACK_BLOCK_SIZE		107571	1		+=			
ANR	107605	PtrMemberAccess	stack -> max		107571	0					
ANR	107606	Identifier	stack		107571	0					
ANR	107607	Identifier	max		107571	1					
ANR	107608	Identifier	STACK_BLOCK_SIZE		107571	1					
ANR	107609	IfStatement	if ( ! stack -> elements )		107571	1					
ANR	107610	Condition	! stack -> elements	38:6:1685:1700	107571	0	True				
ANR	107611	UnaryOperationExpression	! stack -> elements		107571	0					
ANR	107612	UnaryOperator	!		107571	0					
ANR	107613	PtrMemberAccess	stack -> elements		107571	1					
ANR	107614	Identifier	stack		107571	0					
ANR	107615	Identifier	elements		107571	1					
ANR	107616	CompoundStatement		5:24:215:215	107571	1					
ANR	107617	ReturnStatement	return FAILURE ;	39:3:1708:1722	107571	0	True				
ANR	107618	Identifier	FAILURE		107571	0					
ANR	107619	ExpressionStatement	stack -> elements [ stack -> top ] = ( void * ) emalloc ( size )	42:1:1732:1784	107571	1	True				
ANR	107620	AssignmentExpression	stack -> elements [ stack -> top ] = ( void * ) emalloc ( size )		107571	0		=			
ANR	107621	ArrayIndexing	stack -> elements [ stack -> top ]		107571	0					
ANR	107622	PtrMemberAccess	stack -> elements		107571	0					
ANR	107623	Identifier	stack		107571	0					
ANR	107624	Identifier	elements		107571	1					
ANR	107625	PtrMemberAccess	stack -> top		107571	1					
ANR	107626	Identifier	stack		107571	0					
ANR	107627	Identifier	top		107571	1					
ANR	107628	CastExpression	( void * ) emalloc ( size )		107571	1					
ANR	107629	CastTarget	void *		107571	0					
ANR	107630	CallExpression	emalloc ( size )		107571	1					
ANR	107631	Callee	emalloc		107571	0					
ANR	107632	Identifier	emalloc		107571	0					
ANR	107633	ArgumentList	size		107571	1					
ANR	107634	Argument	size		107571	0					
ANR	107635	Identifier	size		107571	0					
ANR	107636	ExpressionStatement	"memcpy ( stack -> elements [ stack -> top ] , element , size )"	43:1:1787:1837	107571	2	True				
ANR	107637	CallExpression	"memcpy ( stack -> elements [ stack -> top ] , element , size )"		107571	0					
ANR	107638	Callee	memcpy		107571	0					
ANR	107639	Identifier	memcpy		107571	0					
ANR	107640	ArgumentList	stack -> elements [ stack -> top ]		107571	1					
ANR	107641	Argument	stack -> elements [ stack -> top ]		107571	0					
ANR	107642	ArrayIndexing	stack -> elements [ stack -> top ]		107571	0					
ANR	107643	PtrMemberAccess	stack -> elements		107571	0					
ANR	107644	Identifier	stack		107571	0					
ANR	107645	Identifier	elements		107571	1					
ANR	107646	PtrMemberAccess	stack -> top		107571	1					
ANR	107647	Identifier	stack		107571	0					
ANR	107648	Identifier	top		107571	1					
ANR	107649	Argument	element		107571	1					
ANR	107650	Identifier	element		107571	0					
ANR	107651	Argument	size		107571	2					
ANR	107652	Identifier	size		107571	0					
ANR	107653	ReturnStatement	return stack -> top ++ ;	44:1:1840:1859	107571	3	True				
ANR	107654	PostIncDecOperationExpression	stack -> top ++		107571	0					
ANR	107655	PtrMemberAccess	stack -> top		107571	0					
ANR	107656	Identifier	stack		107571	0					
ANR	107657	Identifier	top		107571	1					
ANR	107658	IncDec	++		107571	1					
ANR	107659	ReturnType	ZEND_API int		107571	1					
ANR	107660	Identifier	zend_stack_push		107571	2					
ANR	107661	ParameterList	"zend_stack * stack , const void * element , int size"		107571	3					
ANR	107662	Parameter	zend_stack * stack	33:29:1437:1453	107571	0	True				
ANR	107663	ParameterType	zend_stack *		107571	0					
ANR	107664	Identifier	stack		107571	1					
ANR	107665	Parameter	const void * element	33:48:1456:1474	107571	1	True				
ANR	107666	ParameterType	const void *		107571	0					
ANR	107667	Identifier	element		107571	1					
ANR	107668	Parameter	int size	33:69:1477:1484	107571	2	True				
ANR	107669	ParameterType	int		107571	0					
ANR	107670	Identifier	size		107571	1					
ANR	107671	CFGEntryNode	ENTRY		107571		True				
ANR	107672	CFGExitNode	EXIT		107571		True				
ANR	107673	Symbol	stack		107571						
ANR	107674	Symbol	STACK_BLOCK_SIZE		107571						
ANR	107675	Symbol	FAILURE		107571						
ANR	107676	Symbol	stack -> max		107571						
ANR	107677	Symbol	* stack -> top		107571						
ANR	107678	Symbol	emalloc		107571						
ANR	107679	Symbol	size		107571						
ANR	107680	Symbol	* * stack		107571						
ANR	107681	Symbol	* stack		107571						
ANR	107682	Symbol	* stack -> elements		107571						
ANR	107683	Symbol	stack -> top		107571						
ANR	107684	Symbol	stack -> elements		107571						
ANR	107685	Symbol	erealloc		107571						
ANR	107686	Symbol	element		107571						
ANR	107687	Function	zend_stack_top	48:0:1865:2073							
ANR	107688	FunctionDef	"zend_stack_top (const zend_stack * stack , void * * element)"		107687	0					
ANR	107689	CompoundStatement		49:0:1934:2073	107687	0					
ANR	107690	IfStatement	if ( stack -> top > 0 )		107687	0					
ANR	107691	Condition	stack -> top > 0	50:5:1941:1954	107687	0	True				
ANR	107692	RelationalExpression	stack -> top > 0		107687	0		>			
ANR	107693	PtrMemberAccess	stack -> top		107687	0					
ANR	107694	Identifier	stack		107687	0					
ANR	107695	Identifier	top		107687	1					
ANR	107696	PrimaryExpression	0		107687	1					
ANR	107697	CompoundStatement		2:21:22:22	107687	1					
ANR	107698	ExpressionStatement	* element = stack -> elements [ stack -> top - 1 ]	51:2:1961:2003	107687	0	True				
ANR	107699	AssignmentExpression	* element = stack -> elements [ stack -> top - 1 ]		107687	0		=			
ANR	107700	UnaryOperationExpression	* element		107687	0					
ANR	107701	UnaryOperator	*		107687	0					
ANR	107702	Identifier	element		107687	1					
ANR	107703	ArrayIndexing	stack -> elements [ stack -> top - 1 ]		107687	1					
ANR	107704	PtrMemberAccess	stack -> elements		107687	0					
ANR	107705	Identifier	stack		107687	0					
ANR	107706	Identifier	elements		107687	1					
ANR	107707	AdditiveExpression	stack -> top - 1		107687	1		-			
ANR	107708	PtrMemberAccess	stack -> top		107687	0					
ANR	107709	Identifier	stack		107687	0					
ANR	107710	Identifier	top		107687	1					
ANR	107711	PrimaryExpression	1		107687	1					
ANR	107712	ReturnStatement	return SUCCESS ;	52:2:2007:2021	107687	1	True				
ANR	107713	Identifier	SUCCESS		107687	0					
ANR	107714	ElseStatement	else		107687	0					
ANR	107715	CompoundStatement		5:8:96:96	107687	0					
ANR	107716	ExpressionStatement	* element = NULL	54:2:2035:2050	107687	0	True				
ANR	107717	AssignmentExpression	* element = NULL		107687	0		=			
ANR	107718	UnaryOperationExpression	* element		107687	0					
ANR	107719	UnaryOperator	*		107687	0					
ANR	107720	Identifier	element		107687	1					
ANR	107721	Identifier	NULL		107687	1					
ANR	107722	ReturnStatement	return FAILURE ;	55:2:2054:2068	107687	1	True				
ANR	107723	Identifier	FAILURE		107687	0					
ANR	107724	ReturnType	ZEND_API int		107687	1					
ANR	107725	Identifier	zend_stack_top		107687	2					
ANR	107726	ParameterList	"const zend_stack * stack , void * * element"		107687	3					
ANR	107727	Parameter	const zend_stack * stack	48:28:1893:1915	107687	0	True				
ANR	107728	ParameterType	const zend_stack *		107687	0					
ANR	107729	Identifier	stack		107687	1					
ANR	107730	Parameter	void * * element	48:53:1918:1931	107687	1	True				
ANR	107731	ParameterType	void * *		107687	0					
ANR	107732	Identifier	element		107687	1					
ANR	107733	CFGEntryNode	ENTRY		107687		True				
ANR	107734	CFGExitNode	EXIT		107687		True				
ANR	107735	Symbol	stack		107687						
ANR	107736	Symbol	* stack -> top		107687						
ANR	107737	Symbol	SUCCESS		107687						
ANR	107738	Symbol	NULL		107687						
ANR	107739	Symbol	* element		107687						
ANR	107740	Symbol	* * stack		107687						
ANR	107741	Symbol	* stack		107687						
ANR	107742	Symbol	* stack -> elements		107687						
ANR	107743	Symbol	stack -> top		107687						
ANR	107744	Symbol	stack -> elements		107687						
ANR	107745	Symbol	FAILURE		107687						
ANR	107746	Symbol	element		107687						
ANR	107747	Function	zend_stack_del_top	60:0:2077:2213							
ANR	107748	FunctionDef	zend_stack_del_top (zend_stack * stack)		107747	0					
ANR	107749	CompoundStatement		61:0:2128:2213	107747	0					
ANR	107750	IfStatement	if ( stack -> top > 0 )		107747	0					
ANR	107751	Condition	stack -> top > 0	62:5:2135:2148	107747	0	True				
ANR	107752	RelationalExpression	stack -> top > 0		107747	0		>			
ANR	107753	PtrMemberAccess	stack -> top		107747	0					
ANR	107754	Identifier	stack		107747	0					
ANR	107755	Identifier	top		107747	1					
ANR	107756	PrimaryExpression	0		107747	1					
ANR	107757	CompoundStatement		2:21:22:22	107747	1					
ANR	107758	ExpressionStatement	efree ( stack -> elements [ -- stack -> top ] )	63:2:2155:2191	107747	0	True				
ANR	107759	CallExpression	efree ( stack -> elements [ -- stack -> top ] )		107747	0					
ANR	107760	Callee	efree		107747	0					
ANR	107761	Identifier	efree		107747	0					
ANR	107762	ArgumentList	stack -> elements [ -- stack -> top ]		107747	1					
ANR	107763	Argument	stack -> elements [ -- stack -> top ]		107747	0					
ANR	107764	ArrayIndexing	stack -> elements [ -- stack -> top ]		107747	0					
ANR	107765	PtrMemberAccess	stack -> elements		107747	0					
ANR	107766	Identifier	stack		107747	0					
ANR	107767	Identifier	elements		107747	1					
ANR	107768	UnaryExpression	-- stack -> top		107747	1					
ANR	107769	IncDec	--		107747	0					
ANR	107770	PtrMemberAccess	stack -> top		107747	1					
ANR	107771	Identifier	stack		107747	0					
ANR	107772	Identifier	top		107747	1					
ANR	107773	ReturnStatement	return SUCCESS ;	65:1:2197:2211	107747	1	True				
ANR	107774	Identifier	SUCCESS		107747	0					
ANR	107775	ReturnType	ZEND_API int		107747	1					
ANR	107776	Identifier	zend_stack_del_top		107747	2					
ANR	107777	ParameterList	zend_stack * stack		107747	3					
ANR	107778	Parameter	zend_stack * stack	60:32:2109:2125	107747	0	True				
ANR	107779	ParameterType	zend_stack *		107747	0					
ANR	107780	Identifier	stack		107747	1					
ANR	107781	CFGEntryNode	ENTRY		107747		True				
ANR	107782	CFGExitNode	EXIT		107747		True				
ANR	107783	Symbol	stack		107747						
ANR	107784	Symbol	* stack -> top		107747						
ANR	107785	Symbol	SUCCESS		107747						
ANR	107786	Symbol	* * stack		107747						
ANR	107787	Symbol	* stack		107747						
ANR	107788	Symbol	* stack -> elements		107747						
ANR	107789	Symbol	stack -> top		107747						
ANR	107790	Symbol	stack -> elements		107747						
ANR	107791	Function	zend_stack_int_top	69:0:2217:2473							
ANR	107792	FunctionDef	zend_stack_int_top (const zend_stack * stack)		107791	0					
ANR	107793	CompoundStatement		70:0:2274:2473	107791	0					
ANR	107794	IdentifierDeclStatement	int * e ;	71:1:2277:2283	107791	0	True				
ANR	107795	IdentifierDecl	* e		107791	0					
ANR	107796	IdentifierDeclType	int *		107791	0					
ANR	107797	Identifier	e		107791	1					
ANR	107798	IfStatement	"if ( zend_stack_top ( stack , ( void * * ) & e ) == FAILURE )"		107791	1					
ANR	107799	Condition	"zend_stack_top ( stack , ( void * * ) & e ) == FAILURE"	73:5:2291:2336	107791	0	True				
ANR	107800	EqualityExpression	"zend_stack_top ( stack , ( void * * ) & e ) == FAILURE"		107791	0		==			
ANR	107801	CallExpression	"zend_stack_top ( stack , ( void * * ) & e )"		107791	0					
ANR	107802	Callee	zend_stack_top		107791	0					
ANR	107803	Identifier	zend_stack_top		107791	0					
ANR	107804	ArgumentList	stack		107791	1					
ANR	107805	Argument	stack		107791	0					
ANR	107806	Identifier	stack		107791	0					
ANR	107807	Argument	( void * * ) & e		107791	1					
ANR	107808	CastExpression	( void * * ) & e		107791	0					
ANR	107809	CastTarget	void * *		107791	0					
ANR	107810	UnaryOperationExpression	& e		107791	1					
ANR	107811	UnaryOperator	&		107791	0					
ANR	107812	Identifier	e		107791	1					
ANR	107813	Identifier	FAILURE		107791	1					
ANR	107814	CompoundStatement		4:53:64:64	107791	1					
ANR	107815	ReturnStatement	return FAILURE ;	74:2:2343:2357	107791	0	True				
ANR	107816	Identifier	FAILURE		107791	0					
ANR	107817	ElseStatement	else		107791	0					
ANR	107818	CompoundStatement		6:8:180:180	107791	0					
ANR	107819	ReturnStatement	return * e ;	76:2:2459:2468	107791	0	True				
ANR	107820	UnaryOperationExpression	* e		107791	0					
ANR	107821	UnaryOperator	*		107791	0					
ANR	107822	Identifier	e		107791	1					
ANR	107823	ReturnType	ZEND_API int		107791	1					
ANR	107824	Identifier	zend_stack_int_top		107791	2					
ANR	107825	ParameterList	const zend_stack * stack		107791	3					
ANR	107826	Parameter	const zend_stack * stack	69:32:2249:2271	107791	0	True				
ANR	107827	ParameterType	const zend_stack *		107791	0					
ANR	107828	Identifier	stack		107791	1					
ANR	107829	CFGEntryNode	ENTRY		107791		True				
ANR	107830	CFGExitNode	EXIT		107791		True				
ANR	107831	Symbol	stack		107791						
ANR	107832	Symbol	zend_stack_top		107791						
ANR	107833	Symbol	e		107791						
ANR	107834	Symbol	& e		107791						
ANR	107835	Symbol	FAILURE		107791						
ANR	107836	Symbol	* e		107791						
ANR	107837	Function	zend_stack_is_empty	81:0:2477:2598							
ANR	107838	FunctionDef	zend_stack_is_empty (const zend_stack * stack)		107837	0					
ANR	107839	CompoundStatement		82:0:2535:2598	107837	0					
ANR	107840	IfStatement	if ( stack -> top == 0 )		107837	0					
ANR	107841	Condition	stack -> top == 0	83:5:2542:2556	107837	0	True				
ANR	107842	EqualityExpression	stack -> top == 0		107837	0		==			
ANR	107843	PtrMemberAccess	stack -> top		107837	0					
ANR	107844	Identifier	stack		107837	0					
ANR	107845	Identifier	top		107837	1					
ANR	107846	PrimaryExpression	0		107837	1					
ANR	107847	CompoundStatement		2:22:23:23	107837	1					
ANR	107848	ReturnStatement	return 1 ;	84:2:2563:2571	107837	0	True				
ANR	107849	PrimaryExpression	1		107837	0					
ANR	107850	ElseStatement	else		107837	0					
ANR	107851	CompoundStatement		4:8:45:45	107837	0					
ANR	107852	ReturnStatement	return 0 ;	86:2:2585:2593	107837	0	True				
ANR	107853	PrimaryExpression	0		107837	0					
ANR	107854	ReturnType	ZEND_API int		107837	1					
ANR	107855	Identifier	zend_stack_is_empty		107837	2					
ANR	107856	ParameterList	const zend_stack * stack		107837	3					
ANR	107857	Parameter	const zend_stack * stack	81:33:2510:2532	107837	0	True				
ANR	107858	ParameterType	const zend_stack *		107837	0					
ANR	107859	Identifier	stack		107837	1					
ANR	107860	CFGEntryNode	ENTRY		107837		True				
ANR	107861	CFGExitNode	EXIT		107837		True				
ANR	107862	Symbol	stack		107837						
ANR	107863	Symbol	* stack		107837						
ANR	107864	Symbol	stack -> top		107837						
ANR	107865	Function	zend_stack_destroy	91:0:2602:2832							
ANR	107866	FunctionDef	zend_stack_destroy (zend_stack * stack)		107865	0					
ANR	107867	CompoundStatement		92:0:2653:2832	107865	0					
ANR	107868	IdentifierDeclStatement	int i ;	93:1:2656:2661	107865	0	True				
ANR	107869	IdentifierDecl	i		107865	0					
ANR	107870	IdentifierDeclType	int		107865	0					
ANR	107871	Identifier	i		107865	1					
ANR	107872	IfStatement	if ( stack -> elements )		107865	1					
ANR	107873	Condition	stack -> elements	95:5:2669:2683	107865	0	True				
ANR	107874	PtrMemberAccess	stack -> elements		107865	0					
ANR	107875	Identifier	stack		107865	0					
ANR	107876	Identifier	elements		107865	1					
ANR	107877	CompoundStatement		4:22:32:32	107865	1					
ANR	107878	ForStatement	for ( i = 0 ; i < stack -> top ; i ++ )		107865	0					
ANR	107879	ForInit	i = 0 ;	96:7:2695:2700	107865	0	True				
ANR	107880	AssignmentExpression	i = 0		107865	0		=			
ANR	107881	Identifier	i		107865	0					
ANR	107882	PrimaryExpression	0		107865	1					
ANR	107883	Condition	i < stack -> top	96:14:2702:2715	107865	1	True				
ANR	107884	RelationalExpression	i < stack -> top		107865	0		<			
ANR	107885	Identifier	i		107865	0					
ANR	107886	PtrMemberAccess	stack -> top		107865	1					
ANR	107887	Identifier	stack		107865	0					
ANR	107888	Identifier	top		107865	1					
ANR	107889	PostIncDecOperationExpression	i ++	96:30:2718:2720	107865	2	True				
ANR	107890	Identifier	i		107865	0					
ANR	107891	IncDec	++		107865	1					
ANR	107892	CompoundStatement		5:35:69:69	107865	3					
ANR	107893	ExpressionStatement	efree ( stack -> elements [ i ] )	97:3:2728:2753	107865	0	True				
ANR	107894	CallExpression	efree ( stack -> elements [ i ] )		107865	0					
ANR	107895	Callee	efree		107865	0					
ANR	107896	Identifier	efree		107865	0					
ANR	107897	ArgumentList	stack -> elements [ i ]		107865	1					
ANR	107898	Argument	stack -> elements [ i ]		107865	0					
ANR	107899	ArrayIndexing	stack -> elements [ i ]		107865	0					
ANR	107900	PtrMemberAccess	stack -> elements		107865	0					
ANR	107901	Identifier	stack		107865	0					
ANR	107902	Identifier	elements		107865	1					
ANR	107903	Identifier	i		107865	1					
ANR	107904	ExpressionStatement	efree ( stack -> elements )	99:2:2761:2783	107865	1	True				
ANR	107905	CallExpression	efree ( stack -> elements )		107865	0					
ANR	107906	Callee	efree		107865	0					
ANR	107907	Identifier	efree		107865	0					
ANR	107908	ArgumentList	stack -> elements		107865	1					
ANR	107909	Argument	stack -> elements		107865	0					
ANR	107910	PtrMemberAccess	stack -> elements		107865	0					
ANR	107911	Identifier	stack		107865	0					
ANR	107912	Identifier	elements		107865	1					
ANR	107913	ExpressionStatement	stack -> elements = NULL	100:2:2787:2809	107865	2	True				
ANR	107914	AssignmentExpression	stack -> elements = NULL		107865	0		=			
ANR	107915	PtrMemberAccess	stack -> elements		107865	0					
ANR	107916	Identifier	stack		107865	0					
ANR	107917	Identifier	elements		107865	1					
ANR	107918	Identifier	NULL		107865	1					
ANR	107919	ReturnStatement	return SUCCESS ;	103:1:2816:2830	107865	2	True				
ANR	107920	Identifier	SUCCESS		107865	0					
ANR	107921	ReturnType	ZEND_API int		107865	1					
ANR	107922	Identifier	zend_stack_destroy		107865	2					
ANR	107923	ParameterList	zend_stack * stack		107865	3					
ANR	107924	Parameter	zend_stack * stack	91:32:2634:2650	107865	0	True				
ANR	107925	ParameterType	zend_stack *		107865	0					
ANR	107926	Identifier	stack		107865	1					
ANR	107927	CFGEntryNode	ENTRY		107865		True				
ANR	107928	CFGExitNode	EXIT		107865		True				
ANR	107929	Symbol	stack		107865						
ANR	107930	Symbol	* i		107865						
ANR	107931	Symbol	NULL		107865						
ANR	107932	Symbol	SUCCESS		107865						
ANR	107933	Symbol	* * stack		107865						
ANR	107934	Symbol	i		107865						
ANR	107935	Symbol	* stack		107865						
ANR	107936	Symbol	* stack -> elements		107865						
ANR	107937	Symbol	stack -> top		107865						
ANR	107938	Symbol	stack -> elements		107865						
ANR	107939	Function	zend_stack_base	107:0:2836:2920							
ANR	107940	FunctionDef	zend_stack_base (const zend_stack * stack)		107939	0					
ANR	107941	CompoundStatement		108:0:2893:2920	107939	0					
ANR	107942	ReturnStatement	return stack -> elements ;	109:1:2896:2918	107939	0	True				
ANR	107943	PtrMemberAccess	stack -> elements		107939	0					
ANR	107944	Identifier	stack		107939	0					
ANR	107945	Identifier	elements		107939	1					
ANR	107946	ReturnType	ZEND_API void * *		107939	1					
ANR	107947	Identifier	zend_stack_base		107939	2					
ANR	107948	ParameterList	const zend_stack * stack		107939	3					
ANR	107949	Parameter	const zend_stack * stack	107:32:2868:2890	107939	0	True				
ANR	107950	ParameterType	const zend_stack *		107939	0					
ANR	107951	Identifier	stack		107939	1					
ANR	107952	CFGEntryNode	ENTRY		107939		True				
ANR	107953	CFGExitNode	EXIT		107939		True				
ANR	107954	Symbol	stack		107939						
ANR	107955	Symbol	* stack		107939						
ANR	107956	Symbol	stack -> elements		107939						
ANR	107957	Function	zend_stack_count	113:0:2924:3001							
ANR	107958	FunctionDef	zend_stack_count (const zend_stack * stack)		107957	0					
ANR	107959	CompoundStatement		114:0:2979:3001	107957	0					
ANR	107960	ReturnStatement	return stack -> top ;	115:1:2982:2999	107957	0	True				
ANR	107961	PtrMemberAccess	stack -> top		107957	0					
ANR	107962	Identifier	stack		107957	0					
ANR	107963	Identifier	top		107957	1					
ANR	107964	ReturnType	ZEND_API int		107957	1					
ANR	107965	Identifier	zend_stack_count		107957	2					
ANR	107966	ParameterList	const zend_stack * stack		107957	3					
ANR	107967	Parameter	const zend_stack * stack	113:30:2954:2976	107957	0	True				
ANR	107968	ParameterType	const zend_stack *		107957	0					
ANR	107969	Identifier	stack		107957	1					
ANR	107970	CFGEntryNode	ENTRY		107957		True				
ANR	107971	CFGExitNode	EXIT		107957		True				
ANR	107972	Symbol	stack		107957						
ANR	107973	Symbol	* stack		107957						
ANR	107974	Symbol	stack -> top		107957						
ANR	107975	Function	zend_stack_apply	119:0:3005:3430							
ANR	107976	FunctionDef	"zend_stack_apply (zend_stack * stack , int type , int ( * apply_function ) ( void * element ))"		107975	0					
ANR	107977	CompoundStatement		120:0:3103:3430	107975	0					
ANR	107978	IdentifierDeclStatement	int i ;	121:1:3106:3111	107975	0	True				
ANR	107979	IdentifierDecl	i		107975	0					
ANR	107980	IdentifierDeclType	int		107975	0					
ANR	107981	Identifier	i		107975	1					
ANR	107982	SwitchStatement	switch ( type )		107975	1					
ANR	107983	Condition	type	123:9:3123:3126	107975	0	True				
ANR	107984	Identifier	type		107975	0					
ANR	107985	CompoundStatement		4:15:25:25	107975	1					
ANR	107986	Label	case ZEND_STACK_APPLY_TOPDOWN :	124:2:3133:3162	107975	0	True				
ANR	107987	Identifier	ZEND_STACK_APPLY_TOPDOWN		107975	0					
ANR	107988	ForStatement	for ( i = stack -> top - 1 ; i >= 0 ; i -- )		107975	1					
ANR	107989	ForInit	i = stack -> top - 1 ;	125:8:3172:3186	107975	0	True				
ANR	107990	AssignmentExpression	i = stack -> top - 1		107975	0		=			
ANR	107991	Identifier	i		107975	0					
ANR	107992	AdditiveExpression	stack -> top - 1		107975	1		-			
ANR	107993	PtrMemberAccess	stack -> top		107975	0					
ANR	107994	Identifier	stack		107975	0					
ANR	107995	Identifier	top		107975	1					
ANR	107996	PrimaryExpression	1		107975	1					
ANR	107997	Condition	i >= 0	125:24:3188:3191	107975	1	True				
ANR	107998	RelationalExpression	i >= 0		107975	0		>=			
ANR	107999	Identifier	i		107975	0					
ANR	108000	PrimaryExpression	0		107975	1					
ANR	108001	PostIncDecOperationExpression	i --	125:30:3194:3196	107975	2	True				
ANR	108002	Identifier	i		107975	0					
ANR	108003	IncDec	--		107975	1					
ANR	108004	CompoundStatement		6:35:95:95	107975	3					
ANR	108005	IfStatement	if ( apply_function ( stack -> elements [ i ] ) )		107975	0					
ANR	108006	Condition	apply_function ( stack -> elements [ i ] )	126:8:3209:3242	107975	0	True				
ANR	108007	CallExpression	apply_function ( stack -> elements [ i ] )		107975	0					
ANR	108008	Callee	apply_function		107975	0					
ANR	108009	Identifier	apply_function		107975	0					
ANR	108010	ArgumentList	stack -> elements [ i ]		107975	1					
ANR	108011	Argument	stack -> elements [ i ]		107975	0					
ANR	108012	ArrayIndexing	stack -> elements [ i ]		107975	0					
ANR	108013	PtrMemberAccess	stack -> elements		107975	0					
ANR	108014	Identifier	stack		107975	0					
ANR	108015	Identifier	elements		107975	1					
ANR	108016	Identifier	i		107975	1					
ANR	108017	CompoundStatement		7:44:141:141	107975	1					
ANR	108018	BreakStatement	break ;	127:5:3252:3257	107975	0	True				
ANR	108019	BreakStatement	break ;	130:3:3273:3278	107975	2	True				
ANR	108020	Label	case ZEND_STACK_APPLY_BOTTOMUP :	131:2:3282:3312	107975	3	True				
ANR	108021	Identifier	ZEND_STACK_APPLY_BOTTOMUP		107975	0					
ANR	108022	ForStatement	for ( i = 0 ; i < stack -> top ; i ++ )		107975	4					
ANR	108023	ForInit	i = 0 ;	132:8:3322:3325	107975	0	True				
ANR	108024	AssignmentExpression	i = 0		107975	0		=			
ANR	108025	Identifier	i		107975	0					
ANR	108026	PrimaryExpression	0		107975	1					
ANR	108027	Condition	i < stack -> top	132:13:3327:3338	107975	1	True				
ANR	108028	RelationalExpression	i < stack -> top		107975	0		<			
ANR	108029	Identifier	i		107975	0					
ANR	108030	PtrMemberAccess	stack -> top		107975	1					
ANR	108031	Identifier	stack		107975	0					
ANR	108032	Identifier	top		107975	1					
ANR	108033	PostIncDecOperationExpression	i ++	132:27:3341:3343	107975	2	True				
ANR	108034	Identifier	i		107975	0					
ANR	108035	IncDec	++		107975	1					
ANR	108036	CompoundStatement		13:32:242:242	107975	3					
ANR	108037	IfStatement	if ( apply_function ( stack -> elements [ i ] ) )		107975	0					
ANR	108038	Condition	apply_function ( stack -> elements [ i ] )	133:8:3356:3389	107975	0	True				
ANR	108039	CallExpression	apply_function ( stack -> elements [ i ] )		107975	0					
ANR	108040	Callee	apply_function		107975	0					
ANR	108041	Identifier	apply_function		107975	0					
ANR	108042	ArgumentList	stack -> elements [ i ]		107975	1					
ANR	108043	Argument	stack -> elements [ i ]		107975	0					
ANR	108044	ArrayIndexing	stack -> elements [ i ]		107975	0					
ANR	108045	PtrMemberAccess	stack -> elements		107975	0					
ANR	108046	Identifier	stack		107975	0					
ANR	108047	Identifier	elements		107975	1					
ANR	108048	Identifier	i		107975	1					
ANR	108049	CompoundStatement		14:44:288:288	107975	1					
ANR	108050	BreakStatement	break ;	134:5:3399:3404	107975	0	True				
ANR	108051	BreakStatement	break ;	137:3:3420:3425	107975	5	True				
ANR	108052	ReturnType	ZEND_API void		107975	1					
ANR	108053	Identifier	zend_stack_apply		107975	2					
ANR	108054	ParameterList	"zend_stack * stack , int type , int ( * apply_function ) ( void * element )"		107975	3					
ANR	108055	Parameter	zend_stack * stack	119:31:3036:3052	107975	0	True				
ANR	108056	ParameterType	zend_stack *		107975	0					
ANR	108057	Identifier	stack		107975	1					
ANR	108058	Parameter	int type	119:50:3055:3062	107975	1	True				
ANR	108059	ParameterType	int		107975	0					
ANR	108060	Identifier	type		107975	1					
ANR	108061	Parameter	int ( * apply_function ) ( void * element )	119:60:3065:3100	107975	2	True				
ANR	108062	ParameterType	(( void * element ) int) *		107975	0					
ANR	108063	Identifier	apply_function		107975	1					
ANR	108064	CFGEntryNode	ENTRY		107975		True				
ANR	108065	CFGExitNode	EXIT		107975		True				
ANR	108066	Symbol	stack		107975						
ANR	108067	Symbol	apply_function		107975						
ANR	108068	Symbol	* i		107975						
ANR	108069	Symbol	* * stack		107975						
ANR	108070	Symbol	i		107975						
ANR	108071	Symbol	* stack		107975						
ANR	108072	Symbol	* stack -> elements		107975						
ANR	108073	Symbol	type		107975						
ANR	108074	Symbol	stack -> top		107975						
ANR	108075	Symbol	stack -> elements		107975						
ANR	108076	Function	zend_stack_apply_with_argument	142:0:3434:3905							
ANR	108077	FunctionDef	"zend_stack_apply_with_argument (zend_stack * stack , int type , int ( * apply_function ) ( void * element , void * arg ) , void * arg)"		108076	0					
ANR	108078	CompoundStatement		143:0:3568:3905	108076	0					
ANR	108079	IdentifierDeclStatement	int i ;	144:1:3571:3576	108076	0	True				
ANR	108080	IdentifierDecl	i		108076	0					
ANR	108081	IdentifierDeclType	int		108076	0					
ANR	108082	Identifier	i		108076	1					
ANR	108083	SwitchStatement	switch ( type )		108076	1					
ANR	108084	Condition	type	146:9:3588:3591	108076	0	True				
ANR	108085	Identifier	type		108076	0					
ANR	108086	CompoundStatement		4:15:25:25	108076	1					
ANR	108087	Label	case ZEND_STACK_APPLY_TOPDOWN :	147:2:3598:3627	108076	0	True				
ANR	108088	Identifier	ZEND_STACK_APPLY_TOPDOWN		108076	0					
ANR	108089	ForStatement	for ( i = stack -> top - 1 ; i >= 0 ; i -- )		108076	1					
ANR	108090	ForInit	i = stack -> top - 1 ;	148:8:3637:3651	108076	0	True				
ANR	108091	AssignmentExpression	i = stack -> top - 1		108076	0		=			
ANR	108092	Identifier	i		108076	0					
ANR	108093	AdditiveExpression	stack -> top - 1		108076	1		-			
ANR	108094	PtrMemberAccess	stack -> top		108076	0					
ANR	108095	Identifier	stack		108076	0					
ANR	108096	Identifier	top		108076	1					
ANR	108097	PrimaryExpression	1		108076	1					
ANR	108098	Condition	i >= 0	148:24:3653:3656	108076	1	True				
ANR	108099	RelationalExpression	i >= 0		108076	0		>=			
ANR	108100	Identifier	i		108076	0					
ANR	108101	PrimaryExpression	0		108076	1					
ANR	108102	PostIncDecOperationExpression	i --	148:30:3659:3661	108076	2	True				
ANR	108103	Identifier	i		108076	0					
ANR	108104	IncDec	--		108076	1					
ANR	108105	CompoundStatement		6:35:95:95	108076	3					
ANR	108106	IfStatement	"if ( apply_function ( stack -> elements [ i ] , arg ) )"		108076	0					
ANR	108107	Condition	"apply_function ( stack -> elements [ i ] , arg )"	149:8:3674:3712	108076	0	True				
ANR	108108	CallExpression	"apply_function ( stack -> elements [ i ] , arg )"		108076	0					
ANR	108109	Callee	apply_function		108076	0					
ANR	108110	Identifier	apply_function		108076	0					
ANR	108111	ArgumentList	stack -> elements [ i ]		108076	1					
ANR	108112	Argument	stack -> elements [ i ]		108076	0					
ANR	108113	ArrayIndexing	stack -> elements [ i ]		108076	0					
ANR	108114	PtrMemberAccess	stack -> elements		108076	0					
ANR	108115	Identifier	stack		108076	0					
ANR	108116	Identifier	elements		108076	1					
ANR	108117	Identifier	i		108076	1					
ANR	108118	Argument	arg		108076	1					
ANR	108119	Identifier	arg		108076	0					
ANR	108120	CompoundStatement		7:49:146:146	108076	1					
ANR	108121	BreakStatement	break ;	150:5:3722:3727	108076	0	True				
ANR	108122	BreakStatement	break ;	153:3:3743:3748	108076	2	True				
ANR	108123	Label	case ZEND_STACK_APPLY_BOTTOMUP :	154:2:3752:3782	108076	3	True				
ANR	108124	Identifier	ZEND_STACK_APPLY_BOTTOMUP		108076	0					
ANR	108125	ForStatement	for ( i = 0 ; i < stack -> top ; i ++ )		108076	4					
ANR	108126	ForInit	i = 0 ;	155:8:3792:3795	108076	0	True				
ANR	108127	AssignmentExpression	i = 0		108076	0		=			
ANR	108128	Identifier	i		108076	0					
ANR	108129	PrimaryExpression	0		108076	1					
ANR	108130	Condition	i < stack -> top	155:13:3797:3808	108076	1	True				
ANR	108131	RelationalExpression	i < stack -> top		108076	0		<			
ANR	108132	Identifier	i		108076	0					
ANR	108133	PtrMemberAccess	stack -> top		108076	1					
ANR	108134	Identifier	stack		108076	0					
ANR	108135	Identifier	top		108076	1					
ANR	108136	PostIncDecOperationExpression	i ++	155:27:3811:3813	108076	2	True				
ANR	108137	Identifier	i		108076	0					
ANR	108138	IncDec	++		108076	1					
ANR	108139	CompoundStatement		13:32:247:247	108076	3					
ANR	108140	IfStatement	"if ( apply_function ( stack -> elements [ i ] , arg ) )"		108076	0					
ANR	108141	Condition	"apply_function ( stack -> elements [ i ] , arg )"	156:8:3826:3864	108076	0	True				
ANR	108142	CallExpression	"apply_function ( stack -> elements [ i ] , arg )"		108076	0					
ANR	108143	Callee	apply_function		108076	0					
ANR	108144	Identifier	apply_function		108076	0					
ANR	108145	ArgumentList	stack -> elements [ i ]		108076	1					
ANR	108146	Argument	stack -> elements [ i ]		108076	0					
ANR	108147	ArrayIndexing	stack -> elements [ i ]		108076	0					
ANR	108148	PtrMemberAccess	stack -> elements		108076	0					
ANR	108149	Identifier	stack		108076	0					
ANR	108150	Identifier	elements		108076	1					
ANR	108151	Identifier	i		108076	1					
ANR	108152	Argument	arg		108076	1					
ANR	108153	Identifier	arg		108076	0					
ANR	108154	CompoundStatement		14:49:298:298	108076	1					
ANR	108155	BreakStatement	break ;	157:5:3874:3879	108076	0	True				
ANR	108156	BreakStatement	break ;	160:3:3895:3900	108076	5	True				
ANR	108157	ReturnType	ZEND_API void		108076	1					
ANR	108158	Identifier	zend_stack_apply_with_argument		108076	2					
ANR	108159	ParameterList	"zend_stack * stack , int type , int ( * apply_function ) ( void * element , void * arg ) , void * arg"		108076	3					
ANR	108160	Parameter	zend_stack * stack	142:45:3479:3495	108076	0	True				
ANR	108161	ParameterType	zend_stack *		108076	0					
ANR	108162	Identifier	stack		108076	1					
ANR	108163	Parameter	int type	142:64:3498:3505	108076	1	True				
ANR	108164	ParameterType	int		108076	0					
ANR	108165	Identifier	type		108076	1					
ANR	108166	Parameter	"int ( * apply_function ) ( void * element , void * arg )"	142:74:3508:3554	108076	2	True				
ANR	108167	ParameterType	"(( void * element , void * arg ) int) *"		108076	0					
ANR	108168	Identifier	apply_function		108076	1					
ANR	108169	Parameter	void * arg	142:123:3557:3565	108076	3	True				
ANR	108170	ParameterType	void *		108076	0					
ANR	108171	Identifier	arg		108076	1					
ANR	108172	CFGEntryNode	ENTRY		108076		True				
ANR	108173	CFGExitNode	EXIT		108076		True				
ANR	108174	Symbol	stack		108076						
ANR	108175	Symbol	apply_function		108076						
ANR	108176	Symbol	* i		108076						
ANR	108177	Symbol	arg		108076						
ANR	108178	Symbol	* * stack		108076						
ANR	108179	Symbol	i		108076						
ANR	108180	Symbol	* stack		108076						
ANR	108181	Symbol	* stack -> elements		108076						
ANR	108182	Symbol	type		108076						
ANR	108183	Symbol	stack -> top		108076						
ANR	108184	Symbol	stack -> elements		108076						
