command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	26338	File	data/converged/CVE-2017-11142_php-src/Zend_zend_alloc.c								
ANR	26339	Function	zend_debug_alloc_output	63:0:1964:2230							
ANR	26340	FunctionDef	zend_debug_alloc_output (char * format)		26339	0					
ANR	26341	CompoundStatement		64:0:2012:2230	26339	0					
ANR	26342	IdentifierDeclStatement	char output_buf [ 256 ] ;	65:1:2015:2035	26339	0	True				
ANR	26343	IdentifierDecl	output_buf [ 256 ]		26339	0					
ANR	26344	IdentifierDeclType	char [ 256 ]		26339	0					
ANR	26345	Identifier	output_buf		26339	1					
ANR	26346	PrimaryExpression	256		26339	2					
ANR	26347	IdentifierDeclStatement	va_list args ;	66:1:2038:2050	26339	1	True				
ANR	26348	IdentifierDecl	args		26339	0					
ANR	26349	IdentifierDeclType	va_list		26339	0					
ANR	26350	Identifier	args		26339	1					
ANR	26351	ExpressionStatement	"va_start ( args , format )"	68:1:2054:2076	26339	2	True				
ANR	26352	CallExpression	"va_start ( args , format )"		26339	0					
ANR	26353	Callee	va_start		26339	0					
ANR	26354	Identifier	va_start		26339	0					
ANR	26355	ArgumentList	args		26339	1					
ANR	26356	Argument	args		26339	0					
ANR	26357	Identifier	args		26339	0					
ANR	26358	Argument	format		26339	1					
ANR	26359	Identifier	format		26339	0					
ANR	26360	ExpressionStatement	"vsprintf ( output_buf , format , args )"	69:1:2079:2113	26339	3	True				
ANR	26361	CallExpression	"vsprintf ( output_buf , format , args )"		26339	0					
ANR	26362	Callee	vsprintf		26339	0					
ANR	26363	Identifier	vsprintf		26339	0					
ANR	26364	ArgumentList	output_buf		26339	1					
ANR	26365	Argument	output_buf		26339	0					
ANR	26366	Identifier	output_buf		26339	0					
ANR	26367	Argument	format		26339	1					
ANR	26368	Identifier	format		26339	0					
ANR	26369	Argument	args		26339	2					
ANR	26370	Identifier	args		26339	0					
ANR	26371	ExpressionStatement	va_end ( args )	70:1:2116:2128	26339	4	True				
ANR	26372	CallExpression	va_end ( args )		26339	0					
ANR	26373	Callee	va_end		26339	0					
ANR	26374	Identifier	va_end		26339	0					
ANR	26375	ArgumentList	args		26339	1					
ANR	26376	Argument	args		26339	0					
ANR	26377	Identifier	args		26339	0					
ANR	26378	ExpressionStatement	OutputDebugString ( output_buf )	73:1:2150:2179	26339	5	True				
ANR	26379	CallExpression	OutputDebugString ( output_buf )		26339	0					
ANR	26380	Callee	OutputDebugString		26339	0					
ANR	26381	Identifier	OutputDebugString		26339	0					
ANR	26382	ArgumentList	output_buf		26339	1					
ANR	26383	Argument	output_buf		26339	0					
ANR	26384	Identifier	output_buf		26339	0					
ANR	26385	ReturnType	void		26339	1					
ANR	26386	Identifier	zend_debug_alloc_output		26339	2					
ANR	26387	ParameterList	char * format		26339	3					
ANR	26388	Parameter	char * format	63:29:1993:2004	26339	0	True				
ANR	26389	ParameterType	char *		26339	0					
ANR	26390	Identifier	format		26339	1					
ANR	26391	CFGEntryNode	ENTRY		26339		True				
ANR	26392	CFGExitNode	EXIT		26339		True				
ANR	26393	Symbol	args		26339						
ANR	26394	Symbol	output_buf		26339						
ANR	26395	Symbol	format		26339						
ANR	26396	Function	zend_mm_panic	84:0:2453:2731							
ANR	26397	FunctionDef	zend_mm_panic (const char * message)		26396	0					
ANR	26398	CompoundStatement		85:0:2500:2731	26396	0					
ANR	26399	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , message )"	86:1:2503:2535	26396	0	True				
ANR	26400	CallExpression	"fprintf ( stderr , ""%s\\n"" , message )"		26396	0					
ANR	26401	Callee	fprintf		26396	0					
ANR	26402	Identifier	fprintf		26396	0					
ANR	26403	ArgumentList	stderr		26396	1					
ANR	26404	Argument	stderr		26396	0					
ANR	26405	Identifier	stderr		26396	0					
ANR	26406	Argument	"""%s\\n"""		26396	1					
ANR	26407	PrimaryExpression	"""%s\\n"""		26396	0					
ANR	26408	Argument	message		26396	2					
ANR	26409	Identifier	message		26396	0					
ANR	26410	ExpressionStatement	fflush ( stderr )	89:1:2604:2618	26396	1	True				
ANR	26411	CallExpression	fflush ( stderr )		26396	0					
ANR	26412	Callee	fflush		26396	0					
ANR	26413	Identifier	fflush		26396	0					
ANR	26414	ArgumentList	stderr		26396	1					
ANR	26415	Argument	stderr		26396	0					
ANR	26416	Identifier	stderr		26396	0					
ANR	26417	ExpressionStatement	"kill ( getpid ( ) , SIGSEGV )"	92:1:2689:2712	26396	2	True				
ANR	26418	CallExpression	"kill ( getpid ( ) , SIGSEGV )"		26396	0					
ANR	26419	Callee	kill		26396	0					
ANR	26420	Identifier	kill		26396	0					
ANR	26421	ArgumentList	getpid ( )		26396	1					
ANR	26422	Argument	getpid ( )		26396	0					
ANR	26423	CallExpression	getpid ( )		26396	0					
ANR	26424	Callee	getpid		26396	0					
ANR	26425	Identifier	getpid		26396	0					
ANR	26426	ArgumentList			26396	1					
ANR	26427	Argument	SIGSEGV		26396	1					
ANR	26428	Identifier	SIGSEGV		26396	0					
ANR	26429	ExpressionStatement	exit ( 1 )	94:1:2722:2729	26396	3	True				
ANR	26430	CallExpression	exit ( 1 )		26396	0					
ANR	26431	Callee	exit		26396	0					
ANR	26432	Identifier	exit		26396	0					
ANR	26433	ArgumentList	1		26396	1					
ANR	26434	Argument	1		26396	0					
ANR	26435	PrimaryExpression	1		26396	0					
ANR	26436	ReturnType	static void		26396	1					
ANR	26437	Identifier	zend_mm_panic		26396	2					
ANR	26438	ParameterList	const char * message		26396	3					
ANR	26439	Parameter	const char * message	84:26:2479:2497	26396	0	True				
ANR	26440	ParameterType	const char *		26396	0					
ANR	26441	Identifier	message		26396	1					
ANR	26442	CFGEntryNode	ENTRY		26396		True				
ANR	26443	CFGExitNode	EXIT		26396		True				
ANR	26444	Symbol	SIGSEGV		26396						
ANR	26445	Symbol	message		26396						
ANR	26446	Symbol	stderr		26396						
ANR	26447	Symbol	getpid		26396						
ANR	26448	Function	zend_mm_mem_dummy_init	137:0:3546:3650							
ANR	26449	FunctionDef	zend_mm_mem_dummy_init (void * params)		26448	0					
ANR	26450	CompoundStatement		138:0:3607:3650	26448	0					
ANR	26451	ReturnStatement	return malloc ( sizeof ( zend_mm_storage ) ) ;	139:1:3610:3648	26448	0	True				
ANR	26452	CallExpression	malloc ( sizeof ( zend_mm_storage ) )		26448	0					
ANR	26453	Callee	malloc		26448	0					
ANR	26454	Identifier	malloc		26448	0					
ANR	26455	ArgumentList	sizeof ( zend_mm_storage )		26448	1					
ANR	26456	Argument	sizeof ( zend_mm_storage )		26448	0					
ANR	26457	SizeofExpression	sizeof ( zend_mm_storage )		26448	0					
ANR	26458	Sizeof	sizeof		26448	0					
ANR	26459	SizeofOperand	zend_mm_storage		26448	1					
ANR	26460	ReturnType	static zend_mm_storage *		26448	1					
ANR	26461	Identifier	zend_mm_mem_dummy_init		26448	2					
ANR	26462	ParameterList	void * params		26448	3					
ANR	26463	Parameter	void * params	137:47:3593:3604	26448	0	True				
ANR	26464	ParameterType	void *		26448	0					
ANR	26465	Identifier	params		26448	1					
ANR	26466	CFGEntryNode	ENTRY		26448		True				
ANR	26467	CFGExitNode	EXIT		26448		True				
ANR	26468	Symbol	malloc		26448						
ANR	26469	Symbol	params		26448						
ANR	26470	Function	zend_mm_mem_dummy_dtor	142:0:3653:3732							
ANR	26471	FunctionDef	zend_mm_mem_dummy_dtor (zend_mm_storage * storage)		26470	0					
ANR	26472	CompoundStatement		143:0:3714:3732	26470	0					
ANR	26473	ExpressionStatement	free ( storage )	144:1:3717:3730	26470	0	True				
ANR	26474	CallExpression	free ( storage )		26470	0					
ANR	26475	Callee	free		26470	0					
ANR	26476	Identifier	free		26470	0					
ANR	26477	ArgumentList	storage		26470	1					
ANR	26478	Argument	storage		26470	0					
ANR	26479	Identifier	storage		26470	0					
ANR	26480	ReturnType	static void		26470	1					
ANR	26481	Identifier	zend_mm_mem_dummy_dtor		26470	2					
ANR	26482	ParameterList	zend_mm_storage * storage		26470	3					
ANR	26483	Parameter	zend_mm_storage * storage	142:35:3688:3711	26470	0	True				
ANR	26484	ParameterType	zend_mm_storage *		26470	0					
ANR	26485	Identifier	storage		26470	1					
ANR	26486	CFGEntryNode	ENTRY		26470		True				
ANR	26487	CFGExitNode	EXIT		26470		True				
ANR	26488	Symbol	storage		26470						
ANR	26489	Function	zend_mm_mem_dummy_compact	147:0:3735:3801							
ANR	26490	FunctionDef	zend_mm_mem_dummy_compact (zend_mm_storage * storage)		26489	0					
ANR	26491	CompoundStatement		148:0:3799:3801	26489	0					
ANR	26492	ReturnType	static void		26489	1					
ANR	26493	Identifier	zend_mm_mem_dummy_compact		26489	2					
ANR	26494	ParameterList	zend_mm_storage * storage		26489	3					
ANR	26495	Parameter	zend_mm_storage * storage	147:38:3773:3796	26489	0	True				
ANR	26496	ParameterType	zend_mm_storage *		26489	0					
ANR	26497	Identifier	storage		26489	1					
ANR	26498	CFGEntryNode	ENTRY		26489		True				
ANR	26499	CFGExitNode	EXIT		26489		True				
ANR	26500	Symbol	storage		26489						
ANR	26501	Function	zend_mm_mem_mmap_realloc	153:0:3868:4554							
ANR	26502	FunctionDef	"zend_mm_mem_mmap_realloc (zend_mm_storage * storage , zend_mm_segment * segment , size_t size)"		26501	0					
ANR	26503	CompoundStatement		154:0:3982:4554	26501	0					
ANR	26504	IdentifierDeclStatement	zend_mm_segment * ret ;	155:1:3985:4005	26501	0	True				
ANR	26505	IdentifierDecl	* ret		26501	0					
ANR	26506	IdentifierDeclType	zend_mm_segment *		26501	0					
ANR	26507	Identifier	ret		26501	1					
ANR	26508	ExpressionStatement	"ret = ( zend_mm_segment * ) mremap ( segment , segment -> size , segment , size , MREMAP_MAYMOVE )"	159:1:4116:4201	26501	1	True				
ANR	26509	AssignmentExpression	"ret = ( zend_mm_segment * ) mremap ( segment , segment -> size , segment , size , MREMAP_MAYMOVE )"		26501	0		=			
ANR	26510	Identifier	ret		26501	0					
ANR	26511	CastExpression	"( zend_mm_segment * ) mremap ( segment , segment -> size , segment , size , MREMAP_MAYMOVE )"		26501	1					
ANR	26512	CastTarget	zend_mm_segment *		26501	0					
ANR	26513	CallExpression	"mremap ( segment , segment -> size , segment , size , MREMAP_MAYMOVE )"		26501	1					
ANR	26514	Callee	mremap		26501	0					
ANR	26515	Identifier	mremap		26501	0					
ANR	26516	ArgumentList	segment		26501	1					
ANR	26517	Argument	segment		26501	0					
ANR	26518	Identifier	segment		26501	0					
ANR	26519	Argument	segment -> size		26501	1					
ANR	26520	PtrMemberAccess	segment -> size		26501	0					
ANR	26521	Identifier	segment		26501	0					
ANR	26522	Identifier	size		26501	1					
ANR	26523	Argument	segment		26501	2					
ANR	26524	Identifier	segment		26501	0					
ANR	26525	Argument	size		26501	3					
ANR	26526	Identifier	size		26501	0					
ANR	26527	Argument	MREMAP_MAYMOVE		26501	4					
ANR	26528	Identifier	MREMAP_MAYMOVE		26501	0					
ANR	26529	IfStatement	if ( ret == MAP_FAILED )		26501	2					
ANR	26530	Condition	ret == MAP_FAILED	163:5:4300:4316	26501	0	True				
ANR	26531	EqualityExpression	ret == MAP_FAILED		26501	0		==			
ANR	26532	Identifier	ret		26501	0					
ANR	26533	Identifier	MAP_FAILED		26501	1					
ANR	26534	CompoundStatement		10:24:336:336	26501	1					
ANR	26535	ExpressionStatement	"ret = storage -> handlers -> _alloc ( storage , size )"	165:2:4330:4376	26501	0	True				
ANR	26536	AssignmentExpression	"ret = storage -> handlers -> _alloc ( storage , size )"		26501	0		=			
ANR	26537	Identifier	ret		26501	0					
ANR	26538	CallExpression	"storage -> handlers -> _alloc ( storage , size )"		26501	1					
ANR	26539	Callee	storage -> handlers -> _alloc		26501	0					
ANR	26540	PtrMemberAccess	storage -> handlers -> _alloc		26501	0					
ANR	26541	PtrMemberAccess	storage -> handlers		26501	0					
ANR	26542	Identifier	storage		26501	0					
ANR	26543	Identifier	handlers		26501	1					
ANR	26544	Identifier	_alloc		26501	1					
ANR	26545	ArgumentList	storage		26501	1					
ANR	26546	Argument	storage		26501	0					
ANR	26547	Identifier	storage		26501	0					
ANR	26548	Argument	size		26501	1					
ANR	26549	Identifier	size		26501	0					
ANR	26550	IfStatement	if ( ret )		26501	1					
ANR	26551	Condition	ret	166:6:4384:4386	26501	0	True				
ANR	26552	Identifier	ret		26501	0					
ANR	26553	CompoundStatement		13:11:406:406	26501	1					
ANR	26554	ExpressionStatement	"memcpy ( ret , segment , size > segment -> size ? segment -> size : size )"	167:3:4394:4459	26501	0	True				
ANR	26555	CallExpression	"memcpy ( ret , segment , size > segment -> size ? segment -> size : size )"		26501	0					
ANR	26556	Callee	memcpy		26501	0					
ANR	26557	Identifier	memcpy		26501	0					
ANR	26558	ArgumentList	ret		26501	1					
ANR	26559	Argument	ret		26501	0					
ANR	26560	Identifier	ret		26501	0					
ANR	26561	Argument	segment		26501	1					
ANR	26562	Identifier	segment		26501	0					
ANR	26563	Argument	size > segment -> size ? segment -> size : size		26501	2					
ANR	26564	ConditionalExpression	size > segment -> size ? segment -> size : size		26501	0					
ANR	26565	Condition	size > segment -> size		26501	0					
ANR	26566	RelationalExpression	size > segment -> size		26501	0		>			
ANR	26567	Identifier	size		26501	0					
ANR	26568	PtrMemberAccess	segment -> size		26501	1					
ANR	26569	Identifier	segment		26501	0					
ANR	26570	Identifier	size		26501	1					
ANR	26571	PtrMemberAccess	segment -> size		26501	1					
ANR	26572	Identifier	segment		26501	0					
ANR	26573	Identifier	size		26501	1					
ANR	26574	Identifier	size		26501	2					
ANR	26575	ExpressionStatement	"storage -> handlers -> _free ( storage , segment )"	168:3:4464:4506	26501	1	True				
ANR	26576	CallExpression	"storage -> handlers -> _free ( storage , segment )"		26501	0					
ANR	26577	Callee	storage -> handlers -> _free		26501	0					
ANR	26578	PtrMemberAccess	storage -> handlers -> _free		26501	0					
ANR	26579	PtrMemberAccess	storage -> handlers		26501	0					
ANR	26580	Identifier	storage		26501	0					
ANR	26581	Identifier	handlers		26501	1					
ANR	26582	Identifier	_free		26501	1					
ANR	26583	ArgumentList	storage		26501	1					
ANR	26584	Argument	storage		26501	0					
ANR	26585	Identifier	storage		26501	0					
ANR	26586	Argument	segment		26501	1					
ANR	26587	Identifier	segment		26501	0					
ANR	26588	ReturnStatement	return ret ;	173:1:4542:4552	26501	3	True				
ANR	26589	Identifier	ret		26501	0					
ANR	26590	ReturnType	static zend_mm_segment *		26501	1					
ANR	26591	Identifier	zend_mm_mem_mmap_realloc		26501	2					
ANR	26592	ParameterList	"zend_mm_storage * storage , zend_mm_segment * segment , size_t size"		26501	3					
ANR	26593	Parameter	zend_mm_storage * storage	153:49:3917:3940	26501	0	True				
ANR	26594	ParameterType	zend_mm_storage *		26501	0					
ANR	26595	Identifier	storage		26501	1					
ANR	26596	Parameter	zend_mm_segment * segment	153:75:3943:3966	26501	1	True				
ANR	26597	ParameterType	zend_mm_segment *		26501	0					
ANR	26598	Identifier	segment		26501	1					
ANR	26599	Parameter	size_t size	153:101:3969:3979	26501	2	True				
ANR	26600	ParameterType	size_t		26501	0					
ANR	26601	Identifier	size		26501	1					
ANR	26602	CFGEntryNode	ENTRY		26501		True				
ANR	26603	CFGExitNode	EXIT		26501		True				
ANR	26604	Symbol	ret		26501						
ANR	26605	Symbol	storage -> handlers		26501						
ANR	26606	Symbol	mremap		26501						
ANR	26607	Symbol	storage		26501						
ANR	26608	Symbol	* * storage		26501						
ANR	26609	Symbol	MAP_FAILED		26501						
ANR	26610	Symbol	storage -> handlers -> _alloc		26501						
ANR	26611	Symbol	size		26501						
ANR	26612	Symbol	MREMAP_MAYMOVE		26501						
ANR	26613	Symbol	* storage		26501						
ANR	26614	Symbol	segment		26501						
ANR	26615	Symbol	segment -> size		26501						
ANR	26616	Symbol	* segment		26501						
ANR	26617	Symbol	* storage -> handlers		26501						
ANR	26618	Function	zend_mm_mem_mmap_free	176:0:4557:4685							
ANR	26619	FunctionDef	"zend_mm_mem_mmap_free (zend_mm_storage * storage , zend_mm_segment * segment)"		26618	0					
ANR	26620	CompoundStatement		177:0:4643:4685	26618	0					
ANR	26621	ExpressionStatement	"munmap ( ( void * ) segment , segment -> size )"	178:1:4646:4683	26618	0	True				
ANR	26622	CallExpression	"munmap ( ( void * ) segment , segment -> size )"		26618	0					
ANR	26623	Callee	munmap		26618	0					
ANR	26624	Identifier	munmap		26618	0					
ANR	26625	ArgumentList	( void * ) segment		26618	1					
ANR	26626	Argument	( void * ) segment		26618	0					
ANR	26627	CastExpression	( void * ) segment		26618	0					
ANR	26628	CastTarget	void *		26618	0					
ANR	26629	Identifier	segment		26618	1					
ANR	26630	Argument	segment -> size		26618	1					
ANR	26631	PtrMemberAccess	segment -> size		26618	0					
ANR	26632	Identifier	segment		26618	0					
ANR	26633	Identifier	size		26618	1					
ANR	26634	ReturnType	static void		26618	1					
ANR	26635	Identifier	zend_mm_mem_mmap_free		26618	2					
ANR	26636	ParameterList	"zend_mm_storage * storage , zend_mm_segment * segment"		26618	3					
ANR	26637	Parameter	zend_mm_storage * storage	176:34:4591:4614	26618	0	True				
ANR	26638	ParameterType	zend_mm_storage *		26618	0					
ANR	26639	Identifier	storage		26618	1					
ANR	26640	Parameter	zend_mm_segment * segment	176:60:4617:4640	26618	1	True				
ANR	26641	ParameterType	zend_mm_segment *		26618	0					
ANR	26642	Identifier	segment		26618	1					
ANR	26643	CFGEntryNode	ENTRY		26618		True				
ANR	26644	CFGExitNode	EXIT		26618		True				
ANR	26645	Symbol	segment		26618						
ANR	26646	Symbol	segment -> size		26618						
ANR	26647	Symbol	* segment		26618						
ANR	26648	Symbol	storage		26618						
ANR	26649	Function	zend_mm_mem_mmap_anon_alloc	185:0:4723:4987							
ANR	26650	FunctionDef	"zend_mm_mem_mmap_anon_alloc (zend_mm_storage * storage , size_t size)"		26649	0					
ANR	26651	CompoundStatement		186:0:4814:4987	26649	0					
ANR	26652	IdentifierDeclStatement	"zend_mm_segment * ret = ( zend_mm_segment * ) mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANON , - 1 , 0 ) ;"	187:1:4817:4929	26649	0	True				
ANR	26653	IdentifierDecl	"* ret = ( zend_mm_segment * ) mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANON , - 1 , 0 )"		26649	0					
ANR	26654	IdentifierDeclType	zend_mm_segment *		26649	0					
ANR	26655	Identifier	ret		26649	1					
ANR	26656	AssignmentExpression	"* ret = ( zend_mm_segment * ) mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANON , - 1 , 0 )"		26649	2		=			
ANR	26657	Identifier	ret		26649	0					
ANR	26658	CastExpression	"( zend_mm_segment * ) mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANON , - 1 , 0 )"		26649	1					
ANR	26659	CastTarget	zend_mm_segment *		26649	0					
ANR	26660	CallExpression	"mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANON , - 1 , 0 )"		26649	1					
ANR	26661	Callee	mmap		26649	0					
ANR	26662	Identifier	mmap		26649	0					
ANR	26663	ArgumentList	NULL		26649	1					
ANR	26664	Argument	NULL		26649	0					
ANR	26665	Identifier	NULL		26649	0					
ANR	26666	Argument	size		26649	1					
ANR	26667	Identifier	size		26649	0					
ANR	26668	Argument	PROT_READ | PROT_WRITE		26649	2					
ANR	26669	InclusiveOrExpression	PROT_READ | PROT_WRITE		26649	0		|			
ANR	26670	Identifier	PROT_READ		26649	0					
ANR	26671	Identifier	PROT_WRITE		26649	1					
ANR	26672	Argument	MAP_PRIVATE | MAP_ANON		26649	3					
ANR	26673	InclusiveOrExpression	MAP_PRIVATE | MAP_ANON		26649	0		|			
ANR	26674	Identifier	MAP_PRIVATE		26649	0					
ANR	26675	Identifier	MAP_ANON		26649	1					
ANR	26676	Argument	- 1		26649	4					
ANR	26677	UnaryOperationExpression	- 1		26649	0					
ANR	26678	UnaryOperator	-		26649	0					
ANR	26679	PrimaryExpression	1		26649	1					
ANR	26680	Argument	0		26649	5					
ANR	26681	PrimaryExpression	0		26649	0					
ANR	26682	IfStatement	if ( ret == MAP_FAILED )		26649	1					
ANR	26683	Condition	ret == MAP_FAILED	188:5:4936:4952	26649	0	True				
ANR	26684	EqualityExpression	ret == MAP_FAILED		26649	0		==			
ANR	26685	Identifier	ret		26649	0					
ANR	26686	Identifier	MAP_FAILED		26649	1					
ANR	26687	CompoundStatement		3:24:140:140	26649	1					
ANR	26688	ExpressionStatement	ret = NULL	189:2:4959:4969	26649	0	True				
ANR	26689	AssignmentExpression	ret = NULL		26649	0		=			
ANR	26690	Identifier	ret		26649	0					
ANR	26691	Identifier	NULL		26649	1					
ANR	26692	ReturnStatement	return ret ;	191:1:4975:4985	26649	2	True				
ANR	26693	Identifier	ret		26649	0					
ANR	26694	ReturnType	static zend_mm_segment *		26649	1					
ANR	26695	Identifier	zend_mm_mem_mmap_anon_alloc		26649	2					
ANR	26696	ParameterList	"zend_mm_storage * storage , size_t size"		26649	3					
ANR	26697	Parameter	zend_mm_storage * storage	185:52:4775:4798	26649	0	True				
ANR	26698	ParameterType	zend_mm_storage *		26649	0					
ANR	26699	Identifier	storage		26649	1					
ANR	26700	Parameter	size_t size	185:78:4801:4811	26649	1	True				
ANR	26701	ParameterType	size_t		26649	0					
ANR	26702	Identifier	size		26649	1					
ANR	26703	CFGEntryNode	ENTRY		26649		True				
ANR	26704	CFGExitNode	EXIT		26649		True				
ANR	26705	Symbol	ret		26649						
ANR	26706	Symbol	MAP_ANON		26649						
ANR	26707	Symbol	NULL		26649						
ANR	26708	Symbol	size		26649						
ANR	26709	Symbol	PROT_WRITE		26649						
ANR	26710	Symbol	PROT_READ		26649						
ANR	26711	Symbol	storage		26649						
ANR	26712	Symbol	mmap		26649						
ANR	26713	Symbol	MAP_PRIVATE		26649						
ANR	26714	Symbol	MAP_FAILED		26649						
ANR	26715	DeclStmt									
ANR	26716	Decl							int	int	zend_mm_dev_zero_fd
ANR	26717	Function	zend_mm_mem_mmap_zero_init	202:0:5266:5543							
ANR	26718	FunctionDef	zend_mm_mem_mmap_zero_init (void * params)		26717	0					
ANR	26719	CompoundStatement		203:0:5331:5543	26717	0					
ANR	26720	IfStatement	if ( zend_mm_dev_zero_fd == - 1 )		26717	0					
ANR	26721	Condition	zend_mm_dev_zero_fd == - 1	204:5:5338:5362	26717	0	True				
ANR	26722	EqualityExpression	zend_mm_dev_zero_fd == - 1		26717	0		==			
ANR	26723	Identifier	zend_mm_dev_zero_fd		26717	0					
ANR	26724	UnaryOperationExpression	- 1		26717	1					
ANR	26725	UnaryOperator	-		26717	0					
ANR	26726	PrimaryExpression	1		26717	1					
ANR	26727	CompoundStatement		2:32:33:33	26717	1					
ANR	26728	ExpressionStatement	"zend_mm_dev_zero_fd = open ( ""/dev/zero"" , O_RDWR , S_IRUSR | S_IWUSR )"	205:2:5369:5435	26717	0	True				
ANR	26729	AssignmentExpression	"zend_mm_dev_zero_fd = open ( ""/dev/zero"" , O_RDWR , S_IRUSR | S_IWUSR )"		26717	0		=			
ANR	26730	Identifier	zend_mm_dev_zero_fd		26717	0					
ANR	26731	CallExpression	"open ( ""/dev/zero"" , O_RDWR , S_IRUSR | S_IWUSR )"		26717	1					
ANR	26732	Callee	open		26717	0					
ANR	26733	Identifier	open		26717	0					
ANR	26734	ArgumentList	"""/dev/zero"""		26717	1					
ANR	26735	Argument	"""/dev/zero"""		26717	0					
ANR	26736	PrimaryExpression	"""/dev/zero"""		26717	0					
ANR	26737	Argument	O_RDWR		26717	1					
ANR	26738	Identifier	O_RDWR		26717	0					
ANR	26739	Argument	S_IRUSR | S_IWUSR		26717	2					
ANR	26740	InclusiveOrExpression	S_IRUSR | S_IWUSR		26717	0		|			
ANR	26741	Identifier	S_IRUSR		26717	0					
ANR	26742	Identifier	S_IWUSR		26717	1					
ANR	26743	IfStatement	if ( zend_mm_dev_zero_fd >= 0 )		26717	1					
ANR	26744	Condition	zend_mm_dev_zero_fd >= 0	207:5:5445:5468	26717	0	True				
ANR	26745	RelationalExpression	zend_mm_dev_zero_fd >= 0		26717	0		>=			
ANR	26746	Identifier	zend_mm_dev_zero_fd		26717	0					
ANR	26747	PrimaryExpression	0		26717	1					
ANR	26748	CompoundStatement		5:31:139:139	26717	1					
ANR	26749	ReturnStatement	return malloc ( sizeof ( zend_mm_storage ) ) ;	208:2:5475:5513	26717	0	True				
ANR	26750	CallExpression	malloc ( sizeof ( zend_mm_storage ) )		26717	0					
ANR	26751	Callee	malloc		26717	0					
ANR	26752	Identifier	malloc		26717	0					
ANR	26753	ArgumentList	sizeof ( zend_mm_storage )		26717	1					
ANR	26754	Argument	sizeof ( zend_mm_storage )		26717	0					
ANR	26755	SizeofExpression	sizeof ( zend_mm_storage )		26717	0					
ANR	26756	Sizeof	sizeof		26717	0					
ANR	26757	SizeofOperand	zend_mm_storage		26717	1					
ANR	26758	ElseStatement	else		26717	0					
ANR	26759	CompoundStatement		7:8:191:191	26717	0					
ANR	26760	ReturnStatement	return NULL ;	210:2:5527:5538	26717	0	True				
ANR	26761	Identifier	NULL		26717	0					
ANR	26762	ReturnType	static zend_mm_storage *		26717	1					
ANR	26763	Identifier	zend_mm_mem_mmap_zero_init		26717	2					
ANR	26764	ParameterList	void * params		26717	3					
ANR	26765	Parameter	void * params	202:51:5317:5328	26717	0	True				
ANR	26766	ParameterType	void *		26717	0					
ANR	26767	Identifier	params		26717	1					
ANR	26768	CFGEntryNode	ENTRY		26717		True				
ANR	26769	CFGExitNode	EXIT		26717		True				
ANR	26770	Symbol	malloc		26717						
ANR	26771	Symbol	O_RDWR		26717						
ANR	26772	Symbol	S_IRUSR		26717						
ANR	26773	Symbol	NULL		26717						
ANR	26774	Symbol	S_IWUSR		26717						
ANR	26775	Symbol	zend_mm_dev_zero_fd		26717						
ANR	26776	Symbol	params		26717						
ANR	26777	Symbol	open		26717						
ANR	26778	Function	zend_mm_mem_mmap_zero_dtor	214:0:5546:5658							
ANR	26779	FunctionDef	zend_mm_mem_mmap_zero_dtor (zend_mm_storage * storage)		26778	0					
ANR	26780	CompoundStatement		215:0:5611:5658	26778	0					
ANR	26781	ExpressionStatement	close ( zend_mm_dev_zero_fd )	216:1:5614:5640	26778	0	True				
ANR	26782	CallExpression	close ( zend_mm_dev_zero_fd )		26778	0					
ANR	26783	Callee	close		26778	0					
ANR	26784	Identifier	close		26778	0					
ANR	26785	ArgumentList	zend_mm_dev_zero_fd		26778	1					
ANR	26786	Argument	zend_mm_dev_zero_fd		26778	0					
ANR	26787	Identifier	zend_mm_dev_zero_fd		26778	0					
ANR	26788	ExpressionStatement	free ( storage )	217:1:5643:5656	26778	1	True				
ANR	26789	CallExpression	free ( storage )		26778	0					
ANR	26790	Callee	free		26778	0					
ANR	26791	Identifier	free		26778	0					
ANR	26792	ArgumentList	storage		26778	1					
ANR	26793	Argument	storage		26778	0					
ANR	26794	Identifier	storage		26778	0					
ANR	26795	ReturnType	static void		26778	1					
ANR	26796	Identifier	zend_mm_mem_mmap_zero_dtor		26778	2					
ANR	26797	ParameterList	zend_mm_storage * storage		26778	3					
ANR	26798	Parameter	zend_mm_storage * storage	214:39:5585:5608	26778	0	True				
ANR	26799	ParameterType	zend_mm_storage *		26778	0					
ANR	26800	Identifier	storage		26778	1					
ANR	26801	CFGEntryNode	ENTRY		26778		True				
ANR	26802	CFGExitNode	EXIT		26778		True				
ANR	26803	Symbol	zend_mm_dev_zero_fd		26778						
ANR	26804	Symbol	storage		26778						
ANR	26805	Function	zend_mm_mem_mmap_zero_alloc	220:0:5661:5931							
ANR	26806	FunctionDef	"zend_mm_mem_mmap_zero_alloc (zend_mm_storage * storage , size_t size)"		26805	0					
ANR	26807	CompoundStatement		221:0:5752:5931	26805	0					
ANR	26808	IdentifierDeclStatement	"zend_mm_segment * ret = ( zend_mm_segment * ) mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE , zend_mm_dev_zero_fd , 0 ) ;"	222:1:5755:5873	26805	0	True				
ANR	26809	IdentifierDecl	"* ret = ( zend_mm_segment * ) mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE , zend_mm_dev_zero_fd , 0 )"		26805	0					
ANR	26810	IdentifierDeclType	zend_mm_segment *		26805	0					
ANR	26811	Identifier	ret		26805	1					
ANR	26812	AssignmentExpression	"* ret = ( zend_mm_segment * ) mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE , zend_mm_dev_zero_fd , 0 )"		26805	2		=			
ANR	26813	Identifier	ret		26805	0					
ANR	26814	CastExpression	"( zend_mm_segment * ) mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE , zend_mm_dev_zero_fd , 0 )"		26805	1					
ANR	26815	CastTarget	zend_mm_segment *		26805	0					
ANR	26816	CallExpression	"mmap ( NULL , size , PROT_READ | PROT_WRITE , MAP_PRIVATE , zend_mm_dev_zero_fd , 0 )"		26805	1					
ANR	26817	Callee	mmap		26805	0					
ANR	26818	Identifier	mmap		26805	0					
ANR	26819	ArgumentList	NULL		26805	1					
ANR	26820	Argument	NULL		26805	0					
ANR	26821	Identifier	NULL		26805	0					
ANR	26822	Argument	size		26805	1					
ANR	26823	Identifier	size		26805	0					
ANR	26824	Argument	PROT_READ | PROT_WRITE		26805	2					
ANR	26825	InclusiveOrExpression	PROT_READ | PROT_WRITE		26805	0		|			
ANR	26826	Identifier	PROT_READ		26805	0					
ANR	26827	Identifier	PROT_WRITE		26805	1					
ANR	26828	Argument	MAP_PRIVATE		26805	3					
ANR	26829	Identifier	MAP_PRIVATE		26805	0					
ANR	26830	Argument	zend_mm_dev_zero_fd		26805	4					
ANR	26831	Identifier	zend_mm_dev_zero_fd		26805	0					
ANR	26832	Argument	0		26805	5					
ANR	26833	PrimaryExpression	0		26805	0					
ANR	26834	IfStatement	if ( ret == MAP_FAILED )		26805	1					
ANR	26835	Condition	ret == MAP_FAILED	223:5:5880:5896	26805	0	True				
ANR	26836	EqualityExpression	ret == MAP_FAILED		26805	0		==			
ANR	26837	Identifier	ret		26805	0					
ANR	26838	Identifier	MAP_FAILED		26805	1					
ANR	26839	CompoundStatement		3:24:146:146	26805	1					
ANR	26840	ExpressionStatement	ret = NULL	224:2:5903:5913	26805	0	True				
ANR	26841	AssignmentExpression	ret = NULL		26805	0		=			
ANR	26842	Identifier	ret		26805	0					
ANR	26843	Identifier	NULL		26805	1					
ANR	26844	ReturnStatement	return ret ;	226:1:5919:5929	26805	2	True				
ANR	26845	Identifier	ret		26805	0					
ANR	26846	ReturnType	static zend_mm_segment *		26805	1					
ANR	26847	Identifier	zend_mm_mem_mmap_zero_alloc		26805	2					
ANR	26848	ParameterList	"zend_mm_storage * storage , size_t size"		26805	3					
ANR	26849	Parameter	zend_mm_storage * storage	220:52:5713:5736	26805	0	True				
ANR	26850	ParameterType	zend_mm_storage *		26805	0					
ANR	26851	Identifier	storage		26805	1					
ANR	26852	Parameter	size_t size	220:78:5739:5749	26805	1	True				
ANR	26853	ParameterType	size_t		26805	0					
ANR	26854	Identifier	size		26805	1					
ANR	26855	CFGEntryNode	ENTRY		26805		True				
ANR	26856	CFGExitNode	EXIT		26805		True				
ANR	26857	Symbol	ret		26805						
ANR	26858	Symbol	NULL		26805						
ANR	26859	Symbol	size		26805						
ANR	26860	Symbol	PROT_WRITE		26805						
ANR	26861	Symbol	PROT_READ		26805						
ANR	26862	Symbol	zend_mm_dev_zero_fd		26805						
ANR	26863	Symbol	storage		26805						
ANR	26864	Symbol	mmap		26805						
ANR	26865	Symbol	MAP_PRIVATE		26805						
ANR	26866	Symbol	MAP_FAILED		26805						
ANR	26867	Function	zend_mm_mem_win32_init	235:0:6176:6531							
ANR	26868	FunctionDef	zend_mm_mem_win32_init (void * params)		26867	0					
ANR	26869	CompoundStatement		236:0:6237:6531	26867	0					
ANR	26870	IdentifierDeclStatement	"HANDLE heap = HeapCreate ( HEAP_NO_SERIALIZE , 0 , 0 ) ;"	237:1:6240:6289	26867	0	True				
ANR	26871	IdentifierDecl	"heap = HeapCreate ( HEAP_NO_SERIALIZE , 0 , 0 )"		26867	0					
ANR	26872	IdentifierDeclType	HANDLE		26867	0					
ANR	26873	Identifier	heap		26867	1					
ANR	26874	AssignmentExpression	"heap = HeapCreate ( HEAP_NO_SERIALIZE , 0 , 0 )"		26867	2		=			
ANR	26875	Identifier	heap		26867	0					
ANR	26876	CallExpression	"HeapCreate ( HEAP_NO_SERIALIZE , 0 , 0 )"		26867	1					
ANR	26877	Callee	HeapCreate		26867	0					
ANR	26878	Identifier	HeapCreate		26867	0					
ANR	26879	ArgumentList	HEAP_NO_SERIALIZE		26867	1					
ANR	26880	Argument	HEAP_NO_SERIALIZE		26867	0					
ANR	26881	Identifier	HEAP_NO_SERIALIZE		26867	0					
ANR	26882	Argument	0		26867	1					
ANR	26883	PrimaryExpression	0		26867	0					
ANR	26884	Argument	0		26867	2					
ANR	26885	PrimaryExpression	0		26867	0					
ANR	26886	IdentifierDeclStatement	zend_mm_storage * storage ;	238:1:6292:6316	26867	1	True				
ANR	26887	IdentifierDecl	* storage		26867	0					
ANR	26888	IdentifierDeclType	zend_mm_storage *		26867	0					
ANR	26889	Identifier	storage		26867	1					
ANR	26890	IfStatement	if ( heap == NULL )		26867	2					
ANR	26891	Condition	heap == NULL	240:5:6324:6335	26867	0	True				
ANR	26892	EqualityExpression	heap == NULL		26867	0		==			
ANR	26893	Identifier	heap		26867	0					
ANR	26894	Identifier	NULL		26867	1					
ANR	26895	CompoundStatement		5:19:100:100	26867	1					
ANR	26896	ReturnStatement	return NULL ;	241:2:6342:6353	26867	0	True				
ANR	26897	Identifier	NULL		26867	0					
ANR	26898	ExpressionStatement	storage = ( zend_mm_storage * ) malloc ( sizeof ( zend_mm_storage ) )	243:1:6359:6418	26867	3	True				
ANR	26899	AssignmentExpression	storage = ( zend_mm_storage * ) malloc ( sizeof ( zend_mm_storage ) )		26867	0		=			
ANR	26900	Identifier	storage		26867	0					
ANR	26901	CastExpression	( zend_mm_storage * ) malloc ( sizeof ( zend_mm_storage ) )		26867	1					
ANR	26902	CastTarget	zend_mm_storage *		26867	0					
ANR	26903	CallExpression	malloc ( sizeof ( zend_mm_storage ) )		26867	1					
ANR	26904	Callee	malloc		26867	0					
ANR	26905	Identifier	malloc		26867	0					
ANR	26906	ArgumentList	sizeof ( zend_mm_storage )		26867	1					
ANR	26907	Argument	sizeof ( zend_mm_storage )		26867	0					
ANR	26908	SizeofExpression	sizeof ( zend_mm_storage )		26867	0					
ANR	26909	Sizeof	sizeof		26867	0					
ANR	26910	SizeofOperand	zend_mm_storage		26867	1					
ANR	26911	IfStatement	if ( storage == NULL )		26867	4					
ANR	26912	Condition	storage == NULL	244:5:6425:6439	26867	0	True				
ANR	26913	EqualityExpression	storage == NULL		26867	0		==			
ANR	26914	Identifier	storage		26867	0					
ANR	26915	Identifier	NULL		26867	1					
ANR	26916	CompoundStatement		9:22:204:204	26867	1					
ANR	26917	ExpressionStatement	HeapDestroy ( heap )	245:2:6446:6463	26867	0	True				
ANR	26918	CallExpression	HeapDestroy ( heap )		26867	0					
ANR	26919	Callee	HeapDestroy		26867	0					
ANR	26920	Identifier	HeapDestroy		26867	0					
ANR	26921	ArgumentList	heap		26867	1					
ANR	26922	Argument	heap		26867	0					
ANR	26923	Identifier	heap		26867	0					
ANR	26924	ReturnStatement	return NULL ;	246:2:6467:6478	26867	1	True				
ANR	26925	Identifier	NULL		26867	0					
ANR	26926	ExpressionStatement	storage -> data = ( void * ) heap	248:1:6484:6512	26867	5	True				
ANR	26927	AssignmentExpression	storage -> data = ( void * ) heap		26867	0		=			
ANR	26928	PtrMemberAccess	storage -> data		26867	0					
ANR	26929	Identifier	storage		26867	0					
ANR	26930	Identifier	data		26867	1					
ANR	26931	CastExpression	( void * ) heap		26867	1					
ANR	26932	CastTarget	void *		26867	0					
ANR	26933	Identifier	heap		26867	1					
ANR	26934	ReturnStatement	return storage ;	249:1:6515:6529	26867	6	True				
ANR	26935	Identifier	storage		26867	0					
ANR	26936	ReturnType	static zend_mm_storage *		26867	1					
ANR	26937	Identifier	zend_mm_mem_win32_init		26867	2					
ANR	26938	ParameterList	void * params		26867	3					
ANR	26939	Parameter	void * params	235:47:6223:6234	26867	0	True				
ANR	26940	ParameterType	void *		26867	0					
ANR	26941	Identifier	params		26867	1					
ANR	26942	CFGEntryNode	ENTRY		26867		True				
ANR	26943	CFGExitNode	EXIT		26867		True				
ANR	26944	Symbol	malloc		26867						
ANR	26945	Symbol	NULL		26867						
ANR	26946	Symbol	* storage		26867						
ANR	26947	Symbol	HeapCreate		26867						
ANR	26948	Symbol	storage		26867						
ANR	26949	Symbol	params		26867						
ANR	26950	Symbol	heap		26867						
ANR	26951	Symbol	HEAP_NO_SERIALIZE		26867						
ANR	26952	Symbol	storage -> data		26867						
ANR	26953	Function	zend_mm_mem_win32_dtor	252:0:6534:6650							
ANR	26954	FunctionDef	zend_mm_mem_win32_dtor (zend_mm_storage * storage)		26953	0					
ANR	26955	CompoundStatement		253:0:6595:6650	26953	0					
ANR	26956	ExpressionStatement	HeapDestroy ( ( HANDLE ) storage -> data )	254:1:6598:6632	26953	0	True				
ANR	26957	CallExpression	HeapDestroy ( ( HANDLE ) storage -> data )		26953	0					
ANR	26958	Callee	HeapDestroy		26953	0					
ANR	26959	Identifier	HeapDestroy		26953	0					
ANR	26960	ArgumentList	( HANDLE ) storage -> data		26953	1					
ANR	26961	Argument	( HANDLE ) storage -> data		26953	0					
ANR	26962	CastExpression	( HANDLE ) storage -> data		26953	0					
ANR	26963	CastTarget	HANDLE		26953	0					
ANR	26964	PtrMemberAccess	storage -> data		26953	1					
ANR	26965	Identifier	storage		26953	0					
ANR	26966	Identifier	data		26953	1					
ANR	26967	ExpressionStatement	free ( storage )	255:1:6635:6648	26953	1	True				
ANR	26968	CallExpression	free ( storage )		26953	0					
ANR	26969	Callee	free		26953	0					
ANR	26970	Identifier	free		26953	0					
ANR	26971	ArgumentList	storage		26953	1					
ANR	26972	Argument	storage		26953	0					
ANR	26973	Identifier	storage		26953	0					
ANR	26974	ReturnType	static void		26953	1					
ANR	26975	Identifier	zend_mm_mem_win32_dtor		26953	2					
ANR	26976	ParameterList	zend_mm_storage * storage		26953	3					
ANR	26977	Parameter	zend_mm_storage * storage	252:35:6569:6592	26953	0	True				
ANR	26978	ParameterType	zend_mm_storage *		26953	0					
ANR	26979	Identifier	storage		26953	1					
ANR	26980	CFGEntryNode	ENTRY		26953		True				
ANR	26981	CFGExitNode	EXIT		26953		True				
ANR	26982	Symbol	* storage		26953						
ANR	26983	Symbol	storage		26953						
ANR	26984	Symbol	storage -> data		26953						
ANR	26985	Function	zend_mm_mem_win32_compact	258:0:6653:6823							
ANR	26986	FunctionDef	zend_mm_mem_win32_compact (zend_mm_storage * storage)		26985	0					
ANR	26987	CompoundStatement		259:0:6717:6823	26985	0					
ANR	26988	ExpressionStatement	HeapDestroy ( ( HANDLE ) storage -> data )	260:4:6723:6757	26985	0	True				
ANR	26989	CallExpression	HeapDestroy ( ( HANDLE ) storage -> data )		26985	0					
ANR	26990	Callee	HeapDestroy		26985	0					
ANR	26991	Identifier	HeapDestroy		26985	0					
ANR	26992	ArgumentList	( HANDLE ) storage -> data		26985	1					
ANR	26993	Argument	( HANDLE ) storage -> data		26985	0					
ANR	26994	CastExpression	( HANDLE ) storage -> data		26985	0					
ANR	26995	CastTarget	HANDLE		26985	0					
ANR	26996	PtrMemberAccess	storage -> data		26985	1					
ANR	26997	Identifier	storage		26985	0					
ANR	26998	Identifier	data		26985	1					
ANR	26999	ExpressionStatement	"storage -> data = ( void * ) HeapCreate ( HEAP_NO_SERIALIZE , 0 , 0 )"	261:4:6763:6821	26985	1	True				
ANR	27000	AssignmentExpression	"storage -> data = ( void * ) HeapCreate ( HEAP_NO_SERIALIZE , 0 , 0 )"		26985	0		=			
ANR	27001	PtrMemberAccess	storage -> data		26985	0					
ANR	27002	Identifier	storage		26985	0					
ANR	27003	Identifier	data		26985	1					
ANR	27004	CastExpression	"( void * ) HeapCreate ( HEAP_NO_SERIALIZE , 0 , 0 )"		26985	1					
ANR	27005	CastTarget	void *		26985	0					
ANR	27006	CallExpression	"HeapCreate ( HEAP_NO_SERIALIZE , 0 , 0 )"		26985	1					
ANR	27007	Callee	HeapCreate		26985	0					
ANR	27008	Identifier	HeapCreate		26985	0					
ANR	27009	ArgumentList	HEAP_NO_SERIALIZE		26985	1					
ANR	27010	Argument	HEAP_NO_SERIALIZE		26985	0					
ANR	27011	Identifier	HEAP_NO_SERIALIZE		26985	0					
ANR	27012	Argument	0		26985	1					
ANR	27013	PrimaryExpression	0		26985	0					
ANR	27014	Argument	0		26985	2					
ANR	27015	PrimaryExpression	0		26985	0					
ANR	27016	ReturnType	static void		26985	1					
ANR	27017	Identifier	zend_mm_mem_win32_compact		26985	2					
ANR	27018	ParameterList	zend_mm_storage * storage		26985	3					
ANR	27019	Parameter	zend_mm_storage * storage	258:38:6691:6714	26985	0	True				
ANR	27020	ParameterType	zend_mm_storage *		26985	0					
ANR	27021	Identifier	storage		26985	1					
ANR	27022	CFGEntryNode	ENTRY		26985		True				
ANR	27023	CFGExitNode	EXIT		26985		True				
ANR	27024	Symbol	* storage		26985						
ANR	27025	Symbol	HeapCreate		26985						
ANR	27026	Symbol	storage		26985						
ANR	27027	Symbol	HEAP_NO_SERIALIZE		26985						
ANR	27028	Symbol	storage -> data		26985						
ANR	27029	Function	zend_mm_mem_win32_alloc	264:0:6826:7001							
ANR	27030	FunctionDef	"zend_mm_mem_win32_alloc (zend_mm_storage * storage , size_t size)"		27029	0					
ANR	27031	CompoundStatement		265:0:6913:7001	27029	0					
ANR	27032	ReturnStatement	"return ( zend_mm_segment * ) HeapAlloc ( ( HANDLE ) storage -> data , HEAP_NO_SERIALIZE , size ) ;"	266:1:6916:6999	27029	0	True				
ANR	27033	CastExpression	"( zend_mm_segment * ) HeapAlloc ( ( HANDLE ) storage -> data , HEAP_NO_SERIALIZE , size )"		27029	0					
ANR	27034	CastTarget	zend_mm_segment *		27029	0					
ANR	27035	CallExpression	"HeapAlloc ( ( HANDLE ) storage -> data , HEAP_NO_SERIALIZE , size )"		27029	1					
ANR	27036	Callee	HeapAlloc		27029	0					
ANR	27037	Identifier	HeapAlloc		27029	0					
ANR	27038	ArgumentList	( HANDLE ) storage -> data		27029	1					
ANR	27039	Argument	( HANDLE ) storage -> data		27029	0					
ANR	27040	CastExpression	( HANDLE ) storage -> data		27029	0					
ANR	27041	CastTarget	HANDLE		27029	0					
ANR	27042	PtrMemberAccess	storage -> data		27029	1					
ANR	27043	Identifier	storage		27029	0					
ANR	27044	Identifier	data		27029	1					
ANR	27045	Argument	HEAP_NO_SERIALIZE		27029	1					
ANR	27046	Identifier	HEAP_NO_SERIALIZE		27029	0					
ANR	27047	Argument	size		27029	2					
ANR	27048	Identifier	size		27029	0					
ANR	27049	ReturnType	static zend_mm_segment *		27029	1					
ANR	27050	Identifier	zend_mm_mem_win32_alloc		27029	2					
ANR	27051	ParameterList	"zend_mm_storage * storage , size_t size"		27029	3					
ANR	27052	Parameter	zend_mm_storage * storage	264:48:6874:6897	27029	0	True				
ANR	27053	ParameterType	zend_mm_storage *		27029	0					
ANR	27054	Identifier	storage		27029	1					
ANR	27055	Parameter	size_t size	264:74:6900:6910	27029	1	True				
ANR	27056	ParameterType	size_t		27029	0					
ANR	27057	Identifier	size		27029	1					
ANR	27058	CFGEntryNode	ENTRY		27029		True				
ANR	27059	CFGExitNode	EXIT		27029		True				
ANR	27060	Symbol	size		27029						
ANR	27061	Symbol	* storage		27029						
ANR	27062	Symbol	storage		27029						
ANR	27063	Symbol	HEAP_NO_SERIALIZE		27029						
ANR	27064	Symbol	HeapAlloc		27029						
ANR	27065	Symbol	storage -> data		27029						
ANR	27066	Function	zend_mm_mem_win32_free	269:0:7004:7155							
ANR	27067	FunctionDef	"zend_mm_mem_win32_free (zend_mm_storage * storage , zend_mm_segment * segment)"		27066	0					
ANR	27068	CompoundStatement		270:0:7091:7155	27066	0					
ANR	27069	ExpressionStatement	"HeapFree ( ( HANDLE ) storage -> data , HEAP_NO_SERIALIZE , segment )"	271:1:7094:7153	27066	0	True				
ANR	27070	CallExpression	"HeapFree ( ( HANDLE ) storage -> data , HEAP_NO_SERIALIZE , segment )"		27066	0					
ANR	27071	Callee	HeapFree		27066	0					
ANR	27072	Identifier	HeapFree		27066	0					
ANR	27073	ArgumentList	( HANDLE ) storage -> data		27066	1					
ANR	27074	Argument	( HANDLE ) storage -> data		27066	0					
ANR	27075	CastExpression	( HANDLE ) storage -> data		27066	0					
ANR	27076	CastTarget	HANDLE		27066	0					
ANR	27077	PtrMemberAccess	storage -> data		27066	1					
ANR	27078	Identifier	storage		27066	0					
ANR	27079	Identifier	data		27066	1					
ANR	27080	Argument	HEAP_NO_SERIALIZE		27066	1					
ANR	27081	Identifier	HEAP_NO_SERIALIZE		27066	0					
ANR	27082	Argument	segment		27066	2					
ANR	27083	Identifier	segment		27066	0					
ANR	27084	ReturnType	static void		27066	1					
ANR	27085	Identifier	zend_mm_mem_win32_free		27066	2					
ANR	27086	ParameterList	"zend_mm_storage * storage , zend_mm_segment * segment"		27066	3					
ANR	27087	Parameter	zend_mm_storage * storage	269:35:7039:7062	27066	0	True				
ANR	27088	ParameterType	zend_mm_storage *		27066	0					
ANR	27089	Identifier	storage		27066	1					
ANR	27090	Parameter	zend_mm_segment * segment	269:61:7065:7088	27066	1	True				
ANR	27091	ParameterType	zend_mm_segment *		27066	0					
ANR	27092	Identifier	segment		27066	1					
ANR	27093	CFGEntryNode	ENTRY		27066		True				
ANR	27094	CFGExitNode	EXIT		27066		True				
ANR	27095	Symbol	* storage		27066						
ANR	27096	Symbol	segment		27066						
ANR	27097	Symbol	storage		27066						
ANR	27098	Symbol	HEAP_NO_SERIALIZE		27066						
ANR	27099	Symbol	storage -> data		27066						
ANR	27100	Function	zend_mm_mem_win32_realloc	274:0:7158:7372							
ANR	27101	FunctionDef	"zend_mm_mem_win32_realloc (zend_mm_storage * storage , zend_mm_segment * segment , size_t size)"		27100	0					
ANR	27102	CompoundStatement		275:0:7273:7372	27100	0					
ANR	27103	ReturnStatement	"return ( zend_mm_segment * ) HeapReAlloc ( ( HANDLE ) storage -> data , HEAP_NO_SERIALIZE , segment , size ) ;"	276:1:7276:7370	27100	0	True				
ANR	27104	CastExpression	"( zend_mm_segment * ) HeapReAlloc ( ( HANDLE ) storage -> data , HEAP_NO_SERIALIZE , segment , size )"		27100	0					
ANR	27105	CastTarget	zend_mm_segment *		27100	0					
ANR	27106	CallExpression	"HeapReAlloc ( ( HANDLE ) storage -> data , HEAP_NO_SERIALIZE , segment , size )"		27100	1					
ANR	27107	Callee	HeapReAlloc		27100	0					
ANR	27108	Identifier	HeapReAlloc		27100	0					
ANR	27109	ArgumentList	( HANDLE ) storage -> data		27100	1					
ANR	27110	Argument	( HANDLE ) storage -> data		27100	0					
ANR	27111	CastExpression	( HANDLE ) storage -> data		27100	0					
ANR	27112	CastTarget	HANDLE		27100	0					
ANR	27113	PtrMemberAccess	storage -> data		27100	1					
ANR	27114	Identifier	storage		27100	0					
ANR	27115	Identifier	data		27100	1					
ANR	27116	Argument	HEAP_NO_SERIALIZE		27100	1					
ANR	27117	Identifier	HEAP_NO_SERIALIZE		27100	0					
ANR	27118	Argument	segment		27100	2					
ANR	27119	Identifier	segment		27100	0					
ANR	27120	Argument	size		27100	3					
ANR	27121	Identifier	size		27100	0					
ANR	27122	ReturnType	static zend_mm_segment *		27100	1					
ANR	27123	Identifier	zend_mm_mem_win32_realloc		27100	2					
ANR	27124	ParameterList	"zend_mm_storage * storage , zend_mm_segment * segment , size_t size"		27100	3					
ANR	27125	Parameter	zend_mm_storage * storage	274:50:7208:7231	27100	0	True				
ANR	27126	ParameterType	zend_mm_storage *		27100	0					
ANR	27127	Identifier	storage		27100	1					
ANR	27128	Parameter	zend_mm_segment * segment	274:76:7234:7257	27100	1	True				
ANR	27129	ParameterType	zend_mm_segment *		27100	0					
ANR	27130	Identifier	segment		27100	1					
ANR	27131	Parameter	size_t size	274:102:7260:7270	27100	2	True				
ANR	27132	ParameterType	size_t		27100	0					
ANR	27133	Identifier	size		27100	1					
ANR	27134	CFGEntryNode	ENTRY		27100		True				
ANR	27135	CFGExitNode	EXIT		27100		True				
ANR	27136	Symbol	size		27100						
ANR	27137	Symbol	* storage		27100						
ANR	27138	Symbol	segment		27100						
ANR	27139	Symbol	HeapReAlloc		27100						
ANR	27140	Symbol	storage		27100						
ANR	27141	Symbol	HEAP_NO_SERIALIZE		27100						
ANR	27142	Symbol	storage -> data		27100						
ANR	27143	Function	zend_mm_mem_malloc_alloc	285:0:7600:7730							
ANR	27144	FunctionDef	"zend_mm_mem_malloc_alloc (zend_mm_storage * storage , size_t size)"		27143	0					
ANR	27145	CompoundStatement		286:0:7688:7730	27143	0					
ANR	27146	ReturnStatement	return ( zend_mm_segment * ) malloc ( size ) ;	287:1:7691:7728	27143	0	True				
ANR	27147	CastExpression	( zend_mm_segment * ) malloc ( size )		27143	0					
ANR	27148	CastTarget	zend_mm_segment *		27143	0					
ANR	27149	CallExpression	malloc ( size )		27143	1					
ANR	27150	Callee	malloc		27143	0					
ANR	27151	Identifier	malloc		27143	0					
ANR	27152	ArgumentList	size		27143	1					
ANR	27153	Argument	size		27143	0					
ANR	27154	Identifier	size		27143	0					
ANR	27155	ReturnType	static zend_mm_segment *		27143	1					
ANR	27156	Identifier	zend_mm_mem_malloc_alloc		27143	2					
ANR	27157	ParameterList	"zend_mm_storage * storage , size_t size"		27143	3					
ANR	27158	Parameter	zend_mm_storage * storage	285:49:7649:7672	27143	0	True				
ANR	27159	ParameterType	zend_mm_storage *		27143	0					
ANR	27160	Identifier	storage		27143	1					
ANR	27161	Parameter	size_t size	285:75:7675:7685	27143	1	True				
ANR	27162	ParameterType	size_t		27143	0					
ANR	27163	Identifier	size		27143	1					
ANR	27164	CFGEntryNode	ENTRY		27143		True				
ANR	27165	CFGExitNode	EXIT		27143		True				
ANR	27166	Symbol	malloc		27143						
ANR	27167	Symbol	size		27143						
ANR	27168	Symbol	storage		27143						
ANR	27169	Function	zend_mm_mem_malloc_realloc	290:0:7733:7893							
ANR	27170	FunctionDef	"zend_mm_mem_malloc_realloc (zend_mm_storage * storage , zend_mm_segment * ptr , size_t size)"		27169	0					
ANR	27171	CompoundStatement		291:0:7845:7893	27169	0					
ANR	27172	ReturnStatement	"return ( zend_mm_segment * ) realloc ( ptr , size ) ;"	292:1:7848:7891	27169	0	True				
ANR	27173	CastExpression	"( zend_mm_segment * ) realloc ( ptr , size )"		27169	0					
ANR	27174	CastTarget	zend_mm_segment *		27169	0					
ANR	27175	CallExpression	"realloc ( ptr , size )"		27169	1					
ANR	27176	Callee	realloc		27169	0					
ANR	27177	Identifier	realloc		27169	0					
ANR	27178	ArgumentList	ptr		27169	1					
ANR	27179	Argument	ptr		27169	0					
ANR	27180	Identifier	ptr		27169	0					
ANR	27181	Argument	size		27169	1					
ANR	27182	Identifier	size		27169	0					
ANR	27183	ReturnType	static zend_mm_segment *		27169	1					
ANR	27184	Identifier	zend_mm_mem_malloc_realloc		27169	2					
ANR	27185	ParameterList	"zend_mm_storage * storage , zend_mm_segment * ptr , size_t size"		27169	3					
ANR	27186	Parameter	zend_mm_storage * storage	290:51:7784:7807	27169	0	True				
ANR	27187	ParameterType	zend_mm_storage *		27169	0					
ANR	27188	Identifier	storage		27169	1					
ANR	27189	Parameter	zend_mm_segment * ptr	290:77:7810:7829	27169	1	True				
ANR	27190	ParameterType	zend_mm_segment *		27169	0					
ANR	27191	Identifier	ptr		27169	1					
ANR	27192	Parameter	size_t size	290:99:7832:7842	27169	2	True				
ANR	27193	ParameterType	size_t		27169	0					
ANR	27194	Identifier	size		27169	1					
ANR	27195	CFGEntryNode	ENTRY		27169		True				
ANR	27196	CFGExitNode	EXIT		27169		True				
ANR	27197	Symbol	size		27169						
ANR	27198	Symbol	storage		27169						
ANR	27199	Symbol	realloc		27169						
ANR	27200	Symbol	ptr		27169						
ANR	27201	Function	zend_mm_mem_malloc_free	295:0:7896:7994							
ANR	27202	FunctionDef	"zend_mm_mem_malloc_free (zend_mm_storage * storage , zend_mm_segment * ptr)"		27201	0					
ANR	27203	CompoundStatement		296:0:7980:7994	27201	0					
ANR	27204	ExpressionStatement	free ( ptr )	297:1:7983:7992	27201	0	True				
ANR	27205	CallExpression	free ( ptr )		27201	0					
ANR	27206	Callee	free		27201	0					
ANR	27207	Identifier	free		27201	0					
ANR	27208	ArgumentList	ptr		27201	1					
ANR	27209	Argument	ptr		27201	0					
ANR	27210	Identifier	ptr		27201	0					
ANR	27211	ReturnType	static void		27201	1					
ANR	27212	Identifier	zend_mm_mem_malloc_free		27201	2					
ANR	27213	ParameterList	"zend_mm_storage * storage , zend_mm_segment * ptr"		27201	3					
ANR	27214	Parameter	zend_mm_storage * storage	295:36:7932:7955	27201	0	True				
ANR	27215	ParameterType	zend_mm_storage *		27201	0					
ANR	27216	Identifier	storage		27201	1					
ANR	27217	Parameter	zend_mm_segment * ptr	295:62:7958:7977	27201	1	True				
ANR	27218	ParameterType	zend_mm_segment *		27201	0					
ANR	27219	Identifier	ptr		27201	1					
ANR	27220	CFGEntryNode	ENTRY		27201		True				
ANR	27221	CFGExitNode	EXIT		27201		True				
ANR	27222	Symbol	storage		27201						
ANR	27223	Symbol	ptr		27201						
ANR	27224	DeclStmt									
ANR	27225	Decl							const zend_mm_mem_handlers	const zend_mm_mem_handlers [ ]	mem_handlers
ANR	27226	ClassDef	_zend_mm_block_info	336:8:9167:9290							
ANR	27227	DeclStmt									
ANR	27228	Decl							size_t	size_t	_cookie
ANR	27229	DeclStmt									
ANR	27230	Decl							size_t	size_t	_size
ANR	27231	DeclStmt									
ANR	27232	Decl							size_t	size_t	_prev
ANR	27233	DeclStmt									
ANR	27234	Decl							_zend_mm_block_info	_zend_mm_block_info	zend_mm_block_info
ANR	27235	ClassDef	_zend_mm_debug_info	346:8:9317:9526							
ANR	27236	DeclStmt									
ANR	27237	Decl							const char	const char *	filename
ANR	27238	DeclStmt									
ANR	27239	Decl							uint	uint	lineno
ANR	27240	DeclStmt									
ANR	27241	Decl							const char	const char *	orig_filename
ANR	27242	DeclStmt									
ANR	27243	Decl							uint	uint	orig_lineno
ANR	27244	DeclStmt									
ANR	27245	Decl							size_t	size_t	size
ANR	27246	DeclStmt									
ANR	27247	Decl							unsigned int	unsigned int	start_magic
ANR	27248	DeclStmt									
ANR	27249	Decl							_zend_mm_debug_info	_zend_mm_debug_info	zend_mm_debug_info
ANR	27250	ClassDef	_zend_mm_debug_info	359:8:9568:9658							
ANR	27251	DeclStmt									
ANR	27252	Decl							size_t	size_t	size
ANR	27253	DeclStmt									
ANR	27254	Decl							unsigned int	unsigned int	start_magic
ANR	27255	DeclStmt									
ANR	27256	Decl							_zend_mm_debug_info	_zend_mm_debug_info	zend_mm_debug_info
ANR	27257	ClassDef	_zend_mm_block	366:8:9677:9910							
ANR	27258	DeclStmt									
ANR	27259	Decl							zend_mm_block_info	zend_mm_block_info	info
ANR	27260	DeclStmt									
ANR	27261	Decl							unsigned int	unsigned int	magic
ANR	27262	DeclStmt									
ANR	27263	Decl							ifdef ZTS THREAD_T	ifdef ZTS THREAD_T	thread_id
ANR	27264	DeclStmt									
ANR	27265	Decl							endif zend_mm_debug_info	endif zend_mm_debug_info	debug
ANR	27266	DeclStmt									
ANR	27267	Decl							zend_mm_debug_info	zend_mm_debug_info	debug
ANR	27268	DeclStmt									
ANR	27269	Decl							_zend_mm_block	_zend_mm_block	zend_mm_block
ANR	27270	ClassDef	_zend_mm_small_free_block	379:8:9921:10184							
ANR	27271	DeclStmt									
ANR	27272	Decl							zend_mm_block_info	zend_mm_block_info	info
ANR	27273	DeclStmt									
ANR	27274	Decl							unsigned int	unsigned int	magic
ANR	27275	DeclStmt									
ANR	27276	Decl							ifdef ZTS THREAD_T	ifdef ZTS THREAD_T	thread_id
ANR	27277	DeclStmt									
ANR	27278	Decl							struct _zend_mm_free_block	struct _zend_mm_free_block *	prev_free_block
ANR	27279	DeclStmt									
ANR	27280	Decl							struct _zend_mm_free_block	struct _zend_mm_free_block *	next_free_block
ANR	27281	DeclStmt									
ANR	27282	Decl							_zend_mm_small_free_block	_zend_mm_small_free_block	zend_mm_small_free_block
ANR	27283	ClassDef	_zend_mm_free_block	391:8:10195:10524							
ANR	27284	DeclStmt									
ANR	27285	Decl							zend_mm_block_info	zend_mm_block_info	info
ANR	27286	DeclStmt									
ANR	27287	Decl							unsigned int	unsigned int	magic
ANR	27288	DeclStmt									
ANR	27289	Decl							ifdef ZTS THREAD_T	ifdef ZTS THREAD_T	thread_id
ANR	27290	DeclStmt									
ANR	27291	Decl							struct _zend_mm_free_block	struct _zend_mm_free_block *	prev_free_block
ANR	27292	DeclStmt									
ANR	27293	Decl							struct _zend_mm_free_block	struct _zend_mm_free_block *	next_free_block
ANR	27294	DeclStmt									
ANR	27295	Decl							struct _zend_mm_free_block	struct _zend_mm_free_block * *	parent
ANR	27296	DeclStmt									
ANR	27297	Decl							struct _zend_mm_free_block	struct _zend_mm_free_block * [ 2 ]	child
ANR	27298	DeclStmt									
ANR	27299	Decl							_zend_mm_free_block	_zend_mm_free_block	zend_mm_free_block
ANR	27300	ClassDef	_zend_mm_heap	415:0:10728:11822							
ANR	27301	DeclStmt									
ANR	27302	Decl							int	int	use_zend_alloc
ANR	27303	DeclStmt									
ANR	27304	Decl							void * ( * ) ( size_t )	void * ( * ) ( size_t )	_malloc
ANR	27305	DeclStmt									
ANR	27306	Decl							void ( * ) ( void * )	void ( * ) ( void * )	_free
ANR	27307	DeclStmt									
ANR	27308	Decl							"void * ( * ) ( void * , size_t )"	"void * ( * ) ( void * , size_t )"	_realloc
ANR	27309	DeclStmt									
ANR	27310	Decl							size_t	size_t	free_bitmap
ANR	27311	DeclStmt									
ANR	27312	Decl							size_t	size_t	large_free_bitmap
ANR	27313	DeclStmt									
ANR	27314	Decl							size_t	size_t	block_size
ANR	27315	DeclStmt									
ANR	27316	Decl							size_t	size_t	compact_size
ANR	27317	DeclStmt									
ANR	27318	Decl							zend_mm_segment	zend_mm_segment *	segments_list
ANR	27319	DeclStmt									
ANR	27320	Decl							zend_mm_storage	zend_mm_storage *	storage
ANR	27321	DeclStmt									
ANR	27322	Decl							size_t	size_t	real_size
ANR	27323	DeclStmt									
ANR	27324	Decl							size_t	size_t	real_peak
ANR	27325	DeclStmt									
ANR	27326	Decl							size_t	size_t	limit
ANR	27327	DeclStmt									
ANR	27328	Decl							size_t	size_t	size
ANR	27329	DeclStmt									
ANR	27330	Decl							size_t	size_t	peak
ANR	27331	DeclStmt									
ANR	27332	Decl							size_t	size_t	reserve_size
ANR	27333	DeclStmt									
ANR	27334	Decl							void	void *	reserve
ANR	27335	DeclStmt									
ANR	27336	Decl							int	int	overflow
ANR	27337	DeclStmt									
ANR	27338	Decl							int	int	internal
ANR	27339	DeclStmt									
ANR	27340	Decl							unsigned int	unsigned int	cached
ANR	27341	DeclStmt									
ANR	27342	Decl							zend_mm_free_block	zend_mm_free_block * [ ZEND_MM_NUM_BUCKETS ]	cache
ANR	27343	DeclStmt									
ANR	27344	Decl							zend_mm_free_block	zend_mm_free_block * [ ZEND_MM_NUM_BUCKETS * 2 ]	free_buckets
ANR	27345	DeclStmt									
ANR	27346	Decl							zend_mm_free_block	zend_mm_free_block * [ ZEND_MM_NUM_BUCKETS ]	large_free_buckets
ANR	27347	DeclStmt									
ANR	27348	Decl							zend_mm_free_block	zend_mm_free_block * [ 2 ]	rest_buckets
ANR	27349	DeclStmt									
ANR	27350	Decl							int	int	rest_count
ANR	27351	ClassDef	<unnamed>	444:1:11715:11813							
ANR	27352	DeclStmt									
ANR	27353	Decl							int	int	count
ANR	27354	DeclStmt									
ANR	27355	Decl							int	int	max_count
ANR	27356	DeclStmt									
ANR	27357	Decl							int	int	hit
ANR	27358	DeclStmt									
ANR	27359	Decl							int	int	miss
ANR	27360	DeclStmt									
ANR	27361	Decl								 [ ZEND_MM_NUM_BUCKETS + 1 ]	cache_stat
ANR	27362	DeclStmt									
ANR	27363	Decl							unsigned int	unsigned int	_zend_mm_cookie
ANR	27364	DeclStmt									
ANR	27365	Decl							size_t	size_t	_size
ANR	27366	DeclStmt									
ANR	27367	Decl							char	char *	p
ANR	27368	DeclStmt									
ANR	27369	Decl							unsigned int	unsigned int	_mem_block_start_magic
ANR	27370	DeclStmt									
ANR	27371	Decl							unsigned int	unsigned int	_mem_block_end_magic
ANR	27372	DeclStmt									
ANR	27373	Decl							ZEND_ATTRIBUTE_MALLOC	ZEND_ATTRIBUTE_MALLOC	ZEND_ATTRIBUTE_ALLOC_SIZE
ANR	27374	Function	zend_mm_high_bit	665:0:19731:20444							
ANR	27375	FunctionDef	zend_mm_high_bit (size_t _size)		27374	0					
ANR	27376	CompoundStatement		666:0:19789:20444	27374	0					
ANR	27377	IdentifierDeclStatement	unsigned int n ;	668:1:19863:19877	27374	0	True				
ANR	27378	IdentifierDecl	n		27374	0					
ANR	27379	IdentifierDeclType	unsigned int		27374	0					
ANR	27380	Identifier	n		27374	1					
ANR	27381	Statement	__asm__	670:1:19881:19887	27374	1	True				
ANR	27382	Statement	(	670:8:19888:19888	27374	2	True				
ANR	27383	Statement	"""bsrl %1,%0\\n\\t"""	670:9:19889:19904	27374	3	True				
ANR	27384	Statement	:	670:26:19906:19906	27374	4	True				
ANR	27385	Statement	"""=r"""	670:28:19908:19911	27374	5	True				
ANR	27386	Statement	(	670:33:19913:19913	27374	6	True				
ANR	27387	Statement	n	670:34:19914:19914	27374	7	True				
ANR	27388	Statement	)	670:35:19915:19915	27374	8	True				
ANR	27389	Statement	:	670:37:19917:19917	27374	9	True				
ANR	27390	Statement	"""rm"""	670:39:19919:19922	27374	10	True				
ANR	27391	Statement	(	670:45:19925:19925	27374	11	True				
ANR	27392	Statement	_size	670:46:19926:19930	27374	12	True				
ANR	27393	Statement	)	670:51:19931:19931	27374	13	True				
ANR	27394	Statement	:	670:53:19933:19933	27374	14	True				
ANR	27395	Statement	"""cc"""	670:55:19935:19938	27374	15	True				
ANR	27396	Statement	)	670:59:19939:19939	27374	16	True				
ANR	27397	ExpressionStatement		670:60:19940:19940	27374	17	True				
ANR	27398	ReturnStatement	return n ;	671:1:19943:19951	27374	18	True				
ANR	27399	Identifier	n		27374	0					
ANR	27400	ReturnType	static inline unsigned int		27374	1					
ANR	27401	Identifier	zend_mm_high_bit		27374	2					
ANR	27402	ParameterList	size_t _size		27374	3					
ANR	27403	Parameter	size_t _size	665:44:19775:19786	27374	0	True				
ANR	27404	ParameterType	size_t		27374	0					
ANR	27405	Identifier	_size		27374	1					
ANR	27406	CFGEntryNode	ENTRY		27374		True				
ANR	27407	CFGExitNode	EXIT		27374		True				
ANR	27408	Symbol	_size		27374						
ANR	27409	Symbol	n		27374						
ANR	27410	Function	zend_mm_low_bit	693:0:20447:21284							
ANR	27411	FunctionDef	zend_mm_low_bit (size_t _size)		27410	0					
ANR	27412	CompoundStatement		694:0:20504:21284	27410	0					
ANR	27413	IdentifierDeclStatement	unsigned int n ;	696:1:20578:20592	27410	0	True				
ANR	27414	IdentifierDecl	n		27410	0					
ANR	27415	IdentifierDeclType	unsigned int		27410	0					
ANR	27416	Identifier	n		27410	1					
ANR	27417	Statement	__asm__	698:1:20596:20602	27410	1	True				
ANR	27418	Statement	(	698:8:20603:20603	27410	2	True				
ANR	27419	Statement	"""bsfl %1,%0\\n\\t"""	698:9:20604:20619	27410	3	True				
ANR	27420	Statement	:	698:26:20621:20621	27410	4	True				
ANR	27421	Statement	"""=r"""	698:28:20623:20626	27410	5	True				
ANR	27422	Statement	(	698:33:20628:20628	27410	6	True				
ANR	27423	Statement	n	698:34:20629:20629	27410	7	True				
ANR	27424	Statement	)	698:35:20630:20630	27410	8	True				
ANR	27425	Statement	:	698:37:20632:20632	27410	9	True				
ANR	27426	Statement	"""rm"""	698:39:20634:20637	27410	10	True				
ANR	27427	Statement	(	698:45:20640:20640	27410	11	True				
ANR	27428	Statement	_size	698:46:20641:20645	27410	12	True				
ANR	27429	Statement	)	698:51:20646:20646	27410	13	True				
ANR	27430	Statement	:	698:53:20648:20648	27410	14	True				
ANR	27431	Statement	"""cc"""	698:55:20650:20653	27410	15	True				
ANR	27432	Statement	)	698:59:20654:20654	27410	16	True				
ANR	27433	ExpressionStatement		698:60:20655:20655	27410	17	True				
ANR	27434	ReturnStatement	return n ;	699:1:20658:20666	27410	18	True				
ANR	27435	Identifier	n		27410	0					
ANR	27436	ReturnType	static inline unsigned int		27410	1					
ANR	27437	Identifier	zend_mm_low_bit		27410	2					
ANR	27438	ParameterList	size_t _size		27410	3					
ANR	27439	Parameter	size_t _size	693:43:20490:20501	27410	0	True				
ANR	27440	ParameterType	size_t		27410	0					
ANR	27441	Identifier	_size		27410	1					
ANR	27442	CFGEntryNode	ENTRY		27410		True				
ANR	27443	CFGExitNode	EXIT		27410		True				
ANR	27444	Symbol	_size		27410						
ANR	27445	Symbol	n		27410						
ANR	27446	Function	zend_mm_add_to_free_list	727:0:21287:22958							
ANR	27447	FunctionDef	"zend_mm_add_to_free_list (zend_mm_heap * heap , zend_mm_free_block * mm_block)"		27446	0					
ANR	27448	CompoundStatement		728:0:21381:22958	27446	0					
ANR	27449	IdentifierDeclStatement	size_t size ;	729:1:21384:21395	27446	0	True				
ANR	27450	IdentifierDecl	size		27446	0					
ANR	27451	IdentifierDeclType	size_t		27446	0					
ANR	27452	Identifier	size		27446	1					
ANR	27453	IdentifierDeclStatement	size_t index ;	730:1:21398:21410	27446	1	True				
ANR	27454	IdentifierDecl	index		27446	0					
ANR	27455	IdentifierDeclType	size_t		27446	0					
ANR	27456	Identifier	index		27446	1					
ANR	27457	ExpressionStatement	"ZEND_MM_SET_MAGIC ( mm_block , MEM_BLOCK_FREED )"	732:1:21414:21458	27446	2	True				
ANR	27458	CallExpression	"ZEND_MM_SET_MAGIC ( mm_block , MEM_BLOCK_FREED )"		27446	0					
ANR	27459	Callee	ZEND_MM_SET_MAGIC		27446	0					
ANR	27460	Identifier	ZEND_MM_SET_MAGIC		27446	0					
ANR	27461	ArgumentList	mm_block		27446	1					
ANR	27462	Argument	mm_block		27446	0					
ANR	27463	Identifier	mm_block		27446	0					
ANR	27464	Argument	MEM_BLOCK_FREED		27446	1					
ANR	27465	Identifier	MEM_BLOCK_FREED		27446	0					
ANR	27466	ExpressionStatement	size = ZEND_MM_FREE_BLOCK_SIZE ( mm_block )	734:1:21462:21502	27446	3	True				
ANR	27467	AssignmentExpression	size = ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27446	0		=			
ANR	27468	Identifier	size		27446	0					
ANR	27469	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27446	1					
ANR	27470	Callee	ZEND_MM_FREE_BLOCK_SIZE		27446	0					
ANR	27471	Identifier	ZEND_MM_FREE_BLOCK_SIZE		27446	0					
ANR	27472	ArgumentList	mm_block		27446	1					
ANR	27473	Argument	mm_block		27446	0					
ANR	27474	Identifier	mm_block		27446	0					
ANR	27475	IfStatement	if ( EXPECTED ( ! ZEND_MM_SMALL_SIZE ( size ) ) )		27446	4					
ANR	27476	Condition	EXPECTED ( ! ZEND_MM_SMALL_SIZE ( size ) )	735:5:21509:21543	27446	0	True				
ANR	27477	CallExpression	EXPECTED ( ! ZEND_MM_SMALL_SIZE ( size ) )		27446	0					
ANR	27478	Callee	EXPECTED		27446	0					
ANR	27479	Identifier	EXPECTED		27446	0					
ANR	27480	ArgumentList	! ZEND_MM_SMALL_SIZE ( size )		27446	1					
ANR	27481	Argument	! ZEND_MM_SMALL_SIZE ( size )		27446	0					
ANR	27482	UnaryOperationExpression	! ZEND_MM_SMALL_SIZE ( size )		27446	0					
ANR	27483	UnaryOperator	!		27446	0					
ANR	27484	CallExpression	ZEND_MM_SMALL_SIZE ( size )		27446	1					
ANR	27485	Callee	ZEND_MM_SMALL_SIZE		27446	0					
ANR	27486	Identifier	ZEND_MM_SMALL_SIZE		27446	0					
ANR	27487	ArgumentList	size		27446	1					
ANR	27488	Argument	size		27446	0					
ANR	27489	Identifier	size		27446	0					
ANR	27490	CompoundStatement		9:2:168:190	27446	1					
ANR	27491	IdentifierDeclStatement	zend_mm_free_block * * p ;	736:2:21550:21572	27446	0	True				
ANR	27492	IdentifierDecl	* * p		27446	0					
ANR	27493	IdentifierDeclType	zend_mm_free_block * *		27446	0					
ANR	27494	Identifier	p		27446	1					
ANR	27495	ExpressionStatement	index = ZEND_MM_LARGE_BUCKET_INDEX ( size )	738:2:21577:21617	27446	1	True				
ANR	27496	AssignmentExpression	index = ZEND_MM_LARGE_BUCKET_INDEX ( size )		27446	0		=			
ANR	27497	Identifier	index		27446	0					
ANR	27498	CallExpression	ZEND_MM_LARGE_BUCKET_INDEX ( size )		27446	1					
ANR	27499	Callee	ZEND_MM_LARGE_BUCKET_INDEX		27446	0					
ANR	27500	Identifier	ZEND_MM_LARGE_BUCKET_INDEX		27446	0					
ANR	27501	ArgumentList	size		27446	1					
ANR	27502	Argument	size		27446	0					
ANR	27503	Identifier	size		27446	0					
ANR	27504	ExpressionStatement	p = & heap -> large_free_buckets [ index ]	739:2:21621:21657	27446	2	True				
ANR	27505	AssignmentExpression	p = & heap -> large_free_buckets [ index ]		27446	0		=			
ANR	27506	Identifier	p		27446	0					
ANR	27507	UnaryOperationExpression	& heap -> large_free_buckets [ index ]		27446	1					
ANR	27508	UnaryOperator	&		27446	0					
ANR	27509	ArrayIndexing	heap -> large_free_buckets [ index ]		27446	1					
ANR	27510	PtrMemberAccess	heap -> large_free_buckets		27446	0					
ANR	27511	Identifier	heap		27446	0					
ANR	27512	Identifier	large_free_buckets		27446	1					
ANR	27513	Identifier	index		27446	1					
ANR	27514	ExpressionStatement	mm_block -> child [ 0 ] = mm_block -> child [ 1 ] = NULL	740:2:21661:21707	27446	3	True				
ANR	27515	AssignmentExpression	mm_block -> child [ 0 ] = mm_block -> child [ 1 ] = NULL		27446	0		=			
ANR	27516	ArrayIndexing	mm_block -> child [ 0 ]		27446	0					
ANR	27517	PtrMemberAccess	mm_block -> child		27446	0					
ANR	27518	Identifier	mm_block		27446	0					
ANR	27519	Identifier	child		27446	1					
ANR	27520	PrimaryExpression	0		27446	1					
ANR	27521	AssignmentExpression	mm_block -> child [ 1 ] = NULL		27446	1		=			
ANR	27522	ArrayIndexing	mm_block -> child [ 1 ]		27446	0					
ANR	27523	PtrMemberAccess	mm_block -> child		27446	0					
ANR	27524	Identifier	mm_block		27446	0					
ANR	27525	Identifier	child		27446	1					
ANR	27526	PrimaryExpression	1		27446	1					
ANR	27527	Identifier	NULL		27446	1					
ANR	27528	IfStatement	if ( ! * p )		27446	4					
ANR	27529	Condition	! * p	741:6:21715:21717	27446	0	True				
ANR	27530	UnaryOperationExpression	! * p		27446	0					
ANR	27531	UnaryOperator	!		27446	0					
ANR	27532	UnaryOperationExpression	* p		27446	1					
ANR	27533	UnaryOperator	*		27446	0					
ANR	27534	Identifier	p		27446	1					
ANR	27535	CompoundStatement		14:11:338:338	27446	1					
ANR	27536	ExpressionStatement	* p = mm_block	742:3:21725:21738	27446	0	True				
ANR	27537	AssignmentExpression	* p = mm_block		27446	0		=			
ANR	27538	UnaryOperationExpression	* p		27446	0					
ANR	27539	UnaryOperator	*		27446	0					
ANR	27540	Identifier	p		27446	1					
ANR	27541	Identifier	mm_block		27446	1					
ANR	27542	ExpressionStatement	mm_block -> parent = p	743:3:21743:21763	27446	1	True				
ANR	27543	AssignmentExpression	mm_block -> parent = p		27446	0		=			
ANR	27544	PtrMemberAccess	mm_block -> parent		27446	0					
ANR	27545	Identifier	mm_block		27446	0					
ANR	27546	Identifier	parent		27446	1					
ANR	27547	Identifier	p		27446	1					
ANR	27548	ExpressionStatement	mm_block -> prev_free_block = mm_block -> next_free_block = mm_block	744:3:21768:21832	27446	2	True				
ANR	27549	AssignmentExpression	mm_block -> prev_free_block = mm_block -> next_free_block = mm_block		27446	0		=			
ANR	27550	PtrMemberAccess	mm_block -> prev_free_block		27446	0					
ANR	27551	Identifier	mm_block		27446	0					
ANR	27552	Identifier	prev_free_block		27446	1					
ANR	27553	AssignmentExpression	mm_block -> next_free_block = mm_block		27446	1		=			
ANR	27554	PtrMemberAccess	mm_block -> next_free_block		27446	0					
ANR	27555	Identifier	mm_block		27446	0					
ANR	27556	Identifier	next_free_block		27446	1					
ANR	27557	Identifier	mm_block		27446	1					
ANR	27558	ExpressionStatement	heap -> large_free_bitmap |= ( ZEND_MM_LONG_CONST ( 1 ) << index )	745:3:21837:21896	27446	3	True				
ANR	27559	AssignmentExpression	heap -> large_free_bitmap |= ( ZEND_MM_LONG_CONST ( 1 ) << index )		27446	0		|=			
ANR	27560	PtrMemberAccess	heap -> large_free_bitmap		27446	0					
ANR	27561	Identifier	heap		27446	0					
ANR	27562	Identifier	large_free_bitmap		27446	1					
ANR	27563	ShiftExpression	ZEND_MM_LONG_CONST ( 1 ) << index		27446	1		<<			
ANR	27564	CallExpression	ZEND_MM_LONG_CONST ( 1 )		27446	0					
ANR	27565	Callee	ZEND_MM_LONG_CONST		27446	0					
ANR	27566	Identifier	ZEND_MM_LONG_CONST		27446	0					
ANR	27567	ArgumentList	1		27446	1					
ANR	27568	Argument	1		27446	0					
ANR	27569	PrimaryExpression	1		27446	0					
ANR	27570	Identifier	index		27446	1					
ANR	27571	ElseStatement	else		27446	0					
ANR	27572	CompoundStatement		20:3:530:538	27446	0					
ANR	27573	IdentifierDeclStatement	size_t m ;	747:3:21912:21920	27446	0	True				
ANR	27574	IdentifierDecl	m		27446	0					
ANR	27575	IdentifierDeclType	size_t		27446	0					
ANR	27576	Identifier	m		27446	1					
ANR	27577	ForStatement	for ( m = size << ( ZEND_MM_NUM_BUCKETS - index ) ; ; m <<= 1 )		27446	1					
ANR	27578	ForInit	m = size << ( ZEND_MM_NUM_BUCKETS - index ) ;	749:8:21931:21972	27446	0	True				
ANR	27579	AssignmentExpression	m = size << ( ZEND_MM_NUM_BUCKETS - index )		27446	0		=			
ANR	27580	Identifier	m		27446	0					
ANR	27581	ShiftExpression	size << ( ZEND_MM_NUM_BUCKETS - index )		27446	1		<<			
ANR	27582	Identifier	size		27446	0					
ANR	27583	AdditiveExpression	ZEND_MM_NUM_BUCKETS - index		27446	1		-			
ANR	27584	Identifier	ZEND_MM_NUM_BUCKETS		27446	0					
ANR	27585	Identifier	index		27446	1					
ANR	27586	AssignmentExpression	m <<= 1	749:53:21976:21982	27446	1	True	<<=			
ANR	27587	Identifier	m		27446	0					
ANR	27588	PrimaryExpression	1		27446	1					
ANR	27589	CompoundStatement		23:4:609:638	27446	2					
ANR	27590	IdentifierDeclStatement	zend_mm_free_block * prev = * p ;	750:4:21991:22020	27446	0	True				
ANR	27591	IdentifierDecl	* prev = * p		27446	0					
ANR	27592	IdentifierDeclType	zend_mm_free_block *		27446	0					
ANR	27593	Identifier	prev		27446	1					
ANR	27594	AssignmentExpression	* prev = * p		27446	2		=			
ANR	27595	Identifier	prev		27446	0					
ANR	27596	UnaryOperationExpression	* p		27446	1					
ANR	27597	UnaryOperator	*		27446	0					
ANR	27598	Identifier	p		27446	1					
ANR	27599	IfStatement	if ( ZEND_MM_FREE_BLOCK_SIZE ( prev ) != size )		27446	1					
ANR	27600	Condition	ZEND_MM_FREE_BLOCK_SIZE ( prev ) != size	752:8:22031:22067	27446	0	True				
ANR	27601	EqualityExpression	ZEND_MM_FREE_BLOCK_SIZE ( prev ) != size		27446	0		!=			
ANR	27602	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( prev )		27446	0					
ANR	27603	Callee	ZEND_MM_FREE_BLOCK_SIZE		27446	0					
ANR	27604	Identifier	ZEND_MM_FREE_BLOCK_SIZE		27446	0					
ANR	27605	ArgumentList	prev		27446	1					
ANR	27606	Argument	prev		27446	0					
ANR	27607	Identifier	prev		27446	0					
ANR	27608	Identifier	size		27446	1					
ANR	27609	CompoundStatement		25:47:688:688	27446	1					
ANR	27610	ExpressionStatement	p = & prev -> child [ ( m >> ( ZEND_MM_NUM_BUCKETS - 1 ) ) & 1 ]	753:5:22077:22129	27446	0	True				
ANR	27611	AssignmentExpression	p = & prev -> child [ ( m >> ( ZEND_MM_NUM_BUCKETS - 1 ) ) & 1 ]		27446	0		=			
ANR	27612	Identifier	p		27446	0					
ANR	27613	UnaryOperationExpression	& prev -> child [ ( m >> ( ZEND_MM_NUM_BUCKETS - 1 ) ) & 1 ]		27446	1					
ANR	27614	UnaryOperator	&		27446	0					
ANR	27615	ArrayIndexing	prev -> child [ ( m >> ( ZEND_MM_NUM_BUCKETS - 1 ) ) & 1 ]		27446	1					
ANR	27616	PtrMemberAccess	prev -> child		27446	0					
ANR	27617	Identifier	prev		27446	0					
ANR	27618	Identifier	child		27446	1					
ANR	27619	BitAndExpression	( m >> ( ZEND_MM_NUM_BUCKETS - 1 ) ) & 1		27446	1		&			
ANR	27620	ShiftExpression	m >> ( ZEND_MM_NUM_BUCKETS - 1 )		27446	0		>>			
ANR	27621	Identifier	m		27446	0					
ANR	27622	AdditiveExpression	ZEND_MM_NUM_BUCKETS - 1		27446	1		-			
ANR	27623	Identifier	ZEND_MM_NUM_BUCKETS		27446	0					
ANR	27624	PrimaryExpression	1		27446	1					
ANR	27625	PrimaryExpression	1		27446	1					
ANR	27626	IfStatement	if ( ! * p )		27446	1					
ANR	27627	Condition	! * p	754:9:22140:22142	27446	0	True				
ANR	27628	UnaryOperationExpression	! * p		27446	0					
ANR	27629	UnaryOperator	!		27446	0					
ANR	27630	UnaryOperationExpression	* p		27446	1					
ANR	27631	UnaryOperator	*		27446	0					
ANR	27632	Identifier	p		27446	1					
ANR	27633	CompoundStatement		27:14:763:763	27446	1					
ANR	27634	ExpressionStatement	* p = mm_block	755:6:22153:22166	27446	0	True				
ANR	27635	AssignmentExpression	* p = mm_block		27446	0		=			
ANR	27636	UnaryOperationExpression	* p		27446	0					
ANR	27637	UnaryOperator	*		27446	0					
ANR	27638	Identifier	p		27446	1					
ANR	27639	Identifier	mm_block		27446	1					
ANR	27640	ExpressionStatement	mm_block -> parent = p	756:6:22174:22194	27446	1	True				
ANR	27641	AssignmentExpression	mm_block -> parent = p		27446	0		=			
ANR	27642	PtrMemberAccess	mm_block -> parent		27446	0					
ANR	27643	Identifier	mm_block		27446	0					
ANR	27644	Identifier	parent		27446	1					
ANR	27645	Identifier	p		27446	1					
ANR	27646	ExpressionStatement	mm_block -> prev_free_block = mm_block -> next_free_block = mm_block	757:6:22202:22266	27446	2	True				
ANR	27647	AssignmentExpression	mm_block -> prev_free_block = mm_block -> next_free_block = mm_block		27446	0		=			
ANR	27648	PtrMemberAccess	mm_block -> prev_free_block		27446	0					
ANR	27649	Identifier	mm_block		27446	0					
ANR	27650	Identifier	prev_free_block		27446	1					
ANR	27651	AssignmentExpression	mm_block -> next_free_block = mm_block		27446	1		=			
ANR	27652	PtrMemberAccess	mm_block -> next_free_block		27446	0					
ANR	27653	Identifier	mm_block		27446	0					
ANR	27654	Identifier	next_free_block		27446	1					
ANR	27655	Identifier	mm_block		27446	1					
ANR	27656	BreakStatement	break ;	758:6:22274:22279	27446	3	True				
ANR	27657	ElseStatement	else		27446	0					
ANR	27658	CompoundStatement		34:5:924:972	27446	0					
ANR	27659	IdentifierDeclStatement	zend_mm_free_block * next = prev -> next_free_block ;	761:5:22306:22354	27446	0	True				
ANR	27660	IdentifierDecl	* next = prev -> next_free_block		27446	0					
ANR	27661	IdentifierDeclType	zend_mm_free_block *		27446	0					
ANR	27662	Identifier	next		27446	1					
ANR	27663	AssignmentExpression	* next = prev -> next_free_block		27446	2		=			
ANR	27664	Identifier	next		27446	0					
ANR	27665	PtrMemberAccess	prev -> next_free_block		27446	1					
ANR	27666	Identifier	prev		27446	0					
ANR	27667	Identifier	next_free_block		27446	1					
ANR	27668	ExpressionStatement	prev -> next_free_block = next -> prev_free_block = mm_block	763:5:22362:22418	27446	1	True				
ANR	27669	AssignmentExpression	prev -> next_free_block = next -> prev_free_block = mm_block		27446	0		=			
ANR	27670	PtrMemberAccess	prev -> next_free_block		27446	0					
ANR	27671	Identifier	prev		27446	0					
ANR	27672	Identifier	next_free_block		27446	1					
ANR	27673	AssignmentExpression	next -> prev_free_block = mm_block		27446	1		=			
ANR	27674	PtrMemberAccess	next -> prev_free_block		27446	0					
ANR	27675	Identifier	next		27446	0					
ANR	27676	Identifier	prev_free_block		27446	1					
ANR	27677	Identifier	mm_block		27446	1					
ANR	27678	ExpressionStatement	mm_block -> next_free_block = next	764:5:22425:22457	27446	2	True				
ANR	27679	AssignmentExpression	mm_block -> next_free_block = next		27446	0		=			
ANR	27680	PtrMemberAccess	mm_block -> next_free_block		27446	0					
ANR	27681	Identifier	mm_block		27446	0					
ANR	27682	Identifier	next_free_block		27446	1					
ANR	27683	Identifier	next		27446	1					
ANR	27684	ExpressionStatement	mm_block -> prev_free_block = prev	765:5:22464:22496	27446	3	True				
ANR	27685	AssignmentExpression	mm_block -> prev_free_block = prev		27446	0		=			
ANR	27686	PtrMemberAccess	mm_block -> prev_free_block		27446	0					
ANR	27687	Identifier	mm_block		27446	0					
ANR	27688	Identifier	prev_free_block		27446	1					
ANR	27689	Identifier	prev		27446	1					
ANR	27690	ExpressionStatement	mm_block -> parent = NULL	766:5:22503:22526	27446	4	True				
ANR	27691	AssignmentExpression	mm_block -> parent = NULL		27446	0		=			
ANR	27692	PtrMemberAccess	mm_block -> parent		27446	0					
ANR	27693	Identifier	mm_block		27446	0					
ANR	27694	Identifier	parent		27446	1					
ANR	27695	Identifier	NULL		27446	1					
ANR	27696	BreakStatement	break ;	767:5:22533:22538	27446	5	True				
ANR	27697	ElseStatement	else		27446	0					
ANR	27698	CompoundStatement		45:2:1185:1216	27446	0					
ANR	27699	IdentifierDeclStatement	"zend_mm_free_block * prev , * next ;"	772:2:22567:22598	27446	0	True				
ANR	27700	IdentifierDecl	* prev		27446	0					
ANR	27701	IdentifierDeclType	zend_mm_free_block *		27446	0					
ANR	27702	Identifier	prev		27446	1					
ANR	27703	IdentifierDecl	* next		27446	1					
ANR	27704	IdentifierDeclType	zend_mm_free_block *		27446	0					
ANR	27705	Identifier	next		27446	1					
ANR	27706	ExpressionStatement	index = ZEND_MM_BUCKET_INDEX ( size )	774:2:22603:22637	27446	1	True				
ANR	27707	AssignmentExpression	index = ZEND_MM_BUCKET_INDEX ( size )		27446	0		=			
ANR	27708	Identifier	index		27446	0					
ANR	27709	CallExpression	ZEND_MM_BUCKET_INDEX ( size )		27446	1					
ANR	27710	Callee	ZEND_MM_BUCKET_INDEX		27446	0					
ANR	27711	Identifier	ZEND_MM_BUCKET_INDEX		27446	0					
ANR	27712	ArgumentList	size		27446	1					
ANR	27713	Argument	size		27446	0					
ANR	27714	Identifier	size		27446	0					
ANR	27715	ExpressionStatement	"prev = ZEND_MM_SMALL_FREE_BUCKET ( heap , index )"	776:2:22642:22687	27446	2	True				
ANR	27716	AssignmentExpression	"prev = ZEND_MM_SMALL_FREE_BUCKET ( heap , index )"		27446	0		=			
ANR	27717	Identifier	prev		27446	0					
ANR	27718	CallExpression	"ZEND_MM_SMALL_FREE_BUCKET ( heap , index )"		27446	1					
ANR	27719	Callee	ZEND_MM_SMALL_FREE_BUCKET		27446	0					
ANR	27720	Identifier	ZEND_MM_SMALL_FREE_BUCKET		27446	0					
ANR	27721	ArgumentList	heap		27446	1					
ANR	27722	Argument	heap		27446	0					
ANR	27723	Identifier	heap		27446	0					
ANR	27724	Argument	index		27446	1					
ANR	27725	Identifier	index		27446	0					
ANR	27726	IfStatement	if ( prev -> prev_free_block == prev )		27446	3					
ANR	27727	Condition	prev -> prev_free_block == prev	777:6:22695:22723	27446	0	True				
ANR	27728	EqualityExpression	prev -> prev_free_block == prev		27446	0		==			
ANR	27729	PtrMemberAccess	prev -> prev_free_block		27446	0					
ANR	27730	Identifier	prev		27446	0					
ANR	27731	Identifier	prev_free_block		27446	1					
ANR	27732	Identifier	prev		27446	1					
ANR	27733	CompoundStatement		50:37:1344:1344	27446	1					
ANR	27734	ExpressionStatement	heap -> free_bitmap |= ( ZEND_MM_LONG_CONST ( 1 ) << index )	778:3:22731:22784	27446	0	True				
ANR	27735	AssignmentExpression	heap -> free_bitmap |= ( ZEND_MM_LONG_CONST ( 1 ) << index )		27446	0		|=			
ANR	27736	PtrMemberAccess	heap -> free_bitmap		27446	0					
ANR	27737	Identifier	heap		27446	0					
ANR	27738	Identifier	free_bitmap		27446	1					
ANR	27739	ShiftExpression	ZEND_MM_LONG_CONST ( 1 ) << index		27446	1		<<			
ANR	27740	CallExpression	ZEND_MM_LONG_CONST ( 1 )		27446	0					
ANR	27741	Callee	ZEND_MM_LONG_CONST		27446	0					
ANR	27742	Identifier	ZEND_MM_LONG_CONST		27446	0					
ANR	27743	ArgumentList	1		27446	1					
ANR	27744	Argument	1		27446	0					
ANR	27745	PrimaryExpression	1		27446	0					
ANR	27746	Identifier	index		27446	1					
ANR	27747	ExpressionStatement	next = prev -> next_free_block	780:2:22792:22820	27446	4	True				
ANR	27748	AssignmentExpression	next = prev -> next_free_block		27446	0		=			
ANR	27749	Identifier	next		27446	0					
ANR	27750	PtrMemberAccess	prev -> next_free_block		27446	1					
ANR	27751	Identifier	prev		27446	0					
ANR	27752	Identifier	next_free_block		27446	1					
ANR	27753	ExpressionStatement	mm_block -> prev_free_block = prev	782:2:22825:22857	27446	5	True				
ANR	27754	AssignmentExpression	mm_block -> prev_free_block = prev		27446	0		=			
ANR	27755	PtrMemberAccess	mm_block -> prev_free_block		27446	0					
ANR	27756	Identifier	mm_block		27446	0					
ANR	27757	Identifier	prev_free_block		27446	1					
ANR	27758	Identifier	prev		27446	1					
ANR	27759	ExpressionStatement	mm_block -> next_free_block = next	783:2:22861:22893	27446	6	True				
ANR	27760	AssignmentExpression	mm_block -> next_free_block = next		27446	0		=			
ANR	27761	PtrMemberAccess	mm_block -> next_free_block		27446	0					
ANR	27762	Identifier	mm_block		27446	0					
ANR	27763	Identifier	next_free_block		27446	1					
ANR	27764	Identifier	next		27446	1					
ANR	27765	ExpressionStatement	prev -> next_free_block = next -> prev_free_block = mm_block	784:2:22897:22953	27446	7	True				
ANR	27766	AssignmentExpression	prev -> next_free_block = next -> prev_free_block = mm_block		27446	0		=			
ANR	27767	PtrMemberAccess	prev -> next_free_block		27446	0					
ANR	27768	Identifier	prev		27446	0					
ANR	27769	Identifier	next_free_block		27446	1					
ANR	27770	AssignmentExpression	next -> prev_free_block = mm_block		27446	1		=			
ANR	27771	PtrMemberAccess	next -> prev_free_block		27446	0					
ANR	27772	Identifier	next		27446	0					
ANR	27773	Identifier	prev_free_block		27446	1					
ANR	27774	Identifier	mm_block		27446	1					
ANR	27775	ReturnType	static inline void		27446	1					
ANR	27776	Identifier	zend_mm_add_to_free_list		27446	2					
ANR	27777	ParameterList	"zend_mm_heap * heap , zend_mm_free_block * mm_block"		27446	3					
ANR	27778	Parameter	zend_mm_heap * heap	727:44:21331:21348	27446	0	True				
ANR	27779	ParameterType	zend_mm_heap *		27446	0					
ANR	27780	Identifier	heap		27446	1					
ANR	27781	Parameter	zend_mm_free_block * mm_block	727:64:21351:21378	27446	1	True				
ANR	27782	ParameterType	zend_mm_free_block *		27446	0					
ANR	27783	Identifier	mm_block		27446	1					
ANR	27784	CFGEntryNode	ENTRY		27446		True				
ANR	27785	CFGExitNode	EXIT		27446		True				
ANR	27786	InfiniteForNode	true		27446		True				
ANR	27787	Symbol	MEM_BLOCK_FREED		27446						
ANR	27788	Symbol	next		27446						
ANR	27789	Symbol	heap -> large_free_buckets		27446						
ANR	27790	Symbol	ZEND_MM_LONG_CONST		27446						
ANR	27791	Symbol	heap -> free_bitmap		27446						
ANR	27792	Symbol	prev		27446						
ANR	27793	Symbol	mm_block -> child		27446						
ANR	27794	Symbol	heap -> large_free_bitmap		27446						
ANR	27795	Symbol	mm_block -> next_free_block		27446						
ANR	27796	Symbol	* prev		27446						
ANR	27797	Symbol	prev -> next_free_block		27446						
ANR	27798	Symbol	* next		27446						
ANR	27799	Symbol	* mm_block		27446						
ANR	27800	Symbol	ZEND_MM_FREE_BLOCK_SIZE		27446						
ANR	27801	Symbol	next -> prev_free_block		27446						
ANR	27802	Symbol	heap		27446						
ANR	27803	Symbol	prev -> child		27446						
ANR	27804	Symbol	ZEND_MM_BUCKET_INDEX		27446						
ANR	27805	Symbol	NULL		27446						
ANR	27806	Symbol	ZEND_MM_LARGE_BUCKET_INDEX		27446						
ANR	27807	Symbol	index		27446						
ANR	27808	Symbol	* * mm_block		27446						
ANR	27809	Symbol	mm_block -> parent		27446						
ANR	27810	Symbol	m		27446						
ANR	27811	Symbol	* mm_block -> child		27446						
ANR	27812	Symbol	mm_block -> prev_free_block		27446						
ANR	27813	Symbol	ZEND_MM_NUM_BUCKETS		27446						
ANR	27814	Symbol	p		27446						
ANR	27815	Symbol	size		27446						
ANR	27816	Symbol	mm_block		27446						
ANR	27817	Symbol	ZEND_MM_SMALL_SIZE		27446						
ANR	27818	Symbol	prev -> prev_free_block		27446						
ANR	27819	Symbol	ZEND_MM_SMALL_FREE_BUCKET		27446						
ANR	27820	Symbol	* p		27446						
ANR	27821	Symbol	EXPECTED		27446						
ANR	27822	Symbol	* heap		27446						
ANR	27823	Function	zend_mm_remove_from_free_list	788:0:22961:25086							
ANR	27824	FunctionDef	"zend_mm_remove_from_free_list (zend_mm_heap * heap , zend_mm_free_block * mm_block)"		27823	0					
ANR	27825	CompoundStatement		789:0:23060:25086	27823	0					
ANR	27826	IdentifierDeclStatement	zend_mm_free_block * prev = mm_block -> prev_free_block ;	790:1:23063:23115	27823	0	True				
ANR	27827	IdentifierDecl	* prev = mm_block -> prev_free_block		27823	0					
ANR	27828	IdentifierDeclType	zend_mm_free_block *		27823	0					
ANR	27829	Identifier	prev		27823	1					
ANR	27830	AssignmentExpression	* prev = mm_block -> prev_free_block		27823	2		=			
ANR	27831	Identifier	prev		27823	0					
ANR	27832	PtrMemberAccess	mm_block -> prev_free_block		27823	1					
ANR	27833	Identifier	mm_block		27823	0					
ANR	27834	Identifier	prev_free_block		27823	1					
ANR	27835	IdentifierDeclStatement	zend_mm_free_block * next = mm_block -> next_free_block ;	791:1:23118:23170	27823	1	True				
ANR	27836	IdentifierDecl	* next = mm_block -> next_free_block		27823	0					
ANR	27837	IdentifierDeclType	zend_mm_free_block *		27823	0					
ANR	27838	Identifier	next		27823	1					
ANR	27839	AssignmentExpression	* next = mm_block -> next_free_block		27823	2		=			
ANR	27840	Identifier	next		27823	0					
ANR	27841	PtrMemberAccess	mm_block -> next_free_block		27823	1					
ANR	27842	Identifier	mm_block		27823	0					
ANR	27843	Identifier	next_free_block		27823	1					
ANR	27844	ExpressionStatement	"ZEND_MM_CHECK_MAGIC ( mm_block , MEM_BLOCK_FREED )"	793:1:23174:23220	27823	2	True				
ANR	27845	CallExpression	"ZEND_MM_CHECK_MAGIC ( mm_block , MEM_BLOCK_FREED )"		27823	0					
ANR	27846	Callee	ZEND_MM_CHECK_MAGIC		27823	0					
ANR	27847	Identifier	ZEND_MM_CHECK_MAGIC		27823	0					
ANR	27848	ArgumentList	mm_block		27823	1					
ANR	27849	Argument	mm_block		27823	0					
ANR	27850	Identifier	mm_block		27823	0					
ANR	27851	Argument	MEM_BLOCK_FREED		27823	1					
ANR	27852	Identifier	MEM_BLOCK_FREED		27823	0					
ANR	27853	IfStatement	if ( EXPECTED ( prev == mm_block ) )		27823	3					
ANR	27854	Condition	EXPECTED ( prev == mm_block )	795:5:23228:23253	27823	0	True				
ANR	27855	CallExpression	EXPECTED ( prev == mm_block )		27823	0					
ANR	27856	Callee	EXPECTED		27823	0					
ANR	27857	Identifier	EXPECTED		27823	0					
ANR	27858	ArgumentList	prev == mm_block		27823	1					
ANR	27859	Argument	prev == mm_block		27823	0					
ANR	27860	EqualityExpression	prev == mm_block		27823	0		==			
ANR	27861	Identifier	prev		27823	0					
ANR	27862	Identifier	mm_block		27823	1					
ANR	27863	CompoundStatement		8:2:199:228	27823	1					
ANR	27864	IdentifierDeclStatement	"zend_mm_free_block * * rp , * * cp ;"	796:2:23260:23289	27823	0	True				
ANR	27865	IdentifierDecl	* * rp		27823	0					
ANR	27866	IdentifierDeclType	zend_mm_free_block * *		27823	0					
ANR	27867	Identifier	rp		27823	1					
ANR	27868	IdentifierDecl	* * cp		27823	1					
ANR	27869	IdentifierDeclType	zend_mm_free_block * *		27823	0					
ANR	27870	Identifier	cp		27823	1					
ANR	27871	IfStatement	if ( UNEXPECTED ( next != mm_block ) )		27823	1					
ANR	27872	Condition	UNEXPECTED ( next != mm_block )	799:6:23325:23352	27823	0	True				
ANR	27873	CallExpression	UNEXPECTED ( next != mm_block )		27823	0					
ANR	27874	Callee	UNEXPECTED		27823	0					
ANR	27875	Identifier	UNEXPECTED		27823	0					
ANR	27876	ArgumentList	next != mm_block		27823	1					
ANR	27877	Argument	next != mm_block		27823	0					
ANR	27878	EqualityExpression	next != mm_block		27823	0		!=			
ANR	27879	Identifier	next		27823	0					
ANR	27880	Identifier	mm_block		27823	1					
ANR	27881	CompoundStatement		11:36:294:294	27823	1					
ANR	27882	ExpressionStatement	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"	800:3:23360:23399	27823	0	True				
ANR	27883	CallExpression	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"		27823	0					
ANR	27884	Callee	zend_mm_panic		27823	0					
ANR	27885	Identifier	zend_mm_panic		27823	0					
ANR	27886	ArgumentList	"""zend_mm_heap corrupted"""		27823	1					
ANR	27887	Argument	"""zend_mm_heap corrupted"""		27823	0					
ANR	27888	PrimaryExpression	"""zend_mm_heap corrupted"""		27823	0					
ANR	27889	ExpressionStatement	rp = & mm_block -> child [ mm_block -> child [ 1 ] != NULL ]	804:2:23415:23464	27823	2	True				
ANR	27890	AssignmentExpression	rp = & mm_block -> child [ mm_block -> child [ 1 ] != NULL ]		27823	0		=			
ANR	27891	Identifier	rp		27823	0					
ANR	27892	UnaryOperationExpression	& mm_block -> child [ mm_block -> child [ 1 ] != NULL ]		27823	1					
ANR	27893	UnaryOperator	&		27823	0					
ANR	27894	ArrayIndexing	mm_block -> child [ mm_block -> child [ 1 ] != NULL ]		27823	1					
ANR	27895	PtrMemberAccess	mm_block -> child		27823	0					
ANR	27896	Identifier	mm_block		27823	0					
ANR	27897	Identifier	child		27823	1					
ANR	27898	EqualityExpression	mm_block -> child [ 1 ] != NULL		27823	1		!=			
ANR	27899	ArrayIndexing	mm_block -> child [ 1 ]		27823	0					
ANR	27900	PtrMemberAccess	mm_block -> child		27823	0					
ANR	27901	Identifier	mm_block		27823	0					
ANR	27902	Identifier	child		27823	1					
ANR	27903	PrimaryExpression	1		27823	1					
ANR	27904	Identifier	NULL		27823	1					
ANR	27905	ExpressionStatement	prev = * rp	805:2:23468:23478	27823	3	True				
ANR	27906	AssignmentExpression	prev = * rp		27823	0		=			
ANR	27907	Identifier	prev		27823	0					
ANR	27908	UnaryOperationExpression	* rp		27823	1					
ANR	27909	UnaryOperator	*		27823	0					
ANR	27910	Identifier	rp		27823	1					
ANR	27911	IfStatement	if ( EXPECTED ( prev == NULL ) )		27823	4					
ANR	27912	Condition	EXPECTED ( prev == NULL )	806:6:23486:23507	27823	0	True				
ANR	27913	CallExpression	EXPECTED ( prev == NULL )		27823	0					
ANR	27914	Callee	EXPECTED		27823	0					
ANR	27915	Identifier	EXPECTED		27823	0					
ANR	27916	ArgumentList	prev == NULL		27823	1					
ANR	27917	Argument	prev == NULL		27823	0					
ANR	27918	EqualityExpression	prev == NULL		27823	0		==			
ANR	27919	Identifier	prev		27823	0					
ANR	27920	Identifier	NULL		27823	1					
ANR	27921	CompoundStatement		19:3:454:530	27823	1					
ANR	27922	IdentifierDeclStatement	size_t index = ZEND_MM_LARGE_BUCKET_INDEX ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) ) ;	807:3:23515:23591	27823	0	True				
ANR	27923	IdentifierDecl	index = ZEND_MM_LARGE_BUCKET_INDEX ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		27823	0					
ANR	27924	IdentifierDeclType	size_t		27823	0					
ANR	27925	Identifier	index		27823	1					
ANR	27926	AssignmentExpression	index = ZEND_MM_LARGE_BUCKET_INDEX ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		27823	2		=			
ANR	27927	Identifier	index		27823	0					
ANR	27928	CallExpression	ZEND_MM_LARGE_BUCKET_INDEX ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		27823	1					
ANR	27929	Callee	ZEND_MM_LARGE_BUCKET_INDEX		27823	0					
ANR	27930	Identifier	ZEND_MM_LARGE_BUCKET_INDEX		27823	0					
ANR	27931	ArgumentList	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27823	1					
ANR	27932	Argument	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27823	0					
ANR	27933	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27823	0					
ANR	27934	Callee	ZEND_MM_FREE_BLOCK_SIZE		27823	0					
ANR	27935	Identifier	ZEND_MM_FREE_BLOCK_SIZE		27823	0					
ANR	27936	ArgumentList	mm_block		27823	1					
ANR	27937	Argument	mm_block		27823	0					
ANR	27938	Identifier	mm_block		27823	0					
ANR	27939	ExpressionStatement	ZEND_MM_CHECK_TREE ( mm_block )	809:3:23597:23625	27823	1	True				
ANR	27940	CallExpression	ZEND_MM_CHECK_TREE ( mm_block )		27823	0					
ANR	27941	Callee	ZEND_MM_CHECK_TREE		27823	0					
ANR	27942	Identifier	ZEND_MM_CHECK_TREE		27823	0					
ANR	27943	ArgumentList	mm_block		27823	1					
ANR	27944	Argument	mm_block		27823	0					
ANR	27945	Identifier	mm_block		27823	0					
ANR	27946	ExpressionStatement	* mm_block -> parent = NULL	810:3:23630:23654	27823	2	True				
ANR	27947	AssignmentExpression	* mm_block -> parent = NULL		27823	0		=			
ANR	27948	UnaryOperationExpression	* mm_block -> parent		27823	0					
ANR	27949	UnaryOperator	*		27823	0					
ANR	27950	PtrMemberAccess	mm_block -> parent		27823	1					
ANR	27951	Identifier	mm_block		27823	0					
ANR	27952	Identifier	parent		27823	1					
ANR	27953	Identifier	NULL		27823	1					
ANR	27954	IfStatement	if ( mm_block -> parent == & heap -> large_free_buckets [ index ] )		27823	3					
ANR	27955	Condition	mm_block -> parent == & heap -> large_free_buckets [ index ]	811:7:23663:23714	27823	0	True				
ANR	27956	EqualityExpression	mm_block -> parent == & heap -> large_free_buckets [ index ]		27823	0		==			
ANR	27957	PtrMemberAccess	mm_block -> parent		27823	0					
ANR	27958	Identifier	mm_block		27823	0					
ANR	27959	Identifier	parent		27823	1					
ANR	27960	UnaryOperationExpression	& heap -> large_free_buckets [ index ]		27823	1					
ANR	27961	UnaryOperator	&		27823	0					
ANR	27962	ArrayIndexing	heap -> large_free_buckets [ index ]		27823	1					
ANR	27963	PtrMemberAccess	heap -> large_free_buckets		27823	0					
ANR	27964	Identifier	heap		27823	0					
ANR	27965	Identifier	large_free_buckets		27823	1					
ANR	27966	Identifier	index		27823	1					
ANR	27967	CompoundStatement		23:61:656:656	27823	1					
ANR	27968	ExpressionStatement	heap -> large_free_bitmap &= ~ ( ZEND_MM_LONG_CONST ( 1 ) << index )	812:4:23723:23783	27823	0	True				
ANR	27969	AssignmentExpression	heap -> large_free_bitmap &= ~ ( ZEND_MM_LONG_CONST ( 1 ) << index )		27823	0		&=			
ANR	27970	PtrMemberAccess	heap -> large_free_bitmap		27823	0					
ANR	27971	Identifier	heap		27823	0					
ANR	27972	Identifier	large_free_bitmap		27823	1					
ANR	27973	UnaryOperationExpression	~ ( ZEND_MM_LONG_CONST ( 1 ) << index )		27823	1					
ANR	27974	UnaryOperator	~		27823	0					
ANR	27975	ShiftExpression	ZEND_MM_LONG_CONST ( 1 ) << index		27823	1		<<			
ANR	27976	CallExpression	ZEND_MM_LONG_CONST ( 1 )		27823	0					
ANR	27977	Callee	ZEND_MM_LONG_CONST		27823	0					
ANR	27978	Identifier	ZEND_MM_LONG_CONST		27823	0					
ANR	27979	ArgumentList	1		27823	1					
ANR	27980	Argument	1		27823	0					
ANR	27981	PrimaryExpression	1		27823	0					
ANR	27982	Identifier	index		27823	1					
ANR	27983	ElseStatement	else		27823	0					
ANR	27984	CompoundStatement		26:9:741:741	27823	0					
ANR	27985	WhileStatement	while ( * ( cp = & ( prev -> child [ prev -> child [ 1 ] != NULL ] ) ) != NULL )		27823	0					
ANR	27986	Condition	* ( cp = & ( prev -> child [ prev -> child [ 1 ] != NULL ] ) ) != NULL	815:10:23814:23867	27823	0	True				
ANR	27987	EqualityExpression	* ( cp = & ( prev -> child [ prev -> child [ 1 ] != NULL ] ) ) != NULL		27823	0		!=			
ANR	27988	UnaryOperationExpression	* ( cp = & ( prev -> child [ prev -> child [ 1 ] != NULL ] ) )		27823	0					
ANR	27989	UnaryOperator	*		27823	0					
ANR	27990	AssignmentExpression	cp = & ( prev -> child [ prev -> child [ 1 ] != NULL ] )		27823	1		=			
ANR	27991	Identifier	cp		27823	0					
ANR	27992	UnaryOperationExpression	& ( prev -> child [ prev -> child [ 1 ] != NULL ] )		27823	1					
ANR	27993	UnaryOperator	&		27823	0					
ANR	27994	ArrayIndexing	prev -> child [ prev -> child [ 1 ] != NULL ]		27823	1					
ANR	27995	PtrMemberAccess	prev -> child		27823	0					
ANR	27996	Identifier	prev		27823	0					
ANR	27997	Identifier	child		27823	1					
ANR	27998	EqualityExpression	prev -> child [ 1 ] != NULL		27823	1		!=			
ANR	27999	ArrayIndexing	prev -> child [ 1 ]		27823	0					
ANR	28000	PtrMemberAccess	prev -> child		27823	0					
ANR	28001	Identifier	prev		27823	0					
ANR	28002	Identifier	child		27823	1					
ANR	28003	PrimaryExpression	1		27823	1					
ANR	28004	Identifier	NULL		27823	1					
ANR	28005	Identifier	NULL		27823	1					
ANR	28006	CompoundStatement		27:66:809:809	27823	1					
ANR	28007	ExpressionStatement	prev = * cp	816:4:23876:23886	27823	0	True				
ANR	28008	AssignmentExpression	prev = * cp		27823	0		=			
ANR	28009	Identifier	prev		27823	0					
ANR	28010	UnaryOperationExpression	* cp		27823	1					
ANR	28011	UnaryOperator	*		27823	0					
ANR	28012	Identifier	cp		27823	1					
ANR	28013	ExpressionStatement	rp = cp	817:4:23892:23899	27823	1	True				
ANR	28014	AssignmentExpression	rp = cp		27823	0		=			
ANR	28015	Identifier	rp		27823	0					
ANR	28016	Identifier	cp		27823	1					
ANR	28017	ExpressionStatement	* rp = NULL	819:3:23909:23919	27823	1	True				
ANR	28018	AssignmentExpression	* rp = NULL		27823	0		=			
ANR	28019	UnaryOperationExpression	* rp		27823	0					
ANR	28020	UnaryOperator	*		27823	0					
ANR	28021	Identifier	rp		27823	1					
ANR	28022	Identifier	NULL		27823	1					
ANR	28023	Label	subst_block :	821:0:23922:23933	27823	2	True				
ANR	28024	Identifier	subst_block		27823	0					
ANR	28025	ExpressionStatement	ZEND_MM_CHECK_TREE ( mm_block )	822:3:23938:23966	27823	3	True				
ANR	28026	CallExpression	ZEND_MM_CHECK_TREE ( mm_block )		27823	0					
ANR	28027	Callee	ZEND_MM_CHECK_TREE		27823	0					
ANR	28028	Identifier	ZEND_MM_CHECK_TREE		27823	0					
ANR	28029	ArgumentList	mm_block		27823	1					
ANR	28030	Argument	mm_block		27823	0					
ANR	28031	Identifier	mm_block		27823	0					
ANR	28032	ExpressionStatement	* mm_block -> parent = prev	823:3:23971:23995	27823	4	True				
ANR	28033	AssignmentExpression	* mm_block -> parent = prev		27823	0		=			
ANR	28034	UnaryOperationExpression	* mm_block -> parent		27823	0					
ANR	28035	UnaryOperator	*		27823	0					
ANR	28036	PtrMemberAccess	mm_block -> parent		27823	1					
ANR	28037	Identifier	mm_block		27823	0					
ANR	28038	Identifier	parent		27823	1					
ANR	28039	Identifier	prev		27823	1					
ANR	28040	ExpressionStatement	prev -> parent = mm_block -> parent	824:3:24000:24031	27823	5	True				
ANR	28041	AssignmentExpression	prev -> parent = mm_block -> parent		27823	0		=			
ANR	28042	PtrMemberAccess	prev -> parent		27823	0					
ANR	28043	Identifier	prev		27823	0					
ANR	28044	Identifier	parent		27823	1					
ANR	28045	PtrMemberAccess	mm_block -> parent		27823	1					
ANR	28046	Identifier	mm_block		27823	0					
ANR	28047	Identifier	parent		27823	1					
ANR	28048	IfStatement	if ( ( prev -> child [ 0 ] = mm_block -> child [ 0 ] ) )		27823	6					
ANR	28049	Condition	prev -> child [ 0 ] = mm_block -> child [ 0 ]	825:7:24040:24076	27823	0	True				
ANR	28050	AssignmentExpression	prev -> child [ 0 ] = mm_block -> child [ 0 ]		27823	0		=			
ANR	28051	ArrayIndexing	prev -> child [ 0 ]		27823	0					
ANR	28052	PtrMemberAccess	prev -> child		27823	0					
ANR	28053	Identifier	prev		27823	0					
ANR	28054	Identifier	child		27823	1					
ANR	28055	PrimaryExpression	0		27823	1					
ANR	28056	ArrayIndexing	mm_block -> child [ 0 ]		27823	1					
ANR	28057	PtrMemberAccess	mm_block -> child		27823	0					
ANR	28058	Identifier	mm_block		27823	0					
ANR	28059	Identifier	child		27823	1					
ANR	28060	PrimaryExpression	0		27823	1					
ANR	28061	CompoundStatement		37:46:1018:1018	27823	1					
ANR	28062	ExpressionStatement	ZEND_MM_CHECK_TREE ( prev -> child [ 0 ] )	826:4:24085:24119	27823	0	True				
ANR	28063	CallExpression	ZEND_MM_CHECK_TREE ( prev -> child [ 0 ] )		27823	0					
ANR	28064	Callee	ZEND_MM_CHECK_TREE		27823	0					
ANR	28065	Identifier	ZEND_MM_CHECK_TREE		27823	0					
ANR	28066	ArgumentList	prev -> child [ 0 ]		27823	1					
ANR	28067	Argument	prev -> child [ 0 ]		27823	0					
ANR	28068	ArrayIndexing	prev -> child [ 0 ]		27823	0					
ANR	28069	PtrMemberAccess	prev -> child		27823	0					
ANR	28070	Identifier	prev		27823	0					
ANR	28071	Identifier	child		27823	1					
ANR	28072	PrimaryExpression	0		27823	1					
ANR	28073	ExpressionStatement	prev -> child [ 0 ] -> parent = & prev -> child [ 0 ]	827:4:24125:24165	27823	1	True				
ANR	28074	AssignmentExpression	prev -> child [ 0 ] -> parent = & prev -> child [ 0 ]		27823	0		=			
ANR	28075	PtrMemberAccess	prev -> child [ 0 ] -> parent		27823	0					
ANR	28076	ArrayIndexing	prev -> child [ 0 ]		27823	0					
ANR	28077	PtrMemberAccess	prev -> child		27823	0					
ANR	28078	Identifier	prev		27823	0					
ANR	28079	Identifier	child		27823	1					
ANR	28080	PrimaryExpression	0		27823	1					
ANR	28081	Identifier	parent		27823	1					
ANR	28082	UnaryOperationExpression	& prev -> child [ 0 ]		27823	1					
ANR	28083	UnaryOperator	&		27823	0					
ANR	28084	ArrayIndexing	prev -> child [ 0 ]		27823	1					
ANR	28085	PtrMemberAccess	prev -> child		27823	0					
ANR	28086	Identifier	prev		27823	0					
ANR	28087	Identifier	child		27823	1					
ANR	28088	PrimaryExpression	0		27823	1					
ANR	28089	IfStatement	if ( ( prev -> child [ 1 ] = mm_block -> child [ 1 ] ) )		27823	7					
ANR	28090	Condition	prev -> child [ 1 ] = mm_block -> child [ 1 ]	829:7:24179:24215	27823	0	True				
ANR	28091	AssignmentExpression	prev -> child [ 1 ] = mm_block -> child [ 1 ]		27823	0		=			
ANR	28092	ArrayIndexing	prev -> child [ 1 ]		27823	0					
ANR	28093	PtrMemberAccess	prev -> child		27823	0					
ANR	28094	Identifier	prev		27823	0					
ANR	28095	Identifier	child		27823	1					
ANR	28096	PrimaryExpression	1		27823	1					
ANR	28097	ArrayIndexing	mm_block -> child [ 1 ]		27823	1					
ANR	28098	PtrMemberAccess	mm_block -> child		27823	0					
ANR	28099	Identifier	mm_block		27823	0					
ANR	28100	Identifier	child		27823	1					
ANR	28101	PrimaryExpression	1		27823	1					
ANR	28102	CompoundStatement		41:46:1157:1157	27823	1					
ANR	28103	ExpressionStatement	ZEND_MM_CHECK_TREE ( prev -> child [ 1 ] )	830:4:24224:24258	27823	0	True				
ANR	28104	CallExpression	ZEND_MM_CHECK_TREE ( prev -> child [ 1 ] )		27823	0					
ANR	28105	Callee	ZEND_MM_CHECK_TREE		27823	0					
ANR	28106	Identifier	ZEND_MM_CHECK_TREE		27823	0					
ANR	28107	ArgumentList	prev -> child [ 1 ]		27823	1					
ANR	28108	Argument	prev -> child [ 1 ]		27823	0					
ANR	28109	ArrayIndexing	prev -> child [ 1 ]		27823	0					
ANR	28110	PtrMemberAccess	prev -> child		27823	0					
ANR	28111	Identifier	prev		27823	0					
ANR	28112	Identifier	child		27823	1					
ANR	28113	PrimaryExpression	1		27823	1					
ANR	28114	ExpressionStatement	prev -> child [ 1 ] -> parent = & prev -> child [ 1 ]	831:4:24264:24304	27823	1	True				
ANR	28115	AssignmentExpression	prev -> child [ 1 ] -> parent = & prev -> child [ 1 ]		27823	0		=			
ANR	28116	PtrMemberAccess	prev -> child [ 1 ] -> parent		27823	0					
ANR	28117	ArrayIndexing	prev -> child [ 1 ]		27823	0					
ANR	28118	PtrMemberAccess	prev -> child		27823	0					
ANR	28119	Identifier	prev		27823	0					
ANR	28120	Identifier	child		27823	1					
ANR	28121	PrimaryExpression	1		27823	1					
ANR	28122	Identifier	parent		27823	1					
ANR	28123	UnaryOperationExpression	& prev -> child [ 1 ]		27823	1					
ANR	28124	UnaryOperator	&		27823	0					
ANR	28125	ArrayIndexing	prev -> child [ 1 ]		27823	1					
ANR	28126	PtrMemberAccess	prev -> child		27823	0					
ANR	28127	Identifier	prev		27823	0					
ANR	28128	Identifier	child		27823	1					
ANR	28129	PrimaryExpression	1		27823	1					
ANR	28130	ElseStatement	else		27823	0					
ANR	28131	CompoundStatement		46:8:1262:1262	27823	0					
ANR	28132	IfStatement	if ( UNEXPECTED ( prev -> next_free_block != mm_block ) || UNEXPECTED ( next -> prev_free_block != mm_block ) )		27823	0					
ANR	28133	Condition	UNEXPECTED ( prev -> next_free_block != mm_block ) || UNEXPECTED ( next -> prev_free_block != mm_block )	837:6:24359:24452	27823	0	True				
ANR	28134	OrExpression	UNEXPECTED ( prev -> next_free_block != mm_block ) || UNEXPECTED ( next -> prev_free_block != mm_block )		27823	0		||			
ANR	28135	CallExpression	UNEXPECTED ( prev -> next_free_block != mm_block )		27823	0					
ANR	28136	Callee	UNEXPECTED		27823	0					
ANR	28137	Identifier	UNEXPECTED		27823	0					
ANR	28138	ArgumentList	prev -> next_free_block != mm_block		27823	1					
ANR	28139	Argument	prev -> next_free_block != mm_block		27823	0					
ANR	28140	EqualityExpression	prev -> next_free_block != mm_block		27823	0		!=			
ANR	28141	PtrMemberAccess	prev -> next_free_block		27823	0					
ANR	28142	Identifier	prev		27823	0					
ANR	28143	Identifier	next_free_block		27823	1					
ANR	28144	Identifier	mm_block		27823	1					
ANR	28145	CallExpression	UNEXPECTED ( next -> prev_free_block != mm_block )		27823	1					
ANR	28146	Callee	UNEXPECTED		27823	0					
ANR	28147	Identifier	UNEXPECTED		27823	0					
ANR	28148	ArgumentList	next -> prev_free_block != mm_block		27823	1					
ANR	28149	Argument	next -> prev_free_block != mm_block		27823	0					
ANR	28150	EqualityExpression	next -> prev_free_block != mm_block		27823	0		!=			
ANR	28151	PtrMemberAccess	next -> prev_free_block		27823	0					
ANR	28152	Identifier	next		27823	0					
ANR	28153	Identifier	prev_free_block		27823	1					
ANR	28154	Identifier	mm_block		27823	1					
ANR	28155	CompoundStatement		49:102:1394:1394	27823	1					
ANR	28156	ExpressionStatement	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"	838:3:24460:24499	27823	0	True				
ANR	28157	CallExpression	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"		27823	0					
ANR	28158	Callee	zend_mm_panic		27823	0					
ANR	28159	Identifier	zend_mm_panic		27823	0					
ANR	28160	ArgumentList	"""zend_mm_heap corrupted"""		27823	1					
ANR	28161	Argument	"""zend_mm_heap corrupted"""		27823	0					
ANR	28162	PrimaryExpression	"""zend_mm_heap corrupted"""		27823	0					
ANR	28163	ExpressionStatement	prev -> next_free_block = next	842:2:24515:24543	27823	1	True				
ANR	28164	AssignmentExpression	prev -> next_free_block = next		27823	0		=			
ANR	28165	PtrMemberAccess	prev -> next_free_block		27823	0					
ANR	28166	Identifier	prev		27823	0					
ANR	28167	Identifier	next_free_block		27823	1					
ANR	28168	Identifier	next		27823	1					
ANR	28169	ExpressionStatement	next -> prev_free_block = prev	843:2:24547:24575	27823	2	True				
ANR	28170	AssignmentExpression	next -> prev_free_block = prev		27823	0		=			
ANR	28171	PtrMemberAccess	next -> prev_free_block		27823	0					
ANR	28172	Identifier	next		27823	0					
ANR	28173	Identifier	prev_free_block		27823	1					
ANR	28174	Identifier	prev		27823	1					
ANR	28175	IfStatement	if ( EXPECTED ( ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) ) ) )		27823	3					
ANR	28176	Condition	EXPECTED ( ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) ) )	845:6:24584:24646	27823	0	True				
ANR	28177	CallExpression	EXPECTED ( ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) ) )		27823	0					
ANR	28178	Callee	EXPECTED		27823	0					
ANR	28179	Identifier	EXPECTED		27823	0					
ANR	28180	ArgumentList	ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		27823	1					
ANR	28181	Argument	ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		27823	0					
ANR	28182	CallExpression	ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		27823	0					
ANR	28183	Callee	ZEND_MM_SMALL_SIZE		27823	0					
ANR	28184	Identifier	ZEND_MM_SMALL_SIZE		27823	0					
ANR	28185	ArgumentList	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27823	1					
ANR	28186	Argument	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27823	0					
ANR	28187	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27823	0					
ANR	28188	Callee	ZEND_MM_FREE_BLOCK_SIZE		27823	0					
ANR	28189	Identifier	ZEND_MM_FREE_BLOCK_SIZE		27823	0					
ANR	28190	ArgumentList	mm_block		27823	1					
ANR	28191	Argument	mm_block		27823	0					
ANR	28192	Identifier	mm_block		27823	0					
ANR	28193	CompoundStatement		57:71:1588:1588	27823	1					
ANR	28194	IfStatement	if ( EXPECTED ( prev == next ) )		27823	0					
ANR	28195	Condition	EXPECTED ( prev == next )	846:7:24658:24679	27823	0	True				
ANR	28196	CallExpression	EXPECTED ( prev == next )		27823	0					
ANR	28197	Callee	EXPECTED		27823	0					
ANR	28198	Identifier	EXPECTED		27823	0					
ANR	28199	ArgumentList	prev == next		27823	1					
ANR	28200	Argument	prev == next		27823	0					
ANR	28201	EqualityExpression	prev == next		27823	0		==			
ANR	28202	Identifier	prev		27823	0					
ANR	28203	Identifier	next		27823	1					
ANR	28204	CompoundStatement		59:4:1627:1697	27823	1					
ANR	28205	IdentifierDeclStatement	size_t index = ZEND_MM_BUCKET_INDEX ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) ) ;	847:4:24688:24758	27823	0	True				
ANR	28206	IdentifierDecl	index = ZEND_MM_BUCKET_INDEX ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		27823	0					
ANR	28207	IdentifierDeclType	size_t		27823	0					
ANR	28208	Identifier	index		27823	1					
ANR	28209	AssignmentExpression	index = ZEND_MM_BUCKET_INDEX ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		27823	2		=			
ANR	28210	Identifier	index		27823	0					
ANR	28211	CallExpression	ZEND_MM_BUCKET_INDEX ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		27823	1					
ANR	28212	Callee	ZEND_MM_BUCKET_INDEX		27823	0					
ANR	28213	Identifier	ZEND_MM_BUCKET_INDEX		27823	0					
ANR	28214	ArgumentList	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27823	1					
ANR	28215	Argument	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27823	0					
ANR	28216	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		27823	0					
ANR	28217	Callee	ZEND_MM_FREE_BLOCK_SIZE		27823	0					
ANR	28218	Identifier	ZEND_MM_FREE_BLOCK_SIZE		27823	0					
ANR	28219	ArgumentList	mm_block		27823	1					
ANR	28220	Argument	mm_block		27823	0					
ANR	28221	Identifier	mm_block		27823	0					
ANR	28222	IfStatement	if ( EXPECTED ( heap -> free_buckets [ index * 2 ] == heap -> free_buckets [ index * 2 + 1 ] ) )		27823	1					
ANR	28223	Condition	EXPECTED ( heap -> free_buckets [ index * 2 ] == heap -> free_buckets [ index * 2 + 1 ] )	849:8:24769:24838	27823	0	True				
ANR	28224	CallExpression	EXPECTED ( heap -> free_buckets [ index * 2 ] == heap -> free_buckets [ index * 2 + 1 ] )		27823	0					
ANR	28225	Callee	EXPECTED		27823	0					
ANR	28226	Identifier	EXPECTED		27823	0					
ANR	28227	ArgumentList	heap -> free_buckets [ index * 2 ] == heap -> free_buckets [ index * 2 + 1 ]		27823	1					
ANR	28228	Argument	heap -> free_buckets [ index * 2 ] == heap -> free_buckets [ index * 2 + 1 ]		27823	0					
ANR	28229	EqualityExpression	heap -> free_buckets [ index * 2 ] == heap -> free_buckets [ index * 2 + 1 ]		27823	0		==			
ANR	28230	ArrayIndexing	heap -> free_buckets [ index * 2 ]		27823	0					
ANR	28231	PtrMemberAccess	heap -> free_buckets		27823	0					
ANR	28232	Identifier	heap		27823	0					
ANR	28233	Identifier	free_buckets		27823	1					
ANR	28234	MultiplicativeExpression	index * 2		27823	1		*			
ANR	28235	Identifier	index		27823	0					
ANR	28236	PrimaryExpression	2		27823	1					
ANR	28237	ArrayIndexing	heap -> free_buckets [ index * 2 + 1 ]		27823	1					
ANR	28238	PtrMemberAccess	heap -> free_buckets		27823	0					
ANR	28239	Identifier	heap		27823	0					
ANR	28240	Identifier	free_buckets		27823	1					
ANR	28241	AdditiveExpression	index * 2 + 1		27823	1		+			
ANR	28242	MultiplicativeExpression	index * 2		27823	0		*			
ANR	28243	Identifier	index		27823	0					
ANR	28244	PrimaryExpression	2		27823	1					
ANR	28245	PrimaryExpression	1		27823	1					
ANR	28246	CompoundStatement		61:80:1780:1780	27823	1					
ANR	28247	ExpressionStatement	heap -> free_bitmap &= ~ ( ZEND_MM_LONG_CONST ( 1 ) << index )	850:5:24848:24902	27823	0	True				
ANR	28248	AssignmentExpression	heap -> free_bitmap &= ~ ( ZEND_MM_LONG_CONST ( 1 ) << index )		27823	0		&=			
ANR	28249	PtrMemberAccess	heap -> free_bitmap		27823	0					
ANR	28250	Identifier	heap		27823	0					
ANR	28251	Identifier	free_bitmap		27823	1					
ANR	28252	UnaryOperationExpression	~ ( ZEND_MM_LONG_CONST ( 1 ) << index )		27823	1					
ANR	28253	UnaryOperator	~		27823	0					
ANR	28254	ShiftExpression	ZEND_MM_LONG_CONST ( 1 ) << index		27823	1		<<			
ANR	28255	CallExpression	ZEND_MM_LONG_CONST ( 1 )		27823	0					
ANR	28256	Callee	ZEND_MM_LONG_CONST		27823	0					
ANR	28257	Identifier	ZEND_MM_LONG_CONST		27823	0					
ANR	28258	ArgumentList	1		27823	1					
ANR	28259	Argument	1		27823	0					
ANR	28260	PrimaryExpression	1		27823	0					
ANR	28261	Identifier	index		27823	1					
ANR	28262	ElseStatement	else		27823	0					
ANR	28263	IfStatement	if ( UNEXPECTED ( mm_block -> parent == ZEND_MM_REST_BLOCK ) )		27823	0					
ANR	28264	Condition	UNEXPECTED ( mm_block -> parent == ZEND_MM_REST_BLOCK )	853:13:24928:24977	27823	0	True				
ANR	28265	CallExpression	UNEXPECTED ( mm_block -> parent == ZEND_MM_REST_BLOCK )		27823	0					
ANR	28266	Callee	UNEXPECTED		27823	0					
ANR	28267	Identifier	UNEXPECTED		27823	0					
ANR	28268	ArgumentList	mm_block -> parent == ZEND_MM_REST_BLOCK		27823	1					
ANR	28269	Argument	mm_block -> parent == ZEND_MM_REST_BLOCK		27823	0					
ANR	28270	EqualityExpression	mm_block -> parent == ZEND_MM_REST_BLOCK		27823	0		==			
ANR	28271	PtrMemberAccess	mm_block -> parent		27823	0					
ANR	28272	Identifier	mm_block		27823	0					
ANR	28273	Identifier	parent		27823	1					
ANR	28274	Identifier	ZEND_MM_REST_BLOCK		27823	1					
ANR	28275	CompoundStatement		65:65:1919:1919	27823	1					
ANR	28276	ExpressionStatement	heap -> rest_count --	854:3:24985:25003	27823	0	True				
ANR	28277	PostIncDecOperationExpression	heap -> rest_count --		27823	0					
ANR	28278	PtrMemberAccess	heap -> rest_count		27823	0					
ANR	28279	Identifier	heap		27823	0					
ANR	28280	Identifier	rest_count		27823	1					
ANR	28281	IncDec	--		27823	1					
ANR	28282	ElseStatement	else		27823	0					
ANR	28283	IfStatement	if ( UNEXPECTED ( mm_block -> parent != NULL ) )		27823	0					
ANR	28284	Condition	UNEXPECTED ( mm_block -> parent != NULL )	855:13:25018:25053	27823	0	True				
ANR	28285	CallExpression	UNEXPECTED ( mm_block -> parent != NULL )		27823	0					
ANR	28286	Callee	UNEXPECTED		27823	0					
ANR	28287	Identifier	UNEXPECTED		27823	0					
ANR	28288	ArgumentList	mm_block -> parent != NULL		27823	1					
ANR	28289	Argument	mm_block -> parent != NULL		27823	0					
ANR	28290	EqualityExpression	mm_block -> parent != NULL		27823	0		!=			
ANR	28291	PtrMemberAccess	mm_block -> parent		27823	0					
ANR	28292	Identifier	mm_block		27823	0					
ANR	28293	Identifier	parent		27823	1					
ANR	28294	Identifier	NULL		27823	1					
ANR	28295	CompoundStatement		67:51:1995:1995	27823	1					
ANR	28296	GotoStatement	goto subst_block ;	856:3:25061:25077	27823	0	True				
ANR	28297	Identifier	subst_block		27823	0					
ANR	28298	ReturnType	static inline void		27823	1					
ANR	28299	Identifier	zend_mm_remove_from_free_list		27823	2					
ANR	28300	ParameterList	"zend_mm_heap * heap , zend_mm_free_block * mm_block"		27823	3					
ANR	28301	Parameter	zend_mm_heap * heap	788:49:23010:23027	27823	0	True				
ANR	28302	ParameterType	zend_mm_heap *		27823	0					
ANR	28303	Identifier	heap		27823	1					
ANR	28304	Parameter	zend_mm_free_block * mm_block	788:69:23030:23057	27823	1	True				
ANR	28305	ParameterType	zend_mm_free_block *		27823	0					
ANR	28306	Identifier	mm_block		27823	1					
ANR	28307	CFGEntryNode	ENTRY		27823		True				
ANR	28308	CFGExitNode	EXIT		27823		True				
ANR	28309	Symbol	MEM_BLOCK_FREED		27823						
ANR	28310	Symbol	* * heap		27823						
ANR	28311	Symbol	heap -> large_free_buckets		27823						
ANR	28312	Symbol	ZEND_MM_LONG_CONST		27823						
ANR	28313	Symbol	heap -> free_bitmap		27823						
ANR	28314	Symbol	prev		27823						
ANR	28315	Symbol	* index		27823						
ANR	28316	Symbol	heap -> large_free_bitmap		27823						
ANR	28317	Symbol	* next		27823						
ANR	28318	Symbol	ZEND_MM_REST_BLOCK		27823						
ANR	28319	Symbol	* prev -> child		27823						
ANR	28320	Symbol	* heap -> free_buckets		27823						
ANR	28321	Symbol	prev -> child		27823						
ANR	28322	Symbol	NULL		27823						
ANR	28323	Symbol	* * * prev		27823						
ANR	28324	Symbol	heap -> rest_count		27823						
ANR	28325	Symbol	ZEND_MM_LARGE_BUCKET_INDEX		27823						
ANR	28326	Symbol	index		27823						
ANR	28327	Symbol	mm_block -> prev_free_block		27823						
ANR	28328	Symbol	* mm_block -> child		27823						
ANR	28329	Symbol	* cp		27823						
ANR	28330	Symbol	* * prev -> child		27823						
ANR	28331	Symbol	mm_block		27823						
ANR	28332	Symbol	* heap		27823						
ANR	28333	Symbol	rp		27823						
ANR	28334	Symbol	next		27823						
ANR	28335	Symbol	* * prev		27823						
ANR	28336	Symbol	mm_block -> child		27823						
ANR	28337	Symbol	mm_block -> next_free_block		27823						
ANR	28338	Symbol	* prev		27823						
ANR	28339	Symbol	prev -> next_free_block		27823						
ANR	28340	Symbol	UNEXPECTED		27823						
ANR	28341	Symbol	* mm_block		27823						
ANR	28342	Symbol	ZEND_MM_FREE_BLOCK_SIZE		27823						
ANR	28343	Symbol	next -> prev_free_block		27823						
ANR	28344	Symbol	heap		27823						
ANR	28345	Symbol	heap -> free_buckets		27823						
ANR	28346	Symbol	prev -> parent		27823						
ANR	28347	Symbol	ZEND_MM_BUCKET_INDEX		27823						
ANR	28348	Symbol	* ( cp = & ( prev -> child [ prev -> child [ 1 ] != NULL ] ) )		27823						
ANR	28349	Symbol	* rp		27823						
ANR	28350	Symbol	* * mm_block		27823						
ANR	28351	Symbol	mm_block -> parent		27823						
ANR	28352	Symbol	cp		27823						
ANR	28353	Symbol	prev -> child [ 1 ] -> parent		27823						
ANR	28354	Symbol	prev -> child [ 0 ] -> parent		27823						
ANR	28355	Symbol	ZEND_MM_SMALL_SIZE		27823						
ANR	28356	Symbol	* mm_block -> parent		27823						
ANR	28357	Symbol	EXPECTED		27823						
ANR	28358	Function	zend_mm_add_to_rest_list	861:0:25089:25941							
ANR	28359	FunctionDef	"zend_mm_add_to_rest_list (zend_mm_heap * heap , zend_mm_free_block * mm_block)"		28358	0					
ANR	28360	CompoundStatement		862:0:25183:25941	28358	0					
ANR	28361	IdentifierDeclStatement	"zend_mm_free_block * prev , * next ;"	863:1:25186:25217	28358	0	True				
ANR	28362	IdentifierDecl	* prev		28358	0					
ANR	28363	IdentifierDeclType	zend_mm_free_block *		28358	0					
ANR	28364	Identifier	prev		28358	1					
ANR	28365	IdentifierDecl	* next		28358	1					
ANR	28366	IdentifierDeclType	zend_mm_free_block *		28358	0					
ANR	28367	Identifier	next		28358	1					
ANR	28368	WhileStatement	while ( heap -> rest_count >= ZEND_MM_MAX_REST_BLOCKS )		28358	1					
ANR	28369	Condition	heap -> rest_count >= ZEND_MM_MAX_REST_BLOCKS	865:8:25228:25270	28358	0	True				
ANR	28370	RelationalExpression	heap -> rest_count >= ZEND_MM_MAX_REST_BLOCKS		28358	0		>=			
ANR	28371	PtrMemberAccess	heap -> rest_count		28358	0					
ANR	28372	Identifier	heap		28358	0					
ANR	28373	Identifier	rest_count		28358	1					
ANR	28374	Identifier	ZEND_MM_MAX_REST_BLOCKS		28358	1					
ANR	28375	CompoundStatement		5:2:93:138	28358	1					
ANR	28376	IdentifierDeclStatement	zend_mm_free_block * p = heap -> rest_buckets [ 1 ] ;	866:2:25277:25322	28358	0	True				
ANR	28377	IdentifierDecl	* p = heap -> rest_buckets [ 1 ]		28358	0					
ANR	28378	IdentifierDeclType	zend_mm_free_block *		28358	0					
ANR	28379	Identifier	p		28358	1					
ANR	28380	AssignmentExpression	* p = heap -> rest_buckets [ 1 ]		28358	2		=			
ANR	28381	Identifier	p		28358	0					
ANR	28382	ArrayIndexing	heap -> rest_buckets [ 1 ]		28358	1					
ANR	28383	PtrMemberAccess	heap -> rest_buckets		28358	0					
ANR	28384	Identifier	heap		28358	0					
ANR	28385	Identifier	rest_buckets		28358	1					
ANR	28386	PrimaryExpression	1		28358	1					
ANR	28387	IfStatement	if ( ! ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( p ) ) )		28358	1					
ANR	28388	Condition	! ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( p ) )	868:6:25331:25377	28358	0	True				
ANR	28389	UnaryOperationExpression	! ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( p ) )		28358	0					
ANR	28390	UnaryOperator	!		28358	0					
ANR	28391	CallExpression	ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( p ) )		28358	1					
ANR	28392	Callee	ZEND_MM_SMALL_SIZE		28358	0					
ANR	28393	Identifier	ZEND_MM_SMALL_SIZE		28358	0					
ANR	28394	ArgumentList	ZEND_MM_FREE_BLOCK_SIZE ( p )		28358	1					
ANR	28395	Argument	ZEND_MM_FREE_BLOCK_SIZE ( p )		28358	0					
ANR	28396	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		28358	0					
ANR	28397	Callee	ZEND_MM_FREE_BLOCK_SIZE		28358	0					
ANR	28398	Identifier	ZEND_MM_FREE_BLOCK_SIZE		28358	0					
ANR	28399	ArgumentList	p		28358	1					
ANR	28400	Argument	p		28358	0					
ANR	28401	Identifier	p		28358	0					
ANR	28402	CompoundStatement		7:55:196:196	28358	1					
ANR	28403	ExpressionStatement	heap -> rest_count --	869:3:25385:25403	28358	0	True				
ANR	28404	PostIncDecOperationExpression	heap -> rest_count --		28358	0					
ANR	28405	PtrMemberAccess	heap -> rest_count		28358	0					
ANR	28406	Identifier	heap		28358	0					
ANR	28407	Identifier	rest_count		28358	1					
ANR	28408	IncDec	--		28358	1					
ANR	28409	ExpressionStatement	prev = p -> prev_free_block	871:2:25411:25436	28358	2	True				
ANR	28410	AssignmentExpression	prev = p -> prev_free_block		28358	0		=			
ANR	28411	Identifier	prev		28358	0					
ANR	28412	PtrMemberAccess	p -> prev_free_block		28358	1					
ANR	28413	Identifier	p		28358	0					
ANR	28414	Identifier	prev_free_block		28358	1					
ANR	28415	ExpressionStatement	next = p -> next_free_block	872:2:25440:25465	28358	3	True				
ANR	28416	AssignmentExpression	next = p -> next_free_block		28358	0		=			
ANR	28417	Identifier	next		28358	0					
ANR	28418	PtrMemberAccess	p -> next_free_block		28358	1					
ANR	28419	Identifier	p		28358	0					
ANR	28420	Identifier	next_free_block		28358	1					
ANR	28421	ExpressionStatement	prev -> next_free_block = next	873:2:25469:25497	28358	4	True				
ANR	28422	AssignmentExpression	prev -> next_free_block = next		28358	0		=			
ANR	28423	PtrMemberAccess	prev -> next_free_block		28358	0					
ANR	28424	Identifier	prev		28358	0					
ANR	28425	Identifier	next_free_block		28358	1					
ANR	28426	Identifier	next		28358	1					
ANR	28427	ExpressionStatement	next -> prev_free_block = prev	874:2:25501:25529	28358	5	True				
ANR	28428	AssignmentExpression	next -> prev_free_block = prev		28358	0		=			
ANR	28429	PtrMemberAccess	next -> prev_free_block		28358	0					
ANR	28430	Identifier	next		28358	0					
ANR	28431	Identifier	prev_free_block		28358	1					
ANR	28432	Identifier	prev		28358	1					
ANR	28433	ExpressionStatement	"zend_mm_add_to_free_list ( heap , p )"	875:2:25533:25566	28358	6	True				
ANR	28434	CallExpression	"zend_mm_add_to_free_list ( heap , p )"		28358	0					
ANR	28435	Callee	zend_mm_add_to_free_list		28358	0					
ANR	28436	Identifier	zend_mm_add_to_free_list		28358	0					
ANR	28437	ArgumentList	heap		28358	1					
ANR	28438	Argument	heap		28358	0					
ANR	28439	Identifier	heap		28358	0					
ANR	28440	Argument	p		28358	1					
ANR	28441	Identifier	p		28358	0					
ANR	28442	IfStatement	if ( ! ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) ) )		28358	2					
ANR	28443	Condition	! ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )	878:5:25577:25630	28358	0	True				
ANR	28444	UnaryOperationExpression	! ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		28358	0					
ANR	28445	UnaryOperator	!		28358	0					
ANR	28446	CallExpression	ZEND_MM_SMALL_SIZE ( ZEND_MM_FREE_BLOCK_SIZE ( mm_block ) )		28358	1					
ANR	28447	Callee	ZEND_MM_SMALL_SIZE		28358	0					
ANR	28448	Identifier	ZEND_MM_SMALL_SIZE		28358	0					
ANR	28449	ArgumentList	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		28358	1					
ANR	28450	Argument	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		28358	0					
ANR	28451	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		28358	0					
ANR	28452	Callee	ZEND_MM_FREE_BLOCK_SIZE		28358	0					
ANR	28453	Identifier	ZEND_MM_FREE_BLOCK_SIZE		28358	0					
ANR	28454	ArgumentList	mm_block		28358	1					
ANR	28455	Argument	mm_block		28358	0					
ANR	28456	Identifier	mm_block		28358	0					
ANR	28457	CompoundStatement		17:61:449:449	28358	1					
ANR	28458	ExpressionStatement	mm_block -> parent = ZEND_MM_REST_BLOCK	879:2:25637:25674	28358	0	True				
ANR	28459	AssignmentExpression	mm_block -> parent = ZEND_MM_REST_BLOCK		28358	0		=			
ANR	28460	PtrMemberAccess	mm_block -> parent		28358	0					
ANR	28461	Identifier	mm_block		28358	0					
ANR	28462	Identifier	parent		28358	1					
ANR	28463	Identifier	ZEND_MM_REST_BLOCK		28358	1					
ANR	28464	ExpressionStatement	heap -> rest_count ++	880:2:25678:25696	28358	1	True				
ANR	28465	PostIncDecOperationExpression	heap -> rest_count ++		28358	0					
ANR	28466	PtrMemberAccess	heap -> rest_count		28358	0					
ANR	28467	Identifier	heap		28358	0					
ANR	28468	Identifier	rest_count		28358	1					
ANR	28469	IncDec	++		28358	1					
ANR	28470	ExpressionStatement	"ZEND_MM_SET_MAGIC ( mm_block , MEM_BLOCK_FREED )"	883:1:25703:25747	28358	3	True				
ANR	28471	CallExpression	"ZEND_MM_SET_MAGIC ( mm_block , MEM_BLOCK_FREED )"		28358	0					
ANR	28472	Callee	ZEND_MM_SET_MAGIC		28358	0					
ANR	28473	Identifier	ZEND_MM_SET_MAGIC		28358	0					
ANR	28474	ArgumentList	mm_block		28358	1					
ANR	28475	Argument	mm_block		28358	0					
ANR	28476	Identifier	mm_block		28358	0					
ANR	28477	Argument	MEM_BLOCK_FREED		28358	1					
ANR	28478	Identifier	MEM_BLOCK_FREED		28358	0					
ANR	28479	ExpressionStatement	prev = heap -> rest_buckets [ 0 ]	885:1:25751:25779	28358	4	True				
ANR	28480	AssignmentExpression	prev = heap -> rest_buckets [ 0 ]		28358	0		=			
ANR	28481	Identifier	prev		28358	0					
ANR	28482	ArrayIndexing	heap -> rest_buckets [ 0 ]		28358	1					
ANR	28483	PtrMemberAccess	heap -> rest_buckets		28358	0					
ANR	28484	Identifier	heap		28358	0					
ANR	28485	Identifier	rest_buckets		28358	1					
ANR	28486	PrimaryExpression	0		28358	1					
ANR	28487	ExpressionStatement	next = prev -> next_free_block	886:1:25782:25810	28358	5	True				
ANR	28488	AssignmentExpression	next = prev -> next_free_block		28358	0		=			
ANR	28489	Identifier	next		28358	0					
ANR	28490	PtrMemberAccess	prev -> next_free_block		28358	1					
ANR	28491	Identifier	prev		28358	0					
ANR	28492	Identifier	next_free_block		28358	1					
ANR	28493	ExpressionStatement	mm_block -> prev_free_block = prev	887:1:25813:25845	28358	6	True				
ANR	28494	AssignmentExpression	mm_block -> prev_free_block = prev		28358	0		=			
ANR	28495	PtrMemberAccess	mm_block -> prev_free_block		28358	0					
ANR	28496	Identifier	mm_block		28358	0					
ANR	28497	Identifier	prev_free_block		28358	1					
ANR	28498	Identifier	prev		28358	1					
ANR	28499	ExpressionStatement	mm_block -> next_free_block = next	888:1:25848:25880	28358	7	True				
ANR	28500	AssignmentExpression	mm_block -> next_free_block = next		28358	0		=			
ANR	28501	PtrMemberAccess	mm_block -> next_free_block		28358	0					
ANR	28502	Identifier	mm_block		28358	0					
ANR	28503	Identifier	next_free_block		28358	1					
ANR	28504	Identifier	next		28358	1					
ANR	28505	ExpressionStatement	prev -> next_free_block = next -> prev_free_block = mm_block	889:1:25883:25939	28358	8	True				
ANR	28506	AssignmentExpression	prev -> next_free_block = next -> prev_free_block = mm_block		28358	0		=			
ANR	28507	PtrMemberAccess	prev -> next_free_block		28358	0					
ANR	28508	Identifier	prev		28358	0					
ANR	28509	Identifier	next_free_block		28358	1					
ANR	28510	AssignmentExpression	next -> prev_free_block = mm_block		28358	1		=			
ANR	28511	PtrMemberAccess	next -> prev_free_block		28358	0					
ANR	28512	Identifier	next		28358	0					
ANR	28513	Identifier	prev_free_block		28358	1					
ANR	28514	Identifier	mm_block		28358	1					
ANR	28515	ReturnType	static inline void		28358	1					
ANR	28516	Identifier	zend_mm_add_to_rest_list		28358	2					
ANR	28517	ParameterList	"zend_mm_heap * heap , zend_mm_free_block * mm_block"		28358	3					
ANR	28518	Parameter	zend_mm_heap * heap	861:44:25133:25150	28358	0	True				
ANR	28519	ParameterType	zend_mm_heap *		28358	0					
ANR	28520	Identifier	heap		28358	1					
ANR	28521	Parameter	zend_mm_free_block * mm_block	861:64:25153:25180	28358	1	True				
ANR	28522	ParameterType	zend_mm_free_block *		28358	0					
ANR	28523	Identifier	mm_block		28358	1					
ANR	28524	CFGEntryNode	ENTRY		28358		True				
ANR	28525	CFGExitNode	EXIT		28358		True				
ANR	28526	Symbol	next		28358						
ANR	28527	Symbol	* * heap		28358						
ANR	28528	Symbol	MEM_BLOCK_FREED		28358						
ANR	28529	Symbol	prev		28358						
ANR	28530	Symbol	* prev		28358						
ANR	28531	Symbol	mm_block -> next_free_block		28358						
ANR	28532	Symbol	prev -> next_free_block		28358						
ANR	28533	Symbol	* next		28358						
ANR	28534	Symbol	p -> next_free_block		28358						
ANR	28535	Symbol	* mm_block		28358						
ANR	28536	Symbol	ZEND_MM_REST_BLOCK		28358						
ANR	28537	Symbol	ZEND_MM_FREE_BLOCK_SIZE		28358						
ANR	28538	Symbol	next -> prev_free_block		28358						
ANR	28539	Symbol	heap		28358						
ANR	28540	Symbol	heap -> rest_count		28358						
ANR	28541	Symbol	ZEND_MM_MAX_REST_BLOCKS		28358						
ANR	28542	Symbol	p -> prev_free_block		28358						
ANR	28543	Symbol	mm_block -> parent		28358						
ANR	28544	Symbol	mm_block -> prev_free_block		28358						
ANR	28545	Symbol	p		28358						
ANR	28546	Symbol	heap -> rest_buckets		28358						
ANR	28547	Symbol	mm_block		28358						
ANR	28548	Symbol	ZEND_MM_SMALL_SIZE		28358						
ANR	28549	Symbol	* heap -> rest_buckets		28358						
ANR	28550	Symbol	* p		28358						
ANR	28551	Symbol	* heap		28358						
ANR	28552	Function	zend_mm_init	892:0:25944:26637							
ANR	28553	FunctionDef	zend_mm_init (zend_mm_heap * heap)		28552	0					
ANR	28554	CompoundStatement		893:0:25996:26637	28552	0					
ANR	28555	IdentifierDeclStatement	zend_mm_free_block * p ;	894:1:25999:26020	28552	0	True				
ANR	28556	IdentifierDecl	* p		28552	0					
ANR	28557	IdentifierDeclType	zend_mm_free_block *		28552	0					
ANR	28558	Identifier	p		28552	1					
ANR	28559	IdentifierDeclStatement	int i ;	895:1:26023:26028	28552	1	True				
ANR	28560	IdentifierDecl	i		28552	0					
ANR	28561	IdentifierDeclType	int		28552	0					
ANR	28562	Identifier	i		28552	1					
ANR	28563	ExpressionStatement	heap -> free_bitmap = 0	897:1:26032:26053	28552	2	True				
ANR	28564	AssignmentExpression	heap -> free_bitmap = 0		28552	0		=			
ANR	28565	PtrMemberAccess	heap -> free_bitmap		28552	0					
ANR	28566	Identifier	heap		28552	0					
ANR	28567	Identifier	free_bitmap		28552	1					
ANR	28568	PrimaryExpression	0		28552	1					
ANR	28569	ExpressionStatement	heap -> large_free_bitmap = 0	898:1:26056:26083	28552	3	True				
ANR	28570	AssignmentExpression	heap -> large_free_bitmap = 0		28552	0		=			
ANR	28571	PtrMemberAccess	heap -> large_free_bitmap		28552	0					
ANR	28572	Identifier	heap		28552	0					
ANR	28573	Identifier	large_free_bitmap		28552	1					
ANR	28574	PrimaryExpression	0		28552	1					
ANR	28575	ExpressionStatement	heap -> cached = 0	900:1:26104:26120	28552	4	True				
ANR	28576	AssignmentExpression	heap -> cached = 0		28552	0		=			
ANR	28577	PtrMemberAccess	heap -> cached		28552	0					
ANR	28578	Identifier	heap		28552	0					
ANR	28579	Identifier	cached		28552	1					
ANR	28580	PrimaryExpression	0		28552	1					
ANR	28581	ExpressionStatement	"memset ( heap -> cache , 0 , sizeof ( heap -> cache ) )"	901:1:26123:26166	28552	5	True				
ANR	28582	CallExpression	"memset ( heap -> cache , 0 , sizeof ( heap -> cache ) )"		28552	0					
ANR	28583	Callee	memset		28552	0					
ANR	28584	Identifier	memset		28552	0					
ANR	28585	ArgumentList	heap -> cache		28552	1					
ANR	28586	Argument	heap -> cache		28552	0					
ANR	28587	PtrMemberAccess	heap -> cache		28552	0					
ANR	28588	Identifier	heap		28552	0					
ANR	28589	Identifier	cache		28552	1					
ANR	28590	Argument	0		28552	1					
ANR	28591	PrimaryExpression	0		28552	0					
ANR	28592	Argument	sizeof ( heap -> cache )		28552	2					
ANR	28593	SizeofExpression	sizeof ( heap -> cache )		28552	0					
ANR	28594	Sizeof	sizeof		28552	0					
ANR	28595	PtrMemberAccess	heap -> cache		28552	1					
ANR	28596	Identifier	heap		28552	0					
ANR	28597	Identifier	cache		28552	1					
ANR	28598	ForStatement	for ( i = 0 ; i < ZEND_MM_NUM_BUCKETS ; i ++ )		28552	6					
ANR	28599	ForInit	i = 0 ;	904:6:26204:26209	28552	0	True				
ANR	28600	AssignmentExpression	i = 0		28552	0		=			
ANR	28601	Identifier	i		28552	0					
ANR	28602	PrimaryExpression	0		28552	1					
ANR	28603	Condition	i < ZEND_MM_NUM_BUCKETS	904:13:26211:26233	28552	1	True				
ANR	28604	RelationalExpression	i < ZEND_MM_NUM_BUCKETS		28552	0		<			
ANR	28605	Identifier	i		28552	0					
ANR	28606	Identifier	ZEND_MM_NUM_BUCKETS		28552	1					
ANR	28607	PostIncDecOperationExpression	i ++	904:38:26236:26238	28552	2	True				
ANR	28608	Identifier	i		28552	0					
ANR	28609	IncDec	++		28552	1					
ANR	28610	CompoundStatement		12:43:244:244	28552	3					
ANR	28611	ExpressionStatement	heap -> cache_stat [ i ] . count = 0	905:2:26245:26274	28552	0	True				
ANR	28612	AssignmentExpression	heap -> cache_stat [ i ] . count = 0		28552	0		=			
ANR	28613	MemberAccess	heap -> cache_stat [ i ] . count		28552	0					
ANR	28614	ArrayIndexing	heap -> cache_stat [ i ]		28552	0					
ANR	28615	PtrMemberAccess	heap -> cache_stat		28552	0					
ANR	28616	Identifier	heap		28552	0					
ANR	28617	Identifier	cache_stat		28552	1					
ANR	28618	Identifier	i		28552	1					
ANR	28619	Identifier	count		28552	1					
ANR	28620	PrimaryExpression	0		28552	1					
ANR	28621	ExpressionStatement	"p = ZEND_MM_SMALL_FREE_BUCKET ( heap , 0 )"	908:1:26287:26325	28552	7	True				
ANR	28622	AssignmentExpression	"p = ZEND_MM_SMALL_FREE_BUCKET ( heap , 0 )"		28552	0		=			
ANR	28623	Identifier	p		28552	0					
ANR	28624	CallExpression	"ZEND_MM_SMALL_FREE_BUCKET ( heap , 0 )"		28552	1					
ANR	28625	Callee	ZEND_MM_SMALL_FREE_BUCKET		28552	0					
ANR	28626	Identifier	ZEND_MM_SMALL_FREE_BUCKET		28552	0					
ANR	28627	ArgumentList	heap		28552	1					
ANR	28628	Argument	heap		28552	0					
ANR	28629	Identifier	heap		28552	0					
ANR	28630	Argument	0		28552	1					
ANR	28631	PrimaryExpression	0		28552	0					
ANR	28632	ForStatement	for ( i = 0 ; i < ZEND_MM_NUM_BUCKETS ; i ++ )		28552	8					
ANR	28633	ForInit	i = 0 ;	909:6:26333:26338	28552	0	True				
ANR	28634	AssignmentExpression	i = 0		28552	0		=			
ANR	28635	Identifier	i		28552	0					
ANR	28636	PrimaryExpression	0		28552	1					
ANR	28637	Condition	i < ZEND_MM_NUM_BUCKETS	909:13:26340:26362	28552	1	True				
ANR	28638	RelationalExpression	i < ZEND_MM_NUM_BUCKETS		28552	0		<			
ANR	28639	Identifier	i		28552	0					
ANR	28640	Identifier	ZEND_MM_NUM_BUCKETS		28552	1					
ANR	28641	PostIncDecOperationExpression	i ++	909:38:26365:26367	28552	2	True				
ANR	28642	Identifier	i		28552	0					
ANR	28643	IncDec	++		28552	1					
ANR	28644	CompoundStatement		17:43:373:373	28552	3					
ANR	28645	ExpressionStatement	p -> next_free_block = p	910:2:26374:26396	28552	0	True				
ANR	28646	AssignmentExpression	p -> next_free_block = p		28552	0		=			
ANR	28647	PtrMemberAccess	p -> next_free_block		28552	0					
ANR	28648	Identifier	p		28552	0					
ANR	28649	Identifier	next_free_block		28552	1					
ANR	28650	Identifier	p		28552	1					
ANR	28651	ExpressionStatement	p -> prev_free_block = p	911:2:26400:26422	28552	1	True				
ANR	28652	AssignmentExpression	p -> prev_free_block = p		28552	0		=			
ANR	28653	PtrMemberAccess	p -> prev_free_block		28552	0					
ANR	28654	Identifier	p		28552	0					
ANR	28655	Identifier	prev_free_block		28552	1					
ANR	28656	Identifier	p		28552	1					
ANR	28657	ExpressionStatement	p = ( zend_mm_free_block * ) ( ( char * ) p + sizeof ( zend_mm_free_block * ) * 2 )	912:2:26426:26495	28552	2	True				
ANR	28658	AssignmentExpression	p = ( zend_mm_free_block * ) ( ( char * ) p + sizeof ( zend_mm_free_block * ) * 2 )		28552	0		=			
ANR	28659	Identifier	p		28552	0					
ANR	28660	CastExpression	( zend_mm_free_block * ) ( ( char * ) p + sizeof ( zend_mm_free_block * ) * 2 )		28552	1					
ANR	28661	CastTarget	zend_mm_free_block *		28552	0					
ANR	28662	AdditiveExpression	( char * ) p + sizeof ( zend_mm_free_block * ) * 2		28552	1		+			
ANR	28663	CastExpression	( char * ) p		28552	0					
ANR	28664	CastTarget	char *		28552	0					
ANR	28665	Identifier	p		28552	1					
ANR	28666	MultiplicativeExpression	sizeof ( zend_mm_free_block * ) * 2		28552	1		*			
ANR	28667	SizeofExpression	sizeof ( zend_mm_free_block * )		28552	0					
ANR	28668	Sizeof	sizeof		28552	0					
ANR	28669	SizeofOperand	zend_mm_free_block *		28552	1					
ANR	28670	PrimaryExpression	2		28552	1					
ANR	28671	ExpressionStatement	heap -> large_free_buckets [ i ] = NULL	913:2:26499:26533	28552	3	True				
ANR	28672	AssignmentExpression	heap -> large_free_buckets [ i ] = NULL		28552	0		=			
ANR	28673	ArrayIndexing	heap -> large_free_buckets [ i ]		28552	0					
ANR	28674	PtrMemberAccess	heap -> large_free_buckets		28552	0					
ANR	28675	Identifier	heap		28552	0					
ANR	28676	Identifier	large_free_buckets		28552	1					
ANR	28677	Identifier	i		28552	1					
ANR	28678	Identifier	NULL		28552	1					
ANR	28679	ExpressionStatement	heap -> rest_buckets [ 0 ] = heap -> rest_buckets [ 1 ] = ZEND_MM_REST_BUCKET ( heap )	915:1:26539:26612	28552	9	True				
ANR	28680	AssignmentExpression	heap -> rest_buckets [ 0 ] = heap -> rest_buckets [ 1 ] = ZEND_MM_REST_BUCKET ( heap )		28552	0		=			
ANR	28681	ArrayIndexing	heap -> rest_buckets [ 0 ]		28552	0					
ANR	28682	PtrMemberAccess	heap -> rest_buckets		28552	0					
ANR	28683	Identifier	heap		28552	0					
ANR	28684	Identifier	rest_buckets		28552	1					
ANR	28685	PrimaryExpression	0		28552	1					
ANR	28686	AssignmentExpression	heap -> rest_buckets [ 1 ] = ZEND_MM_REST_BUCKET ( heap )		28552	1		=			
ANR	28687	ArrayIndexing	heap -> rest_buckets [ 1 ]		28552	0					
ANR	28688	PtrMemberAccess	heap -> rest_buckets		28552	0					
ANR	28689	Identifier	heap		28552	0					
ANR	28690	Identifier	rest_buckets		28552	1					
ANR	28691	PrimaryExpression	1		28552	1					
ANR	28692	CallExpression	ZEND_MM_REST_BUCKET ( heap )		28552	1					
ANR	28693	Callee	ZEND_MM_REST_BUCKET		28552	0					
ANR	28694	Identifier	ZEND_MM_REST_BUCKET		28552	0					
ANR	28695	ArgumentList	heap		28552	1					
ANR	28696	Argument	heap		28552	0					
ANR	28697	Identifier	heap		28552	0					
ANR	28698	ExpressionStatement	heap -> rest_count = 0	916:1:26615:26635	28552	10	True				
ANR	28699	AssignmentExpression	heap -> rest_count = 0		28552	0		=			
ANR	28700	PtrMemberAccess	heap -> rest_count		28552	0					
ANR	28701	Identifier	heap		28552	0					
ANR	28702	Identifier	rest_count		28552	1					
ANR	28703	PrimaryExpression	0		28552	1					
ANR	28704	ReturnType	static inline void		28552	1					
ANR	28705	Identifier	zend_mm_init		28552	2					
ANR	28706	ParameterList	zend_mm_heap * heap		28552	3					
ANR	28707	Parameter	zend_mm_heap * heap	892:32:25976:25993	28552	0	True				
ANR	28708	ParameterType	zend_mm_heap *		28552	0					
ANR	28709	Identifier	heap		28552	1					
ANR	28710	CFGEntryNode	ENTRY		28552		True				
ANR	28711	CFGExitNode	EXIT		28552		True				
ANR	28712	Symbol	* * heap		28552						
ANR	28713	Symbol	heap -> large_free_buckets		28552						
ANR	28714	Symbol	heap -> free_bitmap		28552						
ANR	28715	Symbol	heap -> large_free_bitmap		28552						
ANR	28716	Symbol	p -> next_free_block		28552						
ANR	28717	Symbol	heap -> cache_stat [ i ] . count		28552						
ANR	28718	Symbol	* heap -> large_free_buckets		28552						
ANR	28719	Symbol	ZEND_MM_REST_BUCKET		28552						
ANR	28720	Symbol	heap -> cached		28552						
ANR	28721	Symbol	heap		28552						
ANR	28722	Symbol	NULL		28552						
ANR	28723	Symbol	heap -> rest_count		28552						
ANR	28724	Symbol	p -> prev_free_block		28552						
ANR	28725	Symbol	i		28552						
ANR	28726	Symbol	heap -> cache_stat		28552						
ANR	28727	Symbol	ZEND_MM_NUM_BUCKETS		28552						
ANR	28728	Symbol	p		28552						
ANR	28729	Symbol	heap -> rest_buckets		28552						
ANR	28730	Symbol	* i		28552						
ANR	28731	Symbol	* heap -> rest_buckets		28552						
ANR	28732	Symbol	ZEND_MM_SMALL_FREE_BUCKET		28552						
ANR	28733	Symbol	* p		28552						
ANR	28734	Symbol	* heap -> cache_stat		28552						
ANR	28735	Symbol	* heap		28552						
ANR	28736	Symbol	heap -> cache		28552						
ANR	28737	Function	zend_mm_del_segment	919:0:26640:26917							
ANR	28738	FunctionDef	"zend_mm_del_segment (zend_mm_heap * heap , zend_mm_segment * segment)"		28737	0					
ANR	28739	CompoundStatement		920:0:26718:26917	28737	0					
ANR	28740	IdentifierDeclStatement	zend_mm_segment * * p = & heap -> segments_list ;	921:1:26721:26763	28737	0	True				
ANR	28741	IdentifierDecl	* * p = & heap -> segments_list		28737	0					
ANR	28742	IdentifierDeclType	zend_mm_segment * *		28737	0					
ANR	28743	Identifier	p		28737	1					
ANR	28744	AssignmentExpression	* * p = & heap -> segments_list		28737	2		=			
ANR	28745	Identifier	p		28737	0					
ANR	28746	UnaryOperationExpression	& heap -> segments_list		28737	1					
ANR	28747	UnaryOperator	&		28737	0					
ANR	28748	PtrMemberAccess	heap -> segments_list		28737	1					
ANR	28749	Identifier	heap		28737	0					
ANR	28750	Identifier	segments_list		28737	1					
ANR	28751	WhileStatement	while ( * p != segment )		28737	1					
ANR	28752	Condition	* p != segment	923:8:26774:26786	28737	0	True				
ANR	28753	EqualityExpression	* p != segment		28737	0		!=			
ANR	28754	UnaryOperationExpression	* p		28737	0					
ANR	28755	UnaryOperator	*		28737	0					
ANR	28756	Identifier	p		28737	1					
ANR	28757	Identifier	segment		28737	1					
ANR	28758	CompoundStatement		4:23:70:70	28737	1					
ANR	28759	ExpressionStatement	p = & ( * p ) -> next_segment	924:2:26793:26816	28737	0	True				
ANR	28760	AssignmentExpression	p = & ( * p ) -> next_segment		28737	0		=			
ANR	28761	Identifier	p		28737	0					
ANR	28762	UnaryOperationExpression	& ( * p ) -> next_segment		28737	1					
ANR	28763	UnaryOperator	&		28737	0					
ANR	28764	PtrMemberAccess	( * p ) -> next_segment		28737	1					
ANR	28765	UnaryOperationExpression	* p		28737	0					
ANR	28766	UnaryOperator	*		28737	0					
ANR	28767	Identifier	p		28737	1					
ANR	28768	Identifier	next_segment		28737	1					
ANR	28769	ExpressionStatement	* p = segment -> next_segment	926:1:26822:26848	28737	2	True				
ANR	28770	AssignmentExpression	* p = segment -> next_segment		28737	0		=			
ANR	28771	UnaryOperationExpression	* p		28737	0					
ANR	28772	UnaryOperator	*		28737	0					
ANR	28773	Identifier	p		28737	1					
ANR	28774	PtrMemberAccess	segment -> next_segment		28737	1					
ANR	28775	Identifier	segment		28737	0					
ANR	28776	Identifier	next_segment		28737	1					
ANR	28777	ExpressionStatement	heap -> real_size -= segment -> size	927:1:26851:26883	28737	3	True				
ANR	28778	AssignmentExpression	heap -> real_size -= segment -> size		28737	0		-=			
ANR	28779	PtrMemberAccess	heap -> real_size		28737	0					
ANR	28780	Identifier	heap		28737	0					
ANR	28781	Identifier	real_size		28737	1					
ANR	28782	PtrMemberAccess	segment -> size		28737	1					
ANR	28783	Identifier	segment		28737	0					
ANR	28784	Identifier	size		28737	1					
ANR	28785	ExpressionStatement	ZEND_MM_STORAGE_FREE ( segment )	928:1:26886:26915	28737	4	True				
ANR	28786	CallExpression	ZEND_MM_STORAGE_FREE ( segment )		28737	0					
ANR	28787	Callee	ZEND_MM_STORAGE_FREE		28737	0					
ANR	28788	Identifier	ZEND_MM_STORAGE_FREE		28737	0					
ANR	28789	ArgumentList	segment		28737	1					
ANR	28790	Argument	segment		28737	0					
ANR	28791	Identifier	segment		28737	0					
ANR	28792	ReturnType	static void		28737	1					
ANR	28793	Identifier	zend_mm_del_segment		28737	2					
ANR	28794	ParameterList	"zend_mm_heap * heap , zend_mm_segment * segment"		28737	3					
ANR	28795	Parameter	zend_mm_heap * heap	919:32:26672:26689	28737	0	True				
ANR	28796	ParameterType	zend_mm_heap *		28737	0					
ANR	28797	Identifier	heap		28737	1					
ANR	28798	Parameter	zend_mm_segment * segment	919:52:26692:26715	28737	1	True				
ANR	28799	ParameterType	zend_mm_segment *		28737	0					
ANR	28800	Identifier	segment		28737	1					
ANR	28801	CFGEntryNode	ENTRY		28737		True				
ANR	28802	CFGExitNode	EXIT		28737		True				
ANR	28803	Symbol	p		28737						
ANR	28804	Symbol	& heap -> segments_list		28737						
ANR	28805	Symbol	segment		28737						
ANR	28806	Symbol	segment -> size		28737						
ANR	28807	Symbol	heap -> real_size		28737						
ANR	28808	Symbol	* segment		28737						
ANR	28809	Symbol	* p		28737						
ANR	28810	Symbol	heap		28737						
ANR	28811	Symbol	& ( * p ) -> next_segment		28737						
ANR	28812	Symbol	* heap		28737						
ANR	28813	Symbol	segment -> next_segment		28737						
ANR	28814	Function	zend_mm_free_cache	932:0:26938:28234							
ANR	28815	FunctionDef	zend_mm_free_cache (zend_mm_heap * heap)		28814	0					
ANR	28816	CompoundStatement		933:0:26989:28234	28814	0					
ANR	28817	IdentifierDeclStatement	int i ;	934:1:26992:26997	28814	0	True				
ANR	28818	IdentifierDecl	i		28814	0					
ANR	28819	IdentifierDeclType	int		28814	0					
ANR	28820	Identifier	i		28814	1					
ANR	28821	ForStatement	for ( i = 0 ; i < ZEND_MM_NUM_BUCKETS ; i ++ )		28814	1					
ANR	28822	ForInit	i = 0 ;	936:6:27006:27011	28814	0	True				
ANR	28823	AssignmentExpression	i = 0		28814	0		=			
ANR	28824	Identifier	i		28814	0					
ANR	28825	PrimaryExpression	0		28814	1					
ANR	28826	Condition	i < ZEND_MM_NUM_BUCKETS	936:13:27013:27035	28814	1	True				
ANR	28827	RelationalExpression	i < ZEND_MM_NUM_BUCKETS		28814	0		<			
ANR	28828	Identifier	i		28814	0					
ANR	28829	Identifier	ZEND_MM_NUM_BUCKETS		28814	1					
ANR	28830	PostIncDecOperationExpression	i ++	936:38:27038:27040	28814	2	True				
ANR	28831	Identifier	i		28814	0					
ANR	28832	IncDec	++		28814	1					
ANR	28833	CompoundStatement		4:43:53:53	28814	3					
ANR	28834	IfStatement	if ( heap -> cache [ i ] )		28814	0					
ANR	28835	Condition	heap -> cache [ i ]	937:6:27051:27064	28814	0	True				
ANR	28836	ArrayIndexing	heap -> cache [ i ]		28814	0					
ANR	28837	PtrMemberAccess	heap -> cache		28814	0					
ANR	28838	Identifier	heap		28814	0					
ANR	28839	Identifier	cache		28814	1					
ANR	28840	Identifier	i		28814	1					
ANR	28841	CompoundStatement		6:3:82:127	28814	1					
ANR	28842	IdentifierDeclStatement	zend_mm_free_block * mm_block = heap -> cache [ i ] ;	938:3:27072:27117	28814	0	True				
ANR	28843	IdentifierDecl	* mm_block = heap -> cache [ i ]		28814	0					
ANR	28844	IdentifierDeclType	zend_mm_free_block *		28814	0					
ANR	28845	Identifier	mm_block		28814	1					
ANR	28846	AssignmentExpression	* mm_block = heap -> cache [ i ]		28814	2		=			
ANR	28847	Identifier	mm_block		28814	0					
ANR	28848	ArrayIndexing	heap -> cache [ i ]		28814	1					
ANR	28849	PtrMemberAccess	heap -> cache		28814	0					
ANR	28850	Identifier	heap		28814	0					
ANR	28851	Identifier	cache		28814	1					
ANR	28852	Identifier	i		28814	1					
ANR	28853	WhileStatement	while ( mm_block )		28814	1					
ANR	28854	Condition	mm_block	940:10:27130:27137	28814	0	True				
ANR	28855	Identifier	mm_block		28814	0					
ANR	28856	CompoundStatement		11:4:259:315	28814	1					
ANR	28857	IdentifierDeclStatement	size_t size = ZEND_MM_BLOCK_SIZE ( mm_block ) ;	941:4:27146:27188	28814	0	True				
ANR	28858	IdentifierDecl	size = ZEND_MM_BLOCK_SIZE ( mm_block )		28814	0					
ANR	28859	IdentifierDeclType	size_t		28814	0					
ANR	28860	Identifier	size		28814	1					
ANR	28861	AssignmentExpression	size = ZEND_MM_BLOCK_SIZE ( mm_block )		28814	2		=			
ANR	28862	Identifier	size		28814	0					
ANR	28863	CallExpression	ZEND_MM_BLOCK_SIZE ( mm_block )		28814	1					
ANR	28864	Callee	ZEND_MM_BLOCK_SIZE		28814	0					
ANR	28865	Identifier	ZEND_MM_BLOCK_SIZE		28814	0					
ANR	28866	ArgumentList	mm_block		28814	1					
ANR	28867	Argument	mm_block		28814	0					
ANR	28868	Identifier	mm_block		28814	0					
ANR	28869	IdentifierDeclStatement	zend_mm_free_block * q = mm_block -> prev_free_block ;	942:4:27194:27243	28814	1	True				
ANR	28870	IdentifierDecl	* q = mm_block -> prev_free_block		28814	0					
ANR	28871	IdentifierDeclType	zend_mm_free_block *		28814	0					
ANR	28872	Identifier	q		28814	1					
ANR	28873	AssignmentExpression	* q = mm_block -> prev_free_block		28814	2		=			
ANR	28874	Identifier	q		28814	0					
ANR	28875	PtrMemberAccess	mm_block -> prev_free_block		28814	1					
ANR	28876	Identifier	mm_block		28814	0					
ANR	28877	Identifier	prev_free_block		28814	1					
ANR	28878	IdentifierDeclStatement	zend_mm_block * next_block = ZEND_MM_NEXT_BLOCK ( mm_block ) ;	943:4:27249:27305	28814	2	True				
ANR	28879	IdentifierDecl	* next_block = ZEND_MM_NEXT_BLOCK ( mm_block )		28814	0					
ANR	28880	IdentifierDeclType	zend_mm_block *		28814	0					
ANR	28881	Identifier	next_block		28814	1					
ANR	28882	AssignmentExpression	* next_block = ZEND_MM_NEXT_BLOCK ( mm_block )		28814	2		=			
ANR	28883	Identifier	next_block		28814	0					
ANR	28884	CallExpression	ZEND_MM_NEXT_BLOCK ( mm_block )		28814	1					
ANR	28885	Callee	ZEND_MM_NEXT_BLOCK		28814	0					
ANR	28886	Identifier	ZEND_MM_NEXT_BLOCK		28814	0					
ANR	28887	ArgumentList	mm_block		28814	1					
ANR	28888	Argument	mm_block		28814	0					
ANR	28889	Identifier	mm_block		28814	0					
ANR	28890	ExpressionStatement	heap -> cached -= size	945:4:27312:27332	28814	3	True				
ANR	28891	AssignmentExpression	heap -> cached -= size		28814	0		-=			
ANR	28892	PtrMemberAccess	heap -> cached		28814	0					
ANR	28893	Identifier	heap		28814	0					
ANR	28894	Identifier	cached		28814	1					
ANR	28895	Identifier	size		28814	1					
ANR	28896	IfStatement	if ( ZEND_MM_PREV_BLOCK_IS_FREE ( mm_block ) )		28814	4					
ANR	28897	Condition	ZEND_MM_PREV_BLOCK_IS_FREE ( mm_block )	947:8:27343:27378	28814	0	True				
ANR	28898	CallExpression	ZEND_MM_PREV_BLOCK_IS_FREE ( mm_block )		28814	0					
ANR	28899	Callee	ZEND_MM_PREV_BLOCK_IS_FREE		28814	0					
ANR	28900	Identifier	ZEND_MM_PREV_BLOCK_IS_FREE		28814	0					
ANR	28901	ArgumentList	mm_block		28814	1					
ANR	28902	Argument	mm_block		28814	0					
ANR	28903	Identifier	mm_block		28814	0					
ANR	28904	CompoundStatement		15:46:391:391	28814	1					
ANR	28905	ExpressionStatement	mm_block = ( zend_mm_free_block * ) ZEND_MM_PREV_BLOCK ( mm_block )	948:5:27388:27448	28814	0	True				
ANR	28906	AssignmentExpression	mm_block = ( zend_mm_free_block * ) ZEND_MM_PREV_BLOCK ( mm_block )		28814	0		=			
ANR	28907	Identifier	mm_block		28814	0					
ANR	28908	CastExpression	( zend_mm_free_block * ) ZEND_MM_PREV_BLOCK ( mm_block )		28814	1					
ANR	28909	CastTarget	zend_mm_free_block *		28814	0					
ANR	28910	CallExpression	ZEND_MM_PREV_BLOCK ( mm_block )		28814	1					
ANR	28911	Callee	ZEND_MM_PREV_BLOCK		28814	0					
ANR	28912	Identifier	ZEND_MM_PREV_BLOCK		28814	0					
ANR	28913	ArgumentList	mm_block		28814	1					
ANR	28914	Argument	mm_block		28814	0					
ANR	28915	Identifier	mm_block		28814	0					
ANR	28916	ExpressionStatement	size += ZEND_MM_FREE_BLOCK_SIZE ( mm_block )	949:5:27455:27496	28814	1	True				
ANR	28917	AssignmentExpression	size += ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		28814	0		+=			
ANR	28918	Identifier	size		28814	0					
ANR	28919	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( mm_block )		28814	1					
ANR	28920	Callee	ZEND_MM_FREE_BLOCK_SIZE		28814	0					
ANR	28921	Identifier	ZEND_MM_FREE_BLOCK_SIZE		28814	0					
ANR	28922	ArgumentList	mm_block		28814	1					
ANR	28923	Argument	mm_block		28814	0					
ANR	28924	Identifier	mm_block		28814	0					
ANR	28925	ExpressionStatement	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) mm_block )"	950:5:27503:27571	28814	2	True				
ANR	28926	CallExpression	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) mm_block )"		28814	0					
ANR	28927	Callee	zend_mm_remove_from_free_list		28814	0					
ANR	28928	Identifier	zend_mm_remove_from_free_list		28814	0					
ANR	28929	ArgumentList	heap		28814	1					
ANR	28930	Argument	heap		28814	0					
ANR	28931	Identifier	heap		28814	0					
ANR	28932	Argument	( zend_mm_free_block * ) mm_block		28814	1					
ANR	28933	CastExpression	( zend_mm_free_block * ) mm_block		28814	0					
ANR	28934	CastTarget	zend_mm_free_block *		28814	0					
ANR	28935	Identifier	mm_block		28814	1					
ANR	28936	IfStatement	if ( ZEND_MM_IS_FREE_BLOCK ( next_block ) )		28814	5					
ANR	28937	Condition	ZEND_MM_IS_FREE_BLOCK ( next_block )	952:8:27587:27619	28814	0	True				
ANR	28938	CallExpression	ZEND_MM_IS_FREE_BLOCK ( next_block )		28814	0					
ANR	28939	Callee	ZEND_MM_IS_FREE_BLOCK		28814	0					
ANR	28940	Identifier	ZEND_MM_IS_FREE_BLOCK		28814	0					
ANR	28941	ArgumentList	next_block		28814	1					
ANR	28942	Argument	next_block		28814	0					
ANR	28943	Identifier	next_block		28814	0					
ANR	28944	CompoundStatement		20:43:632:632	28814	1					
ANR	28945	ExpressionStatement	size += ZEND_MM_FREE_BLOCK_SIZE ( next_block )	953:5:27629:27672	28814	0	True				
ANR	28946	AssignmentExpression	size += ZEND_MM_FREE_BLOCK_SIZE ( next_block )		28814	0		+=			
ANR	28947	Identifier	size		28814	0					
ANR	28948	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( next_block )		28814	1					
ANR	28949	Callee	ZEND_MM_FREE_BLOCK_SIZE		28814	0					
ANR	28950	Identifier	ZEND_MM_FREE_BLOCK_SIZE		28814	0					
ANR	28951	ArgumentList	next_block		28814	1					
ANR	28952	Argument	next_block		28814	0					
ANR	28953	Identifier	next_block		28814	0					
ANR	28954	ExpressionStatement	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) next_block )"	954:5:27679:27749	28814	1	True				
ANR	28955	CallExpression	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) next_block )"		28814	0					
ANR	28956	Callee	zend_mm_remove_from_free_list		28814	0					
ANR	28957	Identifier	zend_mm_remove_from_free_list		28814	0					
ANR	28958	ArgumentList	heap		28814	1					
ANR	28959	Argument	heap		28814	0					
ANR	28960	Identifier	heap		28814	0					
ANR	28961	Argument	( zend_mm_free_block * ) next_block		28814	1					
ANR	28962	CastExpression	( zend_mm_free_block * ) next_block		28814	0					
ANR	28963	CastTarget	zend_mm_free_block *		28814	0					
ANR	28964	Identifier	next_block		28814	1					
ANR	28965	ExpressionStatement	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_FREE_BLOCK , size )"	956:4:27761:27810	28814	6	True				
ANR	28966	CallExpression	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_FREE_BLOCK , size )"		28814	0					
ANR	28967	Callee	ZEND_MM_BLOCK		28814	0					
ANR	28968	Identifier	ZEND_MM_BLOCK		28814	0					
ANR	28969	ArgumentList	mm_block		28814	1					
ANR	28970	Argument	mm_block		28814	0					
ANR	28971	Identifier	mm_block		28814	0					
ANR	28972	Argument	ZEND_MM_FREE_BLOCK		28814	1					
ANR	28973	Identifier	ZEND_MM_FREE_BLOCK		28814	0					
ANR	28974	Argument	size		28814	2					
ANR	28975	Identifier	size		28814	0					
ANR	28976	IfStatement	if ( ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_NEXT_BLOCK ( mm_block ) ) )		28814	7					
ANR	28977	Condition	ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_NEXT_BLOCK ( mm_block ) )	958:8:27821:27916	28814	0	True				
ANR	28978	AndExpression	ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_NEXT_BLOCK ( mm_block ) )		28814	0		&&			
ANR	28979	CallExpression	ZEND_MM_IS_FIRST_BLOCK ( mm_block )		28814	0					
ANR	28980	Callee	ZEND_MM_IS_FIRST_BLOCK		28814	0					
ANR	28981	Identifier	ZEND_MM_IS_FIRST_BLOCK		28814	0					
ANR	28982	ArgumentList	mm_block		28814	1					
ANR	28983	Argument	mm_block		28814	0					
ANR	28984	Identifier	mm_block		28814	0					
ANR	28985	CallExpression	ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_NEXT_BLOCK ( mm_block ) )		28814	1					
ANR	28986	Callee	ZEND_MM_IS_GUARD_BLOCK		28814	0					
ANR	28987	Identifier	ZEND_MM_IS_GUARD_BLOCK		28814	0					
ANR	28988	ArgumentList	ZEND_MM_NEXT_BLOCK ( mm_block )		28814	1					
ANR	28989	Argument	ZEND_MM_NEXT_BLOCK ( mm_block )		28814	0					
ANR	28990	CallExpression	ZEND_MM_NEXT_BLOCK ( mm_block )		28814	0					
ANR	28991	Callee	ZEND_MM_NEXT_BLOCK		28814	0					
ANR	28992	Identifier	ZEND_MM_NEXT_BLOCK		28814	0					
ANR	28993	ArgumentList	mm_block		28814	1					
ANR	28994	Argument	mm_block		28814	0					
ANR	28995	Identifier	mm_block		28814	0					
ANR	28996	CompoundStatement		27:62:929:929	28814	1					
ANR	28997	ExpressionStatement	"zend_mm_del_segment ( heap , ( zend_mm_segment * ) ( ( char * ) mm_block - ZEND_MM_ALIGNED_SEGMENT_SIZE ) )"	960:5:27926:28022	28814	0	True				
ANR	28998	CallExpression	"zend_mm_del_segment ( heap , ( zend_mm_segment * ) ( ( char * ) mm_block - ZEND_MM_ALIGNED_SEGMENT_SIZE ) )"		28814	0					
ANR	28999	Callee	zend_mm_del_segment		28814	0					
ANR	29000	Identifier	zend_mm_del_segment		28814	0					
ANR	29001	ArgumentList	heap		28814	1					
ANR	29002	Argument	heap		28814	0					
ANR	29003	Identifier	heap		28814	0					
ANR	29004	Argument	( zend_mm_segment * ) ( ( char * ) mm_block - ZEND_MM_ALIGNED_SEGMENT_SIZE )		28814	1					
ANR	29005	CastExpression	( zend_mm_segment * ) ( ( char * ) mm_block - ZEND_MM_ALIGNED_SEGMENT_SIZE )		28814	0					
ANR	29006	CastTarget	zend_mm_segment *		28814	0					
ANR	29007	AdditiveExpression	( char * ) mm_block - ZEND_MM_ALIGNED_SEGMENT_SIZE		28814	1		-			
ANR	29008	CastExpression	( char * ) mm_block		28814	0					
ANR	29009	CastTarget	char *		28814	0					
ANR	29010	Identifier	mm_block		28814	1					
ANR	29011	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		28814	1					
ANR	29012	ElseStatement	else		28814	0					
ANR	29013	CompoundStatement		29:11:1045:1045	28814	0					
ANR	29014	ExpressionStatement	"zend_mm_add_to_free_list ( heap , ( zend_mm_free_block * ) mm_block )"	962:5:28042:28105	28814	0	True				
ANR	29015	CallExpression	"zend_mm_add_to_free_list ( heap , ( zend_mm_free_block * ) mm_block )"		28814	0					
ANR	29016	Callee	zend_mm_add_to_free_list		28814	0					
ANR	29017	Identifier	zend_mm_add_to_free_list		28814	0					
ANR	29018	ArgumentList	heap		28814	1					
ANR	29019	Argument	heap		28814	0					
ANR	29020	Identifier	heap		28814	0					
ANR	29021	Argument	( zend_mm_free_block * ) mm_block		28814	1					
ANR	29022	CastExpression	( zend_mm_free_block * ) mm_block		28814	0					
ANR	29023	CastTarget	zend_mm_free_block *		28814	0					
ANR	29024	Identifier	mm_block		28814	1					
ANR	29025	ExpressionStatement	mm_block = q	965:4:28118:28130	28814	8	True				
ANR	29026	AssignmentExpression	mm_block = q		28814	0		=			
ANR	29027	Identifier	mm_block		28814	0					
ANR	29028	Identifier	q		28814	1					
ANR	29029	ExpressionStatement	heap -> cache [ i ] = NULL	967:3:28140:28161	28814	2	True				
ANR	29030	AssignmentExpression	heap -> cache [ i ] = NULL		28814	0		=			
ANR	29031	ArrayIndexing	heap -> cache [ i ]		28814	0					
ANR	29032	PtrMemberAccess	heap -> cache		28814	0					
ANR	29033	Identifier	heap		28814	0					
ANR	29034	Identifier	cache		28814	1					
ANR	29035	Identifier	i		28814	1					
ANR	29036	Identifier	NULL		28814	1					
ANR	29037	ExpressionStatement	heap -> cache_stat [ i ] . count = 0	969:3:28189:28218	28814	3	True				
ANR	29038	AssignmentExpression	heap -> cache_stat [ i ] . count = 0		28814	0		=			
ANR	29039	MemberAccess	heap -> cache_stat [ i ] . count		28814	0					
ANR	29040	ArrayIndexing	heap -> cache_stat [ i ]		28814	0					
ANR	29041	PtrMemberAccess	heap -> cache_stat		28814	0					
ANR	29042	Identifier	heap		28814	0					
ANR	29043	Identifier	cache_stat		28814	1					
ANR	29044	Identifier	i		28814	1					
ANR	29045	Identifier	count		28814	1					
ANR	29046	PrimaryExpression	0		28814	1					
ANR	29047	ReturnType	static void		28814	1					
ANR	29048	Identifier	zend_mm_free_cache		28814	2					
ANR	29049	ParameterList	zend_mm_heap * heap		28814	3					
ANR	29050	Parameter	zend_mm_heap * heap	932:31:26969:26986	28814	0	True				
ANR	29051	ParameterType	zend_mm_heap *		28814	0					
ANR	29052	Identifier	heap		28814	1					
ANR	29053	CFGEntryNode	ENTRY		28814		True				
ANR	29054	CFGExitNode	EXIT		28814		True				
ANR	29055	Symbol	* * heap		28814						
ANR	29056	Symbol	ZEND_MM_FREE_BLOCK		28814						
ANR	29057	Symbol	heap -> cache_stat [ i ] . count		28814						
ANR	29058	Symbol	* mm_block		28814						
ANR	29059	Symbol	ZEND_MM_PREV_BLOCK		28814						
ANR	29060	Symbol	ZEND_MM_FREE_BLOCK_SIZE		28814						
ANR	29061	Symbol	heap -> cached		28814						
ANR	29062	Symbol	ZEND_MM_IS_FIRST_BLOCK		28814						
ANR	29063	Symbol	heap		28814						
ANR	29064	Symbol	ZEND_MM_BLOCK_SIZE		28814						
ANR	29065	Symbol	* heap -> cache		28814						
ANR	29066	Symbol	next_block		28814						
ANR	29067	Symbol	NULL		28814						
ANR	29068	Symbol	ZEND_MM_PREV_BLOCK_IS_FREE		28814						
ANR	29069	Symbol	i		28814						
ANR	29070	Symbol	ZEND_MM_IS_GUARD_BLOCK		28814						
ANR	29071	Symbol	heap -> cache_stat		28814						
ANR	29072	Symbol	mm_block -> prev_free_block		28814						
ANR	29073	Symbol	ZEND_MM_NUM_BUCKETS		28814						
ANR	29074	Symbol	q		28814						
ANR	29075	Symbol	* i		28814						
ANR	29076	Symbol	size		28814						
ANR	29077	Symbol	ZEND_MM_IS_FREE_BLOCK		28814						
ANR	29078	Symbol	mm_block		28814						
ANR	29079	Symbol	ZEND_MM_NEXT_BLOCK		28814						
ANR	29080	Symbol	ZEND_MM_ALIGNED_SEGMENT_SIZE		28814						
ANR	29081	Symbol	* heap -> cache_stat		28814						
ANR	29082	Symbol	* heap		28814						
ANR	29083	Symbol	heap -> cache		28814						
ANR	29084	Function	zend_mm_random	977:0:28291:29484							
ANR	29085	FunctionDef	"zend_mm_random (unsigned char * buf , size_t size)"		29084	0					
ANR	29086	CompoundStatement		978:0:28361:29484	29084	0					
ANR	29087	IdentifierDeclStatement	size_t i = 0 ;	979:1:28364:28376	29084	0	True				
ANR	29088	IdentifierDecl	i = 0		29084	0					
ANR	29089	IdentifierDeclType	size_t		29084	0					
ANR	29090	Identifier	i		29084	1					
ANR	29091	AssignmentExpression	i = 0		29084	2		=			
ANR	29092	Identifier	i		29084	0					
ANR	29093	PrimaryExpression	0		29084	1					
ANR	29094	IdentifierDeclStatement	unsigned char t ;	980:1:28379:28394	29084	1	True				
ANR	29095	IdentifierDecl	t		29084	0					
ANR	29096	IdentifierDeclType	unsigned char		29084	0					
ANR	29097	Identifier	t		29084	1					
ANR	29098	IdentifierDeclStatement	HCRYPTPROV hCryptProv ;	983:1:28416:28439	29084	2	True				
ANR	29099	IdentifierDecl	hCryptProv		29084	0					
ANR	29100	IdentifierDeclType	HCRYPTPROV		29084	0					
ANR	29101	Identifier	hCryptProv		29084	1					
ANR	29102	IdentifierDeclStatement	int has_context = 0 ;	984:1:28442:28461	29084	3	True				
ANR	29103	IdentifierDecl	has_context = 0		29084	0					
ANR	29104	IdentifierDeclType	int		29084	0					
ANR	29105	Identifier	has_context		29084	1					
ANR	29106	AssignmentExpression	has_context = 0		29084	2		=			
ANR	29107	Identifier	has_context		29084	0					
ANR	29108	PrimaryExpression	0		29084	1					
ANR	29109	IfStatement	"if ( ! CryptAcquireContext ( & hCryptProv , NULL , NULL , PROV_RSA_FULL , 0 ) )"		29084	4					
ANR	29110	Condition	"! CryptAcquireContext ( & hCryptProv , NULL , NULL , PROV_RSA_FULL , 0 )"	986:5:28469:28531	29084	0	True				
ANR	29111	UnaryOperationExpression	"! CryptAcquireContext ( & hCryptProv , NULL , NULL , PROV_RSA_FULL , 0 )"		29084	0					
ANR	29112	UnaryOperator	!		29084	0					
ANR	29113	CallExpression	"CryptAcquireContext ( & hCryptProv , NULL , NULL , PROV_RSA_FULL , 0 )"		29084	1					
ANR	29114	Callee	CryptAcquireContext		29084	0					
ANR	29115	Identifier	CryptAcquireContext		29084	0					
ANR	29116	ArgumentList	& hCryptProv		29084	1					
ANR	29117	Argument	& hCryptProv		29084	0					
ANR	29118	UnaryOperationExpression	& hCryptProv		29084	0					
ANR	29119	UnaryOperator	&		29084	0					
ANR	29120	Identifier	hCryptProv		29084	1					
ANR	29121	Argument	NULL		29084	1					
ANR	29122	Identifier	NULL		29084	0					
ANR	29123	Argument	NULL		29084	2					
ANR	29124	Identifier	NULL		29084	0					
ANR	29125	Argument	PROV_RSA_FULL		29084	3					
ANR	29126	Identifier	PROV_RSA_FULL		29084	0					
ANR	29127	Argument	0		29084	4					
ANR	29128	PrimaryExpression	0		29084	0					
ANR	29129	CompoundStatement		9:70:172:172	29084	1					
ANR	29130	IfStatement	if ( GetLastError ( ) == NTE_BAD_KEYSET )		29084	0					
ANR	29131	Condition	GetLastError ( ) == NTE_BAD_KEYSET	989:6:28643:28674	29084	0	True				
ANR	29132	EqualityExpression	GetLastError ( ) == NTE_BAD_KEYSET		29084	0		==			
ANR	29133	CallExpression	GetLastError ( )		29084	0					
ANR	29134	Callee	GetLastError		29084	0					
ANR	29135	Identifier	GetLastError		29084	0					
ANR	29136	ArgumentList			29084	1					
ANR	29137	Identifier	NTE_BAD_KEYSET		29084	1					
ANR	29138	CompoundStatement		12:40:315:315	29084	1					
ANR	29139	IfStatement	"if ( CryptAcquireContext ( & hCryptProv , NULL , NULL , PROV_RSA_FULL , CRYPT_NEWKEYSET ) )"		29084	0					
ANR	29140	Condition	"CryptAcquireContext ( & hCryptProv , NULL , NULL , PROV_RSA_FULL , CRYPT_NEWKEYSET )"	990:7:28686:28761	29084	0	True				
ANR	29141	CallExpression	"CryptAcquireContext ( & hCryptProv , NULL , NULL , PROV_RSA_FULL , CRYPT_NEWKEYSET )"		29084	0					
ANR	29142	Callee	CryptAcquireContext		29084	0					
ANR	29143	Identifier	CryptAcquireContext		29084	0					
ANR	29144	ArgumentList	& hCryptProv		29084	1					
ANR	29145	Argument	& hCryptProv		29084	0					
ANR	29146	UnaryOperationExpression	& hCryptProv		29084	0					
ANR	29147	UnaryOperator	&		29084	0					
ANR	29148	Identifier	hCryptProv		29084	1					
ANR	29149	Argument	NULL		29084	1					
ANR	29150	Identifier	NULL		29084	0					
ANR	29151	Argument	NULL		29084	2					
ANR	29152	Identifier	NULL		29084	0					
ANR	29153	Argument	PROV_RSA_FULL		29084	3					
ANR	29154	Identifier	PROV_RSA_FULL		29084	0					
ANR	29155	Argument	CRYPT_NEWKEYSET		29084	4					
ANR	29156	Identifier	CRYPT_NEWKEYSET		29084	0					
ANR	29157	CompoundStatement		13:85:402:402	29084	1					
ANR	29158	ExpressionStatement	has_context = 1	991:4:28770:28785	29084	0	True				
ANR	29159	AssignmentExpression	has_context = 1		29084	0		=			
ANR	29160	Identifier	has_context		29084	0					
ANR	29161	PrimaryExpression	1		29084	1					
ANR	29162	ElseStatement	else		29084	0					
ANR	29163	CompoundStatement		17:8:442:442	29084	0					
ANR	29164	ExpressionStatement	has_context = 1	995:2:28808:28823	29084	0	True				
ANR	29165	AssignmentExpression	has_context = 1		29084	0		=			
ANR	29166	Identifier	has_context		29084	0					
ANR	29167	PrimaryExpression	1		29084	1					
ANR	29168	IfStatement	if ( has_context )		29084	5					
ANR	29169	Condition	has_context	997:5:28833:28843	29084	0	True				
ANR	29170	Identifier	has_context		29084	0					
ANR	29171	CompoundStatement		20:18:484:484	29084	1					
ANR	29172	DoStatement	do		29084	0					
ANR	29173	CompoundStatement		22:3:496:544	29084	0					
ANR	29174	IdentifierDeclStatement	"BOOL ret = CryptGenRandom ( hCryptProv , size , buf ) ;"	999:3:28858:28906	29084	0	True				
ANR	29175	IdentifierDecl	"ret = CryptGenRandom ( hCryptProv , size , buf )"		29084	0					
ANR	29176	IdentifierDeclType	BOOL		29084	0					
ANR	29177	Identifier	ret		29084	1					
ANR	29178	AssignmentExpression	"ret = CryptGenRandom ( hCryptProv , size , buf )"		29084	2		=			
ANR	29179	Identifier	ret		29084	0					
ANR	29180	CallExpression	"CryptGenRandom ( hCryptProv , size , buf )"		29084	1					
ANR	29181	Callee	CryptGenRandom		29084	0					
ANR	29182	Identifier	CryptGenRandom		29084	0					
ANR	29183	ArgumentList	hCryptProv		29084	1					
ANR	29184	Argument	hCryptProv		29084	0					
ANR	29185	Identifier	hCryptProv		29084	0					
ANR	29186	Argument	size		29084	1					
ANR	29187	Identifier	size		29084	0					
ANR	29188	Argument	buf		29084	2					
ANR	29189	Identifier	buf		29084	0					
ANR	29190	ExpressionStatement	"CryptReleaseContext ( hCryptProv , 0 )"	1000:3:28911:28945	29084	1	True				
ANR	29191	CallExpression	"CryptReleaseContext ( hCryptProv , 0 )"		29084	0					
ANR	29192	Callee	CryptReleaseContext		29084	0					
ANR	29193	Identifier	CryptReleaseContext		29084	0					
ANR	29194	ArgumentList	hCryptProv		29084	1					
ANR	29195	Argument	hCryptProv		29084	0					
ANR	29196	Identifier	hCryptProv		29084	0					
ANR	29197	Argument	0		29084	1					
ANR	29198	PrimaryExpression	0		29084	0					
ANR	29199	IfStatement	if ( ret )		29084	2					
ANR	29200	Condition	ret	1001:7:28954:28956	29084	0	True				
ANR	29201	Identifier	ret		29084	0					
ANR	29202	CompoundStatement		24:12:597:597	29084	1					
ANR	29203	WhileStatement	while ( i < size && buf [ i ] != 0 )		29084	0					
ANR	29204	Condition	i < size && buf [ i ] != 0	1002:11:28972:28994	29084	0	True				
ANR	29205	AndExpression	i < size && buf [ i ] != 0		29084	0		&&			
ANR	29206	RelationalExpression	i < size		29084	0		<			
ANR	29207	Identifier	i		29084	0					
ANR	29208	Identifier	size		29084	1					
ANR	29209	EqualityExpression	buf [ i ] != 0		29084	1		!=			
ANR	29210	ArrayIndexing	buf [ i ]		29084	0					
ANR	29211	Identifier	buf		29084	0					
ANR	29212	Identifier	i		29084	1					
ANR	29213	PrimaryExpression	0		29084	1					
ANR	29214	CompoundStatement		25:36:635:635	29084	1					
ANR	29215	ExpressionStatement	i ++	1003:5:29004:29007	29084	0	True				
ANR	29216	PostIncDecOperationExpression	i ++		29084	0					
ANR	29217	Identifier	i		29084	0					
ANR	29218	IncDec	++		29084	1					
ANR	29219	IfStatement	if ( i == size )		29084	1					
ANR	29220	Condition	i == size	1005:8:29023:29031	29084	0	True				
ANR	29221	EqualityExpression	i == size		29084	0		==			
ANR	29222	Identifier	i		29084	0					
ANR	29223	Identifier	size		29084	1					
ANR	29224	CompoundStatement		28:19:672:672	29084	1					
ANR	29225	ReturnStatement	return ;	1006:5:29041:29047	29084	0	True				
ANR	29226	Condition	0	1009:11:29073:29073	29084	1	True				
ANR	29227	PrimaryExpression	0		29084	0					
ANR	29228	ExpressionStatement	t = ( unsigned char ) getpid ( )	1027:1:29335:29362	29084	6	True				
ANR	29229	AssignmentExpression	t = ( unsigned char ) getpid ( )		29084	0		=			
ANR	29230	Identifier	t		29084	0					
ANR	29231	CastExpression	( unsigned char ) getpid ( )		29084	1					
ANR	29232	CastTarget	unsigned char		29084	0					
ANR	29233	CallExpression	getpid ( )		29084	1					
ANR	29234	Callee	getpid		29084	0					
ANR	29235	Identifier	getpid		29084	0					
ANR	29236	ArgumentList			29084	1					
ANR	29237	WhileStatement	while ( i < size )		29084	7					
ANR	29238	Condition	i < size	1028:8:29372:29379	29084	0	True				
ANR	29239	RelationalExpression	i < size		29084	0		<			
ANR	29240	Identifier	i		29084	0					
ANR	29241	Identifier	size		29084	1					
ANR	29242	CompoundStatement		51:18:1020:1020	29084	1					
ANR	29243	DoStatement	do		29084	0					
ANR	29244	CompoundStatement		52:5:1027:1027	29084	0					
ANR	29245	ExpressionStatement	buf [ i ] = ( ( unsigned char ) rand ( ) ) ^ t	1030:3:29394:29430	29084	0	True				
ANR	29246	AssignmentExpression	buf [ i ] = ( ( unsigned char ) rand ( ) ) ^ t		29084	0		=			
ANR	29247	ArrayIndexing	buf [ i ]		29084	0					
ANR	29248	Identifier	buf		29084	0					
ANR	29249	Identifier	i		29084	1					
ANR	29250	ExclusiveOrExpression	( ( unsigned char ) rand ( ) ) ^ t		29084	1		^			
ANR	29251	CastExpression	( unsigned char ) rand ( )		29084	0					
ANR	29252	CastTarget	unsigned char		29084	0					
ANR	29253	CallExpression	rand ( )		29084	1					
ANR	29254	Callee	rand		29084	0					
ANR	29255	Identifier	rand		29084	0					
ANR	29256	ArgumentList			29084	1					
ANR	29257	Identifier	t		29084	1					
ANR	29258	Condition	buf [ i ] == 0	1031:11:29443:29453	29084	1	True				
ANR	29259	EqualityExpression	buf [ i ] == 0		29084	0		==			
ANR	29260	ArrayIndexing	buf [ i ]		29084	0					
ANR	29261	Identifier	buf		29084	0					
ANR	29262	Identifier	i		29084	1					
ANR	29263	PrimaryExpression	0		29084	1					
ANR	29264	ExpressionStatement	t = buf [ i ++ ] << 1	1032:2:29459:29476	29084	1	True				
ANR	29265	AssignmentExpression	t = buf [ i ++ ] << 1		29084	0		=			
ANR	29266	Identifier	t		29084	0					
ANR	29267	ShiftExpression	buf [ i ++ ] << 1		29084	1		<<			
ANR	29268	ArrayIndexing	buf [ i ++ ]		29084	0					
ANR	29269	Identifier	buf		29084	0					
ANR	29270	PostIncDecOperationExpression	i ++		29084	1					
ANR	29271	Identifier	i		29084	0					
ANR	29272	IncDec	++		29084	1					
ANR	29273	PrimaryExpression	1		29084	1					
ANR	29274	ReturnType	static void		29084	1					
ANR	29275	Identifier	zend_mm_random		29084	2					
ANR	29276	ParameterList	"unsigned char * buf , size_t size"		29084	3					
ANR	29277	Parameter	unsigned char * buf	977:27:28318:28335	29084	0	True				
ANR	29278	ParameterType	unsigned char *		29084	0					
ANR	29279	Identifier	buf		29084	1					
ANR	29280	Parameter	size_t size	977:47:28338:28348	29084	1	True				
ANR	29281	ParameterType	size_t		29084	0					
ANR	29282	Identifier	size		29084	1					
ANR	29283	CFGEntryNode	ENTRY		29084		True				
ANR	29284	CFGExitNode	EXIT		29084		True				
ANR	29285	Symbol	ret		29084						
ANR	29286	Symbol	* buf		29084						
ANR	29287	Symbol	NULL		29084						
ANR	29288	Symbol	CryptAcquireContext		29084						
ANR	29289	Symbol	i		29084						
ANR	29290	Symbol	has_context		29084						
ANR	29291	Symbol	PROV_RSA_FULL		29084						
ANR	29292	Symbol	CryptGenRandom		29084						
ANR	29293	Symbol	NTE_BAD_KEYSET		29084						
ANR	29294	Symbol	rand		29084						
ANR	29295	Symbol	hCryptProv		29084						
ANR	29296	Symbol	buf		29084						
ANR	29297	Symbol	* i		29084						
ANR	29298	Symbol	size		29084						
ANR	29299	Symbol	t		29084						
ANR	29300	Symbol	GetLastError		29084						
ANR	29301	Symbol	& hCryptProv		29084						
ANR	29302	Symbol	CRYPT_NEWKEYSET		29084						
ANR	29303	Symbol	getpid		29084						
ANR	29304	Function	zend_mm_startup_ex	1042:0:29667:33540							
ANR	29305	FunctionDef	"zend_mm_startup_ex (const zend_mm_mem_handlers * handlers , size_t block_size , size_t reserve_size , int internal , void * params)"		29304	0					
ANR	29306	CompoundStatement		1043:0:29815:33540	29304	0					
ANR	29307	IdentifierDeclStatement	zend_mm_storage * storage ;	1044:1:29818:29842	29304	0	True				
ANR	29308	IdentifierDecl	* storage		29304	0					
ANR	29309	IdentifierDeclType	zend_mm_storage *		29304	0					
ANR	29310	Identifier	storage		29304	1					
ANR	29311	IdentifierDeclStatement	zend_mm_heap * heap ;	1045:1:29845:29866	29304	1	True				
ANR	29312	IdentifierDecl	* heap		29304	0					
ANR	29313	IdentifierDeclType	zend_mm_heap *		29304	0					
ANR	29314	Identifier	heap		29304	1					
ANR	29315	IdentifierDeclStatement	int i ;	1048:1:29876:29881	29304	2	True				
ANR	29316	IdentifierDecl	i		29304	0					
ANR	29317	IdentifierDeclType	int		29304	0					
ANR	29318	Identifier	i		29304	1					
ANR	29319	ExpressionStatement	"printf ( ""ZEND_MM_ALIGNMENT=%d\\n"" , ZEND_MM_ALIGNMENT )"	1050:1:29885:29936	29304	3	True				
ANR	29320	CallExpression	"printf ( ""ZEND_MM_ALIGNMENT=%d\\n"" , ZEND_MM_ALIGNMENT )"		29304	0					
ANR	29321	Callee	printf		29304	0					
ANR	29322	Identifier	printf		29304	0					
ANR	29323	ArgumentList	"""ZEND_MM_ALIGNMENT=%d\\n"""		29304	1					
ANR	29324	Argument	"""ZEND_MM_ALIGNMENT=%d\\n"""		29304	0					
ANR	29325	PrimaryExpression	"""ZEND_MM_ALIGNMENT=%d\\n"""		29304	0					
ANR	29326	Argument	ZEND_MM_ALIGNMENT		29304	1					
ANR	29327	Identifier	ZEND_MM_ALIGNMENT		29304	0					
ANR	29328	ExpressionStatement	"printf ( ""ZEND_MM_ALIGNMENT_LOG2=%d\\n"" , ZEND_MM_ALIGNMENT_LOG2 )"	1051:1:29939:30000	29304	4	True				
ANR	29329	CallExpression	"printf ( ""ZEND_MM_ALIGNMENT_LOG2=%d\\n"" , ZEND_MM_ALIGNMENT_LOG2 )"		29304	0					
ANR	29330	Callee	printf		29304	0					
ANR	29331	Identifier	printf		29304	0					
ANR	29332	ArgumentList	"""ZEND_MM_ALIGNMENT_LOG2=%d\\n"""		29304	1					
ANR	29333	Argument	"""ZEND_MM_ALIGNMENT_LOG2=%d\\n"""		29304	0					
ANR	29334	PrimaryExpression	"""ZEND_MM_ALIGNMENT_LOG2=%d\\n"""		29304	0					
ANR	29335	Argument	ZEND_MM_ALIGNMENT_LOG2		29304	1					
ANR	29336	Identifier	ZEND_MM_ALIGNMENT_LOG2		29304	0					
ANR	29337	ExpressionStatement	"printf ( ""ZEND_MM_MIN_SIZE=%d\\n"" , ZEND_MM_MIN_SIZE )"	1052:1:30003:30052	29304	5	True				
ANR	29338	CallExpression	"printf ( ""ZEND_MM_MIN_SIZE=%d\\n"" , ZEND_MM_MIN_SIZE )"		29304	0					
ANR	29339	Callee	printf		29304	0					
ANR	29340	Identifier	printf		29304	0					
ANR	29341	ArgumentList	"""ZEND_MM_MIN_SIZE=%d\\n"""		29304	1					
ANR	29342	Argument	"""ZEND_MM_MIN_SIZE=%d\\n"""		29304	0					
ANR	29343	PrimaryExpression	"""ZEND_MM_MIN_SIZE=%d\\n"""		29304	0					
ANR	29344	Argument	ZEND_MM_MIN_SIZE		29304	1					
ANR	29345	Identifier	ZEND_MM_MIN_SIZE		29304	0					
ANR	29346	ExpressionStatement	"printf ( ""ZEND_MM_MAX_SMALL_SIZE=%d\\n"" , ZEND_MM_MAX_SMALL_SIZE )"	1053:1:30055:30116	29304	6	True				
ANR	29347	CallExpression	"printf ( ""ZEND_MM_MAX_SMALL_SIZE=%d\\n"" , ZEND_MM_MAX_SMALL_SIZE )"		29304	0					
ANR	29348	Callee	printf		29304	0					
ANR	29349	Identifier	printf		29304	0					
ANR	29350	ArgumentList	"""ZEND_MM_MAX_SMALL_SIZE=%d\\n"""		29304	1					
ANR	29351	Argument	"""ZEND_MM_MAX_SMALL_SIZE=%d\\n"""		29304	0					
ANR	29352	PrimaryExpression	"""ZEND_MM_MAX_SMALL_SIZE=%d\\n"""		29304	0					
ANR	29353	Argument	ZEND_MM_MAX_SMALL_SIZE		29304	1					
ANR	29354	Identifier	ZEND_MM_MAX_SMALL_SIZE		29304	0					
ANR	29355	ExpressionStatement	"printf ( ""ZEND_MM_ALIGNED_HEADER_SIZE=%d\\n"" , ZEND_MM_ALIGNED_HEADER_SIZE )"	1054:1:30119:30190	29304	7	True				
ANR	29356	CallExpression	"printf ( ""ZEND_MM_ALIGNED_HEADER_SIZE=%d\\n"" , ZEND_MM_ALIGNED_HEADER_SIZE )"		29304	0					
ANR	29357	Callee	printf		29304	0					
ANR	29358	Identifier	printf		29304	0					
ANR	29359	ArgumentList	"""ZEND_MM_ALIGNED_HEADER_SIZE=%d\\n"""		29304	1					
ANR	29360	Argument	"""ZEND_MM_ALIGNED_HEADER_SIZE=%d\\n"""		29304	0					
ANR	29361	PrimaryExpression	"""ZEND_MM_ALIGNED_HEADER_SIZE=%d\\n"""		29304	0					
ANR	29362	Argument	ZEND_MM_ALIGNED_HEADER_SIZE		29304	1					
ANR	29363	Identifier	ZEND_MM_ALIGNED_HEADER_SIZE		29304	0					
ANR	29364	ExpressionStatement	"printf ( ""ZEND_MM_ALIGNED_FREE_HEADER_SIZE=%d\\n"" , ZEND_MM_ALIGNED_FREE_HEADER_SIZE )"	1055:1:30193:30274	29304	8	True				
ANR	29365	CallExpression	"printf ( ""ZEND_MM_ALIGNED_FREE_HEADER_SIZE=%d\\n"" , ZEND_MM_ALIGNED_FREE_HEADER_SIZE )"		29304	0					
ANR	29366	Callee	printf		29304	0					
ANR	29367	Identifier	printf		29304	0					
ANR	29368	ArgumentList	"""ZEND_MM_ALIGNED_FREE_HEADER_SIZE=%d\\n"""		29304	1					
ANR	29369	Argument	"""ZEND_MM_ALIGNED_FREE_HEADER_SIZE=%d\\n"""		29304	0					
ANR	29370	PrimaryExpression	"""ZEND_MM_ALIGNED_FREE_HEADER_SIZE=%d\\n"""		29304	0					
ANR	29371	Argument	ZEND_MM_ALIGNED_FREE_HEADER_SIZE		29304	1					
ANR	29372	Identifier	ZEND_MM_ALIGNED_FREE_HEADER_SIZE		29304	0					
ANR	29373	ExpressionStatement	"printf ( ""ZEND_MM_MIN_ALLOC_BLOCK_SIZE=%d\\n"" , ZEND_MM_MIN_ALLOC_BLOCK_SIZE )"	1056:1:30277:30350	29304	9	True				
ANR	29374	CallExpression	"printf ( ""ZEND_MM_MIN_ALLOC_BLOCK_SIZE=%d\\n"" , ZEND_MM_MIN_ALLOC_BLOCK_SIZE )"		29304	0					
ANR	29375	Callee	printf		29304	0					
ANR	29376	Identifier	printf		29304	0					
ANR	29377	ArgumentList	"""ZEND_MM_MIN_ALLOC_BLOCK_SIZE=%d\\n"""		29304	1					
ANR	29378	Argument	"""ZEND_MM_MIN_ALLOC_BLOCK_SIZE=%d\\n"""		29304	0					
ANR	29379	PrimaryExpression	"""ZEND_MM_MIN_ALLOC_BLOCK_SIZE=%d\\n"""		29304	0					
ANR	29380	Argument	ZEND_MM_MIN_ALLOC_BLOCK_SIZE		29304	1					
ANR	29381	Identifier	ZEND_MM_MIN_ALLOC_BLOCK_SIZE		29304	0					
ANR	29382	ExpressionStatement	"printf ( ""ZEND_MM_ALIGNED_MIN_HEADER_SIZE=%d\\n"" , ZEND_MM_ALIGNED_MIN_HEADER_SIZE )"	1057:1:30353:30432	29304	10	True				
ANR	29383	CallExpression	"printf ( ""ZEND_MM_ALIGNED_MIN_HEADER_SIZE=%d\\n"" , ZEND_MM_ALIGNED_MIN_HEADER_SIZE )"		29304	0					
ANR	29384	Callee	printf		29304	0					
ANR	29385	Identifier	printf		29304	0					
ANR	29386	ArgumentList	"""ZEND_MM_ALIGNED_MIN_HEADER_SIZE=%d\\n"""		29304	1					
ANR	29387	Argument	"""ZEND_MM_ALIGNED_MIN_HEADER_SIZE=%d\\n"""		29304	0					
ANR	29388	PrimaryExpression	"""ZEND_MM_ALIGNED_MIN_HEADER_SIZE=%d\\n"""		29304	0					
ANR	29389	Argument	ZEND_MM_ALIGNED_MIN_HEADER_SIZE		29304	1					
ANR	29390	Identifier	ZEND_MM_ALIGNED_MIN_HEADER_SIZE		29304	0					
ANR	29391	ExpressionStatement	"printf ( ""ZEND_MM_ALIGNED_SEGMENT_SIZE=%d\\n"" , ZEND_MM_ALIGNED_SEGMENT_SIZE )"	1058:1:30435:30508	29304	11	True				
ANR	29392	CallExpression	"printf ( ""ZEND_MM_ALIGNED_SEGMENT_SIZE=%d\\n"" , ZEND_MM_ALIGNED_SEGMENT_SIZE )"		29304	0					
ANR	29393	Callee	printf		29304	0					
ANR	29394	Identifier	printf		29304	0					
ANR	29395	ArgumentList	"""ZEND_MM_ALIGNED_SEGMENT_SIZE=%d\\n"""		29304	1					
ANR	29396	Argument	"""ZEND_MM_ALIGNED_SEGMENT_SIZE=%d\\n"""		29304	0					
ANR	29397	PrimaryExpression	"""ZEND_MM_ALIGNED_SEGMENT_SIZE=%d\\n"""		29304	0					
ANR	29398	Argument	ZEND_MM_ALIGNED_SEGMENT_SIZE		29304	1					
ANR	29399	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		29304	0					
ANR	29400	ForStatement	for ( i = 0 ; i < ZEND_MM_MAX_SMALL_SIZE ; i ++ )		29304	12					
ANR	29401	ForInit	i = 0 ;	1059:6:30516:30521	29304	0	True				
ANR	29402	AssignmentExpression	i = 0		29304	0		=			
ANR	29403	Identifier	i		29304	0					
ANR	29404	PrimaryExpression	0		29304	1					
ANR	29405	Condition	i < ZEND_MM_MAX_SMALL_SIZE	1059:13:30523:30548	29304	1	True				
ANR	29406	RelationalExpression	i < ZEND_MM_MAX_SMALL_SIZE		29304	0		<			
ANR	29407	Identifier	i		29304	0					
ANR	29408	Identifier	ZEND_MM_MAX_SMALL_SIZE		29304	1					
ANR	29409	PostIncDecOperationExpression	i ++	1059:41:30551:30553	29304	2	True				
ANR	29410	Identifier	i		29304	0					
ANR	29411	IncDec	++		29304	1					
ANR	29412	CompoundStatement		17:46:740:740	29304	3					
ANR	29413	ExpressionStatement	"printf ( ""%3d%c: %3ld %d %2ld\\n"" , i , ( i == ZEND_MM_MIN_SIZE ? '*' : ' ' ) , ( long ) ZEND_MM_TRUE_SIZE ( i ) , ZEND_MM_SMALL_SIZE ( ZEND_MM_TRUE_SIZE ( i ) ) , ( long ) ZEND_MM_BUCKET_INDEX ( ZEND_MM_TRUE_SIZE ( i ) ) )"	1060:2:30560:30747	29304	0	True				
ANR	29414	CallExpression	"printf ( ""%3d%c: %3ld %d %2ld\\n"" , i , ( i == ZEND_MM_MIN_SIZE ? '*' : ' ' ) , ( long ) ZEND_MM_TRUE_SIZE ( i ) , ZEND_MM_SMALL_SIZE ( ZEND_MM_TRUE_SIZE ( i ) ) , ( long ) ZEND_MM_BUCKET_INDEX ( ZEND_MM_TRUE_SIZE ( i ) ) )"		29304	0					
ANR	29415	Callee	printf		29304	0					
ANR	29416	Identifier	printf		29304	0					
ANR	29417	ArgumentList	"""%3d%c: %3ld %d %2ld\\n"""		29304	1					
ANR	29418	Argument	"""%3d%c: %3ld %d %2ld\\n"""		29304	0					
ANR	29419	PrimaryExpression	"""%3d%c: %3ld %d %2ld\\n"""		29304	0					
ANR	29420	Argument	i		29304	1					
ANR	29421	Identifier	i		29304	0					
ANR	29422	Argument	i == ZEND_MM_MIN_SIZE ? '*' : ' '		29304	2					
ANR	29423	ConditionalExpression	i == ZEND_MM_MIN_SIZE ? '*' : ' '		29304	0					
ANR	29424	Condition	i == ZEND_MM_MIN_SIZE		29304	0					
ANR	29425	EqualityExpression	i == ZEND_MM_MIN_SIZE		29304	0		==			
ANR	29426	Identifier	i		29304	0					
ANR	29427	Identifier	ZEND_MM_MIN_SIZE		29304	1					
ANR	29428	PrimaryExpression	'*'		29304	1					
ANR	29429	PrimaryExpression	' '		29304	2					
ANR	29430	Argument	( long ) ZEND_MM_TRUE_SIZE ( i )		29304	3					
ANR	29431	CastExpression	( long ) ZEND_MM_TRUE_SIZE ( i )		29304	0					
ANR	29432	CastTarget	long		29304	0					
ANR	29433	CallExpression	ZEND_MM_TRUE_SIZE ( i )		29304	1					
ANR	29434	Callee	ZEND_MM_TRUE_SIZE		29304	0					
ANR	29435	Identifier	ZEND_MM_TRUE_SIZE		29304	0					
ANR	29436	ArgumentList	i		29304	1					
ANR	29437	Argument	i		29304	0					
ANR	29438	Identifier	i		29304	0					
ANR	29439	Argument	ZEND_MM_SMALL_SIZE ( ZEND_MM_TRUE_SIZE ( i ) )		29304	4					
ANR	29440	CallExpression	ZEND_MM_SMALL_SIZE ( ZEND_MM_TRUE_SIZE ( i ) )		29304	0					
ANR	29441	Callee	ZEND_MM_SMALL_SIZE		29304	0					
ANR	29442	Identifier	ZEND_MM_SMALL_SIZE		29304	0					
ANR	29443	ArgumentList	ZEND_MM_TRUE_SIZE ( i )		29304	1					
ANR	29444	Argument	ZEND_MM_TRUE_SIZE ( i )		29304	0					
ANR	29445	CallExpression	ZEND_MM_TRUE_SIZE ( i )		29304	0					
ANR	29446	Callee	ZEND_MM_TRUE_SIZE		29304	0					
ANR	29447	Identifier	ZEND_MM_TRUE_SIZE		29304	0					
ANR	29448	ArgumentList	i		29304	1					
ANR	29449	Argument	i		29304	0					
ANR	29450	Identifier	i		29304	0					
ANR	29451	Argument	( long ) ZEND_MM_BUCKET_INDEX ( ZEND_MM_TRUE_SIZE ( i ) )		29304	5					
ANR	29452	CastExpression	( long ) ZEND_MM_BUCKET_INDEX ( ZEND_MM_TRUE_SIZE ( i ) )		29304	0					
ANR	29453	CastTarget	long		29304	0					
ANR	29454	CallExpression	ZEND_MM_BUCKET_INDEX ( ZEND_MM_TRUE_SIZE ( i ) )		29304	1					
ANR	29455	Callee	ZEND_MM_BUCKET_INDEX		29304	0					
ANR	29456	Identifier	ZEND_MM_BUCKET_INDEX		29304	0					
ANR	29457	ArgumentList	ZEND_MM_TRUE_SIZE ( i )		29304	1					
ANR	29458	Argument	ZEND_MM_TRUE_SIZE ( i )		29304	0					
ANR	29459	CallExpression	ZEND_MM_TRUE_SIZE ( i )		29304	0					
ANR	29460	Callee	ZEND_MM_TRUE_SIZE		29304	0					
ANR	29461	Identifier	ZEND_MM_TRUE_SIZE		29304	0					
ANR	29462	ArgumentList	i		29304	1					
ANR	29463	Argument	i		29304	0					
ANR	29464	Identifier	i		29304	0					
ANR	29465	ExpressionStatement	exit ( 0 )	1062:1:30753:30760	29304	13	True				
ANR	29466	CallExpression	exit ( 0 )		29304	0					
ANR	29467	Callee	exit		29304	0					
ANR	29468	Identifier	exit		29304	0					
ANR	29469	ArgumentList	0		29304	1					
ANR	29470	Argument	0		29304	0					
ANR	29471	PrimaryExpression	0		29304	0					
ANR	29472	IfStatement	if ( _mem_block_start_magic == 0 )		29304	14					
ANR	29473	Condition	_mem_block_start_magic == 0	1066:5:30803:30829	29304	0	True				
ANR	29474	EqualityExpression	_mem_block_start_magic == 0		29304	0		==			
ANR	29475	Identifier	_mem_block_start_magic		29304	0					
ANR	29476	PrimaryExpression	0		29304	1					
ANR	29477	CompoundStatement		24:34:1016:1016	29304	1					
ANR	29478	ExpressionStatement	"zend_mm_random ( ( unsigned char * ) & _mem_block_start_magic , sizeof ( _mem_block_start_magic ) )"	1067:2:30836:30923	29304	0	True				
ANR	29479	CallExpression	"zend_mm_random ( ( unsigned char * ) & _mem_block_start_magic , sizeof ( _mem_block_start_magic ) )"		29304	0					
ANR	29480	Callee	zend_mm_random		29304	0					
ANR	29481	Identifier	zend_mm_random		29304	0					
ANR	29482	ArgumentList	( unsigned char * ) & _mem_block_start_magic		29304	1					
ANR	29483	Argument	( unsigned char * ) & _mem_block_start_magic		29304	0					
ANR	29484	CastExpression	( unsigned char * ) & _mem_block_start_magic		29304	0					
ANR	29485	CastTarget	unsigned char *		29304	0					
ANR	29486	UnaryOperationExpression	& _mem_block_start_magic		29304	1					
ANR	29487	UnaryOperator	&		29304	0					
ANR	29488	Identifier	_mem_block_start_magic		29304	1					
ANR	29489	Argument	sizeof ( _mem_block_start_magic )		29304	1					
ANR	29490	SizeofExpression	sizeof ( _mem_block_start_magic )		29304	0					
ANR	29491	Sizeof	sizeof		29304	0					
ANR	29492	SizeofOperand	_mem_block_start_magic		29304	1					
ANR	29493	IfStatement	if ( _mem_block_end_magic == 0 )		29304	15					
ANR	29494	Condition	_mem_block_end_magic == 0	1069:5:30933:30957	29304	0	True				
ANR	29495	EqualityExpression	_mem_block_end_magic == 0		29304	0		==			
ANR	29496	Identifier	_mem_block_end_magic		29304	0					
ANR	29497	PrimaryExpression	0		29304	1					
ANR	29498	CompoundStatement		27:32:1144:1144	29304	1					
ANR	29499	ExpressionStatement	"zend_mm_random ( ( unsigned char * ) & _mem_block_end_magic , sizeof ( _mem_block_end_magic ) )"	1070:2:30964:31047	29304	0	True				
ANR	29500	CallExpression	"zend_mm_random ( ( unsigned char * ) & _mem_block_end_magic , sizeof ( _mem_block_end_magic ) )"		29304	0					
ANR	29501	Callee	zend_mm_random		29304	0					
ANR	29502	Identifier	zend_mm_random		29304	0					
ANR	29503	ArgumentList	( unsigned char * ) & _mem_block_end_magic		29304	1					
ANR	29504	Argument	( unsigned char * ) & _mem_block_end_magic		29304	0					
ANR	29505	CastExpression	( unsigned char * ) & _mem_block_end_magic		29304	0					
ANR	29506	CastTarget	unsigned char *		29304	0					
ANR	29507	UnaryOperationExpression	& _mem_block_end_magic		29304	1					
ANR	29508	UnaryOperator	&		29304	0					
ANR	29509	Identifier	_mem_block_end_magic		29304	1					
ANR	29510	Argument	sizeof ( _mem_block_end_magic )		29304	1					
ANR	29511	SizeofExpression	sizeof ( _mem_block_end_magic )		29304	0					
ANR	29512	Sizeof	sizeof		29304	0					
ANR	29513	SizeofOperand	_mem_block_end_magic		29304	1					
ANR	29514	IfStatement	if ( _zend_mm_cookie == 0 )		29304	16					
ANR	29515	Condition	_zend_mm_cookie == 0	1074:5:31084:31103	29304	0	True				
ANR	29516	EqualityExpression	_zend_mm_cookie == 0		29304	0		==			
ANR	29517	Identifier	_zend_mm_cookie		29304	0					
ANR	29518	PrimaryExpression	0		29304	1					
ANR	29519	CompoundStatement		32:27:1290:1290	29304	1					
ANR	29520	ExpressionStatement	"zend_mm_random ( ( unsigned char * ) & _zend_mm_cookie , sizeof ( _zend_mm_cookie ) )"	1075:2:31110:31183	29304	0	True				
ANR	29521	CallExpression	"zend_mm_random ( ( unsigned char * ) & _zend_mm_cookie , sizeof ( _zend_mm_cookie ) )"		29304	0					
ANR	29522	Callee	zend_mm_random		29304	0					
ANR	29523	Identifier	zend_mm_random		29304	0					
ANR	29524	ArgumentList	( unsigned char * ) & _zend_mm_cookie		29304	1					
ANR	29525	Argument	( unsigned char * ) & _zend_mm_cookie		29304	0					
ANR	29526	CastExpression	( unsigned char * ) & _zend_mm_cookie		29304	0					
ANR	29527	CastTarget	unsigned char *		29304	0					
ANR	29528	UnaryOperationExpression	& _zend_mm_cookie		29304	1					
ANR	29529	UnaryOperator	&		29304	0					
ANR	29530	Identifier	_zend_mm_cookie		29304	1					
ANR	29531	Argument	sizeof ( _zend_mm_cookie )		29304	1					
ANR	29532	SizeofExpression	sizeof ( _zend_mm_cookie )		29304	0					
ANR	29533	Sizeof	sizeof		29304	0					
ANR	29534	SizeofOperand	_zend_mm_cookie		29304	1					
ANR	29535	IfStatement	if ( zend_mm_low_bit ( block_size ) != zend_mm_high_bit ( block_size ) )		29304	17					
ANR	29536	Condition	zend_mm_low_bit ( block_size ) != zend_mm_high_bit ( block_size )	1079:5:31201:31259	29304	0	True				
ANR	29537	EqualityExpression	zend_mm_low_bit ( block_size ) != zend_mm_high_bit ( block_size )		29304	0		!=			
ANR	29538	CallExpression	zend_mm_low_bit ( block_size )		29304	0					
ANR	29539	Callee	zend_mm_low_bit		29304	0					
ANR	29540	Identifier	zend_mm_low_bit		29304	0					
ANR	29541	ArgumentList	block_size		29304	1					
ANR	29542	Argument	block_size		29304	0					
ANR	29543	Identifier	block_size		29304	0					
ANR	29544	CallExpression	zend_mm_high_bit ( block_size )		29304	1					
ANR	29545	Callee	zend_mm_high_bit		29304	0					
ANR	29546	Identifier	zend_mm_high_bit		29304	0					
ANR	29547	ArgumentList	block_size		29304	1					
ANR	29548	Argument	block_size		29304	0					
ANR	29549	Identifier	block_size		29304	0					
ANR	29550	CompoundStatement		37:66:1446:1446	29304	1					
ANR	29551	ExpressionStatement	"fprintf ( stderr , ""'block_size' must be a power of two\\n"" )"	1080:2:31266:31322	29304	0	True				
ANR	29552	CallExpression	"fprintf ( stderr , ""'block_size' must be a power of two\\n"" )"		29304	0					
ANR	29553	Callee	fprintf		29304	0					
ANR	29554	Identifier	fprintf		29304	0					
ANR	29555	ArgumentList	stderr		29304	1					
ANR	29556	Argument	stderr		29304	0					
ANR	29557	Identifier	stderr		29304	0					
ANR	29558	Argument	"""'block_size' must be a power of two\\n"""		29304	1					
ANR	29559	PrimaryExpression	"""'block_size' must be a power of two\\n"""		29304	0					
ANR	29560	ExpressionStatement	fflush ( stderr )	1083:2:31392:31406	29304	1	True				
ANR	29561	CallExpression	fflush ( stderr )		29304	0					
ANR	29562	Callee	fflush		29304	0					
ANR	29563	Identifier	fflush		29304	0					
ANR	29564	ArgumentList	stderr		29304	1					
ANR	29565	Argument	stderr		29304	0					
ANR	29566	Identifier	stderr		29304	0					
ANR	29567	ExpressionStatement	exit ( 255 )	1085:2:31417:31426	29304	2	True				
ANR	29568	CallExpression	exit ( 255 )		29304	0					
ANR	29569	Callee	exit		29304	0					
ANR	29570	Identifier	exit		29304	0					
ANR	29571	ArgumentList	255		29304	1					
ANR	29572	Argument	255		29304	0					
ANR	29573	PrimaryExpression	255		29304	0					
ANR	29574	ExpressionStatement	storage = handlers -> init ( params )	1087:1:31432:31464	29304	18	True				
ANR	29575	AssignmentExpression	storage = handlers -> init ( params )		29304	0		=			
ANR	29576	Identifier	storage		29304	0					
ANR	29577	CallExpression	handlers -> init ( params )		29304	1					
ANR	29578	Callee	handlers -> init		29304	0					
ANR	29579	PtrMemberAccess	handlers -> init		29304	0					
ANR	29580	Identifier	handlers		29304	0					
ANR	29581	Identifier	init		29304	1					
ANR	29582	ArgumentList	params		29304	1					
ANR	29583	Argument	params		29304	0					
ANR	29584	Identifier	params		29304	0					
ANR	29585	IfStatement	if ( ! storage )		29304	19					
ANR	29586	Condition	! storage	1088:5:31471:31478	29304	0	True				
ANR	29587	UnaryOperationExpression	! storage		29304	0					
ANR	29588	UnaryOperator	!		29304	0					
ANR	29589	Identifier	storage		29304	1					
ANR	29590	CompoundStatement		46:15:1665:1665	29304	1					
ANR	29591	ExpressionStatement	"fprintf ( stderr , ""Cannot initialize zend_mm storage [%s]\\n"" , handlers -> name )"	1089:2:31485:31560	29304	0	True				
ANR	29592	CallExpression	"fprintf ( stderr , ""Cannot initialize zend_mm storage [%s]\\n"" , handlers -> name )"		29304	0					
ANR	29593	Callee	fprintf		29304	0					
ANR	29594	Identifier	fprintf		29304	0					
ANR	29595	ArgumentList	stderr		29304	1					
ANR	29596	Argument	stderr		29304	0					
ANR	29597	Identifier	stderr		29304	0					
ANR	29598	Argument	"""Cannot initialize zend_mm storage [%s]\\n"""		29304	1					
ANR	29599	PrimaryExpression	"""Cannot initialize zend_mm storage [%s]\\n"""		29304	0					
ANR	29600	Argument	handlers -> name		29304	2					
ANR	29601	PtrMemberAccess	handlers -> name		29304	0					
ANR	29602	Identifier	handlers		29304	0					
ANR	29603	Identifier	name		29304	1					
ANR	29604	ExpressionStatement	fflush ( stderr )	1092:2:31630:31644	29304	1	True				
ANR	29605	CallExpression	fflush ( stderr )		29304	0					
ANR	29606	Callee	fflush		29304	0					
ANR	29607	Identifier	fflush		29304	0					
ANR	29608	ArgumentList	stderr		29304	1					
ANR	29609	Argument	stderr		29304	0					
ANR	29610	Identifier	stderr		29304	0					
ANR	29611	ExpressionStatement	exit ( 255 )	1094:2:31655:31664	29304	2	True				
ANR	29612	CallExpression	exit ( 255 )		29304	0					
ANR	29613	Callee	exit		29304	0					
ANR	29614	Identifier	exit		29304	0					
ANR	29615	ArgumentList	255		29304	1					
ANR	29616	Argument	255		29304	0					
ANR	29617	PrimaryExpression	255		29304	0					
ANR	29618	ExpressionStatement	storage -> handlers = handlers	1096:1:31670:31698	29304	20	True				
ANR	29619	AssignmentExpression	storage -> handlers = handlers		29304	0		=			
ANR	29620	PtrMemberAccess	storage -> handlers		29304	0					
ANR	29621	Identifier	storage		29304	0					
ANR	29622	Identifier	handlers		29304	1					
ANR	29623	Identifier	handlers		29304	1					
ANR	29624	ExpressionStatement	heap = malloc ( sizeof ( struct _zend_mm_heap ) )	1098:1:31702:31745	29304	21	True				
ANR	29625	AssignmentExpression	heap = malloc ( sizeof ( struct _zend_mm_heap ) )		29304	0		=			
ANR	29626	Identifier	heap		29304	0					
ANR	29627	CallExpression	malloc ( sizeof ( struct _zend_mm_heap ) )		29304	1					
ANR	29628	Callee	malloc		29304	0					
ANR	29629	Identifier	malloc		29304	0					
ANR	29630	ArgumentList	sizeof ( struct _zend_mm_heap )		29304	1					
ANR	29631	Argument	sizeof ( struct _zend_mm_heap )		29304	0					
ANR	29632	SizeofExpression	sizeof ( struct _zend_mm_heap )		29304	0					
ANR	29633	Sizeof	sizeof		29304	0					
ANR	29634	SizeofOperand	struct _zend_mm_heap		29304	1					
ANR	29635	IfStatement	if ( heap == NULL )		29304	22					
ANR	29636	Condition	heap == NULL	1099:5:31752:31763	29304	0	True				
ANR	29637	EqualityExpression	heap == NULL		29304	0		==			
ANR	29638	Identifier	heap		29304	0					
ANR	29639	Identifier	NULL		29304	1					
ANR	29640	CompoundStatement		57:19:1950:1950	29304	1					
ANR	29641	ExpressionStatement	"fprintf ( stderr , ""Cannot allocate heap for zend_mm storage [%s]\\n"" , handlers -> name )"	1100:2:31770:31852	29304	0	True				
ANR	29642	CallExpression	"fprintf ( stderr , ""Cannot allocate heap for zend_mm storage [%s]\\n"" , handlers -> name )"		29304	0					
ANR	29643	Callee	fprintf		29304	0					
ANR	29644	Identifier	fprintf		29304	0					
ANR	29645	ArgumentList	stderr		29304	1					
ANR	29646	Argument	stderr		29304	0					
ANR	29647	Identifier	stderr		29304	0					
ANR	29648	Argument	"""Cannot allocate heap for zend_mm storage [%s]\\n"""		29304	1					
ANR	29649	PrimaryExpression	"""Cannot allocate heap for zend_mm storage [%s]\\n"""		29304	0					
ANR	29650	Argument	handlers -> name		29304	2					
ANR	29651	PtrMemberAccess	handlers -> name		29304	0					
ANR	29652	Identifier	handlers		29304	0					
ANR	29653	Identifier	name		29304	1					
ANR	29654	ExpressionStatement	fflush ( stderr )	1102:2:31873:31887	29304	1	True				
ANR	29655	CallExpression	fflush ( stderr )		29304	0					
ANR	29656	Callee	fflush		29304	0					
ANR	29657	Identifier	fflush		29304	0					
ANR	29658	ArgumentList	stderr		29304	1					
ANR	29659	Argument	stderr		29304	0					
ANR	29660	Identifier	stderr		29304	0					
ANR	29661	ExpressionStatement	exit ( 255 )	1104:2:31898:31907	29304	2	True				
ANR	29662	CallExpression	exit ( 255 )		29304	0					
ANR	29663	Callee	exit		29304	0					
ANR	29664	Identifier	exit		29304	0					
ANR	29665	ArgumentList	255		29304	1					
ANR	29666	Argument	255		29304	0					
ANR	29667	PrimaryExpression	255		29304	0					
ANR	29668	ExpressionStatement	heap -> storage = storage	1106:1:31913:31936	29304	23	True				
ANR	29669	AssignmentExpression	heap -> storage = storage		29304	0		=			
ANR	29670	PtrMemberAccess	heap -> storage		29304	0					
ANR	29671	Identifier	heap		29304	0					
ANR	29672	Identifier	storage		29304	1					
ANR	29673	Identifier	storage		29304	1					
ANR	29674	ExpressionStatement	heap -> block_size = block_size	1107:1:31939:31968	29304	24	True				
ANR	29675	AssignmentExpression	heap -> block_size = block_size		29304	0		=			
ANR	29676	PtrMemberAccess	heap -> block_size		29304	0					
ANR	29677	Identifier	heap		29304	0					
ANR	29678	Identifier	block_size		29304	1					
ANR	29679	Identifier	block_size		29304	1					
ANR	29680	ExpressionStatement	heap -> compact_size = 0	1108:1:31971:31993	29304	25	True				
ANR	29681	AssignmentExpression	heap -> compact_size = 0		29304	0		=			
ANR	29682	PtrMemberAccess	heap -> compact_size		29304	0					
ANR	29683	Identifier	heap		29304	0					
ANR	29684	Identifier	compact_size		29304	1					
ANR	29685	PrimaryExpression	0		29304	1					
ANR	29686	ExpressionStatement	heap -> segments_list = NULL	1109:1:31996:32022	29304	26	True				
ANR	29687	AssignmentExpression	heap -> segments_list = NULL		29304	0		=			
ANR	29688	PtrMemberAccess	heap -> segments_list		29304	0					
ANR	29689	Identifier	heap		29304	0					
ANR	29690	Identifier	segments_list		29304	1					
ANR	29691	Identifier	NULL		29304	1					
ANR	29692	ExpressionStatement	zend_mm_init ( heap )	1110:1:32025:32043	29304	27	True				
ANR	29693	CallExpression	zend_mm_init ( heap )		29304	0					
ANR	29694	Callee	zend_mm_init		29304	0					
ANR	29695	Identifier	zend_mm_init		29304	0					
ANR	29696	ArgumentList	heap		29304	1					
ANR	29697	Argument	heap		29304	0					
ANR	29698	Identifier	heap		29304	0					
ANR	29699	Statement	if	1111:2:32047:32048	29304	28	True				
ANR	29700	IdentifierDeclStatement	"ZEND_MM_CACHE_STAT memset ( heap -> cache_stat , 0 , sizeof ( heap -> cache_stat ) ) ;"	1111:5:32050:32123	29304	29	True				
ANR	29701	IdentifierDecl	"memset ( heap -> cache_stat , 0 , sizeof ( heap -> cache_stat ) )"		29304	0					
ANR	29702	IdentifierDeclType	ZEND_MM_CACHE_STAT		29304	0					
ANR	29703	Identifier	memset		29304	1					
ANR	29704	Expression	"heap -> cache_stat , 0 , sizeof ( heap -> cache_stat )"		29304	2					
ANR	29705	PtrMemberAccess	heap -> cache_stat		29304	0					
ANR	29706	Identifier	heap		29304	0					
ANR	29707	Identifier	cache_stat		29304	1					
ANR	29708	Expression	"0 , sizeof ( heap -> cache_stat )"		29304	1					
ANR	29709	PrimaryExpression	0		29304	0					
ANR	29710	SizeofExpression	sizeof ( heap -> cache_stat )		29304	1					
ANR	29711	Sizeof	sizeof		29304	0					
ANR	29712	PtrMemberAccess	heap -> cache_stat		29304	1					
ANR	29713	Identifier	heap		29304	0					
ANR	29714	Identifier	cache_stat		29304	1					
ANR	29715	Statement	endif	1113:2:32127:32131	29304	30	True				
ANR	29716	ExpressionStatement	heap -> use_zend_alloc = 1	1115:1:32135:32159	29304	31	True				
ANR	29717	AssignmentExpression	heap -> use_zend_alloc = 1		29304	0		=			
ANR	29718	PtrMemberAccess	heap -> use_zend_alloc		29304	0					
ANR	29719	Identifier	heap		29304	0					
ANR	29720	Identifier	use_zend_alloc		29304	1					
ANR	29721	PrimaryExpression	1		29304	1					
ANR	29722	ExpressionStatement	heap -> real_size = 0	1116:1:32162:32181	29304	32	True				
ANR	29723	AssignmentExpression	heap -> real_size = 0		29304	0		=			
ANR	29724	PtrMemberAccess	heap -> real_size		29304	0					
ANR	29725	Identifier	heap		29304	0					
ANR	29726	Identifier	real_size		29304	1					
ANR	29727	PrimaryExpression	0		29304	1					
ANR	29728	ExpressionStatement	heap -> overflow = 0	1117:1:32184:32202	29304	33	True				
ANR	29729	AssignmentExpression	heap -> overflow = 0		29304	0		=			
ANR	29730	PtrMemberAccess	heap -> overflow		29304	0					
ANR	29731	Identifier	heap		29304	0					
ANR	29732	Identifier	overflow		29304	1					
ANR	29733	PrimaryExpression	0		29304	1					
ANR	29734	ExpressionStatement	heap -> real_peak = 0	1118:1:32205:32224	29304	34	True				
ANR	29735	AssignmentExpression	heap -> real_peak = 0		29304	0		=			
ANR	29736	PtrMemberAccess	heap -> real_peak		29304	0					
ANR	29737	Identifier	heap		29304	0					
ANR	29738	Identifier	real_peak		29304	1					
ANR	29739	PrimaryExpression	0		29304	1					
ANR	29740	ExpressionStatement	heap -> limit = ZEND_MM_LONG_CONST ( 1 ) << ( ZEND_MM_NUM_BUCKETS - 2 )	1119:1:32227:32287	29304	35	True				
ANR	29741	AssignmentExpression	heap -> limit = ZEND_MM_LONG_CONST ( 1 ) << ( ZEND_MM_NUM_BUCKETS - 2 )		29304	0		=			
ANR	29742	PtrMemberAccess	heap -> limit		29304	0					
ANR	29743	Identifier	heap		29304	0					
ANR	29744	Identifier	limit		29304	1					
ANR	29745	ShiftExpression	ZEND_MM_LONG_CONST ( 1 ) << ( ZEND_MM_NUM_BUCKETS - 2 )		29304	1		<<			
ANR	29746	CallExpression	ZEND_MM_LONG_CONST ( 1 )		29304	0					
ANR	29747	Callee	ZEND_MM_LONG_CONST		29304	0					
ANR	29748	Identifier	ZEND_MM_LONG_CONST		29304	0					
ANR	29749	ArgumentList	1		29304	1					
ANR	29750	Argument	1		29304	0					
ANR	29751	PrimaryExpression	1		29304	0					
ANR	29752	AdditiveExpression	ZEND_MM_NUM_BUCKETS - 2		29304	1		-			
ANR	29753	Identifier	ZEND_MM_NUM_BUCKETS		29304	0					
ANR	29754	PrimaryExpression	2		29304	1					
ANR	29755	ExpressionStatement	heap -> size = 0	1120:1:32290:32304	29304	36	True				
ANR	29756	AssignmentExpression	heap -> size = 0		29304	0		=			
ANR	29757	PtrMemberAccess	heap -> size		29304	0					
ANR	29758	Identifier	heap		29304	0					
ANR	29759	Identifier	size		29304	1					
ANR	29760	PrimaryExpression	0		29304	1					
ANR	29761	ExpressionStatement	heap -> peak = 0	1121:1:32307:32321	29304	37	True				
ANR	29762	AssignmentExpression	heap -> peak = 0		29304	0		=			
ANR	29763	PtrMemberAccess	heap -> peak		29304	0					
ANR	29764	Identifier	heap		29304	0					
ANR	29765	Identifier	peak		29304	1					
ANR	29766	PrimaryExpression	0		29304	1					
ANR	29767	ExpressionStatement	heap -> internal = internal	1122:1:32324:32349	29304	38	True				
ANR	29768	AssignmentExpression	heap -> internal = internal		29304	0		=			
ANR	29769	PtrMemberAccess	heap -> internal		29304	0					
ANR	29770	Identifier	heap		29304	0					
ANR	29771	Identifier	internal		29304	1					
ANR	29772	Identifier	internal		29304	1					
ANR	29773	ExpressionStatement	heap -> reserve = NULL	1123:1:32352:32372	29304	39	True				
ANR	29774	AssignmentExpression	heap -> reserve = NULL		29304	0		=			
ANR	29775	PtrMemberAccess	heap -> reserve		29304	0					
ANR	29776	Identifier	heap		29304	0					
ANR	29777	Identifier	reserve		29304	1					
ANR	29778	Identifier	NULL		29304	1					
ANR	29779	ExpressionStatement	heap -> reserve_size = reserve_size	1124:1:32375:32408	29304	40	True				
ANR	29780	AssignmentExpression	heap -> reserve_size = reserve_size		29304	0		=			
ANR	29781	PtrMemberAccess	heap -> reserve_size		29304	0					
ANR	29782	Identifier	heap		29304	0					
ANR	29783	Identifier	reserve_size		29304	1					
ANR	29784	Identifier	reserve_size		29304	1					
ANR	29785	IfStatement	if ( reserve_size > 0 )		29304	41					
ANR	29786	Condition	reserve_size > 0	1125:5:32415:32430	29304	0	True				
ANR	29787	RelationalExpression	reserve_size > 0		29304	0		>			
ANR	29788	Identifier	reserve_size		29304	0					
ANR	29789	PrimaryExpression	0		29304	1					
ANR	29790	CompoundStatement		83:23:2617:2617	29304	1					
ANR	29791	Statement	heap	1126:2:32437:32440	29304	0	True				
ANR	29792	Statement	->	1126:6:32441:32442	29304	1	True				
ANR	29793	Statement	reserve	1126:8:32443:32449	29304	2	True				
ANR	29794	Statement	=	1126:16:32451:32451	29304	3	True				
ANR	29795	Statement	_zend_mm_alloc_int	1126:18:32453:32470	29304	4	True				
ANR	29796	Statement	(	1126:36:32471:32471	29304	5	True				
ANR	29797	Statement	heap	1126:37:32472:32475	29304	6	True				
ANR	29798	Statement	","	1126:41:32476:32476	29304	7	True				
ANR	29799	Statement	reserve_size	1126:43:32478:32489	29304	8	True				
ANR	29800	Statement	ZEND_FILE_LINE_CC	1126:56:32491:32507	29304	9	True				
ANR	29801	Statement	ZEND_FILE_LINE_EMPTY_CC	1126:74:32509:32531	29304	10	True				
ANR	29802	Statement	)	1126:97:32532:32532	29304	11	True				
ANR	29803	ExpressionStatement		1126:98:32533:32533	29304	12	True				
ANR	29804	IfStatement	if ( internal )		29304	42					
ANR	29805	Condition	internal	1128:5:32543:32550	29304	0	True				
ANR	29806	Identifier	internal		29304	0					
ANR	29807	CompoundStatement		88:2:2750:2782	29304	1					
ANR	29808	IdentifierDeclStatement	int i ;	1129:2:32557:32562	29304	0	True				
ANR	29809	IdentifierDecl	i		29304	0					
ANR	29810	IdentifierDeclType	int		29304	0					
ANR	29811	Identifier	i		29304	1					
ANR	29812	IdentifierDeclStatement	"zend_mm_free_block * p , * q , * orig ;"	1130:2:32566:32598	29304	1	True				
ANR	29813	IdentifierDecl	* p		29304	0					
ANR	29814	IdentifierDeclType	zend_mm_free_block *		29304	0					
ANR	29815	Identifier	p		29304	1					
ANR	29816	IdentifierDecl	* q		29304	1					
ANR	29817	IdentifierDeclType	zend_mm_free_block *		29304	0					
ANR	29818	Identifier	q		29304	1					
ANR	29819	IdentifierDecl	* orig		29304	2					
ANR	29820	IdentifierDeclType	zend_mm_free_block *		29304	0					
ANR	29821	Identifier	orig		29304	1					
ANR	29822	Statement	zend_mm_heap	1131:2:32602:32613	29304	2	True				
ANR	29823	Statement	*	1131:15:32615:32615	29304	3	True				
ANR	29824	Statement	mm_heap	1131:16:32616:32622	29304	4	True				
ANR	29825	Statement	=	1131:24:32624:32624	29304	5	True				
ANR	29826	Statement	_zend_mm_alloc_int	1131:26:32626:32643	29304	6	True				
ANR	29827	Statement	(	1131:44:32644:32644	29304	7	True				
ANR	29828	Statement	heap	1131:45:32645:32648	29304	8	True				
ANR	29829	Statement	","	1131:49:32649:32649	29304	9	True				
ANR	29830	Statement	sizeof	1131:51:32651:32656	29304	10	True				
ANR	29831	Statement	(	1131:57:32657:32657	29304	11	True				
ANR	29832	Statement	zend_mm_heap	1131:58:32658:32669	29304	12	True				
ANR	29833	Statement	)	1131:70:32670:32670	29304	13	True				
ANR	29834	Statement	ZEND_FILE_LINE_CC	1131:73:32673:32689	29304	14	True				
ANR	29835	Statement	ZEND_FILE_LINE_EMPTY_CC	1131:91:32691:32713	29304	15	True				
ANR	29836	Statement	)	1131:114:32714:32714	29304	16	True				
ANR	29837	ExpressionStatement		1131:115:32715:32715	29304	17	True				
ANR	29838	ExpressionStatement	* mm_heap = * heap	1133:2:32720:32736	29304	18	True				
ANR	29839	AssignmentExpression	* mm_heap = * heap		29304	0		=			
ANR	29840	UnaryOperationExpression	* mm_heap		29304	0					
ANR	29841	UnaryOperator	*		29304	0					
ANR	29842	Identifier	mm_heap		29304	1					
ANR	29843	UnaryOperationExpression	* heap		29304	1					
ANR	29844	UnaryOperator	*		29304	0					
ANR	29845	Identifier	heap		29304	1					
ANR	29846	ExpressionStatement	"p = ZEND_MM_SMALL_FREE_BUCKET ( mm_heap , 0 )"	1135:2:32741:32782	29304	19	True				
ANR	29847	AssignmentExpression	"p = ZEND_MM_SMALL_FREE_BUCKET ( mm_heap , 0 )"		29304	0		=			
ANR	29848	Identifier	p		29304	0					
ANR	29849	CallExpression	"ZEND_MM_SMALL_FREE_BUCKET ( mm_heap , 0 )"		29304	1					
ANR	29850	Callee	ZEND_MM_SMALL_FREE_BUCKET		29304	0					
ANR	29851	Identifier	ZEND_MM_SMALL_FREE_BUCKET		29304	0					
ANR	29852	ArgumentList	mm_heap		29304	1					
ANR	29853	Argument	mm_heap		29304	0					
ANR	29854	Identifier	mm_heap		29304	0					
ANR	29855	Argument	0		29304	1					
ANR	29856	PrimaryExpression	0		29304	0					
ANR	29857	ExpressionStatement	"orig = ZEND_MM_SMALL_FREE_BUCKET ( heap , 0 )"	1136:2:32786:32827	29304	20	True				
ANR	29858	AssignmentExpression	"orig = ZEND_MM_SMALL_FREE_BUCKET ( heap , 0 )"		29304	0		=			
ANR	29859	Identifier	orig		29304	0					
ANR	29860	CallExpression	"ZEND_MM_SMALL_FREE_BUCKET ( heap , 0 )"		29304	1					
ANR	29861	Callee	ZEND_MM_SMALL_FREE_BUCKET		29304	0					
ANR	29862	Identifier	ZEND_MM_SMALL_FREE_BUCKET		29304	0					
ANR	29863	ArgumentList	heap		29304	1					
ANR	29864	Argument	heap		29304	0					
ANR	29865	Identifier	heap		29304	0					
ANR	29866	Argument	0		29304	1					
ANR	29867	PrimaryExpression	0		29304	0					
ANR	29868	ForStatement	for ( i = 0 ; i < ZEND_MM_NUM_BUCKETS ; i ++ )		29304	21					
ANR	29869	ForInit	i = 0 ;	1137:7:32836:32841	29304	0	True				
ANR	29870	AssignmentExpression	i = 0		29304	0		=			
ANR	29871	Identifier	i		29304	0					
ANR	29872	PrimaryExpression	0		29304	1					
ANR	29873	Condition	i < ZEND_MM_NUM_BUCKETS	1137:14:32843:32865	29304	1	True				
ANR	29874	RelationalExpression	i < ZEND_MM_NUM_BUCKETS		29304	0		<			
ANR	29875	Identifier	i		29304	0					
ANR	29876	Identifier	ZEND_MM_NUM_BUCKETS		29304	1					
ANR	29877	PostIncDecOperationExpression	i ++	1137:39:32868:32870	29304	2	True				
ANR	29878	Identifier	i		29304	0					
ANR	29879	IncDec	++		29304	1					
ANR	29880	CompoundStatement		95:44:3057:3057	29304	3					
ANR	29881	ExpressionStatement	q = p	1138:3:32878:32883	29304	0	True				
ANR	29882	AssignmentExpression	q = p		29304	0		=			
ANR	29883	Identifier	q		29304	0					
ANR	29884	Identifier	p		29304	1					
ANR	29885	WhileStatement	while ( q -> prev_free_block != orig )		29304	1					
ANR	29886	Condition	q -> prev_free_block != orig	1139:10:32895:32920	29304	0	True				
ANR	29887	EqualityExpression	q -> prev_free_block != orig		29304	0		!=			
ANR	29888	PtrMemberAccess	q -> prev_free_block		29304	0					
ANR	29889	Identifier	q		29304	0					
ANR	29890	Identifier	prev_free_block		29304	1					
ANR	29891	Identifier	orig		29304	1					
ANR	29892	CompoundStatement		97:38:3107:3107	29304	1					
ANR	29893	ExpressionStatement	q = q -> prev_free_block	1140:4:32929:32951	29304	0	True				
ANR	29894	AssignmentExpression	q = q -> prev_free_block		29304	0		=			
ANR	29895	Identifier	q		29304	0					
ANR	29896	PtrMemberAccess	q -> prev_free_block		29304	1					
ANR	29897	Identifier	q		29304	0					
ANR	29898	Identifier	prev_free_block		29304	1					
ANR	29899	ExpressionStatement	q -> prev_free_block = p	1142:3:32961:32983	29304	2	True				
ANR	29900	AssignmentExpression	q -> prev_free_block = p		29304	0		=			
ANR	29901	PtrMemberAccess	q -> prev_free_block		29304	0					
ANR	29902	Identifier	q		29304	0					
ANR	29903	Identifier	prev_free_block		29304	1					
ANR	29904	Identifier	p		29304	1					
ANR	29905	ExpressionStatement	q = p	1143:3:32988:32993	29304	3	True				
ANR	29906	AssignmentExpression	q = p		29304	0		=			
ANR	29907	Identifier	q		29304	0					
ANR	29908	Identifier	p		29304	1					
ANR	29909	WhileStatement	while ( q -> next_free_block != orig )		29304	4					
ANR	29910	Condition	q -> next_free_block != orig	1144:10:33005:33030	29304	0	True				
ANR	29911	EqualityExpression	q -> next_free_block != orig		29304	0		!=			
ANR	29912	PtrMemberAccess	q -> next_free_block		29304	0					
ANR	29913	Identifier	q		29304	0					
ANR	29914	Identifier	next_free_block		29304	1					
ANR	29915	Identifier	orig		29304	1					
ANR	29916	CompoundStatement		102:38:3217:3217	29304	1					
ANR	29917	ExpressionStatement	q = q -> next_free_block	1145:4:33039:33061	29304	0	True				
ANR	29918	AssignmentExpression	q = q -> next_free_block		29304	0		=			
ANR	29919	Identifier	q		29304	0					
ANR	29920	PtrMemberAccess	q -> next_free_block		29304	1					
ANR	29921	Identifier	q		29304	0					
ANR	29922	Identifier	next_free_block		29304	1					
ANR	29923	ExpressionStatement	q -> next_free_block = p	1147:3:33071:33093	29304	5	True				
ANR	29924	AssignmentExpression	q -> next_free_block = p		29304	0		=			
ANR	29925	PtrMemberAccess	q -> next_free_block		29304	0					
ANR	29926	Identifier	q		29304	0					
ANR	29927	Identifier	next_free_block		29304	1					
ANR	29928	Identifier	p		29304	1					
ANR	29929	ExpressionStatement	p = ( zend_mm_free_block * ) ( ( char * ) p + sizeof ( zend_mm_free_block * ) * 2 )	1148:3:33098:33167	29304	6	True				
ANR	29930	AssignmentExpression	p = ( zend_mm_free_block * ) ( ( char * ) p + sizeof ( zend_mm_free_block * ) * 2 )		29304	0		=			
ANR	29931	Identifier	p		29304	0					
ANR	29932	CastExpression	( zend_mm_free_block * ) ( ( char * ) p + sizeof ( zend_mm_free_block * ) * 2 )		29304	1					
ANR	29933	CastTarget	zend_mm_free_block *		29304	0					
ANR	29934	AdditiveExpression	( char * ) p + sizeof ( zend_mm_free_block * ) * 2		29304	1		+			
ANR	29935	CastExpression	( char * ) p		29304	0					
ANR	29936	CastTarget	char *		29304	0					
ANR	29937	Identifier	p		29304	1					
ANR	29938	MultiplicativeExpression	sizeof ( zend_mm_free_block * ) * 2		29304	1		*			
ANR	29939	SizeofExpression	sizeof ( zend_mm_free_block * )		29304	0					
ANR	29940	Sizeof	sizeof		29304	0					
ANR	29941	SizeofOperand	zend_mm_free_block *		29304	1					
ANR	29942	PrimaryExpression	2		29304	1					
ANR	29943	ExpressionStatement	orig = ( zend_mm_free_block * ) ( ( char * ) orig + sizeof ( zend_mm_free_block * ) * 2 )	1149:3:33172:33247	29304	7	True				
ANR	29944	AssignmentExpression	orig = ( zend_mm_free_block * ) ( ( char * ) orig + sizeof ( zend_mm_free_block * ) * 2 )		29304	0		=			
ANR	29945	Identifier	orig		29304	0					
ANR	29946	CastExpression	( zend_mm_free_block * ) ( ( char * ) orig + sizeof ( zend_mm_free_block * ) * 2 )		29304	1					
ANR	29947	CastTarget	zend_mm_free_block *		29304	0					
ANR	29948	AdditiveExpression	( char * ) orig + sizeof ( zend_mm_free_block * ) * 2		29304	1		+			
ANR	29949	CastExpression	( char * ) orig		29304	0					
ANR	29950	CastTarget	char *		29304	0					
ANR	29951	Identifier	orig		29304	1					
ANR	29952	MultiplicativeExpression	sizeof ( zend_mm_free_block * ) * 2		29304	1		*			
ANR	29953	SizeofExpression	sizeof ( zend_mm_free_block * )		29304	0					
ANR	29954	Sizeof	sizeof		29304	0					
ANR	29955	SizeofOperand	zend_mm_free_block *		29304	1					
ANR	29956	PrimaryExpression	2		29304	1					
ANR	29957	IfStatement	if ( mm_heap -> large_free_buckets [ i ] )		29304	8					
ANR	29958	Condition	mm_heap -> large_free_buckets [ i ]	1150:7:33256:33285	29304	0	True				
ANR	29959	ArrayIndexing	mm_heap -> large_free_buckets [ i ]		29304	0					
ANR	29960	PtrMemberAccess	mm_heap -> large_free_buckets		29304	0					
ANR	29961	Identifier	mm_heap		29304	0					
ANR	29962	Identifier	large_free_buckets		29304	1					
ANR	29963	Identifier	i		29304	1					
ANR	29964	CompoundStatement		108:39:3472:3472	29304	1					
ANR	29965	ExpressionStatement	mm_heap -> large_free_buckets [ i ] -> parent = & mm_heap -> large_free_buckets [ i ]	1151:4:33294:33366	29304	0	True				
ANR	29966	AssignmentExpression	mm_heap -> large_free_buckets [ i ] -> parent = & mm_heap -> large_free_buckets [ i ]		29304	0		=			
ANR	29967	PtrMemberAccess	mm_heap -> large_free_buckets [ i ] -> parent		29304	0					
ANR	29968	ArrayIndexing	mm_heap -> large_free_buckets [ i ]		29304	0					
ANR	29969	PtrMemberAccess	mm_heap -> large_free_buckets		29304	0					
ANR	29970	Identifier	mm_heap		29304	0					
ANR	29971	Identifier	large_free_buckets		29304	1					
ANR	29972	Identifier	i		29304	1					
ANR	29973	Identifier	parent		29304	1					
ANR	29974	UnaryOperationExpression	& mm_heap -> large_free_buckets [ i ]		29304	1					
ANR	29975	UnaryOperator	&		29304	0					
ANR	29976	ArrayIndexing	mm_heap -> large_free_buckets [ i ]		29304	1					
ANR	29977	PtrMemberAccess	mm_heap -> large_free_buckets		29304	0					
ANR	29978	Identifier	mm_heap		29304	0					
ANR	29979	Identifier	large_free_buckets		29304	1					
ANR	29980	Identifier	i		29304	1					
ANR	29981	ExpressionStatement	mm_heap -> rest_buckets [ 0 ] = mm_heap -> rest_buckets [ 1 ] = ZEND_MM_REST_BUCKET ( mm_heap )	1154:2:33379:33461	29304	22	True				
ANR	29982	AssignmentExpression	mm_heap -> rest_buckets [ 0 ] = mm_heap -> rest_buckets [ 1 ] = ZEND_MM_REST_BUCKET ( mm_heap )		29304	0		=			
ANR	29983	ArrayIndexing	mm_heap -> rest_buckets [ 0 ]		29304	0					
ANR	29984	PtrMemberAccess	mm_heap -> rest_buckets		29304	0					
ANR	29985	Identifier	mm_heap		29304	0					
ANR	29986	Identifier	rest_buckets		29304	1					
ANR	29987	PrimaryExpression	0		29304	1					
ANR	29988	AssignmentExpression	mm_heap -> rest_buckets [ 1 ] = ZEND_MM_REST_BUCKET ( mm_heap )		29304	1		=			
ANR	29989	ArrayIndexing	mm_heap -> rest_buckets [ 1 ]		29304	0					
ANR	29990	PtrMemberAccess	mm_heap -> rest_buckets		29304	0					
ANR	29991	Identifier	mm_heap		29304	0					
ANR	29992	Identifier	rest_buckets		29304	1					
ANR	29993	PrimaryExpression	1		29304	1					
ANR	29994	CallExpression	ZEND_MM_REST_BUCKET ( mm_heap )		29304	1					
ANR	29995	Callee	ZEND_MM_REST_BUCKET		29304	0					
ANR	29996	Identifier	ZEND_MM_REST_BUCKET		29304	0					
ANR	29997	ArgumentList	mm_heap		29304	1					
ANR	29998	Argument	mm_heap		29304	0					
ANR	29999	Identifier	mm_heap		29304	0					
ANR	30000	ExpressionStatement	mm_heap -> rest_count = 0	1155:2:33465:33488	29304	23	True				
ANR	30001	AssignmentExpression	mm_heap -> rest_count = 0		29304	0		=			
ANR	30002	PtrMemberAccess	mm_heap -> rest_count		29304	0					
ANR	30003	Identifier	mm_heap		29304	0					
ANR	30004	Identifier	rest_count		29304	1					
ANR	30005	PrimaryExpression	0		29304	1					
ANR	30006	ExpressionStatement	free ( heap )	1157:2:33493:33503	29304	24	True				
ANR	30007	CallExpression	free ( heap )		29304	0					
ANR	30008	Callee	free		29304	0					
ANR	30009	Identifier	free		29304	0					
ANR	30010	ArgumentList	heap		29304	1					
ANR	30011	Argument	heap		29304	0					
ANR	30012	Identifier	heap		29304	0					
ANR	30013	ExpressionStatement	heap = mm_heap	1158:2:33507:33521	29304	25	True				
ANR	30014	AssignmentExpression	heap = mm_heap		29304	0		=			
ANR	30015	Identifier	heap		29304	0					
ANR	30016	Identifier	mm_heap		29304	1					
ANR	30017	ReturnStatement	return heap ;	1160:1:33527:33538	29304	43	True				
ANR	30018	Identifier	heap		29304	0					
ANR	30019	ReturnType	ZEND_API zend_mm_heap *		29304	1					
ANR	30020	Identifier	zend_mm_startup_ex		29304	2					
ANR	30021	ParameterList	"const zend_mm_mem_handlers * handlers , size_t block_size , size_t reserve_size , int internal , void * params"		29304	3					
ANR	30022	Parameter	const zend_mm_mem_handlers * handlers	1042:42:29709:29744	29304	0	True				
ANR	30023	ParameterType	const zend_mm_mem_handlers *		29304	0					
ANR	30024	Identifier	handlers		29304	1					
ANR	30025	Parameter	size_t block_size	1042:80:29747:29763	29304	1	True				
ANR	30026	ParameterType	size_t		29304	0					
ANR	30027	Identifier	block_size		29304	1					
ANR	30028	Parameter	size_t reserve_size	1042:99:29766:29784	29304	2	True				
ANR	30029	ParameterType	size_t		29304	0					
ANR	30030	Identifier	reserve_size		29304	1					
ANR	30031	Parameter	int internal	1042:120:29787:29798	29304	3	True				
ANR	30032	ParameterType	int		29304	0					
ANR	30033	Identifier	internal		29304	1					
ANR	30034	Parameter	void * params	1042:134:29801:29812	29304	4	True				
ANR	30035	ParameterType	void *		29304	0					
ANR	30036	Identifier	params		29304	1					
ANR	30037	CFGEntryNode	ENTRY		29304		True				
ANR	30038	CFGExitNode	EXIT		29304		True				
ANR	30039	Symbol	ZEND_MM_LONG_CONST		29304						
ANR	30040	Symbol	handlers -> name		29304						
ANR	30041	Symbol	& _zend_mm_cookie		29304						
ANR	30042	Symbol	heap -> reserve_size		29304						
ANR	30043	Symbol	zend_mm_high_bit		29304						
ANR	30044	Symbol	_zend_mm_cookie		29304						
ANR	30045	Symbol	q -> next_free_block		29304						
ANR	30046	Symbol	heap -> use_zend_alloc		29304						
ANR	30047	Symbol	ZEND_MM_ALIGNED_FREE_HEADER_SIZE		29304						
ANR	30048	Symbol	* storage		29304						
ANR	30049	Symbol	heap -> block_size		29304						
ANR	30050	Symbol	mm_heap -> large_free_buckets [ i ] -> parent		29304						
ANR	30051	Symbol	& _mem_block_start_magic		29304						
ANR	30052	Symbol	heap -> reserve		29304						
ANR	30053	Symbol	ZEND_MM_TRUE_SIZE		29304						
ANR	30054	Symbol	ZEND_MM_ALIGNMENT		29304						
ANR	30055	Symbol	* * i		29304						
ANR	30056	Symbol	NULL		29304						
ANR	30057	Symbol	* handlers		29304						
ANR	30058	Symbol	mm_heap -> large_free_buckets		29304						
ANR	30059	Symbol	reserve_size		29304						
ANR	30060	Symbol	heap -> real_size		29304						
ANR	30061	Symbol	ZEND_MM_MAX_SMALL_SIZE		29304						
ANR	30062	Symbol	heap -> storage		29304						
ANR	30063	Symbol	params		29304						
ANR	30064	Symbol	stderr		29304						
ANR	30065	Symbol	memset		29304						
ANR	30066	Symbol	ZEND_MM_NUM_BUCKETS		29304						
ANR	30067	Symbol	heap -> peak		29304						
ANR	30068	Symbol	_mem_block_start_magic		29304						
ANR	30069	Symbol	handlers -> init		29304						
ANR	30070	Symbol	q -> prev_free_block		29304						
ANR	30071	Symbol	* * mm_heap		29304						
ANR	30072	Symbol	* mm_heap -> rest_buckets		29304						
ANR	30073	Symbol	zend_mm_low_bit		29304						
ANR	30074	Symbol	heap -> compact_size		29304						
ANR	30075	Symbol	* heap		29304						
ANR	30076	Symbol	internal		29304						
ANR	30077	Symbol	ZEND_MM_MIN_ALLOC_BLOCK_SIZE		29304						
ANR	30078	Symbol	heap -> real_peak		29304						
ANR	30079	Symbol	storage		29304						
ANR	30080	Symbol	* * mm_heap -> large_free_buckets		29304						
ANR	30081	Symbol	ZEND_MM_ALIGNMENT_LOG2		29304						
ANR	30082	Symbol	heap -> size		29304						
ANR	30083	Symbol	& _mem_block_end_magic		29304						
ANR	30084	Symbol	ZEND_MM_MIN_SIZE		29304						
ANR	30085	Symbol	ZEND_MM_ALIGNED_HEADER_SIZE		29304						
ANR	30086	Symbol	ZEND_MM_REST_BUCKET		29304						
ANR	30087	Symbol	mm_heap		29304						
ANR	30088	Symbol	heap		29304						
ANR	30089	Symbol	block_size		29304						
ANR	30090	Symbol	heap -> overflow		29304						
ANR	30091	Symbol	mm_heap -> rest_count		29304						
ANR	30092	Symbol	malloc		29304						
ANR	30093	Symbol	ZEND_MM_BUCKET_INDEX		29304						
ANR	30094	Symbol	storage -> handlers		29304						
ANR	30095	Symbol	mm_heap -> rest_buckets		29304						
ANR	30096	Symbol	* mm_heap		29304						
ANR	30097	Symbol	i		29304						
ANR	30098	Symbol	* mm_heap -> large_free_buckets		29304						
ANR	30099	Symbol	_mem_block_end_magic		29304						
ANR	30100	Symbol	p		29304						
ANR	30101	Symbol	q		29304						
ANR	30102	Symbol	* i		29304						
ANR	30103	Symbol	* * * mm_heap		29304						
ANR	30104	Symbol	orig		29304						
ANR	30105	Symbol	handlers		29304						
ANR	30106	Symbol	ZEND_MM_SMALL_SIZE		29304						
ANR	30107	Symbol	heap -> internal		29304						
ANR	30108	Symbol	ZEND_MM_ALIGNED_SEGMENT_SIZE		29304						
ANR	30109	Symbol	heap -> segments_list		29304						
ANR	30110	Symbol	ZEND_MM_SMALL_FREE_BUCKET		29304						
ANR	30111	Symbol	* q		29304						
ANR	30112	Symbol	heap -> limit		29304						
ANR	30113	Symbol	ZEND_MM_ALIGNED_MIN_HEADER_SIZE		29304						
ANR	30114	Function	zend_mm_startup	1163:0:33543:35262							
ANR	30115	FunctionDef	zend_mm_startup ()		30114	0					
ANR	30116	CompoundStatement		1164:0:33588:35262	30114	0					
ANR	30117	IdentifierDeclStatement	int i ;	1165:1:33591:33596	30114	0	True				
ANR	30118	IdentifierDecl	i		30114	0					
ANR	30119	IdentifierDeclType	int		30114	0					
ANR	30120	Identifier	i		30114	1					
ANR	30121	IdentifierDeclStatement	size_t seg_size ;	1166:1:33599:33614	30114	1	True				
ANR	30122	IdentifierDecl	seg_size		30114	0					
ANR	30123	IdentifierDeclType	size_t		30114	0					
ANR	30124	Identifier	seg_size		30114	1					
ANR	30125	IdentifierDeclStatement	"char * mem_type = getenv ( ""ZEND_MM_MEM_TYPE"" ) ;"	1167:1:33617:33660	30114	2	True				
ANR	30126	IdentifierDecl	"* mem_type = getenv ( ""ZEND_MM_MEM_TYPE"" )"		30114	0					
ANR	30127	IdentifierDeclType	char *		30114	0					
ANR	30128	Identifier	mem_type		30114	1					
ANR	30129	AssignmentExpression	"* mem_type = getenv ( ""ZEND_MM_MEM_TYPE"" )"		30114	2		=			
ANR	30130	Identifier	mem_type		30114	0					
ANR	30131	CallExpression	"getenv ( ""ZEND_MM_MEM_TYPE"" )"		30114	1					
ANR	30132	Callee	getenv		30114	0					
ANR	30133	Identifier	getenv		30114	0					
ANR	30134	ArgumentList	"""ZEND_MM_MEM_TYPE"""		30114	1					
ANR	30135	Argument	"""ZEND_MM_MEM_TYPE"""		30114	0					
ANR	30136	PrimaryExpression	"""ZEND_MM_MEM_TYPE"""		30114	0					
ANR	30137	IdentifierDeclStatement	char * tmp ;	1168:1:33663:33672	30114	3	True				
ANR	30138	IdentifierDecl	* tmp		30114	0					
ANR	30139	IdentifierDeclType	char *		30114	0					
ANR	30140	Identifier	tmp		30114	1					
ANR	30141	IdentifierDeclStatement	const zend_mm_mem_handlers * handlers ;	1169:1:33675:33711	30114	4	True				
ANR	30142	IdentifierDecl	* handlers		30114	0					
ANR	30143	IdentifierDeclType	const zend_mm_mem_handlers *		30114	0					
ANR	30144	Identifier	handlers		30114	1					
ANR	30145	IdentifierDeclStatement	zend_mm_heap * heap ;	1170:1:33714:33732	30114	5	True				
ANR	30146	IdentifierDecl	* heap		30114	0					
ANR	30147	IdentifierDeclType	zend_mm_heap *		30114	0					
ANR	30148	Identifier	heap		30114	1					
ANR	30149	IfStatement	if ( mem_type == NULL )		30114	6					
ANR	30150	Condition	mem_type == NULL	1172:5:33740:33755	30114	0	True				
ANR	30151	EqualityExpression	mem_type == NULL		30114	0		==			
ANR	30152	Identifier	mem_type		30114	0					
ANR	30153	Identifier	NULL		30114	1					
ANR	30154	CompoundStatement		9:23:169:169	30114	1					
ANR	30155	ExpressionStatement	i = 0	1173:2:33762:33767	30114	0	True				
ANR	30156	AssignmentExpression	i = 0		30114	0		=			
ANR	30157	Identifier	i		30114	0					
ANR	30158	PrimaryExpression	0		30114	1					
ANR	30159	ElseStatement	else		30114	0					
ANR	30160	CompoundStatement		11:8:188:188	30114	0					
ANR	30161	ForStatement	for ( i = 0 ; mem_handlers [ i ] . name ; i ++ )		30114	0					
ANR	30162	ForInit	i = 0 ;	1175:7:33786:33791	30114	0	True				
ANR	30163	AssignmentExpression	i = 0		30114	0		=			
ANR	30164	Identifier	i		30114	0					
ANR	30165	PrimaryExpression	0		30114	1					
ANR	30166	Condition	mem_handlers [ i ] . name	1175:14:33793:33812	30114	1	True				
ANR	30167	MemberAccess	mem_handlers [ i ] . name		30114	0					
ANR	30168	ArrayIndexing	mem_handlers [ i ]		30114	0					
ANR	30169	Identifier	mem_handlers		30114	0					
ANR	30170	Identifier	i		30114	1					
ANR	30171	Identifier	name		30114	1					
ANR	30172	PostIncDecOperationExpression	i ++	1175:36:33815:33817	30114	2	True				
ANR	30173	Identifier	i		30114	0					
ANR	30174	IncDec	++		30114	1					
ANR	30175	CompoundStatement		12:41:231:231	30114	3					
ANR	30176	IfStatement	"if ( strcmp ( mem_handlers [ i ] . name , mem_type ) == 0 )"		30114	0					
ANR	30177	Condition	"strcmp ( mem_handlers [ i ] . name , mem_type ) == 0"	1176:7:33829:33871	30114	0	True				
ANR	30178	EqualityExpression	"strcmp ( mem_handlers [ i ] . name , mem_type ) == 0"		30114	0		==			
ANR	30179	CallExpression	"strcmp ( mem_handlers [ i ] . name , mem_type )"		30114	0					
ANR	30180	Callee	strcmp		30114	0					
ANR	30181	Identifier	strcmp		30114	0					
ANR	30182	ArgumentList	mem_handlers [ i ] . name		30114	1					
ANR	30183	Argument	mem_handlers [ i ] . name		30114	0					
ANR	30184	MemberAccess	mem_handlers [ i ] . name		30114	0					
ANR	30185	ArrayIndexing	mem_handlers [ i ]		30114	0					
ANR	30186	Identifier	mem_handlers		30114	0					
ANR	30187	Identifier	i		30114	1					
ANR	30188	Identifier	name		30114	1					
ANR	30189	Argument	mem_type		30114	1					
ANR	30190	Identifier	mem_type		30114	0					
ANR	30191	PrimaryExpression	0		30114	1					
ANR	30192	CompoundStatement		13:52:285:285	30114	1					
ANR	30193	BreakStatement	break ;	1177:4:33880:33885	30114	0	True				
ANR	30194	IfStatement	if ( ! mem_handlers [ i ] . name )		30114	1					
ANR	30195	Condition	! mem_handlers [ i ] . name	1180:6:33902:33922	30114	0	True				
ANR	30196	UnaryOperationExpression	! mem_handlers [ i ] . name		30114	0					
ANR	30197	UnaryOperator	!		30114	0					
ANR	30198	MemberAccess	mem_handlers [ i ] . name		30114	1					
ANR	30199	ArrayIndexing	mem_handlers [ i ]		30114	0					
ANR	30200	Identifier	mem_handlers		30114	0					
ANR	30201	Identifier	i		30114	1					
ANR	30202	Identifier	name		30114	1					
ANR	30203	CompoundStatement		17:29:336:336	30114	1					
ANR	30204	ExpressionStatement	"fprintf ( stderr , ""Wrong or unsupported zend_mm storage type '%s'\\n"" , mem_type )"	1181:3:33930:34007	30114	0	True				
ANR	30205	CallExpression	"fprintf ( stderr , ""Wrong or unsupported zend_mm storage type '%s'\\n"" , mem_type )"		30114	0					
ANR	30206	Callee	fprintf		30114	0					
ANR	30207	Identifier	fprintf		30114	0					
ANR	30208	ArgumentList	stderr		30114	1					
ANR	30209	Argument	stderr		30114	0					
ANR	30210	Identifier	stderr		30114	0					
ANR	30211	Argument	"""Wrong or unsupported zend_mm storage type '%s'\\n"""		30114	1					
ANR	30212	PrimaryExpression	"""Wrong or unsupported zend_mm storage type '%s'\\n"""		30114	0					
ANR	30213	Argument	mem_type		30114	2					
ANR	30214	Identifier	mem_type		30114	0					
ANR	30215	ExpressionStatement	"fprintf ( stderr , ""  supported types:\\n"" )"	1182:3:34012:34051	30114	1	True				
ANR	30216	CallExpression	"fprintf ( stderr , ""  supported types:\\n"" )"		30114	0					
ANR	30217	Callee	fprintf		30114	0					
ANR	30218	Identifier	fprintf		30114	0					
ANR	30219	ArgumentList	stderr		30114	1					
ANR	30220	Argument	stderr		30114	0					
ANR	30221	Identifier	stderr		30114	0					
ANR	30222	Argument	"""  supported types:\\n"""		30114	1					
ANR	30223	PrimaryExpression	"""  supported types:\\n"""		30114	0					
ANR	30224	ExpressionStatement	fflush ( stderr )	1185:3:34122:34136	30114	2	True				
ANR	30225	CallExpression	fflush ( stderr )		30114	0					
ANR	30226	Callee	fflush		30114	0					
ANR	30227	Identifier	fflush		30114	0					
ANR	30228	ArgumentList	stderr		30114	1					
ANR	30229	Argument	stderr		30114	0					
ANR	30230	Identifier	stderr		30114	0					
ANR	30231	ForStatement	for ( i = 0 ; mem_handlers [ i ] . name ; i ++ )		30114	3					
ANR	30232	ForInit	i = 0 ;	1187:8:34153:34158	30114	0	True				
ANR	30233	AssignmentExpression	i = 0		30114	0		=			
ANR	30234	Identifier	i		30114	0					
ANR	30235	PrimaryExpression	0		30114	1					
ANR	30236	Condition	mem_handlers [ i ] . name	1187:15:34160:34179	30114	1	True				
ANR	30237	MemberAccess	mem_handlers [ i ] . name		30114	0					
ANR	30238	ArrayIndexing	mem_handlers [ i ]		30114	0					
ANR	30239	Identifier	mem_handlers		30114	0					
ANR	30240	Identifier	i		30114	1					
ANR	30241	Identifier	name		30114	1					
ANR	30242	PostIncDecOperationExpression	i ++	1187:37:34182:34184	30114	2	True				
ANR	30243	Identifier	i		30114	0					
ANR	30244	IncDec	++		30114	1					
ANR	30245	CompoundStatement		24:42:598:598	30114	3					
ANR	30246	ExpressionStatement	"fprintf ( stderr , ""    '%s'\\n"" , mem_handlers [ i ] . name )"	1188:4:34193:34244	30114	0	True				
ANR	30247	CallExpression	"fprintf ( stderr , ""    '%s'\\n"" , mem_handlers [ i ] . name )"		30114	0					
ANR	30248	Callee	fprintf		30114	0					
ANR	30249	Identifier	fprintf		30114	0					
ANR	30250	ArgumentList	stderr		30114	1					
ANR	30251	Argument	stderr		30114	0					
ANR	30252	Identifier	stderr		30114	0					
ANR	30253	Argument	"""    '%s'\\n"""		30114	1					
ANR	30254	PrimaryExpression	"""    '%s'\\n"""		30114	0					
ANR	30255	Argument	mem_handlers [ i ] . name		30114	2					
ANR	30256	MemberAccess	mem_handlers [ i ] . name		30114	0					
ANR	30257	ArrayIndexing	mem_handlers [ i ]		30114	0					
ANR	30258	Identifier	mem_handlers		30114	0					
ANR	30259	Identifier	i		30114	1					
ANR	30260	Identifier	name		30114	1					
ANR	30261	ExpressionStatement	fflush ( stderr )	1192:3:34320:34334	30114	4	True				
ANR	30262	CallExpression	fflush ( stderr )		30114	0					
ANR	30263	Callee	fflush		30114	0					
ANR	30264	Identifier	fflush		30114	0					
ANR	30265	ArgumentList	stderr		30114	1					
ANR	30266	Argument	stderr		30114	0					
ANR	30267	Identifier	stderr		30114	0					
ANR	30268	ExpressionStatement	exit ( 255 )	1194:3:34346:34355	30114	5	True				
ANR	30269	CallExpression	exit ( 255 )		30114	0					
ANR	30270	Callee	exit		30114	0					
ANR	30271	Identifier	exit		30114	0					
ANR	30272	ArgumentList	255		30114	1					
ANR	30273	Argument	255		30114	0					
ANR	30274	PrimaryExpression	255		30114	0					
ANR	30275	ExpressionStatement	handlers = & mem_handlers [ i ]	1197:1:34365:34392	30114	7	True				
ANR	30276	AssignmentExpression	handlers = & mem_handlers [ i ]		30114	0		=			
ANR	30277	Identifier	handlers		30114	0					
ANR	30278	UnaryOperationExpression	& mem_handlers [ i ]		30114	1					
ANR	30279	UnaryOperator	&		30114	0					
ANR	30280	ArrayIndexing	mem_handlers [ i ]		30114	1					
ANR	30281	Identifier	mem_handlers		30114	0					
ANR	30282	Identifier	i		30114	1					
ANR	30283	ExpressionStatement	"tmp = getenv ( ""ZEND_MM_SEG_SIZE"" )"	1199:1:34396:34428	30114	8	True				
ANR	30284	AssignmentExpression	"tmp = getenv ( ""ZEND_MM_SEG_SIZE"" )"		30114	0		=			
ANR	30285	Identifier	tmp		30114	0					
ANR	30286	CallExpression	"getenv ( ""ZEND_MM_SEG_SIZE"" )"		30114	1					
ANR	30287	Callee	getenv		30114	0					
ANR	30288	Identifier	getenv		30114	0					
ANR	30289	ArgumentList	"""ZEND_MM_SEG_SIZE"""		30114	1					
ANR	30290	Argument	"""ZEND_MM_SEG_SIZE"""		30114	0					
ANR	30291	PrimaryExpression	"""ZEND_MM_SEG_SIZE"""		30114	0					
ANR	30292	IfStatement	if ( tmp )		30114	9					
ANR	30293	Condition	tmp	1200:5:34435:34437	30114	0	True				
ANR	30294	Identifier	tmp		30114	0					
ANR	30295	CompoundStatement		37:10:851:851	30114	1					
ANR	30296	ExpressionStatement	"seg_size = zend_atoi ( tmp , 0 )"	1201:2:34444:34472	30114	0	True				
ANR	30297	AssignmentExpression	"seg_size = zend_atoi ( tmp , 0 )"		30114	0		=			
ANR	30298	Identifier	seg_size		30114	0					
ANR	30299	CallExpression	"zend_atoi ( tmp , 0 )"		30114	1					
ANR	30300	Callee	zend_atoi		30114	0					
ANR	30301	Identifier	zend_atoi		30114	0					
ANR	30302	ArgumentList	tmp		30114	1					
ANR	30303	Argument	tmp		30114	0					
ANR	30304	Identifier	tmp		30114	0					
ANR	30305	Argument	0		30114	1					
ANR	30306	PrimaryExpression	0		30114	0					
ANR	30307	IfStatement	if ( zend_mm_low_bit ( seg_size ) != zend_mm_high_bit ( seg_size ) )		30114	1					
ANR	30308	Condition	zend_mm_low_bit ( seg_size ) != zend_mm_high_bit ( seg_size )	1202:6:34480:34534	30114	0	True				
ANR	30309	EqualityExpression	zend_mm_low_bit ( seg_size ) != zend_mm_high_bit ( seg_size )		30114	0		!=			
ANR	30310	CallExpression	zend_mm_low_bit ( seg_size )		30114	0					
ANR	30311	Callee	zend_mm_low_bit		30114	0					
ANR	30312	Identifier	zend_mm_low_bit		30114	0					
ANR	30313	ArgumentList	seg_size		30114	1					
ANR	30314	Argument	seg_size		30114	0					
ANR	30315	Identifier	seg_size		30114	0					
ANR	30316	CallExpression	zend_mm_high_bit ( seg_size )		30114	1					
ANR	30317	Callee	zend_mm_high_bit		30114	0					
ANR	30318	Identifier	zend_mm_high_bit		30114	0					
ANR	30319	ArgumentList	seg_size		30114	1					
ANR	30320	Argument	seg_size		30114	0					
ANR	30321	Identifier	seg_size		30114	0					
ANR	30322	CompoundStatement		39:63:948:948	30114	1					
ANR	30323	ExpressionStatement	"fprintf ( stderr , ""ZEND_MM_SEG_SIZE must be a power of two\\n"" )"	1203:3:34542:34602	30114	0	True				
ANR	30324	CallExpression	"fprintf ( stderr , ""ZEND_MM_SEG_SIZE must be a power of two\\n"" )"		30114	0					
ANR	30325	Callee	fprintf		30114	0					
ANR	30326	Identifier	fprintf		30114	0					
ANR	30327	ArgumentList	stderr		30114	1					
ANR	30328	Argument	stderr		30114	0					
ANR	30329	Identifier	stderr		30114	0					
ANR	30330	Argument	"""ZEND_MM_SEG_SIZE must be a power of two\\n"""		30114	1					
ANR	30331	PrimaryExpression	"""ZEND_MM_SEG_SIZE must be a power of two\\n"""		30114	0					
ANR	30332	ExpressionStatement	fflush ( stderr )	1206:3:34673:34687	30114	1	True				
ANR	30333	CallExpression	fflush ( stderr )		30114	0					
ANR	30334	Callee	fflush		30114	0					
ANR	30335	Identifier	fflush		30114	0					
ANR	30336	ArgumentList	stderr		30114	1					
ANR	30337	Argument	stderr		30114	0					
ANR	30338	Identifier	stderr		30114	0					
ANR	30339	ExpressionStatement	exit ( 255 )	1208:3:34699:34708	30114	2	True				
ANR	30340	CallExpression	exit ( 255 )		30114	0					
ANR	30341	Callee	exit		30114	0					
ANR	30342	Identifier	exit		30114	0					
ANR	30343	ArgumentList	255		30114	1					
ANR	30344	Argument	255		30114	0					
ANR	30345	PrimaryExpression	255		30114	0					
ANR	30346	ElseStatement	else		30114	0					
ANR	30347	IfStatement	if ( seg_size < ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE )		30114	0					
ANR	30348	Condition	seg_size < ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE	1209:13:34723:34791	30114	0	True				
ANR	30349	RelationalExpression	seg_size < ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		30114	0		<			
ANR	30350	Identifier	seg_size		30114	0					
ANR	30351	AdditiveExpression	ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		30114	1		+			
ANR	30352	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		30114	0					
ANR	30353	Identifier	ZEND_MM_ALIGNED_HEADER_SIZE		30114	1					
ANR	30354	CompoundStatement		46:84:1205:1205	30114	1					
ANR	30355	ExpressionStatement	"fprintf ( stderr , ""ZEND_MM_SEG_SIZE is too small\\n"" )"	1210:3:34799:34849	30114	0	True				
ANR	30356	CallExpression	"fprintf ( stderr , ""ZEND_MM_SEG_SIZE is too small\\n"" )"		30114	0					
ANR	30357	Callee	fprintf		30114	0					
ANR	30358	Identifier	fprintf		30114	0					
ANR	30359	ArgumentList	stderr		30114	1					
ANR	30360	Argument	stderr		30114	0					
ANR	30361	Identifier	stderr		30114	0					
ANR	30362	Argument	"""ZEND_MM_SEG_SIZE is too small\\n"""		30114	1					
ANR	30363	PrimaryExpression	"""ZEND_MM_SEG_SIZE is too small\\n"""		30114	0					
ANR	30364	ExpressionStatement	fflush ( stderr )	1213:3:34920:34934	30114	1	True				
ANR	30365	CallExpression	fflush ( stderr )		30114	0					
ANR	30366	Callee	fflush		30114	0					
ANR	30367	Identifier	fflush		30114	0					
ANR	30368	ArgumentList	stderr		30114	1					
ANR	30369	Argument	stderr		30114	0					
ANR	30370	Identifier	stderr		30114	0					
ANR	30371	ExpressionStatement	exit ( 255 )	1215:3:34946:34955	30114	2	True				
ANR	30372	CallExpression	exit ( 255 )		30114	0					
ANR	30373	Callee	exit		30114	0					
ANR	30374	Identifier	exit		30114	0					
ANR	30375	ArgumentList	255		30114	1					
ANR	30376	Argument	255		30114	0					
ANR	30377	PrimaryExpression	255		30114	0					
ANR	30378	ElseStatement	else		30114	0					
ANR	30379	CompoundStatement		54:8:1380:1380	30114	0					
ANR	30380	ExpressionStatement	seg_size = ZEND_MM_SEG_SIZE	1218:2:34973:35000	30114	0	True				
ANR	30381	AssignmentExpression	seg_size = ZEND_MM_SEG_SIZE		30114	0		=			
ANR	30382	Identifier	seg_size		30114	0					
ANR	30383	Identifier	ZEND_MM_SEG_SIZE		30114	1					
ANR	30384	ExpressionStatement	"heap = zend_mm_startup_ex ( handlers , seg_size , ZEND_MM_RESERVE_SIZE , 0 , NULL )"	1221:1:35007:35083	30114	10	True				
ANR	30385	AssignmentExpression	"heap = zend_mm_startup_ex ( handlers , seg_size , ZEND_MM_RESERVE_SIZE , 0 , NULL )"		30114	0		=			
ANR	30386	Identifier	heap		30114	0					
ANR	30387	CallExpression	"zend_mm_startup_ex ( handlers , seg_size , ZEND_MM_RESERVE_SIZE , 0 , NULL )"		30114	1					
ANR	30388	Callee	zend_mm_startup_ex		30114	0					
ANR	30389	Identifier	zend_mm_startup_ex		30114	0					
ANR	30390	ArgumentList	handlers		30114	1					
ANR	30391	Argument	handlers		30114	0					
ANR	30392	Identifier	handlers		30114	0					
ANR	30393	Argument	seg_size		30114	1					
ANR	30394	Identifier	seg_size		30114	0					
ANR	30395	Argument	ZEND_MM_RESERVE_SIZE		30114	2					
ANR	30396	Identifier	ZEND_MM_RESERVE_SIZE		30114	0					
ANR	30397	Argument	0		30114	3					
ANR	30398	PrimaryExpression	0		30114	0					
ANR	30399	Argument	NULL		30114	4					
ANR	30400	Identifier	NULL		30114	0					
ANR	30401	IfStatement	if ( heap )		30114	11					
ANR	30402	Condition	heap	1222:5:35090:35093	30114	0	True				
ANR	30403	Identifier	heap		30114	0					
ANR	30404	CompoundStatement		59:11:1507:1507	30114	1					
ANR	30405	ExpressionStatement	"tmp = getenv ( ""ZEND_MM_COMPACT"" )"	1223:2:35100:35131	30114	0	True				
ANR	30406	AssignmentExpression	"tmp = getenv ( ""ZEND_MM_COMPACT"" )"		30114	0		=			
ANR	30407	Identifier	tmp		30114	0					
ANR	30408	CallExpression	"getenv ( ""ZEND_MM_COMPACT"" )"		30114	1					
ANR	30409	Callee	getenv		30114	0					
ANR	30410	Identifier	getenv		30114	0					
ANR	30411	ArgumentList	"""ZEND_MM_COMPACT"""		30114	1					
ANR	30412	Argument	"""ZEND_MM_COMPACT"""		30114	0					
ANR	30413	PrimaryExpression	"""ZEND_MM_COMPACT"""		30114	0					
ANR	30414	IfStatement	if ( tmp )		30114	1					
ANR	30415	Condition	tmp	1224:6:35139:35141	30114	0	True				
ANR	30416	Identifier	tmp		30114	0					
ANR	30417	CompoundStatement		61:11:1555:1555	30114	1					
ANR	30418	ExpressionStatement	"heap -> compact_size = zend_atoi ( tmp , 0 )"	1225:3:35149:35187	30114	0	True				
ANR	30419	AssignmentExpression	"heap -> compact_size = zend_atoi ( tmp , 0 )"		30114	0		=			
ANR	30420	PtrMemberAccess	heap -> compact_size		30114	0					
ANR	30421	Identifier	heap		30114	0					
ANR	30422	Identifier	compact_size		30114	1					
ANR	30423	CallExpression	"zend_atoi ( tmp , 0 )"		30114	1					
ANR	30424	Callee	zend_atoi		30114	0					
ANR	30425	Identifier	zend_atoi		30114	0					
ANR	30426	ArgumentList	tmp		30114	1					
ANR	30427	Argument	tmp		30114	0					
ANR	30428	Identifier	tmp		30114	0					
ANR	30429	Argument	0		30114	1					
ANR	30430	PrimaryExpression	0		30114	0					
ANR	30431	ElseStatement	else		30114	0					
ANR	30432	CompoundStatement		63:9:1609:1609	30114	0					
ANR	30433	ExpressionStatement	heap -> compact_size = 2 * 1024 * 1024	1227:3:35203:35239	30114	0	True				
ANR	30434	AssignmentExpression	heap -> compact_size = 2 * 1024 * 1024		30114	0		=			
ANR	30435	PtrMemberAccess	heap -> compact_size		30114	0					
ANR	30436	Identifier	heap		30114	0					
ANR	30437	Identifier	compact_size		30114	1					
ANR	30438	MultiplicativeExpression	2 * 1024 * 1024		30114	1		*			
ANR	30439	PrimaryExpression	2		30114	0					
ANR	30440	MultiplicativeExpression	1024 * 1024		30114	1		*			
ANR	30441	PrimaryExpression	1024		30114	0					
ANR	30442	PrimaryExpression	1024		30114	1					
ANR	30443	ReturnStatement	return heap ;	1230:1:35249:35260	30114	12	True				
ANR	30444	Identifier	heap		30114	0					
ANR	30445	ReturnType	ZEND_API zend_mm_heap *		30114	1					
ANR	30446	Identifier	zend_mm_startup		30114	2					
ANR	30447	ParameterList			30114	3					
ANR	30448	CFGEntryNode	ENTRY		30114		True				
ANR	30449	CFGExitNode	EXIT		30114		True				
ANR	30450	Symbol	strcmp		30114						
ANR	30451	Symbol	zend_mm_startup_ex		30114						
ANR	30452	Symbol	mem_type		30114						
ANR	30453	Symbol	* mem_handlers		30114						
ANR	30454	Symbol	NULL		30114						
ANR	30455	Symbol	zend_atoi		30114						
ANR	30456	Symbol	i		30114						
ANR	30457	Symbol	zend_mm_high_bit		30114						
ANR	30458	Symbol	stderr		30114						
ANR	30459	Symbol	* i		30114						
ANR	30460	Symbol	mem_handlers		30114						
ANR	30461	Symbol	ZEND_MM_ALIGNED_HEADER_SIZE		30114						
ANR	30462	Symbol	ZEND_MM_SEG_SIZE		30114						
ANR	30463	Symbol	tmp		30114						
ANR	30464	Symbol	handlers		30114						
ANR	30465	Symbol	ZEND_MM_ALIGNED_SEGMENT_SIZE		30114						
ANR	30466	Symbol	ZEND_MM_RESERVE_SIZE		30114						
ANR	30467	Symbol	seg_size		30114						
ANR	30468	Symbol	heap		30114						
ANR	30469	Symbol	zend_mm_low_bit		30114						
ANR	30470	Symbol	heap -> compact_size		30114						
ANR	30471	Symbol	* heap		30114						
ANR	30472	Symbol	getenv		30114						
ANR	30473	Symbol	mem_handlers [ i ] . name		30114						
ANR	30474	Function	zend_mm_find_leaks	1234:0:35280:36306							
ANR	30475	FunctionDef	"zend_mm_find_leaks (zend_mm_segment * segment , zend_mm_block * b)"		30474	0					
ANR	30476	CompoundStatement		1235:0:35355:36306	30474	0					
ANR	30477	IdentifierDeclStatement	long leaks = 0 ;	1236:1:35358:35372	30474	0	True				
ANR	30478	IdentifierDecl	leaks = 0		30474	0					
ANR	30479	IdentifierDeclType	long		30474	0					
ANR	30480	Identifier	leaks		30474	1					
ANR	30481	AssignmentExpression	leaks = 0		30474	2		=			
ANR	30482	Identifier	leaks		30474	0					
ANR	30483	PrimaryExpression	0		30474	1					
ANR	30484	IdentifierDeclStatement	"zend_mm_block * p , * q ;"	1237:1:35375:35395	30474	1	True				
ANR	30485	IdentifierDecl	* p		30474	0					
ANR	30486	IdentifierDeclType	zend_mm_block *		30474	0					
ANR	30487	Identifier	p		30474	1					
ANR	30488	IdentifierDecl	* q		30474	1					
ANR	30489	IdentifierDeclType	zend_mm_block *		30474	0					
ANR	30490	Identifier	q		30474	1					
ANR	30491	ExpressionStatement	p = ZEND_MM_NEXT_BLOCK ( b )	1239:1:35399:35424	30474	2	True				
ANR	30492	AssignmentExpression	p = ZEND_MM_NEXT_BLOCK ( b )		30474	0		=			
ANR	30493	Identifier	p		30474	0					
ANR	30494	CallExpression	ZEND_MM_NEXT_BLOCK ( b )		30474	1					
ANR	30495	Callee	ZEND_MM_NEXT_BLOCK		30474	0					
ANR	30496	Identifier	ZEND_MM_NEXT_BLOCK		30474	0					
ANR	30497	ArgumentList	b		30474	1					
ANR	30498	Argument	b		30474	0					
ANR	30499	Identifier	b		30474	0					
ANR	30500	WhileStatement	while ( 1 )		30474	3					
ANR	30501	Condition	1	1240:8:35434:35434	30474	0	True				
ANR	30502	PrimaryExpression	1		30474	0					
ANR	30503	CompoundStatement		6:11:81:81	30474	1					
ANR	30504	IfStatement	if ( ZEND_MM_IS_GUARD_BLOCK ( p ) )		30474	0					
ANR	30505	Condition	ZEND_MM_IS_GUARD_BLOCK ( p )	1241:6:35445:35469	30474	0	True				
ANR	30506	CallExpression	ZEND_MM_IS_GUARD_BLOCK ( p )		30474	0					
ANR	30507	Callee	ZEND_MM_IS_GUARD_BLOCK		30474	0					
ANR	30508	Identifier	ZEND_MM_IS_GUARD_BLOCK		30474	0					
ANR	30509	ArgumentList	p		30474	1					
ANR	30510	Argument	p		30474	0					
ANR	30511	Identifier	p		30474	0					
ANR	30512	CompoundStatement		7:33:116:116	30474	1					
ANR	30513	ExpressionStatement	"ZEND_MM_CHECK_MAGIC ( p , MEM_BLOCK_GUARD )"	1242:3:35477:35516	30474	0	True				
ANR	30514	CallExpression	"ZEND_MM_CHECK_MAGIC ( p , MEM_BLOCK_GUARD )"		30474	0					
ANR	30515	Callee	ZEND_MM_CHECK_MAGIC		30474	0					
ANR	30516	Identifier	ZEND_MM_CHECK_MAGIC		30474	0					
ANR	30517	ArgumentList	p		30474	1					
ANR	30518	Argument	p		30474	0					
ANR	30519	Identifier	p		30474	0					
ANR	30520	Argument	MEM_BLOCK_GUARD		30474	1					
ANR	30521	Identifier	MEM_BLOCK_GUARD		30474	0					
ANR	30522	ExpressionStatement	segment = segment -> next_segment	1243:3:35521:35552	30474	1	True				
ANR	30523	AssignmentExpression	segment = segment -> next_segment		30474	0		=			
ANR	30524	Identifier	segment		30474	0					
ANR	30525	PtrMemberAccess	segment -> next_segment		30474	1					
ANR	30526	Identifier	segment		30474	0					
ANR	30527	Identifier	next_segment		30474	1					
ANR	30528	IfStatement	if ( ! segment )		30474	2					
ANR	30529	Condition	! segment	1244:7:35561:35568	30474	0	True				
ANR	30530	UnaryOperationExpression	! segment		30474	0					
ANR	30531	UnaryOperator	!		30474	0					
ANR	30532	Identifier	segment		30474	1					
ANR	30533	CompoundStatement		10:17:215:215	30474	1					
ANR	30534	BreakStatement	break ;	1245:4:35577:35582	30474	0	True				
ANR	30535	ExpressionStatement	p = ( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )	1247:3:35592:35663	30474	3	True				
ANR	30536	AssignmentExpression	p = ( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		30474	0		=			
ANR	30537	Identifier	p		30474	0					
ANR	30538	CastExpression	( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		30474	1					
ANR	30539	CastTarget	zend_mm_block *		30474	0					
ANR	30540	AdditiveExpression	( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE		30474	1		+			
ANR	30541	CastExpression	( char * ) segment		30474	0					
ANR	30542	CastTarget	char *		30474	0					
ANR	30543	Identifier	segment		30474	1					
ANR	30544	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		30474	1					
ANR	30545	ContinueStatement	continue ;	1248:3:35668:35676	30474	4	True				
ANR	30546	ExpressionStatement	q = ZEND_MM_NEXT_BLOCK ( p )	1250:2:35684:35709	30474	1	True				
ANR	30547	AssignmentExpression	q = ZEND_MM_NEXT_BLOCK ( p )		30474	0		=			
ANR	30548	Identifier	q		30474	0					
ANR	30549	CallExpression	ZEND_MM_NEXT_BLOCK ( p )		30474	1					
ANR	30550	Callee	ZEND_MM_NEXT_BLOCK		30474	0					
ANR	30551	Identifier	ZEND_MM_NEXT_BLOCK		30474	0					
ANR	30552	ArgumentList	p		30474	1					
ANR	30553	Argument	p		30474	0					
ANR	30554	Identifier	p		30474	0					
ANR	30555	IfStatement	if ( q <= p || ( char * ) q > ( char * ) segment + segment -> size || p -> info . _size != q -> info . _prev )		30474	2					
ANR	30556	Condition	q <= p || ( char * ) q > ( char * ) segment + segment -> size || p -> info . _size != q -> info . _prev	1251:6:35717:35813	30474	0	True				
ANR	30557	OrExpression	q <= p || ( char * ) q > ( char * ) segment + segment -> size || p -> info . _size != q -> info . _prev		30474	0		||			
ANR	30558	RelationalExpression	q <= p		30474	0		<=			
ANR	30559	Identifier	q		30474	0					
ANR	30560	Identifier	p		30474	1					
ANR	30561	OrExpression	( char * ) q > ( char * ) segment + segment -> size || p -> info . _size != q -> info . _prev		30474	1		||			
ANR	30562	RelationalExpression	( char * ) q > ( char * ) segment + segment -> size		30474	0		>			
ANR	30563	CastExpression	( char * ) q		30474	0					
ANR	30564	CastTarget	char *		30474	0					
ANR	30565	Identifier	q		30474	1					
ANR	30566	AdditiveExpression	( char * ) segment + segment -> size		30474	1		+			
ANR	30567	CastExpression	( char * ) segment		30474	0					
ANR	30568	CastTarget	char *		30474	0					
ANR	30569	Identifier	segment		30474	1					
ANR	30570	PtrMemberAccess	segment -> size		30474	1					
ANR	30571	Identifier	segment		30474	0					
ANR	30572	Identifier	size		30474	1					
ANR	30573	EqualityExpression	p -> info . _size != q -> info . _prev		30474	1		!=			
ANR	30574	MemberAccess	p -> info . _size		30474	0					
ANR	30575	PtrMemberAccess	p -> info		30474	0					
ANR	30576	Identifier	p		30474	0					
ANR	30577	Identifier	info		30474	1					
ANR	30578	Identifier	_size		30474	1					
ANR	30579	MemberAccess	q -> info . _prev		30474	1					
ANR	30580	PtrMemberAccess	q -> info		30474	0					
ANR	30581	Identifier	q		30474	0					
ANR	30582	Identifier	info		30474	1					
ANR	30583	Identifier	_prev		30474	1					
ANR	30584	CompoundStatement		19:38:460:460	30474	1					
ANR	30585	ExpressionStatement	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"	1254:6:35824:35863	30474	0	True				
ANR	30586	CallExpression	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"		30474	0					
ANR	30587	Callee	zend_mm_panic		30474	0					
ANR	30588	Identifier	zend_mm_panic		30474	0					
ANR	30589	ArgumentList	"""zend_mm_heap corrupted"""		30474	1					
ANR	30590	Argument	"""zend_mm_heap corrupted"""		30474	0					
ANR	30591	PrimaryExpression	"""zend_mm_heap corrupted"""		30474	0					
ANR	30592	IfStatement	if ( ! ZEND_MM_IS_FREE_BLOCK ( p ) )		30474	3					
ANR	30593	Condition	! ZEND_MM_IS_FREE_BLOCK ( p )	1256:6:35875:35899	30474	0	True				
ANR	30594	UnaryOperationExpression	! ZEND_MM_IS_FREE_BLOCK ( p )		30474	0					
ANR	30595	UnaryOperator	!		30474	0					
ANR	30596	CallExpression	ZEND_MM_IS_FREE_BLOCK ( p )		30474	1					
ANR	30597	Callee	ZEND_MM_IS_FREE_BLOCK		30474	0					
ANR	30598	Identifier	ZEND_MM_IS_FREE_BLOCK		30474	0					
ANR	30599	ArgumentList	p		30474	1					
ANR	30600	Argument	p		30474	0					
ANR	30601	Identifier	p		30474	0					
ANR	30602	CompoundStatement		22:33:546:546	30474	1					
ANR	30603	IfStatement	if ( p -> magic == MEM_BLOCK_VALID )		30474	0					
ANR	30604	Condition	p -> magic == MEM_BLOCK_VALID	1257:7:35911:35937	30474	0	True				
ANR	30605	EqualityExpression	p -> magic == MEM_BLOCK_VALID		30474	0		==			
ANR	30606	PtrMemberAccess	p -> magic		30474	0					
ANR	30607	Identifier	p		30474	0					
ANR	30608	Identifier	magic		30474	1					
ANR	30609	Identifier	MEM_BLOCK_VALID		30474	1					
ANR	30610	CompoundStatement		23:36:584:584	30474	1					
ANR	30611	IfStatement	if ( p -> debug . filename == b -> debug . filename && p -> debug . lineno == b -> debug . lineno )		30474	0					
ANR	30612	Condition	p -> debug . filename == b -> debug . filename && p -> debug . lineno == b -> debug . lineno	1258:8:35950:36021	30474	0	True				
ANR	30613	AndExpression	p -> debug . filename == b -> debug . filename && p -> debug . lineno == b -> debug . lineno		30474	0		&&			
ANR	30614	EqualityExpression	p -> debug . filename == b -> debug . filename		30474	0		==			
ANR	30615	MemberAccess	p -> debug . filename		30474	0					
ANR	30616	PtrMemberAccess	p -> debug		30474	0					
ANR	30617	Identifier	p		30474	0					
ANR	30618	Identifier	debug		30474	1					
ANR	30619	Identifier	filename		30474	1					
ANR	30620	MemberAccess	b -> debug . filename		30474	1					
ANR	30621	PtrMemberAccess	b -> debug		30474	0					
ANR	30622	Identifier	b		30474	0					
ANR	30623	Identifier	debug		30474	1					
ANR	30624	Identifier	filename		30474	1					
ANR	30625	EqualityExpression	p -> debug . lineno == b -> debug . lineno		30474	1		==			
ANR	30626	MemberAccess	p -> debug . lineno		30474	0					
ANR	30627	PtrMemberAccess	p -> debug		30474	0					
ANR	30628	Identifier	p		30474	0					
ANR	30629	Identifier	debug		30474	1					
ANR	30630	Identifier	lineno		30474	1					
ANR	30631	MemberAccess	b -> debug . lineno		30474	1					
ANR	30632	PtrMemberAccess	b -> debug		30474	0					
ANR	30633	Identifier	b		30474	0					
ANR	30634	Identifier	debug		30474	1					
ANR	30635	Identifier	lineno		30474	1					
ANR	30636	CompoundStatement		24:82:668:668	30474	1					
ANR	30637	ExpressionStatement	"ZEND_MM_SET_MAGIC ( p , MEM_BLOCK_LEAK )"	1259:5:36031:36067	30474	0	True				
ANR	30638	CallExpression	"ZEND_MM_SET_MAGIC ( p , MEM_BLOCK_LEAK )"		30474	0					
ANR	30639	Callee	ZEND_MM_SET_MAGIC		30474	0					
ANR	30640	Identifier	ZEND_MM_SET_MAGIC		30474	0					
ANR	30641	ArgumentList	p		30474	1					
ANR	30642	Argument	p		30474	0					
ANR	30643	Identifier	p		30474	0					
ANR	30644	Argument	MEM_BLOCK_LEAK		30474	1					
ANR	30645	Identifier	MEM_BLOCK_LEAK		30474	0					
ANR	30646	ExpressionStatement	leaks ++	1260:5:36074:36081	30474	1	True				
ANR	30647	PostIncDecOperationExpression	leaks ++		30474	0					
ANR	30648	Identifier	leaks		30474	0					
ANR	30649	IncDec	++		30474	1					
ANR	30650	ElseStatement	else		30474	0					
ANR	30651	IfStatement	if ( p -> magic == MEM_BLOCK_CACHED )		30474	0					
ANR	30652	Condition	p -> magic == MEM_BLOCK_CACHED	1263:14:36121:36148	30474	0	True				
ANR	30653	EqualityExpression	p -> magic == MEM_BLOCK_CACHED		30474	0		==			
ANR	30654	PtrMemberAccess	p -> magic		30474	0					
ANR	30655	Identifier	p		30474	0					
ANR	30656	Identifier	magic		30474	1					
ANR	30657	Identifier	MEM_BLOCK_CACHED		30474	1					
ANR	30658	CompoundStatement		29:44:795:795	30474	1					
ANR	30659	ElseStatement	else		30474	0					
ANR	30660	IfStatement	if ( p -> magic != MEM_BLOCK_LEAK )		30474	0					
ANR	30661	Condition	p -> magic != MEM_BLOCK_LEAK	1266:14:36192:36217	30474	0	True				
ANR	30662	EqualityExpression	p -> magic != MEM_BLOCK_LEAK		30474	0		!=			
ANR	30663	PtrMemberAccess	p -> magic		30474	0					
ANR	30664	Identifier	p		30474	0					
ANR	30665	Identifier	magic		30474	1					
ANR	30666	Identifier	MEM_BLOCK_LEAK		30474	1					
ANR	30667	CompoundStatement		32:42:864:864	30474	1					
ANR	30668	ExpressionStatement	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"	1267:7:36229:36268	30474	0	True				
ANR	30669	CallExpression	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"		30474	0					
ANR	30670	Callee	zend_mm_panic		30474	0					
ANR	30671	Identifier	zend_mm_panic		30474	0					
ANR	30672	ArgumentList	"""zend_mm_heap corrupted"""		30474	1					
ANR	30673	Argument	"""zend_mm_heap corrupted"""		30474	0					
ANR	30674	PrimaryExpression	"""zend_mm_heap corrupted"""		30474	0					
ANR	30675	ExpressionStatement	p = q	1270:2:36281:36286	30474	4	True				
ANR	30676	AssignmentExpression	p = q		30474	0		=			
ANR	30677	Identifier	p		30474	0					
ANR	30678	Identifier	q		30474	1					
ANR	30679	ReturnStatement	return leaks ;	1272:1:36292:36304	30474	4	True				
ANR	30680	Identifier	leaks		30474	0					
ANR	30681	ReturnType	static long		30474	1					
ANR	30682	Identifier	zend_mm_find_leaks		30474	2					
ANR	30683	ParameterList	"zend_mm_segment * segment , zend_mm_block * b"		30474	3					
ANR	30684	Parameter	zend_mm_segment * segment	1234:31:35311:35334	30474	0	True				
ANR	30685	ParameterType	zend_mm_segment *		30474	0					
ANR	30686	Identifier	segment		30474	1					
ANR	30687	Parameter	zend_mm_block * b	1234:57:35337:35352	30474	1	True				
ANR	30688	ParameterType	zend_mm_block *		30474	0					
ANR	30689	Identifier	b		30474	1					
ANR	30690	CFGEntryNode	ENTRY		30474		True				
ANR	30691	CFGExitNode	EXIT		30474		True				
ANR	30692	Symbol	p -> info		30474						
ANR	30693	Symbol	p -> debug . filename		30474						
ANR	30694	Symbol	p -> debug		30474						
ANR	30695	Symbol	p -> info . _size		30474						
ANR	30696	Symbol	leaks		30474						
ANR	30697	Symbol	b -> debug . filename		30474						
ANR	30698	Symbol	MEM_BLOCK_LEAK		30474						
ANR	30699	Symbol	MEM_BLOCK_VALID		30474						
ANR	30700	Symbol	segment		30474						
ANR	30701	Symbol	q -> info		30474						
ANR	30702	Symbol	p -> magic		30474						
ANR	30703	Symbol	b		30474						
ANR	30704	Symbol	MEM_BLOCK_GUARD		30474						
ANR	30705	Symbol	ZEND_MM_IS_GUARD_BLOCK		30474						
ANR	30706	Symbol	b -> debug . lineno		30474						
ANR	30707	Symbol	b -> debug		30474						
ANR	30708	Symbol	* b		30474						
ANR	30709	Symbol	p -> debug . lineno		30474						
ANR	30710	Symbol	p		30474						
ANR	30711	Symbol	q		30474						
ANR	30712	Symbol	q -> info . _prev		30474						
ANR	30713	Symbol	MEM_BLOCK_CACHED		30474						
ANR	30714	Symbol	ZEND_MM_IS_FREE_BLOCK		30474						
ANR	30715	Symbol	ZEND_MM_NEXT_BLOCK		30474						
ANR	30716	Symbol	ZEND_MM_ALIGNED_SEGMENT_SIZE		30474						
ANR	30717	Symbol	segment -> size		30474						
ANR	30718	Symbol	* segment		30474						
ANR	30719	Symbol	* p		30474						
ANR	30720	Symbol	* q		30474						
ANR	30721	Symbol	segment -> next_segment		30474						
ANR	30722	DeclStmt									
ANR	30723	Decl							zend_mm_segment	zend_mm_segment *	segment
ANR	30724	DeclStmt									
ANR	30725	Decl							zend_mm_block	zend_mm_block *	p
ANR	30726	Decl							zend_mm_block	zend_mm_block *	q
ANR	30727	DeclStmt									
ANR	30728	Decl							zend_uint	zend_uint	total
ANR	30729	DeclStmt									
ANR	30730	Decl							long	long	repeated
ANR	30731	DeclStmt									
ANR	30732	Decl							zend_leak_info	zend_leak_info	leak
ANR	30733	Function	zend_mm_check_ptr	1335:0:37988:44813							
ANR	30734	FunctionDef	"zend_mm_check_ptr (zend_mm_heap * heap , void * ptr , int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		30733	0					
ANR	30735	CompoundStatement		1336:0:38101:44813	30733	0					
ANR	30736	IdentifierDeclStatement	zend_mm_block * p ;	1337:1:38104:38120	30733	0	True				
ANR	30737	IdentifierDecl	* p		30733	0					
ANR	30738	IdentifierDeclType	zend_mm_block *		30733	0					
ANR	30739	Identifier	p		30733	1					
ANR	30740	IdentifierDeclStatement	int no_cache_notice = 0 ;	1338:1:38123:38146	30733	1	True				
ANR	30741	IdentifierDecl	no_cache_notice = 0		30733	0					
ANR	30742	IdentifierDeclType	int		30733	0					
ANR	30743	Identifier	no_cache_notice		30733	1					
ANR	30744	AssignmentExpression	no_cache_notice = 0		30733	2		=			
ANR	30745	Identifier	no_cache_notice		30733	0					
ANR	30746	PrimaryExpression	0		30733	1					
ANR	30747	IdentifierDeclStatement	int had_problems = 0 ;	1339:1:38149:38169	30733	2	True				
ANR	30748	IdentifierDecl	had_problems = 0		30733	0					
ANR	30749	IdentifierDeclType	int		30733	0					
ANR	30750	Identifier	had_problems		30733	1					
ANR	30751	AssignmentExpression	had_problems = 0		30733	2		=			
ANR	30752	Identifier	had_problems		30733	0					
ANR	30753	PrimaryExpression	0		30733	1					
ANR	30754	IdentifierDeclStatement	int valid_beginning = 1 ;	1340:1:38172:38195	30733	3	True				
ANR	30755	IdentifierDecl	valid_beginning = 1		30733	0					
ANR	30756	IdentifierDeclType	int		30733	0					
ANR	30757	Identifier	valid_beginning		30733	1					
ANR	30758	AssignmentExpression	valid_beginning = 1		30733	2		=			
ANR	30759	Identifier	valid_beginning		30733	0					
ANR	30760	PrimaryExpression	1		30733	1					
ANR	30761	IfStatement	if ( silent == 2 )		30733	4					
ANR	30762	Condition	silent == 2	1342:5:38203:38211	30733	0	True				
ANR	30763	EqualityExpression	silent == 2		30733	0		==			
ANR	30764	Identifier	silent		30733	0					
ANR	30765	PrimaryExpression	2		30733	1					
ANR	30766	CompoundStatement		7:16:112:112	30733	1					
ANR	30767	ExpressionStatement	silent = 1	1343:2:38218:38228	30733	0	True				
ANR	30768	AssignmentExpression	silent = 1		30733	0		=			
ANR	30769	Identifier	silent		30733	0					
ANR	30770	PrimaryExpression	1		30733	1					
ANR	30771	ExpressionStatement	no_cache_notice = 1	1344:2:38232:38251	30733	1	True				
ANR	30772	AssignmentExpression	no_cache_notice = 1		30733	0		=			
ANR	30773	Identifier	no_cache_notice		30733	0					
ANR	30774	PrimaryExpression	1		30733	1					
ANR	30775	ElseStatement	else		30733	0					
ANR	30776	IfStatement	if ( silent == 3 )		30733	0					
ANR	30777	Condition	silent == 3	1345:12:38265:38273	30733	0	True				
ANR	30778	EqualityExpression	silent == 3		30733	0		==			
ANR	30779	Identifier	silent		30733	0					
ANR	30780	PrimaryExpression	3		30733	1					
ANR	30781	CompoundStatement		10:23:174:174	30733	1					
ANR	30782	ExpressionStatement	silent = 0	1346:2:38280:38290	30733	0	True				
ANR	30783	AssignmentExpression	silent = 0		30733	0		=			
ANR	30784	Identifier	silent		30733	0					
ANR	30785	PrimaryExpression	0		30733	1					
ANR	30786	ExpressionStatement	no_cache_notice = 1	1347:2:38294:38313	30733	1	True				
ANR	30787	AssignmentExpression	no_cache_notice = 1		30733	0		=			
ANR	30788	Identifier	no_cache_notice		30733	0					
ANR	30789	PrimaryExpression	1		30733	1					
ANR	30790	IfStatement	if ( ! silent )		30733	5					
ANR	30791	Condition	! silent	1349:5:38323:38329	30733	0	True				
ANR	30792	UnaryOperationExpression	! silent		30733	0					
ANR	30793	UnaryOperator	!		30733	0					
ANR	30794	Identifier	silent		30733	1					
ANR	30795	CompoundStatement		14:14:230:230	30733	1					
ANR	30796	ExpressionStatement	TSRMLS_FETCH ( )	1350:2:38336:38350	30733	0	True				
ANR	30797	CallExpression	TSRMLS_FETCH ( )		30733	0					
ANR	30798	Callee	TSRMLS_FETCH		30733	0					
ANR	30799	Identifier	TSRMLS_FETCH		30733	0					
ANR	30800	ArgumentList			30733	1					
ANR	30801	Statement	zend_message_dispatcher	1352:2:38355:38377	30733	1	True				
ANR	30802	Statement	(	1352:25:38378:38378	30733	2	True				
ANR	30803	Statement	ZMSG_LOG_SCRIPT_NAME	1352:26:38379:38398	30733	3	True				
ANR	30804	Statement	","	1352:46:38399:38399	30733	4	True				
ANR	30805	Statement	NULL	1352:48:38401:38404	30733	5	True				
ANR	30806	Statement	TSRMLS_CC	1352:53:38406:38414	30733	6	True				
ANR	30807	Statement	)	1352:62:38415:38415	30733	7	True				
ANR	30808	ExpressionStatement		1352:63:38416:38416	30733	8	True				
ANR	30809	ExpressionStatement	"zend_debug_alloc_output ( ""---------------------------------------\\n"" )"	1353:2:38420:38488	30733	9	True				
ANR	30810	CallExpression	"zend_debug_alloc_output ( ""---------------------------------------\\n"" )"		30733	0					
ANR	30811	Callee	zend_debug_alloc_output		30733	0					
ANR	30812	Identifier	zend_debug_alloc_output		30733	0					
ANR	30813	ArgumentList	"""---------------------------------------\\n"""		30733	1					
ANR	30814	Argument	"""---------------------------------------\\n"""		30733	0					
ANR	30815	PrimaryExpression	"""---------------------------------------\\n"""		30733	0					
ANR	30816	Statement	zend_debug_alloc_output	1354:2:38492:38514	30733	10	True				
ANR	30817	Statement	(	1354:25:38515:38515	30733	11	True				
ANR	30818	Statement	"""%s(%d) : Block """	1354:26:38516:38532	30733	12	True				
ANR	30819	Statement	PTR_FMT	1354:43:38533:38539	30733	13	True				
ANR	30820	Statement	""" status:\\n"""	1354:50:38540:38551	30733	14	True				
ANR	30821	Statement	ZEND_FILE_LINE_RELAY_CC	1354:63:38553:38575	30733	15	True				
ANR	30822	Statement	","	1354:86:38576:38576	30733	16	True				
ANR	30823	Statement	ptr	1354:88:38578:38580	30733	17	True				
ANR	30824	Statement	)	1354:91:38581:38581	30733	18	True				
ANR	30825	ExpressionStatement		1354:92:38582:38582	30733	19	True				
ANR	30826	IfStatement	if ( __zend_orig_filename )		30733	20					
ANR	30827	Condition	__zend_orig_filename	1355:6:38590:38609	30733	0	True				
ANR	30828	Identifier	__zend_orig_filename		30733	0					
ANR	30829	CompoundStatement		20:28:510:510	30733	1					
ANR	30830	Statement	zend_debug_alloc_output	1356:3:38617:38639	30733	0	True				
ANR	30831	Statement	(	1356:26:38640:38640	30733	1	True				
ANR	30832	Statement	"""%s(%d) : Actual location (location was relayed)\\n"""	1356:27:38641:38691	30733	2	True				
ANR	30833	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1356:79:38693:38720	30733	3	True				
ANR	30834	Statement	)	1356:107:38721:38721	30733	4	True				
ANR	30835	ExpressionStatement		1356:108:38722:38722	30733	5	True				
ANR	30836	IfStatement	if ( ! ptr )		30733	21					
ANR	30837	Condition	! ptr	1358:6:38734:38737	30733	0	True				
ANR	30838	UnaryOperationExpression	! ptr		30733	0					
ANR	30839	UnaryOperator	!		30733	0					
ANR	30840	Identifier	ptr		30733	1					
ANR	30841	CompoundStatement		23:12:638:638	30733	1					
ANR	30842	ExpressionStatement	"zend_debug_alloc_output ( ""NULL\\n"" )"	1359:3:38745:38778	30733	0	True				
ANR	30843	CallExpression	"zend_debug_alloc_output ( ""NULL\\n"" )"		30733	0					
ANR	30844	Callee	zend_debug_alloc_output		30733	0					
ANR	30845	Identifier	zend_debug_alloc_output		30733	0					
ANR	30846	ArgumentList	"""NULL\\n"""		30733	1					
ANR	30847	Argument	"""NULL\\n"""		30733	0					
ANR	30848	PrimaryExpression	"""NULL\\n"""		30733	0					
ANR	30849	ExpressionStatement	"zend_debug_alloc_output ( ""---------------------------------------\\n"" )"	1360:3:38783:38851	30733	1	True				
ANR	30850	CallExpression	"zend_debug_alloc_output ( ""---------------------------------------\\n"" )"		30733	0					
ANR	30851	Callee	zend_debug_alloc_output		30733	0					
ANR	30852	Identifier	zend_debug_alloc_output		30733	0					
ANR	30853	ArgumentList	"""---------------------------------------\\n"""		30733	1					
ANR	30854	Argument	"""---------------------------------------\\n"""		30733	0					
ANR	30855	PrimaryExpression	"""---------------------------------------\\n"""		30733	0					
ANR	30856	ReturnStatement	return 0 ;	1361:3:38856:38864	30733	2	True				
ANR	30857	PrimaryExpression	0		30733	0					
ANR	30858	IfStatement	if ( ! ptr )		30733	6					
ANR	30859	Condition	! ptr	1365:5:38879:38882	30733	0	True				
ANR	30860	UnaryOperationExpression	! ptr		30733	0					
ANR	30861	UnaryOperator	!		30733	0					
ANR	30862	Identifier	ptr		30733	1					
ANR	30863	CompoundStatement		30:11:783:783	30733	1					
ANR	30864	IfStatement	if ( silent )		30733	0					
ANR	30865	Condition	silent	1366:6:38893:38898	30733	0	True				
ANR	30866	Identifier	silent		30733	0					
ANR	30867	CompoundStatement		31:14:799:799	30733	1					
ANR	30868	Statement	return	1367:3:38906:38911	30733	0	True				
ANR	30869	Statement	zend_mm_check_ptr	1367:10:38913:38929	30733	1	True				
ANR	30870	Statement	(	1367:27:38930:38930	30733	2	True				
ANR	30871	Statement	heap	1367:28:38931:38934	30733	3	True				
ANR	30872	Statement	","	1367:32:38935:38935	30733	4	True				
ANR	30873	Statement	ptr	1367:34:38937:38939	30733	5	True				
ANR	30874	Statement	","	1367:37:38940:38940	30733	6	True				
ANR	30875	Statement	0	1367:39:38942:38942	30733	7	True				
ANR	30876	Statement	ZEND_FILE_LINE_RELAY_CC	1367:41:38944:38966	30733	8	True				
ANR	30877	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1367:65:38968:38995	30733	9	True				
ANR	30878	Statement	)	1367:93:38996:38996	30733	10	True				
ANR	30879	ExpressionStatement		1367:94:38997:38997	30733	11	True				
ANR	30880	ExpressionStatement	p = ZEND_MM_HEADER_OF ( ptr )	1371:1:39008:39034	30733	7	True				
ANR	30881	AssignmentExpression	p = ZEND_MM_HEADER_OF ( ptr )		30733	0		=			
ANR	30882	Identifier	p		30733	0					
ANR	30883	CallExpression	ZEND_MM_HEADER_OF ( ptr )		30733	1					
ANR	30884	Callee	ZEND_MM_HEADER_OF		30733	0					
ANR	30885	Identifier	ZEND_MM_HEADER_OF		30733	0					
ANR	30886	ArgumentList	ptr		30733	1					
ANR	30887	Argument	ptr		30733	0					
ANR	30888	Identifier	ptr		30733	0					
ANR	30889	IfStatement	if ( ZEND_MM_BAD_THREAD_ID ( p ) )		30733	8					
ANR	30890	Condition	ZEND_MM_BAD_THREAD_ID ( p )	1374:5:39053:39076	30733	0	True				
ANR	30891	CallExpression	ZEND_MM_BAD_THREAD_ID ( p )		30733	0					
ANR	30892	Callee	ZEND_MM_BAD_THREAD_ID		30733	0					
ANR	30893	Identifier	ZEND_MM_BAD_THREAD_ID		30733	0					
ANR	30894	ArgumentList	p		30733	1					
ANR	30895	Argument	p		30733	0					
ANR	30896	Identifier	p		30733	0					
ANR	30897	CompoundStatement		39:31:977:977	30733	1					
ANR	30898	IfStatement	if ( ! silent )		30733	0					
ANR	30899	Condition	! silent	1375:6:39087:39093	30733	0	True				
ANR	30900	UnaryOperationExpression	! silent		30733	0					
ANR	30901	UnaryOperator	!		30733	0					
ANR	30902	Identifier	silent		30733	1					
ANR	30903	CompoundStatement		40:15:994:994	30733	1					
ANR	30904	ExpressionStatement	"zend_debug_alloc_output ( ""Invalid pointer: ((thread_id=0x%0.8X) != (expected=0x%0.8X))\\n"" , ( long ) p -> thread_id , ( long ) tsrm_thread_id ( ) )"	1376:3:39101:39234	30733	0	True				
ANR	30905	CallExpression	"zend_debug_alloc_output ( ""Invalid pointer: ((thread_id=0x%0.8X) != (expected=0x%0.8X))\\n"" , ( long ) p -> thread_id , ( long ) tsrm_thread_id ( ) )"		30733	0					
ANR	30906	Callee	zend_debug_alloc_output		30733	0					
ANR	30907	Identifier	zend_debug_alloc_output		30733	0					
ANR	30908	ArgumentList	"""Invalid pointer: ((thread_id=0x%0.8X) != (expected=0x%0.8X))\\n"""		30733	1					
ANR	30909	Argument	"""Invalid pointer: ((thread_id=0x%0.8X) != (expected=0x%0.8X))\\n"""		30733	0					
ANR	30910	PrimaryExpression	"""Invalid pointer: ((thread_id=0x%0.8X) != (expected=0x%0.8X))\\n"""		30733	0					
ANR	30911	Argument	( long ) p -> thread_id		30733	1					
ANR	30912	CastExpression	( long ) p -> thread_id		30733	0					
ANR	30913	CastTarget	long		30733	0					
ANR	30914	PtrMemberAccess	p -> thread_id		30733	1					
ANR	30915	Identifier	p		30733	0					
ANR	30916	Identifier	thread_id		30733	1					
ANR	30917	Argument	( long ) tsrm_thread_id ( )		30733	2					
ANR	30918	CastExpression	( long ) tsrm_thread_id ( )		30733	0					
ANR	30919	CastTarget	long		30733	0					
ANR	30920	CallExpression	tsrm_thread_id ( )		30733	1					
ANR	30921	Callee	tsrm_thread_id		30733	0					
ANR	30922	Identifier	tsrm_thread_id		30733	0					
ANR	30923	ArgumentList			30733	1					
ANR	30924	ExpressionStatement	had_problems = 1	1377:3:39239:39255	30733	1	True				
ANR	30925	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	30926	Identifier	had_problems		30733	0					
ANR	30927	PrimaryExpression	1		30733	1					
ANR	30928	ElseStatement	else		30733	0					
ANR	30929	CompoundStatement		43:9:1164:1164	30733	0					
ANR	30930	Statement	return	1379:3:39271:39276	30733	0	True				
ANR	30931	Statement	zend_mm_check_ptr	1379:10:39278:39294	30733	1	True				
ANR	30932	Statement	(	1379:27:39295:39295	30733	2	True				
ANR	30933	Statement	heap	1379:28:39296:39299	30733	3	True				
ANR	30934	Statement	","	1379:32:39300:39300	30733	4	True				
ANR	30935	Statement	ptr	1379:34:39302:39304	30733	5	True				
ANR	30936	Statement	","	1379:37:39305:39305	30733	6	True				
ANR	30937	Statement	0	1379:39:39307:39307	30733	7	True				
ANR	30938	Statement	ZEND_FILE_LINE_RELAY_CC	1379:41:39309:39331	30733	8	True				
ANR	30939	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1379:65:39333:39360	30733	9	True				
ANR	30940	Statement	)	1379:93:39361:39361	30733	10	True				
ANR	30941	ExpressionStatement		1379:94:39362:39362	30733	11	True				
ANR	30942	IfStatement	if ( p -> info . _size != ZEND_MM_NEXT_BLOCK ( p ) -> info . _prev )		30733	9					
ANR	30943	Condition	p -> info . _size != ZEND_MM_NEXT_BLOCK ( p ) -> info . _prev	1384:5:39384:39433	30733	0	True				
ANR	30944	EqualityExpression	p -> info . _size != ZEND_MM_NEXT_BLOCK ( p ) -> info . _prev		30733	0		!=			
ANR	30945	MemberAccess	p -> info . _size		30733	0					
ANR	30946	PtrMemberAccess	p -> info		30733	0					
ANR	30947	Identifier	p		30733	0					
ANR	30948	Identifier	info		30733	1					
ANR	30949	Identifier	_size		30733	1					
ANR	30950	MemberAccess	ZEND_MM_NEXT_BLOCK ( p ) -> info . _prev		30733	1					
ANR	30951	PtrMemberAccess	ZEND_MM_NEXT_BLOCK ( p ) -> info		30733	0					
ANR	30952	CallExpression	ZEND_MM_NEXT_BLOCK ( p )		30733	0					
ANR	30953	Callee	ZEND_MM_NEXT_BLOCK		30733	0					
ANR	30954	Identifier	ZEND_MM_NEXT_BLOCK		30733	0					
ANR	30955	ArgumentList	p		30733	1					
ANR	30956	Argument	p		30733	0					
ANR	30957	Identifier	p		30733	0					
ANR	30958	Identifier	info		30733	1					
ANR	30959	Identifier	_prev		30733	1					
ANR	30960	CompoundStatement		49:57:1334:1334	30733	1					
ANR	30961	IfStatement	if ( ! silent )		30733	0					
ANR	30962	Condition	! silent	1385:6:39444:39450	30733	0	True				
ANR	30963	UnaryOperationExpression	! silent		30733	0					
ANR	30964	UnaryOperator	!		30733	0					
ANR	30965	Identifier	silent		30733	1					
ANR	30966	CompoundStatement		50:15:1351:1351	30733	1					
ANR	30967	Statement	zend_debug_alloc_output	1386:3:39458:39480	30733	0	True				
ANR	30968	Statement	(	1386:26:39481:39481	30733	1	True				
ANR	30969	Statement	"""Invalid pointer: ((size="""	1386:27:39482:39507	30733	2	True				
ANR	30970	Statement	PTR_FMT	1386:53:39508:39514	30733	3	True				
ANR	30971	Statement	""") != (next.prev="""	1386:60:39515:39532	30733	4	True				
ANR	30972	Statement	PTR_FMT	1386:78:39533:39539	30733	5	True				
ANR	30973	Statement	"""))\\n"""	1386:85:39540:39545	30733	6	True				
ANR	30974	Statement	","	1386:91:39546:39546	30733	7	True				
ANR	30975	Statement	p	1386:93:39548:39548	30733	8	True				
ANR	30976	Statement	->	1386:94:39549:39550	30733	9	True				
ANR	30977	Statement	info	1386:96:39551:39554	30733	10	True				
ANR	30978	Statement	.	1386:100:39555:39555	30733	11	True				
ANR	30979	Statement	_size	1386:101:39556:39560	30733	12	True				
ANR	30980	Statement	","	1386:106:39561:39561	30733	13	True				
ANR	30981	Statement	ZEND_MM_NEXT_BLOCK	1386:108:39563:39580	30733	14	True				
ANR	30982	Statement	(	1386:126:39581:39581	30733	15	True				
ANR	30983	Statement	p	1386:127:39582:39582	30733	16	True				
ANR	30984	Statement	)	1386:128:39583:39583	30733	17	True				
ANR	30985	Statement	->	1386:129:39584:39585	30733	18	True				
ANR	30986	Statement	info	1386:131:39586:39589	30733	19	True				
ANR	30987	Statement	.	1386:135:39590:39590	30733	20	True				
ANR	30988	Statement	_prev	1386:136:39591:39595	30733	21	True				
ANR	30989	Statement	)	1386:141:39596:39596	30733	22	True				
ANR	30990	ExpressionStatement		1386:142:39597:39597	30733	23	True				
ANR	30991	ExpressionStatement	had_problems = 1	1387:3:39602:39618	30733	24	True				
ANR	30992	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	30993	Identifier	had_problems		30733	0					
ANR	30994	PrimaryExpression	1		30733	1					
ANR	30995	ElseStatement	else		30733	0					
ANR	30996	CompoundStatement		53:9:1527:1527	30733	0					
ANR	30997	Statement	return	1389:3:39634:39639	30733	0	True				
ANR	30998	Statement	zend_mm_check_ptr	1389:10:39641:39657	30733	1	True				
ANR	30999	Statement	(	1389:27:39658:39658	30733	2	True				
ANR	31000	Statement	heap	1389:28:39659:39662	30733	3	True				
ANR	31001	Statement	","	1389:32:39663:39663	30733	4	True				
ANR	31002	Statement	ptr	1389:34:39665:39667	30733	5	True				
ANR	31003	Statement	","	1389:37:39668:39668	30733	6	True				
ANR	31004	Statement	0	1389:39:39670:39670	30733	7	True				
ANR	31005	Statement	ZEND_FILE_LINE_RELAY_CC	1389:41:39672:39694	30733	8	True				
ANR	31006	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1389:65:39696:39723	30733	9	True				
ANR	31007	Statement	)	1389:93:39724:39724	30733	10	True				
ANR	31008	ExpressionStatement		1389:94:39725:39725	30733	11	True				
ANR	31009	IfStatement	if ( p -> info . _prev != ZEND_MM_GUARD_BLOCK && ZEND_MM_PREV_BLOCK ( p ) -> info . _size != p -> info . _prev )		30733	10					
ANR	31010	Condition	p -> info . _prev != ZEND_MM_GUARD_BLOCK && ZEND_MM_PREV_BLOCK ( p ) -> info . _size != p -> info . _prev	1392:5:39739:39833	30733	0	True				
ANR	31011	AndExpression	p -> info . _prev != ZEND_MM_GUARD_BLOCK && ZEND_MM_PREV_BLOCK ( p ) -> info . _size != p -> info . _prev		30733	0		&&			
ANR	31012	EqualityExpression	p -> info . _prev != ZEND_MM_GUARD_BLOCK		30733	0		!=			
ANR	31013	MemberAccess	p -> info . _prev		30733	0					
ANR	31014	PtrMemberAccess	p -> info		30733	0					
ANR	31015	Identifier	p		30733	0					
ANR	31016	Identifier	info		30733	1					
ANR	31017	Identifier	_prev		30733	1					
ANR	31018	Identifier	ZEND_MM_GUARD_BLOCK		30733	1					
ANR	31019	EqualityExpression	ZEND_MM_PREV_BLOCK ( p ) -> info . _size != p -> info . _prev		30733	1		!=			
ANR	31020	MemberAccess	ZEND_MM_PREV_BLOCK ( p ) -> info . _size		30733	0					
ANR	31021	PtrMemberAccess	ZEND_MM_PREV_BLOCK ( p ) -> info		30733	0					
ANR	31022	CallExpression	ZEND_MM_PREV_BLOCK ( p )		30733	0					
ANR	31023	Callee	ZEND_MM_PREV_BLOCK		30733	0					
ANR	31024	Identifier	ZEND_MM_PREV_BLOCK		30733	0					
ANR	31025	ArgumentList	p		30733	1					
ANR	31026	Argument	p		30733	0					
ANR	31027	Identifier	p		30733	0					
ANR	31028	Identifier	info		30733	1					
ANR	31029	Identifier	_size		30733	1					
ANR	31030	MemberAccess	p -> info . _prev		30733	1					
ANR	31031	PtrMemberAccess	p -> info		30733	0					
ANR	31032	Identifier	p		30733	0					
ANR	31033	Identifier	info		30733	1					
ANR	31034	Identifier	_prev		30733	1					
ANR	31035	CompoundStatement		58:57:1734:1734	30733	1					
ANR	31036	IfStatement	if ( ! silent )		30733	0					
ANR	31037	Condition	! silent	1394:6:39844:39850	30733	0	True				
ANR	31038	UnaryOperationExpression	! silent		30733	0					
ANR	31039	UnaryOperator	!		30733	0					
ANR	31040	Identifier	silent		30733	1					
ANR	31041	CompoundStatement		59:15:1751:1751	30733	1					
ANR	31042	Statement	zend_debug_alloc_output	1395:3:39858:39880	30733	0	True				
ANR	31043	Statement	(	1395:26:39881:39881	30733	1	True				
ANR	31044	Statement	"""Invalid pointer: ((prev="""	1395:27:39882:39907	30733	2	True				
ANR	31045	Statement	PTR_FMT	1395:53:39908:39914	30733	3	True				
ANR	31046	Statement	""") != (prev.size="""	1395:60:39915:39932	30733	4	True				
ANR	31047	Statement	PTR_FMT	1395:78:39933:39939	30733	5	True				
ANR	31048	Statement	"""))\\n"""	1395:85:39940:39945	30733	6	True				
ANR	31049	Statement	","	1395:91:39946:39946	30733	7	True				
ANR	31050	Statement	p	1395:93:39948:39948	30733	8	True				
ANR	31051	Statement	->	1395:94:39949:39950	30733	9	True				
ANR	31052	Statement	info	1395:96:39951:39954	30733	10	True				
ANR	31053	Statement	.	1395:100:39955:39955	30733	11	True				
ANR	31054	Statement	_prev	1395:101:39956:39960	30733	12	True				
ANR	31055	Statement	","	1395:106:39961:39961	30733	13	True				
ANR	31056	Statement	ZEND_MM_PREV_BLOCK	1395:108:39963:39980	30733	14	True				
ANR	31057	Statement	(	1395:126:39981:39981	30733	15	True				
ANR	31058	Statement	p	1395:127:39982:39982	30733	16	True				
ANR	31059	Statement	)	1395:128:39983:39983	30733	17	True				
ANR	31060	Statement	->	1395:129:39984:39985	30733	18	True				
ANR	31061	Statement	info	1395:131:39986:39989	30733	19	True				
ANR	31062	Statement	.	1395:135:39990:39990	30733	20	True				
ANR	31063	Statement	_size	1395:136:39991:39995	30733	21	True				
ANR	31064	Statement	)	1395:141:39996:39996	30733	22	True				
ANR	31065	ExpressionStatement		1395:142:39997:39997	30733	23	True				
ANR	31066	ExpressionStatement	had_problems = 1	1396:3:40002:40018	30733	24	True				
ANR	31067	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	31068	Identifier	had_problems		30733	0					
ANR	31069	PrimaryExpression	1		30733	1					
ANR	31070	ElseStatement	else		30733	0					
ANR	31071	CompoundStatement		62:9:1927:1927	30733	0					
ANR	31072	Statement	return	1398:3:40034:40039	30733	0	True				
ANR	31073	Statement	zend_mm_check_ptr	1398:10:40041:40057	30733	1	True				
ANR	31074	Statement	(	1398:27:40058:40058	30733	2	True				
ANR	31075	Statement	heap	1398:28:40059:40062	30733	3	True				
ANR	31076	Statement	","	1398:32:40063:40063	30733	4	True				
ANR	31077	Statement	ptr	1398:34:40065:40067	30733	5	True				
ANR	31078	Statement	","	1398:37:40068:40068	30733	6	True				
ANR	31079	Statement	0	1398:39:40070:40070	30733	7	True				
ANR	31080	Statement	ZEND_FILE_LINE_RELAY_CC	1398:41:40072:40094	30733	8	True				
ANR	31081	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1398:65:40096:40123	30733	9	True				
ANR	31082	Statement	)	1398:93:40124:40124	30733	10	True				
ANR	31083	ExpressionStatement		1398:94:40125:40125	30733	11	True				
ANR	31084	IfStatement	if ( had_problems )		30733	11					
ANR	31085	Condition	had_problems	1402:5:40140:40151	30733	0	True				
ANR	31086	Identifier	had_problems		30733	0					
ANR	31087	CompoundStatement		67:19:2052:2052	30733	1					
ANR	31088	ExpressionStatement	"zend_debug_alloc_output ( ""---------------------------------------\\n"" )"	1403:2:40158:40226	30733	0	True				
ANR	31089	CallExpression	"zend_debug_alloc_output ( ""---------------------------------------\\n"" )"		30733	0					
ANR	31090	Callee	zend_debug_alloc_output		30733	0					
ANR	31091	Identifier	zend_debug_alloc_output		30733	0					
ANR	31092	ArgumentList	"""---------------------------------------\\n"""		30733	1					
ANR	31093	Argument	"""---------------------------------------\\n"""		30733	0					
ANR	31094	PrimaryExpression	"""---------------------------------------\\n"""		30733	0					
ANR	31095	ReturnStatement	return 0 ;	1404:2:40230:40238	30733	1	True				
ANR	31096	PrimaryExpression	0		30733	0					
ANR	31097	IfStatement	if ( ! silent )		30733	12					
ANR	31098	Condition	! silent	1407:5:40249:40255	30733	0	True				
ANR	31099	UnaryOperationExpression	! silent		30733	0					
ANR	31100	UnaryOperator	!		30733	0					
ANR	31101	Identifier	silent		30733	1					
ANR	31102	CompoundStatement		72:14:2156:2156	30733	1					
ANR	31103	ExpressionStatement	"zend_debug_alloc_output ( ""%10s\\t"" , ""Beginning:  "" )"	1408:2:40262:40310	30733	0	True				
ANR	31104	CallExpression	"zend_debug_alloc_output ( ""%10s\\t"" , ""Beginning:  "" )"		30733	0					
ANR	31105	Callee	zend_debug_alloc_output		30733	0					
ANR	31106	Identifier	zend_debug_alloc_output		30733	0					
ANR	31107	ArgumentList	"""%10s\\t"""		30733	1					
ANR	31108	Argument	"""%10s\\t"""		30733	0					
ANR	31109	PrimaryExpression	"""%10s\\t"""		30733	0					
ANR	31110	Argument	"""Beginning:  """		30733	1					
ANR	31111	PrimaryExpression	"""Beginning:  """		30733	0					
ANR	31112	IfStatement	if ( ! ZEND_MM_IS_USED_BLOCK ( p ) )		30733	13					
ANR	31113	Condition	! ZEND_MM_IS_USED_BLOCK ( p )	1411:5:40321:40345	30733	0	True				
ANR	31114	UnaryOperationExpression	! ZEND_MM_IS_USED_BLOCK ( p )		30733	0					
ANR	31115	UnaryOperator	!		30733	0					
ANR	31116	CallExpression	ZEND_MM_IS_USED_BLOCK ( p )		30733	1					
ANR	31117	Callee	ZEND_MM_IS_USED_BLOCK		30733	0					
ANR	31118	Identifier	ZEND_MM_IS_USED_BLOCK		30733	0					
ANR	31119	ArgumentList	p		30733	1					
ANR	31120	Argument	p		30733	0					
ANR	31121	Identifier	p		30733	0					
ANR	31122	CompoundStatement		76:32:2246:2246	30733	1					
ANR	31123	IfStatement	if ( ! silent )		30733	0					
ANR	31124	Condition	! silent	1412:6:40356:40362	30733	0	True				
ANR	31125	UnaryOperationExpression	! silent		30733	0					
ANR	31126	UnaryOperator	!		30733	0					
ANR	31127	Identifier	silent		30733	1					
ANR	31128	CompoundStatement		77:15:2263:2263	30733	1					
ANR	31129	IfStatement	if ( p -> magic != MEM_BLOCK_FREED )		30733	0					
ANR	31130	Condition	p -> magic != MEM_BLOCK_FREED	1413:7:40374:40400	30733	0	True				
ANR	31131	EqualityExpression	p -> magic != MEM_BLOCK_FREED		30733	0		!=			
ANR	31132	PtrMemberAccess	p -> magic		30733	0					
ANR	31133	Identifier	p		30733	0					
ANR	31134	Identifier	magic		30733	1					
ANR	31135	Identifier	MEM_BLOCK_FREED		30733	1					
ANR	31136	CompoundStatement		78:36:2301:2301	30733	1					
ANR	31137	ExpressionStatement	"zend_debug_alloc_output ( ""Freed (magic=0x%0.8X, expected=0x%0.8X)\\n"" , p -> magic , MEM_BLOCK_FREED )"	1414:4:40409:40504	30733	0	True				
ANR	31138	CallExpression	"zend_debug_alloc_output ( ""Freed (magic=0x%0.8X, expected=0x%0.8X)\\n"" , p -> magic , MEM_BLOCK_FREED )"		30733	0					
ANR	31139	Callee	zend_debug_alloc_output		30733	0					
ANR	31140	Identifier	zend_debug_alloc_output		30733	0					
ANR	31141	ArgumentList	"""Freed (magic=0x%0.8X, expected=0x%0.8X)\\n"""		30733	1					
ANR	31142	Argument	"""Freed (magic=0x%0.8X, expected=0x%0.8X)\\n"""		30733	0					
ANR	31143	PrimaryExpression	"""Freed (magic=0x%0.8X, expected=0x%0.8X)\\n"""		30733	0					
ANR	31144	Argument	p -> magic		30733	1					
ANR	31145	PtrMemberAccess	p -> magic		30733	0					
ANR	31146	Identifier	p		30733	0					
ANR	31147	Identifier	magic		30733	1					
ANR	31148	Argument	MEM_BLOCK_FREED		30733	2					
ANR	31149	Identifier	MEM_BLOCK_FREED		30733	0					
ANR	31150	ElseStatement	else		30733	0					
ANR	31151	CompoundStatement		80:10:2414:2414	30733	0					
ANR	31152	ExpressionStatement	"zend_debug_alloc_output ( ""Freed\\n"" )"	1416:4:40522:40556	30733	0	True				
ANR	31153	CallExpression	"zend_debug_alloc_output ( ""Freed\\n"" )"		30733	0					
ANR	31154	Callee	zend_debug_alloc_output		30733	0					
ANR	31155	Identifier	zend_debug_alloc_output		30733	0					
ANR	31156	ArgumentList	"""Freed\\n"""		30733	1					
ANR	31157	Argument	"""Freed\\n"""		30733	0					
ANR	31158	PrimaryExpression	"""Freed\\n"""		30733	0					
ANR	31159	ExpressionStatement	had_problems = 1	1418:3:40566:40582	30733	1	True				
ANR	31160	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	31161	Identifier	had_problems		30733	0					
ANR	31162	PrimaryExpression	1		30733	1					
ANR	31163	ElseStatement	else		30733	0					
ANR	31164	CompoundStatement		84:9:2491:2491	30733	0					
ANR	31165	Statement	return	1420:3:40598:40603	30733	0	True				
ANR	31166	Statement	zend_mm_check_ptr	1420:10:40605:40621	30733	1	True				
ANR	31167	Statement	(	1420:27:40622:40622	30733	2	True				
ANR	31168	Statement	heap	1420:28:40623:40626	30733	3	True				
ANR	31169	Statement	","	1420:32:40627:40627	30733	4	True				
ANR	31170	Statement	ptr	1420:34:40629:40631	30733	5	True				
ANR	31171	Statement	","	1420:37:40632:40632	30733	6	True				
ANR	31172	Statement	0	1420:39:40634:40634	30733	7	True				
ANR	31173	Statement	ZEND_FILE_LINE_RELAY_CC	1420:41:40636:40658	30733	8	True				
ANR	31174	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1420:65:40660:40687	30733	9	True				
ANR	31175	Statement	)	1420:93:40688:40688	30733	10	True				
ANR	31176	ExpressionStatement		1420:94:40689:40689	30733	11	True				
ANR	31177	ElseStatement	else		30733	0					
ANR	31178	IfStatement	if ( ZEND_MM_IS_GUARD_BLOCK ( p ) )		30733	0					
ANR	31179	Condition	ZEND_MM_IS_GUARD_BLOCK ( p )	1422:12:40707:40731	30733	0	True				
ANR	31180	CallExpression	ZEND_MM_IS_GUARD_BLOCK ( p )		30733	0					
ANR	31181	Callee	ZEND_MM_IS_GUARD_BLOCK		30733	0					
ANR	31182	Identifier	ZEND_MM_IS_GUARD_BLOCK		30733	0					
ANR	31183	ArgumentList	p		30733	1					
ANR	31184	Argument	p		30733	0					
ANR	31185	Identifier	p		30733	0					
ANR	31186	CompoundStatement		87:39:2632:2632	30733	1					
ANR	31187	IfStatement	if ( ! silent )		30733	0					
ANR	31188	Condition	! silent	1423:6:40742:40748	30733	0	True				
ANR	31189	UnaryOperationExpression	! silent		30733	0					
ANR	31190	UnaryOperator	!		30733	0					
ANR	31191	Identifier	silent		30733	1					
ANR	31192	CompoundStatement		88:15:2649:2649	30733	1					
ANR	31193	IfStatement	if ( p -> magic != MEM_BLOCK_FREED )		30733	0					
ANR	31194	Condition	p -> magic != MEM_BLOCK_FREED	1424:7:40760:40786	30733	0	True				
ANR	31195	EqualityExpression	p -> magic != MEM_BLOCK_FREED		30733	0		!=			
ANR	31196	PtrMemberAccess	p -> magic		30733	0					
ANR	31197	Identifier	p		30733	0					
ANR	31198	Identifier	magic		30733	1					
ANR	31199	Identifier	MEM_BLOCK_FREED		30733	1					
ANR	31200	CompoundStatement		89:36:2687:2687	30733	1					
ANR	31201	ExpressionStatement	"zend_debug_alloc_output ( ""Guard (magic=0x%0.8X, expected=0x%0.8X)\\n"" , p -> magic , MEM_BLOCK_FREED )"	1425:4:40795:40890	30733	0	True				
ANR	31202	CallExpression	"zend_debug_alloc_output ( ""Guard (magic=0x%0.8X, expected=0x%0.8X)\\n"" , p -> magic , MEM_BLOCK_FREED )"		30733	0					
ANR	31203	Callee	zend_debug_alloc_output		30733	0					
ANR	31204	Identifier	zend_debug_alloc_output		30733	0					
ANR	31205	ArgumentList	"""Guard (magic=0x%0.8X, expected=0x%0.8X)\\n"""		30733	1					
ANR	31206	Argument	"""Guard (magic=0x%0.8X, expected=0x%0.8X)\\n"""		30733	0					
ANR	31207	PrimaryExpression	"""Guard (magic=0x%0.8X, expected=0x%0.8X)\\n"""		30733	0					
ANR	31208	Argument	p -> magic		30733	1					
ANR	31209	PtrMemberAccess	p -> magic		30733	0					
ANR	31210	Identifier	p		30733	0					
ANR	31211	Identifier	magic		30733	1					
ANR	31212	Argument	MEM_BLOCK_FREED		30733	2					
ANR	31213	Identifier	MEM_BLOCK_FREED		30733	0					
ANR	31214	ElseStatement	else		30733	0					
ANR	31215	CompoundStatement		91:10:2800:2800	30733	0					
ANR	31216	ExpressionStatement	"zend_debug_alloc_output ( ""Guard\\n"" )"	1427:4:40908:40942	30733	0	True				
ANR	31217	CallExpression	"zend_debug_alloc_output ( ""Guard\\n"" )"		30733	0					
ANR	31218	Callee	zend_debug_alloc_output		30733	0					
ANR	31219	Identifier	zend_debug_alloc_output		30733	0					
ANR	31220	ArgumentList	"""Guard\\n"""		30733	1					
ANR	31221	Argument	"""Guard\\n"""		30733	0					
ANR	31222	PrimaryExpression	"""Guard\\n"""		30733	0					
ANR	31223	ExpressionStatement	had_problems = 1	1429:3:40952:40968	30733	1	True				
ANR	31224	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	31225	Identifier	had_problems		30733	0					
ANR	31226	PrimaryExpression	1		30733	1					
ANR	31227	ElseStatement	else		30733	0					
ANR	31228	CompoundStatement		95:9:2877:2877	30733	0					
ANR	31229	Statement	return	1431:3:40984:40989	30733	0	True				
ANR	31230	Statement	zend_mm_check_ptr	1431:10:40991:41007	30733	1	True				
ANR	31231	Statement	(	1431:27:41008:41008	30733	2	True				
ANR	31232	Statement	heap	1431:28:41009:41012	30733	3	True				
ANR	31233	Statement	","	1431:32:41013:41013	30733	4	True				
ANR	31234	Statement	ptr	1431:34:41015:41017	30733	5	True				
ANR	31235	Statement	","	1431:37:41018:41018	30733	6	True				
ANR	31236	Statement	0	1431:39:41020:41020	30733	7	True				
ANR	31237	Statement	ZEND_FILE_LINE_RELAY_CC	1431:41:41022:41044	30733	8	True				
ANR	31238	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1431:65:41046:41073	30733	9	True				
ANR	31239	Statement	)	1431:93:41074:41074	30733	10	True				
ANR	31240	ExpressionStatement		1431:94:41075:41075	30733	11	True				
ANR	31241	ElseStatement	else		30733	0					
ANR	31242	CompoundStatement		98:8:2987:2987	30733	0					
ANR	31243	SwitchStatement	switch ( p -> magic )		30733	0					
ANR	31244	Condition	p -> magic	1434:10:41101:41108	30733	0	True				
ANR	31245	PtrMemberAccess	p -> magic		30733	0					
ANR	31246	Identifier	p		30733	0					
ANR	31247	Identifier	magic		30733	1					
ANR	31248	CompoundStatement		99:20:3009:3009	30733	1					
ANR	31249	Label	case MEM_BLOCK_VALID :	1435:3:41116:41136	30733	0	True				
ANR	31250	Identifier	MEM_BLOCK_VALID		30733	0					
ANR	31251	Label	case MEM_BLOCK_LEAK :	1436:3:41141:41160	30733	1	True				
ANR	31252	Identifier	MEM_BLOCK_LEAK		30733	0					
ANR	31253	IfStatement	if ( ! silent )		30733	2					
ANR	31254	Condition	! silent	1437:8:41170:41176	30733	0	True				
ANR	31255	UnaryOperationExpression	! silent		30733	0					
ANR	31256	UnaryOperator	!		30733	0					
ANR	31257	Identifier	silent		30733	1					
ANR	31258	CompoundStatement		102:17:3077:3077	30733	1					
ANR	31259	ExpressionStatement	"zend_debug_alloc_output ( ""OK (allocated on %s:%d, %d bytes)\\n"" , p -> debug . filename , p -> debug . lineno , ( int ) p -> debug . size )"	1438:5:41186:41304	30733	0	True				
ANR	31260	CallExpression	"zend_debug_alloc_output ( ""OK (allocated on %s:%d, %d bytes)\\n"" , p -> debug . filename , p -> debug . lineno , ( int ) p -> debug . size )"		30733	0					
ANR	31261	Callee	zend_debug_alloc_output		30733	0					
ANR	31262	Identifier	zend_debug_alloc_output		30733	0					
ANR	31263	ArgumentList	"""OK (allocated on %s:%d, %d bytes)\\n"""		30733	1					
ANR	31264	Argument	"""OK (allocated on %s:%d, %d bytes)\\n"""		30733	0					
ANR	31265	PrimaryExpression	"""OK (allocated on %s:%d, %d bytes)\\n"""		30733	0					
ANR	31266	Argument	p -> debug . filename		30733	1					
ANR	31267	MemberAccess	p -> debug . filename		30733	0					
ANR	31268	PtrMemberAccess	p -> debug		30733	0					
ANR	31269	Identifier	p		30733	0					
ANR	31270	Identifier	debug		30733	1					
ANR	31271	Identifier	filename		30733	1					
ANR	31272	Argument	p -> debug . lineno		30733	2					
ANR	31273	MemberAccess	p -> debug . lineno		30733	0					
ANR	31274	PtrMemberAccess	p -> debug		30733	0					
ANR	31275	Identifier	p		30733	0					
ANR	31276	Identifier	debug		30733	1					
ANR	31277	Identifier	lineno		30733	1					
ANR	31278	Argument	( int ) p -> debug . size		30733	3					
ANR	31279	CastExpression	( int ) p -> debug . size		30733	0					
ANR	31280	CastTarget	int		30733	0					
ANR	31281	MemberAccess	p -> debug . size		30733	1					
ANR	31282	PtrMemberAccess	p -> debug		30733	0					
ANR	31283	Identifier	p		30733	0					
ANR	31284	Identifier	debug		30733	1					
ANR	31285	Identifier	size		30733	1					
ANR	31286	BreakStatement	break ;	1440:4:41316:41321	30733	3	True				
ANR	31287	Label	case MEM_BLOCK_CACHED :	1441:3:41335:41356	30733	4	True				
ANR	31288	Identifier	MEM_BLOCK_CACHED		30733	0					
ANR	31289	IfStatement	if ( ! no_cache_notice )		30733	5					
ANR	31290	Condition	! no_cache_notice	1442:8:41366:41381	30733	0	True				
ANR	31291	UnaryOperationExpression	! no_cache_notice		30733	0					
ANR	31292	UnaryOperator	!		30733	0					
ANR	31293	Identifier	no_cache_notice		30733	1					
ANR	31294	CompoundStatement		107:26:3282:3282	30733	1					
ANR	31295	IfStatement	if ( ! silent )		30733	0					
ANR	31296	Condition	! silent	1443:9:41395:41401	30733	0	True				
ANR	31297	UnaryOperationExpression	! silent		30733	0					
ANR	31298	UnaryOperator	!		30733	0					
ANR	31299	Identifier	silent		30733	1					
ANR	31300	CompoundStatement		108:18:3302:3302	30733	1					
ANR	31301	ExpressionStatement	"zend_debug_alloc_output ( ""Cached\\n"" )"	1444:6:41412:41447	30733	0	True				
ANR	31302	CallExpression	"zend_debug_alloc_output ( ""Cached\\n"" )"		30733	0					
ANR	31303	Callee	zend_debug_alloc_output		30733	0					
ANR	31304	Identifier	zend_debug_alloc_output		30733	0					
ANR	31305	ArgumentList	"""Cached\\n"""		30733	1					
ANR	31306	Argument	"""Cached\\n"""		30733	0					
ANR	31307	PrimaryExpression	"""Cached\\n"""		30733	0					
ANR	31308	ExpressionStatement	had_problems = 1	1445:6:41455:41471	30733	1	True				
ANR	31309	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	31310	Identifier	had_problems		30733	0					
ANR	31311	PrimaryExpression	1		30733	1					
ANR	31312	ElseStatement	else		30733	0					
ANR	31313	CompoundStatement		111:12:3383:3383	30733	0					
ANR	31314	Statement	return	1447:6:41493:41498	30733	0	True				
ANR	31315	Statement	zend_mm_check_ptr	1447:13:41500:41516	30733	1	True				
ANR	31316	Statement	(	1447:30:41517:41517	30733	2	True				
ANR	31317	Statement	heap	1447:31:41518:41521	30733	3	True				
ANR	31318	Statement	","	1447:35:41522:41522	30733	4	True				
ANR	31319	Statement	ptr	1447:37:41524:41526	30733	5	True				
ANR	31320	Statement	","	1447:40:41527:41527	30733	6	True				
ANR	31321	Statement	0	1447:42:41529:41529	30733	7	True				
ANR	31322	Statement	ZEND_FILE_LINE_RELAY_CC	1447:44:41531:41553	30733	8	True				
ANR	31323	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1447:68:41555:41582	30733	9	True				
ANR	31324	Statement	)	1447:96:41583:41583	30733	10	True				
ANR	31325	ExpressionStatement		1447:97:41584:41584	30733	11	True				
ANR	31326	Label	case MEM_BLOCK_FREED :	1450:3:41602:41622	30733	6	True				
ANR	31327	Identifier	MEM_BLOCK_FREED		30733	0					
ANR	31328	IfStatement	if ( ! silent )		30733	7					
ANR	31329	Condition	! silent	1451:8:41632:41638	30733	0	True				
ANR	31330	UnaryOperationExpression	! silent		30733	0					
ANR	31331	UnaryOperator	!		30733	0					
ANR	31332	Identifier	silent		30733	1					
ANR	31333	CompoundStatement		116:17:3539:3539	30733	1					
ANR	31334	ExpressionStatement	"zend_debug_alloc_output ( ""Freed (invalid)\\n"" )"	1452:5:41648:41692	30733	0	True				
ANR	31335	CallExpression	"zend_debug_alloc_output ( ""Freed (invalid)\\n"" )"		30733	0					
ANR	31336	Callee	zend_debug_alloc_output		30733	0					
ANR	31337	Identifier	zend_debug_alloc_output		30733	0					
ANR	31338	ArgumentList	"""Freed (invalid)\\n"""		30733	1					
ANR	31339	Argument	"""Freed (invalid)\\n"""		30733	0					
ANR	31340	PrimaryExpression	"""Freed (invalid)\\n"""		30733	0					
ANR	31341	ExpressionStatement	had_problems = 1	1453:5:41699:41715	30733	1	True				
ANR	31342	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	31343	Identifier	had_problems		30733	0					
ANR	31344	PrimaryExpression	1		30733	1					
ANR	31345	ElseStatement	else		30733	0					
ANR	31346	CompoundStatement		119:11:3626:3626	30733	0					
ANR	31347	Statement	return	1455:5:41735:41740	30733	0	True				
ANR	31348	Statement	zend_mm_check_ptr	1455:12:41742:41758	30733	1	True				
ANR	31349	Statement	(	1455:29:41759:41759	30733	2	True				
ANR	31350	Statement	heap	1455:30:41760:41763	30733	3	True				
ANR	31351	Statement	","	1455:34:41764:41764	30733	4	True				
ANR	31352	Statement	ptr	1455:36:41766:41768	30733	5	True				
ANR	31353	Statement	","	1455:39:41769:41769	30733	6	True				
ANR	31354	Statement	0	1455:41:41771:41771	30733	7	True				
ANR	31355	Statement	ZEND_FILE_LINE_RELAY_CC	1455:43:41773:41795	30733	8	True				
ANR	31356	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1455:67:41797:41824	30733	9	True				
ANR	31357	Statement	)	1455:95:41825:41825	30733	10	True				
ANR	31358	ExpressionStatement		1455:96:41826:41826	30733	11	True				
ANR	31359	BreakStatement	break ;	1457:4:41838:41843	30733	8	True				
ANR	31360	Label	case MEM_BLOCK_GUARD :	1458:3:41848:41868	30733	9	True				
ANR	31361	Identifier	MEM_BLOCK_GUARD		30733	0					
ANR	31362	IfStatement	if ( ! silent )		30733	10					
ANR	31363	Condition	! silent	1459:8:41878:41884	30733	0	True				
ANR	31364	UnaryOperationExpression	! silent		30733	0					
ANR	31365	UnaryOperator	!		30733	0					
ANR	31366	Identifier	silent		30733	1					
ANR	31367	CompoundStatement		124:17:3785:3785	30733	1					
ANR	31368	ExpressionStatement	"zend_debug_alloc_output ( ""Guard (invalid)\\n"" )"	1460:5:41894:41938	30733	0	True				
ANR	31369	CallExpression	"zend_debug_alloc_output ( ""Guard (invalid)\\n"" )"		30733	0					
ANR	31370	Callee	zend_debug_alloc_output		30733	0					
ANR	31371	Identifier	zend_debug_alloc_output		30733	0					
ANR	31372	ArgumentList	"""Guard (invalid)\\n"""		30733	1					
ANR	31373	Argument	"""Guard (invalid)\\n"""		30733	0					
ANR	31374	PrimaryExpression	"""Guard (invalid)\\n"""		30733	0					
ANR	31375	ExpressionStatement	had_problems = 1	1461:5:41945:41961	30733	1	True				
ANR	31376	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	31377	Identifier	had_problems		30733	0					
ANR	31378	PrimaryExpression	1		30733	1					
ANR	31379	ElseStatement	else		30733	0					
ANR	31380	CompoundStatement		127:11:3872:3872	30733	0					
ANR	31381	Statement	return	1463:5:41981:41986	30733	0	True				
ANR	31382	Statement	zend_mm_check_ptr	1463:12:41988:42004	30733	1	True				
ANR	31383	Statement	(	1463:29:42005:42005	30733	2	True				
ANR	31384	Statement	heap	1463:30:42006:42009	30733	3	True				
ANR	31385	Statement	","	1463:34:42010:42010	30733	4	True				
ANR	31386	Statement	ptr	1463:36:42012:42014	30733	5	True				
ANR	31387	Statement	","	1463:39:42015:42015	30733	6	True				
ANR	31388	Statement	0	1463:41:42017:42017	30733	7	True				
ANR	31389	Statement	ZEND_FILE_LINE_RELAY_CC	1463:43:42019:42041	30733	8	True				
ANR	31390	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1463:67:42043:42070	30733	9	True				
ANR	31391	Statement	)	1463:95:42071:42071	30733	10	True				
ANR	31392	ExpressionStatement		1463:96:42072:42072	30733	11	True				
ANR	31393	BreakStatement	break ;	1465:4:42084:42089	30733	11	True				
ANR	31394	Label	default :	1466:3:42094:42101	30733	12	True				
ANR	31395	Identifier	default		30733	0					
ANR	31396	IfStatement	if ( ! silent )		30733	13					
ANR	31397	Condition	! silent	1467:8:42111:42117	30733	0	True				
ANR	31398	UnaryOperationExpression	! silent		30733	0					
ANR	31399	UnaryOperator	!		30733	0					
ANR	31400	Identifier	silent		30733	1					
ANR	31401	CompoundStatement		132:17:4018:4018	30733	1					
ANR	31402	ExpressionStatement	"zend_debug_alloc_output ( ""Unknown (magic=0x%0.8X, expected=0x%0.8X)\\n"" , p -> magic , MEM_BLOCK_VALID )"	1468:5:42127:42224	30733	0	True				
ANR	31403	CallExpression	"zend_debug_alloc_output ( ""Unknown (magic=0x%0.8X, expected=0x%0.8X)\\n"" , p -> magic , MEM_BLOCK_VALID )"		30733	0					
ANR	31404	Callee	zend_debug_alloc_output		30733	0					
ANR	31405	Identifier	zend_debug_alloc_output		30733	0					
ANR	31406	ArgumentList	"""Unknown (magic=0x%0.8X, expected=0x%0.8X)\\n"""		30733	1					
ANR	31407	Argument	"""Unknown (magic=0x%0.8X, expected=0x%0.8X)\\n"""		30733	0					
ANR	31408	PrimaryExpression	"""Unknown (magic=0x%0.8X, expected=0x%0.8X)\\n"""		30733	0					
ANR	31409	Argument	p -> magic		30733	1					
ANR	31410	PtrMemberAccess	p -> magic		30733	0					
ANR	31411	Identifier	p		30733	0					
ANR	31412	Identifier	magic		30733	1					
ANR	31413	Argument	MEM_BLOCK_VALID		30733	2					
ANR	31414	Identifier	MEM_BLOCK_VALID		30733	0					
ANR	31415	ExpressionStatement	had_problems = 1	1469:5:42231:42247	30733	1	True				
ANR	31416	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	31417	Identifier	had_problems		30733	0					
ANR	31418	PrimaryExpression	1		30733	1					
ANR	31419	ExpressionStatement	valid_beginning = 0	1470:5:42254:42273	30733	2	True				
ANR	31420	AssignmentExpression	valid_beginning = 0		30733	0		=			
ANR	31421	Identifier	valid_beginning		30733	0					
ANR	31422	PrimaryExpression	0		30733	1					
ANR	31423	ElseStatement	else		30733	0					
ANR	31424	CompoundStatement		136:11:4184:4184	30733	0					
ANR	31425	Statement	return	1472:5:42293:42298	30733	0	True				
ANR	31426	Statement	zend_mm_check_ptr	1472:12:42300:42316	30733	1	True				
ANR	31427	Statement	(	1472:29:42317:42317	30733	2	True				
ANR	31428	Statement	heap	1472:30:42318:42321	30733	3	True				
ANR	31429	Statement	","	1472:34:42322:42322	30733	4	True				
ANR	31430	Statement	ptr	1472:36:42324:42326	30733	5	True				
ANR	31431	Statement	","	1472:39:42327:42327	30733	6	True				
ANR	31432	Statement	0	1472:41:42329:42329	30733	7	True				
ANR	31433	Statement	ZEND_FILE_LINE_RELAY_CC	1472:43:42331:42353	30733	8	True				
ANR	31434	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1472:67:42355:42382	30733	9	True				
ANR	31435	Statement	)	1472:95:42383:42383	30733	10	True				
ANR	31436	ExpressionStatement		1472:96:42384:42384	30733	11	True				
ANR	31437	BreakStatement	break ;	1474:4:42396:42401	30733	14	True				
ANR	31438	IfStatement	if ( ! valid_beginning )		30733	14					
ANR	31439	Condition	! valid_beginning	1479:5:42444:42459	30733	0	True				
ANR	31440	UnaryOperationExpression	! valid_beginning		30733	0					
ANR	31441	UnaryOperator	!		30733	0					
ANR	31442	Identifier	valid_beginning		30733	1					
ANR	31443	CompoundStatement		144:23:4360:4360	30733	1					
ANR	31444	IfStatement	if ( ! silent )		30733	0					
ANR	31445	Condition	! silent	1480:6:42470:42476	30733	0	True				
ANR	31446	UnaryOperationExpression	! silent		30733	0					
ANR	31447	UnaryOperator	!		30733	0					
ANR	31448	Identifier	silent		30733	1					
ANR	31449	CompoundStatement		145:15:4377:4377	30733	1					
ANR	31450	ExpressionStatement	"zend_debug_alloc_output ( ""%10s\\t"" , ""Start:"" )"	1481:3:42484:42527	30733	0	True				
ANR	31451	CallExpression	"zend_debug_alloc_output ( ""%10s\\t"" , ""Start:"" )"		30733	0					
ANR	31452	Callee	zend_debug_alloc_output		30733	0					
ANR	31453	Identifier	zend_debug_alloc_output		30733	0					
ANR	31454	ArgumentList	"""%10s\\t"""		30733	1					
ANR	31455	Argument	"""%10s\\t"""		30733	0					
ANR	31456	PrimaryExpression	"""%10s\\t"""		30733	0					
ANR	31457	Argument	"""Start:"""		30733	1					
ANR	31458	PrimaryExpression	"""Start:"""		30733	0					
ANR	31459	ExpressionStatement	"zend_debug_alloc_output ( ""Unknown\\n"" )"	1482:3:42532:42568	30733	1	True				
ANR	31460	CallExpression	"zend_debug_alloc_output ( ""Unknown\\n"" )"		30733	0					
ANR	31461	Callee	zend_debug_alloc_output		30733	0					
ANR	31462	Identifier	zend_debug_alloc_output		30733	0					
ANR	31463	ArgumentList	"""Unknown\\n"""		30733	1					
ANR	31464	Argument	"""Unknown\\n"""		30733	0					
ANR	31465	PrimaryExpression	"""Unknown\\n"""		30733	0					
ANR	31466	ExpressionStatement	"zend_debug_alloc_output ( ""%10s\\t"" , ""End:"" )"	1483:3:42573:42614	30733	2	True				
ANR	31467	CallExpression	"zend_debug_alloc_output ( ""%10s\\t"" , ""End:"" )"		30733	0					
ANR	31468	Callee	zend_debug_alloc_output		30733	0					
ANR	31469	Identifier	zend_debug_alloc_output		30733	0					
ANR	31470	ArgumentList	"""%10s\\t"""		30733	1					
ANR	31471	Argument	"""%10s\\t"""		30733	0					
ANR	31472	PrimaryExpression	"""%10s\\t"""		30733	0					
ANR	31473	Argument	"""End:"""		30733	1					
ANR	31474	PrimaryExpression	"""End:"""		30733	0					
ANR	31475	ExpressionStatement	"zend_debug_alloc_output ( ""Unknown\\n"" )"	1484:3:42619:42655	30733	3	True				
ANR	31476	CallExpression	"zend_debug_alloc_output ( ""Unknown\\n"" )"		30733	0					
ANR	31477	Callee	zend_debug_alloc_output		30733	0					
ANR	31478	Identifier	zend_debug_alloc_output		30733	0					
ANR	31479	ArgumentList	"""Unknown\\n"""		30733	1					
ANR	31480	Argument	"""Unknown\\n"""		30733	0					
ANR	31481	PrimaryExpression	"""Unknown\\n"""		30733	0					
ANR	31482	ElseStatement	else		30733	0					
ANR	31483	CompoundStatement		152:2:4571:4613	30733	0					
ANR	31484	IdentifierDeclStatement	char * end_magic = ZEND_MM_END_MAGIC_PTR ( p ) ;	1487:2:42673:42715	30733	0	True				
ANR	31485	IdentifierDecl	* end_magic = ZEND_MM_END_MAGIC_PTR ( p )		30733	0					
ANR	31486	IdentifierDeclType	char *		30733	0					
ANR	31487	Identifier	end_magic		30733	1					
ANR	31488	AssignmentExpression	* end_magic = ZEND_MM_END_MAGIC_PTR ( p )		30733	2		=			
ANR	31489	Identifier	end_magic		30733	0					
ANR	31490	CallExpression	ZEND_MM_END_MAGIC_PTR ( p )		30733	1					
ANR	31491	Callee	ZEND_MM_END_MAGIC_PTR		30733	0					
ANR	31492	Identifier	ZEND_MM_END_MAGIC_PTR		30733	0					
ANR	31493	ArgumentList	p		30733	1					
ANR	31494	Argument	p		30733	0					
ANR	31495	Identifier	p		30733	0					
ANR	31496	IfStatement	if ( p -> debug . start_magic == _mem_block_start_magic )		30733	1					
ANR	31497	Condition	p -> debug . start_magic == _mem_block_start_magic	1489:6:42724:42769	30733	0	True				
ANR	31498	EqualityExpression	p -> debug . start_magic == _mem_block_start_magic		30733	0		==			
ANR	31499	MemberAccess	p -> debug . start_magic		30733	0					
ANR	31500	PtrMemberAccess	p -> debug		30733	0					
ANR	31501	Identifier	p		30733	0					
ANR	31502	Identifier	debug		30733	1					
ANR	31503	Identifier	start_magic		30733	1					
ANR	31504	Identifier	_mem_block_start_magic		30733	1					
ANR	31505	CompoundStatement		154:54:4670:4670	30733	1					
ANR	31506	IfStatement	if ( ! silent )		30733	0					
ANR	31507	Condition	! silent	1490:7:42781:42787	30733	0	True				
ANR	31508	UnaryOperationExpression	! silent		30733	0					
ANR	31509	UnaryOperator	!		30733	0					
ANR	31510	Identifier	silent		30733	1					
ANR	31511	CompoundStatement		155:16:4688:4688	30733	1					
ANR	31512	ExpressionStatement	"zend_debug_alloc_output ( ""%10s\\t"" , ""Start:"" )"	1491:4:42796:42839	30733	0	True				
ANR	31513	CallExpression	"zend_debug_alloc_output ( ""%10s\\t"" , ""Start:"" )"		30733	0					
ANR	31514	Callee	zend_debug_alloc_output		30733	0					
ANR	31515	Identifier	zend_debug_alloc_output		30733	0					
ANR	31516	ArgumentList	"""%10s\\t"""		30733	1					
ANR	31517	Argument	"""%10s\\t"""		30733	0					
ANR	31518	PrimaryExpression	"""%10s\\t"""		30733	0					
ANR	31519	Argument	"""Start:"""		30733	1					
ANR	31520	PrimaryExpression	"""Start:"""		30733	0					
ANR	31521	ExpressionStatement	"zend_debug_alloc_output ( ""OK\\n"" )"	1492:4:42845:42876	30733	1	True				
ANR	31522	CallExpression	"zend_debug_alloc_output ( ""OK\\n"" )"		30733	0					
ANR	31523	Callee	zend_debug_alloc_output		30733	0					
ANR	31524	Identifier	zend_debug_alloc_output		30733	0					
ANR	31525	ArgumentList	"""OK\\n"""		30733	1					
ANR	31526	Argument	"""OK\\n"""		30733	0					
ANR	31527	PrimaryExpression	"""OK\\n"""		30733	0					
ANR	31528	ElseStatement	else		30733	0					
ANR	31529	CompoundStatement		162:3:4883:4888	30733	0					
ANR	31530	IdentifierDeclStatement	"char * overflow_ptr , * magic_ptr = ( char * ) & _mem_block_start_magic ;"	1495:3:42897:42960	30733	0	True				
ANR	31531	IdentifierDecl	* overflow_ptr		30733	0					
ANR	31532	IdentifierDeclType	char *		30733	0					
ANR	31533	Identifier	overflow_ptr		30733	1					
ANR	31534	IdentifierDecl	* magic_ptr = ( char * ) & _mem_block_start_magic		30733	1					
ANR	31535	IdentifierDeclType	char *		30733	0					
ANR	31536	Identifier	magic_ptr		30733	1					
ANR	31537	AssignmentExpression	* magic_ptr = ( char * ) & _mem_block_start_magic		30733	2		=			
ANR	31538	Identifier	magic_ptr		30733	0					
ANR	31539	CastExpression	( char * ) & _mem_block_start_magic		30733	1					
ANR	31540	CastTarget	char *		30733	0					
ANR	31541	UnaryOperationExpression	& _mem_block_start_magic		30733	1					
ANR	31542	UnaryOperator	&		30733	0					
ANR	31543	Identifier	_mem_block_start_magic		30733	1					
ANR	31544	IdentifierDeclStatement	int overflows = 0 ;	1496:3:42965:42980	30733	1	True				
ANR	31545	IdentifierDecl	overflows = 0		30733	0					
ANR	31546	IdentifierDeclType	int		30733	0					
ANR	31547	Identifier	overflows		30733	1					
ANR	31548	AssignmentExpression	overflows = 0		30733	2		=			
ANR	31549	Identifier	overflows		30733	0					
ANR	31550	PrimaryExpression	0		30733	1					
ANR	31551	IdentifierDeclStatement	int i ;	1497:3:42985:42990	30733	2	True				
ANR	31552	IdentifierDecl	i		30733	0					
ANR	31553	IdentifierDeclType	int		30733	0					
ANR	31554	Identifier	i		30733	1					
ANR	31555	IfStatement	if ( silent )		30733	3					
ANR	31556	Condition	silent	1499:7:43000:43005	30733	0	True				
ANR	31557	Identifier	silent		30733	0					
ANR	31558	CompoundStatement		164:15:4906:4906	30733	1					
ANR	31559	Statement	return	1500:4:43014:43019	30733	0	True				
ANR	31560	Statement	_mem_block_check	1500:11:43021:43036	30733	1	True				
ANR	31561	Statement	(	1500:27:43037:43037	30733	2	True				
ANR	31562	Statement	ptr	1500:28:43038:43040	30733	3	True				
ANR	31563	Statement	","	1500:31:43041:43041	30733	4	True				
ANR	31564	Statement	0	1500:33:43043:43043	30733	5	True				
ANR	31565	Statement	ZEND_FILE_LINE_RELAY_CC	1500:35:43045:43067	30733	6	True				
ANR	31566	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1500:59:43069:43096	30733	7	True				
ANR	31567	Statement	)	1500:87:43097:43097	30733	8	True				
ANR	31568	ExpressionStatement		1500:88:43098:43098	30733	9	True				
ANR	31569	ExpressionStatement	had_problems = 1	1502:3:43108:43124	30733	4	True				
ANR	31570	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	31571	Identifier	had_problems		30733	0					
ANR	31572	PrimaryExpression	1		30733	1					
ANR	31573	ExpressionStatement	overflow_ptr = ( char * ) & p -> debug . start_magic	1503:3:43129:43174	30733	5	True				
ANR	31574	AssignmentExpression	overflow_ptr = ( char * ) & p -> debug . start_magic		30733	0		=			
ANR	31575	Identifier	overflow_ptr		30733	0					
ANR	31576	CastExpression	( char * ) & p -> debug . start_magic		30733	1					
ANR	31577	CastTarget	char *		30733	0					
ANR	31578	UnaryOperationExpression	& p -> debug . start_magic		30733	1					
ANR	31579	UnaryOperator	&		30733	0					
ANR	31580	MemberAccess	p -> debug . start_magic		30733	1					
ANR	31581	PtrMemberAccess	p -> debug		30733	0					
ANR	31582	Identifier	p		30733	0					
ANR	31583	Identifier	debug		30733	1					
ANR	31584	Identifier	start_magic		30733	1					
ANR	31585	ExpressionStatement	i = END_MAGIC_SIZE	1504:3:43179:43197	30733	6	True				
ANR	31586	AssignmentExpression	i = END_MAGIC_SIZE		30733	0		=			
ANR	31587	Identifier	i		30733	0					
ANR	31588	Identifier	END_MAGIC_SIZE		30733	1					
ANR	31589	WhileStatement	while ( -- i >= 0 )		30733	7					
ANR	31590	Condition	-- i >= 0	1505:10:43209:43216	30733	0	True				
ANR	31591	RelationalExpression	-- i >= 0		30733	0		>=			
ANR	31592	UnaryExpression	-- i		30733	0					
ANR	31593	IncDec	--		30733	0					
ANR	31594	Identifier	i		30733	1					
ANR	31595	PrimaryExpression	0		30733	1					
ANR	31596	CompoundStatement		170:20:5117:5117	30733	1					
ANR	31597	IfStatement	if ( overflow_ptr [ i ] != magic_ptr [ i ] )		30733	0					
ANR	31598	Condition	overflow_ptr [ i ] != magic_ptr [ i ]	1506:8:43229:43257	30733	0	True				
ANR	31599	EqualityExpression	overflow_ptr [ i ] != magic_ptr [ i ]		30733	0		!=			
ANR	31600	ArrayIndexing	overflow_ptr [ i ]		30733	0					
ANR	31601	Identifier	overflow_ptr		30733	0					
ANR	31602	Identifier	i		30733	1					
ANR	31603	ArrayIndexing	magic_ptr [ i ]		30733	1					
ANR	31604	Identifier	magic_ptr		30733	0					
ANR	31605	Identifier	i		30733	1					
ANR	31606	CompoundStatement		171:39:5158:5158	30733	1					
ANR	31607	ExpressionStatement	overflows ++	1507:5:43267:43278	30733	0	True				
ANR	31608	PostIncDecOperationExpression	overflows ++		30733	0					
ANR	31609	Identifier	overflows		30733	0					
ANR	31610	IncDec	++		30733	1					
ANR	31611	ExpressionStatement	"zend_debug_alloc_output ( ""%10s\\t"" , ""Start:"" )"	1510:3:43294:43337	30733	8	True				
ANR	31612	CallExpression	"zend_debug_alloc_output ( ""%10s\\t"" , ""Start:"" )"		30733	0					
ANR	31613	Callee	zend_debug_alloc_output		30733	0					
ANR	31614	Identifier	zend_debug_alloc_output		30733	0					
ANR	31615	ArgumentList	"""%10s\\t"""		30733	1					
ANR	31616	Argument	"""%10s\\t"""		30733	0					
ANR	31617	PrimaryExpression	"""%10s\\t"""		30733	0					
ANR	31618	Argument	"""Start:"""		30733	1					
ANR	31619	PrimaryExpression	"""Start:"""		30733	0					
ANR	31620	ExpressionStatement	"zend_debug_alloc_output ( ""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"" , p -> debug . start_magic , _mem_block_start_magic )"	1511:3:43342:43461	30733	9	True				
ANR	31621	CallExpression	"zend_debug_alloc_output ( ""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"" , p -> debug . start_magic , _mem_block_start_magic )"		30733	0					
ANR	31622	Callee	zend_debug_alloc_output		30733	0					
ANR	31623	Identifier	zend_debug_alloc_output		30733	0					
ANR	31624	ArgumentList	"""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"""		30733	1					
ANR	31625	Argument	"""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"""		30733	0					
ANR	31626	PrimaryExpression	"""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"""		30733	0					
ANR	31627	Argument	p -> debug . start_magic		30733	1					
ANR	31628	MemberAccess	p -> debug . start_magic		30733	0					
ANR	31629	PtrMemberAccess	p -> debug		30733	0					
ANR	31630	Identifier	p		30733	0					
ANR	31631	Identifier	debug		30733	1					
ANR	31632	Identifier	start_magic		30733	1					
ANR	31633	Argument	_mem_block_start_magic		30733	2					
ANR	31634	Identifier	_mem_block_start_magic		30733	0					
ANR	31635	ExpressionStatement	"zend_debug_alloc_output ( ""%10s\\t"" , """" )"	1512:3:43466:43502	30733	10	True				
ANR	31636	CallExpression	"zend_debug_alloc_output ( ""%10s\\t"" , """" )"		30733	0					
ANR	31637	Callee	zend_debug_alloc_output		30733	0					
ANR	31638	Identifier	zend_debug_alloc_output		30733	0					
ANR	31639	ArgumentList	"""%10s\\t"""		30733	1					
ANR	31640	Argument	"""%10s\\t"""		30733	0					
ANR	31641	PrimaryExpression	"""%10s\\t"""		30733	0					
ANR	31642	Argument	""""""		30733	1					
ANR	31643	PrimaryExpression	""""""		30733	0					
ANR	31644	IfStatement	if ( overflows >= END_MAGIC_SIZE )		30733	11					
ANR	31645	Condition	overflows >= END_MAGIC_SIZE	1513:7:43511:43537	30733	0	True				
ANR	31646	RelationalExpression	overflows >= END_MAGIC_SIZE		30733	0		>=			
ANR	31647	Identifier	overflows		30733	0					
ANR	31648	Identifier	END_MAGIC_SIZE		30733	1					
ANR	31649	CompoundStatement		178:36:5438:5438	30733	1					
ANR	31650	ExpressionStatement	"zend_debug_alloc_output ( ""At least %d bytes overflown\\n"" , END_MAGIC_SIZE )"	1514:4:43546:43618	30733	0	True				
ANR	31651	CallExpression	"zend_debug_alloc_output ( ""At least %d bytes overflown\\n"" , END_MAGIC_SIZE )"		30733	0					
ANR	31652	Callee	zend_debug_alloc_output		30733	0					
ANR	31653	Identifier	zend_debug_alloc_output		30733	0					
ANR	31654	ArgumentList	"""At least %d bytes overflown\\n"""		30733	1					
ANR	31655	Argument	"""At least %d bytes overflown\\n"""		30733	0					
ANR	31656	PrimaryExpression	"""At least %d bytes overflown\\n"""		30733	0					
ANR	31657	Argument	END_MAGIC_SIZE		30733	1					
ANR	31658	Identifier	END_MAGIC_SIZE		30733	0					
ANR	31659	ElseStatement	else		30733	0					
ANR	31660	CompoundStatement		180:10:5528:5528	30733	0					
ANR	31661	ExpressionStatement	"zend_debug_alloc_output ( ""%d byte(s) overflown\\n"" , overflows )"	1516:4:43636:43696	30733	0	True				
ANR	31662	CallExpression	"zend_debug_alloc_output ( ""%d byte(s) overflown\\n"" , overflows )"		30733	0					
ANR	31663	Callee	zend_debug_alloc_output		30733	0					
ANR	31664	Identifier	zend_debug_alloc_output		30733	0					
ANR	31665	ArgumentList	"""%d byte(s) overflown\\n"""		30733	1					
ANR	31666	Argument	"""%d byte(s) overflown\\n"""		30733	0					
ANR	31667	PrimaryExpression	"""%d byte(s) overflown\\n"""		30733	0					
ANR	31668	Argument	overflows		30733	1					
ANR	31669	Identifier	overflows		30733	0					
ANR	31670	IfStatement	"if ( memcmp ( end_magic , & _mem_block_end_magic , END_MAGIC_SIZE ) == 0 )"		30733	2					
ANR	31671	Condition	"memcmp ( end_magic , & _mem_block_end_magic , END_MAGIC_SIZE ) == 0"	1519:6:43713:43771	30733	0	True				
ANR	31672	EqualityExpression	"memcmp ( end_magic , & _mem_block_end_magic , END_MAGIC_SIZE ) == 0"		30733	0		==			
ANR	31673	CallExpression	"memcmp ( end_magic , & _mem_block_end_magic , END_MAGIC_SIZE )"		30733	0					
ANR	31674	Callee	memcmp		30733	0					
ANR	31675	Identifier	memcmp		30733	0					
ANR	31676	ArgumentList	end_magic		30733	1					
ANR	31677	Argument	end_magic		30733	0					
ANR	31678	Identifier	end_magic		30733	0					
ANR	31679	Argument	& _mem_block_end_magic		30733	1					
ANR	31680	UnaryOperationExpression	& _mem_block_end_magic		30733	0					
ANR	31681	UnaryOperator	&		30733	0					
ANR	31682	Identifier	_mem_block_end_magic		30733	1					
ANR	31683	Argument	END_MAGIC_SIZE		30733	2					
ANR	31684	Identifier	END_MAGIC_SIZE		30733	0					
ANR	31685	PrimaryExpression	0		30733	1					
ANR	31686	CompoundStatement		184:67:5672:5672	30733	1					
ANR	31687	IfStatement	if ( ! silent )		30733	0					
ANR	31688	Condition	! silent	1520:7:43783:43789	30733	0	True				
ANR	31689	UnaryOperationExpression	! silent		30733	0					
ANR	31690	UnaryOperator	!		30733	0					
ANR	31691	Identifier	silent		30733	1					
ANR	31692	CompoundStatement		185:16:5690:5690	30733	1					
ANR	31693	ExpressionStatement	"zend_debug_alloc_output ( ""%10s\\t"" , ""End:"" )"	1521:4:43798:43839	30733	0	True				
ANR	31694	CallExpression	"zend_debug_alloc_output ( ""%10s\\t"" , ""End:"" )"		30733	0					
ANR	31695	Callee	zend_debug_alloc_output		30733	0					
ANR	31696	Identifier	zend_debug_alloc_output		30733	0					
ANR	31697	ArgumentList	"""%10s\\t"""		30733	1					
ANR	31698	Argument	"""%10s\\t"""		30733	0					
ANR	31699	PrimaryExpression	"""%10s\\t"""		30733	0					
ANR	31700	Argument	"""End:"""		30733	1					
ANR	31701	PrimaryExpression	"""End:"""		30733	0					
ANR	31702	ExpressionStatement	"zend_debug_alloc_output ( ""OK\\n"" )"	1522:4:43845:43876	30733	1	True				
ANR	31703	CallExpression	"zend_debug_alloc_output ( ""OK\\n"" )"		30733	0					
ANR	31704	Callee	zend_debug_alloc_output		30733	0					
ANR	31705	Identifier	zend_debug_alloc_output		30733	0					
ANR	31706	ArgumentList	"""OK\\n"""		30733	1					
ANR	31707	Argument	"""OK\\n"""		30733	0					
ANR	31708	PrimaryExpression	"""OK\\n"""		30733	0					
ANR	31709	ElseStatement	else		30733	0					
ANR	31710	CompoundStatement		192:3:5881:5886	30733	0					
ANR	31711	IdentifierDeclStatement	"char * overflow_ptr , * magic_ptr = ( char * ) & _mem_block_end_magic ;"	1525:3:43897:43958	30733	0	True				
ANR	31712	IdentifierDecl	* overflow_ptr		30733	0					
ANR	31713	IdentifierDeclType	char *		30733	0					
ANR	31714	Identifier	overflow_ptr		30733	1					
ANR	31715	IdentifierDecl	* magic_ptr = ( char * ) & _mem_block_end_magic		30733	1					
ANR	31716	IdentifierDeclType	char *		30733	0					
ANR	31717	Identifier	magic_ptr		30733	1					
ANR	31718	AssignmentExpression	* magic_ptr = ( char * ) & _mem_block_end_magic		30733	2		=			
ANR	31719	Identifier	magic_ptr		30733	0					
ANR	31720	CastExpression	( char * ) & _mem_block_end_magic		30733	1					
ANR	31721	CastTarget	char *		30733	0					
ANR	31722	UnaryOperationExpression	& _mem_block_end_magic		30733	1					
ANR	31723	UnaryOperator	&		30733	0					
ANR	31724	Identifier	_mem_block_end_magic		30733	1					
ANR	31725	IdentifierDeclStatement	int overflows = 0 ;	1526:3:43963:43978	30733	1	True				
ANR	31726	IdentifierDecl	overflows = 0		30733	0					
ANR	31727	IdentifierDeclType	int		30733	0					
ANR	31728	Identifier	overflows		30733	1					
ANR	31729	AssignmentExpression	overflows = 0		30733	2		=			
ANR	31730	Identifier	overflows		30733	0					
ANR	31731	PrimaryExpression	0		30733	1					
ANR	31732	IdentifierDeclStatement	int i ;	1527:3:43983:43988	30733	2	True				
ANR	31733	IdentifierDecl	i		30733	0					
ANR	31734	IdentifierDeclType	int		30733	0					
ANR	31735	Identifier	i		30733	1					
ANR	31736	IfStatement	if ( silent )		30733	3					
ANR	31737	Condition	silent	1529:7:43998:44003	30733	0	True				
ANR	31738	Identifier	silent		30733	0					
ANR	31739	CompoundStatement		194:15:5904:5904	30733	1					
ANR	31740	Statement	return	1530:4:44012:44017	30733	0	True				
ANR	31741	Statement	_mem_block_check	1530:11:44019:44034	30733	1	True				
ANR	31742	Statement	(	1530:27:44035:44035	30733	2	True				
ANR	31743	Statement	ptr	1530:28:44036:44038	30733	3	True				
ANR	31744	Statement	","	1530:31:44039:44039	30733	4	True				
ANR	31745	Statement	0	1530:33:44041:44041	30733	5	True				
ANR	31746	Statement	ZEND_FILE_LINE_RELAY_CC	1530:35:44043:44065	30733	6	True				
ANR	31747	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1530:59:44067:44094	30733	7	True				
ANR	31748	Statement	)	1530:87:44095:44095	30733	8	True				
ANR	31749	ExpressionStatement		1530:88:44096:44096	30733	9	True				
ANR	31750	ExpressionStatement	had_problems = 1	1532:3:44106:44122	30733	4	True				
ANR	31751	AssignmentExpression	had_problems = 1		30733	0		=			
ANR	31752	Identifier	had_problems		30733	0					
ANR	31753	PrimaryExpression	1		30733	1					
ANR	31754	ExpressionStatement	overflow_ptr = ( char * ) end_magic	1533:3:44127:44160	30733	5	True				
ANR	31755	AssignmentExpression	overflow_ptr = ( char * ) end_magic		30733	0		=			
ANR	31756	Identifier	overflow_ptr		30733	0					
ANR	31757	CastExpression	( char * ) end_magic		30733	1					
ANR	31758	CastTarget	char *		30733	0					
ANR	31759	Identifier	end_magic		30733	1					
ANR	31760	ForStatement	for ( i = 0 ; i < END_MAGIC_SIZE ; i ++ )		30733	6					
ANR	31761	ForInit	i = 0 ;	1535:8:44171:44174	30733	0	True				
ANR	31762	AssignmentExpression	i = 0		30733	0		=			
ANR	31763	Identifier	i		30733	0					
ANR	31764	PrimaryExpression	0		30733	1					
ANR	31765	Condition	i < END_MAGIC_SIZE	1535:13:44176:44193	30733	1	True				
ANR	31766	RelationalExpression	i < END_MAGIC_SIZE		30733	0		<			
ANR	31767	Identifier	i		30733	0					
ANR	31768	Identifier	END_MAGIC_SIZE		30733	1					
ANR	31769	PostIncDecOperationExpression	i ++	1535:33:44196:44198	30733	2	True				
ANR	31770	Identifier	i		30733	0					
ANR	31771	IncDec	++		30733	1					
ANR	31772	CompoundStatement		200:38:6099:6099	30733	3					
ANR	31773	IfStatement	if ( overflow_ptr [ i ] != magic_ptr [ i ] )		30733	0					
ANR	31774	Condition	overflow_ptr [ i ] != magic_ptr [ i ]	1536:8:44211:44239	30733	0	True				
ANR	31775	EqualityExpression	overflow_ptr [ i ] != magic_ptr [ i ]		30733	0		!=			
ANR	31776	ArrayIndexing	overflow_ptr [ i ]		30733	0					
ANR	31777	Identifier	overflow_ptr		30733	0					
ANR	31778	Identifier	i		30733	1					
ANR	31779	ArrayIndexing	magic_ptr [ i ]		30733	1					
ANR	31780	Identifier	magic_ptr		30733	0					
ANR	31781	Identifier	i		30733	1					
ANR	31782	CompoundStatement		201:39:6140:6140	30733	1					
ANR	31783	ExpressionStatement	overflows ++	1537:5:44249:44260	30733	0	True				
ANR	31784	PostIncDecOperationExpression	overflows ++		30733	0					
ANR	31785	Identifier	overflows		30733	0					
ANR	31786	IncDec	++		30733	1					
ANR	31787	ExpressionStatement	"zend_debug_alloc_output ( ""%10s\\t"" , ""End:"" )"	1541:3:44277:44318	30733	7	True				
ANR	31788	CallExpression	"zend_debug_alloc_output ( ""%10s\\t"" , ""End:"" )"		30733	0					
ANR	31789	Callee	zend_debug_alloc_output		30733	0					
ANR	31790	Identifier	zend_debug_alloc_output		30733	0					
ANR	31791	ArgumentList	"""%10s\\t"""		30733	1					
ANR	31792	Argument	"""%10s\\t"""		30733	0					
ANR	31793	PrimaryExpression	"""%10s\\t"""		30733	0					
ANR	31794	Argument	"""End:"""		30733	1					
ANR	31795	PrimaryExpression	"""End:"""		30733	0					
ANR	31796	ExpressionStatement	"zend_debug_alloc_output ( ""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"" , * end_magic , _mem_block_end_magic )"	1542:3:44323:44430	30733	8	True				
ANR	31797	CallExpression	"zend_debug_alloc_output ( ""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"" , * end_magic , _mem_block_end_magic )"		30733	0					
ANR	31798	Callee	zend_debug_alloc_output		30733	0					
ANR	31799	Identifier	zend_debug_alloc_output		30733	0					
ANR	31800	ArgumentList	"""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"""		30733	1					
ANR	31801	Argument	"""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"""		30733	0					
ANR	31802	PrimaryExpression	"""Overflown (magic=0x%0.8X instead of 0x%0.8X)\\n"""		30733	0					
ANR	31803	Argument	* end_magic		30733	1					
ANR	31804	UnaryOperationExpression	* end_magic		30733	0					
ANR	31805	UnaryOperator	*		30733	0					
ANR	31806	Identifier	end_magic		30733	1					
ANR	31807	Argument	_mem_block_end_magic		30733	2					
ANR	31808	Identifier	_mem_block_end_magic		30733	0					
ANR	31809	ExpressionStatement	"zend_debug_alloc_output ( ""%10s\\t"" , """" )"	1543:3:44435:44471	30733	9	True				
ANR	31810	CallExpression	"zend_debug_alloc_output ( ""%10s\\t"" , """" )"		30733	0					
ANR	31811	Callee	zend_debug_alloc_output		30733	0					
ANR	31812	Identifier	zend_debug_alloc_output		30733	0					
ANR	31813	ArgumentList	"""%10s\\t"""		30733	1					
ANR	31814	Argument	"""%10s\\t"""		30733	0					
ANR	31815	PrimaryExpression	"""%10s\\t"""		30733	0					
ANR	31816	Argument	""""""		30733	1					
ANR	31817	PrimaryExpression	""""""		30733	0					
ANR	31818	IfStatement	if ( overflows >= END_MAGIC_SIZE )		30733	10					
ANR	31819	Condition	overflows >= END_MAGIC_SIZE	1544:7:44480:44506	30733	0	True				
ANR	31820	RelationalExpression	overflows >= END_MAGIC_SIZE		30733	0		>=			
ANR	31821	Identifier	overflows		30733	0					
ANR	31822	Identifier	END_MAGIC_SIZE		30733	1					
ANR	31823	CompoundStatement		209:36:6407:6407	30733	1					
ANR	31824	ExpressionStatement	"zend_debug_alloc_output ( ""At least %d bytes overflown\\n"" , END_MAGIC_SIZE )"	1545:4:44515:44587	30733	0	True				
ANR	31825	CallExpression	"zend_debug_alloc_output ( ""At least %d bytes overflown\\n"" , END_MAGIC_SIZE )"		30733	0					
ANR	31826	Callee	zend_debug_alloc_output		30733	0					
ANR	31827	Identifier	zend_debug_alloc_output		30733	0					
ANR	31828	ArgumentList	"""At least %d bytes overflown\\n"""		30733	1					
ANR	31829	Argument	"""At least %d bytes overflown\\n"""		30733	0					
ANR	31830	PrimaryExpression	"""At least %d bytes overflown\\n"""		30733	0					
ANR	31831	Argument	END_MAGIC_SIZE		30733	1					
ANR	31832	Identifier	END_MAGIC_SIZE		30733	0					
ANR	31833	ElseStatement	else		30733	0					
ANR	31834	CompoundStatement		211:10:6497:6497	30733	0					
ANR	31835	ExpressionStatement	"zend_debug_alloc_output ( ""%d byte(s) overflown\\n"" , overflows )"	1547:4:44605:44665	30733	0	True				
ANR	31836	CallExpression	"zend_debug_alloc_output ( ""%d byte(s) overflown\\n"" , overflows )"		30733	0					
ANR	31837	Callee	zend_debug_alloc_output		30733	0					
ANR	31838	Identifier	zend_debug_alloc_output		30733	0					
ANR	31839	ArgumentList	"""%d byte(s) overflown\\n"""		30733	1					
ANR	31840	Argument	"""%d byte(s) overflown\\n"""		30733	0					
ANR	31841	PrimaryExpression	"""%d byte(s) overflown\\n"""		30733	0					
ANR	31842	Argument	overflows		30733	1					
ANR	31843	Identifier	overflows		30733	0					
ANR	31844	IfStatement	if ( ! silent )		30733	15					
ANR	31845	Condition	! silent	1553:5:44692:44698	30733	0	True				
ANR	31846	UnaryOperationExpression	! silent		30733	0					
ANR	31847	UnaryOperator	!		30733	0					
ANR	31848	Identifier	silent		30733	1					
ANR	31849	CompoundStatement		218:14:6599:6599	30733	1					
ANR	31850	ExpressionStatement	"zend_debug_alloc_output ( ""---------------------------------------\\n"" )"	1554:2:44705:44773	30733	0	True				
ANR	31851	CallExpression	"zend_debug_alloc_output ( ""---------------------------------------\\n"" )"		30733	0					
ANR	31852	Callee	zend_debug_alloc_output		30733	0					
ANR	31853	Identifier	zend_debug_alloc_output		30733	0					
ANR	31854	ArgumentList	"""---------------------------------------\\n"""		30733	1					
ANR	31855	Argument	"""---------------------------------------\\n"""		30733	0					
ANR	31856	PrimaryExpression	"""---------------------------------------\\n"""		30733	0					
ANR	31857	ReturnStatement	return ( ( ! had_problems ) ? 1 : 0 ) ;	1556:1:44779:44811	30733	16	True				
ANR	31858	ConditionalExpression	( ! had_problems ) ? 1 : 0		30733	0					
ANR	31859	Condition	! had_problems		30733	0					
ANR	31860	UnaryOperationExpression	! had_problems		30733	0					
ANR	31861	UnaryOperator	!		30733	0					
ANR	31862	Identifier	had_problems		30733	1					
ANR	31863	PrimaryExpression	1		30733	1					
ANR	31864	PrimaryExpression	0		30733	2					
ANR	31865	ReturnType	static int		30733	1					
ANR	31866	Identifier	zend_mm_check_ptr		30733	2					
ANR	31867	ParameterList	"zend_mm_heap * heap , void * ptr , int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		30733	3					
ANR	31868	Parameter	zend_mm_heap * heap	1335:29:38017:38034	30733	0	True				
ANR	31869	ParameterType	zend_mm_heap *		30733	0					
ANR	31870	Identifier	heap		30733	1					
ANR	31871	Parameter	void * ptr	1335:49:38037:38045	30733	1	True				
ANR	31872	ParameterType	void *		30733	0					
ANR	31873	Identifier	ptr		30733	1					
ANR	31874	Parameter	int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	1335:60:38048:38098	30733	2	True				
ANR	31875	ParameterType	int silent ZEND_FILE_LINE_DC		30733	0					
ANR	31876	Identifier	ZEND_FILE_LINE_ORIG_DC		30733	1					
ANR	31877	CFGEntryNode	ENTRY		30733		True				
ANR	31878	CFGExitNode	EXIT		30733		True				
ANR	31879	Symbol	MEM_BLOCK_FREED		30733						
ANR	31880	Symbol	p -> debug		30733						
ANR	31881	Symbol	p -> debug . filename		30733						
ANR	31882	Symbol	* ZEND_MM_PREV_BLOCK		30733						
ANR	31883	Symbol	p -> info . _size		30733						
ANR	31884	Symbol	ZEND_MM_HEADER_OF		30733						
ANR	31885	Symbol	ZEND_MM_PREV_BLOCK ( p ) -> info . _size		30733						
ANR	31886	Symbol	tsrm_thread_id		30733						
ANR	31887	Symbol	memcmp		30733						
ANR	31888	Symbol	overflows		30733						
ANR	31889	Symbol	had_problems		30733						
ANR	31890	Symbol	& _mem_block_start_magic		30733						
ANR	31891	Symbol	no_cache_notice		30733						
ANR	31892	Symbol	ZEND_MM_IS_GUARD_BLOCK		30733						
ANR	31893	Symbol	end_magic		30733						
ANR	31894	Symbol	_mem_block_start_magic		30733						
ANR	31895	Symbol	ZEND_MM_BAD_THREAD_ID		30733						
ANR	31896	Symbol	magic_ptr		30733						
ANR	31897	Symbol	p -> info		30733						
ANR	31898	Symbol	* overflow_ptr		30733						
ANR	31899	Symbol	& p -> debug		30733						
ANR	31900	Symbol	ZEND_FILE_LINE_ORIG_DC		30733						
ANR	31901	Symbol	overflow_ptr		30733						
ANR	31902	Symbol	& _mem_block_end_magic		30733						
ANR	31903	Symbol	& p -> debug . start_magic		30733						
ANR	31904	Symbol	MEM_BLOCK_VALID		30733						
ANR	31905	Symbol	ZEND_MM_END_MAGIC_PTR		30733						
ANR	31906	Symbol	p -> info . _prev		30733						
ANR	31907	Symbol	ZEND_MM_PREV_BLOCK		30733						
ANR	31908	Symbol	valid_beginning		30733						
ANR	31909	Symbol	heap		30733						
ANR	31910	Symbol	p -> debug . start_magic		30733						
ANR	31911	Symbol	p -> magic		30733						
ANR	31912	Symbol	silent		30733						
ANR	31913	Symbol	__zend_orig_filename		30733						
ANR	31914	Symbol	p -> thread_id		30733						
ANR	31915	Symbol	* ZEND_MM_NEXT_BLOCK		30733						
ANR	31916	Symbol	i		30733						
ANR	31917	Symbol	ZEND_MM_NEXT_BLOCK ( p ) -> info		30733						
ANR	31918	Symbol	p -> debug . lineno		30733						
ANR	31919	Symbol	p -> debug . size		30733						
ANR	31920	Symbol	ptr		30733						
ANR	31921	Symbol	_mem_block_end_magic		30733						
ANR	31922	Symbol	p		30733						
ANR	31923	Symbol	* magic_ptr		30733						
ANR	31924	Symbol	* i		30733						
ANR	31925	Symbol	ZEND_MM_NEXT_BLOCK		30733						
ANR	31926	Symbol	ZEND_MM_PREV_BLOCK ( p ) -> info		30733						
ANR	31927	Symbol	ZEND_MM_GUARD_BLOCK		30733						
ANR	31928	Symbol	ZEND_MM_IS_USED_BLOCK		30733						
ANR	31929	Symbol	* p		30733						
ANR	31930	Symbol	ZEND_MM_NEXT_BLOCK ( p ) -> info . _prev		30733						
ANR	31931	Symbol	END_MAGIC_SIZE		30733						
ANR	31932	Symbol	* end_magic		30733						
ANR	31933	Function	zend_mm_check_heap	1559:0:44816:45954							
ANR	31934	FunctionDef	"zend_mm_check_heap (zend_mm_heap * heap , int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		31933	0					
ANR	31935	CompoundStatement		1560:0:44919:45954	31933	0					
ANR	31936	IdentifierDeclStatement	zend_mm_segment * segment = heap -> segments_list ;	1561:1:44922:44968	31933	0	True				
ANR	31937	IdentifierDecl	* segment = heap -> segments_list		31933	0					
ANR	31938	IdentifierDeclType	zend_mm_segment *		31933	0					
ANR	31939	Identifier	segment		31933	1					
ANR	31940	AssignmentExpression	* segment = heap -> segments_list		31933	2		=			
ANR	31941	Identifier	segment		31933	0					
ANR	31942	PtrMemberAccess	heap -> segments_list		31933	1					
ANR	31943	Identifier	heap		31933	0					
ANR	31944	Identifier	segments_list		31933	1					
ANR	31945	IdentifierDeclStatement	"zend_mm_block * p , * q ;"	1562:1:44971:44991	31933	1	True				
ANR	31946	IdentifierDecl	* p		31933	0					
ANR	31947	IdentifierDeclType	zend_mm_block *		31933	0					
ANR	31948	Identifier	p		31933	1					
ANR	31949	IdentifierDecl	* q		31933	1					
ANR	31950	IdentifierDeclType	zend_mm_block *		31933	0					
ANR	31951	Identifier	q		31933	1					
ANR	31952	IdentifierDeclStatement	int errors = 0 ;	1563:1:44994:45008	31933	2	True				
ANR	31953	IdentifierDecl	errors = 0		31933	0					
ANR	31954	IdentifierDeclType	int		31933	0					
ANR	31955	Identifier	errors		31933	1					
ANR	31956	AssignmentExpression	errors = 0		31933	2		=			
ANR	31957	Identifier	errors		31933	0					
ANR	31958	PrimaryExpression	0		31933	1					
ANR	31959	IfStatement	if ( ! segment )		31933	3					
ANR	31960	Condition	! segment	1565:5:45016:45023	31933	0	True				
ANR	31961	UnaryOperationExpression	! segment		31933	0					
ANR	31962	UnaryOperator	!		31933	0					
ANR	31963	Identifier	segment		31933	1					
ANR	31964	CompoundStatement		6:15:106:106	31933	1					
ANR	31965	ReturnStatement	return 0 ;	1566:2:45030:45038	31933	0	True				
ANR	31966	PrimaryExpression	0		31933	0					
ANR	31967	ExpressionStatement	p = ( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )	1568:1:45044:45115	31933	4	True				
ANR	31968	AssignmentExpression	p = ( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		31933	0		=			
ANR	31969	Identifier	p		31933	0					
ANR	31970	CastExpression	( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		31933	1					
ANR	31971	CastTarget	zend_mm_block *		31933	0					
ANR	31972	AdditiveExpression	( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE		31933	1		+			
ANR	31973	CastExpression	( char * ) segment		31933	0					
ANR	31974	CastTarget	char *		31933	0					
ANR	31975	Identifier	segment		31933	1					
ANR	31976	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		31933	1					
ANR	31977	WhileStatement	while ( 1 )		31933	5					
ANR	31978	Condition	1	1569:8:45125:45125	31933	0	True				
ANR	31979	PrimaryExpression	1		31933	0					
ANR	31980	CompoundStatement		10:11:208:208	31933	1					
ANR	31981	ExpressionStatement	q = ZEND_MM_NEXT_BLOCK ( p )	1570:2:45132:45157	31933	0	True				
ANR	31982	AssignmentExpression	q = ZEND_MM_NEXT_BLOCK ( p )		31933	0		=			
ANR	31983	Identifier	q		31933	0					
ANR	31984	CallExpression	ZEND_MM_NEXT_BLOCK ( p )		31933	1					
ANR	31985	Callee	ZEND_MM_NEXT_BLOCK		31933	0					
ANR	31986	Identifier	ZEND_MM_NEXT_BLOCK		31933	0					
ANR	31987	ArgumentList	p		31933	1					
ANR	31988	Argument	p		31933	0					
ANR	31989	Identifier	p		31933	0					
ANR	31990	IfStatement	if ( q <= p || ( char * ) q > ( char * ) segment + segment -> size || p -> info . _size != q -> info . _prev )		31933	1					
ANR	31991	Condition	q <= p || ( char * ) q > ( char * ) segment + segment -> size || p -> info . _size != q -> info . _prev	1571:6:45165:45261	31933	0	True				
ANR	31992	OrExpression	q <= p || ( char * ) q > ( char * ) segment + segment -> size || p -> info . _size != q -> info . _prev		31933	0		||			
ANR	31993	RelationalExpression	q <= p		31933	0		<=			
ANR	31994	Identifier	q		31933	0					
ANR	31995	Identifier	p		31933	1					
ANR	31996	OrExpression	( char * ) q > ( char * ) segment + segment -> size || p -> info . _size != q -> info . _prev		31933	1		||			
ANR	31997	RelationalExpression	( char * ) q > ( char * ) segment + segment -> size		31933	0		>			
ANR	31998	CastExpression	( char * ) q		31933	0					
ANR	31999	CastTarget	char *		31933	0					
ANR	32000	Identifier	q		31933	1					
ANR	32001	AdditiveExpression	( char * ) segment + segment -> size		31933	1		+			
ANR	32002	CastExpression	( char * ) segment		31933	0					
ANR	32003	CastTarget	char *		31933	0					
ANR	32004	Identifier	segment		31933	1					
ANR	32005	PtrMemberAccess	segment -> size		31933	1					
ANR	32006	Identifier	segment		31933	0					
ANR	32007	Identifier	size		31933	1					
ANR	32008	EqualityExpression	p -> info . _size != q -> info . _prev		31933	1		!=			
ANR	32009	MemberAccess	p -> info . _size		31933	0					
ANR	32010	PtrMemberAccess	p -> info		31933	0					
ANR	32011	Identifier	p		31933	0					
ANR	32012	Identifier	info		31933	1					
ANR	32013	Identifier	_size		31933	1					
ANR	32014	MemberAccess	q -> info . _prev		31933	1					
ANR	32015	PtrMemberAccess	q -> info		31933	0					
ANR	32016	Identifier	q		31933	0					
ANR	32017	Identifier	info		31933	1					
ANR	32018	Identifier	_prev		31933	1					
ANR	32019	CompoundStatement		14:38:344:344	31933	1					
ANR	32020	ExpressionStatement	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"	1574:3:45269:45308	31933	0	True				
ANR	32021	CallExpression	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"		31933	0					
ANR	32022	Callee	zend_mm_panic		31933	0					
ANR	32023	Identifier	zend_mm_panic		31933	0					
ANR	32024	ArgumentList	"""zend_mm_heap corrupted"""		31933	1					
ANR	32025	Argument	"""zend_mm_heap corrupted"""		31933	0					
ANR	32026	PrimaryExpression	"""zend_mm_heap corrupted"""		31933	0					
ANR	32027	IfStatement	if ( ! ZEND_MM_IS_FREE_BLOCK ( p ) )		31933	2					
ANR	32028	Condition	! ZEND_MM_IS_FREE_BLOCK ( p )	1576:6:45320:45344	31933	0	True				
ANR	32029	UnaryOperationExpression	! ZEND_MM_IS_FREE_BLOCK ( p )		31933	0					
ANR	32030	UnaryOperator	!		31933	0					
ANR	32031	CallExpression	ZEND_MM_IS_FREE_BLOCK ( p )		31933	1					
ANR	32032	Callee	ZEND_MM_IS_FREE_BLOCK		31933	0					
ANR	32033	Identifier	ZEND_MM_IS_FREE_BLOCK		31933	0					
ANR	32034	ArgumentList	p		31933	1					
ANR	32035	Argument	p		31933	0					
ANR	32036	Identifier	p		31933	0					
ANR	32037	CompoundStatement		17:33:427:427	31933	1					
ANR	32038	IfStatement	if ( p -> magic == MEM_BLOCK_VALID || p -> magic == MEM_BLOCK_LEAK )		31933	0					
ANR	32039	Condition	p -> magic == MEM_BLOCK_VALID || p -> magic == MEM_BLOCK_LEAK	1577:7:45356:45412	31933	0	True				
ANR	32040	OrExpression	p -> magic == MEM_BLOCK_VALID || p -> magic == MEM_BLOCK_LEAK		31933	0		||			
ANR	32041	EqualityExpression	p -> magic == MEM_BLOCK_VALID		31933	0		==			
ANR	32042	PtrMemberAccess	p -> magic		31933	0					
ANR	32043	Identifier	p		31933	0					
ANR	32044	Identifier	magic		31933	1					
ANR	32045	Identifier	MEM_BLOCK_VALID		31933	1					
ANR	32046	EqualityExpression	p -> magic == MEM_BLOCK_LEAK		31933	1		==			
ANR	32047	PtrMemberAccess	p -> magic		31933	0					
ANR	32048	Identifier	p		31933	0					
ANR	32049	Identifier	magic		31933	1					
ANR	32050	Identifier	MEM_BLOCK_LEAK		31933	1					
ANR	32051	CompoundStatement		18:66:495:495	31933	1					
ANR	32052	Statement	if	1578:4:45421:45422	31933	0	True				
ANR	32053	Statement	(	1578:7:45424:45424	31933	1	True				
ANR	32054	Statement	!	1578:8:45425:45425	31933	2	True				
ANR	32055	Statement	zend_mm_check_ptr	1578:9:45426:45442	31933	3	True				
ANR	32056	Statement	(	1578:26:45443:45443	31933	4	True				
ANR	32057	Statement	heap	1578:27:45444:45447	31933	5	True				
ANR	32058	Statement	","	1578:31:45448:45448	31933	6	True				
ANR	32059	Statement	ZEND_MM_DATA_OF	1578:33:45450:45464	31933	7	True				
ANR	32060	Statement	(	1578:48:45465:45465	31933	8	True				
ANR	32061	Statement	p	1578:49:45466:45466	31933	9	True				
ANR	32062	Statement	)	1578:50:45467:45467	31933	10	True				
ANR	32063	Statement	","	1578:51:45468:45468	31933	11	True				
ANR	32064	Statement	(	1578:53:45470:45470	31933	12	True				
ANR	32065	Statement	silent	1578:54:45471:45476	31933	13	True				
ANR	32066	Statement	?	1578:60:45477:45477	31933	14	True				
ANR	32067	Label	2 :	1578:61:45478:45479	31933	15	True				
ANR	32068	Statement	3	1578:63:45480:45480	31933	16	True				
ANR	32069	Statement	)	1578:64:45481:45481	31933	17	True				
ANR	32070	Statement	ZEND_FILE_LINE_RELAY_CC	1578:66:45483:45505	31933	18	True				
ANR	32071	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	1578:90:45507:45534	31933	19	True				
ANR	32072	Statement	)	1578:118:45535:45535	31933	20	True				
ANR	32073	Statement	)	1578:119:45536:45536	31933	21	True				
ANR	32074	CompoundStatement		19:121:618:618	31933	22					
ANR	32075	ExpressionStatement	errors ++	1579:5:45545:45553	31933	0	True				
ANR	32076	PostIncDecOperationExpression	errors ++		31933	0					
ANR	32077	Identifier	errors		31933	0					
ANR	32078	IncDec	++		31933	1					
ANR	32079	ElseStatement	else		31933	0					
ANR	32080	IfStatement	if ( p -> magic == MEM_BLOCK_CACHED )		31933	0					
ANR	32081	Condition	p -> magic == MEM_BLOCK_CACHED	1582:14:45593:45620	31933	0	True				
ANR	32082	EqualityExpression	p -> magic == MEM_BLOCK_CACHED		31933	0		==			
ANR	32083	PtrMemberAccess	p -> magic		31933	0					
ANR	32084	Identifier	p		31933	0					
ANR	32085	Identifier	magic		31933	1					
ANR	32086	Identifier	MEM_BLOCK_CACHED		31933	1					
ANR	32087	CompoundStatement		23:44:703:703	31933	1					
ANR	32088	ElseStatement	else		31933	0					
ANR	32089	IfStatement	if ( p -> magic != MEM_BLOCK_LEAK )		31933	0					
ANR	32090	Condition	p -> magic != MEM_BLOCK_LEAK	1585:14:45664:45689	31933	0	True				
ANR	32091	EqualityExpression	p -> magic != MEM_BLOCK_LEAK		31933	0		!=			
ANR	32092	PtrMemberAccess	p -> magic		31933	0					
ANR	32093	Identifier	p		31933	0					
ANR	32094	Identifier	magic		31933	1					
ANR	32095	Identifier	MEM_BLOCK_LEAK		31933	1					
ANR	32096	CompoundStatement		26:42:772:772	31933	1					
ANR	32097	ExpressionStatement	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"	1586:4:45698:45737	31933	0	True				
ANR	32098	CallExpression	"zend_mm_panic ( ""zend_mm_heap corrupted"" )"		31933	0					
ANR	32099	Callee	zend_mm_panic		31933	0					
ANR	32100	Identifier	zend_mm_panic		31933	0					
ANR	32101	ArgumentList	"""zend_mm_heap corrupted"""		31933	1					
ANR	32102	Argument	"""zend_mm_heap corrupted"""		31933	0					
ANR	32103	PrimaryExpression	"""zend_mm_heap corrupted"""		31933	0					
ANR	32104	IfStatement	if ( ZEND_MM_IS_GUARD_BLOCK ( q ) )		31933	3					
ANR	32105	Condition	ZEND_MM_IS_GUARD_BLOCK ( q )	1589:6:45754:45778	31933	0	True				
ANR	32106	CallExpression	ZEND_MM_IS_GUARD_BLOCK ( q )		31933	0					
ANR	32107	Callee	ZEND_MM_IS_GUARD_BLOCK		31933	0					
ANR	32108	Identifier	ZEND_MM_IS_GUARD_BLOCK		31933	0					
ANR	32109	ArgumentList	q		31933	1					
ANR	32110	Argument	q		31933	0					
ANR	32111	Identifier	q		31933	0					
ANR	32112	CompoundStatement		30:33:861:861	31933	1					
ANR	32113	ExpressionStatement	segment = segment -> next_segment	1590:3:45786:45817	31933	0	True				
ANR	32114	AssignmentExpression	segment = segment -> next_segment		31933	0		=			
ANR	32115	Identifier	segment		31933	0					
ANR	32116	PtrMemberAccess	segment -> next_segment		31933	1					
ANR	32117	Identifier	segment		31933	0					
ANR	32118	Identifier	next_segment		31933	1					
ANR	32119	IfStatement	if ( ! segment )		31933	1					
ANR	32120	Condition	! segment	1591:7:45826:45833	31933	0	True				
ANR	32121	UnaryOperationExpression	! segment		31933	0					
ANR	32122	UnaryOperator	!		31933	0					
ANR	32123	Identifier	segment		31933	1					
ANR	32124	CompoundStatement		32:17:916:916	31933	1					
ANR	32125	ReturnStatement	return errors ;	1592:4:45842:45855	31933	0	True				
ANR	32126	Identifier	errors		31933	0					
ANR	32127	ExpressionStatement	q = ( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )	1594:3:45865:45936	31933	2	True				
ANR	32128	AssignmentExpression	q = ( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		31933	0		=			
ANR	32129	Identifier	q		31933	0					
ANR	32130	CastExpression	( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		31933	1					
ANR	32131	CastTarget	zend_mm_block *		31933	0					
ANR	32132	AdditiveExpression	( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE		31933	1		+			
ANR	32133	CastExpression	( char * ) segment		31933	0					
ANR	32134	CastTarget	char *		31933	0					
ANR	32135	Identifier	segment		31933	1					
ANR	32136	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		31933	1					
ANR	32137	ExpressionStatement	p = q	1596:2:45944:45949	31933	4	True				
ANR	32138	AssignmentExpression	p = q		31933	0		=			
ANR	32139	Identifier	p		31933	0					
ANR	32140	Identifier	q		31933	1					
ANR	32141	ReturnType	static int		31933	1					
ANR	32142	Identifier	zend_mm_check_heap		31933	2					
ANR	32143	ParameterList	"zend_mm_heap * heap , int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		31933	3					
ANR	32144	Parameter	zend_mm_heap * heap	1559:30:44846:44863	31933	0	True				
ANR	32145	ParameterType	zend_mm_heap *		31933	0					
ANR	32146	Identifier	heap		31933	1					
ANR	32147	Parameter	int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	1559:50:44866:44916	31933	1	True				
ANR	32148	ParameterType	int silent ZEND_FILE_LINE_DC		31933	0					
ANR	32149	Identifier	ZEND_FILE_LINE_ORIG_DC		31933	1					
ANR	32150	CFGEntryNode	ENTRY		31933		True				
ANR	32151	CFGExitNode	EXIT		31933		True				
ANR	32152	Symbol	p -> info		31933						
ANR	32153	Symbol	ZEND_FILE_LINE_ORIG_DC		31933						
ANR	32154	Symbol	p -> info . _size		31933						
ANR	32155	Symbol	MEM_BLOCK_LEAK		31933						
ANR	32156	Symbol	MEM_BLOCK_VALID		31933						
ANR	32157	Symbol	segment		31933						
ANR	32158	Symbol	heap		31933						
ANR	32159	Symbol	q -> info		31933						
ANR	32160	Symbol	p -> magic		31933						
ANR	32161	Symbol	ZEND_MM_IS_GUARD_BLOCK		31933						
ANR	32162	Symbol	p		31933						
ANR	32163	Symbol	q		31933						
ANR	32164	Symbol	q -> info . _prev		31933						
ANR	32165	Symbol	MEM_BLOCK_CACHED		31933						
ANR	32166	Symbol	ZEND_MM_IS_FREE_BLOCK		31933						
ANR	32167	Symbol	ZEND_MM_NEXT_BLOCK		31933						
ANR	32168	Symbol	heap -> segments_list		31933						
ANR	32169	Symbol	ZEND_MM_ALIGNED_SEGMENT_SIZE		31933						
ANR	32170	Symbol	segment -> size		31933						
ANR	32171	Symbol	* segment		31933						
ANR	32172	Symbol	* p		31933						
ANR	32173	Symbol	* q		31933						
ANR	32174	Symbol	* heap		31933						
ANR	32175	Symbol	errors		31933						
ANR	32176	Symbol	segment -> next_segment		31933						
ANR	32177	Function	zend_mm_shutdown	1601:0:45964:49599							
ANR	32178	FunctionDef	"zend_mm_shutdown (zend_mm_heap * heap , int full_shutdown , int silent TSRMLS_DC)"		32177	0					
ANR	32179	CompoundStatement		1602:0:46056:49599	32177	0					
ANR	32180	IdentifierDeclStatement	zend_mm_storage * storage ;	1603:1:46059:46083	32177	0	True				
ANR	32181	IdentifierDecl	* storage		32177	0					
ANR	32182	IdentifierDeclType	zend_mm_storage *		32177	0					
ANR	32183	Identifier	storage		32177	1					
ANR	32184	IdentifierDeclStatement	zend_mm_segment * segment ;	1604:1:46086:46110	32177	1	True				
ANR	32185	IdentifierDecl	* segment		32177	0					
ANR	32186	IdentifierDeclType	zend_mm_segment *		32177	0					
ANR	32187	Identifier	segment		32177	1					
ANR	32188	IdentifierDeclStatement	zend_mm_segment * prev ;	1605:1:46113:46134	32177	2	True				
ANR	32189	IdentifierDecl	* prev		32177	0					
ANR	32190	IdentifierDeclType	zend_mm_segment *		32177	0					
ANR	32191	Identifier	prev		32177	1					
ANR	32192	IdentifierDeclStatement	int internal ;	1606:1:46137:46149	32177	3	True				
ANR	32193	IdentifierDecl	internal		32177	0					
ANR	32194	IdentifierDeclType	int		32177	0					
ANR	32195	Identifier	internal		32177	1					
ANR	32196	IfStatement	if ( ! heap -> use_zend_alloc )		32177	4					
ANR	32197	Condition	! heap -> use_zend_alloc	1608:5:46157:46177	32177	0	True				
ANR	32198	UnaryOperationExpression	! heap -> use_zend_alloc		32177	0					
ANR	32199	UnaryOperator	!		32177	0					
ANR	32200	PtrMemberAccess	heap -> use_zend_alloc		32177	1					
ANR	32201	Identifier	heap		32177	0					
ANR	32202	Identifier	use_zend_alloc		32177	1					
ANR	32203	CompoundStatement		7:28:123:123	32177	1					
ANR	32204	IfStatement	if ( full_shutdown )		32177	0					
ANR	32205	Condition	full_shutdown	1609:6:46188:46200	32177	0	True				
ANR	32206	Identifier	full_shutdown		32177	0					
ANR	32207	CompoundStatement		8:21:146:146	32177	1					
ANR	32208	ExpressionStatement	free ( heap )	1610:3:46208:46218	32177	0	True				
ANR	32209	CallExpression	free ( heap )		32177	0					
ANR	32210	Callee	free		32177	0					
ANR	32211	Identifier	free		32177	0					
ANR	32212	ArgumentList	heap		32177	1					
ANR	32213	Argument	heap		32177	0					
ANR	32214	Identifier	heap		32177	0					
ANR	32215	ReturnStatement	return ;	1612:2:46226:46232	32177	1	True				
ANR	32216	IfStatement	if ( heap -> reserve )		32177	5					
ANR	32217	Condition	heap -> reserve	1615:5:46243:46255	32177	0	True				
ANR	32218	PtrMemberAccess	heap -> reserve		32177	0					
ANR	32219	Identifier	heap		32177	0					
ANR	32220	Identifier	reserve		32177	1					
ANR	32221	CompoundStatement		14:20:201:201	32177	1					
ANR	32222	IfStatement	if ( ! silent )		32177	0					
ANR	32223	Condition	! silent	1617:6:46281:46287	32177	0	True				
ANR	32224	UnaryOperationExpression	! silent		32177	0					
ANR	32225	UnaryOperator	!		32177	0					
ANR	32226	Identifier	silent		32177	1					
ANR	32227	CompoundStatement		16:15:233:233	32177	1					
ANR	32228	Statement	_zend_mm_free_int	1618:3:46295:46311	32177	0	True				
ANR	32229	Statement	(	1618:20:46312:46312	32177	1	True				
ANR	32230	Statement	heap	1618:21:46313:46316	32177	2	True				
ANR	32231	Statement	","	1618:25:46317:46317	32177	3	True				
ANR	32232	Statement	heap	1618:27:46319:46322	32177	4	True				
ANR	32233	Statement	->	1618:31:46323:46324	32177	5	True				
ANR	32234	Statement	reserve	1618:33:46325:46331	32177	6	True				
ANR	32235	Statement	ZEND_FILE_LINE_CC	1618:41:46333:46349	32177	7	True				
ANR	32236	Statement	ZEND_FILE_LINE_EMPTY_CC	1618:59:46351:46373	32177	8	True				
ANR	32237	Statement	)	1618:82:46374:46374	32177	9	True				
ANR	32238	ExpressionStatement		1618:83:46375:46375	32177	10	True				
ANR	32239	ExpressionStatement	heap -> reserve = NULL	1621:2:46390:46410	32177	1	True				
ANR	32240	AssignmentExpression	heap -> reserve = NULL		32177	0		=			
ANR	32241	PtrMemberAccess	heap -> reserve		32177	0					
ANR	32242	Identifier	heap		32177	0					
ANR	32243	Identifier	reserve		32177	1					
ANR	32244	Identifier	NULL		32177	1					
ANR	32245	IfStatement	if ( full_shutdown )		32177	6					
ANR	32246	Condition	full_shutdown	1625:5:46444:46456	32177	0	True				
ANR	32247	Identifier	full_shutdown		32177	0					
ANR	32248	CompoundStatement		25:2:406:413	32177	1					
ANR	32249	IdentifierDeclStatement	FILE * f ;	1626:2:46463:46470	32177	0	True				
ANR	32250	IdentifierDecl	* f		32177	0					
ANR	32251	IdentifierDeclType	FILE *		32177	0					
ANR	32252	Identifier	f		32177	1					
ANR	32253	ExpressionStatement	"f = fopen ( ""zend_mm.log"" , ""w"" )"	1628:2:46475:46504	32177	1	True				
ANR	32254	AssignmentExpression	"f = fopen ( ""zend_mm.log"" , ""w"" )"		32177	0		=			
ANR	32255	Identifier	f		32177	0					
ANR	32256	CallExpression	"fopen ( ""zend_mm.log"" , ""w"" )"		32177	1					
ANR	32257	Callee	fopen		32177	0					
ANR	32258	Identifier	fopen		32177	0					
ANR	32259	ArgumentList	"""zend_mm.log"""		32177	1					
ANR	32260	Argument	"""zend_mm.log"""		32177	0					
ANR	32261	PrimaryExpression	"""zend_mm.log"""		32177	0					
ANR	32262	Argument	"""w"""		32177	1					
ANR	32263	PrimaryExpression	"""w"""		32177	0					
ANR	32264	IfStatement	if ( f )		32177	2					
ANR	32265	Condition	f	1629:6:46512:46512	32177	0	True				
ANR	32266	Identifier	f		32177	0					
ANR	32267	CompoundStatement		31:3:522:543	32177	1					
ANR	32268	IdentifierDeclStatement	"int i , j ;"	1630:3:46520:46527	32177	0	True				
ANR	32269	IdentifierDecl	i		32177	0					
ANR	32270	IdentifierDeclType	int		32177	0					
ANR	32271	Identifier	i		32177	1					
ANR	32272	IdentifierDecl	j		32177	1					
ANR	32273	IdentifierDeclType	int		32177	0					
ANR	32274	Identifier	j		32177	1					
ANR	32275	IdentifierDeclStatement	"size_t size , true_size , min_size , max_size ;"	1631:3:46532:46574	32177	1	True				
ANR	32276	IdentifierDecl	size		32177	0					
ANR	32277	IdentifierDeclType	size_t		32177	0					
ANR	32278	Identifier	size		32177	1					
ANR	32279	IdentifierDecl	true_size		32177	1					
ANR	32280	IdentifierDeclType	size_t		32177	0					
ANR	32281	Identifier	true_size		32177	1					
ANR	32282	IdentifierDecl	min_size		32177	2					
ANR	32283	IdentifierDeclType	size_t		32177	0					
ANR	32284	Identifier	min_size		32177	1					
ANR	32285	IdentifierDecl	max_size		32177	3					
ANR	32286	IdentifierDeclType	size_t		32177	0					
ANR	32287	Identifier	max_size		32177	1					
ANR	32288	IdentifierDeclStatement	"int hit = 0 , miss = 0 ;"	1632:3:46579:46600	32177	2	True				
ANR	32289	IdentifierDecl	hit = 0		32177	0					
ANR	32290	IdentifierDeclType	int		32177	0					
ANR	32291	Identifier	hit		32177	1					
ANR	32292	AssignmentExpression	hit = 0		32177	2		=			
ANR	32293	Identifier	hit		32177	0					
ANR	32294	PrimaryExpression	0		32177	1					
ANR	32295	IdentifierDecl	miss = 0		32177	1					
ANR	32296	IdentifierDeclType	int		32177	0					
ANR	32297	Identifier	miss		32177	1					
ANR	32298	AssignmentExpression	miss = 0		32177	2		=			
ANR	32299	Identifier	miss		32177	0					
ANR	32300	PrimaryExpression	0		32177	1					
ANR	32301	ExpressionStatement	"fprintf ( f , ""\\nidx min_size max_size true_size  max_len     hits   misses\\n"" )"	1634:3:46606:46682	32177	3	True				
ANR	32302	CallExpression	"fprintf ( f , ""\\nidx min_size max_size true_size  max_len     hits   misses\\n"" )"		32177	0					
ANR	32303	Callee	fprintf		32177	0					
ANR	32304	Identifier	fprintf		32177	0					
ANR	32305	ArgumentList	f		32177	1					
ANR	32306	Argument	f		32177	0					
ANR	32307	Identifier	f		32177	0					
ANR	32308	Argument	"""\\nidx min_size max_size true_size  max_len     hits   misses\\n"""		32177	1					
ANR	32309	PrimaryExpression	"""\\nidx min_size max_size true_size  max_len     hits   misses\\n"""		32177	0					
ANR	32310	ExpressionStatement	size = 0	1635:3:46687:46695	32177	4	True				
ANR	32311	AssignmentExpression	size = 0		32177	0		=			
ANR	32312	Identifier	size		32177	0					
ANR	32313	PrimaryExpression	0		32177	1					
ANR	32314	WhileStatement	while ( 1 )		32177	5					
ANR	32315	Condition	1	1636:10:46707:46707	32177	0	True				
ANR	32316	PrimaryExpression	1		32177	0					
ANR	32317	CompoundStatement		35:13:653:653	32177	1					
ANR	32318	ExpressionStatement	true_size = ZEND_MM_TRUE_SIZE ( size )	1637:4:46716:46751	32177	0	True				
ANR	32319	AssignmentExpression	true_size = ZEND_MM_TRUE_SIZE ( size )		32177	0		=			
ANR	32320	Identifier	true_size		32177	0					
ANR	32321	CallExpression	ZEND_MM_TRUE_SIZE ( size )		32177	1					
ANR	32322	Callee	ZEND_MM_TRUE_SIZE		32177	0					
ANR	32323	Identifier	ZEND_MM_TRUE_SIZE		32177	0					
ANR	32324	ArgumentList	size		32177	1					
ANR	32325	Argument	size		32177	0					
ANR	32326	Identifier	size		32177	0					
ANR	32327	IfStatement	if ( ZEND_MM_SMALL_SIZE ( true_size ) )		32177	1					
ANR	32328	Condition	ZEND_MM_SMALL_SIZE ( true_size )	1638:8:46761:46789	32177	0	True				
ANR	32329	CallExpression	ZEND_MM_SMALL_SIZE ( true_size )		32177	0					
ANR	32330	Callee	ZEND_MM_SMALL_SIZE		32177	0					
ANR	32331	Identifier	ZEND_MM_SMALL_SIZE		32177	0					
ANR	32332	ArgumentList	true_size		32177	1					
ANR	32333	Argument	true_size		32177	0					
ANR	32334	Identifier	true_size		32177	0					
ANR	32335	CompoundStatement		37:39:735:735	32177	1					
ANR	32336	ExpressionStatement	min_size = size	1639:5:46799:46814	32177	0	True				
ANR	32337	AssignmentExpression	min_size = size		32177	0		=			
ANR	32338	Identifier	min_size		32177	0					
ANR	32339	Identifier	size		32177	1					
ANR	32340	ExpressionStatement	i = ZEND_MM_BUCKET_INDEX ( true_size )	1640:5:46821:46856	32177	1	True				
ANR	32341	AssignmentExpression	i = ZEND_MM_BUCKET_INDEX ( true_size )		32177	0		=			
ANR	32342	Identifier	i		32177	0					
ANR	32343	CallExpression	ZEND_MM_BUCKET_INDEX ( true_size )		32177	1					
ANR	32344	Callee	ZEND_MM_BUCKET_INDEX		32177	0					
ANR	32345	Identifier	ZEND_MM_BUCKET_INDEX		32177	0					
ANR	32346	ArgumentList	true_size		32177	1					
ANR	32347	Argument	true_size		32177	0					
ANR	32348	Identifier	true_size		32177	0					
ANR	32349	ExpressionStatement	size ++	1641:5:46863:46869	32177	2	True				
ANR	32350	PostIncDecOperationExpression	size ++		32177	0					
ANR	32351	Identifier	size		32177	0					
ANR	32352	IncDec	++		32177	1					
ANR	32353	WhileStatement	while ( 1 )		32177	3					
ANR	32354	Condition	1	1642:12:46883:46883	32177	0	True				
ANR	32355	PrimaryExpression	1		32177	0					
ANR	32356	CompoundStatement		41:15:829:829	32177	1					
ANR	32357	ExpressionStatement	true_size = ZEND_MM_TRUE_SIZE ( size )	1643:6:46894:46929	32177	0	True				
ANR	32358	AssignmentExpression	true_size = ZEND_MM_TRUE_SIZE ( size )		32177	0		=			
ANR	32359	Identifier	true_size		32177	0					
ANR	32360	CallExpression	ZEND_MM_TRUE_SIZE ( size )		32177	1					
ANR	32361	Callee	ZEND_MM_TRUE_SIZE		32177	0					
ANR	32362	Identifier	ZEND_MM_TRUE_SIZE		32177	0					
ANR	32363	ArgumentList	size		32177	1					
ANR	32364	Argument	size		32177	0					
ANR	32365	Identifier	size		32177	0					
ANR	32366	IfStatement	if ( ZEND_MM_SMALL_SIZE ( true_size ) )		32177	1					
ANR	32367	Condition	ZEND_MM_SMALL_SIZE ( true_size )	1644:10:46941:46969	32177	0	True				
ANR	32368	CallExpression	ZEND_MM_SMALL_SIZE ( true_size )		32177	0					
ANR	32369	Callee	ZEND_MM_SMALL_SIZE		32177	0					
ANR	32370	Identifier	ZEND_MM_SMALL_SIZE		32177	0					
ANR	32371	ArgumentList	true_size		32177	1					
ANR	32372	Argument	true_size		32177	0					
ANR	32373	Identifier	true_size		32177	0					
ANR	32374	CompoundStatement		43:41:915:915	32177	1					
ANR	32375	ExpressionStatement	j = ZEND_MM_BUCKET_INDEX ( true_size )	1645:7:46981:47016	32177	0	True				
ANR	32376	AssignmentExpression	j = ZEND_MM_BUCKET_INDEX ( true_size )		32177	0		=			
ANR	32377	Identifier	j		32177	0					
ANR	32378	CallExpression	ZEND_MM_BUCKET_INDEX ( true_size )		32177	1					
ANR	32379	Callee	ZEND_MM_BUCKET_INDEX		32177	0					
ANR	32380	Identifier	ZEND_MM_BUCKET_INDEX		32177	0					
ANR	32381	ArgumentList	true_size		32177	1					
ANR	32382	Argument	true_size		32177	0					
ANR	32383	Identifier	true_size		32177	0					
ANR	32384	IfStatement	if ( j > i )		32177	1					
ANR	32385	Condition	j > i	1646:11:47029:47033	32177	0	True				
ANR	32386	RelationalExpression	j > i		32177	0		>			
ANR	32387	Identifier	j		32177	0					
ANR	32388	Identifier	i		32177	1					
ANR	32389	CompoundStatement		45:18:979:979	32177	1					
ANR	32390	ExpressionStatement	max_size = size - 1	1647:8:47046:47063	32177	0	True				
ANR	32391	AssignmentExpression	max_size = size - 1		32177	0		=			
ANR	32392	Identifier	max_size		32177	0					
ANR	32393	AdditiveExpression	size - 1		32177	1		-			
ANR	32394	Identifier	size		32177	0					
ANR	32395	PrimaryExpression	1		32177	1					
ANR	32396	BreakStatement	break ;	1648:8:47073:47078	32177	1	True				
ANR	32397	ElseStatement	else		32177	0					
ANR	32398	CompoundStatement		49:13:1045:1045	32177	0					
ANR	32399	ExpressionStatement	max_size = size - 1	1651:7:47111:47128	32177	0	True				
ANR	32400	AssignmentExpression	max_size = size - 1		32177	0		=			
ANR	32401	Identifier	max_size		32177	0					
ANR	32402	AdditiveExpression	size - 1		32177	1		-			
ANR	32403	Identifier	size		32177	0					
ANR	32404	PrimaryExpression	1		32177	1					
ANR	32405	BreakStatement	break ;	1652:7:47137:47142	32177	1	True				
ANR	32406	ExpressionStatement	size ++	1654:6:47158:47164	32177	2	True				
ANR	32407	PostIncDecOperationExpression	size ++		32177	0					
ANR	32408	Identifier	size		32177	0					
ANR	32409	IncDec	++		32177	1					
ANR	32410	ExpressionStatement	hit += heap -> cache_stat [ i ] . hit	1656:5:47178:47208	32177	4	True				
ANR	32411	AssignmentExpression	hit += heap -> cache_stat [ i ] . hit		32177	0		+=			
ANR	32412	Identifier	hit		32177	0					
ANR	32413	MemberAccess	heap -> cache_stat [ i ] . hit		32177	1					
ANR	32414	ArrayIndexing	heap -> cache_stat [ i ]		32177	0					
ANR	32415	PtrMemberAccess	heap -> cache_stat		32177	0					
ANR	32416	Identifier	heap		32177	0					
ANR	32417	Identifier	cache_stat		32177	1					
ANR	32418	Identifier	i		32177	1					
ANR	32419	Identifier	hit		32177	1					
ANR	32420	ExpressionStatement	miss += heap -> cache_stat [ i ] . miss	1657:5:47215:47247	32177	5	True				
ANR	32421	AssignmentExpression	miss += heap -> cache_stat [ i ] . miss		32177	0		+=			
ANR	32422	Identifier	miss		32177	0					
ANR	32423	MemberAccess	heap -> cache_stat [ i ] . miss		32177	1					
ANR	32424	ArrayIndexing	heap -> cache_stat [ i ]		32177	0					
ANR	32425	PtrMemberAccess	heap -> cache_stat		32177	0					
ANR	32426	Identifier	heap		32177	0					
ANR	32427	Identifier	cache_stat		32177	1					
ANR	32428	Identifier	i		32177	1					
ANR	32429	Identifier	miss		32177	1					
ANR	32430	ExpressionStatement	"fprintf ( f , ""%2d %8d %8d %9d %8d %8d %8d\\n"" , i , ( int ) min_size , ( int ) max_size , ZEND_MM_TRUE_SIZE ( max_size ) , heap -> cache_stat [ i ] . max_count , heap -> cache_stat [ i ] . hit , heap -> cache_stat [ i ] . miss )"	1658:5:47254:47441	32177	6	True				
ANR	32431	CallExpression	"fprintf ( f , ""%2d %8d %8d %9d %8d %8d %8d\\n"" , i , ( int ) min_size , ( int ) max_size , ZEND_MM_TRUE_SIZE ( max_size ) , heap -> cache_stat [ i ] . max_count , heap -> cache_stat [ i ] . hit , heap -> cache_stat [ i ] . miss )"		32177	0					
ANR	32432	Callee	fprintf		32177	0					
ANR	32433	Identifier	fprintf		32177	0					
ANR	32434	ArgumentList	f		32177	1					
ANR	32435	Argument	f		32177	0					
ANR	32436	Identifier	f		32177	0					
ANR	32437	Argument	"""%2d %8d %8d %9d %8d %8d %8d\\n"""		32177	1					
ANR	32438	PrimaryExpression	"""%2d %8d %8d %9d %8d %8d %8d\\n"""		32177	0					
ANR	32439	Argument	i		32177	2					
ANR	32440	Identifier	i		32177	0					
ANR	32441	Argument	( int ) min_size		32177	3					
ANR	32442	CastExpression	( int ) min_size		32177	0					
ANR	32443	CastTarget	int		32177	0					
ANR	32444	Identifier	min_size		32177	1					
ANR	32445	Argument	( int ) max_size		32177	4					
ANR	32446	CastExpression	( int ) max_size		32177	0					
ANR	32447	CastTarget	int		32177	0					
ANR	32448	Identifier	max_size		32177	1					
ANR	32449	Argument	ZEND_MM_TRUE_SIZE ( max_size )		32177	5					
ANR	32450	CallExpression	ZEND_MM_TRUE_SIZE ( max_size )		32177	0					
ANR	32451	Callee	ZEND_MM_TRUE_SIZE		32177	0					
ANR	32452	Identifier	ZEND_MM_TRUE_SIZE		32177	0					
ANR	32453	ArgumentList	max_size		32177	1					
ANR	32454	Argument	max_size		32177	0					
ANR	32455	Identifier	max_size		32177	0					
ANR	32456	Argument	heap -> cache_stat [ i ] . max_count		32177	6					
ANR	32457	MemberAccess	heap -> cache_stat [ i ] . max_count		32177	0					
ANR	32458	ArrayIndexing	heap -> cache_stat [ i ]		32177	0					
ANR	32459	PtrMemberAccess	heap -> cache_stat		32177	0					
ANR	32460	Identifier	heap		32177	0					
ANR	32461	Identifier	cache_stat		32177	1					
ANR	32462	Identifier	i		32177	1					
ANR	32463	Identifier	max_count		32177	1					
ANR	32464	Argument	heap -> cache_stat [ i ] . hit		32177	7					
ANR	32465	MemberAccess	heap -> cache_stat [ i ] . hit		32177	0					
ANR	32466	ArrayIndexing	heap -> cache_stat [ i ]		32177	0					
ANR	32467	PtrMemberAccess	heap -> cache_stat		32177	0					
ANR	32468	Identifier	heap		32177	0					
ANR	32469	Identifier	cache_stat		32177	1					
ANR	32470	Identifier	i		32177	1					
ANR	32471	Identifier	hit		32177	1					
ANR	32472	Argument	heap -> cache_stat [ i ] . miss		32177	8					
ANR	32473	MemberAccess	heap -> cache_stat [ i ] . miss		32177	0					
ANR	32474	ArrayIndexing	heap -> cache_stat [ i ]		32177	0					
ANR	32475	PtrMemberAccess	heap -> cache_stat		32177	0					
ANR	32476	Identifier	heap		32177	0					
ANR	32477	Identifier	cache_stat		32177	1					
ANR	32478	Identifier	i		32177	1					
ANR	32479	Identifier	miss		32177	1					
ANR	32480	ElseStatement	else		32177	0					
ANR	32481	CompoundStatement		58:11:1397:1397	32177	0					
ANR	32482	BreakStatement	break ;	1660:5:47461:47466	32177	0	True				
ANR	32483	ExpressionStatement	"fprintf ( f , ""                                        %8d %8d\\n"" , hit , miss )"	1663:3:47482:47556	32177	6	True				
ANR	32484	CallExpression	"fprintf ( f , ""                                        %8d %8d\\n"" , hit , miss )"		32177	0					
ANR	32485	Callee	fprintf		32177	0					
ANR	32486	Identifier	fprintf		32177	0					
ANR	32487	ArgumentList	f		32177	1					
ANR	32488	Argument	f		32177	0					
ANR	32489	Identifier	f		32177	0					
ANR	32490	Argument	"""                                        %8d %8d\\n"""		32177	1					
ANR	32491	PrimaryExpression	"""                                        %8d %8d\\n"""		32177	0					
ANR	32492	Argument	hit		32177	2					
ANR	32493	Identifier	hit		32177	0					
ANR	32494	Argument	miss		32177	3					
ANR	32495	Identifier	miss		32177	0					
ANR	32496	ExpressionStatement	"fprintf ( f , ""                                        %8d %8d\\n"" , heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . hit , heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . miss )"	1664:3:47561:47711	32177	7	True				
ANR	32497	CallExpression	"fprintf ( f , ""                                        %8d %8d\\n"" , heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . hit , heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . miss )"		32177	0					
ANR	32498	Callee	fprintf		32177	0					
ANR	32499	Identifier	fprintf		32177	0					
ANR	32500	ArgumentList	f		32177	1					
ANR	32501	Argument	f		32177	0					
ANR	32502	Identifier	f		32177	0					
ANR	32503	Argument	"""                                        %8d %8d\\n"""		32177	1					
ANR	32504	PrimaryExpression	"""                                        %8d %8d\\n"""		32177	0					
ANR	32505	Argument	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . hit		32177	2					
ANR	32506	MemberAccess	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . hit		32177	0					
ANR	32507	ArrayIndexing	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ]		32177	0					
ANR	32508	PtrMemberAccess	heap -> cache_stat		32177	0					
ANR	32509	Identifier	heap		32177	0					
ANR	32510	Identifier	cache_stat		32177	1					
ANR	32511	Identifier	ZEND_MM_NUM_BUCKETS		32177	1					
ANR	32512	Identifier	hit		32177	1					
ANR	32513	Argument	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . miss		32177	3					
ANR	32514	MemberAccess	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . miss		32177	0					
ANR	32515	ArrayIndexing	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ]		32177	0					
ANR	32516	PtrMemberAccess	heap -> cache_stat		32177	0					
ANR	32517	Identifier	heap		32177	0					
ANR	32518	Identifier	cache_stat		32177	1					
ANR	32519	Identifier	ZEND_MM_NUM_BUCKETS		32177	1					
ANR	32520	Identifier	miss		32177	1					
ANR	32521	ExpressionStatement	fclose ( f )	1665:3:47716:47725	32177	8	True				
ANR	32522	CallExpression	fclose ( f )		32177	0					
ANR	32523	Callee	fclose		32177	0					
ANR	32524	Identifier	fclose		32177	0					
ANR	32525	ArgumentList	f		32177	1					
ANR	32526	Argument	f		32177	0					
ANR	32527	Identifier	f		32177	0					
ANR	32528	IfStatement	if ( ! silent )		32177	7					
ANR	32529	Condition	! silent	1671:5:47762:47768	32177	0	True				
ANR	32530	UnaryOperationExpression	! silent		32177	0					
ANR	32531	UnaryOperator	!		32177	0					
ANR	32532	Identifier	silent		32177	1					
ANR	32533	CompoundStatement		70:14:1714:1714	32177	1					
ANR	32534	Statement	zend_mm_check_leaks	1672:2:47775:47793	32177	0	True				
ANR	32535	Statement	(	1672:21:47794:47794	32177	1	True				
ANR	32536	Statement	heap	1672:22:47795:47798	32177	2	True				
ANR	32537	Statement	TSRMLS_CC	1672:27:47800:47808	32177	3	True				
ANR	32538	Statement	)	1672:36:47809:47809	32177	4	True				
ANR	32539	ExpressionStatement		1672:37:47810:47810	32177	5	True				
ANR	32540	ExpressionStatement	internal = heap -> internal	1676:1:47824:47849	32177	8	True				
ANR	32541	AssignmentExpression	internal = heap -> internal		32177	0		=			
ANR	32542	Identifier	internal		32177	0					
ANR	32543	PtrMemberAccess	heap -> internal		32177	1					
ANR	32544	Identifier	heap		32177	0					
ANR	32545	Identifier	internal		32177	1					
ANR	32546	ExpressionStatement	storage = heap -> storage	1677:1:47852:47875	32177	9	True				
ANR	32547	AssignmentExpression	storage = heap -> storage		32177	0		=			
ANR	32548	Identifier	storage		32177	0					
ANR	32549	PtrMemberAccess	heap -> storage		32177	1					
ANR	32550	Identifier	heap		32177	0					
ANR	32551	Identifier	storage		32177	1					
ANR	32552	ExpressionStatement	segment = heap -> segments_list	1678:1:47878:47907	32177	10	True				
ANR	32553	AssignmentExpression	segment = heap -> segments_list		32177	0		=			
ANR	32554	Identifier	segment		32177	0					
ANR	32555	PtrMemberAccess	heap -> segments_list		32177	1					
ANR	32556	Identifier	heap		32177	0					
ANR	32557	Identifier	segments_list		32177	1					
ANR	32558	IfStatement	if ( full_shutdown )		32177	11					
ANR	32559	Condition	full_shutdown	1679:5:47914:47926	32177	0	True				
ANR	32560	Identifier	full_shutdown		32177	0					
ANR	32561	CompoundStatement		78:20:1872:1872	32177	1					
ANR	32562	WhileStatement	while ( segment )		32177	0					
ANR	32563	Condition	segment	1680:9:47940:47946	32177	0	True				
ANR	32564	Identifier	segment		32177	0					
ANR	32565	CompoundStatement		79:18:1892:1892	32177	1					
ANR	32566	ExpressionStatement	prev = segment	1681:3:47954:47968	32177	0	True				
ANR	32567	AssignmentExpression	prev = segment		32177	0		=			
ANR	32568	Identifier	prev		32177	0					
ANR	32569	Identifier	segment		32177	1					
ANR	32570	ExpressionStatement	segment = segment -> next_segment	1682:3:47973:48004	32177	1	True				
ANR	32571	AssignmentExpression	segment = segment -> next_segment		32177	0		=			
ANR	32572	Identifier	segment		32177	0					
ANR	32573	PtrMemberAccess	segment -> next_segment		32177	1					
ANR	32574	Identifier	segment		32177	0					
ANR	32575	Identifier	next_segment		32177	1					
ANR	32576	ExpressionStatement	ZEND_MM_STORAGE_FREE ( prev )	1683:3:48009:48035	32177	2	True				
ANR	32577	CallExpression	ZEND_MM_STORAGE_FREE ( prev )		32177	0					
ANR	32578	Callee	ZEND_MM_STORAGE_FREE		32177	0					
ANR	32579	Identifier	ZEND_MM_STORAGE_FREE		32177	0					
ANR	32580	ArgumentList	prev		32177	1					
ANR	32581	Argument	prev		32177	0					
ANR	32582	Identifier	prev		32177	0					
ANR	32583	ExpressionStatement	heap -> segments_list = NULL	1685:2:48043:48069	32177	1	True				
ANR	32584	AssignmentExpression	heap -> segments_list = NULL		32177	0		=			
ANR	32585	PtrMemberAccess	heap -> segments_list		32177	0					
ANR	32586	Identifier	heap		32177	0					
ANR	32587	Identifier	segments_list		32177	1					
ANR	32588	Identifier	NULL		32177	1					
ANR	32589	ExpressionStatement	storage -> handlers -> dtor ( storage )	1686:2:48073:48105	32177	2	True				
ANR	32590	CallExpression	storage -> handlers -> dtor ( storage )		32177	0					
ANR	32591	Callee	storage -> handlers -> dtor		32177	0					
ANR	32592	PtrMemberAccess	storage -> handlers -> dtor		32177	0					
ANR	32593	PtrMemberAccess	storage -> handlers		32177	0					
ANR	32594	Identifier	storage		32177	0					
ANR	32595	Identifier	handlers		32177	1					
ANR	32596	Identifier	dtor		32177	1					
ANR	32597	ArgumentList	storage		32177	1					
ANR	32598	Argument	storage		32177	0					
ANR	32599	Identifier	storage		32177	0					
ANR	32600	IfStatement	if ( ! internal )		32177	3					
ANR	32601	Condition	! internal	1687:6:48113:48121	32177	0	True				
ANR	32602	UnaryOperationExpression	! internal		32177	0					
ANR	32603	UnaryOperator	!		32177	0					
ANR	32604	Identifier	internal		32177	1					
ANR	32605	CompoundStatement		86:17:2067:2067	32177	1					
ANR	32606	ExpressionStatement	free ( heap )	1688:3:48129:48139	32177	0	True				
ANR	32607	CallExpression	free ( heap )		32177	0					
ANR	32608	Callee	free		32177	0					
ANR	32609	Identifier	free		32177	0					
ANR	32610	ArgumentList	heap		32177	1					
ANR	32611	Argument	heap		32177	0					
ANR	32612	Identifier	heap		32177	0					
ANR	32613	ElseStatement	else		32177	0					
ANR	32614	CompoundStatement		89:8:2096:2096	32177	0					
ANR	32615	IfStatement	if ( segment )		32177	0					
ANR	32616	Condition	segment	1691:6:48161:48167	32177	0	True				
ANR	32617	Identifier	segment		32177	0					
ANR	32618	CompoundStatement		90:15:2113:2113	32177	1					
ANR	32619	IfStatement	if ( heap -> reserve_size )		32177	0					
ANR	32620	Condition	heap -> reserve_size	1693:7:48198:48215	32177	0	True				
ANR	32621	PtrMemberAccess	heap -> reserve_size		32177	0					
ANR	32622	Identifier	heap		32177	0					
ANR	32623	Identifier	reserve_size		32177	1					
ANR	32624	CompoundStatement		92:27:2161:2161	32177	1					
ANR	32625	WhileStatement	while ( segment -> next_segment )		32177	0					
ANR	32626	Condition	segment -> next_segment	1694:11:48231:48251	32177	0	True				
ANR	32627	PtrMemberAccess	segment -> next_segment		32177	0					
ANR	32628	Identifier	segment		32177	0					
ANR	32629	Identifier	next_segment		32177	1					
ANR	32630	CompoundStatement		93:34:2197:2197	32177	1					
ANR	32631	ExpressionStatement	prev = segment	1695:5:48261:48275	32177	0	True				
ANR	32632	AssignmentExpression	prev = segment		32177	0		=			
ANR	32633	Identifier	prev		32177	0					
ANR	32634	Identifier	segment		32177	1					
ANR	32635	ExpressionStatement	segment = segment -> next_segment	1696:5:48282:48313	32177	1	True				
ANR	32636	AssignmentExpression	segment = segment -> next_segment		32177	0		=			
ANR	32637	Identifier	segment		32177	0					
ANR	32638	PtrMemberAccess	segment -> next_segment		32177	1					
ANR	32639	Identifier	segment		32177	0					
ANR	32640	Identifier	next_segment		32177	1					
ANR	32641	ExpressionStatement	ZEND_MM_STORAGE_FREE ( prev )	1697:5:48320:48346	32177	2	True				
ANR	32642	CallExpression	ZEND_MM_STORAGE_FREE ( prev )		32177	0					
ANR	32643	Callee	ZEND_MM_STORAGE_FREE		32177	0					
ANR	32644	Identifier	ZEND_MM_STORAGE_FREE		32177	0					
ANR	32645	ArgumentList	prev		32177	1					
ANR	32646	Argument	prev		32177	0					
ANR	32647	Identifier	prev		32177	0					
ANR	32648	ExpressionStatement	heap -> segments_list = segment	1699:4:48358:48387	32177	1	True				
ANR	32649	AssignmentExpression	heap -> segments_list = segment		32177	0		=			
ANR	32650	PtrMemberAccess	heap -> segments_list		32177	0					
ANR	32651	Identifier	heap		32177	0					
ANR	32652	Identifier	segments_list		32177	1					
ANR	32653	Identifier	segment		32177	1					
ANR	32654	ElseStatement	else		32177	0					
ANR	32655	CompoundStatement		99:10:2342:2342	32177	0					
ANR	32656	DoStatement	do		32177	0					
ANR	32657	CompoundStatement		101:7:2358:2358	32177	0					
ANR	32658	ExpressionStatement	prev = segment	1703:5:48422:48436	32177	0	True				
ANR	32659	AssignmentExpression	prev = segment		32177	0		=			
ANR	32660	Identifier	prev		32177	0					
ANR	32661	Identifier	segment		32177	1					
ANR	32662	ExpressionStatement	segment = segment -> next_segment	1704:5:48443:48474	32177	1	True				
ANR	32663	AssignmentExpression	segment = segment -> next_segment		32177	0		=			
ANR	32664	Identifier	segment		32177	0					
ANR	32665	PtrMemberAccess	segment -> next_segment		32177	1					
ANR	32666	Identifier	segment		32177	0					
ANR	32667	Identifier	next_segment		32177	1					
ANR	32668	ExpressionStatement	ZEND_MM_STORAGE_FREE ( prev )	1705:5:48481:48507	32177	2	True				
ANR	32669	CallExpression	ZEND_MM_STORAGE_FREE ( prev )		32177	0					
ANR	32670	Callee	ZEND_MM_STORAGE_FREE		32177	0					
ANR	32671	Identifier	ZEND_MM_STORAGE_FREE		32177	0					
ANR	32672	ArgumentList	prev		32177	1					
ANR	32673	Argument	prev		32177	0					
ANR	32674	Identifier	prev		32177	0					
ANR	32675	Condition	segment	1706:13:48522:48528	32177	1	True				
ANR	32676	Identifier	segment		32177	0					
ANR	32677	ExpressionStatement	heap -> segments_list = NULL	1707:4:48536:48562	32177	1	True				
ANR	32678	AssignmentExpression	heap -> segments_list = NULL		32177	0		=			
ANR	32679	PtrMemberAccess	heap -> segments_list		32177	0					
ANR	32680	Identifier	heap		32177	0					
ANR	32681	Identifier	segments_list		32177	1					
ANR	32682	Identifier	NULL		32177	1					
ANR	32683	IfStatement	if ( heap -> compact_size && heap -> real_peak > heap -> compact_size )		32177	1					
ANR	32684	Condition	heap -> compact_size && heap -> real_peak > heap -> compact_size	1712:6:48605:48668	32177	0	True				
ANR	32685	AndExpression	heap -> compact_size && heap -> real_peak > heap -> compact_size		32177	0		&&			
ANR	32686	PtrMemberAccess	heap -> compact_size		32177	0					
ANR	32687	Identifier	heap		32177	0					
ANR	32688	Identifier	compact_size		32177	1					
ANR	32689	RelationalExpression	heap -> real_peak > heap -> compact_size		32177	1		>			
ANR	32690	PtrMemberAccess	heap -> real_peak		32177	0					
ANR	32691	Identifier	heap		32177	0					
ANR	32692	Identifier	real_peak		32177	1					
ANR	32693	PtrMemberAccess	heap -> compact_size		32177	1					
ANR	32694	Identifier	heap		32177	0					
ANR	32695	Identifier	compact_size		32177	1					
ANR	32696	CompoundStatement		112:44:2614:2614	32177	1					
ANR	32697	ExpressionStatement	storage -> handlers -> compact ( storage )	1714:3:48676:48711	32177	0	True				
ANR	32698	CallExpression	storage -> handlers -> compact ( storage )		32177	0					
ANR	32699	Callee	storage -> handlers -> compact		32177	0					
ANR	32700	PtrMemberAccess	storage -> handlers -> compact		32177	0					
ANR	32701	PtrMemberAccess	storage -> handlers		32177	0					
ANR	32702	Identifier	storage		32177	0					
ANR	32703	Identifier	handlers		32177	1					
ANR	32704	Identifier	compact		32177	1					
ANR	32705	ArgumentList	storage		32177	1					
ANR	32706	Argument	storage		32177	0					
ANR	32707	Identifier	storage		32177	0					
ANR	32708	ExpressionStatement	zend_mm_init ( heap )	1716:2:48719:48737	32177	2	True				
ANR	32709	CallExpression	zend_mm_init ( heap )		32177	0					
ANR	32710	Callee	zend_mm_init		32177	0					
ANR	32711	Identifier	zend_mm_init		32177	0					
ANR	32712	ArgumentList	heap		32177	1					
ANR	32713	Argument	heap		32177	0					
ANR	32714	Identifier	heap		32177	0					
ANR	32715	IfStatement	if ( heap -> segments_list )		32177	3					
ANR	32716	Condition	heap -> segments_list	1717:6:48745:48763	32177	0	True				
ANR	32717	PtrMemberAccess	heap -> segments_list		32177	0					
ANR	32718	Identifier	heap		32177	0					
ANR	32719	Identifier	segments_list		32177	1					
ANR	32720	CompoundStatement		116:27:2709:2709	32177	1					
ANR	32721	ExpressionStatement	heap -> real_size = heap -> segments_list -> size	1718:3:48771:48814	32177	0	True				
ANR	32722	AssignmentExpression	heap -> real_size = heap -> segments_list -> size		32177	0		=			
ANR	32723	PtrMemberAccess	heap -> real_size		32177	0					
ANR	32724	Identifier	heap		32177	0					
ANR	32725	Identifier	real_size		32177	1					
ANR	32726	PtrMemberAccess	heap -> segments_list -> size		32177	1					
ANR	32727	PtrMemberAccess	heap -> segments_list		32177	0					
ANR	32728	Identifier	heap		32177	0					
ANR	32729	Identifier	segments_list		32177	1					
ANR	32730	Identifier	size		32177	1					
ANR	32731	ExpressionStatement	heap -> real_peak = heap -> segments_list -> size	1719:3:48819:48862	32177	1	True				
ANR	32732	AssignmentExpression	heap -> real_peak = heap -> segments_list -> size		32177	0		=			
ANR	32733	PtrMemberAccess	heap -> real_peak		32177	0					
ANR	32734	Identifier	heap		32177	0					
ANR	32735	Identifier	real_peak		32177	1					
ANR	32736	PtrMemberAccess	heap -> segments_list -> size		32177	1					
ANR	32737	PtrMemberAccess	heap -> segments_list		32177	0					
ANR	32738	Identifier	heap		32177	0					
ANR	32739	Identifier	segments_list		32177	1					
ANR	32740	Identifier	size		32177	1					
ANR	32741	ElseStatement	else		32177	0					
ANR	32742	CompoundStatement		119:9:2816:2816	32177	0					
ANR	32743	ExpressionStatement	heap -> real_size = 0	1721:3:48878:48897	32177	0	True				
ANR	32744	AssignmentExpression	heap -> real_size = 0		32177	0		=			
ANR	32745	PtrMemberAccess	heap -> real_size		32177	0					
ANR	32746	Identifier	heap		32177	0					
ANR	32747	Identifier	real_size		32177	1					
ANR	32748	PrimaryExpression	0		32177	1					
ANR	32749	ExpressionStatement	heap -> real_peak = 0	1722:3:48902:48921	32177	1	True				
ANR	32750	AssignmentExpression	heap -> real_peak = 0		32177	0		=			
ANR	32751	PtrMemberAccess	heap -> real_peak		32177	0					
ANR	32752	Identifier	heap		32177	0					
ANR	32753	Identifier	real_peak		32177	1					
ANR	32754	PrimaryExpression	0		32177	1					
ANR	32755	ExpressionStatement	heap -> size = 0	1724:2:48929:48943	32177	4	True				
ANR	32756	AssignmentExpression	heap -> size = 0		32177	0		=			
ANR	32757	PtrMemberAccess	heap -> size		32177	0					
ANR	32758	Identifier	heap		32177	0					
ANR	32759	Identifier	size		32177	1					
ANR	32760	PrimaryExpression	0		32177	1					
ANR	32761	ExpressionStatement	heap -> peak = 0	1725:2:48947:48961	32177	5	True				
ANR	32762	AssignmentExpression	heap -> peak = 0		32177	0		=			
ANR	32763	PtrMemberAccess	heap -> peak		32177	0					
ANR	32764	Identifier	heap		32177	0					
ANR	32765	Identifier	peak		32177	1					
ANR	32766	PrimaryExpression	0		32177	1					
ANR	32767	IfStatement	if ( heap -> segments_list )		32177	6					
ANR	32768	Condition	heap -> segments_list	1726:6:48969:48987	32177	0	True				
ANR	32769	PtrMemberAccess	heap -> segments_list		32177	0					
ANR	32770	Identifier	heap		32177	0					
ANR	32771	Identifier	segments_list		32177	1					
ANR	32772	CompoundStatement		128:3:3085:3191	32177	1					
ANR	32773	IdentifierDeclStatement	zend_mm_free_block * b = ( zend_mm_free_block * ) ( ( char * ) heap -> segments_list + ZEND_MM_ALIGNED_SEGMENT_SIZE ) ;	1728:3:49033:49137	32177	0	True				
ANR	32774	IdentifierDecl	* b = ( zend_mm_free_block * ) ( ( char * ) heap -> segments_list + ZEND_MM_ALIGNED_SEGMENT_SIZE )		32177	0					
ANR	32775	IdentifierDeclType	zend_mm_free_block *		32177	0					
ANR	32776	Identifier	b		32177	1					
ANR	32777	AssignmentExpression	* b = ( zend_mm_free_block * ) ( ( char * ) heap -> segments_list + ZEND_MM_ALIGNED_SEGMENT_SIZE )		32177	2		=			
ANR	32778	Identifier	b		32177	0					
ANR	32779	CastExpression	( zend_mm_free_block * ) ( ( char * ) heap -> segments_list + ZEND_MM_ALIGNED_SEGMENT_SIZE )		32177	1					
ANR	32780	CastTarget	zend_mm_free_block *		32177	0					
ANR	32781	AdditiveExpression	( char * ) heap -> segments_list + ZEND_MM_ALIGNED_SEGMENT_SIZE		32177	1		+			
ANR	32782	CastExpression	( char * ) heap -> segments_list		32177	0					
ANR	32783	CastTarget	char *		32177	0					
ANR	32784	PtrMemberAccess	heap -> segments_list		32177	1					
ANR	32785	Identifier	heap		32177	0					
ANR	32786	Identifier	segments_list		32177	1					
ANR	32787	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		32177	1					
ANR	32788	IdentifierDeclStatement	size_t block_size = heap -> segments_list -> size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE ;	1729:3:49142:49248	32177	1	True				
ANR	32789	IdentifierDecl	block_size = heap -> segments_list -> size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		32177	0					
ANR	32790	IdentifierDeclType	size_t		32177	0					
ANR	32791	Identifier	block_size		32177	1					
ANR	32792	AssignmentExpression	block_size = heap -> segments_list -> size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		32177	2		=			
ANR	32793	Identifier	block_size		32177	0					
ANR	32794	AdditiveExpression	heap -> segments_list -> size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		32177	1		-			
ANR	32795	PtrMemberAccess	heap -> segments_list -> size		32177	0					
ANR	32796	PtrMemberAccess	heap -> segments_list		32177	0					
ANR	32797	Identifier	heap		32177	0					
ANR	32798	Identifier	segments_list		32177	1					
ANR	32799	Identifier	size		32177	1					
ANR	32800	AdditiveExpression	ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		32177	1		-			
ANR	32801	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		32177	0					
ANR	32802	Identifier	ZEND_MM_ALIGNED_HEADER_SIZE		32177	1					
ANR	32803	ExpressionStatement	ZEND_MM_MARK_FIRST_BLOCK ( b )	1731:3:49254:49281	32177	2	True				
ANR	32804	CallExpression	ZEND_MM_MARK_FIRST_BLOCK ( b )		32177	0					
ANR	32805	Callee	ZEND_MM_MARK_FIRST_BLOCK		32177	0					
ANR	32806	Identifier	ZEND_MM_MARK_FIRST_BLOCK		32177	0					
ANR	32807	ArgumentList	b		32177	1					
ANR	32808	Argument	b		32177	0					
ANR	32809	Identifier	b		32177	0					
ANR	32810	ExpressionStatement	"ZEND_MM_LAST_BLOCK ( ZEND_MM_BLOCK_AT ( b , block_size ) )"	1732:3:49286:49337	32177	3	True				
ANR	32811	CallExpression	"ZEND_MM_LAST_BLOCK ( ZEND_MM_BLOCK_AT ( b , block_size ) )"		32177	0					
ANR	32812	Callee	ZEND_MM_LAST_BLOCK		32177	0					
ANR	32813	Identifier	ZEND_MM_LAST_BLOCK		32177	0					
ANR	32814	ArgumentList	"ZEND_MM_BLOCK_AT ( b , block_size )"		32177	1					
ANR	32815	Argument	"ZEND_MM_BLOCK_AT ( b , block_size )"		32177	0					
ANR	32816	CallExpression	"ZEND_MM_BLOCK_AT ( b , block_size )"		32177	0					
ANR	32817	Callee	ZEND_MM_BLOCK_AT		32177	0					
ANR	32818	Identifier	ZEND_MM_BLOCK_AT		32177	0					
ANR	32819	ArgumentList	b		32177	1					
ANR	32820	Argument	b		32177	0					
ANR	32821	Identifier	b		32177	0					
ANR	32822	Argument	block_size		32177	1					
ANR	32823	Identifier	block_size		32177	0					
ANR	32824	ExpressionStatement	"ZEND_MM_BLOCK ( b , ZEND_MM_FREE_BLOCK , block_size )"	1733:3:49342:49390	32177	4	True				
ANR	32825	CallExpression	"ZEND_MM_BLOCK ( b , ZEND_MM_FREE_BLOCK , block_size )"		32177	0					
ANR	32826	Callee	ZEND_MM_BLOCK		32177	0					
ANR	32827	Identifier	ZEND_MM_BLOCK		32177	0					
ANR	32828	ArgumentList	b		32177	1					
ANR	32829	Argument	b		32177	0					
ANR	32830	Identifier	b		32177	0					
ANR	32831	Argument	ZEND_MM_FREE_BLOCK		32177	1					
ANR	32832	Identifier	ZEND_MM_FREE_BLOCK		32177	0					
ANR	32833	Argument	block_size		32177	2					
ANR	32834	Identifier	block_size		32177	0					
ANR	32835	ExpressionStatement	"zend_mm_add_to_free_list ( heap , b )"	1734:3:49395:49428	32177	5	True				
ANR	32836	CallExpression	"zend_mm_add_to_free_list ( heap , b )"		32177	0					
ANR	32837	Callee	zend_mm_add_to_free_list		32177	0					
ANR	32838	Identifier	zend_mm_add_to_free_list		32177	0					
ANR	32839	ArgumentList	heap		32177	1					
ANR	32840	Argument	heap		32177	0					
ANR	32841	Identifier	heap		32177	0					
ANR	32842	Argument	b		32177	1					
ANR	32843	Identifier	b		32177	0					
ANR	32844	IfStatement	if ( heap -> reserve_size )		32177	7					
ANR	32845	Condition	heap -> reserve_size	1736:6:49440:49457	32177	0	True				
ANR	32846	PtrMemberAccess	heap -> reserve_size		32177	0					
ANR	32847	Identifier	heap		32177	0					
ANR	32848	Identifier	reserve_size		32177	1					
ANR	32849	CompoundStatement		135:26:3403:3403	32177	1					
ANR	32850	Statement	heap	1737:3:49465:49468	32177	0	True				
ANR	32851	Statement	->	1737:7:49469:49470	32177	1	True				
ANR	32852	Statement	reserve	1737:9:49471:49477	32177	2	True				
ANR	32853	Statement	=	1737:17:49479:49479	32177	3	True				
ANR	32854	Statement	_zend_mm_alloc_int	1737:19:49481:49498	32177	4	True				
ANR	32855	Statement	(	1737:37:49499:49499	32177	5	True				
ANR	32856	Statement	heap	1737:38:49500:49503	32177	6	True				
ANR	32857	Statement	","	1737:42:49504:49504	32177	7	True				
ANR	32858	Statement	heap	1737:44:49506:49509	32177	8	True				
ANR	32859	Statement	->	1737:48:49510:49511	32177	9	True				
ANR	32860	Statement	reserve_size	1737:50:49512:49523	32177	10	True				
ANR	32861	Statement	ZEND_FILE_LINE_CC	1737:64:49526:49542	32177	11	True				
ANR	32862	Statement	ZEND_FILE_LINE_EMPTY_CC	1737:82:49544:49566	32177	12	True				
ANR	32863	Statement	)	1737:105:49567:49567	32177	13	True				
ANR	32864	ExpressionStatement		1737:106:49568:49568	32177	14	True				
ANR	32865	ExpressionStatement	heap -> overflow = 0	1739:2:49576:49594	32177	8	True				
ANR	32866	AssignmentExpression	heap -> overflow = 0		32177	0		=			
ANR	32867	PtrMemberAccess	heap -> overflow		32177	0					
ANR	32868	Identifier	heap		32177	0					
ANR	32869	Identifier	overflow		32177	1					
ANR	32870	PrimaryExpression	0		32177	1					
ANR	32871	ReturnType	ZEND_API void		32177	1					
ANR	32872	Identifier	zend_mm_shutdown		32177	2					
ANR	32873	ParameterList	"zend_mm_heap * heap , int full_shutdown , int silent TSRMLS_DC"		32177	3					
ANR	32874	Parameter	zend_mm_heap * heap	1601:31:45995:46012	32177	0	True				
ANR	32875	ParameterType	zend_mm_heap *		32177	0					
ANR	32876	Identifier	heap		32177	1					
ANR	32877	Parameter	int full_shutdown	1601:51:46015:46031	32177	1	True				
ANR	32878	ParameterType	int		32177	0					
ANR	32879	Identifier	full_shutdown		32177	1					
ANR	32880	Parameter	int silent TSRMLS_DC	1601:70:46034:46053	32177	2	True				
ANR	32881	ParameterType	int silent		32177	0					
ANR	32882	Identifier	TSRMLS_DC		32177	1					
ANR	32883	CFGEntryNode	ENTRY		32177		True				
ANR	32884	CFGExitNode	EXIT		32177		True				
ANR	32885	Symbol	* * heap		32177						
ANR	32886	Symbol	prev		32177						
ANR	32887	Symbol	heap -> reserve_size		32177						
ANR	32888	Symbol	heap -> use_zend_alloc		32177						
ANR	32889	Symbol	TSRMLS_DC		32177						
ANR	32890	Symbol	hit		32177						
ANR	32891	Symbol	* storage		32177						
ANR	32892	Symbol	segment		32177						
ANR	32893	Symbol	heap -> reserve		32177						
ANR	32894	Symbol	* heap -> segments_list		32177						
ANR	32895	Symbol	ZEND_MM_TRUE_SIZE		32177						
ANR	32896	Symbol	heap -> cache_stat [ i ] . max_count		32177						
ANR	32897	Symbol	NULL		32177						
ANR	32898	Symbol	heap -> real_size		32177						
ANR	32899	Symbol	heap -> cache_stat		32177						
ANR	32900	Symbol	heap -> storage		32177						
ANR	32901	Symbol	heap -> segments_list -> size		32177						
ANR	32902	Symbol	max_size		32177						
ANR	32903	Symbol	full_shutdown		32177						
ANR	32904	Symbol	ZEND_MM_NUM_BUCKETS		32177						
ANR	32905	Symbol	heap -> peak		32177						
ANR	32906	Symbol	size		32177						
ANR	32907	Symbol	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . hit		32177						
ANR	32908	Symbol	* segment		32177						
ANR	32909	Symbol	min_size		32177						
ANR	32910	Symbol	* heap -> cache_stat		32177						
ANR	32911	Symbol	heap -> cache_stat [ i ] . miss		32177						
ANR	32912	Symbol	heap -> compact_size		32177						
ANR	32913	Symbol	* heap		32177						
ANR	32914	Symbol	internal		32177						
ANR	32915	Symbol	heap -> real_peak		32177						
ANR	32916	Symbol	ZEND_MM_FREE_BLOCK		32177						
ANR	32917	Symbol	storage		32177						
ANR	32918	Symbol	miss		32177						
ANR	32919	Symbol	heap -> size		32177						
ANR	32920	Symbol	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . miss		32177						
ANR	32921	Symbol	ZEND_MM_ALIGNED_HEADER_SIZE		32177						
ANR	32922	Symbol	true_size		32177						
ANR	32923	Symbol	heap		32177						
ANR	32924	Symbol	block_size		32177						
ANR	32925	Symbol	heap -> overflow		32177						
ANR	32926	Symbol	fopen		32177						
ANR	32927	Symbol	silent		32177						
ANR	32928	Symbol	ZEND_MM_BUCKET_INDEX		32177						
ANR	32929	Symbol	b		32177						
ANR	32930	Symbol	storage -> handlers		32177						
ANR	32931	Symbol	f		32177						
ANR	32932	Symbol	i		32177						
ANR	32933	Symbol	j		32177						
ANR	32934	Symbol	* ZEND_MM_NUM_BUCKETS		32177						
ANR	32935	Symbol	ZEND_MM_BLOCK_AT		32177						
ANR	32936	Symbol	* i		32177						
ANR	32937	Symbol	heap -> cache_stat [ i ] . hit		32177						
ANR	32938	Symbol	ZEND_MM_SMALL_SIZE		32177						
ANR	32939	Symbol	heap -> internal		32177						
ANR	32940	Symbol	heap -> segments_list		32177						
ANR	32941	Symbol	ZEND_MM_ALIGNED_SEGMENT_SIZE		32177						
ANR	32942	Symbol	segment -> next_segment		32177						
ANR	32943	DeclStmt									
ANR	32944	Decl							const char	const char *	error_filename
ANR	32945	DeclStmt									
ANR	32946	Decl							uint	uint	error_lineno
ANR	32947	Function	zend_mm_search_large_block	1807:0:51025:52923							
ANR	32948	FunctionDef	"zend_mm_search_large_block (zend_mm_heap * heap , size_t true_size)"		32947	0					
ANR	32949	CompoundStatement		1808:0:51117:52923	32947	0					
ANR	32950	IdentifierDeclStatement	zend_mm_free_block * best_fit ;	1809:1:51120:51148	32947	0	True				
ANR	32951	IdentifierDecl	* best_fit		32947	0					
ANR	32952	IdentifierDeclType	zend_mm_free_block *		32947	0					
ANR	32953	Identifier	best_fit		32947	1					
ANR	32954	IdentifierDeclStatement	size_t index = ZEND_MM_LARGE_BUCKET_INDEX ( true_size ) ;	1810:1:51151:51203	32947	1	True				
ANR	32955	IdentifierDecl	index = ZEND_MM_LARGE_BUCKET_INDEX ( true_size )		32947	0					
ANR	32956	IdentifierDeclType	size_t		32947	0					
ANR	32957	Identifier	index		32947	1					
ANR	32958	AssignmentExpression	index = ZEND_MM_LARGE_BUCKET_INDEX ( true_size )		32947	2		=			
ANR	32959	Identifier	index		32947	0					
ANR	32960	CallExpression	ZEND_MM_LARGE_BUCKET_INDEX ( true_size )		32947	1					
ANR	32961	Callee	ZEND_MM_LARGE_BUCKET_INDEX		32947	0					
ANR	32962	Identifier	ZEND_MM_LARGE_BUCKET_INDEX		32947	0					
ANR	32963	ArgumentList	true_size		32947	1					
ANR	32964	Argument	true_size		32947	0					
ANR	32965	Identifier	true_size		32947	0					
ANR	32966	IdentifierDeclStatement	size_t bitmap = heap -> large_free_bitmap >> index ;	1811:1:51206:51254	32947	2	True				
ANR	32967	IdentifierDecl	bitmap = heap -> large_free_bitmap >> index		32947	0					
ANR	32968	IdentifierDeclType	size_t		32947	0					
ANR	32969	Identifier	bitmap		32947	1					
ANR	32970	AssignmentExpression	bitmap = heap -> large_free_bitmap >> index		32947	2		=			
ANR	32971	Identifier	bitmap		32947	0					
ANR	32972	ShiftExpression	heap -> large_free_bitmap >> index		32947	1		>>			
ANR	32973	PtrMemberAccess	heap -> large_free_bitmap		32947	0					
ANR	32974	Identifier	heap		32947	0					
ANR	32975	Identifier	large_free_bitmap		32947	1					
ANR	32976	Identifier	index		32947	1					
ANR	32977	IdentifierDeclStatement	zend_mm_free_block * p ;	1812:1:51257:51278	32947	3	True				
ANR	32978	IdentifierDecl	* p		32947	0					
ANR	32979	IdentifierDeclType	zend_mm_free_block *		32947	0					
ANR	32980	Identifier	p		32947	1					
ANR	32981	IfStatement	if ( bitmap == 0 )		32947	4					
ANR	32982	Condition	bitmap == 0	1814:5:51286:51296	32947	0	True				
ANR	32983	EqualityExpression	bitmap == 0		32947	0		==			
ANR	32984	Identifier	bitmap		32947	0					
ANR	32985	PrimaryExpression	0		32947	1					
ANR	32986	CompoundStatement		7:18:181:181	32947	1					
ANR	32987	ReturnStatement	return NULL ;	1815:2:51303:51314	32947	0	True				
ANR	32988	Identifier	NULL		32947	0					
ANR	32989	IfStatement	if ( UNEXPECTED ( ( bitmap & 1 ) != 0 ) )		32947	5					
ANR	32990	Condition	UNEXPECTED ( ( bitmap & 1 ) != 0 )	1818:5:51325:51353	32947	0	True				
ANR	32991	CallExpression	UNEXPECTED ( ( bitmap & 1 ) != 0 )		32947	0					
ANR	32992	Callee	UNEXPECTED		32947	0					
ANR	32993	Identifier	UNEXPECTED		32947	0					
ANR	32994	ArgumentList	( bitmap & 1 ) != 0		32947	1					
ANR	32995	Argument	( bitmap & 1 ) != 0		32947	0					
ANR	32996	EqualityExpression	( bitmap & 1 ) != 0		32947	0		!=			
ANR	32997	BitAndExpression	bitmap & 1		32947	0		&			
ANR	32998	Identifier	bitmap		32947	0					
ANR	32999	PrimaryExpression	1		32947	1					
ANR	33000	PrimaryExpression	0		32947	1					
ANR	33001	CompoundStatement		15:2:331:352	32947	1					
ANR	33002	IdentifierDeclStatement	zend_mm_free_block * rst = NULL ;	1820:2:51403:51433	32947	0	True				
ANR	33003	IdentifierDecl	* rst = NULL		32947	0					
ANR	33004	IdentifierDeclType	zend_mm_free_block *		32947	0					
ANR	33005	Identifier	rst		32947	1					
ANR	33006	AssignmentExpression	* rst = NULL		32947	2		=			
ANR	33007	Identifier	NULL		32947	0					
ANR	33008	Identifier	NULL		32947	1					
ANR	33009	IdentifierDeclStatement	size_t m ;	1821:2:51437:51445	32947	1	True				
ANR	33010	IdentifierDecl	m		32947	0					
ANR	33011	IdentifierDeclType	size_t		32947	0					
ANR	33012	Identifier	m		32947	1					
ANR	33013	IdentifierDeclStatement	size_t best_size = - 1 ;	1822:2:51449:51470	32947	2	True				
ANR	33014	IdentifierDecl	best_size = - 1		32947	0					
ANR	33015	IdentifierDeclType	size_t		32947	0					
ANR	33016	Identifier	best_size		32947	1					
ANR	33017	AssignmentExpression	best_size = - 1		32947	2		=			
ANR	33018	Identifier	best_size		32947	0					
ANR	33019	UnaryOperationExpression	- 1		32947	1					
ANR	33020	UnaryOperator	-		32947	0					
ANR	33021	PrimaryExpression	1		32947	1					
ANR	33022	ExpressionStatement	best_fit = NULL	1824:2:51475:51490	32947	3	True				
ANR	33023	AssignmentExpression	best_fit = NULL		32947	0		=			
ANR	33024	Identifier	best_fit		32947	0					
ANR	33025	Identifier	NULL		32947	1					
ANR	33026	ExpressionStatement	p = heap -> large_free_buckets [ index ]	1825:2:51494:51529	32947	4	True				
ANR	33027	AssignmentExpression	p = heap -> large_free_buckets [ index ]		32947	0		=			
ANR	33028	Identifier	p		32947	0					
ANR	33029	ArrayIndexing	heap -> large_free_buckets [ index ]		32947	1					
ANR	33030	PtrMemberAccess	heap -> large_free_buckets		32947	0					
ANR	33031	Identifier	heap		32947	0					
ANR	33032	Identifier	large_free_buckets		32947	1					
ANR	33033	Identifier	index		32947	1					
ANR	33034	ForStatement	for ( m = true_size << ( ZEND_MM_NUM_BUCKETS - index ) ; ; m <<= 1 )		32947	5					
ANR	33035	ForInit	m = true_size << ( ZEND_MM_NUM_BUCKETS - index ) ;	1826:7:51538:51584	32947	0	True				
ANR	33036	AssignmentExpression	m = true_size << ( ZEND_MM_NUM_BUCKETS - index )		32947	0		=			
ANR	33037	Identifier	m		32947	0					
ANR	33038	ShiftExpression	true_size << ( ZEND_MM_NUM_BUCKETS - index )		32947	1		<<			
ANR	33039	Identifier	true_size		32947	0					
ANR	33040	AdditiveExpression	ZEND_MM_NUM_BUCKETS - index		32947	1		-			
ANR	33041	Identifier	ZEND_MM_NUM_BUCKETS		32947	0					
ANR	33042	Identifier	index		32947	1					
ANR	33043	AssignmentExpression	m <<= 1	1826:57:51588:51594	32947	1	True	<<=			
ANR	33044	Identifier	m		32947	0					
ANR	33045	PrimaryExpression	1		32947	1					
ANR	33046	CompoundStatement		19:66:479:479	32947	2					
ANR	33047	IfStatement	if ( UNEXPECTED ( ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size ) )		32947	0					
ANR	33048	Condition	UNEXPECTED ( ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size )	1827:7:51606:51656	32947	0	True				
ANR	33049	CallExpression	UNEXPECTED ( ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size )		32947	0					
ANR	33050	Callee	UNEXPECTED		32947	0					
ANR	33051	Identifier	UNEXPECTED		32947	0					
ANR	33052	ArgumentList	ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size		32947	1					
ANR	33053	Argument	ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size		32947	0					
ANR	33054	EqualityExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size		32947	0		==			
ANR	33055	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	0					
ANR	33056	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33057	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33058	ArgumentList	p		32947	1					
ANR	33059	Argument	p		32947	0					
ANR	33060	Identifier	p		32947	0					
ANR	33061	Identifier	true_size		32947	1					
ANR	33062	CompoundStatement		20:60:541:541	32947	1					
ANR	33063	ReturnStatement	return p -> next_free_block ;	1828:4:51665:51690	32947	0	True				
ANR	33064	PtrMemberAccess	p -> next_free_block		32947	0					
ANR	33065	Identifier	p		32947	0					
ANR	33066	Identifier	next_free_block		32947	1					
ANR	33067	ElseStatement	else		32947	0					
ANR	33068	IfStatement	if ( ZEND_MM_FREE_BLOCK_SIZE ( p ) >= true_size && ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size )		32947	0					
ANR	33069	Condition	ZEND_MM_FREE_BLOCK_SIZE ( p ) >= true_size && ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size	1829:14:51706:51800	32947	0	True				
ANR	33070	AndExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) >= true_size && ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size		32947	0		&&			
ANR	33071	RelationalExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) >= true_size		32947	0		>=			
ANR	33072	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	0					
ANR	33073	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33074	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33075	ArgumentList	p		32947	1					
ANR	33076	Argument	p		32947	0					
ANR	33077	Identifier	p		32947	0					
ANR	33078	Identifier	true_size		32947	1					
ANR	33079	RelationalExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size		32947	1		<			
ANR	33080	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	0					
ANR	33081	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33082	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33083	ArgumentList	p		32947	1					
ANR	33084	Argument	p		32947	0					
ANR	33085	Identifier	p		32947	0					
ANR	33086	Identifier	best_size		32947	1					
ANR	33087	CompoundStatement		23:54:685:685	32947	1					
ANR	33088	ExpressionStatement	best_size = ZEND_MM_FREE_BLOCK_SIZE ( p )	1831:4:51809:51847	32947	0	True				
ANR	33089	AssignmentExpression	best_size = ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	0		=			
ANR	33090	Identifier	best_size		32947	0					
ANR	33091	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	1					
ANR	33092	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33093	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33094	ArgumentList	p		32947	1					
ANR	33095	Argument	p		32947	0					
ANR	33096	Identifier	p		32947	0					
ANR	33097	ExpressionStatement	best_fit = p	1832:4:51853:51865	32947	1	True				
ANR	33098	AssignmentExpression	best_fit = p		32947	0		=			
ANR	33099	Identifier	best_fit		32947	0					
ANR	33100	Identifier	p		32947	1					
ANR	33101	IfStatement	if ( ( m & ( ZEND_MM_LONG_CONST ( 1 ) << ( ZEND_MM_NUM_BUCKETS - 1 ) ) ) == 0 )		32947	1					
ANR	33102	Condition	( m & ( ZEND_MM_LONG_CONST ( 1 ) << ( ZEND_MM_NUM_BUCKETS - 1 ) ) ) == 0	1834:7:51879:51939	32947	0	True				
ANR	33103	EqualityExpression	( m & ( ZEND_MM_LONG_CONST ( 1 ) << ( ZEND_MM_NUM_BUCKETS - 1 ) ) ) == 0		32947	0		==			
ANR	33104	BitAndExpression	m & ( ZEND_MM_LONG_CONST ( 1 ) << ( ZEND_MM_NUM_BUCKETS - 1 ) )		32947	0		&			
ANR	33105	Identifier	m		32947	0					
ANR	33106	ShiftExpression	ZEND_MM_LONG_CONST ( 1 ) << ( ZEND_MM_NUM_BUCKETS - 1 )		32947	1		<<			
ANR	33107	CallExpression	ZEND_MM_LONG_CONST ( 1 )		32947	0					
ANR	33108	Callee	ZEND_MM_LONG_CONST		32947	0					
ANR	33109	Identifier	ZEND_MM_LONG_CONST		32947	0					
ANR	33110	ArgumentList	1		32947	1					
ANR	33111	Argument	1		32947	0					
ANR	33112	PrimaryExpression	1		32947	0					
ANR	33113	AdditiveExpression	ZEND_MM_NUM_BUCKETS - 1		32947	1		-			
ANR	33114	Identifier	ZEND_MM_NUM_BUCKETS		32947	0					
ANR	33115	PrimaryExpression	1		32947	1					
ANR	33116	PrimaryExpression	0		32947	1					
ANR	33117	CompoundStatement		27:70:824:824	32947	1					
ANR	33118	IfStatement	if ( p -> child [ 1 ] )		32947	0					
ANR	33119	Condition	p -> child [ 1 ]	1835:8:51952:51962	32947	0	True				
ANR	33120	ArrayIndexing	p -> child [ 1 ]		32947	0					
ANR	33121	PtrMemberAccess	p -> child		32947	0					
ANR	33122	Identifier	p		32947	0					
ANR	33123	Identifier	child		32947	1					
ANR	33124	PrimaryExpression	1		32947	1					
ANR	33125	CompoundStatement		28:21:847:847	32947	1					
ANR	33126	ExpressionStatement	rst = p -> child [ 1 ]	1836:5:51972:51989	32947	0	True				
ANR	33127	AssignmentExpression	rst = p -> child [ 1 ]		32947	0		=			
ANR	33128	Identifier	rst		32947	0					
ANR	33129	ArrayIndexing	p -> child [ 1 ]		32947	1					
ANR	33130	PtrMemberAccess	p -> child		32947	0					
ANR	33131	Identifier	p		32947	0					
ANR	33132	Identifier	child		32947	1					
ANR	33133	PrimaryExpression	1		32947	1					
ANR	33134	IfStatement	if ( p -> child [ 0 ] )		32947	1					
ANR	33135	Condition	p -> child [ 0 ]	1838:8:52005:52015	32947	0	True				
ANR	33136	ArrayIndexing	p -> child [ 0 ]		32947	0					
ANR	33137	PtrMemberAccess	p -> child		32947	0					
ANR	33138	Identifier	p		32947	0					
ANR	33139	Identifier	child		32947	1					
ANR	33140	PrimaryExpression	0		32947	1					
ANR	33141	CompoundStatement		31:21:900:900	32947	1					
ANR	33142	ExpressionStatement	p = p -> child [ 0 ]	1839:5:52025:52040	32947	0	True				
ANR	33143	AssignmentExpression	p = p -> child [ 0 ]		32947	0		=			
ANR	33144	Identifier	p		32947	0					
ANR	33145	ArrayIndexing	p -> child [ 0 ]		32947	1					
ANR	33146	PtrMemberAccess	p -> child		32947	0					
ANR	33147	Identifier	p		32947	0					
ANR	33148	Identifier	child		32947	1					
ANR	33149	PrimaryExpression	0		32947	1					
ANR	33150	ElseStatement	else		32947	0					
ANR	33151	CompoundStatement		33:11:935:935	32947	0					
ANR	33152	BreakStatement	break ;	1841:5:52060:52065	32947	0	True				
ANR	33153	ElseStatement	else		32947	0					
ANR	33154	IfStatement	if ( p -> child [ 1 ] )		32947	0					
ANR	33155	Condition	p -> child [ 1 ]	1843:14:52087:52097	32947	0	True				
ANR	33156	ArrayIndexing	p -> child [ 1 ]		32947	0					
ANR	33157	PtrMemberAccess	p -> child		32947	0					
ANR	33158	Identifier	p		32947	0					
ANR	33159	Identifier	child		32947	1					
ANR	33160	PrimaryExpression	1		32947	1					
ANR	33161	CompoundStatement		36:27:982:982	32947	1					
ANR	33162	ExpressionStatement	p = p -> child [ 1 ]	1844:4:52106:52121	32947	0	True				
ANR	33163	AssignmentExpression	p = p -> child [ 1 ]		32947	0		=			
ANR	33164	Identifier	p		32947	0					
ANR	33165	ArrayIndexing	p -> child [ 1 ]		32947	1					
ANR	33166	PtrMemberAccess	p -> child		32947	0					
ANR	33167	Identifier	p		32947	0					
ANR	33168	Identifier	child		32947	1					
ANR	33169	PrimaryExpression	1		32947	1					
ANR	33170	ElseStatement	else		32947	0					
ANR	33171	CompoundStatement		38:10:1015:1015	32947	0					
ANR	33172	BreakStatement	break ;	1846:4:52139:52144	32947	0	True				
ANR	33173	ForStatement	for ( p = rst ; p ; p = p -> child [ p -> child [ 0 ] != NULL ] )		32947	6					
ANR	33174	ForInit	p = rst ;	1850:7:52163:52170	32947	0	True				
ANR	33175	AssignmentExpression	p = rst		32947	0		=			
ANR	33176	Identifier	p		32947	0					
ANR	33177	Identifier	rst		32947	1					
ANR	33178	Condition	p	1850:16:52172:52172	32947	1	True				
ANR	33179	Identifier	p		32947	0					
ANR	33180	AssignmentExpression	p = p -> child [ p -> child [ 0 ] != NULL ]	1850:19:52175:52207	32947	2	True	=			
ANR	33181	Identifier	p		32947	0					
ANR	33182	ArrayIndexing	p -> child [ p -> child [ 0 ] != NULL ]		32947	1					
ANR	33183	PtrMemberAccess	p -> child		32947	0					
ANR	33184	Identifier	p		32947	0					
ANR	33185	Identifier	child		32947	1					
ANR	33186	EqualityExpression	p -> child [ 0 ] != NULL		32947	1		!=			
ANR	33187	ArrayIndexing	p -> child [ 0 ]		32947	0					
ANR	33188	PtrMemberAccess	p -> child		32947	0					
ANR	33189	Identifier	p		32947	0					
ANR	33190	Identifier	child		32947	1					
ANR	33191	PrimaryExpression	0		32947	1					
ANR	33192	Identifier	NULL		32947	1					
ANR	33193	CompoundStatement		43:54:1092:1092	32947	3					
ANR	33194	IfStatement	if ( UNEXPECTED ( ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size ) )		32947	0					
ANR	33195	Condition	UNEXPECTED ( ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size )	1851:7:52219:52269	32947	0	True				
ANR	33196	CallExpression	UNEXPECTED ( ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size )		32947	0					
ANR	33197	Callee	UNEXPECTED		32947	0					
ANR	33198	Identifier	UNEXPECTED		32947	0					
ANR	33199	ArgumentList	ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size		32947	1					
ANR	33200	Argument	ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size		32947	0					
ANR	33201	EqualityExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size		32947	0		==			
ANR	33202	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	0					
ANR	33203	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33204	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33205	ArgumentList	p		32947	1					
ANR	33206	Argument	p		32947	0					
ANR	33207	Identifier	p		32947	0					
ANR	33208	Identifier	true_size		32947	1					
ANR	33209	CompoundStatement		44:60:1154:1154	32947	1					
ANR	33210	ReturnStatement	return p -> next_free_block ;	1852:4:52278:52303	32947	0	True				
ANR	33211	PtrMemberAccess	p -> next_free_block		32947	0					
ANR	33212	Identifier	p		32947	0					
ANR	33213	Identifier	next_free_block		32947	1					
ANR	33214	ElseStatement	else		32947	0					
ANR	33215	IfStatement	if ( ZEND_MM_FREE_BLOCK_SIZE ( p ) > true_size && ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size )		32947	0					
ANR	33216	Condition	ZEND_MM_FREE_BLOCK_SIZE ( p ) > true_size && ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size	1853:14:52319:52412	32947	0	True				
ANR	33217	AndExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) > true_size && ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size		32947	0		&&			
ANR	33218	RelationalExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) > true_size		32947	0		>			
ANR	33219	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	0					
ANR	33220	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33221	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33222	ArgumentList	p		32947	1					
ANR	33223	Argument	p		32947	0					
ANR	33224	Identifier	p		32947	0					
ANR	33225	Identifier	true_size		32947	1					
ANR	33226	RelationalExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size		32947	1		<			
ANR	33227	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	0					
ANR	33228	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33229	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33230	ArgumentList	p		32947	1					
ANR	33231	Argument	p		32947	0					
ANR	33232	Identifier	p		32947	0					
ANR	33233	Identifier	best_size		32947	1					
ANR	33234	CompoundStatement		47:54:1297:1297	32947	1					
ANR	33235	ExpressionStatement	best_size = ZEND_MM_FREE_BLOCK_SIZE ( p )	1855:4:52421:52459	32947	0	True				
ANR	33236	AssignmentExpression	best_size = ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	0		=			
ANR	33237	Identifier	best_size		32947	0					
ANR	33238	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	1					
ANR	33239	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33240	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33241	ArgumentList	p		32947	1					
ANR	33242	Argument	p		32947	0					
ANR	33243	Identifier	p		32947	0					
ANR	33244	ExpressionStatement	best_fit = p	1856:4:52465:52477	32947	1	True				
ANR	33245	AssignmentExpression	best_fit = p		32947	0		=			
ANR	33246	Identifier	best_fit		32947	0					
ANR	33247	Identifier	p		32947	1					
ANR	33248	IfStatement	if ( best_fit )		32947	7					
ANR	33249	Condition	best_fit	1860:6:52495:52502	32947	0	True				
ANR	33250	Identifier	best_fit		32947	0					
ANR	33251	CompoundStatement		53:16:1387:1387	32947	1					
ANR	33252	ReturnStatement	return best_fit -> next_free_block ;	1861:3:52510:52542	32947	0	True				
ANR	33253	PtrMemberAccess	best_fit -> next_free_block		32947	0					
ANR	33254	Identifier	best_fit		32947	0					
ANR	33255	Identifier	next_free_block		32947	1					
ANR	33256	ExpressionStatement	bitmap = bitmap >> 1	1863:2:52550:52570	32947	8	True				
ANR	33257	AssignmentExpression	bitmap = bitmap >> 1		32947	0		=			
ANR	33258	Identifier	bitmap		32947	0					
ANR	33259	ShiftExpression	bitmap >> 1		32947	1		>>			
ANR	33260	Identifier	bitmap		32947	0					
ANR	33261	PrimaryExpression	1		32947	1					
ANR	33262	IfStatement	if ( ! bitmap )		32947	9					
ANR	33263	Condition	! bitmap	1864:6:52578:52584	32947	0	True				
ANR	33264	UnaryOperationExpression	! bitmap		32947	0					
ANR	33265	UnaryOperator	!		32947	0					
ANR	33266	Identifier	bitmap		32947	1					
ANR	33267	CompoundStatement		57:15:1469:1469	32947	1					
ANR	33268	ReturnStatement	return NULL ;	1865:3:52592:52603	32947	0	True				
ANR	33269	Identifier	NULL		32947	0					
ANR	33270	ExpressionStatement	index ++	1867:2:52611:52618	32947	10	True				
ANR	33271	PostIncDecOperationExpression	index ++		32947	0					
ANR	33272	Identifier	index		32947	0					
ANR	33273	IncDec	++		32947	1					
ANR	33274	ExpressionStatement	best_fit = p = heap -> large_free_buckets [ index + zend_mm_low_bit ( bitmap ) ]	1871:1:52671:52743	32947	6	True				
ANR	33275	AssignmentExpression	best_fit = p = heap -> large_free_buckets [ index + zend_mm_low_bit ( bitmap ) ]		32947	0		=			
ANR	33276	Identifier	best_fit		32947	0					
ANR	33277	AssignmentExpression	p = heap -> large_free_buckets [ index + zend_mm_low_bit ( bitmap ) ]		32947	1		=			
ANR	33278	Identifier	p		32947	0					
ANR	33279	ArrayIndexing	heap -> large_free_buckets [ index + zend_mm_low_bit ( bitmap ) ]		32947	1					
ANR	33280	PtrMemberAccess	heap -> large_free_buckets		32947	0					
ANR	33281	Identifier	heap		32947	0					
ANR	33282	Identifier	large_free_buckets		32947	1					
ANR	33283	AdditiveExpression	index + zend_mm_low_bit ( bitmap )		32947	1		+			
ANR	33284	Identifier	index		32947	0					
ANR	33285	CallExpression	zend_mm_low_bit ( bitmap )		32947	1					
ANR	33286	Callee	zend_mm_low_bit		32947	0					
ANR	33287	Identifier	zend_mm_low_bit		32947	0					
ANR	33288	ArgumentList	bitmap		32947	1					
ANR	33289	Argument	bitmap		32947	0					
ANR	33290	Identifier	bitmap		32947	0					
ANR	33291	WhileStatement	while ( ( p = p -> child [ p -> child [ 0 ] != NULL ] ) )		32947	7					
ANR	33292	Condition	p = p -> child [ p -> child [ 0 ] != NULL ]	1872:8:52753:52787	32947	0	True				
ANR	33293	AssignmentExpression	p = p -> child [ p -> child [ 0 ] != NULL ]		32947	0		=			
ANR	33294	Identifier	p		32947	0					
ANR	33295	ArrayIndexing	p -> child [ p -> child [ 0 ] != NULL ]		32947	1					
ANR	33296	PtrMemberAccess	p -> child		32947	0					
ANR	33297	Identifier	p		32947	0					
ANR	33298	Identifier	child		32947	1					
ANR	33299	EqualityExpression	p -> child [ 0 ] != NULL		32947	1		!=			
ANR	33300	ArrayIndexing	p -> child [ 0 ]		32947	0					
ANR	33301	PtrMemberAccess	p -> child		32947	0					
ANR	33302	Identifier	p		32947	0					
ANR	33303	Identifier	child		32947	1					
ANR	33304	PrimaryExpression	0		32947	1					
ANR	33305	Identifier	NULL		32947	1					
ANR	33306	CompoundStatement		65:45:1672:1672	32947	1					
ANR	33307	IfStatement	if ( ZEND_MM_FREE_BLOCK_SIZE ( p ) < ZEND_MM_FREE_BLOCK_SIZE ( best_fit ) )		32947	0					
ANR	33308	Condition	ZEND_MM_FREE_BLOCK_SIZE ( p ) < ZEND_MM_FREE_BLOCK_SIZE ( best_fit )	1873:6:52798:52859	32947	0	True				
ANR	33309	RelationalExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) < ZEND_MM_FREE_BLOCK_SIZE ( best_fit )		32947	0		<			
ANR	33310	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		32947	0					
ANR	33311	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33312	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33313	ArgumentList	p		32947	1					
ANR	33314	Argument	p		32947	0					
ANR	33315	Identifier	p		32947	0					
ANR	33316	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( best_fit )		32947	1					
ANR	33317	Callee	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33318	Identifier	ZEND_MM_FREE_BLOCK_SIZE		32947	0					
ANR	33319	ArgumentList	best_fit		32947	1					
ANR	33320	Argument	best_fit		32947	0					
ANR	33321	Identifier	best_fit		32947	0					
ANR	33322	CompoundStatement		66:70:1744:1744	32947	1					
ANR	33323	ExpressionStatement	best_fit = p	1874:3:52867:52879	32947	0	True				
ANR	33324	AssignmentExpression	best_fit = p		32947	0		=			
ANR	33325	Identifier	best_fit		32947	0					
ANR	33326	Identifier	p		32947	1					
ANR	33327	ReturnStatement	return best_fit -> next_free_block ;	1877:1:52889:52921	32947	8	True				
ANR	33328	PtrMemberAccess	best_fit -> next_free_block		32947	0					
ANR	33329	Identifier	best_fit		32947	0					
ANR	33330	Identifier	next_free_block		32947	1					
ANR	33331	ReturnType	static zend_mm_free_block *		32947	1					
ANR	33332	Identifier	zend_mm_search_large_block		32947	2					
ANR	33333	ParameterList	"zend_mm_heap * heap , size_t true_size"		32947	3					
ANR	33334	Parameter	zend_mm_heap * heap	1807:54:51079:51096	32947	0	True				
ANR	33335	ParameterType	zend_mm_heap *		32947	0					
ANR	33336	Identifier	heap		32947	1					
ANR	33337	Parameter	size_t true_size	1807:74:51099:51114	32947	1	True				
ANR	33338	ParameterType	size_t		32947	0					
ANR	33339	Identifier	true_size		32947	1					
ANR	33340	CFGEntryNode	ENTRY		32947		True				
ANR	33341	CFGExitNode	EXIT		32947		True				
ANR	33342	InfiniteForNode	true		32947		True				
ANR	33343	Symbol	* * heap		32947						
ANR	33344	Symbol	heap -> large_free_buckets		32947						
ANR	33345	Symbol	ZEND_MM_LONG_CONST		32947						
ANR	33346	Symbol	* best_fit		32947						
ANR	33347	Symbol	* index		32947						
ANR	33348	Symbol	heap -> large_free_bitmap		32947						
ANR	33349	Symbol	p -> next_free_block		32947						
ANR	33350	Symbol	* * p -> child		32947						
ANR	33351	Symbol	* heap -> large_free_buckets		32947						
ANR	33352	Symbol	UNEXPECTED		32947						
ANR	33353	Symbol	rst		32947						
ANR	33354	Symbol	* p -> child		32947						
ANR	33355	Symbol	bitmap		32947						
ANR	33356	Symbol	ZEND_MM_FREE_BLOCK_SIZE		32947						
ANR	33357	Symbol	p -> child		32947						
ANR	33358	Symbol	true_size		32947						
ANR	33359	Symbol	* * p		32947						
ANR	33360	Symbol	heap		32947						
ANR	33361	Symbol	* zend_mm_low_bit		32947						
ANR	33362	Symbol	best_fit		32947						
ANR	33363	Symbol	NULL		32947						
ANR	33364	Symbol	best_size		32947						
ANR	33365	Symbol	ZEND_MM_LARGE_BUCKET_INDEX		32947						
ANR	33366	Symbol	index		32947						
ANR	33367	Symbol	best_fit -> next_free_block		32947						
ANR	33368	Symbol	m		32947						
ANR	33369	Symbol	* NULL		32947						
ANR	33370	Symbol	ZEND_MM_NUM_BUCKETS		32947						
ANR	33371	Symbol	p		32947						
ANR	33372	Symbol	* * * p		32947						
ANR	33373	Symbol	* p		32947						
ANR	33374	Symbol	zend_mm_low_bit		32947						
ANR	33375	Symbol	* heap		32947						
ANR	33376	Function	_zend_mm_alloc_int	1880:0:52926:58304							
ANR	33377	FunctionDef	"_zend_mm_alloc_int (zend_mm_heap * heap , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		33376	0					
ANR	33378	CompoundStatement		1881:0:53032:58304	33376	0					
ANR	33379	IdentifierDeclStatement	zend_mm_free_block * best_fit ;	1882:1:53035:53063	33376	0	True				
ANR	33380	IdentifierDecl	* best_fit		33376	0					
ANR	33381	IdentifierDeclType	zend_mm_free_block *		33376	0					
ANR	33382	Identifier	best_fit		33376	1					
ANR	33383	IdentifierDeclStatement	size_t true_size = ZEND_MM_TRUE_SIZE ( size ) ;	1883:1:53066:53108	33376	1	True				
ANR	33384	IdentifierDecl	true_size = ZEND_MM_TRUE_SIZE ( size )		33376	0					
ANR	33385	IdentifierDeclType	size_t		33376	0					
ANR	33386	Identifier	true_size		33376	1					
ANR	33387	AssignmentExpression	true_size = ZEND_MM_TRUE_SIZE ( size )		33376	2		=			
ANR	33388	Identifier	true_size		33376	0					
ANR	33389	CallExpression	ZEND_MM_TRUE_SIZE ( size )		33376	1					
ANR	33390	Callee	ZEND_MM_TRUE_SIZE		33376	0					
ANR	33391	Identifier	ZEND_MM_TRUE_SIZE		33376	0					
ANR	33392	ArgumentList	size		33376	1					
ANR	33393	Argument	size		33376	0					
ANR	33394	Identifier	size		33376	0					
ANR	33395	IdentifierDeclStatement	size_t block_size ;	1884:1:53111:53128	33376	2	True				
ANR	33396	IdentifierDecl	block_size		33376	0					
ANR	33397	IdentifierDeclType	size_t		33376	0					
ANR	33398	Identifier	block_size		33376	1					
ANR	33399	IdentifierDeclStatement	size_t remaining_size ;	1885:1:53131:53152	33376	3	True				
ANR	33400	IdentifierDecl	remaining_size		33376	0					
ANR	33401	IdentifierDeclType	size_t		33376	0					
ANR	33402	Identifier	remaining_size		33376	1					
ANR	33403	IdentifierDeclStatement	size_t segment_size ;	1886:1:53155:53174	33376	4	True				
ANR	33404	IdentifierDecl	segment_size		33376	0					
ANR	33405	IdentifierDeclType	size_t		33376	0					
ANR	33406	Identifier	segment_size		33376	1					
ANR	33407	IdentifierDeclStatement	zend_mm_segment * segment ;	1887:1:53177:53201	33376	5	True				
ANR	33408	IdentifierDecl	* segment		33376	0					
ANR	33409	IdentifierDeclType	zend_mm_segment *		33376	0					
ANR	33410	Identifier	segment		33376	1					
ANR	33411	IdentifierDeclStatement	int keep_rest = 0 ;	1888:1:53204:53221	33376	6	True				
ANR	33412	IdentifierDecl	keep_rest = 0		33376	0					
ANR	33413	IdentifierDeclType	int		33376	0					
ANR	33414	Identifier	keep_rest		33376	1					
ANR	33415	AssignmentExpression	keep_rest = 0		33376	2		=			
ANR	33416	Identifier	keep_rest		33376	0					
ANR	33417	PrimaryExpression	0		33376	1					
ANR	33418	ExpressionStatement	TSRMLS_FETCH ( )	1890:1:53244:53258	33376	7	True				
ANR	33419	CallExpression	TSRMLS_FETCH ( )		33376	0					
ANR	33420	Callee	TSRMLS_FETCH		33376	0					
ANR	33421	Identifier	TSRMLS_FETCH		33376	0					
ANR	33422	ArgumentList			33376	1					
ANR	33423	ExpressionStatement	HANDLE_BLOCK_INTERRUPTIONS ( )	1893:1:53269:53297	33376	8	True				
ANR	33424	CallExpression	HANDLE_BLOCK_INTERRUPTIONS ( )		33376	0					
ANR	33425	Callee	HANDLE_BLOCK_INTERRUPTIONS		33376	0					
ANR	33426	Identifier	HANDLE_BLOCK_INTERRUPTIONS		33376	0					
ANR	33427	ArgumentList			33376	1					
ANR	33428	IfStatement	if ( EXPECTED ( ZEND_MM_SMALL_SIZE ( true_size ) ) )		33376	9					
ANR	33429	Condition	EXPECTED ( ZEND_MM_SMALL_SIZE ( true_size ) )	1895:5:53305:53343	33376	0	True				
ANR	33430	CallExpression	EXPECTED ( ZEND_MM_SMALL_SIZE ( true_size ) )		33376	0					
ANR	33431	Callee	EXPECTED		33376	0					
ANR	33432	Identifier	EXPECTED		33376	0					
ANR	33433	ArgumentList	ZEND_MM_SMALL_SIZE ( true_size )		33376	1					
ANR	33434	Argument	ZEND_MM_SMALL_SIZE ( true_size )		33376	0					
ANR	33435	CallExpression	ZEND_MM_SMALL_SIZE ( true_size )		33376	0					
ANR	33436	Callee	ZEND_MM_SMALL_SIZE		33376	0					
ANR	33437	Identifier	ZEND_MM_SMALL_SIZE		33376	0					
ANR	33438	ArgumentList	true_size		33376	1					
ANR	33439	Argument	true_size		33376	0					
ANR	33440	Identifier	true_size		33376	0					
ANR	33441	CompoundStatement		17:2:367:380	33376	1					
ANR	33442	IdentifierDeclStatement	size_t index = ZEND_MM_BUCKET_INDEX ( true_size ) ;	1896:2:53350:53396	33376	0	True				
ANR	33443	IdentifierDecl	index = ZEND_MM_BUCKET_INDEX ( true_size )		33376	0					
ANR	33444	IdentifierDeclType	size_t		33376	0					
ANR	33445	Identifier	index		33376	1					
ANR	33446	AssignmentExpression	index = ZEND_MM_BUCKET_INDEX ( true_size )		33376	2		=			
ANR	33447	Identifier	index		33376	0					
ANR	33448	CallExpression	ZEND_MM_BUCKET_INDEX ( true_size )		33376	1					
ANR	33449	Callee	ZEND_MM_BUCKET_INDEX		33376	0					
ANR	33450	Identifier	ZEND_MM_BUCKET_INDEX		33376	0					
ANR	33451	ArgumentList	true_size		33376	1					
ANR	33452	Argument	true_size		33376	0					
ANR	33453	Identifier	true_size		33376	0					
ANR	33454	IdentifierDeclStatement	size_t bitmap ;	1897:2:53400:53413	33376	1	True				
ANR	33455	IdentifierDecl	bitmap		33376	0					
ANR	33456	IdentifierDeclType	size_t		33376	0					
ANR	33457	Identifier	bitmap		33376	1					
ANR	33458	IfStatement	if ( UNEXPECTED ( true_size < size ) )		33376	2					
ANR	33459	Condition	UNEXPECTED ( true_size < size )	1899:6:53422:53449	33376	0	True				
ANR	33460	CallExpression	UNEXPECTED ( true_size < size )		33376	0					
ANR	33461	Callee	UNEXPECTED		33376	0					
ANR	33462	Identifier	UNEXPECTED		33376	0					
ANR	33463	ArgumentList	true_size < size		33376	1					
ANR	33464	Argument	true_size < size		33376	0					
ANR	33465	RelationalExpression	true_size < size		33376	0		<			
ANR	33466	Identifier	true_size		33376	0					
ANR	33467	Identifier	size		33376	1					
ANR	33468	CompoundStatement		19:36:419:419	33376	1					
ANR	33469	GotoStatement	goto out_of_memory ;	1900:3:53457:53475	33376	0	True				
ANR	33470	Identifier	out_of_memory		33376	0					
ANR	33471	IfStatement	if ( EXPECTED ( heap -> cache [ index ] != NULL ) )		33376	3					
ANR	33472	Condition	EXPECTED ( heap -> cache [ index ] != NULL )	1903:6:53505:53540	33376	0	True				
ANR	33473	CallExpression	EXPECTED ( heap -> cache [ index ] != NULL )		33376	0					
ANR	33474	Callee	EXPECTED		33376	0					
ANR	33475	Identifier	EXPECTED		33376	0					
ANR	33476	ArgumentList	heap -> cache [ index ] != NULL		33376	1					
ANR	33477	Argument	heap -> cache [ index ] != NULL		33376	0					
ANR	33478	EqualityExpression	heap -> cache [ index ] != NULL		33376	0		!=			
ANR	33479	ArrayIndexing	heap -> cache [ index ]		33376	0					
ANR	33480	PtrMemberAccess	heap -> cache		33376	0					
ANR	33481	Identifier	heap		33376	0					
ANR	33482	Identifier	cache		33376	1					
ANR	33483	Identifier	index		33376	1					
ANR	33484	Identifier	NULL		33376	1					
ANR	33485	CompoundStatement		23:44:510:510	33376	1					
ANR	33486	ExpressionStatement	heap -> cache_stat [ index ] . count --	1906:3:53601:53632	33376	0	True				
ANR	33487	PostIncDecOperationExpression	heap -> cache_stat [ index ] . count --		33376	0					
ANR	33488	MemberAccess	heap -> cache_stat [ index ] . count		33376	0					
ANR	33489	ArrayIndexing	heap -> cache_stat [ index ]		33376	0					
ANR	33490	PtrMemberAccess	heap -> cache_stat		33376	0					
ANR	33491	Identifier	heap		33376	0					
ANR	33492	Identifier	cache_stat		33376	1					
ANR	33493	Identifier	index		33376	1					
ANR	33494	Identifier	count		33376	1					
ANR	33495	IncDec	--		33376	1					
ANR	33496	ExpressionStatement	heap -> cache_stat [ index ] . hit ++	1907:3:53637:53666	33376	1	True				
ANR	33497	PostIncDecOperationExpression	heap -> cache_stat [ index ] . hit ++		33376	0					
ANR	33498	MemberAccess	heap -> cache_stat [ index ] . hit		33376	0					
ANR	33499	ArrayIndexing	heap -> cache_stat [ index ]		33376	0					
ANR	33500	PtrMemberAccess	heap -> cache_stat		33376	0					
ANR	33501	Identifier	heap		33376	0					
ANR	33502	Identifier	cache_stat		33376	1					
ANR	33503	Identifier	index		33376	1					
ANR	33504	Identifier	hit		33376	1					
ANR	33505	IncDec	++		33376	1					
ANR	33506	ExpressionStatement	best_fit = heap -> cache [ index ]	1909:3:53678:53707	33376	2	True				
ANR	33507	AssignmentExpression	best_fit = heap -> cache [ index ]		33376	0		=			
ANR	33508	Identifier	best_fit		33376	0					
ANR	33509	ArrayIndexing	heap -> cache [ index ]		33376	1					
ANR	33510	PtrMemberAccess	heap -> cache		33376	0					
ANR	33511	Identifier	heap		33376	0					
ANR	33512	Identifier	cache		33376	1					
ANR	33513	Identifier	index		33376	1					
ANR	33514	ExpressionStatement	heap -> cache [ index ] = best_fit -> prev_free_block	1910:3:53712:53758	33376	3	True				
ANR	33515	AssignmentExpression	heap -> cache [ index ] = best_fit -> prev_free_block		33376	0		=			
ANR	33516	ArrayIndexing	heap -> cache [ index ]		33376	0					
ANR	33517	PtrMemberAccess	heap -> cache		33376	0					
ANR	33518	Identifier	heap		33376	0					
ANR	33519	Identifier	cache		33376	1					
ANR	33520	Identifier	index		33376	1					
ANR	33521	PtrMemberAccess	best_fit -> prev_free_block		33376	1					
ANR	33522	Identifier	best_fit		33376	0					
ANR	33523	Identifier	prev_free_block		33376	1					
ANR	33524	ExpressionStatement	heap -> cached -= true_size	1911:3:53763:53788	33376	4	True				
ANR	33525	AssignmentExpression	heap -> cached -= true_size		33376	0		-=			
ANR	33526	PtrMemberAccess	heap -> cached		33376	0					
ANR	33527	Identifier	heap		33376	0					
ANR	33528	Identifier	cached		33376	1					
ANR	33529	Identifier	true_size		33376	1					
ANR	33530	ExpressionStatement	"ZEND_MM_CHECK_MAGIC ( best_fit , MEM_BLOCK_CACHED )"	1912:3:53793:53840	33376	5	True				
ANR	33531	CallExpression	"ZEND_MM_CHECK_MAGIC ( best_fit , MEM_BLOCK_CACHED )"		33376	0					
ANR	33532	Callee	ZEND_MM_CHECK_MAGIC		33376	0					
ANR	33533	Identifier	ZEND_MM_CHECK_MAGIC		33376	0					
ANR	33534	ArgumentList	best_fit		33376	1					
ANR	33535	Argument	best_fit		33376	0					
ANR	33536	Identifier	best_fit		33376	0					
ANR	33537	Argument	MEM_BLOCK_CACHED		33376	1					
ANR	33538	Identifier	MEM_BLOCK_CACHED		33376	0					
ANR	33539	ExpressionStatement	"ZEND_MM_SET_DEBUG_INFO ( best_fit , size , 1 , 0 )"	1913:3:53845:53889	33376	6	True				
ANR	33540	CallExpression	"ZEND_MM_SET_DEBUG_INFO ( best_fit , size , 1 , 0 )"		33376	0					
ANR	33541	Callee	ZEND_MM_SET_DEBUG_INFO		33376	0					
ANR	33542	Identifier	ZEND_MM_SET_DEBUG_INFO		33376	0					
ANR	33543	ArgumentList	best_fit		33376	1					
ANR	33544	Argument	best_fit		33376	0					
ANR	33545	Identifier	best_fit		33376	0					
ANR	33546	Argument	size		33376	1					
ANR	33547	Identifier	size		33376	0					
ANR	33548	Argument	1		33376	2					
ANR	33549	PrimaryExpression	1		33376	0					
ANR	33550	Argument	0		33376	3					
ANR	33551	PrimaryExpression	0		33376	0					
ANR	33552	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	1914:3:53894:53924	33376	7	True				
ANR	33553	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		33376	0					
ANR	33554	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		33376	0					
ANR	33555	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		33376	0					
ANR	33556	ArgumentList			33376	1					
ANR	33557	ReturnStatement	return ZEND_MM_DATA_OF ( best_fit ) ;	1915:3:53929:53961	33376	8	True				
ANR	33558	CallExpression	ZEND_MM_DATA_OF ( best_fit )		33376	0					
ANR	33559	Callee	ZEND_MM_DATA_OF		33376	0					
ANR	33560	Identifier	ZEND_MM_DATA_OF		33376	0					
ANR	33561	ArgumentList	best_fit		33376	1					
ANR	33562	Argument	best_fit		33376	0					
ANR	33563	Identifier	best_fit		33376	0					
ANR	33564	ExpressionStatement	heap -> cache_stat [ index ] . miss ++	1918:2:53993:54023	33376	4	True				
ANR	33565	PostIncDecOperationExpression	heap -> cache_stat [ index ] . miss ++		33376	0					
ANR	33566	MemberAccess	heap -> cache_stat [ index ] . miss		33376	0					
ANR	33567	ArrayIndexing	heap -> cache_stat [ index ]		33376	0					
ANR	33568	PtrMemberAccess	heap -> cache_stat		33376	0					
ANR	33569	Identifier	heap		33376	0					
ANR	33570	Identifier	cache_stat		33376	1					
ANR	33571	Identifier	index		33376	1					
ANR	33572	Identifier	miss		33376	1					
ANR	33573	IncDec	++		33376	1					
ANR	33574	ExpressionStatement	bitmap = heap -> free_bitmap >> index	1922:2:54042:54077	33376	5	True				
ANR	33575	AssignmentExpression	bitmap = heap -> free_bitmap >> index		33376	0		=			
ANR	33576	Identifier	bitmap		33376	0					
ANR	33577	ShiftExpression	heap -> free_bitmap >> index		33376	1		>>			
ANR	33578	PtrMemberAccess	heap -> free_bitmap		33376	0					
ANR	33579	Identifier	heap		33376	0					
ANR	33580	Identifier	free_bitmap		33376	1					
ANR	33581	Identifier	index		33376	1					
ANR	33582	IfStatement	if ( bitmap )		33376	6					
ANR	33583	Condition	bitmap	1923:6:54085:54090	33376	0	True				
ANR	33584	Identifier	bitmap		33376	0					
ANR	33585	CompoundStatement		43:14:1060:1060	33376	1					
ANR	33586	ExpressionStatement	index += zend_mm_low_bit ( bitmap )	1925:3:54154:54186	33376	0	True				
ANR	33587	AssignmentExpression	index += zend_mm_low_bit ( bitmap )		33376	0		+=			
ANR	33588	Identifier	index		33376	0					
ANR	33589	CallExpression	zend_mm_low_bit ( bitmap )		33376	1					
ANR	33590	Callee	zend_mm_low_bit		33376	0					
ANR	33591	Identifier	zend_mm_low_bit		33376	0					
ANR	33592	ArgumentList	bitmap		33376	1					
ANR	33593	Argument	bitmap		33376	0					
ANR	33594	Identifier	bitmap		33376	0					
ANR	33595	ExpressionStatement	best_fit = heap -> free_buckets [ index * 2 ]	1926:3:54191:54229	33376	1	True				
ANR	33596	AssignmentExpression	best_fit = heap -> free_buckets [ index * 2 ]		33376	0		=			
ANR	33597	Identifier	best_fit		33376	0					
ANR	33598	ArrayIndexing	heap -> free_buckets [ index * 2 ]		33376	1					
ANR	33599	PtrMemberAccess	heap -> free_buckets		33376	0					
ANR	33600	Identifier	heap		33376	0					
ANR	33601	Identifier	free_buckets		33376	1					
ANR	33602	MultiplicativeExpression	index * 2		33376	1		*			
ANR	33603	Identifier	index		33376	0					
ANR	33604	PrimaryExpression	2		33376	1					
ANR	33605	ExpressionStatement	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . hit ++	1928:3:54257:54300	33376	2	True				
ANR	33606	PostIncDecOperationExpression	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . hit ++		33376	0					
ANR	33607	MemberAccess	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . hit		33376	0					
ANR	33608	ArrayIndexing	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ]		33376	0					
ANR	33609	PtrMemberAccess	heap -> cache_stat		33376	0					
ANR	33610	Identifier	heap		33376	0					
ANR	33611	Identifier	cache_stat		33376	1					
ANR	33612	Identifier	ZEND_MM_NUM_BUCKETS		33376	1					
ANR	33613	Identifier	hit		33376	1					
ANR	33614	IncDec	++		33376	1					
ANR	33615	GotoStatement	goto zend_mm_finished_searching_for_block ;	1930:3:54312:54353	33376	3	True				
ANR	33616	Identifier	zend_mm_finished_searching_for_block		33376	0					
ANR	33617	ExpressionStatement	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . miss ++	1935:1:54387:54431	33376	10	True				
ANR	33618	PostIncDecOperationExpression	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . miss ++		33376	0					
ANR	33619	MemberAccess	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . miss		33376	0					
ANR	33620	ArrayIndexing	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ]		33376	0					
ANR	33621	PtrMemberAccess	heap -> cache_stat		33376	0					
ANR	33622	Identifier	heap		33376	0					
ANR	33623	Identifier	cache_stat		33376	1					
ANR	33624	Identifier	ZEND_MM_NUM_BUCKETS		33376	1					
ANR	33625	Identifier	miss		33376	1					
ANR	33626	IncDec	++		33376	1					
ANR	33627	ExpressionStatement	"best_fit = zend_mm_search_large_block ( heap , true_size )"	1938:1:54442:54496	33376	11	True				
ANR	33628	AssignmentExpression	"best_fit = zend_mm_search_large_block ( heap , true_size )"		33376	0		=			
ANR	33629	Identifier	best_fit		33376	0					
ANR	33630	CallExpression	"zend_mm_search_large_block ( heap , true_size )"		33376	1					
ANR	33631	Callee	zend_mm_search_large_block		33376	0					
ANR	33632	Identifier	zend_mm_search_large_block		33376	0					
ANR	33633	ArgumentList	heap		33376	1					
ANR	33634	Argument	heap		33376	0					
ANR	33635	Identifier	heap		33376	0					
ANR	33636	Argument	true_size		33376	1					
ANR	33637	Identifier	true_size		33376	0					
ANR	33638	IfStatement	if ( ! best_fit && heap -> real_size >= heap -> limit - heap -> block_size )		33376	12					
ANR	33639	Condition	! best_fit && heap -> real_size >= heap -> limit - heap -> block_size	1940:5:54504:54565	33376	0	True				
ANR	33640	AndExpression	! best_fit && heap -> real_size >= heap -> limit - heap -> block_size		33376	0		&&			
ANR	33641	UnaryOperationExpression	! best_fit		33376	0					
ANR	33642	UnaryOperator	!		33376	0					
ANR	33643	Identifier	best_fit		33376	1					
ANR	33644	RelationalExpression	heap -> real_size >= heap -> limit - heap -> block_size		33376	1		>=			
ANR	33645	PtrMemberAccess	heap -> real_size		33376	0					
ANR	33646	Identifier	heap		33376	0					
ANR	33647	Identifier	real_size		33376	1					
ANR	33648	AdditiveExpression	heap -> limit - heap -> block_size		33376	1		-			
ANR	33649	PtrMemberAccess	heap -> limit		33376	0					
ANR	33650	Identifier	heap		33376	0					
ANR	33651	Identifier	limit		33376	1					
ANR	33652	PtrMemberAccess	heap -> block_size		33376	1					
ANR	33653	Identifier	heap		33376	0					
ANR	33654	Identifier	block_size		33376	1					
ANR	33655	CompoundStatement		62:2:1588:1609	33376	1					
ANR	33656	IdentifierDeclStatement	zend_mm_free_block * p = heap -> rest_buckets [ 0 ] ;	1941:2:54572:54617	33376	0	True				
ANR	33657	IdentifierDecl	* p = heap -> rest_buckets [ 0 ]		33376	0					
ANR	33658	IdentifierDeclType	zend_mm_free_block *		33376	0					
ANR	33659	Identifier	p		33376	1					
ANR	33660	AssignmentExpression	* p = heap -> rest_buckets [ 0 ]		33376	2		=			
ANR	33661	Identifier	p		33376	0					
ANR	33662	ArrayIndexing	heap -> rest_buckets [ 0 ]		33376	1					
ANR	33663	PtrMemberAccess	heap -> rest_buckets		33376	0					
ANR	33664	Identifier	heap		33376	0					
ANR	33665	Identifier	rest_buckets		33376	1					
ANR	33666	PrimaryExpression	0		33376	1					
ANR	33667	IdentifierDeclStatement	size_t best_size = - 1 ;	1942:2:54621:54642	33376	1	True				
ANR	33668	IdentifierDecl	best_size = - 1		33376	0					
ANR	33669	IdentifierDeclType	size_t		33376	0					
ANR	33670	Identifier	best_size		33376	1					
ANR	33671	AssignmentExpression	best_size = - 1		33376	2		=			
ANR	33672	Identifier	best_size		33376	0					
ANR	33673	UnaryOperationExpression	- 1		33376	1					
ANR	33674	UnaryOperator	-		33376	0					
ANR	33675	PrimaryExpression	1		33376	1					
ANR	33676	WhileStatement	while ( p != ZEND_MM_REST_BUCKET ( heap ) )		33376	2					
ANR	33677	Condition	p != ZEND_MM_REST_BUCKET ( heap )	1944:9:54654:54683	33376	0	True				
ANR	33678	EqualityExpression	p != ZEND_MM_REST_BUCKET ( heap )		33376	0		!=			
ANR	33679	Identifier	p		33376	0					
ANR	33680	CallExpression	ZEND_MM_REST_BUCKET ( heap )		33376	1					
ANR	33681	Callee	ZEND_MM_REST_BUCKET		33376	0					
ANR	33682	Identifier	ZEND_MM_REST_BUCKET		33376	0					
ANR	33683	ArgumentList	heap		33376	1					
ANR	33684	Argument	heap		33376	0					
ANR	33685	Identifier	heap		33376	0					
ANR	33686	CompoundStatement		64:41:1653:1653	33376	1					
ANR	33687	IfStatement	if ( UNEXPECTED ( ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size ) )		33376	0					
ANR	33688	Condition	UNEXPECTED ( ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size )	1945:7:54695:54745	33376	0	True				
ANR	33689	CallExpression	UNEXPECTED ( ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size )		33376	0					
ANR	33690	Callee	UNEXPECTED		33376	0					
ANR	33691	Identifier	UNEXPECTED		33376	0					
ANR	33692	ArgumentList	ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size		33376	1					
ANR	33693	Argument	ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size		33376	0					
ANR	33694	EqualityExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) == true_size		33376	0		==			
ANR	33695	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		33376	0					
ANR	33696	Callee	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	33697	Identifier	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	33698	ArgumentList	p		33376	1					
ANR	33699	Argument	p		33376	0					
ANR	33700	Identifier	p		33376	0					
ANR	33701	Identifier	true_size		33376	1					
ANR	33702	CompoundStatement		65:60:1715:1715	33376	1					
ANR	33703	ExpressionStatement	best_fit = p	1946:4:54754:54766	33376	0	True				
ANR	33704	AssignmentExpression	best_fit = p		33376	0		=			
ANR	33705	Identifier	best_fit		33376	0					
ANR	33706	Identifier	p		33376	1					
ANR	33707	GotoStatement	goto zend_mm_finished_searching_for_block ;	1947:4:54772:54813	33376	1	True				
ANR	33708	Identifier	zend_mm_finished_searching_for_block		33376	0					
ANR	33709	ElseStatement	else		33376	0					
ANR	33710	IfStatement	if ( ZEND_MM_FREE_BLOCK_SIZE ( p ) > true_size && ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size )		33376	0					
ANR	33711	Condition	ZEND_MM_FREE_BLOCK_SIZE ( p ) > true_size && ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size	1948:14:54829:54922	33376	0	True				
ANR	33712	AndExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) > true_size && ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size		33376	0		&&			
ANR	33713	RelationalExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) > true_size		33376	0		>			
ANR	33714	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		33376	0					
ANR	33715	Callee	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	33716	Identifier	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	33717	ArgumentList	p		33376	1					
ANR	33718	Argument	p		33376	0					
ANR	33719	Identifier	p		33376	0					
ANR	33720	Identifier	true_size		33376	1					
ANR	33721	RelationalExpression	ZEND_MM_FREE_BLOCK_SIZE ( p ) < best_size		33376	1		<			
ANR	33722	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		33376	0					
ANR	33723	Callee	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	33724	Identifier	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	33725	ArgumentList	p		33376	1					
ANR	33726	Argument	p		33376	0					
ANR	33727	Identifier	p		33376	0					
ANR	33728	Identifier	best_size		33376	1					
ANR	33729	CompoundStatement		69:54:1892:1892	33376	1					
ANR	33730	ExpressionStatement	best_size = ZEND_MM_FREE_BLOCK_SIZE ( p )	1950:4:54931:54969	33376	0	True				
ANR	33731	AssignmentExpression	best_size = ZEND_MM_FREE_BLOCK_SIZE ( p )		33376	0		=			
ANR	33732	Identifier	best_size		33376	0					
ANR	33733	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( p )		33376	1					
ANR	33734	Callee	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	33735	Identifier	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	33736	ArgumentList	p		33376	1					
ANR	33737	Argument	p		33376	0					
ANR	33738	Identifier	p		33376	0					
ANR	33739	ExpressionStatement	best_fit = p	1951:4:54975:54987	33376	1	True				
ANR	33740	AssignmentExpression	best_fit = p		33376	0		=			
ANR	33741	Identifier	best_fit		33376	0					
ANR	33742	Identifier	p		33376	1					
ANR	33743	ExpressionStatement	p = p -> prev_free_block	1953:3:54997:55019	33376	1	True				
ANR	33744	AssignmentExpression	p = p -> prev_free_block		33376	0		=			
ANR	33745	Identifier	p		33376	0					
ANR	33746	PtrMemberAccess	p -> prev_free_block		33376	1					
ANR	33747	Identifier	p		33376	0					
ANR	33748	Identifier	prev_free_block		33376	1					
ANR	33749	IfStatement	if ( ! best_fit )		33376	13					
ANR	33750	Condition	! best_fit	1957:5:55034:55042	33376	0	True				
ANR	33751	UnaryOperationExpression	! best_fit		33376	0					
ANR	33752	UnaryOperator	!		33376	0					
ANR	33753	Identifier	best_fit		33376	1					
ANR	33754	CompoundStatement		77:16:2012:2012	33376	1					
ANR	33755	IfStatement	if ( true_size > heap -> block_size - ( ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE ) )		33376	0					
ANR	33756	Condition	true_size > heap -> block_size - ( ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE )	1958:6:55053:55143	33376	0	True				
ANR	33757	RelationalExpression	true_size > heap -> block_size - ( ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE )		33376	0		>			
ANR	33758	Identifier	true_size		33376	0					
ANR	33759	AdditiveExpression	heap -> block_size - ( ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE )		33376	1		-			
ANR	33760	PtrMemberAccess	heap -> block_size		33376	0					
ANR	33761	Identifier	heap		33376	0					
ANR	33762	Identifier	block_size		33376	1					
ANR	33763	AdditiveExpression	ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		33376	1		+			
ANR	33764	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		33376	0					
ANR	33765	Identifier	ZEND_MM_ALIGNED_HEADER_SIZE		33376	1					
ANR	33766	CompoundStatement		78:99:2113:2113	33376	1					
ANR	33767	ExpressionStatement	segment_size = true_size + ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE	1961:3:55277:55362	33376	0	True				
ANR	33768	AssignmentExpression	segment_size = true_size + ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		33376	0		=			
ANR	33769	Identifier	segment_size		33376	0					
ANR	33770	AdditiveExpression	true_size + ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		33376	1		+			
ANR	33771	Identifier	true_size		33376	0					
ANR	33772	AdditiveExpression	ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		33376	1		+			
ANR	33773	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		33376	0					
ANR	33774	Identifier	ZEND_MM_ALIGNED_HEADER_SIZE		33376	1					
ANR	33775	ExpressionStatement	segment_size = ( segment_size + ( heap -> block_size - 1 ) ) & ~ ( heap -> block_size - 1 )	1962:3:55367:55443	33376	1	True				
ANR	33776	AssignmentExpression	segment_size = ( segment_size + ( heap -> block_size - 1 ) ) & ~ ( heap -> block_size - 1 )		33376	0		=			
ANR	33777	Identifier	segment_size		33376	0					
ANR	33778	BitAndExpression	( segment_size + ( heap -> block_size - 1 ) ) & ~ ( heap -> block_size - 1 )		33376	1		&			
ANR	33779	AdditiveExpression	segment_size + ( heap -> block_size - 1 )		33376	0		+			
ANR	33780	Identifier	segment_size		33376	0					
ANR	33781	AdditiveExpression	heap -> block_size - 1		33376	1		-			
ANR	33782	PtrMemberAccess	heap -> block_size		33376	0					
ANR	33783	Identifier	heap		33376	0					
ANR	33784	Identifier	block_size		33376	1					
ANR	33785	PrimaryExpression	1		33376	1					
ANR	33786	UnaryOperationExpression	~ ( heap -> block_size - 1 )		33376	1					
ANR	33787	UnaryOperator	~		33376	0					
ANR	33788	AdditiveExpression	heap -> block_size - 1		33376	1		-			
ANR	33789	PtrMemberAccess	heap -> block_size		33376	0					
ANR	33790	Identifier	heap		33376	0					
ANR	33791	Identifier	block_size		33376	1					
ANR	33792	PrimaryExpression	1		33376	1					
ANR	33793	ExpressionStatement	keep_rest = 1	1963:3:55448:55461	33376	2	True				
ANR	33794	AssignmentExpression	keep_rest = 1		33376	0		=			
ANR	33795	Identifier	keep_rest		33376	0					
ANR	33796	PrimaryExpression	1		33376	1					
ANR	33797	ElseStatement	else		33376	0					
ANR	33798	CompoundStatement		84:9:2439:2439	33376	0					
ANR	33799	ExpressionStatement	segment_size = heap -> block_size	1965:3:55477:55508	33376	0	True				
ANR	33800	AssignmentExpression	segment_size = heap -> block_size		33376	0		=			
ANR	33801	Identifier	segment_size		33376	0					
ANR	33802	PtrMemberAccess	heap -> block_size		33376	1					
ANR	33803	Identifier	heap		33376	0					
ANR	33804	Identifier	block_size		33376	1					
ANR	33805	IfStatement	if ( segment_size < true_size || heap -> real_size + segment_size > heap -> limit )		33376	1					
ANR	33806	Condition	segment_size < true_size || heap -> real_size + segment_size > heap -> limit	1968:6:55521:55598	33376	0	True				
ANR	33807	OrExpression	segment_size < true_size || heap -> real_size + segment_size > heap -> limit		33376	0		||			
ANR	33808	RelationalExpression	segment_size < true_size		33376	0		<			
ANR	33809	Identifier	segment_size		33376	0					
ANR	33810	Identifier	true_size		33376	1					
ANR	33811	RelationalExpression	heap -> real_size + segment_size > heap -> limit		33376	1		>			
ANR	33812	AdditiveExpression	heap -> real_size + segment_size		33376	0		+			
ANR	33813	PtrMemberAccess	heap -> real_size		33376	0					
ANR	33814	Identifier	heap		33376	0					
ANR	33815	Identifier	real_size		33376	1					
ANR	33816	Identifier	segment_size		33376	1					
ANR	33817	PtrMemberAccess	heap -> limit		33376	1					
ANR	33818	Identifier	heap		33376	0					
ANR	33819	Identifier	limit		33376	1					
ANR	33820	CompoundStatement		89:52:2568:2568	33376	1					
ANR	33821	ExpressionStatement	zend_mm_free_cache ( heap )	1972:3:55655:55679	33376	0	True				
ANR	33822	CallExpression	zend_mm_free_cache ( heap )		33376	0					
ANR	33823	Callee	zend_mm_free_cache		33376	0					
ANR	33824	Identifier	zend_mm_free_cache		33376	0					
ANR	33825	ArgumentList	heap		33376	1					
ANR	33826	Argument	heap		33376	0					
ANR	33827	Identifier	heap		33376	0					
ANR	33828	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	1974:3:55691:55721	33376	1	True				
ANR	33829	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		33376	0					
ANR	33830	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		33376	0					
ANR	33831	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		33376	0					
ANR	33832	ArgumentList			33376	1					
ANR	33833	ExpressionStatement	"zend_mm_safe_error ( heap , ""Allowed memory size of %ld bytes exhausted at %s:%d (tried to allocate %lu bytes)"" , heap -> limit , __zend_filename , __zend_lineno , size )"	1976:3:55741:55901	33376	2	True				
ANR	33834	CallExpression	"zend_mm_safe_error ( heap , ""Allowed memory size of %ld bytes exhausted at %s:%d (tried to allocate %lu bytes)"" , heap -> limit , __zend_filename , __zend_lineno , size )"		33376	0					
ANR	33835	Callee	zend_mm_safe_error		33376	0					
ANR	33836	Identifier	zend_mm_safe_error		33376	0					
ANR	33837	ArgumentList	heap		33376	1					
ANR	33838	Argument	heap		33376	0					
ANR	33839	Identifier	heap		33376	0					
ANR	33840	Argument	"""Allowed memory size of %ld bytes exhausted at %s:%d (tried to allocate %lu bytes)"""		33376	1					
ANR	33841	PrimaryExpression	"""Allowed memory size of %ld bytes exhausted at %s:%d (tried to allocate %lu bytes)"""		33376	0					
ANR	33842	Argument	heap -> limit		33376	2					
ANR	33843	PtrMemberAccess	heap -> limit		33376	0					
ANR	33844	Identifier	heap		33376	0					
ANR	33845	Identifier	limit		33376	1					
ANR	33846	Argument	__zend_filename		33376	3					
ANR	33847	Identifier	__zend_filename		33376	0					
ANR	33848	Argument	__zend_lineno		33376	4					
ANR	33849	Identifier	__zend_lineno		33376	0					
ANR	33850	Argument	size		33376	5					
ANR	33851	Identifier	size		33376	0					
ANR	33852	ExpressionStatement	segment = ( zend_mm_segment * ) ZEND_MM_STORAGE_ALLOC ( segment_size )	1982:2:56047:56112	33376	2	True				
ANR	33853	AssignmentExpression	segment = ( zend_mm_segment * ) ZEND_MM_STORAGE_ALLOC ( segment_size )		33376	0		=			
ANR	33854	Identifier	segment		33376	0					
ANR	33855	CastExpression	( zend_mm_segment * ) ZEND_MM_STORAGE_ALLOC ( segment_size )		33376	1					
ANR	33856	CastTarget	zend_mm_segment *		33376	0					
ANR	33857	CallExpression	ZEND_MM_STORAGE_ALLOC ( segment_size )		33376	1					
ANR	33858	Callee	ZEND_MM_STORAGE_ALLOC		33376	0					
ANR	33859	Identifier	ZEND_MM_STORAGE_ALLOC		33376	0					
ANR	33860	ArgumentList	segment_size		33376	1					
ANR	33861	Argument	segment_size		33376	0					
ANR	33862	Identifier	segment_size		33376	0					
ANR	33863	IfStatement	if ( ! segment )		33376	3					
ANR	33864	Condition	! segment	1984:6:56121:56128	33376	0	True				
ANR	33865	UnaryOperationExpression	! segment		33376	0					
ANR	33866	UnaryOperator	!		33376	0					
ANR	33867	Identifier	segment		33376	1					
ANR	33868	CompoundStatement		104:16:3098:3098	33376	1					
ANR	33869	ExpressionStatement	zend_mm_free_cache ( heap )	1987:3:56202:56226	33376	0	True				
ANR	33870	CallExpression	zend_mm_free_cache ( heap )		33376	0					
ANR	33871	Callee	zend_mm_free_cache		33376	0					
ANR	33872	Identifier	zend_mm_free_cache		33376	0					
ANR	33873	ArgumentList	heap		33376	1					
ANR	33874	Argument	heap		33376	0					
ANR	33875	Identifier	heap		33376	0					
ANR	33876	Label	out_of_memory :	1989:0:56235:56248	33376	1	True				
ANR	33877	Identifier	out_of_memory		33376	0					
ANR	33878	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	1990:3:56253:56283	33376	2	True				
ANR	33879	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		33376	0					
ANR	33880	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		33376	0					
ANR	33881	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		33376	0					
ANR	33882	ArgumentList			33376	1					
ANR	33883	ExpressionStatement	"zend_mm_safe_error ( heap , ""Out of memory (allocated %ld) at %s:%d (tried to allocate %lu bytes)"" , heap -> real_size , __zend_filename , __zend_lineno , size )"	1992:3:56303:56454	33376	3	True				
ANR	33884	CallExpression	"zend_mm_safe_error ( heap , ""Out of memory (allocated %ld) at %s:%d (tried to allocate %lu bytes)"" , heap -> real_size , __zend_filename , __zend_lineno , size )"		33376	0					
ANR	33885	Callee	zend_mm_safe_error		33376	0					
ANR	33886	Identifier	zend_mm_safe_error		33376	0					
ANR	33887	ArgumentList	heap		33376	1					
ANR	33888	Argument	heap		33376	0					
ANR	33889	Identifier	heap		33376	0					
ANR	33890	Argument	"""Out of memory (allocated %ld) at %s:%d (tried to allocate %lu bytes)"""		33376	1					
ANR	33891	PrimaryExpression	"""Out of memory (allocated %ld) at %s:%d (tried to allocate %lu bytes)"""		33376	0					
ANR	33892	Argument	heap -> real_size		33376	2					
ANR	33893	PtrMemberAccess	heap -> real_size		33376	0					
ANR	33894	Identifier	heap		33376	0					
ANR	33895	Identifier	real_size		33376	1					
ANR	33896	Argument	__zend_filename		33376	3					
ANR	33897	Identifier	__zend_filename		33376	0					
ANR	33898	Argument	__zend_lineno		33376	4					
ANR	33899	Identifier	__zend_lineno		33376	0					
ANR	33900	Argument	size		33376	5					
ANR	33901	Identifier	size		33376	0					
ANR	33902	ReturnStatement	return NULL ;	1996:3:56587:56598	33376	4	True				
ANR	33903	Identifier	NULL		33376	0					
ANR	33904	ExpressionStatement	heap -> real_size += segment_size	1999:2:56607:56638	33376	4	True				
ANR	33905	AssignmentExpression	heap -> real_size += segment_size		33376	0		+=			
ANR	33906	PtrMemberAccess	heap -> real_size		33376	0					
ANR	33907	Identifier	heap		33376	0					
ANR	33908	Identifier	real_size		33376	1					
ANR	33909	Identifier	segment_size		33376	1					
ANR	33910	IfStatement	if ( heap -> real_size > heap -> real_peak )		33376	5					
ANR	33911	Condition	heap -> real_size > heap -> real_peak	2000:6:56646:56678	33376	0	True				
ANR	33912	RelationalExpression	heap -> real_size > heap -> real_peak		33376	0		>			
ANR	33913	PtrMemberAccess	heap -> real_size		33376	0					
ANR	33914	Identifier	heap		33376	0					
ANR	33915	Identifier	real_size		33376	1					
ANR	33916	PtrMemberAccess	heap -> real_peak		33376	1					
ANR	33917	Identifier	heap		33376	0					
ANR	33918	Identifier	real_peak		33376	1					
ANR	33919	CompoundStatement		120:41:3648:3648	33376	1					
ANR	33920	ExpressionStatement	heap -> real_peak = heap -> real_size	2001:3:56686:56719	33376	0	True				
ANR	33921	AssignmentExpression	heap -> real_peak = heap -> real_size		33376	0		=			
ANR	33922	PtrMemberAccess	heap -> real_peak		33376	0					
ANR	33923	Identifier	heap		33376	0					
ANR	33924	Identifier	real_peak		33376	1					
ANR	33925	PtrMemberAccess	heap -> real_size		33376	1					
ANR	33926	Identifier	heap		33376	0					
ANR	33927	Identifier	real_size		33376	1					
ANR	33928	ExpressionStatement	segment -> size = segment_size	2004:2:56728:56756	33376	6	True				
ANR	33929	AssignmentExpression	segment -> size = segment_size		33376	0		=			
ANR	33930	PtrMemberAccess	segment -> size		33376	0					
ANR	33931	Identifier	segment		33376	0					
ANR	33932	Identifier	size		33376	1					
ANR	33933	Identifier	segment_size		33376	1					
ANR	33934	ExpressionStatement	segment -> next_segment = heap -> segments_list	2005:2:56760:56803	33376	7	True				
ANR	33935	AssignmentExpression	segment -> next_segment = heap -> segments_list		33376	0		=			
ANR	33936	PtrMemberAccess	segment -> next_segment		33376	0					
ANR	33937	Identifier	segment		33376	0					
ANR	33938	Identifier	next_segment		33376	1					
ANR	33939	PtrMemberAccess	heap -> segments_list		33376	1					
ANR	33940	Identifier	heap		33376	0					
ANR	33941	Identifier	segments_list		33376	1					
ANR	33942	ExpressionStatement	heap -> segments_list = segment	2006:2:56807:56836	33376	8	True				
ANR	33943	AssignmentExpression	heap -> segments_list = segment		33376	0		=			
ANR	33944	PtrMemberAccess	heap -> segments_list		33376	0					
ANR	33945	Identifier	heap		33376	0					
ANR	33946	Identifier	segments_list		33376	1					
ANR	33947	Identifier	segment		33376	1					
ANR	33948	ExpressionStatement	best_fit = ( zend_mm_free_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )	2008:2:56841:56924	33376	9	True				
ANR	33949	AssignmentExpression	best_fit = ( zend_mm_free_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		33376	0		=			
ANR	33950	Identifier	best_fit		33376	0					
ANR	33951	CastExpression	( zend_mm_free_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		33376	1					
ANR	33952	CastTarget	zend_mm_free_block *		33376	0					
ANR	33953	AdditiveExpression	( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE		33376	1		+			
ANR	33954	CastExpression	( char * ) segment		33376	0					
ANR	33955	CastTarget	char *		33376	0					
ANR	33956	Identifier	segment		33376	1					
ANR	33957	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		33376	1					
ANR	33958	ExpressionStatement	ZEND_MM_MARK_FIRST_BLOCK ( best_fit )	2009:2:56928:56962	33376	10	True				
ANR	33959	CallExpression	ZEND_MM_MARK_FIRST_BLOCK ( best_fit )		33376	0					
ANR	33960	Callee	ZEND_MM_MARK_FIRST_BLOCK		33376	0					
ANR	33961	Identifier	ZEND_MM_MARK_FIRST_BLOCK		33376	0					
ANR	33962	ArgumentList	best_fit		33376	1					
ANR	33963	Argument	best_fit		33376	0					
ANR	33964	Identifier	best_fit		33376	0					
ANR	33965	ExpressionStatement	block_size = segment_size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE	2011:2:56967:57053	33376	11	True				
ANR	33966	AssignmentExpression	block_size = segment_size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		33376	0		=			
ANR	33967	Identifier	block_size		33376	0					
ANR	33968	AdditiveExpression	segment_size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		33376	1		-			
ANR	33969	Identifier	segment_size		33376	0					
ANR	33970	AdditiveExpression	ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		33376	1		-			
ANR	33971	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		33376	0					
ANR	33972	Identifier	ZEND_MM_ALIGNED_HEADER_SIZE		33376	1					
ANR	33973	ExpressionStatement	"ZEND_MM_LAST_BLOCK ( ZEND_MM_BLOCK_AT ( best_fit , block_size ) )"	2013:2:57058:57116	33376	12	True				
ANR	33974	CallExpression	"ZEND_MM_LAST_BLOCK ( ZEND_MM_BLOCK_AT ( best_fit , block_size ) )"		33376	0					
ANR	33975	Callee	ZEND_MM_LAST_BLOCK		33376	0					
ANR	33976	Identifier	ZEND_MM_LAST_BLOCK		33376	0					
ANR	33977	ArgumentList	"ZEND_MM_BLOCK_AT ( best_fit , block_size )"		33376	1					
ANR	33978	Argument	"ZEND_MM_BLOCK_AT ( best_fit , block_size )"		33376	0					
ANR	33979	CallExpression	"ZEND_MM_BLOCK_AT ( best_fit , block_size )"		33376	0					
ANR	33980	Callee	ZEND_MM_BLOCK_AT		33376	0					
ANR	33981	Identifier	ZEND_MM_BLOCK_AT		33376	0					
ANR	33982	ArgumentList	best_fit		33376	1					
ANR	33983	Argument	best_fit		33376	0					
ANR	33984	Identifier	best_fit		33376	0					
ANR	33985	Argument	block_size		33376	1					
ANR	33986	Identifier	block_size		33376	0					
ANR	33987	ElseStatement	else		33376	0					
ANR	33988	CompoundStatement		135:8:4094:4094	33376	0					
ANR	33989	Label	zend_mm_finished_searching_for_block :	2016:0:57129:57165	33376	0	True				
ANR	33990	Identifier	zend_mm_finished_searching_for_block		33376	0					
ANR	33991	ExpressionStatement	"ZEND_MM_CHECK_MAGIC ( best_fit , MEM_BLOCK_FREED )"	2018:2:57199:57245	33376	1	True				
ANR	33992	CallExpression	"ZEND_MM_CHECK_MAGIC ( best_fit , MEM_BLOCK_FREED )"		33376	0					
ANR	33993	Callee	ZEND_MM_CHECK_MAGIC		33376	0					
ANR	33994	Identifier	ZEND_MM_CHECK_MAGIC		33376	0					
ANR	33995	ArgumentList	best_fit		33376	1					
ANR	33996	Argument	best_fit		33376	0					
ANR	33997	Identifier	best_fit		33376	0					
ANR	33998	Argument	MEM_BLOCK_FREED		33376	1					
ANR	33999	Identifier	MEM_BLOCK_FREED		33376	0					
ANR	34000	ExpressionStatement	ZEND_MM_CHECK_COOKIE ( best_fit )	2019:2:57249:57279	33376	2	True				
ANR	34001	CallExpression	ZEND_MM_CHECK_COOKIE ( best_fit )		33376	0					
ANR	34002	Callee	ZEND_MM_CHECK_COOKIE		33376	0					
ANR	34003	Identifier	ZEND_MM_CHECK_COOKIE		33376	0					
ANR	34004	ArgumentList	best_fit		33376	1					
ANR	34005	Argument	best_fit		33376	0					
ANR	34006	Identifier	best_fit		33376	0					
ANR	34007	ExpressionStatement	ZEND_MM_CHECK_BLOCK_LINKAGE ( best_fit )	2020:2:57283:57320	33376	3	True				
ANR	34008	CallExpression	ZEND_MM_CHECK_BLOCK_LINKAGE ( best_fit )		33376	0					
ANR	34009	Callee	ZEND_MM_CHECK_BLOCK_LINKAGE		33376	0					
ANR	34010	Identifier	ZEND_MM_CHECK_BLOCK_LINKAGE		33376	0					
ANR	34011	ArgumentList	best_fit		33376	1					
ANR	34012	Argument	best_fit		33376	0					
ANR	34013	Identifier	best_fit		33376	0					
ANR	34014	ExpressionStatement	"zend_mm_remove_from_free_list ( heap , best_fit )"	2021:2:57324:57369	33376	4	True				
ANR	34015	CallExpression	"zend_mm_remove_from_free_list ( heap , best_fit )"		33376	0					
ANR	34016	Callee	zend_mm_remove_from_free_list		33376	0					
ANR	34017	Identifier	zend_mm_remove_from_free_list		33376	0					
ANR	34018	ArgumentList	heap		33376	1					
ANR	34019	Argument	heap		33376	0					
ANR	34020	Identifier	heap		33376	0					
ANR	34021	Argument	best_fit		33376	1					
ANR	34022	Identifier	best_fit		33376	0					
ANR	34023	ExpressionStatement	block_size = ZEND_MM_FREE_BLOCK_SIZE ( best_fit )	2023:2:57374:57420	33376	5	True				
ANR	34024	AssignmentExpression	block_size = ZEND_MM_FREE_BLOCK_SIZE ( best_fit )		33376	0		=			
ANR	34025	Identifier	block_size		33376	0					
ANR	34026	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( best_fit )		33376	1					
ANR	34027	Callee	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	34028	Identifier	ZEND_MM_FREE_BLOCK_SIZE		33376	0					
ANR	34029	ArgumentList	best_fit		33376	1					
ANR	34030	Argument	best_fit		33376	0					
ANR	34031	Identifier	best_fit		33376	0					
ANR	34032	ExpressionStatement	remaining_size = block_size - true_size	2026:1:57427:57466	33376	14	True				
ANR	34033	AssignmentExpression	remaining_size = block_size - true_size		33376	0		=			
ANR	34034	Identifier	remaining_size		33376	0					
ANR	34035	AdditiveExpression	block_size - true_size		33376	1		-			
ANR	34036	Identifier	block_size		33376	0					
ANR	34037	Identifier	true_size		33376	1					
ANR	34038	IfStatement	if ( remaining_size < ZEND_MM_ALIGNED_MIN_HEADER_SIZE )		33376	15					
ANR	34039	Condition	remaining_size < ZEND_MM_ALIGNED_MIN_HEADER_SIZE	2028:5:57474:57521	33376	0	True				
ANR	34040	RelationalExpression	remaining_size < ZEND_MM_ALIGNED_MIN_HEADER_SIZE		33376	0		<			
ANR	34041	Identifier	remaining_size		33376	0					
ANR	34042	Identifier	ZEND_MM_ALIGNED_MIN_HEADER_SIZE		33376	1					
ANR	34043	CompoundStatement		148:55:4491:4491	33376	1					
ANR	34044	ExpressionStatement	true_size = block_size	2029:2:57528:57550	33376	0	True				
ANR	34045	AssignmentExpression	true_size = block_size		33376	0		=			
ANR	34046	Identifier	true_size		33376	0					
ANR	34047	Identifier	block_size		33376	1					
ANR	34048	ExpressionStatement	"ZEND_MM_BLOCK ( best_fit , ZEND_MM_USED_BLOCK , true_size )"	2030:2:57554:57608	33376	1	True				
ANR	34049	CallExpression	"ZEND_MM_BLOCK ( best_fit , ZEND_MM_USED_BLOCK , true_size )"		33376	0					
ANR	34050	Callee	ZEND_MM_BLOCK		33376	0					
ANR	34051	Identifier	ZEND_MM_BLOCK		33376	0					
ANR	34052	ArgumentList	best_fit		33376	1					
ANR	34053	Argument	best_fit		33376	0					
ANR	34054	Identifier	best_fit		33376	0					
ANR	34055	Argument	ZEND_MM_USED_BLOCK		33376	1					
ANR	34056	Identifier	ZEND_MM_USED_BLOCK		33376	0					
ANR	34057	Argument	true_size		33376	2					
ANR	34058	Identifier	true_size		33376	0					
ANR	34059	ElseStatement	else		33376	0					
ANR	34060	CompoundStatement		152:2:4589:4623	33376	0					
ANR	34061	IdentifierDeclStatement	zend_mm_free_block * new_free_block ;	2032:2:57622:57656	33376	0	True				
ANR	34062	IdentifierDecl	* new_free_block		33376	0					
ANR	34063	IdentifierDeclType	zend_mm_free_block *		33376	0					
ANR	34064	Identifier	new_free_block		33376	1					
ANR	34065	ExpressionStatement	"ZEND_MM_BLOCK ( best_fit , ZEND_MM_USED_BLOCK , true_size )"	2035:2:57692:57746	33376	1	True				
ANR	34066	CallExpression	"ZEND_MM_BLOCK ( best_fit , ZEND_MM_USED_BLOCK , true_size )"		33376	0					
ANR	34067	Callee	ZEND_MM_BLOCK		33376	0					
ANR	34068	Identifier	ZEND_MM_BLOCK		33376	0					
ANR	34069	ArgumentList	best_fit		33376	1					
ANR	34070	Argument	best_fit		33376	0					
ANR	34071	Identifier	best_fit		33376	0					
ANR	34072	Argument	ZEND_MM_USED_BLOCK		33376	1					
ANR	34073	Identifier	ZEND_MM_USED_BLOCK		33376	0					
ANR	34074	Argument	true_size		33376	2					
ANR	34075	Identifier	true_size		33376	0					
ANR	34076	ExpressionStatement	"new_free_block = ( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( best_fit , true_size )"	2036:2:57750:57827	33376	2	True				
ANR	34077	AssignmentExpression	"new_free_block = ( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( best_fit , true_size )"		33376	0		=			
ANR	34078	Identifier	new_free_block		33376	0					
ANR	34079	CastExpression	"( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( best_fit , true_size )"		33376	1					
ANR	34080	CastTarget	zend_mm_free_block *		33376	0					
ANR	34081	CallExpression	"ZEND_MM_BLOCK_AT ( best_fit , true_size )"		33376	1					
ANR	34082	Callee	ZEND_MM_BLOCK_AT		33376	0					
ANR	34083	Identifier	ZEND_MM_BLOCK_AT		33376	0					
ANR	34084	ArgumentList	best_fit		33376	1					
ANR	34085	Argument	best_fit		33376	0					
ANR	34086	Identifier	best_fit		33376	0					
ANR	34087	Argument	true_size		33376	1					
ANR	34088	Identifier	true_size		33376	0					
ANR	34089	ExpressionStatement	"ZEND_MM_BLOCK ( new_free_block , ZEND_MM_FREE_BLOCK , remaining_size )"	2037:2:57831:57896	33376	3	True				
ANR	34090	CallExpression	"ZEND_MM_BLOCK ( new_free_block , ZEND_MM_FREE_BLOCK , remaining_size )"		33376	0					
ANR	34091	Callee	ZEND_MM_BLOCK		33376	0					
ANR	34092	Identifier	ZEND_MM_BLOCK		33376	0					
ANR	34093	ArgumentList	new_free_block		33376	1					
ANR	34094	Argument	new_free_block		33376	0					
ANR	34095	Identifier	new_free_block		33376	0					
ANR	34096	Argument	ZEND_MM_FREE_BLOCK		33376	1					
ANR	34097	Identifier	ZEND_MM_FREE_BLOCK		33376	0					
ANR	34098	Argument	remaining_size		33376	2					
ANR	34099	Identifier	remaining_size		33376	0					
ANR	34100	IfStatement	if ( EXPECTED ( ! keep_rest ) )		33376	4					
ANR	34101	Condition	EXPECTED ( ! keep_rest )	2040:6:57953:57972	33376	0	True				
ANR	34102	CallExpression	EXPECTED ( ! keep_rest )		33376	0					
ANR	34103	Callee	EXPECTED		33376	0					
ANR	34104	Identifier	EXPECTED		33376	0					
ANR	34105	ArgumentList	! keep_rest		33376	1					
ANR	34106	Argument	! keep_rest		33376	0					
ANR	34107	UnaryOperationExpression	! keep_rest		33376	0					
ANR	34108	UnaryOperator	!		33376	0					
ANR	34109	Identifier	keep_rest		33376	1					
ANR	34110	CompoundStatement		160:28:4942:4942	33376	1					
ANR	34111	ExpressionStatement	"zend_mm_add_to_free_list ( heap , new_free_block )"	2041:3:57980:58026	33376	0	True				
ANR	34112	CallExpression	"zend_mm_add_to_free_list ( heap , new_free_block )"		33376	0					
ANR	34113	Callee	zend_mm_add_to_free_list		33376	0					
ANR	34114	Identifier	zend_mm_add_to_free_list		33376	0					
ANR	34115	ArgumentList	heap		33376	1					
ANR	34116	Argument	heap		33376	0					
ANR	34117	Identifier	heap		33376	0					
ANR	34118	Argument	new_free_block		33376	1					
ANR	34119	Identifier	new_free_block		33376	0					
ANR	34120	ElseStatement	else		33376	0					
ANR	34121	CompoundStatement		162:9:5004:5004	33376	0					
ANR	34122	ExpressionStatement	"zend_mm_add_to_rest_list ( heap , new_free_block )"	2043:3:58042:58088	33376	0	True				
ANR	34123	CallExpression	"zend_mm_add_to_rest_list ( heap , new_free_block )"		33376	0					
ANR	34124	Callee	zend_mm_add_to_rest_list		33376	0					
ANR	34125	Identifier	zend_mm_add_to_rest_list		33376	0					
ANR	34126	ArgumentList	heap		33376	1					
ANR	34127	Argument	heap		33376	0					
ANR	34128	Identifier	heap		33376	0					
ANR	34129	Argument	new_free_block		33376	1					
ANR	34130	Identifier	new_free_block		33376	0					
ANR	34131	ExpressionStatement	"ZEND_MM_SET_DEBUG_INFO ( best_fit , size , 1 , 1 )"	2047:1:58099:58143	33376	16	True				
ANR	34132	CallExpression	"ZEND_MM_SET_DEBUG_INFO ( best_fit , size , 1 , 1 )"		33376	0					
ANR	34133	Callee	ZEND_MM_SET_DEBUG_INFO		33376	0					
ANR	34134	Identifier	ZEND_MM_SET_DEBUG_INFO		33376	0					
ANR	34135	ArgumentList	best_fit		33376	1					
ANR	34136	Argument	best_fit		33376	0					
ANR	34137	Identifier	best_fit		33376	0					
ANR	34138	Argument	size		33376	1					
ANR	34139	Identifier	size		33376	0					
ANR	34140	Argument	1		33376	2					
ANR	34141	PrimaryExpression	1		33376	0					
ANR	34142	Argument	1		33376	3					
ANR	34143	PrimaryExpression	1		33376	0					
ANR	34144	ExpressionStatement	heap -> size += true_size	2049:1:58147:58170	33376	17	True				
ANR	34145	AssignmentExpression	heap -> size += true_size		33376	0		+=			
ANR	34146	PtrMemberAccess	heap -> size		33376	0					
ANR	34147	Identifier	heap		33376	0					
ANR	34148	Identifier	size		33376	1					
ANR	34149	Identifier	true_size		33376	1					
ANR	34150	IfStatement	if ( heap -> peak < heap -> size )		33376	18					
ANR	34151	Condition	heap -> peak < heap -> size	2050:5:58177:58199	33376	0	True				
ANR	34152	RelationalExpression	heap -> peak < heap -> size		33376	0		<			
ANR	34153	PtrMemberAccess	heap -> peak		33376	0					
ANR	34154	Identifier	heap		33376	0					
ANR	34155	Identifier	peak		33376	1					
ANR	34156	PtrMemberAccess	heap -> size		33376	1					
ANR	34157	Identifier	heap		33376	0					
ANR	34158	Identifier	size		33376	1					
ANR	34159	CompoundStatement		170:30:5169:5169	33376	1					
ANR	34160	ExpressionStatement	heap -> peak = heap -> size	2051:2:58206:58229	33376	0	True				
ANR	34161	AssignmentExpression	heap -> peak = heap -> size		33376	0		=			
ANR	34162	PtrMemberAccess	heap -> peak		33376	0					
ANR	34163	Identifier	heap		33376	0					
ANR	34164	Identifier	peak		33376	1					
ANR	34165	PtrMemberAccess	heap -> size		33376	1					
ANR	34166	Identifier	heap		33376	0					
ANR	34167	Identifier	size		33376	1					
ANR	34168	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2054:1:58236:58266	33376	19	True				
ANR	34169	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		33376	0					
ANR	34170	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		33376	0					
ANR	34171	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		33376	0					
ANR	34172	ArgumentList			33376	1					
ANR	34173	ReturnStatement	return ZEND_MM_DATA_OF ( best_fit ) ;	2056:1:58270:58302	33376	20	True				
ANR	34174	CallExpression	ZEND_MM_DATA_OF ( best_fit )		33376	0					
ANR	34175	Callee	ZEND_MM_DATA_OF		33376	0					
ANR	34176	Identifier	ZEND_MM_DATA_OF		33376	0					
ANR	34177	ArgumentList	best_fit		33376	1					
ANR	34178	Argument	best_fit		33376	0					
ANR	34179	Identifier	best_fit		33376	0					
ANR	34180	ReturnType	static void *		33376	1					
ANR	34181	Identifier	_zend_mm_alloc_int		33376	2					
ANR	34182	ParameterList	"zend_mm_heap * heap , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		33376	3					
ANR	34183	Parameter	zend_mm_heap * heap	1880:32:52958:52975	33376	0	True				
ANR	34184	ParameterType	zend_mm_heap *		33376	0					
ANR	34185	Identifier	heap		33376	1					
ANR	34186	Parameter	size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	1880:52:52978:53029	33376	1	True				
ANR	34187	ParameterType	size_t size ZEND_FILE_LINE_DC		33376	0					
ANR	34188	Identifier	ZEND_FILE_LINE_ORIG_DC		33376	1					
ANR	34189	CFGEntryNode	ENTRY		33376		True				
ANR	34190	CFGExitNode	EXIT		33376		True				
ANR	34191	Symbol	* * heap		33376						
ANR	34192	Symbol	MEM_BLOCK_FREED		33376						
ANR	34193	Symbol	* best_fit		33376						
ANR	34194	Symbol	heap -> cache_stat [ index ] . hit		33376						
ANR	34195	Symbol	heap -> free_bitmap		33376						
ANR	34196	Symbol	* index		33376						
ANR	34197	Symbol	heap -> block_size		33376						
ANR	34198	Symbol	segment		33376						
ANR	34199	Symbol	bitmap		33376						
ANR	34200	Symbol	heap -> cached		33376						
ANR	34201	Symbol	keep_rest		33376						
ANR	34202	Symbol	* heap -> free_buckets		33376						
ANR	34203	Symbol	ZEND_MM_TRUE_SIZE		33376						
ANR	34204	Symbol	NULL		33376						
ANR	34205	Symbol	best_size		33376						
ANR	34206	Symbol	__zend_lineno		33376						
ANR	34207	Symbol	heap -> real_size		33376						
ANR	34208	Symbol	p -> prev_free_block		33376						
ANR	34209	Symbol	index		33376						
ANR	34210	Symbol	heap -> cache_stat		33376						
ANR	34211	Symbol	ZEND_MM_NUM_BUCKETS		33376						
ANR	34212	Symbol	heap -> peak		33376						
ANR	34213	Symbol	size		33376						
ANR	34214	Symbol	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . hit		33376						
ANR	34215	Symbol	* heap -> rest_buckets		33376						
ANR	34216	Symbol	segment -> size		33376						
ANR	34217	Symbol	ZEND_MM_DATA_OF		33376						
ANR	34218	Symbol	* segment		33376						
ANR	34219	Symbol	* heap -> cache_stat		33376						
ANR	34220	Symbol	zend_mm_low_bit		33376						
ANR	34221	Symbol	heap -> cache		33376						
ANR	34222	Symbol	* heap		33376						
ANR	34223	Symbol	zend_mm_search_large_block		33376						
ANR	34224	Symbol	heap -> cache_stat [ index ] . count		33376						
ANR	34225	Symbol	heap -> real_peak		33376						
ANR	34226	Symbol	ZEND_FILE_LINE_ORIG_DC		33376						
ANR	34227	Symbol	ZEND_MM_FREE_BLOCK		33376						
ANR	34228	Symbol	UNEXPECTED		33376						
ANR	34229	Symbol	best_fit -> prev_free_block		33376						
ANR	34230	Symbol	ZEND_MM_USED_BLOCK		33376						
ANR	34231	Symbol	heap -> size		33376						
ANR	34232	Symbol	segment_size		33376						
ANR	34233	Symbol	heap -> cache_stat [ ZEND_MM_NUM_BUCKETS ] . miss		33376						
ANR	34234	Symbol	ZEND_MM_ALIGNED_HEADER_SIZE		33376						
ANR	34235	Symbol	__zend_filename		33376						
ANR	34236	Symbol	ZEND_MM_REST_BUCKET		33376						
ANR	34237	Symbol	ZEND_MM_FREE_BLOCK_SIZE		33376						
ANR	34238	Symbol	true_size		33376						
ANR	34239	Symbol	heap		33376						
ANR	34240	Symbol	block_size		33376						
ANR	34241	Symbol	heap -> free_buckets		33376						
ANR	34242	Symbol	ZEND_MM_BUCKET_INDEX		33376						
ANR	34243	Symbol	* heap -> cache		33376						
ANR	34244	Symbol	best_fit		33376						
ANR	34245	Symbol	heap -> cache_stat [ index ] . miss		33376						
ANR	34246	Symbol	ZEND_MM_STORAGE_ALLOC		33376						
ANR	34247	Symbol	* ZEND_MM_NUM_BUCKETS		33376						
ANR	34248	Symbol	remaining_size		33376						
ANR	34249	Symbol	ZEND_MM_BLOCK_AT		33376						
ANR	34250	Symbol	p		33376						
ANR	34251	Symbol	heap -> rest_buckets		33376						
ANR	34252	Symbol	MEM_BLOCK_CACHED		33376						
ANR	34253	Symbol	new_free_block		33376						
ANR	34254	Symbol	ZEND_MM_SMALL_SIZE		33376						
ANR	34255	Symbol	ZEND_MM_ALIGNED_SEGMENT_SIZE		33376						
ANR	34256	Symbol	heap -> segments_list		33376						
ANR	34257	Symbol	* p		33376						
ANR	34258	Symbol	EXPECTED		33376						
ANR	34259	Symbol	heap -> limit		33376						
ANR	34260	Symbol	segment -> next_segment		33376						
ANR	34261	Symbol	ZEND_MM_ALIGNED_MIN_HEADER_SIZE		33376						
ANR	34262	DeclStmt									
ANR	34263	Decl							zend_mm_block	zend_mm_block *	mm_block
ANR	34264	DeclStmt									
ANR	34265	Decl							zend_mm_block	zend_mm_block *	next_block
ANR	34266	DeclStmt									
ANR	34267	Decl							size_t	size_t	size
ANR	34268	DeclStmt									
ANR	34269	Decl							size_t	size_t	index
ANR	34270	DeclStmt									
ANR	34271	Decl							zend_mm_free_block	zend_mm_free_block * *	cache
ANR	34272	Function	_zend_mm_realloc_int	2123:0:60259:68450							
ANR	34273	FunctionDef	"_zend_mm_realloc_int (zend_mm_heap * heap , void * p , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		34272	0					
ANR	34274	CompoundStatement		2124:0:60376:68450	34272	0					
ANR	34275	IdentifierDeclStatement	zend_mm_block * mm_block = ZEND_MM_HEADER_OF ( p ) ;	2125:1:60379:60425	34272	0	True				
ANR	34276	IdentifierDecl	* mm_block = ZEND_MM_HEADER_OF ( p )		34272	0					
ANR	34277	IdentifierDeclType	zend_mm_block *		34272	0					
ANR	34278	Identifier	mm_block		34272	1					
ANR	34279	AssignmentExpression	* mm_block = ZEND_MM_HEADER_OF ( p )		34272	2		=			
ANR	34280	Identifier	mm_block		34272	0					
ANR	34281	CallExpression	ZEND_MM_HEADER_OF ( p )		34272	1					
ANR	34282	Callee	ZEND_MM_HEADER_OF		34272	0					
ANR	34283	Identifier	ZEND_MM_HEADER_OF		34272	0					
ANR	34284	ArgumentList	p		34272	1					
ANR	34285	Argument	p		34272	0					
ANR	34286	Identifier	p		34272	0					
ANR	34287	IdentifierDeclStatement	zend_mm_block * next_block ;	2126:1:60428:60453	34272	1	True				
ANR	34288	IdentifierDecl	* next_block		34272	0					
ANR	34289	IdentifierDeclType	zend_mm_block *		34272	0					
ANR	34290	Identifier	next_block		34272	1					
ANR	34291	IdentifierDeclStatement	size_t true_size ;	2127:1:60456:60472	34272	2	True				
ANR	34292	IdentifierDecl	true_size		34272	0					
ANR	34293	IdentifierDeclType	size_t		34272	0					
ANR	34294	Identifier	true_size		34272	1					
ANR	34295	IdentifierDeclStatement	size_t orig_size ;	2128:1:60475:60491	34272	3	True				
ANR	34296	IdentifierDecl	orig_size		34272	0					
ANR	34297	IdentifierDeclType	size_t		34272	0					
ANR	34298	Identifier	orig_size		34272	1					
ANR	34299	IdentifierDeclStatement	void * ptr ;	2129:1:60494:60503	34272	4	True				
ANR	34300	IdentifierDecl	* ptr		34272	0					
ANR	34301	IdentifierDeclType	void *		34272	0					
ANR	34302	Identifier	ptr		34272	1					
ANR	34303	ExpressionStatement	TSRMLS_FETCH ( )	2131:1:60526:60540	34272	5	True				
ANR	34304	CallExpression	TSRMLS_FETCH ( )		34272	0					
ANR	34305	Callee	TSRMLS_FETCH		34272	0					
ANR	34306	Identifier	TSRMLS_FETCH		34272	0					
ANR	34307	ArgumentList			34272	1					
ANR	34308	IfStatement	if ( UNEXPECTED ( ! p ) || ! ZEND_MM_VALID_PTR ( p ) )		34272	6					
ANR	34309	Condition	UNEXPECTED ( ! p ) || ! ZEND_MM_VALID_PTR ( p )	2133:5:60554:60592	34272	0	True				
ANR	34310	OrExpression	UNEXPECTED ( ! p ) || ! ZEND_MM_VALID_PTR ( p )		34272	0		||			
ANR	34311	CallExpression	UNEXPECTED ( ! p )		34272	0					
ANR	34312	Callee	UNEXPECTED		34272	0					
ANR	34313	Identifier	UNEXPECTED		34272	0					
ANR	34314	ArgumentList	! p		34272	1					
ANR	34315	Argument	! p		34272	0					
ANR	34316	UnaryOperationExpression	! p		34272	0					
ANR	34317	UnaryOperator	!		34272	0					
ANR	34318	Identifier	p		34272	1					
ANR	34319	UnaryOperationExpression	! ZEND_MM_VALID_PTR ( p )		34272	1					
ANR	34320	UnaryOperator	!		34272	0					
ANR	34321	CallExpression	ZEND_MM_VALID_PTR ( p )		34272	1					
ANR	34322	Callee	ZEND_MM_VALID_PTR		34272	0					
ANR	34323	Identifier	ZEND_MM_VALID_PTR		34272	0					
ANR	34324	ArgumentList	p		34272	1					
ANR	34325	Argument	p		34272	0					
ANR	34326	Identifier	p		34272	0					
ANR	34327	CompoundStatement		10:46:218:218	34272	1					
ANR	34328	Statement	return	2134:2:60599:60604	34272	0	True				
ANR	34329	Statement	_zend_mm_alloc_int	2134:9:60606:60623	34272	1	True				
ANR	34330	Statement	(	2134:27:60624:60624	34272	2	True				
ANR	34331	Statement	heap	2134:28:60625:60628	34272	3	True				
ANR	34332	Statement	","	2134:32:60629:60629	34272	4	True				
ANR	34333	Statement	size	2134:34:60631:60634	34272	5	True				
ANR	34334	Statement	ZEND_FILE_LINE_RELAY_CC	2134:39:60636:60658	34272	6	True				
ANR	34335	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2134:63:60660:60687	34272	7	True				
ANR	34336	Statement	)	2134:91:60688:60688	34272	8	True				
ANR	34337	ExpressionStatement		2134:92:60689:60689	34272	9	True				
ANR	34338	ExpressionStatement	HANDLE_BLOCK_INTERRUPTIONS ( )	2137:1:60696:60724	34272	7	True				
ANR	34339	CallExpression	HANDLE_BLOCK_INTERRUPTIONS ( )		34272	0					
ANR	34340	Callee	HANDLE_BLOCK_INTERRUPTIONS		34272	0					
ANR	34341	Identifier	HANDLE_BLOCK_INTERRUPTIONS		34272	0					
ANR	34342	ArgumentList			34272	1					
ANR	34343	ExpressionStatement	mm_block = ZEND_MM_HEADER_OF ( p )	2139:1:60728:60759	34272	8	True				
ANR	34344	AssignmentExpression	mm_block = ZEND_MM_HEADER_OF ( p )		34272	0		=			
ANR	34345	Identifier	mm_block		34272	0					
ANR	34346	CallExpression	ZEND_MM_HEADER_OF ( p )		34272	1					
ANR	34347	Callee	ZEND_MM_HEADER_OF		34272	0					
ANR	34348	Identifier	ZEND_MM_HEADER_OF		34272	0					
ANR	34349	ArgumentList	p		34272	1					
ANR	34350	Argument	p		34272	0					
ANR	34351	Identifier	p		34272	0					
ANR	34352	ExpressionStatement	true_size = ZEND_MM_TRUE_SIZE ( size )	2140:1:60762:60797	34272	9	True				
ANR	34353	AssignmentExpression	true_size = ZEND_MM_TRUE_SIZE ( size )		34272	0		=			
ANR	34354	Identifier	true_size		34272	0					
ANR	34355	CallExpression	ZEND_MM_TRUE_SIZE ( size )		34272	1					
ANR	34356	Callee	ZEND_MM_TRUE_SIZE		34272	0					
ANR	34357	Identifier	ZEND_MM_TRUE_SIZE		34272	0					
ANR	34358	ArgumentList	size		34272	1					
ANR	34359	Argument	size		34272	0					
ANR	34360	Identifier	size		34272	0					
ANR	34361	ExpressionStatement	orig_size = ZEND_MM_BLOCK_SIZE ( mm_block )	2141:1:60800:60840	34272	10	True				
ANR	34362	AssignmentExpression	orig_size = ZEND_MM_BLOCK_SIZE ( mm_block )		34272	0		=			
ANR	34363	Identifier	orig_size		34272	0					
ANR	34364	CallExpression	ZEND_MM_BLOCK_SIZE ( mm_block )		34272	1					
ANR	34365	Callee	ZEND_MM_BLOCK_SIZE		34272	0					
ANR	34366	Identifier	ZEND_MM_BLOCK_SIZE		34272	0					
ANR	34367	ArgumentList	mm_block		34272	1					
ANR	34368	Argument	mm_block		34272	0					
ANR	34369	Identifier	mm_block		34272	0					
ANR	34370	ExpressionStatement	ZEND_MM_CHECK_PROTECTION ( mm_block )	2142:1:60843:60877	34272	11	True				
ANR	34371	CallExpression	ZEND_MM_CHECK_PROTECTION ( mm_block )		34272	0					
ANR	34372	Callee	ZEND_MM_CHECK_PROTECTION		34272	0					
ANR	34373	Identifier	ZEND_MM_CHECK_PROTECTION		34272	0					
ANR	34374	ArgumentList	mm_block		34272	1					
ANR	34375	Argument	mm_block		34272	0					
ANR	34376	Identifier	mm_block		34272	0					
ANR	34377	IfStatement	if ( UNEXPECTED ( true_size < size ) )		34272	12					
ANR	34378	Condition	UNEXPECTED ( true_size < size )	2144:5:60885:60912	34272	0	True				
ANR	34379	CallExpression	UNEXPECTED ( true_size < size )		34272	0					
ANR	34380	Callee	UNEXPECTED		34272	0					
ANR	34381	Identifier	UNEXPECTED		34272	0					
ANR	34382	ArgumentList	true_size < size		34272	1					
ANR	34383	Argument	true_size < size		34272	0					
ANR	34384	RelationalExpression	true_size < size		34272	0		<			
ANR	34385	Identifier	true_size		34272	0					
ANR	34386	Identifier	size		34272	1					
ANR	34387	CompoundStatement		21:35:538:538	34272	1					
ANR	34388	GotoStatement	goto out_of_memory ;	2145:2:60919:60937	34272	0	True				
ANR	34389	Identifier	out_of_memory		34272	0					
ANR	34390	IfStatement	if ( true_size <= orig_size )		34272	13					
ANR	34391	Condition	true_size <= orig_size	2148:5:60948:60969	34272	0	True				
ANR	34392	RelationalExpression	true_size <= orig_size		34272	0		<=			
ANR	34393	Identifier	true_size		34272	0					
ANR	34394	Identifier	orig_size		34272	1					
ANR	34395	CompoundStatement		26:2:599:644	34272	1					
ANR	34396	IdentifierDeclStatement	size_t remaining_size = orig_size - true_size ;	2149:2:60976:61021	34272	0	True				
ANR	34397	IdentifierDecl	remaining_size = orig_size - true_size		34272	0					
ANR	34398	IdentifierDeclType	size_t		34272	0					
ANR	34399	Identifier	remaining_size		34272	1					
ANR	34400	AssignmentExpression	remaining_size = orig_size - true_size		34272	2		=			
ANR	34401	Identifier	remaining_size		34272	0					
ANR	34402	AdditiveExpression	orig_size - true_size		34272	1		-			
ANR	34403	Identifier	orig_size		34272	0					
ANR	34404	Identifier	true_size		34272	1					
ANR	34405	IfStatement	if ( remaining_size >= ZEND_MM_ALIGNED_MIN_HEADER_SIZE )		34272	1					
ANR	34406	Condition	remaining_size >= ZEND_MM_ALIGNED_MIN_HEADER_SIZE	2151:6:61030:61078	34272	0	True				
ANR	34407	RelationalExpression	remaining_size >= ZEND_MM_ALIGNED_MIN_HEADER_SIZE		34272	0		>=			
ANR	34408	Identifier	remaining_size		34272	0					
ANR	34409	Identifier	ZEND_MM_ALIGNED_MIN_HEADER_SIZE		34272	1					
ANR	34410	CompoundStatement		29:3:709:743	34272	1					
ANR	34411	IdentifierDeclStatement	zend_mm_free_block * new_free_block ;	2152:3:61086:61120	34272	0	True				
ANR	34412	IdentifierDecl	* new_free_block		34272	0					
ANR	34413	IdentifierDeclType	zend_mm_free_block *		34272	0					
ANR	34414	Identifier	new_free_block		34272	1					
ANR	34415	ExpressionStatement	"next_block = ZEND_MM_BLOCK_AT ( mm_block , orig_size )"	2154:3:61126:61176	34272	1	True				
ANR	34416	AssignmentExpression	"next_block = ZEND_MM_BLOCK_AT ( mm_block , orig_size )"		34272	0		=			
ANR	34417	Identifier	next_block		34272	0					
ANR	34418	CallExpression	"ZEND_MM_BLOCK_AT ( mm_block , orig_size )"		34272	1					
ANR	34419	Callee	ZEND_MM_BLOCK_AT		34272	0					
ANR	34420	Identifier	ZEND_MM_BLOCK_AT		34272	0					
ANR	34421	ArgumentList	mm_block		34272	1					
ANR	34422	Argument	mm_block		34272	0					
ANR	34423	Identifier	mm_block		34272	0					
ANR	34424	Argument	orig_size		34272	1					
ANR	34425	Identifier	orig_size		34272	0					
ANR	34426	IfStatement	if ( ZEND_MM_IS_FREE_BLOCK ( next_block ) )		34272	2					
ANR	34427	Condition	ZEND_MM_IS_FREE_BLOCK ( next_block )	2155:7:61185:61217	34272	0	True				
ANR	34428	CallExpression	ZEND_MM_IS_FREE_BLOCK ( next_block )		34272	0					
ANR	34429	Callee	ZEND_MM_IS_FREE_BLOCK		34272	0					
ANR	34430	Identifier	ZEND_MM_IS_FREE_BLOCK		34272	0					
ANR	34431	ArgumentList	next_block		34272	1					
ANR	34432	Argument	next_block		34272	0					
ANR	34433	Identifier	next_block		34272	0					
ANR	34434	CompoundStatement		32:42:843:843	34272	1					
ANR	34435	ExpressionStatement	remaining_size += ZEND_MM_FREE_BLOCK_SIZE ( next_block )	2156:4:61226:61279	34272	0	True				
ANR	34436	AssignmentExpression	remaining_size += ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	0		+=			
ANR	34437	Identifier	remaining_size		34272	0					
ANR	34438	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	1					
ANR	34439	Callee	ZEND_MM_FREE_BLOCK_SIZE		34272	0					
ANR	34440	Identifier	ZEND_MM_FREE_BLOCK_SIZE		34272	0					
ANR	34441	ArgumentList	next_block		34272	1					
ANR	34442	Argument	next_block		34272	0					
ANR	34443	Identifier	next_block		34272	0					
ANR	34444	ExpressionStatement	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) next_block )"	2157:4:61285:61355	34272	1	True				
ANR	34445	CallExpression	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) next_block )"		34272	0					
ANR	34446	Callee	zend_mm_remove_from_free_list		34272	0					
ANR	34447	Identifier	zend_mm_remove_from_free_list		34272	0					
ANR	34448	ArgumentList	heap		34272	1					
ANR	34449	Argument	heap		34272	0					
ANR	34450	Identifier	heap		34272	0					
ANR	34451	Argument	( zend_mm_free_block * ) next_block		34272	1					
ANR	34452	CastExpression	( zend_mm_free_block * ) next_block		34272	0					
ANR	34453	CastTarget	zend_mm_free_block *		34272	0					
ANR	34454	Identifier	next_block		34272	1					
ANR	34455	ExpressionStatement	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"	2161:3:61398:61452	34272	3	True				
ANR	34456	CallExpression	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"		34272	0					
ANR	34457	Callee	ZEND_MM_BLOCK		34272	0					
ANR	34458	Identifier	ZEND_MM_BLOCK		34272	0					
ANR	34459	ArgumentList	mm_block		34272	1					
ANR	34460	Argument	mm_block		34272	0					
ANR	34461	Identifier	mm_block		34272	0					
ANR	34462	Argument	ZEND_MM_USED_BLOCK		34272	1					
ANR	34463	Identifier	ZEND_MM_USED_BLOCK		34272	0					
ANR	34464	Argument	true_size		34272	2					
ANR	34465	Identifier	true_size		34272	0					
ANR	34466	ExpressionStatement	"new_free_block = ( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( mm_block , true_size )"	2162:3:61457:61534	34272	4	True				
ANR	34467	AssignmentExpression	"new_free_block = ( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( mm_block , true_size )"		34272	0		=			
ANR	34468	Identifier	new_free_block		34272	0					
ANR	34469	CastExpression	"( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( mm_block , true_size )"		34272	1					
ANR	34470	CastTarget	zend_mm_free_block *		34272	0					
ANR	34471	CallExpression	"ZEND_MM_BLOCK_AT ( mm_block , true_size )"		34272	1					
ANR	34472	Callee	ZEND_MM_BLOCK_AT		34272	0					
ANR	34473	Identifier	ZEND_MM_BLOCK_AT		34272	0					
ANR	34474	ArgumentList	mm_block		34272	1					
ANR	34475	Argument	mm_block		34272	0					
ANR	34476	Identifier	mm_block		34272	0					
ANR	34477	Argument	true_size		34272	1					
ANR	34478	Identifier	true_size		34272	0					
ANR	34479	ExpressionStatement	"ZEND_MM_BLOCK ( new_free_block , ZEND_MM_FREE_BLOCK , remaining_size )"	2164:3:61540:61605	34272	5	True				
ANR	34480	CallExpression	"ZEND_MM_BLOCK ( new_free_block , ZEND_MM_FREE_BLOCK , remaining_size )"		34272	0					
ANR	34481	Callee	ZEND_MM_BLOCK		34272	0					
ANR	34482	Identifier	ZEND_MM_BLOCK		34272	0					
ANR	34483	ArgumentList	new_free_block		34272	1					
ANR	34484	Argument	new_free_block		34272	0					
ANR	34485	Identifier	new_free_block		34272	0					
ANR	34486	Argument	ZEND_MM_FREE_BLOCK		34272	1					
ANR	34487	Identifier	ZEND_MM_FREE_BLOCK		34272	0					
ANR	34488	Argument	remaining_size		34272	2					
ANR	34489	Identifier	remaining_size		34272	0					
ANR	34490	ExpressionStatement	"zend_mm_add_to_free_list ( heap , new_free_block )"	2167:3:61660:61706	34272	6	True				
ANR	34491	CallExpression	"zend_mm_add_to_free_list ( heap , new_free_block )"		34272	0					
ANR	34492	Callee	zend_mm_add_to_free_list		34272	0					
ANR	34493	Identifier	zend_mm_add_to_free_list		34272	0					
ANR	34494	ArgumentList	heap		34272	1					
ANR	34495	Argument	heap		34272	0					
ANR	34496	Identifier	heap		34272	0					
ANR	34497	Argument	new_free_block		34272	1					
ANR	34498	Identifier	new_free_block		34272	0					
ANR	34499	ExpressionStatement	heap -> size += ( true_size - orig_size )	2168:3:61711:61748	34272	7	True				
ANR	34500	AssignmentExpression	heap -> size += ( true_size - orig_size )		34272	0		+=			
ANR	34501	PtrMemberAccess	heap -> size		34272	0					
ANR	34502	Identifier	heap		34272	0					
ANR	34503	Identifier	size		34272	1					
ANR	34504	AdditiveExpression	true_size - orig_size		34272	1		-			
ANR	34505	Identifier	true_size		34272	0					
ANR	34506	Identifier	orig_size		34272	1					
ANR	34507	ExpressionStatement	"ZEND_MM_SET_DEBUG_INFO ( mm_block , size , 0 , 0 )"	2170:2:61756:61800	34272	2	True				
ANR	34508	CallExpression	"ZEND_MM_SET_DEBUG_INFO ( mm_block , size , 0 , 0 )"		34272	0					
ANR	34509	Callee	ZEND_MM_SET_DEBUG_INFO		34272	0					
ANR	34510	Identifier	ZEND_MM_SET_DEBUG_INFO		34272	0					
ANR	34511	ArgumentList	mm_block		34272	1					
ANR	34512	Argument	mm_block		34272	0					
ANR	34513	Identifier	mm_block		34272	0					
ANR	34514	Argument	size		34272	1					
ANR	34515	Identifier	size		34272	0					
ANR	34516	Argument	0		34272	2					
ANR	34517	PrimaryExpression	0		34272	0					
ANR	34518	Argument	0		34272	3					
ANR	34519	PrimaryExpression	0		34272	0					
ANR	34520	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2171:2:61804:61834	34272	3	True				
ANR	34521	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		34272	0					
ANR	34522	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	34523	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	34524	ArgumentList			34272	1					
ANR	34525	ReturnStatement	return p ;	2172:2:61838:61846	34272	4	True				
ANR	34526	Identifier	p		34272	0					
ANR	34527	IfStatement	if ( ZEND_MM_SMALL_SIZE ( true_size ) )		34272	14					
ANR	34528	Condition	ZEND_MM_SMALL_SIZE ( true_size )	2176:5:61875:61903	34272	0	True				
ANR	34529	CallExpression	ZEND_MM_SMALL_SIZE ( true_size )		34272	0					
ANR	34530	Callee	ZEND_MM_SMALL_SIZE		34272	0					
ANR	34531	Identifier	ZEND_MM_SMALL_SIZE		34272	0					
ANR	34532	ArgumentList	true_size		34272	1					
ANR	34533	Argument	true_size		34272	0					
ANR	34534	Identifier	true_size		34272	0					
ANR	34535	CompoundStatement		54:2:1533:1579	34272	1					
ANR	34536	IdentifierDeclStatement	size_t index = ZEND_MM_BUCKET_INDEX ( true_size ) ;	2177:2:61910:61956	34272	0	True				
ANR	34537	IdentifierDecl	index = ZEND_MM_BUCKET_INDEX ( true_size )		34272	0					
ANR	34538	IdentifierDeclType	size_t		34272	0					
ANR	34539	Identifier	index		34272	1					
ANR	34540	AssignmentExpression	index = ZEND_MM_BUCKET_INDEX ( true_size )		34272	2		=			
ANR	34541	Identifier	index		34272	0					
ANR	34542	CallExpression	ZEND_MM_BUCKET_INDEX ( true_size )		34272	1					
ANR	34543	Callee	ZEND_MM_BUCKET_INDEX		34272	0					
ANR	34544	Identifier	ZEND_MM_BUCKET_INDEX		34272	0					
ANR	34545	ArgumentList	true_size		34272	1					
ANR	34546	Argument	true_size		34272	0					
ANR	34547	Identifier	true_size		34272	0					
ANR	34548	IfStatement	if ( heap -> cache [ index ] != NULL )		34272	1					
ANR	34549	Condition	heap -> cache [ index ] != NULL	2179:6:61965:61990	34272	0	True				
ANR	34550	EqualityExpression	heap -> cache [ index ] != NULL		34272	0		!=			
ANR	34551	ArrayIndexing	heap -> cache [ index ]		34272	0					
ANR	34552	PtrMemberAccess	heap -> cache		34272	0					
ANR	34553	Identifier	heap		34272	0					
ANR	34554	Identifier	cache		34272	1					
ANR	34555	Identifier	index		34272	1					
ANR	34556	Identifier	NULL		34272	1					
ANR	34557	CompoundStatement		58:3:1654:1680	34272	1					
ANR	34558	IdentifierDeclStatement	zend_mm_free_block * best_fit ;	2180:3:61998:62026	34272	0	True				
ANR	34559	IdentifierDecl	* best_fit		34272	0					
ANR	34560	IdentifierDeclType	zend_mm_free_block *		34272	0					
ANR	34561	Identifier	best_fit		34272	1					
ANR	34562	IdentifierDeclStatement	zend_mm_free_block * * cache ;	2181:3:62031:62057	34272	1	True				
ANR	34563	IdentifierDecl	* * cache		34272	0					
ANR	34564	IdentifierDeclType	zend_mm_free_block * *		34272	0					
ANR	34565	Identifier	cache		34272	1					
ANR	34566	ExpressionStatement	heap -> cache_stat [ index ] . count --	2184:3:62086:62117	34272	2	True				
ANR	34567	PostIncDecOperationExpression	heap -> cache_stat [ index ] . count --		34272	0					
ANR	34568	MemberAccess	heap -> cache_stat [ index ] . count		34272	0					
ANR	34569	ArrayIndexing	heap -> cache_stat [ index ]		34272	0					
ANR	34570	PtrMemberAccess	heap -> cache_stat		34272	0					
ANR	34571	Identifier	heap		34272	0					
ANR	34572	Identifier	cache_stat		34272	1					
ANR	34573	Identifier	index		34272	1					
ANR	34574	Identifier	count		34272	1					
ANR	34575	IncDec	--		34272	1					
ANR	34576	ExpressionStatement	heap -> cache_stat [ index ] . hit ++	2185:3:62122:62151	34272	3	True				
ANR	34577	PostIncDecOperationExpression	heap -> cache_stat [ index ] . hit ++		34272	0					
ANR	34578	MemberAccess	heap -> cache_stat [ index ] . hit		34272	0					
ANR	34579	ArrayIndexing	heap -> cache_stat [ index ]		34272	0					
ANR	34580	PtrMemberAccess	heap -> cache_stat		34272	0					
ANR	34581	Identifier	heap		34272	0					
ANR	34582	Identifier	cache_stat		34272	1					
ANR	34583	Identifier	index		34272	1					
ANR	34584	Identifier	hit		34272	1					
ANR	34585	IncDec	++		34272	1					
ANR	34586	ExpressionStatement	best_fit = heap -> cache [ index ]	2187:3:62163:62192	34272	4	True				
ANR	34587	AssignmentExpression	best_fit = heap -> cache [ index ]		34272	0		=			
ANR	34588	Identifier	best_fit		34272	0					
ANR	34589	ArrayIndexing	heap -> cache [ index ]		34272	1					
ANR	34590	PtrMemberAccess	heap -> cache		34272	0					
ANR	34591	Identifier	heap		34272	0					
ANR	34592	Identifier	cache		34272	1					
ANR	34593	Identifier	index		34272	1					
ANR	34594	ExpressionStatement	heap -> cache [ index ] = best_fit -> prev_free_block	2188:3:62197:62243	34272	5	True				
ANR	34595	AssignmentExpression	heap -> cache [ index ] = best_fit -> prev_free_block		34272	0		=			
ANR	34596	ArrayIndexing	heap -> cache [ index ]		34272	0					
ANR	34597	PtrMemberAccess	heap -> cache		34272	0					
ANR	34598	Identifier	heap		34272	0					
ANR	34599	Identifier	cache		34272	1					
ANR	34600	Identifier	index		34272	1					
ANR	34601	PtrMemberAccess	best_fit -> prev_free_block		34272	1					
ANR	34602	Identifier	best_fit		34272	0					
ANR	34603	Identifier	prev_free_block		34272	1					
ANR	34604	ExpressionStatement	"ZEND_MM_CHECK_MAGIC ( best_fit , MEM_BLOCK_CACHED )"	2189:3:62248:62295	34272	6	True				
ANR	34605	CallExpression	"ZEND_MM_CHECK_MAGIC ( best_fit , MEM_BLOCK_CACHED )"		34272	0					
ANR	34606	Callee	ZEND_MM_CHECK_MAGIC		34272	0					
ANR	34607	Identifier	ZEND_MM_CHECK_MAGIC		34272	0					
ANR	34608	ArgumentList	best_fit		34272	1					
ANR	34609	Argument	best_fit		34272	0					
ANR	34610	Identifier	best_fit		34272	0					
ANR	34611	Argument	MEM_BLOCK_CACHED		34272	1					
ANR	34612	Identifier	MEM_BLOCK_CACHED		34272	0					
ANR	34613	ExpressionStatement	"ZEND_MM_SET_DEBUG_INFO ( best_fit , size , 1 , 0 )"	2190:3:62300:62344	34272	7	True				
ANR	34614	CallExpression	"ZEND_MM_SET_DEBUG_INFO ( best_fit , size , 1 , 0 )"		34272	0					
ANR	34615	Callee	ZEND_MM_SET_DEBUG_INFO		34272	0					
ANR	34616	Identifier	ZEND_MM_SET_DEBUG_INFO		34272	0					
ANR	34617	ArgumentList	best_fit		34272	1					
ANR	34618	Argument	best_fit		34272	0					
ANR	34619	Identifier	best_fit		34272	0					
ANR	34620	Argument	size		34272	1					
ANR	34621	Identifier	size		34272	0					
ANR	34622	Argument	1		34272	2					
ANR	34623	PrimaryExpression	1		34272	0					
ANR	34624	Argument	0		34272	3					
ANR	34625	PrimaryExpression	0		34272	0					
ANR	34626	ExpressionStatement	ptr = ZEND_MM_DATA_OF ( best_fit )	2192:3:62350:62381	34272	8	True				
ANR	34627	AssignmentExpression	ptr = ZEND_MM_DATA_OF ( best_fit )		34272	0		=			
ANR	34628	Identifier	ptr		34272	0					
ANR	34629	CallExpression	ZEND_MM_DATA_OF ( best_fit )		34272	1					
ANR	34630	Callee	ZEND_MM_DATA_OF		34272	0					
ANR	34631	Identifier	ZEND_MM_DATA_OF		34272	0					
ANR	34632	ArgumentList	best_fit		34272	1					
ANR	34633	Argument	best_fit		34272	0					
ANR	34634	Identifier	best_fit		34272	0					
ANR	34635	ExpressionStatement	"memcpy ( ptr , p , mm_block -> debug . size )"	2195:3:62429:62465	34272	9	True				
ANR	34636	CallExpression	"memcpy ( ptr , p , mm_block -> debug . size )"		34272	0					
ANR	34637	Callee	memcpy		34272	0					
ANR	34638	Identifier	memcpy		34272	0					
ANR	34639	ArgumentList	ptr		34272	1					
ANR	34640	Argument	ptr		34272	0					
ANR	34641	Identifier	ptr		34272	0					
ANR	34642	Argument	p		34272	1					
ANR	34643	Identifier	p		34272	0					
ANR	34644	Argument	mm_block -> debug . size		34272	2					
ANR	34645	MemberAccess	mm_block -> debug . size		34272	0					
ANR	34646	PtrMemberAccess	mm_block -> debug		34272	0					
ANR	34647	Identifier	mm_block		34272	0					
ANR	34648	Identifier	debug		34272	1					
ANR	34649	Identifier	size		34272	1					
ANR	34650	ExpressionStatement	heap -> cached -= true_size - orig_size	2200:3:62544:62581	34272	10	True				
ANR	34651	AssignmentExpression	heap -> cached -= true_size - orig_size		34272	0		-=			
ANR	34652	PtrMemberAccess	heap -> cached		34272	0					
ANR	34653	Identifier	heap		34272	0					
ANR	34654	Identifier	cached		34272	1					
ANR	34655	AdditiveExpression	true_size - orig_size		34272	1		-			
ANR	34656	Identifier	true_size		34272	0					
ANR	34657	Identifier	orig_size		34272	1					
ANR	34658	ExpressionStatement	index = ZEND_MM_BUCKET_INDEX ( orig_size )	2202:3:62587:62626	34272	11	True				
ANR	34659	AssignmentExpression	index = ZEND_MM_BUCKET_INDEX ( orig_size )		34272	0		=			
ANR	34660	Identifier	index		34272	0					
ANR	34661	CallExpression	ZEND_MM_BUCKET_INDEX ( orig_size )		34272	1					
ANR	34662	Callee	ZEND_MM_BUCKET_INDEX		34272	0					
ANR	34663	Identifier	ZEND_MM_BUCKET_INDEX		34272	0					
ANR	34664	ArgumentList	orig_size		34272	1					
ANR	34665	Argument	orig_size		34272	0					
ANR	34666	Identifier	orig_size		34272	0					
ANR	34667	ExpressionStatement	cache = & heap -> cache [ index ]	2203:3:62631:62658	34272	12	True				
ANR	34668	AssignmentExpression	cache = & heap -> cache [ index ]		34272	0		=			
ANR	34669	Identifier	cache		34272	0					
ANR	34670	UnaryOperationExpression	& heap -> cache [ index ]		34272	1					
ANR	34671	UnaryOperator	&		34272	0					
ANR	34672	ArrayIndexing	heap -> cache [ index ]		34272	1					
ANR	34673	PtrMemberAccess	heap -> cache		34272	0					
ANR	34674	Identifier	heap		34272	0					
ANR	34675	Identifier	cache		34272	1					
ANR	34676	Identifier	index		34272	1					
ANR	34677	ExpressionStatement	( ( zend_mm_free_block * ) mm_block ) -> prev_free_block = * cache	2205:3:62664:62721	34272	13	True				
ANR	34678	AssignmentExpression	( ( zend_mm_free_block * ) mm_block ) -> prev_free_block = * cache		34272	0		=			
ANR	34679	PtrMemberAccess	( ( zend_mm_free_block * ) mm_block ) -> prev_free_block		34272	0					
ANR	34680	CastExpression	( zend_mm_free_block * ) mm_block		34272	0					
ANR	34681	CastTarget	zend_mm_free_block *		34272	0					
ANR	34682	Identifier	mm_block		34272	1					
ANR	34683	Identifier	prev_free_block		34272	1					
ANR	34684	UnaryOperationExpression	* cache		34272	1					
ANR	34685	UnaryOperator	*		34272	0					
ANR	34686	Identifier	cache		34272	1					
ANR	34687	ExpressionStatement	* cache = ( zend_mm_free_block * ) mm_block	2206:3:62726:62764	34272	14	True				
ANR	34688	AssignmentExpression	* cache = ( zend_mm_free_block * ) mm_block		34272	0		=			
ANR	34689	UnaryOperationExpression	* cache		34272	0					
ANR	34690	UnaryOperator	*		34272	0					
ANR	34691	Identifier	cache		34272	1					
ANR	34692	CastExpression	( zend_mm_free_block * ) mm_block		34272	1					
ANR	34693	CastTarget	zend_mm_free_block *		34272	0					
ANR	34694	Identifier	mm_block		34272	1					
ANR	34695	ExpressionStatement	"ZEND_MM_SET_MAGIC ( mm_block , MEM_BLOCK_CACHED )"	2207:3:62769:62814	34272	15	True				
ANR	34696	CallExpression	"ZEND_MM_SET_MAGIC ( mm_block , MEM_BLOCK_CACHED )"		34272	0					
ANR	34697	Callee	ZEND_MM_SET_MAGIC		34272	0					
ANR	34698	Identifier	ZEND_MM_SET_MAGIC		34272	0					
ANR	34699	ArgumentList	mm_block		34272	1					
ANR	34700	Argument	mm_block		34272	0					
ANR	34701	Identifier	mm_block		34272	0					
ANR	34702	Argument	MEM_BLOCK_CACHED		34272	1					
ANR	34703	Identifier	MEM_BLOCK_CACHED		34272	0					
ANR	34704	IfStatement	if ( ++ heap -> cache_stat [ index ] . count > heap -> cache_stat [ index ] . max_count )		34272	16					
ANR	34705	Condition	++ heap -> cache_stat [ index ] . count > heap -> cache_stat [ index ] . max_count	2209:7:62846:62912	34272	0	True				
ANR	34706	RelationalExpression	++ heap -> cache_stat [ index ] . count > heap -> cache_stat [ index ] . max_count		34272	0		>			
ANR	34707	UnaryExpression	++ heap -> cache_stat [ index ] . count		34272	0					
ANR	34708	IncDec	++		34272	0					
ANR	34709	MemberAccess	heap -> cache_stat [ index ] . count		34272	1					
ANR	34710	ArrayIndexing	heap -> cache_stat [ index ]		34272	0					
ANR	34711	PtrMemberAccess	heap -> cache_stat		34272	0					
ANR	34712	Identifier	heap		34272	0					
ANR	34713	Identifier	cache_stat		34272	1					
ANR	34714	Identifier	index		34272	1					
ANR	34715	Identifier	count		34272	1					
ANR	34716	MemberAccess	heap -> cache_stat [ index ] . max_count		34272	1					
ANR	34717	ArrayIndexing	heap -> cache_stat [ index ]		34272	0					
ANR	34718	PtrMemberAccess	heap -> cache_stat		34272	0					
ANR	34719	Identifier	heap		34272	0					
ANR	34720	Identifier	cache_stat		34272	1					
ANR	34721	Identifier	index		34272	1					
ANR	34722	Identifier	max_count		34272	1					
ANR	34723	CompoundStatement		86:76:2538:2538	34272	1					
ANR	34724	ExpressionStatement	heap -> cache_stat [ index ] . max_count = heap -> cache_stat [ index ] . count	2210:4:62921:62986	34272	0	True				
ANR	34725	AssignmentExpression	heap -> cache_stat [ index ] . max_count = heap -> cache_stat [ index ] . count		34272	0		=			
ANR	34726	MemberAccess	heap -> cache_stat [ index ] . max_count		34272	0					
ANR	34727	ArrayIndexing	heap -> cache_stat [ index ]		34272	0					
ANR	34728	PtrMemberAccess	heap -> cache_stat		34272	0					
ANR	34729	Identifier	heap		34272	0					
ANR	34730	Identifier	cache_stat		34272	1					
ANR	34731	Identifier	index		34272	1					
ANR	34732	Identifier	max_count		34272	1					
ANR	34733	MemberAccess	heap -> cache_stat [ index ] . count		34272	1					
ANR	34734	ArrayIndexing	heap -> cache_stat [ index ]		34272	0					
ANR	34735	PtrMemberAccess	heap -> cache_stat		34272	0					
ANR	34736	Identifier	heap		34272	0					
ANR	34737	Identifier	cache_stat		34272	1					
ANR	34738	Identifier	index		34272	1					
ANR	34739	Identifier	count		34272	1					
ANR	34740	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2214:3:63004:63034	34272	17	True				
ANR	34741	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		34272	0					
ANR	34742	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	34743	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	34744	ArgumentList			34272	1					
ANR	34745	ReturnStatement	return ptr ;	2215:3:63039:63049	34272	18	True				
ANR	34746	Identifier	ptr		34272	0					
ANR	34747	ExpressionStatement	"next_block = ZEND_MM_BLOCK_AT ( mm_block , orig_size )"	2220:1:63067:63117	34272	15	True				
ANR	34748	AssignmentExpression	"next_block = ZEND_MM_BLOCK_AT ( mm_block , orig_size )"		34272	0		=			
ANR	34749	Identifier	next_block		34272	0					
ANR	34750	CallExpression	"ZEND_MM_BLOCK_AT ( mm_block , orig_size )"		34272	1					
ANR	34751	Callee	ZEND_MM_BLOCK_AT		34272	0					
ANR	34752	Identifier	ZEND_MM_BLOCK_AT		34272	0					
ANR	34753	ArgumentList	mm_block		34272	1					
ANR	34754	Argument	mm_block		34272	0					
ANR	34755	Identifier	mm_block		34272	0					
ANR	34756	Argument	orig_size		34272	1					
ANR	34757	Identifier	orig_size		34272	0					
ANR	34758	IfStatement	if ( ZEND_MM_IS_FREE_BLOCK ( next_block ) )		34272	16					
ANR	34759	Condition	ZEND_MM_IS_FREE_BLOCK ( next_block )	2222:5:63125:63157	34272	0	True				
ANR	34760	CallExpression	ZEND_MM_IS_FREE_BLOCK ( next_block )		34272	0					
ANR	34761	Callee	ZEND_MM_IS_FREE_BLOCK		34272	0					
ANR	34762	Identifier	ZEND_MM_IS_FREE_BLOCK		34272	0					
ANR	34763	ArgumentList	next_block		34272	1					
ANR	34764	Argument	next_block		34272	0					
ANR	34765	Identifier	next_block		34272	0					
ANR	34766	CompoundStatement		99:40:2783:2783	34272	1					
ANR	34767	ExpressionStatement	ZEND_MM_CHECK_COOKIE ( next_block )	2223:2:63164:63196	34272	0	True				
ANR	34768	CallExpression	ZEND_MM_CHECK_COOKIE ( next_block )		34272	0					
ANR	34769	Callee	ZEND_MM_CHECK_COOKIE		34272	0					
ANR	34770	Identifier	ZEND_MM_CHECK_COOKIE		34272	0					
ANR	34771	ArgumentList	next_block		34272	1					
ANR	34772	Argument	next_block		34272	0					
ANR	34773	Identifier	next_block		34272	0					
ANR	34774	ExpressionStatement	ZEND_MM_CHECK_BLOCK_LINKAGE ( next_block )	2224:2:63200:63239	34272	1	True				
ANR	34775	CallExpression	ZEND_MM_CHECK_BLOCK_LINKAGE ( next_block )		34272	0					
ANR	34776	Callee	ZEND_MM_CHECK_BLOCK_LINKAGE		34272	0					
ANR	34777	Identifier	ZEND_MM_CHECK_BLOCK_LINKAGE		34272	0					
ANR	34778	ArgumentList	next_block		34272	1					
ANR	34779	Argument	next_block		34272	0					
ANR	34780	Identifier	next_block		34272	0					
ANR	34781	IfStatement	if ( orig_size + ZEND_MM_FREE_BLOCK_SIZE ( next_block ) >= true_size )		34272	2					
ANR	34782	Condition	orig_size + ZEND_MM_FREE_BLOCK_SIZE ( next_block ) >= true_size	2225:6:63247:63306	34272	0	True				
ANR	34783	RelationalExpression	orig_size + ZEND_MM_FREE_BLOCK_SIZE ( next_block ) >= true_size		34272	0		>=			
ANR	34784	AdditiveExpression	orig_size + ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	0		+			
ANR	34785	Identifier	orig_size		34272	0					
ANR	34786	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	1					
ANR	34787	Callee	ZEND_MM_FREE_BLOCK_SIZE		34272	0					
ANR	34788	Identifier	ZEND_MM_FREE_BLOCK_SIZE		34272	0					
ANR	34789	ArgumentList	next_block		34272	1					
ANR	34790	Argument	next_block		34272	0					
ANR	34791	Identifier	next_block		34272	0					
ANR	34792	Identifier	true_size		34272	1					
ANR	34793	CompoundStatement		104:3:3009:3055	34272	1					
ANR	34794	IdentifierDeclStatement	size_t block_size = orig_size + ZEND_MM_FREE_BLOCK_SIZE ( next_block ) ;	2226:3:63314:63381	34272	0	True				
ANR	34795	IdentifierDecl	block_size = orig_size + ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	0					
ANR	34796	IdentifierDeclType	size_t		34272	0					
ANR	34797	Identifier	block_size		34272	1					
ANR	34798	AssignmentExpression	block_size = orig_size + ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	2		=			
ANR	34799	Identifier	block_size		34272	0					
ANR	34800	AdditiveExpression	orig_size + ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	1		+			
ANR	34801	Identifier	orig_size		34272	0					
ANR	34802	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	1					
ANR	34803	Callee	ZEND_MM_FREE_BLOCK_SIZE		34272	0					
ANR	34804	Identifier	ZEND_MM_FREE_BLOCK_SIZE		34272	0					
ANR	34805	ArgumentList	next_block		34272	1					
ANR	34806	Argument	next_block		34272	0					
ANR	34807	Identifier	next_block		34272	0					
ANR	34808	IdentifierDeclStatement	size_t remaining_size = block_size - true_size ;	2227:3:63386:63432	34272	1	True				
ANR	34809	IdentifierDecl	remaining_size = block_size - true_size		34272	0					
ANR	34810	IdentifierDeclType	size_t		34272	0					
ANR	34811	Identifier	remaining_size		34272	1					
ANR	34812	AssignmentExpression	remaining_size = block_size - true_size		34272	2		=			
ANR	34813	Identifier	remaining_size		34272	0					
ANR	34814	AdditiveExpression	block_size - true_size		34272	1		-			
ANR	34815	Identifier	block_size		34272	0					
ANR	34816	Identifier	true_size		34272	1					
ANR	34817	ExpressionStatement	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) next_block )"	2229:3:63438:63508	34272	2	True				
ANR	34818	CallExpression	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) next_block )"		34272	0					
ANR	34819	Callee	zend_mm_remove_from_free_list		34272	0					
ANR	34820	Identifier	zend_mm_remove_from_free_list		34272	0					
ANR	34821	ArgumentList	heap		34272	1					
ANR	34822	Argument	heap		34272	0					
ANR	34823	Identifier	heap		34272	0					
ANR	34824	Argument	( zend_mm_free_block * ) next_block		34272	1					
ANR	34825	CastExpression	( zend_mm_free_block * ) next_block		34272	0					
ANR	34826	CastTarget	zend_mm_free_block *		34272	0					
ANR	34827	Identifier	next_block		34272	1					
ANR	34828	IfStatement	if ( remaining_size < ZEND_MM_ALIGNED_MIN_HEADER_SIZE )		34272	3					
ANR	34829	Condition	remaining_size < ZEND_MM_ALIGNED_MIN_HEADER_SIZE	2231:7:63518:63565	34272	0	True				
ANR	34830	RelationalExpression	remaining_size < ZEND_MM_ALIGNED_MIN_HEADER_SIZE		34272	0		<			
ANR	34831	Identifier	remaining_size		34272	0					
ANR	34832	Identifier	ZEND_MM_ALIGNED_MIN_HEADER_SIZE		34272	1					
ANR	34833	CompoundStatement		108:57:3191:3191	34272	1					
ANR	34834	ExpressionStatement	true_size = block_size	2232:4:63574:63596	34272	0	True				
ANR	34835	AssignmentExpression	true_size = block_size		34272	0		=			
ANR	34836	Identifier	true_size		34272	0					
ANR	34837	Identifier	block_size		34272	1					
ANR	34838	ExpressionStatement	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"	2233:4:63602:63656	34272	1	True				
ANR	34839	CallExpression	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"		34272	0					
ANR	34840	Callee	ZEND_MM_BLOCK		34272	0					
ANR	34841	Identifier	ZEND_MM_BLOCK		34272	0					
ANR	34842	ArgumentList	mm_block		34272	1					
ANR	34843	Argument	mm_block		34272	0					
ANR	34844	Identifier	mm_block		34272	0					
ANR	34845	Argument	ZEND_MM_USED_BLOCK		34272	1					
ANR	34846	Identifier	ZEND_MM_USED_BLOCK		34272	0					
ANR	34847	Argument	true_size		34272	2					
ANR	34848	Identifier	true_size		34272	0					
ANR	34849	ElseStatement	else		34272	0					
ANR	34850	CompoundStatement		112:4:3297:3331	34272	0					
ANR	34851	IdentifierDeclStatement	zend_mm_free_block * new_free_block ;	2235:4:63674:63708	34272	0	True				
ANR	34852	IdentifierDecl	* new_free_block		34272	0					
ANR	34853	IdentifierDeclType	zend_mm_free_block *		34272	0					
ANR	34854	Identifier	new_free_block		34272	1					
ANR	34855	ExpressionStatement	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"	2238:4:63748:63802	34272	1	True				
ANR	34856	CallExpression	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"		34272	0					
ANR	34857	Callee	ZEND_MM_BLOCK		34272	0					
ANR	34858	Identifier	ZEND_MM_BLOCK		34272	0					
ANR	34859	ArgumentList	mm_block		34272	1					
ANR	34860	Argument	mm_block		34272	0					
ANR	34861	Identifier	mm_block		34272	0					
ANR	34862	Argument	ZEND_MM_USED_BLOCK		34272	1					
ANR	34863	Identifier	ZEND_MM_USED_BLOCK		34272	0					
ANR	34864	Argument	true_size		34272	2					
ANR	34865	Identifier	true_size		34272	0					
ANR	34866	ExpressionStatement	"new_free_block = ( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( mm_block , true_size )"	2239:4:63808:63885	34272	2	True				
ANR	34867	AssignmentExpression	"new_free_block = ( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( mm_block , true_size )"		34272	0		=			
ANR	34868	Identifier	new_free_block		34272	0					
ANR	34869	CastExpression	"( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( mm_block , true_size )"		34272	1					
ANR	34870	CastTarget	zend_mm_free_block *		34272	0					
ANR	34871	CallExpression	"ZEND_MM_BLOCK_AT ( mm_block , true_size )"		34272	1					
ANR	34872	Callee	ZEND_MM_BLOCK_AT		34272	0					
ANR	34873	Identifier	ZEND_MM_BLOCK_AT		34272	0					
ANR	34874	ArgumentList	mm_block		34272	1					
ANR	34875	Argument	mm_block		34272	0					
ANR	34876	Identifier	mm_block		34272	0					
ANR	34877	Argument	true_size		34272	1					
ANR	34878	Identifier	true_size		34272	0					
ANR	34879	ExpressionStatement	"ZEND_MM_BLOCK ( new_free_block , ZEND_MM_FREE_BLOCK , remaining_size )"	2240:4:63891:63956	34272	3	True				
ANR	34880	CallExpression	"ZEND_MM_BLOCK ( new_free_block , ZEND_MM_FREE_BLOCK , remaining_size )"		34272	0					
ANR	34881	Callee	ZEND_MM_BLOCK		34272	0					
ANR	34882	Identifier	ZEND_MM_BLOCK		34272	0					
ANR	34883	ArgumentList	new_free_block		34272	1					
ANR	34884	Argument	new_free_block		34272	0					
ANR	34885	Identifier	new_free_block		34272	0					
ANR	34886	Argument	ZEND_MM_FREE_BLOCK		34272	1					
ANR	34887	Identifier	ZEND_MM_FREE_BLOCK		34272	0					
ANR	34888	Argument	remaining_size		34272	2					
ANR	34889	Identifier	remaining_size		34272	0					
ANR	34890	IfStatement	"if ( ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_BLOCK_AT ( new_free_block , remaining_size ) ) )"		34272	4					
ANR	34891	Condition	"ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_BLOCK_AT ( new_free_block , remaining_size ) )"	2243:8:64017:64132	34272	0	True				
ANR	34892	AndExpression	"ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_BLOCK_AT ( new_free_block , remaining_size ) )"		34272	0		&&			
ANR	34893	CallExpression	ZEND_MM_IS_FIRST_BLOCK ( mm_block )		34272	0					
ANR	34894	Callee	ZEND_MM_IS_FIRST_BLOCK		34272	0					
ANR	34895	Identifier	ZEND_MM_IS_FIRST_BLOCK		34272	0					
ANR	34896	ArgumentList	mm_block		34272	1					
ANR	34897	Argument	mm_block		34272	0					
ANR	34898	Identifier	mm_block		34272	0					
ANR	34899	CallExpression	"ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_BLOCK_AT ( new_free_block , remaining_size ) )"		34272	1					
ANR	34900	Callee	ZEND_MM_IS_GUARD_BLOCK		34272	0					
ANR	34901	Identifier	ZEND_MM_IS_GUARD_BLOCK		34272	0					
ANR	34902	ArgumentList	"ZEND_MM_BLOCK_AT ( new_free_block , remaining_size )"		34272	1					
ANR	34903	Argument	"ZEND_MM_BLOCK_AT ( new_free_block , remaining_size )"		34272	0					
ANR	34904	CallExpression	"ZEND_MM_BLOCK_AT ( new_free_block , remaining_size )"		34272	0					
ANR	34905	Callee	ZEND_MM_BLOCK_AT		34272	0					
ANR	34906	Identifier	ZEND_MM_BLOCK_AT		34272	0					
ANR	34907	ArgumentList	new_free_block		34272	1					
ANR	34908	Argument	new_free_block		34272	0					
ANR	34909	Identifier	new_free_block		34272	0					
ANR	34910	Argument	remaining_size		34272	1					
ANR	34911	Identifier	remaining_size		34272	0					
ANR	34912	CompoundStatement		121:82:3758:3758	34272	1					
ANR	34913	ExpressionStatement	"zend_mm_add_to_rest_list ( heap , new_free_block )"	2245:5:64142:64188	34272	0	True				
ANR	34914	CallExpression	"zend_mm_add_to_rest_list ( heap , new_free_block )"		34272	0					
ANR	34915	Callee	zend_mm_add_to_rest_list		34272	0					
ANR	34916	Identifier	zend_mm_add_to_rest_list		34272	0					
ANR	34917	ArgumentList	heap		34272	1					
ANR	34918	Argument	heap		34272	0					
ANR	34919	Identifier	heap		34272	0					
ANR	34920	Argument	new_free_block		34272	1					
ANR	34921	Identifier	new_free_block		34272	0					
ANR	34922	ElseStatement	else		34272	0					
ANR	34923	CompoundStatement		123:11:3824:3824	34272	0					
ANR	34924	ExpressionStatement	"zend_mm_add_to_free_list ( heap , new_free_block )"	2247:5:64208:64254	34272	0	True				
ANR	34925	CallExpression	"zend_mm_add_to_free_list ( heap , new_free_block )"		34272	0					
ANR	34926	Callee	zend_mm_add_to_free_list		34272	0					
ANR	34927	Identifier	zend_mm_add_to_free_list		34272	0					
ANR	34928	ArgumentList	heap		34272	1					
ANR	34929	Argument	heap		34272	0					
ANR	34930	Identifier	heap		34272	0					
ANR	34931	Argument	new_free_block		34272	1					
ANR	34932	Identifier	new_free_block		34272	0					
ANR	34933	ExpressionStatement	"ZEND_MM_SET_DEBUG_INFO ( mm_block , size , 0 , 0 )"	2250:3:64270:64314	34272	4	True				
ANR	34934	CallExpression	"ZEND_MM_SET_DEBUG_INFO ( mm_block , size , 0 , 0 )"		34272	0					
ANR	34935	Callee	ZEND_MM_SET_DEBUG_INFO		34272	0					
ANR	34936	Identifier	ZEND_MM_SET_DEBUG_INFO		34272	0					
ANR	34937	ArgumentList	mm_block		34272	1					
ANR	34938	Argument	mm_block		34272	0					
ANR	34939	Identifier	mm_block		34272	0					
ANR	34940	Argument	size		34272	1					
ANR	34941	Identifier	size		34272	0					
ANR	34942	Argument	0		34272	2					
ANR	34943	PrimaryExpression	0		34272	0					
ANR	34944	Argument	0		34272	3					
ANR	34945	PrimaryExpression	0		34272	0					
ANR	34946	ExpressionStatement	heap -> size = heap -> size + true_size - orig_size	2251:3:64319:64366	34272	5	True				
ANR	34947	AssignmentExpression	heap -> size = heap -> size + true_size - orig_size		34272	0		=			
ANR	34948	PtrMemberAccess	heap -> size		34272	0					
ANR	34949	Identifier	heap		34272	0					
ANR	34950	Identifier	size		34272	1					
ANR	34951	AdditiveExpression	heap -> size + true_size - orig_size		34272	1		+			
ANR	34952	PtrMemberAccess	heap -> size		34272	0					
ANR	34953	Identifier	heap		34272	0					
ANR	34954	Identifier	size		34272	1					
ANR	34955	AdditiveExpression	true_size - orig_size		34272	1		-			
ANR	34956	Identifier	true_size		34272	0					
ANR	34957	Identifier	orig_size		34272	1					
ANR	34958	IfStatement	if ( heap -> peak < heap -> size )		34272	6					
ANR	34959	Condition	heap -> peak < heap -> size	2252:7:64375:64397	34272	0	True				
ANR	34960	RelationalExpression	heap -> peak < heap -> size		34272	0		<			
ANR	34961	PtrMemberAccess	heap -> peak		34272	0					
ANR	34962	Identifier	heap		34272	0					
ANR	34963	Identifier	peak		34272	1					
ANR	34964	PtrMemberAccess	heap -> size		34272	1					
ANR	34965	Identifier	heap		34272	0					
ANR	34966	Identifier	size		34272	1					
ANR	34967	CompoundStatement		129:32:4023:4023	34272	1					
ANR	34968	ExpressionStatement	heap -> peak = heap -> size	2253:4:64406:64429	34272	0	True				
ANR	34969	AssignmentExpression	heap -> peak = heap -> size		34272	0		=			
ANR	34970	PtrMemberAccess	heap -> peak		34272	0					
ANR	34971	Identifier	heap		34272	0					
ANR	34972	Identifier	peak		34272	1					
ANR	34973	PtrMemberAccess	heap -> size		34272	1					
ANR	34974	Identifier	heap		34272	0					
ANR	34975	Identifier	size		34272	1					
ANR	34976	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2255:3:64439:64469	34272	7	True				
ANR	34977	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		34272	0					
ANR	34978	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	34979	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	34980	ArgumentList			34272	1					
ANR	34981	ReturnStatement	return p ;	2256:3:64474:64482	34272	8	True				
ANR	34982	Identifier	p		34272	0					
ANR	34983	ElseStatement	else		34272	0					
ANR	34984	IfStatement	"if ( ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_BLOCK_AT ( next_block , ZEND_MM_FREE_BLOCK_SIZE ( next_block ) ) ) )"		34272	0					
ANR	34985	Condition	"ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_BLOCK_AT ( next_block , ZEND_MM_FREE_BLOCK_SIZE ( next_block ) ) )"	2257:13:64497:64628	34272	0	True				
ANR	34986	AndExpression	"ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_BLOCK_AT ( next_block , ZEND_MM_FREE_BLOCK_SIZE ( next_block ) ) )"		34272	0		&&			
ANR	34987	CallExpression	ZEND_MM_IS_FIRST_BLOCK ( mm_block )		34272	0					
ANR	34988	Callee	ZEND_MM_IS_FIRST_BLOCK		34272	0					
ANR	34989	Identifier	ZEND_MM_IS_FIRST_BLOCK		34272	0					
ANR	34990	ArgumentList	mm_block		34272	1					
ANR	34991	Argument	mm_block		34272	0					
ANR	34992	Identifier	mm_block		34272	0					
ANR	34993	CallExpression	"ZEND_MM_IS_GUARD_BLOCK ( ZEND_MM_BLOCK_AT ( next_block , ZEND_MM_FREE_BLOCK_SIZE ( next_block ) ) )"		34272	1					
ANR	34994	Callee	ZEND_MM_IS_GUARD_BLOCK		34272	0					
ANR	34995	Identifier	ZEND_MM_IS_GUARD_BLOCK		34272	0					
ANR	34996	ArgumentList	"ZEND_MM_BLOCK_AT ( next_block , ZEND_MM_FREE_BLOCK_SIZE ( next_block ) )"		34272	1					
ANR	34997	Argument	"ZEND_MM_BLOCK_AT ( next_block , ZEND_MM_FREE_BLOCK_SIZE ( next_block ) )"		34272	0					
ANR	34998	CallExpression	"ZEND_MM_BLOCK_AT ( next_block , ZEND_MM_FREE_BLOCK_SIZE ( next_block ) )"		34272	0					
ANR	34999	Callee	ZEND_MM_BLOCK_AT		34272	0					
ANR	35000	Identifier	ZEND_MM_BLOCK_AT		34272	0					
ANR	35001	ArgumentList	next_block		34272	1					
ANR	35002	Argument	next_block		34272	0					
ANR	35003	Identifier	next_block		34272	0					
ANR	35004	Argument	ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	1					
ANR	35005	CallExpression	ZEND_MM_FREE_BLOCK_SIZE ( next_block )		34272	0					
ANR	35006	Callee	ZEND_MM_FREE_BLOCK_SIZE		34272	0					
ANR	35007	Identifier	ZEND_MM_FREE_BLOCK_SIZE		34272	0					
ANR	35008	ArgumentList	next_block		34272	1					
ANR	35009	Argument	next_block		34272	0					
ANR	35010	Identifier	next_block		34272	0					
ANR	35011	CompoundStatement		135:98:4254:4254	34272	1					
ANR	35012	ExpressionStatement	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) next_block )"	2259:3:64636:64706	34272	0	True				
ANR	35013	CallExpression	"zend_mm_remove_from_free_list ( heap , ( zend_mm_free_block * ) next_block )"		34272	0					
ANR	35014	Callee	zend_mm_remove_from_free_list		34272	0					
ANR	35015	Identifier	zend_mm_remove_from_free_list		34272	0					
ANR	35016	ArgumentList	heap		34272	1					
ANR	35017	Argument	heap		34272	0					
ANR	35018	Identifier	heap		34272	0					
ANR	35019	Argument	( zend_mm_free_block * ) next_block		34272	1					
ANR	35020	CastExpression	( zend_mm_free_block * ) next_block		34272	0					
ANR	35021	CastTarget	zend_mm_free_block *		34272	0					
ANR	35022	Identifier	next_block		34272	1					
ANR	35023	GotoStatement	goto realloc_segment ;	2260:3:64711:64731	34272	1	True				
ANR	35024	Identifier	realloc_segment		34272	0					
ANR	35025	ElseStatement	else		34272	0					
ANR	35026	IfStatement	if ( ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( next_block ) )		34272	0					
ANR	35027	Condition	ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( next_block )	2262:12:64749:64818	34272	0	True				
ANR	35028	AndExpression	ZEND_MM_IS_FIRST_BLOCK ( mm_block ) && ZEND_MM_IS_GUARD_BLOCK ( next_block )		34272	0		&&			
ANR	35029	CallExpression	ZEND_MM_IS_FIRST_BLOCK ( mm_block )		34272	0					
ANR	35030	Callee	ZEND_MM_IS_FIRST_BLOCK		34272	0					
ANR	35031	Identifier	ZEND_MM_IS_FIRST_BLOCK		34272	0					
ANR	35032	ArgumentList	mm_block		34272	1					
ANR	35033	Argument	mm_block		34272	0					
ANR	35034	Identifier	mm_block		34272	0					
ANR	35035	CallExpression	ZEND_MM_IS_GUARD_BLOCK ( next_block )		34272	1					
ANR	35036	Callee	ZEND_MM_IS_GUARD_BLOCK		34272	0					
ANR	35037	Identifier	ZEND_MM_IS_GUARD_BLOCK		34272	0					
ANR	35038	ArgumentList	next_block		34272	1					
ANR	35039	Argument	next_block		34272	0					
ANR	35040	Identifier	next_block		34272	0					
ANR	35041	CompoundStatement		144:2:4553:4574	34272	1					
ANR	35042	IdentifierDeclStatement	zend_mm_segment * segment ;	2263:2:64825:64849	34272	0	True				
ANR	35043	IdentifierDecl	* segment		34272	0					
ANR	35044	IdentifierDeclType	zend_mm_segment *		34272	0					
ANR	35045	Identifier	segment		34272	1					
ANR	35046	IdentifierDeclStatement	zend_mm_segment * segment_copy ;	2264:2:64853:64882	34272	1	True				
ANR	35047	IdentifierDecl	* segment_copy		34272	0					
ANR	35048	IdentifierDeclType	zend_mm_segment *		34272	0					
ANR	35049	Identifier	segment_copy		34272	1					
ANR	35050	IdentifierDeclStatement	size_t segment_size ;	2265:2:64886:64905	34272	2	True				
ANR	35051	IdentifierDecl	segment_size		34272	0					
ANR	35052	IdentifierDeclType	size_t		34272	0					
ANR	35053	Identifier	segment_size		34272	1					
ANR	35054	IdentifierDeclStatement	size_t block_size ;	2266:2:64909:64926	34272	3	True				
ANR	35055	IdentifierDecl	block_size		34272	0					
ANR	35056	IdentifierDeclType	size_t		34272	0					
ANR	35057	Identifier	block_size		34272	1					
ANR	35058	IdentifierDeclStatement	size_t remaining_size ;	2267:2:64930:64951	34272	4	True				
ANR	35059	IdentifierDecl	remaining_size		34272	0					
ANR	35060	IdentifierDeclType	size_t		34272	0					
ANR	35061	Identifier	remaining_size		34272	1					
ANR	35062	Label	realloc_segment :	2269:0:64954:64969	34272	5	True				
ANR	35063	Identifier	realloc_segment		34272	0					
ANR	35064	IfStatement	if ( true_size > heap -> block_size - ( ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE ) )		34272	6					
ANR	35065	Condition	true_size > heap -> block_size - ( ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE )	2271:6:65037:65127	34272	0	True				
ANR	35066	RelationalExpression	true_size > heap -> block_size - ( ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE )		34272	0		>			
ANR	35067	Identifier	true_size		34272	0					
ANR	35068	AdditiveExpression	heap -> block_size - ( ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE )		34272	1		-			
ANR	35069	PtrMemberAccess	heap -> block_size		34272	0					
ANR	35070	Identifier	heap		34272	0					
ANR	35071	Identifier	block_size		34272	1					
ANR	35072	AdditiveExpression	ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		34272	1		+			
ANR	35073	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		34272	0					
ANR	35074	Identifier	ZEND_MM_ALIGNED_HEADER_SIZE		34272	1					
ANR	35075	CompoundStatement		148:99:4753:4753	34272	1					
ANR	35076	ExpressionStatement	segment_size = true_size + ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE	2272:3:65135:65216	34272	0	True				
ANR	35077	AssignmentExpression	segment_size = true_size + ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		34272	0		=			
ANR	35078	Identifier	segment_size		34272	0					
ANR	35079	AdditiveExpression	true_size + ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		34272	1		+			
ANR	35080	Identifier	true_size		34272	0					
ANR	35081	AdditiveExpression	ZEND_MM_ALIGNED_SEGMENT_SIZE + ZEND_MM_ALIGNED_HEADER_SIZE		34272	1		+			
ANR	35082	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		34272	0					
ANR	35083	Identifier	ZEND_MM_ALIGNED_HEADER_SIZE		34272	1					
ANR	35084	ExpressionStatement	segment_size = ( segment_size + ( heap -> block_size - 1 ) ) & ~ ( heap -> block_size - 1 )	2273:3:65221:65297	34272	1	True				
ANR	35085	AssignmentExpression	segment_size = ( segment_size + ( heap -> block_size - 1 ) ) & ~ ( heap -> block_size - 1 )		34272	0		=			
ANR	35086	Identifier	segment_size		34272	0					
ANR	35087	BitAndExpression	( segment_size + ( heap -> block_size - 1 ) ) & ~ ( heap -> block_size - 1 )		34272	1		&			
ANR	35088	AdditiveExpression	segment_size + ( heap -> block_size - 1 )		34272	0		+			
ANR	35089	Identifier	segment_size		34272	0					
ANR	35090	AdditiveExpression	heap -> block_size - 1		34272	1		-			
ANR	35091	PtrMemberAccess	heap -> block_size		34272	0					
ANR	35092	Identifier	heap		34272	0					
ANR	35093	Identifier	block_size		34272	1					
ANR	35094	PrimaryExpression	1		34272	1					
ANR	35095	UnaryOperationExpression	~ ( heap -> block_size - 1 )		34272	1					
ANR	35096	UnaryOperator	~		34272	0					
ANR	35097	AdditiveExpression	heap -> block_size - 1		34272	1		-			
ANR	35098	PtrMemberAccess	heap -> block_size		34272	0					
ANR	35099	Identifier	heap		34272	0					
ANR	35100	Identifier	block_size		34272	1					
ANR	35101	PrimaryExpression	1		34272	1					
ANR	35102	ElseStatement	else		34272	0					
ANR	35103	CompoundStatement		151:9:4931:4931	34272	0					
ANR	35104	ExpressionStatement	segment_size = heap -> block_size	2275:3:65313:65344	34272	0	True				
ANR	35105	AssignmentExpression	segment_size = heap -> block_size		34272	0		=			
ANR	35106	Identifier	segment_size		34272	0					
ANR	35107	PtrMemberAccess	heap -> block_size		34272	1					
ANR	35108	Identifier	heap		34272	0					
ANR	35109	Identifier	block_size		34272	1					
ANR	35110	ExpressionStatement	segment_copy = ( zend_mm_segment * ) ( ( char * ) mm_block - ZEND_MM_ALIGNED_SEGMENT_SIZE )	2278:2:65353:65437	34272	7	True				
ANR	35111	AssignmentExpression	segment_copy = ( zend_mm_segment * ) ( ( char * ) mm_block - ZEND_MM_ALIGNED_SEGMENT_SIZE )		34272	0		=			
ANR	35112	Identifier	segment_copy		34272	0					
ANR	35113	CastExpression	( zend_mm_segment * ) ( ( char * ) mm_block - ZEND_MM_ALIGNED_SEGMENT_SIZE )		34272	1					
ANR	35114	CastTarget	zend_mm_segment *		34272	0					
ANR	35115	AdditiveExpression	( char * ) mm_block - ZEND_MM_ALIGNED_SEGMENT_SIZE		34272	1		-			
ANR	35116	CastExpression	( char * ) mm_block		34272	0					
ANR	35117	CastTarget	char *		34272	0					
ANR	35118	Identifier	mm_block		34272	1					
ANR	35119	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		34272	1					
ANR	35120	IfStatement	if ( segment_size < true_size || heap -> real_size + segment_size - segment_copy -> size > heap -> limit )		34272	8					
ANR	35121	Condition	segment_size < true_size || heap -> real_size + segment_size - segment_copy -> size > heap -> limit	2279:6:65445:65543	34272	0	True				
ANR	35122	OrExpression	segment_size < true_size || heap -> real_size + segment_size - segment_copy -> size > heap -> limit		34272	0		||			
ANR	35123	RelationalExpression	segment_size < true_size		34272	0		<			
ANR	35124	Identifier	segment_size		34272	0					
ANR	35125	Identifier	true_size		34272	1					
ANR	35126	RelationalExpression	heap -> real_size + segment_size - segment_copy -> size > heap -> limit		34272	1		>			
ANR	35127	AdditiveExpression	heap -> real_size + segment_size - segment_copy -> size		34272	0		+			
ANR	35128	PtrMemberAccess	heap -> real_size		34272	0					
ANR	35129	Identifier	heap		34272	0					
ANR	35130	Identifier	real_size		34272	1					
ANR	35131	AdditiveExpression	segment_size - segment_copy -> size		34272	1		-			
ANR	35132	Identifier	segment_size		34272	0					
ANR	35133	PtrMemberAccess	segment_copy -> size		34272	1					
ANR	35134	Identifier	segment_copy		34272	0					
ANR	35135	Identifier	size		34272	1					
ANR	35136	PtrMemberAccess	heap -> limit		34272	1					
ANR	35137	Identifier	heap		34272	0					
ANR	35138	Identifier	limit		34272	1					
ANR	35139	CompoundStatement		157:73:5169:5169	34272	1					
ANR	35140	IfStatement	if ( ZEND_MM_IS_FREE_BLOCK ( next_block ) )		34272	0					
ANR	35141	Condition	ZEND_MM_IS_FREE_BLOCK ( next_block )	2281:7:65555:65587	34272	0	True				
ANR	35142	CallExpression	ZEND_MM_IS_FREE_BLOCK ( next_block )		34272	0					
ANR	35143	Callee	ZEND_MM_IS_FREE_BLOCK		34272	0					
ANR	35144	Identifier	ZEND_MM_IS_FREE_BLOCK		34272	0					
ANR	35145	ArgumentList	next_block		34272	1					
ANR	35146	Argument	next_block		34272	0					
ANR	35147	Identifier	next_block		34272	0					
ANR	35148	CompoundStatement		158:42:5213:5213	34272	1					
ANR	35149	ExpressionStatement	"zend_mm_add_to_free_list ( heap , ( zend_mm_free_block * ) next_block )"	2282:4:65596:65661	34272	0	True				
ANR	35150	CallExpression	"zend_mm_add_to_free_list ( heap , ( zend_mm_free_block * ) next_block )"		34272	0					
ANR	35151	Callee	zend_mm_add_to_free_list		34272	0					
ANR	35152	Identifier	zend_mm_add_to_free_list		34272	0					
ANR	35153	ArgumentList	heap		34272	1					
ANR	35154	Argument	heap		34272	0					
ANR	35155	Identifier	heap		34272	0					
ANR	35156	Argument	( zend_mm_free_block * ) next_block		34272	1					
ANR	35157	CastExpression	( zend_mm_free_block * ) next_block		34272	0					
ANR	35158	CastTarget	zend_mm_free_block *		34272	0					
ANR	35159	Identifier	next_block		34272	1					
ANR	35160	ExpressionStatement	zend_mm_free_cache ( heap )	2285:3:65689:65713	34272	1	True				
ANR	35161	CallExpression	zend_mm_free_cache ( heap )		34272	0					
ANR	35162	Callee	zend_mm_free_cache		34272	0					
ANR	35163	Identifier	zend_mm_free_cache		34272	0					
ANR	35164	ArgumentList	heap		34272	1					
ANR	35165	Argument	heap		34272	0					
ANR	35166	Identifier	heap		34272	0					
ANR	35167	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2287:3:65725:65755	34272	2	True				
ANR	35168	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		34272	0					
ANR	35169	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	35170	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	35171	ArgumentList			34272	1					
ANR	35172	ExpressionStatement	"zend_mm_safe_error ( heap , ""Allowed memory size of %ld bytes exhausted at %s:%d (tried to allocate %ld bytes)"" , heap -> limit , __zend_filename , __zend_lineno , size )"	2289:3:65775:65935	34272	3	True				
ANR	35173	CallExpression	"zend_mm_safe_error ( heap , ""Allowed memory size of %ld bytes exhausted at %s:%d (tried to allocate %ld bytes)"" , heap -> limit , __zend_filename , __zend_lineno , size )"		34272	0					
ANR	35174	Callee	zend_mm_safe_error		34272	0					
ANR	35175	Identifier	zend_mm_safe_error		34272	0					
ANR	35176	ArgumentList	heap		34272	1					
ANR	35177	Argument	heap		34272	0					
ANR	35178	Identifier	heap		34272	0					
ANR	35179	Argument	"""Allowed memory size of %ld bytes exhausted at %s:%d (tried to allocate %ld bytes)"""		34272	1					
ANR	35180	PrimaryExpression	"""Allowed memory size of %ld bytes exhausted at %s:%d (tried to allocate %ld bytes)"""		34272	0					
ANR	35181	Argument	heap -> limit		34272	2					
ANR	35182	PtrMemberAccess	heap -> limit		34272	0					
ANR	35183	Identifier	heap		34272	0					
ANR	35184	Identifier	limit		34272	1					
ANR	35185	Argument	__zend_filename		34272	3					
ANR	35186	Identifier	__zend_filename		34272	0					
ANR	35187	Argument	__zend_lineno		34272	4					
ANR	35188	Identifier	__zend_lineno		34272	0					
ANR	35189	Argument	size		34272	5					
ANR	35190	Identifier	size		34272	0					
ANR	35191	ReturnStatement	return NULL ;	2293:3:66077:66088	34272	4	True				
ANR	35192	Identifier	NULL		34272	0					
ANR	35193	ExpressionStatement	"segment = ZEND_MM_STORAGE_REALLOC ( segment_copy , segment_size )"	2296:2:66097:66158	34272	9	True				
ANR	35194	AssignmentExpression	"segment = ZEND_MM_STORAGE_REALLOC ( segment_copy , segment_size )"		34272	0		=			
ANR	35195	Identifier	segment		34272	0					
ANR	35196	CallExpression	"ZEND_MM_STORAGE_REALLOC ( segment_copy , segment_size )"		34272	1					
ANR	35197	Callee	ZEND_MM_STORAGE_REALLOC		34272	0					
ANR	35198	Identifier	ZEND_MM_STORAGE_REALLOC		34272	0					
ANR	35199	ArgumentList	segment_copy		34272	1					
ANR	35200	Argument	segment_copy		34272	0					
ANR	35201	Identifier	segment_copy		34272	0					
ANR	35202	Argument	segment_size		34272	1					
ANR	35203	Identifier	segment_size		34272	0					
ANR	35204	IfStatement	if ( ! segment )		34272	10					
ANR	35205	Condition	! segment	2297:6:66166:66173	34272	0	True				
ANR	35206	UnaryOperationExpression	! segment		34272	0					
ANR	35207	UnaryOperator	!		34272	0					
ANR	35208	Identifier	segment		34272	1					
ANR	35209	CompoundStatement		174:16:5799:5799	34272	1					
ANR	35210	ExpressionStatement	zend_mm_free_cache ( heap )	2299:3:66199:66223	34272	0	True				
ANR	35211	CallExpression	zend_mm_free_cache ( heap )		34272	0					
ANR	35212	Callee	zend_mm_free_cache		34272	0					
ANR	35213	Identifier	zend_mm_free_cache		34272	0					
ANR	35214	ArgumentList	heap		34272	1					
ANR	35215	Argument	heap		34272	0					
ANR	35216	Identifier	heap		34272	0					
ANR	35217	Label	out_of_memory :	2301:0:66232:66245	34272	1	True				
ANR	35218	Identifier	out_of_memory		34272	0					
ANR	35219	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2302:3:66250:66280	34272	2	True				
ANR	35220	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		34272	0					
ANR	35221	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	35222	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	35223	ArgumentList			34272	1					
ANR	35224	ExpressionStatement	"zend_mm_safe_error ( heap , ""Out of memory (allocated %ld) at %s:%d (tried to allocate %ld bytes)"" , heap -> real_size , __zend_filename , __zend_lineno , size )"	2304:3:66300:66451	34272	3	True				
ANR	35225	CallExpression	"zend_mm_safe_error ( heap , ""Out of memory (allocated %ld) at %s:%d (tried to allocate %ld bytes)"" , heap -> real_size , __zend_filename , __zend_lineno , size )"		34272	0					
ANR	35226	Callee	zend_mm_safe_error		34272	0					
ANR	35227	Identifier	zend_mm_safe_error		34272	0					
ANR	35228	ArgumentList	heap		34272	1					
ANR	35229	Argument	heap		34272	0					
ANR	35230	Identifier	heap		34272	0					
ANR	35231	Argument	"""Out of memory (allocated %ld) at %s:%d (tried to allocate %ld bytes)"""		34272	1					
ANR	35232	PrimaryExpression	"""Out of memory (allocated %ld) at %s:%d (tried to allocate %ld bytes)"""		34272	0					
ANR	35233	Argument	heap -> real_size		34272	2					
ANR	35234	PtrMemberAccess	heap -> real_size		34272	0					
ANR	35235	Identifier	heap		34272	0					
ANR	35236	Identifier	real_size		34272	1					
ANR	35237	Argument	__zend_filename		34272	3					
ANR	35238	Identifier	__zend_filename		34272	0					
ANR	35239	Argument	__zend_lineno		34272	4					
ANR	35240	Identifier	__zend_lineno		34272	0					
ANR	35241	Argument	size		34272	5					
ANR	35242	Identifier	size		34272	0					
ANR	35243	ReturnStatement	return NULL ;	2308:3:66584:66595	34272	4	True				
ANR	35244	Identifier	NULL		34272	0					
ANR	35245	ExpressionStatement	heap -> real_size += segment_size - segment -> size	2310:2:66603:66650	34272	11	True				
ANR	35246	AssignmentExpression	heap -> real_size += segment_size - segment -> size		34272	0		+=			
ANR	35247	PtrMemberAccess	heap -> real_size		34272	0					
ANR	35248	Identifier	heap		34272	0					
ANR	35249	Identifier	real_size		34272	1					
ANR	35250	AdditiveExpression	segment_size - segment -> size		34272	1		-			
ANR	35251	Identifier	segment_size		34272	0					
ANR	35252	PtrMemberAccess	segment -> size		34272	1					
ANR	35253	Identifier	segment		34272	0					
ANR	35254	Identifier	size		34272	1					
ANR	35255	IfStatement	if ( heap -> real_size > heap -> real_peak )		34272	12					
ANR	35256	Condition	heap -> real_size > heap -> real_peak	2311:6:66658:66690	34272	0	True				
ANR	35257	RelationalExpression	heap -> real_size > heap -> real_peak		34272	0		>			
ANR	35258	PtrMemberAccess	heap -> real_size		34272	0					
ANR	35259	Identifier	heap		34272	0					
ANR	35260	Identifier	real_size		34272	1					
ANR	35261	PtrMemberAccess	heap -> real_peak		34272	1					
ANR	35262	Identifier	heap		34272	0					
ANR	35263	Identifier	real_peak		34272	1					
ANR	35264	CompoundStatement		188:41:6316:6316	34272	1					
ANR	35265	ExpressionStatement	heap -> real_peak = heap -> real_size	2312:3:66698:66731	34272	0	True				
ANR	35266	AssignmentExpression	heap -> real_peak = heap -> real_size		34272	0		=			
ANR	35267	PtrMemberAccess	heap -> real_peak		34272	0					
ANR	35268	Identifier	heap		34272	0					
ANR	35269	Identifier	real_peak		34272	1					
ANR	35270	PtrMemberAccess	heap -> real_size		34272	1					
ANR	35271	Identifier	heap		34272	0					
ANR	35272	Identifier	real_size		34272	1					
ANR	35273	ExpressionStatement	segment -> size = segment_size	2315:2:66740:66768	34272	13	True				
ANR	35274	AssignmentExpression	segment -> size = segment_size		34272	0		=			
ANR	35275	PtrMemberAccess	segment -> size		34272	0					
ANR	35276	Identifier	segment		34272	0					
ANR	35277	Identifier	size		34272	1					
ANR	35278	Identifier	segment_size		34272	1					
ANR	35279	IfStatement	if ( segment != segment_copy )		34272	14					
ANR	35280	Condition	segment != segment_copy	2317:6:66777:66799	34272	0	True				
ANR	35281	EqualityExpression	segment != segment_copy		34272	0		!=			
ANR	35282	Identifier	segment		34272	0					
ANR	35283	Identifier	segment_copy		34272	1					
ANR	35284	CompoundStatement		195:3:6430:6474	34272	1					
ANR	35285	IdentifierDeclStatement	zend_mm_segment * * seg = & heap -> segments_list ;	2318:3:66807:66851	34272	0	True				
ANR	35286	IdentifierDecl	* * seg = & heap -> segments_list		34272	0					
ANR	35287	IdentifierDeclType	zend_mm_segment * *		34272	0					
ANR	35288	Identifier	seg		34272	1					
ANR	35289	AssignmentExpression	* * seg = & heap -> segments_list		34272	2		=			
ANR	35290	Identifier	seg		34272	0					
ANR	35291	UnaryOperationExpression	& heap -> segments_list		34272	1					
ANR	35292	UnaryOperator	&		34272	0					
ANR	35293	PtrMemberAccess	heap -> segments_list		34272	1					
ANR	35294	Identifier	heap		34272	0					
ANR	35295	Identifier	segments_list		34272	1					
ANR	35296	WhileStatement	while ( * seg != segment_copy )		34272	1					
ANR	35297	Condition	* seg != segment_copy	2319:10:66863:66882	34272	0	True				
ANR	35298	EqualityExpression	* seg != segment_copy		34272	0		!=			
ANR	35299	UnaryOperationExpression	* seg		34272	0					
ANR	35300	UnaryOperator	*		34272	0					
ANR	35301	Identifier	seg		34272	1					
ANR	35302	Identifier	segment_copy		34272	1					
ANR	35303	CompoundStatement		196:32:6508:6508	34272	1					
ANR	35304	ExpressionStatement	seg = & ( * seg ) -> next_segment	2320:4:66891:66918	34272	0	True				
ANR	35305	AssignmentExpression	seg = & ( * seg ) -> next_segment		34272	0		=			
ANR	35306	Identifier	seg		34272	0					
ANR	35307	UnaryOperationExpression	& ( * seg ) -> next_segment		34272	1					
ANR	35308	UnaryOperator	&		34272	0					
ANR	35309	PtrMemberAccess	( * seg ) -> next_segment		34272	1					
ANR	35310	UnaryOperationExpression	* seg		34272	0					
ANR	35311	UnaryOperator	*		34272	0					
ANR	35312	Identifier	seg		34272	1					
ANR	35313	Identifier	next_segment		34272	1					
ANR	35314	ExpressionStatement	* seg = segment	2322:3:66928:66942	34272	2	True				
ANR	35315	AssignmentExpression	* seg = segment		34272	0		=			
ANR	35316	UnaryOperationExpression	* seg		34272	0					
ANR	35317	UnaryOperator	*		34272	0					
ANR	35318	Identifier	seg		34272	1					
ANR	35319	Identifier	segment		34272	1					
ANR	35320	ExpressionStatement	mm_block = ( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )	2323:3:66947:67025	34272	3	True				
ANR	35321	AssignmentExpression	mm_block = ( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		34272	0		=			
ANR	35322	Identifier	mm_block		34272	0					
ANR	35323	CastExpression	( zend_mm_block * ) ( ( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE )		34272	1					
ANR	35324	CastTarget	zend_mm_block *		34272	0					
ANR	35325	AdditiveExpression	( char * ) segment + ZEND_MM_ALIGNED_SEGMENT_SIZE		34272	1		+			
ANR	35326	CastExpression	( char * ) segment		34272	0					
ANR	35327	CastTarget	char *		34272	0					
ANR	35328	Identifier	segment		34272	1					
ANR	35329	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		34272	1					
ANR	35330	ExpressionStatement	ZEND_MM_MARK_FIRST_BLOCK ( mm_block )	2324:3:67030:67064	34272	4	True				
ANR	35331	CallExpression	ZEND_MM_MARK_FIRST_BLOCK ( mm_block )		34272	0					
ANR	35332	Callee	ZEND_MM_MARK_FIRST_BLOCK		34272	0					
ANR	35333	Identifier	ZEND_MM_MARK_FIRST_BLOCK		34272	0					
ANR	35334	ArgumentList	mm_block		34272	1					
ANR	35335	Argument	mm_block		34272	0					
ANR	35336	Identifier	mm_block		34272	0					
ANR	35337	ExpressionStatement	block_size = segment_size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE	2327:2:67073:67159	34272	15	True				
ANR	35338	AssignmentExpression	block_size = segment_size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		34272	0		=			
ANR	35339	Identifier	block_size		34272	0					
ANR	35340	AdditiveExpression	segment_size - ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		34272	1		-			
ANR	35341	Identifier	segment_size		34272	0					
ANR	35342	AdditiveExpression	ZEND_MM_ALIGNED_SEGMENT_SIZE - ZEND_MM_ALIGNED_HEADER_SIZE		34272	1		-			
ANR	35343	Identifier	ZEND_MM_ALIGNED_SEGMENT_SIZE		34272	0					
ANR	35344	Identifier	ZEND_MM_ALIGNED_HEADER_SIZE		34272	1					
ANR	35345	ExpressionStatement	remaining_size = block_size - true_size	2328:2:67163:67202	34272	16	True				
ANR	35346	AssignmentExpression	remaining_size = block_size - true_size		34272	0		=			
ANR	35347	Identifier	remaining_size		34272	0					
ANR	35348	AdditiveExpression	block_size - true_size		34272	1		-			
ANR	35349	Identifier	block_size		34272	0					
ANR	35350	Identifier	true_size		34272	1					
ANR	35351	ExpressionStatement	"ZEND_MM_LAST_BLOCK ( ZEND_MM_BLOCK_AT ( mm_block , block_size ) )"	2331:2:67233:67291	34272	17	True				
ANR	35352	CallExpression	"ZEND_MM_LAST_BLOCK ( ZEND_MM_BLOCK_AT ( mm_block , block_size ) )"		34272	0					
ANR	35353	Callee	ZEND_MM_LAST_BLOCK		34272	0					
ANR	35354	Identifier	ZEND_MM_LAST_BLOCK		34272	0					
ANR	35355	ArgumentList	"ZEND_MM_BLOCK_AT ( mm_block , block_size )"		34272	1					
ANR	35356	Argument	"ZEND_MM_BLOCK_AT ( mm_block , block_size )"		34272	0					
ANR	35357	CallExpression	"ZEND_MM_BLOCK_AT ( mm_block , block_size )"		34272	0					
ANR	35358	Callee	ZEND_MM_BLOCK_AT		34272	0					
ANR	35359	Identifier	ZEND_MM_BLOCK_AT		34272	0					
ANR	35360	ArgumentList	mm_block		34272	1					
ANR	35361	Argument	mm_block		34272	0					
ANR	35362	Identifier	mm_block		34272	0					
ANR	35363	Argument	block_size		34272	1					
ANR	35364	Identifier	block_size		34272	0					
ANR	35365	IfStatement	if ( remaining_size < ZEND_MM_ALIGNED_MIN_HEADER_SIZE )		34272	18					
ANR	35366	Condition	remaining_size < ZEND_MM_ALIGNED_MIN_HEADER_SIZE	2333:6:67300:67347	34272	0	True				
ANR	35367	RelationalExpression	remaining_size < ZEND_MM_ALIGNED_MIN_HEADER_SIZE		34272	0		<			
ANR	35368	Identifier	remaining_size		34272	0					
ANR	35369	Identifier	ZEND_MM_ALIGNED_MIN_HEADER_SIZE		34272	1					
ANR	35370	CompoundStatement		210:56:6973:6973	34272	1					
ANR	35371	ExpressionStatement	true_size = block_size	2334:3:67355:67377	34272	0	True				
ANR	35372	AssignmentExpression	true_size = block_size		34272	0		=			
ANR	35373	Identifier	true_size		34272	0					
ANR	35374	Identifier	block_size		34272	1					
ANR	35375	ExpressionStatement	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"	2335:3:67382:67436	34272	1	True				
ANR	35376	CallExpression	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"		34272	0					
ANR	35377	Callee	ZEND_MM_BLOCK		34272	0					
ANR	35378	Identifier	ZEND_MM_BLOCK		34272	0					
ANR	35379	ArgumentList	mm_block		34272	1					
ANR	35380	Argument	mm_block		34272	0					
ANR	35381	Identifier	mm_block		34272	0					
ANR	35382	Argument	ZEND_MM_USED_BLOCK		34272	1					
ANR	35383	Identifier	ZEND_MM_USED_BLOCK		34272	0					
ANR	35384	Argument	true_size		34272	2					
ANR	35385	Identifier	true_size		34272	0					
ANR	35386	ElseStatement	else		34272	0					
ANR	35387	CompoundStatement		214:3:7075:7109	34272	0					
ANR	35388	IdentifierDeclStatement	zend_mm_free_block * new_free_block ;	2337:3:67452:67486	34272	0	True				
ANR	35389	IdentifierDecl	* new_free_block		34272	0					
ANR	35390	IdentifierDeclType	zend_mm_free_block *		34272	0					
ANR	35391	Identifier	new_free_block		34272	1					
ANR	35392	ExpressionStatement	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"	2340:3:67524:67578	34272	1	True				
ANR	35393	CallExpression	"ZEND_MM_BLOCK ( mm_block , ZEND_MM_USED_BLOCK , true_size )"		34272	0					
ANR	35394	Callee	ZEND_MM_BLOCK		34272	0					
ANR	35395	Identifier	ZEND_MM_BLOCK		34272	0					
ANR	35396	ArgumentList	mm_block		34272	1					
ANR	35397	Argument	mm_block		34272	0					
ANR	35398	Identifier	mm_block		34272	0					
ANR	35399	Argument	ZEND_MM_USED_BLOCK		34272	1					
ANR	35400	Identifier	ZEND_MM_USED_BLOCK		34272	0					
ANR	35401	Argument	true_size		34272	2					
ANR	35402	Identifier	true_size		34272	0					
ANR	35403	ExpressionStatement	"new_free_block = ( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( mm_block , true_size )"	2341:3:67583:67660	34272	2	True				
ANR	35404	AssignmentExpression	"new_free_block = ( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( mm_block , true_size )"		34272	0		=			
ANR	35405	Identifier	new_free_block		34272	0					
ANR	35406	CastExpression	"( zend_mm_free_block * ) ZEND_MM_BLOCK_AT ( mm_block , true_size )"		34272	1					
ANR	35407	CastTarget	zend_mm_free_block *		34272	0					
ANR	35408	CallExpression	"ZEND_MM_BLOCK_AT ( mm_block , true_size )"		34272	1					
ANR	35409	Callee	ZEND_MM_BLOCK_AT		34272	0					
ANR	35410	Identifier	ZEND_MM_BLOCK_AT		34272	0					
ANR	35411	ArgumentList	mm_block		34272	1					
ANR	35412	Argument	mm_block		34272	0					
ANR	35413	Identifier	mm_block		34272	0					
ANR	35414	Argument	true_size		34272	1					
ANR	35415	Identifier	true_size		34272	0					
ANR	35416	ExpressionStatement	"ZEND_MM_BLOCK ( new_free_block , ZEND_MM_FREE_BLOCK , remaining_size )"	2342:3:67665:67730	34272	3	True				
ANR	35417	CallExpression	"ZEND_MM_BLOCK ( new_free_block , ZEND_MM_FREE_BLOCK , remaining_size )"		34272	0					
ANR	35418	Callee	ZEND_MM_BLOCK		34272	0					
ANR	35419	Identifier	ZEND_MM_BLOCK		34272	0					
ANR	35420	ArgumentList	new_free_block		34272	1					
ANR	35421	Argument	new_free_block		34272	0					
ANR	35422	Identifier	new_free_block		34272	0					
ANR	35423	Argument	ZEND_MM_FREE_BLOCK		34272	1					
ANR	35424	Identifier	ZEND_MM_FREE_BLOCK		34272	0					
ANR	35425	Argument	remaining_size		34272	2					
ANR	35426	Identifier	remaining_size		34272	0					
ANR	35427	ExpressionStatement	"zend_mm_add_to_rest_list ( heap , new_free_block )"	2345:3:67785:67831	34272	4	True				
ANR	35428	CallExpression	"zend_mm_add_to_rest_list ( heap , new_free_block )"		34272	0					
ANR	35429	Callee	zend_mm_add_to_rest_list		34272	0					
ANR	35430	Identifier	zend_mm_add_to_rest_list		34272	0					
ANR	35431	ArgumentList	heap		34272	1					
ANR	35432	Argument	heap		34272	0					
ANR	35433	Identifier	heap		34272	0					
ANR	35434	Argument	new_free_block		34272	1					
ANR	35435	Identifier	new_free_block		34272	0					
ANR	35436	ExpressionStatement	"ZEND_MM_SET_DEBUG_INFO ( mm_block , size , 1 , 1 )"	2348:2:67840:67884	34272	19	True				
ANR	35437	CallExpression	"ZEND_MM_SET_DEBUG_INFO ( mm_block , size , 1 , 1 )"		34272	0					
ANR	35438	Callee	ZEND_MM_SET_DEBUG_INFO		34272	0					
ANR	35439	Identifier	ZEND_MM_SET_DEBUG_INFO		34272	0					
ANR	35440	ArgumentList	mm_block		34272	1					
ANR	35441	Argument	mm_block		34272	0					
ANR	35442	Identifier	mm_block		34272	0					
ANR	35443	Argument	size		34272	1					
ANR	35444	Identifier	size		34272	0					
ANR	35445	Argument	1		34272	2					
ANR	35446	PrimaryExpression	1		34272	0					
ANR	35447	Argument	1		34272	3					
ANR	35448	PrimaryExpression	1		34272	0					
ANR	35449	ExpressionStatement	heap -> size = heap -> size + true_size - orig_size	2350:2:67889:67936	34272	20	True				
ANR	35450	AssignmentExpression	heap -> size = heap -> size + true_size - orig_size		34272	0		=			
ANR	35451	PtrMemberAccess	heap -> size		34272	0					
ANR	35452	Identifier	heap		34272	0					
ANR	35453	Identifier	size		34272	1					
ANR	35454	AdditiveExpression	heap -> size + true_size - orig_size		34272	1		+			
ANR	35455	PtrMemberAccess	heap -> size		34272	0					
ANR	35456	Identifier	heap		34272	0					
ANR	35457	Identifier	size		34272	1					
ANR	35458	AdditiveExpression	true_size - orig_size		34272	1		-			
ANR	35459	Identifier	true_size		34272	0					
ANR	35460	Identifier	orig_size		34272	1					
ANR	35461	IfStatement	if ( heap -> peak < heap -> size )		34272	21					
ANR	35462	Condition	heap -> peak < heap -> size	2351:6:67944:67966	34272	0	True				
ANR	35463	RelationalExpression	heap -> peak < heap -> size		34272	0		<			
ANR	35464	PtrMemberAccess	heap -> peak		34272	0					
ANR	35465	Identifier	heap		34272	0					
ANR	35466	Identifier	peak		34272	1					
ANR	35467	PtrMemberAccess	heap -> size		34272	1					
ANR	35468	Identifier	heap		34272	0					
ANR	35469	Identifier	size		34272	1					
ANR	35470	CompoundStatement		228:31:7592:7592	34272	1					
ANR	35471	ExpressionStatement	heap -> peak = heap -> size	2352:3:67974:67997	34272	0	True				
ANR	35472	AssignmentExpression	heap -> peak = heap -> size		34272	0		=			
ANR	35473	PtrMemberAccess	heap -> peak		34272	0					
ANR	35474	Identifier	heap		34272	0					
ANR	35475	Identifier	peak		34272	1					
ANR	35476	PtrMemberAccess	heap -> size		34272	1					
ANR	35477	Identifier	heap		34272	0					
ANR	35478	Identifier	size		34272	1					
ANR	35479	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2355:2:68006:68036	34272	22	True				
ANR	35480	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		34272	0					
ANR	35481	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	35482	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	35483	ArgumentList			34272	1					
ANR	35484	ReturnStatement	return ZEND_MM_DATA_OF ( mm_block ) ;	2356:2:68040:68072	34272	23	True				
ANR	35485	CallExpression	ZEND_MM_DATA_OF ( mm_block )		34272	0					
ANR	35486	Callee	ZEND_MM_DATA_OF		34272	0					
ANR	35487	Identifier	ZEND_MM_DATA_OF		34272	0					
ANR	35488	ArgumentList	mm_block		34272	1					
ANR	35489	Argument	mm_block		34272	0					
ANR	35490	Identifier	mm_block		34272	0					
ANR	35491	Statement	ptr	2359:1:68079:68081	34272	17	True				
ANR	35492	Statement	=	2359:5:68083:68083	34272	18	True				
ANR	35493	Statement	_zend_mm_alloc_int	2359:7:68085:68102	34272	19	True				
ANR	35494	Statement	(	2359:25:68103:68103	34272	20	True				
ANR	35495	Statement	heap	2359:26:68104:68107	34272	21	True				
ANR	35496	Statement	","	2359:30:68108:68108	34272	22	True				
ANR	35497	Statement	size	2359:32:68110:68113	34272	23	True				
ANR	35498	Statement	ZEND_FILE_LINE_RELAY_CC	2359:37:68115:68137	34272	24	True				
ANR	35499	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2359:61:68139:68166	34272	25	True				
ANR	35500	Statement	)	2359:89:68167:68167	34272	26	True				
ANR	35501	ExpressionStatement		2359:90:68168:68168	34272	27	True				
ANR	35502	ExpressionStatement	"memcpy ( ptr , p , mm_block -> debug . size )"	2361:1:68213:68249	34272	28	True				
ANR	35503	CallExpression	"memcpy ( ptr , p , mm_block -> debug . size )"		34272	0					
ANR	35504	Callee	memcpy		34272	0					
ANR	35505	Identifier	memcpy		34272	0					
ANR	35506	ArgumentList	ptr		34272	1					
ANR	35507	Argument	ptr		34272	0					
ANR	35508	Identifier	ptr		34272	0					
ANR	35509	Argument	p		34272	1					
ANR	35510	Identifier	p		34272	0					
ANR	35511	Argument	mm_block -> debug . size		34272	2					
ANR	35512	MemberAccess	mm_block -> debug . size		34272	0					
ANR	35513	PtrMemberAccess	mm_block -> debug		34272	0					
ANR	35514	Identifier	mm_block		34272	0					
ANR	35515	Identifier	debug		34272	1					
ANR	35516	Identifier	size		34272	1					
ANR	35517	Statement	_zend_mm_free_int	2365:1:68323:68339	34272	29	True				
ANR	35518	Statement	(	2365:18:68340:68340	34272	30	True				
ANR	35519	Statement	heap	2365:19:68341:68344	34272	31	True				
ANR	35520	Statement	","	2365:23:68345:68345	34272	32	True				
ANR	35521	Statement	p	2365:25:68347:68347	34272	33	True				
ANR	35522	Statement	ZEND_FILE_LINE_RELAY_CC	2365:27:68349:68371	34272	34	True				
ANR	35523	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2365:51:68373:68400	34272	35	True				
ANR	35524	Statement	)	2365:79:68401:68401	34272	36	True				
ANR	35525	ExpressionStatement		2365:80:68402:68402	34272	37	True				
ANR	35526	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2366:1:68405:68435	34272	38	True				
ANR	35527	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		34272	0					
ANR	35528	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	35529	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		34272	0					
ANR	35530	ArgumentList			34272	1					
ANR	35531	ReturnStatement	return ptr ;	2367:1:68438:68448	34272	39	True				
ANR	35532	Identifier	ptr		34272	0					
ANR	35533	ReturnType	static void *		34272	1					
ANR	35534	Identifier	_zend_mm_realloc_int		34272	2					
ANR	35535	ParameterList	"zend_mm_heap * heap , void * p , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		34272	3					
ANR	35536	Parameter	zend_mm_heap * heap	2123:34:60293:60310	34272	0	True				
ANR	35537	ParameterType	zend_mm_heap *		34272	0					
ANR	35538	Identifier	heap		34272	1					
ANR	35539	Parameter	void * p	2123:54:60313:60319	34272	1	True				
ANR	35540	ParameterType	void *		34272	0					
ANR	35541	Identifier	p		34272	1					
ANR	35542	Parameter	size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2123:63:60322:60373	34272	2	True				
ANR	35543	ParameterType	size_t size ZEND_FILE_LINE_DC		34272	0					
ANR	35544	Identifier	ZEND_FILE_LINE_ORIG_DC		34272	1					
ANR	35545	CFGEntryNode	ENTRY		34272		True				
ANR	35546	CFGExitNode	EXIT		34272		True				
ANR	35547	Symbol	* * heap		34272						
ANR	35548	Symbol	* best_fit		34272						
ANR	35549	Symbol	heap -> cache_stat [ index ] . hit		34272						
ANR	35550	Symbol	* index		34272						
ANR	35551	Symbol	* cache		34272						
ANR	35552	Symbol	ZEND_MM_HEADER_OF		34272						
ANR	35553	Symbol	ZEND_MM_VALID_PTR		34272						
ANR	35554	Symbol	heap -> block_size		34272						
ANR	35555	Symbol	segment		34272						
ANR	35556	Symbol	heap -> cached		34272						
ANR	35557	Symbol	ZEND_MM_IS_FIRST_BLOCK		34272						
ANR	35558	Symbol	ZEND_MM_TRUE_SIZE		34272						
ANR	35559	Symbol	cache		34272						
ANR	35560	Symbol	NULL		34272						
ANR	35561	Symbol	heap -> cache_stat [ index ] . max_count		34272						
ANR	35562	Symbol	__zend_lineno		34272						
ANR	35563	Symbol	heap -> real_size		34272						
ANR	35564	Symbol	index		34272						
ANR	35565	Symbol	heap -> cache_stat		34272						
ANR	35566	Symbol	ZEND_MM_IS_GUARD_BLOCK		34272						
ANR	35567	Symbol	orig_size		34272						
ANR	35568	Symbol	* segment_copy		34272						
ANR	35569	Symbol	heap -> peak		34272						
ANR	35570	Symbol	mm_block -> debug		34272						
ANR	35571	Symbol	size		34272						
ANR	35572	Symbol	ZEND_MM_IS_FREE_BLOCK		34272						
ANR	35573	Symbol	mm_block		34272						
ANR	35574	Symbol	segment -> size		34272						
ANR	35575	Symbol	ZEND_MM_DATA_OF		34272						
ANR	35576	Symbol	* segment		34272						
ANR	35577	Symbol	* heap -> cache_stat		34272						
ANR	35578	Symbol	* heap		34272						
ANR	35579	Symbol	heap -> cache		34272						
ANR	35580	Symbol	* seg		34272						
ANR	35581	Symbol	heap -> cache_stat [ index ] . count		34272						
ANR	35582	Symbol	& heap -> segments_list		34272						
ANR	35583	Symbol	heap -> real_peak		34272						
ANR	35584	Symbol	ZEND_FILE_LINE_ORIG_DC		34272						
ANR	35585	Symbol	ZEND_MM_FREE_BLOCK		34272						
ANR	35586	Symbol	UNEXPECTED		34272						
ANR	35587	Symbol	best_fit -> prev_free_block		34272						
ANR	35588	Symbol	ZEND_MM_STORAGE_REALLOC		34272						
ANR	35589	Symbol	ZEND_MM_USED_BLOCK		34272						
ANR	35590	Symbol	heap -> size		34272						
ANR	35591	Symbol	* mm_block		34272						
ANR	35592	Symbol	segment_size		34272						
ANR	35593	Symbol	ZEND_MM_ALIGNED_HEADER_SIZE		34272						
ANR	35594	Symbol	seg		34272						
ANR	35595	Symbol	__zend_filename		34272						
ANR	35596	Symbol	segment_copy		34272						
ANR	35597	Symbol	ZEND_MM_FREE_BLOCK_SIZE		34272						
ANR	35598	Symbol	true_size		34272						
ANR	35599	Symbol	heap		34272						
ANR	35600	Symbol	block_size		34272						
ANR	35601	Symbol	ZEND_MM_BLOCK_SIZE		34272						
ANR	35602	Symbol	ZEND_MM_BUCKET_INDEX		34272						
ANR	35603	Symbol	* heap -> cache		34272						
ANR	35604	Symbol	next_block		34272						
ANR	35605	Symbol	best_fit		34272						
ANR	35606	Symbol	remaining_size		34272						
ANR	35607	Symbol	ZEND_MM_BLOCK_AT		34272						
ANR	35608	Symbol	ptr		34272						
ANR	35609	Symbol	segment_copy -> size		34272						
ANR	35610	Symbol	p		34272						
ANR	35611	Symbol	MEM_BLOCK_CACHED		34272						
ANR	35612	Symbol	new_free_block		34272						
ANR	35613	Symbol	ZEND_MM_SMALL_SIZE		34272						
ANR	35614	Symbol	ZEND_MM_ALIGNED_SEGMENT_SIZE		34272						
ANR	35615	Symbol	mm_block -> debug . size		34272						
ANR	35616	Symbol	( ( zend_mm_free_block * ) mm_block ) -> prev_free_block		34272						
ANR	35617	Symbol	heap -> limit		34272						
ANR	35618	Symbol	& ( * seg ) -> next_segment		34272						
ANR	35619	Symbol	ZEND_MM_ALIGNED_MIN_HEADER_SIZE		34272						
ANR	35620	Function	_zend_mm_alloc	2370:0:68453:68652							
ANR	35621	FunctionDef	"_zend_mm_alloc (zend_mm_heap * heap , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		35620	0					
ANR	35622	CompoundStatement		2371:0:68557:68652	35620	0					
ANR	35623	Statement	return	2372:1:68560:68565	35620	0	True				
ANR	35624	Statement	_zend_mm_alloc_int	2372:8:68567:68584	35620	1	True				
ANR	35625	Statement	(	2372:26:68585:68585	35620	2	True				
ANR	35626	Statement	heap	2372:27:68586:68589	35620	3	True				
ANR	35627	Statement	","	2372:31:68590:68590	35620	4	True				
ANR	35628	Statement	size	2372:33:68592:68595	35620	5	True				
ANR	35629	Statement	ZEND_FILE_LINE_RELAY_CC	2372:38:68597:68619	35620	6	True				
ANR	35630	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2372:62:68621:68648	35620	7	True				
ANR	35631	Statement	)	2372:90:68649:68649	35620	8	True				
ANR	35632	ExpressionStatement		2372:91:68650:68650	35620	9	True				
ANR	35633	ReturnType	ZEND_API void *		35620	1					
ANR	35634	Identifier	_zend_mm_alloc		35620	2					
ANR	35635	ParameterList	"zend_mm_heap * heap , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		35620	3					
ANR	35636	Parameter	zend_mm_heap * heap	2370:30:68483:68500	35620	0	True				
ANR	35637	ParameterType	zend_mm_heap *		35620	0					
ANR	35638	Identifier	heap		35620	1					
ANR	35639	Parameter	size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2370:50:68503:68554	35620	1	True				
ANR	35640	ParameterType	size_t size ZEND_FILE_LINE_DC		35620	0					
ANR	35641	Identifier	ZEND_FILE_LINE_ORIG_DC		35620	1					
ANR	35642	CFGEntryNode	ENTRY		35620		True				
ANR	35643	CFGExitNode	EXIT		35620		True				
ANR	35644	Symbol	ZEND_FILE_LINE_ORIG_DC		35620						
ANR	35645	Symbol	heap		35620						
ANR	35646	Function	_zend_mm_realloc	2380:0:68840:69059							
ANR	35647	FunctionDef	"_zend_mm_realloc (zend_mm_heap * heap , void * ptr , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		35646	0					
ANR	35648	CompoundStatement		2381:0:68957:69059	35646	0					
ANR	35649	Statement	return	2382:1:68960:68965	35646	0	True				
ANR	35650	Statement	_zend_mm_realloc_int	2382:8:68967:68986	35646	1	True				
ANR	35651	Statement	(	2382:28:68987:68987	35646	2	True				
ANR	35652	Statement	heap	2382:29:68988:68991	35646	3	True				
ANR	35653	Statement	","	2382:33:68992:68992	35646	4	True				
ANR	35654	Statement	ptr	2382:35:68994:68996	35646	5	True				
ANR	35655	Statement	","	2382:38:68997:68997	35646	6	True				
ANR	35656	Statement	size	2382:40:68999:69002	35646	7	True				
ANR	35657	Statement	ZEND_FILE_LINE_RELAY_CC	2382:45:69004:69026	35646	8	True				
ANR	35658	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2382:69:69028:69055	35646	9	True				
ANR	35659	Statement	)	2382:97:69056:69056	35646	10	True				
ANR	35660	ExpressionStatement		2382:98:69057:69057	35646	11	True				
ANR	35661	ReturnType	ZEND_API void *		35646	1					
ANR	35662	Identifier	_zend_mm_realloc		35646	2					
ANR	35663	ParameterList	"zend_mm_heap * heap , void * ptr , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		35646	3					
ANR	35664	Parameter	zend_mm_heap * heap	2380:32:68872:68889	35646	0	True				
ANR	35665	ParameterType	zend_mm_heap *		35646	0					
ANR	35666	Identifier	heap		35646	1					
ANR	35667	Parameter	void * ptr	2380:52:68892:68900	35646	1	True				
ANR	35668	ParameterType	void *		35646	0					
ANR	35669	Identifier	ptr		35646	1					
ANR	35670	Parameter	size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2380:63:68903:68954	35646	2	True				
ANR	35671	ParameterType	size_t size ZEND_FILE_LINE_DC		35646	0					
ANR	35672	Identifier	ZEND_FILE_LINE_ORIG_DC		35646	1					
ANR	35673	CFGEntryNode	ENTRY		35646		True				
ANR	35674	CFGExitNode	EXIT		35646		True				
ANR	35675	Symbol	ZEND_FILE_LINE_ORIG_DC		35646						
ANR	35676	Symbol	heap		35646						
ANR	35677	Symbol	ptr		35646						
ANR	35678	DeclStmt									
ANR	35679	Decl							zend_mm_block	zend_mm_block *	mm_block
ANR	35680	ClassDef	_zend_alloc_globals	2405:8:69523:69596							
ANR	35681	DeclStmt									
ANR	35682	Decl							zend_mm_heap	zend_mm_heap *	mm_heap
ANR	35683	DeclStmt									
ANR	35684	Decl							_zend_alloc_globals	_zend_alloc_globals	zend_alloc_globals
ANR	35685	DeclStmt									
ANR	35686	Decl							int	int	alloc_globals_id
ANR	35687	DeclStmt									
ANR	35688	Decl							zend_alloc_globals	zend_alloc_globals	alloc_globals
ANR	35689	Function	_emalloc	2422:0:69867:70154							
ANR	35690	FunctionDef	_emalloc (size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)		35689	0					
ANR	35691	CompoundStatement		2423:0:69945:70154	35689	0					
ANR	35692	ExpressionStatement	TSRMLS_FETCH ( )	2424:1:69948:69962	35689	0	True				
ANR	35693	CallExpression	TSRMLS_FETCH ( )		35689	0					
ANR	35694	Callee	TSRMLS_FETCH		35689	0					
ANR	35695	Identifier	TSRMLS_FETCH		35689	0					
ANR	35696	ArgumentList			35689	1					
ANR	35697	IfStatement	if ( UNEXPECTED ( ! AG ( mm_heap ) -> use_zend_alloc ) )		35689	1					
ANR	35698	Condition	UNEXPECTED ( ! AG ( mm_heap ) -> use_zend_alloc )	2426:5:69970:70009	35689	0	True				
ANR	35699	CallExpression	UNEXPECTED ( ! AG ( mm_heap ) -> use_zend_alloc )		35689	0					
ANR	35700	Callee	UNEXPECTED		35689	0					
ANR	35701	Identifier	UNEXPECTED		35689	0					
ANR	35702	ArgumentList	! AG ( mm_heap ) -> use_zend_alloc		35689	1					
ANR	35703	Argument	! AG ( mm_heap ) -> use_zend_alloc		35689	0					
ANR	35704	UnaryOperationExpression	! AG ( mm_heap ) -> use_zend_alloc		35689	0					
ANR	35705	UnaryOperator	!		35689	0					
ANR	35706	PtrMemberAccess	AG ( mm_heap ) -> use_zend_alloc		35689	1					
ANR	35707	CallExpression	AG ( mm_heap )		35689	0					
ANR	35708	Callee	AG		35689	0					
ANR	35709	Identifier	AG		35689	0					
ANR	35710	ArgumentList	mm_heap		35689	1					
ANR	35711	Argument	mm_heap		35689	0					
ANR	35712	Identifier	mm_heap		35689	0					
ANR	35713	Identifier	use_zend_alloc		35689	1					
ANR	35714	CompoundStatement		4:47:66:66	35689	1					
ANR	35715	ReturnStatement	return AG ( mm_heap ) -> _malloc ( size ) ;	2427:2:70016:70049	35689	0	True				
ANR	35716	CallExpression	AG ( mm_heap ) -> _malloc ( size )		35689	0					
ANR	35717	Callee	AG ( mm_heap ) -> _malloc		35689	0					
ANR	35718	PtrMemberAccess	AG ( mm_heap ) -> _malloc		35689	0					
ANR	35719	CallExpression	AG ( mm_heap )		35689	0					
ANR	35720	Callee	AG		35689	0					
ANR	35721	Identifier	AG		35689	0					
ANR	35722	ArgumentList	mm_heap		35689	1					
ANR	35723	Argument	mm_heap		35689	0					
ANR	35724	Identifier	mm_heap		35689	0					
ANR	35725	Identifier	_malloc		35689	1					
ANR	35726	ArgumentList	size		35689	1					
ANR	35727	Argument	size		35689	0					
ANR	35728	Identifier	size		35689	0					
ANR	35729	Statement	return	2429:1:70055:70060	35689	2	True				
ANR	35730	Statement	_zend_mm_alloc_int	2429:8:70062:70079	35689	3	True				
ANR	35731	Statement	(	2429:26:70080:70080	35689	4	True				
ANR	35732	Statement	AG	2429:27:70081:70082	35689	5	True				
ANR	35733	Statement	(	2429:29:70083:70083	35689	6	True				
ANR	35734	Statement	mm_heap	2429:30:70084:70090	35689	7	True				
ANR	35735	Statement	)	2429:37:70091:70091	35689	8	True				
ANR	35736	Statement	","	2429:38:70092:70092	35689	9	True				
ANR	35737	Statement	size	2429:40:70094:70097	35689	10	True				
ANR	35738	Statement	ZEND_FILE_LINE_RELAY_CC	2429:45:70099:70121	35689	11	True				
ANR	35739	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2429:69:70123:70150	35689	12	True				
ANR	35740	Statement	)	2429:97:70151:70151	35689	13	True				
ANR	35741	ExpressionStatement		2429:98:70152:70152	35689	14	True				
ANR	35742	ReturnType	ZEND_API void *		35689	1					
ANR	35743	Identifier	_emalloc		35689	2					
ANR	35744	ParameterList	size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC		35689	3					
ANR	35745	Parameter	size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2422:24:69891:69942	35689	0	True				
ANR	35746	ParameterType	size_t size ZEND_FILE_LINE_DC		35689	0					
ANR	35747	Identifier	ZEND_FILE_LINE_ORIG_DC		35689	1					
ANR	35748	CFGEntryNode	ENTRY		35689		True				
ANR	35749	CFGExitNode	EXIT		35689		True				
ANR	35750	Symbol	UNEXPECTED		35689						
ANR	35751	Symbol	size		35689						
ANR	35752	Symbol	AG		35689						
ANR	35753	Symbol	AG ( mm_heap ) -> _malloc		35689						
ANR	35754	Symbol	AG ( mm_heap ) -> use_zend_alloc		35689						
ANR	35755	Symbol	mm_heap		35689						
ANR	35756	Symbol	ZEND_FILE_LINE_ORIG_DC		35689						
ANR	35757	Symbol	* AG		35689						
ANR	35758	Function	_erealloc	2443:0:70433:70764							
ANR	35759	FunctionDef	"_erealloc (void * ptr , size_t size , int allow_failure ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		35758	0					
ANR	35760	CompoundStatement		2444:0:70542:70764	35758	0					
ANR	35761	ExpressionStatement	TSRMLS_FETCH ( )	2445:1:70545:70559	35758	0	True				
ANR	35762	CallExpression	TSRMLS_FETCH ( )		35758	0					
ANR	35763	Callee	TSRMLS_FETCH		35758	0					
ANR	35764	Identifier	TSRMLS_FETCH		35758	0					
ANR	35765	ArgumentList			35758	1					
ANR	35766	IfStatement	if ( UNEXPECTED ( ! AG ( mm_heap ) -> use_zend_alloc ) )		35758	1					
ANR	35767	Condition	UNEXPECTED ( ! AG ( mm_heap ) -> use_zend_alloc )	2447:5:70567:70606	35758	0	True				
ANR	35768	CallExpression	UNEXPECTED ( ! AG ( mm_heap ) -> use_zend_alloc )		35758	0					
ANR	35769	Callee	UNEXPECTED		35758	0					
ANR	35770	Identifier	UNEXPECTED		35758	0					
ANR	35771	ArgumentList	! AG ( mm_heap ) -> use_zend_alloc		35758	1					
ANR	35772	Argument	! AG ( mm_heap ) -> use_zend_alloc		35758	0					
ANR	35773	UnaryOperationExpression	! AG ( mm_heap ) -> use_zend_alloc		35758	0					
ANR	35774	UnaryOperator	!		35758	0					
ANR	35775	PtrMemberAccess	AG ( mm_heap ) -> use_zend_alloc		35758	1					
ANR	35776	CallExpression	AG ( mm_heap )		35758	0					
ANR	35777	Callee	AG		35758	0					
ANR	35778	Identifier	AG		35758	0					
ANR	35779	ArgumentList	mm_heap		35758	1					
ANR	35780	Argument	mm_heap		35758	0					
ANR	35781	Identifier	mm_heap		35758	0					
ANR	35782	Identifier	use_zend_alloc		35758	1					
ANR	35783	CompoundStatement		4:47:66:66	35758	1					
ANR	35784	ReturnStatement	"return AG ( mm_heap ) -> _realloc ( ptr , size ) ;"	2448:2:70613:70652	35758	0	True				
ANR	35785	CallExpression	"AG ( mm_heap ) -> _realloc ( ptr , size )"		35758	0					
ANR	35786	Callee	AG ( mm_heap ) -> _realloc		35758	0					
ANR	35787	PtrMemberAccess	AG ( mm_heap ) -> _realloc		35758	0					
ANR	35788	CallExpression	AG ( mm_heap )		35758	0					
ANR	35789	Callee	AG		35758	0					
ANR	35790	Identifier	AG		35758	0					
ANR	35791	ArgumentList	mm_heap		35758	1					
ANR	35792	Argument	mm_heap		35758	0					
ANR	35793	Identifier	mm_heap		35758	0					
ANR	35794	Identifier	_realloc		35758	1					
ANR	35795	ArgumentList	ptr		35758	1					
ANR	35796	Argument	ptr		35758	0					
ANR	35797	Identifier	ptr		35758	0					
ANR	35798	Argument	size		35758	1					
ANR	35799	Identifier	size		35758	0					
ANR	35800	Statement	return	2450:1:70658:70663	35758	2	True				
ANR	35801	Statement	_zend_mm_realloc_int	2450:8:70665:70684	35758	3	True				
ANR	35802	Statement	(	2450:28:70685:70685	35758	4	True				
ANR	35803	Statement	AG	2450:29:70686:70687	35758	5	True				
ANR	35804	Statement	(	2450:31:70688:70688	35758	6	True				
ANR	35805	Statement	mm_heap	2450:32:70689:70695	35758	7	True				
ANR	35806	Statement	)	2450:39:70696:70696	35758	8	True				
ANR	35807	Statement	","	2450:40:70697:70697	35758	9	True				
ANR	35808	Statement	ptr	2450:42:70699:70701	35758	10	True				
ANR	35809	Statement	","	2450:45:70702:70702	35758	11	True				
ANR	35810	Statement	size	2450:47:70704:70707	35758	12	True				
ANR	35811	Statement	ZEND_FILE_LINE_RELAY_CC	2450:52:70709:70731	35758	13	True				
ANR	35812	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2450:76:70733:70760	35758	14	True				
ANR	35813	Statement	)	2450:104:70761:70761	35758	15	True				
ANR	35814	ExpressionStatement		2450:105:70762:70762	35758	16	True				
ANR	35815	ReturnType	ZEND_API void *		35758	1					
ANR	35816	Identifier	_erealloc		35758	2					
ANR	35817	ParameterList	"void * ptr , size_t size , int allow_failure ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		35758	3					
ANR	35818	Parameter	void * ptr	2443:25:70458:70466	35758	0	True				
ANR	35819	ParameterType	void *		35758	0					
ANR	35820	Identifier	ptr		35758	1					
ANR	35821	Parameter	size_t size	2443:36:70469:70479	35758	1	True				
ANR	35822	ParameterType	size_t		35758	0					
ANR	35823	Identifier	size		35758	1					
ANR	35824	Parameter	int allow_failure ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2443:49:70482:70539	35758	2	True				
ANR	35825	ParameterType	int allow_failure ZEND_FILE_LINE_DC		35758	0					
ANR	35826	Identifier	ZEND_FILE_LINE_ORIG_DC		35758	1					
ANR	35827	CFGEntryNode	ENTRY		35758		True				
ANR	35828	CFGExitNode	EXIT		35758		True				
ANR	35829	Symbol	UNEXPECTED		35758						
ANR	35830	Symbol	size		35758						
ANR	35831	Symbol	AG		35758						
ANR	35832	Symbol	AG ( mm_heap ) -> use_zend_alloc		35758						
ANR	35833	Symbol	mm_heap		35758						
ANR	35834	Symbol	ZEND_FILE_LINE_ORIG_DC		35758						
ANR	35835	Symbol	AG ( mm_heap ) -> _realloc		35758						
ANR	35836	Symbol	ptr		35758						
ANR	35837	Symbol	* AG		35758						
ANR	35838	Function	safe_address	2463:0:71107:71562							
ANR	35839	FunctionDef	"safe_address (size_t nmemb , size_t size , size_t offset)"		35838	0					
ANR	35840	CompoundStatement		2464:0:71183:71562	35838	0					
ANR	35841	IdentifierDeclStatement	size_t res = nmemb ;	2465:1:71186:71204	35838	0	True				
ANR	35842	IdentifierDecl	res = nmemb		35838	0					
ANR	35843	IdentifierDeclType	size_t		35838	0					
ANR	35844	Identifier	res		35838	1					
ANR	35845	AssignmentExpression	res = nmemb		35838	2		=			
ANR	35846	Identifier	nmemb		35838	0					
ANR	35847	Identifier	nmemb		35838	1					
ANR	35848	IdentifierDeclStatement	unsigned long overflow = 0 ;	2466:1:71207:71233	35838	1	True				
ANR	35849	IdentifierDecl	overflow = 0		35838	0					
ANR	35850	IdentifierDeclType	unsigned long		35838	0					
ANR	35851	Identifier	overflow		35838	1					
ANR	35852	AssignmentExpression	overflow = 0		35838	2		=			
ANR	35853	Identifier	overflow		35838	0					
ANR	35854	PrimaryExpression	0		35838	1					
ANR	35855	Statement	__asm__	2468:1:71237:71243	35838	2	True				
ANR	35856	Statement	(	2468:9:71245:71245	35838	3	True				
ANR	35857	Statement	"""mull %3\\n\\taddl %4,%0\\n\\tadcl $0,%1"""	2468:10:71246:71282	35838	4	True				
ANR	35858	Statement	:	2469:6:71290:71290	35838	5	True				
ANR	35859	Statement	"""=&a"""	2469:8:71292:71296	35838	6	True				
ANR	35860	Statement	(	2469:13:71297:71297	35838	7	True				
ANR	35861	Statement	res	2469:14:71298:71300	35838	8	True				
ANR	35862	Statement	)	2469:17:71301:71301	35838	9	True				
ANR	35863	Statement	","	2469:18:71302:71302	35838	10	True				
ANR	35864	Statement	"""=&d"""	2469:20:71304:71308	35838	11	True				
ANR	35865	Statement	(	2469:26:71310:71310	35838	12	True				
ANR	35866	Statement	overflow	2469:27:71311:71318	35838	13	True				
ANR	35867	Statement	)	2469:35:71319:71319	35838	14	True				
ANR	35868	Statement	:	2470:6:71327:71327	35838	15	True				
ANR	35869	Statement	"""%0"""	2470:8:71329:71332	35838	16	True				
ANR	35870	Statement	(	2470:12:71333:71333	35838	17	True				
ANR	35871	Statement	res	2470:13:71334:71336	35838	18	True				
ANR	35872	Statement	)	2470:16:71337:71337	35838	19	True				
ANR	35873	Statement	","	2470:17:71338:71338	35838	20	True				
ANR	35874	Statement	"""rm"""	2471:8:71348:71351	35838	21	True				
ANR	35875	Statement	(	2471:12:71352:71352	35838	22	True				
ANR	35876	Statement	size	2471:13:71353:71356	35838	23	True				
ANR	35877	Statement	)	2471:17:71357:71357	35838	24	True				
ANR	35878	Statement	","	2471:18:71358:71358	35838	25	True				
ANR	35879	Statement	"""rm"""	2472:8:71368:71371	35838	26	True				
ANR	35880	Statement	(	2472:12:71372:71372	35838	27	True				
ANR	35881	Statement	offset	2472:13:71373:71378	35838	28	True				
ANR	35882	Statement	)	2472:19:71379:71379	35838	29	True				
ANR	35883	Statement	)	2472:20:71380:71380	35838	30	True				
ANR	35884	ExpressionStatement		2472:21:71381:71381	35838	31	True				
ANR	35885	IfStatement	if ( UNEXPECTED ( overflow ) )		35838	32					
ANR	35886	Condition	UNEXPECTED ( overflow )	2474:5:71389:71408	35838	0	True				
ANR	35887	CallExpression	UNEXPECTED ( overflow )		35838	0					
ANR	35888	Callee	UNEXPECTED		35838	0					
ANR	35889	Identifier	UNEXPECTED		35838	0					
ANR	35890	ArgumentList	overflow		35838	1					
ANR	35891	Argument	overflow		35838	0					
ANR	35892	Identifier	overflow		35838	0					
ANR	35893	CompoundStatement		11:27:227:227	35838	1					
ANR	35894	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"	2475:2:71415:71532	35838	0	True				
ANR	35895	CallExpression	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"		35838	0					
ANR	35896	Callee	zend_error_noreturn		35838	0					
ANR	35897	Identifier	zend_error_noreturn		35838	0					
ANR	35898	ArgumentList	E_ERROR		35838	1					
ANR	35899	Argument	E_ERROR		35838	0					
ANR	35900	Identifier	E_ERROR		35838	0					
ANR	35901	Argument	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		35838	1					
ANR	35902	PrimaryExpression	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		35838	0					
ANR	35903	Argument	nmemb		35838	2					
ANR	35904	Identifier	nmemb		35838	0					
ANR	35905	Argument	size		35838	3					
ANR	35906	Identifier	size		35838	0					
ANR	35907	Argument	offset		35838	4					
ANR	35908	Identifier	offset		35838	0					
ANR	35909	ReturnStatement	return 0 ;	2476:2:71536:71544	35838	1	True				
ANR	35910	PrimaryExpression	0		35838	0					
ANR	35911	ReturnStatement	return res ;	2478:1:71550:71560	35838	33	True				
ANR	35912	Identifier	res		35838	0					
ANR	35913	ReturnType	static inline size_t		35838	1					
ANR	35914	Identifier	safe_address		35838	2					
ANR	35915	ParameterList	"size_t nmemb , size_t size , size_t offset"		35838	3					
ANR	35916	Parameter	size_t nmemb	2463:34:71141:71152	35838	0	True				
ANR	35917	ParameterType	size_t		35838	0					
ANR	35918	Identifier	nmemb		35838	1					
ANR	35919	Parameter	size_t size	2463:48:71155:71165	35838	1	True				
ANR	35920	ParameterType	size_t		35838	0					
ANR	35921	Identifier	size		35838	1					
ANR	35922	Parameter	size_t offset	2463:61:71168:71180	35838	2	True				
ANR	35923	ParameterType	size_t		35838	0					
ANR	35924	Identifier	offset		35838	1					
ANR	35925	CFGEntryNode	ENTRY		35838		True				
ANR	35926	CFGExitNode	EXIT		35838		True				
ANR	35927	Symbol	UNEXPECTED		35838						
ANR	35928	Symbol	res		35838						
ANR	35929	Symbol	overflow		35838						
ANR	35930	Symbol	E_ERROR		35838						
ANR	35931	Symbol	size		35838						
ANR	35932	Symbol	offset		35838						
ANR	35933	Symbol	nmemb		35838						
ANR	35934	Function	safe_address	2483:0:71613:72325							
ANR	35935	FunctionDef	"safe_address (size_t nmemb , size_t size , size_t offset)"		35934	0					
ANR	35936	CompoundStatement		2484:0:71689:72325	35934	0					
ANR	35937	IdentifierDeclStatement	size_t res = nmemb ;	2485:8:71699:71717	35934	0	True				
ANR	35938	IdentifierDecl	res = nmemb		35934	0					
ANR	35939	IdentifierDeclType	size_t		35934	0					
ANR	35940	Identifier	res		35934	1					
ANR	35941	AssignmentExpression	res = nmemb		35934	2		=			
ANR	35942	Identifier	nmemb		35934	0					
ANR	35943	Identifier	nmemb		35934	1					
ANR	35944	IdentifierDeclStatement	unsigned long overflow = 0 ;	2486:8:71727:71753	35934	1	True				
ANR	35945	IdentifierDecl	overflow = 0		35934	0					
ANR	35946	IdentifierDeclType	unsigned long		35934	0					
ANR	35947	Identifier	overflow		35934	1					
ANR	35948	AssignmentExpression	overflow = 0		35934	2		=			
ANR	35949	Identifier	overflow		35934	0					
ANR	35950	PrimaryExpression	0		35934	1					
ANR	35951	Statement	define	2489:2:71785:71790	35934	2	True				
ANR	35952	Statement	LP_SUFF	2489:9:71792:71798	35934	3	True				
ANR	35953	Statement	"""l"""	2489:17:71800:71802	35934	4	True				
ANR	35954	Statement	__asm__	2494:8:71859:71865	35934	5	True				
ANR	35955	Statement	(	2494:16:71867:71867	35934	6	True				
ANR	35956	Statement	"""mul"""	2494:17:71868:71872	35934	7	True				
ANR	35957	Statement	LP_SUFF	2494:23:71874:71880	35934	8	True				
ANR	35958	Statement	""" %3\\n\\t"""	2494:32:71883:71891	35934	9	True				
ANR	35959	Statement	"""add %4,%0\\n\\t"""	2495:17:71910:71924	35934	10	True				
ANR	35960	Statement	"""adc $0,%1"""	2496:17:71943:71953	35934	11	True				
ANR	35961	Statement	:	2497:13:71968:71968	35934	12	True				
ANR	35962	Statement	"""=&a"""	2497:15:71970:71974	35934	13	True				
ANR	35963	Statement	(	2497:20:71975:71975	35934	14	True				
ANR	35964	Statement	res	2497:21:71976:71978	35934	15	True				
ANR	35965	Statement	)	2497:24:71979:71979	35934	16	True				
ANR	35966	Statement	","	2497:25:71980:71980	35934	17	True				
ANR	35967	Statement	"""=&d"""	2497:27:71982:71986	35934	18	True				
ANR	35968	Statement	(	2497:33:71988:71988	35934	19	True				
ANR	35969	Statement	overflow	2497:34:71989:71996	35934	20	True				
ANR	35970	Statement	)	2497:42:71997:71997	35934	21	True				
ANR	35971	Statement	:	2498:13:72012:72012	35934	22	True				
ANR	35972	Statement	"""%0"""	2498:15:72014:72017	35934	23	True				
ANR	35973	Statement	(	2498:19:72018:72018	35934	24	True				
ANR	35974	Statement	res	2498:20:72019:72021	35934	25	True				
ANR	35975	Statement	)	2498:23:72022:72022	35934	26	True				
ANR	35976	Statement	","	2498:24:72023:72023	35934	27	True				
ANR	35977	Statement	"""rm"""	2499:15:72040:72043	35934	28	True				
ANR	35978	Statement	(	2499:19:72044:72044	35934	29	True				
ANR	35979	Statement	size	2499:20:72045:72048	35934	30	True				
ANR	35980	Statement	)	2499:24:72049:72049	35934	31	True				
ANR	35981	Statement	","	2499:25:72050:72050	35934	32	True				
ANR	35982	Statement	"""rm"""	2500:15:72067:72070	35934	33	True				
ANR	35983	Statement	(	2500:19:72071:72071	35934	34	True				
ANR	35984	Statement	offset	2500:20:72072:72077	35934	35	True				
ANR	35985	Statement	)	2500:26:72078:72078	35934	36	True				
ANR	35986	Statement	)	2500:27:72079:72079	35934	37	True				
ANR	35987	ExpressionStatement		2500:28:72080:72080	35934	38	True				
ANR	35988	Statement	undef	2502:1:72084:72088	35934	39	True				
ANR	35989	Statement	LP_SUFF	2502:7:72090:72096	35934	40	True				
ANR	35990	IfStatement	if ( UNEXPECTED ( overflow ) )		35934	41					
ANR	35991	Condition	UNEXPECTED ( overflow )	2503:12:72110:72129	35934	0	True				
ANR	35992	CallExpression	UNEXPECTED ( overflow )		35934	0					
ANR	35993	Callee	UNEXPECTED		35934	0					
ANR	35994	Identifier	UNEXPECTED		35934	0					
ANR	35995	ArgumentList	overflow		35934	1					
ANR	35996	Argument	overflow		35934	0					
ANR	35997	Identifier	overflow		35934	0					
ANR	35998	CompoundStatement		20:34:442:442	35934	1					
ANR	35999	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"	2504:16:72150:72267	35934	0	True				
ANR	36000	CallExpression	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"		35934	0					
ANR	36001	Callee	zend_error_noreturn		35934	0					
ANR	36002	Identifier	zend_error_noreturn		35934	0					
ANR	36003	ArgumentList	E_ERROR		35934	1					
ANR	36004	Argument	E_ERROR		35934	0					
ANR	36005	Identifier	E_ERROR		35934	0					
ANR	36006	Argument	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		35934	1					
ANR	36007	PrimaryExpression	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		35934	0					
ANR	36008	Argument	nmemb		35934	2					
ANR	36009	Identifier	nmemb		35934	0					
ANR	36010	Argument	size		35934	3					
ANR	36011	Identifier	size		35934	0					
ANR	36012	Argument	offset		35934	4					
ANR	36013	Identifier	offset		35934	0					
ANR	36014	ReturnStatement	return 0 ;	2505:16:72285:72293	35934	1	True				
ANR	36015	PrimaryExpression	0		35934	0					
ANR	36016	ReturnStatement	return res ;	2507:8:72313:72323	35934	42	True				
ANR	36017	Identifier	res		35934	0					
ANR	36018	ReturnType	static inline size_t		35934	1					
ANR	36019	Identifier	safe_address		35934	2					
ANR	36020	ParameterList	"size_t nmemb , size_t size , size_t offset"		35934	3					
ANR	36021	Parameter	size_t nmemb	2483:34:71647:71658	35934	0	True				
ANR	36022	ParameterType	size_t		35934	0					
ANR	36023	Identifier	nmemb		35934	1					
ANR	36024	Parameter	size_t size	2483:48:71661:71671	35934	1	True				
ANR	36025	ParameterType	size_t		35934	0					
ANR	36026	Identifier	size		35934	1					
ANR	36027	Parameter	size_t offset	2483:61:71674:71686	35934	2	True				
ANR	36028	ParameterType	size_t		35934	0					
ANR	36029	Identifier	offset		35934	1					
ANR	36030	CFGEntryNode	ENTRY		35934		True				
ANR	36031	CFGExitNode	EXIT		35934		True				
ANR	36032	Symbol	UNEXPECTED		35934						
ANR	36033	Symbol	res		35934						
ANR	36034	Symbol	overflow		35934						
ANR	36035	Symbol	E_ERROR		35934						
ANR	36036	Symbol	size		35934						
ANR	36037	Symbol	offset		35934						
ANR	36038	Symbol	nmemb		35934						
ANR	36039	Function	safe_address	2512:0:72373:72915							
ANR	36040	FunctionDef	"safe_address (size_t nmemb , size_t size , size_t offset)"		36039	0					
ANR	36041	CompoundStatement		2513:0:72449:72915	36039	0					
ANR	36042	IdentifierDeclStatement	size_t res ;	2514:8:72459:72469	36039	0	True				
ANR	36043	IdentifierDecl	res		36039	0					
ANR	36044	IdentifierDeclType	size_t		36039	0					
ANR	36045	Identifier	res		36039	1					
ANR	36046	IdentifierDeclStatement	unsigned long overflow ;	2515:8:72479:72501	36039	1	True				
ANR	36047	IdentifierDecl	overflow		36039	0					
ANR	36048	IdentifierDeclType	unsigned long		36039	0					
ANR	36049	Identifier	overflow		36039	1					
ANR	36050	Statement	__asm__	2517:8:72512:72518	36039	2	True				
ANR	36051	Statement	(	2517:16:72520:72520	36039	3	True				
ANR	36052	Statement	"""umlal %0,%1,%2,%3"""	2517:17:72521:72539	36039	4	True				
ANR	36053	Statement	:	2518:13:72554:72554	36039	5	True				
ANR	36054	Statement	"""=r"""	2518:15:72556:72559	36039	6	True				
ANR	36055	Statement	(	2518:19:72560:72560	36039	7	True				
ANR	36056	Statement	res	2518:20:72561:72563	36039	8	True				
ANR	36057	Statement	)	2518:23:72564:72564	36039	9	True				
ANR	36058	Statement	","	2518:24:72565:72565	36039	10	True				
ANR	36059	Statement	"""=r"""	2518:26:72567:72570	36039	11	True				
ANR	36060	Statement	(	2518:30:72571:72571	36039	12	True				
ANR	36061	Statement	overflow	2518:31:72572:72579	36039	13	True				
ANR	36062	Statement	)	2518:39:72580:72580	36039	14	True				
ANR	36063	Statement	:	2519:13:72595:72595	36039	15	True				
ANR	36064	Statement	"""r"""	2519:15:72597:72599	36039	16	True				
ANR	36065	Statement	(	2519:18:72600:72600	36039	17	True				
ANR	36066	Statement	nmemb	2519:19:72601:72605	36039	18	True				
ANR	36067	Statement	)	2519:24:72606:72606	36039	19	True				
ANR	36068	Statement	","	2519:25:72607:72607	36039	20	True				
ANR	36069	Statement	"""r"""	2520:15:72624:72626	36039	21	True				
ANR	36070	Statement	(	2520:18:72627:72627	36039	22	True				
ANR	36071	Statement	size	2520:19:72628:72631	36039	23	True				
ANR	36072	Statement	)	2520:23:72632:72632	36039	24	True				
ANR	36073	Statement	","	2520:24:72633:72633	36039	25	True				
ANR	36074	Statement	"""0"""	2521:15:72650:72652	36039	26	True				
ANR	36075	Statement	(	2521:18:72653:72653	36039	27	True				
ANR	36076	Statement	offset	2521:19:72654:72659	36039	28	True				
ANR	36077	Statement	)	2521:25:72660:72660	36039	29	True				
ANR	36078	Statement	","	2521:26:72661:72661	36039	30	True				
ANR	36079	Statement	"""1"""	2522:15:72678:72680	36039	31	True				
ANR	36080	Statement	(	2522:18:72681:72681	36039	32	True				
ANR	36081	Statement	0	2522:19:72682:72682	36039	33	True				
ANR	36082	Statement	)	2522:20:72683:72683	36039	34	True				
ANR	36083	Statement	)	2522:21:72684:72684	36039	35	True				
ANR	36084	ExpressionStatement		2522:22:72685:72685	36039	36	True				
ANR	36085	IfStatement	if ( UNEXPECTED ( overflow ) )		36039	37					
ANR	36086	Condition	UNEXPECTED ( overflow )	2524:12:72700:72719	36039	0	True				
ANR	36087	CallExpression	UNEXPECTED ( overflow )		36039	0					
ANR	36088	Callee	UNEXPECTED		36039	0					
ANR	36089	Identifier	UNEXPECTED		36039	0					
ANR	36090	ArgumentList	overflow		36039	1					
ANR	36091	Argument	overflow		36039	0					
ANR	36092	Identifier	overflow		36039	0					
ANR	36093	CompoundStatement		12:34:272:272	36039	1					
ANR	36094	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"	2525:16:72740:72857	36039	0	True				
ANR	36095	CallExpression	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"		36039	0					
ANR	36096	Callee	zend_error_noreturn		36039	0					
ANR	36097	Identifier	zend_error_noreturn		36039	0					
ANR	36098	ArgumentList	E_ERROR		36039	1					
ANR	36099	Argument	E_ERROR		36039	0					
ANR	36100	Identifier	E_ERROR		36039	0					
ANR	36101	Argument	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		36039	1					
ANR	36102	PrimaryExpression	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		36039	0					
ANR	36103	Argument	nmemb		36039	2					
ANR	36104	Identifier	nmemb		36039	0					
ANR	36105	Argument	size		36039	3					
ANR	36106	Identifier	size		36039	0					
ANR	36107	Argument	offset		36039	4					
ANR	36108	Identifier	offset		36039	0					
ANR	36109	ReturnStatement	return 0 ;	2526:16:72875:72883	36039	1	True				
ANR	36110	PrimaryExpression	0		36039	0					
ANR	36111	ReturnStatement	return res ;	2528:8:72903:72913	36039	38	True				
ANR	36112	Identifier	res		36039	0					
ANR	36113	ReturnType	static inline size_t		36039	1					
ANR	36114	Identifier	safe_address		36039	2					
ANR	36115	ParameterList	"size_t nmemb , size_t size , size_t offset"		36039	3					
ANR	36116	Parameter	size_t nmemb	2512:34:72407:72418	36039	0	True				
ANR	36117	ParameterType	size_t		36039	0					
ANR	36118	Identifier	nmemb		36039	1					
ANR	36119	Parameter	size_t size	2512:48:72421:72431	36039	1	True				
ANR	36120	ParameterType	size_t		36039	0					
ANR	36121	Identifier	size		36039	1					
ANR	36122	Parameter	size_t offset	2512:61:72434:72446	36039	2	True				
ANR	36123	ParameterType	size_t		36039	0					
ANR	36124	Identifier	offset		36039	1					
ANR	36125	CFGEntryNode	ENTRY		36039		True				
ANR	36126	CFGExitNode	EXIT		36039		True				
ANR	36127	Symbol	UNEXPECTED		36039						
ANR	36128	Symbol	res		36039						
ANR	36129	Symbol	overflow		36039						
ANR	36130	Symbol	E_ERROR		36039						
ANR	36131	Symbol	size		36039						
ANR	36132	Symbol	offset		36039						
ANR	36133	Symbol	nmemb		36039						
ANR	36134	Function	safe_address	2533:0:72967:73535							
ANR	36135	FunctionDef	"safe_address (size_t nmemb , size_t size , size_t offset)"		36134	0					
ANR	36136	CompoundStatement		2534:0:73043:73535	36134	0					
ANR	36137	IdentifierDeclStatement	size_t res ;	2535:8:73053:73063	36134	0	True				
ANR	36138	IdentifierDecl	res		36134	0					
ANR	36139	IdentifierDeclType	size_t		36134	0					
ANR	36140	Identifier	res		36134	1					
ANR	36141	IdentifierDeclStatement	unsigned long overflow ;	2536:8:73073:73095	36134	1	True				
ANR	36142	IdentifierDecl	overflow		36134	0					
ANR	36143	IdentifierDeclType	unsigned long		36134	0					
ANR	36144	Identifier	overflow		36134	1					
ANR	36145	Statement	__asm__	2538:8:73106:73112	36134	2	True				
ANR	36146	Statement	(	2538:16:73114:73114	36134	3	True				
ANR	36147	Statement	"""mul %0,%2,%3\\n\\tumulh %1,%2,%3\\n\\tadds %0,%0,%4\\n\\tadc %1,%1,xzr"""	2538:17:73115:73180	36134	4	True				
ANR	36148	Statement	:	2539:13:73195:73195	36134	5	True				
ANR	36149	Statement	"""=&r"""	2539:15:73197:73201	36134	6	True				
ANR	36150	Statement	(	2539:20:73202:73202	36134	7	True				
ANR	36151	Statement	res	2539:21:73203:73205	36134	8	True				
ANR	36152	Statement	)	2539:24:73206:73206	36134	9	True				
ANR	36153	Statement	","	2539:25:73207:73207	36134	10	True				
ANR	36154	Statement	"""=&r"""	2539:27:73209:73213	36134	11	True				
ANR	36155	Statement	(	2539:32:73214:73214	36134	12	True				
ANR	36156	Statement	overflow	2539:33:73215:73222	36134	13	True				
ANR	36157	Statement	)	2539:41:73223:73223	36134	14	True				
ANR	36158	Statement	:	2540:13:73238:73238	36134	15	True				
ANR	36159	Statement	"""r"""	2540:15:73240:73242	36134	16	True				
ANR	36160	Statement	(	2540:18:73243:73243	36134	17	True				
ANR	36161	Statement	nmemb	2540:19:73244:73248	36134	18	True				
ANR	36162	Statement	)	2540:24:73249:73249	36134	19	True				
ANR	36163	Statement	","	2540:25:73250:73250	36134	20	True				
ANR	36164	Statement	"""r"""	2541:15:73267:73269	36134	21	True				
ANR	36165	Statement	(	2541:18:73270:73270	36134	22	True				
ANR	36166	Statement	size	2541:19:73271:73274	36134	23	True				
ANR	36167	Statement	)	2541:23:73275:73275	36134	24	True				
ANR	36168	Statement	","	2541:24:73276:73276	36134	25	True				
ANR	36169	Statement	"""r"""	2542:15:73293:73295	36134	26	True				
ANR	36170	Statement	(	2542:18:73296:73296	36134	27	True				
ANR	36171	Statement	offset	2542:19:73297:73302	36134	28	True				
ANR	36172	Statement	)	2542:25:73303:73303	36134	29	True				
ANR	36173	Statement	)	2542:26:73304:73304	36134	30	True				
ANR	36174	ExpressionStatement		2542:27:73305:73305	36134	31	True				
ANR	36175	IfStatement	if ( UNEXPECTED ( overflow ) )		36134	32					
ANR	36176	Condition	UNEXPECTED ( overflow )	2544:12:73320:73339	36134	0	True				
ANR	36177	CallExpression	UNEXPECTED ( overflow )		36134	0					
ANR	36178	Callee	UNEXPECTED		36134	0					
ANR	36179	Identifier	UNEXPECTED		36134	0					
ANR	36180	ArgumentList	overflow		36134	1					
ANR	36181	Argument	overflow		36134	0					
ANR	36182	Identifier	overflow		36134	0					
ANR	36183	CompoundStatement		11:34:298:298	36134	1					
ANR	36184	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"	2545:16:73360:73477	36134	0	True				
ANR	36185	CallExpression	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"		36134	0					
ANR	36186	Callee	zend_error_noreturn		36134	0					
ANR	36187	Identifier	zend_error_noreturn		36134	0					
ANR	36188	ArgumentList	E_ERROR		36134	1					
ANR	36189	Argument	E_ERROR		36134	0					
ANR	36190	Identifier	E_ERROR		36134	0					
ANR	36191	Argument	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		36134	1					
ANR	36192	PrimaryExpression	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		36134	0					
ANR	36193	Argument	nmemb		36134	2					
ANR	36194	Identifier	nmemb		36134	0					
ANR	36195	Argument	size		36134	3					
ANR	36196	Identifier	size		36134	0					
ANR	36197	Argument	offset		36134	4					
ANR	36198	Identifier	offset		36134	0					
ANR	36199	ReturnStatement	return 0 ;	2546:16:73495:73503	36134	1	True				
ANR	36200	PrimaryExpression	0		36134	0					
ANR	36201	ReturnStatement	return res ;	2548:8:73523:73533	36134	33	True				
ANR	36202	Identifier	res		36134	0					
ANR	36203	ReturnType	static inline size_t		36134	1					
ANR	36204	Identifier	safe_address		36134	2					
ANR	36205	ParameterList	"size_t nmemb , size_t size , size_t offset"		36134	3					
ANR	36206	Parameter	size_t nmemb	2533:34:73001:73012	36134	0	True				
ANR	36207	ParameterType	size_t		36134	0					
ANR	36208	Identifier	nmemb		36134	1					
ANR	36209	Parameter	size_t size	2533:48:73015:73025	36134	1	True				
ANR	36210	ParameterType	size_t		36134	0					
ANR	36211	Identifier	size		36134	1					
ANR	36212	Parameter	size_t offset	2533:61:73028:73040	36134	2	True				
ANR	36213	ParameterType	size_t		36134	0					
ANR	36214	Identifier	offset		36134	1					
ANR	36215	CFGEntryNode	ENTRY		36134		True				
ANR	36216	CFGExitNode	EXIT		36134		True				
ANR	36217	Symbol	UNEXPECTED		36134						
ANR	36218	Symbol	res		36134						
ANR	36219	Symbol	overflow		36134						
ANR	36220	Symbol	E_ERROR		36134						
ANR	36221	Symbol	size		36134						
ANR	36222	Symbol	offset		36134						
ANR	36223	Symbol	nmemb		36134						
ANR	36224	Function	safe_address	2553:0:73593:73967							
ANR	36225	FunctionDef	"safe_address (size_t nmemb , size_t size , size_t offset)"		36224	0					
ANR	36226	CompoundStatement		2554:0:73669:73967	36224	0					
ANR	36227	IdentifierDeclStatement	zend_ulong64 res = ( zend_ulong64 ) nmemb * ( zend_ulong64 ) size + ( zend_ulong64 ) offset ;	2555:1:73672:73754	36224	0	True				
ANR	36228	IdentifierDecl	res = ( zend_ulong64 ) nmemb * ( zend_ulong64 ) size + ( zend_ulong64 ) offset		36224	0					
ANR	36229	IdentifierDeclType	zend_ulong64		36224	0					
ANR	36230	Identifier	res		36224	1					
ANR	36231	AssignmentExpression	res = ( zend_ulong64 ) nmemb * ( zend_ulong64 ) size + ( zend_ulong64 ) offset		36224	2		=			
ANR	36232	Identifier	res		36224	0					
ANR	36233	AdditiveExpression	( zend_ulong64 ) nmemb * ( zend_ulong64 ) size + ( zend_ulong64 ) offset		36224	1		+			
ANR	36234	MultiplicativeExpression	( zend_ulong64 ) nmemb * ( zend_ulong64 ) size		36224	0		*			
ANR	36235	CastExpression	( zend_ulong64 ) nmemb		36224	0					
ANR	36236	CastTarget	zend_ulong64		36224	0					
ANR	36237	Identifier	nmemb		36224	1					
ANR	36238	CastExpression	( zend_ulong64 ) size		36224	1					
ANR	36239	CastTarget	zend_ulong64		36224	0					
ANR	36240	Identifier	size		36224	1					
ANR	36241	CastExpression	( zend_ulong64 ) offset		36224	1					
ANR	36242	CastTarget	zend_ulong64		36224	0					
ANR	36243	Identifier	offset		36224	1					
ANR	36244	IfStatement	if ( UNEXPECTED ( res > ( zend_ulong64 ) 0xFFFFFFFFL ) )		36224	1					
ANR	36245	Condition	UNEXPECTED ( res > ( zend_ulong64 ) 0xFFFFFFFFL )	2557:5:73762:73804	36224	0	True				
ANR	36246	CallExpression	UNEXPECTED ( res > ( zend_ulong64 ) 0xFFFFFFFFL )		36224	0					
ANR	36247	Callee	UNEXPECTED		36224	0					
ANR	36248	Identifier	UNEXPECTED		36224	0					
ANR	36249	ArgumentList	res > ( zend_ulong64 ) 0xFFFFFFFFL		36224	1					
ANR	36250	Argument	res > ( zend_ulong64 ) 0xFFFFFFFFL		36224	0					
ANR	36251	RelationalExpression	res > ( zend_ulong64 ) 0xFFFFFFFFL		36224	0		>			
ANR	36252	Identifier	res		36224	0					
ANR	36253	CastExpression	( zend_ulong64 ) 0xFFFFFFFFL		36224	1					
ANR	36254	CastTarget	zend_ulong64		36224	0					
ANR	36255	PrimaryExpression	0xFFFFFFFFL		36224	1					
ANR	36256	CompoundStatement		4:50:137:137	36224	1					
ANR	36257	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"	2558:2:73811:73928	36224	0	True				
ANR	36258	CallExpression	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"		36224	0					
ANR	36259	Callee	zend_error_noreturn		36224	0					
ANR	36260	Identifier	zend_error_noreturn		36224	0					
ANR	36261	ArgumentList	E_ERROR		36224	1					
ANR	36262	Argument	E_ERROR		36224	0					
ANR	36263	Identifier	E_ERROR		36224	0					
ANR	36264	Argument	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		36224	1					
ANR	36265	PrimaryExpression	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		36224	0					
ANR	36266	Argument	nmemb		36224	2					
ANR	36267	Identifier	nmemb		36224	0					
ANR	36268	Argument	size		36224	3					
ANR	36269	Identifier	size		36224	0					
ANR	36270	Argument	offset		36224	4					
ANR	36271	Identifier	offset		36224	0					
ANR	36272	ReturnStatement	return 0 ;	2559:2:73932:73940	36224	1	True				
ANR	36273	PrimaryExpression	0		36224	0					
ANR	36274	ReturnStatement	return ( size_t ) res ;	2561:1:73946:73965	36224	2	True				
ANR	36275	CastExpression	( size_t ) res		36224	0					
ANR	36276	CastTarget	size_t		36224	0					
ANR	36277	Identifier	res		36224	1					
ANR	36278	ReturnType	static inline size_t		36224	1					
ANR	36279	Identifier	safe_address		36224	2					
ANR	36280	ParameterList	"size_t nmemb , size_t size , size_t offset"		36224	3					
ANR	36281	Parameter	size_t nmemb	2553:34:73627:73638	36224	0	True				
ANR	36282	ParameterType	size_t		36224	0					
ANR	36283	Identifier	nmemb		36224	1					
ANR	36284	Parameter	size_t size	2553:48:73641:73651	36224	1	True				
ANR	36285	ParameterType	size_t		36224	0					
ANR	36286	Identifier	size		36224	1					
ANR	36287	Parameter	size_t offset	2553:61:73654:73666	36224	2	True				
ANR	36288	ParameterType	size_t		36224	0					
ANR	36289	Identifier	offset		36224	1					
ANR	36290	CFGEntryNode	ENTRY		36224		True				
ANR	36291	CFGExitNode	EXIT		36224		True				
ANR	36292	Symbol	UNEXPECTED		36224						
ANR	36293	Symbol	res		36224						
ANR	36294	Symbol	E_ERROR		36224						
ANR	36295	Symbol	size		36224						
ANR	36296	Symbol	offset		36224						
ANR	36297	Symbol	nmemb		36224						
ANR	36298	Function	safe_address	2566:0:73977:74379							
ANR	36299	FunctionDef	"safe_address (size_t nmemb , size_t size , size_t offset)"		36298	0					
ANR	36300	CompoundStatement		2567:0:74053:74379	36298	0					
ANR	36301	IdentifierDeclStatement	size_t res = nmemb * size + offset ;	2568:1:74056:74090	36298	0	True				
ANR	36302	IdentifierDecl	res = nmemb * size + offset		36298	0					
ANR	36303	IdentifierDeclType	size_t		36298	0					
ANR	36304	Identifier	res		36298	1					
ANR	36305	AssignmentExpression	res = nmemb * size + offset		36298	2		=			
ANR	36306	Identifier	res		36298	0					
ANR	36307	AdditiveExpression	nmemb * size + offset		36298	1		+			
ANR	36308	MultiplicativeExpression	nmemb * size		36298	0		*			
ANR	36309	Identifier	nmemb		36298	0					
ANR	36310	Identifier	size		36298	1					
ANR	36311	Identifier	offset		36298	1					
ANR	36312	IdentifierDeclStatement	double _d = ( double ) nmemb * ( double ) size + ( double ) offset ;	2569:1:74093:74151	36298	1	True				
ANR	36313	IdentifierDecl	_d = ( double ) nmemb * ( double ) size + ( double ) offset		36298	0					
ANR	36314	IdentifierDeclType	double		36298	0					
ANR	36315	Identifier	_d		36298	1					
ANR	36316	AssignmentExpression	_d = ( double ) nmemb * ( double ) size + ( double ) offset		36298	2		=			
ANR	36317	Identifier	_d		36298	0					
ANR	36318	AdditiveExpression	( double ) nmemb * ( double ) size + ( double ) offset		36298	1		+			
ANR	36319	MultiplicativeExpression	( double ) nmemb * ( double ) size		36298	0		*			
ANR	36320	CastExpression	( double ) nmemb		36298	0					
ANR	36321	CastTarget	double		36298	0					
ANR	36322	Identifier	nmemb		36298	1					
ANR	36323	CastExpression	( double ) size		36298	1					
ANR	36324	CastTarget	double		36298	0					
ANR	36325	Identifier	size		36298	1					
ANR	36326	CastExpression	( double ) offset		36298	1					
ANR	36327	CastTarget	double		36298	0					
ANR	36328	Identifier	offset		36298	1					
ANR	36329	IdentifierDeclStatement	double _delta = ( double ) res - _d ;	2570:1:74154:74186	36298	2	True				
ANR	36330	IdentifierDecl	_delta = ( double ) res - _d		36298	0					
ANR	36331	IdentifierDeclType	double		36298	0					
ANR	36332	Identifier	_delta		36298	1					
ANR	36333	AssignmentExpression	_delta = ( double ) res - _d		36298	2		=			
ANR	36334	Identifier	_delta		36298	0					
ANR	36335	AdditiveExpression	( double ) res - _d		36298	1		-			
ANR	36336	CastExpression	( double ) res		36298	0					
ANR	36337	CastTarget	double		36298	0					
ANR	36338	Identifier	res		36298	1					
ANR	36339	Identifier	_d		36298	1					
ANR	36340	IfStatement	if ( UNEXPECTED ( ( _d + _delta ) != _d ) )		36298	3					
ANR	36341	Condition	UNEXPECTED ( ( _d + _delta ) != _d )	2572:5:74194:74225	36298	0	True				
ANR	36342	CallExpression	UNEXPECTED ( ( _d + _delta ) != _d )		36298	0					
ANR	36343	Callee	UNEXPECTED		36298	0					
ANR	36344	Identifier	UNEXPECTED		36298	0					
ANR	36345	ArgumentList	( _d + _delta ) != _d		36298	1					
ANR	36346	Argument	( _d + _delta ) != _d		36298	0					
ANR	36347	EqualityExpression	( _d + _delta ) != _d		36298	0		!=			
ANR	36348	AdditiveExpression	_d + _delta		36298	0		+			
ANR	36349	Identifier	_d		36298	0					
ANR	36350	Identifier	_delta		36298	1					
ANR	36351	Identifier	_d		36298	1					
ANR	36352	CompoundStatement		6:39:174:174	36298	1					
ANR	36353	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"	2573:2:74232:74349	36298	0	True				
ANR	36354	CallExpression	"zend_error_noreturn ( E_ERROR , ""Possible integer overflow in memory allocation (%zu * %zu + %zu)"" , nmemb , size , offset )"		36298	0					
ANR	36355	Callee	zend_error_noreturn		36298	0					
ANR	36356	Identifier	zend_error_noreturn		36298	0					
ANR	36357	ArgumentList	E_ERROR		36298	1					
ANR	36358	Argument	E_ERROR		36298	0					
ANR	36359	Identifier	E_ERROR		36298	0					
ANR	36360	Argument	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		36298	1					
ANR	36361	PrimaryExpression	"""Possible integer overflow in memory allocation (%zu * %zu + %zu)"""		36298	0					
ANR	36362	Argument	nmemb		36298	2					
ANR	36363	Identifier	nmemb		36298	0					
ANR	36364	Argument	size		36298	3					
ANR	36365	Identifier	size		36298	0					
ANR	36366	Argument	offset		36298	4					
ANR	36367	Identifier	offset		36298	0					
ANR	36368	ReturnStatement	return 0 ;	2574:2:74353:74361	36298	1	True				
ANR	36369	PrimaryExpression	0		36298	0					
ANR	36370	ReturnStatement	return res ;	2576:1:74367:74377	36298	4	True				
ANR	36371	Identifier	res		36298	0					
ANR	36372	ReturnType	static inline size_t		36298	1					
ANR	36373	Identifier	safe_address		36298	2					
ANR	36374	ParameterList	"size_t nmemb , size_t size , size_t offset"		36298	3					
ANR	36375	Parameter	size_t nmemb	2566:34:74011:74022	36298	0	True				
ANR	36376	ParameterType	size_t		36298	0					
ANR	36377	Identifier	nmemb		36298	1					
ANR	36378	Parameter	size_t size	2566:48:74025:74035	36298	1	True				
ANR	36379	ParameterType	size_t		36298	0					
ANR	36380	Identifier	size		36298	1					
ANR	36381	Parameter	size_t offset	2566:61:74038:74050	36298	2	True				
ANR	36382	ParameterType	size_t		36298	0					
ANR	36383	Identifier	offset		36298	1					
ANR	36384	CFGEntryNode	ENTRY		36298		True				
ANR	36385	CFGExitNode	EXIT		36298		True				
ANR	36386	Symbol	UNEXPECTED		36298						
ANR	36387	Symbol	res		36298						
ANR	36388	Symbol	E_ERROR		36298						
ANR	36389	Symbol	size		36298						
ANR	36390	Symbol	offset		36298						
ANR	36391	Symbol	_delta		36298						
ANR	36392	Symbol	_d		36298						
ANR	36393	Symbol	nmemb		36298						
ANR	36394	Function	_safe_emalloc_string	2581:0:74390:74725							
ANR	36395	FunctionDef	"_safe_emalloc_string (size_t nmemb , size_t size , size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		36394	0					
ANR	36396	CompoundStatement		2582:0:74509:74725	36394	0					
ANR	36397	IdentifierDeclStatement	"size_t str_size = safe_address ( nmemb , size , offset ) ;"	2583:1:74512:74563	36394	0	True				
ANR	36398	IdentifierDecl	"str_size = safe_address ( nmemb , size , offset )"		36394	0					
ANR	36399	IdentifierDeclType	size_t		36394	0					
ANR	36400	Identifier	str_size		36394	1					
ANR	36401	AssignmentExpression	"str_size = safe_address ( nmemb , size , offset )"		36394	2		=			
ANR	36402	Identifier	str_size		36394	0					
ANR	36403	CallExpression	"safe_address ( nmemb , size , offset )"		36394	1					
ANR	36404	Callee	safe_address		36394	0					
ANR	36405	Identifier	safe_address		36394	0					
ANR	36406	ArgumentList	nmemb		36394	1					
ANR	36407	Argument	nmemb		36394	0					
ANR	36408	Identifier	nmemb		36394	0					
ANR	36409	Argument	size		36394	1					
ANR	36410	Identifier	size		36394	0					
ANR	36411	Argument	offset		36394	2					
ANR	36412	Identifier	offset		36394	0					
ANR	36413	IfStatement	if ( UNEXPECTED ( str_size > INT_MAX ) )		36394	1					
ANR	36414	Condition	UNEXPECTED ( str_size > INT_MAX )	2584:5:74570:74599	36394	0	True				
ANR	36415	CallExpression	UNEXPECTED ( str_size > INT_MAX )		36394	0					
ANR	36416	Callee	UNEXPECTED		36394	0					
ANR	36417	Identifier	UNEXPECTED		36394	0					
ANR	36418	ArgumentList	str_size > INT_MAX		36394	1					
ANR	36419	Argument	str_size > INT_MAX		36394	0					
ANR	36420	RelationalExpression	str_size > INT_MAX		36394	0		>			
ANR	36421	Identifier	str_size		36394	0					
ANR	36422	Identifier	INT_MAX		36394	1					
ANR	36423	CompoundStatement		3:37:92:92	36394	1					
ANR	36424	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String allocation overflow, max size is %d"" , INT_MAX )"	2585:2:74606:74689	36394	0	True				
ANR	36425	CallExpression	"zend_error_noreturn ( E_ERROR , ""String allocation overflow, max size is %d"" , INT_MAX )"		36394	0					
ANR	36426	Callee	zend_error_noreturn		36394	0					
ANR	36427	Identifier	zend_error_noreturn		36394	0					
ANR	36428	ArgumentList	E_ERROR		36394	1					
ANR	36429	Argument	E_ERROR		36394	0					
ANR	36430	Identifier	E_ERROR		36394	0					
ANR	36431	Argument	"""String allocation overflow, max size is %d"""		36394	1					
ANR	36432	PrimaryExpression	"""String allocation overflow, max size is %d"""		36394	0					
ANR	36433	Argument	INT_MAX		36394	2					
ANR	36434	Identifier	INT_MAX		36394	0					
ANR	36435	ReturnStatement	return emalloc_rel ( str_size ) ;	2587:1:74695:74723	36394	2	True				
ANR	36436	CallExpression	emalloc_rel ( str_size )		36394	0					
ANR	36437	Callee	emalloc_rel		36394	0					
ANR	36438	Identifier	emalloc_rel		36394	0					
ANR	36439	ArgumentList	str_size		36394	1					
ANR	36440	Argument	str_size		36394	0					
ANR	36441	Identifier	str_size		36394	0					
ANR	36442	ReturnType	ZEND_API void *		36394	1					
ANR	36443	Identifier	_safe_emalloc_string		36394	2					
ANR	36444	ParameterList	"size_t nmemb , size_t size , size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		36394	3					
ANR	36445	Parameter	size_t nmemb	2581:36:74426:74437	36394	0	True				
ANR	36446	ParameterType	size_t		36394	0					
ANR	36447	Identifier	nmemb		36394	1					
ANR	36448	Parameter	size_t size	2581:50:74440:74450	36394	1	True				
ANR	36449	ParameterType	size_t		36394	0					
ANR	36450	Identifier	size		36394	1					
ANR	36451	Parameter	size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2581:63:74453:74506	36394	2	True				
ANR	36452	ParameterType	size_t offset ZEND_FILE_LINE_DC		36394	0					
ANR	36453	Identifier	ZEND_FILE_LINE_ORIG_DC		36394	1					
ANR	36454	CFGEntryNode	ENTRY		36394		True				
ANR	36455	CFGExitNode	EXIT		36394		True				
ANR	36456	Symbol	UNEXPECTED		36394						
ANR	36457	Symbol	emalloc_rel		36394						
ANR	36458	Symbol	E_ERROR		36394						
ANR	36459	Symbol	size		36394						
ANR	36460	Symbol	offset		36394						
ANR	36461	Symbol	INT_MAX		36394						
ANR	36462	Symbol	nmemb		36394						
ANR	36463	Symbol	ZEND_FILE_LINE_ORIG_DC		36394						
ANR	36464	Symbol	str_size		36394						
ANR	36465	Symbol	safe_address		36394						
ANR	36466	Function	_safe_emalloc	2590:0:74728:74898							
ANR	36467	FunctionDef	"_safe_emalloc (size_t nmemb , size_t size , size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		36466	0					
ANR	36468	CompoundStatement		2591:0:74840:74898	36466	0					
ANR	36469	ReturnStatement	"return emalloc_rel ( safe_address ( nmemb , size , offset ) ) ;"	2592:1:74843:74896	36466	0	True				
ANR	36470	CallExpression	"emalloc_rel ( safe_address ( nmemb , size , offset ) )"		36466	0					
ANR	36471	Callee	emalloc_rel		36466	0					
ANR	36472	Identifier	emalloc_rel		36466	0					
ANR	36473	ArgumentList	"safe_address ( nmemb , size , offset )"		36466	1					
ANR	36474	Argument	"safe_address ( nmemb , size , offset )"		36466	0					
ANR	36475	CallExpression	"safe_address ( nmemb , size , offset )"		36466	0					
ANR	36476	Callee	safe_address		36466	0					
ANR	36477	Identifier	safe_address		36466	0					
ANR	36478	ArgumentList	nmemb		36466	1					
ANR	36479	Argument	nmemb		36466	0					
ANR	36480	Identifier	nmemb		36466	0					
ANR	36481	Argument	size		36466	1					
ANR	36482	Identifier	size		36466	0					
ANR	36483	Argument	offset		36466	2					
ANR	36484	Identifier	offset		36466	0					
ANR	36485	ReturnType	ZEND_API void *		36466	1					
ANR	36486	Identifier	_safe_emalloc		36466	2					
ANR	36487	ParameterList	"size_t nmemb , size_t size , size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		36466	3					
ANR	36488	Parameter	size_t nmemb	2590:29:74757:74768	36466	0	True				
ANR	36489	ParameterType	size_t		36466	0					
ANR	36490	Identifier	nmemb		36466	1					
ANR	36491	Parameter	size_t size	2590:43:74771:74781	36466	1	True				
ANR	36492	ParameterType	size_t		36466	0					
ANR	36493	Identifier	size		36466	1					
ANR	36494	Parameter	size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2590:56:74784:74837	36466	2	True				
ANR	36495	ParameterType	size_t offset ZEND_FILE_LINE_DC		36466	0					
ANR	36496	Identifier	ZEND_FILE_LINE_ORIG_DC		36466	1					
ANR	36497	CFGEntryNode	ENTRY		36466		True				
ANR	36498	CFGExitNode	EXIT		36466		True				
ANR	36499	Symbol	emalloc_rel		36466						
ANR	36500	Symbol	size		36466						
ANR	36501	Symbol	offset		36466						
ANR	36502	Symbol	nmemb		36466						
ANR	36503	Symbol	ZEND_FILE_LINE_ORIG_DC		36466						
ANR	36504	Symbol	safe_address		36466						
ANR	36505	Function	_safe_malloc	2595:0:74901:75029							
ANR	36506	FunctionDef	"_safe_malloc (size_t nmemb , size_t size , size_t offset)"		36505	0					
ANR	36507	CompoundStatement		2596:0:74971:75029	36505	0					
ANR	36508	ReturnStatement	"return pemalloc ( safe_address ( nmemb , size , offset ) , 1 ) ;"	2597:1:74974:75027	36505	0	True				
ANR	36509	CallExpression	"pemalloc ( safe_address ( nmemb , size , offset ) , 1 )"		36505	0					
ANR	36510	Callee	pemalloc		36505	0					
ANR	36511	Identifier	pemalloc		36505	0					
ANR	36512	ArgumentList	"safe_address ( nmemb , size , offset )"		36505	1					
ANR	36513	Argument	"safe_address ( nmemb , size , offset )"		36505	0					
ANR	36514	CallExpression	"safe_address ( nmemb , size , offset )"		36505	0					
ANR	36515	Callee	safe_address		36505	0					
ANR	36516	Identifier	safe_address		36505	0					
ANR	36517	ArgumentList	nmemb		36505	1					
ANR	36518	Argument	nmemb		36505	0					
ANR	36519	Identifier	nmemb		36505	0					
ANR	36520	Argument	size		36505	1					
ANR	36521	Identifier	size		36505	0					
ANR	36522	Argument	offset		36505	2					
ANR	36523	Identifier	offset		36505	0					
ANR	36524	Argument	1		36505	1					
ANR	36525	PrimaryExpression	1		36505	0					
ANR	36526	ReturnType	ZEND_API void *		36505	1					
ANR	36527	Identifier	_safe_malloc		36505	2					
ANR	36528	ParameterList	"size_t nmemb , size_t size , size_t offset"		36505	3					
ANR	36529	Parameter	size_t nmemb	2595:28:74929:74940	36505	0	True				
ANR	36530	ParameterType	size_t		36505	0					
ANR	36531	Identifier	nmemb		36505	1					
ANR	36532	Parameter	size_t size	2595:42:74943:74953	36505	1	True				
ANR	36533	ParameterType	size_t		36505	0					
ANR	36534	Identifier	size		36505	1					
ANR	36535	Parameter	size_t offset	2595:55:74956:74968	36505	2	True				
ANR	36536	ParameterType	size_t		36505	0					
ANR	36537	Identifier	offset		36505	1					
ANR	36538	CFGEntryNode	ENTRY		36505		True				
ANR	36539	CFGExitNode	EXIT		36505		True				
ANR	36540	Symbol	size		36505						
ANR	36541	Symbol	offset		36505						
ANR	36542	Symbol	nmemb		36505						
ANR	36543	Symbol	safe_address		36505						
ANR	36544	Symbol	pemalloc		36505						
ANR	36545	Function	_safe_erealloc	2600:0:75032:75220							
ANR	36546	FunctionDef	"_safe_erealloc (void * ptr , size_t nmemb , size_t size , size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		36545	0					
ANR	36547	CompoundStatement		2601:0:75156:75220	36545	0					
ANR	36548	ReturnStatement	"return erealloc_rel ( ptr , safe_address ( nmemb , size , offset ) ) ;"	2602:1:75159:75218	36545	0	True				
ANR	36549	CallExpression	"erealloc_rel ( ptr , safe_address ( nmemb , size , offset ) )"		36545	0					
ANR	36550	Callee	erealloc_rel		36545	0					
ANR	36551	Identifier	erealloc_rel		36545	0					
ANR	36552	ArgumentList	ptr		36545	1					
ANR	36553	Argument	ptr		36545	0					
ANR	36554	Identifier	ptr		36545	0					
ANR	36555	Argument	"safe_address ( nmemb , size , offset )"		36545	1					
ANR	36556	CallExpression	"safe_address ( nmemb , size , offset )"		36545	0					
ANR	36557	Callee	safe_address		36545	0					
ANR	36558	Identifier	safe_address		36545	0					
ANR	36559	ArgumentList	nmemb		36545	1					
ANR	36560	Argument	nmemb		36545	0					
ANR	36561	Identifier	nmemb		36545	0					
ANR	36562	Argument	size		36545	1					
ANR	36563	Identifier	size		36545	0					
ANR	36564	Argument	offset		36545	2					
ANR	36565	Identifier	offset		36545	0					
ANR	36566	ReturnType	ZEND_API void *		36545	1					
ANR	36567	Identifier	_safe_erealloc		36545	2					
ANR	36568	ParameterList	"void * ptr , size_t nmemb , size_t size , size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		36545	3					
ANR	36569	Parameter	void * ptr	2600:30:75062:75070	36545	0	True				
ANR	36570	ParameterType	void *		36545	0					
ANR	36571	Identifier	ptr		36545	1					
ANR	36572	Parameter	size_t nmemb	2600:41:75073:75084	36545	1	True				
ANR	36573	ParameterType	size_t		36545	0					
ANR	36574	Identifier	nmemb		36545	1					
ANR	36575	Parameter	size_t size	2600:55:75087:75097	36545	2	True				
ANR	36576	ParameterType	size_t		36545	0					
ANR	36577	Identifier	size		36545	1					
ANR	36578	Parameter	size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2600:68:75100:75153	36545	3	True				
ANR	36579	ParameterType	size_t offset ZEND_FILE_LINE_DC		36545	0					
ANR	36580	Identifier	ZEND_FILE_LINE_ORIG_DC		36545	1					
ANR	36581	CFGEntryNode	ENTRY		36545		True				
ANR	36582	CFGExitNode	EXIT		36545		True				
ANR	36583	Symbol	size		36545						
ANR	36584	Symbol	offset		36545						
ANR	36585	Symbol	erealloc_rel		36545						
ANR	36586	Symbol	nmemb		36545						
ANR	36587	Symbol	ZEND_FILE_LINE_ORIG_DC		36545						
ANR	36588	Symbol	safe_address		36545						
ANR	36589	Symbol	ptr		36545						
ANR	36590	Function	_safe_realloc	2605:0:75223:75369							
ANR	36591	FunctionDef	"_safe_realloc (void * ptr , size_t nmemb , size_t size , size_t offset)"		36590	0					
ANR	36592	CompoundStatement		2606:0:75305:75369	36590	0					
ANR	36593	ReturnStatement	"return perealloc ( ptr , safe_address ( nmemb , size , offset ) , 1 ) ;"	2607:1:75308:75367	36590	0	True				
ANR	36594	CallExpression	"perealloc ( ptr , safe_address ( nmemb , size , offset ) , 1 )"		36590	0					
ANR	36595	Callee	perealloc		36590	0					
ANR	36596	Identifier	perealloc		36590	0					
ANR	36597	ArgumentList	ptr		36590	1					
ANR	36598	Argument	ptr		36590	0					
ANR	36599	Identifier	ptr		36590	0					
ANR	36600	Argument	"safe_address ( nmemb , size , offset )"		36590	1					
ANR	36601	CallExpression	"safe_address ( nmemb , size , offset )"		36590	0					
ANR	36602	Callee	safe_address		36590	0					
ANR	36603	Identifier	safe_address		36590	0					
ANR	36604	ArgumentList	nmemb		36590	1					
ANR	36605	Argument	nmemb		36590	0					
ANR	36606	Identifier	nmemb		36590	0					
ANR	36607	Argument	size		36590	1					
ANR	36608	Identifier	size		36590	0					
ANR	36609	Argument	offset		36590	2					
ANR	36610	Identifier	offset		36590	0					
ANR	36611	Argument	1		36590	2					
ANR	36612	PrimaryExpression	1		36590	0					
ANR	36613	ReturnType	ZEND_API void *		36590	1					
ANR	36614	Identifier	_safe_realloc		36590	2					
ANR	36615	ParameterList	"void * ptr , size_t nmemb , size_t size , size_t offset"		36590	3					
ANR	36616	Parameter	void * ptr	2605:29:75252:75260	36590	0	True				
ANR	36617	ParameterType	void *		36590	0					
ANR	36618	Identifier	ptr		36590	1					
ANR	36619	Parameter	size_t nmemb	2605:40:75263:75274	36590	1	True				
ANR	36620	ParameterType	size_t		36590	0					
ANR	36621	Identifier	nmemb		36590	1					
ANR	36622	Parameter	size_t size	2605:54:75277:75287	36590	2	True				
ANR	36623	ParameterType	size_t		36590	0					
ANR	36624	Identifier	size		36590	1					
ANR	36625	Parameter	size_t offset	2605:67:75290:75302	36590	3	True				
ANR	36626	ParameterType	size_t		36590	0					
ANR	36627	Identifier	offset		36590	1					
ANR	36628	CFGEntryNode	ENTRY		36590		True				
ANR	36629	CFGExitNode	EXIT		36590		True				
ANR	36630	Symbol	size		36590						
ANR	36631	Symbol	offset		36590						
ANR	36632	Symbol	nmemb		36590						
ANR	36633	Symbol	safe_address		36590						
ANR	36634	Symbol	perealloc		36590						
ANR	36635	Symbol	ptr		36590						
ANR	36636	Function	_ecalloc	2611:0:75373:75794							
ANR	36637	FunctionDef	"_ecalloc (size_t nmemb , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		36636	0					
ANR	36638	CompoundStatement		2612:0:75465:75794	36636	0					
ANR	36639	IdentifierDeclStatement	void * p ;	2613:1:75468:75475	36636	0	True				
ANR	36640	IdentifierDecl	* p		36636	0					
ANR	36641	IdentifierDeclType	void *		36636	0					
ANR	36642	Identifier	p		36636	1					
ANR	36643	ExpressionStatement	TSRMLS_FETCH ( )	2615:1:75498:75512	36636	1	True				
ANR	36644	CallExpression	TSRMLS_FETCH ( )		36636	0					
ANR	36645	Callee	TSRMLS_FETCH		36636	0					
ANR	36646	Identifier	TSRMLS_FETCH		36636	0					
ANR	36647	ArgumentList			36636	1					
ANR	36648	ExpressionStatement	HANDLE_BLOCK_INTERRUPTIONS ( )	2617:1:75522:75550	36636	2	True				
ANR	36649	CallExpression	HANDLE_BLOCK_INTERRUPTIONS ( )		36636	0					
ANR	36650	Callee	HANDLE_BLOCK_INTERRUPTIONS		36636	0					
ANR	36651	Identifier	HANDLE_BLOCK_INTERRUPTIONS		36636	0					
ANR	36652	ArgumentList			36636	1					
ANR	36653	Statement	p	2619:1:75554:75554	36636	3	True				
ANR	36654	Statement	=	2619:3:75556:75556	36636	4	True				
ANR	36655	Statement	_safe_emalloc	2619:5:75558:75570	36636	5	True				
ANR	36656	Statement	(	2619:18:75571:75571	36636	6	True				
ANR	36657	Statement	nmemb	2619:19:75572:75576	36636	7	True				
ANR	36658	Statement	","	2619:24:75577:75577	36636	8	True				
ANR	36659	Statement	size	2619:26:75579:75582	36636	9	True				
ANR	36660	Statement	","	2619:30:75583:75583	36636	10	True				
ANR	36661	Statement	0	2619:32:75585:75585	36636	11	True				
ANR	36662	Statement	ZEND_FILE_LINE_RELAY_CC	2619:34:75587:75609	36636	12	True				
ANR	36663	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2619:58:75611:75638	36636	13	True				
ANR	36664	Statement	)	2619:86:75639:75639	36636	14	True				
ANR	36665	ExpressionStatement		2619:87:75640:75640	36636	15	True				
ANR	36666	IfStatement	if ( UNEXPECTED ( p == NULL ) )		36636	16					
ANR	36667	Condition	UNEXPECTED ( p == NULL )	2620:5:75647:75667	36636	0	True				
ANR	36668	CallExpression	UNEXPECTED ( p == NULL )		36636	0					
ANR	36669	Callee	UNEXPECTED		36636	0					
ANR	36670	Identifier	UNEXPECTED		36636	0					
ANR	36671	ArgumentList	p == NULL		36636	1					
ANR	36672	Argument	p == NULL		36636	0					
ANR	36673	EqualityExpression	p == NULL		36636	0		==			
ANR	36674	Identifier	p		36636	0					
ANR	36675	Identifier	NULL		36636	1					
ANR	36676	CompoundStatement		9:28:204:204	36636	1					
ANR	36677	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2621:2:75674:75704	36636	0	True				
ANR	36678	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		36636	0					
ANR	36679	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		36636	0					
ANR	36680	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		36636	0					
ANR	36681	ArgumentList			36636	1					
ANR	36682	ReturnStatement	return p ;	2622:2:75708:75716	36636	1	True				
ANR	36683	Identifier	p		36636	0					
ANR	36684	ExpressionStatement	"memset ( p , 0 , size * nmemb )"	2624:1:75722:75748	36636	17	True				
ANR	36685	CallExpression	"memset ( p , 0 , size * nmemb )"		36636	0					
ANR	36686	Callee	memset		36636	0					
ANR	36687	Identifier	memset		36636	0					
ANR	36688	ArgumentList	p		36636	1					
ANR	36689	Argument	p		36636	0					
ANR	36690	Identifier	p		36636	0					
ANR	36691	Argument	0		36636	1					
ANR	36692	PrimaryExpression	0		36636	0					
ANR	36693	Argument	size * nmemb		36636	2					
ANR	36694	MultiplicativeExpression	size * nmemb		36636	0		*			
ANR	36695	Identifier	size		36636	0					
ANR	36696	Identifier	nmemb		36636	1					
ANR	36697	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2625:1:75751:75781	36636	18	True				
ANR	36698	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		36636	0					
ANR	36699	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		36636	0					
ANR	36700	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		36636	0					
ANR	36701	ArgumentList			36636	1					
ANR	36702	ReturnStatement	return p ;	2626:1:75784:75792	36636	19	True				
ANR	36703	Identifier	p		36636	0					
ANR	36704	ReturnType	ZEND_API void *		36636	1					
ANR	36705	Identifier	_ecalloc		36636	2					
ANR	36706	ParameterList	"size_t nmemb , size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		36636	3					
ANR	36707	Parameter	size_t nmemb	2611:24:75397:75408	36636	0	True				
ANR	36708	ParameterType	size_t		36636	0					
ANR	36709	Identifier	nmemb		36636	1					
ANR	36710	Parameter	size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2611:38:75411:75462	36636	1	True				
ANR	36711	ParameterType	size_t size ZEND_FILE_LINE_DC		36636	0					
ANR	36712	Identifier	ZEND_FILE_LINE_ORIG_DC		36636	1					
ANR	36713	CFGEntryNode	ENTRY		36636		True				
ANR	36714	CFGExitNode	EXIT		36636		True				
ANR	36715	Symbol	p		36636						
ANR	36716	Symbol	UNEXPECTED		36636						
ANR	36717	Symbol	NULL		36636						
ANR	36718	Symbol	size		36636						
ANR	36719	Symbol	nmemb		36636						
ANR	36720	Symbol	ZEND_FILE_LINE_ORIG_DC		36636						
ANR	36721	DeclStmt									
ANR	36722	Decl							size_t	size_t	length
ANR	36723	DeclStmt									
ANR	36724	Decl							char	char *	p
ANR	36725	Function	_estrndup	2650:0:76259:76709							
ANR	36726	FunctionDef	"_estrndup (const char * s , uint length ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		36725	0					
ANR	36727	CompoundStatement		2651:0:76353:76709	36725	0					
ANR	36728	IdentifierDeclStatement	char * p ;	2652:1:76356:76363	36725	0	True				
ANR	36729	IdentifierDecl	* p		36725	0					
ANR	36730	IdentifierDeclType	char *		36725	0					
ANR	36731	Identifier	p		36725	1					
ANR	36732	ExpressionStatement	TSRMLS_FETCH ( )	2654:1:76386:76400	36725	1	True				
ANR	36733	CallExpression	TSRMLS_FETCH ( )		36725	0					
ANR	36734	Callee	TSRMLS_FETCH		36725	0					
ANR	36735	Identifier	TSRMLS_FETCH		36725	0					
ANR	36736	ArgumentList			36725	1					
ANR	36737	ExpressionStatement	HANDLE_BLOCK_INTERRUPTIONS ( )	2657:1:76411:76439	36725	2	True				
ANR	36738	CallExpression	HANDLE_BLOCK_INTERRUPTIONS ( )		36725	0					
ANR	36739	Callee	HANDLE_BLOCK_INTERRUPTIONS		36725	0					
ANR	36740	Identifier	HANDLE_BLOCK_INTERRUPTIONS		36725	0					
ANR	36741	ArgumentList			36725	1					
ANR	36742	Statement	p	2659:1:76443:76443	36725	3	True				
ANR	36743	Statement	=	2659:3:76445:76445	36725	4	True				
ANR	36744	Statement	(	2659:5:76447:76447	36725	5	True				
ANR	36745	Statement	char	2659:6:76448:76451	36725	6	True				
ANR	36746	Statement	*	2659:11:76453:76453	36725	7	True				
ANR	36747	Statement	)	2659:12:76454:76454	36725	8	True				
ANR	36748	Statement	_emalloc	2659:14:76456:76463	36725	9	True				
ANR	36749	Statement	(	2659:22:76464:76464	36725	10	True				
ANR	36750	Statement	safe_address	2659:23:76465:76476	36725	11	True				
ANR	36751	Statement	(	2659:35:76477:76477	36725	12	True				
ANR	36752	Statement	length	2659:36:76478:76483	36725	13	True				
ANR	36753	Statement	","	2659:42:76484:76484	36725	14	True				
ANR	36754	Statement	1	2659:44:76486:76486	36725	15	True				
ANR	36755	Statement	","	2659:45:76487:76487	36725	16	True				
ANR	36756	Statement	1	2659:47:76489:76489	36725	17	True				
ANR	36757	Statement	)	2659:48:76490:76490	36725	18	True				
ANR	36758	Statement	ZEND_FILE_LINE_RELAY_CC	2659:50:76492:76514	36725	19	True				
ANR	36759	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2659:74:76516:76543	36725	20	True				
ANR	36760	Statement	)	2659:102:76544:76544	36725	21	True				
ANR	36761	ExpressionStatement		2659:103:76545:76545	36725	22	True				
ANR	36762	IfStatement	if ( UNEXPECTED ( p == NULL ) )		36725	23					
ANR	36763	Condition	UNEXPECTED ( p == NULL )	2660:5:76552:76572	36725	0	True				
ANR	36764	CallExpression	UNEXPECTED ( p == NULL )		36725	0					
ANR	36765	Callee	UNEXPECTED		36725	0					
ANR	36766	Identifier	UNEXPECTED		36725	0					
ANR	36767	ArgumentList	p == NULL		36725	1					
ANR	36768	Argument	p == NULL		36725	0					
ANR	36769	EqualityExpression	p == NULL		36725	0		==			
ANR	36770	Identifier	p		36725	0					
ANR	36771	Identifier	NULL		36725	1					
ANR	36772	CompoundStatement		10:28:221:221	36725	1					
ANR	36773	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2661:2:76579:76609	36725	0	True				
ANR	36774	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		36725	0					
ANR	36775	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		36725	0					
ANR	36776	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		36725	0					
ANR	36777	ArgumentList			36725	1					
ANR	36778	ReturnStatement	return p ;	2662:2:76613:76621	36725	1	True				
ANR	36779	Identifier	p		36725	0					
ANR	36780	ExpressionStatement	"memcpy ( p , s , length )"	2664:1:76627:76647	36725	24	True				
ANR	36781	CallExpression	"memcpy ( p , s , length )"		36725	0					
ANR	36782	Callee	memcpy		36725	0					
ANR	36783	Identifier	memcpy		36725	0					
ANR	36784	ArgumentList	p		36725	1					
ANR	36785	Argument	p		36725	0					
ANR	36786	Identifier	p		36725	0					
ANR	36787	Argument	s		36725	1					
ANR	36788	Identifier	s		36725	0					
ANR	36789	Argument	length		36725	2					
ANR	36790	Identifier	length		36725	0					
ANR	36791	ExpressionStatement	p [ length ] = 0	2665:1:76650:76663	36725	25	True				
ANR	36792	AssignmentExpression	p [ length ] = 0		36725	0		=			
ANR	36793	ArrayIndexing	p [ length ]		36725	0					
ANR	36794	Identifier	p		36725	0					
ANR	36795	Identifier	length		36725	1					
ANR	36796	PrimaryExpression	0		36725	1					
ANR	36797	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2666:1:76666:76696	36725	26	True				
ANR	36798	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		36725	0					
ANR	36799	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		36725	0					
ANR	36800	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		36725	0					
ANR	36801	ArgumentList			36725	1					
ANR	36802	ReturnStatement	return p ;	2667:1:76699:76707	36725	27	True				
ANR	36803	Identifier	p		36725	0					
ANR	36804	ReturnType	ZEND_API char *		36725	1					
ANR	36805	Identifier	_estrndup		36725	2					
ANR	36806	ParameterList	"const char * s , uint length ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		36725	3					
ANR	36807	Parameter	const char * s	2650:25:76284:76296	36725	0	True				
ANR	36808	ParameterType	const char *		36725	0					
ANR	36809	Identifier	s		36725	1					
ANR	36810	Parameter	uint length ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2650:40:76299:76350	36725	1	True				
ANR	36811	ParameterType	uint length ZEND_FILE_LINE_DC		36725	0					
ANR	36812	Identifier	ZEND_FILE_LINE_ORIG_DC		36725	1					
ANR	36813	CFGEntryNode	ENTRY		36725		True				
ANR	36814	CFGExitNode	EXIT		36725		True				
ANR	36815	Symbol	p		36725						
ANR	36816	Symbol	UNEXPECTED		36725						
ANR	36817	Symbol	s		36725						
ANR	36818	Symbol	NULL		36725						
ANR	36819	Symbol	length		36725						
ANR	36820	Symbol	ZEND_FILE_LINE_ORIG_DC		36725						
ANR	36821	Symbol	* p		36725						
ANR	36822	Symbol	* length		36725						
ANR	36823	Function	zend_strndup	2671:0:76713:77089							
ANR	36824	FunctionDef	"zend_strndup (const char * s , uint length)"		36823	0					
ANR	36825	CompoundStatement		2672:0:76769:77089	36823	0					
ANR	36826	IdentifierDeclStatement	char * p ;	2673:1:76772:76779	36823	0	True				
ANR	36827	IdentifierDecl	* p		36823	0					
ANR	36828	IdentifierDeclType	char *		36823	0					
ANR	36829	Identifier	p		36823	1					
ANR	36830	ExpressionStatement	TSRMLS_FETCH ( )	2675:1:76802:76816	36823	1	True				
ANR	36831	CallExpression	TSRMLS_FETCH ( )		36823	0					
ANR	36832	Callee	TSRMLS_FETCH		36823	0					
ANR	36833	Identifier	TSRMLS_FETCH		36823	0					
ANR	36834	ArgumentList			36823	1					
ANR	36835	ExpressionStatement	HANDLE_BLOCK_INTERRUPTIONS ( )	2678:1:76827:76855	36823	2	True				
ANR	36836	CallExpression	HANDLE_BLOCK_INTERRUPTIONS ( )		36823	0					
ANR	36837	Callee	HANDLE_BLOCK_INTERRUPTIONS		36823	0					
ANR	36838	Identifier	HANDLE_BLOCK_INTERRUPTIONS		36823	0					
ANR	36839	ArgumentList			36823	1					
ANR	36840	ExpressionStatement	"p = ( char * ) malloc ( safe_address ( length , 1 , 1 ) )"	2680:1:76859:76906	36823	3	True				
ANR	36841	AssignmentExpression	"p = ( char * ) malloc ( safe_address ( length , 1 , 1 ) )"		36823	0		=			
ANR	36842	Identifier	p		36823	0					
ANR	36843	CastExpression	"( char * ) malloc ( safe_address ( length , 1 , 1 ) )"		36823	1					
ANR	36844	CastTarget	char *		36823	0					
ANR	36845	CallExpression	"malloc ( safe_address ( length , 1 , 1 ) )"		36823	1					
ANR	36846	Callee	malloc		36823	0					
ANR	36847	Identifier	malloc		36823	0					
ANR	36848	ArgumentList	"safe_address ( length , 1 , 1 )"		36823	1					
ANR	36849	Argument	"safe_address ( length , 1 , 1 )"		36823	0					
ANR	36850	CallExpression	"safe_address ( length , 1 , 1 )"		36823	0					
ANR	36851	Callee	safe_address		36823	0					
ANR	36852	Identifier	safe_address		36823	0					
ANR	36853	ArgumentList	length		36823	1					
ANR	36854	Argument	length		36823	0					
ANR	36855	Identifier	length		36823	0					
ANR	36856	Argument	1		36823	1					
ANR	36857	PrimaryExpression	1		36823	0					
ANR	36858	Argument	1		36823	2					
ANR	36859	PrimaryExpression	1		36823	0					
ANR	36860	IfStatement	if ( UNEXPECTED ( p == NULL ) )		36823	4					
ANR	36861	Condition	UNEXPECTED ( p == NULL )	2681:5:76913:76933	36823	0	True				
ANR	36862	CallExpression	UNEXPECTED ( p == NULL )		36823	0					
ANR	36863	Callee	UNEXPECTED		36823	0					
ANR	36864	Identifier	UNEXPECTED		36823	0					
ANR	36865	ArgumentList	p == NULL		36823	1					
ANR	36866	Argument	p == NULL		36823	0					
ANR	36867	EqualityExpression	p == NULL		36823	0		==			
ANR	36868	Identifier	p		36823	0					
ANR	36869	Identifier	NULL		36823	1					
ANR	36870	CompoundStatement		10:28:166:166	36823	1					
ANR	36871	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2682:2:76940:76970	36823	0	True				
ANR	36872	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		36823	0					
ANR	36873	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		36823	0					
ANR	36874	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		36823	0					
ANR	36875	ArgumentList			36823	1					
ANR	36876	ReturnStatement	return p ;	2683:2:76974:76982	36823	1	True				
ANR	36877	Identifier	p		36823	0					
ANR	36878	IfStatement	if ( length )		36823	5					
ANR	36879	Condition	length	2685:5:76992:76997	36823	0	True				
ANR	36880	Identifier	length		36823	0					
ANR	36881	CompoundStatement		14:13:230:230	36823	1					
ANR	36882	ExpressionStatement	"memcpy ( p , s , length )"	2686:2:77004:77024	36823	0	True				
ANR	36883	CallExpression	"memcpy ( p , s , length )"		36823	0					
ANR	36884	Callee	memcpy		36823	0					
ANR	36885	Identifier	memcpy		36823	0					
ANR	36886	ArgumentList	p		36823	1					
ANR	36887	Argument	p		36823	0					
ANR	36888	Identifier	p		36823	0					
ANR	36889	Argument	s		36823	1					
ANR	36890	Identifier	s		36823	0					
ANR	36891	Argument	length		36823	2					
ANR	36892	Identifier	length		36823	0					
ANR	36893	ExpressionStatement	p [ length ] = 0	2688:1:77030:77043	36823	6	True				
ANR	36894	AssignmentExpression	p [ length ] = 0		36823	0		=			
ANR	36895	ArrayIndexing	p [ length ]		36823	0					
ANR	36896	Identifier	p		36823	0					
ANR	36897	Identifier	length		36823	1					
ANR	36898	PrimaryExpression	0		36823	1					
ANR	36899	ExpressionStatement	HANDLE_UNBLOCK_INTERRUPTIONS ( )	2689:1:77046:77076	36823	7	True				
ANR	36900	CallExpression	HANDLE_UNBLOCK_INTERRUPTIONS ( )		36823	0					
ANR	36901	Callee	HANDLE_UNBLOCK_INTERRUPTIONS		36823	0					
ANR	36902	Identifier	HANDLE_UNBLOCK_INTERRUPTIONS		36823	0					
ANR	36903	ArgumentList			36823	1					
ANR	36904	ReturnStatement	return p ;	2690:1:77079:77087	36823	8	True				
ANR	36905	Identifier	p		36823	0					
ANR	36906	ReturnType	ZEND_API char *		36823	1					
ANR	36907	Identifier	zend_strndup		36823	2					
ANR	36908	ParameterList	"const char * s , uint length"		36823	3					
ANR	36909	Parameter	const char * s	2671:28:76741:76753	36823	0	True				
ANR	36910	ParameterType	const char *		36823	0					
ANR	36911	Identifier	s		36823	1					
ANR	36912	Parameter	uint length	2671:43:76756:76766	36823	1	True				
ANR	36913	ParameterType	uint		36823	0					
ANR	36914	Identifier	length		36823	1					
ANR	36915	CFGEntryNode	ENTRY		36823		True				
ANR	36916	CFGExitNode	EXIT		36823		True				
ANR	36917	Symbol	p		36823						
ANR	36918	Symbol	UNEXPECTED		36823						
ANR	36919	Symbol	malloc		36823						
ANR	36920	Symbol	s		36823						
ANR	36921	Symbol	NULL		36823						
ANR	36922	Symbol	length		36823						
ANR	36923	Symbol	* length		36823						
ANR	36924	Symbol	* p		36823						
ANR	36925	Symbol	safe_address		36823						
ANR	36926	Function	zend_set_memory_limit	2694:0:77093:77293							
ANR	36927	FunctionDef	zend_set_memory_limit (size_t memory_limit)		36926	0					
ANR	36928	CompoundStatement		2695:0:77149:77293	36926	0					
ANR	36929	ExpressionStatement	TSRMLS_FETCH ( )	2696:1:77152:77166	36926	0	True				
ANR	36930	CallExpression	TSRMLS_FETCH ( )		36926	0					
ANR	36931	Callee	TSRMLS_FETCH		36926	0					
ANR	36932	Identifier	TSRMLS_FETCH		36926	0					
ANR	36933	ArgumentList			36926	1					
ANR	36934	ExpressionStatement	AG ( mm_heap ) -> limit = ( memory_limit >= AG ( mm_heap ) -> block_size ) ? memory_limit : AG ( mm_heap ) -> block_size	2698:1:77170:77273	36926	1	True				
ANR	36935	AssignmentExpression	AG ( mm_heap ) -> limit = ( memory_limit >= AG ( mm_heap ) -> block_size ) ? memory_limit : AG ( mm_heap ) -> block_size		36926	0		=			
ANR	36936	PtrMemberAccess	AG ( mm_heap ) -> limit		36926	0					
ANR	36937	CallExpression	AG ( mm_heap )		36926	0					
ANR	36938	Callee	AG		36926	0					
ANR	36939	Identifier	AG		36926	0					
ANR	36940	ArgumentList	mm_heap		36926	1					
ANR	36941	Argument	mm_heap		36926	0					
ANR	36942	Identifier	mm_heap		36926	0					
ANR	36943	Identifier	limit		36926	1					
ANR	36944	ConditionalExpression	( memory_limit >= AG ( mm_heap ) -> block_size ) ? memory_limit : AG ( mm_heap ) -> block_size		36926	1					
ANR	36945	Condition	memory_limit >= AG ( mm_heap ) -> block_size		36926	0					
ANR	36946	RelationalExpression	memory_limit >= AG ( mm_heap ) -> block_size		36926	0		>=			
ANR	36947	Identifier	memory_limit		36926	0					
ANR	36948	PtrMemberAccess	AG ( mm_heap ) -> block_size		36926	1					
ANR	36949	CallExpression	AG ( mm_heap )		36926	0					
ANR	36950	Callee	AG		36926	0					
ANR	36951	Identifier	AG		36926	0					
ANR	36952	ArgumentList	mm_heap		36926	1					
ANR	36953	Argument	mm_heap		36926	0					
ANR	36954	Identifier	mm_heap		36926	0					
ANR	36955	Identifier	block_size		36926	1					
ANR	36956	Identifier	memory_limit		36926	1					
ANR	36957	PtrMemberAccess	AG ( mm_heap ) -> block_size		36926	2					
ANR	36958	CallExpression	AG ( mm_heap )		36926	0					
ANR	36959	Callee	AG		36926	0					
ANR	36960	Identifier	AG		36926	0					
ANR	36961	ArgumentList	mm_heap		36926	1					
ANR	36962	Argument	mm_heap		36926	0					
ANR	36963	Identifier	mm_heap		36926	0					
ANR	36964	Identifier	block_size		36926	1					
ANR	36965	ReturnStatement	return SUCCESS ;	2700:1:77277:77291	36926	2	True				
ANR	36966	Identifier	SUCCESS		36926	0					
ANR	36967	ReturnType	ZEND_API int		36926	1					
ANR	36968	Identifier	zend_set_memory_limit		36926	2					
ANR	36969	ParameterList	size_t memory_limit		36926	3					
ANR	36970	Parameter	size_t memory_limit	2694:35:77128:77146	36926	0	True				
ANR	36971	ParameterType	size_t		36926	0					
ANR	36972	Identifier	memory_limit		36926	1					
ANR	36973	CFGEntryNode	ENTRY		36926		True				
ANR	36974	CFGExitNode	EXIT		36926		True				
ANR	36975	Symbol	AG ( mm_heap ) -> block_size		36926						
ANR	36976	Symbol	SUCCESS		36926						
ANR	36977	Symbol	AG		36926						
ANR	36978	Symbol	AG ( mm_heap ) -> limit		36926						
ANR	36979	Symbol	mm_heap		36926						
ANR	36980	Symbol	memory_limit		36926						
ANR	36981	Symbol	* AG		36926						
ANR	36982	Function	zend_memory_usage	2703:0:77296:77532							
ANR	36983	FunctionDef	zend_memory_usage (int real_usage TSRMLS_DC)		36982	0					
ANR	36984	CompoundStatement		2704:0:77356:77532	36982	0					
ANR	36985	IfStatement	if ( real_usage )		36982	0					
ANR	36986	Condition	real_usage	2705:5:77363:77372	36982	0	True				
ANR	36987	Identifier	real_usage		36982	0					
ANR	36988	CompoundStatement		2:17:18:18	36982	1					
ANR	36989	ReturnStatement	return AG ( mm_heap ) -> real_size ;	2706:2:77379:77408	36982	0	True				
ANR	36990	PtrMemberAccess	AG ( mm_heap ) -> real_size		36982	0					
ANR	36991	CallExpression	AG ( mm_heap )		36982	0					
ANR	36992	Callee	AG		36982	0					
ANR	36993	Identifier	AG		36982	0					
ANR	36994	ArgumentList	mm_heap		36982	1					
ANR	36995	Argument	mm_heap		36982	0					
ANR	36996	Identifier	mm_heap		36982	0					
ANR	36997	Identifier	real_size		36982	1					
ANR	36998	ElseStatement	else		36982	0					
ANR	36999	CompoundStatement		5:2:65:97	36982	0					
ANR	37000	IdentifierDeclStatement	size_t usage = AG ( mm_heap ) -> size ;	2708:2:77422:77454	36982	0	True				
ANR	37001	IdentifierDecl	usage = AG ( mm_heap ) -> size		36982	0					
ANR	37002	IdentifierDeclType	size_t		36982	0					
ANR	37003	Identifier	usage		36982	1					
ANR	37004	AssignmentExpression	usage = AG ( mm_heap ) -> size		36982	2		=			
ANR	37005	Identifier	usage		36982	0					
ANR	37006	PtrMemberAccess	AG ( mm_heap ) -> size		36982	1					
ANR	37007	CallExpression	AG ( mm_heap )		36982	0					
ANR	37008	Callee	AG		36982	0					
ANR	37009	Identifier	AG		36982	0					
ANR	37010	ArgumentList	mm_heap		36982	1					
ANR	37011	Argument	mm_heap		36982	0					
ANR	37012	Identifier	mm_heap		36982	0					
ANR	37013	Identifier	size		36982	1					
ANR	37014	ExpressionStatement	usage -= AG ( mm_heap ) -> cached	2710:2:77476:77504	36982	1	True				
ANR	37015	AssignmentExpression	usage -= AG ( mm_heap ) -> cached		36982	0		-=			
ANR	37016	Identifier	usage		36982	0					
ANR	37017	PtrMemberAccess	AG ( mm_heap ) -> cached		36982	1					
ANR	37018	CallExpression	AG ( mm_heap )		36982	0					
ANR	37019	Callee	AG		36982	0					
ANR	37020	Identifier	AG		36982	0					
ANR	37021	ArgumentList	mm_heap		36982	1					
ANR	37022	Argument	mm_heap		36982	0					
ANR	37023	Identifier	mm_heap		36982	0					
ANR	37024	Identifier	cached		36982	1					
ANR	37025	ReturnStatement	return usage ;	2712:2:77515:77527	36982	2	True				
ANR	37026	Identifier	usage		36982	0					
ANR	37027	ReturnType	ZEND_API size_t		36982	1					
ANR	37028	Identifier	zend_memory_usage		36982	2					
ANR	37029	ParameterList	int real_usage TSRMLS_DC		36982	3					
ANR	37030	Parameter	int real_usage TSRMLS_DC	2703:34:77330:77353	36982	0	True				
ANR	37031	ParameterType	int real_usage		36982	0					
ANR	37032	Identifier	TSRMLS_DC		36982	1					
ANR	37033	CFGEntryNode	ENTRY		36982		True				
ANR	37034	CFGExitNode	EXIT		36982		True				
ANR	37035	Symbol	AG ( mm_heap ) -> real_size		36982						
ANR	37036	Symbol	AG ( mm_heap ) -> size		36982						
ANR	37037	Symbol	AG ( mm_heap ) -> cached		36982						
ANR	37038	Symbol	AG		36982						
ANR	37039	Symbol	usage		36982						
ANR	37040	Symbol	mm_heap		36982						
ANR	37041	Symbol	real_usage		36982						
ANR	37042	Symbol	TSRMLS_DC		36982						
ANR	37043	Symbol	* AG		36982						
ANR	37044	Function	zend_memory_peak_usage	2716:0:77535:77695							
ANR	37045	FunctionDef	zend_memory_peak_usage (int real_usage TSRMLS_DC)		37044	0					
ANR	37046	CompoundStatement		2717:0:77600:77695	37044	0					
ANR	37047	IfStatement	if ( real_usage )		37044	0					
ANR	37048	Condition	real_usage	2718:5:77607:77616	37044	0	True				
ANR	37049	Identifier	real_usage		37044	0					
ANR	37050	CompoundStatement		2:17:18:18	37044	1					
ANR	37051	ReturnStatement	return AG ( mm_heap ) -> real_peak ;	2719:2:77623:77652	37044	0	True				
ANR	37052	PtrMemberAccess	AG ( mm_heap ) -> real_peak		37044	0					
ANR	37053	CallExpression	AG ( mm_heap )		37044	0					
ANR	37054	Callee	AG		37044	0					
ANR	37055	Identifier	AG		37044	0					
ANR	37056	ArgumentList	mm_heap		37044	1					
ANR	37057	Argument	mm_heap		37044	0					
ANR	37058	Identifier	mm_heap		37044	0					
ANR	37059	Identifier	real_peak		37044	1					
ANR	37060	ElseStatement	else		37044	0					
ANR	37061	CompoundStatement		4:8:61:61	37044	0					
ANR	37062	ReturnStatement	return AG ( mm_heap ) -> peak ;	2721:2:77666:77690	37044	0	True				
ANR	37063	PtrMemberAccess	AG ( mm_heap ) -> peak		37044	0					
ANR	37064	CallExpression	AG ( mm_heap )		37044	0					
ANR	37065	Callee	AG		37044	0					
ANR	37066	Identifier	AG		37044	0					
ANR	37067	ArgumentList	mm_heap		37044	1					
ANR	37068	Argument	mm_heap		37044	0					
ANR	37069	Identifier	mm_heap		37044	0					
ANR	37070	Identifier	peak		37044	1					
ANR	37071	ReturnType	ZEND_API size_t		37044	1					
ANR	37072	Identifier	zend_memory_peak_usage		37044	2					
ANR	37073	ParameterList	int real_usage TSRMLS_DC		37044	3					
ANR	37074	Parameter	int real_usage TSRMLS_DC	2716:39:77574:77597	37044	0	True				
ANR	37075	ParameterType	int real_usage		37044	0					
ANR	37076	Identifier	TSRMLS_DC		37044	1					
ANR	37077	CFGEntryNode	ENTRY		37044		True				
ANR	37078	CFGExitNode	EXIT		37044		True				
ANR	37079	Symbol	AG ( mm_heap ) -> peak		37044						
ANR	37080	Symbol	AG		37044						
ANR	37081	Symbol	mm_heap		37044						
ANR	37082	Symbol	real_usage		37044						
ANR	37083	Symbol	TSRMLS_DC		37044						
ANR	37084	Symbol	AG ( mm_heap ) -> real_peak		37044						
ANR	37085	Symbol	* AG		37044						
ANR	37086	Function	shutdown_memory_manager	2725:0:77698:77844							
ANR	37087	FunctionDef	"shutdown_memory_manager (int silent , int full_shutdown TSRMLS_DC)"		37086	0					
ANR	37088	CompoundStatement		2726:0:77777:77844	37086	0					
ANR	37089	Statement	zend_mm_shutdown	2727:1:77780:77795	37086	0	True				
ANR	37090	Statement	(	2727:17:77796:77796	37086	1	True				
ANR	37091	Statement	AG	2727:18:77797:77798	37086	2	True				
ANR	37092	Statement	(	2727:20:77799:77799	37086	3	True				
ANR	37093	Statement	mm_heap	2727:21:77800:77806	37086	4	True				
ANR	37094	Statement	)	2727:28:77807:77807	37086	5	True				
ANR	37095	Statement	","	2727:29:77808:77808	37086	6	True				
ANR	37096	Statement	full_shutdown	2727:31:77810:77822	37086	7	True				
ANR	37097	Statement	","	2727:44:77823:77823	37086	8	True				
ANR	37098	Statement	silent	2727:46:77825:77830	37086	9	True				
ANR	37099	Statement	TSRMLS_CC	2727:53:77832:77840	37086	10	True				
ANR	37100	Statement	)	2727:62:77841:77841	37086	11	True				
ANR	37101	ExpressionStatement		2727:63:77842:77842	37086	12	True				
ANR	37102	ReturnType	ZEND_API void		37086	1					
ANR	37103	Identifier	shutdown_memory_manager		37086	2					
ANR	37104	ParameterList	"int silent , int full_shutdown TSRMLS_DC"		37086	3					
ANR	37105	Parameter	int silent	2725:38:77736:77745	37086	0	True				
ANR	37106	ParameterType	int		37086	0					
ANR	37107	Identifier	silent		37086	1					
ANR	37108	Parameter	int full_shutdown TSRMLS_DC	2725:50:77748:77774	37086	1	True				
ANR	37109	ParameterType	int full_shutdown		37086	0					
ANR	37110	Identifier	TSRMLS_DC		37086	1					
ANR	37111	CFGEntryNode	ENTRY		37086		True				
ANR	37112	CFGExitNode	EXIT		37086		True				
ANR	37113	Symbol	silent		37086						
ANR	37114	Symbol	TSRMLS_DC		37086						
ANR	37115	DeclStmt									
ANR	37116	Decl							char	char *	tmp
ANR	37117	DeclStmt									
ANR	37118	Decl							zend_mm_heap	zend_mm_heap *	old_heap
ANR	37119	Function	zend_mm_get_storage	2771:0:78950:79041							
ANR	37120	FunctionDef	zend_mm_get_storage (zend_mm_heap * heap)		37119	0					
ANR	37121	CompoundStatement		2772:0:79016:79041	37119	0					
ANR	37122	ReturnStatement	return heap -> storage ;	2773:1:79019:79039	37119	0	True				
ANR	37123	PtrMemberAccess	heap -> storage		37119	0					
ANR	37124	Identifier	heap		37119	0					
ANR	37125	Identifier	storage		37119	1					
ANR	37126	ReturnType	ZEND_API zend_mm_storage *		37119	1					
ANR	37127	Identifier	zend_mm_get_storage		37119	2					
ANR	37128	ParameterList	zend_mm_heap * heap		37119	3					
ANR	37129	Parameter	zend_mm_heap * heap	2771:46:78996:79013	37119	0	True				
ANR	37130	ParameterType	zend_mm_heap *		37119	0					
ANR	37131	Identifier	heap		37119	1					
ANR	37132	CFGEntryNode	ENTRY		37119		True				
ANR	37133	CFGExitNode	EXIT		37119		True				
ANR	37134	Symbol	heap -> storage		37119						
ANR	37135	Symbol	heap		37119						
ANR	37136	Symbol	* heap		37119						
ANR	37137	Function	zend_mm_set_custom_handlers	2776:0:79044:79420							
ANR	37138	FunctionDef	"zend_mm_set_custom_handlers (zend_mm_heap * heap , void * ( * _malloc ) ( size_t ) , void ( * _free ) ( void * ) , void * ( * _realloc ) ( void * , size_t ))"		37137	0					
ANR	37139	CompoundStatement		2780:0:79315:79420	37137	0					
ANR	37140	ExpressionStatement	heap -> use_zend_alloc = 0	2781:1:79318:79342	37137	0	True				
ANR	37141	AssignmentExpression	heap -> use_zend_alloc = 0		37137	0		=			
ANR	37142	PtrMemberAccess	heap -> use_zend_alloc		37137	0					
ANR	37143	Identifier	heap		37137	0					
ANR	37144	Identifier	use_zend_alloc		37137	1					
ANR	37145	PrimaryExpression	0		37137	1					
ANR	37146	ExpressionStatement	heap -> _malloc = _malloc	2782:1:79345:79368	37137	1	True				
ANR	37147	AssignmentExpression	heap -> _malloc = _malloc		37137	0		=			
ANR	37148	PtrMemberAccess	heap -> _malloc		37137	0					
ANR	37149	Identifier	heap		37137	0					
ANR	37150	Identifier	_malloc		37137	1					
ANR	37151	Identifier	_malloc		37137	1					
ANR	37152	ExpressionStatement	heap -> _free = _free	2783:1:79371:79390	37137	2	True				
ANR	37153	AssignmentExpression	heap -> _free = _free		37137	0		=			
ANR	37154	PtrMemberAccess	heap -> _free		37137	0					
ANR	37155	Identifier	heap		37137	0					
ANR	37156	Identifier	_free		37137	1					
ANR	37157	Identifier	_free		37137	1					
ANR	37158	ExpressionStatement	heap -> _realloc = _realloc	2784:1:79393:79418	37137	3	True				
ANR	37159	AssignmentExpression	heap -> _realloc = _realloc		37137	0		=			
ANR	37160	PtrMemberAccess	heap -> _realloc		37137	0					
ANR	37161	Identifier	heap		37137	0					
ANR	37162	Identifier	_realloc		37137	1					
ANR	37163	Identifier	_realloc		37137	1					
ANR	37164	ReturnType	ZEND_API void		37137	1					
ANR	37165	Identifier	zend_mm_set_custom_handlers		37137	2					
ANR	37166	ParameterList	"zend_mm_heap * heap , void * ( * _malloc ) ( size_t ) , void ( * _free ) ( void * ) , void * ( * _realloc ) ( void * , size_t )"		37137	3					
ANR	37167	Parameter	zend_mm_heap * heap	2776:42:79086:79103	37137	0	True				
ANR	37168	ParameterType	zend_mm_heap *		37137	0					
ANR	37169	Identifier	heap		37137	1					
ANR	37170	Parameter	void * ( * _malloc ) ( size_t )	2777:42:79148:79171	37137	1	True				
ANR	37171	ParameterType	(* ( size_t ) void) *		37137	0					
ANR	37172	Identifier	_malloc		37137	1					
ANR	37173	Parameter	void ( * _free ) ( void * )	2778:42:79216:79236	37137	2	True				
ANR	37174	ParameterType	(( void * ) void) *		37137	0					
ANR	37175	Identifier	_free		37137	1					
ANR	37176	Parameter	"void * ( * _realloc ) ( void * , size_t )"	2779:42:79281:79312	37137	3	True				
ANR	37177	ParameterType	"(* ( void * , size_t ) void) *"		37137	0					
ANR	37178	Identifier	_realloc		37137	1					
ANR	37179	CFGEntryNode	ENTRY		37137		True				
ANR	37180	CFGExitNode	EXIT		37137		True				
ANR	37181	Symbol	_free		37137						
ANR	37182	Symbol	heap -> _free		37137						
ANR	37183	Symbol	heap -> _realloc		37137						
ANR	37184	Symbol	_realloc		37137						
ANR	37185	Symbol	heap		37137						
ANR	37186	Symbol	heap -> use_zend_alloc		37137						
ANR	37187	Symbol	* heap		37137						
ANR	37188	Symbol	_malloc		37137						
ANR	37189	Symbol	heap -> _malloc		37137						
ANR	37190	Function	_mem_block_check	2788:0:79438:79710							
ANR	37191	FunctionDef	"_mem_block_check (void * ptr , int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)"		37190	0					
ANR	37192	CompoundStatement		2789:0:79532:79710	37190	0					
ANR	37193	ExpressionStatement	TSRMLS_FETCH ( )	2790:1:79535:79549	37190	0	True				
ANR	37194	CallExpression	TSRMLS_FETCH ( )		37190	0					
ANR	37195	Callee	TSRMLS_FETCH		37190	0					
ANR	37196	Identifier	TSRMLS_FETCH		37190	0					
ANR	37197	ArgumentList			37190	1					
ANR	37198	IfStatement	if ( ! AG ( mm_heap ) -> use_zend_alloc )		37190	1					
ANR	37199	Condition	! AG ( mm_heap ) -> use_zend_alloc	2792:5:79557:79584	37190	0	True				
ANR	37200	UnaryOperationExpression	! AG ( mm_heap ) -> use_zend_alloc		37190	0					
ANR	37201	UnaryOperator	!		37190	0					
ANR	37202	PtrMemberAccess	AG ( mm_heap ) -> use_zend_alloc		37190	1					
ANR	37203	CallExpression	AG ( mm_heap )		37190	0					
ANR	37204	Callee	AG		37190	0					
ANR	37205	Identifier	AG		37190	0					
ANR	37206	ArgumentList	mm_heap		37190	1					
ANR	37207	Argument	mm_heap		37190	0					
ANR	37208	Identifier	mm_heap		37190	0					
ANR	37209	Identifier	use_zend_alloc		37190	1					
ANR	37210	CompoundStatement		4:35:54:54	37190	1					
ANR	37211	ReturnStatement	return 1 ;	2793:2:79591:79599	37190	0	True				
ANR	37212	PrimaryExpression	1		37190	0					
ANR	37213	Statement	return	2795:1:79605:79610	37190	2	True				
ANR	37214	Statement	zend_mm_check_ptr	2795:8:79612:79628	37190	3	True				
ANR	37215	Statement	(	2795:25:79629:79629	37190	4	True				
ANR	37216	Statement	AG	2795:26:79630:79631	37190	5	True				
ANR	37217	Statement	(	2795:28:79632:79632	37190	6	True				
ANR	37218	Statement	mm_heap	2795:29:79633:79639	37190	7	True				
ANR	37219	Statement	)	2795:36:79640:79640	37190	8	True				
ANR	37220	Statement	","	2795:37:79641:79641	37190	9	True				
ANR	37221	Statement	ptr	2795:39:79643:79645	37190	10	True				
ANR	37222	Statement	","	2795:42:79646:79646	37190	11	True				
ANR	37223	Statement	silent	2795:44:79648:79653	37190	12	True				
ANR	37224	Statement	ZEND_FILE_LINE_RELAY_CC	2795:51:79655:79677	37190	13	True				
ANR	37225	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2795:75:79679:79706	37190	14	True				
ANR	37226	Statement	)	2795:103:79707:79707	37190	15	True				
ANR	37227	ExpressionStatement		2795:104:79708:79708	37190	16	True				
ANR	37228	ReturnType	ZEND_API int		37190	1					
ANR	37229	Identifier	_mem_block_check		37190	2					
ANR	37230	ParameterList	"void * ptr , int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"		37190	3					
ANR	37231	Parameter	void * ptr	2788:30:79468:79476	37190	0	True				
ANR	37232	ParameterType	void *		37190	0					
ANR	37233	Identifier	ptr		37190	1					
ANR	37234	Parameter	int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2788:41:79479:79529	37190	1	True				
ANR	37235	ParameterType	int silent ZEND_FILE_LINE_DC		37190	0					
ANR	37236	Identifier	ZEND_FILE_LINE_ORIG_DC		37190	1					
ANR	37237	CFGEntryNode	ENTRY		37190		True				
ANR	37238	CFGExitNode	EXIT		37190		True				
ANR	37239	Symbol	AG		37190						
ANR	37240	Symbol	AG ( mm_heap ) -> use_zend_alloc		37190						
ANR	37241	Symbol	mm_heap		37190						
ANR	37242	Symbol	ZEND_FILE_LINE_ORIG_DC		37190						
ANR	37243	Symbol	ptr		37190						
ANR	37244	Symbol	* AG		37190						
ANR	37245	Function	_full_mem_check	2799:0:79714:80335							
ANR	37246	FunctionDef	_full_mem_check (int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)		37245	0					
ANR	37247	CompoundStatement		2800:0:79797:80335	37245	0					
ANR	37248	IdentifierDeclStatement	int errors ;	2801:1:79800:79810	37245	0	True				
ANR	37249	IdentifierDecl	errors		37245	0					
ANR	37250	IdentifierDeclType	int		37245	0					
ANR	37251	Identifier	errors		37245	1					
ANR	37252	ExpressionStatement	TSRMLS_FETCH ( )	2802:1:79813:79827	37245	1	True				
ANR	37253	CallExpression	TSRMLS_FETCH ( )		37245	0					
ANR	37254	Callee	TSRMLS_FETCH		37245	0					
ANR	37255	Identifier	TSRMLS_FETCH		37245	0					
ANR	37256	ArgumentList			37245	1					
ANR	37257	IfStatement	if ( ! AG ( mm_heap ) -> use_zend_alloc )		37245	2					
ANR	37258	Condition	! AG ( mm_heap ) -> use_zend_alloc	2804:5:79835:79862	37245	0	True				
ANR	37259	UnaryOperationExpression	! AG ( mm_heap ) -> use_zend_alloc		37245	0					
ANR	37260	UnaryOperator	!		37245	0					
ANR	37261	PtrMemberAccess	AG ( mm_heap ) -> use_zend_alloc		37245	1					
ANR	37262	CallExpression	AG ( mm_heap )		37245	0					
ANR	37263	Callee	AG		37245	0					
ANR	37264	Identifier	AG		37245	0					
ANR	37265	ArgumentList	mm_heap		37245	1					
ANR	37266	Argument	mm_heap		37245	0					
ANR	37267	Identifier	mm_heap		37245	0					
ANR	37268	Identifier	use_zend_alloc		37245	1					
ANR	37269	CompoundStatement		5:35:67:67	37245	1					
ANR	37270	ReturnStatement	return ;	2805:2:79869:79875	37245	0	True				
ANR	37271	ExpressionStatement	"zend_debug_alloc_output ( ""------------------------------------------------\\n"" )"	2808:1:79882:79959	37245	3	True				
ANR	37272	CallExpression	"zend_debug_alloc_output ( ""------------------------------------------------\\n"" )"		37245	0					
ANR	37273	Callee	zend_debug_alloc_output		37245	0					
ANR	37274	Identifier	zend_debug_alloc_output		37245	0					
ANR	37275	ArgumentList	"""------------------------------------------------\\n"""		37245	1					
ANR	37276	Argument	"""------------------------------------------------\\n"""		37245	0					
ANR	37277	PrimaryExpression	"""------------------------------------------------\\n"""		37245	0					
ANR	37278	Statement	zend_debug_alloc_output	2809:1:79962:79984	37245	4	True				
ANR	37279	Statement	(	2809:24:79985:79985	37245	5	True				
ANR	37280	Statement	"""Full Memory Check at %s:%d\\n"""	2809:25:79986:80015	37245	6	True				
ANR	37281	Statement	ZEND_FILE_LINE_RELAY_CC	2809:56:80017:80039	37245	7	True				
ANR	37282	Statement	)	2809:79:80040:80040	37245	8	True				
ANR	37283	ExpressionStatement		2809:80:80041:80041	37245	9	True				
ANR	37284	Statement	errors	2811:1:80045:80050	37245	10	True				
ANR	37285	Statement	=	2811:8:80052:80052	37245	11	True				
ANR	37286	Statement	zend_mm_check_heap	2811:10:80054:80071	37245	12	True				
ANR	37287	Statement	(	2811:28:80072:80072	37245	13	True				
ANR	37288	Statement	AG	2811:29:80073:80074	37245	14	True				
ANR	37289	Statement	(	2811:31:80075:80075	37245	15	True				
ANR	37290	Statement	mm_heap	2811:32:80076:80082	37245	16	True				
ANR	37291	Statement	)	2811:39:80083:80083	37245	17	True				
ANR	37292	Statement	","	2811:40:80084:80084	37245	18	True				
ANR	37293	Statement	silent	2811:42:80086:80091	37245	19	True				
ANR	37294	Statement	ZEND_FILE_LINE_RELAY_CC	2811:49:80093:80115	37245	20	True				
ANR	37295	Statement	ZEND_FILE_LINE_ORIG_RELAY_CC	2811:73:80117:80144	37245	21	True				
ANR	37296	Statement	)	2811:101:80145:80145	37245	22	True				
ANR	37297	ExpressionStatement		2811:102:80146:80146	37245	23	True				
ANR	37298	Statement	zend_debug_alloc_output	2813:1:80150:80172	37245	24	True				
ANR	37299	Statement	(	2813:24:80173:80173	37245	25	True				
ANR	37300	Statement	"""End of full memory check %s:%d (%d errors)\\n"""	2813:25:80174:80219	37245	26	True				
ANR	37301	Statement	ZEND_FILE_LINE_RELAY_CC	2813:72:80221:80243	37245	27	True				
ANR	37302	Statement	","	2813:95:80244:80244	37245	28	True				
ANR	37303	Statement	errors	2813:97:80246:80251	37245	29	True				
ANR	37304	Statement	)	2813:103:80252:80252	37245	30	True				
ANR	37305	ExpressionStatement		2813:104:80253:80253	37245	31	True				
ANR	37306	ExpressionStatement	"zend_debug_alloc_output ( ""------------------------------------------------\\n"" )"	2814:1:80256:80333	37245	32	True				
ANR	37307	CallExpression	"zend_debug_alloc_output ( ""------------------------------------------------\\n"" )"		37245	0					
ANR	37308	Callee	zend_debug_alloc_output		37245	0					
ANR	37309	Identifier	zend_debug_alloc_output		37245	0					
ANR	37310	ArgumentList	"""------------------------------------------------\\n"""		37245	1					
ANR	37311	Argument	"""------------------------------------------------\\n"""		37245	0					
ANR	37312	PrimaryExpression	"""------------------------------------------------\\n"""		37245	0					
ANR	37313	ReturnType	ZEND_API void		37245	1					
ANR	37314	Identifier	_full_mem_check		37245	2					
ANR	37315	ParameterList	int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC		37245	3					
ANR	37316	Parameter	int silent ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC	2799:30:79744:79794	37245	0	True				
ANR	37317	ParameterType	int silent ZEND_FILE_LINE_DC		37245	0					
ANR	37318	Identifier	ZEND_FILE_LINE_ORIG_DC		37245	1					
ANR	37319	CFGEntryNode	ENTRY		37245		True				
ANR	37320	CFGExitNode	EXIT		37245		True				
ANR	37321	Symbol	AG		37245						
ANR	37322	Symbol	AG ( mm_heap ) -> use_zend_alloc		37245						
ANR	37323	Symbol	mm_heap		37245						
ANR	37324	Symbol	ZEND_FILE_LINE_ORIG_DC		37245						
ANR	37325	Symbol	errors		37245						
ANR	37326	Symbol	* AG		37245						
