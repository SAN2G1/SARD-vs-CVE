command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2356469	File	data/converged/CVE-2017-11142_php-src/win32_strtoi64.c								
ANR	2356470	Function	_strtoi64	8:0:128:2636							
ANR	2356471	FunctionDef	"_strtoi64 (const char * nptr , char * * endptr , int base)"		2356470	0					
ANR	2356472	CompoundStatement		9:0:196:2636	2356470	0					
ANR	2356473	IdentifierDeclStatement	const char * s ;	10:1:199:212	2356470	0	True				
ANR	2356474	IdentifierDecl	* s		2356470	0					
ANR	2356475	IdentifierDeclType	const char *		2356470	0					
ANR	2356476	Identifier	s		2356470	1					
ANR	2356477	IdentifierDeclStatement	int64_t acc ;	11:1:215:226	2356470	1	True				
ANR	2356478	IdentifierDecl	acc		2356470	0					
ANR	2356479	IdentifierDeclType	int64_t		2356470	0					
ANR	2356480	Identifier	acc		2356470	1					
ANR	2356481	IdentifierDeclStatement	int64_t val ;	12:1:229:240	2356470	2	True				
ANR	2356482	IdentifierDecl	val		2356470	0					
ANR	2356483	IdentifierDeclType	int64_t		2356470	0					
ANR	2356484	Identifier	val		2356470	1					
ANR	2356485	IdentifierDeclStatement	"int neg , any ;"	13:1:243:255	2356470	3	True				
ANR	2356486	IdentifierDecl	neg		2356470	0					
ANR	2356487	IdentifierDeclType	int		2356470	0					
ANR	2356488	Identifier	neg		2356470	1					
ANR	2356489	IdentifierDecl	any		2356470	1					
ANR	2356490	IdentifierDeclType	int		2356470	0					
ANR	2356491	Identifier	any		2356470	1					
ANR	2356492	IdentifierDeclStatement	char c ;	14:1:258:264	2356470	4	True				
ANR	2356493	IdentifierDecl	c		2356470	0					
ANR	2356494	IdentifierDeclType	char		2356470	0					
ANR	2356495	Identifier	c		2356470	1					
ANR	2356496	ExpressionStatement	s = nptr	21:1:445:453	2356470	5	True				
ANR	2356497	AssignmentExpression	s = nptr		2356470	0		=			
ANR	2356498	Identifier	s		2356470	0					
ANR	2356499	Identifier	nptr		2356470	1					
ANR	2356500	DoStatement	do		2356470	6					
ANR	2356501	CompoundStatement		14:4:262:262	2356470	0					
ANR	2356502	ExpressionStatement	c = * s ++	23:2:463:471	2356470	0	True				
ANR	2356503	AssignmentExpression	c = * s ++		2356470	0		=			
ANR	2356504	Identifier	c		2356470	0					
ANR	2356505	UnaryOperationExpression	* s ++		2356470	1					
ANR	2356506	UnaryOperator	*		2356470	0					
ANR	2356507	PostIncDecOperationExpression	s ++		2356470	1					
ANR	2356508	Identifier	s		2356470	0					
ANR	2356509	IncDec	++		2356470	1					
ANR	2356510	Condition	isspace ( ( unsigned char ) c )	24:10:483:507	2356470	1	True				
ANR	2356511	CallExpression	isspace ( ( unsigned char ) c )		2356470	0					
ANR	2356512	Callee	isspace		2356470	0					
ANR	2356513	Identifier	isspace		2356470	0					
ANR	2356514	ArgumentList	( unsigned char ) c		2356470	1					
ANR	2356515	Argument	( unsigned char ) c		2356470	0					
ANR	2356516	CastExpression	( unsigned char ) c		2356470	0					
ANR	2356517	CastTarget	unsigned char		2356470	0					
ANR	2356518	Identifier	c		2356470	1					
ANR	2356519	IfStatement	if ( c == '-' )		2356470	7					
ANR	2356520	Condition	c == '-'	25:5:516:523	2356470	0	True				
ANR	2356521	EqualityExpression	c == '-'		2356470	0		==			
ANR	2356522	Identifier	c		2356470	0					
ANR	2356523	PrimaryExpression	'-'		2356470	1					
ANR	2356524	CompoundStatement		17:15:329:329	2356470	1					
ANR	2356525	ExpressionStatement	neg = 1	26:2:530:537	2356470	0	True				
ANR	2356526	AssignmentExpression	neg = 1		2356470	0		=			
ANR	2356527	Identifier	neg		2356470	0					
ANR	2356528	PrimaryExpression	1		2356470	1					
ANR	2356529	ExpressionStatement	c = * s ++	27:2:541:549	2356470	1	True				
ANR	2356530	AssignmentExpression	c = * s ++		2356470	0		=			
ANR	2356531	Identifier	c		2356470	0					
ANR	2356532	UnaryOperationExpression	* s ++		2356470	1					
ANR	2356533	UnaryOperator	*		2356470	0					
ANR	2356534	PostIncDecOperationExpression	s ++		2356470	1					
ANR	2356535	Identifier	s		2356470	0					
ANR	2356536	IncDec	++		2356470	1					
ANR	2356537	ElseStatement	else		2356470	0					
ANR	2356538	CompoundStatement		20:8:362:362	2356470	0					
ANR	2356539	ExpressionStatement	neg = 0	29:2:563:570	2356470	0	True				
ANR	2356540	AssignmentExpression	neg = 0		2356470	0		=			
ANR	2356541	Identifier	neg		2356470	0					
ANR	2356542	PrimaryExpression	0		2356470	1					
ANR	2356543	IfStatement	if ( c == '+' )		2356470	1					
ANR	2356544	Condition	c == '+'	30:6:578:585	2356470	0	True				
ANR	2356545	EqualityExpression	c == '+'		2356470	0		==			
ANR	2356546	Identifier	c		2356470	0					
ANR	2356547	PrimaryExpression	'+'		2356470	1					
ANR	2356548	CompoundStatement		22:16:391:391	2356470	1					
ANR	2356549	ExpressionStatement	c = * s ++	31:3:593:601	2356470	0	True				
ANR	2356550	AssignmentExpression	c = * s ++		2356470	0		=			
ANR	2356551	Identifier	c		2356470	0					
ANR	2356552	UnaryOperationExpression	* s ++		2356470	1					
ANR	2356553	UnaryOperator	*		2356470	0					
ANR	2356554	PostIncDecOperationExpression	s ++		2356470	1					
ANR	2356555	Identifier	s		2356470	0					
ANR	2356556	IncDec	++		2356470	1					
ANR	2356557	IfStatement	if ( ( base == 0 || base == 16 ) && c == '0' && ( * s == 'x' || * s == 'X' ) )		2356470	8					
ANR	2356558	Condition	( base == 0 || base == 16 ) && c == '0' && ( * s == 'x' || * s == 'X' )	35:5:616:680	2356470	0	True				
ANR	2356559	AndExpression	( base == 0 || base == 16 ) && c == '0' && ( * s == 'x' || * s == 'X' )		2356470	0		&&			
ANR	2356560	OrExpression	base == 0 || base == 16		2356470	0		||			
ANR	2356561	EqualityExpression	base == 0		2356470	0		==			
ANR	2356562	Identifier	base		2356470	0					
ANR	2356563	PrimaryExpression	0		2356470	1					
ANR	2356564	EqualityExpression	base == 16		2356470	1		==			
ANR	2356565	Identifier	base		2356470	0					
ANR	2356566	PrimaryExpression	16		2356470	1					
ANR	2356567	AndExpression	c == '0' && ( * s == 'x' || * s == 'X' )		2356470	1		&&			
ANR	2356568	EqualityExpression	c == '0'		2356470	0		==			
ANR	2356569	Identifier	c		2356470	0					
ANR	2356570	PrimaryExpression	'0'		2356470	1					
ANR	2356571	OrExpression	* s == 'x' || * s == 'X'		2356470	1		||			
ANR	2356572	EqualityExpression	* s == 'x'		2356470	0		==			
ANR	2356573	UnaryOperationExpression	* s		2356470	0					
ANR	2356574	UnaryOperator	*		2356470	0					
ANR	2356575	Identifier	s		2356470	1					
ANR	2356576	PrimaryExpression	'x'		2356470	1					
ANR	2356577	EqualityExpression	* s == 'X'		2356470	1		==			
ANR	2356578	UnaryOperationExpression	* s		2356470	0					
ANR	2356579	UnaryOperator	*		2356470	0					
ANR	2356580	Identifier	s		2356470	1					
ANR	2356581	PrimaryExpression	'X'		2356470	1					
ANR	2356582	CompoundStatement		27:72:486:486	2356470	1					
ANR	2356583	ExpressionStatement	c = s [ 1 ]	36:2:687:695	2356470	0	True				
ANR	2356584	AssignmentExpression	c = s [ 1 ]		2356470	0		=			
ANR	2356585	Identifier	c		2356470	0					
ANR	2356586	ArrayIndexing	s [ 1 ]		2356470	1					
ANR	2356587	Identifier	s		2356470	0					
ANR	2356588	PrimaryExpression	1		2356470	1					
ANR	2356589	ExpressionStatement	s += 2	37:2:699:705	2356470	1	True				
ANR	2356590	AssignmentExpression	s += 2		2356470	0		+=			
ANR	2356591	Identifier	s		2356470	0					
ANR	2356592	PrimaryExpression	2		2356470	1					
ANR	2356593	ExpressionStatement	base = 16	38:2:709:718	2356470	2	True				
ANR	2356594	AssignmentExpression	base = 16		2356470	0		=			
ANR	2356595	Identifier	base		2356470	0					
ANR	2356596	PrimaryExpression	16		2356470	1					
ANR	2356597	IfStatement	if ( base == 0 )		2356470	9					
ANR	2356598	Condition	base == 0	40:5:728:736	2356470	0	True				
ANR	2356599	EqualityExpression	base == 0		2356470	0		==			
ANR	2356600	Identifier	base		2356470	0					
ANR	2356601	PrimaryExpression	0		2356470	1					
ANR	2356602	CompoundStatement		32:16:542:542	2356470	1					
ANR	2356603	ExpressionStatement	base = c == '0' ? 8 : 10	41:2:743:767	2356470	0	True				
ANR	2356604	AssignmentExpression	base = c == '0' ? 8 : 10		2356470	0		=			
ANR	2356605	Identifier	base		2356470	0					
ANR	2356606	ConditionalExpression	c == '0' ? 8 : 10		2356470	1					
ANR	2356607	Condition	c == '0'		2356470	0					
ANR	2356608	EqualityExpression	c == '0'		2356470	0		==			
ANR	2356609	Identifier	c		2356470	0					
ANR	2356610	PrimaryExpression	'0'		2356470	1					
ANR	2356611	PrimaryExpression	8		2356470	1					
ANR	2356612	PrimaryExpression	10		2356470	2					
ANR	2356613	ExpressionStatement	acc = any = 0	43:1:773:786	2356470	10	True				
ANR	2356614	AssignmentExpression	acc = any = 0		2356470	0		=			
ANR	2356615	Identifier	acc		2356470	0					
ANR	2356616	AssignmentExpression	any = 0		2356470	1		=			
ANR	2356617	Identifier	any		2356470	0					
ANR	2356618	PrimaryExpression	0		2356470	1					
ANR	2356619	IfStatement	if ( base < 2 || base > 36 )		2356470	11					
ANR	2356620	Condition	base < 2 || base > 36	44:5:793:813	2356470	0	True				
ANR	2356621	OrExpression	base < 2 || base > 36		2356470	0		||			
ANR	2356622	RelationalExpression	base < 2		2356470	0		<			
ANR	2356623	Identifier	base		2356470	0					
ANR	2356624	PrimaryExpression	2		2356470	1					
ANR	2356625	RelationalExpression	base > 36		2356470	1		>			
ANR	2356626	Identifier	base		2356470	0					
ANR	2356627	PrimaryExpression	36		2356470	1					
ANR	2356628	CompoundStatement		36:28:619:619	2356470	1					
ANR	2356629	ExpressionStatement	errno = EINVAL	45:2:820:834	2356470	0	True				
ANR	2356630	AssignmentExpression	errno = EINVAL		2356470	0		=			
ANR	2356631	Identifier	errno		2356470	0					
ANR	2356632	Identifier	EINVAL		2356470	1					
ANR	2356633	IfStatement	if ( endptr != NULL )		2356470	1					
ANR	2356634	Condition	endptr != NULL	46:6:842:855	2356470	0	True				
ANR	2356635	EqualityExpression	endptr != NULL		2356470	0		!=			
ANR	2356636	Identifier	endptr		2356470	0					
ANR	2356637	Identifier	NULL		2356470	1					
ANR	2356638	CompoundStatement		38:22:661:661	2356470	1					
ANR	2356639	ExpressionStatement	* endptr = ( char * ) ( any ? s - 1 : nptr )	47:3:863:901	2356470	0	True				
ANR	2356640	AssignmentExpression	* endptr = ( char * ) ( any ? s - 1 : nptr )		2356470	0		=			
ANR	2356641	UnaryOperationExpression	* endptr		2356470	0					
ANR	2356642	UnaryOperator	*		2356470	0					
ANR	2356643	Identifier	endptr		2356470	1					
ANR	2356644	CastExpression	( char * ) ( any ? s - 1 : nptr )		2356470	1					
ANR	2356645	CastTarget	char *		2356470	0					
ANR	2356646	ConditionalExpression	any ? s - 1 : nptr		2356470	1					
ANR	2356647	Condition	any		2356470	0					
ANR	2356648	Identifier	any		2356470	0					
ANR	2356649	AdditiveExpression	s - 1		2356470	1		-			
ANR	2356650	Identifier	s		2356470	0					
ANR	2356651	PrimaryExpression	1		2356470	1					
ANR	2356652	Identifier	nptr		2356470	2					
ANR	2356653	ReturnStatement	return acc ;	49:2:909:919	2356470	2	True				
ANR	2356654	Identifier	acc		2356470	0					
ANR	2356655	ExpressionStatement	val = 0	62:4:1387:1394	2356470	12	True				
ANR	2356656	AssignmentExpression	val = 0		2356470	0		=			
ANR	2356657	Identifier	val		2356470	0					
ANR	2356658	PrimaryExpression	0		2356470	1					
ANR	2356659	ForStatement	for ( ; ; c = * s ++ )		2356470	13					
ANR	2356660	AssignmentExpression	c = * s ++	63:11:1407:1414	2356470	0	True	=			
ANR	2356661	Identifier	c		2356470	0					
ANR	2356662	UnaryOperationExpression	* s ++		2356470	1					
ANR	2356663	UnaryOperator	*		2356470	0					
ANR	2356664	PostIncDecOperationExpression	s ++		2356470	1					
ANR	2356665	Identifier	s		2356470	0					
ANR	2356666	IncDec	++		2356470	1					
ANR	2356667	CompoundStatement		55:21:1220:1220	2356470	1					
ANR	2356668	IfStatement	if ( c >= '0' && c <= '9' )		2356470	0					
ANR	2356669	Condition	c >= '0' && c <= '9'	64:6:1425:1444	2356470	0	True				
ANR	2356670	AndExpression	c >= '0' && c <= '9'		2356470	0		&&			
ANR	2356671	RelationalExpression	c >= '0'		2356470	0		>=			
ANR	2356672	Identifier	c		2356470	0					
ANR	2356673	PrimaryExpression	'0'		2356470	1					
ANR	2356674	RelationalExpression	c <= '9'		2356470	1		<=			
ANR	2356675	Identifier	c		2356470	0					
ANR	2356676	PrimaryExpression	'9'		2356470	1					
ANR	2356677	ExpressionStatement	c -= '0'	65:3:1450:1458	2356470	1	True				
ANR	2356678	AssignmentExpression	c -= '0'		2356470	0		-=			
ANR	2356679	Identifier	c		2356470	0					
ANR	2356680	PrimaryExpression	'0'		2356470	1					
ANR	2356681	ElseStatement	else		2356470	0					
ANR	2356682	IfStatement	if ( c >= 'A' && c <= 'Z' )		2356470	0					
ANR	2356683	Condition	c >= 'A' && c <= 'Z'	68:11:1496:1515	2356470	0	True				
ANR	2356684	AndExpression	c >= 'A' && c <= 'Z'		2356470	0		&&			
ANR	2356685	RelationalExpression	c >= 'A'		2356470	0		>=			
ANR	2356686	Identifier	c		2356470	0					
ANR	2356687	PrimaryExpression	'A'		2356470	1					
ANR	2356688	RelationalExpression	c <= 'Z'		2356470	1		<=			
ANR	2356689	Identifier	c		2356470	0					
ANR	2356690	PrimaryExpression	'Z'		2356470	1					
ANR	2356691	ExpressionStatement	c -= 'A' - 10	69:3:1521:1534	2356470	1	True				
ANR	2356692	AssignmentExpression	c -= 'A' - 10		2356470	0		-=			
ANR	2356693	Identifier	c		2356470	0					
ANR	2356694	AdditiveExpression	'A' - 10		2356470	1		-			
ANR	2356695	PrimaryExpression	'A'		2356470	0					
ANR	2356696	PrimaryExpression	10		2356470	1					
ANR	2356697	ElseStatement	else		2356470	0					
ANR	2356698	IfStatement	if ( c >= 'a' && c <= 'z' )		2356470	0					
ANR	2356699	Condition	c >= 'a' && c <= 'z'	70:11:1547:1566	2356470	0	True				
ANR	2356700	AndExpression	c >= 'a' && c <= 'z'		2356470	0		&&			
ANR	2356701	RelationalExpression	c >= 'a'		2356470	0		>=			
ANR	2356702	Identifier	c		2356470	0					
ANR	2356703	PrimaryExpression	'a'		2356470	1					
ANR	2356704	RelationalExpression	c <= 'z'		2356470	1		<=			
ANR	2356705	Identifier	c		2356470	0					
ANR	2356706	PrimaryExpression	'z'		2356470	1					
ANR	2356707	ExpressionStatement	c -= 'a' - 10	71:3:1572:1585	2356470	1	True				
ANR	2356708	AssignmentExpression	c -= 'a' - 10		2356470	0		-=			
ANR	2356709	Identifier	c		2356470	0					
ANR	2356710	AdditiveExpression	'a' - 10		2356470	1		-			
ANR	2356711	PrimaryExpression	'a'		2356470	0					
ANR	2356712	PrimaryExpression	10		2356470	1					
ANR	2356713	ElseStatement	else		2356470	0					
ANR	2356714	CompoundStatement		80:7:1814:1814	2356470	0					
ANR	2356715	BreakStatement	break ;	89:3:2016:2021	2356470	0	True				
ANR	2356716	IfStatement	if ( c >= base )		2356470	1					
ANR	2356717	Condition	c >= base	92:6:2034:2042	2356470	0	True				
ANR	2356718	RelationalExpression	c >= base		2356470	0		>=			
ANR	2356719	Identifier	c		2356470	0					
ANR	2356720	Identifier	base		2356470	1					
ANR	2356721	CompoundStatement		84:17:1848:1848	2356470	1					
ANR	2356722	BreakStatement	break ;	93:3:2050:2055	2356470	0	True				
ANR	2356723	ExpressionStatement	val *= base	96:2:2064:2075	2356470	2	True				
ANR	2356724	AssignmentExpression	val *= base		2356470	0		*=			
ANR	2356725	Identifier	val		2356470	0					
ANR	2356726	Identifier	base		2356470	1					
ANR	2356727	IfStatement	if ( ( any < 0 ) || ( neg && ( val > acc || ( val -= c ) > acc ) ) || ( val < acc || ( val += c ) < acc ) )		2356470	3					
ANR	2356728	Condition	( any < 0 ) || ( neg && ( val > acc || ( val -= c ) > acc ) ) || ( val < acc || ( val += c ) < acc )	97:7:2084:2250	2356470	0	True				
ANR	2356729	OrExpression	( any < 0 ) || ( neg && ( val > acc || ( val -= c ) > acc ) ) || ( val < acc || ( val += c ) < acc )		2356470	0		||			
ANR	2356730	RelationalExpression	any < 0		2356470	0		<			
ANR	2356731	Identifier	any		2356470	0					
ANR	2356732	PrimaryExpression	0		2356470	1					
ANR	2356733	OrExpression	( neg && ( val > acc || ( val -= c ) > acc ) ) || ( val < acc || ( val += c ) < acc )		2356470	1		||			
ANR	2356734	AndExpression	neg && ( val > acc || ( val -= c ) > acc )		2356470	0		&&			
ANR	2356735	Identifier	neg		2356470	0					
ANR	2356736	OrExpression	val > acc || ( val -= c ) > acc		2356470	1		||			
ANR	2356737	RelationalExpression	val > acc		2356470	0		>			
ANR	2356738	Identifier	val		2356470	0					
ANR	2356739	Identifier	acc		2356470	1					
ANR	2356740	RelationalExpression	( val -= c ) > acc		2356470	1		>			
ANR	2356741	AssignmentExpression	val -= c		2356470	0		-=			
ANR	2356742	Identifier	val		2356470	0					
ANR	2356743	Identifier	c		2356470	1					
ANR	2356744	Identifier	acc		2356470	1					
ANR	2356745	OrExpression	val < acc || ( val += c ) < acc		2356470	1		||			
ANR	2356746	RelationalExpression	val < acc		2356470	0		<			
ANR	2356747	Identifier	val		2356470	0					
ANR	2356748	Identifier	acc		2356470	1					
ANR	2356749	RelationalExpression	( val += c ) < acc		2356470	1		<			
ANR	2356750	AssignmentExpression	val += c		2356470	0		+=			
ANR	2356751	Identifier	val		2356470	0					
ANR	2356752	Identifier	c		2356470	1					
ANR	2356753	Identifier	acc		2356470	1					
ANR	2356754	CompoundStatement		91:40:2056:2056	2356470	1					
ANR	2356755	ExpressionStatement	any = - 1	100:3:2279:2287	2356470	0	True				
ANR	2356756	AssignmentExpression	any = - 1		2356470	0		=			
ANR	2356757	Identifier	any		2356470	0					
ANR	2356758	UnaryOperationExpression	- 1		2356470	1					
ANR	2356759	UnaryOperator	-		2356470	0					
ANR	2356760	PrimaryExpression	1		2356470	1					
ANR	2356761	BreakStatement	break ;	102:3:2381:2386	2356470	1	True				
ANR	2356762	ElseStatement	else		2356470	0					
ANR	2356763	CompoundStatement		96:9:2207:2207	2356470	0					
ANR	2356764	ExpressionStatement	acc = val	105:3:2409:2418	2356470	0	True				
ANR	2356765	AssignmentExpression	acc = val		2356470	0		=			
ANR	2356766	Identifier	acc		2356470	0					
ANR	2356767	Identifier	val		2356470	1					
ANR	2356768	ExpressionStatement	any = 1	106:3:2423:2430	2356470	1	True				
ANR	2356769	AssignmentExpression	any = 1		2356470	0		=			
ANR	2356770	Identifier	any		2356470	0					
ANR	2356771	PrimaryExpression	1		2356470	1					
ANR	2356772	IfStatement	if ( any < 0 )		2356470	14					
ANR	2356773	Condition	any < 0	110:5:2445:2451	2356470	0	True				
ANR	2356774	RelationalExpression	any < 0		2356470	0		<			
ANR	2356775	Identifier	any		2356470	0					
ANR	2356776	PrimaryExpression	0		2356470	1					
ANR	2356777	CompoundStatement		102:14:2257:2257	2356470	1					
ANR	2356778	ExpressionStatement	acc = neg ? INT64_MIN : INT64_MAX	111:2:2458:2491	2356470	0	True				
ANR	2356779	AssignmentExpression	acc = neg ? INT64_MIN : INT64_MAX		2356470	0		=			
ANR	2356780	Identifier	acc		2356470	0					
ANR	2356781	ConditionalExpression	neg ? INT64_MIN : INT64_MAX		2356470	1					
ANR	2356782	Condition	neg		2356470	0					
ANR	2356783	Identifier	neg		2356470	0					
ANR	2356784	Identifier	INT64_MIN		2356470	1					
ANR	2356785	Identifier	INT64_MAX		2356470	2					
ANR	2356786	ExpressionStatement	errno = ERANGE	112:2:2495:2509	2356470	1	True				
ANR	2356787	AssignmentExpression	errno = ERANGE		2356470	0		=			
ANR	2356788	Identifier	errno		2356470	0					
ANR	2356789	Identifier	ERANGE		2356470	1					
ANR	2356790	ElseStatement	else		2356470	0					
ANR	2356791	IfStatement	if ( ! any )		2356470	0					
ANR	2356792	Condition	! any	113:12:2523:2526	2356470	0	True				
ANR	2356793	UnaryOperationExpression	! any		2356470	0					
ANR	2356794	UnaryOperator	!		2356470	0					
ANR	2356795	Identifier	any		2356470	1					
ANR	2356796	CompoundStatement		105:18:2332:2332	2356470	1					
ANR	2356797	ExpressionStatement	errno = EINVAL	114:2:2533:2547	2356470	0	True				
ANR	2356798	AssignmentExpression	errno = EINVAL		2356470	0		=			
ANR	2356799	Identifier	errno		2356470	0					
ANR	2356800	Identifier	EINVAL		2356470	1					
ANR	2356801	IfStatement	if ( endptr != NULL )		2356470	15					
ANR	2356802	Condition	endptr != NULL	117:5:2558:2571	2356470	0	True				
ANR	2356803	EqualityExpression	endptr != NULL		2356470	0		!=			
ANR	2356804	Identifier	endptr		2356470	0					
ANR	2356805	Identifier	NULL		2356470	1					
ANR	2356806	CompoundStatement		109:21:2377:2377	2356470	1					
ANR	2356807	ExpressionStatement	* endptr = ( char * ) ( any ? s - 1 : nptr )	118:2:2578:2616	2356470	0	True				
ANR	2356808	AssignmentExpression	* endptr = ( char * ) ( any ? s - 1 : nptr )		2356470	0		=			
ANR	2356809	UnaryOperationExpression	* endptr		2356470	0					
ANR	2356810	UnaryOperator	*		2356470	0					
ANR	2356811	Identifier	endptr		2356470	1					
ANR	2356812	CastExpression	( char * ) ( any ? s - 1 : nptr )		2356470	1					
ANR	2356813	CastTarget	char *		2356470	0					
ANR	2356814	ConditionalExpression	any ? s - 1 : nptr		2356470	1					
ANR	2356815	Condition	any		2356470	0					
ANR	2356816	Identifier	any		2356470	0					
ANR	2356817	AdditiveExpression	s - 1		2356470	1		-			
ANR	2356818	Identifier	s		2356470	0					
ANR	2356819	PrimaryExpression	1		2356470	1					
ANR	2356820	Identifier	nptr		2356470	2					
ANR	2356821	ReturnStatement	return ( acc ) ;	120:1:2622:2634	2356470	16	True				
ANR	2356822	Identifier	acc		2356470	0					
ANR	2356823	ReturnType	PHPAPI int64_t		2356470	1					
ANR	2356824	Identifier	_strtoi64		2356470	2					
ANR	2356825	ParameterList	"const char * nptr , char * * endptr , int base"		2356470	3					
ANR	2356826	Parameter	const char * nptr	8:25:153:168	2356470	0	True				
ANR	2356827	ParameterType	const char *		2356470	0					
ANR	2356828	Identifier	nptr		2356470	1					
ANR	2356829	Parameter	char * * endptr	8:43:171:183	2356470	1	True				
ANR	2356830	ParameterType	char * *		2356470	0					
ANR	2356831	Identifier	endptr		2356470	1					
ANR	2356832	Parameter	int base	8:58:186:193	2356470	2	True				
ANR	2356833	ParameterType	int		2356470	0					
ANR	2356834	Identifier	base		2356470	1					
ANR	2356835	CFGEntryNode	ENTRY		2356470		True				
ANR	2356836	CFGExitNode	EXIT		2356470		True				
ANR	2356837	InfiniteForNode	true		2356470		True				
ANR	2356838	Symbol	acc		2356470						
ANR	2356839	Symbol	val		2356470						
ANR	2356840	Symbol	* s ++		2356470						
ANR	2356841	Symbol	errno		2356470						
ANR	2356842	Symbol	c		2356470						
ANR	2356843	Symbol	NULL		2356470						
ANR	2356844	Symbol	endptr		2356470						
ANR	2356845	Symbol	* endptr		2356470						
ANR	2356846	Symbol	isspace		2356470						
ANR	2356847	Symbol	INT64_MAX		2356470						
ANR	2356848	Symbol	any		2356470						
ANR	2356849	Symbol	EINVAL		2356470						
ANR	2356850	Symbol	neg		2356470						
ANR	2356851	Symbol	nptr		2356470						
ANR	2356852	Symbol	s		2356470						
ANR	2356853	Symbol	ERANGE		2356470						
ANR	2356854	Symbol	INT64_MIN		2356470						
ANR	2356855	Symbol	* s		2356470						
ANR	2356856	Symbol	base		2356470						
