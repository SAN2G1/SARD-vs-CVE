command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	804226	File	data/converged/CVE-2017-11142_php-src/ext_mbstring_ucgendat_ucgendat.c								
ANR	804227	DeclStmt									
ANR	804228	Decl							ac_uint2	ac_uint2 [ 2 ]	hdr
ANR	804229	ClassDef	<unnamed>	69:8:2464:2511							
ANR	804230	DeclStmt									
ANR	804231	Decl							char	char *	name
ANR	804232	DeclStmt									
ANR	804233	Decl							int	int	len
ANR	804234	DeclStmt									
ANR	804235	Decl									_prop_t
ANR	804236	DeclStmt									
ANR	804237	Decl							_prop_t	_prop_t [ NUMPROPS ]	props
ANR	804238	ClassDef	<unnamed>	100:8:3540:3620							
ANR	804239	DeclStmt									
ANR	804240	Decl							ac_uint4	ac_uint4 *	ranges
ANR	804241	DeclStmt									
ANR	804242	Decl							ac_uint2	ac_uint2	used
ANR	804243	DeclStmt									
ANR	804244	Decl							ac_uint2	ac_uint2	size
ANR	804245	DeclStmt									
ANR	804246	Decl									_ranges_t
ANR	804247	DeclStmt									
ANR	804248	Decl							_ranges_t	_ranges_t [ NUMPROPS ]	proptbl
ANR	804249	DeclStmt									
ANR	804250	Decl							ac_uint2	ac_uint2 [ NEEDPROPS ]	propcnt
ANR	804251	DeclStmt									
ANR	804252	Decl							ac_uint4	ac_uint4 [ 64 ]	dectmp
ANR	804253	DeclStmt									
ANR	804254	Decl							ac_uint4	ac_uint4	dectmp_size
ANR	804255	ClassDef	<unnamed>	120:8:3943:4042							
ANR	804256	DeclStmt									
ANR	804257	Decl							ac_uint4	ac_uint4	code
ANR	804258	DeclStmt									
ANR	804259	Decl							ac_uint2	ac_uint2	size
ANR	804260	DeclStmt									
ANR	804261	Decl							ac_uint2	ac_uint2	used
ANR	804262	DeclStmt									
ANR	804263	Decl							ac_uint4	ac_uint4 *	decomp
ANR	804264	DeclStmt									
ANR	804265	Decl									_decomp_t
ANR	804266	DeclStmt									
ANR	804267	Decl							_decomp_t	_decomp_t *	decomps
ANR	804268	DeclStmt									
ANR	804269	Decl							ac_uint4	ac_uint4	decomps_used
ANR	804270	DeclStmt									
ANR	804271	Decl							ac_uint4	ac_uint4	decomps_size
ANR	804272	DeclStmt									
ANR	804273	Decl							_decomp_t	_decomp_t *	kdecomps
ANR	804274	DeclStmt									
ANR	804275	Decl							ac_uint4	ac_uint4	kdecomps_used
ANR	804276	DeclStmt									
ANR	804277	Decl							ac_uint4	ac_uint4	kdecomps_size
ANR	804278	DeclStmt									
ANR	804279	Decl							ac_uint4	ac_uint4 [ 8192 ]	compexs
ANR	804280	ClassDef	<unnamed>	150:8:4705:4802							
ANR	804281	DeclStmt									
ANR	804282	Decl							ac_uint4	ac_uint4	comp
ANR	804283	DeclStmt									
ANR	804284	Decl							ac_uint4	ac_uint4	count
ANR	804285	DeclStmt									
ANR	804286	Decl							ac_uint4	ac_uint4	code1
ANR	804287	DeclStmt									
ANR	804288	Decl							ac_uint4	ac_uint4	code2
ANR	804289	DeclStmt									
ANR	804290	Decl									_comp_t
ANR	804291	DeclStmt									
ANR	804292	Decl							_comp_t	_comp_t *	comps
ANR	804293	DeclStmt									
ANR	804294	Decl							ac_uint4	ac_uint4	comps_used
ANR	804295	ClassDef	<unnamed>	165:8:4941:5019							
ANR	804296	DeclStmt									
ANR	804297	Decl							ac_uint4	ac_uint4	key
ANR	804298	DeclStmt									
ANR	804299	Decl							ac_uint4	ac_uint4	other1
ANR	804300	DeclStmt									
ANR	804301	Decl							ac_uint4	ac_uint4	other2
ANR	804302	DeclStmt									
ANR	804303	Decl									_case_t
ANR	804304	DeclStmt									
ANR	804305	Decl							_case_t	_case_t *	upper
ANR	804306	DeclStmt									
ANR	804307	Decl							_case_t	_case_t *	lower
ANR	804308	DeclStmt									
ANR	804309	Decl							_case_t	_case_t *	title
ANR	804310	DeclStmt									
ANR	804311	Decl							ac_uint4	ac_uint4	upper_used
ANR	804312	DeclStmt									
ANR	804313	Decl							ac_uint4	ac_uint4	upper_size
ANR	804314	DeclStmt									
ANR	804315	Decl							ac_uint4	ac_uint4	lower_used
ANR	804316	DeclStmt									
ANR	804317	Decl							ac_uint4	ac_uint4	lower_size
ANR	804318	DeclStmt									
ANR	804319	Decl							ac_uint4	ac_uint4	title_used
ANR	804320	DeclStmt									
ANR	804321	Decl							ac_uint4	ac_uint4	title_size
ANR	804322	DeclStmt									
ANR	804323	Decl							ac_uint4	ac_uint4 [ 3 ]	cases
ANR	804324	DeclStmt									
ANR	804325	Decl							ac_uint4	ac_uint4 *	ccl
ANR	804326	DeclStmt									
ANR	804327	Decl							ac_uint4	ac_uint4	ccl_used
ANR	804328	DeclStmt									
ANR	804329	Decl							ac_uint4	ac_uint4	ccl_size
ANR	804330	ClassDef	<unnamed>	196:8:5546:5604							
ANR	804331	DeclStmt									
ANR	804332	Decl							ac_uint4	ac_uint4	code
ANR	804333	DeclStmt									
ANR	804334	Decl							ac_uint4	ac_uint4	idx
ANR	804335	DeclStmt									
ANR	804336	Decl									_codeidx_t
ANR	804337	ClassDef	<unnamed>	201:8:5615:5676							
ANR	804338	DeclStmt									
ANR	804339	Decl							short	short	numerator
ANR	804340	DeclStmt									
ANR	804341	Decl							short	short	denominator
ANR	804342	DeclStmt									
ANR	804343	Decl									_num_t
ANR	804344	DeclStmt									
ANR	804345	Decl							_codeidx_t	_codeidx_t *	ncodes
ANR	804346	DeclStmt									
ANR	804347	Decl							ac_uint4	ac_uint4	ncodes_used
ANR	804348	DeclStmt									
ANR	804349	Decl							ac_uint4	ac_uint4	ncodes_size
ANR	804350	DeclStmt									
ANR	804351	Decl							_num_t	_num_t *	nums
ANR	804352	DeclStmt									
ANR	804353	Decl							ac_uint4	ac_uint4	nums_used
ANR	804354	DeclStmt									
ANR	804355	Decl							ac_uint4	ac_uint4	nums_size
ANR	804356	DeclStmt									
ANR	804357	Decl							_num_t	_num_t *	nums
ANR	804358	DeclStmt									
ANR	804359	Decl							ac_uint4	ac_uint4	nums_used
ANR	804360	DeclStmt									
ANR	804361	Decl							ac_uint4	ac_uint4	nums_size
ANR	804362	Function	add_range	224:0:6012:8497							
ANR	804363	FunctionDef	"add_range (ac_uint4 start , ac_uint4 end , char * p1 , char * p2)"		804362	0					
ANR	804364	CompoundStatement		226:0:6084:8497	804362	0					
ANR	804365	IdentifierDeclStatement	"int i , j , k , len ;"	227:4:6090:6106	804362	0	True				
ANR	804366	IdentifierDecl	i		804362	0					
ANR	804367	IdentifierDeclType	int		804362	0					
ANR	804368	Identifier	i		804362	1					
ANR	804369	IdentifierDecl	j		804362	1					
ANR	804370	IdentifierDeclType	int		804362	0					
ANR	804371	Identifier	j		804362	1					
ANR	804372	IdentifierDecl	k		804362	2					
ANR	804373	IdentifierDeclType	int		804362	0					
ANR	804374	Identifier	k		804362	1					
ANR	804375	IdentifierDecl	len		804362	3					
ANR	804376	IdentifierDeclType	int		804362	0					
ANR	804377	Identifier	len		804362	1					
ANR	804378	IdentifierDeclStatement	_ranges_t * rlp ;	228:4:6112:6126	804362	1	True				
ANR	804379	IdentifierDecl	* rlp		804362	0					
ANR	804380	IdentifierDeclType	_ranges_t *		804362	0					
ANR	804381	Identifier	rlp		804362	1					
ANR	804382	IdentifierDeclStatement	char * name ;	229:4:6132:6142	804362	2	True				
ANR	804383	IdentifierDecl	* name		804362	0					
ANR	804384	IdentifierDeclType	char *		804362	0					
ANR	804385	Identifier	name		804362	1					
ANR	804386	ForStatement	for ( k = 0 ; k < 2 ; k ++ )		804362	3					
ANR	804387	ForInit	k = 0 ;	231:9:6154:6159	804362	0	True				
ANR	804388	AssignmentExpression	k = 0		804362	0		=			
ANR	804389	Identifier	k		804362	0					
ANR	804390	PrimaryExpression	0		804362	1					
ANR	804391	Condition	k < 2	231:16:6161:6165	804362	1	True				
ANR	804392	RelationalExpression	k < 2		804362	0		<			
ANR	804393	Identifier	k		804362	0					
ANR	804394	PrimaryExpression	2		804362	1					
ANR	804395	PostIncDecOperationExpression	k ++	231:23:6168:6170	804362	2	True				
ANR	804396	Identifier	k		804362	0					
ANR	804397	IncDec	++		804362	1					
ANR	804398	CompoundStatement		6:28:88:88	804362	3					
ANR	804399	IfStatement	if ( k == 0 )		804362	0					
ANR	804400	Condition	k == 0	232:12:6187:6192	804362	0	True				
ANR	804401	EqualityExpression	k == 0		804362	0		==			
ANR	804402	Identifier	k		804362	0					
ANR	804403	PrimaryExpression	0		804362	1					
ANR	804404	CompoundStatement		7:20:110:110	804362	1					
ANR	804405	ExpressionStatement	name = p1	233:12:6209:6218	804362	0	True				
ANR	804406	AssignmentExpression	name = p1		804362	0		=			
ANR	804407	Identifier	name		804362	0					
ANR	804408	Identifier	p1		804362	1					
ANR	804409	ExpressionStatement	len = 2	234:12:6232:6239	804362	1	True				
ANR	804410	AssignmentExpression	len = 2		804362	0		=			
ANR	804411	Identifier	len		804362	0					
ANR	804412	PrimaryExpression	2		804362	1					
ANR	804413	ElseStatement	else		804362	0					
ANR	804414	CompoundStatement		10:15:171:171	804362	0					
ANR	804415	IfStatement	if ( p2 == 0 )		804362	0					
ANR	804416	Condition	p2 == 0	236:16:6274:6280	804362	0	True				
ANR	804417	EqualityExpression	p2 == 0		804362	0		==			
ANR	804418	Identifier	p2		804362	0					
ANR	804419	PrimaryExpression	0		804362	1					
ANR	804420	BreakStatement	break ;	237:14:6297:6302	804362	1	True				
ANR	804421	ExpressionStatement	name = p2	239:12:6317:6326	804362	1	True				
ANR	804422	AssignmentExpression	name = p2		804362	0		=			
ANR	804423	Identifier	name		804362	0					
ANR	804424	Identifier	p2		804362	1					
ANR	804425	ExpressionStatement	len = 1	240:12:6340:6347	804362	2	True				
ANR	804426	AssignmentExpression	len = 1		804362	0		=			
ANR	804427	Identifier	len		804362	0					
ANR	804428	PrimaryExpression	1		804362	1					
ANR	804429	ForStatement	for ( i = 0 ; i < NUMPROPS ; i ++ )		804362	1					
ANR	804430	ForInit	i = 0 ;	243:13:6373:6378	804362	0	True				
ANR	804431	AssignmentExpression	i = 0		804362	0		=			
ANR	804432	Identifier	i		804362	0					
ANR	804433	PrimaryExpression	0		804362	1					
ANR	804434	Condition	i < NUMPROPS	243:20:6380:6391	804362	1	True				
ANR	804435	RelationalExpression	i < NUMPROPS		804362	0		<			
ANR	804436	Identifier	i		804362	0					
ANR	804437	Identifier	NUMPROPS		804362	1					
ANR	804438	PostIncDecOperationExpression	i ++	243:34:6394:6396	804362	2	True				
ANR	804439	Identifier	i		804362	0					
ANR	804440	IncDec	++		804362	1					
ANR	804441	CompoundStatement		18:39:314:314	804362	3					
ANR	804442	IfStatement	"if ( props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0 )"		804362	0					
ANR	804443	Condition	"props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0"	244:16:6417:6476	804362	0	True				
ANR	804444	AndExpression	"props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0"		804362	0		&&			
ANR	804445	EqualityExpression	props [ i ] . len == len		804362	0		==			
ANR	804446	MemberAccess	props [ i ] . len		804362	0					
ANR	804447	ArrayIndexing	props [ i ]		804362	0					
ANR	804448	Identifier	props		804362	0					
ANR	804449	Identifier	i		804362	1					
ANR	804450	Identifier	len		804362	1					
ANR	804451	Identifier	len		804362	1					
ANR	804452	EqualityExpression	"memcmp ( props [ i ] . name , name , len ) == 0"		804362	1		==			
ANR	804453	CallExpression	"memcmp ( props [ i ] . name , name , len )"		804362	0					
ANR	804454	Callee	memcmp		804362	0					
ANR	804455	Identifier	memcmp		804362	0					
ANR	804456	ArgumentList	props [ i ] . name		804362	1					
ANR	804457	Argument	props [ i ] . name		804362	0					
ANR	804458	MemberAccess	props [ i ] . name		804362	0					
ANR	804459	ArrayIndexing	props [ i ]		804362	0					
ANR	804460	Identifier	props		804362	0					
ANR	804461	Identifier	i		804362	1					
ANR	804462	Identifier	name		804362	1					
ANR	804463	Argument	name		804362	1					
ANR	804464	Identifier	name		804362	0					
ANR	804465	Argument	len		804362	2					
ANR	804466	Identifier	len		804362	0					
ANR	804467	PrimaryExpression	0		804362	1					
ANR	804468	BreakStatement	break ;	245:14:6493:6498	804362	1	True				
ANR	804469	IfStatement	if ( i == NUMPROPS )		804362	2					
ANR	804470	Condition	i == NUMPROPS	248:12:6523:6535	804362	0	True				
ANR	804471	EqualityExpression	i == NUMPROPS		804362	0		==			
ANR	804472	Identifier	i		804362	0					
ANR	804473	Identifier	NUMPROPS		804362	1					
ANR	804474	ContinueStatement	continue ;	249:10:6548:6556	804362	1	True				
ANR	804475	ExpressionStatement	rlp = & proptbl [ i ]	251:8:6567:6584	804362	3	True				
ANR	804476	AssignmentExpression	rlp = & proptbl [ i ]		804362	0		=			
ANR	804477	Identifier	rlp		804362	0					
ANR	804478	UnaryOperationExpression	& proptbl [ i ]		804362	1					
ANR	804479	UnaryOperator	&		804362	0					
ANR	804480	ArrayIndexing	proptbl [ i ]		804362	1					
ANR	804481	Identifier	proptbl		804362	0					
ANR	804482	Identifier	i		804362	1					
ANR	804483	IfStatement	if ( rlp -> used == rlp -> size )		804362	4					
ANR	804484	Condition	rlp -> used == rlp -> size	256:12:6669:6690	804362	0	True				
ANR	804485	EqualityExpression	rlp -> used == rlp -> size		804362	0		==			
ANR	804486	PtrMemberAccess	rlp -> used		804362	0					
ANR	804487	Identifier	rlp		804362	0					
ANR	804488	Identifier	used		804362	1					
ANR	804489	PtrMemberAccess	rlp -> size		804362	1					
ANR	804490	Identifier	rlp		804362	0					
ANR	804491	Identifier	size		804362	1					
ANR	804492	CompoundStatement		31:36:608:608	804362	1					
ANR	804493	IfStatement	if ( rlp -> size == 0 )		804362	0					
ANR	804494	Condition	rlp -> size == 0	257:16:6711:6724	804362	0	True				
ANR	804495	EqualityExpression	rlp -> size == 0		804362	0		==			
ANR	804496	PtrMemberAccess	rlp -> size		804362	0					
ANR	804497	Identifier	rlp		804362	0					
ANR	804498	Identifier	size		804362	1					
ANR	804499	PrimaryExpression	0		804362	1					
ANR	804500	ExpressionStatement	rlp -> ranges = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )	258:14:6741:6815	804362	1	True				
ANR	804501	AssignmentExpression	rlp -> ranges = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )		804362	0		=			
ANR	804502	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804503	Identifier	rlp		804362	0					
ANR	804504	Identifier	ranges		804362	1					
ANR	804505	CastExpression	( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )		804362	1					
ANR	804506	CastTarget	ac_uint4 *		804362	0					
ANR	804507	CallExpression	malloc ( sizeof ( ac_uint4 ) << 3 )		804362	1					
ANR	804508	Callee	malloc		804362	0					
ANR	804509	Identifier	malloc		804362	0					
ANR	804510	ArgumentList	sizeof ( ac_uint4 ) << 3		804362	1					
ANR	804511	Argument	sizeof ( ac_uint4 ) << 3		804362	0					
ANR	804512	ShiftExpression	sizeof ( ac_uint4 ) << 3		804362	0		<<			
ANR	804513	SizeofExpression	sizeof ( ac_uint4 )		804362	0					
ANR	804514	Sizeof	sizeof		804362	0					
ANR	804515	SizeofOperand	ac_uint4		804362	1					
ANR	804516	PrimaryExpression	3		804362	1					
ANR	804517	ElseStatement	else		804362	0					
ANR	804518	ExpressionStatement	"rlp -> ranges = ( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"	261:14:6848:6984	804362	0	True				
ANR	804519	AssignmentExpression	"rlp -> ranges = ( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		804362	0		=			
ANR	804520	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804521	Identifier	rlp		804362	0					
ANR	804522	Identifier	ranges		804362	1					
ANR	804523	CastExpression	"( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		804362	1					
ANR	804524	CastTarget	ac_uint4 *		804362	0					
ANR	804525	CallExpression	"realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		804362	1					
ANR	804526	Callee	realloc		804362	0					
ANR	804527	Identifier	realloc		804362	0					
ANR	804528	ArgumentList	( char * ) rlp -> ranges		804362	1					
ANR	804529	Argument	( char * ) rlp -> ranges		804362	0					
ANR	804530	CastExpression	( char * ) rlp -> ranges		804362	0					
ANR	804531	CastTarget	char *		804362	0					
ANR	804532	PtrMemberAccess	rlp -> ranges		804362	1					
ANR	804533	Identifier	rlp		804362	0					
ANR	804534	Identifier	ranges		804362	1					
ANR	804535	Argument	sizeof ( ac_uint4 ) * ( rlp -> size + 8 )		804362	1					
ANR	804536	MultiplicativeExpression	sizeof ( ac_uint4 ) * ( rlp -> size + 8 )		804362	0		*			
ANR	804537	SizeofExpression	sizeof ( ac_uint4 )		804362	0					
ANR	804538	Sizeof	sizeof		804362	0					
ANR	804539	SizeofOperand	ac_uint4		804362	1					
ANR	804540	AdditiveExpression	rlp -> size + 8		804362	1		+			
ANR	804541	PtrMemberAccess	rlp -> size		804362	0					
ANR	804542	Identifier	rlp		804362	0					
ANR	804543	Identifier	size		804362	1					
ANR	804544	PrimaryExpression	8		804362	1					
ANR	804545	ExpressionStatement	rlp -> size += 8	264:12:6998:7012	804362	1	True				
ANR	804546	AssignmentExpression	rlp -> size += 8		804362	0		+=			
ANR	804547	PtrMemberAccess	rlp -> size		804362	0					
ANR	804548	Identifier	rlp		804362	0					
ANR	804549	Identifier	size		804362	1					
ANR	804550	PrimaryExpression	8		804362	1					
ANR	804551	IfStatement	if ( rlp -> used == 0 )		804362	5					
ANR	804552	Condition	rlp -> used == 0	271:12:7156:7169	804362	0	True				
ANR	804553	EqualityExpression	rlp -> used == 0		804362	0		==			
ANR	804554	PtrMemberAccess	rlp -> used		804362	0					
ANR	804555	Identifier	rlp		804362	0					
ANR	804556	Identifier	used		804362	1					
ANR	804557	PrimaryExpression	0		804362	1					
ANR	804558	CompoundStatement		46:28:1087:1087	804362	1					
ANR	804559	ExpressionStatement	rlp -> ranges [ 0 ] = start	272:12:7186:7208	804362	0	True				
ANR	804560	AssignmentExpression	rlp -> ranges [ 0 ] = start		804362	0		=			
ANR	804561	ArrayIndexing	rlp -> ranges [ 0 ]		804362	0					
ANR	804562	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804563	Identifier	rlp		804362	0					
ANR	804564	Identifier	ranges		804362	1					
ANR	804565	PrimaryExpression	0		804362	1					
ANR	804566	Identifier	start		804362	1					
ANR	804567	ExpressionStatement	rlp -> ranges [ 1 ] = end	273:12:7222:7242	804362	1	True				
ANR	804568	AssignmentExpression	rlp -> ranges [ 1 ] = end		804362	0		=			
ANR	804569	ArrayIndexing	rlp -> ranges [ 1 ]		804362	0					
ANR	804570	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804571	Identifier	rlp		804362	0					
ANR	804572	Identifier	ranges		804362	1					
ANR	804573	PrimaryExpression	1		804362	1					
ANR	804574	Identifier	end		804362	1					
ANR	804575	ExpressionStatement	rlp -> used += 2	274:12:7256:7270	804362	2	True				
ANR	804576	AssignmentExpression	rlp -> used += 2		804362	0		+=			
ANR	804577	PtrMemberAccess	rlp -> used		804362	0					
ANR	804578	Identifier	rlp		804362	0					
ANR	804579	Identifier	used		804362	1					
ANR	804580	PrimaryExpression	2		804362	1					
ANR	804581	ContinueStatement	continue ;	275:12:7284:7292	804362	3	True				
ANR	804582	ExpressionStatement	j = rlp -> used - 1	281:8:7397:7414	804362	6	True				
ANR	804583	AssignmentExpression	j = rlp -> used - 1		804362	0		=			
ANR	804584	Identifier	j		804362	0					
ANR	804585	AdditiveExpression	rlp -> used - 1		804362	1		-			
ANR	804586	PtrMemberAccess	rlp -> used		804362	0					
ANR	804587	Identifier	rlp		804362	0					
ANR	804588	Identifier	used		804362	1					
ANR	804589	PrimaryExpression	1		804362	1					
ANR	804590	IfStatement	if ( start > rlp -> ranges [ j ] )		804362	7					
ANR	804591	Condition	start > rlp -> ranges [ j ]	282:12:7428:7449	804362	0	True				
ANR	804592	RelationalExpression	start > rlp -> ranges [ j ]		804362	0		>			
ANR	804593	Identifier	start		804362	0					
ANR	804594	ArrayIndexing	rlp -> ranges [ j ]		804362	1					
ANR	804595	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804596	Identifier	rlp		804362	0					
ANR	804597	Identifier	ranges		804362	1					
ANR	804598	Identifier	j		804362	1					
ANR	804599	CompoundStatement		57:36:1367:1367	804362	1					
ANR	804600	ExpressionStatement	j = rlp -> used	283:12:7466:7479	804362	0	True				
ANR	804601	AssignmentExpression	j = rlp -> used		804362	0		=			
ANR	804602	Identifier	j		804362	0					
ANR	804603	PtrMemberAccess	rlp -> used		804362	1					
ANR	804604	Identifier	rlp		804362	0					
ANR	804605	Identifier	used		804362	1					
ANR	804606	ExpressionStatement	rlp -> ranges [ j ++ ] = start	284:12:7493:7517	804362	1	True				
ANR	804607	AssignmentExpression	rlp -> ranges [ j ++ ] = start		804362	0		=			
ANR	804608	ArrayIndexing	rlp -> ranges [ j ++ ]		804362	0					
ANR	804609	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804610	Identifier	rlp		804362	0					
ANR	804611	Identifier	ranges		804362	1					
ANR	804612	PostIncDecOperationExpression	j ++		804362	1					
ANR	804613	Identifier	j		804362	0					
ANR	804614	IncDec	++		804362	1					
ANR	804615	Identifier	start		804362	1					
ANR	804616	ExpressionStatement	rlp -> ranges [ j ++ ] = end	285:12:7531:7553	804362	2	True				
ANR	804617	AssignmentExpression	rlp -> ranges [ j ++ ] = end		804362	0		=			
ANR	804618	ArrayIndexing	rlp -> ranges [ j ++ ]		804362	0					
ANR	804619	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804620	Identifier	rlp		804362	0					
ANR	804621	Identifier	ranges		804362	1					
ANR	804622	PostIncDecOperationExpression	j ++		804362	1					
ANR	804623	Identifier	j		804362	0					
ANR	804624	IncDec	++		804362	1					
ANR	804625	Identifier	end		804362	1					
ANR	804626	ExpressionStatement	rlp -> used = j	286:12:7567:7580	804362	3	True				
ANR	804627	AssignmentExpression	rlp -> used = j		804362	0		=			
ANR	804628	PtrMemberAccess	rlp -> used		804362	0					
ANR	804629	Identifier	rlp		804362	0					
ANR	804630	Identifier	used		804362	1					
ANR	804631	Identifier	j		804362	1					
ANR	804632	ContinueStatement	continue ;	287:12:7594:7602	804362	4	True				
ANR	804633	ForStatement	for ( i = 0 ; i < rlp -> used && start > rlp -> ranges [ i + 1 ] + 1 ; i += 2 )		804362	8					
ANR	804634	ForInit	i = 0 ;	293:13:7698:7703	804362	0	True				
ANR	804635	AssignmentExpression	i = 0		804362	0		=			
ANR	804636	Identifier	i		804362	0					
ANR	804637	PrimaryExpression	0		804362	1					
ANR	804638	Condition	i < rlp -> used && start > rlp -> ranges [ i + 1 ] + 1	294:13:7718:7764	804362	1	True				
ANR	804639	AndExpression	i < rlp -> used && start > rlp -> ranges [ i + 1 ] + 1		804362	0		&&			
ANR	804640	RelationalExpression	i < rlp -> used		804362	0		<			
ANR	804641	Identifier	i		804362	0					
ANR	804642	PtrMemberAccess	rlp -> used		804362	1					
ANR	804643	Identifier	rlp		804362	0					
ANR	804644	Identifier	used		804362	1					
ANR	804645	RelationalExpression	start > rlp -> ranges [ i + 1 ] + 1		804362	1		>			
ANR	804646	Identifier	start		804362	0					
ANR	804647	AdditiveExpression	rlp -> ranges [ i + 1 ] + 1		804362	1		+			
ANR	804648	ArrayIndexing	rlp -> ranges [ i + 1 ]		804362	0					
ANR	804649	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804650	Identifier	rlp		804362	0					
ANR	804651	Identifier	ranges		804362	1					
ANR	804652	AdditiveExpression	i + 1		804362	1		+			
ANR	804653	Identifier	i		804362	0					
ANR	804654	PrimaryExpression	1		804362	1					
ANR	804655	PrimaryExpression	1		804362	1					
ANR	804656	AssignmentExpression	i += 2	294:62:7767:7772	804362	2	True	+=			
ANR	804657	Identifier	i		804362	0					
ANR	804658	PrimaryExpression	2		804362	1					
ANR	804659	ExpressionStatement		294:70:7775:7775	804362	3	True				
ANR	804660	IfStatement	if ( rlp -> ranges [ i ] <= start && start <= rlp -> ranges [ i + 1 ] + 1 )		804362	9					
ANR	804661	Condition	rlp -> ranges [ i ] <= start && start <= rlp -> ranges [ i + 1 ] + 1	300:12:7968:8025	804362	0	True				
ANR	804662	AndExpression	rlp -> ranges [ i ] <= start && start <= rlp -> ranges [ i + 1 ] + 1		804362	0		&&			
ANR	804663	RelationalExpression	rlp -> ranges [ i ] <= start		804362	0		<=			
ANR	804664	ArrayIndexing	rlp -> ranges [ i ]		804362	0					
ANR	804665	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804666	Identifier	rlp		804362	0					
ANR	804667	Identifier	ranges		804362	1					
ANR	804668	Identifier	i		804362	1					
ANR	804669	Identifier	start		804362	1					
ANR	804670	RelationalExpression	start <= rlp -> ranges [ i + 1 ] + 1		804362	1		<=			
ANR	804671	Identifier	start		804362	0					
ANR	804672	AdditiveExpression	rlp -> ranges [ i + 1 ] + 1		804362	1		+			
ANR	804673	ArrayIndexing	rlp -> ranges [ i + 1 ]		804362	0					
ANR	804674	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804675	Identifier	rlp		804362	0					
ANR	804676	Identifier	ranges		804362	1					
ANR	804677	AdditiveExpression	i + 1		804362	1		+			
ANR	804678	Identifier	i		804362	0					
ANR	804679	PrimaryExpression	1		804362	1					
ANR	804680	PrimaryExpression	1		804362	1					
ANR	804681	CompoundStatement		75:72:1943:1943	804362	1					
ANR	804682	ExpressionStatement	rlp -> ranges [ i + 1 ] = end	301:12:8042:8066	804362	0	True				
ANR	804683	AssignmentExpression	rlp -> ranges [ i + 1 ] = end		804362	0		=			
ANR	804684	ArrayIndexing	rlp -> ranges [ i + 1 ]		804362	0					
ANR	804685	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804686	Identifier	rlp		804362	0					
ANR	804687	Identifier	ranges		804362	1					
ANR	804688	AdditiveExpression	i + 1		804362	1		+			
ANR	804689	Identifier	i		804362	0					
ANR	804690	PrimaryExpression	1		804362	1					
ANR	804691	Identifier	end		804362	1					
ANR	804692	ReturnStatement	return ;	302:12:8080:8086	804362	1	True				
ANR	804693	ForStatement	for ( j = rlp -> used ; j > i ; j -= 2 )		804362	10					
ANR	804694	ForInit	j = rlp -> used ;	308:13:8180:8193	804362	0	True				
ANR	804695	AssignmentExpression	j = rlp -> used		804362	0		=			
ANR	804696	Identifier	j		804362	0					
ANR	804697	PtrMemberAccess	rlp -> used		804362	1					
ANR	804698	Identifier	rlp		804362	0					
ANR	804699	Identifier	used		804362	1					
ANR	804700	Condition	j > i	308:28:8195:8199	804362	1	True				
ANR	804701	RelationalExpression	j > i		804362	0		>			
ANR	804702	Identifier	j		804362	0					
ANR	804703	Identifier	i		804362	1					
ANR	804704	AssignmentExpression	j -= 2	308:35:8202:8207	804362	2	True	-=			
ANR	804705	Identifier	j		804362	0					
ANR	804706	PrimaryExpression	2		804362	1					
ANR	804707	CompoundStatement		83:43:2125:2125	804362	3					
ANR	804708	ExpressionStatement	rlp -> ranges [ j ] = rlp -> ranges [ j - 2 ]	309:12:8224:8259	804362	0	True				
ANR	804709	AssignmentExpression	rlp -> ranges [ j ] = rlp -> ranges [ j - 2 ]		804362	0		=			
ANR	804710	ArrayIndexing	rlp -> ranges [ j ]		804362	0					
ANR	804711	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804712	Identifier	rlp		804362	0					
ANR	804713	Identifier	ranges		804362	1					
ANR	804714	Identifier	j		804362	1					
ANR	804715	ArrayIndexing	rlp -> ranges [ j - 2 ]		804362	1					
ANR	804716	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804717	Identifier	rlp		804362	0					
ANR	804718	Identifier	ranges		804362	1					
ANR	804719	AdditiveExpression	j - 2		804362	1		-			
ANR	804720	Identifier	j		804362	0					
ANR	804721	PrimaryExpression	2		804362	1					
ANR	804722	ExpressionStatement	rlp -> ranges [ j + 1 ] = rlp -> ranges [ j - 1 ]	310:12:8273:8312	804362	1	True				
ANR	804723	AssignmentExpression	rlp -> ranges [ j + 1 ] = rlp -> ranges [ j - 1 ]		804362	0		=			
ANR	804724	ArrayIndexing	rlp -> ranges [ j + 1 ]		804362	0					
ANR	804725	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804726	Identifier	rlp		804362	0					
ANR	804727	Identifier	ranges		804362	1					
ANR	804728	AdditiveExpression	j + 1		804362	1		+			
ANR	804729	Identifier	j		804362	0					
ANR	804730	PrimaryExpression	1		804362	1					
ANR	804731	ArrayIndexing	rlp -> ranges [ j - 1 ]		804362	1					
ANR	804732	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804733	Identifier	rlp		804362	0					
ANR	804734	Identifier	ranges		804362	1					
ANR	804735	AdditiveExpression	j - 1		804362	1		-			
ANR	804736	Identifier	j		804362	0					
ANR	804737	PrimaryExpression	1		804362	1					
ANR	804738	ExpressionStatement	rlp -> ranges [ i ] = start	316:8:8409:8431	804362	11	True				
ANR	804739	AssignmentExpression	rlp -> ranges [ i ] = start		804362	0		=			
ANR	804740	ArrayIndexing	rlp -> ranges [ i ]		804362	0					
ANR	804741	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804742	Identifier	rlp		804362	0					
ANR	804743	Identifier	ranges		804362	1					
ANR	804744	Identifier	i		804362	1					
ANR	804745	Identifier	start		804362	1					
ANR	804746	ExpressionStatement	rlp -> ranges [ i + 1 ] = end	317:8:8441:8465	804362	12	True				
ANR	804747	AssignmentExpression	rlp -> ranges [ i + 1 ] = end		804362	0		=			
ANR	804748	ArrayIndexing	rlp -> ranges [ i + 1 ]		804362	0					
ANR	804749	PtrMemberAccess	rlp -> ranges		804362	0					
ANR	804750	Identifier	rlp		804362	0					
ANR	804751	Identifier	ranges		804362	1					
ANR	804752	AdditiveExpression	i + 1		804362	1		+			
ANR	804753	Identifier	i		804362	0					
ANR	804754	PrimaryExpression	1		804362	1					
ANR	804755	Identifier	end		804362	1					
ANR	804756	ExpressionStatement	rlp -> used += 2	318:8:8475:8489	804362	13	True				
ANR	804757	AssignmentExpression	rlp -> used += 2		804362	0		+=			
ANR	804758	PtrMemberAccess	rlp -> used		804362	0					
ANR	804759	Identifier	rlp		804362	0					
ANR	804760	Identifier	used		804362	1					
ANR	804761	PrimaryExpression	2		804362	1					
ANR	804762	ReturnType	static void		804362	1					
ANR	804763	Identifier	add_range		804362	2					
ANR	804764	ParameterList	"ac_uint4 start , ac_uint4 end , char * p1 , char * p2"		804362	3					
ANR	804765	Parameter	ac_uint4 start	225:10:6034:6047	804362	0	True				
ANR	804766	ParameterType	ac_uint4		804362	0					
ANR	804767	Identifier	start		804362	1					
ANR	804768	Parameter	ac_uint4 end	225:26:6050:6061	804362	1	True				
ANR	804769	ParameterType	ac_uint4		804362	0					
ANR	804770	Identifier	end		804362	1					
ANR	804771	Parameter	char * p1	225:40:6064:6071	804362	2	True				
ANR	804772	ParameterType	char *		804362	0					
ANR	804773	Identifier	p1		804362	1					
ANR	804774	Parameter	char * p2	225:50:6074:6081	804362	3	True				
ANR	804775	ParameterType	char *		804362	0					
ANR	804776	Identifier	p2		804362	1					
ANR	804777	CFGEntryNode	ENTRY		804362		True				
ANR	804778	CFGExitNode	EXIT		804362		True				
ANR	804779	Symbol	p1		804362						
ANR	804780	Symbol	rlp -> size		804362						
ANR	804781	Symbol	p2		804362						
ANR	804782	Symbol	rlp -> used		804362						
ANR	804783	Symbol	rlp -> ranges		804362						
ANR	804784	Symbol	* * rlp		804362						
ANR	804785	Symbol	realloc		804362						
ANR	804786	Symbol	memcmp		804362						
ANR	804787	Symbol	len		804362						
ANR	804788	Symbol	end		804362						
ANR	804789	Symbol	* rlp		804362						
ANR	804790	Symbol	malloc		804362						
ANR	804791	Symbol	props [ i ] . name		804362						
ANR	804792	Symbol	start		804362						
ANR	804793	Symbol	proptbl		804362						
ANR	804794	Symbol	i		804362						
ANR	804795	Symbol	j		804362						
ANR	804796	Symbol	NUMPROPS		804362						
ANR	804797	Symbol	k		804362						
ANR	804798	Symbol	props		804362						
ANR	804799	Symbol	* rlp -> ranges		804362						
ANR	804800	Symbol	* i		804362						
ANR	804801	Symbol	* j		804362						
ANR	804802	Symbol	rlp		804362						
ANR	804803	Symbol	name		804362						
ANR	804804	Symbol	* props		804362						
ANR	804805	Symbol	props [ i ] . len		804362						
ANR	804806	Function	ordered_range_insert	322:0:8500:11508							
ANR	804807	FunctionDef	"ordered_range_insert (ac_uint4 c , char * name , int len)"		804806	0					
ANR	804808	CompoundStatement		324:0:8566:11508	804806	0					
ANR	804809	IdentifierDeclStatement	"int i , j ;"	325:4:8572:8580	804806	0	True				
ANR	804810	IdentifierDecl	i		804806	0					
ANR	804811	IdentifierDeclType	int		804806	0					
ANR	804812	Identifier	i		804806	1					
ANR	804813	IdentifierDecl	j		804806	1					
ANR	804814	IdentifierDeclType	int		804806	0					
ANR	804815	Identifier	j		804806	1					
ANR	804816	IdentifierDeclStatement	"ac_uint4 s , e ;"	326:4:8586:8599	804806	1	True				
ANR	804817	IdentifierDecl	s		804806	0					
ANR	804818	IdentifierDeclType	ac_uint4		804806	0					
ANR	804819	Identifier	s		804806	1					
ANR	804820	IdentifierDecl	e		804806	1					
ANR	804821	IdentifierDeclType	ac_uint4		804806	0					
ANR	804822	Identifier	e		804806	1					
ANR	804823	IdentifierDeclStatement	_ranges_t * rlp ;	327:4:8605:8619	804806	2	True				
ANR	804824	IdentifierDecl	* rlp		804806	0					
ANR	804825	IdentifierDeclType	_ranges_t *		804806	0					
ANR	804826	Identifier	rlp		804806	1					
ANR	804827	IfStatement	if ( len == 0 )		804806	3					
ANR	804828	Condition	len == 0	329:8:8630:8637	804806	0	True				
ANR	804829	EqualityExpression	len == 0		804806	0		==			
ANR	804830	Identifier	len		804806	0					
ANR	804831	PrimaryExpression	0		804806	1					
ANR	804832	ReturnStatement	return ;	330:6:8646:8652	804806	1	True				
ANR	804833	IfStatement	"if ( ( len == 2 && memcmp ( name , ""BN"" , 2 ) == 0 ) || ( len == 3 && ( memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0 ) ) )"		804806	4					
ANR	804834	Condition	"( len == 2 && memcmp ( name , ""BN"" , 2 ) == 0 ) || ( len == 3 && ( memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0 ) )"	335:8:8743:9021	804806	0	True				
ANR	804835	OrExpression	"( len == 2 && memcmp ( name , ""BN"" , 2 ) == 0 ) || ( len == 3 && ( memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0 ) )"		804806	0		||			
ANR	804836	AndExpression	"len == 2 && memcmp ( name , ""BN"" , 2 ) == 0"		804806	0		&&			
ANR	804837	EqualityExpression	len == 2		804806	0		==			
ANR	804838	Identifier	len		804806	0					
ANR	804839	PrimaryExpression	2		804806	1					
ANR	804840	EqualityExpression	"memcmp ( name , ""BN"" , 2 ) == 0"		804806	1		==			
ANR	804841	CallExpression	"memcmp ( name , ""BN"" , 2 )"		804806	0					
ANR	804842	Callee	memcmp		804806	0					
ANR	804843	Identifier	memcmp		804806	0					
ANR	804844	ArgumentList	name		804806	1					
ANR	804845	Argument	name		804806	0					
ANR	804846	Identifier	name		804806	0					
ANR	804847	Argument	"""BN"""		804806	1					
ANR	804848	PrimaryExpression	"""BN"""		804806	0					
ANR	804849	Argument	2		804806	2					
ANR	804850	PrimaryExpression	2		804806	0					
ANR	804851	PrimaryExpression	0		804806	1					
ANR	804852	AndExpression	"len == 3 && ( memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0 )"		804806	1		&&			
ANR	804853	EqualityExpression	len == 3		804806	0		==			
ANR	804854	Identifier	len		804806	0					
ANR	804855	PrimaryExpression	3		804806	1					
ANR	804856	OrExpression	"memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		804806	1		||			
ANR	804857	EqualityExpression	"memcmp ( name , ""NSM"" , 3 ) == 0"		804806	0		==			
ANR	804858	CallExpression	"memcmp ( name , ""NSM"" , 3 )"		804806	0					
ANR	804859	Callee	memcmp		804806	0					
ANR	804860	Identifier	memcmp		804806	0					
ANR	804861	ArgumentList	name		804806	1					
ANR	804862	Argument	name		804806	0					
ANR	804863	Identifier	name		804806	0					
ANR	804864	Argument	"""NSM"""		804806	1					
ANR	804865	PrimaryExpression	"""NSM"""		804806	0					
ANR	804866	Argument	3		804806	2					
ANR	804867	PrimaryExpression	3		804806	0					
ANR	804868	PrimaryExpression	0		804806	1					
ANR	804869	OrExpression	"memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		804806	1		||			
ANR	804870	EqualityExpression	"memcmp ( name , ""PDF"" , 3 ) == 0"		804806	0		==			
ANR	804871	CallExpression	"memcmp ( name , ""PDF"" , 3 )"		804806	0					
ANR	804872	Callee	memcmp		804806	0					
ANR	804873	Identifier	memcmp		804806	0					
ANR	804874	ArgumentList	name		804806	1					
ANR	804875	Argument	name		804806	0					
ANR	804876	Identifier	name		804806	0					
ANR	804877	Argument	"""PDF"""		804806	1					
ANR	804878	PrimaryExpression	"""PDF"""		804806	0					
ANR	804879	Argument	3		804806	2					
ANR	804880	PrimaryExpression	3		804806	0					
ANR	804881	PrimaryExpression	0		804806	1					
ANR	804882	OrExpression	"memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		804806	1		||			
ANR	804883	EqualityExpression	"memcmp ( name , ""LRE"" , 3 ) == 0"		804806	0		==			
ANR	804884	CallExpression	"memcmp ( name , ""LRE"" , 3 )"		804806	0					
ANR	804885	Callee	memcmp		804806	0					
ANR	804886	Identifier	memcmp		804806	0					
ANR	804887	ArgumentList	name		804806	1					
ANR	804888	Argument	name		804806	0					
ANR	804889	Identifier	name		804806	0					
ANR	804890	Argument	"""LRE"""		804806	1					
ANR	804891	PrimaryExpression	"""LRE"""		804806	0					
ANR	804892	Argument	3		804806	2					
ANR	804893	PrimaryExpression	3		804806	0					
ANR	804894	PrimaryExpression	0		804806	1					
ANR	804895	OrExpression	"memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		804806	1		||			
ANR	804896	EqualityExpression	"memcmp ( name , ""LRO"" , 3 ) == 0"		804806	0		==			
ANR	804897	CallExpression	"memcmp ( name , ""LRO"" , 3 )"		804806	0					
ANR	804898	Callee	memcmp		804806	0					
ANR	804899	Identifier	memcmp		804806	0					
ANR	804900	ArgumentList	name		804806	1					
ANR	804901	Argument	name		804806	0					
ANR	804902	Identifier	name		804806	0					
ANR	804903	Argument	"""LRO"""		804806	1					
ANR	804904	PrimaryExpression	"""LRO"""		804806	0					
ANR	804905	Argument	3		804806	2					
ANR	804906	PrimaryExpression	3		804806	0					
ANR	804907	PrimaryExpression	0		804806	1					
ANR	804908	OrExpression	"memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		804806	1		||			
ANR	804909	EqualityExpression	"memcmp ( name , ""RLE"" , 3 ) == 0"		804806	0		==			
ANR	804910	CallExpression	"memcmp ( name , ""RLE"" , 3 )"		804806	0					
ANR	804911	Callee	memcmp		804806	0					
ANR	804912	Identifier	memcmp		804806	0					
ANR	804913	ArgumentList	name		804806	1					
ANR	804914	Argument	name		804806	0					
ANR	804915	Identifier	name		804806	0					
ANR	804916	Argument	"""RLE"""		804806	1					
ANR	804917	PrimaryExpression	"""RLE"""		804806	0					
ANR	804918	Argument	3		804806	2					
ANR	804919	PrimaryExpression	3		804806	0					
ANR	804920	PrimaryExpression	0		804806	1					
ANR	804921	EqualityExpression	"memcmp ( name , ""RLO"" , 3 ) == 0"		804806	1		==			
ANR	804922	CallExpression	"memcmp ( name , ""RLO"" , 3 )"		804806	0					
ANR	804923	Callee	memcmp		804806	0					
ANR	804924	Identifier	memcmp		804806	0					
ANR	804925	ArgumentList	name		804806	1					
ANR	804926	Argument	name		804806	0					
ANR	804927	Identifier	name		804806	0					
ANR	804928	Argument	"""RLO"""		804806	1					
ANR	804929	PrimaryExpression	"""RLO"""		804806	0					
ANR	804930	Argument	3		804806	2					
ANR	804931	PrimaryExpression	3		804806	0					
ANR	804932	PrimaryExpression	0		804806	1					
ANR	804933	CompoundStatement		16:72:457:457	804806	1					
ANR	804934	ExpressionStatement	len = 2	344:8:9161:9168	804806	0	True				
ANR	804935	AssignmentExpression	len = 2		804806	0		=			
ANR	804936	Identifier	len		804806	0					
ANR	804937	PrimaryExpression	2		804806	1					
ANR	804938	ExpressionStatement	"name = ""ON"""	345:8:9178:9189	804806	1	True				
ANR	804939	AssignmentExpression	"name = ""ON"""		804806	0		=			
ANR	804940	Identifier	name		804806	0					
ANR	804941	PrimaryExpression	"""ON"""		804806	1					
ANR	804942	ForStatement	for ( i = 0 ; i < NUMPROPS ; i ++ )		804806	5					
ANR	804943	ForInit	i = 0 ;	348:9:9207:9212	804806	0	True				
ANR	804944	AssignmentExpression	i = 0		804806	0		=			
ANR	804945	Identifier	i		804806	0					
ANR	804946	PrimaryExpression	0		804806	1					
ANR	804947	Condition	i < NUMPROPS	348:16:9214:9225	804806	1	True				
ANR	804948	RelationalExpression	i < NUMPROPS		804806	0		<			
ANR	804949	Identifier	i		804806	0					
ANR	804950	Identifier	NUMPROPS		804806	1					
ANR	804951	PostIncDecOperationExpression	i ++	348:30:9228:9230	804806	2	True				
ANR	804952	Identifier	i		804806	0					
ANR	804953	IncDec	++		804806	1					
ANR	804954	CompoundStatement		25:35:666:666	804806	3					
ANR	804955	IfStatement	"if ( props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0 )"		804806	0					
ANR	804956	Condition	"props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0"	349:12:9247:9306	804806	0	True				
ANR	804957	AndExpression	"props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0"		804806	0		&&			
ANR	804958	EqualityExpression	props [ i ] . len == len		804806	0		==			
ANR	804959	MemberAccess	props [ i ] . len		804806	0					
ANR	804960	ArrayIndexing	props [ i ]		804806	0					
ANR	804961	Identifier	props		804806	0					
ANR	804962	Identifier	i		804806	1					
ANR	804963	Identifier	len		804806	1					
ANR	804964	Identifier	len		804806	1					
ANR	804965	EqualityExpression	"memcmp ( props [ i ] . name , name , len ) == 0"		804806	1		==			
ANR	804966	CallExpression	"memcmp ( props [ i ] . name , name , len )"		804806	0					
ANR	804967	Callee	memcmp		804806	0					
ANR	804968	Identifier	memcmp		804806	0					
ANR	804969	ArgumentList	props [ i ] . name		804806	1					
ANR	804970	Argument	props [ i ] . name		804806	0					
ANR	804971	MemberAccess	props [ i ] . name		804806	0					
ANR	804972	ArrayIndexing	props [ i ]		804806	0					
ANR	804973	Identifier	props		804806	0					
ANR	804974	Identifier	i		804806	1					
ANR	804975	Identifier	name		804806	1					
ANR	804976	Argument	name		804806	1					
ANR	804977	Identifier	name		804806	0					
ANR	804978	Argument	len		804806	2					
ANR	804979	Identifier	len		804806	0					
ANR	804980	PrimaryExpression	0		804806	1					
ANR	804981	BreakStatement	break ;	350:10:9319:9324	804806	1	True				
ANR	804982	IfStatement	if ( i == NUMPROPS )		804806	6					
ANR	804983	Condition	i == NUMPROPS	353:8:9341:9353	804806	0	True				
ANR	804984	EqualityExpression	i == NUMPROPS		804806	0		==			
ANR	804985	Identifier	i		804806	0					
ANR	804986	Identifier	NUMPROPS		804806	1					
ANR	804987	ReturnStatement	return ;	354:6:9362:9368	804806	1	True				
ANR	804988	ExpressionStatement	rlp = & proptbl [ i ]	359:4:9440:9457	804806	7	True				
ANR	804989	AssignmentExpression	rlp = & proptbl [ i ]		804806	0		=			
ANR	804990	Identifier	rlp		804806	0					
ANR	804991	UnaryOperationExpression	& proptbl [ i ]		804806	1					
ANR	804992	UnaryOperator	&		804806	0					
ANR	804993	ArrayIndexing	proptbl [ i ]		804806	1					
ANR	804994	Identifier	proptbl		804806	0					
ANR	804995	Identifier	i		804806	1					
ANR	804996	IfStatement	if ( rlp -> used == rlp -> size )		804806	8					
ANR	804997	Condition	rlp -> used == rlp -> size	364:8:9526:9547	804806	0	True				
ANR	804998	EqualityExpression	rlp -> used == rlp -> size		804806	0		==			
ANR	804999	PtrMemberAccess	rlp -> used		804806	0					
ANR	805000	Identifier	rlp		804806	0					
ANR	805001	Identifier	used		804806	1					
ANR	805002	PtrMemberAccess	rlp -> size		804806	1					
ANR	805003	Identifier	rlp		804806	0					
ANR	805004	Identifier	size		804806	1					
ANR	805005	CompoundStatement		41:32:983:983	804806	1					
ANR	805006	IfStatement	if ( rlp -> size == 0 )		804806	0					
ANR	805007	Condition	rlp -> size == 0	365:12:9564:9577	804806	0	True				
ANR	805008	EqualityExpression	rlp -> size == 0		804806	0		==			
ANR	805009	PtrMemberAccess	rlp -> size		804806	0					
ANR	805010	Identifier	rlp		804806	0					
ANR	805011	Identifier	size		804806	1					
ANR	805012	PrimaryExpression	0		804806	1					
ANR	805013	ExpressionStatement	rlp -> ranges = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )	366:10:9590:9660	804806	1	True				
ANR	805014	AssignmentExpression	rlp -> ranges = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )		804806	0		=			
ANR	805015	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805016	Identifier	rlp		804806	0					
ANR	805017	Identifier	ranges		804806	1					
ANR	805018	CastExpression	( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )		804806	1					
ANR	805019	CastTarget	ac_uint4 *		804806	0					
ANR	805020	CallExpression	malloc ( sizeof ( ac_uint4 ) << 3 )		804806	1					
ANR	805021	Callee	malloc		804806	0					
ANR	805022	Identifier	malloc		804806	0					
ANR	805023	ArgumentList	sizeof ( ac_uint4 ) << 3		804806	1					
ANR	805024	Argument	sizeof ( ac_uint4 ) << 3		804806	0					
ANR	805025	ShiftExpression	sizeof ( ac_uint4 ) << 3		804806	0		<<			
ANR	805026	SizeofExpression	sizeof ( ac_uint4 )		804806	0					
ANR	805027	Sizeof	sizeof		804806	0					
ANR	805028	SizeofOperand	ac_uint4		804806	1					
ANR	805029	PrimaryExpression	3		804806	1					
ANR	805030	ElseStatement	else		804806	0					
ANR	805031	ExpressionStatement	"rlp -> ranges = ( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"	369:10:9685:9813	804806	0	True				
ANR	805032	AssignmentExpression	"rlp -> ranges = ( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		804806	0		=			
ANR	805033	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805034	Identifier	rlp		804806	0					
ANR	805035	Identifier	ranges		804806	1					
ANR	805036	CastExpression	"( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		804806	1					
ANR	805037	CastTarget	ac_uint4 *		804806	0					
ANR	805038	CallExpression	"realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		804806	1					
ANR	805039	Callee	realloc		804806	0					
ANR	805040	Identifier	realloc		804806	0					
ANR	805041	ArgumentList	( char * ) rlp -> ranges		804806	1					
ANR	805042	Argument	( char * ) rlp -> ranges		804806	0					
ANR	805043	CastExpression	( char * ) rlp -> ranges		804806	0					
ANR	805044	CastTarget	char *		804806	0					
ANR	805045	PtrMemberAccess	rlp -> ranges		804806	1					
ANR	805046	Identifier	rlp		804806	0					
ANR	805047	Identifier	ranges		804806	1					
ANR	805048	Argument	sizeof ( ac_uint4 ) * ( rlp -> size + 8 )		804806	1					
ANR	805049	MultiplicativeExpression	sizeof ( ac_uint4 ) * ( rlp -> size + 8 )		804806	0		*			
ANR	805050	SizeofExpression	sizeof ( ac_uint4 )		804806	0					
ANR	805051	Sizeof	sizeof		804806	0					
ANR	805052	SizeofOperand	ac_uint4		804806	1					
ANR	805053	AdditiveExpression	rlp -> size + 8		804806	1		+			
ANR	805054	PtrMemberAccess	rlp -> size		804806	0					
ANR	805055	Identifier	rlp		804806	0					
ANR	805056	Identifier	size		804806	1					
ANR	805057	PrimaryExpression	8		804806	1					
ANR	805058	ExpressionStatement	rlp -> size += 8	372:8:9823:9837	804806	1	True				
ANR	805059	AssignmentExpression	rlp -> size += 8		804806	0		+=			
ANR	805060	PtrMemberAccess	rlp -> size		804806	0					
ANR	805061	Identifier	rlp		804806	0					
ANR	805062	Identifier	size		804806	1					
ANR	805063	PrimaryExpression	8		804806	1					
ANR	805064	IfStatement	if ( rlp -> used == 0 )		804806	9					
ANR	805065	Condition	rlp -> used == 0	379:8:9957:9970	804806	0	True				
ANR	805066	EqualityExpression	rlp -> used == 0		804806	0		==			
ANR	805067	PtrMemberAccess	rlp -> used		804806	0					
ANR	805068	Identifier	rlp		804806	0					
ANR	805069	Identifier	used		804806	1					
ANR	805070	PrimaryExpression	0		804806	1					
ANR	805071	CompoundStatement		56:24:1406:1406	804806	1					
ANR	805072	ExpressionStatement	rlp -> ranges [ 0 ] = rlp -> ranges [ 1 ] = c	380:8:9983:10018	804806	0	True				
ANR	805073	AssignmentExpression	rlp -> ranges [ 0 ] = rlp -> ranges [ 1 ] = c		804806	0		=			
ANR	805074	ArrayIndexing	rlp -> ranges [ 0 ]		804806	0					
ANR	805075	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805076	Identifier	rlp		804806	0					
ANR	805077	Identifier	ranges		804806	1					
ANR	805078	PrimaryExpression	0		804806	1					
ANR	805079	AssignmentExpression	rlp -> ranges [ 1 ] = c		804806	1		=			
ANR	805080	ArrayIndexing	rlp -> ranges [ 1 ]		804806	0					
ANR	805081	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805082	Identifier	rlp		804806	0					
ANR	805083	Identifier	ranges		804806	1					
ANR	805084	PrimaryExpression	1		804806	1					
ANR	805085	Identifier	c		804806	1					
ANR	805086	ExpressionStatement	rlp -> used += 2	381:8:10028:10042	804806	1	True				
ANR	805087	AssignmentExpression	rlp -> used += 2		804806	0		+=			
ANR	805088	PtrMemberAccess	rlp -> used		804806	0					
ANR	805089	Identifier	rlp		804806	0					
ANR	805090	Identifier	used		804806	1					
ANR	805091	PrimaryExpression	2		804806	1					
ANR	805092	ReturnStatement	return ;	382:8:10052:10058	804806	2	True				
ANR	805093	ExpressionStatement	j = rlp -> used - 1	389:4:10181:10198	804806	10	True				
ANR	805094	AssignmentExpression	j = rlp -> used - 1		804806	0		=			
ANR	805095	Identifier	j		804806	0					
ANR	805096	AdditiveExpression	rlp -> used - 1		804806	1		-			
ANR	805097	PtrMemberAccess	rlp -> used		804806	0					
ANR	805098	Identifier	rlp		804806	0					
ANR	805099	Identifier	used		804806	1					
ANR	805100	PrimaryExpression	1		804806	1					
ANR	805101	ExpressionStatement	e = rlp -> ranges [ j ]	390:4:10204:10222	804806	11	True				
ANR	805102	AssignmentExpression	e = rlp -> ranges [ j ]		804806	0		=			
ANR	805103	Identifier	e		804806	0					
ANR	805104	ArrayIndexing	rlp -> ranges [ j ]		804806	1					
ANR	805105	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805106	Identifier	rlp		804806	0					
ANR	805107	Identifier	ranges		804806	1					
ANR	805108	Identifier	j		804806	1					
ANR	805109	ExpressionStatement	s = rlp -> ranges [ j - 1 ]	391:4:10228:10250	804806	12	True				
ANR	805110	AssignmentExpression	s = rlp -> ranges [ j - 1 ]		804806	0		=			
ANR	805111	Identifier	s		804806	0					
ANR	805112	ArrayIndexing	rlp -> ranges [ j - 1 ]		804806	1					
ANR	805113	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805114	Identifier	rlp		804806	0					
ANR	805115	Identifier	ranges		804806	1					
ANR	805116	AdditiveExpression	j - 1		804806	1		-			
ANR	805117	Identifier	j		804806	0					
ANR	805118	PrimaryExpression	1		804806	1					
ANR	805119	IfStatement	if ( c == e + 1 )		804806	13					
ANR	805120	Condition	c == e + 1	393:8:10261:10270	804806	0	True				
ANR	805121	EqualityExpression	c == e + 1		804806	0		==			
ANR	805122	Identifier	c		804806	0					
ANR	805123	AdditiveExpression	e + 1		804806	1		+			
ANR	805124	Identifier	e		804806	0					
ANR	805125	PrimaryExpression	1		804806	1					
ANR	805126	CompoundStatement		70:20:1706:1706	804806	1					
ANR	805127	ExpressionStatement	rlp -> ranges [ j ] = c	397:8:10340:10358	804806	0	True				
ANR	805128	AssignmentExpression	rlp -> ranges [ j ] = c		804806	0		=			
ANR	805129	ArrayIndexing	rlp -> ranges [ j ]		804806	0					
ANR	805130	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805131	Identifier	rlp		804806	0					
ANR	805132	Identifier	ranges		804806	1					
ANR	805133	Identifier	j		804806	1					
ANR	805134	Identifier	c		804806	1					
ANR	805135	ReturnStatement	return ;	398:8:10368:10374	804806	1	True				
ANR	805136	IfStatement	if ( c > e + 1 )		804806	14					
ANR	805137	Condition	c > e + 1	401:8:10391:10399	804806	0	True				
ANR	805138	RelationalExpression	c > e + 1		804806	0		>			
ANR	805139	Identifier	c		804806	0					
ANR	805140	AdditiveExpression	e + 1		804806	1		+			
ANR	805141	Identifier	e		804806	0					
ANR	805142	PrimaryExpression	1		804806	1					
ANR	805143	CompoundStatement		78:19:1835:1835	804806	1					
ANR	805144	ExpressionStatement	j = rlp -> used	405:8:10478:10491	804806	0	True				
ANR	805145	AssignmentExpression	j = rlp -> used		804806	0		=			
ANR	805146	Identifier	j		804806	0					
ANR	805147	PtrMemberAccess	rlp -> used		804806	1					
ANR	805148	Identifier	rlp		804806	0					
ANR	805149	Identifier	used		804806	1					
ANR	805150	ExpressionStatement	rlp -> ranges [ j ] = rlp -> ranges [ j + 1 ] = c	406:8:10501:10540	804806	1	True				
ANR	805151	AssignmentExpression	rlp -> ranges [ j ] = rlp -> ranges [ j + 1 ] = c		804806	0		=			
ANR	805152	ArrayIndexing	rlp -> ranges [ j ]		804806	0					
ANR	805153	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805154	Identifier	rlp		804806	0					
ANR	805155	Identifier	ranges		804806	1					
ANR	805156	Identifier	j		804806	1					
ANR	805157	AssignmentExpression	rlp -> ranges [ j + 1 ] = c		804806	1		=			
ANR	805158	ArrayIndexing	rlp -> ranges [ j + 1 ]		804806	0					
ANR	805159	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805160	Identifier	rlp		804806	0					
ANR	805161	Identifier	ranges		804806	1					
ANR	805162	AdditiveExpression	j + 1		804806	1		+			
ANR	805163	Identifier	j		804806	0					
ANR	805164	PrimaryExpression	1		804806	1					
ANR	805165	Identifier	c		804806	1					
ANR	805166	ExpressionStatement	rlp -> used += 2	407:8:10550:10564	804806	2	True				
ANR	805167	AssignmentExpression	rlp -> used += 2		804806	0		+=			
ANR	805168	PtrMemberAccess	rlp -> used		804806	0					
ANR	805169	Identifier	rlp		804806	0					
ANR	805170	Identifier	used		804806	1					
ANR	805171	PrimaryExpression	2		804806	1					
ANR	805172	ReturnStatement	return ;	408:8:10574:10580	804806	3	True				
ANR	805173	IfStatement	if ( c >= s )		804806	15					
ANR	805174	Condition	c >= s	411:8:10597:10602	804806	0	True				
ANR	805175	RelationalExpression	c >= s		804806	0		>=			
ANR	805176	Identifier	c		804806	0					
ANR	805177	Identifier	s		804806	1					
ANR	805178	ReturnStatement	return ;	415:6:10708:10714	804806	1	True				
ANR	805179	ForStatement	for ( i = 0 ; i < rlp -> used && c > rlp -> ranges [ i + 1 ] + 1 ; i += 2 )		804806	16					
ANR	805180	ForInit	i = 0 ;	421:9:10857:10862	804806	0	True				
ANR	805181	AssignmentExpression	i = 0		804806	0		=			
ANR	805182	Identifier	i		804806	0					
ANR	805183	PrimaryExpression	0		804806	1					
ANR	805184	Condition	i < rlp -> used && c > rlp -> ranges [ i + 1 ] + 1	422:9:10873:10915	804806	1	True				
ANR	805185	AndExpression	i < rlp -> used && c > rlp -> ranges [ i + 1 ] + 1		804806	0		&&			
ANR	805186	RelationalExpression	i < rlp -> used		804806	0		<			
ANR	805187	Identifier	i		804806	0					
ANR	805188	PtrMemberAccess	rlp -> used		804806	1					
ANR	805189	Identifier	rlp		804806	0					
ANR	805190	Identifier	used		804806	1					
ANR	805191	RelationalExpression	c > rlp -> ranges [ i + 1 ] + 1		804806	1		>			
ANR	805192	Identifier	c		804806	0					
ANR	805193	AdditiveExpression	rlp -> ranges [ i + 1 ] + 1		804806	1		+			
ANR	805194	ArrayIndexing	rlp -> ranges [ i + 1 ]		804806	0					
ANR	805195	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805196	Identifier	rlp		804806	0					
ANR	805197	Identifier	ranges		804806	1					
ANR	805198	AdditiveExpression	i + 1		804806	1		+			
ANR	805199	Identifier	i		804806	0					
ANR	805200	PrimaryExpression	1		804806	1					
ANR	805201	PrimaryExpression	1		804806	1					
ANR	805202	AssignmentExpression	i += 2	422:54:10918:10923	804806	2	True	+=			
ANR	805203	Identifier	i		804806	0					
ANR	805204	PrimaryExpression	2		804806	1					
ANR	805205	ExpressionStatement		422:62:10926:10926	804806	3	True				
ANR	805206	ExpressionStatement	s = rlp -> ranges [ i ]	424:4:10933:10951	804806	17	True				
ANR	805207	AssignmentExpression	s = rlp -> ranges [ i ]		804806	0		=			
ANR	805208	Identifier	s		804806	0					
ANR	805209	ArrayIndexing	rlp -> ranges [ i ]		804806	1					
ANR	805210	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805211	Identifier	rlp		804806	0					
ANR	805212	Identifier	ranges		804806	1					
ANR	805213	Identifier	i		804806	1					
ANR	805214	ExpressionStatement	e = rlp -> ranges [ i + 1 ]	425:4:10957:10979	804806	18	True				
ANR	805215	AssignmentExpression	e = rlp -> ranges [ i + 1 ]		804806	0		=			
ANR	805216	Identifier	e		804806	0					
ANR	805217	ArrayIndexing	rlp -> ranges [ i + 1 ]		804806	1					
ANR	805218	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805219	Identifier	rlp		804806	0					
ANR	805220	Identifier	ranges		804806	1					
ANR	805221	AdditiveExpression	i + 1		804806	1		+			
ANR	805222	Identifier	i		804806	0					
ANR	805223	PrimaryExpression	1		804806	1					
ANR	805224	IfStatement	if ( c == e + 1 )		804806	19					
ANR	805225	Condition	c == e + 1	427:8:10990:10999	804806	0	True				
ANR	805226	EqualityExpression	c == e + 1		804806	0		==			
ANR	805227	Identifier	c		804806	0					
ANR	805228	AdditiveExpression	e + 1		804806	1		+			
ANR	805229	Identifier	e		804806	0					
ANR	805230	PrimaryExpression	1		804806	1					
ANR	805231	ExpressionStatement	rlp -> ranges [ i + 1 ] = c	431:6:11069:11091	804806	1	True				
ANR	805232	AssignmentExpression	rlp -> ranges [ i + 1 ] = c		804806	0		=			
ANR	805233	ArrayIndexing	rlp -> ranges [ i + 1 ]		804806	0					
ANR	805234	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805235	Identifier	rlp		804806	0					
ANR	805236	Identifier	ranges		804806	1					
ANR	805237	AdditiveExpression	i + 1		804806	1		+			
ANR	805238	Identifier	i		804806	0					
ANR	805239	PrimaryExpression	1		804806	1					
ANR	805240	Identifier	c		804806	1					
ANR	805241	ElseStatement	else		804806	0					
ANR	805242	IfStatement	if ( c < s )		804806	0					
ANR	805243	Condition	c < s	432:13:11106:11110	804806	0	True				
ANR	805244	RelationalExpression	c < s		804806	0		<			
ANR	805245	Identifier	c		804806	0					
ANR	805246	Identifier	s		804806	1					
ANR	805247	CompoundStatement		109:20:2546:2546	804806	1					
ANR	805248	ForStatement	for ( j = rlp -> used ; j > i ; j -= 2 )		804806	0					
ANR	805249	ForInit	j = rlp -> used ;	437:13:11284:11297	804806	0	True				
ANR	805250	AssignmentExpression	j = rlp -> used		804806	0		=			
ANR	805251	Identifier	j		804806	0					
ANR	805252	PtrMemberAccess	rlp -> used		804806	1					
ANR	805253	Identifier	rlp		804806	0					
ANR	805254	Identifier	used		804806	1					
ANR	805255	Condition	j > i	437:28:11299:11303	804806	1	True				
ANR	805256	RelationalExpression	j > i		804806	0		>			
ANR	805257	Identifier	j		804806	0					
ANR	805258	Identifier	i		804806	1					
ANR	805259	AssignmentExpression	j -= 2	437:35:11306:11311	804806	2	True	-=			
ANR	805260	Identifier	j		804806	0					
ANR	805261	PrimaryExpression	2		804806	1					
ANR	805262	CompoundStatement		114:43:2747:2747	804806	3					
ANR	805263	ExpressionStatement	rlp -> ranges [ j ] = rlp -> ranges [ j - 2 ]	438:12:11328:11363	804806	0	True				
ANR	805264	AssignmentExpression	rlp -> ranges [ j ] = rlp -> ranges [ j - 2 ]		804806	0		=			
ANR	805265	ArrayIndexing	rlp -> ranges [ j ]		804806	0					
ANR	805266	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805267	Identifier	rlp		804806	0					
ANR	805268	Identifier	ranges		804806	1					
ANR	805269	Identifier	j		804806	1					
ANR	805270	ArrayIndexing	rlp -> ranges [ j - 2 ]		804806	1					
ANR	805271	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805272	Identifier	rlp		804806	0					
ANR	805273	Identifier	ranges		804806	1					
ANR	805274	AdditiveExpression	j - 2		804806	1		-			
ANR	805275	Identifier	j		804806	0					
ANR	805276	PrimaryExpression	2		804806	1					
ANR	805277	ExpressionStatement	rlp -> ranges [ j + 1 ] = rlp -> ranges [ j - 1 ]	439:12:11377:11416	804806	1	True				
ANR	805278	AssignmentExpression	rlp -> ranges [ j + 1 ] = rlp -> ranges [ j - 1 ]		804806	0		=			
ANR	805279	ArrayIndexing	rlp -> ranges [ j + 1 ]		804806	0					
ANR	805280	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805281	Identifier	rlp		804806	0					
ANR	805282	Identifier	ranges		804806	1					
ANR	805283	AdditiveExpression	j + 1		804806	1		+			
ANR	805284	Identifier	j		804806	0					
ANR	805285	PrimaryExpression	1		804806	1					
ANR	805286	ArrayIndexing	rlp -> ranges [ j - 1 ]		804806	1					
ANR	805287	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805288	Identifier	rlp		804806	0					
ANR	805289	Identifier	ranges		804806	1					
ANR	805290	AdditiveExpression	j - 1		804806	1		-			
ANR	805291	Identifier	j		804806	0					
ANR	805292	PrimaryExpression	1		804806	1					
ANR	805293	ExpressionStatement	rlp -> ranges [ i ] = rlp -> ranges [ i + 1 ] = c	441:8:11436:11475	804806	1	True				
ANR	805294	AssignmentExpression	rlp -> ranges [ i ] = rlp -> ranges [ i + 1 ] = c		804806	0		=			
ANR	805295	ArrayIndexing	rlp -> ranges [ i ]		804806	0					
ANR	805296	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805297	Identifier	rlp		804806	0					
ANR	805298	Identifier	ranges		804806	1					
ANR	805299	Identifier	i		804806	1					
ANR	805300	AssignmentExpression	rlp -> ranges [ i + 1 ] = c		804806	1		=			
ANR	805301	ArrayIndexing	rlp -> ranges [ i + 1 ]		804806	0					
ANR	805302	PtrMemberAccess	rlp -> ranges		804806	0					
ANR	805303	Identifier	rlp		804806	0					
ANR	805304	Identifier	ranges		804806	1					
ANR	805305	AdditiveExpression	i + 1		804806	1		+			
ANR	805306	Identifier	i		804806	0					
ANR	805307	PrimaryExpression	1		804806	1					
ANR	805308	Identifier	c		804806	1					
ANR	805309	ExpressionStatement	rlp -> used += 2	443:8:11486:11500	804806	2	True				
ANR	805310	AssignmentExpression	rlp -> used += 2		804806	0		+=			
ANR	805311	PtrMemberAccess	rlp -> used		804806	0					
ANR	805312	Identifier	rlp		804806	0					
ANR	805313	Identifier	used		804806	1					
ANR	805314	PrimaryExpression	2		804806	1					
ANR	805315	ReturnType	static void		804806	1					
ANR	805316	Identifier	ordered_range_insert		804806	2					
ANR	805317	ParameterList	"ac_uint4 c , char * name , int len"		804806	3					
ANR	805318	Parameter	ac_uint4 c	323:21:8533:8542	804806	0	True				
ANR	805319	ParameterType	ac_uint4		804806	0					
ANR	805320	Identifier	c		804806	1					
ANR	805321	Parameter	char * name	323:33:8545:8554	804806	1	True				
ANR	805322	ParameterType	char *		804806	0					
ANR	805323	Identifier	name		804806	1					
ANR	805324	Parameter	int len	323:45:8557:8563	804806	2	True				
ANR	805325	ParameterType	int		804806	0					
ANR	805326	Identifier	len		804806	1					
ANR	805327	CFGEntryNode	ENTRY		804806		True				
ANR	805328	CFGExitNode	EXIT		804806		True				
ANR	805329	Symbol	rlp -> size		804806						
ANR	805330	Symbol	rlp -> used		804806						
ANR	805331	Symbol	rlp -> ranges		804806						
ANR	805332	Symbol	* * rlp		804806						
ANR	805333	Symbol	realloc		804806						
ANR	805334	Symbol	memcmp		804806						
ANR	805335	Symbol	len		804806						
ANR	805336	Symbol	* rlp		804806						
ANR	805337	Symbol	malloc		804806						
ANR	805338	Symbol	c		804806						
ANR	805339	Symbol	e		804806						
ANR	805340	Symbol	props [ i ] . name		804806						
ANR	805341	Symbol	proptbl		804806						
ANR	805342	Symbol	i		804806						
ANR	805343	Symbol	j		804806						
ANR	805344	Symbol	NUMPROPS		804806						
ANR	805345	Symbol	props		804806						
ANR	805346	Symbol	* rlp -> ranges		804806						
ANR	805347	Symbol	s		804806						
ANR	805348	Symbol	* i		804806						
ANR	805349	Symbol	* j		804806						
ANR	805350	Symbol	rlp		804806						
ANR	805351	Symbol	name		804806						
ANR	805352	Symbol	* props		804806						
ANR	805353	Symbol	props [ i ] . len		804806						
ANR	805354	Function	add_decomp	447:0:11511:13961							
ANR	805355	FunctionDef	"add_decomp (ac_uint4 code , short compat)"		805354	0					
ANR	805356	CompoundStatement		449:0:11563:13961	805354	0					
ANR	805357	IdentifierDeclStatement	"ac_uint4 i , j , size ;"	450:4:11569:11588	805354	0	True				
ANR	805358	IdentifierDecl	i		805354	0					
ANR	805359	IdentifierDeclType	ac_uint4		805354	0					
ANR	805360	Identifier	i		805354	1					
ANR	805361	IdentifierDecl	j		805354	1					
ANR	805362	IdentifierDeclType	ac_uint4		805354	0					
ANR	805363	Identifier	j		805354	1					
ANR	805364	IdentifierDecl	size		805354	2					
ANR	805365	IdentifierDeclType	ac_uint4		805354	0					
ANR	805366	Identifier	size		805354	1					
ANR	805367	IdentifierDeclStatement	_decomp_t * * pdecomps ;	451:4:11594:11614	805354	1	True				
ANR	805368	IdentifierDecl	* * pdecomps		805354	0					
ANR	805369	IdentifierDeclType	_decomp_t * *		805354	0					
ANR	805370	Identifier	pdecomps		805354	1					
ANR	805371	IdentifierDeclStatement	ac_uint4 * pdecomps_used ;	452:4:11620:11643	805354	2	True				
ANR	805372	IdentifierDecl	* pdecomps_used		805354	0					
ANR	805373	IdentifierDeclType	ac_uint4 *		805354	0					
ANR	805374	Identifier	pdecomps_used		805354	1					
ANR	805375	IdentifierDeclStatement	ac_uint4 * pdecomps_size ;	453:4:11649:11672	805354	3	True				
ANR	805376	IdentifierDecl	* pdecomps_size		805354	0					
ANR	805377	IdentifierDeclType	ac_uint4 *		805354	0					
ANR	805378	Identifier	pdecomps_size		805354	1					
ANR	805379	IfStatement	if ( compat )		805354	4					
ANR	805380	Condition	compat	455:8:11683:11688	805354	0	True				
ANR	805381	Identifier	compat		805354	0					
ANR	805382	CompoundStatement		7:16:127:127	805354	1					
ANR	805383	ExpressionStatement	pdecomps = & kdecomps	456:1:11694:11714	805354	0	True				
ANR	805384	AssignmentExpression	pdecomps = & kdecomps		805354	0		=			
ANR	805385	Identifier	pdecomps		805354	0					
ANR	805386	UnaryOperationExpression	& kdecomps		805354	1					
ANR	805387	UnaryOperator	&		805354	0					
ANR	805388	Identifier	kdecomps		805354	1					
ANR	805389	ExpressionStatement	pdecomps_used = & kdecomps_used	457:1:11717:11747	805354	1	True				
ANR	805390	AssignmentExpression	pdecomps_used = & kdecomps_used		805354	0		=			
ANR	805391	Identifier	pdecomps_used		805354	0					
ANR	805392	UnaryOperationExpression	& kdecomps_used		805354	1					
ANR	805393	UnaryOperator	&		805354	0					
ANR	805394	Identifier	kdecomps_used		805354	1					
ANR	805395	ExpressionStatement	pdecomps_size = & kdecomps_size	458:1:11750:11780	805354	2	True				
ANR	805396	AssignmentExpression	pdecomps_size = & kdecomps_size		805354	0		=			
ANR	805397	Identifier	pdecomps_size		805354	0					
ANR	805398	UnaryOperationExpression	& kdecomps_size		805354	1					
ANR	805399	UnaryOperator	&		805354	0					
ANR	805400	Identifier	kdecomps_size		805354	1					
ANR	805401	ElseStatement	else		805354	0					
ANR	805402	CompoundStatement		11:11:229:229	805354	0					
ANR	805403	ExpressionStatement	pdecomps = & decomps	460:1:11796:11815	805354	0	True				
ANR	805404	AssignmentExpression	pdecomps = & decomps		805354	0		=			
ANR	805405	Identifier	pdecomps		805354	0					
ANR	805406	UnaryOperationExpression	& decomps		805354	1					
ANR	805407	UnaryOperator	&		805354	0					
ANR	805408	Identifier	decomps		805354	1					
ANR	805409	ExpressionStatement	pdecomps_used = & decomps_used	461:1:11818:11847	805354	1	True				
ANR	805410	AssignmentExpression	pdecomps_used = & decomps_used		805354	0		=			
ANR	805411	Identifier	pdecomps_used		805354	0					
ANR	805412	UnaryOperationExpression	& decomps_used		805354	1					
ANR	805413	UnaryOperator	&		805354	0					
ANR	805414	Identifier	decomps_used		805354	1					
ANR	805415	ExpressionStatement	pdecomps_size = & decomps_size	462:1:11850:11879	805354	2	True				
ANR	805416	AssignmentExpression	pdecomps_size = & decomps_size		805354	0		=			
ANR	805417	Identifier	pdecomps_size		805354	0					
ANR	805418	UnaryOperationExpression	& decomps_size		805354	1					
ANR	805419	UnaryOperator	&		805354	0					
ANR	805420	Identifier	decomps_size		805354	1					
ANR	805421	IfStatement	if ( ! compat )		805354	5					
ANR	805422	Condition	! compat	468:8:11962:11968	805354	0	True				
ANR	805423	UnaryOperationExpression	! compat		805354	0					
ANR	805424	UnaryOperator	!		805354	0					
ANR	805425	Identifier	compat		805354	1					
ANR	805426	CompoundStatement		20:17:407:407	805354	1					
ANR	805427	ExpressionStatement	"ordered_range_insert ( code , ""Cm"" , 2 )"	469:1:11974:12009	805354	0	True				
ANR	805428	CallExpression	"ordered_range_insert ( code , ""Cm"" , 2 )"		805354	0					
ANR	805429	Callee	ordered_range_insert		805354	0					
ANR	805430	Identifier	ordered_range_insert		805354	0					
ANR	805431	ArgumentList	code		805354	1					
ANR	805432	Argument	code		805354	0					
ANR	805433	Identifier	code		805354	0					
ANR	805434	Argument	"""Cm"""		805354	1					
ANR	805435	PrimaryExpression	"""Cm"""		805354	0					
ANR	805436	Argument	2		805354	2					
ANR	805437	PrimaryExpression	2		805354	0					
ANR	805438	ForStatement	for ( i = 0 ; i < * pdecomps_used && code > ( * pdecomps ) [ i ] . code ; i ++ )		805354	6					
ANR	805439	ForInit	i = 0 ;	475:9:12090:12095	805354	0	True				
ANR	805440	AssignmentExpression	i = 0		805354	0		=			
ANR	805441	Identifier	i		805354	0					
ANR	805442	PrimaryExpression	0		805354	1					
ANR	805443	Condition	i < * pdecomps_used && code > ( * pdecomps ) [ i ] . code	475:16:12097:12144	805354	1	True				
ANR	805444	AndExpression	i < * pdecomps_used && code > ( * pdecomps ) [ i ] . code		805354	0		&&			
ANR	805445	RelationalExpression	i < * pdecomps_used		805354	0		<			
ANR	805446	Identifier	i		805354	0					
ANR	805447	UnaryOperationExpression	* pdecomps_used		805354	1					
ANR	805448	UnaryOperator	*		805354	0					
ANR	805449	Identifier	pdecomps_used		805354	1					
ANR	805450	RelationalExpression	code > ( * pdecomps ) [ i ] . code		805354	1		>			
ANR	805451	Identifier	code		805354	0					
ANR	805452	MemberAccess	( * pdecomps ) [ i ] . code		805354	1					
ANR	805453	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805454	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805455	UnaryOperator	*		805354	0					
ANR	805456	Identifier	pdecomps		805354	1					
ANR	805457	Identifier	i		805354	1					
ANR	805458	Identifier	code		805354	1					
ANR	805459	PostIncDecOperationExpression	i ++	475:66:12147:12149	805354	2	True				
ANR	805460	Identifier	i		805354	0					
ANR	805461	IncDec	++		805354	1					
ANR	805462	ExpressionStatement		475:71:12152:12152	805354	3	True				
ANR	805463	IfStatement	if ( * pdecomps_used == * pdecomps_size )		805354	7					
ANR	805464	Condition	* pdecomps_used == * pdecomps_size	480:8:12225:12256	805354	0	True				
ANR	805465	EqualityExpression	* pdecomps_used == * pdecomps_size		805354	0		==			
ANR	805466	UnaryOperationExpression	* pdecomps_used		805354	0					
ANR	805467	UnaryOperator	*		805354	0					
ANR	805468	Identifier	pdecomps_used		805354	1					
ANR	805469	UnaryOperationExpression	* pdecomps_size		805354	1					
ANR	805470	UnaryOperator	*		805354	0					
ANR	805471	Identifier	pdecomps_size		805354	1					
ANR	805472	CompoundStatement		32:42:695:695	805354	1					
ANR	805473	IfStatement	if ( * pdecomps_size == 0 )		805354	0					
ANR	805474	Condition	* pdecomps_size == 0	481:12:12273:12291	805354	0	True				
ANR	805475	EqualityExpression	* pdecomps_size == 0		805354	0		==			
ANR	805476	UnaryOperationExpression	* pdecomps_size		805354	0					
ANR	805477	UnaryOperator	*		805354	0					
ANR	805478	Identifier	pdecomps_size		805354	1					
ANR	805479	PrimaryExpression	0		805354	1					
ANR	805480	ExpressionStatement	* pdecomps = ( _decomp_t * ) malloc ( sizeof ( _decomp_t ) << 3 )	482:10:12304:12360	805354	1	True				
ANR	805481	AssignmentExpression	* pdecomps = ( _decomp_t * ) malloc ( sizeof ( _decomp_t ) << 3 )		805354	0		=			
ANR	805482	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805483	UnaryOperator	*		805354	0					
ANR	805484	Identifier	pdecomps		805354	1					
ANR	805485	CastExpression	( _decomp_t * ) malloc ( sizeof ( _decomp_t ) << 3 )		805354	1					
ANR	805486	CastTarget	_decomp_t *		805354	0					
ANR	805487	CallExpression	malloc ( sizeof ( _decomp_t ) << 3 )		805354	1					
ANR	805488	Callee	malloc		805354	0					
ANR	805489	Identifier	malloc		805354	0					
ANR	805490	ArgumentList	sizeof ( _decomp_t ) << 3		805354	1					
ANR	805491	Argument	sizeof ( _decomp_t ) << 3		805354	0					
ANR	805492	ShiftExpression	sizeof ( _decomp_t ) << 3		805354	0		<<			
ANR	805493	SizeofExpression	sizeof ( _decomp_t )		805354	0					
ANR	805494	Sizeof	sizeof		805354	0					
ANR	805495	SizeofOperand	_decomp_t		805354	1					
ANR	805496	PrimaryExpression	3		805354	1					
ANR	805497	ElseStatement	else		805354	0					
ANR	805498	ExpressionStatement	"* pdecomps = ( _decomp_t * ) realloc ( ( char * ) * pdecomps , sizeof ( _decomp_t ) * ( * pdecomps_size + 8 ) )"	484:10:12385:12516	805354	0	True				
ANR	805499	AssignmentExpression	"* pdecomps = ( _decomp_t * ) realloc ( ( char * ) * pdecomps , sizeof ( _decomp_t ) * ( * pdecomps_size + 8 ) )"		805354	0		=			
ANR	805500	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805501	UnaryOperator	*		805354	0					
ANR	805502	Identifier	pdecomps		805354	1					
ANR	805503	CastExpression	"( _decomp_t * ) realloc ( ( char * ) * pdecomps , sizeof ( _decomp_t ) * ( * pdecomps_size + 8 ) )"		805354	1					
ANR	805504	CastTarget	_decomp_t *		805354	0					
ANR	805505	CallExpression	"realloc ( ( char * ) * pdecomps , sizeof ( _decomp_t ) * ( * pdecomps_size + 8 ) )"		805354	1					
ANR	805506	Callee	realloc		805354	0					
ANR	805507	Identifier	realloc		805354	0					
ANR	805508	ArgumentList	( char * ) * pdecomps		805354	1					
ANR	805509	Argument	( char * ) * pdecomps		805354	0					
ANR	805510	CastExpression	( char * ) * pdecomps		805354	0					
ANR	805511	CastTarget	char *		805354	0					
ANR	805512	UnaryOperationExpression	* pdecomps		805354	1					
ANR	805513	UnaryOperator	*		805354	0					
ANR	805514	Identifier	pdecomps		805354	1					
ANR	805515	Argument	sizeof ( _decomp_t ) * ( * pdecomps_size + 8 )		805354	1					
ANR	805516	MultiplicativeExpression	sizeof ( _decomp_t ) * ( * pdecomps_size + 8 )		805354	0		*			
ANR	805517	SizeofExpression	sizeof ( _decomp_t )		805354	0					
ANR	805518	Sizeof	sizeof		805354	0					
ANR	805519	SizeofOperand	_decomp_t		805354	1					
ANR	805520	AdditiveExpression	* pdecomps_size + 8		805354	1		+			
ANR	805521	UnaryOperationExpression	* pdecomps_size		805354	0					
ANR	805522	UnaryOperator	*		805354	0					
ANR	805523	Identifier	pdecomps_size		805354	1					
ANR	805524	PrimaryExpression	8		805354	1					
ANR	805525	ExpressionStatement	"( void ) memset ( ( char * ) ( * pdecomps + * pdecomps_size ) , '\\0' , sizeof ( _decomp_t ) << 3 )"	487:8:12526:12630	805354	1	True				
ANR	805526	CastExpression	"( void ) memset ( ( char * ) ( * pdecomps + * pdecomps_size ) , '\\0' , sizeof ( _decomp_t ) << 3 )"		805354	0					
ANR	805527	CastTarget	void		805354	0					
ANR	805528	CallExpression	"memset ( ( char * ) ( * pdecomps + * pdecomps_size ) , '\\0' , sizeof ( _decomp_t ) << 3 )"		805354	1					
ANR	805529	Callee	memset		805354	0					
ANR	805530	Identifier	memset		805354	0					
ANR	805531	ArgumentList	( char * ) ( * pdecomps + * pdecomps_size )		805354	1					
ANR	805532	Argument	( char * ) ( * pdecomps + * pdecomps_size )		805354	0					
ANR	805533	CastExpression	( char * ) ( * pdecomps + * pdecomps_size )		805354	0					
ANR	805534	CastTarget	char *		805354	0					
ANR	805535	AdditiveExpression	* pdecomps + * pdecomps_size		805354	1		+			
ANR	805536	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805537	UnaryOperator	*		805354	0					
ANR	805538	Identifier	pdecomps		805354	1					
ANR	805539	UnaryOperationExpression	* pdecomps_size		805354	1					
ANR	805540	UnaryOperator	*		805354	0					
ANR	805541	Identifier	pdecomps_size		805354	1					
ANR	805542	Argument	'\\0'		805354	1					
ANR	805543	PrimaryExpression	'\\0'		805354	0					
ANR	805544	Argument	sizeof ( _decomp_t ) << 3		805354	2					
ANR	805545	ShiftExpression	sizeof ( _decomp_t ) << 3		805354	0		<<			
ANR	805546	SizeofExpression	sizeof ( _decomp_t )		805354	0					
ANR	805547	Sizeof	sizeof		805354	0					
ANR	805548	SizeofOperand	_decomp_t		805354	1					
ANR	805549	PrimaryExpression	3		805354	1					
ANR	805550	ExpressionStatement	* pdecomps_size += 8	489:8:12640:12659	805354	2	True				
ANR	805551	AssignmentExpression	* pdecomps_size += 8		805354	0		+=			
ANR	805552	UnaryOperationExpression	* pdecomps_size		805354	0					
ANR	805553	UnaryOperator	*		805354	0					
ANR	805554	Identifier	pdecomps_size		805354	1					
ANR	805555	PrimaryExpression	8		805354	1					
ANR	805556	IfStatement	if ( i < * pdecomps_used && code != ( * pdecomps ) [ i ] . code )		805354	8					
ANR	805557	Condition	i < * pdecomps_used && code != ( * pdecomps ) [ i ] . code	492:8:12676:12724	805354	0	True				
ANR	805558	AndExpression	i < * pdecomps_used && code != ( * pdecomps ) [ i ] . code		805354	0		&&			
ANR	805559	RelationalExpression	i < * pdecomps_used		805354	0		<			
ANR	805560	Identifier	i		805354	0					
ANR	805561	UnaryOperationExpression	* pdecomps_used		805354	1					
ANR	805562	UnaryOperator	*		805354	0					
ANR	805563	Identifier	pdecomps_used		805354	1					
ANR	805564	EqualityExpression	code != ( * pdecomps ) [ i ] . code		805354	1		!=			
ANR	805565	Identifier	code		805354	0					
ANR	805566	MemberAccess	( * pdecomps ) [ i ] . code		805354	1					
ANR	805567	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805568	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805569	UnaryOperator	*		805354	0					
ANR	805570	Identifier	pdecomps		805354	1					
ANR	805571	Identifier	i		805354	1					
ANR	805572	Identifier	code		805354	1					
ANR	805573	CompoundStatement		44:59:1163:1163	805354	1					
ANR	805574	ForStatement	for ( j = * pdecomps_used ; j > i ; j -- )		805354	0					
ANR	805575	ForInit	j = * pdecomps_used ;	496:13:12830:12848	805354	0	True				
ANR	805576	AssignmentExpression	j = * pdecomps_used		805354	0		=			
ANR	805577	Identifier	j		805354	0					
ANR	805578	UnaryOperationExpression	* pdecomps_used		805354	1					
ANR	805579	UnaryOperator	*		805354	0					
ANR	805580	Identifier	pdecomps_used		805354	1					
ANR	805581	Condition	j > i	496:33:12850:12854	805354	1	True				
ANR	805582	RelationalExpression	j > i		805354	0		>			
ANR	805583	Identifier	j		805354	0					
ANR	805584	Identifier	i		805354	1					
ANR	805585	PostIncDecOperationExpression	j --	496:40:12857:12859	805354	2	True				
ANR	805586	Identifier	j		805354	0					
ANR	805587	IncDec	--		805354	1					
ANR	805588	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) & ( * pdecomps ) [ j ] , ( char * ) & ( * pdecomps ) [ j - 1 ] , sizeof ( _decomp_t ) )"	497:10:12872:12987	805354	3	True				
ANR	805589	CastExpression	"( void ) AC_MEMCPY ( ( char * ) & ( * pdecomps ) [ j ] , ( char * ) & ( * pdecomps ) [ j - 1 ] , sizeof ( _decomp_t ) )"		805354	0					
ANR	805590	CastTarget	void		805354	0					
ANR	805591	CallExpression	"AC_MEMCPY ( ( char * ) & ( * pdecomps ) [ j ] , ( char * ) & ( * pdecomps ) [ j - 1 ] , sizeof ( _decomp_t ) )"		805354	1					
ANR	805592	Callee	AC_MEMCPY		805354	0					
ANR	805593	Identifier	AC_MEMCPY		805354	0					
ANR	805594	ArgumentList	( char * ) & ( * pdecomps ) [ j ]		805354	1					
ANR	805595	Argument	( char * ) & ( * pdecomps ) [ j ]		805354	0					
ANR	805596	CastExpression	( char * ) & ( * pdecomps ) [ j ]		805354	0					
ANR	805597	CastTarget	char *		805354	0					
ANR	805598	UnaryOperationExpression	& ( * pdecomps ) [ j ]		805354	1					
ANR	805599	UnaryOperator	&		805354	0					
ANR	805600	ArrayIndexing	( * pdecomps ) [ j ]		805354	1					
ANR	805601	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805602	UnaryOperator	*		805354	0					
ANR	805603	Identifier	pdecomps		805354	1					
ANR	805604	Identifier	j		805354	1					
ANR	805605	Argument	( char * ) & ( * pdecomps ) [ j - 1 ]		805354	1					
ANR	805606	CastExpression	( char * ) & ( * pdecomps ) [ j - 1 ]		805354	0					
ANR	805607	CastTarget	char *		805354	0					
ANR	805608	UnaryOperationExpression	& ( * pdecomps ) [ j - 1 ]		805354	1					
ANR	805609	UnaryOperator	&		805354	0					
ANR	805610	ArrayIndexing	( * pdecomps ) [ j - 1 ]		805354	1					
ANR	805611	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805612	UnaryOperator	*		805354	0					
ANR	805613	Identifier	pdecomps		805354	1					
ANR	805614	AdditiveExpression	j - 1		805354	1		-			
ANR	805615	Identifier	j		805354	0					
ANR	805616	PrimaryExpression	1		805354	1					
ANR	805617	Argument	sizeof ( _decomp_t )		805354	2					
ANR	805618	SizeofExpression	sizeof ( _decomp_t )		805354	0					
ANR	805619	Sizeof	sizeof		805354	0					
ANR	805620	SizeofOperand	_decomp_t		805354	1					
ANR	805621	ExpressionStatement	size = dectmp_size + ( 4 - ( dectmp_size & 3 ) )	504:4:13057:13101	805354	9	True				
ANR	805622	AssignmentExpression	size = dectmp_size + ( 4 - ( dectmp_size & 3 ) )		805354	0		=			
ANR	805623	Identifier	size		805354	0					
ANR	805624	AdditiveExpression	dectmp_size + ( 4 - ( dectmp_size & 3 ) )		805354	1		+			
ANR	805625	Identifier	dectmp_size		805354	0					
ANR	805626	AdditiveExpression	4 - ( dectmp_size & 3 )		805354	1		-			
ANR	805627	PrimaryExpression	4		805354	0					
ANR	805628	BitAndExpression	dectmp_size & 3		805354	1		&			
ANR	805629	Identifier	dectmp_size		805354	0					
ANR	805630	PrimaryExpression	3		805354	1					
ANR	805631	IfStatement	if ( ( * pdecomps ) [ i ] . size < size )		805354	10					
ANR	805632	Condition	( * pdecomps ) [ i ] . size < size	505:8:13111:13136	805354	0	True				
ANR	805633	RelationalExpression	( * pdecomps ) [ i ] . size < size		805354	0		<			
ANR	805634	MemberAccess	( * pdecomps ) [ i ] . size		805354	0					
ANR	805635	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805636	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805637	UnaryOperator	*		805354	0					
ANR	805638	Identifier	pdecomps		805354	1					
ANR	805639	Identifier	i		805354	1					
ANR	805640	Identifier	size		805354	1					
ANR	805641	Identifier	size		805354	1					
ANR	805642	CompoundStatement		57:36:1575:1575	805354	1					
ANR	805643	IfStatement	if ( ( * pdecomps ) [ i ] . size == 0 )		805354	0					
ANR	805644	Condition	( * pdecomps ) [ i ] . size == 0	506:12:13153:13176	805354	0	True				
ANR	805645	EqualityExpression	( * pdecomps ) [ i ] . size == 0		805354	0		==			
ANR	805646	MemberAccess	( * pdecomps ) [ i ] . size		805354	0					
ANR	805647	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805648	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805649	UnaryOperator	*		805354	0					
ANR	805650	Identifier	pdecomps		805354	1					
ANR	805651	Identifier	i		805354	1					
ANR	805652	Identifier	size		805354	1					
ANR	805653	PrimaryExpression	0		805354	1					
ANR	805654	ExpressionStatement	( * pdecomps ) [ i ] . decomp = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * size )	507:10:13189:13271	805354	1	True				
ANR	805655	AssignmentExpression	( * pdecomps ) [ i ] . decomp = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * size )		805354	0		=			
ANR	805656	MemberAccess	( * pdecomps ) [ i ] . decomp		805354	0					
ANR	805657	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805658	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805659	UnaryOperator	*		805354	0					
ANR	805660	Identifier	pdecomps		805354	1					
ANR	805661	Identifier	i		805354	1					
ANR	805662	Identifier	decomp		805354	1					
ANR	805663	CastExpression	( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * size )		805354	1					
ANR	805664	CastTarget	ac_uint4 *		805354	0					
ANR	805665	CallExpression	malloc ( sizeof ( ac_uint4 ) * size )		805354	1					
ANR	805666	Callee	malloc		805354	0					
ANR	805667	Identifier	malloc		805354	0					
ANR	805668	ArgumentList	sizeof ( ac_uint4 ) * size		805354	1					
ANR	805669	Argument	sizeof ( ac_uint4 ) * size		805354	0					
ANR	805670	MultiplicativeExpression	sizeof ( ac_uint4 ) * size		805354	0		*			
ANR	805671	SizeofExpression	sizeof ( ac_uint4 )		805354	0					
ANR	805672	Sizeof	sizeof		805354	0					
ANR	805673	SizeofOperand	ac_uint4		805354	1					
ANR	805674	Identifier	size		805354	1					
ANR	805675	ElseStatement	else		805354	0					
ANR	805676	ExpressionStatement	"( * pdecomps ) [ i ] . decomp = ( ac_uint4 * ) realloc ( ( char * ) ( * pdecomps ) [ i ] . decomp , sizeof ( ac_uint4 ) * size )"	510:10:13296:13433	805354	0	True				
ANR	805677	AssignmentExpression	"( * pdecomps ) [ i ] . decomp = ( ac_uint4 * ) realloc ( ( char * ) ( * pdecomps ) [ i ] . decomp , sizeof ( ac_uint4 ) * size )"		805354	0		=			
ANR	805678	MemberAccess	( * pdecomps ) [ i ] . decomp		805354	0					
ANR	805679	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805680	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805681	UnaryOperator	*		805354	0					
ANR	805682	Identifier	pdecomps		805354	1					
ANR	805683	Identifier	i		805354	1					
ANR	805684	Identifier	decomp		805354	1					
ANR	805685	CastExpression	"( ac_uint4 * ) realloc ( ( char * ) ( * pdecomps ) [ i ] . decomp , sizeof ( ac_uint4 ) * size )"		805354	1					
ANR	805686	CastTarget	ac_uint4 *		805354	0					
ANR	805687	CallExpression	"realloc ( ( char * ) ( * pdecomps ) [ i ] . decomp , sizeof ( ac_uint4 ) * size )"		805354	1					
ANR	805688	Callee	realloc		805354	0					
ANR	805689	Identifier	realloc		805354	0					
ANR	805690	ArgumentList	( char * ) ( * pdecomps ) [ i ] . decomp		805354	1					
ANR	805691	Argument	( char * ) ( * pdecomps ) [ i ] . decomp		805354	0					
ANR	805692	CastExpression	( char * ) ( * pdecomps ) [ i ] . decomp		805354	0					
ANR	805693	CastTarget	char *		805354	0					
ANR	805694	MemberAccess	( * pdecomps ) [ i ] . decomp		805354	1					
ANR	805695	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805696	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805697	UnaryOperator	*		805354	0					
ANR	805698	Identifier	pdecomps		805354	1					
ANR	805699	Identifier	i		805354	1					
ANR	805700	Identifier	decomp		805354	1					
ANR	805701	Argument	sizeof ( ac_uint4 ) * size		805354	1					
ANR	805702	MultiplicativeExpression	sizeof ( ac_uint4 ) * size		805354	0		*			
ANR	805703	SizeofExpression	sizeof ( ac_uint4 )		805354	0					
ANR	805704	Sizeof	sizeof		805354	0					
ANR	805705	SizeofOperand	ac_uint4		805354	1					
ANR	805706	Identifier	size		805354	1					
ANR	805707	ExpressionStatement	( * pdecomps ) [ i ] . size = size	513:8:13443:13469	805354	1	True				
ANR	805708	AssignmentExpression	( * pdecomps ) [ i ] . size = size		805354	0		=			
ANR	805709	MemberAccess	( * pdecomps ) [ i ] . size		805354	0					
ANR	805710	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805711	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805712	UnaryOperator	*		805354	0					
ANR	805713	Identifier	pdecomps		805354	1					
ANR	805714	Identifier	i		805354	1					
ANR	805715	Identifier	size		805354	1					
ANR	805716	Identifier	size		805354	1					
ANR	805717	IfStatement	if ( ( * pdecomps ) [ i ] . code != code )		805354	11					
ANR	805718	Condition	( * pdecomps ) [ i ] . code != code	516:8:13486:13512	805354	0	True				
ANR	805719	EqualityExpression	( * pdecomps ) [ i ] . code != code		805354	0		!=			
ANR	805720	MemberAccess	( * pdecomps ) [ i ] . code		805354	0					
ANR	805721	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805722	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805723	UnaryOperator	*		805354	0					
ANR	805724	Identifier	pdecomps		805354	1					
ANR	805725	Identifier	i		805354	1					
ANR	805726	Identifier	code		805354	1					
ANR	805727	Identifier	code		805354	1					
ANR	805728	ExpressionStatement	( * pdecomps_used ) ++	517:6:13521:13539	805354	1	True				
ANR	805729	PostIncDecOperationExpression	( * pdecomps_used ) ++		805354	0					
ANR	805730	UnaryOperationExpression	* pdecomps_used		805354	0					
ANR	805731	UnaryOperator	*		805354	0					
ANR	805732	Identifier	pdecomps_used		805354	1					
ANR	805733	IncDec	++		805354	1					
ANR	805734	ExpressionStatement	( * pdecomps ) [ i ] . code = code	519:4:13546:13572	805354	12	True				
ANR	805735	AssignmentExpression	( * pdecomps ) [ i ] . code = code		805354	0		=			
ANR	805736	MemberAccess	( * pdecomps ) [ i ] . code		805354	0					
ANR	805737	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805738	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805739	UnaryOperator	*		805354	0					
ANR	805740	Identifier	pdecomps		805354	1					
ANR	805741	Identifier	i		805354	1					
ANR	805742	Identifier	code		805354	1					
ANR	805743	Identifier	code		805354	1					
ANR	805744	ExpressionStatement	( * pdecomps ) [ i ] . used = dectmp_size	520:4:13578:13611	805354	13	True				
ANR	805745	AssignmentExpression	( * pdecomps ) [ i ] . used = dectmp_size		805354	0		=			
ANR	805746	MemberAccess	( * pdecomps ) [ i ] . used		805354	0					
ANR	805747	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805748	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805749	UnaryOperator	*		805354	0					
ANR	805750	Identifier	pdecomps		805354	1					
ANR	805751	Identifier	i		805354	1					
ANR	805752	Identifier	used		805354	1					
ANR	805753	Identifier	dectmp_size		805354	1					
ANR	805754	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) ( * pdecomps ) [ i ] . decomp , ( char * ) dectmp , sizeof ( ac_uint4 ) * dectmp_size )"	521:4:13617:13732	805354	14	True				
ANR	805755	CastExpression	"( void ) AC_MEMCPY ( ( char * ) ( * pdecomps ) [ i ] . decomp , ( char * ) dectmp , sizeof ( ac_uint4 ) * dectmp_size )"		805354	0					
ANR	805756	CastTarget	void		805354	0					
ANR	805757	CallExpression	"AC_MEMCPY ( ( char * ) ( * pdecomps ) [ i ] . decomp , ( char * ) dectmp , sizeof ( ac_uint4 ) * dectmp_size )"		805354	1					
ANR	805758	Callee	AC_MEMCPY		805354	0					
ANR	805759	Identifier	AC_MEMCPY		805354	0					
ANR	805760	ArgumentList	( char * ) ( * pdecomps ) [ i ] . decomp		805354	1					
ANR	805761	Argument	( char * ) ( * pdecomps ) [ i ] . decomp		805354	0					
ANR	805762	CastExpression	( char * ) ( * pdecomps ) [ i ] . decomp		805354	0					
ANR	805763	CastTarget	char *		805354	0					
ANR	805764	MemberAccess	( * pdecomps ) [ i ] . decomp		805354	1					
ANR	805765	ArrayIndexing	( * pdecomps ) [ i ]		805354	0					
ANR	805766	UnaryOperationExpression	* pdecomps		805354	0					
ANR	805767	UnaryOperator	*		805354	0					
ANR	805768	Identifier	pdecomps		805354	1					
ANR	805769	Identifier	i		805354	1					
ANR	805770	Identifier	decomp		805354	1					
ANR	805771	Argument	( char * ) dectmp		805354	1					
ANR	805772	CastExpression	( char * ) dectmp		805354	0					
ANR	805773	CastTarget	char *		805354	0					
ANR	805774	Identifier	dectmp		805354	1					
ANR	805775	Argument	sizeof ( ac_uint4 ) * dectmp_size		805354	2					
ANR	805776	MultiplicativeExpression	sizeof ( ac_uint4 ) * dectmp_size		805354	0		*			
ANR	805777	SizeofExpression	sizeof ( ac_uint4 )		805354	0					
ANR	805778	Sizeof	sizeof		805354	0					
ANR	805779	SizeofOperand	ac_uint4		805354	1					
ANR	805780	Identifier	dectmp_size		805354	1					
ANR	805781	IfStatement	if ( ! compat && dectmp_size == 2 )		805354	15					
ANR	805782	Condition	! compat && dectmp_size == 2	528:8:13912:13938	805354	0	True				
ANR	805783	AndExpression	! compat && dectmp_size == 2		805354	0		&&			
ANR	805784	UnaryOperationExpression	! compat		805354	0					
ANR	805785	UnaryOperator	!		805354	0					
ANR	805786	Identifier	compat		805354	1					
ANR	805787	EqualityExpression	dectmp_size == 2		805354	1		==			
ANR	805788	Identifier	dectmp_size		805354	0					
ANR	805789	PrimaryExpression	2		805354	1					
ANR	805790	ExpressionStatement	comps_used ++	529:6:13947:13959	805354	1	True				
ANR	805791	PostIncDecOperationExpression	comps_used ++		805354	0					
ANR	805792	Identifier	comps_used		805354	0					
ANR	805793	IncDec	++		805354	1					
ANR	805794	ReturnType	static void		805354	1					
ANR	805795	Identifier	add_decomp		805354	2					
ANR	805796	ParameterList	"ac_uint4 code , short compat"		805354	3					
ANR	805797	Parameter	ac_uint4 code	448:11:11534:11546	805354	0	True				
ANR	805798	ParameterType	ac_uint4		805354	0					
ANR	805799	Identifier	code		805354	1					
ANR	805800	Parameter	short compat	448:26:11549:11560	805354	1	True				
ANR	805801	ParameterType	short		805354	0					
ANR	805802	Identifier	compat		805354	1					
ANR	805803	CFGEntryNode	ENTRY		805354		True				
ANR	805804	CFGExitNode	EXIT		805354		True				
ANR	805805	Symbol	pdecomps		805354						
ANR	805806	Symbol	pdecomps_size		805354						
ANR	805807	Symbol	code		805354						
ANR	805808	Symbol	& kdecomps_used		805354						
ANR	805809	Symbol	comps_used		805354						
ANR	805810	Symbol	pdecomps_used		805354						
ANR	805811	Symbol	& kdecomps_size		805354						
ANR	805812	Symbol	realloc		805354						
ANR	805813	Symbol	dectmp_size		805354						
ANR	805814	Symbol	& kdecomps		805354						
ANR	805815	Symbol	& decomps_size		805354						
ANR	805816	Symbol	* pdecomps_size		805354						
ANR	805817	Symbol	& decomps		805354						
ANR	805818	Symbol	& decomps_used		805354						
ANR	805819	Symbol	* pdecomps_used		805354						
ANR	805820	Symbol	* * pdecomps		805354						
ANR	805821	Symbol	( * pdecomps ) [ i ] . code		805354						
ANR	805822	Symbol	malloc		805354						
ANR	805823	Symbol	( * pdecomps ) [ i ] . decomp		805354						
ANR	805824	Symbol	* pdecomps		805354						
ANR	805825	Symbol	i		805354						
ANR	805826	Symbol	j		805354						
ANR	805827	Symbol	* i		805354						
ANR	805828	Symbol	size		805354						
ANR	805829	Symbol	( * pdecomps ) [ i ] . used		805354						
ANR	805830	Symbol	dectmp		805354						
ANR	805831	Symbol	( * pdecomps ) [ i ] . size		805354						
ANR	805832	Symbol	compat		805354						
ANR	805833	Function	add_title	532:0:13964:14909							
ANR	805834	FunctionDef	add_title (ac_uint4 code)		805833	0					
ANR	805835	CompoundStatement		534:0:14001:14909	805833	0					
ANR	805836	IdentifierDeclStatement	"ac_uint4 i , j ;"	535:4:14007:14020	805833	0	True				
ANR	805837	IdentifierDecl	i		805833	0					
ANR	805838	IdentifierDeclType	ac_uint4		805833	0					
ANR	805839	Identifier	i		805833	1					
ANR	805840	IdentifierDecl	j		805833	1					
ANR	805841	IdentifierDeclType	ac_uint4		805833	0					
ANR	805842	Identifier	j		805833	1					
ANR	805843	ExpressionStatement	cases [ 2 ] = code	540:4:14080:14095	805833	1	True				
ANR	805844	AssignmentExpression	cases [ 2 ] = code		805833	0		=			
ANR	805845	ArrayIndexing	cases [ 2 ]		805833	0					
ANR	805846	Identifier	cases		805833	0					
ANR	805847	PrimaryExpression	2		805833	1					
ANR	805848	Identifier	code		805833	1					
ANR	805849	IfStatement	if ( title_used == title_size )		805833	2					
ANR	805850	Condition	title_used == title_size	542:8:14106:14129	805833	0	True				
ANR	805851	EqualityExpression	title_used == title_size		805833	0		==			
ANR	805852	Identifier	title_used		805833	0					
ANR	805853	Identifier	title_size		805833	1					
ANR	805854	CompoundStatement		9:34:130:130	805833	1					
ANR	805855	IfStatement	if ( title_size == 0 )		805833	0					
ANR	805856	Condition	title_size == 0	543:12:14146:14160	805833	0	True				
ANR	805857	EqualityExpression	title_size == 0		805833	0		==			
ANR	805858	Identifier	title_size		805833	0					
ANR	805859	PrimaryExpression	0		805833	1					
ANR	805860	ExpressionStatement	title = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )	544:10:14173:14221	805833	1	True				
ANR	805861	AssignmentExpression	title = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		805833	0		=			
ANR	805862	Identifier	title		805833	0					
ANR	805863	CastExpression	( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		805833	1					
ANR	805864	CastTarget	_case_t *		805833	0					
ANR	805865	CallExpression	malloc ( sizeof ( _case_t ) << 3 )		805833	1					
ANR	805866	Callee	malloc		805833	0					
ANR	805867	Identifier	malloc		805833	0					
ANR	805868	ArgumentList	sizeof ( _case_t ) << 3		805833	1					
ANR	805869	Argument	sizeof ( _case_t ) << 3		805833	0					
ANR	805870	ShiftExpression	sizeof ( _case_t ) << 3		805833	0		<<			
ANR	805871	SizeofExpression	sizeof ( _case_t )		805833	0					
ANR	805872	Sizeof	sizeof		805833	0					
ANR	805873	SizeofOperand	_case_t		805833	1					
ANR	805874	PrimaryExpression	3		805833	1					
ANR	805875	ElseStatement	else		805833	0					
ANR	805876	ExpressionStatement	"title = ( _case_t * ) realloc ( ( char * ) title , sizeof ( _case_t ) * ( title_size + 8 ) )"	546:10:14246:14363	805833	0	True				
ANR	805877	AssignmentExpression	"title = ( _case_t * ) realloc ( ( char * ) title , sizeof ( _case_t ) * ( title_size + 8 ) )"		805833	0		=			
ANR	805878	Identifier	title		805833	0					
ANR	805879	CastExpression	"( _case_t * ) realloc ( ( char * ) title , sizeof ( _case_t ) * ( title_size + 8 ) )"		805833	1					
ANR	805880	CastTarget	_case_t *		805833	0					
ANR	805881	CallExpression	"realloc ( ( char * ) title , sizeof ( _case_t ) * ( title_size + 8 ) )"		805833	1					
ANR	805882	Callee	realloc		805833	0					
ANR	805883	Identifier	realloc		805833	0					
ANR	805884	ArgumentList	( char * ) title		805833	1					
ANR	805885	Argument	( char * ) title		805833	0					
ANR	805886	CastExpression	( char * ) title		805833	0					
ANR	805887	CastTarget	char *		805833	0					
ANR	805888	Identifier	title		805833	1					
ANR	805889	Argument	sizeof ( _case_t ) * ( title_size + 8 )		805833	1					
ANR	805890	MultiplicativeExpression	sizeof ( _case_t ) * ( title_size + 8 )		805833	0		*			
ANR	805891	SizeofExpression	sizeof ( _case_t )		805833	0					
ANR	805892	Sizeof	sizeof		805833	0					
ANR	805893	SizeofOperand	_case_t		805833	1					
ANR	805894	AdditiveExpression	title_size + 8		805833	1		+			
ANR	805895	Identifier	title_size		805833	0					
ANR	805896	PrimaryExpression	8		805833	1					
ANR	805897	ExpressionStatement	title_size += 8	548:8:14373:14388	805833	1	True				
ANR	805898	AssignmentExpression	title_size += 8		805833	0		+=			
ANR	805899	Identifier	title_size		805833	0					
ANR	805900	PrimaryExpression	8		805833	1					
ANR	805901	ForStatement	for ( i = 0 ; i < title_used && code > title [ i ] . key ; i ++ )		805833	3					
ANR	805902	ForInit	i = 0 ;	554:9:14456:14461	805833	0	True				
ANR	805903	AssignmentExpression	i = 0		805833	0		=			
ANR	805904	Identifier	i		805833	0					
ANR	805905	PrimaryExpression	0		805833	1					
ANR	805906	Condition	i < title_used && code > title [ i ] . key	554:16:14463:14499	805833	1	True				
ANR	805907	AndExpression	i < title_used && code > title [ i ] . key		805833	0		&&			
ANR	805908	RelationalExpression	i < title_used		805833	0		<			
ANR	805909	Identifier	i		805833	0					
ANR	805910	Identifier	title_used		805833	1					
ANR	805911	RelationalExpression	code > title [ i ] . key		805833	1		>			
ANR	805912	Identifier	code		805833	0					
ANR	805913	MemberAccess	title [ i ] . key		805833	1					
ANR	805914	ArrayIndexing	title [ i ]		805833	0					
ANR	805915	Identifier	title		805833	0					
ANR	805916	Identifier	i		805833	1					
ANR	805917	Identifier	key		805833	1					
ANR	805918	PostIncDecOperationExpression	i ++	554:55:14502:14504	805833	2	True				
ANR	805919	Identifier	i		805833	0					
ANR	805920	IncDec	++		805833	1					
ANR	805921	ExpressionStatement		554:60:14507:14507	805833	3	True				
ANR	805922	IfStatement	if ( i < title_used )		805833	4					
ANR	805923	Condition	i < title_used	556:8:14518:14531	805833	0	True				
ANR	805924	RelationalExpression	i < title_used		805833	0		<			
ANR	805925	Identifier	i		805833	0					
ANR	805926	Identifier	title_used		805833	1					
ANR	805927	CompoundStatement		23:24:532:532	805833	1					
ANR	805928	ForStatement	for ( j = title_used ; j > i ; j -- )		805833	0					
ANR	805929	ForInit	j = title_used ;	560:13:14610:14624	805833	0	True				
ANR	805930	AssignmentExpression	j = title_used		805833	0		=			
ANR	805931	Identifier	j		805833	0					
ANR	805932	Identifier	title_used		805833	1					
ANR	805933	Condition	j > i	560:29:14626:14630	805833	1	True				
ANR	805934	RelationalExpression	j > i		805833	0		>			
ANR	805935	Identifier	j		805833	0					
ANR	805936	Identifier	i		805833	1					
ANR	805937	PostIncDecOperationExpression	j --	560:36:14633:14635	805833	2	True				
ANR	805938	Identifier	j		805833	0					
ANR	805939	IncDec	--		805833	1					
ANR	805940	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) & title [ j ] , ( char * ) & title [ j - 1 ] , sizeof ( _case_t ) )"	561:10:14648:14749	805833	3	True				
ANR	805941	CastExpression	"( void ) AC_MEMCPY ( ( char * ) & title [ j ] , ( char * ) & title [ j - 1 ] , sizeof ( _case_t ) )"		805833	0					
ANR	805942	CastTarget	void		805833	0					
ANR	805943	CallExpression	"AC_MEMCPY ( ( char * ) & title [ j ] , ( char * ) & title [ j - 1 ] , sizeof ( _case_t ) )"		805833	1					
ANR	805944	Callee	AC_MEMCPY		805833	0					
ANR	805945	Identifier	AC_MEMCPY		805833	0					
ANR	805946	ArgumentList	( char * ) & title [ j ]		805833	1					
ANR	805947	Argument	( char * ) & title [ j ]		805833	0					
ANR	805948	CastExpression	( char * ) & title [ j ]		805833	0					
ANR	805949	CastTarget	char *		805833	0					
ANR	805950	UnaryOperationExpression	& title [ j ]		805833	1					
ANR	805951	UnaryOperator	&		805833	0					
ANR	805952	ArrayIndexing	title [ j ]		805833	1					
ANR	805953	Identifier	title		805833	0					
ANR	805954	Identifier	j		805833	1					
ANR	805955	Argument	( char * ) & title [ j - 1 ]		805833	1					
ANR	805956	CastExpression	( char * ) & title [ j - 1 ]		805833	0					
ANR	805957	CastTarget	char *		805833	0					
ANR	805958	UnaryOperationExpression	& title [ j - 1 ]		805833	1					
ANR	805959	UnaryOperator	&		805833	0					
ANR	805960	ArrayIndexing	title [ j - 1 ]		805833	1					
ANR	805961	Identifier	title		805833	0					
ANR	805962	AdditiveExpression	j - 1		805833	1		-			
ANR	805963	Identifier	j		805833	0					
ANR	805964	PrimaryExpression	1		805833	1					
ANR	805965	Argument	sizeof ( _case_t )		805833	2					
ANR	805966	SizeofExpression	sizeof ( _case_t )		805833	0					
ANR	805967	Sizeof	sizeof		805833	0					
ANR	805968	SizeofOperand	_case_t		805833	1					
ANR	805969	ExpressionStatement	title [ i ] . key = cases [ 2 ]	565:4:14762:14785	805833	5	True				
ANR	805970	AssignmentExpression	title [ i ] . key = cases [ 2 ]		805833	0		=			
ANR	805971	MemberAccess	title [ i ] . key		805833	0					
ANR	805972	ArrayIndexing	title [ i ]		805833	0					
ANR	805973	Identifier	title		805833	0					
ANR	805974	Identifier	i		805833	1					
ANR	805975	Identifier	key		805833	1					
ANR	805976	ArrayIndexing	cases [ 2 ]		805833	1					
ANR	805977	Identifier	cases		805833	0					
ANR	805978	PrimaryExpression	2		805833	1					
ANR	805979	ExpressionStatement	title [ i ] . other1 = cases [ 0 ]	566:4:14806:14832	805833	6	True				
ANR	805980	AssignmentExpression	title [ i ] . other1 = cases [ 0 ]		805833	0		=			
ANR	805981	MemberAccess	title [ i ] . other1		805833	0					
ANR	805982	ArrayIndexing	title [ i ]		805833	0					
ANR	805983	Identifier	title		805833	0					
ANR	805984	Identifier	i		805833	1					
ANR	805985	Identifier	other1		805833	1					
ANR	805986	ArrayIndexing	cases [ 0 ]		805833	1					
ANR	805987	Identifier	cases		805833	0					
ANR	805988	PrimaryExpression	0		805833	1					
ANR	805989	ExpressionStatement	title [ i ] . other2 = cases [ 1 ]	567:4:14850:14876	805833	7	True				
ANR	805990	AssignmentExpression	title [ i ] . other2 = cases [ 1 ]		805833	0		=			
ANR	805991	MemberAccess	title [ i ] . other2		805833	0					
ANR	805992	ArrayIndexing	title [ i ]		805833	0					
ANR	805993	Identifier	title		805833	0					
ANR	805994	Identifier	i		805833	1					
ANR	805995	Identifier	other2		805833	1					
ANR	805996	ArrayIndexing	cases [ 1 ]		805833	1					
ANR	805997	Identifier	cases		805833	0					
ANR	805998	PrimaryExpression	1		805833	1					
ANR	805999	ExpressionStatement	title_used ++	569:4:14895:14907	805833	8	True				
ANR	806000	PostIncDecOperationExpression	title_used ++		805833	0					
ANR	806001	Identifier	title_used		805833	0					
ANR	806002	IncDec	++		805833	1					
ANR	806003	ReturnType	static void		805833	1					
ANR	806004	Identifier	add_title		805833	2					
ANR	806005	ParameterList	ac_uint4 code		805833	3					
ANR	806006	Parameter	ac_uint4 code	533:10:13986:13998	805833	0	True				
ANR	806007	ParameterType	ac_uint4		805833	0					
ANR	806008	Identifier	code		805833	1					
ANR	806009	CFGEntryNode	ENTRY		805833		True				
ANR	806010	CFGExitNode	EXIT		805833		True				
ANR	806011	Symbol	malloc		805833						
ANR	806012	Symbol	code		805833						
ANR	806013	Symbol	cases		805833						
ANR	806014	Symbol	title_size		805833						
ANR	806015	Symbol	i		805833						
ANR	806016	Symbol	title_used		805833						
ANR	806017	Symbol	j		805833						
ANR	806018	Symbol	realloc		805833						
ANR	806019	Symbol	* cases		805833						
ANR	806020	Symbol	title		805833						
ANR	806021	Symbol	title [ i ] . other1		805833						
ANR	806022	Symbol	title [ i ] . other2		805833						
ANR	806023	Symbol	title [ i ] . key		805833						
ANR	806024	Symbol	* i		805833						
ANR	806025	Symbol	* title		805833						
ANR	806026	Function	add_upper	572:0:14912:16018							
ANR	806027	FunctionDef	add_upper (ac_uint4 code)		806026	0					
ANR	806028	CompoundStatement		574:0:14949:16018	806026	0					
ANR	806029	IdentifierDeclStatement	"ac_uint4 i , j ;"	575:4:14955:14968	806026	0	True				
ANR	806030	IdentifierDecl	i		806026	0					
ANR	806031	IdentifierDeclType	ac_uint4		806026	0					
ANR	806032	Identifier	i		806026	1					
ANR	806033	IdentifierDecl	j		806026	1					
ANR	806034	IdentifierDeclType	ac_uint4		806026	0					
ANR	806035	Identifier	j		806026	1					
ANR	806036	ExpressionStatement	cases [ 0 ] = code	580:4:15028:15043	806026	1	True				
ANR	806037	AssignmentExpression	cases [ 0 ] = code		806026	0		=			
ANR	806038	ArrayIndexing	cases [ 0 ]		806026	0					
ANR	806039	Identifier	cases		806026	0					
ANR	806040	PrimaryExpression	0		806026	1					
ANR	806041	Identifier	code		806026	1					
ANR	806042	IfStatement	if ( cases [ 2 ] == 0 )		806026	2					
ANR	806043	Condition	cases [ 2 ] == 0	586:8:15168:15180	806026	0	True				
ANR	806044	EqualityExpression	cases [ 2 ] == 0		806026	0		==			
ANR	806045	ArrayIndexing	cases [ 2 ]		806026	0					
ANR	806046	Identifier	cases		806026	0					
ANR	806047	PrimaryExpression	2		806026	1					
ANR	806048	PrimaryExpression	0		806026	1					
ANR	806049	ExpressionStatement	cases [ 2 ] = code	587:6:15189:15204	806026	1	True				
ANR	806050	AssignmentExpression	cases [ 2 ] = code		806026	0		=			
ANR	806051	ArrayIndexing	cases [ 2 ]		806026	0					
ANR	806052	Identifier	cases		806026	0					
ANR	806053	PrimaryExpression	2		806026	1					
ANR	806054	Identifier	code		806026	1					
ANR	806055	IfStatement	if ( upper_used == upper_size )		806026	3					
ANR	806056	Condition	upper_used == upper_size	589:8:15215:15238	806026	0	True				
ANR	806057	EqualityExpression	upper_used == upper_size		806026	0		==			
ANR	806058	Identifier	upper_used		806026	0					
ANR	806059	Identifier	upper_size		806026	1					
ANR	806060	CompoundStatement		16:34:291:291	806026	1					
ANR	806061	IfStatement	if ( upper_size == 0 )		806026	0					
ANR	806062	Condition	upper_size == 0	590:12:15255:15269	806026	0	True				
ANR	806063	EqualityExpression	upper_size == 0		806026	0		==			
ANR	806064	Identifier	upper_size		806026	0					
ANR	806065	PrimaryExpression	0		806026	1					
ANR	806066	ExpressionStatement	upper = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )	591:10:15282:15330	806026	1	True				
ANR	806067	AssignmentExpression	upper = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		806026	0		=			
ANR	806068	Identifier	upper		806026	0					
ANR	806069	CastExpression	( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		806026	1					
ANR	806070	CastTarget	_case_t *		806026	0					
ANR	806071	CallExpression	malloc ( sizeof ( _case_t ) << 3 )		806026	1					
ANR	806072	Callee	malloc		806026	0					
ANR	806073	Identifier	malloc		806026	0					
ANR	806074	ArgumentList	sizeof ( _case_t ) << 3		806026	1					
ANR	806075	Argument	sizeof ( _case_t ) << 3		806026	0					
ANR	806076	ShiftExpression	sizeof ( _case_t ) << 3		806026	0		<<			
ANR	806077	SizeofExpression	sizeof ( _case_t )		806026	0					
ANR	806078	Sizeof	sizeof		806026	0					
ANR	806079	SizeofOperand	_case_t		806026	1					
ANR	806080	PrimaryExpression	3		806026	1					
ANR	806081	ElseStatement	else		806026	0					
ANR	806082	ExpressionStatement	"upper = ( _case_t * ) realloc ( ( char * ) upper , sizeof ( _case_t ) * ( upper_size + 8 ) )"	593:10:15355:15472	806026	0	True				
ANR	806083	AssignmentExpression	"upper = ( _case_t * ) realloc ( ( char * ) upper , sizeof ( _case_t ) * ( upper_size + 8 ) )"		806026	0		=			
ANR	806084	Identifier	upper		806026	0					
ANR	806085	CastExpression	"( _case_t * ) realloc ( ( char * ) upper , sizeof ( _case_t ) * ( upper_size + 8 ) )"		806026	1					
ANR	806086	CastTarget	_case_t *		806026	0					
ANR	806087	CallExpression	"realloc ( ( char * ) upper , sizeof ( _case_t ) * ( upper_size + 8 ) )"		806026	1					
ANR	806088	Callee	realloc		806026	0					
ANR	806089	Identifier	realloc		806026	0					
ANR	806090	ArgumentList	( char * ) upper		806026	1					
ANR	806091	Argument	( char * ) upper		806026	0					
ANR	806092	CastExpression	( char * ) upper		806026	0					
ANR	806093	CastTarget	char *		806026	0					
ANR	806094	Identifier	upper		806026	1					
ANR	806095	Argument	sizeof ( _case_t ) * ( upper_size + 8 )		806026	1					
ANR	806096	MultiplicativeExpression	sizeof ( _case_t ) * ( upper_size + 8 )		806026	0		*			
ANR	806097	SizeofExpression	sizeof ( _case_t )		806026	0					
ANR	806098	Sizeof	sizeof		806026	0					
ANR	806099	SizeofOperand	_case_t		806026	1					
ANR	806100	AdditiveExpression	upper_size + 8		806026	1		+			
ANR	806101	Identifier	upper_size		806026	0					
ANR	806102	PrimaryExpression	8		806026	1					
ANR	806103	ExpressionStatement	upper_size += 8	595:8:15482:15497	806026	1	True				
ANR	806104	AssignmentExpression	upper_size += 8		806026	0		+=			
ANR	806105	Identifier	upper_size		806026	0					
ANR	806106	PrimaryExpression	8		806026	1					
ANR	806107	ForStatement	for ( i = 0 ; i < upper_used && code > upper [ i ] . key ; i ++ )		806026	4					
ANR	806108	ForInit	i = 0 ;	601:9:15565:15570	806026	0	True				
ANR	806109	AssignmentExpression	i = 0		806026	0		=			
ANR	806110	Identifier	i		806026	0					
ANR	806111	PrimaryExpression	0		806026	1					
ANR	806112	Condition	i < upper_used && code > upper [ i ] . key	601:16:15572:15608	806026	1	True				
ANR	806113	AndExpression	i < upper_used && code > upper [ i ] . key		806026	0		&&			
ANR	806114	RelationalExpression	i < upper_used		806026	0		<			
ANR	806115	Identifier	i		806026	0					
ANR	806116	Identifier	upper_used		806026	1					
ANR	806117	RelationalExpression	code > upper [ i ] . key		806026	1		>			
ANR	806118	Identifier	code		806026	0					
ANR	806119	MemberAccess	upper [ i ] . key		806026	1					
ANR	806120	ArrayIndexing	upper [ i ]		806026	0					
ANR	806121	Identifier	upper		806026	0					
ANR	806122	Identifier	i		806026	1					
ANR	806123	Identifier	key		806026	1					
ANR	806124	PostIncDecOperationExpression	i ++	601:55:15611:15613	806026	2	True				
ANR	806125	Identifier	i		806026	0					
ANR	806126	IncDec	++		806026	1					
ANR	806127	ExpressionStatement		601:60:15616:15616	806026	3	True				
ANR	806128	IfStatement	if ( i < upper_used )		806026	5					
ANR	806129	Condition	i < upper_used	603:8:15627:15640	806026	0	True				
ANR	806130	RelationalExpression	i < upper_used		806026	0		<			
ANR	806131	Identifier	i		806026	0					
ANR	806132	Identifier	upper_used		806026	1					
ANR	806133	CompoundStatement		30:24:693:693	806026	1					
ANR	806134	ForStatement	for ( j = upper_used ; j > i ; j -- )		806026	0					
ANR	806135	ForInit	j = upper_used ;	607:13:15719:15733	806026	0	True				
ANR	806136	AssignmentExpression	j = upper_used		806026	0		=			
ANR	806137	Identifier	j		806026	0					
ANR	806138	Identifier	upper_used		806026	1					
ANR	806139	Condition	j > i	607:29:15735:15739	806026	1	True				
ANR	806140	RelationalExpression	j > i		806026	0		>			
ANR	806141	Identifier	j		806026	0					
ANR	806142	Identifier	i		806026	1					
ANR	806143	PostIncDecOperationExpression	j --	607:36:15742:15744	806026	2	True				
ANR	806144	Identifier	j		806026	0					
ANR	806145	IncDec	--		806026	1					
ANR	806146	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) & upper [ j ] , ( char * ) & upper [ j - 1 ] , sizeof ( _case_t ) )"	608:10:15757:15858	806026	3	True				
ANR	806147	CastExpression	"( void ) AC_MEMCPY ( ( char * ) & upper [ j ] , ( char * ) & upper [ j - 1 ] , sizeof ( _case_t ) )"		806026	0					
ANR	806148	CastTarget	void		806026	0					
ANR	806149	CallExpression	"AC_MEMCPY ( ( char * ) & upper [ j ] , ( char * ) & upper [ j - 1 ] , sizeof ( _case_t ) )"		806026	1					
ANR	806150	Callee	AC_MEMCPY		806026	0					
ANR	806151	Identifier	AC_MEMCPY		806026	0					
ANR	806152	ArgumentList	( char * ) & upper [ j ]		806026	1					
ANR	806153	Argument	( char * ) & upper [ j ]		806026	0					
ANR	806154	CastExpression	( char * ) & upper [ j ]		806026	0					
ANR	806155	CastTarget	char *		806026	0					
ANR	806156	UnaryOperationExpression	& upper [ j ]		806026	1					
ANR	806157	UnaryOperator	&		806026	0					
ANR	806158	ArrayIndexing	upper [ j ]		806026	1					
ANR	806159	Identifier	upper		806026	0					
ANR	806160	Identifier	j		806026	1					
ANR	806161	Argument	( char * ) & upper [ j - 1 ]		806026	1					
ANR	806162	CastExpression	( char * ) & upper [ j - 1 ]		806026	0					
ANR	806163	CastTarget	char *		806026	0					
ANR	806164	UnaryOperationExpression	& upper [ j - 1 ]		806026	1					
ANR	806165	UnaryOperator	&		806026	0					
ANR	806166	ArrayIndexing	upper [ j - 1 ]		806026	1					
ANR	806167	Identifier	upper		806026	0					
ANR	806168	AdditiveExpression	j - 1		806026	1		-			
ANR	806169	Identifier	j		806026	0					
ANR	806170	PrimaryExpression	1		806026	1					
ANR	806171	Argument	sizeof ( _case_t )		806026	2					
ANR	806172	SizeofExpression	sizeof ( _case_t )		806026	0					
ANR	806173	Sizeof	sizeof		806026	0					
ANR	806174	SizeofOperand	_case_t		806026	1					
ANR	806175	ExpressionStatement	upper [ i ] . key = cases [ 0 ]	612:4:15871:15894	806026	6	True				
ANR	806176	AssignmentExpression	upper [ i ] . key = cases [ 0 ]		806026	0		=			
ANR	806177	MemberAccess	upper [ i ] . key		806026	0					
ANR	806178	ArrayIndexing	upper [ i ]		806026	0					
ANR	806179	Identifier	upper		806026	0					
ANR	806180	Identifier	i		806026	1					
ANR	806181	Identifier	key		806026	1					
ANR	806182	ArrayIndexing	cases [ 0 ]		806026	1					
ANR	806183	Identifier	cases		806026	0					
ANR	806184	PrimaryExpression	0		806026	1					
ANR	806185	ExpressionStatement	upper [ i ] . other1 = cases [ 1 ]	613:4:15915:15941	806026	7	True				
ANR	806186	AssignmentExpression	upper [ i ] . other1 = cases [ 1 ]		806026	0		=			
ANR	806187	MemberAccess	upper [ i ] . other1		806026	0					
ANR	806188	ArrayIndexing	upper [ i ]		806026	0					
ANR	806189	Identifier	upper		806026	0					
ANR	806190	Identifier	i		806026	1					
ANR	806191	Identifier	other1		806026	1					
ANR	806192	ArrayIndexing	cases [ 1 ]		806026	1					
ANR	806193	Identifier	cases		806026	0					
ANR	806194	PrimaryExpression	1		806026	1					
ANR	806195	ExpressionStatement	upper [ i ] . other2 = cases [ 2 ]	614:4:15959:15985	806026	8	True				
ANR	806196	AssignmentExpression	upper [ i ] . other2 = cases [ 2 ]		806026	0		=			
ANR	806197	MemberAccess	upper [ i ] . other2		806026	0					
ANR	806198	ArrayIndexing	upper [ i ]		806026	0					
ANR	806199	Identifier	upper		806026	0					
ANR	806200	Identifier	i		806026	1					
ANR	806201	Identifier	other2		806026	1					
ANR	806202	ArrayIndexing	cases [ 2 ]		806026	1					
ANR	806203	Identifier	cases		806026	0					
ANR	806204	PrimaryExpression	2		806026	1					
ANR	806205	ExpressionStatement	upper_used ++	616:4:16004:16016	806026	9	True				
ANR	806206	PostIncDecOperationExpression	upper_used ++		806026	0					
ANR	806207	Identifier	upper_used		806026	0					
ANR	806208	IncDec	++		806026	1					
ANR	806209	ReturnType	static void		806026	1					
ANR	806210	Identifier	add_upper		806026	2					
ANR	806211	ParameterList	ac_uint4 code		806026	3					
ANR	806212	Parameter	ac_uint4 code	573:10:14934:14946	806026	0	True				
ANR	806213	ParameterType	ac_uint4		806026	0					
ANR	806214	Identifier	code		806026	1					
ANR	806215	CFGEntryNode	ENTRY		806026		True				
ANR	806216	CFGExitNode	EXIT		806026		True				
ANR	806217	Symbol	malloc		806026						
ANR	806218	Symbol	code		806026						
ANR	806219	Symbol	cases		806026						
ANR	806220	Symbol	upper		806026						
ANR	806221	Symbol	i		806026						
ANR	806222	Symbol	j		806026						
ANR	806223	Symbol	* upper		806026						
ANR	806224	Symbol	realloc		806026						
ANR	806225	Symbol	* cases		806026						
ANR	806226	Symbol	upper [ i ] . other1		806026						
ANR	806227	Symbol	upper_size		806026						
ANR	806228	Symbol	upper [ i ] . other2		806026						
ANR	806229	Symbol	upper_used		806026						
ANR	806230	Symbol	* i		806026						
ANR	806231	Symbol	upper [ i ] . key		806026						
ANR	806232	Function	add_lower	619:0:16021:17125							
ANR	806233	FunctionDef	add_lower (ac_uint4 code)		806232	0					
ANR	806234	CompoundStatement		621:0:16058:17125	806232	0					
ANR	806235	IdentifierDeclStatement	"ac_uint4 i , j ;"	622:4:16064:16077	806232	0	True				
ANR	806236	IdentifierDecl	i		806232	0					
ANR	806237	IdentifierDeclType	ac_uint4		806232	0					
ANR	806238	Identifier	i		806232	1					
ANR	806239	IdentifierDecl	j		806232	1					
ANR	806240	IdentifierDeclType	ac_uint4		806232	0					
ANR	806241	Identifier	j		806232	1					
ANR	806242	ExpressionStatement	cases [ 1 ] = code	627:4:16137:16152	806232	1	True				
ANR	806243	AssignmentExpression	cases [ 1 ] = code		806232	0		=			
ANR	806244	ArrayIndexing	cases [ 1 ]		806232	0					
ANR	806245	Identifier	cases		806232	0					
ANR	806246	PrimaryExpression	1		806232	1					
ANR	806247	Identifier	code		806232	1					
ANR	806248	IfStatement	if ( cases [ 2 ] == 0 )		806232	2					
ANR	806249	Condition	cases [ 2 ] == 0	633:8:16271:16283	806232	0	True				
ANR	806250	EqualityExpression	cases [ 2 ] == 0		806232	0		==			
ANR	806251	ArrayIndexing	cases [ 2 ]		806232	0					
ANR	806252	Identifier	cases		806232	0					
ANR	806253	PrimaryExpression	2		806232	1					
ANR	806254	PrimaryExpression	0		806232	1					
ANR	806255	ExpressionStatement	cases [ 2 ] = cases [ 0 ]	634:6:16292:16311	806232	1	True				
ANR	806256	AssignmentExpression	cases [ 2 ] = cases [ 0 ]		806232	0		=			
ANR	806257	ArrayIndexing	cases [ 2 ]		806232	0					
ANR	806258	Identifier	cases		806232	0					
ANR	806259	PrimaryExpression	2		806232	1					
ANR	806260	ArrayIndexing	cases [ 0 ]		806232	1					
ANR	806261	Identifier	cases		806232	0					
ANR	806262	PrimaryExpression	0		806232	1					
ANR	806263	IfStatement	if ( lower_used == lower_size )		806232	3					
ANR	806264	Condition	lower_used == lower_size	636:8:16322:16345	806232	0	True				
ANR	806265	EqualityExpression	lower_used == lower_size		806232	0		==			
ANR	806266	Identifier	lower_used		806232	0					
ANR	806267	Identifier	lower_size		806232	1					
ANR	806268	CompoundStatement		16:34:289:289	806232	1					
ANR	806269	IfStatement	if ( lower_size == 0 )		806232	0					
ANR	806270	Condition	lower_size == 0	637:12:16362:16376	806232	0	True				
ANR	806271	EqualityExpression	lower_size == 0		806232	0		==			
ANR	806272	Identifier	lower_size		806232	0					
ANR	806273	PrimaryExpression	0		806232	1					
ANR	806274	ExpressionStatement	lower = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )	638:10:16389:16437	806232	1	True				
ANR	806275	AssignmentExpression	lower = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		806232	0		=			
ANR	806276	Identifier	lower		806232	0					
ANR	806277	CastExpression	( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		806232	1					
ANR	806278	CastTarget	_case_t *		806232	0					
ANR	806279	CallExpression	malloc ( sizeof ( _case_t ) << 3 )		806232	1					
ANR	806280	Callee	malloc		806232	0					
ANR	806281	Identifier	malloc		806232	0					
ANR	806282	ArgumentList	sizeof ( _case_t ) << 3		806232	1					
ANR	806283	Argument	sizeof ( _case_t ) << 3		806232	0					
ANR	806284	ShiftExpression	sizeof ( _case_t ) << 3		806232	0		<<			
ANR	806285	SizeofExpression	sizeof ( _case_t )		806232	0					
ANR	806286	Sizeof	sizeof		806232	0					
ANR	806287	SizeofOperand	_case_t		806232	1					
ANR	806288	PrimaryExpression	3		806232	1					
ANR	806289	ElseStatement	else		806232	0					
ANR	806290	ExpressionStatement	"lower = ( _case_t * ) realloc ( ( char * ) lower , sizeof ( _case_t ) * ( lower_size + 8 ) )"	640:10:16462:16579	806232	0	True				
ANR	806291	AssignmentExpression	"lower = ( _case_t * ) realloc ( ( char * ) lower , sizeof ( _case_t ) * ( lower_size + 8 ) )"		806232	0		=			
ANR	806292	Identifier	lower		806232	0					
ANR	806293	CastExpression	"( _case_t * ) realloc ( ( char * ) lower , sizeof ( _case_t ) * ( lower_size + 8 ) )"		806232	1					
ANR	806294	CastTarget	_case_t *		806232	0					
ANR	806295	CallExpression	"realloc ( ( char * ) lower , sizeof ( _case_t ) * ( lower_size + 8 ) )"		806232	1					
ANR	806296	Callee	realloc		806232	0					
ANR	806297	Identifier	realloc		806232	0					
ANR	806298	ArgumentList	( char * ) lower		806232	1					
ANR	806299	Argument	( char * ) lower		806232	0					
ANR	806300	CastExpression	( char * ) lower		806232	0					
ANR	806301	CastTarget	char *		806232	0					
ANR	806302	Identifier	lower		806232	1					
ANR	806303	Argument	sizeof ( _case_t ) * ( lower_size + 8 )		806232	1					
ANR	806304	MultiplicativeExpression	sizeof ( _case_t ) * ( lower_size + 8 )		806232	0		*			
ANR	806305	SizeofExpression	sizeof ( _case_t )		806232	0					
ANR	806306	Sizeof	sizeof		806232	0					
ANR	806307	SizeofOperand	_case_t		806232	1					
ANR	806308	AdditiveExpression	lower_size + 8		806232	1		+			
ANR	806309	Identifier	lower_size		806232	0					
ANR	806310	PrimaryExpression	8		806232	1					
ANR	806311	ExpressionStatement	lower_size += 8	642:8:16589:16604	806232	1	True				
ANR	806312	AssignmentExpression	lower_size += 8		806232	0		+=			
ANR	806313	Identifier	lower_size		806232	0					
ANR	806314	PrimaryExpression	8		806232	1					
ANR	806315	ForStatement	for ( i = 0 ; i < lower_used && code > lower [ i ] . key ; i ++ )		806232	4					
ANR	806316	ForInit	i = 0 ;	648:9:16672:16677	806232	0	True				
ANR	806317	AssignmentExpression	i = 0		806232	0		=			
ANR	806318	Identifier	i		806232	0					
ANR	806319	PrimaryExpression	0		806232	1					
ANR	806320	Condition	i < lower_used && code > lower [ i ] . key	648:16:16679:16715	806232	1	True				
ANR	806321	AndExpression	i < lower_used && code > lower [ i ] . key		806232	0		&&			
ANR	806322	RelationalExpression	i < lower_used		806232	0		<			
ANR	806323	Identifier	i		806232	0					
ANR	806324	Identifier	lower_used		806232	1					
ANR	806325	RelationalExpression	code > lower [ i ] . key		806232	1		>			
ANR	806326	Identifier	code		806232	0					
ANR	806327	MemberAccess	lower [ i ] . key		806232	1					
ANR	806328	ArrayIndexing	lower [ i ]		806232	0					
ANR	806329	Identifier	lower		806232	0					
ANR	806330	Identifier	i		806232	1					
ANR	806331	Identifier	key		806232	1					
ANR	806332	PostIncDecOperationExpression	i ++	648:55:16718:16720	806232	2	True				
ANR	806333	Identifier	i		806232	0					
ANR	806334	IncDec	++		806232	1					
ANR	806335	ExpressionStatement		648:60:16723:16723	806232	3	True				
ANR	806336	IfStatement	if ( i < lower_used )		806232	5					
ANR	806337	Condition	i < lower_used	650:8:16734:16747	806232	0	True				
ANR	806338	RelationalExpression	i < lower_used		806232	0		<			
ANR	806339	Identifier	i		806232	0					
ANR	806340	Identifier	lower_used		806232	1					
ANR	806341	CompoundStatement		30:24:691:691	806232	1					
ANR	806342	ForStatement	for ( j = lower_used ; j > i ; j -- )		806232	0					
ANR	806343	ForInit	j = lower_used ;	654:13:16826:16840	806232	0	True				
ANR	806344	AssignmentExpression	j = lower_used		806232	0		=			
ANR	806345	Identifier	j		806232	0					
ANR	806346	Identifier	lower_used		806232	1					
ANR	806347	Condition	j > i	654:29:16842:16846	806232	1	True				
ANR	806348	RelationalExpression	j > i		806232	0		>			
ANR	806349	Identifier	j		806232	0					
ANR	806350	Identifier	i		806232	1					
ANR	806351	PostIncDecOperationExpression	j --	654:36:16849:16851	806232	2	True				
ANR	806352	Identifier	j		806232	0					
ANR	806353	IncDec	--		806232	1					
ANR	806354	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) & lower [ j ] , ( char * ) & lower [ j - 1 ] , sizeof ( _case_t ) )"	655:10:16864:16965	806232	3	True				
ANR	806355	CastExpression	"( void ) AC_MEMCPY ( ( char * ) & lower [ j ] , ( char * ) & lower [ j - 1 ] , sizeof ( _case_t ) )"		806232	0					
ANR	806356	CastTarget	void		806232	0					
ANR	806357	CallExpression	"AC_MEMCPY ( ( char * ) & lower [ j ] , ( char * ) & lower [ j - 1 ] , sizeof ( _case_t ) )"		806232	1					
ANR	806358	Callee	AC_MEMCPY		806232	0					
ANR	806359	Identifier	AC_MEMCPY		806232	0					
ANR	806360	ArgumentList	( char * ) & lower [ j ]		806232	1					
ANR	806361	Argument	( char * ) & lower [ j ]		806232	0					
ANR	806362	CastExpression	( char * ) & lower [ j ]		806232	0					
ANR	806363	CastTarget	char *		806232	0					
ANR	806364	UnaryOperationExpression	& lower [ j ]		806232	1					
ANR	806365	UnaryOperator	&		806232	0					
ANR	806366	ArrayIndexing	lower [ j ]		806232	1					
ANR	806367	Identifier	lower		806232	0					
ANR	806368	Identifier	j		806232	1					
ANR	806369	Argument	( char * ) & lower [ j - 1 ]		806232	1					
ANR	806370	CastExpression	( char * ) & lower [ j - 1 ]		806232	0					
ANR	806371	CastTarget	char *		806232	0					
ANR	806372	UnaryOperationExpression	& lower [ j - 1 ]		806232	1					
ANR	806373	UnaryOperator	&		806232	0					
ANR	806374	ArrayIndexing	lower [ j - 1 ]		806232	1					
ANR	806375	Identifier	lower		806232	0					
ANR	806376	AdditiveExpression	j - 1		806232	1		-			
ANR	806377	Identifier	j		806232	0					
ANR	806378	PrimaryExpression	1		806232	1					
ANR	806379	Argument	sizeof ( _case_t )		806232	2					
ANR	806380	SizeofExpression	sizeof ( _case_t )		806232	0					
ANR	806381	Sizeof	sizeof		806232	0					
ANR	806382	SizeofOperand	_case_t		806232	1					
ANR	806383	ExpressionStatement	lower [ i ] . key = cases [ 1 ]	659:4:16978:17001	806232	6	True				
ANR	806384	AssignmentExpression	lower [ i ] . key = cases [ 1 ]		806232	0		=			
ANR	806385	MemberAccess	lower [ i ] . key		806232	0					
ANR	806386	ArrayIndexing	lower [ i ]		806232	0					
ANR	806387	Identifier	lower		806232	0					
ANR	806388	Identifier	i		806232	1					
ANR	806389	Identifier	key		806232	1					
ANR	806390	ArrayIndexing	cases [ 1 ]		806232	1					
ANR	806391	Identifier	cases		806232	0					
ANR	806392	PrimaryExpression	1		806232	1					
ANR	806393	ExpressionStatement	lower [ i ] . other1 = cases [ 0 ]	660:4:17022:17048	806232	7	True				
ANR	806394	AssignmentExpression	lower [ i ] . other1 = cases [ 0 ]		806232	0		=			
ANR	806395	MemberAccess	lower [ i ] . other1		806232	0					
ANR	806396	ArrayIndexing	lower [ i ]		806232	0					
ANR	806397	Identifier	lower		806232	0					
ANR	806398	Identifier	i		806232	1					
ANR	806399	Identifier	other1		806232	1					
ANR	806400	ArrayIndexing	cases [ 0 ]		806232	1					
ANR	806401	Identifier	cases		806232	0					
ANR	806402	PrimaryExpression	0		806232	1					
ANR	806403	ExpressionStatement	lower [ i ] . other2 = cases [ 2 ]	661:4:17066:17092	806232	8	True				
ANR	806404	AssignmentExpression	lower [ i ] . other2 = cases [ 2 ]		806232	0		=			
ANR	806405	MemberAccess	lower [ i ] . other2		806232	0					
ANR	806406	ArrayIndexing	lower [ i ]		806232	0					
ANR	806407	Identifier	lower		806232	0					
ANR	806408	Identifier	i		806232	1					
ANR	806409	Identifier	other2		806232	1					
ANR	806410	ArrayIndexing	cases [ 2 ]		806232	1					
ANR	806411	Identifier	cases		806232	0					
ANR	806412	PrimaryExpression	2		806232	1					
ANR	806413	ExpressionStatement	lower_used ++	663:4:17111:17123	806232	9	True				
ANR	806414	PostIncDecOperationExpression	lower_used ++		806232	0					
ANR	806415	Identifier	lower_used		806232	0					
ANR	806416	IncDec	++		806232	1					
ANR	806417	ReturnType	static void		806232	1					
ANR	806418	Identifier	add_lower		806232	2					
ANR	806419	ParameterList	ac_uint4 code		806232	3					
ANR	806420	Parameter	ac_uint4 code	620:10:16043:16055	806232	0	True				
ANR	806421	ParameterType	ac_uint4		806232	0					
ANR	806422	Identifier	code		806232	1					
ANR	806423	CFGEntryNode	ENTRY		806232		True				
ANR	806424	CFGExitNode	EXIT		806232		True				
ANR	806425	Symbol	malloc		806232						
ANR	806426	Symbol	code		806232						
ANR	806427	Symbol	cases		806232						
ANR	806428	Symbol	lower		806232						
ANR	806429	Symbol	i		806232						
ANR	806430	Symbol	j		806232						
ANR	806431	Symbol	realloc		806232						
ANR	806432	Symbol	* cases		806232						
ANR	806433	Symbol	* lower		806232						
ANR	806434	Symbol	lower [ i ] . other2		806232						
ANR	806435	Symbol	lower [ i ] . other1		806232						
ANR	806436	Symbol	lower [ i ] . key		806232						
ANR	806437	Symbol	* i		806232						
ANR	806438	Symbol	lower_used		806232						
ANR	806439	Symbol	lower_size		806232						
ANR	806440	Function	ordered_ccl_insert	666:0:17128:18880							
ANR	806441	FunctionDef	"ordered_ccl_insert (ac_uint4 c , ac_uint4 ccl_code)"		806440	0					
ANR	806442	CompoundStatement		668:0:17190:18880	806440	0					
ANR	806443	IdentifierDeclStatement	"ac_uint4 i , j ;"	669:4:17196:17209	806440	0	True				
ANR	806444	IdentifierDecl	i		806440	0					
ANR	806445	IdentifierDeclType	ac_uint4		806440	0					
ANR	806446	Identifier	i		806440	1					
ANR	806447	IdentifierDecl	j		806440	1					
ANR	806448	IdentifierDeclType	ac_uint4		806440	0					
ANR	806449	Identifier	j		806440	1					
ANR	806450	IfStatement	if ( ccl_used == ccl_size )		806440	1					
ANR	806451	Condition	ccl_used == ccl_size	671:8:17220:17239	806440	0	True				
ANR	806452	EqualityExpression	ccl_used == ccl_size		806440	0		==			
ANR	806453	Identifier	ccl_used		806440	0					
ANR	806454	Identifier	ccl_size		806440	1					
ANR	806455	CompoundStatement		4:30:51:51	806440	1					
ANR	806456	IfStatement	if ( ccl_size == 0 )		806440	0					
ANR	806457	Condition	ccl_size == 0	672:12:17256:17268	806440	0	True				
ANR	806458	EqualityExpression	ccl_size == 0		806440	0		==			
ANR	806459	Identifier	ccl_size		806440	0					
ANR	806460	PrimaryExpression	0		806440	1					
ANR	806461	ExpressionStatement	ccl = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * 24 )	673:10:17281:17329	806440	1	True				
ANR	806462	AssignmentExpression	ccl = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * 24 )		806440	0		=			
ANR	806463	Identifier	ccl		806440	0					
ANR	806464	CastExpression	( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * 24 )		806440	1					
ANR	806465	CastTarget	ac_uint4 *		806440	0					
ANR	806466	CallExpression	malloc ( sizeof ( ac_uint4 ) * 24 )		806440	1					
ANR	806467	Callee	malloc		806440	0					
ANR	806468	Identifier	malloc		806440	0					
ANR	806469	ArgumentList	sizeof ( ac_uint4 ) * 24		806440	1					
ANR	806470	Argument	sizeof ( ac_uint4 ) * 24		806440	0					
ANR	806471	MultiplicativeExpression	sizeof ( ac_uint4 ) * 24		806440	0		*			
ANR	806472	SizeofExpression	sizeof ( ac_uint4 )		806440	0					
ANR	806473	Sizeof	sizeof		806440	0					
ANR	806474	SizeofOperand	ac_uint4		806440	1					
ANR	806475	PrimaryExpression	24		806440	1					
ANR	806476	ElseStatement	else		806440	0					
ANR	806477	ExpressionStatement	"ccl = ( ac_uint4 * ) realloc ( ( char * ) ccl , sizeof ( ac_uint4 ) * ( ccl_size + 24 ) )"	675:10:17354:17444	806440	0	True				
ANR	806478	AssignmentExpression	"ccl = ( ac_uint4 * ) realloc ( ( char * ) ccl , sizeof ( ac_uint4 ) * ( ccl_size + 24 ) )"		806440	0		=			
ANR	806479	Identifier	ccl		806440	0					
ANR	806480	CastExpression	"( ac_uint4 * ) realloc ( ( char * ) ccl , sizeof ( ac_uint4 ) * ( ccl_size + 24 ) )"		806440	1					
ANR	806481	CastTarget	ac_uint4 *		806440	0					
ANR	806482	CallExpression	"realloc ( ( char * ) ccl , sizeof ( ac_uint4 ) * ( ccl_size + 24 ) )"		806440	1					
ANR	806483	Callee	realloc		806440	0					
ANR	806484	Identifier	realloc		806440	0					
ANR	806485	ArgumentList	( char * ) ccl		806440	1					
ANR	806486	Argument	( char * ) ccl		806440	0					
ANR	806487	CastExpression	( char * ) ccl		806440	0					
ANR	806488	CastTarget	char *		806440	0					
ANR	806489	Identifier	ccl		806440	1					
ANR	806490	Argument	sizeof ( ac_uint4 ) * ( ccl_size + 24 )		806440	1					
ANR	806491	MultiplicativeExpression	sizeof ( ac_uint4 ) * ( ccl_size + 24 )		806440	0		*			
ANR	806492	SizeofExpression	sizeof ( ac_uint4 )		806440	0					
ANR	806493	Sizeof	sizeof		806440	0					
ANR	806494	SizeofOperand	ac_uint4		806440	1					
ANR	806495	AdditiveExpression	ccl_size + 24		806440	1		+			
ANR	806496	Identifier	ccl_size		806440	0					
ANR	806497	PrimaryExpression	24		806440	1					
ANR	806498	ExpressionStatement	ccl_size += 24	677:8:17454:17468	806440	1	True				
ANR	806499	AssignmentExpression	ccl_size += 24		806440	0		+=			
ANR	806500	Identifier	ccl_size		806440	0					
ANR	806501	PrimaryExpression	24		806440	1					
ANR	806502	IfStatement	if ( ccl_used == 0 )		806440	2					
ANR	806503	Condition	ccl_used == 0	683:8:17539:17551	806440	0	True				
ANR	806504	EqualityExpression	ccl_used == 0		806440	0		==			
ANR	806505	Identifier	ccl_used		806440	0					
ANR	806506	PrimaryExpression	0		806440	1					
ANR	806507	CompoundStatement		16:23:363:363	806440	1					
ANR	806508	ExpressionStatement	ccl [ 0 ] = ccl [ 1 ] = c	684:8:17564:17583	806440	0	True				
ANR	806509	AssignmentExpression	ccl [ 0 ] = ccl [ 1 ] = c		806440	0		=			
ANR	806510	ArrayIndexing	ccl [ 0 ]		806440	0					
ANR	806511	Identifier	ccl		806440	0					
ANR	806512	PrimaryExpression	0		806440	1					
ANR	806513	AssignmentExpression	ccl [ 1 ] = c		806440	1		=			
ANR	806514	ArrayIndexing	ccl [ 1 ]		806440	0					
ANR	806515	Identifier	ccl		806440	0					
ANR	806516	PrimaryExpression	1		806440	1					
ANR	806517	Identifier	c		806440	1					
ANR	806518	ExpressionStatement	ccl [ 2 ] = ccl_code	685:8:17593:17610	806440	1	True				
ANR	806519	AssignmentExpression	ccl [ 2 ] = ccl_code		806440	0		=			
ANR	806520	ArrayIndexing	ccl [ 2 ]		806440	0					
ANR	806521	Identifier	ccl		806440	0					
ANR	806522	PrimaryExpression	2		806440	1					
ANR	806523	Identifier	ccl_code		806440	1					
ANR	806524	ExpressionStatement	ccl_used += 3	686:8:17620:17633	806440	2	True				
ANR	806525	AssignmentExpression	ccl_used += 3		806440	0		+=			
ANR	806526	Identifier	ccl_used		806440	0					
ANR	806527	PrimaryExpression	3		806440	1					
ANR	806528	ReturnStatement	return ;	687:8:17643:17649	806440	3	True				
ANR	806529	IfStatement	if ( ccl_code == ccl [ ccl_used - 1 ] && c == ccl [ ccl_used - 2 ] + 1 )		806440	3					
ANR	806530	Condition	ccl_code == ccl [ ccl_used - 1 ] && c == ccl [ ccl_used - 2 ] + 1	694:8:17814:17872	806440	0	True				
ANR	806531	AndExpression	ccl_code == ccl [ ccl_used - 1 ] && c == ccl [ ccl_used - 2 ] + 1		806440	0		&&			
ANR	806532	EqualityExpression	ccl_code == ccl [ ccl_used - 1 ]		806440	0		==			
ANR	806533	Identifier	ccl_code		806440	0					
ANR	806534	ArrayIndexing	ccl [ ccl_used - 1 ]		806440	1					
ANR	806535	Identifier	ccl		806440	0					
ANR	806536	AdditiveExpression	ccl_used - 1		806440	1		-			
ANR	806537	Identifier	ccl_used		806440	0					
ANR	806538	PrimaryExpression	1		806440	1					
ANR	806539	EqualityExpression	c == ccl [ ccl_used - 2 ] + 1		806440	1		==			
ANR	806540	Identifier	c		806440	0					
ANR	806541	AdditiveExpression	ccl [ ccl_used - 2 ] + 1		806440	1		+			
ANR	806542	ArrayIndexing	ccl [ ccl_used - 2 ]		806440	0					
ANR	806543	Identifier	ccl		806440	0					
ANR	806544	AdditiveExpression	ccl_used - 2		806440	1		-			
ANR	806545	Identifier	ccl_used		806440	0					
ANR	806546	PrimaryExpression	2		806440	1					
ANR	806547	PrimaryExpression	1		806440	1					
ANR	806548	CompoundStatement		27:69:684:684	806440	1					
ANR	806549	ExpressionStatement	ccl [ ccl_used - 2 ] = c	695:8:17885:17906	806440	0	True				
ANR	806550	AssignmentExpression	ccl [ ccl_used - 2 ] = c		806440	0		=			
ANR	806551	ArrayIndexing	ccl [ ccl_used - 2 ]		806440	0					
ANR	806552	Identifier	ccl		806440	0					
ANR	806553	AdditiveExpression	ccl_used - 2		806440	1		-			
ANR	806554	Identifier	ccl_used		806440	0					
ANR	806555	PrimaryExpression	2		806440	1					
ANR	806556	Identifier	c		806440	1					
ANR	806557	ReturnStatement	return ;	696:8:17916:17922	806440	1	True				
ANR	806558	IfStatement	if ( c > ccl [ ccl_used - 2 ] + 1 || ( c == ccl [ ccl_used - 2 ] + 1 && ccl_code != ccl [ ccl_used - 1 ] ) )		806440	4					
ANR	806559	Condition	c > ccl [ ccl_used - 2 ] + 1 || ( c == ccl [ ccl_used - 2 ] + 1 && ccl_code != ccl [ ccl_used - 1 ] )	702:8:18021:18118	806440	0	True				
ANR	806560	OrExpression	c > ccl [ ccl_used - 2 ] + 1 || ( c == ccl [ ccl_used - 2 ] + 1 && ccl_code != ccl [ ccl_used - 1 ] )		806440	0		||			
ANR	806561	RelationalExpression	c > ccl [ ccl_used - 2 ] + 1		806440	0		>			
ANR	806562	Identifier	c		806440	0					
ANR	806563	AdditiveExpression	ccl [ ccl_used - 2 ] + 1		806440	1		+			
ANR	806564	ArrayIndexing	ccl [ ccl_used - 2 ]		806440	0					
ANR	806565	Identifier	ccl		806440	0					
ANR	806566	AdditiveExpression	ccl_used - 2		806440	1		-			
ANR	806567	Identifier	ccl_used		806440	0					
ANR	806568	PrimaryExpression	2		806440	1					
ANR	806569	PrimaryExpression	1		806440	1					
ANR	806570	AndExpression	c == ccl [ ccl_used - 2 ] + 1 && ccl_code != ccl [ ccl_used - 1 ]		806440	1		&&			
ANR	806571	EqualityExpression	c == ccl [ ccl_used - 2 ] + 1		806440	0		==			
ANR	806572	Identifier	c		806440	0					
ANR	806573	AdditiveExpression	ccl [ ccl_used - 2 ] + 1		806440	1		+			
ANR	806574	ArrayIndexing	ccl [ ccl_used - 2 ]		806440	0					
ANR	806575	Identifier	ccl		806440	0					
ANR	806576	AdditiveExpression	ccl_used - 2		806440	1		-			
ANR	806577	Identifier	ccl_used		806440	0					
ANR	806578	PrimaryExpression	2		806440	1					
ANR	806579	PrimaryExpression	1		806440	1					
ANR	806580	EqualityExpression	ccl_code != ccl [ ccl_used - 1 ]		806440	1		!=			
ANR	806581	Identifier	ccl_code		806440	0					
ANR	806582	ArrayIndexing	ccl [ ccl_used - 1 ]		806440	1					
ANR	806583	Identifier	ccl		806440	0					
ANR	806584	AdditiveExpression	ccl_used - 1		806440	1		-			
ANR	806585	Identifier	ccl_used		806440	0					
ANR	806586	PrimaryExpression	1		806440	1					
ANR	806587	CompoundStatement		36:71:930:930	806440	1					
ANR	806588	ExpressionStatement	ccl [ ccl_used ++ ] = c	704:8:18131:18150	806440	0	True				
ANR	806589	AssignmentExpression	ccl [ ccl_used ++ ] = c		806440	0		=			
ANR	806590	ArrayIndexing	ccl [ ccl_used ++ ]		806440	0					
ANR	806591	Identifier	ccl		806440	0					
ANR	806592	PostIncDecOperationExpression	ccl_used ++		806440	1					
ANR	806593	Identifier	ccl_used		806440	0					
ANR	806594	IncDec	++		806440	1					
ANR	806595	Identifier	c		806440	1					
ANR	806596	ExpressionStatement	ccl [ ccl_used ++ ] = c	705:8:18160:18179	806440	1	True				
ANR	806597	AssignmentExpression	ccl [ ccl_used ++ ] = c		806440	0		=			
ANR	806598	ArrayIndexing	ccl [ ccl_used ++ ]		806440	0					
ANR	806599	Identifier	ccl		806440	0					
ANR	806600	PostIncDecOperationExpression	ccl_used ++		806440	1					
ANR	806601	Identifier	ccl_used		806440	0					
ANR	806602	IncDec	++		806440	1					
ANR	806603	Identifier	c		806440	1					
ANR	806604	ExpressionStatement	ccl [ ccl_used ++ ] = ccl_code	706:8:18189:18215	806440	2	True				
ANR	806605	AssignmentExpression	ccl [ ccl_used ++ ] = ccl_code		806440	0		=			
ANR	806606	ArrayIndexing	ccl [ ccl_used ++ ]		806440	0					
ANR	806607	Identifier	ccl		806440	0					
ANR	806608	PostIncDecOperationExpression	ccl_used ++		806440	1					
ANR	806609	Identifier	ccl_used		806440	0					
ANR	806610	IncDec	++		806440	1					
ANR	806611	Identifier	ccl_code		806440	1					
ANR	806612	ReturnStatement	return ;	707:8:18225:18231	806440	3	True				
ANR	806613	ForStatement	for ( i = 0 ; i < ccl_used && c > ccl [ i + 1 ] + 1 ; i += 3 )		806440	5					
ANR	806614	ForInit	i = 0 ;	713:9:18328:18333	806440	0	True				
ANR	806615	AssignmentExpression	i = 0		806440	0		=			
ANR	806616	Identifier	i		806440	0					
ANR	806617	PrimaryExpression	0		806440	1					
ANR	806618	Condition	i < ccl_used && c > ccl [ i + 1 ] + 1	713:16:18335:18368	806440	1	True				
ANR	806619	AndExpression	i < ccl_used && c > ccl [ i + 1 ] + 1		806440	0		&&			
ANR	806620	RelationalExpression	i < ccl_used		806440	0		<			
ANR	806621	Identifier	i		806440	0					
ANR	806622	Identifier	ccl_used		806440	1					
ANR	806623	RelationalExpression	c > ccl [ i + 1 ] + 1		806440	1		>			
ANR	806624	Identifier	c		806440	0					
ANR	806625	AdditiveExpression	ccl [ i + 1 ] + 1		806440	1		+			
ANR	806626	ArrayIndexing	ccl [ i + 1 ]		806440	0					
ANR	806627	Identifier	ccl		806440	0					
ANR	806628	AdditiveExpression	i + 1		806440	1		+			
ANR	806629	Identifier	i		806440	0					
ANR	806630	PrimaryExpression	1		806440	1					
ANR	806631	PrimaryExpression	1		806440	1					
ANR	806632	AssignmentExpression	i += 3	713:52:18371:18376	806440	2	True	+=			
ANR	806633	Identifier	i		806440	0					
ANR	806634	PrimaryExpression	3		806440	1					
ANR	806635	ExpressionStatement		713:60:18379:18379	806440	3	True				
ANR	806636	IfStatement	if ( ccl_code == ccl [ i + 2 ] && c == ccl [ i + 1 ] + 1 )		806440	6					
ANR	806637	Condition	ccl_code == ccl [ i + 2 ] && c == ccl [ i + 1 ] + 1	715:8:18390:18434	806440	0	True				
ANR	806638	AndExpression	ccl_code == ccl [ i + 2 ] && c == ccl [ i + 1 ] + 1		806440	0		&&			
ANR	806639	EqualityExpression	ccl_code == ccl [ i + 2 ]		806440	0		==			
ANR	806640	Identifier	ccl_code		806440	0					
ANR	806641	ArrayIndexing	ccl [ i + 2 ]		806440	1					
ANR	806642	Identifier	ccl		806440	0					
ANR	806643	AdditiveExpression	i + 2		806440	1		+			
ANR	806644	Identifier	i		806440	0					
ANR	806645	PrimaryExpression	2		806440	1					
ANR	806646	EqualityExpression	c == ccl [ i + 1 ] + 1		806440	1		==			
ANR	806647	Identifier	c		806440	0					
ANR	806648	AdditiveExpression	ccl [ i + 1 ] + 1		806440	1		+			
ANR	806649	ArrayIndexing	ccl [ i + 1 ]		806440	0					
ANR	806650	Identifier	ccl		806440	0					
ANR	806651	AdditiveExpression	i + 1		806440	1		+			
ANR	806652	Identifier	i		806440	0					
ANR	806653	PrimaryExpression	1		806440	1					
ANR	806654	PrimaryExpression	1		806440	1					
ANR	806655	CompoundStatement		48:55:1246:1246	806440	1					
ANR	806656	ExpressionStatement	ccl [ i + 1 ] = c	719:8:18507:18521	806440	0	True				
ANR	806657	AssignmentExpression	ccl [ i + 1 ] = c		806440	0		=			
ANR	806658	ArrayIndexing	ccl [ i + 1 ]		806440	0					
ANR	806659	Identifier	ccl		806440	0					
ANR	806660	AdditiveExpression	i + 1		806440	1		+			
ANR	806661	Identifier	i		806440	0					
ANR	806662	PrimaryExpression	1		806440	1					
ANR	806663	Identifier	c		806440	1					
ANR	806664	ReturnStatement	return ;	720:8:18531:18537	806440	1	True				
ANR	806665	ElseStatement	else		806440	0					
ANR	806666	IfStatement	if ( c < ccl [ i ] )		806440	0					
ANR	806667	Condition	c < ccl [ i ]	721:15:18554:18563	806440	0	True				
ANR	806668	RelationalExpression	c < ccl [ i ]		806440	0		<			
ANR	806669	Identifier	c		806440	0					
ANR	806670	ArrayIndexing	ccl [ i ]		806440	1					
ANR	806671	Identifier	ccl		806440	0					
ANR	806672	Identifier	i		806440	1					
ANR	806673	CompoundStatement		54:27:1375:1375	806440	1					
ANR	806674	ForStatement	for ( j = ccl_used ; j > i ; j -= 3 )		806440	0					
ANR	806675	ForInit	j = ccl_used ;	725:13:18662:18674	806440	0	True				
ANR	806676	AssignmentExpression	j = ccl_used		806440	0		=			
ANR	806677	Identifier	j		806440	0					
ANR	806678	Identifier	ccl_used		806440	1					
ANR	806679	Condition	j > i	725:27:18676:18680	806440	1	True				
ANR	806680	RelationalExpression	j > i		806440	0		>			
ANR	806681	Identifier	j		806440	0					
ANR	806682	Identifier	i		806440	1					
ANR	806683	AssignmentExpression	j -= 3	725:34:18683:18688	806440	2	True	-=			
ANR	806684	Identifier	j		806440	0					
ANR	806685	PrimaryExpression	3		806440	1					
ANR	806686	CompoundStatement		58:42:1500:1500	806440	3					
ANR	806687	ExpressionStatement	ccl [ j ] = ccl [ j - 3 ]	726:12:18705:18724	806440	0	True				
ANR	806688	AssignmentExpression	ccl [ j ] = ccl [ j - 3 ]		806440	0		=			
ANR	806689	ArrayIndexing	ccl [ j ]		806440	0					
ANR	806690	Identifier	ccl		806440	0					
ANR	806691	Identifier	j		806440	1					
ANR	806692	ArrayIndexing	ccl [ j - 3 ]		806440	1					
ANR	806693	Identifier	ccl		806440	0					
ANR	806694	AdditiveExpression	j - 3		806440	1		-			
ANR	806695	Identifier	j		806440	0					
ANR	806696	PrimaryExpression	3		806440	1					
ANR	806697	ExpressionStatement	ccl [ j - 1 ] = ccl [ j - 4 ]	727:12:18738:18761	806440	1	True				
ANR	806698	AssignmentExpression	ccl [ j - 1 ] = ccl [ j - 4 ]		806440	0		=			
ANR	806699	ArrayIndexing	ccl [ j - 1 ]		806440	0					
ANR	806700	Identifier	ccl		806440	0					
ANR	806701	AdditiveExpression	j - 1		806440	1		-			
ANR	806702	Identifier	j		806440	0					
ANR	806703	PrimaryExpression	1		806440	1					
ANR	806704	ArrayIndexing	ccl [ j - 4 ]		806440	1					
ANR	806705	Identifier	ccl		806440	0					
ANR	806706	AdditiveExpression	j - 4		806440	1		-			
ANR	806707	Identifier	j		806440	0					
ANR	806708	PrimaryExpression	4		806440	1					
ANR	806709	ExpressionStatement	ccl [ j - 2 ] = ccl [ j - 5 ]	728:12:18775:18798	806440	2	True				
ANR	806710	AssignmentExpression	ccl [ j - 2 ] = ccl [ j - 5 ]		806440	0		=			
ANR	806711	ArrayIndexing	ccl [ j - 2 ]		806440	0					
ANR	806712	Identifier	ccl		806440	0					
ANR	806713	AdditiveExpression	j - 2		806440	1		-			
ANR	806714	Identifier	j		806440	0					
ANR	806715	PrimaryExpression	2		806440	1					
ANR	806716	ArrayIndexing	ccl [ j - 5 ]		806440	1					
ANR	806717	Identifier	ccl		806440	0					
ANR	806718	AdditiveExpression	j - 5		806440	1		-			
ANR	806719	Identifier	j		806440	0					
ANR	806720	PrimaryExpression	5		806440	1					
ANR	806721	ExpressionStatement	ccl [ i ] = ccl [ i + 1 ] = c	730:8:18818:18841	806440	1	True				
ANR	806722	AssignmentExpression	ccl [ i ] = ccl [ i + 1 ] = c		806440	0		=			
ANR	806723	ArrayIndexing	ccl [ i ]		806440	0					
ANR	806724	Identifier	ccl		806440	0					
ANR	806725	Identifier	i		806440	1					
ANR	806726	AssignmentExpression	ccl [ i + 1 ] = c		806440	1		=			
ANR	806727	ArrayIndexing	ccl [ i + 1 ]		806440	0					
ANR	806728	Identifier	ccl		806440	0					
ANR	806729	AdditiveExpression	i + 1		806440	1		+			
ANR	806730	Identifier	i		806440	0					
ANR	806731	PrimaryExpression	1		806440	1					
ANR	806732	Identifier	c		806440	1					
ANR	806733	ExpressionStatement	ccl [ i + 2 ] = ccl_code	731:8:18851:18872	806440	2	True				
ANR	806734	AssignmentExpression	ccl [ i + 2 ] = ccl_code		806440	0		=			
ANR	806735	ArrayIndexing	ccl [ i + 2 ]		806440	0					
ANR	806736	Identifier	ccl		806440	0					
ANR	806737	AdditiveExpression	i + 2		806440	1		+			
ANR	806738	Identifier	i		806440	0					
ANR	806739	PrimaryExpression	2		806440	1					
ANR	806740	Identifier	ccl_code		806440	1					
ANR	806741	ReturnType	static void		806440	1					
ANR	806742	Identifier	ordered_ccl_insert		806440	2					
ANR	806743	ParameterList	"ac_uint4 c , ac_uint4 ccl_code"		806440	3					
ANR	806744	Parameter	ac_uint4 c	667:19:17159:17168	806440	0	True				
ANR	806745	ParameterType	ac_uint4		806440	0					
ANR	806746	Identifier	c		806440	1					
ANR	806747	Parameter	ac_uint4 ccl_code	667:31:17171:17187	806440	1	True				
ANR	806748	ParameterType	ac_uint4		806440	0					
ANR	806749	Identifier	ccl_code		806440	1					
ANR	806750	CFGEntryNode	ENTRY		806440		True				
ANR	806751	CFGExitNode	EXIT		806440		True				
ANR	806752	Symbol	malloc		806440						
ANR	806753	Symbol	c		806440						
ANR	806754	Symbol	i		806440						
ANR	806755	Symbol	* ccl		806440						
ANR	806756	Symbol	j		806440						
ANR	806757	Symbol	ccl_used		806440						
ANR	806758	Symbol	realloc		806440						
ANR	806759	Symbol	ccl_size		806440						
ANR	806760	Symbol	ccl		806440						
ANR	806761	Symbol	ccl_code		806440						
ANR	806762	Symbol	* ccl_used		806440						
ANR	806763	Symbol	* i		806440						
ANR	806764	Symbol	* j		806440						
ANR	806765	Function	make_number	739:0:18983:19644							
ANR	806766	FunctionDef	"make_number (short num , short denom)"		806765	0					
ANR	806767	CompoundStatement		741:0:19035:19644	806765	0					
ANR	806768	IdentifierDeclStatement	ac_uint4 n ;	742:4:19041:19051	806765	0	True				
ANR	806769	IdentifierDecl	n		806765	0					
ANR	806770	IdentifierDeclType	ac_uint4		806765	0					
ANR	806771	Identifier	n		806765	1					
ANR	806772	ForStatement	for ( n = 0 ; n < nums_used ; n ++ )		806765	1					
ANR	806773	ForInit	n = 0 ;	747:9:19125:19130	806765	0	True				
ANR	806774	AssignmentExpression	n = 0		806765	0		=			
ANR	806775	Identifier	n		806765	0					
ANR	806776	PrimaryExpression	0		806765	1					
ANR	806777	Condition	n < nums_used	747:16:19132:19144	806765	1	True				
ANR	806778	RelationalExpression	n < nums_used		806765	0		<			
ANR	806779	Identifier	n		806765	0					
ANR	806780	Identifier	nums_used		806765	1					
ANR	806781	PostIncDecOperationExpression	n ++	747:31:19147:19149	806765	2	True				
ANR	806782	Identifier	n		806765	0					
ANR	806783	IncDec	++		806765	1					
ANR	806784	CompoundStatement		7:36:116:116	806765	3					
ANR	806785	IfStatement	if ( nums [ n ] . numerator == num && nums [ n ] . denominator == denom )		806765	0					
ANR	806786	Condition	nums [ n ] . numerator == num && nums [ n ] . denominator == denom	748:12:19166:19221	806765	0	True				
ANR	806787	AndExpression	nums [ n ] . numerator == num && nums [ n ] . denominator == denom		806765	0		&&			
ANR	806788	EqualityExpression	nums [ n ] . numerator == num		806765	0		==			
ANR	806789	MemberAccess	nums [ n ] . numerator		806765	0					
ANR	806790	ArrayIndexing	nums [ n ]		806765	0					
ANR	806791	Identifier	nums		806765	0					
ANR	806792	Identifier	n		806765	1					
ANR	806793	Identifier	numerator		806765	1					
ANR	806794	Identifier	num		806765	1					
ANR	806795	EqualityExpression	nums [ n ] . denominator == denom		806765	1		==			
ANR	806796	MemberAccess	nums [ n ] . denominator		806765	0					
ANR	806797	ArrayIndexing	nums [ n ]		806765	0					
ANR	806798	Identifier	nums		806765	0					
ANR	806799	Identifier	n		806765	1					
ANR	806800	Identifier	denominator		806765	1					
ANR	806801	Identifier	denom		806765	1					
ANR	806802	ReturnStatement	return n << 1 ;	749:10:19234:19247	806765	1	True				
ANR	806803	ShiftExpression	n << 1		806765	0		<<			
ANR	806804	Identifier	n		806765	0					
ANR	806805	PrimaryExpression	1		806765	1					
ANR	806806	IfStatement	if ( nums_used == nums_size )		806765	2					
ANR	806807	Condition	nums_used == nums_size	752:8:19264:19285	806765	0	True				
ANR	806808	EqualityExpression	nums_used == nums_size		806765	0		==			
ANR	806809	Identifier	nums_used		806765	0					
ANR	806810	Identifier	nums_size		806765	1					
ANR	806811	CompoundStatement		12:32:252:252	806765	1					
ANR	806812	IfStatement	if ( nums_size == 0 )		806765	0					
ANR	806813	Condition	nums_size == 0	753:12:19302:19315	806765	0	True				
ANR	806814	EqualityExpression	nums_size == 0		806765	0		==			
ANR	806815	Identifier	nums_size		806765	0					
ANR	806816	PrimaryExpression	0		806765	1					
ANR	806817	ExpressionStatement	nums = ( _num_t * ) malloc ( sizeof ( _num_t ) << 3 )	754:10:19328:19373	806765	1	True				
ANR	806818	AssignmentExpression	nums = ( _num_t * ) malloc ( sizeof ( _num_t ) << 3 )		806765	0		=			
ANR	806819	Identifier	nums		806765	0					
ANR	806820	CastExpression	( _num_t * ) malloc ( sizeof ( _num_t ) << 3 )		806765	1					
ANR	806821	CastTarget	_num_t *		806765	0					
ANR	806822	CallExpression	malloc ( sizeof ( _num_t ) << 3 )		806765	1					
ANR	806823	Callee	malloc		806765	0					
ANR	806824	Identifier	malloc		806765	0					
ANR	806825	ArgumentList	sizeof ( _num_t ) << 3		806765	1					
ANR	806826	Argument	sizeof ( _num_t ) << 3		806765	0					
ANR	806827	ShiftExpression	sizeof ( _num_t ) << 3		806765	0		<<			
ANR	806828	SizeofExpression	sizeof ( _num_t )		806765	0					
ANR	806829	Sizeof	sizeof		806765	0					
ANR	806830	SizeofOperand	_num_t		806765	1					
ANR	806831	PrimaryExpression	3		806765	1					
ANR	806832	ElseStatement	else		806765	0					
ANR	806833	ExpressionStatement	"nums = ( _num_t * ) realloc ( ( char * ) nums , sizeof ( _num_t ) * ( nums_size + 8 ) )"	756:10:19398:19508	806765	0	True				
ANR	806834	AssignmentExpression	"nums = ( _num_t * ) realloc ( ( char * ) nums , sizeof ( _num_t ) * ( nums_size + 8 ) )"		806765	0		=			
ANR	806835	Identifier	nums		806765	0					
ANR	806836	CastExpression	"( _num_t * ) realloc ( ( char * ) nums , sizeof ( _num_t ) * ( nums_size + 8 ) )"		806765	1					
ANR	806837	CastTarget	_num_t *		806765	0					
ANR	806838	CallExpression	"realloc ( ( char * ) nums , sizeof ( _num_t ) * ( nums_size + 8 ) )"		806765	1					
ANR	806839	Callee	realloc		806765	0					
ANR	806840	Identifier	realloc		806765	0					
ANR	806841	ArgumentList	( char * ) nums		806765	1					
ANR	806842	Argument	( char * ) nums		806765	0					
ANR	806843	CastExpression	( char * ) nums		806765	0					
ANR	806844	CastTarget	char *		806765	0					
ANR	806845	Identifier	nums		806765	1					
ANR	806846	Argument	sizeof ( _num_t ) * ( nums_size + 8 )		806765	1					
ANR	806847	MultiplicativeExpression	sizeof ( _num_t ) * ( nums_size + 8 )		806765	0		*			
ANR	806848	SizeofExpression	sizeof ( _num_t )		806765	0					
ANR	806849	Sizeof	sizeof		806765	0					
ANR	806850	SizeofOperand	_num_t		806765	1					
ANR	806851	AdditiveExpression	nums_size + 8		806765	1		+			
ANR	806852	Identifier	nums_size		806765	0					
ANR	806853	PrimaryExpression	8		806765	1					
ANR	806854	ExpressionStatement	nums_size += 8	758:8:19518:19532	806765	1	True				
ANR	806855	AssignmentExpression	nums_size += 8		806765	0		+=			
ANR	806856	Identifier	nums_size		806765	0					
ANR	806857	PrimaryExpression	8		806765	1					
ANR	806858	ExpressionStatement	n = nums_used ++	761:4:19545:19560	806765	3	True				
ANR	806859	AssignmentExpression	n = nums_used ++		806765	0		=			
ANR	806860	Identifier	n		806765	0					
ANR	806861	PostIncDecOperationExpression	nums_used ++		806765	1					
ANR	806862	Identifier	nums_used		806765	0					
ANR	806863	IncDec	++		806765	1					
ANR	806864	ExpressionStatement	nums [ n ] . numerator = num	762:4:19566:19589	806765	4	True				
ANR	806865	AssignmentExpression	nums [ n ] . numerator = num		806765	0		=			
ANR	806866	MemberAccess	nums [ n ] . numerator		806765	0					
ANR	806867	ArrayIndexing	nums [ n ]		806765	0					
ANR	806868	Identifier	nums		806765	0					
ANR	806869	Identifier	n		806765	1					
ANR	806870	Identifier	numerator		806765	1					
ANR	806871	Identifier	num		806765	1					
ANR	806872	ExpressionStatement	nums [ n ] . denominator = denom	763:4:19595:19622	806765	5	True				
ANR	806873	AssignmentExpression	nums [ n ] . denominator = denom		806765	0		=			
ANR	806874	MemberAccess	nums [ n ] . denominator		806765	0					
ANR	806875	ArrayIndexing	nums [ n ]		806765	0					
ANR	806876	Identifier	nums		806765	0					
ANR	806877	Identifier	n		806765	1					
ANR	806878	Identifier	denominator		806765	1					
ANR	806879	Identifier	denom		806765	1					
ANR	806880	ReturnStatement	return n << 1 ;	765:4:19629:19642	806765	6	True				
ANR	806881	ShiftExpression	n << 1		806765	0		<<			
ANR	806882	Identifier	n		806765	0					
ANR	806883	PrimaryExpression	1		806765	1					
ANR	806884	ReturnType	static ac_uint4		806765	1					
ANR	806885	Identifier	make_number		806765	2					
ANR	806886	ParameterList	"short num , short denom"		806765	3					
ANR	806887	Parameter	short num	740:12:19011:19019	806765	0	True				
ANR	806888	ParameterType	short		806765	0					
ANR	806889	Identifier	num		806765	1					
ANR	806890	Parameter	short denom	740:23:19022:19032	806765	1	True				
ANR	806891	ParameterType	short		806765	0					
ANR	806892	Identifier	denom		806765	1					
ANR	806893	CFGEntryNode	ENTRY		806765		True				
ANR	806894	CFGExitNode	EXIT		806765		True				
ANR	806895	Symbol	* nums		806765						
ANR	806896	Symbol	nums [ n ] . denominator		806765						
ANR	806897	Symbol	malloc		806765						
ANR	806898	Symbol	nums_size		806765						
ANR	806899	Symbol	num		806765						
ANR	806900	Symbol	nums_used		806765						
ANR	806901	Symbol	* n		806765						
ANR	806902	Symbol	denom		806765						
ANR	806903	Symbol	realloc		806765						
ANR	806904	Symbol	n		806765						
ANR	806905	Symbol	nums		806765						
ANR	806906	Symbol	nums [ n ] . numerator		806765						
ANR	806907	Function	add_number	768:0:19647:20789							
ANR	806908	FunctionDef	"add_number (ac_uint4 code , short num , short denom)"		806907	0					
ANR	806909	CompoundStatement		770:0:19709:20789	806907	0					
ANR	806910	IdentifierDeclStatement	"ac_uint4 i , j ;"	771:4:19715:19728	806907	0	True				
ANR	806911	IdentifierDecl	i		806907	0					
ANR	806912	IdentifierDeclType	ac_uint4		806907	0					
ANR	806913	Identifier	i		806907	1					
ANR	806914	IdentifierDecl	j		806907	1					
ANR	806915	IdentifierDeclType	ac_uint4		806907	0					
ANR	806916	Identifier	j		806907	1					
ANR	806917	ForStatement	for ( i = 0 ; i < ncodes_used && code > ncodes [ i ] . code ; i ++ )		806907	1					
ANR	806918	ForInit	i = 0 ;	776:9:19788:19793	806907	0	True				
ANR	806919	AssignmentExpression	i = 0		806907	0		=			
ANR	806920	Identifier	i		806907	0					
ANR	806921	PrimaryExpression	0		806907	1					
ANR	806922	Condition	i < ncodes_used && code > ncodes [ i ] . code	776:16:19795:19834	806907	1	True				
ANR	806923	AndExpression	i < ncodes_used && code > ncodes [ i ] . code		806907	0		&&			
ANR	806924	RelationalExpression	i < ncodes_used		806907	0		<			
ANR	806925	Identifier	i		806907	0					
ANR	806926	Identifier	ncodes_used		806907	1					
ANR	806927	RelationalExpression	code > ncodes [ i ] . code		806907	1		>			
ANR	806928	Identifier	code		806907	0					
ANR	806929	MemberAccess	ncodes [ i ] . code		806907	1					
ANR	806930	ArrayIndexing	ncodes [ i ]		806907	0					
ANR	806931	Identifier	ncodes		806907	0					
ANR	806932	Identifier	i		806907	1					
ANR	806933	Identifier	code		806907	1					
ANR	806934	PostIncDecOperationExpression	i ++	776:58:19837:19839	806907	2	True				
ANR	806935	Identifier	i		806907	0					
ANR	806936	IncDec	++		806907	1					
ANR	806937	ExpressionStatement		776:63:19842:19842	806907	3	True				
ANR	806938	IfStatement	if ( i < ncodes_used && code == ncodes [ i ] . code )		806907	2					
ANR	806939	Condition	i < ncodes_used && code == ncodes [ i ] . code	782:8:19973:20013	806907	0	True				
ANR	806940	AndExpression	i < ncodes_used && code == ncodes [ i ] . code		806907	0		&&			
ANR	806941	RelationalExpression	i < ncodes_used		806907	0		<			
ANR	806942	Identifier	i		806907	0					
ANR	806943	Identifier	ncodes_used		806907	1					
ANR	806944	EqualityExpression	code == ncodes [ i ] . code		806907	1		==			
ANR	806945	Identifier	code		806907	0					
ANR	806946	MemberAccess	ncodes [ i ] . code		806907	1					
ANR	806947	ArrayIndexing	ncodes [ i ]		806907	0					
ANR	806948	Identifier	ncodes		806907	0					
ANR	806949	Identifier	i		806907	1					
ANR	806950	Identifier	code		806907	1					
ANR	806951	CompoundStatement		13:51:306:306	806907	1					
ANR	806952	ExpressionStatement	"ncodes [ i ] . idx = make_number ( num , denom )"	783:8:20026:20065	806907	0	True				
ANR	806953	AssignmentExpression	"ncodes [ i ] . idx = make_number ( num , denom )"		806907	0		=			
ANR	806954	MemberAccess	ncodes [ i ] . idx		806907	0					
ANR	806955	ArrayIndexing	ncodes [ i ]		806907	0					
ANR	806956	Identifier	ncodes		806907	0					
ANR	806957	Identifier	i		806907	1					
ANR	806958	Identifier	idx		806907	1					
ANR	806959	CallExpression	"make_number ( num , denom )"		806907	1					
ANR	806960	Callee	make_number		806907	0					
ANR	806961	Identifier	make_number		806907	0					
ANR	806962	ArgumentList	num		806907	1					
ANR	806963	Argument	num		806907	0					
ANR	806964	Identifier	num		806907	0					
ANR	806965	Argument	denom		806907	1					
ANR	806966	Identifier	denom		806907	0					
ANR	806967	ReturnStatement	return ;	784:8:20075:20081	806907	1	True				
ANR	806968	IfStatement	if ( ncodes_used == ncodes_size )		806907	3					
ANR	806969	Condition	ncodes_used == ncodes_size	790:8:20151:20176	806907	0	True				
ANR	806970	EqualityExpression	ncodes_used == ncodes_size		806907	0		==			
ANR	806971	Identifier	ncodes_used		806907	0					
ANR	806972	Identifier	ncodes_size		806907	1					
ANR	806973	CompoundStatement		21:36:469:469	806907	1					
ANR	806974	IfStatement	if ( ncodes_size == 0 )		806907	0					
ANR	806975	Condition	ncodes_size == 0	791:12:20193:20208	806907	0	True				
ANR	806976	EqualityExpression	ncodes_size == 0		806907	0		==			
ANR	806977	Identifier	ncodes_size		806907	0					
ANR	806978	PrimaryExpression	0		806907	1					
ANR	806979	ExpressionStatement	ncodes = ( _codeidx_t * ) malloc ( sizeof ( _codeidx_t ) << 3 )	792:10:20221:20276	806907	1	True				
ANR	806980	AssignmentExpression	ncodes = ( _codeidx_t * ) malloc ( sizeof ( _codeidx_t ) << 3 )		806907	0		=			
ANR	806981	Identifier	ncodes		806907	0					
ANR	806982	CastExpression	( _codeidx_t * ) malloc ( sizeof ( _codeidx_t ) << 3 )		806907	1					
ANR	806983	CastTarget	_codeidx_t *		806907	0					
ANR	806984	CallExpression	malloc ( sizeof ( _codeidx_t ) << 3 )		806907	1					
ANR	806985	Callee	malloc		806907	0					
ANR	806986	Identifier	malloc		806907	0					
ANR	806987	ArgumentList	sizeof ( _codeidx_t ) << 3		806907	1					
ANR	806988	Argument	sizeof ( _codeidx_t ) << 3		806907	0					
ANR	806989	ShiftExpression	sizeof ( _codeidx_t ) << 3		806907	0		<<			
ANR	806990	SizeofExpression	sizeof ( _codeidx_t )		806907	0					
ANR	806991	Sizeof	sizeof		806907	0					
ANR	806992	SizeofOperand	_codeidx_t		806907	1					
ANR	806993	PrimaryExpression	3		806907	1					
ANR	806994	ElseStatement	else		806907	0					
ANR	806995	ExpressionStatement	"ncodes = ( _codeidx_t * ) realloc ( ( char * ) ncodes , sizeof ( _codeidx_t ) * ( ncodes_size + 8 ) )"	794:10:20301:20403	806907	0	True				
ANR	806996	AssignmentExpression	"ncodes = ( _codeidx_t * ) realloc ( ( char * ) ncodes , sizeof ( _codeidx_t ) * ( ncodes_size + 8 ) )"		806907	0		=			
ANR	806997	Identifier	ncodes		806907	0					
ANR	806998	CastExpression	"( _codeidx_t * ) realloc ( ( char * ) ncodes , sizeof ( _codeidx_t ) * ( ncodes_size + 8 ) )"		806907	1					
ANR	806999	CastTarget	_codeidx_t *		806907	0					
ANR	807000	CallExpression	"realloc ( ( char * ) ncodes , sizeof ( _codeidx_t ) * ( ncodes_size + 8 ) )"		806907	1					
ANR	807001	Callee	realloc		806907	0					
ANR	807002	Identifier	realloc		806907	0					
ANR	807003	ArgumentList	( char * ) ncodes		806907	1					
ANR	807004	Argument	( char * ) ncodes		806907	0					
ANR	807005	CastExpression	( char * ) ncodes		806907	0					
ANR	807006	CastTarget	char *		806907	0					
ANR	807007	Identifier	ncodes		806907	1					
ANR	807008	Argument	sizeof ( _codeidx_t ) * ( ncodes_size + 8 )		806907	1					
ANR	807009	MultiplicativeExpression	sizeof ( _codeidx_t ) * ( ncodes_size + 8 )		806907	0		*			
ANR	807010	SizeofExpression	sizeof ( _codeidx_t )		806907	0					
ANR	807011	Sizeof	sizeof		806907	0					
ANR	807012	SizeofOperand	_codeidx_t		806907	1					
ANR	807013	AdditiveExpression	ncodes_size + 8		806907	1		+			
ANR	807014	Identifier	ncodes_size		806907	0					
ANR	807015	PrimaryExpression	8		806907	1					
ANR	807016	ExpressionStatement	ncodes_size += 8	797:8:20414:20430	806907	1	True				
ANR	807017	AssignmentExpression	ncodes_size += 8		806907	0		+=			
ANR	807018	Identifier	ncodes_size		806907	0					
ANR	807019	PrimaryExpression	8		806907	1					
ANR	807020	IfStatement	if ( i < ncodes_used )		806907	4					
ANR	807021	Condition	i < ncodes_used	803:8:20522:20536	806907	0	True				
ANR	807022	RelationalExpression	i < ncodes_used		806907	0		<			
ANR	807023	Identifier	i		806907	0					
ANR	807024	Identifier	ncodes_used		806907	1					
ANR	807025	CompoundStatement		34:25:829:829	806907	1					
ANR	807026	ForStatement	for ( j = ncodes_used ; j > i ; j -- )		806907	0					
ANR	807027	ForInit	j = ncodes_used ;	804:13:20554:20569	806907	0	True				
ANR	807028	AssignmentExpression	j = ncodes_used		806907	0		=			
ANR	807029	Identifier	j		806907	0					
ANR	807030	Identifier	ncodes_used		806907	1					
ANR	807031	Condition	j > i	804:30:20571:20575	806907	1	True				
ANR	807032	RelationalExpression	j > i		806907	0		>			
ANR	807033	Identifier	j		806907	0					
ANR	807034	Identifier	i		806907	1					
ANR	807035	PostIncDecOperationExpression	j --	804:37:20578:20580	806907	2	True				
ANR	807036	Identifier	j		806907	0					
ANR	807037	IncDec	--		806907	1					
ANR	807038	CompoundStatement		35:42:873:873	806907	3					
ANR	807039	ExpressionStatement	ncodes [ j ] . code = ncodes [ j - 1 ] . code	805:12:20597:20632	806907	0	True				
ANR	807040	AssignmentExpression	ncodes [ j ] . code = ncodes [ j - 1 ] . code		806907	0		=			
ANR	807041	MemberAccess	ncodes [ j ] . code		806907	0					
ANR	807042	ArrayIndexing	ncodes [ j ]		806907	0					
ANR	807043	Identifier	ncodes		806907	0					
ANR	807044	Identifier	j		806907	1					
ANR	807045	Identifier	code		806907	1					
ANR	807046	MemberAccess	ncodes [ j - 1 ] . code		806907	1					
ANR	807047	ArrayIndexing	ncodes [ j - 1 ]		806907	0					
ANR	807048	Identifier	ncodes		806907	0					
ANR	807049	AdditiveExpression	j - 1		806907	1		-			
ANR	807050	Identifier	j		806907	0					
ANR	807051	PrimaryExpression	1		806907	1					
ANR	807052	Identifier	code		806907	1					
ANR	807053	ExpressionStatement	ncodes [ j ] . idx = ncodes [ j - 1 ] . idx	806:12:20646:20679	806907	1	True				
ANR	807054	AssignmentExpression	ncodes [ j ] . idx = ncodes [ j - 1 ] . idx		806907	0		=			
ANR	807055	MemberAccess	ncodes [ j ] . idx		806907	0					
ANR	807056	ArrayIndexing	ncodes [ j ]		806907	0					
ANR	807057	Identifier	ncodes		806907	0					
ANR	807058	Identifier	j		806907	1					
ANR	807059	Identifier	idx		806907	1					
ANR	807060	MemberAccess	ncodes [ j - 1 ] . idx		806907	1					
ANR	807061	ArrayIndexing	ncodes [ j - 1 ]		806907	0					
ANR	807062	Identifier	ncodes		806907	0					
ANR	807063	AdditiveExpression	j - 1		806907	1		-			
ANR	807064	Identifier	j		806907	0					
ANR	807065	PrimaryExpression	1		806907	1					
ANR	807066	Identifier	idx		806907	1					
ANR	807067	ExpressionStatement	ncodes [ i ] . code = code	809:4:20701:20722	806907	5	True				
ANR	807068	AssignmentExpression	ncodes [ i ] . code = code		806907	0		=			
ANR	807069	MemberAccess	ncodes [ i ] . code		806907	0					
ANR	807070	ArrayIndexing	ncodes [ i ]		806907	0					
ANR	807071	Identifier	ncodes		806907	0					
ANR	807072	Identifier	i		806907	1					
ANR	807073	Identifier	code		806907	1					
ANR	807074	Identifier	code		806907	1					
ANR	807075	ExpressionStatement	"ncodes [ i ] . idx = make_number ( num , denom )"	810:4:20728:20767	806907	6	True				
ANR	807076	AssignmentExpression	"ncodes [ i ] . idx = make_number ( num , denom )"		806907	0		=			
ANR	807077	MemberAccess	ncodes [ i ] . idx		806907	0					
ANR	807078	ArrayIndexing	ncodes [ i ]		806907	0					
ANR	807079	Identifier	ncodes		806907	0					
ANR	807080	Identifier	i		806907	1					
ANR	807081	Identifier	idx		806907	1					
ANR	807082	CallExpression	"make_number ( num , denom )"		806907	1					
ANR	807083	Callee	make_number		806907	0					
ANR	807084	Identifier	make_number		806907	0					
ANR	807085	ArgumentList	num		806907	1					
ANR	807086	Argument	num		806907	0					
ANR	807087	Identifier	num		806907	0					
ANR	807088	Argument	denom		806907	1					
ANR	807089	Identifier	denom		806907	0					
ANR	807090	ExpressionStatement	ncodes_used ++	812:4:20774:20787	806907	7	True				
ANR	807091	PostIncDecOperationExpression	ncodes_used ++		806907	0					
ANR	807092	Identifier	ncodes_used		806907	0					
ANR	807093	IncDec	++		806907	1					
ANR	807094	ReturnType	static void		806907	1					
ANR	807095	Identifier	add_number		806907	2					
ANR	807096	ParameterList	"ac_uint4 code , short num , short denom"		806907	3					
ANR	807097	Parameter	ac_uint4 code	769:11:19670:19682	806907	0	True				
ANR	807098	ParameterType	ac_uint4		806907	0					
ANR	807099	Identifier	code		806907	1					
ANR	807100	Parameter	short num	769:26:19685:19693	806907	1	True				
ANR	807101	ParameterType	short		806907	0					
ANR	807102	Identifier	num		806907	1					
ANR	807103	Parameter	short denom	769:37:19696:19706	806907	2	True				
ANR	807104	ParameterType	short		806907	0					
ANR	807105	Identifier	denom		806907	1					
ANR	807106	CFGEntryNode	ENTRY		806907		True				
ANR	807107	CFGExitNode	EXIT		806907		True				
ANR	807108	Symbol	malloc		806907						
ANR	807109	Symbol	ncodes [ i ] . code		806907						
ANR	807110	Symbol	code		806907						
ANR	807111	Symbol	ncodes		806907						
ANR	807112	Symbol	num		806907						
ANR	807113	Symbol	ncodes [ j ] . code		806907						
ANR	807114	Symbol	i		806907						
ANR	807115	Symbol	ncodes [ i ] . idx		806907						
ANR	807116	Symbol	j		806907						
ANR	807117	Symbol	realloc		806907						
ANR	807118	Symbol	* i		806907						
ANR	807119	Symbol	* j		806907						
ANR	807120	Symbol	ncodes_used		806907						
ANR	807121	Symbol	make_number		806907						
ANR	807122	Symbol	ncodes [ j - 1 ] . idx		806907						
ANR	807123	Symbol	ncodes [ j ] . idx		806907						
ANR	807124	Symbol	ncodes_size		806907						
ANR	807125	Symbol	* ncodes		806907						
ANR	807126	Symbol	ncodes [ j - 1 ] . code		806907						
ANR	807127	Symbol	denom		806907						
ANR	807128	Function	read_cdata	819:0:20885:29135							
ANR	807129	FunctionDef	read_cdata (FILE * in)		807128	0					
ANR	807130	CompoundStatement		821:0:20918:29135	807128	0					
ANR	807131	IdentifierDeclStatement	"ac_uint4 i , lineno , skip , code , ccl_code ;"	822:4:20924:20964	807128	0	True				
ANR	807132	IdentifierDecl	i		807128	0					
ANR	807133	IdentifierDeclType	ac_uint4		807128	0					
ANR	807134	Identifier	i		807128	1					
ANR	807135	IdentifierDecl	lineno		807128	1					
ANR	807136	IdentifierDeclType	ac_uint4		807128	0					
ANR	807137	Identifier	lineno		807128	1					
ANR	807138	IdentifierDecl	skip		807128	2					
ANR	807139	IdentifierDeclType	ac_uint4		807128	0					
ANR	807140	Identifier	skip		807128	1					
ANR	807141	IdentifierDecl	code		807128	3					
ANR	807142	IdentifierDeclType	ac_uint4		807128	0					
ANR	807143	Identifier	code		807128	1					
ANR	807144	IdentifierDecl	ccl_code		807128	4					
ANR	807145	IdentifierDeclType	ac_uint4		807128	0					
ANR	807146	Identifier	ccl_code		807128	1					
ANR	807147	IdentifierDeclStatement	"short wnum , neg , number [ 2 ] , compat ;"	823:4:20970:21004	807128	1	True				
ANR	807148	IdentifierDecl	wnum		807128	0					
ANR	807149	IdentifierDeclType	short		807128	0					
ANR	807150	Identifier	wnum		807128	1					
ANR	807151	IdentifierDecl	neg		807128	1					
ANR	807152	IdentifierDeclType	short		807128	0					
ANR	807153	Identifier	neg		807128	1					
ANR	807154	IdentifierDecl	number [ 2 ]		807128	2					
ANR	807155	IdentifierDeclType	short [ 2 ]		807128	0					
ANR	807156	Identifier	number		807128	1					
ANR	807157	PrimaryExpression	2		807128	2					
ANR	807158	IdentifierDecl	compat		807128	3					
ANR	807159	IdentifierDeclType	short		807128	0					
ANR	807160	Identifier	compat		807128	1					
ANR	807161	IdentifierDeclStatement	"char line [ 512 ] , * s , * e ;"	824:4:21010:21032	807128	2	True				
ANR	807162	IdentifierDecl	line [ 512 ]		807128	0					
ANR	807163	IdentifierDeclType	char [ 512 ]		807128	0					
ANR	807164	Identifier	line		807128	1					
ANR	807165	PrimaryExpression	512		807128	2					
ANR	807166	IdentifierDecl	* s		807128	1					
ANR	807167	IdentifierDeclType	char *		807128	0					
ANR	807168	Identifier	s		807128	1					
ANR	807169	IdentifierDecl	* e		807128	2					
ANR	807170	IdentifierDeclType	char *		807128	0					
ANR	807171	Identifier	e		807128	1					
ANR	807172	ExpressionStatement	lineno = skip = 0	826:4:21039:21056	807128	3	True				
ANR	807173	AssignmentExpression	lineno = skip = 0		807128	0		=			
ANR	807174	Identifier	lineno		807128	0					
ANR	807175	AssignmentExpression	skip = 0		807128	1		=			
ANR	807176	Identifier	skip		807128	0					
ANR	807177	PrimaryExpression	0		807128	1					
ANR	807178	WhileStatement	"while ( fgets ( line , sizeof ( line ) , in ) )"		807128	4					
ANR	807179	Condition	"fgets ( line , sizeof ( line ) , in )"	827:11:21069:21097	807128	0	True				
ANR	807180	CallExpression	"fgets ( line , sizeof ( line ) , in )"		807128	0					
ANR	807181	Callee	fgets		807128	0					
ANR	807182	Identifier	fgets		807128	0					
ANR	807183	ArgumentList	line		807128	1					
ANR	807184	Argument	line		807128	0					
ANR	807185	Identifier	line		807128	0					
ANR	807186	Argument	sizeof ( line )		807128	1					
ANR	807187	SizeofExpression	sizeof ( line )		807128	0					
ANR	807188	Sizeof	sizeof		807128	0					
ANR	807189	SizeofOperand	line		807128	1					
ANR	807190	Argument	in		807128	2					
ANR	807191	Identifier	in		807128	0					
ANR	807192	CompoundStatement		7:42:181:181	807128	1					
ANR	807193	IfStatement	"if ( ( s = strchr ( line , '\\n' ) ) )"		807128	0					
ANR	807194	Condition	"s = strchr ( line , '\\n' )"	828:5:21107:21128	807128	0	True				
ANR	807195	AssignmentExpression	"s = strchr ( line , '\\n' )"		807128	0		=			
ANR	807196	Identifier	s		807128	0					
ANR	807197	CallExpression	"strchr ( line , '\\n' )"		807128	1					
ANR	807198	Callee	strchr		807128	0					
ANR	807199	Identifier	strchr		807128	0					
ANR	807200	ArgumentList	line		807128	1					
ANR	807201	Argument	line		807128	0					
ANR	807202	Identifier	line		807128	0					
ANR	807203	Argument	'\\n'		807128	1					
ANR	807204	PrimaryExpression	'\\n'		807128	0					
ANR	807205	ExpressionStatement	* s = '\\0'	828:30:21132:21141	807128	1	True				
ANR	807206	AssignmentExpression	* s = '\\0'		807128	0		=			
ANR	807207	UnaryOperationExpression	* s		807128	0					
ANR	807208	UnaryOperator	*		807128	0					
ANR	807209	Identifier	s		807128	1					
ANR	807210	PrimaryExpression	'\\0'		807128	1					
ANR	807211	ExpressionStatement	lineno ++	829:8:21151:21159	807128	1	True				
ANR	807212	PostIncDecOperationExpression	lineno ++		807128	0					
ANR	807213	Identifier	lineno		807128	0					
ANR	807214	IncDec	++		807128	1					
ANR	807215	IfStatement	if ( line [ 0 ] == 0 || line [ 0 ] == '#' )		807128	2					
ANR	807216	Condition	line [ 0 ] == 0 || line [ 0 ] == '#'	834:12:21258:21287	807128	0	True				
ANR	807217	OrExpression	line [ 0 ] == 0 || line [ 0 ] == '#'		807128	0		||			
ANR	807218	EqualityExpression	line [ 0 ] == 0		807128	0		==			
ANR	807219	ArrayIndexing	line [ 0 ]		807128	0					
ANR	807220	Identifier	line		807128	0					
ANR	807221	PrimaryExpression	0		807128	1					
ANR	807222	PrimaryExpression	0		807128	1					
ANR	807223	EqualityExpression	line [ 0 ] == '#'		807128	1		==			
ANR	807224	ArrayIndexing	line [ 0 ]		807128	0					
ANR	807225	Identifier	line		807128	0					
ANR	807226	PrimaryExpression	0		807128	1					
ANR	807227	PrimaryExpression	'#'		807128	1					
ANR	807228	ContinueStatement	continue ;	835:10:21300:21308	807128	1	True				
ANR	807229	IfStatement	if ( skip )		807128	3					
ANR	807230	Condition	skip	840:12:21398:21401	807128	0	True				
ANR	807231	Identifier	skip		807128	0					
ANR	807232	CompoundStatement		20:18:485:485	807128	1					
ANR	807233	ExpressionStatement	skip --	841:12:21418:21424	807128	0	True				
ANR	807234	PostIncDecOperationExpression	skip --		807128	0					
ANR	807235	Identifier	skip		807128	0					
ANR	807236	IncDec	--		807128	1					
ANR	807237	ContinueStatement	continue ;	842:12:21438:21446	807128	1	True				
ANR	807238	ForStatement	"for ( s = line , i = code = 0 ; * s != ';' && i < 6 ; i ++ , s ++ )"		807128	4					
ANR	807239	ForInit	"s = line , i = code = 0 ;"	849:13:21618:21640	807128	0	True				
ANR	807240	Expression	"s = line , i = code = 0"		807128	0					
ANR	807241	AssignmentExpression	s = line		807128	0		=			
ANR	807242	Identifier	s		807128	0					
ANR	807243	Identifier	line		807128	1					
ANR	807244	AssignmentExpression	i = code = 0		807128	1		=			
ANR	807245	Identifier	i		807128	0					
ANR	807246	AssignmentExpression	code = 0		807128	1		=			
ANR	807247	Identifier	code		807128	0					
ANR	807248	PrimaryExpression	0		807128	1					
ANR	807249	Condition	* s != ';' && i < 6	849:37:21642:21659	807128	1	True				
ANR	807250	AndExpression	* s != ';' && i < 6		807128	0		&&			
ANR	807251	EqualityExpression	* s != ';'		807128	0		!=			
ANR	807252	UnaryOperationExpression	* s		807128	0					
ANR	807253	UnaryOperator	*		807128	0					
ANR	807254	Identifier	s		807128	1					
ANR	807255	PrimaryExpression	';'		807128	1					
ANR	807256	RelationalExpression	i < 6		807128	1		<			
ANR	807257	Identifier	i		807128	0					
ANR	807258	PrimaryExpression	6		807128	1					
ANR	807259	Expression	"i ++ , s ++"	849:57:21662:21669	807128	2	True				
ANR	807260	PostIncDecOperationExpression	i ++		807128	0					
ANR	807261	Identifier	i		807128	0					
ANR	807262	IncDec	++		807128	1					
ANR	807263	PostIncDecOperationExpression	s ++		807128	1					
ANR	807264	Identifier	s		807128	0					
ANR	807265	IncDec	++		807128	1					
ANR	807266	CompoundStatement		29:67:753:753	807128	3					
ANR	807267	ExpressionStatement	code <<= 4	850:12:21686:21696	807128	0	True				
ANR	807268	AssignmentExpression	code <<= 4		807128	0		<<=			
ANR	807269	Identifier	code		807128	0					
ANR	807270	PrimaryExpression	4		807128	1					
ANR	807271	IfStatement	if ( * s >= '0' && * s <= '9' )		807128	1					
ANR	807272	Condition	* s >= '0' && * s <= '9'	851:16:21714:21735	807128	0	True				
ANR	807273	AndExpression	* s >= '0' && * s <= '9'		807128	0		&&			
ANR	807274	RelationalExpression	* s >= '0'		807128	0		>=			
ANR	807275	UnaryOperationExpression	* s		807128	0					
ANR	807276	UnaryOperator	*		807128	0					
ANR	807277	Identifier	s		807128	1					
ANR	807278	PrimaryExpression	'0'		807128	1					
ANR	807279	RelationalExpression	* s <= '9'		807128	1		<=			
ANR	807280	UnaryOperationExpression	* s		807128	0					
ANR	807281	UnaryOperator	*		807128	0					
ANR	807282	Identifier	s		807128	1					
ANR	807283	PrimaryExpression	'9'		807128	1					
ANR	807284	ExpressionStatement	code += * s - '0'	852:14:21752:21768	807128	1	True				
ANR	807285	AssignmentExpression	code += * s - '0'		807128	0		+=			
ANR	807286	Identifier	code		807128	0					
ANR	807287	AdditiveExpression	* s - '0'		807128	1		-			
ANR	807288	UnaryOperationExpression	* s		807128	0					
ANR	807289	UnaryOperator	*		807128	0					
ANR	807290	Identifier	s		807128	1					
ANR	807291	PrimaryExpression	'0'		807128	1					
ANR	807292	ElseStatement	else		807128	0					
ANR	807293	IfStatement	if ( * s >= 'A' && * s <= 'F' )		807128	0					
ANR	807294	Condition	* s >= 'A' && * s <= 'F'	853:21:21791:21812	807128	0	True				
ANR	807295	AndExpression	* s >= 'A' && * s <= 'F'		807128	0		&&			
ANR	807296	RelationalExpression	* s >= 'A'		807128	0		>=			
ANR	807297	UnaryOperationExpression	* s		807128	0					
ANR	807298	UnaryOperator	*		807128	0					
ANR	807299	Identifier	s		807128	1					
ANR	807300	PrimaryExpression	'A'		807128	1					
ANR	807301	RelationalExpression	* s <= 'F'		807128	1		<=			
ANR	807302	UnaryOperationExpression	* s		807128	0					
ANR	807303	UnaryOperator	*		807128	0					
ANR	807304	Identifier	s		807128	1					
ANR	807305	PrimaryExpression	'F'		807128	1					
ANR	807306	ExpressionStatement	code += ( * s - 'A' ) + 10	854:14:21829:21852	807128	1	True				
ANR	807307	AssignmentExpression	code += ( * s - 'A' ) + 10		807128	0		+=			
ANR	807308	Identifier	code		807128	0					
ANR	807309	AdditiveExpression	( * s - 'A' ) + 10		807128	1		+			
ANR	807310	AdditiveExpression	* s - 'A'		807128	0		-			
ANR	807311	UnaryOperationExpression	* s		807128	0					
ANR	807312	UnaryOperator	*		807128	0					
ANR	807313	Identifier	s		807128	1					
ANR	807314	PrimaryExpression	'A'		807128	1					
ANR	807315	PrimaryExpression	10		807128	1					
ANR	807316	ElseStatement	else		807128	0					
ANR	807317	IfStatement	if ( * s >= 'a' && * s <= 'f' )		807128	0					
ANR	807318	Condition	* s >= 'a' && * s <= 'f'	855:21:21875:21896	807128	0	True				
ANR	807319	AndExpression	* s >= 'a' && * s <= 'f'		807128	0		&&			
ANR	807320	RelationalExpression	* s >= 'a'		807128	0		>=			
ANR	807321	UnaryOperationExpression	* s		807128	0					
ANR	807322	UnaryOperator	*		807128	0					
ANR	807323	Identifier	s		807128	1					
ANR	807324	PrimaryExpression	'a'		807128	1					
ANR	807325	RelationalExpression	* s <= 'f'		807128	1		<=			
ANR	807326	UnaryOperationExpression	* s		807128	0					
ANR	807327	UnaryOperator	*		807128	0					
ANR	807328	Identifier	s		807128	1					
ANR	807329	PrimaryExpression	'f'		807128	1					
ANR	807330	ExpressionStatement	code += ( * s - 'a' ) + 10	856:14:21913:21936	807128	1	True				
ANR	807331	AssignmentExpression	code += ( * s - 'a' ) + 10		807128	0		+=			
ANR	807332	Identifier	code		807128	0					
ANR	807333	AdditiveExpression	( * s - 'a' ) + 10		807128	1		+			
ANR	807334	AdditiveExpression	* s - 'a'		807128	0		-			
ANR	807335	UnaryOperationExpression	* s		807128	0					
ANR	807336	UnaryOperator	*		807128	0					
ANR	807337	Identifier	s		807128	1					
ANR	807338	PrimaryExpression	'a'		807128	1					
ANR	807339	PrimaryExpression	10		807128	1					
ANR	807340	SwitchStatement	switch ( code )		807128	5					
ANR	807341	Condition	code	868:16:22297:22300	807128	0	True				
ANR	807342	Identifier	code		807128	0					
ANR	807343	CompoundStatement		48:22:1384:1384	807128	1					
ANR	807344	Label	case 0x3400 :	869:3:22308:22319	807128	0	True				
ANR	807345	ExpressionStatement	"add_range ( 0x3400 , 0x4db5 , ""Lo"" , ""L"" )"	871:12:22370:22406	807128	1	True				
ANR	807346	CallExpression	"add_range ( 0x3400 , 0x4db5 , ""Lo"" , ""L"" )"		807128	0					
ANR	807347	Callee	add_range		807128	0					
ANR	807348	Identifier	add_range		807128	0					
ANR	807349	ArgumentList	0x3400		807128	1					
ANR	807350	Argument	0x3400		807128	0					
ANR	807351	PrimaryExpression	0x3400		807128	0					
ANR	807352	Argument	0x4db5		807128	1					
ANR	807353	PrimaryExpression	0x4db5		807128	0					
ANR	807354	Argument	"""Lo"""		807128	2					
ANR	807355	PrimaryExpression	"""Lo"""		807128	0					
ANR	807356	Argument	"""L"""		807128	3					
ANR	807357	PrimaryExpression	"""L"""		807128	0					
ANR	807358	ExpressionStatement	"add_range ( 0x3400 , 0x4db5 , ""Cp"" , 0 )"	873:12:22421:22455	807128	2	True				
ANR	807359	CallExpression	"add_range ( 0x3400 , 0x4db5 , ""Cp"" , 0 )"		807128	0					
ANR	807360	Callee	add_range		807128	0					
ANR	807361	Identifier	add_range		807128	0					
ANR	807362	ArgumentList	0x3400		807128	1					
ANR	807363	Argument	0x3400		807128	0					
ANR	807364	PrimaryExpression	0x3400		807128	0					
ANR	807365	Argument	0x4db5		807128	1					
ANR	807366	PrimaryExpression	0x4db5		807128	0					
ANR	807367	Argument	"""Cp"""		807128	2					
ANR	807368	PrimaryExpression	"""Cp"""		807128	0					
ANR	807369	Argument	0		807128	3					
ANR	807370	PrimaryExpression	0		807128	0					
ANR	807371	ExpressionStatement	skip = 1	875:5:22463:22471	807128	3	True				
ANR	807372	AssignmentExpression	skip = 1		807128	0		=			
ANR	807373	Identifier	skip		807128	0					
ANR	807374	PrimaryExpression	1		807128	1					
ANR	807375	BreakStatement	break ;	876:5:22478:22483	807128	4	True				
ANR	807376	Label	case 0x4e00 :	877:10:22495:22506	807128	5	True				
ANR	807377	ExpressionStatement	"add_range ( 0x4e00 , 0x9fff , ""Lo"" , ""L"" )"	881:12:22586:22622	807128	6	True				
ANR	807378	CallExpression	"add_range ( 0x4e00 , 0x9fff , ""Lo"" , ""L"" )"		807128	0					
ANR	807379	Callee	add_range		807128	0					
ANR	807380	Identifier	add_range		807128	0					
ANR	807381	ArgumentList	0x4e00		807128	1					
ANR	807382	Argument	0x4e00		807128	0					
ANR	807383	PrimaryExpression	0x4e00		807128	0					
ANR	807384	Argument	0x9fff		807128	1					
ANR	807385	PrimaryExpression	0x9fff		807128	0					
ANR	807386	Argument	"""Lo"""		807128	2					
ANR	807387	PrimaryExpression	"""Lo"""		807128	0					
ANR	807388	Argument	"""L"""		807128	3					
ANR	807389	PrimaryExpression	"""L"""		807128	0					
ANR	807390	ExpressionStatement	"add_range ( 0x4e00 , 0x9fa5 , ""Cp"" , 0 )"	886:12:22727:22761	807128	7	True				
ANR	807391	CallExpression	"add_range ( 0x4e00 , 0x9fa5 , ""Cp"" , 0 )"		807128	0					
ANR	807392	Callee	add_range		807128	0					
ANR	807393	Identifier	add_range		807128	0					
ANR	807394	ArgumentList	0x4e00		807128	1					
ANR	807395	Argument	0x4e00		807128	0					
ANR	807396	PrimaryExpression	0x4e00		807128	0					
ANR	807397	Argument	0x9fa5		807128	1					
ANR	807398	PrimaryExpression	0x9fa5		807128	0					
ANR	807399	Argument	"""Cp"""		807128	2					
ANR	807400	PrimaryExpression	"""Cp"""		807128	0					
ANR	807401	Argument	0		807128	3					
ANR	807402	PrimaryExpression	0		807128	0					
ANR	807403	ExpressionStatement	skip = 1	888:12:22776:22784	807128	8	True				
ANR	807404	AssignmentExpression	skip = 1		807128	0		=			
ANR	807405	Identifier	skip		807128	0					
ANR	807406	PrimaryExpression	1		807128	1					
ANR	807407	BreakStatement	break ;	889:12:22798:22803	807128	9	True				
ANR	807408	Label	case 0xac00 :	890:10:22815:22826	807128	10	True				
ANR	807409	ExpressionStatement	"add_range ( 0xac00 , 0xd7a3 , ""Lo"" , ""L"" )"	894:12:22908:22944	807128	11	True				
ANR	807410	CallExpression	"add_range ( 0xac00 , 0xd7a3 , ""Lo"" , ""L"" )"		807128	0					
ANR	807411	Callee	add_range		807128	0					
ANR	807412	Identifier	add_range		807128	0					
ANR	807413	ArgumentList	0xac00		807128	1					
ANR	807414	Argument	0xac00		807128	0					
ANR	807415	PrimaryExpression	0xac00		807128	0					
ANR	807416	Argument	0xd7a3		807128	1					
ANR	807417	PrimaryExpression	0xd7a3		807128	0					
ANR	807418	Argument	"""Lo"""		807128	2					
ANR	807419	PrimaryExpression	"""Lo"""		807128	0					
ANR	807420	Argument	"""L"""		807128	3					
ANR	807421	PrimaryExpression	"""L"""		807128	0					
ANR	807422	ExpressionStatement	"add_range ( 0xac00 , 0xd7a3 , ""Cp"" , 0 )"	899:12:23049:23083	807128	12	True				
ANR	807423	CallExpression	"add_range ( 0xac00 , 0xd7a3 , ""Cp"" , 0 )"		807128	0					
ANR	807424	Callee	add_range		807128	0					
ANR	807425	Identifier	add_range		807128	0					
ANR	807426	ArgumentList	0xac00		807128	1					
ANR	807427	Argument	0xac00		807128	0					
ANR	807428	PrimaryExpression	0xac00		807128	0					
ANR	807429	Argument	0xd7a3		807128	1					
ANR	807430	PrimaryExpression	0xd7a3		807128	0					
ANR	807431	Argument	"""Cp"""		807128	2					
ANR	807432	PrimaryExpression	"""Cp"""		807128	0					
ANR	807433	Argument	0		807128	3					
ANR	807434	PrimaryExpression	0		807128	0					
ANR	807435	ExpressionStatement	skip = 1	901:12:23098:23106	807128	13	True				
ANR	807436	AssignmentExpression	skip = 1		807128	0		=			
ANR	807437	Identifier	skip		807128	0					
ANR	807438	PrimaryExpression	1		807128	1					
ANR	807439	BreakStatement	break ;	902:12:23120:23125	807128	14	True				
ANR	807440	Label	case 0xd800 :	903:10:23137:23148	807128	15	True				
ANR	807441	ExpressionStatement	"add_range ( 0x010000 , 0x10ffff , ""Cs"" , ""L"" )"	908:12:23290:23330	807128	16	True				
ANR	807442	CallExpression	"add_range ( 0x010000 , 0x10ffff , ""Cs"" , ""L"" )"		807128	0					
ANR	807443	Callee	add_range		807128	0					
ANR	807444	Identifier	add_range		807128	0					
ANR	807445	ArgumentList	0x010000		807128	1					
ANR	807446	Argument	0x010000		807128	0					
ANR	807447	PrimaryExpression	0x010000		807128	0					
ANR	807448	Argument	0x10ffff		807128	1					
ANR	807449	PrimaryExpression	0x10ffff		807128	0					
ANR	807450	Argument	"""Cs"""		807128	2					
ANR	807451	PrimaryExpression	"""Cs"""		807128	0					
ANR	807452	Argument	"""L"""		807128	3					
ANR	807453	PrimaryExpression	"""L"""		807128	0					
ANR	807454	ExpressionStatement	skip = 5	909:12:23344:23352	807128	17	True				
ANR	807455	AssignmentExpression	skip = 5		807128	0		=			
ANR	807456	Identifier	skip		807128	0					
ANR	807457	PrimaryExpression	5		807128	1					
ANR	807458	BreakStatement	break ;	910:12:23366:23371	807128	18	True				
ANR	807459	Label	case 0xe000 :	911:10:23383:23394	807128	19	True				
ANR	807460	ExpressionStatement	"add_range ( 0xe000 , 0xf8ff , ""Co"" , ""L"" )"	915:12:23515:23551	807128	20	True				
ANR	807461	CallExpression	"add_range ( 0xe000 , 0xf8ff , ""Co"" , ""L"" )"		807128	0					
ANR	807462	Callee	add_range		807128	0					
ANR	807463	Identifier	add_range		807128	0					
ANR	807464	ArgumentList	0xe000		807128	1					
ANR	807465	Argument	0xe000		807128	0					
ANR	807466	PrimaryExpression	0xe000		807128	0					
ANR	807467	Argument	0xf8ff		807128	1					
ANR	807468	PrimaryExpression	0xf8ff		807128	0					
ANR	807469	Argument	"""Co"""		807128	2					
ANR	807470	PrimaryExpression	"""Co"""		807128	0					
ANR	807471	Argument	"""L"""		807128	3					
ANR	807472	PrimaryExpression	"""L"""		807128	0					
ANR	807473	ExpressionStatement	skip = 1	916:12:23565:23573	807128	21	True				
ANR	807474	AssignmentExpression	skip = 1		807128	0		=			
ANR	807475	Identifier	skip		807128	0					
ANR	807476	PrimaryExpression	1		807128	1					
ANR	807477	BreakStatement	break ;	917:12:23587:23592	807128	22	True				
ANR	807478	Label	case 0xf900 :	918:10:23604:23615	807128	23	True				
ANR	807479	ExpressionStatement	"add_range ( 0xf900 , 0xfaff , ""Lo"" , ""L"" )"	922:12:23703:23739	807128	24	True				
ANR	807480	CallExpression	"add_range ( 0xf900 , 0xfaff , ""Lo"" , ""L"" )"		807128	0					
ANR	807481	Callee	add_range		807128	0					
ANR	807482	Identifier	add_range		807128	0					
ANR	807483	ArgumentList	0xf900		807128	1					
ANR	807484	Argument	0xf900		807128	0					
ANR	807485	PrimaryExpression	0xf900		807128	0					
ANR	807486	Argument	0xfaff		807128	1					
ANR	807487	PrimaryExpression	0xfaff		807128	0					
ANR	807488	Argument	"""Lo"""		807128	2					
ANR	807489	PrimaryExpression	"""Lo"""		807128	0					
ANR	807490	Argument	"""L"""		807128	3					
ANR	807491	PrimaryExpression	"""L"""		807128	0					
ANR	807492	ExpressionStatement	"add_range ( 0xf900 , 0xfaff , ""Cp"" , 0 )"	927:12:23844:23878	807128	25	True				
ANR	807493	CallExpression	"add_range ( 0xf900 , 0xfaff , ""Cp"" , 0 )"		807128	0					
ANR	807494	Callee	add_range		807128	0					
ANR	807495	Identifier	add_range		807128	0					
ANR	807496	ArgumentList	0xf900		807128	1					
ANR	807497	Argument	0xf900		807128	0					
ANR	807498	PrimaryExpression	0xf900		807128	0					
ANR	807499	Argument	0xfaff		807128	1					
ANR	807500	PrimaryExpression	0xfaff		807128	0					
ANR	807501	Argument	"""Cp"""		807128	2					
ANR	807502	PrimaryExpression	"""Cp"""		807128	0					
ANR	807503	Argument	0		807128	3					
ANR	807504	PrimaryExpression	0		807128	0					
ANR	807505	ExpressionStatement	skip = 1	929:12:23893:23901	807128	26	True				
ANR	807506	AssignmentExpression	skip = 1		807128	0		=			
ANR	807507	Identifier	skip		807128	0					
ANR	807508	PrimaryExpression	1		807128	1					
ANR	807509	BreakStatement	break ;	930:5:23908:23913	807128	27	True				
ANR	807510	Label	case 0x20000 :	931:3:23918:23930	807128	28	True				
ANR	807511	ExpressionStatement	"add_range ( 0x20000 , 0x2a6d6 , ""Lo"" , ""L"" )"	933:12:23981:24019	807128	29	True				
ANR	807512	CallExpression	"add_range ( 0x20000 , 0x2a6d6 , ""Lo"" , ""L"" )"		807128	0					
ANR	807513	Callee	add_range		807128	0					
ANR	807514	Identifier	add_range		807128	0					
ANR	807515	ArgumentList	0x20000		807128	1					
ANR	807516	Argument	0x20000		807128	0					
ANR	807517	PrimaryExpression	0x20000		807128	0					
ANR	807518	Argument	0x2a6d6		807128	1					
ANR	807519	PrimaryExpression	0x2a6d6		807128	0					
ANR	807520	Argument	"""Lo"""		807128	2					
ANR	807521	PrimaryExpression	"""Lo"""		807128	0					
ANR	807522	Argument	"""L"""		807128	3					
ANR	807523	PrimaryExpression	"""L"""		807128	0					
ANR	807524	ExpressionStatement	"add_range ( 0x20000 , 0x2a6d6 , ""Cp"" , 0 )"	935:12:24034:24070	807128	30	True				
ANR	807525	CallExpression	"add_range ( 0x20000 , 0x2a6d6 , ""Cp"" , 0 )"		807128	0					
ANR	807526	Callee	add_range		807128	0					
ANR	807527	Identifier	add_range		807128	0					
ANR	807528	ArgumentList	0x20000		807128	1					
ANR	807529	Argument	0x20000		807128	0					
ANR	807530	PrimaryExpression	0x20000		807128	0					
ANR	807531	Argument	0x2a6d6		807128	1					
ANR	807532	PrimaryExpression	0x2a6d6		807128	0					
ANR	807533	Argument	"""Cp"""		807128	2					
ANR	807534	PrimaryExpression	"""Cp"""		807128	0					
ANR	807535	Argument	0		807128	3					
ANR	807536	PrimaryExpression	0		807128	0					
ANR	807537	ExpressionStatement	skip = 1	937:5:24078:24086	807128	31	True				
ANR	807538	AssignmentExpression	skip = 1		807128	0		=			
ANR	807539	Identifier	skip		807128	0					
ANR	807540	PrimaryExpression	1		807128	1					
ANR	807541	BreakStatement	break ;	938:5:24093:24098	807128	32	True				
ANR	807542	Label	case 0xf0000 :	939:3:24103:24115	807128	33	True				
ANR	807543	ExpressionStatement	"add_range ( 0xf0000 , 0xffffd , ""Co"" , ""L"" )"	941:5:24154:24192	807128	34	True				
ANR	807544	CallExpression	"add_range ( 0xf0000 , 0xffffd , ""Co"" , ""L"" )"		807128	0					
ANR	807545	Callee	add_range		807128	0					
ANR	807546	Identifier	add_range		807128	0					
ANR	807547	ArgumentList	0xf0000		807128	1					
ANR	807548	Argument	0xf0000		807128	0					
ANR	807549	PrimaryExpression	0xf0000		807128	0					
ANR	807550	Argument	0xffffd		807128	1					
ANR	807551	PrimaryExpression	0xffffd		807128	0					
ANR	807552	Argument	"""Co"""		807128	2					
ANR	807553	PrimaryExpression	"""Co"""		807128	0					
ANR	807554	Argument	"""L"""		807128	3					
ANR	807555	PrimaryExpression	"""L"""		807128	0					
ANR	807556	ExpressionStatement	skip = 1	942:5:24199:24207	807128	35	True				
ANR	807557	AssignmentExpression	skip = 1		807128	0		=			
ANR	807558	Identifier	skip		807128	0					
ANR	807559	PrimaryExpression	1		807128	1					
ANR	807560	BreakStatement	break ;	943:5:24214:24219	807128	36	True				
ANR	807561	Label	case 0x100000 :	945:3:24225:24238	807128	37	True				
ANR	807562	ExpressionStatement	"add_range ( 0x100000 , 0x10fffd , ""Co"" , ""L"" )"	947:5:24277:24317	807128	38	True				
ANR	807563	CallExpression	"add_range ( 0x100000 , 0x10fffd , ""Co"" , ""L"" )"		807128	0					
ANR	807564	Callee	add_range		807128	0					
ANR	807565	Identifier	add_range		807128	0					
ANR	807566	ArgumentList	0x100000		807128	1					
ANR	807567	Argument	0x100000		807128	0					
ANR	807568	PrimaryExpression	0x100000		807128	0					
ANR	807569	Argument	0x10fffd		807128	1					
ANR	807570	PrimaryExpression	0x10fffd		807128	0					
ANR	807571	Argument	"""Co"""		807128	2					
ANR	807572	PrimaryExpression	"""Co"""		807128	0					
ANR	807573	Argument	"""L"""		807128	3					
ANR	807574	PrimaryExpression	"""L"""		807128	0					
ANR	807575	ExpressionStatement	skip = 1	948:5:24324:24332	807128	39	True				
ANR	807576	AssignmentExpression	skip = 1		807128	0		=			
ANR	807577	Identifier	skip		807128	0					
ANR	807578	PrimaryExpression	1		807128	1					
ANR	807579	BreakStatement	break ;	949:5:24339:24344	807128	40	True				
ANR	807580	IfStatement	if ( skip )		807128	6					
ANR	807581	Condition	skip	952:12:24369:24372	807128	0	True				
ANR	807582	Identifier	skip		807128	0					
ANR	807583	ContinueStatement	continue ;	953:10:24385:24393	807128	1	True				
ANR	807584	ExpressionStatement	"ordered_range_insert ( code , ""Cp"" , 2 )"	958:8:24476:24511	807128	7	True				
ANR	807585	CallExpression	"ordered_range_insert ( code , ""Cp"" , 2 )"		807128	0					
ANR	807586	Callee	ordered_range_insert		807128	0					
ANR	807587	Identifier	ordered_range_insert		807128	0					
ANR	807588	ArgumentList	code		807128	1					
ANR	807589	Argument	code		807128	0					
ANR	807590	Identifier	code		807128	0					
ANR	807591	Argument	"""Cp"""		807128	1					
ANR	807592	PrimaryExpression	"""Cp"""		807128	0					
ANR	807593	Argument	2		807128	2					
ANR	807594	PrimaryExpression	2		807128	0					
ANR	807595	ForStatement	for ( i = 0 ; * s != 0 && i < 2 ; s ++ )		807128	8					
ANR	807596	ForInit	i = 0 ;	963:13:24604:24609	807128	0	True				
ANR	807597	AssignmentExpression	i = 0		807128	0		=			
ANR	807598	Identifier	i		807128	0					
ANR	807599	PrimaryExpression	0		807128	1					
ANR	807600	Condition	* s != 0 && i < 2	963:20:24611:24626	807128	1	True				
ANR	807601	AndExpression	* s != 0 && i < 2		807128	0		&&			
ANR	807602	EqualityExpression	* s != 0		807128	0		!=			
ANR	807603	UnaryOperationExpression	* s		807128	0					
ANR	807604	UnaryOperator	*		807128	0					
ANR	807605	Identifier	s		807128	1					
ANR	807606	PrimaryExpression	0		807128	1					
ANR	807607	RelationalExpression	i < 2		807128	1		<			
ANR	807608	Identifier	i		807128	0					
ANR	807609	PrimaryExpression	2		807128	1					
ANR	807610	PostIncDecOperationExpression	s ++	963:38:24629:24631	807128	2	True				
ANR	807611	Identifier	s		807128	0					
ANR	807612	IncDec	++		807128	1					
ANR	807613	CompoundStatement		143:43:3715:3715	807128	3					
ANR	807614	IfStatement	if ( * s == ';' )		807128	0					
ANR	807615	Condition	* s == ';'	964:16:24652:24660	807128	0	True				
ANR	807616	EqualityExpression	* s == ';'		807128	0		==			
ANR	807617	UnaryOperationExpression	* s		807128	0					
ANR	807618	UnaryOperator	*		807128	0					
ANR	807619	Identifier	s		807128	1					
ANR	807620	PrimaryExpression	';'		807128	1					
ANR	807621	ExpressionStatement	i ++	965:14:24677:24680	807128	1	True				
ANR	807622	PostIncDecOperationExpression	i ++		807128	0					
ANR	807623	Identifier	i		807128	0					
ANR	807624	IncDec	++		807128	1					
ANR	807625	ForStatement	for ( e = s ; * e && * e != ';' ; e ++ )		807128	9					
ANR	807626	ForInit	e = s ;	967:13:24705:24710	807128	0	True				
ANR	807627	AssignmentExpression	e = s		807128	0		=			
ANR	807628	Identifier	e		807128	0					
ANR	807629	Identifier	s		807128	1					
ANR	807630	Condition	* e && * e != ';'	967:20:24712:24726	807128	1	True				
ANR	807631	AndExpression	* e && * e != ';'		807128	0		&&			
ANR	807632	UnaryOperationExpression	* e		807128	0					
ANR	807633	UnaryOperator	*		807128	0					
ANR	807634	Identifier	e		807128	1					
ANR	807635	EqualityExpression	* e != ';'		807128	1		!=			
ANR	807636	UnaryOperationExpression	* e		807128	0					
ANR	807637	UnaryOperator	*		807128	0					
ANR	807638	Identifier	e		807128	1					
ANR	807639	PrimaryExpression	';'		807128	1					
ANR	807640	PostIncDecOperationExpression	e ++	967:37:24729:24731	807128	2	True				
ANR	807641	Identifier	e		807128	0					
ANR	807642	IncDec	++		807128	1					
ANR	807643	ExpressionStatement		967:42:24734:24734	807128	3	True				
ANR	807644	ExpressionStatement	"ordered_range_insert ( code , s , e - s )"	969:8:24749:24785	807128	10	True				
ANR	807645	CallExpression	"ordered_range_insert ( code , s , e - s )"		807128	0					
ANR	807646	Callee	ordered_range_insert		807128	0					
ANR	807647	Identifier	ordered_range_insert		807128	0					
ANR	807648	ArgumentList	code		807128	1					
ANR	807649	Argument	code		807128	0					
ANR	807650	Identifier	code		807128	0					
ANR	807651	Argument	s		807128	1					
ANR	807652	Identifier	s		807128	0					
ANR	807653	Argument	e - s		807128	2					
ANR	807654	AdditiveExpression	e - s		807128	0		-			
ANR	807655	Identifier	e		807128	0					
ANR	807656	Identifier	s		807128	1					
ANR	807657	ForStatement	for ( s = e ; * s != 0 && i < 3 ; s ++ )		807128	11					
ANR	807658	ForInit	s = e ;	974:13:24868:24873	807128	0	True				
ANR	807659	AssignmentExpression	s = e		807128	0		=			
ANR	807660	Identifier	s		807128	0					
ANR	807661	Identifier	e		807128	1					
ANR	807662	Condition	* s != 0 && i < 3	974:20:24875:24890	807128	1	True				
ANR	807663	AndExpression	* s != 0 && i < 3		807128	0		&&			
ANR	807664	EqualityExpression	* s != 0		807128	0		!=			
ANR	807665	UnaryOperationExpression	* s		807128	0					
ANR	807666	UnaryOperator	*		807128	0					
ANR	807667	Identifier	s		807128	1					
ANR	807668	PrimaryExpression	0		807128	1					
ANR	807669	RelationalExpression	i < 3		807128	1		<			
ANR	807670	Identifier	i		807128	0					
ANR	807671	PrimaryExpression	3		807128	1					
ANR	807672	PostIncDecOperationExpression	s ++	974:38:24893:24895	807128	2	True				
ANR	807673	Identifier	s		807128	0					
ANR	807674	IncDec	++		807128	1					
ANR	807675	CompoundStatement		154:43:3979:3979	807128	3					
ANR	807676	IfStatement	if ( * s == ';' )		807128	0					
ANR	807677	Condition	* s == ';'	975:16:24916:24924	807128	0	True				
ANR	807678	EqualityExpression	* s == ';'		807128	0		==			
ANR	807679	UnaryOperationExpression	* s		807128	0					
ANR	807680	UnaryOperator	*		807128	0					
ANR	807681	Identifier	s		807128	1					
ANR	807682	PrimaryExpression	';'		807128	1					
ANR	807683	ExpressionStatement	i ++	976:14:24941:24944	807128	1	True				
ANR	807684	PostIncDecOperationExpression	i ++		807128	0					
ANR	807685	Identifier	i		807128	0					
ANR	807686	IncDec	++		807128	1					
ANR	807687	ForStatement	"for ( ccl_code = 0 , e = s ; * e && * e != ';' ; e ++ )"		807128	12					
ANR	807688	ForInit	"ccl_code = 0 , e = s ;"	982:13:25051:25070	807128	0	True				
ANR	807689	Expression	"ccl_code = 0 , e = s"		807128	0					
ANR	807690	AssignmentExpression	ccl_code = 0		807128	0		=			
ANR	807691	Identifier	ccl_code		807128	0					
ANR	807692	PrimaryExpression	0		807128	1					
ANR	807693	AssignmentExpression	e = s		807128	1		=			
ANR	807694	Identifier	e		807128	0					
ANR	807695	Identifier	s		807128	1					
ANR	807696	Condition	* e && * e != ';'	982:34:25072:25086	807128	1	True				
ANR	807697	AndExpression	* e && * e != ';'		807128	0		&&			
ANR	807698	UnaryOperationExpression	* e		807128	0					
ANR	807699	UnaryOperator	*		807128	0					
ANR	807700	Identifier	e		807128	1					
ANR	807701	EqualityExpression	* e != ';'		807128	1		!=			
ANR	807702	UnaryOperationExpression	* e		807128	0					
ANR	807703	UnaryOperator	*		807128	0					
ANR	807704	Identifier	e		807128	1					
ANR	807705	PrimaryExpression	';'		807128	1					
ANR	807706	PostIncDecOperationExpression	e ++	982:51:25089:25091	807128	2	True				
ANR	807707	Identifier	e		807128	0					
ANR	807708	IncDec	++		807128	1					
ANR	807709	ExpressionStatement	ccl_code = ( ccl_code * 10 ) + ( * e - '0' )	983:10:25104:25143	807128	3	True				
ANR	807710	AssignmentExpression	ccl_code = ( ccl_code * 10 ) + ( * e - '0' )		807128	0		=			
ANR	807711	Identifier	ccl_code		807128	0					
ANR	807712	AdditiveExpression	( ccl_code * 10 ) + ( * e - '0' )		807128	1		+			
ANR	807713	MultiplicativeExpression	ccl_code * 10		807128	0		*			
ANR	807714	Identifier	ccl_code		807128	0					
ANR	807715	PrimaryExpression	10		807128	1					
ANR	807716	AdditiveExpression	* e - '0'		807128	1		-			
ANR	807717	UnaryOperationExpression	* e		807128	0					
ANR	807718	UnaryOperator	*		807128	0					
ANR	807719	Identifier	e		807128	1					
ANR	807720	PrimaryExpression	'0'		807128	1					
ANR	807721	IfStatement	if ( ccl_code != 0 )		807128	13					
ANR	807722	Condition	ccl_code != 0	988:12:25218:25230	807128	0	True				
ANR	807723	EqualityExpression	ccl_code != 0		807128	0		!=			
ANR	807724	Identifier	ccl_code		807128	0					
ANR	807725	PrimaryExpression	0		807128	1					
ANR	807726	ExpressionStatement	"ordered_ccl_insert ( code , ccl_code )"	989:10:25243:25277	807128	1	True				
ANR	807727	CallExpression	"ordered_ccl_insert ( code , ccl_code )"		807128	0					
ANR	807728	Callee	ordered_ccl_insert		807128	0					
ANR	807729	Identifier	ordered_ccl_insert		807128	0					
ANR	807730	ArgumentList	code		807128	1					
ANR	807731	Argument	code		807128	0					
ANR	807732	Identifier	code		807128	0					
ANR	807733	Argument	ccl_code		807128	1					
ANR	807734	Identifier	ccl_code		807128	0					
ANR	807735	ForStatement	for ( s = e ; * s != 0 && i < 4 ; s ++ )		807128	14					
ANR	807736	ForInit	s = e ;	994:13:25371:25376	807128	0	True				
ANR	807737	AssignmentExpression	s = e		807128	0		=			
ANR	807738	Identifier	s		807128	0					
ANR	807739	Identifier	e		807128	1					
ANR	807740	Condition	* s != 0 && i < 4	994:20:25378:25393	807128	1	True				
ANR	807741	AndExpression	* s != 0 && i < 4		807128	0		&&			
ANR	807742	EqualityExpression	* s != 0		807128	0		!=			
ANR	807743	UnaryOperationExpression	* s		807128	0					
ANR	807744	UnaryOperator	*		807128	0					
ANR	807745	Identifier	s		807128	1					
ANR	807746	PrimaryExpression	0		807128	1					
ANR	807747	RelationalExpression	i < 4		807128	1		<			
ANR	807748	Identifier	i		807128	0					
ANR	807749	PrimaryExpression	4		807128	1					
ANR	807750	PostIncDecOperationExpression	s ++	994:38:25396:25398	807128	2	True				
ANR	807751	Identifier	s		807128	0					
ANR	807752	IncDec	++		807128	1					
ANR	807753	CompoundStatement		174:43:4482:4482	807128	3					
ANR	807754	IfStatement	if ( * s == ';' )		807128	0					
ANR	807755	Condition	* s == ';'	995:16:25419:25427	807128	0	True				
ANR	807756	EqualityExpression	* s == ';'		807128	0		==			
ANR	807757	UnaryOperationExpression	* s		807128	0					
ANR	807758	UnaryOperator	*		807128	0					
ANR	807759	Identifier	s		807128	1					
ANR	807760	PrimaryExpression	';'		807128	1					
ANR	807761	ExpressionStatement	i ++	996:14:25444:25447	807128	1	True				
ANR	807762	PostIncDecOperationExpression	i ++		807128	0					
ANR	807763	Identifier	i		807128	0					
ANR	807764	IncDec	++		807128	1					
ANR	807765	ForStatement	for ( e = s ; * e && * e != ';' ; e ++ )		807128	15					
ANR	807766	ForInit	e = s ;	998:13:25472:25477	807128	0	True				
ANR	807767	AssignmentExpression	e = s		807128	0		=			
ANR	807768	Identifier	e		807128	0					
ANR	807769	Identifier	s		807128	1					
ANR	807770	Condition	* e && * e != ';'	998:20:25479:25493	807128	1	True				
ANR	807771	AndExpression	* e && * e != ';'		807128	0		&&			
ANR	807772	UnaryOperationExpression	* e		807128	0					
ANR	807773	UnaryOperator	*		807128	0					
ANR	807774	Identifier	e		807128	1					
ANR	807775	EqualityExpression	* e != ';'		807128	1		!=			
ANR	807776	UnaryOperationExpression	* e		807128	0					
ANR	807777	UnaryOperator	*		807128	0					
ANR	807778	Identifier	e		807128	1					
ANR	807779	PrimaryExpression	';'		807128	1					
ANR	807780	PostIncDecOperationExpression	e ++	998:37:25496:25498	807128	2	True				
ANR	807781	Identifier	e		807128	0					
ANR	807782	IncDec	++		807128	1					
ANR	807783	ExpressionStatement		998:42:25501:25501	807128	3	True				
ANR	807784	ExpressionStatement	"ordered_range_insert ( code , s , e - s )"	1000:8:25512:25548	807128	16	True				
ANR	807785	CallExpression	"ordered_range_insert ( code , s , e - s )"		807128	0					
ANR	807786	Callee	ordered_range_insert		807128	0					
ANR	807787	Identifier	ordered_range_insert		807128	0					
ANR	807788	ArgumentList	code		807128	1					
ANR	807789	Argument	code		807128	0					
ANR	807790	Identifier	code		807128	0					
ANR	807791	Argument	s		807128	1					
ANR	807792	Identifier	s		807128	0					
ANR	807793	Argument	e - s		807128	2					
ANR	807794	AdditiveExpression	e - s		807128	0		-			
ANR	807795	Identifier	e		807128	0					
ANR	807796	Identifier	s		807128	1					
ANR	807797	ExpressionStatement	s = ++ e	1005:8:25620:25627	807128	17	True				
ANR	807798	AssignmentExpression	s = ++ e		807128	0		=			
ANR	807799	Identifier	s		807128	0					
ANR	807800	UnaryExpression	++ e		807128	1					
ANR	807801	IncDec	++		807128	0					
ANR	807802	Identifier	e		807128	1					
ANR	807803	IfStatement	if ( * s != ';' )		807128	18					
ANR	807804	Condition	* s != ';'	1006:12:25641:25649	807128	0	True				
ANR	807805	EqualityExpression	* s != ';'		807128	0		!=			
ANR	807806	UnaryOperationExpression	* s		807128	0					
ANR	807807	UnaryOperator	*		807128	0					
ANR	807808	Identifier	s		807128	1					
ANR	807809	PrimaryExpression	';'		807128	1					
ANR	807810	CompoundStatement		186:23:4733:4733	807128	1					
ANR	807811	ExpressionStatement	compat = * s == '<'	1007:5:25659:25677	807128	0	True				
ANR	807812	AssignmentExpression	compat = * s == '<'		807128	0		=			
ANR	807813	Identifier	compat		807128	0					
ANR	807814	EqualityExpression	* s == '<'		807128	1		==			
ANR	807815	UnaryOperationExpression	* s		807128	0					
ANR	807816	UnaryOperator	*		807128	0					
ANR	807817	Identifier	s		807128	1					
ANR	807818	PrimaryExpression	'<'		807128	1					
ANR	807819	IfStatement	if ( compat )		807128	1					
ANR	807820	Condition	compat	1008:9:25688:25693	807128	0	True				
ANR	807821	Identifier	compat		807128	0					
ANR	807822	CompoundStatement		188:17:4777:4777	807128	1					
ANR	807823	WhileStatement	while ( * s ++ != '>' )		807128	0					
ANR	807824	Condition	* s ++ != '>'	1012:9:25758:25768	807128	0	True				
ANR	807825	EqualityExpression	* s ++ != '>'		807128	0		!=			
ANR	807826	UnaryOperationExpression	* s ++		807128	0					
ANR	807827	UnaryOperator	*		807128	0					
ANR	807828	PostIncDecOperationExpression	s ++		807128	1					
ANR	807829	Identifier	s		807128	0					
ANR	807830	IncDec	++		807128	1					
ANR	807831	PrimaryExpression	'>'		807128	1					
ANR	807832	ExpressionStatement		1012:21:25770:25770	807128	1	True				
ANR	807833	ForStatement	for ( dectmp_size = 0 ; * s != ';' ; )		807128	2					
ANR	807834	ForInit	dectmp_size = 0 ;	1017:17:25882:25897	807128	0	True				
ANR	807835	AssignmentExpression	dectmp_size = 0		807128	0		=			
ANR	807836	Identifier	dectmp_size		807128	0					
ANR	807837	PrimaryExpression	0		807128	1					
ANR	807838	Condition	* s != ';'	1017:34:25899:25907	807128	1	True				
ANR	807839	EqualityExpression	* s != ';'		807128	0		!=			
ANR	807840	UnaryOperationExpression	* s		807128	0					
ANR	807841	UnaryOperator	*		807128	0					
ANR	807842	Identifier	s		807128	1					
ANR	807843	PrimaryExpression	';'		807128	1					
ANR	807844	CompoundStatement		197:47:4993:4993	807128	2					
ANR	807845	WhileStatement	while ( ! ishdigit ( * s ) )		807128	0					
ANR	807846	Condition	! ishdigit ( * s )	1021:23:26028:26040	807128	0	True				
ANR	807847	UnaryOperationExpression	! ishdigit ( * s )		807128	0					
ANR	807848	UnaryOperator	!		807128	0					
ANR	807849	CallExpression	ishdigit ( * s )		807128	1					
ANR	807850	Callee	ishdigit		807128	0					
ANR	807851	Identifier	ishdigit		807128	0					
ANR	807852	ArgumentList	* s		807128	1					
ANR	807853	Argument	* s		807128	0					
ANR	807854	UnaryOperationExpression	* s		807128	0					
ANR	807855	UnaryOperator	*		807128	0					
ANR	807856	Identifier	s		807128	1					
ANR	807857	ExpressionStatement	s ++	1022:5:26048:26051	807128	1	True				
ANR	807858	PostIncDecOperationExpression	s ++		807128	0					
ANR	807859	Identifier	s		807128	0					
ANR	807860	IncDec	++		807128	1					
ANR	807861	ForStatement	for ( dectmp [ dectmp_size ] = 0 ; ishdigit ( * s ) ; s ++ )		807128	1					
ANR	807862	ForInit	dectmp [ dectmp_size ] = 0 ;	1024:21:26075:26098	807128	0	True				
ANR	807863	AssignmentExpression	dectmp [ dectmp_size ] = 0		807128	0		=			
ANR	807864	ArrayIndexing	dectmp [ dectmp_size ]		807128	0					
ANR	807865	Identifier	dectmp		807128	0					
ANR	807866	Identifier	dectmp_size		807128	1					
ANR	807867	PrimaryExpression	0		807128	1					
ANR	807868	Condition	ishdigit ( * s )	1024:46:26100:26111	807128	1	True				
ANR	807869	CallExpression	ishdigit ( * s )		807128	0					
ANR	807870	Callee	ishdigit		807128	0					
ANR	807871	Identifier	ishdigit		807128	0					
ANR	807872	ArgumentList	* s		807128	1					
ANR	807873	Argument	* s		807128	0					
ANR	807874	UnaryOperationExpression	* s		807128	0					
ANR	807875	UnaryOperator	*		807128	0					
ANR	807876	Identifier	s		807128	1					
ANR	807877	PostIncDecOperationExpression	s ++	1024:60:26114:26116	807128	2	True				
ANR	807878	Identifier	s		807128	0					
ANR	807879	IncDec	++		807128	1					
ANR	807880	CompoundStatement		204:65:5200:5200	807128	3					
ANR	807881	ExpressionStatement	dectmp [ dectmp_size ] <<= 4	1025:20:26141:26166	807128	0	True				
ANR	807882	AssignmentExpression	dectmp [ dectmp_size ] <<= 4		807128	0		<<=			
ANR	807883	ArrayIndexing	dectmp [ dectmp_size ]		807128	0					
ANR	807884	Identifier	dectmp		807128	0					
ANR	807885	Identifier	dectmp_size		807128	1					
ANR	807886	PrimaryExpression	4		807128	1					
ANR	807887	IfStatement	if ( * s >= '0' && * s <= '9' )		807128	1					
ANR	807888	Condition	* s >= '0' && * s <= '9'	1026:24:26192:26213	807128	0	True				
ANR	807889	AndExpression	* s >= '0' && * s <= '9'		807128	0		&&			
ANR	807890	RelationalExpression	* s >= '0'		807128	0		>=			
ANR	807891	UnaryOperationExpression	* s		807128	0					
ANR	807892	UnaryOperator	*		807128	0					
ANR	807893	Identifier	s		807128	1					
ANR	807894	PrimaryExpression	'0'		807128	1					
ANR	807895	RelationalExpression	* s <= '9'		807128	1		<=			
ANR	807896	UnaryOperationExpression	* s		807128	0					
ANR	807897	UnaryOperator	*		807128	0					
ANR	807898	Identifier	s		807128	1					
ANR	807899	PrimaryExpression	'9'		807128	1					
ANR	807900	ExpressionStatement	dectmp [ dectmp_size ] += * s - '0'	1027:22:26238:26269	807128	1	True				
ANR	807901	AssignmentExpression	dectmp [ dectmp_size ] += * s - '0'		807128	0		+=			
ANR	807902	ArrayIndexing	dectmp [ dectmp_size ]		807128	0					
ANR	807903	Identifier	dectmp		807128	0					
ANR	807904	Identifier	dectmp_size		807128	1					
ANR	807905	AdditiveExpression	* s - '0'		807128	1		-			
ANR	807906	UnaryOperationExpression	* s		807128	0					
ANR	807907	UnaryOperator	*		807128	0					
ANR	807908	Identifier	s		807128	1					
ANR	807909	PrimaryExpression	'0'		807128	1					
ANR	807910	ElseStatement	else		807128	0					
ANR	807911	IfStatement	if ( * s >= 'A' && * s <= 'F' )		807128	0					
ANR	807912	Condition	* s >= 'A' && * s <= 'F'	1028:29:26300:26321	807128	0	True				
ANR	807913	AndExpression	* s >= 'A' && * s <= 'F'		807128	0		&&			
ANR	807914	RelationalExpression	* s >= 'A'		807128	0		>=			
ANR	807915	UnaryOperationExpression	* s		807128	0					
ANR	807916	UnaryOperator	*		807128	0					
ANR	807917	Identifier	s		807128	1					
ANR	807918	PrimaryExpression	'A'		807128	1					
ANR	807919	RelationalExpression	* s <= 'F'		807128	1		<=			
ANR	807920	UnaryOperationExpression	* s		807128	0					
ANR	807921	UnaryOperator	*		807128	0					
ANR	807922	Identifier	s		807128	1					
ANR	807923	PrimaryExpression	'F'		807128	1					
ANR	807924	ExpressionStatement	dectmp [ dectmp_size ] += ( * s - 'A' ) + 10	1029:22:26346:26384	807128	1	True				
ANR	807925	AssignmentExpression	dectmp [ dectmp_size ] += ( * s - 'A' ) + 10		807128	0		+=			
ANR	807926	ArrayIndexing	dectmp [ dectmp_size ]		807128	0					
ANR	807927	Identifier	dectmp		807128	0					
ANR	807928	Identifier	dectmp_size		807128	1					
ANR	807929	AdditiveExpression	( * s - 'A' ) + 10		807128	1		+			
ANR	807930	AdditiveExpression	* s - 'A'		807128	0		-			
ANR	807931	UnaryOperationExpression	* s		807128	0					
ANR	807932	UnaryOperator	*		807128	0					
ANR	807933	Identifier	s		807128	1					
ANR	807934	PrimaryExpression	'A'		807128	1					
ANR	807935	PrimaryExpression	10		807128	1					
ANR	807936	ElseStatement	else		807128	0					
ANR	807937	IfStatement	if ( * s >= 'a' && * s <= 'f' )		807128	0					
ANR	807938	Condition	* s >= 'a' && * s <= 'f'	1030:29:26415:26436	807128	0	True				
ANR	807939	AndExpression	* s >= 'a' && * s <= 'f'		807128	0		&&			
ANR	807940	RelationalExpression	* s >= 'a'		807128	0		>=			
ANR	807941	UnaryOperationExpression	* s		807128	0					
ANR	807942	UnaryOperator	*		807128	0					
ANR	807943	Identifier	s		807128	1					
ANR	807944	PrimaryExpression	'a'		807128	1					
ANR	807945	RelationalExpression	* s <= 'f'		807128	1		<=			
ANR	807946	UnaryOperationExpression	* s		807128	0					
ANR	807947	UnaryOperator	*		807128	0					
ANR	807948	Identifier	s		807128	1					
ANR	807949	PrimaryExpression	'f'		807128	1					
ANR	807950	ExpressionStatement	dectmp [ dectmp_size ] += ( * s - 'a' ) + 10	1031:22:26461:26499	807128	1	True				
ANR	807951	AssignmentExpression	dectmp [ dectmp_size ] += ( * s - 'a' ) + 10		807128	0		+=			
ANR	807952	ArrayIndexing	dectmp [ dectmp_size ]		807128	0					
ANR	807953	Identifier	dectmp		807128	0					
ANR	807954	Identifier	dectmp_size		807128	1					
ANR	807955	AdditiveExpression	( * s - 'a' ) + 10		807128	1		+			
ANR	807956	AdditiveExpression	* s - 'a'		807128	0		-			
ANR	807957	UnaryOperationExpression	* s		807128	0					
ANR	807958	UnaryOperator	*		807128	0					
ANR	807959	Identifier	s		807128	1					
ANR	807960	PrimaryExpression	'a'		807128	1					
ANR	807961	PrimaryExpression	10		807128	1					
ANR	807962	ExpressionStatement	dectmp_size ++	1033:16:26535:26548	807128	2	True				
ANR	807963	PostIncDecOperationExpression	dectmp_size ++		807128	0					
ANR	807964	Identifier	dectmp_size		807128	0					
ANR	807965	IncDec	++		807128	1					
ANR	807966	IfStatement	if ( dectmp_size > 0 )		807128	3					
ANR	807967	Condition	dectmp_size > 0	1040:16:26750:26764	807128	0	True				
ANR	807968	RelationalExpression	dectmp_size > 0		807128	0		>			
ANR	807969	Identifier	dectmp_size		807128	0					
ANR	807970	PrimaryExpression	0		807128	1					
ANR	807971	CompoundStatement		220:33:5848:5848	807128	1					
ANR	807972	IfStatement	if ( ! compat )		807128	0					
ANR	807973	Condition	! compat	1041:6:26775:26781	807128	0	True				
ANR	807974	UnaryOperationExpression	! compat		807128	0					
ANR	807975	UnaryOperator	!		807128	0					
ANR	807976	Identifier	compat		807128	1					
ANR	807977	CompoundStatement		221:15:5865:5865	807128	1					
ANR	807978	ExpressionStatement	"add_decomp ( code , 0 )"	1042:6:26792:26811	807128	0	True				
ANR	807979	CallExpression	"add_decomp ( code , 0 )"		807128	0					
ANR	807980	Callee	add_decomp		807128	0					
ANR	807981	Identifier	add_decomp		807128	0					
ANR	807982	ArgumentList	code		807128	1					
ANR	807983	Argument	code		807128	0					
ANR	807984	Identifier	code		807128	0					
ANR	807985	Argument	0		807128	1					
ANR	807986	PrimaryExpression	0		807128	0					
ANR	807987	ExpressionStatement	"add_decomp ( code , 1 )"	1044:2:26819:26838	807128	1	True				
ANR	807988	CallExpression	"add_decomp ( code , 1 )"		807128	0					
ANR	807989	Callee	add_decomp		807128	0					
ANR	807990	Identifier	add_decomp		807128	0					
ANR	807991	ArgumentList	code		807128	1					
ANR	807992	Argument	code		807128	0					
ANR	807993	Identifier	code		807128	0					
ANR	807994	Argument	1		807128	1					
ANR	807995	PrimaryExpression	1		807128	0					
ANR	807996	ForStatement	for ( i = 0 ; i < 3 && * s ; s ++ )		807128	19					
ANR	807997	ForInit	i = 0 ;	1051:13:26931:26936	807128	0	True				
ANR	807998	AssignmentExpression	i = 0		807128	0		=			
ANR	807999	Identifier	i		807128	0					
ANR	808000	PrimaryExpression	0		807128	1					
ANR	808001	Condition	i < 3 && * s	1051:20:26938:26948	807128	1	True				
ANR	808002	AndExpression	i < 3 && * s		807128	0		&&			
ANR	808003	RelationalExpression	i < 3		807128	0		<			
ANR	808004	Identifier	i		807128	0					
ANR	808005	PrimaryExpression	3		807128	1					
ANR	808006	UnaryOperationExpression	* s		807128	1					
ANR	808007	UnaryOperator	*		807128	0					
ANR	808008	Identifier	s		807128	1					
ANR	808009	PostIncDecOperationExpression	s ++	1051:33:26951:26953	807128	2	True				
ANR	808010	Identifier	s		807128	0					
ANR	808011	IncDec	++		807128	1					
ANR	808012	CompoundStatement		231:38:6037:6037	807128	3					
ANR	808013	IfStatement	if ( * s == ';' )		807128	0					
ANR	808014	Condition	* s == ';'	1052:16:26974:26982	807128	0	True				
ANR	808015	EqualityExpression	* s == ';'		807128	0		==			
ANR	808016	UnaryOperationExpression	* s		807128	0					
ANR	808017	UnaryOperator	*		807128	0					
ANR	808018	Identifier	s		807128	1					
ANR	808019	PrimaryExpression	';'		807128	1					
ANR	808020	ExpressionStatement	i ++	1053:14:26999:27002	807128	1	True				
ANR	808021	PostIncDecOperationExpression	i ++		807128	0					
ANR	808022	Identifier	i		807128	0					
ANR	808023	IncDec	++		807128	1					
ANR	808024	ExpressionStatement	number [ 0 ] = number [ 1 ] = 0	1059:8:27077:27102	807128	20	True				
ANR	808025	AssignmentExpression	number [ 0 ] = number [ 1 ] = 0		807128	0		=			
ANR	808026	ArrayIndexing	number [ 0 ]		807128	0					
ANR	808027	Identifier	number		807128	0					
ANR	808028	PrimaryExpression	0		807128	1					
ANR	808029	AssignmentExpression	number [ 1 ] = 0		807128	1		=			
ANR	808030	ArrayIndexing	number [ 1 ]		807128	0					
ANR	808031	Identifier	number		807128	0					
ANR	808032	PrimaryExpression	1		807128	1					
ANR	808033	PrimaryExpression	0		807128	1					
ANR	808034	ForStatement	"for ( e = s , neg = wnum = 0 ; * e && * e != ';' ; e ++ )"		807128	21					
ANR	808035	ForInit	"e = s , neg = wnum = 0 ;"	1060:13:27117:27138	807128	0	True				
ANR	808036	Expression	"e = s , neg = wnum = 0"		807128	0					
ANR	808037	AssignmentExpression	e = s		807128	0		=			
ANR	808038	Identifier	e		807128	0					
ANR	808039	Identifier	s		807128	1					
ANR	808040	AssignmentExpression	neg = wnum = 0		807128	1		=			
ANR	808041	Identifier	neg		807128	0					
ANR	808042	AssignmentExpression	wnum = 0		807128	1		=			
ANR	808043	Identifier	wnum		807128	0					
ANR	808044	PrimaryExpression	0		807128	1					
ANR	808045	Condition	* e && * e != ';'	1060:36:27140:27154	807128	1	True				
ANR	808046	AndExpression	* e && * e != ';'		807128	0		&&			
ANR	808047	UnaryOperationExpression	* e		807128	0					
ANR	808048	UnaryOperator	*		807128	0					
ANR	808049	Identifier	e		807128	1					
ANR	808050	EqualityExpression	* e != ';'		807128	1		!=			
ANR	808051	UnaryOperationExpression	* e		807128	0					
ANR	808052	UnaryOperator	*		807128	0					
ANR	808053	Identifier	e		807128	1					
ANR	808054	PrimaryExpression	';'		807128	1					
ANR	808055	PostIncDecOperationExpression	e ++	1060:53:27157:27159	807128	2	True				
ANR	808056	Identifier	e		807128	0					
ANR	808057	IncDec	++		807128	1					
ANR	808058	CompoundStatement		240:58:6243:6243	807128	3					
ANR	808059	IfStatement	if ( * e == '-' )		807128	0					
ANR	808060	Condition	* e == '-'	1061:16:27180:27188	807128	0	True				
ANR	808061	EqualityExpression	* e == '-'		807128	0		==			
ANR	808062	UnaryOperationExpression	* e		807128	0					
ANR	808063	UnaryOperator	*		807128	0					
ANR	808064	Identifier	e		807128	1					
ANR	808065	PrimaryExpression	'-'		807128	1					
ANR	808066	CompoundStatement		241:27:6272:6272	807128	1					
ANR	808067	ExpressionStatement	neg = 1	1062:16:27209:27216	807128	0	True				
ANR	808068	AssignmentExpression	neg = 1		807128	0		=			
ANR	808069	Identifier	neg		807128	0					
ANR	808070	PrimaryExpression	1		807128	1					
ANR	808071	ContinueStatement	continue ;	1063:16:27234:27242	807128	1	True				
ANR	808072	IfStatement	if ( * e == '/' )		807128	1					
ANR	808073	Condition	* e == '/'	1066:16:27275:27283	807128	0	True				
ANR	808074	EqualityExpression	* e == '/'		807128	0		==			
ANR	808075	UnaryOperationExpression	* e		807128	0					
ANR	808076	UnaryOperator	*		807128	0					
ANR	808077	Identifier	e		807128	1					
ANR	808078	PrimaryExpression	'/'		807128	1					
ANR	808079	CompoundStatement		246:27:6367:6367	807128	1					
ANR	808080	IfStatement	if ( neg )		807128	0					
ANR	808081	Condition	neg	1070:20:27408:27410	807128	0	True				
ANR	808082	Identifier	neg		807128	0					
ANR	808083	ExpressionStatement	number [ wnum ] *= - 1	1071:18:27431:27449	807128	1	True				
ANR	808084	AssignmentExpression	number [ wnum ] *= - 1		807128	0		*=			
ANR	808085	ArrayIndexing	number [ wnum ]		807128	0					
ANR	808086	Identifier	number		807128	0					
ANR	808087	Identifier	wnum		807128	1					
ANR	808088	UnaryOperationExpression	- 1		807128	1					
ANR	808089	UnaryOperator	-		807128	0					
ANR	808090	PrimaryExpression	1		807128	1					
ANR	808091	ExpressionStatement	neg = 0	1072:16:27467:27474	807128	1	True				
ANR	808092	AssignmentExpression	neg = 0		807128	0		=			
ANR	808093	Identifier	neg		807128	0					
ANR	808094	PrimaryExpression	0		807128	1					
ANR	808095	ExpressionStatement	e ++	1073:16:27492:27495	807128	2	True				
ANR	808096	PostIncDecOperationExpression	e ++		807128	0					
ANR	808097	Identifier	e		807128	0					
ANR	808098	IncDec	++		807128	1					
ANR	808099	ExpressionStatement	wnum ++	1074:16:27513:27519	807128	3	True				
ANR	808100	PostIncDecOperationExpression	wnum ++		807128	0					
ANR	808101	Identifier	wnum		807128	0					
ANR	808102	IncDec	++		807128	1					
ANR	808103	ExpressionStatement	number [ wnum ] = ( number [ wnum ] * 10 ) + ( * e - '0' )	1076:12:27547:27594	807128	2	True				
ANR	808104	AssignmentExpression	number [ wnum ] = ( number [ wnum ] * 10 ) + ( * e - '0' )		807128	0		=			
ANR	808105	ArrayIndexing	number [ wnum ]		807128	0					
ANR	808106	Identifier	number		807128	0					
ANR	808107	Identifier	wnum		807128	1					
ANR	808108	AdditiveExpression	( number [ wnum ] * 10 ) + ( * e - '0' )		807128	1		+			
ANR	808109	MultiplicativeExpression	number [ wnum ] * 10		807128	0		*			
ANR	808110	ArrayIndexing	number [ wnum ]		807128	0					
ANR	808111	Identifier	number		807128	0					
ANR	808112	Identifier	wnum		807128	1					
ANR	808113	PrimaryExpression	10		807128	1					
ANR	808114	AdditiveExpression	* e - '0'		807128	1		-			
ANR	808115	UnaryOperationExpression	* e		807128	0					
ANR	808116	UnaryOperator	*		807128	0					
ANR	808117	Identifier	e		807128	1					
ANR	808118	PrimaryExpression	'0'		807128	1					
ANR	808119	IfStatement	if ( e > s )		807128	22					
ANR	808120	Condition	e > s	1079:12:27619:27623	807128	0	True				
ANR	808121	RelationalExpression	e > s		807128	0		>			
ANR	808122	Identifier	e		807128	0					
ANR	808123	Identifier	s		807128	1					
ANR	808124	CompoundStatement		259:19:6707:6707	807128	1					
ANR	808125	IfStatement	if ( wnum == 0 )		807128	0					
ANR	808126	Condition	wnum == 0	1083:16:27753:27761	807128	0	True				
ANR	808127	EqualityExpression	wnum == 0		807128	0		==			
ANR	808128	Identifier	wnum		807128	0					
ANR	808129	PrimaryExpression	0		807128	1					
ANR	808130	ExpressionStatement	number [ 1 ] = 1	1084:14:27778:27791	807128	1	True				
ANR	808131	AssignmentExpression	number [ 1 ] = 1		807128	0		=			
ANR	808132	ArrayIndexing	number [ 1 ]		807128	0					
ANR	808133	Identifier	number		807128	0					
ANR	808134	PrimaryExpression	1		807128	1					
ANR	808135	PrimaryExpression	1		807128	1					
ANR	808136	ExpressionStatement	"add_number ( code , number [ 0 ] , number [ 1 ] )"	1086:12:27806:27844	807128	1	True				
ANR	808137	CallExpression	"add_number ( code , number [ 0 ] , number [ 1 ] )"		807128	0					
ANR	808138	Callee	add_number		807128	0					
ANR	808139	Identifier	add_number		807128	0					
ANR	808140	ArgumentList	code		807128	1					
ANR	808141	Argument	code		807128	0					
ANR	808142	Identifier	code		807128	0					
ANR	808143	Argument	number [ 0 ]		807128	1					
ANR	808144	ArrayIndexing	number [ 0 ]		807128	0					
ANR	808145	Identifier	number		807128	0					
ANR	808146	PrimaryExpression	0		807128	1					
ANR	808147	Argument	number [ 1 ]		807128	2					
ANR	808148	ArrayIndexing	number [ 1 ]		807128	0					
ANR	808149	Identifier	number		807128	0					
ANR	808150	PrimaryExpression	1		807128	1					
ANR	808151	ForStatement	"for ( s = e , i = 0 ; i < 4 && * s ; s ++ )"		807128	23					
ANR	808152	ForInit	"s = e , i = 0 ;"	1092:13:27953:27965	807128	0	True				
ANR	808153	Expression	"s = e , i = 0"		807128	0					
ANR	808154	AssignmentExpression	s = e		807128	0		=			
ANR	808155	Identifier	s		807128	0					
ANR	808156	Identifier	e		807128	1					
ANR	808157	AssignmentExpression	i = 0		807128	1		=			
ANR	808158	Identifier	i		807128	0					
ANR	808159	PrimaryExpression	0		807128	1					
ANR	808160	Condition	i < 4 && * s	1092:27:27967:27977	807128	1	True				
ANR	808161	AndExpression	i < 4 && * s		807128	0		&&			
ANR	808162	RelationalExpression	i < 4		807128	0		<			
ANR	808163	Identifier	i		807128	0					
ANR	808164	PrimaryExpression	4		807128	1					
ANR	808165	UnaryOperationExpression	* s		807128	1					
ANR	808166	UnaryOperator	*		807128	0					
ANR	808167	Identifier	s		807128	1					
ANR	808168	PostIncDecOperationExpression	s ++	1092:40:27980:27982	807128	2	True				
ANR	808169	Identifier	s		807128	0					
ANR	808170	IncDec	++		807128	1					
ANR	808171	CompoundStatement		272:45:7066:7066	807128	3					
ANR	808172	IfStatement	if ( * s == ';' )		807128	0					
ANR	808173	Condition	* s == ';'	1093:16:28003:28011	807128	0	True				
ANR	808174	EqualityExpression	* s == ';'		807128	0		==			
ANR	808175	UnaryOperationExpression	* s		807128	0					
ANR	808176	UnaryOperator	*		807128	0					
ANR	808177	Identifier	s		807128	1					
ANR	808178	PrimaryExpression	';'		807128	1					
ANR	808179	ExpressionStatement	i ++	1094:14:28028:28031	807128	1	True				
ANR	808180	PostIncDecOperationExpression	i ++		807128	0					
ANR	808181	Identifier	i		807128	0					
ANR	808182	IncDec	++		807128	1					
ANR	808183	ExpressionStatement	cases [ 0 ] = cases [ 1 ] = cases [ 2 ] = 0	1100:8:28113:28147	807128	24	True				
ANR	808184	AssignmentExpression	cases [ 0 ] = cases [ 1 ] = cases [ 2 ] = 0		807128	0		=			
ANR	808185	ArrayIndexing	cases [ 0 ]		807128	0					
ANR	808186	Identifier	cases		807128	0					
ANR	808187	PrimaryExpression	0		807128	1					
ANR	808188	AssignmentExpression	cases [ 1 ] = cases [ 2 ] = 0		807128	1		=			
ANR	808189	ArrayIndexing	cases [ 1 ]		807128	0					
ANR	808190	Identifier	cases		807128	0					
ANR	808191	PrimaryExpression	1		807128	1					
ANR	808192	AssignmentExpression	cases [ 2 ] = 0		807128	1		=			
ANR	808193	ArrayIndexing	cases [ 2 ]		807128	0					
ANR	808194	Identifier	cases		807128	0					
ANR	808195	PrimaryExpression	2		807128	1					
ANR	808196	PrimaryExpression	0		807128	1					
ANR	808197	ForStatement	for ( i = 0 ; i < 3 ; i ++ )		807128	25					
ANR	808198	ForInit	i = 0 ;	1101:13:28162:28167	807128	0	True				
ANR	808199	AssignmentExpression	i = 0		807128	0		=			
ANR	808200	Identifier	i		807128	0					
ANR	808201	PrimaryExpression	0		807128	1					
ANR	808202	Condition	i < 3	1101:20:28169:28173	807128	1	True				
ANR	808203	RelationalExpression	i < 3		807128	0		<			
ANR	808204	Identifier	i		807128	0					
ANR	808205	PrimaryExpression	3		807128	1					
ANR	808206	PostIncDecOperationExpression	i ++	1101:27:28176:28178	807128	2	True				
ANR	808207	Identifier	i		807128	0					
ANR	808208	IncDec	++		807128	1					
ANR	808209	CompoundStatement		281:32:7262:7262	807128	3					
ANR	808210	WhileStatement	while ( ishdigit ( * s ) )		807128	0					
ANR	808211	Condition	ishdigit ( * s )	1102:19:28202:28213	807128	0	True				
ANR	808212	CallExpression	ishdigit ( * s )		807128	0					
ANR	808213	Callee	ishdigit		807128	0					
ANR	808214	Identifier	ishdigit		807128	0					
ANR	808215	ArgumentList	* s		807128	1					
ANR	808216	Argument	* s		807128	0					
ANR	808217	UnaryOperationExpression	* s		807128	0					
ANR	808218	UnaryOperator	*		807128	0					
ANR	808219	Identifier	s		807128	1					
ANR	808220	CompoundStatement		282:33:7297:7297	807128	1					
ANR	808221	ExpressionStatement	cases [ i ] <<= 4	1103:16:28234:28248	807128	0	True				
ANR	808222	AssignmentExpression	cases [ i ] <<= 4		807128	0		<<=			
ANR	808223	ArrayIndexing	cases [ i ]		807128	0					
ANR	808224	Identifier	cases		807128	0					
ANR	808225	Identifier	i		807128	1					
ANR	808226	PrimaryExpression	4		807128	1					
ANR	808227	IfStatement	if ( * s >= '0' && * s <= '9' )		807128	1					
ANR	808228	Condition	* s >= '0' && * s <= '9'	1104:20:28270:28291	807128	0	True				
ANR	808229	AndExpression	* s >= '0' && * s <= '9'		807128	0		&&			
ANR	808230	RelationalExpression	* s >= '0'		807128	0		>=			
ANR	808231	UnaryOperationExpression	* s		807128	0					
ANR	808232	UnaryOperator	*		807128	0					
ANR	808233	Identifier	s		807128	1					
ANR	808234	PrimaryExpression	'0'		807128	1					
ANR	808235	RelationalExpression	* s <= '9'		807128	1		<=			
ANR	808236	UnaryOperationExpression	* s		807128	0					
ANR	808237	UnaryOperator	*		807128	0					
ANR	808238	Identifier	s		807128	1					
ANR	808239	PrimaryExpression	'9'		807128	1					
ANR	808240	ExpressionStatement	cases [ i ] += * s - '0'	1105:18:28312:28332	807128	1	True				
ANR	808241	AssignmentExpression	cases [ i ] += * s - '0'		807128	0		+=			
ANR	808242	ArrayIndexing	cases [ i ]		807128	0					
ANR	808243	Identifier	cases		807128	0					
ANR	808244	Identifier	i		807128	1					
ANR	808245	AdditiveExpression	* s - '0'		807128	1		-			
ANR	808246	UnaryOperationExpression	* s		807128	0					
ANR	808247	UnaryOperator	*		807128	0					
ANR	808248	Identifier	s		807128	1					
ANR	808249	PrimaryExpression	'0'		807128	1					
ANR	808250	ElseStatement	else		807128	0					
ANR	808251	IfStatement	if ( * s >= 'A' && * s <= 'F' )		807128	0					
ANR	808252	Condition	* s >= 'A' && * s <= 'F'	1106:25:28359:28380	807128	0	True				
ANR	808253	AndExpression	* s >= 'A' && * s <= 'F'		807128	0		&&			
ANR	808254	RelationalExpression	* s >= 'A'		807128	0		>=			
ANR	808255	UnaryOperationExpression	* s		807128	0					
ANR	808256	UnaryOperator	*		807128	0					
ANR	808257	Identifier	s		807128	1					
ANR	808258	PrimaryExpression	'A'		807128	1					
ANR	808259	RelationalExpression	* s <= 'F'		807128	1		<=			
ANR	808260	UnaryOperationExpression	* s		807128	0					
ANR	808261	UnaryOperator	*		807128	0					
ANR	808262	Identifier	s		807128	1					
ANR	808263	PrimaryExpression	'F'		807128	1					
ANR	808264	ExpressionStatement	cases [ i ] += ( * s - 'A' ) + 10	1107:18:28401:28428	807128	1	True				
ANR	808265	AssignmentExpression	cases [ i ] += ( * s - 'A' ) + 10		807128	0		+=			
ANR	808266	ArrayIndexing	cases [ i ]		807128	0					
ANR	808267	Identifier	cases		807128	0					
ANR	808268	Identifier	i		807128	1					
ANR	808269	AdditiveExpression	( * s - 'A' ) + 10		807128	1		+			
ANR	808270	AdditiveExpression	* s - 'A'		807128	0		-			
ANR	808271	UnaryOperationExpression	* s		807128	0					
ANR	808272	UnaryOperator	*		807128	0					
ANR	808273	Identifier	s		807128	1					
ANR	808274	PrimaryExpression	'A'		807128	1					
ANR	808275	PrimaryExpression	10		807128	1					
ANR	808276	ElseStatement	else		807128	0					
ANR	808277	IfStatement	if ( * s >= 'a' && * s <= 'f' )		807128	0					
ANR	808278	Condition	* s >= 'a' && * s <= 'f'	1108:25:28455:28476	807128	0	True				
ANR	808279	AndExpression	* s >= 'a' && * s <= 'f'		807128	0		&&			
ANR	808280	RelationalExpression	* s >= 'a'		807128	0		>=			
ANR	808281	UnaryOperationExpression	* s		807128	0					
ANR	808282	UnaryOperator	*		807128	0					
ANR	808283	Identifier	s		807128	1					
ANR	808284	PrimaryExpression	'a'		807128	1					
ANR	808285	RelationalExpression	* s <= 'f'		807128	1		<=			
ANR	808286	UnaryOperationExpression	* s		807128	0					
ANR	808287	UnaryOperator	*		807128	0					
ANR	808288	Identifier	s		807128	1					
ANR	808289	PrimaryExpression	'f'		807128	1					
ANR	808290	ExpressionStatement	cases [ i ] += ( * s - 'a' ) + 10	1109:18:28497:28524	807128	1	True				
ANR	808291	AssignmentExpression	cases [ i ] += ( * s - 'a' ) + 10		807128	0		+=			
ANR	808292	ArrayIndexing	cases [ i ]		807128	0					
ANR	808293	Identifier	cases		807128	0					
ANR	808294	Identifier	i		807128	1					
ANR	808295	AdditiveExpression	( * s - 'a' ) + 10		807128	1		+			
ANR	808296	AdditiveExpression	* s - 'a'		807128	0		-			
ANR	808297	UnaryOperationExpression	* s		807128	0					
ANR	808298	UnaryOperator	*		807128	0					
ANR	808299	Identifier	s		807128	1					
ANR	808300	PrimaryExpression	'a'		807128	1					
ANR	808301	PrimaryExpression	10		807128	1					
ANR	808302	ExpressionStatement	s ++	1110:16:28542:28545	807128	2	True				
ANR	808303	PostIncDecOperationExpression	s ++		807128	0					
ANR	808304	Identifier	s		807128	0					
ANR	808305	IncDec	++		807128	1					
ANR	808306	IfStatement	if ( * s == ';' )		807128	1					
ANR	808307	Condition	* s == ';'	1112:16:28577:28585	807128	0	True				
ANR	808308	EqualityExpression	* s == ';'		807128	0		==			
ANR	808309	UnaryOperationExpression	* s		807128	0					
ANR	808310	UnaryOperator	*		807128	0					
ANR	808311	Identifier	s		807128	1					
ANR	808312	PrimaryExpression	';'		807128	1					
ANR	808313	ExpressionStatement	s ++	1113:14:28602:28605	807128	1	True				
ANR	808314	PostIncDecOperationExpression	s ++		807128	0					
ANR	808315	Identifier	s		807128	0					
ANR	808316	IncDec	++		807128	1					
ANR	808317	IfStatement	if ( cases [ 0 ] && cases [ 1 ] )		807128	26					
ANR	808318	Condition	cases [ 0 ] && cases [ 1 ]	1115:12:28629:28648	807128	0	True				
ANR	808319	AndExpression	cases [ 0 ] && cases [ 1 ]		807128	0		&&			
ANR	808320	ArrayIndexing	cases [ 0 ]		807128	0					
ANR	808321	Identifier	cases		807128	0					
ANR	808322	PrimaryExpression	0		807128	1					
ANR	808323	ArrayIndexing	cases [ 1 ]		807128	1					
ANR	808324	Identifier	cases		807128	0					
ANR	808325	PrimaryExpression	1		807128	1					
ANR	808326	ExpressionStatement	add_title ( code )	1119:10:28762:28777	807128	1	True				
ANR	808327	CallExpression	add_title ( code )		807128	0					
ANR	808328	Callee	add_title		807128	0					
ANR	808329	Identifier	add_title		807128	0					
ANR	808330	ArgumentList	code		807128	1					
ANR	808331	Argument	code		807128	0					
ANR	808332	Identifier	code		807128	0					
ANR	808333	ElseStatement	else		807128	0					
ANR	808334	IfStatement	if ( cases [ 1 ] )		807128	0					
ANR	808335	Condition	cases [ 1 ]	1120:17:28796:28803	807128	0	True				
ANR	808336	ArrayIndexing	cases [ 1 ]		807128	0					
ANR	808337	Identifier	cases		807128	0					
ANR	808338	PrimaryExpression	1		807128	1					
ANR	808339	ExpressionStatement	add_upper ( code )	1125:10:28937:28952	807128	1	True				
ANR	808340	CallExpression	add_upper ( code )		807128	0					
ANR	808341	Callee	add_upper		807128	0					
ANR	808342	Identifier	add_upper		807128	0					
ANR	808343	ArgumentList	code		807128	1					
ANR	808344	Argument	code		807128	0					
ANR	808345	Identifier	code		807128	0					
ANR	808346	ElseStatement	else		807128	0					
ANR	808347	IfStatement	if ( cases [ 0 ] )		807128	0					
ANR	808348	Condition	cases [ 0 ]	1126:17:28971:28978	807128	0	True				
ANR	808349	ArrayIndexing	cases [ 0 ]		807128	0					
ANR	808350	Identifier	cases		807128	0					
ANR	808351	PrimaryExpression	0		807128	1					
ANR	808352	ExpressionStatement	add_lower ( code )	1131:10:29112:29127	807128	1	True				
ANR	808353	CallExpression	add_lower ( code )		807128	0					
ANR	808354	Callee	add_lower		807128	0					
ANR	808355	Identifier	add_lower		807128	0					
ANR	808356	ArgumentList	code		807128	1					
ANR	808357	Argument	code		807128	0					
ANR	808358	Identifier	code		807128	0					
ANR	808359	ReturnType	static void		807128	1					
ANR	808360	Identifier	read_cdata		807128	2					
ANR	808361	ParameterList	FILE * in		807128	3					
ANR	808362	Parameter	FILE * in	820:11:20908:20915	807128	0	True				
ANR	808363	ParameterType	FILE *		807128	0					
ANR	808364	Identifier	in		807128	1					
ANR	808365	CFGEntryNode	ENTRY		807128		True				
ANR	808366	CFGExitNode	EXIT		807128		True				
ANR	808367	Symbol	* s ++		807128						
ANR	808368	Symbol	code		807128						
ANR	808369	Symbol	* wnum		807128						
ANR	808370	Symbol	line		807128						
ANR	808371	Symbol	strchr		807128						
ANR	808372	Symbol	skip		807128						
ANR	808373	Symbol	* line		807128						
ANR	808374	Symbol	* cases		807128						
ANR	808375	Symbol	fgets		807128						
ANR	808376	Symbol	dectmp_size		807128						
ANR	808377	Symbol	* dectmp		807128						
ANR	808378	Symbol	number		807128						
ANR	808379	Symbol	neg		807128						
ANR	808380	Symbol	ccl_code		807128						
ANR	808381	Symbol	wnum		807128						
ANR	808382	Symbol	ishdigit		807128						
ANR	808383	Symbol	cases		807128						
ANR	808384	Symbol	in		807128						
ANR	808385	Symbol	e		807128						
ANR	808386	Symbol	i		807128						
ANR	808387	Symbol	* dectmp_size		807128						
ANR	808388	Symbol	* number		807128						
ANR	808389	Symbol	* e		807128						
ANR	808390	Symbol	lineno		807128						
ANR	808391	Symbol	s		807128						
ANR	808392	Symbol	* i		807128						
ANR	808393	Symbol	dectmp		807128						
ANR	808394	Symbol	compat		807128						
ANR	808395	Symbol	* s		807128						
ANR	808396	Function	find_decomp	1137:0:29145:29575							
ANR	808397	FunctionDef	"find_decomp (ac_uint4 code , short compat)"		808396	0					
ANR	808398	CompoundStatement		1139:0:29205:29575	808396	0					
ANR	808399	IdentifierDeclStatement	"long l , r , m ;"	1140:4:29211:29223	808396	0	True				
ANR	808400	IdentifierDecl	l		808396	0					
ANR	808401	IdentifierDeclType	long		808396	0					
ANR	808402	Identifier	l		808396	1					
ANR	808403	IdentifierDecl	r		808396	1					
ANR	808404	IdentifierDeclType	long		808396	0					
ANR	808405	Identifier	r		808396	1					
ANR	808406	IdentifierDecl	m		808396	2					
ANR	808407	IdentifierDeclType	long		808396	0					
ANR	808408	Identifier	m		808396	1					
ANR	808409	IdentifierDeclStatement	_decomp_t * decs ;	1141:4:29229:29244	808396	1	True				
ANR	808410	IdentifierDecl	* decs		808396	0					
ANR	808411	IdentifierDeclType	_decomp_t *		808396	0					
ANR	808412	Identifier	decs		808396	1					
ANR	808413	ExpressionStatement	l = 0	1143:4:29255:29260	808396	2	True				
ANR	808414	AssignmentExpression	l = 0		808396	0		=			
ANR	808415	Identifier	l		808396	0					
ANR	808416	PrimaryExpression	0		808396	1					
ANR	808417	ExpressionStatement	r = ( compat ? kdecomps_used : decomps_used ) - 1	1144:4:29266:29313	808396	3	True				
ANR	808418	AssignmentExpression	r = ( compat ? kdecomps_used : decomps_used ) - 1		808396	0		=			
ANR	808419	Identifier	r		808396	0					
ANR	808420	AdditiveExpression	( compat ? kdecomps_used : decomps_used ) - 1		808396	1		-			
ANR	808421	ConditionalExpression	compat ? kdecomps_used : decomps_used		808396	0					
ANR	808422	Condition	compat		808396	0					
ANR	808423	Identifier	compat		808396	0					
ANR	808424	Identifier	kdecomps_used		808396	1					
ANR	808425	Identifier	decomps_used		808396	2					
ANR	808426	PrimaryExpression	1		808396	1					
ANR	808427	ExpressionStatement	decs = compat ? kdecomps : decomps	1145:4:29319:29353	808396	4	True				
ANR	808428	AssignmentExpression	decs = compat ? kdecomps : decomps		808396	0		=			
ANR	808429	Identifier	decs		808396	0					
ANR	808430	ConditionalExpression	compat ? kdecomps : decomps		808396	1					
ANR	808431	Condition	compat		808396	0					
ANR	808432	Identifier	compat		808396	0					
ANR	808433	Identifier	kdecomps		808396	1					
ANR	808434	Identifier	decomps		808396	2					
ANR	808435	WhileStatement	while ( l <= r )		808396	5					
ANR	808436	Condition	l <= r	1146:11:29366:29371	808396	0	True				
ANR	808437	RelationalExpression	l <= r		808396	0		<=			
ANR	808438	Identifier	l		808396	0					
ANR	808439	Identifier	r		808396	1					
ANR	808440	CompoundStatement		8:19:168:168	808396	1					
ANR	808441	ExpressionStatement	m = ( l + r ) >> 1	1147:8:29384:29400	808396	0	True				
ANR	808442	AssignmentExpression	m = ( l + r ) >> 1		808396	0		=			
ANR	808443	Identifier	m		808396	0					
ANR	808444	ShiftExpression	( l + r ) >> 1		808396	1		>>			
ANR	808445	AdditiveExpression	l + r		808396	0		+			
ANR	808446	Identifier	l		808396	0					
ANR	808447	Identifier	r		808396	1					
ANR	808448	PrimaryExpression	1		808396	1					
ANR	808449	IfStatement	if ( code > decs [ m ] . code )		808396	1					
ANR	808450	Condition	code > decs [ m ] . code	1148:12:29414:29432	808396	0	True				
ANR	808451	RelationalExpression	code > decs [ m ] . code		808396	0		>			
ANR	808452	Identifier	code		808396	0					
ANR	808453	MemberAccess	decs [ m ] . code		808396	1					
ANR	808454	ArrayIndexing	decs [ m ]		808396	0					
ANR	808455	Identifier	decs		808396	0					
ANR	808456	Identifier	m		808396	1					
ANR	808457	Identifier	code		808396	1					
ANR	808458	ExpressionStatement	l = m + 1	1149:10:29445:29454	808396	1	True				
ANR	808459	AssignmentExpression	l = m + 1		808396	0		=			
ANR	808460	Identifier	l		808396	0					
ANR	808461	AdditiveExpression	m + 1		808396	1		+			
ANR	808462	Identifier	m		808396	0					
ANR	808463	PrimaryExpression	1		808396	1					
ANR	808464	ElseStatement	else		808396	0					
ANR	808465	IfStatement	if ( code < decs [ m ] . code )		808396	0					
ANR	808466	Condition	code < decs [ m ] . code	1150:17:29473:29491	808396	0	True				
ANR	808467	RelationalExpression	code < decs [ m ] . code		808396	0		<			
ANR	808468	Identifier	code		808396	0					
ANR	808469	MemberAccess	decs [ m ] . code		808396	1					
ANR	808470	ArrayIndexing	decs [ m ]		808396	0					
ANR	808471	Identifier	decs		808396	0					
ANR	808472	Identifier	m		808396	1					
ANR	808473	Identifier	code		808396	1					
ANR	808474	ExpressionStatement	r = m - 1	1151:10:29504:29513	808396	1	True				
ANR	808475	AssignmentExpression	r = m - 1		808396	0		=			
ANR	808476	Identifier	r		808396	0					
ANR	808477	AdditiveExpression	m - 1		808396	1		-			
ANR	808478	Identifier	m		808396	0					
ANR	808479	PrimaryExpression	1		808396	1					
ANR	808480	ElseStatement	else		808396	0					
ANR	808481	ReturnStatement	return & decs [ m ] ;	1153:10:29538:29553	808396	0	True				
ANR	808482	UnaryOperationExpression	& decs [ m ]		808396	0					
ANR	808483	UnaryOperator	&		808396	0					
ANR	808484	ArrayIndexing	decs [ m ]		808396	1					
ANR	808485	Identifier	decs		808396	0					
ANR	808486	Identifier	m		808396	1					
ANR	808487	ReturnStatement	return 0 ;	1155:4:29565:29573	808396	6	True				
ANR	808488	PrimaryExpression	0		808396	0					
ANR	808489	ReturnType	static _decomp_t *		808396	1					
ANR	808490	Identifier	find_decomp		808396	2					
ANR	808491	ParameterList	"ac_uint4 code , short compat"		808396	3					
ANR	808492	Parameter	ac_uint4 code	1138:12:29176:29188	808396	0	True				
ANR	808493	ParameterType	ac_uint4		808396	0					
ANR	808494	Identifier	code		808396	1					
ANR	808495	Parameter	short compat	1138:27:29191:29202	808396	1	True				
ANR	808496	ParameterType	short		808396	0					
ANR	808497	Identifier	compat		808396	1					
ANR	808498	CFGEntryNode	ENTRY		808396		True				
ANR	808499	CFGExitNode	EXIT		808396		True				
ANR	808500	Symbol	code		808396						
ANR	808501	Symbol	decomps_used		808396						
ANR	808502	Symbol	l		808396						
ANR	808503	Symbol	decomps		808396						
ANR	808504	Symbol	m		808396						
ANR	808505	Symbol	decs [ m ] . code		808396						
ANR	808506	Symbol	r		808396						
ANR	808507	Symbol	kdecomps		808396						
ANR	808508	Symbol	* m		808396						
ANR	808509	Symbol	kdecomps_used		808396						
ANR	808510	Symbol	* decs		808396						
ANR	808511	Symbol	compat		808396						
ANR	808512	Symbol	decs		808396						
ANR	808513	Function	decomp_it	1158:0:29578:29861							
ANR	808514	FunctionDef	"decomp_it (_decomp_t * d , short compat)"		808513	0					
ANR	808515	CompoundStatement		1160:0:29628:29861	808513	0					
ANR	808516	IdentifierDeclStatement	ac_uint4 i ;	1161:4:29634:29644	808513	0	True				
ANR	808517	IdentifierDecl	i		808513	0					
ANR	808518	IdentifierDeclType	ac_uint4		808513	0					
ANR	808519	Identifier	i		808513	1					
ANR	808520	IdentifierDeclStatement	_decomp_t * dp ;	1162:4:29650:29663	808513	1	True				
ANR	808521	IdentifierDecl	* dp		808513	0					
ANR	808522	IdentifierDeclType	_decomp_t *		808513	0					
ANR	808523	Identifier	dp		808513	1					
ANR	808524	ForStatement	for ( i = 0 ; i < d -> used ; i ++ )		808513	2					
ANR	808525	ForInit	i = 0 ;	1164:9:29675:29680	808513	0	True				
ANR	808526	AssignmentExpression	i = 0		808513	0		=			
ANR	808527	Identifier	i		808513	0					
ANR	808528	PrimaryExpression	0		808513	1					
ANR	808529	Condition	i < d -> used	1164:16:29682:29692	808513	1	True				
ANR	808530	RelationalExpression	i < d -> used		808513	0		<			
ANR	808531	Identifier	i		808513	0					
ANR	808532	PtrMemberAccess	d -> used		808513	1					
ANR	808533	Identifier	d		808513	0					
ANR	808534	Identifier	used		808513	1					
ANR	808535	PostIncDecOperationExpression	i ++	1164:29:29695:29697	808513	2	True				
ANR	808536	Identifier	i		808513	0					
ANR	808537	IncDec	++		808513	1					
ANR	808538	CompoundStatement		5:34:71:71	808513	3					
ANR	808539	IfStatement	"if ( ( dp = find_decomp ( d -> decomp [ i ] , compat ) ) != 0 )"		808513	0					
ANR	808540	Condition	"( dp = find_decomp ( d -> decomp [ i ] , compat ) ) != 0"	1165:12:29714:29758	808513	0	True				
ANR	808541	EqualityExpression	"( dp = find_decomp ( d -> decomp [ i ] , compat ) ) != 0"		808513	0		!=			
ANR	808542	AssignmentExpression	"dp = find_decomp ( d -> decomp [ i ] , compat )"		808513	0		=			
ANR	808543	Identifier	dp		808513	0					
ANR	808544	CallExpression	"find_decomp ( d -> decomp [ i ] , compat )"		808513	1					
ANR	808545	Callee	find_decomp		808513	0					
ANR	808546	Identifier	find_decomp		808513	0					
ANR	808547	ArgumentList	d -> decomp [ i ]		808513	1					
ANR	808548	Argument	d -> decomp [ i ]		808513	0					
ANR	808549	ArrayIndexing	d -> decomp [ i ]		808513	0					
ANR	808550	PtrMemberAccess	d -> decomp		808513	0					
ANR	808551	Identifier	d		808513	0					
ANR	808552	Identifier	decomp		808513	1					
ANR	808553	Identifier	i		808513	1					
ANR	808554	Argument	compat		808513	1					
ANR	808555	Identifier	compat		808513	0					
ANR	808556	PrimaryExpression	0		808513	1					
ANR	808557	ExpressionStatement	"decomp_it ( dp , compat )"	1166:10:29771:29792	808513	1	True				
ANR	808558	CallExpression	"decomp_it ( dp , compat )"		808513	0					
ANR	808559	Callee	decomp_it		808513	0					
ANR	808560	Identifier	decomp_it		808513	0					
ANR	808561	ArgumentList	dp		808513	1					
ANR	808562	Argument	dp		808513	0					
ANR	808563	Identifier	dp		808513	0					
ANR	808564	Argument	compat		808513	1					
ANR	808565	Identifier	compat		808513	0					
ANR	808566	ElseStatement	else		808513	0					
ANR	808567	ExpressionStatement	dectmp [ dectmp_size ++ ] = d -> decomp [ i ]	1168:10:29817:29853	808513	0	True				
ANR	808568	AssignmentExpression	dectmp [ dectmp_size ++ ] = d -> decomp [ i ]		808513	0		=			
ANR	808569	ArrayIndexing	dectmp [ dectmp_size ++ ]		808513	0					
ANR	808570	Identifier	dectmp		808513	0					
ANR	808571	PostIncDecOperationExpression	dectmp_size ++		808513	1					
ANR	808572	Identifier	dectmp_size		808513	0					
ANR	808573	IncDec	++		808513	1					
ANR	808574	ArrayIndexing	d -> decomp [ i ]		808513	1					
ANR	808575	PtrMemberAccess	d -> decomp		808513	0					
ANR	808576	Identifier	d		808513	0					
ANR	808577	Identifier	decomp		808513	1					
ANR	808578	Identifier	i		808513	1					
ANR	808579	ReturnType	static void		808513	1					
ANR	808580	Identifier	decomp_it		808513	2					
ANR	808581	ParameterList	"_decomp_t * d , short compat"		808513	3					
ANR	808582	Parameter	_decomp_t * d	1159:10:29600:29611	808513	0	True				
ANR	808583	ParameterType	_decomp_t *		808513	0					
ANR	808584	Identifier	d		808513	1					
ANR	808585	Parameter	short compat	1159:24:29614:29625	808513	1	True				
ANR	808586	ParameterType	short		808513	0					
ANR	808587	Identifier	compat		808513	1					
ANR	808588	CFGEntryNode	ENTRY		808513		True				
ANR	808589	CFGExitNode	EXIT		808513		True				
ANR	808590	Symbol	d		808513						
ANR	808591	Symbol	* * d		808513						
ANR	808592	Symbol	i		808513						
ANR	808593	Symbol	dp		808513						
ANR	808594	Symbol	* d		808513						
ANR	808595	Symbol	dectmp_size		808513						
ANR	808596	Symbol	d -> used		808513						
ANR	808597	Symbol	* dectmp		808513						
ANR	808598	Symbol	* i		808513						
ANR	808599	Symbol	dectmp		808513						
ANR	808600	Symbol	find_decomp		808513						
ANR	808601	Symbol	compat		808513						
ANR	808602	Symbol	d -> decomp		808513						
ANR	808603	Symbol	* d -> decomp		808513						
ANR	808604	Function	expand_decomp	1177:0:29968:30379							
ANR	808605	FunctionDef	expand_decomp ()		808604	0					
ANR	808606	CompoundStatement		1179:0:30000:30379	808604	0					
ANR	808607	IdentifierDeclStatement	ac_uint4 i ;	1180:4:30006:30016	808604	0	True				
ANR	808608	IdentifierDecl	i		808604	0					
ANR	808609	IdentifierDeclType	ac_uint4		808604	0					
ANR	808610	Identifier	i		808604	1					
ANR	808611	ForStatement	for ( i = 0 ; i < decomps_used ; i ++ )		808604	1					
ANR	808612	ForInit	i = 0 ;	1182:9:30028:30033	808604	0	True				
ANR	808613	AssignmentExpression	i = 0		808604	0		=			
ANR	808614	Identifier	i		808604	0					
ANR	808615	PrimaryExpression	0		808604	1					
ANR	808616	Condition	i < decomps_used	1182:16:30035:30050	808604	1	True				
ANR	808617	RelationalExpression	i < decomps_used		808604	0		<			
ANR	808618	Identifier	i		808604	0					
ANR	808619	Identifier	decomps_used		808604	1					
ANR	808620	PostIncDecOperationExpression	i ++	1182:34:30053:30055	808604	2	True				
ANR	808621	Identifier	i		808604	0					
ANR	808622	IncDec	++		808604	1					
ANR	808623	CompoundStatement		4:39:57:57	808604	3					
ANR	808624	ExpressionStatement	dectmp_size = 0	1183:8:30068:30083	808604	0	True				
ANR	808625	AssignmentExpression	dectmp_size = 0		808604	0		=			
ANR	808626	Identifier	dectmp_size		808604	0					
ANR	808627	PrimaryExpression	0		808604	1					
ANR	808628	ExpressionStatement	"decomp_it ( & decomps [ i ] , 0 )"	1184:8:30093:30118	808604	1	True				
ANR	808629	CallExpression	"decomp_it ( & decomps [ i ] , 0 )"		808604	0					
ANR	808630	Callee	decomp_it		808604	0					
ANR	808631	Identifier	decomp_it		808604	0					
ANR	808632	ArgumentList	& decomps [ i ]		808604	1					
ANR	808633	Argument	& decomps [ i ]		808604	0					
ANR	808634	UnaryOperationExpression	& decomps [ i ]		808604	0					
ANR	808635	UnaryOperator	&		808604	0					
ANR	808636	ArrayIndexing	decomps [ i ]		808604	1					
ANR	808637	Identifier	decomps		808604	0					
ANR	808638	Identifier	i		808604	1					
ANR	808639	Argument	0		808604	1					
ANR	808640	PrimaryExpression	0		808604	0					
ANR	808641	IfStatement	if ( dectmp_size > 0 )		808604	2					
ANR	808642	Condition	dectmp_size > 0	1185:12:30132:30146	808604	0	True				
ANR	808643	RelationalExpression	dectmp_size > 0		808604	0		>			
ANR	808644	Identifier	dectmp_size		808604	0					
ANR	808645	PrimaryExpression	0		808604	1					
ANR	808646	ExpressionStatement	"add_decomp ( decomps [ i ] . code , 0 )"	1186:10:30159:30189	808604	1	True				
ANR	808647	CallExpression	"add_decomp ( decomps [ i ] . code , 0 )"		808604	0					
ANR	808648	Callee	add_decomp		808604	0					
ANR	808649	Identifier	add_decomp		808604	0					
ANR	808650	ArgumentList	decomps [ i ] . code		808604	1					
ANR	808651	Argument	decomps [ i ] . code		808604	0					
ANR	808652	MemberAccess	decomps [ i ] . code		808604	0					
ANR	808653	ArrayIndexing	decomps [ i ]		808604	0					
ANR	808654	Identifier	decomps		808604	0					
ANR	808655	Identifier	i		808604	1					
ANR	808656	Identifier	code		808604	1					
ANR	808657	Argument	0		808604	1					
ANR	808658	PrimaryExpression	0		808604	0					
ANR	808659	ForStatement	for ( i = 0 ; i < kdecomps_used ; i ++ )		808604	2					
ANR	808660	ForInit	i = 0 ;	1189:9:30207:30212	808604	0	True				
ANR	808661	AssignmentExpression	i = 0		808604	0		=			
ANR	808662	Identifier	i		808604	0					
ANR	808663	PrimaryExpression	0		808604	1					
ANR	808664	Condition	i < kdecomps_used	1189:16:30214:30230	808604	1	True				
ANR	808665	RelationalExpression	i < kdecomps_used		808604	0		<			
ANR	808666	Identifier	i		808604	0					
ANR	808667	Identifier	kdecomps_used		808604	1					
ANR	808668	PostIncDecOperationExpression	i ++	1189:35:30233:30235	808604	2	True				
ANR	808669	Identifier	i		808604	0					
ANR	808670	IncDec	++		808604	1					
ANR	808671	CompoundStatement		11:40:237:237	808604	3					
ANR	808672	ExpressionStatement	dectmp_size = 0	1190:8:30248:30263	808604	0	True				
ANR	808673	AssignmentExpression	dectmp_size = 0		808604	0		=			
ANR	808674	Identifier	dectmp_size		808604	0					
ANR	808675	PrimaryExpression	0		808604	1					
ANR	808676	ExpressionStatement	"decomp_it ( & kdecomps [ i ] , 1 )"	1191:8:30273:30299	808604	1	True				
ANR	808677	CallExpression	"decomp_it ( & kdecomps [ i ] , 1 )"		808604	0					
ANR	808678	Callee	decomp_it		808604	0					
ANR	808679	Identifier	decomp_it		808604	0					
ANR	808680	ArgumentList	& kdecomps [ i ]		808604	1					
ANR	808681	Argument	& kdecomps [ i ]		808604	0					
ANR	808682	UnaryOperationExpression	& kdecomps [ i ]		808604	0					
ANR	808683	UnaryOperator	&		808604	0					
ANR	808684	ArrayIndexing	kdecomps [ i ]		808604	1					
ANR	808685	Identifier	kdecomps		808604	0					
ANR	808686	Identifier	i		808604	1					
ANR	808687	Argument	1		808604	1					
ANR	808688	PrimaryExpression	1		808604	0					
ANR	808689	IfStatement	if ( dectmp_size > 0 )		808604	2					
ANR	808690	Condition	dectmp_size > 0	1192:12:30313:30327	808604	0	True				
ANR	808691	RelationalExpression	dectmp_size > 0		808604	0		>			
ANR	808692	Identifier	dectmp_size		808604	0					
ANR	808693	PrimaryExpression	0		808604	1					
ANR	808694	ExpressionStatement	"add_decomp ( kdecomps [ i ] . code , 1 )"	1193:10:30340:30371	808604	1	True				
ANR	808695	CallExpression	"add_decomp ( kdecomps [ i ] . code , 1 )"		808604	0					
ANR	808696	Callee	add_decomp		808604	0					
ANR	808697	Identifier	add_decomp		808604	0					
ANR	808698	ArgumentList	kdecomps [ i ] . code		808604	1					
ANR	808699	Argument	kdecomps [ i ] . code		808604	0					
ANR	808700	MemberAccess	kdecomps [ i ] . code		808604	0					
ANR	808701	ArrayIndexing	kdecomps [ i ]		808604	0					
ANR	808702	Identifier	kdecomps		808604	0					
ANR	808703	Identifier	i		808604	1					
ANR	808704	Identifier	code		808604	1					
ANR	808705	Argument	1		808604	1					
ANR	808706	PrimaryExpression	1		808604	0					
ANR	808707	ReturnType	static void		808604	1					
ANR	808708	Identifier	expand_decomp		808604	2					
ANR	808709	ParameterList			808604	3					
ANR	808710	CFGEntryNode	ENTRY		808604		True				
ANR	808711	CFGExitNode	EXIT		808604		True				
ANR	808712	Symbol	* decomps		808604						
ANR	808713	Symbol	decomps_used		808604						
ANR	808714	Symbol	* i		808604						
ANR	808715	Symbol	kdecomps		808604						
ANR	808716	Symbol	decomps [ i ] . code		808604						
ANR	808717	Symbol	i		808604						
ANR	808718	Symbol	* kdecomps		808604						
ANR	808719	Symbol	kdecomps_used		808604						
ANR	808720	Symbol	decomps		808604						
ANR	808721	Symbol	kdecomps [ i ] . code		808604						
ANR	808722	Symbol	dectmp_size		808604						
ANR	808723	Function	cmpcomps	1197:0:30382:30618							
ANR	808724	FunctionDef	"cmpcomps (const void * v_comp1 , const void * v_comp2)"		808723	0					
ANR	808725	CompoundStatement		1199:0:30444:30618	808723	0					
ANR	808726	IdentifierDeclStatement	"const _comp_t * comp1 = v_comp1 , * comp2 = v_comp2 ;"	1200:1:30447:30495	808723	0	True				
ANR	808727	IdentifierDecl	* comp1 = v_comp1		808723	0					
ANR	808728	IdentifierDeclType	const _comp_t *		808723	0					
ANR	808729	Identifier	comp1		808723	1					
ANR	808730	AssignmentExpression	* comp1 = v_comp1		808723	2		=			
ANR	808731	Identifier	v_comp1		808723	0					
ANR	808732	Identifier	v_comp1		808723	1					
ANR	808733	IdentifierDecl	* comp2 = v_comp2		808723	1					
ANR	808734	IdentifierDeclType	const _comp_t *		808723	0					
ANR	808735	Identifier	comp2		808723	1					
ANR	808736	AssignmentExpression	* comp2 = v_comp2		808723	2		=			
ANR	808737	Identifier	v_comp2		808723	0					
ANR	808738	Identifier	v_comp2		808723	1					
ANR	808739	IdentifierDeclStatement	long diff = comp1 -> code1 - comp2 -> code1 ;	1201:4:30501:30540	808723	1	True				
ANR	808740	IdentifierDecl	diff = comp1 -> code1 - comp2 -> code1		808723	0					
ANR	808741	IdentifierDeclType	long		808723	0					
ANR	808742	Identifier	diff		808723	1					
ANR	808743	AssignmentExpression	diff = comp1 -> code1 - comp2 -> code1		808723	2		=			
ANR	808744	Identifier	diff		808723	0					
ANR	808745	AdditiveExpression	comp1 -> code1 - comp2 -> code1		808723	1		-			
ANR	808746	PtrMemberAccess	comp1 -> code1		808723	0					
ANR	808747	Identifier	comp1		808723	0					
ANR	808748	Identifier	code1		808723	1					
ANR	808749	PtrMemberAccess	comp2 -> code1		808723	1					
ANR	808750	Identifier	comp2		808723	0					
ANR	808751	Identifier	code1		808723	1					
ANR	808752	IfStatement	if ( ! diff )		808723	2					
ANR	808753	Condition	! diff	1203:8:30551:30555	808723	0	True				
ANR	808754	UnaryOperationExpression	! diff		808723	0					
ANR	808755	UnaryOperator	!		808723	0					
ANR	808756	Identifier	diff		808723	1					
ANR	808757	ExpressionStatement	diff = comp1 -> code2 - comp2 -> code2	1204:1:30559:30593	808723	1	True				
ANR	808758	AssignmentExpression	diff = comp1 -> code2 - comp2 -> code2		808723	0		=			
ANR	808759	Identifier	diff		808723	0					
ANR	808760	AdditiveExpression	comp1 -> code2 - comp2 -> code2		808723	1		-			
ANR	808761	PtrMemberAccess	comp1 -> code2		808723	0					
ANR	808762	Identifier	comp1		808723	0					
ANR	808763	Identifier	code2		808723	1					
ANR	808764	PtrMemberAccess	comp2 -> code2		808723	1					
ANR	808765	Identifier	comp2		808723	0					
ANR	808766	Identifier	code2		808723	1					
ANR	808767	ReturnStatement	return ( int ) diff ;	1205:4:30599:30616	808723	3	True				
ANR	808768	CastExpression	( int ) diff		808723	0					
ANR	808769	CastTarget	int		808723	0					
ANR	808770	Identifier	diff		808723	1					
ANR	808771	ReturnType	static int		808723	1					
ANR	808772	Identifier	cmpcomps		808723	2					
ANR	808773	ParameterList	"const void * v_comp1 , const void * v_comp2"		808723	3					
ANR	808774	Parameter	const void * v_comp1	1198:9:30402:30420	808723	0	True				
ANR	808775	ParameterType	const void *		808723	0					
ANR	808776	Identifier	v_comp1		808723	1					
ANR	808777	Parameter	const void * v_comp2	1198:30:30423:30441	808723	1	True				
ANR	808778	ParameterType	const void *		808723	0					
ANR	808779	Identifier	v_comp2		808723	1					
ANR	808780	CFGEntryNode	ENTRY		808723		True				
ANR	808781	CFGExitNode	EXIT		808723		True				
ANR	808782	Symbol	comp2		808723						
ANR	808783	Symbol	comp1		808723						
ANR	808784	Symbol	comp2 -> code2		808723						
ANR	808785	Symbol	comp2 -> code1		808723						
ANR	808786	Symbol	v_comp2		808723						
ANR	808787	Symbol	comp1 -> code2		808723						
ANR	808788	Symbol	diff		808723						
ANR	808789	Symbol	* comp2		808723						
ANR	808790	Symbol	v_comp1		808723						
ANR	808791	Symbol	* comp1		808723						
ANR	808792	Symbol	comp1 -> code1		808723						
ANR	808793	Function	read_compexdata	1213:0:30671:31501							
ANR	808794	FunctionDef	read_compexdata (FILE * in)		808793	0					
ANR	808795	CompoundStatement		1215:0:30709:31501	808793	0					
ANR	808796	IdentifierDeclStatement	ac_uint2 i ;	1216:4:30715:30725	808793	0	True				
ANR	808797	IdentifierDecl	i		808793	0					
ANR	808798	IdentifierDeclType	ac_uint2		808793	0					
ANR	808799	Identifier	i		808793	1					
ANR	808800	IdentifierDeclStatement	ac_uint4 code ;	1217:4:30731:30744	808793	1	True				
ANR	808801	IdentifierDecl	code		808793	0					
ANR	808802	IdentifierDeclType	ac_uint4		808793	0					
ANR	808803	Identifier	code		808793	1					
ANR	808804	IdentifierDeclStatement	"char line [ 512 ] , * s ;"	1218:4:30750:30768	808793	2	True				
ANR	808805	IdentifierDecl	line [ 512 ]		808793	0					
ANR	808806	IdentifierDeclType	char [ 512 ]		808793	0					
ANR	808807	Identifier	line		808793	1					
ANR	808808	PrimaryExpression	512		808793	2					
ANR	808809	IdentifierDecl	* s		808793	1					
ANR	808810	IdentifierDeclType	char *		808793	0					
ANR	808811	Identifier	s		808793	1					
ANR	808812	ExpressionStatement	"( void ) memset ( ( char * ) compexs , 0 , sizeof ( compexs ) )"	1220:4:30775:30826	808793	3	True				
ANR	808813	CastExpression	"( void ) memset ( ( char * ) compexs , 0 , sizeof ( compexs ) )"		808793	0					
ANR	808814	CastTarget	void		808793	0					
ANR	808815	CallExpression	"memset ( ( char * ) compexs , 0 , sizeof ( compexs ) )"		808793	1					
ANR	808816	Callee	memset		808793	0					
ANR	808817	Identifier	memset		808793	0					
ANR	808818	ArgumentList	( char * ) compexs		808793	1					
ANR	808819	Argument	( char * ) compexs		808793	0					
ANR	808820	CastExpression	( char * ) compexs		808793	0					
ANR	808821	CastTarget	char *		808793	0					
ANR	808822	Identifier	compexs		808793	1					
ANR	808823	Argument	0		808793	1					
ANR	808824	PrimaryExpression	0		808793	0					
ANR	808825	Argument	sizeof ( compexs )		808793	2					
ANR	808826	SizeofExpression	sizeof ( compexs )		808793	0					
ANR	808827	Sizeof	sizeof		808793	0					
ANR	808828	SizeofOperand	compexs		808793	1					
ANR	808829	WhileStatement	"while ( fgets ( line , sizeof ( line ) , in ) )"		808793	4					
ANR	808830	Condition	"fgets ( line , sizeof ( line ) , in )"	1222:11:30840:30868	808793	0	True				
ANR	808831	CallExpression	"fgets ( line , sizeof ( line ) , in )"		808793	0					
ANR	808832	Callee	fgets		808793	0					
ANR	808833	Identifier	fgets		808793	0					
ANR	808834	ArgumentList	line		808793	1					
ANR	808835	Argument	line		808793	0					
ANR	808836	Identifier	line		808793	0					
ANR	808837	Argument	sizeof ( line )		808793	1					
ANR	808838	SizeofExpression	sizeof ( line )		808793	0					
ANR	808839	Sizeof	sizeof		808793	0					
ANR	808840	SizeofOperand	line		808793	1					
ANR	808841	Argument	in		808793	2					
ANR	808842	Identifier	in		808793	0					
ANR	808843	CompoundStatement		8:42:161:161	808793	1					
ANR	808844	IfStatement	"if ( ( s = strchr ( line , '\\n' ) ) )"		808793	0					
ANR	808845	Condition	"s = strchr ( line , '\\n' )"	1223:5:30878:30899	808793	0	True				
ANR	808846	AssignmentExpression	"s = strchr ( line , '\\n' )"		808793	0		=			
ANR	808847	Identifier	s		808793	0					
ANR	808848	CallExpression	"strchr ( line , '\\n' )"		808793	1					
ANR	808849	Callee	strchr		808793	0					
ANR	808850	Identifier	strchr		808793	0					
ANR	808851	ArgumentList	line		808793	1					
ANR	808852	Argument	line		808793	0					
ANR	808853	Identifier	line		808793	0					
ANR	808854	Argument	'\\n'		808793	1					
ANR	808855	PrimaryExpression	'\\n'		808793	0					
ANR	808856	ExpressionStatement	* s = '\\0'	1223:30:30903:30912	808793	1	True				
ANR	808857	AssignmentExpression	* s = '\\0'		808793	0		=			
ANR	808858	UnaryOperationExpression	* s		808793	0					
ANR	808859	UnaryOperator	*		808793	0					
ANR	808860	Identifier	s		808793	1					
ANR	808861	PrimaryExpression	'\\0'		808793	1					
ANR	808862	IfStatement	if ( line [ 0 ] == 0 || line [ 0 ] == '#' )		808793	1					
ANR	808863	Condition	line [ 0 ] == 0 || line [ 0 ] == '#'	1227:12:31010:31039	808793	0	True				
ANR	808864	OrExpression	line [ 0 ] == 0 || line [ 0 ] == '#'		808793	0		||			
ANR	808865	EqualityExpression	line [ 0 ] == 0		808793	0		==			
ANR	808866	ArrayIndexing	line [ 0 ]		808793	0					
ANR	808867	Identifier	line		808793	0					
ANR	808868	PrimaryExpression	0		808793	1					
ANR	808869	PrimaryExpression	0		808793	1					
ANR	808870	EqualityExpression	line [ 0 ] == '#'		808793	1		==			
ANR	808871	ArrayIndexing	line [ 0 ]		808793	0					
ANR	808872	Identifier	line		808793	0					
ANR	808873	PrimaryExpression	0		808793	1					
ANR	808874	PrimaryExpression	'#'		808793	1					
ANR	808875	ContinueStatement	continue ;	1228:5:31047:31055	808793	1	True				
ANR	808876	ForStatement	"for ( s = line , i = code = 0 ; * s != '#' && i < 6 ; i ++ , s ++ )"		808793	2					
ANR	808877	ForInit	"s = line , i = code = 0 ;"	1234:6:31131:31153	808793	0	True				
ANR	808878	Expression	"s = line , i = code = 0"		808793	0					
ANR	808879	AssignmentExpression	s = line		808793	0		=			
ANR	808880	Identifier	s		808793	0					
ANR	808881	Identifier	line		808793	1					
ANR	808882	AssignmentExpression	i = code = 0		808793	1		=			
ANR	808883	Identifier	i		808793	0					
ANR	808884	AssignmentExpression	code = 0		808793	1		=			
ANR	808885	Identifier	code		808793	0					
ANR	808886	PrimaryExpression	0		808793	1					
ANR	808887	Condition	* s != '#' && i < 6	1234:30:31155:31172	808793	1	True				
ANR	808888	AndExpression	* s != '#' && i < 6		808793	0		&&			
ANR	808889	EqualityExpression	* s != '#'		808793	0		!=			
ANR	808890	UnaryOperationExpression	* s		808793	0					
ANR	808891	UnaryOperator	*		808793	0					
ANR	808892	Identifier	s		808793	1					
ANR	808893	PrimaryExpression	'#'		808793	1					
ANR	808894	RelationalExpression	i < 6		808793	1		<			
ANR	808895	Identifier	i		808793	0					
ANR	808896	PrimaryExpression	6		808793	1					
ANR	808897	Expression	"i ++ , s ++"	1234:50:31175:31182	808793	2	True				
ANR	808898	PostIncDecOperationExpression	i ++		808793	0					
ANR	808899	Identifier	i		808793	0					
ANR	808900	IncDec	++		808793	1					
ANR	808901	PostIncDecOperationExpression	s ++		808793	1					
ANR	808902	Identifier	s		808793	0					
ANR	808903	IncDec	++		808793	1					
ANR	808904	CompoundStatement		20:60:475:475	808793	3					
ANR	808905	IfStatement	if ( isspace ( ( unsigned char ) * s ) )		808793	0					
ANR	808906	Condition	isspace ( ( unsigned char ) * s )	1235:9:31196:31221	808793	0	True				
ANR	808907	CallExpression	isspace ( ( unsigned char ) * s )		808793	0					
ANR	808908	Callee	isspace		808793	0					
ANR	808909	Identifier	isspace		808793	0					
ANR	808910	ArgumentList	( unsigned char ) * s		808793	1					
ANR	808911	Argument	( unsigned char ) * s		808793	0					
ANR	808912	CastExpression	( unsigned char ) * s		808793	0					
ANR	808913	CastTarget	unsigned char		808793	0					
ANR	808914	UnaryOperationExpression	* s		808793	1					
ANR	808915	UnaryOperator	*		808793	0					
ANR	808916	Identifier	s		808793	1					
ANR	808917	BreakStatement	break ;	1235:37:31224:31229	808793	1	True				
ANR	808918	ExpressionStatement	code <<= 4	1236:12:31243:31253	808793	1	True				
ANR	808919	AssignmentExpression	code <<= 4		808793	0		<<=			
ANR	808920	Identifier	code		808793	0					
ANR	808921	PrimaryExpression	4		808793	1					
ANR	808922	IfStatement	if ( * s >= '0' && * s <= '9' )		808793	2					
ANR	808923	Condition	* s >= '0' && * s <= '9'	1237:16:31271:31292	808793	0	True				
ANR	808924	AndExpression	* s >= '0' && * s <= '9'		808793	0		&&			
ANR	808925	RelationalExpression	* s >= '0'		808793	0		>=			
ANR	808926	UnaryOperationExpression	* s		808793	0					
ANR	808927	UnaryOperator	*		808793	0					
ANR	808928	Identifier	s		808793	1					
ANR	808929	PrimaryExpression	'0'		808793	1					
ANR	808930	RelationalExpression	* s <= '9'		808793	1		<=			
ANR	808931	UnaryOperationExpression	* s		808793	0					
ANR	808932	UnaryOperator	*		808793	0					
ANR	808933	Identifier	s		808793	1					
ANR	808934	PrimaryExpression	'9'		808793	1					
ANR	808935	ExpressionStatement	code += * s - '0'	1238:2:31297:31313	808793	1	True				
ANR	808936	AssignmentExpression	code += * s - '0'		808793	0		+=			
ANR	808937	Identifier	code		808793	0					
ANR	808938	AdditiveExpression	* s - '0'		808793	1		-			
ANR	808939	UnaryOperationExpression	* s		808793	0					
ANR	808940	UnaryOperator	*		808793	0					
ANR	808941	Identifier	s		808793	1					
ANR	808942	PrimaryExpression	'0'		808793	1					
ANR	808943	ElseStatement	else		808793	0					
ANR	808944	IfStatement	if ( * s >= 'A' && * s <= 'F' )		808793	0					
ANR	808945	Condition	* s >= 'A' && * s <= 'F'	1239:21:31336:31357	808793	0	True				
ANR	808946	AndExpression	* s >= 'A' && * s <= 'F'		808793	0		&&			
ANR	808947	RelationalExpression	* s >= 'A'		808793	0		>=			
ANR	808948	UnaryOperationExpression	* s		808793	0					
ANR	808949	UnaryOperator	*		808793	0					
ANR	808950	Identifier	s		808793	1					
ANR	808951	PrimaryExpression	'A'		808793	1					
ANR	808952	RelationalExpression	* s <= 'F'		808793	1		<=			
ANR	808953	UnaryOperationExpression	* s		808793	0					
ANR	808954	UnaryOperator	*		808793	0					
ANR	808955	Identifier	s		808793	1					
ANR	808956	PrimaryExpression	'F'		808793	1					
ANR	808957	ExpressionStatement	code += ( * s - 'A' ) + 10	1240:2:31362:31385	808793	1	True				
ANR	808958	AssignmentExpression	code += ( * s - 'A' ) + 10		808793	0		+=			
ANR	808959	Identifier	code		808793	0					
ANR	808960	AdditiveExpression	( * s - 'A' ) + 10		808793	1		+			
ANR	808961	AdditiveExpression	* s - 'A'		808793	0		-			
ANR	808962	UnaryOperationExpression	* s		808793	0					
ANR	808963	UnaryOperator	*		808793	0					
ANR	808964	Identifier	s		808793	1					
ANR	808965	PrimaryExpression	'A'		808793	1					
ANR	808966	PrimaryExpression	10		808793	1					
ANR	808967	ElseStatement	else		808793	0					
ANR	808968	IfStatement	if ( * s >= 'a' && * s <= 'f' )		808793	0					
ANR	808969	Condition	* s >= 'a' && * s <= 'f'	1241:21:31408:31429	808793	0	True				
ANR	808970	AndExpression	* s >= 'a' && * s <= 'f'		808793	0		&&			
ANR	808971	RelationalExpression	* s >= 'a'		808793	0		>=			
ANR	808972	UnaryOperationExpression	* s		808793	0					
ANR	808973	UnaryOperator	*		808793	0					
ANR	808974	Identifier	s		808793	1					
ANR	808975	PrimaryExpression	'a'		808793	1					
ANR	808976	RelationalExpression	* s <= 'f'		808793	1		<=			
ANR	808977	UnaryOperationExpression	* s		808793	0					
ANR	808978	UnaryOperator	*		808793	0					
ANR	808979	Identifier	s		808793	1					
ANR	808980	PrimaryExpression	'f'		808793	1					
ANR	808981	ExpressionStatement	code += ( * s - 'a' ) + 10	1242:2:31434:31457	808793	1	True				
ANR	808982	AssignmentExpression	code += ( * s - 'a' ) + 10		808793	0		+=			
ANR	808983	Identifier	code		808793	0					
ANR	808984	AdditiveExpression	( * s - 'a' ) + 10		808793	1		+			
ANR	808985	AdditiveExpression	* s - 'a'		808793	0		-			
ANR	808986	UnaryOperationExpression	* s		808793	0					
ANR	808987	UnaryOperator	*		808793	0					
ANR	808988	Identifier	s		808793	1					
ANR	808989	PrimaryExpression	'a'		808793	1					
ANR	808990	PrimaryExpression	10		808793	1					
ANR	808991	ExpressionStatement	COMPEX_SET ( code )	1244:8:31477:31493	808793	3	True				
ANR	808992	CallExpression	COMPEX_SET ( code )		808793	0					
ANR	808993	Callee	COMPEX_SET		808793	0					
ANR	808994	Identifier	COMPEX_SET		808793	0					
ANR	808995	ArgumentList	code		808793	1					
ANR	808996	Argument	code		808793	0					
ANR	808997	Identifier	code		808793	0					
ANR	808998	ReturnType	static void		808793	1					
ANR	808999	Identifier	read_compexdata		808793	2					
ANR	809000	ParameterList	FILE * in		808793	3					
ANR	809001	Parameter	FILE * in	1214:16:30699:30706	808793	0	True				
ANR	809002	ParameterType	FILE *		808793	0					
ANR	809003	Identifier	in		808793	1					
ANR	809004	CFGEntryNode	ENTRY		808793		True				
ANR	809005	CFGExitNode	EXIT		808793		True				
ANR	809006	Symbol	code		808793						
ANR	809007	Symbol	s		808793						
ANR	809008	Symbol	in		808793						
ANR	809009	Symbol	line		808793						
ANR	809010	Symbol	compexs		808793						
ANR	809011	Symbol	isspace		808793						
ANR	809012	Symbol	i		808793						
ANR	809013	Symbol	strchr		808793						
ANR	809014	Symbol	* line		808793						
ANR	809015	Symbol	* s		808793						
ANR	809016	Symbol	fgets		808793						
ANR	809017	Function	create_comps	1253:0:31576:32043							
ANR	809018	FunctionDef	create_comps ()		809017	0					
ANR	809019	CompoundStatement		1255:0:31607:32043	809017	0					
ANR	809020	IdentifierDeclStatement	"ac_uint4 i , cu ;"	1256:4:31613:31627	809017	0	True				
ANR	809021	IdentifierDecl	i		809017	0					
ANR	809022	IdentifierDeclType	ac_uint4		809017	0					
ANR	809023	Identifier	i		809017	1					
ANR	809024	IdentifierDecl	cu		809017	1					
ANR	809025	IdentifierDeclType	ac_uint4		809017	0					
ANR	809026	Identifier	cu		809017	1					
ANR	809027	ExpressionStatement	comps = ( _comp_t * ) malloc ( comps_used * sizeof ( _comp_t ) )	1258:4:31634:31690	809017	1	True				
ANR	809028	AssignmentExpression	comps = ( _comp_t * ) malloc ( comps_used * sizeof ( _comp_t ) )		809017	0		=			
ANR	809029	Identifier	comps		809017	0					
ANR	809030	CastExpression	( _comp_t * ) malloc ( comps_used * sizeof ( _comp_t ) )		809017	1					
ANR	809031	CastTarget	_comp_t *		809017	0					
ANR	809032	CallExpression	malloc ( comps_used * sizeof ( _comp_t ) )		809017	1					
ANR	809033	Callee	malloc		809017	0					
ANR	809034	Identifier	malloc		809017	0					
ANR	809035	ArgumentList	comps_used * sizeof ( _comp_t )		809017	1					
ANR	809036	Argument	comps_used * sizeof ( _comp_t )		809017	0					
ANR	809037	MultiplicativeExpression	comps_used * sizeof ( _comp_t )		809017	0		*			
ANR	809038	Identifier	comps_used		809017	0					
ANR	809039	SizeofExpression	sizeof ( _comp_t )		809017	1					
ANR	809040	Sizeof	sizeof		809017	0					
ANR	809041	SizeofOperand	_comp_t		809017	1					
ANR	809042	ForStatement	for ( i = cu = 0 ; i < decomps_used ; i ++ )		809017	2					
ANR	809043	ForInit	i = cu = 0 ;	1260:9:31702:31712	809017	0	True				
ANR	809044	AssignmentExpression	i = cu = 0		809017	0		=			
ANR	809045	Identifier	i		809017	0					
ANR	809046	AssignmentExpression	cu = 0		809017	1		=			
ANR	809047	Identifier	cu		809017	0					
ANR	809048	PrimaryExpression	0		809017	1					
ANR	809049	Condition	i < decomps_used	1260:21:31714:31729	809017	1	True				
ANR	809050	RelationalExpression	i < decomps_used		809017	0		<			
ANR	809051	Identifier	i		809017	0					
ANR	809052	Identifier	decomps_used		809017	1					
ANR	809053	PostIncDecOperationExpression	i ++	1260:39:31732:31734	809017	2	True				
ANR	809054	Identifier	i		809017	0					
ANR	809055	IncDec	++		809017	1					
ANR	809056	CompoundStatement		6:44:129:129	809017	3					
ANR	809057	IfStatement	if ( decomps [ i ] . used != 2 || COMPEX_TEST ( decomps [ i ] . code ) )		809017	0					
ANR	809058	Condition	decomps [ i ] . used != 2 || COMPEX_TEST ( decomps [ i ] . code )	1261:5:31744:31795	809017	0	True				
ANR	809059	OrExpression	decomps [ i ] . used != 2 || COMPEX_TEST ( decomps [ i ] . code )		809017	0		||			
ANR	809060	EqualityExpression	decomps [ i ] . used != 2		809017	0		!=			
ANR	809061	MemberAccess	decomps [ i ] . used		809017	0					
ANR	809062	ArrayIndexing	decomps [ i ]		809017	0					
ANR	809063	Identifier	decomps		809017	0					
ANR	809064	Identifier	i		809017	1					
ANR	809065	Identifier	used		809017	1					
ANR	809066	PrimaryExpression	2		809017	1					
ANR	809067	CallExpression	COMPEX_TEST ( decomps [ i ] . code )		809017	1					
ANR	809068	Callee	COMPEX_TEST		809017	0					
ANR	809069	Identifier	COMPEX_TEST		809017	0					
ANR	809070	ArgumentList	decomps [ i ] . code		809017	1					
ANR	809071	Argument	decomps [ i ] . code		809017	0					
ANR	809072	MemberAccess	decomps [ i ] . code		809017	0					
ANR	809073	ArrayIndexing	decomps [ i ]		809017	0					
ANR	809074	Identifier	decomps		809017	0					
ANR	809075	Identifier	i		809017	1					
ANR	809076	Identifier	code		809017	1					
ANR	809077	ContinueStatement	continue ;	1262:5:31803:31811	809017	1	True				
ANR	809078	ExpressionStatement	comps [ cu ] . comp = decomps [ i ] . code	1263:1:31814:31846	809017	1	True				
ANR	809079	AssignmentExpression	comps [ cu ] . comp = decomps [ i ] . code		809017	0		=			
ANR	809080	MemberAccess	comps [ cu ] . comp		809017	0					
ANR	809081	ArrayIndexing	comps [ cu ]		809017	0					
ANR	809082	Identifier	comps		809017	0					
ANR	809083	Identifier	cu		809017	1					
ANR	809084	Identifier	comp		809017	1					
ANR	809085	MemberAccess	decomps [ i ] . code		809017	1					
ANR	809086	ArrayIndexing	decomps [ i ]		809017	0					
ANR	809087	Identifier	decomps		809017	0					
ANR	809088	Identifier	i		809017	1					
ANR	809089	Identifier	code		809017	1					
ANR	809090	ExpressionStatement	comps [ cu ] . count = 2	1264:1:31849:31868	809017	2	True				
ANR	809091	AssignmentExpression	comps [ cu ] . count = 2		809017	0		=			
ANR	809092	MemberAccess	comps [ cu ] . count		809017	0					
ANR	809093	ArrayIndexing	comps [ cu ]		809017	0					
ANR	809094	Identifier	comps		809017	0					
ANR	809095	Identifier	cu		809017	1					
ANR	809096	Identifier	count		809017	1					
ANR	809097	PrimaryExpression	2		809017	1					
ANR	809098	ExpressionStatement	comps [ cu ] . code1 = decomps [ i ] . decomp [ 0 ]	1265:1:31871:31909	809017	3	True				
ANR	809099	AssignmentExpression	comps [ cu ] . code1 = decomps [ i ] . decomp [ 0 ]		809017	0		=			
ANR	809100	MemberAccess	comps [ cu ] . code1		809017	0					
ANR	809101	ArrayIndexing	comps [ cu ]		809017	0					
ANR	809102	Identifier	comps		809017	0					
ANR	809103	Identifier	cu		809017	1					
ANR	809104	Identifier	code1		809017	1					
ANR	809105	ArrayIndexing	decomps [ i ] . decomp [ 0 ]		809017	1					
ANR	809106	MemberAccess	decomps [ i ] . decomp		809017	0					
ANR	809107	ArrayIndexing	decomps [ i ]		809017	0					
ANR	809108	Identifier	decomps		809017	0					
ANR	809109	Identifier	i		809017	1					
ANR	809110	Identifier	decomp		809017	1					
ANR	809111	PrimaryExpression	0		809017	1					
ANR	809112	ExpressionStatement	comps [ cu ] . code2 = decomps [ i ] . decomp [ 1 ]	1266:1:31912:31950	809017	4	True				
ANR	809113	AssignmentExpression	comps [ cu ] . code2 = decomps [ i ] . decomp [ 1 ]		809017	0		=			
ANR	809114	MemberAccess	comps [ cu ] . code2		809017	0					
ANR	809115	ArrayIndexing	comps [ cu ]		809017	0					
ANR	809116	Identifier	comps		809017	0					
ANR	809117	Identifier	cu		809017	1					
ANR	809118	Identifier	code2		809017	1					
ANR	809119	ArrayIndexing	decomps [ i ] . decomp [ 1 ]		809017	1					
ANR	809120	MemberAccess	decomps [ i ] . decomp		809017	0					
ANR	809121	ArrayIndexing	decomps [ i ]		809017	0					
ANR	809122	Identifier	decomps		809017	0					
ANR	809123	Identifier	i		809017	1					
ANR	809124	Identifier	decomp		809017	1					
ANR	809125	PrimaryExpression	1		809017	1					
ANR	809126	ExpressionStatement	cu ++	1267:1:31953:31957	809017	5	True				
ANR	809127	PostIncDecOperationExpression	cu ++		809017	0					
ANR	809128	Identifier	cu		809017	0					
ANR	809129	IncDec	++		809017	1					
ANR	809130	ExpressionStatement	comps_used = cu	1269:4:31969:31984	809017	3	True				
ANR	809131	AssignmentExpression	comps_used = cu		809017	0		=			
ANR	809132	Identifier	comps_used		809017	0					
ANR	809133	Identifier	cu		809017	1					
ANR	809134	ExpressionStatement	"qsort ( comps , comps_used , sizeof ( _comp_t ) , cmpcomps )"	1270:4:31990:32041	809017	4	True				
ANR	809135	CallExpression	"qsort ( comps , comps_used , sizeof ( _comp_t ) , cmpcomps )"		809017	0					
ANR	809136	Callee	qsort		809017	0					
ANR	809137	Identifier	qsort		809017	0					
ANR	809138	ArgumentList	comps		809017	1					
ANR	809139	Argument	comps		809017	0					
ANR	809140	Identifier	comps		809017	0					
ANR	809141	Argument	comps_used		809017	1					
ANR	809142	Identifier	comps_used		809017	0					
ANR	809143	Argument	sizeof ( _comp_t )		809017	2					
ANR	809144	SizeofExpression	sizeof ( _comp_t )		809017	0					
ANR	809145	Sizeof	sizeof		809017	0					
ANR	809146	SizeofOperand	_comp_t		809017	1					
ANR	809147	Argument	cmpcomps		809017	3					
ANR	809148	Identifier	cmpcomps		809017	0					
ANR	809149	ReturnType	static void		809017	1					
ANR	809150	Identifier	create_comps		809017	2					
ANR	809151	ParameterList			809017	3					
ANR	809152	CFGEntryNode	ENTRY		809017		True				
ANR	809153	CFGExitNode	EXIT		809017		True				
ANR	809154	Symbol	malloc		809017						
ANR	809155	Symbol	comps [ cu ] . comp		809017						
ANR	809156	Symbol	* decomps		809017						
ANR	809157	Symbol	* * i		809017						
ANR	809158	Symbol	comps		809017						
ANR	809159	Symbol	comps_used		809017						
ANR	809160	Symbol	decomps_used		809017						
ANR	809161	Symbol	i		809017						
ANR	809162	Symbol	* comps		809017						
ANR	809163	Symbol	decomps [ i ] . decomp		809017						
ANR	809164	Symbol	decomps		809017						
ANR	809165	Symbol	cu		809017						
ANR	809166	Symbol	* i		809017						
ANR	809167	Symbol	comps [ cu ] . count		809017						
ANR	809168	Symbol	* * decomps		809017						
ANR	809169	Symbol	decomps [ i ] . code		809017						
ANR	809170	Symbol	comps [ cu ] . code2		809017						
ANR	809171	Symbol	* cu		809017						
ANR	809172	Symbol	comps [ cu ] . code1		809017						
ANR	809173	Symbol	COMPEX_TEST		809017						
ANR	809174	Symbol	* decomps [ i ] . decomp		809017						
ANR	809175	Symbol	decomps [ i ] . used		809017						
ANR	809176	Symbol	cmpcomps		809017						
ANR	809177	Function	write_case	1276:0:32072:32378							
ANR	809178	FunctionDef	"write_case (FILE * out , _case_t * tab , int num , int first)"		809177	0					
ANR	809179	CompoundStatement		1278:0:32140:32378	809177	0					
ANR	809180	IdentifierDeclStatement	int i ;	1279:4:32146:32151	809177	0	True				
ANR	809181	IdentifierDecl	i		809177	0					
ANR	809182	IdentifierDeclType	int		809177	0					
ANR	809183	Identifier	i		809177	1					
ANR	809184	ForStatement	for ( i = 0 ; i < num ; i ++ )		809177	1					
ANR	809185	ForInit	i = 0 ;	1281:9:32163:32166	809177	0	True				
ANR	809186	AssignmentExpression	i = 0		809177	0		=			
ANR	809187	Identifier	i		809177	0					
ANR	809188	PrimaryExpression	0		809177	1					
ANR	809189	Condition	i < num	1281:14:32168:32172	809177	1	True				
ANR	809190	RelationalExpression	i < num		809177	0		<			
ANR	809191	Identifier	i		809177	0					
ANR	809192	Identifier	num		809177	1					
ANR	809193	PostIncDecOperationExpression	i ++	1281:21:32175:32177	809177	2	True				
ANR	809194	Identifier	i		809177	0					
ANR	809195	IncDec	++		809177	1					
ANR	809196	CompoundStatement		4:26:39:39	809177	3					
ANR	809197	IfStatement	if ( first )		809177	0					
ANR	809198	Condition	first	1282:5:32187:32191	809177	0	True				
ANR	809199	Identifier	first		809177	0					
ANR	809200	ExpressionStatement	first = 0	1282:12:32194:32203	809177	1	True				
ANR	809201	AssignmentExpression	first = 0		809177	0		=			
ANR	809202	Identifier	first		809177	0					
ANR	809203	PrimaryExpression	0		809177	1					
ANR	809204	ElseStatement	else		809177	0					
ANR	809205	ExpressionStatement	"fprintf ( out , "","" )"	1283:6:32211:32228	809177	0	True				
ANR	809206	CallExpression	"fprintf ( out , "","" )"		809177	0					
ANR	809207	Callee	fprintf		809177	0					
ANR	809208	Identifier	fprintf		809177	0					
ANR	809209	ArgumentList	out		809177	1					
ANR	809210	Argument	out		809177	0					
ANR	809211	Identifier	out		809177	0					
ANR	809212	Argument	""","""		809177	1					
ANR	809213	PrimaryExpression	""","""		809177	0					
ANR	809214	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx, 0x%08lx"" , ( unsigned long ) tab [ i ] . key , ( unsigned long ) tab [ i ] . other1 , ( unsigned long ) tab [ i ] . other2 )"	1284:1:32231:32370	809177	1	True				
ANR	809215	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx, 0x%08lx"" , ( unsigned long ) tab [ i ] . key , ( unsigned long ) tab [ i ] . other1 , ( unsigned long ) tab [ i ] . other2 )"		809177	0					
ANR	809216	Callee	fprintf		809177	0					
ANR	809217	Identifier	fprintf		809177	0					
ANR	809218	ArgumentList	out		809177	1					
ANR	809219	Argument	out		809177	0					
ANR	809220	Identifier	out		809177	0					
ANR	809221	Argument	"""\\n\\t0x%08lx, 0x%08lx, 0x%08lx"""		809177	1					
ANR	809222	PrimaryExpression	"""\\n\\t0x%08lx, 0x%08lx, 0x%08lx"""		809177	0					
ANR	809223	Argument	( unsigned long ) tab [ i ] . key		809177	2					
ANR	809224	CastExpression	( unsigned long ) tab [ i ] . key		809177	0					
ANR	809225	CastTarget	unsigned long		809177	0					
ANR	809226	MemberAccess	tab [ i ] . key		809177	1					
ANR	809227	ArrayIndexing	tab [ i ]		809177	0					
ANR	809228	Identifier	tab		809177	0					
ANR	809229	Identifier	i		809177	1					
ANR	809230	Identifier	key		809177	1					
ANR	809231	Argument	( unsigned long ) tab [ i ] . other1		809177	3					
ANR	809232	CastExpression	( unsigned long ) tab [ i ] . other1		809177	0					
ANR	809233	CastTarget	unsigned long		809177	0					
ANR	809234	MemberAccess	tab [ i ] . other1		809177	1					
ANR	809235	ArrayIndexing	tab [ i ]		809177	0					
ANR	809236	Identifier	tab		809177	0					
ANR	809237	Identifier	i		809177	1					
ANR	809238	Identifier	other1		809177	1					
ANR	809239	Argument	( unsigned long ) tab [ i ] . other2		809177	4					
ANR	809240	CastExpression	( unsigned long ) tab [ i ] . other2		809177	0					
ANR	809241	CastTarget	unsigned long		809177	0					
ANR	809242	MemberAccess	tab [ i ] . other2		809177	1					
ANR	809243	ArrayIndexing	tab [ i ]		809177	0					
ANR	809244	Identifier	tab		809177	0					
ANR	809245	Identifier	i		809177	1					
ANR	809246	Identifier	other2		809177	1					
ANR	809247	ReturnType	static void		809177	1					
ANR	809248	Identifier	write_case		809177	2					
ANR	809249	ParameterList	"FILE * out , _case_t * tab , int num , int first"		809177	3					
ANR	809250	Parameter	FILE * out	1277:11:32095:32103	809177	0	True				
ANR	809251	ParameterType	FILE *		809177	0					
ANR	809252	Identifier	out		809177	1					
ANR	809253	Parameter	_case_t * tab	1277:22:32106:32117	809177	1	True				
ANR	809254	ParameterType	_case_t *		809177	0					
ANR	809255	Identifier	tab		809177	1					
ANR	809256	Parameter	int num	1277:36:32120:32126	809177	2	True				
ANR	809257	ParameterType	int		809177	0					
ANR	809258	Identifier	num		809177	1					
ANR	809259	Parameter	int first	1277:45:32129:32137	809177	3	True				
ANR	809260	ParameterType	int		809177	0					
ANR	809261	Identifier	first		809177	1					
ANR	809262	CFGEntryNode	ENTRY		809177		True				
ANR	809263	CFGExitNode	EXIT		809177		True				
ANR	809264	Symbol	tab [ i ] . other1		809177						
ANR	809265	Symbol	tab [ i ] . other2		809177						
ANR	809266	Symbol	* i		809177						
ANR	809267	Symbol	tab		809177						
ANR	809268	Symbol	num		809177						
ANR	809269	Symbol	i		809177						
ANR	809270	Symbol	tab [ i ] . key		809177						
ANR	809271	Symbol	first		809177						
ANR	809272	Symbol	out		809177						
ANR	809273	Symbol	* tab		809177						
ANR	809274	Function	write_cdata	1294:0:32419:48730							
ANR	809275	FunctionDef	write_cdata (char * opath)		809274	0					
ANR	809276	CompoundStatement		1296:0:32456:48730	809274	0					
ANR	809277	IdentifierDeclStatement	FILE * out ;	1297:4:32462:32471	809274	0	True				
ANR	809278	IdentifierDecl	* out		809274	0					
ANR	809279	IdentifierDeclType	FILE *		809274	0					
ANR	809280	Identifier	out		809274	1					
ANR	809281	IdentifierDeclStatement	ac_uint4 bytes ;	1298:1:32474:32488	809274	1	True				
ANR	809282	IdentifierDecl	bytes		809274	0					
ANR	809283	IdentifierDeclType	ac_uint4		809274	0					
ANR	809284	Identifier	bytes		809274	1					
ANR	809285	IdentifierDeclStatement	"ac_uint4 i , idx , nprops ;"	1299:4:32494:32517	809274	2	True				
ANR	809286	IdentifierDecl	i		809274	0					
ANR	809287	IdentifierDeclType	ac_uint4		809274	0					
ANR	809288	Identifier	i		809274	1					
ANR	809289	IdentifierDecl	idx		809274	1					
ANR	809290	IdentifierDeclType	ac_uint4		809274	0					
ANR	809291	Identifier	idx		809274	1					
ANR	809292	IdentifierDecl	nprops		809274	2					
ANR	809293	IdentifierDeclType	ac_uint4		809274	0					
ANR	809294	Identifier	nprops		809274	1					
ANR	809295	IdentifierDeclStatement	ac_uint2 casecnt [ 2 ] ;	1301:4:32544:32563	809274	3	True				
ANR	809296	IdentifierDecl	casecnt [ 2 ]		809274	0					
ANR	809297	IdentifierDeclType	ac_uint2 [ 2 ]		809274	0					
ANR	809298	Identifier	casecnt		809274	1					
ANR	809299	PrimaryExpression	2		809274	2					
ANR	809300	IdentifierDeclStatement	char path [ BUFSIZ ] ;	1303:4:32576:32593	809274	4	True				
ANR	809301	IdentifierDecl	path [ BUFSIZ ]		809274	0					
ANR	809302	IdentifierDeclType	char [ BUFSIZ ]		809274	0					
ANR	809303	Identifier	path		809274	1					
ANR	809304	Identifier	BUFSIZ		809274	2					
ANR	809305	IdentifierDeclStatement	"int j , k ;"	1305:4:32617:32625	809274	5	True				
ANR	809306	IdentifierDecl	j		809274	0					
ANR	809307	IdentifierDeclType	int		809274	0					
ANR	809308	Identifier	j		809274	1					
ANR	809309	IdentifierDecl	k		809274	1					
ANR	809310	IdentifierDeclType	int		809274	0					
ANR	809311	Identifier	k		809274	1					
ANR	809312	Statement	snprintf	1316:4:32866:32873	809274	6	True				
ANR	809313	Statement	(	1316:12:32874:32874	809274	7	True				
ANR	809314	Statement	path	1316:13:32875:32878	809274	8	True				
ANR	809315	Statement	","	1316:17:32879:32879	809274	9	True				
ANR	809316	Statement	sizeof	1316:19:32881:32886	809274	10	True				
ANR	809317	Statement	path	1316:26:32888:32891	809274	11	True				
ANR	809318	Statement	","	1316:30:32892:32892	809274	12	True				
ANR	809319	Statement	"""%s"""	1316:32:32894:32897	809274	13	True				
ANR	809320	Statement	LDAP_DIRSEP	1316:37:32899:32909	809274	14	True				
ANR	809321	Statement	"""uctable.h"""	1316:49:32911:32921	809274	15	True				
ANR	809322	Statement	","	1316:60:32922:32922	809274	16	True				
ANR	809323	Statement	opath	1316:62:32924:32928	809274	17	True				
ANR	809324	Statement	)	1316:67:32929:32929	809274	18	True				
ANR	809325	ExpressionStatement		1316:68:32930:32930	809274	19	True				
ANR	809326	IfStatement	"if ( ( out = fopen ( path , ""w"" ) ) == 0 )"		809274	20					
ANR	809327	Condition	"( out = fopen ( path , ""w"" ) ) == 0"	1317:8:32940:32968	809274	0	True				
ANR	809328	EqualityExpression	"( out = fopen ( path , ""w"" ) ) == 0"		809274	0		==			
ANR	809329	AssignmentExpression	"out = fopen ( path , ""w"" )"		809274	0		=			
ANR	809330	Identifier	out		809274	0					
ANR	809331	CallExpression	"fopen ( path , ""w"" )"		809274	1					
ANR	809332	Callee	fopen		809274	0					
ANR	809333	Identifier	fopen		809274	0					
ANR	809334	ArgumentList	path		809274	1					
ANR	809335	Argument	path		809274	0					
ANR	809336	Identifier	path		809274	0					
ANR	809337	Argument	"""w"""		809274	1					
ANR	809338	PrimaryExpression	"""w"""		809274	0					
ANR	809339	PrimaryExpression	0		809274	1					
ANR	809340	ReturnStatement	return ;	1318:6:32977:32983	809274	1	True				
ANR	809341	ForStatement	for ( i = idx = 0 ; i < NUMPROPS ; i ++ )		809274	21					
ANR	809342	ForInit	i = idx = 0 ;	1333:9:33365:33376	809274	0	True				
ANR	809343	AssignmentExpression	i = idx = 0		809274	0		=			
ANR	809344	Identifier	i		809274	0					
ANR	809345	AssignmentExpression	idx = 0		809274	1		=			
ANR	809346	Identifier	idx		809274	0					
ANR	809347	PrimaryExpression	0		809274	1					
ANR	809348	Condition	i < NUMPROPS	1333:22:33378:33389	809274	1	True				
ANR	809349	RelationalExpression	i < NUMPROPS		809274	0		<			
ANR	809350	Identifier	i		809274	0					
ANR	809351	Identifier	NUMPROPS		809274	1					
ANR	809352	PostIncDecOperationExpression	i ++	1333:36:33392:33394	809274	2	True				
ANR	809353	Identifier	i		809274	0					
ANR	809354	IncDec	++		809274	1					
ANR	809355	CompoundStatement		38:41:940:940	809274	3					
ANR	809356	ExpressionStatement	propcnt [ i ] = ( proptbl [ i ] . used != 0 ) ? idx : 0xffff	1334:8:33407:33457	809274	0	True				
ANR	809357	AssignmentExpression	propcnt [ i ] = ( proptbl [ i ] . used != 0 ) ? idx : 0xffff		809274	0		=			
ANR	809358	ArrayIndexing	propcnt [ i ]		809274	0					
ANR	809359	Identifier	propcnt		809274	0					
ANR	809360	Identifier	i		809274	1					
ANR	809361	ConditionalExpression	( proptbl [ i ] . used != 0 ) ? idx : 0xffff		809274	1					
ANR	809362	Condition	proptbl [ i ] . used != 0		809274	0					
ANR	809363	EqualityExpression	proptbl [ i ] . used != 0		809274	0		!=			
ANR	809364	MemberAccess	proptbl [ i ] . used		809274	0					
ANR	809365	ArrayIndexing	proptbl [ i ]		809274	0					
ANR	809366	Identifier	proptbl		809274	0					
ANR	809367	Identifier	i		809274	1					
ANR	809368	Identifier	used		809274	1					
ANR	809369	PrimaryExpression	0		809274	1					
ANR	809370	Identifier	idx		809274	1					
ANR	809371	PrimaryExpression	0xffff		809274	2					
ANR	809372	ExpressionStatement	idx += proptbl [ i ] . used	1335:8:33467:33489	809274	1	True				
ANR	809373	AssignmentExpression	idx += proptbl [ i ] . used		809274	0		+=			
ANR	809374	Identifier	idx		809274	0					
ANR	809375	MemberAccess	proptbl [ i ] . used		809274	1					
ANR	809376	ArrayIndexing	proptbl [ i ]		809274	0					
ANR	809377	Identifier	proptbl		809274	0					
ANR	809378	Identifier	i		809274	1					
ANR	809379	Identifier	used		809274	1					
ANR	809380	ExpressionStatement	propcnt [ i ] = idx	1342:4:33622:33638	809274	22	True				
ANR	809381	AssignmentExpression	propcnt [ i ] = idx		809274	0		=			
ANR	809382	ArrayIndexing	propcnt [ i ]		809274	0					
ANR	809383	Identifier	propcnt		809274	0					
ANR	809384	Identifier	i		809274	1					
ANR	809385	Identifier	idx		809274	1					
ANR	809386	ExpressionStatement	hdr [ 1 ] = NUMPROPS	1349:4:33834:33851	809274	23	True				
ANR	809387	AssignmentExpression	hdr [ 1 ] = NUMPROPS		809274	0		=			
ANR	809388	ArrayIndexing	hdr [ 1 ]		809274	0					
ANR	809389	Identifier	hdr		809274	0					
ANR	809390	PrimaryExpression	1		809274	1					
ANR	809391	Identifier	NUMPROPS		809274	1					
ANR	809392	IfStatement	if ( ( bytes = sizeof ( ac_uint2 ) * ( NUMPROPS + 1 ) ) & 3 )		809274	24					
ANR	809393	Condition	( bytes = sizeof ( ac_uint2 ) * ( NUMPROPS + 1 ) ) & 3	1355:8:33979:34025	809274	0	True				
ANR	809394	BitAndExpression	( bytes = sizeof ( ac_uint2 ) * ( NUMPROPS + 1 ) ) & 3		809274	0		&			
ANR	809395	AssignmentExpression	bytes = sizeof ( ac_uint2 ) * ( NUMPROPS + 1 )		809274	0		=			
ANR	809396	Identifier	bytes		809274	0					
ANR	809397	MultiplicativeExpression	sizeof ( ac_uint2 ) * ( NUMPROPS + 1 )		809274	1		*			
ANR	809398	SizeofExpression	sizeof ( ac_uint2 )		809274	0					
ANR	809399	Sizeof	sizeof		809274	0					
ANR	809400	SizeofOperand	ac_uint2		809274	1					
ANR	809401	AdditiveExpression	NUMPROPS + 1		809274	1		+			
ANR	809402	Identifier	NUMPROPS		809274	0					
ANR	809403	PrimaryExpression	1		809274	1					
ANR	809404	PrimaryExpression	3		809274	1					
ANR	809405	ExpressionStatement	bytes += 4 - ( bytes & 3 )	1356:6:34034:34058	809274	1	True				
ANR	809406	AssignmentExpression	bytes += 4 - ( bytes & 3 )		809274	0		+=			
ANR	809407	Identifier	bytes		809274	0					
ANR	809408	AdditiveExpression	4 - ( bytes & 3 )		809274	1		-			
ANR	809409	PrimaryExpression	4		809274	0					
ANR	809410	BitAndExpression	bytes & 3		809274	1		&			
ANR	809411	Identifier	bytes		809274	0					
ANR	809412	PrimaryExpression	3		809274	1					
ANR	809413	ExpressionStatement	nprops = bytes / sizeof ( ac_uint2 )	1357:4:34064:34097	809274	25	True				
ANR	809414	AssignmentExpression	nprops = bytes / sizeof ( ac_uint2 )		809274	0		=			
ANR	809415	Identifier	nprops		809274	0					
ANR	809416	MultiplicativeExpression	bytes / sizeof ( ac_uint2 )		809274	1		/			
ANR	809417	Identifier	bytes		809274	0					
ANR	809418	SizeofExpression	sizeof ( ac_uint2 )		809274	1					
ANR	809419	Sizeof	sizeof		809274	0					
ANR	809420	SizeofOperand	ac_uint2		809274	1					
ANR	809421	ExpressionStatement	bytes += sizeof ( ac_uint4 ) * idx	1358:4:34103:34134	809274	26	True				
ANR	809422	AssignmentExpression	bytes += sizeof ( ac_uint4 ) * idx		809274	0		+=			
ANR	809423	Identifier	bytes		809274	0					
ANR	809424	MultiplicativeExpression	sizeof ( ac_uint4 ) * idx		809274	1		*			
ANR	809425	SizeofExpression	sizeof ( ac_uint4 )		809274	0					
ANR	809426	Sizeof	sizeof		809274	0					
ANR	809427	SizeofOperand	ac_uint4		809274	1					
ANR	809428	Identifier	idx		809274	1					
ANR	809429	Statement	fprintf	1361:4:34159:34165	809274	27	True				
ANR	809430	Statement	(	1361:11:34166:34166	809274	28	True				
ANR	809431	Statement	out	1361:12:34167:34169	809274	29	True				
ANR	809432	Statement	","	1361:15:34170:34170	809274	30	True				
ANR	809433	Statement	"""/* This file was generated from a modified version UCData's ucgendat.\\n"""	1362:8:34180:34252	809274	31	True				
ANR	809434	Statement	""" *\\n"""	1363:8:34262:34267	809274	32	True				
ANR	809435	Statement	""" *                     DO NOT EDIT THIS FILE!\\n"""	1364:8:34277:34325	809274	33	True				
ANR	809436	Statement	""" * \\n"""	1365:8:34335:34341	809274	34	True				
ANR	809437	Statement	""" * Instead, compile ucgendat.c (bundled with PHP in ext/mbstring), download\\n"""	1366:8:34351:34429	809274	35	True				
ANR	809438	Statement	""" * the appropriate UnicodeData-x.x.x.txt and CompositionExclusions-x.x.x.txt\\n"""	1367:8:34439:34518	809274	36	True				
ANR	809439	Statement	""" * files from  http://www.unicode.org/Public/ and run this program.\\n"""	1368:8:34528:34598	809274	37	True				
ANR	809440	Statement	""" *\\n"""	1369:8:34608:34613	809274	38	True				
ANR	809441	Statement	""" * More information can be found in the UCData package. Unfortunately,\\n"""	1370:8:34623:34696	809274	39	True				
ANR	809442	Statement	""" * the project's page doesn't seem to be live anymore, so you can use\\n"""	1371:8:34706:34778	809274	40	True				
ANR	809443	Statement	""" * OpenLDAPs modified copy (look in libraries/liblunicode/ucdata) */\\n\\n"""	1372:8:34788:34861	809274	41	True				
ANR	809444	Statement	)	1372:82:34862:34862	809274	42	True				
ANR	809445	ExpressionStatement		1372:83:34863:34863	809274	43	True				
ANR	809446	Statement	fprintf	1374:4:34870:34876	809274	44	True				
ANR	809447	Statement	(	1374:11:34877:34877	809274	45	True				
ANR	809448	Statement	out	1374:12:34878:34880	809274	46	True				
ANR	809449	Statement	","	1374:15:34881:34881	809274	47	True				
ANR	809450	Statement	PREF	1374:17:34883:34886	809274	48	True				
ANR	809451	Statement	"""unsigned short _ucprop_size = %d;\\n\\n"""	1374:22:34888:34926	809274	49	True				
ANR	809452	Statement	","	1374:61:34927:34927	809274	50	True				
ANR	809453	Statement	NUMPROPS	1374:63:34929:34936	809274	51	True				
ANR	809454	Statement	)	1374:71:34937:34937	809274	52	True				
ANR	809455	ExpressionStatement		1374:72:34938:34938	809274	53	True				
ANR	809456	Statement	fprintf	1376:4:34945:34951	809274	54	True				
ANR	809457	Statement	(	1376:11:34952:34952	809274	55	True				
ANR	809458	Statement	out	1376:12:34953:34955	809274	56	True				
ANR	809459	Statement	","	1376:15:34956:34956	809274	57	True				
ANR	809460	Statement	PREF	1376:17:34958:34961	809274	58	True				
ANR	809461	Statement	"""unsigned short  _ucprop_offsets[] = {"""	1376:22:34963:35001	809274	59	True				
ANR	809462	Statement	)	1376:61:35002:35002	809274	60	True				
ANR	809463	ExpressionStatement		1376:62:35003:35003	809274	61	True				
ANR	809464	ForStatement	for ( i = 0 ; i < nprops ; i ++ )		809274	62					
ANR	809465	ForInit	i = 0 ;	1378:9:35015:35020	809274	0	True				
ANR	809466	AssignmentExpression	i = 0		809274	0		=			
ANR	809467	Identifier	i		809274	0					
ANR	809468	PrimaryExpression	0		809274	1					
ANR	809469	Condition	i < nprops	1378:16:35022:35029	809274	1	True				
ANR	809470	RelationalExpression	i < nprops		809274	0		<			
ANR	809471	Identifier	i		809274	0					
ANR	809472	Identifier	nprops		809274	1					
ANR	809473	PostIncDecOperationExpression	i ++	1378:26:35032:35034	809274	2	True				
ANR	809474	Identifier	i		809274	0					
ANR	809475	IncDec	++		809274	1					
ANR	809476	CompoundStatement		83:31:2580:2580	809274	3					
ANR	809477	IfStatement	if ( i )		809274	0					
ANR	809478	Condition	i	1379:11:35050:35050	809274	0	True				
ANR	809479	Identifier	i		809274	0					
ANR	809480	ExpressionStatement	"fprintf ( out , "","" )"	1379:14:35053:35070	809274	1	True				
ANR	809481	CallExpression	"fprintf ( out , "","" )"		809274	0					
ANR	809482	Callee	fprintf		809274	0					
ANR	809483	Identifier	fprintf		809274	0					
ANR	809484	ArgumentList	out		809274	1					
ANR	809485	Argument	out		809274	0					
ANR	809486	Identifier	out		809274	0					
ANR	809487	Argument	""","""		809274	1					
ANR	809488	PrimaryExpression	""","""		809274	0					
ANR	809489	IfStatement	if ( ! ( i & 7 ) )		809274	1					
ANR	809490	Condition	! ( i & 7 )	1380:11:35083:35088	809274	0	True				
ANR	809491	UnaryOperationExpression	! ( i & 7 )		809274	0					
ANR	809492	UnaryOperator	!		809274	0					
ANR	809493	BitAndExpression	i & 7		809274	1		&			
ANR	809494	Identifier	i		809274	0					
ANR	809495	PrimaryExpression	7		809274	1					
ANR	809496	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1380:19:35091:35111	809274	1	True				
ANR	809497	CallExpression	"fprintf ( out , ""\\n\\t"" )"		809274	0					
ANR	809498	Callee	fprintf		809274	0					
ANR	809499	Identifier	fprintf		809274	0					
ANR	809500	ArgumentList	out		809274	1					
ANR	809501	Argument	out		809274	0					
ANR	809502	Identifier	out		809274	0					
ANR	809503	Argument	"""\\n\\t"""		809274	1					
ANR	809504	PrimaryExpression	"""\\n\\t"""		809274	0					
ANR	809505	ElseStatement	else		809274	0					
ANR	809506	ExpressionStatement	"fprintf ( out , "" "" )"	1381:12:35125:35142	809274	0	True				
ANR	809507	CallExpression	"fprintf ( out , "" "" )"		809274	0					
ANR	809508	Callee	fprintf		809274	0					
ANR	809509	Identifier	fprintf		809274	0					
ANR	809510	ArgumentList	out		809274	1					
ANR	809511	Argument	out		809274	0					
ANR	809512	Identifier	out		809274	0					
ANR	809513	Argument	""" """		809274	1					
ANR	809514	PrimaryExpression	""" """		809274	0					
ANR	809515	ExpressionStatement	"fprintf ( out , ""0x%04x"" , propcnt [ i ] )"	1382:7:35151:35185	809274	2	True				
ANR	809516	CallExpression	"fprintf ( out , ""0x%04x"" , propcnt [ i ] )"		809274	0					
ANR	809517	Callee	fprintf		809274	0					
ANR	809518	Identifier	fprintf		809274	0					
ANR	809519	ArgumentList	out		809274	1					
ANR	809520	Argument	out		809274	0					
ANR	809521	Identifier	out		809274	0					
ANR	809522	Argument	"""0x%04x"""		809274	1					
ANR	809523	PrimaryExpression	"""0x%04x"""		809274	0					
ANR	809524	Argument	propcnt [ i ]		809274	2					
ANR	809525	ArrayIndexing	propcnt [ i ]		809274	0					
ANR	809526	Identifier	propcnt		809274	0					
ANR	809527	Identifier	i		809274	1					
ANR	809528	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1384:4:35197:35221	809274	63	True				
ANR	809529	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		809274	0					
ANR	809530	Callee	fprintf		809274	0					
ANR	809531	Identifier	fprintf		809274	0					
ANR	809532	ArgumentList	out		809274	1					
ANR	809533	Argument	out		809274	0					
ANR	809534	Identifier	out		809274	0					
ANR	809535	Argument	"""\\n};\\n\\n"""		809274	1					
ANR	809536	PrimaryExpression	"""\\n};\\n\\n"""		809274	0					
ANR	809537	Statement	fprintf	1386:4:35228:35234	809274	64	True				
ANR	809538	Statement	(	1386:11:35235:35235	809274	65	True				
ANR	809539	Statement	out	1386:12:35236:35238	809274	66	True				
ANR	809540	Statement	","	1386:15:35239:35239	809274	67	True				
ANR	809541	Statement	PREF	1386:17:35241:35244	809274	68	True				
ANR	809542	Statement	"""unsigned int _ucprop_ranges[] = {"""	1386:22:35246:35280	809274	69	True				
ANR	809543	Statement	)	1386:57:35281:35281	809274	70	True				
ANR	809544	ExpressionStatement		1386:58:35282:35282	809274	71	True				
ANR	809545	ExpressionStatement	k = 0	1388:4:35289:35294	809274	72	True				
ANR	809546	AssignmentExpression	k = 0		809274	0		=			
ANR	809547	Identifier	k		809274	0					
ANR	809548	PrimaryExpression	0		809274	1					
ANR	809549	ForStatement	for ( i = 0 ; i < NUMPROPS ; i ++ )		809274	73					
ANR	809550	ForInit	i = 0 ;	1389:9:35305:35310	809274	0	True				
ANR	809551	AssignmentExpression	i = 0		809274	0		=			
ANR	809552	Identifier	i		809274	0					
ANR	809553	PrimaryExpression	0		809274	1					
ANR	809554	Condition	i < NUMPROPS	1389:16:35312:35323	809274	1	True				
ANR	809555	RelationalExpression	i < NUMPROPS		809274	0		<			
ANR	809556	Identifier	i		809274	0					
ANR	809557	Identifier	NUMPROPS		809274	1					
ANR	809558	PostIncDecOperationExpression	i ++	1389:30:35326:35328	809274	2	True				
ANR	809559	Identifier	i		809274	0					
ANR	809560	IncDec	++		809274	1					
ANR	809561	CompoundStatement		94:35:2874:2874	809274	3					
ANR	809562	IfStatement	if ( proptbl [ i ] . used > 0 )		809274	0					
ANR	809563	Condition	proptbl [ i ] . used > 0	1390:5:35338:35356	809274	0	True				
ANR	809564	RelationalExpression	proptbl [ i ] . used > 0		809274	0		>			
ANR	809565	MemberAccess	proptbl [ i ] . used		809274	0					
ANR	809566	ArrayIndexing	proptbl [ i ]		809274	0					
ANR	809567	Identifier	proptbl		809274	0					
ANR	809568	Identifier	i		809274	1					
ANR	809569	Identifier	used		809274	1					
ANR	809570	PrimaryExpression	0		809274	1					
ANR	809571	CompoundStatement		95:26:2902:2902	809274	1					
ANR	809572	ForStatement	for ( j = 0 ; j < proptbl [ i ] . used ; j ++ )		809274	0					
ANR	809573	ForInit	j = 0 ;	1391:8:35369:35372	809274	0	True				
ANR	809574	AssignmentExpression	j = 0		809274	0		=			
ANR	809575	Identifier	j		809274	0					
ANR	809576	PrimaryExpression	0		809274	1					
ANR	809577	Condition	j < proptbl [ i ] . used	1391:13:35374:35390	809274	1	True				
ANR	809578	RelationalExpression	j < proptbl [ i ] . used		809274	0		<			
ANR	809579	Identifier	j		809274	0					
ANR	809580	MemberAccess	proptbl [ i ] . used		809274	1					
ANR	809581	ArrayIndexing	proptbl [ i ]		809274	0					
ANR	809582	Identifier	proptbl		809274	0					
ANR	809583	Identifier	i		809274	1					
ANR	809584	Identifier	used		809274	1					
ANR	809585	PostIncDecOperationExpression	j ++	1391:32:35393:35395	809274	2	True				
ANR	809586	Identifier	j		809274	0					
ANR	809587	IncDec	++		809274	1					
ANR	809588	CompoundStatement		96:37:2941:2941	809274	3					
ANR	809589	IfStatement	if ( k )		809274	0					
ANR	809590	Condition	k	1392:9:35409:35409	809274	0	True				
ANR	809591	Identifier	k		809274	0					
ANR	809592	ExpressionStatement	"fprintf ( out , "","" )"	1392:12:35412:35429	809274	1	True				
ANR	809593	CallExpression	"fprintf ( out , "","" )"		809274	0					
ANR	809594	Callee	fprintf		809274	0					
ANR	809595	Identifier	fprintf		809274	0					
ANR	809596	ArgumentList	out		809274	1					
ANR	809597	Argument	out		809274	0					
ANR	809598	Identifier	out		809274	0					
ANR	809599	Argument	""","""		809274	1					
ANR	809600	PrimaryExpression	""","""		809274	0					
ANR	809601	IfStatement	if ( ! ( k & 3 ) )		809274	1					
ANR	809602	Condition	! ( k & 3 )	1393:9:35440:35445	809274	0	True				
ANR	809603	UnaryOperationExpression	! ( k & 3 )		809274	0					
ANR	809604	UnaryOperator	!		809274	0					
ANR	809605	BitAndExpression	k & 3		809274	1		&			
ANR	809606	Identifier	k		809274	0					
ANR	809607	PrimaryExpression	3		809274	1					
ANR	809608	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1393:17:35448:35467	809274	1	True				
ANR	809609	CallExpression	"fprintf ( out , ""\\n\\t"" )"		809274	0					
ANR	809610	Callee	fprintf		809274	0					
ANR	809611	Identifier	fprintf		809274	0					
ANR	809612	ArgumentList	out		809274	1					
ANR	809613	Argument	out		809274	0					
ANR	809614	Identifier	out		809274	0					
ANR	809615	Argument	"""\\n\\t"""		809274	1					
ANR	809616	PrimaryExpression	"""\\n\\t"""		809274	0					
ANR	809617	ElseStatement	else		809274	0					
ANR	809618	ExpressionStatement	"fprintf ( out , "" "" )"	1394:10:35479:35496	809274	0	True				
ANR	809619	CallExpression	"fprintf ( out , "" "" )"		809274	0					
ANR	809620	Callee	fprintf		809274	0					
ANR	809621	Identifier	fprintf		809274	0					
ANR	809622	ArgumentList	out		809274	1					
ANR	809623	Argument	out		809274	0					
ANR	809624	Identifier	out		809274	0					
ANR	809625	Argument	""" """		809274	1					
ANR	809626	PrimaryExpression	""" """		809274	0					
ANR	809627	ExpressionStatement	k ++	1395:5:35503:35506	809274	2	True				
ANR	809628	PostIncDecOperationExpression	k ++		809274	0					
ANR	809629	Identifier	k		809274	0					
ANR	809630	IncDec	++		809274	1					
ANR	809631	ExpressionStatement	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) proptbl [ i ] . ranges [ j ] )"	1396:5:35513:35574	809274	3	True				
ANR	809632	CallExpression	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) proptbl [ i ] . ranges [ j ] )"		809274	0					
ANR	809633	Callee	fprintf		809274	0					
ANR	809634	Identifier	fprintf		809274	0					
ANR	809635	ArgumentList	out		809274	1					
ANR	809636	Argument	out		809274	0					
ANR	809637	Identifier	out		809274	0					
ANR	809638	Argument	"""0x%08lx"""		809274	1					
ANR	809639	PrimaryExpression	"""0x%08lx"""		809274	0					
ANR	809640	Argument	( unsigned long ) proptbl [ i ] . ranges [ j ]		809274	2					
ANR	809641	CastExpression	( unsigned long ) proptbl [ i ] . ranges [ j ]		809274	0					
ANR	809642	CastTarget	unsigned long		809274	0					
ANR	809643	ArrayIndexing	proptbl [ i ] . ranges [ j ]		809274	1					
ANR	809644	MemberAccess	proptbl [ i ] . ranges		809274	0					
ANR	809645	ArrayIndexing	proptbl [ i ]		809274	0					
ANR	809646	Identifier	proptbl		809274	0					
ANR	809647	Identifier	i		809274	1					
ANR	809648	Identifier	ranges		809274	1					
ANR	809649	Identifier	j		809274	1					
ANR	809650	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1400:4:35594:35618	809274	74	True				
ANR	809651	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		809274	0					
ANR	809652	Callee	fprintf		809274	0					
ANR	809653	Identifier	fprintf		809274	0					
ANR	809654	ArgumentList	out		809274	1					
ANR	809655	Argument	out		809274	0					
ANR	809656	Identifier	out		809274	0					
ANR	809657	Argument	"""\\n};\\n\\n"""		809274	1					
ANR	809658	PrimaryExpression	"""\\n};\\n\\n"""		809274	0					
ANR	809659	Statement	fprintf	1436:4:36407:36413	809274	75	True				
ANR	809660	Statement	(	1436:11:36414:36414	809274	76	True				
ANR	809661	Statement	out	1436:12:36415:36417	809274	77	True				
ANR	809662	Statement	","	1436:15:36418:36418	809274	78	True				
ANR	809663	Statement	PREF	1436:17:36420:36423	809274	79	True				
ANR	809664	Statement	"""unsigned int _uccase_size = %ld;\\n\\n"""	1436:22:36425:36462	809274	80	True				
ANR	809665	Statement	","	1436:60:36463:36463	809274	81	True				
ANR	809666	Statement	(	1437:8:36473:36473	809274	82	True				
ANR	809667	Statement	long	1437:9:36474:36477	809274	83	True				
ANR	809668	Statement	)	1437:13:36478:36478	809274	84	True				
ANR	809669	Statement	(	1437:15:36480:36480	809274	85	True				
ANR	809670	Statement	upper_used	1437:16:36481:36490	809274	86	True				
ANR	809671	Statement	+	1437:27:36492:36492	809274	87	True				
ANR	809672	Statement	lower_used	1437:29:36494:36503	809274	88	True				
ANR	809673	Statement	+	1437:40:36505:36505	809274	89	True				
ANR	809674	Statement	title_used	1437:42:36507:36516	809274	90	True				
ANR	809675	Statement	)	1437:52:36517:36517	809274	91	True				
ANR	809676	Statement	)	1437:53:36518:36518	809274	92	True				
ANR	809677	ExpressionStatement		1437:54:36519:36519	809274	93	True				
ANR	809678	Statement	fprintf	1439:4:36526:36532	809274	94	True				
ANR	809679	Statement	(	1439:11:36533:36533	809274	95	True				
ANR	809680	Statement	out	1439:12:36534:36536	809274	96	True				
ANR	809681	Statement	","	1439:15:36537:36537	809274	97	True				
ANR	809682	Statement	"""/* Starting indexes of the case tables\\n"""	1440:8:36547:36588	809274	98	True				
ANR	809683	Statement	""" * UpperIndex = 0\\n"""	1441:8:36598:36618	809274	99	True				
ANR	809684	Statement	""" * LowerIndex = _uccase_len[0]\\n"""	1442:8:36628:36661	809274	100	True				
ANR	809685	Statement	""" * TitleIndex = LowerIndex + _uccase_len[1] */\\n\\n"""	1443:8:36671:36722	809274	101	True				
ANR	809686	Statement	)	1443:60:36723:36723	809274	102	True				
ANR	809687	ExpressionStatement		1443:61:36724:36724	809274	103	True				
ANR	809688	Statement	fprintf	1444:4:36730:36736	809274	104	True				
ANR	809689	Statement	(	1444:11:36737:36737	809274	105	True				
ANR	809690	Statement	out	1444:12:36738:36740	809274	106	True				
ANR	809691	Statement	","	1444:15:36741:36741	809274	107	True				
ANR	809692	Statement	PREF	1444:17:36743:36746	809274	108	True				
ANR	809693	Statement	"""unsigned short _uccase_len[2] = {%ld, %ld};\\n\\n"""	1444:22:36748:36796	809274	109	True				
ANR	809694	Statement	","	1444:71:36797:36797	809274	110	True				
ANR	809695	Statement	(	1445:8:36807:36807	809274	111	True				
ANR	809696	Statement	long	1445:9:36808:36811	809274	112	True				
ANR	809697	Statement	)	1445:13:36812:36812	809274	113	True				
ANR	809698	Statement	upper_used	1445:15:36814:36823	809274	114	True				
ANR	809699	Statement	*	1445:26:36825:36825	809274	115	True				
ANR	809700	Statement	3	1445:28:36827:36827	809274	116	True				
ANR	809701	Statement	","	1445:29:36828:36828	809274	117	True				
ANR	809702	Statement	(	1445:31:36830:36830	809274	118	True				
ANR	809703	Statement	long	1445:32:36831:36834	809274	119	True				
ANR	809704	Statement	)	1445:36:36835:36835	809274	120	True				
ANR	809705	Statement	lower_used	1445:38:36837:36846	809274	121	True				
ANR	809706	Statement	*	1445:49:36848:36848	809274	122	True				
ANR	809707	Statement	3	1445:51:36850:36850	809274	123	True				
ANR	809708	Statement	)	1445:52:36851:36851	809274	124	True				
ANR	809709	ExpressionStatement		1445:53:36852:36852	809274	125	True				
ANR	809710	Statement	fprintf	1446:4:36858:36864	809274	126	True				
ANR	809711	Statement	(	1446:11:36865:36865	809274	127	True				
ANR	809712	Statement	out	1446:12:36866:36868	809274	128	True				
ANR	809713	Statement	","	1446:15:36869:36869	809274	129	True				
ANR	809714	Statement	PREF	1446:17:36871:36874	809274	130	True				
ANR	809715	Statement	"""unsigned int _uccase_map[] = {"""	1446:22:36876:36907	809274	131	True				
ANR	809716	Statement	)	1446:54:36908:36908	809274	132	True				
ANR	809717	ExpressionStatement		1446:55:36909:36909	809274	133	True				
ANR	809718	IfStatement	if ( upper_used > 0 )		809274	134					
ANR	809719	Condition	upper_used > 0	1448:8:36920:36933	809274	0	True				
ANR	809720	RelationalExpression	upper_used > 0		809274	0		>			
ANR	809721	Identifier	upper_used		809274	0					
ANR	809722	PrimaryExpression	0		809274	1					
ANR	809723	ExpressionStatement	"write_case ( out , upper , upper_used , 1 )"	1452:6:36998:37035	809274	1	True				
ANR	809724	CallExpression	"write_case ( out , upper , upper_used , 1 )"		809274	0					
ANR	809725	Callee	write_case		809274	0					
ANR	809726	Identifier	write_case		809274	0					
ANR	809727	ArgumentList	out		809274	1					
ANR	809728	Argument	out		809274	0					
ANR	809729	Identifier	out		809274	0					
ANR	809730	Argument	upper		809274	1					
ANR	809731	Identifier	upper		809274	0					
ANR	809732	Argument	upper_used		809274	2					
ANR	809733	Identifier	upper_used		809274	0					
ANR	809734	Argument	1		809274	3					
ANR	809735	PrimaryExpression	1		809274	0					
ANR	809736	IfStatement	if ( lower_used > 0 )		809274	135					
ANR	809737	Condition	lower_used > 0	1454:8:37046:37059	809274	0	True				
ANR	809738	RelationalExpression	lower_used > 0		809274	0		>			
ANR	809739	Identifier	lower_used		809274	0					
ANR	809740	PrimaryExpression	0		809274	1					
ANR	809741	ExpressionStatement	"write_case ( out , lower , lower_used , ! upper_used )"	1458:6:37124:37171	809274	1	True				
ANR	809742	CallExpression	"write_case ( out , lower , lower_used , ! upper_used )"		809274	0					
ANR	809743	Callee	write_case		809274	0					
ANR	809744	Identifier	write_case		809274	0					
ANR	809745	ArgumentList	out		809274	1					
ANR	809746	Argument	out		809274	0					
ANR	809747	Identifier	out		809274	0					
ANR	809748	Argument	lower		809274	1					
ANR	809749	Identifier	lower		809274	0					
ANR	809750	Argument	lower_used		809274	2					
ANR	809751	Identifier	lower_used		809274	0					
ANR	809752	Argument	! upper_used		809274	3					
ANR	809753	UnaryOperationExpression	! upper_used		809274	0					
ANR	809754	UnaryOperator	!		809274	0					
ANR	809755	Identifier	upper_used		809274	1					
ANR	809756	IfStatement	if ( title_used > 0 )		809274	136					
ANR	809757	Condition	title_used > 0	1460:8:37182:37195	809274	0	True				
ANR	809758	RelationalExpression	title_used > 0		809274	0		>			
ANR	809759	Identifier	title_used		809274	0					
ANR	809760	PrimaryExpression	0		809274	1					
ANR	809761	ExpressionStatement	"write_case ( out , title , title_used , ! ( upper_used || lower_used ) )"	1464:6:37260:37321	809274	1	True				
ANR	809762	CallExpression	"write_case ( out , title , title_used , ! ( upper_used || lower_used ) )"		809274	0					
ANR	809763	Callee	write_case		809274	0					
ANR	809764	Identifier	write_case		809274	0					
ANR	809765	ArgumentList	out		809274	1					
ANR	809766	Argument	out		809274	0					
ANR	809767	Identifier	out		809274	0					
ANR	809768	Argument	title		809274	1					
ANR	809769	Identifier	title		809274	0					
ANR	809770	Argument	title_used		809274	2					
ANR	809771	Identifier	title_used		809274	0					
ANR	809772	Argument	! ( upper_used || lower_used )		809274	3					
ANR	809773	UnaryOperationExpression	! ( upper_used || lower_used )		809274	0					
ANR	809774	UnaryOperator	!		809274	0					
ANR	809775	OrExpression	upper_used || lower_used		809274	1		||			
ANR	809776	Identifier	upper_used		809274	0					
ANR	809777	Identifier	lower_used		809274	1					
ANR	809778	IfStatement	if ( ! ( upper_used || lower_used || title_used ) )		809274	137					
ANR	809779	Condition	! ( upper_used || lower_used || title_used )	1466:8:37332:37372	809274	0	True				
ANR	809780	UnaryOperationExpression	! ( upper_used || lower_used || title_used )		809274	0					
ANR	809781	UnaryOperator	!		809274	0					
ANR	809782	OrExpression	upper_used || lower_used || title_used		809274	1		||			
ANR	809783	Identifier	upper_used		809274	0					
ANR	809784	OrExpression	lower_used || title_used		809274	1		||			
ANR	809785	Identifier	lower_used		809274	0					
ANR	809786	Identifier	title_used		809274	1					
ANR	809787	ExpressionStatement	"fprintf ( out , ""\\t0"" )"	1467:1:37376:37395	809274	1	True				
ANR	809788	CallExpression	"fprintf ( out , ""\\t0"" )"		809274	0					
ANR	809789	Callee	fprintf		809274	0					
ANR	809790	Identifier	fprintf		809274	0					
ANR	809791	ArgumentList	out		809274	1					
ANR	809792	Argument	out		809274	0					
ANR	809793	Identifier	out		809274	0					
ANR	809794	Argument	"""\\t0"""		809274	1					
ANR	809795	PrimaryExpression	"""\\t0"""		809274	0					
ANR	809796	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1469:4:37402:37426	809274	138	True				
ANR	809797	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		809274	0					
ANR	809798	Callee	fprintf		809274	0					
ANR	809799	Identifier	fprintf		809274	0					
ANR	809800	ArgumentList	out		809274	1					
ANR	809801	Argument	out		809274	0					
ANR	809802	Identifier	out		809274	0					
ANR	809803	Argument	"""\\n};\\n\\n"""		809274	1					
ANR	809804	PrimaryExpression	"""\\n};\\n\\n"""		809274	0					
ANR	809805	ExpressionStatement	create_comps ( )	1527:4:38720:38734	809274	139	True				
ANR	809806	CallExpression	create_comps ( )		809274	0					
ANR	809807	Callee	create_comps		809274	0					
ANR	809808	Identifier	create_comps		809274	0					
ANR	809809	ArgumentList			809274	1					
ANR	809810	Statement	fprintf	1530:4:38763:38769	809274	140	True				
ANR	809811	Statement	(	1530:11:38770:38770	809274	141	True				
ANR	809812	Statement	out	1530:12:38771:38773	809274	142	True				
ANR	809813	Statement	","	1530:15:38774:38774	809274	143	True				
ANR	809814	Statement	PREF	1530:17:38776:38779	809274	144	True				
ANR	809815	Statement	"""ac_uint4 _uccomp_size = %ld;\\n\\n"""	1530:22:38781:38814	809274	145	True				
ANR	809816	Statement	","	1530:56:38815:38815	809274	146	True				
ANR	809817	Statement	comps_used	1531:8:38825:38834	809274	147	True				
ANR	809818	Statement	*	1531:19:38836:38836	809274	148	True				
ANR	809819	Statement	4L	1531:21:38838:38839	809274	149	True				
ANR	809820	Statement	)	1531:23:38840:38840	809274	150	True				
ANR	809821	ExpressionStatement		1531:24:38841:38841	809274	151	True				
ANR	809822	Statement	fprintf	1533:4:38848:38854	809274	152	True				
ANR	809823	Statement	(	1533:11:38855:38855	809274	153	True				
ANR	809824	Statement	out	1533:12:38856:38858	809274	154	True				
ANR	809825	Statement	","	1533:15:38859:38859	809274	155	True				
ANR	809826	Statement	PREF	1533:17:38861:38864	809274	156	True				
ANR	809827	Statement	"""ac_uint4 _uccomp_data[] = {"""	1533:22:38866:38894	809274	157	True				
ANR	809828	Statement	)	1533:51:38895:38895	809274	158	True				
ANR	809829	ExpressionStatement		1533:52:38896:38896	809274	159	True				
ANR	809830	IfStatement	if ( comps_used > 0 )		809274	160					
ANR	809831	Condition	comps_used > 0	1538:8:38969:38982	809274	0	True				
ANR	809832	RelationalExpression	comps_used > 0		809274	0		>			
ANR	809833	Identifier	comps_used		809274	0					
ANR	809834	PrimaryExpression	0		809274	1					
ANR	809835	CompoundStatement		243:24:6528:6528	809274	1					
ANR	809836	ForStatement	for ( i = 0 ; i < comps_used ; i ++ )		809274	0					
ANR	809837	ForInit	i = 0 ;	1539:6:38993:38996	809274	0	True				
ANR	809838	AssignmentExpression	i = 0		809274	0		=			
ANR	809839	Identifier	i		809274	0					
ANR	809840	PrimaryExpression	0		809274	1					
ANR	809841	Condition	i < comps_used	1539:11:38998:39009	809274	1	True				
ANR	809842	RelationalExpression	i < comps_used		809274	0		<			
ANR	809843	Identifier	i		809274	0					
ANR	809844	Identifier	comps_used		809274	1					
ANR	809845	PostIncDecOperationExpression	i ++	1539:25:39012:39014	809274	2	True				
ANR	809846	Identifier	i		809274	0					
ANR	809847	IncDec	++		809274	1					
ANR	809848	CompoundStatement		244:30:6560:6560	809274	3					
ANR	809849	IfStatement	if ( i )		809274	0					
ANR	809850	Condition	i	1540:9:39028:39028	809274	0	True				
ANR	809851	Identifier	i		809274	0					
ANR	809852	ExpressionStatement	"fprintf ( out , "","" )"	1540:12:39031:39048	809274	1	True				
ANR	809853	CallExpression	"fprintf ( out , "","" )"		809274	0					
ANR	809854	Callee	fprintf		809274	0					
ANR	809855	Identifier	fprintf		809274	0					
ANR	809856	ArgumentList	out		809274	1					
ANR	809857	Argument	out		809274	0					
ANR	809858	Identifier	out		809274	0					
ANR	809859	Argument	""","""		809274	1					
ANR	809860	PrimaryExpression	""","""		809274	0					
ANR	809861	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx"" , ( unsigned long ) comps [ i ] . comp , ( unsigned long ) comps [ i ] . count , ( unsigned long ) comps [ i ] . code1 , ( unsigned long ) comps [ i ] . code2 )"	1541:5:39055:39254	809274	1	True				
ANR	809862	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx"" , ( unsigned long ) comps [ i ] . comp , ( unsigned long ) comps [ i ] . count , ( unsigned long ) comps [ i ] . code1 , ( unsigned long ) comps [ i ] . code2 )"		809274	0					
ANR	809863	Callee	fprintf		809274	0					
ANR	809864	Identifier	fprintf		809274	0					
ANR	809865	ArgumentList	out		809274	1					
ANR	809866	Argument	out		809274	0					
ANR	809867	Identifier	out		809274	0					
ANR	809868	Argument	"""\\n\\t0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx"""		809274	1					
ANR	809869	PrimaryExpression	"""\\n\\t0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx"""		809274	0					
ANR	809870	Argument	( unsigned long ) comps [ i ] . comp		809274	2					
ANR	809871	CastExpression	( unsigned long ) comps [ i ] . comp		809274	0					
ANR	809872	CastTarget	unsigned long		809274	0					
ANR	809873	MemberAccess	comps [ i ] . comp		809274	1					
ANR	809874	ArrayIndexing	comps [ i ]		809274	0					
ANR	809875	Identifier	comps		809274	0					
ANR	809876	Identifier	i		809274	1					
ANR	809877	Identifier	comp		809274	1					
ANR	809878	Argument	( unsigned long ) comps [ i ] . count		809274	3					
ANR	809879	CastExpression	( unsigned long ) comps [ i ] . count		809274	0					
ANR	809880	CastTarget	unsigned long		809274	0					
ANR	809881	MemberAccess	comps [ i ] . count		809274	1					
ANR	809882	ArrayIndexing	comps [ i ]		809274	0					
ANR	809883	Identifier	comps		809274	0					
ANR	809884	Identifier	i		809274	1					
ANR	809885	Identifier	count		809274	1					
ANR	809886	Argument	( unsigned long ) comps [ i ] . code1		809274	4					
ANR	809887	CastExpression	( unsigned long ) comps [ i ] . code1		809274	0					
ANR	809888	CastTarget	unsigned long		809274	0					
ANR	809889	MemberAccess	comps [ i ] . code1		809274	1					
ANR	809890	ArrayIndexing	comps [ i ]		809274	0					
ANR	809891	Identifier	comps		809274	0					
ANR	809892	Identifier	i		809274	1					
ANR	809893	Identifier	code1		809274	1					
ANR	809894	Argument	( unsigned long ) comps [ i ] . code2		809274	5					
ANR	809895	CastExpression	( unsigned long ) comps [ i ] . code2		809274	0					
ANR	809896	CastTarget	unsigned long		809274	0					
ANR	809897	MemberAccess	comps [ i ] . code2		809274	1					
ANR	809898	ArrayIndexing	comps [ i ]		809274	0					
ANR	809899	Identifier	comps		809274	0					
ANR	809900	Identifier	i		809274	1					
ANR	809901	Identifier	code2		809274	1					
ANR	809902	ElseStatement	else		809274	0					
ANR	809903	CompoundStatement		250:11:6813:6813	809274	0					
ANR	809904	ExpressionStatement	"fprintf ( out , ""\\t0"" )"	1546:1:39273:39292	809274	0	True				
ANR	809905	CallExpression	"fprintf ( out , ""\\t0"" )"		809274	0					
ANR	809906	Callee	fprintf		809274	0					
ANR	809907	Identifier	fprintf		809274	0					
ANR	809908	ArgumentList	out		809274	1					
ANR	809909	Argument	out		809274	0					
ANR	809910	Identifier	out		809274	0					
ANR	809911	Argument	"""\\t0"""		809274	1					
ANR	809912	PrimaryExpression	"""\\t0"""		809274	0					
ANR	809913	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1548:4:39304:39328	809274	161	True				
ANR	809914	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		809274	0					
ANR	809915	Callee	fprintf		809274	0					
ANR	809916	Identifier	fprintf		809274	0					
ANR	809917	ArgumentList	out		809274	1					
ANR	809918	Argument	out		809274	0					
ANR	809919	Identifier	out		809274	0					
ANR	809920	Argument	"""\\n};\\n\\n"""		809274	1					
ANR	809921	PrimaryExpression	"""\\n};\\n\\n"""		809274	0					
ANR	809922	ExpressionStatement	expand_decomp ( )	1587:4:40290:40305	809274	162	True				
ANR	809923	CallExpression	expand_decomp ( )		809274	0					
ANR	809924	Callee	expand_decomp		809274	0					
ANR	809925	Identifier	expand_decomp		809274	0					
ANR	809926	ArgumentList			809274	1					
ANR	809927	Statement	fprintf	1590:4:40330:40336	809274	163	True				
ANR	809928	Statement	(	1590:11:40337:40337	809274	164	True				
ANR	809929	Statement	out	1590:12:40338:40340	809274	165	True				
ANR	809930	Statement	","	1590:15:40341:40341	809274	166	True				
ANR	809931	Statement	PREF	1590:17:40343:40346	809274	167	True				
ANR	809932	Statement	"""ac_uint4 _ucdcmp_size = %ld;\\n\\n"""	1590:22:40348:40381	809274	168	True				
ANR	809933	Statement	","	1590:56:40382:40382	809274	169	True				
ANR	809934	Statement	decomps_used	1591:8:40392:40403	809274	170	True				
ANR	809935	Statement	*	1591:21:40405:40405	809274	171	True				
ANR	809936	Statement	2L	1591:23:40407:40408	809274	172	True				
ANR	809937	Statement	)	1591:25:40409:40409	809274	173	True				
ANR	809938	ExpressionStatement		1591:26:40410:40410	809274	174	True				
ANR	809939	Statement	fprintf	1593:4:40417:40423	809274	175	True				
ANR	809940	Statement	(	1593:11:40424:40424	809274	176	True				
ANR	809941	Statement	out	1593:12:40425:40427	809274	177	True				
ANR	809942	Statement	","	1593:15:40428:40428	809274	178	True				
ANR	809943	Statement	PREF	1593:17:40430:40433	809274	179	True				
ANR	809944	Statement	"""ac_uint4 _ucdcmp_nodes[] = {"""	1593:22:40435:40464	809274	180	True				
ANR	809945	Statement	)	1593:52:40465:40465	809274	181	True				
ANR	809946	ExpressionStatement		1593:53:40466:40466	809274	182	True				
ANR	809947	IfStatement	if ( decomps_used )		809274	183					
ANR	809948	Condition	decomps_used	1595:8:40477:40488	809274	0	True				
ANR	809949	Identifier	decomps_used		809274	0					
ANR	809950	CompoundStatement		300:22:8034:8034	809274	1					
ANR	809951	ForStatement	for ( i = idx = 0 ; i < decomps_used ; i ++ )		809274	0					
ANR	809952	ForInit	i = idx = 0 ;	1599:6:40544:40555	809274	0	True				
ANR	809953	AssignmentExpression	i = idx = 0		809274	0		=			
ANR	809954	Identifier	i		809274	0					
ANR	809955	AssignmentExpression	idx = 0		809274	1		=			
ANR	809956	Identifier	idx		809274	0					
ANR	809957	PrimaryExpression	0		809274	1					
ANR	809958	Condition	i < decomps_used	1599:19:40557:40572	809274	1	True				
ANR	809959	RelationalExpression	i < decomps_used		809274	0		<			
ANR	809960	Identifier	i		809274	0					
ANR	809961	Identifier	decomps_used		809274	1					
ANR	809962	PostIncDecOperationExpression	i ++	1599:37:40575:40577	809274	2	True				
ANR	809963	Identifier	i		809274	0					
ANR	809964	IncDec	++		809274	1					
ANR	809965	CompoundStatement		304:42:8123:8123	809274	3					
ANR	809966	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx,"" , ( unsigned long ) decomps [ i ] . code , ( unsigned long ) idx )"	1600:5:40587:40687	809274	0	True				
ANR	809967	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx,"" , ( unsigned long ) decomps [ i ] . code , ( unsigned long ) idx )"		809274	0					
ANR	809968	Callee	fprintf		809274	0					
ANR	809969	Identifier	fprintf		809274	0					
ANR	809970	ArgumentList	out		809274	1					
ANR	809971	Argument	out		809274	0					
ANR	809972	Identifier	out		809274	0					
ANR	809973	Argument	"""\\n\\t0x%08lx, 0x%08lx,"""		809274	1					
ANR	809974	PrimaryExpression	"""\\n\\t0x%08lx, 0x%08lx,"""		809274	0					
ANR	809975	Argument	( unsigned long ) decomps [ i ] . code		809274	2					
ANR	809976	CastExpression	( unsigned long ) decomps [ i ] . code		809274	0					
ANR	809977	CastTarget	unsigned long		809274	0					
ANR	809978	MemberAccess	decomps [ i ] . code		809274	1					
ANR	809979	ArrayIndexing	decomps [ i ]		809274	0					
ANR	809980	Identifier	decomps		809274	0					
ANR	809981	Identifier	i		809274	1					
ANR	809982	Identifier	code		809274	1					
ANR	809983	Argument	( unsigned long ) idx		809274	3					
ANR	809984	CastExpression	( unsigned long ) idx		809274	0					
ANR	809985	CastTarget	unsigned long		809274	0					
ANR	809986	Identifier	idx		809274	1					
ANR	809987	ExpressionStatement	idx += decomps [ i ] . used	1602:5:40694:40716	809274	1	True				
ANR	809988	AssignmentExpression	idx += decomps [ i ] . used		809274	0		+=			
ANR	809989	Identifier	idx		809274	0					
ANR	809990	MemberAccess	decomps [ i ] . used		809274	1					
ANR	809991	ArrayIndexing	decomps [ i ]		809274	0					
ANR	809992	Identifier	decomps		809274	0					
ANR	809993	Identifier	i		809274	1					
ANR	809994	Identifier	used		809274	1					
ANR	809995	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx\\n};\\n\\n"" , ( unsigned long ) idx )"	1608:1:40786:40842	809274	1	True				
ANR	809996	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx\\n};\\n\\n"" , ( unsigned long ) idx )"		809274	0					
ANR	809997	Callee	fprintf		809274	0					
ANR	809998	Identifier	fprintf		809274	0					
ANR	809999	ArgumentList	out		809274	1					
ANR	810000	Argument	out		809274	0					
ANR	810001	Identifier	out		809274	0					
ANR	810002	Argument	"""\\n\\t0x%08lx\\n};\\n\\n"""		809274	1					
ANR	810003	PrimaryExpression	"""\\n\\t0x%08lx\\n};\\n\\n"""		809274	0					
ANR	810004	Argument	( unsigned long ) idx		809274	2					
ANR	810005	CastExpression	( unsigned long ) idx		809274	0					
ANR	810006	CastTarget	unsigned long		809274	0					
ANR	810007	Identifier	idx		809274	1					
ANR	810008	Statement	fprintf	1610:1:40846:40852	809274	2	True				
ANR	810009	Statement	(	1610:8:40853:40853	809274	3	True				
ANR	810010	Statement	out	1610:9:40854:40856	809274	4	True				
ANR	810011	Statement	","	1610:12:40857:40857	809274	5	True				
ANR	810012	Statement	PREF	1610:14:40859:40862	809274	6	True				
ANR	810013	Statement	"""ac_uint4 _ucdcmp_decomp[] = {"""	1610:19:40864:40894	809274	7	True				
ANR	810014	Statement	)	1610:50:40895:40895	809274	8	True				
ANR	810015	ExpressionStatement		1610:51:40896:40896	809274	9	True				
ANR	810016	ExpressionStatement	k = 0	1614:1:40949:40954	809274	10	True				
ANR	810017	AssignmentExpression	k = 0		809274	0		=			
ANR	810018	Identifier	k		809274	0					
ANR	810019	PrimaryExpression	0		809274	1					
ANR	810020	ForStatement	for ( i = 0 ; i < decomps_used ; i ++ )		809274	11					
ANR	810021	ForInit	i = 0 ;	1615:6:40962:40967	809274	0	True				
ANR	810022	AssignmentExpression	i = 0		809274	0		=			
ANR	810023	Identifier	i		809274	0					
ANR	810024	PrimaryExpression	0		809274	1					
ANR	810025	Condition	i < decomps_used	1615:13:40969:40984	809274	1	True				
ANR	810026	RelationalExpression	i < decomps_used		809274	0		<			
ANR	810027	Identifier	i		809274	0					
ANR	810028	Identifier	decomps_used		809274	1					
ANR	810029	PostIncDecOperationExpression	i ++	1615:31:40987:40989	809274	2	True				
ANR	810030	Identifier	i		809274	0					
ANR	810031	IncDec	++		809274	1					
ANR	810032	ForStatement	for ( j = 0 ; j < decomps [ i ] . used ; j ++ )		809274	3					
ANR	810033	ForInit	j = 0 ;	1616:8:41000:41003	809274	0	True				
ANR	810034	AssignmentExpression	j = 0		809274	0		=			
ANR	810035	Identifier	j		809274	0					
ANR	810036	PrimaryExpression	0		809274	1					
ANR	810037	Condition	j < decomps [ i ] . used	1616:13:41005:41021	809274	1	True				
ANR	810038	RelationalExpression	j < decomps [ i ] . used		809274	0		<			
ANR	810039	Identifier	j		809274	0					
ANR	810040	MemberAccess	decomps [ i ] . used		809274	1					
ANR	810041	ArrayIndexing	decomps [ i ]		809274	0					
ANR	810042	Identifier	decomps		809274	0					
ANR	810043	Identifier	i		809274	1					
ANR	810044	Identifier	used		809274	1					
ANR	810045	PostIncDecOperationExpression	j ++	1616:32:41024:41026	809274	2	True				
ANR	810046	Identifier	j		809274	0					
ANR	810047	IncDec	++		809274	1					
ANR	810048	CompoundStatement		321:37:8572:8572	809274	3					
ANR	810049	IfStatement	if ( k )		809274	0					
ANR	810050	Condition	k	1617:9:41040:41040	809274	0	True				
ANR	810051	Identifier	k		809274	0					
ANR	810052	ExpressionStatement	"fprintf ( out , "","" )"	1617:12:41043:41060	809274	1	True				
ANR	810053	CallExpression	"fprintf ( out , "","" )"		809274	0					
ANR	810054	Callee	fprintf		809274	0					
ANR	810055	Identifier	fprintf		809274	0					
ANR	810056	ArgumentList	out		809274	1					
ANR	810057	Argument	out		809274	0					
ANR	810058	Identifier	out		809274	0					
ANR	810059	Argument	""","""		809274	1					
ANR	810060	PrimaryExpression	""","""		809274	0					
ANR	810061	IfStatement	if ( ! ( k & 3 ) )		809274	1					
ANR	810062	Condition	! ( k & 3 )	1618:9:41071:41076	809274	0	True				
ANR	810063	UnaryOperationExpression	! ( k & 3 )		809274	0					
ANR	810064	UnaryOperator	!		809274	0					
ANR	810065	BitAndExpression	k & 3		809274	1		&			
ANR	810066	Identifier	k		809274	0					
ANR	810067	PrimaryExpression	3		809274	1					
ANR	810068	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1618:17:41079:41098	809274	1	True				
ANR	810069	CallExpression	"fprintf ( out , ""\\n\\t"" )"		809274	0					
ANR	810070	Callee	fprintf		809274	0					
ANR	810071	Identifier	fprintf		809274	0					
ANR	810072	ArgumentList	out		809274	1					
ANR	810073	Argument	out		809274	0					
ANR	810074	Identifier	out		809274	0					
ANR	810075	Argument	"""\\n\\t"""		809274	1					
ANR	810076	PrimaryExpression	"""\\n\\t"""		809274	0					
ANR	810077	ElseStatement	else		809274	0					
ANR	810078	ExpressionStatement	"fprintf ( out , "" "" )"	1619:10:41110:41127	809274	0	True				
ANR	810079	CallExpression	"fprintf ( out , "" "" )"		809274	0					
ANR	810080	Callee	fprintf		809274	0					
ANR	810081	Identifier	fprintf		809274	0					
ANR	810082	ArgumentList	out		809274	1					
ANR	810083	Argument	out		809274	0					
ANR	810084	Identifier	out		809274	0					
ANR	810085	Argument	""" """		809274	1					
ANR	810086	PrimaryExpression	""" """		809274	0					
ANR	810087	ExpressionStatement	k ++	1620:5:41134:41137	809274	2	True				
ANR	810088	PostIncDecOperationExpression	k ++		809274	0					
ANR	810089	Identifier	k		809274	0					
ANR	810090	IncDec	++		809274	1					
ANR	810091	ExpressionStatement	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) decomps [ i ] . decomp [ j ] )"	1621:5:41144:41205	809274	3	True				
ANR	810092	CallExpression	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) decomps [ i ] . decomp [ j ] )"		809274	0					
ANR	810093	Callee	fprintf		809274	0					
ANR	810094	Identifier	fprintf		809274	0					
ANR	810095	ArgumentList	out		809274	1					
ANR	810096	Argument	out		809274	0					
ANR	810097	Identifier	out		809274	0					
ANR	810098	Argument	"""0x%08lx"""		809274	1					
ANR	810099	PrimaryExpression	"""0x%08lx"""		809274	0					
ANR	810100	Argument	( unsigned long ) decomps [ i ] . decomp [ j ]		809274	2					
ANR	810101	CastExpression	( unsigned long ) decomps [ i ] . decomp [ j ]		809274	0					
ANR	810102	CastTarget	unsigned long		809274	0					
ANR	810103	ArrayIndexing	decomps [ i ] . decomp [ j ]		809274	1					
ANR	810104	MemberAccess	decomps [ i ] . decomp		809274	0					
ANR	810105	ArrayIndexing	decomps [ i ]		809274	0					
ANR	810106	Identifier	decomps		809274	0					
ANR	810107	Identifier	i		809274	1					
ANR	810108	Identifier	decomp		809274	1					
ANR	810109	Identifier	j		809274	1					
ANR	810110	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1623:1:41213:41237	809274	12	True				
ANR	810111	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		809274	0					
ANR	810112	Callee	fprintf		809274	0					
ANR	810113	Identifier	fprintf		809274	0					
ANR	810114	ArgumentList	out		809274	1					
ANR	810115	Argument	out		809274	0					
ANR	810116	Identifier	out		809274	0					
ANR	810117	Argument	"""\\n};\\n\\n"""		809274	1					
ANR	810118	PrimaryExpression	"""\\n};\\n\\n"""		809274	0					
ANR	810119	Statement	fprintf	1682:4:42772:42778	809274	184	True				
ANR	810120	Statement	(	1682:11:42779:42779	809274	185	True				
ANR	810121	Statement	out	1682:12:42780:42782	809274	186	True				
ANR	810122	Statement	","	1682:15:42783:42783	809274	187	True				
ANR	810123	Statement	PREF	1682:17:42785:42788	809274	188	True				
ANR	810124	Statement	"""ac_uint4 _uckdcmp_size = %ld;\\n\\n"""	1682:22:42790:42824	809274	189	True				
ANR	810125	Statement	","	1682:57:42825:42825	809274	190	True				
ANR	810126	Statement	kdecomps_used	1683:8:42835:42847	809274	191	True				
ANR	810127	Statement	*	1683:22:42849:42849	809274	192	True				
ANR	810128	Statement	2L	1683:24:42851:42852	809274	193	True				
ANR	810129	Statement	)	1683:26:42853:42853	809274	194	True				
ANR	810130	ExpressionStatement		1683:27:42854:42854	809274	195	True				
ANR	810131	Statement	fprintf	1685:4:42861:42867	809274	196	True				
ANR	810132	Statement	(	1685:11:42868:42868	809274	197	True				
ANR	810133	Statement	out	1685:12:42869:42871	809274	198	True				
ANR	810134	Statement	","	1685:15:42872:42872	809274	199	True				
ANR	810135	Statement	PREF	1685:17:42874:42877	809274	200	True				
ANR	810136	Statement	"""ac_uint4 _uckdcmp_nodes[] = {"""	1685:22:42879:42909	809274	201	True				
ANR	810137	Statement	)	1685:53:42910:42910	809274	202	True				
ANR	810138	ExpressionStatement		1685:54:42911:42911	809274	203	True				
ANR	810139	IfStatement	if ( kdecomps_used )		809274	204					
ANR	810140	Condition	kdecomps_used	1687:8:42922:42934	809274	0	True				
ANR	810141	Identifier	kdecomps_used		809274	0					
ANR	810142	CompoundStatement		392:23:10480:10480	809274	1					
ANR	810143	ForStatement	for ( i = idx = 0 ; i < kdecomps_used ; i ++ )		809274	0					
ANR	810144	ForInit	i = idx = 0 ;	1691:6:42991:43002	809274	0	True				
ANR	810145	AssignmentExpression	i = idx = 0		809274	0		=			
ANR	810146	Identifier	i		809274	0					
ANR	810147	AssignmentExpression	idx = 0		809274	1		=			
ANR	810148	Identifier	idx		809274	0					
ANR	810149	PrimaryExpression	0		809274	1					
ANR	810150	Condition	i < kdecomps_used	1691:19:43004:43020	809274	1	True				
ANR	810151	RelationalExpression	i < kdecomps_used		809274	0		<			
ANR	810152	Identifier	i		809274	0					
ANR	810153	Identifier	kdecomps_used		809274	1					
ANR	810154	PostIncDecOperationExpression	i ++	1691:38:43023:43025	809274	2	True				
ANR	810155	Identifier	i		809274	0					
ANR	810156	IncDec	++		809274	1					
ANR	810157	CompoundStatement		396:43:10571:10571	809274	3					
ANR	810158	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx,"" , ( unsigned long ) kdecomps [ i ] . code , ( unsigned long ) idx )"	1692:5:43035:43136	809274	0	True				
ANR	810159	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx,"" , ( unsigned long ) kdecomps [ i ] . code , ( unsigned long ) idx )"		809274	0					
ANR	810160	Callee	fprintf		809274	0					
ANR	810161	Identifier	fprintf		809274	0					
ANR	810162	ArgumentList	out		809274	1					
ANR	810163	Argument	out		809274	0					
ANR	810164	Identifier	out		809274	0					
ANR	810165	Argument	"""\\n\\t0x%08lx, 0x%08lx,"""		809274	1					
ANR	810166	PrimaryExpression	"""\\n\\t0x%08lx, 0x%08lx,"""		809274	0					
ANR	810167	Argument	( unsigned long ) kdecomps [ i ] . code		809274	2					
ANR	810168	CastExpression	( unsigned long ) kdecomps [ i ] . code		809274	0					
ANR	810169	CastTarget	unsigned long		809274	0					
ANR	810170	MemberAccess	kdecomps [ i ] . code		809274	1					
ANR	810171	ArrayIndexing	kdecomps [ i ]		809274	0					
ANR	810172	Identifier	kdecomps		809274	0					
ANR	810173	Identifier	i		809274	1					
ANR	810174	Identifier	code		809274	1					
ANR	810175	Argument	( unsigned long ) idx		809274	3					
ANR	810176	CastExpression	( unsigned long ) idx		809274	0					
ANR	810177	CastTarget	unsigned long		809274	0					
ANR	810178	Identifier	idx		809274	1					
ANR	810179	ExpressionStatement	idx += kdecomps [ i ] . used	1694:5:43143:43166	809274	1	True				
ANR	810180	AssignmentExpression	idx += kdecomps [ i ] . used		809274	0		+=			
ANR	810181	Identifier	idx		809274	0					
ANR	810182	MemberAccess	kdecomps [ i ] . used		809274	1					
ANR	810183	ArrayIndexing	kdecomps [ i ]		809274	0					
ANR	810184	Identifier	kdecomps		809274	0					
ANR	810185	Identifier	i		809274	1					
ANR	810186	Identifier	used		809274	1					
ANR	810187	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx\\n};\\n\\n"" , ( unsigned long ) idx )"	1700:1:43236:43292	809274	1	True				
ANR	810188	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx\\n};\\n\\n"" , ( unsigned long ) idx )"		809274	0					
ANR	810189	Callee	fprintf		809274	0					
ANR	810190	Identifier	fprintf		809274	0					
ANR	810191	ArgumentList	out		809274	1					
ANR	810192	Argument	out		809274	0					
ANR	810193	Identifier	out		809274	0					
ANR	810194	Argument	"""\\n\\t0x%08lx\\n};\\n\\n"""		809274	1					
ANR	810195	PrimaryExpression	"""\\n\\t0x%08lx\\n};\\n\\n"""		809274	0					
ANR	810196	Argument	( unsigned long ) idx		809274	2					
ANR	810197	CastExpression	( unsigned long ) idx		809274	0					
ANR	810198	CastTarget	unsigned long		809274	0					
ANR	810199	Identifier	idx		809274	1					
ANR	810200	Statement	fprintf	1702:1:43296:43302	809274	2	True				
ANR	810201	Statement	(	1702:8:43303:43303	809274	3	True				
ANR	810202	Statement	out	1702:9:43304:43306	809274	4	True				
ANR	810203	Statement	","	1702:12:43307:43307	809274	5	True				
ANR	810204	Statement	PREF	1702:14:43309:43312	809274	6	True				
ANR	810205	Statement	"""ac_uint4 _uckdcmp_decomp[] = {"""	1702:19:43314:43345	809274	7	True				
ANR	810206	Statement	)	1702:51:43346:43346	809274	8	True				
ANR	810207	ExpressionStatement		1702:52:43347:43347	809274	9	True				
ANR	810208	ExpressionStatement	k = 0	1707:1:43401:43406	809274	10	True				
ANR	810209	AssignmentExpression	k = 0		809274	0		=			
ANR	810210	Identifier	k		809274	0					
ANR	810211	PrimaryExpression	0		809274	1					
ANR	810212	ForStatement	for ( i = 0 ; i < kdecomps_used ; i ++ )		809274	11					
ANR	810213	ForInit	i = 0 ;	1708:6:43414:43419	809274	0	True				
ANR	810214	AssignmentExpression	i = 0		809274	0		=			
ANR	810215	Identifier	i		809274	0					
ANR	810216	PrimaryExpression	0		809274	1					
ANR	810217	Condition	i < kdecomps_used	1708:13:43421:43437	809274	1	True				
ANR	810218	RelationalExpression	i < kdecomps_used		809274	0		<			
ANR	810219	Identifier	i		809274	0					
ANR	810220	Identifier	kdecomps_used		809274	1					
ANR	810221	PostIncDecOperationExpression	i ++	1708:32:43440:43442	809274	2	True				
ANR	810222	Identifier	i		809274	0					
ANR	810223	IncDec	++		809274	1					
ANR	810224	ForStatement	for ( j = 0 ; j < kdecomps [ i ] . used ; j ++ )		809274	3					
ANR	810225	ForInit	j = 0 ;	1709:8:43453:43456	809274	0	True				
ANR	810226	AssignmentExpression	j = 0		809274	0		=			
ANR	810227	Identifier	j		809274	0					
ANR	810228	PrimaryExpression	0		809274	1					
ANR	810229	Condition	j < kdecomps [ i ] . used	1709:13:43458:43475	809274	1	True				
ANR	810230	RelationalExpression	j < kdecomps [ i ] . used		809274	0		<			
ANR	810231	Identifier	j		809274	0					
ANR	810232	MemberAccess	kdecomps [ i ] . used		809274	1					
ANR	810233	ArrayIndexing	kdecomps [ i ]		809274	0					
ANR	810234	Identifier	kdecomps		809274	0					
ANR	810235	Identifier	i		809274	1					
ANR	810236	Identifier	used		809274	1					
ANR	810237	PostIncDecOperationExpression	j ++	1709:33:43478:43480	809274	2	True				
ANR	810238	Identifier	j		809274	0					
ANR	810239	IncDec	++		809274	1					
ANR	810240	CompoundStatement		414:38:11026:11026	809274	3					
ANR	810241	IfStatement	if ( k )		809274	0					
ANR	810242	Condition	k	1710:9:43494:43494	809274	0	True				
ANR	810243	Identifier	k		809274	0					
ANR	810244	ExpressionStatement	"fprintf ( out , "","" )"	1710:12:43497:43514	809274	1	True				
ANR	810245	CallExpression	"fprintf ( out , "","" )"		809274	0					
ANR	810246	Callee	fprintf		809274	0					
ANR	810247	Identifier	fprintf		809274	0					
ANR	810248	ArgumentList	out		809274	1					
ANR	810249	Argument	out		809274	0					
ANR	810250	Identifier	out		809274	0					
ANR	810251	Argument	""","""		809274	1					
ANR	810252	PrimaryExpression	""","""		809274	0					
ANR	810253	IfStatement	if ( ! ( k & 3 ) )		809274	1					
ANR	810254	Condition	! ( k & 3 )	1711:9:43525:43530	809274	0	True				
ANR	810255	UnaryOperationExpression	! ( k & 3 )		809274	0					
ANR	810256	UnaryOperator	!		809274	0					
ANR	810257	BitAndExpression	k & 3		809274	1		&			
ANR	810258	Identifier	k		809274	0					
ANR	810259	PrimaryExpression	3		809274	1					
ANR	810260	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1711:17:43533:43552	809274	1	True				
ANR	810261	CallExpression	"fprintf ( out , ""\\n\\t"" )"		809274	0					
ANR	810262	Callee	fprintf		809274	0					
ANR	810263	Identifier	fprintf		809274	0					
ANR	810264	ArgumentList	out		809274	1					
ANR	810265	Argument	out		809274	0					
ANR	810266	Identifier	out		809274	0					
ANR	810267	Argument	"""\\n\\t"""		809274	1					
ANR	810268	PrimaryExpression	"""\\n\\t"""		809274	0					
ANR	810269	ElseStatement	else		809274	0					
ANR	810270	ExpressionStatement	"fprintf ( out , "" "" )"	1712:10:43564:43581	809274	0	True				
ANR	810271	CallExpression	"fprintf ( out , "" "" )"		809274	0					
ANR	810272	Callee	fprintf		809274	0					
ANR	810273	Identifier	fprintf		809274	0					
ANR	810274	ArgumentList	out		809274	1					
ANR	810275	Argument	out		809274	0					
ANR	810276	Identifier	out		809274	0					
ANR	810277	Argument	""" """		809274	1					
ANR	810278	PrimaryExpression	""" """		809274	0					
ANR	810279	ExpressionStatement	k ++	1713:5:43588:43591	809274	2	True				
ANR	810280	PostIncDecOperationExpression	k ++		809274	0					
ANR	810281	Identifier	k		809274	0					
ANR	810282	IncDec	++		809274	1					
ANR	810283	ExpressionStatement	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) kdecomps [ i ] . decomp [ j ] )"	1714:5:43598:43660	809274	3	True				
ANR	810284	CallExpression	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) kdecomps [ i ] . decomp [ j ] )"		809274	0					
ANR	810285	Callee	fprintf		809274	0					
ANR	810286	Identifier	fprintf		809274	0					
ANR	810287	ArgumentList	out		809274	1					
ANR	810288	Argument	out		809274	0					
ANR	810289	Identifier	out		809274	0					
ANR	810290	Argument	"""0x%08lx"""		809274	1					
ANR	810291	PrimaryExpression	"""0x%08lx"""		809274	0					
ANR	810292	Argument	( unsigned long ) kdecomps [ i ] . decomp [ j ]		809274	2					
ANR	810293	CastExpression	( unsigned long ) kdecomps [ i ] . decomp [ j ]		809274	0					
ANR	810294	CastTarget	unsigned long		809274	0					
ANR	810295	ArrayIndexing	kdecomps [ i ] . decomp [ j ]		809274	1					
ANR	810296	MemberAccess	kdecomps [ i ] . decomp		809274	0					
ANR	810297	ArrayIndexing	kdecomps [ i ]		809274	0					
ANR	810298	Identifier	kdecomps		809274	0					
ANR	810299	Identifier	i		809274	1					
ANR	810300	Identifier	decomp		809274	1					
ANR	810301	Identifier	j		809274	1					
ANR	810302	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1716:1:43668:43692	809274	12	True				
ANR	810303	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		809274	0					
ANR	810304	Callee	fprintf		809274	0					
ANR	810305	Identifier	fprintf		809274	0					
ANR	810306	ArgumentList	out		809274	1					
ANR	810307	Argument	out		809274	0					
ANR	810308	Identifier	out		809274	0					
ANR	810309	Argument	"""\\n};\\n\\n"""		809274	1					
ANR	810310	PrimaryExpression	"""\\n};\\n\\n"""		809274	0					
ANR	810311	Statement	fprintf	1780:4:45437:45443	809274	205	True				
ANR	810312	Statement	(	1780:11:45444:45444	809274	206	True				
ANR	810313	Statement	out	1780:12:45445:45447	809274	207	True				
ANR	810314	Statement	","	1780:15:45448:45448	809274	208	True				
ANR	810315	Statement	PREF	1780:17:45450:45453	809274	209	True				
ANR	810316	Statement	"""ac_uint4 _uccmcl_size = %ld;\\n\\n"""	1780:22:45455:45488	809274	210	True				
ANR	810317	Statement	","	1780:56:45489:45489	809274	211	True				
ANR	810318	Statement	(	1780:58:45491:45491	809274	212	True				
ANR	810319	Statement	long	1780:59:45492:45495	809274	213	True				
ANR	810320	Statement	)	1780:63:45496:45496	809274	214	True				
ANR	810321	Statement	ccl_used	1780:65:45498:45505	809274	215	True				
ANR	810322	Statement	)	1780:73:45506:45506	809274	216	True				
ANR	810323	ExpressionStatement		1780:74:45507:45507	809274	217	True				
ANR	810324	Statement	fprintf	1782:4:45514:45520	809274	218	True				
ANR	810325	Statement	(	1782:11:45521:45521	809274	219	True				
ANR	810326	Statement	out	1782:12:45522:45524	809274	220	True				
ANR	810327	Statement	","	1782:15:45525:45525	809274	221	True				
ANR	810328	Statement	PREF	1782:17:45527:45530	809274	222	True				
ANR	810329	Statement	"""ac_uint4 _uccmcl_nodes[] = {"""	1782:22:45532:45561	809274	223	True				
ANR	810330	Statement	)	1782:52:45562:45562	809274	224	True				
ANR	810331	ExpressionStatement		1782:53:45563:45563	809274	225	True				
ANR	810332	IfStatement	if ( ccl_used > 0 )		809274	226					
ANR	810333	Condition	ccl_used > 0	1784:8:45574:45585	809274	0	True				
ANR	810334	RelationalExpression	ccl_used > 0		809274	0		>			
ANR	810335	Identifier	ccl_used		809274	0					
ANR	810336	PrimaryExpression	0		809274	1					
ANR	810337	CompoundStatement		489:22:13131:13131	809274	1					
ANR	810338	ForStatement	for ( i = 0 ; i < ccl_used ; i ++ )		809274	0					
ANR	810339	ForInit	i = 0 ;	1788:6:45647:45652	809274	0	True				
ANR	810340	AssignmentExpression	i = 0		809274	0		=			
ANR	810341	Identifier	i		809274	0					
ANR	810342	PrimaryExpression	0		809274	1					
ANR	810343	Condition	i < ccl_used	1788:13:45654:45663	809274	1	True				
ANR	810344	RelationalExpression	i < ccl_used		809274	0		<			
ANR	810345	Identifier	i		809274	0					
ANR	810346	Identifier	ccl_used		809274	1					
ANR	810347	PostIncDecOperationExpression	i ++	1788:25:45666:45668	809274	2	True				
ANR	810348	Identifier	i		809274	0					
ANR	810349	IncDec	++		809274	1					
ANR	810350	CompoundStatement		493:30:13214:13214	809274	3					
ANR	810351	IfStatement	if ( i )		809274	0					
ANR	810352	Condition	i	1789:9:45682:45682	809274	0	True				
ANR	810353	Identifier	i		809274	0					
ANR	810354	ExpressionStatement	"fprintf ( out , "","" )"	1789:12:45685:45702	809274	1	True				
ANR	810355	CallExpression	"fprintf ( out , "","" )"		809274	0					
ANR	810356	Callee	fprintf		809274	0					
ANR	810357	Identifier	fprintf		809274	0					
ANR	810358	ArgumentList	out		809274	1					
ANR	810359	Argument	out		809274	0					
ANR	810360	Identifier	out		809274	0					
ANR	810361	Argument	""","""		809274	1					
ANR	810362	PrimaryExpression	""","""		809274	0					
ANR	810363	IfStatement	if ( ! ( i & 3 ) )		809274	1					
ANR	810364	Condition	! ( i & 3 )	1790:9:45713:45718	809274	0	True				
ANR	810365	UnaryOperationExpression	! ( i & 3 )		809274	0					
ANR	810366	UnaryOperator	!		809274	0					
ANR	810367	BitAndExpression	i & 3		809274	1		&			
ANR	810368	Identifier	i		809274	0					
ANR	810369	PrimaryExpression	3		809274	1					
ANR	810370	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1790:17:45721:45741	809274	1	True				
ANR	810371	CallExpression	"fprintf ( out , ""\\n\\t"" )"		809274	0					
ANR	810372	Callee	fprintf		809274	0					
ANR	810373	Identifier	fprintf		809274	0					
ANR	810374	ArgumentList	out		809274	1					
ANR	810375	Argument	out		809274	0					
ANR	810376	Identifier	out		809274	0					
ANR	810377	Argument	"""\\n\\t"""		809274	1					
ANR	810378	PrimaryExpression	"""\\n\\t"""		809274	0					
ANR	810379	ElseStatement	else		809274	0					
ANR	810380	ExpressionStatement	"fprintf ( out , "" "" )"	1791:10:45753:45770	809274	0	True				
ANR	810381	CallExpression	"fprintf ( out , "" "" )"		809274	0					
ANR	810382	Callee	fprintf		809274	0					
ANR	810383	Identifier	fprintf		809274	0					
ANR	810384	ArgumentList	out		809274	1					
ANR	810385	Argument	out		809274	0					
ANR	810386	Identifier	out		809274	0					
ANR	810387	Argument	""" """		809274	1					
ANR	810388	PrimaryExpression	""" """		809274	0					
ANR	810389	ExpressionStatement	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) ccl [ i ] )"	1792:5:45777:45824	809274	2	True				
ANR	810390	CallExpression	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) ccl [ i ] )"		809274	0					
ANR	810391	Callee	fprintf		809274	0					
ANR	810392	Identifier	fprintf		809274	0					
ANR	810393	ArgumentList	out		809274	1					
ANR	810394	Argument	out		809274	0					
ANR	810395	Identifier	out		809274	0					
ANR	810396	Argument	"""0x%08lx"""		809274	1					
ANR	810397	PrimaryExpression	"""0x%08lx"""		809274	0					
ANR	810398	Argument	( unsigned long ) ccl [ i ]		809274	2					
ANR	810399	CastExpression	( unsigned long ) ccl [ i ]		809274	0					
ANR	810400	CastTarget	unsigned long		809274	0					
ANR	810401	ArrayIndexing	ccl [ i ]		809274	1					
ANR	810402	Identifier	ccl		809274	0					
ANR	810403	Identifier	i		809274	1					
ANR	810404	ElseStatement	else		809274	0					
ANR	810405	CompoundStatement		499:11:13383:13383	809274	0					
ANR	810406	ExpressionStatement	"fprintf ( out , ""\\t0"" )"	1795:1:45843:45862	809274	0	True				
ANR	810407	CallExpression	"fprintf ( out , ""\\t0"" )"		809274	0					
ANR	810408	Callee	fprintf		809274	0					
ANR	810409	Identifier	fprintf		809274	0					
ANR	810410	ArgumentList	out		809274	1					
ANR	810411	Argument	out		809274	0					
ANR	810412	Identifier	out		809274	0					
ANR	810413	Argument	"""\\t0"""		809274	1					
ANR	810414	PrimaryExpression	"""\\t0"""		809274	0					
ANR	810415	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1797:4:45874:45898	809274	227	True				
ANR	810416	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		809274	0					
ANR	810417	Callee	fprintf		809274	0					
ANR	810418	Identifier	fprintf		809274	0					
ANR	810419	ArgumentList	out		809274	1					
ANR	810420	Argument	out		809274	0					
ANR	810421	Identifier	out		809274	0					
ANR	810422	Argument	"""\\n};\\n\\n"""		809274	1					
ANR	810423	PrimaryExpression	"""\\n};\\n\\n"""		809274	0					
ANR	810424	Statement	fprintf	1839:4:46887:46893	809274	228	True				
ANR	810425	Statement	(	1839:11:46894:46894	809274	229	True				
ANR	810426	Statement	out	1839:12:46895:46897	809274	230	True				
ANR	810427	Statement	","	1839:15:46898:46898	809274	231	True				
ANR	810428	Statement	PREF	1839:17:46900:46903	809274	232	True				
ANR	810429	Statement	"""ac_uint4 _ucnum_size = %lu;\\n\\n"""	1839:22:46905:46937	809274	233	True				
ANR	810430	Statement	","	1839:55:46938:46938	809274	234	True				
ANR	810431	Statement	(	1840:8:46948:46948	809274	235	True				
ANR	810432	Statement	unsigned	1840:9:46949:46956	809274	236	True				
ANR	810433	Statement	long	1840:18:46958:46961	809274	237	True				
ANR	810434	Statement	)	1840:22:46962:46962	809274	238	True				
ANR	810435	Statement	ncodes_used	1840:23:46963:46973	809274	239	True				
ANR	810436	Statement	<<	1840:34:46974:46975	809274	240	True				
ANR	810437	Statement	1	1840:36:46976:46976	809274	241	True				
ANR	810438	Statement	)	1840:37:46977:46977	809274	242	True				
ANR	810439	ExpressionStatement		1840:38:46978:46978	809274	243	True				
ANR	810440	Statement	fprintf	1842:4:46985:46991	809274	244	True				
ANR	810441	Statement	(	1842:11:46992:46992	809274	245	True				
ANR	810442	Statement	out	1842:12:46993:46995	809274	246	True				
ANR	810443	Statement	","	1842:15:46996:46996	809274	247	True				
ANR	810444	Statement	PREF	1842:17:46998:47001	809274	248	True				
ANR	810445	Statement	"""ac_uint4 _ucnum_nodes[] = {"""	1842:22:47003:47031	809274	249	True				
ANR	810446	Statement	)	1842:51:47032:47032	809274	250	True				
ANR	810447	ExpressionStatement		1842:52:47033:47033	809274	251	True				
ANR	810448	IfStatement	if ( ncodes_used > 0 )		809274	252					
ANR	810449	Condition	ncodes_used > 0	1847:8:47113:47127	809274	0	True				
ANR	810450	RelationalExpression	ncodes_used > 0		809274	0		>			
ANR	810451	Identifier	ncodes_used		809274	0					
ANR	810452	PrimaryExpression	0		809274	1					
ANR	810453	CompoundStatement		552:25:14673:14673	809274	1					
ANR	810454	ForStatement	for ( i = 0 ; i < ncodes_used ; i ++ )		809274	0					
ANR	810455	ForInit	i = 0 ;	1848:6:47138:47143	809274	0	True				
ANR	810456	AssignmentExpression	i = 0		809274	0		=			
ANR	810457	Identifier	i		809274	0					
ANR	810458	PrimaryExpression	0		809274	1					
ANR	810459	Condition	i < ncodes_used	1848:13:47145:47157	809274	1	True				
ANR	810460	RelationalExpression	i < ncodes_used		809274	0		<			
ANR	810461	Identifier	i		809274	0					
ANR	810462	Identifier	ncodes_used		809274	1					
ANR	810463	PostIncDecOperationExpression	i ++	1848:28:47160:47162	809274	2	True				
ANR	810464	Identifier	i		809274	0					
ANR	810465	IncDec	++		809274	1					
ANR	810466	CompoundStatement		553:33:14708:14708	809274	3					
ANR	810467	IfStatement	if ( i )		809274	0					
ANR	810468	Condition	i	1849:9:47176:47176	809274	0	True				
ANR	810469	Identifier	i		809274	0					
ANR	810470	ExpressionStatement	"fprintf ( out , "","" )"	1849:12:47179:47196	809274	1	True				
ANR	810471	CallExpression	"fprintf ( out , "","" )"		809274	0					
ANR	810472	Callee	fprintf		809274	0					
ANR	810473	Identifier	fprintf		809274	0					
ANR	810474	ArgumentList	out		809274	1					
ANR	810475	Argument	out		809274	0					
ANR	810476	Identifier	out		809274	0					
ANR	810477	Argument	""","""		809274	1					
ANR	810478	PrimaryExpression	""","""		809274	0					
ANR	810479	IfStatement	if ( ! ( i & 1 ) )		809274	1					
ANR	810480	Condition	! ( i & 1 )	1850:9:47207:47212	809274	0	True				
ANR	810481	UnaryOperationExpression	! ( i & 1 )		809274	0					
ANR	810482	UnaryOperator	!		809274	0					
ANR	810483	BitAndExpression	i & 1		809274	1		&			
ANR	810484	Identifier	i		809274	0					
ANR	810485	PrimaryExpression	1		809274	1					
ANR	810486	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1850:17:47215:47235	809274	1	True				
ANR	810487	CallExpression	"fprintf ( out , ""\\n\\t"" )"		809274	0					
ANR	810488	Callee	fprintf		809274	0					
ANR	810489	Identifier	fprintf		809274	0					
ANR	810490	ArgumentList	out		809274	1					
ANR	810491	Argument	out		809274	0					
ANR	810492	Identifier	out		809274	0					
ANR	810493	Argument	"""\\n\\t"""		809274	1					
ANR	810494	PrimaryExpression	"""\\n\\t"""		809274	0					
ANR	810495	ElseStatement	else		809274	0					
ANR	810496	ExpressionStatement	"fprintf ( out , "" "" )"	1851:10:47247:47264	809274	0	True				
ANR	810497	CallExpression	"fprintf ( out , "" "" )"		809274	0					
ANR	810498	Callee	fprintf		809274	0					
ANR	810499	Identifier	fprintf		809274	0					
ANR	810500	ArgumentList	out		809274	1					
ANR	810501	Argument	out		809274	0					
ANR	810502	Identifier	out		809274	0					
ANR	810503	Argument	""" """		809274	1					
ANR	810504	PrimaryExpression	""" """		809274	0					
ANR	810505	ExpressionStatement	"fprintf ( out , ""0x%08lx, 0x%08lx"" , ( unsigned long ) ncodes [ i ] . code , ( unsigned long ) ncodes [ i ] . idx )"	1852:5:47271:47375	809274	2	True				
ANR	810506	CallExpression	"fprintf ( out , ""0x%08lx, 0x%08lx"" , ( unsigned long ) ncodes [ i ] . code , ( unsigned long ) ncodes [ i ] . idx )"		809274	0					
ANR	810507	Callee	fprintf		809274	0					
ANR	810508	Identifier	fprintf		809274	0					
ANR	810509	ArgumentList	out		809274	1					
ANR	810510	Argument	out		809274	0					
ANR	810511	Identifier	out		809274	0					
ANR	810512	Argument	"""0x%08lx, 0x%08lx"""		809274	1					
ANR	810513	PrimaryExpression	"""0x%08lx, 0x%08lx"""		809274	0					
ANR	810514	Argument	( unsigned long ) ncodes [ i ] . code		809274	2					
ANR	810515	CastExpression	( unsigned long ) ncodes [ i ] . code		809274	0					
ANR	810516	CastTarget	unsigned long		809274	0					
ANR	810517	MemberAccess	ncodes [ i ] . code		809274	1					
ANR	810518	ArrayIndexing	ncodes [ i ]		809274	0					
ANR	810519	Identifier	ncodes		809274	0					
ANR	810520	Identifier	i		809274	1					
ANR	810521	Identifier	code		809274	1					
ANR	810522	Argument	( unsigned long ) ncodes [ i ] . idx		809274	3					
ANR	810523	CastExpression	( unsigned long ) ncodes [ i ] . idx		809274	0					
ANR	810524	CastTarget	unsigned long		809274	0					
ANR	810525	MemberAccess	ncodes [ i ] . idx		809274	1					
ANR	810526	ArrayIndexing	ncodes [ i ]		809274	0					
ANR	810527	Identifier	ncodes		809274	0					
ANR	810528	Identifier	i		809274	1					
ANR	810529	Identifier	idx		809274	1					
ANR	810530	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1855:1:47381:47405	809274	1	True				
ANR	810531	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		809274	0					
ANR	810532	Callee	fprintf		809274	0					
ANR	810533	Identifier	fprintf		809274	0					
ANR	810534	ArgumentList	out		809274	1					
ANR	810535	Argument	out		809274	0					
ANR	810536	Identifier	out		809274	0					
ANR	810537	Argument	"""\\n};\\n\\n"""		809274	1					
ANR	810538	PrimaryExpression	"""\\n};\\n\\n"""		809274	0					
ANR	810539	Statement	fprintf	1857:1:47409:47415	809274	2	True				
ANR	810540	Statement	(	1857:8:47416:47416	809274	3	True				
ANR	810541	Statement	out	1857:9:47417:47419	809274	4	True				
ANR	810542	Statement	","	1857:12:47420:47420	809274	5	True				
ANR	810543	Statement	PREF	1857:14:47422:47425	809274	6	True				
ANR	810544	Statement	"""short _ucnum_vals[] = {"""	1857:19:47427:47451	809274	7	True				
ANR	810545	Statement	)	1857:44:47452:47452	809274	8	True				
ANR	810546	ExpressionStatement		1857:45:47453:47453	809274	9	True				
ANR	810547	ForStatement	for ( i = 0 ; i < nums_used ; i ++ )		809274	10					
ANR	810548	ForInit	i = 0 ;	1858:6:47461:47466	809274	0	True				
ANR	810549	AssignmentExpression	i = 0		809274	0		=			
ANR	810550	Identifier	i		809274	0					
ANR	810551	PrimaryExpression	0		809274	1					
ANR	810552	Condition	i < nums_used	1858:13:47468:47478	809274	1	True				
ANR	810553	RelationalExpression	i < nums_used		809274	0		<			
ANR	810554	Identifier	i		809274	0					
ANR	810555	Identifier	nums_used		809274	1					
ANR	810556	PostIncDecOperationExpression	i ++	1858:26:47481:47483	809274	2	True				
ANR	810557	Identifier	i		809274	0					
ANR	810558	IncDec	++		809274	1					
ANR	810559	CompoundStatement		563:31:15029:15029	809274	3					
ANR	810560	IfStatement	if ( i )		809274	0					
ANR	810561	Condition	i	1859:9:47497:47497	809274	0	True				
ANR	810562	Identifier	i		809274	0					
ANR	810563	ExpressionStatement	"fprintf ( out , "","" )"	1859:12:47500:47517	809274	1	True				
ANR	810564	CallExpression	"fprintf ( out , "","" )"		809274	0					
ANR	810565	Callee	fprintf		809274	0					
ANR	810566	Identifier	fprintf		809274	0					
ANR	810567	ArgumentList	out		809274	1					
ANR	810568	Argument	out		809274	0					
ANR	810569	Identifier	out		809274	0					
ANR	810570	Argument	""","""		809274	1					
ANR	810571	PrimaryExpression	""","""		809274	0					
ANR	810572	IfStatement	if ( ! ( i & 3 ) )		809274	1					
ANR	810573	Condition	! ( i & 3 )	1860:9:47528:47533	809274	0	True				
ANR	810574	UnaryOperationExpression	! ( i & 3 )		809274	0					
ANR	810575	UnaryOperator	!		809274	0					
ANR	810576	BitAndExpression	i & 3		809274	1		&			
ANR	810577	Identifier	i		809274	0					
ANR	810578	PrimaryExpression	3		809274	1					
ANR	810579	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1860:17:47536:47556	809274	1	True				
ANR	810580	CallExpression	"fprintf ( out , ""\\n\\t"" )"		809274	0					
ANR	810581	Callee	fprintf		809274	0					
ANR	810582	Identifier	fprintf		809274	0					
ANR	810583	ArgumentList	out		809274	1					
ANR	810584	Argument	out		809274	0					
ANR	810585	Identifier	out		809274	0					
ANR	810586	Argument	"""\\n\\t"""		809274	1					
ANR	810587	PrimaryExpression	"""\\n\\t"""		809274	0					
ANR	810588	ElseStatement	else		809274	0					
ANR	810589	ExpressionStatement	"fprintf ( out , "" "" )"	1861:10:47568:47585	809274	0	True				
ANR	810590	CallExpression	"fprintf ( out , "" "" )"		809274	0					
ANR	810591	Callee	fprintf		809274	0					
ANR	810592	Identifier	fprintf		809274	0					
ANR	810593	ArgumentList	out		809274	1					
ANR	810594	Argument	out		809274	0					
ANR	810595	Identifier	out		809274	0					
ANR	810596	Argument	""" """		809274	1					
ANR	810597	PrimaryExpression	""" """		809274	0					
ANR	810598	IfStatement	if ( nums [ i ] . numerator < 0 )		809274	2					
ANR	810599	Condition	nums [ i ] . numerator < 0	1862:9:47596:47616	809274	0	True				
ANR	810600	RelationalExpression	nums [ i ] . numerator < 0		809274	0		<			
ANR	810601	MemberAccess	nums [ i ] . numerator		809274	0					
ANR	810602	ArrayIndexing	nums [ i ]		809274	0					
ANR	810603	Identifier	nums		809274	0					
ANR	810604	Identifier	i		809274	1					
ANR	810605	Identifier	numerator		809274	1					
ANR	810606	PrimaryExpression	0		809274	1					
ANR	810607	CompoundStatement		567:32:15162:15162	809274	1					
ANR	810608	ExpressionStatement	"fprintf ( out , ""%6d, 0x%04x"" , nums [ i ] . numerator , nums [ i ] . denominator )"	1863:2:47623:47694	809274	0	True				
ANR	810609	CallExpression	"fprintf ( out , ""%6d, 0x%04x"" , nums [ i ] . numerator , nums [ i ] . denominator )"		809274	0					
ANR	810610	Callee	fprintf		809274	0					
ANR	810611	Identifier	fprintf		809274	0					
ANR	810612	ArgumentList	out		809274	1					
ANR	810613	Argument	out		809274	0					
ANR	810614	Identifier	out		809274	0					
ANR	810615	Argument	"""%6d, 0x%04x"""		809274	1					
ANR	810616	PrimaryExpression	"""%6d, 0x%04x"""		809274	0					
ANR	810617	Argument	nums [ i ] . numerator		809274	2					
ANR	810618	MemberAccess	nums [ i ] . numerator		809274	0					
ANR	810619	ArrayIndexing	nums [ i ]		809274	0					
ANR	810620	Identifier	nums		809274	0					
ANR	810621	Identifier	i		809274	1					
ANR	810622	Identifier	numerator		809274	1					
ANR	810623	Argument	nums [ i ] . denominator		809274	3					
ANR	810624	MemberAccess	nums [ i ] . denominator		809274	0					
ANR	810625	ArrayIndexing	nums [ i ]		809274	0					
ANR	810626	Identifier	nums		809274	0					
ANR	810627	Identifier	i		809274	1					
ANR	810628	Identifier	denominator		809274	1					
ANR	810629	ElseStatement	else		809274	0					
ANR	810630	CompoundStatement		570:12:15251:15251	809274	0					
ANR	810631	ExpressionStatement	"fprintf ( out , ""0x%04x, 0x%04x"" , nums [ i ] . numerator , nums [ i ] . denominator )"	1866:2:47712:47786	809274	0	True				
ANR	810632	CallExpression	"fprintf ( out , ""0x%04x, 0x%04x"" , nums [ i ] . numerator , nums [ i ] . denominator )"		809274	0					
ANR	810633	Callee	fprintf		809274	0					
ANR	810634	Identifier	fprintf		809274	0					
ANR	810635	ArgumentList	out		809274	1					
ANR	810636	Argument	out		809274	0					
ANR	810637	Identifier	out		809274	0					
ANR	810638	Argument	"""0x%04x, 0x%04x"""		809274	1					
ANR	810639	PrimaryExpression	"""0x%04x, 0x%04x"""		809274	0					
ANR	810640	Argument	nums [ i ] . numerator		809274	2					
ANR	810641	MemberAccess	nums [ i ] . numerator		809274	0					
ANR	810642	ArrayIndexing	nums [ i ]		809274	0					
ANR	810643	Identifier	nums		809274	0					
ANR	810644	Identifier	i		809274	1					
ANR	810645	Identifier	numerator		809274	1					
ANR	810646	Argument	nums [ i ] . denominator		809274	3					
ANR	810647	MemberAccess	nums [ i ] . denominator		809274	0					
ANR	810648	ArrayIndexing	nums [ i ]		809274	0					
ANR	810649	Identifier	nums		809274	0					
ANR	810650	Identifier	i		809274	1					
ANR	810651	Identifier	denominator		809274	1					
ANR	810652	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1870:1:47799:47823	809274	11	True				
ANR	810653	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		809274	0					
ANR	810654	Callee	fprintf		809274	0					
ANR	810655	Identifier	fprintf		809274	0					
ANR	810656	ArgumentList	out		809274	1					
ANR	810657	Argument	out		809274	0					
ANR	810658	Identifier	out		809274	0					
ANR	810659	Argument	"""\\n};\\n\\n"""		809274	1					
ANR	810660	PrimaryExpression	"""\\n};\\n\\n"""		809274	0					
ANR	810661	ExpressionStatement	fclose ( out )	1908:4:48717:48728	809274	253	True				
ANR	810662	CallExpression	fclose ( out )		809274	0					
ANR	810663	Callee	fclose		809274	0					
ANR	810664	Identifier	fclose		809274	0					
ANR	810665	ArgumentList	out		809274	1					
ANR	810666	Argument	out		809274	0					
ANR	810667	Identifier	out		809274	0					
ANR	810668	ReturnType	static void		809274	1					
ANR	810669	Identifier	write_cdata		809274	2					
ANR	810670	ParameterList	char * opath		809274	3					
ANR	810671	Parameter	char * opath	1295:12:32443:32453	809274	0	True				
ANR	810672	ParameterType	char *		809274	0					
ANR	810673	Identifier	opath		809274	1					
ANR	810674	CFGEntryNode	ENTRY		809274		True				
ANR	810675	CFGExitNode	EXIT		809274		True				
ANR	810676	Symbol	comps_used		809274						
ANR	810677	Symbol	upper		809274						
ANR	810678	Symbol	nums_used		809274						
ANR	810679	Symbol	title_used		809274						
ANR	810680	Symbol	ncodes [ i ] . idx		809274						
ANR	810681	Symbol	decomps		809274						
ANR	810682	Symbol	ccl		809274						
ANR	810683	Symbol	path		809274						
ANR	810684	Symbol	kdecomps		809274						
ANR	810685	Symbol	decomps [ i ] . code		809274						
ANR	810686	Symbol	lower_used		809274						
ANR	810687	Symbol	* decomps [ i ] . decomp		809274						
ANR	810688	Symbol	nums		809274						
ANR	810689	Symbol	* * i		809274						
ANR	810690	Symbol	* decomps		809274						
ANR	810691	Symbol	ncodes		809274						
ANR	810692	Symbol	lower		809274						
ANR	810693	Symbol	nums [ i ] . denominator		809274						
ANR	810694	Symbol	* * proptbl		809274						
ANR	810695	Symbol	NUMPROPS		809274						
ANR	810696	Symbol	casecnt		809274						
ANR	810697	Symbol	propcnt		809274						
ANR	810698	Symbol	kdecomps_used		809274						
ANR	810699	Symbol	* ncodes		809274						
ANR	810700	Symbol	* proptbl [ i ] . ranges		809274						
ANR	810701	Symbol	comps [ i ] . count		809274						
ANR	810702	Symbol	idx		809274						
ANR	810703	Symbol	* kdecomps [ i ] . decomp		809274						
ANR	810704	Symbol	* nums		809274						
ANR	810705	Symbol	* propcnt		809274						
ANR	810706	Symbol	opath		809274						
ANR	810707	Symbol	proptbl [ i ] . ranges		809274						
ANR	810708	Symbol	* comps		809274						
ANR	810709	Symbol	* ccl		809274						
ANR	810710	Symbol	ccl_used		809274						
ANR	810711	Symbol	decomps [ i ] . decomp		809274						
ANR	810712	Symbol	title		809274						
ANR	810713	Symbol	out		809274						
ANR	810714	Symbol	kdecomps [ i ] . used		809274						
ANR	810715	Symbol	nprops		809274						
ANR	810716	Symbol	kdecomps [ i ] . decomp		809274						
ANR	810717	Symbol	* hdr		809274						
ANR	810718	Symbol	comps [ i ] . comp		809274						
ANR	810719	Symbol	fopen		809274						
ANR	810720	Symbol	comps [ i ] . code2		809274						
ANR	810721	Symbol	ncodes [ i ] . code		809274						
ANR	810722	Symbol	comps		809274						
ANR	810723	Symbol	decomps_used		809274						
ANR	810724	Symbol	* * kdecomps		809274						
ANR	810725	Symbol	proptbl		809274						
ANR	810726	Symbol	i		809274						
ANR	810727	Symbol	* kdecomps		809274						
ANR	810728	Symbol	j		809274						
ANR	810729	Symbol	k		809274						
ANR	810730	Symbol	proptbl [ i ] . used		809274						
ANR	810731	Symbol	upper_used		809274						
ANR	810732	Symbol	comps [ i ] . code1		809274						
ANR	810733	Symbol	* i		809274						
ANR	810734	Symbol	* j		809274						
ANR	810735	Symbol	* * decomps		809274						
ANR	810736	Symbol	ncodes_used		809274						
ANR	810737	Symbol	bytes		809274						
ANR	810738	Symbol	* proptbl		809274						
ANR	810739	Symbol	hdr		809274						
ANR	810740	Symbol	nums [ i ] . numerator		809274						
ANR	810741	Symbol	kdecomps [ i ] . code		809274						
ANR	810742	Symbol	decomps [ i ] . used		809274						
ANR	810743	Function	usage	1911:0:48733:49225							
ANR	810744	FunctionDef	usage (char * prog)		810743	0					
ANR	810745	CompoundStatement		1913:0:48763:49225	810743	0					
ANR	810746	ExpressionStatement	"fprintf ( stderr , ""Usage: %s [-o output-directory|-x composition-exclusions]"" , prog )"	1914:4:48769:48863	810743	0	True				
ANR	810747	CallExpression	"fprintf ( stderr , ""Usage: %s [-o output-directory|-x composition-exclusions]"" , prog )"		810743	0					
ANR	810748	Callee	fprintf		810743	0					
ANR	810749	Identifier	fprintf		810743	0					
ANR	810750	ArgumentList	stderr		810743	1					
ANR	810751	Argument	stderr		810743	0					
ANR	810752	Identifier	stderr		810743	0					
ANR	810753	Argument	"""Usage: %s [-o output-directory|-x composition-exclusions]"""		810743	1					
ANR	810754	PrimaryExpression	"""Usage: %s [-o output-directory|-x composition-exclusions]"""		810743	0					
ANR	810755	Argument	prog		810743	2					
ANR	810756	Identifier	prog		810743	0					
ANR	810757	ExpressionStatement	"fprintf ( stderr , "" datafile1 datafile2 ...\\n\\n"" )"	1916:4:48869:48916	810743	1	True				
ANR	810758	CallExpression	"fprintf ( stderr , "" datafile1 datafile2 ...\\n\\n"" )"		810743	0					
ANR	810759	Callee	fprintf		810743	0					
ANR	810760	Identifier	fprintf		810743	0					
ANR	810761	ArgumentList	stderr		810743	1					
ANR	810762	Argument	stderr		810743	0					
ANR	810763	Identifier	stderr		810743	0					
ANR	810764	Argument	""" datafile1 datafile2 ...\\n\\n"""		810743	1					
ANR	810765	PrimaryExpression	""" datafile1 datafile2 ...\\n\\n"""		810743	0					
ANR	810766	ExpressionStatement	"fprintf ( stderr , ""-o output-directory\\n\\t\\tWrite the output files to a different"" )"	1917:4:48922:49015	810743	2	True				
ANR	810767	CallExpression	"fprintf ( stderr , ""-o output-directory\\n\\t\\tWrite the output files to a different"" )"		810743	0					
ANR	810768	Callee	fprintf		810743	0					
ANR	810769	Identifier	fprintf		810743	0					
ANR	810770	ArgumentList	stderr		810743	1					
ANR	810771	Argument	stderr		810743	0					
ANR	810772	Identifier	stderr		810743	0					
ANR	810773	Argument	"""-o output-directory\\n\\t\\tWrite the output files to a different"""		810743	1					
ANR	810774	PrimaryExpression	"""-o output-directory\\n\\t\\tWrite the output files to a different"""		810743	0					
ANR	810775	ExpressionStatement	"fprintf ( stderr , "" directory (default: .).\\n"" )"	1919:4:49021:49066	810743	3	True				
ANR	810776	CallExpression	"fprintf ( stderr , "" directory (default: .).\\n"" )"		810743	0					
ANR	810777	Callee	fprintf		810743	0					
ANR	810778	Identifier	fprintf		810743	0					
ANR	810779	ArgumentList	stderr		810743	1					
ANR	810780	Argument	stderr		810743	0					
ANR	810781	Identifier	stderr		810743	0					
ANR	810782	Argument	""" directory (default: .).\\n"""		810743	1					
ANR	810783	PrimaryExpression	""" directory (default: .).\\n"""		810743	0					
ANR	810784	ExpressionStatement	"fprintf ( stderr , ""-x composition-exclusion\\n\\t\\tFile of composition codes"" )"	1920:4:49072:49158	810743	4	True				
ANR	810785	CallExpression	"fprintf ( stderr , ""-x composition-exclusion\\n\\t\\tFile of composition codes"" )"		810743	0					
ANR	810786	Callee	fprintf		810743	0					
ANR	810787	Identifier	fprintf		810743	0					
ANR	810788	ArgumentList	stderr		810743	1					
ANR	810789	Argument	stderr		810743	0					
ANR	810790	Identifier	stderr		810743	0					
ANR	810791	Argument	"""-x composition-exclusion\\n\\t\\tFile of composition codes"""		810743	1					
ANR	810792	PrimaryExpression	"""-x composition-exclusion\\n\\t\\tFile of composition codes"""		810743	0					
ANR	810793	ExpressionStatement	"fprintf ( stderr , "" that should be excluded.\\n"" )"	1922:4:49164:49210	810743	5	True				
ANR	810794	CallExpression	"fprintf ( stderr , "" that should be excluded.\\n"" )"		810743	0					
ANR	810795	Callee	fprintf		810743	0					
ANR	810796	Identifier	fprintf		810743	0					
ANR	810797	ArgumentList	stderr		810743	1					
ANR	810798	Argument	stderr		810743	0					
ANR	810799	Identifier	stderr		810743	0					
ANR	810800	Argument	""" that should be excluded.\\n"""		810743	1					
ANR	810801	PrimaryExpression	""" that should be excluded.\\n"""		810743	0					
ANR	810802	ExpressionStatement	exit ( 1 )	1923:4:49216:49223	810743	6	True				
ANR	810803	CallExpression	exit ( 1 )		810743	0					
ANR	810804	Callee	exit		810743	0					
ANR	810805	Identifier	exit		810743	0					
ANR	810806	ArgumentList	1		810743	1					
ANR	810807	Argument	1		810743	0					
ANR	810808	PrimaryExpression	1		810743	0					
ANR	810809	ReturnType	static void		810743	1					
ANR	810810	Identifier	usage		810743	2					
ANR	810811	ParameterList	char * prog		810743	3					
ANR	810812	Parameter	char * prog	1912:6:48751:48760	810743	0	True				
ANR	810813	ParameterType	char *		810743	0					
ANR	810814	Identifier	prog		810743	1					
ANR	810815	CFGEntryNode	ENTRY		810743		True				
ANR	810816	CFGExitNode	EXIT		810743		True				
ANR	810817	Symbol	stderr		810743						
ANR	810818	Symbol	prog		810743						
ANR	810819	Function	main	1926:0:49228:50588							
ANR	810820	FunctionDef	"main (int argc , char * argv [ ])"		810819	0					
ANR	810821	CompoundStatement		1928:0:49261:50588	810819	0					
ANR	810822	IdentifierDeclStatement	FILE * in ;	1929:4:49267:49275	810819	0	True				
ANR	810823	IdentifierDecl	* in		810819	0					
ANR	810824	IdentifierDeclType	FILE *		810819	0					
ANR	810825	Identifier	in		810819	1					
ANR	810826	IdentifierDeclStatement	"char * prog , * opath ;"	1930:4:49281:49299	810819	1	True				
ANR	810827	IdentifierDecl	* prog		810819	0					
ANR	810828	IdentifierDeclType	char *		810819	0					
ANR	810829	Identifier	prog		810819	1					
ANR	810830	IdentifierDecl	* opath		810819	1					
ANR	810831	IdentifierDeclType	char *		810819	0					
ANR	810832	Identifier	opath		810819	1					
ANR	810833	ExpressionStatement	prog = argv [ 1 ]	1932:4:49306:49320	810819	2	True				
ANR	810834	AssignmentExpression	prog = argv [ 1 ]		810819	0		=			
ANR	810835	Identifier	prog		810819	0					
ANR	810836	ArrayIndexing	argv [ 1 ]		810819	1					
ANR	810837	Identifier	argv		810819	0					
ANR	810838	PrimaryExpression	1		810819	1					
ANR	810839	ExpressionStatement	opath = 0	1934:4:49327:49336	810819	3	True				
ANR	810840	AssignmentExpression	opath = 0		810819	0		=			
ANR	810841	Identifier	opath		810819	0					
ANR	810842	PrimaryExpression	0		810819	1					
ANR	810843	ExpressionStatement	in = stdin	1935:4:49342:49352	810819	4	True				
ANR	810844	AssignmentExpression	in = stdin		810819	0		=			
ANR	810845	Identifier	in		810819	0					
ANR	810846	Identifier	stdin		810819	1					
ANR	810847	ExpressionStatement	argc --	1937:4:49359:49365	810819	5	True				
ANR	810848	PostIncDecOperationExpression	argc --		810819	0					
ANR	810849	Identifier	argc		810819	0					
ANR	810850	IncDec	--		810819	1					
ANR	810851	ExpressionStatement	argv ++	1938:4:49371:49377	810819	6	True				
ANR	810852	PostIncDecOperationExpression	argv ++		810819	0					
ANR	810853	Identifier	argv		810819	0					
ANR	810854	IncDec	++		810819	1					
ANR	810855	WhileStatement	while ( argc > 0 )		810819	7					
ANR	810856	Condition	argc > 0	1940:11:49391:49398	810819	0	True				
ANR	810857	RelationalExpression	argc > 0		810819	0		>			
ANR	810858	Identifier	argc		810819	0					
ANR	810859	PrimaryExpression	0		810819	1					
ANR	810860	CompoundStatement		13:21:139:139	810819	1					
ANR	810861	IfStatement	if ( argv [ 0 ] [ 0 ] == '-' )		810819	0					
ANR	810862	Condition	argv [ 0 ] [ 0 ] == '-'	1941:12:49415:49431	810819	0	True				
ANR	810863	EqualityExpression	argv [ 0 ] [ 0 ] == '-'		810819	0		==			
ANR	810864	ArrayIndexing	argv [ 0 ] [ 0 ]		810819	0					
ANR	810865	ArrayIndexing	argv [ 0 ]		810819	0					
ANR	810866	Identifier	argv		810819	0					
ANR	810867	PrimaryExpression	0		810819	1					
ANR	810868	PrimaryExpression	0		810819	1					
ANR	810869	PrimaryExpression	'-'		810819	1					
ANR	810870	CompoundStatement		14:31:172:172	810819	1					
ANR	810871	SwitchStatement	switch ( argv [ 0 ] [ 1 ] )		810819	0					
ANR	810872	Condition	argv [ 0 ] [ 1 ]	1942:20:49456:49465	810819	0	True				
ANR	810873	ArrayIndexing	argv [ 0 ] [ 1 ]		810819	0					
ANR	810874	ArrayIndexing	argv [ 0 ]		810819	0					
ANR	810875	Identifier	argv		810819	0					
ANR	810876	PrimaryExpression	0		810819	1					
ANR	810877	PrimaryExpression	1		810819	1					
ANR	810878	CompoundStatement		15:32:206:206	810819	1					
ANR	810879	Label	case 'o' :	1943:14:49484:49492	810819	0	True				
ANR	810880	ExpressionStatement	argc --	1944:16:49510:49516	810819	1	True				
ANR	810881	PostIncDecOperationExpression	argc --		810819	0					
ANR	810882	Identifier	argc		810819	0					
ANR	810883	IncDec	--		810819	1					
ANR	810884	ExpressionStatement	argv ++	1945:16:49534:49540	810819	2	True				
ANR	810885	PostIncDecOperationExpression	argv ++		810819	0					
ANR	810886	Identifier	argv		810819	0					
ANR	810887	IncDec	++		810819	1					
ANR	810888	ExpressionStatement	opath = argv [ 0 ]	1946:16:49558:49573	810819	3	True				
ANR	810889	AssignmentExpression	opath = argv [ 0 ]		810819	0		=			
ANR	810890	Identifier	opath		810819	0					
ANR	810891	ArrayIndexing	argv [ 0 ]		810819	1					
ANR	810892	Identifier	argv		810819	0					
ANR	810893	PrimaryExpression	0		810819	1					
ANR	810894	BreakStatement	break ;	1947:16:49591:49596	810819	4	True				
ANR	810895	Label	case 'x' :	1948:14:49612:49620	810819	5	True				
ANR	810896	ExpressionStatement	argc --	1949:16:49638:49644	810819	6	True				
ANR	810897	PostIncDecOperationExpression	argc --		810819	0					
ANR	810898	Identifier	argc		810819	0					
ANR	810899	IncDec	--		810819	1					
ANR	810900	ExpressionStatement	argv ++	1950:16:49662:49668	810819	7	True				
ANR	810901	PostIncDecOperationExpression	argv ++		810819	0					
ANR	810902	Identifier	argv		810819	0					
ANR	810903	IncDec	++		810819	1					
ANR	810904	IfStatement	"if ( ( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0 )"		810819	8					
ANR	810905	Condition	"( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0"	1951:20:49690:49720	810819	0	True				
ANR	810906	EqualityExpression	"( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0"		810819	0		==			
ANR	810907	AssignmentExpression	"in = fopen ( argv [ 0 ] , ""r"" )"		810819	0		=			
ANR	810908	Identifier	in		810819	0					
ANR	810909	CallExpression	"fopen ( argv [ 0 ] , ""r"" )"		810819	1					
ANR	810910	Callee	fopen		810819	0					
ANR	810911	Identifier	fopen		810819	0					
ANR	810912	ArgumentList	argv [ 0 ]		810819	1					
ANR	810913	Argument	argv [ 0 ]		810819	0					
ANR	810914	ArrayIndexing	argv [ 0 ]		810819	0					
ANR	810915	Identifier	argv		810819	0					
ANR	810916	PrimaryExpression	0		810819	1					
ANR	810917	Argument	"""r"""		810819	1					
ANR	810918	PrimaryExpression	"""r"""		810819	0					
ANR	810919	PrimaryExpression	0		810819	1					
ANR	810920	ExpressionStatement	"fprintf ( stderr , ""%s: unable to open composition exclusion file %s\\n"" , prog , argv [ 0 ] )"	1952:18:49741:49877	810819	1	True				
ANR	810921	CallExpression	"fprintf ( stderr , ""%s: unable to open composition exclusion file %s\\n"" , prog , argv [ 0 ] )"		810819	0					
ANR	810922	Callee	fprintf		810819	0					
ANR	810923	Identifier	fprintf		810819	0					
ANR	810924	ArgumentList	stderr		810819	1					
ANR	810925	Argument	stderr		810819	0					
ANR	810926	Identifier	stderr		810819	0					
ANR	810927	Argument	"""%s: unable to open composition exclusion file %s\\n"""		810819	1					
ANR	810928	PrimaryExpression	"""%s: unable to open composition exclusion file %s\\n"""		810819	0					
ANR	810929	Argument	prog		810819	2					
ANR	810930	Identifier	prog		810819	0					
ANR	810931	Argument	argv [ 0 ]		810819	3					
ANR	810932	ArrayIndexing	argv [ 0 ]		810819	0					
ANR	810933	Identifier	argv		810819	0					
ANR	810934	PrimaryExpression	0		810819	1					
ANR	810935	ElseStatement	else		810819	0					
ANR	810936	CompoundStatement		28:21:638:638	810819	0					
ANR	810937	ExpressionStatement	read_compexdata ( in )	1956:20:49922:49941	810819	0	True				
ANR	810938	CallExpression	read_compexdata ( in )		810819	0					
ANR	810939	Callee	read_compexdata		810819	0					
ANR	810940	Identifier	read_compexdata		810819	0					
ANR	810941	ArgumentList	in		810819	1					
ANR	810942	Argument	in		810819	0					
ANR	810943	Identifier	in		810819	0					
ANR	810944	ExpressionStatement	fclose ( in )	1957:20:49963:49973	810819	1	True				
ANR	810945	CallExpression	fclose ( in )		810819	0					
ANR	810946	Callee	fclose		810819	0					
ANR	810947	Identifier	fclose		810819	0					
ANR	810948	ArgumentList	in		810819	1					
ANR	810949	Argument	in		810819	0					
ANR	810950	Identifier	in		810819	0					
ANR	810951	ExpressionStatement	in = 0	1958:20:49995:50001	810819	2	True				
ANR	810952	AssignmentExpression	in = 0		810819	0		=			
ANR	810953	Identifier	in		810819	0					
ANR	810954	PrimaryExpression	0		810819	1					
ANR	810955	BreakStatement	break ;	1960:16:50037:50042	810819	9	True				
ANR	810956	Label	default :	1961:14:50058:50065	810819	10	True				
ANR	810957	Identifier	default		810819	0					
ANR	810958	ExpressionStatement	usage ( prog )	1962:16:50083:50094	810819	11	True				
ANR	810959	CallExpression	usage ( prog )		810819	0					
ANR	810960	Callee	usage		810819	0					
ANR	810961	Identifier	usage		810819	0					
ANR	810962	ArgumentList	prog		810819	1					
ANR	810963	Argument	prog		810819	0					
ANR	810964	Identifier	prog		810819	0					
ANR	810965	ElseStatement	else		810819	0					
ANR	810966	CompoundStatement		37:15:863:863	810819	0					
ANR	810967	IfStatement	if ( in != stdin && in != NULL )		810819	0					
ANR	810968	Condition	in != stdin && in != NULL	1965:16:50143:50167	810819	0	True				
ANR	810969	AndExpression	in != stdin && in != NULL		810819	0		&&			
ANR	810970	EqualityExpression	in != stdin		810819	0		!=			
ANR	810971	Identifier	in		810819	0					
ANR	810972	Identifier	stdin		810819	1					
ANR	810973	EqualityExpression	in != NULL		810819	1		!=			
ANR	810974	Identifier	in		810819	0					
ANR	810975	Identifier	NULL		810819	1					
ANR	810976	ExpressionStatement	fclose ( in )	1966:14:50184:50194	810819	1	True				
ANR	810977	CallExpression	fclose ( in )		810819	0					
ANR	810978	Callee	fclose		810819	0					
ANR	810979	Identifier	fclose		810819	0					
ANR	810980	ArgumentList	in		810819	1					
ANR	810981	Argument	in		810819	0					
ANR	810982	Identifier	in		810819	0					
ANR	810983	IfStatement	"if ( ( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0 )"		810819	1					
ANR	810984	Condition	"( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0"	1967:16:50212:50242	810819	0	True				
ANR	810985	EqualityExpression	"( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0"		810819	0		==			
ANR	810986	AssignmentExpression	"in = fopen ( argv [ 0 ] , ""r"" )"		810819	0		=			
ANR	810987	Identifier	in		810819	0					
ANR	810988	CallExpression	"fopen ( argv [ 0 ] , ""r"" )"		810819	1					
ANR	810989	Callee	fopen		810819	0					
ANR	810990	Identifier	fopen		810819	0					
ANR	810991	ArgumentList	argv [ 0 ]		810819	1					
ANR	810992	Argument	argv [ 0 ]		810819	0					
ANR	810993	ArrayIndexing	argv [ 0 ]		810819	0					
ANR	810994	Identifier	argv		810819	0					
ANR	810995	PrimaryExpression	0		810819	1					
ANR	810996	Argument	"""r"""		810819	1					
ANR	810997	PrimaryExpression	"""r"""		810819	0					
ANR	810998	PrimaryExpression	0		810819	1					
ANR	810999	ExpressionStatement	"fprintf ( stderr , ""%s: unable to open ctype file %s\\n"" , prog , argv [ 0 ] )"	1968:14:50259:50349	810819	1	True				
ANR	811000	CallExpression	"fprintf ( stderr , ""%s: unable to open ctype file %s\\n"" , prog , argv [ 0 ] )"		810819	0					
ANR	811001	Callee	fprintf		810819	0					
ANR	811002	Identifier	fprintf		810819	0					
ANR	811003	ArgumentList	stderr		810819	1					
ANR	811004	Argument	stderr		810819	0					
ANR	811005	Identifier	stderr		810819	0					
ANR	811006	Argument	"""%s: unable to open ctype file %s\\n"""		810819	1					
ANR	811007	PrimaryExpression	"""%s: unable to open ctype file %s\\n"""		810819	0					
ANR	811008	Argument	prog		810819	2					
ANR	811009	Identifier	prog		810819	0					
ANR	811010	Argument	argv [ 0 ]		810819	3					
ANR	811011	ArrayIndexing	argv [ 0 ]		810819	0					
ANR	811012	Identifier	argv		810819	0					
ANR	811013	PrimaryExpression	0		810819	1					
ANR	811014	ElseStatement	else		810819	0					
ANR	811015	CompoundStatement		43:17:1106:1106	810819	0					
ANR	811016	ExpressionStatement	read_cdata ( in )	1971:16:50386:50400	810819	0	True				
ANR	811017	CallExpression	read_cdata ( in )		810819	0					
ANR	811018	Callee	read_cdata		810819	0					
ANR	811019	Identifier	read_cdata		810819	0					
ANR	811020	ArgumentList	in		810819	1					
ANR	811021	Argument	in		810819	0					
ANR	811022	Identifier	in		810819	0					
ANR	811023	ExpressionStatement	fclose ( in )	1972:16:50418:50428	810819	1	True				
ANR	811024	CallExpression	fclose ( in )		810819	0					
ANR	811025	Callee	fclose		810819	0					
ANR	811026	Identifier	fclose		810819	0					
ANR	811027	ArgumentList	in		810819	1					
ANR	811028	Argument	in		810819	0					
ANR	811029	Identifier	in		810819	0					
ANR	811030	ExpressionStatement	in = 0	1973:16:50446:50452	810819	2	True				
ANR	811031	AssignmentExpression	in = 0		810819	0		=			
ANR	811032	Identifier	in		810819	0					
ANR	811033	PrimaryExpression	0		810819	1					
ANR	811034	ExpressionStatement	argc --	1976:8:50479:50485	810819	1	True				
ANR	811035	PostIncDecOperationExpression	argc --		810819	0					
ANR	811036	Identifier	argc		810819	0					
ANR	811037	IncDec	--		810819	1					
ANR	811038	ExpressionStatement	argv ++	1977:8:50495:50501	810819	2	True				
ANR	811039	PostIncDecOperationExpression	argv ++		810819	0					
ANR	811040	Identifier	argv		810819	0					
ANR	811041	IncDec	++		810819	1					
ANR	811042	IfStatement	if ( opath == 0 )		810819	8					
ANR	811043	Condition	opath == 0	1980:8:50518:50527	810819	0	True				
ANR	811044	EqualityExpression	opath == 0		810819	0		==			
ANR	811045	Identifier	opath		810819	0					
ANR	811046	PrimaryExpression	0		810819	1					
ANR	811047	ExpressionStatement	"opath = ""."""	1981:6:50536:50547	810819	1	True				
ANR	811048	AssignmentExpression	"opath = ""."""		810819	0		=			
ANR	811049	Identifier	opath		810819	0					
ANR	811050	PrimaryExpression	"""."""		810819	1					
ANR	811051	ExpressionStatement	write_cdata ( opath )	1982:4:50553:50571	810819	9	True				
ANR	811052	CallExpression	write_cdata ( opath )		810819	0					
ANR	811053	Callee	write_cdata		810819	0					
ANR	811054	Identifier	write_cdata		810819	0					
ANR	811055	ArgumentList	opath		810819	1					
ANR	811056	Argument	opath		810819	0					
ANR	811057	Identifier	opath		810819	0					
ANR	811058	ReturnStatement	return 0 ;	1984:4:50578:50586	810819	10	True				
ANR	811059	PrimaryExpression	0		810819	0					
ANR	811060	ReturnType	int		810819	1					
ANR	811061	Identifier	main		810819	2					
ANR	811062	ParameterList	"int argc , char * argv [ ]"		810819	3					
ANR	811063	Parameter	int argc	1927:5:49237:49244	810819	0	True				
ANR	811064	ParameterType	int		810819	0					
ANR	811065	Identifier	argc		810819	1					
ANR	811066	Parameter	char * argv [ ]	1927:15:49247:49258	810819	1	True				
ANR	811067	ParameterType	char * [ ]		810819	0					
ANR	811068	Identifier	argv		810819	1					
ANR	811069	CFGEntryNode	ENTRY		810819		True				
ANR	811070	CFGExitNode	EXIT		810819		True				
ANR	811071	Symbol	argc		810819						
ANR	811072	Symbol	fopen		810819						
ANR	811073	Symbol	stdin		810819						
ANR	811074	Symbol	NULL		810819						
ANR	811075	Symbol	opath		810819						
ANR	811076	Symbol	in		810819						
ANR	811077	Symbol	* * argv		810819						
ANR	811078	Symbol	* argv		810819						
ANR	811079	Symbol	stderr		810819						
ANR	811080	Symbol	argv		810819						
ANR	811081	Symbol	prog		810819						
