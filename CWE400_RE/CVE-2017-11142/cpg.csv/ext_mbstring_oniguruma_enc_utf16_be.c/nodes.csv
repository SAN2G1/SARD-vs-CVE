command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	692804	File	data/converged/CVE-2017-11142_php-src/ext_mbstring_oniguruma_enc_utf16_be.c								
ANR	692805	DeclStmt									
ANR	692806	Decl							const int	const int [ ]	EncLen_UTF16
ANR	692807	Function	utf16be_mbc_enc_len	51:0:2449:2525							
ANR	692808	FunctionDef	utf16be_mbc_enc_len (const UChar * p)		692807	0					
ANR	692809	CompoundStatement		53:0:2496:2525	692807	0					
ANR	692810	ReturnStatement	return EncLen_UTF16 [ * p ] ;	54:2:2500:2523	692807	0	True				
ANR	692811	ArrayIndexing	EncLen_UTF16 [ * p ]		692807	0					
ANR	692812	Identifier	EncLen_UTF16		692807	0					
ANR	692813	UnaryOperationExpression	* p		692807	1					
ANR	692814	UnaryOperator	*		692807	0					
ANR	692815	Identifier	p		692807	1					
ANR	692816	ReturnType	static int		692807	1					
ANR	692817	Identifier	utf16be_mbc_enc_len		692807	2					
ANR	692818	ParameterList	const UChar * p		692807	3					
ANR	692819	Parameter	const UChar * p	52:20:2480:2493	692807	0	True				
ANR	692820	ParameterType	const UChar *		692807	0					
ANR	692821	Identifier	p		692807	1					
ANR	692822	CFGEntryNode	ENTRY		692807		True				
ANR	692823	CFGExitNode	EXIT		692807		True				
ANR	692824	Symbol	p		692807						
ANR	692825	Symbol	* EncLen_UTF16		692807						
ANR	692826	Symbol	* p		692807						
ANR	692827	Symbol	EncLen_UTF16		692807						
ANR	692828	Symbol	* * p		692807						
ANR	692829	Function	utf16be_is_mbc_newline	57:0:2528:2932							
ANR	692830	FunctionDef	"utf16be_is_mbc_newline (const UChar * p , const UChar * end)"		692829	0					
ANR	692831	CompoundStatement		59:0:2596:2932	692829	0					
ANR	692832	IfStatement	if ( p + 1 < end )		692829	0					
ANR	692833	Condition	p + 1 < end	60:6:2604:2614	692829	0	True				
ANR	692834	RelationalExpression	p + 1 < end		692829	0		<			
ANR	692835	AdditiveExpression	p + 1		692829	0		+			
ANR	692836	Identifier	p		692829	0					
ANR	692837	PrimaryExpression	1		692829	1					
ANR	692838	Identifier	end		692829	1					
ANR	692839	CompoundStatement		2:19:20:20	692829	1					
ANR	692840	IfStatement	if ( * ( p + 1 ) == 0x0a && * p == 0x00 )		692829	0					
ANR	692841	Condition	* ( p + 1 ) == 0x0a && * p == 0x00	61:8:2627:2654	692829	0	True				
ANR	692842	AndExpression	* ( p + 1 ) == 0x0a && * p == 0x00		692829	0		&&			
ANR	692843	EqualityExpression	* ( p + 1 ) == 0x0a		692829	0		==			
ANR	692844	UnaryOperationExpression	* ( p + 1 )		692829	0					
ANR	692845	UnaryOperator	*		692829	0					
ANR	692846	AdditiveExpression	p + 1		692829	1		+			
ANR	692847	Identifier	p		692829	0					
ANR	692848	PrimaryExpression	1		692829	1					
ANR	692849	PrimaryExpression	0x0a		692829	1					
ANR	692850	EqualityExpression	* p == 0x00		692829	1		==			
ANR	692851	UnaryOperationExpression	* p		692829	0					
ANR	692852	UnaryOperator	*		692829	0					
ANR	692853	Identifier	p		692829	1					
ANR	692854	PrimaryExpression	0x00		692829	1					
ANR	692855	ReturnStatement	return 1 ;	62:6:2663:2671	692829	1	True				
ANR	692856	PrimaryExpression	1		692829	0					
ANR	692857	Statement	if	64:4:2717:2718	692829	1	True				
ANR	692858	Statement	(	64:7:2720:2720	692829	2	True				
ANR	692859	Statement	(	64:8:2721:2721	692829	3	True				
ANR	692860	Statement	*	66:2:2761:2761	692829	4	True				
ANR	692861	Statement	(	66:3:2762:2762	692829	5	True				
ANR	692862	Statement	p	66:4:2763:2763	692829	6	True				
ANR	692863	Statement	+	66:5:2764:2764	692829	7	True				
ANR	692864	Statement	1	66:6:2765:2765	692829	8	True				
ANR	692865	Statement	)	66:7:2766:2766	692829	9	True				
ANR	692866	Statement	==	66:9:2768:2769	692829	10	True				
ANR	692867	Statement	0x0d	66:12:2771:2774	692829	11	True				
ANR	692868	Statement	||	66:17:2776:2777	692829	12	True				
ANR	692869	Statement	*	68:2:2788:2788	692829	13	True				
ANR	692870	Statement	(	68:3:2789:2789	692829	14	True				
ANR	692871	Statement	p	68:4:2790:2790	692829	15	True				
ANR	692872	Statement	+	68:5:2791:2791	692829	16	True				
ANR	692873	Statement	1	68:6:2792:2792	692829	17	True				
ANR	692874	Statement	)	68:7:2793:2793	692829	18	True				
ANR	692875	Statement	==	68:9:2795:2796	692829	19	True				
ANR	692876	Statement	0x85	68:12:2798:2801	692829	20	True				
ANR	692877	Statement	)	68:16:2802:2802	692829	21	True				
ANR	692878	Statement	&&	68:18:2804:2805	692829	22	True				
ANR	692879	Statement	*	68:21:2807:2807	692829	23	True				
ANR	692880	Statement	p	68:22:2808:2808	692829	24	True				
ANR	692881	Statement	==	68:24:2810:2811	692829	25	True				
ANR	692882	Statement	0x00	68:27:2813:2816	692829	26	True				
ANR	692883	Statement	)	68:31:2817:2817	692829	27	True				
ANR	692884	ReturnStatement	return 1 ;	69:6:2825:2833	692829	28	True				
ANR	692885	PrimaryExpression	1		692829	0					
ANR	692886	IfStatement	if ( * p == 0x20 && ( * ( p + 1 ) == 0x29 || * ( p + 1 ) == 0x28 ) )		692829	29					
ANR	692887	Condition	* p == 0x20 && ( * ( p + 1 ) == 0x29 || * ( p + 1 ) == 0x28 )	70:8:2843:2890	692829	0	True				
ANR	692888	AndExpression	* p == 0x20 && ( * ( p + 1 ) == 0x29 || * ( p + 1 ) == 0x28 )		692829	0		&&			
ANR	692889	EqualityExpression	* p == 0x20		692829	0		==			
ANR	692890	UnaryOperationExpression	* p		692829	0					
ANR	692891	UnaryOperator	*		692829	0					
ANR	692892	Identifier	p		692829	1					
ANR	692893	PrimaryExpression	0x20		692829	1					
ANR	692894	OrExpression	* ( p + 1 ) == 0x29 || * ( p + 1 ) == 0x28		692829	1		||			
ANR	692895	EqualityExpression	* ( p + 1 ) == 0x29		692829	0		==			
ANR	692896	UnaryOperationExpression	* ( p + 1 )		692829	0					
ANR	692897	UnaryOperator	*		692829	0					
ANR	692898	AdditiveExpression	p + 1		692829	1		+			
ANR	692899	Identifier	p		692829	0					
ANR	692900	PrimaryExpression	1		692829	1					
ANR	692901	PrimaryExpression	0x29		692829	1					
ANR	692902	EqualityExpression	* ( p + 1 ) == 0x28		692829	1		==			
ANR	692903	UnaryOperationExpression	* ( p + 1 )		692829	0					
ANR	692904	UnaryOperator	*		692829	0					
ANR	692905	AdditiveExpression	p + 1		692829	1		+			
ANR	692906	Identifier	p		692829	0					
ANR	692907	PrimaryExpression	1		692829	1					
ANR	692908	PrimaryExpression	0x28		692829	1					
ANR	692909	ReturnStatement	return 1 ;	71:6:2899:2907	692829	1	True				
ANR	692910	PrimaryExpression	1		692829	0					
ANR	692911	ReturnStatement	return 0 ;	74:2:2922:2930	692829	1	True				
ANR	692912	PrimaryExpression	0		692829	0					
ANR	692913	ReturnType	static int		692829	1					
ANR	692914	Identifier	utf16be_is_mbc_newline		692829	2					
ANR	692915	ParameterList	"const UChar * p , const UChar * end"		692829	3					
ANR	692916	Parameter	const UChar * p	58:23:2562:2575	692829	0	True				
ANR	692917	ParameterType	const UChar *		692829	0					
ANR	692918	Identifier	p		692829	1					
ANR	692919	Parameter	const UChar * end	58:39:2578:2593	692829	1	True				
ANR	692920	ParameterType	const UChar *		692829	0					
ANR	692921	Identifier	end		692829	1					
ANR	692922	CFGEntryNode	ENTRY		692829		True				
ANR	692923	CFGExitNode	EXIT		692829		True				
ANR	692924	Symbol	p		692829						
ANR	692925	Symbol	end		692829						
ANR	692926	Symbol	* p		692829						
ANR	692927	Symbol	* ( p + 1 )		692829						
ANR	692928	DeclStmt									
ANR	692929	Decl							OnigCodePoint	OnigCodePoint	code
ANR	692930	Function	utf16be_code_to_mbclen	93:0:3292:3382							
ANR	692931	FunctionDef	utf16be_code_to_mbclen (OnigCodePoint code)		692930	0					
ANR	692932	CompoundStatement		95:0:3346:3382	692930	0					
ANR	692933	ReturnStatement	return ( code > 0xffff ? 4 : 2 ) ;	96:2:3350:3380	692930	0	True				
ANR	692934	ConditionalExpression	code > 0xffff ? 4 : 2		692930	0					
ANR	692935	Condition	code > 0xffff		692930	0					
ANR	692936	RelationalExpression	code > 0xffff		692930	0		>			
ANR	692937	Identifier	code		692930	0					
ANR	692938	PrimaryExpression	0xffff		692930	1					
ANR	692939	PrimaryExpression	4		692930	1					
ANR	692940	PrimaryExpression	2		692930	2					
ANR	692941	ReturnType	static int		692930	1					
ANR	692942	Identifier	utf16be_code_to_mbclen		692930	2					
ANR	692943	ParameterList	OnigCodePoint code		692930	3					
ANR	692944	Parameter	OnigCodePoint code	94:23:3326:3343	692930	0	True				
ANR	692945	ParameterType	OnigCodePoint		692930	0					
ANR	692946	Identifier	code		692930	1					
ANR	692947	CFGEntryNode	ENTRY		692930		True				
ANR	692948	CFGExitNode	EXIT		692930		True				
ANR	692949	Symbol	code		692930						
ANR	692950	Function	utf16be_code_to_mbc	99:0:3385:3855							
ANR	692951	FunctionDef	"utf16be_code_to_mbc (OnigCodePoint code , UChar * buf)"		692950	0					
ANR	692952	CompoundStatement		101:0:3448:3855	692950	0					
ANR	692953	IdentifierDeclStatement	UChar * p = buf ;	102:2:3452:3466	692950	0	True				
ANR	692954	IdentifierDecl	* p = buf		692950	0					
ANR	692955	IdentifierDeclType	UChar *		692950	0					
ANR	692956	Identifier	p		692950	1					
ANR	692957	AssignmentExpression	* p = buf		692950	2		=			
ANR	692958	Identifier	buf		692950	0					
ANR	692959	Identifier	buf		692950	1					
ANR	692960	IfStatement	if ( code > 0xffff )		692950	1					
ANR	692961	Condition	code > 0xffff	104:6:3475:3487	692950	0	True				
ANR	692962	RelationalExpression	code > 0xffff		692950	0		>			
ANR	692963	Identifier	code		692950	0					
ANR	692964	PrimaryExpression	0xffff		692950	1					
ANR	692965	CompoundStatement		5:4:47:71	692950	1					
ANR	692966	IdentifierDeclStatement	"unsigned int plane , high ;"	105:4:3496:3520	692950	0	True				
ANR	692967	IdentifierDecl	plane		692950	0					
ANR	692968	IdentifierDeclType	unsigned int		692950	0					
ANR	692969	Identifier	plane		692950	1					
ANR	692970	IdentifierDecl	high		692950	1					
ANR	692971	IdentifierDeclType	unsigned int		692950	0					
ANR	692972	Identifier	high		692950	1					
ANR	692973	ExpressionStatement	plane = ( code >> 16 ) - 1	107:4:3527:3551	692950	1	True				
ANR	692974	AssignmentExpression	plane = ( code >> 16 ) - 1		692950	0		=			
ANR	692975	Identifier	plane		692950	0					
ANR	692976	AdditiveExpression	( code >> 16 ) - 1		692950	1		-			
ANR	692977	ShiftExpression	code >> 16		692950	0		>>			
ANR	692978	Identifier	code		692950	0					
ANR	692979	PrimaryExpression	16		692950	1					
ANR	692980	PrimaryExpression	1		692950	1					
ANR	692981	ExpressionStatement	* p ++ = ( plane >> 2 ) + 0xd8	108:4:3557:3583	692950	2	True				
ANR	692982	AssignmentExpression	* p ++ = ( plane >> 2 ) + 0xd8		692950	0		=			
ANR	692983	UnaryOperationExpression	* p ++		692950	0					
ANR	692984	UnaryOperator	*		692950	0					
ANR	692985	PostIncDecOperationExpression	p ++		692950	1					
ANR	692986	Identifier	p		692950	0					
ANR	692987	IncDec	++		692950	1					
ANR	692988	AdditiveExpression	( plane >> 2 ) + 0xd8		692950	1		+			
ANR	692989	ShiftExpression	plane >> 2		692950	0		>>			
ANR	692990	Identifier	plane		692950	0					
ANR	692991	PrimaryExpression	2		692950	1					
ANR	692992	PrimaryExpression	0xd8		692950	1					
ANR	692993	ExpressionStatement	high = ( code & 0xff00 ) >> 8	109:4:3589:3616	692950	3	True				
ANR	692994	AssignmentExpression	high = ( code & 0xff00 ) >> 8		692950	0		=			
ANR	692995	Identifier	high		692950	0					
ANR	692996	ShiftExpression	( code & 0xff00 ) >> 8		692950	1		>>			
ANR	692997	BitAndExpression	code & 0xff00		692950	0		&			
ANR	692998	Identifier	code		692950	0					
ANR	692999	PrimaryExpression	0xff00		692950	1					
ANR	693000	PrimaryExpression	8		692950	1					
ANR	693001	ExpressionStatement	* p ++ = ( ( plane & 0x03 ) << 6 ) + ( high >> 2 )	110:4:3622:3664	692950	4	True				
ANR	693002	AssignmentExpression	* p ++ = ( ( plane & 0x03 ) << 6 ) + ( high >> 2 )		692950	0		=			
ANR	693003	UnaryOperationExpression	* p ++		692950	0					
ANR	693004	UnaryOperator	*		692950	0					
ANR	693005	PostIncDecOperationExpression	p ++		692950	1					
ANR	693006	Identifier	p		692950	0					
ANR	693007	IncDec	++		692950	1					
ANR	693008	AdditiveExpression	( ( plane & 0x03 ) << 6 ) + ( high >> 2 )		692950	1		+			
ANR	693009	ShiftExpression	( plane & 0x03 ) << 6		692950	0		<<			
ANR	693010	BitAndExpression	plane & 0x03		692950	0		&			
ANR	693011	Identifier	plane		692950	0					
ANR	693012	PrimaryExpression	0x03		692950	1					
ANR	693013	PrimaryExpression	6		692950	1					
ANR	693014	ShiftExpression	high >> 2		692950	1		>>			
ANR	693015	Identifier	high		692950	0					
ANR	693016	PrimaryExpression	2		692950	1					
ANR	693017	ExpressionStatement	* p ++ = ( high & 0x03 ) + 0xdc	111:4:3670:3697	692950	5	True				
ANR	693018	AssignmentExpression	* p ++ = ( high & 0x03 ) + 0xdc		692950	0		=			
ANR	693019	UnaryOperationExpression	* p ++		692950	0					
ANR	693020	UnaryOperator	*		692950	0					
ANR	693021	PostIncDecOperationExpression	p ++		692950	1					
ANR	693022	Identifier	p		692950	0					
ANR	693023	IncDec	++		692950	1					
ANR	693024	AdditiveExpression	( high & 0x03 ) + 0xdc		692950	1		+			
ANR	693025	BitAndExpression	high & 0x03		692950	0		&			
ANR	693026	Identifier	high		692950	0					
ANR	693027	PrimaryExpression	0x03		692950	1					
ANR	693028	PrimaryExpression	0xdc		692950	1					
ANR	693029	ExpressionStatement	* p = ( UChar ) ( code & 0xff )	112:4:3703:3731	692950	6	True				
ANR	693030	AssignmentExpression	* p = ( UChar ) ( code & 0xff )		692950	0		=			
ANR	693031	UnaryOperationExpression	* p		692950	0					
ANR	693032	UnaryOperator	*		692950	0					
ANR	693033	Identifier	p		692950	1					
ANR	693034	CastExpression	( UChar ) ( code & 0xff )		692950	1					
ANR	693035	CastTarget	UChar		692950	0					
ANR	693036	BitAndExpression	code & 0xff		692950	1		&			
ANR	693037	Identifier	code		692950	0					
ANR	693038	PrimaryExpression	0xff		692950	1					
ANR	693039	ReturnStatement	return 4 ;	113:4:3737:3745	692950	7	True				
ANR	693040	PrimaryExpression	4		692950	0					
ANR	693041	ElseStatement	else		692950	0					
ANR	693042	CompoundStatement		15:7:309:309	692950	0					
ANR	693043	ExpressionStatement	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )	116:4:3764:3801	692950	0	True				
ANR	693044	AssignmentExpression	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )		692950	0		=			
ANR	693045	UnaryOperationExpression	* p ++		692950	0					
ANR	693046	UnaryOperator	*		692950	0					
ANR	693047	PostIncDecOperationExpression	p ++		692950	1					
ANR	693048	Identifier	p		692950	0					
ANR	693049	IncDec	++		692950	1					
ANR	693050	CastExpression	( UChar ) ( ( code & 0xff00 ) >> 8 )		692950	1					
ANR	693051	CastTarget	UChar		692950	0					
ANR	693052	ShiftExpression	( code & 0xff00 ) >> 8		692950	1		>>			
ANR	693053	BitAndExpression	code & 0xff00		692950	0		&			
ANR	693054	Identifier	code		692950	0					
ANR	693055	PrimaryExpression	0xff00		692950	1					
ANR	693056	PrimaryExpression	8		692950	1					
ANR	693057	ExpressionStatement	* p ++ = ( UChar ) ( code & 0xff )	117:4:3807:3835	692950	1	True				
ANR	693058	AssignmentExpression	* p ++ = ( UChar ) ( code & 0xff )		692950	0		=			
ANR	693059	UnaryOperationExpression	* p ++		692950	0					
ANR	693060	UnaryOperator	*		692950	0					
ANR	693061	PostIncDecOperationExpression	p ++		692950	1					
ANR	693062	Identifier	p		692950	0					
ANR	693063	IncDec	++		692950	1					
ANR	693064	CastExpression	( UChar ) ( code & 0xff )		692950	1					
ANR	693065	CastTarget	UChar		692950	0					
ANR	693066	BitAndExpression	code & 0xff		692950	1		&			
ANR	693067	Identifier	code		692950	0					
ANR	693068	PrimaryExpression	0xff		692950	1					
ANR	693069	ReturnStatement	return 2 ;	118:4:3841:3849	692950	2	True				
ANR	693070	PrimaryExpression	2		692950	0					
ANR	693071	ReturnType	static int		692950	1					
ANR	693072	Identifier	utf16be_code_to_mbc		692950	2					
ANR	693073	ParameterList	"OnigCodePoint code , UChar * buf"		692950	3					
ANR	693074	Parameter	OnigCodePoint code	100:20:3416:3433	692950	0	True				
ANR	693075	ParameterType	OnigCodePoint		692950	0					
ANR	693076	Identifier	code		692950	1					
ANR	693077	Parameter	UChar * buf	100:40:3436:3445	692950	1	True				
ANR	693078	ParameterType	UChar *		692950	0					
ANR	693079	Identifier	buf		692950	1					
ANR	693080	CFGEntryNode	ENTRY		692950		True				
ANR	693081	CFGExitNode	EXIT		692950		True				
ANR	693082	Symbol	p		692950						
ANR	693083	Symbol	plane		692950						
ANR	693084	Symbol	buf		692950						
ANR	693085	Symbol	high		692950						
ANR	693086	Symbol	code		692950						
ANR	693087	Symbol	* p ++		692950						
ANR	693088	Symbol	* p		692950						
ANR	693089	Function	utf16be_mbc_case_fold	122:0:3858:4462							
ANR	693090	FunctionDef	"utf16be_mbc_case_fold (OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold)"		693089	0					
ANR	693091	CompoundStatement		125:0:3971:4462	693089	0					
ANR	693092	IdentifierDeclStatement	const UChar * p = * pp ;	126:2:3975:3995	693089	0	True				
ANR	693093	IdentifierDecl	* p = * pp		693089	0					
ANR	693094	IdentifierDeclType	const UChar *		693089	0					
ANR	693095	Identifier	p		693089	1					
ANR	693096	AssignmentExpression	* p = * pp		693089	2		=			
ANR	693097	Identifier	p		693089	0					
ANR	693098	UnaryOperationExpression	* pp		693089	1					
ANR	693099	UnaryOperator	*		693089	0					
ANR	693100	Identifier	pp		693089	1					
ANR	693101	IfStatement	if ( ONIGENC_IS_ASCII_CODE ( * ( p + 1 ) ) && * p == 0 )		693089	1					
ANR	693102	Condition	ONIGENC_IS_ASCII_CODE ( * ( p + 1 ) ) && * p == 0	128:6:4004:4043	693089	0	True				
ANR	693103	AndExpression	ONIGENC_IS_ASCII_CODE ( * ( p + 1 ) ) && * p == 0		693089	0		&&			
ANR	693104	CallExpression	ONIGENC_IS_ASCII_CODE ( * ( p + 1 ) )		693089	0					
ANR	693105	Callee	ONIGENC_IS_ASCII_CODE		693089	0					
ANR	693106	Identifier	ONIGENC_IS_ASCII_CODE		693089	0					
ANR	693107	ArgumentList	* ( p + 1 )		693089	1					
ANR	693108	Argument	* ( p + 1 )		693089	0					
ANR	693109	UnaryOperationExpression	* ( p + 1 )		693089	0					
ANR	693110	UnaryOperator	*		693089	0					
ANR	693111	AdditiveExpression	p + 1		693089	1		+			
ANR	693112	Identifier	p		693089	0					
ANR	693113	PrimaryExpression	1		693089	1					
ANR	693114	EqualityExpression	* p == 0		693089	1		==			
ANR	693115	UnaryOperationExpression	* p		693089	0					
ANR	693116	UnaryOperator	*		693089	0					
ANR	693117	Identifier	p		693089	1					
ANR	693118	PrimaryExpression	0		693089	1					
ANR	693119	CompoundStatement		4:48:74:74	693089	1					
ANR	693120	ExpressionStatement	p ++	129:4:4052:4055	693089	0	True				
ANR	693121	PostIncDecOperationExpression	p ++		693089	0					
ANR	693122	Identifier	p		693089	0					
ANR	693123	IncDec	++		693089	1					
ANR	693124	IfStatement	if ( ( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0 )		693089	1					
ANR	693125	Condition	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0	131:8:4108:4152	693089	0	True				
ANR	693126	EqualityExpression	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0		693089	0		!=			
ANR	693127	BitAndExpression	flag & ONIGENC_CASE_FOLD_TURKISH_AZERI		693089	0		&			
ANR	693128	Identifier	flag		693089	0					
ANR	693129	Identifier	ONIGENC_CASE_FOLD_TURKISH_AZERI		693089	1					
ANR	693130	PrimaryExpression	0		693089	1					
ANR	693131	CompoundStatement		7:55:183:183	693089	1					
ANR	693132	IfStatement	if ( * p == 0x49 )		693089	0					
ANR	693133	Condition	* p == 0x49	132:10:4167:4176	693089	0	True				
ANR	693134	EqualityExpression	* p == 0x49		693089	0		==			
ANR	693135	UnaryOperationExpression	* p		693089	0					
ANR	693136	UnaryOperator	*		693089	0					
ANR	693137	Identifier	p		693089	1					
ANR	693138	PrimaryExpression	0x49		693089	1					
ANR	693139	CompoundStatement		8:22:207:207	693089	1					
ANR	693140	ExpressionStatement	* fold ++ = 0x01	133:1:4182:4196	693089	0	True				
ANR	693141	AssignmentExpression	* fold ++ = 0x01		693089	0		=			
ANR	693142	UnaryOperationExpression	* fold ++		693089	0					
ANR	693143	UnaryOperator	*		693089	0					
ANR	693144	PostIncDecOperationExpression	fold ++		693089	1					
ANR	693145	Identifier	fold		693089	0					
ANR	693146	IncDec	++		693089	1					
ANR	693147	PrimaryExpression	0x01		693089	1					
ANR	693148	ExpressionStatement	* fold = 0x31	134:1:4199:4213	693089	1	True				
ANR	693149	AssignmentExpression	* fold = 0x31		693089	0		=			
ANR	693150	UnaryOperationExpression	* fold		693089	0					
ANR	693151	UnaryOperator	*		693089	0					
ANR	693152	Identifier	fold		693089	1					
ANR	693153	PrimaryExpression	0x31		693089	1					
ANR	693154	ExpressionStatement	( * pp ) += 2	135:1:4216:4226	693089	2	True				
ANR	693155	AssignmentExpression	( * pp ) += 2		693089	0		+=			
ANR	693156	UnaryOperationExpression	* pp		693089	0					
ANR	693157	UnaryOperator	*		693089	0					
ANR	693158	Identifier	pp		693089	1					
ANR	693159	PrimaryExpression	2		693089	1					
ANR	693160	ReturnStatement	return 2 ;	136:1:4229:4237	693089	3	True				
ANR	693161	PrimaryExpression	2		693089	0					
ANR	693162	ExpressionStatement	* fold ++ = 0	141:4:4265:4276	693089	2	True				
ANR	693163	AssignmentExpression	* fold ++ = 0		693089	0		=			
ANR	693164	UnaryOperationExpression	* fold ++		693089	0					
ANR	693165	UnaryOperator	*		693089	0					
ANR	693166	PostIncDecOperationExpression	fold ++		693089	1					
ANR	693167	Identifier	fold		693089	0					
ANR	693168	IncDec	++		693089	1					
ANR	693169	PrimaryExpression	0		693089	1					
ANR	693170	ExpressionStatement	* fold = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )	142:4:4282:4328	693089	3	True				
ANR	693171	AssignmentExpression	* fold = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )		693089	0		=			
ANR	693172	UnaryOperationExpression	* fold		693089	0					
ANR	693173	UnaryOperator	*		693089	0					
ANR	693174	Identifier	fold		693089	1					
ANR	693175	CallExpression	ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )		693089	1					
ANR	693176	Callee	ONIGENC_ASCII_CODE_TO_LOWER_CASE		693089	0					
ANR	693177	Identifier	ONIGENC_ASCII_CODE_TO_LOWER_CASE		693089	0					
ANR	693178	ArgumentList	* p		693089	1					
ANR	693179	Argument	* p		693089	0					
ANR	693180	UnaryOperationExpression	* p		693089	0					
ANR	693181	UnaryOperator	*		693089	0					
ANR	693182	Identifier	p		693089	1					
ANR	693183	ExpressionStatement	* pp += 2	143:4:4334:4342	693089	4	True				
ANR	693184	AssignmentExpression	* pp += 2		693089	0		+=			
ANR	693185	UnaryOperationExpression	* pp		693089	0					
ANR	693186	UnaryOperator	*		693089	0					
ANR	693187	Identifier	pp		693089	1					
ANR	693188	PrimaryExpression	2		693089	1					
ANR	693189	ReturnStatement	return 2 ;	144:4:4348:4356	693089	5	True				
ANR	693190	PrimaryExpression	2		693089	0					
ANR	693191	ElseStatement	else		693089	0					
ANR	693192	ReturnStatement	"return onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF16_BE , flag , pp , end , fold ) ;"	147:4:4373:4460	693089	0	True				
ANR	693193	CallExpression	"onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF16_BE , flag , pp , end , fold )"		693089	0					
ANR	693194	Callee	onigenc_unicode_mbc_case_fold		693089	0					
ANR	693195	Identifier	onigenc_unicode_mbc_case_fold		693089	0					
ANR	693196	ArgumentList	ONIG_ENCODING_UTF16_BE		693089	1					
ANR	693197	Argument	ONIG_ENCODING_UTF16_BE		693089	0					
ANR	693198	Identifier	ONIG_ENCODING_UTF16_BE		693089	0					
ANR	693199	Argument	flag		693089	1					
ANR	693200	Identifier	flag		693089	0					
ANR	693201	Argument	pp		693089	2					
ANR	693202	Identifier	pp		693089	0					
ANR	693203	Argument	end		693089	3					
ANR	693204	Identifier	end		693089	0					
ANR	693205	Argument	fold		693089	4					
ANR	693206	Identifier	fold		693089	0					
ANR	693207	ReturnType	static int		693089	1					
ANR	693208	Identifier	utf16be_mbc_case_fold		693089	2					
ANR	693209	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold"		693089	3					
ANR	693210	Parameter	OnigCaseFoldType flag	123:22:3891:3911	693089	0	True				
ANR	693211	ParameterType	OnigCaseFoldType		693089	0					
ANR	693212	Identifier	flag		693089	1					
ANR	693213	Parameter	const UChar * * pp	124:8:3922:3937	693089	1	True				
ANR	693214	ParameterType	const UChar * *		693089	0					
ANR	693215	Identifier	pp		693089	1					
ANR	693216	Parameter	const UChar * end	124:26:3940:3955	693089	2	True				
ANR	693217	ParameterType	const UChar *		693089	0					
ANR	693218	Identifier	end		693089	1					
ANR	693219	Parameter	UChar * fold	124:44:3958:3968	693089	3	True				
ANR	693220	ParameterType	UChar *		693089	0					
ANR	693221	Identifier	fold		693089	1					
ANR	693222	CFGEntryNode	ENTRY		693089		True				
ANR	693223	CFGExitNode	EXIT		693089		True				
ANR	693224	Symbol	pp		693089						
ANR	693225	Symbol	ONIGENC_IS_ASCII_CODE		693089						
ANR	693226	Symbol	flag		693089						
ANR	693227	Symbol	* pp		693089						
ANR	693228	Symbol	* fold		693089						
ANR	693229	Symbol	* ( p + 1 )		693089						
ANR	693230	Symbol	* fold ++		693089						
ANR	693231	Symbol	p		693089						
ANR	693232	Symbol	fold		693089						
ANR	693233	Symbol	ONIGENC_ASCII_CODE_TO_LOWER_CASE		693089						
ANR	693234	Symbol	ONIGENC_CASE_FOLD_TURKISH_AZERI		693089						
ANR	693235	Symbol	ONIG_ENCODING_UTF16_BE		693089						
ANR	693236	Symbol	end		693089						
ANR	693237	Symbol	* p		693089						
ANR	693238	Symbol	onigenc_unicode_mbc_case_fold		693089						
ANR	693239	Function	utf16be_is_mbc_ambiguous	152:0:4471:5117							
ANR	693240	FunctionDef	"utf16be_is_mbc_ambiguous (OnigCaseFoldType flag , const UChar * * pp , const UChar * end)"		693239	0					
ANR	693241	CompoundStatement		154:0:4566:5117	693239	0					
ANR	693242	IdentifierDeclStatement	const UChar * p = * pp ;	155:2:4570:4590	693239	0	True				
ANR	693243	IdentifierDecl	* p = * pp		693239	0					
ANR	693244	IdentifierDeclType	const UChar *		693239	0					
ANR	693245	Identifier	p		693239	1					
ANR	693246	AssignmentExpression	* p = * pp		693239	2		=			
ANR	693247	Identifier	p		693239	0					
ANR	693248	UnaryOperationExpression	* pp		693239	1					
ANR	693249	UnaryOperator	*		693239	0					
ANR	693250	Identifier	pp		693239	1					
ANR	693251	ExpressionStatement	( * pp ) += EncLen_UTF16 [ * p ]	157:2:4595:4620	693239	1	True				
ANR	693252	AssignmentExpression	( * pp ) += EncLen_UTF16 [ * p ]		693239	0		+=			
ANR	693253	UnaryOperationExpression	* pp		693239	0					
ANR	693254	UnaryOperator	*		693239	0					
ANR	693255	Identifier	pp		693239	1					
ANR	693256	ArrayIndexing	EncLen_UTF16 [ * p ]		693239	1					
ANR	693257	Identifier	EncLen_UTF16		693239	0					
ANR	693258	UnaryOperationExpression	* p		693239	1					
ANR	693259	UnaryOperator	*		693239	0					
ANR	693260	Identifier	p		693239	1					
ANR	693261	IfStatement	if ( * p == 0 )		693239	2					
ANR	693262	Condition	* p == 0	159:6:4629:4635	693239	0	True				
ANR	693263	EqualityExpression	* p == 0		693239	0		==			
ANR	693264	UnaryOperationExpression	* p		693239	0					
ANR	693265	UnaryOperator	*		693239	0					
ANR	693266	Identifier	p		693239	1					
ANR	693267	PrimaryExpression	0		693239	1					
ANR	693268	CompoundStatement		7:4:77:85	693239	1					
ANR	693269	IdentifierDeclStatement	"int c , v ;"	160:4:4644:4652	693239	0	True				
ANR	693270	IdentifierDecl	c		693239	0					
ANR	693271	IdentifierDeclType	int		693239	0					
ANR	693272	Identifier	c		693239	1					
ANR	693273	IdentifierDecl	v		693239	1					
ANR	693274	IdentifierDeclType	int		693239	0					
ANR	693275	Identifier	v		693239	1					
ANR	693276	ExpressionStatement	p ++	162:4:4659:4662	693239	1	True				
ANR	693277	PostIncDecOperationExpression	p ++		693239	0					
ANR	693278	Identifier	p		693239	0					
ANR	693279	IncDec	++		693239	1					
ANR	693280	IfStatement	if ( * p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0 )		693239	2					
ANR	693281	Condition	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0	163:8:4672:4736	693239	0	True				
ANR	693282	AndExpression	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		693239	0		&&			
ANR	693283	EqualityExpression	* p == 0xdf		693239	0		==			
ANR	693284	UnaryOperationExpression	* p		693239	0					
ANR	693285	UnaryOperator	*		693239	0					
ANR	693286	Identifier	p		693239	1					
ANR	693287	PrimaryExpression	0xdf		693239	1					
ANR	693288	EqualityExpression	( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		693239	1		!=			
ANR	693289	BitAndExpression	flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		693239	0		&			
ANR	693290	Identifier	flag		693239	0					
ANR	693291	Identifier	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		693239	1					
ANR	693292	PrimaryExpression	0		693239	1					
ANR	693293	CompoundStatement		10:75:172:172	693239	1					
ANR	693294	ReturnStatement	return TRUE ;	164:6:4747:4758	693239	0	True				
ANR	693295	Identifier	TRUE		693239	0					
ANR	693296	ExpressionStatement	c = * p	167:4:4771:4777	693239	3	True				
ANR	693297	AssignmentExpression	c = * p		693239	0		=			
ANR	693298	Identifier	c		693239	0					
ANR	693299	UnaryOperationExpression	* p		693239	1					
ANR	693300	UnaryOperator	*		693239	0					
ANR	693301	Identifier	p		693239	1					
ANR	693302	ExpressionStatement	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"	168:4:4783:4868	693239	4	True				
ANR	693303	AssignmentExpression	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		693239	0		=			
ANR	693304	Identifier	v		693239	0					
ANR	693305	CallExpression	"ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		693239	1					
ANR	693306	Callee	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		693239	0					
ANR	693307	Identifier	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		693239	0					
ANR	693308	ArgumentList	c		693239	1					
ANR	693309	Argument	c		693239	0					
ANR	693310	Identifier	c		693239	0					
ANR	693311	Argument	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		693239	1					
ANR	693312	InclusiveOrExpression	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		693239	0		|			
ANR	693313	Identifier	BIT_CTYPE_UPPER		693239	0					
ANR	693314	Identifier	BIT_CTYPE_LOWER		693239	1					
ANR	693315	IfStatement	if ( ( v | BIT_CTYPE_LOWER ) != 0 )		693239	5					
ANR	693316	Condition	( v | BIT_CTYPE_LOWER ) != 0	171:8:4879:4904	693239	0	True				
ANR	693317	EqualityExpression	( v | BIT_CTYPE_LOWER ) != 0		693239	0		!=			
ANR	693318	InclusiveOrExpression	v | BIT_CTYPE_LOWER		693239	0		|			
ANR	693319	Identifier	v		693239	0					
ANR	693320	Identifier	BIT_CTYPE_LOWER		693239	1					
ANR	693321	PrimaryExpression	0		693239	1					
ANR	693322	CompoundStatement		18:36:340:340	693239	1					
ANR	693323	IfStatement	if ( c >= 0xaa && c <= 0xba )		693239	0					
ANR	693324	Condition	c >= 0xaa && c <= 0xba	173:10:4990:5011	693239	0	True				
ANR	693325	AndExpression	c >= 0xaa && c <= 0xba		693239	0		&&			
ANR	693326	RelationalExpression	c >= 0xaa		693239	0		>=			
ANR	693327	Identifier	c		693239	0					
ANR	693328	PrimaryExpression	0xaa		693239	1					
ANR	693329	RelationalExpression	c <= 0xba		693239	1		<=			
ANR	693330	Identifier	c		693239	0					
ANR	693331	PrimaryExpression	0xba		693239	1					
ANR	693332	ReturnStatement	return FALSE ;	174:1:5015:5027	693239	1	True				
ANR	693333	Identifier	FALSE		693239	0					
ANR	693334	ElseStatement	else		693239	0					
ANR	693335	ReturnStatement	return TRUE ;	176:1:5041:5052	693239	0	True				
ANR	693336	Identifier	TRUE		693239	0					
ANR	693337	ReturnStatement	return ( v != 0 ? TRUE : FALSE ) ;	178:4:5064:5094	693239	6	True				
ANR	693338	ConditionalExpression	v != 0 ? TRUE : FALSE		693239	0					
ANR	693339	Condition	v != 0		693239	0					
ANR	693340	EqualityExpression	v != 0		693239	0		!=			
ANR	693341	Identifier	v		693239	0					
ANR	693342	PrimaryExpression	0		693239	1					
ANR	693343	Identifier	TRUE		693239	1					
ANR	693344	Identifier	FALSE		693239	2					
ANR	693345	ReturnStatement	return FALSE ;	181:2:5103:5115	693239	3	True				
ANR	693346	Identifier	FALSE		693239	0					
ANR	693347	ReturnType	static int		693239	1					
ANR	693348	Identifier	utf16be_is_mbc_ambiguous		693239	2					
ANR	693349	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end"		693239	3					
ANR	693350	Parameter	OnigCaseFoldType flag	153:25:4507:4527	693239	0	True				
ANR	693351	ParameterType	OnigCaseFoldType		693239	0					
ANR	693352	Identifier	flag		693239	1					
ANR	693353	Parameter	const UChar * * pp	153:48:4530:4545	693239	1	True				
ANR	693354	ParameterType	const UChar * *		693239	0					
ANR	693355	Identifier	pp		693239	1					
ANR	693356	Parameter	const UChar * end	153:66:4548:4563	693239	2	True				
ANR	693357	ParameterType	const UChar *		693239	0					
ANR	693358	Identifier	end		693239	1					
ANR	693359	CFGEntryNode	ENTRY		693239		True				
ANR	693360	CFGExitNode	EXIT		693239		True				
ANR	693361	Symbol	pp		693239						
ANR	693362	Symbol	flag		693239						
ANR	693363	Symbol	c		693239						
ANR	693364	Symbol	* pp		693239						
ANR	693365	Symbol	* EncLen_UTF16		693239						
ANR	693366	Symbol	TRUE		693239						
ANR	693367	Symbol	p		693239						
ANR	693368	Symbol	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		693239						
ANR	693369	Symbol	v		693239						
ANR	693370	Symbol	BIT_CTYPE_LOWER		693239						
ANR	693371	Symbol	end		693239						
ANR	693372	Symbol	* p		693239						
ANR	693373	Symbol	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		693239						
ANR	693374	Symbol	BIT_CTYPE_UPPER		693239						
ANR	693375	Symbol	FALSE		693239						
ANR	693376	Symbol	EncLen_UTF16		693239						
ANR	693377	Symbol	* * p		693239						
ANR	693378	Function	utf16be_left_adjust_char_head	185:0:5127:5379							
ANR	693379	FunctionDef	"utf16be_left_adjust_char_head (const UChar * start , const UChar * s)"		693378	0					
ANR	693380	CompoundStatement		187:0:5207:5379	693378	0					
ANR	693381	IfStatement	if ( s <= start )		693378	0					
ANR	693382	Condition	s <= start	188:6:5215:5224	693378	0	True				
ANR	693383	RelationalExpression	s <= start		693378	0		<=			
ANR	693384	Identifier	s		693378	0					
ANR	693385	Identifier	start		693378	1					
ANR	693386	ReturnStatement	return ( UChar * ) s ;	188:18:5227:5244	693378	1	True				
ANR	693387	CastExpression	( UChar * ) s		693378	0					
ANR	693388	CastTarget	UChar *		693378	0					
ANR	693389	Identifier	s		693378	1					
ANR	693390	IfStatement	if ( ( s - start ) % 2 == 1 )		693378	1					
ANR	693391	Condition	( s - start ) % 2 == 1	190:6:5253:5272	693378	0	True				
ANR	693392	EqualityExpression	( s - start ) % 2 == 1		693378	0		==			
ANR	693393	MultiplicativeExpression	( s - start ) % 2		693378	0		%			
ANR	693394	AdditiveExpression	s - start		693378	0		-			
ANR	693395	Identifier	s		693378	0					
ANR	693396	Identifier	start		693378	1					
ANR	693397	PrimaryExpression	2		693378	1					
ANR	693398	PrimaryExpression	1		693378	1					
ANR	693399	CompoundStatement		4:28:67:67	693378	1					
ANR	693400	ExpressionStatement	s --	191:4:5281:5284	693378	0	True				
ANR	693401	PostIncDecOperationExpression	s --		693378	0					
ANR	693402	Identifier	s		693378	0					
ANR	693403	IncDec	--		693378	1					
ANR	693404	IfStatement	if ( UTF16_IS_SURROGATE_SECOND ( * s ) && s > start + 1 )		693378	2					
ANR	693405	Condition	UTF16_IS_SURROGATE_SECOND ( * s ) && s > start + 1	194:6:5297:5342	693378	0	True				
ANR	693406	AndExpression	UTF16_IS_SURROGATE_SECOND ( * s ) && s > start + 1		693378	0		&&			
ANR	693407	CallExpression	UTF16_IS_SURROGATE_SECOND ( * s )		693378	0					
ANR	693408	Callee	UTF16_IS_SURROGATE_SECOND		693378	0					
ANR	693409	Identifier	UTF16_IS_SURROGATE_SECOND		693378	0					
ANR	693410	ArgumentList	* s		693378	1					
ANR	693411	Argument	* s		693378	0					
ANR	693412	UnaryOperationExpression	* s		693378	0					
ANR	693413	UnaryOperator	*		693378	0					
ANR	693414	Identifier	s		693378	1					
ANR	693415	RelationalExpression	s > start + 1		693378	1		>			
ANR	693416	Identifier	s		693378	0					
ANR	693417	AdditiveExpression	start + 1		693378	1		+			
ANR	693418	Identifier	start		693378	0					
ANR	693419	PrimaryExpression	1		693378	1					
ANR	693420	ExpressionStatement	s -= 2	195:4:5349:5355	693378	1	True				
ANR	693421	AssignmentExpression	s -= 2		693378	0		-=			
ANR	693422	Identifier	s		693378	0					
ANR	693423	PrimaryExpression	2		693378	1					
ANR	693424	ReturnStatement	return ( UChar * ) s ;	197:2:5360:5377	693378	3	True				
ANR	693425	CastExpression	( UChar * ) s		693378	0					
ANR	693426	CastTarget	UChar *		693378	0					
ANR	693427	Identifier	s		693378	1					
ANR	693428	ReturnType	static UChar *		693378	1					
ANR	693429	Identifier	utf16be_left_adjust_char_head		693378	2					
ANR	693430	ParameterList	"const UChar * start , const UChar * s"		693378	3					
ANR	693431	Parameter	const UChar * start	186:30:5171:5188	693378	0	True				
ANR	693432	ParameterType	const UChar *		693378	0					
ANR	693433	Identifier	start		693378	1					
ANR	693434	Parameter	const UChar * s	186:50:5191:5204	693378	1	True				
ANR	693435	ParameterType	const UChar *		693378	0					
ANR	693436	Identifier	s		693378	1					
ANR	693437	CFGEntryNode	ENTRY		693378		True				
ANR	693438	CFGExitNode	EXIT		693378		True				
ANR	693439	Symbol	s		693378						
ANR	693440	Symbol	start		693378						
ANR	693441	Symbol	* s		693378						
ANR	693442	Symbol	UTF16_IS_SURROGATE_SECOND		693378						
ANR	693443	Function	utf16be_get_case_fold_codes_by_str	200:0:5382:5637							
ANR	693444	FunctionDef	"utf16be_get_case_fold_codes_by_str (OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ])"		693443	0					
ANR	693445	CompoundStatement		203:0:5527:5637	693443	0					
ANR	693446	ReturnStatement	"return onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF16_BE , flag , p , end , items ) ;"	204:2:5531:5635	693443	0	True				
ANR	693447	CallExpression	"onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF16_BE , flag , p , end , items )"		693443	0					
ANR	693448	Callee	onigenc_unicode_get_case_fold_codes_by_str		693443	0					
ANR	693449	Identifier	onigenc_unicode_get_case_fold_codes_by_str		693443	0					
ANR	693450	ArgumentList	ONIG_ENCODING_UTF16_BE		693443	1					
ANR	693451	Argument	ONIG_ENCODING_UTF16_BE		693443	0					
ANR	693452	Identifier	ONIG_ENCODING_UTF16_BE		693443	0					
ANR	693453	Argument	flag		693443	1					
ANR	693454	Identifier	flag		693443	0					
ANR	693455	Argument	p		693443	2					
ANR	693456	Identifier	p		693443	0					
ANR	693457	Argument	end		693443	3					
ANR	693458	Identifier	end		693443	0					
ANR	693459	Argument	items		693443	4					
ANR	693460	Identifier	items		693443	0					
ANR	693461	ReturnType	static int		693443	1					
ANR	693462	Identifier	utf16be_get_case_fold_codes_by_str		693443	2					
ANR	693463	ParameterList	"OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ]"		693443	3					
ANR	693464	Parameter	OnigCaseFoldType flag	201:35:5428:5448	693443	0	True				
ANR	693465	ParameterType	OnigCaseFoldType		693443	0					
ANR	693466	Identifier	flag		693443	1					
ANR	693467	Parameter	const OnigUChar * p	202:4:5455:5472	693443	1	True				
ANR	693468	ParameterType	const OnigUChar *		693443	0					
ANR	693469	Identifier	p		693443	1					
ANR	693470	Parameter	const OnigUChar * end	202:24:5475:5494	693443	2	True				
ANR	693471	ParameterType	const OnigUChar *		693443	0					
ANR	693472	Identifier	end		693443	1					
ANR	693473	Parameter	OnigCaseFoldCodeItem items [ ]	202:46:5497:5524	693443	3	True				
ANR	693474	ParameterType	OnigCaseFoldCodeItem [ ]		693443	0					
ANR	693475	Identifier	items		693443	1					
ANR	693476	CFGEntryNode	ENTRY		693443		True				
ANR	693477	CFGExitNode	EXIT		693443		True				
ANR	693478	Symbol	p		693443						
ANR	693479	Symbol	flag		693443						
ANR	693480	Symbol	onigenc_unicode_get_case_fold_codes_by_str		693443						
ANR	693481	Symbol	ONIG_ENCODING_UTF16_BE		693443						
ANR	693482	Symbol	end		693443						
ANR	693483	Symbol	items		693443						
ANR	693484	DeclStmt									
ANR	693485	Decl							OnigEncodingType	OnigEncodingType	OnigEncodingUTF16_BE
