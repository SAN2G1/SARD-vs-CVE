command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	866190	File	data/converged/CVE-2017-11142_php-src/ext_opcache_Optimizer_optimize_temp_vars_5.c								
ANR	866191	DeclStmt									
ANR	866192	Decl							const char	const char [ 256 ]	op_const_means_class
ANR	866193	Function	optimize_temporary_variables	73:0:1803:5991							
ANR	866194	FunctionDef	optimize_temporary_variables (zend_op_array * op_array)		866193	0					
ANR	866195	CompoundStatement		74:0:1869:5991	866193	0					
ANR	866196	IdentifierDeclStatement	int T = op_array -> T ;	75:1:1872:1891	866193	0	True				
ANR	866197	IdentifierDecl	T = op_array -> T		866193	0					
ANR	866198	IdentifierDeclType	int		866193	0					
ANR	866199	Identifier	T		866193	1					
ANR	866200	AssignmentExpression	T = op_array -> T		866193	2		=			
ANR	866201	Identifier	T		866193	0					
ANR	866202	PtrMemberAccess	op_array -> T		866193	1					
ANR	866203	Identifier	op_array		866193	0					
ANR	866204	Identifier	T		866193	1					
ANR	866205	IdentifierDeclStatement	char * taken_T ;	76:1:1894:1907	866193	1	True				
ANR	866206	IdentifierDecl	* taken_T		866193	0					
ANR	866207	IdentifierDeclType	char *		866193	0					
ANR	866208	Identifier	taken_T		866193	1					
ANR	866209	IdentifierDeclStatement	zend_op * * start_of_T ;	77:1:1933:1953	866193	2	True				
ANR	866210	IdentifierDecl	* * start_of_T		866193	0					
ANR	866211	IdentifierDeclType	zend_op * *		866193	0					
ANR	866212	Identifier	start_of_T		866193	1					
ANR	866213	IdentifierDeclStatement	char * valid_T ;	78:1:1991:2004	866193	3	True				
ANR	866214	IdentifierDecl	* valid_T		866193	0					
ANR	866215	IdentifierDeclType	char *		866193	0					
ANR	866216	Identifier	valid_T		866193	1					
ANR	866217	IdentifierDeclStatement	int * map_T ;	79:1:2034:2044	866193	4	True				
ANR	866218	IdentifierDecl	* map_T		866193	0					
ANR	866219	IdentifierDeclType	int *		866193	0					
ANR	866220	Identifier	map_T		866193	1					
ANR	866221	IdentifierDeclStatement	"zend_op * opline , * end ;"	80:1:2085:2106	866193	5	True				
ANR	866222	IdentifierDecl	* opline		866193	0					
ANR	866223	IdentifierDeclType	zend_op *		866193	0					
ANR	866224	Identifier	opline		866193	1					
ANR	866225	IdentifierDecl	* end		866193	1					
ANR	866226	IdentifierDeclType	zend_op *		866193	0					
ANR	866227	Identifier	end		866193	1					
ANR	866228	IdentifierDeclStatement	int currT ;	81:1:2109:2118	866193	6	True				
ANR	866229	IdentifierDecl	currT		866193	0					
ANR	866230	IdentifierDeclType	int		866193	0					
ANR	866231	Identifier	currT		866193	1					
ANR	866232	IdentifierDeclStatement	int i ;	82:1:2121:2126	866193	7	True				
ANR	866233	IdentifierDecl	i		866193	0					
ANR	866234	IdentifierDeclType	int		866193	0					
ANR	866235	Identifier	i		866193	1					
ANR	866236	IdentifierDeclStatement	int max = - 1 ;	83:1:2129:2141	866193	8	True				
ANR	866237	IdentifierDecl	max = - 1		866193	0					
ANR	866238	IdentifierDeclType	int		866193	0					
ANR	866239	Identifier	max		866193	1					
ANR	866240	AssignmentExpression	max = - 1		866193	2		=			
ANR	866241	Identifier	max		866193	0					
ANR	866242	UnaryOperationExpression	- 1		866193	1					
ANR	866243	UnaryOperator	-		866193	0					
ANR	866244	PrimaryExpression	1		866193	1					
ANR	866245	IdentifierDeclStatement	int var_to_free = - 1 ;	84:1:2144:2164	866193	9	True				
ANR	866246	IdentifierDecl	var_to_free = - 1		866193	0					
ANR	866247	IdentifierDeclType	int		866193	0					
ANR	866248	Identifier	var_to_free		866193	1					
ANR	866249	AssignmentExpression	var_to_free = - 1		866193	2		=			
ANR	866250	Identifier	var_to_free		866193	0					
ANR	866251	UnaryOperationExpression	- 1		866193	1					
ANR	866252	UnaryOperator	-		866193	0					
ANR	866253	PrimaryExpression	1		866193	1					
ANR	866254	ExpressionStatement	taken_T = ( char * ) emalloc ( T )	86:1:2168:2197	866193	10	True				
ANR	866255	AssignmentExpression	taken_T = ( char * ) emalloc ( T )		866193	0		=			
ANR	866256	Identifier	taken_T		866193	0					
ANR	866257	CastExpression	( char * ) emalloc ( T )		866193	1					
ANR	866258	CastTarget	char *		866193	0					
ANR	866259	CallExpression	emalloc ( T )		866193	1					
ANR	866260	Callee	emalloc		866193	0					
ANR	866261	Identifier	emalloc		866193	0					
ANR	866262	ArgumentList	T		866193	1					
ANR	866263	Argument	T		866193	0					
ANR	866264	Identifier	T		866193	0					
ANR	866265	ExpressionStatement	start_of_T = ( zend_op * * ) emalloc ( T * sizeof ( zend_op * ) )	87:1:2200:2256	866193	11	True				
ANR	866266	AssignmentExpression	start_of_T = ( zend_op * * ) emalloc ( T * sizeof ( zend_op * ) )		866193	0		=			
ANR	866267	Identifier	start_of_T		866193	0					
ANR	866268	CastExpression	( zend_op * * ) emalloc ( T * sizeof ( zend_op * ) )		866193	1					
ANR	866269	CastTarget	zend_op * *		866193	0					
ANR	866270	CallExpression	emalloc ( T * sizeof ( zend_op * ) )		866193	1					
ANR	866271	Callee	emalloc		866193	0					
ANR	866272	Identifier	emalloc		866193	0					
ANR	866273	ArgumentList	T * sizeof ( zend_op * )		866193	1					
ANR	866274	Argument	T * sizeof ( zend_op * )		866193	0					
ANR	866275	MultiplicativeExpression	T * sizeof ( zend_op * )		866193	0		*			
ANR	866276	Identifier	T		866193	0					
ANR	866277	SizeofExpression	sizeof ( zend_op * )		866193	1					
ANR	866278	Sizeof	sizeof		866193	0					
ANR	866279	SizeofOperand	zend_op *		866193	1					
ANR	866280	ExpressionStatement	valid_T = ( char * ) emalloc ( T )	88:1:2259:2288	866193	12	True				
ANR	866281	AssignmentExpression	valid_T = ( char * ) emalloc ( T )		866193	0		=			
ANR	866282	Identifier	valid_T		866193	0					
ANR	866283	CastExpression	( char * ) emalloc ( T )		866193	1					
ANR	866284	CastTarget	char *		866193	0					
ANR	866285	CallExpression	emalloc ( T )		866193	1					
ANR	866286	Callee	emalloc		866193	0					
ANR	866287	Identifier	emalloc		866193	0					
ANR	866288	ArgumentList	T		866193	1					
ANR	866289	Argument	T		866193	0					
ANR	866290	Identifier	T		866193	0					
ANR	866291	ExpressionStatement	map_T = ( int * ) emalloc ( T * sizeof ( int ) )	89:1:2291:2331	866193	13	True				
ANR	866292	AssignmentExpression	map_T = ( int * ) emalloc ( T * sizeof ( int ) )		866193	0		=			
ANR	866293	Identifier	map_T		866193	0					
ANR	866294	CastExpression	( int * ) emalloc ( T * sizeof ( int ) )		866193	1					
ANR	866295	CastTarget	int *		866193	0					
ANR	866296	CallExpression	emalloc ( T * sizeof ( int ) )		866193	1					
ANR	866297	Callee	emalloc		866193	0					
ANR	866298	Identifier	emalloc		866193	0					
ANR	866299	ArgumentList	T * sizeof ( int )		866193	1					
ANR	866300	Argument	T * sizeof ( int )		866193	0					
ANR	866301	MultiplicativeExpression	T * sizeof ( int )		866193	0		*			
ANR	866302	Identifier	T		866193	0					
ANR	866303	SizeofExpression	sizeof ( int )		866193	1					
ANR	866304	Sizeof	sizeof		866193	0					
ANR	866305	SizeofOperand	int		866193	1					
ANR	866306	ExpressionStatement	end = op_array -> opcodes	91:4:2338:2361	866193	14	True				
ANR	866307	AssignmentExpression	end = op_array -> opcodes		866193	0		=			
ANR	866308	Identifier	end		866193	0					
ANR	866309	PtrMemberAccess	op_array -> opcodes		866193	1					
ANR	866310	Identifier	op_array		866193	0					
ANR	866311	Identifier	opcodes		866193	1					
ANR	866312	ExpressionStatement	opline = & op_array -> opcodes [ op_array -> last - 1 ]	92:4:2367:2414	866193	15	True				
ANR	866313	AssignmentExpression	opline = & op_array -> opcodes [ op_array -> last - 1 ]		866193	0		=			
ANR	866314	Identifier	opline		866193	0					
ANR	866315	UnaryOperationExpression	& op_array -> opcodes [ op_array -> last - 1 ]		866193	1					
ANR	866316	UnaryOperator	&		866193	0					
ANR	866317	ArrayIndexing	op_array -> opcodes [ op_array -> last - 1 ]		866193	1					
ANR	866318	PtrMemberAccess	op_array -> opcodes		866193	0					
ANR	866319	Identifier	op_array		866193	0					
ANR	866320	Identifier	opcodes		866193	1					
ANR	866321	AdditiveExpression	op_array -> last - 1		866193	1		-			
ANR	866322	PtrMemberAccess	op_array -> last		866193	0					
ANR	866323	Identifier	op_array		866193	0					
ANR	866324	Identifier	last		866193	1					
ANR	866325	PrimaryExpression	1		866193	1					
ANR	866326	WhileStatement	while ( opline >= end )		866193	16					
ANR	866327	Condition	opline >= end	95:11:2463:2475	866193	0	True				
ANR	866328	RelationalExpression	opline >= end		866193	0		>=			
ANR	866329	Identifier	opline		866193	0					
ANR	866330	Identifier	end		866193	1					
ANR	866331	CompoundStatement		22:26:608:608	866193	1					
ANR	866332	IfStatement	if ( ZEND_RESULT_TYPE ( opline ) & ( IS_VAR | IS_TMP_VAR | IS_CONST ) )		866193	0					
ANR	866333	Condition	ZEND_RESULT_TYPE ( opline ) & ( IS_VAR | IS_TMP_VAR | IS_CONST )	97:12:2537:2595	866193	0	True				
ANR	866334	BitAndExpression	ZEND_RESULT_TYPE ( opline ) & ( IS_VAR | IS_TMP_VAR | IS_CONST )		866193	0		&			
ANR	866335	CallExpression	ZEND_RESULT_TYPE ( opline )		866193	0					
ANR	866336	Callee	ZEND_RESULT_TYPE		866193	0					
ANR	866337	Identifier	ZEND_RESULT_TYPE		866193	0					
ANR	866338	ArgumentList	opline		866193	1					
ANR	866339	Argument	opline		866193	0					
ANR	866340	Identifier	opline		866193	0					
ANR	866341	InclusiveOrExpression	IS_VAR | IS_TMP_VAR | IS_CONST		866193	1		|			
ANR	866342	Identifier	IS_VAR		866193	0					
ANR	866343	InclusiveOrExpression	IS_TMP_VAR | IS_CONST		866193	1		|			
ANR	866344	Identifier	IS_TMP_VAR		866193	0					
ANR	866345	Identifier	IS_CONST		866193	1					
ANR	866346	CompoundStatement		24:73:728:728	866193	1					
ANR	866347	IfStatement	if ( ! ( op_const_means_class [ opline -> opcode ] & RESULT_IS_UNUSED ) )		866193	0					
ANR	866348	Condition	! ( op_const_means_class [ opline -> opcode ] & RESULT_IS_UNUSED )	98:7:2607:2664	866193	0	True				
ANR	866349	UnaryOperationExpression	! ( op_const_means_class [ opline -> opcode ] & RESULT_IS_UNUSED )		866193	0					
ANR	866350	UnaryOperator	!		866193	0					
ANR	866351	BitAndExpression	op_const_means_class [ opline -> opcode ] & RESULT_IS_UNUSED		866193	1		&			
ANR	866352	ArrayIndexing	op_const_means_class [ opline -> opcode ]		866193	0					
ANR	866353	Identifier	op_const_means_class		866193	0					
ANR	866354	PtrMemberAccess	opline -> opcode		866193	1					
ANR	866355	Identifier	opline		866193	0					
ANR	866356	Identifier	opcode		866193	1					
ANR	866357	Identifier	RESULT_IS_UNUSED		866193	1					
ANR	866358	CompoundStatement		25:67:797:797	866193	1					
ANR	866359	ExpressionStatement	start_of_T [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = opline	99:4:2673:2726	866193	0	True				
ANR	866360	AssignmentExpression	start_of_T [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = opline		866193	0		=			
ANR	866361	ArrayIndexing	start_of_T [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ]		866193	0					
ANR	866362	Identifier	start_of_T		866193	0					
ANR	866363	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		866193	1					
ANR	866364	Callee	VAR_NUM		866193	0					
ANR	866365	Identifier	VAR_NUM		866193	0					
ANR	866366	ArgumentList	ZEND_RESULT ( opline ) . var		866193	1					
ANR	866367	Argument	ZEND_RESULT ( opline ) . var		866193	0					
ANR	866368	MemberAccess	ZEND_RESULT ( opline ) . var		866193	0					
ANR	866369	CallExpression	ZEND_RESULT ( opline )		866193	0					
ANR	866370	Callee	ZEND_RESULT		866193	0					
ANR	866371	Identifier	ZEND_RESULT		866193	0					
ANR	866372	ArgumentList	opline		866193	1					
ANR	866373	Argument	opline		866193	0					
ANR	866374	Identifier	opline		866193	0					
ANR	866375	Identifier	var		866193	1					
ANR	866376	Identifier	opline		866193	1					
ANR	866377	ExpressionStatement	opline --	107:2:2878:2886	866193	1	True				
ANR	866378	PostIncDecOperationExpression	opline --		866193	0					
ANR	866379	Identifier	opline		866193	0					
ANR	866380	IncDec	--		866193	1					
ANR	866381	ExpressionStatement	"memset ( valid_T , 0 , T )"	110:1:2893:2914	866193	17	True				
ANR	866382	CallExpression	"memset ( valid_T , 0 , T )"		866193	0					
ANR	866383	Callee	memset		866193	0					
ANR	866384	Identifier	memset		866193	0					
ANR	866385	ArgumentList	valid_T		866193	1					
ANR	866386	Argument	valid_T		866193	0					
ANR	866387	Identifier	valid_T		866193	0					
ANR	866388	Argument	0		866193	1					
ANR	866389	PrimaryExpression	0		866193	0					
ANR	866390	Argument	T		866193	2					
ANR	866391	Identifier	T		866193	0					
ANR	866392	ExpressionStatement	"memset ( taken_T , 0 , T )"	111:1:2917:2938	866193	18	True				
ANR	866393	CallExpression	"memset ( taken_T , 0 , T )"		866193	0					
ANR	866394	Callee	memset		866193	0					
ANR	866395	Identifier	memset		866193	0					
ANR	866396	ArgumentList	taken_T		866193	1					
ANR	866397	Argument	taken_T		866193	0					
ANR	866398	Identifier	taken_T		866193	0					
ANR	866399	Argument	0		866193	1					
ANR	866400	PrimaryExpression	0		866193	0					
ANR	866401	Argument	T		866193	2					
ANR	866402	Identifier	T		866193	0					
ANR	866403	ExpressionStatement	end = op_array -> opcodes	113:4:2945:2968	866193	19	True				
ANR	866404	AssignmentExpression	end = op_array -> opcodes		866193	0		=			
ANR	866405	Identifier	end		866193	0					
ANR	866406	PtrMemberAccess	op_array -> opcodes		866193	1					
ANR	866407	Identifier	op_array		866193	0					
ANR	866408	Identifier	opcodes		866193	1					
ANR	866409	ExpressionStatement	opline = & op_array -> opcodes [ op_array -> last - 1 ]	114:4:2974:3021	866193	20	True				
ANR	866410	AssignmentExpression	opline = & op_array -> opcodes [ op_array -> last - 1 ]		866193	0		=			
ANR	866411	Identifier	opline		866193	0					
ANR	866412	UnaryOperationExpression	& op_array -> opcodes [ op_array -> last - 1 ]		866193	1					
ANR	866413	UnaryOperator	&		866193	0					
ANR	866414	ArrayIndexing	op_array -> opcodes [ op_array -> last - 1 ]		866193	1					
ANR	866415	PtrMemberAccess	op_array -> opcodes		866193	0					
ANR	866416	Identifier	op_array		866193	0					
ANR	866417	Identifier	opcodes		866193	1					
ANR	866418	AdditiveExpression	op_array -> last - 1		866193	1		-			
ANR	866419	PtrMemberAccess	op_array -> last		866193	0					
ANR	866420	Identifier	op_array		866193	0					
ANR	866421	Identifier	last		866193	1					
ANR	866422	PrimaryExpression	1		866193	1					
ANR	866423	WhileStatement	while ( opline >= end )		866193	21					
ANR	866424	Condition	opline >= end	116:11:3035:3047	866193	0	True				
ANR	866425	RelationalExpression	opline >= end		866193	0		>=			
ANR	866426	Identifier	opline		866193	0					
ANR	866427	Identifier	end		866193	1					
ANR	866428	CompoundStatement		43:26:1180:1180	866193	1					
ANR	866429	Statement	if	117:2:3054:3055	866193	0	True				
ANR	866430	Statement	(	117:5:3057:3057	866193	1	True				
ANR	866431	Statement	(	117:6:3058:3058	866193	2	True				
ANR	866432	Statement	ZEND_OP1_TYPE	117:7:3059:3071	866193	3	True				
ANR	866433	Statement	(	117:20:3072:3072	866193	4	True				
ANR	866434	Statement	opline	117:21:3073:3078	866193	5	True				
ANR	866435	Statement	)	117:27:3079:3079	866193	6	True				
ANR	866436	Statement	&	117:29:3081:3081	866193	7	True				
ANR	866437	Statement	(	117:31:3083:3083	866193	8	True				
ANR	866438	Statement	IS_VAR	117:32:3084:3089	866193	9	True				
ANR	866439	Statement	|	117:39:3091:3091	866193	10	True				
ANR	866440	Statement	IS_TMP_VAR	117:41:3093:3102	866193	11	True				
ANR	866441	Statement	)	117:51:3103:3103	866193	12	True				
ANR	866442	Statement	)	117:52:3104:3104	866193	13	True				
ANR	866443	Statement	||	119:3:3154:3155	866193	14	True				
ANR	866444	Statement	(	119:6:3157:3157	866193	15	True				
ANR	866445	Statement	(	119:7:3158:3158	866193	16	True				
ANR	866446	Statement	op_const_means_class	119:8:3159:3178	866193	17	True				
ANR	866447	Statement	[	119:28:3179:3179	866193	18	True				
ANR	866448	Statement	opline	119:29:3180:3185	866193	19	True				
ANR	866449	Statement	->	119:35:3186:3187	866193	20	True				
ANR	866450	Statement	opcode	119:37:3188:3193	866193	21	True				
ANR	866451	Statement	]	119:43:3194:3194	866193	22	True				
ANR	866452	Statement	&	119:45:3196:3196	866193	23	True				
ANR	866453	Statement	OP1_CONST_IS_CLASS	119:47:3198:3215	866193	24	True				
ANR	866454	Statement	)	119:65:3216:3216	866193	25	True				
ANR	866455	Statement	&&	119:67:3218:3219	866193	26	True				
ANR	866456	Statement	ZEND_OP1_TYPE	119:70:3221:3233	866193	27	True				
ANR	866457	Statement	(	119:83:3234:3234	866193	28	True				
ANR	866458	Statement	opline	119:84:3235:3240	866193	29	True				
ANR	866459	Statement	)	119:90:3241:3241	866193	30	True				
ANR	866460	Statement	==	119:92:3243:3244	866193	31	True				
ANR	866461	Statement	IS_CONST	119:95:3246:3253	866193	32	True				
ANR	866462	Statement	)	119:103:3254:3254	866193	33	True				
ANR	866463	Statement	)	121:3:3266:3266	866193	34	True				
ANR	866464	CompoundStatement		48:5:1398:1398	866193	35					
ANR	866465	ExpressionStatement	currT = VAR_NUM ( ZEND_OP1 ( opline ) . var )	122:3:3273:3310	866193	0	True				
ANR	866466	AssignmentExpression	currT = VAR_NUM ( ZEND_OP1 ( opline ) . var )		866193	0		=			
ANR	866467	Identifier	currT		866193	0					
ANR	866468	CallExpression	VAR_NUM ( ZEND_OP1 ( opline ) . var )		866193	1					
ANR	866469	Callee	VAR_NUM		866193	0					
ANR	866470	Identifier	VAR_NUM		866193	0					
ANR	866471	ArgumentList	ZEND_OP1 ( opline ) . var		866193	1					
ANR	866472	Argument	ZEND_OP1 ( opline ) . var		866193	0					
ANR	866473	MemberAccess	ZEND_OP1 ( opline ) . var		866193	0					
ANR	866474	CallExpression	ZEND_OP1 ( opline )		866193	0					
ANR	866475	Callee	ZEND_OP1		866193	0					
ANR	866476	Identifier	ZEND_OP1		866193	0					
ANR	866477	ArgumentList	opline		866193	1					
ANR	866478	Argument	opline		866193	0					
ANR	866479	Identifier	opline		866193	0					
ANR	866480	Identifier	var		866193	1					
ANR	866481	IfStatement	if ( ! valid_T [ currT ] )		866193	1					
ANR	866482	Condition	! valid_T [ currT ]	123:7:3319:3333	866193	0	True				
ANR	866483	UnaryOperationExpression	! valid_T [ currT ]		866193	0					
ANR	866484	UnaryOperator	!		866193	0					
ANR	866485	ArrayIndexing	valid_T [ currT ]		866193	1					
ANR	866486	Identifier	valid_T		866193	0					
ANR	866487	Identifier	currT		866193	1					
ANR	866488	CompoundStatement		50:24:1466:1466	866193	1					
ANR	866489	ExpressionStatement	GET_AVAILABLE_T ( )	124:4:3342:3359	866193	0	True				
ANR	866490	CallExpression	GET_AVAILABLE_T ( )		866193	0					
ANR	866491	Callee	GET_AVAILABLE_T		866193	0					
ANR	866492	Identifier	GET_AVAILABLE_T		866193	0					
ANR	866493	ArgumentList			866193	1					
ANR	866494	ExpressionStatement	map_T [ currT ] = i	125:4:3365:3381	866193	1	True				
ANR	866495	AssignmentExpression	map_T [ currT ] = i		866193	0		=			
ANR	866496	ArrayIndexing	map_T [ currT ]		866193	0					
ANR	866497	Identifier	map_T		866193	0					
ANR	866498	Identifier	currT		866193	1					
ANR	866499	Identifier	i		866193	1					
ANR	866500	ExpressionStatement	valid_T [ currT ] = 1	126:4:3387:3405	866193	2	True				
ANR	866501	AssignmentExpression	valid_T [ currT ] = 1		866193	0		=			
ANR	866502	ArrayIndexing	valid_T [ currT ]		866193	0					
ANR	866503	Identifier	valid_T		866193	0					
ANR	866504	Identifier	currT		866193	1					
ANR	866505	PrimaryExpression	1		866193	1					
ANR	866506	ExpressionStatement	ZEND_OP1 ( opline ) . var = NUM_VAR ( map_T [ currT ] )	128:3:3415:3459	866193	2	True				
ANR	866507	AssignmentExpression	ZEND_OP1 ( opline ) . var = NUM_VAR ( map_T [ currT ] )		866193	0		=			
ANR	866508	MemberAccess	ZEND_OP1 ( opline ) . var		866193	0					
ANR	866509	CallExpression	ZEND_OP1 ( opline )		866193	0					
ANR	866510	Callee	ZEND_OP1		866193	0					
ANR	866511	Identifier	ZEND_OP1		866193	0					
ANR	866512	ArgumentList	opline		866193	1					
ANR	866513	Argument	opline		866193	0					
ANR	866514	Identifier	opline		866193	0					
ANR	866515	Identifier	var		866193	1					
ANR	866516	CallExpression	NUM_VAR ( map_T [ currT ] )		866193	1					
ANR	866517	Callee	NUM_VAR		866193	0					
ANR	866518	Identifier	NUM_VAR		866193	0					
ANR	866519	ArgumentList	map_T [ currT ]		866193	1					
ANR	866520	Argument	map_T [ currT ]		866193	0					
ANR	866521	ArrayIndexing	map_T [ currT ]		866193	0					
ANR	866522	Identifier	map_T		866193	0					
ANR	866523	Identifier	currT		866193	1					
ANR	866524	IfStatement	if ( opline -> opcode == ZEND_OP_DATA && ( opline - 1 ) -> opcode == ZEND_ASSIGN_DIM )		866193	36					
ANR	866525	Condition	opline -> opcode == ZEND_OP_DATA && ( opline - 1 ) -> opcode == ZEND_ASSIGN_DIM	132:6:3493:3569	866193	0	True				
ANR	866526	AndExpression	opline -> opcode == ZEND_OP_DATA && ( opline - 1 ) -> opcode == ZEND_ASSIGN_DIM		866193	0		&&			
ANR	866527	EqualityExpression	opline -> opcode == ZEND_OP_DATA		866193	0		==			
ANR	866528	PtrMemberAccess	opline -> opcode		866193	0					
ANR	866529	Identifier	opline		866193	0					
ANR	866530	Identifier	opcode		866193	1					
ANR	866531	Identifier	ZEND_OP_DATA		866193	1					
ANR	866532	EqualityExpression	( opline - 1 ) -> opcode == ZEND_ASSIGN_DIM		866193	1		==			
ANR	866533	PtrMemberAccess	( opline - 1 ) -> opcode		866193	0					
ANR	866534	AdditiveExpression	opline - 1		866193	0		-			
ANR	866535	Identifier	opline		866193	0					
ANR	866536	PrimaryExpression	1		866193	1					
ANR	866537	Identifier	opcode		866193	1					
ANR	866538	Identifier	ZEND_ASSIGN_DIM		866193	1					
ANR	866539	CompoundStatement		60:45:1702:1702	866193	1					
ANR	866540	ExpressionStatement	opline --	134:6:3580:3588	866193	0	True				
ANR	866541	PostIncDecOperationExpression	opline --		866193	0					
ANR	866542	Identifier	opline		866193	0					
ANR	866543	IncDec	--		866193	1					
ANR	866544	ContinueStatement	continue ;	135:6:3596:3604	866193	1	True				
ANR	866545	Statement	if	138:2:3613:3614	866193	37	True				
ANR	866546	Statement	(	138:5:3616:3616	866193	38	True				
ANR	866547	Statement	(	138:6:3617:3617	866193	39	True				
ANR	866548	Statement	ZEND_OP2_TYPE	138:7:3618:3630	866193	40	True				
ANR	866549	Statement	(	138:20:3631:3631	866193	41	True				
ANR	866550	Statement	opline	138:21:3632:3637	866193	42	True				
ANR	866551	Statement	)	138:27:3638:3638	866193	43	True				
ANR	866552	Statement	&	138:29:3640:3640	866193	44	True				
ANR	866553	Statement	(	138:31:3642:3642	866193	45	True				
ANR	866554	Statement	IS_VAR	138:32:3643:3648	866193	46	True				
ANR	866555	Statement	|	138:39:3650:3650	866193	47	True				
ANR	866556	Statement	IS_TMP_VAR	138:41:3652:3661	866193	48	True				
ANR	866557	Statement	)	138:51:3662:3662	866193	49	True				
ANR	866558	Statement	)	138:52:3663:3663	866193	50	True				
ANR	866559	Statement	||	140:3:3713:3714	866193	51	True				
ANR	866560	Statement	(	140:6:3716:3716	866193	52	True				
ANR	866561	Statement	(	140:7:3717:3717	866193	53	True				
ANR	866562	Statement	op_const_means_class	140:8:3718:3737	866193	54	True				
ANR	866563	Statement	[	140:28:3738:3738	866193	55	True				
ANR	866564	Statement	opline	140:29:3739:3744	866193	56	True				
ANR	866565	Statement	->	140:35:3745:3746	866193	57	True				
ANR	866566	Statement	opcode	140:37:3747:3752	866193	58	True				
ANR	866567	Statement	]	140:43:3753:3753	866193	59	True				
ANR	866568	Statement	&	140:45:3755:3755	866193	60	True				
ANR	866569	Statement	OP2_CONST_IS_CLASS	140:47:3757:3774	866193	61	True				
ANR	866570	Statement	)	140:65:3775:3775	866193	62	True				
ANR	866571	Statement	&&	140:67:3777:3778	866193	63	True				
ANR	866572	Statement	ZEND_OP2_TYPE	140:70:3780:3792	866193	64	True				
ANR	866573	Statement	(	140:83:3793:3793	866193	65	True				
ANR	866574	Statement	opline	140:84:3794:3799	866193	66	True				
ANR	866575	Statement	)	140:90:3800:3800	866193	67	True				
ANR	866576	Statement	==	140:92:3802:3803	866193	68	True				
ANR	866577	Statement	IS_CONST	140:95:3805:3812	866193	69	True				
ANR	866578	Statement	)	140:103:3813:3813	866193	70	True				
ANR	866579	Statement	)	142:5:3827:3827	866193	71	True				
ANR	866580	CompoundStatement		69:7:1959:1959	866193	72					
ANR	866581	ExpressionStatement	currT = VAR_NUM ( ZEND_OP2 ( opline ) . var )	143:3:3834:3871	866193	0	True				
ANR	866582	AssignmentExpression	currT = VAR_NUM ( ZEND_OP2 ( opline ) . var )		866193	0		=			
ANR	866583	Identifier	currT		866193	0					
ANR	866584	CallExpression	VAR_NUM ( ZEND_OP2 ( opline ) . var )		866193	1					
ANR	866585	Callee	VAR_NUM		866193	0					
ANR	866586	Identifier	VAR_NUM		866193	0					
ANR	866587	ArgumentList	ZEND_OP2 ( opline ) . var		866193	1					
ANR	866588	Argument	ZEND_OP2 ( opline ) . var		866193	0					
ANR	866589	MemberAccess	ZEND_OP2 ( opline ) . var		866193	0					
ANR	866590	CallExpression	ZEND_OP2 ( opline )		866193	0					
ANR	866591	Callee	ZEND_OP2		866193	0					
ANR	866592	Identifier	ZEND_OP2		866193	0					
ANR	866593	ArgumentList	opline		866193	1					
ANR	866594	Argument	opline		866193	0					
ANR	866595	Identifier	opline		866193	0					
ANR	866596	Identifier	var		866193	1					
ANR	866597	IfStatement	if ( ! valid_T [ currT ] )		866193	1					
ANR	866598	Condition	! valid_T [ currT ]	144:7:3880:3894	866193	0	True				
ANR	866599	UnaryOperationExpression	! valid_T [ currT ]		866193	0					
ANR	866600	UnaryOperator	!		866193	0					
ANR	866601	ArrayIndexing	valid_T [ currT ]		866193	1					
ANR	866602	Identifier	valid_T		866193	0					
ANR	866603	Identifier	currT		866193	1					
ANR	866604	CompoundStatement		71:24:2027:2027	866193	1					
ANR	866605	ExpressionStatement	GET_AVAILABLE_T ( )	145:4:3903:3920	866193	0	True				
ANR	866606	CallExpression	GET_AVAILABLE_T ( )		866193	0					
ANR	866607	Callee	GET_AVAILABLE_T		866193	0					
ANR	866608	Identifier	GET_AVAILABLE_T		866193	0					
ANR	866609	ArgumentList			866193	1					
ANR	866610	ExpressionStatement	map_T [ currT ] = i	146:4:3926:3942	866193	1	True				
ANR	866611	AssignmentExpression	map_T [ currT ] = i		866193	0		=			
ANR	866612	ArrayIndexing	map_T [ currT ]		866193	0					
ANR	866613	Identifier	map_T		866193	0					
ANR	866614	Identifier	currT		866193	1					
ANR	866615	Identifier	i		866193	1					
ANR	866616	ExpressionStatement	valid_T [ currT ] = 1	147:4:3948:3966	866193	2	True				
ANR	866617	AssignmentExpression	valid_T [ currT ] = 1		866193	0		=			
ANR	866618	ArrayIndexing	valid_T [ currT ]		866193	0					
ANR	866619	Identifier	valid_T		866193	0					
ANR	866620	Identifier	currT		866193	1					
ANR	866621	PrimaryExpression	1		866193	1					
ANR	866622	ExpressionStatement	ZEND_OP2 ( opline ) . var = NUM_VAR ( map_T [ currT ] )	149:3:3976:4020	866193	2	True				
ANR	866623	AssignmentExpression	ZEND_OP2 ( opline ) . var = NUM_VAR ( map_T [ currT ] )		866193	0		=			
ANR	866624	MemberAccess	ZEND_OP2 ( opline ) . var		866193	0					
ANR	866625	CallExpression	ZEND_OP2 ( opline )		866193	0					
ANR	866626	Callee	ZEND_OP2		866193	0					
ANR	866627	Identifier	ZEND_OP2		866193	0					
ANR	866628	ArgumentList	opline		866193	1					
ANR	866629	Argument	opline		866193	0					
ANR	866630	Identifier	opline		866193	0					
ANR	866631	Identifier	var		866193	1					
ANR	866632	CallExpression	NUM_VAR ( map_T [ currT ] )		866193	1					
ANR	866633	Callee	NUM_VAR		866193	0					
ANR	866634	Identifier	NUM_VAR		866193	0					
ANR	866635	ArgumentList	map_T [ currT ]		866193	1					
ANR	866636	Argument	map_T [ currT ]		866193	0					
ANR	866637	ArrayIndexing	map_T [ currT ]		866193	0					
ANR	866638	Identifier	map_T		866193	0					
ANR	866639	Identifier	currT		866193	1					
ANR	866640	IfStatement	if ( ( op_const_means_class [ opline -> opcode ] & EXT_CONST_IS_CLASS ) )		866193	73					
ANR	866641	Condition	op_const_means_class [ opline -> opcode ] & EXT_CONST_IS_CLASS	153:6:4078:4136	866193	0	True				
ANR	866642	BitAndExpression	op_const_means_class [ opline -> opcode ] & EXT_CONST_IS_CLASS		866193	0		&			
ANR	866643	ArrayIndexing	op_const_means_class [ opline -> opcode ]		866193	0					
ANR	866644	Identifier	op_const_means_class		866193	0					
ANR	866645	PtrMemberAccess	opline -> opcode		866193	1					
ANR	866646	Identifier	opline		866193	0					
ANR	866647	Identifier	opcode		866193	1					
ANR	866648	Identifier	EXT_CONST_IS_CLASS		866193	1					
ANR	866649	CompoundStatement		80:67:2269:2269	866193	1					
ANR	866650	ExpressionStatement	currT = VAR_NUM ( opline -> extended_value )	158:3:4283:4322	866193	0	True				
ANR	866651	AssignmentExpression	currT = VAR_NUM ( opline -> extended_value )		866193	0		=			
ANR	866652	Identifier	currT		866193	0					
ANR	866653	CallExpression	VAR_NUM ( opline -> extended_value )		866193	1					
ANR	866654	Callee	VAR_NUM		866193	0					
ANR	866655	Identifier	VAR_NUM		866193	0					
ANR	866656	ArgumentList	opline -> extended_value		866193	1					
ANR	866657	Argument	opline -> extended_value		866193	0					
ANR	866658	PtrMemberAccess	opline -> extended_value		866193	0					
ANR	866659	Identifier	opline		866193	0					
ANR	866660	Identifier	extended_value		866193	1					
ANR	866661	IfStatement	if ( ! valid_T [ currT ] )		866193	1					
ANR	866662	Condition	! valid_T [ currT ]	159:7:4331:4345	866193	0	True				
ANR	866663	UnaryOperationExpression	! valid_T [ currT ]		866193	0					
ANR	866664	UnaryOperator	!		866193	0					
ANR	866665	ArrayIndexing	valid_T [ currT ]		866193	1					
ANR	866666	Identifier	valid_T		866193	0					
ANR	866667	Identifier	currT		866193	1					
ANR	866668	CompoundStatement		86:24:2478:2478	866193	1					
ANR	866669	ExpressionStatement	GET_AVAILABLE_T ( )	160:4:4354:4371	866193	0	True				
ANR	866670	CallExpression	GET_AVAILABLE_T ( )		866193	0					
ANR	866671	Callee	GET_AVAILABLE_T		866193	0					
ANR	866672	Identifier	GET_AVAILABLE_T		866193	0					
ANR	866673	ArgumentList			866193	1					
ANR	866674	ExpressionStatement	map_T [ currT ] = i	161:4:4377:4393	866193	1	True				
ANR	866675	AssignmentExpression	map_T [ currT ] = i		866193	0		=			
ANR	866676	ArrayIndexing	map_T [ currT ]		866193	0					
ANR	866677	Identifier	map_T		866193	0					
ANR	866678	Identifier	currT		866193	1					
ANR	866679	Identifier	i		866193	1					
ANR	866680	ExpressionStatement	valid_T [ currT ] = 1	162:4:4399:4417	866193	2	True				
ANR	866681	AssignmentExpression	valid_T [ currT ] = 1		866193	0		=			
ANR	866682	ArrayIndexing	valid_T [ currT ]		866193	0					
ANR	866683	Identifier	valid_T		866193	0					
ANR	866684	Identifier	currT		866193	1					
ANR	866685	PrimaryExpression	1		866193	1					
ANR	866686	ExpressionStatement	opline -> extended_value = NUM_VAR ( map_T [ currT ] )	164:3:4427:4473	866193	2	True				
ANR	866687	AssignmentExpression	opline -> extended_value = NUM_VAR ( map_T [ currT ] )		866193	0		=			
ANR	866688	PtrMemberAccess	opline -> extended_value		866193	0					
ANR	866689	Identifier	opline		866193	0					
ANR	866690	Identifier	extended_value		866193	1					
ANR	866691	CallExpression	NUM_VAR ( map_T [ currT ] )		866193	1					
ANR	866692	Callee	NUM_VAR		866193	0					
ANR	866693	Identifier	NUM_VAR		866193	0					
ANR	866694	ArgumentList	map_T [ currT ]		866193	1					
ANR	866695	Argument	map_T [ currT ]		866193	0					
ANR	866696	ArrayIndexing	map_T [ currT ]		866193	0					
ANR	866697	Identifier	map_T		866193	0					
ANR	866698	Identifier	currT		866193	1					
ANR	866699	IfStatement	if ( opline -> opcode == ZEND_ASSIGN_DIM && ( opline + 1 ) -> opcode == ZEND_OP_DATA && ZEND_OP2_TYPE ( opline + 1 ) & ( IS_VAR | IS_TMP_VAR ) )		866193	74					
ANR	866700	Condition	opline -> opcode == ZEND_ASSIGN_DIM && ( opline + 1 ) -> opcode == ZEND_OP_DATA && ZEND_OP2_TYPE ( opline + 1 ) & ( IS_VAR | IS_TMP_VAR )	168:6:4554:4691	866193	0	True				
ANR	866701	AndExpression	opline -> opcode == ZEND_ASSIGN_DIM && ( opline + 1 ) -> opcode == ZEND_OP_DATA && ZEND_OP2_TYPE ( opline + 1 ) & ( IS_VAR | IS_TMP_VAR )		866193	0		&&			
ANR	866702	EqualityExpression	opline -> opcode == ZEND_ASSIGN_DIM		866193	0		==			
ANR	866703	PtrMemberAccess	opline -> opcode		866193	0					
ANR	866704	Identifier	opline		866193	0					
ANR	866705	Identifier	opcode		866193	1					
ANR	866706	Identifier	ZEND_ASSIGN_DIM		866193	1					
ANR	866707	AndExpression	( opline + 1 ) -> opcode == ZEND_OP_DATA && ZEND_OP2_TYPE ( opline + 1 ) & ( IS_VAR | IS_TMP_VAR )		866193	1		&&			
ANR	866708	EqualityExpression	( opline + 1 ) -> opcode == ZEND_OP_DATA		866193	0		==			
ANR	866709	PtrMemberAccess	( opline + 1 ) -> opcode		866193	0					
ANR	866710	AdditiveExpression	opline + 1		866193	0		+			
ANR	866711	Identifier	opline		866193	0					
ANR	866712	PrimaryExpression	1		866193	1					
ANR	866713	Identifier	opcode		866193	1					
ANR	866714	Identifier	ZEND_OP_DATA		866193	1					
ANR	866715	BitAndExpression	ZEND_OP2_TYPE ( opline + 1 ) & ( IS_VAR | IS_TMP_VAR )		866193	1		&			
ANR	866716	CallExpression	ZEND_OP2_TYPE ( opline + 1 )		866193	0					
ANR	866717	Callee	ZEND_OP2_TYPE		866193	0					
ANR	866718	Identifier	ZEND_OP2_TYPE		866193	0					
ANR	866719	ArgumentList	opline + 1		866193	1					
ANR	866720	Argument	opline + 1		866193	0					
ANR	866721	AdditiveExpression	opline + 1		866193	0		+			
ANR	866722	Identifier	opline		866193	0					
ANR	866723	PrimaryExpression	1		866193	1					
ANR	866724	InclusiveOrExpression	IS_VAR | IS_TMP_VAR		866193	1		|			
ANR	866725	Identifier	IS_VAR		866193	0					
ANR	866726	Identifier	IS_TMP_VAR		866193	1					
ANR	866727	CompoundStatement		97:57:2824:2824	866193	1					
ANR	866728	ExpressionStatement	currT = VAR_NUM ( ZEND_OP2 ( opline + 1 ) . var )	171:3:4699:4740	866193	0	True				
ANR	866729	AssignmentExpression	currT = VAR_NUM ( ZEND_OP2 ( opline + 1 ) . var )		866193	0		=			
ANR	866730	Identifier	currT		866193	0					
ANR	866731	CallExpression	VAR_NUM ( ZEND_OP2 ( opline + 1 ) . var )		866193	1					
ANR	866732	Callee	VAR_NUM		866193	0					
ANR	866733	Identifier	VAR_NUM		866193	0					
ANR	866734	ArgumentList	ZEND_OP2 ( opline + 1 ) . var		866193	1					
ANR	866735	Argument	ZEND_OP2 ( opline + 1 ) . var		866193	0					
ANR	866736	MemberAccess	ZEND_OP2 ( opline + 1 ) . var		866193	0					
ANR	866737	CallExpression	ZEND_OP2 ( opline + 1 )		866193	0					
ANR	866738	Callee	ZEND_OP2		866193	0					
ANR	866739	Identifier	ZEND_OP2		866193	0					
ANR	866740	ArgumentList	opline + 1		866193	1					
ANR	866741	Argument	opline + 1		866193	0					
ANR	866742	AdditiveExpression	opline + 1		866193	0		+			
ANR	866743	Identifier	opline		866193	0					
ANR	866744	PrimaryExpression	1		866193	1					
ANR	866745	Identifier	var		866193	1					
ANR	866746	ExpressionStatement	GET_AVAILABLE_T ( )	172:3:4745:4762	866193	1	True				
ANR	866747	CallExpression	GET_AVAILABLE_T ( )		866193	0					
ANR	866748	Callee	GET_AVAILABLE_T		866193	0					
ANR	866749	Identifier	GET_AVAILABLE_T		866193	0					
ANR	866750	ArgumentList			866193	1					
ANR	866751	ExpressionStatement	map_T [ currT ] = i	173:3:4767:4783	866193	2	True				
ANR	866752	AssignmentExpression	map_T [ currT ] = i		866193	0		=			
ANR	866753	ArrayIndexing	map_T [ currT ]		866193	0					
ANR	866754	Identifier	map_T		866193	0					
ANR	866755	Identifier	currT		866193	1					
ANR	866756	Identifier	i		866193	1					
ANR	866757	ExpressionStatement	valid_T [ currT ] = 1	174:3:4788:4806	866193	3	True				
ANR	866758	AssignmentExpression	valid_T [ currT ] = 1		866193	0		=			
ANR	866759	ArrayIndexing	valid_T [ currT ]		866193	0					
ANR	866760	Identifier	valid_T		866193	0					
ANR	866761	Identifier	currT		866193	1					
ANR	866762	PrimaryExpression	1		866193	1					
ANR	866763	ExpressionStatement	taken_T [ i ] = 0	175:3:4811:4825	866193	4	True				
ANR	866764	AssignmentExpression	taken_T [ i ] = 0		866193	0		=			
ANR	866765	ArrayIndexing	taken_T [ i ]		866193	0					
ANR	866766	Identifier	taken_T		866193	0					
ANR	866767	Identifier	i		866193	1					
ANR	866768	PrimaryExpression	0		866193	1					
ANR	866769	ExpressionStatement	ZEND_OP2 ( opline + 1 ) . var = NUM_VAR ( i )	176:3:4830:4867	866193	5	True				
ANR	866770	AssignmentExpression	ZEND_OP2 ( opline + 1 ) . var = NUM_VAR ( i )		866193	0		=			
ANR	866771	MemberAccess	ZEND_OP2 ( opline + 1 ) . var		866193	0					
ANR	866772	CallExpression	ZEND_OP2 ( opline + 1 )		866193	0					
ANR	866773	Callee	ZEND_OP2		866193	0					
ANR	866774	Identifier	ZEND_OP2		866193	0					
ANR	866775	ArgumentList	opline + 1		866193	1					
ANR	866776	Argument	opline + 1		866193	0					
ANR	866777	AdditiveExpression	opline + 1		866193	0		+			
ANR	866778	Identifier	opline		866193	0					
ANR	866779	PrimaryExpression	1		866193	1					
ANR	866780	Identifier	var		866193	1					
ANR	866781	CallExpression	NUM_VAR ( i )		866193	1					
ANR	866782	Callee	NUM_VAR		866193	0					
ANR	866783	Identifier	NUM_VAR		866193	0					
ANR	866784	ArgumentList	i		866193	1					
ANR	866785	Argument	i		866193	0					
ANR	866786	Identifier	i		866193	0					
ANR	866787	ExpressionStatement	var_to_free = i	177:3:4872:4887	866193	6	True				
ANR	866788	AssignmentExpression	var_to_free = i		866193	0		=			
ANR	866789	Identifier	var_to_free		866193	0					
ANR	866790	Identifier	i		866193	1					
ANR	866791	IfStatement	if ( ZEND_RESULT_TYPE ( opline ) & ( IS_VAR | IS_TMP_VAR | IS_CONST ) )		866193	75					
ANR	866792	Condition	ZEND_RESULT_TYPE ( opline ) & ( IS_VAR | IS_TMP_VAR | IS_CONST )	181:6:4945:5003	866193	0	True				
ANR	866793	BitAndExpression	ZEND_RESULT_TYPE ( opline ) & ( IS_VAR | IS_TMP_VAR | IS_CONST )		866193	0		&			
ANR	866794	CallExpression	ZEND_RESULT_TYPE ( opline )		866193	0					
ANR	866795	Callee	ZEND_RESULT_TYPE		866193	0					
ANR	866796	Identifier	ZEND_RESULT_TYPE		866193	0					
ANR	866797	ArgumentList	opline		866193	1					
ANR	866798	Argument	opline		866193	0					
ANR	866799	Identifier	opline		866193	0					
ANR	866800	InclusiveOrExpression	IS_VAR | IS_TMP_VAR | IS_CONST		866193	1		|			
ANR	866801	Identifier	IS_VAR		866193	0					
ANR	866802	InclusiveOrExpression	IS_TMP_VAR | IS_CONST		866193	1		|			
ANR	866803	Identifier	IS_TMP_VAR		866193	0					
ANR	866804	Identifier	IS_CONST		866193	1					
ANR	866805	CompoundStatement		108:67:3136:3136	866193	1					
ANR	866806	IfStatement	if ( ! ( op_const_means_class [ opline -> opcode ] & RESULT_IS_UNUSED ) )		866193	0					
ANR	866807	Condition	! ( op_const_means_class [ opline -> opcode ] & RESULT_IS_UNUSED )	182:7:5015:5072	866193	0	True				
ANR	866808	UnaryOperationExpression	! ( op_const_means_class [ opline -> opcode ] & RESULT_IS_UNUSED )		866193	0					
ANR	866809	UnaryOperator	!		866193	0					
ANR	866810	BitAndExpression	op_const_means_class [ opline -> opcode ] & RESULT_IS_UNUSED		866193	1		&			
ANR	866811	ArrayIndexing	op_const_means_class [ opline -> opcode ]		866193	0					
ANR	866812	Identifier	op_const_means_class		866193	0					
ANR	866813	PtrMemberAccess	opline -> opcode		866193	1					
ANR	866814	Identifier	opline		866193	0					
ANR	866815	Identifier	opcode		866193	1					
ANR	866816	Identifier	RESULT_IS_UNUSED		866193	1					
ANR	866817	CompoundStatement		109:67:3205:3205	866193	1					
ANR	866818	ExpressionStatement	currT = VAR_NUM ( ZEND_RESULT ( opline ) . var )	186:4:5152:5192	866193	0	True				
ANR	866819	AssignmentExpression	currT = VAR_NUM ( ZEND_RESULT ( opline ) . var )		866193	0		=			
ANR	866820	Identifier	currT		866193	0					
ANR	866821	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		866193	1					
ANR	866822	Callee	VAR_NUM		866193	0					
ANR	866823	Identifier	VAR_NUM		866193	0					
ANR	866824	ArgumentList	ZEND_RESULT ( opline ) . var		866193	1					
ANR	866825	Argument	ZEND_RESULT ( opline ) . var		866193	0					
ANR	866826	MemberAccess	ZEND_RESULT ( opline ) . var		866193	0					
ANR	866827	CallExpression	ZEND_RESULT ( opline )		866193	0					
ANR	866828	Callee	ZEND_RESULT		866193	0					
ANR	866829	Identifier	ZEND_RESULT		866193	0					
ANR	866830	ArgumentList	opline		866193	1					
ANR	866831	Argument	opline		866193	0					
ANR	866832	Identifier	opline		866193	0					
ANR	866833	Identifier	var		866193	1					
ANR	866834	IfStatement	if ( valid_T [ currT ] )		866193	1					
ANR	866835	Condition	valid_T [ currT ]	187:8:5202:5215	866193	0	True				
ANR	866836	ArrayIndexing	valid_T [ currT ]		866193	0					
ANR	866837	Identifier	valid_T		866193	0					
ANR	866838	Identifier	currT		866193	1					
ANR	866839	CompoundStatement		114:24:3348:3348	866193	1					
ANR	866840	IfStatement	if ( start_of_T [ currT ] == opline )		866193	0					
ANR	866841	Condition	start_of_T [ currT ] == opline	188:9:5229:5255	866193	0	True				
ANR	866842	EqualityExpression	start_of_T [ currT ] == opline		866193	0		==			
ANR	866843	ArrayIndexing	start_of_T [ currT ]		866193	0					
ANR	866844	Identifier	start_of_T		866193	0					
ANR	866845	Identifier	currT		866193	1					
ANR	866846	Identifier	opline		866193	1					
ANR	866847	CompoundStatement		115:38:3388:3388	866193	1					
ANR	866848	ExpressionStatement	taken_T [ map_T [ currT ] ] = 0	189:6:5266:5291	866193	0	True				
ANR	866849	AssignmentExpression	taken_T [ map_T [ currT ] ] = 0		866193	0		=			
ANR	866850	ArrayIndexing	taken_T [ map_T [ currT ] ]		866193	0					
ANR	866851	Identifier	taken_T		866193	0					
ANR	866852	ArrayIndexing	map_T [ currT ]		866193	1					
ANR	866853	Identifier	map_T		866193	0					
ANR	866854	Identifier	currT		866193	1					
ANR	866855	PrimaryExpression	0		866193	1					
ANR	866856	ExpressionStatement	ZEND_RESULT ( opline ) . var = NUM_VAR ( map_T [ currT ] )	191:5:5305:5352	866193	1	True				
ANR	866857	AssignmentExpression	ZEND_RESULT ( opline ) . var = NUM_VAR ( map_T [ currT ] )		866193	0		=			
ANR	866858	MemberAccess	ZEND_RESULT ( opline ) . var		866193	0					
ANR	866859	CallExpression	ZEND_RESULT ( opline )		866193	0					
ANR	866860	Callee	ZEND_RESULT		866193	0					
ANR	866861	Identifier	ZEND_RESULT		866193	0					
ANR	866862	ArgumentList	opline		866193	1					
ANR	866863	Argument	opline		866193	0					
ANR	866864	Identifier	opline		866193	0					
ANR	866865	Identifier	var		866193	1					
ANR	866866	CallExpression	NUM_VAR ( map_T [ currT ] )		866193	1					
ANR	866867	Callee	NUM_VAR		866193	0					
ANR	866868	Identifier	NUM_VAR		866193	0					
ANR	866869	ArgumentList	map_T [ currT ]		866193	1					
ANR	866870	Argument	map_T [ currT ]		866193	0					
ANR	866871	ArrayIndexing	map_T [ currT ]		866193	0					
ANR	866872	Identifier	map_T		866193	0					
ANR	866873	Identifier	currT		866193	1					
ANR	866874	ElseStatement	else		866193	0					
ANR	866875	CompoundStatement		119:11:3495:3495	866193	0					
ANR	866876	ExpressionStatement	GET_AVAILABLE_T ( )	193:5:5463:5480	866193	0	True				
ANR	866877	CallExpression	GET_AVAILABLE_T ( )		866193	0					
ANR	866878	Callee	GET_AVAILABLE_T		866193	0					
ANR	866879	Identifier	GET_AVAILABLE_T		866193	0					
ANR	866880	ArgumentList			866193	1					
ANR	866881	IfStatement	if ( RESULT_UNUSED ( opline ) )		866193	1					
ANR	866882	Condition	RESULT_UNUSED ( opline )	195:9:5492:5512	866193	0	True				
ANR	866883	CallExpression	RESULT_UNUSED ( opline )		866193	0					
ANR	866884	Callee	RESULT_UNUSED		866193	0					
ANR	866885	Identifier	RESULT_UNUSED		866193	0					
ANR	866886	ArgumentList	opline		866193	1					
ANR	866887	Argument	opline		866193	0					
ANR	866888	Identifier	opline		866193	0					
ANR	866889	CompoundStatement		122:32:3645:3645	866193	1					
ANR	866890	ExpressionStatement	taken_T [ i ] = 0	196:6:5523:5537	866193	0	True				
ANR	866891	AssignmentExpression	taken_T [ i ] = 0		866193	0		=			
ANR	866892	ArrayIndexing	taken_T [ i ]		866193	0					
ANR	866893	Identifier	taken_T		866193	0					
ANR	866894	Identifier	i		866193	1					
ANR	866895	PrimaryExpression	0		866193	1					
ANR	866896	ElseStatement	else		866193	0					
ANR	866897	CompoundStatement		124:12:3681:3681	866193	0					
ANR	866898	ExpressionStatement	map_T [ currT ] = i	199:6:5639:5655	866193	0	True				
ANR	866899	AssignmentExpression	map_T [ currT ] = i		866193	0		=			
ANR	866900	ArrayIndexing	map_T [ currT ]		866193	0					
ANR	866901	Identifier	map_T		866193	0					
ANR	866902	Identifier	currT		866193	1					
ANR	866903	Identifier	i		866193	1					
ANR	866904	ExpressionStatement	valid_T [ currT ] = 1	200:6:5663:5681	866193	1	True				
ANR	866905	AssignmentExpression	valid_T [ currT ] = 1		866193	0		=			
ANR	866906	ArrayIndexing	valid_T [ currT ]		866193	0					
ANR	866907	Identifier	valid_T		866193	0					
ANR	866908	Identifier	currT		866193	1					
ANR	866909	PrimaryExpression	1		866193	1					
ANR	866910	ExpressionStatement	ZEND_RESULT ( opline ) . var = NUM_VAR ( i )	202:5:5695:5731	866193	2	True				
ANR	866911	AssignmentExpression	ZEND_RESULT ( opline ) . var = NUM_VAR ( i )		866193	0		=			
ANR	866912	MemberAccess	ZEND_RESULT ( opline ) . var		866193	0					
ANR	866913	CallExpression	ZEND_RESULT ( opline )		866193	0					
ANR	866914	Callee	ZEND_RESULT		866193	0					
ANR	866915	Identifier	ZEND_RESULT		866193	0					
ANR	866916	ArgumentList	opline		866193	1					
ANR	866917	Argument	opline		866193	0					
ANR	866918	Identifier	opline		866193	0					
ANR	866919	Identifier	var		866193	1					
ANR	866920	CallExpression	NUM_VAR ( i )		866193	1					
ANR	866921	Callee	NUM_VAR		866193	0					
ANR	866922	Identifier	NUM_VAR		866193	0					
ANR	866923	ArgumentList	i		866193	1					
ANR	866924	Argument	i		866193	0					
ANR	866925	Identifier	i		866193	0					
ANR	866926	IfStatement	if ( var_to_free >= 0 )		866193	76					
ANR	866927	Condition	var_to_free >= 0	209:6:5807:5822	866193	0	True				
ANR	866928	RelationalExpression	var_to_free >= 0		866193	0		>=			
ANR	866929	Identifier	var_to_free		866193	0					
ANR	866930	PrimaryExpression	0		866193	1					
ANR	866931	CompoundStatement		136:24:3955:3955	866193	1					
ANR	866932	ExpressionStatement	taken_T [ var_to_free ] = 0	210:3:5830:5854	866193	0	True				
ANR	866933	AssignmentExpression	taken_T [ var_to_free ] = 0		866193	0		=			
ANR	866934	ArrayIndexing	taken_T [ var_to_free ]		866193	0					
ANR	866935	Identifier	taken_T		866193	0					
ANR	866936	Identifier	var_to_free		866193	1					
ANR	866937	PrimaryExpression	0		866193	1					
ANR	866938	ExpressionStatement	var_to_free = - 1	211:3:5859:5875	866193	1	True				
ANR	866939	AssignmentExpression	var_to_free = - 1		866193	0		=			
ANR	866940	Identifier	var_to_free		866193	0					
ANR	866941	UnaryOperationExpression	- 1		866193	1					
ANR	866942	UnaryOperator	-		866193	0					
ANR	866943	PrimaryExpression	1		866193	1					
ANR	866944	ExpressionStatement	opline --	214:2:5884:5892	866193	77	True				
ANR	866945	PostIncDecOperationExpression	opline --		866193	0					
ANR	866946	Identifier	opline		866193	0					
ANR	866947	IncDec	--		866193	1					
ANR	866948	ExpressionStatement	efree ( taken_T )	217:1:5899:5913	866193	22	True				
ANR	866949	CallExpression	efree ( taken_T )		866193	0					
ANR	866950	Callee	efree		866193	0					
ANR	866951	Identifier	efree		866193	0					
ANR	866952	ArgumentList	taken_T		866193	1					
ANR	866953	Argument	taken_T		866193	0					
ANR	866954	Identifier	taken_T		866193	0					
ANR	866955	ExpressionStatement	efree ( start_of_T )	218:1:5916:5933	866193	23	True				
ANR	866956	CallExpression	efree ( start_of_T )		866193	0					
ANR	866957	Callee	efree		866193	0					
ANR	866958	Identifier	efree		866193	0					
ANR	866959	ArgumentList	start_of_T		866193	1					
ANR	866960	Argument	start_of_T		866193	0					
ANR	866961	Identifier	start_of_T		866193	0					
ANR	866962	ExpressionStatement	efree ( valid_T )	219:1:5936:5950	866193	24	True				
ANR	866963	CallExpression	efree ( valid_T )		866193	0					
ANR	866964	Callee	efree		866193	0					
ANR	866965	Identifier	efree		866193	0					
ANR	866966	ArgumentList	valid_T		866193	1					
ANR	866967	Argument	valid_T		866193	0					
ANR	866968	Identifier	valid_T		866193	0					
ANR	866969	ExpressionStatement	efree ( map_T )	220:1:5953:5965	866193	25	True				
ANR	866970	CallExpression	efree ( map_T )		866193	0					
ANR	866971	Callee	efree		866193	0					
ANR	866972	Identifier	efree		866193	0					
ANR	866973	ArgumentList	map_T		866193	1					
ANR	866974	Argument	map_T		866193	0					
ANR	866975	Identifier	map_T		866193	0					
ANR	866976	ExpressionStatement	op_array -> T = max + 1	221:1:5968:5989	866193	26	True				
ANR	866977	AssignmentExpression	op_array -> T = max + 1		866193	0		=			
ANR	866978	PtrMemberAccess	op_array -> T		866193	0					
ANR	866979	Identifier	op_array		866193	0					
ANR	866980	Identifier	T		866193	1					
ANR	866981	AdditiveExpression	max + 1		866193	1		+			
ANR	866982	Identifier	max		866193	0					
ANR	866983	PrimaryExpression	1		866193	1					
ANR	866984	ReturnType	static void		866193	1					
ANR	866985	Identifier	optimize_temporary_variables		866193	2					
ANR	866986	ParameterList	zend_op_array * op_array		866193	3					
ANR	866987	Parameter	zend_op_array * op_array	73:41:1844:1866	866193	0	True				
ANR	866988	ParameterType	zend_op_array *		866193	0					
ANR	866989	Identifier	op_array		866193	1					
ANR	866990	CFGEntryNode	ENTRY		866193		True				
ANR	866991	CFGExitNode	EXIT		866193		True				
ANR	866992	Symbol	* var_to_free		866193						
ANR	866993	Symbol	* op_const_means_class		866193						
ANR	866994	Symbol	ZEND_OP_DATA		866193						
ANR	866995	Symbol	ZEND_OP2_TYPE		866193						
ANR	866996	Symbol	opline -> extended_value		866193						
ANR	866997	Symbol	start_of_T		866193						
ANR	866998	Symbol	ZEND_RESULT ( opline ) . var		866193						
ANR	866999	Symbol	opline		866193						
ANR	867000	Symbol	valid_T		866193						
ANR	867001	Symbol	map_T		866193						
ANR	867002	Symbol	* * currT		866193						
ANR	867003	Symbol	IS_TMP_VAR		866193						
ANR	867004	Symbol	( opline - 1 ) -> opcode		866193						
ANR	867005	Symbol	op_array -> T		866193						
ANR	867006	Symbol	IS_CONST		866193						
ANR	867007	Symbol	ZEND_OP2 ( opline ) . var		866193						
ANR	867008	Symbol	RESULT_IS_UNUSED		866193						
ANR	867009	Symbol	* taken_T		866193						
ANR	867010	Symbol	* start_of_T		866193						
ANR	867011	Symbol	* * map_T		866193						
ANR	867012	Symbol	* op_array		866193						
ANR	867013	Symbol	taken_T		866193						
ANR	867014	Symbol	op_array -> last		866193						
ANR	867015	Symbol	ZEND_RESULT_TYPE		866193						
ANR	867016	Symbol	* map_T		866193						
ANR	867017	Symbol	NUM_VAR		866193						
ANR	867018	Symbol	op_const_means_class		866193						
ANR	867019	Symbol	RESULT_UNUSED		866193						
ANR	867020	Symbol	IS_VAR		866193						
ANR	867021	Symbol	* opline -> opcode		866193						
ANR	867022	Symbol	currT		866193						
ANR	867023	Symbol	emalloc		866193						
ANR	867024	Symbol	op_array -> opcodes		866193						
ANR	867025	Symbol	T		866193						
ANR	867026	Symbol	ZEND_RESULT		866193						
ANR	867027	Symbol	( opline + 1 ) -> opcode		866193						
ANR	867028	Symbol	end		866193						
ANR	867029	Symbol	* * opline		866193						
ANR	867030	Symbol	VAR_NUM		866193						
ANR	867031	Symbol	max		866193						
ANR	867032	Symbol	ZEND_OP1 ( opline ) . var		866193						
ANR	867033	Symbol	* currT		866193						
ANR	867034	Symbol	i		866193						
ANR	867035	Symbol	* VAR_NUM		866193						
ANR	867036	Symbol	ZEND_OP1		866193						
ANR	867037	Symbol	ZEND_OP2		866193						
ANR	867038	Symbol	* valid_T		866193						
ANR	867039	Symbol	* i		866193						
ANR	867040	Symbol	* opline		866193						
ANR	867041	Symbol	ZEND_ASSIGN_DIM		866193						
ANR	867042	Symbol	var_to_free		866193						
ANR	867043	Symbol	opline -> opcode		866193						
ANR	867044	Symbol	EXT_CONST_IS_CLASS		866193						
ANR	867045	Symbol	ZEND_OP2 ( opline + 1 ) . var		866193						
ANR	867046	Symbol	op_array		866193						
