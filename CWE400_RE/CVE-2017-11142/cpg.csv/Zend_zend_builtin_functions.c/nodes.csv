command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	38530	File	data/converged/CVE-2017-11142_php-src/Zend_zend_builtin_functions.c								
ANR	38531	DeclStmt									
ANR	38532	Decl							const zend_function_entry	const zend_function_entry [ ]	builtin_functions
ANR	38533	DeclStmt									
ANR	38534	Decl							zend_class_entry	zend_class_entry	class_entry
ANR	38535	DeclStmt									
ANR	38536	Decl							zend_module_entry	zend_module_entry	zend_builtin_module
ANR	38537	DeclStmt									
ANR	38538	Decl							zend_execute_data	zend_execute_data *	ex
ANR	38539	DeclStmt									
ANR	38540	Decl							void	void * *	p
ANR	38541	DeclStmt									
ANR	38542	Decl							int	int	arg_count
ANR	38543	DeclStmt									
ANR	38544	Decl							zval	zval *	arg
ANR	38545	DeclStmt									
ANR	38546	Decl							long	long	requested_offset
ANR	38547	DeclStmt									
ANR	38548	Decl							zend_execute_data	zend_execute_data *	ex
ANR	38549	DeclStmt									
ANR	38550	Decl							void	void * *	p
ANR	38551	DeclStmt									
ANR	38552	Decl							int	int	arg_count
ANR	38553	DeclStmt									
ANR	38554	Decl							int	int	i
ANR	38555	DeclStmt									
ANR	38556	Decl							zend_execute_data	zend_execute_data *	ex
ANR	38557	DeclStmt									
ANR	38558	Decl							zval	zval *	element
ANR	38559	Decl							zval	zval *	arg
ANR	38560	DeclStmt									
ANR	38561	Decl							char	char *	s1
ANR	38562	DeclStmt									
ANR	38563	Decl							int	int	s1_len
ANR	38564	DeclStmt									
ANR	38565	Decl							char	char *	s1
ANR	38566	Decl							char	char *	s2
ANR	38567	DeclStmt									
ANR	38568	Decl							int	int	s1_len
ANR	38569	Decl							int	int	s2_len
ANR	38570	DeclStmt									
ANR	38571	Decl							char	char *	s1
ANR	38572	Decl							char	char *	s2
ANR	38573	DeclStmt									
ANR	38574	Decl							int	int	s1_len
ANR	38575	Decl							int	int	s2_len
ANR	38576	DeclStmt									
ANR	38577	Decl							long	long	len
ANR	38578	DeclStmt									
ANR	38579	Decl							char	char *	s1
ANR	38580	Decl							char	char *	s2
ANR	38581	DeclStmt									
ANR	38582	Decl							int	int	s1_len
ANR	38583	Decl							int	int	s2_len
ANR	38584	DeclStmt									
ANR	38585	Decl							char	char *	s1
ANR	38586	Decl							char	char *	s2
ANR	38587	DeclStmt									
ANR	38588	Decl							int	int	s1_len
ANR	38589	Decl							int	int	s2_len
ANR	38590	DeclStmt									
ANR	38591	Decl							long	long	len
ANR	38592	DeclStmt									
ANR	38593	Decl							zval	zval *	array
ANR	38594	Decl							zval	zval *	entry
ANR	38595	Decl							zval	zval * *	entry_ptr
ANR	38596	Decl							zval	zval *	tmp
ANR	38597	DeclStmt									
ANR	38598	Decl							char	char *	string_key
ANR	38599	DeclStmt									
ANR	38600	Decl							uint	uint	string_key_len
ANR	38601	DeclStmt									
ANR	38602	Decl							ulong	ulong	num_key
ANR	38603	DeclStmt									
ANR	38604	Decl							zval	zval * *	inserted_pointer
ANR	38605	DeclStmt									
ANR	38606	Decl							HashTable	HashTable *	target_hash
ANR	38607	DeclStmt									
ANR	38608	Decl							char	char *	err
ANR	38609	DeclStmt									
ANR	38610	Decl							int	int	err_len
ANR	38611	DeclStmt									
ANR	38612	Decl							int	int	old_error_reporting
ANR	38613	DeclStmt									
ANR	38614	Decl							char	char *	name
ANR	38615	DeclStmt									
ANR	38616	Decl							int	int	name_len
ANR	38617	DeclStmt									
ANR	38618	Decl							zval	zval *	val
ANR	38619	DeclStmt									
ANR	38620	Decl							zval	zval *	val_free
ANR	38621	DeclStmt									
ANR	38622	Decl							zend_bool	zend_bool	non_cs
ANR	38623	DeclStmt									
ANR	38624	Decl							int	int	case_sensitive
ANR	38625	DeclStmt									
ANR	38626	Decl							zend_constant	zend_constant	c
ANR	38627	DeclStmt									
ANR	38628	Decl							char	char *	name
ANR	38629	DeclStmt									
ANR	38630	Decl							int	int	name_len
ANR	38631	DeclStmt									
ANR	38632	Decl							zval	zval	c
ANR	38633	DeclStmt									
ANR	38634	Decl							zval	zval *	obj
ANR	38635	DeclStmt									
ANR	38636	Decl							const char	const char *	name
ANR	38637	DeclStmt									
ANR	38638	Decl							zend_uint	zend_uint	name_len
ANR	38639	DeclStmt									
ANR	38640	Decl							int	int	dup
ANR	38641	DeclStmt									
ANR	38642	Decl							zval	zval *	arg
ANR	38643	DeclStmt									
ANR	38644	Decl							zend_class_entry	zend_class_entry *	ce
ANR	38645	DeclStmt									
ANR	38646	Decl							const char	const char *	name
ANR	38647	DeclStmt									
ANR	38648	Decl							zend_uint	zend_uint	name_length
ANR	38649	DeclStmt									
ANR	38650	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	38651	DeclStmt									
ANR	38652	Decl							zval	zval *	obj
ANR	38653	DeclStmt									
ANR	38654	Decl							char	char *	class_name
ANR	38655	DeclStmt									
ANR	38656	Decl							int	int	class_name_len
ANR	38657	DeclStmt									
ANR	38658	Decl							zend_class_entry	zend_class_entry *	instance_ce
ANR	38659	DeclStmt									
ANR	38660	Decl							zend_class_entry	zend_class_entry * *	ce
ANR	38661	DeclStmt									
ANR	38662	Decl							zend_bool	zend_bool	allow_string
ANR	38663	DeclStmt									
ANR	38664	Decl							zend_bool	zend_bool	retval
ANR	38665	DeclStmt									
ANR	38666	Decl							zend_class_entry	zend_class_entry * *	the_ce
ANR	38667	DeclStmt									
ANR	38668	Decl							HashPosition	HashPosition	pos
ANR	38669	DeclStmt									
ANR	38670	Decl							zend_property_info	zend_property_info *	prop_info
ANR	38671	DeclStmt									
ANR	38672	Decl							zval	zval *	prop
ANR	38673	Decl							zval	zval *	prop_copy
ANR	38674	DeclStmt									
ANR	38675	Decl							char	char *	key
ANR	38676	DeclStmt									
ANR	38677	Decl							uint	uint	key_len
ANR	38678	DeclStmt									
ANR	38679	Decl							ulong	ulong	num_index
ANR	38680	DeclStmt									
ANR	38681	Decl							char	char *	class_name
ANR	38682	DeclStmt									
ANR	38683	Decl							int	int	class_name_len
ANR	38684	DeclStmt									
ANR	38685	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	38686	DeclStmt									
ANR	38687	Decl							zval	zval *	obj
ANR	38688	DeclStmt									
ANR	38689	Decl							zval	zval * *	value
ANR	38690	DeclStmt									
ANR	38691	Decl							HashTable	HashTable *	properties
ANR	38692	DeclStmt									
ANR	38693	Decl							HashPosition	HashPosition	pos
ANR	38694	DeclStmt									
ANR	38695	Decl							char	char *	key
ANR	38696	DeclStmt									
ANR	38697	Decl							const char	const char *	prop_name
ANR	38698	Decl							const char	const char *	class_name
ANR	38699	DeclStmt									
ANR	38700	Decl							uint	uint	key_len
ANR	38701	Decl							uint	uint	prop_len
ANR	38702	DeclStmt									
ANR	38703	Decl							ulong	ulong	num_index
ANR	38704	DeclStmt									
ANR	38705	Decl							zend_object	zend_object *	zobj
ANR	38706	DeclStmt									
ANR	38707	Decl							char	char *	tmp
ANR	38708	Function	same_name	1038:0:29023:29231							
ANR	38709	FunctionDef	"same_name (const char * key , const char * name , zend_uint name_len)"		38708	0					
ANR	38710	CompoundStatement		1039:0:29099:29231	38708	0					
ANR	38711	IdentifierDeclStatement	"char * lcname = zend_str_tolower_dup ( name , name_len ) ;"	1040:1:29102:29153	38708	0	True				
ANR	38712	IdentifierDecl	"* lcname = zend_str_tolower_dup ( name , name_len )"		38708	0					
ANR	38713	IdentifierDeclType	char *		38708	0					
ANR	38714	Identifier	lcname		38708	1					
ANR	38715	AssignmentExpression	"* lcname = zend_str_tolower_dup ( name , name_len )"		38708	2		=			
ANR	38716	Identifier	lcname		38708	0					
ANR	38717	CallExpression	"zend_str_tolower_dup ( name , name_len )"		38708	1					
ANR	38718	Callee	zend_str_tolower_dup		38708	0					
ANR	38719	Identifier	zend_str_tolower_dup		38708	0					
ANR	38720	ArgumentList	name		38708	1					
ANR	38721	Argument	name		38708	0					
ANR	38722	Identifier	name		38708	0					
ANR	38723	Argument	name_len		38708	1					
ANR	38724	Identifier	name_len		38708	0					
ANR	38725	IdentifierDeclStatement	"int ret = memcmp ( lcname , key , name_len ) == 0 ;"	1041:1:29156:29200	38708	1	True				
ANR	38726	IdentifierDecl	"ret = memcmp ( lcname , key , name_len ) == 0"		38708	0					
ANR	38727	IdentifierDeclType	int		38708	0					
ANR	38728	Identifier	ret		38708	1					
ANR	38729	AssignmentExpression	"ret = memcmp ( lcname , key , name_len ) == 0"		38708	2		=			
ANR	38730	Identifier	ret		38708	0					
ANR	38731	EqualityExpression	"memcmp ( lcname , key , name_len ) == 0"		38708	1		==			
ANR	38732	CallExpression	"memcmp ( lcname , key , name_len )"		38708	0					
ANR	38733	Callee	memcmp		38708	0					
ANR	38734	Identifier	memcmp		38708	0					
ANR	38735	ArgumentList	lcname		38708	1					
ANR	38736	Argument	lcname		38708	0					
ANR	38737	Identifier	lcname		38708	0					
ANR	38738	Argument	key		38708	1					
ANR	38739	Identifier	key		38708	0					
ANR	38740	Argument	name_len		38708	2					
ANR	38741	Identifier	name_len		38708	0					
ANR	38742	PrimaryExpression	0		38708	1					
ANR	38743	ExpressionStatement	efree ( lcname )	1042:1:29203:29216	38708	2	True				
ANR	38744	CallExpression	efree ( lcname )		38708	0					
ANR	38745	Callee	efree		38708	0					
ANR	38746	Identifier	efree		38708	0					
ANR	38747	ArgumentList	lcname		38708	1					
ANR	38748	Argument	lcname		38708	0					
ANR	38749	Identifier	lcname		38708	0					
ANR	38750	ReturnStatement	return ret ;	1043:1:29219:29229	38708	3	True				
ANR	38751	Identifier	ret		38708	0					
ANR	38752	ReturnType	static int		38708	1					
ANR	38753	Identifier	same_name		38708	2					
ANR	38754	ParameterList	"const char * key , const char * name , zend_uint name_len"		38708	3					
ANR	38755	Parameter	const char * key	1038:21:29044:29058	38708	0	True				
ANR	38756	ParameterType	const char *		38708	0					
ANR	38757	Identifier	key		38708	1					
ANR	38758	Parameter	const char * name	1038:38:29061:29076	38708	1	True				
ANR	38759	ParameterType	const char *		38708	0					
ANR	38760	Identifier	name		38708	1					
ANR	38761	Parameter	zend_uint name_len	1038:56:29079:29096	38708	2	True				
ANR	38762	ParameterType	zend_uint		38708	0					
ANR	38763	Identifier	name_len		38708	1					
ANR	38764	CFGEntryNode	ENTRY		38708		True				
ANR	38765	CFGExitNode	EXIT		38708		True				
ANR	38766	Symbol	ret		38708						
ANR	38767	Symbol	lcname		38708						
ANR	38768	Symbol	memcmp		38708						
ANR	38769	Symbol	name		38708						
ANR	38770	Symbol	name_len		38708						
ANR	38771	Symbol	key		38708						
ANR	38772	Symbol	zend_str_tolower_dup		38708						
ANR	38773	DeclStmt									
ANR	38774	Decl							zval	zval *	klass
ANR	38775	DeclStmt									
ANR	38776	Decl							zval	zval *	method_name
ANR	38777	DeclStmt									
ANR	38778	Decl							zend_class_entry	zend_class_entry *	ce
ANR	38779	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	38780	DeclStmt									
ANR	38781	Decl							HashPosition	HashPosition	pos
ANR	38782	DeclStmt									
ANR	38783	Decl							zend_function	zend_function *	mptr
ANR	38784	DeclStmt									
ANR	38785	Decl							char	char *	key
ANR	38786	DeclStmt									
ANR	38787	Decl							uint	uint	key_len
ANR	38788	DeclStmt									
ANR	38789	Decl							ulong	ulong	num_index
ANR	38790	DeclStmt									
ANR	38791	Decl							uint	uint	len
ANR	38792	DeclStmt									
ANR	38793	Decl							zval	zval *	klass
ANR	38794	DeclStmt									
ANR	38795	Decl							char	char *	method_name
ANR	38796	DeclStmt									
ANR	38797	Decl							int	int	method_len
ANR	38798	DeclStmt									
ANR	38799	Decl							char	char *	lcname
ANR	38800	DeclStmt									
ANR	38801	Decl							zend_class_entry	zend_class_entry *	ce
ANR	38802	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	38803	DeclStmt									
ANR	38804	Decl							union _zend_function	union _zend_function *	func
ANR	38805	DeclStmt									
ANR	38806	Decl							zval	zval *	object
ANR	38807	DeclStmt									
ANR	38808	Decl							char	char *	property
ANR	38809	DeclStmt									
ANR	38810	Decl							int	int	property_len
ANR	38811	DeclStmt									
ANR	38812	Decl							zend_class_entry	zend_class_entry *	ce
ANR	38813	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	38814	DeclStmt									
ANR	38815	Decl							zend_property_info	zend_property_info *	property_info
ANR	38816	DeclStmt									
ANR	38817	Decl							zval	zval	property_z
ANR	38818	DeclStmt									
ANR	38819	Decl							ulong	ulong	h
ANR	38820	DeclStmt									
ANR	38821	Decl							char	char *	class_name
ANR	38822	Decl							char	char *	lc_name
ANR	38823	DeclStmt									
ANR	38824	Decl							zend_class_entry	zend_class_entry * *	ce
ANR	38825	DeclStmt									
ANR	38826	Decl							int	int	class_name_len
ANR	38827	DeclStmt									
ANR	38828	Decl							int	int	found
ANR	38829	DeclStmt									
ANR	38830	Decl							zend_bool	zend_bool	autoload
ANR	38831	DeclStmt									
ANR	38832	Decl							char	char *	name
ANR	38833	DeclStmt									
ANR	38834	Decl							int	int	len
ANR	38835	DeclStmt									
ANR	38836	Decl							char	char *	iface_name
ANR	38837	Decl							char	char *	lc_name
ANR	38838	DeclStmt									
ANR	38839	Decl							zend_class_entry	zend_class_entry * *	ce
ANR	38840	DeclStmt									
ANR	38841	Decl							int	int	iface_name_len
ANR	38842	DeclStmt									
ANR	38843	Decl							int	int	found
ANR	38844	DeclStmt									
ANR	38845	Decl							zend_bool	zend_bool	autoload
ANR	38846	DeclStmt									
ANR	38847	Decl							char	char *	name
ANR	38848	DeclStmt									
ANR	38849	Decl							int	int	len
ANR	38850	DeclStmt									
ANR	38851	Decl							char	char *	trait_name
ANR	38852	Decl							char	char *	lc_name
ANR	38853	DeclStmt									
ANR	38854	Decl							zend_class_entry	zend_class_entry * *	ce
ANR	38855	DeclStmt									
ANR	38856	Decl							int	int	trait_name_len
ANR	38857	DeclStmt									
ANR	38858	Decl							int	int	found
ANR	38859	DeclStmt									
ANR	38860	Decl							zend_bool	zend_bool	autoload
ANR	38861	DeclStmt									
ANR	38862	Decl							char	char *	name
ANR	38863	DeclStmt									
ANR	38864	Decl							int	int	len
ANR	38865	DeclStmt									
ANR	38866	Decl							char	char *	name
ANR	38867	DeclStmt									
ANR	38868	Decl							int	int	name_len
ANR	38869	DeclStmt									
ANR	38870	Decl							zend_function	zend_function *	func
ANR	38871	DeclStmt									
ANR	38872	Decl							char	char *	lcname
ANR	38873	DeclStmt									
ANR	38874	Decl							zend_bool	zend_bool	retval
ANR	38875	DeclStmt									
ANR	38876	Decl							char	char *	class_name
ANR	38877	Decl							char	char *	alias_name
ANR	38878	DeclStmt									
ANR	38879	Decl							zend_class_entry	zend_class_entry * *	ce
ANR	38880	DeclStmt									
ANR	38881	Decl							int	int	class_name_len
ANR	38882	Decl							int	int	alias_name_len
ANR	38883	DeclStmt									
ANR	38884	Decl							int	int	found
ANR	38885	DeclStmt									
ANR	38886	Decl							zend_bool	zend_bool	autoload
ANR	38887	DeclStmt									
ANR	38888	Decl							long	long	leakbytes
ANR	38889	DeclStmt									
ANR	38890	Decl							zval	zval *	zv
ANR	38891	DeclStmt									
ANR	38892	Decl							zend_bool	zend_bool	leak_data
ANR	38893	DeclStmt									
ANR	38894	Decl							char	char *	nowhere
ANR	38895	DeclStmt									
ANR	38896	Decl							char	char *	entry
ANR	38897	DeclStmt									
ANR	38898	Decl							uint	uint	entry_len
ANR	38899	DeclStmt									
ANR	38900	Decl							long	long	error_type
ANR	38901	DeclStmt									
ANR	38902	Decl							char	char *	message
ANR	38903	DeclStmt									
ANR	38904	Decl							int	int	message_len
ANR	38905	DeclStmt									
ANR	38906	Decl							zval	zval *	error_handler
ANR	38907	DeclStmt									
ANR	38908	Decl							char	char *	error_handler_name
ANR	38909	DeclStmt									
ANR	38910	Decl							long	long	error_type
ANR	38911	DeclStmt									
ANR	38912	Decl							zval	zval *	zeh
ANR	38913	DeclStmt									
ANR	38914	Decl							zval	zval *	exception_handler
ANR	38915	DeclStmt									
ANR	38916	Decl							char	char *	exception_handler_name
ANR	38917	DeclStmt									
ANR	38918	Decl							zval	zval *	array
ANR	38919	DeclStmt									
ANR	38920	Decl							zend_uint	zend_uint	mask
ANR	38921	DeclStmt									
ANR	38922	Decl							zend_uint	zend_uint	comply
ANR	38923	DeclStmt									
ANR	38924	Decl							zend_uint	zend_uint	comply_mask
ANR	38925	DeclStmt									
ANR	38926	Decl							zend_class_entry	zend_class_entry *	ce
ANR	38927	DeclStmt									
ANR	38928	Decl							zend_uint	zend_uint	mask
ANR	38929	DeclStmt									
ANR	38930	Decl							zend_uint	zend_uint	comply
ANR	38931	DeclStmt									
ANR	38932	Decl							zend_uint	zend_uint	mask
ANR	38933	DeclStmt									
ANR	38934	Decl							zend_uint	zend_uint	comply
ANR	38935	DeclStmt									
ANR	38936	Decl							zend_uint	zend_uint	mask
ANR	38937	DeclStmt									
ANR	38938	Decl							zend_uint	zend_uint	comply
ANR	38939	DeclStmt									
ANR	38940	Decl							zval	zval *	internal_ar
ANR	38941	Decl							zval	zval *	user_ar
ANR	38942	DeclStmt									
ANR	38943	Decl							zval	zval *	internal
ANR	38944	DeclStmt									
ANR	38945	Decl							zval	zval *	user
ANR	38946	DeclStmt									
ANR	38947	Decl							char	char *	eval_code
ANR	38948	Decl							char	char *	function_name
ANR	38949	Decl							char	char *	function_args
ANR	38950	Decl							char	char *	function_code
ANR	38951	DeclStmt									
ANR	38952	Decl							int	int	eval_code_length
ANR	38953	Decl							int	int	function_name_length
ANR	38954	Decl							int	int	function_args_len
ANR	38955	Decl							int	int	function_code_len
ANR	38956	DeclStmt									
ANR	38957	Decl							int	int	retval
ANR	38958	DeclStmt									
ANR	38959	Decl							char	char *	eval_name
ANR	38960	DeclStmt									
ANR	38961	Decl							zend_function	zend_function	new_function
ANR	38962	Decl							zend_function	zend_function *	func
ANR	38963	DeclStmt									
ANR	38964	Decl							zval	zval *	arg1
ANR	38965	Decl							zval	zval *	arg2
ANR	38966	DeclStmt									
ANR	38967	Decl							const char	const char *	resource_type
ANR	38968	DeclStmt									
ANR	38969	Decl							zval	zval *	z_resource_type
ANR	38970	DeclStmt									
ANR	38971	Decl							zval	zval *	name_array
ANR	38972	DeclStmt									
ANR	38973	Decl							zval	zval *	name_array
ANR	38974	DeclStmt									
ANR	38975	Decl							zval	zval *	name_array
ANR	38976	DeclStmt									
ANR	38977	Decl							zval	zval *	const_val
ANR	38978	DeclStmt									
ANR	38979	Decl							zend_bool	zend_bool	zendext
ANR	38980	DeclStmt									
ANR	38981	Decl							zend_bool	zend_bool	categorize
ANR	38982	DeclStmt									
ANR	38983	Decl							HashPosition	HashPosition	pos
ANR	38984	DeclStmt									
ANR	38985	Decl							zend_constant	zend_constant *	val
ANR	38986	DeclStmt									
ANR	38987	Decl							int	int	module_number
ANR	38988	DeclStmt									
ANR	38989	Decl							zval	zval * *	modules
ANR	38990	DeclStmt									
ANR	38991	Decl							char	char * *	module_names
ANR	38992	DeclStmt									
ANR	38993	Decl							zend_module_entry	zend_module_entry *	module
ANR	38994	DeclStmt									
ANR	38995	Decl							int	int	i
ANR	38996	DeclStmt									
ANR	38997	Decl							zval	zval *	const_val
ANR	38998	DeclStmt									
ANR	38999	Decl							void	void * *	p
ANR	39000	DeclStmt									
ANR	39001	Decl							zval	zval *	arg_array
ANR	39002	Decl							zval	zval * *	arg
ANR	39003	DeclStmt									
ANR	39004	Decl							int	int	arg_count
ANR	39005	DeclStmt									
ANR	39006	Decl							zval	zval * *	tmp
ANR	39007	DeclStmt									
ANR	39008	Decl							HashPosition	HashPosition	iterator
ANR	39009	DeclStmt									
ANR	39010	Decl							int	int	i
ANR	39011	DeclStmt									
ANR	39012	Decl							zend_execute_data	zend_execute_data *	ptr
ANR	39013	Decl							zend_execute_data	zend_execute_data *	skip
ANR	39014	DeclStmt									
ANR	39015	Decl							int	int	lineno
ANR	39016	Decl							int	int	frameno
ANR	39017	DeclStmt									
ANR	39018	Decl							const char	const char *	function_name
ANR	39019	DeclStmt									
ANR	39020	Decl							const char	const char *	filename
ANR	39021	DeclStmt									
ANR	39022	Decl							const char	const char *	class_name
ANR	39023	DeclStmt									
ANR	39024	Decl							char	char *	call_type
ANR	39025	DeclStmt									
ANR	39026	Decl							const char	const char *	include_filename
ANR	39027	DeclStmt									
ANR	39028	Decl							zval	zval *	arg_array
ANR	39029	DeclStmt									
ANR	39030	Decl							int	int	indent
ANR	39031	DeclStmt									
ANR	39032	Decl							long	long	options
ANR	39033	DeclStmt									
ANR	39034	Decl							long	long	limit
ANR	39035	DeclStmt									
ANR	39036	Decl							const char	const char *	free_class_name
ANR	39037	DeclStmt									
ANR	39038	Decl							zend_uint	zend_uint	class_name_len
ANR	39039	DeclStmt									
ANR	39040	Decl							int	int	dup
ANR	39041	DeclStmt									
ANR	39042	Decl							zend_bool	zend_bool	build_filename_arg
ANR	39043	DeclStmt									
ANR	39044	Decl							zend_execute_data	zend_execute_data *	prev
ANR	39045	Function	zend_fetch_debug_backtrace	2238:0:62824:68615							
ANR	39046	FunctionDef	"zend_fetch_debug_backtrace (zval * return_value , int skip_last , int options , int limit TSRMLS_DC)"		39045	0					
ANR	39047	CompoundStatement		2239:0:62934:68615	39045	0					
ANR	39048	IdentifierDeclStatement	"zend_execute_data * ptr , * skip ;"	2240:1:62937:62966	39045	0	True				
ANR	39049	IdentifierDecl	* ptr		39045	0					
ANR	39050	IdentifierDeclType	zend_execute_data *		39045	0					
ANR	39051	Identifier	ptr		39045	1					
ANR	39052	IdentifierDecl	* skip		39045	1					
ANR	39053	IdentifierDeclType	zend_execute_data *		39045	0					
ANR	39054	Identifier	skip		39045	1					
ANR	39055	IdentifierDeclStatement	"int lineno , frameno = 0 ;"	2241:1:62969:62992	39045	1	True				
ANR	39056	IdentifierDecl	lineno		39045	0					
ANR	39057	IdentifierDeclType	int		39045	0					
ANR	39058	Identifier	lineno		39045	1					
ANR	39059	IdentifierDecl	frameno = 0		39045	1					
ANR	39060	IdentifierDeclType	int		39045	0					
ANR	39061	Identifier	frameno		39045	1					
ANR	39062	AssignmentExpression	frameno = 0		39045	2		=			
ANR	39063	Identifier	frameno		39045	0					
ANR	39064	PrimaryExpression	0		39045	1					
ANR	39065	IdentifierDeclStatement	const char * function_name ;	2242:1:62995:63020	39045	2	True				
ANR	39066	IdentifierDecl	* function_name		39045	0					
ANR	39067	IdentifierDeclType	const char *		39045	0					
ANR	39068	Identifier	function_name		39045	1					
ANR	39069	IdentifierDeclStatement	const char * filename ;	2243:1:63023:63043	39045	3	True				
ANR	39070	IdentifierDecl	* filename		39045	0					
ANR	39071	IdentifierDeclType	const char *		39045	0					
ANR	39072	Identifier	filename		39045	1					
ANR	39073	IdentifierDeclStatement	const char * class_name ;	2244:1:63046:63068	39045	4	True				
ANR	39074	IdentifierDecl	* class_name		39045	0					
ANR	39075	IdentifierDeclType	const char *		39045	0					
ANR	39076	Identifier	class_name		39045	1					
ANR	39077	IdentifierDeclStatement	const char * include_filename = NULL ;	2245:1:63071:63106	39045	5	True				
ANR	39078	IdentifierDecl	* include_filename = NULL		39045	0					
ANR	39079	IdentifierDeclType	const char *		39045	0					
ANR	39080	Identifier	include_filename		39045	1					
ANR	39081	AssignmentExpression	* include_filename = NULL		39045	2		=			
ANR	39082	Identifier	NULL		39045	0					
ANR	39083	Identifier	NULL		39045	1					
ANR	39084	IdentifierDeclStatement	zval * stack_frame ;	2246:1:63109:63126	39045	6	True				
ANR	39085	IdentifierDecl	* stack_frame		39045	0					
ANR	39086	IdentifierDeclType	zval *		39045	0					
ANR	39087	Identifier	stack_frame		39045	1					
ANR	39088	ExpressionStatement	ptr = EG ( current_execute_data )	2248:1:63130:63160	39045	7	True				
ANR	39089	AssignmentExpression	ptr = EG ( current_execute_data )		39045	0		=			
ANR	39090	Identifier	ptr		39045	0					
ANR	39091	CallExpression	EG ( current_execute_data )		39045	1					
ANR	39092	Callee	EG		39045	0					
ANR	39093	Identifier	EG		39045	0					
ANR	39094	ArgumentList	current_execute_data		39045	1					
ANR	39095	Argument	current_execute_data		39045	0					
ANR	39096	Identifier	current_execute_data		39045	0					
ANR	39097	IfStatement	if ( ptr && ( skip_last == 0 ) && ptr -> opline && ( ptr -> opline -> opcode == ZEND_NEW ) )		39045	8					
ANR	39098	Condition	ptr && ( skip_last == 0 ) && ptr -> opline && ( ptr -> opline -> opcode == ZEND_NEW )	2251:5:63198:63272	39045	0	True				
ANR	39099	AndExpression	ptr && ( skip_last == 0 ) && ptr -> opline && ( ptr -> opline -> opcode == ZEND_NEW )		39045	0		&&			
ANR	39100	Identifier	ptr		39045	0					
ANR	39101	AndExpression	( skip_last == 0 ) && ptr -> opline && ( ptr -> opline -> opcode == ZEND_NEW )		39045	1		&&			
ANR	39102	EqualityExpression	skip_last == 0		39045	0		==			
ANR	39103	Identifier	skip_last		39045	0					
ANR	39104	PrimaryExpression	0		39045	1					
ANR	39105	AndExpression	ptr -> opline && ( ptr -> opline -> opcode == ZEND_NEW )		39045	1		&&			
ANR	39106	PtrMemberAccess	ptr -> opline		39045	0					
ANR	39107	Identifier	ptr		39045	0					
ANR	39108	Identifier	opline		39045	1					
ANR	39109	EqualityExpression	ptr -> opline -> opcode == ZEND_NEW		39045	1		==			
ANR	39110	PtrMemberAccess	ptr -> opline -> opcode		39045	0					
ANR	39111	PtrMemberAccess	ptr -> opline		39045	0					
ANR	39112	Identifier	ptr		39045	0					
ANR	39113	Identifier	opline		39045	1					
ANR	39114	Identifier	opcode		39045	1					
ANR	39115	Identifier	ZEND_NEW		39045	1					
ANR	39116	CompoundStatement		13:82:340:340	39045	1					
ANR	39117	ExpressionStatement	ptr = ptr -> prev_execute_data	2252:2:63279:63307	39045	0	True				
ANR	39118	AssignmentExpression	ptr = ptr -> prev_execute_data		39045	0		=			
ANR	39119	Identifier	ptr		39045	0					
ANR	39120	PtrMemberAccess	ptr -> prev_execute_data		39045	1					
ANR	39121	Identifier	ptr		39045	0					
ANR	39122	Identifier	prev_execute_data		39045	1					
ANR	39123	IfStatement	if ( skip_last -- && ptr )		39045	9					
ANR	39124	Condition	skip_last -- && ptr	2256:5:63348:63365	39045	0	True				
ANR	39125	AndExpression	skip_last -- && ptr		39045	0		&&			
ANR	39126	PostIncDecOperationExpression	skip_last --		39045	0					
ANR	39127	Identifier	skip_last		39045	0					
ANR	39128	IncDec	--		39045	1					
ANR	39129	Identifier	ptr		39045	1					
ANR	39130	CompoundStatement		18:25:433:433	39045	1					
ANR	39131	ExpressionStatement	ptr = ptr -> prev_execute_data	2257:2:63372:63400	39045	0	True				
ANR	39132	AssignmentExpression	ptr = ptr -> prev_execute_data		39045	0		=			
ANR	39133	Identifier	ptr		39045	0					
ANR	39134	PtrMemberAccess	ptr -> prev_execute_data		39045	1					
ANR	39135	Identifier	ptr		39045	0					
ANR	39136	Identifier	prev_execute_data		39045	1					
ANR	39137	ExpressionStatement	array_init ( return_value )	2260:1:63407:63431	39045	10	True				
ANR	39138	CallExpression	array_init ( return_value )		39045	0					
ANR	39139	Callee	array_init		39045	0					
ANR	39140	Identifier	array_init		39045	0					
ANR	39141	ArgumentList	return_value		39045	1					
ANR	39142	Argument	return_value		39045	0					
ANR	39143	Identifier	return_value		39045	0					
ANR	39144	WhileStatement	while ( ptr && ( limit == 0 || frameno < limit ) )		39045	11					
ANR	39145	Condition	ptr && ( limit == 0 || frameno < limit )	2262:8:63442:63479	39045	0	True				
ANR	39146	AndExpression	ptr && ( limit == 0 || frameno < limit )		39045	0		&&			
ANR	39147	Identifier	ptr		39045	0					
ANR	39148	OrExpression	limit == 0 || frameno < limit		39045	1		||			
ANR	39149	EqualityExpression	limit == 0		39045	0		==			
ANR	39150	Identifier	limit		39045	0					
ANR	39151	PrimaryExpression	0		39045	1					
ANR	39152	RelationalExpression	frameno < limit		39045	1		<			
ANR	39153	Identifier	frameno		39045	0					
ANR	39154	Identifier	limit		39045	1					
ANR	39155	CompoundStatement		24:48:547:547	39045	1					
ANR	39156	ExpressionStatement	frameno ++	2263:2:63486:63495	39045	0	True				
ANR	39157	PostIncDecOperationExpression	frameno ++		39045	0					
ANR	39158	Identifier	frameno		39045	0					
ANR	39159	IncDec	++		39045	1					
ANR	39160	ExpressionStatement	MAKE_STD_ZVAL ( stack_frame )	2264:2:63499:63525	39045	1	True				
ANR	39161	CallExpression	MAKE_STD_ZVAL ( stack_frame )		39045	0					
ANR	39162	Callee	MAKE_STD_ZVAL		39045	0					
ANR	39163	Identifier	MAKE_STD_ZVAL		39045	0					
ANR	39164	ArgumentList	stack_frame		39045	1					
ANR	39165	Argument	stack_frame		39045	0					
ANR	39166	Identifier	stack_frame		39045	0					
ANR	39167	ExpressionStatement	array_init ( stack_frame )	2265:2:63529:63552	39045	2	True				
ANR	39168	CallExpression	array_init ( stack_frame )		39045	0					
ANR	39169	Callee	array_init		39045	0					
ANR	39170	Identifier	array_init		39045	0					
ANR	39171	ArgumentList	stack_frame		39045	1					
ANR	39172	Argument	stack_frame		39045	0					
ANR	39173	Identifier	stack_frame		39045	0					
ANR	39174	ExpressionStatement	skip = ptr	2267:2:63557:63567	39045	3	True				
ANR	39175	AssignmentExpression	skip = ptr		39045	0		=			
ANR	39176	Identifier	skip		39045	0					
ANR	39177	Identifier	ptr		39045	1					
ANR	39178	IfStatement	if ( ! skip -> op_array && skip -> prev_execute_data && skip -> prev_execute_data -> opline && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL )		39045	4					
ANR	39179	Condition	! skip -> op_array && skip -> prev_execute_data && skip -> prev_execute_data -> opline && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL	2269:6:63605:63906	39045	0	True				
ANR	39180	AndExpression	! skip -> op_array && skip -> prev_execute_data && skip -> prev_execute_data -> opline && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		39045	0		&&			
ANR	39181	UnaryOperationExpression	! skip -> op_array		39045	0					
ANR	39182	UnaryOperator	!		39045	0					
ANR	39183	PtrMemberAccess	skip -> op_array		39045	1					
ANR	39184	Identifier	skip		39045	0					
ANR	39185	Identifier	op_array		39045	1					
ANR	39186	AndExpression	skip -> prev_execute_data && skip -> prev_execute_data -> opline && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		39045	1		&&			
ANR	39187	PtrMemberAccess	skip -> prev_execute_data		39045	0					
ANR	39188	Identifier	skip		39045	0					
ANR	39189	Identifier	prev_execute_data		39045	1					
ANR	39190	AndExpression	skip -> prev_execute_data -> opline && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		39045	1		&&			
ANR	39191	PtrMemberAccess	skip -> prev_execute_data -> opline		39045	0					
ANR	39192	PtrMemberAccess	skip -> prev_execute_data		39045	0					
ANR	39193	Identifier	skip		39045	0					
ANR	39194	Identifier	prev_execute_data		39045	1					
ANR	39195	Identifier	opline		39045	1					
ANR	39196	AndExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		39045	1		&&			
ANR	39197	EqualityExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL		39045	0		!=			
ANR	39198	PtrMemberAccess	skip -> prev_execute_data -> opline -> opcode		39045	0					
ANR	39199	PtrMemberAccess	skip -> prev_execute_data -> opline		39045	0					
ANR	39200	PtrMemberAccess	skip -> prev_execute_data		39045	0					
ANR	39201	Identifier	skip		39045	0					
ANR	39202	Identifier	prev_execute_data		39045	1					
ANR	39203	Identifier	opline		39045	1					
ANR	39204	Identifier	opcode		39045	1					
ANR	39205	Identifier	ZEND_DO_FCALL		39045	1					
ANR	39206	AndExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		39045	1		&&			
ANR	39207	EqualityExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME		39045	0		!=			
ANR	39208	PtrMemberAccess	skip -> prev_execute_data -> opline -> opcode		39045	0					
ANR	39209	PtrMemberAccess	skip -> prev_execute_data -> opline		39045	0					
ANR	39210	PtrMemberAccess	skip -> prev_execute_data		39045	0					
ANR	39211	Identifier	skip		39045	0					
ANR	39212	Identifier	prev_execute_data		39045	1					
ANR	39213	Identifier	opline		39045	1					
ANR	39214	Identifier	opcode		39045	1					
ANR	39215	Identifier	ZEND_DO_FCALL_BY_NAME		39045	1					
ANR	39216	EqualityExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		39045	1		!=			
ANR	39217	PtrMemberAccess	skip -> prev_execute_data -> opline -> opcode		39045	0					
ANR	39218	PtrMemberAccess	skip -> prev_execute_data -> opline		39045	0					
ANR	39219	PtrMemberAccess	skip -> prev_execute_data		39045	0					
ANR	39220	Identifier	skip		39045	0					
ANR	39221	Identifier	prev_execute_data		39045	1					
ANR	39222	Identifier	opline		39045	1					
ANR	39223	Identifier	opcode		39045	1					
ANR	39224	Identifier	ZEND_INCLUDE_OR_EVAL		39045	1					
ANR	39225	CompoundStatement		36:71:974:974	39045	1					
ANR	39226	ExpressionStatement	skip = skip -> prev_execute_data	2275:3:63914:63944	39045	0	True				
ANR	39227	AssignmentExpression	skip = skip -> prev_execute_data		39045	0		=			
ANR	39228	Identifier	skip		39045	0					
ANR	39229	PtrMemberAccess	skip -> prev_execute_data		39045	1					
ANR	39230	Identifier	skip		39045	0					
ANR	39231	Identifier	prev_execute_data		39045	1					
ANR	39232	IfStatement	if ( skip -> op_array )		39045	5					
ANR	39233	Condition	skip -> op_array	2278:6:63957:63970	39045	0	True				
ANR	39234	PtrMemberAccess	skip -> op_array		39045	0					
ANR	39235	Identifier	skip		39045	0					
ANR	39236	Identifier	op_array		39045	1					
ANR	39237	CompoundStatement		40:22:1038:1038	39045	1					
ANR	39238	ExpressionStatement	filename = skip -> op_array -> filename	2279:3:63978:64013	39045	0	True				
ANR	39239	AssignmentExpression	filename = skip -> op_array -> filename		39045	0		=			
ANR	39240	Identifier	filename		39045	0					
ANR	39241	PtrMemberAccess	skip -> op_array -> filename		39045	1					
ANR	39242	PtrMemberAccess	skip -> op_array		39045	0					
ANR	39243	Identifier	skip		39045	0					
ANR	39244	Identifier	op_array		39045	1					
ANR	39245	Identifier	filename		39045	1					
ANR	39246	ExpressionStatement	lineno = skip -> opline -> lineno	2280:3:64018:64047	39045	1	True				
ANR	39247	AssignmentExpression	lineno = skip -> opline -> lineno		39045	0		=			
ANR	39248	Identifier	lineno		39045	0					
ANR	39249	PtrMemberAccess	skip -> opline -> lineno		39045	1					
ANR	39250	PtrMemberAccess	skip -> opline		39045	0					
ANR	39251	Identifier	skip		39045	0					
ANR	39252	Identifier	opline		39045	1					
ANR	39253	Identifier	lineno		39045	1					
ANR	39254	ExpressionStatement	"add_assoc_string_ex ( stack_frame , ""file"" , sizeof ( ""file"" ) , ( char * ) filename , 1 )"	2281:3:64052:64128	39045	2	True				
ANR	39255	CallExpression	"add_assoc_string_ex ( stack_frame , ""file"" , sizeof ( ""file"" ) , ( char * ) filename , 1 )"		39045	0					
ANR	39256	Callee	add_assoc_string_ex		39045	0					
ANR	39257	Identifier	add_assoc_string_ex		39045	0					
ANR	39258	ArgumentList	stack_frame		39045	1					
ANR	39259	Argument	stack_frame		39045	0					
ANR	39260	Identifier	stack_frame		39045	0					
ANR	39261	Argument	"""file"""		39045	1					
ANR	39262	PrimaryExpression	"""file"""		39045	0					
ANR	39263	Argument	"sizeof ( ""file"" )"		39045	2					
ANR	39264	SizeofExpression	"sizeof ( ""file"" )"		39045	0					
ANR	39265	Sizeof	sizeof		39045	0					
ANR	39266	PrimaryExpression	"""file"""		39045	1					
ANR	39267	Argument	( char * ) filename		39045	3					
ANR	39268	CastExpression	( char * ) filename		39045	0					
ANR	39269	CastTarget	char *		39045	0					
ANR	39270	Identifier	filename		39045	1					
ANR	39271	Argument	1		39045	4					
ANR	39272	PrimaryExpression	1		39045	0					
ANR	39273	ExpressionStatement	"add_assoc_long_ex ( stack_frame , ""line"" , sizeof ( ""line"" ) , lineno )"	2282:3:64133:64195	39045	3	True				
ANR	39274	CallExpression	"add_assoc_long_ex ( stack_frame , ""line"" , sizeof ( ""line"" ) , lineno )"		39045	0					
ANR	39275	Callee	add_assoc_long_ex		39045	0					
ANR	39276	Identifier	add_assoc_long_ex		39045	0					
ANR	39277	ArgumentList	stack_frame		39045	1					
ANR	39278	Argument	stack_frame		39045	0					
ANR	39279	Identifier	stack_frame		39045	0					
ANR	39280	Argument	"""line"""		39045	1					
ANR	39281	PrimaryExpression	"""line"""		39045	0					
ANR	39282	Argument	"sizeof ( ""line"" )"		39045	2					
ANR	39283	SizeofExpression	"sizeof ( ""line"" )"		39045	0					
ANR	39284	Sizeof	sizeof		39045	0					
ANR	39285	PrimaryExpression	"""line"""		39045	1					
ANR	39286	Argument	lineno		39045	3					
ANR	39287	Identifier	lineno		39045	0					
ANR	39288	ElseStatement	else		39045	0					
ANR	39289	CompoundStatement		50:3:1524:1573	39045	0					
ANR	39290	IdentifierDeclStatement	zend_execute_data * prev = skip -> prev_execute_data ;	2288:3:64459:64508	39045	0	True				
ANR	39291	IdentifierDecl	* prev = skip -> prev_execute_data		39045	0					
ANR	39292	IdentifierDeclType	zend_execute_data *		39045	0					
ANR	39293	Identifier	prev		39045	1					
ANR	39294	AssignmentExpression	* prev = skip -> prev_execute_data		39045	2		=			
ANR	39295	Identifier	prev		39045	0					
ANR	39296	PtrMemberAccess	skip -> prev_execute_data		39045	1					
ANR	39297	Identifier	skip		39045	0					
ANR	39298	Identifier	prev_execute_data		39045	1					
ANR	39299	WhileStatement	while ( prev )		39045	1					
ANR	39300	Condition	prev	2290:10:64521:64524	39045	0	True				
ANR	39301	Identifier	prev		39045	0					
ANR	39302	CompoundStatement		52:16:1592:1592	39045	1					
ANR	39303	IfStatement	if ( prev -> function_state . function && prev -> function_state . function -> common . type != ZEND_USER_FUNCTION && ! ( prev -> function_state . function -> common . type == ZEND_INTERNAL_FUNCTION && ( prev -> function_state . function -> common . fn_flags & ZEND_ACC_CALL_VIA_HANDLER ) ) )		39045	0					
ANR	39304	Condition	prev -> function_state . function && prev -> function_state . function -> common . type != ZEND_USER_FUNCTION && ! ( prev -> function_state . function -> common . type == ZEND_INTERNAL_FUNCTION && ( prev -> function_state . function -> common . fn_flags & ZEND_ACC_CALL_VIA_HANDLER ) )	2291:8:64537:64804	39045	0	True				
ANR	39305	AndExpression	prev -> function_state . function && prev -> function_state . function -> common . type != ZEND_USER_FUNCTION && ! ( prev -> function_state . function -> common . type == ZEND_INTERNAL_FUNCTION && ( prev -> function_state . function -> common . fn_flags & ZEND_ACC_CALL_VIA_HANDLER ) )		39045	0		&&			
ANR	39306	MemberAccess	prev -> function_state . function		39045	0					
ANR	39307	PtrMemberAccess	prev -> function_state		39045	0					
ANR	39308	Identifier	prev		39045	0					
ANR	39309	Identifier	function_state		39045	1					
ANR	39310	Identifier	function		39045	1					
ANR	39311	AndExpression	prev -> function_state . function -> common . type != ZEND_USER_FUNCTION && ! ( prev -> function_state . function -> common . type == ZEND_INTERNAL_FUNCTION && ( prev -> function_state . function -> common . fn_flags & ZEND_ACC_CALL_VIA_HANDLER ) )		39045	1		&&			
ANR	39312	EqualityExpression	prev -> function_state . function -> common . type != ZEND_USER_FUNCTION		39045	0		!=			
ANR	39313	MemberAccess	prev -> function_state . function -> common . type		39045	0					
ANR	39314	PtrMemberAccess	prev -> function_state . function -> common		39045	0					
ANR	39315	MemberAccess	prev -> function_state . function		39045	0					
ANR	39316	PtrMemberAccess	prev -> function_state		39045	0					
ANR	39317	Identifier	prev		39045	0					
ANR	39318	Identifier	function_state		39045	1					
ANR	39319	Identifier	function		39045	1					
ANR	39320	Identifier	common		39045	1					
ANR	39321	Identifier	type		39045	1					
ANR	39322	Identifier	ZEND_USER_FUNCTION		39045	1					
ANR	39323	UnaryOperationExpression	! ( prev -> function_state . function -> common . type == ZEND_INTERNAL_FUNCTION && ( prev -> function_state . function -> common . fn_flags & ZEND_ACC_CALL_VIA_HANDLER ) )		39045	1					
ANR	39324	UnaryOperator	!		39045	0					
ANR	39325	AndExpression	prev -> function_state . function -> common . type == ZEND_INTERNAL_FUNCTION && ( prev -> function_state . function -> common . fn_flags & ZEND_ACC_CALL_VIA_HANDLER )		39045	1		&&			
ANR	39326	EqualityExpression	prev -> function_state . function -> common . type == ZEND_INTERNAL_FUNCTION		39045	0		==			
ANR	39327	MemberAccess	prev -> function_state . function -> common . type		39045	0					
ANR	39328	PtrMemberAccess	prev -> function_state . function -> common		39045	0					
ANR	39329	MemberAccess	prev -> function_state . function		39045	0					
ANR	39330	PtrMemberAccess	prev -> function_state		39045	0					
ANR	39331	Identifier	prev		39045	0					
ANR	39332	Identifier	function_state		39045	1					
ANR	39333	Identifier	function		39045	1					
ANR	39334	Identifier	common		39045	1					
ANR	39335	Identifier	type		39045	1					
ANR	39336	Identifier	ZEND_INTERNAL_FUNCTION		39045	1					
ANR	39337	BitAndExpression	prev -> function_state . function -> common . fn_flags & ZEND_ACC_CALL_VIA_HANDLER		39045	1		&			
ANR	39338	MemberAccess	prev -> function_state . function -> common . fn_flags		39045	0					
ANR	39339	PtrMemberAccess	prev -> function_state . function -> common		39045	0					
ANR	39340	MemberAccess	prev -> function_state . function		39045	0					
ANR	39341	PtrMemberAccess	prev -> function_state		39045	0					
ANR	39342	Identifier	prev		39045	0					
ANR	39343	Identifier	function_state		39045	1					
ANR	39344	Identifier	function		39045	1					
ANR	39345	Identifier	common		39045	1					
ANR	39346	Identifier	fn_flags		39045	1					
ANR	39347	Identifier	ZEND_ACC_CALL_VIA_HANDLER		39045	1					
ANR	39348	CompoundStatement		56:85:1872:1872	39045	1					
ANR	39349	BreakStatement	break ;	2295:5:64814:64819	39045	0	True				
ANR	39350	IfStatement	if ( prev -> op_array )		39045	1					
ANR	39351	Condition	prev -> op_array	2297:8:64843:64856	39045	0	True				
ANR	39352	PtrMemberAccess	prev -> op_array		39045	0					
ANR	39353	Identifier	prev		39045	0					
ANR	39354	Identifier	op_array		39045	1					
ANR	39355	CompoundStatement		59:24:1924:1924	39045	1					
ANR	39356	ExpressionStatement	"add_assoc_string_ex ( stack_frame , ""file"" , sizeof ( ""file"" ) , ( char * ) prev -> op_array -> filename , 1 )"	2298:5:64866:64958	39045	0	True				
ANR	39357	CallExpression	"add_assoc_string_ex ( stack_frame , ""file"" , sizeof ( ""file"" ) , ( char * ) prev -> op_array -> filename , 1 )"		39045	0					
ANR	39358	Callee	add_assoc_string_ex		39045	0					
ANR	39359	Identifier	add_assoc_string_ex		39045	0					
ANR	39360	ArgumentList	stack_frame		39045	1					
ANR	39361	Argument	stack_frame		39045	0					
ANR	39362	Identifier	stack_frame		39045	0					
ANR	39363	Argument	"""file"""		39045	1					
ANR	39364	PrimaryExpression	"""file"""		39045	0					
ANR	39365	Argument	"sizeof ( ""file"" )"		39045	2					
ANR	39366	SizeofExpression	"sizeof ( ""file"" )"		39045	0					
ANR	39367	Sizeof	sizeof		39045	0					
ANR	39368	PrimaryExpression	"""file"""		39045	1					
ANR	39369	Argument	( char * ) prev -> op_array -> filename		39045	3					
ANR	39370	CastExpression	( char * ) prev -> op_array -> filename		39045	0					
ANR	39371	CastTarget	char *		39045	0					
ANR	39372	PtrMemberAccess	prev -> op_array -> filename		39045	1					
ANR	39373	PtrMemberAccess	prev -> op_array		39045	0					
ANR	39374	Identifier	prev		39045	0					
ANR	39375	Identifier	op_array		39045	1					
ANR	39376	Identifier	filename		39045	1					
ANR	39377	Argument	1		39045	4					
ANR	39378	PrimaryExpression	1		39045	0					
ANR	39379	ExpressionStatement	"add_assoc_long_ex ( stack_frame , ""line"" , sizeof ( ""line"" ) , prev -> opline -> lineno )"	2299:5:64965:65041	39045	1	True				
ANR	39380	CallExpression	"add_assoc_long_ex ( stack_frame , ""line"" , sizeof ( ""line"" ) , prev -> opline -> lineno )"		39045	0					
ANR	39381	Callee	add_assoc_long_ex		39045	0					
ANR	39382	Identifier	add_assoc_long_ex		39045	0					
ANR	39383	ArgumentList	stack_frame		39045	1					
ANR	39384	Argument	stack_frame		39045	0					
ANR	39385	Identifier	stack_frame		39045	0					
ANR	39386	Argument	"""line"""		39045	1					
ANR	39387	PrimaryExpression	"""line"""		39045	0					
ANR	39388	Argument	"sizeof ( ""line"" )"		39045	2					
ANR	39389	SizeofExpression	"sizeof ( ""line"" )"		39045	0					
ANR	39390	Sizeof	sizeof		39045	0					
ANR	39391	PrimaryExpression	"""line"""		39045	1					
ANR	39392	Argument	prev -> opline -> lineno		39045	3					
ANR	39393	PtrMemberAccess	prev -> opline -> lineno		39045	0					
ANR	39394	PtrMemberAccess	prev -> opline		39045	0					
ANR	39395	Identifier	prev		39045	0					
ANR	39396	Identifier	opline		39045	1					
ANR	39397	Identifier	lineno		39045	1					
ANR	39398	BreakStatement	break ;	2300:5:65048:65053	39045	2	True				
ANR	39399	ExpressionStatement	prev = prev -> prev_execute_data	2302:4:65065:65095	39045	2	True				
ANR	39400	AssignmentExpression	prev = prev -> prev_execute_data		39045	0		=			
ANR	39401	Identifier	prev		39045	0					
ANR	39402	PtrMemberAccess	prev -> prev_execute_data		39045	1					
ANR	39403	Identifier	prev		39045	0					
ANR	39404	Identifier	prev_execute_data		39045	1					
ANR	39405	ExpressionStatement	filename = NULL	2304:3:65105:65120	39045	2	True				
ANR	39406	AssignmentExpression	filename = NULL		39045	0		=			
ANR	39407	Identifier	filename		39045	0					
ANR	39408	Identifier	NULL		39045	1					
ANR	39409	ExpressionStatement	"function_name = ( ptr -> function_state . function -> common . scope && ptr -> function_state . function -> common . scope -> trait_aliases ) ? zend_resolve_method_name ( ptr -> object ? Z_OBJCE_P ( ptr -> object ) : ptr -> function_state . function -> common . scope , ptr -> function_state . function ) : ptr -> function_state . function -> common . function_name"	2307:2:65129:65478	39045	6	True				
ANR	39410	AssignmentExpression	"function_name = ( ptr -> function_state . function -> common . scope && ptr -> function_state . function -> common . scope -> trait_aliases ) ? zend_resolve_method_name ( ptr -> object ? Z_OBJCE_P ( ptr -> object ) : ptr -> function_state . function -> common . scope , ptr -> function_state . function ) : ptr -> function_state . function -> common . function_name"		39045	0		=			
ANR	39411	Identifier	function_name		39045	0					
ANR	39412	ConditionalExpression	"( ptr -> function_state . function -> common . scope && ptr -> function_state . function -> common . scope -> trait_aliases ) ? zend_resolve_method_name ( ptr -> object ? Z_OBJCE_P ( ptr -> object ) : ptr -> function_state . function -> common . scope , ptr -> function_state . function ) : ptr -> function_state . function -> common . function_name"		39045	1					
ANR	39413	Condition	ptr -> function_state . function -> common . scope && ptr -> function_state . function -> common . scope -> trait_aliases		39045	0					
ANR	39414	AndExpression	ptr -> function_state . function -> common . scope && ptr -> function_state . function -> common . scope -> trait_aliases		39045	0		&&			
ANR	39415	MemberAccess	ptr -> function_state . function -> common . scope		39045	0					
ANR	39416	PtrMemberAccess	ptr -> function_state . function -> common		39045	0					
ANR	39417	MemberAccess	ptr -> function_state . function		39045	0					
ANR	39418	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39419	Identifier	ptr		39045	0					
ANR	39420	Identifier	function_state		39045	1					
ANR	39421	Identifier	function		39045	1					
ANR	39422	Identifier	common		39045	1					
ANR	39423	Identifier	scope		39045	1					
ANR	39424	PtrMemberAccess	ptr -> function_state . function -> common . scope -> trait_aliases		39045	1					
ANR	39425	MemberAccess	ptr -> function_state . function -> common . scope		39045	0					
ANR	39426	PtrMemberAccess	ptr -> function_state . function -> common		39045	0					
ANR	39427	MemberAccess	ptr -> function_state . function		39045	0					
ANR	39428	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39429	Identifier	ptr		39045	0					
ANR	39430	Identifier	function_state		39045	1					
ANR	39431	Identifier	function		39045	1					
ANR	39432	Identifier	common		39045	1					
ANR	39433	Identifier	scope		39045	1					
ANR	39434	Identifier	trait_aliases		39045	1					
ANR	39435	CallExpression	"zend_resolve_method_name ( ptr -> object ? Z_OBJCE_P ( ptr -> object ) : ptr -> function_state . function -> common . scope , ptr -> function_state . function )"		39045	1					
ANR	39436	Callee	zend_resolve_method_name		39045	0					
ANR	39437	Identifier	zend_resolve_method_name		39045	0					
ANR	39438	ArgumentList	ptr -> object ? Z_OBJCE_P ( ptr -> object ) : ptr -> function_state . function -> common . scope		39045	1					
ANR	39439	Argument	ptr -> object ? Z_OBJCE_P ( ptr -> object ) : ptr -> function_state . function -> common . scope		39045	0					
ANR	39440	ConditionalExpression	ptr -> object ? Z_OBJCE_P ( ptr -> object ) : ptr -> function_state . function -> common . scope		39045	0					
ANR	39441	Condition	ptr -> object		39045	0					
ANR	39442	PtrMemberAccess	ptr -> object		39045	0					
ANR	39443	Identifier	ptr		39045	0					
ANR	39444	Identifier	object		39045	1					
ANR	39445	CallExpression	Z_OBJCE_P ( ptr -> object )		39045	1					
ANR	39446	Callee	Z_OBJCE_P		39045	0					
ANR	39447	Identifier	Z_OBJCE_P		39045	0					
ANR	39448	ArgumentList	ptr -> object		39045	1					
ANR	39449	Argument	ptr -> object		39045	0					
ANR	39450	PtrMemberAccess	ptr -> object		39045	0					
ANR	39451	Identifier	ptr		39045	0					
ANR	39452	Identifier	object		39045	1					
ANR	39453	MemberAccess	ptr -> function_state . function -> common . scope		39045	2					
ANR	39454	PtrMemberAccess	ptr -> function_state . function -> common		39045	0					
ANR	39455	MemberAccess	ptr -> function_state . function		39045	0					
ANR	39456	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39457	Identifier	ptr		39045	0					
ANR	39458	Identifier	function_state		39045	1					
ANR	39459	Identifier	function		39045	1					
ANR	39460	Identifier	common		39045	1					
ANR	39461	Identifier	scope		39045	1					
ANR	39462	Argument	ptr -> function_state . function		39045	1					
ANR	39463	MemberAccess	ptr -> function_state . function		39045	0					
ANR	39464	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39465	Identifier	ptr		39045	0					
ANR	39466	Identifier	function_state		39045	1					
ANR	39467	Identifier	function		39045	1					
ANR	39468	MemberAccess	ptr -> function_state . function -> common . function_name		39045	2					
ANR	39469	PtrMemberAccess	ptr -> function_state . function -> common		39045	0					
ANR	39470	MemberAccess	ptr -> function_state . function		39045	0					
ANR	39471	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39472	Identifier	ptr		39045	0					
ANR	39473	Identifier	function_state		39045	1					
ANR	39474	Identifier	function		39045	1					
ANR	39475	Identifier	common		39045	1					
ANR	39476	Identifier	function_name		39045	1					
ANR	39477	IfStatement	if ( function_name )		39045	7					
ANR	39478	Condition	function_name	2316:6:65487:65499	39045	0	True				
ANR	39479	Identifier	function_name		39045	0					
ANR	39480	CompoundStatement		78:21:2567:2567	39045	1					
ANR	39481	ExpressionStatement	"add_assoc_string_ex ( stack_frame , ""function"" , sizeof ( ""function"" ) , ( char * ) function_name , 1 )"	2317:3:65507:65596	39045	0	True				
ANR	39482	CallExpression	"add_assoc_string_ex ( stack_frame , ""function"" , sizeof ( ""function"" ) , ( char * ) function_name , 1 )"		39045	0					
ANR	39483	Callee	add_assoc_string_ex		39045	0					
ANR	39484	Identifier	add_assoc_string_ex		39045	0					
ANR	39485	ArgumentList	stack_frame		39045	1					
ANR	39486	Argument	stack_frame		39045	0					
ANR	39487	Identifier	stack_frame		39045	0					
ANR	39488	Argument	"""function"""		39045	1					
ANR	39489	PrimaryExpression	"""function"""		39045	0					
ANR	39490	Argument	"sizeof ( ""function"" )"		39045	2					
ANR	39491	SizeofExpression	"sizeof ( ""function"" )"		39045	0					
ANR	39492	Sizeof	sizeof		39045	0					
ANR	39493	PrimaryExpression	"""function"""		39045	1					
ANR	39494	Argument	( char * ) function_name		39045	3					
ANR	39495	CastExpression	( char * ) function_name		39045	0					
ANR	39496	CastTarget	char *		39045	0					
ANR	39497	Identifier	function_name		39045	1					
ANR	39498	Argument	1		39045	4					
ANR	39499	PrimaryExpression	1		39045	0					
ANR	39500	IfStatement	if ( ptr -> object && Z_TYPE_P ( ptr -> object ) == IS_OBJECT )		39045	1					
ANR	39501	Condition	ptr -> object && Z_TYPE_P ( ptr -> object ) == IS_OBJECT	2319:7:65606:65654	39045	0	True				
ANR	39502	AndExpression	ptr -> object && Z_TYPE_P ( ptr -> object ) == IS_OBJECT		39045	0		&&			
ANR	39503	PtrMemberAccess	ptr -> object		39045	0					
ANR	39504	Identifier	ptr		39045	0					
ANR	39505	Identifier	object		39045	1					
ANR	39506	EqualityExpression	Z_TYPE_P ( ptr -> object ) == IS_OBJECT		39045	1		==			
ANR	39507	CallExpression	Z_TYPE_P ( ptr -> object )		39045	0					
ANR	39508	Callee	Z_TYPE_P		39045	0					
ANR	39509	Identifier	Z_TYPE_P		39045	0					
ANR	39510	ArgumentList	ptr -> object		39045	1					
ANR	39511	Argument	ptr -> object		39045	0					
ANR	39512	PtrMemberAccess	ptr -> object		39045	0					
ANR	39513	Identifier	ptr		39045	0					
ANR	39514	Identifier	object		39045	1					
ANR	39515	Identifier	IS_OBJECT		39045	1					
ANR	39516	CompoundStatement		81:58:2722:2722	39045	1					
ANR	39517	IfStatement	if ( ptr -> function_state . function -> common . scope )		39045	0					
ANR	39518	Condition	ptr -> function_state . function -> common . scope	2320:8:65667:65708	39045	0	True				
ANR	39519	MemberAccess	ptr -> function_state . function -> common . scope		39045	0					
ANR	39520	PtrMemberAccess	ptr -> function_state . function -> common		39045	0					
ANR	39521	MemberAccess	ptr -> function_state . function		39045	0					
ANR	39522	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39523	Identifier	ptr		39045	0					
ANR	39524	Identifier	function_state		39045	1					
ANR	39525	Identifier	function		39045	1					
ANR	39526	Identifier	common		39045	1					
ANR	39527	Identifier	scope		39045	1					
ANR	39528	CompoundStatement		82:52:2776:2776	39045	1					
ANR	39529	ExpressionStatement	"add_assoc_string_ex ( stack_frame , ""class"" , sizeof ( ""class"" ) , ( char * ) ptr -> function_state . function -> common . scope -> name , 1 )"	2321:5:65718:65836	39045	0	True				
ANR	39530	CallExpression	"add_assoc_string_ex ( stack_frame , ""class"" , sizeof ( ""class"" ) , ( char * ) ptr -> function_state . function -> common . scope -> name , 1 )"		39045	0					
ANR	39531	Callee	add_assoc_string_ex		39045	0					
ANR	39532	Identifier	add_assoc_string_ex		39045	0					
ANR	39533	ArgumentList	stack_frame		39045	1					
ANR	39534	Argument	stack_frame		39045	0					
ANR	39535	Identifier	stack_frame		39045	0					
ANR	39536	Argument	"""class"""		39045	1					
ANR	39537	PrimaryExpression	"""class"""		39045	0					
ANR	39538	Argument	"sizeof ( ""class"" )"		39045	2					
ANR	39539	SizeofExpression	"sizeof ( ""class"" )"		39045	0					
ANR	39540	Sizeof	sizeof		39045	0					
ANR	39541	PrimaryExpression	"""class"""		39045	1					
ANR	39542	Argument	( char * ) ptr -> function_state . function -> common . scope -> name		39045	3					
ANR	39543	CastExpression	( char * ) ptr -> function_state . function -> common . scope -> name		39045	0					
ANR	39544	CastTarget	char *		39045	0					
ANR	39545	PtrMemberAccess	ptr -> function_state . function -> common . scope -> name		39045	1					
ANR	39546	MemberAccess	ptr -> function_state . function -> common . scope		39045	0					
ANR	39547	PtrMemberAccess	ptr -> function_state . function -> common		39045	0					
ANR	39548	MemberAccess	ptr -> function_state . function		39045	0					
ANR	39549	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39550	Identifier	ptr		39045	0					
ANR	39551	Identifier	function_state		39045	1					
ANR	39552	Identifier	function		39045	1					
ANR	39553	Identifier	common		39045	1					
ANR	39554	Identifier	scope		39045	1					
ANR	39555	Identifier	name		39045	1					
ANR	39556	Argument	1		39045	4					
ANR	39557	PrimaryExpression	1		39045	0					
ANR	39558	ElseStatement	else		39045	0					
ANR	39559	CompoundStatement		86:5:2952:2959	39045	0					
ANR	39560	IdentifierDeclStatement	zend_uint class_name_len ;	2323:5:65856:65880	39045	0	True				
ANR	39561	IdentifierDecl	class_name_len		39045	0					
ANR	39562	IdentifierDeclType	zend_uint		39045	0					
ANR	39563	Identifier	class_name_len		39045	1					
ANR	39564	IdentifierDeclStatement	int dup ;	2324:5:65887:65894	39045	1	True				
ANR	39565	IdentifierDecl	dup		39045	0					
ANR	39566	IdentifierDeclType	int		39045	0					
ANR	39567	Identifier	dup		39045	1					
ANR	39568	Statement	dup	2326:5:65902:65904	39045	2	True				
ANR	39569	Statement	=	2326:9:65906:65906	39045	3	True				
ANR	39570	Statement	zend_get_object_classname	2326:11:65908:65932	39045	4	True				
ANR	39571	Statement	(	2326:36:65933:65933	39045	5	True				
ANR	39572	Statement	ptr	2326:37:65934:65936	39045	6	True				
ANR	39573	Statement	->	2326:40:65937:65938	39045	7	True				
ANR	39574	Statement	object	2326:42:65939:65944	39045	8	True				
ANR	39575	Statement	","	2326:48:65945:65945	39045	9	True				
ANR	39576	Statement	&	2326:50:65947:65947	39045	10	True				
ANR	39577	Statement	class_name	2326:51:65948:65957	39045	11	True				
ANR	39578	Statement	","	2326:61:65958:65958	39045	12	True				
ANR	39579	Statement	&	2326:63:65960:65960	39045	13	True				
ANR	39580	Statement	class_name_len	2326:64:65961:65974	39045	14	True				
ANR	39581	Statement	TSRMLS_CC	2326:79:65976:65984	39045	15	True				
ANR	39582	Statement	)	2326:88:65985:65985	39045	16	True				
ANR	39583	ExpressionStatement		2326:89:65986:65986	39045	17	True				
ANR	39584	ExpressionStatement	"add_assoc_string_ex ( stack_frame , ""class"" , sizeof ( ""class"" ) , ( char * ) class_name , dup )"	2327:5:65993:66075	39045	18	True				
ANR	39585	CallExpression	"add_assoc_string_ex ( stack_frame , ""class"" , sizeof ( ""class"" ) , ( char * ) class_name , dup )"		39045	0					
ANR	39586	Callee	add_assoc_string_ex		39045	0					
ANR	39587	Identifier	add_assoc_string_ex		39045	0					
ANR	39588	ArgumentList	stack_frame		39045	1					
ANR	39589	Argument	stack_frame		39045	0					
ANR	39590	Identifier	stack_frame		39045	0					
ANR	39591	Argument	"""class"""		39045	1					
ANR	39592	PrimaryExpression	"""class"""		39045	0					
ANR	39593	Argument	"sizeof ( ""class"" )"		39045	2					
ANR	39594	SizeofExpression	"sizeof ( ""class"" )"		39045	0					
ANR	39595	Sizeof	sizeof		39045	0					
ANR	39596	PrimaryExpression	"""class"""		39045	1					
ANR	39597	Argument	( char * ) class_name		39045	3					
ANR	39598	CastExpression	( char * ) class_name		39045	0					
ANR	39599	CastTarget	char *		39045	0					
ANR	39600	Identifier	class_name		39045	1					
ANR	39601	Argument	dup		39045	4					
ANR	39602	Identifier	dup		39045	0					
ANR	39603	IfStatement	if ( ( options & DEBUG_BACKTRACE_PROVIDE_OBJECT ) != 0 )		39045	1					
ANR	39604	Condition	( options & DEBUG_BACKTRACE_PROVIDE_OBJECT ) != 0	2330:8:66097:66143	39045	0	True				
ANR	39605	EqualityExpression	( options & DEBUG_BACKTRACE_PROVIDE_OBJECT ) != 0		39045	0		!=			
ANR	39606	BitAndExpression	options & DEBUG_BACKTRACE_PROVIDE_OBJECT		39045	0		&			
ANR	39607	Identifier	options		39045	0					
ANR	39608	Identifier	DEBUG_BACKTRACE_PROVIDE_OBJECT		39045	1					
ANR	39609	PrimaryExpression	0		39045	1					
ANR	39610	CompoundStatement		92:57:3211:3211	39045	1					
ANR	39611	ExpressionStatement	"add_assoc_zval_ex ( stack_frame , ""object"" , sizeof ( ""object"" ) , ptr -> object )"	2331:5:66153:66224	39045	0	True				
ANR	39612	CallExpression	"add_assoc_zval_ex ( stack_frame , ""object"" , sizeof ( ""object"" ) , ptr -> object )"		39045	0					
ANR	39613	Callee	add_assoc_zval_ex		39045	0					
ANR	39614	Identifier	add_assoc_zval_ex		39045	0					
ANR	39615	ArgumentList	stack_frame		39045	1					
ANR	39616	Argument	stack_frame		39045	0					
ANR	39617	Identifier	stack_frame		39045	0					
ANR	39618	Argument	"""object"""		39045	1					
ANR	39619	PrimaryExpression	"""object"""		39045	0					
ANR	39620	Argument	"sizeof ( ""object"" )"		39045	2					
ANR	39621	SizeofExpression	"sizeof ( ""object"" )"		39045	0					
ANR	39622	Sizeof	sizeof		39045	0					
ANR	39623	PrimaryExpression	"""object"""		39045	1					
ANR	39624	Argument	ptr -> object		39045	3					
ANR	39625	PtrMemberAccess	ptr -> object		39045	0					
ANR	39626	Identifier	ptr		39045	0					
ANR	39627	Identifier	object		39045	1					
ANR	39628	ExpressionStatement	Z_ADDREF_P ( ptr -> object )	2332:5:66231:66254	39045	1	True				
ANR	39629	CallExpression	Z_ADDREF_P ( ptr -> object )		39045	0					
ANR	39630	Callee	Z_ADDREF_P		39045	0					
ANR	39631	Identifier	Z_ADDREF_P		39045	0					
ANR	39632	ArgumentList	ptr -> object		39045	1					
ANR	39633	Argument	ptr -> object		39045	0					
ANR	39634	PtrMemberAccess	ptr -> object		39045	0					
ANR	39635	Identifier	ptr		39045	0					
ANR	39636	Identifier	object		39045	1					
ANR	39637	ExpressionStatement	"add_assoc_string_ex ( stack_frame , ""type"" , sizeof ( ""type"" ) , ""->"" , 1 )"	2335:4:66267:66332	39045	2	True				
ANR	39638	CallExpression	"add_assoc_string_ex ( stack_frame , ""type"" , sizeof ( ""type"" ) , ""->"" , 1 )"		39045	0					
ANR	39639	Callee	add_assoc_string_ex		39045	0					
ANR	39640	Identifier	add_assoc_string_ex		39045	0					
ANR	39641	ArgumentList	stack_frame		39045	1					
ANR	39642	Argument	stack_frame		39045	0					
ANR	39643	Identifier	stack_frame		39045	0					
ANR	39644	Argument	"""type"""		39045	1					
ANR	39645	PrimaryExpression	"""type"""		39045	0					
ANR	39646	Argument	"sizeof ( ""type"" )"		39045	2					
ANR	39647	SizeofExpression	"sizeof ( ""type"" )"		39045	0					
ANR	39648	Sizeof	sizeof		39045	0					
ANR	39649	PrimaryExpression	"""type"""		39045	1					
ANR	39650	Argument	"""->"""		39045	3					
ANR	39651	PrimaryExpression	"""->"""		39045	0					
ANR	39652	Argument	1		39045	4					
ANR	39653	PrimaryExpression	1		39045	0					
ANR	39654	ElseStatement	else		39045	0					
ANR	39655	IfStatement	if ( ptr -> function_state . function -> common . scope )		39045	0					
ANR	39656	Condition	ptr -> function_state . function -> common . scope	2336:14:66348:66389	39045	0	True				
ANR	39657	MemberAccess	ptr -> function_state . function -> common . scope		39045	0					
ANR	39658	PtrMemberAccess	ptr -> function_state . function -> common		39045	0					
ANR	39659	MemberAccess	ptr -> function_state . function		39045	0					
ANR	39660	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39661	Identifier	ptr		39045	0					
ANR	39662	Identifier	function_state		39045	1					
ANR	39663	Identifier	function		39045	1					
ANR	39664	Identifier	common		39045	1					
ANR	39665	Identifier	scope		39045	1					
ANR	39666	CompoundStatement		98:58:3457:3457	39045	1					
ANR	39667	ExpressionStatement	"add_assoc_string_ex ( stack_frame , ""class"" , sizeof ( ""class"" ) , ( char * ) ptr -> function_state . function -> common . scope -> name , 1 )"	2337:4:66398:66516	39045	0	True				
ANR	39668	CallExpression	"add_assoc_string_ex ( stack_frame , ""class"" , sizeof ( ""class"" ) , ( char * ) ptr -> function_state . function -> common . scope -> name , 1 )"		39045	0					
ANR	39669	Callee	add_assoc_string_ex		39045	0					
ANR	39670	Identifier	add_assoc_string_ex		39045	0					
ANR	39671	ArgumentList	stack_frame		39045	1					
ANR	39672	Argument	stack_frame		39045	0					
ANR	39673	Identifier	stack_frame		39045	0					
ANR	39674	Argument	"""class"""		39045	1					
ANR	39675	PrimaryExpression	"""class"""		39045	0					
ANR	39676	Argument	"sizeof ( ""class"" )"		39045	2					
ANR	39677	SizeofExpression	"sizeof ( ""class"" )"		39045	0					
ANR	39678	Sizeof	sizeof		39045	0					
ANR	39679	PrimaryExpression	"""class"""		39045	1					
ANR	39680	Argument	( char * ) ptr -> function_state . function -> common . scope -> name		39045	3					
ANR	39681	CastExpression	( char * ) ptr -> function_state . function -> common . scope -> name		39045	0					
ANR	39682	CastTarget	char *		39045	0					
ANR	39683	PtrMemberAccess	ptr -> function_state . function -> common . scope -> name		39045	1					
ANR	39684	MemberAccess	ptr -> function_state . function -> common . scope		39045	0					
ANR	39685	PtrMemberAccess	ptr -> function_state . function -> common		39045	0					
ANR	39686	MemberAccess	ptr -> function_state . function		39045	0					
ANR	39687	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39688	Identifier	ptr		39045	0					
ANR	39689	Identifier	function_state		39045	1					
ANR	39690	Identifier	function		39045	1					
ANR	39691	Identifier	common		39045	1					
ANR	39692	Identifier	scope		39045	1					
ANR	39693	Identifier	name		39045	1					
ANR	39694	Argument	1		39045	4					
ANR	39695	PrimaryExpression	1		39045	0					
ANR	39696	ExpressionStatement	"add_assoc_string_ex ( stack_frame , ""type"" , sizeof ( ""type"" ) , ""::"" , 1 )"	2338:4:66522:66587	39045	1	True				
ANR	39697	CallExpression	"add_assoc_string_ex ( stack_frame , ""type"" , sizeof ( ""type"" ) , ""::"" , 1 )"		39045	0					
ANR	39698	Callee	add_assoc_string_ex		39045	0					
ANR	39699	Identifier	add_assoc_string_ex		39045	0					
ANR	39700	ArgumentList	stack_frame		39045	1					
ANR	39701	Argument	stack_frame		39045	0					
ANR	39702	Identifier	stack_frame		39045	0					
ANR	39703	Argument	"""type"""		39045	1					
ANR	39704	PrimaryExpression	"""type"""		39045	0					
ANR	39705	Argument	"sizeof ( ""type"" )"		39045	2					
ANR	39706	SizeofExpression	"sizeof ( ""type"" )"		39045	0					
ANR	39707	Sizeof	sizeof		39045	0					
ANR	39708	PrimaryExpression	"""type"""		39045	1					
ANR	39709	Argument	"""::"""		39045	3					
ANR	39710	PrimaryExpression	"""::"""		39045	0					
ANR	39711	Argument	1		39045	4					
ANR	39712	PrimaryExpression	1		39045	0					
ANR	39713	IfStatement	if ( ( options & DEBUG_BACKTRACE_IGNORE_ARGS ) == 0 && ( ( ! ptr -> opline ) || ( ( ptr -> opline -> opcode == ZEND_DO_FCALL_BY_NAME ) || ( ptr -> opline -> opcode == ZEND_DO_FCALL ) ) ) )		39045	2					
ANR	39714	Condition	( options & DEBUG_BACKTRACE_IGNORE_ARGS ) == 0 && ( ( ! ptr -> opline ) || ( ( ptr -> opline -> opcode == ZEND_DO_FCALL_BY_NAME ) || ( ptr -> opline -> opcode == ZEND_DO_FCALL ) ) )	2341:7:66602:66765	39045	0	True				
ANR	39715	AndExpression	( options & DEBUG_BACKTRACE_IGNORE_ARGS ) == 0 && ( ( ! ptr -> opline ) || ( ( ptr -> opline -> opcode == ZEND_DO_FCALL_BY_NAME ) || ( ptr -> opline -> opcode == ZEND_DO_FCALL ) ) )		39045	0		&&			
ANR	39716	EqualityExpression	( options & DEBUG_BACKTRACE_IGNORE_ARGS ) == 0		39045	0		==			
ANR	39717	BitAndExpression	options & DEBUG_BACKTRACE_IGNORE_ARGS		39045	0		&			
ANR	39718	Identifier	options		39045	0					
ANR	39719	Identifier	DEBUG_BACKTRACE_IGNORE_ARGS		39045	1					
ANR	39720	PrimaryExpression	0		39045	1					
ANR	39721	OrExpression	( ! ptr -> opline ) || ( ( ptr -> opline -> opcode == ZEND_DO_FCALL_BY_NAME ) || ( ptr -> opline -> opcode == ZEND_DO_FCALL ) )		39045	1		||			
ANR	39722	UnaryOperationExpression	! ptr -> opline		39045	0					
ANR	39723	UnaryOperator	!		39045	0					
ANR	39724	PtrMemberAccess	ptr -> opline		39045	1					
ANR	39725	Identifier	ptr		39045	0					
ANR	39726	Identifier	opline		39045	1					
ANR	39727	OrExpression	( ptr -> opline -> opcode == ZEND_DO_FCALL_BY_NAME ) || ( ptr -> opline -> opcode == ZEND_DO_FCALL )		39045	1		||			
ANR	39728	EqualityExpression	ptr -> opline -> opcode == ZEND_DO_FCALL_BY_NAME		39045	0		==			
ANR	39729	PtrMemberAccess	ptr -> opline -> opcode		39045	0					
ANR	39730	PtrMemberAccess	ptr -> opline		39045	0					
ANR	39731	Identifier	ptr		39045	0					
ANR	39732	Identifier	opline		39045	1					
ANR	39733	Identifier	opcode		39045	1					
ANR	39734	Identifier	ZEND_DO_FCALL_BY_NAME		39045	1					
ANR	39735	EqualityExpression	ptr -> opline -> opcode == ZEND_DO_FCALL		39045	1		==			
ANR	39736	PtrMemberAccess	ptr -> opline -> opcode		39045	0					
ANR	39737	PtrMemberAccess	ptr -> opline		39045	0					
ANR	39738	Identifier	ptr		39045	0					
ANR	39739	Identifier	opline		39045	1					
ANR	39740	Identifier	opcode		39045	1					
ANR	39741	Identifier	ZEND_DO_FCALL		39045	1					
ANR	39742	CompoundStatement		104:117:3833:3833	39045	1					
ANR	39743	IfStatement	if ( ptr -> function_state . arguments )		39045	0					
ANR	39744	Condition	ptr -> function_state . arguments	2343:8:66778:66806	39045	0	True				
ANR	39745	MemberAccess	ptr -> function_state . arguments		39045	0					
ANR	39746	PtrMemberAccess	ptr -> function_state		39045	0					
ANR	39747	Identifier	ptr		39045	0					
ANR	39748	Identifier	function_state		39045	1					
ANR	39749	Identifier	arguments		39045	1					
ANR	39750	CompoundStatement		105:39:3874:3874	39045	1					
ANR	39751	Statement	add_assoc_zval_ex	2344:5:66816:66832	39045	0	True				
ANR	39752	Statement	(	2344:22:66833:66833	39045	1	True				
ANR	39753	Statement	stack_frame	2344:23:66834:66844	39045	2	True				
ANR	39754	Statement	","	2344:34:66845:66845	39045	3	True				
ANR	39755	Statement	"""args"""	2344:36:66847:66852	39045	4	True				
ANR	39756	Statement	","	2344:42:66853:66853	39045	5	True				
ANR	39757	Statement	sizeof	2344:44:66855:66860	39045	6	True				
ANR	39758	Statement	(	2344:50:66861:66861	39045	7	True				
ANR	39759	Statement	"""args"""	2344:51:66862:66867	39045	8	True				
ANR	39760	Statement	)	2344:57:66868:66868	39045	9	True				
ANR	39761	Statement	","	2344:58:66869:66869	39045	10	True				
ANR	39762	Statement	debug_backtrace_get_args	2344:60:66871:66894	39045	11	True				
ANR	39763	Statement	(	2344:84:66895:66895	39045	12	True				
ANR	39764	Statement	ptr	2344:85:66896:66898	39045	13	True				
ANR	39765	Statement	->	2344:88:66899:66900	39045	14	True				
ANR	39766	Statement	function_state	2344:90:66901:66914	39045	15	True				
ANR	39767	Statement	.	2344:104:66915:66915	39045	16	True				
ANR	39768	Statement	arguments	2344:105:66916:66924	39045	17	True				
ANR	39769	Statement	TSRMLS_CC	2344:115:66926:66934	39045	18	True				
ANR	39770	Statement	)	2344:124:66935:66935	39045	19	True				
ANR	39771	Statement	)	2344:125:66936:66936	39045	20	True				
ANR	39772	ExpressionStatement		2344:126:66937:66937	39045	21	True				
ANR	39773	ElseStatement	else		39045	0					
ANR	39774	CompoundStatement		111:3:4129:4161	39045	0					
ANR	39775	IdentifierDeclStatement	zend_bool build_filename_arg = 1 ;	2349:3:67064:67096	39045	0	True				
ANR	39776	IdentifierDecl	build_filename_arg = 1		39045	0					
ANR	39777	IdentifierDeclType	zend_bool		39045	0					
ANR	39778	Identifier	build_filename_arg		39045	1					
ANR	39779	AssignmentExpression	build_filename_arg = 1		39045	2		=			
ANR	39780	Identifier	build_filename_arg		39045	0					
ANR	39781	PrimaryExpression	1		39045	1					
ANR	39782	IfStatement	if ( ! ptr -> opline || ptr -> opline -> opcode != ZEND_INCLUDE_OR_EVAL )		39045	1					
ANR	39783	Condition	! ptr -> opline || ptr -> opline -> opcode != ZEND_INCLUDE_OR_EVAL	2351:7:67106:67164	39045	0	True				
ANR	39784	OrExpression	! ptr -> opline || ptr -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		39045	0		||			
ANR	39785	UnaryOperationExpression	! ptr -> opline		39045	0					
ANR	39786	UnaryOperator	!		39045	0					
ANR	39787	PtrMemberAccess	ptr -> opline		39045	1					
ANR	39788	Identifier	ptr		39045	0					
ANR	39789	Identifier	opline		39045	1					
ANR	39790	EqualityExpression	ptr -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		39045	1		!=			
ANR	39791	PtrMemberAccess	ptr -> opline -> opcode		39045	0					
ANR	39792	PtrMemberAccess	ptr -> opline		39045	0					
ANR	39793	Identifier	ptr		39045	0					
ANR	39794	Identifier	opline		39045	1					
ANR	39795	Identifier	opcode		39045	1					
ANR	39796	Identifier	ZEND_INCLUDE_OR_EVAL		39045	1					
ANR	39797	CompoundStatement		113:68:4232:4232	39045	1					
ANR	39798	ExpressionStatement	"function_name = ""unknown"""	2353:4:67231:67256	39045	0	True				
ANR	39799	AssignmentExpression	"function_name = ""unknown"""		39045	0		=			
ANR	39800	Identifier	function_name		39045	0					
ANR	39801	PrimaryExpression	"""unknown"""		39045	1					
ANR	39802	ExpressionStatement	build_filename_arg = 0	2354:4:67262:67284	39045	1	True				
ANR	39803	AssignmentExpression	build_filename_arg = 0		39045	0		=			
ANR	39804	Identifier	build_filename_arg		39045	0					
ANR	39805	PrimaryExpression	0		39045	1					
ANR	39806	ElseStatement	else		39045	0					
ANR	39807	SwitchStatement	switch ( ptr -> opline -> extended_value )		39045	0					
ANR	39808	Condition	ptr -> opline -> extended_value	2356:11:67307:67333	39045	0	True				
ANR	39809	PtrMemberAccess	ptr -> opline -> extended_value		39045	0					
ANR	39810	PtrMemberAccess	ptr -> opline		39045	0					
ANR	39811	Identifier	ptr		39045	0					
ANR	39812	Identifier	opline		39045	1					
ANR	39813	Identifier	extended_value		39045	1					
ANR	39814	CompoundStatement		118:40:4401:4401	39045	1					
ANR	39815	Label	case ZEND_EVAL :	2357:4:67342:67356	39045	0	True				
ANR	39816	Identifier	ZEND_EVAL		39045	0					
ANR	39817	ExpressionStatement	"function_name = ""eval"""	2358:5:67363:67385	39045	1	True				
ANR	39818	AssignmentExpression	"function_name = ""eval"""		39045	0		=			
ANR	39819	Identifier	function_name		39045	0					
ANR	39820	PrimaryExpression	"""eval"""		39045	1					
ANR	39821	ExpressionStatement	build_filename_arg = 0	2359:5:67392:67414	39045	2	True				
ANR	39822	AssignmentExpression	build_filename_arg = 0		39045	0		=			
ANR	39823	Identifier	build_filename_arg		39045	0					
ANR	39824	PrimaryExpression	0		39045	1					
ANR	39825	BreakStatement	break ;	2360:5:67421:67426	39045	3	True				
ANR	39826	Label	case ZEND_INCLUDE :	2361:4:67432:67449	39045	4	True				
ANR	39827	Identifier	ZEND_INCLUDE		39045	0					
ANR	39828	ExpressionStatement	"function_name = ""include"""	2362:5:67456:67481	39045	5	True				
ANR	39829	AssignmentExpression	"function_name = ""include"""		39045	0		=			
ANR	39830	Identifier	function_name		39045	0					
ANR	39831	PrimaryExpression	"""include"""		39045	1					
ANR	39832	BreakStatement	break ;	2363:5:67488:67493	39045	6	True				
ANR	39833	Label	case ZEND_REQUIRE :	2364:4:67499:67516	39045	7	True				
ANR	39834	Identifier	ZEND_REQUIRE		39045	0					
ANR	39835	ExpressionStatement	"function_name = ""require"""	2365:5:67523:67548	39045	8	True				
ANR	39836	AssignmentExpression	"function_name = ""require"""		39045	0		=			
ANR	39837	Identifier	function_name		39045	0					
ANR	39838	PrimaryExpression	"""require"""		39045	1					
ANR	39839	BreakStatement	break ;	2366:5:67555:67560	39045	9	True				
ANR	39840	Label	case ZEND_INCLUDE_ONCE :	2367:4:67566:67588	39045	10	True				
ANR	39841	Identifier	ZEND_INCLUDE_ONCE		39045	0					
ANR	39842	ExpressionStatement	"function_name = ""include_once"""	2368:5:67595:67625	39045	11	True				
ANR	39843	AssignmentExpression	"function_name = ""include_once"""		39045	0		=			
ANR	39844	Identifier	function_name		39045	0					
ANR	39845	PrimaryExpression	"""include_once"""		39045	1					
ANR	39846	BreakStatement	break ;	2369:5:67632:67637	39045	12	True				
ANR	39847	Label	case ZEND_REQUIRE_ONCE :	2370:4:67643:67665	39045	13	True				
ANR	39848	Identifier	ZEND_REQUIRE_ONCE		39045	0					
ANR	39849	ExpressionStatement	"function_name = ""require_once"""	2371:5:67672:67702	39045	14	True				
ANR	39850	AssignmentExpression	"function_name = ""require_once"""		39045	0		=			
ANR	39851	Identifier	function_name		39045	0					
ANR	39852	PrimaryExpression	"""require_once"""		39045	1					
ANR	39853	BreakStatement	break ;	2372:5:67709:67714	39045	15	True				
ANR	39854	Label	default :	2373:4:67720:67727	39045	16	True				
ANR	39855	Identifier	default		39045	0					
ANR	39856	ExpressionStatement	"function_name = ""unknown"""	2376:5:67858:67883	39045	17	True				
ANR	39857	AssignmentExpression	"function_name = ""unknown"""		39045	0		=			
ANR	39858	Identifier	function_name		39045	0					
ANR	39859	PrimaryExpression	"""unknown"""		39045	1					
ANR	39860	ExpressionStatement	build_filename_arg = 0	2377:5:67891:67913	39045	18	True				
ANR	39861	AssignmentExpression	build_filename_arg = 0		39045	0		=			
ANR	39862	Identifier	build_filename_arg		39045	0					
ANR	39863	PrimaryExpression	0		39045	1					
ANR	39864	BreakStatement	break ;	2378:5:67920:67925	39045	19	True				
ANR	39865	IfStatement	if ( build_filename_arg && include_filename )		39045	2					
ANR	39866	Condition	build_filename_arg && include_filename	2381:7:67940:67977	39045	0	True				
ANR	39867	AndExpression	build_filename_arg && include_filename		39045	0		&&			
ANR	39868	Identifier	build_filename_arg		39045	0					
ANR	39869	Identifier	include_filename		39045	1					
ANR	39870	CompoundStatement		144:4:5051:5066	39045	1					
ANR	39871	IdentifierDeclStatement	zval * arg_array ;	2382:4:67986:68001	39045	0	True				
ANR	39872	IdentifierDecl	* arg_array		39045	0					
ANR	39873	IdentifierDeclType	zval *		39045	0					
ANR	39874	Identifier	arg_array		39045	1					
ANR	39875	ExpressionStatement	MAKE_STD_ZVAL ( arg_array )	2384:4:68008:68032	39045	1	True				
ANR	39876	CallExpression	MAKE_STD_ZVAL ( arg_array )		39045	0					
ANR	39877	Callee	MAKE_STD_ZVAL		39045	0					
ANR	39878	Identifier	MAKE_STD_ZVAL		39045	0					
ANR	39879	ArgumentList	arg_array		39045	1					
ANR	39880	Argument	arg_array		39045	0					
ANR	39881	Identifier	arg_array		39045	0					
ANR	39882	ExpressionStatement	array_init ( arg_array )	2385:4:68038:68059	39045	2	True				
ANR	39883	CallExpression	array_init ( arg_array )		39045	0					
ANR	39884	Callee	array_init		39045	0					
ANR	39885	Identifier	array_init		39045	0					
ANR	39886	ArgumentList	arg_array		39045	1					
ANR	39887	Argument	arg_array		39045	0					
ANR	39888	Identifier	arg_array		39045	0					
ANR	39889	ExpressionStatement	"add_next_index_string ( arg_array , ( char * ) include_filename , 1 )"	2391:4:68257:68317	39045	3	True				
ANR	39890	CallExpression	"add_next_index_string ( arg_array , ( char * ) include_filename , 1 )"		39045	0					
ANR	39891	Callee	add_next_index_string		39045	0					
ANR	39892	Identifier	add_next_index_string		39045	0					
ANR	39893	ArgumentList	arg_array		39045	1					
ANR	39894	Argument	arg_array		39045	0					
ANR	39895	Identifier	arg_array		39045	0					
ANR	39896	Argument	( char * ) include_filename		39045	1					
ANR	39897	CastExpression	( char * ) include_filename		39045	0					
ANR	39898	CastTarget	char *		39045	0					
ANR	39899	Identifier	include_filename		39045	1					
ANR	39900	Argument	1		39045	2					
ANR	39901	PrimaryExpression	1		39045	0					
ANR	39902	ExpressionStatement	"add_assoc_zval_ex ( stack_frame , ""args"" , sizeof ( ""args"" ) , arg_array )"	2392:4:68323:68388	39045	4	True				
ANR	39903	CallExpression	"add_assoc_zval_ex ( stack_frame , ""args"" , sizeof ( ""args"" ) , arg_array )"		39045	0					
ANR	39904	Callee	add_assoc_zval_ex		39045	0					
ANR	39905	Identifier	add_assoc_zval_ex		39045	0					
ANR	39906	ArgumentList	stack_frame		39045	1					
ANR	39907	Argument	stack_frame		39045	0					
ANR	39908	Identifier	stack_frame		39045	0					
ANR	39909	Argument	"""args"""		39045	1					
ANR	39910	PrimaryExpression	"""args"""		39045	0					
ANR	39911	Argument	"sizeof ( ""args"" )"		39045	2					
ANR	39912	SizeofExpression	"sizeof ( ""args"" )"		39045	0					
ANR	39913	Sizeof	sizeof		39045	0					
ANR	39914	PrimaryExpression	"""args"""		39045	1					
ANR	39915	Argument	arg_array		39045	3					
ANR	39916	Identifier	arg_array		39045	0					
ANR	39917	ExpressionStatement	"add_assoc_string_ex ( stack_frame , ""function"" , sizeof ( ""function"" ) , ( char * ) function_name , 1 )"	2395:3:68399:68488	39045	3	True				
ANR	39918	CallExpression	"add_assoc_string_ex ( stack_frame , ""function"" , sizeof ( ""function"" ) , ( char * ) function_name , 1 )"		39045	0					
ANR	39919	Callee	add_assoc_string_ex		39045	0					
ANR	39920	Identifier	add_assoc_string_ex		39045	0					
ANR	39921	ArgumentList	stack_frame		39045	1					
ANR	39922	Argument	stack_frame		39045	0					
ANR	39923	Identifier	stack_frame		39045	0					
ANR	39924	Argument	"""function"""		39045	1					
ANR	39925	PrimaryExpression	"""function"""		39045	0					
ANR	39926	Argument	"sizeof ( ""function"" )"		39045	2					
ANR	39927	SizeofExpression	"sizeof ( ""function"" )"		39045	0					
ANR	39928	Sizeof	sizeof		39045	0					
ANR	39929	PrimaryExpression	"""function"""		39045	1					
ANR	39930	Argument	( char * ) function_name		39045	3					
ANR	39931	CastExpression	( char * ) function_name		39045	0					
ANR	39932	CastTarget	char *		39045	0					
ANR	39933	Identifier	function_name		39045	1					
ANR	39934	Argument	1		39045	4					
ANR	39935	PrimaryExpression	1		39045	0					
ANR	39936	ExpressionStatement	"add_next_index_zval ( return_value , stack_frame )"	2398:2:68497:68543	39045	8	True				
ANR	39937	CallExpression	"add_next_index_zval ( return_value , stack_frame )"		39045	0					
ANR	39938	Callee	add_next_index_zval		39045	0					
ANR	39939	Identifier	add_next_index_zval		39045	0					
ANR	39940	ArgumentList	return_value		39045	1					
ANR	39941	Argument	return_value		39045	0					
ANR	39942	Identifier	return_value		39045	0					
ANR	39943	Argument	stack_frame		39045	1					
ANR	39944	Identifier	stack_frame		39045	0					
ANR	39945	ExpressionStatement	include_filename = filename	2400:2:68548:68575	39045	9	True				
ANR	39946	AssignmentExpression	include_filename = filename		39045	0		=			
ANR	39947	Identifier	include_filename		39045	0					
ANR	39948	Identifier	filename		39045	1					
ANR	39949	ExpressionStatement	ptr = skip -> prev_execute_data	2402:2:68581:68610	39045	10	True				
ANR	39950	AssignmentExpression	ptr = skip -> prev_execute_data		39045	0		=			
ANR	39951	Identifier	ptr		39045	0					
ANR	39952	PtrMemberAccess	skip -> prev_execute_data		39045	1					
ANR	39953	Identifier	skip		39045	0					
ANR	39954	Identifier	prev_execute_data		39045	1					
ANR	39955	ReturnType	ZEND_API void		39045	1					
ANR	39956	Identifier	zend_fetch_debug_backtrace		39045	2					
ANR	39957	ParameterList	"zval * return_value , int skip_last , int options , int limit TSRMLS_DC"		39045	3					
ANR	39958	Parameter	zval * return_value	2238:41:62865:62882	39045	0	True				
ANR	39959	ParameterType	zval *		39045	0					
ANR	39960	Identifier	return_value		39045	1					
ANR	39961	Parameter	int skip_last	2238:61:62885:62897	39045	1	True				
ANR	39962	ParameterType	int		39045	0					
ANR	39963	Identifier	skip_last		39045	1					
ANR	39964	Parameter	int options	2238:76:62900:62910	39045	2	True				
ANR	39965	ParameterType	int		39045	0					
ANR	39966	Identifier	options		39045	1					
ANR	39967	Parameter	int limit TSRMLS_DC	2238:89:62913:62931	39045	3	True				
ANR	39968	ParameterType	int limit		39045	0					
ANR	39969	Identifier	TSRMLS_DC		39045	1					
ANR	39970	CFGEntryNode	ENTRY		39045		True				
ANR	39971	CFGExitNode	EXIT		39045		True				
ANR	39972	Symbol	* skip -> opline		39045						
ANR	39973	Symbol	prev -> function_state . function -> common . type		39045						
ANR	39974	Symbol	skip_last		39045						
ANR	39975	Symbol	ptr -> opline		39045						
ANR	39976	Symbol	ZEND_DO_FCALL_BY_NAME		39045						
ANR	39977	Symbol	* ptr -> function_state . function -> common . scope		39045						
ANR	39978	Symbol	current_execute_data		39045						
ANR	39979	Symbol	prev		39045						
ANR	39980	Symbol	* prev -> op_array		39045						
ANR	39981	Symbol	ptr -> function_state		39045						
ANR	39982	Symbol	* ptr -> function_state . function -> common		39045						
ANR	39983	Symbol	TSRMLS_DC		39045						
ANR	39984	Symbol	zend_resolve_method_name		39045						
ANR	39985	Symbol	* prev -> function_state . function		39045						
ANR	39986	Symbol	ZEND_INTERNAL_FUNCTION		39045						
ANR	39987	Symbol	* skip		39045						
ANR	39988	Symbol	* * ptr -> function_state		39045						
ANR	39989	Symbol	ZEND_USER_FUNCTION		39045						
ANR	39990	Symbol	options		39045						
ANR	39991	Symbol	* ptr		39045						
ANR	39992	Symbol	limit		39045						
ANR	39993	Symbol	skip -> op_array -> filename		39045						
ANR	39994	Symbol	ptr -> function_state . function		39045						
ANR	39995	Symbol	frameno		39045						
ANR	39996	Symbol	EG		39045						
ANR	39997	Symbol	skip -> op_array		39045						
ANR	39998	Symbol	NULL		39045						
ANR	39999	Symbol	ptr -> function_state . function -> common . scope -> name		39045						
ANR	40000	Symbol	build_filename_arg		39045						
ANR	40001	Symbol	* prev -> function_state		39045						
ANR	40002	Symbol	* prev -> opline		39045						
ANR	40003	Symbol	* * ptr -> function_state . function		39045						
ANR	40004	Symbol	* * * ptr		39045						
ANR	40005	Symbol	prev -> op_array		39045						
ANR	40006	Symbol	prev -> function_state . function		39045						
ANR	40007	Symbol	ptr -> prev_execute_data		39045						
ANR	40008	Symbol	prev -> function_state . function -> common . fn_flags		39045						
ANR	40009	Symbol	filename		39045						
ANR	40010	Symbol	* skip -> prev_execute_data -> opline		39045						
ANR	40011	Symbol	ZEND_DO_FCALL		39045						
ANR	40012	Symbol	prev -> opline -> lineno		39045						
ANR	40013	Symbol	skip -> prev_execute_data -> opline		39045						
ANR	40014	Symbol	* * skip		39045						
ANR	40015	Symbol	ptr -> function_state . function -> common . function_name		39045						
ANR	40016	Symbol	* skip -> prev_execute_data		39045						
ANR	40017	Symbol	skip -> prev_execute_data		39045						
ANR	40018	Symbol	skip -> opline -> lineno		39045						
ANR	40019	Symbol	ptr -> function_state . arguments		39045						
ANR	40020	Symbol	return_value		39045						
ANR	40021	Symbol	* * ptr		39045						
ANR	40022	Symbol	* * skip -> prev_execute_data		39045						
ANR	40023	Symbol	* * prev		39045						
ANR	40024	Symbol	skip		39045						
ANR	40025	Symbol	* prev		39045						
ANR	40026	Symbol	arg_array		39045						
ANR	40027	Symbol	* ptr -> opline		39045						
ANR	40028	Symbol	ptr -> function_state . function -> common . scope -> trait_aliases		39045						
ANR	40029	Symbol	* * * skip		39045						
ANR	40030	Symbol	prev -> op_array -> filename		39045						
ANR	40031	Symbol	Z_OBJCE_P		39045						
ANR	40032	Symbol	stack_frame		39045						
ANR	40033	Symbol	prev -> opline		39045						
ANR	40034	Symbol	ZEND_INCLUDE_OR_EVAL		39045						
ANR	40035	Symbol	prev -> function_state . function -> common		39045						
ANR	40036	Symbol	ptr -> opline -> extended_value		39045						
ANR	40037	Symbol	prev -> prev_execute_data		39045						
ANR	40038	Symbol	class_name		39045						
ANR	40039	Symbol	ZEND_NEW		39045						
ANR	40040	Symbol	skip -> opline		39045						
ANR	40041	Symbol	ptr -> opline -> opcode		39045						
ANR	40042	Symbol	* skip -> op_array		39045						
ANR	40043	Symbol	skip -> prev_execute_data -> opline -> opcode		39045						
ANR	40044	Symbol	DEBUG_BACKTRACE_PROVIDE_OBJECT		39045						
ANR	40045	Symbol	Z_TYPE_P		39045						
ANR	40046	Symbol	ptr		39045						
ANR	40047	Symbol	lineno		39045						
ANR	40048	Symbol	ptr -> object		39045						
ANR	40049	Symbol	DEBUG_BACKTRACE_IGNORE_ARGS		39045						
ANR	40050	Symbol	* ptr -> function_state . function		39045						
ANR	40051	Symbol	function_name		39045						
ANR	40052	Symbol	* ptr -> function_state		39045						
ANR	40053	Symbol	ptr -> function_state . function -> common . scope		39045						
ANR	40054	Symbol	IS_OBJECT		39045						
ANR	40055	Symbol	class_name_len		39045						
ANR	40056	Symbol	prev -> function_state		39045						
ANR	40057	Symbol	include_filename		39045						
ANR	40058	Symbol	dup		39045						
ANR	40059	Symbol	ZEND_ACC_CALL_VIA_HANDLER		39045						
ANR	40060	Symbol	ptr -> function_state . function -> common		39045						
ANR	40061	DeclStmt									
ANR	40062	Decl							long	long	options
ANR	40063	DeclStmt									
ANR	40064	Decl							long	long	limit
ANR	40065	DeclStmt									
ANR	40066	Decl							char	char *	extension_name
ANR	40067	DeclStmt									
ANR	40068	Decl							int	int	extension_name_len
ANR	40069	DeclStmt									
ANR	40070	Decl							char	char *	lcname
ANR	40071	DeclStmt									
ANR	40072	Decl							char	char *	extension_name
ANR	40073	Decl							char	char *	lcname
ANR	40074	DeclStmt									
ANR	40075	Decl							int	int	extension_name_len
ANR	40076	Decl							int	int	array
ANR	40077	DeclStmt									
ANR	40078	Decl							zend_module_entry	zend_module_entry *	module
ANR	40079	DeclStmt									
ANR	40080	Decl							HashPosition	HashPosition	iterator
ANR	40081	DeclStmt									
ANR	40082	Decl							zend_function	zend_function *	zif
