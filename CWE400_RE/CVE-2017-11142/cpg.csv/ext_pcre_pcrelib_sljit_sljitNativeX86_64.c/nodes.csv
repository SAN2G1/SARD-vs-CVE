command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1125426	File	data/converged/CVE-2017-11142_php-src/ext_pcre_pcrelib_sljit_sljitNativeX86_64.c								
ANR	1125427	Function	emit_load_imm64	29:0:1499:1876							
ANR	1125428	FunctionDef	"emit_load_imm64 (struct sljit_compiler * compiler , sljit_si reg , sljit_sw imm)"		1125427	0					
ANR	1125429	CompoundStatement		30:0:1592:1876	1125427	0					
ANR	1125430	IdentifierDeclStatement	sljit_ub * inst ;	31:1:1595:1609	1125427	0	True				
ANR	1125431	IdentifierDecl	* inst		1125427	0					
ANR	1125432	IdentifierDeclType	sljit_ub *		1125427	0					
ANR	1125433	Identifier	inst		1125427	1					
ANR	1125434	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + sizeof ( sljit_sw ) )"	33:1:1613:1677	1125427	1	True				
ANR	1125435	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + sizeof ( sljit_sw ) )"		1125427	0		=			
ANR	1125436	Identifier	inst		1125427	0					
ANR	1125437	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + sizeof ( sljit_sw ) )"		1125427	1					
ANR	1125438	CastTarget	sljit_ub *		1125427	0					
ANR	1125439	CallExpression	"ensure_buf ( compiler , 1 + 2 + sizeof ( sljit_sw ) )"		1125427	1					
ANR	1125440	Callee	ensure_buf		1125427	0					
ANR	1125441	Identifier	ensure_buf		1125427	0					
ANR	1125442	ArgumentList	compiler		1125427	1					
ANR	1125443	Argument	compiler		1125427	0					
ANR	1125444	Identifier	compiler		1125427	0					
ANR	1125445	Argument	1 + 2 + sizeof ( sljit_sw )		1125427	1					
ANR	1125446	AdditiveExpression	1 + 2 + sizeof ( sljit_sw )		1125427	0		+			
ANR	1125447	PrimaryExpression	1		1125427	0					
ANR	1125448	AdditiveExpression	2 + sizeof ( sljit_sw )		1125427	1		+			
ANR	1125449	PrimaryExpression	2		1125427	0					
ANR	1125450	SizeofExpression	sizeof ( sljit_sw )		1125427	1					
ANR	1125451	Sizeof	sizeof		1125427	0					
ANR	1125452	SizeofOperand	sljit_sw		1125427	1					
ANR	1125453	ExpressionStatement	FAIL_IF ( ! inst )	34:1:1680:1694	1125427	2	True				
ANR	1125454	CallExpression	FAIL_IF ( ! inst )		1125427	0					
ANR	1125455	Callee	FAIL_IF		1125427	0					
ANR	1125456	Identifier	FAIL_IF		1125427	0					
ANR	1125457	ArgumentList	! inst		1125427	1					
ANR	1125458	Argument	! inst		1125427	0					
ANR	1125459	UnaryOperationExpression	! inst		1125427	0					
ANR	1125460	UnaryOperator	!		1125427	0					
ANR	1125461	Identifier	inst		1125427	1					
ANR	1125462	ExpressionStatement	INC_SIZE ( 2 + sizeof ( sljit_sw ) )	35:1:1697:1727	1125427	3	True				
ANR	1125463	CallExpression	INC_SIZE ( 2 + sizeof ( sljit_sw ) )		1125427	0					
ANR	1125464	Callee	INC_SIZE		1125427	0					
ANR	1125465	Identifier	INC_SIZE		1125427	0					
ANR	1125466	ArgumentList	2 + sizeof ( sljit_sw )		1125427	1					
ANR	1125467	Argument	2 + sizeof ( sljit_sw )		1125427	0					
ANR	1125468	AdditiveExpression	2 + sizeof ( sljit_sw )		1125427	0		+			
ANR	1125469	PrimaryExpression	2		1125427	0					
ANR	1125470	SizeofExpression	sizeof ( sljit_sw )		1125427	1					
ANR	1125471	Sizeof	sizeof		1125427	0					
ANR	1125472	SizeofOperand	sljit_sw		1125427	1					
ANR	1125473	ExpressionStatement	* inst ++ = REX_W | ( ( reg_map [ reg ] <= 7 ) ? 0 : REX_B )	36:1:1730:1781	1125427	4	True				
ANR	1125474	AssignmentExpression	* inst ++ = REX_W | ( ( reg_map [ reg ] <= 7 ) ? 0 : REX_B )		1125427	0		=			
ANR	1125475	UnaryOperationExpression	* inst ++		1125427	0					
ANR	1125476	UnaryOperator	*		1125427	0					
ANR	1125477	PostIncDecOperationExpression	inst ++		1125427	1					
ANR	1125478	Identifier	inst		1125427	0					
ANR	1125479	IncDec	++		1125427	1					
ANR	1125480	InclusiveOrExpression	REX_W | ( ( reg_map [ reg ] <= 7 ) ? 0 : REX_B )		1125427	1		|			
ANR	1125481	Identifier	REX_W		1125427	0					
ANR	1125482	ConditionalExpression	( reg_map [ reg ] <= 7 ) ? 0 : REX_B		1125427	1					
ANR	1125483	Condition	reg_map [ reg ] <= 7		1125427	0					
ANR	1125484	RelationalExpression	reg_map [ reg ] <= 7		1125427	0		<=			
ANR	1125485	ArrayIndexing	reg_map [ reg ]		1125427	0					
ANR	1125486	Identifier	reg_map		1125427	0					
ANR	1125487	Identifier	reg		1125427	1					
ANR	1125488	PrimaryExpression	7		1125427	1					
ANR	1125489	PrimaryExpression	0		1125427	1					
ANR	1125490	Identifier	REX_B		1125427	2					
ANR	1125491	ExpressionStatement	* inst ++ = MOV_r_i32 + ( reg_map [ reg ] & 0x7 )	37:1:1784:1826	1125427	5	True				
ANR	1125492	AssignmentExpression	* inst ++ = MOV_r_i32 + ( reg_map [ reg ] & 0x7 )		1125427	0		=			
ANR	1125493	UnaryOperationExpression	* inst ++		1125427	0					
ANR	1125494	UnaryOperator	*		1125427	0					
ANR	1125495	PostIncDecOperationExpression	inst ++		1125427	1					
ANR	1125496	Identifier	inst		1125427	0					
ANR	1125497	IncDec	++		1125427	1					
ANR	1125498	AdditiveExpression	MOV_r_i32 + ( reg_map [ reg ] & 0x7 )		1125427	1		+			
ANR	1125499	Identifier	MOV_r_i32		1125427	0					
ANR	1125500	BitAndExpression	reg_map [ reg ] & 0x7		1125427	1		&			
ANR	1125501	ArrayIndexing	reg_map [ reg ]		1125427	0					
ANR	1125502	Identifier	reg_map		1125427	0					
ANR	1125503	Identifier	reg		1125427	1					
ANR	1125504	PrimaryExpression	0x7		1125427	1					
ANR	1125505	ExpressionStatement	* ( sljit_sw * ) inst = imm	38:1:1829:1851	1125427	6	True				
ANR	1125506	AssignmentExpression	* ( sljit_sw * ) inst = imm		1125427	0		=			
ANR	1125507	UnaryOperationExpression	* ( sljit_sw * ) inst		1125427	0					
ANR	1125508	UnaryOperator	*		1125427	0					
ANR	1125509	CastExpression	( sljit_sw * ) inst		1125427	1					
ANR	1125510	CastTarget	sljit_sw *		1125427	0					
ANR	1125511	Identifier	inst		1125427	1					
ANR	1125512	Identifier	imm		1125427	1					
ANR	1125513	ReturnStatement	return SLJIT_SUCCESS ;	39:1:1854:1874	1125427	7	True				
ANR	1125514	Identifier	SLJIT_SUCCESS		1125427	0					
ANR	1125515	ReturnType	static sljit_si		1125427	1					
ANR	1125516	Identifier	emit_load_imm64		1125427	2					
ANR	1125517	ParameterList	"struct sljit_compiler * compiler , sljit_si reg , sljit_sw imm"		1125427	3					
ANR	1125518	Parameter	struct sljit_compiler * compiler	29:32:1531:1561	1125427	0	True				
ANR	1125519	ParameterType	struct sljit_compiler *		1125427	0					
ANR	1125520	Identifier	compiler		1125427	1					
ANR	1125521	Parameter	sljit_si reg	29:65:1564:1575	1125427	1	True				
ANR	1125522	ParameterType	sljit_si		1125427	0					
ANR	1125523	Identifier	reg		1125427	1					
ANR	1125524	Parameter	sljit_sw imm	29:79:1578:1589	1125427	2	True				
ANR	1125525	ParameterType	sljit_sw		1125427	0					
ANR	1125526	Identifier	imm		1125427	1					
ANR	1125527	CFGEntryNode	ENTRY		1125427		True				
ANR	1125528	CFGExitNode	EXIT		1125427		True				
ANR	1125529	Symbol	* inst		1125427						
ANR	1125530	Symbol	imm		1125427						
ANR	1125531	Symbol	* inst ++		1125427						
ANR	1125532	Symbol	reg_map		1125427						
ANR	1125533	Symbol	MOV_r_i32		1125427						
ANR	1125534	Symbol	SLJIT_SUCCESS		1125427						
ANR	1125535	Symbol	* ( sljit_sw * ) inst		1125427						
ANR	1125536	Symbol	REX_B		1125427						
ANR	1125537	Symbol	* reg_map		1125427						
ANR	1125538	Symbol	reg		1125427						
ANR	1125539	Symbol	inst		1125427						
ANR	1125540	Symbol	ensure_buf		1125427						
ANR	1125541	Symbol	REX_W		1125427						
ANR	1125542	Symbol	compiler		1125427						
ANR	1125543	Symbol	* reg		1125427						
ANR	1125544	Function	generate_far_jump_code	42:0:1879:2561							
ANR	1125545	FunctionDef	"generate_far_jump_code (struct sljit_jump * jump , sljit_ub * code_ptr , sljit_si type)"		1125544	0					
ANR	1125546	CompoundStatement		43:0:1979:2561	1125544	0					
ANR	1125547	IfStatement	if ( type < SLJIT_JUMP )		1125544	0					
ANR	1125548	Condition	type < SLJIT_JUMP	44:5:1986:2002	1125544	0	True				
ANR	1125549	RelationalExpression	type < SLJIT_JUMP		1125544	0		<			
ANR	1125550	Identifier	type		1125544	0					
ANR	1125551	Identifier	SLJIT_JUMP		1125544	1					
ANR	1125552	CompoundStatement		2:24:25:25	1125544	1					
ANR	1125553	ExpressionStatement	* code_ptr ++ = get_jump_code ( type ^ 0x1 ) - 0x10	46:2:2030:2076	1125544	0	True				
ANR	1125554	AssignmentExpression	* code_ptr ++ = get_jump_code ( type ^ 0x1 ) - 0x10		1125544	0		=			
ANR	1125555	UnaryOperationExpression	* code_ptr ++		1125544	0					
ANR	1125556	UnaryOperator	*		1125544	0					
ANR	1125557	PostIncDecOperationExpression	code_ptr ++		1125544	1					
ANR	1125558	Identifier	code_ptr		1125544	0					
ANR	1125559	IncDec	++		1125544	1					
ANR	1125560	AdditiveExpression	get_jump_code ( type ^ 0x1 ) - 0x10		1125544	1		-			
ANR	1125561	CallExpression	get_jump_code ( type ^ 0x1 )		1125544	0					
ANR	1125562	Callee	get_jump_code		1125544	0					
ANR	1125563	Identifier	get_jump_code		1125544	0					
ANR	1125564	ArgumentList	type ^ 0x1		1125544	1					
ANR	1125565	Argument	type ^ 0x1		1125544	0					
ANR	1125566	ExclusiveOrExpression	type ^ 0x1		1125544	0		^			
ANR	1125567	Identifier	type		1125544	0					
ANR	1125568	PrimaryExpression	0x1		1125544	1					
ANR	1125569	PrimaryExpression	0x10		1125544	1					
ANR	1125570	ExpressionStatement	* code_ptr ++ = 10 + 3	47:2:2080:2100	1125544	1	True				
ANR	1125571	AssignmentExpression	* code_ptr ++ = 10 + 3		1125544	0		=			
ANR	1125572	UnaryOperationExpression	* code_ptr ++		1125544	0					
ANR	1125573	UnaryOperator	*		1125544	0					
ANR	1125574	PostIncDecOperationExpression	code_ptr ++		1125544	1					
ANR	1125575	Identifier	code_ptr		1125544	0					
ANR	1125576	IncDec	++		1125544	1					
ANR	1125577	AdditiveExpression	10 + 3		1125544	1		+			
ANR	1125578	PrimaryExpression	10		1125544	0					
ANR	1125579	PrimaryExpression	3		1125544	1					
ANR	1125580	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( reg_map [ TMP_REG3 ] == 9 , tmp3_is_9_first )"	50:1:2107:2168	1125544	1	True				
ANR	1125581	CallExpression	"SLJIT_COMPILE_ASSERT ( reg_map [ TMP_REG3 ] == 9 , tmp3_is_9_first )"		1125544	0					
ANR	1125582	Callee	SLJIT_COMPILE_ASSERT		1125544	0					
ANR	1125583	Identifier	SLJIT_COMPILE_ASSERT		1125544	0					
ANR	1125584	ArgumentList	reg_map [ TMP_REG3 ] == 9		1125544	1					
ANR	1125585	Argument	reg_map [ TMP_REG3 ] == 9		1125544	0					
ANR	1125586	EqualityExpression	reg_map [ TMP_REG3 ] == 9		1125544	0		==			
ANR	1125587	ArrayIndexing	reg_map [ TMP_REG3 ]		1125544	0					
ANR	1125588	Identifier	reg_map		1125544	0					
ANR	1125589	Identifier	TMP_REG3		1125544	1					
ANR	1125590	PrimaryExpression	9		1125544	1					
ANR	1125591	Argument	tmp3_is_9_first		1125544	1					
ANR	1125592	Identifier	tmp3_is_9_first		1125544	0					
ANR	1125593	ExpressionStatement	* code_ptr ++ = REX_W | REX_B	51:1:2171:2198	1125544	2	True				
ANR	1125594	AssignmentExpression	* code_ptr ++ = REX_W | REX_B		1125544	0		=			
ANR	1125595	UnaryOperationExpression	* code_ptr ++		1125544	0					
ANR	1125596	UnaryOperator	*		1125544	0					
ANR	1125597	PostIncDecOperationExpression	code_ptr ++		1125544	1					
ANR	1125598	Identifier	code_ptr		1125544	0					
ANR	1125599	IncDec	++		1125544	1					
ANR	1125600	InclusiveOrExpression	REX_W | REX_B		1125544	1		|			
ANR	1125601	Identifier	REX_W		1125544	0					
ANR	1125602	Identifier	REX_B		1125544	1					
ANR	1125603	ExpressionStatement	* code_ptr ++ = MOV_r_i32 + 1	52:1:2201:2228	1125544	3	True				
ANR	1125604	AssignmentExpression	* code_ptr ++ = MOV_r_i32 + 1		1125544	0		=			
ANR	1125605	UnaryOperationExpression	* code_ptr ++		1125544	0					
ANR	1125606	UnaryOperator	*		1125544	0					
ANR	1125607	PostIncDecOperationExpression	code_ptr ++		1125544	1					
ANR	1125608	Identifier	code_ptr		1125544	0					
ANR	1125609	IncDec	++		1125544	1					
ANR	1125610	AdditiveExpression	MOV_r_i32 + 1		1125544	1		+			
ANR	1125611	Identifier	MOV_r_i32		1125544	0					
ANR	1125612	PrimaryExpression	1		1125544	1					
ANR	1125613	ExpressionStatement	jump -> addr = ( sljit_uw ) code_ptr	53:1:2231:2262	1125544	4	True				
ANR	1125614	AssignmentExpression	jump -> addr = ( sljit_uw ) code_ptr		1125544	0		=			
ANR	1125615	PtrMemberAccess	jump -> addr		1125544	0					
ANR	1125616	Identifier	jump		1125544	0					
ANR	1125617	Identifier	addr		1125544	1					
ANR	1125618	CastExpression	( sljit_uw ) code_ptr		1125544	1					
ANR	1125619	CastTarget	sljit_uw		1125544	0					
ANR	1125620	Identifier	code_ptr		1125544	1					
ANR	1125621	IfStatement	if ( jump -> flags & JUMP_LABEL )		1125544	5					
ANR	1125622	Condition	jump -> flags & JUMP_LABEL	55:5:2270:2293	1125544	0	True				
ANR	1125623	BitAndExpression	jump -> flags & JUMP_LABEL		1125544	0		&			
ANR	1125624	PtrMemberAccess	jump -> flags		1125544	0					
ANR	1125625	Identifier	jump		1125544	0					
ANR	1125626	Identifier	flags		1125544	1					
ANR	1125627	Identifier	JUMP_LABEL		1125544	1					
ANR	1125628	ExpressionStatement	jump -> flags |= PATCH_MD	56:2:2298:2321	1125544	1	True				
ANR	1125629	AssignmentExpression	jump -> flags |= PATCH_MD		1125544	0		|=			
ANR	1125630	PtrMemberAccess	jump -> flags		1125544	0					
ANR	1125631	Identifier	jump		1125544	0					
ANR	1125632	Identifier	flags		1125544	1					
ANR	1125633	Identifier	PATCH_MD		1125544	1					
ANR	1125634	ElseStatement	else		1125544	0					
ANR	1125635	ExpressionStatement	* ( sljit_sw * ) code_ptr = jump -> u . target	58:2:2331:2368	1125544	0	True				
ANR	1125636	AssignmentExpression	* ( sljit_sw * ) code_ptr = jump -> u . target		1125544	0		=			
ANR	1125637	UnaryOperationExpression	* ( sljit_sw * ) code_ptr		1125544	0					
ANR	1125638	UnaryOperator	*		1125544	0					
ANR	1125639	CastExpression	( sljit_sw * ) code_ptr		1125544	1					
ANR	1125640	CastTarget	sljit_sw *		1125544	0					
ANR	1125641	Identifier	code_ptr		1125544	1					
ANR	1125642	MemberAccess	jump -> u . target		1125544	1					
ANR	1125643	PtrMemberAccess	jump -> u		1125544	0					
ANR	1125644	Identifier	jump		1125544	0					
ANR	1125645	Identifier	u		1125544	1					
ANR	1125646	Identifier	target		1125544	1					
ANR	1125647	ExpressionStatement	code_ptr += sizeof ( sljit_sw )	60:1:2372:2400	1125544	6	True				
ANR	1125648	AssignmentExpression	code_ptr += sizeof ( sljit_sw )		1125544	0		+=			
ANR	1125649	Identifier	code_ptr		1125544	0					
ANR	1125650	SizeofExpression	sizeof ( sljit_sw )		1125544	1					
ANR	1125651	Sizeof	sizeof		1125544	0					
ANR	1125652	SizeofOperand	sljit_sw		1125544	1					
ANR	1125653	ExpressionStatement	* code_ptr ++ = REX_B	61:1:2403:2422	1125544	7	True				
ANR	1125654	AssignmentExpression	* code_ptr ++ = REX_B		1125544	0		=			
ANR	1125655	UnaryOperationExpression	* code_ptr ++		1125544	0					
ANR	1125656	UnaryOperator	*		1125544	0					
ANR	1125657	PostIncDecOperationExpression	code_ptr ++		1125544	1					
ANR	1125658	Identifier	code_ptr		1125544	0					
ANR	1125659	IncDec	++		1125544	1					
ANR	1125660	Identifier	REX_B		1125544	1					
ANR	1125661	ExpressionStatement	* code_ptr ++ = GROUP_FF	62:1:2425:2447	1125544	8	True				
ANR	1125662	AssignmentExpression	* code_ptr ++ = GROUP_FF		1125544	0		=			
ANR	1125663	UnaryOperationExpression	* code_ptr ++		1125544	0					
ANR	1125664	UnaryOperator	*		1125544	0					
ANR	1125665	PostIncDecOperationExpression	code_ptr ++		1125544	1					
ANR	1125666	Identifier	code_ptr		1125544	0					
ANR	1125667	IncDec	++		1125544	1					
ANR	1125668	Identifier	GROUP_FF		1125544	1					
ANR	1125669	ExpressionStatement	* code_ptr ++ = ( type >= SLJIT_FAST_CALL ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )	63:1:2450:2540	1125544	9	True				
ANR	1125670	AssignmentExpression	* code_ptr ++ = ( type >= SLJIT_FAST_CALL ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )		1125544	0		=			
ANR	1125671	UnaryOperationExpression	* code_ptr ++		1125544	0					
ANR	1125672	UnaryOperator	*		1125544	0					
ANR	1125673	PostIncDecOperationExpression	code_ptr ++		1125544	1					
ANR	1125674	Identifier	code_ptr		1125544	0					
ANR	1125675	IncDec	++		1125544	1					
ANR	1125676	ConditionalExpression	( type >= SLJIT_FAST_CALL ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )		1125544	1					
ANR	1125677	Condition	type >= SLJIT_FAST_CALL		1125544	0					
ANR	1125678	RelationalExpression	type >= SLJIT_FAST_CALL		1125544	0		>=			
ANR	1125679	Identifier	type		1125544	0					
ANR	1125680	Identifier	SLJIT_FAST_CALL		1125544	1					
ANR	1125681	InclusiveOrExpression	MOD_REG | CALL_rm | 1		1125544	1		|			
ANR	1125682	Identifier	MOD_REG		1125544	0					
ANR	1125683	InclusiveOrExpression	CALL_rm | 1		1125544	1		|			
ANR	1125684	Identifier	CALL_rm		1125544	0					
ANR	1125685	PrimaryExpression	1		1125544	1					
ANR	1125686	InclusiveOrExpression	MOD_REG | JMP_rm | 1		1125544	2		|			
ANR	1125687	Identifier	MOD_REG		1125544	0					
ANR	1125688	InclusiveOrExpression	JMP_rm | 1		1125544	1		|			
ANR	1125689	Identifier	JMP_rm		1125544	0					
ANR	1125690	PrimaryExpression	1		1125544	1					
ANR	1125691	ReturnStatement	return code_ptr ;	65:1:2544:2559	1125544	10	True				
ANR	1125692	Identifier	code_ptr		1125544	0					
ANR	1125693	ReturnType	static sljit_ub *		1125544	1					
ANR	1125694	Identifier	generate_far_jump_code		1125544	2					
ANR	1125695	ParameterList	"struct sljit_jump * jump , sljit_ub * code_ptr , sljit_si type"		1125544	3					
ANR	1125696	Parameter	struct sljit_jump * jump	42:40:1919:1941	1125544	0	True				
ANR	1125697	ParameterType	struct sljit_jump *		1125544	0					
ANR	1125698	Identifier	jump		1125544	1					
ANR	1125699	Parameter	sljit_ub * code_ptr	42:65:1944:1961	1125544	1	True				
ANR	1125700	ParameterType	sljit_ub *		1125544	0					
ANR	1125701	Identifier	code_ptr		1125544	1					
ANR	1125702	Parameter	sljit_si type	42:85:1964:1976	1125544	2	True				
ANR	1125703	ParameterType	sljit_si		1125544	0					
ANR	1125704	Identifier	type		1125544	1					
ANR	1125705	CFGEntryNode	ENTRY		1125544		True				
ANR	1125706	CFGExitNode	EXIT		1125544		True				
ANR	1125707	Symbol	TMP_REG3		1125544						
ANR	1125708	Symbol	SLJIT_JUMP		1125544						
ANR	1125709	Symbol	CALL_rm		1125544						
ANR	1125710	Symbol	* jump		1125544						
ANR	1125711	Symbol	jump -> u		1125544						
ANR	1125712	Symbol	jump -> flags		1125544						
ANR	1125713	Symbol	reg_map		1125544						
ANR	1125714	Symbol	MOV_r_i32		1125544						
ANR	1125715	Symbol	JUMP_LABEL		1125544						
ANR	1125716	Symbol	get_jump_code		1125544						
ANR	1125717	Symbol	type		1125544						
ANR	1125718	Symbol	code_ptr		1125544						
ANR	1125719	Symbol	SLJIT_FAST_CALL		1125544						
ANR	1125720	Symbol	* code_ptr ++		1125544						
ANR	1125721	Symbol	* TMP_REG3		1125544						
ANR	1125722	Symbol	jump		1125544						
ANR	1125723	Symbol	JMP_rm		1125544						
ANR	1125724	Symbol	jump -> addr		1125544						
ANR	1125725	Symbol	* reg_map		1125544						
ANR	1125726	Symbol	REX_B		1125544						
ANR	1125727	Symbol	MOD_REG		1125544						
ANR	1125728	Symbol	* code_ptr		1125544						
ANR	1125729	Symbol	PATCH_MD		1125544						
ANR	1125730	Symbol	tmp3_is_9_first		1125544						
ANR	1125731	Symbol	GROUP_FF		1125544						
ANR	1125732	Symbol	jump -> u . target		1125544						
ANR	1125733	Symbol	REX_W		1125544						
ANR	1125734	Symbol	* ( sljit_sw * ) code_ptr		1125544						
ANR	1125735	Function	generate_fixed_jump	68:0:2564:3214							
ANR	1125736	FunctionDef	"generate_fixed_jump (sljit_ub * code_ptr , sljit_sw addr , sljit_si type)"		1125735	0					
ANR	1125737	CompoundStatement		69:0:2651:3214	1125735	0					
ANR	1125738	IdentifierDeclStatement	sljit_sw delta = addr - ( ( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si ) ) ;	70:1:2654:2721	1125735	0	True				
ANR	1125739	IdentifierDecl	delta = addr - ( ( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si ) )		1125735	0					
ANR	1125740	IdentifierDeclType	sljit_sw		1125735	0					
ANR	1125741	Identifier	delta		1125735	1					
ANR	1125742	AssignmentExpression	delta = addr - ( ( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si ) )		1125735	2		=			
ANR	1125743	Identifier	delta		1125735	0					
ANR	1125744	AdditiveExpression	addr - ( ( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si ) )		1125735	1		-			
ANR	1125745	Identifier	addr		1125735	0					
ANR	1125746	AdditiveExpression	( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si )		1125735	1		+			
ANR	1125747	CastExpression	( sljit_sw ) code_ptr		1125735	0					
ANR	1125748	CastTarget	sljit_sw		1125735	0					
ANR	1125749	Identifier	code_ptr		1125735	1					
ANR	1125750	AdditiveExpression	1 + sizeof ( sljit_si )		1125735	1		+			
ANR	1125751	PrimaryExpression	1		1125735	0					
ANR	1125752	SizeofExpression	sizeof ( sljit_si )		1125735	1					
ANR	1125753	Sizeof	sizeof		1125735	0					
ANR	1125754	SizeofOperand	sljit_si		1125735	1					
ANR	1125755	IfStatement	if ( delta <= HALFWORD_MAX && delta >= HALFWORD_MIN )		1125735	1					
ANR	1125756	Condition	delta <= HALFWORD_MAX && delta >= HALFWORD_MIN	72:5:2729:2774	1125735	0	True				
ANR	1125757	AndExpression	delta <= HALFWORD_MAX && delta >= HALFWORD_MIN		1125735	0		&&			
ANR	1125758	RelationalExpression	delta <= HALFWORD_MAX		1125735	0		<=			
ANR	1125759	Identifier	delta		1125735	0					
ANR	1125760	Identifier	HALFWORD_MAX		1125735	1					
ANR	1125761	RelationalExpression	delta >= HALFWORD_MIN		1125735	1		>=			
ANR	1125762	Identifier	delta		1125735	0					
ANR	1125763	Identifier	HALFWORD_MIN		1125735	1					
ANR	1125764	CompoundStatement		4:53:125:125	1125735	1					
ANR	1125765	ExpressionStatement	* code_ptr ++ = ( type == 2 ) ? CALL_i32 : JMP_i32	73:2:2781:2827	1125735	0	True				
ANR	1125766	AssignmentExpression	* code_ptr ++ = ( type == 2 ) ? CALL_i32 : JMP_i32		1125735	0		=			
ANR	1125767	UnaryOperationExpression	* code_ptr ++		1125735	0					
ANR	1125768	UnaryOperator	*		1125735	0					
ANR	1125769	PostIncDecOperationExpression	code_ptr ++		1125735	1					
ANR	1125770	Identifier	code_ptr		1125735	0					
ANR	1125771	IncDec	++		1125735	1					
ANR	1125772	ConditionalExpression	( type == 2 ) ? CALL_i32 : JMP_i32		1125735	1					
ANR	1125773	Condition	type == 2		1125735	0					
ANR	1125774	EqualityExpression	type == 2		1125735	0		==			
ANR	1125775	Identifier	type		1125735	0					
ANR	1125776	PrimaryExpression	2		1125735	1					
ANR	1125777	Identifier	CALL_i32		1125735	1					
ANR	1125778	Identifier	JMP_i32		1125735	2					
ANR	1125779	ExpressionStatement	* ( sljit_sw * ) code_ptr = delta	74:2:2831:2859	1125735	1	True				
ANR	1125780	AssignmentExpression	* ( sljit_sw * ) code_ptr = delta		1125735	0		=			
ANR	1125781	UnaryOperationExpression	* ( sljit_sw * ) code_ptr		1125735	0					
ANR	1125782	UnaryOperator	*		1125735	0					
ANR	1125783	CastExpression	( sljit_sw * ) code_ptr		1125735	1					
ANR	1125784	CastTarget	sljit_sw *		1125735	0					
ANR	1125785	Identifier	code_ptr		1125735	1					
ANR	1125786	Identifier	delta		1125735	1					
ANR	1125787	ElseStatement	else		1125735	0					
ANR	1125788	CompoundStatement		8:6:218:218	1125735	0					
ANR	1125789	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( reg_map [ TMP_REG3 ] == 9 , tmp3_is_9_second )"	77:2:2874:2936	1125735	0	True				
ANR	1125790	CallExpression	"SLJIT_COMPILE_ASSERT ( reg_map [ TMP_REG3 ] == 9 , tmp3_is_9_second )"		1125735	0					
ANR	1125791	Callee	SLJIT_COMPILE_ASSERT		1125735	0					
ANR	1125792	Identifier	SLJIT_COMPILE_ASSERT		1125735	0					
ANR	1125793	ArgumentList	reg_map [ TMP_REG3 ] == 9		1125735	1					
ANR	1125794	Argument	reg_map [ TMP_REG3 ] == 9		1125735	0					
ANR	1125795	EqualityExpression	reg_map [ TMP_REG3 ] == 9		1125735	0		==			
ANR	1125796	ArrayIndexing	reg_map [ TMP_REG3 ]		1125735	0					
ANR	1125797	Identifier	reg_map		1125735	0					
ANR	1125798	Identifier	TMP_REG3		1125735	1					
ANR	1125799	PrimaryExpression	9		1125735	1					
ANR	1125800	Argument	tmp3_is_9_second		1125735	1					
ANR	1125801	Identifier	tmp3_is_9_second		1125735	0					
ANR	1125802	ExpressionStatement	* code_ptr ++ = REX_W | REX_B	78:2:2940:2967	1125735	1	True				
ANR	1125803	AssignmentExpression	* code_ptr ++ = REX_W | REX_B		1125735	0		=			
ANR	1125804	UnaryOperationExpression	* code_ptr ++		1125735	0					
ANR	1125805	UnaryOperator	*		1125735	0					
ANR	1125806	PostIncDecOperationExpression	code_ptr ++		1125735	1					
ANR	1125807	Identifier	code_ptr		1125735	0					
ANR	1125808	IncDec	++		1125735	1					
ANR	1125809	InclusiveOrExpression	REX_W | REX_B		1125735	1		|			
ANR	1125810	Identifier	REX_W		1125735	0					
ANR	1125811	Identifier	REX_B		1125735	1					
ANR	1125812	ExpressionStatement	* code_ptr ++ = MOV_r_i32 + 1	79:2:2971:2998	1125735	2	True				
ANR	1125813	AssignmentExpression	* code_ptr ++ = MOV_r_i32 + 1		1125735	0		=			
ANR	1125814	UnaryOperationExpression	* code_ptr ++		1125735	0					
ANR	1125815	UnaryOperator	*		1125735	0					
ANR	1125816	PostIncDecOperationExpression	code_ptr ++		1125735	1					
ANR	1125817	Identifier	code_ptr		1125735	0					
ANR	1125818	IncDec	++		1125735	1					
ANR	1125819	AdditiveExpression	MOV_r_i32 + 1		1125735	1		+			
ANR	1125820	Identifier	MOV_r_i32		1125735	0					
ANR	1125821	PrimaryExpression	1		1125735	1					
ANR	1125822	ExpressionStatement	* ( sljit_sw * ) code_ptr = addr	80:2:3002:3029	1125735	3	True				
ANR	1125823	AssignmentExpression	* ( sljit_sw * ) code_ptr = addr		1125735	0		=			
ANR	1125824	UnaryOperationExpression	* ( sljit_sw * ) code_ptr		1125735	0					
ANR	1125825	UnaryOperator	*		1125735	0					
ANR	1125826	CastExpression	( sljit_sw * ) code_ptr		1125735	1					
ANR	1125827	CastTarget	sljit_sw *		1125735	0					
ANR	1125828	Identifier	code_ptr		1125735	1					
ANR	1125829	Identifier	addr		1125735	1					
ANR	1125830	ExpressionStatement	code_ptr += sizeof ( sljit_sw )	81:2:3033:3061	1125735	4	True				
ANR	1125831	AssignmentExpression	code_ptr += sizeof ( sljit_sw )		1125735	0		+=			
ANR	1125832	Identifier	code_ptr		1125735	0					
ANR	1125833	SizeofExpression	sizeof ( sljit_sw )		1125735	1					
ANR	1125834	Sizeof	sizeof		1125735	0					
ANR	1125835	SizeofOperand	sljit_sw		1125735	1					
ANR	1125836	ExpressionStatement	* code_ptr ++ = REX_B	82:2:3065:3084	1125735	5	True				
ANR	1125837	AssignmentExpression	* code_ptr ++ = REX_B		1125735	0		=			
ANR	1125838	UnaryOperationExpression	* code_ptr ++		1125735	0					
ANR	1125839	UnaryOperator	*		1125735	0					
ANR	1125840	PostIncDecOperationExpression	code_ptr ++		1125735	1					
ANR	1125841	Identifier	code_ptr		1125735	0					
ANR	1125842	IncDec	++		1125735	1					
ANR	1125843	Identifier	REX_B		1125735	1					
ANR	1125844	ExpressionStatement	* code_ptr ++ = GROUP_FF	83:2:3088:3110	1125735	6	True				
ANR	1125845	AssignmentExpression	* code_ptr ++ = GROUP_FF		1125735	0		=			
ANR	1125846	UnaryOperationExpression	* code_ptr ++		1125735	0					
ANR	1125847	UnaryOperator	*		1125735	0					
ANR	1125848	PostIncDecOperationExpression	code_ptr ++		1125735	1					
ANR	1125849	Identifier	code_ptr		1125735	0					
ANR	1125850	IncDec	++		1125735	1					
ANR	1125851	Identifier	GROUP_FF		1125735	1					
ANR	1125852	ExpressionStatement	* code_ptr ++ = ( type == 2 ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )	84:2:3114:3190	1125735	7	True				
ANR	1125853	AssignmentExpression	* code_ptr ++ = ( type == 2 ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )		1125735	0		=			
ANR	1125854	UnaryOperationExpression	* code_ptr ++		1125735	0					
ANR	1125855	UnaryOperator	*		1125735	0					
ANR	1125856	PostIncDecOperationExpression	code_ptr ++		1125735	1					
ANR	1125857	Identifier	code_ptr		1125735	0					
ANR	1125858	IncDec	++		1125735	1					
ANR	1125859	ConditionalExpression	( type == 2 ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )		1125735	1					
ANR	1125860	Condition	type == 2		1125735	0					
ANR	1125861	EqualityExpression	type == 2		1125735	0		==			
ANR	1125862	Identifier	type		1125735	0					
ANR	1125863	PrimaryExpression	2		1125735	1					
ANR	1125864	InclusiveOrExpression	MOD_REG | CALL_rm | 1		1125735	1		|			
ANR	1125865	Identifier	MOD_REG		1125735	0					
ANR	1125866	InclusiveOrExpression	CALL_rm | 1		1125735	1		|			
ANR	1125867	Identifier	CALL_rm		1125735	0					
ANR	1125868	PrimaryExpression	1		1125735	1					
ANR	1125869	InclusiveOrExpression	MOD_REG | JMP_rm | 1		1125735	2		|			
ANR	1125870	Identifier	MOD_REG		1125735	0					
ANR	1125871	InclusiveOrExpression	JMP_rm | 1		1125735	1		|			
ANR	1125872	Identifier	JMP_rm		1125735	0					
ANR	1125873	PrimaryExpression	1		1125735	1					
ANR	1125874	ReturnStatement	return code_ptr ;	87:1:3197:3212	1125735	2	True				
ANR	1125875	Identifier	code_ptr		1125735	0					
ANR	1125876	ReturnType	static sljit_ub *		1125735	1					
ANR	1125877	Identifier	generate_fixed_jump		1125735	2					
ANR	1125878	ParameterList	"sljit_ub * code_ptr , sljit_sw addr , sljit_si type"		1125735	3					
ANR	1125879	Parameter	sljit_ub * code_ptr	68:37:2601:2618	1125735	0	True				
ANR	1125880	ParameterType	sljit_ub *		1125735	0					
ANR	1125881	Identifier	code_ptr		1125735	1					
ANR	1125882	Parameter	sljit_sw addr	68:57:2621:2633	1125735	1	True				
ANR	1125883	ParameterType	sljit_sw		1125735	0					
ANR	1125884	Identifier	addr		1125735	1					
ANR	1125885	Parameter	sljit_si type	68:72:2636:2648	1125735	2	True				
ANR	1125886	ParameterType	sljit_si		1125735	0					
ANR	1125887	Identifier	type		1125735	1					
ANR	1125888	CFGEntryNode	ENTRY		1125735		True				
ANR	1125889	CFGExitNode	EXIT		1125735		True				
ANR	1125890	Symbol	TMP_REG3		1125735						
ANR	1125891	Symbol	CALL_rm		1125735						
ANR	1125892	Symbol	JMP_rm		1125735						
ANR	1125893	Symbol	HALFWORD_MIN		1125735						
ANR	1125894	Symbol	delta		1125735						
ANR	1125895	Symbol	CALL_i32		1125735						
ANR	1125896	Symbol	reg_map		1125735						
ANR	1125897	Symbol	MOV_r_i32		1125735						
ANR	1125898	Symbol	type		1125735						
ANR	1125899	Symbol	* reg_map		1125735						
ANR	1125900	Symbol	REX_B		1125735						
ANR	1125901	Symbol	MOD_REG		1125735						
ANR	1125902	Symbol	JMP_i32		1125735						
ANR	1125903	Symbol	* code_ptr		1125735						
ANR	1125904	Symbol	code_ptr		1125735						
ANR	1125905	Symbol	HALFWORD_MAX		1125735						
ANR	1125906	Symbol	GROUP_FF		1125735						
ANR	1125907	Symbol	REX_W		1125735						
ANR	1125908	Symbol	* code_ptr ++		1125735						
ANR	1125909	Symbol	* ( sljit_sw * ) code_ptr		1125735						
ANR	1125910	Symbol	addr		1125735						
ANR	1125911	Symbol	* TMP_REG3		1125735						
ANR	1125912	Symbol	tmp3_is_9_second		1125735						
ANR	1125913	Function	sljit_emit_enter	90:0:3217:7452							
ANR	1125914	FunctionDef	"sljit_emit_enter (struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size)"		1125913	0					
ANR	1125915	CompoundStatement		93:0:3433:7452	1125913	0					
ANR	1125916	IdentifierDeclStatement	"sljit_si i , tmp , size , saved_register_size ;"	94:1:3436:3478	1125913	0	True				
ANR	1125917	IdentifierDecl	i		1125913	0					
ANR	1125918	IdentifierDeclType	sljit_si		1125913	0					
ANR	1125919	Identifier	i		1125913	1					
ANR	1125920	IdentifierDecl	tmp		1125913	1					
ANR	1125921	IdentifierDeclType	sljit_si		1125913	0					
ANR	1125922	Identifier	tmp		1125913	1					
ANR	1125923	IdentifierDecl	size		1125913	2					
ANR	1125924	IdentifierDeclType	sljit_si		1125913	0					
ANR	1125925	Identifier	size		1125913	1					
ANR	1125926	IdentifierDecl	saved_register_size		1125913	3					
ANR	1125927	IdentifierDeclType	sljit_si		1125913	0					
ANR	1125928	Identifier	saved_register_size		1125913	1					
ANR	1125929	IdentifierDeclStatement	sljit_ub * inst ;	95:1:3481:3495	1125913	1	True				
ANR	1125930	IdentifierDecl	* inst		1125913	0					
ANR	1125931	IdentifierDeclType	sljit_ub *		1125913	0					
ANR	1125932	Identifier	inst		1125913	1					
ANR	1125933	ExpressionStatement	CHECK_ERROR ( )	97:1:3499:3512	1125913	2	True				
ANR	1125934	CallExpression	CHECK_ERROR ( )		1125913	0					
ANR	1125935	Callee	CHECK_ERROR		1125913	0					
ANR	1125936	Identifier	CHECK_ERROR		1125913	0					
ANR	1125937	ArgumentList			1125913	1					
ANR	1125938	ExpressionStatement	"CHECK ( check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"	98:1:3515:3621	1125913	3	True				
ANR	1125939	CallExpression	"CHECK ( check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"		1125913	0					
ANR	1125940	Callee	CHECK		1125913	0					
ANR	1125941	Identifier	CHECK		1125913	0					
ANR	1125942	ArgumentList	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1125913	1					
ANR	1125943	Argument	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1125913	0					
ANR	1125944	CallExpression	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1125913	0					
ANR	1125945	Callee	check_sljit_emit_enter		1125913	0					
ANR	1125946	Identifier	check_sljit_emit_enter		1125913	0					
ANR	1125947	ArgumentList	compiler		1125913	1					
ANR	1125948	Argument	compiler		1125913	0					
ANR	1125949	Identifier	compiler		1125913	0					
ANR	1125950	Argument	options		1125913	1					
ANR	1125951	Identifier	options		1125913	0					
ANR	1125952	Argument	args		1125913	2					
ANR	1125953	Identifier	args		1125913	0					
ANR	1125954	Argument	scratches		1125913	3					
ANR	1125955	Identifier	scratches		1125913	0					
ANR	1125956	Argument	saveds		1125913	4					
ANR	1125957	Identifier	saveds		1125913	0					
ANR	1125958	Argument	fscratches		1125913	5					
ANR	1125959	Identifier	fscratches		1125913	0					
ANR	1125960	Argument	fsaveds		1125913	6					
ANR	1125961	Identifier	fsaveds		1125913	0					
ANR	1125962	Argument	local_size		1125913	7					
ANR	1125963	Identifier	local_size		1125913	0					
ANR	1125964	ExpressionStatement	"set_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"	99:1:3624:3715	1125913	4	True				
ANR	1125965	CallExpression	"set_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1125913	0					
ANR	1125966	Callee	set_emit_enter		1125913	0					
ANR	1125967	Identifier	set_emit_enter		1125913	0					
ANR	1125968	ArgumentList	compiler		1125913	1					
ANR	1125969	Argument	compiler		1125913	0					
ANR	1125970	Identifier	compiler		1125913	0					
ANR	1125971	Argument	options		1125913	1					
ANR	1125972	Identifier	options		1125913	0					
ANR	1125973	Argument	args		1125913	2					
ANR	1125974	Identifier	args		1125913	0					
ANR	1125975	Argument	scratches		1125913	3					
ANR	1125976	Identifier	scratches		1125913	0					
ANR	1125977	Argument	saveds		1125913	4					
ANR	1125978	Identifier	saveds		1125913	0					
ANR	1125979	Argument	fscratches		1125913	5					
ANR	1125980	Identifier	fscratches		1125913	0					
ANR	1125981	Argument	fsaveds		1125913	6					
ANR	1125982	Identifier	fsaveds		1125913	0					
ANR	1125983	Argument	local_size		1125913	7					
ANR	1125984	Identifier	local_size		1125913	0					
ANR	1125985	ExpressionStatement	compiler -> flags_saved = 0	101:1:3719:3744	1125913	5	True				
ANR	1125986	AssignmentExpression	compiler -> flags_saved = 0		1125913	0		=			
ANR	1125987	PtrMemberAccess	compiler -> flags_saved		1125913	0					
ANR	1125988	Identifier	compiler		1125913	0					
ANR	1125989	Identifier	flags_saved		1125913	1					
ANR	1125990	PrimaryExpression	0		1125913	1					
ANR	1125991	ExpressionStatement	"saved_register_size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"	104:1:3815:3883	1125913	6	True				
ANR	1125992	AssignmentExpression	"saved_register_size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1125913	0		=			
ANR	1125993	Identifier	saved_register_size		1125913	0					
ANR	1125994	CallExpression	"GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1125913	1					
ANR	1125995	Callee	GET_SAVED_REGISTERS_SIZE		1125913	0					
ANR	1125996	Identifier	GET_SAVED_REGISTERS_SIZE		1125913	0					
ANR	1125997	ArgumentList	scratches		1125913	1					
ANR	1125998	Argument	scratches		1125913	0					
ANR	1125999	Identifier	scratches		1125913	0					
ANR	1126000	Argument	saveds		1125913	1					
ANR	1126001	Identifier	saveds		1125913	0					
ANR	1126002	Argument	1		1125913	2					
ANR	1126003	PrimaryExpression	1		1125913	0					
ANR	1126004	ExpressionStatement	tmp = saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - saveds ) : SLJIT_FIRST_SAVED_REG	106:1:3887:3983	1125913	7	True				
ANR	1126005	AssignmentExpression	tmp = saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - saveds ) : SLJIT_FIRST_SAVED_REG		1125913	0		=			
ANR	1126006	Identifier	tmp		1125913	0					
ANR	1126007	ConditionalExpression	saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - saveds ) : SLJIT_FIRST_SAVED_REG		1125913	1					
ANR	1126008	Condition	saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1125913	0					
ANR	1126009	RelationalExpression	saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1125913	0		<			
ANR	1126010	Identifier	saveds		1125913	0					
ANR	1126011	Identifier	SLJIT_NUMBER_OF_SAVED_REGISTERS		1125913	1					
ANR	1126012	AdditiveExpression	SLJIT_S0 + 1 - saveds		1125913	1		+			
ANR	1126013	Identifier	SLJIT_S0		1125913	0					
ANR	1126014	AdditiveExpression	1 - saveds		1125913	1		-			
ANR	1126015	PrimaryExpression	1		1125913	0					
ANR	1126016	Identifier	saveds		1125913	1					
ANR	1126017	Identifier	SLJIT_FIRST_SAVED_REG		1125913	2					
ANR	1126018	ForStatement	for ( i = SLJIT_S0 ; i >= tmp ; i -- )		1125913	8					
ANR	1126019	ForInit	i = SLJIT_S0 ;	107:6:3991:4003	1125913	0	True				
ANR	1126020	AssignmentExpression	i = SLJIT_S0		1125913	0		=			
ANR	1126021	Identifier	i		1125913	0					
ANR	1126022	Identifier	SLJIT_S0		1125913	1					
ANR	1126023	Condition	i >= tmp	107:20:4005:4012	1125913	1	True				
ANR	1126024	RelationalExpression	i >= tmp		1125913	0		>=			
ANR	1126025	Identifier	i		1125913	0					
ANR	1126026	Identifier	tmp		1125913	1					
ANR	1126027	PostIncDecOperationExpression	i --	107:30:4015:4017	1125913	2	True				
ANR	1126028	Identifier	i		1125913	0					
ANR	1126029	IncDec	--		1125913	1					
ANR	1126030	CompoundStatement		15:35:586:586	1125913	3					
ANR	1126031	ExpressionStatement	size = reg_map [ i ] >= 8 ? 2 : 1	108:2:4024:4054	1125913	0	True				
ANR	1126032	AssignmentExpression	size = reg_map [ i ] >= 8 ? 2 : 1		1125913	0		=			
ANR	1126033	Identifier	size		1125913	0					
ANR	1126034	ConditionalExpression	reg_map [ i ] >= 8 ? 2 : 1		1125913	1					
ANR	1126035	Condition	reg_map [ i ] >= 8		1125913	0					
ANR	1126036	RelationalExpression	reg_map [ i ] >= 8		1125913	0		>=			
ANR	1126037	ArrayIndexing	reg_map [ i ]		1125913	0					
ANR	1126038	Identifier	reg_map		1125913	0					
ANR	1126039	Identifier	i		1125913	1					
ANR	1126040	PrimaryExpression	8		1125913	1					
ANR	1126041	PrimaryExpression	2		1125913	1					
ANR	1126042	PrimaryExpression	1		1125913	2					
ANR	1126043	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	109:2:4058:4106	1125913	1	True				
ANR	1126044	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1125913	0		=			
ANR	1126045	Identifier	inst		1125913	0					
ANR	1126046	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1125913	1					
ANR	1126047	CastTarget	sljit_ub *		1125913	0					
ANR	1126048	CallExpression	"ensure_buf ( compiler , 1 + size )"		1125913	1					
ANR	1126049	Callee	ensure_buf		1125913	0					
ANR	1126050	Identifier	ensure_buf		1125913	0					
ANR	1126051	ArgumentList	compiler		1125913	1					
ANR	1126052	Argument	compiler		1125913	0					
ANR	1126053	Identifier	compiler		1125913	0					
ANR	1126054	Argument	1 + size		1125913	1					
ANR	1126055	AdditiveExpression	1 + size		1125913	0		+			
ANR	1126056	PrimaryExpression	1		1125913	0					
ANR	1126057	Identifier	size		1125913	1					
ANR	1126058	ExpressionStatement	FAIL_IF ( ! inst )	110:2:4110:4124	1125913	2	True				
ANR	1126059	CallExpression	FAIL_IF ( ! inst )		1125913	0					
ANR	1126060	Callee	FAIL_IF		1125913	0					
ANR	1126061	Identifier	FAIL_IF		1125913	0					
ANR	1126062	ArgumentList	! inst		1125913	1					
ANR	1126063	Argument	! inst		1125913	0					
ANR	1126064	UnaryOperationExpression	! inst		1125913	0					
ANR	1126065	UnaryOperator	!		1125913	0					
ANR	1126066	Identifier	inst		1125913	1					
ANR	1126067	ExpressionStatement	INC_SIZE ( size )	111:2:4128:4142	1125913	3	True				
ANR	1126068	CallExpression	INC_SIZE ( size )		1125913	0					
ANR	1126069	Callee	INC_SIZE		1125913	0					
ANR	1126070	Identifier	INC_SIZE		1125913	0					
ANR	1126071	ArgumentList	size		1125913	1					
ANR	1126072	Argument	size		1125913	0					
ANR	1126073	Identifier	size		1125913	0					
ANR	1126074	IfStatement	if ( reg_map [ i ] >= 8 )		1125913	4					
ANR	1126075	Condition	reg_map [ i ] >= 8	112:6:4150:4164	1125913	0	True				
ANR	1126076	RelationalExpression	reg_map [ i ] >= 8		1125913	0		>=			
ANR	1126077	ArrayIndexing	reg_map [ i ]		1125913	0					
ANR	1126078	Identifier	reg_map		1125913	0					
ANR	1126079	Identifier	i		1125913	1					
ANR	1126080	PrimaryExpression	8		1125913	1					
ANR	1126081	ExpressionStatement	* inst ++ = REX_B	113:3:4170:4185	1125913	1	True				
ANR	1126082	AssignmentExpression	* inst ++ = REX_B		1125913	0		=			
ANR	1126083	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126084	UnaryOperator	*		1125913	0					
ANR	1126085	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126086	Identifier	inst		1125913	0					
ANR	1126087	IncDec	++		1125913	1					
ANR	1126088	Identifier	REX_B		1125913	1					
ANR	1126089	ExpressionStatement	PUSH_REG ( reg_lmap [ i ] )	114:2:4189:4210	1125913	5	True				
ANR	1126090	CallExpression	PUSH_REG ( reg_lmap [ i ] )		1125913	0					
ANR	1126091	Callee	PUSH_REG		1125913	0					
ANR	1126092	Identifier	PUSH_REG		1125913	0					
ANR	1126093	ArgumentList	reg_lmap [ i ]		1125913	1					
ANR	1126094	Argument	reg_lmap [ i ]		1125913	0					
ANR	1126095	ArrayIndexing	reg_lmap [ i ]		1125913	0					
ANR	1126096	Identifier	reg_lmap		1125913	0					
ANR	1126097	Identifier	i		1125913	1					
ANR	1126098	ForStatement	for ( i = scratches ; i >= SLJIT_FIRST_SAVED_REG ; i -- )		1125913	9					
ANR	1126099	ForInit	i = scratches ;	117:6:4222:4235	1125913	0	True				
ANR	1126100	AssignmentExpression	i = scratches		1125913	0		=			
ANR	1126101	Identifier	i		1125913	0					
ANR	1126102	Identifier	scratches		1125913	1					
ANR	1126103	Condition	i >= SLJIT_FIRST_SAVED_REG	117:21:4237:4262	1125913	1	True				
ANR	1126104	RelationalExpression	i >= SLJIT_FIRST_SAVED_REG		1125913	0		>=			
ANR	1126105	Identifier	i		1125913	0					
ANR	1126106	Identifier	SLJIT_FIRST_SAVED_REG		1125913	1					
ANR	1126107	PostIncDecOperationExpression	i --	117:49:4265:4267	1125913	2	True				
ANR	1126108	Identifier	i		1125913	0					
ANR	1126109	IncDec	--		1125913	1					
ANR	1126110	CompoundStatement		25:54:836:836	1125913	3					
ANR	1126111	ExpressionStatement	size = reg_map [ i ] >= 8 ? 2 : 1	118:2:4274:4304	1125913	0	True				
ANR	1126112	AssignmentExpression	size = reg_map [ i ] >= 8 ? 2 : 1		1125913	0		=			
ANR	1126113	Identifier	size		1125913	0					
ANR	1126114	ConditionalExpression	reg_map [ i ] >= 8 ? 2 : 1		1125913	1					
ANR	1126115	Condition	reg_map [ i ] >= 8		1125913	0					
ANR	1126116	RelationalExpression	reg_map [ i ] >= 8		1125913	0		>=			
ANR	1126117	ArrayIndexing	reg_map [ i ]		1125913	0					
ANR	1126118	Identifier	reg_map		1125913	0					
ANR	1126119	Identifier	i		1125913	1					
ANR	1126120	PrimaryExpression	8		1125913	1					
ANR	1126121	PrimaryExpression	2		1125913	1					
ANR	1126122	PrimaryExpression	1		1125913	2					
ANR	1126123	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	119:2:4308:4356	1125913	1	True				
ANR	1126124	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1125913	0		=			
ANR	1126125	Identifier	inst		1125913	0					
ANR	1126126	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1125913	1					
ANR	1126127	CastTarget	sljit_ub *		1125913	0					
ANR	1126128	CallExpression	"ensure_buf ( compiler , 1 + size )"		1125913	1					
ANR	1126129	Callee	ensure_buf		1125913	0					
ANR	1126130	Identifier	ensure_buf		1125913	0					
ANR	1126131	ArgumentList	compiler		1125913	1					
ANR	1126132	Argument	compiler		1125913	0					
ANR	1126133	Identifier	compiler		1125913	0					
ANR	1126134	Argument	1 + size		1125913	1					
ANR	1126135	AdditiveExpression	1 + size		1125913	0		+			
ANR	1126136	PrimaryExpression	1		1125913	0					
ANR	1126137	Identifier	size		1125913	1					
ANR	1126138	ExpressionStatement	FAIL_IF ( ! inst )	120:2:4360:4374	1125913	2	True				
ANR	1126139	CallExpression	FAIL_IF ( ! inst )		1125913	0					
ANR	1126140	Callee	FAIL_IF		1125913	0					
ANR	1126141	Identifier	FAIL_IF		1125913	0					
ANR	1126142	ArgumentList	! inst		1125913	1					
ANR	1126143	Argument	! inst		1125913	0					
ANR	1126144	UnaryOperationExpression	! inst		1125913	0					
ANR	1126145	UnaryOperator	!		1125913	0					
ANR	1126146	Identifier	inst		1125913	1					
ANR	1126147	ExpressionStatement	INC_SIZE ( size )	121:2:4378:4392	1125913	3	True				
ANR	1126148	CallExpression	INC_SIZE ( size )		1125913	0					
ANR	1126149	Callee	INC_SIZE		1125913	0					
ANR	1126150	Identifier	INC_SIZE		1125913	0					
ANR	1126151	ArgumentList	size		1125913	1					
ANR	1126152	Argument	size		1125913	0					
ANR	1126153	Identifier	size		1125913	0					
ANR	1126154	IfStatement	if ( reg_map [ i ] >= 8 )		1125913	4					
ANR	1126155	Condition	reg_map [ i ] >= 8	122:6:4400:4414	1125913	0	True				
ANR	1126156	RelationalExpression	reg_map [ i ] >= 8		1125913	0		>=			
ANR	1126157	ArrayIndexing	reg_map [ i ]		1125913	0					
ANR	1126158	Identifier	reg_map		1125913	0					
ANR	1126159	Identifier	i		1125913	1					
ANR	1126160	PrimaryExpression	8		1125913	1					
ANR	1126161	ExpressionStatement	* inst ++ = REX_B	123:3:4420:4435	1125913	1	True				
ANR	1126162	AssignmentExpression	* inst ++ = REX_B		1125913	0		=			
ANR	1126163	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126164	UnaryOperator	*		1125913	0					
ANR	1126165	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126166	Identifier	inst		1125913	0					
ANR	1126167	IncDec	++		1125913	1					
ANR	1126168	Identifier	REX_B		1125913	1					
ANR	1126169	ExpressionStatement	PUSH_REG ( reg_lmap [ i ] )	124:2:4439:4460	1125913	5	True				
ANR	1126170	CallExpression	PUSH_REG ( reg_lmap [ i ] )		1125913	0					
ANR	1126171	Callee	PUSH_REG		1125913	0					
ANR	1126172	Identifier	PUSH_REG		1125913	0					
ANR	1126173	ArgumentList	reg_lmap [ i ]		1125913	1					
ANR	1126174	Argument	reg_lmap [ i ]		1125913	0					
ANR	1126175	ArrayIndexing	reg_lmap [ i ]		1125913	0					
ANR	1126176	Identifier	reg_lmap		1125913	0					
ANR	1126177	Identifier	i		1125913	1					
ANR	1126178	IfStatement	if ( args > 0 )		1125913	10					
ANR	1126179	Condition	args > 0	127:5:4471:4478	1125913	0	True				
ANR	1126180	RelationalExpression	args > 0		1125913	0		>			
ANR	1126181	Identifier	args		1125913	0					
ANR	1126182	PrimaryExpression	0		1125913	1					
ANR	1126183	CompoundStatement		35:15:1047:1047	1125913	1					
ANR	1126184	ExpressionStatement	size = args * 3	128:2:4485:4500	1125913	0	True				
ANR	1126185	AssignmentExpression	size = args * 3		1125913	0		=			
ANR	1126186	Identifier	size		1125913	0					
ANR	1126187	MultiplicativeExpression	args * 3		1125913	1		*			
ANR	1126188	Identifier	args		1125913	0					
ANR	1126189	PrimaryExpression	3		1125913	1					
ANR	1126190	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	129:2:4504:4552	1125913	1	True				
ANR	1126191	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1125913	0		=			
ANR	1126192	Identifier	inst		1125913	0					
ANR	1126193	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1125913	1					
ANR	1126194	CastTarget	sljit_ub *		1125913	0					
ANR	1126195	CallExpression	"ensure_buf ( compiler , 1 + size )"		1125913	1					
ANR	1126196	Callee	ensure_buf		1125913	0					
ANR	1126197	Identifier	ensure_buf		1125913	0					
ANR	1126198	ArgumentList	compiler		1125913	1					
ANR	1126199	Argument	compiler		1125913	0					
ANR	1126200	Identifier	compiler		1125913	0					
ANR	1126201	Argument	1 + size		1125913	1					
ANR	1126202	AdditiveExpression	1 + size		1125913	0		+			
ANR	1126203	PrimaryExpression	1		1125913	0					
ANR	1126204	Identifier	size		1125913	1					
ANR	1126205	ExpressionStatement	FAIL_IF ( ! inst )	130:2:4556:4570	1125913	2	True				
ANR	1126206	CallExpression	FAIL_IF ( ! inst )		1125913	0					
ANR	1126207	Callee	FAIL_IF		1125913	0					
ANR	1126208	Identifier	FAIL_IF		1125913	0					
ANR	1126209	ArgumentList	! inst		1125913	1					
ANR	1126210	Argument	! inst		1125913	0					
ANR	1126211	UnaryOperationExpression	! inst		1125913	0					
ANR	1126212	UnaryOperator	!		1125913	0					
ANR	1126213	Identifier	inst		1125913	1					
ANR	1126214	ExpressionStatement	INC_SIZE ( size )	132:2:4575:4589	1125913	3	True				
ANR	1126215	CallExpression	INC_SIZE ( size )		1125913	0					
ANR	1126216	Callee	INC_SIZE		1125913	0					
ANR	1126217	Identifier	INC_SIZE		1125913	0					
ANR	1126218	ArgumentList	size		1125913	1					
ANR	1126219	Argument	size		1125913	0					
ANR	1126220	Identifier	size		1125913	0					
ANR	1126221	IfStatement	if ( args > 0 )		1125913	4					
ANR	1126222	Condition	args > 0	135:6:4613:4620	1125913	0	True				
ANR	1126223	RelationalExpression	args > 0		1125913	0		>			
ANR	1126224	Identifier	args		1125913	0					
ANR	1126225	PrimaryExpression	0		1125913	1					
ANR	1126226	CompoundStatement		43:16:1189:1189	1125913	1					
ANR	1126227	ExpressionStatement	* inst ++ = REX_W	136:3:4628:4643	1125913	0	True				
ANR	1126228	AssignmentExpression	* inst ++ = REX_W		1125913	0		=			
ANR	1126229	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126230	UnaryOperator	*		1125913	0					
ANR	1126231	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126232	Identifier	inst		1125913	0					
ANR	1126233	IncDec	++		1125913	1					
ANR	1126234	Identifier	REX_W		1125913	1					
ANR	1126235	ExpressionStatement	* inst ++ = MOV_r_rm	137:3:4648:4666	1125913	1	True				
ANR	1126236	AssignmentExpression	* inst ++ = MOV_r_rm		1125913	0		=			
ANR	1126237	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126238	UnaryOperator	*		1125913	0					
ANR	1126239	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126240	Identifier	inst		1125913	0					
ANR	1126241	IncDec	++		1125913	1					
ANR	1126242	Identifier	MOV_r_rm		1125913	1					
ANR	1126243	ExpressionStatement	* inst ++ = MOD_REG | ( reg_map [ SLJIT_S0 ] << 3 ) | 0x7	138:3:4671:4731	1125913	2	True				
ANR	1126244	AssignmentExpression	* inst ++ = MOD_REG | ( reg_map [ SLJIT_S0 ] << 3 ) | 0x7		1125913	0		=			
ANR	1126245	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126246	UnaryOperator	*		1125913	0					
ANR	1126247	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126248	Identifier	inst		1125913	0					
ANR	1126249	IncDec	++		1125913	1					
ANR	1126250	InclusiveOrExpression	MOD_REG | ( reg_map [ SLJIT_S0 ] << 3 ) | 0x7		1125913	1		|			
ANR	1126251	Identifier	MOD_REG		1125913	0					
ANR	1126252	InclusiveOrExpression	( reg_map [ SLJIT_S0 ] << 3 ) | 0x7		1125913	1		|			
ANR	1126253	ShiftExpression	reg_map [ SLJIT_S0 ] << 3		1125913	0		<<			
ANR	1126254	ArrayIndexing	reg_map [ SLJIT_S0 ]		1125913	0					
ANR	1126255	Identifier	reg_map		1125913	0					
ANR	1126256	Identifier	SLJIT_S0		1125913	1					
ANR	1126257	PrimaryExpression	3		1125913	1					
ANR	1126258	PrimaryExpression	0x7		1125913	1					
ANR	1126259	IfStatement	if ( args > 1 )		1125913	5					
ANR	1126260	Condition	args > 1	140:6:4743:4750	1125913	0	True				
ANR	1126261	RelationalExpression	args > 1		1125913	0		>			
ANR	1126262	Identifier	args		1125913	0					
ANR	1126263	PrimaryExpression	1		1125913	1					
ANR	1126264	CompoundStatement		48:16:1319:1319	1125913	1					
ANR	1126265	ExpressionStatement	* inst ++ = REX_W | REX_R	141:3:4758:4781	1125913	0	True				
ANR	1126266	AssignmentExpression	* inst ++ = REX_W | REX_R		1125913	0		=			
ANR	1126267	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126268	UnaryOperator	*		1125913	0					
ANR	1126269	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126270	Identifier	inst		1125913	0					
ANR	1126271	IncDec	++		1125913	1					
ANR	1126272	InclusiveOrExpression	REX_W | REX_R		1125913	1		|			
ANR	1126273	Identifier	REX_W		1125913	0					
ANR	1126274	Identifier	REX_R		1125913	1					
ANR	1126275	ExpressionStatement	* inst ++ = MOV_r_rm	142:3:4786:4804	1125913	1	True				
ANR	1126276	AssignmentExpression	* inst ++ = MOV_r_rm		1125913	0		=			
ANR	1126277	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126278	UnaryOperator	*		1125913	0					
ANR	1126279	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126280	Identifier	inst		1125913	0					
ANR	1126281	IncDec	++		1125913	1					
ANR	1126282	Identifier	MOV_r_rm		1125913	1					
ANR	1126283	ExpressionStatement	* inst ++ = MOD_REG | ( reg_lmap [ SLJIT_S1 ] << 3 ) | 0x6	143:3:4809:4870	1125913	2	True				
ANR	1126284	AssignmentExpression	* inst ++ = MOD_REG | ( reg_lmap [ SLJIT_S1 ] << 3 ) | 0x6		1125913	0		=			
ANR	1126285	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126286	UnaryOperator	*		1125913	0					
ANR	1126287	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126288	Identifier	inst		1125913	0					
ANR	1126289	IncDec	++		1125913	1					
ANR	1126290	InclusiveOrExpression	MOD_REG | ( reg_lmap [ SLJIT_S1 ] << 3 ) | 0x6		1125913	1		|			
ANR	1126291	Identifier	MOD_REG		1125913	0					
ANR	1126292	InclusiveOrExpression	( reg_lmap [ SLJIT_S1 ] << 3 ) | 0x6		1125913	1		|			
ANR	1126293	ShiftExpression	reg_lmap [ SLJIT_S1 ] << 3		1125913	0		<<			
ANR	1126294	ArrayIndexing	reg_lmap [ SLJIT_S1 ]		1125913	0					
ANR	1126295	Identifier	reg_lmap		1125913	0					
ANR	1126296	Identifier	SLJIT_S1		1125913	1					
ANR	1126297	PrimaryExpression	3		1125913	1					
ANR	1126298	PrimaryExpression	0x6		1125913	1					
ANR	1126299	IfStatement	if ( args > 2 )		1125913	6					
ANR	1126300	Condition	args > 2	145:6:4882:4889	1125913	0	True				
ANR	1126301	RelationalExpression	args > 2		1125913	0		>			
ANR	1126302	Identifier	args		1125913	0					
ANR	1126303	PrimaryExpression	2		1125913	1					
ANR	1126304	CompoundStatement		53:16:1458:1458	1125913	1					
ANR	1126305	ExpressionStatement	* inst ++ = REX_W | REX_R	146:3:4897:4920	1125913	0	True				
ANR	1126306	AssignmentExpression	* inst ++ = REX_W | REX_R		1125913	0		=			
ANR	1126307	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126308	UnaryOperator	*		1125913	0					
ANR	1126309	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126310	Identifier	inst		1125913	0					
ANR	1126311	IncDec	++		1125913	1					
ANR	1126312	InclusiveOrExpression	REX_W | REX_R		1125913	1		|			
ANR	1126313	Identifier	REX_W		1125913	0					
ANR	1126314	Identifier	REX_R		1125913	1					
ANR	1126315	ExpressionStatement	* inst ++ = MOV_r_rm	147:3:4925:4943	1125913	1	True				
ANR	1126316	AssignmentExpression	* inst ++ = MOV_r_rm		1125913	0		=			
ANR	1126317	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126318	UnaryOperator	*		1125913	0					
ANR	1126319	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126320	Identifier	inst		1125913	0					
ANR	1126321	IncDec	++		1125913	1					
ANR	1126322	Identifier	MOV_r_rm		1125913	1					
ANR	1126323	ExpressionStatement	* inst ++ = MOD_REG | ( reg_lmap [ SLJIT_S2 ] << 3 ) | 0x2	148:3:4948:5009	1125913	2	True				
ANR	1126324	AssignmentExpression	* inst ++ = MOD_REG | ( reg_lmap [ SLJIT_S2 ] << 3 ) | 0x2		1125913	0		=			
ANR	1126325	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126326	UnaryOperator	*		1125913	0					
ANR	1126327	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126328	Identifier	inst		1125913	0					
ANR	1126329	IncDec	++		1125913	1					
ANR	1126330	InclusiveOrExpression	MOD_REG | ( reg_lmap [ SLJIT_S2 ] << 3 ) | 0x2		1125913	1		|			
ANR	1126331	Identifier	MOD_REG		1125913	0					
ANR	1126332	InclusiveOrExpression	( reg_lmap [ SLJIT_S2 ] << 3 ) | 0x2		1125913	1		|			
ANR	1126333	ShiftExpression	reg_lmap [ SLJIT_S2 ] << 3		1125913	0		<<			
ANR	1126334	ArrayIndexing	reg_lmap [ SLJIT_S2 ]		1125913	0					
ANR	1126335	Identifier	reg_lmap		1125913	0					
ANR	1126336	Identifier	SLJIT_S2		1125913	1					
ANR	1126337	PrimaryExpression	3		1125913	1					
ANR	1126338	PrimaryExpression	0x2		1125913	1					
ANR	1126339	ExpressionStatement	local_size = ( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size	169:1:5430:5534	1125913	11	True				
ANR	1126340	AssignmentExpression	local_size = ( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size		1125913	0		=			
ANR	1126341	Identifier	local_size		1125913	0					
ANR	1126342	AdditiveExpression	( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size		1125913	1		-			
ANR	1126343	BitAndExpression	( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15		1125913	0		&			
ANR	1126344	AdditiveExpression	local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15		1125913	0		+			
ANR	1126345	Identifier	local_size		1125913	0					
ANR	1126346	AdditiveExpression	SLJIT_LOCALS_OFFSET + saved_register_size + 15		1125913	1		+			
ANR	1126347	Identifier	SLJIT_LOCALS_OFFSET		1125913	0					
ANR	1126348	AdditiveExpression	saved_register_size + 15		1125913	1		+			
ANR	1126349	Identifier	saved_register_size		1125913	0					
ANR	1126350	PrimaryExpression	15		1125913	1					
ANR	1126351	Identifier	~15		1125913	1					
ANR	1126352	Identifier	saved_register_size		1125913	1					
ANR	1126353	ExpressionStatement	compiler -> local_size = local_size	170:1:5537:5570	1125913	12	True				
ANR	1126354	AssignmentExpression	compiler -> local_size = local_size		1125913	0		=			
ANR	1126355	PtrMemberAccess	compiler -> local_size		1125913	0					
ANR	1126356	Identifier	compiler		1125913	0					
ANR	1126357	Identifier	local_size		1125913	1					
ANR	1126358	Identifier	local_size		1125913	1					
ANR	1126359	IfStatement	if ( local_size > 1024 )		1125913	13					
ANR	1126360	Condition	local_size > 1024	173:5:5592:5608	1125913	0	True				
ANR	1126361	RelationalExpression	local_size > 1024		1125913	0		>			
ANR	1126362	Identifier	local_size		1125913	0					
ANR	1126363	PrimaryExpression	1024		1125913	1					
ANR	1126364	CompoundStatement		81:24:2177:2177	1125913	1					
ANR	1126365	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 + ( 3 + sizeof ( sljit_si ) ) )"	175:2:5679:5749	1125913	0	True				
ANR	1126366	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 + ( 3 + sizeof ( sljit_si ) ) )"		1125913	0		=			
ANR	1126367	Identifier	inst		1125913	0					
ANR	1126368	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 4 + ( 3 + sizeof ( sljit_si ) ) )"		1125913	1					
ANR	1126369	CastTarget	sljit_ub *		1125913	0					
ANR	1126370	CallExpression	"ensure_buf ( compiler , 1 + 4 + ( 3 + sizeof ( sljit_si ) ) )"		1125913	1					
ANR	1126371	Callee	ensure_buf		1125913	0					
ANR	1126372	Identifier	ensure_buf		1125913	0					
ANR	1126373	ArgumentList	compiler		1125913	1					
ANR	1126374	Argument	compiler		1125913	0					
ANR	1126375	Identifier	compiler		1125913	0					
ANR	1126376	Argument	1 + 4 + ( 3 + sizeof ( sljit_si ) )		1125913	1					
ANR	1126377	AdditiveExpression	1 + 4 + ( 3 + sizeof ( sljit_si ) )		1125913	0		+			
ANR	1126378	PrimaryExpression	1		1125913	0					
ANR	1126379	AdditiveExpression	4 + ( 3 + sizeof ( sljit_si ) )		1125913	1		+			
ANR	1126380	PrimaryExpression	4		1125913	0					
ANR	1126381	AdditiveExpression	3 + sizeof ( sljit_si )		1125913	1		+			
ANR	1126382	PrimaryExpression	3		1125913	0					
ANR	1126383	SizeofExpression	sizeof ( sljit_si )		1125913	1					
ANR	1126384	Sizeof	sizeof		1125913	0					
ANR	1126385	SizeofOperand	sljit_si		1125913	1					
ANR	1126386	ExpressionStatement	FAIL_IF ( ! inst )	176:2:5753:5767	1125913	1	True				
ANR	1126387	CallExpression	FAIL_IF ( ! inst )		1125913	0					
ANR	1126388	Callee	FAIL_IF		1125913	0					
ANR	1126389	Identifier	FAIL_IF		1125913	0					
ANR	1126390	ArgumentList	! inst		1125913	1					
ANR	1126391	Argument	! inst		1125913	0					
ANR	1126392	UnaryOperationExpression	! inst		1125913	0					
ANR	1126393	UnaryOperator	!		1125913	0					
ANR	1126394	Identifier	inst		1125913	1					
ANR	1126395	ExpressionStatement	INC_SIZE ( 4 + ( 3 + sizeof ( sljit_si ) ) )	177:2:5771:5807	1125913	2	True				
ANR	1126396	CallExpression	INC_SIZE ( 4 + ( 3 + sizeof ( sljit_si ) ) )		1125913	0					
ANR	1126397	Callee	INC_SIZE		1125913	0					
ANR	1126398	Identifier	INC_SIZE		1125913	0					
ANR	1126399	ArgumentList	4 + ( 3 + sizeof ( sljit_si ) )		1125913	1					
ANR	1126400	Argument	4 + ( 3 + sizeof ( sljit_si ) )		1125913	0					
ANR	1126401	AdditiveExpression	4 + ( 3 + sizeof ( sljit_si ) )		1125913	0		+			
ANR	1126402	PrimaryExpression	4		1125913	0					
ANR	1126403	AdditiveExpression	3 + sizeof ( sljit_si )		1125913	1		+			
ANR	1126404	PrimaryExpression	3		1125913	0					
ANR	1126405	SizeofExpression	sizeof ( sljit_si )		1125913	1					
ANR	1126406	Sizeof	sizeof		1125913	0					
ANR	1126407	SizeofOperand	sljit_si		1125913	1					
ANR	1126408	ExpressionStatement	* inst ++ = REX_W	178:2:5811:5826	1125913	3	True				
ANR	1126409	AssignmentExpression	* inst ++ = REX_W		1125913	0		=			
ANR	1126410	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126411	UnaryOperator	*		1125913	0					
ANR	1126412	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126413	Identifier	inst		1125913	0					
ANR	1126414	IncDec	++		1125913	1					
ANR	1126415	Identifier	REX_W		1125913	1					
ANR	1126416	ExpressionStatement	* inst ++ = GROUP_BINARY_83	179:2:5830:5855	1125913	4	True				
ANR	1126417	AssignmentExpression	* inst ++ = GROUP_BINARY_83		1125913	0		=			
ANR	1126418	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126419	UnaryOperator	*		1125913	0					
ANR	1126420	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126421	Identifier	inst		1125913	0					
ANR	1126422	IncDec	++		1125913	1					
ANR	1126423	Identifier	GROUP_BINARY_83		1125913	1					
ANR	1126424	ExpressionStatement	* inst ++ = MOD_REG | SUB | 4	180:2:5859:5886	1125913	5	True				
ANR	1126425	AssignmentExpression	* inst ++ = MOD_REG | SUB | 4		1125913	0		=			
ANR	1126426	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126427	UnaryOperator	*		1125913	0					
ANR	1126428	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126429	Identifier	inst		1125913	0					
ANR	1126430	IncDec	++		1125913	1					
ANR	1126431	InclusiveOrExpression	MOD_REG | SUB | 4		1125913	1		|			
ANR	1126432	Identifier	MOD_REG		1125913	0					
ANR	1126433	InclusiveOrExpression	SUB | 4		1125913	1		|			
ANR	1126434	Identifier	SUB		1125913	0					
ANR	1126435	PrimaryExpression	4		1125913	1					
ANR	1126436	ExpressionStatement	SLJIT_ASSERT ( ! ( saved_register_size & 0x7 ) )	182:2:5951:5993	1125913	6	True				
ANR	1126437	CallExpression	SLJIT_ASSERT ( ! ( saved_register_size & 0x7 ) )		1125913	0					
ANR	1126438	Callee	SLJIT_ASSERT		1125913	0					
ANR	1126439	Identifier	SLJIT_ASSERT		1125913	0					
ANR	1126440	ArgumentList	! ( saved_register_size & 0x7 )		1125913	1					
ANR	1126441	Argument	! ( saved_register_size & 0x7 )		1125913	0					
ANR	1126442	UnaryOperationExpression	! ( saved_register_size & 0x7 )		1125913	0					
ANR	1126443	UnaryOperator	!		1125913	0					
ANR	1126444	BitAndExpression	saved_register_size & 0x7		1125913	1		&			
ANR	1126445	Identifier	saved_register_size		1125913	0					
ANR	1126446	PrimaryExpression	0x7		1125913	1					
ANR	1126447	IfStatement	if ( saved_register_size & 0x8 )		1125913	7					
ANR	1126448	Condition	saved_register_size & 0x8	184:6:6029:6053	1125913	0	True				
ANR	1126449	BitAndExpression	saved_register_size & 0x8		1125913	0		&			
ANR	1126450	Identifier	saved_register_size		1125913	0					
ANR	1126451	PrimaryExpression	0x8		1125913	1					
ANR	1126452	CompoundStatement		92:33:2622:2622	1125913	1					
ANR	1126453	ExpressionStatement	* inst ++ = 5 * sizeof ( sljit_sw )	185:3:6061:6091	1125913	0	True				
ANR	1126454	AssignmentExpression	* inst ++ = 5 * sizeof ( sljit_sw )		1125913	0		=			
ANR	1126455	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126456	UnaryOperator	*		1125913	0					
ANR	1126457	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126458	Identifier	inst		1125913	0					
ANR	1126459	IncDec	++		1125913	1					
ANR	1126460	MultiplicativeExpression	5 * sizeof ( sljit_sw )		1125913	1		*			
ANR	1126461	PrimaryExpression	5		1125913	0					
ANR	1126462	SizeofExpression	sizeof ( sljit_sw )		1125913	1					
ANR	1126463	Sizeof	sizeof		1125913	0					
ANR	1126464	SizeofOperand	sljit_sw		1125913	1					
ANR	1126465	ExpressionStatement	local_size -= 5 * sizeof ( sljit_sw )	186:3:6096:6130	1125913	1	True				
ANR	1126466	AssignmentExpression	local_size -= 5 * sizeof ( sljit_sw )		1125913	0		-=			
ANR	1126467	Identifier	local_size		1125913	0					
ANR	1126468	MultiplicativeExpression	5 * sizeof ( sljit_sw )		1125913	1		*			
ANR	1126469	PrimaryExpression	5		1125913	0					
ANR	1126470	SizeofExpression	sizeof ( sljit_sw )		1125913	1					
ANR	1126471	Sizeof	sizeof		1125913	0					
ANR	1126472	SizeofOperand	sljit_sw		1125913	1					
ANR	1126473	ElseStatement	else		1125913	0					
ANR	1126474	CompoundStatement		95:9:2707:2707	1125913	0					
ANR	1126475	ExpressionStatement	* inst ++ = 4 * sizeof ( sljit_sw )	188:3:6146:6176	1125913	0	True				
ANR	1126476	AssignmentExpression	* inst ++ = 4 * sizeof ( sljit_sw )		1125913	0		=			
ANR	1126477	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126478	UnaryOperator	*		1125913	0					
ANR	1126479	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126480	Identifier	inst		1125913	0					
ANR	1126481	IncDec	++		1125913	1					
ANR	1126482	MultiplicativeExpression	4 * sizeof ( sljit_sw )		1125913	1		*			
ANR	1126483	PrimaryExpression	4		1125913	0					
ANR	1126484	SizeofExpression	sizeof ( sljit_sw )		1125913	1					
ANR	1126485	Sizeof	sizeof		1125913	0					
ANR	1126486	SizeofOperand	sljit_sw		1125913	1					
ANR	1126487	ExpressionStatement	local_size -= 4 * sizeof ( sljit_sw )	189:3:6181:6215	1125913	1	True				
ANR	1126488	AssignmentExpression	local_size -= 4 * sizeof ( sljit_sw )		1125913	0		-=			
ANR	1126489	Identifier	local_size		1125913	0					
ANR	1126490	MultiplicativeExpression	4 * sizeof ( sljit_sw )		1125913	1		*			
ANR	1126491	PrimaryExpression	4		1125913	0					
ANR	1126492	SizeofExpression	sizeof ( sljit_sw )		1125913	1					
ANR	1126493	Sizeof	sizeof		1125913	0					
ANR	1126494	SizeofOperand	sljit_sw		1125913	1					
ANR	1126495	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( reg_map [ SLJIT_R0 ] < 8 , temporary_reg1_is_loreg )"	192:2:6250:6318	1125913	8	True				
ANR	1126496	CallExpression	"SLJIT_COMPILE_ASSERT ( reg_map [ SLJIT_R0 ] < 8 , temporary_reg1_is_loreg )"		1125913	0					
ANR	1126497	Callee	SLJIT_COMPILE_ASSERT		1125913	0					
ANR	1126498	Identifier	SLJIT_COMPILE_ASSERT		1125913	0					
ANR	1126499	ArgumentList	reg_map [ SLJIT_R0 ] < 8		1125913	1					
ANR	1126500	Argument	reg_map [ SLJIT_R0 ] < 8		1125913	0					
ANR	1126501	RelationalExpression	reg_map [ SLJIT_R0 ] < 8		1125913	0		<			
ANR	1126502	ArrayIndexing	reg_map [ SLJIT_R0 ]		1125913	0					
ANR	1126503	Identifier	reg_map		1125913	0					
ANR	1126504	Identifier	SLJIT_R0		1125913	1					
ANR	1126505	PrimaryExpression	8		1125913	1					
ANR	1126506	Argument	temporary_reg1_is_loreg		1125913	1					
ANR	1126507	Identifier	temporary_reg1_is_loreg		1125913	0					
ANR	1126508	ExpressionStatement	* inst ++ = REX_W	193:2:6322:6337	1125913	9	True				
ANR	1126509	AssignmentExpression	* inst ++ = REX_W		1125913	0		=			
ANR	1126510	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126511	UnaryOperator	*		1125913	0					
ANR	1126512	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126513	Identifier	inst		1125913	0					
ANR	1126514	IncDec	++		1125913	1					
ANR	1126515	Identifier	REX_W		1125913	1					
ANR	1126516	ExpressionStatement	* inst ++ = MOV_rm_i32	194:2:6341:6361	1125913	10	True				
ANR	1126517	AssignmentExpression	* inst ++ = MOV_rm_i32		1125913	0		=			
ANR	1126518	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126519	UnaryOperator	*		1125913	0					
ANR	1126520	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126521	Identifier	inst		1125913	0					
ANR	1126522	IncDec	++		1125913	1					
ANR	1126523	Identifier	MOV_rm_i32		1125913	1					
ANR	1126524	ExpressionStatement	* inst ++ = MOD_REG | reg_lmap [ SLJIT_R0 ]	195:2:6365:6403	1125913	11	True				
ANR	1126525	AssignmentExpression	* inst ++ = MOD_REG | reg_lmap [ SLJIT_R0 ]		1125913	0		=			
ANR	1126526	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126527	UnaryOperator	*		1125913	0					
ANR	1126528	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126529	Identifier	inst		1125913	0					
ANR	1126530	IncDec	++		1125913	1					
ANR	1126531	InclusiveOrExpression	MOD_REG | reg_lmap [ SLJIT_R0 ]		1125913	1		|			
ANR	1126532	Identifier	MOD_REG		1125913	0					
ANR	1126533	ArrayIndexing	reg_lmap [ SLJIT_R0 ]		1125913	1					
ANR	1126534	Identifier	reg_lmap		1125913	0					
ANR	1126535	Identifier	SLJIT_R0		1125913	1					
ANR	1126536	ExpressionStatement	* ( sljit_si * ) inst = local_size	196:2:6407:6436	1125913	12	True				
ANR	1126537	AssignmentExpression	* ( sljit_si * ) inst = local_size		1125913	0		=			
ANR	1126538	UnaryOperationExpression	* ( sljit_si * ) inst		1125913	0					
ANR	1126539	UnaryOperator	*		1125913	0					
ANR	1126540	CastExpression	( sljit_si * ) inst		1125913	1					
ANR	1126541	CastTarget	sljit_si *		1125913	0					
ANR	1126542	Identifier	inst		1125913	1					
ANR	1126543	Identifier	local_size		1125913	1					
ANR	1126544	Statement	||	198:3:6488:6489	1125913	13	True				
ANR	1126545	Statement	(	198:6:6491:6491	1125913	14	True				
ANR	1126546	Statement	defined	198:7:6492:6498	1125913	15	True				
ANR	1126547	Statement	SLJIT_ARGUMENT_CHECKS	198:15:6500:6520	1125913	16	True				
ANR	1126548	Statement	&&	198:37:6522:6523	1125913	17	True				
ANR	1126549	Statement	SLJIT_ARGUMENT_CHECKS	198:40:6525:6545	1125913	18	True				
ANR	1126550	Statement	)	198:61:6546:6546	1125913	19	True				
ANR	1126551	ExpressionStatement	compiler -> skip_checks = 1	199:2:6550:6575	1125913	20	True				
ANR	1126552	AssignmentExpression	compiler -> skip_checks = 1		1125913	0		=			
ANR	1126553	PtrMemberAccess	compiler -> skip_checks		1125913	0					
ANR	1126554	Identifier	compiler		1125913	0					
ANR	1126555	Identifier	skip_checks		1125913	1					
ANR	1126556	PrimaryExpression	1		1125913	1					
ANR	1126557	ExpressionStatement	"FAIL_IF ( sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) ) )"	201:2:6586:6682	1125913	21	True				
ANR	1126558	CallExpression	"FAIL_IF ( sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) ) )"		1125913	0					
ANR	1126559	Callee	FAIL_IF		1125913	0					
ANR	1126560	Identifier	FAIL_IF		1125913	0					
ANR	1126561	ArgumentList	"sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) )"		1125913	1					
ANR	1126562	Argument	"sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) )"		1125913	0					
ANR	1126563	CallExpression	"sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) )"		1125913	0					
ANR	1126564	Callee	sljit_emit_ijump		1125913	0					
ANR	1126565	Identifier	sljit_emit_ijump		1125913	0					
ANR	1126566	ArgumentList	compiler		1125913	1					
ANR	1126567	Argument	compiler		1125913	0					
ANR	1126568	Identifier	compiler		1125913	0					
ANR	1126569	Argument	SLJIT_CALL1		1125913	1					
ANR	1126570	Identifier	SLJIT_CALL1		1125913	0					
ANR	1126571	Argument	SLJIT_IMM		1125913	2					
ANR	1126572	Identifier	SLJIT_IMM		1125913	0					
ANR	1126573	Argument	SLJIT_FUNC_OFFSET ( sljit_grow_stack )		1125913	3					
ANR	1126574	CallExpression	SLJIT_FUNC_OFFSET ( sljit_grow_stack )		1125913	0					
ANR	1126575	Callee	SLJIT_FUNC_OFFSET		1125913	0					
ANR	1126576	Identifier	SLJIT_FUNC_OFFSET		1125913	0					
ANR	1126577	ArgumentList	sljit_grow_stack		1125913	1					
ANR	1126578	Argument	sljit_grow_stack		1125913	0					
ANR	1126579	Identifier	sljit_grow_stack		1125913	0					
ANR	1126580	ExpressionStatement	SLJIT_ASSERT ( local_size > 0 )	205:1:6696:6724	1125913	14	True				
ANR	1126581	CallExpression	SLJIT_ASSERT ( local_size > 0 )		1125913	0					
ANR	1126582	Callee	SLJIT_ASSERT		1125913	0					
ANR	1126583	Identifier	SLJIT_ASSERT		1125913	0					
ANR	1126584	ArgumentList	local_size > 0		1125913	1					
ANR	1126585	Argument	local_size > 0		1125913	0					
ANR	1126586	RelationalExpression	local_size > 0		1125913	0		>			
ANR	1126587	Identifier	local_size		1125913	0					
ANR	1126588	PrimaryExpression	0		1125913	1					
ANR	1126589	IfStatement	if ( local_size <= 127 )		1125913	15					
ANR	1126590	Condition	local_size <= 127	206:5:6731:6747	1125913	0	True				
ANR	1126591	RelationalExpression	local_size <= 127		1125913	0		<=			
ANR	1126592	Identifier	local_size		1125913	0					
ANR	1126593	PrimaryExpression	127		1125913	1					
ANR	1126594	CompoundStatement		114:24:3316:3316	1125913	1					
ANR	1126595	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"	207:2:6754:6799	1125913	0	True				
ANR	1126596	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"		1125913	0		=			
ANR	1126597	Identifier	inst		1125913	0					
ANR	1126598	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"		1125913	1					
ANR	1126599	CastTarget	sljit_ub *		1125913	0					
ANR	1126600	CallExpression	"ensure_buf ( compiler , 1 + 4 )"		1125913	1					
ANR	1126601	Callee	ensure_buf		1125913	0					
ANR	1126602	Identifier	ensure_buf		1125913	0					
ANR	1126603	ArgumentList	compiler		1125913	1					
ANR	1126604	Argument	compiler		1125913	0					
ANR	1126605	Identifier	compiler		1125913	0					
ANR	1126606	Argument	1 + 4		1125913	1					
ANR	1126607	AdditiveExpression	1 + 4		1125913	0		+			
ANR	1126608	PrimaryExpression	1		1125913	0					
ANR	1126609	PrimaryExpression	4		1125913	1					
ANR	1126610	ExpressionStatement	FAIL_IF ( ! inst )	208:2:6803:6817	1125913	1	True				
ANR	1126611	CallExpression	FAIL_IF ( ! inst )		1125913	0					
ANR	1126612	Callee	FAIL_IF		1125913	0					
ANR	1126613	Identifier	FAIL_IF		1125913	0					
ANR	1126614	ArgumentList	! inst		1125913	1					
ANR	1126615	Argument	! inst		1125913	0					
ANR	1126616	UnaryOperationExpression	! inst		1125913	0					
ANR	1126617	UnaryOperator	!		1125913	0					
ANR	1126618	Identifier	inst		1125913	1					
ANR	1126619	ExpressionStatement	INC_SIZE ( 4 )	209:2:6821:6832	1125913	2	True				
ANR	1126620	CallExpression	INC_SIZE ( 4 )		1125913	0					
ANR	1126621	Callee	INC_SIZE		1125913	0					
ANR	1126622	Identifier	INC_SIZE		1125913	0					
ANR	1126623	ArgumentList	4		1125913	1					
ANR	1126624	Argument	4		1125913	0					
ANR	1126625	PrimaryExpression	4		1125913	0					
ANR	1126626	ExpressionStatement	* inst ++ = REX_W	210:2:6836:6851	1125913	3	True				
ANR	1126627	AssignmentExpression	* inst ++ = REX_W		1125913	0		=			
ANR	1126628	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126629	UnaryOperator	*		1125913	0					
ANR	1126630	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126631	Identifier	inst		1125913	0					
ANR	1126632	IncDec	++		1125913	1					
ANR	1126633	Identifier	REX_W		1125913	1					
ANR	1126634	ExpressionStatement	* inst ++ = GROUP_BINARY_83	211:2:6855:6880	1125913	4	True				
ANR	1126635	AssignmentExpression	* inst ++ = GROUP_BINARY_83		1125913	0		=			
ANR	1126636	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126637	UnaryOperator	*		1125913	0					
ANR	1126638	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126639	Identifier	inst		1125913	0					
ANR	1126640	IncDec	++		1125913	1					
ANR	1126641	Identifier	GROUP_BINARY_83		1125913	1					
ANR	1126642	ExpressionStatement	* inst ++ = MOD_REG | SUB | 4	212:2:6884:6911	1125913	5	True				
ANR	1126643	AssignmentExpression	* inst ++ = MOD_REG | SUB | 4		1125913	0		=			
ANR	1126644	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126645	UnaryOperator	*		1125913	0					
ANR	1126646	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126647	Identifier	inst		1125913	0					
ANR	1126648	IncDec	++		1125913	1					
ANR	1126649	InclusiveOrExpression	MOD_REG | SUB | 4		1125913	1		|			
ANR	1126650	Identifier	MOD_REG		1125913	0					
ANR	1126651	InclusiveOrExpression	SUB | 4		1125913	1		|			
ANR	1126652	Identifier	SUB		1125913	0					
ANR	1126653	PrimaryExpression	4		1125913	1					
ANR	1126654	ExpressionStatement	* inst ++ = local_size	213:2:6915:6935	1125913	6	True				
ANR	1126655	AssignmentExpression	* inst ++ = local_size		1125913	0		=			
ANR	1126656	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126657	UnaryOperator	*		1125913	0					
ANR	1126658	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126659	Identifier	inst		1125913	0					
ANR	1126660	IncDec	++		1125913	1					
ANR	1126661	Identifier	local_size		1125913	1					
ANR	1126662	ElseStatement	else		1125913	0					
ANR	1126663	CompoundStatement		123:6:3512:3512	1125913	0					
ANR	1126664	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"	216:2:6950:6995	1125913	0	True				
ANR	1126665	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"		1125913	0		=			
ANR	1126666	Identifier	inst		1125913	0					
ANR	1126667	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"		1125913	1					
ANR	1126668	CastTarget	sljit_ub *		1125913	0					
ANR	1126669	CallExpression	"ensure_buf ( compiler , 1 + 7 )"		1125913	1					
ANR	1126670	Callee	ensure_buf		1125913	0					
ANR	1126671	Identifier	ensure_buf		1125913	0					
ANR	1126672	ArgumentList	compiler		1125913	1					
ANR	1126673	Argument	compiler		1125913	0					
ANR	1126674	Identifier	compiler		1125913	0					
ANR	1126675	Argument	1 + 7		1125913	1					
ANR	1126676	AdditiveExpression	1 + 7		1125913	0		+			
ANR	1126677	PrimaryExpression	1		1125913	0					
ANR	1126678	PrimaryExpression	7		1125913	1					
ANR	1126679	ExpressionStatement	FAIL_IF ( ! inst )	217:2:6999:7013	1125913	1	True				
ANR	1126680	CallExpression	FAIL_IF ( ! inst )		1125913	0					
ANR	1126681	Callee	FAIL_IF		1125913	0					
ANR	1126682	Identifier	FAIL_IF		1125913	0					
ANR	1126683	ArgumentList	! inst		1125913	1					
ANR	1126684	Argument	! inst		1125913	0					
ANR	1126685	UnaryOperationExpression	! inst		1125913	0					
ANR	1126686	UnaryOperator	!		1125913	0					
ANR	1126687	Identifier	inst		1125913	1					
ANR	1126688	ExpressionStatement	INC_SIZE ( 7 )	218:2:7017:7028	1125913	2	True				
ANR	1126689	CallExpression	INC_SIZE ( 7 )		1125913	0					
ANR	1126690	Callee	INC_SIZE		1125913	0					
ANR	1126691	Identifier	INC_SIZE		1125913	0					
ANR	1126692	ArgumentList	7		1125913	1					
ANR	1126693	Argument	7		1125913	0					
ANR	1126694	PrimaryExpression	7		1125913	0					
ANR	1126695	ExpressionStatement	* inst ++ = REX_W	219:2:7032:7047	1125913	3	True				
ANR	1126696	AssignmentExpression	* inst ++ = REX_W		1125913	0		=			
ANR	1126697	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126698	UnaryOperator	*		1125913	0					
ANR	1126699	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126700	Identifier	inst		1125913	0					
ANR	1126701	IncDec	++		1125913	1					
ANR	1126702	Identifier	REX_W		1125913	1					
ANR	1126703	ExpressionStatement	* inst ++ = GROUP_BINARY_81	220:2:7051:7076	1125913	4	True				
ANR	1126704	AssignmentExpression	* inst ++ = GROUP_BINARY_81		1125913	0		=			
ANR	1126705	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126706	UnaryOperator	*		1125913	0					
ANR	1126707	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126708	Identifier	inst		1125913	0					
ANR	1126709	IncDec	++		1125913	1					
ANR	1126710	Identifier	GROUP_BINARY_81		1125913	1					
ANR	1126711	ExpressionStatement	* inst ++ = MOD_REG | SUB | 4	221:2:7080:7107	1125913	5	True				
ANR	1126712	AssignmentExpression	* inst ++ = MOD_REG | SUB | 4		1125913	0		=			
ANR	1126713	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126714	UnaryOperator	*		1125913	0					
ANR	1126715	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126716	Identifier	inst		1125913	0					
ANR	1126717	IncDec	++		1125913	1					
ANR	1126718	InclusiveOrExpression	MOD_REG | SUB | 4		1125913	1		|			
ANR	1126719	Identifier	MOD_REG		1125913	0					
ANR	1126720	InclusiveOrExpression	SUB | 4		1125913	1		|			
ANR	1126721	Identifier	SUB		1125913	0					
ANR	1126722	PrimaryExpression	4		1125913	1					
ANR	1126723	ExpressionStatement	* ( sljit_si * ) inst = local_size	222:2:7111:7140	1125913	6	True				
ANR	1126724	AssignmentExpression	* ( sljit_si * ) inst = local_size		1125913	0		=			
ANR	1126725	UnaryOperationExpression	* ( sljit_si * ) inst		1125913	0					
ANR	1126726	UnaryOperator	*		1125913	0					
ANR	1126727	CastExpression	( sljit_si * ) inst		1125913	1					
ANR	1126728	CastTarget	sljit_si *		1125913	0					
ANR	1126729	Identifier	inst		1125913	1					
ANR	1126730	Identifier	local_size		1125913	1					
ANR	1126731	ExpressionStatement	inst += sizeof ( sljit_si )	223:2:7144:7168	1125913	7	True				
ANR	1126732	AssignmentExpression	inst += sizeof ( sljit_si )		1125913	0		+=			
ANR	1126733	Identifier	inst		1125913	0					
ANR	1126734	SizeofExpression	sizeof ( sljit_si )		1125913	1					
ANR	1126735	Sizeof	sizeof		1125913	0					
ANR	1126736	SizeofOperand	sljit_si		1125913	1					
ANR	1126737	IfStatement	if ( fscratches >= 6 || fsaveds >= 1 )		1125913	16					
ANR	1126738	Condition	fscratches >= 6 || fsaveds >= 1	228:5:7246:7276	1125913	0	True				
ANR	1126739	OrExpression	fscratches >= 6 || fsaveds >= 1		1125913	0		||			
ANR	1126740	RelationalExpression	fscratches >= 6		1125913	0		>=			
ANR	1126741	Identifier	fscratches		1125913	0					
ANR	1126742	PrimaryExpression	6		1125913	1					
ANR	1126743	RelationalExpression	fsaveds >= 1		1125913	1		>=			
ANR	1126744	Identifier	fsaveds		1125913	0					
ANR	1126745	PrimaryExpression	1		1125913	1					
ANR	1126746	CompoundStatement		136:38:3845:3845	1125913	1					
ANR	1126747	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"	229:2:7283:7328	1125913	0	True				
ANR	1126748	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"		1125913	0		=			
ANR	1126749	Identifier	inst		1125913	0					
ANR	1126750	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"		1125913	1					
ANR	1126751	CastTarget	sljit_ub *		1125913	0					
ANR	1126752	CallExpression	"ensure_buf ( compiler , 1 + 5 )"		1125913	1					
ANR	1126753	Callee	ensure_buf		1125913	0					
ANR	1126754	Identifier	ensure_buf		1125913	0					
ANR	1126755	ArgumentList	compiler		1125913	1					
ANR	1126756	Argument	compiler		1125913	0					
ANR	1126757	Identifier	compiler		1125913	0					
ANR	1126758	Argument	1 + 5		1125913	1					
ANR	1126759	AdditiveExpression	1 + 5		1125913	0		+			
ANR	1126760	PrimaryExpression	1		1125913	0					
ANR	1126761	PrimaryExpression	5		1125913	1					
ANR	1126762	ExpressionStatement	FAIL_IF ( ! inst )	230:2:7332:7346	1125913	1	True				
ANR	1126763	CallExpression	FAIL_IF ( ! inst )		1125913	0					
ANR	1126764	Callee	FAIL_IF		1125913	0					
ANR	1126765	Identifier	FAIL_IF		1125913	0					
ANR	1126766	ArgumentList	! inst		1125913	1					
ANR	1126767	Argument	! inst		1125913	0					
ANR	1126768	UnaryOperationExpression	! inst		1125913	0					
ANR	1126769	UnaryOperator	!		1125913	0					
ANR	1126770	Identifier	inst		1125913	1					
ANR	1126771	ExpressionStatement	INC_SIZE ( 5 )	231:2:7350:7361	1125913	2	True				
ANR	1126772	CallExpression	INC_SIZE ( 5 )		1125913	0					
ANR	1126773	Callee	INC_SIZE		1125913	0					
ANR	1126774	Identifier	INC_SIZE		1125913	0					
ANR	1126775	ArgumentList	5		1125913	1					
ANR	1126776	Argument	5		1125913	0					
ANR	1126777	PrimaryExpression	5		1125913	0					
ANR	1126778	ExpressionStatement	* inst ++ = GROUP_0F	232:2:7365:7383	1125913	3	True				
ANR	1126779	AssignmentExpression	* inst ++ = GROUP_0F		1125913	0		=			
ANR	1126780	UnaryOperationExpression	* inst ++		1125913	0					
ANR	1126781	UnaryOperator	*		1125913	0					
ANR	1126782	PostIncDecOperationExpression	inst ++		1125913	1					
ANR	1126783	Identifier	inst		1125913	0					
ANR	1126784	IncDec	++		1125913	1					
ANR	1126785	Identifier	GROUP_0F		1125913	1					
ANR	1126786	ExpressionStatement	* ( sljit_si * ) inst = 0x20247429	233:2:7387:7416	1125913	4	True				
ANR	1126787	AssignmentExpression	* ( sljit_si * ) inst = 0x20247429		1125913	0		=			
ANR	1126788	UnaryOperationExpression	* ( sljit_si * ) inst		1125913	0					
ANR	1126789	UnaryOperator	*		1125913	0					
ANR	1126790	CastExpression	( sljit_si * ) inst		1125913	1					
ANR	1126791	CastTarget	sljit_si *		1125913	0					
ANR	1126792	Identifier	inst		1125913	1					
ANR	1126793	PrimaryExpression	0x20247429		1125913	1					
ANR	1126794	ReturnStatement	return SLJIT_SUCCESS ;	237:1:7430:7450	1125913	17	True				
ANR	1126795	Identifier	SLJIT_SUCCESS		1125913	0					
ANR	1126796	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1125913	1					
ANR	1126797	Identifier	sljit_emit_enter		1125913	2					
ANR	1126798	ParameterList	"struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size"		1125913	3					
ANR	1126799	Parameter	struct sljit_compiler * compiler	90:51:3268:3298	1125913	0	True				
ANR	1126800	ParameterType	struct sljit_compiler *		1125913	0					
ANR	1126801	Identifier	compiler		1125913	1					
ANR	1126802	Parameter	sljit_si options	91:1:3302:3317	1125913	1	True				
ANR	1126803	ParameterType	sljit_si		1125913	0					
ANR	1126804	Identifier	options		1125913	1					
ANR	1126805	Parameter	sljit_si args	91:19:3320:3332	1125913	2	True				
ANR	1126806	ParameterType	sljit_si		1125913	0					
ANR	1126807	Identifier	args		1125913	1					
ANR	1126808	Parameter	sljit_si scratches	91:34:3335:3352	1125913	3	True				
ANR	1126809	ParameterType	sljit_si		1125913	0					
ANR	1126810	Identifier	scratches		1125913	1					
ANR	1126811	Parameter	sljit_si saveds	91:54:3355:3369	1125913	4	True				
ANR	1126812	ParameterType	sljit_si		1125913	0					
ANR	1126813	Identifier	saveds		1125913	1					
ANR	1126814	Parameter	sljit_si fscratches	92:1:3373:3391	1125913	5	True				
ANR	1126815	ParameterType	sljit_si		1125913	0					
ANR	1126816	Identifier	fscratches		1125913	1					
ANR	1126817	Parameter	sljit_si fsaveds	92:22:3394:3409	1125913	6	True				
ANR	1126818	ParameterType	sljit_si		1125913	0					
ANR	1126819	Identifier	fsaveds		1125913	1					
ANR	1126820	Parameter	sljit_si local_size	92:40:3412:3430	1125913	7	True				
ANR	1126821	ParameterType	sljit_si		1125913	0					
ANR	1126822	Identifier	local_size		1125913	1					
ANR	1126823	CFGEntryNode	ENTRY		1125913		True				
ANR	1126824	CFGExitNode	EXIT		1125913		True				
ANR	1126825	Symbol	sljit_grow_stack		1125913						
ANR	1126826	Symbol	saveds		1125913						
ANR	1126827	Symbol	compiler -> flags_saved		1125913						
ANR	1126828	Symbol	* inst ++		1125913						
ANR	1126829	Symbol	reg_map		1125913						
ANR	1126830	Symbol	check_sljit_emit_enter		1125913						
ANR	1126831	Symbol	* compiler		1125913						
ANR	1126832	Symbol	SLJIT_R0		1125913						
ANR	1126833	Symbol	SLJIT_IMM		1125913						
ANR	1126834	Symbol	tmp		1125913						
ANR	1126835	Symbol	SLJIT_LOCALS_OFFSET		1125913						
ANR	1126836	Symbol	* reg_lmap		1125913						
ANR	1126837	Symbol	temporary_reg1_is_loreg		1125913						
ANR	1126838	Symbol	options		1125913						
ANR	1126839	Symbol	* SLJIT_R0		1125913						
ANR	1126840	Symbol	GET_SAVED_REGISTERS_SIZE		1125913						
ANR	1126841	Symbol	SUB		1125913						
ANR	1126842	Symbol	GROUP_0F		1125913						
ANR	1126843	Symbol	~15		1125913						
ANR	1126844	Symbol	* reg_map		1125913						
ANR	1126845	Symbol	REX_B		1125913						
ANR	1126846	Symbol	SLJIT_S2		1125913						
ANR	1126847	Symbol	SLJIT_S0		1125913						
ANR	1126848	Symbol	SLJIT_S1		1125913						
ANR	1126849	Symbol	fscratches		1125913						
ANR	1126850	Symbol	compiler -> local_size		1125913						
ANR	1126851	Symbol	fsaveds		1125913						
ANR	1126852	Symbol	size		1125913						
ANR	1126853	Symbol	saved_register_size		1125913						
ANR	1126854	Symbol	GROUP_BINARY_81		1125913						
ANR	1126855	Symbol	SLJIT_FIRST_SAVED_REG		1125913						
ANR	1126856	Symbol	GROUP_BINARY_83		1125913						
ANR	1126857	Symbol	REX_W		1125913						
ANR	1126858	Symbol	REX_R		1125913						
ANR	1126859	Symbol	* ( sljit_si * ) inst		1125913						
ANR	1126860	Symbol	scratches		1125913						
ANR	1126861	Symbol	sljit_emit_ijump		1125913						
ANR	1126862	Symbol	SLJIT_NUMBER_OF_SAVED_REGISTERS		1125913						
ANR	1126863	Symbol	SLJIT_FUNC_OFFSET		1125913						
ANR	1126864	Symbol	MOV_rm_i32		1125913						
ANR	1126865	Symbol	compiler		1125913						
ANR	1126866	Symbol	local_size		1125913						
ANR	1126867	Symbol	* inst		1125913						
ANR	1126868	Symbol	MOV_r_rm		1125913						
ANR	1126869	Symbol	i		1125913						
ANR	1126870	Symbol	SLJIT_SUCCESS		1125913						
ANR	1126871	Symbol	MOD_REG		1125913						
ANR	1126872	Symbol	args		1125913						
ANR	1126873	Symbol	reg_lmap		1125913						
ANR	1126874	Symbol	* SLJIT_S2		1125913						
ANR	1126875	Symbol	* i		1125913						
ANR	1126876	Symbol	inst		1125913						
ANR	1126877	Symbol	ensure_buf		1125913						
ANR	1126878	Symbol	compiler -> skip_checks		1125913						
ANR	1126879	Symbol	SLJIT_CALL1		1125913						
ANR	1126880	Symbol	* SLJIT_S0		1125913						
ANR	1126881	Symbol	* SLJIT_S1		1125913						
ANR	1126882	Function	sljit_set_context	240:0:7455:8206							
ANR	1126883	FunctionDef	"sljit_set_context (struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size)"		1126882	0					
ANR	1126884	CompoundStatement		243:0:7672:8206	1126882	0					
ANR	1126885	IdentifierDeclStatement	sljit_si saved_register_size ;	244:1:7675:7703	1126882	0	True				
ANR	1126886	IdentifierDecl	saved_register_size		1126882	0					
ANR	1126887	IdentifierDeclType	sljit_si		1126882	0					
ANR	1126888	Identifier	saved_register_size		1126882	1					
ANR	1126889	ExpressionStatement	CHECK_ERROR ( )	246:1:7707:7720	1126882	1	True				
ANR	1126890	CallExpression	CHECK_ERROR ( )		1126882	0					
ANR	1126891	Callee	CHECK_ERROR		1126882	0					
ANR	1126892	Identifier	CHECK_ERROR		1126882	0					
ANR	1126893	ArgumentList			1126882	1					
ANR	1126894	ExpressionStatement	"CHECK ( check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"	247:1:7723:7830	1126882	2	True				
ANR	1126895	CallExpression	"CHECK ( check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"		1126882	0					
ANR	1126896	Callee	CHECK		1126882	0					
ANR	1126897	Identifier	CHECK		1126882	0					
ANR	1126898	ArgumentList	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1126882	1					
ANR	1126899	Argument	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1126882	0					
ANR	1126900	CallExpression	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1126882	0					
ANR	1126901	Callee	check_sljit_set_context		1126882	0					
ANR	1126902	Identifier	check_sljit_set_context		1126882	0					
ANR	1126903	ArgumentList	compiler		1126882	1					
ANR	1126904	Argument	compiler		1126882	0					
ANR	1126905	Identifier	compiler		1126882	0					
ANR	1126906	Argument	options		1126882	1					
ANR	1126907	Identifier	options		1126882	0					
ANR	1126908	Argument	args		1126882	2					
ANR	1126909	Identifier	args		1126882	0					
ANR	1126910	Argument	scratches		1126882	3					
ANR	1126911	Identifier	scratches		1126882	0					
ANR	1126912	Argument	saveds		1126882	4					
ANR	1126913	Identifier	saveds		1126882	0					
ANR	1126914	Argument	fscratches		1126882	5					
ANR	1126915	Identifier	fscratches		1126882	0					
ANR	1126916	Argument	fsaveds		1126882	6					
ANR	1126917	Identifier	fsaveds		1126882	0					
ANR	1126918	Argument	local_size		1126882	7					
ANR	1126919	Identifier	local_size		1126882	0					
ANR	1126920	ExpressionStatement	"set_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"	248:1:7833:7925	1126882	3	True				
ANR	1126921	CallExpression	"set_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1126882	0					
ANR	1126922	Callee	set_set_context		1126882	0					
ANR	1126923	Identifier	set_set_context		1126882	0					
ANR	1126924	ArgumentList	compiler		1126882	1					
ANR	1126925	Argument	compiler		1126882	0					
ANR	1126926	Identifier	compiler		1126882	0					
ANR	1126927	Argument	options		1126882	1					
ANR	1126928	Identifier	options		1126882	0					
ANR	1126929	Argument	args		1126882	2					
ANR	1126930	Identifier	args		1126882	0					
ANR	1126931	Argument	scratches		1126882	3					
ANR	1126932	Identifier	scratches		1126882	0					
ANR	1126933	Argument	saveds		1126882	4					
ANR	1126934	Identifier	saveds		1126882	0					
ANR	1126935	Argument	fscratches		1126882	5					
ANR	1126936	Identifier	fscratches		1126882	0					
ANR	1126937	Argument	fsaveds		1126882	6					
ANR	1126938	Identifier	fsaveds		1126882	0					
ANR	1126939	Argument	local_size		1126882	7					
ANR	1126940	Identifier	local_size		1126882	0					
ANR	1126941	ExpressionStatement	"saved_register_size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"	251:1:7996:8064	1126882	4	True				
ANR	1126942	AssignmentExpression	"saved_register_size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1126882	0		=			
ANR	1126943	Identifier	saved_register_size		1126882	0					
ANR	1126944	CallExpression	"GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1126882	1					
ANR	1126945	Callee	GET_SAVED_REGISTERS_SIZE		1126882	0					
ANR	1126946	Identifier	GET_SAVED_REGISTERS_SIZE		1126882	0					
ANR	1126947	ArgumentList	scratches		1126882	1					
ANR	1126948	Argument	scratches		1126882	0					
ANR	1126949	Identifier	scratches		1126882	0					
ANR	1126950	Argument	saveds		1126882	1					
ANR	1126951	Identifier	saveds		1126882	0					
ANR	1126952	Argument	1		1126882	2					
ANR	1126953	PrimaryExpression	1		1126882	0					
ANR	1126954	ExpressionStatement	compiler -> local_size = ( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size	252:1:8067:8181	1126882	5	True				
ANR	1126955	AssignmentExpression	compiler -> local_size = ( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size		1126882	0		=			
ANR	1126956	PtrMemberAccess	compiler -> local_size		1126882	0					
ANR	1126957	Identifier	compiler		1126882	0					
ANR	1126958	Identifier	local_size		1126882	1					
ANR	1126959	AdditiveExpression	( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size		1126882	1		-			
ANR	1126960	BitAndExpression	( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15		1126882	0		&			
ANR	1126961	AdditiveExpression	local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15		1126882	0		+			
ANR	1126962	Identifier	local_size		1126882	0					
ANR	1126963	AdditiveExpression	SLJIT_LOCALS_OFFSET + saved_register_size + 15		1126882	1		+			
ANR	1126964	Identifier	SLJIT_LOCALS_OFFSET		1126882	0					
ANR	1126965	AdditiveExpression	saved_register_size + 15		1126882	1		+			
ANR	1126966	Identifier	saved_register_size		1126882	0					
ANR	1126967	PrimaryExpression	15		1126882	1					
ANR	1126968	Identifier	~15		1126882	1					
ANR	1126969	Identifier	saved_register_size		1126882	1					
ANR	1126970	ReturnStatement	return SLJIT_SUCCESS ;	253:1:8184:8204	1126882	6	True				
ANR	1126971	Identifier	SLJIT_SUCCESS		1126882	0					
ANR	1126972	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1126882	1					
ANR	1126973	Identifier	sljit_set_context		1126882	2					
ANR	1126974	ParameterList	"struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size"		1126882	3					
ANR	1126975	Parameter	struct sljit_compiler * compiler	240:52:7507:7537	1126882	0	True				
ANR	1126976	ParameterType	struct sljit_compiler *		1126882	0					
ANR	1126977	Identifier	compiler		1126882	1					
ANR	1126978	Parameter	sljit_si options	241:1:7541:7556	1126882	1	True				
ANR	1126979	ParameterType	sljit_si		1126882	0					
ANR	1126980	Identifier	options		1126882	1					
ANR	1126981	Parameter	sljit_si args	241:19:7559:7571	1126882	2	True				
ANR	1126982	ParameterType	sljit_si		1126882	0					
ANR	1126983	Identifier	args		1126882	1					
ANR	1126984	Parameter	sljit_si scratches	241:34:7574:7591	1126882	3	True				
ANR	1126985	ParameterType	sljit_si		1126882	0					
ANR	1126986	Identifier	scratches		1126882	1					
ANR	1126987	Parameter	sljit_si saveds	241:54:7594:7608	1126882	4	True				
ANR	1126988	ParameterType	sljit_si		1126882	0					
ANR	1126989	Identifier	saveds		1126882	1					
ANR	1126990	Parameter	sljit_si fscratches	242:1:7612:7630	1126882	5	True				
ANR	1126991	ParameterType	sljit_si		1126882	0					
ANR	1126992	Identifier	fscratches		1126882	1					
ANR	1126993	Parameter	sljit_si fsaveds	242:22:7633:7648	1126882	6	True				
ANR	1126994	ParameterType	sljit_si		1126882	0					
ANR	1126995	Identifier	fsaveds		1126882	1					
ANR	1126996	Parameter	sljit_si local_size	242:40:7651:7669	1126882	7	True				
ANR	1126997	ParameterType	sljit_si		1126882	0					
ANR	1126998	Identifier	local_size		1126882	1					
ANR	1126999	CFGEntryNode	ENTRY		1126882		True				
ANR	1127000	CFGExitNode	EXIT		1126882		True				
ANR	1127001	Symbol	GET_SAVED_REGISTERS_SIZE		1126882						
ANR	1127002	Symbol	local_size		1126882						
ANR	1127003	Symbol	~15		1126882						
ANR	1127004	Symbol	scratches		1126882						
ANR	1127005	Symbol	saveds		1126882						
ANR	1127006	Symbol	check_sljit_set_context		1126882						
ANR	1127007	Symbol	SLJIT_SUCCESS		1126882						
ANR	1127008	Symbol	* compiler		1126882						
ANR	1127009	Symbol	args		1126882						
ANR	1127010	Symbol	fscratches		1126882						
ANR	1127011	Symbol	compiler -> local_size		1126882						
ANR	1127012	Symbol	fsaveds		1126882						
ANR	1127013	Symbol	saved_register_size		1126882						
ANR	1127014	Symbol	SLJIT_LOCALS_OFFSET		1126882						
ANR	1127015	Symbol	options		1126882						
ANR	1127016	Symbol	compiler		1126882						
ANR	1127017	Function	sljit_emit_return	256:0:8209:10040							
ANR	1127018	FunctionDef	"sljit_emit_return (struct sljit_compiler * compiler , sljit_si op , sljit_si src , sljit_sw srcw)"		1127017	0					
ANR	1127019	CompoundStatement		257:0:8336:10040	1127017	0					
ANR	1127020	IdentifierDeclStatement	"sljit_si i , tmp , size ;"	258:1:8339:8360	1127017	0	True				
ANR	1127021	IdentifierDecl	i		1127017	0					
ANR	1127022	IdentifierDeclType	sljit_si		1127017	0					
ANR	1127023	Identifier	i		1127017	1					
ANR	1127024	IdentifierDecl	tmp		1127017	1					
ANR	1127025	IdentifierDeclType	sljit_si		1127017	0					
ANR	1127026	Identifier	tmp		1127017	1					
ANR	1127027	IdentifierDecl	size		1127017	2					
ANR	1127028	IdentifierDeclType	sljit_si		1127017	0					
ANR	1127029	Identifier	size		1127017	1					
ANR	1127030	IdentifierDeclStatement	sljit_ub * inst ;	259:1:8363:8377	1127017	1	True				
ANR	1127031	IdentifierDecl	* inst		1127017	0					
ANR	1127032	IdentifierDeclType	sljit_ub *		1127017	0					
ANR	1127033	Identifier	inst		1127017	1					
ANR	1127034	ExpressionStatement	CHECK_ERROR ( )	261:1:8381:8394	1127017	2	True				
ANR	1127035	CallExpression	CHECK_ERROR ( )		1127017	0					
ANR	1127036	Callee	CHECK_ERROR		1127017	0					
ANR	1127037	Identifier	CHECK_ERROR		1127017	0					
ANR	1127038	ArgumentList			1127017	1					
ANR	1127039	ExpressionStatement	"CHECK ( check_sljit_emit_return ( compiler , op , src , srcw ) )"	262:1:8397:8452	1127017	3	True				
ANR	1127040	CallExpression	"CHECK ( check_sljit_emit_return ( compiler , op , src , srcw ) )"		1127017	0					
ANR	1127041	Callee	CHECK		1127017	0					
ANR	1127042	Identifier	CHECK		1127017	0					
ANR	1127043	ArgumentList	"check_sljit_emit_return ( compiler , op , src , srcw )"		1127017	1					
ANR	1127044	Argument	"check_sljit_emit_return ( compiler , op , src , srcw )"		1127017	0					
ANR	1127045	CallExpression	"check_sljit_emit_return ( compiler , op , src , srcw )"		1127017	0					
ANR	1127046	Callee	check_sljit_emit_return		1127017	0					
ANR	1127047	Identifier	check_sljit_emit_return		1127017	0					
ANR	1127048	ArgumentList	compiler		1127017	1					
ANR	1127049	Argument	compiler		1127017	0					
ANR	1127050	Identifier	compiler		1127017	0					
ANR	1127051	Argument	op		1127017	1					
ANR	1127052	Identifier	op		1127017	0					
ANR	1127053	Argument	src		1127017	2					
ANR	1127054	Identifier	src		1127017	0					
ANR	1127055	Argument	srcw		1127017	3					
ANR	1127056	Identifier	srcw		1127017	0					
ANR	1127057	ExpressionStatement	compiler -> flags_saved = 0	264:1:8456:8481	1127017	4	True				
ANR	1127058	AssignmentExpression	compiler -> flags_saved = 0		1127017	0		=			
ANR	1127059	PtrMemberAccess	compiler -> flags_saved		1127017	0					
ANR	1127060	Identifier	compiler		1127017	0					
ANR	1127061	Identifier	flags_saved		1127017	1					
ANR	1127062	PrimaryExpression	0		1127017	1					
ANR	1127063	ExpressionStatement	"FAIL_IF ( emit_mov_before_return ( compiler , op , src , srcw ) )"	265:1:8484:8540	1127017	5	True				
ANR	1127064	CallExpression	"FAIL_IF ( emit_mov_before_return ( compiler , op , src , srcw ) )"		1127017	0					
ANR	1127065	Callee	FAIL_IF		1127017	0					
ANR	1127066	Identifier	FAIL_IF		1127017	0					
ANR	1127067	ArgumentList	"emit_mov_before_return ( compiler , op , src , srcw )"		1127017	1					
ANR	1127068	Argument	"emit_mov_before_return ( compiler , op , src , srcw )"		1127017	0					
ANR	1127069	CallExpression	"emit_mov_before_return ( compiler , op , src , srcw )"		1127017	0					
ANR	1127070	Callee	emit_mov_before_return		1127017	0					
ANR	1127071	Identifier	emit_mov_before_return		1127017	0					
ANR	1127072	ArgumentList	compiler		1127017	1					
ANR	1127073	Argument	compiler		1127017	0					
ANR	1127074	Identifier	compiler		1127017	0					
ANR	1127075	Argument	op		1127017	1					
ANR	1127076	Identifier	op		1127017	0					
ANR	1127077	Argument	src		1127017	2					
ANR	1127078	Identifier	src		1127017	0					
ANR	1127079	Argument	srcw		1127017	3					
ANR	1127080	Identifier	srcw		1127017	0					
ANR	1127081	IfStatement	if ( compiler -> fscratches >= 6 || compiler -> fsaveds >= 1 )		1127017	6					
ANR	1127082	Condition	compiler -> fscratches >= 6 || compiler -> fsaveds >= 1	269:5:8618:8668	1127017	0	True				
ANR	1127083	OrExpression	compiler -> fscratches >= 6 || compiler -> fsaveds >= 1		1127017	0		||			
ANR	1127084	RelationalExpression	compiler -> fscratches >= 6		1127017	0		>=			
ANR	1127085	PtrMemberAccess	compiler -> fscratches		1127017	0					
ANR	1127086	Identifier	compiler		1127017	0					
ANR	1127087	Identifier	fscratches		1127017	1					
ANR	1127088	PrimaryExpression	6		1127017	1					
ANR	1127089	RelationalExpression	compiler -> fsaveds >= 1		1127017	1		>=			
ANR	1127090	PtrMemberAccess	compiler -> fsaveds		1127017	0					
ANR	1127091	Identifier	compiler		1127017	0					
ANR	1127092	Identifier	fsaveds		1127017	1					
ANR	1127093	PrimaryExpression	1		1127017	1					
ANR	1127094	CompoundStatement		13:58:334:334	1127017	1					
ANR	1127095	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"	270:2:8675:8720	1127017	0	True				
ANR	1127096	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"		1127017	0		=			
ANR	1127097	Identifier	inst		1127017	0					
ANR	1127098	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"		1127017	1					
ANR	1127099	CastTarget	sljit_ub *		1127017	0					
ANR	1127100	CallExpression	"ensure_buf ( compiler , 1 + 5 )"		1127017	1					
ANR	1127101	Callee	ensure_buf		1127017	0					
ANR	1127102	Identifier	ensure_buf		1127017	0					
ANR	1127103	ArgumentList	compiler		1127017	1					
ANR	1127104	Argument	compiler		1127017	0					
ANR	1127105	Identifier	compiler		1127017	0					
ANR	1127106	Argument	1 + 5		1127017	1					
ANR	1127107	AdditiveExpression	1 + 5		1127017	0		+			
ANR	1127108	PrimaryExpression	1		1127017	0					
ANR	1127109	PrimaryExpression	5		1127017	1					
ANR	1127110	ExpressionStatement	FAIL_IF ( ! inst )	271:2:8724:8738	1127017	1	True				
ANR	1127111	CallExpression	FAIL_IF ( ! inst )		1127017	0					
ANR	1127112	Callee	FAIL_IF		1127017	0					
ANR	1127113	Identifier	FAIL_IF		1127017	0					
ANR	1127114	ArgumentList	! inst		1127017	1					
ANR	1127115	Argument	! inst		1127017	0					
ANR	1127116	UnaryOperationExpression	! inst		1127017	0					
ANR	1127117	UnaryOperator	!		1127017	0					
ANR	1127118	Identifier	inst		1127017	1					
ANR	1127119	ExpressionStatement	INC_SIZE ( 5 )	272:2:8742:8753	1127017	2	True				
ANR	1127120	CallExpression	INC_SIZE ( 5 )		1127017	0					
ANR	1127121	Callee	INC_SIZE		1127017	0					
ANR	1127122	Identifier	INC_SIZE		1127017	0					
ANR	1127123	ArgumentList	5		1127017	1					
ANR	1127124	Argument	5		1127017	0					
ANR	1127125	PrimaryExpression	5		1127017	0					
ANR	1127126	ExpressionStatement	* inst ++ = GROUP_0F	273:2:8757:8775	1127017	3	True				
ANR	1127127	AssignmentExpression	* inst ++ = GROUP_0F		1127017	0		=			
ANR	1127128	UnaryOperationExpression	* inst ++		1127017	0					
ANR	1127129	UnaryOperator	*		1127017	0					
ANR	1127130	PostIncDecOperationExpression	inst ++		1127017	1					
ANR	1127131	Identifier	inst		1127017	0					
ANR	1127132	IncDec	++		1127017	1					
ANR	1127133	Identifier	GROUP_0F		1127017	1					
ANR	1127134	ExpressionStatement	* ( sljit_si * ) inst = 0x20247428	274:2:8779:8808	1127017	4	True				
ANR	1127135	AssignmentExpression	* ( sljit_si * ) inst = 0x20247428		1127017	0		=			
ANR	1127136	UnaryOperationExpression	* ( sljit_si * ) inst		1127017	0					
ANR	1127137	UnaryOperator	*		1127017	0					
ANR	1127138	CastExpression	( sljit_si * ) inst		1127017	1					
ANR	1127139	CastTarget	sljit_si *		1127017	0					
ANR	1127140	Identifier	inst		1127017	1					
ANR	1127141	PrimaryExpression	0x20247428		1127017	1					
ANR	1127142	ExpressionStatement	SLJIT_ASSERT ( compiler -> local_size > 0 )	278:1:8822:8860	1127017	7	True				
ANR	1127143	CallExpression	SLJIT_ASSERT ( compiler -> local_size > 0 )		1127017	0					
ANR	1127144	Callee	SLJIT_ASSERT		1127017	0					
ANR	1127145	Identifier	SLJIT_ASSERT		1127017	0					
ANR	1127146	ArgumentList	compiler -> local_size > 0		1127017	1					
ANR	1127147	Argument	compiler -> local_size > 0		1127017	0					
ANR	1127148	RelationalExpression	compiler -> local_size > 0		1127017	0		>			
ANR	1127149	PtrMemberAccess	compiler -> local_size		1127017	0					
ANR	1127150	Identifier	compiler		1127017	0					
ANR	1127151	Identifier	local_size		1127017	1					
ANR	1127152	PrimaryExpression	0		1127017	1					
ANR	1127153	IfStatement	if ( compiler -> local_size <= 127 )		1127017	8					
ANR	1127154	Condition	compiler -> local_size <= 127	279:5:8867:8893	1127017	0	True				
ANR	1127155	RelationalExpression	compiler -> local_size <= 127		1127017	0		<=			
ANR	1127156	PtrMemberAccess	compiler -> local_size		1127017	0					
ANR	1127157	Identifier	compiler		1127017	0					
ANR	1127158	Identifier	local_size		1127017	1					
ANR	1127159	PrimaryExpression	127		1127017	1					
ANR	1127160	CompoundStatement		23:34:559:559	1127017	1					
ANR	1127161	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"	280:2:8900:8945	1127017	0	True				
ANR	1127162	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"		1127017	0		=			
ANR	1127163	Identifier	inst		1127017	0					
ANR	1127164	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"		1127017	1					
ANR	1127165	CastTarget	sljit_ub *		1127017	0					
ANR	1127166	CallExpression	"ensure_buf ( compiler , 1 + 4 )"		1127017	1					
ANR	1127167	Callee	ensure_buf		1127017	0					
ANR	1127168	Identifier	ensure_buf		1127017	0					
ANR	1127169	ArgumentList	compiler		1127017	1					
ANR	1127170	Argument	compiler		1127017	0					
ANR	1127171	Identifier	compiler		1127017	0					
ANR	1127172	Argument	1 + 4		1127017	1					
ANR	1127173	AdditiveExpression	1 + 4		1127017	0		+			
ANR	1127174	PrimaryExpression	1		1127017	0					
ANR	1127175	PrimaryExpression	4		1127017	1					
ANR	1127176	ExpressionStatement	FAIL_IF ( ! inst )	281:2:8949:8963	1127017	1	True				
ANR	1127177	CallExpression	FAIL_IF ( ! inst )		1127017	0					
ANR	1127178	Callee	FAIL_IF		1127017	0					
ANR	1127179	Identifier	FAIL_IF		1127017	0					
ANR	1127180	ArgumentList	! inst		1127017	1					
ANR	1127181	Argument	! inst		1127017	0					
ANR	1127182	UnaryOperationExpression	! inst		1127017	0					
ANR	1127183	UnaryOperator	!		1127017	0					
ANR	1127184	Identifier	inst		1127017	1					
ANR	1127185	ExpressionStatement	INC_SIZE ( 4 )	282:2:8967:8978	1127017	2	True				
ANR	1127186	CallExpression	INC_SIZE ( 4 )		1127017	0					
ANR	1127187	Callee	INC_SIZE		1127017	0					
ANR	1127188	Identifier	INC_SIZE		1127017	0					
ANR	1127189	ArgumentList	4		1127017	1					
ANR	1127190	Argument	4		1127017	0					
ANR	1127191	PrimaryExpression	4		1127017	0					
ANR	1127192	ExpressionStatement	* inst ++ = REX_W	283:2:8982:8997	1127017	3	True				
ANR	1127193	AssignmentExpression	* inst ++ = REX_W		1127017	0		=			
ANR	1127194	UnaryOperationExpression	* inst ++		1127017	0					
ANR	1127195	UnaryOperator	*		1127017	0					
ANR	1127196	PostIncDecOperationExpression	inst ++		1127017	1					
ANR	1127197	Identifier	inst		1127017	0					
ANR	1127198	IncDec	++		1127017	1					
ANR	1127199	Identifier	REX_W		1127017	1					
ANR	1127200	ExpressionStatement	* inst ++ = GROUP_BINARY_83	284:2:9001:9026	1127017	4	True				
ANR	1127201	AssignmentExpression	* inst ++ = GROUP_BINARY_83		1127017	0		=			
ANR	1127202	UnaryOperationExpression	* inst ++		1127017	0					
ANR	1127203	UnaryOperator	*		1127017	0					
ANR	1127204	PostIncDecOperationExpression	inst ++		1127017	1					
ANR	1127205	Identifier	inst		1127017	0					
ANR	1127206	IncDec	++		1127017	1					
ANR	1127207	Identifier	GROUP_BINARY_83		1127017	1					
ANR	1127208	ExpressionStatement	* inst ++ = MOD_REG | ADD | 4	285:2:9030:9057	1127017	5	True				
ANR	1127209	AssignmentExpression	* inst ++ = MOD_REG | ADD | 4		1127017	0		=			
ANR	1127210	UnaryOperationExpression	* inst ++		1127017	0					
ANR	1127211	UnaryOperator	*		1127017	0					
ANR	1127212	PostIncDecOperationExpression	inst ++		1127017	1					
ANR	1127213	Identifier	inst		1127017	0					
ANR	1127214	IncDec	++		1127017	1					
ANR	1127215	InclusiveOrExpression	MOD_REG | ADD | 4		1127017	1		|			
ANR	1127216	Identifier	MOD_REG		1127017	0					
ANR	1127217	InclusiveOrExpression	ADD | 4		1127017	1		|			
ANR	1127218	Identifier	ADD		1127017	0					
ANR	1127219	PrimaryExpression	4		1127017	1					
ANR	1127220	ExpressionStatement	* inst = compiler -> local_size	286:2:9061:9089	1127017	6	True				
ANR	1127221	AssignmentExpression	* inst = compiler -> local_size		1127017	0		=			
ANR	1127222	UnaryOperationExpression	* inst		1127017	0					
ANR	1127223	UnaryOperator	*		1127017	0					
ANR	1127224	Identifier	inst		1127017	1					
ANR	1127225	PtrMemberAccess	compiler -> local_size		1127017	1					
ANR	1127226	Identifier	compiler		1127017	0					
ANR	1127227	Identifier	local_size		1127017	1					
ANR	1127228	ElseStatement	else		1127017	0					
ANR	1127229	CompoundStatement		32:6:763:763	1127017	0					
ANR	1127230	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"	289:2:9104:9149	1127017	0	True				
ANR	1127231	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"		1127017	0		=			
ANR	1127232	Identifier	inst		1127017	0					
ANR	1127233	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"		1127017	1					
ANR	1127234	CastTarget	sljit_ub *		1127017	0					
ANR	1127235	CallExpression	"ensure_buf ( compiler , 1 + 7 )"		1127017	1					
ANR	1127236	Callee	ensure_buf		1127017	0					
ANR	1127237	Identifier	ensure_buf		1127017	0					
ANR	1127238	ArgumentList	compiler		1127017	1					
ANR	1127239	Argument	compiler		1127017	0					
ANR	1127240	Identifier	compiler		1127017	0					
ANR	1127241	Argument	1 + 7		1127017	1					
ANR	1127242	AdditiveExpression	1 + 7		1127017	0		+			
ANR	1127243	PrimaryExpression	1		1127017	0					
ANR	1127244	PrimaryExpression	7		1127017	1					
ANR	1127245	ExpressionStatement	FAIL_IF ( ! inst )	290:2:9153:9167	1127017	1	True				
ANR	1127246	CallExpression	FAIL_IF ( ! inst )		1127017	0					
ANR	1127247	Callee	FAIL_IF		1127017	0					
ANR	1127248	Identifier	FAIL_IF		1127017	0					
ANR	1127249	ArgumentList	! inst		1127017	1					
ANR	1127250	Argument	! inst		1127017	0					
ANR	1127251	UnaryOperationExpression	! inst		1127017	0					
ANR	1127252	UnaryOperator	!		1127017	0					
ANR	1127253	Identifier	inst		1127017	1					
ANR	1127254	ExpressionStatement	INC_SIZE ( 7 )	291:2:9171:9182	1127017	2	True				
ANR	1127255	CallExpression	INC_SIZE ( 7 )		1127017	0					
ANR	1127256	Callee	INC_SIZE		1127017	0					
ANR	1127257	Identifier	INC_SIZE		1127017	0					
ANR	1127258	ArgumentList	7		1127017	1					
ANR	1127259	Argument	7		1127017	0					
ANR	1127260	PrimaryExpression	7		1127017	0					
ANR	1127261	ExpressionStatement	* inst ++ = REX_W	292:2:9186:9201	1127017	3	True				
ANR	1127262	AssignmentExpression	* inst ++ = REX_W		1127017	0		=			
ANR	1127263	UnaryOperationExpression	* inst ++		1127017	0					
ANR	1127264	UnaryOperator	*		1127017	0					
ANR	1127265	PostIncDecOperationExpression	inst ++		1127017	1					
ANR	1127266	Identifier	inst		1127017	0					
ANR	1127267	IncDec	++		1127017	1					
ANR	1127268	Identifier	REX_W		1127017	1					
ANR	1127269	ExpressionStatement	* inst ++ = GROUP_BINARY_81	293:2:9205:9230	1127017	4	True				
ANR	1127270	AssignmentExpression	* inst ++ = GROUP_BINARY_81		1127017	0		=			
ANR	1127271	UnaryOperationExpression	* inst ++		1127017	0					
ANR	1127272	UnaryOperator	*		1127017	0					
ANR	1127273	PostIncDecOperationExpression	inst ++		1127017	1					
ANR	1127274	Identifier	inst		1127017	0					
ANR	1127275	IncDec	++		1127017	1					
ANR	1127276	Identifier	GROUP_BINARY_81		1127017	1					
ANR	1127277	ExpressionStatement	* inst ++ = MOD_REG | ADD | 4	294:2:9234:9261	1127017	5	True				
ANR	1127278	AssignmentExpression	* inst ++ = MOD_REG | ADD | 4		1127017	0		=			
ANR	1127279	UnaryOperationExpression	* inst ++		1127017	0					
ANR	1127280	UnaryOperator	*		1127017	0					
ANR	1127281	PostIncDecOperationExpression	inst ++		1127017	1					
ANR	1127282	Identifier	inst		1127017	0					
ANR	1127283	IncDec	++		1127017	1					
ANR	1127284	InclusiveOrExpression	MOD_REG | ADD | 4		1127017	1		|			
ANR	1127285	Identifier	MOD_REG		1127017	0					
ANR	1127286	InclusiveOrExpression	ADD | 4		1127017	1		|			
ANR	1127287	Identifier	ADD		1127017	0					
ANR	1127288	PrimaryExpression	4		1127017	1					
ANR	1127289	ExpressionStatement	* ( sljit_si * ) inst = compiler -> local_size	295:2:9265:9304	1127017	6	True				
ANR	1127290	AssignmentExpression	* ( sljit_si * ) inst = compiler -> local_size		1127017	0		=			
ANR	1127291	UnaryOperationExpression	* ( sljit_si * ) inst		1127017	0					
ANR	1127292	UnaryOperator	*		1127017	0					
ANR	1127293	CastExpression	( sljit_si * ) inst		1127017	1					
ANR	1127294	CastTarget	sljit_si *		1127017	0					
ANR	1127295	Identifier	inst		1127017	1					
ANR	1127296	PtrMemberAccess	compiler -> local_size		1127017	1					
ANR	1127297	Identifier	compiler		1127017	0					
ANR	1127298	Identifier	local_size		1127017	1					
ANR	1127299	ExpressionStatement	tmp = compiler -> scratches	298:1:9311:9336	1127017	9	True				
ANR	1127300	AssignmentExpression	tmp = compiler -> scratches		1127017	0		=			
ANR	1127301	Identifier	tmp		1127017	0					
ANR	1127302	PtrMemberAccess	compiler -> scratches		1127017	1					
ANR	1127303	Identifier	compiler		1127017	0					
ANR	1127304	Identifier	scratches		1127017	1					
ANR	1127305	ForStatement	for ( i = SLJIT_FIRST_SAVED_REG ; i <= tmp ; i ++ )		1127017	10					
ANR	1127306	ForInit	i = SLJIT_FIRST_SAVED_REG ;	299:6:9344:9369	1127017	0	True				
ANR	1127307	AssignmentExpression	i = SLJIT_FIRST_SAVED_REG		1127017	0		=			
ANR	1127308	Identifier	i		1127017	0					
ANR	1127309	Identifier	SLJIT_FIRST_SAVED_REG		1127017	1					
ANR	1127310	Condition	i <= tmp	299:33:9371:9378	1127017	1	True				
ANR	1127311	RelationalExpression	i <= tmp		1127017	0		<=			
ANR	1127312	Identifier	i		1127017	0					
ANR	1127313	Identifier	tmp		1127017	1					
ANR	1127314	PostIncDecOperationExpression	i ++	299:43:9381:9383	1127017	2	True				
ANR	1127315	Identifier	i		1127017	0					
ANR	1127316	IncDec	++		1127017	1					
ANR	1127317	CompoundStatement		43:48:1049:1049	1127017	3					
ANR	1127318	ExpressionStatement	size = reg_map [ i ] >= 8 ? 2 : 1	300:2:9390:9420	1127017	0	True				
ANR	1127319	AssignmentExpression	size = reg_map [ i ] >= 8 ? 2 : 1		1127017	0		=			
ANR	1127320	Identifier	size		1127017	0					
ANR	1127321	ConditionalExpression	reg_map [ i ] >= 8 ? 2 : 1		1127017	1					
ANR	1127322	Condition	reg_map [ i ] >= 8		1127017	0					
ANR	1127323	RelationalExpression	reg_map [ i ] >= 8		1127017	0		>=			
ANR	1127324	ArrayIndexing	reg_map [ i ]		1127017	0					
ANR	1127325	Identifier	reg_map		1127017	0					
ANR	1127326	Identifier	i		1127017	1					
ANR	1127327	PrimaryExpression	8		1127017	1					
ANR	1127328	PrimaryExpression	2		1127017	1					
ANR	1127329	PrimaryExpression	1		1127017	2					
ANR	1127330	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	301:2:9424:9472	1127017	1	True				
ANR	1127331	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1127017	0		=			
ANR	1127332	Identifier	inst		1127017	0					
ANR	1127333	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1127017	1					
ANR	1127334	CastTarget	sljit_ub *		1127017	0					
ANR	1127335	CallExpression	"ensure_buf ( compiler , 1 + size )"		1127017	1					
ANR	1127336	Callee	ensure_buf		1127017	0					
ANR	1127337	Identifier	ensure_buf		1127017	0					
ANR	1127338	ArgumentList	compiler		1127017	1					
ANR	1127339	Argument	compiler		1127017	0					
ANR	1127340	Identifier	compiler		1127017	0					
ANR	1127341	Argument	1 + size		1127017	1					
ANR	1127342	AdditiveExpression	1 + size		1127017	0		+			
ANR	1127343	PrimaryExpression	1		1127017	0					
ANR	1127344	Identifier	size		1127017	1					
ANR	1127345	ExpressionStatement	FAIL_IF ( ! inst )	302:2:9476:9490	1127017	2	True				
ANR	1127346	CallExpression	FAIL_IF ( ! inst )		1127017	0					
ANR	1127347	Callee	FAIL_IF		1127017	0					
ANR	1127348	Identifier	FAIL_IF		1127017	0					
ANR	1127349	ArgumentList	! inst		1127017	1					
ANR	1127350	Argument	! inst		1127017	0					
ANR	1127351	UnaryOperationExpression	! inst		1127017	0					
ANR	1127352	UnaryOperator	!		1127017	0					
ANR	1127353	Identifier	inst		1127017	1					
ANR	1127354	ExpressionStatement	INC_SIZE ( size )	303:2:9494:9508	1127017	3	True				
ANR	1127355	CallExpression	INC_SIZE ( size )		1127017	0					
ANR	1127356	Callee	INC_SIZE		1127017	0					
ANR	1127357	Identifier	INC_SIZE		1127017	0					
ANR	1127358	ArgumentList	size		1127017	1					
ANR	1127359	Argument	size		1127017	0					
ANR	1127360	Identifier	size		1127017	0					
ANR	1127361	IfStatement	if ( reg_map [ i ] >= 8 )		1127017	4					
ANR	1127362	Condition	reg_map [ i ] >= 8	304:6:9516:9530	1127017	0	True				
ANR	1127363	RelationalExpression	reg_map [ i ] >= 8		1127017	0		>=			
ANR	1127364	ArrayIndexing	reg_map [ i ]		1127017	0					
ANR	1127365	Identifier	reg_map		1127017	0					
ANR	1127366	Identifier	i		1127017	1					
ANR	1127367	PrimaryExpression	8		1127017	1					
ANR	1127368	ExpressionStatement	* inst ++ = REX_B	305:3:9536:9551	1127017	1	True				
ANR	1127369	AssignmentExpression	* inst ++ = REX_B		1127017	0		=			
ANR	1127370	UnaryOperationExpression	* inst ++		1127017	0					
ANR	1127371	UnaryOperator	*		1127017	0					
ANR	1127372	PostIncDecOperationExpression	inst ++		1127017	1					
ANR	1127373	Identifier	inst		1127017	0					
ANR	1127374	IncDec	++		1127017	1					
ANR	1127375	Identifier	REX_B		1127017	1					
ANR	1127376	ExpressionStatement	POP_REG ( reg_lmap [ i ] )	306:2:9555:9575	1127017	5	True				
ANR	1127377	CallExpression	POP_REG ( reg_lmap [ i ] )		1127017	0					
ANR	1127378	Callee	POP_REG		1127017	0					
ANR	1127379	Identifier	POP_REG		1127017	0					
ANR	1127380	ArgumentList	reg_lmap [ i ]		1127017	1					
ANR	1127381	Argument	reg_lmap [ i ]		1127017	0					
ANR	1127382	ArrayIndexing	reg_lmap [ i ]		1127017	0					
ANR	1127383	Identifier	reg_lmap		1127017	0					
ANR	1127384	Identifier	i		1127017	1					
ANR	1127385	ExpressionStatement	tmp = compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - compiler -> saveds ) : SLJIT_FIRST_SAVED_REG	309:1:9582:9698	1127017	11	True				
ANR	1127386	AssignmentExpression	tmp = compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - compiler -> saveds ) : SLJIT_FIRST_SAVED_REG		1127017	0		=			
ANR	1127387	Identifier	tmp		1127017	0					
ANR	1127388	ConditionalExpression	compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - compiler -> saveds ) : SLJIT_FIRST_SAVED_REG		1127017	1					
ANR	1127389	Condition	compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1127017	0					
ANR	1127390	RelationalExpression	compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1127017	0		<			
ANR	1127391	PtrMemberAccess	compiler -> saveds		1127017	0					
ANR	1127392	Identifier	compiler		1127017	0					
ANR	1127393	Identifier	saveds		1127017	1					
ANR	1127394	Identifier	SLJIT_NUMBER_OF_SAVED_REGISTERS		1127017	1					
ANR	1127395	AdditiveExpression	SLJIT_S0 + 1 - compiler -> saveds		1127017	1		+			
ANR	1127396	Identifier	SLJIT_S0		1127017	0					
ANR	1127397	AdditiveExpression	1 - compiler -> saveds		1127017	1		-			
ANR	1127398	PrimaryExpression	1		1127017	0					
ANR	1127399	PtrMemberAccess	compiler -> saveds		1127017	1					
ANR	1127400	Identifier	compiler		1127017	0					
ANR	1127401	Identifier	saveds		1127017	1					
ANR	1127402	Identifier	SLJIT_FIRST_SAVED_REG		1127017	2					
ANR	1127403	ForStatement	for ( i = tmp ; i <= SLJIT_S0 ; i ++ )		1127017	12					
ANR	1127404	ForInit	i = tmp ;	310:6:9706:9713	1127017	0	True				
ANR	1127405	AssignmentExpression	i = tmp		1127017	0		=			
ANR	1127406	Identifier	i		1127017	0					
ANR	1127407	Identifier	tmp		1127017	1					
ANR	1127408	Condition	i <= SLJIT_S0	310:15:9715:9727	1127017	1	True				
ANR	1127409	RelationalExpression	i <= SLJIT_S0		1127017	0		<=			
ANR	1127410	Identifier	i		1127017	0					
ANR	1127411	Identifier	SLJIT_S0		1127017	1					
ANR	1127412	PostIncDecOperationExpression	i ++	310:30:9730:9732	1127017	2	True				
ANR	1127413	Identifier	i		1127017	0					
ANR	1127414	IncDec	++		1127017	1					
ANR	1127415	CompoundStatement		54:35:1398:1398	1127017	3					
ANR	1127416	ExpressionStatement	size = reg_map [ i ] >= 8 ? 2 : 1	311:2:9739:9769	1127017	0	True				
ANR	1127417	AssignmentExpression	size = reg_map [ i ] >= 8 ? 2 : 1		1127017	0		=			
ANR	1127418	Identifier	size		1127017	0					
ANR	1127419	ConditionalExpression	reg_map [ i ] >= 8 ? 2 : 1		1127017	1					
ANR	1127420	Condition	reg_map [ i ] >= 8		1127017	0					
ANR	1127421	RelationalExpression	reg_map [ i ] >= 8		1127017	0		>=			
ANR	1127422	ArrayIndexing	reg_map [ i ]		1127017	0					
ANR	1127423	Identifier	reg_map		1127017	0					
ANR	1127424	Identifier	i		1127017	1					
ANR	1127425	PrimaryExpression	8		1127017	1					
ANR	1127426	PrimaryExpression	2		1127017	1					
ANR	1127427	PrimaryExpression	1		1127017	2					
ANR	1127428	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	312:2:9773:9821	1127017	1	True				
ANR	1127429	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1127017	0		=			
ANR	1127430	Identifier	inst		1127017	0					
ANR	1127431	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1127017	1					
ANR	1127432	CastTarget	sljit_ub *		1127017	0					
ANR	1127433	CallExpression	"ensure_buf ( compiler , 1 + size )"		1127017	1					
ANR	1127434	Callee	ensure_buf		1127017	0					
ANR	1127435	Identifier	ensure_buf		1127017	0					
ANR	1127436	ArgumentList	compiler		1127017	1					
ANR	1127437	Argument	compiler		1127017	0					
ANR	1127438	Identifier	compiler		1127017	0					
ANR	1127439	Argument	1 + size		1127017	1					
ANR	1127440	AdditiveExpression	1 + size		1127017	0		+			
ANR	1127441	PrimaryExpression	1		1127017	0					
ANR	1127442	Identifier	size		1127017	1					
ANR	1127443	ExpressionStatement	FAIL_IF ( ! inst )	313:2:9825:9839	1127017	2	True				
ANR	1127444	CallExpression	FAIL_IF ( ! inst )		1127017	0					
ANR	1127445	Callee	FAIL_IF		1127017	0					
ANR	1127446	Identifier	FAIL_IF		1127017	0					
ANR	1127447	ArgumentList	! inst		1127017	1					
ANR	1127448	Argument	! inst		1127017	0					
ANR	1127449	UnaryOperationExpression	! inst		1127017	0					
ANR	1127450	UnaryOperator	!		1127017	0					
ANR	1127451	Identifier	inst		1127017	1					
ANR	1127452	ExpressionStatement	INC_SIZE ( size )	314:2:9843:9857	1127017	3	True				
ANR	1127453	CallExpression	INC_SIZE ( size )		1127017	0					
ANR	1127454	Callee	INC_SIZE		1127017	0					
ANR	1127455	Identifier	INC_SIZE		1127017	0					
ANR	1127456	ArgumentList	size		1127017	1					
ANR	1127457	Argument	size		1127017	0					
ANR	1127458	Identifier	size		1127017	0					
ANR	1127459	IfStatement	if ( reg_map [ i ] >= 8 )		1127017	4					
ANR	1127460	Condition	reg_map [ i ] >= 8	315:6:9865:9879	1127017	0	True				
ANR	1127461	RelationalExpression	reg_map [ i ] >= 8		1127017	0		>=			
ANR	1127462	ArrayIndexing	reg_map [ i ]		1127017	0					
ANR	1127463	Identifier	reg_map		1127017	0					
ANR	1127464	Identifier	i		1127017	1					
ANR	1127465	PrimaryExpression	8		1127017	1					
ANR	1127466	ExpressionStatement	* inst ++ = REX_B	316:3:9885:9900	1127017	1	True				
ANR	1127467	AssignmentExpression	* inst ++ = REX_B		1127017	0		=			
ANR	1127468	UnaryOperationExpression	* inst ++		1127017	0					
ANR	1127469	UnaryOperator	*		1127017	0					
ANR	1127470	PostIncDecOperationExpression	inst ++		1127017	1					
ANR	1127471	Identifier	inst		1127017	0					
ANR	1127472	IncDec	++		1127017	1					
ANR	1127473	Identifier	REX_B		1127017	1					
ANR	1127474	ExpressionStatement	POP_REG ( reg_lmap [ i ] )	317:2:9904:9924	1127017	5	True				
ANR	1127475	CallExpression	POP_REG ( reg_lmap [ i ] )		1127017	0					
ANR	1127476	Callee	POP_REG		1127017	0					
ANR	1127477	Identifier	POP_REG		1127017	0					
ANR	1127478	ArgumentList	reg_lmap [ i ]		1127017	1					
ANR	1127479	Argument	reg_lmap [ i ]		1127017	0					
ANR	1127480	ArrayIndexing	reg_lmap [ i ]		1127017	0					
ANR	1127481	Identifier	reg_lmap		1127017	0					
ANR	1127482	Identifier	i		1127017	1					
ANR	1127483	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"	320:1:9931:9976	1127017	13	True				
ANR	1127484	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1127017	0		=			
ANR	1127485	Identifier	inst		1127017	0					
ANR	1127486	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1127017	1					
ANR	1127487	CastTarget	sljit_ub *		1127017	0					
ANR	1127488	CallExpression	"ensure_buf ( compiler , 1 + 1 )"		1127017	1					
ANR	1127489	Callee	ensure_buf		1127017	0					
ANR	1127490	Identifier	ensure_buf		1127017	0					
ANR	1127491	ArgumentList	compiler		1127017	1					
ANR	1127492	Argument	compiler		1127017	0					
ANR	1127493	Identifier	compiler		1127017	0					
ANR	1127494	Argument	1 + 1		1127017	1					
ANR	1127495	AdditiveExpression	1 + 1		1127017	0		+			
ANR	1127496	PrimaryExpression	1		1127017	0					
ANR	1127497	PrimaryExpression	1		1127017	1					
ANR	1127498	ExpressionStatement	FAIL_IF ( ! inst )	321:1:9979:9993	1127017	14	True				
ANR	1127499	CallExpression	FAIL_IF ( ! inst )		1127017	0					
ANR	1127500	Callee	FAIL_IF		1127017	0					
ANR	1127501	Identifier	FAIL_IF		1127017	0					
ANR	1127502	ArgumentList	! inst		1127017	1					
ANR	1127503	Argument	! inst		1127017	0					
ANR	1127504	UnaryOperationExpression	! inst		1127017	0					
ANR	1127505	UnaryOperator	!		1127017	0					
ANR	1127506	Identifier	inst		1127017	1					
ANR	1127507	ExpressionStatement	INC_SIZE ( 1 )	322:1:9996:10007	1127017	15	True				
ANR	1127508	CallExpression	INC_SIZE ( 1 )		1127017	0					
ANR	1127509	Callee	INC_SIZE		1127017	0					
ANR	1127510	Identifier	INC_SIZE		1127017	0					
ANR	1127511	ArgumentList	1		1127017	1					
ANR	1127512	Argument	1		1127017	0					
ANR	1127513	PrimaryExpression	1		1127017	0					
ANR	1127514	ExpressionStatement	RET ( )	323:1:10010:10015	1127017	16	True				
ANR	1127515	CallExpression	RET ( )		1127017	0					
ANR	1127516	Callee	RET		1127017	0					
ANR	1127517	Identifier	RET		1127017	0					
ANR	1127518	ArgumentList			1127017	1					
ANR	1127519	ReturnStatement	return SLJIT_SUCCESS ;	324:1:10018:10038	1127017	17	True				
ANR	1127520	Identifier	SLJIT_SUCCESS		1127017	0					
ANR	1127521	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1127017	1					
ANR	1127522	Identifier	sljit_emit_return		1127017	2					
ANR	1127523	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si src , sljit_sw srcw"		1127017	3					
ANR	1127524	Parameter	struct sljit_compiler * compiler	256:52:8261:8291	1127017	0	True				
ANR	1127525	ParameterType	struct sljit_compiler *		1127017	0					
ANR	1127526	Identifier	compiler		1127017	1					
ANR	1127527	Parameter	sljit_si op	256:85:8294:8304	1127017	1	True				
ANR	1127528	ParameterType	sljit_si		1127017	0					
ANR	1127529	Identifier	op		1127017	1					
ANR	1127530	Parameter	sljit_si src	256:98:8307:8318	1127017	2	True				
ANR	1127531	ParameterType	sljit_si		1127017	0					
ANR	1127532	Identifier	src		1127017	1					
ANR	1127533	Parameter	sljit_sw srcw	256:112:8321:8333	1127017	3	True				
ANR	1127534	ParameterType	sljit_sw		1127017	0					
ANR	1127535	Identifier	srcw		1127017	1					
ANR	1127536	CFGEntryNode	ENTRY		1127017		True				
ANR	1127537	CFGExitNode	EXIT		1127017		True				
ANR	1127538	Symbol	compiler -> fsaveds		1127017						
ANR	1127539	Symbol	ADD		1127017						
ANR	1127540	Symbol	compiler -> scratches		1127017						
ANR	1127541	Symbol	compiler -> flags_saved		1127017						
ANR	1127542	Symbol	* inst ++		1127017						
ANR	1127543	Symbol	reg_map		1127017						
ANR	1127544	Symbol	* compiler		1127017						
ANR	1127545	Symbol	SLJIT_NUMBER_OF_SAVED_REGISTERS		1127017						
ANR	1127546	Symbol	check_sljit_emit_return		1127017						
ANR	1127547	Symbol	tmp		1127017						
ANR	1127548	Symbol	* reg_lmap		1127017						
ANR	1127549	Symbol	compiler		1127017						
ANR	1127550	Symbol	compiler -> fscratches		1127017						
ANR	1127551	Symbol	op		1127017						
ANR	1127552	Symbol	GROUP_0F		1127017						
ANR	1127553	Symbol	* inst		1127017						
ANR	1127554	Symbol	src		1127017						
ANR	1127555	Symbol	srcw		1127017						
ANR	1127556	Symbol	i		1127017						
ANR	1127557	Symbol	SLJIT_SUCCESS		1127017						
ANR	1127558	Symbol	* reg_map		1127017						
ANR	1127559	Symbol	REX_B		1127017						
ANR	1127560	Symbol	MOD_REG		1127017						
ANR	1127561	Symbol	SLJIT_S0		1127017						
ANR	1127562	Symbol	reg_lmap		1127017						
ANR	1127563	Symbol	compiler -> local_size		1127017						
ANR	1127564	Symbol	* i		1127017						
ANR	1127565	Symbol	compiler -> saveds		1127017						
ANR	1127566	Symbol	size		1127017						
ANR	1127567	Symbol	GROUP_BINARY_81		1127017						
ANR	1127568	Symbol	inst		1127017						
ANR	1127569	Symbol	ensure_buf		1127017						
ANR	1127570	Symbol	GROUP_BINARY_83		1127017						
ANR	1127571	Symbol	SLJIT_FIRST_SAVED_REG		1127017						
ANR	1127572	Symbol	REX_W		1127017						
ANR	1127573	Symbol	emit_mov_before_return		1127017						
ANR	1127574	Symbol	* ( sljit_si * ) inst		1127017						
ANR	1127575	Function	emit_do_imm32	331:0:10272:10640							
ANR	1127576	FunctionDef	"emit_do_imm32 (struct sljit_compiler * compiler , sljit_ub rex , sljit_ub opcode , sljit_sw imm)"		1127575	0					
ANR	1127577	CompoundStatement		332:0:10380:10640	1127575	0					
ANR	1127578	IdentifierDeclStatement	sljit_ub * inst ;	333:1:10383:10397	1127575	0	True				
ANR	1127579	IdentifierDecl	* inst		1127575	0					
ANR	1127580	IdentifierDeclType	sljit_ub *		1127575	0					
ANR	1127581	Identifier	inst		1127575	1					
ANR	1127582	IdentifierDeclStatement	sljit_si length = 1 + ( rex ? 1 : 0 ) + sizeof ( sljit_si ) ;	334:1:10400:10454	1127575	1	True				
ANR	1127583	IdentifierDecl	length = 1 + ( rex ? 1 : 0 ) + sizeof ( sljit_si )		1127575	0					
ANR	1127584	IdentifierDeclType	sljit_si		1127575	0					
ANR	1127585	Identifier	length		1127575	1					
ANR	1127586	AssignmentExpression	length = 1 + ( rex ? 1 : 0 ) + sizeof ( sljit_si )		1127575	2		=			
ANR	1127587	Identifier	length		1127575	0					
ANR	1127588	AdditiveExpression	1 + ( rex ? 1 : 0 ) + sizeof ( sljit_si )		1127575	1		+			
ANR	1127589	PrimaryExpression	1		1127575	0					
ANR	1127590	AdditiveExpression	( rex ? 1 : 0 ) + sizeof ( sljit_si )		1127575	1		+			
ANR	1127591	ConditionalExpression	rex ? 1 : 0		1127575	0					
ANR	1127592	Condition	rex		1127575	0					
ANR	1127593	Identifier	rex		1127575	0					
ANR	1127594	PrimaryExpression	1		1127575	1					
ANR	1127595	PrimaryExpression	0		1127575	2					
ANR	1127596	SizeofExpression	sizeof ( sljit_si )		1127575	1					
ANR	1127597	Sizeof	sizeof		1127575	0					
ANR	1127598	SizeofOperand	sljit_si		1127575	1					
ANR	1127599	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + length )"	336:1:10458:10508	1127575	2	True				
ANR	1127600	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + length )"		1127575	0		=			
ANR	1127601	Identifier	inst		1127575	0					
ANR	1127602	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + length )"		1127575	1					
ANR	1127603	CastTarget	sljit_ub *		1127575	0					
ANR	1127604	CallExpression	"ensure_buf ( compiler , 1 + length )"		1127575	1					
ANR	1127605	Callee	ensure_buf		1127575	0					
ANR	1127606	Identifier	ensure_buf		1127575	0					
ANR	1127607	ArgumentList	compiler		1127575	1					
ANR	1127608	Argument	compiler		1127575	0					
ANR	1127609	Identifier	compiler		1127575	0					
ANR	1127610	Argument	1 + length		1127575	1					
ANR	1127611	AdditiveExpression	1 + length		1127575	0		+			
ANR	1127612	PrimaryExpression	1		1127575	0					
ANR	1127613	Identifier	length		1127575	1					
ANR	1127614	ExpressionStatement	FAIL_IF ( ! inst )	337:1:10511:10525	1127575	3	True				
ANR	1127615	CallExpression	FAIL_IF ( ! inst )		1127575	0					
ANR	1127616	Callee	FAIL_IF		1127575	0					
ANR	1127617	Identifier	FAIL_IF		1127575	0					
ANR	1127618	ArgumentList	! inst		1127575	1					
ANR	1127619	Argument	! inst		1127575	0					
ANR	1127620	UnaryOperationExpression	! inst		1127575	0					
ANR	1127621	UnaryOperator	!		1127575	0					
ANR	1127622	Identifier	inst		1127575	1					
ANR	1127623	ExpressionStatement	INC_SIZE ( length )	338:1:10528:10544	1127575	4	True				
ANR	1127624	CallExpression	INC_SIZE ( length )		1127575	0					
ANR	1127625	Callee	INC_SIZE		1127575	0					
ANR	1127626	Identifier	INC_SIZE		1127575	0					
ANR	1127627	ArgumentList	length		1127575	1					
ANR	1127628	Argument	length		1127575	0					
ANR	1127629	Identifier	length		1127575	0					
ANR	1127630	IfStatement	if ( rex )		1127575	5					
ANR	1127631	Condition	rex	339:5:10551:10553	1127575	0	True				
ANR	1127632	Identifier	rex		1127575	0					
ANR	1127633	ExpressionStatement	* inst ++ = rex	340:2:10558:10571	1127575	1	True				
ANR	1127634	AssignmentExpression	* inst ++ = rex		1127575	0		=			
ANR	1127635	UnaryOperationExpression	* inst ++		1127575	0					
ANR	1127636	UnaryOperator	*		1127575	0					
ANR	1127637	PostIncDecOperationExpression	inst ++		1127575	1					
ANR	1127638	Identifier	inst		1127575	0					
ANR	1127639	IncDec	++		1127575	1					
ANR	1127640	Identifier	rex		1127575	1					
ANR	1127641	ExpressionStatement	* inst ++ = opcode	341:1:10574:10590	1127575	6	True				
ANR	1127642	AssignmentExpression	* inst ++ = opcode		1127575	0		=			
ANR	1127643	UnaryOperationExpression	* inst ++		1127575	0					
ANR	1127644	UnaryOperator	*		1127575	0					
ANR	1127645	PostIncDecOperationExpression	inst ++		1127575	1					
ANR	1127646	Identifier	inst		1127575	0					
ANR	1127647	IncDec	++		1127575	1					
ANR	1127648	Identifier	opcode		1127575	1					
ANR	1127649	ExpressionStatement	* ( sljit_si * ) inst = imm	342:1:10593:10615	1127575	7	True				
ANR	1127650	AssignmentExpression	* ( sljit_si * ) inst = imm		1127575	0		=			
ANR	1127651	UnaryOperationExpression	* ( sljit_si * ) inst		1127575	0					
ANR	1127652	UnaryOperator	*		1127575	0					
ANR	1127653	CastExpression	( sljit_si * ) inst		1127575	1					
ANR	1127654	CastTarget	sljit_si *		1127575	0					
ANR	1127655	Identifier	inst		1127575	1					
ANR	1127656	Identifier	imm		1127575	1					
ANR	1127657	ReturnStatement	return SLJIT_SUCCESS ;	343:1:10618:10638	1127575	8	True				
ANR	1127658	Identifier	SLJIT_SUCCESS		1127575	0					
ANR	1127659	ReturnType	static sljit_si		1127575	1					
ANR	1127660	Identifier	emit_do_imm32		1127575	2					
ANR	1127661	ParameterList	"struct sljit_compiler * compiler , sljit_ub rex , sljit_ub opcode , sljit_sw imm"		1127575	3					
ANR	1127662	Parameter	struct sljit_compiler * compiler	331:30:10302:10332	1127575	0	True				
ANR	1127663	ParameterType	struct sljit_compiler *		1127575	0					
ANR	1127664	Identifier	compiler		1127575	1					
ANR	1127665	Parameter	sljit_ub rex	331:63:10335:10346	1127575	1	True				
ANR	1127666	ParameterType	sljit_ub		1127575	0					
ANR	1127667	Identifier	rex		1127575	1					
ANR	1127668	Parameter	sljit_ub opcode	331:77:10349:10363	1127575	2	True				
ANR	1127669	ParameterType	sljit_ub		1127575	0					
ANR	1127670	Identifier	opcode		1127575	1					
ANR	1127671	Parameter	sljit_sw imm	331:94:10366:10377	1127575	3	True				
ANR	1127672	ParameterType	sljit_sw		1127575	0					
ANR	1127673	Identifier	imm		1127575	1					
ANR	1127674	CFGEntryNode	ENTRY		1127575		True				
ANR	1127675	CFGExitNode	EXIT		1127575		True				
ANR	1127676	Symbol	* inst		1127575						
ANR	1127677	Symbol	rex		1127575						
ANR	1127678	Symbol	inst		1127575						
ANR	1127679	Symbol	ensure_buf		1127575						
ANR	1127680	Symbol	imm		1127575						
ANR	1127681	Symbol	length		1127575						
ANR	1127682	Symbol	* inst ++		1127575						
ANR	1127683	Symbol	SLJIT_SUCCESS		1127575						
ANR	1127684	Symbol	compiler		1127575						
ANR	1127685	Symbol	opcode		1127575						
ANR	1127686	Symbol	* ( sljit_si * ) inst		1127575						
ANR	1127687	Function	emit_x86_instruction	346:0:10643:16269							
ANR	1127688	FunctionDef	"emit_x86_instruction (struct sljit_compiler * compiler , sljit_si size , sljit_si a , sljit_sw imma , sljit_si b , sljit_sw immb)"		1127687	0					
ANR	1127689	CompoundStatement		351:0:10871:16269	1127687	0					
ANR	1127690	IdentifierDeclStatement	sljit_ub * inst ;	352:1:10874:10888	1127687	0	True				
ANR	1127691	IdentifierDecl	* inst		1127687	0					
ANR	1127692	IdentifierDeclType	sljit_ub *		1127687	0					
ANR	1127693	Identifier	inst		1127687	1					
ANR	1127694	IdentifierDeclStatement	sljit_ub * buf_ptr ;	353:1:10891:10908	1127687	1	True				
ANR	1127695	IdentifierDecl	* buf_ptr		1127687	0					
ANR	1127696	IdentifierDeclType	sljit_ub *		1127687	0					
ANR	1127697	Identifier	buf_ptr		1127687	1					
ANR	1127698	IdentifierDeclStatement	sljit_ub rex = 0 ;	354:1:10911:10927	1127687	2	True				
ANR	1127699	IdentifierDecl	rex = 0		1127687	0					
ANR	1127700	IdentifierDeclType	sljit_ub		1127687	0					
ANR	1127701	Identifier	rex		1127687	1					
ANR	1127702	AssignmentExpression	rex = 0		1127687	2		=			
ANR	1127703	Identifier	rex		1127687	0					
ANR	1127704	PrimaryExpression	0		1127687	1					
ANR	1127705	IdentifierDeclStatement	sljit_si flags = size & ~0xf ;	355:1:10930:10958	1127687	3	True				
ANR	1127706	IdentifierDecl	flags = size & ~0xf		1127687	0					
ANR	1127707	IdentifierDeclType	sljit_si		1127687	0					
ANR	1127708	Identifier	flags		1127687	1					
ANR	1127709	AssignmentExpression	flags = size & ~0xf		1127687	2		=			
ANR	1127710	Identifier	flags		1127687	0					
ANR	1127711	BitAndExpression	size & ~0xf		1127687	1		&			
ANR	1127712	Identifier	size		1127687	0					
ANR	1127713	Identifier	~0xf		1127687	1					
ANR	1127714	IdentifierDeclStatement	sljit_si inst_size ;	356:1:10961:10979	1127687	4	True				
ANR	1127715	IdentifierDecl	inst_size		1127687	0					
ANR	1127716	IdentifierDeclType	sljit_si		1127687	0					
ANR	1127717	Identifier	inst_size		1127687	1					
ANR	1127718	ExpressionStatement	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma ) )	359:1:11028:11099	1127687	5	True				
ANR	1127719	CallExpression	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma ) )		1127687	0					
ANR	1127720	Callee	SLJIT_ASSERT		1127687	0					
ANR	1127721	Identifier	SLJIT_ASSERT		1127687	0					
ANR	1127722	ArgumentList	! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma )		1127687	1					
ANR	1127723	Argument	! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma )		1127687	0					
ANR	1127724	OrExpression	! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma )		1127687	0		||			
ANR	1127725	UnaryOperationExpression	! ( a & SLJIT_IMM )		1127687	0					
ANR	1127726	UnaryOperator	!		1127687	0					
ANR	1127727	BitAndExpression	a & SLJIT_IMM		1127687	1		&			
ANR	1127728	Identifier	a		1127687	0					
ANR	1127729	Identifier	SLJIT_IMM		1127687	1					
ANR	1127730	OrExpression	compiler -> mode32 || IS_HALFWORD ( imma )		1127687	1		||			
ANR	1127731	PtrMemberAccess	compiler -> mode32		1127687	0					
ANR	1127732	Identifier	compiler		1127687	0					
ANR	1127733	Identifier	mode32		1127687	1					
ANR	1127734	CallExpression	IS_HALFWORD ( imma )		1127687	1					
ANR	1127735	Callee	IS_HALFWORD		1127687	0					
ANR	1127736	Identifier	IS_HALFWORD		1127687	0					
ANR	1127737	ArgumentList	imma		1127687	1					
ANR	1127738	Argument	imma		1127687	0					
ANR	1127739	Identifier	imma		1127687	0					
ANR	1127740	ExpressionStatement	SLJIT_ASSERT ( ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS ) )	361:1:11137:11227	1127687	6	True				
ANR	1127741	CallExpression	SLJIT_ASSERT ( ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS ) )		1127687	0					
ANR	1127742	Callee	SLJIT_ASSERT		1127687	0					
ANR	1127743	Identifier	SLJIT_ASSERT		1127687	0					
ANR	1127744	ArgumentList	( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS )		1127687	1					
ANR	1127745	Argument	( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS )		1127687	0					
ANR	1127746	EqualityExpression	( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS )		1127687	0		!=			
ANR	1127747	BitAndExpression	flags & ( EX86_BIN_INS | EX86_SHIFT_INS )		1127687	0		&			
ANR	1127748	Identifier	flags		1127687	0					
ANR	1127749	InclusiveOrExpression	EX86_BIN_INS | EX86_SHIFT_INS		1127687	1		|			
ANR	1127750	Identifier	EX86_BIN_INS		1127687	0					
ANR	1127751	Identifier	EX86_SHIFT_INS		1127687	1					
ANR	1127752	InclusiveOrExpression	EX86_BIN_INS | EX86_SHIFT_INS		1127687	1		|			
ANR	1127753	Identifier	EX86_BIN_INS		1127687	0					
ANR	1127754	Identifier	EX86_SHIFT_INS		1127687	1					
ANR	1127755	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0 )	363:1:11284:11390	1127687	7	True				
ANR	1127756	CallExpression	SLJIT_ASSERT ( ! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0 )		1127687	0					
ANR	1127757	Callee	SLJIT_ASSERT		1127687	0					
ANR	1127758	Identifier	SLJIT_ASSERT		1127687	0					
ANR	1127759	ArgumentList	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1127687	1					
ANR	1127760	Argument	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1127687	0					
ANR	1127761	OrExpression	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1127687	0		||			
ANR	1127762	UnaryOperationExpression	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) )		1127687	0					
ANR	1127763	UnaryOperator	!		1127687	0					
ANR	1127764	BitAndExpression	flags & ( EX86_BIN_INS | EX86_SHIFT_INS )		1127687	1		&			
ANR	1127765	Identifier	flags		1127687	0					
ANR	1127766	InclusiveOrExpression	EX86_BIN_INS | EX86_SHIFT_INS		1127687	1		|			
ANR	1127767	Identifier	EX86_BIN_INS		1127687	0					
ANR	1127768	Identifier	EX86_SHIFT_INS		1127687	1					
ANR	1127769	EqualityExpression	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1127687	1		==			
ANR	1127770	BitAndExpression	flags & ( EX86_BYTE_ARG | EX86_HALF_ARG )		1127687	0		&			
ANR	1127771	Identifier	flags		1127687	0					
ANR	1127772	InclusiveOrExpression	EX86_BYTE_ARG | EX86_HALF_ARG		1127687	1		|			
ANR	1127773	Identifier	EX86_BYTE_ARG		1127687	0					
ANR	1127774	Identifier	EX86_HALF_ARG		1127687	1					
ANR	1127775	PrimaryExpression	0		1127687	1					
ANR	1127776	ExpressionStatement	SLJIT_ASSERT ( ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG ) )	365:1:11439:11529	1127687	8	True				
ANR	1127777	CallExpression	SLJIT_ASSERT ( ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG ) )		1127687	0					
ANR	1127778	Callee	SLJIT_ASSERT		1127687	0					
ANR	1127779	Identifier	SLJIT_ASSERT		1127687	0					
ANR	1127780	ArgumentList	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG )		1127687	1					
ANR	1127781	Argument	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG )		1127687	0					
ANR	1127782	EqualityExpression	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG )		1127687	0		!=			
ANR	1127783	BitAndExpression	flags & ( EX86_BYTE_ARG | EX86_HALF_ARG )		1127687	0		&			
ANR	1127784	Identifier	flags		1127687	0					
ANR	1127785	InclusiveOrExpression	EX86_BYTE_ARG | EX86_HALF_ARG		1127687	1		|			
ANR	1127786	Identifier	EX86_BYTE_ARG		1127687	0					
ANR	1127787	Identifier	EX86_HALF_ARG		1127687	1					
ANR	1127788	InclusiveOrExpression	EX86_BYTE_ARG | EX86_HALF_ARG		1127687	1		|			
ANR	1127789	Identifier	EX86_BYTE_ARG		1127687	0					
ANR	1127790	Identifier	EX86_HALF_ARG		1127687	1					
ANR	1127791	ExpressionStatement	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 ) )	367:1:11575:11629	1127687	9	True				
ANR	1127792	CallExpression	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 ) )		1127687	0					
ANR	1127793	Callee	SLJIT_ASSERT		1127687	0					
ANR	1127794	Identifier	SLJIT_ASSERT		1127687	0					
ANR	1127795	ArgumentList	! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 )		1127687	1					
ANR	1127796	Argument	! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 )		1127687	0					
ANR	1127797	OrExpression	! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 )		1127687	0		||			
ANR	1127798	UnaryOperationExpression	! ( a & SLJIT_IMM )		1127687	0					
ANR	1127799	UnaryOperator	!		1127687	0					
ANR	1127800	BitAndExpression	a & SLJIT_IMM		1127687	1		&			
ANR	1127801	Identifier	a		1127687	0					
ANR	1127802	Identifier	SLJIT_IMM		1127687	1					
ANR	1127803	UnaryOperationExpression	! ( flags & EX86_SSE2 )		1127687	1					
ANR	1127804	UnaryOperator	!		1127687	0					
ANR	1127805	BitAndExpression	flags & EX86_SSE2		1127687	1		&			
ANR	1127806	Identifier	flags		1127687	0					
ANR	1127807	Identifier	EX86_SSE2		1127687	1					
ANR	1127808	ExpressionStatement	SLJIT_ASSERT ( ( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 ) )	368:1:11632:11874	1127687	10	True				
ANR	1127809	CallExpression	SLJIT_ASSERT ( ( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 ) )		1127687	0					
ANR	1127810	Callee	SLJIT_ASSERT		1127687	0					
ANR	1127811	Identifier	SLJIT_ASSERT		1127687	0					
ANR	1127812	ArgumentList	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1127687	1					
ANR	1127813	Argument	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1127687	0					
ANR	1127814	AndExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1127687	0		&&			
ANR	1127815	EqualityExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 )		1127687	0		!=			
ANR	1127816	BitAndExpression	flags & ( EX86_PREF_F2 | EX86_PREF_F3 )		1127687	0		&			
ANR	1127817	Identifier	flags		1127687	0					
ANR	1127818	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_F3		1127687	1		|			
ANR	1127819	Identifier	EX86_PREF_F2		1127687	0					
ANR	1127820	Identifier	EX86_PREF_F3		1127687	1					
ANR	1127821	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_F3		1127687	1		|			
ANR	1127822	Identifier	EX86_PREF_F2		1127687	0					
ANR	1127823	Identifier	EX86_PREF_F3		1127687	1					
ANR	1127824	AndExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1127687	1		&&			
ANR	1127825	EqualityExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 )		1127687	0		!=			
ANR	1127826	BitAndExpression	flags & ( EX86_PREF_F2 | EX86_PREF_66 )		1127687	0		&			
ANR	1127827	Identifier	flags		1127687	0					
ANR	1127828	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_66		1127687	1		|			
ANR	1127829	Identifier	EX86_PREF_F2		1127687	0					
ANR	1127830	Identifier	EX86_PREF_66		1127687	1					
ANR	1127831	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_66		1127687	1		|			
ANR	1127832	Identifier	EX86_PREF_F2		1127687	0					
ANR	1127833	Identifier	EX86_PREF_66		1127687	1					
ANR	1127834	EqualityExpression	( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1127687	1		!=			
ANR	1127835	BitAndExpression	flags & ( EX86_PREF_F3 | EX86_PREF_66 )		1127687	0		&			
ANR	1127836	Identifier	flags		1127687	0					
ANR	1127837	InclusiveOrExpression	EX86_PREF_F3 | EX86_PREF_66		1127687	1		|			
ANR	1127838	Identifier	EX86_PREF_F3		1127687	0					
ANR	1127839	Identifier	EX86_PREF_66		1127687	1					
ANR	1127840	InclusiveOrExpression	EX86_PREF_F3 | EX86_PREF_66		1127687	1		|			
ANR	1127841	Identifier	EX86_PREF_F3		1127687	0					
ANR	1127842	Identifier	EX86_PREF_66		1127687	1					
ANR	1127843	ExpressionStatement	size &= 0xf	372:1:11878:11889	1127687	11	True				
ANR	1127844	AssignmentExpression	size &= 0xf		1127687	0		&=			
ANR	1127845	Identifier	size		1127687	0					
ANR	1127846	PrimaryExpression	0xf		1127687	1					
ANR	1127847	ExpressionStatement	inst_size = size	373:1:11892:11908	1127687	12	True				
ANR	1127848	AssignmentExpression	inst_size = size		1127687	0		=			
ANR	1127849	Identifier	inst_size		1127687	0					
ANR	1127850	Identifier	size		1127687	1					
ANR	1127851	IfStatement	if ( ! compiler -> mode32 && ! ( flags & EX86_NO_REXW ) )		1127687	13					
ANR	1127852	Condition	! compiler -> mode32 && ! ( flags & EX86_NO_REXW )	375:5:11916:11959	1127687	0	True				
ANR	1127853	AndExpression	! compiler -> mode32 && ! ( flags & EX86_NO_REXW )		1127687	0		&&			
ANR	1127854	UnaryOperationExpression	! compiler -> mode32		1127687	0					
ANR	1127855	UnaryOperator	!		1127687	0					
ANR	1127856	PtrMemberAccess	compiler -> mode32		1127687	1					
ANR	1127857	Identifier	compiler		1127687	0					
ANR	1127858	Identifier	mode32		1127687	1					
ANR	1127859	UnaryOperationExpression	! ( flags & EX86_NO_REXW )		1127687	1					
ANR	1127860	UnaryOperator	!		1127687	0					
ANR	1127861	BitAndExpression	flags & EX86_NO_REXW		1127687	1		&			
ANR	1127862	Identifier	flags		1127687	0					
ANR	1127863	Identifier	EX86_NO_REXW		1127687	1					
ANR	1127864	ExpressionStatement	rex |= REX_W	376:2:11964:11976	1127687	1	True				
ANR	1127865	AssignmentExpression	rex |= REX_W		1127687	0		|=			
ANR	1127866	Identifier	rex		1127687	0					
ANR	1127867	Identifier	REX_W		1127687	1					
ANR	1127868	ElseStatement	else		1127687	0					
ANR	1127869	IfStatement	if ( flags & EX86_REX )		1127687	0					
ANR	1127870	Condition	flags & EX86_REX	377:10:11988:12003	1127687	0	True				
ANR	1127871	BitAndExpression	flags & EX86_REX		1127687	0		&			
ANR	1127872	Identifier	flags		1127687	0					
ANR	1127873	Identifier	EX86_REX		1127687	1					
ANR	1127874	ExpressionStatement	rex |= REX	378:2:12008:12018	1127687	1	True				
ANR	1127875	AssignmentExpression	rex |= REX		1127687	0		|=			
ANR	1127876	Identifier	rex		1127687	0					
ANR	1127877	Identifier	REX		1127687	1					
ANR	1127878	IfStatement	if ( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) )		1127687	14					
ANR	1127879	Condition	flags & ( EX86_PREF_F2 | EX86_PREF_F3 )	380:5:12026:12062	1127687	0	True				
ANR	1127880	BitAndExpression	flags & ( EX86_PREF_F2 | EX86_PREF_F3 )		1127687	0		&			
ANR	1127881	Identifier	flags		1127687	0					
ANR	1127882	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_F3		1127687	1		|			
ANR	1127883	Identifier	EX86_PREF_F2		1127687	0					
ANR	1127884	Identifier	EX86_PREF_F3		1127687	1					
ANR	1127885	ExpressionStatement	inst_size ++	381:2:12067:12078	1127687	1	True				
ANR	1127886	PostIncDecOperationExpression	inst_size ++		1127687	0					
ANR	1127887	Identifier	inst_size		1127687	0					
ANR	1127888	IncDec	++		1127687	1					
ANR	1127889	IfStatement	if ( flags & EX86_PREF_66 )		1127687	15					
ANR	1127890	Condition	flags & EX86_PREF_66	382:5:12085:12104	1127687	0	True				
ANR	1127891	BitAndExpression	flags & EX86_PREF_66		1127687	0		&			
ANR	1127892	Identifier	flags		1127687	0					
ANR	1127893	Identifier	EX86_PREF_66		1127687	1					
ANR	1127894	ExpressionStatement	inst_size ++	383:2:12109:12120	1127687	1	True				
ANR	1127895	PostIncDecOperationExpression	inst_size ++		1127687	0					
ANR	1127896	Identifier	inst_size		1127687	0					
ANR	1127897	IncDec	++		1127687	1					
ANR	1127898	ExpressionStatement	inst_size += 1	386:1:12152:12166	1127687	16	True				
ANR	1127899	AssignmentExpression	inst_size += 1		1127687	0		+=			
ANR	1127900	Identifier	inst_size		1127687	0					
ANR	1127901	PrimaryExpression	1		1127687	1					
ANR	1127902	IfStatement	if ( b & SLJIT_MEM )		1127687	17					
ANR	1127903	Condition	b & SLJIT_MEM	387:5:12193:12205	1127687	0	True				
ANR	1127904	BitAndExpression	b & SLJIT_MEM		1127687	0		&			
ANR	1127905	Identifier	b		1127687	0					
ANR	1127906	Identifier	SLJIT_MEM		1127687	1					
ANR	1127907	CompoundStatement		37:20:1336:1336	1127687	1					
ANR	1127908	IfStatement	if ( ! ( b & OFFS_REG_MASK ) )		1127687	0					
ANR	1127909	Condition	! ( b & OFFS_REG_MASK )	388:6:12216:12235	1127687	0	True				
ANR	1127910	UnaryOperationExpression	! ( b & OFFS_REG_MASK )		1127687	0					
ANR	1127911	UnaryOperator	!		1127687	0					
ANR	1127912	BitAndExpression	b & OFFS_REG_MASK		1127687	1		&			
ANR	1127913	Identifier	b		1127687	0					
ANR	1127914	Identifier	OFFS_REG_MASK		1127687	1					
ANR	1127915	CompoundStatement		38:28:1366:1366	1127687	1					
ANR	1127916	IfStatement	if ( NOT_HALFWORD ( immb ) )		1127687	0					
ANR	1127917	Condition	NOT_HALFWORD ( immb )	389:7:12247:12264	1127687	0	True				
ANR	1127918	CallExpression	NOT_HALFWORD ( immb )		1127687	0					
ANR	1127919	Callee	NOT_HALFWORD		1127687	0					
ANR	1127920	Identifier	NOT_HALFWORD		1127687	0					
ANR	1127921	ArgumentList	immb		1127687	1					
ANR	1127922	Argument	immb		1127687	0					
ANR	1127923	Identifier	immb		1127687	0					
ANR	1127924	CompoundStatement		39:27:1395:1395	1127687	1					
ANR	1127925	IfStatement	"if ( emit_load_imm64 ( compiler , TMP_REG3 , immb ) )"		1127687	0					
ANR	1127926	Condition	"emit_load_imm64 ( compiler , TMP_REG3 , immb )"	390:8:12277:12317	1127687	0	True				
ANR	1127927	CallExpression	"emit_load_imm64 ( compiler , TMP_REG3 , immb )"		1127687	0					
ANR	1127928	Callee	emit_load_imm64		1127687	0					
ANR	1127929	Identifier	emit_load_imm64		1127687	0					
ANR	1127930	ArgumentList	compiler		1127687	1					
ANR	1127931	Argument	compiler		1127687	0					
ANR	1127932	Identifier	compiler		1127687	0					
ANR	1127933	Argument	TMP_REG3		1127687	1					
ANR	1127934	Identifier	TMP_REG3		1127687	0					
ANR	1127935	Argument	immb		1127687	2					
ANR	1127936	Identifier	immb		1127687	0					
ANR	1127937	ReturnStatement	return NULL ;	391:5:12325:12336	1127687	1	True				
ANR	1127938	Identifier	NULL		1127687	0					
ANR	1127939	ExpressionStatement	immb = 0	392:4:12342:12350	1127687	1	True				
ANR	1127940	AssignmentExpression	immb = 0		1127687	0		=			
ANR	1127941	Identifier	immb		1127687	0					
ANR	1127942	PrimaryExpression	0		1127687	1					
ANR	1127943	IfStatement	if ( b & REG_MASK )		1127687	2					
ANR	1127944	Condition	b & REG_MASK	393:8:12360:12371	1127687	0	True				
ANR	1127945	BitAndExpression	b & REG_MASK		1127687	0		&			
ANR	1127946	Identifier	b		1127687	0					
ANR	1127947	Identifier	REG_MASK		1127687	1					
ANR	1127948	ExpressionStatement	b |= TO_OFFS_REG ( TMP_REG3 )	394:5:12379:12405	1127687	1	True				
ANR	1127949	AssignmentExpression	b |= TO_OFFS_REG ( TMP_REG3 )		1127687	0		|=			
ANR	1127950	Identifier	b		1127687	0					
ANR	1127951	CallExpression	TO_OFFS_REG ( TMP_REG3 )		1127687	1					
ANR	1127952	Callee	TO_OFFS_REG		1127687	0					
ANR	1127953	Identifier	TO_OFFS_REG		1127687	0					
ANR	1127954	ArgumentList	TMP_REG3		1127687	1					
ANR	1127955	Argument	TMP_REG3		1127687	0					
ANR	1127956	Identifier	TMP_REG3		1127687	0					
ANR	1127957	ElseStatement	else		1127687	0					
ANR	1127958	ExpressionStatement	b |= TMP_REG3	396:5:12421:12434	1127687	0	True				
ANR	1127959	AssignmentExpression	b |= TMP_REG3		1127687	0		|=			
ANR	1127960	Identifier	b		1127687	0					
ANR	1127961	Identifier	TMP_REG3		1127687	1					
ANR	1127962	ElseStatement	else		1127687	0					
ANR	1127963	IfStatement	if ( reg_lmap [ b & REG_MASK ] == 4 )		1127687	0					
ANR	1127964	Condition	reg_lmap [ b & REG_MASK ] == 4	398:12:12453:12479	1127687	0	True				
ANR	1127965	EqualityExpression	reg_lmap [ b & REG_MASK ] == 4		1127687	0		==			
ANR	1127966	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1127687	0					
ANR	1127967	Identifier	reg_lmap		1127687	0					
ANR	1127968	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1127969	Identifier	b		1127687	0					
ANR	1127970	Identifier	REG_MASK		1127687	1					
ANR	1127971	PrimaryExpression	4		1127687	1					
ANR	1127972	ExpressionStatement	b |= TO_OFFS_REG ( SLJIT_SP )	399:4:12486:12512	1127687	1	True				
ANR	1127973	AssignmentExpression	b |= TO_OFFS_REG ( SLJIT_SP )		1127687	0		|=			
ANR	1127974	Identifier	b		1127687	0					
ANR	1127975	CallExpression	TO_OFFS_REG ( SLJIT_SP )		1127687	1					
ANR	1127976	Callee	TO_OFFS_REG		1127687	0					
ANR	1127977	Identifier	TO_OFFS_REG		1127687	0					
ANR	1127978	ArgumentList	SLJIT_SP		1127687	1					
ANR	1127979	Argument	SLJIT_SP		1127687	0					
ANR	1127980	Identifier	SLJIT_SP		1127687	0					
ANR	1127981	IfStatement	if ( ( b & REG_MASK ) == SLJIT_UNUSED )		1127687	1					
ANR	1127982	Condition	( b & REG_MASK ) == SLJIT_UNUSED	402:6:12525:12554	1127687	0	True				
ANR	1127983	EqualityExpression	( b & REG_MASK ) == SLJIT_UNUSED		1127687	0		==			
ANR	1127984	BitAndExpression	b & REG_MASK		1127687	0		&			
ANR	1127985	Identifier	b		1127687	0					
ANR	1127986	Identifier	REG_MASK		1127687	1					
ANR	1127987	Identifier	SLJIT_UNUSED		1127687	1					
ANR	1127988	ExpressionStatement	inst_size += 1 + sizeof ( sljit_si )	403:3:12560:12593	1127687	1	True				
ANR	1127989	AssignmentExpression	inst_size += 1 + sizeof ( sljit_si )		1127687	0		+=			
ANR	1127990	Identifier	inst_size		1127687	0					
ANR	1127991	AdditiveExpression	1 + sizeof ( sljit_si )		1127687	1		+			
ANR	1127992	PrimaryExpression	1		1127687	0					
ANR	1127993	SizeofExpression	sizeof ( sljit_si )		1127687	1					
ANR	1127994	Sizeof	sizeof		1127687	0					
ANR	1127995	SizeofOperand	sljit_si		1127687	1					
ANR	1127996	ElseStatement	else		1127687	0					
ANR	1127997	CompoundStatement		54:7:1785:1785	1127687	0					
ANR	1127998	IfStatement	if ( reg_map [ b & REG_MASK ] >= 8 )		1127687	0					
ANR	1127999	Condition	reg_map [ b & REG_MASK ] >= 8	405:7:12666:12691	1127687	0	True				
ANR	1128000	RelationalExpression	reg_map [ b & REG_MASK ] >= 8		1127687	0		>=			
ANR	1128001	ArrayIndexing	reg_map [ b & REG_MASK ]		1127687	0					
ANR	1128002	Identifier	reg_map		1127687	0					
ANR	1128003	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1128004	Identifier	b		1127687	0					
ANR	1128005	Identifier	REG_MASK		1127687	1					
ANR	1128006	PrimaryExpression	8		1127687	1					
ANR	1128007	ExpressionStatement	rex |= REX_B	406:4:12698:12710	1127687	1	True				
ANR	1128008	AssignmentExpression	rex |= REX_B		1127687	0		|=			
ANR	1128009	Identifier	rex		1127687	0					
ANR	1128010	Identifier	REX_B		1127687	1					
ANR	1128011	IfStatement	if ( immb != 0 && ( ! ( b & OFFS_REG_MASK ) || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP ) ) )		1127687	1					
ANR	1128012	Condition	immb != 0 && ( ! ( b & OFFS_REG_MASK ) || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP ) )	408:7:12720:12802	1127687	0	True				
ANR	1128013	AndExpression	immb != 0 && ( ! ( b & OFFS_REG_MASK ) || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP ) )		1127687	0		&&			
ANR	1128014	EqualityExpression	immb != 0		1127687	0		!=			
ANR	1128015	Identifier	immb		1127687	0					
ANR	1128016	PrimaryExpression	0		1127687	1					
ANR	1128017	OrExpression	! ( b & OFFS_REG_MASK ) || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1127687	1		||			
ANR	1128018	UnaryOperationExpression	! ( b & OFFS_REG_MASK )		1127687	0					
ANR	1128019	UnaryOperator	!		1127687	0					
ANR	1128020	BitAndExpression	b & OFFS_REG_MASK		1127687	1		&			
ANR	1128021	Identifier	b		1127687	0					
ANR	1128022	Identifier	OFFS_REG_MASK		1127687	1					
ANR	1128023	EqualityExpression	( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1127687	1		==			
ANR	1128024	BitAndExpression	b & OFFS_REG_MASK		1127687	0		&			
ANR	1128025	Identifier	b		1127687	0					
ANR	1128026	Identifier	OFFS_REG_MASK		1127687	1					
ANR	1128027	CallExpression	TO_OFFS_REG ( SLJIT_SP )		1127687	1					
ANR	1128028	Callee	TO_OFFS_REG		1127687	0					
ANR	1128029	Identifier	TO_OFFS_REG		1127687	0					
ANR	1128030	ArgumentList	SLJIT_SP		1127687	1					
ANR	1128031	Argument	SLJIT_SP		1127687	0					
ANR	1128032	Identifier	SLJIT_SP		1127687	0					
ANR	1128033	CompoundStatement		58:92:1933:1933	1127687	1					
ANR	1128034	IfStatement	if ( immb <= 127 && immb >= - 128 )		1127687	0					
ANR	1128035	Condition	immb <= 127 && immb >= - 128	410:8:12844:12870	1127687	0	True				
ANR	1128036	AndExpression	immb <= 127 && immb >= - 128		1127687	0		&&			
ANR	1128037	RelationalExpression	immb <= 127		1127687	0		<=			
ANR	1128038	Identifier	immb		1127687	0					
ANR	1128039	PrimaryExpression	127		1127687	1					
ANR	1128040	RelationalExpression	immb >= - 128		1127687	1		>=			
ANR	1128041	Identifier	immb		1127687	0					
ANR	1128042	UnaryOperationExpression	- 128		1127687	1					
ANR	1128043	UnaryOperator	-		1127687	0					
ANR	1128044	PrimaryExpression	128		1127687	1					
ANR	1128045	ExpressionStatement	inst_size += sizeof ( sljit_sb )	411:5:12878:12907	1127687	1	True				
ANR	1128046	AssignmentExpression	inst_size += sizeof ( sljit_sb )		1127687	0		+=			
ANR	1128047	Identifier	inst_size		1127687	0					
ANR	1128048	SizeofExpression	sizeof ( sljit_sb )		1127687	1					
ANR	1128049	Sizeof	sizeof		1127687	0					
ANR	1128050	SizeofOperand	sljit_sb		1127687	1					
ANR	1128051	ElseStatement	else		1127687	0					
ANR	1128052	ExpressionStatement	inst_size += sizeof ( sljit_si )	413:5:12923:12952	1127687	0	True				
ANR	1128053	AssignmentExpression	inst_size += sizeof ( sljit_si )		1127687	0		+=			
ANR	1128054	Identifier	inst_size		1127687	0					
ANR	1128055	SizeofExpression	sizeof ( sljit_si )		1127687	1					
ANR	1128056	Sizeof	sizeof		1127687	0					
ANR	1128057	SizeofOperand	sljit_si		1127687	1					
ANR	1128058	ElseStatement	else		1127687	0					
ANR	1128059	IfStatement	if ( reg_lmap [ b & REG_MASK ] == 5 )		1127687	0					
ANR	1128060	Condition	reg_lmap [ b & REG_MASK ] == 5	415:12:12971:12997	1127687	0	True				
ANR	1128061	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1127687	0		==			
ANR	1128062	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1127687	0					
ANR	1128063	Identifier	reg_lmap		1127687	0					
ANR	1128064	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1128065	Identifier	b		1127687	0					
ANR	1128066	Identifier	REG_MASK		1127687	1					
ANR	1128067	PrimaryExpression	5		1127687	1					
ANR	1128068	ExpressionStatement	inst_size += sizeof ( sljit_sb )	416:4:13004:13033	1127687	1	True				
ANR	1128069	AssignmentExpression	inst_size += sizeof ( sljit_sb )		1127687	0		+=			
ANR	1128070	Identifier	inst_size		1127687	0					
ANR	1128071	SizeofExpression	sizeof ( sljit_sb )		1127687	1					
ANR	1128072	Sizeof	sizeof		1127687	0					
ANR	1128073	SizeofOperand	sljit_sb		1127687	1					
ANR	1128074	IfStatement	if ( ( b & OFFS_REG_MASK ) != SLJIT_UNUSED )		1127687	2					
ANR	1128075	Condition	( b & OFFS_REG_MASK ) != SLJIT_UNUSED	418:7:13043:13077	1127687	0	True				
ANR	1128076	EqualityExpression	( b & OFFS_REG_MASK ) != SLJIT_UNUSED		1127687	0		!=			
ANR	1128077	BitAndExpression	b & OFFS_REG_MASK		1127687	0		&			
ANR	1128078	Identifier	b		1127687	0					
ANR	1128079	Identifier	OFFS_REG_MASK		1127687	1					
ANR	1128080	Identifier	SLJIT_UNUSED		1127687	1					
ANR	1128081	CompoundStatement		68:44:2208:2208	1127687	1					
ANR	1128082	ExpressionStatement	inst_size += 1	419:4:13086:13100	1127687	0	True				
ANR	1128083	AssignmentExpression	inst_size += 1		1127687	0		+=			
ANR	1128084	Identifier	inst_size		1127687	0					
ANR	1128085	PrimaryExpression	1		1127687	1					
ANR	1128086	IfStatement	if ( reg_map [ OFFS_REG ( b ) ] >= 8 )		1127687	1					
ANR	1128087	Condition	reg_map [ OFFS_REG ( b ) ] >= 8	420:8:13126:13150	1127687	0	True				
ANR	1128088	RelationalExpression	reg_map [ OFFS_REG ( b ) ] >= 8		1127687	0		>=			
ANR	1128089	ArrayIndexing	reg_map [ OFFS_REG ( b ) ]		1127687	0					
ANR	1128090	Identifier	reg_map		1127687	0					
ANR	1128091	CallExpression	OFFS_REG ( b )		1127687	1					
ANR	1128092	Callee	OFFS_REG		1127687	0					
ANR	1128093	Identifier	OFFS_REG		1127687	0					
ANR	1128094	ArgumentList	b		1127687	1					
ANR	1128095	Argument	b		1127687	0					
ANR	1128096	Identifier	b		1127687	0					
ANR	1128097	PrimaryExpression	8		1127687	1					
ANR	1128098	ExpressionStatement	rex |= REX_X	421:5:13158:13170	1127687	1	True				
ANR	1128099	AssignmentExpression	rex |= REX_X		1127687	0		|=			
ANR	1128100	Identifier	rex		1127687	0					
ANR	1128101	Identifier	REX_X		1127687	1					
ANR	1128102	ElseStatement	else		1127687	0					
ANR	1128103	IfStatement	if ( ! ( flags & EX86_SSE2_OP2 ) && reg_map [ b ] >= 8 )		1127687	0					
ANR	1128104	Condition	! ( flags & EX86_SSE2_OP2 ) && reg_map [ b ] >= 8	425:10:13194:13236	1127687	0	True				
ANR	1128105	AndExpression	! ( flags & EX86_SSE2_OP2 ) && reg_map [ b ] >= 8		1127687	0		&&			
ANR	1128106	UnaryOperationExpression	! ( flags & EX86_SSE2_OP2 )		1127687	0					
ANR	1128107	UnaryOperator	!		1127687	0					
ANR	1128108	BitAndExpression	flags & EX86_SSE2_OP2		1127687	1		&			
ANR	1128109	Identifier	flags		1127687	0					
ANR	1128110	Identifier	EX86_SSE2_OP2		1127687	1					
ANR	1128111	RelationalExpression	reg_map [ b ] >= 8		1127687	1		>=			
ANR	1128112	ArrayIndexing	reg_map [ b ]		1127687	0					
ANR	1128113	Identifier	reg_map		1127687	0					
ANR	1128114	Identifier	b		1127687	1					
ANR	1128115	PrimaryExpression	8		1127687	1					
ANR	1128116	ExpressionStatement	rex |= REX_B	426:2:13241:13253	1127687	1	True				
ANR	1128117	AssignmentExpression	rex |= REX_B		1127687	0		|=			
ANR	1128118	Identifier	rex		1127687	0					
ANR	1128119	Identifier	REX_B		1127687	1					
ANR	1128120	IfStatement	if ( a & SLJIT_IMM )		1127687	18					
ANR	1128121	Condition	a & SLJIT_IMM	428:5:13261:13273	1127687	0	True				
ANR	1128122	BitAndExpression	a & SLJIT_IMM		1127687	0		&			
ANR	1128123	Identifier	a		1127687	0					
ANR	1128124	Identifier	SLJIT_IMM		1127687	1					
ANR	1128125	CompoundStatement		78:20:2404:2404	1127687	1					
ANR	1128126	IfStatement	if ( flags & EX86_BIN_INS )		1127687	0					
ANR	1128127	Condition	flags & EX86_BIN_INS	429:6:13284:13303	1127687	0	True				
ANR	1128128	BitAndExpression	flags & EX86_BIN_INS		1127687	0		&			
ANR	1128129	Identifier	flags		1127687	0					
ANR	1128130	Identifier	EX86_BIN_INS		1127687	1					
ANR	1128131	CompoundStatement		79:28:2434:2434	1127687	1					
ANR	1128132	IfStatement	if ( imma <= 127 && imma >= - 128 )		1127687	0					
ANR	1128133	Condition	imma <= 127 && imma >= - 128	430:7:13315:13341	1127687	0	True				
ANR	1128134	AndExpression	imma <= 127 && imma >= - 128		1127687	0		&&			
ANR	1128135	RelationalExpression	imma <= 127		1127687	0		<=			
ANR	1128136	Identifier	imma		1127687	0					
ANR	1128137	PrimaryExpression	127		1127687	1					
ANR	1128138	RelationalExpression	imma >= - 128		1127687	1		>=			
ANR	1128139	Identifier	imma		1127687	0					
ANR	1128140	UnaryOperationExpression	- 128		1127687	1					
ANR	1128141	UnaryOperator	-		1127687	0					
ANR	1128142	PrimaryExpression	128		1127687	1					
ANR	1128143	CompoundStatement		80:36:2472:2472	1127687	1					
ANR	1128144	ExpressionStatement	inst_size += 1	431:4:13350:13364	1127687	0	True				
ANR	1128145	AssignmentExpression	inst_size += 1		1127687	0		+=			
ANR	1128146	Identifier	inst_size		1127687	0					
ANR	1128147	PrimaryExpression	1		1127687	1					
ANR	1128148	ExpressionStatement	flags |= EX86_BYTE_ARG	432:4:13370:13392	1127687	1	True				
ANR	1128149	AssignmentExpression	flags |= EX86_BYTE_ARG		1127687	0		|=			
ANR	1128150	Identifier	flags		1127687	0					
ANR	1128151	Identifier	EX86_BYTE_ARG		1127687	1					
ANR	1128152	ElseStatement	else		1127687	0					
ANR	1128153	ExpressionStatement	inst_size += 4	434:4:13408:13422	1127687	0	True				
ANR	1128154	AssignmentExpression	inst_size += 4		1127687	0		+=			
ANR	1128155	Identifier	inst_size		1127687	0					
ANR	1128156	PrimaryExpression	4		1127687	1					
ANR	1128157	ElseStatement	else		1127687	0					
ANR	1128158	IfStatement	if ( flags & EX86_SHIFT_INS )		1127687	0					
ANR	1128159	Condition	flags & EX86_SHIFT_INS	436:11:13439:13460	1127687	0	True				
ANR	1128160	BitAndExpression	flags & EX86_SHIFT_INS		1127687	0		&			
ANR	1128161	Identifier	flags		1127687	0					
ANR	1128162	Identifier	EX86_SHIFT_INS		1127687	1					
ANR	1128163	CompoundStatement		86:35:2591:2591	1127687	1					
ANR	1128164	ExpressionStatement	imma &= compiler -> mode32 ? 0x1f : 0x3f	437:3:13468:13506	1127687	0	True				
ANR	1128165	AssignmentExpression	imma &= compiler -> mode32 ? 0x1f : 0x3f		1127687	0		&=			
ANR	1128166	Identifier	imma		1127687	0					
ANR	1128167	ConditionalExpression	compiler -> mode32 ? 0x1f : 0x3f		1127687	1					
ANR	1128168	Condition	compiler -> mode32		1127687	0					
ANR	1128169	PtrMemberAccess	compiler -> mode32		1127687	0					
ANR	1128170	Identifier	compiler		1127687	0					
ANR	1128171	Identifier	mode32		1127687	1					
ANR	1128172	PrimaryExpression	0x1f		1127687	1					
ANR	1128173	PrimaryExpression	0x3f		1127687	2					
ANR	1128174	IfStatement	if ( imma != 1 )		1127687	1					
ANR	1128175	Condition	imma != 1	438:7:13515:13523	1127687	0	True				
ANR	1128176	EqualityExpression	imma != 1		1127687	0		!=			
ANR	1128177	Identifier	imma		1127687	0					
ANR	1128178	PrimaryExpression	1		1127687	1					
ANR	1128179	CompoundStatement		88:18:2654:2654	1127687	1					
ANR	1128180	ExpressionStatement	inst_size ++	439:4:13532:13544	1127687	0	True				
ANR	1128181	PostIncDecOperationExpression	inst_size ++		1127687	0					
ANR	1128182	Identifier	inst_size		1127687	0					
ANR	1128183	IncDec	++		1127687	1					
ANR	1128184	ExpressionStatement	flags |= EX86_BYTE_ARG	440:4:13550:13572	1127687	1	True				
ANR	1128185	AssignmentExpression	flags |= EX86_BYTE_ARG		1127687	0		|=			
ANR	1128186	Identifier	flags		1127687	0					
ANR	1128187	Identifier	EX86_BYTE_ARG		1127687	1					
ANR	1128188	ElseStatement	else		1127687	0					
ANR	1128189	IfStatement	if ( flags & EX86_BYTE_ARG )		1127687	0					
ANR	1128190	Condition	flags & EX86_BYTE_ARG	442:13:13592:13612	1127687	0	True				
ANR	1128191	BitAndExpression	flags & EX86_BYTE_ARG		1127687	0		&			
ANR	1128192	Identifier	flags		1127687	0					
ANR	1128193	Identifier	EX86_BYTE_ARG		1127687	1					
ANR	1128194	ExpressionStatement	inst_size ++	443:3:13618:13629	1127687	1	True				
ANR	1128195	PostIncDecOperationExpression	inst_size ++		1127687	0					
ANR	1128196	Identifier	inst_size		1127687	0					
ANR	1128197	IncDec	++		1127687	1					
ANR	1128198	ElseStatement	else		1127687	0					
ANR	1128199	IfStatement	if ( flags & EX86_HALF_ARG )		1127687	0					
ANR	1128200	Condition	flags & EX86_HALF_ARG	444:11:13642:13662	1127687	0	True				
ANR	1128201	BitAndExpression	flags & EX86_HALF_ARG		1127687	0		&			
ANR	1128202	Identifier	flags		1127687	0					
ANR	1128203	Identifier	EX86_HALF_ARG		1127687	1					
ANR	1128204	ExpressionStatement	inst_size += sizeof ( short )	445:3:13668:13694	1127687	1	True				
ANR	1128205	AssignmentExpression	inst_size += sizeof ( short )		1127687	0		+=			
ANR	1128206	Identifier	inst_size		1127687	0					
ANR	1128207	SizeofExpression	sizeof ( short )		1127687	1					
ANR	1128208	Sizeof	sizeof		1127687	0					
ANR	1128209	SizeofOperand	short		1127687	1					
ANR	1128210	ElseStatement	else		1127687	0					
ANR	1128211	ExpressionStatement	inst_size += sizeof ( sljit_si )	447:3:13706:13735	1127687	0	True				
ANR	1128212	AssignmentExpression	inst_size += sizeof ( sljit_si )		1127687	0		+=			
ANR	1128213	Identifier	inst_size		1127687	0					
ANR	1128214	SizeofExpression	sizeof ( sljit_si )		1127687	1					
ANR	1128215	Sizeof	sizeof		1127687	0					
ANR	1128216	SizeofOperand	sljit_si		1127687	1					
ANR	1128217	ElseStatement	else		1127687	0					
ANR	1128218	CompoundStatement		99:6:2874:2874	1127687	0					
ANR	1128219	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG )	450:2:13750:13818	1127687	0	True				
ANR	1128220	CallExpression	SLJIT_ASSERT ( ! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG )		1127687	0					
ANR	1128221	Callee	SLJIT_ASSERT		1127687	0					
ANR	1128222	Identifier	SLJIT_ASSERT		1127687	0					
ANR	1128223	ArgumentList	! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG		1127687	1					
ANR	1128224	Argument	! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG		1127687	0					
ANR	1128225	OrExpression	! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG		1127687	0		||			
ANR	1128226	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1127687	0					
ANR	1128227	UnaryOperator	!		1127687	0					
ANR	1128228	BitAndExpression	flags & EX86_SHIFT_INS		1127687	1		&			
ANR	1128229	Identifier	flags		1127687	0					
ANR	1128230	Identifier	EX86_SHIFT_INS		1127687	1					
ANR	1128231	EqualityExpression	a == SLJIT_PREF_SHIFT_REG		1127687	1		==			
ANR	1128232	Identifier	a		1127687	0					
ANR	1128233	Identifier	SLJIT_PREF_SHIFT_REG		1127687	1					
ANR	1128234	IfStatement	if ( ! ( flags & EX86_SSE2_OP1 ) && reg_map [ a ] >= 8 )		1127687	1					
ANR	1128235	Condition	! ( flags & EX86_SSE2_OP1 ) && reg_map [ a ] >= 8	452:6:13880:13922	1127687	0	True				
ANR	1128236	AndExpression	! ( flags & EX86_SSE2_OP1 ) && reg_map [ a ] >= 8		1127687	0		&&			
ANR	1128237	UnaryOperationExpression	! ( flags & EX86_SSE2_OP1 )		1127687	0					
ANR	1128238	UnaryOperator	!		1127687	0					
ANR	1128239	BitAndExpression	flags & EX86_SSE2_OP1		1127687	1		&			
ANR	1128240	Identifier	flags		1127687	0					
ANR	1128241	Identifier	EX86_SSE2_OP1		1127687	1					
ANR	1128242	RelationalExpression	reg_map [ a ] >= 8		1127687	1		>=			
ANR	1128243	ArrayIndexing	reg_map [ a ]		1127687	0					
ANR	1128244	Identifier	reg_map		1127687	0					
ANR	1128245	Identifier	a		1127687	1					
ANR	1128246	PrimaryExpression	8		1127687	1					
ANR	1128247	ExpressionStatement	rex |= REX_R	453:3:13928:13940	1127687	1	True				
ANR	1128248	AssignmentExpression	rex |= REX_R		1127687	0		|=			
ANR	1128249	Identifier	rex		1127687	0					
ANR	1128250	Identifier	REX_R		1127687	1					
ANR	1128251	IfStatement	if ( rex )		1127687	19					
ANR	1128252	Condition	rex	456:5:13951:13953	1127687	0	True				
ANR	1128253	Identifier	rex		1127687	0					
ANR	1128254	ExpressionStatement	inst_size ++	457:2:13958:13969	1127687	1	True				
ANR	1128255	PostIncDecOperationExpression	inst_size ++		1127687	0					
ANR	1128256	Identifier	inst_size		1127687	0					
ANR	1128257	IncDec	++		1127687	1					
ANR	1128258	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + inst_size )"	459:1:13973:14026	1127687	20	True				
ANR	1128259	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + inst_size )"		1127687	0		=			
ANR	1128260	Identifier	inst		1127687	0					
ANR	1128261	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + inst_size )"		1127687	1					
ANR	1128262	CastTarget	sljit_ub *		1127687	0					
ANR	1128263	CallExpression	"ensure_buf ( compiler , 1 + inst_size )"		1127687	1					
ANR	1128264	Callee	ensure_buf		1127687	0					
ANR	1128265	Identifier	ensure_buf		1127687	0					
ANR	1128266	ArgumentList	compiler		1127687	1					
ANR	1128267	Argument	compiler		1127687	0					
ANR	1128268	Identifier	compiler		1127687	0					
ANR	1128269	Argument	1 + inst_size		1127687	1					
ANR	1128270	AdditiveExpression	1 + inst_size		1127687	0		+			
ANR	1128271	PrimaryExpression	1		1127687	0					
ANR	1128272	Identifier	inst_size		1127687	1					
ANR	1128273	ExpressionStatement	PTR_FAIL_IF ( ! inst )	460:1:14029:14047	1127687	21	True				
ANR	1128274	CallExpression	PTR_FAIL_IF ( ! inst )		1127687	0					
ANR	1128275	Callee	PTR_FAIL_IF		1127687	0					
ANR	1128276	Identifier	PTR_FAIL_IF		1127687	0					
ANR	1128277	ArgumentList	! inst		1127687	1					
ANR	1128278	Argument	! inst		1127687	0					
ANR	1128279	UnaryOperationExpression	! inst		1127687	0					
ANR	1128280	UnaryOperator	!		1127687	0					
ANR	1128281	Identifier	inst		1127687	1					
ANR	1128282	ExpressionStatement	INC_SIZE ( inst_size )	463:1:14077:14096	1127687	22	True				
ANR	1128283	CallExpression	INC_SIZE ( inst_size )		1127687	0					
ANR	1128284	Callee	INC_SIZE		1127687	0					
ANR	1128285	Identifier	INC_SIZE		1127687	0					
ANR	1128286	ArgumentList	inst_size		1127687	1					
ANR	1128287	Argument	inst_size		1127687	0					
ANR	1128288	Identifier	inst_size		1127687	0					
ANR	1128289	IfStatement	if ( flags & EX86_PREF_F2 )		1127687	23					
ANR	1128290	Condition	flags & EX86_PREF_F2	464:5:14103:14122	1127687	0	True				
ANR	1128291	BitAndExpression	flags & EX86_PREF_F2		1127687	0		&			
ANR	1128292	Identifier	flags		1127687	0					
ANR	1128293	Identifier	EX86_PREF_F2		1127687	1					
ANR	1128294	ExpressionStatement	* inst ++ = 0xf2	465:2:14127:14141	1127687	1	True				
ANR	1128295	AssignmentExpression	* inst ++ = 0xf2		1127687	0		=			
ANR	1128296	UnaryOperationExpression	* inst ++		1127687	0					
ANR	1128297	UnaryOperator	*		1127687	0					
ANR	1128298	PostIncDecOperationExpression	inst ++		1127687	1					
ANR	1128299	Identifier	inst		1127687	0					
ANR	1128300	IncDec	++		1127687	1					
ANR	1128301	PrimaryExpression	0xf2		1127687	1					
ANR	1128302	IfStatement	if ( flags & EX86_PREF_F3 )		1127687	24					
ANR	1128303	Condition	flags & EX86_PREF_F3	466:5:14148:14167	1127687	0	True				
ANR	1128304	BitAndExpression	flags & EX86_PREF_F3		1127687	0		&			
ANR	1128305	Identifier	flags		1127687	0					
ANR	1128306	Identifier	EX86_PREF_F3		1127687	1					
ANR	1128307	ExpressionStatement	* inst ++ = 0xf3	467:2:14172:14186	1127687	1	True				
ANR	1128308	AssignmentExpression	* inst ++ = 0xf3		1127687	0		=			
ANR	1128309	UnaryOperationExpression	* inst ++		1127687	0					
ANR	1128310	UnaryOperator	*		1127687	0					
ANR	1128311	PostIncDecOperationExpression	inst ++		1127687	1					
ANR	1128312	Identifier	inst		1127687	0					
ANR	1128313	IncDec	++		1127687	1					
ANR	1128314	PrimaryExpression	0xf3		1127687	1					
ANR	1128315	IfStatement	if ( flags & EX86_PREF_66 )		1127687	25					
ANR	1128316	Condition	flags & EX86_PREF_66	468:5:14193:14212	1127687	0	True				
ANR	1128317	BitAndExpression	flags & EX86_PREF_66		1127687	0		&			
ANR	1128318	Identifier	flags		1127687	0					
ANR	1128319	Identifier	EX86_PREF_66		1127687	1					
ANR	1128320	ExpressionStatement	* inst ++ = 0x66	469:2:14217:14231	1127687	1	True				
ANR	1128321	AssignmentExpression	* inst ++ = 0x66		1127687	0		=			
ANR	1128322	UnaryOperationExpression	* inst ++		1127687	0					
ANR	1128323	UnaryOperator	*		1127687	0					
ANR	1128324	PostIncDecOperationExpression	inst ++		1127687	1					
ANR	1128325	Identifier	inst		1127687	0					
ANR	1128326	IncDec	++		1127687	1					
ANR	1128327	PrimaryExpression	0x66		1127687	1					
ANR	1128328	IfStatement	if ( rex )		1127687	26					
ANR	1128329	Condition	rex	470:5:14238:14240	1127687	0	True				
ANR	1128330	Identifier	rex		1127687	0					
ANR	1128331	ExpressionStatement	* inst ++ = rex	471:2:14245:14258	1127687	1	True				
ANR	1128332	AssignmentExpression	* inst ++ = rex		1127687	0		=			
ANR	1128333	UnaryOperationExpression	* inst ++		1127687	0					
ANR	1128334	UnaryOperator	*		1127687	0					
ANR	1128335	PostIncDecOperationExpression	inst ++		1127687	1					
ANR	1128336	Identifier	inst		1127687	0					
ANR	1128337	IncDec	++		1127687	1					
ANR	1128338	Identifier	rex		1127687	1					
ANR	1128339	ExpressionStatement	buf_ptr = inst + size	472:1:14261:14282	1127687	27	True				
ANR	1128340	AssignmentExpression	buf_ptr = inst + size		1127687	0		=			
ANR	1128341	Identifier	buf_ptr		1127687	0					
ANR	1128342	AdditiveExpression	inst + size		1127687	1		+			
ANR	1128343	Identifier	inst		1127687	0					
ANR	1128344	Identifier	size		1127687	1					
ANR	1128345	IfStatement	if ( ! ( flags & EX86_SHIFT_INS ) )		1127687	28					
ANR	1128346	Condition	! ( flags & EX86_SHIFT_INS )	475:5:14317:14341	1127687	0	True				
ANR	1128347	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1127687	0					
ANR	1128348	UnaryOperator	!		1127687	0					
ANR	1128349	BitAndExpression	flags & EX86_SHIFT_INS		1127687	1		&			
ANR	1128350	Identifier	flags		1127687	0					
ANR	1128351	Identifier	EX86_SHIFT_INS		1127687	1					
ANR	1128352	CompoundStatement		125:32:3472:3472	1127687	1					
ANR	1128353	IfStatement	if ( ( flags & EX86_BIN_INS ) && ( a & SLJIT_IMM ) )		1127687	0					
ANR	1128354	Condition	( flags & EX86_BIN_INS ) && ( a & SLJIT_IMM )	476:6:14352:14392	1127687	0	True				
ANR	1128355	AndExpression	( flags & EX86_BIN_INS ) && ( a & SLJIT_IMM )		1127687	0		&&			
ANR	1128356	BitAndExpression	flags & EX86_BIN_INS		1127687	0		&			
ANR	1128357	Identifier	flags		1127687	0					
ANR	1128358	Identifier	EX86_BIN_INS		1127687	1					
ANR	1128359	BitAndExpression	a & SLJIT_IMM		1127687	1		&			
ANR	1128360	Identifier	a		1127687	0					
ANR	1128361	Identifier	SLJIT_IMM		1127687	1					
ANR	1128362	ExpressionStatement	* inst = ( flags & EX86_BYTE_ARG ) ? GROUP_BINARY_83 : GROUP_BINARY_81	477:3:14398:14465	1127687	1	True				
ANR	1128363	AssignmentExpression	* inst = ( flags & EX86_BYTE_ARG ) ? GROUP_BINARY_83 : GROUP_BINARY_81		1127687	0		=			
ANR	1128364	UnaryOperationExpression	* inst		1127687	0					
ANR	1128365	UnaryOperator	*		1127687	0					
ANR	1128366	Identifier	inst		1127687	1					
ANR	1128367	ConditionalExpression	( flags & EX86_BYTE_ARG ) ? GROUP_BINARY_83 : GROUP_BINARY_81		1127687	1					
ANR	1128368	Condition	flags & EX86_BYTE_ARG		1127687	0					
ANR	1128369	BitAndExpression	flags & EX86_BYTE_ARG		1127687	0		&			
ANR	1128370	Identifier	flags		1127687	0					
ANR	1128371	Identifier	EX86_BYTE_ARG		1127687	1					
ANR	1128372	Identifier	GROUP_BINARY_83		1127687	1					
ANR	1128373	Identifier	GROUP_BINARY_81		1127687	2					
ANR	1128374	IfStatement	if ( ( a & SLJIT_IMM ) || ( a == 0 ) )		1127687	1					
ANR	1128375	Condition	( a & SLJIT_IMM ) || ( a == 0 )	479:6:14474:14500	1127687	0	True				
ANR	1128376	OrExpression	( a & SLJIT_IMM ) || ( a == 0 )		1127687	0		||			
ANR	1128377	BitAndExpression	a & SLJIT_IMM		1127687	0		&			
ANR	1128378	Identifier	a		1127687	0					
ANR	1128379	Identifier	SLJIT_IMM		1127687	1					
ANR	1128380	EqualityExpression	a == 0		1127687	1		==			
ANR	1128381	Identifier	a		1127687	0					
ANR	1128382	PrimaryExpression	0		1127687	1					
ANR	1128383	ExpressionStatement	* buf_ptr = 0	480:3:14506:14518	1127687	1	True				
ANR	1128384	AssignmentExpression	* buf_ptr = 0		1127687	0		=			
ANR	1128385	UnaryOperationExpression	* buf_ptr		1127687	0					
ANR	1128386	UnaryOperator	*		1127687	0					
ANR	1128387	Identifier	buf_ptr		1127687	1					
ANR	1128388	PrimaryExpression	0		1127687	1					
ANR	1128389	ElseStatement	else		1127687	0					
ANR	1128390	IfStatement	if ( ! ( flags & EX86_SSE2_OP1 ) )		1127687	0					
ANR	1128391	Condition	! ( flags & EX86_SSE2_OP1 )	481:11:14531:14554	1127687	0	True				
ANR	1128392	UnaryOperationExpression	! ( flags & EX86_SSE2_OP1 )		1127687	0					
ANR	1128393	UnaryOperator	!		1127687	0					
ANR	1128394	BitAndExpression	flags & EX86_SSE2_OP1		1127687	1		&			
ANR	1128395	Identifier	flags		1127687	0					
ANR	1128396	Identifier	EX86_SSE2_OP1		1127687	1					
ANR	1128397	ExpressionStatement	* buf_ptr = reg_lmap [ a ] << 3	482:3:14560:14587	1127687	1	True				
ANR	1128398	AssignmentExpression	* buf_ptr = reg_lmap [ a ] << 3		1127687	0		=			
ANR	1128399	UnaryOperationExpression	* buf_ptr		1127687	0					
ANR	1128400	UnaryOperator	*		1127687	0					
ANR	1128401	Identifier	buf_ptr		1127687	1					
ANR	1128402	ShiftExpression	reg_lmap [ a ] << 3		1127687	1		<<			
ANR	1128403	ArrayIndexing	reg_lmap [ a ]		1127687	0					
ANR	1128404	Identifier	reg_lmap		1127687	0					
ANR	1128405	Identifier	a		1127687	1					
ANR	1128406	PrimaryExpression	3		1127687	1					
ANR	1128407	ElseStatement	else		1127687	0					
ANR	1128408	ExpressionStatement	* buf_ptr = a << 3	484:3:14599:14616	1127687	0	True				
ANR	1128409	AssignmentExpression	* buf_ptr = a << 3		1127687	0		=			
ANR	1128410	UnaryOperationExpression	* buf_ptr		1127687	0					
ANR	1128411	UnaryOperator	*		1127687	0					
ANR	1128412	Identifier	buf_ptr		1127687	1					
ANR	1128413	ShiftExpression	a << 3		1127687	1		<<			
ANR	1128414	Identifier	a		1127687	0					
ANR	1128415	PrimaryExpression	3		1127687	1					
ANR	1128416	ElseStatement	else		1127687	0					
ANR	1128417	CompoundStatement		136:6:3755:3755	1127687	0					
ANR	1128418	IfStatement	if ( a & SLJIT_IMM )		1127687	0					
ANR	1128419	Condition	a & SLJIT_IMM	487:6:14635:14647	1127687	0	True				
ANR	1128420	BitAndExpression	a & SLJIT_IMM		1127687	0		&			
ANR	1128421	Identifier	a		1127687	0					
ANR	1128422	Identifier	SLJIT_IMM		1127687	1					
ANR	1128423	CompoundStatement		137:21:3778:3778	1127687	1					
ANR	1128424	IfStatement	if ( imma == 1 )		1127687	0					
ANR	1128425	Condition	imma == 1	488:7:14659:14667	1127687	0	True				
ANR	1128426	EqualityExpression	imma == 1		1127687	0		==			
ANR	1128427	Identifier	imma		1127687	0					
ANR	1128428	PrimaryExpression	1		1127687	1					
ANR	1128429	ExpressionStatement	* inst = GROUP_SHIFT_1	489:4:14674:14695	1127687	1	True				
ANR	1128430	AssignmentExpression	* inst = GROUP_SHIFT_1		1127687	0		=			
ANR	1128431	UnaryOperationExpression	* inst		1127687	0					
ANR	1128432	UnaryOperator	*		1127687	0					
ANR	1128433	Identifier	inst		1127687	1					
ANR	1128434	Identifier	GROUP_SHIFT_1		1127687	1					
ANR	1128435	ElseStatement	else		1127687	0					
ANR	1128436	ExpressionStatement	* inst = GROUP_SHIFT_N	491:4:14709:14730	1127687	0	True				
ANR	1128437	AssignmentExpression	* inst = GROUP_SHIFT_N		1127687	0		=			
ANR	1128438	UnaryOperationExpression	* inst		1127687	0					
ANR	1128439	UnaryOperator	*		1127687	0					
ANR	1128440	Identifier	inst		1127687	1					
ANR	1128441	Identifier	GROUP_SHIFT_N		1127687	1					
ANR	1128442	ElseStatement	else		1127687	0					
ANR	1128443	ExpressionStatement	* inst = GROUP_SHIFT_CL	493:3:14744:14766	1127687	0	True				
ANR	1128444	AssignmentExpression	* inst = GROUP_SHIFT_CL		1127687	0		=			
ANR	1128445	UnaryOperationExpression	* inst		1127687	0					
ANR	1128446	UnaryOperator	*		1127687	0					
ANR	1128447	Identifier	inst		1127687	1					
ANR	1128448	Identifier	GROUP_SHIFT_CL		1127687	1					
ANR	1128449	ExpressionStatement	* buf_ptr = 0	494:2:14770:14782	1127687	1	True				
ANR	1128450	AssignmentExpression	* buf_ptr = 0		1127687	0		=			
ANR	1128451	UnaryOperationExpression	* buf_ptr		1127687	0					
ANR	1128452	UnaryOperator	*		1127687	0					
ANR	1128453	Identifier	buf_ptr		1127687	1					
ANR	1128454	PrimaryExpression	0		1127687	1					
ANR	1128455	IfStatement	if ( ! ( b & SLJIT_MEM ) )		1127687	29					
ANR	1128456	Condition	! ( b & SLJIT_MEM )	497:5:14793:14808	1127687	0	True				
ANR	1128457	UnaryOperationExpression	! ( b & SLJIT_MEM )		1127687	0					
ANR	1128458	UnaryOperator	!		1127687	0					
ANR	1128459	BitAndExpression	b & SLJIT_MEM		1127687	1		&			
ANR	1128460	Identifier	b		1127687	0					
ANR	1128461	Identifier	SLJIT_MEM		1127687	1					
ANR	1128462	ExpressionStatement	* buf_ptr ++ |= MOD_REG + ( ( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_lmap [ b ] : b )	498:2:14813:14883	1127687	1	True				
ANR	1128463	AssignmentExpression	* buf_ptr ++ |= MOD_REG + ( ( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_lmap [ b ] : b )		1127687	0		|=			
ANR	1128464	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128465	UnaryOperator	*		1127687	0					
ANR	1128466	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128467	Identifier	buf_ptr		1127687	0					
ANR	1128468	IncDec	++		1127687	1					
ANR	1128469	AdditiveExpression	MOD_REG + ( ( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_lmap [ b ] : b )		1127687	1		+			
ANR	1128470	Identifier	MOD_REG		1127687	0					
ANR	1128471	ConditionalExpression	( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_lmap [ b ] : b		1127687	1					
ANR	1128472	Condition	! ( flags & EX86_SSE2_OP2 )		1127687	0					
ANR	1128473	UnaryOperationExpression	! ( flags & EX86_SSE2_OP2 )		1127687	0					
ANR	1128474	UnaryOperator	!		1127687	0					
ANR	1128475	BitAndExpression	flags & EX86_SSE2_OP2		1127687	1		&			
ANR	1128476	Identifier	flags		1127687	0					
ANR	1128477	Identifier	EX86_SSE2_OP2		1127687	1					
ANR	1128478	ArrayIndexing	reg_lmap [ b ]		1127687	1					
ANR	1128479	Identifier	reg_lmap		1127687	0					
ANR	1128480	Identifier	b		1127687	1					
ANR	1128481	Identifier	b		1127687	2					
ANR	1128482	ElseStatement	else		1127687	0					
ANR	1128483	IfStatement	if ( ( b & REG_MASK ) != SLJIT_UNUSED )		1127687	0					
ANR	1128484	Condition	( b & REG_MASK ) != SLJIT_UNUSED	499:10:14895:14924	1127687	0	True				
ANR	1128485	EqualityExpression	( b & REG_MASK ) != SLJIT_UNUSED		1127687	0		!=			
ANR	1128486	BitAndExpression	b & REG_MASK		1127687	0		&			
ANR	1128487	Identifier	b		1127687	0					
ANR	1128488	Identifier	REG_MASK		1127687	1					
ANR	1128489	Identifier	SLJIT_UNUSED		1127687	1					
ANR	1128490	CompoundStatement		149:42:4055:4055	1127687	1					
ANR	1128491	IfStatement	if ( ( b & OFFS_REG_MASK ) == SLJIT_UNUSED || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP ) )		1127687	0					
ANR	1128492	Condition	( b & OFFS_REG_MASK ) == SLJIT_UNUSED || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )	500:6:14935:15017	1127687	0	True				
ANR	1128493	OrExpression	( b & OFFS_REG_MASK ) == SLJIT_UNUSED || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1127687	0		||			
ANR	1128494	EqualityExpression	( b & OFFS_REG_MASK ) == SLJIT_UNUSED		1127687	0		==			
ANR	1128495	BitAndExpression	b & OFFS_REG_MASK		1127687	0		&			
ANR	1128496	Identifier	b		1127687	0					
ANR	1128497	Identifier	OFFS_REG_MASK		1127687	1					
ANR	1128498	Identifier	SLJIT_UNUSED		1127687	1					
ANR	1128499	EqualityExpression	( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1127687	1		==			
ANR	1128500	BitAndExpression	b & OFFS_REG_MASK		1127687	0		&			
ANR	1128501	Identifier	b		1127687	0					
ANR	1128502	Identifier	OFFS_REG_MASK		1127687	1					
ANR	1128503	CallExpression	TO_OFFS_REG ( SLJIT_SP )		1127687	1					
ANR	1128504	Callee	TO_OFFS_REG		1127687	0					
ANR	1128505	Identifier	TO_OFFS_REG		1127687	0					
ANR	1128506	ArgumentList	SLJIT_SP		1127687	1					
ANR	1128507	Argument	SLJIT_SP		1127687	0					
ANR	1128508	Identifier	SLJIT_SP		1127687	0					
ANR	1128509	CompoundStatement		150:91:4148:4148	1127687	1					
ANR	1128510	IfStatement	if ( immb != 0 || reg_lmap [ b & REG_MASK ] == 5 )		1127687	0					
ANR	1128511	Condition	immb != 0 || reg_lmap [ b & REG_MASK ] == 5	501:7:15029:15068	1127687	0	True				
ANR	1128512	OrExpression	immb != 0 || reg_lmap [ b & REG_MASK ] == 5		1127687	0		||			
ANR	1128513	EqualityExpression	immb != 0		1127687	0		!=			
ANR	1128514	Identifier	immb		1127687	0					
ANR	1128515	PrimaryExpression	0		1127687	1					
ANR	1128516	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1127687	1		==			
ANR	1128517	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1127687	0					
ANR	1128518	Identifier	reg_lmap		1127687	0					
ANR	1128519	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1128520	Identifier	b		1127687	0					
ANR	1128521	Identifier	REG_MASK		1127687	1					
ANR	1128522	PrimaryExpression	5		1127687	1					
ANR	1128523	CompoundStatement		151:49:4199:4199	1127687	1					
ANR	1128524	IfStatement	if ( immb <= 127 && immb >= - 128 )		1127687	0					
ANR	1128525	Condition	immb <= 127 && immb >= - 128	502:8:15081:15107	1127687	0	True				
ANR	1128526	AndExpression	immb <= 127 && immb >= - 128		1127687	0		&&			
ANR	1128527	RelationalExpression	immb <= 127		1127687	0		<=			
ANR	1128528	Identifier	immb		1127687	0					
ANR	1128529	PrimaryExpression	127		1127687	1					
ANR	1128530	RelationalExpression	immb >= - 128		1127687	1		>=			
ANR	1128531	Identifier	immb		1127687	0					
ANR	1128532	UnaryOperationExpression	- 128		1127687	1					
ANR	1128533	UnaryOperator	-		1127687	0					
ANR	1128534	PrimaryExpression	128		1127687	1					
ANR	1128535	ExpressionStatement	* buf_ptr |= 0x40	503:5:15115:15131	1127687	1	True				
ANR	1128536	AssignmentExpression	* buf_ptr |= 0x40		1127687	0		|=			
ANR	1128537	UnaryOperationExpression	* buf_ptr		1127687	0					
ANR	1128538	UnaryOperator	*		1127687	0					
ANR	1128539	Identifier	buf_ptr		1127687	1					
ANR	1128540	PrimaryExpression	0x40		1127687	1					
ANR	1128541	ElseStatement	else		1127687	0					
ANR	1128542	ExpressionStatement	* buf_ptr |= 0x80	505:5:15147:15163	1127687	0	True				
ANR	1128543	AssignmentExpression	* buf_ptr |= 0x80		1127687	0		|=			
ANR	1128544	UnaryOperationExpression	* buf_ptr		1127687	0					
ANR	1128545	UnaryOperator	*		1127687	0					
ANR	1128546	Identifier	buf_ptr		1127687	1					
ANR	1128547	PrimaryExpression	0x80		1127687	1					
ANR	1128548	IfStatement	if ( ( b & OFFS_REG_MASK ) == SLJIT_UNUSED )		1127687	1					
ANR	1128549	Condition	( b & OFFS_REG_MASK ) == SLJIT_UNUSED	508:7:15178:15212	1127687	0	True				
ANR	1128550	EqualityExpression	( b & OFFS_REG_MASK ) == SLJIT_UNUSED		1127687	0		==			
ANR	1128551	BitAndExpression	b & OFFS_REG_MASK		1127687	0		&			
ANR	1128552	Identifier	b		1127687	0					
ANR	1128553	Identifier	OFFS_REG_MASK		1127687	1					
ANR	1128554	Identifier	SLJIT_UNUSED		1127687	1					
ANR	1128555	ExpressionStatement	* buf_ptr ++ |= reg_lmap [ b & REG_MASK ]	509:4:15219:15255	1127687	1	True				
ANR	1128556	AssignmentExpression	* buf_ptr ++ |= reg_lmap [ b & REG_MASK ]		1127687	0		|=			
ANR	1128557	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128558	UnaryOperator	*		1127687	0					
ANR	1128559	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128560	Identifier	buf_ptr		1127687	0					
ANR	1128561	IncDec	++		1127687	1					
ANR	1128562	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1127687	1					
ANR	1128563	Identifier	reg_lmap		1127687	0					
ANR	1128564	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1128565	Identifier	b		1127687	0					
ANR	1128566	Identifier	REG_MASK		1127687	1					
ANR	1128567	ElseStatement	else		1127687	0					
ANR	1128568	CompoundStatement		160:8:4393:4393	1127687	0					
ANR	1128569	ExpressionStatement	* buf_ptr ++ |= 0x04	511:4:15271:15289	1127687	0	True				
ANR	1128570	AssignmentExpression	* buf_ptr ++ |= 0x04		1127687	0		|=			
ANR	1128571	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128572	UnaryOperator	*		1127687	0					
ANR	1128573	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128574	Identifier	buf_ptr		1127687	0					
ANR	1128575	IncDec	++		1127687	1					
ANR	1128576	PrimaryExpression	0x04		1127687	1					
ANR	1128577	ExpressionStatement	* buf_ptr ++ = reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 )	512:4:15295:15361	1127687	1	True				
ANR	1128578	AssignmentExpression	* buf_ptr ++ = reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 )		1127687	0		=			
ANR	1128579	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128580	UnaryOperator	*		1127687	0					
ANR	1128581	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128582	Identifier	buf_ptr		1127687	0					
ANR	1128583	IncDec	++		1127687	1					
ANR	1128584	InclusiveOrExpression	reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 )		1127687	1		|			
ANR	1128585	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1127687	0					
ANR	1128586	Identifier	reg_lmap		1127687	0					
ANR	1128587	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1128588	Identifier	b		1127687	0					
ANR	1128589	Identifier	REG_MASK		1127687	1					
ANR	1128590	ShiftExpression	reg_lmap [ OFFS_REG ( b ) ] << 3		1127687	1		<<			
ANR	1128591	ArrayIndexing	reg_lmap [ OFFS_REG ( b ) ]		1127687	0					
ANR	1128592	Identifier	reg_lmap		1127687	0					
ANR	1128593	CallExpression	OFFS_REG ( b )		1127687	1					
ANR	1128594	Callee	OFFS_REG		1127687	0					
ANR	1128595	Identifier	OFFS_REG		1127687	0					
ANR	1128596	ArgumentList	b		1127687	1					
ANR	1128597	Argument	b		1127687	0					
ANR	1128598	Identifier	b		1127687	0					
ANR	1128599	PrimaryExpression	3		1127687	1					
ANR	1128600	IfStatement	if ( immb != 0 || reg_lmap [ b & REG_MASK ] == 5 )		1127687	2					
ANR	1128601	Condition	immb != 0 || reg_lmap [ b & REG_MASK ] == 5	515:7:15376:15415	1127687	0	True				
ANR	1128602	OrExpression	immb != 0 || reg_lmap [ b & REG_MASK ] == 5		1127687	0		||			
ANR	1128603	EqualityExpression	immb != 0		1127687	0		!=			
ANR	1128604	Identifier	immb		1127687	0					
ANR	1128605	PrimaryExpression	0		1127687	1					
ANR	1128606	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1127687	1		==			
ANR	1128607	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1127687	0					
ANR	1128608	Identifier	reg_lmap		1127687	0					
ANR	1128609	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1128610	Identifier	b		1127687	0					
ANR	1128611	Identifier	REG_MASK		1127687	1					
ANR	1128612	PrimaryExpression	5		1127687	1					
ANR	1128613	CompoundStatement		165:49:4546:4546	1127687	1					
ANR	1128614	IfStatement	if ( immb <= 127 && immb >= - 128 )		1127687	0					
ANR	1128615	Condition	immb <= 127 && immb >= - 128	516:8:15428:15454	1127687	0	True				
ANR	1128616	AndExpression	immb <= 127 && immb >= - 128		1127687	0		&&			
ANR	1128617	RelationalExpression	immb <= 127		1127687	0		<=			
ANR	1128618	Identifier	immb		1127687	0					
ANR	1128619	PrimaryExpression	127		1127687	1					
ANR	1128620	RelationalExpression	immb >= - 128		1127687	1		>=			
ANR	1128621	Identifier	immb		1127687	0					
ANR	1128622	UnaryOperationExpression	- 128		1127687	1					
ANR	1128623	UnaryOperator	-		1127687	0					
ANR	1128624	PrimaryExpression	128		1127687	1					
ANR	1128625	ExpressionStatement	* buf_ptr ++ = immb	517:5:15462:15479	1127687	1	True				
ANR	1128626	AssignmentExpression	* buf_ptr ++ = immb		1127687	0		=			
ANR	1128627	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128628	UnaryOperator	*		1127687	0					
ANR	1128629	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128630	Identifier	buf_ptr		1127687	0					
ANR	1128631	IncDec	++		1127687	1					
ANR	1128632	Identifier	immb		1127687	1					
ANR	1128633	ElseStatement	else		1127687	0					
ANR	1128634	CompoundStatement		168:9:4644:4644	1127687	0					
ANR	1128635	ExpressionStatement	* ( sljit_si * ) buf_ptr = immb	519:5:15523:15549	1127687	0	True				
ANR	1128636	AssignmentExpression	* ( sljit_si * ) buf_ptr = immb		1127687	0		=			
ANR	1128637	UnaryOperationExpression	* ( sljit_si * ) buf_ptr		1127687	0					
ANR	1128638	UnaryOperator	*		1127687	0					
ANR	1128639	CastExpression	( sljit_si * ) buf_ptr		1127687	1					
ANR	1128640	CastTarget	sljit_si *		1127687	0					
ANR	1128641	Identifier	buf_ptr		1127687	1					
ANR	1128642	Identifier	immb		1127687	1					
ANR	1128643	ExpressionStatement	buf_ptr += sizeof ( sljit_si )	520:5:15583:15610	1127687	1	True				
ANR	1128644	AssignmentExpression	buf_ptr += sizeof ( sljit_si )		1127687	0		+=			
ANR	1128645	Identifier	buf_ptr		1127687	0					
ANR	1128646	SizeofExpression	sizeof ( sljit_si )		1127687	1					
ANR	1128647	Sizeof	sizeof		1127687	0					
ANR	1128648	SizeofOperand	sljit_si		1127687	1					
ANR	1128649	ElseStatement	else		1127687	0					
ANR	1128650	CompoundStatement		174:7:4762:4762	1127687	0					
ANR	1128651	IfStatement	if ( reg_lmap [ b & REG_MASK ] == 5 )		1127687	0					
ANR	1128652	Condition	reg_lmap [ b & REG_MASK ] == 5	525:7:15643:15669	1127687	0	True				
ANR	1128653	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1127687	0		==			
ANR	1128654	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1127687	0					
ANR	1128655	Identifier	reg_lmap		1127687	0					
ANR	1128656	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1128657	Identifier	b		1127687	0					
ANR	1128658	Identifier	REG_MASK		1127687	1					
ANR	1128659	PrimaryExpression	5		1127687	1					
ANR	1128660	ExpressionStatement	* buf_ptr |= 0x40	526:4:15676:15692	1127687	1	True				
ANR	1128661	AssignmentExpression	* buf_ptr |= 0x40		1127687	0		|=			
ANR	1128662	UnaryOperationExpression	* buf_ptr		1127687	0					
ANR	1128663	UnaryOperator	*		1127687	0					
ANR	1128664	Identifier	buf_ptr		1127687	1					
ANR	1128665	PrimaryExpression	0x40		1127687	1					
ANR	1128666	ExpressionStatement	* buf_ptr ++ |= 0x04	527:3:15697:15715	1127687	1	True				
ANR	1128667	AssignmentExpression	* buf_ptr ++ |= 0x04		1127687	0		|=			
ANR	1128668	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128669	UnaryOperator	*		1127687	0					
ANR	1128670	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128671	Identifier	buf_ptr		1127687	0					
ANR	1128672	IncDec	++		1127687	1					
ANR	1128673	PrimaryExpression	0x04		1127687	1					
ANR	1128674	ExpressionStatement	* buf_ptr ++ = reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )	528:3:15720:15800	1127687	2	True				
ANR	1128675	AssignmentExpression	* buf_ptr ++ = reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )		1127687	0		=			
ANR	1128676	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128677	UnaryOperator	*		1127687	0					
ANR	1128678	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128679	Identifier	buf_ptr		1127687	0					
ANR	1128680	IncDec	++		1127687	1					
ANR	1128681	InclusiveOrExpression	reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )		1127687	1		|			
ANR	1128682	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1127687	0					
ANR	1128683	Identifier	reg_lmap		1127687	0					
ANR	1128684	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1128685	Identifier	b		1127687	0					
ANR	1128686	Identifier	REG_MASK		1127687	1					
ANR	1128687	InclusiveOrExpression	( reg_lmap [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )		1127687	1		|			
ANR	1128688	ShiftExpression	reg_lmap [ OFFS_REG ( b ) ] << 3		1127687	0		<<			
ANR	1128689	ArrayIndexing	reg_lmap [ OFFS_REG ( b ) ]		1127687	0					
ANR	1128690	Identifier	reg_lmap		1127687	0					
ANR	1128691	CallExpression	OFFS_REG ( b )		1127687	1					
ANR	1128692	Callee	OFFS_REG		1127687	0					
ANR	1128693	Identifier	OFFS_REG		1127687	0					
ANR	1128694	ArgumentList	b		1127687	1					
ANR	1128695	Argument	b		1127687	0					
ANR	1128696	Identifier	b		1127687	0					
ANR	1128697	PrimaryExpression	3		1127687	1					
ANR	1128698	ShiftExpression	immb << 6		1127687	1		<<			
ANR	1128699	Identifier	immb		1127687	0					
ANR	1128700	PrimaryExpression	6		1127687	1					
ANR	1128701	IfStatement	if ( reg_lmap [ b & REG_MASK ] == 5 )		1127687	3					
ANR	1128702	Condition	reg_lmap [ b & REG_MASK ] == 5	529:7:15809:15835	1127687	0	True				
ANR	1128703	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1127687	0		==			
ANR	1128704	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1127687	0					
ANR	1128705	Identifier	reg_lmap		1127687	0					
ANR	1128706	BitAndExpression	b & REG_MASK		1127687	1		&			
ANR	1128707	Identifier	b		1127687	0					
ANR	1128708	Identifier	REG_MASK		1127687	1					
ANR	1128709	PrimaryExpression	5		1127687	1					
ANR	1128710	ExpressionStatement	* buf_ptr ++ = 0	530:4:15842:15856	1127687	1	True				
ANR	1128711	AssignmentExpression	* buf_ptr ++ = 0		1127687	0		=			
ANR	1128712	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128713	UnaryOperator	*		1127687	0					
ANR	1128714	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128715	Identifier	buf_ptr		1127687	0					
ANR	1128716	IncDec	++		1127687	1					
ANR	1128717	PrimaryExpression	0		1127687	1					
ANR	1128718	ElseStatement	else		1127687	0					
ANR	1128719	CompoundStatement		183:6:4999:4999	1127687	0					
ANR	1128720	ExpressionStatement	* buf_ptr ++ |= 0x04	534:2:15875:15893	1127687	0	True				
ANR	1128721	AssignmentExpression	* buf_ptr ++ |= 0x04		1127687	0		|=			
ANR	1128722	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128723	UnaryOperator	*		1127687	0					
ANR	1128724	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128725	Identifier	buf_ptr		1127687	0					
ANR	1128726	IncDec	++		1127687	1					
ANR	1128727	PrimaryExpression	0x04		1127687	1					
ANR	1128728	ExpressionStatement	* buf_ptr ++ = 0x25	535:2:15897:15914	1127687	1	True				
ANR	1128729	AssignmentExpression	* buf_ptr ++ = 0x25		1127687	0		=			
ANR	1128730	UnaryOperationExpression	* buf_ptr ++		1127687	0					
ANR	1128731	UnaryOperator	*		1127687	0					
ANR	1128732	PostIncDecOperationExpression	buf_ptr ++		1127687	1					
ANR	1128733	Identifier	buf_ptr		1127687	0					
ANR	1128734	IncDec	++		1127687	1					
ANR	1128735	PrimaryExpression	0x25		1127687	1					
ANR	1128736	ExpressionStatement	* ( sljit_si * ) buf_ptr = immb	536:2:15918:15944	1127687	2	True				
ANR	1128737	AssignmentExpression	* ( sljit_si * ) buf_ptr = immb		1127687	0		=			
ANR	1128738	UnaryOperationExpression	* ( sljit_si * ) buf_ptr		1127687	0					
ANR	1128739	UnaryOperator	*		1127687	0					
ANR	1128740	CastExpression	( sljit_si * ) buf_ptr		1127687	1					
ANR	1128741	CastTarget	sljit_si *		1127687	0					
ANR	1128742	Identifier	buf_ptr		1127687	1					
ANR	1128743	Identifier	immb		1127687	1					
ANR	1128744	ExpressionStatement	buf_ptr += sizeof ( sljit_si )	537:2:15975:16002	1127687	3	True				
ANR	1128745	AssignmentExpression	buf_ptr += sizeof ( sljit_si )		1127687	0		+=			
ANR	1128746	Identifier	buf_ptr		1127687	0					
ANR	1128747	SizeofExpression	sizeof ( sljit_si )		1127687	1					
ANR	1128748	Sizeof	sizeof		1127687	0					
ANR	1128749	SizeofOperand	sljit_si		1127687	1					
ANR	1128750	IfStatement	if ( a & SLJIT_IMM )		1127687	30					
ANR	1128751	Condition	a & SLJIT_IMM	540:5:16013:16025	1127687	0	True				
ANR	1128752	BitAndExpression	a & SLJIT_IMM		1127687	0		&			
ANR	1128753	Identifier	a		1127687	0					
ANR	1128754	Identifier	SLJIT_IMM		1127687	1					
ANR	1128755	CompoundStatement		190:20:5156:5156	1127687	1					
ANR	1128756	IfStatement	if ( flags & EX86_BYTE_ARG )		1127687	0					
ANR	1128757	Condition	flags & EX86_BYTE_ARG	541:6:16036:16056	1127687	0	True				
ANR	1128758	BitAndExpression	flags & EX86_BYTE_ARG		1127687	0		&			
ANR	1128759	Identifier	flags		1127687	0					
ANR	1128760	Identifier	EX86_BYTE_ARG		1127687	1					
ANR	1128761	ExpressionStatement	* buf_ptr = imma	542:3:16062:16077	1127687	1	True				
ANR	1128762	AssignmentExpression	* buf_ptr = imma		1127687	0		=			
ANR	1128763	UnaryOperationExpression	* buf_ptr		1127687	0					
ANR	1128764	UnaryOperator	*		1127687	0					
ANR	1128765	Identifier	buf_ptr		1127687	1					
ANR	1128766	Identifier	imma		1127687	1					
ANR	1128767	ElseStatement	else		1127687	0					
ANR	1128768	IfStatement	if ( flags & EX86_HALF_ARG )		1127687	0					
ANR	1128769	Condition	flags & EX86_HALF_ARG	543:11:16090:16110	1127687	0	True				
ANR	1128770	BitAndExpression	flags & EX86_HALF_ARG		1127687	0		&			
ANR	1128771	Identifier	flags		1127687	0					
ANR	1128772	Identifier	EX86_HALF_ARG		1127687	1					
ANR	1128773	ExpressionStatement	* ( short * ) buf_ptr = imma	544:3:16116:16139	1127687	1	True				
ANR	1128774	AssignmentExpression	* ( short * ) buf_ptr = imma		1127687	0		=			
ANR	1128775	UnaryOperationExpression	* ( short * ) buf_ptr		1127687	0					
ANR	1128776	UnaryOperator	*		1127687	0					
ANR	1128777	CastExpression	( short * ) buf_ptr		1127687	1					
ANR	1128778	CastTarget	short *		1127687	0					
ANR	1128779	Identifier	buf_ptr		1127687	1					
ANR	1128780	Identifier	imma		1127687	1					
ANR	1128781	ElseStatement	else		1127687	0					
ANR	1128782	IfStatement	if ( ! ( flags & EX86_SHIFT_INS ) )		1127687	0					
ANR	1128783	Condition	! ( flags & EX86_SHIFT_INS )	545:11:16152:16176	1127687	0	True				
ANR	1128784	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1127687	0					
ANR	1128785	UnaryOperator	!		1127687	0					
ANR	1128786	BitAndExpression	flags & EX86_SHIFT_INS		1127687	1		&			
ANR	1128787	Identifier	flags		1127687	0					
ANR	1128788	Identifier	EX86_SHIFT_INS		1127687	1					
ANR	1128789	ExpressionStatement	* ( sljit_si * ) buf_ptr = imma	546:3:16182:16208	1127687	1	True				
ANR	1128790	AssignmentExpression	* ( sljit_si * ) buf_ptr = imma		1127687	0		=			
ANR	1128791	UnaryOperationExpression	* ( sljit_si * ) buf_ptr		1127687	0					
ANR	1128792	UnaryOperator	*		1127687	0					
ANR	1128793	CastExpression	( sljit_si * ) buf_ptr		1127687	1					
ANR	1128794	CastTarget	sljit_si *		1127687	0					
ANR	1128795	Identifier	buf_ptr		1127687	1					
ANR	1128796	Identifier	imma		1127687	1					
ANR	1128797	ReturnStatement	return ! ( flags & EX86_SHIFT_INS ) ? inst : ( inst + 1 ) ;	549:1:16215:16267	1127687	31	True				
ANR	1128798	ConditionalExpression	! ( flags & EX86_SHIFT_INS ) ? inst : ( inst + 1 )		1127687	0					
ANR	1128799	Condition	! ( flags & EX86_SHIFT_INS )		1127687	0					
ANR	1128800	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1127687	0					
ANR	1128801	UnaryOperator	!		1127687	0					
ANR	1128802	BitAndExpression	flags & EX86_SHIFT_INS		1127687	1		&			
ANR	1128803	Identifier	flags		1127687	0					
ANR	1128804	Identifier	EX86_SHIFT_INS		1127687	1					
ANR	1128805	Identifier	inst		1127687	1					
ANR	1128806	AdditiveExpression	inst + 1		1127687	2		+			
ANR	1128807	Identifier	inst		1127687	0					
ANR	1128808	PrimaryExpression	1		1127687	1					
ANR	1128809	ReturnType	static sljit_ub *		1127687	1					
ANR	1128810	Identifier	emit_x86_instruction		1127687	2					
ANR	1128811	ParameterList	"struct sljit_compiler * compiler , sljit_si size , sljit_si a , sljit_sw imma , sljit_si b , sljit_sw immb"		1127687	3					
ANR	1128812	Parameter	struct sljit_compiler * compiler	346:38:10681:10711	1127687	0	True				
ANR	1128813	ParameterType	struct sljit_compiler *		1127687	0					
ANR	1128814	Identifier	compiler		1127687	1					
ANR	1128815	Parameter	sljit_si size	346:71:10714:10726	1127687	1	True				
ANR	1128816	ParameterType	sljit_si		1127687	0					
ANR	1128817	Identifier	size		1127687	1					
ANR	1128818	Parameter	sljit_si a	348:1:10772:10781	1127687	2	True				
ANR	1128819	ParameterType	sljit_si		1127687	0					
ANR	1128820	Identifier	a		1127687	1					
ANR	1128821	Parameter	sljit_sw imma	348:13:10784:10796	1127687	3	True				
ANR	1128822	ParameterType	sljit_sw		1127687	0					
ANR	1128823	Identifier	imma		1127687	1					
ANR	1128824	Parameter	sljit_si b	350:1:10844:10853	1127687	4	True				
ANR	1128825	ParameterType	sljit_si		1127687	0					
ANR	1128826	Identifier	b		1127687	1					
ANR	1128827	Parameter	sljit_sw immb	350:13:10856:10868	1127687	5	True				
ANR	1128828	ParameterType	sljit_sw		1127687	0					
ANR	1128829	Identifier	immb		1127687	1					
ANR	1128830	CFGEntryNode	ENTRY		1127687		True				
ANR	1128831	CFGExitNode	EXIT		1127687		True				
ANR	1128832	Symbol	TMP_REG3		1127687						
ANR	1128833	Symbol	emit_load_imm64		1127687						
ANR	1128834	Symbol	* ( sljit_si * ) buf_ptr		1127687						
ANR	1128835	Symbol	REX		1127687						
ANR	1128836	Symbol	EX86_NO_REXW		1127687						
ANR	1128837	Symbol	SLJIT_MEM		1127687						
ANR	1128838	Symbol	immb		1127687						
ANR	1128839	Symbol	* inst ++		1127687						
ANR	1128840	Symbol	imma		1127687						
ANR	1128841	Symbol	reg_map		1127687						
ANR	1128842	Symbol	* compiler		1127687						
ANR	1128843	Symbol	SLJIT_IMM		1127687						
ANR	1128844	Symbol	* reg_lmap		1127687						
ANR	1128845	Symbol	GROUP_SHIFT_N		1127687						
ANR	1128846	Symbol	NULL		1127687						
ANR	1128847	Symbol	rex		1127687						
ANR	1128848	Symbol	EX86_PREF_F2		1127687						
ANR	1128849	Symbol	EX86_PREF_F3		1127687						
ANR	1128850	Symbol	OFFS_REG_MASK		1127687						
ANR	1128851	Symbol	* buf_ptr ++		1127687						
ANR	1128852	Symbol	* reg_map		1127687						
ANR	1128853	Symbol	REX_B		1127687						
ANR	1128854	Symbol	GROUP_SHIFT_CL		1127687						
ANR	1128855	Symbol	EX86_SSE2_OP2		1127687						
ANR	1128856	Symbol	buf_ptr		1127687						
ANR	1128857	Symbol	EX86_SSE2_OP1		1127687						
ANR	1128858	Symbol	size		1127687						
ANR	1128859	Symbol	EX86_SHIFT_INS		1127687						
ANR	1128860	Symbol	GROUP_BINARY_81		1127687						
ANR	1128861	Symbol	GROUP_BINARY_83		1127687						
ANR	1128862	Symbol	REX_W		1127687						
ANR	1128863	Symbol	REX_X		1127687						
ANR	1128864	Symbol	OFFS_REG		1127687						
ANR	1128865	Symbol	REX_R		1127687						
ANR	1128866	Symbol	EX86_REX		1127687						
ANR	1128867	Symbol	EX86_BYTE_ARG		1127687						
ANR	1128868	Symbol	* ( short * ) buf_ptr		1127687						
ANR	1128869	Symbol	* REG_MASK		1127687						
ANR	1128870	Symbol	EX86_SSE2		1127687						
ANR	1128871	Symbol	flags		1127687						
ANR	1128872	Symbol	SLJIT_SP		1127687						
ANR	1128873	Symbol	SLJIT_PREF_SHIFT_REG		1127687						
ANR	1128874	Symbol	EX86_PREF_66		1127687						
ANR	1128875	Symbol	~0xf		1127687						
ANR	1128876	Symbol	IS_HALFWORD		1127687						
ANR	1128877	Symbol	EX86_BIN_INS		1127687						
ANR	1128878	Symbol	compiler		1127687						
ANR	1128879	Symbol	* buf_ptr		1127687						
ANR	1128880	Symbol	a		1127687						
ANR	1128881	Symbol	TO_OFFS_REG		1127687						
ANR	1128882	Symbol	b		1127687						
ANR	1128883	Symbol	REG_MASK		1127687						
ANR	1128884	Symbol	* inst		1127687						
ANR	1128885	Symbol	NOT_HALFWORD		1127687						
ANR	1128886	Symbol	* a		1127687						
ANR	1128887	Symbol	* b		1127687						
ANR	1128888	Symbol	MOD_REG		1127687						
ANR	1128889	Symbol	reg_lmap		1127687						
ANR	1128890	Symbol	* OFFS_REG		1127687						
ANR	1128891	Symbol	EX86_HALF_ARG		1127687						
ANR	1128892	Symbol	SLJIT_UNUSED		1127687						
ANR	1128893	Symbol	inst		1127687						
ANR	1128894	Symbol	ensure_buf		1127687						
ANR	1128895	Symbol	inst_size		1127687						
ANR	1128896	Symbol	compiler -> mode32		1127687						
ANR	1128897	Symbol	GROUP_SHIFT_1		1127687						
ANR	1128898	Function	call_with_args	556:0:16501:17649							
ANR	1128899	FunctionDef	"call_with_args (struct sljit_compiler * compiler , sljit_si type)"		1128898	0					
ANR	1128900	CompoundStatement		557:0:16593:17649	1128898	0					
ANR	1128901	IdentifierDeclStatement	sljit_ub * inst ;	558:1:16596:16610	1128898	0	True				
ANR	1128902	IdentifierDecl	* inst		1128898	0					
ANR	1128903	IdentifierDeclType	sljit_ub *		1128898	0					
ANR	1128904	Identifier	inst		1128898	1					
ANR	1128905	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8 , args_registers )"	561:1:16629:16739	1128898	1	True				
ANR	1128906	CallExpression	"SLJIT_COMPILE_ASSERT ( reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8 , args_registers )"		1128898	0					
ANR	1128907	Callee	SLJIT_COMPILE_ASSERT		1128898	0					
ANR	1128908	Identifier	SLJIT_COMPILE_ASSERT		1128898	0					
ANR	1128909	ArgumentList	reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8		1128898	1					
ANR	1128910	Argument	reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8		1128898	0					
ANR	1128911	AndExpression	reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8		1128898	0		&&			
ANR	1128912	EqualityExpression	reg_map [ SLJIT_R1 ] == 6		1128898	0		==			
ANR	1128913	ArrayIndexing	reg_map [ SLJIT_R1 ]		1128898	0					
ANR	1128914	Identifier	reg_map		1128898	0					
ANR	1128915	Identifier	SLJIT_R1		1128898	1					
ANR	1128916	PrimaryExpression	6		1128898	1					
ANR	1128917	AndExpression	reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8		1128898	1		&&			
ANR	1128918	RelationalExpression	reg_map [ SLJIT_R0 ] < 8		1128898	0		<			
ANR	1128919	ArrayIndexing	reg_map [ SLJIT_R0 ]		1128898	0					
ANR	1128920	Identifier	reg_map		1128898	0					
ANR	1128921	Identifier	SLJIT_R0		1128898	1					
ANR	1128922	PrimaryExpression	8		1128898	1					
ANR	1128923	RelationalExpression	reg_map [ SLJIT_R2 ] < 8		1128898	1		<			
ANR	1128924	ArrayIndexing	reg_map [ SLJIT_R2 ]		1128898	0					
ANR	1128925	Identifier	reg_map		1128898	0					
ANR	1128926	Identifier	SLJIT_R2		1128898	1					
ANR	1128927	PrimaryExpression	8		1128898	1					
ANR	1128928	Argument	args_registers		1128898	1					
ANR	1128929	Identifier	args_registers		1128898	0					
ANR	1128930	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 ) )"	563:1:16743:16817	1128898	2	True				
ANR	1128931	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 ) )"		1128898	0		=			
ANR	1128932	Identifier	inst		1128898	0					
ANR	1128933	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 ) )"		1128898	1					
ANR	1128934	CastTarget	sljit_ub *		1128898	0					
ANR	1128935	CallExpression	"ensure_buf ( compiler , 1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 ) )"		1128898	1					
ANR	1128936	Callee	ensure_buf		1128898	0					
ANR	1128937	Identifier	ensure_buf		1128898	0					
ANR	1128938	ArgumentList	compiler		1128898	1					
ANR	1128939	Argument	compiler		1128898	0					
ANR	1128940	Identifier	compiler		1128898	0					
ANR	1128941	Argument	1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 )		1128898	1					
ANR	1128942	AdditiveExpression	1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 )		1128898	0		+			
ANR	1128943	PrimaryExpression	1		1128898	0					
ANR	1128944	ConditionalExpression	( type < SLJIT_CALL3 ) ? 3 : 6		1128898	1					
ANR	1128945	Condition	type < SLJIT_CALL3		1128898	0					
ANR	1128946	RelationalExpression	type < SLJIT_CALL3		1128898	0		<			
ANR	1128947	Identifier	type		1128898	0					
ANR	1128948	Identifier	SLJIT_CALL3		1128898	1					
ANR	1128949	PrimaryExpression	3		1128898	1					
ANR	1128950	PrimaryExpression	6		1128898	2					
ANR	1128951	ExpressionStatement	FAIL_IF ( ! inst )	564:1:16820:16834	1128898	3	True				
ANR	1128952	CallExpression	FAIL_IF ( ! inst )		1128898	0					
ANR	1128953	Callee	FAIL_IF		1128898	0					
ANR	1128954	Identifier	FAIL_IF		1128898	0					
ANR	1128955	ArgumentList	! inst		1128898	1					
ANR	1128956	Argument	! inst		1128898	0					
ANR	1128957	UnaryOperationExpression	! inst		1128898	0					
ANR	1128958	UnaryOperator	!		1128898	0					
ANR	1128959	Identifier	inst		1128898	1					
ANR	1128960	ExpressionStatement	INC_SIZE ( ( type < SLJIT_CALL3 ) ? 3 : 6 )	565:1:16837:16875	1128898	4	True				
ANR	1128961	CallExpression	INC_SIZE ( ( type < SLJIT_CALL3 ) ? 3 : 6 )		1128898	0					
ANR	1128962	Callee	INC_SIZE		1128898	0					
ANR	1128963	Identifier	INC_SIZE		1128898	0					
ANR	1128964	ArgumentList	( type < SLJIT_CALL3 ) ? 3 : 6		1128898	1					
ANR	1128965	Argument	( type < SLJIT_CALL3 ) ? 3 : 6		1128898	0					
ANR	1128966	ConditionalExpression	( type < SLJIT_CALL3 ) ? 3 : 6		1128898	0					
ANR	1128967	Condition	type < SLJIT_CALL3		1128898	0					
ANR	1128968	RelationalExpression	type < SLJIT_CALL3		1128898	0		<			
ANR	1128969	Identifier	type		1128898	0					
ANR	1128970	Identifier	SLJIT_CALL3		1128898	1					
ANR	1128971	PrimaryExpression	3		1128898	1					
ANR	1128972	PrimaryExpression	6		1128898	2					
ANR	1128973	IfStatement	if ( type >= SLJIT_CALL3 )		1128898	5					
ANR	1128974	Condition	type >= SLJIT_CALL3	566:5:16882:16900	1128898	0	True				
ANR	1128975	RelationalExpression	type >= SLJIT_CALL3		1128898	0		>=			
ANR	1128976	Identifier	type		1128898	0					
ANR	1128977	Identifier	SLJIT_CALL3		1128898	1					
ANR	1128978	CompoundStatement		10:26:309:309	1128898	1					
ANR	1128979	ExpressionStatement	* inst ++ = REX_W	567:2:16907:16922	1128898	0	True				
ANR	1128980	AssignmentExpression	* inst ++ = REX_W		1128898	0		=			
ANR	1128981	UnaryOperationExpression	* inst ++		1128898	0					
ANR	1128982	UnaryOperator	*		1128898	0					
ANR	1128983	PostIncDecOperationExpression	inst ++		1128898	1					
ANR	1128984	Identifier	inst		1128898	0					
ANR	1128985	IncDec	++		1128898	1					
ANR	1128986	Identifier	REX_W		1128898	1					
ANR	1128987	ExpressionStatement	* inst ++ = MOV_r_rm	568:2:16926:16944	1128898	1	True				
ANR	1128988	AssignmentExpression	* inst ++ = MOV_r_rm		1128898	0		=			
ANR	1128989	UnaryOperationExpression	* inst ++		1128898	0					
ANR	1128990	UnaryOperator	*		1128898	0					
ANR	1128991	PostIncDecOperationExpression	inst ++		1128898	1					
ANR	1128992	Identifier	inst		1128898	0					
ANR	1128993	IncDec	++		1128898	1					
ANR	1128994	Identifier	MOV_r_rm		1128898	1					
ANR	1128995	ExpressionStatement	* inst ++ = MOD_REG | ( 0x2 << 3 ) | reg_lmap [ SLJIT_R2 ]	569:2:16948:17009	1128898	2	True				
ANR	1128996	AssignmentExpression	* inst ++ = MOD_REG | ( 0x2 << 3 ) | reg_lmap [ SLJIT_R2 ]		1128898	0		=			
ANR	1128997	UnaryOperationExpression	* inst ++		1128898	0					
ANR	1128998	UnaryOperator	*		1128898	0					
ANR	1128999	PostIncDecOperationExpression	inst ++		1128898	1					
ANR	1129000	Identifier	inst		1128898	0					
ANR	1129001	IncDec	++		1128898	1					
ANR	1129002	InclusiveOrExpression	MOD_REG | ( 0x2 << 3 ) | reg_lmap [ SLJIT_R2 ]		1128898	1		|			
ANR	1129003	Identifier	MOD_REG		1128898	0					
ANR	1129004	InclusiveOrExpression	( 0x2 << 3 ) | reg_lmap [ SLJIT_R2 ]		1128898	1		|			
ANR	1129005	ShiftExpression	0x2 << 3		1128898	0		<<			
ANR	1129006	PrimaryExpression	0x2		1128898	0					
ANR	1129007	PrimaryExpression	3		1128898	1					
ANR	1129008	ArrayIndexing	reg_lmap [ SLJIT_R2 ]		1128898	1					
ANR	1129009	Identifier	reg_lmap		1128898	0					
ANR	1129010	Identifier	SLJIT_R2		1128898	1					
ANR	1129011	ExpressionStatement	* inst ++ = REX_W	571:1:17015:17030	1128898	6	True				
ANR	1129012	AssignmentExpression	* inst ++ = REX_W		1128898	0		=			
ANR	1129013	UnaryOperationExpression	* inst ++		1128898	0					
ANR	1129014	UnaryOperator	*		1128898	0					
ANR	1129015	PostIncDecOperationExpression	inst ++		1128898	1					
ANR	1129016	Identifier	inst		1128898	0					
ANR	1129017	IncDec	++		1128898	1					
ANR	1129018	Identifier	REX_W		1128898	1					
ANR	1129019	ExpressionStatement	* inst ++ = MOV_r_rm	572:1:17033:17051	1128898	7	True				
ANR	1129020	AssignmentExpression	* inst ++ = MOV_r_rm		1128898	0		=			
ANR	1129021	UnaryOperationExpression	* inst ++		1128898	0					
ANR	1129022	UnaryOperator	*		1128898	0					
ANR	1129023	PostIncDecOperationExpression	inst ++		1128898	1					
ANR	1129024	Identifier	inst		1128898	0					
ANR	1129025	IncDec	++		1128898	1					
ANR	1129026	Identifier	MOV_r_rm		1128898	1					
ANR	1129027	ExpressionStatement	* inst ++ = MOD_REG | ( 0x7 << 3 ) | reg_lmap [ SLJIT_R0 ]	573:1:17054:17115	1128898	8	True				
ANR	1129028	AssignmentExpression	* inst ++ = MOD_REG | ( 0x7 << 3 ) | reg_lmap [ SLJIT_R0 ]		1128898	0		=			
ANR	1129029	UnaryOperationExpression	* inst ++		1128898	0					
ANR	1129030	UnaryOperator	*		1128898	0					
ANR	1129031	PostIncDecOperationExpression	inst ++		1128898	1					
ANR	1129032	Identifier	inst		1128898	0					
ANR	1129033	IncDec	++		1128898	1					
ANR	1129034	InclusiveOrExpression	MOD_REG | ( 0x7 << 3 ) | reg_lmap [ SLJIT_R0 ]		1128898	1		|			
ANR	1129035	Identifier	MOD_REG		1128898	0					
ANR	1129036	InclusiveOrExpression	( 0x7 << 3 ) | reg_lmap [ SLJIT_R0 ]		1128898	1		|			
ANR	1129037	ShiftExpression	0x7 << 3		1128898	0		<<			
ANR	1129038	PrimaryExpression	0x7		1128898	0					
ANR	1129039	PrimaryExpression	3		1128898	1					
ANR	1129040	ArrayIndexing	reg_lmap [ SLJIT_R0 ]		1128898	1					
ANR	1129041	Identifier	reg_lmap		1128898	0					
ANR	1129042	Identifier	SLJIT_R0		1128898	1					
ANR	1129043	ReturnStatement	return SLJIT_SUCCESS ;	589:1:17627:17647	1128898	9	True				
ANR	1129044	Identifier	SLJIT_SUCCESS		1128898	0					
ANR	1129045	ReturnType	static SLJIT_INLINE sljit_si		1128898	1					
ANR	1129046	Identifier	call_with_args		1128898	2					
ANR	1129047	ParameterList	"struct sljit_compiler * compiler , sljit_si type"		1128898	3					
ANR	1129048	Parameter	struct sljit_compiler * compiler	556:44:16545:16575	1128898	0	True				
ANR	1129049	ParameterType	struct sljit_compiler *		1128898	0					
ANR	1129050	Identifier	compiler		1128898	1					
ANR	1129051	Parameter	sljit_si type	556:77:16578:16590	1128898	1	True				
ANR	1129052	ParameterType	sljit_si		1128898	0					
ANR	1129053	Identifier	type		1128898	1					
ANR	1129054	CFGEntryNode	ENTRY		1128898		True				
ANR	1129055	CFGExitNode	EXIT		1128898		True				
ANR	1129056	Symbol	MOV_r_rm		1128898						
ANR	1129057	Symbol	* inst ++		1128898						
ANR	1129058	Symbol	reg_map		1128898						
ANR	1129059	Symbol	SLJIT_SUCCESS		1128898						
ANR	1129060	Symbol	type		1128898						
ANR	1129061	Symbol	args_registers		1128898						
ANR	1129062	Symbol	* reg_map		1128898						
ANR	1129063	Symbol	SLJIT_R1		1128898						
ANR	1129064	Symbol	SLJIT_R2		1128898						
ANR	1129065	Symbol	MOD_REG		1128898						
ANR	1129066	Symbol	SLJIT_R0		1128898						
ANR	1129067	Symbol	* SLJIT_R1		1128898						
ANR	1129068	Symbol	reg_lmap		1128898						
ANR	1129069	Symbol	* SLJIT_R2		1128898						
ANR	1129070	Symbol	inst		1128898						
ANR	1129071	Symbol	ensure_buf		1128898						
ANR	1129072	Symbol	* reg_lmap		1128898						
ANR	1129073	Symbol	REX_W		1128898						
ANR	1129074	Symbol	SLJIT_CALL3		1128898						
ANR	1129075	Symbol	compiler		1128898						
ANR	1129076	Symbol	* SLJIT_R0		1128898						
ANR	1129077	Function	sljit_emit_fast_enter	592:0:17652:18534							
ANR	1129078	FunctionDef	"sljit_emit_fast_enter (struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw)"		1129077	0					
ANR	1129079	CompoundStatement		593:0:17770:18534	1129077	0					
ANR	1129080	IdentifierDeclStatement	sljit_ub * inst ;	594:1:17773:17787	1129077	0	True				
ANR	1129081	IdentifierDecl	* inst		1129077	0					
ANR	1129082	IdentifierDeclType	sljit_ub *		1129077	0					
ANR	1129083	Identifier	inst		1129077	1					
ANR	1129084	ExpressionStatement	CHECK_ERROR ( )	596:1:17791:17804	1129077	1	True				
ANR	1129085	CallExpression	CHECK_ERROR ( )		1129077	0					
ANR	1129086	Callee	CHECK_ERROR		1129077	0					
ANR	1129087	Identifier	CHECK_ERROR		1129077	0					
ANR	1129088	ArgumentList			1129077	1					
ANR	1129089	ExpressionStatement	"CHECK ( check_sljit_emit_fast_enter ( compiler , dst , dstw ) )"	597:1:17807:17862	1129077	2	True				
ANR	1129090	CallExpression	"CHECK ( check_sljit_emit_fast_enter ( compiler , dst , dstw ) )"		1129077	0					
ANR	1129091	Callee	CHECK		1129077	0					
ANR	1129092	Identifier	CHECK		1129077	0					
ANR	1129093	ArgumentList	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1129077	1					
ANR	1129094	Argument	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1129077	0					
ANR	1129095	CallExpression	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1129077	0					
ANR	1129096	Callee	check_sljit_emit_fast_enter		1129077	0					
ANR	1129097	Identifier	check_sljit_emit_fast_enter		1129077	0					
ANR	1129098	ArgumentList	compiler		1129077	1					
ANR	1129099	Argument	compiler		1129077	0					
ANR	1129100	Identifier	compiler		1129077	0					
ANR	1129101	Argument	dst		1129077	1					
ANR	1129102	Identifier	dst		1129077	0					
ANR	1129103	Argument	dstw		1129077	2					
ANR	1129104	Identifier	dstw		1129077	0					
ANR	1129105	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( dst , dstw )"	598:1:17865:17895	1129077	3	True				
ANR	1129106	CallExpression	"ADJUST_LOCAL_OFFSET ( dst , dstw )"		1129077	0					
ANR	1129107	Callee	ADJUST_LOCAL_OFFSET		1129077	0					
ANR	1129108	Identifier	ADJUST_LOCAL_OFFSET		1129077	0					
ANR	1129109	ArgumentList	dst		1129077	1					
ANR	1129110	Argument	dst		1129077	0					
ANR	1129111	Identifier	dst		1129077	0					
ANR	1129112	Argument	dstw		1129077	1					
ANR	1129113	Identifier	dstw		1129077	0					
ANR	1129114	IfStatement	if ( dst == SLJIT_UNUSED )		1129077	4					
ANR	1129115	Condition	dst == SLJIT_UNUSED	601:5:17950:17968	1129077	0	True				
ANR	1129116	EqualityExpression	dst == SLJIT_UNUSED		1129077	0		==			
ANR	1129117	Identifier	dst		1129077	0					
ANR	1129118	Identifier	SLJIT_UNUSED		1129077	1					
ANR	1129119	ExpressionStatement	dst = TMP_REG1	602:2:17973:17987	1129077	1	True				
ANR	1129120	AssignmentExpression	dst = TMP_REG1		1129077	0		=			
ANR	1129121	Identifier	dst		1129077	0					
ANR	1129122	Identifier	TMP_REG1		1129077	1					
ANR	1129123	IfStatement	if ( FAST_IS_REG ( dst ) )		1129077	5					
ANR	1129124	Condition	FAST_IS_REG ( dst )	604:5:17995:18010	1129077	0	True				
ANR	1129125	CallExpression	FAST_IS_REG ( dst )		1129077	0					
ANR	1129126	Callee	FAST_IS_REG		1129077	0					
ANR	1129127	Identifier	FAST_IS_REG		1129077	0					
ANR	1129128	ArgumentList	dst		1129077	1					
ANR	1129129	Argument	dst		1129077	0					
ANR	1129130	Identifier	dst		1129077	0					
ANR	1129131	CompoundStatement		12:23:242:242	1129077	1					
ANR	1129132	IfStatement	if ( reg_map [ dst ] < 8 )		1129077	0					
ANR	1129133	Condition	reg_map [ dst ] < 8	605:6:18021:18036	1129077	0	True				
ANR	1129134	RelationalExpression	reg_map [ dst ] < 8		1129077	0		<			
ANR	1129135	ArrayIndexing	reg_map [ dst ]		1129077	0					
ANR	1129136	Identifier	reg_map		1129077	0					
ANR	1129137	Identifier	dst		1129077	1					
ANR	1129138	PrimaryExpression	8		1129077	1					
ANR	1129139	CompoundStatement		13:24:268:268	1129077	1					
ANR	1129140	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"	606:3:18044:18089	1129077	0	True				
ANR	1129141	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1129077	0		=			
ANR	1129142	Identifier	inst		1129077	0					
ANR	1129143	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1129077	1					
ANR	1129144	CastTarget	sljit_ub *		1129077	0					
ANR	1129145	CallExpression	"ensure_buf ( compiler , 1 + 1 )"		1129077	1					
ANR	1129146	Callee	ensure_buf		1129077	0					
ANR	1129147	Identifier	ensure_buf		1129077	0					
ANR	1129148	ArgumentList	compiler		1129077	1					
ANR	1129149	Argument	compiler		1129077	0					
ANR	1129150	Identifier	compiler		1129077	0					
ANR	1129151	Argument	1 + 1		1129077	1					
ANR	1129152	AdditiveExpression	1 + 1		1129077	0		+			
ANR	1129153	PrimaryExpression	1		1129077	0					
ANR	1129154	PrimaryExpression	1		1129077	1					
ANR	1129155	ExpressionStatement	FAIL_IF ( ! inst )	607:3:18094:18108	1129077	1	True				
ANR	1129156	CallExpression	FAIL_IF ( ! inst )		1129077	0					
ANR	1129157	Callee	FAIL_IF		1129077	0					
ANR	1129158	Identifier	FAIL_IF		1129077	0					
ANR	1129159	ArgumentList	! inst		1129077	1					
ANR	1129160	Argument	! inst		1129077	0					
ANR	1129161	UnaryOperationExpression	! inst		1129077	0					
ANR	1129162	UnaryOperator	!		1129077	0					
ANR	1129163	Identifier	inst		1129077	1					
ANR	1129164	ExpressionStatement	INC_SIZE ( 1 )	608:3:18113:18124	1129077	2	True				
ANR	1129165	CallExpression	INC_SIZE ( 1 )		1129077	0					
ANR	1129166	Callee	INC_SIZE		1129077	0					
ANR	1129167	Identifier	INC_SIZE		1129077	0					
ANR	1129168	ArgumentList	1		1129077	1					
ANR	1129169	Argument	1		1129077	0					
ANR	1129170	PrimaryExpression	1		1129077	0					
ANR	1129171	ExpressionStatement	POP_REG ( reg_lmap [ dst ] )	609:3:18129:18151	1129077	3	True				
ANR	1129172	CallExpression	POP_REG ( reg_lmap [ dst ] )		1129077	0					
ANR	1129173	Callee	POP_REG		1129077	0					
ANR	1129174	Identifier	POP_REG		1129077	0					
ANR	1129175	ArgumentList	reg_lmap [ dst ]		1129077	1					
ANR	1129176	Argument	reg_lmap [ dst ]		1129077	0					
ANR	1129177	ArrayIndexing	reg_lmap [ dst ]		1129077	0					
ANR	1129178	Identifier	reg_lmap		1129077	0					
ANR	1129179	Identifier	dst		1129077	1					
ANR	1129180	ReturnStatement	return SLJIT_SUCCESS ;	610:3:18156:18176	1129077	4	True				
ANR	1129181	Identifier	SLJIT_SUCCESS		1129077	0					
ANR	1129182	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 )"	613:2:18185:18230	1129077	1	True				
ANR	1129183	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 )"		1129077	0		=			
ANR	1129184	Identifier	inst		1129077	0					
ANR	1129185	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 2 )"		1129077	1					
ANR	1129186	CastTarget	sljit_ub *		1129077	0					
ANR	1129187	CallExpression	"ensure_buf ( compiler , 1 + 2 )"		1129077	1					
ANR	1129188	Callee	ensure_buf		1129077	0					
ANR	1129189	Identifier	ensure_buf		1129077	0					
ANR	1129190	ArgumentList	compiler		1129077	1					
ANR	1129191	Argument	compiler		1129077	0					
ANR	1129192	Identifier	compiler		1129077	0					
ANR	1129193	Argument	1 + 2		1129077	1					
ANR	1129194	AdditiveExpression	1 + 2		1129077	0		+			
ANR	1129195	PrimaryExpression	1		1129077	0					
ANR	1129196	PrimaryExpression	2		1129077	1					
ANR	1129197	ExpressionStatement	FAIL_IF ( ! inst )	614:2:18234:18248	1129077	2	True				
ANR	1129198	CallExpression	FAIL_IF ( ! inst )		1129077	0					
ANR	1129199	Callee	FAIL_IF		1129077	0					
ANR	1129200	Identifier	FAIL_IF		1129077	0					
ANR	1129201	ArgumentList	! inst		1129077	1					
ANR	1129202	Argument	! inst		1129077	0					
ANR	1129203	UnaryOperationExpression	! inst		1129077	0					
ANR	1129204	UnaryOperator	!		1129077	0					
ANR	1129205	Identifier	inst		1129077	1					
ANR	1129206	ExpressionStatement	INC_SIZE ( 2 )	615:2:18252:18263	1129077	3	True				
ANR	1129207	CallExpression	INC_SIZE ( 2 )		1129077	0					
ANR	1129208	Callee	INC_SIZE		1129077	0					
ANR	1129209	Identifier	INC_SIZE		1129077	0					
ANR	1129210	ArgumentList	2		1129077	1					
ANR	1129211	Argument	2		1129077	0					
ANR	1129212	PrimaryExpression	2		1129077	0					
ANR	1129213	ExpressionStatement	* inst ++ = REX_B	616:2:18267:18282	1129077	4	True				
ANR	1129214	AssignmentExpression	* inst ++ = REX_B		1129077	0		=			
ANR	1129215	UnaryOperationExpression	* inst ++		1129077	0					
ANR	1129216	UnaryOperator	*		1129077	0					
ANR	1129217	PostIncDecOperationExpression	inst ++		1129077	1					
ANR	1129218	Identifier	inst		1129077	0					
ANR	1129219	IncDec	++		1129077	1					
ANR	1129220	Identifier	REX_B		1129077	1					
ANR	1129221	ExpressionStatement	POP_REG ( reg_lmap [ dst ] )	617:2:18286:18308	1129077	5	True				
ANR	1129222	CallExpression	POP_REG ( reg_lmap [ dst ] )		1129077	0					
ANR	1129223	Callee	POP_REG		1129077	0					
ANR	1129224	Identifier	POP_REG		1129077	0					
ANR	1129225	ArgumentList	reg_lmap [ dst ]		1129077	1					
ANR	1129226	Argument	reg_lmap [ dst ]		1129077	0					
ANR	1129227	ArrayIndexing	reg_lmap [ dst ]		1129077	0					
ANR	1129228	Identifier	reg_lmap		1129077	0					
ANR	1129229	Identifier	dst		1129077	1					
ANR	1129230	ReturnStatement	return SLJIT_SUCCESS ;	618:2:18312:18332	1129077	6	True				
ANR	1129231	Identifier	SLJIT_SUCCESS		1129077	0					
ANR	1129232	ExpressionStatement	compiler -> mode32 = 1	622:1:18393:18413	1129077	6	True				
ANR	1129233	AssignmentExpression	compiler -> mode32 = 1		1129077	0		=			
ANR	1129234	PtrMemberAccess	compiler -> mode32		1129077	0					
ANR	1129235	Identifier	compiler		1129077	0					
ANR	1129236	Identifier	mode32		1129077	1					
ANR	1129237	PrimaryExpression	1		1129077	1					
ANR	1129238	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , dst , dstw )"	623:1:18416:18473	1129077	7	True				
ANR	1129239	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , dst , dstw )"		1129077	0		=			
ANR	1129240	Identifier	inst		1129077	0					
ANR	1129241	CallExpression	"emit_x86_instruction ( compiler , 1 , 0 , 0 , dst , dstw )"		1129077	1					
ANR	1129242	Callee	emit_x86_instruction		1129077	0					
ANR	1129243	Identifier	emit_x86_instruction		1129077	0					
ANR	1129244	ArgumentList	compiler		1129077	1					
ANR	1129245	Argument	compiler		1129077	0					
ANR	1129246	Identifier	compiler		1129077	0					
ANR	1129247	Argument	1		1129077	1					
ANR	1129248	PrimaryExpression	1		1129077	0					
ANR	1129249	Argument	0		1129077	2					
ANR	1129250	PrimaryExpression	0		1129077	0					
ANR	1129251	Argument	0		1129077	3					
ANR	1129252	PrimaryExpression	0		1129077	0					
ANR	1129253	Argument	dst		1129077	4					
ANR	1129254	Identifier	dst		1129077	0					
ANR	1129255	Argument	dstw		1129077	5					
ANR	1129256	Identifier	dstw		1129077	0					
ANR	1129257	ExpressionStatement	FAIL_IF ( ! inst )	624:1:18476:18490	1129077	8	True				
ANR	1129258	CallExpression	FAIL_IF ( ! inst )		1129077	0					
ANR	1129259	Callee	FAIL_IF		1129077	0					
ANR	1129260	Identifier	FAIL_IF		1129077	0					
ANR	1129261	ArgumentList	! inst		1129077	1					
ANR	1129262	Argument	! inst		1129077	0					
ANR	1129263	UnaryOperationExpression	! inst		1129077	0					
ANR	1129264	UnaryOperator	!		1129077	0					
ANR	1129265	Identifier	inst		1129077	1					
ANR	1129266	ExpressionStatement	* inst ++ = POP_rm	625:1:18493:18509	1129077	9	True				
ANR	1129267	AssignmentExpression	* inst ++ = POP_rm		1129077	0		=			
ANR	1129268	UnaryOperationExpression	* inst ++		1129077	0					
ANR	1129269	UnaryOperator	*		1129077	0					
ANR	1129270	PostIncDecOperationExpression	inst ++		1129077	1					
ANR	1129271	Identifier	inst		1129077	0					
ANR	1129272	IncDec	++		1129077	1					
ANR	1129273	Identifier	POP_rm		1129077	1					
ANR	1129274	ReturnStatement	return SLJIT_SUCCESS ;	626:1:18512:18532	1129077	10	True				
ANR	1129275	Identifier	SLJIT_SUCCESS		1129077	0					
ANR	1129276	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1129077	1					
ANR	1129277	Identifier	sljit_emit_fast_enter		1129077	2					
ANR	1129278	ParameterList	"struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw"		1129077	3					
ANR	1129279	Parameter	struct sljit_compiler * compiler	592:56:17708:17738	1129077	0	True				
ANR	1129280	ParameterType	struct sljit_compiler *		1129077	0					
ANR	1129281	Identifier	compiler		1129077	1					
ANR	1129282	Parameter	sljit_si dst	592:89:17741:17752	1129077	1	True				
ANR	1129283	ParameterType	sljit_si		1129077	0					
ANR	1129284	Identifier	dst		1129077	1					
ANR	1129285	Parameter	sljit_sw dstw	592:103:17755:17767	1129077	2	True				
ANR	1129286	ParameterType	sljit_sw		1129077	0					
ANR	1129287	Identifier	dstw		1129077	1					
ANR	1129288	CFGEntryNode	ENTRY		1129077		True				
ANR	1129289	CFGExitNode	EXIT		1129077		True				
ANR	1129290	Symbol	check_sljit_emit_fast_enter		1129077						
ANR	1129291	Symbol	TMP_REG1		1129077						
ANR	1129292	Symbol	emit_x86_instruction		1129077						
ANR	1129293	Symbol	FAST_IS_REG		1129077						
ANR	1129294	Symbol	dst		1129077						
ANR	1129295	Symbol	* inst ++		1129077						
ANR	1129296	Symbol	reg_map		1129077						
ANR	1129297	Symbol	SLJIT_SUCCESS		1129077						
ANR	1129298	Symbol	* compiler		1129077						
ANR	1129299	Symbol	POP_rm		1129077						
ANR	1129300	Symbol	* reg_map		1129077						
ANR	1129301	Symbol	REX_B		1129077						
ANR	1129302	Symbol	* dst		1129077						
ANR	1129303	Symbol	reg_lmap		1129077						
ANR	1129304	Symbol	SLJIT_UNUSED		1129077						
ANR	1129305	Symbol	inst		1129077						
ANR	1129306	Symbol	ensure_buf		1129077						
ANR	1129307	Symbol	* reg_lmap		1129077						
ANR	1129308	Symbol	compiler -> mode32		1129077						
ANR	1129309	Symbol	compiler		1129077						
ANR	1129310	Symbol	dstw		1129077						
ANR	1129311	Function	sljit_emit_fast_return	629:0:18537:19824							
ANR	1129312	FunctionDef	"sljit_emit_fast_return (struct sljit_compiler * compiler , sljit_si src , sljit_sw srcw)"		1129311	0					
ANR	1129313	CompoundStatement		630:0:18656:19824	1129311	0					
ANR	1129314	IdentifierDeclStatement	sljit_ub * inst ;	631:1:18659:18673	1129311	0	True				
ANR	1129315	IdentifierDecl	* inst		1129311	0					
ANR	1129316	IdentifierDeclType	sljit_ub *		1129311	0					
ANR	1129317	Identifier	inst		1129311	1					
ANR	1129318	ExpressionStatement	CHECK_ERROR ( )	633:1:18677:18690	1129311	1	True				
ANR	1129319	CallExpression	CHECK_ERROR ( )		1129311	0					
ANR	1129320	Callee	CHECK_ERROR		1129311	0					
ANR	1129321	Identifier	CHECK_ERROR		1129311	0					
ANR	1129322	ArgumentList			1129311	1					
ANR	1129323	ExpressionStatement	"CHECK ( check_sljit_emit_fast_return ( compiler , src , srcw ) )"	634:1:18693:18749	1129311	2	True				
ANR	1129324	CallExpression	"CHECK ( check_sljit_emit_fast_return ( compiler , src , srcw ) )"		1129311	0					
ANR	1129325	Callee	CHECK		1129311	0					
ANR	1129326	Identifier	CHECK		1129311	0					
ANR	1129327	ArgumentList	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1129311	1					
ANR	1129328	Argument	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1129311	0					
ANR	1129329	CallExpression	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1129311	0					
ANR	1129330	Callee	check_sljit_emit_fast_return		1129311	0					
ANR	1129331	Identifier	check_sljit_emit_fast_return		1129311	0					
ANR	1129332	ArgumentList	compiler		1129311	1					
ANR	1129333	Argument	compiler		1129311	0					
ANR	1129334	Identifier	compiler		1129311	0					
ANR	1129335	Argument	src		1129311	1					
ANR	1129336	Identifier	src		1129311	0					
ANR	1129337	Argument	srcw		1129311	2					
ANR	1129338	Identifier	srcw		1129311	0					
ANR	1129339	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src , srcw )"	635:1:18752:18782	1129311	3	True				
ANR	1129340	CallExpression	"ADJUST_LOCAL_OFFSET ( src , srcw )"		1129311	0					
ANR	1129341	Callee	ADJUST_LOCAL_OFFSET		1129311	0					
ANR	1129342	Identifier	ADJUST_LOCAL_OFFSET		1129311	0					
ANR	1129343	ArgumentList	src		1129311	1					
ANR	1129344	Argument	src		1129311	0					
ANR	1129345	Identifier	src		1129311	0					
ANR	1129346	Argument	srcw		1129311	1					
ANR	1129347	Identifier	srcw		1129311	0					
ANR	1129348	IfStatement	if ( ( src & SLJIT_IMM ) && NOT_HALFWORD ( srcw ) )		1129311	4					
ANR	1129349	Condition	( src & SLJIT_IMM ) && NOT_HALFWORD ( srcw )	637:5:18790:18828	1129311	0	True				
ANR	1129350	AndExpression	( src & SLJIT_IMM ) && NOT_HALFWORD ( srcw )		1129311	0		&&			
ANR	1129351	BitAndExpression	src & SLJIT_IMM		1129311	0		&			
ANR	1129352	Identifier	src		1129311	0					
ANR	1129353	Identifier	SLJIT_IMM		1129311	1					
ANR	1129354	CallExpression	NOT_HALFWORD ( srcw )		1129311	1					
ANR	1129355	Callee	NOT_HALFWORD		1129311	0					
ANR	1129356	Identifier	NOT_HALFWORD		1129311	0					
ANR	1129357	ArgumentList	srcw		1129311	1					
ANR	1129358	Argument	srcw		1129311	0					
ANR	1129359	Identifier	srcw		1129311	0					
ANR	1129360	CompoundStatement		8:46:174:174	1129311	1					
ANR	1129361	ExpressionStatement	"FAIL_IF ( emit_load_imm64 ( compiler , TMP_REG1 , srcw ) )"	638:2:18835:18885	1129311	0	True				
ANR	1129362	CallExpression	"FAIL_IF ( emit_load_imm64 ( compiler , TMP_REG1 , srcw ) )"		1129311	0					
ANR	1129363	Callee	FAIL_IF		1129311	0					
ANR	1129364	Identifier	FAIL_IF		1129311	0					
ANR	1129365	ArgumentList	"emit_load_imm64 ( compiler , TMP_REG1 , srcw )"		1129311	1					
ANR	1129366	Argument	"emit_load_imm64 ( compiler , TMP_REG1 , srcw )"		1129311	0					
ANR	1129367	CallExpression	"emit_load_imm64 ( compiler , TMP_REG1 , srcw )"		1129311	0					
ANR	1129368	Callee	emit_load_imm64		1129311	0					
ANR	1129369	Identifier	emit_load_imm64		1129311	0					
ANR	1129370	ArgumentList	compiler		1129311	1					
ANR	1129371	Argument	compiler		1129311	0					
ANR	1129372	Identifier	compiler		1129311	0					
ANR	1129373	Argument	TMP_REG1		1129311	1					
ANR	1129374	Identifier	TMP_REG1		1129311	0					
ANR	1129375	Argument	srcw		1129311	2					
ANR	1129376	Identifier	srcw		1129311	0					
ANR	1129377	ExpressionStatement	src = TMP_REG1	639:2:18889:18903	1129311	1	True				
ANR	1129378	AssignmentExpression	src = TMP_REG1		1129311	0		=			
ANR	1129379	Identifier	src		1129311	0					
ANR	1129380	Identifier	TMP_REG1		1129311	1					
ANR	1129381	IfStatement	if ( FAST_IS_REG ( src ) )		1129311	5					
ANR	1129382	Condition	FAST_IS_REG ( src )	642:5:18914:18929	1129311	0	True				
ANR	1129383	CallExpression	FAST_IS_REG ( src )		1129311	0					
ANR	1129384	Callee	FAST_IS_REG		1129311	0					
ANR	1129385	Identifier	FAST_IS_REG		1129311	0					
ANR	1129386	ArgumentList	src		1129311	1					
ANR	1129387	Argument	src		1129311	0					
ANR	1129388	Identifier	src		1129311	0					
ANR	1129389	CompoundStatement		13:23:275:275	1129311	1					
ANR	1129390	IfStatement	if ( reg_map [ src ] < 8 )		1129311	0					
ANR	1129391	Condition	reg_map [ src ] < 8	643:6:18940:18955	1129311	0	True				
ANR	1129392	RelationalExpression	reg_map [ src ] < 8		1129311	0		<			
ANR	1129393	ArrayIndexing	reg_map [ src ]		1129311	0					
ANR	1129394	Identifier	reg_map		1129311	0					
ANR	1129395	Identifier	src		1129311	1					
ANR	1129396	PrimaryExpression	8		1129311	1					
ANR	1129397	CompoundStatement		14:24:301:301	1129311	1					
ANR	1129398	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + 1 )"	644:3:18963:19012	1129311	0	True				
ANR	1129399	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + 1 )"		1129311	0		=			
ANR	1129400	Identifier	inst		1129311	0					
ANR	1129401	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + 1 )"		1129311	1					
ANR	1129402	CastTarget	sljit_ub *		1129311	0					
ANR	1129403	CallExpression	"ensure_buf ( compiler , 1 + 1 + 1 )"		1129311	1					
ANR	1129404	Callee	ensure_buf		1129311	0					
ANR	1129405	Identifier	ensure_buf		1129311	0					
ANR	1129406	ArgumentList	compiler		1129311	1					
ANR	1129407	Argument	compiler		1129311	0					
ANR	1129408	Identifier	compiler		1129311	0					
ANR	1129409	Argument	1 + 1 + 1		1129311	1					
ANR	1129410	AdditiveExpression	1 + 1 + 1		1129311	0		+			
ANR	1129411	PrimaryExpression	1		1129311	0					
ANR	1129412	AdditiveExpression	1 + 1		1129311	1		+			
ANR	1129413	PrimaryExpression	1		1129311	0					
ANR	1129414	PrimaryExpression	1		1129311	1					
ANR	1129415	ExpressionStatement	FAIL_IF ( ! inst )	645:3:19017:19031	1129311	1	True				
ANR	1129416	CallExpression	FAIL_IF ( ! inst )		1129311	0					
ANR	1129417	Callee	FAIL_IF		1129311	0					
ANR	1129418	Identifier	FAIL_IF		1129311	0					
ANR	1129419	ArgumentList	! inst		1129311	1					
ANR	1129420	Argument	! inst		1129311	0					
ANR	1129421	UnaryOperationExpression	! inst		1129311	0					
ANR	1129422	UnaryOperator	!		1129311	0					
ANR	1129423	Identifier	inst		1129311	1					
ANR	1129424	ExpressionStatement	INC_SIZE ( 1 + 1 )	647:3:19037:19052	1129311	2	True				
ANR	1129425	CallExpression	INC_SIZE ( 1 + 1 )		1129311	0					
ANR	1129426	Callee	INC_SIZE		1129311	0					
ANR	1129427	Identifier	INC_SIZE		1129311	0					
ANR	1129428	ArgumentList	1 + 1		1129311	1					
ANR	1129429	Argument	1 + 1		1129311	0					
ANR	1129430	AdditiveExpression	1 + 1		1129311	0		+			
ANR	1129431	PrimaryExpression	1		1129311	0					
ANR	1129432	PrimaryExpression	1		1129311	1					
ANR	1129433	ExpressionStatement	PUSH_REG ( reg_lmap [ src ] )	648:3:19057:19080	1129311	3	True				
ANR	1129434	CallExpression	PUSH_REG ( reg_lmap [ src ] )		1129311	0					
ANR	1129435	Callee	PUSH_REG		1129311	0					
ANR	1129436	Identifier	PUSH_REG		1129311	0					
ANR	1129437	ArgumentList	reg_lmap [ src ]		1129311	1					
ANR	1129438	Argument	reg_lmap [ src ]		1129311	0					
ANR	1129439	ArrayIndexing	reg_lmap [ src ]		1129311	0					
ANR	1129440	Identifier	reg_lmap		1129311	0					
ANR	1129441	Identifier	src		1129311	1					
ANR	1129442	ElseStatement	else		1129311	0					
ANR	1129443	CompoundStatement		21:7:436:436	1129311	0					
ANR	1129444	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + 1 )"	651:3:19098:19147	1129311	0	True				
ANR	1129445	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + 1 )"		1129311	0		=			
ANR	1129446	Identifier	inst		1129311	0					
ANR	1129447	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + 1 )"		1129311	1					
ANR	1129448	CastTarget	sljit_ub *		1129311	0					
ANR	1129449	CallExpression	"ensure_buf ( compiler , 1 + 2 + 1 )"		1129311	1					
ANR	1129450	Callee	ensure_buf		1129311	0					
ANR	1129451	Identifier	ensure_buf		1129311	0					
ANR	1129452	ArgumentList	compiler		1129311	1					
ANR	1129453	Argument	compiler		1129311	0					
ANR	1129454	Identifier	compiler		1129311	0					
ANR	1129455	Argument	1 + 2 + 1		1129311	1					
ANR	1129456	AdditiveExpression	1 + 2 + 1		1129311	0		+			
ANR	1129457	PrimaryExpression	1		1129311	0					
ANR	1129458	AdditiveExpression	2 + 1		1129311	1		+			
ANR	1129459	PrimaryExpression	2		1129311	0					
ANR	1129460	PrimaryExpression	1		1129311	1					
ANR	1129461	ExpressionStatement	FAIL_IF ( ! inst )	652:3:19152:19166	1129311	1	True				
ANR	1129462	CallExpression	FAIL_IF ( ! inst )		1129311	0					
ANR	1129463	Callee	FAIL_IF		1129311	0					
ANR	1129464	Identifier	FAIL_IF		1129311	0					
ANR	1129465	ArgumentList	! inst		1129311	1					
ANR	1129466	Argument	! inst		1129311	0					
ANR	1129467	UnaryOperationExpression	! inst		1129311	0					
ANR	1129468	UnaryOperator	!		1129311	0					
ANR	1129469	Identifier	inst		1129311	1					
ANR	1129470	ExpressionStatement	INC_SIZE ( 2 + 1 )	654:3:19172:19187	1129311	2	True				
ANR	1129471	CallExpression	INC_SIZE ( 2 + 1 )		1129311	0					
ANR	1129472	Callee	INC_SIZE		1129311	0					
ANR	1129473	Identifier	INC_SIZE		1129311	0					
ANR	1129474	ArgumentList	2 + 1		1129311	1					
ANR	1129475	Argument	2 + 1		1129311	0					
ANR	1129476	AdditiveExpression	2 + 1		1129311	0		+			
ANR	1129477	PrimaryExpression	2		1129311	0					
ANR	1129478	PrimaryExpression	1		1129311	1					
ANR	1129479	ExpressionStatement	* inst ++ = REX_B	655:3:19192:19207	1129311	3	True				
ANR	1129480	AssignmentExpression	* inst ++ = REX_B		1129311	0		=			
ANR	1129481	UnaryOperationExpression	* inst ++		1129311	0					
ANR	1129482	UnaryOperator	*		1129311	0					
ANR	1129483	PostIncDecOperationExpression	inst ++		1129311	1					
ANR	1129484	Identifier	inst		1129311	0					
ANR	1129485	IncDec	++		1129311	1					
ANR	1129486	Identifier	REX_B		1129311	1					
ANR	1129487	ExpressionStatement	PUSH_REG ( reg_lmap [ src ] )	656:3:19212:19235	1129311	4	True				
ANR	1129488	CallExpression	PUSH_REG ( reg_lmap [ src ] )		1129311	0					
ANR	1129489	Callee	PUSH_REG		1129311	0					
ANR	1129490	Identifier	PUSH_REG		1129311	0					
ANR	1129491	ArgumentList	reg_lmap [ src ]		1129311	1					
ANR	1129492	Argument	reg_lmap [ src ]		1129311	0					
ANR	1129493	ArrayIndexing	reg_lmap [ src ]		1129311	0					
ANR	1129494	Identifier	reg_lmap		1129311	0					
ANR	1129495	Identifier	src		1129311	1					
ANR	1129496	ElseStatement	else		1129311	0					
ANR	1129497	IfStatement	if ( src & SLJIT_MEM )		1129311	0					
ANR	1129498	Condition	src & SLJIT_MEM	659:10:19254:19268	1129311	0	True				
ANR	1129499	BitAndExpression	src & SLJIT_MEM		1129311	0		&			
ANR	1129500	Identifier	src		1129311	0					
ANR	1129501	Identifier	SLJIT_MEM		1129311	1					
ANR	1129502	CompoundStatement		30:27:614:614	1129311	1					
ANR	1129503	ExpressionStatement	compiler -> mode32 = 1	661:2:19330:19350	1129311	0	True				
ANR	1129504	AssignmentExpression	compiler -> mode32 = 1		1129311	0		=			
ANR	1129505	PtrMemberAccess	compiler -> mode32		1129311	0					
ANR	1129506	Identifier	compiler		1129311	0					
ANR	1129507	Identifier	mode32		1129311	1					
ANR	1129508	PrimaryExpression	1		1129311	1					
ANR	1129509	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , src , srcw )"	662:2:19354:19411	1129311	1	True				
ANR	1129510	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , src , srcw )"		1129311	0		=			
ANR	1129511	Identifier	inst		1129311	0					
ANR	1129512	CallExpression	"emit_x86_instruction ( compiler , 1 , 0 , 0 , src , srcw )"		1129311	1					
ANR	1129513	Callee	emit_x86_instruction		1129311	0					
ANR	1129514	Identifier	emit_x86_instruction		1129311	0					
ANR	1129515	ArgumentList	compiler		1129311	1					
ANR	1129516	Argument	compiler		1129311	0					
ANR	1129517	Identifier	compiler		1129311	0					
ANR	1129518	Argument	1		1129311	1					
ANR	1129519	PrimaryExpression	1		1129311	0					
ANR	1129520	Argument	0		1129311	2					
ANR	1129521	PrimaryExpression	0		1129311	0					
ANR	1129522	Argument	0		1129311	3					
ANR	1129523	PrimaryExpression	0		1129311	0					
ANR	1129524	Argument	src		1129311	4					
ANR	1129525	Identifier	src		1129311	0					
ANR	1129526	Argument	srcw		1129311	5					
ANR	1129527	Identifier	srcw		1129311	0					
ANR	1129528	ExpressionStatement	FAIL_IF ( ! inst )	663:2:19415:19429	1129311	2	True				
ANR	1129529	CallExpression	FAIL_IF ( ! inst )		1129311	0					
ANR	1129530	Callee	FAIL_IF		1129311	0					
ANR	1129531	Identifier	FAIL_IF		1129311	0					
ANR	1129532	ArgumentList	! inst		1129311	1					
ANR	1129533	Argument	! inst		1129311	0					
ANR	1129534	UnaryOperationExpression	! inst		1129311	0					
ANR	1129535	UnaryOperator	!		1129311	0					
ANR	1129536	Identifier	inst		1129311	1					
ANR	1129537	ExpressionStatement	* inst ++ = GROUP_FF	664:2:19433:19451	1129311	3	True				
ANR	1129538	AssignmentExpression	* inst ++ = GROUP_FF		1129311	0		=			
ANR	1129539	UnaryOperationExpression	* inst ++		1129311	0					
ANR	1129540	UnaryOperator	*		1129311	0					
ANR	1129541	PostIncDecOperationExpression	inst ++		1129311	1					
ANR	1129542	Identifier	inst		1129311	0					
ANR	1129543	IncDec	++		1129311	1					
ANR	1129544	Identifier	GROUP_FF		1129311	1					
ANR	1129545	ExpressionStatement	* inst |= PUSH_rm	665:2:19455:19471	1129311	4	True				
ANR	1129546	AssignmentExpression	* inst |= PUSH_rm		1129311	0		|=			
ANR	1129547	UnaryOperationExpression	* inst		1129311	0					
ANR	1129548	UnaryOperator	*		1129311	0					
ANR	1129549	Identifier	inst		1129311	1					
ANR	1129550	Identifier	PUSH_rm		1129311	1					
ANR	1129551	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"	667:2:19476:19521	1129311	5	True				
ANR	1129552	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1129311	0		=			
ANR	1129553	Identifier	inst		1129311	0					
ANR	1129554	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1129311	1					
ANR	1129555	CastTarget	sljit_ub *		1129311	0					
ANR	1129556	CallExpression	"ensure_buf ( compiler , 1 + 1 )"		1129311	1					
ANR	1129557	Callee	ensure_buf		1129311	0					
ANR	1129558	Identifier	ensure_buf		1129311	0					
ANR	1129559	ArgumentList	compiler		1129311	1					
ANR	1129560	Argument	compiler		1129311	0					
ANR	1129561	Identifier	compiler		1129311	0					
ANR	1129562	Argument	1 + 1		1129311	1					
ANR	1129563	AdditiveExpression	1 + 1		1129311	0		+			
ANR	1129564	PrimaryExpression	1		1129311	0					
ANR	1129565	PrimaryExpression	1		1129311	1					
ANR	1129566	ExpressionStatement	FAIL_IF ( ! inst )	668:2:19525:19539	1129311	6	True				
ANR	1129567	CallExpression	FAIL_IF ( ! inst )		1129311	0					
ANR	1129568	Callee	FAIL_IF		1129311	0					
ANR	1129569	Identifier	FAIL_IF		1129311	0					
ANR	1129570	ArgumentList	! inst		1129311	1					
ANR	1129571	Argument	! inst		1129311	0					
ANR	1129572	UnaryOperationExpression	! inst		1129311	0					
ANR	1129573	UnaryOperator	!		1129311	0					
ANR	1129574	Identifier	inst		1129311	1					
ANR	1129575	ExpressionStatement	INC_SIZE ( 1 )	669:2:19543:19554	1129311	7	True				
ANR	1129576	CallExpression	INC_SIZE ( 1 )		1129311	0					
ANR	1129577	Callee	INC_SIZE		1129311	0					
ANR	1129578	Identifier	INC_SIZE		1129311	0					
ANR	1129579	ArgumentList	1		1129311	1					
ANR	1129580	Argument	1		1129311	0					
ANR	1129581	PrimaryExpression	1		1129311	0					
ANR	1129582	ElseStatement	else		1129311	0					
ANR	1129583	CompoundStatement		42:6:908:908	1129311	0					
ANR	1129584	ExpressionStatement	SLJIT_ASSERT ( IS_HALFWORD ( srcw ) )	672:2:19569:19600	1129311	0	True				
ANR	1129585	CallExpression	SLJIT_ASSERT ( IS_HALFWORD ( srcw ) )		1129311	0					
ANR	1129586	Callee	SLJIT_ASSERT		1129311	0					
ANR	1129587	Identifier	SLJIT_ASSERT		1129311	0					
ANR	1129588	ArgumentList	IS_HALFWORD ( srcw )		1129311	1					
ANR	1129589	Argument	IS_HALFWORD ( srcw )		1129311	0					
ANR	1129590	CallExpression	IS_HALFWORD ( srcw )		1129311	0					
ANR	1129591	Callee	IS_HALFWORD		1129311	0					
ANR	1129592	Identifier	IS_HALFWORD		1129311	0					
ANR	1129593	ArgumentList	srcw		1129311	1					
ANR	1129594	Argument	srcw		1129311	0					
ANR	1129595	Identifier	srcw		1129311	0					
ANR	1129596	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 + 1 )"	674:2:19623:19672	1129311	1	True				
ANR	1129597	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 + 1 )"		1129311	0		=			
ANR	1129598	Identifier	inst		1129311	0					
ANR	1129599	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 5 + 1 )"		1129311	1					
ANR	1129600	CastTarget	sljit_ub *		1129311	0					
ANR	1129601	CallExpression	"ensure_buf ( compiler , 1 + 5 + 1 )"		1129311	1					
ANR	1129602	Callee	ensure_buf		1129311	0					
ANR	1129603	Identifier	ensure_buf		1129311	0					
ANR	1129604	ArgumentList	compiler		1129311	1					
ANR	1129605	Argument	compiler		1129311	0					
ANR	1129606	Identifier	compiler		1129311	0					
ANR	1129607	Argument	1 + 5 + 1		1129311	1					
ANR	1129608	AdditiveExpression	1 + 5 + 1		1129311	0		+			
ANR	1129609	PrimaryExpression	1		1129311	0					
ANR	1129610	AdditiveExpression	5 + 1		1129311	1		+			
ANR	1129611	PrimaryExpression	5		1129311	0					
ANR	1129612	PrimaryExpression	1		1129311	1					
ANR	1129613	ExpressionStatement	FAIL_IF ( ! inst )	675:2:19676:19690	1129311	2	True				
ANR	1129614	CallExpression	FAIL_IF ( ! inst )		1129311	0					
ANR	1129615	Callee	FAIL_IF		1129311	0					
ANR	1129616	Identifier	FAIL_IF		1129311	0					
ANR	1129617	ArgumentList	! inst		1129311	1					
ANR	1129618	Argument	! inst		1129311	0					
ANR	1129619	UnaryOperationExpression	! inst		1129311	0					
ANR	1129620	UnaryOperator	!		1129311	0					
ANR	1129621	Identifier	inst		1129311	1					
ANR	1129622	ExpressionStatement	INC_SIZE ( 5 + 1 )	677:2:19695:19710	1129311	3	True				
ANR	1129623	CallExpression	INC_SIZE ( 5 + 1 )		1129311	0					
ANR	1129624	Callee	INC_SIZE		1129311	0					
ANR	1129625	Identifier	INC_SIZE		1129311	0					
ANR	1129626	ArgumentList	5 + 1		1129311	1					
ANR	1129627	Argument	5 + 1		1129311	0					
ANR	1129628	AdditiveExpression	5 + 1		1129311	0		+			
ANR	1129629	PrimaryExpression	5		1129311	0					
ANR	1129630	PrimaryExpression	1		1129311	1					
ANR	1129631	ExpressionStatement	* inst ++ = PUSH_i32	678:2:19714:19732	1129311	4	True				
ANR	1129632	AssignmentExpression	* inst ++ = PUSH_i32		1129311	0		=			
ANR	1129633	UnaryOperationExpression	* inst ++		1129311	0					
ANR	1129634	UnaryOperator	*		1129311	0					
ANR	1129635	PostIncDecOperationExpression	inst ++		1129311	1					
ANR	1129636	Identifier	inst		1129311	0					
ANR	1129637	IncDec	++		1129311	1					
ANR	1129638	Identifier	PUSH_i32		1129311	1					
ANR	1129639	ExpressionStatement	* ( sljit_si * ) inst = srcw	679:2:19736:19759	1129311	5	True				
ANR	1129640	AssignmentExpression	* ( sljit_si * ) inst = srcw		1129311	0		=			
ANR	1129641	UnaryOperationExpression	* ( sljit_si * ) inst		1129311	0					
ANR	1129642	UnaryOperator	*		1129311	0					
ANR	1129643	CastExpression	( sljit_si * ) inst		1129311	1					
ANR	1129644	CastTarget	sljit_si *		1129311	0					
ANR	1129645	Identifier	inst		1129311	1					
ANR	1129646	Identifier	srcw		1129311	1					
ANR	1129647	ExpressionStatement	inst += sizeof ( sljit_si )	680:2:19763:19787	1129311	6	True				
ANR	1129648	AssignmentExpression	inst += sizeof ( sljit_si )		1129311	0		+=			
ANR	1129649	Identifier	inst		1129311	0					
ANR	1129650	SizeofExpression	sizeof ( sljit_si )		1129311	1					
ANR	1129651	Sizeof	sizeof		1129311	0					
ANR	1129652	SizeofOperand	sljit_si		1129311	1					
ANR	1129653	ExpressionStatement	RET ( )	683:1:19794:19799	1129311	6	True				
ANR	1129654	CallExpression	RET ( )		1129311	0					
ANR	1129655	Callee	RET		1129311	0					
ANR	1129656	Identifier	RET		1129311	0					
ANR	1129657	ArgumentList			1129311	1					
ANR	1129658	ReturnStatement	return SLJIT_SUCCESS ;	684:1:19802:19822	1129311	7	True				
ANR	1129659	Identifier	SLJIT_SUCCESS		1129311	0					
ANR	1129660	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1129311	1					
ANR	1129661	Identifier	sljit_emit_fast_return		1129311	2					
ANR	1129662	ParameterList	"struct sljit_compiler * compiler , sljit_si src , sljit_sw srcw"		1129311	3					
ANR	1129663	Parameter	struct sljit_compiler * compiler	629:57:18594:18624	1129311	0	True				
ANR	1129664	ParameterType	struct sljit_compiler *		1129311	0					
ANR	1129665	Identifier	compiler		1129311	1					
ANR	1129666	Parameter	sljit_si src	629:90:18627:18638	1129311	1	True				
ANR	1129667	ParameterType	sljit_si		1129311	0					
ANR	1129668	Identifier	src		1129311	1					
ANR	1129669	Parameter	sljit_sw srcw	629:104:18641:18653	1129311	2	True				
ANR	1129670	ParameterType	sljit_sw		1129311	0					
ANR	1129671	Identifier	srcw		1129311	1					
ANR	1129672	CFGEntryNode	ENTRY		1129311		True				
ANR	1129673	CFGExitNode	EXIT		1129311		True				
ANR	1129674	Symbol	emit_load_imm64		1129311						
ANR	1129675	Symbol	TMP_REG1		1129311						
ANR	1129676	Symbol	SLJIT_MEM		1129311						
ANR	1129677	Symbol	* inst ++		1129311						
ANR	1129678	Symbol	reg_map		1129311						
ANR	1129679	Symbol	* compiler		1129311						
ANR	1129680	Symbol	* src		1129311						
ANR	1129681	Symbol	SLJIT_IMM		1129311						
ANR	1129682	Symbol	* reg_lmap		1129311						
ANR	1129683	Symbol	IS_HALFWORD		1129311						
ANR	1129684	Symbol	compiler		1129311						
ANR	1129685	Symbol	emit_x86_instruction		1129311						
ANR	1129686	Symbol	FAST_IS_REG		1129311						
ANR	1129687	Symbol	* inst		1129311						
ANR	1129688	Symbol	src		1129311						
ANR	1129689	Symbol	srcw		1129311						
ANR	1129690	Symbol	NOT_HALFWORD		1129311						
ANR	1129691	Symbol	SLJIT_SUCCESS		1129311						
ANR	1129692	Symbol	* reg_map		1129311						
ANR	1129693	Symbol	REX_B		1129311						
ANR	1129694	Symbol	reg_lmap		1129311						
ANR	1129695	Symbol	PUSH_rm		1129311						
ANR	1129696	Symbol	check_sljit_emit_fast_return		1129311						
ANR	1129697	Symbol	GROUP_FF		1129311						
ANR	1129698	Symbol	PUSH_i32		1129311						
ANR	1129699	Symbol	inst		1129311						
ANR	1129700	Symbol	ensure_buf		1129311						
ANR	1129701	Symbol	compiler -> mode32		1129311						
ANR	1129702	Symbol	* ( sljit_si * ) inst		1129311						
ANR	1129703	Function	emit_mov_int	692:0:20057:21442							
ANR	1129704	FunctionDef	"emit_mov_int (struct sljit_compiler * compiler , sljit_si sign , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw)"		1129703	0					
ANR	1129705	CompoundStatement		695:0:20194:21442	1129703	0					
ANR	1129706	IdentifierDeclStatement	sljit_ub * inst ;	696:1:20197:20211	1129703	0	True				
ANR	1129707	IdentifierDecl	* inst		1129703	0					
ANR	1129708	IdentifierDeclType	sljit_ub *		1129703	0					
ANR	1129709	Identifier	inst		1129703	1					
ANR	1129710	IdentifierDeclStatement	sljit_si dst_r ;	697:1:20214:20228	1129703	1	True				
ANR	1129711	IdentifierDecl	dst_r		1129703	0					
ANR	1129712	IdentifierDeclType	sljit_si		1129703	0					
ANR	1129713	Identifier	dst_r		1129703	1					
ANR	1129714	ExpressionStatement	compiler -> mode32 = 0	699:1:20232:20252	1129703	2	True				
ANR	1129715	AssignmentExpression	compiler -> mode32 = 0		1129703	0		=			
ANR	1129716	PtrMemberAccess	compiler -> mode32		1129703	0					
ANR	1129717	Identifier	compiler		1129703	0					
ANR	1129718	Identifier	mode32		1129703	1					
ANR	1129719	PrimaryExpression	0		1129703	1					
ANR	1129720	IfStatement	if ( dst == SLJIT_UNUSED && ! ( src & SLJIT_MEM ) )		1129703	3					
ANR	1129721	Condition	dst == SLJIT_UNUSED && ! ( src & SLJIT_MEM )	701:5:20260:20300	1129703	0	True				
ANR	1129722	AndExpression	dst == SLJIT_UNUSED && ! ( src & SLJIT_MEM )		1129703	0		&&			
ANR	1129723	EqualityExpression	dst == SLJIT_UNUSED		1129703	0		==			
ANR	1129724	Identifier	dst		1129703	0					
ANR	1129725	Identifier	SLJIT_UNUSED		1129703	1					
ANR	1129726	UnaryOperationExpression	! ( src & SLJIT_MEM )		1129703	1					
ANR	1129727	UnaryOperator	!		1129703	0					
ANR	1129728	BitAndExpression	src & SLJIT_MEM		1129703	1		&			
ANR	1129729	Identifier	src		1129703	0					
ANR	1129730	Identifier	SLJIT_MEM		1129703	1					
ANR	1129731	ReturnStatement	return SLJIT_SUCCESS ;	702:2:20305:20325	1129703	1	True				
ANR	1129732	Identifier	SLJIT_SUCCESS		1129703	0					
ANR	1129733	IfStatement	if ( src & SLJIT_IMM )		1129703	4					
ANR	1129734	Condition	src & SLJIT_IMM	704:5:20358:20372	1129703	0	True				
ANR	1129735	BitAndExpression	src & SLJIT_IMM		1129703	0		&			
ANR	1129736	Identifier	src		1129703	0					
ANR	1129737	Identifier	SLJIT_IMM		1129703	1					
ANR	1129738	CompoundStatement		10:22:180:180	1129703	1					
ANR	1129739	IfStatement	if ( FAST_IS_REG ( dst ) )		1129703	0					
ANR	1129740	Condition	FAST_IS_REG ( dst )	705:6:20383:20398	1129703	0	True				
ANR	1129741	CallExpression	FAST_IS_REG ( dst )		1129703	0					
ANR	1129742	Callee	FAST_IS_REG		1129703	0					
ANR	1129743	Identifier	FAST_IS_REG		1129703	0					
ANR	1129744	ArgumentList	dst		1129703	1					
ANR	1129745	Argument	dst		1129703	0					
ANR	1129746	Identifier	dst		1129703	0					
ANR	1129747	CompoundStatement		11:24:206:206	1129703	1					
ANR	1129748	IfStatement	if ( sign || ( ( sljit_uw ) srcw <= 0x7fffffff ) )		1129703	0					
ANR	1129749	Condition	sign || ( ( sljit_uw ) srcw <= 0x7fffffff )	706:7:20410:20447	1129703	0	True				
ANR	1129750	OrExpression	sign || ( ( sljit_uw ) srcw <= 0x7fffffff )		1129703	0		||			
ANR	1129751	Identifier	sign		1129703	0					
ANR	1129752	RelationalExpression	( sljit_uw ) srcw <= 0x7fffffff		1129703	1		<=			
ANR	1129753	CastExpression	( sljit_uw ) srcw		1129703	0					
ANR	1129754	CastTarget	sljit_uw		1129703	0					
ANR	1129755	Identifier	srcw		1129703	1					
ANR	1129756	PrimaryExpression	0x7fffffff		1129703	1					
ANR	1129757	CompoundStatement		12:47:255:255	1129703	1					
ANR	1129758	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"	707:4:20456:20544	1129703	0	True				
ANR	1129759	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"		1129703	0		=			
ANR	1129760	Identifier	inst		1129703	0					
ANR	1129761	CallExpression	"emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"		1129703	1					
ANR	1129762	Callee	emit_x86_instruction		1129703	0					
ANR	1129763	Identifier	emit_x86_instruction		1129703	0					
ANR	1129764	ArgumentList	compiler		1129703	1					
ANR	1129765	Argument	compiler		1129703	0					
ANR	1129766	Identifier	compiler		1129703	0					
ANR	1129767	Argument	1		1129703	1					
ANR	1129768	PrimaryExpression	1		1129703	0					
ANR	1129769	Argument	SLJIT_IMM		1129703	2					
ANR	1129770	Identifier	SLJIT_IMM		1129703	0					
ANR	1129771	Argument	( sljit_sw ) ( sljit_si ) srcw		1129703	3					
ANR	1129772	CastExpression	( sljit_sw ) ( sljit_si ) srcw		1129703	0					
ANR	1129773	CastTarget	sljit_sw		1129703	0					
ANR	1129774	CastExpression	( sljit_si ) srcw		1129703	1					
ANR	1129775	CastTarget	sljit_si		1129703	0					
ANR	1129776	Identifier	srcw		1129703	1					
ANR	1129777	Argument	dst		1129703	4					
ANR	1129778	Identifier	dst		1129703	0					
ANR	1129779	Argument	dstw		1129703	5					
ANR	1129780	Identifier	dstw		1129703	0					
ANR	1129781	ExpressionStatement	FAIL_IF ( ! inst )	708:4:20550:20564	1129703	1	True				
ANR	1129782	CallExpression	FAIL_IF ( ! inst )		1129703	0					
ANR	1129783	Callee	FAIL_IF		1129703	0					
ANR	1129784	Identifier	FAIL_IF		1129703	0					
ANR	1129785	ArgumentList	! inst		1129703	1					
ANR	1129786	Argument	! inst		1129703	0					
ANR	1129787	UnaryOperationExpression	! inst		1129703	0					
ANR	1129788	UnaryOperator	!		1129703	0					
ANR	1129789	Identifier	inst		1129703	1					
ANR	1129790	ExpressionStatement	* inst = MOV_rm_i32	709:4:20570:20588	1129703	2	True				
ANR	1129791	AssignmentExpression	* inst = MOV_rm_i32		1129703	0		=			
ANR	1129792	UnaryOperationExpression	* inst		1129703	0					
ANR	1129793	UnaryOperator	*		1129703	0					
ANR	1129794	Identifier	inst		1129703	1					
ANR	1129795	Identifier	MOV_rm_i32		1129703	1					
ANR	1129796	ReturnStatement	return SLJIT_SUCCESS ;	710:4:20594:20614	1129703	3	True				
ANR	1129797	Identifier	SLJIT_SUCCESS		1129703	0					
ANR	1129798	ReturnStatement	"return emit_load_imm64 ( compiler , dst , srcw ) ;"	712:3:20624:20667	1129703	1	True				
ANR	1129799	CallExpression	"emit_load_imm64 ( compiler , dst , srcw )"		1129703	0					
ANR	1129800	Callee	emit_load_imm64		1129703	0					
ANR	1129801	Identifier	emit_load_imm64		1129703	0					
ANR	1129802	ArgumentList	compiler		1129703	1					
ANR	1129803	Argument	compiler		1129703	0					
ANR	1129804	Identifier	compiler		1129703	0					
ANR	1129805	Argument	dst		1129703	1					
ANR	1129806	Identifier	dst		1129703	0					
ANR	1129807	Argument	srcw		1129703	2					
ANR	1129808	Identifier	srcw		1129703	0					
ANR	1129809	ExpressionStatement	compiler -> mode32 = 1	714:2:20675:20695	1129703	1	True				
ANR	1129810	AssignmentExpression	compiler -> mode32 = 1		1129703	0		=			
ANR	1129811	PtrMemberAccess	compiler -> mode32		1129703	0					
ANR	1129812	Identifier	compiler		1129703	0					
ANR	1129813	Identifier	mode32		1129703	1					
ANR	1129814	PrimaryExpression	1		1129703	1					
ANR	1129815	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"	715:2:20699:20787	1129703	2	True				
ANR	1129816	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"		1129703	0		=			
ANR	1129817	Identifier	inst		1129703	0					
ANR	1129818	CallExpression	"emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"		1129703	1					
ANR	1129819	Callee	emit_x86_instruction		1129703	0					
ANR	1129820	Identifier	emit_x86_instruction		1129703	0					
ANR	1129821	ArgumentList	compiler		1129703	1					
ANR	1129822	Argument	compiler		1129703	0					
ANR	1129823	Identifier	compiler		1129703	0					
ANR	1129824	Argument	1		1129703	1					
ANR	1129825	PrimaryExpression	1		1129703	0					
ANR	1129826	Argument	SLJIT_IMM		1129703	2					
ANR	1129827	Identifier	SLJIT_IMM		1129703	0					
ANR	1129828	Argument	( sljit_sw ) ( sljit_si ) srcw		1129703	3					
ANR	1129829	CastExpression	( sljit_sw ) ( sljit_si ) srcw		1129703	0					
ANR	1129830	CastTarget	sljit_sw		1129703	0					
ANR	1129831	CastExpression	( sljit_si ) srcw		1129703	1					
ANR	1129832	CastTarget	sljit_si		1129703	0					
ANR	1129833	Identifier	srcw		1129703	1					
ANR	1129834	Argument	dst		1129703	4					
ANR	1129835	Identifier	dst		1129703	0					
ANR	1129836	Argument	dstw		1129703	5					
ANR	1129837	Identifier	dstw		1129703	0					
ANR	1129838	ExpressionStatement	FAIL_IF ( ! inst )	716:2:20791:20805	1129703	3	True				
ANR	1129839	CallExpression	FAIL_IF ( ! inst )		1129703	0					
ANR	1129840	Callee	FAIL_IF		1129703	0					
ANR	1129841	Identifier	FAIL_IF		1129703	0					
ANR	1129842	ArgumentList	! inst		1129703	1					
ANR	1129843	Argument	! inst		1129703	0					
ANR	1129844	UnaryOperationExpression	! inst		1129703	0					
ANR	1129845	UnaryOperator	!		1129703	0					
ANR	1129846	Identifier	inst		1129703	1					
ANR	1129847	ExpressionStatement	* inst = MOV_rm_i32	717:2:20809:20827	1129703	4	True				
ANR	1129848	AssignmentExpression	* inst = MOV_rm_i32		1129703	0		=			
ANR	1129849	UnaryOperationExpression	* inst		1129703	0					
ANR	1129850	UnaryOperator	*		1129703	0					
ANR	1129851	Identifier	inst		1129703	1					
ANR	1129852	Identifier	MOV_rm_i32		1129703	1					
ANR	1129853	ExpressionStatement	compiler -> mode32 = 0	718:2:20831:20851	1129703	5	True				
ANR	1129854	AssignmentExpression	compiler -> mode32 = 0		1129703	0		=			
ANR	1129855	PtrMemberAccess	compiler -> mode32		1129703	0					
ANR	1129856	Identifier	compiler		1129703	0					
ANR	1129857	Identifier	mode32		1129703	1					
ANR	1129858	PrimaryExpression	0		1129703	1					
ANR	1129859	ReturnStatement	return SLJIT_SUCCESS ;	719:2:20855:20875	1129703	6	True				
ANR	1129860	Identifier	SLJIT_SUCCESS		1129703	0					
ANR	1129861	ExpressionStatement	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_REG1	722:1:20882:20923	1129703	5	True				
ANR	1129862	AssignmentExpression	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_REG1		1129703	0		=			
ANR	1129863	Identifier	dst_r		1129703	0					
ANR	1129864	ConditionalExpression	FAST_IS_REG ( dst ) ? dst : TMP_REG1		1129703	1					
ANR	1129865	Condition	FAST_IS_REG ( dst )		1129703	0					
ANR	1129866	CallExpression	FAST_IS_REG ( dst )		1129703	0					
ANR	1129867	Callee	FAST_IS_REG		1129703	0					
ANR	1129868	Identifier	FAST_IS_REG		1129703	0					
ANR	1129869	ArgumentList	dst		1129703	1					
ANR	1129870	Argument	dst		1129703	0					
ANR	1129871	Identifier	dst		1129703	0					
ANR	1129872	Identifier	dst		1129703	1					
ANR	1129873	Identifier	TMP_REG1		1129703	2					
ANR	1129874	IfStatement	if ( ( dst & SLJIT_MEM ) && FAST_IS_REG ( src ) )		1129703	6					
ANR	1129875	Condition	( dst & SLJIT_MEM ) && FAST_IS_REG ( src )	724:5:20931:20967	1129703	0	True				
ANR	1129876	AndExpression	( dst & SLJIT_MEM ) && FAST_IS_REG ( src )		1129703	0		&&			
ANR	1129877	BitAndExpression	dst & SLJIT_MEM		1129703	0		&			
ANR	1129878	Identifier	dst		1129703	0					
ANR	1129879	Identifier	SLJIT_MEM		1129703	1					
ANR	1129880	CallExpression	FAST_IS_REG ( src )		1129703	1					
ANR	1129881	Callee	FAST_IS_REG		1129703	0					
ANR	1129882	Identifier	FAST_IS_REG		1129703	0					
ANR	1129883	ArgumentList	src		1129703	1					
ANR	1129884	Argument	src		1129703	0					
ANR	1129885	Identifier	src		1129703	0					
ANR	1129886	ExpressionStatement	dst_r = src	725:2:20972:20983	1129703	1	True				
ANR	1129887	AssignmentExpression	dst_r = src		1129703	0		=			
ANR	1129888	Identifier	dst_r		1129703	0					
ANR	1129889	Identifier	src		1129703	1					
ANR	1129890	ElseStatement	else		1129703	0					
ANR	1129891	CompoundStatement		32:6:796:796	1129703	0					
ANR	1129892	IfStatement	if ( sign )		1129703	0					
ANR	1129893	Condition	sign	727:6:20999:21002	1129703	0	True				
ANR	1129894	Identifier	sign		1129703	0					
ANR	1129895	CompoundStatement		33:12:810:810	1129703	1					
ANR	1129896	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , dst_r , 0 , src , srcw )"	728:3:21010:21071	1129703	0	True				
ANR	1129897	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , dst_r , 0 , src , srcw )"		1129703	0		=			
ANR	1129898	Identifier	inst		1129703	0					
ANR	1129899	CallExpression	"emit_x86_instruction ( compiler , 1 , dst_r , 0 , src , srcw )"		1129703	1					
ANR	1129900	Callee	emit_x86_instruction		1129703	0					
ANR	1129901	Identifier	emit_x86_instruction		1129703	0					
ANR	1129902	ArgumentList	compiler		1129703	1					
ANR	1129903	Argument	compiler		1129703	0					
ANR	1129904	Identifier	compiler		1129703	0					
ANR	1129905	Argument	1		1129703	1					
ANR	1129906	PrimaryExpression	1		1129703	0					
ANR	1129907	Argument	dst_r		1129703	2					
ANR	1129908	Identifier	dst_r		1129703	0					
ANR	1129909	Argument	0		1129703	3					
ANR	1129910	PrimaryExpression	0		1129703	0					
ANR	1129911	Argument	src		1129703	4					
ANR	1129912	Identifier	src		1129703	0					
ANR	1129913	Argument	srcw		1129703	5					
ANR	1129914	Identifier	srcw		1129703	0					
ANR	1129915	ExpressionStatement	FAIL_IF ( ! inst )	729:3:21076:21090	1129703	1	True				
ANR	1129916	CallExpression	FAIL_IF ( ! inst )		1129703	0					
ANR	1129917	Callee	FAIL_IF		1129703	0					
ANR	1129918	Identifier	FAIL_IF		1129703	0					
ANR	1129919	ArgumentList	! inst		1129703	1					
ANR	1129920	Argument	! inst		1129703	0					
ANR	1129921	UnaryOperationExpression	! inst		1129703	0					
ANR	1129922	UnaryOperator	!		1129703	0					
ANR	1129923	Identifier	inst		1129703	1					
ANR	1129924	ExpressionStatement	* inst ++ = MOVSXD_r_rm	730:3:21095:21116	1129703	2	True				
ANR	1129925	AssignmentExpression	* inst ++ = MOVSXD_r_rm		1129703	0		=			
ANR	1129926	UnaryOperationExpression	* inst ++		1129703	0					
ANR	1129927	UnaryOperator	*		1129703	0					
ANR	1129928	PostIncDecOperationExpression	inst ++		1129703	1					
ANR	1129929	Identifier	inst		1129703	0					
ANR	1129930	IncDec	++		1129703	1					
ANR	1129931	Identifier	MOVSXD_r_rm		1129703	1					
ANR	1129932	ElseStatement	else		1129703	0					
ANR	1129933	CompoundStatement		37:9:932:932	1129703	0					
ANR	1129934	ExpressionStatement	compiler -> mode32 = 1	732:3:21132:21152	1129703	0	True				
ANR	1129935	AssignmentExpression	compiler -> mode32 = 1		1129703	0		=			
ANR	1129936	PtrMemberAccess	compiler -> mode32		1129703	0					
ANR	1129937	Identifier	compiler		1129703	0					
ANR	1129938	Identifier	mode32		1129703	1					
ANR	1129939	PrimaryExpression	1		1129703	1					
ANR	1129940	ExpressionStatement	"FAIL_IF ( emit_mov ( compiler , dst_r , 0 , src , srcw ) )"	733:3:21157:21205	1129703	1	True				
ANR	1129941	CallExpression	"FAIL_IF ( emit_mov ( compiler , dst_r , 0 , src , srcw ) )"		1129703	0					
ANR	1129942	Callee	FAIL_IF		1129703	0					
ANR	1129943	Identifier	FAIL_IF		1129703	0					
ANR	1129944	ArgumentList	"emit_mov ( compiler , dst_r , 0 , src , srcw )"		1129703	1					
ANR	1129945	Argument	"emit_mov ( compiler , dst_r , 0 , src , srcw )"		1129703	0					
ANR	1129946	CallExpression	"emit_mov ( compiler , dst_r , 0 , src , srcw )"		1129703	0					
ANR	1129947	Callee	emit_mov		1129703	0					
ANR	1129948	Identifier	emit_mov		1129703	0					
ANR	1129949	ArgumentList	compiler		1129703	1					
ANR	1129950	Argument	compiler		1129703	0					
ANR	1129951	Identifier	compiler		1129703	0					
ANR	1129952	Argument	dst_r		1129703	1					
ANR	1129953	Identifier	dst_r		1129703	0					
ANR	1129954	Argument	0		1129703	2					
ANR	1129955	PrimaryExpression	0		1129703	0					
ANR	1129956	Argument	src		1129703	3					
ANR	1129957	Identifier	src		1129703	0					
ANR	1129958	Argument	srcw		1129703	4					
ANR	1129959	Identifier	srcw		1129703	0					
ANR	1129960	ExpressionStatement	compiler -> mode32 = 0	734:3:21210:21230	1129703	2	True				
ANR	1129961	AssignmentExpression	compiler -> mode32 = 0		1129703	0		=			
ANR	1129962	PtrMemberAccess	compiler -> mode32		1129703	0					
ANR	1129963	Identifier	compiler		1129703	0					
ANR	1129964	Identifier	mode32		1129703	1					
ANR	1129965	PrimaryExpression	0		1129703	1					
ANR	1129966	IfStatement	if ( dst & SLJIT_MEM )		1129703	7					
ANR	1129967	Condition	dst & SLJIT_MEM	738:5:21245:21259	1129703	0	True				
ANR	1129968	BitAndExpression	dst & SLJIT_MEM		1129703	0		&			
ANR	1129969	Identifier	dst		1129703	0					
ANR	1129970	Identifier	SLJIT_MEM		1129703	1					
ANR	1129971	CompoundStatement		44:22:1067:1067	1129703	1					
ANR	1129972	ExpressionStatement	compiler -> mode32 = 1	739:2:21266:21286	1129703	0	True				
ANR	1129973	AssignmentExpression	compiler -> mode32 = 1		1129703	0		=			
ANR	1129974	PtrMemberAccess	compiler -> mode32		1129703	0					
ANR	1129975	Identifier	compiler		1129703	0					
ANR	1129976	Identifier	mode32		1129703	1					
ANR	1129977	PrimaryExpression	1		1129703	1					
ANR	1129978	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , dst_r , 0 , dst , dstw )"	740:2:21290:21351	1129703	1	True				
ANR	1129979	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , dst_r , 0 , dst , dstw )"		1129703	0		=			
ANR	1129980	Identifier	inst		1129703	0					
ANR	1129981	CallExpression	"emit_x86_instruction ( compiler , 1 , dst_r , 0 , dst , dstw )"		1129703	1					
ANR	1129982	Callee	emit_x86_instruction		1129703	0					
ANR	1129983	Identifier	emit_x86_instruction		1129703	0					
ANR	1129984	ArgumentList	compiler		1129703	1					
ANR	1129985	Argument	compiler		1129703	0					
ANR	1129986	Identifier	compiler		1129703	0					
ANR	1129987	Argument	1		1129703	1					
ANR	1129988	PrimaryExpression	1		1129703	0					
ANR	1129989	Argument	dst_r		1129703	2					
ANR	1129990	Identifier	dst_r		1129703	0					
ANR	1129991	Argument	0		1129703	3					
ANR	1129992	PrimaryExpression	0		1129703	0					
ANR	1129993	Argument	dst		1129703	4					
ANR	1129994	Identifier	dst		1129703	0					
ANR	1129995	Argument	dstw		1129703	5					
ANR	1129996	Identifier	dstw		1129703	0					
ANR	1129997	ExpressionStatement	FAIL_IF ( ! inst )	741:2:21355:21369	1129703	2	True				
ANR	1129998	CallExpression	FAIL_IF ( ! inst )		1129703	0					
ANR	1129999	Callee	FAIL_IF		1129703	0					
ANR	1130000	Identifier	FAIL_IF		1129703	0					
ANR	1130001	ArgumentList	! inst		1129703	1					
ANR	1130002	Argument	! inst		1129703	0					
ANR	1130003	UnaryOperationExpression	! inst		1129703	0					
ANR	1130004	UnaryOperator	!		1129703	0					
ANR	1130005	Identifier	inst		1129703	1					
ANR	1130006	ExpressionStatement	* inst = MOV_rm_r	742:2:21373:21389	1129703	3	True				
ANR	1130007	AssignmentExpression	* inst = MOV_rm_r		1129703	0		=			
ANR	1130008	UnaryOperationExpression	* inst		1129703	0					
ANR	1130009	UnaryOperator	*		1129703	0					
ANR	1130010	Identifier	inst		1129703	1					
ANR	1130011	Identifier	MOV_rm_r		1129703	1					
ANR	1130012	ExpressionStatement	compiler -> mode32 = 0	743:2:21393:21413	1129703	4	True				
ANR	1130013	AssignmentExpression	compiler -> mode32 = 0		1129703	0		=			
ANR	1130014	PtrMemberAccess	compiler -> mode32		1129703	0					
ANR	1130015	Identifier	compiler		1129703	0					
ANR	1130016	Identifier	mode32		1129703	1					
ANR	1130017	PrimaryExpression	0		1129703	1					
ANR	1130018	ReturnStatement	return SLJIT_SUCCESS ;	746:1:21420:21440	1129703	8	True				
ANR	1130019	Identifier	SLJIT_SUCCESS		1129703	0					
ANR	1130020	ReturnType	static sljit_si		1129703	1					
ANR	1130021	Identifier	emit_mov_int		1129703	2					
ANR	1130022	ParameterList	"struct sljit_compiler * compiler , sljit_si sign , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw"		1129703	3					
ANR	1130023	Parameter	struct sljit_compiler * compiler	692:29:20086:20116	1129703	0	True				
ANR	1130024	ParameterType	struct sljit_compiler *		1129703	0					
ANR	1130025	Identifier	compiler		1129703	1					
ANR	1130026	Parameter	sljit_si sign	692:62:20119:20131	1129703	1	True				
ANR	1130027	ParameterType	sljit_si		1129703	0					
ANR	1130028	Identifier	sign		1129703	1					
ANR	1130029	Parameter	sljit_si dst	693:1:20135:20146	1129703	2	True				
ANR	1130030	ParameterType	sljit_si		1129703	0					
ANR	1130031	Identifier	dst		1129703	1					
ANR	1130032	Parameter	sljit_sw dstw	693:15:20149:20161	1129703	3	True				
ANR	1130033	ParameterType	sljit_sw		1129703	0					
ANR	1130034	Identifier	dstw		1129703	1					
ANR	1130035	Parameter	sljit_si src	694:1:20165:20176	1129703	4	True				
ANR	1130036	ParameterType	sljit_si		1129703	0					
ANR	1130037	Identifier	src		1129703	1					
ANR	1130038	Parameter	sljit_sw srcw	694:15:20179:20191	1129703	5	True				
ANR	1130039	ParameterType	sljit_sw		1129703	0					
ANR	1130040	Identifier	srcw		1129703	1					
ANR	1130041	CFGEntryNode	ENTRY		1129703		True				
ANR	1130042	CFGExitNode	EXIT		1129703		True				
ANR	1130043	Symbol	emit_load_imm64		1129703						
ANR	1130044	Symbol	emit_x86_instruction		1129703						
ANR	1130045	Symbol	TMP_REG1		1129703						
ANR	1130046	Symbol	FAST_IS_REG		1129703						
ANR	1130047	Symbol	* inst		1129703						
ANR	1130048	Symbol	dst		1129703						
ANR	1130049	Symbol	src		1129703						
ANR	1130050	Symbol	srcw		1129703						
ANR	1130051	Symbol	SLJIT_MEM		1129703						
ANR	1130052	Symbol	sign		1129703						
ANR	1130053	Symbol	* inst ++		1129703						
ANR	1130054	Symbol	SLJIT_SUCCESS		1129703						
ANR	1130055	Symbol	* compiler		1129703						
ANR	1130056	Symbol	MOVSXD_r_rm		1129703						
ANR	1130057	Symbol	MOV_rm_r		1129703						
ANR	1130058	Symbol	dst_r		1129703						
ANR	1130059	Symbol	MOV_rm_i32		1129703						
ANR	1130060	Symbol	SLJIT_IMM		1129703						
ANR	1130061	Symbol	emit_mov		1129703						
ANR	1130062	Symbol	SLJIT_UNUSED		1129703						
ANR	1130063	Symbol	inst		1129703						
ANR	1130064	Symbol	compiler -> mode32		1129703						
ANR	1130065	Symbol	compiler		1129703						
ANR	1130066	Symbol	dstw		1129703						
