command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	680439	File	data/converged/CVE-2017-11142_php-src/ext_mbstring_oniguruma_enc_iso8859_9.c								
ANR	680440	DeclStmt									
ANR	680441	Decl							const UChar	const UChar [ 256 ]	EncISO_8859_9_ToLowerCaseTable
ANR	680442	DeclStmt									
ANR	680443	Decl							const unsigned short	const unsigned short [ 256 ]	EncISO_8859_9_CtypeTable
ANR	680444	DeclStmt									
ANR	680445	Decl							const UChar	const UChar *	p
ANR	680446	Function	is_mbc_ambiguous	125:0:6514:7055							
ANR	680447	FunctionDef	"is_mbc_ambiguous (OnigCaseFoldType flag , const UChar * * pp , const UChar * end)"		680446	0					
ANR	680448	CompoundStatement		127:0:6601:7055	680446	0					
ANR	680449	IdentifierDeclStatement	int v ;	128:2:6605:6610	680446	0	True				
ANR	680450	IdentifierDecl	v		680446	0					
ANR	680451	IdentifierDeclType	int		680446	0					
ANR	680452	Identifier	v		680446	1					
ANR	680453	IdentifierDeclStatement	const UChar * p = * pp ;	129:2:6614:6634	680446	1	True				
ANR	680454	IdentifierDecl	* p = * pp		680446	0					
ANR	680455	IdentifierDeclType	const UChar *		680446	0					
ANR	680456	Identifier	p		680446	1					
ANR	680457	AssignmentExpression	* p = * pp		680446	2		=			
ANR	680458	Identifier	p		680446	0					
ANR	680459	UnaryOperationExpression	* pp		680446	1					
ANR	680460	UnaryOperator	*		680446	0					
ANR	680461	Identifier	pp		680446	1					
ANR	680462	IfStatement	if ( * p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0 )		680446	2					
ANR	680463	Condition	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0	131:6:6643:6707	680446	0	True				
ANR	680464	AndExpression	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		680446	0		&&			
ANR	680465	EqualityExpression	* p == 0xdf		680446	0		==			
ANR	680466	UnaryOperationExpression	* p		680446	0					
ANR	680467	UnaryOperator	*		680446	0					
ANR	680468	Identifier	p		680446	1					
ANR	680469	PrimaryExpression	0xdf		680446	1					
ANR	680470	EqualityExpression	( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		680446	1		!=			
ANR	680471	BitAndExpression	flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		680446	0		&			
ANR	680472	Identifier	flag		680446	0					
ANR	680473	Identifier	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		680446	1					
ANR	680474	PrimaryExpression	0		680446	1					
ANR	680475	CompoundStatement		5:73:108:108	680446	1					
ANR	680476	ExpressionStatement	( * pp ) ++	132:4:6716:6723	680446	0	True				
ANR	680477	PostIncDecOperationExpression	( * pp ) ++		680446	0					
ANR	680478	UnaryOperationExpression	* pp		680446	0					
ANR	680479	UnaryOperator	*		680446	0					
ANR	680480	Identifier	pp		680446	1					
ANR	680481	IncDec	++		680446	1					
ANR	680482	ReturnStatement	return TRUE ;	133:4:6729:6740	680446	1	True				
ANR	680483	Identifier	TRUE		680446	0					
ANR	680484	ExpressionStatement	( * pp ) ++	136:2:6749:6756	680446	3	True				
ANR	680485	PostIncDecOperationExpression	( * pp ) ++		680446	0					
ANR	680486	UnaryOperationExpression	* pp		680446	0					
ANR	680487	UnaryOperator	*		680446	0					
ANR	680488	Identifier	pp		680446	1					
ANR	680489	IncDec	++		680446	1					
ANR	680490	ExpressionStatement	v = ( EncISO_8859_9_CtypeTable [ * p ] & ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )	137:2:6760:6832	680446	4	True				
ANR	680491	AssignmentExpression	v = ( EncISO_8859_9_CtypeTable [ * p ] & ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )		680446	0		=			
ANR	680492	Identifier	v		680446	0					
ANR	680493	BitAndExpression	EncISO_8859_9_CtypeTable [ * p ] & ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER )		680446	1		&			
ANR	680494	ArrayIndexing	EncISO_8859_9_CtypeTable [ * p ]		680446	0					
ANR	680495	Identifier	EncISO_8859_9_CtypeTable		680446	0					
ANR	680496	UnaryOperationExpression	* p		680446	1					
ANR	680497	UnaryOperator	*		680446	0					
ANR	680498	Identifier	p		680446	1					
ANR	680499	InclusiveOrExpression	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		680446	1		|			
ANR	680500	Identifier	BIT_CTYPE_UPPER		680446	0					
ANR	680501	Identifier	BIT_CTYPE_LOWER		680446	1					
ANR	680502	IfStatement	if ( ( v | BIT_CTYPE_LOWER ) != 0 )		680446	5					
ANR	680503	Condition	( v | BIT_CTYPE_LOWER ) != 0	138:6:6840:6865	680446	0	True				
ANR	680504	EqualityExpression	( v | BIT_CTYPE_LOWER ) != 0		680446	0		!=			
ANR	680505	InclusiveOrExpression	v | BIT_CTYPE_LOWER		680446	0		|			
ANR	680506	Identifier	v		680446	0					
ANR	680507	Identifier	BIT_CTYPE_LOWER		680446	1					
ANR	680508	PrimaryExpression	0		680446	1					
ANR	680509	CompoundStatement		12:34:266:266	680446	1					
ANR	680510	IfStatement	if ( * p >= 0xaa && * p <= 0xba )		680446	0					
ANR	680511	Condition	* p >= 0xaa && * p <= 0xba	140:8:6942:6965	680446	0	True				
ANR	680512	AndExpression	* p >= 0xaa && * p <= 0xba		680446	0		&&			
ANR	680513	RelationalExpression	* p >= 0xaa		680446	0		>=			
ANR	680514	UnaryOperationExpression	* p		680446	0					
ANR	680515	UnaryOperator	*		680446	0					
ANR	680516	Identifier	p		680446	1					
ANR	680517	PrimaryExpression	0xaa		680446	1					
ANR	680518	RelationalExpression	* p <= 0xba		680446	1		<=			
ANR	680519	UnaryOperationExpression	* p		680446	0					
ANR	680520	UnaryOperator	*		680446	0					
ANR	680521	Identifier	p		680446	1					
ANR	680522	PrimaryExpression	0xba		680446	1					
ANR	680523	ReturnStatement	return FALSE ;	141:6:6974:6986	680446	1	True				
ANR	680524	Identifier	FALSE		680446	0					
ANR	680525	ElseStatement	else		680446	0					
ANR	680526	ReturnStatement	return TRUE ;	143:6:7003:7014	680446	0	True				
ANR	680527	Identifier	TRUE		680446	0					
ANR	680528	ReturnStatement	return ( v != 0 ? TRUE : FALSE ) ;	146:2:7023:7053	680446	6	True				
ANR	680529	ConditionalExpression	v != 0 ? TRUE : FALSE		680446	0					
ANR	680530	Condition	v != 0		680446	0					
ANR	680531	EqualityExpression	v != 0		680446	0		!=			
ANR	680532	Identifier	v		680446	0					
ANR	680533	PrimaryExpression	0		680446	1					
ANR	680534	Identifier	TRUE		680446	1					
ANR	680535	Identifier	FALSE		680446	2					
ANR	680536	ReturnType	static int		680446	1					
ANR	680537	Identifier	is_mbc_ambiguous		680446	2					
ANR	680538	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end"		680446	3					
ANR	680539	Parameter	OnigCaseFoldType flag	126:17:6542:6562	680446	0	True				
ANR	680540	ParameterType	OnigCaseFoldType		680446	0					
ANR	680541	Identifier	flag		680446	1					
ANR	680542	Parameter	const UChar * * pp	126:40:6565:6580	680446	1	True				
ANR	680543	ParameterType	const UChar * *		680446	0					
ANR	680544	Identifier	pp		680446	1					
ANR	680545	Parameter	const UChar * end	126:58:6583:6598	680446	2	True				
ANR	680546	ParameterType	const UChar *		680446	0					
ANR	680547	Identifier	end		680446	1					
ANR	680548	CFGEntryNode	ENTRY		680446		True				
ANR	680549	CFGExitNode	EXIT		680446		True				
ANR	680550	Symbol	pp		680446						
ANR	680551	Symbol	flag		680446						
ANR	680552	Symbol	* pp		680446						
ANR	680553	Symbol	TRUE		680446						
ANR	680554	Symbol	EncISO_8859_9_CtypeTable		680446						
ANR	680555	Symbol	p		680446						
ANR	680556	Symbol	* EncISO_8859_9_CtypeTable		680446						
ANR	680557	Symbol	v		680446						
ANR	680558	Symbol	BIT_CTYPE_LOWER		680446						
ANR	680559	Symbol	end		680446						
ANR	680560	Symbol	* p		680446						
ANR	680561	Symbol	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		680446						
ANR	680562	Symbol	BIT_CTYPE_UPPER		680446						
ANR	680563	Symbol	FALSE		680446						
ANR	680564	Symbol	* * p		680446						
ANR	680565	Function	is_code_ctype	150:0:7065:7224							
ANR	680566	FunctionDef	"is_code_ctype (OnigCodePoint code , unsigned int ctype)"		680565	0					
ANR	680567	CompoundStatement		152:0:7130:7224	680565	0					
ANR	680568	IfStatement	if ( code < 256 )		680565	0					
ANR	680569	Condition	code < 256	153:6:7138:7147	680565	0	True				
ANR	680570	RelationalExpression	code < 256		680565	0		<			
ANR	680571	Identifier	code		680565	0					
ANR	680572	PrimaryExpression	256		680565	1					
ANR	680573	ReturnStatement	"return ENC_IS_ISO_8859_9_CTYPE ( code , ctype ) ;"	154:4:7154:7197	680565	1	True				
ANR	680574	CallExpression	"ENC_IS_ISO_8859_9_CTYPE ( code , ctype )"		680565	0					
ANR	680575	Callee	ENC_IS_ISO_8859_9_CTYPE		680565	0					
ANR	680576	Identifier	ENC_IS_ISO_8859_9_CTYPE		680565	0					
ANR	680577	ArgumentList	code		680565	1					
ANR	680578	Argument	code		680565	0					
ANR	680579	Identifier	code		680565	0					
ANR	680580	Argument	ctype		680565	1					
ANR	680581	Identifier	ctype		680565	0					
ANR	680582	ElseStatement	else		680565	0					
ANR	680583	ReturnStatement	return FALSE ;	156:4:7210:7222	680565	0	True				
ANR	680584	Identifier	FALSE		680565	0					
ANR	680585	ReturnType	static int		680565	1					
ANR	680586	Identifier	is_code_ctype		680565	2					
ANR	680587	ParameterList	"OnigCodePoint code , unsigned int ctype"		680565	3					
ANR	680588	Parameter	OnigCodePoint code	151:14:7090:7107	680565	0	True				
ANR	680589	ParameterType	OnigCodePoint		680565	0					
ANR	680590	Identifier	code		680565	1					
ANR	680591	Parameter	unsigned int ctype	151:34:7110:7127	680565	1	True				
ANR	680592	ParameterType	unsigned int		680565	0					
ANR	680593	Identifier	ctype		680565	1					
ANR	680594	CFGEntryNode	ENTRY		680565		True				
ANR	680595	CFGExitNode	EXIT		680565		True				
ANR	680596	Symbol	ENC_IS_ISO_8859_9_CTYPE		680565						
ANR	680597	Symbol	code		680565						
ANR	680598	Symbol	ctype		680565						
ANR	680599	Symbol	FALSE		680565						
ANR	680600	DeclStmt									
ANR	680601	Decl							const OnigPairCaseFoldCodes	const OnigPairCaseFoldCodes [ ]	CaseFoldMap
ANR	680602	Function	apply_all_case_fold	193:0:7824:8080							
ANR	680603	FunctionDef	"apply_all_case_fold (OnigCaseFoldType flag , OnigApplyAllCaseFoldFunc f , void * arg)"		680602	0					
ANR	680604	CompoundStatement		196:0:7923:8080	680602	0					
ANR	680605	ReturnStatement	"return onigenc_apply_all_case_fold_with_map ( sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes ) , CaseFoldMap , 1 , flag , f , arg ) ;"	197:2:7927:8078	680602	0	True				
ANR	680606	CallExpression	"onigenc_apply_all_case_fold_with_map ( sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes ) , CaseFoldMap , 1 , flag , f , arg )"		680602	0					
ANR	680607	Callee	onigenc_apply_all_case_fold_with_map		680602	0					
ANR	680608	Identifier	onigenc_apply_all_case_fold_with_map		680602	0					
ANR	680609	ArgumentList	sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes )		680602	1					
ANR	680610	Argument	sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes )		680602	0					
ANR	680611	MultiplicativeExpression	sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes )		680602	0		/			
ANR	680612	SizeofExpression	sizeof ( CaseFoldMap )		680602	0					
ANR	680613	Sizeof	sizeof		680602	0					
ANR	680614	SizeofOperand	CaseFoldMap		680602	1					
ANR	680615	SizeofExpression	sizeof ( OnigPairCaseFoldCodes )		680602	1					
ANR	680616	Sizeof	sizeof		680602	0					
ANR	680617	SizeofOperand	OnigPairCaseFoldCodes		680602	1					
ANR	680618	Argument	CaseFoldMap		680602	1					
ANR	680619	Identifier	CaseFoldMap		680602	0					
ANR	680620	Argument	1		680602	2					
ANR	680621	PrimaryExpression	1		680602	0					
ANR	680622	Argument	flag		680602	3					
ANR	680623	Identifier	flag		680602	0					
ANR	680624	Argument	f		680602	4					
ANR	680625	Identifier	f		680602	0					
ANR	680626	Argument	arg		680602	5					
ANR	680627	Identifier	arg		680602	0					
ANR	680628	ReturnType	static int		680602	1					
ANR	680629	Identifier	apply_all_case_fold		680602	2					
ANR	680630	ParameterList	"OnigCaseFoldType flag , OnigApplyAllCaseFoldFunc f , void * arg"		680602	3					
ANR	680631	Parameter	OnigCaseFoldType flag	194:20:7855:7875	680602	0	True				
ANR	680632	ParameterType	OnigCaseFoldType		680602	0					
ANR	680633	Identifier	flag		680602	1					
ANR	680634	Parameter	OnigApplyAllCaseFoldFunc f	195:6:7884:7909	680602	1	True				
ANR	680635	ParameterType	OnigApplyAllCaseFoldFunc		680602	0					
ANR	680636	Identifier	f		680602	1					
ANR	680637	Parameter	void * arg	195:34:7912:7920	680602	2	True				
ANR	680638	ParameterType	void *		680602	0					
ANR	680639	Identifier	arg		680602	1					
ANR	680640	CFGEntryNode	ENTRY		680602		True				
ANR	680641	CFGExitNode	EXIT		680602		True				
ANR	680642	Symbol	flag		680602						
ANR	680643	Symbol	f		680602						
ANR	680644	Symbol	arg		680602						
ANR	680645	Symbol	CaseFoldMap		680602						
ANR	680646	Symbol	onigenc_apply_all_case_fold_with_map		680602						
ANR	680647	Function	get_case_fold_codes_by_str	202:0:8083:8377							
ANR	680648	FunctionDef	"get_case_fold_codes_by_str (OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ])"		680647	0					
ANR	680649	CompoundStatement		205:0:8220:8377	680647	0					
ANR	680650	ReturnStatement	"return onigenc_get_case_fold_codes_by_str_with_map ( sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes ) , CaseFoldMap , 1 , flag , p , end , items ) ;"	206:2:8224:8375	680647	0	True				
ANR	680651	CallExpression	"onigenc_get_case_fold_codes_by_str_with_map ( sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes ) , CaseFoldMap , 1 , flag , p , end , items )"		680647	0					
ANR	680652	Callee	onigenc_get_case_fold_codes_by_str_with_map		680647	0					
ANR	680653	Identifier	onigenc_get_case_fold_codes_by_str_with_map		680647	0					
ANR	680654	ArgumentList	sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes )		680647	1					
ANR	680655	Argument	sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes )		680647	0					
ANR	680656	MultiplicativeExpression	sizeof ( CaseFoldMap ) / sizeof ( OnigPairCaseFoldCodes )		680647	0		/			
ANR	680657	SizeofExpression	sizeof ( CaseFoldMap )		680647	0					
ANR	680658	Sizeof	sizeof		680647	0					
ANR	680659	SizeofOperand	CaseFoldMap		680647	1					
ANR	680660	SizeofExpression	sizeof ( OnigPairCaseFoldCodes )		680647	1					
ANR	680661	Sizeof	sizeof		680647	0					
ANR	680662	SizeofOperand	OnigPairCaseFoldCodes		680647	1					
ANR	680663	Argument	CaseFoldMap		680647	1					
ANR	680664	Identifier	CaseFoldMap		680647	0					
ANR	680665	Argument	1		680647	2					
ANR	680666	PrimaryExpression	1		680647	0					
ANR	680667	Argument	flag		680647	3					
ANR	680668	Identifier	flag		680647	0					
ANR	680669	Argument	p		680647	4					
ANR	680670	Identifier	p		680647	0					
ANR	680671	Argument	end		680647	5					
ANR	680672	Identifier	end		680647	0					
ANR	680673	Argument	items		680647	6					
ANR	680674	Identifier	items		680647	0					
ANR	680675	ReturnType	static int		680647	1					
ANR	680676	Identifier	get_case_fold_codes_by_str		680647	2					
ANR	680677	ParameterList	"OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ]"		680647	3					
ANR	680678	Parameter	OnigCaseFoldType flag	203:27:8121:8141	680647	0	True				
ANR	680679	ParameterType	OnigCaseFoldType		680647	0					
ANR	680680	Identifier	flag		680647	1					
ANR	680681	Parameter	const OnigUChar * p	204:4:8148:8165	680647	1	True				
ANR	680682	ParameterType	const OnigUChar *		680647	0					
ANR	680683	Identifier	p		680647	1					
ANR	680684	Parameter	const OnigUChar * end	204:24:8168:8187	680647	2	True				
ANR	680685	ParameterType	const OnigUChar *		680647	0					
ANR	680686	Identifier	end		680647	1					
ANR	680687	Parameter	OnigCaseFoldCodeItem items [ ]	204:46:8190:8217	680647	3	True				
ANR	680688	ParameterType	OnigCaseFoldCodeItem [ ]		680647	0					
ANR	680689	Identifier	items		680647	1					
ANR	680690	CFGEntryNode	ENTRY		680647		True				
ANR	680691	CFGExitNode	EXIT		680647		True				
ANR	680692	Symbol	p		680647						
ANR	680693	Symbol	flag		680647						
ANR	680694	Symbol	end		680647						
ANR	680695	Symbol	CaseFoldMap		680647						
ANR	680696	Symbol	onigenc_get_case_fold_codes_by_str_with_map		680647						
ANR	680697	Symbol	items		680647						
ANR	680698	DeclStmt									
ANR	680699	Decl							OnigEncodingType	OnigEncodingType	OnigEncodingISO_8859_9
