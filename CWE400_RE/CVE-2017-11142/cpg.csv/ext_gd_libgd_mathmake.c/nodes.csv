command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	483574	File	data/converged/CVE-2017-11142_php-src/ext_gd_libgd_mathmake.c								
ANR	483575	DeclStmt									
ANR	483576	Decl							int	int [ 91 ]	basis
ANR	483577	DeclStmt									
ANR	483578	Decl							int	int [ 360 ]	cost
ANR	483579	Function	main	9:0:89:1008							
ANR	483580	FunctionDef	main ()		483579	0					
ANR	483581	CompoundStatement		10:0:101:1008	483579	0					
ANR	483582	IdentifierDeclStatement	int i ;	11:2:105:110	483579	0	True				
ANR	483583	IdentifierDecl	i		483579	0					
ANR	483584	IdentifierDeclType	int		483579	0					
ANR	483585	Identifier	i		483579	1					
ANR	483586	ExpressionStatement	"printf ( ""#define costScale %d\\n"" , scale )"	12:2:114:154	483579	1	True				
ANR	483587	CallExpression	"printf ( ""#define costScale %d\\n"" , scale )"		483579	0					
ANR	483588	Callee	printf		483579	0					
ANR	483589	Identifier	printf		483579	0					
ANR	483590	ArgumentList	"""#define costScale %d\\n"""		483579	1					
ANR	483591	Argument	"""#define costScale %d\\n"""		483579	0					
ANR	483592	PrimaryExpression	"""#define costScale %d\\n"""		483579	0					
ANR	483593	Argument	scale		483579	1					
ANR	483594	Identifier	scale		483579	0					
ANR	483595	ExpressionStatement	"printf ( ""int cost[] = {\\n  "" )"	13:2:158:187	483579	2	True				
ANR	483596	CallExpression	"printf ( ""int cost[] = {\\n  "" )"		483579	0					
ANR	483597	Callee	printf		483579	0					
ANR	483598	Identifier	printf		483579	0					
ANR	483599	ArgumentList	"""int cost[] = {\\n  """		483579	1					
ANR	483600	Argument	"""int cost[] = {\\n  """		483579	0					
ANR	483601	PrimaryExpression	"""int cost[] = {\\n  """		483579	0					
ANR	483602	ForStatement	for ( i = 0 ; ( i <= 90 ) ; i ++ )		483579	3					
ANR	483603	ForInit	i = 0 ;	14:7:196:201	483579	0	True				
ANR	483604	AssignmentExpression	i = 0		483579	0		=			
ANR	483605	Identifier	i		483579	0					
ANR	483606	PrimaryExpression	0		483579	1					
ANR	483607	Condition	i <= 90	14:14:203:211	483579	1	True				
ANR	483608	RelationalExpression	i <= 90		483579	0		<=			
ANR	483609	Identifier	i		483579	0					
ANR	483610	PrimaryExpression	90		483579	1					
ANR	483611	PostIncDecOperationExpression	i ++	14:25:214:216	483579	2	True				
ANR	483612	Identifier	i		483579	0					
ANR	483613	IncDec	++		483579	1					
ANR	483614	CompoundStatement		6:4:121:121	483579	3					
ANR	483615	ExpressionStatement	basis [ i ] = cos ( ( double ) i * .0174532925 ) * scale	16:6:231:280	483579	0	True				
ANR	483616	AssignmentExpression	basis [ i ] = cos ( ( double ) i * .0174532925 ) * scale		483579	0		=			
ANR	483617	ArrayIndexing	basis [ i ]		483579	0					
ANR	483618	Identifier	basis		483579	0					
ANR	483619	Identifier	i		483579	1					
ANR	483620	MultiplicativeExpression	cos ( ( double ) i * .0174532925 ) * scale		483579	1		*			
ANR	483621	CallExpression	cos ( ( double ) i * .0174532925 )		483579	0					
ANR	483622	Callee	cos		483579	0					
ANR	483623	Identifier	cos		483579	0					
ANR	483624	ArgumentList	( double ) i * .0174532925		483579	1					
ANR	483625	Argument	( double ) i * .0174532925		483579	0					
ANR	483626	MultiplicativeExpression	( double ) i * .0174532925		483579	0		*			
ANR	483627	CastExpression	( double ) i		483579	0					
ANR	483628	CastTarget	double		483579	0					
ANR	483629	Identifier	i		483579	1					
ANR	483630	PrimaryExpression	.0174532925		483579	1					
ANR	483631	Identifier	scale		483579	1					
ANR	483632	ForStatement	for ( i = 0 ; ( i < 90 ) ; i ++ )		483579	4					
ANR	483633	ForInit	i = 0 ;	18:7:295:300	483579	0	True				
ANR	483634	AssignmentExpression	i = 0		483579	0		=			
ANR	483635	Identifier	i		483579	0					
ANR	483636	PrimaryExpression	0		483579	1					
ANR	483637	Condition	i < 90	18:14:302:309	483579	1	True				
ANR	483638	RelationalExpression	i < 90		483579	0		<			
ANR	483639	Identifier	i		483579	0					
ANR	483640	PrimaryExpression	90		483579	1					
ANR	483641	PostIncDecOperationExpression	i ++	18:24:312:314	483579	2	True				
ANR	483642	Identifier	i		483579	0					
ANR	483643	IncDec	++		483579	1					
ANR	483644	CompoundStatement		10:4:219:219	483579	3					
ANR	483645	ExpressionStatement	"printf ( ""%d,\\n  "" , cost [ i ] = basis [ i ] )"	20:6:329:367	483579	0	True				
ANR	483646	CallExpression	"printf ( ""%d,\\n  "" , cost [ i ] = basis [ i ] )"		483579	0					
ANR	483647	Callee	printf		483579	0					
ANR	483648	Identifier	printf		483579	0					
ANR	483649	ArgumentList	"""%d,\\n  """		483579	1					
ANR	483650	Argument	"""%d,\\n  """		483579	0					
ANR	483651	PrimaryExpression	"""%d,\\n  """		483579	0					
ANR	483652	Argument	cost [ i ] = basis [ i ]		483579	1					
ANR	483653	AssignmentExpression	cost [ i ] = basis [ i ]		483579	0		=			
ANR	483654	ArrayIndexing	cost [ i ]		483579	0					
ANR	483655	Identifier	cost		483579	0					
ANR	483656	Identifier	i		483579	1					
ANR	483657	ArrayIndexing	basis [ i ]		483579	1					
ANR	483658	Identifier	basis		483579	0					
ANR	483659	Identifier	i		483579	1					
ANR	483660	ForStatement	for ( i = 90 ; ( i < 180 ) ; i ++ )		483579	5					
ANR	483661	ForInit	i = 90 ;	22:7:382:388	483579	0	True				
ANR	483662	AssignmentExpression	i = 90		483579	0		=			
ANR	483663	Identifier	i		483579	0					
ANR	483664	PrimaryExpression	90		483579	1					
ANR	483665	Condition	i < 180	22:15:390:398	483579	1	True				
ANR	483666	RelationalExpression	i < 180		483579	0		<			
ANR	483667	Identifier	i		483579	0					
ANR	483668	PrimaryExpression	180		483579	1					
ANR	483669	PostIncDecOperationExpression	i ++	22:26:401:403	483579	2	True				
ANR	483670	Identifier	i		483579	0					
ANR	483671	IncDec	++		483579	1					
ANR	483672	CompoundStatement		14:4:308:308	483579	3					
ANR	483673	ExpressionStatement	"printf ( ""%d,\\n  "" , cost [ i ] = - basis [ 180 - i ] )"	24:6:418:463	483579	0	True				
ANR	483674	CallExpression	"printf ( ""%d,\\n  "" , cost [ i ] = - basis [ 180 - i ] )"		483579	0					
ANR	483675	Callee	printf		483579	0					
ANR	483676	Identifier	printf		483579	0					
ANR	483677	ArgumentList	"""%d,\\n  """		483579	1					
ANR	483678	Argument	"""%d,\\n  """		483579	0					
ANR	483679	PrimaryExpression	"""%d,\\n  """		483579	0					
ANR	483680	Argument	cost [ i ] = - basis [ 180 - i ]		483579	1					
ANR	483681	AssignmentExpression	cost [ i ] = - basis [ 180 - i ]		483579	0		=			
ANR	483682	ArrayIndexing	cost [ i ]		483579	0					
ANR	483683	Identifier	cost		483579	0					
ANR	483684	Identifier	i		483579	1					
ANR	483685	UnaryOperationExpression	- basis [ 180 - i ]		483579	1					
ANR	483686	UnaryOperator	-		483579	0					
ANR	483687	ArrayIndexing	basis [ 180 - i ]		483579	1					
ANR	483688	Identifier	basis		483579	0					
ANR	483689	AdditiveExpression	180 - i		483579	1		-			
ANR	483690	PrimaryExpression	180		483579	0					
ANR	483691	Identifier	i		483579	1					
ANR	483692	ForStatement	for ( i = 180 ; ( i < 270 ) ; i ++ )		483579	6					
ANR	483693	ForInit	i = 180 ;	26:7:478:485	483579	0	True				
ANR	483694	AssignmentExpression	i = 180		483579	0		=			
ANR	483695	Identifier	i		483579	0					
ANR	483696	PrimaryExpression	180		483579	1					
ANR	483697	Condition	i < 270	26:16:487:495	483579	1	True				
ANR	483698	RelationalExpression	i < 270		483579	0		<			
ANR	483699	Identifier	i		483579	0					
ANR	483700	PrimaryExpression	270		483579	1					
ANR	483701	PostIncDecOperationExpression	i ++	26:27:498:500	483579	2	True				
ANR	483702	Identifier	i		483579	0					
ANR	483703	IncDec	++		483579	1					
ANR	483704	CompoundStatement		18:4:405:405	483579	3					
ANR	483705	ExpressionStatement	"printf ( ""%d,\\n  "" , cost [ i ] = - basis [ i - 180 ] )"	28:6:515:560	483579	0	True				
ANR	483706	CallExpression	"printf ( ""%d,\\n  "" , cost [ i ] = - basis [ i - 180 ] )"		483579	0					
ANR	483707	Callee	printf		483579	0					
ANR	483708	Identifier	printf		483579	0					
ANR	483709	ArgumentList	"""%d,\\n  """		483579	1					
ANR	483710	Argument	"""%d,\\n  """		483579	0					
ANR	483711	PrimaryExpression	"""%d,\\n  """		483579	0					
ANR	483712	Argument	cost [ i ] = - basis [ i - 180 ]		483579	1					
ANR	483713	AssignmentExpression	cost [ i ] = - basis [ i - 180 ]		483579	0		=			
ANR	483714	ArrayIndexing	cost [ i ]		483579	0					
ANR	483715	Identifier	cost		483579	0					
ANR	483716	Identifier	i		483579	1					
ANR	483717	UnaryOperationExpression	- basis [ i - 180 ]		483579	1					
ANR	483718	UnaryOperator	-		483579	0					
ANR	483719	ArrayIndexing	basis [ i - 180 ]		483579	1					
ANR	483720	Identifier	basis		483579	0					
ANR	483721	AdditiveExpression	i - 180		483579	1		-			
ANR	483722	Identifier	i		483579	0					
ANR	483723	PrimaryExpression	180		483579	1					
ANR	483724	ForStatement	for ( i = 270 ; ( i < 359 ) ; i ++ )		483579	7					
ANR	483725	ForInit	i = 270 ;	30:7:575:582	483579	0	True				
ANR	483726	AssignmentExpression	i = 270		483579	0		=			
ANR	483727	Identifier	i		483579	0					
ANR	483728	PrimaryExpression	270		483579	1					
ANR	483729	Condition	i < 359	30:16:584:592	483579	1	True				
ANR	483730	RelationalExpression	i < 359		483579	0		<			
ANR	483731	Identifier	i		483579	0					
ANR	483732	PrimaryExpression	359		483579	1					
ANR	483733	PostIncDecOperationExpression	i ++	30:27:595:597	483579	2	True				
ANR	483734	Identifier	i		483579	0					
ANR	483735	IncDec	++		483579	1					
ANR	483736	CompoundStatement		22:4:502:502	483579	3					
ANR	483737	ExpressionStatement	"printf ( ""%d,\\n  "" , cost [ i ] = basis [ 360 - i ] )"	32:6:612:656	483579	0	True				
ANR	483738	CallExpression	"printf ( ""%d,\\n  "" , cost [ i ] = basis [ 360 - i ] )"		483579	0					
ANR	483739	Callee	printf		483579	0					
ANR	483740	Identifier	printf		483579	0					
ANR	483741	ArgumentList	"""%d,\\n  """		483579	1					
ANR	483742	Argument	"""%d,\\n  """		483579	0					
ANR	483743	PrimaryExpression	"""%d,\\n  """		483579	0					
ANR	483744	Argument	cost [ i ] = basis [ 360 - i ]		483579	1					
ANR	483745	AssignmentExpression	cost [ i ] = basis [ 360 - i ]		483579	0		=			
ANR	483746	ArrayIndexing	cost [ i ]		483579	0					
ANR	483747	Identifier	cost		483579	0					
ANR	483748	Identifier	i		483579	1					
ANR	483749	ArrayIndexing	basis [ 360 - i ]		483579	1					
ANR	483750	Identifier	basis		483579	0					
ANR	483751	AdditiveExpression	360 - i		483579	1		-			
ANR	483752	PrimaryExpression	360		483579	0					
ANR	483753	Identifier	i		483579	1					
ANR	483754	ExpressionStatement	"printf ( ""%d\\n"" , cost [ 359 ] = basis [ 1 ] )"	34:2:666:703	483579	8	True				
ANR	483755	CallExpression	"printf ( ""%d\\n"" , cost [ 359 ] = basis [ 1 ] )"		483579	0					
ANR	483756	Callee	printf		483579	0					
ANR	483757	Identifier	printf		483579	0					
ANR	483758	ArgumentList	"""%d\\n"""		483579	1					
ANR	483759	Argument	"""%d\\n"""		483579	0					
ANR	483760	PrimaryExpression	"""%d\\n"""		483579	0					
ANR	483761	Argument	cost [ 359 ] = basis [ 1 ]		483579	1					
ANR	483762	AssignmentExpression	cost [ 359 ] = basis [ 1 ]		483579	0		=			
ANR	483763	ArrayIndexing	cost [ 359 ]		483579	0					
ANR	483764	Identifier	cost		483579	0					
ANR	483765	PrimaryExpression	359		483579	1					
ANR	483766	ArrayIndexing	basis [ 1 ]		483579	1					
ANR	483767	Identifier	basis		483579	0					
ANR	483768	PrimaryExpression	1		483579	1					
ANR	483769	ExpressionStatement	"printf ( ""};\\n"" )"	35:2:707:722	483579	9	True				
ANR	483770	CallExpression	"printf ( ""};\\n"" )"		483579	0					
ANR	483771	Callee	printf		483579	0					
ANR	483772	Identifier	printf		483579	0					
ANR	483773	ArgumentList	"""};\\n"""		483579	1					
ANR	483774	Argument	"""};\\n"""		483579	0					
ANR	483775	PrimaryExpression	"""};\\n"""		483579	0					
ANR	483776	ExpressionStatement	"printf ( ""#define sintScale %d\\n"" , scale )"	36:2:726:766	483579	10	True				
ANR	483777	CallExpression	"printf ( ""#define sintScale %d\\n"" , scale )"		483579	0					
ANR	483778	Callee	printf		483579	0					
ANR	483779	Identifier	printf		483579	0					
ANR	483780	ArgumentList	"""#define sintScale %d\\n"""		483579	1					
ANR	483781	Argument	"""#define sintScale %d\\n"""		483579	0					
ANR	483782	PrimaryExpression	"""#define sintScale %d\\n"""		483579	0					
ANR	483783	Argument	scale		483579	1					
ANR	483784	Identifier	scale		483579	0					
ANR	483785	ExpressionStatement	"printf ( ""int sint[] = {\\n  "" )"	37:2:770:799	483579	11	True				
ANR	483786	CallExpression	"printf ( ""int sint[] = {\\n  "" )"		483579	0					
ANR	483787	Callee	printf		483579	0					
ANR	483788	Identifier	printf		483579	0					
ANR	483789	ArgumentList	"""int sint[] = {\\n  """		483579	1					
ANR	483790	Argument	"""int sint[] = {\\n  """		483579	0					
ANR	483791	PrimaryExpression	"""int sint[] = {\\n  """		483579	0					
ANR	483792	ForStatement	for ( i = 0 ; ( i < 360 ) ; i ++ )		483579	12					
ANR	483793	ForInit	i = 0 ;	38:7:808:813	483579	0	True				
ANR	483794	AssignmentExpression	i = 0		483579	0		=			
ANR	483795	Identifier	i		483579	0					
ANR	483796	PrimaryExpression	0		483579	1					
ANR	483797	Condition	i < 360	38:14:815:823	483579	1	True				
ANR	483798	RelationalExpression	i < 360		483579	0		<			
ANR	483799	Identifier	i		483579	0					
ANR	483800	PrimaryExpression	360		483579	1					
ANR	483801	PostIncDecOperationExpression	i ++	38:25:826:828	483579	2	True				
ANR	483802	Identifier	i		483579	0					
ANR	483803	IncDec	++		483579	1					
ANR	483804	CompoundStatement		31:6:741:748	483579	3					
ANR	483805	IdentifierDeclStatement	int val ;	40:6:843:850	483579	0	True				
ANR	483806	IdentifierDecl	val		483579	0					
ANR	483807	IdentifierDeclType	int		483579	0					
ANR	483808	Identifier	val		483579	1					
ANR	483809	ExpressionStatement	val = cost [ ( i + 270 ) % 360 ]	41:6:858:885	483579	1	True				
ANR	483810	AssignmentExpression	val = cost [ ( i + 270 ) % 360 ]		483579	0		=			
ANR	483811	Identifier	val		483579	0					
ANR	483812	ArrayIndexing	cost [ ( i + 270 ) % 360 ]		483579	1					
ANR	483813	Identifier	cost		483579	0					
ANR	483814	MultiplicativeExpression	( i + 270 ) % 360		483579	1		%			
ANR	483815	AdditiveExpression	i + 270		483579	0		+			
ANR	483816	Identifier	i		483579	0					
ANR	483817	PrimaryExpression	270		483579	1					
ANR	483818	PrimaryExpression	360		483579	1					
ANR	483819	IfStatement	if ( i != 359 )		483579	2					
ANR	483820	Condition	i != 359	42:10:897:904	483579	0	True				
ANR	483821	EqualityExpression	i != 359		483579	0		!=			
ANR	483822	Identifier	i		483579	0					
ANR	483823	PrimaryExpression	359		483579	1					
ANR	483824	CompoundStatement		34:1:806:806	483579	1					
ANR	483825	ExpressionStatement	"printf ( ""%d,\\n  "" , val )"	44:3:913:936	483579	0	True				
ANR	483826	CallExpression	"printf ( ""%d,\\n  "" , val )"		483579	0					
ANR	483827	Callee	printf		483579	0					
ANR	483828	Identifier	printf		483579	0					
ANR	483829	ArgumentList	"""%d,\\n  """		483579	1					
ANR	483830	Argument	"""%d,\\n  """		483579	0					
ANR	483831	PrimaryExpression	"""%d,\\n  """		483579	0					
ANR	483832	Argument	val		483579	1					
ANR	483833	Identifier	val		483579	0					
ANR	483834	ElseStatement	else		483579	0					
ANR	483835	CompoundStatement		38:1:851:851	483579	0					
ANR	483836	ExpressionStatement	"printf ( ""%d\\n"" , val )"	48:3:958:978	483579	0	True				
ANR	483837	CallExpression	"printf ( ""%d\\n"" , val )"		483579	0					
ANR	483838	Callee	printf		483579	0					
ANR	483839	Identifier	printf		483579	0					
ANR	483840	ArgumentList	"""%d\\n"""		483579	1					
ANR	483841	Argument	"""%d\\n"""		483579	0					
ANR	483842	PrimaryExpression	"""%d\\n"""		483579	0					
ANR	483843	Argument	val		483579	1					
ANR	483844	Identifier	val		483579	0					
ANR	483845	ExpressionStatement	"printf ( ""};\\n"" )"	51:2:991:1006	483579	13	True				
ANR	483846	CallExpression	"printf ( ""};\\n"" )"		483579	0					
ANR	483847	Callee	printf		483579	0					
ANR	483848	Identifier	printf		483579	0					
ANR	483849	ArgumentList	"""};\\n"""		483579	1					
ANR	483850	Argument	"""};\\n"""		483579	0					
ANR	483851	PrimaryExpression	"""};\\n"""		483579	0					
ANR	483852	Identifier	main		483579	1					
ANR	483853	ParameterList			483579	2					
ANR	483854	CFGEntryNode	ENTRY		483579		True				
ANR	483855	CFGExitNode	EXIT		483579		True				
ANR	483856	Symbol	val		483579						
ANR	483857	Symbol	* i		483579						
ANR	483858	Symbol	cost		483579						
ANR	483859	Symbol	cos		483579						
ANR	483860	Symbol	i		483579						
ANR	483861	Symbol	scale		483579						
ANR	483862	Symbol	* basis		483579						
ANR	483863	Symbol	basis		483579						
ANR	483864	Symbol	* cost		483579						
