[
  {
    "FileName": "preen_before.cpp",
    "Caller": "usage",
    "Source": false,
    "Sink": false,
    "idx": 0,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "fprintf",
    "line": 104,
    "label": -3,
    "slices": [
      "\tfprintf( stderr, \"Usage: %s [-mail] [-remove] [-verbose] [-debug]\\n\", MyName );\n"
    ],
    "tokenized": "fprintf(Var1,STRING,Var2); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "main",
    "Source": false,
    "Sink": false,
    "idx": 1,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "free",
    "line": 168,
    "label": -3,
    "slices": [
      "\tif (VerboseFlag)\n",
      "\t\tstd::string szVerbose=\"D_FULLDEBUG\";\n",
      "\t\tchar * pval = param(\"TOOL_DEBUG\");\n",
      "\t\tif( pval ) {\n",
      "\t\t\tszVerbose+=pval;\n",
      "\t\t\tfree( pval );\n"
    ],
    "tokenized": "if (Var1)\nCLASS1::STRUCT1  Var2=STRING; \nchar *Var3=FUNC1(STRING); \nif (Var3){\nVar2  STRUCT2  Var3; \nfree(Var3); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "produce_output",
    "Source": false,
    "Sink": false,
    "idx": 2,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "fprintf",
    "line": 227,
    "label": -3,
    "slices": [
      "\tchar\t*str;\n",
      "\tFILE\t*mailer;\n",
      "\tMyString subject,szTmp;\n",
      "\tif( MailFlag ) {\n",
      "else\n",
      "\t\tmailer = stdout;\n",
      "\tif( MailFlag ) {\n",
      "\t\tfprintf( mailer, \"\\n\" );\n",
      "\t\tfprintf( mailer, szTmp.Value());\n",
      "\tfor( BadFiles->rewind(); (str = BadFiles->next()); ) {\n",
      "\t\tfprintf( mailer, szTmp.Value() );\n",
      "\tif( MailFlag ) {\n",
      "\t\tfprintf( mailer, \"%s\\n\", explanation );\n",
      "\t\temail_close( mailer );\n"
    ],
    "tokenized": "char *Var1; \nSTRUCT1 *Var2; \nSTRUCT2  Var3,Var4; \nif (Var5){\nelse \nVar2=Var6; \nif (Var5){\nfprintf(Var2,STRING); \nfprintf(Var2,Var4.FUNC1()); \nfor (Var7->FUNC2(); (Var1=Var7->FUNC3()); ){\nfprintf(Var2,Var4.FUNC1()); \nif (Var5){\nfprintf(Var2,STRING,Var8); \nFUNC4(Var2); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "produce_output",
    "Source": false,
    "Sink": false,
    "idx": 3,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "fprintf",
    "line": 228,
    "label": -3,
    "slices": [
      "\tchar\t*str;\n",
      "\tFILE\t*mailer;\n",
      "\tMyString subject,szTmp;\n",
      "\tif( MailFlag ) {\n",
      "else\n",
      "\t\tmailer = stdout;\n",
      "\tszTmp.sprintf(\"The condor_preen process has found the following stale condor files on <%s>:\\n\\n\",  get_local_hostname().Value());\n",
      "\tdprintf(D_ALWAYS, szTmp.Value()); \n",
      "\tif( MailFlag ) {\n",
      "\t\tfprintf( mailer, \"\\n\" );\n",
      "\t\tfprintf( mailer, szTmp.Value());\n",
      "\tfor( BadFiles->rewind(); (str = BadFiles->next()); ) {\n",
      "\t\tszTmp.sprintf(\"  %s\\n\", str);\n",
      "\t\tdprintf(D_ALWAYS, szTmp.Value() );\n",
      "\t\tfprintf( mailer, szTmp.Value() );\n",
      "\tif( MailFlag ) {\n",
      "\t\tfprintf( mailer, \"%s\\n\", explanation );\n",
      "\t\temail_close( mailer );\n"
    ],
    "tokenized": "char *Var1; \nSTRUCT1 *Var2; \nSTRUCT2  Var3,Var4; \nif (Var5){\nelse \nVar2=Var6; \nVar4.sprintf(STRING,FUNC1().FUNC2()); \nFUNC3(Var7,Var4.FUNC2()); \nif (Var5){\nfprintf(Var2,STRING); \nfprintf(Var2,Var4.FUNC2()); \nfor (Var8->FUNC4(); (Var1=Var8->FUNC5()); ){\nVar4.sprintf(STRING,Var1); \nFUNC3(Var7,Var4.FUNC2()); \nfprintf(Var2,Var4.FUNC2()); \nif (Var5){\nfprintf(Var2,STRING,Var9); \nFUNC6(Var2); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "produce_output",
    "Source": false,
    "Sink": false,
    "idx": 4,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "fprintf",
    "line": 234,
    "label": -3,
    "slices": [
      "\tchar\t*str;\n",
      "\tFILE\t*mailer;\n",
      "\tMyString subject,szTmp;\n",
      "\tif( MailFlag ) {\n",
      "else\n",
      "\t\tmailer = stdout;\n",
      "\tszTmp.sprintf(\"The condor_preen process has found the following stale condor files on <%s>:\\n\\n\",  get_local_hostname().Value());\n",
      "\tdprintf(D_ALWAYS, szTmp.Value()); \n",
      "\tif( MailFlag ) {\n",
      "\t\tfprintf( mailer, \"\\n\" );\n",
      "\t\tfprintf( mailer, szTmp.Value());\n",
      "\tfor( BadFiles->rewind(); (str = BadFiles->next()); ) {\n",
      "\t\tszTmp.sprintf(\"  %s\\n\", str);\n",
      "\t\tdprintf(D_ALWAYS, szTmp.Value() );\n",
      "\t\tfprintf( mailer, szTmp.Value() );\n",
      "\tif( MailFlag ) {\n",
      "\t\tfprintf( mailer, \"%s\\n\", explanation );\n",
      "\t\temail_close( mailer );\n"
    ],
    "tokenized": "char *Var1; \nSTRUCT1 *Var2; \nSTRUCT2  Var3,Var4; \nif (Var5){\nelse \nVar2=Var6; \nVar4.sprintf(STRING,FUNC1().FUNC2()); \nFUNC3(Var7,Var4.FUNC2()); \nif (Var5){\nfprintf(Var2,STRING); \nfprintf(Var2,Var4.FUNC2()); \nfor (Var8->FUNC4(); (Var1=Var8->FUNC5()); ){\nVar4.sprintf(STRING,Var1); \nFUNC3(Var7,Var4.FUNC2()); \nfprintf(Var2,Var4.FUNC2()); \nif (Var5){\nfprintf(Var2,STRING,Var9); \nFUNC6(Var2); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "produce_output",
    "Source": false,
    "Sink": false,
    "idx": 5,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "fprintf",
    "line": 250,
    "label": -3,
    "slices": [
      "\tchar\t*str;\n",
      "\tFILE\t*mailer;\n",
      "\tMyString subject,szTmp;\n",
      "\tif( MailFlag ) {\n",
      "else\n",
      "\t\tmailer = stdout;\n",
      "\tif( MailFlag ) {\n",
      "\t\tfprintf( mailer, \"\\n\" );\n",
      "\t\tfprintf( mailer, szTmp.Value());\n",
      "\tfor( BadFiles->rewind(); (str = BadFiles->next()); ) {\n",
      "\t\tfprintf( mailer, szTmp.Value() );\n",
      "\tif( MailFlag ) {\n",
      "\t\tfprintf( mailer, \"%s\\n\", explanation );\n",
      "\t\temail_close( mailer );\n"
    ],
    "tokenized": "char *Var1; \nSTRUCT1 *Var2; \nSTRUCT2  Var3,Var4; \nif (Var5){\nelse \nVar2=Var6; \nif (Var5){\nfprintf(Var2,STRING); \nfprintf(Var2,Var4.FUNC1()); \nfor (Var7->FUNC2(); (Var1=Var7->FUNC3()); ){\nfprintf(Var2,Var4.FUNC1()); \nif (Var5){\nfprintf(Var2,STRING,Var8); \nFUNC4(Var2); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "check_job_spool_hierarchy",
    "Source": false,
    "Sink": false,
    "idx": 6,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "sprintf",
    "line": 272,
    "label": -3,
    "slices": [
      "check_job_spool_hierarchy( char const *parent, char const *child, StringList &bad_spool_files )\n",
      "\tASSERT( parent );\n",
      "\tASSERT( child );\n",
      "\tchar *end=NULL;\n",
      "\tstrtol(child,&end,10);\n",
      "\tif( !end || *end != '\\0' ) {\n",
      "\tstd::string topdir;\n",
      "\tsprintf(topdir,\"%s%c%s\",parent,DIR_DELIM_CHAR,child);\n",
      "\tDirectory dir(topdir.c_str(),PRIV_ROOT);\n",
      "\tchar const *f;\n",
      "\twhile( (f=dir.Next()) ) {\n",
      "\t\tif( is_ckpt_file(f) ) {\n",
      "\t\t\tgood_file( topdir.c_str(), f );\n",
      "\t\tif( IsDirectory(dir.GetFullPath()) && !IsSymlink(dir.GetFullPath()) ) {\n",
      "\t\t\tif( check_job_spool_hierarchy( topdir.c_str(), f, bad_spool_files ) ) {\n",
      "\t\t\t\tgood_file( topdir.c_str(), f );\n"
    ],
    "tokenized": "FUNC1(char const *Var1,char const *Var2,Var3&Var4)\nFUNC2(Var1); \nFUNC2(Var2); \nchar *Var5=NULL ; \nFUNC3(Var2,&Var5,10); \nif (!Var5||*Var5 != 0){\nCLASS1::STRUCT1  Var6; \nsprintf(Var6,STRING,Var1,Var7,Var2); \nSTRUCT2 FUNC4(Var6.FUNC5(),Var8); \nchar const *Var9; \nwhile ((Var9=FUNC4.FUNC6())){\nif (FUNC7(Var9)){\nFUNC8(Var6.FUNC5(),Var9); \nif (FUNC9(FUNC4.FUNC10())&&!FUNC11(FUNC4.FUNC10())){\nif (FUNC1(Var6.FUNC5(),Var9,Var4)){\nFUNC8(Var6.FUNC5(),Var9); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "check_spool_dir",
    "Source": false,
    "Sink": false,
    "idx": 7,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 335,
    "label": -3,
    "slices": [
      "    unsigned int\thistory_length, startd_history_length;\n",
      "\tconst char  \t*f;\n",
      "    const char      *history, *startd_history;\n",
      "\tDirectory  \t\tdir(Spool, PRIV_ROOT);\n",
      "\tStringList \t\twell_known_list, bad_spool_files;\n",
      "\tQmgr_connection *qmgr;\n",
      "\tif ( ValidSpoolFiles == NULL ) {\n",
      "    history = param(\"HISTORY\");\n",
      "    history = condor_basename(history); // condor_basename never returns NULL\n",
      "    history_length = strlen(history);\n",
      "\tif (!(qmgr = ConnectQ (0))) {\n",
      "\twhile( (f = dir.Next()) ) {\n",
      "\t\tif( well_known_list.contains(f) ) {\n",
      "\t\tif( !strncmp(f,\"job_queue.log\",13) ) {\n"
    ],
    "tokenized": "unsigned int  Var1,Var2; \nconst char *Var3; \nconst char *Var4,*Var5; \nSTRUCT1 FUNC1(Var6,Var7); \nSTRUCT2  Var8,Var9; \nSTRUCT3 *Var10; \nif (Var11 == NULL ){\nVar4=FUNC2(STRING); \nVar4=FUNC3(Var4); //FUNC3  Var12  STRUCT4 NULL \nVar1=strlen(Var4); \nif (!(Var10=FUNC4(0))){\nwhile ((Var3=FUNC1.FUNC5())){\nif (Var8.FUNC6(Var3)){\nif (!FUNC7(Var3,STRING,13)){\n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "check_spool_dir",
    "Source": false,
    "Sink": false,
    "idx": 8,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 339,
    "label": -3,
    "slices": [
      "    unsigned int\thistory_length, startd_history_length;\n",
      "\tconst char  \t*f;\n",
      "    const char      *history, *startd_history;\n",
      "\tDirectory  \t\tdir(Spool, PRIV_ROOT);\n",
      "\tStringList \t\twell_known_list, bad_spool_files;\n",
      "\tQmgr_connection *qmgr;\n",
      "\tif ( ValidSpoolFiles == NULL ) {\n",
      "    startd_history = param(\"STARTD_HISTORY\");\n",
      "   \tstartd_history = condor_basename(startd_history);\n",
      "   \tstartd_history_length = strlen(startd_history);\n",
      "\tif (!(qmgr = ConnectQ (0))) {\n",
      "\twhile( (f = dir.Next()) ) {\n",
      "\t\tif( well_known_list.contains(f) ) {\n",
      "\t\tif( !strncmp(f,\"job_queue.log\",13) ) {\n",
      "        if (   strlen(f) >= history_length \n            && strncmp(f, history, history_length) == 0) {\n"
    ],
    "tokenized": "unsigned int  Var1,Var2; \nconst char *Var3; \nconst char *Var4,*Var5; \nSTRUCT1 FUNC1(Var6,Var7); \nSTRUCT2  Var8,Var9; \nSTRUCT3 *Var10; \nif (Var11 == NULL ){\nVar5=FUNC2(STRING); \nVar5=FUNC3(Var5); \nVar2=strlen(Var5); \nif (!(Var10=FUNC4(0))){\nwhile ((Var3=FUNC1.FUNC5())){\nif (Var8.FUNC6(Var3)){\nif (!FUNC7(Var3,STRING,13)){\nif (strlen(Var3) >=  Var1\n&&FUNC7(Var3,Var4,Var1) == 0){\n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "check_spool_dir",
    "Source": false,
    "Sink": false,
    "idx": 9,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 384,
    "label": -3,
    "slices": [
      "    unsigned int\thistory_length, startd_history_length;\n",
      "\tconst char  \t*f;\n",
      "    const char      *history, *startd_history;\n",
      "\tDirectory  \t\tdir(Spool, PRIV_ROOT);\n",
      "\tStringList \t\twell_known_list, bad_spool_files;\n",
      "\tQmgr_connection *qmgr;\n",
      "\tif ( ValidSpoolFiles == NULL ) {\n",
      "    history = param(\"HISTORY\");\n",
      "    history = condor_basename(history); // condor_basename never returns NULL\n",
      "    history_length = strlen(history);\n",
      "\tif (!(qmgr = ConnectQ (0))) {\n",
      "\twhile( (f = dir.Next()) ) {\n",
      "\t\tif( well_known_list.contains(f) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif( !strncmp(f,\"job_queue.log\",13) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "        if (   strlen(f) >= history_length \n            && strncmp(f, history, history_length) == 0) {\n",
      "            good_file( Spool, f );\n",
      "\t\tif ( startd_history_length > 0 &&\n\t\t\tstrlen(f) >= startd_history_length &&\n\t\t\tstrncmp(f, startd_history, startd_history_length) == 0) {\n",
      "            good_file( Spool, f );\n",
      "\t\tif( is_valid_shared_exe(f) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif( is_ckpt_file(f) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif ( is_myproxy_file( f ) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif ( is_ccb_file( f ) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif( IsDirectory( dir.GetFullPath() ) && !IsSymlink( dir.GetFullPath() ) ) {\n",
      "\t\t\tif( check_job_spool_hierarchy( Spool, f, bad_spool_files ) ) {\n",
      "\t\t\t\tgood_file( Spool, f );\n",
      "\t\tbad_spool_files.append( f );\n"
    ],
    "tokenized": "unsigned int  Var1,Var2; \nconst char *Var3; \nconst char *Var4,*Var5; \nSTRUCT1 FUNC1(Var6,Var7); \nSTRUCT2  Var8,Var9; \nSTRUCT3 *Var10; \nif (Var11 == NULL ){\nVar4=FUNC2(STRING); \nVar4=FUNC3(Var4); //FUNC3  Var12  STRUCT4 NULL \nVar1=strlen(Var4); \nif (!(Var10=FUNC4(0))){\nwhile ((Var3=FUNC1.FUNC5())){\nif (Var8.FUNC6(Var3)){\nFUNC7(Var6,Var3); \nif (!FUNC8(Var3,STRING,13)){\nFUNC7(Var6,Var3); \nif (strlen(Var3) >=  Var1\n&&FUNC8(Var3,Var4,Var1) == 0){\nFUNC7(Var6,Var3); \nif (Var2>0&&\nstrlen(Var3) >=  Var2&&\nFUNC8(Var3,Var5,Var2) == 0){\nFUNC7(Var6,Var3); \nif (FUNC9(Var3)){\nFUNC7(Var6,Var3); \nif (FUNC10(Var3)){\nFUNC7(Var6,Var3); \nif (FUNC11(Var3)){\nFUNC7(Var6,Var3); \nif (FUNC12(Var3)){\nFUNC7(Var6,Var3); \nif (FUNC13(FUNC1.FUNC14())&&!FUNC15(FUNC1.FUNC14())){\nif (FUNC16(Var6,Var3,Var9)){\nFUNC7(Var6,Var3); \nVar9.FUNC17(Var3); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "check_spool_dir",
    "Source": false,
    "Sink": false,
    "idx": 10,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 391,
    "label": -3,
    "slices": [
      "    unsigned int\thistory_length, startd_history_length;\n",
      "\tconst char  \t*f;\n",
      "    const char      *history, *startd_history;\n",
      "\tDirectory  \t\tdir(Spool, PRIV_ROOT);\n",
      "\tStringList \t\twell_known_list, bad_spool_files;\n",
      "\tQmgr_connection *qmgr;\n",
      "\tif ( ValidSpoolFiles == NULL ) {\n",
      "    startd_history = param(\"STARTD_HISTORY\");\n",
      "   \tstartd_history = condor_basename(startd_history);\n",
      "   \tstartd_history_length = strlen(startd_history);\n",
      "\tif (!(qmgr = ConnectQ (0))) {\n",
      "\twhile( (f = dir.Next()) ) {\n",
      "\t\tif( well_known_list.contains(f) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif( !strncmp(f,\"job_queue.log\",13) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "        if (   strlen(f) >= history_length \n            && strncmp(f, history, history_length) == 0) {\n",
      "            good_file( Spool, f );\n",
      "\t\tif ( startd_history_length > 0 &&\n\t\t\tstrlen(f) >= startd_history_length &&\n\t\t\tstrncmp(f, startd_history, startd_history_length) == 0) {\n",
      "            good_file( Spool, f );\n",
      "\t\tif( is_valid_shared_exe(f) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif( is_ckpt_file(f) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif ( is_myproxy_file( f ) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif ( is_ccb_file( f ) ) {\n",
      "\t\t\tgood_file( Spool, f );\n",
      "\t\tif( IsDirectory( dir.GetFullPath() ) && !IsSymlink( dir.GetFullPath() ) ) {\n",
      "\t\t\tif( check_job_spool_hierarchy( Spool, f, bad_spool_files ) ) {\n",
      "\t\t\t\tgood_file( Spool, f );\n",
      "\t\tbad_spool_files.append( f );\n"
    ],
    "tokenized": "unsigned int  Var1,Var2; \nconst char *Var3; \nconst char *Var4,*Var5; \nSTRUCT1 FUNC1(Var6,Var7); \nSTRUCT2  Var8,Var9; \nSTRUCT3 *Var10; \nif (Var11 == NULL ){\nVar5=FUNC2(STRING); \nVar5=FUNC3(Var5); \nVar2=strlen(Var5); \nif (!(Var10=FUNC4(0))){\nwhile ((Var3=FUNC1.FUNC5())){\nif (Var8.FUNC6(Var3)){\nFUNC7(Var6,Var3); \nif (!FUNC8(Var3,STRING,13)){\nFUNC7(Var6,Var3); \nif (strlen(Var3) >=  Var1\n&&FUNC8(Var3,Var4,Var1) == 0){\nFUNC7(Var6,Var3); \nif (Var2>0&&\nstrlen(Var3) >=  Var2&&\nFUNC8(Var3,Var5,Var2) == 0){\nFUNC7(Var6,Var3); \nif (FUNC9(Var3)){\nFUNC7(Var6,Var3); \nif (FUNC10(Var3)){\nFUNC7(Var6,Var3); \nif (FUNC11(Var3)){\nFUNC7(Var6,Var3); \nif (FUNC12(Var3)){\nFUNC7(Var6,Var3); \nif (FUNC13(FUNC1.FUNC14())&&!FUNC15(FUNC1.FUNC14())){\nif (FUNC16(Var6,Var3,Var9)){\nFUNC7(Var6,Var3); \nVar9.FUNC17(Var3); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "is_valid_shared_exe",
    "Source": false,
    "Sink": false,
    "idx": 11,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 456,
    "label": -3,
    "slices": [
      "is_valid_shared_exe( const char *name )\n",
      "\tif ((strlen(name) < 4) || (strncmp(name, \"exe-\", 4) != 0)) {\n",
      "\tMyString path;\n",
      "\tpath.sprintf(\"%s/%s\", Spool, name);\n",
      "\tint count = link_count(path.Value());\n",
      "\tif (count == 1) {\n",
      "\tif (count == -1) {\n",
      "\t\tdprintf(D_ALWAYS, \"link_count error on %s; not deleting\\n\", name);\n"
    ],
    "tokenized": "FUNC1(const char *Var1)\nif ((strlen(Var1)<4)||(FUNC2(Var1,STRING,4) != 0)){\nSTRUCT1  Var2; \nVar2.sprintf(STRING,Var3,Var1); \nint  Var4=FUNC3(Var2.FUNC4()); \nif (Var4 == 1){\nif (Var4 == -1){\nFUNC5(Var5,STRING,Var1); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "is_ckpt_file",
    "Source": false,
    "Sink": false,
    "idx": 12,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strstr",
    "line": 481,
    "label": -3,
    "slices": [
      "is_ckpt_file( const char *name )\n",
      "\tif( strstr(name,\"cluster\") ) {\n",
      "\t\treturn is_v3_ckpt( name );\n",
      "else\n",
      "\t\treturn is_v2_ckpt( name );\n"
    ],
    "tokenized": "FUNC1(const char *Var1)\nif (strstr(Var1,STRING)){\nreturn FUNC2(Var1); \nelse \nreturn FUNC3(Var1); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "grab_val",
    "Source": false,
    "Sink": false,
    "idx": 13,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strstr",
    "line": 501,
    "label": -3,
    "slices": [
      "grab_val( const char *str, const char *pattern )\n",
      "\tchar const *ptr;\n",
      "\tif( (ptr = strstr(str,pattern)) ) {\n",
      "\t\treturn atoi(ptr + strlen(pattern) );\n"
    ],
    "tokenized": "FUNC1(const char *Var1,const char *Var2)\nchar const *Var3; \nif ((Var3=strstr(Var1,Var2))){\nreturn FUNC2(Var3+strlen(Var2)); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "grab_val",
    "Source": false,
    "Sink": false,
    "idx": 14,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "atoi",
    "line": 502,
    "label": -3,
    "slices": [
      "grab_val( const char *str, const char *pattern )\n",
      "\tchar const *ptr;\n",
      "\tif( (ptr = strstr(str,pattern)) ) {\n",
      "\t\treturn atoi(ptr + strlen(pattern) );\n"
    ],
    "tokenized": "FUNC1(const char *Var1,const char *Var2)\nchar const *Var3; \nif ((Var3=strstr(Var1,Var2))){\nreturn FUNC2(Var3+strlen(Var2)); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "grab_val",
    "Source": false,
    "Sink": false,
    "idx": 15,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 502,
    "label": -3,
    "slices": [
      "grab_val( const char *str, const char *pattern )\n",
      "\tchar const *ptr;\n",
      "\tif( (ptr = strstr(str,pattern)) ) {\n",
      "\t\treturn atoi(ptr + strlen(pattern) );\n"
    ],
    "tokenized": "FUNC1(const char *Var1,const char *Var2)\nchar const *Var3; \nif ((Var3=strstr(Var1,Var2))){\nreturn FUNC2(Var3+strlen(Var2)); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "is_myproxy_file",
    "Source": false,
    "Sink": false,
    "idx": 16,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "sscanf",
    "line": 573,
    "label": -3,
    "slices": [
      "is_myproxy_file( const char *name )\n",
      "\tint rc = sscanf( name, \"mpp.%d.%d\", &cluster, &proc );\n"
    ],
    "tokenized": "FUNC1(const char *Var1)\nint  Var2=sscanf(Var1,STRING,&Var3,&Var4); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "is_ccb_file",
    "Source": false,
    "Sink": false,
    "idx": 17,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strstr",
    "line": 587,
    "label": -3,
    "slices": ["is_ccb_file( const char *name )\n"],
    "tokenized": "FUNC1(const char *Var1)\n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "rec_lock_cleanup",
    "Source": false,
    "Sink": false,
    "idx": 18,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "unlink",
    "line": 743,
    "label": -3,
    "slices": [
      "void rec_lock_cleanup(const char *path, int depth, bool remove_self) {\n",
      "\tFileLock *lock = NULL;\n",
      "\tif (depth == 0) {\n",
      "\tDirectory *dir = new Directory(path);\n",
      "\tif (dir == NULL) {\n",
      "\tconst char *entry;\n",
      "\twhile ((entry = dir->Next()) != 0) {\n",
      "\t\tif (!dir->IsDirectory() && depth > 1) { // clean up files floating around randomly -- maybe from older releases\n",
      "\t\t\tint res = unlink(dir->GetFullPath());\n",
      "else\n",
      "\t\t\trec_lock_cleanup(dir->GetFullPath(), depth-1, true);\n",
      "\t\tint res = rmdir(path);\n"
    ],
    "tokenized": "void FUNC1(const char *Var1,int  Var2,bool  Var3){\nSTRUCT1 *Var4=NULL ; \nif (Var2 == 0){\nSTRUCT2 *Var5=new STRUCT2(Var1); \nif (Var5 == NULL ){\nconst char *Var6; \nwhile ((Var6=Var5->FUNC2()) != 0){\nif (!Var5->FUNC3()&&Var2>1){//Var7  Var8  Var9  Var10  Var11  Var12  Var13  Var14  Var15  STRUCT3  Var16\nint  Var17=unlink(Var5->FUNC4()); \nelse \nFUNC1(Var5->FUNC4(),Var2-1,true ); \nint  Var17=FUNC5(Var1); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "rec_lock_cleanup",
    "Source": false,
    "Sink": false,
    "idx": 19,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 745,
    "label": -3,
    "slices": [
      "void rec_lock_cleanup(const char *path, int depth, bool remove_self) {\n",
      "\tFileLock *lock = NULL;\n",
      "\tif (depth == 0) {\n",
      "\t\tlock = new FileLock(path, true, true);\n",
      "\tDirectory *dir = new Directory(path);\n",
      "\tif (dir == NULL) {\n",
      "\tconst char *entry;\n",
      "\twhile ((entry = dir->Next()) != 0) {\n",
      "\t\tif (!dir->IsDirectory() && depth > 1) { // clean up files floating around randomly -- maybe from older releases\n",
      "\t\t\tlock = new FileLock(path, false, true);\n",
      "\t\t\tbool result = lock->obtain(WRITE_LOCK);\n",
      "\t\t\tif (!result) {\n",
      "\t\t\t\t\tdprintf(D_FULLDEBUG, \"Cannot lock %s\\n\", path);\n",
      "\t\t\tint res = unlink(dir->GetFullPath());\n",
      "\t\t\tif (res != 0) {\n",
      "\t\t\t\tdprintf(D_FULLDEBUG, \"Cannot delete %s (%s) \\n\", path, strerror(errno));\n",
      "\tif (remove_self) {\t\t\n",
      "\t\tint res = rmdir(path);\n",
      "\t\tif (res != 0) {\n",
      "\t\t\tdprintf(D_FULLDEBUG, \"Directory %s could not be removed.\\n\", path);\n"
    ],
    "tokenized": "void FUNC1(const char *Var1,int  Var2,bool  Var3){\nSTRUCT1 *Var4=NULL ; \nif (Var2 == 0){\nVar4=new STRUCT1(Var1,true ,true ); \nSTRUCT2 *Var5=new STRUCT2(Var1); \nif (Var5 == NULL ){\nconst char *Var6; \nwhile ((Var6=Var5->FUNC2()) != 0){\nif (!Var5->FUNC3()&&Var2>1){//Var7  Var8  Var9  Var10  Var11  Var12  Var13  Var14  Var15  STRUCT3  Var16\nVar4=new STRUCT1(Var1,false ,true ); \nbool  Var17=Var4->FUNC4(Var18); \nif (!Var17){\nFUNC5(Var19,STRING,Var1); \nint  Var20=unlink(Var5->FUNC6()); \nif (Var20 != 0){\nFUNC5(Var19,STRING,Var1,strerror(Var21)); \nif (Var3){\nint  Var20=FUNC7(Var1); \nif (Var20 != 0){\nFUNC5(Var19,STRING,Var1); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "init_params",
    "Source": false,
    "Sink": false,
    "idx": 20,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "free",
    "line": 811,
    "label": -3,
    "slices": [
      "\tchar *Execute = param(\"EXECUTE\");\n",
      "\tif( Execute ) {\n",
      "\t\tExecuteDirs.append(Execute);\n",
      "\t\tfree(Execute);\n"
    ],
    "tokenized": "char *Var1=FUNC1(STRING); \nif (Var1){\nVar2.FUNC2(Var1); \nfree(Var1); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "init_params",
    "Source": false,
    "Sink": false,
    "idx": 21,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "free",
    "line": 828,
    "label": -3,
    "slices": [
      "\tchar *Execute = param(\"EXECUTE\");\n",
      "\tExtArray<ParamValue> *params = param_all();\n",
      "\tfor( int p=params->length(); p--; ) {\n",
      "\t\tchar const *name = (*params)[p].name.Value();\n",
      "\t\tchar *tail = NULL;\n",
      "\t\tif( strncasecmp( name, \"SLOT\", 4 ) != 0 ) continue;\n",
      "\t\tif( tail <= name || strcasecmp( tail, \"_EXECUTE\" ) != 0 ) continue;\n",
      "\t\tExecute = param(name);\n",
      "\t\tif( Execute ) {\n",
      "\t\t\tif( !ExecuteDirs.contains( Execute ) ) {\n",
      "\t\t\t\tExecuteDirs.append( Execute );\n",
      "\t\t\tfree( Execute );\n"
    ],
    "tokenized": "char *Var1=FUNC1(STRING); \nVar2<Var3>*Var4=FUNC2(); \nfor (int  Var5=Var4->FUNC3(); Var5  Var6; ){\nchar const *Var7=(*Var4)[Var5].memberVar1.FUNC4(); \nchar *Var8=NULL ; \nif (FUNC5(memberVar1,STRING,4) != 0) continue ; \nif (Var8 <=  memberVar1||FUNC6(Var8,STRING) != 0) continue ; \nVar1=FUNC1(memberVar1); \nif (Var1){\nif (!Var9.FUNC7(Var1)){\nVar9.FUNC8(Var1); \nfree(Var1); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "get_machine_state",
    "Source": false,
    "Sink": false,
    "idx": 22,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "free",
    "line": 932,
    "label": -3,
    "slices": [
      "\tchar* state_str = NULL;\n",
      "\tState s;\n",
      "\tReliSock* sock;\n",
      "\tDaemon my_startd( DT_STARTD );\n",
      "\tif( ! my_startd.locate() ) {\n",
      "\tif( !(sock = (ReliSock*)\n",
      "\tif( !sock->code( state_str ) || !sock->end_of_message() ) {\n",
      "\t\tfree(state_str);\n",
      "\ts = string_to_state( state_str );\n",
      "\tfree(state_str);\n"
    ],
    "tokenized": "char *Var1=NULL ; \nSTRUCT1  Var2; \nSTRUCT2 *Var3; \nSTRUCT3 FUNC1(Var4); \nif (!FUNC1.FUNC2()){\nif (!(Var3=(STRUCT2 *)\nif (!Var3->FUNC3(Var1)||!Var3->FUNC4()){\nfree(Var1); \nVar2=FUNC5(Var1); \nfree(Var1); \n"
  },
  {
    "FileName": "preen_before.cpp",
    "Caller": "get_machine_state",
    "Source": false,
    "Sink": false,
    "idx": 23,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "free",
    "line": 940,
    "label": -3,
    "slices": [
      "\tchar* state_str = NULL;\n",
      "\tState s;\n",
      "\tReliSock* sock;\n",
      "\tDaemon my_startd( DT_STARTD );\n",
      "\tif( ! my_startd.locate() ) {\n",
      "\tif( !(sock = (ReliSock*)\n",
      "\tif( !sock->code( state_str ) || !sock->end_of_message() ) {\n",
      "\t\tfree(state_str);\n",
      "\ts = string_to_state( state_str );\n",
      "\tfree(state_str);\n"
    ],
    "tokenized": "char *Var1=NULL ; \nSTRUCT1  Var2; \nSTRUCT2 *Var3; \nSTRUCT3 FUNC1(Var4); \nif (!FUNC1.FUNC2()){\nif (!(Var3=(STRUCT2 *)\nif (!Var3->FUNC3(Var1)||!Var3->FUNC4()){\nfree(Var1); \nVar2=FUNC5(Var1); \nfree(Var1); \n"
  }
]
