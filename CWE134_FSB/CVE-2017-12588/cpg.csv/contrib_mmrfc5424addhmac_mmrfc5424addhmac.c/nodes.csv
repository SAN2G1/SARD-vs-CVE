command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	12548	File	data/converged/CVE-2017-12588_rsyslog/contrib_mmrfc5424addhmac_mmrfc5424addhmac.c								
ANR	12549	ClassDef	_instanceData	75:8:2225:2439							
ANR	12550	DeclStmt									
ANR	12551	Decl							uchar	uchar *	key
ANR	12552	DeclStmt									
ANR	12553	Decl							int16_t	int16_t	keylen
ANR	12554	DeclStmt									
ANR	12555	Decl							uchar	uchar *	sdid
ANR	12556	DeclStmt									
ANR	12557	Decl							int16_t	int16_t	sdidLen
ANR	12558	DeclStmt									
ANR	12559	Decl							const EVP_MD	const EVP_MD *	algo
ANR	12560	DeclStmt									
ANR	12561	Decl							_instanceData	_instanceData	instanceData
ANR	12562	ClassDef	wrkrInstanceData	83:8:2450:2518							
ANR	12563	DeclStmt									
ANR	12564	Decl							instanceData	instanceData *	pData
ANR	12565	DeclStmt									
ANR	12566	Decl							wrkrInstanceData	wrkrInstanceData	wrkrInstanceData_t
ANR	12567	ClassDef	modConfData_s	87:0:2521:2594							
ANR	12568	DeclStmt									
ANR	12569	Decl							rsconf_t	rsconf_t *	pConf
ANR	12570	DeclStmt									
ANR	12571	Decl							modConfData_t	modConfData_t *	loadModConf
ANR	12572	DeclStmt									
ANR	12573	Decl							modConfData_t	modConfData_t *	runModConf
ANR	12574	DeclStmt									
ANR	12575	Decl							struct cnfparamdescr	struct cnfparamdescr [ ]	actpdescr
ANR	12576	DeclStmt									
ANR	12577	Decl							struct cnfparamblk	struct cnfparamblk	actpblk
ANR	12578	DeclStmt									
ANR	12579	Decl							BEGINbeginCnfLoad CODESTARTbeginCnfLoad	BEGINbeginCnfLoad CODESTARTbeginCnfLoad	loadModConf
ANR	12580	DeclStmt									
ANR	12581	Decl							ENDbeginCnfLoad BEGINendCnfLoad CODESTARTendCnfLoad ENDendCnfLoad BEGINcheckCnf CODESTARTcheckCnf ENDcheckCnf BEGINactivateCnf CODESTARTactivateCnf	ENDbeginCnfLoad BEGINendCnfLoad CODESTARTendCnfLoad ENDendCnfLoad BEGINcheckCnf CODESTARTcheckCnf ENDcheckCnf BEGINactivateCnf CODESTARTactivateCnf	runModConf
ANR	12582	Function	setInstParamDefaults	156:0:3842:3925							
ANR	12583	FunctionDef	setInstParamDefaults (instanceData * pData)		12582	0					
ANR	12584	CompoundStatement		158:0:3903:3925	12582	0					
ANR	12585	ExpressionStatement	pData -> key = NULL	159:1:3906:3923	12582	0	True				
ANR	12586	AssignmentExpression	pData -> key = NULL		12582	0		=			
ANR	12587	PtrMemberAccess	pData -> key		12582	0					
ANR	12588	Identifier	pData		12582	0					
ANR	12589	Identifier	key		12582	1					
ANR	12590	Identifier	NULL		12582	1					
ANR	12591	ReturnType	static inline void		12582	1					
ANR	12592	Identifier	setInstParamDefaults		12582	2					
ANR	12593	ParameterList	instanceData * pData		12582	3					
ANR	12594	Parameter	instanceData * pData	157:21:3882:3900	12582	0	True				
ANR	12595	ParameterType	instanceData *		12582	0					
ANR	12596	Identifier	pData		12582	1					
ANR	12597	CFGEntryNode	ENTRY		12582		True				
ANR	12598	CFGExitNode	EXIT		12582		True				
ANR	12599	Symbol	pData		12582						
ANR	12600	Symbol	NULL		12582						
ANR	12601	Symbol	pData -> key		12582						
ANR	12602	Symbol	* pData		12582						
ANR	12603	DeclStmt									
ANR	12604	Decl							struct cnfparamvals	struct cnfparamvals *	pvals
ANR	12605	DeclStmt									
ANR	12606	Decl							char	char *	ciphername
ANR	12607	DeclStmt									
ANR	12608	Decl							int	int	i
ANR	12609	DeclStmt									
ANR	12610	Decl							CODESTARTnewActInst	CODESTARTnewActInst	DBGPRINTF
ANR	12611	DeclStmt									
ANR	12612	Decl							CODE_STD_FINALIZERnewActInst	CODE_STD_FINALIZERnewActInst	cnfparamvalsDestruct
ANR	12613	Function	hexify	221:0:5610:5945							
ANR	12614	FunctionDef	"hexify (uchar * bin , int len , uchar * print)"		12613	0					
ANR	12615	CompoundStatement		223:0:5664:5945	12613	0					
ANR	12616	Statement	static	224:1:5667:5672	12613	0	True				
ANR	12617	IdentifierDeclStatement	"const char hexchars [ 16 ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'a' , 'b' , 'c' , 'd' , 'e' , 'f' } ;"	224:8:5674:5769	12613	1	True				
ANR	12618	IdentifierDecl	"hexchars [ 16 ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'a' , 'b' , 'c' , 'd' , 'e' , 'f' }"		12613	0					
ANR	12619	IdentifierDeclType	const char [ 16 ]		12613	0					
ANR	12620	Identifier	hexchars		12613	1					
ANR	12621	PrimaryExpression	16		12613	2					
ANR	12622	AssignmentExpression	"hexchars [ 16 ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'a' , 'b' , 'c' , 'd' , 'e' , 'f' }"		12613	3		=			
ANR	12623	Identifier	hexchars		12613	0					
ANR	12624	InitializerList	'0'		12613	1					
ANR	12625	PrimaryExpression	'0'		12613	0					
ANR	12626	PrimaryExpression	'1'		12613	1					
ANR	12627	PrimaryExpression	'2'		12613	2					
ANR	12628	PrimaryExpression	'3'		12613	3					
ANR	12629	PrimaryExpression	'4'		12613	4					
ANR	12630	PrimaryExpression	'5'		12613	5					
ANR	12631	PrimaryExpression	'6'		12613	6					
ANR	12632	PrimaryExpression	'7'		12613	7					
ANR	12633	PrimaryExpression	'8'		12613	8					
ANR	12634	PrimaryExpression	'9'		12613	9					
ANR	12635	PrimaryExpression	'a'		12613	10					
ANR	12636	PrimaryExpression	'b'		12613	11					
ANR	12637	PrimaryExpression	'c'		12613	12					
ANR	12638	PrimaryExpression	'd'		12613	13					
ANR	12639	PrimaryExpression	'e'		12613	14					
ANR	12640	PrimaryExpression	'f'		12613	15					
ANR	12641	IdentifierDeclStatement	"int iSrc , iDst ;"	226:1:5772:5786	12613	2	True				
ANR	12642	IdentifierDecl	iSrc		12613	0					
ANR	12643	IdentifierDeclType	int		12613	0					
ANR	12644	Identifier	iSrc		12613	1					
ANR	12645	IdentifierDecl	iDst		12613	1					
ANR	12646	IdentifierDeclType	int		12613	0					
ANR	12647	Identifier	iDst		12613	1					
ANR	12648	ForStatement	for ( iSrc = iDst = 0 ; iSrc < len ; ++ iSrc )		12613	3					
ANR	12649	ForInit	iSrc = iDst = 0 ;	228:5:5794:5810	12613	0	True				
ANR	12650	AssignmentExpression	iSrc = iDst = 0		12613	0		=			
ANR	12651	Identifier	iSrc		12613	0					
ANR	12652	AssignmentExpression	iDst = 0		12613	1		=			
ANR	12653	Identifier	iDst		12613	0					
ANR	12654	PrimaryExpression	0		12613	1					
ANR	12655	Condition	iSrc < len	228:23:5812:5821	12613	1	True				
ANR	12656	RelationalExpression	iSrc < len		12613	0		<			
ANR	12657	Identifier	iSrc		12613	0					
ANR	12658	Identifier	len		12613	1					
ANR	12659	UnaryExpression	++ iSrc	228:36:5825:5830	12613	2	True				
ANR	12660	IncDec	++		12613	0					
ANR	12661	Identifier	iSrc		12613	1					
ANR	12662	CompoundStatement		6:44:168:168	12613	3					
ANR	12663	ExpressionStatement	print [ iDst ++ ] = hexchars [ bin [ iSrc ] >> 4 ]	229:2:5837:5875	12613	0	True				
ANR	12664	AssignmentExpression	print [ iDst ++ ] = hexchars [ bin [ iSrc ] >> 4 ]		12613	0		=			
ANR	12665	ArrayIndexing	print [ iDst ++ ]		12613	0					
ANR	12666	Identifier	print		12613	0					
ANR	12667	PostIncDecOperationExpression	iDst ++		12613	1					
ANR	12668	Identifier	iDst		12613	0					
ANR	12669	IncDec	++		12613	1					
ANR	12670	ArrayIndexing	hexchars [ bin [ iSrc ] >> 4 ]		12613	1					
ANR	12671	Identifier	hexchars		12613	0					
ANR	12672	ShiftExpression	bin [ iSrc ] >> 4		12613	1		>>			
ANR	12673	ArrayIndexing	bin [ iSrc ]		12613	0					
ANR	12674	Identifier	bin		12613	0					
ANR	12675	Identifier	iSrc		12613	1					
ANR	12676	PrimaryExpression	4		12613	1					
ANR	12677	ExpressionStatement	print [ iDst ++ ] = hexchars [ bin [ iSrc ] & 0x0f ]	230:2:5879:5919	12613	1	True				
ANR	12678	AssignmentExpression	print [ iDst ++ ] = hexchars [ bin [ iSrc ] & 0x0f ]		12613	0		=			
ANR	12679	ArrayIndexing	print [ iDst ++ ]		12613	0					
ANR	12680	Identifier	print		12613	0					
ANR	12681	PostIncDecOperationExpression	iDst ++		12613	1					
ANR	12682	Identifier	iDst		12613	0					
ANR	12683	IncDec	++		12613	1					
ANR	12684	ArrayIndexing	hexchars [ bin [ iSrc ] & 0x0f ]		12613	1					
ANR	12685	Identifier	hexchars		12613	0					
ANR	12686	BitAndExpression	bin [ iSrc ] & 0x0f		12613	1		&			
ANR	12687	ArrayIndexing	bin [ iSrc ]		12613	0					
ANR	12688	Identifier	bin		12613	0					
ANR	12689	Identifier	iSrc		12613	1					
ANR	12690	PrimaryExpression	0x0f		12613	1					
ANR	12691	ExpressionStatement	print [ iDst ] = '\\0'	232:1:5925:5943	12613	4	True				
ANR	12692	AssignmentExpression	print [ iDst ] = '\\0'		12613	0		=			
ANR	12693	ArrayIndexing	print [ iDst ]		12613	0					
ANR	12694	Identifier	print		12613	0					
ANR	12695	Identifier	iDst		12613	1					
ANR	12696	PrimaryExpression	'\\0'		12613	1					
ANR	12697	ReturnType	static void		12613	1					
ANR	12698	Identifier	hexify		12613	2					
ANR	12699	ParameterList	"uchar * bin , int len , uchar * print"		12613	3					
ANR	12700	Parameter	uchar * bin	222:7:5629:5638	12613	0	True				
ANR	12701	ParameterType	uchar *		12613	0					
ANR	12702	Identifier	bin		12613	1					
ANR	12703	Parameter	int len	222:19:5641:5647	12613	1	True				
ANR	12704	ParameterType	int		12613	0					
ANR	12705	Identifier	len		12613	1					
ANR	12706	Parameter	uchar * print	222:28:5650:5661	12613	2	True				
ANR	12707	ParameterType	uchar *		12613	0					
ANR	12708	Identifier	print		12613	1					
ANR	12709	CFGEntryNode	ENTRY		12613		True				
ANR	12710	CFGExitNode	EXIT		12613		True				
ANR	12711	Symbol	bin		12613						
ANR	12712	Symbol	iSrc		12613						
ANR	12713	Symbol	* hexchars		12613						
ANR	12714	Symbol	iDst		12613						
ANR	12715	Symbol	* iDst		12613						
ANR	12716	Symbol	* iSrc		12613						
ANR	12717	Symbol	* bin		12613						
ANR	12718	Symbol	print		12613						
ANR	12719	Symbol	len		12613						
ANR	12720	Symbol	* print		12613						
ANR	12721	Symbol	hexchars		12613						
ANR	12722	Symbol	* * bin		12613						
ANR	12723	Symbol	* * iSrc		12613						
ANR	12724	Function	skipSDID	241:0:6173:6462							
ANR	12725	FunctionDef	"skipSDID (uchar * sdbuf , int sdlen , int * rootIdx)"		12724	0					
ANR	12726	CompoundStatement		243:0:6233:6462	12724	0					
ANR	12727	IdentifierDeclStatement	int i ;	244:1:6236:6241	12724	0	True				
ANR	12728	IdentifierDecl	i		12724	0					
ANR	12729	IdentifierDeclType	int		12724	0					
ANR	12730	Identifier	i		12724	1					
ANR	12731	ExpressionStatement	i = * rootIdx	245:1:6244:6256	12724	1	True				
ANR	12732	AssignmentExpression	i = * rootIdx		12724	0		=			
ANR	12733	Identifier	i		12724	0					
ANR	12734	UnaryOperationExpression	* rootIdx		12724	1					
ANR	12735	UnaryOperator	*		12724	0					
ANR	12736	Identifier	rootIdx		12724	1					
ANR	12737	WhileStatement	while ( i < sdlen )		12724	2					
ANR	12738	Condition	i < sdlen	246:7:6265:6273	12724	0	True				
ANR	12739	RelationalExpression	i < sdlen		12724	0		<			
ANR	12740	Identifier	i		12724	0					
ANR	12741	Identifier	sdlen		12724	1					
ANR	12742	CompoundStatement		4:18:42:42	12724	1					
ANR	12743	IfStatement	if ( sdbuf [ i ] == ']' )		12724	0					
ANR	12744	Condition	sdbuf [ i ] == ']'	247:5:6283:6297	12724	0	True				
ANR	12745	EqualityExpression	sdbuf [ i ] == ']'		12724	0		==			
ANR	12746	ArrayIndexing	sdbuf [ i ]		12724	0					
ANR	12747	Identifier	sdbuf		12724	0					
ANR	12748	Identifier	i		12724	1					
ANR	12749	PrimaryExpression	']'		12724	1					
ANR	12750	CompoundStatement		5:22:66:66	12724	1					
ANR	12751	IfStatement	if ( i > * rootIdx && sdbuf [ i - 1 ] == '\\\\' )		12724	0					
ANR	12752	Condition	i > * rootIdx && sdbuf [ i - 1 ] == '\\\\'	248:6:6308:6341	12724	0	True				
ANR	12753	AndExpression	i > * rootIdx && sdbuf [ i - 1 ] == '\\\\'		12724	0		&&			
ANR	12754	RelationalExpression	i > * rootIdx		12724	0		>			
ANR	12755	Identifier	i		12724	0					
ANR	12756	UnaryOperationExpression	* rootIdx		12724	1					
ANR	12757	UnaryOperator	*		12724	0					
ANR	12758	Identifier	rootIdx		12724	1					
ANR	12759	EqualityExpression	sdbuf [ i - 1 ] == '\\\\'		12724	1		==			
ANR	12760	ArrayIndexing	sdbuf [ i - 1 ]		12724	0					
ANR	12761	Identifier	sdbuf		12724	0					
ANR	12762	AdditiveExpression	i - 1		12724	1		-			
ANR	12763	Identifier	i		12724	0					
ANR	12764	PrimaryExpression	1		12724	1					
ANR	12765	PrimaryExpression	'\\\\'		12724	1					
ANR	12766	CompoundStatement		6:42:110:110	12724	1					
ANR	12767	ExpressionStatement		249:4:6350:6350	12724	0	True				
ANR	12768	ElseStatement	else		12724	0					
ANR	12769	CompoundStatement		8:10:158:158	12724	0					
ANR	12770	ExpressionStatement	++ i	251:4:6398:6401	12724	0	True				
ANR	12771	UnaryExpression	++ i		12724	0					
ANR	12772	IncDec	++		12724	0					
ANR	12773	Identifier	i		12724	1					
ANR	12774	BreakStatement	break ;	252:4:6421:6426	12724	1	True				
ANR	12775	ExpressionStatement	++ i	255:2:6439:6442	12724	1	True				
ANR	12776	UnaryExpression	++ i		12724	0					
ANR	12777	IncDec	++		12724	0					
ANR	12778	Identifier	i		12724	1					
ANR	12779	ExpressionStatement	* rootIdx = i	257:1:6448:6460	12724	3	True				
ANR	12780	AssignmentExpression	* rootIdx = i		12724	0		=			
ANR	12781	UnaryOperationExpression	* rootIdx		12724	0					
ANR	12782	UnaryOperator	*		12724	0					
ANR	12783	Identifier	rootIdx		12724	1					
ANR	12784	Identifier	i		12724	1					
ANR	12785	ReturnType	static void		12724	1					
ANR	12786	Identifier	skipSDID		12724	2					
ANR	12787	ParameterList	"uchar * sdbuf , int sdlen , int * rootIdx"		12724	3					
ANR	12788	Parameter	uchar * sdbuf	242:9:6194:6205	12724	0	True				
ANR	12789	ParameterType	uchar *		12724	0					
ANR	12790	Identifier	sdbuf		12724	1					
ANR	12791	Parameter	int sdlen	242:23:6208:6216	12724	1	True				
ANR	12792	ParameterType	int		12724	0					
ANR	12793	Identifier	sdlen		12724	1					
ANR	12794	Parameter	int * rootIdx	242:34:6219:6230	12724	2	True				
ANR	12795	ParameterType	int *		12724	0					
ANR	12796	Identifier	rootIdx		12724	1					
ANR	12797	CFGEntryNode	ENTRY		12724		True				
ANR	12798	CFGExitNode	EXIT		12724		True				
ANR	12799	Symbol	sdbuf		12724						
ANR	12800	Symbol	* i		12724						
ANR	12801	Symbol	sdlen		12724						
ANR	12802	Symbol	* rootIdx		12724						
ANR	12803	Symbol	* sdbuf		12724						
ANR	12804	Symbol	rootIdx		12724						
ANR	12805	Symbol	i		12724						
ANR	12806	Function	getSDID	260:0:6465:6808							
ANR	12807	FunctionDef	"getSDID (uchar * sdbuf , int sdlen , int * rootIdx , uchar * sdid)"		12806	0					
ANR	12808	CompoundStatement		262:0:6537:6808	12806	0					
ANR	12809	IdentifierDeclStatement	"int i , j ;"	263:1:6540:6548	12806	0	True				
ANR	12810	IdentifierDecl	i		12806	0					
ANR	12811	IdentifierDeclType	int		12806	0					
ANR	12812	Identifier	i		12806	1					
ANR	12813	IdentifierDecl	j		12806	1					
ANR	12814	IdentifierDeclType	int		12806	0					
ANR	12815	Identifier	j		12806	1					
ANR	12816	ExpressionStatement	i = * rootIdx	264:1:6551:6563	12806	1	True				
ANR	12817	AssignmentExpression	i = * rootIdx		12806	0		=			
ANR	12818	Identifier	i		12806	0					
ANR	12819	UnaryOperationExpression	* rootIdx		12806	1					
ANR	12820	UnaryOperator	*		12806	0					
ANR	12821	Identifier	rootIdx		12806	1					
ANR	12822	ExpressionStatement	j = 0	265:1:6566:6571	12806	2	True				
ANR	12823	AssignmentExpression	j = 0		12806	0		=			
ANR	12824	Identifier	j		12806	0					
ANR	12825	PrimaryExpression	0		12806	1					
ANR	12826	IfStatement	if ( sdbuf [ i ] != '[' )		12806	3					
ANR	12827	Condition	sdbuf [ i ] != '['	267:4:6578:6592	12806	0	True				
ANR	12828	EqualityExpression	sdbuf [ i ] != '['		12806	0		!=			
ANR	12829	ArrayIndexing	sdbuf [ i ]		12806	0					
ANR	12830	Identifier	sdbuf		12806	0					
ANR	12831	Identifier	i		12806	1					
ANR	12832	PrimaryExpression	'['		12806	1					
ANR	12833	CompoundStatement		6:21:57:57	12806	1					
ANR	12834	ExpressionStatement	++ i	268:2:6599:6602	12806	0	True				
ANR	12835	UnaryExpression	++ i		12806	0					
ANR	12836	IncDec	++		12806	0					
ANR	12837	Identifier	i		12806	1					
ANR	12838	GotoStatement	goto done ;	269:2:6606:6615	12806	1	True				
ANR	12839	Identifier	done		12806	0					
ANR	12840	ExpressionStatement	++ i	272:1:6623:6626	12806	4	True				
ANR	12841	UnaryExpression	++ i		12806	0					
ANR	12842	IncDec	++		12806	0					
ANR	12843	Identifier	i		12806	1					
ANR	12844	WhileStatement	"while ( i < sdlen && sdbuf [ i ] != '=' && sdbuf [ i ] != ' ' && sdbuf [ i ] != ']' && sdbuf [ i ] != '""' )"		12806	5					
ANR	12845	Condition	"i < sdlen && sdbuf [ i ] != '=' && sdbuf [ i ] != ' ' && sdbuf [ i ] != ']' && sdbuf [ i ] != '""'"	273:7:6635:6736	12806	0	True				
ANR	12846	AndExpression	"i < sdlen && sdbuf [ i ] != '=' && sdbuf [ i ] != ' ' && sdbuf [ i ] != ']' && sdbuf [ i ] != '""'"		12806	0		&&			
ANR	12847	RelationalExpression	i < sdlen		12806	0		<			
ANR	12848	Identifier	i		12806	0					
ANR	12849	Identifier	sdlen		12806	1					
ANR	12850	AndExpression	"sdbuf [ i ] != '=' && sdbuf [ i ] != ' ' && sdbuf [ i ] != ']' && sdbuf [ i ] != '""'"		12806	1		&&			
ANR	12851	EqualityExpression	sdbuf [ i ] != '='		12806	0		!=			
ANR	12852	ArrayIndexing	sdbuf [ i ]		12806	0					
ANR	12853	Identifier	sdbuf		12806	0					
ANR	12854	Identifier	i		12806	1					
ANR	12855	PrimaryExpression	'='		12806	1					
ANR	12856	AndExpression	"sdbuf [ i ] != ' ' && sdbuf [ i ] != ']' && sdbuf [ i ] != '""'"		12806	1		&&			
ANR	12857	EqualityExpression	sdbuf [ i ] != ' '		12806	0		!=			
ANR	12858	ArrayIndexing	sdbuf [ i ]		12806	0					
ANR	12859	Identifier	sdbuf		12806	0					
ANR	12860	Identifier	i		12806	1					
ANR	12861	PrimaryExpression	' '		12806	1					
ANR	12862	AndExpression	"sdbuf [ i ] != ']' && sdbuf [ i ] != '""'"		12806	1		&&			
ANR	12863	EqualityExpression	sdbuf [ i ] != ']'		12806	0		!=			
ANR	12864	ArrayIndexing	sdbuf [ i ]		12806	0					
ANR	12865	Identifier	sdbuf		12806	0					
ANR	12866	Identifier	i		12806	1					
ANR	12867	PrimaryExpression	']'		12806	1					
ANR	12868	EqualityExpression	"sdbuf [ i ] != '""'"		12806	1		!=			
ANR	12869	ArrayIndexing	sdbuf [ i ]		12806	0					
ANR	12870	Identifier	sdbuf		12806	0					
ANR	12871	Identifier	i		12806	1					
ANR	12872	PrimaryExpression	"'""'"		12806	1					
ANR	12873	CompoundStatement		13:56:201:201	12806	1					
ANR	12874	ExpressionStatement	sdid [ j ++ ] = sdbuf [ i ++ ]	275:2:6743:6765	12806	0	True				
ANR	12875	AssignmentExpression	sdid [ j ++ ] = sdbuf [ i ++ ]		12806	0		=			
ANR	12876	ArrayIndexing	sdid [ j ++ ]		12806	0					
ANR	12877	Identifier	sdid		12806	0					
ANR	12878	PostIncDecOperationExpression	j ++		12806	1					
ANR	12879	Identifier	j		12806	0					
ANR	12880	IncDec	++		12806	1					
ANR	12881	ArrayIndexing	sdbuf [ i ++ ]		12806	1					
ANR	12882	Identifier	sdbuf		12806	0					
ANR	12883	PostIncDecOperationExpression	i ++		12806	1					
ANR	12884	Identifier	i		12806	0					
ANR	12885	IncDec	++		12806	1					
ANR	12886	Label	done :	277:0:6770:6774	12806	6	True				
ANR	12887	Identifier	done		12806	0					
ANR	12888	ExpressionStatement	sdid [ j ] = '\\0'	278:1:6777:6791	12806	7	True				
ANR	12889	AssignmentExpression	sdid [ j ] = '\\0'		12806	0		=			
ANR	12890	ArrayIndexing	sdid [ j ]		12806	0					
ANR	12891	Identifier	sdid		12806	0					
ANR	12892	Identifier	j		12806	1					
ANR	12893	PrimaryExpression	'\\0'		12806	1					
ANR	12894	ExpressionStatement	* rootIdx = i	279:1:6794:6806	12806	8	True				
ANR	12895	AssignmentExpression	* rootIdx = i		12806	0		=			
ANR	12896	UnaryOperationExpression	* rootIdx		12806	0					
ANR	12897	UnaryOperator	*		12806	0					
ANR	12898	Identifier	rootIdx		12806	1					
ANR	12899	Identifier	i		12806	1					
ANR	12900	ReturnType	static void		12806	1					
ANR	12901	Identifier	getSDID		12806	2					
ANR	12902	ParameterList	"uchar * sdbuf , int sdlen , int * rootIdx , uchar * sdid"		12806	3					
ANR	12903	Parameter	uchar * sdbuf	261:8:6485:6496	12806	0	True				
ANR	12904	ParameterType	uchar *		12806	0					
ANR	12905	Identifier	sdbuf		12806	1					
ANR	12906	Parameter	int sdlen	261:22:6499:6507	12806	1	True				
ANR	12907	ParameterType	int		12806	0					
ANR	12908	Identifier	sdlen		12806	1					
ANR	12909	Parameter	int * rootIdx	261:33:6510:6521	12806	2	True				
ANR	12910	ParameterType	int *		12806	0					
ANR	12911	Identifier	rootIdx		12806	1					
ANR	12912	Parameter	uchar * sdid	261:47:6524:6534	12806	3	True				
ANR	12913	ParameterType	uchar *		12806	0					
ANR	12914	Identifier	sdid		12806	1					
ANR	12915	CFGEntryNode	ENTRY		12806		True				
ANR	12916	CFGExitNode	EXIT		12806		True				
ANR	12917	Symbol	sdbuf		12806						
ANR	12918	Symbol	* i		12806						
ANR	12919	Symbol	* j		12806						
ANR	12920	Symbol	* sdid		12806						
ANR	12921	Symbol	sdlen		12806						
ANR	12922	Symbol	* rootIdx		12806						
ANR	12923	Symbol	* sdbuf		12806						
ANR	12924	Symbol	rootIdx		12806						
ANR	12925	Symbol	sdid		12806						
ANR	12926	Symbol	i		12806						
ANR	12927	Symbol	j		12806						
ANR	12928	Function	isHmacPresent	283:0:6856:7350							
ANR	12929	FunctionDef	"isHmacPresent (instanceData * pData , smsg_t * pMsg)"		12928	0					
ANR	12930	CompoundStatement		285:0:6918:7350	12928	0					
ANR	12931	IdentifierDeclStatement	uchar * sdbuf ;	286:1:6921:6933	12928	0	True				
ANR	12932	IdentifierDecl	* sdbuf		12928	0					
ANR	12933	IdentifierDeclType	uchar *		12928	0					
ANR	12934	Identifier	sdbuf		12928	1					
ANR	12935	IdentifierDeclStatement	rs_size_t sdlen ;	287:1:6936:6951	12928	1	True				
ANR	12936	IdentifierDecl	sdlen		12928	0					
ANR	12937	IdentifierDeclType	rs_size_t		12928	0					
ANR	12938	Identifier	sdlen		12928	1					
ANR	12939	IdentifierDeclStatement	sbool found ;	288:1:6954:6965	12928	2	True				
ANR	12940	IdentifierDecl	found		12928	0					
ANR	12941	IdentifierDeclType	sbool		12928	0					
ANR	12942	Identifier	found		12928	1					
ANR	12943	IdentifierDeclStatement	int i ;	289:1:6968:6973	12928	3	True				
ANR	12944	IdentifierDecl	i		12928	0					
ANR	12945	IdentifierDeclType	int		12928	0					
ANR	12946	Identifier	i		12928	1					
ANR	12947	IdentifierDeclStatement	uchar sdid [ 33 ] ;	290:1:6976:6990	12928	4	True				
ANR	12948	IdentifierDecl	sdid [ 33 ]		12928	0					
ANR	12949	IdentifierDeclType	uchar [ 33 ]		12928	0					
ANR	12950	Identifier	sdid		12928	1					
ANR	12951	PrimaryExpression	33		12928	2					
ANR	12952	ExpressionStatement	"MsgGetStructuredData ( pMsg , & sdbuf , & sdlen )"	292:1:7021:7063	12928	5	True				
ANR	12953	CallExpression	"MsgGetStructuredData ( pMsg , & sdbuf , & sdlen )"		12928	0					
ANR	12954	Callee	MsgGetStructuredData		12928	0					
ANR	12955	Identifier	MsgGetStructuredData		12928	0					
ANR	12956	ArgumentList	pMsg		12928	1					
ANR	12957	Argument	pMsg		12928	0					
ANR	12958	Identifier	pMsg		12928	0					
ANR	12959	Argument	& sdbuf		12928	1					
ANR	12960	UnaryOperationExpression	& sdbuf		12928	0					
ANR	12961	UnaryOperator	&		12928	0					
ANR	12962	Identifier	sdbuf		12928	1					
ANR	12963	Argument	& sdlen		12928	2					
ANR	12964	UnaryOperationExpression	& sdlen		12928	0					
ANR	12965	UnaryOperator	&		12928	0					
ANR	12966	Identifier	sdlen		12928	1					
ANR	12967	ExpressionStatement	found = 0	293:1:7066:7075	12928	6	True				
ANR	12968	AssignmentExpression	found = 0		12928	0		=			
ANR	12969	Identifier	found		12928	0					
ANR	12970	PrimaryExpression	0		12928	1					
ANR	12971	IfStatement	if ( sdbuf [ 0 ] == '-' )		12928	7					
ANR	12972	Condition	sdbuf [ 0 ] == '-'	295:4:7082:7096	12928	0	True				
ANR	12973	EqualityExpression	sdbuf [ 0 ] == '-'		12928	0		==			
ANR	12974	ArrayIndexing	sdbuf [ 0 ]		12928	0					
ANR	12975	Identifier	sdbuf		12928	0					
ANR	12976	PrimaryExpression	0		12928	1					
ANR	12977	PrimaryExpression	'-'		12928	1					
ANR	12978	GotoStatement	goto done ;	296:2:7133:7142	12928	1	True				
ANR	12979	Identifier	done		12928	0					
ANR	12980	ExpressionStatement	i = 0	298:1:7146:7151	12928	8	True				
ANR	12981	AssignmentExpression	i = 0		12928	0		=			
ANR	12982	Identifier	i		12928	0					
ANR	12983	PrimaryExpression	0		12928	1					
ANR	12984	WhileStatement	while ( i < sdlen && ! found )		12928	9					
ANR	12985	Condition	i < sdlen && ! found	299:7:7160:7178	12928	0	True				
ANR	12986	AndExpression	i < sdlen && ! found		12928	0		&&			
ANR	12987	RelationalExpression	i < sdlen		12928	0		<			
ANR	12988	Identifier	i		12928	0					
ANR	12989	Identifier	sdlen		12928	1					
ANR	12990	UnaryOperationExpression	! found		12928	1					
ANR	12991	UnaryOperator	!		12928	0					
ANR	12992	Identifier	found		12928	1					
ANR	12993	CompoundStatement		15:28:262:262	12928	1					
ANR	12994	ExpressionStatement	"getSDID ( sdbuf , sdlen , & i , sdid )"	300:2:7185:7216	12928	0	True				
ANR	12995	CallExpression	"getSDID ( sdbuf , sdlen , & i , sdid )"		12928	0					
ANR	12996	Callee	getSDID		12928	0					
ANR	12997	Identifier	getSDID		12928	0					
ANR	12998	ArgumentList	sdbuf		12928	1					
ANR	12999	Argument	sdbuf		12928	0					
ANR	13000	Identifier	sdbuf		12928	0					
ANR	13001	Argument	sdlen		12928	1					
ANR	13002	Identifier	sdlen		12928	0					
ANR	13003	Argument	& i		12928	2					
ANR	13004	UnaryOperationExpression	& i		12928	0					
ANR	13005	UnaryOperator	&		12928	0					
ANR	13006	Identifier	i		12928	1					
ANR	13007	Argument	sdid		12928	3					
ANR	13008	Identifier	sdid		12928	0					
ANR	13009	IfStatement	"if ( ! strcmp ( ( char * ) pData -> sdid , ( char * ) sdid ) )"		12928	1					
ANR	13010	Condition	"! strcmp ( ( char * ) pData -> sdid , ( char * ) sdid )"	301:5:7223:7262	12928	0	True				
ANR	13011	UnaryOperationExpression	"! strcmp ( ( char * ) pData -> sdid , ( char * ) sdid )"		12928	0					
ANR	13012	UnaryOperator	!		12928	0					
ANR	13013	CallExpression	"strcmp ( ( char * ) pData -> sdid , ( char * ) sdid )"		12928	1					
ANR	13014	Callee	strcmp		12928	0					
ANR	13015	Identifier	strcmp		12928	0					
ANR	13016	ArgumentList	( char * ) pData -> sdid		12928	1					
ANR	13017	Argument	( char * ) pData -> sdid		12928	0					
ANR	13018	CastExpression	( char * ) pData -> sdid		12928	0					
ANR	13019	CastTarget	char *		12928	0					
ANR	13020	PtrMemberAccess	pData -> sdid		12928	1					
ANR	13021	Identifier	pData		12928	0					
ANR	13022	Identifier	sdid		12928	1					
ANR	13023	Argument	( char * ) sdid		12928	1					
ANR	13024	CastExpression	( char * ) sdid		12928	0					
ANR	13025	CastTarget	char *		12928	0					
ANR	13026	Identifier	sdid		12928	1					
ANR	13027	CompoundStatement		17:47:346:346	12928	1					
ANR	13028	ExpressionStatement	found = 1	302:3:7270:7279	12928	0	True				
ANR	13029	AssignmentExpression	found = 1		12928	0		=			
ANR	13030	Identifier	found		12928	0					
ANR	13031	PrimaryExpression	1		12928	1					
ANR	13032	BreakStatement	break ;	303:3:7284:7289	12928	1	True				
ANR	13033	ExpressionStatement	"skipSDID ( sdbuf , sdlen , & i )"	305:2:7297:7323	12928	2	True				
ANR	13034	CallExpression	"skipSDID ( sdbuf , sdlen , & i )"		12928	0					
ANR	13035	Callee	skipSDID		12928	0					
ANR	13036	Identifier	skipSDID		12928	0					
ANR	13037	ArgumentList	sdbuf		12928	1					
ANR	13038	Argument	sdbuf		12928	0					
ANR	13039	Identifier	sdbuf		12928	0					
ANR	13040	Argument	sdlen		12928	1					
ANR	13041	Identifier	sdlen		12928	0					
ANR	13042	Argument	& i		12928	2					
ANR	13043	UnaryOperationExpression	& i		12928	0					
ANR	13044	UnaryOperator	&		12928	0					
ANR	13045	Identifier	i		12928	1					
ANR	13046	Label	done :	308:0:7329:7333	12928	10	True				
ANR	13047	Identifier	done		12928	0					
ANR	13048	ReturnStatement	return found ;	309:1:7336:7348	12928	11	True				
ANR	13049	Identifier	found		12928	0					
ANR	13050	ReturnType	static sbool		12928	1					
ANR	13051	Identifier	isHmacPresent		12928	2					
ANR	13052	ParameterList	"instanceData * pData , smsg_t * pMsg"		12928	3					
ANR	13053	Parameter	instanceData * pData	284:14:6883:6901	12928	0	True				
ANR	13054	ParameterType	instanceData *		12928	0					
ANR	13055	Identifier	pData		12928	1					
ANR	13056	Parameter	smsg_t * pMsg	284:35:6904:6915	12928	1	True				
ANR	13057	ParameterType	smsg_t *		12928	0					
ANR	13058	Identifier	pMsg		12928	1					
ANR	13059	CFGEntryNode	ENTRY		12928		True				
ANR	13060	CFGExitNode	EXIT		12928		True				
ANR	13061	Symbol	strcmp		12928						
ANR	13062	Symbol	sdbuf		12928						
ANR	13063	Symbol	& sdlen		12928						
ANR	13064	Symbol	& sdbuf		12928						
ANR	13065	Symbol	pMsg		12928						
ANR	13066	Symbol	sdlen		12928						
ANR	13067	Symbol	* sdbuf		12928						
ANR	13068	Symbol	i		12928						
ANR	13069	Symbol	& i		12928						
ANR	13070	Symbol	* pData		12928						
ANR	13071	Symbol	pData		12928						
ANR	13072	Symbol	found		12928						
ANR	13073	Symbol	pData -> sdid		12928						
ANR	13074	Symbol	sdid		12928						
ANR	13075	Function	hashMsg	312:0:7353:8062							
ANR	13076	FunctionDef	"hashMsg (instanceData * pData , smsg_t * pMsg)"		13075	0					
ANR	13077	CompoundStatement		314:0:7412:8062	13075	0					
ANR	13078	IdentifierDeclStatement	uchar * pRawMsg ;	315:1:7415:7429	13075	0	True				
ANR	13079	IdentifierDecl	* pRawMsg		13075	0					
ANR	13080	IdentifierDeclType	uchar *		13075	0					
ANR	13081	Identifier	pRawMsg		13075	1					
ANR	13082	IdentifierDeclStatement	int lenRawMsg ;	316:1:7432:7445	13075	1	True				
ANR	13083	IdentifierDecl	lenRawMsg		13075	0					
ANR	13084	IdentifierDeclType	int		13075	0					
ANR	13085	Identifier	lenRawMsg		13075	1					
ANR	13086	IdentifierDeclStatement	uchar * sdbuf ;	317:1:7448:7460	13075	2	True				
ANR	13087	IdentifierDecl	* sdbuf		13075	0					
ANR	13088	IdentifierDeclType	uchar *		13075	0					
ANR	13089	Identifier	sdbuf		13075	1					
ANR	13090	IdentifierDeclStatement	rs_size_t sdlen ;	318:1:7463:7478	13075	3	True				
ANR	13091	IdentifierDecl	sdlen		13075	0					
ANR	13092	IdentifierDeclType	rs_size_t		13075	0					
ANR	13093	Identifier	sdlen		13075	1					
ANR	13094	IdentifierDeclStatement	unsigned int hashlen ;	319:1:7481:7501	13075	4	True				
ANR	13095	IdentifierDecl	hashlen		13075	0					
ANR	13096	IdentifierDeclType	unsigned int		13075	0					
ANR	13097	Identifier	hashlen		13075	1					
ANR	13098	IdentifierDeclStatement	uchar hash [ EVP_MAX_MD_SIZE ] ;	320:1:7504:7531	13075	5	True				
ANR	13099	IdentifierDecl	hash [ EVP_MAX_MD_SIZE ]		13075	0					
ANR	13100	IdentifierDeclType	uchar [ EVP_MAX_MD_SIZE ]		13075	0					
ANR	13101	Identifier	hash		13075	1					
ANR	13102	Identifier	EVP_MAX_MD_SIZE		13075	2					
ANR	13103	IdentifierDeclStatement	uchar hashPrintable [ 2 * EVP_MAX_MD_SIZE + 1 ] ;	321:1:7534:7574	13075	6	True				
ANR	13104	IdentifierDecl	hashPrintable [ 2 * EVP_MAX_MD_SIZE + 1 ]		13075	0					
ANR	13105	IdentifierDeclType	uchar [ 2 * EVP_MAX_MD_SIZE + 1 ]		13075	0					
ANR	13106	Identifier	hashPrintable		13075	1					
ANR	13107	AdditiveExpression	2 * EVP_MAX_MD_SIZE + 1		13075	2		+			
ANR	13108	MultiplicativeExpression	2 * EVP_MAX_MD_SIZE		13075	0		*			
ANR	13109	PrimaryExpression	2		13075	0					
ANR	13110	Identifier	EVP_MAX_MD_SIZE		13075	1					
ANR	13111	PrimaryExpression	1		13075	1					
ANR	13112	IdentifierDeclStatement	uchar newsd [ 64 * 1024 ] ;	322:1:7577:7597	13075	7	True				
ANR	13113	IdentifierDecl	newsd [ 64 * 1024 ]		13075	0					
ANR	13114	IdentifierDeclType	uchar [ 64 * 1024 ]		13075	0					
ANR	13115	Identifier	newsd		13075	1					
ANR	13116	MultiplicativeExpression	64 * 1024		13075	2		*			
ANR	13117	PrimaryExpression	64		13075	0					
ANR	13118	PrimaryExpression	1024		13075	1					
ANR	13119	IdentifierDeclStatement	int lenNewsd ;	323:1:7638:7650	13075	8	True				
ANR	13120	IdentifierDecl	lenNewsd		13075	0					
ANR	13121	IdentifierDeclType	int		13075	0					
ANR	13122	Identifier	lenNewsd		13075	1					
ANR	13123	ExpressionStatement	DEFiRet	324:1:7653:7660	13075	9	True				
ANR	13124	Identifier	DEFiRet		13075	0					
ANR	13125	ExpressionStatement	"MsgGetStructuredData ( pMsg , & sdbuf , & sdlen )"	326:1:7664:7706	13075	10	True				
ANR	13126	CallExpression	"MsgGetStructuredData ( pMsg , & sdbuf , & sdlen )"		13075	0					
ANR	13127	Callee	MsgGetStructuredData		13075	0					
ANR	13128	Identifier	MsgGetStructuredData		13075	0					
ANR	13129	ArgumentList	pMsg		13075	1					
ANR	13130	Argument	pMsg		13075	0					
ANR	13131	Identifier	pMsg		13075	0					
ANR	13132	Argument	& sdbuf		13075	1					
ANR	13133	UnaryOperationExpression	& sdbuf		13075	0					
ANR	13134	UnaryOperator	&		13075	0					
ANR	13135	Identifier	sdbuf		13075	1					
ANR	13136	Argument	& sdlen		13075	2					
ANR	13137	UnaryOperationExpression	& sdlen		13075	0					
ANR	13138	UnaryOperator	&		13075	0					
ANR	13139	Identifier	sdlen		13075	1					
ANR	13140	ExpressionStatement	"getRawMsg ( pMsg , & pRawMsg , & lenRawMsg )"	327:1:7709:7746	13075	11	True				
ANR	13141	CallExpression	"getRawMsg ( pMsg , & pRawMsg , & lenRawMsg )"		13075	0					
ANR	13142	Callee	getRawMsg		13075	0					
ANR	13143	Identifier	getRawMsg		13075	0					
ANR	13144	ArgumentList	pMsg		13075	1					
ANR	13145	Argument	pMsg		13075	0					
ANR	13146	Identifier	pMsg		13075	0					
ANR	13147	Argument	& pRawMsg		13075	1					
ANR	13148	UnaryOperationExpression	& pRawMsg		13075	0					
ANR	13149	UnaryOperator	&		13075	0					
ANR	13150	Identifier	pRawMsg		13075	1					
ANR	13151	Argument	& lenRawMsg		13075	2					
ANR	13152	UnaryOperationExpression	& lenRawMsg		13075	0					
ANR	13153	UnaryOperator	&		13075	0					
ANR	13154	Identifier	lenRawMsg		13075	1					
ANR	13155	ExpressionStatement	"HMAC ( pData -> algo , pData -> key , pData -> keylen , pRawMsg , lenRawMsg , hash , & hashlen )"	328:2:7750:7836	13075	12	True				
ANR	13156	CallExpression	"HMAC ( pData -> algo , pData -> key , pData -> keylen , pRawMsg , lenRawMsg , hash , & hashlen )"		13075	0					
ANR	13157	Callee	HMAC		13075	0					
ANR	13158	Identifier	HMAC		13075	0					
ANR	13159	ArgumentList	pData -> algo		13075	1					
ANR	13160	Argument	pData -> algo		13075	0					
ANR	13161	PtrMemberAccess	pData -> algo		13075	0					
ANR	13162	Identifier	pData		13075	0					
ANR	13163	Identifier	algo		13075	1					
ANR	13164	Argument	pData -> key		13075	1					
ANR	13165	PtrMemberAccess	pData -> key		13075	0					
ANR	13166	Identifier	pData		13075	0					
ANR	13167	Identifier	key		13075	1					
ANR	13168	Argument	pData -> keylen		13075	2					
ANR	13169	PtrMemberAccess	pData -> keylen		13075	0					
ANR	13170	Identifier	pData		13075	0					
ANR	13171	Identifier	keylen		13075	1					
ANR	13172	Argument	pRawMsg		13075	3					
ANR	13173	Identifier	pRawMsg		13075	0					
ANR	13174	Argument	lenRawMsg		13075	4					
ANR	13175	Identifier	lenRawMsg		13075	0					
ANR	13176	Argument	hash		13075	5					
ANR	13177	Identifier	hash		13075	0					
ANR	13178	Argument	& hashlen		13075	6					
ANR	13179	UnaryOperationExpression	& hashlen		13075	0					
ANR	13180	UnaryOperator	&		13075	0					
ANR	13181	Identifier	hashlen		13075	1					
ANR	13182	ExpressionStatement	"hexify ( hash , hashlen , hashPrintable )"	330:1:7839:7875	13075	13	True				
ANR	13183	CallExpression	"hexify ( hash , hashlen , hashPrintable )"		13075	0					
ANR	13184	Callee	hexify		13075	0					
ANR	13185	Identifier	hexify		13075	0					
ANR	13186	ArgumentList	hash		13075	1					
ANR	13187	Argument	hash		13075	0					
ANR	13188	Identifier	hash		13075	0					
ANR	13189	Argument	hashlen		13075	1					
ANR	13190	Identifier	hashlen		13075	0					
ANR	13191	Argument	hashPrintable		13075	2					
ANR	13192	Identifier	hashPrintable		13075	0					
ANR	13193	ExpressionStatement	"lenNewsd = snprintf ( ( char * ) newsd , sizeof ( newsd ) , ""[%s hash=\\""%s\\""]"" , ( char * ) pData -> sdid , ( char * ) hashPrintable )"	331:1:7878:8002	13075	14	True				
ANR	13194	AssignmentExpression	"lenNewsd = snprintf ( ( char * ) newsd , sizeof ( newsd ) , ""[%s hash=\\""%s\\""]"" , ( char * ) pData -> sdid , ( char * ) hashPrintable )"		13075	0		=			
ANR	13195	Identifier	lenNewsd		13075	0					
ANR	13196	CallExpression	"snprintf ( ( char * ) newsd , sizeof ( newsd ) , ""[%s hash=\\""%s\\""]"" , ( char * ) pData -> sdid , ( char * ) hashPrintable )"		13075	1					
ANR	13197	Callee	snprintf		13075	0					
ANR	13198	Identifier	snprintf		13075	0					
ANR	13199	ArgumentList	( char * ) newsd		13075	1					
ANR	13200	Argument	( char * ) newsd		13075	0					
ANR	13201	CastExpression	( char * ) newsd		13075	0					
ANR	13202	CastTarget	char *		13075	0					
ANR	13203	Identifier	newsd		13075	1					
ANR	13204	Argument	sizeof ( newsd )		13075	1					
ANR	13205	SizeofExpression	sizeof ( newsd )		13075	0					
ANR	13206	Sizeof	sizeof		13075	0					
ANR	13207	SizeofOperand	newsd		13075	1					
ANR	13208	Argument	"""[%s hash=\\""%s\\""]"""		13075	2					
ANR	13209	PrimaryExpression	"""[%s hash=\\""%s\\""]"""		13075	0					
ANR	13210	Argument	( char * ) pData -> sdid		13075	3					
ANR	13211	CastExpression	( char * ) pData -> sdid		13075	0					
ANR	13212	CastTarget	char *		13075	0					
ANR	13213	PtrMemberAccess	pData -> sdid		13075	1					
ANR	13214	Identifier	pData		13075	0					
ANR	13215	Identifier	sdid		13075	1					
ANR	13216	Argument	( char * ) hashPrintable		13075	4					
ANR	13217	CastExpression	( char * ) hashPrintable		13075	0					
ANR	13218	CastTarget	char *		13075	0					
ANR	13219	Identifier	hashPrintable		13075	1					
ANR	13220	ExpressionStatement	"MsgAddToStructuredData ( pMsg , newsd , lenNewsd )"	333:1:8005:8050	13075	15	True				
ANR	13221	CallExpression	"MsgAddToStructuredData ( pMsg , newsd , lenNewsd )"		13075	0					
ANR	13222	Callee	MsgAddToStructuredData		13075	0					
ANR	13223	Identifier	MsgAddToStructuredData		13075	0					
ANR	13224	ArgumentList	pMsg		13075	1					
ANR	13225	Argument	pMsg		13075	0					
ANR	13226	Identifier	pMsg		13075	0					
ANR	13227	Argument	newsd		13075	1					
ANR	13228	Identifier	newsd		13075	0					
ANR	13229	Argument	lenNewsd		13075	2					
ANR	13230	Identifier	lenNewsd		13075	0					
ANR	13231	ExpressionStatement	RETiRet	334:1:8053:8060	13075	16	True				
ANR	13232	Identifier	RETiRet		13075	0					
ANR	13233	ReturnType	static rsRetVal		13075	1					
ANR	13234	Identifier	hashMsg		13075	2					
ANR	13235	ParameterList	"instanceData * pData , smsg_t * pMsg"		13075	3					
ANR	13236	Parameter	instanceData * pData	313:8:7377:7395	13075	0	True				
ANR	13237	ParameterType	instanceData *		13075	0					
ANR	13238	Identifier	pData		13075	1					
ANR	13239	Parameter	smsg_t * pMsg	313:29:7398:7409	13075	1	True				
ANR	13240	ParameterType	smsg_t *		13075	0					
ANR	13241	Identifier	pMsg		13075	1					
ANR	13242	CFGEntryNode	ENTRY		13075		True				
ANR	13243	CFGExitNode	EXIT		13075		True				
ANR	13244	Symbol	sdbuf		13075						
ANR	13245	Symbol	hashPrintable		13075						
ANR	13246	Symbol	& sdlen		13075						
ANR	13247	Symbol	& sdbuf		13075						
ANR	13248	Symbol	pMsg		13075						
ANR	13249	Symbol	pData -> algo		13075						
ANR	13250	Symbol	sdlen		13075						
ANR	13251	Symbol	pData -> keylen		13075						
ANR	13252	Symbol	& lenRawMsg		13075						
ANR	13253	Symbol	newsd		13075						
ANR	13254	Symbol	& pRawMsg		13075						
ANR	13255	Symbol	& hashlen		13075						
ANR	13256	Symbol	* pData		13075						
ANR	13257	Symbol	pData		13075						
ANR	13258	Symbol	lenRawMsg		13075						
ANR	13259	Symbol	hashlen		13075						
ANR	13260	Symbol	pData -> sdid		13075						
ANR	13261	Symbol	lenNewsd		13075						
ANR	13262	Symbol	pRawMsg		13075						
ANR	13263	Symbol	pData -> key		13075						
ANR	13264	Symbol	hash		13075						
ANR	13265	Symbol	snprintf		13075						
ANR	13266	DeclStmt									
ANR	13267	Decl							BEGINdoAction instanceData	BEGINdoAction instanceData *	pData
ANR	13268	DeclStmt									
ANR	13269	Decl							smsg_t	smsg_t *	pMsg
ANR	13270	DeclStmt									
ANR	13271	Decl							CODESTARTdoAction	CODESTARTdoAction	pMsg
ANR	13272	DeclStmt									
ANR	13273	Decl							uchar	uchar *	pRawMsg
ANR	13274	DeclStmt									
ANR	13275	Decl							int	int	lenRawMsg
ANR	13276	DeclStmt									
ANR	13277	Decl							CODE_STD_FINALIZERparseSelectorAct ENDparseSelectorAct BEGINmodExit CODESTARTmodExit	"CODE_STD_FINALIZERparseSelectorAct ENDparseSelectorAct BEGINmodExit CODESTARTmodExit ( errmsg , CORE_COMPONENT )"	objRelease
ANR	13278	DeclStmt									
ANR	13279	Decl							CODESTARTmodInit	CODESTARTmodInit *	ipIFVersProvided
ANR	13280	DeclStmt									
ANR	13281	Decl							CODEmodInit_QueryRegCFSLineHdlr	CODEmodInit_QueryRegCFSLineHdlr	DBGPRINTF
