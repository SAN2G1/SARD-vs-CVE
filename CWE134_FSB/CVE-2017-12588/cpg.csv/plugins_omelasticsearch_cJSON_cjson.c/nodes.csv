command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	93273	File	data/converged/CVE-2017-12588_rsyslog/plugins_omelasticsearch_cJSON_cjson.c								
ANR	93274	DeclStmt									
ANR	93275	Decl							const char	const char *	ep
ANR	93276	Function	cJSON_GetErrorPtr	48:0:1844:1887							
ANR	93277	FunctionDef	cJSON_GetErrorPtr ()		93276	0					
ANR	93278	CompoundStatement		48:32:1876:1887	93276	0					
ANR	93279	ReturnStatement	return ep ;	48:0:1877:1886	93276	0	True				
ANR	93280	Identifier	ep		93276	0					
ANR	93281	ReturnType	const char *		93276	1					
ANR	93282	Identifier	cJSON_GetErrorPtr		93276	2					
ANR	93283	ParameterList			93276	3					
ANR	93284	CFGEntryNode	ENTRY		93276		True				
ANR	93285	CFGExitNode	EXIT		93276		True				
ANR	93286	Symbol	ep		93276						
ANR	93287	Function	cJSON_strcasecmp	50:0:1890:2155							
ANR	93288	FunctionDef	"cJSON_strcasecmp (const char * s1 , const char * s2)"		93287	0					
ANR	93289	CompoundStatement		51:0:1949:2155	93287	0					
ANR	93290	IfStatement	if ( ! s1 )		93287	0					
ANR	93291	Condition	! s1	52:5:1956:1958	93287	0	True				
ANR	93292	UnaryOperationExpression	! s1		93287	0					
ANR	93293	UnaryOperator	!		93287	0					
ANR	93294	Identifier	s1		93287	1					
ANR	93295	ReturnStatement	return ( s1 == s2 ) ? 0 : 1 ;	52:10:1961:1980	93287	1	True				
ANR	93296	ConditionalExpression	( s1 == s2 ) ? 0 : 1		93287	0					
ANR	93297	Condition	s1 == s2		93287	0					
ANR	93298	EqualityExpression	s1 == s2		93287	0		==			
ANR	93299	Identifier	s1		93287	0					
ANR	93300	Identifier	s2		93287	1					
ANR	93301	PrimaryExpression	0		93287	1					
ANR	93302	PrimaryExpression	1		93287	2					
ANR	93303	IfStatement	if ( ! s2 )		93287	1					
ANR	93304	Condition	! s2	52:34:1985:1987	93287	0	True				
ANR	93305	UnaryOperationExpression	! s2		93287	0					
ANR	93306	UnaryOperator	!		93287	0					
ANR	93307	Identifier	s2		93287	1					
ANR	93308	ReturnStatement	return 1 ;	52:39:1990:1998	93287	1	True				
ANR	93309	PrimaryExpression	1		93287	0					
ANR	93310	ForStatement	"for ( ; tolower ( * s1 ) == tolower ( * s2 ) ; ++ s1 , ++ s2 )"		93287	2					
ANR	93311	Condition	tolower ( * s1 ) == tolower ( * s2 )	53:7:2007:2034	93287	0	True				
ANR	93312	EqualityExpression	tolower ( * s1 ) == tolower ( * s2 )		93287	0		==			
ANR	93313	CallExpression	tolower ( * s1 )		93287	0					
ANR	93314	Callee	tolower		93287	0					
ANR	93315	Identifier	tolower		93287	0					
ANR	93316	ArgumentList	* s1		93287	1					
ANR	93317	Argument	* s1		93287	0					
ANR	93318	UnaryOperationExpression	* s1		93287	0					
ANR	93319	UnaryOperator	*		93287	0					
ANR	93320	Identifier	s1		93287	1					
ANR	93321	CallExpression	tolower ( * s2 )		93287	1					
ANR	93322	Callee	tolower		93287	0					
ANR	93323	Identifier	tolower		93287	0					
ANR	93324	ArgumentList	* s2		93287	1					
ANR	93325	Argument	* s2		93287	0					
ANR	93326	UnaryOperationExpression	* s2		93287	0					
ANR	93327	UnaryOperator	*		93287	0					
ANR	93328	Identifier	s2		93287	1					
ANR	93329	Expression	"++ s1 , ++ s2"	53:37:2037:2046	93287	1	True				
ANR	93330	UnaryExpression	++ s1		93287	0					
ANR	93331	IncDec	++		93287	0					
ANR	93332	Identifier	s1		93287	1					
ANR	93333	UnaryExpression	++ s2		93287	1					
ANR	93334	IncDec	++		93287	0					
ANR	93335	Identifier	s2		93287	1					
ANR	93336	IfStatement	if ( * s1 == 0 )		93287	2					
ANR	93337	Condition	* s1 == 0	53:52:2052:2059	93287	0	True				
ANR	93338	EqualityExpression	* s1 == 0		93287	0		==			
ANR	93339	UnaryOperationExpression	* s1		93287	0					
ANR	93340	UnaryOperator	*		93287	0					
ANR	93341	Identifier	s1		93287	1					
ANR	93342	PrimaryExpression	0		93287	1					
ANR	93343	ReturnStatement	return 0 ;	53:62:2062:2070	93287	1	True				
ANR	93344	PrimaryExpression	0		93287	0					
ANR	93345	ReturnStatement	return tolower ( * ( const unsigned char * ) s1 ) - tolower ( * ( const unsigned char * ) s2 ) ;	54:1:2073:2153	93287	3	True				
ANR	93346	AdditiveExpression	tolower ( * ( const unsigned char * ) s1 ) - tolower ( * ( const unsigned char * ) s2 )		93287	0		-			
ANR	93347	CallExpression	tolower ( * ( const unsigned char * ) s1 )		93287	0					
ANR	93348	Callee	tolower		93287	0					
ANR	93349	Identifier	tolower		93287	0					
ANR	93350	ArgumentList	* ( const unsigned char * ) s1		93287	1					
ANR	93351	Argument	* ( const unsigned char * ) s1		93287	0					
ANR	93352	UnaryOperationExpression	* ( const unsigned char * ) s1		93287	0					
ANR	93353	UnaryOperator	*		93287	0					
ANR	93354	CastExpression	( const unsigned char * ) s1		93287	1					
ANR	93355	CastTarget	const unsigned char *		93287	0					
ANR	93356	Identifier	s1		93287	1					
ANR	93357	CallExpression	tolower ( * ( const unsigned char * ) s2 )		93287	1					
ANR	93358	Callee	tolower		93287	0					
ANR	93359	Identifier	tolower		93287	0					
ANR	93360	ArgumentList	* ( const unsigned char * ) s2		93287	1					
ANR	93361	Argument	* ( const unsigned char * ) s2		93287	0					
ANR	93362	UnaryOperationExpression	* ( const unsigned char * ) s2		93287	0					
ANR	93363	UnaryOperator	*		93287	0					
ANR	93364	CastExpression	( const unsigned char * ) s2		93287	1					
ANR	93365	CastTarget	const unsigned char *		93287	0					
ANR	93366	Identifier	s2		93287	1					
ANR	93367	ReturnType	static int		93287	1					
ANR	93368	Identifier	cJSON_strcasecmp		93287	2					
ANR	93369	ParameterList	"const char * s1 , const char * s2"		93287	3					
ANR	93370	Parameter	const char * s1	50:28:1918:1931	93287	0	True				
ANR	93371	ParameterType	const char *		93287	0					
ANR	93372	Identifier	s1		93287	1					
ANR	93373	Parameter	const char * s2	50:43:1933:1946	93287	1	True				
ANR	93374	ParameterType	const char *		93287	0					
ANR	93375	Identifier	s2		93287	1					
ANR	93376	CFGEntryNode	ENTRY		93287		True				
ANR	93377	CFGExitNode	EXIT		93287		True				
ANR	93378	Symbol	* ( const unsigned char * ) s1		93287						
ANR	93379	Symbol	* ( const unsigned char * ) s2		93287						
ANR	93380	Symbol	tolower		93287						
ANR	93381	Symbol	* s2		93287						
ANR	93382	Symbol	* s1		93287						
ANR	93383	Symbol	s1		93287						
ANR	93384	Symbol	s2		93287						
ANR	93385	DeclStmt									
ANR	93386	Decl							void * ( * ) ( size_t sz )	void * ( * ) ( size_t sz )	cJSON_malloc
ANR	93387	DeclStmt									
ANR	93388	Decl							void ( * ) ( void * ptr )	void ( * ) ( void * ptr )	cJSON_free
ANR	93389	Function	cJSON_strdup	60:0:2254:2468							
ANR	93390	FunctionDef	cJSON_strdup (const char * str)		93389	0					
ANR	93391	CompoundStatement		61:0:2297:2468	93389	0					
ANR	93392	IdentifierDeclStatement	size_t len ;	62:6:2305:2315	93389	0	True				
ANR	93393	IdentifierDecl	len		93389	0					
ANR	93394	IdentifierDeclType	size_t		93389	0					
ANR	93395	Identifier	len		93389	1					
ANR	93396	IdentifierDeclStatement	char * copy ;	63:6:2323:2333	93389	1	True				
ANR	93397	IdentifierDecl	* copy		93389	0					
ANR	93398	IdentifierDeclType	char *		93389	0					
ANR	93399	Identifier	copy		93389	1					
ANR	93400	ExpressionStatement	len = strlen ( str ) + 1	65:6:2342:2363	93389	2	True				
ANR	93401	AssignmentExpression	len = strlen ( str ) + 1		93389	0		=			
ANR	93402	Identifier	len		93389	0					
ANR	93403	AdditiveExpression	strlen ( str ) + 1		93389	1		+			
ANR	93404	CallExpression	strlen ( str )		93389	0					
ANR	93405	Callee	strlen		93389	0					
ANR	93406	Identifier	strlen		93389	0					
ANR	93407	ArgumentList	str		93389	1					
ANR	93408	Argument	str		93389	0					
ANR	93409	Identifier	str		93389	0					
ANR	93410	PrimaryExpression	1		93389	1					
ANR	93411	IfStatement	if ( ! ( copy = ( char * ) cJSON_malloc ( len ) ) )		93389	3					
ANR	93412	Condition	! ( copy = ( char * ) cJSON_malloc ( len ) )	66:10:2375:2408	93389	0	True				
ANR	93413	UnaryOperationExpression	! ( copy = ( char * ) cJSON_malloc ( len ) )		93389	0					
ANR	93414	UnaryOperator	!		93389	0					
ANR	93415	AssignmentExpression	copy = ( char * ) cJSON_malloc ( len )		93389	1		=			
ANR	93416	Identifier	copy		93389	0					
ANR	93417	CastExpression	( char * ) cJSON_malloc ( len )		93389	1					
ANR	93418	CastTarget	char *		93389	0					
ANR	93419	CallExpression	cJSON_malloc ( len )		93389	1					
ANR	93420	Callee	cJSON_malloc		93389	0					
ANR	93421	Identifier	cJSON_malloc		93389	0					
ANR	93422	ArgumentList	len		93389	1					
ANR	93423	Argument	len		93389	0					
ANR	93424	Identifier	len		93389	0					
ANR	93425	ReturnStatement	return 0 ;	66:46:2411:2419	93389	1	True				
ANR	93426	PrimaryExpression	0		93389	0					
ANR	93427	ExpressionStatement	"memcpy ( copy , str , len )"	67:6:2427:2447	93389	4	True				
ANR	93428	CallExpression	"memcpy ( copy , str , len )"		93389	0					
ANR	93429	Callee	memcpy		93389	0					
ANR	93430	Identifier	memcpy		93389	0					
ANR	93431	ArgumentList	copy		93389	1					
ANR	93432	Argument	copy		93389	0					
ANR	93433	Identifier	copy		93389	0					
ANR	93434	Argument	str		93389	1					
ANR	93435	Identifier	str		93389	0					
ANR	93436	Argument	len		93389	2					
ANR	93437	Identifier	len		93389	0					
ANR	93438	ReturnStatement	return copy ;	68:6:2455:2466	93389	5	True				
ANR	93439	Identifier	copy		93389	0					
ANR	93440	ReturnType	static char *		93389	1					
ANR	93441	Identifier	cJSON_strdup		93389	2					
ANR	93442	ParameterList	const char * str		93389	3					
ANR	93443	Parameter	const char * str	60:26:2280:2294	93389	0	True				
ANR	93444	ParameterType	const char *		93389	0					
ANR	93445	Identifier	str		93389	1					
ANR	93446	CFGEntryNode	ENTRY		93389		True				
ANR	93447	CFGExitNode	EXIT		93389		True				
ANR	93448	Symbol	str		93389						
ANR	93449	Symbol	strlen		93389						
ANR	93450	Symbol	len		93389						
ANR	93451	Symbol	copy		93389						
ANR	93452	Symbol	cJSON_malloc		93389						
ANR	93453	Function	cJSON_InitHooks	71:0:2471:2744							
ANR	93454	FunctionDef	cJSON_InitHooks (cJSON_Hooks * hooks)		93453	0					
ANR	93455	CompoundStatement		72:0:2512:2744	93453	0					
ANR	93456	IfStatement	if ( ! hooks )		93453	0					
ANR	93457	Condition	! hooks	73:8:2522:2527	93453	0	True				
ANR	93458	UnaryOperationExpression	! hooks		93453	0					
ANR	93459	UnaryOperator	!		93453	0					
ANR	93460	Identifier	hooks		93453	1					
ANR	93461	CompoundStatement		2:16:17:17	93453	1					
ANR	93462	ExpressionStatement	cJSON_malloc = malloc	74:8:2558:2579	93453	0	True				
ANR	93463	AssignmentExpression	cJSON_malloc = malloc		93453	0		=			
ANR	93464	Identifier	cJSON_malloc		93453	0					
ANR	93465	Identifier	malloc		93453	1					
ANR	93466	ExpressionStatement	cJSON_free = free	75:8:2589:2606	93453	1	True				
ANR	93467	AssignmentExpression	cJSON_free = free		93453	0		=			
ANR	93468	Identifier	cJSON_free		93453	0					
ANR	93469	Identifier	free		93453	1					
ANR	93470	ReturnStatement	return ;	76:8:2616:2622	93453	2	True				
ANR	93471	ExpressionStatement	cJSON_malloc = ( hooks -> malloc_fn ) ? hooks -> malloc_fn : malloc	79:1:2632:2689	93453	1	True				
ANR	93472	AssignmentExpression	cJSON_malloc = ( hooks -> malloc_fn ) ? hooks -> malloc_fn : malloc		93453	0		=			
ANR	93473	Identifier	cJSON_malloc		93453	0					
ANR	93474	ConditionalExpression	( hooks -> malloc_fn ) ? hooks -> malloc_fn : malloc		93453	1					
ANR	93475	Condition	hooks -> malloc_fn		93453	0					
ANR	93476	PtrMemberAccess	hooks -> malloc_fn		93453	0					
ANR	93477	Identifier	hooks		93453	0					
ANR	93478	Identifier	malloc_fn		93453	1					
ANR	93479	PtrMemberAccess	hooks -> malloc_fn		93453	1					
ANR	93480	Identifier	hooks		93453	0					
ANR	93481	Identifier	malloc_fn		93453	1					
ANR	93482	Identifier	malloc		93453	2					
ANR	93483	ExpressionStatement	cJSON_free = ( hooks -> free_fn ) ? hooks -> free_fn : free	80:1:2692:2742	93453	2	True				
ANR	93484	AssignmentExpression	cJSON_free = ( hooks -> free_fn ) ? hooks -> free_fn : free		93453	0		=			
ANR	93485	Identifier	cJSON_free		93453	0					
ANR	93486	ConditionalExpression	( hooks -> free_fn ) ? hooks -> free_fn : free		93453	1					
ANR	93487	Condition	hooks -> free_fn		93453	0					
ANR	93488	PtrMemberAccess	hooks -> free_fn		93453	0					
ANR	93489	Identifier	hooks		93453	0					
ANR	93490	Identifier	free_fn		93453	1					
ANR	93491	PtrMemberAccess	hooks -> free_fn		93453	1					
ANR	93492	Identifier	hooks		93453	0					
ANR	93493	Identifier	free_fn		93453	1					
ANR	93494	Identifier	free		93453	2					
ANR	93495	ReturnType	void		93453	1					
ANR	93496	Identifier	cJSON_InitHooks		93453	2					
ANR	93497	ParameterList	cJSON_Hooks * hooks		93453	3					
ANR	93498	Parameter	cJSON_Hooks * hooks	71:21:2492:2509	93453	0	True				
ANR	93499	ParameterType	cJSON_Hooks *		93453	0					
ANR	93500	Identifier	hooks		93453	1					
ANR	93501	CFGEntryNode	ENTRY		93453		True				
ANR	93502	CFGExitNode	EXIT		93453		True				
ANR	93503	Symbol	malloc		93453						
ANR	93504	Symbol	cJSON_free		93453						
ANR	93505	Symbol	* hooks		93453						
ANR	93506	Symbol	hooks -> free_fn		93453						
ANR	93507	Symbol	hooks -> malloc_fn		93453						
ANR	93508	Symbol	free		93453						
ANR	93509	Symbol	hooks		93453						
ANR	93510	Symbol	cJSON_malloc		93453						
ANR	93511	Function	cJSON_New_Item	84:0:2775:2915							
ANR	93512	FunctionDef	cJSON_New_Item ()		93511	0					
ANR	93513	CompoundStatement		85:0:2806:2915	93511	0					
ANR	93514	IdentifierDeclStatement	cJSON * node = ( cJSON * ) cJSON_malloc ( sizeof ( cJSON ) ) ;	86:1:2809:2858	93511	0	True				
ANR	93515	IdentifierDecl	* node = ( cJSON * ) cJSON_malloc ( sizeof ( cJSON ) )		93511	0					
ANR	93516	IdentifierDeclType	cJSON *		93511	0					
ANR	93517	Identifier	node		93511	1					
ANR	93518	AssignmentExpression	* node = ( cJSON * ) cJSON_malloc ( sizeof ( cJSON ) )		93511	2		=			
ANR	93519	Identifier	node		93511	0					
ANR	93520	CastExpression	( cJSON * ) cJSON_malloc ( sizeof ( cJSON ) )		93511	1					
ANR	93521	CastTarget	cJSON *		93511	0					
ANR	93522	CallExpression	cJSON_malloc ( sizeof ( cJSON ) )		93511	1					
ANR	93523	Callee	cJSON_malloc		93511	0					
ANR	93524	Identifier	cJSON_malloc		93511	0					
ANR	93525	ArgumentList	sizeof ( cJSON )		93511	1					
ANR	93526	Argument	sizeof ( cJSON )		93511	0					
ANR	93527	SizeofExpression	sizeof ( cJSON )		93511	0					
ANR	93528	Sizeof	sizeof		93511	0					
ANR	93529	SizeofOperand	cJSON		93511	1					
ANR	93530	IfStatement	if ( node )		93511	1					
ANR	93531	Condition	node	87:5:2865:2868	93511	0	True				
ANR	93532	Identifier	node		93511	0					
ANR	93533	ExpressionStatement	"memset ( node , 0 , sizeof ( cJSON ) )"	87:11:2871:2899	93511	1	True				
ANR	93534	CallExpression	"memset ( node , 0 , sizeof ( cJSON ) )"		93511	0					
ANR	93535	Callee	memset		93511	0					
ANR	93536	Identifier	memset		93511	0					
ANR	93537	ArgumentList	node		93511	1					
ANR	93538	Argument	node		93511	0					
ANR	93539	Identifier	node		93511	0					
ANR	93540	Argument	0		93511	1					
ANR	93541	PrimaryExpression	0		93511	0					
ANR	93542	Argument	sizeof ( cJSON )		93511	2					
ANR	93543	SizeofExpression	sizeof ( cJSON )		93511	0					
ANR	93544	Sizeof	sizeof		93511	0					
ANR	93545	SizeofOperand	cJSON		93511	1					
ANR	93546	ReturnStatement	return node ;	88:1:2902:2913	93511	2	True				
ANR	93547	Identifier	node		93511	0					
ANR	93548	ReturnType	static cJSON *		93511	1					
ANR	93549	Identifier	cJSON_New_Item		93511	2					
ANR	93550	ParameterList			93511	3					
ANR	93551	CFGEntryNode	ENTRY		93511		True				
ANR	93552	CFGExitNode	EXIT		93511		True				
ANR	93553	Symbol	node		93511						
ANR	93554	Symbol	cJSON_malloc		93511						
ANR	93555	Function	cJSON_Delete	92:0:2950:3248							
ANR	93556	FunctionDef	cJSON_Delete (cJSON * c)		93555	0					
ANR	93557	CompoundStatement		93:0:2978:3248	93555	0					
ANR	93558	IdentifierDeclStatement	cJSON * next ;	94:1:2981:2992	93555	0	True				
ANR	93559	IdentifierDecl	* next		93555	0					
ANR	93560	IdentifierDeclType	cJSON *		93555	0					
ANR	93561	Identifier	next		93555	1					
ANR	93562	WhileStatement	while ( c )		93555	1					
ANR	93563	Condition	c	95:8:3002:3002	93555	0	True				
ANR	93564	Identifier	c		93555	0					
ANR	93565	CompoundStatement		4:1:27:27	93555	1					
ANR	93566	ExpressionStatement	next = c -> next	97:2:3010:3022	93555	0	True				
ANR	93567	AssignmentExpression	next = c -> next		93555	0		=			
ANR	93568	Identifier	next		93555	0					
ANR	93569	PtrMemberAccess	c -> next		93555	1					
ANR	93570	Identifier	c		93555	0					
ANR	93571	Identifier	next		93555	1					
ANR	93572	IfStatement	if ( ! ( c -> type & cJSON_IsReference ) && c -> child )		93555	1					
ANR	93573	Condition	! ( c -> type & cJSON_IsReference ) && c -> child	98:6:3030:3069	93555	0	True				
ANR	93574	AndExpression	! ( c -> type & cJSON_IsReference ) && c -> child		93555	0		&&			
ANR	93575	UnaryOperationExpression	! ( c -> type & cJSON_IsReference )		93555	0					
ANR	93576	UnaryOperator	!		93555	0					
ANR	93577	BitAndExpression	c -> type & cJSON_IsReference		93555	1		&			
ANR	93578	PtrMemberAccess	c -> type		93555	0					
ANR	93579	Identifier	c		93555	0					
ANR	93580	Identifier	type		93555	1					
ANR	93581	Identifier	cJSON_IsReference		93555	1					
ANR	93582	PtrMemberAccess	c -> child		93555	1					
ANR	93583	Identifier	c		93555	0					
ANR	93584	Identifier	child		93555	1					
ANR	93585	ExpressionStatement	cJSON_Delete ( c -> child )	98:48:3072:3094	93555	1	True				
ANR	93586	CallExpression	cJSON_Delete ( c -> child )		93555	0					
ANR	93587	Callee	cJSON_Delete		93555	0					
ANR	93588	Identifier	cJSON_Delete		93555	0					
ANR	93589	ArgumentList	c -> child		93555	1					
ANR	93590	Argument	c -> child		93555	0					
ANR	93591	PtrMemberAccess	c -> child		93555	0					
ANR	93592	Identifier	c		93555	0					
ANR	93593	Identifier	child		93555	1					
ANR	93594	IfStatement	if ( ! ( c -> type & cJSON_IsReference ) && c -> valuestring )		93555	2					
ANR	93595	Condition	! ( c -> type & cJSON_IsReference ) && c -> valuestring	99:6:3102:3147	93555	0	True				
ANR	93596	AndExpression	! ( c -> type & cJSON_IsReference ) && c -> valuestring		93555	0		&&			
ANR	93597	UnaryOperationExpression	! ( c -> type & cJSON_IsReference )		93555	0					
ANR	93598	UnaryOperator	!		93555	0					
ANR	93599	BitAndExpression	c -> type & cJSON_IsReference		93555	1		&			
ANR	93600	PtrMemberAccess	c -> type		93555	0					
ANR	93601	Identifier	c		93555	0					
ANR	93602	Identifier	type		93555	1					
ANR	93603	Identifier	cJSON_IsReference		93555	1					
ANR	93604	PtrMemberAccess	c -> valuestring		93555	1					
ANR	93605	Identifier	c		93555	0					
ANR	93606	Identifier	valuestring		93555	1					
ANR	93607	ExpressionStatement	cJSON_free ( c -> valuestring )	99:54:3150:3176	93555	1	True				
ANR	93608	CallExpression	cJSON_free ( c -> valuestring )		93555	0					
ANR	93609	Callee	cJSON_free		93555	0					
ANR	93610	Identifier	cJSON_free		93555	0					
ANR	93611	ArgumentList	c -> valuestring		93555	1					
ANR	93612	Argument	c -> valuestring		93555	0					
ANR	93613	PtrMemberAccess	c -> valuestring		93555	0					
ANR	93614	Identifier	c		93555	0					
ANR	93615	Identifier	valuestring		93555	1					
ANR	93616	IfStatement	if ( c -> string )		93555	3					
ANR	93617	Condition	c -> string	100:6:3184:3192	93555	0	True				
ANR	93618	PtrMemberAccess	c -> string		93555	0					
ANR	93619	Identifier	c		93555	0					
ANR	93620	Identifier	string		93555	1					
ANR	93621	ExpressionStatement	cJSON_free ( c -> string )	100:17:3195:3216	93555	1	True				
ANR	93622	CallExpression	cJSON_free ( c -> string )		93555	0					
ANR	93623	Callee	cJSON_free		93555	0					
ANR	93624	Identifier	cJSON_free		93555	0					
ANR	93625	ArgumentList	c -> string		93555	1					
ANR	93626	Argument	c -> string		93555	0					
ANR	93627	PtrMemberAccess	c -> string		93555	0					
ANR	93628	Identifier	c		93555	0					
ANR	93629	Identifier	string		93555	1					
ANR	93630	ExpressionStatement	cJSON_free ( c )	101:2:3220:3233	93555	4	True				
ANR	93631	CallExpression	cJSON_free ( c )		93555	0					
ANR	93632	Callee	cJSON_free		93555	0					
ANR	93633	Identifier	cJSON_free		93555	0					
ANR	93634	ArgumentList	c		93555	1					
ANR	93635	Argument	c		93555	0					
ANR	93636	Identifier	c		93555	0					
ANR	93637	ExpressionStatement	c = next	102:2:3237:3243	93555	5	True				
ANR	93638	AssignmentExpression	c = next		93555	0		=			
ANR	93639	Identifier	c		93555	0					
ANR	93640	Identifier	next		93555	1					
ANR	93641	ReturnType	void		93555	1					
ANR	93642	Identifier	cJSON_Delete		93555	2					
ANR	93643	ParameterList	cJSON * c		93555	3					
ANR	93644	Parameter	cJSON * c	92:18:2968:2975	93555	0	True				
ANR	93645	ParameterType	cJSON *		93555	0					
ANR	93646	Identifier	c		93555	1					
ANR	93647	CFGEntryNode	ENTRY		93555		True				
ANR	93648	CFGExitNode	EXIT		93555		True				
ANR	93649	Symbol	next		93555						
ANR	93650	Symbol	c -> child		93555						
ANR	93651	Symbol	c -> next		93555						
ANR	93652	Symbol	c		93555						
ANR	93653	Symbol	c -> valuestring		93555						
ANR	93654	Symbol	c -> type		93555						
ANR	93655	Symbol	cJSON_IsReference		93555						
ANR	93656	Symbol	* c		93555						
ANR	93657	Symbol	c -> string		93555						
ANR	93658	Function	parse_number	107:0:3335:4249							
ANR	93659	FunctionDef	"parse_number (cJSON * item , const char * num)"		93658	0					
ANR	93660	CompoundStatement		108:0:3396:4249	93658	0					
ANR	93661	IdentifierDeclStatement	"double n = 0 , sign = 1 , scale = 0 ;"	109:1:3399:3424	93658	0	True				
ANR	93662	IdentifierDecl	n = 0		93658	0					
ANR	93663	IdentifierDeclType	double		93658	0					
ANR	93664	Identifier	n		93658	1					
ANR	93665	AssignmentExpression	n = 0		93658	2		=			
ANR	93666	Identifier	n		93658	0					
ANR	93667	PrimaryExpression	0		93658	1					
ANR	93668	IdentifierDecl	sign = 1		93658	1					
ANR	93669	IdentifierDeclType	double		93658	0					
ANR	93670	Identifier	sign		93658	1					
ANR	93671	AssignmentExpression	sign = 1		93658	2		=			
ANR	93672	Identifier	sign		93658	0					
ANR	93673	PrimaryExpression	1		93658	1					
ANR	93674	IdentifierDecl	scale = 0		93658	2					
ANR	93675	IdentifierDeclType	double		93658	0					
ANR	93676	Identifier	scale		93658	1					
ANR	93677	AssignmentExpression	scale = 0		93658	2		=			
ANR	93678	Identifier	scale		93658	0					
ANR	93679	PrimaryExpression	0		93658	1					
ANR	93680	IdentifierDeclStatement	"int subscale = 0 , signsubscale = 1 ;"	109:27:3425:3454	93658	1	True				
ANR	93681	IdentifierDecl	subscale = 0		93658	0					
ANR	93682	IdentifierDeclType	int		93658	0					
ANR	93683	Identifier	subscale		93658	1					
ANR	93684	AssignmentExpression	subscale = 0		93658	2		=			
ANR	93685	Identifier	subscale		93658	0					
ANR	93686	PrimaryExpression	0		93658	1					
ANR	93687	IdentifierDecl	signsubscale = 1		93658	1					
ANR	93688	IdentifierDeclType	int		93658	0					
ANR	93689	Identifier	signsubscale		93658	1					
ANR	93690	AssignmentExpression	signsubscale = 1		93658	2		=			
ANR	93691	Identifier	signsubscale		93658	0					
ANR	93692	PrimaryExpression	1		93658	1					
ANR	93693	IfStatement	if ( * num == '-' )		93658	2					
ANR	93694	Condition	* num == '-'	112:5:3496:3504	93658	0	True				
ANR	93695	EqualityExpression	* num == '-'		93658	0		==			
ANR	93696	UnaryOperationExpression	* num		93658	0					
ANR	93697	UnaryOperator	*		93658	0					
ANR	93698	Identifier	num		93658	1					
ANR	93699	PrimaryExpression	'-'		93658	1					
ANR	93700	ExpressionStatement	"sign = - 1 , num ++"	112:16:3507:3520	93658	1	True				
ANR	93701	Expression	"sign = - 1 , num ++"		93658	0					
ANR	93702	AssignmentExpression	sign = - 1		93658	0		=			
ANR	93703	Identifier	sign		93658	0					
ANR	93704	UnaryOperationExpression	- 1		93658	1					
ANR	93705	UnaryOperator	-		93658	0					
ANR	93706	PrimaryExpression	1		93658	1					
ANR	93707	PostIncDecOperationExpression	num ++		93658	1					
ANR	93708	Identifier	num		93658	0					
ANR	93709	IncDec	++		93658	1					
ANR	93710	IfStatement	if ( * num == '0' )		93658	3					
ANR	93711	Condition	* num == '0'	113:5:3543:3551	93658	0	True				
ANR	93712	EqualityExpression	* num == '0'		93658	0		==			
ANR	93713	UnaryOperationExpression	* num		93658	0					
ANR	93714	UnaryOperator	*		93658	0					
ANR	93715	Identifier	num		93658	1					
ANR	93716	PrimaryExpression	'0'		93658	1					
ANR	93717	ExpressionStatement	num ++	113:16:3554:3559	93658	1	True				
ANR	93718	PostIncDecOperationExpression	num ++		93658	0					
ANR	93719	Identifier	num		93658	0					
ANR	93720	IncDec	++		93658	1					
ANR	93721	IfStatement	if ( * num >= '1' && * num <= '9' )		93658	4					
ANR	93722	Condition	* num >= '1' && * num <= '9'	114:5:3582:3603	93658	0	True				
ANR	93723	AndExpression	* num >= '1' && * num <= '9'		93658	0		&&			
ANR	93724	RelationalExpression	* num >= '1'		93658	0		>=			
ANR	93725	UnaryOperationExpression	* num		93658	0					
ANR	93726	UnaryOperator	*		93658	0					
ANR	93727	Identifier	num		93658	1					
ANR	93728	PrimaryExpression	'1'		93658	1					
ANR	93729	RelationalExpression	* num <= '9'		93658	1		<=			
ANR	93730	UnaryOperationExpression	* num		93658	0					
ANR	93731	UnaryOperator	*		93658	0					
ANR	93732	Identifier	num		93658	1					
ANR	93733	PrimaryExpression	'9'		93658	1					
ANR	93734	DoStatement	do		93658	1					
ANR	93735	ExpressionStatement	n = ( n * 10.0 ) + ( * num ++ - '0' )	114:32:3609:3633	93658	0	True				
ANR	93736	AssignmentExpression	n = ( n * 10.0 ) + ( * num ++ - '0' )		93658	0		=			
ANR	93737	Identifier	n		93658	0					
ANR	93738	AdditiveExpression	( n * 10.0 ) + ( * num ++ - '0' )		93658	1		+			
ANR	93739	MultiplicativeExpression	n * 10.0		93658	0		*			
ANR	93740	Identifier	n		93658	0					
ANR	93741	PrimaryExpression	10.0		93658	1					
ANR	93742	AdditiveExpression	* num ++ - '0'		93658	1		-			
ANR	93743	UnaryOperationExpression	* num ++		93658	0					
ANR	93744	UnaryOperator	*		93658	0					
ANR	93745	PostIncDecOperationExpression	num ++		93658	1					
ANR	93746	Identifier	num		93658	0					
ANR	93747	IncDec	++		93658	1					
ANR	93748	PrimaryExpression	'0'		93658	1					
ANR	93749	Condition	* num >= '0' && * num <= '9'	114:65:3642:3663	93658	1	True				
ANR	93750	AndExpression	* num >= '0' && * num <= '9'		93658	0		&&			
ANR	93751	RelationalExpression	* num >= '0'		93658	0		>=			
ANR	93752	UnaryOperationExpression	* num		93658	0					
ANR	93753	UnaryOperator	*		93658	0					
ANR	93754	Identifier	num		93658	1					
ANR	93755	PrimaryExpression	'0'		93658	1					
ANR	93756	RelationalExpression	* num <= '9'		93658	1		<=			
ANR	93757	UnaryOperationExpression	* num		93658	0					
ANR	93758	UnaryOperator	*		93658	0					
ANR	93759	Identifier	num		93658	1					
ANR	93760	PrimaryExpression	'9'		93658	1					
ANR	93761	IfStatement	if ( * num == '.' && num [ 1 ] >= '0' && num [ 1 ] <= '9' )		93658	5					
ANR	93762	Condition	* num == '.' && num [ 1 ] >= '0' && num [ 1 ] <= '9'	115:5:3686:3724	93658	0	True				
ANR	93763	AndExpression	* num == '.' && num [ 1 ] >= '0' && num [ 1 ] <= '9'		93658	0		&&			
ANR	93764	EqualityExpression	* num == '.'		93658	0		==			
ANR	93765	UnaryOperationExpression	* num		93658	0					
ANR	93766	UnaryOperator	*		93658	0					
ANR	93767	Identifier	num		93658	1					
ANR	93768	PrimaryExpression	'.'		93658	1					
ANR	93769	AndExpression	num [ 1 ] >= '0' && num [ 1 ] <= '9'		93658	1		&&			
ANR	93770	RelationalExpression	num [ 1 ] >= '0'		93658	0		>=			
ANR	93771	ArrayIndexing	num [ 1 ]		93658	0					
ANR	93772	Identifier	num		93658	0					
ANR	93773	PrimaryExpression	1		93658	1					
ANR	93774	PrimaryExpression	'0'		93658	1					
ANR	93775	RelationalExpression	num [ 1 ] <= '9'		93658	1		<=			
ANR	93776	ArrayIndexing	num [ 1 ]		93658	0					
ANR	93777	Identifier	num		93658	0					
ANR	93778	PrimaryExpression	1		93658	1					
ANR	93779	PrimaryExpression	'9'		93658	1					
ANR	93780	CompoundStatement		8:46:330:330	93658	1					
ANR	93781	ExpressionStatement	num ++	115:47:3728:3733	93658	0	True				
ANR	93782	PostIncDecOperationExpression	num ++		93658	0					
ANR	93783	Identifier	num		93658	0					
ANR	93784	IncDec	++		93658	1					
ANR	93785	DoStatement	do		93658	1					
ANR	93786	ExpressionStatement	"n = ( n * 10.0 ) + ( * num ++ - '0' ) , scale --"	115:58:3739:3771	93658	0	True				
ANR	93787	Expression	"n = ( n * 10.0 ) + ( * num ++ - '0' ) , scale --"		93658	0					
ANR	93788	AssignmentExpression	n = ( n * 10.0 ) + ( * num ++ - '0' )		93658	0		=			
ANR	93789	Identifier	n		93658	0					
ANR	93790	AdditiveExpression	( n * 10.0 ) + ( * num ++ - '0' )		93658	1		+			
ANR	93791	MultiplicativeExpression	n * 10.0		93658	0		*			
ANR	93792	Identifier	n		93658	0					
ANR	93793	PrimaryExpression	10.0		93658	1					
ANR	93794	AdditiveExpression	* num ++ - '0'		93658	1		-			
ANR	93795	UnaryOperationExpression	* num ++		93658	0					
ANR	93796	UnaryOperator	*		93658	0					
ANR	93797	PostIncDecOperationExpression	num ++		93658	1					
ANR	93798	Identifier	num		93658	0					
ANR	93799	IncDec	++		93658	1					
ANR	93800	PrimaryExpression	'0'		93658	1					
ANR	93801	PostIncDecOperationExpression	scale --		93658	1					
ANR	93802	Identifier	scale		93658	0					
ANR	93803	IncDec	--		93658	1					
ANR	93804	Condition	* num >= '0' && * num <= '9'	116:8:3781:3802	93658	1	True				
ANR	93805	AndExpression	* num >= '0' && * num <= '9'		93658	0		&&			
ANR	93806	RelationalExpression	* num >= '0'		93658	0		>=			
ANR	93807	UnaryOperationExpression	* num		93658	0					
ANR	93808	UnaryOperator	*		93658	0					
ANR	93809	Identifier	num		93658	1					
ANR	93810	PrimaryExpression	'0'		93658	1					
ANR	93811	RelationalExpression	* num <= '9'		93658	1		<=			
ANR	93812	UnaryOperationExpression	* num		93658	0					
ANR	93813	UnaryOperator	*		93658	0					
ANR	93814	Identifier	num		93658	1					
ANR	93815	PrimaryExpression	'9'		93658	1					
ANR	93816	IfStatement	if ( * num == 'e' || * num == 'E' )		93658	6					
ANR	93817	Condition	* num == 'e' || * num == 'E'	117:5:3835:3856	93658	0	True				
ANR	93818	OrExpression	* num == 'e' || * num == 'E'		93658	0		||			
ANR	93819	EqualityExpression	* num == 'e'		93658	0		==			
ANR	93820	UnaryOperationExpression	* num		93658	0					
ANR	93821	UnaryOperator	*		93658	0					
ANR	93822	Identifier	num		93658	1					
ANR	93823	PrimaryExpression	'e'		93658	1					
ANR	93824	EqualityExpression	* num == 'E'		93658	1		==			
ANR	93825	UnaryOperationExpression	* num		93658	0					
ANR	93826	UnaryOperator	*		93658	0					
ANR	93827	Identifier	num		93658	1					
ANR	93828	PrimaryExpression	'E'		93658	1					
ANR	93829	CompoundStatement		11:1:480:480	93658	1					
ANR	93830	ExpressionStatement	num ++	118:3:3879:3884	93658	0	True				
ANR	93831	PostIncDecOperationExpression	num ++		93658	0					
ANR	93832	Identifier	num		93658	0					
ANR	93833	IncDec	++		93658	1					
ANR	93834	IfStatement	if ( * num == '+' )		93658	1					
ANR	93835	Condition	* num == '+'	118:13:3889:3897	93658	0	True				
ANR	93836	EqualityExpression	* num == '+'		93658	0		==			
ANR	93837	UnaryOperationExpression	* num		93658	0					
ANR	93838	UnaryOperator	*		93658	0					
ANR	93839	Identifier	num		93658	1					
ANR	93840	PrimaryExpression	'+'		93658	1					
ANR	93841	ExpressionStatement	num ++	118:24:3900:3905	93658	1	True				
ANR	93842	PostIncDecOperationExpression	num ++		93658	0					
ANR	93843	Identifier	num		93658	0					
ANR	93844	IncDec	++		93658	1					
ANR	93845	ElseStatement	else		93658	0					
ANR	93846	IfStatement	if ( * num == '-' )		93658	0					
ANR	93847	Condition	* num == '-'	118:40:3916:3924	93658	0	True				
ANR	93848	EqualityExpression	* num == '-'		93658	0		==			
ANR	93849	UnaryOperationExpression	* num		93658	0					
ANR	93850	UnaryOperator	*		93658	0					
ANR	93851	Identifier	num		93658	1					
ANR	93852	PrimaryExpression	'-'		93658	1					
ANR	93853	ExpressionStatement	"signsubscale = - 1 , num ++"	118:51:3927:3948	93658	1	True				
ANR	93854	Expression	"signsubscale = - 1 , num ++"		93658	0					
ANR	93855	AssignmentExpression	signsubscale = - 1		93658	0		=			
ANR	93856	Identifier	signsubscale		93658	0					
ANR	93857	UnaryOperationExpression	- 1		93658	1					
ANR	93858	UnaryOperator	-		93658	0					
ANR	93859	PrimaryExpression	1		93658	1					
ANR	93860	PostIncDecOperationExpression	num ++		93658	1					
ANR	93861	Identifier	num		93658	0					
ANR	93862	IncDec	++		93658	1					
ANR	93863	WhileStatement	while ( * num >= '0' && * num <= '9' )		93658	2					
ANR	93864	Condition	* num >= '0' && * num <= '9'	119:9:3977:3998	93658	0	True				
ANR	93865	AndExpression	* num >= '0' && * num <= '9'		93658	0		&&			
ANR	93866	RelationalExpression	* num >= '0'		93658	0		>=			
ANR	93867	UnaryOperationExpression	* num		93658	0					
ANR	93868	UnaryOperator	*		93658	0					
ANR	93869	Identifier	num		93658	1					
ANR	93870	PrimaryExpression	'0'		93658	1					
ANR	93871	RelationalExpression	* num <= '9'		93658	1		<=			
ANR	93872	UnaryOperationExpression	* num		93658	0					
ANR	93873	UnaryOperator	*		93658	0					
ANR	93874	Identifier	num		93658	1					
ANR	93875	PrimaryExpression	'9'		93658	1					
ANR	93876	ExpressionStatement	subscale = ( subscale * 10 ) + ( * num ++ - '0' )	119:33:4001:4038	93658	1	True				
ANR	93877	AssignmentExpression	subscale = ( subscale * 10 ) + ( * num ++ - '0' )		93658	0		=			
ANR	93878	Identifier	subscale		93658	0					
ANR	93879	AdditiveExpression	( subscale * 10 ) + ( * num ++ - '0' )		93658	1		+			
ANR	93880	MultiplicativeExpression	subscale * 10		93658	0		*			
ANR	93881	Identifier	subscale		93658	0					
ANR	93882	PrimaryExpression	10		93658	1					
ANR	93883	AdditiveExpression	* num ++ - '0'		93658	1		-			
ANR	93884	UnaryOperationExpression	* num ++		93658	0					
ANR	93885	UnaryOperator	*		93658	0					
ANR	93886	PostIncDecOperationExpression	num ++		93658	1					
ANR	93887	Identifier	num		93658	0					
ANR	93888	IncDec	++		93658	1					
ANR	93889	PrimaryExpression	'0'		93658	1					
ANR	93890	ExpressionStatement	"n = sign * n * pow ( 10.0 , ( scale + subscale * signsubscale ) )"	122:1:4059:4107	93658	7	True				
ANR	93891	AssignmentExpression	"n = sign * n * pow ( 10.0 , ( scale + subscale * signsubscale ) )"		93658	0		=			
ANR	93892	Identifier	n		93658	0					
ANR	93893	MultiplicativeExpression	"sign * n * pow ( 10.0 , ( scale + subscale * signsubscale ) )"		93658	1		*			
ANR	93894	Identifier	sign		93658	0					
ANR	93895	MultiplicativeExpression	"n * pow ( 10.0 , ( scale + subscale * signsubscale ) )"		93658	1		*			
ANR	93896	Identifier	n		93658	0					
ANR	93897	CallExpression	"pow ( 10.0 , ( scale + subscale * signsubscale ) )"		93658	1					
ANR	93898	Callee	pow		93658	0					
ANR	93899	Identifier	pow		93658	0					
ANR	93900	ArgumentList	10.0		93658	1					
ANR	93901	Argument	10.0		93658	0					
ANR	93902	PrimaryExpression	10.0		93658	0					
ANR	93903	Argument	scale + subscale * signsubscale		93658	1					
ANR	93904	AdditiveExpression	scale + subscale * signsubscale		93658	0		+			
ANR	93905	Identifier	scale		93658	0					
ANR	93906	MultiplicativeExpression	subscale * signsubscale		93658	1		*			
ANR	93907	Identifier	subscale		93658	0					
ANR	93908	Identifier	signsubscale		93658	1					
ANR	93909	ExpressionStatement	item -> valuedouble = n	124:1:4165:4184	93658	8	True				
ANR	93910	AssignmentExpression	item -> valuedouble = n		93658	0		=			
ANR	93911	PtrMemberAccess	item -> valuedouble		93658	0					
ANR	93912	Identifier	item		93658	0					
ANR	93913	Identifier	valuedouble		93658	1					
ANR	93914	Identifier	n		93658	1					
ANR	93915	ExpressionStatement	item -> valueint = ( int ) n	125:1:4187:4208	93658	9	True				
ANR	93916	AssignmentExpression	item -> valueint = ( int ) n		93658	0		=			
ANR	93917	PtrMemberAccess	item -> valueint		93658	0					
ANR	93918	Identifier	item		93658	0					
ANR	93919	Identifier	valueint		93658	1					
ANR	93920	CastExpression	( int ) n		93658	1					
ANR	93921	CastTarget	int		93658	0					
ANR	93922	Identifier	n		93658	1					
ANR	93923	ExpressionStatement	item -> type = cJSON_Number	126:1:4211:4234	93658	10	True				
ANR	93924	AssignmentExpression	item -> type = cJSON_Number		93658	0		=			
ANR	93925	PtrMemberAccess	item -> type		93658	0					
ANR	93926	Identifier	item		93658	0					
ANR	93927	Identifier	type		93658	1					
ANR	93928	Identifier	cJSON_Number		93658	1					
ANR	93929	ReturnStatement	return num ;	127:1:4237:4247	93658	11	True				
ANR	93930	Identifier	num		93658	0					
ANR	93931	ReturnType	static const char *		93658	1					
ANR	93932	Identifier	parse_number		93658	2					
ANR	93933	ParameterList	"cJSON * item , const char * num"		93658	3					
ANR	93934	Parameter	cJSON * item	107:32:3367:3377	93658	0	True				
ANR	93935	ParameterType	cJSON *		93658	0					
ANR	93936	Identifier	item		93658	1					
ANR	93937	Parameter	const char * num	107:44:3379:3393	93658	1	True				
ANR	93938	ParameterType	const char *		93658	0					
ANR	93939	Identifier	num		93658	1					
ANR	93940	CFGEntryNode	ENTRY		93658		True				
ANR	93941	CFGExitNode	EXIT		93658		True				
ANR	93942	Symbol	* num ++		93658						
ANR	93943	Symbol	item		93658						
ANR	93944	Symbol	item -> type		93658						
ANR	93945	Symbol	num		93658						
ANR	93946	Symbol	sign		93658						
ANR	93947	Symbol	scale		93658						
ANR	93948	Symbol	signsubscale		93658						
ANR	93949	Symbol	item -> valuedouble		93658						
ANR	93950	Symbol	n		93658						
ANR	93951	Symbol	* num		93658						
ANR	93952	Symbol	subscale		93658						
ANR	93953	Symbol	* item		93658						
ANR	93954	Symbol	cJSON_Number		93658						
ANR	93955	Symbol	pow		93658						
ANR	93956	Symbol	item -> valueint		93658						
ANR	93957	Function	cJSON_print_number	131:0:4318:4879							
ANR	93958	FunctionDef	cJSON_print_number (cJSON * item)		93957	0					
ANR	93959	CompoundStatement		132:0:4356:4879	93957	0					
ANR	93960	IdentifierDeclStatement	char * str ;	133:1:4359:4368	93957	0	True				
ANR	93961	IdentifierDecl	* str		93957	0					
ANR	93962	IdentifierDeclType	char *		93957	0					
ANR	93963	Identifier	str		93957	1					
ANR	93964	IdentifierDeclStatement	double d = item -> valuedouble ;	134:1:4371:4397	93957	1	True				
ANR	93965	IdentifierDecl	d = item -> valuedouble		93957	0					
ANR	93966	IdentifierDeclType	double		93957	0					
ANR	93967	Identifier	d		93957	1					
ANR	93968	AssignmentExpression	d = item -> valuedouble		93957	2		=			
ANR	93969	Identifier	d		93957	0					
ANR	93970	PtrMemberAccess	item -> valuedouble		93957	1					
ANR	93971	Identifier	item		93957	0					
ANR	93972	Identifier	valuedouble		93957	1					
ANR	93973	IfStatement	if ( fabs ( ( ( double ) item -> valueint ) - d ) <= DBL_EPSILON && d <= INT_MAX && d >= INT_MIN )		93957	2					
ANR	93974	Condition	fabs ( ( ( double ) item -> valueint ) - d ) <= DBL_EPSILON && d <= INT_MAX && d >= INT_MIN	135:5:4404:4476	93957	0	True				
ANR	93975	AndExpression	fabs ( ( ( double ) item -> valueint ) - d ) <= DBL_EPSILON && d <= INT_MAX && d >= INT_MIN		93957	0		&&			
ANR	93976	RelationalExpression	fabs ( ( ( double ) item -> valueint ) - d ) <= DBL_EPSILON		93957	0		<=			
ANR	93977	CallExpression	fabs ( ( ( double ) item -> valueint ) - d )		93957	0					
ANR	93978	Callee	fabs		93957	0					
ANR	93979	Identifier	fabs		93957	0					
ANR	93980	ArgumentList	( ( double ) item -> valueint ) - d		93957	1					
ANR	93981	Argument	( ( double ) item -> valueint ) - d		93957	0					
ANR	93982	AdditiveExpression	( ( double ) item -> valueint ) - d		93957	0		-			
ANR	93983	CastExpression	( double ) item -> valueint		93957	0					
ANR	93984	CastTarget	double		93957	0					
ANR	93985	PtrMemberAccess	item -> valueint		93957	1					
ANR	93986	Identifier	item		93957	0					
ANR	93987	Identifier	valueint		93957	1					
ANR	93988	Identifier	d		93957	1					
ANR	93989	Identifier	DBL_EPSILON		93957	1					
ANR	93990	AndExpression	d <= INT_MAX && d >= INT_MIN		93957	1		&&			
ANR	93991	RelationalExpression	d <= INT_MAX		93957	0		<=			
ANR	93992	Identifier	d		93957	0					
ANR	93993	Identifier	INT_MAX		93957	1					
ANR	93994	RelationalExpression	d >= INT_MIN		93957	1		>=			
ANR	93995	Identifier	d		93957	0					
ANR	93996	Identifier	INT_MIN		93957	1					
ANR	93997	CompoundStatement		5:1:123:123	93957	1					
ANR	93998	ExpressionStatement	str = ( char * ) cJSON_malloc ( 21 )	137:2:4484:4511	93957	0	True				
ANR	93999	AssignmentExpression	str = ( char * ) cJSON_malloc ( 21 )		93957	0		=			
ANR	94000	Identifier	str		93957	0					
ANR	94001	CastExpression	( char * ) cJSON_malloc ( 21 )		93957	1					
ANR	94002	CastTarget	char *		93957	0					
ANR	94003	CallExpression	cJSON_malloc ( 21 )		93957	1					
ANR	94004	Callee	cJSON_malloc		93957	0					
ANR	94005	Identifier	cJSON_malloc		93957	0					
ANR	94006	ArgumentList	21		93957	1					
ANR	94007	Argument	21		93957	0					
ANR	94008	PrimaryExpression	21		93957	0					
ANR	94009	IfStatement	if ( str )		93957	1					
ANR	94010	Condition	str	138:6:4564:4566	93957	0	True				
ANR	94011	Identifier	str		93957	0					
ANR	94012	ExpressionStatement	"sprintf ( str , ""%d"" , item -> valueint )"	138:11:4569:4601	93957	1	True				
ANR	94013	CallExpression	"sprintf ( str , ""%d"" , item -> valueint )"		93957	0					
ANR	94014	Callee	sprintf		93957	0					
ANR	94015	Identifier	sprintf		93957	0					
ANR	94016	ArgumentList	str		93957	1					
ANR	94017	Argument	str		93957	0					
ANR	94018	Identifier	str		93957	0					
ANR	94019	Argument	"""%d"""		93957	1					
ANR	94020	PrimaryExpression	"""%d"""		93957	0					
ANR	94021	Argument	item -> valueint		93957	2					
ANR	94022	PtrMemberAccess	item -> valueint		93957	0					
ANR	94023	Identifier	item		93957	0					
ANR	94024	Identifier	valueint		93957	1					
ANR	94025	ElseStatement	else		93957	0					
ANR	94026	CompoundStatement		10:1:256:256	93957	0					
ANR	94027	ExpressionStatement	str = ( char * ) cJSON_malloc ( 64 )	142:2:4617:4644	93957	0	True				
ANR	94028	AssignmentExpression	str = ( char * ) cJSON_malloc ( 64 )		93957	0		=			
ANR	94029	Identifier	str		93957	0					
ANR	94030	CastExpression	( char * ) cJSON_malloc ( 64 )		93957	1					
ANR	94031	CastTarget	char *		93957	0					
ANR	94032	CallExpression	cJSON_malloc ( 64 )		93957	1					
ANR	94033	Callee	cJSON_malloc		93957	0					
ANR	94034	Identifier	cJSON_malloc		93957	0					
ANR	94035	ArgumentList	64		93957	1					
ANR	94036	Argument	64		93957	0					
ANR	94037	PrimaryExpression	64		93957	0					
ANR	94038	IfStatement	if ( str )		93957	1					
ANR	94039	Condition	str	143:6:4683:4685	93957	0	True				
ANR	94040	Identifier	str		93957	0					
ANR	94041	CompoundStatement		13:2:333:333	93957	1					
ANR	94042	IfStatement	if ( fabs ( floor ( d ) - d ) <= DBL_EPSILON )		93957	0					
ANR	94043	Condition	fabs ( floor ( d ) - d ) <= DBL_EPSILON	145:7:4699:4727	93957	0	True				
ANR	94044	RelationalExpression	fabs ( floor ( d ) - d ) <= DBL_EPSILON		93957	0		<=			
ANR	94045	CallExpression	fabs ( floor ( d ) - d )		93957	0					
ANR	94046	Callee	fabs		93957	0					
ANR	94047	Identifier	fabs		93957	0					
ANR	94048	ArgumentList	floor ( d ) - d		93957	1					
ANR	94049	Argument	floor ( d ) - d		93957	0					
ANR	94050	AdditiveExpression	floor ( d ) - d		93957	0		-			
ANR	94051	CallExpression	floor ( d )		93957	0					
ANR	94052	Callee	floor		93957	0					
ANR	94053	Identifier	floor		93957	0					
ANR	94054	ArgumentList	d		93957	1					
ANR	94055	Argument	d		93957	0					
ANR	94056	Identifier	d		93957	0					
ANR	94057	Identifier	d		93957	1					
ANR	94058	Identifier	DBL_EPSILON		93957	1					
ANR	94059	ExpressionStatement	"sprintf ( str , ""%.0f"" , d )"	145:40:4732:4753	93957	1	True				
ANR	94060	CallExpression	"sprintf ( str , ""%.0f"" , d )"		93957	0					
ANR	94061	Callee	sprintf		93957	0					
ANR	94062	Identifier	sprintf		93957	0					
ANR	94063	ArgumentList	str		93957	1					
ANR	94064	Argument	str		93957	0					
ANR	94065	Identifier	str		93957	0					
ANR	94066	Argument	"""%.0f"""		93957	1					
ANR	94067	PrimaryExpression	"""%.0f"""		93957	0					
ANR	94068	Argument	d		93957	2					
ANR	94069	Identifier	d		93957	0					
ANR	94070	ElseStatement	else		93957	0					
ANR	94071	IfStatement	if ( fabs ( d ) < 1.0e-6 || fabs ( d ) > 1.0e9 )		93957	0					
ANR	94072	Condition	fabs ( d ) < 1.0e-6 || fabs ( d ) > 1.0e9	146:12:4767:4797	93957	0	True				
ANR	94073	OrExpression	fabs ( d ) < 1.0e-6 || fabs ( d ) > 1.0e9		93957	0		||			
ANR	94074	RelationalExpression	fabs ( d ) < 1.0e-6		93957	0		<			
ANR	94075	CallExpression	fabs ( d )		93957	0					
ANR	94076	Callee	fabs		93957	0					
ANR	94077	Identifier	fabs		93957	0					
ANR	94078	ArgumentList	d		93957	1					
ANR	94079	Argument	d		93957	0					
ANR	94080	Identifier	d		93957	0					
ANR	94081	PrimaryExpression	1.0e-6		93957	1					
ANR	94082	RelationalExpression	fabs ( d ) > 1.0e9		93957	1		>			
ANR	94083	CallExpression	fabs ( d )		93957	0					
ANR	94084	Callee	fabs		93957	0					
ANR	94085	Identifier	fabs		93957	0					
ANR	94086	ArgumentList	d		93957	1					
ANR	94087	Argument	d		93957	0					
ANR	94088	Identifier	d		93957	0					
ANR	94089	PrimaryExpression	1.0e9		93957	1					
ANR	94090	ExpressionStatement	"sprintf ( str , ""%e"" , d )"	146:45:4800:4819	93957	1	True				
ANR	94091	CallExpression	"sprintf ( str , ""%e"" , d )"		93957	0					
ANR	94092	Callee	sprintf		93957	0					
ANR	94093	Identifier	sprintf		93957	0					
ANR	94094	ArgumentList	str		93957	1					
ANR	94095	Argument	str		93957	0					
ANR	94096	Identifier	str		93957	0					
ANR	94097	Argument	"""%e"""		93957	1					
ANR	94098	PrimaryExpression	"""%e"""		93957	0					
ANR	94099	Argument	d		93957	2					
ANR	94100	Identifier	d		93957	0					
ANR	94101	ElseStatement	else		93957	0					
ANR	94102	ExpressionStatement	"sprintf ( str , ""%f"" , d )"	147:17:4838:4857	93957	0	True				
ANR	94103	CallExpression	"sprintf ( str , ""%f"" , d )"		93957	0					
ANR	94104	Callee	sprintf		93957	0					
ANR	94105	Identifier	sprintf		93957	0					
ANR	94106	ArgumentList	str		93957	1					
ANR	94107	Argument	str		93957	0					
ANR	94108	Identifier	str		93957	0					
ANR	94109	Argument	"""%f"""		93957	1					
ANR	94110	PrimaryExpression	"""%f"""		93957	0					
ANR	94111	Argument	d		93957	2					
ANR	94112	Identifier	d		93957	0					
ANR	94113	ReturnStatement	return str ;	150:1:4867:4877	93957	3	True				
ANR	94114	Identifier	str		93957	0					
ANR	94115	ReturnType	char *		93957	1					
ANR	94116	Identifier	cJSON_print_number		93957	2					
ANR	94117	ParameterList	cJSON * item		93957	3					
ANR	94118	Parameter	cJSON * item	131:25:4343:4353	93957	0	True				
ANR	94119	ParameterType	cJSON *		93957	0					
ANR	94120	Identifier	item		93957	1					
ANR	94121	CFGEntryNode	ENTRY		93957		True				
ANR	94122	CFGExitNode	EXIT		93957		True				
ANR	94123	Symbol	str		93957						
ANR	94124	Symbol	item		93957						
ANR	94125	Symbol	fabs		93957						
ANR	94126	Symbol	d		93957						
ANR	94127	Symbol	* item		93957						
ANR	94128	Symbol	INT_MAX		93957						
ANR	94129	Symbol	item -> valuedouble		93957						
ANR	94130	Symbol	item -> valueint		93957						
ANR	94131	Symbol	floor		93957						
ANR	94132	Symbol	DBL_EPSILON		93957						
ANR	94133	Symbol	INT_MIN		93957						
ANR	94134	Symbol	cJSON_malloc		93957						
ANR	94135	DeclStmt									
ANR	94136	Decl							const unsigned char	const unsigned char [ 7 ]	firstByteMark
ANR	94137	Function	parse_string	155:0:5047:6790							
ANR	94138	FunctionDef	"parse_string (cJSON * item , const char * str)"		94137	0					
ANR	94139	CompoundStatement		156:0:5108:6790	94137	0					
ANR	94140	IdentifierDeclStatement	const char * ptr = str + 1 ;	157:1:5111:5132	94137	0	True				
ANR	94141	IdentifierDecl	* ptr = str + 1		94137	0					
ANR	94142	IdentifierDeclType	const char *		94137	0					
ANR	94143	Identifier	ptr		94137	1					
ANR	94144	AssignmentExpression	* ptr = str + 1		94137	2		=			
ANR	94145	Identifier	ptr		94137	0					
ANR	94146	AdditiveExpression	str + 1		94137	1		+			
ANR	94147	Identifier	str		94137	0					
ANR	94148	PrimaryExpression	1		94137	1					
ANR	94149	IdentifierDeclStatement	char * ptr2 ;	157:23:5133:5143	94137	1	True				
ANR	94150	IdentifierDecl	* ptr2		94137	0					
ANR	94151	IdentifierDeclType	char *		94137	0					
ANR	94152	Identifier	ptr2		94137	1					
ANR	94153	IdentifierDeclStatement	char * out ;	157:34:5144:5153	94137	2	True				
ANR	94154	IdentifierDecl	* out		94137	0					
ANR	94155	IdentifierDeclType	char *		94137	0					
ANR	94156	Identifier	out		94137	1					
ANR	94157	IdentifierDeclStatement	int len = 0 ;	157:44:5154:5163	94137	3	True				
ANR	94158	IdentifierDecl	len = 0		94137	0					
ANR	94159	IdentifierDeclType	int		94137	0					
ANR	94160	Identifier	len		94137	1					
ANR	94161	AssignmentExpression	len = 0		94137	2		=			
ANR	94162	Identifier	len		94137	0					
ANR	94163	PrimaryExpression	0		94137	1					
ANR	94164	IdentifierDeclStatement	"unsigned uc , uc2 ;"	157:54:5164:5179	94137	4	True				
ANR	94165	IdentifierDecl	uc		94137	0					
ANR	94166	IdentifierDeclType	unsigned		94137	0					
ANR	94167	Identifier	uc		94137	1					
ANR	94168	IdentifierDecl	uc2		94137	1					
ANR	94169	IdentifierDeclType	unsigned		94137	0					
ANR	94170	Identifier	uc2		94137	1					
ANR	94171	IfStatement	"if ( * str != '\\""' )"		94137	5					
ANR	94172	Condition	"* str != '\\""'"	158:5:5186:5195	94137	0	True				
ANR	94173	EqualityExpression	"* str != '\\""'"		94137	0		!=			
ANR	94174	UnaryOperationExpression	* str		94137	0					
ANR	94175	UnaryOperator	*		94137	0					
ANR	94176	Identifier	str		94137	1					
ANR	94177	PrimaryExpression	"'\\""'"		94137	1					
ANR	94178	CompoundStatement		3:17:89:89	94137	1					
ANR	94179	ExpressionStatement	ep = str	158:18:5199:5205	94137	0	True				
ANR	94180	AssignmentExpression	ep = str		94137	0		=			
ANR	94181	Identifier	ep		94137	0					
ANR	94182	Identifier	str		94137	1					
ANR	94183	ReturnStatement	return 0 ;	158:25:5206:5214	94137	1	True				
ANR	94184	PrimaryExpression	0		94137	0					
ANR	94185	WhileStatement	"while ( * ptr != '\\""' && * ptr && ++ len )"		94137	6					
ANR	94186	Condition	"* ptr != '\\""' && * ptr && ++ len"	160:8:5247:5273	94137	0	True				
ANR	94187	AndExpression	"* ptr != '\\""' && * ptr && ++ len"		94137	0		&&			
ANR	94188	EqualityExpression	"* ptr != '\\""'"		94137	0		!=			
ANR	94189	UnaryOperationExpression	* ptr		94137	0					
ANR	94190	UnaryOperator	*		94137	0					
ANR	94191	Identifier	ptr		94137	1					
ANR	94192	PrimaryExpression	"'\\""'"		94137	1					
ANR	94193	AndExpression	* ptr && ++ len		94137	1		&&			
ANR	94194	UnaryOperationExpression	* ptr		94137	0					
ANR	94195	UnaryOperator	*		94137	0					
ANR	94196	Identifier	ptr		94137	1					
ANR	94197	UnaryExpression	++ len		94137	1					
ANR	94198	IncDec	++		94137	0					
ANR	94199	Identifier	len		94137	1					
ANR	94200	IfStatement	if ( * ptr ++ == '\\\\' )		94137	1					
ANR	94201	Condition	* ptr ++ == '\\\\'	160:41:5280:5293	94137	0	True				
ANR	94202	EqualityExpression	* ptr ++ == '\\\\'		94137	0		==			
ANR	94203	UnaryOperationExpression	* ptr ++		94137	0					
ANR	94204	UnaryOperator	*		94137	0					
ANR	94205	PostIncDecOperationExpression	ptr ++		94137	1					
ANR	94206	Identifier	ptr		94137	0					
ANR	94207	IncDec	++		94137	1					
ANR	94208	PrimaryExpression	'\\\\'		94137	1					
ANR	94209	ExpressionStatement	ptr ++	160:57:5296:5301	94137	1	True				
ANR	94210	PostIncDecOperationExpression	ptr ++		94137	0					
ANR	94211	Identifier	ptr		94137	0					
ANR	94212	IncDec	++		94137	1					
ANR	94213	ExpressionStatement	out = ( char * ) cJSON_malloc ( len + 1 )	162:1:5333:5363	94137	7	True				
ANR	94214	AssignmentExpression	out = ( char * ) cJSON_malloc ( len + 1 )		94137	0		=			
ANR	94215	Identifier	out		94137	0					
ANR	94216	CastExpression	( char * ) cJSON_malloc ( len + 1 )		94137	1					
ANR	94217	CastTarget	char *		94137	0					
ANR	94218	CallExpression	cJSON_malloc ( len + 1 )		94137	1					
ANR	94219	Callee	cJSON_malloc		94137	0					
ANR	94220	Identifier	cJSON_malloc		94137	0					
ANR	94221	ArgumentList	len + 1		94137	1					
ANR	94222	Argument	len + 1		94137	0					
ANR	94223	AdditiveExpression	len + 1		94137	0		+			
ANR	94224	Identifier	len		94137	0					
ANR	94225	PrimaryExpression	1		94137	1					
ANR	94226	IfStatement	if ( ! out )		94137	8					
ANR	94227	Condition	! out	163:5:5426:5429	94137	0	True				
ANR	94228	UnaryOperationExpression	! out		94137	0					
ANR	94229	UnaryOperator	!		94137	0					
ANR	94230	Identifier	out		94137	1					
ANR	94231	ReturnStatement	return 0 ;	163:11:5432:5440	94137	1	True				
ANR	94232	PrimaryExpression	0		94137	0					
ANR	94233	ExpressionStatement	ptr = str + 1	165:1:5445:5454	94137	9	True				
ANR	94234	AssignmentExpression	ptr = str + 1		94137	0		=			
ANR	94235	Identifier	ptr		94137	0					
ANR	94236	AdditiveExpression	str + 1		94137	1		+			
ANR	94237	Identifier	str		94137	0					
ANR	94238	PrimaryExpression	1		94137	1					
ANR	94239	ExpressionStatement	ptr2 = out	165:11:5455:5463	94137	10	True				
ANR	94240	AssignmentExpression	ptr2 = out		94137	0		=			
ANR	94241	Identifier	ptr2		94137	0					
ANR	94242	Identifier	out		94137	1					
ANR	94243	WhileStatement	"while ( * ptr != '\\""' && * ptr )"		94137	11					
ANR	94244	Condition	"* ptr != '\\""' && * ptr"	166:8:5473:5490	94137	0	True				
ANR	94245	AndExpression	"* ptr != '\\""' && * ptr"		94137	0		&&			
ANR	94246	EqualityExpression	"* ptr != '\\""'"		94137	0		!=			
ANR	94247	UnaryOperationExpression	* ptr		94137	0					
ANR	94248	UnaryOperator	*		94137	0					
ANR	94249	Identifier	ptr		94137	1					
ANR	94250	PrimaryExpression	"'\\""'"		94137	1					
ANR	94251	UnaryOperationExpression	* ptr		94137	1					
ANR	94252	UnaryOperator	*		94137	0					
ANR	94253	Identifier	ptr		94137	1					
ANR	94254	CompoundStatement		12:1:385:385	94137	1					
ANR	94255	IfStatement	if ( * ptr != '\\\\' )		94137	0					
ANR	94256	Condition	* ptr != '\\\\'	168:6:5502:5511	94137	0	True				
ANR	94257	EqualityExpression	* ptr != '\\\\'		94137	0		!=			
ANR	94258	UnaryOperationExpression	* ptr		94137	0					
ANR	94259	UnaryOperator	*		94137	0					
ANR	94260	Identifier	ptr		94137	1					
ANR	94261	PrimaryExpression	'\\\\'		94137	1					
ANR	94262	ExpressionStatement	* ptr2 ++ = * ptr ++	168:18:5514:5528	94137	1	True				
ANR	94263	AssignmentExpression	* ptr2 ++ = * ptr ++		94137	0		=			
ANR	94264	UnaryOperationExpression	* ptr2 ++		94137	0					
ANR	94265	UnaryOperator	*		94137	0					
ANR	94266	PostIncDecOperationExpression	ptr2 ++		94137	1					
ANR	94267	Identifier	ptr2		94137	0					
ANR	94268	IncDec	++		94137	1					
ANR	94269	UnaryOperationExpression	* ptr ++		94137	1					
ANR	94270	UnaryOperator	*		94137	0					
ANR	94271	PostIncDecOperationExpression	ptr ++		94137	1					
ANR	94272	Identifier	ptr		94137	0					
ANR	94273	IncDec	++		94137	1					
ANR	94274	ElseStatement	else		94137	0					
ANR	94275	CompoundStatement		15:2:430:430	94137	0					
ANR	94276	ExpressionStatement	ptr ++	171:3:5544:5549	94137	0	True				
ANR	94277	PostIncDecOperationExpression	ptr ++		94137	0					
ANR	94278	Identifier	ptr		94137	0					
ANR	94279	IncDec	++		94137	1					
ANR	94280	SwitchStatement	switch ( * ptr )		94137	1					
ANR	94281	Condition	* ptr	172:11:5562:5565	94137	0	True				
ANR	94282	UnaryOperationExpression	* ptr		94137	0					
ANR	94283	UnaryOperator	*		94137	0					
ANR	94284	Identifier	ptr		94137	1					
ANR	94285	CompoundStatement		18:3:462:462	94137	1					
ANR	94286	Label	case 'b' :	174:4:5577:5585	94137	0	True				
ANR	94287	ExpressionStatement	* ptr2 ++ = '\\b'	174:14:5587:5599	94137	1	True				
ANR	94288	AssignmentExpression	* ptr2 ++ = '\\b'		94137	0		=			
ANR	94289	UnaryOperationExpression	* ptr2 ++		94137	0					
ANR	94290	UnaryOperator	*		94137	0					
ANR	94291	PostIncDecOperationExpression	ptr2 ++		94137	1					
ANR	94292	Identifier	ptr2		94137	0					
ANR	94293	IncDec	++		94137	1					
ANR	94294	PrimaryExpression	'\\b'		94137	1					
ANR	94295	BreakStatement	break ;	174:28:5601:5606	94137	2	True				
ANR	94296	Label	case 'f' :	175:4:5612:5620	94137	3	True				
ANR	94297	ExpressionStatement	* ptr2 ++ = '\\f'	175:14:5622:5634	94137	4	True				
ANR	94298	AssignmentExpression	* ptr2 ++ = '\\f'		94137	0		=			
ANR	94299	UnaryOperationExpression	* ptr2 ++		94137	0					
ANR	94300	UnaryOperator	*		94137	0					
ANR	94301	PostIncDecOperationExpression	ptr2 ++		94137	1					
ANR	94302	Identifier	ptr2		94137	0					
ANR	94303	IncDec	++		94137	1					
ANR	94304	PrimaryExpression	'\\f'		94137	1					
ANR	94305	BreakStatement	break ;	175:28:5636:5641	94137	5	True				
ANR	94306	Label	case 'n' :	176:4:5647:5655	94137	6	True				
ANR	94307	ExpressionStatement	* ptr2 ++ = '\\n'	176:14:5657:5669	94137	7	True				
ANR	94308	AssignmentExpression	* ptr2 ++ = '\\n'		94137	0		=			
ANR	94309	UnaryOperationExpression	* ptr2 ++		94137	0					
ANR	94310	UnaryOperator	*		94137	0					
ANR	94311	PostIncDecOperationExpression	ptr2 ++		94137	1					
ANR	94312	Identifier	ptr2		94137	0					
ANR	94313	IncDec	++		94137	1					
ANR	94314	PrimaryExpression	'\\n'		94137	1					
ANR	94315	BreakStatement	break ;	176:28:5671:5676	94137	8	True				
ANR	94316	Label	case 'r' :	177:4:5682:5690	94137	9	True				
ANR	94317	ExpressionStatement	* ptr2 ++ = '\\r'	177:14:5692:5704	94137	10	True				
ANR	94318	AssignmentExpression	* ptr2 ++ = '\\r'		94137	0		=			
ANR	94319	UnaryOperationExpression	* ptr2 ++		94137	0					
ANR	94320	UnaryOperator	*		94137	0					
ANR	94321	PostIncDecOperationExpression	ptr2 ++		94137	1					
ANR	94322	Identifier	ptr2		94137	0					
ANR	94323	IncDec	++		94137	1					
ANR	94324	PrimaryExpression	'\\r'		94137	1					
ANR	94325	BreakStatement	break ;	177:28:5706:5711	94137	11	True				
ANR	94326	Label	case 't' :	178:4:5717:5725	94137	12	True				
ANR	94327	ExpressionStatement	* ptr2 ++ = '\\t'	178:14:5727:5739	94137	13	True				
ANR	94328	AssignmentExpression	* ptr2 ++ = '\\t'		94137	0		=			
ANR	94329	UnaryOperationExpression	* ptr2 ++		94137	0					
ANR	94330	UnaryOperator	*		94137	0					
ANR	94331	PostIncDecOperationExpression	ptr2 ++		94137	1					
ANR	94332	Identifier	ptr2		94137	0					
ANR	94333	IncDec	++		94137	1					
ANR	94334	PrimaryExpression	'\\t'		94137	1					
ANR	94335	BreakStatement	break ;	178:28:5741:5746	94137	14	True				
ANR	94336	Label	case 'u' :	179:4:5752:5760	94137	15	True				
ANR	94337	ExpressionStatement	"sscanf ( ptr + 1 , ""%4x"" , & uc )"	180:5:5799:5822	94137	16	True				
ANR	94338	CallExpression	"sscanf ( ptr + 1 , ""%4x"" , & uc )"		94137	0					
ANR	94339	Callee	sscanf		94137	0					
ANR	94340	Identifier	sscanf		94137	0					
ANR	94341	ArgumentList	ptr + 1		94137	1					
ANR	94342	Argument	ptr + 1		94137	0					
ANR	94343	AdditiveExpression	ptr + 1		94137	0		+			
ANR	94344	Identifier	ptr		94137	0					
ANR	94345	PrimaryExpression	1		94137	1					
ANR	94346	Argument	"""%4x"""		94137	1					
ANR	94347	PrimaryExpression	"""%4x"""		94137	0					
ANR	94348	Argument	& uc		94137	2					
ANR	94349	UnaryOperationExpression	& uc		94137	0					
ANR	94350	UnaryOperator	&		94137	0					
ANR	94351	Identifier	uc		94137	1					
ANR	94352	ExpressionStatement	ptr += 4	180:29:5823:5829	94137	17	True				
ANR	94353	AssignmentExpression	ptr += 4		94137	0		+=			
ANR	94354	Identifier	ptr		94137	0					
ANR	94355	PrimaryExpression	4		94137	1					
ANR	94356	IfStatement	if ( ( uc >= 0xDC00 && uc <= 0xDFFF ) || uc == 0 )		94137	18					
ANR	94357	Condition	( uc >= 0xDC00 && uc <= 0xDFFF ) || uc == 0	182:9:5869:5903	94137	0	True				
ANR	94358	OrExpression	( uc >= 0xDC00 && uc <= 0xDFFF ) || uc == 0		94137	0		||			
ANR	94359	AndExpression	uc >= 0xDC00 && uc <= 0xDFFF		94137	0		&&			
ANR	94360	RelationalExpression	uc >= 0xDC00		94137	0		>=			
ANR	94361	Identifier	uc		94137	0					
ANR	94362	PrimaryExpression	0xDC00		94137	1					
ANR	94363	RelationalExpression	uc <= 0xDFFF		94137	1		<=			
ANR	94364	Identifier	uc		94137	0					
ANR	94365	PrimaryExpression	0xDFFF		94137	1					
ANR	94366	EqualityExpression	uc == 0		94137	1		==			
ANR	94367	Identifier	uc		94137	0					
ANR	94368	PrimaryExpression	0		94137	1					
ANR	94369	BreakStatement	break ;	182:46:5906:5911	94137	1	True				
ANR	94370	IfStatement	if ( uc >= 0xD800 && uc <= 0xDBFF )		94137	19					
ANR	94371	Condition	uc >= 0xD800 && uc <= 0xDBFF	184:9:5945:5968	94137	0	True				
ANR	94372	AndExpression	uc >= 0xD800 && uc <= 0xDBFF		94137	0		&&			
ANR	94373	RelationalExpression	uc >= 0xD800		94137	0		>=			
ANR	94374	Identifier	uc		94137	0					
ANR	94375	PrimaryExpression	0xD800		94137	1					
ANR	94376	RelationalExpression	uc <= 0xDBFF		94137	1		<=			
ANR	94377	Identifier	uc		94137	0					
ANR	94378	PrimaryExpression	0xDBFF		94137	1					
ANR	94379	CompoundStatement		30:5:893:893	94137	1					
ANR	94380	IfStatement	if ( ptr [ 1 ] != '\\\\' || ptr [ 2 ] != 'u' )		94137	0					
ANR	94381	Condition	ptr [ 1 ] != '\\\\' || ptr [ 2 ] != 'u'	186:10:6014:6040	94137	0	True				
ANR	94382	OrExpression	ptr [ 1 ] != '\\\\' || ptr [ 2 ] != 'u'		94137	0		||			
ANR	94383	EqualityExpression	ptr [ 1 ] != '\\\\'		94137	0		!=			
ANR	94384	ArrayIndexing	ptr [ 1 ]		94137	0					
ANR	94385	Identifier	ptr		94137	0					
ANR	94386	PrimaryExpression	1		94137	1					
ANR	94387	PrimaryExpression	'\\\\'		94137	1					
ANR	94388	EqualityExpression	ptr [ 2 ] != 'u'		94137	1		!=			
ANR	94389	ArrayIndexing	ptr [ 2 ]		94137	0					
ANR	94390	Identifier	ptr		94137	0					
ANR	94391	PrimaryExpression	2		94137	1					
ANR	94392	PrimaryExpression	'u'		94137	1					
ANR	94393	BreakStatement	break ;	186:39:6043:6048	94137	1	True				
ANR	94394	ExpressionStatement	"sscanf ( ptr + 3 , ""%4x"" , & uc2 )"	187:6:6093:6117	94137	1	True				
ANR	94395	CallExpression	"sscanf ( ptr + 3 , ""%4x"" , & uc2 )"		94137	0					
ANR	94396	Callee	sscanf		94137	0					
ANR	94397	Identifier	sscanf		94137	0					
ANR	94398	ArgumentList	ptr + 3		94137	1					
ANR	94399	Argument	ptr + 3		94137	0					
ANR	94400	AdditiveExpression	ptr + 3		94137	0		+			
ANR	94401	Identifier	ptr		94137	0					
ANR	94402	PrimaryExpression	3		94137	1					
ANR	94403	Argument	"""%4x"""		94137	1					
ANR	94404	PrimaryExpression	"""%4x"""		94137	0					
ANR	94405	Argument	& uc2		94137	2					
ANR	94406	UnaryOperationExpression	& uc2		94137	0					
ANR	94407	UnaryOperator	&		94137	0					
ANR	94408	Identifier	uc2		94137	1					
ANR	94409	ExpressionStatement	ptr += 6	187:31:6118:6124	94137	2	True				
ANR	94410	AssignmentExpression	ptr += 6		94137	0		+=			
ANR	94411	Identifier	ptr		94137	0					
ANR	94412	PrimaryExpression	6		94137	1					
ANR	94413	IfStatement	if ( uc2 < 0xDC00 || uc2 > 0xDFFF )		94137	3					
ANR	94414	Condition	uc2 < 0xDC00 || uc2 > 0xDFFF	188:10:6136:6159	94137	0	True				
ANR	94415	OrExpression	uc2 < 0xDC00 || uc2 > 0xDFFF		94137	0		||			
ANR	94416	RelationalExpression	uc2 < 0xDC00		94137	0		<			
ANR	94417	Identifier	uc2		94137	0					
ANR	94418	PrimaryExpression	0xDC00		94137	1					
ANR	94419	RelationalExpression	uc2 > 0xDFFF		94137	1		>			
ANR	94420	Identifier	uc2		94137	0					
ANR	94421	PrimaryExpression	0xDFFF		94137	1					
ANR	94422	BreakStatement	break ;	188:37:6163:6168	94137	1	True				
ANR	94423	ExpressionStatement	uc = 0x10000 | ( ( uc & 0x3FF ) << 10 ) | ( uc2 & 0x3FF )	189:6:6213:6256	94137	4	True				
ANR	94424	AssignmentExpression	uc = 0x10000 | ( ( uc & 0x3FF ) << 10 ) | ( uc2 & 0x3FF )		94137	0		=			
ANR	94425	Identifier	uc		94137	0					
ANR	94426	InclusiveOrExpression	0x10000 | ( ( uc & 0x3FF ) << 10 ) | ( uc2 & 0x3FF )		94137	1		|			
ANR	94427	PrimaryExpression	0x10000		94137	0					
ANR	94428	InclusiveOrExpression	( ( uc & 0x3FF ) << 10 ) | ( uc2 & 0x3FF )		94137	1		|			
ANR	94429	ShiftExpression	( uc & 0x3FF ) << 10		94137	0		<<			
ANR	94430	BitAndExpression	uc & 0x3FF		94137	0		&			
ANR	94431	Identifier	uc		94137	0					
ANR	94432	PrimaryExpression	0x3FF		94137	1					
ANR	94433	PrimaryExpression	10		94137	1					
ANR	94434	BitAndExpression	uc2 & 0x3FF		94137	1		&			
ANR	94435	Identifier	uc2		94137	0					
ANR	94436	PrimaryExpression	0x3FF		94137	1					
ANR	94437	ExpressionStatement	len = 4	192:5:6271:6276	94137	20	True				
ANR	94438	AssignmentExpression	len = 4		94137	0		=			
ANR	94439	Identifier	len		94137	0					
ANR	94440	PrimaryExpression	4		94137	1					
ANR	94441	IfStatement	if ( uc < 0x80 )		94137	21					
ANR	94442	Condition	uc < 0x80	192:15:6281:6287	94137	0	True				
ANR	94443	RelationalExpression	uc < 0x80		94137	0		<			
ANR	94444	Identifier	uc		94137	0					
ANR	94445	PrimaryExpression	0x80		94137	1					
ANR	94446	ExpressionStatement	len = 1	192:24:6290:6295	94137	1	True				
ANR	94447	AssignmentExpression	len = 1		94137	0		=			
ANR	94448	Identifier	len		94137	0					
ANR	94449	PrimaryExpression	1		94137	1					
ANR	94450	ElseStatement	else		94137	0					
ANR	94451	IfStatement	if ( uc < 0x800 )		94137	0					
ANR	94452	Condition	uc < 0x800	192:39:6305:6312	94137	0	True				
ANR	94453	RelationalExpression	uc < 0x800		94137	0		<			
ANR	94454	Identifier	uc		94137	0					
ANR	94455	PrimaryExpression	0x800		94137	1					
ANR	94456	ExpressionStatement	len = 2	192:49:6315:6320	94137	1	True				
ANR	94457	AssignmentExpression	len = 2		94137	0		=			
ANR	94458	Identifier	len		94137	0					
ANR	94459	PrimaryExpression	2		94137	1					
ANR	94460	ElseStatement	else		94137	0					
ANR	94461	IfStatement	if ( uc < 0x10000 )		94137	0					
ANR	94462	Condition	uc < 0x10000	192:64:6330:6339	94137	0	True				
ANR	94463	RelationalExpression	uc < 0x10000		94137	0		<			
ANR	94464	Identifier	uc		94137	0					
ANR	94465	PrimaryExpression	0x10000		94137	1					
ANR	94466	ExpressionStatement	len = 3	192:76:6342:6347	94137	1	True				
ANR	94467	AssignmentExpression	len = 3		94137	0		=			
ANR	94468	Identifier	len		94137	0					
ANR	94469	PrimaryExpression	3		94137	1					
ANR	94470	ExpressionStatement	ptr2 += len	192:83:6349:6358	94137	22	True				
ANR	94471	AssignmentExpression	ptr2 += len		94137	0		+=			
ANR	94472	Identifier	ptr2		94137	0					
ANR	94473	Identifier	len		94137	1					
ANR	94474	SwitchStatement	switch ( len )		94137	23					
ANR	94475	Condition	len	194:13:6379:6381	94137	0	True				
ANR	94476	Identifier	len		94137	0					
ANR	94477	CompoundStatement		39:18:1275:1275	94137	1					
ANR	94478	Label	case 4 :	195:6:6392:6398	94137	0	True				
ANR	94479	ExpressionStatement	* -- ptr2 = ( ( uc | 0x80 ) & 0xBF )	195:14:6400:6429	94137	1	True				
ANR	94480	AssignmentExpression	* -- ptr2 = ( ( uc | 0x80 ) & 0xBF )		94137	0		=			
ANR	94481	UnaryOperationExpression	* -- ptr2		94137	0					
ANR	94482	UnaryOperator	*		94137	0					
ANR	94483	UnaryExpression	-- ptr2		94137	1					
ANR	94484	IncDec	--		94137	0					
ANR	94485	Identifier	ptr2		94137	1					
ANR	94486	BitAndExpression	( uc | 0x80 ) & 0xBF		94137	1		&			
ANR	94487	InclusiveOrExpression	uc | 0x80		94137	0		|			
ANR	94488	Identifier	uc		94137	0					
ANR	94489	PrimaryExpression	0x80		94137	1					
ANR	94490	PrimaryExpression	0xBF		94137	1					
ANR	94491	ExpressionStatement	uc >>= 6	195:45:6431:6439	94137	2	True				
ANR	94492	AssignmentExpression	uc >>= 6		94137	0		>>=			
ANR	94493	Identifier	uc		94137	0					
ANR	94494	PrimaryExpression	6		94137	1					
ANR	94495	Label	case 3 :	196:6:6447:6453	94137	3	True				
ANR	94496	ExpressionStatement	* -- ptr2 = ( ( uc | 0x80 ) & 0xBF )	196:14:6455:6484	94137	4	True				
ANR	94497	AssignmentExpression	* -- ptr2 = ( ( uc | 0x80 ) & 0xBF )		94137	0		=			
ANR	94498	UnaryOperationExpression	* -- ptr2		94137	0					
ANR	94499	UnaryOperator	*		94137	0					
ANR	94500	UnaryExpression	-- ptr2		94137	1					
ANR	94501	IncDec	--		94137	0					
ANR	94502	Identifier	ptr2		94137	1					
ANR	94503	BitAndExpression	( uc | 0x80 ) & 0xBF		94137	1		&			
ANR	94504	InclusiveOrExpression	uc | 0x80		94137	0		|			
ANR	94505	Identifier	uc		94137	0					
ANR	94506	PrimaryExpression	0x80		94137	1					
ANR	94507	PrimaryExpression	0xBF		94137	1					
ANR	94508	ExpressionStatement	uc >>= 6	196:45:6486:6494	94137	5	True				
ANR	94509	AssignmentExpression	uc >>= 6		94137	0		>>=			
ANR	94510	Identifier	uc		94137	0					
ANR	94511	PrimaryExpression	6		94137	1					
ANR	94512	Label	case 2 :	197:6:6502:6508	94137	6	True				
ANR	94513	ExpressionStatement	* -- ptr2 = ( ( uc | 0x80 ) & 0xBF )	197:14:6510:6539	94137	7	True				
ANR	94514	AssignmentExpression	* -- ptr2 = ( ( uc | 0x80 ) & 0xBF )		94137	0		=			
ANR	94515	UnaryOperationExpression	* -- ptr2		94137	0					
ANR	94516	UnaryOperator	*		94137	0					
ANR	94517	UnaryExpression	-- ptr2		94137	1					
ANR	94518	IncDec	--		94137	0					
ANR	94519	Identifier	ptr2		94137	1					
ANR	94520	BitAndExpression	( uc | 0x80 ) & 0xBF		94137	1		&			
ANR	94521	InclusiveOrExpression	uc | 0x80		94137	0		|			
ANR	94522	Identifier	uc		94137	0					
ANR	94523	PrimaryExpression	0x80		94137	1					
ANR	94524	PrimaryExpression	0xBF		94137	1					
ANR	94525	ExpressionStatement	uc >>= 6	197:45:6541:6549	94137	8	True				
ANR	94526	AssignmentExpression	uc >>= 6		94137	0		>>=			
ANR	94527	Identifier	uc		94137	0					
ANR	94528	PrimaryExpression	6		94137	1					
ANR	94529	Label	case 1 :	198:6:6557:6563	94137	9	True				
ANR	94530	ExpressionStatement	* -- ptr2 = ( uc | firstByteMark [ len ] )	198:14:6565:6599	94137	10	True				
ANR	94531	AssignmentExpression	* -- ptr2 = ( uc | firstByteMark [ len ] )		94137	0		=			
ANR	94532	UnaryOperationExpression	* -- ptr2		94137	0					
ANR	94533	UnaryOperator	*		94137	0					
ANR	94534	UnaryExpression	-- ptr2		94137	1					
ANR	94535	IncDec	--		94137	0					
ANR	94536	Identifier	ptr2		94137	1					
ANR	94537	InclusiveOrExpression	uc | firstByteMark [ len ]		94137	1		|			
ANR	94538	Identifier	uc		94137	0					
ANR	94539	ArrayIndexing	firstByteMark [ len ]		94137	1					
ANR	94540	Identifier	firstByteMark		94137	0					
ANR	94541	Identifier	len		94137	1					
ANR	94542	ExpressionStatement	ptr2 += len	200:5:6613:6622	94137	24	True				
ANR	94543	AssignmentExpression	ptr2 += len		94137	0		+=			
ANR	94544	Identifier	ptr2		94137	0					
ANR	94545	Identifier	len		94137	1					
ANR	94546	BreakStatement	break ;	201:5:6629:6634	94137	25	True				
ANR	94547	Label	default :	202:4:6640:6647	94137	26	True				
ANR	94548	Identifier	default		94137	0					
ANR	94549	ExpressionStatement	* ptr2 ++ = * ptr	202:14:6650:6662	94137	27	True				
ANR	94550	AssignmentExpression	* ptr2 ++ = * ptr		94137	0		=			
ANR	94551	UnaryOperationExpression	* ptr2 ++		94137	0					
ANR	94552	UnaryOperator	*		94137	0					
ANR	94553	PostIncDecOperationExpression	ptr2 ++		94137	1					
ANR	94554	Identifier	ptr2		94137	0					
ANR	94555	IncDec	++		94137	1					
ANR	94556	UnaryOperationExpression	* ptr		94137	1					
ANR	94557	UnaryOperator	*		94137	0					
ANR	94558	Identifier	ptr		94137	1					
ANR	94559	BreakStatement	break ;	202:28:6664:6669	94137	28	True				
ANR	94560	ExpressionStatement	ptr ++	204:3:6679:6684	94137	2	True				
ANR	94561	PostIncDecOperationExpression	ptr ++		94137	0					
ANR	94562	Identifier	ptr		94137	0					
ANR	94563	IncDec	++		94137	1					
ANR	94564	ExpressionStatement	* ptr2 = 0	207:1:6694:6701	94137	12	True				
ANR	94565	AssignmentExpression	* ptr2 = 0		94137	0		=			
ANR	94566	UnaryOperationExpression	* ptr2		94137	0					
ANR	94567	UnaryOperator	*		94137	0					
ANR	94568	Identifier	ptr2		94137	1					
ANR	94569	PrimaryExpression	0		94137	1					
ANR	94570	IfStatement	"if ( * ptr == '\\""' )"		94137	13					
ANR	94571	Condition	"* ptr == '\\""'"	208:5:6708:6717	94137	0	True				
ANR	94572	EqualityExpression	"* ptr == '\\""'"		94137	0		==			
ANR	94573	UnaryOperationExpression	* ptr		94137	0					
ANR	94574	UnaryOperator	*		94137	0					
ANR	94575	Identifier	ptr		94137	1					
ANR	94576	PrimaryExpression	"'\\""'"		94137	1					
ANR	94577	ExpressionStatement	ptr ++	208:17:6720:6725	94137	1	True				
ANR	94578	PostIncDecOperationExpression	ptr ++		94137	0					
ANR	94579	Identifier	ptr		94137	0					
ANR	94580	IncDec	++		94137	1					
ANR	94581	ExpressionStatement	item -> valuestring = out	209:1:6728:6749	94137	14	True				
ANR	94582	AssignmentExpression	item -> valuestring = out		94137	0		=			
ANR	94583	PtrMemberAccess	item -> valuestring		94137	0					
ANR	94584	Identifier	item		94137	0					
ANR	94585	Identifier	valuestring		94137	1					
ANR	94586	Identifier	out		94137	1					
ANR	94587	ExpressionStatement	item -> type = cJSON_String	210:1:6752:6775	94137	15	True				
ANR	94588	AssignmentExpression	item -> type = cJSON_String		94137	0		=			
ANR	94589	PtrMemberAccess	item -> type		94137	0					
ANR	94590	Identifier	item		94137	0					
ANR	94591	Identifier	type		94137	1					
ANR	94592	Identifier	cJSON_String		94137	1					
ANR	94593	ReturnStatement	return ptr ;	211:1:6778:6788	94137	16	True				
ANR	94594	Identifier	ptr		94137	0					
ANR	94595	ReturnType	static const char *		94137	1					
ANR	94596	Identifier	parse_string		94137	2					
ANR	94597	ParameterList	"cJSON * item , const char * str"		94137	3					
ANR	94598	Parameter	cJSON * item	155:32:5079:5089	94137	0	True				
ANR	94599	ParameterType	cJSON *		94137	0					
ANR	94600	Identifier	item		94137	1					
ANR	94601	Parameter	const char * str	155:44:5091:5105	94137	1	True				
ANR	94602	ParameterType	const char *		94137	0					
ANR	94603	Identifier	str		94137	1					
ANR	94604	CFGEntryNode	ENTRY		94137		True				
ANR	94605	CFGExitNode	EXIT		94137		True				
ANR	94606	Symbol	item -> type		94137						
ANR	94607	Symbol	& uc2		94137						
ANR	94608	Symbol	uc		94137						
ANR	94609	Symbol	cJSON_malloc		94137						
ANR	94610	Symbol	out		94137						
ANR	94611	Symbol	len		94137						
ANR	94612	Symbol	* item		94137						
ANR	94613	Symbol	* -- ptr2		94137						
ANR	94614	Symbol	* ptr		94137						
ANR	94615	Symbol	& uc		94137						
ANR	94616	Symbol	* ptr2		94137						
ANR	94617	Symbol	* str		94137						
ANR	94618	Symbol	item		94137						
ANR	94619	Symbol	uc2		94137						
ANR	94620	Symbol	* ptr ++		94137						
ANR	94621	Symbol	item -> valuestring		94137						
ANR	94622	Symbol	cJSON_String		94137						
ANR	94623	Symbol	* firstByteMark		94137						
ANR	94624	Symbol	ep		94137						
ANR	94625	Symbol	firstByteMark		94137						
ANR	94626	Symbol	ptr		94137						
ANR	94627	Symbol	* ptr2 ++		94137						
ANR	94628	Symbol	str		94137						
ANR	94629	Symbol	ptr2		94137						
ANR	94630	Symbol	* len		94137						
ANR	94631	Function	print_string_ptr	215:0:6870:7755							
ANR	94632	FunctionDef	print_string_ptr (const char * str)		94631	0					
ANR	94633	CompoundStatement		216:0:6917:7755	94631	0					
ANR	94634	IdentifierDeclStatement	const char * ptr ;	217:1:6920:6935	94631	0	True				
ANR	94635	IdentifierDecl	* ptr		94631	0					
ANR	94636	IdentifierDeclType	const char *		94631	0					
ANR	94637	Identifier	ptr		94631	1					
ANR	94638	IdentifierDeclStatement	"char * ptr2 , * out ;"	217:17:6936:6951	94631	1	True				
ANR	94639	IdentifierDecl	* ptr2		94631	0					
ANR	94640	IdentifierDeclType	char *		94631	0					
ANR	94641	Identifier	ptr2		94631	1					
ANR	94642	IdentifierDecl	* out		94631	1					
ANR	94643	IdentifierDeclType	char *		94631	0					
ANR	94644	Identifier	out		94631	1					
ANR	94645	IdentifierDeclStatement	int len = 0 ;	217:33:6952:6961	94631	2	True				
ANR	94646	IdentifierDecl	len = 0		94631	0					
ANR	94647	IdentifierDeclType	int		94631	0					
ANR	94648	Identifier	len		94631	1					
ANR	94649	AssignmentExpression	len = 0		94631	2		=			
ANR	94650	Identifier	len		94631	0					
ANR	94651	PrimaryExpression	0		94631	1					
ANR	94652	IdentifierDeclStatement	unsigned char token ;	217:43:6962:6981	94631	3	True				
ANR	94653	IdentifierDecl	token		94631	0					
ANR	94654	IdentifierDeclType	unsigned char		94631	0					
ANR	94655	Identifier	token		94631	1					
ANR	94656	IfStatement	if ( ! str )		94631	4					
ANR	94657	Condition	! str	219:5:6990:6993	94631	0	True				
ANR	94658	UnaryOperationExpression	! str		94631	0					
ANR	94659	UnaryOperator	!		94631	0					
ANR	94660	Identifier	str		94631	1					
ANR	94661	ReturnStatement	"return cJSON_strdup ( """" ) ;"	219:11:6996:7019	94631	1	True				
ANR	94662	CallExpression	"cJSON_strdup ( """" )"		94631	0					
ANR	94663	Callee	cJSON_strdup		94631	0					
ANR	94664	Identifier	cJSON_strdup		94631	0					
ANR	94665	ArgumentList	""""""		94631	1					
ANR	94666	Argument	""""""		94631	0					
ANR	94667	PrimaryExpression	""""""		94631	0					
ANR	94668	ExpressionStatement	ptr = str	220:1:7022:7029	94631	5	True				
ANR	94669	AssignmentExpression	ptr = str		94631	0		=			
ANR	94670	Identifier	ptr		94631	0					
ANR	94671	Identifier	str		94631	1					
ANR	94672	WhileStatement	while ( ( token = * ptr ) && ++ len )		94631	6					
ANR	94673	Condition	( token = * ptr ) && ++ len	220:16:7037:7057	94631	0	True				
ANR	94674	AndExpression	( token = * ptr ) && ++ len		94631	0		&&			
ANR	94675	AssignmentExpression	token = * ptr		94631	0		=			
ANR	94676	Identifier	token		94631	0					
ANR	94677	UnaryOperationExpression	* ptr		94631	1					
ANR	94678	UnaryOperator	*		94631	0					
ANR	94679	Identifier	ptr		94631	1					
ANR	94680	UnaryExpression	++ len		94631	1					
ANR	94681	IncDec	++		94631	0					
ANR	94682	Identifier	len		94631	1					
ANR	94683	CompoundStatement		5:39:142:142	94631	1					
ANR	94684	IfStatement	"if ( strchr ( ""\\""\\\\\\b\\f\\n\\r\\t"" , token ) )"		94631	0					
ANR	94685	Condition	"strchr ( ""\\""\\\\\\b\\f\\n\\r\\t"" , token )"	220:44:7065:7094	94631	0	True				
ANR	94686	CallExpression	"strchr ( ""\\""\\\\\\b\\f\\n\\r\\t"" , token )"		94631	0					
ANR	94687	Callee	strchr		94631	0					
ANR	94688	Identifier	strchr		94631	0					
ANR	94689	ArgumentList	"""\\""\\\\\\b\\f\\n\\r\\t"""		94631	1					
ANR	94690	Argument	"""\\""\\\\\\b\\f\\n\\r\\t"""		94631	0					
ANR	94691	PrimaryExpression	"""\\""\\\\\\b\\f\\n\\r\\t"""		94631	0					
ANR	94692	Argument	token		94631	1					
ANR	94693	Identifier	token		94631	0					
ANR	94694	ExpressionStatement	len ++	220:76:7097:7102	94631	1	True				
ANR	94695	PostIncDecOperationExpression	len ++		94631	0					
ANR	94696	Identifier	len		94631	0					
ANR	94697	IncDec	++		94631	1					
ANR	94698	ElseStatement	else		94631	0					
ANR	94699	IfStatement	if ( token < 32 )		94631	0					
ANR	94700	Condition	token < 32	220:92:7113:7120	94631	0	True				
ANR	94701	RelationalExpression	token < 32		94631	0		<			
ANR	94702	Identifier	token		94631	0					
ANR	94703	PrimaryExpression	32		94631	1					
ANR	94704	ExpressionStatement	len += 5	220:102:7123:7129	94631	1	True				
ANR	94705	AssignmentExpression	len += 5		94631	0		+=			
ANR	94706	Identifier	len		94631	0					
ANR	94707	PrimaryExpression	5		94631	1					
ANR	94708	ExpressionStatement	ptr ++	220:109:7130:7135	94631	1	True				
ANR	94709	PostIncDecOperationExpression	ptr ++		94631	0					
ANR	94710	Identifier	ptr		94631	0					
ANR	94711	IncDec	++		94631	1					
ANR	94712	ExpressionStatement	out = ( char * ) cJSON_malloc ( len + 3 )	222:1:7141:7171	94631	7	True				
ANR	94713	AssignmentExpression	out = ( char * ) cJSON_malloc ( len + 3 )		94631	0		=			
ANR	94714	Identifier	out		94631	0					
ANR	94715	CastExpression	( char * ) cJSON_malloc ( len + 3 )		94631	1					
ANR	94716	CastTarget	char *		94631	0					
ANR	94717	CallExpression	cJSON_malloc ( len + 3 )		94631	1					
ANR	94718	Callee	cJSON_malloc		94631	0					
ANR	94719	Identifier	cJSON_malloc		94631	0					
ANR	94720	ArgumentList	len + 3		94631	1					
ANR	94721	Argument	len + 3		94631	0					
ANR	94722	AdditiveExpression	len + 3		94631	0		+			
ANR	94723	Identifier	len		94631	0					
ANR	94724	PrimaryExpression	3		94631	1					
ANR	94725	IfStatement	if ( ! out )		94631	8					
ANR	94726	Condition	! out	223:5:7178:7181	94631	0	True				
ANR	94727	UnaryOperationExpression	! out		94631	0					
ANR	94728	UnaryOperator	!		94631	0					
ANR	94729	Identifier	out		94631	1					
ANR	94730	ReturnStatement	return 0 ;	223:11:7184:7192	94631	1	True				
ANR	94731	PrimaryExpression	0		94631	0					
ANR	94732	ExpressionStatement	ptr2 = out	225:1:7196:7204	94631	9	True				
ANR	94733	AssignmentExpression	ptr2 = out		94631	0		=			
ANR	94734	Identifier	ptr2		94631	0					
ANR	94735	Identifier	out		94631	1					
ANR	94736	ExpressionStatement	ptr = str	225:10:7205:7212	94631	10	True				
ANR	94737	AssignmentExpression	ptr = str		94631	0		=			
ANR	94738	Identifier	ptr		94631	0					
ANR	94739	Identifier	str		94631	1					
ANR	94740	ExpressionStatement	"* ptr2 ++ = '\\""'"	226:1:7215:7227	94631	11	True				
ANR	94741	AssignmentExpression	"* ptr2 ++ = '\\""'"		94631	0		=			
ANR	94742	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94743	UnaryOperator	*		94631	0					
ANR	94744	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94745	Identifier	ptr2		94631	0					
ANR	94746	IncDec	++		94631	1					
ANR	94747	PrimaryExpression	"'\\""'"		94631	1					
ANR	94748	WhileStatement	while ( * ptr )		94631	12					
ANR	94749	Condition	* ptr	227:8:7237:7240	94631	0	True				
ANR	94750	UnaryOperationExpression	* ptr		94631	0					
ANR	94751	UnaryOperator	*		94631	0					
ANR	94752	Identifier	ptr		94631	1					
ANR	94753	CompoundStatement		13:1:326:326	94631	1					
ANR	94754	IfStatement	"if ( ( unsigned char ) * ptr > 31 && * ptr != '\\""' && * ptr != '\\\\' )"		94631	0					
ANR	94755	Condition	"( unsigned char ) * ptr > 31 && * ptr != '\\""' && * ptr != '\\\\'"	229:6:7252:7301	94631	0	True				
ANR	94756	AndExpression	"( unsigned char ) * ptr > 31 && * ptr != '\\""' && * ptr != '\\\\'"		94631	0		&&			
ANR	94757	RelationalExpression	( unsigned char ) * ptr > 31		94631	0		>			
ANR	94758	CastExpression	( unsigned char ) * ptr		94631	0					
ANR	94759	CastTarget	unsigned char		94631	0					
ANR	94760	UnaryOperationExpression	* ptr		94631	1					
ANR	94761	UnaryOperator	*		94631	0					
ANR	94762	Identifier	ptr		94631	1					
ANR	94763	PrimaryExpression	31		94631	1					
ANR	94764	AndExpression	"* ptr != '\\""' && * ptr != '\\\\'"		94631	1		&&			
ANR	94765	EqualityExpression	"* ptr != '\\""'"		94631	0		!=			
ANR	94766	UnaryOperationExpression	* ptr		94631	0					
ANR	94767	UnaryOperator	*		94631	0					
ANR	94768	Identifier	ptr		94631	1					
ANR	94769	PrimaryExpression	"'\\""'"		94631	1					
ANR	94770	EqualityExpression	* ptr != '\\\\'		94631	1		!=			
ANR	94771	UnaryOperationExpression	* ptr		94631	0					
ANR	94772	UnaryOperator	*		94631	0					
ANR	94773	Identifier	ptr		94631	1					
ANR	94774	PrimaryExpression	'\\\\'		94631	1					
ANR	94775	ExpressionStatement	* ptr2 ++ = * ptr ++	229:58:7304:7318	94631	1	True				
ANR	94776	AssignmentExpression	* ptr2 ++ = * ptr ++		94631	0		=			
ANR	94777	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94778	UnaryOperator	*		94631	0					
ANR	94779	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94780	Identifier	ptr2		94631	0					
ANR	94781	IncDec	++		94631	1					
ANR	94782	UnaryOperationExpression	* ptr ++		94631	1					
ANR	94783	UnaryOperator	*		94631	0					
ANR	94784	PostIncDecOperationExpression	ptr ++		94631	1					
ANR	94785	Identifier	ptr		94631	0					
ANR	94786	IncDec	++		94631	1					
ANR	94787	ElseStatement	else		94631	0					
ANR	94788	CompoundStatement		16:2:411:411	94631	0					
ANR	94789	ExpressionStatement	* ptr2 ++ = '\\\\'	232:3:7334:7346	94631	0	True				
ANR	94790	AssignmentExpression	* ptr2 ++ = '\\\\'		94631	0		=			
ANR	94791	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94792	UnaryOperator	*		94631	0					
ANR	94793	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94794	Identifier	ptr2		94631	0					
ANR	94795	IncDec	++		94631	1					
ANR	94796	PrimaryExpression	'\\\\'		94631	1					
ANR	94797	SwitchStatement	switch ( token = * ptr ++ )		94631	1					
ANR	94798	Condition	token = * ptr ++	233:11:7359:7370	94631	0	True				
ANR	94799	AssignmentExpression	token = * ptr ++		94631	0		=			
ANR	94800	Identifier	token		94631	0					
ANR	94801	UnaryOperationExpression	* ptr ++		94631	1					
ANR	94802	UnaryOperator	*		94631	0					
ANR	94803	PostIncDecOperationExpression	ptr ++		94631	1					
ANR	94804	Identifier	ptr		94631	0					
ANR	94805	IncDec	++		94631	1					
ANR	94806	CompoundStatement		19:3:458:458	94631	1					
ANR	94807	Label	case '\\\\' :	235:4:7382:7391	94631	0	True				
ANR	94808	ExpressionStatement	* ptr2 ++ = '\\\\'	235:15:7393:7405	94631	1	True				
ANR	94809	AssignmentExpression	* ptr2 ++ = '\\\\'		94631	0		=			
ANR	94810	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94811	UnaryOperator	*		94631	0					
ANR	94812	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94813	Identifier	ptr2		94631	0					
ANR	94814	IncDec	++		94631	1					
ANR	94815	PrimaryExpression	'\\\\'		94631	1					
ANR	94816	BreakStatement	break ;	235:29:7407:7412	94631	2	True				
ANR	94817	Label	"case '\\""' :"	236:4:7418:7427	94631	3	True				
ANR	94818	ExpressionStatement	"* ptr2 ++ = '\\""'"	236:15:7429:7441	94631	4	True				
ANR	94819	AssignmentExpression	"* ptr2 ++ = '\\""'"		94631	0		=			
ANR	94820	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94821	UnaryOperator	*		94631	0					
ANR	94822	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94823	Identifier	ptr2		94631	0					
ANR	94824	IncDec	++		94631	1					
ANR	94825	PrimaryExpression	"'\\""'"		94631	1					
ANR	94826	BreakStatement	break ;	236:29:7443:7448	94631	5	True				
ANR	94827	Label	case '\\b' :	237:4:7454:7463	94631	6	True				
ANR	94828	ExpressionStatement	* ptr2 ++ = 'b'	237:15:7465:7476	94631	7	True				
ANR	94829	AssignmentExpression	* ptr2 ++ = 'b'		94631	0		=			
ANR	94830	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94831	UnaryOperator	*		94631	0					
ANR	94832	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94833	Identifier	ptr2		94631	0					
ANR	94834	IncDec	++		94631	1					
ANR	94835	PrimaryExpression	'b'		94631	1					
ANR	94836	BreakStatement	break ;	237:28:7478:7483	94631	8	True				
ANR	94837	Label	case '\\f' :	238:4:7489:7498	94631	9	True				
ANR	94838	ExpressionStatement	* ptr2 ++ = 'f'	238:15:7500:7511	94631	10	True				
ANR	94839	AssignmentExpression	* ptr2 ++ = 'f'		94631	0		=			
ANR	94840	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94841	UnaryOperator	*		94631	0					
ANR	94842	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94843	Identifier	ptr2		94631	0					
ANR	94844	IncDec	++		94631	1					
ANR	94845	PrimaryExpression	'f'		94631	1					
ANR	94846	BreakStatement	break ;	238:28:7513:7518	94631	11	True				
ANR	94847	Label	case '\\n' :	239:4:7524:7533	94631	12	True				
ANR	94848	ExpressionStatement	* ptr2 ++ = 'n'	239:15:7535:7546	94631	13	True				
ANR	94849	AssignmentExpression	* ptr2 ++ = 'n'		94631	0		=			
ANR	94850	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94851	UnaryOperator	*		94631	0					
ANR	94852	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94853	Identifier	ptr2		94631	0					
ANR	94854	IncDec	++		94631	1					
ANR	94855	PrimaryExpression	'n'		94631	1					
ANR	94856	BreakStatement	break ;	239:28:7548:7553	94631	14	True				
ANR	94857	Label	case '\\r' :	240:4:7559:7568	94631	15	True				
ANR	94858	ExpressionStatement	* ptr2 ++ = 'r'	240:15:7570:7581	94631	16	True				
ANR	94859	AssignmentExpression	* ptr2 ++ = 'r'		94631	0		=			
ANR	94860	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94861	UnaryOperator	*		94631	0					
ANR	94862	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94863	Identifier	ptr2		94631	0					
ANR	94864	IncDec	++		94631	1					
ANR	94865	PrimaryExpression	'r'		94631	1					
ANR	94866	BreakStatement	break ;	240:28:7583:7588	94631	17	True				
ANR	94867	Label	case '\\t' :	241:4:7594:7603	94631	18	True				
ANR	94868	ExpressionStatement	* ptr2 ++ = 't'	241:15:7605:7616	94631	19	True				
ANR	94869	AssignmentExpression	* ptr2 ++ = 't'		94631	0		=			
ANR	94870	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94871	UnaryOperator	*		94631	0					
ANR	94872	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94873	Identifier	ptr2		94631	0					
ANR	94874	IncDec	++		94631	1					
ANR	94875	PrimaryExpression	't'		94631	1					
ANR	94876	BreakStatement	break ;	241:28:7618:7623	94631	20	True				
ANR	94877	Label	default :	242:4:7629:7636	94631	21	True				
ANR	94878	Identifier	default		94631	0					
ANR	94879	ExpressionStatement	"sprintf ( ptr2 , ""u%04x"" , token )"	242:13:7638:7665	94631	22	True				
ANR	94880	CallExpression	"sprintf ( ptr2 , ""u%04x"" , token )"		94631	0					
ANR	94881	Callee	sprintf		94631	0					
ANR	94882	Identifier	sprintf		94631	0					
ANR	94883	ArgumentList	ptr2		94631	1					
ANR	94884	Argument	ptr2		94631	0					
ANR	94885	Identifier	ptr2		94631	0					
ANR	94886	Argument	"""u%04x"""		94631	1					
ANR	94887	PrimaryExpression	"""u%04x"""		94631	0					
ANR	94888	Argument	token		94631	2					
ANR	94889	Identifier	token		94631	0					
ANR	94890	ExpressionStatement	ptr2 += 5	242:41:7666:7673	94631	23	True				
ANR	94891	AssignmentExpression	ptr2 += 5		94631	0		+=			
ANR	94892	Identifier	ptr2		94631	0					
ANR	94893	PrimaryExpression	5		94631	1					
ANR	94894	BreakStatement	break ;	242:50:7675:7680	94631	24	True				
ANR	94895	ExpressionStatement	"* ptr2 ++ = '\\""'"	246:1:7718:7730	94631	13	True				
ANR	94896	AssignmentExpression	"* ptr2 ++ = '\\""'"		94631	0		=			
ANR	94897	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94898	UnaryOperator	*		94631	0					
ANR	94899	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94900	Identifier	ptr2		94631	0					
ANR	94901	IncDec	++		94631	1					
ANR	94902	PrimaryExpression	"'\\""'"		94631	1					
ANR	94903	ExpressionStatement	* ptr2 ++ = 0	246:14:7731:7740	94631	14	True				
ANR	94904	AssignmentExpression	* ptr2 ++ = 0		94631	0		=			
ANR	94905	UnaryOperationExpression	* ptr2 ++		94631	0					
ANR	94906	UnaryOperator	*		94631	0					
ANR	94907	PostIncDecOperationExpression	ptr2 ++		94631	1					
ANR	94908	Identifier	ptr2		94631	0					
ANR	94909	IncDec	++		94631	1					
ANR	94910	PrimaryExpression	0		94631	1					
ANR	94911	ReturnStatement	return out ;	247:1:7743:7753	94631	15	True				
ANR	94912	Identifier	out		94631	0					
ANR	94913	ReturnType	static char *		94631	1					
ANR	94914	Identifier	print_string_ptr		94631	2					
ANR	94915	ParameterList	const char * str		94631	3					
ANR	94916	Parameter	const char * str	215:30:6900:6914	94631	0	True				
ANR	94917	ParameterType	const char *		94631	0					
ANR	94918	Identifier	str		94631	1					
ANR	94919	CFGEntryNode	ENTRY		94631		True				
ANR	94920	CFGExitNode	EXIT		94631		True				
ANR	94921	Symbol	str		94631						
ANR	94922	Symbol	ptr2		94631						
ANR	94923	Symbol	len		94631						
ANR	94924	Symbol	* ptr ++		94631						
ANR	94925	Symbol	* ptr		94631						
ANR	94926	Symbol	strchr		94631						
ANR	94927	Symbol	cJSON_malloc		94631						
ANR	94928	Symbol	ptr		94631						
ANR	94929	Symbol	out		94631						
ANR	94930	Symbol	token		94631						
ANR	94931	Symbol	cJSON_strdup		94631						
ANR	94932	Symbol	* ptr2 ++		94631						
ANR	94933	Function	print_string	250:0:7817:7900							
ANR	94934	FunctionDef	print_string (cJSON * item)		94933	0					
ANR	94935	CompoundStatement		250:39:7856:7900	94933	0					
ANR	94936	ReturnStatement	return print_string_ptr ( item -> valuestring ) ;	250:0:7857:7899	94933	0	True				
ANR	94937	CallExpression	print_string_ptr ( item -> valuestring )		94933	0					
ANR	94938	Callee	print_string_ptr		94933	0					
ANR	94939	Identifier	print_string_ptr		94933	0					
ANR	94940	ArgumentList	item -> valuestring		94933	1					
ANR	94941	Argument	item -> valuestring		94933	0					
ANR	94942	PtrMemberAccess	item -> valuestring		94933	0					
ANR	94943	Identifier	item		94933	0					
ANR	94944	Identifier	valuestring		94933	1					
ANR	94945	ReturnType	static char *		94933	1					
ANR	94946	Identifier	print_string		94933	2					
ANR	94947	ParameterList	cJSON * item		94933	3					
ANR	94948	Parameter	cJSON * item	250:26:7843:7853	94933	0	True				
ANR	94949	ParameterType	cJSON *		94933	0					
ANR	94950	Identifier	item		94933	1					
ANR	94951	CFGEntryNode	ENTRY		94933		True				
ANR	94952	CFGExitNode	EXIT		94933		True				
ANR	94953	Symbol	item		94933						
ANR	94954	Symbol	* item		94933						
ANR	94955	Symbol	item -> valuestring		94933						
ANR	94956	Symbol	print_string_ptr		94933						
ANR	94957	DeclStmt									
ANR	94958	Decl							const char	"const char * ( cJSON * item , const char * value )"	parse_value
ANR	94959	DeclStmt									
ANR	94960	Decl							char	"char * ( cJSON * item , int depth , int fmt )"	print_value
ANR	94961	DeclStmt									
ANR	94962	Decl							const char	"const char * ( cJSON * item , const char * value )"	parse_array
ANR	94963	DeclStmt									
ANR	94964	Decl							char	"char * ( cJSON * item , int depth , int fmt )"	print_array
ANR	94965	DeclStmt									
ANR	94966	Decl							const char	"const char * ( cJSON * item , const char * value )"	parse_object
ANR	94967	DeclStmt									
ANR	94968	Decl							char	"char * ( cJSON * item , int depth , int fmt )"	print_object
ANR	94969	Function	skip	261:0:8344:8445							
ANR	94970	FunctionDef	skip (const char * in)		94969	0					
ANR	94971	CompoundStatement		261:40:8384:8445	94969	0					
ANR	94972	WhileStatement	while ( in && * in && ( unsigned char ) * in <= 32 )		94969	0					
ANR	94973	Condition	in && * in && ( unsigned char ) * in <= 32	261:7:8392:8426	94969	0	True				
ANR	94974	AndExpression	in && * in && ( unsigned char ) * in <= 32		94969	0		&&			
ANR	94975	Identifier	in		94969	0					
ANR	94976	AndExpression	* in && ( unsigned char ) * in <= 32		94969	1		&&			
ANR	94977	UnaryOperationExpression	* in		94969	0					
ANR	94978	UnaryOperator	*		94969	0					
ANR	94979	Identifier	in		94969	1					
ANR	94980	RelationalExpression	( unsigned char ) * in <= 32		94969	1		<=			
ANR	94981	CastExpression	( unsigned char ) * in		94969	0					
ANR	94982	CastTarget	unsigned char		94969	0					
ANR	94983	UnaryOperationExpression	* in		94969	1					
ANR	94984	UnaryOperator	*		94969	0					
ANR	94985	Identifier	in		94969	1					
ANR	94986	PrimaryExpression	32		94969	1					
ANR	94987	ExpressionStatement	in ++	261:44:8429:8433	94969	1	True				
ANR	94988	PostIncDecOperationExpression	in ++		94969	0					
ANR	94989	Identifier	in		94969	0					
ANR	94990	IncDec	++		94969	1					
ANR	94991	ReturnStatement	return in ;	261:50:8435:8444	94969	1	True				
ANR	94992	Identifier	in		94969	0					
ANR	94993	ReturnType	static const char *		94969	1					
ANR	94994	Identifier	skip		94969	2					
ANR	94995	ParameterList	const char * in		94969	3					
ANR	94996	Parameter	const char * in	261:24:8368:8381	94969	0	True				
ANR	94997	ParameterType	const char *		94969	0					
ANR	94998	Identifier	in		94969	1					
ANR	94999	CFGEntryNode	ENTRY		94969		True				
ANR	95000	CFGExitNode	EXIT		94969		True				
ANR	95001	Symbol	in		94969						
ANR	95002	Symbol	* in		94969						
ANR	95003	Function	cJSON_Parse	264:0:8505:8697							
ANR	95004	FunctionDef	cJSON_Parse (const char * value)		95003	0					
ANR	95005	CompoundStatement		265:0:8543:8697	95003	0					
ANR	95006	IdentifierDeclStatement	cJSON * c = cJSON_New_Item ( ) ;	266:1:8546:8571	95003	0	True				
ANR	95007	IdentifierDecl	* c = cJSON_New_Item ( )		95003	0					
ANR	95008	IdentifierDeclType	cJSON *		95003	0					
ANR	95009	Identifier	c		95003	1					
ANR	95010	AssignmentExpression	* c = cJSON_New_Item ( )		95003	2		=			
ANR	95011	Identifier	c		95003	0					
ANR	95012	CallExpression	cJSON_New_Item ( )		95003	1					
ANR	95013	Callee	cJSON_New_Item		95003	0					
ANR	95014	Identifier	cJSON_New_Item		95003	0					
ANR	95015	ArgumentList			95003	1					
ANR	95016	ExpressionStatement	ep = 0	267:1:8574:8578	95003	1	True				
ANR	95017	AssignmentExpression	ep = 0		95003	0		=			
ANR	95018	Identifier	ep		95003	0					
ANR	95019	PrimaryExpression	0		95003	1					
ANR	95020	IfStatement	if ( ! c )		95003	2					
ANR	95021	Condition	! c	268:5:8585:8586	95003	0	True				
ANR	95022	UnaryOperationExpression	! c		95003	0					
ANR	95023	UnaryOperator	!		95003	0					
ANR	95024	Identifier	c		95003	1					
ANR	95025	ReturnStatement	return 0 ;	268:9:8589:8597	95003	1	True				
ANR	95026	PrimaryExpression	0		95003	0					
ANR	95027	IfStatement	"if ( ! parse_value ( c , skip ( value ) ) )"		95003	3					
ANR	95028	Condition	"! parse_value ( c , skip ( value ) )"	270:5:8629:8655	95003	0	True				
ANR	95029	UnaryOperationExpression	"! parse_value ( c , skip ( value ) )"		95003	0					
ANR	95030	UnaryOperator	!		95003	0					
ANR	95031	CallExpression	"parse_value ( c , skip ( value ) )"		95003	1					
ANR	95032	Callee	parse_value		95003	0					
ANR	95033	Identifier	parse_value		95003	0					
ANR	95034	ArgumentList	c		95003	1					
ANR	95035	Argument	c		95003	0					
ANR	95036	Identifier	c		95003	0					
ANR	95037	Argument	skip ( value )		95003	1					
ANR	95038	CallExpression	skip ( value )		95003	0					
ANR	95039	Callee	skip		95003	0					
ANR	95040	Identifier	skip		95003	0					
ANR	95041	ArgumentList	value		95003	1					
ANR	95042	Argument	value		95003	0					
ANR	95043	Identifier	value		95003	0					
ANR	95044	CompoundStatement		6:34:114:114	95003	1					
ANR	95045	ExpressionStatement	cJSON_Delete ( c )	270:35:8659:8674	95003	0	True				
ANR	95046	CallExpression	cJSON_Delete ( c )		95003	0					
ANR	95047	Callee	cJSON_Delete		95003	0					
ANR	95048	Identifier	cJSON_Delete		95003	0					
ANR	95049	ArgumentList	c		95003	1					
ANR	95050	Argument	c		95003	0					
ANR	95051	Identifier	c		95003	0					
ANR	95052	ReturnStatement	return 0 ;	270:51:8675:8683	95003	1	True				
ANR	95053	PrimaryExpression	0		95003	0					
ANR	95054	ReturnStatement	return c ;	271:1:8687:8695	95003	4	True				
ANR	95055	Identifier	c		95003	0					
ANR	95056	ReturnType	cJSON *		95003	1					
ANR	95057	Identifier	cJSON_Parse		95003	2					
ANR	95058	ParameterList	const char * value		95003	3					
ANR	95059	Parameter	const char * value	264:19:8524:8540	95003	0	True				
ANR	95060	ParameterType	const char *		95003	0					
ANR	95061	Identifier	value		95003	1					
ANR	95062	CFGEntryNode	ENTRY		95003		True				
ANR	95063	CFGExitNode	EXIT		95003		True				
ANR	95064	Symbol	c		95003						
ANR	95065	Symbol	cJSON_New_Item		95003						
ANR	95066	Symbol	parse_value		95003						
ANR	95067	Symbol	skip		95003						
ANR	95068	Symbol	ep		95003						
ANR	95069	Symbol	value		95003						
ANR	95070	Function	cJSON_Print	275:0:8752:8816							
ANR	95071	FunctionDef	cJSON_Print (cJSON * item)		95070	0					
ANR	95072	CompoundStatement		275:34:8786:8816	95070	0					
ANR	95073	ReturnStatement	"return print_value ( item , 0 , 1 ) ;"	275:0:8787:8815	95070	0	True				
ANR	95074	CallExpression	"print_value ( item , 0 , 1 )"		95070	0					
ANR	95075	Callee	print_value		95070	0					
ANR	95076	Identifier	print_value		95070	0					
ANR	95077	ArgumentList	item		95070	1					
ANR	95078	Argument	item		95070	0					
ANR	95079	Identifier	item		95070	0					
ANR	95080	Argument	0		95070	1					
ANR	95081	PrimaryExpression	0		95070	0					
ANR	95082	Argument	1		95070	2					
ANR	95083	PrimaryExpression	1		95070	0					
ANR	95084	ReturnType	char *		95070	1					
ANR	95085	Identifier	cJSON_Print		95070	2					
ANR	95086	ParameterList	cJSON * item		95070	3					
ANR	95087	Parameter	cJSON * item	275:18:8770:8780	95070	0	True				
ANR	95088	ParameterType	cJSON *		95070	0					
ANR	95089	Identifier	item		95070	1					
ANR	95090	CFGEntryNode	ENTRY		95070		True				
ANR	95091	CFGExitNode	EXIT		95070		True				
ANR	95092	Symbol	item		95070						
ANR	95093	Symbol	print_value		95070						
ANR	95094	Function	cJSON_PrintUnformatted	276:0:8818:8890							
ANR	95095	FunctionDef	cJSON_PrintUnformatted (cJSON * item)		95094	0					
ANR	95096	CompoundStatement		276:42:8860:8890	95094	0					
ANR	95097	ReturnStatement	"return print_value ( item , 0 , 0 ) ;"	276:0:8861:8889	95094	0	True				
ANR	95098	CallExpression	"print_value ( item , 0 , 0 )"		95094	0					
ANR	95099	Callee	print_value		95094	0					
ANR	95100	Identifier	print_value		95094	0					
ANR	95101	ArgumentList	item		95094	1					
ANR	95102	Argument	item		95094	0					
ANR	95103	Identifier	item		95094	0					
ANR	95104	Argument	0		95094	1					
ANR	95105	PrimaryExpression	0		95094	0					
ANR	95106	Argument	0		95094	2					
ANR	95107	PrimaryExpression	0		95094	0					
ANR	95108	ReturnType	char *		95094	1					
ANR	95109	Identifier	cJSON_PrintUnformatted		95094	2					
ANR	95110	ParameterList	cJSON * item		95094	3					
ANR	95111	Parameter	cJSON * item	276:29:8847:8857	95094	0	True				
ANR	95112	ParameterType	cJSON *		95094	0					
ANR	95113	Identifier	item		95094	1					
ANR	95114	CFGEntryNode	ENTRY		95094		True				
ANR	95115	CFGExitNode	EXIT		95094		True				
ANR	95116	Symbol	item		95094						
ANR	95117	Symbol	print_value		95094						
ANR	95118	Function	parse_value	279:0:8960:9612							
ANR	95119	FunctionDef	"parse_value (cJSON * item , const char * value)"		95118	0					
ANR	95120	CompoundStatement		280:0:9022:9612	95118	0					
ANR	95121	IfStatement	if ( ! value )		95118	0					
ANR	95122	Condition	! value	281:5:9029:9034	95118	0	True				
ANR	95123	UnaryOperationExpression	! value		95118	0					
ANR	95124	UnaryOperator	!		95118	0					
ANR	95125	Identifier	value		95118	1					
ANR	95126	ReturnStatement	return 0 ;	281:18:9042:9050	95118	1	True				
ANR	95127	PrimaryExpression	0		95118	0					
ANR	95128	IfStatement	"if ( ! strncmp ( value , ""null"" , 4 ) )"		95118	1					
ANR	95129	Condition	"! strncmp ( value , ""null"" , 4 )"	282:5:9077:9100	95118	0	True				
ANR	95130	UnaryOperationExpression	"! strncmp ( value , ""null"" , 4 )"		95118	0					
ANR	95131	UnaryOperator	!		95118	0					
ANR	95132	CallExpression	"strncmp ( value , ""null"" , 4 )"		95118	1					
ANR	95133	Callee	strncmp		95118	0					
ANR	95134	Identifier	strncmp		95118	0					
ANR	95135	ArgumentList	value		95118	1					
ANR	95136	Argument	value		95118	0					
ANR	95137	Identifier	value		95118	0					
ANR	95138	Argument	"""null"""		95118	1					
ANR	95139	PrimaryExpression	"""null"""		95118	0					
ANR	95140	Argument	4		95118	2					
ANR	95141	PrimaryExpression	4		95118	0					
ANR	95142	CompoundStatement		3:31:80:80	95118	1					
ANR	95143	ExpressionStatement	item -> type = cJSON_NULL	282:33:9105:9126	95118	0	True				
ANR	95144	AssignmentExpression	item -> type = cJSON_NULL		95118	0		=			
ANR	95145	PtrMemberAccess	item -> type		95118	0					
ANR	95146	Identifier	item		95118	0					
ANR	95147	Identifier	type		95118	1					
ANR	95148	Identifier	cJSON_NULL		95118	1					
ANR	95149	ReturnStatement	return value + 4 ;	282:57:9129:9143	95118	1	True				
ANR	95150	AdditiveExpression	value + 4		95118	0		+			
ANR	95151	Identifier	value		95118	0					
ANR	95152	PrimaryExpression	4		95118	1					
ANR	95153	IfStatement	"if ( ! strncmp ( value , ""false"" , 5 ) )"		95118	2					
ANR	95154	Condition	"! strncmp ( value , ""false"" , 5 )"	283:5:9152:9176	95118	0	True				
ANR	95155	UnaryOperationExpression	"! strncmp ( value , ""false"" , 5 )"		95118	0					
ANR	95156	UnaryOperator	!		95118	0					
ANR	95157	CallExpression	"strncmp ( value , ""false"" , 5 )"		95118	1					
ANR	95158	Callee	strncmp		95118	0					
ANR	95159	Identifier	strncmp		95118	0					
ANR	95160	ArgumentList	value		95118	1					
ANR	95161	Argument	value		95118	0					
ANR	95162	Identifier	value		95118	0					
ANR	95163	Argument	"""false"""		95118	1					
ANR	95164	PrimaryExpression	"""false"""		95118	0					
ANR	95165	Argument	5		95118	2					
ANR	95166	PrimaryExpression	5		95118	0					
ANR	95167	CompoundStatement		4:32:156:156	95118	1					
ANR	95168	ExpressionStatement	item -> type = cJSON_False	283:34:9181:9203	95118	0	True				
ANR	95169	AssignmentExpression	item -> type = cJSON_False		95118	0		=			
ANR	95170	PtrMemberAccess	item -> type		95118	0					
ANR	95171	Identifier	item		95118	0					
ANR	95172	Identifier	type		95118	1					
ANR	95173	Identifier	cJSON_False		95118	1					
ANR	95174	ReturnStatement	return value + 5 ;	283:58:9205:9219	95118	1	True				
ANR	95175	AdditiveExpression	value + 5		95118	0		+			
ANR	95176	Identifier	value		95118	0					
ANR	95177	PrimaryExpression	5		95118	1					
ANR	95178	IfStatement	"if ( ! strncmp ( value , ""true"" , 4 ) )"		95118	3					
ANR	95179	Condition	"! strncmp ( value , ""true"" , 4 )"	284:5:9228:9251	95118	0	True				
ANR	95180	UnaryOperationExpression	"! strncmp ( value , ""true"" , 4 )"		95118	0					
ANR	95181	UnaryOperator	!		95118	0					
ANR	95182	CallExpression	"strncmp ( value , ""true"" , 4 )"		95118	1					
ANR	95183	Callee	strncmp		95118	0					
ANR	95184	Identifier	strncmp		95118	0					
ANR	95185	ArgumentList	value		95118	1					
ANR	95186	Argument	value		95118	0					
ANR	95187	Identifier	value		95118	0					
ANR	95188	Argument	"""true"""		95118	1					
ANR	95189	PrimaryExpression	"""true"""		95118	0					
ANR	95190	Argument	4		95118	2					
ANR	95191	PrimaryExpression	4		95118	0					
ANR	95192	CompoundStatement		5:31:231:231	95118	1					
ANR	95193	ExpressionStatement	item -> type = cJSON_True	284:33:9256:9277	95118	0	True				
ANR	95194	AssignmentExpression	item -> type = cJSON_True		95118	0		=			
ANR	95195	PtrMemberAccess	item -> type		95118	0					
ANR	95196	Identifier	item		95118	0					
ANR	95197	Identifier	type		95118	1					
ANR	95198	Identifier	cJSON_True		95118	1					
ANR	95199	ExpressionStatement	item -> valueint = 1	284:56:9279:9295	95118	1	True				
ANR	95200	AssignmentExpression	item -> valueint = 1		95118	0		=			
ANR	95201	PtrMemberAccess	item -> valueint		95118	0					
ANR	95202	Identifier	item		95118	0					
ANR	95203	Identifier	valueint		95118	1					
ANR	95204	PrimaryExpression	1		95118	1					
ANR	95205	ReturnStatement	return value + 4 ;	284:74:9297:9311	95118	2	True				
ANR	95206	AdditiveExpression	value + 4		95118	0		+			
ANR	95207	Identifier	value		95118	0					
ANR	95208	PrimaryExpression	4		95118	1					
ANR	95209	IfStatement	"if ( * value == '\\""' )"		95118	4					
ANR	95210	Condition	"* value == '\\""'"	285:5:9320:9331	95118	0	True				
ANR	95211	EqualityExpression	"* value == '\\""'"		95118	0		==			
ANR	95212	UnaryOperationExpression	* value		95118	0					
ANR	95213	UnaryOperator	*		95118	0					
ANR	95214	Identifier	value		95118	1					
ANR	95215	PrimaryExpression	"'\\""'"		95118	1					
ANR	95216	CompoundStatement		6:22:314:314	95118	1					
ANR	95217	ReturnStatement	"return parse_string ( item , value ) ;"	285:24:9339:9370	95118	0	True				
ANR	95218	CallExpression	"parse_string ( item , value )"		95118	0					
ANR	95219	Callee	parse_string		95118	0					
ANR	95220	Identifier	parse_string		95118	0					
ANR	95221	ArgumentList	item		95118	1					
ANR	95222	Argument	item		95118	0					
ANR	95223	Identifier	item		95118	0					
ANR	95224	Argument	value		95118	1					
ANR	95225	Identifier	value		95118	0					
ANR	95226	IfStatement	if ( * value == '-' || ( * value >= '0' && * value <= '9' ) )		95118	5					
ANR	95227	Condition	* value == '-' || ( * value >= '0' && * value <= '9' )	286:5:9379:9421	95118	0	True				
ANR	95228	OrExpression	* value == '-' || ( * value >= '0' && * value <= '9' )		95118	0		||			
ANR	95229	EqualityExpression	* value == '-'		95118	0		==			
ANR	95230	UnaryOperationExpression	* value		95118	0					
ANR	95231	UnaryOperator	*		95118	0					
ANR	95232	Identifier	value		95118	1					
ANR	95233	PrimaryExpression	'-'		95118	1					
ANR	95234	AndExpression	* value >= '0' && * value <= '9'		95118	1		&&			
ANR	95235	RelationalExpression	* value >= '0'		95118	0		>=			
ANR	95236	UnaryOperationExpression	* value		95118	0					
ANR	95237	UnaryOperator	*		95118	0					
ANR	95238	Identifier	value		95118	1					
ANR	95239	PrimaryExpression	'0'		95118	1					
ANR	95240	RelationalExpression	* value <= '9'		95118	1		<=			
ANR	95241	UnaryOperationExpression	* value		95118	0					
ANR	95242	UnaryOperator	*		95118	0					
ANR	95243	Identifier	value		95118	1					
ANR	95244	PrimaryExpression	'9'		95118	1					
ANR	95245	CompoundStatement		7:50:401:401	95118	1					
ANR	95246	ReturnStatement	"return parse_number ( item , value ) ;"	286:52:9426:9457	95118	0	True				
ANR	95247	CallExpression	"parse_number ( item , value )"		95118	0					
ANR	95248	Callee	parse_number		95118	0					
ANR	95249	Identifier	parse_number		95118	0					
ANR	95250	ArgumentList	item		95118	1					
ANR	95251	Argument	item		95118	0					
ANR	95252	Identifier	item		95118	0					
ANR	95253	Argument	value		95118	1					
ANR	95254	Identifier	value		95118	0					
ANR	95255	IfStatement	if ( * value == '[' )		95118	6					
ANR	95256	Condition	* value == '['	287:5:9466:9476	95118	0	True				
ANR	95257	EqualityExpression	* value == '['		95118	0		==			
ANR	95258	UnaryOperationExpression	* value		95118	0					
ANR	95259	UnaryOperator	*		95118	0					
ANR	95260	Identifier	value		95118	1					
ANR	95261	PrimaryExpression	'['		95118	1					
ANR	95262	CompoundStatement		8:21:459:459	95118	1					
ANR	95263	ReturnStatement	"return parse_array ( item , value ) ;"	287:23:9484:9514	95118	0	True				
ANR	95264	CallExpression	"parse_array ( item , value )"		95118	0					
ANR	95265	Callee	parse_array		95118	0					
ANR	95266	Identifier	parse_array		95118	0					
ANR	95267	ArgumentList	item		95118	1					
ANR	95268	Argument	item		95118	0					
ANR	95269	Identifier	item		95118	0					
ANR	95270	Argument	value		95118	1					
ANR	95271	Identifier	value		95118	0					
ANR	95272	IfStatement	if ( * value == '{' )		95118	7					
ANR	95273	Condition	* value == '{'	288:5:9523:9533	95118	0	True				
ANR	95274	EqualityExpression	* value == '{'		95118	0		==			
ANR	95275	UnaryOperationExpression	* value		95118	0					
ANR	95276	UnaryOperator	*		95118	0					
ANR	95277	Identifier	value		95118	1					
ANR	95278	PrimaryExpression	'{'		95118	1					
ANR	95279	CompoundStatement		9:21:516:516	95118	1					
ANR	95280	ReturnStatement	"return parse_object ( item , value ) ;"	288:23:9541:9572	95118	0	True				
ANR	95281	CallExpression	"parse_object ( item , value )"		95118	0					
ANR	95282	Callee	parse_object		95118	0					
ANR	95283	Identifier	parse_object		95118	0					
ANR	95284	ArgumentList	item		95118	1					
ANR	95285	Argument	item		95118	0					
ANR	95286	Identifier	item		95118	0					
ANR	95287	Argument	value		95118	1					
ANR	95288	Identifier	value		95118	0					
ANR	95289	ExpressionStatement	ep = value	290:1:9578:9586	95118	8	True				
ANR	95290	AssignmentExpression	ep = value		95118	0		=			
ANR	95291	Identifier	ep		95118	0					
ANR	95292	Identifier	value		95118	1					
ANR	95293	ReturnStatement	return 0 ;	290:10:9587:9595	95118	9	True				
ANR	95294	PrimaryExpression	0		95118	0					
ANR	95295	ReturnType	static const char *		95118	1					
ANR	95296	Identifier	parse_value		95118	2					
ANR	95297	ParameterList	"cJSON * item , const char * value"		95118	3					
ANR	95298	Parameter	cJSON * item	279:31:8991:9001	95118	0	True				
ANR	95299	ParameterType	cJSON *		95118	0					
ANR	95300	Identifier	item		95118	1					
ANR	95301	Parameter	const char * value	279:43:9003:9019	95118	1	True				
ANR	95302	ParameterType	const char *		95118	0					
ANR	95303	Identifier	value		95118	1					
ANR	95304	CFGEntryNode	ENTRY		95118		True				
ANR	95305	CFGExitNode	EXIT		95118		True				
ANR	95306	Symbol	item		95118						
ANR	95307	Symbol	item -> type		95118						
ANR	95308	Symbol	parse_number		95118						
ANR	95309	Symbol	ep		95118						
ANR	95310	Symbol	cJSON_False		95118						
ANR	95311	Symbol	cJSON_NULL		95118						
ANR	95312	Symbol	parse_array		95118						
ANR	95313	Symbol	strncmp		95118						
ANR	95314	Symbol	parse_object		95118						
ANR	95315	Symbol	parse_string		95118						
ANR	95316	Symbol	* item		95118						
ANR	95317	Symbol	* value		95118						
ANR	95318	Symbol	cJSON_True		95118						
ANR	95319	Symbol	item -> valueint		95118						
ANR	95320	Symbol	value		95118						
ANR	95321	Function	print_value	294:0:9645:10170							
ANR	95322	FunctionDef	"print_value (cJSON * item , int depth , int fmt)"		95321	0					
ANR	95323	CompoundStatement		295:0:9701:10170	95321	0					
ANR	95324	IdentifierDeclStatement	char * out = 0 ;	296:1:9704:9715	95321	0	True				
ANR	95325	IdentifierDecl	* out = 0		95321	0					
ANR	95326	IdentifierDeclType	char *		95321	0					
ANR	95327	Identifier	out		95321	1					
ANR	95328	AssignmentExpression	* out = 0		95321	2		=			
ANR	95329	Identifier	out		95321	0					
ANR	95330	PrimaryExpression	0		95321	1					
ANR	95331	IfStatement	if ( ! item )		95321	1					
ANR	95332	Condition	! item	297:5:9722:9726	95321	0	True				
ANR	95333	UnaryOperationExpression	! item		95321	0					
ANR	95334	UnaryOperator	!		95321	0					
ANR	95335	Identifier	item		95321	1					
ANR	95336	ReturnStatement	return 0 ;	297:12:9729:9737	95321	1	True				
ANR	95337	PrimaryExpression	0		95321	0					
ANR	95338	SwitchStatement	switch ( ( item -> type ) & 255 )		95321	2					
ANR	95339	Condition	( item -> type ) & 255	298:9:9748:9763	95321	0	True				
ANR	95340	BitAndExpression	( item -> type ) & 255		95321	0		&			
ANR	95341	PtrMemberAccess	item -> type		95321	0					
ANR	95342	Identifier	item		95321	0					
ANR	95343	Identifier	type		95321	1					
ANR	95344	PrimaryExpression	255		95321	1					
ANR	95345	CompoundStatement		5:1:65:65	95321	1					
ANR	95346	Label	case cJSON_NULL :	300:2:9771:9786	95321	0	True				
ANR	95347	Identifier	cJSON_NULL		95321	0					
ANR	95348	ExpressionStatement	"out = cJSON_strdup ( ""null"" )"	300:19:9788:9812	95321	1	True				
ANR	95349	AssignmentExpression	"out = cJSON_strdup ( ""null"" )"		95321	0		=			
ANR	95350	Identifier	out		95321	0					
ANR	95351	CallExpression	"cJSON_strdup ( ""null"" )"		95321	1					
ANR	95352	Callee	cJSON_strdup		95321	0					
ANR	95353	Identifier	cJSON_strdup		95321	0					
ANR	95354	ArgumentList	"""null"""		95321	1					
ANR	95355	Argument	"""null"""		95321	0					
ANR	95356	PrimaryExpression	"""null"""		95321	0					
ANR	95357	BreakStatement	break ;	300:45:9814:9819	95321	2	True				
ANR	95358	Label	case cJSON_False :	301:2:9823:9839	95321	3	True				
ANR	95359	Identifier	cJSON_False		95321	0					
ANR	95360	ExpressionStatement	"out = cJSON_strdup ( ""false"" )"	301:20:9841:9866	95321	4	True				
ANR	95361	AssignmentExpression	"out = cJSON_strdup ( ""false"" )"		95321	0		=			
ANR	95362	Identifier	out		95321	0					
ANR	95363	CallExpression	"cJSON_strdup ( ""false"" )"		95321	1					
ANR	95364	Callee	cJSON_strdup		95321	0					
ANR	95365	Identifier	cJSON_strdup		95321	0					
ANR	95366	ArgumentList	"""false"""		95321	1					
ANR	95367	Argument	"""false"""		95321	0					
ANR	95368	PrimaryExpression	"""false"""		95321	0					
ANR	95369	BreakStatement	break ;	301:46:9867:9872	95321	5	True				
ANR	95370	Label	case cJSON_True :	302:2:9876:9891	95321	6	True				
ANR	95371	Identifier	cJSON_True		95321	0					
ANR	95372	ExpressionStatement	"out = cJSON_strdup ( ""true"" )"	302:19:9893:9917	95321	7	True				
ANR	95373	AssignmentExpression	"out = cJSON_strdup ( ""true"" )"		95321	0		=			
ANR	95374	Identifier	out		95321	0					
ANR	95375	CallExpression	"cJSON_strdup ( ""true"" )"		95321	1					
ANR	95376	Callee	cJSON_strdup		95321	0					
ANR	95377	Identifier	cJSON_strdup		95321	0					
ANR	95378	ArgumentList	"""true"""		95321	1					
ANR	95379	Argument	"""true"""		95321	0					
ANR	95380	PrimaryExpression	"""true"""		95321	0					
ANR	95381	BreakStatement	break ;	302:45:9919:9924	95321	8	True				
ANR	95382	Label	case cJSON_Number :	303:2:9928:9945	95321	9	True				
ANR	95383	Identifier	cJSON_Number		95321	0					
ANR	95384	ExpressionStatement	out = cJSON_print_number ( item )	303:21:9947:9975	95321	10	True				
ANR	95385	AssignmentExpression	out = cJSON_print_number ( item )		95321	0		=			
ANR	95386	Identifier	out		95321	0					
ANR	95387	CallExpression	cJSON_print_number ( item )		95321	1					
ANR	95388	Callee	cJSON_print_number		95321	0					
ANR	95389	Identifier	cJSON_print_number		95321	0					
ANR	95390	ArgumentList	item		95321	1					
ANR	95391	Argument	item		95321	0					
ANR	95392	Identifier	item		95321	0					
ANR	95393	BreakStatement	break ;	303:50:9976:9981	95321	11	True				
ANR	95394	Label	case cJSON_String :	304:2:9985:10002	95321	12	True				
ANR	95395	Identifier	cJSON_String		95321	0					
ANR	95396	ExpressionStatement	out = print_string ( item )	304:21:10004:10026	95321	13	True				
ANR	95397	AssignmentExpression	out = print_string ( item )		95321	0		=			
ANR	95398	Identifier	out		95321	0					
ANR	95399	CallExpression	print_string ( item )		95321	1					
ANR	95400	Callee	print_string		95321	0					
ANR	95401	Identifier	print_string		95321	0					
ANR	95402	ArgumentList	item		95321	1					
ANR	95403	Argument	item		95321	0					
ANR	95404	Identifier	item		95321	0					
ANR	95405	BreakStatement	break ;	304:44:10027:10032	95321	14	True				
ANR	95406	Label	case cJSON_Array :	305:2:10036:10052	95321	15	True				
ANR	95407	Identifier	cJSON_Array		95321	0					
ANR	95408	ExpressionStatement	"out = print_array ( item , depth , fmt )"	305:20:10054:10085	95321	16	True				
ANR	95409	AssignmentExpression	"out = print_array ( item , depth , fmt )"		95321	0		=			
ANR	95410	Identifier	out		95321	0					
ANR	95411	CallExpression	"print_array ( item , depth , fmt )"		95321	1					
ANR	95412	Callee	print_array		95321	0					
ANR	95413	Identifier	print_array		95321	0					
ANR	95414	ArgumentList	item		95321	1					
ANR	95415	Argument	item		95321	0					
ANR	95416	Identifier	item		95321	0					
ANR	95417	Argument	depth		95321	1					
ANR	95418	Identifier	depth		95321	0					
ANR	95419	Argument	fmt		95321	2					
ANR	95420	Identifier	fmt		95321	0					
ANR	95421	BreakStatement	break ;	305:52:10086:10091	95321	17	True				
ANR	95422	Label	case cJSON_Object :	306:2:10095:10112	95321	18	True				
ANR	95423	Identifier	cJSON_Object		95321	0					
ANR	95424	ExpressionStatement	"out = print_object ( item , depth , fmt )"	306:21:10114:10146	95321	19	True				
ANR	95425	AssignmentExpression	"out = print_object ( item , depth , fmt )"		95321	0		=			
ANR	95426	Identifier	out		95321	0					
ANR	95427	CallExpression	"print_object ( item , depth , fmt )"		95321	1					
ANR	95428	Callee	print_object		95321	0					
ANR	95429	Identifier	print_object		95321	0					
ANR	95430	ArgumentList	item		95321	1					
ANR	95431	Argument	item		95321	0					
ANR	95432	Identifier	item		95321	0					
ANR	95433	Argument	depth		95321	1					
ANR	95434	Identifier	depth		95321	0					
ANR	95435	Argument	fmt		95321	2					
ANR	95436	Identifier	fmt		95321	0					
ANR	95437	BreakStatement	break ;	306:54:10147:10152	95321	20	True				
ANR	95438	ReturnStatement	return out ;	308:1:10158:10168	95321	3	True				
ANR	95439	Identifier	out		95321	0					
ANR	95440	ReturnType	static char *		95321	1					
ANR	95441	Identifier	print_value		95321	2					
ANR	95442	ParameterList	"cJSON * item , int depth , int fmt"		95321	3					
ANR	95443	Parameter	cJSON * item	294:25:9670:9680	95321	0	True				
ANR	95444	ParameterType	cJSON *		95321	0					
ANR	95445	Identifier	item		95321	1					
ANR	95446	Parameter	int depth	294:37:9682:9690	95321	1	True				
ANR	95447	ParameterType	int		95321	0					
ANR	95448	Identifier	depth		95321	1					
ANR	95449	Parameter	int fmt	294:47:9692:9698	95321	2	True				
ANR	95450	ParameterType	int		95321	0					
ANR	95451	Identifier	fmt		95321	1					
ANR	95452	CFGEntryNode	ENTRY		95321		True				
ANR	95453	CFGExitNode	EXIT		95321		True				
ANR	95454	Symbol	print_object		95321						
ANR	95455	Symbol	item		95321						
ANR	95456	Symbol	item -> type		95321						
ANR	95457	Symbol	depth		95321						
ANR	95458	Symbol	* item		95321						
ANR	95459	Symbol	print_array		95321						
ANR	95460	Symbol	print_string		95321						
ANR	95461	Symbol	fmt		95321						
ANR	95462	Symbol	out		95321						
ANR	95463	Symbol	cJSON_strdup		95321						
ANR	95464	Symbol	cJSON_print_number		95321						
ANR	95465	Function	parse_array	312:0:10211:10997							
ANR	95466	FunctionDef	"parse_array (cJSON * item , const char * value)"		95465	0					
ANR	95467	CompoundStatement		313:0:10273:10997	95465	0					
ANR	95468	IdentifierDeclStatement	cJSON * child ;	314:1:10276:10288	95465	0	True				
ANR	95469	IdentifierDecl	* child		95465	0					
ANR	95470	IdentifierDeclType	cJSON *		95465	0					
ANR	95471	Identifier	child		95465	1					
ANR	95472	IfStatement	if ( * value != '[' )		95465	1					
ANR	95473	Condition	* value != '['	315:5:10295:10305	95465	0	True				
ANR	95474	EqualityExpression	* value != '['		95465	0		!=			
ANR	95475	UnaryOperationExpression	* value		95465	0					
ANR	95476	UnaryOperator	*		95465	0					
ANR	95477	Identifier	value		95465	1					
ANR	95478	PrimaryExpression	'['		95465	1					
ANR	95479	CompoundStatement		3:18:34:34	95465	1					
ANR	95480	ExpressionStatement	ep = value	315:19:10309:10317	95465	0	True				
ANR	95481	AssignmentExpression	ep = value		95465	0		=			
ANR	95482	Identifier	ep		95465	0					
ANR	95483	Identifier	value		95465	1					
ANR	95484	ReturnStatement	return 0 ;	315:28:10318:10326	95465	1	True				
ANR	95485	PrimaryExpression	0		95465	0					
ANR	95486	ExpressionStatement	item -> type = cJSON_Array	317:1:10351:10373	95465	2	True				
ANR	95487	AssignmentExpression	item -> type = cJSON_Array		95465	0		=			
ANR	95488	PtrMemberAccess	item -> type		95465	0					
ANR	95489	Identifier	item		95465	0					
ANR	95490	Identifier	type		95465	1					
ANR	95491	Identifier	cJSON_Array		95465	1					
ANR	95492	ExpressionStatement	value = skip ( value + 1 )	318:1:10376:10395	95465	3	True				
ANR	95493	AssignmentExpression	value = skip ( value + 1 )		95465	0		=			
ANR	95494	Identifier	value		95465	0					
ANR	95495	CallExpression	skip ( value + 1 )		95465	1					
ANR	95496	Callee	skip		95465	0					
ANR	95497	Identifier	skip		95465	0					
ANR	95498	ArgumentList	value + 1		95465	1					
ANR	95499	Argument	value + 1		95465	0					
ANR	95500	AdditiveExpression	value + 1		95465	0		+			
ANR	95501	Identifier	value		95465	0					
ANR	95502	PrimaryExpression	1		95465	1					
ANR	95503	IfStatement	if ( * value == ']' )		95465	4					
ANR	95504	Condition	* value == ']'	319:5:10402:10412	95465	0	True				
ANR	95505	EqualityExpression	* value == ']'		95465	0		==			
ANR	95506	UnaryOperationExpression	* value		95465	0					
ANR	95507	UnaryOperator	*		95465	0					
ANR	95508	Identifier	value		95465	1					
ANR	95509	PrimaryExpression	']'		95465	1					
ANR	95510	ReturnStatement	return value + 1 ;	319:18:10415:10429	95465	1	True				
ANR	95511	AdditiveExpression	value + 1		95465	0		+			
ANR	95512	Identifier	value		95465	0					
ANR	95513	PrimaryExpression	1		95465	1					
ANR	95514	ExpressionStatement	item -> child = child = cJSON_New_Item ( )	321:1:10452:10486	95465	5	True				
ANR	95515	AssignmentExpression	item -> child = child = cJSON_New_Item ( )		95465	0		=			
ANR	95516	PtrMemberAccess	item -> child		95465	0					
ANR	95517	Identifier	item		95465	0					
ANR	95518	Identifier	child		95465	1					
ANR	95519	AssignmentExpression	child = cJSON_New_Item ( )		95465	1		=			
ANR	95520	Identifier	child		95465	0					
ANR	95521	CallExpression	cJSON_New_Item ( )		95465	1					
ANR	95522	Callee	cJSON_New_Item		95465	0					
ANR	95523	Identifier	cJSON_New_Item		95465	0					
ANR	95524	ArgumentList			95465	1					
ANR	95525	IfStatement	if ( ! item -> child )		95465	6					
ANR	95526	Condition	! item -> child	322:5:10493:10504	95465	0	True				
ANR	95527	UnaryOperationExpression	! item -> child		95465	0					
ANR	95528	UnaryOperator	!		95465	0					
ANR	95529	PtrMemberAccess	item -> child		95465	1					
ANR	95530	Identifier	item		95465	0					
ANR	95531	Identifier	child		95465	1					
ANR	95532	ReturnStatement	return 0 ;	322:19:10507:10515	95465	1	True				
ANR	95533	PrimaryExpression	0		95465	0					
ANR	95534	ExpressionStatement	"value = skip ( parse_value ( child , skip ( value ) ) )"	323:1:10538:10580	95465	7	True				
ANR	95535	AssignmentExpression	"value = skip ( parse_value ( child , skip ( value ) ) )"		95465	0		=			
ANR	95536	Identifier	value		95465	0					
ANR	95537	CallExpression	"skip ( parse_value ( child , skip ( value ) ) )"		95465	1					
ANR	95538	Callee	skip		95465	0					
ANR	95539	Identifier	skip		95465	0					
ANR	95540	ArgumentList	"parse_value ( child , skip ( value ) )"		95465	1					
ANR	95541	Argument	"parse_value ( child , skip ( value ) )"		95465	0					
ANR	95542	CallExpression	"parse_value ( child , skip ( value ) )"		95465	0					
ANR	95543	Callee	parse_value		95465	0					
ANR	95544	Identifier	parse_value		95465	0					
ANR	95545	ArgumentList	child		95465	1					
ANR	95546	Argument	child		95465	0					
ANR	95547	Identifier	child		95465	0					
ANR	95548	Argument	skip ( value )		95465	1					
ANR	95549	CallExpression	skip ( value )		95465	0					
ANR	95550	Callee	skip		95465	0					
ANR	95551	Identifier	skip		95465	0					
ANR	95552	ArgumentList	value		95465	1					
ANR	95553	Argument	value		95465	0					
ANR	95554	Identifier	value		95465	0					
ANR	95555	IfStatement	if ( ! value )		95465	8					
ANR	95556	Condition	! value	324:5:10626:10631	95465	0	True				
ANR	95557	UnaryOperationExpression	! value		95465	0					
ANR	95558	UnaryOperator	!		95465	0					
ANR	95559	Identifier	value		95465	1					
ANR	95560	ReturnStatement	return 0 ;	324:13:10634:10642	95465	1	True				
ANR	95561	PrimaryExpression	0		95465	0					
ANR	95562	WhileStatement	"while ( * value == ',' )"		95465	9					
ANR	95563	Condition	"* value == ','"	326:8:10653:10663	95465	0	True				
ANR	95564	EqualityExpression	"* value == ','"		95465	0		==			
ANR	95565	UnaryOperationExpression	* value		95465	0					
ANR	95566	UnaryOperator	*		95465	0					
ANR	95567	Identifier	value		95465	1					
ANR	95568	PrimaryExpression	"','"		95465	1					
ANR	95569	CompoundStatement		16:2:397:412	95465	1					
ANR	95570	IdentifierDeclStatement	cJSON * new_item ;	328:2:10671:10686	95465	0	True				
ANR	95571	IdentifierDecl	* new_item		95465	0					
ANR	95572	IdentifierDeclType	cJSON *		95465	0					
ANR	95573	Identifier	new_item		95465	1					
ANR	95574	IfStatement	if ( ! ( new_item = cJSON_New_Item ( ) ) )		95465	1					
ANR	95575	Condition	! ( new_item = cJSON_New_Item ( ) )	329:6:10694:10721	95465	0	True				
ANR	95576	UnaryOperationExpression	! ( new_item = cJSON_New_Item ( ) )		95465	0					
ANR	95577	UnaryOperator	!		95465	0					
ANR	95578	AssignmentExpression	new_item = cJSON_New_Item ( )		95465	1		=			
ANR	95579	Identifier	new_item		95465	0					
ANR	95580	CallExpression	cJSON_New_Item ( )		95465	1					
ANR	95581	Callee	cJSON_New_Item		95465	0					
ANR	95582	Identifier	cJSON_New_Item		95465	0					
ANR	95583	ArgumentList			95465	1					
ANR	95584	ReturnStatement	return 0 ;	329:36:10724:10732	95465	1	True				
ANR	95585	PrimaryExpression	0		95465	0					
ANR	95586	ExpressionStatement	child -> next = new_item	330:2:10755:10775	95465	2	True				
ANR	95587	AssignmentExpression	child -> next = new_item		95465	0		=			
ANR	95588	PtrMemberAccess	child -> next		95465	0					
ANR	95589	Identifier	child		95465	0					
ANR	95590	Identifier	next		95465	1					
ANR	95591	Identifier	new_item		95465	1					
ANR	95592	ExpressionStatement	new_item -> prev = child	330:23:10776:10796	95465	3	True				
ANR	95593	AssignmentExpression	new_item -> prev = child		95465	0		=			
ANR	95594	PtrMemberAccess	new_item -> prev		95465	0					
ANR	95595	Identifier	new_item		95465	0					
ANR	95596	Identifier	prev		95465	1					
ANR	95597	Identifier	child		95465	1					
ANR	95598	ExpressionStatement	child = new_item	330:44:10797:10811	95465	4	True				
ANR	95599	AssignmentExpression	child = new_item		95465	0		=			
ANR	95600	Identifier	child		95465	0					
ANR	95601	Identifier	new_item		95465	1					
ANR	95602	ExpressionStatement	"value = skip ( parse_value ( child , skip ( value + 1 ) ) )"	331:2:10815:10859	95465	5	True				
ANR	95603	AssignmentExpression	"value = skip ( parse_value ( child , skip ( value + 1 ) ) )"		95465	0		=			
ANR	95604	Identifier	value		95465	0					
ANR	95605	CallExpression	"skip ( parse_value ( child , skip ( value + 1 ) ) )"		95465	1					
ANR	95606	Callee	skip		95465	0					
ANR	95607	Identifier	skip		95465	0					
ANR	95608	ArgumentList	"parse_value ( child , skip ( value + 1 ) )"		95465	1					
ANR	95609	Argument	"parse_value ( child , skip ( value + 1 ) )"		95465	0					
ANR	95610	CallExpression	"parse_value ( child , skip ( value + 1 ) )"		95465	0					
ANR	95611	Callee	parse_value		95465	0					
ANR	95612	Identifier	parse_value		95465	0					
ANR	95613	ArgumentList	child		95465	1					
ANR	95614	Argument	child		95465	0					
ANR	95615	Identifier	child		95465	0					
ANR	95616	Argument	skip ( value + 1 )		95465	1					
ANR	95617	CallExpression	skip ( value + 1 )		95465	0					
ANR	95618	Callee	skip		95465	0					
ANR	95619	Identifier	skip		95465	0					
ANR	95620	ArgumentList	value + 1		95465	1					
ANR	95621	Argument	value + 1		95465	0					
ANR	95622	AdditiveExpression	value + 1		95465	0		+			
ANR	95623	Identifier	value		95465	0					
ANR	95624	PrimaryExpression	1		95465	1					
ANR	95625	IfStatement	if ( ! value )		95465	6					
ANR	95626	Condition	! value	332:6:10867:10872	95465	0	True				
ANR	95627	UnaryOperationExpression	! value		95465	0					
ANR	95628	UnaryOperator	!		95465	0					
ANR	95629	Identifier	value		95465	1					
ANR	95630	ReturnStatement	return 0 ;	332:14:10875:10883	95465	1	True				
ANR	95631	PrimaryExpression	0		95465	0					
ANR	95632	IfStatement	if ( * value == ']' )		95465	10					
ANR	95633	Condition	* value == ']'	335:5:10912:10922	95465	0	True				
ANR	95634	EqualityExpression	* value == ']'		95465	0		==			
ANR	95635	UnaryOperationExpression	* value		95465	0					
ANR	95636	UnaryOperator	*		95465	0					
ANR	95637	Identifier	value		95465	1					
ANR	95638	PrimaryExpression	']'		95465	1					
ANR	95639	ReturnStatement	return value + 1 ;	335:18:10925:10939	95465	1	True				
ANR	95640	AdditiveExpression	value + 1		95465	0		+			
ANR	95641	Identifier	value		95465	0					
ANR	95642	PrimaryExpression	1		95465	1					
ANR	95643	ExpressionStatement	ep = value	336:1:10961:10969	95465	11	True				
ANR	95644	AssignmentExpression	ep = value		95465	0		=			
ANR	95645	Identifier	ep		95465	0					
ANR	95646	Identifier	value		95465	1					
ANR	95647	ReturnStatement	return 0 ;	336:10:10970:10978	95465	12	True				
ANR	95648	PrimaryExpression	0		95465	0					
ANR	95649	ReturnType	static const char *		95465	1					
ANR	95650	Identifier	parse_array		95465	2					
ANR	95651	ParameterList	"cJSON * item , const char * value"		95465	3					
ANR	95652	Parameter	cJSON * item	312:31:10242:10252	95465	0	True				
ANR	95653	ParameterType	cJSON *		95465	0					
ANR	95654	Identifier	item		95465	1					
ANR	95655	Parameter	const char * value	312:43:10254:10270	95465	1	True				
ANR	95656	ParameterType	const char *		95465	0					
ANR	95657	Identifier	value		95465	1					
ANR	95658	CFGEntryNode	ENTRY		95465		True				
ANR	95659	CFGExitNode	EXIT		95465		True				
ANR	95660	Symbol	cJSON_Array		95465						
ANR	95661	Symbol	new_item		95465						
ANR	95662	Symbol	item		95465						
ANR	95663	Symbol	item -> type		95465						
ANR	95664	Symbol	child -> next		95465						
ANR	95665	Symbol	* child		95465						
ANR	95666	Symbol	parse_value		95465						
ANR	95667	Symbol	* new_item		95465						
ANR	95668	Symbol	new_item -> prev		95465						
ANR	95669	Symbol	skip		95465						
ANR	95670	Symbol	ep		95465						
ANR	95671	Symbol	cJSON_New_Item		95465						
ANR	95672	Symbol	* value		95465						
ANR	95673	Symbol	* item		95465						
ANR	95674	Symbol	item -> child		95465						
ANR	95675	Symbol	value		95465						
ANR	95676	Symbol	child		95465						
ANR	95677	Function	print_array	340:0:11030:12271							
ANR	95678	FunctionDef	"print_array (cJSON * item , int depth , int fmt)"		95677	0					
ANR	95679	CompoundStatement		341:0:11086:12271	95677	0					
ANR	95680	IdentifierDeclStatement	char * * entries ;	342:1:11089:11103	95677	0	True				
ANR	95681	IdentifierDecl	* * entries		95677	0					
ANR	95682	IdentifierDeclType	char * *		95677	0					
ANR	95683	Identifier	entries		95677	1					
ANR	95684	IdentifierDeclStatement	"char * out = 0 , * ptr , * ret ;"	343:1:11106:11127	95677	1	True				
ANR	95685	IdentifierDecl	* out = 0		95677	0					
ANR	95686	IdentifierDeclType	char *		95677	0					
ANR	95687	Identifier	out		95677	1					
ANR	95688	AssignmentExpression	* out = 0		95677	2		=			
ANR	95689	Identifier	out		95677	0					
ANR	95690	PrimaryExpression	0		95677	1					
ANR	95691	IdentifierDecl	* ptr		95677	1					
ANR	95692	IdentifierDeclType	char *		95677	0					
ANR	95693	Identifier	ptr		95677	1					
ANR	95694	IdentifierDecl	* ret		95677	2					
ANR	95695	IdentifierDeclType	char *		95677	0					
ANR	95696	Identifier	ret		95677	1					
ANR	95697	IdentifierDeclStatement	int len = 5 ;	343:23:11128:11137	95677	2	True				
ANR	95698	IdentifierDecl	len = 5		95677	0					
ANR	95699	IdentifierDeclType	int		95677	0					
ANR	95700	Identifier	len		95677	1					
ANR	95701	AssignmentExpression	len = 5		95677	2		=			
ANR	95702	Identifier	len		95677	0					
ANR	95703	PrimaryExpression	5		95677	1					
ANR	95704	IdentifierDeclStatement	cJSON * child = item -> child ;	344:1:11140:11164	95677	3	True				
ANR	95705	IdentifierDecl	* child = item -> child		95677	0					
ANR	95706	IdentifierDeclType	cJSON *		95677	0					
ANR	95707	Identifier	child		95677	1					
ANR	95708	AssignmentExpression	* child = item -> child		95677	2		=			
ANR	95709	Identifier	child		95677	0					
ANR	95710	PtrMemberAccess	item -> child		95677	1					
ANR	95711	Identifier	item		95677	0					
ANR	95712	Identifier	child		95677	1					
ANR	95713	IdentifierDeclStatement	"int numentries = 0 , i = 0 , fail = 0 ;"	345:1:11167:11194	95677	4	True				
ANR	95714	IdentifierDecl	numentries = 0		95677	0					
ANR	95715	IdentifierDeclType	int		95677	0					
ANR	95716	Identifier	numentries		95677	1					
ANR	95717	AssignmentExpression	numentries = 0		95677	2		=			
ANR	95718	Identifier	numentries		95677	0					
ANR	95719	PrimaryExpression	0		95677	1					
ANR	95720	IdentifierDecl	i = 0		95677	1					
ANR	95721	IdentifierDeclType	int		95677	0					
ANR	95722	Identifier	i		95677	1					
ANR	95723	AssignmentExpression	i = 0		95677	2		=			
ANR	95724	Identifier	i		95677	0					
ANR	95725	PrimaryExpression	0		95677	1					
ANR	95726	IdentifierDecl	fail = 0		95677	2					
ANR	95727	IdentifierDeclType	int		95677	0					
ANR	95728	Identifier	fail		95677	1					
ANR	95729	AssignmentExpression	fail = 0		95677	2		=			
ANR	95730	Identifier	fail		95677	0					
ANR	95731	PrimaryExpression	0		95677	1					
ANR	95732	WhileStatement	while ( child )		95677	5					
ANR	95733	Condition	child	348:8:11244:11248	95677	0	True				
ANR	95734	Identifier	child		95677	0					
ANR	95735	ExpressionStatement	"numentries ++ , child = child -> next"	348:15:11251:11281	95677	1	True				
ANR	95736	Expression	"numentries ++ , child = child -> next"		95677	0					
ANR	95737	PostIncDecOperationExpression	numentries ++		95677	0					
ANR	95738	Identifier	numentries		95677	0					
ANR	95739	IncDec	++		95677	1					
ANR	95740	AssignmentExpression	child = child -> next		95677	1		=			
ANR	95741	Identifier	child		95677	0					
ANR	95742	PtrMemberAccess	child -> next		95677	1					
ANR	95743	Identifier	child		95677	0					
ANR	95744	Identifier	next		95677	1					
ANR	95745	ExpressionStatement	entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) )	350:1:11337:11391	95677	6	True				
ANR	95746	AssignmentExpression	entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) )		95677	0		=			
ANR	95747	Identifier	entries		95677	0					
ANR	95748	CastExpression	( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) )		95677	1					
ANR	95749	CastTarget	char * *		95677	0					
ANR	95750	CallExpression	cJSON_malloc ( numentries * sizeof ( char * ) )		95677	1					
ANR	95751	Callee	cJSON_malloc		95677	0					
ANR	95752	Identifier	cJSON_malloc		95677	0					
ANR	95753	ArgumentList	numentries * sizeof ( char * )		95677	1					
ANR	95754	Argument	numentries * sizeof ( char * )		95677	0					
ANR	95755	MultiplicativeExpression	numentries * sizeof ( char * )		95677	0		*			
ANR	95756	Identifier	numentries		95677	0					
ANR	95757	SizeofExpression	sizeof ( char * )		95677	1					
ANR	95758	Sizeof	sizeof		95677	0					
ANR	95759	SizeofOperand	char *		95677	1					
ANR	95760	IfStatement	if ( ! entries )		95677	7					
ANR	95761	Condition	! entries	351:5:11398:11405	95677	0	True				
ANR	95762	UnaryOperationExpression	! entries		95677	0					
ANR	95763	UnaryOperator	!		95677	0					
ANR	95764	Identifier	entries		95677	1					
ANR	95765	ReturnStatement	return 0 ;	351:15:11408:11416	95677	1	True				
ANR	95766	PrimaryExpression	0		95677	0					
ANR	95767	ExpressionStatement	"memset ( entries , 0 , numentries * sizeof ( char * ) )"	352:1:11419:11461	95677	8	True				
ANR	95768	CallExpression	"memset ( entries , 0 , numentries * sizeof ( char * ) )"		95677	0					
ANR	95769	Callee	memset		95677	0					
ANR	95770	Identifier	memset		95677	0					
ANR	95771	ArgumentList	entries		95677	1					
ANR	95772	Argument	entries		95677	0					
ANR	95773	Identifier	entries		95677	0					
ANR	95774	Argument	0		95677	1					
ANR	95775	PrimaryExpression	0		95677	0					
ANR	95776	Argument	numentries * sizeof ( char * )		95677	2					
ANR	95777	MultiplicativeExpression	numentries * sizeof ( char * )		95677	0		*			
ANR	95778	Identifier	numentries		95677	0					
ANR	95779	SizeofExpression	sizeof ( char * )		95677	1					
ANR	95780	Sizeof	sizeof		95677	0					
ANR	95781	SizeofOperand	char *		95677	1					
ANR	95782	ExpressionStatement	child = item -> child	354:1:11497:11514	95677	9	True				
ANR	95783	AssignmentExpression	child = item -> child		95677	0		=			
ANR	95784	Identifier	child		95677	0					
ANR	95785	PtrMemberAccess	item -> child		95677	1					
ANR	95786	Identifier	item		95677	0					
ANR	95787	Identifier	child		95677	1					
ANR	95788	WhileStatement	while ( child && ! fail )		95677	10					
ANR	95789	Condition	child && ! fail	355:8:11524:11537	95677	0	True				
ANR	95790	AndExpression	child && ! fail		95677	0		&&			
ANR	95791	Identifier	child		95677	0					
ANR	95792	UnaryOperationExpression	! fail		95677	1					
ANR	95793	UnaryOperator	!		95677	0					
ANR	95794	Identifier	fail		95677	1					
ANR	95795	CompoundStatement		16:1:454:454	95677	1					
ANR	95796	ExpressionStatement	"ret = print_value ( child , depth + 1 , fmt )"	357:2:11545:11579	95677	0	True				
ANR	95797	AssignmentExpression	"ret = print_value ( child , depth + 1 , fmt )"		95677	0		=			
ANR	95798	Identifier	ret		95677	0					
ANR	95799	CallExpression	"print_value ( child , depth + 1 , fmt )"		95677	1					
ANR	95800	Callee	print_value		95677	0					
ANR	95801	Identifier	print_value		95677	0					
ANR	95802	ArgumentList	child		95677	1					
ANR	95803	Argument	child		95677	0					
ANR	95804	Identifier	child		95677	0					
ANR	95805	Argument	depth + 1		95677	1					
ANR	95806	AdditiveExpression	depth + 1		95677	0		+			
ANR	95807	Identifier	depth		95677	0					
ANR	95808	PrimaryExpression	1		95677	1					
ANR	95809	Argument	fmt		95677	2					
ANR	95810	Identifier	fmt		95677	0					
ANR	95811	ExpressionStatement	entries [ i ++ ] = ret	358:2:11583:11599	95677	1	True				
ANR	95812	AssignmentExpression	entries [ i ++ ] = ret		95677	0		=			
ANR	95813	ArrayIndexing	entries [ i ++ ]		95677	0					
ANR	95814	Identifier	entries		95677	0					
ANR	95815	PostIncDecOperationExpression	i ++		95677	1					
ANR	95816	Identifier	i		95677	0					
ANR	95817	IncDec	++		95677	1					
ANR	95818	Identifier	ret		95677	1					
ANR	95819	IfStatement	if ( ret )		95677	2					
ANR	95820	Condition	ret	359:6:11607:11609	95677	0	True				
ANR	95821	Identifier	ret		95677	0					
ANR	95822	ExpressionStatement	len += strlen ( ret ) + 2 + ( fmt ? 1 : 0 )	359:11:11612:11640	95677	1	True				
ANR	95823	AssignmentExpression	len += strlen ( ret ) + 2 + ( fmt ? 1 : 0 )		95677	0		+=			
ANR	95824	Identifier	len		95677	0					
ANR	95825	AdditiveExpression	strlen ( ret ) + 2 + ( fmt ? 1 : 0 )		95677	1		+			
ANR	95826	CallExpression	strlen ( ret )		95677	0					
ANR	95827	Callee	strlen		95677	0					
ANR	95828	Identifier	strlen		95677	0					
ANR	95829	ArgumentList	ret		95677	1					
ANR	95830	Argument	ret		95677	0					
ANR	95831	Identifier	ret		95677	0					
ANR	95832	AdditiveExpression	2 + ( fmt ? 1 : 0 )		95677	1		+			
ANR	95833	PrimaryExpression	2		95677	0					
ANR	95834	ConditionalExpression	fmt ? 1 : 0		95677	1					
ANR	95835	Condition	fmt		95677	0					
ANR	95836	Identifier	fmt		95677	0					
ANR	95837	PrimaryExpression	1		95677	1					
ANR	95838	PrimaryExpression	0		95677	2					
ANR	95839	ElseStatement	else		95677	0					
ANR	95840	ExpressionStatement	fail = 1	359:46:11647:11653	95677	0	True				
ANR	95841	AssignmentExpression	fail = 1		95677	0		=			
ANR	95842	Identifier	fail		95677	0					
ANR	95843	PrimaryExpression	1		95677	1					
ANR	95844	ExpressionStatement	child = child -> next	360:2:11657:11674	95677	3	True				
ANR	95845	AssignmentExpression	child = child -> next		95677	0		=			
ANR	95846	Identifier	child		95677	0					
ANR	95847	PtrMemberAccess	child -> next		95677	1					
ANR	95848	Identifier	child		95677	0					
ANR	95849	Identifier	next		95677	1					
ANR	95850	IfStatement	if ( ! fail )		95677	11					
ANR	95851	Condition	! fail	364:5:11744:11748	95677	0	True				
ANR	95852	UnaryOperationExpression	! fail		95677	0					
ANR	95853	UnaryOperator	!		95677	0					
ANR	95854	Identifier	fail		95677	1					
ANR	95855	ExpressionStatement	out = ( char * ) cJSON_malloc ( len )	364:12:11751:11779	95677	1	True				
ANR	95856	AssignmentExpression	out = ( char * ) cJSON_malloc ( len )		95677	0		=			
ANR	95857	Identifier	out		95677	0					
ANR	95858	CastExpression	( char * ) cJSON_malloc ( len )		95677	1					
ANR	95859	CastTarget	char *		95677	0					
ANR	95860	CallExpression	cJSON_malloc ( len )		95677	1					
ANR	95861	Callee	cJSON_malloc		95677	0					
ANR	95862	Identifier	cJSON_malloc		95677	0					
ANR	95863	ArgumentList	len		95677	1					
ANR	95864	Argument	len		95677	0					
ANR	95865	Identifier	len		95677	0					
ANR	95866	IfStatement	if ( ! out )		95677	12					
ANR	95867	Condition	! out	366:5:11817:11820	95677	0	True				
ANR	95868	UnaryOperationExpression	! out		95677	0					
ANR	95869	UnaryOperator	!		95677	0					
ANR	95870	Identifier	out		95677	1					
ANR	95871	ExpressionStatement	fail = 1	366:11:11823:11829	95677	1	True				
ANR	95872	AssignmentExpression	fail = 1		95677	0		=			
ANR	95873	Identifier	fail		95677	0					
ANR	95874	PrimaryExpression	1		95677	1					
ANR	95875	IfStatement	if ( fail )		95677	13					
ANR	95876	Condition	fail	369:5:11860:11863	95677	0	True				
ANR	95877	Identifier	fail		95677	0					
ANR	95878	CompoundStatement		30:1:780:780	95677	1					
ANR	95879	ForStatement	for ( i = 0 ; i < numentries ; i ++ )		95677	0					
ANR	95880	ForInit	i = 0 ;	371:7:11876:11879	95677	0	True				
ANR	95881	AssignmentExpression	i = 0		95677	0		=			
ANR	95882	Identifier	i		95677	0					
ANR	95883	PrimaryExpression	0		95677	1					
ANR	95884	Condition	i < numentries	371:11:11880:11891	95677	1	True				
ANR	95885	RelationalExpression	i < numentries		95677	0		<			
ANR	95886	Identifier	i		95677	0					
ANR	95887	Identifier	numentries		95677	1					
ANR	95888	PostIncDecOperationExpression	i ++	371:24:11893:11895	95677	2	True				
ANR	95889	Identifier	i		95677	0					
ANR	95890	IncDec	++		95677	1					
ANR	95891	IfStatement	if ( entries [ i ] )		95677	3					
ANR	95892	Condition	entries [ i ]	371:33:11902:11911	95677	0	True				
ANR	95893	ArrayIndexing	entries [ i ]		95677	0					
ANR	95894	Identifier	entries		95677	0					
ANR	95895	Identifier	i		95677	1					
ANR	95896	ExpressionStatement	cJSON_free ( entries [ i ] )	371:45:11914:11936	95677	1	True				
ANR	95897	CallExpression	cJSON_free ( entries [ i ] )		95677	0					
ANR	95898	Callee	cJSON_free		95677	0					
ANR	95899	Identifier	cJSON_free		95677	0					
ANR	95900	ArgumentList	entries [ i ]		95677	1					
ANR	95901	Argument	entries [ i ]		95677	0					
ANR	95902	ArrayIndexing	entries [ i ]		95677	0					
ANR	95903	Identifier	entries		95677	0					
ANR	95904	Identifier	i		95677	1					
ANR	95905	ExpressionStatement	cJSON_free ( entries )	372:2:11940:11959	95677	1	True				
ANR	95906	CallExpression	cJSON_free ( entries )		95677	0					
ANR	95907	Callee	cJSON_free		95677	0					
ANR	95908	Identifier	cJSON_free		95677	0					
ANR	95909	ArgumentList	entries		95677	1					
ANR	95910	Argument	entries		95677	0					
ANR	95911	Identifier	entries		95677	0					
ANR	95912	ReturnStatement	return 0 ;	373:2:11963:11971	95677	2	True				
ANR	95913	PrimaryExpression	0		95677	0					
ANR	95914	ExpressionStatement	* out = '['	377:1:12012:12020	95677	14	True				
ANR	95915	AssignmentExpression	* out = '['		95677	0		=			
ANR	95916	UnaryOperationExpression	* out		95677	0					
ANR	95917	UnaryOperator	*		95677	0					
ANR	95918	Identifier	out		95677	1					
ANR	95919	PrimaryExpression	'['		95677	1					
ANR	95920	ExpressionStatement	ptr = out + 1	378:1:12023:12032	95677	15	True				
ANR	95921	AssignmentExpression	ptr = out + 1		95677	0		=			
ANR	95922	Identifier	ptr		95677	0					
ANR	95923	AdditiveExpression	out + 1		95677	1		+			
ANR	95924	Identifier	out		95677	0					
ANR	95925	PrimaryExpression	1		95677	1					
ANR	95926	ExpressionStatement	* ptr = 0	378:11:12033:12039	95677	16	True				
ANR	95927	AssignmentExpression	* ptr = 0		95677	0		=			
ANR	95928	UnaryOperationExpression	* ptr		95677	0					
ANR	95929	UnaryOperator	*		95677	0					
ANR	95930	Identifier	ptr		95677	1					
ANR	95931	PrimaryExpression	0		95677	1					
ANR	95932	ForStatement	for ( i = 0 ; i < numentries ; i ++ )		95677	17					
ANR	95933	ForInit	i = 0 ;	379:6:12047:12050	95677	0	True				
ANR	95934	AssignmentExpression	i = 0		95677	0		=			
ANR	95935	Identifier	i		95677	0					
ANR	95936	PrimaryExpression	0		95677	1					
ANR	95937	Condition	i < numentries	379:10:12051:12062	95677	1	True				
ANR	95938	RelationalExpression	i < numentries		95677	0		<			
ANR	95939	Identifier	i		95677	0					
ANR	95940	Identifier	numentries		95677	1					
ANR	95941	PostIncDecOperationExpression	i ++	379:23:12064:12066	95677	2	True				
ANR	95942	Identifier	i		95677	0					
ANR	95943	IncDec	++		95677	1					
ANR	95944	CompoundStatement		40:1:983:983	95677	3					
ANR	95945	ExpressionStatement	"strcpy ( ptr , entries [ i ] )"	381:2:12074:12096	95677	0	True				
ANR	95946	CallExpression	"strcpy ( ptr , entries [ i ] )"		95677	0					
ANR	95947	Callee	strcpy		95677	0					
ANR	95948	Identifier	strcpy		95677	0					
ANR	95949	ArgumentList	ptr		95677	1					
ANR	95950	Argument	ptr		95677	0					
ANR	95951	Identifier	ptr		95677	0					
ANR	95952	Argument	entries [ i ]		95677	1					
ANR	95953	ArrayIndexing	entries [ i ]		95677	0					
ANR	95954	Identifier	entries		95677	0					
ANR	95955	Identifier	i		95677	1					
ANR	95956	ExpressionStatement	ptr += strlen ( entries [ i ] )	381:25:12097:12120	95677	1	True				
ANR	95957	AssignmentExpression	ptr += strlen ( entries [ i ] )		95677	0		+=			
ANR	95958	Identifier	ptr		95677	0					
ANR	95959	CallExpression	strlen ( entries [ i ] )		95677	1					
ANR	95960	Callee	strlen		95677	0					
ANR	95961	Identifier	strlen		95677	0					
ANR	95962	ArgumentList	entries [ i ]		95677	1					
ANR	95963	Argument	entries [ i ]		95677	0					
ANR	95964	ArrayIndexing	entries [ i ]		95677	0					
ANR	95965	Identifier	entries		95677	0					
ANR	95966	Identifier	i		95677	1					
ANR	95967	IfStatement	if ( i != numentries - 1 )		95677	2					
ANR	95968	Condition	i != numentries - 1	382:6:12128:12142	95677	0	True				
ANR	95969	EqualityExpression	i != numentries - 1		95677	0		!=			
ANR	95970	Identifier	i		95677	0					
ANR	95971	AdditiveExpression	numentries - 1		95677	1		-			
ANR	95972	Identifier	numentries		95677	0					
ANR	95973	PrimaryExpression	1		95677	1					
ANR	95974	CompoundStatement		42:23:1058:1058	95677	1					
ANR	95975	ExpressionStatement	"* ptr ++ = ','"	382:24:12146:12156	95677	0	True				
ANR	95976	AssignmentExpression	"* ptr ++ = ','"		95677	0		=			
ANR	95977	UnaryOperationExpression	* ptr ++		95677	0					
ANR	95978	UnaryOperator	*		95677	0					
ANR	95979	PostIncDecOperationExpression	ptr ++		95677	1					
ANR	95980	Identifier	ptr		95677	0					
ANR	95981	IncDec	++		95677	1					
ANR	95982	PrimaryExpression	"','"		95677	1					
ANR	95983	IfStatement	if ( fmt )		95677	1					
ANR	95984	Condition	fmt	382:38:12160:12162	95677	0	True				
ANR	95985	Identifier	fmt		95677	0					
ANR	95986	ExpressionStatement	* ptr ++ = ' '	382:42:12164:12174	95677	1	True				
ANR	95987	AssignmentExpression	* ptr ++ = ' '		95677	0		=			
ANR	95988	UnaryOperationExpression	* ptr ++		95677	0					
ANR	95989	UnaryOperator	*		95677	0					
ANR	95990	PostIncDecOperationExpression	ptr ++		95677	1					
ANR	95991	Identifier	ptr		95677	0					
ANR	95992	IncDec	++		95677	1					
ANR	95993	PrimaryExpression	' '		95677	1					
ANR	95994	ExpressionStatement	* ptr = 0	382:53:12175:12181	95677	2	True				
ANR	95995	AssignmentExpression	* ptr = 0		95677	0		=			
ANR	95996	UnaryOperationExpression	* ptr		95677	0					
ANR	95997	UnaryOperator	*		95677	0					
ANR	95998	Identifier	ptr		95677	1					
ANR	95999	PrimaryExpression	0		95677	1					
ANR	96000	ExpressionStatement	cJSON_free ( entries [ i ] )	383:2:12186:12208	95677	3	True				
ANR	96001	CallExpression	cJSON_free ( entries [ i ] )		95677	0					
ANR	96002	Callee	cJSON_free		95677	0					
ANR	96003	Identifier	cJSON_free		95677	0					
ANR	96004	ArgumentList	entries [ i ]		95677	1					
ANR	96005	Argument	entries [ i ]		95677	0					
ANR	96006	ArrayIndexing	entries [ i ]		95677	0					
ANR	96007	Identifier	entries		95677	0					
ANR	96008	Identifier	i		95677	1					
ANR	96009	ExpressionStatement	cJSON_free ( entries )	385:1:12214:12233	95677	18	True				
ANR	96010	CallExpression	cJSON_free ( entries )		95677	0					
ANR	96011	Callee	cJSON_free		95677	0					
ANR	96012	Identifier	cJSON_free		95677	0					
ANR	96013	ArgumentList	entries		95677	1					
ANR	96014	Argument	entries		95677	0					
ANR	96015	Identifier	entries		95677	0					
ANR	96016	ExpressionStatement	* ptr ++ = ']'	386:1:12236:12246	95677	19	True				
ANR	96017	AssignmentExpression	* ptr ++ = ']'		95677	0		=			
ANR	96018	UnaryOperationExpression	* ptr ++		95677	0					
ANR	96019	UnaryOperator	*		95677	0					
ANR	96020	PostIncDecOperationExpression	ptr ++		95677	1					
ANR	96021	Identifier	ptr		95677	0					
ANR	96022	IncDec	++		95677	1					
ANR	96023	PrimaryExpression	']'		95677	1					
ANR	96024	ExpressionStatement	* ptr ++ = 0	386:12:12247:12255	95677	20	True				
ANR	96025	AssignmentExpression	* ptr ++ = 0		95677	0		=			
ANR	96026	UnaryOperationExpression	* ptr ++		95677	0					
ANR	96027	UnaryOperator	*		95677	0					
ANR	96028	PostIncDecOperationExpression	ptr ++		95677	1					
ANR	96029	Identifier	ptr		95677	0					
ANR	96030	IncDec	++		95677	1					
ANR	96031	PrimaryExpression	0		95677	1					
ANR	96032	ReturnStatement	return out ;	387:1:12258:12268	95677	21	True				
ANR	96033	Identifier	out		95677	0					
ANR	96034	ReturnType	static char *		95677	1					
ANR	96035	Identifier	print_array		95677	2					
ANR	96036	ParameterList	"cJSON * item , int depth , int fmt"		95677	3					
ANR	96037	Parameter	cJSON * item	340:25:11055:11065	95677	0	True				
ANR	96038	ParameterType	cJSON *		95677	0					
ANR	96039	Identifier	item		95677	1					
ANR	96040	Parameter	int depth	340:37:11067:11075	95677	1	True				
ANR	96041	ParameterType	int		95677	0					
ANR	96042	Identifier	depth		95677	1					
ANR	96043	Parameter	int fmt	340:47:11077:11083	95677	2	True				
ANR	96044	ParameterType	int		95677	0					
ANR	96045	Identifier	fmt		95677	1					
ANR	96046	CFGEntryNode	ENTRY		95677		True				
ANR	96047	CFGExitNode	EXIT		95677		True				
ANR	96048	Symbol	ret		95677						
ANR	96049	Symbol	item		95677						
ANR	96050	Symbol	* child		95677						
ANR	96051	Symbol	child -> next		95677						
ANR	96052	Symbol	* ptr ++		95677						
ANR	96053	Symbol	i		95677						
ANR	96054	Symbol	fmt		95677						
ANR	96055	Symbol	cJSON_malloc		95677						
ANR	96056	Symbol	print_value		95677						
ANR	96057	Symbol	ptr		95677						
ANR	96058	Symbol	out		95677						
ANR	96059	Symbol	fail		95677						
ANR	96060	Symbol	strlen		95677						
ANR	96061	Symbol	entries		95677						
ANR	96062	Symbol	depth		95677						
ANR	96063	Symbol	* i		95677						
ANR	96064	Symbol	len		95677						
ANR	96065	Symbol	* item		95677						
ANR	96066	Symbol	* entries		95677						
ANR	96067	Symbol	* out		95677						
ANR	96068	Symbol	* ptr		95677						
ANR	96069	Symbol	item -> child		95677						
ANR	96070	Symbol	numentries		95677						
ANR	96071	Symbol	child		95677						
ANR	96072	Function	parse_object	391:0:12311:13464							
ANR	96073	FunctionDef	"parse_object (cJSON * item , const char * value)"		96072	0					
ANR	96074	CompoundStatement		392:0:12374:13464	96072	0					
ANR	96075	IdentifierDeclStatement	cJSON * child ;	393:1:12377:12389	96072	0	True				
ANR	96076	IdentifierDecl	* child		96072	0					
ANR	96077	IdentifierDeclType	cJSON *		96072	0					
ANR	96078	Identifier	child		96072	1					
ANR	96079	IfStatement	if ( * value != '{' )		96072	1					
ANR	96080	Condition	* value != '{'	394:5:12396:12406	96072	0	True				
ANR	96081	EqualityExpression	* value != '{'		96072	0		!=			
ANR	96082	UnaryOperationExpression	* value		96072	0					
ANR	96083	UnaryOperator	*		96072	0					
ANR	96084	Identifier	value		96072	1					
ANR	96085	PrimaryExpression	'{'		96072	1					
ANR	96086	CompoundStatement		3:18:34:34	96072	1					
ANR	96087	ExpressionStatement	ep = value	394:19:12410:12418	96072	0	True				
ANR	96088	AssignmentExpression	ep = value		96072	0		=			
ANR	96089	Identifier	ep		96072	0					
ANR	96090	Identifier	value		96072	1					
ANR	96091	ReturnStatement	return 0 ;	394:28:12419:12427	96072	1	True				
ANR	96092	PrimaryExpression	0		96072	0					
ANR	96093	ExpressionStatement	item -> type = cJSON_Object	396:1:12454:12477	96072	2	True				
ANR	96094	AssignmentExpression	item -> type = cJSON_Object		96072	0		=			
ANR	96095	PtrMemberAccess	item -> type		96072	0					
ANR	96096	Identifier	item		96072	0					
ANR	96097	Identifier	type		96072	1					
ANR	96098	Identifier	cJSON_Object		96072	1					
ANR	96099	ExpressionStatement	value = skip ( value + 1 )	397:1:12480:12499	96072	3	True				
ANR	96100	AssignmentExpression	value = skip ( value + 1 )		96072	0		=			
ANR	96101	Identifier	value		96072	0					
ANR	96102	CallExpression	skip ( value + 1 )		96072	1					
ANR	96103	Callee	skip		96072	0					
ANR	96104	Identifier	skip		96072	0					
ANR	96105	ArgumentList	value + 1		96072	1					
ANR	96106	Argument	value + 1		96072	0					
ANR	96107	AdditiveExpression	value + 1		96072	0		+			
ANR	96108	Identifier	value		96072	0					
ANR	96109	PrimaryExpression	1		96072	1					
ANR	96110	IfStatement	if ( * value == '}' )		96072	4					
ANR	96111	Condition	* value == '}'	398:5:12506:12516	96072	0	True				
ANR	96112	EqualityExpression	* value == '}'		96072	0		==			
ANR	96113	UnaryOperationExpression	* value		96072	0					
ANR	96114	UnaryOperator	*		96072	0					
ANR	96115	Identifier	value		96072	1					
ANR	96116	PrimaryExpression	'}'		96072	1					
ANR	96117	ReturnStatement	return value + 1 ;	398:18:12519:12533	96072	1	True				
ANR	96118	AdditiveExpression	value + 1		96072	0		+			
ANR	96119	Identifier	value		96072	0					
ANR	96120	PrimaryExpression	1		96072	1					
ANR	96121	ExpressionStatement	item -> child = child = cJSON_New_Item ( )	400:1:12557:12591	96072	5	True				
ANR	96122	AssignmentExpression	item -> child = child = cJSON_New_Item ( )		96072	0		=			
ANR	96123	PtrMemberAccess	item -> child		96072	0					
ANR	96124	Identifier	item		96072	0					
ANR	96125	Identifier	child		96072	1					
ANR	96126	AssignmentExpression	child = cJSON_New_Item ( )		96072	1		=			
ANR	96127	Identifier	child		96072	0					
ANR	96128	CallExpression	cJSON_New_Item ( )		96072	1					
ANR	96129	Callee	cJSON_New_Item		96072	0					
ANR	96130	Identifier	cJSON_New_Item		96072	0					
ANR	96131	ArgumentList			96072	1					
ANR	96132	IfStatement	if ( ! item -> child )		96072	6					
ANR	96133	Condition	! item -> child	401:5:12598:12609	96072	0	True				
ANR	96134	UnaryOperationExpression	! item -> child		96072	0					
ANR	96135	UnaryOperator	!		96072	0					
ANR	96136	PtrMemberAccess	item -> child		96072	1					
ANR	96137	Identifier	item		96072	0					
ANR	96138	Identifier	child		96072	1					
ANR	96139	ReturnStatement	return 0 ;	401:19:12612:12620	96072	1	True				
ANR	96140	PrimaryExpression	0		96072	0					
ANR	96141	ExpressionStatement	"value = skip ( parse_string ( child , skip ( value ) ) )"	402:1:12623:12666	96072	7	True				
ANR	96142	AssignmentExpression	"value = skip ( parse_string ( child , skip ( value ) ) )"		96072	0		=			
ANR	96143	Identifier	value		96072	0					
ANR	96144	CallExpression	"skip ( parse_string ( child , skip ( value ) ) )"		96072	1					
ANR	96145	Callee	skip		96072	0					
ANR	96146	Identifier	skip		96072	0					
ANR	96147	ArgumentList	"parse_string ( child , skip ( value ) )"		96072	1					
ANR	96148	Argument	"parse_string ( child , skip ( value ) )"		96072	0					
ANR	96149	CallExpression	"parse_string ( child , skip ( value ) )"		96072	0					
ANR	96150	Callee	parse_string		96072	0					
ANR	96151	Identifier	parse_string		96072	0					
ANR	96152	ArgumentList	child		96072	1					
ANR	96153	Argument	child		96072	0					
ANR	96154	Identifier	child		96072	0					
ANR	96155	Argument	skip ( value )		96072	1					
ANR	96156	CallExpression	skip ( value )		96072	0					
ANR	96157	Callee	skip		96072	0					
ANR	96158	Identifier	skip		96072	0					
ANR	96159	ArgumentList	value		96072	1					
ANR	96160	Argument	value		96072	0					
ANR	96161	Identifier	value		96072	0					
ANR	96162	IfStatement	if ( ! value )		96072	8					
ANR	96163	Condition	! value	403:5:12673:12678	96072	0	True				
ANR	96164	UnaryOperationExpression	! value		96072	0					
ANR	96165	UnaryOperator	!		96072	0					
ANR	96166	Identifier	value		96072	1					
ANR	96167	ReturnStatement	return 0 ;	403:13:12681:12689	96072	1	True				
ANR	96168	PrimaryExpression	0		96072	0					
ANR	96169	ExpressionStatement	child -> string = child -> valuestring	404:1:12692:12724	96072	9	True				
ANR	96170	AssignmentExpression	child -> string = child -> valuestring		96072	0		=			
ANR	96171	PtrMemberAccess	child -> string		96072	0					
ANR	96172	Identifier	child		96072	0					
ANR	96173	Identifier	string		96072	1					
ANR	96174	PtrMemberAccess	child -> valuestring		96072	1					
ANR	96175	Identifier	child		96072	0					
ANR	96176	Identifier	valuestring		96072	1					
ANR	96177	ExpressionStatement	child -> valuestring = 0	404:34:12725:12745	96072	10	True				
ANR	96178	AssignmentExpression	child -> valuestring = 0		96072	0		=			
ANR	96179	PtrMemberAccess	child -> valuestring		96072	0					
ANR	96180	Identifier	child		96072	0					
ANR	96181	Identifier	valuestring		96072	1					
ANR	96182	PrimaryExpression	0		96072	1					
ANR	96183	IfStatement	if ( * value != ':' )		96072	11					
ANR	96184	Condition	* value != ':'	405:5:12752:12762	96072	0	True				
ANR	96185	EqualityExpression	* value != ':'		96072	0		!=			
ANR	96186	UnaryOperationExpression	* value		96072	0					
ANR	96187	UnaryOperator	*		96072	0					
ANR	96188	Identifier	value		96072	1					
ANR	96189	PrimaryExpression	':'		96072	1					
ANR	96190	CompoundStatement		14:18:390:390	96072	1					
ANR	96191	ExpressionStatement	ep = value	405:19:12766:12774	96072	0	True				
ANR	96192	AssignmentExpression	ep = value		96072	0		=			
ANR	96193	Identifier	ep		96072	0					
ANR	96194	Identifier	value		96072	1					
ANR	96195	ReturnStatement	return 0 ;	405:28:12775:12783	96072	1	True				
ANR	96196	PrimaryExpression	0		96072	0					
ANR	96197	ExpressionStatement	"value = skip ( parse_value ( child , skip ( value + 1 ) ) )"	406:1:12799:12843	96072	12	True				
ANR	96198	AssignmentExpression	"value = skip ( parse_value ( child , skip ( value + 1 ) ) )"		96072	0		=			
ANR	96199	Identifier	value		96072	0					
ANR	96200	CallExpression	"skip ( parse_value ( child , skip ( value + 1 ) ) )"		96072	1					
ANR	96201	Callee	skip		96072	0					
ANR	96202	Identifier	skip		96072	0					
ANR	96203	ArgumentList	"parse_value ( child , skip ( value + 1 ) )"		96072	1					
ANR	96204	Argument	"parse_value ( child , skip ( value + 1 ) )"		96072	0					
ANR	96205	CallExpression	"parse_value ( child , skip ( value + 1 ) )"		96072	0					
ANR	96206	Callee	parse_value		96072	0					
ANR	96207	Identifier	parse_value		96072	0					
ANR	96208	ArgumentList	child		96072	1					
ANR	96209	Argument	child		96072	0					
ANR	96210	Identifier	child		96072	0					
ANR	96211	Argument	skip ( value + 1 )		96072	1					
ANR	96212	CallExpression	skip ( value + 1 )		96072	0					
ANR	96213	Callee	skip		96072	0					
ANR	96214	Identifier	skip		96072	0					
ANR	96215	ArgumentList	value + 1		96072	1					
ANR	96216	Argument	value + 1		96072	0					
ANR	96217	AdditiveExpression	value + 1		96072	0		+			
ANR	96218	Identifier	value		96072	0					
ANR	96219	PrimaryExpression	1		96072	1					
ANR	96220	IfStatement	if ( ! value )		96072	13					
ANR	96221	Condition	! value	407:5:12889:12894	96072	0	True				
ANR	96222	UnaryOperationExpression	! value		96072	0					
ANR	96223	UnaryOperator	!		96072	0					
ANR	96224	Identifier	value		96072	1					
ANR	96225	ReturnStatement	return 0 ;	407:13:12897:12905	96072	1	True				
ANR	96226	PrimaryExpression	0		96072	0					
ANR	96227	WhileStatement	"while ( * value == ',' )"		96072	14					
ANR	96228	Condition	"* value == ','"	409:8:12917:12927	96072	0	True				
ANR	96229	EqualityExpression	"* value == ','"		96072	0		==			
ANR	96230	UnaryOperationExpression	* value		96072	0					
ANR	96231	UnaryOperator	*		96072	0					
ANR	96232	Identifier	value		96072	1					
ANR	96233	PrimaryExpression	"','"		96072	1					
ANR	96234	CompoundStatement		20:2:560:575	96072	1					
ANR	96235	IdentifierDeclStatement	cJSON * new_item ;	411:2:12935:12950	96072	0	True				
ANR	96236	IdentifierDecl	* new_item		96072	0					
ANR	96237	IdentifierDeclType	cJSON *		96072	0					
ANR	96238	Identifier	new_item		96072	1					
ANR	96239	IfStatement	if ( ! ( new_item = cJSON_New_Item ( ) ) )		96072	1					
ANR	96240	Condition	! ( new_item = cJSON_New_Item ( ) )	412:6:12958:12985	96072	0	True				
ANR	96241	UnaryOperationExpression	! ( new_item = cJSON_New_Item ( ) )		96072	0					
ANR	96242	UnaryOperator	!		96072	0					
ANR	96243	AssignmentExpression	new_item = cJSON_New_Item ( )		96072	1		=			
ANR	96244	Identifier	new_item		96072	0					
ANR	96245	CallExpression	cJSON_New_Item ( )		96072	1					
ANR	96246	Callee	cJSON_New_Item		96072	0					
ANR	96247	Identifier	cJSON_New_Item		96072	0					
ANR	96248	ArgumentList			96072	1					
ANR	96249	ReturnStatement	return 0 ;	412:36:12988:12996	96072	1	True				
ANR	96250	PrimaryExpression	0		96072	0					
ANR	96251	ExpressionStatement	child -> next = new_item	413:2:13018:13038	96072	2	True				
ANR	96252	AssignmentExpression	child -> next = new_item		96072	0		=			
ANR	96253	PtrMemberAccess	child -> next		96072	0					
ANR	96254	Identifier	child		96072	0					
ANR	96255	Identifier	next		96072	1					
ANR	96256	Identifier	new_item		96072	1					
ANR	96257	ExpressionStatement	new_item -> prev = child	413:23:13039:13059	96072	3	True				
ANR	96258	AssignmentExpression	new_item -> prev = child		96072	0		=			
ANR	96259	PtrMemberAccess	new_item -> prev		96072	0					
ANR	96260	Identifier	new_item		96072	0					
ANR	96261	Identifier	prev		96072	1					
ANR	96262	Identifier	child		96072	1					
ANR	96263	ExpressionStatement	child = new_item	413:44:13060:13074	96072	4	True				
ANR	96264	AssignmentExpression	child = new_item		96072	0		=			
ANR	96265	Identifier	child		96072	0					
ANR	96266	Identifier	new_item		96072	1					
ANR	96267	ExpressionStatement	"value = skip ( parse_string ( child , skip ( value + 1 ) ) )"	414:2:13078:13123	96072	5	True				
ANR	96268	AssignmentExpression	"value = skip ( parse_string ( child , skip ( value + 1 ) ) )"		96072	0		=			
ANR	96269	Identifier	value		96072	0					
ANR	96270	CallExpression	"skip ( parse_string ( child , skip ( value + 1 ) ) )"		96072	1					
ANR	96271	Callee	skip		96072	0					
ANR	96272	Identifier	skip		96072	0					
ANR	96273	ArgumentList	"parse_string ( child , skip ( value + 1 ) )"		96072	1					
ANR	96274	Argument	"parse_string ( child , skip ( value + 1 ) )"		96072	0					
ANR	96275	CallExpression	"parse_string ( child , skip ( value + 1 ) )"		96072	0					
ANR	96276	Callee	parse_string		96072	0					
ANR	96277	Identifier	parse_string		96072	0					
ANR	96278	ArgumentList	child		96072	1					
ANR	96279	Argument	child		96072	0					
ANR	96280	Identifier	child		96072	0					
ANR	96281	Argument	skip ( value + 1 )		96072	1					
ANR	96282	CallExpression	skip ( value + 1 )		96072	0					
ANR	96283	Callee	skip		96072	0					
ANR	96284	Identifier	skip		96072	0					
ANR	96285	ArgumentList	value + 1		96072	1					
ANR	96286	Argument	value + 1		96072	0					
ANR	96287	AdditiveExpression	value + 1		96072	0		+			
ANR	96288	Identifier	value		96072	0					
ANR	96289	PrimaryExpression	1		96072	1					
ANR	96290	IfStatement	if ( ! value )		96072	6					
ANR	96291	Condition	! value	415:6:13131:13136	96072	0	True				
ANR	96292	UnaryOperationExpression	! value		96072	0					
ANR	96293	UnaryOperator	!		96072	0					
ANR	96294	Identifier	value		96072	1					
ANR	96295	ReturnStatement	return 0 ;	415:14:13139:13147	96072	1	True				
ANR	96296	PrimaryExpression	0		96072	0					
ANR	96297	ExpressionStatement	child -> string = child -> valuestring	416:2:13151:13183	96072	7	True				
ANR	96298	AssignmentExpression	child -> string = child -> valuestring		96072	0		=			
ANR	96299	PtrMemberAccess	child -> string		96072	0					
ANR	96300	Identifier	child		96072	0					
ANR	96301	Identifier	string		96072	1					
ANR	96302	PtrMemberAccess	child -> valuestring		96072	1					
ANR	96303	Identifier	child		96072	0					
ANR	96304	Identifier	valuestring		96072	1					
ANR	96305	ExpressionStatement	child -> valuestring = 0	416:35:13184:13204	96072	8	True				
ANR	96306	AssignmentExpression	child -> valuestring = 0		96072	0		=			
ANR	96307	PtrMemberAccess	child -> valuestring		96072	0					
ANR	96308	Identifier	child		96072	0					
ANR	96309	Identifier	valuestring		96072	1					
ANR	96310	PrimaryExpression	0		96072	1					
ANR	96311	IfStatement	if ( * value != ':' )		96072	9					
ANR	96312	Condition	* value != ':'	417:6:13212:13222	96072	0	True				
ANR	96313	EqualityExpression	* value != ':'		96072	0		!=			
ANR	96314	UnaryOperationExpression	* value		96072	0					
ANR	96315	UnaryOperator	*		96072	0					
ANR	96316	Identifier	value		96072	1					
ANR	96317	PrimaryExpression	':'		96072	1					
ANR	96318	CompoundStatement		26:19:850:850	96072	1					
ANR	96319	ExpressionStatement	ep = value	417:20:13226:13234	96072	0	True				
ANR	96320	AssignmentExpression	ep = value		96072	0		=			
ANR	96321	Identifier	ep		96072	0					
ANR	96322	Identifier	value		96072	1					
ANR	96323	ReturnStatement	return 0 ;	417:29:13235:13243	96072	1	True				
ANR	96324	PrimaryExpression	0		96072	0					
ANR	96325	ExpressionStatement	"value = skip ( parse_value ( child , skip ( value + 1 ) ) )"	418:2:13260:13304	96072	10	True				
ANR	96326	AssignmentExpression	"value = skip ( parse_value ( child , skip ( value + 1 ) ) )"		96072	0		=			
ANR	96327	Identifier	value		96072	0					
ANR	96328	CallExpression	"skip ( parse_value ( child , skip ( value + 1 ) ) )"		96072	1					
ANR	96329	Callee	skip		96072	0					
ANR	96330	Identifier	skip		96072	0					
ANR	96331	ArgumentList	"parse_value ( child , skip ( value + 1 ) )"		96072	1					
ANR	96332	Argument	"parse_value ( child , skip ( value + 1 ) )"		96072	0					
ANR	96333	CallExpression	"parse_value ( child , skip ( value + 1 ) )"		96072	0					
ANR	96334	Callee	parse_value		96072	0					
ANR	96335	Identifier	parse_value		96072	0					
ANR	96336	ArgumentList	child		96072	1					
ANR	96337	Argument	child		96072	0					
ANR	96338	Identifier	child		96072	0					
ANR	96339	Argument	skip ( value + 1 )		96072	1					
ANR	96340	CallExpression	skip ( value + 1 )		96072	0					
ANR	96341	Callee	skip		96072	0					
ANR	96342	Identifier	skip		96072	0					
ANR	96343	ArgumentList	value + 1		96072	1					
ANR	96344	Argument	value + 1		96072	0					
ANR	96345	AdditiveExpression	value + 1		96072	0		+			
ANR	96346	Identifier	value		96072	0					
ANR	96347	PrimaryExpression	1		96072	1					
ANR	96348	IfStatement	if ( ! value )		96072	11					
ANR	96349	Condition	! value	419:6:13351:13356	96072	0	True				
ANR	96350	UnaryOperationExpression	! value		96072	0					
ANR	96351	UnaryOperator	!		96072	0					
ANR	96352	Identifier	value		96072	1					
ANR	96353	ReturnStatement	return 0 ;	419:14:13359:13367	96072	1	True				
ANR	96354	PrimaryExpression	0		96072	0					
ANR	96355	IfStatement	if ( * value == '}' )		96072	15					
ANR	96356	Condition	* value == '}'	422:5:13379:13389	96072	0	True				
ANR	96357	EqualityExpression	* value == '}'		96072	0		==			
ANR	96358	UnaryOperationExpression	* value		96072	0					
ANR	96359	UnaryOperator	*		96072	0					
ANR	96360	Identifier	value		96072	1					
ANR	96361	PrimaryExpression	'}'		96072	1					
ANR	96362	ReturnStatement	return value + 1 ;	422:18:13392:13406	96072	1	True				
ANR	96363	AdditiveExpression	value + 1		96072	0		+			
ANR	96364	Identifier	value		96072	0					
ANR	96365	PrimaryExpression	1		96072	1					
ANR	96366	ExpressionStatement	ep = value	423:1:13428:13436	96072	16	True				
ANR	96367	AssignmentExpression	ep = value		96072	0		=			
ANR	96368	Identifier	ep		96072	0					
ANR	96369	Identifier	value		96072	1					
ANR	96370	ReturnStatement	return 0 ;	423:10:13437:13445	96072	17	True				
ANR	96371	PrimaryExpression	0		96072	0					
ANR	96372	ReturnType	static const char *		96072	1					
ANR	96373	Identifier	parse_object		96072	2					
ANR	96374	ParameterList	"cJSON * item , const char * value"		96072	3					
ANR	96375	Parameter	cJSON * item	391:32:12343:12353	96072	0	True				
ANR	96376	ParameterType	cJSON *		96072	0					
ANR	96377	Identifier	item		96072	1					
ANR	96378	Parameter	const char * value	391:44:12355:12371	96072	1	True				
ANR	96379	ParameterType	const char *		96072	0					
ANR	96380	Identifier	value		96072	1					
ANR	96381	CFGEntryNode	ENTRY		96072		True				
ANR	96382	CFGExitNode	EXIT		96072		True				
ANR	96383	Symbol	new_item		96072						
ANR	96384	Symbol	item		96072						
ANR	96385	Symbol	item -> type		96072						
ANR	96386	Symbol	* child		96072						
ANR	96387	Symbol	child -> next		96072						
ANR	96388	Symbol	child -> valuestring		96072						
ANR	96389	Symbol	parse_value		96072						
ANR	96390	Symbol	* new_item		96072						
ANR	96391	Symbol	new_item -> prev		96072						
ANR	96392	Symbol	child -> string		96072						
ANR	96393	Symbol	skip		96072						
ANR	96394	Symbol	ep		96072						
ANR	96395	Symbol	cJSON_New_Item		96072						
ANR	96396	Symbol	parse_string		96072						
ANR	96397	Symbol	* value		96072						
ANR	96398	Symbol	* item		96072						
ANR	96399	Symbol	item -> child		96072						
ANR	96400	Symbol	value		96072						
ANR	96401	Symbol	cJSON_Object		96072						
ANR	96402	Symbol	child		96072						
ANR	96403	Function	print_object	427:0:13499:15234							
ANR	96404	FunctionDef	"print_object (cJSON * item , int depth , int fmt)"		96403	0					
ANR	96405	CompoundStatement		428:0:13556:15234	96403	0					
ANR	96406	IdentifierDeclStatement	"char * * entries = 0 , * * names = 0 ;"	429:1:13559:13585	96403	0	True				
ANR	96407	IdentifierDecl	* * entries = 0		96403	0					
ANR	96408	IdentifierDeclType	char * *		96403	0					
ANR	96409	Identifier	entries		96403	1					
ANR	96410	AssignmentExpression	* * entries = 0		96403	2		=			
ANR	96411	Identifier	entries		96403	0					
ANR	96412	PrimaryExpression	0		96403	1					
ANR	96413	IdentifierDecl	* * names = 0		96403	1					
ANR	96414	IdentifierDeclType	char * *		96403	0					
ANR	96415	Identifier	names		96403	1					
ANR	96416	AssignmentExpression	* * names = 0		96403	2		=			
ANR	96417	Identifier	names		96403	0					
ANR	96418	PrimaryExpression	0		96403	1					
ANR	96419	IdentifierDeclStatement	"char * out = 0 , * ptr , * ret , * str ;"	430:1:13588:13614	96403	1	True				
ANR	96420	IdentifierDecl	* out = 0		96403	0					
ANR	96421	IdentifierDeclType	char *		96403	0					
ANR	96422	Identifier	out		96403	1					
ANR	96423	AssignmentExpression	* out = 0		96403	2		=			
ANR	96424	Identifier	out		96403	0					
ANR	96425	PrimaryExpression	0		96403	1					
ANR	96426	IdentifierDecl	* ptr		96403	1					
ANR	96427	IdentifierDeclType	char *		96403	0					
ANR	96428	Identifier	ptr		96403	1					
ANR	96429	IdentifierDecl	* ret		96403	2					
ANR	96430	IdentifierDeclType	char *		96403	0					
ANR	96431	Identifier	ret		96403	1					
ANR	96432	IdentifierDecl	* str		96403	3					
ANR	96433	IdentifierDeclType	char *		96403	0					
ANR	96434	Identifier	str		96403	1					
ANR	96435	IdentifierDeclStatement	"int len = 7 , i = 0 , j ;"	430:28:13615:13630	96403	2	True				
ANR	96436	IdentifierDecl	len = 7		96403	0					
ANR	96437	IdentifierDeclType	int		96403	0					
ANR	96438	Identifier	len		96403	1					
ANR	96439	AssignmentExpression	len = 7		96403	2		=			
ANR	96440	Identifier	len		96403	0					
ANR	96441	PrimaryExpression	7		96403	1					
ANR	96442	IdentifierDecl	i = 0		96403	1					
ANR	96443	IdentifierDeclType	int		96403	0					
ANR	96444	Identifier	i		96403	1					
ANR	96445	AssignmentExpression	i = 0		96403	2		=			
ANR	96446	Identifier	i		96403	0					
ANR	96447	PrimaryExpression	0		96403	1					
ANR	96448	IdentifierDecl	j		96403	2					
ANR	96449	IdentifierDeclType	int		96403	0					
ANR	96450	Identifier	j		96403	1					
ANR	96451	IdentifierDeclStatement	cJSON * child = item -> child ;	431:1:13633:13657	96403	3	True				
ANR	96452	IdentifierDecl	* child = item -> child		96403	0					
ANR	96453	IdentifierDeclType	cJSON *		96403	0					
ANR	96454	Identifier	child		96403	1					
ANR	96455	AssignmentExpression	* child = item -> child		96403	2		=			
ANR	96456	Identifier	child		96403	0					
ANR	96457	PtrMemberAccess	item -> child		96403	1					
ANR	96458	Identifier	item		96403	0					
ANR	96459	Identifier	child		96403	1					
ANR	96460	IdentifierDeclStatement	"int numentries = 0 , fail = 0 ;"	432:1:13660:13683	96403	4	True				
ANR	96461	IdentifierDecl	numentries = 0		96403	0					
ANR	96462	IdentifierDeclType	int		96403	0					
ANR	96463	Identifier	numentries		96403	1					
ANR	96464	AssignmentExpression	numentries = 0		96403	2		=			
ANR	96465	Identifier	numentries		96403	0					
ANR	96466	PrimaryExpression	0		96403	1					
ANR	96467	IdentifierDecl	fail = 0		96403	1					
ANR	96468	IdentifierDeclType	int		96403	0					
ANR	96469	Identifier	fail		96403	1					
ANR	96470	AssignmentExpression	fail = 0		96403	2		=			
ANR	96471	Identifier	fail		96403	0					
ANR	96472	PrimaryExpression	0		96403	1					
ANR	96473	WhileStatement	while ( child )		96403	5					
ANR	96474	Condition	child	434:8:13729:13733	96403	0	True				
ANR	96475	Identifier	child		96403	0					
ANR	96476	ExpressionStatement	"numentries ++ , child = child -> next"	434:15:13736:13766	96403	1	True				
ANR	96477	Expression	"numentries ++ , child = child -> next"		96403	0					
ANR	96478	PostIncDecOperationExpression	numentries ++		96403	0					
ANR	96479	Identifier	numentries		96403	0					
ANR	96480	IncDec	++		96403	1					
ANR	96481	AssignmentExpression	child = child -> next		96403	1		=			
ANR	96482	Identifier	child		96403	0					
ANR	96483	PtrMemberAccess	child -> next		96403	1					
ANR	96484	Identifier	child		96403	0					
ANR	96485	Identifier	next		96403	1					
ANR	96486	ExpressionStatement	entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) )	436:1:13821:13875	96403	6	True				
ANR	96487	AssignmentExpression	entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) )		96403	0		=			
ANR	96488	Identifier	entries		96403	0					
ANR	96489	CastExpression	( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) )		96403	1					
ANR	96490	CastTarget	char * *		96403	0					
ANR	96491	CallExpression	cJSON_malloc ( numentries * sizeof ( char * ) )		96403	1					
ANR	96492	Callee	cJSON_malloc		96403	0					
ANR	96493	Identifier	cJSON_malloc		96403	0					
ANR	96494	ArgumentList	numentries * sizeof ( char * )		96403	1					
ANR	96495	Argument	numentries * sizeof ( char * )		96403	0					
ANR	96496	MultiplicativeExpression	numentries * sizeof ( char * )		96403	0		*			
ANR	96497	Identifier	numentries		96403	0					
ANR	96498	SizeofExpression	sizeof ( char * )		96403	1					
ANR	96499	Sizeof	sizeof		96403	0					
ANR	96500	SizeofOperand	char *		96403	1					
ANR	96501	IfStatement	if ( ! entries )		96403	7					
ANR	96502	Condition	! entries	437:5:13882:13889	96403	0	True				
ANR	96503	UnaryOperationExpression	! entries		96403	0					
ANR	96504	UnaryOperator	!		96403	0					
ANR	96505	Identifier	entries		96403	1					
ANR	96506	ReturnStatement	return 0 ;	437:15:13892:13900	96403	1	True				
ANR	96507	PrimaryExpression	0		96403	0					
ANR	96508	ExpressionStatement	names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) )	438:1:13903:13955	96403	8	True				
ANR	96509	AssignmentExpression	names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) )		96403	0		=			
ANR	96510	Identifier	names		96403	0					
ANR	96511	CastExpression	( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) )		96403	1					
ANR	96512	CastTarget	char * *		96403	0					
ANR	96513	CallExpression	cJSON_malloc ( numentries * sizeof ( char * ) )		96403	1					
ANR	96514	Callee	cJSON_malloc		96403	0					
ANR	96515	Identifier	cJSON_malloc		96403	0					
ANR	96516	ArgumentList	numentries * sizeof ( char * )		96403	1					
ANR	96517	Argument	numentries * sizeof ( char * )		96403	0					
ANR	96518	MultiplicativeExpression	numentries * sizeof ( char * )		96403	0		*			
ANR	96519	Identifier	numentries		96403	0					
ANR	96520	SizeofExpression	sizeof ( char * )		96403	1					
ANR	96521	Sizeof	sizeof		96403	0					
ANR	96522	SizeofOperand	char *		96403	1					
ANR	96523	IfStatement	if ( ! names )		96403	9					
ANR	96524	Condition	! names	439:5:13962:13967	96403	0	True				
ANR	96525	UnaryOperationExpression	! names		96403	0					
ANR	96526	UnaryOperator	!		96403	0					
ANR	96527	Identifier	names		96403	1					
ANR	96528	CompoundStatement		12:13:413:413	96403	1					
ANR	96529	ExpressionStatement	cJSON_free ( entries )	439:14:13971:13990	96403	0	True				
ANR	96530	CallExpression	cJSON_free ( entries )		96403	0					
ANR	96531	Callee	cJSON_free		96403	0					
ANR	96532	Identifier	cJSON_free		96403	0					
ANR	96533	ArgumentList	entries		96403	1					
ANR	96534	Argument	entries		96403	0					
ANR	96535	Identifier	entries		96403	0					
ANR	96536	ReturnStatement	return 0 ;	439:34:13991:13999	96403	1	True				
ANR	96537	PrimaryExpression	0		96403	0					
ANR	96538	ExpressionStatement	"memset ( entries , 0 , sizeof ( char * ) * numentries )"	440:1:14003:14045	96403	10	True				
ANR	96539	CallExpression	"memset ( entries , 0 , sizeof ( char * ) * numentries )"		96403	0					
ANR	96540	Callee	memset		96403	0					
ANR	96541	Identifier	memset		96403	0					
ANR	96542	ArgumentList	entries		96403	1					
ANR	96543	Argument	entries		96403	0					
ANR	96544	Identifier	entries		96403	0					
ANR	96545	Argument	0		96403	1					
ANR	96546	PrimaryExpression	0		96403	0					
ANR	96547	Argument	sizeof ( char * ) * numentries		96403	2					
ANR	96548	MultiplicativeExpression	sizeof ( char * ) * numentries		96403	0		*			
ANR	96549	SizeofExpression	sizeof ( char * )		96403	0					
ANR	96550	Sizeof	sizeof		96403	0					
ANR	96551	SizeofOperand	char *		96403	1					
ANR	96552	Identifier	numentries		96403	1					
ANR	96553	ExpressionStatement	"memset ( names , 0 , sizeof ( char * ) * numentries )"	441:1:14048:14088	96403	11	True				
ANR	96554	CallExpression	"memset ( names , 0 , sizeof ( char * ) * numentries )"		96403	0					
ANR	96555	Callee	memset		96403	0					
ANR	96556	Identifier	memset		96403	0					
ANR	96557	ArgumentList	names		96403	1					
ANR	96558	Argument	names		96403	0					
ANR	96559	Identifier	names		96403	0					
ANR	96560	Argument	0		96403	1					
ANR	96561	PrimaryExpression	0		96403	0					
ANR	96562	Argument	sizeof ( char * ) * numentries		96403	2					
ANR	96563	MultiplicativeExpression	sizeof ( char * ) * numentries		96403	0		*			
ANR	96564	SizeofExpression	sizeof ( char * )		96403	0					
ANR	96565	Sizeof	sizeof		96403	0					
ANR	96566	SizeofOperand	char *		96403	1					
ANR	96567	Identifier	numentries		96403	1					
ANR	96568	ExpressionStatement	child = item -> child	444:1:14140:14157	96403	12	True				
ANR	96569	AssignmentExpression	child = item -> child		96403	0		=			
ANR	96570	Identifier	child		96403	0					
ANR	96571	PtrMemberAccess	item -> child		96403	1					
ANR	96572	Identifier	item		96403	0					
ANR	96573	Identifier	child		96403	1					
ANR	96574	ExpressionStatement	depth ++	444:19:14158:14165	96403	13	True				
ANR	96575	PostIncDecOperationExpression	depth ++		96403	0					
ANR	96576	Identifier	depth		96403	0					
ANR	96577	IncDec	++		96403	1					
ANR	96578	IfStatement	if ( fmt )		96403	14					
ANR	96579	Condition	fmt	444:31:14170:14172	96403	0	True				
ANR	96580	Identifier	fmt		96403	0					
ANR	96581	ExpressionStatement	len += depth	444:36:14175:14185	96403	1	True				
ANR	96582	AssignmentExpression	len += depth		96403	0		+=			
ANR	96583	Identifier	len		96403	0					
ANR	96584	Identifier	depth		96403	1					
ANR	96585	WhileStatement	while ( child )		96403	15					
ANR	96586	Condition	child	445:8:14195:14199	96403	0	True				
ANR	96587	Identifier	child		96403	0					
ANR	96588	CompoundStatement		19:1:646:646	96403	1					
ANR	96589	ExpressionStatement	names [ i ] = str = print_string_ptr ( child -> string )	447:2:14207:14251	96403	0	True				
ANR	96590	AssignmentExpression	names [ i ] = str = print_string_ptr ( child -> string )		96403	0		=			
ANR	96591	ArrayIndexing	names [ i ]		96403	0					
ANR	96592	Identifier	names		96403	0					
ANR	96593	Identifier	i		96403	1					
ANR	96594	AssignmentExpression	str = print_string_ptr ( child -> string )		96403	1		=			
ANR	96595	Identifier	str		96403	0					
ANR	96596	CallExpression	print_string_ptr ( child -> string )		96403	1					
ANR	96597	Callee	print_string_ptr		96403	0					
ANR	96598	Identifier	print_string_ptr		96403	0					
ANR	96599	ArgumentList	child -> string		96403	1					
ANR	96600	Argument	child -> string		96403	0					
ANR	96601	PtrMemberAccess	child -> string		96403	0					
ANR	96602	Identifier	child		96403	0					
ANR	96603	Identifier	string		96403	1					
ANR	96604	ExpressionStatement	"entries [ i ++ ] = ret = print_value ( child , depth , fmt )"	448:2:14255:14300	96403	1	True				
ANR	96605	AssignmentExpression	"entries [ i ++ ] = ret = print_value ( child , depth , fmt )"		96403	0		=			
ANR	96606	ArrayIndexing	entries [ i ++ ]		96403	0					
ANR	96607	Identifier	entries		96403	0					
ANR	96608	PostIncDecOperationExpression	i ++		96403	1					
ANR	96609	Identifier	i		96403	0					
ANR	96610	IncDec	++		96403	1					
ANR	96611	AssignmentExpression	"ret = print_value ( child , depth , fmt )"		96403	1		=			
ANR	96612	Identifier	ret		96403	0					
ANR	96613	CallExpression	"print_value ( child , depth , fmt )"		96403	1					
ANR	96614	Callee	print_value		96403	0					
ANR	96615	Identifier	print_value		96403	0					
ANR	96616	ArgumentList	child		96403	1					
ANR	96617	Argument	child		96403	0					
ANR	96618	Identifier	child		96403	0					
ANR	96619	Argument	depth		96403	1					
ANR	96620	Identifier	depth		96403	0					
ANR	96621	Argument	fmt		96403	2					
ANR	96622	Identifier	fmt		96403	0					
ANR	96623	IfStatement	if ( str && ret )		96403	2					
ANR	96624	Condition	str && ret	449:6:14308:14317	96403	0	True				
ANR	96625	AndExpression	str && ret		96403	0		&&			
ANR	96626	Identifier	str		96403	0					
ANR	96627	Identifier	ret		96403	1					
ANR	96628	ExpressionStatement	len += strlen ( ret ) + strlen ( str ) + 2 + ( fmt ? 2 + depth : 0 )	449:18:14320:14366	96403	1	True				
ANR	96629	AssignmentExpression	len += strlen ( ret ) + strlen ( str ) + 2 + ( fmt ? 2 + depth : 0 )		96403	0		+=			
ANR	96630	Identifier	len		96403	0					
ANR	96631	AdditiveExpression	strlen ( ret ) + strlen ( str ) + 2 + ( fmt ? 2 + depth : 0 )		96403	1		+			
ANR	96632	CallExpression	strlen ( ret )		96403	0					
ANR	96633	Callee	strlen		96403	0					
ANR	96634	Identifier	strlen		96403	0					
ANR	96635	ArgumentList	ret		96403	1					
ANR	96636	Argument	ret		96403	0					
ANR	96637	Identifier	ret		96403	0					
ANR	96638	AdditiveExpression	strlen ( str ) + 2 + ( fmt ? 2 + depth : 0 )		96403	1		+			
ANR	96639	CallExpression	strlen ( str )		96403	0					
ANR	96640	Callee	strlen		96403	0					
ANR	96641	Identifier	strlen		96403	0					
ANR	96642	ArgumentList	str		96403	1					
ANR	96643	Argument	str		96403	0					
ANR	96644	Identifier	str		96403	0					
ANR	96645	AdditiveExpression	2 + ( fmt ? 2 + depth : 0 )		96403	1		+			
ANR	96646	PrimaryExpression	2		96403	0					
ANR	96647	ConditionalExpression	fmt ? 2 + depth : 0		96403	1					
ANR	96648	Condition	fmt		96403	0					
ANR	96649	Identifier	fmt		96403	0					
ANR	96650	AdditiveExpression	2 + depth		96403	1		+			
ANR	96651	PrimaryExpression	2		96403	0					
ANR	96652	Identifier	depth		96403	1					
ANR	96653	PrimaryExpression	0		96403	2					
ANR	96654	ElseStatement	else		96403	0					
ANR	96655	ExpressionStatement	fail = 1	449:71:14373:14379	96403	0	True				
ANR	96656	AssignmentExpression	fail = 1		96403	0		=			
ANR	96657	Identifier	fail		96403	0					
ANR	96658	PrimaryExpression	1		96403	1					
ANR	96659	ExpressionStatement	child = child -> next	450:2:14383:14400	96403	3	True				
ANR	96660	AssignmentExpression	child = child -> next		96403	0		=			
ANR	96661	Identifier	child		96403	0					
ANR	96662	PtrMemberAccess	child -> next		96403	1					
ANR	96663	Identifier	child		96403	0					
ANR	96664	Identifier	next		96403	1					
ANR	96665	IfStatement	if ( ! fail )		96403	16					
ANR	96666	Condition	! fail	454:5:14453:14457	96403	0	True				
ANR	96667	UnaryOperationExpression	! fail		96403	0					
ANR	96668	UnaryOperator	!		96403	0					
ANR	96669	Identifier	fail		96403	1					
ANR	96670	ExpressionStatement	out = ( char * ) cJSON_malloc ( len )	454:12:14460:14488	96403	1	True				
ANR	96671	AssignmentExpression	out = ( char * ) cJSON_malloc ( len )		96403	0		=			
ANR	96672	Identifier	out		96403	0					
ANR	96673	CastExpression	( char * ) cJSON_malloc ( len )		96403	1					
ANR	96674	CastTarget	char *		96403	0					
ANR	96675	CallExpression	cJSON_malloc ( len )		96403	1					
ANR	96676	Callee	cJSON_malloc		96403	0					
ANR	96677	Identifier	cJSON_malloc		96403	0					
ANR	96678	ArgumentList	len		96403	1					
ANR	96679	Argument	len		96403	0					
ANR	96680	Identifier	len		96403	0					
ANR	96681	IfStatement	if ( ! out )		96403	17					
ANR	96682	Condition	! out	455:5:14495:14498	96403	0	True				
ANR	96683	UnaryOperationExpression	! out		96403	0					
ANR	96684	UnaryOperator	!		96403	0					
ANR	96685	Identifier	out		96403	1					
ANR	96686	ExpressionStatement	fail = 1	455:11:14501:14507	96403	1	True				
ANR	96687	AssignmentExpression	fail = 1		96403	0		=			
ANR	96688	Identifier	fail		96403	0					
ANR	96689	PrimaryExpression	1		96403	1					
ANR	96690	IfStatement	if ( fail )		96403	18					
ANR	96691	Condition	fail	458:5:14537:14540	96403	0	True				
ANR	96692	Identifier	fail		96403	0					
ANR	96693	CompoundStatement		32:1:987:987	96403	1					
ANR	96694	ForStatement	for ( i = 0 ; i < numentries ; i ++ )		96403	0					
ANR	96695	ForInit	i = 0 ;	460:7:14553:14556	96403	0	True				
ANR	96696	AssignmentExpression	i = 0		96403	0		=			
ANR	96697	Identifier	i		96403	0					
ANR	96698	PrimaryExpression	0		96403	1					
ANR	96699	Condition	i < numentries	460:11:14557:14568	96403	1	True				
ANR	96700	RelationalExpression	i < numentries		96403	0		<			
ANR	96701	Identifier	i		96403	0					
ANR	96702	Identifier	numentries		96403	1					
ANR	96703	PostIncDecOperationExpression	i ++	460:24:14570:14572	96403	2	True				
ANR	96704	Identifier	i		96403	0					
ANR	96705	IncDec	++		96403	1					
ANR	96706	CompoundStatement		33:29:1018:1018	96403	3					
ANR	96707	IfStatement	if ( names [ i ] )		96403	0					
ANR	96708	Condition	names [ i ]	460:34:14580:14587	96403	0	True				
ANR	96709	ArrayIndexing	names [ i ]		96403	0					
ANR	96710	Identifier	names		96403	0					
ANR	96711	Identifier	i		96403	1					
ANR	96712	ExpressionStatement	cJSON_free ( names [ i ] )	460:44:14590:14610	96403	1	True				
ANR	96713	CallExpression	cJSON_free ( names [ i ] )		96403	0					
ANR	96714	Callee	cJSON_free		96403	0					
ANR	96715	Identifier	cJSON_free		96403	0					
ANR	96716	ArgumentList	names [ i ]		96403	1					
ANR	96717	Argument	names [ i ]		96403	0					
ANR	96718	ArrayIndexing	names [ i ]		96403	0					
ANR	96719	Identifier	names		96403	0					
ANR	96720	Identifier	i		96403	1					
ANR	96721	IfStatement	if ( entries [ i ] )		96403	1					
ANR	96722	Condition	entries [ i ]	460:69:14615:14624	96403	0	True				
ANR	96723	ArrayIndexing	entries [ i ]		96403	0					
ANR	96724	Identifier	entries		96403	0					
ANR	96725	Identifier	i		96403	1					
ANR	96726	ExpressionStatement	cJSON_free ( entries [ i ] )	460:81:14627:14649	96403	1	True				
ANR	96727	CallExpression	cJSON_free ( entries [ i ] )		96403	0					
ANR	96728	Callee	cJSON_free		96403	0					
ANR	96729	Identifier	cJSON_free		96403	0					
ANR	96730	ArgumentList	entries [ i ]		96403	1					
ANR	96731	Argument	entries [ i ]		96403	0					
ANR	96732	ArrayIndexing	entries [ i ]		96403	0					
ANR	96733	Identifier	entries		96403	0					
ANR	96734	Identifier	i		96403	1					
ANR	96735	ExpressionStatement	cJSON_free ( names )	461:2:14654:14671	96403	1	True				
ANR	96736	CallExpression	cJSON_free ( names )		96403	0					
ANR	96737	Callee	cJSON_free		96403	0					
ANR	96738	Identifier	cJSON_free		96403	0					
ANR	96739	ArgumentList	names		96403	1					
ANR	96740	Argument	names		96403	0					
ANR	96741	Identifier	names		96403	0					
ANR	96742	ExpressionStatement	cJSON_free ( entries )	461:20:14672:14691	96403	2	True				
ANR	96743	CallExpression	cJSON_free ( entries )		96403	0					
ANR	96744	Callee	cJSON_free		96403	0					
ANR	96745	Identifier	cJSON_free		96403	0					
ANR	96746	ArgumentList	entries		96403	1					
ANR	96747	Argument	entries		96403	0					
ANR	96748	Identifier	entries		96403	0					
ANR	96749	ReturnStatement	return 0 ;	462:2:14695:14703	96403	3	True				
ANR	96750	PrimaryExpression	0		96403	0					
ANR	96751	ExpressionStatement	* out = '{'	466:1:14738:14746	96403	19	True				
ANR	96752	AssignmentExpression	* out = '{'		96403	0		=			
ANR	96753	UnaryOperationExpression	* out		96403	0					
ANR	96754	UnaryOperator	*		96403	0					
ANR	96755	Identifier	out		96403	1					
ANR	96756	PrimaryExpression	'{'		96403	1					
ANR	96757	ExpressionStatement	ptr = out + 1	466:10:14747:14756	96403	20	True				
ANR	96758	AssignmentExpression	ptr = out + 1		96403	0		=			
ANR	96759	Identifier	ptr		96403	0					
ANR	96760	AdditiveExpression	out + 1		96403	1		+			
ANR	96761	Identifier	out		96403	0					
ANR	96762	PrimaryExpression	1		96403	1					
ANR	96763	IfStatement	if ( fmt )		96403	21					
ANR	96764	Condition	fmt	466:24:14761:14763	96403	0	True				
ANR	96765	Identifier	fmt		96403	0					
ANR	96766	ExpressionStatement	* ptr ++ = '\\n'	466:28:14765:14776	96403	1	True				
ANR	96767	AssignmentExpression	* ptr ++ = '\\n'		96403	0		=			
ANR	96768	UnaryOperationExpression	* ptr ++		96403	0					
ANR	96769	UnaryOperator	*		96403	0					
ANR	96770	PostIncDecOperationExpression	ptr ++		96403	1					
ANR	96771	Identifier	ptr		96403	0					
ANR	96772	IncDec	++		96403	1					
ANR	96773	PrimaryExpression	'\\n'		96403	1					
ANR	96774	ExpressionStatement	* ptr = 0	466:40:14777:14783	96403	22	True				
ANR	96775	AssignmentExpression	* ptr = 0		96403	0		=			
ANR	96776	UnaryOperationExpression	* ptr		96403	0					
ANR	96777	UnaryOperator	*		96403	0					
ANR	96778	Identifier	ptr		96403	1					
ANR	96779	PrimaryExpression	0		96403	1					
ANR	96780	ForStatement	for ( i = 0 ; i < numentries ; i ++ )		96403	23					
ANR	96781	ForInit	i = 0 ;	467:6:14791:14794	96403	0	True				
ANR	96782	AssignmentExpression	i = 0		96403	0		=			
ANR	96783	Identifier	i		96403	0					
ANR	96784	PrimaryExpression	0		96403	1					
ANR	96785	Condition	i < numentries	467:10:14795:14806	96403	1	True				
ANR	96786	RelationalExpression	i < numentries		96403	0		<			
ANR	96787	Identifier	i		96403	0					
ANR	96788	Identifier	numentries		96403	1					
ANR	96789	PostIncDecOperationExpression	i ++	467:23:14808:14810	96403	2	True				
ANR	96790	Identifier	i		96403	0					
ANR	96791	IncDec	++		96403	1					
ANR	96792	CompoundStatement		41:1:1257:1257	96403	3					
ANR	96793	IfStatement	if ( fmt )		96403	0					
ANR	96794	Condition	fmt	469:6:14822:14824	96403	0	True				
ANR	96795	Identifier	fmt		96403	0					
ANR	96796	ForStatement	for ( j = 0 ; j < depth ; j ++ )		96403	1					
ANR	96797	ForInit	j = 0 ;	469:16:14832:14835	96403	0	True				
ANR	96798	AssignmentExpression	j = 0		96403	0		=			
ANR	96799	Identifier	j		96403	0					
ANR	96800	PrimaryExpression	0		96403	1					
ANR	96801	Condition	j < depth	469:20:14836:14842	96403	1	True				
ANR	96802	RelationalExpression	j < depth		96403	0		<			
ANR	96803	Identifier	j		96403	0					
ANR	96804	Identifier	depth		96403	1					
ANR	96805	PostIncDecOperationExpression	j ++	469:28:14844:14846	96403	2	True				
ANR	96806	Identifier	j		96403	0					
ANR	96807	IncDec	++		96403	1					
ANR	96808	ExpressionStatement	* ptr ++ = '\\t'	469:33:14849:14860	96403	3	True				
ANR	96809	AssignmentExpression	* ptr ++ = '\\t'		96403	0		=			
ANR	96810	UnaryOperationExpression	* ptr ++		96403	0					
ANR	96811	UnaryOperator	*		96403	0					
ANR	96812	PostIncDecOperationExpression	ptr ++		96403	1					
ANR	96813	Identifier	ptr		96403	0					
ANR	96814	IncDec	++		96403	1					
ANR	96815	PrimaryExpression	'\\t'		96403	1					
ANR	96816	ExpressionStatement	"strcpy ( ptr , names [ i ] )"	470:2:14864:14884	96403	1	True				
ANR	96817	CallExpression	"strcpy ( ptr , names [ i ] )"		96403	0					
ANR	96818	Callee	strcpy		96403	0					
ANR	96819	Identifier	strcpy		96403	0					
ANR	96820	ArgumentList	ptr		96403	1					
ANR	96821	Argument	ptr		96403	0					
ANR	96822	Identifier	ptr		96403	0					
ANR	96823	Argument	names [ i ]		96403	1					
ANR	96824	ArrayIndexing	names [ i ]		96403	0					
ANR	96825	Identifier	names		96403	0					
ANR	96826	Identifier	i		96403	1					
ANR	96827	ExpressionStatement	ptr += strlen ( names [ i ] )	470:23:14885:14906	96403	2	True				
ANR	96828	AssignmentExpression	ptr += strlen ( names [ i ] )		96403	0		+=			
ANR	96829	Identifier	ptr		96403	0					
ANR	96830	CallExpression	strlen ( names [ i ] )		96403	1					
ANR	96831	Callee	strlen		96403	0					
ANR	96832	Identifier	strlen		96403	0					
ANR	96833	ArgumentList	names [ i ]		96403	1					
ANR	96834	Argument	names [ i ]		96403	0					
ANR	96835	ArrayIndexing	names [ i ]		96403	0					
ANR	96836	Identifier	names		96403	0					
ANR	96837	Identifier	i		96403	1					
ANR	96838	ExpressionStatement	* ptr ++ = ':'	471:2:14910:14920	96403	3	True				
ANR	96839	AssignmentExpression	* ptr ++ = ':'		96403	0		=			
ANR	96840	UnaryOperationExpression	* ptr ++		96403	0					
ANR	96841	UnaryOperator	*		96403	0					
ANR	96842	PostIncDecOperationExpression	ptr ++		96403	1					
ANR	96843	Identifier	ptr		96403	0					
ANR	96844	IncDec	++		96403	1					
ANR	96845	PrimaryExpression	':'		96403	1					
ANR	96846	IfStatement	if ( fmt )		96403	4					
ANR	96847	Condition	fmt	471:17:14925:14927	96403	0	True				
ANR	96848	Identifier	fmt		96403	0					
ANR	96849	ExpressionStatement	* ptr ++ = '\\t'	471:22:14930:14941	96403	1	True				
ANR	96850	AssignmentExpression	* ptr ++ = '\\t'		96403	0		=			
ANR	96851	UnaryOperationExpression	* ptr ++		96403	0					
ANR	96852	UnaryOperator	*		96403	0					
ANR	96853	PostIncDecOperationExpression	ptr ++		96403	1					
ANR	96854	Identifier	ptr		96403	0					
ANR	96855	IncDec	++		96403	1					
ANR	96856	PrimaryExpression	'\\t'		96403	1					
ANR	96857	ExpressionStatement	"strcpy ( ptr , entries [ i ] )"	472:2:14945:14967	96403	5	True				
ANR	96858	CallExpression	"strcpy ( ptr , entries [ i ] )"		96403	0					
ANR	96859	Callee	strcpy		96403	0					
ANR	96860	Identifier	strcpy		96403	0					
ANR	96861	ArgumentList	ptr		96403	1					
ANR	96862	Argument	ptr		96403	0					
ANR	96863	Identifier	ptr		96403	0					
ANR	96864	Argument	entries [ i ]		96403	1					
ANR	96865	ArrayIndexing	entries [ i ]		96403	0					
ANR	96866	Identifier	entries		96403	0					
ANR	96867	Identifier	i		96403	1					
ANR	96868	ExpressionStatement	ptr += strlen ( entries [ i ] )	472:25:14968:14991	96403	6	True				
ANR	96869	AssignmentExpression	ptr += strlen ( entries [ i ] )		96403	0		+=			
ANR	96870	Identifier	ptr		96403	0					
ANR	96871	CallExpression	strlen ( entries [ i ] )		96403	1					
ANR	96872	Callee	strlen		96403	0					
ANR	96873	Identifier	strlen		96403	0					
ANR	96874	ArgumentList	entries [ i ]		96403	1					
ANR	96875	Argument	entries [ i ]		96403	0					
ANR	96876	ArrayIndexing	entries [ i ]		96403	0					
ANR	96877	Identifier	entries		96403	0					
ANR	96878	Identifier	i		96403	1					
ANR	96879	IfStatement	if ( i != numentries - 1 )		96403	7					
ANR	96880	Condition	i != numentries - 1	473:6:14999:15013	96403	0	True				
ANR	96881	EqualityExpression	i != numentries - 1		96403	0		!=			
ANR	96882	Identifier	i		96403	0					
ANR	96883	AdditiveExpression	numentries - 1		96403	1		-			
ANR	96884	Identifier	numentries		96403	0					
ANR	96885	PrimaryExpression	1		96403	1					
ANR	96886	ExpressionStatement	"* ptr ++ = ','"	473:23:15016:15026	96403	1	True				
ANR	96887	AssignmentExpression	"* ptr ++ = ','"		96403	0		=			
ANR	96888	UnaryOperationExpression	* ptr ++		96403	0					
ANR	96889	UnaryOperator	*		96403	0					
ANR	96890	PostIncDecOperationExpression	ptr ++		96403	1					
ANR	96891	Identifier	ptr		96403	0					
ANR	96892	IncDec	++		96403	1					
ANR	96893	PrimaryExpression	"','"		96403	1					
ANR	96894	IfStatement	if ( fmt )		96403	8					
ANR	96895	Condition	fmt	474:6:15034:15036	96403	0	True				
ANR	96896	Identifier	fmt		96403	0					
ANR	96897	ExpressionStatement	* ptr ++ = '\\n'	474:11:15039:15050	96403	1	True				
ANR	96898	AssignmentExpression	* ptr ++ = '\\n'		96403	0		=			
ANR	96899	UnaryOperationExpression	* ptr ++		96403	0					
ANR	96900	UnaryOperator	*		96403	0					
ANR	96901	PostIncDecOperationExpression	ptr ++		96403	1					
ANR	96902	Identifier	ptr		96403	0					
ANR	96903	IncDec	++		96403	1					
ANR	96904	PrimaryExpression	'\\n'		96403	1					
ANR	96905	ExpressionStatement	* ptr = 0	474:23:15051:15057	96403	9	True				
ANR	96906	AssignmentExpression	* ptr = 0		96403	0		=			
ANR	96907	UnaryOperationExpression	* ptr		96403	0					
ANR	96908	UnaryOperator	*		96403	0					
ANR	96909	Identifier	ptr		96403	1					
ANR	96910	PrimaryExpression	0		96403	1					
ANR	96911	ExpressionStatement	cJSON_free ( names [ i ] )	475:2:15061:15081	96403	10	True				
ANR	96912	CallExpression	cJSON_free ( names [ i ] )		96403	0					
ANR	96913	Callee	cJSON_free		96403	0					
ANR	96914	Identifier	cJSON_free		96403	0					
ANR	96915	ArgumentList	names [ i ]		96403	1					
ANR	96916	Argument	names [ i ]		96403	0					
ANR	96917	ArrayIndexing	names [ i ]		96403	0					
ANR	96918	Identifier	names		96403	0					
ANR	96919	Identifier	i		96403	1					
ANR	96920	ExpressionStatement	cJSON_free ( entries [ i ] )	475:23:15082:15104	96403	11	True				
ANR	96921	CallExpression	cJSON_free ( entries [ i ] )		96403	0					
ANR	96922	Callee	cJSON_free		96403	0					
ANR	96923	Identifier	cJSON_free		96403	0					
ANR	96924	ArgumentList	entries [ i ]		96403	1					
ANR	96925	Argument	entries [ i ]		96403	0					
ANR	96926	ArrayIndexing	entries [ i ]		96403	0					
ANR	96927	Identifier	entries		96403	0					
ANR	96928	Identifier	i		96403	1					
ANR	96929	ExpressionStatement	cJSON_free ( names )	478:1:15112:15129	96403	24	True				
ANR	96930	CallExpression	cJSON_free ( names )		96403	0					
ANR	96931	Callee	cJSON_free		96403	0					
ANR	96932	Identifier	cJSON_free		96403	0					
ANR	96933	ArgumentList	names		96403	1					
ANR	96934	Argument	names		96403	0					
ANR	96935	Identifier	names		96403	0					
ANR	96936	ExpressionStatement	cJSON_free ( entries )	478:19:15130:15149	96403	25	True				
ANR	96937	CallExpression	cJSON_free ( entries )		96403	0					
ANR	96938	Callee	cJSON_free		96403	0					
ANR	96939	Identifier	cJSON_free		96403	0					
ANR	96940	ArgumentList	entries		96403	1					
ANR	96941	Argument	entries		96403	0					
ANR	96942	Identifier	entries		96403	0					
ANR	96943	IfStatement	if ( fmt )		96403	26					
ANR	96944	Condition	fmt	479:5:15156:15158	96403	0	True				
ANR	96945	Identifier	fmt		96403	0					
ANR	96946	ForStatement	for ( i = 0 ; i < depth - 1 ; i ++ )		96403	1					
ANR	96947	ForInit	i = 0 ;	479:15:15166:15169	96403	0	True				
ANR	96948	AssignmentExpression	i = 0		96403	0		=			
ANR	96949	Identifier	i		96403	0					
ANR	96950	PrimaryExpression	0		96403	1					
ANR	96951	Condition	i < depth - 1	479:19:15170:15178	96403	1	True				
ANR	96952	RelationalExpression	i < depth - 1		96403	0		<			
ANR	96953	Identifier	i		96403	0					
ANR	96954	AdditiveExpression	depth - 1		96403	1		-			
ANR	96955	Identifier	depth		96403	0					
ANR	96956	PrimaryExpression	1		96403	1					
ANR	96957	PostIncDecOperationExpression	i ++	479:29:15180:15182	96403	2	True				
ANR	96958	Identifier	i		96403	0					
ANR	96959	IncDec	++		96403	1					
ANR	96960	ExpressionStatement	* ptr ++ = '\\t'	479:34:15185:15196	96403	3	True				
ANR	96961	AssignmentExpression	* ptr ++ = '\\t'		96403	0		=			
ANR	96962	UnaryOperationExpression	* ptr ++		96403	0					
ANR	96963	UnaryOperator	*		96403	0					
ANR	96964	PostIncDecOperationExpression	ptr ++		96403	1					
ANR	96965	Identifier	ptr		96403	0					
ANR	96966	IncDec	++		96403	1					
ANR	96967	PrimaryExpression	'\\t'		96403	1					
ANR	96968	ExpressionStatement	* ptr ++ = '}'	480:1:15199:15209	96403	27	True				
ANR	96969	AssignmentExpression	* ptr ++ = '}'		96403	0		=			
ANR	96970	UnaryOperationExpression	* ptr ++		96403	0					
ANR	96971	UnaryOperator	*		96403	0					
ANR	96972	PostIncDecOperationExpression	ptr ++		96403	1					
ANR	96973	Identifier	ptr		96403	0					
ANR	96974	IncDec	++		96403	1					
ANR	96975	PrimaryExpression	'}'		96403	1					
ANR	96976	ExpressionStatement	* ptr ++ = 0	480:12:15210:15218	96403	28	True				
ANR	96977	AssignmentExpression	* ptr ++ = 0		96403	0		=			
ANR	96978	UnaryOperationExpression	* ptr ++		96403	0					
ANR	96979	UnaryOperator	*		96403	0					
ANR	96980	PostIncDecOperationExpression	ptr ++		96403	1					
ANR	96981	Identifier	ptr		96403	0					
ANR	96982	IncDec	++		96403	1					
ANR	96983	PrimaryExpression	0		96403	1					
ANR	96984	ReturnStatement	return out ;	481:1:15221:15231	96403	29	True				
ANR	96985	Identifier	out		96403	0					
ANR	96986	ReturnType	static char *		96403	1					
ANR	96987	Identifier	print_object		96403	2					
ANR	96988	ParameterList	"cJSON * item , int depth , int fmt"		96403	3					
ANR	96989	Parameter	cJSON * item	427:26:13525:13535	96403	0	True				
ANR	96990	ParameterType	cJSON *		96403	0					
ANR	96991	Identifier	item		96403	1					
ANR	96992	Parameter	int depth	427:38:13537:13545	96403	1	True				
ANR	96993	ParameterType	int		96403	0					
ANR	96994	Identifier	depth		96403	1					
ANR	96995	Parameter	int fmt	427:48:13547:13553	96403	2	True				
ANR	96996	ParameterType	int		96403	0					
ANR	96997	Identifier	fmt		96403	1					
ANR	96998	CFGEntryNode	ENTRY		96403		True				
ANR	96999	CFGExitNode	EXIT		96403		True				
ANR	97000	Symbol	child -> next		96403						
ANR	97001	Symbol	child -> string		96403						
ANR	97002	Symbol	fmt		96403						
ANR	97003	Symbol	cJSON_malloc		96403						
ANR	97004	Symbol	* names		96403						
ANR	97005	Symbol	out		96403						
ANR	97006	Symbol	strlen		96403						
ANR	97007	Symbol	len		96403						
ANR	97008	Symbol	* item		96403						
ANR	97009	Symbol	* entries		96403						
ANR	97010	Symbol	* ptr		96403						
ANR	97011	Symbol	numentries		96403						
ANR	97012	Symbol	ret		96403						
ANR	97013	Symbol	item		96403						
ANR	97014	Symbol	* child		96403						
ANR	97015	Symbol	* ptr ++		96403						
ANR	97016	Symbol	i		96403						
ANR	97017	Symbol	j		96403						
ANR	97018	Symbol	print_value		96403						
ANR	97019	Symbol	ptr		96403						
ANR	97020	Symbol	str		96403						
ANR	97021	Symbol	fail		96403						
ANR	97022	Symbol	entries		96403						
ANR	97023	Symbol	depth		96403						
ANR	97024	Symbol	names		96403						
ANR	97025	Symbol	* i		96403						
ANR	97026	Symbol	* out		96403						
ANR	97027	Symbol	item -> child		96403						
ANR	97028	Symbol	print_string_ptr		96403						
ANR	97029	Symbol	child		96403						
ANR	97030	Function	cJSON_GetArraySize	485:0:15278:15388							
ANR	97031	FunctionDef	cJSON_GetArraySize (cJSON * array)		97030	0					
ANR	97032	CompoundStatement		485:46:15324:15388	97030	0					
ANR	97033	IdentifierDeclStatement	cJSON * c = array -> child ;	485:0:15325:15346	97030	0	True				
ANR	97034	IdentifierDecl	* c = array -> child		97030	0					
ANR	97035	IdentifierDeclType	cJSON *		97030	0					
ANR	97036	Identifier	c		97030	1					
ANR	97037	AssignmentExpression	* c = array -> child		97030	2		=			
ANR	97038	Identifier	c		97030	0					
ANR	97039	PtrMemberAccess	array -> child		97030	1					
ANR	97040	Identifier	array		97030	0					
ANR	97041	Identifier	child		97030	1					
ANR	97042	IdentifierDeclStatement	int i = 0 ;	486:1:15349:15356	97030	1	True				
ANR	97043	IdentifierDecl	i = 0		97030	0					
ANR	97044	IdentifierDeclType	int		97030	0					
ANR	97045	Identifier	i		97030	1					
ANR	97046	AssignmentExpression	i = 0		97030	2		=			
ANR	97047	Identifier	i		97030	0					
ANR	97048	PrimaryExpression	0		97030	1					
ANR	97049	WhileStatement	while ( c )		97030	2					
ANR	97050	Condition	c	486:15:15363:15363	97030	0	True				
ANR	97051	Identifier	c		97030	0					
ANR	97052	ExpressionStatement	"i ++ , c = c -> next"	486:17:15365:15378	97030	1	True				
ANR	97053	Expression	"i ++ , c = c -> next"		97030	0					
ANR	97054	PostIncDecOperationExpression	i ++		97030	0					
ANR	97055	Identifier	i		97030	0					
ANR	97056	IncDec	++		97030	1					
ANR	97057	AssignmentExpression	c = c -> next		97030	1		=			
ANR	97058	Identifier	c		97030	0					
ANR	97059	PtrMemberAccess	c -> next		97030	1					
ANR	97060	Identifier	c		97030	0					
ANR	97061	Identifier	next		97030	1					
ANR	97062	ReturnStatement	return i ;	486:31:15379:15387	97030	3	True				
ANR	97063	Identifier	i		97030	0					
ANR	97064	ReturnType	int		97030	1					
ANR	97065	Identifier	cJSON_GetArraySize		97030	2					
ANR	97066	ParameterList	cJSON * array		97030	3					
ANR	97067	Parameter	cJSON * array	485:26:15304:15315	97030	0	True				
ANR	97068	ParameterType	cJSON *		97030	0					
ANR	97069	Identifier	array		97030	1					
ANR	97070	CFGEntryNode	ENTRY		97030		True				
ANR	97071	CFGExitNode	EXIT		97030		True				
ANR	97072	Symbol	c -> next		97030						
ANR	97073	Symbol	c		97030						
ANR	97074	Symbol	array -> child		97030						
ANR	97075	Symbol	array		97030						
ANR	97076	Symbol	i		97030						
ANR	97077	Symbol	* c		97030						
ANR	97078	Symbol	* array		97030						
ANR	97079	Function	cJSON_GetArrayItem	487:0:15390:15514							
ANR	97080	FunctionDef	"cJSON_GetArrayItem (cJSON * array , int item)"		97079	0					
ANR	97081	CompoundStatement		487:52:15442:15514	97079	0					
ANR	97082	IdentifierDeclStatement	cJSON * c = array -> child ;	487:0:15443:15464	97079	0	True				
ANR	97083	IdentifierDecl	* c = array -> child		97079	0					
ANR	97084	IdentifierDeclType	cJSON *		97079	0					
ANR	97085	Identifier	c		97079	1					
ANR	97086	AssignmentExpression	* c = array -> child		97079	2		=			
ANR	97087	Identifier	c		97079	0					
ANR	97088	PtrMemberAccess	array -> child		97079	1					
ANR	97089	Identifier	array		97079	0					
ANR	97090	Identifier	child		97079	1					
ANR	97091	WhileStatement	while ( c && item > 0 )		97079	1					
ANR	97092	Condition	c && item > 0	488:8:15474:15484	97079	0	True				
ANR	97093	AndExpression	c && item > 0		97079	0		&&			
ANR	97094	Identifier	c		97079	0					
ANR	97095	RelationalExpression	item > 0		97079	1		>			
ANR	97096	Identifier	item		97079	0					
ANR	97097	PrimaryExpression	0		97079	1					
ANR	97098	ExpressionStatement	"item -- , c = c -> next"	488:21:15487:15503	97079	1	True				
ANR	97099	Expression	"item -- , c = c -> next"		97079	0					
ANR	97100	PostIncDecOperationExpression	item --		97079	0					
ANR	97101	Identifier	item		97079	0					
ANR	97102	IncDec	--		97079	1					
ANR	97103	AssignmentExpression	c = c -> next		97079	1		=			
ANR	97104	Identifier	c		97079	0					
ANR	97105	PtrMemberAccess	c -> next		97079	1					
ANR	97106	Identifier	c		97079	0					
ANR	97107	Identifier	next		97079	1					
ANR	97108	ReturnStatement	return c ;	488:39:15505:15513	97079	2	True				
ANR	97109	Identifier	c		97079	0					
ANR	97110	ReturnType	cJSON *		97079	1					
ANR	97111	Identifier	cJSON_GetArrayItem		97079	2					
ANR	97112	ParameterList	"cJSON * array , int item"		97079	3					
ANR	97113	Parameter	cJSON * array	487:26:15416:15427	97079	0	True				
ANR	97114	ParameterType	cJSON *		97079	0					
ANR	97115	Identifier	array		97079	1					
ANR	97116	Parameter	int item	487:39:15429:15436	97079	1	True				
ANR	97117	ParameterType	int		97079	0					
ANR	97118	Identifier	item		97079	1					
ANR	97119	CFGEntryNode	ENTRY		97079		True				
ANR	97120	CFGExitNode	EXIT		97079		True				
ANR	97121	Symbol	item		97079						
ANR	97122	Symbol	c -> next		97079						
ANR	97123	Symbol	c		97079						
ANR	97124	Symbol	array -> child		97079						
ANR	97125	Symbol	array		97079						
ANR	97126	Symbol	* c		97079						
ANR	97127	Symbol	* array		97079						
ANR	97128	Function	cJSON_GetObjectItem	489:0:15516:15671							
ANR	97129	FunctionDef	"cJSON_GetObjectItem (cJSON * object , const char * string)"		97128	0					
ANR	97130	CompoundStatement		489:61:15577:15671	97128	0					
ANR	97131	IdentifierDeclStatement	cJSON * c = object -> child ;	489:0:15578:15600	97128	0	True				
ANR	97132	IdentifierDecl	* c = object -> child		97128	0					
ANR	97133	IdentifierDeclType	cJSON *		97128	0					
ANR	97134	Identifier	c		97128	1					
ANR	97135	AssignmentExpression	* c = object -> child		97128	2		=			
ANR	97136	Identifier	c		97128	0					
ANR	97137	PtrMemberAccess	object -> child		97128	1					
ANR	97138	Identifier	object		97128	0					
ANR	97139	Identifier	child		97128	1					
ANR	97140	WhileStatement	"while ( c && cJSON_strcasecmp ( c -> string , string ) )"		97128	1					
ANR	97141	Condition	"c && cJSON_strcasecmp ( c -> string , string )"	490:8:15610:15648	97128	0	True				
ANR	97142	AndExpression	"c && cJSON_strcasecmp ( c -> string , string )"		97128	0		&&			
ANR	97143	Identifier	c		97128	0					
ANR	97144	CallExpression	"cJSON_strcasecmp ( c -> string , string )"		97128	1					
ANR	97145	Callee	cJSON_strcasecmp		97128	0					
ANR	97146	Identifier	cJSON_strcasecmp		97128	0					
ANR	97147	ArgumentList	c -> string		97128	1					
ANR	97148	Argument	c -> string		97128	0					
ANR	97149	PtrMemberAccess	c -> string		97128	0					
ANR	97150	Identifier	c		97128	0					
ANR	97151	Identifier	string		97128	1					
ANR	97152	Argument	string		97128	1					
ANR	97153	Identifier	string		97128	0					
ANR	97154	ExpressionStatement	c = c -> next	490:49:15651:15660	97128	1	True				
ANR	97155	AssignmentExpression	c = c -> next		97128	0		=			
ANR	97156	Identifier	c		97128	0					
ANR	97157	PtrMemberAccess	c -> next		97128	1					
ANR	97158	Identifier	c		97128	0					
ANR	97159	Identifier	next		97128	1					
ANR	97160	ReturnStatement	return c ;	490:60:15662:15670	97128	2	True				
ANR	97161	Identifier	c		97128	0					
ANR	97162	ReturnType	cJSON *		97128	1					
ANR	97163	Identifier	cJSON_GetObjectItem		97128	2					
ANR	97164	ParameterList	"cJSON * object , const char * string"		97128	3					
ANR	97165	Parameter	cJSON * object	489:27:15543:15555	97128	0	True				
ANR	97166	ParameterType	cJSON *		97128	0					
ANR	97167	Identifier	object		97128	1					
ANR	97168	Parameter	const char * string	489:41:15557:15574	97128	1	True				
ANR	97169	ParameterType	const char *		97128	0					
ANR	97170	Identifier	string		97128	1					
ANR	97171	CFGEntryNode	ENTRY		97128		True				
ANR	97172	CFGExitNode	EXIT		97128		True				
ANR	97173	Symbol	c -> next		97128						
ANR	97174	Symbol	c		97128						
ANR	97175	Symbol	object -> child		97128						
ANR	97176	Symbol	string		97128						
ANR	97177	Symbol	* object		97128						
ANR	97178	Symbol	cJSON_strcasecmp		97128						
ANR	97179	Symbol	* c		97128						
ANR	97180	Symbol	object		97128						
ANR	97181	Symbol	c -> string		97128						
ANR	97182	Function	suffix_object	493:0:15713:15797							
ANR	97183	FunctionDef	"suffix_object (cJSON * prev , cJSON * item)"		97182	0					
ANR	97184	CompoundStatement		493:51:15764:15797	97182	0					
ANR	97185	ExpressionStatement	prev -> next = item	493:0:15765:15780	97182	0	True				
ANR	97186	AssignmentExpression	prev -> next = item		97182	0		=			
ANR	97187	PtrMemberAccess	prev -> next		97182	0					
ANR	97188	Identifier	prev		97182	0					
ANR	97189	Identifier	next		97182	1					
ANR	97190	Identifier	item		97182	1					
ANR	97191	ExpressionStatement	item -> prev = prev	493:16:15781:15796	97182	1	True				
ANR	97192	AssignmentExpression	item -> prev = prev		97182	0		=			
ANR	97193	PtrMemberAccess	item -> prev		97182	0					
ANR	97194	Identifier	item		97182	0					
ANR	97195	Identifier	prev		97182	1					
ANR	97196	Identifier	prev		97182	1					
ANR	97197	ReturnType	static void		97182	1					
ANR	97198	Identifier	suffix_object		97182	2					
ANR	97199	ParameterList	"cJSON * prev , cJSON * item"		97182	3					
ANR	97200	Parameter	cJSON * prev	493:26:15739:15749	97182	0	True				
ANR	97201	ParameterType	cJSON *		97182	0					
ANR	97202	Identifier	prev		97182	1					
ANR	97203	Parameter	cJSON * item	493:38:15751:15761	97182	1	True				
ANR	97204	ParameterType	cJSON *		97182	0					
ANR	97205	Identifier	item		97182	1					
ANR	97206	CFGEntryNode	ENTRY		97182		True				
ANR	97207	CFGExitNode	EXIT		97182		True				
ANR	97208	Symbol	prev -> next		97182						
ANR	97209	Symbol	item		97182						
ANR	97210	Symbol	* item		97182						
ANR	97211	Symbol	prev		97182						
ANR	97212	Symbol	item -> prev		97182						
ANR	97213	Symbol	* prev		97182						
ANR	97214	Function	create_reference	495:0:15838:16038							
ANR	97215	FunctionDef	create_reference (cJSON * item)		97214	0					
ANR	97216	CompoundStatement		495:44:15882:16038	97214	0					
ANR	97217	IdentifierDeclStatement	cJSON * ref = cJSON_New_Item ( ) ;	495:0:15883:15910	97214	0	True				
ANR	97218	IdentifierDecl	* ref = cJSON_New_Item ( )		97214	0					
ANR	97219	IdentifierDeclType	cJSON *		97214	0					
ANR	97220	Identifier	ref		97214	1					
ANR	97221	AssignmentExpression	* ref = cJSON_New_Item ( )		97214	2		=			
ANR	97222	Identifier	ref		97214	0					
ANR	97223	CallExpression	cJSON_New_Item ( )		97214	1					
ANR	97224	Callee	cJSON_New_Item		97214	0					
ANR	97225	Identifier	cJSON_New_Item		97214	0					
ANR	97226	ArgumentList			97214	1					
ANR	97227	IfStatement	if ( ! ref )		97214	1					
ANR	97228	Condition	! ref	495:32:15915:15918	97214	0	True				
ANR	97229	UnaryOperationExpression	! ref		97214	0					
ANR	97230	UnaryOperator	!		97214	0					
ANR	97231	Identifier	ref		97214	1					
ANR	97232	ReturnStatement	return 0 ;	495:38:15921:15929	97214	1	True				
ANR	97233	PrimaryExpression	0		97214	0					
ANR	97234	ExpressionStatement	"memcpy ( ref , item , sizeof ( cJSON ) )"	496:0:15931:15961	97214	2	True				
ANR	97235	CallExpression	"memcpy ( ref , item , sizeof ( cJSON ) )"		97214	0					
ANR	97236	Callee	memcpy		97214	0					
ANR	97237	Identifier	memcpy		97214	0					
ANR	97238	ArgumentList	ref		97214	1					
ANR	97239	Argument	ref		97214	0					
ANR	97240	Identifier	ref		97214	0					
ANR	97241	Argument	item		97214	1					
ANR	97242	Identifier	item		97214	0					
ANR	97243	Argument	sizeof ( cJSON )		97214	2					
ANR	97244	SizeofExpression	sizeof ( cJSON )		97214	0					
ANR	97245	Sizeof	sizeof		97214	0					
ANR	97246	SizeofOperand	cJSON		97214	1					
ANR	97247	ExpressionStatement	ref -> string = 0	496:31:15962:15975	97214	3	True				
ANR	97248	AssignmentExpression	ref -> string = 0		97214	0		=			
ANR	97249	PtrMemberAccess	ref -> string		97214	0					
ANR	97250	Identifier	ref		97214	0					
ANR	97251	Identifier	string		97214	1					
ANR	97252	PrimaryExpression	0		97214	1					
ANR	97253	ExpressionStatement	ref -> type |= cJSON_IsReference	496:45:15976:16004	97214	4	True				
ANR	97254	AssignmentExpression	ref -> type |= cJSON_IsReference		97214	0		|=			
ANR	97255	PtrMemberAccess	ref -> type		97214	0					
ANR	97256	Identifier	ref		97214	0					
ANR	97257	Identifier	type		97214	1					
ANR	97258	Identifier	cJSON_IsReference		97214	1					
ANR	97259	ExpressionStatement	ref -> next = ref -> prev = 0	496:74:16005:16026	97214	5	True				
ANR	97260	AssignmentExpression	ref -> next = ref -> prev = 0		97214	0		=			
ANR	97261	PtrMemberAccess	ref -> next		97214	0					
ANR	97262	Identifier	ref		97214	0					
ANR	97263	Identifier	next		97214	1					
ANR	97264	AssignmentExpression	ref -> prev = 0		97214	1		=			
ANR	97265	PtrMemberAccess	ref -> prev		97214	0					
ANR	97266	Identifier	ref		97214	0					
ANR	97267	Identifier	prev		97214	1					
ANR	97268	PrimaryExpression	0		97214	1					
ANR	97269	ReturnStatement	return ref ;	496:96:16027:16037	97214	6	True				
ANR	97270	Identifier	ref		97214	0					
ANR	97271	ReturnType	static cJSON *		97214	1					
ANR	97272	Identifier	create_reference		97214	2					
ANR	97273	ParameterList	cJSON * item		97214	3					
ANR	97274	Parameter	cJSON * item	495:31:15869:15879	97214	0	True				
ANR	97275	ParameterType	cJSON *		97214	0					
ANR	97276	Identifier	item		97214	1					
ANR	97277	CFGEntryNode	ENTRY		97214		True				
ANR	97278	CFGExitNode	EXIT		97214		True				
ANR	97279	Symbol	item		97214						
ANR	97280	Symbol	ref		97214						
ANR	97281	Symbol	ref -> prev		97214						
ANR	97282	Symbol	cJSON_New_Item		97214						
ANR	97283	Symbol	ref -> next		97214						
ANR	97284	Symbol	ref -> type		97214						
ANR	97285	Symbol	cJSON_IsReference		97214						
ANR	97286	Symbol	ref -> string		97214						
ANR	97287	Symbol	* ref		97214						
ANR	97288	Function	cJSON_AddItemToArray	499:0:16073:16266							
ANR	97289	FunctionDef	"cJSON_AddItemToArray (cJSON * array , cJSON * item)"		97288	0					
ANR	97290	CompoundStatement		499:59:16132:16266	97288	0					
ANR	97291	IdentifierDeclStatement	cJSON * c = array -> child ;	499:0:16133:16154	97288	0	True				
ANR	97292	IdentifierDecl	* c = array -> child		97288	0					
ANR	97293	IdentifierDeclType	cJSON *		97288	0					
ANR	97294	Identifier	c		97288	1					
ANR	97295	AssignmentExpression	* c = array -> child		97288	2		=			
ANR	97296	Identifier	c		97288	0					
ANR	97297	PtrMemberAccess	array -> child		97288	1					
ANR	97298	Identifier	array		97288	0					
ANR	97299	Identifier	child		97288	1					
ANR	97300	IfStatement	if ( ! item )		97288	1					
ANR	97301	Condition	! item	500:5:16161:16165	97288	0	True				
ANR	97302	UnaryOperationExpression	! item		97288	0					
ANR	97303	UnaryOperator	!		97288	0					
ANR	97304	Identifier	item		97288	1					
ANR	97305	ReturnStatement	return ;	500:12:16168:16174	97288	1	True				
ANR	97306	IfStatement	if ( ! c )		97288	2					
ANR	97307	Condition	! c	500:24:16180:16181	97288	0	True				
ANR	97308	UnaryOperationExpression	! c		97288	0					
ANR	97309	UnaryOperator	!		97288	0					
ANR	97310	Identifier	c		97288	1					
ANR	97311	CompoundStatement		2:28:51:51	97288	1					
ANR	97312	ExpressionStatement	array -> child = item	500:29:16185:16202	97288	0	True				
ANR	97313	AssignmentExpression	array -> child = item		97288	0		=			
ANR	97314	PtrMemberAccess	array -> child		97288	0					
ANR	97315	Identifier	array		97288	0					
ANR	97316	Identifier	child		97288	1					
ANR	97317	Identifier	item		97288	1					
ANR	97318	ElseStatement	else		97288	0					
ANR	97319	CompoundStatement		2:54:77:77	97288	0					
ANR	97320	WhileStatement	while ( c && c -> next )		97288	0					
ANR	97321	Condition	c && c -> next	500:62:16218:16229	97288	0	True				
ANR	97322	AndExpression	c && c -> next		97288	0		&&			
ANR	97323	Identifier	c		97288	0					
ANR	97324	PtrMemberAccess	c -> next		97288	1					
ANR	97325	Identifier	c		97288	0					
ANR	97326	Identifier	next		97288	1					
ANR	97327	ExpressionStatement	c = c -> next	500:76:16232:16241	97288	1	True				
ANR	97328	AssignmentExpression	c = c -> next		97288	0		=			
ANR	97329	Identifier	c		97288	0					
ANR	97330	PtrMemberAccess	c -> next		97288	1					
ANR	97331	Identifier	c		97288	0					
ANR	97332	Identifier	next		97288	1					
ANR	97333	ExpressionStatement	"suffix_object ( c , item )"	500:87:16243:16264	97288	1	True				
ANR	97334	CallExpression	"suffix_object ( c , item )"		97288	0					
ANR	97335	Callee	suffix_object		97288	0					
ANR	97336	Identifier	suffix_object		97288	0					
ANR	97337	ArgumentList	c		97288	1					
ANR	97338	Argument	c		97288	0					
ANR	97339	Identifier	c		97288	0					
ANR	97340	Argument	item		97288	1					
ANR	97341	Identifier	item		97288	0					
ANR	97342	ReturnType	void		97288	1					
ANR	97343	Identifier	cJSON_AddItemToArray		97288	2					
ANR	97344	ParameterList	"cJSON * array , cJSON * item"		97288	3					
ANR	97345	Parameter	cJSON * array	499:28:16101:16112	97288	0	True				
ANR	97346	ParameterType	cJSON *		97288	0					
ANR	97347	Identifier	array		97288	1					
ANR	97348	Parameter	cJSON * item	499:42:16115:16125	97288	1	True				
ANR	97349	ParameterType	cJSON *		97288	0					
ANR	97350	Identifier	item		97288	1					
ANR	97351	CFGEntryNode	ENTRY		97288		True				
ANR	97352	CFGExitNode	EXIT		97288		True				
ANR	97353	Symbol	item		97288						
ANR	97354	Symbol	c -> next		97288						
ANR	97355	Symbol	c		97288						
ANR	97356	Symbol	array -> child		97288						
ANR	97357	Symbol	array		97288						
ANR	97358	Symbol	* c		97288						
ANR	97359	Symbol	* array		97288						
ANR	97360	Function	cJSON_AddItemToObject	501:0:16268:16477							
ANR	97361	FunctionDef	"cJSON_AddItemToObject (cJSON * object , const char * string , cJSON * item)"		97360	0					
ANR	97362	CompoundStatement		501:75:16343:16477	97360	0					
ANR	97363	IfStatement	if ( ! item )		97360	0					
ANR	97364	Condition	! item	501:4:16348:16352	97360	0	True				
ANR	97365	UnaryOperationExpression	! item		97360	0					
ANR	97366	UnaryOperator	!		97360	0					
ANR	97367	Identifier	item		97360	1					
ANR	97368	ReturnStatement	return ;	501:11:16355:16361	97360	1	True				
ANR	97369	IfStatement	if ( item -> string )		97360	1					
ANR	97370	Condition	item -> string	502:5:16368:16379	97360	0	True				
ANR	97371	PtrMemberAccess	item -> string		97360	0					
ANR	97372	Identifier	item		97360	0					
ANR	97373	Identifier	string		97360	1					
ANR	97374	ExpressionStatement	cJSON_free ( item -> string )	502:19:16382:16406	97360	1	True				
ANR	97375	CallExpression	cJSON_free ( item -> string )		97360	0					
ANR	97376	Callee	cJSON_free		97360	0					
ANR	97377	Identifier	cJSON_free		97360	0					
ANR	97378	ArgumentList	item -> string		97360	1					
ANR	97379	Argument	item -> string		97360	0					
ANR	97380	PtrMemberAccess	item -> string		97360	0					
ANR	97381	Identifier	item		97360	0					
ANR	97382	Identifier	string		97360	1					
ANR	97383	ExpressionStatement	item -> string = cJSON_strdup ( string )	502:44:16407:16440	97360	2	True				
ANR	97384	AssignmentExpression	item -> string = cJSON_strdup ( string )		97360	0		=			
ANR	97385	PtrMemberAccess	item -> string		97360	0					
ANR	97386	Identifier	item		97360	0					
ANR	97387	Identifier	string		97360	1					
ANR	97388	CallExpression	cJSON_strdup ( string )		97360	1					
ANR	97389	Callee	cJSON_strdup		97360	0					
ANR	97390	Identifier	cJSON_strdup		97360	0					
ANR	97391	ArgumentList	string		97360	1					
ANR	97392	Argument	string		97360	0					
ANR	97393	Identifier	string		97360	0					
ANR	97394	ExpressionStatement	"cJSON_AddItemToArray ( object , item )"	503:1:16443:16476	97360	3	True				
ANR	97395	CallExpression	"cJSON_AddItemToArray ( object , item )"		97360	0					
ANR	97396	Callee	cJSON_AddItemToArray		97360	0					
ANR	97397	Identifier	cJSON_AddItemToArray		97360	0					
ANR	97398	ArgumentList	object		97360	1					
ANR	97399	Argument	object		97360	0					
ANR	97400	Identifier	object		97360	0					
ANR	97401	Argument	item		97360	1					
ANR	97402	Identifier	item		97360	0					
ANR	97403	ReturnType	void		97360	1					
ANR	97404	Identifier	cJSON_AddItemToObject		97360	2					
ANR	97405	ParameterList	"cJSON * object , const char * string , cJSON * item"		97360	3					
ANR	97406	Parameter	cJSON * object	501:29:16297:16309	97360	0	True				
ANR	97407	ParameterType	cJSON *		97360	0					
ANR	97408	Identifier	object		97360	1					
ANR	97409	Parameter	const char * string	501:43:16311:16328	97360	1	True				
ANR	97410	ParameterType	const char *		97360	0					
ANR	97411	Identifier	string		97360	1					
ANR	97412	Parameter	cJSON * item	501:62:16330:16340	97360	2	True				
ANR	97413	ParameterType	cJSON *		97360	0					
ANR	97414	Identifier	item		97360	1					
ANR	97415	CFGEntryNode	ENTRY		97360		True				
ANR	97416	CFGExitNode	EXIT		97360		True				
ANR	97417	Symbol	item		97360						
ANR	97418	Symbol	string		97360						
ANR	97419	Symbol	* item		97360						
ANR	97420	Symbol	item -> string		97360						
ANR	97421	Symbol	object		97360						
ANR	97422	Symbol	cJSON_strdup		97360						
ANR	97423	Function	cJSON_AddItemReferenceToArray	504:0:16479:16597							
ANR	97424	FunctionDef	"cJSON_AddItemReferenceToArray (cJSON * array , cJSON * item)"		97423	0					
ANR	97425	CompoundStatement		504:64:16543:16597	97423	0					
ANR	97426	ExpressionStatement	"cJSON_AddItemToArray ( array , create_reference ( item ) )"	504:0:16544:16596	97423	0	True				
ANR	97427	CallExpression	"cJSON_AddItemToArray ( array , create_reference ( item ) )"		97423	0					
ANR	97428	Callee	cJSON_AddItemToArray		97423	0					
ANR	97429	Identifier	cJSON_AddItemToArray		97423	0					
ANR	97430	ArgumentList	array		97423	1					
ANR	97431	Argument	array		97423	0					
ANR	97432	Identifier	array		97423	0					
ANR	97433	Argument	create_reference ( item )		97423	1					
ANR	97434	CallExpression	create_reference ( item )		97423	0					
ANR	97435	Callee	create_reference		97423	0					
ANR	97436	Identifier	create_reference		97423	0					
ANR	97437	ArgumentList	item		97423	1					
ANR	97438	Argument	item		97423	0					
ANR	97439	Identifier	item		97423	0					
ANR	97440	ReturnType	void		97423	1					
ANR	97441	Identifier	cJSON_AddItemReferenceToArray		97423	2					
ANR	97442	ParameterList	"cJSON * array , cJSON * item"		97423	3					
ANR	97443	Parameter	cJSON * array	504:35:16514:16525	97423	0	True				
ANR	97444	ParameterType	cJSON *		97423	0					
ANR	97445	Identifier	array		97423	1					
ANR	97446	Parameter	cJSON * item	504:49:16528:16538	97423	1	True				
ANR	97447	ParameterType	cJSON *		97423	0					
ANR	97448	Identifier	item		97423	1					
ANR	97449	CFGEntryNode	ENTRY		97423		True				
ANR	97450	CFGExitNode	EXIT		97423		True				
ANR	97451	Symbol	create_reference		97423						
ANR	97452	Symbol	item		97423						
ANR	97453	Symbol	array		97423						
ANR	97454	Function	cJSON_AddItemReferenceToObject	506:0:16599:16744							
ANR	97455	FunctionDef	"cJSON_AddItemReferenceToObject (cJSON * object , const char * string , cJSON * item)"		97454	0					
ANR	97456	CompoundStatement		506:82:16681:16744	97454	0					
ANR	97457	ExpressionStatement	"cJSON_AddItemToObject ( object , string , create_reference ( item ) )"	506:0:16682:16743	97454	0	True				
ANR	97458	CallExpression	"cJSON_AddItemToObject ( object , string , create_reference ( item ) )"		97454	0					
ANR	97459	Callee	cJSON_AddItemToObject		97454	0					
ANR	97460	Identifier	cJSON_AddItemToObject		97454	0					
ANR	97461	ArgumentList	object		97454	1					
ANR	97462	Argument	object		97454	0					
ANR	97463	Identifier	object		97454	0					
ANR	97464	Argument	string		97454	1					
ANR	97465	Identifier	string		97454	0					
ANR	97466	Argument	create_reference ( item )		97454	2					
ANR	97467	CallExpression	create_reference ( item )		97454	0					
ANR	97468	Callee	create_reference		97454	0					
ANR	97469	Identifier	create_reference		97454	0					
ANR	97470	ArgumentList	item		97454	1					
ANR	97471	Argument	item		97454	0					
ANR	97472	Identifier	item		97454	0					
ANR	97473	ReturnType	void		97454	1					
ANR	97474	Identifier	cJSON_AddItemReferenceToObject		97454	2					
ANR	97475	ParameterList	"cJSON * object , const char * string , cJSON * item"		97454	3					
ANR	97476	Parameter	cJSON * object	506:36:16635:16647	97454	0	True				
ANR	97477	ParameterType	cJSON *		97454	0					
ANR	97478	Identifier	object		97454	1					
ANR	97479	Parameter	const char * string	506:50:16649:16666	97454	1	True				
ANR	97480	ParameterType	const char *		97454	0					
ANR	97481	Identifier	string		97454	1					
ANR	97482	Parameter	cJSON * item	506:69:16668:16678	97454	2	True				
ANR	97483	ParameterType	cJSON *		97454	0					
ANR	97484	Identifier	item		97454	1					
ANR	97485	CFGEntryNode	ENTRY		97454		True				
ANR	97486	CFGExitNode	EXIT		97454		True				
ANR	97487	Symbol	create_reference		97454						
ANR	97488	Symbol	item		97454						
ANR	97489	Symbol	string		97454						
ANR	97490	Symbol	object		97454						
ANR	97491	Function	cJSON_DetachItemFromArray	509:0:16747:17030							
ANR	97492	FunctionDef	"cJSON_DetachItemFromArray (cJSON * array , int which)"		97491	0					
ANR	97493	CompoundStatement		509:59:16806:17030	97491	0					
ANR	97494	IdentifierDeclStatement	cJSON * c = array -> child ;	509:0:16807:16828	97491	0	True				
ANR	97495	IdentifierDecl	* c = array -> child		97491	0					
ANR	97496	IdentifierDeclType	cJSON *		97491	0					
ANR	97497	Identifier	c		97491	1					
ANR	97498	AssignmentExpression	* c = array -> child		97491	2		=			
ANR	97499	Identifier	c		97491	0					
ANR	97500	PtrMemberAccess	array -> child		97491	1					
ANR	97501	Identifier	array		97491	0					
ANR	97502	Identifier	child		97491	1					
ANR	97503	WhileStatement	while ( c && which > 0 )		97491	1					
ANR	97504	Condition	c && which > 0	510:8:16838:16849	97491	0	True				
ANR	97505	AndExpression	c && which > 0		97491	0		&&			
ANR	97506	Identifier	c		97491	0					
ANR	97507	RelationalExpression	which > 0		97491	1		>			
ANR	97508	Identifier	which		97491	0					
ANR	97509	PrimaryExpression	0		97491	1					
ANR	97510	ExpressionStatement	"c = c -> next , which --"	510:22:16852:16869	97491	1	True				
ANR	97511	Expression	"c = c -> next , which --"		97491	0					
ANR	97512	AssignmentExpression	c = c -> next		97491	0		=			
ANR	97513	Identifier	c		97491	0					
ANR	97514	PtrMemberAccess	c -> next		97491	1					
ANR	97515	Identifier	c		97491	0					
ANR	97516	Identifier	next		97491	1					
ANR	97517	PostIncDecOperationExpression	which --		97491	1					
ANR	97518	Identifier	which		97491	0					
ANR	97519	IncDec	--		97491	1					
ANR	97520	IfStatement	if ( ! c )		97491	2					
ANR	97521	Condition	! c	510:44:16874:16875	97491	0	True				
ANR	97522	UnaryOperationExpression	! c		97491	0					
ANR	97523	UnaryOperator	!		97491	0					
ANR	97524	Identifier	c		97491	1					
ANR	97525	ReturnStatement	return 0 ;	510:48:16878:16886	97491	1	True				
ANR	97526	PrimaryExpression	0		97491	0					
ANR	97527	IfStatement	if ( c -> prev )		97491	3					
ANR	97528	Condition	c -> prev	511:5:16893:16899	97491	0	True				
ANR	97529	PtrMemberAccess	c -> prev		97491	0					
ANR	97530	Identifier	c		97491	0					
ANR	97531	Identifier	prev		97491	1					
ANR	97532	ExpressionStatement	c -> prev -> next = c -> next	511:14:16902:16923	97491	1	True				
ANR	97533	AssignmentExpression	c -> prev -> next = c -> next		97491	0		=			
ANR	97534	PtrMemberAccess	c -> prev -> next		97491	0					
ANR	97535	PtrMemberAccess	c -> prev		97491	0					
ANR	97536	Identifier	c		97491	0					
ANR	97537	Identifier	prev		97491	1					
ANR	97538	Identifier	next		97491	1					
ANR	97539	PtrMemberAccess	c -> next		97491	1					
ANR	97540	Identifier	c		97491	0					
ANR	97541	Identifier	next		97491	1					
ANR	97542	IfStatement	if ( c -> next )		97491	4					
ANR	97543	Condition	c -> next	511:40:16928:16934	97491	0	True				
ANR	97544	PtrMemberAccess	c -> next		97491	0					
ANR	97545	Identifier	c		97491	0					
ANR	97546	Identifier	next		97491	1					
ANR	97547	ExpressionStatement	c -> next -> prev = c -> prev	511:49:16937:16958	97491	1	True				
ANR	97548	AssignmentExpression	c -> next -> prev = c -> prev		97491	0		=			
ANR	97549	PtrMemberAccess	c -> next -> prev		97491	0					
ANR	97550	PtrMemberAccess	c -> next		97491	0					
ANR	97551	Identifier	c		97491	0					
ANR	97552	Identifier	next		97491	1					
ANR	97553	Identifier	prev		97491	1					
ANR	97554	PtrMemberAccess	c -> prev		97491	1					
ANR	97555	Identifier	c		97491	0					
ANR	97556	Identifier	prev		97491	1					
ANR	97557	IfStatement	if ( c == array -> child )		97491	5					
ANR	97558	Condition	c == array -> child	512:5:16965:16979	97491	0	True				
ANR	97559	EqualityExpression	c == array -> child		97491	0		==			
ANR	97560	Identifier	c		97491	0					
ANR	97561	PtrMemberAccess	array -> child		97491	1					
ANR	97562	Identifier	array		97491	0					
ANR	97563	Identifier	child		97491	1					
ANR	97564	ExpressionStatement	array -> child = c -> next	512:22:16982:17002	97491	1	True				
ANR	97565	AssignmentExpression	array -> child = c -> next		97491	0		=			
ANR	97566	PtrMemberAccess	array -> child		97491	0					
ANR	97567	Identifier	array		97491	0					
ANR	97568	Identifier	child		97491	1					
ANR	97569	PtrMemberAccess	c -> next		97491	1					
ANR	97570	Identifier	c		97491	0					
ANR	97571	Identifier	next		97491	1					
ANR	97572	ExpressionStatement	c -> prev = c -> next = 0	512:43:17003:17020	97491	6	True				
ANR	97573	AssignmentExpression	c -> prev = c -> next = 0		97491	0		=			
ANR	97574	PtrMemberAccess	c -> prev		97491	0					
ANR	97575	Identifier	c		97491	0					
ANR	97576	Identifier	prev		97491	1					
ANR	97577	AssignmentExpression	c -> next = 0		97491	1		=			
ANR	97578	PtrMemberAccess	c -> next		97491	0					
ANR	97579	Identifier	c		97491	0					
ANR	97580	Identifier	next		97491	1					
ANR	97581	PrimaryExpression	0		97491	1					
ANR	97582	ReturnStatement	return c ;	512:61:17021:17029	97491	7	True				
ANR	97583	Identifier	c		97491	0					
ANR	97584	ReturnType	cJSON *		97491	1					
ANR	97585	Identifier	cJSON_DetachItemFromArray		97491	2					
ANR	97586	ParameterList	"cJSON * array , int which"		97491	3					
ANR	97587	Parameter	cJSON * array	509:33:16780:16791	97491	0	True				
ANR	97588	ParameterType	cJSON *		97491	0					
ANR	97589	Identifier	array		97491	1					
ANR	97590	Parameter	int which	509:46:16793:16801	97491	1	True				
ANR	97591	ParameterType	int		97491	0					
ANR	97592	Identifier	which		97491	1					
ANR	97593	CFGEntryNode	ENTRY		97491		True				
ANR	97594	CFGExitNode	EXIT		97491		True				
ANR	97595	Symbol	which		97491						
ANR	97596	Symbol	c		97491						
ANR	97597	Symbol	* c -> prev		97491						
ANR	97598	Symbol	* c -> next		97491						
ANR	97599	Symbol	* * c		97491						
ANR	97600	Symbol	c -> prev -> next		97491						
ANR	97601	Symbol	* c		97491						
ANR	97602	Symbol	* array		97491						
ANR	97603	Symbol	c -> next -> prev		97491						
ANR	97604	Symbol	c -> next		97491						
ANR	97605	Symbol	array -> child		97491						
ANR	97606	Symbol	array		97491						
ANR	97607	Symbol	c -> prev		97491						
ANR	97608	Function	cJSON_DeleteItemFromArray	513:0:17032:17144							
ANR	97609	FunctionDef	"cJSON_DeleteItemFromArray (cJSON * array , int which)"		97608	0					
ANR	97610	CompoundStatement		514:1:17090:17144	97608	0					
ANR	97611	ExpressionStatement	"cJSON_Delete ( cJSON_DetachItemFromArray ( array , which ) )"	514:0:17091:17143	97608	0	True				
ANR	97612	CallExpression	"cJSON_Delete ( cJSON_DetachItemFromArray ( array , which ) )"		97608	0					
ANR	97613	Callee	cJSON_Delete		97608	0					
ANR	97614	Identifier	cJSON_Delete		97608	0					
ANR	97615	ArgumentList	"cJSON_DetachItemFromArray ( array , which )"		97608	1					
ANR	97616	Argument	"cJSON_DetachItemFromArray ( array , which )"		97608	0					
ANR	97617	CallExpression	"cJSON_DetachItemFromArray ( array , which )"		97608	0					
ANR	97618	Callee	cJSON_DetachItemFromArray		97608	0					
ANR	97619	Identifier	cJSON_DetachItemFromArray		97608	0					
ANR	97620	ArgumentList	array		97608	1					
ANR	97621	Argument	array		97608	0					
ANR	97622	Identifier	array		97608	0					
ANR	97623	Argument	which		97608	1					
ANR	97624	Identifier	which		97608	0					
ANR	97625	ReturnType	void		97608	1					
ANR	97626	Identifier	cJSON_DeleteItemFromArray		97608	2					
ANR	97627	ParameterList	"cJSON * array , int which"		97608	3					
ANR	97628	Parameter	cJSON * array	513:33:17065:17076	97608	0	True				
ANR	97629	ParameterType	cJSON *		97608	0					
ANR	97630	Identifier	array		97608	1					
ANR	97631	Parameter	int which	513:46:17078:17086	97608	1	True				
ANR	97632	ParameterType	int		97608	0					
ANR	97633	Identifier	which		97608	1					
ANR	97634	CFGEntryNode	ENTRY		97608		True				
ANR	97635	CFGExitNode	EXIT		97608		True				
ANR	97636	Symbol	which		97608						
ANR	97637	Symbol	array		97608						
ANR	97638	Symbol	cJSON_DetachItemFromArray		97608						
ANR	97639	Function	cJSON_DetachItemFromObject	515:0:17146:17371							
ANR	97640	FunctionDef	"cJSON_DetachItemFromObject (cJSON * object , const char * string)"		97639	0					
ANR	97641	CompoundStatement		515:68:17214:17371	97639	0					
ANR	97642	IdentifierDeclStatement	int i = 0 ;	515:0:17215:17222	97639	0	True				
ANR	97643	IdentifierDecl	i = 0		97639	0					
ANR	97644	IdentifierDeclType	int		97639	0					
ANR	97645	Identifier	i		97639	1					
ANR	97646	AssignmentExpression	i = 0		97639	2		=			
ANR	97647	Identifier	i		97639	0					
ANR	97648	PrimaryExpression	0		97639	1					
ANR	97649	IdentifierDeclStatement	cJSON * c = object -> child ;	515:8:17223:17245	97639	1	True				
ANR	97650	IdentifierDecl	* c = object -> child		97639	0					
ANR	97651	IdentifierDeclType	cJSON *		97639	0					
ANR	97652	Identifier	c		97639	1					
ANR	97653	AssignmentExpression	* c = object -> child		97639	2		=			
ANR	97654	Identifier	c		97639	0					
ANR	97655	PtrMemberAccess	object -> child		97639	1					
ANR	97656	Identifier	object		97639	0					
ANR	97657	Identifier	child		97639	1					
ANR	97658	WhileStatement	"while ( c && cJSON_strcasecmp ( c -> string , string ) )"		97639	2					
ANR	97659	Condition	"c && cJSON_strcasecmp ( c -> string , string )"	516:8:17255:17293	97639	0	True				
ANR	97660	AndExpression	"c && cJSON_strcasecmp ( c -> string , string )"		97639	0		&&			
ANR	97661	Identifier	c		97639	0					
ANR	97662	CallExpression	"cJSON_strcasecmp ( c -> string , string )"		97639	1					
ANR	97663	Callee	cJSON_strcasecmp		97639	0					
ANR	97664	Identifier	cJSON_strcasecmp		97639	0					
ANR	97665	ArgumentList	c -> string		97639	1					
ANR	97666	Argument	c -> string		97639	0					
ANR	97667	PtrMemberAccess	c -> string		97639	0					
ANR	97668	Identifier	c		97639	0					
ANR	97669	Identifier	string		97639	1					
ANR	97670	Argument	string		97639	1					
ANR	97671	Identifier	string		97639	0					
ANR	97672	ExpressionStatement	"i ++ , c = c -> next"	516:49:17296:17309	97639	1	True				
ANR	97673	Expression	"i ++ , c = c -> next"		97639	0					
ANR	97674	PostIncDecOperationExpression	i ++		97639	0					
ANR	97675	Identifier	i		97639	0					
ANR	97676	IncDec	++		97639	1					
ANR	97677	AssignmentExpression	c = c -> next		97639	1		=			
ANR	97678	Identifier	c		97639	0					
ANR	97679	PtrMemberAccess	c -> next		97639	1					
ANR	97680	Identifier	c		97639	0					
ANR	97681	Identifier	next		97639	1					
ANR	97682	IfStatement	if ( c )		97639	3					
ANR	97683	Condition	c	517:5:17316:17316	97639	0	True				
ANR	97684	Identifier	c		97639	0					
ANR	97685	ReturnStatement	"return cJSON_DetachItemFromArray ( object , i ) ;"	517:8:17319:17361	97639	1	True				
ANR	97686	CallExpression	"cJSON_DetachItemFromArray ( object , i )"		97639	0					
ANR	97687	Callee	cJSON_DetachItemFromArray		97639	0					
ANR	97688	Identifier	cJSON_DetachItemFromArray		97639	0					
ANR	97689	ArgumentList	object		97639	1					
ANR	97690	Argument	object		97639	0					
ANR	97691	Identifier	object		97639	0					
ANR	97692	Argument	i		97639	1					
ANR	97693	Identifier	i		97639	0					
ANR	97694	ReturnStatement	return 0 ;	517:51:17362:17370	97639	4	True				
ANR	97695	PrimaryExpression	0		97639	0					
ANR	97696	ReturnType	cJSON *		97639	1					
ANR	97697	Identifier	cJSON_DetachItemFromObject		97639	2					
ANR	97698	ParameterList	"cJSON * object , const char * string"		97639	3					
ANR	97699	Parameter	cJSON * object	515:34:17180:17192	97639	0	True				
ANR	97700	ParameterType	cJSON *		97639	0					
ANR	97701	Identifier	object		97639	1					
ANR	97702	Parameter	const char * string	515:48:17194:17211	97639	1	True				
ANR	97703	ParameterType	const char *		97639	0					
ANR	97704	Identifier	string		97639	1					
ANR	97705	CFGEntryNode	ENTRY		97639		True				
ANR	97706	CFGExitNode	EXIT		97639		True				
ANR	97707	Symbol	c -> next		97639						
ANR	97708	Symbol	object -> child		97639						
ANR	97709	Symbol	c		97639						
ANR	97710	Symbol	string		97639						
ANR	97711	Symbol	i		97639						
ANR	97712	Symbol	* object		97639						
ANR	97713	Symbol	cJSON_strcasecmp		97639						
ANR	97714	Symbol	* c		97639						
ANR	97715	Symbol	object		97639						
ANR	97716	Symbol	c -> string		97639						
ANR	97717	Symbol	cJSON_DetachItemFromArray		97639						
ANR	97718	Function	cJSON_DeleteItemFromObject	518:0:17373:17499							
ANR	97719	FunctionDef	"cJSON_DeleteItemFromObject (cJSON * object , const char * string)"		97718	0					
ANR	97720	CompoundStatement		519:1:17442:17499	97718	0					
ANR	97721	ExpressionStatement	"cJSON_Delete ( cJSON_DetachItemFromObject ( object , string ) )"	519:0:17443:17498	97718	0	True				
ANR	97722	CallExpression	"cJSON_Delete ( cJSON_DetachItemFromObject ( object , string ) )"		97718	0					
ANR	97723	Callee	cJSON_Delete		97718	0					
ANR	97724	Identifier	cJSON_Delete		97718	0					
ANR	97725	ArgumentList	"cJSON_DetachItemFromObject ( object , string )"		97718	1					
ANR	97726	Argument	"cJSON_DetachItemFromObject ( object , string )"		97718	0					
ANR	97727	CallExpression	"cJSON_DetachItemFromObject ( object , string )"		97718	0					
ANR	97728	Callee	cJSON_DetachItemFromObject		97718	0					
ANR	97729	Identifier	cJSON_DetachItemFromObject		97718	0					
ANR	97730	ArgumentList	object		97718	1					
ANR	97731	Argument	object		97718	0					
ANR	97732	Identifier	object		97718	0					
ANR	97733	Argument	string		97718	1					
ANR	97734	Identifier	string		97718	0					
ANR	97735	ReturnType	void		97718	1					
ANR	97736	Identifier	cJSON_DeleteItemFromObject		97718	2					
ANR	97737	ParameterList	"cJSON * object , const char * string"		97718	3					
ANR	97738	Parameter	cJSON * object	518:34:17407:17419	97718	0	True				
ANR	97739	ParameterType	cJSON *		97718	0					
ANR	97740	Identifier	object		97718	1					
ANR	97741	Parameter	const char * string	518:48:17421:17438	97718	1	True				
ANR	97742	ParameterType	const char *		97718	0					
ANR	97743	Identifier	string		97718	1					
ANR	97744	CFGEntryNode	ENTRY		97718		True				
ANR	97745	CFGExitNode	EXIT		97718		True				
ANR	97746	Symbol	string		97718						
ANR	97747	Symbol	cJSON_DetachItemFromObject		97718						
ANR	97748	Symbol	object		97718						
ANR	97749	Function	cJSON_ReplaceItemInArray	522:0:17550:17906							
ANR	97750	FunctionDef	"cJSON_ReplaceItemInArray (cJSON * array , int which , cJSON * newitem)"		97749	0					
ANR	97751	CompoundStatement		522:72:17622:17906	97749	0					
ANR	97752	IdentifierDeclStatement	cJSON * c = array -> child ;	522:0:17623:17644	97749	0	True				
ANR	97753	IdentifierDecl	* c = array -> child		97749	0					
ANR	97754	IdentifierDeclType	cJSON *		97749	0					
ANR	97755	Identifier	c		97749	1					
ANR	97756	AssignmentExpression	* c = array -> child		97749	2		=			
ANR	97757	Identifier	c		97749	0					
ANR	97758	PtrMemberAccess	array -> child		97749	1					
ANR	97759	Identifier	array		97749	0					
ANR	97760	Identifier	child		97749	1					
ANR	97761	WhileStatement	while ( c && which > 0 )		97749	1					
ANR	97762	Condition	c && which > 0	523:8:17654:17665	97749	0	True				
ANR	97763	AndExpression	c && which > 0		97749	0		&&			
ANR	97764	Identifier	c		97749	0					
ANR	97765	RelationalExpression	which > 0		97749	1		>			
ANR	97766	Identifier	which		97749	0					
ANR	97767	PrimaryExpression	0		97749	1					
ANR	97768	ExpressionStatement	"c = c -> next , which --"	523:22:17668:17685	97749	1	True				
ANR	97769	Expression	"c = c -> next , which --"		97749	0					
ANR	97770	AssignmentExpression	c = c -> next		97749	0		=			
ANR	97771	Identifier	c		97749	0					
ANR	97772	PtrMemberAccess	c -> next		97749	1					
ANR	97773	Identifier	c		97749	0					
ANR	97774	Identifier	next		97749	1					
ANR	97775	PostIncDecOperationExpression	which --		97749	1					
ANR	97776	Identifier	which		97749	0					
ANR	97777	IncDec	--		97749	1					
ANR	97778	IfStatement	if ( ! c )		97749	2					
ANR	97779	Condition	! c	523:44:17690:17691	97749	0	True				
ANR	97780	UnaryOperationExpression	! c		97749	0					
ANR	97781	UnaryOperator	!		97749	0					
ANR	97782	Identifier	c		97749	1					
ANR	97783	ReturnStatement	return ;	523:48:17694:17700	97749	1	True				
ANR	97784	ExpressionStatement	newitem -> next = c -> next	524:1:17703:17724	97749	3	True				
ANR	97785	AssignmentExpression	newitem -> next = c -> next		97749	0		=			
ANR	97786	PtrMemberAccess	newitem -> next		97749	0					
ANR	97787	Identifier	newitem		97749	0					
ANR	97788	Identifier	next		97749	1					
ANR	97789	PtrMemberAccess	c -> next		97749	1					
ANR	97790	Identifier	c		97749	0					
ANR	97791	Identifier	next		97749	1					
ANR	97792	ExpressionStatement	newitem -> prev = c -> prev	524:23:17725:17746	97749	4	True				
ANR	97793	AssignmentExpression	newitem -> prev = c -> prev		97749	0		=			
ANR	97794	PtrMemberAccess	newitem -> prev		97749	0					
ANR	97795	Identifier	newitem		97749	0					
ANR	97796	Identifier	prev		97749	1					
ANR	97797	PtrMemberAccess	c -> prev		97749	1					
ANR	97798	Identifier	c		97749	0					
ANR	97799	Identifier	prev		97749	1					
ANR	97800	IfStatement	if ( newitem -> next )		97749	5					
ANR	97801	Condition	newitem -> next	524:49:17751:17763	97749	0	True				
ANR	97802	PtrMemberAccess	newitem -> next		97749	0					
ANR	97803	Identifier	newitem		97749	0					
ANR	97804	Identifier	next		97749	1					
ANR	97805	ExpressionStatement	newitem -> next -> prev = newitem	524:64:17766:17793	97749	1	True				
ANR	97806	AssignmentExpression	newitem -> next -> prev = newitem		97749	0		=			
ANR	97807	PtrMemberAccess	newitem -> next -> prev		97749	0					
ANR	97808	PtrMemberAccess	newitem -> next		97749	0					
ANR	97809	Identifier	newitem		97749	0					
ANR	97810	Identifier	next		97749	1					
ANR	97811	Identifier	prev		97749	1					
ANR	97812	Identifier	newitem		97749	1					
ANR	97813	IfStatement	if ( c == array -> child )		97749	6					
ANR	97814	Condition	c == array -> child	525:5:17800:17814	97749	0	True				
ANR	97815	EqualityExpression	c == array -> child		97749	0		==			
ANR	97816	Identifier	c		97749	0					
ANR	97817	PtrMemberAccess	array -> child		97749	1					
ANR	97818	Identifier	array		97749	0					
ANR	97819	Identifier	child		97749	1					
ANR	97820	ExpressionStatement	array -> child = newitem	525:22:17817:17837	97749	1	True				
ANR	97821	AssignmentExpression	array -> child = newitem		97749	0		=			
ANR	97822	PtrMemberAccess	array -> child		97749	0					
ANR	97823	Identifier	array		97749	0					
ANR	97824	Identifier	child		97749	1					
ANR	97825	Identifier	newitem		97749	1					
ANR	97826	ElseStatement	else		97749	0					
ANR	97827	ExpressionStatement	newitem -> prev -> next = newitem	525:49:17844:17871	97749	0	True				
ANR	97828	AssignmentExpression	newitem -> prev -> next = newitem		97749	0		=			
ANR	97829	PtrMemberAccess	newitem -> prev -> next		97749	0					
ANR	97830	PtrMemberAccess	newitem -> prev		97749	0					
ANR	97831	Identifier	newitem		97749	0					
ANR	97832	Identifier	prev		97749	1					
ANR	97833	Identifier	next		97749	1					
ANR	97834	Identifier	newitem		97749	1					
ANR	97835	ExpressionStatement	c -> next = c -> prev = 0	525:77:17872:17889	97749	7	True				
ANR	97836	AssignmentExpression	c -> next = c -> prev = 0		97749	0		=			
ANR	97837	PtrMemberAccess	c -> next		97749	0					
ANR	97838	Identifier	c		97749	0					
ANR	97839	Identifier	next		97749	1					
ANR	97840	AssignmentExpression	c -> prev = 0		97749	1		=			
ANR	97841	PtrMemberAccess	c -> prev		97749	0					
ANR	97842	Identifier	c		97749	0					
ANR	97843	Identifier	prev		97749	1					
ANR	97844	PrimaryExpression	0		97749	1					
ANR	97845	ExpressionStatement	cJSON_Delete ( c )	525:95:17890:17905	97749	8	True				
ANR	97846	CallExpression	cJSON_Delete ( c )		97749	0					
ANR	97847	Callee	cJSON_Delete		97749	0					
ANR	97848	Identifier	cJSON_Delete		97749	0					
ANR	97849	ArgumentList	c		97749	1					
ANR	97850	Argument	c		97749	0					
ANR	97851	Identifier	c		97749	0					
ANR	97852	ReturnType	void		97749	1					
ANR	97853	Identifier	cJSON_ReplaceItemInArray		97749	2					
ANR	97854	ParameterList	"cJSON * array , int which , cJSON * newitem"		97749	3					
ANR	97855	Parameter	cJSON * array	522:32:17582:17593	97749	0	True				
ANR	97856	ParameterType	cJSON *		97749	0					
ANR	97857	Identifier	array		97749	1					
ANR	97858	Parameter	int which	522:45:17595:17603	97749	1	True				
ANR	97859	ParameterType	int		97749	0					
ANR	97860	Identifier	which		97749	1					
ANR	97861	Parameter	cJSON * newitem	522:55:17605:17618	97749	2	True				
ANR	97862	ParameterType	cJSON *		97749	0					
ANR	97863	Identifier	newitem		97749	1					
ANR	97864	CFGEntryNode	ENTRY		97749		True				
ANR	97865	CFGExitNode	EXIT		97749		True				
ANR	97866	Symbol	which		97749						
ANR	97867	Symbol	c		97749						
ANR	97868	Symbol	newitem -> prev -> next		97749						
ANR	97869	Symbol	* c		97749						
ANR	97870	Symbol	* array		97749						
ANR	97871	Symbol	c -> next		97749						
ANR	97872	Symbol	array -> child		97749						
ANR	97873	Symbol	array		97749						
ANR	97874	Symbol	newitem		97749						
ANR	97875	Symbol	* newitem		97749						
ANR	97876	Symbol	newitem -> prev		97749						
ANR	97877	Symbol	* newitem -> prev		97749						
ANR	97878	Symbol	* newitem -> next		97749						
ANR	97879	Symbol	c -> prev		97749						
ANR	97880	Symbol	newitem -> next		97749						
ANR	97881	Symbol	newitem -> next -> prev		97749						
ANR	97882	Symbol	* * newitem		97749						
ANR	97883	Function	cJSON_ReplaceItemInObject	526:0:17908:18172							
ANR	97884	FunctionDef	"cJSON_ReplaceItemInObject (cJSON * object , const char * string , cJSON * newitem)"		97883	0					
ANR	97885	CompoundStatement		526:81:17989:18172	97883	0					
ANR	97886	IdentifierDeclStatement	int i = 0 ;	526:0:17990:17997	97883	0	True				
ANR	97887	IdentifierDecl	i = 0		97883	0					
ANR	97888	IdentifierDeclType	int		97883	0					
ANR	97889	Identifier	i		97883	1					
ANR	97890	AssignmentExpression	i = 0		97883	2		=			
ANR	97891	Identifier	i		97883	0					
ANR	97892	PrimaryExpression	0		97883	1					
ANR	97893	IdentifierDeclStatement	cJSON * c = object -> child ;	526:8:17998:18020	97883	1	True				
ANR	97894	IdentifierDecl	* c = object -> child		97883	0					
ANR	97895	IdentifierDeclType	cJSON *		97883	0					
ANR	97896	Identifier	c		97883	1					
ANR	97897	AssignmentExpression	* c = object -> child		97883	2		=			
ANR	97898	Identifier	c		97883	0					
ANR	97899	PtrMemberAccess	object -> child		97883	1					
ANR	97900	Identifier	object		97883	0					
ANR	97901	Identifier	child		97883	1					
ANR	97902	WhileStatement	"while ( c && cJSON_strcasecmp ( c -> string , string ) )"		97883	2					
ANR	97903	Condition	"c && cJSON_strcasecmp ( c -> string , string )"	527:7:18029:18067	97883	0	True				
ANR	97904	AndExpression	"c && cJSON_strcasecmp ( c -> string , string )"		97883	0		&&			
ANR	97905	Identifier	c		97883	0					
ANR	97906	CallExpression	"cJSON_strcasecmp ( c -> string , string )"		97883	1					
ANR	97907	Callee	cJSON_strcasecmp		97883	0					
ANR	97908	Identifier	cJSON_strcasecmp		97883	0					
ANR	97909	ArgumentList	c -> string		97883	1					
ANR	97910	Argument	c -> string		97883	0					
ANR	97911	PtrMemberAccess	c -> string		97883	0					
ANR	97912	Identifier	c		97883	0					
ANR	97913	Identifier	string		97883	1					
ANR	97914	Argument	string		97883	1					
ANR	97915	Identifier	string		97883	0					
ANR	97916	ExpressionStatement	"i ++ , c = c -> next"	527:47:18069:18082	97883	1	True				
ANR	97917	Expression	"i ++ , c = c -> next"		97883	0					
ANR	97918	PostIncDecOperationExpression	i ++		97883	0					
ANR	97919	Identifier	i		97883	0					
ANR	97920	IncDec	++		97883	1					
ANR	97921	AssignmentExpression	c = c -> next		97883	1		=			
ANR	97922	Identifier	c		97883	0					
ANR	97923	PtrMemberAccess	c -> next		97883	1					
ANR	97924	Identifier	c		97883	0					
ANR	97925	Identifier	next		97883	1					
ANR	97926	IfStatement	if ( c )		97883	3					
ANR	97927	Condition	c	527:64:18086:18086	97883	0	True				
ANR	97928	Identifier	c		97883	0					
ANR	97929	CompoundStatement		2:66:98:98	97883	1					
ANR	97930	ExpressionStatement	newitem -> string = cJSON_strdup ( string )	527:67:18089:18125	97883	0	True				
ANR	97931	AssignmentExpression	newitem -> string = cJSON_strdup ( string )		97883	0		=			
ANR	97932	PtrMemberAccess	newitem -> string		97883	0					
ANR	97933	Identifier	newitem		97883	0					
ANR	97934	Identifier	string		97883	1					
ANR	97935	CallExpression	cJSON_strdup ( string )		97883	1					
ANR	97936	Callee	cJSON_strdup		97883	0					
ANR	97937	Identifier	cJSON_strdup		97883	0					
ANR	97938	ArgumentList	string		97883	1					
ANR	97939	Argument	string		97883	0					
ANR	97940	Identifier	string		97883	0					
ANR	97941	ExpressionStatement	"cJSON_ReplaceItemInArray ( object , i , newitem )"	528:1:18128:18170	97883	1	True				
ANR	97942	CallExpression	"cJSON_ReplaceItemInArray ( object , i , newitem )"		97883	0					
ANR	97943	Callee	cJSON_ReplaceItemInArray		97883	0					
ANR	97944	Identifier	cJSON_ReplaceItemInArray		97883	0					
ANR	97945	ArgumentList	object		97883	1					
ANR	97946	Argument	object		97883	0					
ANR	97947	Identifier	object		97883	0					
ANR	97948	Argument	i		97883	1					
ANR	97949	Identifier	i		97883	0					
ANR	97950	Argument	newitem		97883	2					
ANR	97951	Identifier	newitem		97883	0					
ANR	97952	ReturnType	void		97883	1					
ANR	97953	Identifier	cJSON_ReplaceItemInObject		97883	2					
ANR	97954	ParameterList	"cJSON * object , const char * string , cJSON * newitem"		97883	3					
ANR	97955	Parameter	cJSON * object	526:33:17941:17953	97883	0	True				
ANR	97956	ParameterType	cJSON *		97883	0					
ANR	97957	Identifier	object		97883	1					
ANR	97958	Parameter	const char * string	526:47:17955:17972	97883	1	True				
ANR	97959	ParameterType	const char *		97883	0					
ANR	97960	Identifier	string		97883	1					
ANR	97961	Parameter	cJSON * newitem	526:66:17974:17987	97883	2	True				
ANR	97962	ParameterType	cJSON *		97883	0					
ANR	97963	Identifier	newitem		97883	1					
ANR	97964	CFGEntryNode	ENTRY		97883		True				
ANR	97965	CFGExitNode	EXIT		97883		True				
ANR	97966	Symbol	c		97883						
ANR	97967	Symbol	newitem -> string		97883						
ANR	97968	Symbol	string		97883						
ANR	97969	Symbol	i		97883						
ANR	97970	Symbol	* object		97883						
ANR	97971	Symbol	* c		97883						
ANR	97972	Symbol	c -> string		97883						
ANR	97973	Symbol	c -> next		97883						
ANR	97974	Symbol	object -> child		97883						
ANR	97975	Symbol	newitem		97883						
ANR	97976	Symbol	* newitem		97883						
ANR	97977	Symbol	cJSON_strcasecmp		97883						
ANR	97978	Symbol	object		97883						
ANR	97979	Symbol	cJSON_strdup		97883						
ANR	97980	Function	cJSON_CreateNull	531:0:18201:18300							
ANR	97981	FunctionDef	cJSON_CreateNull ()		97980	0					
ANR	97982	CompoundStatement		532:1:18228:18300	97980	0					
ANR	97983	IdentifierDeclStatement	cJSON * item = cJSON_New_Item ( ) ;	532:0:18229:18257	97980	0	True				
ANR	97984	IdentifierDecl	* item = cJSON_New_Item ( )		97980	0					
ANR	97985	IdentifierDeclType	cJSON *		97980	0					
ANR	97986	Identifier	item		97980	1					
ANR	97987	AssignmentExpression	* item = cJSON_New_Item ( )		97980	2		=			
ANR	97988	Identifier	item		97980	0					
ANR	97989	CallExpression	cJSON_New_Item ( )		97980	1					
ANR	97990	Callee	cJSON_New_Item		97980	0					
ANR	97991	Identifier	cJSON_New_Item		97980	0					
ANR	97992	ArgumentList			97980	1					
ANR	97993	IfStatement	if ( item )		97980	1					
ANR	97994	Condition	item	532:32:18261:18264	97980	0	True				
ANR	97995	Identifier	item		97980	0					
ANR	97996	ExpressionStatement	item -> type = cJSON_NULL	532:37:18266:18287	97980	1	True				
ANR	97997	AssignmentExpression	item -> type = cJSON_NULL		97980	0		=			
ANR	97998	PtrMemberAccess	item -> type		97980	0					
ANR	97999	Identifier	item		97980	0					
ANR	98000	Identifier	type		97980	1					
ANR	98001	Identifier	cJSON_NULL		97980	1					
ANR	98002	ReturnStatement	return item ;	532:59:18288:18299	97980	2	True				
ANR	98003	Identifier	item		97980	0					
ANR	98004	ReturnType	cJSON *		97980	1					
ANR	98005	Identifier	cJSON_CreateNull		97980	2					
ANR	98006	ParameterList			97980	3					
ANR	98007	CFGEntryNode	ENTRY		97980		True				
ANR	98008	CFGExitNode	EXIT		97980		True				
ANR	98009	Symbol	item		97980						
ANR	98010	Symbol	item -> type		97980						
ANR	98011	Symbol	cJSON_New_Item		97980						
ANR	98012	Symbol	* item		97980						
ANR	98013	Symbol	cJSON_NULL		97980						
ANR	98014	Function	cJSON_CreateTrue	533:0:18302:18401							
ANR	98015	FunctionDef	cJSON_CreateTrue ()		98014	0					
ANR	98016	CompoundStatement		533:25:18327:18401	98014	0					
ANR	98017	IdentifierDeclStatement	cJSON * item = cJSON_New_Item ( ) ;	533:0:18328:18356	98014	0	True				
ANR	98018	IdentifierDecl	* item = cJSON_New_Item ( )		98014	0					
ANR	98019	IdentifierDeclType	cJSON *		98014	0					
ANR	98020	Identifier	item		98014	1					
ANR	98021	AssignmentExpression	* item = cJSON_New_Item ( )		98014	2		=			
ANR	98022	Identifier	item		98014	0					
ANR	98023	CallExpression	cJSON_New_Item ( )		98014	1					
ANR	98024	Callee	cJSON_New_Item		98014	0					
ANR	98025	Identifier	cJSON_New_Item		98014	0					
ANR	98026	ArgumentList			98014	1					
ANR	98027	IfStatement	if ( item )		98014	1					
ANR	98028	Condition	item	534:4:18362:18365	98014	0	True				
ANR	98029	Identifier	item		98014	0					
ANR	98030	ExpressionStatement	item -> type = cJSON_True	534:9:18367:18388	98014	1	True				
ANR	98031	AssignmentExpression	item -> type = cJSON_True		98014	0		=			
ANR	98032	PtrMemberAccess	item -> type		98014	0					
ANR	98033	Identifier	item		98014	0					
ANR	98034	Identifier	type		98014	1					
ANR	98035	Identifier	cJSON_True		98014	1					
ANR	98036	ReturnStatement	return item ;	534:31:18389:18400	98014	2	True				
ANR	98037	Identifier	item		98014	0					
ANR	98038	ReturnType	cJSON *		98014	1					
ANR	98039	Identifier	cJSON_CreateTrue		98014	2					
ANR	98040	ParameterList			98014	3					
ANR	98041	CFGEntryNode	ENTRY		98014		True				
ANR	98042	CFGExitNode	EXIT		98014		True				
ANR	98043	Symbol	item		98014						
ANR	98044	Symbol	item -> type		98014						
ANR	98045	Symbol	cJSON_New_Item		98014						
ANR	98046	Symbol	* item		98014						
ANR	98047	Symbol	cJSON_True		98014						
ANR	98048	Function	cJSON_CreateFalse	535:0:18403:18504							
ANR	98049	FunctionDef	cJSON_CreateFalse ()		98048	0					
ANR	98050	CompoundStatement		536:1:18431:18504	98048	0					
ANR	98051	IdentifierDeclStatement	cJSON * item = cJSON_New_Item ( ) ;	536:0:18432:18460	98048	0	True				
ANR	98052	IdentifierDecl	* item = cJSON_New_Item ( )		98048	0					
ANR	98053	IdentifierDeclType	cJSON *		98048	0					
ANR	98054	Identifier	item		98048	1					
ANR	98055	AssignmentExpression	* item = cJSON_New_Item ( )		98048	2		=			
ANR	98056	Identifier	item		98048	0					
ANR	98057	CallExpression	cJSON_New_Item ( )		98048	1					
ANR	98058	Callee	cJSON_New_Item		98048	0					
ANR	98059	Identifier	cJSON_New_Item		98048	0					
ANR	98060	ArgumentList			98048	1					
ANR	98061	IfStatement	if ( item )		98048	1					
ANR	98062	Condition	item	536:32:18464:18467	98048	0	True				
ANR	98063	Identifier	item		98048	0					
ANR	98064	ExpressionStatement	item -> type = cJSON_False	536:37:18469:18491	98048	1	True				
ANR	98065	AssignmentExpression	item -> type = cJSON_False		98048	0		=			
ANR	98066	PtrMemberAccess	item -> type		98048	0					
ANR	98067	Identifier	item		98048	0					
ANR	98068	Identifier	type		98048	1					
ANR	98069	Identifier	cJSON_False		98048	1					
ANR	98070	ReturnStatement	return item ;	536:60:18492:18503	98048	2	True				
ANR	98071	Identifier	item		98048	0					
ANR	98072	ReturnType	cJSON *		98048	1					
ANR	98073	Identifier	cJSON_CreateFalse		98048	2					
ANR	98074	ParameterList			98048	3					
ANR	98075	CFGEntryNode	ENTRY		98048		True				
ANR	98076	CFGExitNode	EXIT		98048		True				
ANR	98077	Symbol	item		98048						
ANR	98078	Symbol	item -> type		98048						
ANR	98079	Symbol	cJSON_New_Item		98048						
ANR	98080	Symbol	* item		98048						
ANR	98081	Symbol	cJSON_False		98048						
ANR	98082	Function	cJSON_CreateBool	537:0:18506:18624							
ANR	98083	FunctionDef	cJSON_CreateBool (int b)		98082	0					
ANR	98084	CompoundStatement		538:1:18538:18624	98082	0					
ANR	98085	IdentifierDeclStatement	cJSON * item = cJSON_New_Item ( ) ;	538:0:18539:18567	98082	0	True				
ANR	98086	IdentifierDecl	* item = cJSON_New_Item ( )		98082	0					
ANR	98087	IdentifierDeclType	cJSON *		98082	0					
ANR	98088	Identifier	item		98082	1					
ANR	98089	AssignmentExpression	* item = cJSON_New_Item ( )		98082	2		=			
ANR	98090	Identifier	item		98082	0					
ANR	98091	CallExpression	cJSON_New_Item ( )		98082	1					
ANR	98092	Callee	cJSON_New_Item		98082	0					
ANR	98093	Identifier	cJSON_New_Item		98082	0					
ANR	98094	ArgumentList			98082	1					
ANR	98095	IfStatement	if ( item )		98082	1					
ANR	98096	Condition	item	538:32:18571:18574	98082	0	True				
ANR	98097	Identifier	item		98082	0					
ANR	98098	ExpressionStatement	item -> type = b ? cJSON_True : cJSON_False	538:37:18576:18611	98082	1	True				
ANR	98099	AssignmentExpression	item -> type = b ? cJSON_True : cJSON_False		98082	0		=			
ANR	98100	PtrMemberAccess	item -> type		98082	0					
ANR	98101	Identifier	item		98082	0					
ANR	98102	Identifier	type		98082	1					
ANR	98103	ConditionalExpression	b ? cJSON_True : cJSON_False		98082	1					
ANR	98104	Condition	b		98082	0					
ANR	98105	Identifier	b		98082	0					
ANR	98106	Identifier	cJSON_True		98082	1					
ANR	98107	Identifier	cJSON_False		98082	2					
ANR	98108	ReturnStatement	return item ;	538:73:18612:18623	98082	2	True				
ANR	98109	Identifier	item		98082	0					
ANR	98110	ReturnType	cJSON *		98082	1					
ANR	98111	Identifier	cJSON_CreateBool		98082	2					
ANR	98112	ParameterList	int b		98082	3					
ANR	98113	Parameter	int b	537:24:18530:18534	98082	0	True				
ANR	98114	ParameterType	int		98082	0					
ANR	98115	Identifier	b		98082	1					
ANR	98116	CFGEntryNode	ENTRY		98082		True				
ANR	98117	CFGExitNode	EXIT		98082		True				
ANR	98118	Symbol	b		98082						
ANR	98119	Symbol	item		98082						
ANR	98120	Symbol	item -> type		98082						
ANR	98121	Symbol	cJSON_New_Item		98082						
ANR	98122	Symbol	* item		98082						
ANR	98123	Symbol	cJSON_True		98082						
ANR	98124	Symbol	cJSON_False		98082						
ANR	98125	Function	cJSON_CreateNumber	539:0:18626:18787							
ANR	98126	FunctionDef	cJSON_CreateNumber (double num)		98125	0					
ANR	98127	CompoundStatement		539:37:18663:18787	98125	0					
ANR	98128	IdentifierDeclStatement	cJSON * item = cJSON_New_Item ( ) ;	539:0:18664:18692	98125	0	True				
ANR	98129	IdentifierDecl	* item = cJSON_New_Item ( )		98125	0					
ANR	98130	IdentifierDeclType	cJSON *		98125	0					
ANR	98131	Identifier	item		98125	1					
ANR	98132	AssignmentExpression	* item = cJSON_New_Item ( )		98125	2		=			
ANR	98133	Identifier	item		98125	0					
ANR	98134	CallExpression	cJSON_New_Item ( )		98125	1					
ANR	98135	Callee	cJSON_New_Item		98125	0					
ANR	98136	Identifier	cJSON_New_Item		98125	0					
ANR	98137	ArgumentList			98125	1					
ANR	98138	IfStatement	if ( item )		98125	1					
ANR	98139	Condition	item	540:4:18698:18701	98125	0	True				
ANR	98140	Identifier	item		98125	0					
ANR	98141	CompoundStatement		2:9:39:39	98125	1					
ANR	98142	ExpressionStatement	item -> type = cJSON_Number	540:10:18704:18727	98125	0	True				
ANR	98143	AssignmentExpression	item -> type = cJSON_Number		98125	0		=			
ANR	98144	PtrMemberAccess	item -> type		98125	0					
ANR	98145	Identifier	item		98125	0					
ANR	98146	Identifier	type		98125	1					
ANR	98147	Identifier	cJSON_Number		98125	1					
ANR	98148	ExpressionStatement	item -> valuedouble = num	540:34:18728:18749	98125	1	True				
ANR	98149	AssignmentExpression	item -> valuedouble = num		98125	0		=			
ANR	98150	PtrMemberAccess	item -> valuedouble		98125	0					
ANR	98151	Identifier	item		98125	0					
ANR	98152	Identifier	valuedouble		98125	1					
ANR	98153	Identifier	num		98125	1					
ANR	98154	ExpressionStatement	item -> valueint = ( int ) num	540:56:18750:18773	98125	2	True				
ANR	98155	AssignmentExpression	item -> valueint = ( int ) num		98125	0		=			
ANR	98156	PtrMemberAccess	item -> valueint		98125	0					
ANR	98157	Identifier	item		98125	0					
ANR	98158	Identifier	valueint		98125	1					
ANR	98159	CastExpression	( int ) num		98125	1					
ANR	98160	CastTarget	int		98125	0					
ANR	98161	Identifier	num		98125	1					
ANR	98162	ReturnStatement	return item ;	540:81:18775:18786	98125	2	True				
ANR	98163	Identifier	item		98125	0					
ANR	98164	ReturnType	cJSON *		98125	1					
ANR	98165	Identifier	cJSON_CreateNumber		98125	2					
ANR	98166	ParameterList	double num		98125	3					
ANR	98167	Parameter	double num	539:26:18652:18661	98125	0	True				
ANR	98168	ParameterType	double		98125	0					
ANR	98169	Identifier	num		98125	1					
ANR	98170	CFGEntryNode	ENTRY		98125		True				
ANR	98171	CFGExitNode	EXIT		98125		True				
ANR	98172	Symbol	item		98125						
ANR	98173	Symbol	item -> type		98125						
ANR	98174	Symbol	cJSON_New_Item		98125						
ANR	98175	Symbol	* item		98125						
ANR	98176	Symbol	num		98125						
ANR	98177	Symbol	cJSON_Number		98125						
ANR	98178	Symbol	item -> valuedouble		98125						
ANR	98179	Symbol	item -> valueint		98125						
ANR	98180	Function	cJSON_CreateString	541:0:18789:18952							
ANR	98181	FunctionDef	cJSON_CreateString (const char * string)		98180	0					
ANR	98182	CompoundStatement		541:46:18835:18952	98180	0					
ANR	98183	IdentifierDeclStatement	cJSON * item = cJSON_New_Item ( ) ;	541:0:18836:18864	98180	0	True				
ANR	98184	IdentifierDecl	* item = cJSON_New_Item ( )		98180	0					
ANR	98185	IdentifierDeclType	cJSON *		98180	0					
ANR	98186	Identifier	item		98180	1					
ANR	98187	AssignmentExpression	* item = cJSON_New_Item ( )		98180	2		=			
ANR	98188	Identifier	item		98180	0					
ANR	98189	CallExpression	cJSON_New_Item ( )		98180	1					
ANR	98190	Callee	cJSON_New_Item		98180	0					
ANR	98191	Identifier	cJSON_New_Item		98180	0					
ANR	98192	ArgumentList			98180	1					
ANR	98193	IfStatement	if ( item )		98180	1					
ANR	98194	Condition	item	541:32:18868:18871	98180	0	True				
ANR	98195	Identifier	item		98180	0					
ANR	98196	CompoundStatement		1:37:37:37	98180	1					
ANR	98197	ExpressionStatement	item -> type = cJSON_String	541:38:18874:18897	98180	0	True				
ANR	98198	AssignmentExpression	item -> type = cJSON_String		98180	0		=			
ANR	98199	PtrMemberAccess	item -> type		98180	0					
ANR	98200	Identifier	item		98180	0					
ANR	98201	Identifier	type		98180	1					
ANR	98202	Identifier	cJSON_String		98180	1					
ANR	98203	ExpressionStatement	item -> valuestring = cJSON_strdup ( string )	542:1:18900:18938	98180	1	True				
ANR	98204	AssignmentExpression	item -> valuestring = cJSON_strdup ( string )		98180	0		=			
ANR	98205	PtrMemberAccess	item -> valuestring		98180	0					
ANR	98206	Identifier	item		98180	0					
ANR	98207	Identifier	valuestring		98180	1					
ANR	98208	CallExpression	cJSON_strdup ( string )		98180	1					
ANR	98209	Callee	cJSON_strdup		98180	0					
ANR	98210	Identifier	cJSON_strdup		98180	0					
ANR	98211	ArgumentList	string		98180	1					
ANR	98212	Argument	string		98180	0					
ANR	98213	Identifier	string		98180	0					
ANR	98214	ReturnStatement	return item ;	542:41:18940:18951	98180	2	True				
ANR	98215	Identifier	item		98180	0					
ANR	98216	ReturnType	cJSON *		98180	1					
ANR	98217	Identifier	cJSON_CreateString		98180	2					
ANR	98218	ParameterList	const char * string		98180	3					
ANR	98219	Parameter	const char * string	541:26:18815:18832	98180	0	True				
ANR	98220	ParameterType	const char *		98180	0					
ANR	98221	Identifier	string		98180	1					
ANR	98222	CFGEntryNode	ENTRY		98180		True				
ANR	98223	CFGExitNode	EXIT		98180		True				
ANR	98224	Symbol	item		98180						
ANR	98225	Symbol	item -> type		98180						
ANR	98226	Symbol	cJSON_New_Item		98180						
ANR	98227	Symbol	string		98180						
ANR	98228	Symbol	* item		98180						
ANR	98229	Symbol	cJSON_String		98180						
ANR	98230	Symbol	item -> valuestring		98180						
ANR	98231	Symbol	cJSON_strdup		98180						
ANR	98232	Function	cJSON_CreateArray	543:0:18954:19055							
ANR	98233	FunctionDef	cJSON_CreateArray ()		98232	0					
ANR	98234	CompoundStatement		544:1:18982:19055	98232	0					
ANR	98235	IdentifierDeclStatement	cJSON * item = cJSON_New_Item ( ) ;	544:0:18983:19011	98232	0	True				
ANR	98236	IdentifierDecl	* item = cJSON_New_Item ( )		98232	0					
ANR	98237	IdentifierDeclType	cJSON *		98232	0					
ANR	98238	Identifier	item		98232	1					
ANR	98239	AssignmentExpression	* item = cJSON_New_Item ( )		98232	2		=			
ANR	98240	Identifier	item		98232	0					
ANR	98241	CallExpression	cJSON_New_Item ( )		98232	1					
ANR	98242	Callee	cJSON_New_Item		98232	0					
ANR	98243	Identifier	cJSON_New_Item		98232	0					
ANR	98244	ArgumentList			98232	1					
ANR	98245	IfStatement	if ( item )		98232	1					
ANR	98246	Condition	item	544:32:19015:19018	98232	0	True				
ANR	98247	Identifier	item		98232	0					
ANR	98248	ExpressionStatement	item -> type = cJSON_Array	544:37:19020:19042	98232	1	True				
ANR	98249	AssignmentExpression	item -> type = cJSON_Array		98232	0		=			
ANR	98250	PtrMemberAccess	item -> type		98232	0					
ANR	98251	Identifier	item		98232	0					
ANR	98252	Identifier	type		98232	1					
ANR	98253	Identifier	cJSON_Array		98232	1					
ANR	98254	ReturnStatement	return item ;	544:60:19043:19054	98232	2	True				
ANR	98255	Identifier	item		98232	0					
ANR	98256	ReturnType	cJSON *		98232	1					
ANR	98257	Identifier	cJSON_CreateArray		98232	2					
ANR	98258	ParameterList			98232	3					
ANR	98259	CFGEntryNode	ENTRY		98232		True				
ANR	98260	CFGExitNode	EXIT		98232		True				
ANR	98261	Symbol	cJSON_Array		98232						
ANR	98262	Symbol	item		98232						
ANR	98263	Symbol	item -> type		98232						
ANR	98264	Symbol	cJSON_New_Item		98232						
ANR	98265	Symbol	* item		98232						
ANR	98266	Function	cJSON_CreateObject	545:0:19057:19160							
ANR	98267	FunctionDef	cJSON_CreateObject ()		98266	0					
ANR	98268	CompoundStatement		545:27:19084:19160	98266	0					
ANR	98269	IdentifierDeclStatement	cJSON * item = cJSON_New_Item ( ) ;	545:0:19085:19113	98266	0	True				
ANR	98270	IdentifierDecl	* item = cJSON_New_Item ( )		98266	0					
ANR	98271	IdentifierDeclType	cJSON *		98266	0					
ANR	98272	Identifier	item		98266	1					
ANR	98273	AssignmentExpression	* item = cJSON_New_Item ( )		98266	2		=			
ANR	98274	Identifier	item		98266	0					
ANR	98275	CallExpression	cJSON_New_Item ( )		98266	1					
ANR	98276	Callee	cJSON_New_Item		98266	0					
ANR	98277	Identifier	cJSON_New_Item		98266	0					
ANR	98278	ArgumentList			98266	1					
ANR	98279	IfStatement	if ( item )		98266	1					
ANR	98280	Condition	item	546:4:19119:19122	98266	0	True				
ANR	98281	Identifier	item		98266	0					
ANR	98282	ExpressionStatement	item -> type = cJSON_Object	546:9:19124:19147	98266	1	True				
ANR	98283	AssignmentExpression	item -> type = cJSON_Object		98266	0		=			
ANR	98284	PtrMemberAccess	item -> type		98266	0					
ANR	98285	Identifier	item		98266	0					
ANR	98286	Identifier	type		98266	1					
ANR	98287	Identifier	cJSON_Object		98266	1					
ANR	98288	ReturnStatement	return item ;	546:33:19148:19159	98266	2	True				
ANR	98289	Identifier	item		98266	0					
ANR	98290	ReturnType	cJSON *		98266	1					
ANR	98291	Identifier	cJSON_CreateObject		98266	2					
ANR	98292	ParameterList			98266	3					
ANR	98293	CFGEntryNode	ENTRY		98266		True				
ANR	98294	CFGExitNode	EXIT		98266		True				
ANR	98295	Symbol	item		98266						
ANR	98296	Symbol	item -> type		98266						
ANR	98297	Symbol	cJSON_New_Item		98266						
ANR	98298	Symbol	* item		98266						
ANR	98299	Symbol	cJSON_Object		98266						
ANR	98300	Function	cJSON_CreateIntArray	549:0:19184:19399							
ANR	98301	FunctionDef	"cJSON_CreateIntArray (int * numbers , int count)"		98300	0					
ANR	98302	CompoundStatement		550:1:19237:19399	98300	0					
ANR	98303	IdentifierDeclStatement	int i ;	550:0:19238:19243	98300	0	True				
ANR	98304	IdentifierDecl	i		98300	0					
ANR	98305	IdentifierDeclType	int		98300	0					
ANR	98306	Identifier	i		98300	1					
ANR	98307	IdentifierDeclStatement	"cJSON * n = 0 , * p = 0 , * a = cJSON_CreateArray ( ) ;"	550:6:19244:19282	98300	1	True				
ANR	98308	IdentifierDecl	* n = 0		98300	0					
ANR	98309	IdentifierDeclType	cJSON *		98300	0					
ANR	98310	Identifier	n		98300	1					
ANR	98311	AssignmentExpression	* n = 0		98300	2		=			
ANR	98312	Identifier	n		98300	0					
ANR	98313	PrimaryExpression	0		98300	1					
ANR	98314	IdentifierDecl	* p = 0		98300	1					
ANR	98315	IdentifierDeclType	cJSON *		98300	0					
ANR	98316	Identifier	p		98300	1					
ANR	98317	AssignmentExpression	* p = 0		98300	2		=			
ANR	98318	Identifier	p		98300	0					
ANR	98319	PrimaryExpression	0		98300	1					
ANR	98320	IdentifierDecl	* a = cJSON_CreateArray ( )		98300	2					
ANR	98321	IdentifierDeclType	cJSON *		98300	0					
ANR	98322	Identifier	a		98300	1					
ANR	98323	AssignmentExpression	* a = cJSON_CreateArray ( )		98300	2		=			
ANR	98324	Identifier	a		98300	0					
ANR	98325	CallExpression	cJSON_CreateArray ( )		98300	1					
ANR	98326	Callee	cJSON_CreateArray		98300	0					
ANR	98327	Identifier	cJSON_CreateArray		98300	0					
ANR	98328	ArgumentList			98300	1					
ANR	98329	ForStatement	for ( i = 0 ; a && i < count ; i ++ )		98300	2					
ANR	98330	ForInit	i = 0 ;	550:49:19287:19290	98300	0	True				
ANR	98331	AssignmentExpression	i = 0		98300	0		=			
ANR	98332	Identifier	i		98300	0					
ANR	98333	PrimaryExpression	0		98300	1					
ANR	98334	Condition	a && i < count	550:53:19291:19302	98300	1	True				
ANR	98335	AndExpression	a && i < count		98300	0		&&			
ANR	98336	Identifier	a		98300	0					
ANR	98337	RelationalExpression	i < count		98300	1		<			
ANR	98338	Identifier	i		98300	0					
ANR	98339	Identifier	count		98300	1					
ANR	98340	PostIncDecOperationExpression	i ++	550:66:19304:19306	98300	2	True				
ANR	98341	Identifier	i		98300	0					
ANR	98342	IncDec	++		98300	1					
ANR	98343	CompoundStatement		1:70:70:70	98300	3					
ANR	98344	ExpressionStatement	n = cJSON_CreateNumber ( numbers [ i ] )	550:71:19309:19341	98300	0	True				
ANR	98345	AssignmentExpression	n = cJSON_CreateNumber ( numbers [ i ] )		98300	0		=			
ANR	98346	Identifier	n		98300	0					
ANR	98347	CallExpression	cJSON_CreateNumber ( numbers [ i ] )		98300	1					
ANR	98348	Callee	cJSON_CreateNumber		98300	0					
ANR	98349	Identifier	cJSON_CreateNumber		98300	0					
ANR	98350	ArgumentList	numbers [ i ]		98300	1					
ANR	98351	Argument	numbers [ i ]		98300	0					
ANR	98352	ArrayIndexing	numbers [ i ]		98300	0					
ANR	98353	Identifier	numbers		98300	0					
ANR	98354	Identifier	i		98300	1					
ANR	98355	IfStatement	if ( ! i )		98300	1					
ANR	98356	Condition	! i	551:4:19347:19348	98300	0	True				
ANR	98357	UnaryOperationExpression	! i		98300	0					
ANR	98358	UnaryOperator	!		98300	0					
ANR	98359	Identifier	i		98300	1					
ANR	98360	ExpressionStatement	a -> child = n	551:7:19350:19360	98300	1	True				
ANR	98361	AssignmentExpression	a -> child = n		98300	0		=			
ANR	98362	PtrMemberAccess	a -> child		98300	0					
ANR	98363	Identifier	a		98300	0					
ANR	98364	Identifier	child		98300	1					
ANR	98365	Identifier	n		98300	1					
ANR	98366	ElseStatement	else		98300	0					
ANR	98367	ExpressionStatement	"suffix_object ( p , n )"	551:23:19366:19384	98300	0	True				
ANR	98368	CallExpression	"suffix_object ( p , n )"		98300	0					
ANR	98369	Callee	suffix_object		98300	0					
ANR	98370	Identifier	suffix_object		98300	0					
ANR	98371	ArgumentList	p		98300	1					
ANR	98372	Argument	p		98300	0					
ANR	98373	Identifier	p		98300	0					
ANR	98374	Argument	n		98300	1					
ANR	98375	Identifier	n		98300	0					
ANR	98376	ExpressionStatement	p = n	551:42:19385:19388	98300	2	True				
ANR	98377	AssignmentExpression	p = n		98300	0		=			
ANR	98378	Identifier	p		98300	0					
ANR	98379	Identifier	n		98300	1					
ANR	98380	ReturnStatement	return a ;	551:47:19390:19398	98300	3	True				
ANR	98381	Identifier	a		98300	0					
ANR	98382	ReturnType	cJSON *		98300	1					
ANR	98383	Identifier	cJSON_CreateIntArray		98300	2					
ANR	98384	ParameterList	"int * numbers , int count"		98300	3					
ANR	98385	Parameter	int * numbers	549:28:19212:19223	98300	0	True				
ANR	98386	ParameterType	int *		98300	0					
ANR	98387	Identifier	numbers		98300	1					
ANR	98388	Parameter	int count	549:41:19225:19233	98300	1	True				
ANR	98389	ParameterType	int		98300	0					
ANR	98390	Identifier	count		98300	1					
ANR	98391	CFGEntryNode	ENTRY		98300		True				
ANR	98392	CFGExitNode	EXIT		98300		True				
ANR	98393	Symbol	p		98300						
ANR	98394	Symbol	a		98300						
ANR	98395	Symbol	* i		98300						
ANR	98396	Symbol	a -> child		98300						
ANR	98397	Symbol	* numbers		98300						
ANR	98398	Symbol	cJSON_CreateArray		98300						
ANR	98399	Symbol	numbers		98300						
ANR	98400	Symbol	count		98300						
ANR	98401	Symbol	cJSON_CreateNumber		98300						
ANR	98402	Symbol	i		98300						
ANR	98403	Symbol	* a		98300						
ANR	98404	Symbol	n		98300						
ANR	98405	Function	cJSON_CreateFloatArray	552:0:19401:19620							
ANR	98406	FunctionDef	"cJSON_CreateFloatArray (float * numbers , int count)"		98405	0					
ANR	98407	CompoundStatement		553:1:19458:19620	98405	0					
ANR	98408	IdentifierDeclStatement	int i ;	553:0:19459:19464	98405	0	True				
ANR	98409	IdentifierDecl	i		98405	0					
ANR	98410	IdentifierDeclType	int		98405	0					
ANR	98411	Identifier	i		98405	1					
ANR	98412	IdentifierDeclStatement	"cJSON * n = 0 , * p = 0 , * a = cJSON_CreateArray ( ) ;"	553:6:19465:19503	98405	1	True				
ANR	98413	IdentifierDecl	* n = 0		98405	0					
ANR	98414	IdentifierDeclType	cJSON *		98405	0					
ANR	98415	Identifier	n		98405	1					
ANR	98416	AssignmentExpression	* n = 0		98405	2		=			
ANR	98417	Identifier	n		98405	0					
ANR	98418	PrimaryExpression	0		98405	1					
ANR	98419	IdentifierDecl	* p = 0		98405	1					
ANR	98420	IdentifierDeclType	cJSON *		98405	0					
ANR	98421	Identifier	p		98405	1					
ANR	98422	AssignmentExpression	* p = 0		98405	2		=			
ANR	98423	Identifier	p		98405	0					
ANR	98424	PrimaryExpression	0		98405	1					
ANR	98425	IdentifierDecl	* a = cJSON_CreateArray ( )		98405	2					
ANR	98426	IdentifierDeclType	cJSON *		98405	0					
ANR	98427	Identifier	a		98405	1					
ANR	98428	AssignmentExpression	* a = cJSON_CreateArray ( )		98405	2		=			
ANR	98429	Identifier	a		98405	0					
ANR	98430	CallExpression	cJSON_CreateArray ( )		98405	1					
ANR	98431	Callee	cJSON_CreateArray		98405	0					
ANR	98432	Identifier	cJSON_CreateArray		98405	0					
ANR	98433	ArgumentList			98405	1					
ANR	98434	ForStatement	for ( i = 0 ; a && i < count ; i ++ )		98405	2					
ANR	98435	ForInit	i = 0 ;	553:49:19508:19511	98405	0	True				
ANR	98436	AssignmentExpression	i = 0		98405	0		=			
ANR	98437	Identifier	i		98405	0					
ANR	98438	PrimaryExpression	0		98405	1					
ANR	98439	Condition	a && i < count	553:53:19512:19523	98405	1	True				
ANR	98440	AndExpression	a && i < count		98405	0		&&			
ANR	98441	Identifier	a		98405	0					
ANR	98442	RelationalExpression	i < count		98405	1		<			
ANR	98443	Identifier	i		98405	0					
ANR	98444	Identifier	count		98405	1					
ANR	98445	PostIncDecOperationExpression	i ++	553:66:19525:19527	98405	2	True				
ANR	98446	Identifier	i		98405	0					
ANR	98447	IncDec	++		98405	1					
ANR	98448	CompoundStatement		1:70:70:70	98405	3					
ANR	98449	ExpressionStatement	n = cJSON_CreateNumber ( numbers [ i ] )	553:71:19530:19562	98405	0	True				
ANR	98450	AssignmentExpression	n = cJSON_CreateNumber ( numbers [ i ] )		98405	0		=			
ANR	98451	Identifier	n		98405	0					
ANR	98452	CallExpression	cJSON_CreateNumber ( numbers [ i ] )		98405	1					
ANR	98453	Callee	cJSON_CreateNumber		98405	0					
ANR	98454	Identifier	cJSON_CreateNumber		98405	0					
ANR	98455	ArgumentList	numbers [ i ]		98405	1					
ANR	98456	Argument	numbers [ i ]		98405	0					
ANR	98457	ArrayIndexing	numbers [ i ]		98405	0					
ANR	98458	Identifier	numbers		98405	0					
ANR	98459	Identifier	i		98405	1					
ANR	98460	IfStatement	if ( ! i )		98405	1					
ANR	98461	Condition	! i	554:4:19568:19569	98405	0	True				
ANR	98462	UnaryOperationExpression	! i		98405	0					
ANR	98463	UnaryOperator	!		98405	0					
ANR	98464	Identifier	i		98405	1					
ANR	98465	ExpressionStatement	a -> child = n	554:7:19571:19581	98405	1	True				
ANR	98466	AssignmentExpression	a -> child = n		98405	0		=			
ANR	98467	PtrMemberAccess	a -> child		98405	0					
ANR	98468	Identifier	a		98405	0					
ANR	98469	Identifier	child		98405	1					
ANR	98470	Identifier	n		98405	1					
ANR	98471	ElseStatement	else		98405	0					
ANR	98472	ExpressionStatement	"suffix_object ( p , n )"	554:23:19587:19605	98405	0	True				
ANR	98473	CallExpression	"suffix_object ( p , n )"		98405	0					
ANR	98474	Callee	suffix_object		98405	0					
ANR	98475	Identifier	suffix_object		98405	0					
ANR	98476	ArgumentList	p		98405	1					
ANR	98477	Argument	p		98405	0					
ANR	98478	Identifier	p		98405	0					
ANR	98479	Argument	n		98405	1					
ANR	98480	Identifier	n		98405	0					
ANR	98481	ExpressionStatement	p = n	554:42:19606:19609	98405	2	True				
ANR	98482	AssignmentExpression	p = n		98405	0		=			
ANR	98483	Identifier	p		98405	0					
ANR	98484	Identifier	n		98405	1					
ANR	98485	ReturnStatement	return a ;	554:47:19611:19619	98405	3	True				
ANR	98486	Identifier	a		98405	0					
ANR	98487	ReturnType	cJSON *		98405	1					
ANR	98488	Identifier	cJSON_CreateFloatArray		98405	2					
ANR	98489	ParameterList	"float * numbers , int count"		98405	3					
ANR	98490	Parameter	float * numbers	552:30:19431:19444	98405	0	True				
ANR	98491	ParameterType	float *		98405	0					
ANR	98492	Identifier	numbers		98405	1					
ANR	98493	Parameter	int count	552:45:19446:19454	98405	1	True				
ANR	98494	ParameterType	int		98405	0					
ANR	98495	Identifier	count		98405	1					
ANR	98496	CFGEntryNode	ENTRY		98405		True				
ANR	98497	CFGExitNode	EXIT		98405		True				
ANR	98498	Symbol	p		98405						
ANR	98499	Symbol	a		98405						
ANR	98500	Symbol	* i		98405						
ANR	98501	Symbol	a -> child		98405						
ANR	98502	Symbol	* numbers		98405						
ANR	98503	Symbol	cJSON_CreateArray		98405						
ANR	98504	Symbol	numbers		98405						
ANR	98505	Symbol	count		98405						
ANR	98506	Symbol	cJSON_CreateNumber		98405						
ANR	98507	Symbol	i		98405						
ANR	98508	Symbol	* a		98405						
ANR	98509	Symbol	n		98405						
ANR	98510	Function	cJSON_CreateDoubleArray	555:0:19622:19843							
ANR	98511	FunctionDef	"cJSON_CreateDoubleArray (double * numbers , int count)"		98510	0					
ANR	98512	CompoundStatement		556:1:19681:19843	98510	0					
ANR	98513	IdentifierDeclStatement	int i ;	556:0:19682:19687	98510	0	True				
ANR	98514	IdentifierDecl	i		98510	0					
ANR	98515	IdentifierDeclType	int		98510	0					
ANR	98516	Identifier	i		98510	1					
ANR	98517	IdentifierDeclStatement	"cJSON * n = 0 , * p = 0 , * a = cJSON_CreateArray ( ) ;"	556:6:19688:19726	98510	1	True				
ANR	98518	IdentifierDecl	* n = 0		98510	0					
ANR	98519	IdentifierDeclType	cJSON *		98510	0					
ANR	98520	Identifier	n		98510	1					
ANR	98521	AssignmentExpression	* n = 0		98510	2		=			
ANR	98522	Identifier	n		98510	0					
ANR	98523	PrimaryExpression	0		98510	1					
ANR	98524	IdentifierDecl	* p = 0		98510	1					
ANR	98525	IdentifierDeclType	cJSON *		98510	0					
ANR	98526	Identifier	p		98510	1					
ANR	98527	AssignmentExpression	* p = 0		98510	2		=			
ANR	98528	Identifier	p		98510	0					
ANR	98529	PrimaryExpression	0		98510	1					
ANR	98530	IdentifierDecl	* a = cJSON_CreateArray ( )		98510	2					
ANR	98531	IdentifierDeclType	cJSON *		98510	0					
ANR	98532	Identifier	a		98510	1					
ANR	98533	AssignmentExpression	* a = cJSON_CreateArray ( )		98510	2		=			
ANR	98534	Identifier	a		98510	0					
ANR	98535	CallExpression	cJSON_CreateArray ( )		98510	1					
ANR	98536	Callee	cJSON_CreateArray		98510	0					
ANR	98537	Identifier	cJSON_CreateArray		98510	0					
ANR	98538	ArgumentList			98510	1					
ANR	98539	ForStatement	for ( i = 0 ; a && i < count ; i ++ )		98510	2					
ANR	98540	ForInit	i = 0 ;	556:49:19731:19734	98510	0	True				
ANR	98541	AssignmentExpression	i = 0		98510	0		=			
ANR	98542	Identifier	i		98510	0					
ANR	98543	PrimaryExpression	0		98510	1					
ANR	98544	Condition	a && i < count	556:53:19735:19746	98510	1	True				
ANR	98545	AndExpression	a && i < count		98510	0		&&			
ANR	98546	Identifier	a		98510	0					
ANR	98547	RelationalExpression	i < count		98510	1		<			
ANR	98548	Identifier	i		98510	0					
ANR	98549	Identifier	count		98510	1					
ANR	98550	PostIncDecOperationExpression	i ++	556:66:19748:19750	98510	2	True				
ANR	98551	Identifier	i		98510	0					
ANR	98552	IncDec	++		98510	1					
ANR	98553	CompoundStatement		1:70:70:70	98510	3					
ANR	98554	ExpressionStatement	n = cJSON_CreateNumber ( numbers [ i ] )	556:71:19753:19785	98510	0	True				
ANR	98555	AssignmentExpression	n = cJSON_CreateNumber ( numbers [ i ] )		98510	0		=			
ANR	98556	Identifier	n		98510	0					
ANR	98557	CallExpression	cJSON_CreateNumber ( numbers [ i ] )		98510	1					
ANR	98558	Callee	cJSON_CreateNumber		98510	0					
ANR	98559	Identifier	cJSON_CreateNumber		98510	0					
ANR	98560	ArgumentList	numbers [ i ]		98510	1					
ANR	98561	Argument	numbers [ i ]		98510	0					
ANR	98562	ArrayIndexing	numbers [ i ]		98510	0					
ANR	98563	Identifier	numbers		98510	0					
ANR	98564	Identifier	i		98510	1					
ANR	98565	IfStatement	if ( ! i )		98510	1					
ANR	98566	Condition	! i	557:4:19791:19792	98510	0	True				
ANR	98567	UnaryOperationExpression	! i		98510	0					
ANR	98568	UnaryOperator	!		98510	0					
ANR	98569	Identifier	i		98510	1					
ANR	98570	ExpressionStatement	a -> child = n	557:7:19794:19804	98510	1	True				
ANR	98571	AssignmentExpression	a -> child = n		98510	0		=			
ANR	98572	PtrMemberAccess	a -> child		98510	0					
ANR	98573	Identifier	a		98510	0					
ANR	98574	Identifier	child		98510	1					
ANR	98575	Identifier	n		98510	1					
ANR	98576	ElseStatement	else		98510	0					
ANR	98577	ExpressionStatement	"suffix_object ( p , n )"	557:23:19810:19828	98510	0	True				
ANR	98578	CallExpression	"suffix_object ( p , n )"		98510	0					
ANR	98579	Callee	suffix_object		98510	0					
ANR	98580	Identifier	suffix_object		98510	0					
ANR	98581	ArgumentList	p		98510	1					
ANR	98582	Argument	p		98510	0					
ANR	98583	Identifier	p		98510	0					
ANR	98584	Argument	n		98510	1					
ANR	98585	Identifier	n		98510	0					
ANR	98586	ExpressionStatement	p = n	557:42:19829:19832	98510	2	True				
ANR	98587	AssignmentExpression	p = n		98510	0		=			
ANR	98588	Identifier	p		98510	0					
ANR	98589	Identifier	n		98510	1					
ANR	98590	ReturnStatement	return a ;	557:47:19834:19842	98510	3	True				
ANR	98591	Identifier	a		98510	0					
ANR	98592	ReturnType	cJSON *		98510	1					
ANR	98593	Identifier	cJSON_CreateDoubleArray		98510	2					
ANR	98594	ParameterList	"double * numbers , int count"		98510	3					
ANR	98595	Parameter	double * numbers	555:31:19653:19667	98510	0	True				
ANR	98596	ParameterType	double *		98510	0					
ANR	98597	Identifier	numbers		98510	1					
ANR	98598	Parameter	int count	555:47:19669:19677	98510	1	True				
ANR	98599	ParameterType	int		98510	0					
ANR	98600	Identifier	count		98510	1					
ANR	98601	CFGEntryNode	ENTRY		98510		True				
ANR	98602	CFGExitNode	EXIT		98510		True				
ANR	98603	Symbol	p		98510						
ANR	98604	Symbol	a		98510						
ANR	98605	Symbol	* i		98510						
ANR	98606	Symbol	a -> child		98510						
ANR	98607	Symbol	* numbers		98510						
ANR	98608	Symbol	cJSON_CreateArray		98510						
ANR	98609	Symbol	numbers		98510						
ANR	98610	Symbol	count		98510						
ANR	98611	Symbol	cJSON_CreateNumber		98510						
ANR	98612	Symbol	i		98510						
ANR	98613	Symbol	* a		98510						
ANR	98614	Symbol	n		98510						
ANR	98615	Function	cJSON_CreateStringArray	558:0:19845:20071							
ANR	98616	FunctionDef	"cJSON_CreateStringArray (const char * * strings , int count)"		98615	0					
ANR	98617	CompoundStatement		559:1:19909:20071	98615	0					
ANR	98618	IdentifierDeclStatement	int i ;	559:0:19910:19915	98615	0	True				
ANR	98619	IdentifierDecl	i		98615	0					
ANR	98620	IdentifierDeclType	int		98615	0					
ANR	98621	Identifier	i		98615	1					
ANR	98622	IdentifierDeclStatement	"cJSON * n = 0 , * p = 0 , * a = cJSON_CreateArray ( ) ;"	559:6:19916:19954	98615	1	True				
ANR	98623	IdentifierDecl	* n = 0		98615	0					
ANR	98624	IdentifierDeclType	cJSON *		98615	0					
ANR	98625	Identifier	n		98615	1					
ANR	98626	AssignmentExpression	* n = 0		98615	2		=			
ANR	98627	Identifier	n		98615	0					
ANR	98628	PrimaryExpression	0		98615	1					
ANR	98629	IdentifierDecl	* p = 0		98615	1					
ANR	98630	IdentifierDeclType	cJSON *		98615	0					
ANR	98631	Identifier	p		98615	1					
ANR	98632	AssignmentExpression	* p = 0		98615	2		=			
ANR	98633	Identifier	p		98615	0					
ANR	98634	PrimaryExpression	0		98615	1					
ANR	98635	IdentifierDecl	* a = cJSON_CreateArray ( )		98615	2					
ANR	98636	IdentifierDeclType	cJSON *		98615	0					
ANR	98637	Identifier	a		98615	1					
ANR	98638	AssignmentExpression	* a = cJSON_CreateArray ( )		98615	2		=			
ANR	98639	Identifier	a		98615	0					
ANR	98640	CallExpression	cJSON_CreateArray ( )		98615	1					
ANR	98641	Callee	cJSON_CreateArray		98615	0					
ANR	98642	Identifier	cJSON_CreateArray		98615	0					
ANR	98643	ArgumentList			98615	1					
ANR	98644	ForStatement	for ( i = 0 ; a && i < count ; i ++ )		98615	2					
ANR	98645	ForInit	i = 0 ;	559:49:19959:19962	98615	0	True				
ANR	98646	AssignmentExpression	i = 0		98615	0		=			
ANR	98647	Identifier	i		98615	0					
ANR	98648	PrimaryExpression	0		98615	1					
ANR	98649	Condition	a && i < count	559:53:19963:19974	98615	1	True				
ANR	98650	AndExpression	a && i < count		98615	0		&&			
ANR	98651	Identifier	a		98615	0					
ANR	98652	RelationalExpression	i < count		98615	1		<			
ANR	98653	Identifier	i		98615	0					
ANR	98654	Identifier	count		98615	1					
ANR	98655	PostIncDecOperationExpression	i ++	559:66:19976:19978	98615	2	True				
ANR	98656	Identifier	i		98615	0					
ANR	98657	IncDec	++		98615	1					
ANR	98658	CompoundStatement		1:70:70:70	98615	3					
ANR	98659	ExpressionStatement	n = cJSON_CreateString ( strings [ i ] )	559:71:19981:20013	98615	0	True				
ANR	98660	AssignmentExpression	n = cJSON_CreateString ( strings [ i ] )		98615	0		=			
ANR	98661	Identifier	n		98615	0					
ANR	98662	CallExpression	cJSON_CreateString ( strings [ i ] )		98615	1					
ANR	98663	Callee	cJSON_CreateString		98615	0					
ANR	98664	Identifier	cJSON_CreateString		98615	0					
ANR	98665	ArgumentList	strings [ i ]		98615	1					
ANR	98666	Argument	strings [ i ]		98615	0					
ANR	98667	ArrayIndexing	strings [ i ]		98615	0					
ANR	98668	Identifier	strings		98615	0					
ANR	98669	Identifier	i		98615	1					
ANR	98670	IfStatement	if ( ! i )		98615	1					
ANR	98671	Condition	! i	560:4:20019:20020	98615	0	True				
ANR	98672	UnaryOperationExpression	! i		98615	0					
ANR	98673	UnaryOperator	!		98615	0					
ANR	98674	Identifier	i		98615	1					
ANR	98675	ExpressionStatement	a -> child = n	560:7:20022:20032	98615	1	True				
ANR	98676	AssignmentExpression	a -> child = n		98615	0		=			
ANR	98677	PtrMemberAccess	a -> child		98615	0					
ANR	98678	Identifier	a		98615	0					
ANR	98679	Identifier	child		98615	1					
ANR	98680	Identifier	n		98615	1					
ANR	98681	ElseStatement	else		98615	0					
ANR	98682	ExpressionStatement	"suffix_object ( p , n )"	560:23:20038:20056	98615	0	True				
ANR	98683	CallExpression	"suffix_object ( p , n )"		98615	0					
ANR	98684	Callee	suffix_object		98615	0					
ANR	98685	Identifier	suffix_object		98615	0					
ANR	98686	ArgumentList	p		98615	1					
ANR	98687	Argument	p		98615	0					
ANR	98688	Identifier	p		98615	0					
ANR	98689	Argument	n		98615	1					
ANR	98690	Identifier	n		98615	0					
ANR	98691	ExpressionStatement	p = n	560:42:20057:20060	98615	2	True				
ANR	98692	AssignmentExpression	p = n		98615	0		=			
ANR	98693	Identifier	p		98615	0					
ANR	98694	Identifier	n		98615	1					
ANR	98695	ReturnStatement	return a ;	560:47:20062:20070	98615	3	True				
ANR	98696	Identifier	a		98615	0					
ANR	98697	ReturnType	cJSON *		98615	1					
ANR	98698	Identifier	cJSON_CreateStringArray		98615	2					
ANR	98699	ParameterList	"const char * * strings , int count"		98615	3					
ANR	98700	Parameter	const char * * strings	558:31:19876:19895	98615	0	True				
ANR	98701	ParameterType	const char * *		98615	0					
ANR	98702	Identifier	strings		98615	1					
ANR	98703	Parameter	int count	558:52:19897:19905	98615	1	True				
ANR	98704	ParameterType	int		98615	0					
ANR	98705	Identifier	count		98615	1					
ANR	98706	CFGEntryNode	ENTRY		98615		True				
ANR	98707	CFGExitNode	EXIT		98615		True				
ANR	98708	Symbol	p		98615						
ANR	98709	Symbol	a		98615						
ANR	98710	Symbol	* i		98615						
ANR	98711	Symbol	strings		98615						
ANR	98712	Symbol	a -> child		98615						
ANR	98713	Symbol	cJSON_CreateArray		98615						
ANR	98714	Symbol	count		98615						
ANR	98715	Symbol	i		98615						
ANR	98716	Symbol	* strings		98615						
ANR	98717	Symbol	* a		98615						
ANR	98718	Symbol	cJSON_CreateString		98615						
ANR	98719	Symbol	n		98615						
