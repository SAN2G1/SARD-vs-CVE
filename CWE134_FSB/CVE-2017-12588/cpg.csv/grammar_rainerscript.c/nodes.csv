command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	22534	File	data/converged/CVE-2017-12588_rsyslog/grammar_rainerscript.c								
ANR	22535	DeclStmt									
ANR	22536	Decl							struct cnfexpr	struct cnfexpr * ( struct cnfexpr * expr )	cnfexprOptimize
ANR	22537	DeclStmt									
ANR	22538	Decl							void	void ( struct cnfstmt * stmt )	cnfstmtOptimizePRIFilt
ANR	22539	DeclStmt									
ANR	22540	Decl							void	"void ( struct cnfarray * ar , int indent )"	cnfarrayPrint
ANR	22541	DeclStmt									
ANR	22542	Decl							struct cnffunc	struct cnffunc * ( int fac )	cnffuncNew_prifilt
ANR	22543	Function	tokenToString	74:0:2363:4553							
ANR	22544	FunctionDef	tokenToString (const int token)		22543	0					
ANR	22545	CompoundStatement		76:0:2414:4553	22543	0					
ANR	22546	IdentifierDeclStatement	const char * tokstr ;	77:1:2417:2435	22543	0	True				
ANR	22547	IdentifierDecl	* tokstr		22543	0					
ANR	22548	IdentifierDeclType	const char *		22543	0					
ANR	22549	Identifier	tokstr		22543	1					
ANR	22550	Statement	static	78:1:2438:2443	22543	1	True				
ANR	22551	IdentifierDeclStatement	char tokbuf [ 512 ] ;	78:8:2445:2461	22543	2	True				
ANR	22552	IdentifierDecl	tokbuf [ 512 ]		22543	0					
ANR	22553	IdentifierDeclType	char [ 512 ]		22543	0					
ANR	22554	Identifier	tokbuf		22543	1					
ANR	22555	PrimaryExpression	512		22543	2					
ANR	22556	SwitchStatement	switch ( token )		22543	3					
ANR	22557	Condition	token	80:8:2472:2476	22543	0	True				
ANR	22558	Identifier	token		22543	0					
ANR	22559	CompoundStatement		5:15:64:64	22543	1					
ANR	22560	Label	case NAME :	81:1:2482:2491	22543	0	True				
ANR	22561	Identifier	NAME		22543	0					
ANR	22562	ExpressionStatement	"tokstr = ""NAME"""	81:12:2493:2508	22543	1	True				
ANR	22563	AssignmentExpression	"tokstr = ""NAME"""		22543	0		=			
ANR	22564	Identifier	tokstr		22543	0					
ANR	22565	PrimaryExpression	"""NAME"""		22543	1					
ANR	22566	BreakStatement	break ;	81:29:2510:2515	22543	2	True				
ANR	22567	Label	case FUNC :	82:1:2518:2527	22543	3	True				
ANR	22568	Identifier	FUNC		22543	0					
ANR	22569	ExpressionStatement	"tokstr = ""FUNC"""	82:12:2529:2544	22543	4	True				
ANR	22570	AssignmentExpression	"tokstr = ""FUNC"""		22543	0		=			
ANR	22571	Identifier	tokstr		22543	0					
ANR	22572	PrimaryExpression	"""FUNC"""		22543	1					
ANR	22573	BreakStatement	break ;	82:29:2546:2551	22543	5	True				
ANR	22574	Label	case BEGINOBJ :	83:1:2554:2567	22543	6	True				
ANR	22575	Identifier	BEGINOBJ		22543	0					
ANR	22576	ExpressionStatement	"tokstr = ""BEGINOBJ"""	83:16:2569:2587	22543	7	True				
ANR	22577	AssignmentExpression	"tokstr = ""BEGINOBJ"""		22543	0		=			
ANR	22578	Identifier	tokstr		22543	0					
ANR	22579	PrimaryExpression	"""BEGINOBJ"""		22543	1					
ANR	22580	BreakStatement	break ;	83:36:2589:2594	22543	8	True				
ANR	22581	Label	case ENDOBJ :	84:1:2597:2608	22543	9	True				
ANR	22582	Identifier	ENDOBJ		22543	0					
ANR	22583	ExpressionStatement	"tokstr = ""ENDOBJ"""	84:14:2610:2626	22543	10	True				
ANR	22584	AssignmentExpression	"tokstr = ""ENDOBJ"""		22543	0		=			
ANR	22585	Identifier	tokstr		22543	0					
ANR	22586	PrimaryExpression	"""ENDOBJ"""		22543	1					
ANR	22587	BreakStatement	break ;	84:32:2628:2633	22543	11	True				
ANR	22588	Label	case BEGIN_ACTION :	85:1:2636:2653	22543	12	True				
ANR	22589	Identifier	BEGIN_ACTION		22543	0					
ANR	22590	ExpressionStatement	"tokstr = ""BEGIN_ACTION"""	85:20:2655:2677	22543	13	True				
ANR	22591	AssignmentExpression	"tokstr = ""BEGIN_ACTION"""		22543	0		=			
ANR	22592	Identifier	tokstr		22543	0					
ANR	22593	PrimaryExpression	"""BEGIN_ACTION"""		22543	1					
ANR	22594	BreakStatement	break ;	85:44:2679:2684	22543	14	True				
ANR	22595	Label	case BEGIN_PROPERTY :	86:1:2687:2706	22543	15	True				
ANR	22596	Identifier	BEGIN_PROPERTY		22543	0					
ANR	22597	ExpressionStatement	"tokstr = ""BEGIN_PROPERTY"""	86:22:2708:2732	22543	16	True				
ANR	22598	AssignmentExpression	"tokstr = ""BEGIN_PROPERTY"""		22543	0		=			
ANR	22599	Identifier	tokstr		22543	0					
ANR	22600	PrimaryExpression	"""BEGIN_PROPERTY"""		22543	1					
ANR	22601	BreakStatement	break ;	86:48:2734:2739	22543	17	True				
ANR	22602	Label	case BEGIN_CONSTANT :	87:1:2742:2761	22543	18	True				
ANR	22603	Identifier	BEGIN_CONSTANT		22543	0					
ANR	22604	ExpressionStatement	"tokstr = ""BEGIN_CONSTANT"""	87:22:2763:2787	22543	19	True				
ANR	22605	AssignmentExpression	"tokstr = ""BEGIN_CONSTANT"""		22543	0		=			
ANR	22606	Identifier	tokstr		22543	0					
ANR	22607	PrimaryExpression	"""BEGIN_CONSTANT"""		22543	1					
ANR	22608	BreakStatement	break ;	87:48:2789:2794	22543	20	True				
ANR	22609	Label	case BEGIN_TPL :	88:1:2797:2811	22543	21	True				
ANR	22610	Identifier	BEGIN_TPL		22543	0					
ANR	22611	ExpressionStatement	"tokstr = ""BEGIN_TPL"""	88:17:2813:2832	22543	22	True				
ANR	22612	AssignmentExpression	"tokstr = ""BEGIN_TPL"""		22543	0		=			
ANR	22613	Identifier	tokstr		22543	0					
ANR	22614	PrimaryExpression	"""BEGIN_TPL"""		22543	1					
ANR	22615	BreakStatement	break ;	88:38:2834:2839	22543	23	True				
ANR	22616	Label	case BEGIN_RULESET :	89:1:2842:2860	22543	24	True				
ANR	22617	Identifier	BEGIN_RULESET		22543	0					
ANR	22618	ExpressionStatement	"tokstr = ""BEGIN_RULESET"""	89:21:2862:2885	22543	25	True				
ANR	22619	AssignmentExpression	"tokstr = ""BEGIN_RULESET"""		22543	0		=			
ANR	22620	Identifier	tokstr		22543	0					
ANR	22621	PrimaryExpression	"""BEGIN_RULESET"""		22543	1					
ANR	22622	BreakStatement	break ;	89:46:2887:2892	22543	26	True				
ANR	22623	Label	case STOP :	90:1:2895:2904	22543	27	True				
ANR	22624	Identifier	STOP		22543	0					
ANR	22625	ExpressionStatement	"tokstr = ""STOP"""	90:12:2906:2920	22543	28	True				
ANR	22626	AssignmentExpression	"tokstr = ""STOP"""		22543	0		=			
ANR	22627	Identifier	tokstr		22543	0					
ANR	22628	PrimaryExpression	"""STOP"""		22543	1					
ANR	22629	BreakStatement	break ;	90:28:2922:2927	22543	29	True				
ANR	22630	Label	case SET :	91:1:2930:2938	22543	30	True				
ANR	22631	Identifier	SET		22543	0					
ANR	22632	ExpressionStatement	"tokstr = ""SET"""	91:11:2940:2953	22543	31	True				
ANR	22633	AssignmentExpression	"tokstr = ""SET"""		22543	0		=			
ANR	22634	Identifier	tokstr		22543	0					
ANR	22635	PrimaryExpression	"""SET"""		22543	1					
ANR	22636	BreakStatement	break ;	91:26:2955:2960	22543	32	True				
ANR	22637	Label	case UNSET :	92:1:2963:2973	22543	33	True				
ANR	22638	Identifier	UNSET		22543	0					
ANR	22639	ExpressionStatement	"tokstr = ""UNSET"""	92:13:2975:2990	22543	34	True				
ANR	22640	AssignmentExpression	"tokstr = ""UNSET"""		22543	0		=			
ANR	22641	Identifier	tokstr		22543	0					
ANR	22642	PrimaryExpression	"""UNSET"""		22543	1					
ANR	22643	BreakStatement	break ;	92:30:2992:2997	22543	35	True				
ANR	22644	Label	case CONTINUE :	93:1:3000:3013	22543	36	True				
ANR	22645	Identifier	CONTINUE		22543	0					
ANR	22646	ExpressionStatement	"tokstr = ""CONTINUE"""	93:16:3015:3033	22543	37	True				
ANR	22647	AssignmentExpression	"tokstr = ""CONTINUE"""		22543	0		=			
ANR	22648	Identifier	tokstr		22543	0					
ANR	22649	PrimaryExpression	"""CONTINUE"""		22543	1					
ANR	22650	BreakStatement	break ;	93:36:3035:3040	22543	38	True				
ANR	22651	Label	case CALL :	94:1:3043:3052	22543	39	True				
ANR	22652	Identifier	CALL		22543	0					
ANR	22653	ExpressionStatement	"tokstr = ""CALL"""	94:12:3054:3068	22543	40	True				
ANR	22654	AssignmentExpression	"tokstr = ""CALL"""		22543	0		=			
ANR	22655	Identifier	tokstr		22543	0					
ANR	22656	PrimaryExpression	"""CALL"""		22543	1					
ANR	22657	BreakStatement	break ;	94:28:3070:3075	22543	41	True				
ANR	22658	Label	case LEGACY_ACTION :	95:1:3078:3096	22543	42	True				
ANR	22659	Identifier	LEGACY_ACTION		22543	0					
ANR	22660	ExpressionStatement	"tokstr = ""LEGACY_ACTION"""	95:21:3098:3121	22543	43	True				
ANR	22661	AssignmentExpression	"tokstr = ""LEGACY_ACTION"""		22543	0		=			
ANR	22662	Identifier	tokstr		22543	0					
ANR	22663	PrimaryExpression	"""LEGACY_ACTION"""		22543	1					
ANR	22664	BreakStatement	break ;	95:46:3123:3128	22543	44	True				
ANR	22665	Label	case LEGACY_RULESET :	96:1:3131:3150	22543	45	True				
ANR	22666	Identifier	LEGACY_RULESET		22543	0					
ANR	22667	ExpressionStatement	"tokstr = ""LEGACY_RULESET"""	96:22:3152:3176	22543	46	True				
ANR	22668	AssignmentExpression	"tokstr = ""LEGACY_RULESET"""		22543	0		=			
ANR	22669	Identifier	tokstr		22543	0					
ANR	22670	PrimaryExpression	"""LEGACY_RULESET"""		22543	1					
ANR	22671	BreakStatement	break ;	96:48:3178:3183	22543	47	True				
ANR	22672	Label	case PRIFILT :	97:1:3186:3198	22543	48	True				
ANR	22673	Identifier	PRIFILT		22543	0					
ANR	22674	ExpressionStatement	"tokstr = ""PRIFILT"""	97:15:3200:3217	22543	49	True				
ANR	22675	AssignmentExpression	"tokstr = ""PRIFILT"""		22543	0		=			
ANR	22676	Identifier	tokstr		22543	0					
ANR	22677	PrimaryExpression	"""PRIFILT"""		22543	1					
ANR	22678	BreakStatement	break ;	97:34:3219:3224	22543	50	True				
ANR	22679	Label	case PROPFILT :	98:1:3227:3240	22543	51	True				
ANR	22680	Identifier	PROPFILT		22543	0					
ANR	22681	ExpressionStatement	"tokstr = ""PROPFILT"""	98:16:3242:3260	22543	52	True				
ANR	22682	AssignmentExpression	"tokstr = ""PROPFILT"""		22543	0		=			
ANR	22683	Identifier	tokstr		22543	0					
ANR	22684	PrimaryExpression	"""PROPFILT"""		22543	1					
ANR	22685	BreakStatement	break ;	98:36:3262:3267	22543	53	True				
ANR	22686	Label	case IF :	99:1:3270:3277	22543	54	True				
ANR	22687	Identifier	IF		22543	0					
ANR	22688	ExpressionStatement	"tokstr = ""IF"""	99:10:3279:3291	22543	55	True				
ANR	22689	AssignmentExpression	"tokstr = ""IF"""		22543	0		=			
ANR	22690	Identifier	tokstr		22543	0					
ANR	22691	PrimaryExpression	"""IF"""		22543	1					
ANR	22692	BreakStatement	break ;	99:24:3293:3298	22543	56	True				
ANR	22693	Label	case THEN :	100:1:3301:3310	22543	57	True				
ANR	22694	Identifier	THEN		22543	0					
ANR	22695	ExpressionStatement	"tokstr = ""THEN"""	100:12:3312:3326	22543	58	True				
ANR	22696	AssignmentExpression	"tokstr = ""THEN"""		22543	0		=			
ANR	22697	Identifier	tokstr		22543	0					
ANR	22698	PrimaryExpression	"""THEN"""		22543	1					
ANR	22699	BreakStatement	break ;	100:28:3328:3333	22543	59	True				
ANR	22700	Label	case ELSE :	101:1:3336:3345	22543	60	True				
ANR	22701	Identifier	ELSE		22543	0					
ANR	22702	ExpressionStatement	"tokstr = ""ELSE"""	101:12:3347:3361	22543	61	True				
ANR	22703	AssignmentExpression	"tokstr = ""ELSE"""		22543	0		=			
ANR	22704	Identifier	tokstr		22543	0					
ANR	22705	PrimaryExpression	"""ELSE"""		22543	1					
ANR	22706	BreakStatement	break ;	101:28:3363:3368	22543	62	True				
ANR	22707	Label	case OR :	102:1:3371:3378	22543	63	True				
ANR	22708	Identifier	OR		22543	0					
ANR	22709	ExpressionStatement	"tokstr = ""OR"""	102:10:3380:3392	22543	64	True				
ANR	22710	AssignmentExpression	"tokstr = ""OR"""		22543	0		=			
ANR	22711	Identifier	tokstr		22543	0					
ANR	22712	PrimaryExpression	"""OR"""		22543	1					
ANR	22713	BreakStatement	break ;	102:24:3394:3399	22543	65	True				
ANR	22714	Label	case AND :	103:1:3402:3410	22543	66	True				
ANR	22715	Identifier	AND		22543	0					
ANR	22716	ExpressionStatement	"tokstr = ""AND"""	103:11:3412:3425	22543	67	True				
ANR	22717	AssignmentExpression	"tokstr = ""AND"""		22543	0		=			
ANR	22718	Identifier	tokstr		22543	0					
ANR	22719	PrimaryExpression	"""AND"""		22543	1					
ANR	22720	BreakStatement	break ;	103:26:3427:3432	22543	68	True				
ANR	22721	Label	case NOT :	104:1:3435:3443	22543	69	True				
ANR	22722	Identifier	NOT		22543	0					
ANR	22723	ExpressionStatement	"tokstr = ""NOT"""	104:11:3445:3458	22543	70	True				
ANR	22724	AssignmentExpression	"tokstr = ""NOT"""		22543	0		=			
ANR	22725	Identifier	tokstr		22543	0					
ANR	22726	PrimaryExpression	"""NOT"""		22543	1					
ANR	22727	BreakStatement	break ;	104:26:3460:3465	22543	71	True				
ANR	22728	Label	case VAR :	105:1:3468:3476	22543	72	True				
ANR	22729	Identifier	VAR		22543	0					
ANR	22730	ExpressionStatement	"tokstr = ""VAR"""	105:11:3478:3491	22543	73	True				
ANR	22731	AssignmentExpression	"tokstr = ""VAR"""		22543	0		=			
ANR	22732	Identifier	tokstr		22543	0					
ANR	22733	PrimaryExpression	"""VAR"""		22543	1					
ANR	22734	BreakStatement	break ;	105:26:3493:3498	22543	74	True				
ANR	22735	Label	case STRING :	106:1:3501:3512	22543	75	True				
ANR	22736	Identifier	STRING		22543	0					
ANR	22737	ExpressionStatement	"tokstr = ""STRING"""	106:14:3514:3530	22543	76	True				
ANR	22738	AssignmentExpression	"tokstr = ""STRING"""		22543	0		=			
ANR	22739	Identifier	tokstr		22543	0					
ANR	22740	PrimaryExpression	"""STRING"""		22543	1					
ANR	22741	BreakStatement	break ;	106:32:3532:3537	22543	77	True				
ANR	22742	Label	case NUMBER :	107:1:3540:3551	22543	78	True				
ANR	22743	Identifier	NUMBER		22543	0					
ANR	22744	ExpressionStatement	"tokstr = ""NUMBER"""	107:14:3553:3569	22543	79	True				
ANR	22745	AssignmentExpression	"tokstr = ""NUMBER"""		22543	0		=			
ANR	22746	Identifier	tokstr		22543	0					
ANR	22747	PrimaryExpression	"""NUMBER"""		22543	1					
ANR	22748	BreakStatement	break ;	107:32:3571:3576	22543	80	True				
ANR	22749	Label	case CMP_EQ :	108:1:3579:3590	22543	81	True				
ANR	22750	Identifier	CMP_EQ		22543	0					
ANR	22751	ExpressionStatement	"tokstr = ""CMP_EQ"""	108:14:3592:3608	22543	82	True				
ANR	22752	AssignmentExpression	"tokstr = ""CMP_EQ"""		22543	0		=			
ANR	22753	Identifier	tokstr		22543	0					
ANR	22754	PrimaryExpression	"""CMP_EQ"""		22543	1					
ANR	22755	BreakStatement	break ;	108:32:3610:3615	22543	83	True				
ANR	22756	Label	case CMP_NE :	109:1:3618:3629	22543	84	True				
ANR	22757	Identifier	CMP_NE		22543	0					
ANR	22758	ExpressionStatement	"tokstr = ""CMP_NE"""	109:14:3631:3647	22543	85	True				
ANR	22759	AssignmentExpression	"tokstr = ""CMP_NE"""		22543	0		=			
ANR	22760	Identifier	tokstr		22543	0					
ANR	22761	PrimaryExpression	"""CMP_NE"""		22543	1					
ANR	22762	BreakStatement	break ;	109:32:3649:3654	22543	86	True				
ANR	22763	Label	case CMP_LE :	110:1:3657:3668	22543	87	True				
ANR	22764	Identifier	CMP_LE		22543	0					
ANR	22765	ExpressionStatement	"tokstr = ""CMP_LE"""	110:14:3670:3686	22543	88	True				
ANR	22766	AssignmentExpression	"tokstr = ""CMP_LE"""		22543	0		=			
ANR	22767	Identifier	tokstr		22543	0					
ANR	22768	PrimaryExpression	"""CMP_LE"""		22543	1					
ANR	22769	BreakStatement	break ;	110:32:3688:3693	22543	89	True				
ANR	22770	Label	case CMP_GE :	111:1:3696:3707	22543	90	True				
ANR	22771	Identifier	CMP_GE		22543	0					
ANR	22772	ExpressionStatement	"tokstr = ""CMP_GE"""	111:14:3709:3725	22543	91	True				
ANR	22773	AssignmentExpression	"tokstr = ""CMP_GE"""		22543	0		=			
ANR	22774	Identifier	tokstr		22543	0					
ANR	22775	PrimaryExpression	"""CMP_GE"""		22543	1					
ANR	22776	BreakStatement	break ;	111:32:3727:3732	22543	92	True				
ANR	22777	Label	case CMP_LT :	112:1:3735:3746	22543	93	True				
ANR	22778	Identifier	CMP_LT		22543	0					
ANR	22779	ExpressionStatement	"tokstr = ""CMP_LT"""	112:14:3748:3764	22543	94	True				
ANR	22780	AssignmentExpression	"tokstr = ""CMP_LT"""		22543	0		=			
ANR	22781	Identifier	tokstr		22543	0					
ANR	22782	PrimaryExpression	"""CMP_LT"""		22543	1					
ANR	22783	BreakStatement	break ;	112:32:3766:3771	22543	95	True				
ANR	22784	Label	case CMP_GT :	113:1:3774:3785	22543	96	True				
ANR	22785	Identifier	CMP_GT		22543	0					
ANR	22786	ExpressionStatement	"tokstr = ""CMP_GT"""	113:14:3787:3803	22543	97	True				
ANR	22787	AssignmentExpression	"tokstr = ""CMP_GT"""		22543	0		=			
ANR	22788	Identifier	tokstr		22543	0					
ANR	22789	PrimaryExpression	"""CMP_GT"""		22543	1					
ANR	22790	BreakStatement	break ;	113:32:3805:3810	22543	98	True				
ANR	22791	Label	case CMP_CONTAINS :	114:1:3813:3830	22543	99	True				
ANR	22792	Identifier	CMP_CONTAINS		22543	0					
ANR	22793	ExpressionStatement	"tokstr = ""CMP_CONTAINS"""	114:20:3832:3854	22543	100	True				
ANR	22794	AssignmentExpression	"tokstr = ""CMP_CONTAINS"""		22543	0		=			
ANR	22795	Identifier	tokstr		22543	0					
ANR	22796	PrimaryExpression	"""CMP_CONTAINS"""		22543	1					
ANR	22797	BreakStatement	break ;	114:44:3856:3861	22543	101	True				
ANR	22798	Label	case CMP_CONTAINSI :	115:1:3864:3882	22543	102	True				
ANR	22799	Identifier	CMP_CONTAINSI		22543	0					
ANR	22800	ExpressionStatement	"tokstr = ""CMP_CONTAINSI"""	115:21:3884:3907	22543	103	True				
ANR	22801	AssignmentExpression	"tokstr = ""CMP_CONTAINSI"""		22543	0		=			
ANR	22802	Identifier	tokstr		22543	0					
ANR	22803	PrimaryExpression	"""CMP_CONTAINSI"""		22543	1					
ANR	22804	BreakStatement	break ;	115:46:3909:3914	22543	104	True				
ANR	22805	Label	case CMP_STARTSWITH :	116:1:3917:3936	22543	105	True				
ANR	22806	Identifier	CMP_STARTSWITH		22543	0					
ANR	22807	ExpressionStatement	"tokstr = ""CMP_STARTSWITH"""	116:22:3938:3962	22543	106	True				
ANR	22808	AssignmentExpression	"tokstr = ""CMP_STARTSWITH"""		22543	0		=			
ANR	22809	Identifier	tokstr		22543	0					
ANR	22810	PrimaryExpression	"""CMP_STARTSWITH"""		22543	1					
ANR	22811	BreakStatement	break ;	116:48:3964:3969	22543	107	True				
ANR	22812	Label	case CMP_STARTSWITHI :	117:1:3972:3992	22543	108	True				
ANR	22813	Identifier	CMP_STARTSWITHI		22543	0					
ANR	22814	ExpressionStatement	"tokstr = ""CMP_STARTSWITHI"""	117:23:3994:4019	22543	109	True				
ANR	22815	AssignmentExpression	"tokstr = ""CMP_STARTSWITHI"""		22543	0		=			
ANR	22816	Identifier	tokstr		22543	0					
ANR	22817	PrimaryExpression	"""CMP_STARTSWITHI"""		22543	1					
ANR	22818	BreakStatement	break ;	117:50:4021:4026	22543	110	True				
ANR	22819	Label	case UMINUS :	118:1:4029:4040	22543	111	True				
ANR	22820	Identifier	UMINUS		22543	0					
ANR	22821	ExpressionStatement	"tokstr = ""UMINUS"""	118:14:4042:4058	22543	112	True				
ANR	22822	AssignmentExpression	"tokstr = ""UMINUS"""		22543	0		=			
ANR	22823	Identifier	tokstr		22543	0					
ANR	22824	PrimaryExpression	"""UMINUS"""		22543	1					
ANR	22825	BreakStatement	break ;	118:32:4060:4065	22543	113	True				
ANR	22826	Label	case '&' :	119:1:4068:4076	22543	114	True				
ANR	22827	ExpressionStatement	"tokstr = ""&"""	119:11:4078:4089	22543	115	True				
ANR	22828	AssignmentExpression	"tokstr = ""&"""		22543	0		=			
ANR	22829	Identifier	tokstr		22543	0					
ANR	22830	PrimaryExpression	"""&"""		22543	1					
ANR	22831	BreakStatement	break ;	119:24:4091:4096	22543	116	True				
ANR	22832	Label	case '+' :	120:1:4099:4107	22543	117	True				
ANR	22833	ExpressionStatement	"tokstr = ""+"""	120:11:4109:4120	22543	118	True				
ANR	22834	AssignmentExpression	"tokstr = ""+"""		22543	0		=			
ANR	22835	Identifier	tokstr		22543	0					
ANR	22836	PrimaryExpression	"""+"""		22543	1					
ANR	22837	BreakStatement	break ;	120:24:4122:4127	22543	119	True				
ANR	22838	Label	case '-' :	121:1:4130:4138	22543	120	True				
ANR	22839	ExpressionStatement	"tokstr = ""-"""	121:11:4140:4151	22543	121	True				
ANR	22840	AssignmentExpression	"tokstr = ""-"""		22543	0		=			
ANR	22841	Identifier	tokstr		22543	0					
ANR	22842	PrimaryExpression	"""-"""		22543	1					
ANR	22843	BreakStatement	break ;	121:24:4153:4158	22543	122	True				
ANR	22844	Label	case '*' :	122:1:4161:4169	22543	123	True				
ANR	22845	ExpressionStatement	"tokstr = ""*"""	122:11:4171:4182	22543	124	True				
ANR	22846	AssignmentExpression	"tokstr = ""*"""		22543	0		=			
ANR	22847	Identifier	tokstr		22543	0					
ANR	22848	PrimaryExpression	"""*"""		22543	1					
ANR	22849	BreakStatement	break ;	122:24:4184:4189	22543	125	True				
ANR	22850	Label	case '/' :	123:1:4192:4200	22543	126	True				
ANR	22851	ExpressionStatement	"tokstr = ""/"""	123:11:4202:4213	22543	127	True				
ANR	22852	AssignmentExpression	"tokstr = ""/"""		22543	0		=			
ANR	22853	Identifier	tokstr		22543	0					
ANR	22854	PrimaryExpression	"""/"""		22543	1					
ANR	22855	BreakStatement	break ;	123:24:4215:4220	22543	128	True				
ANR	22856	Label	case '%' :	124:1:4223:4231	22543	129	True				
ANR	22857	ExpressionStatement	"tokstr = ""%"""	124:11:4233:4244	22543	130	True				
ANR	22858	AssignmentExpression	"tokstr = ""%"""		22543	0		=			
ANR	22859	Identifier	tokstr		22543	0					
ANR	22860	PrimaryExpression	"""%"""		22543	1					
ANR	22861	BreakStatement	break ;	124:24:4246:4251	22543	131	True				
ANR	22862	Label	case 'M' :	125:1:4254:4262	22543	132	True				
ANR	22863	ExpressionStatement	"tokstr = ""M"""	125:11:4264:4275	22543	133	True				
ANR	22864	AssignmentExpression	"tokstr = ""M"""		22543	0		=			
ANR	22865	Identifier	tokstr		22543	0					
ANR	22866	PrimaryExpression	"""M"""		22543	1					
ANR	22867	BreakStatement	break ;	125:24:4277:4282	22543	134	True				
ANR	22868	Label	case 'N' :	126:1:4285:4293	22543	135	True				
ANR	22869	ExpressionStatement	"tokstr = ""N"""	126:11:4295:4306	22543	136	True				
ANR	22870	AssignmentExpression	"tokstr = ""N"""		22543	0		=			
ANR	22871	Identifier	tokstr		22543	0					
ANR	22872	PrimaryExpression	"""N"""		22543	1					
ANR	22873	BreakStatement	break ;	126:24:4308:4313	22543	137	True				
ANR	22874	Label	case 'S' :	127:1:4316:4324	22543	138	True				
ANR	22875	ExpressionStatement	"tokstr = ""S"""	127:11:4326:4337	22543	139	True				
ANR	22876	AssignmentExpression	"tokstr = ""S"""		22543	0		=			
ANR	22877	Identifier	tokstr		22543	0					
ANR	22878	PrimaryExpression	"""S"""		22543	1					
ANR	22879	BreakStatement	break ;	127:24:4339:4344	22543	140	True				
ANR	22880	Label	case 'V' :	128:1:4347:4355	22543	141	True				
ANR	22881	ExpressionStatement	"tokstr = ""V"""	128:11:4357:4368	22543	142	True				
ANR	22882	AssignmentExpression	"tokstr = ""V"""		22543	0		=			
ANR	22883	Identifier	tokstr		22543	0					
ANR	22884	PrimaryExpression	"""V"""		22543	1					
ANR	22885	BreakStatement	break ;	128:24:4370:4375	22543	143	True				
ANR	22886	Label	case 'F' :	129:1:4378:4386	22543	144	True				
ANR	22887	ExpressionStatement	"tokstr = ""F"""	129:11:4388:4399	22543	145	True				
ANR	22888	AssignmentExpression	"tokstr = ""F"""		22543	0		=			
ANR	22889	Identifier	tokstr		22543	0					
ANR	22890	PrimaryExpression	"""F"""		22543	1					
ANR	22891	BreakStatement	break ;	129:24:4401:4406	22543	146	True				
ANR	22892	Label	case 'A' :	130:1:4409:4417	22543	147	True				
ANR	22893	ExpressionStatement	"tokstr = ""A"""	130:11:4419:4430	22543	148	True				
ANR	22894	AssignmentExpression	"tokstr = ""A"""		22543	0		=			
ANR	22895	Identifier	tokstr		22543	0					
ANR	22896	PrimaryExpression	"""A"""		22543	1					
ANR	22897	BreakStatement	break ;	130:24:4432:4437	22543	149	True				
ANR	22898	Label	default :	131:1:4440:4447	22543	150	True				
ANR	22899	Identifier	default		22543	0					
ANR	22900	ExpressionStatement	"snprintf ( tokbuf , sizeof ( tokbuf ) , ""%c[%d]"" , token , token )"	131:10:4449:4505	22543	151	True				
ANR	22901	CallExpression	"snprintf ( tokbuf , sizeof ( tokbuf ) , ""%c[%d]"" , token , token )"		22543	0					
ANR	22902	Callee	snprintf		22543	0					
ANR	22903	Identifier	snprintf		22543	0					
ANR	22904	ArgumentList	tokbuf		22543	1					
ANR	22905	Argument	tokbuf		22543	0					
ANR	22906	Identifier	tokbuf		22543	0					
ANR	22907	Argument	sizeof ( tokbuf )		22543	1					
ANR	22908	SizeofExpression	sizeof ( tokbuf )		22543	0					
ANR	22909	Sizeof	sizeof		22543	0					
ANR	22910	SizeofOperand	tokbuf		22543	1					
ANR	22911	Argument	"""%c[%d]"""		22543	2					
ANR	22912	PrimaryExpression	"""%c[%d]"""		22543	0					
ANR	22913	Argument	token		22543	3					
ANR	22914	Identifier	token		22543	0					
ANR	22915	Argument	token		22543	4					
ANR	22916	Identifier	token		22543	0					
ANR	22917	ExpressionStatement	tokstr = tokbuf	132:3:4510:4525	22543	152	True				
ANR	22918	AssignmentExpression	tokstr = tokbuf		22543	0		=			
ANR	22919	Identifier	tokstr		22543	0					
ANR	22920	Identifier	tokbuf		22543	1					
ANR	22921	BreakStatement	break ;	132:20:4527:4532	22543	153	True				
ANR	22922	ReturnStatement	return tokstr ;	134:1:4538:4551	22543	4	True				
ANR	22923	Identifier	tokstr		22543	0					
ANR	22924	ReturnType	static const char *		22543	1					
ANR	22925	Identifier	tokenToString		22543	2					
ANR	22926	ParameterList	const int token		22543	3					
ANR	22927	Parameter	const int token	75:14:2397:2411	22543	0	True				
ANR	22928	ParameterType	const int		22543	0					
ANR	22929	Identifier	token		22543	1					
ANR	22930	CFGEntryNode	ENTRY		22543		True				
ANR	22931	CFGExitNode	EXIT		22543		True				
ANR	22932	Symbol	tokstr		22543						
ANR	22933	Symbol	tokbuf		22543						
ANR	22934	Symbol	token		22543						
ANR	22935	DeclStmt									
ANR	22936	Decl							const char	const char *	pRet
ANR	22937	Function	cnfFiltType2str	168:0:5017:5364							
ANR	22938	FunctionDef	cnfFiltType2str (const enum cnfFiltType filttype)		22937	0					
ANR	22939	CompoundStatement		170:0:5078:5364	22937	0					
ANR	22940	SwitchStatement	switch ( filttype )		22937	0					
ANR	22941	Condition	filttype	171:8:5088:5095	22937	0	True				
ANR	22942	Identifier	filttype		22937	0					
ANR	22943	CompoundStatement		2:18:19:19	22937	1					
ANR	22944	Label	case CNFFILT_NONE :	172:1:5101:5118	22937	0	True				
ANR	22945	Identifier	CNFFILT_NONE		22937	0					
ANR	22946	ReturnStatement	"return ( ""filter:none"" ) ;"	173:2:5122:5143	22937	1	True				
ANR	22947	PrimaryExpression	"""filter:none"""		22937	0					
ANR	22948	Label	case CNFFILT_PRI :	174:1:5146:5162	22937	2	True				
ANR	22949	Identifier	CNFFILT_PRI		22937	0					
ANR	22950	ReturnStatement	"return ( ""filter:pri"" ) ;"	175:2:5166:5186	22937	3	True				
ANR	22951	PrimaryExpression	"""filter:pri"""		22937	0					
ANR	22952	Label	case CNFFILT_PROP :	176:1:5189:5206	22937	4	True				
ANR	22953	Identifier	CNFFILT_PROP		22937	0					
ANR	22954	ReturnStatement	"return ( ""filter:prop"" ) ;"	177:2:5210:5231	22937	5	True				
ANR	22955	PrimaryExpression	"""filter:prop"""		22937	0					
ANR	22956	Label	case CNFFILT_SCRIPT :	178:1:5234:5253	22937	6	True				
ANR	22957	Identifier	CNFFILT_SCRIPT		22937	0					
ANR	22958	ReturnStatement	"return ( ""filter:script"" ) ;"	179:2:5257:5280	22937	7	True				
ANR	22959	PrimaryExpression	"""filter:script"""		22937	0					
ANR	22960	Label	default :	180:1:5283:5290	22937	8	True				
ANR	22961	Identifier	default		22937	0					
ANR	22962	ReturnStatement	"return ( ""error:invalid_filter_type"" ) ;"	181:2:5294:5329	22937	9	True				
ANR	22963	PrimaryExpression	"""error:invalid_filter_type"""		22937	0					
ANR	22964	ReturnType	const char *		22937	1					
ANR	22965	Identifier	cnfFiltType2str		22937	2					
ANR	22966	ParameterList	const enum cnfFiltType filttype		22937	3					
ANR	22967	Parameter	const enum cnfFiltType filttype	169:16:5045:5075	22937	0	True				
ANR	22968	ParameterType	const enum cnfFiltType		22937	0					
ANR	22969	Identifier	filttype		22937	1					
ANR	22970	CFGEntryNode	ENTRY		22937		True				
ANR	22971	CFGExitNode	EXIT		22937		True				
ANR	22972	Symbol	filttype		22937						
ANR	22973	Function	cnfobjType2str	185:0:5367:6135							
ANR	22974	FunctionDef	cnfobjType2str (const enum cnfobjType ot)		22973	0					
ANR	22975	CompoundStatement		187:0:5420:6135	22973	0					
ANR	22976	SwitchStatement	switch ( ot )		22973	0					
ANR	22977	Condition	ot	188:8:5430:5431	22973	0	True				
ANR	22978	Identifier	ot		22973	0					
ANR	22979	CompoundStatement		2:12:13:13	22973	1					
ANR	22980	Label	case CNFOBJ_ACTION :	189:1:5437:5455	22973	0	True				
ANR	22981	Identifier	CNFOBJ_ACTION		22973	0					
ANR	22982	ReturnStatement	"return ""action"" ;"	190:2:5459:5474	22973	1	True				
ANR	22983	PrimaryExpression	"""action"""		22973	0					
ANR	22984	BreakStatement	break ;	191:2:5478:5483	22973	2	True				
ANR	22985	Label	case CNFOBJ_RULESET :	192:1:5486:5505	22973	3	True				
ANR	22986	Identifier	CNFOBJ_RULESET		22973	0					
ANR	22987	ReturnStatement	"return ""ruleset"" ;"	193:2:5509:5525	22973	4	True				
ANR	22988	PrimaryExpression	"""ruleset"""		22973	0					
ANR	22989	BreakStatement	break ;	194:2:5529:5534	22973	5	True				
ANR	22990	Label	case CNFOBJ_GLOBAL :	195:1:5537:5555	22973	6	True				
ANR	22991	Identifier	CNFOBJ_GLOBAL		22973	0					
ANR	22992	ReturnStatement	"return ""global"" ;"	196:2:5559:5574	22973	7	True				
ANR	22993	PrimaryExpression	"""global"""		22973	0					
ANR	22994	BreakStatement	break ;	197:2:5578:5583	22973	8	True				
ANR	22995	Label	case CNFOBJ_INPUT :	198:1:5586:5603	22973	9	True				
ANR	22996	Identifier	CNFOBJ_INPUT		22973	0					
ANR	22997	ReturnStatement	"return ""input"" ;"	199:2:5607:5621	22973	10	True				
ANR	22998	PrimaryExpression	"""input"""		22973	0					
ANR	22999	BreakStatement	break ;	200:2:5625:5630	22973	11	True				
ANR	23000	Label	case CNFOBJ_MODULE :	201:1:5633:5651	22973	12	True				
ANR	23001	Identifier	CNFOBJ_MODULE		22973	0					
ANR	23002	ReturnStatement	"return ""module"" ;"	202:2:5655:5670	22973	13	True				
ANR	23003	PrimaryExpression	"""module"""		22973	0					
ANR	23004	BreakStatement	break ;	203:2:5674:5679	22973	14	True				
ANR	23005	Label	case CNFOBJ_TPL :	204:1:5682:5697	22973	15	True				
ANR	23006	Identifier	CNFOBJ_TPL		22973	0					
ANR	23007	ReturnStatement	"return ""template"" ;"	205:2:5701:5718	22973	16	True				
ANR	23008	PrimaryExpression	"""template"""		22973	0					
ANR	23009	BreakStatement	break ;	206:2:5722:5727	22973	17	True				
ANR	23010	Label	case CNFOBJ_PROPERTY :	207:1:5730:5750	22973	18	True				
ANR	23011	Identifier	CNFOBJ_PROPERTY		22973	0					
ANR	23012	ReturnStatement	"return ""property"" ;"	208:2:5754:5771	22973	19	True				
ANR	23013	PrimaryExpression	"""property"""		22973	0					
ANR	23014	BreakStatement	break ;	209:2:5775:5780	22973	20	True				
ANR	23015	Label	case CNFOBJ_CONSTANT :	210:1:5783:5803	22973	21	True				
ANR	23016	Identifier	CNFOBJ_CONSTANT		22973	0					
ANR	23017	ReturnStatement	"return ""constant"" ;"	211:2:5807:5824	22973	22	True				
ANR	23018	PrimaryExpression	"""constant"""		22973	0					
ANR	23019	BreakStatement	break ;	212:2:5828:5833	22973	23	True				
ANR	23020	Label	case CNFOBJ_MAINQ :	213:1:5836:5853	22973	24	True				
ANR	23021	Identifier	CNFOBJ_MAINQ		22973	0					
ANR	23022	ReturnStatement	"return ""main_queue"" ;"	214:2:5857:5876	22973	25	True				
ANR	23023	PrimaryExpression	"""main_queue"""		22973	0					
ANR	23024	Label	case CNFOBJ_LOOKUP_TABLE :	215:1:5879:5903	22973	26	True				
ANR	23025	Identifier	CNFOBJ_LOOKUP_TABLE		22973	0					
ANR	23026	ReturnStatement	"return ""lookup_table"" ;"	216:2:5907:5928	22973	27	True				
ANR	23027	PrimaryExpression	"""lookup_table"""		22973	0					
ANR	23028	Label	case CNFOBJ_PARSER :	217:1:5931:5949	22973	28	True				
ANR	23029	Identifier	CNFOBJ_PARSER		22973	0					
ANR	23030	ReturnStatement	"return ""parser"" ;"	218:2:5953:5968	22973	29	True				
ANR	23031	PrimaryExpression	"""parser"""		22973	0					
ANR	23032	BreakStatement	break ;	219:2:5972:5977	22973	30	True				
ANR	23033	Label	case CNFOBJ_TIMEZONE :	220:1:5980:6000	22973	31	True				
ANR	23034	Identifier	CNFOBJ_TIMEZONE		22973	0					
ANR	23035	ReturnStatement	"return ""timezone"" ;"	221:2:6004:6021	22973	32	True				
ANR	23036	PrimaryExpression	"""timezone"""		22973	0					
ANR	23037	BreakStatement	break ;	222:2:6025:6030	22973	33	True				
ANR	23038	Label	case CNFOBJ_DYN_STATS :	223:1:6033:6054	22973	34	True				
ANR	23039	Identifier	CNFOBJ_DYN_STATS		22973	0					
ANR	23040	ReturnStatement	"return ""dyn_stats"" ;"	224:2:6058:6076	22973	35	True				
ANR	23041	PrimaryExpression	"""dyn_stats"""		22973	0					
ANR	23042	BreakStatement	break ;	225:2:6080:6085	22973	36	True				
ANR	23043	Label	default :	226:1:6088:6095	22973	37	True				
ANR	23044	Identifier	default		22973	0					
ANR	23045	ReturnStatement	"return ""error: invalid cnfobjType"" ;"	226:9:6096:6130	22973	38	True				
ANR	23046	PrimaryExpression	"""error: invalid cnfobjType"""		22973	0					
ANR	23047	ReturnType	const char *		22973	1					
ANR	23048	Identifier	cnfobjType2str		22973	2					
ANR	23049	ParameterList	const enum cnfobjType ot		22973	3					
ANR	23050	Parameter	const enum cnfobjType ot	186:15:5394:5417	22973	0	True				
ANR	23051	ParameterType	const enum cnfobjType		22973	0					
ANR	23052	Identifier	ot		22973	1					
ANR	23053	CFGEntryNode	ENTRY		22973		True				
ANR	23054	CFGExitNode	EXIT		22973		True				
ANR	23055	Symbol	ot		22973						
ANR	23056	Function	DecodePropFilter	234:0:6292:9206							
ANR	23057	FunctionDef	"DecodePropFilter (uchar * pline , struct cnfstmt * stmt)"		23056	0					
ANR	23058	CompoundStatement		236:0:6361:9206	23056	0					
ANR	23059	IdentifierDeclStatement	rsParsObj * pPars = NULL ;	237:1:6364:6387	23056	0	True				
ANR	23060	IdentifierDecl	* pPars = NULL		23056	0					
ANR	23061	IdentifierDeclType	rsParsObj *		23056	0					
ANR	23062	Identifier	pPars		23056	1					
ANR	23063	AssignmentExpression	* pPars = NULL		23056	2		=			
ANR	23064	Identifier	NULL		23056	0					
ANR	23065	Identifier	NULL		23056	1					
ANR	23066	IdentifierDeclStatement	cstr_t * pCSCompOp = NULL ;	238:1:6390:6414	23056	1	True				
ANR	23067	IdentifierDecl	* pCSCompOp = NULL		23056	0					
ANR	23068	IdentifierDeclType	cstr_t *		23056	0					
ANR	23069	Identifier	pCSCompOp		23056	1					
ANR	23070	AssignmentExpression	* pCSCompOp = NULL		23056	2		=			
ANR	23071	Identifier	NULL		23056	0					
ANR	23072	Identifier	NULL		23056	1					
ANR	23073	IdentifierDeclStatement	cstr_t * pCSPropName = NULL ;	239:1:6417:6443	23056	2	True				
ANR	23074	IdentifierDecl	* pCSPropName = NULL		23056	0					
ANR	23075	IdentifierDeclType	cstr_t *		23056	0					
ANR	23076	Identifier	pCSPropName		23056	1					
ANR	23077	AssignmentExpression	* pCSPropName = NULL		23056	2		=			
ANR	23078	Identifier	NULL		23056	0					
ANR	23079	Identifier	NULL		23056	1					
ANR	23080	IdentifierDeclStatement	int iOffset ;	240:1:6446:6457	23056	3	True				
ANR	23081	IdentifierDecl	iOffset		23056	0					
ANR	23082	IdentifierDeclType	int		23056	0					
ANR	23083	Identifier	iOffset		23056	1					
ANR	23084	ExpressionStatement	DEFiRet	241:1:6489:6496	23056	4	True				
ANR	23085	Identifier	DEFiRet		23056	0					
ANR	23086	ExpressionStatement	ASSERT ( pline != NULL )	243:1:6500:6521	23056	5	True				
ANR	23087	CallExpression	ASSERT ( pline != NULL )		23056	0					
ANR	23088	Callee	ASSERT		23056	0					
ANR	23089	Identifier	ASSERT		23056	0					
ANR	23090	ArgumentList	pline != NULL		23056	1					
ANR	23091	Argument	pline != NULL		23056	0					
ANR	23092	EqualityExpression	pline != NULL		23056	0		!=			
ANR	23093	Identifier	pline		23056	0					
ANR	23094	Identifier	NULL		23056	1					
ANR	23095	ExpressionStatement	"DBGPRINTF ( ""Decoding property-based filter '%s'\\n"" , pline )"	245:1:6525:6582	23056	6	True				
ANR	23096	CallExpression	"DBGPRINTF ( ""Decoding property-based filter '%s'\\n"" , pline )"		23056	0					
ANR	23097	Callee	DBGPRINTF		23056	0					
ANR	23098	Identifier	DBGPRINTF		23056	0					
ANR	23099	ArgumentList	"""Decoding property-based filter '%s'\\n"""		23056	1					
ANR	23100	Argument	"""Decoding property-based filter '%s'\\n"""		23056	0					
ANR	23101	PrimaryExpression	"""Decoding property-based filter '%s'\\n"""		23056	0					
ANR	23102	Argument	pline		23056	1					
ANR	23103	Identifier	pline		23056	0					
ANR	23104	IfStatement	"if ( ( iRet = rsParsConstructFromSz ( & pPars , pline + 1 ) ) != RS_RET_OK )"		23056	7					
ANR	23105	Condition	"( iRet = rsParsConstructFromSz ( & pPars , pline + 1 ) ) != RS_RET_OK"	248:4:6665:6724	23056	0	True				
ANR	23106	EqualityExpression	"( iRet = rsParsConstructFromSz ( & pPars , pline + 1 ) ) != RS_RET_OK"		23056	0		!=			
ANR	23107	AssignmentExpression	"iRet = rsParsConstructFromSz ( & pPars , pline + 1 )"		23056	0		=			
ANR	23108	Identifier	iRet		23056	0					
ANR	23109	CallExpression	"rsParsConstructFromSz ( & pPars , pline + 1 )"		23056	1					
ANR	23110	Callee	rsParsConstructFromSz		23056	0					
ANR	23111	Identifier	rsParsConstructFromSz		23056	0					
ANR	23112	ArgumentList	& pPars		23056	1					
ANR	23113	Argument	& pPars		23056	0					
ANR	23114	UnaryOperationExpression	& pPars		23056	0					
ANR	23115	UnaryOperator	&		23056	0					
ANR	23116	Identifier	pPars		23056	1					
ANR	23117	Argument	pline + 1		23056	1					
ANR	23118	AdditiveExpression	pline + 1		23056	0		+			
ANR	23119	Identifier	pline		23056	0					
ANR	23120	PrimaryExpression	1		23056	1					
ANR	23121	Identifier	RS_RET_OK		23056	1					
ANR	23122	CompoundStatement		13:66:365:365	23056	1					
ANR	23123	ExpressionStatement	"parser_errmsg ( ""error %d constructing parser object"" , iRet )"	249:2:6731:6789	23056	0	True				
ANR	23124	CallExpression	"parser_errmsg ( ""error %d constructing parser object"" , iRet )"		23056	0					
ANR	23125	Callee	parser_errmsg		23056	0					
ANR	23126	Identifier	parser_errmsg		23056	0					
ANR	23127	ArgumentList	"""error %d constructing parser object"""		23056	1					
ANR	23128	Argument	"""error %d constructing parser object"""		23056	0					
ANR	23129	PrimaryExpression	"""error %d constructing parser object"""		23056	0					
ANR	23130	Argument	iRet		23056	1					
ANR	23131	Identifier	iRet		23056	0					
ANR	23132	ExpressionStatement	FINALIZE	250:2:6793:6801	23056	1	True				
ANR	23133	Identifier	FINALIZE		23056	0					
ANR	23134	ExpressionStatement	"iRet = parsDelimCStr ( pPars , & pCSPropName , ',' , 1 , 1 , 1 )"	254:1:6829:6884	23056	8	True				
ANR	23135	AssignmentExpression	"iRet = parsDelimCStr ( pPars , & pCSPropName , ',' , 1 , 1 , 1 )"		23056	0		=			
ANR	23136	Identifier	iRet		23056	0					
ANR	23137	CallExpression	"parsDelimCStr ( pPars , & pCSPropName , ',' , 1 , 1 , 1 )"		23056	1					
ANR	23138	Callee	parsDelimCStr		23056	0					
ANR	23139	Identifier	parsDelimCStr		23056	0					
ANR	23140	ArgumentList	pPars		23056	1					
ANR	23141	Argument	pPars		23056	0					
ANR	23142	Identifier	pPars		23056	0					
ANR	23143	Argument	& pCSPropName		23056	1					
ANR	23144	UnaryOperationExpression	& pCSPropName		23056	0					
ANR	23145	UnaryOperator	&		23056	0					
ANR	23146	Identifier	pCSPropName		23056	1					
ANR	23147	Argument	"','"		23056	2					
ANR	23148	PrimaryExpression	"','"		23056	0					
ANR	23149	Argument	1		23056	3					
ANR	23150	PrimaryExpression	1		23056	0					
ANR	23151	Argument	1		23056	4					
ANR	23152	PrimaryExpression	1		23056	0					
ANR	23153	Argument	1		23056	5					
ANR	23154	PrimaryExpression	1		23056	0					
ANR	23155	IfStatement	if ( iRet != RS_RET_OK )		23056	9					
ANR	23156	Condition	iRet != RS_RET_OK	255:4:6890:6906	23056	0	True				
ANR	23157	EqualityExpression	iRet != RS_RET_OK		23056	0		!=			
ANR	23158	Identifier	iRet		23056	0					
ANR	23159	Identifier	RS_RET_OK		23056	1					
ANR	23160	CompoundStatement		20:23:547:547	23056	1					
ANR	23161	ExpressionStatement	"parser_errmsg ( ""error %d parsing filter property"" , iRet )"	256:2:6913:6968	23056	0	True				
ANR	23162	CallExpression	"parser_errmsg ( ""error %d parsing filter property"" , iRet )"		23056	0					
ANR	23163	Callee	parser_errmsg		23056	0					
ANR	23164	Identifier	parser_errmsg		23056	0					
ANR	23165	ArgumentList	"""error %d parsing filter property"""		23056	1					
ANR	23166	Argument	"""error %d parsing filter property"""		23056	0					
ANR	23167	PrimaryExpression	"""error %d parsing filter property"""		23056	0					
ANR	23168	Argument	iRet		23056	1					
ANR	23169	Identifier	iRet		23056	0					
ANR	23170	ExpressionStatement	rsParsDestruct ( pPars )	257:2:6972:6993	23056	1	True				
ANR	23171	CallExpression	rsParsDestruct ( pPars )		23056	0					
ANR	23172	Callee	rsParsDestruct		23056	0					
ANR	23173	Identifier	rsParsDestruct		23056	0					
ANR	23174	ArgumentList	pPars		23056	1					
ANR	23175	Argument	pPars		23056	0					
ANR	23176	Identifier	pPars		23056	0					
ANR	23177	ExpressionStatement	FINALIZE	258:2:6997:7005	23056	2	True				
ANR	23178	Identifier	FINALIZE		23056	0					
ANR	23179	ExpressionStatement	"CHKiRet ( msgPropDescrFill ( & stmt -> d . s_propfilt . prop , cstrGetSzStrNoNULL ( pCSPropName ) , cstrLen ( pCSPropName ) ) )"	260:1:7011:7119	23056	10	True				
ANR	23180	CallExpression	"CHKiRet ( msgPropDescrFill ( & stmt -> d . s_propfilt . prop , cstrGetSzStrNoNULL ( pCSPropName ) , cstrLen ( pCSPropName ) ) )"		23056	0					
ANR	23181	Callee	CHKiRet		23056	0					
ANR	23182	Identifier	CHKiRet		23056	0					
ANR	23183	ArgumentList	"msgPropDescrFill ( & stmt -> d . s_propfilt . prop , cstrGetSzStrNoNULL ( pCSPropName ) , cstrLen ( pCSPropName ) )"		23056	1					
ANR	23184	Argument	"msgPropDescrFill ( & stmt -> d . s_propfilt . prop , cstrGetSzStrNoNULL ( pCSPropName ) , cstrLen ( pCSPropName ) )"		23056	0					
ANR	23185	CallExpression	"msgPropDescrFill ( & stmt -> d . s_propfilt . prop , cstrGetSzStrNoNULL ( pCSPropName ) , cstrLen ( pCSPropName ) )"		23056	0					
ANR	23186	Callee	msgPropDescrFill		23056	0					
ANR	23187	Identifier	msgPropDescrFill		23056	0					
ANR	23188	ArgumentList	& stmt -> d . s_propfilt . prop		23056	1					
ANR	23189	Argument	& stmt -> d . s_propfilt . prop		23056	0					
ANR	23190	UnaryOperationExpression	& stmt -> d . s_propfilt . prop		23056	0					
ANR	23191	UnaryOperator	&		23056	0					
ANR	23192	MemberAccess	stmt -> d . s_propfilt . prop		23056	1					
ANR	23193	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23194	PtrMemberAccess	stmt -> d		23056	0					
ANR	23195	Identifier	stmt		23056	0					
ANR	23196	Identifier	d		23056	1					
ANR	23197	Identifier	s_propfilt		23056	1					
ANR	23198	Identifier	prop		23056	1					
ANR	23199	Argument	cstrGetSzStrNoNULL ( pCSPropName )		23056	1					
ANR	23200	CallExpression	cstrGetSzStrNoNULL ( pCSPropName )		23056	0					
ANR	23201	Callee	cstrGetSzStrNoNULL		23056	0					
ANR	23202	Identifier	cstrGetSzStrNoNULL		23056	0					
ANR	23203	ArgumentList	pCSPropName		23056	1					
ANR	23204	Argument	pCSPropName		23056	0					
ANR	23205	Identifier	pCSPropName		23056	0					
ANR	23206	Argument	cstrLen ( pCSPropName )		23056	2					
ANR	23207	CallExpression	cstrLen ( pCSPropName )		23056	0					
ANR	23208	Callee	cstrLen		23056	0					
ANR	23209	Identifier	cstrLen		23056	0					
ANR	23210	ArgumentList	pCSPropName		23056	1					
ANR	23211	Argument	pCSPropName		23056	0					
ANR	23212	Identifier	pCSPropName		23056	0					
ANR	23213	ExpressionStatement	"iRet = parsDelimCStr ( pPars , & pCSCompOp , ',' , 1 , 1 , 1 )"	264:1:7145:7198	23056	11	True				
ANR	23214	AssignmentExpression	"iRet = parsDelimCStr ( pPars , & pCSCompOp , ',' , 1 , 1 , 1 )"		23056	0		=			
ANR	23215	Identifier	iRet		23056	0					
ANR	23216	CallExpression	"parsDelimCStr ( pPars , & pCSCompOp , ',' , 1 , 1 , 1 )"		23056	1					
ANR	23217	Callee	parsDelimCStr		23056	0					
ANR	23218	Identifier	parsDelimCStr		23056	0					
ANR	23219	ArgumentList	pPars		23056	1					
ANR	23220	Argument	pPars		23056	0					
ANR	23221	Identifier	pPars		23056	0					
ANR	23222	Argument	& pCSCompOp		23056	1					
ANR	23223	UnaryOperationExpression	& pCSCompOp		23056	0					
ANR	23224	UnaryOperator	&		23056	0					
ANR	23225	Identifier	pCSCompOp		23056	1					
ANR	23226	Argument	"','"		23056	2					
ANR	23227	PrimaryExpression	"','"		23056	0					
ANR	23228	Argument	1		23056	3					
ANR	23229	PrimaryExpression	1		23056	0					
ANR	23230	Argument	1		23056	4					
ANR	23231	PrimaryExpression	1		23056	0					
ANR	23232	Argument	1		23056	5					
ANR	23233	PrimaryExpression	1		23056	0					
ANR	23234	IfStatement	if ( iRet != RS_RET_OK )		23056	12					
ANR	23235	Condition	iRet != RS_RET_OK	265:4:7204:7220	23056	0	True				
ANR	23236	EqualityExpression	iRet != RS_RET_OK		23056	0		!=			
ANR	23237	Identifier	iRet		23056	0					
ANR	23238	Identifier	RS_RET_OK		23056	1					
ANR	23239	CompoundStatement		30:23:861:861	23056	1					
ANR	23240	ExpressionStatement	"parser_errmsg ( ""error %d compare operation property - ignoring selector"" , iRet )"	266:2:7227:7305	23056	0	True				
ANR	23241	CallExpression	"parser_errmsg ( ""error %d compare operation property - ignoring selector"" , iRet )"		23056	0					
ANR	23242	Callee	parser_errmsg		23056	0					
ANR	23243	Identifier	parser_errmsg		23056	0					
ANR	23244	ArgumentList	"""error %d compare operation property - ignoring selector"""		23056	1					
ANR	23245	Argument	"""error %d compare operation property - ignoring selector"""		23056	0					
ANR	23246	PrimaryExpression	"""error %d compare operation property - ignoring selector"""		23056	0					
ANR	23247	Argument	iRet		23056	1					
ANR	23248	Identifier	iRet		23056	0					
ANR	23249	ExpressionStatement	rsParsDestruct ( pPars )	267:2:7309:7330	23056	1	True				
ANR	23250	CallExpression	rsParsDestruct ( pPars )		23056	0					
ANR	23251	Callee	rsParsDestruct		23056	0					
ANR	23252	Identifier	rsParsDestruct		23056	0					
ANR	23253	ArgumentList	pPars		23056	1					
ANR	23254	Argument	pPars		23056	0					
ANR	23255	Identifier	pPars		23056	0					
ANR	23256	ExpressionStatement	FINALIZE	268:2:7334:7342	23056	2	True				
ANR	23257	Identifier	FINALIZE		23056	0					
ANR	23258	IfStatement	if ( rsCStrLen ( pCSCompOp ) > 0 )		23056	13					
ANR	23259	Condition	rsCStrLen ( pCSCompOp ) > 0	276:4:7552:7575	23056	0	True				
ANR	23260	RelationalExpression	rsCStrLen ( pCSCompOp ) > 0		23056	0		>			
ANR	23261	CallExpression	rsCStrLen ( pCSCompOp )		23056	0					
ANR	23262	Callee	rsCStrLen		23056	0					
ANR	23263	Identifier	rsCStrLen		23056	0					
ANR	23264	ArgumentList	pCSCompOp		23056	1					
ANR	23265	Argument	pCSCompOp		23056	0					
ANR	23266	Identifier	pCSCompOp		23056	0					
ANR	23267	PrimaryExpression	0		23056	1					
ANR	23268	CompoundStatement		41:30:1216:1216	23056	1					
ANR	23269	IfStatement	if ( * rsCStrGetBufBeg ( pCSCompOp ) == '!' )		23056	0					
ANR	23270	Condition	* rsCStrGetBufBeg ( pCSCompOp ) == '!'	277:5:7585:7618	23056	0	True				
ANR	23271	EqualityExpression	* rsCStrGetBufBeg ( pCSCompOp ) == '!'		23056	0		==			
ANR	23272	UnaryOperationExpression	* rsCStrGetBufBeg ( pCSCompOp )		23056	0					
ANR	23273	UnaryOperator	*		23056	0					
ANR	23274	CallExpression	rsCStrGetBufBeg ( pCSCompOp )		23056	1					
ANR	23275	Callee	rsCStrGetBufBeg		23056	0					
ANR	23276	Identifier	rsCStrGetBufBeg		23056	0					
ANR	23277	ArgumentList	pCSCompOp		23056	1					
ANR	23278	Argument	pCSCompOp		23056	0					
ANR	23279	Identifier	pCSCompOp		23056	0					
ANR	23280	PrimaryExpression	'!'		23056	1					
ANR	23281	CompoundStatement		42:41:1259:1259	23056	1					
ANR	23282	ExpressionStatement	stmt -> d . s_propfilt . isNegated = 1	278:3:7626:7658	23056	0	True				
ANR	23283	AssignmentExpression	stmt -> d . s_propfilt . isNegated = 1		23056	0		=			
ANR	23284	MemberAccess	stmt -> d . s_propfilt . isNegated		23056	0					
ANR	23285	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23286	PtrMemberAccess	stmt -> d		23056	0					
ANR	23287	Identifier	stmt		23056	0					
ANR	23288	Identifier	d		23056	1					
ANR	23289	Identifier	s_propfilt		23056	1					
ANR	23290	Identifier	isNegated		23056	1					
ANR	23291	PrimaryExpression	1		23056	1					
ANR	23292	ExpressionStatement	iOffset = 1	279:3:7663:7674	23056	1	True				
ANR	23293	AssignmentExpression	iOffset = 1		23056	0		=			
ANR	23294	Identifier	iOffset		23056	0					
ANR	23295	PrimaryExpression	1		23056	1					
ANR	23296	ElseStatement	else		23056	0					
ANR	23297	CompoundStatement		45:9:1340:1340	23056	0					
ANR	23298	ExpressionStatement	stmt -> d . s_propfilt . isNegated = 0	281:3:7707:7739	23056	0	True				
ANR	23299	AssignmentExpression	stmt -> d . s_propfilt . isNegated = 0		23056	0		=			
ANR	23300	MemberAccess	stmt -> d . s_propfilt . isNegated		23056	0					
ANR	23301	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23302	PtrMemberAccess	stmt -> d		23056	0					
ANR	23303	Identifier	stmt		23056	0					
ANR	23304	Identifier	d		23056	1					
ANR	23305	Identifier	s_propfilt		23056	1					
ANR	23306	Identifier	isNegated		23056	1					
ANR	23307	PrimaryExpression	0		23056	1					
ANR	23308	ExpressionStatement	iOffset = 0	282:3:7744:7755	23056	1	True				
ANR	23309	AssignmentExpression	iOffset = 0		23056	0		=			
ANR	23310	Identifier	iOffset		23056	0					
ANR	23311	PrimaryExpression	0		23056	1					
ANR	23312	ElseStatement	else		23056	0					
ANR	23313	CompoundStatement		49:8:1407:1407	23056	0					
ANR	23314	ExpressionStatement	stmt -> d . s_propfilt . isNegated = 0	285:2:7773:7805	23056	0	True				
ANR	23315	AssignmentExpression	stmt -> d . s_propfilt . isNegated = 0		23056	0		=			
ANR	23316	MemberAccess	stmt -> d . s_propfilt . isNegated		23056	0					
ANR	23317	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23318	PtrMemberAccess	stmt -> d		23056	0					
ANR	23319	Identifier	stmt		23056	0					
ANR	23320	Identifier	d		23056	1					
ANR	23321	Identifier	s_propfilt		23056	1					
ANR	23322	Identifier	isNegated		23056	1					
ANR	23323	PrimaryExpression	0		23056	1					
ANR	23324	ExpressionStatement	iOffset = 0	286:2:7809:7820	23056	1	True				
ANR	23325	AssignmentExpression	iOffset = 0		23056	0		=			
ANR	23326	Identifier	iOffset		23056	0					
ANR	23327	PrimaryExpression	0		23056	1					
ANR	23328	IfStatement	"if ( ! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""contains"" , 8 ) )"		23056	14					
ANR	23329	Condition	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""contains"" , 8 )"	289:4:7830:7894	23056	0	True				
ANR	23330	UnaryOperationExpression	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""contains"" , 8 )"		23056	0					
ANR	23331	UnaryOperator	!		23056	0					
ANR	23332	CallExpression	"rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""contains"" , 8 )"		23056	1					
ANR	23333	Callee	rsCStrOffsetSzStrCmp		23056	0					
ANR	23334	Identifier	rsCStrOffsetSzStrCmp		23056	0					
ANR	23335	ArgumentList	pCSCompOp		23056	1					
ANR	23336	Argument	pCSCompOp		23056	0					
ANR	23337	Identifier	pCSCompOp		23056	0					
ANR	23338	Argument	iOffset		23056	1					
ANR	23339	Identifier	iOffset		23056	0					
ANR	23340	Argument	"( uchar * ) ""contains"""		23056	2					
ANR	23341	CastExpression	"( uchar * ) ""contains"""		23056	0					
ANR	23342	CastTarget	uchar *		23056	0					
ANR	23343	PrimaryExpression	"""contains"""		23056	1					
ANR	23344	Argument	8		23056	3					
ANR	23345	PrimaryExpression	8		23056	0					
ANR	23346	CompoundStatement		54:71:1535:1535	23056	1					
ANR	23347	ExpressionStatement	stmt -> d . s_propfilt . operation = FIOP_CONTAINS	290:2:7901:7945	23056	0	True				
ANR	23348	AssignmentExpression	stmt -> d . s_propfilt . operation = FIOP_CONTAINS		23056	0		=			
ANR	23349	MemberAccess	stmt -> d . s_propfilt . operation		23056	0					
ANR	23350	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23351	PtrMemberAccess	stmt -> d		23056	0					
ANR	23352	Identifier	stmt		23056	0					
ANR	23353	Identifier	d		23056	1					
ANR	23354	Identifier	s_propfilt		23056	1					
ANR	23355	Identifier	operation		23056	1					
ANR	23356	Identifier	FIOP_CONTAINS		23056	1					
ANR	23357	ElseStatement	else		23056	0					
ANR	23358	IfStatement	"if ( ! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""isequal"" , 7 ) )"		23056	0					
ANR	23359	Condition	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""isequal"" , 7 )"	291:11:7958:8021	23056	0	True				
ANR	23360	UnaryOperationExpression	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""isequal"" , 7 )"		23056	0					
ANR	23361	UnaryOperator	!		23056	0					
ANR	23362	CallExpression	"rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""isequal"" , 7 )"		23056	1					
ANR	23363	Callee	rsCStrOffsetSzStrCmp		23056	0					
ANR	23364	Identifier	rsCStrOffsetSzStrCmp		23056	0					
ANR	23365	ArgumentList	pCSCompOp		23056	1					
ANR	23366	Argument	pCSCompOp		23056	0					
ANR	23367	Identifier	pCSCompOp		23056	0					
ANR	23368	Argument	iOffset		23056	1					
ANR	23369	Identifier	iOffset		23056	0					
ANR	23370	Argument	"( uchar * ) ""isequal"""		23056	2					
ANR	23371	CastExpression	"( uchar * ) ""isequal"""		23056	0					
ANR	23372	CastTarget	uchar *		23056	0					
ANR	23373	PrimaryExpression	"""isequal"""		23056	1					
ANR	23374	Argument	7		23056	3					
ANR	23375	PrimaryExpression	7		23056	0					
ANR	23376	CompoundStatement		56:77:1662:1662	23056	1					
ANR	23377	ExpressionStatement	stmt -> d . s_propfilt . operation = FIOP_ISEQUAL	292:2:8028:8071	23056	0	True				
ANR	23378	AssignmentExpression	stmt -> d . s_propfilt . operation = FIOP_ISEQUAL		23056	0		=			
ANR	23379	MemberAccess	stmt -> d . s_propfilt . operation		23056	0					
ANR	23380	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23381	PtrMemberAccess	stmt -> d		23056	0					
ANR	23382	Identifier	stmt		23056	0					
ANR	23383	Identifier	d		23056	1					
ANR	23384	Identifier	s_propfilt		23056	1					
ANR	23385	Identifier	operation		23056	1					
ANR	23386	Identifier	FIOP_ISEQUAL		23056	1					
ANR	23387	ElseStatement	else		23056	0					
ANR	23388	IfStatement	"if ( ! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""isempty"" , 7 ) )"		23056	0					
ANR	23389	Condition	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""isempty"" , 7 )"	293:11:8084:8147	23056	0	True				
ANR	23390	UnaryOperationExpression	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""isempty"" , 7 )"		23056	0					
ANR	23391	UnaryOperator	!		23056	0					
ANR	23392	CallExpression	"rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""isempty"" , 7 )"		23056	1					
ANR	23393	Callee	rsCStrOffsetSzStrCmp		23056	0					
ANR	23394	Identifier	rsCStrOffsetSzStrCmp		23056	0					
ANR	23395	ArgumentList	pCSCompOp		23056	1					
ANR	23396	Argument	pCSCompOp		23056	0					
ANR	23397	Identifier	pCSCompOp		23056	0					
ANR	23398	Argument	iOffset		23056	1					
ANR	23399	Identifier	iOffset		23056	0					
ANR	23400	Argument	"( uchar * ) ""isempty"""		23056	2					
ANR	23401	CastExpression	"( uchar * ) ""isempty"""		23056	0					
ANR	23402	CastTarget	uchar *		23056	0					
ANR	23403	PrimaryExpression	"""isempty"""		23056	1					
ANR	23404	Argument	7		23056	3					
ANR	23405	PrimaryExpression	7		23056	0					
ANR	23406	CompoundStatement		58:77:1788:1788	23056	1					
ANR	23407	ExpressionStatement	stmt -> d . s_propfilt . operation = FIOP_ISEMPTY	294:2:8154:8197	23056	0	True				
ANR	23408	AssignmentExpression	stmt -> d . s_propfilt . operation = FIOP_ISEMPTY		23056	0		=			
ANR	23409	MemberAccess	stmt -> d . s_propfilt . operation		23056	0					
ANR	23410	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23411	PtrMemberAccess	stmt -> d		23056	0					
ANR	23412	Identifier	stmt		23056	0					
ANR	23413	Identifier	d		23056	1					
ANR	23414	Identifier	s_propfilt		23056	1					
ANR	23415	Identifier	operation		23056	1					
ANR	23416	Identifier	FIOP_ISEMPTY		23056	1					
ANR	23417	ElseStatement	else		23056	0					
ANR	23418	IfStatement	"if ( ! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""startswith"" , 10 ) )"		23056	0					
ANR	23419	Condition	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""startswith"" , 10 )"	295:11:8210:8277	23056	0	True				
ANR	23420	UnaryOperationExpression	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""startswith"" , 10 )"		23056	0					
ANR	23421	UnaryOperator	!		23056	0					
ANR	23422	CallExpression	"rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( uchar * ) ""startswith"" , 10 )"		23056	1					
ANR	23423	Callee	rsCStrOffsetSzStrCmp		23056	0					
ANR	23424	Identifier	rsCStrOffsetSzStrCmp		23056	0					
ANR	23425	ArgumentList	pCSCompOp		23056	1					
ANR	23426	Argument	pCSCompOp		23056	0					
ANR	23427	Identifier	pCSCompOp		23056	0					
ANR	23428	Argument	iOffset		23056	1					
ANR	23429	Identifier	iOffset		23056	0					
ANR	23430	Argument	"( uchar * ) ""startswith"""		23056	2					
ANR	23431	CastExpression	"( uchar * ) ""startswith"""		23056	0					
ANR	23432	CastTarget	uchar *		23056	0					
ANR	23433	PrimaryExpression	"""startswith"""		23056	1					
ANR	23434	Argument	10		23056	3					
ANR	23435	PrimaryExpression	10		23056	0					
ANR	23436	CompoundStatement		60:81:1918:1918	23056	1					
ANR	23437	ExpressionStatement	stmt -> d . s_propfilt . operation = FIOP_STARTSWITH	296:2:8284:8330	23056	0	True				
ANR	23438	AssignmentExpression	stmt -> d . s_propfilt . operation = FIOP_STARTSWITH		23056	0		=			
ANR	23439	MemberAccess	stmt -> d . s_propfilt . operation		23056	0					
ANR	23440	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23441	PtrMemberAccess	stmt -> d		23056	0					
ANR	23442	Identifier	stmt		23056	0					
ANR	23443	Identifier	d		23056	1					
ANR	23444	Identifier	s_propfilt		23056	1					
ANR	23445	Identifier	operation		23056	1					
ANR	23446	Identifier	FIOP_STARTSWITH		23056	1					
ANR	23447	ElseStatement	else		23056	0					
ANR	23448	IfStatement	"if ( ! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( unsigned char * ) ""regex"" , 5 ) )"		23056	0					
ANR	23449	Condition	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( unsigned char * ) ""regex"" , 5 )"	297:11:8343:8412	23056	0	True				
ANR	23450	UnaryOperationExpression	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( unsigned char * ) ""regex"" , 5 )"		23056	0					
ANR	23451	UnaryOperator	!		23056	0					
ANR	23452	CallExpression	"rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( unsigned char * ) ""regex"" , 5 )"		23056	1					
ANR	23453	Callee	rsCStrOffsetSzStrCmp		23056	0					
ANR	23454	Identifier	rsCStrOffsetSzStrCmp		23056	0					
ANR	23455	ArgumentList	pCSCompOp		23056	1					
ANR	23456	Argument	pCSCompOp		23056	0					
ANR	23457	Identifier	pCSCompOp		23056	0					
ANR	23458	Argument	iOffset		23056	1					
ANR	23459	Identifier	iOffset		23056	0					
ANR	23460	Argument	"( unsigned char * ) ""regex"""		23056	2					
ANR	23461	CastExpression	"( unsigned char * ) ""regex"""		23056	0					
ANR	23462	CastTarget	unsigned char *		23056	0					
ANR	23463	PrimaryExpression	"""regex"""		23056	1					
ANR	23464	Argument	5		23056	3					
ANR	23465	PrimaryExpression	5		23056	0					
ANR	23466	CompoundStatement		62:83:2053:2053	23056	1					
ANR	23467	ExpressionStatement	stmt -> d . s_propfilt . operation = FIOP_REGEX	298:2:8419:8460	23056	0	True				
ANR	23468	AssignmentExpression	stmt -> d . s_propfilt . operation = FIOP_REGEX		23056	0		=			
ANR	23469	MemberAccess	stmt -> d . s_propfilt . operation		23056	0					
ANR	23470	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23471	PtrMemberAccess	stmt -> d		23056	0					
ANR	23472	Identifier	stmt		23056	0					
ANR	23473	Identifier	d		23056	1					
ANR	23474	Identifier	s_propfilt		23056	1					
ANR	23475	Identifier	operation		23056	1					
ANR	23476	Identifier	FIOP_REGEX		23056	1					
ANR	23477	ElseStatement	else		23056	0					
ANR	23478	IfStatement	"if ( ! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( unsigned char * ) ""ereregex"" , 8 ) )"		23056	0					
ANR	23479	Condition	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( unsigned char * ) ""ereregex"" , 8 )"	299:11:8473:8545	23056	0	True				
ANR	23480	UnaryOperationExpression	"! rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( unsigned char * ) ""ereregex"" , 8 )"		23056	0					
ANR	23481	UnaryOperator	!		23056	0					
ANR	23482	CallExpression	"rsCStrOffsetSzStrCmp ( pCSCompOp , iOffset , ( unsigned char * ) ""ereregex"" , 8 )"		23056	1					
ANR	23483	Callee	rsCStrOffsetSzStrCmp		23056	0					
ANR	23484	Identifier	rsCStrOffsetSzStrCmp		23056	0					
ANR	23485	ArgumentList	pCSCompOp		23056	1					
ANR	23486	Argument	pCSCompOp		23056	0					
ANR	23487	Identifier	pCSCompOp		23056	0					
ANR	23488	Argument	iOffset		23056	1					
ANR	23489	Identifier	iOffset		23056	0					
ANR	23490	Argument	"( unsigned char * ) ""ereregex"""		23056	2					
ANR	23491	CastExpression	"( unsigned char * ) ""ereregex"""		23056	0					
ANR	23492	CastTarget	unsigned char *		23056	0					
ANR	23493	PrimaryExpression	"""ereregex"""		23056	1					
ANR	23494	Argument	8		23056	3					
ANR	23495	PrimaryExpression	8		23056	0					
ANR	23496	CompoundStatement		64:86:2186:2186	23056	1					
ANR	23497	ExpressionStatement	stmt -> d . s_propfilt . operation = FIOP_EREREGEX	300:2:8552:8596	23056	0	True				
ANR	23498	AssignmentExpression	stmt -> d . s_propfilt . operation = FIOP_EREREGEX		23056	0		=			
ANR	23499	MemberAccess	stmt -> d . s_propfilt . operation		23056	0					
ANR	23500	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23501	PtrMemberAccess	stmt -> d		23056	0					
ANR	23502	Identifier	stmt		23056	0					
ANR	23503	Identifier	d		23056	1					
ANR	23504	Identifier	s_propfilt		23056	1					
ANR	23505	Identifier	operation		23056	1					
ANR	23506	Identifier	FIOP_EREREGEX		23056	1					
ANR	23507	ElseStatement	else		23056	0					
ANR	23508	CompoundStatement		66:8:2244:2244	23056	0					
ANR	23509	ExpressionStatement	"parser_errmsg ( ""error: invalid compare operation '%s'"" , ( char * ) rsCStrGetSzStrNoNULL ( pCSCompOp ) )"	302:2:8610:8718	23056	0	True				
ANR	23510	CallExpression	"parser_errmsg ( ""error: invalid compare operation '%s'"" , ( char * ) rsCStrGetSzStrNoNULL ( pCSCompOp ) )"		23056	0					
ANR	23511	Callee	parser_errmsg		23056	0					
ANR	23512	Identifier	parser_errmsg		23056	0					
ANR	23513	ArgumentList	"""error: invalid compare operation '%s'"""		23056	1					
ANR	23514	Argument	"""error: invalid compare operation '%s'"""		23056	0					
ANR	23515	PrimaryExpression	"""error: invalid compare operation '%s'"""		23056	0					
ANR	23516	Argument	( char * ) rsCStrGetSzStrNoNULL ( pCSCompOp )		23056	1					
ANR	23517	CastExpression	( char * ) rsCStrGetSzStrNoNULL ( pCSCompOp )		23056	0					
ANR	23518	CastTarget	char *		23056	0					
ANR	23519	CallExpression	rsCStrGetSzStrNoNULL ( pCSCompOp )		23056	1					
ANR	23520	Callee	rsCStrGetSzStrNoNULL		23056	0					
ANR	23521	Identifier	rsCStrGetSzStrNoNULL		23056	0					
ANR	23522	ArgumentList	pCSCompOp		23056	1					
ANR	23523	Argument	pCSCompOp		23056	0					
ANR	23524	Identifier	pCSCompOp		23056	0					
ANR	23525	ExpressionStatement	ABORT_FINALIZE ( RS_RET_ERR )	304:2:8722:8748	23056	1	True				
ANR	23526	CallExpression	ABORT_FINALIZE ( RS_RET_ERR )		23056	0					
ANR	23527	Callee	ABORT_FINALIZE		23056	0					
ANR	23528	Identifier	ABORT_FINALIZE		23056	0					
ANR	23529	ArgumentList	RS_RET_ERR		23056	1					
ANR	23530	Argument	RS_RET_ERR		23056	0					
ANR	23531	Identifier	RS_RET_ERR		23056	0					
ANR	23532	IfStatement	if ( stmt -> d . s_propfilt . operation != FIOP_ISEMPTY )		23056	15					
ANR	23533	Condition	stmt -> d . s_propfilt . operation != FIOP_ISEMPTY	307:4:8758:8801	23056	0	True				
ANR	23534	EqualityExpression	stmt -> d . s_propfilt . operation != FIOP_ISEMPTY		23056	0		!=			
ANR	23535	MemberAccess	stmt -> d . s_propfilt . operation		23056	0					
ANR	23536	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23537	PtrMemberAccess	stmt -> d		23056	0					
ANR	23538	Identifier	stmt		23056	0					
ANR	23539	Identifier	d		23056	1					
ANR	23540	Identifier	s_propfilt		23056	1					
ANR	23541	Identifier	operation		23056	1					
ANR	23542	Identifier	FIOP_ISEMPTY		23056	1					
ANR	23543	CompoundStatement		72:50:2442:2442	23056	1					
ANR	23544	ExpressionStatement	"iRet = parsQuotedCStr ( pPars , & stmt -> d . s_propfilt . pCSCompValue )"	309:2:8835:8897	23056	0	True				
ANR	23545	AssignmentExpression	"iRet = parsQuotedCStr ( pPars , & stmt -> d . s_propfilt . pCSCompValue )"		23056	0		=			
ANR	23546	Identifier	iRet		23056	0					
ANR	23547	CallExpression	"parsQuotedCStr ( pPars , & stmt -> d . s_propfilt . pCSCompValue )"		23056	1					
ANR	23548	Callee	parsQuotedCStr		23056	0					
ANR	23549	Identifier	parsQuotedCStr		23056	0					
ANR	23550	ArgumentList	pPars		23056	1					
ANR	23551	Argument	pPars		23056	0					
ANR	23552	Identifier	pPars		23056	0					
ANR	23553	Argument	& stmt -> d . s_propfilt . pCSCompValue		23056	1					
ANR	23554	UnaryOperationExpression	& stmt -> d . s_propfilt . pCSCompValue		23056	0					
ANR	23555	UnaryOperator	&		23056	0					
ANR	23556	MemberAccess	stmt -> d . s_propfilt . pCSCompValue		23056	1					
ANR	23557	MemberAccess	stmt -> d . s_propfilt		23056	0					
ANR	23558	PtrMemberAccess	stmt -> d		23056	0					
ANR	23559	Identifier	stmt		23056	0					
ANR	23560	Identifier	d		23056	1					
ANR	23561	Identifier	s_propfilt		23056	1					
ANR	23562	Identifier	pCSCompValue		23056	1					
ANR	23563	IfStatement	if ( iRet != RS_RET_OK )		23056	1					
ANR	23564	Condition	iRet != RS_RET_OK	310:5:8904:8920	23056	0	True				
ANR	23565	EqualityExpression	iRet != RS_RET_OK		23056	0		!=			
ANR	23566	Identifier	iRet		23056	0					
ANR	23567	Identifier	RS_RET_OK		23056	1					
ANR	23568	CompoundStatement		75:24:2561:2561	23056	1					
ANR	23569	ExpressionStatement	"parser_errmsg ( ""error %d compare value property"" , iRet )"	311:3:8928:8982	23056	0	True				
ANR	23570	CallExpression	"parser_errmsg ( ""error %d compare value property"" , iRet )"		23056	0					
ANR	23571	Callee	parser_errmsg		23056	0					
ANR	23572	Identifier	parser_errmsg		23056	0					
ANR	23573	ArgumentList	"""error %d compare value property"""		23056	1					
ANR	23574	Argument	"""error %d compare value property"""		23056	0					
ANR	23575	PrimaryExpression	"""error %d compare value property"""		23056	0					
ANR	23576	Argument	iRet		23056	1					
ANR	23577	Identifier	iRet		23056	0					
ANR	23578	ExpressionStatement	rsParsDestruct ( pPars )	312:3:8987:9008	23056	1	True				
ANR	23579	CallExpression	rsParsDestruct ( pPars )		23056	0					
ANR	23580	Callee	rsParsDestruct		23056	0					
ANR	23581	Identifier	rsParsDestruct		23056	0					
ANR	23582	ArgumentList	pPars		23056	1					
ANR	23583	Argument	pPars		23056	0					
ANR	23584	Identifier	pPars		23056	0					
ANR	23585	ExpressionStatement	FINALIZE	313:3:9013:9021	23056	2	True				
ANR	23586	Identifier	FINALIZE		23056	0					
ANR	23587	Label	finalize_it :	317:0:9031:9042	23056	16	True				
ANR	23588	Identifier	finalize_it		23056	0					
ANR	23589	IfStatement	if ( pPars != NULL )		23056	17					
ANR	23590	Condition	pPars != NULL	318:4:9048:9060	23056	0	True				
ANR	23591	EqualityExpression	pPars != NULL		23056	0		!=			
ANR	23592	Identifier	pPars		23056	0					
ANR	23593	Identifier	NULL		23056	1					
ANR	23594	ExpressionStatement	rsParsDestruct ( pPars )	319:2:9065:9086	23056	1	True				
ANR	23595	CallExpression	rsParsDestruct ( pPars )		23056	0					
ANR	23596	Callee	rsParsDestruct		23056	0					
ANR	23597	Identifier	rsParsDestruct		23056	0					
ANR	23598	ArgumentList	pPars		23056	1					
ANR	23599	Argument	pPars		23056	0					
ANR	23600	Identifier	pPars		23056	0					
ANR	23601	IfStatement	if ( pCSCompOp != NULL )		23056	18					
ANR	23602	Condition	pCSCompOp != NULL	320:4:9092:9108	23056	0	True				
ANR	23603	EqualityExpression	pCSCompOp != NULL		23056	0		!=			
ANR	23604	Identifier	pCSCompOp		23056	0					
ANR	23605	Identifier	NULL		23056	1					
ANR	23606	ExpressionStatement	rsCStrDestruct ( & pCSCompOp )	321:2:9113:9139	23056	1	True				
ANR	23607	CallExpression	rsCStrDestruct ( & pCSCompOp )		23056	0					
ANR	23608	Callee	rsCStrDestruct		23056	0					
ANR	23609	Identifier	rsCStrDestruct		23056	0					
ANR	23610	ArgumentList	& pCSCompOp		23056	1					
ANR	23611	Argument	& pCSCompOp		23056	0					
ANR	23612	UnaryOperationExpression	& pCSCompOp		23056	0					
ANR	23613	UnaryOperator	&		23056	0					
ANR	23614	Identifier	pCSCompOp		23056	1					
ANR	23615	IfStatement	if ( pCSPropName != NULL )		23056	19					
ANR	23616	Condition	pCSPropName != NULL	322:4:9145:9163	23056	0	True				
ANR	23617	EqualityExpression	pCSPropName != NULL		23056	0		!=			
ANR	23618	Identifier	pCSPropName		23056	0					
ANR	23619	Identifier	NULL		23056	1					
ANR	23620	ExpressionStatement	cstrDestruct ( & pCSPropName )	323:2:9168:9194	23056	1	True				
ANR	23621	CallExpression	cstrDestruct ( & pCSPropName )		23056	0					
ANR	23622	Callee	cstrDestruct		23056	0					
ANR	23623	Identifier	cstrDestruct		23056	0					
ANR	23624	ArgumentList	& pCSPropName		23056	1					
ANR	23625	Argument	& pCSPropName		23056	0					
ANR	23626	UnaryOperationExpression	& pCSPropName		23056	0					
ANR	23627	UnaryOperator	&		23056	0					
ANR	23628	Identifier	pCSPropName		23056	1					
ANR	23629	ExpressionStatement	RETiRet	324:1:9197:9204	23056	20	True				
ANR	23630	Identifier	RETiRet		23056	0					
ANR	23631	ReturnType	static rsRetVal		23056	1					
ANR	23632	Identifier	DecodePropFilter		23056	2					
ANR	23633	ParameterList	"uchar * pline , struct cnfstmt * stmt"		23056	3					
ANR	23634	Parameter	uchar * pline	235:17:6325:6336	23056	0	True				
ANR	23635	ParameterType	uchar *		23056	0					
ANR	23636	Identifier	pline		23056	1					
ANR	23637	Parameter	struct cnfstmt * stmt	235:31:6339:6358	23056	1	True				
ANR	23638	ParameterType	struct cnfstmt *		23056	0					
ANR	23639	Identifier	stmt		23056	1					
ANR	23640	CFGEntryNode	ENTRY		23056		True				
ANR	23641	CFGExitNode	EXIT		23056		True				
ANR	23642	Symbol	& stmt -> d . s_propfilt . prop		23056						
ANR	23643	Symbol	FIOP_REGEX		23056						
ANR	23644	Symbol	RS_RET_ERR		23056						
ANR	23645	Symbol	iRet		23056						
ANR	23646	Symbol	FIOP_ISEMPTY		23056						
ANR	23647	Symbol	msgPropDescrFill		23056						
ANR	23648	Symbol	& stmt -> d . s_propfilt . pCSCompValue		23056						
ANR	23649	Symbol	& pPars		23056						
ANR	23650	Symbol	FIOP_EREREGEX		23056						
ANR	23651	Symbol	parsQuotedCStr		23056						
ANR	23652	Symbol	stmt -> d . s_propfilt		23056						
ANR	23653	Symbol	pPars		23056						
ANR	23654	Symbol	iOffset		23056						
ANR	23655	Symbol	rsCStrGetSzStrNoNULL		23056						
ANR	23656	Symbol	pCSPropName		23056						
ANR	23657	Symbol	cstrLen		23056						
ANR	23658	Symbol	* stmt		23056						
ANR	23659	Symbol	stmt -> d		23056						
ANR	23660	Symbol	rsCStrOffsetSzStrCmp		23056						
ANR	23661	Symbol	FIOP_STARTSWITH		23056						
ANR	23662	Symbol	& pCSCompOp		23056						
ANR	23663	Symbol	FIOP_CONTAINS		23056						
ANR	23664	Symbol	parsDelimCStr		23056						
ANR	23665	Symbol	NULL		23056						
ANR	23666	Symbol	stmt -> d . s_propfilt . isNegated		23056						
ANR	23667	Symbol	& stmt -> d . s_propfilt		23056						
ANR	23668	Symbol	RS_RET_OK		23056						
ANR	23669	Symbol	& stmt -> d		23056						
ANR	23670	Symbol	rsCStrGetBufBeg		23056						
ANR	23671	Symbol	* rsCStrGetBufBeg		23056						
ANR	23672	Symbol	FIOP_ISEQUAL		23056						
ANR	23673	Symbol	& pCSPropName		23056						
ANR	23674	Symbol	cstrGetSzStrNoNULL		23056						
ANR	23675	Symbol	rsParsConstructFromSz		23056						
ANR	23676	Symbol	pline		23056						
ANR	23677	Symbol	pCSCompOp		23056						
ANR	23678	Symbol	stmt -> d . s_propfilt . operation		23056						
ANR	23679	Symbol	rsCStrLen		23056						
ANR	23680	Symbol	stmt		23056						
ANR	23681	Symbol	* rsCStrGetBufBeg ( pCSCompOp )		23056						
ANR	23682	DeclStmt									
ANR	23683	Decl							int	int	i
ANR	23684	Function	prifiltSetSeverity	340:0:9564:10297							
ANR	23685	FunctionDef	"prifiltSetSeverity (struct funcData_prifilt * prifilt , int sev , int mode)"		23684	0					
ANR	23686	CompoundStatement		342:0:9648:10297	23684	0					
ANR	23687	Statement	static	343:1:9651:9656	23684	0	True				
ANR	23688	IdentifierDeclStatement	"int lessthanmasks [ ] = { 0x00 , 0x01 , 0x03 , 0x07 , 0x0f , 0x1f , 0x3f , 0x7f , 0xff } ;"	343:8:9658:9736	23684	1	True				
ANR	23689	IdentifierDecl	"lessthanmasks [ ] = { 0x00 , 0x01 , 0x03 , 0x07 , 0x0f , 0x1f , 0x3f , 0x7f , 0xff }"		23684	0					
ANR	23690	IdentifierDeclType	int [ ]		23684	0					
ANR	23691	Identifier	lessthanmasks		23684	1					
ANR	23692	AssignmentExpression	"lessthanmasks [ ] = { 0x00 , 0x01 , 0x03 , 0x07 , 0x0f , 0x1f , 0x3f , 0x7f , 0xff }"		23684	2		=			
ANR	23693	Identifier	lessthanmasks		23684	0					
ANR	23694	InitializerList	0x00		23684	1					
ANR	23695	PrimaryExpression	0x00		23684	0					
ANR	23696	PrimaryExpression	0x01		23684	1					
ANR	23697	PrimaryExpression	0x03		23684	2					
ANR	23698	PrimaryExpression	0x07		23684	3					
ANR	23699	PrimaryExpression	0x0f		23684	4					
ANR	23700	PrimaryExpression	0x1f		23684	5					
ANR	23701	PrimaryExpression	0x3f		23684	6					
ANR	23702	PrimaryExpression	0x7f		23684	7					
ANR	23703	PrimaryExpression	0xff		23684	8					
ANR	23704	IdentifierDeclStatement	int i ;	344:1:9739:9744	23684	2	True				
ANR	23705	IdentifierDecl	i		23684	0					
ANR	23706	IdentifierDeclType	int		23684	0					
ANR	23707	Identifier	i		23684	1					
ANR	23708	ForStatement	for ( i = 0 ; i < LOG_NFACILITIES + 1 ; ++ i )		23684	3					
ANR	23709	ForInit	i = 0 ;	345:5:9751:9757	23684	0	True				
ANR	23710	AssignmentExpression	i = 0		23684	0		=			
ANR	23711	Identifier	i		23684	0					
ANR	23712	PrimaryExpression	0		23684	1					
ANR	23713	Condition	i < LOG_NFACILITIES + 1	345:13:9759:9779	23684	1	True				
ANR	23714	RelationalExpression	i < LOG_NFACILITIES + 1		23684	0		<			
ANR	23715	Identifier	i		23684	0					
ANR	23716	AdditiveExpression	LOG_NFACILITIES + 1		23684	1		+			
ANR	23717	Identifier	LOG_NFACILITIES		23684	0					
ANR	23718	PrimaryExpression	1		23684	1					
ANR	23719	UnaryExpression	++ i	345:37:9783:9785	23684	2	True				
ANR	23720	IncDec	++		23684	0					
ANR	23721	Identifier	i		23684	1					
ANR	23722	CompoundStatement		4:42:139:139	23684	3					
ANR	23723	IfStatement	if ( mode == CMP_EQ || mode == CMP_NE )		23684	0					
ANR	23724	Condition	mode == CMP_EQ || mode == CMP_NE	346:5:9795:9826	23684	0	True				
ANR	23725	OrExpression	mode == CMP_EQ || mode == CMP_NE		23684	0		||			
ANR	23726	EqualityExpression	mode == CMP_EQ		23684	0		==			
ANR	23727	Identifier	mode		23684	0					
ANR	23728	Identifier	CMP_EQ		23684	1					
ANR	23729	EqualityExpression	mode == CMP_NE		23684	1		==			
ANR	23730	Identifier	mode		23684	0					
ANR	23731	Identifier	CMP_NE		23684	1					
ANR	23732	ExpressionStatement	prifilt -> pmask [ i ] = 1 << sev	347:3:9832:9860	23684	1	True				
ANR	23733	AssignmentExpression	prifilt -> pmask [ i ] = 1 << sev		23684	0		=			
ANR	23734	ArrayIndexing	prifilt -> pmask [ i ]		23684	0					
ANR	23735	PtrMemberAccess	prifilt -> pmask		23684	0					
ANR	23736	Identifier	prifilt		23684	0					
ANR	23737	Identifier	pmask		23684	1					
ANR	23738	Identifier	i		23684	1					
ANR	23739	ShiftExpression	1 << sev		23684	1		<<			
ANR	23740	PrimaryExpression	1		23684	0					
ANR	23741	Identifier	sev		23684	1					
ANR	23742	ElseStatement	else		23684	0					
ANR	23743	IfStatement	if ( mode == CMP_LT )		23684	0					
ANR	23744	Condition	mode == CMP_LT	348:10:9872:9885	23684	0	True				
ANR	23745	EqualityExpression	mode == CMP_LT		23684	0		==			
ANR	23746	Identifier	mode		23684	0					
ANR	23747	Identifier	CMP_LT		23684	1					
ANR	23748	ExpressionStatement	prifilt -> pmask [ i ] = lessthanmasks [ sev ]	349:3:9891:9929	23684	1	True				
ANR	23749	AssignmentExpression	prifilt -> pmask [ i ] = lessthanmasks [ sev ]		23684	0		=			
ANR	23750	ArrayIndexing	prifilt -> pmask [ i ]		23684	0					
ANR	23751	PtrMemberAccess	prifilt -> pmask		23684	0					
ANR	23752	Identifier	prifilt		23684	0					
ANR	23753	Identifier	pmask		23684	1					
ANR	23754	Identifier	i		23684	1					
ANR	23755	ArrayIndexing	lessthanmasks [ sev ]		23684	1					
ANR	23756	Identifier	lessthanmasks		23684	0					
ANR	23757	Identifier	sev		23684	1					
ANR	23758	ElseStatement	else		23684	0					
ANR	23759	IfStatement	if ( mode == CMP_LE )		23684	0					
ANR	23760	Condition	mode == CMP_LE	350:10:9941:9954	23684	0	True				
ANR	23761	EqualityExpression	mode == CMP_LE		23684	0		==			
ANR	23762	Identifier	mode		23684	0					
ANR	23763	Identifier	CMP_LE		23684	1					
ANR	23764	ExpressionStatement	prifilt -> pmask [ i ] = lessthanmasks [ sev + 1 ]	351:3:9960:10000	23684	1	True				
ANR	23765	AssignmentExpression	prifilt -> pmask [ i ] = lessthanmasks [ sev + 1 ]		23684	0		=			
ANR	23766	ArrayIndexing	prifilt -> pmask [ i ]		23684	0					
ANR	23767	PtrMemberAccess	prifilt -> pmask		23684	0					
ANR	23768	Identifier	prifilt		23684	0					
ANR	23769	Identifier	pmask		23684	1					
ANR	23770	Identifier	i		23684	1					
ANR	23771	ArrayIndexing	lessthanmasks [ sev + 1 ]		23684	1					
ANR	23772	Identifier	lessthanmasks		23684	0					
ANR	23773	AdditiveExpression	sev + 1		23684	1		+			
ANR	23774	Identifier	sev		23684	0					
ANR	23775	PrimaryExpression	1		23684	1					
ANR	23776	ElseStatement	else		23684	0					
ANR	23777	IfStatement	if ( mode == CMP_GT )		23684	0					
ANR	23778	Condition	mode == CMP_GT	352:10:10012:10025	23684	0	True				
ANR	23779	EqualityExpression	mode == CMP_GT		23684	0		==			
ANR	23780	Identifier	mode		23684	0					
ANR	23781	Identifier	CMP_GT		23684	1					
ANR	23782	ExpressionStatement	prifilt -> pmask [ i ] = ~lessthanmasks [ sev + 1 ]	353:3:10031:10072	23684	1	True				
ANR	23783	AssignmentExpression	prifilt -> pmask [ i ] = ~lessthanmasks [ sev + 1 ]		23684	0		=			
ANR	23784	ArrayIndexing	prifilt -> pmask [ i ]		23684	0					
ANR	23785	PtrMemberAccess	prifilt -> pmask		23684	0					
ANR	23786	Identifier	prifilt		23684	0					
ANR	23787	Identifier	pmask		23684	1					
ANR	23788	Identifier	i		23684	1					
ANR	23789	ArrayIndexing	~lessthanmasks [ sev + 1 ]		23684	1					
ANR	23790	Identifier	~lessthanmasks		23684	0					
ANR	23791	AdditiveExpression	sev + 1		23684	1		+			
ANR	23792	Identifier	sev		23684	0					
ANR	23793	PrimaryExpression	1		23684	1					
ANR	23794	ElseStatement	else		23684	0					
ANR	23795	IfStatement	if ( mode == CMP_GE )		23684	0					
ANR	23796	Condition	mode == CMP_GE	354:10:10084:10097	23684	0	True				
ANR	23797	EqualityExpression	mode == CMP_GE		23684	0		==			
ANR	23798	Identifier	mode		23684	0					
ANR	23799	Identifier	CMP_GE		23684	1					
ANR	23800	ExpressionStatement	prifilt -> pmask [ i ] = ~lessthanmasks [ sev ]	355:3:10103:10142	23684	1	True				
ANR	23801	AssignmentExpression	prifilt -> pmask [ i ] = ~lessthanmasks [ sev ]		23684	0		=			
ANR	23802	ArrayIndexing	prifilt -> pmask [ i ]		23684	0					
ANR	23803	PtrMemberAccess	prifilt -> pmask		23684	0					
ANR	23804	Identifier	prifilt		23684	0					
ANR	23805	Identifier	pmask		23684	1					
ANR	23806	Identifier	i		23684	1					
ANR	23807	ArrayIndexing	~lessthanmasks [ sev ]		23684	1					
ANR	23808	Identifier	~lessthanmasks		23684	0					
ANR	23809	Identifier	sev		23684	1					
ANR	23810	ElseStatement	else		23684	0					
ANR	23811	ExpressionStatement	"DBGPRINTF ( ""prifiltSetSeverity: program error, invalid mode %s\\n"" , tokenToString ( mode ) )"	357:3:10154:10246	23684	0	True				
ANR	23812	CallExpression	"DBGPRINTF ( ""prifiltSetSeverity: program error, invalid mode %s\\n"" , tokenToString ( mode ) )"		23684	0					
ANR	23813	Callee	DBGPRINTF		23684	0					
ANR	23814	Identifier	DBGPRINTF		23684	0					
ANR	23815	ArgumentList	"""prifiltSetSeverity: program error, invalid mode %s\\n"""		23684	1					
ANR	23816	Argument	"""prifiltSetSeverity: program error, invalid mode %s\\n"""		23684	0					
ANR	23817	PrimaryExpression	"""prifiltSetSeverity: program error, invalid mode %s\\n"""		23684	0					
ANR	23818	Argument	tokenToString ( mode )		23684	1					
ANR	23819	CallExpression	tokenToString ( mode )		23684	0					
ANR	23820	Callee	tokenToString		23684	0					
ANR	23821	Identifier	tokenToString		23684	0					
ANR	23822	ArgumentList	mode		23684	1					
ANR	23823	Argument	mode		23684	0					
ANR	23824	Identifier	mode		23684	0					
ANR	23825	IfStatement	if ( mode == CMP_NE )		23684	4					
ANR	23826	Condition	mode == CMP_NE	360:4:10255:10268	23684	0	True				
ANR	23827	EqualityExpression	mode == CMP_NE		23684	0		==			
ANR	23828	Identifier	mode		23684	0					
ANR	23829	Identifier	CMP_NE		23684	1					
ANR	23830	ExpressionStatement	prifiltInvert ( prifilt )	361:2:10273:10295	23684	1	True				
ANR	23831	CallExpression	prifiltInvert ( prifilt )		23684	0					
ANR	23832	Callee	prifiltInvert		23684	0					
ANR	23833	Identifier	prifiltInvert		23684	0					
ANR	23834	ArgumentList	prifilt		23684	1					
ANR	23835	Argument	prifilt		23684	0					
ANR	23836	Identifier	prifilt		23684	0					
ANR	23837	ReturnType	static void		23684	1					
ANR	23838	Identifier	prifiltSetSeverity		23684	2					
ANR	23839	ParameterList	"struct funcData_prifilt * prifilt , int sev , int mode"		23684	3					
ANR	23840	Parameter	struct funcData_prifilt * prifilt	341:19:9595:9626	23684	0	True				
ANR	23841	ParameterType	struct funcData_prifilt *		23684	0					
ANR	23842	Identifier	prifilt		23684	1					
ANR	23843	Parameter	int sev	341:53:9629:9635	23684	1	True				
ANR	23844	ParameterType	int		23684	0					
ANR	23845	Identifier	sev		23684	1					
ANR	23846	Parameter	int mode	341:62:9638:9645	23684	2	True				
ANR	23847	ParameterType	int		23684	0					
ANR	23848	Identifier	mode		23684	1					
ANR	23849	CFGEntryNode	ENTRY		23684		True				
ANR	23850	CFGExitNode	EXIT		23684		True				
ANR	23851	Symbol	CMP_GE		23684						
ANR	23852	Symbol	sev		23684						
ANR	23853	Symbol	* prifilt		23684						
ANR	23854	Symbol	CMP_LE		23684						
ANR	23855	Symbol	CMP_NE		23684						
ANR	23856	Symbol	i		23684						
ANR	23857	Symbol	prifilt		23684						
ANR	23858	Symbol	* * prifilt		23684						
ANR	23859	Symbol	* prifilt -> pmask		23684						
ANR	23860	Symbol	tokenToString		23684						
ANR	23861	Symbol	* sev		23684						
ANR	23862	Symbol	mode		23684						
ANR	23863	Symbol	CMP_GT		23684						
ANR	23864	Symbol	CMP_EQ		23684						
ANR	23865	Symbol	* ~lessthanmasks		23684						
ANR	23866	Symbol	* i		23684						
ANR	23867	Symbol	~lessthanmasks		23684						
ANR	23868	Symbol	prifilt -> pmask		23684						
ANR	23869	Symbol	CMP_LT		23684						
ANR	23870	Symbol	LOG_NFACILITIES		23684						
ANR	23871	Symbol	* lessthanmasks		23684						
ANR	23872	Symbol	lessthanmasks		23684						
ANR	23873	DeclStmt									
ANR	23874	Decl							int	int	i
ANR	23875	DeclStmt									
ANR	23876	Decl							int	int	i
ANR	23877	DeclStmt									
ANR	23878	Decl							char	char [ 10240 ]	ln
ANR	23879	DeclStmt									
ANR	23880	Decl							char	char [ 512 ]	buf
ANR	23881	DeclStmt									
ANR	23882	Decl							int	int	lenBuf
ANR	23883	DeclStmt									
ANR	23884	Decl							int	int	bWriteLineno
ANR	23885	DeclStmt									
ANR	23886	Decl							int	int	len
ANR	23887	Decl							int	int	i
ANR	23888	DeclStmt									
ANR	23889	Decl							int	int	start
ANR	23890	DeclStmt									
ANR	23891	Decl							int	int	bContLine
ANR	23892	DeclStmt									
ANR	23893	Decl							int	int	lineno
ANR	23894	Function	qs_arrcmp	473:0:13049:13161							
ANR	23895	FunctionDef	"qs_arrcmp (const void * s1 , const void * s2)"		23894	0					
ANR	23896	CompoundStatement		475:0:13102:13161	23894	0					
ANR	23897	ReturnStatement	"return es_strcmp ( * ( ( es_str_t * * ) s1 ) , * ( ( es_str_t * * ) s2 ) ) ;"	476:1:13105:13159	23894	0	True				
ANR	23898	CallExpression	"es_strcmp ( * ( ( es_str_t * * ) s1 ) , * ( ( es_str_t * * ) s2 ) )"		23894	0					
ANR	23899	Callee	es_strcmp		23894	0					
ANR	23900	Identifier	es_strcmp		23894	0					
ANR	23901	ArgumentList	* ( ( es_str_t * * ) s1 )		23894	1					
ANR	23902	Argument	* ( ( es_str_t * * ) s1 )		23894	0					
ANR	23903	UnaryOperationExpression	* ( ( es_str_t * * ) s1 )		23894	0					
ANR	23904	UnaryOperator	*		23894	0					
ANR	23905	CastExpression	( es_str_t * * ) s1		23894	1					
ANR	23906	CastTarget	es_str_t * *		23894	0					
ANR	23907	Identifier	s1		23894	1					
ANR	23908	Argument	* ( ( es_str_t * * ) s2 )		23894	1					
ANR	23909	UnaryOperationExpression	* ( ( es_str_t * * ) s2 )		23894	0					
ANR	23910	UnaryOperator	*		23894	0					
ANR	23911	CastExpression	( es_str_t * * ) s2		23894	1					
ANR	23912	CastTarget	es_str_t * *		23894	0					
ANR	23913	Identifier	s2		23894	1					
ANR	23914	ReturnType	static int		23894	1					
ANR	23915	Identifier	qs_arrcmp		23894	2					
ANR	23916	ParameterList	"const void * s1 , const void * s2"		23894	3					
ANR	23917	Parameter	const void * s1	474:10:13070:13083	23894	0	True				
ANR	23918	ParameterType	const void *		23894	0					
ANR	23919	Identifier	s1		23894	1					
ANR	23920	Parameter	const void * s2	474:26:13086:13099	23894	1	True				
ANR	23921	ParameterType	const void *		23894	0					
ANR	23922	Identifier	s2		23894	1					
ANR	23923	CFGEntryNode	ENTRY		23894		True				
ANR	23924	CFGExitNode	EXIT		23894		True				
ANR	23925	Symbol	* ( ( es_str_t * * ) s1 )		23894						
ANR	23926	Symbol	* s2		23894						
ANR	23927	Symbol	* s1		23894						
ANR	23928	Symbol	es_strcmp		23894						
ANR	23929	Symbol	s1		23894						
ANR	23930	Symbol	* ( ( es_str_t * * ) s2 )		23894						
ANR	23931	Symbol	s2		23894						
ANR	23932	Function	objlstNew	480:0:13165:13354							
ANR	23933	FunctionDef	objlstNew (struct cnfobj * o)		23932	0					
ANR	23934	CompoundStatement		482:0:13208:13354	23932	0					
ANR	23935	IdentifierDeclStatement	struct objlst * lst ;	483:1:13211:13229	23932	0	True				
ANR	23936	IdentifierDecl	* lst		23932	0					
ANR	23937	IdentifierDeclType	struct objlst *		23932	0					
ANR	23938	Identifier	lst		23932	1					
ANR	23939	IfStatement	if ( ( lst = malloc ( sizeof ( struct objlst ) ) ) != NULL )		23932	1					
ANR	23940	Condition	( lst = malloc ( sizeof ( struct objlst ) ) ) != NULL	485:4:13236:13280	23932	0	True				
ANR	23941	EqualityExpression	( lst = malloc ( sizeof ( struct objlst ) ) ) != NULL		23932	0		!=			
ANR	23942	AssignmentExpression	lst = malloc ( sizeof ( struct objlst ) )		23932	0		=			
ANR	23943	Identifier	lst		23932	0					
ANR	23944	CallExpression	malloc ( sizeof ( struct objlst ) )		23932	1					
ANR	23945	Callee	malloc		23932	0					
ANR	23946	Identifier	malloc		23932	0					
ANR	23947	ArgumentList	sizeof ( struct objlst )		23932	1					
ANR	23948	Argument	sizeof ( struct objlst )		23932	0					
ANR	23949	SizeofExpression	sizeof ( struct objlst )		23932	0					
ANR	23950	Sizeof	sizeof		23932	0					
ANR	23951	SizeofOperand	struct objlst		23932	1					
ANR	23952	Identifier	NULL		23932	1					
ANR	23953	CompoundStatement		4:51:74:74	23932	1					
ANR	23954	ExpressionStatement	lst -> next = NULL	486:2:13287:13303	23932	0	True				
ANR	23955	AssignmentExpression	lst -> next = NULL		23932	0		=			
ANR	23956	PtrMemberAccess	lst -> next		23932	0					
ANR	23957	Identifier	lst		23932	0					
ANR	23958	Identifier	next		23932	1					
ANR	23959	Identifier	NULL		23932	1					
ANR	23960	ExpressionStatement	lst -> obj = o	487:2:13307:13319	23932	1	True				
ANR	23961	AssignmentExpression	lst -> obj = o		23932	0		=			
ANR	23962	PtrMemberAccess	lst -> obj		23932	0					
ANR	23963	Identifier	lst		23932	0					
ANR	23964	Identifier	obj		23932	1					
ANR	23965	Identifier	o		23932	1					
ANR	23966	ExpressionStatement	cnfobjPrint ( o )	489:0:13324:13338	23932	2	True				
ANR	23967	CallExpression	cnfobjPrint ( o )		23932	0					
ANR	23968	Callee	cnfobjPrint		23932	0					
ANR	23969	Identifier	cnfobjPrint		23932	0					
ANR	23970	ArgumentList	o		23932	1					
ANR	23971	Argument	o		23932	0					
ANR	23972	Identifier	o		23932	0					
ANR	23973	ReturnStatement	return lst ;	491:1:13342:13352	23932	3	True				
ANR	23974	Identifier	lst		23932	0					
ANR	23975	ReturnType	struct objlst *		23932	1					
ANR	23976	Identifier	objlstNew		23932	2					
ANR	23977	ParameterList	struct cnfobj * o		23932	3					
ANR	23978	Parameter	struct cnfobj * o	481:10:13190:13205	23932	0	True				
ANR	23979	ParameterType	struct cnfobj *		23932	0					
ANR	23980	Identifier	o		23932	1					
ANR	23981	CFGEntryNode	ENTRY		23932		True				
ANR	23982	CFGExitNode	EXIT		23932		True				
ANR	23983	Symbol	malloc		23932						
ANR	23984	Symbol	NULL		23932						
ANR	23985	Symbol	lst -> next		23932						
ANR	23986	Symbol	lst -> obj		23932						
ANR	23987	Symbol	* lst		23932						
ANR	23988	Symbol	lst		23932						
ANR	23989	Symbol	o		23932						
ANR	23990	Function	objlstAdd	495:0:13435:13759							
ANR	23991	FunctionDef	"objlstAdd (struct objlst * root , struct cnfobj * o)"		23990	0					
ANR	23992	CompoundStatement		497:0:13499:13759	23990	0					
ANR	23993	IdentifierDeclStatement	struct objlst * l ;	498:1:13502:13518	23990	0	True				
ANR	23994	IdentifierDecl	* l		23990	0					
ANR	23995	IdentifierDeclType	struct objlst *		23990	0					
ANR	23996	Identifier	l		23990	1					
ANR	23997	IdentifierDeclStatement	struct objlst * newl ;	499:1:13521:13540	23990	1	True				
ANR	23998	IdentifierDecl	* newl		23990	0					
ANR	23999	IdentifierDeclType	struct objlst *		23990	0					
ANR	24000	Identifier	newl		23990	1					
ANR	24001	ExpressionStatement	newl = objlstNew ( o )	501:1:13545:13564	23990	2	True				
ANR	24002	AssignmentExpression	newl = objlstNew ( o )		23990	0		=			
ANR	24003	Identifier	newl		23990	0					
ANR	24004	CallExpression	objlstNew ( o )		23990	1					
ANR	24005	Callee	objlstNew		23990	0					
ANR	24006	Identifier	objlstNew		23990	0					
ANR	24007	ArgumentList	o		23990	1					
ANR	24008	Argument	o		23990	0					
ANR	24009	Identifier	o		23990	0					
ANR	24010	IfStatement	if ( root == 0 )		23990	3					
ANR	24011	Condition	root == 0	502:4:13570:13578	23990	0	True				
ANR	24012	EqualityExpression	root == 0		23990	0		==			
ANR	24013	Identifier	root		23990	0					
ANR	24014	PrimaryExpression	0		23990	1					
ANR	24015	CompoundStatement		6:15:81:81	23990	1					
ANR	24016	ExpressionStatement	root = newl	503:2:13585:13596	23990	0	True				
ANR	24017	AssignmentExpression	root = newl		23990	0		=			
ANR	24018	Identifier	root		23990	0					
ANR	24019	Identifier	newl		23990	1					
ANR	24020	ElseStatement	else		23990	0					
ANR	24021	CompoundStatement		8:8:106:106	23990	0					
ANR	24022	ForStatement	for ( l = root ; l -> next != NULL ; l = l -> next )		23990	0					
ANR	24023	ForInit	l = root ;	505:6:13677:13686	23990	0	True				
ANR	24024	AssignmentExpression	l = root		23990	0		=			
ANR	24025	Identifier	l		23990	0					
ANR	24026	Identifier	root		23990	1					
ANR	24027	Condition	l -> next != NULL	505:17:13688:13702	23990	1	True				
ANR	24028	EqualityExpression	l -> next != NULL		23990	0		!=			
ANR	24029	PtrMemberAccess	l -> next		23990	0					
ANR	24030	Identifier	l		23990	0					
ANR	24031	Identifier	next		23990	1					
ANR	24032	Identifier	NULL		23990	1					
ANR	24033	AssignmentExpression	l = l -> next	505:35:13706:13716	23990	2	True	=			
ANR	24034	Identifier	l		23990	0					
ANR	24035	PtrMemberAccess	l -> next		23990	1					
ANR	24036	Identifier	l		23990	0					
ANR	24037	Identifier	next		23990	1					
ANR	24038	ExpressionStatement		506:3:13722:13722	23990	3	True				
ANR	24039	ExpressionStatement	l -> next = newl	507:2:13726:13740	23990	1	True				
ANR	24040	AssignmentExpression	l -> next = newl		23990	0		=			
ANR	24041	PtrMemberAccess	l -> next		23990	0					
ANR	24042	Identifier	l		23990	0					
ANR	24043	Identifier	next		23990	1					
ANR	24044	Identifier	newl		23990	1					
ANR	24045	ReturnStatement	return root ;	509:1:13746:13757	23990	4	True				
ANR	24046	Identifier	root		23990	0					
ANR	24047	ReturnType	struct objlst *		23990	1					
ANR	24048	Identifier	objlstAdd		23990	2					
ANR	24049	ParameterList	"struct objlst * root , struct cnfobj * o"		23990	3					
ANR	24050	Parameter	struct objlst * root	496:10:13460:13478	23990	0	True				
ANR	24051	ParameterType	struct objlst *		23990	0					
ANR	24052	Identifier	root		23990	1					
ANR	24053	Parameter	struct cnfobj * o	496:31:13481:13496	23990	1	True				
ANR	24054	ParameterType	struct cnfobj *		23990	0					
ANR	24055	Identifier	o		23990	1					
ANR	24056	CFGEntryNode	ENTRY		23990		True				
ANR	24057	CFGExitNode	EXIT		23990		True				
ANR	24058	Symbol	l -> next		23990						
ANR	24059	Symbol	objlstNew		23990						
ANR	24060	Symbol	NULL		23990						
ANR	24061	Symbol	* l		23990						
ANR	24062	Symbol	root		23990						
ANR	24063	Symbol	l		23990						
ANR	24064	Symbol	o		23990						
ANR	24065	Symbol	newl		23990						
ANR	24066	Function	scriptAddStmt	513:0:13828:14113							
ANR	24067	FunctionDef	"scriptAddStmt (struct cnfstmt * root , struct cnfstmt * s)"		24066	0					
ANR	24068	CompoundStatement		515:0:13899:14113	24066	0					
ANR	24069	IdentifierDeclStatement	struct cnfstmt * l ;	516:1:13902:13919	24066	0	True				
ANR	24070	IdentifierDecl	* l		24066	0					
ANR	24071	IdentifierDeclType	struct cnfstmt *		24066	0					
ANR	24072	Identifier	l		24066	1					
ANR	24073	IfStatement	if ( root == NULL )		24066	1					
ANR	24074	Condition	root == NULL	518:4:13927:13938	24066	0	True				
ANR	24075	EqualityExpression	root == NULL		24066	0		==			
ANR	24076	Identifier	root		24066	0					
ANR	24077	Identifier	NULL		24066	1					
ANR	24078	CompoundStatement		4:18:41:41	24066	1					
ANR	24079	ExpressionStatement	root = s	519:2:13945:13953	24066	0	True				
ANR	24080	AssignmentExpression	root = s		24066	0		=			
ANR	24081	Identifier	root		24066	0					
ANR	24082	Identifier	s		24066	1					
ANR	24083	ElseStatement	else		24066	0					
ANR	24084	CompoundStatement		6:8:63:63	24066	0					
ANR	24085	ForStatement	for ( l = root ; l -> next != NULL ; l = l -> next )		24066	0					
ANR	24086	ForInit	l = root ;	521:6:14034:14043	24066	0	True				
ANR	24087	AssignmentExpression	l = root		24066	0		=			
ANR	24088	Identifier	l		24066	0					
ANR	24089	Identifier	root		24066	1					
ANR	24090	Condition	l -> next != NULL	521:17:14045:14059	24066	1	True				
ANR	24091	EqualityExpression	l -> next != NULL		24066	0		!=			
ANR	24092	PtrMemberAccess	l -> next		24066	0					
ANR	24093	Identifier	l		24066	0					
ANR	24094	Identifier	next		24066	1					
ANR	24095	Identifier	NULL		24066	1					
ANR	24096	AssignmentExpression	l = l -> next	521:35:14063:14073	24066	2	True	=			
ANR	24097	Identifier	l		24066	0					
ANR	24098	PtrMemberAccess	l -> next		24066	1					
ANR	24099	Identifier	l		24066	0					
ANR	24100	Identifier	next		24066	1					
ANR	24101	ExpressionStatement		522:3:14079:14079	24066	3	True				
ANR	24102	ExpressionStatement	l -> next = s	523:2:14083:14094	24066	1	True				
ANR	24103	AssignmentExpression	l -> next = s		24066	0		=			
ANR	24104	PtrMemberAccess	l -> next		24066	0					
ANR	24105	Identifier	l		24066	0					
ANR	24106	Identifier	next		24066	1					
ANR	24107	Identifier	s		24066	1					
ANR	24108	ReturnStatement	return root ;	525:1:14100:14111	24066	2	True				
ANR	24109	Identifier	root		24066	0					
ANR	24110	ReturnType	struct cnfstmt *		24066	1					
ANR	24111	Identifier	scriptAddStmt		24066	2					
ANR	24112	ParameterList	"struct cnfstmt * root , struct cnfstmt * s"		24066	3					
ANR	24113	Parameter	struct cnfstmt * root	514:14:13858:13877	24066	0	True				
ANR	24114	ParameterType	struct cnfstmt *		24066	0					
ANR	24115	Identifier	root		24066	1					
ANR	24116	Parameter	struct cnfstmt * s	514:36:13880:13896	24066	1	True				
ANR	24117	ParameterType	struct cnfstmt *		24066	0					
ANR	24118	Identifier	s		24066	1					
ANR	24119	CFGEntryNode	ENTRY		24066		True				
ANR	24120	CFGExitNode	EXIT		24066		True				
ANR	24121	Symbol	l -> next		24066						
ANR	24122	Symbol	s		24066						
ANR	24123	Symbol	NULL		24066						
ANR	24124	Symbol	* l		24066						
ANR	24125	Symbol	root		24066						
ANR	24126	Symbol	l		24066						
ANR	24127	Function	objlstDestruct	528:0:14116:14286							
ANR	24128	FunctionDef	objlstDestruct (struct objlst * lst)		24127	0					
ANR	24129	CompoundStatement		530:0:14156:14286	24127	0					
ANR	24130	IdentifierDeclStatement	struct objlst * toDel ;	531:1:14159:14179	24127	0	True				
ANR	24131	IdentifierDecl	* toDel		24127	0					
ANR	24132	IdentifierDeclType	struct objlst *		24127	0					
ANR	24133	Identifier	toDel		24127	1					
ANR	24134	WhileStatement	while ( lst != NULL )		24127	1					
ANR	24135	Condition	lst != NULL	533:7:14189:14199	24127	0	True				
ANR	24136	EqualityExpression	lst != NULL		24127	0		!=			
ANR	24137	Identifier	lst		24127	0					
ANR	24138	Identifier	NULL		24127	1					
ANR	24139	CompoundStatement		4:20:45:45	24127	1					
ANR	24140	ExpressionStatement	toDel = lst	534:2:14206:14217	24127	0	True				
ANR	24141	AssignmentExpression	toDel = lst		24127	0		=			
ANR	24142	Identifier	toDel		24127	0					
ANR	24143	Identifier	lst		24127	1					
ANR	24144	ExpressionStatement	lst = lst -> next	535:2:14221:14236	24127	1	True				
ANR	24145	AssignmentExpression	lst = lst -> next		24127	0		=			
ANR	24146	Identifier	lst		24127	0					
ANR	24147	PtrMemberAccess	lst -> next		24127	1					
ANR	24148	Identifier	lst		24127	0					
ANR	24149	Identifier	next		24127	1					
ANR	24150	ExpressionStatement	cnfobjDestruct ( toDel -> obj )	536:2:14240:14266	24127	2	True				
ANR	24151	CallExpression	cnfobjDestruct ( toDel -> obj )		24127	0					
ANR	24152	Callee	cnfobjDestruct		24127	0					
ANR	24153	Identifier	cnfobjDestruct		24127	0					
ANR	24154	ArgumentList	toDel -> obj		24127	1					
ANR	24155	Argument	toDel -> obj		24127	0					
ANR	24156	PtrMemberAccess	toDel -> obj		24127	0					
ANR	24157	Identifier	toDel		24127	0					
ANR	24158	Identifier	obj		24127	1					
ANR	24159	ExpressionStatement	free ( toDel )	537:2:14270:14281	24127	3	True				
ANR	24160	CallExpression	free ( toDel )		24127	0					
ANR	24161	Callee	free		24127	0					
ANR	24162	Identifier	free		24127	0					
ANR	24163	ArgumentList	toDel		24127	1					
ANR	24164	Argument	toDel		24127	0					
ANR	24165	Identifier	toDel		24127	0					
ANR	24166	ReturnType	void		24127	1					
ANR	24167	Identifier	objlstDestruct		24127	2					
ANR	24168	ParameterList	struct objlst * lst		24127	3					
ANR	24169	Parameter	struct objlst * lst	529:15:14136:14153	24127	0	True				
ANR	24170	ParameterType	struct objlst *		24127	0					
ANR	24171	Identifier	lst		24127	1					
ANR	24172	CFGEntryNode	ENTRY		24127		True				
ANR	24173	CFGExitNode	EXIT		24127		True				
ANR	24174	Symbol	NULL		24127						
ANR	24175	Symbol	lst -> next		24127						
ANR	24176	Symbol	toDel		24127						
ANR	24177	Symbol	* lst		24127						
ANR	24178	Symbol	lst		24127						
ANR	24179	Symbol	toDel -> obj		24127						
ANR	24180	Symbol	* toDel		24127						
ANR	24181	Function	objlstPrint	541:0:14289:14430							
ANR	24182	FunctionDef	objlstPrint (struct objlst * lst)		24181	0					
ANR	24183	CompoundStatement		543:0:14326:14430	24181	0					
ANR	24184	ExpressionStatement	"dbgprintf ( ""objlst %p:\\n"" , lst )"	544:1:14329:14359	24181	0	True				
ANR	24185	CallExpression	"dbgprintf ( ""objlst %p:\\n"" , lst )"		24181	0					
ANR	24186	Callee	dbgprintf		24181	0					
ANR	24187	Identifier	dbgprintf		24181	0					
ANR	24188	ArgumentList	"""objlst %p:\\n"""		24181	1					
ANR	24189	Argument	"""objlst %p:\\n"""		24181	0					
ANR	24190	PrimaryExpression	"""objlst %p:\\n"""		24181	0					
ANR	24191	Argument	lst		24181	1					
ANR	24192	Identifier	lst		24181	0					
ANR	24193	WhileStatement	while ( lst != NULL )		24181	1					
ANR	24194	Condition	lst != NULL	545:7:14368:14378	24181	0	True				
ANR	24195	EqualityExpression	lst != NULL		24181	0		!=			
ANR	24196	Identifier	lst		24181	0					
ANR	24197	Identifier	NULL		24181	1					
ANR	24198	CompoundStatement		3:20:54:54	24181	1					
ANR	24199	ExpressionStatement	cnfobjPrint ( lst -> obj )	546:2:14385:14406	24181	0	True				
ANR	24200	CallExpression	cnfobjPrint ( lst -> obj )		24181	0					
ANR	24201	Callee	cnfobjPrint		24181	0					
ANR	24202	Identifier	cnfobjPrint		24181	0					
ANR	24203	ArgumentList	lst -> obj		24181	1					
ANR	24204	Argument	lst -> obj		24181	0					
ANR	24205	PtrMemberAccess	lst -> obj		24181	0					
ANR	24206	Identifier	lst		24181	0					
ANR	24207	Identifier	obj		24181	1					
ANR	24208	ExpressionStatement	lst = lst -> next	547:2:14410:14425	24181	1	True				
ANR	24209	AssignmentExpression	lst = lst -> next		24181	0		=			
ANR	24210	Identifier	lst		24181	0					
ANR	24211	PtrMemberAccess	lst -> next		24181	1					
ANR	24212	Identifier	lst		24181	0					
ANR	24213	Identifier	next		24181	1					
ANR	24214	ReturnType	void		24181	1					
ANR	24215	Identifier	objlstPrint		24181	2					
ANR	24216	ParameterList	struct objlst * lst		24181	3					
ANR	24217	Parameter	struct objlst * lst	542:12:14306:14323	24181	0	True				
ANR	24218	ParameterType	struct objlst *		24181	0					
ANR	24219	Identifier	lst		24181	1					
ANR	24220	CFGEntryNode	ENTRY		24181		True				
ANR	24221	CFGExitNode	EXIT		24181		True				
ANR	24222	Symbol	NULL		24181						
ANR	24223	Symbol	lst -> next		24181						
ANR	24224	Symbol	lst -> obj		24181						
ANR	24225	Symbol	* lst		24181						
ANR	24226	Symbol	lst		24181						
ANR	24227	Function	nvlstNewStr	551:0:14433:14660							
ANR	24228	FunctionDef	nvlstNewStr (es_str_t * value)		24227	0					
ANR	24229	CompoundStatement		553:0:14476:14660	24227	0					
ANR	24230	IdentifierDeclStatement	struct nvlst * lst ;	554:1:14479:14496	24227	0	True				
ANR	24231	IdentifierDecl	* lst		24227	0					
ANR	24232	IdentifierDeclType	struct nvlst *		24227	0					
ANR	24233	Identifier	lst		24227	1					
ANR	24234	IfStatement	if ( ( lst = malloc ( sizeof ( struct nvlst ) ) ) != NULL )		24227	1					
ANR	24235	Condition	( lst = malloc ( sizeof ( struct nvlst ) ) ) != NULL	556:4:14503:14546	24227	0	True				
ANR	24236	EqualityExpression	( lst = malloc ( sizeof ( struct nvlst ) ) ) != NULL		24227	0		!=			
ANR	24237	AssignmentExpression	lst = malloc ( sizeof ( struct nvlst ) )		24227	0		=			
ANR	24238	Identifier	lst		24227	0					
ANR	24239	CallExpression	malloc ( sizeof ( struct nvlst ) )		24227	1					
ANR	24240	Callee	malloc		24227	0					
ANR	24241	Identifier	malloc		24227	0					
ANR	24242	ArgumentList	sizeof ( struct nvlst )		24227	1					
ANR	24243	Argument	sizeof ( struct nvlst )		24227	0					
ANR	24244	SizeofExpression	sizeof ( struct nvlst )		24227	0					
ANR	24245	Sizeof	sizeof		24227	0					
ANR	24246	SizeofOperand	struct nvlst		24227	1					
ANR	24247	Identifier	NULL		24227	1					
ANR	24248	CompoundStatement		4:50:72:72	24227	1					
ANR	24249	ExpressionStatement	lst -> next = NULL	557:2:14553:14569	24227	0	True				
ANR	24250	AssignmentExpression	lst -> next = NULL		24227	0		=			
ANR	24251	PtrMemberAccess	lst -> next		24227	0					
ANR	24252	Identifier	lst		24227	0					
ANR	24253	Identifier	next		24227	1					
ANR	24254	Identifier	NULL		24227	1					
ANR	24255	ExpressionStatement	lst -> val . datatype = 'S'	558:2:14573:14596	24227	1	True				
ANR	24256	AssignmentExpression	lst -> val . datatype = 'S'		24227	0		=			
ANR	24257	MemberAccess	lst -> val . datatype		24227	0					
ANR	24258	PtrMemberAccess	lst -> val		24227	0					
ANR	24259	Identifier	lst		24227	0					
ANR	24260	Identifier	val		24227	1					
ANR	24261	Identifier	datatype		24227	1					
ANR	24262	PrimaryExpression	'S'		24227	1					
ANR	24263	ExpressionStatement	lst -> val . d . estr = value	559:2:14600:14623	24227	2	True				
ANR	24264	AssignmentExpression	lst -> val . d . estr = value		24227	0		=			
ANR	24265	MemberAccess	lst -> val . d . estr		24227	0					
ANR	24266	MemberAccess	lst -> val . d		24227	0					
ANR	24267	PtrMemberAccess	lst -> val		24227	0					
ANR	24268	Identifier	lst		24227	0					
ANR	24269	Identifier	val		24227	1					
ANR	24270	Identifier	d		24227	1					
ANR	24271	Identifier	estr		24227	1					
ANR	24272	Identifier	value		24227	1					
ANR	24273	ExpressionStatement	lst -> bUsed = 0	560:2:14627:14641	24227	3	True				
ANR	24274	AssignmentExpression	lst -> bUsed = 0		24227	0		=			
ANR	24275	PtrMemberAccess	lst -> bUsed		24227	0					
ANR	24276	Identifier	lst		24227	0					
ANR	24277	Identifier	bUsed		24227	1					
ANR	24278	PrimaryExpression	0		24227	1					
ANR	24279	ReturnStatement	return lst ;	563:1:14648:14658	24227	2	True				
ANR	24280	Identifier	lst		24227	0					
ANR	24281	ReturnType	struct nvlst *		24227	1					
ANR	24282	Identifier	nvlstNewStr		24227	2					
ANR	24283	ParameterList	es_str_t * value		24227	3					
ANR	24284	Parameter	es_str_t * value	552:12:14459:14473	24227	0	True				
ANR	24285	ParameterType	es_str_t *		24227	0					
ANR	24286	Identifier	value		24227	1					
ANR	24287	CFGEntryNode	ENTRY		24227		True				
ANR	24288	CFGExitNode	EXIT		24227		True				
ANR	24289	Symbol	malloc		24227						
ANR	24290	Symbol	lst -> bUsed		24227						
ANR	24291	Symbol	NULL		24227						
ANR	24292	Symbol	lst -> next		24227						
ANR	24293	Symbol	lst -> val . datatype		24227						
ANR	24294	Symbol	* lst		24227						
ANR	24295	Symbol	lst -> val		24227						
ANR	24296	Symbol	lst -> val . d . estr		24227						
ANR	24297	Symbol	lst		24227						
ANR	24298	Symbol	value		24227						
ANR	24299	Symbol	lst -> val . d		24227						
ANR	24300	Function	nvlstNewArray	566:0:14663:14891							
ANR	24301	FunctionDef	nvlstNewArray (struct cnfarray * ar)		24300	0					
ANR	24302	CompoundStatement		568:0:14712:14891	24300	0					
ANR	24303	IdentifierDeclStatement	struct nvlst * lst ;	569:1:14715:14732	24300	0	True				
ANR	24304	IdentifierDecl	* lst		24300	0					
ANR	24305	IdentifierDeclType	struct nvlst *		24300	0					
ANR	24306	Identifier	lst		24300	1					
ANR	24307	IfStatement	if ( ( lst = malloc ( sizeof ( struct nvlst ) ) ) != NULL )		24300	1					
ANR	24308	Condition	( lst = malloc ( sizeof ( struct nvlst ) ) ) != NULL	571:4:14739:14782	24300	0	True				
ANR	24309	EqualityExpression	( lst = malloc ( sizeof ( struct nvlst ) ) ) != NULL		24300	0		!=			
ANR	24310	AssignmentExpression	lst = malloc ( sizeof ( struct nvlst ) )		24300	0		=			
ANR	24311	Identifier	lst		24300	0					
ANR	24312	CallExpression	malloc ( sizeof ( struct nvlst ) )		24300	1					
ANR	24313	Callee	malloc		24300	0					
ANR	24314	Identifier	malloc		24300	0					
ANR	24315	ArgumentList	sizeof ( struct nvlst )		24300	1					
ANR	24316	Argument	sizeof ( struct nvlst )		24300	0					
ANR	24317	SizeofExpression	sizeof ( struct nvlst )		24300	0					
ANR	24318	Sizeof	sizeof		24300	0					
ANR	24319	SizeofOperand	struct nvlst		24300	1					
ANR	24320	Identifier	NULL		24300	1					
ANR	24321	CompoundStatement		4:50:72:72	24300	1					
ANR	24322	ExpressionStatement	lst -> next = NULL	572:2:14789:14805	24300	0	True				
ANR	24323	AssignmentExpression	lst -> next = NULL		24300	0		=			
ANR	24324	PtrMemberAccess	lst -> next		24300	0					
ANR	24325	Identifier	lst		24300	0					
ANR	24326	Identifier	next		24300	1					
ANR	24327	Identifier	NULL		24300	1					
ANR	24328	ExpressionStatement	lst -> val . datatype = 'A'	573:2:14809:14832	24300	1	True				
ANR	24329	AssignmentExpression	lst -> val . datatype = 'A'		24300	0		=			
ANR	24330	MemberAccess	lst -> val . datatype		24300	0					
ANR	24331	PtrMemberAccess	lst -> val		24300	0					
ANR	24332	Identifier	lst		24300	0					
ANR	24333	Identifier	val		24300	1					
ANR	24334	Identifier	datatype		24300	1					
ANR	24335	PrimaryExpression	'A'		24300	1					
ANR	24336	ExpressionStatement	lst -> val . d . ar = ar	574:2:14836:14854	24300	2	True				
ANR	24337	AssignmentExpression	lst -> val . d . ar = ar		24300	0		=			
ANR	24338	MemberAccess	lst -> val . d . ar		24300	0					
ANR	24339	MemberAccess	lst -> val . d		24300	0					
ANR	24340	PtrMemberAccess	lst -> val		24300	0					
ANR	24341	Identifier	lst		24300	0					
ANR	24342	Identifier	val		24300	1					
ANR	24343	Identifier	d		24300	1					
ANR	24344	Identifier	ar		24300	1					
ANR	24345	Identifier	ar		24300	1					
ANR	24346	ExpressionStatement	lst -> bUsed = 0	575:2:14858:14872	24300	3	True				
ANR	24347	AssignmentExpression	lst -> bUsed = 0		24300	0		=			
ANR	24348	PtrMemberAccess	lst -> bUsed		24300	0					
ANR	24349	Identifier	lst		24300	0					
ANR	24350	Identifier	bUsed		24300	1					
ANR	24351	PrimaryExpression	0		24300	1					
ANR	24352	ReturnStatement	return lst ;	578:1:14879:14889	24300	2	True				
ANR	24353	Identifier	lst		24300	0					
ANR	24354	ReturnType	struct nvlst *		24300	1					
ANR	24355	Identifier	nvlstNewArray		24300	2					
ANR	24356	ParameterList	struct cnfarray * ar		24300	3					
ANR	24357	Parameter	struct cnfarray * ar	567:14:14691:14709	24300	0	True				
ANR	24358	ParameterType	struct cnfarray *		24300	0					
ANR	24359	Identifier	ar		24300	1					
ANR	24360	CFGEntryNode	ENTRY		24300		True				
ANR	24361	CFGExitNode	EXIT		24300		True				
ANR	24362	Symbol	ar		24300						
ANR	24363	Symbol	malloc		24300						
ANR	24364	Symbol	lst -> bUsed		24300						
ANR	24365	Symbol	NULL		24300						
ANR	24366	Symbol	lst -> next		24300						
ANR	24367	Symbol	lst -> val . datatype		24300						
ANR	24368	Symbol	* lst		24300						
ANR	24369	Symbol	lst -> val		24300						
ANR	24370	Symbol	lst -> val . d . ar		24300						
ANR	24371	Symbol	lst		24300						
ANR	24372	Symbol	lst -> val . d		24300						
ANR	24373	Function	nvlstSetName	581:0:14894:14990							
ANR	24374	FunctionDef	"nvlstSetName (struct nvlst * lst , es_str_t * name)"		24373	0					
ANR	24375	CompoundStatement		583:0:14956:14990	24373	0					
ANR	24376	ExpressionStatement	lst -> name = name	584:1:14959:14975	24373	0	True				
ANR	24377	AssignmentExpression	lst -> name = name		24373	0		=			
ANR	24378	PtrMemberAccess	lst -> name		24373	0					
ANR	24379	Identifier	lst		24373	0					
ANR	24380	Identifier	name		24373	1					
ANR	24381	Identifier	name		24373	1					
ANR	24382	ReturnStatement	return lst ;	585:1:14978:14988	24373	1	True				
ANR	24383	Identifier	lst		24373	0					
ANR	24384	ReturnType	struct nvlst *		24373	1					
ANR	24385	Identifier	nvlstSetName		24373	2					
ANR	24386	ParameterList	"struct nvlst * lst , es_str_t * name"		24373	3					
ANR	24387	Parameter	struct nvlst * lst	582:13:14921:14937	24373	0	True				
ANR	24388	ParameterType	struct nvlst *		24373	0					
ANR	24389	Identifier	lst		24373	1					
ANR	24390	Parameter	es_str_t * name	582:32:14940:14953	24373	1	True				
ANR	24391	ParameterType	es_str_t *		24373	0					
ANR	24392	Identifier	name		24373	1					
ANR	24393	CFGEntryNode	ENTRY		24373		True				
ANR	24394	CFGExitNode	EXIT		24373		True				
ANR	24395	Symbol	* lst		24373						
ANR	24396	Symbol	name		24373						
ANR	24397	Symbol	lst -> name		24373						
ANR	24398	Symbol	lst		24373						
ANR	24399	Function	nvlstDestruct	588:0:14993:15185							
ANR	24400	FunctionDef	nvlstDestruct (struct nvlst * lst)		24399	0					
ANR	24401	CompoundStatement		590:0:15031:15185	24399	0					
ANR	24402	IdentifierDeclStatement	struct nvlst * toDel ;	591:1:15034:15053	24399	0	True				
ANR	24403	IdentifierDecl	* toDel		24399	0					
ANR	24404	IdentifierDeclType	struct nvlst *		24399	0					
ANR	24405	Identifier	toDel		24399	1					
ANR	24406	WhileStatement	while ( lst != NULL )		24399	1					
ANR	24407	Condition	lst != NULL	593:7:15063:15073	24399	0	True				
ANR	24408	EqualityExpression	lst != NULL		24399	0		!=			
ANR	24409	Identifier	lst		24399	0					
ANR	24410	Identifier	NULL		24399	1					
ANR	24411	CompoundStatement		4:20:44:44	24399	1					
ANR	24412	ExpressionStatement	toDel = lst	594:2:15080:15091	24399	0	True				
ANR	24413	AssignmentExpression	toDel = lst		24399	0		=			
ANR	24414	Identifier	toDel		24399	0					
ANR	24415	Identifier	lst		24399	1					
ANR	24416	ExpressionStatement	lst = lst -> next	595:2:15095:15110	24399	1	True				
ANR	24417	AssignmentExpression	lst = lst -> next		24399	0		=			
ANR	24418	Identifier	lst		24399	0					
ANR	24419	PtrMemberAccess	lst -> next		24399	1					
ANR	24420	Identifier	lst		24399	0					
ANR	24421	Identifier	next		24399	1					
ANR	24422	ExpressionStatement	es_deleteStr ( toDel -> name )	596:2:15114:15139	24399	2	True				
ANR	24423	CallExpression	es_deleteStr ( toDel -> name )		24399	0					
ANR	24424	Callee	es_deleteStr		24399	0					
ANR	24425	Identifier	es_deleteStr		24399	0					
ANR	24426	ArgumentList	toDel -> name		24399	1					
ANR	24427	Argument	toDel -> name		24399	0					
ANR	24428	PtrMemberAccess	toDel -> name		24399	0					
ANR	24429	Identifier	toDel		24399	0					
ANR	24430	Identifier	name		24399	1					
ANR	24431	ExpressionStatement	varDelete ( & toDel -> val )	597:2:15143:15165	24399	3	True				
ANR	24432	CallExpression	varDelete ( & toDel -> val )		24399	0					
ANR	24433	Callee	varDelete		24399	0					
ANR	24434	Identifier	varDelete		24399	0					
ANR	24435	ArgumentList	& toDel -> val		24399	1					
ANR	24436	Argument	& toDel -> val		24399	0					
ANR	24437	UnaryOperationExpression	& toDel -> val		24399	0					
ANR	24438	UnaryOperator	&		24399	0					
ANR	24439	PtrMemberAccess	toDel -> val		24399	1					
ANR	24440	Identifier	toDel		24399	0					
ANR	24441	Identifier	val		24399	1					
ANR	24442	ExpressionStatement	free ( toDel )	598:2:15169:15180	24399	4	True				
ANR	24443	CallExpression	free ( toDel )		24399	0					
ANR	24444	Callee	free		24399	0					
ANR	24445	Identifier	free		24399	0					
ANR	24446	ArgumentList	toDel		24399	1					
ANR	24447	Argument	toDel		24399	0					
ANR	24448	Identifier	toDel		24399	0					
ANR	24449	ReturnType	void		24399	1					
ANR	24450	Identifier	nvlstDestruct		24399	2					
ANR	24451	ParameterList	struct nvlst * lst		24399	3					
ANR	24452	Parameter	struct nvlst * lst	589:14:15012:15028	24399	0	True				
ANR	24453	ParameterType	struct nvlst *		24399	0					
ANR	24454	Identifier	lst		24399	1					
ANR	24455	CFGEntryNode	ENTRY		24399		True				
ANR	24456	CFGExitNode	EXIT		24399		True				
ANR	24457	Symbol	NULL		24399						
ANR	24458	Symbol	lst -> next		24399						
ANR	24459	Symbol	toDel -> name		24399						
ANR	24460	Symbol	toDel		24399						
ANR	24461	Symbol	* lst		24399						
ANR	24462	Symbol	lst		24399						
ANR	24463	Symbol	* toDel		24399						
ANR	24464	Symbol	& toDel -> val		24399						
ANR	24465	Function	nvlstPrint	602:0:15188:15752							
ANR	24466	FunctionDef	nvlstPrint (struct nvlst * lst)		24465	0					
ANR	24467	CompoundStatement		604:0:15223:15752	24465	0					
ANR	24468	IdentifierDeclStatement	"char * name , * value ;"	605:1:15226:15244	24465	0	True				
ANR	24469	IdentifierDecl	* name		24465	0					
ANR	24470	IdentifierDeclType	char *		24465	0					
ANR	24471	Identifier	name		24465	1					
ANR	24472	IdentifierDecl	* value		24465	1					
ANR	24473	IdentifierDeclType	char *		24465	0					
ANR	24474	Identifier	value		24465	1					
ANR	24475	ExpressionStatement	"dbgprintf ( ""nvlst %p:\\n"" , lst )"	606:1:15247:15276	24465	1	True				
ANR	24476	CallExpression	"dbgprintf ( ""nvlst %p:\\n"" , lst )"		24465	0					
ANR	24477	Callee	dbgprintf		24465	0					
ANR	24478	Identifier	dbgprintf		24465	0					
ANR	24479	ArgumentList	"""nvlst %p:\\n"""		24465	1					
ANR	24480	Argument	"""nvlst %p:\\n"""		24465	0					
ANR	24481	PrimaryExpression	"""nvlst %p:\\n"""		24465	0					
ANR	24482	Argument	lst		24465	1					
ANR	24483	Identifier	lst		24465	0					
ANR	24484	WhileStatement	while ( lst != NULL )		24465	2					
ANR	24485	Condition	lst != NULL	607:7:15285:15295	24465	0	True				
ANR	24486	EqualityExpression	lst != NULL		24465	0		!=			
ANR	24487	Identifier	lst		24465	0					
ANR	24488	Identifier	NULL		24465	1					
ANR	24489	CompoundStatement		4:20:74:74	24465	1					
ANR	24490	ExpressionStatement	"name = es_str2cstr ( lst -> name , NULL )"	608:2:15302:15337	24465	0	True				
ANR	24491	AssignmentExpression	"name = es_str2cstr ( lst -> name , NULL )"		24465	0		=			
ANR	24492	Identifier	name		24465	0					
ANR	24493	CallExpression	"es_str2cstr ( lst -> name , NULL )"		24465	1					
ANR	24494	Callee	es_str2cstr		24465	0					
ANR	24495	Identifier	es_str2cstr		24465	0					
ANR	24496	ArgumentList	lst -> name		24465	1					
ANR	24497	Argument	lst -> name		24465	0					
ANR	24498	PtrMemberAccess	lst -> name		24465	0					
ANR	24499	Identifier	lst		24465	0					
ANR	24500	Identifier	name		24465	1					
ANR	24501	Argument	NULL		24465	1					
ANR	24502	Identifier	NULL		24465	0					
ANR	24503	SwitchStatement	switch ( lst -> val . datatype )		24465	1					
ANR	24504	Condition	lst -> val . datatype	609:9:15348:15364	24465	0	True				
ANR	24505	MemberAccess	lst -> val . datatype		24465	0					
ANR	24506	PtrMemberAccess	lst -> val		24465	0					
ANR	24507	Identifier	lst		24465	0					
ANR	24508	Identifier	val		24465	1					
ANR	24509	Identifier	datatype		24465	1					
ANR	24510	CompoundStatement		6:28:143:143	24465	1					
ANR	24511	Label	case 'A' :	610:2:15371:15379	24465	0	True				
ANR	24512	ExpressionStatement	"dbgprintf ( ""\\tname: '%s':\\n"" , name )"	611:3:15384:15418	24465	1	True				
ANR	24513	CallExpression	"dbgprintf ( ""\\tname: '%s':\\n"" , name )"		24465	0					
ANR	24514	Callee	dbgprintf		24465	0					
ANR	24515	Identifier	dbgprintf		24465	0					
ANR	24516	ArgumentList	"""\\tname: '%s':\\n"""		24465	1					
ANR	24517	Argument	"""\\tname: '%s':\\n"""		24465	0					
ANR	24518	PrimaryExpression	"""\\tname: '%s':\\n"""		24465	0					
ANR	24519	Argument	name		24465	1					
ANR	24520	Identifier	name		24465	0					
ANR	24521	ExpressionStatement	"cnfarrayPrint ( lst -> val . d . ar , 5 )"	612:3:15423:15454	24465	2	True				
ANR	24522	CallExpression	"cnfarrayPrint ( lst -> val . d . ar , 5 )"		24465	0					
ANR	24523	Callee	cnfarrayPrint		24465	0					
ANR	24524	Identifier	cnfarrayPrint		24465	0					
ANR	24525	ArgumentList	lst -> val . d . ar		24465	1					
ANR	24526	Argument	lst -> val . d . ar		24465	0					
ANR	24527	MemberAccess	lst -> val . d . ar		24465	0					
ANR	24528	MemberAccess	lst -> val . d		24465	0					
ANR	24529	PtrMemberAccess	lst -> val		24465	0					
ANR	24530	Identifier	lst		24465	0					
ANR	24531	Identifier	val		24465	1					
ANR	24532	Identifier	d		24465	1					
ANR	24533	Identifier	ar		24465	1					
ANR	24534	Argument	5		24465	1					
ANR	24535	PrimaryExpression	5		24465	0					
ANR	24536	BreakStatement	break ;	613:3:15459:15464	24465	3	True				
ANR	24537	Label	case 'S' :	614:2:15468:15476	24465	4	True				
ANR	24538	ExpressionStatement	"value = es_str2cstr ( lst -> val . d . estr , NULL )"	615:3:15481:15523	24465	5	True				
ANR	24539	AssignmentExpression	"value = es_str2cstr ( lst -> val . d . estr , NULL )"		24465	0		=			
ANR	24540	Identifier	value		24465	0					
ANR	24541	CallExpression	"es_str2cstr ( lst -> val . d . estr , NULL )"		24465	1					
ANR	24542	Callee	es_str2cstr		24465	0					
ANR	24543	Identifier	es_str2cstr		24465	0					
ANR	24544	ArgumentList	lst -> val . d . estr		24465	1					
ANR	24545	Argument	lst -> val . d . estr		24465	0					
ANR	24546	MemberAccess	lst -> val . d . estr		24465	0					
ANR	24547	MemberAccess	lst -> val . d		24465	0					
ANR	24548	PtrMemberAccess	lst -> val		24465	0					
ANR	24549	Identifier	lst		24465	0					
ANR	24550	Identifier	val		24465	1					
ANR	24551	Identifier	d		24465	1					
ANR	24552	Identifier	estr		24465	1					
ANR	24553	Argument	NULL		24465	1					
ANR	24554	Identifier	NULL		24465	0					
ANR	24555	ExpressionStatement	"dbgprintf ( ""\\tname: '%s', value '%s'\\n"" , name , value )"	616:3:15528:15580	24465	6	True				
ANR	24556	CallExpression	"dbgprintf ( ""\\tname: '%s', value '%s'\\n"" , name , value )"		24465	0					
ANR	24557	Callee	dbgprintf		24465	0					
ANR	24558	Identifier	dbgprintf		24465	0					
ANR	24559	ArgumentList	"""\\tname: '%s', value '%s'\\n"""		24465	1					
ANR	24560	Argument	"""\\tname: '%s', value '%s'\\n"""		24465	0					
ANR	24561	PrimaryExpression	"""\\tname: '%s', value '%s'\\n"""		24465	0					
ANR	24562	Argument	name		24465	1					
ANR	24563	Identifier	name		24465	0					
ANR	24564	Argument	value		24465	2					
ANR	24565	Identifier	value		24465	0					
ANR	24566	ExpressionStatement	free ( value )	617:3:15585:15596	24465	7	True				
ANR	24567	CallExpression	free ( value )		24465	0					
ANR	24568	Callee	free		24465	0					
ANR	24569	Identifier	free		24465	0					
ANR	24570	ArgumentList	value		24465	1					
ANR	24571	Argument	value		24465	0					
ANR	24572	Identifier	value		24465	0					
ANR	24573	BreakStatement	break ;	618:3:15601:15606	24465	8	True				
ANR	24574	Label	default :	619:2:15610:15617	24465	9	True				
ANR	24575	Identifier	default		24465	0					
ANR	24576	ExpressionStatement	"dbgprintf ( ""nvlstPrint: unknown type '%s'\\n"" , tokenToString ( lst -> val . datatype ) )"	619:10:15618:15700	24465	10	True				
ANR	24577	CallExpression	"dbgprintf ( ""nvlstPrint: unknown type '%s'\\n"" , tokenToString ( lst -> val . datatype ) )"		24465	0					
ANR	24578	Callee	dbgprintf		24465	0					
ANR	24579	Identifier	dbgprintf		24465	0					
ANR	24580	ArgumentList	"""nvlstPrint: unknown type '%s'\\n"""		24465	1					
ANR	24581	Argument	"""nvlstPrint: unknown type '%s'\\n"""		24465	0					
ANR	24582	PrimaryExpression	"""nvlstPrint: unknown type '%s'\\n"""		24465	0					
ANR	24583	Argument	tokenToString ( lst -> val . datatype )		24465	1					
ANR	24584	CallExpression	tokenToString ( lst -> val . datatype )		24465	0					
ANR	24585	Callee	tokenToString		24465	0					
ANR	24586	Identifier	tokenToString		24465	0					
ANR	24587	ArgumentList	lst -> val . datatype		24465	1					
ANR	24588	Argument	lst -> val . datatype		24465	0					
ANR	24589	MemberAccess	lst -> val . datatype		24465	0					
ANR	24590	PtrMemberAccess	lst -> val		24465	0					
ANR	24591	Identifier	lst		24465	0					
ANR	24592	Identifier	val		24465	1					
ANR	24593	Identifier	datatype		24465	1					
ANR	24594	BreakStatement	break ;	621:3:15705:15710	24465	11	True				
ANR	24595	ExpressionStatement	free ( name )	623:2:15718:15728	24465	2	True				
ANR	24596	CallExpression	free ( name )		24465	0					
ANR	24597	Callee	free		24465	0					
ANR	24598	Identifier	free		24465	0					
ANR	24599	ArgumentList	name		24465	1					
ANR	24600	Argument	name		24465	0					
ANR	24601	Identifier	name		24465	0					
ANR	24602	ExpressionStatement	lst = lst -> next	624:2:15732:15747	24465	3	True				
ANR	24603	AssignmentExpression	lst = lst -> next		24465	0		=			
ANR	24604	Identifier	lst		24465	0					
ANR	24605	PtrMemberAccess	lst -> next		24465	1					
ANR	24606	Identifier	lst		24465	0					
ANR	24607	Identifier	next		24465	1					
ANR	24608	ReturnType	void		24465	1					
ANR	24609	Identifier	nvlstPrint		24465	2					
ANR	24610	ParameterList	struct nvlst * lst		24465	3					
ANR	24611	Parameter	struct nvlst * lst	603:11:15204:15220	24465	0	True				
ANR	24612	ParameterType	struct nvlst *		24465	0					
ANR	24613	Identifier	lst		24465	1					
ANR	24614	CFGEntryNode	ENTRY		24465		True				
ANR	24615	CFGExitNode	EXIT		24465		True				
ANR	24616	Symbol	NULL		24465						
ANR	24617	Symbol	lst -> val		24465						
ANR	24618	Symbol	tokenToString		24465						
ANR	24619	Symbol	lst		24465						
ANR	24620	Symbol	es_str2cstr		24465						
ANR	24621	Symbol	lst -> val . datatype		24465						
ANR	24622	Symbol	lst -> next		24465						
ANR	24623	Symbol	* lst		24465						
ANR	24624	Symbol	name		24465						
ANR	24625	Symbol	lst -> val . d . estr		24465						
ANR	24626	Symbol	lst -> val . d . ar		24465						
ANR	24627	Symbol	lst -> name		24465						
ANR	24628	Symbol	value		24465						
ANR	24629	Symbol	lst -> val . d		24465						
ANR	24630	Function	nvlstFindName	631:0:15851:15998							
ANR	24631	FunctionDef	"nvlstFindName (struct nvlst * lst , es_str_t * name)"		24630	0					
ANR	24632	CompoundStatement		633:0:15914:15998	24630	0					
ANR	24633	WhileStatement	"while ( lst != NULL && es_strcmp ( lst -> name , name ) )"		24630	0					
ANR	24634	Condition	"lst != NULL && es_strcmp ( lst -> name , name )"	634:7:15923:15963	24630	0	True				
ANR	24635	AndExpression	"lst != NULL && es_strcmp ( lst -> name , name )"		24630	0		&&			
ANR	24636	EqualityExpression	lst != NULL		24630	0		!=			
ANR	24637	Identifier	lst		24630	0					
ANR	24638	Identifier	NULL		24630	1					
ANR	24639	CallExpression	"es_strcmp ( lst -> name , name )"		24630	1					
ANR	24640	Callee	es_strcmp		24630	0					
ANR	24641	Identifier	es_strcmp		24630	0					
ANR	24642	ArgumentList	lst -> name		24630	1					
ANR	24643	Argument	lst -> name		24630	0					
ANR	24644	PtrMemberAccess	lst -> name		24630	0					
ANR	24645	Identifier	lst		24630	0					
ANR	24646	Identifier	name		24630	1					
ANR	24647	Argument	name		24630	1					
ANR	24648	Identifier	name		24630	0					
ANR	24649	ExpressionStatement	lst = lst -> next	635:2:15968:15983	24630	1	True				
ANR	24650	AssignmentExpression	lst = lst -> next		24630	0		=			
ANR	24651	Identifier	lst		24630	0					
ANR	24652	PtrMemberAccess	lst -> next		24630	1					
ANR	24653	Identifier	lst		24630	0					
ANR	24654	Identifier	next		24630	1					
ANR	24655	ReturnStatement	return lst ;	636:1:15986:15996	24630	1	True				
ANR	24656	Identifier	lst		24630	0					
ANR	24657	ReturnType	struct nvlst *		24630	1					
ANR	24658	Identifier	nvlstFindName		24630	2					
ANR	24659	ParameterList	"struct nvlst * lst , es_str_t * name"		24630	3					
ANR	24660	Parameter	struct nvlst * lst	632:14:15879:15895	24630	0	True				
ANR	24661	ParameterType	struct nvlst *		24630	0					
ANR	24662	Identifier	lst		24630	1					
ANR	24663	Parameter	es_str_t * name	632:33:15898:15911	24630	1	True				
ANR	24664	ParameterType	es_str_t *		24630	0					
ANR	24665	Identifier	name		24630	1					
ANR	24666	CFGEntryNode	ENTRY		24630		True				
ANR	24667	CFGExitNode	EXIT		24630		True				
ANR	24668	Symbol	NULL		24630						
ANR	24669	Symbol	lst -> next		24630						
ANR	24670	Symbol	* lst		24630						
ANR	24671	Symbol	name		24630						
ANR	24672	Symbol	es_strcmp		24630						
ANR	24673	Symbol	lst -> name		24630						
ANR	24674	Symbol	lst		24630						
ANR	24675	DeclStmt									
ANR	24676	Decl							es_size_t	es_size_t	lenName
ANR	24677	Function	nvlstChkDupes	657:0:16503:16879							
ANR	24678	FunctionDef	nvlstChkDupes (struct nvlst * lst)		24677	0					
ANR	24679	CompoundStatement		659:0:16548:16879	24677	0					
ANR	24680	IdentifierDeclStatement	char * cstr ;	660:1:16551:16561	24677	0	True				
ANR	24681	IdentifierDecl	* cstr		24677	0					
ANR	24682	IdentifierDeclType	char *		24677	0					
ANR	24683	Identifier	cstr		24677	1					
ANR	24684	WhileStatement	while ( lst != NULL )		24677	1					
ANR	24685	Condition	lst != NULL	662:7:16571:16581	24677	0	True				
ANR	24686	EqualityExpression	lst != NULL		24677	0		!=			
ANR	24687	Identifier	lst		24677	0					
ANR	24688	Identifier	NULL		24677	1					
ANR	24689	CompoundStatement		4:20:35:35	24677	1					
ANR	24690	IfStatement	"if ( nvlstFindName ( lst -> next , lst -> name ) != NULL )"		24677	0					
ANR	24691	Condition	"nvlstFindName ( lst -> next , lst -> name ) != NULL"	663:5:16591:16633	24677	0	True				
ANR	24692	EqualityExpression	"nvlstFindName ( lst -> next , lst -> name ) != NULL"		24677	0		!=			
ANR	24693	CallExpression	"nvlstFindName ( lst -> next , lst -> name )"		24677	0					
ANR	24694	Callee	nvlstFindName		24677	0					
ANR	24695	Identifier	nvlstFindName		24677	0					
ANR	24696	ArgumentList	lst -> next		24677	1					
ANR	24697	Argument	lst -> next		24677	0					
ANR	24698	PtrMemberAccess	lst -> next		24677	0					
ANR	24699	Identifier	lst		24677	0					
ANR	24700	Identifier	next		24677	1					
ANR	24701	Argument	lst -> name		24677	1					
ANR	24702	PtrMemberAccess	lst -> name		24677	0					
ANR	24703	Identifier	lst		24677	0					
ANR	24704	Identifier	name		24677	1					
ANR	24705	Identifier	NULL		24677	1					
ANR	24706	CompoundStatement		5:50:87:87	24677	1					
ANR	24707	ExpressionStatement	"cstr = es_str2cstr ( lst -> name , NULL )"	664:3:16641:16676	24677	0	True				
ANR	24708	AssignmentExpression	"cstr = es_str2cstr ( lst -> name , NULL )"		24677	0		=			
ANR	24709	Identifier	cstr		24677	0					
ANR	24710	CallExpression	"es_str2cstr ( lst -> name , NULL )"		24677	1					
ANR	24711	Callee	es_str2cstr		24677	0					
ANR	24712	Identifier	es_str2cstr		24677	0					
ANR	24713	ArgumentList	lst -> name		24677	1					
ANR	24714	Argument	lst -> name		24677	0					
ANR	24715	PtrMemberAccess	lst -> name		24677	0					
ANR	24716	Identifier	lst		24677	0					
ANR	24717	Identifier	name		24677	1					
ANR	24718	Argument	NULL		24677	1					
ANR	24719	Identifier	NULL		24677	0					
ANR	24720	Statement	parser_errmsg	665:3:16681:16693	24677	1	True				
ANR	24721	Statement	(	665:16:16694:16694	24677	2	True				
ANR	24722	Statement	"""duplicate parameter '%s' -- """	665:17:16695:16724	24677	3	True				
ANR	24723	Statement	"""interpretation is ambigious, one value """	666:5:16731:16771	24677	4	True				
ANR	24724	Statement	"""will be randomly selected. Fix this problem."""	667:5:16778:16823	24677	5	True				
ANR	24725	Statement	","	667:51:16824:16824	24677	6	True				
ANR	24726	Statement	cstr	668:5:16831:16834	24677	7	True				
ANR	24727	Statement	)	668:9:16835:16835	24677	8	True				
ANR	24728	ExpressionStatement		668:10:16836:16836	24677	9	True				
ANR	24729	ExpressionStatement	free ( cstr )	669:3:16841:16851	24677	10	True				
ANR	24730	CallExpression	free ( cstr )		24677	0					
ANR	24731	Callee	free		24677	0					
ANR	24732	Identifier	free		24677	0					
ANR	24733	ArgumentList	cstr		24677	1					
ANR	24734	Argument	cstr		24677	0					
ANR	24735	Identifier	cstr		24677	0					
ANR	24736	ExpressionStatement	lst = lst -> next	671:2:16859:16874	24677	1	True				
ANR	24737	AssignmentExpression	lst = lst -> next		24677	0		=			
ANR	24738	Identifier	lst		24677	0					
ANR	24739	PtrMemberAccess	lst -> next		24677	1					
ANR	24740	Identifier	lst		24677	0					
ANR	24741	Identifier	next		24677	1					
ANR	24742	ReturnType	static void		24677	1					
ANR	24743	Identifier	nvlstChkDupes		24677	2					
ANR	24744	ParameterList	struct nvlst * lst		24677	3					
ANR	24745	Parameter	struct nvlst * lst	658:14:16529:16545	24677	0	True				
ANR	24746	ParameterType	struct nvlst *		24677	0					
ANR	24747	Identifier	lst		24677	1					
ANR	24748	CFGEntryNode	ENTRY		24677		True				
ANR	24749	CFGExitNode	EXIT		24677		True				
ANR	24750	Symbol	cstr		24677						
ANR	24751	Symbol	NULL		24677						
ANR	24752	Symbol	lst -> next		24677						
ANR	24753	Symbol	* lst		24677						
ANR	24754	Symbol	lst -> name		24677						
ANR	24755	Symbol	lst		24677						
ANR	24756	Symbol	nvlstFindName		24677						
ANR	24757	Symbol	es_str2cstr		24677						
ANR	24758	Function	nvlstChkUnused	680:0:17075:17343							
ANR	24759	FunctionDef	nvlstChkUnused (struct nvlst * lst)		24758	0					
ANR	24760	CompoundStatement		682:0:17114:17343	24758	0					
ANR	24761	IdentifierDeclStatement	char * cstr ;	683:1:17117:17127	24758	0	True				
ANR	24762	IdentifierDecl	* cstr		24758	0					
ANR	24763	IdentifierDeclType	char *		24758	0					
ANR	24764	Identifier	cstr		24758	1					
ANR	24765	WhileStatement	while ( lst != NULL )		24758	1					
ANR	24766	Condition	lst != NULL	685:7:17137:17147	24758	0	True				
ANR	24767	EqualityExpression	lst != NULL		24758	0		!=			
ANR	24768	Identifier	lst		24758	0					
ANR	24769	Identifier	NULL		24758	1					
ANR	24770	CompoundStatement		4:20:35:35	24758	1					
ANR	24771	IfStatement	if ( ! lst -> bUsed )		24758	0					
ANR	24772	Condition	! lst -> bUsed	686:5:17157:17167	24758	0	True				
ANR	24773	UnaryOperationExpression	! lst -> bUsed		24758	0					
ANR	24774	UnaryOperator	!		24758	0					
ANR	24775	PtrMemberAccess	lst -> bUsed		24758	1					
ANR	24776	Identifier	lst		24758	0					
ANR	24777	Identifier	bUsed		24758	1					
ANR	24778	CompoundStatement		5:18:55:55	24758	1					
ANR	24779	ExpressionStatement	"cstr = es_str2cstr ( lst -> name , NULL )"	687:3:17175:17210	24758	0	True				
ANR	24780	AssignmentExpression	"cstr = es_str2cstr ( lst -> name , NULL )"		24758	0		=			
ANR	24781	Identifier	cstr		24758	0					
ANR	24782	CallExpression	"es_str2cstr ( lst -> name , NULL )"		24758	1					
ANR	24783	Callee	es_str2cstr		24758	0					
ANR	24784	Identifier	es_str2cstr		24758	0					
ANR	24785	ArgumentList	lst -> name		24758	1					
ANR	24786	Argument	lst -> name		24758	0					
ANR	24787	PtrMemberAccess	lst -> name		24758	0					
ANR	24788	Identifier	lst		24758	0					
ANR	24789	Identifier	name		24758	1					
ANR	24790	Argument	NULL		24758	1					
ANR	24791	Identifier	NULL		24758	0					
ANR	24792	Statement	parser_errmsg	688:3:17215:17227	24758	1	True				
ANR	24793	Statement	(	688:16:17228:17228	24758	2	True				
ANR	24794	Statement	"""parameter '%s' not known -- """	688:17:17229:17258	24758	3	True				
ANR	24795	Statement	"""typo in config file?"""	689:5:17265:17286	24758	4	True				
ANR	24796	Statement	","	689:27:17287:17287	24758	5	True				
ANR	24797	Statement	cstr	690:5:17295:17298	24758	6	True				
ANR	24798	Statement	)	690:9:17299:17299	24758	7	True				
ANR	24799	ExpressionStatement		690:10:17300:17300	24758	8	True				
ANR	24800	ExpressionStatement	free ( cstr )	691:3:17305:17315	24758	9	True				
ANR	24801	CallExpression	free ( cstr )		24758	0					
ANR	24802	Callee	free		24758	0					
ANR	24803	Identifier	free		24758	0					
ANR	24804	ArgumentList	cstr		24758	1					
ANR	24805	Argument	cstr		24758	0					
ANR	24806	Identifier	cstr		24758	0					
ANR	24807	ExpressionStatement	lst = lst -> next	693:2:17323:17338	24758	1	True				
ANR	24808	AssignmentExpression	lst = lst -> next		24758	0		=			
ANR	24809	Identifier	lst		24758	0					
ANR	24810	PtrMemberAccess	lst -> next		24758	1					
ANR	24811	Identifier	lst		24758	0					
ANR	24812	Identifier	next		24758	1					
ANR	24813	ReturnType	void		24758	1					
ANR	24814	Identifier	nvlstChkUnused		24758	2					
ANR	24815	ParameterList	struct nvlst * lst		24758	3					
ANR	24816	Parameter	struct nvlst * lst	681:15:17095:17111	24758	0	True				
ANR	24817	ParameterType	struct nvlst *		24758	0					
ANR	24818	Identifier	lst		24758	1					
ANR	24819	CFGEntryNode	ENTRY		24758		True				
ANR	24820	CFGExitNode	EXIT		24758		True				
ANR	24821	Symbol	cstr		24758						
ANR	24822	Symbol	lst -> bUsed		24758						
ANR	24823	Symbol	NULL		24758						
ANR	24824	Symbol	lst -> next		24758						
ANR	24825	Symbol	* lst		24758						
ANR	24826	Symbol	lst -> name		24758						
ANR	24827	Symbol	lst		24758						
ANR	24828	Symbol	es_str2cstr		24758						
ANR	24829	Function	doGetSize	698:0:17347:18928							
ANR	24830	FunctionDef	"doGetSize (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		24829	0					
ANR	24831	CompoundStatement		701:0:17449:18928	24829	0					
ANR	24832	IdentifierDeclStatement	unsigned char * c ;	702:1:17452:17468	24829	0	True				
ANR	24833	IdentifierDecl	* c		24829	0					
ANR	24834	IdentifierDeclType	unsigned char *		24829	0					
ANR	24835	Identifier	c		24829	1					
ANR	24836	IdentifierDeclStatement	es_size_t i ;	703:1:17471:17482	24829	1	True				
ANR	24837	IdentifierDecl	i		24829	0					
ANR	24838	IdentifierDeclType	es_size_t		24829	0					
ANR	24839	Identifier	i		24829	1					
ANR	24840	IdentifierDeclStatement	long long n ;	704:1:17485:17496	24829	2	True				
ANR	24841	IdentifierDecl	n		24829	0					
ANR	24842	IdentifierDeclType	long long		24829	0					
ANR	24843	Identifier	n		24829	1					
ANR	24844	IdentifierDeclStatement	int r ;	705:1:17499:17504	24829	3	True				
ANR	24845	IdentifierDecl	r		24829	0					
ANR	24846	IdentifierDeclType	int		24829	0					
ANR	24847	Identifier	r		24829	1					
ANR	24848	ExpressionStatement	c = es_getBufAddr ( valnode -> val . d . estr )	706:1:17507:17545	24829	4	True				
ANR	24849	AssignmentExpression	c = es_getBufAddr ( valnode -> val . d . estr )		24829	0		=			
ANR	24850	Identifier	c		24829	0					
ANR	24851	CallExpression	es_getBufAddr ( valnode -> val . d . estr )		24829	1					
ANR	24852	Callee	es_getBufAddr		24829	0					
ANR	24853	Identifier	es_getBufAddr		24829	0					
ANR	24854	ArgumentList	valnode -> val . d . estr		24829	1					
ANR	24855	Argument	valnode -> val . d . estr		24829	0					
ANR	24856	MemberAccess	valnode -> val . d . estr		24829	0					
ANR	24857	MemberAccess	valnode -> val . d		24829	0					
ANR	24858	PtrMemberAccess	valnode -> val		24829	0					
ANR	24859	Identifier	valnode		24829	0					
ANR	24860	Identifier	val		24829	1					
ANR	24861	Identifier	d		24829	1					
ANR	24862	Identifier	estr		24829	1					
ANR	24863	ExpressionStatement	n = 0	707:1:17548:17553	24829	5	True				
ANR	24864	AssignmentExpression	n = 0		24829	0		=			
ANR	24865	Identifier	n		24829	0					
ANR	24866	PrimaryExpression	0		24829	1					
ANR	24867	ExpressionStatement	i = 0	708:1:17556:17561	24829	6	True				
ANR	24868	AssignmentExpression	i = 0		24829	0		=			
ANR	24869	Identifier	i		24829	0					
ANR	24870	PrimaryExpression	0		24829	1					
ANR	24871	WhileStatement	while ( i < es_strlen ( valnode -> val . d . estr ) && isdigit ( * c ) )		24829	7					
ANR	24872	Condition	i < es_strlen ( valnode -> val . d . estr ) && isdigit ( * c )	709:7:17570:17618	24829	0	True				
ANR	24873	AndExpression	i < es_strlen ( valnode -> val . d . estr ) && isdigit ( * c )		24829	0		&&			
ANR	24874	RelationalExpression	i < es_strlen ( valnode -> val . d . estr )		24829	0		<			
ANR	24875	Identifier	i		24829	0					
ANR	24876	CallExpression	es_strlen ( valnode -> val . d . estr )		24829	1					
ANR	24877	Callee	es_strlen		24829	0					
ANR	24878	Identifier	es_strlen		24829	0					
ANR	24879	ArgumentList	valnode -> val . d . estr		24829	1					
ANR	24880	Argument	valnode -> val . d . estr		24829	0					
ANR	24881	MemberAccess	valnode -> val . d . estr		24829	0					
ANR	24882	MemberAccess	valnode -> val . d		24829	0					
ANR	24883	PtrMemberAccess	valnode -> val		24829	0					
ANR	24884	Identifier	valnode		24829	0					
ANR	24885	Identifier	val		24829	1					
ANR	24886	Identifier	d		24829	1					
ANR	24887	Identifier	estr		24829	1					
ANR	24888	CallExpression	isdigit ( * c )		24829	1					
ANR	24889	Callee	isdigit		24829	0					
ANR	24890	Identifier	isdigit		24829	0					
ANR	24891	ArgumentList	* c		24829	1					
ANR	24892	Argument	* c		24829	0					
ANR	24893	UnaryOperationExpression	* c		24829	0					
ANR	24894	UnaryOperator	*		24829	0					
ANR	24895	Identifier	c		24829	1					
ANR	24896	CompoundStatement		9:58:171:171	24829	1					
ANR	24897	ExpressionStatement	n = 10 * n + * c - '0'	710:2:17625:17646	24829	0	True				
ANR	24898	AssignmentExpression	n = 10 * n + * c - '0'		24829	0		=			
ANR	24899	Identifier	n		24829	0					
ANR	24900	AdditiveExpression	10 * n + * c - '0'		24829	1		+			
ANR	24901	MultiplicativeExpression	10 * n		24829	0		*			
ANR	24902	PrimaryExpression	10		24829	0					
ANR	24903	Identifier	n		24829	1					
ANR	24904	AdditiveExpression	* c - '0'		24829	1		-			
ANR	24905	UnaryOperationExpression	* c		24829	0					
ANR	24906	UnaryOperator	*		24829	0					
ANR	24907	Identifier	c		24829	1					
ANR	24908	PrimaryExpression	'0'		24829	1					
ANR	24909	ExpressionStatement	++ i	711:2:17650:17653	24829	1	True				
ANR	24910	UnaryExpression	++ i		24829	0					
ANR	24911	IncDec	++		24829	0					
ANR	24912	Identifier	i		24829	1					
ANR	24913	ExpressionStatement	++ c	712:2:17657:17660	24829	2	True				
ANR	24914	UnaryExpression	++ c		24829	0					
ANR	24915	IncDec	++		24829	0					
ANR	24916	Identifier	c		24829	1					
ANR	24917	IfStatement	if ( i < es_strlen ( valnode -> val . d . estr ) )		24829	8					
ANR	24918	Condition	i < es_strlen ( valnode -> val . d . estr )	714:4:17669:17702	24829	0	True				
ANR	24919	RelationalExpression	i < es_strlen ( valnode -> val . d . estr )		24829	0		<			
ANR	24920	Identifier	i		24829	0					
ANR	24921	CallExpression	es_strlen ( valnode -> val . d . estr )		24829	1					
ANR	24922	Callee	es_strlen		24829	0					
ANR	24923	Identifier	es_strlen		24829	0					
ANR	24924	ArgumentList	valnode -> val . d . estr		24829	1					
ANR	24925	Argument	valnode -> val . d . estr		24829	0					
ANR	24926	MemberAccess	valnode -> val . d . estr		24829	0					
ANR	24927	MemberAccess	valnode -> val . d		24829	0					
ANR	24928	PtrMemberAccess	valnode -> val		24829	0					
ANR	24929	Identifier	valnode		24829	0					
ANR	24930	Identifier	val		24829	1					
ANR	24931	Identifier	d		24829	1					
ANR	24932	Identifier	estr		24829	1					
ANR	24933	CompoundStatement		14:40:255:255	24829	1					
ANR	24934	ExpressionStatement	++ i	715:2:17709:17712	24829	0	True				
ANR	24935	UnaryExpression	++ i		24829	0					
ANR	24936	IncDec	++		24829	0					
ANR	24937	Identifier	i		24829	1					
ANR	24938	SwitchStatement	switch ( * c )		24829	1					
ANR	24939	Condition	* c	716:9:17723:17724	24829	0	True				
ANR	24940	UnaryOperationExpression	* c		24829	0					
ANR	24941	UnaryOperator	*		24829	0					
ANR	24942	Identifier	c		24829	1					
ANR	24943	CompoundStatement		16:13:277:277	24829	1					
ANR	24944	Label	case 'k' :	718:2:17776:17784	24829	0	True				
ANR	24945	ExpressionStatement	n *= 1024	718:12:17786:17795	24829	1	True				
ANR	24946	AssignmentExpression	n *= 1024		24829	0		*=			
ANR	24947	Identifier	n		24829	0					
ANR	24948	PrimaryExpression	1024		24829	1					
ANR	24949	BreakStatement	break ;	718:23:17797:17802	24829	2	True				
ANR	24950	Label	case 'm' :	719:2:17806:17814	24829	3	True				
ANR	24951	ExpressionStatement	n *= 1024 * 1024	719:12:17816:17832	24829	4	True				
ANR	24952	AssignmentExpression	n *= 1024 * 1024		24829	0		*=			
ANR	24953	Identifier	n		24829	0					
ANR	24954	MultiplicativeExpression	1024 * 1024		24829	1		*			
ANR	24955	PrimaryExpression	1024		24829	0					
ANR	24956	PrimaryExpression	1024		24829	1					
ANR	24957	BreakStatement	break ;	719:30:17834:17839	24829	5	True				
ANR	24958	Label	case 'g' :	720:2:17843:17851	24829	6	True				
ANR	24959	ExpressionStatement	n *= 1024 * 1024 * 1024	720:12:17853:17876	24829	7	True				
ANR	24960	AssignmentExpression	n *= 1024 * 1024 * 1024		24829	0		*=			
ANR	24961	Identifier	n		24829	0					
ANR	24962	MultiplicativeExpression	1024 * 1024 * 1024		24829	1		*			
ANR	24963	PrimaryExpression	1024		24829	0					
ANR	24964	MultiplicativeExpression	1024 * 1024		24829	1		*			
ANR	24965	PrimaryExpression	1024		24829	0					
ANR	24966	PrimaryExpression	1024		24829	1					
ANR	24967	BreakStatement	break ;	720:37:17878:17883	24829	8	True				
ANR	24968	Label	case 't' :	721:2:17887:17895	24829	9	True				
ANR	24969	ExpressionStatement	n *= ( int64 ) 1024 * 1024 * 1024 * 1024	721:12:17897:17935	24829	10	True				
ANR	24970	AssignmentExpression	n *= ( int64 ) 1024 * 1024 * 1024 * 1024		24829	0		*=			
ANR	24971	Identifier	n		24829	0					
ANR	24972	MultiplicativeExpression	( int64 ) 1024 * 1024 * 1024 * 1024		24829	1		*			
ANR	24973	CastExpression	( int64 ) 1024		24829	0					
ANR	24974	CastTarget	int64		24829	0					
ANR	24975	PrimaryExpression	1024		24829	1					
ANR	24976	MultiplicativeExpression	1024 * 1024 * 1024		24829	1		*			
ANR	24977	PrimaryExpression	1024		24829	0					
ANR	24978	MultiplicativeExpression	1024 * 1024		24829	1		*			
ANR	24979	PrimaryExpression	1024		24829	0					
ANR	24980	PrimaryExpression	1024		24829	1					
ANR	24981	BreakStatement	break ;	721:52:17937:17942	24829	11	True				
ANR	24982	Label	case 'p' :	722:2:17957:17965	24829	12	True				
ANR	24983	ExpressionStatement	n *= ( int64 ) 1024 * 1024 * 1024 * 1024 * 1024	722:12:17967:18012	24829	13	True				
ANR	24984	AssignmentExpression	n *= ( int64 ) 1024 * 1024 * 1024 * 1024 * 1024		24829	0		*=			
ANR	24985	Identifier	n		24829	0					
ANR	24986	MultiplicativeExpression	( int64 ) 1024 * 1024 * 1024 * 1024 * 1024		24829	1		*			
ANR	24987	CastExpression	( int64 ) 1024		24829	0					
ANR	24988	CastTarget	int64		24829	0					
ANR	24989	PrimaryExpression	1024		24829	1					
ANR	24990	MultiplicativeExpression	1024 * 1024 * 1024 * 1024		24829	1		*			
ANR	24991	PrimaryExpression	1024		24829	0					
ANR	24992	MultiplicativeExpression	1024 * 1024 * 1024		24829	1		*			
ANR	24993	PrimaryExpression	1024		24829	0					
ANR	24994	MultiplicativeExpression	1024 * 1024		24829	1		*			
ANR	24995	PrimaryExpression	1024		24829	0					
ANR	24996	PrimaryExpression	1024		24829	1					
ANR	24997	BreakStatement	break ;	722:59:18014:18019	24829	14	True				
ANR	24998	Label	case 'e' :	723:2:18034:18042	24829	15	True				
ANR	24999	ExpressionStatement	n *= ( int64 ) 1024 * 1024 * 1024 * 1024 * 1024 * 1024	723:12:18044:18096	24829	16	True				
ANR	25000	AssignmentExpression	n *= ( int64 ) 1024 * 1024 * 1024 * 1024 * 1024 * 1024		24829	0		*=			
ANR	25001	Identifier	n		24829	0					
ANR	25002	MultiplicativeExpression	( int64 ) 1024 * 1024 * 1024 * 1024 * 1024 * 1024		24829	1		*			
ANR	25003	CastExpression	( int64 ) 1024		24829	0					
ANR	25004	CastTarget	int64		24829	0					
ANR	25005	PrimaryExpression	1024		24829	1					
ANR	25006	MultiplicativeExpression	1024 * 1024 * 1024 * 1024 * 1024		24829	1		*			
ANR	25007	PrimaryExpression	1024		24829	0					
ANR	25008	MultiplicativeExpression	1024 * 1024 * 1024 * 1024		24829	1		*			
ANR	25009	PrimaryExpression	1024		24829	0					
ANR	25010	MultiplicativeExpression	1024 * 1024 * 1024		24829	1		*			
ANR	25011	PrimaryExpression	1024		24829	0					
ANR	25012	MultiplicativeExpression	1024 * 1024		24829	1		*			
ANR	25013	PrimaryExpression	1024		24829	0					
ANR	25014	PrimaryExpression	1024		24829	1					
ANR	25015	BreakStatement	break ;	723:66:18098:18103	24829	17	True				
ANR	25016	Label	case 'K' :	725:2:18166:18174	24829	18	True				
ANR	25017	ExpressionStatement	n *= 1000	725:12:18176:18185	24829	19	True				
ANR	25018	AssignmentExpression	n *= 1000		24829	0		*=			
ANR	25019	Identifier	n		24829	0					
ANR	25020	PrimaryExpression	1000		24829	1					
ANR	25021	BreakStatement	break ;	725:23:18187:18192	24829	20	True				
ANR	25022	Label	case 'M' :	726:9:18203:18211	24829	21	True				
ANR	25023	ExpressionStatement	n *= 1000000	726:19:18213:18225	24829	22	True				
ANR	25024	AssignmentExpression	n *= 1000000		24829	0		*=			
ANR	25025	Identifier	n		24829	0					
ANR	25026	PrimaryExpression	1000000		24829	1					
ANR	25027	BreakStatement	break ;	726:33:18227:18232	24829	23	True				
ANR	25028	Label	case 'G' :	727:16:18250:18258	24829	24	True				
ANR	25029	ExpressionStatement	n *= 1000000000	727:26:18260:18275	24829	25	True				
ANR	25030	AssignmentExpression	n *= 1000000000		24829	0		*=			
ANR	25031	Identifier	n		24829	0					
ANR	25032	PrimaryExpression	1000000000		24829	1					
ANR	25033	BreakStatement	break ;	727:43:18277:18282	24829	26	True				
ANR	25034	Label	case 'T' :	730:16:18428:18436	24829	27	True				
ANR	25035	ExpressionStatement	n *= ( int64 ) 1000 * 1000000000	730:26:18438:18474	24829	28	True				
ANR	25036	AssignmentExpression	n *= ( int64 ) 1000 * 1000000000		24829	0		*=			
ANR	25037	Identifier	n		24829	0					
ANR	25038	MultiplicativeExpression	( int64 ) 1000 * 1000000000		24829	1		*			
ANR	25039	CastExpression	( int64 ) 1000		24829	0					
ANR	25040	CastTarget	int64		24829	0					
ANR	25041	PrimaryExpression	1000		24829	1					
ANR	25042	PrimaryExpression	1000000000		24829	1					
ANR	25043	BreakStatement	break ;	730:64:18476:18481	24829	29	True				
ANR	25044	Label	case 'P' :	731:16:18510:18518	24829	30	True				
ANR	25045	ExpressionStatement	n *= ( int64 ) 1000000 * 1000000000	731:26:18520:18556	24829	31	True				
ANR	25046	AssignmentExpression	n *= ( int64 ) 1000000 * 1000000000		24829	0		*=			
ANR	25047	Identifier	n		24829	0					
ANR	25048	MultiplicativeExpression	( int64 ) 1000000 * 1000000000		24829	1		*			
ANR	25049	CastExpression	( int64 ) 1000000		24829	0					
ANR	25050	CastTarget	int64		24829	0					
ANR	25051	PrimaryExpression	1000000		24829	1					
ANR	25052	PrimaryExpression	1000000000		24829	1					
ANR	25053	BreakStatement	break ;	731:64:18558:18563	24829	32	True				
ANR	25054	Label	case 'E' :	732:16:18592:18600	24829	33	True				
ANR	25055	ExpressionStatement	n *= ( int64 ) 1000000000 * 1000000000	732:26:18602:18638	24829	34	True				
ANR	25056	AssignmentExpression	n *= ( int64 ) 1000000000 * 1000000000		24829	0		*=			
ANR	25057	Identifier	n		24829	0					
ANR	25058	MultiplicativeExpression	( int64 ) 1000000000 * 1000000000		24829	1		*			
ANR	25059	CastExpression	( int64 ) 1000000000		24829	0					
ANR	25060	CastTarget	int64		24829	0					
ANR	25061	PrimaryExpression	1000000000		24829	1					
ANR	25062	PrimaryExpression	1000000000		24829	1					
ANR	25063	BreakStatement	break ;	732:64:18640:18645	24829	35	True				
ANR	25064	Label	default :	733:2:18659:18666	24829	36	True				
ANR	25065	Identifier	default		24829	0					
ANR	25066	ExpressionStatement	-- i	733:11:18668:18671	24829	37	True				
ANR	25067	UnaryExpression	-- i		24829	0					
ANR	25068	IncDec	--		24829	0					
ANR	25069	Identifier	i		24829	1					
ANR	25070	BreakStatement	break ;	733:16:18673:18678	24829	38	True				
ANR	25071	IfStatement	if ( i == es_strlen ( valnode -> val . d . estr ) )		24829	9					
ANR	25072	Condition	i == es_strlen ( valnode -> val . d . estr )	736:4:18713:18747	24829	0	True				
ANR	25073	EqualityExpression	i == es_strlen ( valnode -> val . d . estr )		24829	0		==			
ANR	25074	Identifier	i		24829	0					
ANR	25075	CallExpression	es_strlen ( valnode -> val . d . estr )		24829	1					
ANR	25076	Callee	es_strlen		24829	0					
ANR	25077	Identifier	es_strlen		24829	0					
ANR	25078	ArgumentList	valnode -> val . d . estr		24829	1					
ANR	25079	Argument	valnode -> val . d . estr		24829	0					
ANR	25080	MemberAccess	valnode -> val . d . estr		24829	0					
ANR	25081	MemberAccess	valnode -> val . d		24829	0					
ANR	25082	PtrMemberAccess	valnode -> val		24829	0					
ANR	25083	Identifier	valnode		24829	0					
ANR	25084	Identifier	val		24829	1					
ANR	25085	Identifier	d		24829	1					
ANR	25086	Identifier	estr		24829	1					
ANR	25087	CompoundStatement		36:41:1300:1300	24829	1					
ANR	25088	ExpressionStatement	val -> val . datatype = 'N'	737:2:18754:18777	24829	0	True				
ANR	25089	AssignmentExpression	val -> val . datatype = 'N'		24829	0		=			
ANR	25090	MemberAccess	val -> val . datatype		24829	0					
ANR	25091	PtrMemberAccess	val -> val		24829	0					
ANR	25092	Identifier	val		24829	0					
ANR	25093	Identifier	val		24829	1					
ANR	25094	Identifier	datatype		24829	1					
ANR	25095	PrimaryExpression	'N'		24829	1					
ANR	25096	ExpressionStatement	val -> val . d . n = n	738:2:18781:18797	24829	1	True				
ANR	25097	AssignmentExpression	val -> val . d . n = n		24829	0		=			
ANR	25098	MemberAccess	val -> val . d . n		24829	0					
ANR	25099	MemberAccess	val -> val . d		24829	0					
ANR	25100	PtrMemberAccess	val -> val		24829	0					
ANR	25101	Identifier	val		24829	0					
ANR	25102	Identifier	val		24829	1					
ANR	25103	Identifier	d		24829	1					
ANR	25104	Identifier	n		24829	1					
ANR	25105	Identifier	n		24829	1					
ANR	25106	ExpressionStatement	r = 1	739:2:18801:18806	24829	2	True				
ANR	25107	AssignmentExpression	r = 1		24829	0		=			
ANR	25108	Identifier	r		24829	0					
ANR	25109	PrimaryExpression	1		24829	1					
ANR	25110	ElseStatement	else		24829	0					
ANR	25111	CompoundStatement		40:8:1366:1366	24829	0					
ANR	25112	ExpressionStatement	"parser_errmsg ( ""parameter '%s' does not contain a valid size"" , param -> name )"	741:2:18820:18903	24829	0	True				
ANR	25113	CallExpression	"parser_errmsg ( ""parameter '%s' does not contain a valid size"" , param -> name )"		24829	0					
ANR	25114	Callee	parser_errmsg		24829	0					
ANR	25115	Identifier	parser_errmsg		24829	0					
ANR	25116	ArgumentList	"""parameter '%s' does not contain a valid size"""		24829	1					
ANR	25117	Argument	"""parameter '%s' does not contain a valid size"""		24829	0					
ANR	25118	PrimaryExpression	"""parameter '%s' does not contain a valid size"""		24829	0					
ANR	25119	Argument	param -> name		24829	1					
ANR	25120	PtrMemberAccess	param -> name		24829	0					
ANR	25121	Identifier	param		24829	0					
ANR	25122	Identifier	name		24829	1					
ANR	25123	ExpressionStatement	r = 0	743:2:18907:18912	24829	1	True				
ANR	25124	AssignmentExpression	r = 0		24829	0		=			
ANR	25125	Identifier	r		24829	0					
ANR	25126	PrimaryExpression	0		24829	1					
ANR	25127	ReturnStatement	return r ;	745:1:18918:18926	24829	10	True				
ANR	25128	Identifier	r		24829	0					
ANR	25129	ReturnType	static int		24829	1					
ANR	25130	Identifier	doGetSize		24829	2					
ANR	25131	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		24829	3					
ANR	25132	Parameter	struct nvlst * valnode	699:10:17368:17388	24829	0	True				
ANR	25133	ParameterType	struct nvlst *		24829	0					
ANR	25134	Identifier	valnode		24829	1					
ANR	25135	Parameter	struct cnfparamdescr * param	699:33:17391:17417	24829	1	True				
ANR	25136	ParameterType	struct cnfparamdescr *		24829	0					
ANR	25137	Identifier	param		24829	1					
ANR	25138	Parameter	struct cnfparamvals * val	700:3:17423:17446	24829	2	True				
ANR	25139	ParameterType	struct cnfparamvals *		24829	0					
ANR	25140	Identifier	val		24829	1					
ANR	25141	CFGEntryNode	ENTRY		24829		True				
ANR	25142	CFGExitNode	EXIT		24829		True				
ANR	25143	Symbol	val		24829						
ANR	25144	Symbol	c		24829						
ANR	25145	Symbol	valnode -> val		24829						
ANR	25146	Symbol	val -> val		24829						
ANR	25147	Symbol	* valnode		24829						
ANR	25148	Symbol	valnode		24829						
ANR	25149	Symbol	i		24829						
ANR	25150	Symbol	* val		24829						
ANR	25151	Symbol	valnode -> val . d . estr		24829						
ANR	25152	Symbol	* c		24829						
ANR	25153	Symbol	val -> val . datatype		24829						
ANR	25154	Symbol	n		24829						
ANR	25155	Symbol	es_getBufAddr		24829						
ANR	25156	Symbol	* param		24829						
ANR	25157	Symbol	r		24829						
ANR	25158	Symbol	val -> val . d		24829						
ANR	25159	Symbol	val -> val . d . n		24829						
ANR	25160	Symbol	param		24829						
ANR	25161	Symbol	param -> name		24829						
ANR	25162	Symbol	es_strlen		24829						
ANR	25163	Symbol	valnode -> val . d		24829						
ANR	25164	Symbol	isdigit		24829						
ANR	25165	Function	doGetBinary	749:0:18932:19433							
ANR	25166	FunctionDef	"doGetBinary (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		25165	0					
ANR	25167	CompoundStatement		752:0:19036:19433	25165	0					
ANR	25168	IdentifierDeclStatement	int r = 1 ;	753:1:19039:19048	25165	0	True				
ANR	25169	IdentifierDecl	r = 1		25165	0					
ANR	25170	IdentifierDeclType	int		25165	0					
ANR	25171	Identifier	r		25165	1					
ANR	25172	AssignmentExpression	r = 1		25165	2		=			
ANR	25173	Identifier	r		25165	0					
ANR	25174	PrimaryExpression	1		25165	1					
ANR	25175	ExpressionStatement	val -> val . datatype = 'N'	754:1:19051:19074	25165	1	True				
ANR	25176	AssignmentExpression	val -> val . datatype = 'N'		25165	0		=			
ANR	25177	MemberAccess	val -> val . datatype		25165	0					
ANR	25178	PtrMemberAccess	val -> val		25165	0					
ANR	25179	Identifier	val		25165	0					
ANR	25180	Identifier	val		25165	1					
ANR	25181	Identifier	datatype		25165	1					
ANR	25182	PrimaryExpression	'N'		25165	1					
ANR	25183	IfStatement	"if ( ! es_strbufcmp ( valnode -> val . d . estr , ( unsigned char * ) ""on"" , 2 ) )"		25165	2					
ANR	25184	Condition	"! es_strbufcmp ( valnode -> val . d . estr , ( unsigned char * ) ""on"" , 2 )"	755:4:19080:19139	25165	0	True				
ANR	25185	UnaryOperationExpression	"! es_strbufcmp ( valnode -> val . d . estr , ( unsigned char * ) ""on"" , 2 )"		25165	0					
ANR	25186	UnaryOperator	!		25165	0					
ANR	25187	CallExpression	"es_strbufcmp ( valnode -> val . d . estr , ( unsigned char * ) ""on"" , 2 )"		25165	1					
ANR	25188	Callee	es_strbufcmp		25165	0					
ANR	25189	Identifier	es_strbufcmp		25165	0					
ANR	25190	ArgumentList	valnode -> val . d . estr		25165	1					
ANR	25191	Argument	valnode -> val . d . estr		25165	0					
ANR	25192	MemberAccess	valnode -> val . d . estr		25165	0					
ANR	25193	MemberAccess	valnode -> val . d		25165	0					
ANR	25194	PtrMemberAccess	valnode -> val		25165	0					
ANR	25195	Identifier	valnode		25165	0					
ANR	25196	Identifier	val		25165	1					
ANR	25197	Identifier	d		25165	1					
ANR	25198	Identifier	estr		25165	1					
ANR	25199	Argument	"( unsigned char * ) ""on"""		25165	1					
ANR	25200	CastExpression	"( unsigned char * ) ""on"""		25165	0					
ANR	25201	CastTarget	unsigned char *		25165	0					
ANR	25202	PrimaryExpression	"""on"""		25165	1					
ANR	25203	Argument	2		25165	2					
ANR	25204	PrimaryExpression	2		25165	0					
ANR	25205	CompoundStatement		4:66:105:105	25165	1					
ANR	25206	ExpressionStatement	val -> val . d . n = 1	756:2:19146:19162	25165	0	True				
ANR	25207	AssignmentExpression	val -> val . d . n = 1		25165	0		=			
ANR	25208	MemberAccess	val -> val . d . n		25165	0					
ANR	25209	MemberAccess	val -> val . d		25165	0					
ANR	25210	PtrMemberAccess	val -> val		25165	0					
ANR	25211	Identifier	val		25165	0					
ANR	25212	Identifier	val		25165	1					
ANR	25213	Identifier	d		25165	1					
ANR	25214	Identifier	n		25165	1					
ANR	25215	PrimaryExpression	1		25165	1					
ANR	25216	ElseStatement	else		25165	0					
ANR	25217	IfStatement	"if ( ! es_strbufcmp ( valnode -> val . d . estr , ( unsigned char * ) ""off"" , 3 ) )"		25165	0					
ANR	25218	Condition	"! es_strbufcmp ( valnode -> val . d . estr , ( unsigned char * ) ""off"" , 3 )"	757:11:19175:19235	25165	0	True				
ANR	25219	UnaryOperationExpression	"! es_strbufcmp ( valnode -> val . d . estr , ( unsigned char * ) ""off"" , 3 )"		25165	0					
ANR	25220	UnaryOperator	!		25165	0					
ANR	25221	CallExpression	"es_strbufcmp ( valnode -> val . d . estr , ( unsigned char * ) ""off"" , 3 )"		25165	1					
ANR	25222	Callee	es_strbufcmp		25165	0					
ANR	25223	Identifier	es_strbufcmp		25165	0					
ANR	25224	ArgumentList	valnode -> val . d . estr		25165	1					
ANR	25225	Argument	valnode -> val . d . estr		25165	0					
ANR	25226	MemberAccess	valnode -> val . d . estr		25165	0					
ANR	25227	MemberAccess	valnode -> val . d		25165	0					
ANR	25228	PtrMemberAccess	valnode -> val		25165	0					
ANR	25229	Identifier	valnode		25165	0					
ANR	25230	Identifier	val		25165	1					
ANR	25231	Identifier	d		25165	1					
ANR	25232	Identifier	estr		25165	1					
ANR	25233	Argument	"( unsigned char * ) ""off"""		25165	1					
ANR	25234	CastExpression	"( unsigned char * ) ""off"""		25165	0					
ANR	25235	CastTarget	unsigned char *		25165	0					
ANR	25236	PrimaryExpression	"""off"""		25165	1					
ANR	25237	Argument	3		25165	2					
ANR	25238	PrimaryExpression	3		25165	0					
ANR	25239	CompoundStatement		6:74:201:201	25165	1					
ANR	25240	ExpressionStatement	val -> val . d . n = 0	758:2:19242:19258	25165	0	True				
ANR	25241	AssignmentExpression	val -> val . d . n = 0		25165	0		=			
ANR	25242	MemberAccess	val -> val . d . n		25165	0					
ANR	25243	MemberAccess	val -> val . d		25165	0					
ANR	25244	PtrMemberAccess	val -> val		25165	0					
ANR	25245	Identifier	val		25165	0					
ANR	25246	Identifier	val		25165	1					
ANR	25247	Identifier	d		25165	1					
ANR	25248	Identifier	n		25165	1					
ANR	25249	PrimaryExpression	0		25165	1					
ANR	25250	ElseStatement	else		25165	0					
ANR	25251	CompoundStatement		8:8:231:231	25165	0					
ANR	25252	Statement	parser_errmsg	760:2:19272:19284	25165	0	True				
ANR	25253	Statement	(	760:15:19285:19285	25165	1	True				
ANR	25254	Statement	"""parameter '%s' must be \\""on\\"" or \\""off\\"" but """	760:16:19286:19332	25165	2	True				
ANR	25255	Statement	"""is neither. Results unpredictable."""	761:4:19338:19373	25165	3	True				
ANR	25256	Statement	","	761:40:19374:19374	25165	4	True				
ANR	25257	Statement	param	761:42:19376:19380	25165	5	True				
ANR	25258	Statement	->	761:47:19381:19382	25165	6	True				
ANR	25259	Statement	name	761:49:19383:19386	25165	7	True				
ANR	25260	Statement	)	761:53:19387:19387	25165	8	True				
ANR	25261	ExpressionStatement		761:54:19388:19388	25165	9	True				
ANR	25262	ExpressionStatement	val -> val . d . n = 0	762:2:19392:19408	25165	10	True				
ANR	25263	AssignmentExpression	val -> val . d . n = 0		25165	0		=			
ANR	25264	MemberAccess	val -> val . d . n		25165	0					
ANR	25265	MemberAccess	val -> val . d		25165	0					
ANR	25266	PtrMemberAccess	val -> val		25165	0					
ANR	25267	Identifier	val		25165	0					
ANR	25268	Identifier	val		25165	1					
ANR	25269	Identifier	d		25165	1					
ANR	25270	Identifier	n		25165	1					
ANR	25271	PrimaryExpression	0		25165	1					
ANR	25272	ExpressionStatement	r = 0	763:2:19412:19417	25165	11	True				
ANR	25273	AssignmentExpression	r = 0		25165	0		=			
ANR	25274	Identifier	r		25165	0					
ANR	25275	PrimaryExpression	0		25165	1					
ANR	25276	ReturnStatement	return r ;	765:1:19423:19431	25165	3	True				
ANR	25277	Identifier	r		25165	0					
ANR	25278	ReturnType	static int		25165	1					
ANR	25279	Identifier	doGetBinary		25165	2					
ANR	25280	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		25165	3					
ANR	25281	Parameter	struct nvlst * valnode	750:12:18955:18975	25165	0	True				
ANR	25282	ParameterType	struct nvlst *		25165	0					
ANR	25283	Identifier	valnode		25165	1					
ANR	25284	Parameter	struct cnfparamdescr * param	750:35:18978:19004	25165	1	True				
ANR	25285	ParameterType	struct cnfparamdescr *		25165	0					
ANR	25286	Identifier	param		25165	1					
ANR	25287	Parameter	struct cnfparamvals * val	751:3:19010:19033	25165	2	True				
ANR	25288	ParameterType	struct cnfparamvals *		25165	0					
ANR	25289	Identifier	val		25165	1					
ANR	25290	CFGEntryNode	ENTRY		25165		True				
ANR	25291	CFGExitNode	EXIT		25165		True				
ANR	25292	Symbol	val		25165						
ANR	25293	Symbol	val -> val		25165						
ANR	25294	Symbol	valnode -> val		25165						
ANR	25295	Symbol	* valnode		25165						
ANR	25296	Symbol	es_strbufcmp		25165						
ANR	25297	Symbol	valnode		25165						
ANR	25298	Symbol	* val		25165						
ANR	25299	Symbol	val -> val . datatype		25165						
ANR	25300	Symbol	valnode -> val . d . estr		25165						
ANR	25301	Symbol	r		25165						
ANR	25302	Symbol	val -> val . d		25165						
ANR	25303	Symbol	val -> val . d . n		25165						
ANR	25304	Symbol	param		25165						
ANR	25305	Symbol	valnode -> val . d		25165						
ANR	25306	Function	doGetQueueType	768:0:19436:20221							
ANR	25307	FunctionDef	"doGetQueueType (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		25306	0					
ANR	25308	CompoundStatement		771:0:19543:20221	25306	0					
ANR	25309	IdentifierDeclStatement	char * cstr ;	772:1:19546:19556	25306	0	True				
ANR	25310	IdentifierDecl	* cstr		25306	0					
ANR	25311	IdentifierDeclType	char *		25306	0					
ANR	25312	Identifier	cstr		25306	1					
ANR	25313	IdentifierDeclStatement	int r = 1 ;	773:1:19559:19568	25306	1	True				
ANR	25314	IdentifierDecl	r = 1		25306	0					
ANR	25315	IdentifierDeclType	int		25306	0					
ANR	25316	Identifier	r		25306	1					
ANR	25317	AssignmentExpression	r = 1		25306	2		=			
ANR	25318	Identifier	r		25306	0					
ANR	25319	PrimaryExpression	1		25306	1					
ANR	25320	IfStatement	"if ( ! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""fixedarray"" , 10 ) )"		25306	2					
ANR	25321	Condition	"! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""fixedarray"" , 10 )"	774:4:19574:19637	25306	0	True				
ANR	25322	UnaryOperationExpression	"! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""fixedarray"" , 10 )"		25306	0					
ANR	25323	UnaryOperator	!		25306	0					
ANR	25324	CallExpression	"es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""fixedarray"" , 10 )"		25306	1					
ANR	25325	Callee	es_strcasebufcmp		25306	0					
ANR	25326	Identifier	es_strcasebufcmp		25306	0					
ANR	25327	ArgumentList	valnode -> val . d . estr		25306	1					
ANR	25328	Argument	valnode -> val . d . estr		25306	0					
ANR	25329	MemberAccess	valnode -> val . d . estr		25306	0					
ANR	25330	MemberAccess	valnode -> val . d		25306	0					
ANR	25331	PtrMemberAccess	valnode -> val		25306	0					
ANR	25332	Identifier	valnode		25306	0					
ANR	25333	Identifier	val		25306	1					
ANR	25334	Identifier	d		25306	1					
ANR	25335	Identifier	estr		25306	1					
ANR	25336	Argument	"( uchar * ) ""fixedarray"""		25306	1					
ANR	25337	CastExpression	"( uchar * ) ""fixedarray"""		25306	0					
ANR	25338	CastTarget	uchar *		25306	0					
ANR	25339	PrimaryExpression	"""fixedarray"""		25306	1					
ANR	25340	Argument	10		25306	2					
ANR	25341	PrimaryExpression	10		25306	0					
ANR	25342	CompoundStatement		4:70:96:96	25306	1					
ANR	25343	ExpressionStatement	val -> val . d . n = QUEUETYPE_FIXED_ARRAY	775:2:19644:19680	25306	0	True				
ANR	25344	AssignmentExpression	val -> val . d . n = QUEUETYPE_FIXED_ARRAY		25306	0		=			
ANR	25345	MemberAccess	val -> val . d . n		25306	0					
ANR	25346	MemberAccess	val -> val . d		25306	0					
ANR	25347	PtrMemberAccess	val -> val		25306	0					
ANR	25348	Identifier	val		25306	0					
ANR	25349	Identifier	val		25306	1					
ANR	25350	Identifier	d		25306	1					
ANR	25351	Identifier	n		25306	1					
ANR	25352	Identifier	QUEUETYPE_FIXED_ARRAY		25306	1					
ANR	25353	ElseStatement	else		25306	0					
ANR	25354	IfStatement	"if ( ! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""linkedlist"" , 10 ) )"		25306	0					
ANR	25355	Condition	"! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""linkedlist"" , 10 )"	776:11:19693:19756	25306	0	True				
ANR	25356	UnaryOperationExpression	"! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""linkedlist"" , 10 )"		25306	0					
ANR	25357	UnaryOperator	!		25306	0					
ANR	25358	CallExpression	"es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""linkedlist"" , 10 )"		25306	1					
ANR	25359	Callee	es_strcasebufcmp		25306	0					
ANR	25360	Identifier	es_strcasebufcmp		25306	0					
ANR	25361	ArgumentList	valnode -> val . d . estr		25306	1					
ANR	25362	Argument	valnode -> val . d . estr		25306	0					
ANR	25363	MemberAccess	valnode -> val . d . estr		25306	0					
ANR	25364	MemberAccess	valnode -> val . d		25306	0					
ANR	25365	PtrMemberAccess	valnode -> val		25306	0					
ANR	25366	Identifier	valnode		25306	0					
ANR	25367	Identifier	val		25306	1					
ANR	25368	Identifier	d		25306	1					
ANR	25369	Identifier	estr		25306	1					
ANR	25370	Argument	"( uchar * ) ""linkedlist"""		25306	1					
ANR	25371	CastExpression	"( uchar * ) ""linkedlist"""		25306	0					
ANR	25372	CastTarget	uchar *		25306	0					
ANR	25373	PrimaryExpression	"""linkedlist"""		25306	1					
ANR	25374	Argument	10		25306	2					
ANR	25375	PrimaryExpression	10		25306	0					
ANR	25376	CompoundStatement		6:77:215:215	25306	1					
ANR	25377	ExpressionStatement	val -> val . d . n = QUEUETYPE_LINKEDLIST	777:2:19763:19798	25306	0	True				
ANR	25378	AssignmentExpression	val -> val . d . n = QUEUETYPE_LINKEDLIST		25306	0		=			
ANR	25379	MemberAccess	val -> val . d . n		25306	0					
ANR	25380	MemberAccess	val -> val . d		25306	0					
ANR	25381	PtrMemberAccess	val -> val		25306	0					
ANR	25382	Identifier	val		25306	0					
ANR	25383	Identifier	val		25306	1					
ANR	25384	Identifier	d		25306	1					
ANR	25385	Identifier	n		25306	1					
ANR	25386	Identifier	QUEUETYPE_LINKEDLIST		25306	1					
ANR	25387	ElseStatement	else		25306	0					
ANR	25388	IfStatement	"if ( ! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""disk"" , 4 ) )"		25306	0					
ANR	25389	Condition	"! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""disk"" , 4 )"	778:11:19811:19867	25306	0	True				
ANR	25390	UnaryOperationExpression	"! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""disk"" , 4 )"		25306	0					
ANR	25391	UnaryOperator	!		25306	0					
ANR	25392	CallExpression	"es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""disk"" , 4 )"		25306	1					
ANR	25393	Callee	es_strcasebufcmp		25306	0					
ANR	25394	Identifier	es_strcasebufcmp		25306	0					
ANR	25395	ArgumentList	valnode -> val . d . estr		25306	1					
ANR	25396	Argument	valnode -> val . d . estr		25306	0					
ANR	25397	MemberAccess	valnode -> val . d . estr		25306	0					
ANR	25398	MemberAccess	valnode -> val . d		25306	0					
ANR	25399	PtrMemberAccess	valnode -> val		25306	0					
ANR	25400	Identifier	valnode		25306	0					
ANR	25401	Identifier	val		25306	1					
ANR	25402	Identifier	d		25306	1					
ANR	25403	Identifier	estr		25306	1					
ANR	25404	Argument	"( uchar * ) ""disk"""		25306	1					
ANR	25405	CastExpression	"( uchar * ) ""disk"""		25306	0					
ANR	25406	CastTarget	uchar *		25306	0					
ANR	25407	PrimaryExpression	"""disk"""		25306	1					
ANR	25408	Argument	4		25306	2					
ANR	25409	PrimaryExpression	4		25306	0					
ANR	25410	CompoundStatement		8:70:326:326	25306	1					
ANR	25411	ExpressionStatement	val -> val . d . n = QUEUETYPE_DISK	779:2:19874:19903	25306	0	True				
ANR	25412	AssignmentExpression	val -> val . d . n = QUEUETYPE_DISK		25306	0		=			
ANR	25413	MemberAccess	val -> val . d . n		25306	0					
ANR	25414	MemberAccess	val -> val . d		25306	0					
ANR	25415	PtrMemberAccess	val -> val		25306	0					
ANR	25416	Identifier	val		25306	0					
ANR	25417	Identifier	val		25306	1					
ANR	25418	Identifier	d		25306	1					
ANR	25419	Identifier	n		25306	1					
ANR	25420	Identifier	QUEUETYPE_DISK		25306	1					
ANR	25421	ElseStatement	else		25306	0					
ANR	25422	IfStatement	"if ( ! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""direct"" , 6 ) )"		25306	0					
ANR	25423	Condition	"! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""direct"" , 6 )"	780:11:19916:19974	25306	0	True				
ANR	25424	UnaryOperationExpression	"! es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""direct"" , 6 )"		25306	0					
ANR	25425	UnaryOperator	!		25306	0					
ANR	25426	CallExpression	"es_strcasebufcmp ( valnode -> val . d . estr , ( uchar * ) ""direct"" , 6 )"		25306	1					
ANR	25427	Callee	es_strcasebufcmp		25306	0					
ANR	25428	Identifier	es_strcasebufcmp		25306	0					
ANR	25429	ArgumentList	valnode -> val . d . estr		25306	1					
ANR	25430	Argument	valnode -> val . d . estr		25306	0					
ANR	25431	MemberAccess	valnode -> val . d . estr		25306	0					
ANR	25432	MemberAccess	valnode -> val . d		25306	0					
ANR	25433	PtrMemberAccess	valnode -> val		25306	0					
ANR	25434	Identifier	valnode		25306	0					
ANR	25435	Identifier	val		25306	1					
ANR	25436	Identifier	d		25306	1					
ANR	25437	Identifier	estr		25306	1					
ANR	25438	Argument	"( uchar * ) ""direct"""		25306	1					
ANR	25439	CastExpression	"( uchar * ) ""direct"""		25306	0					
ANR	25440	CastTarget	uchar *		25306	0					
ANR	25441	PrimaryExpression	"""direct"""		25306	1					
ANR	25442	Argument	6		25306	2					
ANR	25443	PrimaryExpression	6		25306	0					
ANR	25444	CompoundStatement		10:72:433:433	25306	1					
ANR	25445	ExpressionStatement	val -> val . d . n = QUEUETYPE_DIRECT	781:2:19981:20012	25306	0	True				
ANR	25446	AssignmentExpression	val -> val . d . n = QUEUETYPE_DIRECT		25306	0		=			
ANR	25447	MemberAccess	val -> val . d . n		25306	0					
ANR	25448	MemberAccess	val -> val . d		25306	0					
ANR	25449	PtrMemberAccess	val -> val		25306	0					
ANR	25450	Identifier	val		25306	0					
ANR	25451	Identifier	val		25306	1					
ANR	25452	Identifier	d		25306	1					
ANR	25453	Identifier	n		25306	1					
ANR	25454	Identifier	QUEUETYPE_DIRECT		25306	1					
ANR	25455	ElseStatement	else		25306	0					
ANR	25456	CompoundStatement		12:8:478:478	25306	0					
ANR	25457	ExpressionStatement	"cstr = es_str2cstr ( valnode -> val . d . estr , NULL )"	783:2:20026:20071	25306	0	True				
ANR	25458	AssignmentExpression	"cstr = es_str2cstr ( valnode -> val . d . estr , NULL )"		25306	0		=			
ANR	25459	Identifier	cstr		25306	0					
ANR	25460	CallExpression	"es_str2cstr ( valnode -> val . d . estr , NULL )"		25306	1					
ANR	25461	Callee	es_str2cstr		25306	0					
ANR	25462	Identifier	es_str2cstr		25306	0					
ANR	25463	ArgumentList	valnode -> val . d . estr		25306	1					
ANR	25464	Argument	valnode -> val . d . estr		25306	0					
ANR	25465	MemberAccess	valnode -> val . d . estr		25306	0					
ANR	25466	MemberAccess	valnode -> val . d		25306	0					
ANR	25467	PtrMemberAccess	valnode -> val		25306	0					
ANR	25468	Identifier	valnode		25306	0					
ANR	25469	Identifier	val		25306	1					
ANR	25470	Identifier	d		25306	1					
ANR	25471	Identifier	estr		25306	1					
ANR	25472	Argument	NULL		25306	1					
ANR	25473	Identifier	NULL		25306	0					
ANR	25474	ExpressionStatement	"parser_errmsg ( ""param '%s': unknown queue type: '%s'"" , param -> name , cstr )"	784:2:20075:20156	25306	1	True				
ANR	25475	CallExpression	"parser_errmsg ( ""param '%s': unknown queue type: '%s'"" , param -> name , cstr )"		25306	0					
ANR	25476	Callee	parser_errmsg		25306	0					
ANR	25477	Identifier	parser_errmsg		25306	0					
ANR	25478	ArgumentList	"""param '%s': unknown queue type: '%s'"""		25306	1					
ANR	25479	Argument	"""param '%s': unknown queue type: '%s'"""		25306	0					
ANR	25480	PrimaryExpression	"""param '%s': unknown queue type: '%s'"""		25306	0					
ANR	25481	Argument	param -> name		25306	1					
ANR	25482	PtrMemberAccess	param -> name		25306	0					
ANR	25483	Identifier	param		25306	0					
ANR	25484	Identifier	name		25306	1					
ANR	25485	Argument	cstr		25306	2					
ANR	25486	Identifier	cstr		25306	0					
ANR	25487	ExpressionStatement	free ( cstr )	786:2:20160:20170	25306	2	True				
ANR	25488	CallExpression	free ( cstr )		25306	0					
ANR	25489	Callee	free		25306	0					
ANR	25490	Identifier	free		25306	0					
ANR	25491	ArgumentList	cstr		25306	1					
ANR	25492	Argument	cstr		25306	0					
ANR	25493	Identifier	cstr		25306	0					
ANR	25494	ExpressionStatement	r = 0	787:2:20174:20179	25306	3	True				
ANR	25495	AssignmentExpression	r = 0		25306	0		=			
ANR	25496	Identifier	r		25306	0					
ANR	25497	PrimaryExpression	0		25306	1					
ANR	25498	ExpressionStatement	val -> val . datatype = 'N'	789:1:20185:20208	25306	3	True				
ANR	25499	AssignmentExpression	val -> val . datatype = 'N'		25306	0		=			
ANR	25500	MemberAccess	val -> val . datatype		25306	0					
ANR	25501	PtrMemberAccess	val -> val		25306	0					
ANR	25502	Identifier	val		25306	0					
ANR	25503	Identifier	val		25306	1					
ANR	25504	Identifier	datatype		25306	1					
ANR	25505	PrimaryExpression	'N'		25306	1					
ANR	25506	ReturnStatement	return r ;	790:1:20211:20219	25306	4	True				
ANR	25507	Identifier	r		25306	0					
ANR	25508	ReturnType	static int		25306	1					
ANR	25509	Identifier	doGetQueueType		25306	2					
ANR	25510	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		25306	3					
ANR	25511	Parameter	struct nvlst * valnode	769:15:19462:19482	25306	0	True				
ANR	25512	ParameterType	struct nvlst *		25306	0					
ANR	25513	Identifier	valnode		25306	1					
ANR	25514	Parameter	struct cnfparamdescr * param	769:38:19485:19511	25306	1	True				
ANR	25515	ParameterType	struct cnfparamdescr *		25306	0					
ANR	25516	Identifier	param		25306	1					
ANR	25517	Parameter	struct cnfparamvals * val	770:3:19517:19540	25306	2	True				
ANR	25518	ParameterType	struct cnfparamvals *		25306	0					
ANR	25519	Identifier	val		25306	1					
ANR	25520	CFGEntryNode	ENTRY		25306		True				
ANR	25521	CFGExitNode	EXIT		25306		True				
ANR	25522	Symbol	val		25306						
ANR	25523	Symbol	cstr		25306						
ANR	25524	Symbol	QUEUETYPE_DISK		25306						
ANR	25525	Symbol	valnode -> val		25306						
ANR	25526	Symbol	val -> val		25306						
ANR	25527	Symbol	NULL		25306						
ANR	25528	Symbol	* valnode		25306						
ANR	25529	Symbol	valnode		25306						
ANR	25530	Symbol	es_strcasebufcmp		25306						
ANR	25531	Symbol	* val		25306						
ANR	25532	Symbol	QUEUETYPE_DIRECT		25306						
ANR	25533	Symbol	valnode -> val . d . estr		25306						
ANR	25534	Symbol	val -> val . datatype		25306						
ANR	25535	Symbol	es_str2cstr		25306						
ANR	25536	Symbol	* param		25306						
ANR	25537	Symbol	r		25306						
ANR	25538	Symbol	val -> val . d		25306						
ANR	25539	Symbol	val -> val . d . n		25306						
ANR	25540	Symbol	param		25306						
ANR	25541	Symbol	param -> name		25306						
ANR	25542	Symbol	QUEUETYPE_LINKEDLIST		25306						
ANR	25543	Symbol	valnode -> val . d		25306						
ANR	25544	Symbol	QUEUETYPE_FIXED_ARRAY		25306						
ANR	25545	Function	doGetFileCreateMode	797:0:20307:21079							
ANR	25546	FunctionDef	"doGetFileCreateMode (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		25545	0					
ANR	25547	CompoundStatement		800:0:20419:21079	25545	0					
ANR	25548	IdentifierDeclStatement	int fmtOK = 0 ;	801:1:20422:20435	25545	0	True				
ANR	25549	IdentifierDecl	fmtOK = 0		25545	0					
ANR	25550	IdentifierDeclType	int		25545	0					
ANR	25551	Identifier	fmtOK		25545	1					
ANR	25552	AssignmentExpression	fmtOK = 0		25545	2		=			
ANR	25553	Identifier	fmtOK		25545	0					
ANR	25554	PrimaryExpression	0		25545	1					
ANR	25555	IdentifierDeclStatement	char * cstr ;	802:1:20438:20448	25545	1	True				
ANR	25556	IdentifierDecl	* cstr		25545	0					
ANR	25557	IdentifierDeclType	char *		25545	0					
ANR	25558	Identifier	cstr		25545	1					
ANR	25559	IdentifierDeclStatement	uchar * c ;	803:1:20451:20459	25545	2	True				
ANR	25560	IdentifierDecl	* c		25545	0					
ANR	25561	IdentifierDeclType	uchar *		25545	0					
ANR	25562	Identifier	c		25545	1					
ANR	25563	IfStatement	if ( es_strlen ( valnode -> val . d . estr ) == 4 )		25545	3					
ANR	25564	Condition	es_strlen ( valnode -> val . d . estr ) == 4	805:4:20466:20500	25545	0	True				
ANR	25565	EqualityExpression	es_strlen ( valnode -> val . d . estr ) == 4		25545	0		==			
ANR	25566	CallExpression	es_strlen ( valnode -> val . d . estr )		25545	0					
ANR	25567	Callee	es_strlen		25545	0					
ANR	25568	Identifier	es_strlen		25545	0					
ANR	25569	ArgumentList	valnode -> val . d . estr		25545	1					
ANR	25570	Argument	valnode -> val . d . estr		25545	0					
ANR	25571	MemberAccess	valnode -> val . d . estr		25545	0					
ANR	25572	MemberAccess	valnode -> val . d		25545	0					
ANR	25573	PtrMemberAccess	valnode -> val		25545	0					
ANR	25574	Identifier	valnode		25545	0					
ANR	25575	Identifier	val		25545	1					
ANR	25576	Identifier	d		25545	1					
ANR	25577	Identifier	estr		25545	1					
ANR	25578	PrimaryExpression	4		25545	1					
ANR	25579	CompoundStatement		6:41:83:83	25545	1					
ANR	25580	ExpressionStatement	c = es_getBufAddr ( valnode -> val . d . estr )	806:2:20507:20545	25545	0	True				
ANR	25581	AssignmentExpression	c = es_getBufAddr ( valnode -> val . d . estr )		25545	0		=			
ANR	25582	Identifier	c		25545	0					
ANR	25583	CallExpression	es_getBufAddr ( valnode -> val . d . estr )		25545	1					
ANR	25584	Callee	es_getBufAddr		25545	0					
ANR	25585	Identifier	es_getBufAddr		25545	0					
ANR	25586	ArgumentList	valnode -> val . d . estr		25545	1					
ANR	25587	Argument	valnode -> val . d . estr		25545	0					
ANR	25588	MemberAccess	valnode -> val . d . estr		25545	0					
ANR	25589	MemberAccess	valnode -> val . d		25545	0					
ANR	25590	PtrMemberAccess	valnode -> val		25545	0					
ANR	25591	Identifier	valnode		25545	0					
ANR	25592	Identifier	val		25545	1					
ANR	25593	Identifier	d		25545	1					
ANR	25594	Identifier	estr		25545	1					
ANR	25595	IfStatement	if ( ( c [ 0 ] == '0' ) && ( c [ 1 ] >= '0' && c [ 1 ] <= '7' ) && ( c [ 2 ] >= '0' && c [ 2 ] <= '7' ) && ( c [ 3 ] >= '0' && c [ 3 ] <= '7' ) )		25545	1					
ANR	25596	Condition	( c [ 0 ] == '0' ) && ( c [ 1 ] >= '0' && c [ 1 ] <= '7' ) && ( c [ 2 ] >= '0' && c [ 2 ] <= '7' ) && ( c [ 3 ] >= '0' && c [ 3 ] <= '7' )	807:9:20556:20682	25545	0	True				
ANR	25597	AndExpression	( c [ 0 ] == '0' ) && ( c [ 1 ] >= '0' && c [ 1 ] <= '7' ) && ( c [ 2 ] >= '0' && c [ 2 ] <= '7' ) && ( c [ 3 ] >= '0' && c [ 3 ] <= '7' )		25545	0		&&			
ANR	25598	EqualityExpression	c [ 0 ] == '0'		25545	0		==			
ANR	25599	ArrayIndexing	c [ 0 ]		25545	0					
ANR	25600	Identifier	c		25545	0					
ANR	25601	PrimaryExpression	0		25545	1					
ANR	25602	PrimaryExpression	'0'		25545	1					
ANR	25603	AndExpression	( c [ 1 ] >= '0' && c [ 1 ] <= '7' ) && ( c [ 2 ] >= '0' && c [ 2 ] <= '7' ) && ( c [ 3 ] >= '0' && c [ 3 ] <= '7' )		25545	1		&&			
ANR	25604	AndExpression	c [ 1 ] >= '0' && c [ 1 ] <= '7'		25545	0		&&			
ANR	25605	RelationalExpression	c [ 1 ] >= '0'		25545	0		>=			
ANR	25606	ArrayIndexing	c [ 1 ]		25545	0					
ANR	25607	Identifier	c		25545	0					
ANR	25608	PrimaryExpression	1		25545	1					
ANR	25609	PrimaryExpression	'0'		25545	1					
ANR	25610	RelationalExpression	c [ 1 ] <= '7'		25545	1		<=			
ANR	25611	ArrayIndexing	c [ 1 ]		25545	0					
ANR	25612	Identifier	c		25545	0					
ANR	25613	PrimaryExpression	1		25545	1					
ANR	25614	PrimaryExpression	'7'		25545	1					
ANR	25615	AndExpression	( c [ 2 ] >= '0' && c [ 2 ] <= '7' ) && ( c [ 3 ] >= '0' && c [ 3 ] <= '7' )		25545	1		&&			
ANR	25616	AndExpression	c [ 2 ] >= '0' && c [ 2 ] <= '7'		25545	0		&&			
ANR	25617	RelationalExpression	c [ 2 ] >= '0'		25545	0		>=			
ANR	25618	ArrayIndexing	c [ 2 ]		25545	0					
ANR	25619	Identifier	c		25545	0					
ANR	25620	PrimaryExpression	2		25545	1					
ANR	25621	PrimaryExpression	'0'		25545	1					
ANR	25622	RelationalExpression	c [ 2 ] <= '7'		25545	1		<=			
ANR	25623	ArrayIndexing	c [ 2 ]		25545	0					
ANR	25624	Identifier	c		25545	0					
ANR	25625	PrimaryExpression	2		25545	1					
ANR	25626	PrimaryExpression	'7'		25545	1					
ANR	25627	AndExpression	c [ 3 ] >= '0' && c [ 3 ] <= '7'		25545	1		&&			
ANR	25628	RelationalExpression	c [ 3 ] >= '0'		25545	0		>=			
ANR	25629	ArrayIndexing	c [ 3 ]		25545	0					
ANR	25630	Identifier	c		25545	0					
ANR	25631	PrimaryExpression	3		25545	1					
ANR	25632	PrimaryExpression	'0'		25545	1					
ANR	25633	RelationalExpression	c [ 3 ] <= '7'		25545	1		<=			
ANR	25634	ArrayIndexing	c [ 3 ]		25545	0					
ANR	25635	Identifier	c		25545	0					
ANR	25636	PrimaryExpression	3		25545	1					
ANR	25637	PrimaryExpression	'7'		25545	1					
ANR	25638	CompoundStatement		11:42:268:268	25545	1					
ANR	25639	ExpressionStatement	fmtOK = 1	811:3:20693:20702	25545	0	True				
ANR	25640	AssignmentExpression	fmtOK = 1		25545	0		=			
ANR	25641	Identifier	fmtOK		25545	0					
ANR	25642	PrimaryExpression	1		25545	1					
ANR	25643	IfStatement	if ( fmtOK )		25545	4					
ANR	25644	Condition	fmtOK	815:4:20716:20720	25545	0	True				
ANR	25645	Identifier	fmtOK		25545	0					
ANR	25646	CompoundStatement		16:11:303:303	25545	1					
ANR	25647	ExpressionStatement	val -> val . datatype = 'N'	816:2:20727:20750	25545	0	True				
ANR	25648	AssignmentExpression	val -> val . datatype = 'N'		25545	0		=			
ANR	25649	MemberAccess	val -> val . datatype		25545	0					
ANR	25650	PtrMemberAccess	val -> val		25545	0					
ANR	25651	Identifier	val		25545	0					
ANR	25652	Identifier	val		25545	1					
ANR	25653	Identifier	datatype		25545	1					
ANR	25654	PrimaryExpression	'N'		25545	1					
ANR	25655	ExpressionStatement	val -> val . d . n = ( c [ 1 ] - '0' ) * 64 + ( c [ 2 ] - '0' ) * 8 + ( c [ 3 ] - '0' )	817:2:20754:20814	25545	1	True				
ANR	25656	AssignmentExpression	val -> val . d . n = ( c [ 1 ] - '0' ) * 64 + ( c [ 2 ] - '0' ) * 8 + ( c [ 3 ] - '0' )		25545	0		=			
ANR	25657	MemberAccess	val -> val . d . n		25545	0					
ANR	25658	MemberAccess	val -> val . d		25545	0					
ANR	25659	PtrMemberAccess	val -> val		25545	0					
ANR	25660	Identifier	val		25545	0					
ANR	25661	Identifier	val		25545	1					
ANR	25662	Identifier	d		25545	1					
ANR	25663	Identifier	n		25545	1					
ANR	25664	AdditiveExpression	( c [ 1 ] - '0' ) * 64 + ( c [ 2 ] - '0' ) * 8 + ( c [ 3 ] - '0' )		25545	1		+			
ANR	25665	MultiplicativeExpression	( c [ 1 ] - '0' ) * 64		25545	0		*			
ANR	25666	AdditiveExpression	c [ 1 ] - '0'		25545	0		-			
ANR	25667	ArrayIndexing	c [ 1 ]		25545	0					
ANR	25668	Identifier	c		25545	0					
ANR	25669	PrimaryExpression	1		25545	1					
ANR	25670	PrimaryExpression	'0'		25545	1					
ANR	25671	PrimaryExpression	64		25545	1					
ANR	25672	AdditiveExpression	( c [ 2 ] - '0' ) * 8 + ( c [ 3 ] - '0' )		25545	1		+			
ANR	25673	MultiplicativeExpression	( c [ 2 ] - '0' ) * 8		25545	0		*			
ANR	25674	AdditiveExpression	c [ 2 ] - '0'		25545	0		-			
ANR	25675	ArrayIndexing	c [ 2 ]		25545	0					
ANR	25676	Identifier	c		25545	0					
ANR	25677	PrimaryExpression	2		25545	1					
ANR	25678	PrimaryExpression	'0'		25545	1					
ANR	25679	PrimaryExpression	8		25545	1					
ANR	25680	AdditiveExpression	c [ 3 ] - '0'		25545	1		-			
ANR	25681	ArrayIndexing	c [ 3 ]		25545	0					
ANR	25682	Identifier	c		25545	0					
ANR	25683	PrimaryExpression	3		25545	1					
ANR	25684	PrimaryExpression	'0'		25545	1					
ANR	25685	ElseStatement	else		25545	0					
ANR	25686	CompoundStatement		19:8:404:404	25545	0					
ANR	25687	ExpressionStatement	"cstr = es_str2cstr ( valnode -> val . d . estr , NULL )"	819:2:20828:20873	25545	0	True				
ANR	25688	AssignmentExpression	"cstr = es_str2cstr ( valnode -> val . d . estr , NULL )"		25545	0		=			
ANR	25689	Identifier	cstr		25545	0					
ANR	25690	CallExpression	"es_str2cstr ( valnode -> val . d . estr , NULL )"		25545	1					
ANR	25691	Callee	es_str2cstr		25545	0					
ANR	25692	Identifier	es_str2cstr		25545	0					
ANR	25693	ArgumentList	valnode -> val . d . estr		25545	1					
ANR	25694	Argument	valnode -> val . d . estr		25545	0					
ANR	25695	MemberAccess	valnode -> val . d . estr		25545	0					
ANR	25696	MemberAccess	valnode -> val . d		25545	0					
ANR	25697	PtrMemberAccess	valnode -> val		25545	0					
ANR	25698	Identifier	valnode		25545	0					
ANR	25699	Identifier	val		25545	1					
ANR	25700	Identifier	d		25545	1					
ANR	25701	Identifier	estr		25545	1					
ANR	25702	Argument	NULL		25545	1					
ANR	25703	Identifier	NULL		25545	0					
ANR	25704	Statement	parser_errmsg	820:2:20877:20889	25545	1	True				
ANR	25705	Statement	(	820:15:20890:20890	25545	2	True				
ANR	25706	Statement	"""file modes need to be specified as """	820:16:20891:20927	25545	3	True				
ANR	25707	Statement	"""4-digit octal numbers starting with '0' -"""	821:4:20933:20975	25545	4	True				
ANR	25708	Statement	"""parameter '%s=\\""%s\\""' is not a file mode"""	822:4:20981:21022	25545	5	True				
ANR	25709	Statement	","	822:46:21023:21023	25545	6	True				
ANR	25710	Statement	param	823:2:21027:21031	25545	7	True				
ANR	25711	Statement	->	823:7:21032:21033	25545	8	True				
ANR	25712	Statement	name	823:9:21034:21037	25545	9	True				
ANR	25713	Statement	","	823:13:21038:21038	25545	10	True				
ANR	25714	Statement	cstr	823:15:21040:21043	25545	11	True				
ANR	25715	Statement	)	823:19:21044:21044	25545	12	True				
ANR	25716	ExpressionStatement		823:20:21045:21045	25545	13	True				
ANR	25717	ExpressionStatement	free ( cstr )	824:2:21049:21059	25545	14	True				
ANR	25718	CallExpression	free ( cstr )		25545	0					
ANR	25719	Callee	free		25545	0					
ANR	25720	Identifier	free		25545	0					
ANR	25721	ArgumentList	cstr		25545	1					
ANR	25722	Argument	cstr		25545	0					
ANR	25723	Identifier	cstr		25545	0					
ANR	25724	ReturnStatement	return fmtOK ;	826:1:21065:21077	25545	5	True				
ANR	25725	Identifier	fmtOK		25545	0					
ANR	25726	ReturnType	static int		25545	1					
ANR	25727	Identifier	doGetFileCreateMode		25545	2					
ANR	25728	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		25545	3					
ANR	25729	Parameter	struct nvlst * valnode	798:20:20338:20358	25545	0	True				
ANR	25730	ParameterType	struct nvlst *		25545	0					
ANR	25731	Identifier	valnode		25545	1					
ANR	25732	Parameter	struct cnfparamdescr * param	798:43:20361:20387	25545	1	True				
ANR	25733	ParameterType	struct cnfparamdescr *		25545	0					
ANR	25734	Identifier	param		25545	1					
ANR	25735	Parameter	struct cnfparamvals * val	799:3:20393:20416	25545	2	True				
ANR	25736	ParameterType	struct cnfparamvals *		25545	0					
ANR	25737	Identifier	val		25545	1					
ANR	25738	CFGEntryNode	ENTRY		25545		True				
ANR	25739	CFGExitNode	EXIT		25545		True				
ANR	25740	Symbol	val		25545						
ANR	25741	Symbol	cstr		25545						
ANR	25742	Symbol	c		25545						
ANR	25743	Symbol	valnode -> val		25545						
ANR	25744	Symbol	val -> val		25545						
ANR	25745	Symbol	NULL		25545						
ANR	25746	Symbol	* valnode		25545						
ANR	25747	Symbol	valnode		25545						
ANR	25748	Symbol	* val		25545						
ANR	25749	Symbol	valnode -> val . d . estr		25545						
ANR	25750	Symbol	* c		25545						
ANR	25751	Symbol	val -> val . datatype		25545						
ANR	25752	Symbol	es_getBufAddr		25545						
ANR	25753	Symbol	es_str2cstr		25545						
ANR	25754	Symbol	val -> val . d		25545						
ANR	25755	Symbol	val -> val . d . n		25545						
ANR	25756	Symbol	param		25545						
ANR	25757	Symbol	fmtOK		25545						
ANR	25758	Symbol	es_strlen		25545						
ANR	25759	Symbol	valnode -> val . d		25545						
ANR	25760	Function	doGetGID	829:0:21082:21792							
ANR	25761	FunctionDef	"doGetGID (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		25760	0					
ANR	25762	CompoundStatement		832:0:21183:21792	25760	0					
ANR	25763	IdentifierDeclStatement	char * cstr ;	833:1:21186:21196	25760	0	True				
ANR	25764	IdentifierDecl	* cstr		25760	0					
ANR	25765	IdentifierDeclType	char *		25760	0					
ANR	25766	Identifier	cstr		25760	1					
ANR	25767	IdentifierDeclStatement	int r ;	834:1:21199:21204	25760	1	True				
ANR	25768	IdentifierDecl	r		25760	0					
ANR	25769	IdentifierDeclType	int		25760	0					
ANR	25770	Identifier	r		25760	1					
ANR	25771	IdentifierDeclStatement	struct group * resultBuf ;	835:1:21207:21230	25760	2	True				
ANR	25772	IdentifierDecl	* resultBuf		25760	0					
ANR	25773	IdentifierDeclType	struct group *		25760	0					
ANR	25774	Identifier	resultBuf		25760	1					
ANR	25775	IdentifierDeclStatement	struct group wrkBuf ;	836:1:21233:21252	25760	3	True				
ANR	25776	IdentifierDecl	wrkBuf		25760	0					
ANR	25777	IdentifierDeclType	struct group		25760	0					
ANR	25778	Identifier	wrkBuf		25760	1					
ANR	25779	IdentifierDeclStatement	char stringBuf [ 2048 ] ;	837:1:21255:21275	25760	4	True				
ANR	25780	IdentifierDecl	stringBuf [ 2048 ]		25760	0					
ANR	25781	IdentifierDeclType	char [ 2048 ]		25760	0					
ANR	25782	Identifier	stringBuf		25760	1					
ANR	25783	PrimaryExpression	2048		25760	2					
ANR	25784	ExpressionStatement	"cstr = es_str2cstr ( valnode -> val . d . estr , NULL )"	839:1:21325:21370	25760	5	True				
ANR	25785	AssignmentExpression	"cstr = es_str2cstr ( valnode -> val . d . estr , NULL )"		25760	0		=			
ANR	25786	Identifier	cstr		25760	0					
ANR	25787	CallExpression	"es_str2cstr ( valnode -> val . d . estr , NULL )"		25760	1					
ANR	25788	Callee	es_str2cstr		25760	0					
ANR	25789	Identifier	es_str2cstr		25760	0					
ANR	25790	ArgumentList	valnode -> val . d . estr		25760	1					
ANR	25791	Argument	valnode -> val . d . estr		25760	0					
ANR	25792	MemberAccess	valnode -> val . d . estr		25760	0					
ANR	25793	MemberAccess	valnode -> val . d		25760	0					
ANR	25794	PtrMemberAccess	valnode -> val		25760	0					
ANR	25795	Identifier	valnode		25760	0					
ANR	25796	Identifier	val		25760	1					
ANR	25797	Identifier	d		25760	1					
ANR	25798	Identifier	estr		25760	1					
ANR	25799	Argument	NULL		25760	1					
ANR	25800	Identifier	NULL		25760	0					
ANR	25801	ExpressionStatement	"getgrnam_r ( cstr , & wrkBuf , stringBuf , sizeof ( stringBuf ) , & resultBuf )"	840:1:21373:21440	25760	6	True				
ANR	25802	CallExpression	"getgrnam_r ( cstr , & wrkBuf , stringBuf , sizeof ( stringBuf ) , & resultBuf )"		25760	0					
ANR	25803	Callee	getgrnam_r		25760	0					
ANR	25804	Identifier	getgrnam_r		25760	0					
ANR	25805	ArgumentList	cstr		25760	1					
ANR	25806	Argument	cstr		25760	0					
ANR	25807	Identifier	cstr		25760	0					
ANR	25808	Argument	& wrkBuf		25760	1					
ANR	25809	UnaryOperationExpression	& wrkBuf		25760	0					
ANR	25810	UnaryOperator	&		25760	0					
ANR	25811	Identifier	wrkBuf		25760	1					
ANR	25812	Argument	stringBuf		25760	2					
ANR	25813	Identifier	stringBuf		25760	0					
ANR	25814	Argument	sizeof ( stringBuf )		25760	3					
ANR	25815	SizeofExpression	sizeof ( stringBuf )		25760	0					
ANR	25816	Sizeof	sizeof		25760	0					
ANR	25817	SizeofOperand	stringBuf		25760	1					
ANR	25818	Argument	& resultBuf		25760	4					
ANR	25819	UnaryOperationExpression	& resultBuf		25760	0					
ANR	25820	UnaryOperator	&		25760	0					
ANR	25821	Identifier	resultBuf		25760	1					
ANR	25822	IfStatement	if ( resultBuf == NULL )		25760	7					
ANR	25823	Condition	resultBuf == NULL	841:4:21446:21462	25760	0	True				
ANR	25824	EqualityExpression	resultBuf == NULL		25760	0		==			
ANR	25825	Identifier	resultBuf		25760	0					
ANR	25826	Identifier	NULL		25760	1					
ANR	25827	CompoundStatement		10:23:281:281	25760	1					
ANR	25828	Statement	parser_errmsg	842:2:21469:21481	25760	0	True				
ANR	25829	Statement	(	842:15:21482:21482	25760	1	True				
ANR	25830	Statement	"""parameter '%s': ID for group %s could not """	842:16:21483:21526	25760	2	True				
ANR	25831	Statement	"""be found"""	843:4:21532:21541	25760	3	True				
ANR	25832	Statement	","	843:14:21542:21542	25760	4	True				
ANR	25833	Statement	param	843:16:21544:21548	25760	5	True				
ANR	25834	Statement	->	843:21:21549:21550	25760	6	True				
ANR	25835	Statement	name	843:23:21551:21554	25760	7	True				
ANR	25836	Statement	","	843:27:21555:21555	25760	8	True				
ANR	25837	Statement	cstr	843:29:21557:21560	25760	9	True				
ANR	25838	Statement	)	843:33:21561:21561	25760	10	True				
ANR	25839	ExpressionStatement		843:34:21562:21562	25760	11	True				
ANR	25840	ExpressionStatement	r = 0	844:2:21566:21571	25760	12	True				
ANR	25841	AssignmentExpression	r = 0		25760	0		=			
ANR	25842	Identifier	r		25760	0					
ANR	25843	PrimaryExpression	0		25760	1					
ANR	25844	ElseStatement	else		25760	0					
ANR	25845	CompoundStatement		14:8:397:397	25760	0					
ANR	25846	ExpressionStatement	val -> val . datatype = 'N'	846:2:21585:21608	25760	0	True				
ANR	25847	AssignmentExpression	val -> val . datatype = 'N'		25760	0		=			
ANR	25848	MemberAccess	val -> val . datatype		25760	0					
ANR	25849	PtrMemberAccess	val -> val		25760	0					
ANR	25850	Identifier	val		25760	0					
ANR	25851	Identifier	val		25760	1					
ANR	25852	Identifier	datatype		25760	1					
ANR	25853	PrimaryExpression	'N'		25760	1					
ANR	25854	ExpressionStatement	val -> val . d . n = resultBuf -> gr_gid	847:2:21612:21644	25760	1	True				
ANR	25855	AssignmentExpression	val -> val . d . n = resultBuf -> gr_gid		25760	0		=			
ANR	25856	MemberAccess	val -> val . d . n		25760	0					
ANR	25857	MemberAccess	val -> val . d		25760	0					
ANR	25858	PtrMemberAccess	val -> val		25760	0					
ANR	25859	Identifier	val		25760	0					
ANR	25860	Identifier	val		25760	1					
ANR	25861	Identifier	d		25760	1					
ANR	25862	Identifier	n		25760	1					
ANR	25863	PtrMemberAccess	resultBuf -> gr_gid		25760	1					
ANR	25864	Identifier	resultBuf		25760	0					
ANR	25865	Identifier	gr_gid		25760	1					
ANR	25866	ExpressionStatement	"DBGPRINTF ( ""param '%s': uid %d obtained for group '%s'\\n"" , param -> name , ( int ) resultBuf -> gr_gid , cstr )"	848:2:21648:21754	25760	2	True				
ANR	25867	CallExpression	"DBGPRINTF ( ""param '%s': uid %d obtained for group '%s'\\n"" , param -> name , ( int ) resultBuf -> gr_gid , cstr )"		25760	0					
ANR	25868	Callee	DBGPRINTF		25760	0					
ANR	25869	Identifier	DBGPRINTF		25760	0					
ANR	25870	ArgumentList	"""param '%s': uid %d obtained for group '%s'\\n"""		25760	1					
ANR	25871	Argument	"""param '%s': uid %d obtained for group '%s'\\n"""		25760	0					
ANR	25872	PrimaryExpression	"""param '%s': uid %d obtained for group '%s'\\n"""		25760	0					
ANR	25873	Argument	param -> name		25760	1					
ANR	25874	PtrMemberAccess	param -> name		25760	0					
ANR	25875	Identifier	param		25760	0					
ANR	25876	Identifier	name		25760	1					
ANR	25877	Argument	( int ) resultBuf -> gr_gid		25760	2					
ANR	25878	CastExpression	( int ) resultBuf -> gr_gid		25760	0					
ANR	25879	CastTarget	int		25760	0					
ANR	25880	PtrMemberAccess	resultBuf -> gr_gid		25760	1					
ANR	25881	Identifier	resultBuf		25760	0					
ANR	25882	Identifier	gr_gid		25760	1					
ANR	25883	Argument	cstr		25760	3					
ANR	25884	Identifier	cstr		25760	0					
ANR	25885	ExpressionStatement	r = 1	850:2:21758:21763	25760	3	True				
ANR	25886	AssignmentExpression	r = 1		25760	0		=			
ANR	25887	Identifier	r		25760	0					
ANR	25888	PrimaryExpression	1		25760	1					
ANR	25889	ExpressionStatement	free ( cstr )	852:1:21769:21779	25760	8	True				
ANR	25890	CallExpression	free ( cstr )		25760	0					
ANR	25891	Callee	free		25760	0					
ANR	25892	Identifier	free		25760	0					
ANR	25893	ArgumentList	cstr		25760	1					
ANR	25894	Argument	cstr		25760	0					
ANR	25895	Identifier	cstr		25760	0					
ANR	25896	ReturnStatement	return r ;	853:1:21782:21790	25760	9	True				
ANR	25897	Identifier	r		25760	0					
ANR	25898	ReturnType	static int		25760	1					
ANR	25899	Identifier	doGetGID		25760	2					
ANR	25900	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		25760	3					
ANR	25901	Parameter	struct nvlst * valnode	830:9:21102:21122	25760	0	True				
ANR	25902	ParameterType	struct nvlst *		25760	0					
ANR	25903	Identifier	valnode		25760	1					
ANR	25904	Parameter	struct cnfparamdescr * param	830:32:21125:21151	25760	1	True				
ANR	25905	ParameterType	struct cnfparamdescr *		25760	0					
ANR	25906	Identifier	param		25760	1					
ANR	25907	Parameter	struct cnfparamvals * val	831:3:21157:21180	25760	2	True				
ANR	25908	ParameterType	struct cnfparamvals *		25760	0					
ANR	25909	Identifier	val		25760	1					
ANR	25910	CFGEntryNode	ENTRY		25760		True				
ANR	25911	CFGExitNode	EXIT		25760		True				
ANR	25912	Symbol	cstr		25760						
ANR	25913	Symbol	valnode -> val		25760						
ANR	25914	Symbol	val -> val		25760						
ANR	25915	Symbol	* valnode		25760						
ANR	25916	Symbol	* val		25760						
ANR	25917	Symbol	valnode -> val . d . estr		25760						
ANR	25918	Symbol	es_str2cstr		25760						
ANR	25919	Symbol	val -> val . d		25760						
ANR	25920	Symbol	param		25760						
ANR	25921	Symbol	stringBuf		25760						
ANR	25922	Symbol	param -> name		25760						
ANR	25923	Symbol	valnode -> val . d		25760						
ANR	25924	Symbol	resultBuf		25760						
ANR	25925	Symbol	* resultBuf		25760						
ANR	25926	Symbol	val		25760						
ANR	25927	Symbol	& wrkBuf		25760						
ANR	25928	Symbol	NULL		25760						
ANR	25929	Symbol	valnode		25760						
ANR	25930	Symbol	wrkBuf		25760						
ANR	25931	Symbol	val -> val . datatype		25760						
ANR	25932	Symbol	* param		25760						
ANR	25933	Symbol	& resultBuf		25760						
ANR	25934	Symbol	r		25760						
ANR	25935	Symbol	val -> val . d . n		25760						
ANR	25936	Symbol	resultBuf -> gr_gid		25760						
ANR	25937	Function	doGetUID	856:0:21795:22505							
ANR	25938	FunctionDef	"doGetUID (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		25937	0					
ANR	25939	CompoundStatement		859:0:21896:22505	25937	0					
ANR	25940	IdentifierDeclStatement	char * cstr ;	860:1:21899:21909	25937	0	True				
ANR	25941	IdentifierDecl	* cstr		25937	0					
ANR	25942	IdentifierDeclType	char *		25937	0					
ANR	25943	Identifier	cstr		25937	1					
ANR	25944	IdentifierDeclStatement	int r ;	861:1:21912:21917	25937	1	True				
ANR	25945	IdentifierDecl	r		25937	0					
ANR	25946	IdentifierDeclType	int		25937	0					
ANR	25947	Identifier	r		25937	1					
ANR	25948	IdentifierDeclStatement	struct passwd * resultBuf ;	862:1:21920:21944	25937	2	True				
ANR	25949	IdentifierDecl	* resultBuf		25937	0					
ANR	25950	IdentifierDeclType	struct passwd *		25937	0					
ANR	25951	Identifier	resultBuf		25937	1					
ANR	25952	IdentifierDeclStatement	struct passwd wrkBuf ;	863:1:21947:21967	25937	3	True				
ANR	25953	IdentifierDecl	wrkBuf		25937	0					
ANR	25954	IdentifierDeclType	struct passwd		25937	0					
ANR	25955	Identifier	wrkBuf		25937	1					
ANR	25956	IdentifierDeclStatement	char stringBuf [ 2048 ] ;	864:1:21970:21990	25937	4	True				
ANR	25957	IdentifierDecl	stringBuf [ 2048 ]		25937	0					
ANR	25958	IdentifierDeclType	char [ 2048 ]		25937	0					
ANR	25959	Identifier	stringBuf		25937	1					
ANR	25960	PrimaryExpression	2048		25937	2					
ANR	25961	ExpressionStatement	"cstr = es_str2cstr ( valnode -> val . d . estr , NULL )"	866:1:22040:22085	25937	5	True				
ANR	25962	AssignmentExpression	"cstr = es_str2cstr ( valnode -> val . d . estr , NULL )"		25937	0		=			
ANR	25963	Identifier	cstr		25937	0					
ANR	25964	CallExpression	"es_str2cstr ( valnode -> val . d . estr , NULL )"		25937	1					
ANR	25965	Callee	es_str2cstr		25937	0					
ANR	25966	Identifier	es_str2cstr		25937	0					
ANR	25967	ArgumentList	valnode -> val . d . estr		25937	1					
ANR	25968	Argument	valnode -> val . d . estr		25937	0					
ANR	25969	MemberAccess	valnode -> val . d . estr		25937	0					
ANR	25970	MemberAccess	valnode -> val . d		25937	0					
ANR	25971	PtrMemberAccess	valnode -> val		25937	0					
ANR	25972	Identifier	valnode		25937	0					
ANR	25973	Identifier	val		25937	1					
ANR	25974	Identifier	d		25937	1					
ANR	25975	Identifier	estr		25937	1					
ANR	25976	Argument	NULL		25937	1					
ANR	25977	Identifier	NULL		25937	0					
ANR	25978	ExpressionStatement	"getpwnam_r ( cstr , & wrkBuf , stringBuf , sizeof ( stringBuf ) , & resultBuf )"	867:1:22088:22155	25937	6	True				
ANR	25979	CallExpression	"getpwnam_r ( cstr , & wrkBuf , stringBuf , sizeof ( stringBuf ) , & resultBuf )"		25937	0					
ANR	25980	Callee	getpwnam_r		25937	0					
ANR	25981	Identifier	getpwnam_r		25937	0					
ANR	25982	ArgumentList	cstr		25937	1					
ANR	25983	Argument	cstr		25937	0					
ANR	25984	Identifier	cstr		25937	0					
ANR	25985	Argument	& wrkBuf		25937	1					
ANR	25986	UnaryOperationExpression	& wrkBuf		25937	0					
ANR	25987	UnaryOperator	&		25937	0					
ANR	25988	Identifier	wrkBuf		25937	1					
ANR	25989	Argument	stringBuf		25937	2					
ANR	25990	Identifier	stringBuf		25937	0					
ANR	25991	Argument	sizeof ( stringBuf )		25937	3					
ANR	25992	SizeofExpression	sizeof ( stringBuf )		25937	0					
ANR	25993	Sizeof	sizeof		25937	0					
ANR	25994	SizeofOperand	stringBuf		25937	1					
ANR	25995	Argument	& resultBuf		25937	4					
ANR	25996	UnaryOperationExpression	& resultBuf		25937	0					
ANR	25997	UnaryOperator	&		25937	0					
ANR	25998	Identifier	resultBuf		25937	1					
ANR	25999	IfStatement	if ( resultBuf == NULL )		25937	7					
ANR	26000	Condition	resultBuf == NULL	868:4:22161:22177	25937	0	True				
ANR	26001	EqualityExpression	resultBuf == NULL		25937	0		==			
ANR	26002	Identifier	resultBuf		25937	0					
ANR	26003	Identifier	NULL		25937	1					
ANR	26004	CompoundStatement		10:23:283:283	25937	1					
ANR	26005	Statement	parser_errmsg	869:2:22184:22196	25937	0	True				
ANR	26006	Statement	(	869:15:22197:22197	25937	1	True				
ANR	26007	Statement	"""parameter '%s': ID for user %s could not """	869:16:22198:22240	25937	2	True				
ANR	26008	Statement	"""be found"""	870:4:22246:22255	25937	3	True				
ANR	26009	Statement	","	870:14:22256:22256	25937	4	True				
ANR	26010	Statement	param	870:16:22258:22262	25937	5	True				
ANR	26011	Statement	->	870:21:22263:22264	25937	6	True				
ANR	26012	Statement	name	870:23:22265:22268	25937	7	True				
ANR	26013	Statement	","	870:27:22269:22269	25937	8	True				
ANR	26014	Statement	cstr	870:29:22271:22274	25937	9	True				
ANR	26015	Statement	)	870:33:22275:22275	25937	10	True				
ANR	26016	ExpressionStatement		870:34:22276:22276	25937	11	True				
ANR	26017	ExpressionStatement	r = 0	871:2:22280:22285	25937	12	True				
ANR	26018	AssignmentExpression	r = 0		25937	0		=			
ANR	26019	Identifier	r		25937	0					
ANR	26020	PrimaryExpression	0		25937	1					
ANR	26021	ElseStatement	else		25937	0					
ANR	26022	CompoundStatement		14:8:398:398	25937	0					
ANR	26023	ExpressionStatement	val -> val . datatype = 'N'	873:2:22299:22322	25937	0	True				
ANR	26024	AssignmentExpression	val -> val . datatype = 'N'		25937	0		=			
ANR	26025	MemberAccess	val -> val . datatype		25937	0					
ANR	26026	PtrMemberAccess	val -> val		25937	0					
ANR	26027	Identifier	val		25937	0					
ANR	26028	Identifier	val		25937	1					
ANR	26029	Identifier	datatype		25937	1					
ANR	26030	PrimaryExpression	'N'		25937	1					
ANR	26031	ExpressionStatement	val -> val . d . n = resultBuf -> pw_uid	874:2:22326:22358	25937	1	True				
ANR	26032	AssignmentExpression	val -> val . d . n = resultBuf -> pw_uid		25937	0		=			
ANR	26033	MemberAccess	val -> val . d . n		25937	0					
ANR	26034	MemberAccess	val -> val . d		25937	0					
ANR	26035	PtrMemberAccess	val -> val		25937	0					
ANR	26036	Identifier	val		25937	0					
ANR	26037	Identifier	val		25937	1					
ANR	26038	Identifier	d		25937	1					
ANR	26039	Identifier	n		25937	1					
ANR	26040	PtrMemberAccess	resultBuf -> pw_uid		25937	1					
ANR	26041	Identifier	resultBuf		25937	0					
ANR	26042	Identifier	pw_uid		25937	1					
ANR	26043	ExpressionStatement	"DBGPRINTF ( ""param '%s': uid %d obtained for user '%s'\\n"" , param -> name , ( int ) resultBuf -> pw_uid , cstr )"	875:2:22362:22467	25937	2	True				
ANR	26044	CallExpression	"DBGPRINTF ( ""param '%s': uid %d obtained for user '%s'\\n"" , param -> name , ( int ) resultBuf -> pw_uid , cstr )"		25937	0					
ANR	26045	Callee	DBGPRINTF		25937	0					
ANR	26046	Identifier	DBGPRINTF		25937	0					
ANR	26047	ArgumentList	"""param '%s': uid %d obtained for user '%s'\\n"""		25937	1					
ANR	26048	Argument	"""param '%s': uid %d obtained for user '%s'\\n"""		25937	0					
ANR	26049	PrimaryExpression	"""param '%s': uid %d obtained for user '%s'\\n"""		25937	0					
ANR	26050	Argument	param -> name		25937	1					
ANR	26051	PtrMemberAccess	param -> name		25937	0					
ANR	26052	Identifier	param		25937	0					
ANR	26053	Identifier	name		25937	1					
ANR	26054	Argument	( int ) resultBuf -> pw_uid		25937	2					
ANR	26055	CastExpression	( int ) resultBuf -> pw_uid		25937	0					
ANR	26056	CastTarget	int		25937	0					
ANR	26057	PtrMemberAccess	resultBuf -> pw_uid		25937	1					
ANR	26058	Identifier	resultBuf		25937	0					
ANR	26059	Identifier	pw_uid		25937	1					
ANR	26060	Argument	cstr		25937	3					
ANR	26061	Identifier	cstr		25937	0					
ANR	26062	ExpressionStatement	r = 1	877:2:22471:22476	25937	3	True				
ANR	26063	AssignmentExpression	r = 1		25937	0		=			
ANR	26064	Identifier	r		25937	0					
ANR	26065	PrimaryExpression	1		25937	1					
ANR	26066	ExpressionStatement	free ( cstr )	879:1:22482:22492	25937	8	True				
ANR	26067	CallExpression	free ( cstr )		25937	0					
ANR	26068	Callee	free		25937	0					
ANR	26069	Identifier	free		25937	0					
ANR	26070	ArgumentList	cstr		25937	1					
ANR	26071	Argument	cstr		25937	0					
ANR	26072	Identifier	cstr		25937	0					
ANR	26073	ReturnStatement	return r ;	880:1:22495:22503	25937	9	True				
ANR	26074	Identifier	r		25937	0					
ANR	26075	ReturnType	static int		25937	1					
ANR	26076	Identifier	doGetUID		25937	2					
ANR	26077	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		25937	3					
ANR	26078	Parameter	struct nvlst * valnode	857:9:21815:21835	25937	0	True				
ANR	26079	ParameterType	struct nvlst *		25937	0					
ANR	26080	Identifier	valnode		25937	1					
ANR	26081	Parameter	struct cnfparamdescr * param	857:32:21838:21864	25937	1	True				
ANR	26082	ParameterType	struct cnfparamdescr *		25937	0					
ANR	26083	Identifier	param		25937	1					
ANR	26084	Parameter	struct cnfparamvals * val	858:3:21870:21893	25937	2	True				
ANR	26085	ParameterType	struct cnfparamvals *		25937	0					
ANR	26086	Identifier	val		25937	1					
ANR	26087	CFGEntryNode	ENTRY		25937		True				
ANR	26088	CFGExitNode	EXIT		25937		True				
ANR	26089	Symbol	cstr		25937						
ANR	26090	Symbol	valnode -> val		25937						
ANR	26091	Symbol	val -> val		25937						
ANR	26092	Symbol	* valnode		25937						
ANR	26093	Symbol	* val		25937						
ANR	26094	Symbol	valnode -> val . d . estr		25937						
ANR	26095	Symbol	es_str2cstr		25937						
ANR	26096	Symbol	val -> val . d		25937						
ANR	26097	Symbol	param		25937						
ANR	26098	Symbol	stringBuf		25937						
ANR	26099	Symbol	param -> name		25937						
ANR	26100	Symbol	valnode -> val . d		25937						
ANR	26101	Symbol	resultBuf		25937						
ANR	26102	Symbol	* resultBuf		25937						
ANR	26103	Symbol	val		25937						
ANR	26104	Symbol	& wrkBuf		25937						
ANR	26105	Symbol	NULL		25937						
ANR	26106	Symbol	valnode		25937						
ANR	26107	Symbol	wrkBuf		25937						
ANR	26108	Symbol	val -> val . datatype		25937						
ANR	26109	Symbol	* param		25937						
ANR	26110	Symbol	& resultBuf		25937						
ANR	26111	Symbol	resultBuf -> pw_uid		25937						
ANR	26112	Symbol	r		25937						
ANR	26113	Symbol	val -> val . d . n		25937						
ANR	26114	Function	doGetInt	886:0:22629:22969							
ANR	26115	FunctionDef	"doGetInt (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		26114	0					
ANR	26116	CompoundStatement		889:0:22730:22969	26114	0					
ANR	26117	IdentifierDeclStatement	long long n ;	890:1:22733:22744	26114	0	True				
ANR	26118	IdentifierDecl	n		26114	0					
ANR	26119	IdentifierDeclType	long long		26114	0					
ANR	26120	Identifier	n		26114	1					
ANR	26121	IdentifierDeclStatement	int bSuccess ;	891:1:22747:22759	26114	1	True				
ANR	26122	IdentifierDecl	bSuccess		26114	0					
ANR	26123	IdentifierDeclType	int		26114	0					
ANR	26124	Identifier	bSuccess		26114	1					
ANR	26125	ExpressionStatement	"n = es_str2num ( valnode -> val . d . estr , & bSuccess )"	893:1:22763:22809	26114	2	True				
ANR	26126	AssignmentExpression	"n = es_str2num ( valnode -> val . d . estr , & bSuccess )"		26114	0		=			
ANR	26127	Identifier	n		26114	0					
ANR	26128	CallExpression	"es_str2num ( valnode -> val . d . estr , & bSuccess )"		26114	1					
ANR	26129	Callee	es_str2num		26114	0					
ANR	26130	Identifier	es_str2num		26114	0					
ANR	26131	ArgumentList	valnode -> val . d . estr		26114	1					
ANR	26132	Argument	valnode -> val . d . estr		26114	0					
ANR	26133	MemberAccess	valnode -> val . d . estr		26114	0					
ANR	26134	MemberAccess	valnode -> val . d		26114	0					
ANR	26135	PtrMemberAccess	valnode -> val		26114	0					
ANR	26136	Identifier	valnode		26114	0					
ANR	26137	Identifier	val		26114	1					
ANR	26138	Identifier	d		26114	1					
ANR	26139	Identifier	estr		26114	1					
ANR	26140	Argument	& bSuccess		26114	1					
ANR	26141	UnaryOperationExpression	& bSuccess		26114	0					
ANR	26142	UnaryOperator	&		26114	0					
ANR	26143	Identifier	bSuccess		26114	1					
ANR	26144	IfStatement	if ( ! bSuccess )		26114	3					
ANR	26145	Condition	! bSuccess	894:4:22815:22823	26114	0	True				
ANR	26146	UnaryOperationExpression	! bSuccess		26114	0					
ANR	26147	UnaryOperator	!		26114	0					
ANR	26148	Identifier	bSuccess		26114	1					
ANR	26149	CompoundStatement		6:15:95:95	26114	1					
ANR	26150	ExpressionStatement	"parser_errmsg ( ""parameter '%s' is not a proper number"" , param -> name )"	895:2:22830:22901	26114	0	True				
ANR	26151	CallExpression	"parser_errmsg ( ""parameter '%s' is not a proper number"" , param -> name )"		26114	0					
ANR	26152	Callee	parser_errmsg		26114	0					
ANR	26153	Identifier	parser_errmsg		26114	0					
ANR	26154	ArgumentList	"""parameter '%s' is not a proper number"""		26114	1					
ANR	26155	Argument	"""parameter '%s' is not a proper number"""		26114	0					
ANR	26156	PrimaryExpression	"""parameter '%s' is not a proper number"""		26114	0					
ANR	26157	Argument	param -> name		26114	1					
ANR	26158	PtrMemberAccess	param -> name		26114	0					
ANR	26159	Identifier	param		26114	0					
ANR	26160	Identifier	name		26114	1					
ANR	26161	ExpressionStatement	val -> val . datatype = 'N'	898:1:22907:22930	26114	4	True				
ANR	26162	AssignmentExpression	val -> val . datatype = 'N'		26114	0		=			
ANR	26163	MemberAccess	val -> val . datatype		26114	0					
ANR	26164	PtrMemberAccess	val -> val		26114	0					
ANR	26165	Identifier	val		26114	0					
ANR	26166	Identifier	val		26114	1					
ANR	26167	Identifier	datatype		26114	1					
ANR	26168	PrimaryExpression	'N'		26114	1					
ANR	26169	ExpressionStatement	val -> val . d . n = n	899:1:22933:22949	26114	5	True				
ANR	26170	AssignmentExpression	val -> val . d . n = n		26114	0		=			
ANR	26171	MemberAccess	val -> val . d . n		26114	0					
ANR	26172	MemberAccess	val -> val . d		26114	0					
ANR	26173	PtrMemberAccess	val -> val		26114	0					
ANR	26174	Identifier	val		26114	0					
ANR	26175	Identifier	val		26114	1					
ANR	26176	Identifier	d		26114	1					
ANR	26177	Identifier	n		26114	1					
ANR	26178	Identifier	n		26114	1					
ANR	26179	ReturnStatement	return bSuccess ;	900:1:22952:22967	26114	6	True				
ANR	26180	Identifier	bSuccess		26114	0					
ANR	26181	ReturnType	static int		26114	1					
ANR	26182	Identifier	doGetInt		26114	2					
ANR	26183	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		26114	3					
ANR	26184	Parameter	struct nvlst * valnode	887:9:22649:22669	26114	0	True				
ANR	26185	ParameterType	struct nvlst *		26114	0					
ANR	26186	Identifier	valnode		26114	1					
ANR	26187	Parameter	struct cnfparamdescr * param	887:32:22672:22698	26114	1	True				
ANR	26188	ParameterType	struct cnfparamdescr *		26114	0					
ANR	26189	Identifier	param		26114	1					
ANR	26190	Parameter	struct cnfparamvals * val	888:3:22704:22727	26114	2	True				
ANR	26191	ParameterType	struct cnfparamvals *		26114	0					
ANR	26192	Identifier	val		26114	1					
ANR	26193	CFGEntryNode	ENTRY		26114		True				
ANR	26194	CFGExitNode	EXIT		26114		True				
ANR	26195	Symbol	val		26114						
ANR	26196	Symbol	bSuccess		26114						
ANR	26197	Symbol	valnode -> val		26114						
ANR	26198	Symbol	val -> val		26114						
ANR	26199	Symbol	* valnode		26114						
ANR	26200	Symbol	valnode		26114						
ANR	26201	Symbol	* val		26114						
ANR	26202	Symbol	valnode -> val . d . estr		26114						
ANR	26203	Symbol	val -> val . datatype		26114						
ANR	26204	Symbol	n		26114						
ANR	26205	Symbol	& bSuccess		26114						
ANR	26206	Symbol	* param		26114						
ANR	26207	Symbol	es_str2num		26114						
ANR	26208	Symbol	val -> val . d		26114						
ANR	26209	Symbol	val -> val . d . n		26114						
ANR	26210	Symbol	param		26114						
ANR	26211	Symbol	param -> name		26114						
ANR	26212	Symbol	valnode -> val . d		26114						
ANR	26213	Function	doGetNonNegInt	903:0:22972:23318							
ANR	26214	FunctionDef	"doGetNonNegInt (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		26213	0					
ANR	26215	CompoundStatement		906:0:23079:23318	26213	0					
ANR	26216	IdentifierDeclStatement	int bSuccess ;	907:1:23082:23094	26213	0	True				
ANR	26217	IdentifierDecl	bSuccess		26213	0					
ANR	26218	IdentifierDeclType	int		26213	0					
ANR	26219	Identifier	bSuccess		26213	1					
ANR	26220	IfStatement	"if ( ( bSuccess = doGetInt ( valnode , param , val ) ) )"		26213	1					
ANR	26221	Condition	"bSuccess = doGetInt ( valnode , param , val )"	909:4:23101:23142	26213	0	True				
ANR	26222	AssignmentExpression	"bSuccess = doGetInt ( valnode , param , val )"		26213	0		=			
ANR	26223	Identifier	bSuccess		26213	0					
ANR	26224	CallExpression	"doGetInt ( valnode , param , val )"		26213	1					
ANR	26225	Callee	doGetInt		26213	0					
ANR	26226	Identifier	doGetInt		26213	0					
ANR	26227	ArgumentList	valnode		26213	1					
ANR	26228	Argument	valnode		26213	0					
ANR	26229	Identifier	valnode		26213	0					
ANR	26230	Argument	param		26213	1					
ANR	26231	Identifier	param		26213	0					
ANR	26232	Argument	val		26213	2					
ANR	26233	Identifier	val		26213	0					
ANR	26234	CompoundStatement		4:48:65:65	26213	1					
ANR	26235	IfStatement	if ( val -> val . d . n < 0 )		26213	0					
ANR	26236	Condition	val -> val . d . n < 0	910:5:23152:23167	26213	0	True				
ANR	26237	RelationalExpression	val -> val . d . n < 0		26213	0		<			
ANR	26238	MemberAccess	val -> val . d . n		26213	0					
ANR	26239	MemberAccess	val -> val . d		26213	0					
ANR	26240	PtrMemberAccess	val -> val		26213	0					
ANR	26241	Identifier	val		26213	0					
ANR	26242	Identifier	val		26213	1					
ANR	26243	Identifier	d		26213	1					
ANR	26244	Identifier	n		26213	1					
ANR	26245	PrimaryExpression	0		26213	1					
ANR	26246	CompoundStatement		5:23:90:90	26213	1					
ANR	26247	ExpressionStatement	"parser_errmsg ( ""parameter '%s' cannot be less than zero (was %lld)"" , param -> name , val -> val . d . n )"	911:3:23175:23274	26213	0	True				
ANR	26248	CallExpression	"parser_errmsg ( ""parameter '%s' cannot be less than zero (was %lld)"" , param -> name , val -> val . d . n )"		26213	0					
ANR	26249	Callee	parser_errmsg		26213	0					
ANR	26250	Identifier	parser_errmsg		26213	0					
ANR	26251	ArgumentList	"""parameter '%s' cannot be less than zero (was %lld)"""		26213	1					
ANR	26252	Argument	"""parameter '%s' cannot be less than zero (was %lld)"""		26213	0					
ANR	26253	PrimaryExpression	"""parameter '%s' cannot be less than zero (was %lld)"""		26213	0					
ANR	26254	Argument	param -> name		26213	1					
ANR	26255	PtrMemberAccess	param -> name		26213	0					
ANR	26256	Identifier	param		26213	0					
ANR	26257	Identifier	name		26213	1					
ANR	26258	Argument	val -> val . d . n		26213	2					
ANR	26259	MemberAccess	val -> val . d . n		26213	0					
ANR	26260	MemberAccess	val -> val . d		26213	0					
ANR	26261	PtrMemberAccess	val -> val		26213	0					
ANR	26262	Identifier	val		26213	0					
ANR	26263	Identifier	val		26213	1					
ANR	26264	Identifier	d		26213	1					
ANR	26265	Identifier	n		26213	1					
ANR	26266	ExpressionStatement	bSuccess = 0	913:3:23279:23291	26213	1	True				
ANR	26267	AssignmentExpression	bSuccess = 0		26213	0		=			
ANR	26268	Identifier	bSuccess		26213	0					
ANR	26269	PrimaryExpression	0		26213	1					
ANR	26270	ReturnStatement	return bSuccess ;	916:1:23301:23316	26213	2	True				
ANR	26271	Identifier	bSuccess		26213	0					
ANR	26272	ReturnType	static int		26213	1					
ANR	26273	Identifier	doGetNonNegInt		26213	2					
ANR	26274	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		26213	3					
ANR	26275	Parameter	struct nvlst * valnode	904:15:22998:23018	26213	0	True				
ANR	26276	ParameterType	struct nvlst *		26213	0					
ANR	26277	Identifier	valnode		26213	1					
ANR	26278	Parameter	struct cnfparamdescr * param	904:38:23021:23047	26213	1	True				
ANR	26279	ParameterType	struct cnfparamdescr *		26213	0					
ANR	26280	Identifier	param		26213	1					
ANR	26281	Parameter	struct cnfparamvals * val	905:3:23053:23076	26213	2	True				
ANR	26282	ParameterType	struct cnfparamvals *		26213	0					
ANR	26283	Identifier	val		26213	1					
ANR	26284	CFGEntryNode	ENTRY		26213		True				
ANR	26285	CFGExitNode	EXIT		26213		True				
ANR	26286	Symbol	val		26213						
ANR	26287	Symbol	bSuccess		26213						
ANR	26288	Symbol	doGetInt		26213						
ANR	26289	Symbol	val -> val		26213						
ANR	26290	Symbol	val -> val . d		26213						
ANR	26291	Symbol	val -> val . d . n		26213						
ANR	26292	Symbol	param		26213						
ANR	26293	Symbol	param -> name		26213						
ANR	26294	Symbol	valnode		26213						
ANR	26295	Symbol	* val		26213						
ANR	26296	Symbol	* param		26213						
ANR	26297	Function	doGetPositiveInt	919:0:23321:23668							
ANR	26298	FunctionDef	"doGetPositiveInt (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		26297	0					
ANR	26299	CompoundStatement		922:0:23430:23668	26297	0					
ANR	26300	IdentifierDeclStatement	int bSuccess ;	923:1:23433:23445	26297	0	True				
ANR	26301	IdentifierDecl	bSuccess		26297	0					
ANR	26302	IdentifierDeclType	int		26297	0					
ANR	26303	Identifier	bSuccess		26297	1					
ANR	26304	IfStatement	"if ( ( bSuccess = doGetInt ( valnode , param , val ) ) )"		26297	1					
ANR	26305	Condition	"bSuccess = doGetInt ( valnode , param , val )"	925:4:23452:23493	26297	0	True				
ANR	26306	AssignmentExpression	"bSuccess = doGetInt ( valnode , param , val )"		26297	0		=			
ANR	26307	Identifier	bSuccess		26297	0					
ANR	26308	CallExpression	"doGetInt ( valnode , param , val )"		26297	1					
ANR	26309	Callee	doGetInt		26297	0					
ANR	26310	Identifier	doGetInt		26297	0					
ANR	26311	ArgumentList	valnode		26297	1					
ANR	26312	Argument	valnode		26297	0					
ANR	26313	Identifier	valnode		26297	0					
ANR	26314	Argument	param		26297	1					
ANR	26315	Identifier	param		26297	0					
ANR	26316	Argument	val		26297	2					
ANR	26317	Identifier	val		26297	0					
ANR	26318	CompoundStatement		4:48:65:65	26297	1					
ANR	26319	IfStatement	if ( val -> val . d . n < 1 )		26297	0					
ANR	26320	Condition	val -> val . d . n < 1	926:5:23503:23518	26297	0	True				
ANR	26321	RelationalExpression	val -> val . d . n < 1		26297	0		<			
ANR	26322	MemberAccess	val -> val . d . n		26297	0					
ANR	26323	MemberAccess	val -> val . d		26297	0					
ANR	26324	PtrMemberAccess	val -> val		26297	0					
ANR	26325	Identifier	val		26297	0					
ANR	26326	Identifier	val		26297	1					
ANR	26327	Identifier	d		26297	1					
ANR	26328	Identifier	n		26297	1					
ANR	26329	PrimaryExpression	1		26297	1					
ANR	26330	CompoundStatement		5:23:90:90	26297	1					
ANR	26331	ExpressionStatement	"parser_errmsg ( ""parameter '%s' cannot be less than one (was %lld)"" , param -> name , val -> val . d . n )"	927:3:23526:23624	26297	0	True				
ANR	26332	CallExpression	"parser_errmsg ( ""parameter '%s' cannot be less than one (was %lld)"" , param -> name , val -> val . d . n )"		26297	0					
ANR	26333	Callee	parser_errmsg		26297	0					
ANR	26334	Identifier	parser_errmsg		26297	0					
ANR	26335	ArgumentList	"""parameter '%s' cannot be less than one (was %lld)"""		26297	1					
ANR	26336	Argument	"""parameter '%s' cannot be less than one (was %lld)"""		26297	0					
ANR	26337	PrimaryExpression	"""parameter '%s' cannot be less than one (was %lld)"""		26297	0					
ANR	26338	Argument	param -> name		26297	1					
ANR	26339	PtrMemberAccess	param -> name		26297	0					
ANR	26340	Identifier	param		26297	0					
ANR	26341	Identifier	name		26297	1					
ANR	26342	Argument	val -> val . d . n		26297	2					
ANR	26343	MemberAccess	val -> val . d . n		26297	0					
ANR	26344	MemberAccess	val -> val . d		26297	0					
ANR	26345	PtrMemberAccess	val -> val		26297	0					
ANR	26346	Identifier	val		26297	0					
ANR	26347	Identifier	val		26297	1					
ANR	26348	Identifier	d		26297	1					
ANR	26349	Identifier	n		26297	1					
ANR	26350	ExpressionStatement	bSuccess = 0	929:3:23629:23641	26297	1	True				
ANR	26351	AssignmentExpression	bSuccess = 0		26297	0		=			
ANR	26352	Identifier	bSuccess		26297	0					
ANR	26353	PrimaryExpression	0		26297	1					
ANR	26354	ReturnStatement	return bSuccess ;	932:1:23651:23666	26297	2	True				
ANR	26355	Identifier	bSuccess		26297	0					
ANR	26356	ReturnType	static int		26297	1					
ANR	26357	Identifier	doGetPositiveInt		26297	2					
ANR	26358	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		26297	3					
ANR	26359	Parameter	struct nvlst * valnode	920:17:23349:23369	26297	0	True				
ANR	26360	ParameterType	struct nvlst *		26297	0					
ANR	26361	Identifier	valnode		26297	1					
ANR	26362	Parameter	struct cnfparamdescr * param	920:40:23372:23398	26297	1	True				
ANR	26363	ParameterType	struct cnfparamdescr *		26297	0					
ANR	26364	Identifier	param		26297	1					
ANR	26365	Parameter	struct cnfparamvals * val	921:3:23404:23427	26297	2	True				
ANR	26366	ParameterType	struct cnfparamvals *		26297	0					
ANR	26367	Identifier	val		26297	1					
ANR	26368	CFGEntryNode	ENTRY		26297		True				
ANR	26369	CFGExitNode	EXIT		26297		True				
ANR	26370	Symbol	val		26297						
ANR	26371	Symbol	bSuccess		26297						
ANR	26372	Symbol	doGetInt		26297						
ANR	26373	Symbol	val -> val . d		26297						
ANR	26374	Symbol	val -> val		26297						
ANR	26375	Symbol	val -> val . d . n		26297						
ANR	26376	Symbol	param		26297						
ANR	26377	Symbol	param -> name		26297						
ANR	26378	Symbol	valnode		26297						
ANR	26379	Symbol	* val		26297						
ANR	26380	Symbol	* param		26297						
ANR	26381	Function	doGetWord	935:0:23671:24207							
ANR	26382	FunctionDef	"doGetWord (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		26381	0					
ANR	26383	CompoundStatement		938:0:23773:24207	26381	0					
ANR	26384	IdentifierDeclStatement	es_size_t i ;	939:1:23776:23787	26381	0	True				
ANR	26385	IdentifierDecl	i		26381	0					
ANR	26386	IdentifierDeclType	es_size_t		26381	0					
ANR	26387	Identifier	i		26381	1					
ANR	26388	IdentifierDeclStatement	int r = 1 ;	940:1:23790:23799	26381	1	True				
ANR	26389	IdentifierDecl	r = 1		26381	0					
ANR	26390	IdentifierDeclType	int		26381	0					
ANR	26391	Identifier	r		26381	1					
ANR	26392	AssignmentExpression	r = 1		26381	2		=			
ANR	26393	Identifier	r		26381	0					
ANR	26394	PrimaryExpression	1		26381	1					
ANR	26395	IdentifierDeclStatement	unsigned char * c ;	941:1:23802:23818	26381	2	True				
ANR	26396	IdentifierDecl	* c		26381	0					
ANR	26397	IdentifierDeclType	unsigned char *		26381	0					
ANR	26398	Identifier	c		26381	1					
ANR	26399	ExpressionStatement	val -> val . datatype = 'S'	943:1:23822:23845	26381	3	True				
ANR	26400	AssignmentExpression	val -> val . datatype = 'S'		26381	0		=			
ANR	26401	MemberAccess	val -> val . datatype		26381	0					
ANR	26402	PtrMemberAccess	val -> val		26381	0					
ANR	26403	Identifier	val		26381	0					
ANR	26404	Identifier	val		26381	1					
ANR	26405	Identifier	datatype		26381	1					
ANR	26406	PrimaryExpression	'S'		26381	1					
ANR	26407	ExpressionStatement	val -> val . d . estr = es_newStr ( 32 )	944:1:23848:23879	26381	4	True				
ANR	26408	AssignmentExpression	val -> val . d . estr = es_newStr ( 32 )		26381	0		=			
ANR	26409	MemberAccess	val -> val . d . estr		26381	0					
ANR	26410	MemberAccess	val -> val . d		26381	0					
ANR	26411	PtrMemberAccess	val -> val		26381	0					
ANR	26412	Identifier	val		26381	0					
ANR	26413	Identifier	val		26381	1					
ANR	26414	Identifier	d		26381	1					
ANR	26415	Identifier	estr		26381	1					
ANR	26416	CallExpression	es_newStr ( 32 )		26381	1					
ANR	26417	Callee	es_newStr		26381	0					
ANR	26418	Identifier	es_newStr		26381	0					
ANR	26419	ArgumentList	32		26381	1					
ANR	26420	Argument	32		26381	0					
ANR	26421	PrimaryExpression	32		26381	0					
ANR	26422	ExpressionStatement	c = es_getBufAddr ( valnode -> val . d . estr )	945:1:23882:23920	26381	5	True				
ANR	26423	AssignmentExpression	c = es_getBufAddr ( valnode -> val . d . estr )		26381	0		=			
ANR	26424	Identifier	c		26381	0					
ANR	26425	CallExpression	es_getBufAddr ( valnode -> val . d . estr )		26381	1					
ANR	26426	Callee	es_getBufAddr		26381	0					
ANR	26427	Identifier	es_getBufAddr		26381	0					
ANR	26428	ArgumentList	valnode -> val . d . estr		26381	1					
ANR	26429	Argument	valnode -> val . d . estr		26381	0					
ANR	26430	MemberAccess	valnode -> val . d . estr		26381	0					
ANR	26431	MemberAccess	valnode -> val . d		26381	0					
ANR	26432	PtrMemberAccess	valnode -> val		26381	0					
ANR	26433	Identifier	valnode		26381	0					
ANR	26434	Identifier	val		26381	1					
ANR	26435	Identifier	d		26381	1					
ANR	26436	Identifier	estr		26381	1					
ANR	26437	ForStatement	for ( i = 0 ; i < es_strlen ( valnode -> val . d . estr ) && ! isspace ( c [ i ] ) ; ++ i )		26381	6					
ANR	26438	ForInit	i = 0 ;	946:5:23927:23933	26381	0	True				
ANR	26439	AssignmentExpression	i = 0		26381	0		=			
ANR	26440	Identifier	i		26381	0					
ANR	26441	PrimaryExpression	0		26381	1					
ANR	26442	Condition	i < es_strlen ( valnode -> val . d . estr ) && ! isspace ( c [ i ] )	946:13:23935:23986	26381	1	True				
ANR	26443	AndExpression	i < es_strlen ( valnode -> val . d . estr ) && ! isspace ( c [ i ] )		26381	0		&&			
ANR	26444	RelationalExpression	i < es_strlen ( valnode -> val . d . estr )		26381	0		<			
ANR	26445	Identifier	i		26381	0					
ANR	26446	CallExpression	es_strlen ( valnode -> val . d . estr )		26381	1					
ANR	26447	Callee	es_strlen		26381	0					
ANR	26448	Identifier	es_strlen		26381	0					
ANR	26449	ArgumentList	valnode -> val . d . estr		26381	1					
ANR	26450	Argument	valnode -> val . d . estr		26381	0					
ANR	26451	MemberAccess	valnode -> val . d . estr		26381	0					
ANR	26452	MemberAccess	valnode -> val . d		26381	0					
ANR	26453	PtrMemberAccess	valnode -> val		26381	0					
ANR	26454	Identifier	valnode		26381	0					
ANR	26455	Identifier	val		26381	1					
ANR	26456	Identifier	d		26381	1					
ANR	26457	Identifier	estr		26381	1					
ANR	26458	UnaryOperationExpression	! isspace ( c [ i ] )		26381	1					
ANR	26459	UnaryOperator	!		26381	0					
ANR	26460	CallExpression	isspace ( c [ i ] )		26381	1					
ANR	26461	Callee	isspace		26381	0					
ANR	26462	Identifier	isspace		26381	0					
ANR	26463	ArgumentList	c [ i ]		26381	1					
ANR	26464	Argument	c [ i ]		26381	0					
ANR	26465	ArrayIndexing	c [ i ]		26381	0					
ANR	26466	Identifier	c		26381	0					
ANR	26467	Identifier	i		26381	1					
ANR	26468	UnaryExpression	++ i	946:68:23990:23992	26381	2	True				
ANR	26469	IncDec	++		26381	0					
ANR	26470	Identifier	i		26381	1					
ANR	26471	CompoundStatement		9:73:221:221	26381	3					
ANR	26472	ExpressionStatement	"es_addChar ( & val -> val . d . estr , c [ i ] )"	947:2:23999:24033	26381	0	True				
ANR	26473	CallExpression	"es_addChar ( & val -> val . d . estr , c [ i ] )"		26381	0					
ANR	26474	Callee	es_addChar		26381	0					
ANR	26475	Identifier	es_addChar		26381	0					
ANR	26476	ArgumentList	& val -> val . d . estr		26381	1					
ANR	26477	Argument	& val -> val . d . estr		26381	0					
ANR	26478	UnaryOperationExpression	& val -> val . d . estr		26381	0					
ANR	26479	UnaryOperator	&		26381	0					
ANR	26480	MemberAccess	val -> val . d . estr		26381	1					
ANR	26481	MemberAccess	val -> val . d		26381	0					
ANR	26482	PtrMemberAccess	val -> val		26381	0					
ANR	26483	Identifier	val		26381	0					
ANR	26484	Identifier	val		26381	1					
ANR	26485	Identifier	d		26381	1					
ANR	26486	Identifier	estr		26381	1					
ANR	26487	Argument	c [ i ]		26381	1					
ANR	26488	ArrayIndexing	c [ i ]		26381	0					
ANR	26489	Identifier	c		26381	0					
ANR	26490	Identifier	i		26381	1					
ANR	26491	IfStatement	if ( i != es_strlen ( valnode -> val . d . estr ) )		26381	7					
ANR	26492	Condition	i != es_strlen ( valnode -> val . d . estr )	949:4:24042:24076	26381	0	True				
ANR	26493	EqualityExpression	i != es_strlen ( valnode -> val . d . estr )		26381	0		!=			
ANR	26494	Identifier	i		26381	0					
ANR	26495	CallExpression	es_strlen ( valnode -> val . d . estr )		26381	1					
ANR	26496	Callee	es_strlen		26381	0					
ANR	26497	Identifier	es_strlen		26381	0					
ANR	26498	ArgumentList	valnode -> val . d . estr		26381	1					
ANR	26499	Argument	valnode -> val . d . estr		26381	0					
ANR	26500	MemberAccess	valnode -> val . d . estr		26381	0					
ANR	26501	MemberAccess	valnode -> val . d		26381	0					
ANR	26502	PtrMemberAccess	valnode -> val		26381	0					
ANR	26503	Identifier	valnode		26381	0					
ANR	26504	Identifier	val		26381	1					
ANR	26505	Identifier	d		26381	1					
ANR	26506	Identifier	estr		26381	1					
ANR	26507	CompoundStatement		12:41:305:305	26381	1					
ANR	26508	Statement	parser_errmsg	950:2:24083:24095	26381	0	True				
ANR	26509	Statement	(	950:15:24096:24096	26381	1	True				
ANR	26510	Statement	"""parameter '%s' contains whitespace, which is not """	950:16:24097:24147	26381	2	True				
ANR	26511	Statement	"""permitted"""	951:4:24153:24163	26381	3	True				
ANR	26512	Statement	","	951:15:24164:24164	26381	4	True				
ANR	26513	Statement	param	952:4:24170:24174	26381	5	True				
ANR	26514	Statement	->	952:9:24175:24176	26381	6	True				
ANR	26515	Statement	name	952:11:24177:24180	26381	7	True				
ANR	26516	Statement	)	952:15:24181:24181	26381	8	True				
ANR	26517	ExpressionStatement		952:16:24182:24182	26381	9	True				
ANR	26518	ExpressionStatement	r = 0	953:2:24186:24191	26381	10	True				
ANR	26519	AssignmentExpression	r = 0		26381	0		=			
ANR	26520	Identifier	r		26381	0					
ANR	26521	PrimaryExpression	0		26381	1					
ANR	26522	ReturnStatement	return r ;	955:1:24197:24205	26381	8	True				
ANR	26523	Identifier	r		26381	0					
ANR	26524	ReturnType	static int		26381	1					
ANR	26525	Identifier	doGetWord		26381	2					
ANR	26526	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		26381	3					
ANR	26527	Parameter	struct nvlst * valnode	936:10:23692:23712	26381	0	True				
ANR	26528	ParameterType	struct nvlst *		26381	0					
ANR	26529	Identifier	valnode		26381	1					
ANR	26530	Parameter	struct cnfparamdescr * param	936:33:23715:23741	26381	1	True				
ANR	26531	ParameterType	struct cnfparamdescr *		26381	0					
ANR	26532	Identifier	param		26381	1					
ANR	26533	Parameter	struct cnfparamvals * val	937:3:23747:23770	26381	2	True				
ANR	26534	ParameterType	struct cnfparamvals *		26381	0					
ANR	26535	Identifier	val		26381	1					
ANR	26536	CFGEntryNode	ENTRY		26381		True				
ANR	26537	CFGExitNode	EXIT		26381		True				
ANR	26538	Symbol	val		26381						
ANR	26539	Symbol	c		26381						
ANR	26540	Symbol	val -> val		26381						
ANR	26541	Symbol	valnode -> val		26381						
ANR	26542	Symbol	* valnode		26381						
ANR	26543	Symbol	isspace		26381						
ANR	26544	Symbol	valnode		26381						
ANR	26545	Symbol	i		26381						
ANR	26546	Symbol	* val		26381						
ANR	26547	Symbol	& val -> val		26381						
ANR	26548	Symbol	val -> val . datatype		26381						
ANR	26549	Symbol	valnode -> val . d . estr		26381						
ANR	26550	Symbol	* c		26381						
ANR	26551	Symbol	es_getBufAddr		26381						
ANR	26552	Symbol	es_newStr		26381						
ANR	26553	Symbol	r		26381						
ANR	26554	Symbol	val -> val . d		26381						
ANR	26555	Symbol	* i		26381						
ANR	26556	Symbol	param		26381						
ANR	26557	Symbol	& val -> val . d . estr		26381						
ANR	26558	Symbol	es_strlen		26381						
ANR	26559	Symbol	& val -> val . d		26381						
ANR	26560	Symbol	valnode -> val . d		26381						
ANR	26561	Symbol	val -> val . d . estr		26381						
ANR	26562	Function	doGetArray	958:0:24210:24773							
ANR	26563	FunctionDef	"doGetArray (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		26562	0					
ANR	26564	CompoundStatement		961:0:24313:24773	26562	0					
ANR	26565	IdentifierDeclStatement	int r = 1 ;	962:1:24316:24325	26562	0	True				
ANR	26566	IdentifierDecl	r = 1		26562	0					
ANR	26567	IdentifierDeclType	int		26562	0					
ANR	26568	Identifier	r		26562	1					
ANR	26569	AssignmentExpression	r = 1		26562	2		=			
ANR	26570	Identifier	r		26562	0					
ANR	26571	PrimaryExpression	1		26562	1					
ANR	26572	SwitchStatement	switch ( valnode -> val . datatype )		26562	1					
ANR	26573	Condition	valnode -> val . datatype	964:8:24336:24356	26562	0	True				
ANR	26574	MemberAccess	valnode -> val . datatype		26562	0					
ANR	26575	PtrMemberAccess	valnode -> val		26562	0					
ANR	26576	Identifier	valnode		26562	0					
ANR	26577	Identifier	val		26562	1					
ANR	26578	Identifier	datatype		26562	1					
ANR	26579	CompoundStatement		4:31:45:45	26562	1					
ANR	26580	Label	case 'S' :	965:1:24362:24370	26562	0	True				
ANR	26581	ExpressionStatement	val -> val . datatype = 'A'	967:2:24440:24463	26562	1	True				
ANR	26582	AssignmentExpression	val -> val . datatype = 'A'		26562	0		=			
ANR	26583	MemberAccess	val -> val . datatype		26562	0					
ANR	26584	PtrMemberAccess	val -> val		26562	0					
ANR	26585	Identifier	val		26562	0					
ANR	26586	Identifier	val		26562	1					
ANR	26587	Identifier	datatype		26562	1					
ANR	26588	PrimaryExpression	'A'		26562	1					
ANR	26589	ExpressionStatement	val -> val . d . ar = cnfarrayNew ( es_strdup ( valnode -> val . d . estr ) )	968:2:24467:24526	26562	2	True				
ANR	26590	AssignmentExpression	val -> val . d . ar = cnfarrayNew ( es_strdup ( valnode -> val . d . estr ) )		26562	0		=			
ANR	26591	MemberAccess	val -> val . d . ar		26562	0					
ANR	26592	MemberAccess	val -> val . d		26562	0					
ANR	26593	PtrMemberAccess	val -> val		26562	0					
ANR	26594	Identifier	val		26562	0					
ANR	26595	Identifier	val		26562	1					
ANR	26596	Identifier	d		26562	1					
ANR	26597	Identifier	ar		26562	1					
ANR	26598	CallExpression	cnfarrayNew ( es_strdup ( valnode -> val . d . estr ) )		26562	1					
ANR	26599	Callee	cnfarrayNew		26562	0					
ANR	26600	Identifier	cnfarrayNew		26562	0					
ANR	26601	ArgumentList	es_strdup ( valnode -> val . d . estr )		26562	1					
ANR	26602	Argument	es_strdup ( valnode -> val . d . estr )		26562	0					
ANR	26603	CallExpression	es_strdup ( valnode -> val . d . estr )		26562	0					
ANR	26604	Callee	es_strdup		26562	0					
ANR	26605	Identifier	es_strdup		26562	0					
ANR	26606	ArgumentList	valnode -> val . d . estr		26562	1					
ANR	26607	Argument	valnode -> val . d . estr		26562	0					
ANR	26608	MemberAccess	valnode -> val . d . estr		26562	0					
ANR	26609	MemberAccess	valnode -> val . d		26562	0					
ANR	26610	PtrMemberAccess	valnode -> val		26562	0					
ANR	26611	Identifier	valnode		26562	0					
ANR	26612	Identifier	val		26562	1					
ANR	26613	Identifier	d		26562	1					
ANR	26614	Identifier	estr		26562	1					
ANR	26615	BreakStatement	break ;	969:2:24530:24535	26562	3	True				
ANR	26616	Label	case 'A' :	970:1:24538:24546	26562	4	True				
ANR	26617	ExpressionStatement	val -> val . datatype = 'A'	971:2:24550:24573	26562	5	True				
ANR	26618	AssignmentExpression	val -> val . datatype = 'A'		26562	0		=			
ANR	26619	MemberAccess	val -> val . datatype		26562	0					
ANR	26620	PtrMemberAccess	val -> val		26562	0					
ANR	26621	Identifier	val		26562	0					
ANR	26622	Identifier	val		26562	1					
ANR	26623	Identifier	datatype		26562	1					
ANR	26624	PrimaryExpression	'A'		26562	1					
ANR	26625	ExpressionStatement	val -> val . d . ar = cnfarrayDup ( valnode -> val . d . ar )	972:2:24577:24623	26562	6	True				
ANR	26626	AssignmentExpression	val -> val . d . ar = cnfarrayDup ( valnode -> val . d . ar )		26562	0		=			
ANR	26627	MemberAccess	val -> val . d . ar		26562	0					
ANR	26628	MemberAccess	val -> val . d		26562	0					
ANR	26629	PtrMemberAccess	val -> val		26562	0					
ANR	26630	Identifier	val		26562	0					
ANR	26631	Identifier	val		26562	1					
ANR	26632	Identifier	d		26562	1					
ANR	26633	Identifier	ar		26562	1					
ANR	26634	CallExpression	cnfarrayDup ( valnode -> val . d . ar )		26562	1					
ANR	26635	Callee	cnfarrayDup		26562	0					
ANR	26636	Identifier	cnfarrayDup		26562	0					
ANR	26637	ArgumentList	valnode -> val . d . ar		26562	1					
ANR	26638	Argument	valnode -> val . d . ar		26562	0					
ANR	26639	MemberAccess	valnode -> val . d . ar		26562	0					
ANR	26640	MemberAccess	valnode -> val . d		26562	0					
ANR	26641	PtrMemberAccess	valnode -> val		26562	0					
ANR	26642	Identifier	valnode		26562	0					
ANR	26643	Identifier	val		26562	1					
ANR	26644	Identifier	d		26562	1					
ANR	26645	Identifier	ar		26562	1					
ANR	26646	BreakStatement	break ;	973:2:24627:24632	26562	7	True				
ANR	26647	Label	default :	974:1:24635:24642	26562	8	True				
ANR	26648	Identifier	default		26562	0					
ANR	26649	Statement	parser_errmsg	974:9:24643:24655	26562	9	True				
ANR	26650	Statement	(	974:22:24656:24656	26562	10	True				
ANR	26651	Statement	"""parameter '%s' must be an array, but is a """	974:23:24657:24700	26562	11	True				
ANR	26652	Statement	"""different datatype"""	975:3:24705:24724	26562	12	True				
ANR	26653	Statement	","	975:23:24725:24725	26562	13	True				
ANR	26654	Statement	param	975:25:24727:24731	26562	14	True				
ANR	26655	Statement	->	975:30:24732:24733	26562	15	True				
ANR	26656	Statement	name	975:32:24734:24737	26562	16	True				
ANR	26657	Statement	)	975:36:24738:24738	26562	17	True				
ANR	26658	ExpressionStatement		975:37:24739:24739	26562	18	True				
ANR	26659	ExpressionStatement	r = 0	976:2:24743:24748	26562	19	True				
ANR	26660	AssignmentExpression	r = 0		26562	0		=			
ANR	26661	Identifier	r		26562	0					
ANR	26662	PrimaryExpression	0		26562	1					
ANR	26663	BreakStatement	break ;	977:2:24752:24757	26562	20	True				
ANR	26664	ReturnStatement	return r ;	979:1:24763:24771	26562	2	True				
ANR	26665	Identifier	r		26562	0					
ANR	26666	ReturnType	static int		26562	1					
ANR	26667	Identifier	doGetArray		26562	2					
ANR	26668	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		26562	3					
ANR	26669	Parameter	struct nvlst * valnode	959:11:24232:24252	26562	0	True				
ANR	26670	ParameterType	struct nvlst *		26562	0					
ANR	26671	Identifier	valnode		26562	1					
ANR	26672	Parameter	struct cnfparamdescr * param	959:34:24255:24281	26562	1	True				
ANR	26673	ParameterType	struct cnfparamdescr *		26562	0					
ANR	26674	Identifier	param		26562	1					
ANR	26675	Parameter	struct cnfparamvals * val	960:3:24287:24310	26562	2	True				
ANR	26676	ParameterType	struct cnfparamvals *		26562	0					
ANR	26677	Identifier	val		26562	1					
ANR	26678	CFGEntryNode	ENTRY		26562		True				
ANR	26679	CFGExitNode	EXIT		26562		True				
ANR	26680	Symbol	val		26562						
ANR	26681	Symbol	valnode -> val		26562						
ANR	26682	Symbol	val -> val		26562						
ANR	26683	Symbol	* valnode		26562						
ANR	26684	Symbol	valnode		26562						
ANR	26685	Symbol	* val		26562						
ANR	26686	Symbol	val -> val . d . ar		26562						
ANR	26687	Symbol	valnode -> val . d . ar		26562						
ANR	26688	Symbol	val -> val . datatype		26562						
ANR	26689	Symbol	valnode -> val . d . estr		26562						
ANR	26690	Symbol	cnfarrayNew		26562						
ANR	26691	Symbol	r		26562						
ANR	26692	Symbol	cnfarrayDup		26562						
ANR	26693	Symbol	val -> val . d		26562						
ANR	26694	Symbol	es_strdup		26562						
ANR	26695	Symbol	valnode -> val . datatype		26562						
ANR	26696	Symbol	param		26562						
ANR	26697	Symbol	valnode -> val . d		26562						
ANR	26698	Function	doGetChar	982:0:24776:25199							
ANR	26699	FunctionDef	"doGetChar (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		26698	0					
ANR	26700	CompoundStatement		985:0:24878:25199	26698	0					
ANR	26701	IdentifierDeclStatement	int r = 1 ;	986:1:24881:24890	26698	0	True				
ANR	26702	IdentifierDecl	r = 1		26698	0					
ANR	26703	IdentifierDeclType	int		26698	0					
ANR	26704	Identifier	r		26698	1					
ANR	26705	AssignmentExpression	r = 1		26698	2		=			
ANR	26706	Identifier	r		26698	0					
ANR	26707	PrimaryExpression	1		26698	1					
ANR	26708	IfStatement	if ( es_strlen ( valnode -> val . d . estr ) != 1 )		26698	1					
ANR	26709	Condition	es_strlen ( valnode -> val . d . estr ) != 1	987:4:24896:24930	26698	0	True				
ANR	26710	EqualityExpression	es_strlen ( valnode -> val . d . estr ) != 1		26698	0		!=			
ANR	26711	CallExpression	es_strlen ( valnode -> val . d . estr )		26698	0					
ANR	26712	Callee	es_strlen		26698	0					
ANR	26713	Identifier	es_strlen		26698	0					
ANR	26714	ArgumentList	valnode -> val . d . estr		26698	1					
ANR	26715	Argument	valnode -> val . d . estr		26698	0					
ANR	26716	MemberAccess	valnode -> val . d . estr		26698	0					
ANR	26717	MemberAccess	valnode -> val . d		26698	0					
ANR	26718	PtrMemberAccess	valnode -> val		26698	0					
ANR	26719	Identifier	valnode		26698	0					
ANR	26720	Identifier	val		26698	1					
ANR	26721	Identifier	d		26698	1					
ANR	26722	Identifier	estr		26698	1					
ANR	26723	PrimaryExpression	1		26698	1					
ANR	26724	CompoundStatement		3:41:54:54	26698	1					
ANR	26725	Statement	parser_errmsg	988:2:24937:24949	26698	0	True				
ANR	26726	Statement	(	988:15:24950:24950	26698	1	True				
ANR	26727	Statement	"""parameter '%s' must contain exactly one character """	988:16:24951:25002	26698	2	True				
ANR	26728	Statement	"""but contains %d - cannot be processed"""	989:4:25008:25046	26698	3	True				
ANR	26729	Statement	","	989:43:25047:25047	26698	4	True				
ANR	26730	Statement	param	990:4:25053:25057	26698	5	True				
ANR	26731	Statement	->	990:9:25058:25059	26698	6	True				
ANR	26732	Statement	name	990:11:25060:25063	26698	7	True				
ANR	26733	Statement	","	990:15:25064:25064	26698	8	True				
ANR	26734	Statement	es_strlen	990:17:25066:25074	26698	9	True				
ANR	26735	Statement	(	990:26:25075:25075	26698	10	True				
ANR	26736	Statement	valnode	990:27:25076:25082	26698	11	True				
ANR	26737	Statement	->	990:34:25083:25084	26698	12	True				
ANR	26738	Statement	val	990:36:25085:25087	26698	13	True				
ANR	26739	Statement	.	990:39:25088:25088	26698	14	True				
ANR	26740	Statement	d	990:40:25089:25089	26698	15	True				
ANR	26741	Statement	.	990:41:25090:25090	26698	16	True				
ANR	26742	Statement	estr	990:42:25091:25094	26698	17	True				
ANR	26743	Statement	)	990:46:25095:25095	26698	18	True				
ANR	26744	Statement	)	990:47:25096:25096	26698	19	True				
ANR	26745	ExpressionStatement		990:48:25097:25097	26698	20	True				
ANR	26746	ExpressionStatement	r = 0	991:2:25101:25106	26698	21	True				
ANR	26747	AssignmentExpression	r = 0		26698	0		=			
ANR	26748	Identifier	r		26698	0					
ANR	26749	PrimaryExpression	0		26698	1					
ANR	26750	ExpressionStatement	val -> val . datatype = 'S'	993:1:25112:25135	26698	2	True				
ANR	26751	AssignmentExpression	val -> val . datatype = 'S'		26698	0		=			
ANR	26752	MemberAccess	val -> val . datatype		26698	0					
ANR	26753	PtrMemberAccess	val -> val		26698	0					
ANR	26754	Identifier	val		26698	0					
ANR	26755	Identifier	val		26698	1					
ANR	26756	Identifier	datatype		26698	1					
ANR	26757	PrimaryExpression	'S'		26698	1					
ANR	26758	ExpressionStatement	val -> val . d . estr = es_strdup ( valnode -> val . d . estr )	994:1:25138:25186	26698	3	True				
ANR	26759	AssignmentExpression	val -> val . d . estr = es_strdup ( valnode -> val . d . estr )		26698	0		=			
ANR	26760	MemberAccess	val -> val . d . estr		26698	0					
ANR	26761	MemberAccess	val -> val . d		26698	0					
ANR	26762	PtrMemberAccess	val -> val		26698	0					
ANR	26763	Identifier	val		26698	0					
ANR	26764	Identifier	val		26698	1					
ANR	26765	Identifier	d		26698	1					
ANR	26766	Identifier	estr		26698	1					
ANR	26767	CallExpression	es_strdup ( valnode -> val . d . estr )		26698	1					
ANR	26768	Callee	es_strdup		26698	0					
ANR	26769	Identifier	es_strdup		26698	0					
ANR	26770	ArgumentList	valnode -> val . d . estr		26698	1					
ANR	26771	Argument	valnode -> val . d . estr		26698	0					
ANR	26772	MemberAccess	valnode -> val . d . estr		26698	0					
ANR	26773	MemberAccess	valnode -> val . d		26698	0					
ANR	26774	PtrMemberAccess	valnode -> val		26698	0					
ANR	26775	Identifier	valnode		26698	0					
ANR	26776	Identifier	val		26698	1					
ANR	26777	Identifier	d		26698	1					
ANR	26778	Identifier	estr		26698	1					
ANR	26779	ReturnStatement	return r ;	995:1:25189:25197	26698	4	True				
ANR	26780	Identifier	r		26698	0					
ANR	26781	ReturnType	static int		26698	1					
ANR	26782	Identifier	doGetChar		26698	2					
ANR	26783	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		26698	3					
ANR	26784	Parameter	struct nvlst * valnode	983:10:24797:24817	26698	0	True				
ANR	26785	ParameterType	struct nvlst *		26698	0					
ANR	26786	Identifier	valnode		26698	1					
ANR	26787	Parameter	struct cnfparamdescr * param	983:33:24820:24846	26698	1	True				
ANR	26788	ParameterType	struct cnfparamdescr *		26698	0					
ANR	26789	Identifier	param		26698	1					
ANR	26790	Parameter	struct cnfparamvals * val	984:3:24852:24875	26698	2	True				
ANR	26791	ParameterType	struct cnfparamvals *		26698	0					
ANR	26792	Identifier	val		26698	1					
ANR	26793	CFGEntryNode	ENTRY		26698		True				
ANR	26794	CFGExitNode	EXIT		26698		True				
ANR	26795	Symbol	val		26698						
ANR	26796	Symbol	valnode -> val		26698						
ANR	26797	Symbol	val -> val		26698						
ANR	26798	Symbol	* valnode		26698						
ANR	26799	Symbol	valnode		26698						
ANR	26800	Symbol	* val		26698						
ANR	26801	Symbol	valnode -> val . d . estr		26698						
ANR	26802	Symbol	val -> val . datatype		26698						
ANR	26803	Symbol	r		26698						
ANR	26804	Symbol	val -> val . d		26698						
ANR	26805	Symbol	es_strdup		26698						
ANR	26806	Symbol	param		26698						
ANR	26807	Symbol	es_strlen		26698						
ANR	26808	Symbol	valnode -> val . d		26698						
ANR	26809	Symbol	val -> val . d . estr		26698						
ANR	26810	Function	nvlstGetParam	1001:0:25324:27450							
ANR	26811	FunctionDef	"nvlstGetParam (struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val)"		26810	0					
ANR	26812	CompoundStatement		1004:0:25435:27450	26810	0					
ANR	26813	IdentifierDeclStatement	uchar * cstr ;	1005:1:25438:25449	26810	0	True				
ANR	26814	IdentifierDecl	* cstr		26810	0					
ANR	26815	IdentifierDeclType	uchar *		26810	0					
ANR	26816	Identifier	cstr		26810	1					
ANR	26817	IdentifierDeclStatement	int r ;	1006:1:25452:25457	26810	1	True				
ANR	26818	IdentifierDecl	r		26810	0					
ANR	26819	IdentifierDeclType	int		26810	0					
ANR	26820	Identifier	r		26810	1					
ANR	26821	ExpressionStatement	"DBGPRINTF ( ""nvlstGetParam: name '%s', type %d, valnode->bUsed %d\\n"" , param -> name , ( int ) param -> type , valnode -> bUsed )"	1008:1:25461:25580	26810	2	True				
ANR	26822	CallExpression	"DBGPRINTF ( ""nvlstGetParam: name '%s', type %d, valnode->bUsed %d\\n"" , param -> name , ( int ) param -> type , valnode -> bUsed )"		26810	0					
ANR	26823	Callee	DBGPRINTF		26810	0					
ANR	26824	Identifier	DBGPRINTF		26810	0					
ANR	26825	ArgumentList	"""nvlstGetParam: name '%s', type %d, valnode->bUsed %d\\n"""		26810	1					
ANR	26826	Argument	"""nvlstGetParam: name '%s', type %d, valnode->bUsed %d\\n"""		26810	0					
ANR	26827	PrimaryExpression	"""nvlstGetParam: name '%s', type %d, valnode->bUsed %d\\n"""		26810	0					
ANR	26828	Argument	param -> name		26810	1					
ANR	26829	PtrMemberAccess	param -> name		26810	0					
ANR	26830	Identifier	param		26810	0					
ANR	26831	Identifier	name		26810	1					
ANR	26832	Argument	( int ) param -> type		26810	2					
ANR	26833	CastExpression	( int ) param -> type		26810	0					
ANR	26834	CastTarget	int		26810	0					
ANR	26835	PtrMemberAccess	param -> type		26810	1					
ANR	26836	Identifier	param		26810	0					
ANR	26837	Identifier	type		26810	1					
ANR	26838	Argument	valnode -> bUsed		26810	3					
ANR	26839	PtrMemberAccess	valnode -> bUsed		26810	0					
ANR	26840	Identifier	valnode		26810	0					
ANR	26841	Identifier	bUsed		26810	1					
ANR	26842	IfStatement	if ( valnode -> val . datatype != 'S' && param -> type != eCmdHdlrArray )		26810	3					
ANR	26843	Condition	valnode -> val . datatype != 'S' && param -> type != eCmdHdlrArray	1010:4:25586:25645	26810	0	True				
ANR	26844	AndExpression	valnode -> val . datatype != 'S' && param -> type != eCmdHdlrArray		26810	0		&&			
ANR	26845	EqualityExpression	valnode -> val . datatype != 'S'		26810	0		!=			
ANR	26846	MemberAccess	valnode -> val . datatype		26810	0					
ANR	26847	PtrMemberAccess	valnode -> val		26810	0					
ANR	26848	Identifier	valnode		26810	0					
ANR	26849	Identifier	val		26810	1					
ANR	26850	Identifier	datatype		26810	1					
ANR	26851	PrimaryExpression	'S'		26810	1					
ANR	26852	EqualityExpression	param -> type != eCmdHdlrArray		26810	1		!=			
ANR	26853	PtrMemberAccess	param -> type		26810	0					
ANR	26854	Identifier	param		26810	0					
ANR	26855	Identifier	type		26810	1					
ANR	26856	Identifier	eCmdHdlrArray		26810	1					
ANR	26857	CompoundStatement		7:66:212:212	26810	1					
ANR	26858	Statement	parser_errmsg	1011:2:25652:25664	26810	0	True				
ANR	26859	Statement	(	1011:15:25665:25665	26810	1	True				
ANR	26860	Statement	"""parameter '%s' is not a string, which is not """	1011:16:25666:25712	26810	2	True				
ANR	26861	Statement	"""permitted"""	1012:4:25718:25728	26810	3	True				
ANR	26862	Statement	","	1012:15:25729:25729	26810	4	True				
ANR	26863	Statement	param	1013:4:25735:25739	26810	5	True				
ANR	26864	Statement	->	1013:9:25740:25741	26810	6	True				
ANR	26865	Statement	name	1013:11:25742:25745	26810	7	True				
ANR	26866	Statement	)	1013:15:25746:25746	26810	8	True				
ANR	26867	ExpressionStatement		1013:16:25747:25747	26810	9	True				
ANR	26868	ExpressionStatement	r = 0	1014:2:25751:25756	26810	10	True				
ANR	26869	AssignmentExpression	r = 0		26810	0		=			
ANR	26870	Identifier	r		26810	0					
ANR	26871	PrimaryExpression	0		26810	1					
ANR	26872	GotoStatement	goto done ;	1015:2:25760:25769	26810	11	True				
ANR	26873	Identifier	done		26810	0					
ANR	26874	ExpressionStatement	valnode -> bUsed = 1	1017:1:25775:25793	26810	4	True				
ANR	26875	AssignmentExpression	valnode -> bUsed = 1		26810	0		=			
ANR	26876	PtrMemberAccess	valnode -> bUsed		26810	0					
ANR	26877	Identifier	valnode		26810	0					
ANR	26878	Identifier	bUsed		26810	1					
ANR	26879	PrimaryExpression	1		26810	1					
ANR	26880	ExpressionStatement	val -> bUsed = 1	1018:1:25796:25810	26810	5	True				
ANR	26881	AssignmentExpression	val -> bUsed = 1		26810	0		=			
ANR	26882	PtrMemberAccess	val -> bUsed		26810	0					
ANR	26883	Identifier	val		26810	0					
ANR	26884	Identifier	bUsed		26810	1					
ANR	26885	PrimaryExpression	1		26810	1					
ANR	26886	SwitchStatement	switch ( param -> type )		26810	6					
ANR	26887	Condition	param -> type	1019:8:25820:25830	26810	0	True				
ANR	26888	PtrMemberAccess	param -> type		26810	0					
ANR	26889	Identifier	param		26810	0					
ANR	26890	Identifier	type		26810	1					
ANR	26891	CompoundStatement		16:21:397:397	26810	1					
ANR	26892	Label	case eCmdHdlrQueueType :	1020:1:25836:25858	26810	0	True				
ANR	26893	Identifier	eCmdHdlrQueueType		26810	0					
ANR	26894	ExpressionStatement	"r = doGetQueueType ( valnode , param , val )"	1021:2:25862:25901	26810	1	True				
ANR	26895	AssignmentExpression	"r = doGetQueueType ( valnode , param , val )"		26810	0		=			
ANR	26896	Identifier	r		26810	0					
ANR	26897	CallExpression	"doGetQueueType ( valnode , param , val )"		26810	1					
ANR	26898	Callee	doGetQueueType		26810	0					
ANR	26899	Identifier	doGetQueueType		26810	0					
ANR	26900	ArgumentList	valnode		26810	1					
ANR	26901	Argument	valnode		26810	0					
ANR	26902	Identifier	valnode		26810	0					
ANR	26903	Argument	param		26810	1					
ANR	26904	Identifier	param		26810	0					
ANR	26905	Argument	val		26810	2					
ANR	26906	Identifier	val		26810	0					
ANR	26907	BreakStatement	break ;	1022:2:25905:25910	26810	2	True				
ANR	26908	Label	case eCmdHdlrUID :	1023:1:25913:25929	26810	3	True				
ANR	26909	Identifier	eCmdHdlrUID		26810	0					
ANR	26910	ExpressionStatement	"r = doGetUID ( valnode , param , val )"	1024:2:25933:25966	26810	4	True				
ANR	26911	AssignmentExpression	"r = doGetUID ( valnode , param , val )"		26810	0		=			
ANR	26912	Identifier	r		26810	0					
ANR	26913	CallExpression	"doGetUID ( valnode , param , val )"		26810	1					
ANR	26914	Callee	doGetUID		26810	0					
ANR	26915	Identifier	doGetUID		26810	0					
ANR	26916	ArgumentList	valnode		26810	1					
ANR	26917	Argument	valnode		26810	0					
ANR	26918	Identifier	valnode		26810	0					
ANR	26919	Argument	param		26810	1					
ANR	26920	Identifier	param		26810	0					
ANR	26921	Argument	val		26810	2					
ANR	26922	Identifier	val		26810	0					
ANR	26923	BreakStatement	break ;	1025:2:25970:25975	26810	5	True				
ANR	26924	Label	case eCmdHdlrGID :	1026:1:25978:25994	26810	6	True				
ANR	26925	Identifier	eCmdHdlrGID		26810	0					
ANR	26926	ExpressionStatement	"r = doGetGID ( valnode , param , val )"	1027:2:25998:26031	26810	7	True				
ANR	26927	AssignmentExpression	"r = doGetGID ( valnode , param , val )"		26810	0		=			
ANR	26928	Identifier	r		26810	0					
ANR	26929	CallExpression	"doGetGID ( valnode , param , val )"		26810	1					
ANR	26930	Callee	doGetGID		26810	0					
ANR	26931	Identifier	doGetGID		26810	0					
ANR	26932	ArgumentList	valnode		26810	1					
ANR	26933	Argument	valnode		26810	0					
ANR	26934	Identifier	valnode		26810	0					
ANR	26935	Argument	param		26810	1					
ANR	26936	Identifier	param		26810	0					
ANR	26937	Argument	val		26810	2					
ANR	26938	Identifier	val		26810	0					
ANR	26939	BreakStatement	break ;	1028:2:26035:26040	26810	8	True				
ANR	26940	Label	case eCmdHdlrBinary :	1029:1:26043:26062	26810	9	True				
ANR	26941	Identifier	eCmdHdlrBinary		26810	0					
ANR	26942	ExpressionStatement	"r = doGetBinary ( valnode , param , val )"	1030:2:26066:26102	26810	10	True				
ANR	26943	AssignmentExpression	"r = doGetBinary ( valnode , param , val )"		26810	0		=			
ANR	26944	Identifier	r		26810	0					
ANR	26945	CallExpression	"doGetBinary ( valnode , param , val )"		26810	1					
ANR	26946	Callee	doGetBinary		26810	0					
ANR	26947	Identifier	doGetBinary		26810	0					
ANR	26948	ArgumentList	valnode		26810	1					
ANR	26949	Argument	valnode		26810	0					
ANR	26950	Identifier	valnode		26810	0					
ANR	26951	Argument	param		26810	1					
ANR	26952	Identifier	param		26810	0					
ANR	26953	Argument	val		26810	2					
ANR	26954	Identifier	val		26810	0					
ANR	26955	BreakStatement	break ;	1031:2:26106:26111	26810	11	True				
ANR	26956	Label	case eCmdHdlrFileCreateMode :	1032:1:26114:26141	26810	12	True				
ANR	26957	Identifier	eCmdHdlrFileCreateMode		26810	0					
ANR	26958	ExpressionStatement	"r = doGetFileCreateMode ( valnode , param , val )"	1033:2:26145:26189	26810	13	True				
ANR	26959	AssignmentExpression	"r = doGetFileCreateMode ( valnode , param , val )"		26810	0		=			
ANR	26960	Identifier	r		26810	0					
ANR	26961	CallExpression	"doGetFileCreateMode ( valnode , param , val )"		26810	1					
ANR	26962	Callee	doGetFileCreateMode		26810	0					
ANR	26963	Identifier	doGetFileCreateMode		26810	0					
ANR	26964	ArgumentList	valnode		26810	1					
ANR	26965	Argument	valnode		26810	0					
ANR	26966	Identifier	valnode		26810	0					
ANR	26967	Argument	param		26810	1					
ANR	26968	Identifier	param		26810	0					
ANR	26969	Argument	val		26810	2					
ANR	26970	Identifier	val		26810	0					
ANR	26971	BreakStatement	break ;	1034:2:26193:26198	26810	14	True				
ANR	26972	Label	case eCmdHdlrInt :	1035:1:26201:26217	26810	15	True				
ANR	26973	Identifier	eCmdHdlrInt		26810	0					
ANR	26974	ExpressionStatement	"r = doGetInt ( valnode , param , val )"	1036:2:26221:26254	26810	16	True				
ANR	26975	AssignmentExpression	"r = doGetInt ( valnode , param , val )"		26810	0		=			
ANR	26976	Identifier	r		26810	0					
ANR	26977	CallExpression	"doGetInt ( valnode , param , val )"		26810	1					
ANR	26978	Callee	doGetInt		26810	0					
ANR	26979	Identifier	doGetInt		26810	0					
ANR	26980	ArgumentList	valnode		26810	1					
ANR	26981	Argument	valnode		26810	0					
ANR	26982	Identifier	valnode		26810	0					
ANR	26983	Argument	param		26810	1					
ANR	26984	Identifier	param		26810	0					
ANR	26985	Argument	val		26810	2					
ANR	26986	Identifier	val		26810	0					
ANR	26987	BreakStatement	break ;	1037:2:26258:26263	26810	17	True				
ANR	26988	Label	case eCmdHdlrNonNegInt :	1038:1:26266:26288	26810	18	True				
ANR	26989	Identifier	eCmdHdlrNonNegInt		26810	0					
ANR	26990	ExpressionStatement	"r = doGetNonNegInt ( valnode , param , val )"	1039:2:26292:26331	26810	19	True				
ANR	26991	AssignmentExpression	"r = doGetNonNegInt ( valnode , param , val )"		26810	0		=			
ANR	26992	Identifier	r		26810	0					
ANR	26993	CallExpression	"doGetNonNegInt ( valnode , param , val )"		26810	1					
ANR	26994	Callee	doGetNonNegInt		26810	0					
ANR	26995	Identifier	doGetNonNegInt		26810	0					
ANR	26996	ArgumentList	valnode		26810	1					
ANR	26997	Argument	valnode		26810	0					
ANR	26998	Identifier	valnode		26810	0					
ANR	26999	Argument	param		26810	1					
ANR	27000	Identifier	param		26810	0					
ANR	27001	Argument	val		26810	2					
ANR	27002	Identifier	val		26810	0					
ANR	27003	BreakStatement	break ;	1040:2:26335:26340	26810	20	True				
ANR	27004	Label	case eCmdHdlrPositiveInt :	1041:1:26343:26367	26810	21	True				
ANR	27005	Identifier	eCmdHdlrPositiveInt		26810	0					
ANR	27006	ExpressionStatement	"r = doGetPositiveInt ( valnode , param , val )"	1042:2:26371:26412	26810	22	True				
ANR	27007	AssignmentExpression	"r = doGetPositiveInt ( valnode , param , val )"		26810	0		=			
ANR	27008	Identifier	r		26810	0					
ANR	27009	CallExpression	"doGetPositiveInt ( valnode , param , val )"		26810	1					
ANR	27010	Callee	doGetPositiveInt		26810	0					
ANR	27011	Identifier	doGetPositiveInt		26810	0					
ANR	27012	ArgumentList	valnode		26810	1					
ANR	27013	Argument	valnode		26810	0					
ANR	27014	Identifier	valnode		26810	0					
ANR	27015	Argument	param		26810	1					
ANR	27016	Identifier	param		26810	0					
ANR	27017	Argument	val		26810	2					
ANR	27018	Identifier	val		26810	0					
ANR	27019	BreakStatement	break ;	1043:2:26416:26421	26810	23	True				
ANR	27020	Label	case eCmdHdlrSize :	1044:1:26424:26441	26810	24	True				
ANR	27021	Identifier	eCmdHdlrSize		26810	0					
ANR	27022	ExpressionStatement	"r = doGetSize ( valnode , param , val )"	1045:2:26445:26479	26810	25	True				
ANR	27023	AssignmentExpression	"r = doGetSize ( valnode , param , val )"		26810	0		=			
ANR	27024	Identifier	r		26810	0					
ANR	27025	CallExpression	"doGetSize ( valnode , param , val )"		26810	1					
ANR	27026	Callee	doGetSize		26810	0					
ANR	27027	Identifier	doGetSize		26810	0					
ANR	27028	ArgumentList	valnode		26810	1					
ANR	27029	Argument	valnode		26810	0					
ANR	27030	Identifier	valnode		26810	0					
ANR	27031	Argument	param		26810	1					
ANR	27032	Identifier	param		26810	0					
ANR	27033	Argument	val		26810	2					
ANR	27034	Identifier	val		26810	0					
ANR	27035	BreakStatement	break ;	1046:2:26483:26488	26810	26	True				
ANR	27036	Label	case eCmdHdlrGetChar :	1047:1:26491:26511	26810	27	True				
ANR	27037	Identifier	eCmdHdlrGetChar		26810	0					
ANR	27038	ExpressionStatement	"r = doGetChar ( valnode , param , val )"	1048:2:26515:26549	26810	28	True				
ANR	27039	AssignmentExpression	"r = doGetChar ( valnode , param , val )"		26810	0		=			
ANR	27040	Identifier	r		26810	0					
ANR	27041	CallExpression	"doGetChar ( valnode , param , val )"		26810	1					
ANR	27042	Callee	doGetChar		26810	0					
ANR	27043	Identifier	doGetChar		26810	0					
ANR	27044	ArgumentList	valnode		26810	1					
ANR	27045	Argument	valnode		26810	0					
ANR	27046	Identifier	valnode		26810	0					
ANR	27047	Argument	param		26810	1					
ANR	27048	Identifier	param		26810	0					
ANR	27049	Argument	val		26810	2					
ANR	27050	Identifier	val		26810	0					
ANR	27051	BreakStatement	break ;	1049:2:26553:26558	26810	29	True				
ANR	27052	Label	case eCmdHdlrFacility :	1050:1:26561:26582	26810	30	True				
ANR	27053	Identifier	eCmdHdlrFacility		26810	0					
ANR	27054	ExpressionStatement	"cstr = ( uchar * ) es_str2cstr ( valnode -> val . d . estr , NULL )"	1051:2:26586:26640	26810	31	True				
ANR	27055	AssignmentExpression	"cstr = ( uchar * ) es_str2cstr ( valnode -> val . d . estr , NULL )"		26810	0		=			
ANR	27056	Identifier	cstr		26810	0					
ANR	27057	CastExpression	"( uchar * ) es_str2cstr ( valnode -> val . d . estr , NULL )"		26810	1					
ANR	27058	CastTarget	uchar *		26810	0					
ANR	27059	CallExpression	"es_str2cstr ( valnode -> val . d . estr , NULL )"		26810	1					
ANR	27060	Callee	es_str2cstr		26810	0					
ANR	27061	Identifier	es_str2cstr		26810	0					
ANR	27062	ArgumentList	valnode -> val . d . estr		26810	1					
ANR	27063	Argument	valnode -> val . d . estr		26810	0					
ANR	27064	MemberAccess	valnode -> val . d . estr		26810	0					
ANR	27065	MemberAccess	valnode -> val . d		26810	0					
ANR	27066	PtrMemberAccess	valnode -> val		26810	0					
ANR	27067	Identifier	valnode		26810	0					
ANR	27068	Identifier	val		26810	1					
ANR	27069	Identifier	d		26810	1					
ANR	27070	Identifier	estr		26810	1					
ANR	27071	Argument	NULL		26810	1					
ANR	27072	Identifier	NULL		26810	0					
ANR	27073	ExpressionStatement	val -> val . datatype = 'N'	1052:2:26644:26667	26810	32	True				
ANR	27074	AssignmentExpression	val -> val . datatype = 'N'		26810	0		=			
ANR	27075	MemberAccess	val -> val . datatype		26810	0					
ANR	27076	PtrMemberAccess	val -> val		26810	0					
ANR	27077	Identifier	val		26810	0					
ANR	27078	Identifier	val		26810	1					
ANR	27079	Identifier	datatype		26810	1					
ANR	27080	PrimaryExpression	'N'		26810	1					
ANR	27081	ExpressionStatement	"val -> val . d . n = decodeSyslogName ( cstr , syslogFacNames )"	1053:2:26671:26724	26810	33	True				
ANR	27082	AssignmentExpression	"val -> val . d . n = decodeSyslogName ( cstr , syslogFacNames )"		26810	0		=			
ANR	27083	MemberAccess	val -> val . d . n		26810	0					
ANR	27084	MemberAccess	val -> val . d		26810	0					
ANR	27085	PtrMemberAccess	val -> val		26810	0					
ANR	27086	Identifier	val		26810	0					
ANR	27087	Identifier	val		26810	1					
ANR	27088	Identifier	d		26810	1					
ANR	27089	Identifier	n		26810	1					
ANR	27090	CallExpression	"decodeSyslogName ( cstr , syslogFacNames )"		26810	1					
ANR	27091	Callee	decodeSyslogName		26810	0					
ANR	27092	Identifier	decodeSyslogName		26810	0					
ANR	27093	ArgumentList	cstr		26810	1					
ANR	27094	Argument	cstr		26810	0					
ANR	27095	Identifier	cstr		26810	0					
ANR	27096	Argument	syslogFacNames		26810	1					
ANR	27097	Identifier	syslogFacNames		26810	0					
ANR	27098	ExpressionStatement	free ( cstr )	1054:2:26728:26738	26810	34	True				
ANR	27099	CallExpression	free ( cstr )		26810	0					
ANR	27100	Callee	free		26810	0					
ANR	27101	Identifier	free		26810	0					
ANR	27102	ArgumentList	cstr		26810	1					
ANR	27103	Argument	cstr		26810	0					
ANR	27104	Identifier	cstr		26810	0					
ANR	27105	ExpressionStatement	r = 1	1055:2:26742:26747	26810	35	True				
ANR	27106	AssignmentExpression	r = 1		26810	0		=			
ANR	27107	Identifier	r		26810	0					
ANR	27108	PrimaryExpression	1		26810	1					
ANR	27109	BreakStatement	break ;	1056:2:26751:26756	26810	36	True				
ANR	27110	Label	case eCmdHdlrSeverity :	1057:1:26759:26780	26810	37	True				
ANR	27111	Identifier	eCmdHdlrSeverity		26810	0					
ANR	27112	ExpressionStatement	"cstr = ( uchar * ) es_str2cstr ( valnode -> val . d . estr , NULL )"	1058:2:26784:26838	26810	38	True				
ANR	27113	AssignmentExpression	"cstr = ( uchar * ) es_str2cstr ( valnode -> val . d . estr , NULL )"		26810	0		=			
ANR	27114	Identifier	cstr		26810	0					
ANR	27115	CastExpression	"( uchar * ) es_str2cstr ( valnode -> val . d . estr , NULL )"		26810	1					
ANR	27116	CastTarget	uchar *		26810	0					
ANR	27117	CallExpression	"es_str2cstr ( valnode -> val . d . estr , NULL )"		26810	1					
ANR	27118	Callee	es_str2cstr		26810	0					
ANR	27119	Identifier	es_str2cstr		26810	0					
ANR	27120	ArgumentList	valnode -> val . d . estr		26810	1					
ANR	27121	Argument	valnode -> val . d . estr		26810	0					
ANR	27122	MemberAccess	valnode -> val . d . estr		26810	0					
ANR	27123	MemberAccess	valnode -> val . d		26810	0					
ANR	27124	PtrMemberAccess	valnode -> val		26810	0					
ANR	27125	Identifier	valnode		26810	0					
ANR	27126	Identifier	val		26810	1					
ANR	27127	Identifier	d		26810	1					
ANR	27128	Identifier	estr		26810	1					
ANR	27129	Argument	NULL		26810	1					
ANR	27130	Identifier	NULL		26810	0					
ANR	27131	ExpressionStatement	val -> val . datatype = 'N'	1059:2:26842:26865	26810	39	True				
ANR	27132	AssignmentExpression	val -> val . datatype = 'N'		26810	0		=			
ANR	27133	MemberAccess	val -> val . datatype		26810	0					
ANR	27134	PtrMemberAccess	val -> val		26810	0					
ANR	27135	Identifier	val		26810	0					
ANR	27136	Identifier	val		26810	1					
ANR	27137	Identifier	datatype		26810	1					
ANR	27138	PrimaryExpression	'N'		26810	1					
ANR	27139	ExpressionStatement	"val -> val . d . n = decodeSyslogName ( cstr , syslogPriNames )"	1060:2:26869:26922	26810	40	True				
ANR	27140	AssignmentExpression	"val -> val . d . n = decodeSyslogName ( cstr , syslogPriNames )"		26810	0		=			
ANR	27141	MemberAccess	val -> val . d . n		26810	0					
ANR	27142	MemberAccess	val -> val . d		26810	0					
ANR	27143	PtrMemberAccess	val -> val		26810	0					
ANR	27144	Identifier	val		26810	0					
ANR	27145	Identifier	val		26810	1					
ANR	27146	Identifier	d		26810	1					
ANR	27147	Identifier	n		26810	1					
ANR	27148	CallExpression	"decodeSyslogName ( cstr , syslogPriNames )"		26810	1					
ANR	27149	Callee	decodeSyslogName		26810	0					
ANR	27150	Identifier	decodeSyslogName		26810	0					
ANR	27151	ArgumentList	cstr		26810	1					
ANR	27152	Argument	cstr		26810	0					
ANR	27153	Identifier	cstr		26810	0					
ANR	27154	Argument	syslogPriNames		26810	1					
ANR	27155	Identifier	syslogPriNames		26810	0					
ANR	27156	ExpressionStatement	free ( cstr )	1061:2:26926:26936	26810	41	True				
ANR	27157	CallExpression	free ( cstr )		26810	0					
ANR	27158	Callee	free		26810	0					
ANR	27159	Identifier	free		26810	0					
ANR	27160	ArgumentList	cstr		26810	1					
ANR	27161	Argument	cstr		26810	0					
ANR	27162	Identifier	cstr		26810	0					
ANR	27163	ExpressionStatement	r = 1	1062:2:26940:26945	26810	42	True				
ANR	27164	AssignmentExpression	r = 1		26810	0		=			
ANR	27165	Identifier	r		26810	0					
ANR	27166	PrimaryExpression	1		26810	1					
ANR	27167	BreakStatement	break ;	1063:2:26949:26954	26810	43	True				
ANR	27168	Label	case eCmdHdlrGetWord :	1064:1:26957:26977	26810	44	True				
ANR	27169	Identifier	eCmdHdlrGetWord		26810	0					
ANR	27170	ExpressionStatement	"r = doGetWord ( valnode , param , val )"	1065:2:26981:27015	26810	45	True				
ANR	27171	AssignmentExpression	"r = doGetWord ( valnode , param , val )"		26810	0		=			
ANR	27172	Identifier	r		26810	0					
ANR	27173	CallExpression	"doGetWord ( valnode , param , val )"		26810	1					
ANR	27174	Callee	doGetWord		26810	0					
ANR	27175	Identifier	doGetWord		26810	0					
ANR	27176	ArgumentList	valnode		26810	1					
ANR	27177	Argument	valnode		26810	0					
ANR	27178	Identifier	valnode		26810	0					
ANR	27179	Argument	param		26810	1					
ANR	27180	Identifier	param		26810	0					
ANR	27181	Argument	val		26810	2					
ANR	27182	Identifier	val		26810	0					
ANR	27183	BreakStatement	break ;	1066:2:27019:27024	26810	46	True				
ANR	27184	Label	case eCmdHdlrString :	1067:1:27027:27046	26810	47	True				
ANR	27185	Identifier	eCmdHdlrString		26810	0					
ANR	27186	ExpressionStatement	val -> val . datatype = 'S'	1068:2:27050:27073	26810	48	True				
ANR	27187	AssignmentExpression	val -> val . datatype = 'S'		26810	0		=			
ANR	27188	MemberAccess	val -> val . datatype		26810	0					
ANR	27189	PtrMemberAccess	val -> val		26810	0					
ANR	27190	Identifier	val		26810	0					
ANR	27191	Identifier	val		26810	1					
ANR	27192	Identifier	datatype		26810	1					
ANR	27193	PrimaryExpression	'S'		26810	1					
ANR	27194	ExpressionStatement	val -> val . d . estr = es_strdup ( valnode -> val . d . estr )	1069:2:27077:27125	26810	49	True				
ANR	27195	AssignmentExpression	val -> val . d . estr = es_strdup ( valnode -> val . d . estr )		26810	0		=			
ANR	27196	MemberAccess	val -> val . d . estr		26810	0					
ANR	27197	MemberAccess	val -> val . d		26810	0					
ANR	27198	PtrMemberAccess	val -> val		26810	0					
ANR	27199	Identifier	val		26810	0					
ANR	27200	Identifier	val		26810	1					
ANR	27201	Identifier	d		26810	1					
ANR	27202	Identifier	estr		26810	1					
ANR	27203	CallExpression	es_strdup ( valnode -> val . d . estr )		26810	1					
ANR	27204	Callee	es_strdup		26810	0					
ANR	27205	Identifier	es_strdup		26810	0					
ANR	27206	ArgumentList	valnode -> val . d . estr		26810	1					
ANR	27207	Argument	valnode -> val . d . estr		26810	0					
ANR	27208	MemberAccess	valnode -> val . d . estr		26810	0					
ANR	27209	MemberAccess	valnode -> val . d		26810	0					
ANR	27210	PtrMemberAccess	valnode -> val		26810	0					
ANR	27211	Identifier	valnode		26810	0					
ANR	27212	Identifier	val		26810	1					
ANR	27213	Identifier	d		26810	1					
ANR	27214	Identifier	estr		26810	1					
ANR	27215	ExpressionStatement	r = 1	1070:2:27129:27134	26810	50	True				
ANR	27216	AssignmentExpression	r = 1		26810	0		=			
ANR	27217	Identifier	r		26810	0					
ANR	27218	PrimaryExpression	1		26810	1					
ANR	27219	BreakStatement	break ;	1071:2:27138:27143	26810	51	True				
ANR	27220	Label	case eCmdHdlrArray :	1072:1:27146:27164	26810	52	True				
ANR	27221	Identifier	eCmdHdlrArray		26810	0					
ANR	27222	ExpressionStatement	"r = doGetArray ( valnode , param , val )"	1073:2:27168:27203	26810	53	True				
ANR	27223	AssignmentExpression	"r = doGetArray ( valnode , param , val )"		26810	0		=			
ANR	27224	Identifier	r		26810	0					
ANR	27225	CallExpression	"doGetArray ( valnode , param , val )"		26810	1					
ANR	27226	Callee	doGetArray		26810	0					
ANR	27227	Identifier	doGetArray		26810	0					
ANR	27228	ArgumentList	valnode		26810	1					
ANR	27229	Argument	valnode		26810	0					
ANR	27230	Identifier	valnode		26810	0					
ANR	27231	Argument	param		26810	1					
ANR	27232	Identifier	param		26810	0					
ANR	27233	Argument	val		26810	2					
ANR	27234	Identifier	val		26810	0					
ANR	27235	BreakStatement	break ;	1074:2:27207:27212	26810	54	True				
ANR	27236	Label	case eCmdHdlrGoneAway :	1075:1:27215:27236	26810	55	True				
ANR	27237	Identifier	eCmdHdlrGoneAway		26810	0					
ANR	27238	ExpressionStatement	"parser_errmsg ( ""parameter '%s' is no longer supported"" , param -> name )"	1076:2:27240:27316	26810	56	True				
ANR	27239	CallExpression	"parser_errmsg ( ""parameter '%s' is no longer supported"" , param -> name )"		26810	0					
ANR	27240	Callee	parser_errmsg		26810	0					
ANR	27241	Identifier	parser_errmsg		26810	0					
ANR	27242	ArgumentList	"""parameter '%s' is no longer supported"""		26810	1					
ANR	27243	Argument	"""parameter '%s' is no longer supported"""		26810	0					
ANR	27244	PrimaryExpression	"""parameter '%s' is no longer supported"""		26810	0					
ANR	27245	Argument	param -> name		26810	1					
ANR	27246	PtrMemberAccess	param -> name		26810	0					
ANR	27247	Identifier	param		26810	0					
ANR	27248	Identifier	name		26810	1					
ANR	27249	ExpressionStatement	r = 1	1078:2:27320:27325	26810	57	True				
ANR	27250	AssignmentExpression	r = 1		26810	0		=			
ANR	27251	Identifier	r		26810	0					
ANR	27252	PrimaryExpression	1		26810	1					
ANR	27253	BreakStatement	break ;	1079:2:27352:27357	26810	58	True				
ANR	27254	Label	default :	1080:1:27360:27367	26810	59	True				
ANR	27255	Identifier	default		26810	0					
ANR	27256	ExpressionStatement	"DBGPRINTF ( ""error: invalid param type\\n"" )"	1081:2:27371:27411	26810	60	True				
ANR	27257	CallExpression	"DBGPRINTF ( ""error: invalid param type\\n"" )"		26810	0					
ANR	27258	Callee	DBGPRINTF		26810	0					
ANR	27259	Identifier	DBGPRINTF		26810	0					
ANR	27260	ArgumentList	"""error: invalid param type\\n"""		26810	1					
ANR	27261	Argument	"""error: invalid param type\\n"""		26810	0					
ANR	27262	PrimaryExpression	"""error: invalid param type\\n"""		26810	0					
ANR	27263	ExpressionStatement	r = 0	1082:2:27415:27420	26810	61	True				
ANR	27264	AssignmentExpression	r = 0		26810	0		=			
ANR	27265	Identifier	r		26810	0					
ANR	27266	PrimaryExpression	0		26810	1					
ANR	27267	BreakStatement	break ;	1083:2:27424:27429	26810	62	True				
ANR	27268	Label	done :	1085:0:27434:27438	26810	7	True				
ANR	27269	Identifier	done		26810	0					
ANR	27270	ReturnStatement	return r ;	1085:6:27440:27448	26810	8	True				
ANR	27271	Identifier	r		26810	0					
ANR	27272	ReturnType	static int		26810	1					
ANR	27273	Identifier	nvlstGetParam		26810	2					
ANR	27274	ParameterList	"struct nvlst * valnode , struct cnfparamdescr * param , struct cnfparamvals * val"		26810	3					
ANR	27275	Parameter	struct nvlst * valnode	1002:14:25349:25369	26810	0	True				
ANR	27276	ParameterType	struct nvlst *		26810	0					
ANR	27277	Identifier	valnode		26810	1					
ANR	27278	Parameter	struct cnfparamdescr * param	1002:37:25372:25398	26810	1	True				
ANR	27279	ParameterType	struct cnfparamdescr *		26810	0					
ANR	27280	Identifier	param		26810	1					
ANR	27281	Parameter	struct cnfparamvals * val	1003:8:25409:25432	26810	2	True				
ANR	27282	ParameterType	struct cnfparamvals *		26810	0					
ANR	27283	Identifier	val		26810	1					
ANR	27284	CFGEntryNode	ENTRY		26810		True				
ANR	27285	CFGExitNode	EXIT		26810		True				
ANR	27286	Symbol	cstr		26810						
ANR	27287	Symbol	doGetGID		26810						
ANR	27288	Symbol	doGetBinary		26810						
ANR	27289	Symbol	valnode -> val		26810						
ANR	27290	Symbol	val -> val		26810						
ANR	27291	Symbol	eCmdHdlrArray		26810						
ANR	27292	Symbol	* valnode		26810						
ANR	27293	Symbol	* val		26810						
ANR	27294	Symbol	valnode -> bUsed		26810						
ANR	27295	Symbol	doGetPositiveInt		26810						
ANR	27296	Symbol	valnode -> val . d . estr		26810						
ANR	27297	Symbol	es_str2cstr		26810						
ANR	27298	Symbol	doGetInt		26810						
ANR	27299	Symbol	val -> val . d		26810						
ANR	27300	Symbol	param		26810						
ANR	27301	Symbol	param -> name		26810						
ANR	27302	Symbol	doGetChar		26810						
ANR	27303	Symbol	doGetFileCreateMode		26810						
ANR	27304	Symbol	valnode -> val . d		26810						
ANR	27305	Symbol	syslogPriNames		26810						
ANR	27306	Symbol	doGetQueueType		26810						
ANR	27307	Symbol	doGetNonNegInt		26810						
ANR	27308	Symbol	val -> val . d . estr		26810						
ANR	27309	Symbol	val		26810						
ANR	27310	Symbol	param -> type		26810						
ANR	27311	Symbol	NULL		26810						
ANR	27312	Symbol	syslogFacNames		26810						
ANR	27313	Symbol	doGetWord		26810						
ANR	27314	Symbol	valnode		26810						
ANR	27315	Symbol	val -> val . datatype		26810						
ANR	27316	Symbol	doGetArray		26810						
ANR	27317	Symbol	* param		26810						
ANR	27318	Symbol	r		26810						
ANR	27319	Symbol	doGetUID		26810						
ANR	27320	Symbol	es_strdup		26810						
ANR	27321	Symbol	valnode -> val . datatype		26810						
ANR	27322	Symbol	val -> val . d . n		26810						
ANR	27323	Symbol	doGetSize		26810						
ANR	27324	Symbol	decodeSyslogName		26810						
ANR	27325	Symbol	val -> bUsed		26810						
ANR	27326	Function	nvlstGetParams	1095:0:27793:29200							
ANR	27327	FunctionDef	"nvlstGetParams (struct nvlst * lst , struct cnfparamblk * params , struct cnfparamvals * vals)"		27326	0					
ANR	27328	CompoundStatement		1098:0:27911:29200	27326	0					
ANR	27329	IdentifierDeclStatement	int i ;	1099:1:27914:27919	27326	0	True				
ANR	27330	IdentifierDecl	i		27326	0					
ANR	27331	IdentifierDeclType	int		27326	0					
ANR	27332	Identifier	i		27326	1					
ANR	27333	IdentifierDeclStatement	int bValsWasNULL ;	1100:1:27922:27938	27326	1	True				
ANR	27334	IdentifierDecl	bValsWasNULL		27326	0					
ANR	27335	IdentifierDeclType	int		27326	0					
ANR	27336	Identifier	bValsWasNULL		27326	1					
ANR	27337	IdentifierDeclStatement	int bInError = 0 ;	1101:1:27941:27957	27326	2	True				
ANR	27338	IdentifierDecl	bInError = 0		27326	0					
ANR	27339	IdentifierDeclType	int		27326	0					
ANR	27340	Identifier	bInError		27326	1					
ANR	27341	AssignmentExpression	bInError = 0		27326	2		=			
ANR	27342	Identifier	bInError		27326	0					
ANR	27343	PrimaryExpression	0		27326	1					
ANR	27344	IdentifierDeclStatement	struct nvlst * valnode ;	1102:1:27960:27981	27326	3	True				
ANR	27345	IdentifierDecl	* valnode		27326	0					
ANR	27346	IdentifierDeclType	struct nvlst *		27326	0					
ANR	27347	Identifier	valnode		27326	1					
ANR	27348	IdentifierDeclStatement	struct cnfparamdescr * param ;	1103:1:27984:28011	27326	4	True				
ANR	27349	IdentifierDecl	* param		27326	0					
ANR	27350	IdentifierDeclType	struct cnfparamdescr *		27326	0					
ANR	27351	Identifier	param		27326	1					
ANR	27352	IfStatement	if ( params -> version != CNFPARAMBLK_VERSION )		27326	5					
ANR	27353	Condition	params -> version != CNFPARAMBLK_VERSION	1105:4:28018:28055	27326	0	True				
ANR	27354	EqualityExpression	params -> version != CNFPARAMBLK_VERSION		27326	0		!=			
ANR	27355	PtrMemberAccess	params -> version		27326	0					
ANR	27356	Identifier	params		27326	0					
ANR	27357	Identifier	version		27326	1					
ANR	27358	Identifier	CNFPARAMBLK_VERSION		27326	1					
ANR	27359	CompoundStatement		8:44:146:146	27326	1					
ANR	27360	Statement	DBGPRINTF	1106:2:28062:28070	27326	0	True				
ANR	27361	Statement	(	1106:11:28071:28071	27326	1	True				
ANR	27362	Statement	"""nvlstGetParams: invalid param block version """	1106:12:28072:28117	27326	2	True				
ANR	27363	Statement	"""%d, expected %d\\n"""	1107:5:28124:28142	27326	3	True				
ANR	27364	Statement	","	1107:24:28143:28143	27326	4	True				
ANR	27365	Statement	params	1108:5:28150:28155	27326	5	True				
ANR	27366	Statement	->	1108:11:28156:28157	27326	6	True				
ANR	27367	Statement	version	1108:13:28158:28164	27326	7	True				
ANR	27368	Statement	","	1108:20:28165:28165	27326	8	True				
ANR	27369	Statement	CNFPARAMBLK_VERSION	1108:22:28167:28185	27326	9	True				
ANR	27370	Statement	)	1108:41:28186:28186	27326	10	True				
ANR	27371	ExpressionStatement		1108:42:28187:28187	27326	11	True				
ANR	27372	ReturnStatement	return NULL ;	1109:2:28191:28202	27326	12	True				
ANR	27373	Identifier	NULL		27326	0					
ANR	27374	IfStatement	if ( vals == NULL )		27326	6					
ANR	27375	Condition	vals == NULL	1112:4:28213:28224	27326	0	True				
ANR	27376	EqualityExpression	vals == NULL		27326	0		==			
ANR	27377	Identifier	vals		27326	0					
ANR	27378	Identifier	NULL		27326	1					
ANR	27379	CompoundStatement		15:18:315:315	27326	1					
ANR	27380	ExpressionStatement	bValsWasNULL = 1	1113:2:28231:28247	27326	0	True				
ANR	27381	AssignmentExpression	bValsWasNULL = 1		27326	0		=			
ANR	27382	Identifier	bValsWasNULL		27326	0					
ANR	27383	PrimaryExpression	1		27326	1					
ANR	27384	IfStatement	"if ( ( vals = calloc ( params -> nParams , sizeof ( struct cnfparamvals ) ) ) == NULL )"		27326	1					
ANR	27385	Condition	"( vals = calloc ( params -> nParams , sizeof ( struct cnfparamvals ) ) ) == NULL"	1114:5:28254:28328	27326	0	True				
ANR	27386	EqualityExpression	"( vals = calloc ( params -> nParams , sizeof ( struct cnfparamvals ) ) ) == NULL"		27326	0		==			
ANR	27387	AssignmentExpression	"vals = calloc ( params -> nParams , sizeof ( struct cnfparamvals ) )"		27326	0		=			
ANR	27388	Identifier	vals		27326	0					
ANR	27389	CallExpression	"calloc ( params -> nParams , sizeof ( struct cnfparamvals ) )"		27326	1					
ANR	27390	Callee	calloc		27326	0					
ANR	27391	Identifier	calloc		27326	0					
ANR	27392	ArgumentList	params -> nParams		27326	1					
ANR	27393	Argument	params -> nParams		27326	0					
ANR	27394	PtrMemberAccess	params -> nParams		27326	0					
ANR	27395	Identifier	params		27326	0					
ANR	27396	Identifier	nParams		27326	1					
ANR	27397	Argument	sizeof ( struct cnfparamvals )		27326	1					
ANR	27398	SizeofExpression	sizeof ( struct cnfparamvals )		27326	0					
ANR	27399	Sizeof	sizeof		27326	0					
ANR	27400	SizeofOperand	struct cnfparamvals		27326	1					
ANR	27401	Identifier	NULL		27326	1					
ANR	27402	ReturnStatement	return NULL ;	1116:3:28334:28345	27326	1	True				
ANR	27403	Identifier	NULL		27326	0					
ANR	27404	ElseStatement	else		27326	0					
ANR	27405	CompoundStatement		20:8:443:443	27326	0					
ANR	27406	ExpressionStatement	bValsWasNULL = 0	1118:2:28359:28375	27326	0	True				
ANR	27407	AssignmentExpression	bValsWasNULL = 0		27326	0		=			
ANR	27408	Identifier	bValsWasNULL		27326	0					
ANR	27409	PrimaryExpression	0		27326	1					
ANR	27410	ForStatement	for ( i = 0 ; i < params -> nParams ; ++ i )		27326	7					
ANR	27411	ForInit	i = 0 ;	1121:5:28386:28392	27326	0	True				
ANR	27412	AssignmentExpression	i = 0		27326	0		=			
ANR	27413	Identifier	i		27326	0					
ANR	27414	PrimaryExpression	0		27326	1					
ANR	27415	Condition	i < params -> nParams	1121:13:28394:28412	27326	1	True				
ANR	27416	RelationalExpression	i < params -> nParams		27326	0		<			
ANR	27417	Identifier	i		27326	0					
ANR	27418	PtrMemberAccess	params -> nParams		27326	1					
ANR	27419	Identifier	params		27326	0					
ANR	27420	Identifier	nParams		27326	1					
ANR	27421	UnaryExpression	++ i	1121:35:28416:28418	27326	2	True				
ANR	27422	IncDec	++		27326	0					
ANR	27423	Identifier	i		27326	1					
ANR	27424	CompoundStatement		24:40:509:509	27326	3					
ANR	27425	ExpressionStatement	param = params -> descr + i	1122:2:28425:28450	27326	0	True				
ANR	27426	AssignmentExpression	param = params -> descr + i		27326	0		=			
ANR	27427	Identifier	param		27326	0					
ANR	27428	AdditiveExpression	params -> descr + i		27326	1		+			
ANR	27429	PtrMemberAccess	params -> descr		27326	0					
ANR	27430	Identifier	params		27326	0					
ANR	27431	Identifier	descr		27326	1					
ANR	27432	Identifier	i		27326	1					
ANR	27433	IfStatement	"if ( ( valnode = nvlstFindNameCStr ( lst , param -> name ) ) == NULL )"		27326	1					
ANR	27434	Condition	"( valnode = nvlstFindNameCStr ( lst , param -> name ) ) == NULL"	1123:5:28457:28511	27326	0	True				
ANR	27435	EqualityExpression	"( valnode = nvlstFindNameCStr ( lst , param -> name ) ) == NULL"		27326	0		==			
ANR	27436	AssignmentExpression	"valnode = nvlstFindNameCStr ( lst , param -> name )"		27326	0		=			
ANR	27437	Identifier	valnode		27326	0					
ANR	27438	CallExpression	"nvlstFindNameCStr ( lst , param -> name )"		27326	1					
ANR	27439	Callee	nvlstFindNameCStr		27326	0					
ANR	27440	Identifier	nvlstFindNameCStr		27326	0					
ANR	27441	ArgumentList	lst		27326	1					
ANR	27442	Argument	lst		27326	0					
ANR	27443	Identifier	lst		27326	0					
ANR	27444	Argument	param -> name		27326	1					
ANR	27445	PtrMemberAccess	param -> name		27326	0					
ANR	27446	Identifier	param		27326	0					
ANR	27447	Identifier	name		27326	1					
ANR	27448	Identifier	NULL		27326	1					
ANR	27449	CompoundStatement		26:62:602:602	27326	1					
ANR	27450	IfStatement	if ( param -> flags & CNFPARAM_REQUIRED )		27326	0					
ANR	27451	Condition	param -> flags & CNFPARAM_REQUIRED	1124:6:28522:28553	27326	0	True				
ANR	27452	BitAndExpression	param -> flags & CNFPARAM_REQUIRED		27326	0		&			
ANR	27453	PtrMemberAccess	param -> flags		27326	0					
ANR	27454	Identifier	param		27326	0					
ANR	27455	Identifier	flags		27326	1					
ANR	27456	Identifier	CNFPARAM_REQUIRED		27326	1					
ANR	27457	CompoundStatement		27:40:644:644	27326	1					
ANR	27458	Statement	parser_errmsg	1125:4:28562:28574	27326	0	True				
ANR	27459	Statement	(	1125:17:28575:28575	27326	1	True				
ANR	27460	Statement	"""parameter '%s' required but not specified - """	1125:18:28576:28621	27326	2	True				
ANR	27461	Statement	"""fix config"""	1126:6:28629:28640	27326	3	True				
ANR	27462	Statement	","	1126:18:28641:28641	27326	4	True				
ANR	27463	Statement	param	1126:20:28643:28647	27326	5	True				
ANR	27464	Statement	->	1126:25:28648:28649	27326	6	True				
ANR	27465	Statement	name	1126:27:28650:28653	27326	7	True				
ANR	27466	Statement	)	1126:31:28654:28654	27326	8	True				
ANR	27467	ExpressionStatement		1126:32:28655:28655	27326	9	True				
ANR	27468	ExpressionStatement	bInError = 1	1127:4:28661:28673	27326	10	True				
ANR	27469	AssignmentExpression	bInError = 1		27326	0		=			
ANR	27470	Identifier	bInError		27326	0					
ANR	27471	PrimaryExpression	1		27326	1					
ANR	27472	ContinueStatement	continue ;	1129:3:28683:28691	27326	1	True				
ANR	27473	IfStatement	if ( param -> flags & CNFPARAM_DEPRECATED )		27326	2					
ANR	27474	Condition	param -> flags & CNFPARAM_DEPRECATED	1131:5:28702:28735	27326	0	True				
ANR	27475	BitAndExpression	param -> flags & CNFPARAM_DEPRECATED		27326	0		&			
ANR	27476	PtrMemberAccess	param -> flags		27326	0					
ANR	27477	Identifier	param		27326	0					
ANR	27478	Identifier	flags		27326	1					
ANR	27479	Identifier	CNFPARAM_DEPRECATED		27326	1					
ANR	27480	CompoundStatement		34:41:826:826	27326	1					
ANR	27481	Statement	parser_errmsg	1132:3:28743:28755	27326	0	True				
ANR	27482	Statement	(	1132:16:28756:28756	27326	1	True				
ANR	27483	Statement	"""parameter '%s' deprecated but accepted, consider """	1132:17:28757:28807	27326	2	True				
ANR	27484	Statement	"""removing or replacing it"""	1133:5:28814:28839	27326	3	True				
ANR	27485	Statement	","	1133:31:28840:28840	27326	4	True				
ANR	27486	Statement	param	1133:33:28842:28846	27326	5	True				
ANR	27487	Statement	->	1133:38:28847:28848	27326	6	True				
ANR	27488	Statement	name	1133:40:28849:28852	27326	7	True				
ANR	27489	Statement	)	1133:44:28853:28853	27326	8	True				
ANR	27490	ExpressionStatement		1133:45:28854:28854	27326	9	True				
ANR	27491	IfStatement	if ( vals [ i ] . bUsed )		27326	3					
ANR	27492	Condition	vals [ i ] . bUsed	1135:5:28865:28877	27326	0	True				
ANR	27493	MemberAccess	vals [ i ] . bUsed		27326	0					
ANR	27494	ArrayIndexing	vals [ i ]		27326	0					
ANR	27495	Identifier	vals		27326	0					
ANR	27496	Identifier	i		27326	1					
ANR	27497	Identifier	bUsed		27326	1					
ANR	27498	CompoundStatement		38:20:968:968	27326	1					
ANR	27499	Statement	parser_errmsg	1136:3:28885:28897	27326	0	True				
ANR	27500	Statement	(	1136:16:28898:28898	27326	1	True				
ANR	27501	Statement	"""parameter '%s' specified more than once - """	1136:17:28899:28942	27326	2	True				
ANR	27502	Statement	"""one instance is ignored. Fix config"""	1137:5:28949:28985	27326	3	True				
ANR	27503	Statement	","	1137:42:28986:28986	27326	4	True				
ANR	27504	Statement	param	1137:44:28988:28992	27326	5	True				
ANR	27505	Statement	->	1137:49:28993:28994	27326	6	True				
ANR	27506	Statement	name	1137:51:28995:28998	27326	7	True				
ANR	27507	Statement	)	1137:55:28999:28999	27326	8	True				
ANR	27508	ExpressionStatement		1137:56:29000:29000	27326	9	True				
ANR	27509	ContinueStatement	continue ;	1138:3:29005:29013	27326	10	True				
ANR	27510	IfStatement	"if ( ! nvlstGetParam ( valnode , param , vals + i ) )"		27326	4					
ANR	27511	Condition	"! nvlstGetParam ( valnode , param , vals + i )"	1140:5:29024:29063	27326	0	True				
ANR	27512	UnaryOperationExpression	"! nvlstGetParam ( valnode , param , vals + i )"		27326	0					
ANR	27513	UnaryOperator	!		27326	0					
ANR	27514	CallExpression	"nvlstGetParam ( valnode , param , vals + i )"		27326	1					
ANR	27515	Callee	nvlstGetParam		27326	0					
ANR	27516	Identifier	nvlstGetParam		27326	0					
ANR	27517	ArgumentList	valnode		27326	1					
ANR	27518	Argument	valnode		27326	0					
ANR	27519	Identifier	valnode		27326	0					
ANR	27520	Argument	param		27326	1					
ANR	27521	Identifier	param		27326	0					
ANR	27522	Argument	vals + i		27326	2					
ANR	27523	AdditiveExpression	vals + i		27326	0		+			
ANR	27524	Identifier	vals		27326	0					
ANR	27525	Identifier	i		27326	1					
ANR	27526	CompoundStatement		43:47:1154:1154	27326	1					
ANR	27527	ExpressionStatement	bInError = 1	1141:3:29071:29083	27326	0	True				
ANR	27528	AssignmentExpression	bInError = 1		27326	0		=			
ANR	27529	Identifier	bInError		27326	0					
ANR	27530	PrimaryExpression	1		27326	1					
ANR	27531	IfStatement	if ( bInError )		27326	8					
ANR	27532	Condition	bInError	1145:4:29097:29104	27326	0	True				
ANR	27533	Identifier	bInError		27326	0					
ANR	27534	CompoundStatement		48:14:1195:1195	27326	1					
ANR	27535	IfStatement	if ( bValsWasNULL )		27326	0					
ANR	27536	Condition	bValsWasNULL	1146:5:29114:29125	27326	0	True				
ANR	27537	Identifier	bValsWasNULL		27326	0					
ANR	27538	ExpressionStatement	"cnfparamvalsDestruct ( vals , params )"	1147:3:29131:29165	27326	1	True				
ANR	27539	CallExpression	"cnfparamvalsDestruct ( vals , params )"		27326	0					
ANR	27540	Callee	cnfparamvalsDestruct		27326	0					
ANR	27541	Identifier	cnfparamvalsDestruct		27326	0					
ANR	27542	ArgumentList	vals		27326	1					
ANR	27543	Argument	vals		27326	0					
ANR	27544	Identifier	vals		27326	0					
ANR	27545	Argument	params		27326	1					
ANR	27546	Identifier	params		27326	0					
ANR	27547	ExpressionStatement	vals = NULL	1148:2:29169:29180	27326	1	True				
ANR	27548	AssignmentExpression	vals = NULL		27326	0		=			
ANR	27549	Identifier	vals		27326	0					
ANR	27550	Identifier	NULL		27326	1					
ANR	27551	ReturnStatement	return vals ;	1151:1:29187:29198	27326	9	True				
ANR	27552	Identifier	vals		27326	0					
ANR	27553	ReturnType	struct cnfparamvals *		27326	1					
ANR	27554	Identifier	nvlstGetParams		27326	2					
ANR	27555	ParameterList	"struct nvlst * lst , struct cnfparamblk * params , struct cnfparamvals * vals"		27326	3					
ANR	27556	Parameter	struct nvlst * lst	1096:15:27829:27845	27326	0	True				
ANR	27557	ParameterType	struct nvlst *		27326	0					
ANR	27558	Identifier	lst		27326	1					
ANR	27559	Parameter	struct cnfparamblk * params	1096:34:27848:27873	27326	1	True				
ANR	27560	ParameterType	struct cnfparamblk *		27326	0					
ANR	27561	Identifier	params		27326	1					
ANR	27562	Parameter	struct cnfparamvals * vals	1097:8:27884:27908	27326	2	True				
ANR	27563	ParameterType	struct cnfparamvals *		27326	0					
ANR	27564	Identifier	vals		27326	1					
ANR	27565	CFGEntryNode	ENTRY		27326		True				
ANR	27566	CFGExitNode	EXIT		27326		True				
ANR	27567	Symbol	CNFPARAM_DEPRECATED		27326						
ANR	27568	Symbol	vals		27326						
ANR	27569	Symbol	nvlstGetParam		27326						
ANR	27570	Symbol	CNFPARAM_REQUIRED		27326						
ANR	27571	Symbol	calloc		27326						
ANR	27572	Symbol	nvlstFindNameCStr		27326						
ANR	27573	Symbol	lst		27326						
ANR	27574	Symbol	param -> flags		27326						
ANR	27575	Symbol	* vals		27326						
ANR	27576	Symbol	CNFPARAMBLK_VERSION		27326						
ANR	27577	Symbol	params -> descr		27326						
ANR	27578	Symbol	param		27326						
ANR	27579	Symbol	param -> name		27326						
ANR	27580	Symbol	params -> version		27326						
ANR	27581	Symbol	vals [ i ] . bUsed		27326						
ANR	27582	Symbol	params -> nParams		27326						
ANR	27583	Symbol	* params		27326						
ANR	27584	Symbol	NULL		27326						
ANR	27585	Symbol	i		27326						
ANR	27586	Symbol	valnode		27326						
ANR	27587	Symbol	params		27326						
ANR	27588	Symbol	* param		27326						
ANR	27589	Symbol	bValsWasNULL		27326						
ANR	27590	Symbol	bInError		27326						
ANR	27591	Symbol	* i		27326						
ANR	27592	Function	cnfparamvalsIsSet	1158:0:29294:29691							
ANR	27593	FunctionDef	"cnfparamvalsIsSet (struct cnfparamblk * params , struct cnfparamvals * vals)"		27592	0					
ANR	27594	CompoundStatement		1160:0:29371:29691	27592	0					
ANR	27595	IdentifierDeclStatement	int i ;	1161:1:29374:29379	27592	0	True				
ANR	27596	IdentifierDecl	i		27592	0					
ANR	27597	IdentifierDeclType	int		27592	0					
ANR	27598	Identifier	i		27592	1					
ANR	27599	IfStatement	if ( vals == NULL )		27592	1					
ANR	27600	Condition	vals == NULL	1163:4:29386:29397	27592	0	True				
ANR	27601	EqualityExpression	vals == NULL		27592	0		==			
ANR	27602	Identifier	vals		27592	0					
ANR	27603	Identifier	NULL		27592	1					
ANR	27604	ReturnStatement	return 0 ;	1164:2:29402:29410	27592	1	True				
ANR	27605	PrimaryExpression	0		27592	0					
ANR	27606	IfStatement	if ( params -> version != CNFPARAMBLK_VERSION )		27592	2					
ANR	27607	Condition	params -> version != CNFPARAMBLK_VERSION	1165:4:29416:29453	27592	0	True				
ANR	27608	EqualityExpression	params -> version != CNFPARAMBLK_VERSION		27592	0		!=			
ANR	27609	PtrMemberAccess	params -> version		27592	0					
ANR	27610	Identifier	params		27592	0					
ANR	27611	Identifier	version		27592	1					
ANR	27612	Identifier	CNFPARAMBLK_VERSION		27592	1					
ANR	27613	CompoundStatement		6:44:84:84	27592	1					
ANR	27614	Statement	DBGPRINTF	1166:2:29460:29468	27592	0	True				
ANR	27615	Statement	(	1166:11:29469:29469	27592	1	True				
ANR	27616	Statement	"""nvlstGetParams: invalid param block version """	1166:12:29470:29515	27592	2	True				
ANR	27617	Statement	"""%d, expected %d\\n"""	1167:5:29522:29540	27592	3	True				
ANR	27618	Statement	","	1167:24:29541:29541	27592	4	True				
ANR	27619	Statement	params	1168:5:29548:29553	27592	5	True				
ANR	27620	Statement	->	1168:11:29554:29555	27592	6	True				
ANR	27621	Statement	version	1168:13:29556:29562	27592	7	True				
ANR	27622	Statement	","	1168:20:29563:29563	27592	8	True				
ANR	27623	Statement	CNFPARAMBLK_VERSION	1168:22:29565:29583	27592	9	True				
ANR	27624	Statement	)	1168:41:29584:29584	27592	10	True				
ANR	27625	ExpressionStatement		1168:42:29585:29585	27592	11	True				
ANR	27626	ReturnStatement	return 0 ;	1169:2:29589:29597	27592	12	True				
ANR	27627	PrimaryExpression	0		27592	0					
ANR	27628	ForStatement	for ( i = 0 ; i < params -> nParams ; ++ i )		27592	3					
ANR	27629	ForInit	i = 0 ;	1171:5:29607:29613	27592	0	True				
ANR	27630	AssignmentExpression	i = 0		27592	0		=			
ANR	27631	Identifier	i		27592	0					
ANR	27632	PrimaryExpression	0		27592	1					
ANR	27633	Condition	i < params -> nParams	1171:13:29615:29633	27592	1	True				
ANR	27634	RelationalExpression	i < params -> nParams		27592	0		<			
ANR	27635	Identifier	i		27592	0					
ANR	27636	PtrMemberAccess	params -> nParams		27592	1					
ANR	27637	Identifier	params		27592	0					
ANR	27638	Identifier	nParams		27592	1					
ANR	27639	UnaryExpression	++ i	1171:35:29637:29639	27592	2	True				
ANR	27640	IncDec	++		27592	0					
ANR	27641	Identifier	i		27592	1					
ANR	27642	CompoundStatement		12:40:270:270	27592	3					
ANR	27643	IfStatement	if ( vals [ i ] . bUsed )		27592	0					
ANR	27644	Condition	vals [ i ] . bUsed	1172:5:29649:29661	27592	0	True				
ANR	27645	MemberAccess	vals [ i ] . bUsed		27592	0					
ANR	27646	ArrayIndexing	vals [ i ]		27592	0					
ANR	27647	Identifier	vals		27592	0					
ANR	27648	Identifier	i		27592	1					
ANR	27649	Identifier	bUsed		27592	1					
ANR	27650	ReturnStatement	return 1 ;	1173:3:29667:29675	27592	1	True				
ANR	27651	PrimaryExpression	1		27592	0					
ANR	27652	ReturnStatement	return 0 ;	1175:1:29681:29689	27592	4	True				
ANR	27653	PrimaryExpression	0		27592	0					
ANR	27654	ReturnType	int		27592	1					
ANR	27655	Identifier	cnfparamvalsIsSet		27592	2					
ANR	27656	ParameterList	"struct cnfparamblk * params , struct cnfparamvals * vals"		27592	3					
ANR	27657	Parameter	struct cnfparamblk * params	1159:18:29316:29341	27592	0	True				
ANR	27658	ParameterType	struct cnfparamblk *		27592	0					
ANR	27659	Identifier	params		27592	1					
ANR	27660	Parameter	struct cnfparamvals * vals	1159:46:29344:29368	27592	1	True				
ANR	27661	ParameterType	struct cnfparamvals *		27592	0					
ANR	27662	Identifier	vals		27592	1					
ANR	27663	CFGEntryNode	ENTRY		27592		True				
ANR	27664	CFGExitNode	EXIT		27592		True				
ANR	27665	Symbol	NULL		27592						
ANR	27666	Symbol	* i		27592						
ANR	27667	Symbol	vals		27592						
ANR	27668	Symbol	i		27592						
ANR	27669	Symbol	params -> version		27592						
ANR	27670	Symbol	vals [ i ] . bUsed		27592						
ANR	27671	Symbol	params		27592						
ANR	27672	Symbol	* vals		27592						
ANR	27673	Symbol	CNFPARAMBLK_VERSION		27592						
ANR	27674	Symbol	params -> nParams		27592						
ANR	27675	Symbol	* params		27592						
ANR	27676	Function	cnfparamsPrint	1179:0:29695:30396							
ANR	27677	FunctionDef	"cnfparamsPrint (const struct cnfparamblk * params , const struct cnfparamvals * vals)"		27676	0					
ANR	27678	CompoundStatement		1181:0:29782:30396	27676	0					
ANR	27679	IdentifierDeclStatement	int i ;	1182:1:29785:29790	27676	0	True				
ANR	27680	IdentifierDecl	i		27676	0					
ANR	27681	IdentifierDeclType	int		27676	0					
ANR	27682	Identifier	i		27676	1					
ANR	27683	IdentifierDeclStatement	char * cstr ;	1183:1:29793:29803	27676	1	True				
ANR	27684	IdentifierDecl	* cstr		27676	0					
ANR	27685	IdentifierDeclType	char *		27676	0					
ANR	27686	Identifier	cstr		27676	1					
ANR	27687	IfStatement	if ( ! Debug )		27676	2					
ANR	27688	Condition	! Debug	1185:4:29810:29815	27676	0	True				
ANR	27689	UnaryOperationExpression	! Debug		27676	0					
ANR	27690	UnaryOperator	!		27676	0					
ANR	27691	Identifier	Debug		27676	1					
ANR	27692	ReturnStatement	return ;	1186:2:29820:29826	27676	1	True				
ANR	27693	ForStatement	for ( i = 0 ; i < params -> nParams ; ++ i )		27676	3					
ANR	27694	ForInit	i = 0 ;	1188:5:29834:29840	27676	0	True				
ANR	27695	AssignmentExpression	i = 0		27676	0		=			
ANR	27696	Identifier	i		27676	0					
ANR	27697	PrimaryExpression	0		27676	1					
ANR	27698	Condition	i < params -> nParams	1188:13:29842:29860	27676	1	True				
ANR	27699	RelationalExpression	i < params -> nParams		27676	0		<			
ANR	27700	Identifier	i		27676	0					
ANR	27701	PtrMemberAccess	params -> nParams		27676	1					
ANR	27702	Identifier	params		27676	0					
ANR	27703	Identifier	nParams		27676	1					
ANR	27704	UnaryExpression	++ i	1188:35:29864:29866	27676	2	True				
ANR	27705	IncDec	++		27676	0					
ANR	27706	Identifier	i		27676	1					
ANR	27707	CompoundStatement		8:40:86:86	27676	3					
ANR	27708	ExpressionStatement	"dbgprintf ( ""%s: "" , params -> descr [ i ] . name )"	1189:2:29873:29913	27676	0	True				
ANR	27709	CallExpression	"dbgprintf ( ""%s: "" , params -> descr [ i ] . name )"		27676	0					
ANR	27710	Callee	dbgprintf		27676	0					
ANR	27711	Identifier	dbgprintf		27676	0					
ANR	27712	ArgumentList	"""%s: """		27676	1					
ANR	27713	Argument	"""%s: """		27676	0					
ANR	27714	PrimaryExpression	"""%s: """		27676	0					
ANR	27715	Argument	params -> descr [ i ] . name		27676	1					
ANR	27716	MemberAccess	params -> descr [ i ] . name		27676	0					
ANR	27717	ArrayIndexing	params -> descr [ i ]		27676	0					
ANR	27718	PtrMemberAccess	params -> descr		27676	0					
ANR	27719	Identifier	params		27676	0					
ANR	27720	Identifier	descr		27676	1					
ANR	27721	Identifier	i		27676	1					
ANR	27722	Identifier	name		27676	1					
ANR	27723	IfStatement	if ( vals [ i ] . bUsed )		27676	1					
ANR	27724	Condition	vals [ i ] . bUsed	1190:5:29920:29932	27676	0	True				
ANR	27725	MemberAccess	vals [ i ] . bUsed		27676	0					
ANR	27726	ArrayIndexing	vals [ i ]		27676	0					
ANR	27727	Identifier	vals		27676	0					
ANR	27728	Identifier	i		27676	1					
ANR	27729	Identifier	bUsed		27676	1					
ANR	27730	CompoundStatement		10:20:152:152	27676	1					
ANR	27731	SwitchStatement	switch ( vals [ i ] . val . datatype )		27676	0					
ANR	27732	Condition	vals [ i ] . val . datatype	1192:10:29972:29991	27676	0	True				
ANR	27733	MemberAccess	vals [ i ] . val . datatype		27676	0					
ANR	27734	MemberAccess	vals [ i ] . val		27676	0					
ANR	27735	ArrayIndexing	vals [ i ]		27676	0					
ANR	27736	Identifier	vals		27676	0					
ANR	27737	Identifier	i		27676	1					
ANR	27738	Identifier	val		27676	1					
ANR	27739	Identifier	datatype		27676	1					
ANR	27740	CompoundStatement		12:32:211:211	27676	1					
ANR	27741	Label	case 'S' :	1193:3:29999:30007	27676	0	True				
ANR	27742	ExpressionStatement	"cstr = es_str2cstr ( vals [ i ] . val . d . estr , NULL )"	1194:4:30013:30057	27676	1	True				
ANR	27743	AssignmentExpression	"cstr = es_str2cstr ( vals [ i ] . val . d . estr , NULL )"		27676	0		=			
ANR	27744	Identifier	cstr		27676	0					
ANR	27745	CallExpression	"es_str2cstr ( vals [ i ] . val . d . estr , NULL )"		27676	1					
ANR	27746	Callee	es_str2cstr		27676	0					
ANR	27747	Identifier	es_str2cstr		27676	0					
ANR	27748	ArgumentList	vals [ i ] . val . d . estr		27676	1					
ANR	27749	Argument	vals [ i ] . val . d . estr		27676	0					
ANR	27750	MemberAccess	vals [ i ] . val . d . estr		27676	0					
ANR	27751	MemberAccess	vals [ i ] . val . d		27676	0					
ANR	27752	MemberAccess	vals [ i ] . val		27676	0					
ANR	27753	ArrayIndexing	vals [ i ]		27676	0					
ANR	27754	Identifier	vals		27676	0					
ANR	27755	Identifier	i		27676	1					
ANR	27756	Identifier	val		27676	1					
ANR	27757	Identifier	d		27676	1					
ANR	27758	Identifier	estr		27676	1					
ANR	27759	Argument	NULL		27676	1					
ANR	27760	Identifier	NULL		27676	0					
ANR	27761	ExpressionStatement	"dbgprintf ( "" '%s'"" , cstr )"	1195:4:30063:30087	27676	2	True				
ANR	27762	CallExpression	"dbgprintf ( "" '%s'"" , cstr )"		27676	0					
ANR	27763	Callee	dbgprintf		27676	0					
ANR	27764	Identifier	dbgprintf		27676	0					
ANR	27765	ArgumentList	""" '%s'"""		27676	1					
ANR	27766	Argument	""" '%s'"""		27676	0					
ANR	27767	PrimaryExpression	""" '%s'"""		27676	0					
ANR	27768	Argument	cstr		27676	1					
ANR	27769	Identifier	cstr		27676	0					
ANR	27770	ExpressionStatement	free ( cstr )	1196:4:30093:30103	27676	3	True				
ANR	27771	CallExpression	free ( cstr )		27676	0					
ANR	27772	Callee	free		27676	0					
ANR	27773	Identifier	free		27676	0					
ANR	27774	ArgumentList	cstr		27676	1					
ANR	27775	Argument	cstr		27676	0					
ANR	27776	Identifier	cstr		27676	0					
ANR	27777	BreakStatement	break ;	1197:4:30109:30114	27676	4	True				
ANR	27778	Label	case 'A' :	1198:3:30119:30127	27676	5	True				
ANR	27779	ExpressionStatement	"cnfarrayPrint ( vals [ i ] . val . d . ar , 0 )"	1199:4:30133:30167	27676	6	True				
ANR	27780	CallExpression	"cnfarrayPrint ( vals [ i ] . val . d . ar , 0 )"		27676	0					
ANR	27781	Callee	cnfarrayPrint		27676	0					
ANR	27782	Identifier	cnfarrayPrint		27676	0					
ANR	27783	ArgumentList	vals [ i ] . val . d . ar		27676	1					
ANR	27784	Argument	vals [ i ] . val . d . ar		27676	0					
ANR	27785	MemberAccess	vals [ i ] . val . d . ar		27676	0					
ANR	27786	MemberAccess	vals [ i ] . val . d		27676	0					
ANR	27787	MemberAccess	vals [ i ] . val		27676	0					
ANR	27788	ArrayIndexing	vals [ i ]		27676	0					
ANR	27789	Identifier	vals		27676	0					
ANR	27790	Identifier	i		27676	1					
ANR	27791	Identifier	val		27676	1					
ANR	27792	Identifier	d		27676	1					
ANR	27793	Identifier	ar		27676	1					
ANR	27794	Argument	0		27676	1					
ANR	27795	PrimaryExpression	0		27676	0					
ANR	27796	BreakStatement	break ;	1200:4:30173:30178	27676	7	True				
ANR	27797	Label	case 'N' :	1201:3:30183:30191	27676	8	True				
ANR	27798	ExpressionStatement	"dbgprintf ( ""%lld"" , vals [ i ] . val . d . n )"	1202:4:30197:30231	27676	9	True				
ANR	27799	CallExpression	"dbgprintf ( ""%lld"" , vals [ i ] . val . d . n )"		27676	0					
ANR	27800	Callee	dbgprintf		27676	0					
ANR	27801	Identifier	dbgprintf		27676	0					
ANR	27802	ArgumentList	"""%lld"""		27676	1					
ANR	27803	Argument	"""%lld"""		27676	0					
ANR	27804	PrimaryExpression	"""%lld"""		27676	0					
ANR	27805	Argument	vals [ i ] . val . d . n		27676	1					
ANR	27806	MemberAccess	vals [ i ] . val . d . n		27676	0					
ANR	27807	MemberAccess	vals [ i ] . val . d		27676	0					
ANR	27808	MemberAccess	vals [ i ] . val		27676	0					
ANR	27809	ArrayIndexing	vals [ i ]		27676	0					
ANR	27810	Identifier	vals		27676	0					
ANR	27811	Identifier	i		27676	1					
ANR	27812	Identifier	val		27676	1					
ANR	27813	Identifier	d		27676	1					
ANR	27814	Identifier	n		27676	1					
ANR	27815	BreakStatement	break ;	1203:4:30237:30242	27676	10	True				
ANR	27816	Label	default :	1204:3:30247:30254	27676	11	True				
ANR	27817	Identifier	default		27676	0					
ANR	27818	ExpressionStatement	"dbgprintf ( ""(unsupported datatype %c)"" , vals [ i ] . val . datatype )"	1205:4:30260:30327	27676	12	True				
ANR	27819	CallExpression	"dbgprintf ( ""(unsupported datatype %c)"" , vals [ i ] . val . datatype )"		27676	0					
ANR	27820	Callee	dbgprintf		27676	0					
ANR	27821	Identifier	dbgprintf		27676	0					
ANR	27822	ArgumentList	"""(unsupported datatype %c)"""		27676	1					
ANR	27823	Argument	"""(unsupported datatype %c)"""		27676	0					
ANR	27824	PrimaryExpression	"""(unsupported datatype %c)"""		27676	0					
ANR	27825	Argument	vals [ i ] . val . datatype		27676	1					
ANR	27826	MemberAccess	vals [ i ] . val . datatype		27676	0					
ANR	27827	MemberAccess	vals [ i ] . val		27676	0					
ANR	27828	ArrayIndexing	vals [ i ]		27676	0					
ANR	27829	Identifier	vals		27676	0					
ANR	27830	Identifier	i		27676	1					
ANR	27831	Identifier	val		27676	1					
ANR	27832	Identifier	datatype		27676	1					
ANR	27833	ElseStatement	else		27676	0					
ANR	27834	CompoundStatement		28:9:560:560	27676	0					
ANR	27835	ExpressionStatement	"dbgprintf ( ""(unset)"" )"	1209:3:30348:30368	27676	0	True				
ANR	27836	CallExpression	"dbgprintf ( ""(unset)"" )"		27676	0					
ANR	27837	Callee	dbgprintf		27676	0					
ANR	27838	Identifier	dbgprintf		27676	0					
ANR	27839	ArgumentList	"""(unset)"""		27676	1					
ANR	27840	Argument	"""(unset)"""		27676	0					
ANR	27841	PrimaryExpression	"""(unset)"""		27676	0					
ANR	27842	ExpressionStatement	"dbgprintf ( ""\\n"" )"	1211:2:30376:30391	27676	2	True				
ANR	27843	CallExpression	"dbgprintf ( ""\\n"" )"		27676	0					
ANR	27844	Callee	dbgprintf		27676	0					
ANR	27845	Identifier	dbgprintf		27676	0					
ANR	27846	ArgumentList	"""\\n"""		27676	1					
ANR	27847	Argument	"""\\n"""		27676	0					
ANR	27848	PrimaryExpression	"""\\n"""		27676	0					
ANR	27849	ReturnType	void		27676	1					
ANR	27850	Identifier	cnfparamsPrint		27676	2					
ANR	27851	ParameterList	"const struct cnfparamblk * params , const struct cnfparamvals * vals"		27676	3					
ANR	27852	Parameter	const struct cnfparamblk * params	1180:15:29715:29746	27676	0	True				
ANR	27853	ParameterType	const struct cnfparamblk *		27676	0					
ANR	27854	Identifier	params		27676	1					
ANR	27855	Parameter	const struct cnfparamvals * vals	1180:49:29749:29779	27676	1	True				
ANR	27856	ParameterType	const struct cnfparamvals *		27676	0					
ANR	27857	Identifier	vals		27676	1					
ANR	27858	CFGEntryNode	ENTRY		27676		True				
ANR	27859	CFGExitNode	EXIT		27676		True				
ANR	27860	Symbol	cstr		27676						
ANR	27861	Symbol	NULL		27676						
ANR	27862	Symbol	vals		27676						
ANR	27863	Symbol	i		27676						
ANR	27864	Symbol	vals [ i ] . val		27676						
ANR	27865	Symbol	params		27676						
ANR	27866	Symbol	* * params		27676						
ANR	27867	Symbol	* vals		27676						
ANR	27868	Symbol	vals [ i ] . val . d . estr		27676						
ANR	27869	Symbol	* params -> descr		27676						
ANR	27870	Symbol	es_str2cstr		27676						
ANR	27871	Symbol	params -> descr [ i ] . name		27676						
ANR	27872	Symbol	* i		27676						
ANR	27873	Symbol	params -> descr		27676						
ANR	27874	Symbol	vals [ i ] . val . d		27676						
ANR	27875	Symbol	vals [ i ] . bUsed		27676						
ANR	27876	Symbol	Debug		27676						
ANR	27877	Symbol	params -> nParams		27676						
ANR	27878	Symbol	vals [ i ] . val . datatype		27676						
ANR	27879	Symbol	vals [ i ] . val . d . ar		27676						
ANR	27880	Symbol	* params		27676						
ANR	27881	Symbol	vals [ i ] . val . d . n		27676						
ANR	27882	Function	cnfobjNew	1215:0:30399:30661							
ANR	27883	FunctionDef	"cnfobjNew (enum cnfobjType objType , struct nvlst * lst)"		27882	0					
ANR	27884	CompoundStatement		1217:0:30468:30661	27882	0					
ANR	27885	IdentifierDeclStatement	struct cnfobj * o ;	1218:1:30471:30487	27882	0	True				
ANR	27886	IdentifierDecl	* o		27882	0					
ANR	27887	IdentifierDeclType	struct cnfobj *		27882	0					
ANR	27888	Identifier	o		27882	1					
ANR	27889	IfStatement	if ( ( o = malloc ( sizeof ( struct cnfobj ) ) ) != NULL )		27882	1					
ANR	27890	Condition	( o = malloc ( sizeof ( struct cnfobj ) ) ) != NULL	1220:4:30494:30536	27882	0	True				
ANR	27891	EqualityExpression	( o = malloc ( sizeof ( struct cnfobj ) ) ) != NULL		27882	0		!=			
ANR	27892	AssignmentExpression	o = malloc ( sizeof ( struct cnfobj ) )		27882	0		=			
ANR	27893	Identifier	o		27882	0					
ANR	27894	CallExpression	malloc ( sizeof ( struct cnfobj ) )		27882	1					
ANR	27895	Callee	malloc		27882	0					
ANR	27896	Identifier	malloc		27882	0					
ANR	27897	ArgumentList	sizeof ( struct cnfobj )		27882	1					
ANR	27898	Argument	sizeof ( struct cnfobj )		27882	0					
ANR	27899	SizeofExpression	sizeof ( struct cnfobj )		27882	0					
ANR	27900	Sizeof	sizeof		27882	0					
ANR	27901	SizeofOperand	struct cnfobj		27882	1					
ANR	27902	Identifier	NULL		27882	1					
ANR	27903	CompoundStatement		4:49:70:70	27882	1					
ANR	27904	ExpressionStatement	nvlstChkDupes ( lst )	1221:2:30543:30561	27882	0	True				
ANR	27905	CallExpression	nvlstChkDupes ( lst )		27882	0					
ANR	27906	Callee	nvlstChkDupes		27882	0					
ANR	27907	Identifier	nvlstChkDupes		27882	0					
ANR	27908	ArgumentList	lst		27882	1					
ANR	27909	Argument	lst		27882	0					
ANR	27910	Identifier	lst		27882	0					
ANR	27911	ExpressionStatement	o -> objType = objType	1222:2:30565:30585	27882	1	True				
ANR	27912	AssignmentExpression	o -> objType = objType		27882	0		=			
ANR	27913	PtrMemberAccess	o -> objType		27882	0					
ANR	27914	Identifier	o		27882	0					
ANR	27915	Identifier	objType		27882	1					
ANR	27916	Identifier	objType		27882	1					
ANR	27917	ExpressionStatement	o -> nvlst = lst	1223:2:30589:30603	27882	2	True				
ANR	27918	AssignmentExpression	o -> nvlst = lst		27882	0		=			
ANR	27919	PtrMemberAccess	o -> nvlst		27882	0					
ANR	27920	Identifier	o		27882	0					
ANR	27921	Identifier	nvlst		27882	1					
ANR	27922	Identifier	lst		27882	1					
ANR	27923	ExpressionStatement	o -> subobjs = NULL	1224:2:30607:30624	27882	3	True				
ANR	27924	AssignmentExpression	o -> subobjs = NULL		27882	0		=			
ANR	27925	PtrMemberAccess	o -> subobjs		27882	0					
ANR	27926	Identifier	o		27882	0					
ANR	27927	Identifier	subobjs		27882	1					
ANR	27928	Identifier	NULL		27882	1					
ANR	27929	ExpressionStatement	o -> script = NULL	1225:2:30628:30644	27882	4	True				
ANR	27930	AssignmentExpression	o -> script = NULL		27882	0		=			
ANR	27931	PtrMemberAccess	o -> script		27882	0					
ANR	27932	Identifier	o		27882	0					
ANR	27933	Identifier	script		27882	1					
ANR	27934	Identifier	NULL		27882	1					
ANR	27935	ReturnStatement	return o ;	1228:1:30651:30659	27882	2	True				
ANR	27936	Identifier	o		27882	0					
ANR	27937	ReturnType	struct cnfobj *		27882	1					
ANR	27938	Identifier	cnfobjNew		27882	2					
ANR	27939	ParameterList	"enum cnfobjType objType , struct nvlst * lst"		27882	3					
ANR	27940	Parameter	enum cnfobjType objType	1216:10:30424:30446	27882	0	True				
ANR	27941	ParameterType	enum cnfobjType		27882	0					
ANR	27942	Identifier	objType		27882	1					
ANR	27943	Parameter	struct nvlst * lst	1216:35:30449:30465	27882	1	True				
ANR	27944	ParameterType	struct nvlst *		27882	0					
ANR	27945	Identifier	lst		27882	1					
ANR	27946	CFGEntryNode	ENTRY		27882		True				
ANR	27947	CFGExitNode	EXIT		27882		True				
ANR	27948	Symbol	malloc		27882						
ANR	27949	Symbol	NULL		27882						
ANR	27950	Symbol	o -> subobjs		27882						
ANR	27951	Symbol	* o		27882						
ANR	27952	Symbol	o -> objType		27882						
ANR	27953	Symbol	o -> nvlst		27882						
ANR	27954	Symbol	lst		27882						
ANR	27955	Symbol	o -> script		27882						
ANR	27956	Symbol	objType		27882						
ANR	27957	Symbol	o		27882						
ANR	27958	Function	cnfobjDestruct	1231:0:30664:30792							
ANR	27959	FunctionDef	cnfobjDestruct (struct cnfobj * o)		27958	0					
ANR	27960	CompoundStatement		1233:0:30702:30792	27958	0					
ANR	27961	IfStatement	if ( o != NULL )		27958	0					
ANR	27962	Condition	o != NULL	1234:4:30708:30716	27958	0	True				
ANR	27963	EqualityExpression	o != NULL		27958	0		!=			
ANR	27964	Identifier	o		27958	0					
ANR	27965	Identifier	NULL		27958	1					
ANR	27966	CompoundStatement		2:15:16:16	27958	1					
ANR	27967	ExpressionStatement	nvlstDestruct ( o -> nvlst )	1235:2:30723:30746	27958	0	True				
ANR	27968	CallExpression	nvlstDestruct ( o -> nvlst )		27958	0					
ANR	27969	Callee	nvlstDestruct		27958	0					
ANR	27970	Identifier	nvlstDestruct		27958	0					
ANR	27971	ArgumentList	o -> nvlst		27958	1					
ANR	27972	Argument	o -> nvlst		27958	0					
ANR	27973	PtrMemberAccess	o -> nvlst		27958	0					
ANR	27974	Identifier	o		27958	0					
ANR	27975	Identifier	nvlst		27958	1					
ANR	27976	ExpressionStatement	objlstDestruct ( o -> subobjs )	1236:2:30750:30776	27958	1	True				
ANR	27977	CallExpression	objlstDestruct ( o -> subobjs )		27958	0					
ANR	27978	Callee	objlstDestruct		27958	0					
ANR	27979	Identifier	objlstDestruct		27958	0					
ANR	27980	ArgumentList	o -> subobjs		27958	1					
ANR	27981	Argument	o -> subobjs		27958	0					
ANR	27982	PtrMemberAccess	o -> subobjs		27958	0					
ANR	27983	Identifier	o		27958	0					
ANR	27984	Identifier	subobjs		27958	1					
ANR	27985	ExpressionStatement	free ( o )	1237:2:30780:30787	27958	2	True				
ANR	27986	CallExpression	free ( o )		27958	0					
ANR	27987	Callee	free		27958	0					
ANR	27988	Identifier	free		27958	0					
ANR	27989	ArgumentList	o		27958	1					
ANR	27990	Argument	o		27958	0					
ANR	27991	Identifier	o		27958	0					
ANR	27992	ReturnType	void		27958	1					
ANR	27993	Identifier	cnfobjDestruct		27958	2					
ANR	27994	ParameterList	struct cnfobj * o		27958	3					
ANR	27995	Parameter	struct cnfobj * o	1232:15:30684:30699	27958	0	True				
ANR	27996	ParameterType	struct cnfobj *		27958	0					
ANR	27997	Identifier	o		27958	1					
ANR	27998	CFGEntryNode	ENTRY		27958		True				
ANR	27999	CFGExitNode	EXIT		27958		True				
ANR	28000	Symbol	NULL		27958						
ANR	28001	Symbol	o -> subobjs		27958						
ANR	28002	Symbol	* o		27958						
ANR	28003	Symbol	o -> nvlst		27958						
ANR	28004	Symbol	o		27958						
ANR	28005	Function	cnfobjPrint	1241:0:30795:30910							
ANR	28006	FunctionDef	cnfobjPrint (struct cnfobj * o)		28005	0					
ANR	28007	CompoundStatement		1243:0:30830:30910	28005	0					
ANR	28008	ExpressionStatement	"dbgprintf ( ""obj: '%s'\\n"" , cnfobjType2str ( o -> objType ) )"	1244:1:30833:30885	28005	0	True				
ANR	28009	CallExpression	"dbgprintf ( ""obj: '%s'\\n"" , cnfobjType2str ( o -> objType ) )"		28005	0					
ANR	28010	Callee	dbgprintf		28005	0					
ANR	28011	Identifier	dbgprintf		28005	0					
ANR	28012	ArgumentList	"""obj: '%s'\\n"""		28005	1					
ANR	28013	Argument	"""obj: '%s'\\n"""		28005	0					
ANR	28014	PrimaryExpression	"""obj: '%s'\\n"""		28005	0					
ANR	28015	Argument	cnfobjType2str ( o -> objType )		28005	1					
ANR	28016	CallExpression	cnfobjType2str ( o -> objType )		28005	0					
ANR	28017	Callee	cnfobjType2str		28005	0					
ANR	28018	Identifier	cnfobjType2str		28005	0					
ANR	28019	ArgumentList	o -> objType		28005	1					
ANR	28020	Argument	o -> objType		28005	0					
ANR	28021	PtrMemberAccess	o -> objType		28005	0					
ANR	28022	Identifier	o		28005	0					
ANR	28023	Identifier	objType		28005	1					
ANR	28024	ExpressionStatement	nvlstPrint ( o -> nvlst )	1245:1:30888:30908	28005	1	True				
ANR	28025	CallExpression	nvlstPrint ( o -> nvlst )		28005	0					
ANR	28026	Callee	nvlstPrint		28005	0					
ANR	28027	Identifier	nvlstPrint		28005	0					
ANR	28028	ArgumentList	o -> nvlst		28005	1					
ANR	28029	Argument	o -> nvlst		28005	0					
ANR	28030	PtrMemberAccess	o -> nvlst		28005	0					
ANR	28031	Identifier	o		28005	0					
ANR	28032	Identifier	nvlst		28005	1					
ANR	28033	ReturnType	void		28005	1					
ANR	28034	Identifier	cnfobjPrint		28005	2					
ANR	28035	ParameterList	struct cnfobj * o		28005	3					
ANR	28036	Parameter	struct cnfobj * o	1242:12:30812:30827	28005	0	True				
ANR	28037	ParameterType	struct cnfobj *		28005	0					
ANR	28038	Identifier	o		28005	1					
ANR	28039	CFGEntryNode	ENTRY		28005		True				
ANR	28040	CFGExitNode	EXIT		28005		True				
ANR	28041	Symbol	cnfobjType2str		28005						
ANR	28042	Symbol	o -> objType		28005						
ANR	28043	Symbol	* o		28005						
ANR	28044	Symbol	o -> nvlst		28005						
ANR	28045	Symbol	o		28005						
ANR	28046	Function	cnfexprNew	1249:0:30914:31319							
ANR	28047	FunctionDef	"cnfexprNew (unsigned nodetype , struct cnfexpr * l , struct cnfexpr * r)"		28046	0					
ANR	28048	CompoundStatement		1251:0:30998:31319	28046	0					
ANR	28049	IdentifierDeclStatement	struct cnfexpr * expr ;	1252:1:31001:31021	28046	0	True				
ANR	28050	IdentifierDecl	* expr		28046	0					
ANR	28051	IdentifierDeclType	struct cnfexpr *		28046	0					
ANR	28052	Identifier	expr		28046	1					
ANR	28053	IfStatement	if ( nodetype == 'M' && r -> nodetype == 'N' )		28046	1					
ANR	28054	Condition	nodetype == 'M' && r -> nodetype == 'N'	1255:4:31075:31111	28046	0	True				
ANR	28055	AndExpression	nodetype == 'M' && r -> nodetype == 'N'		28046	0		&&			
ANR	28056	EqualityExpression	nodetype == 'M'		28046	0		==			
ANR	28057	Identifier	nodetype		28046	0					
ANR	28058	PrimaryExpression	'M'		28046	1					
ANR	28059	EqualityExpression	r -> nodetype == 'N'		28046	1		==			
ANR	28060	PtrMemberAccess	r -> nodetype		28046	0					
ANR	28061	Identifier	r		28046	0					
ANR	28062	Identifier	nodetype		28046	1					
ANR	28063	PrimaryExpression	'N'		28046	1					
ANR	28064	CompoundStatement		5:43:115:115	28046	1					
ANR	28065	ExpressionStatement	( ( struct cnfnumval * ) r ) -> val *= - 1	1256:2:31118:31151	28046	0	True				
ANR	28066	AssignmentExpression	( ( struct cnfnumval * ) r ) -> val *= - 1		28046	0		*=			
ANR	28067	PtrMemberAccess	( ( struct cnfnumval * ) r ) -> val		28046	0					
ANR	28068	CastExpression	( struct cnfnumval * ) r		28046	0					
ANR	28069	CastTarget	struct cnfnumval *		28046	0					
ANR	28070	Identifier	r		28046	1					
ANR	28071	Identifier	val		28046	1					
ANR	28072	UnaryOperationExpression	- 1		28046	1					
ANR	28073	UnaryOperator	-		28046	0					
ANR	28074	PrimaryExpression	1		28046	1					
ANR	28075	ExpressionStatement	expr = r	1257:2:31155:31163	28046	1	True				
ANR	28076	AssignmentExpression	expr = r		28046	0		=			
ANR	28077	Identifier	expr		28046	0					
ANR	28078	Identifier	r		28046	1					
ANR	28079	GotoStatement	goto done ;	1258:2:31167:31176	28046	2	True				
ANR	28080	Identifier	done		28046	0					
ANR	28081	IfStatement	if ( ( expr = malloc ( sizeof ( struct cnfexpr ) ) ) != NULL )		28046	2					
ANR	28082	Condition	( expr = malloc ( sizeof ( struct cnfexpr ) ) ) != NULL	1261:4:31186:31232	28046	0	True				
ANR	28083	EqualityExpression	( expr = malloc ( sizeof ( struct cnfexpr ) ) ) != NULL		28046	0		!=			
ANR	28084	AssignmentExpression	expr = malloc ( sizeof ( struct cnfexpr ) )		28046	0		=			
ANR	28085	Identifier	expr		28046	0					
ANR	28086	CallExpression	malloc ( sizeof ( struct cnfexpr ) )		28046	1					
ANR	28087	Callee	malloc		28046	0					
ANR	28088	Identifier	malloc		28046	0					
ANR	28089	ArgumentList	sizeof ( struct cnfexpr )		28046	1					
ANR	28090	Argument	sizeof ( struct cnfexpr )		28046	0					
ANR	28091	SizeofExpression	sizeof ( struct cnfexpr )		28046	0					
ANR	28092	Sizeof	sizeof		28046	0					
ANR	28093	SizeofOperand	struct cnfexpr		28046	1					
ANR	28094	Identifier	NULL		28046	1					
ANR	28095	CompoundStatement		11:53:236:236	28046	1					
ANR	28096	ExpressionStatement	expr -> nodetype = nodetype	1262:2:31239:31264	28046	0	True				
ANR	28097	AssignmentExpression	expr -> nodetype = nodetype		28046	0		=			
ANR	28098	PtrMemberAccess	expr -> nodetype		28046	0					
ANR	28099	Identifier	expr		28046	0					
ANR	28100	Identifier	nodetype		28046	1					
ANR	28101	Identifier	nodetype		28046	1					
ANR	28102	ExpressionStatement	expr -> l = l	1263:2:31268:31279	28046	1	True				
ANR	28103	AssignmentExpression	expr -> l = l		28046	0		=			
ANR	28104	PtrMemberAccess	expr -> l		28046	0					
ANR	28105	Identifier	expr		28046	0					
ANR	28106	Identifier	l		28046	1					
ANR	28107	Identifier	l		28046	1					
ANR	28108	ExpressionStatement	expr -> r = r	1264:2:31283:31294	28046	2	True				
ANR	28109	AssignmentExpression	expr -> r = r		28046	0		=			
ANR	28110	PtrMemberAccess	expr -> r		28046	0					
ANR	28111	Identifier	expr		28046	0					
ANR	28112	Identifier	r		28046	1					
ANR	28113	Identifier	r		28046	1					
ANR	28114	Label	done :	1266:0:31299:31303	28046	3	True				
ANR	28115	Identifier	done		28046	0					
ANR	28116	ReturnStatement	return expr ;	1267:1:31306:31317	28046	4	True				
ANR	28117	Identifier	expr		28046	0					
ANR	28118	ReturnType	struct cnfexpr *		28046	1					
ANR	28119	Identifier	cnfexprNew		28046	2					
ANR	28120	ParameterList	"unsigned nodetype , struct cnfexpr * l , struct cnfexpr * r"		28046	3					
ANR	28121	Parameter	unsigned nodetype	1250:11:30941:30957	28046	0	True				
ANR	28122	ParameterType	unsigned		28046	0					
ANR	28123	Identifier	nodetype		28046	1					
ANR	28124	Parameter	struct cnfexpr * l	1250:30:30960:30976	28046	1	True				
ANR	28125	ParameterType	struct cnfexpr *		28046	0					
ANR	28126	Identifier	l		28046	1					
ANR	28127	Parameter	struct cnfexpr * r	1250:49:30979:30995	28046	2	True				
ANR	28128	ParameterType	struct cnfexpr *		28046	0					
ANR	28129	Identifier	r		28046	1					
ANR	28130	CFGEntryNode	ENTRY		28046		True				
ANR	28131	CFGExitNode	EXIT		28046		True				
ANR	28132	Symbol	( ( struct cnfnumval * ) r ) -> val		28046						
ANR	28133	Symbol	malloc		28046						
ANR	28134	Symbol	nodetype		28046						
ANR	28135	Symbol	NULL		28046						
ANR	28136	Symbol	expr -> nodetype		28046						
ANR	28137	Symbol	expr -> r		28046						
ANR	28138	Symbol	r -> nodetype		28046						
ANR	28139	Symbol	l		28046						
ANR	28140	Symbol	expr -> l		28046						
ANR	28141	Symbol	r		28046						
ANR	28142	Symbol	* expr		28046						
ANR	28143	Symbol	expr		28046						
ANR	28144	Symbol	* r		28046						
ANR	28145	Function	str2num	1271:0:31323:31873							
ANR	28146	FunctionDef	"str2num (es_str_t * s , int * bSuccess)"		28145	0					
ANR	28147	CompoundStatement		1273:0:31374:31873	28145	0					
ANR	28148	IdentifierDeclStatement	size_t i ;	1274:1:31377:31385	28145	0	True				
ANR	28149	IdentifierDecl	i		28145	0					
ANR	28150	IdentifierDeclType	size_t		28145	0					
ANR	28151	Identifier	i		28145	1					
ANR	28152	IdentifierDeclStatement	int neg ;	1275:1:31388:31395	28145	1	True				
ANR	28153	IdentifierDecl	neg		28145	0					
ANR	28154	IdentifierDeclType	int		28145	0					
ANR	28155	Identifier	neg		28145	1					
ANR	28156	IdentifierDeclStatement	int64_t num = 0 ;	1276:1:31398:31413	28145	2	True				
ANR	28157	IdentifierDecl	num = 0		28145	0					
ANR	28158	IdentifierDeclType	int64_t		28145	0					
ANR	28159	Identifier	num		28145	1					
ANR	28160	AssignmentExpression	num = 0		28145	2		=			
ANR	28161	Identifier	num		28145	0					
ANR	28162	PrimaryExpression	0		28145	1					
ANR	28163	Statement	const	1277:1:31416:31420	28145	3	True				
ANR	28164	Statement	uchar	1277:7:31422:31426	28145	4	True				
ANR	28165	Statement	*	1277:13:31428:31428	28145	5	True				
ANR	28166	Statement	const	1277:14:31429:31433	28145	6	True				
ANR	28167	ExpressionStatement	c = es_getBufAddr ( s )	1277:20:31435:31455	28145	7	True				
ANR	28168	AssignmentExpression	c = es_getBufAddr ( s )		28145	0		=			
ANR	28169	Identifier	c		28145	0					
ANR	28170	CallExpression	es_getBufAddr ( s )		28145	1					
ANR	28171	Callee	es_getBufAddr		28145	0					
ANR	28172	Identifier	es_getBufAddr		28145	0					
ANR	28173	ArgumentList	s		28145	1					
ANR	28174	Argument	s		28145	0					
ANR	28175	Identifier	s		28145	0					
ANR	28176	IfStatement	if ( s -> lenStr == 0 )		28145	8					
ANR	28177	Condition	s -> lenStr == 0	1279:4:31462:31475	28145	0	True				
ANR	28178	EqualityExpression	s -> lenStr == 0		28145	0		==			
ANR	28179	PtrMemberAccess	s -> lenStr		28145	0					
ANR	28180	Identifier	s		28145	0					
ANR	28181	Identifier	lenStr		28145	1					
ANR	28182	PrimaryExpression	0		28145	1					
ANR	28183	CompoundStatement		7:20:103:103	28145	1					
ANR	28184	ExpressionStatement	"DBGPRINTF ( ""rainerscript: str2num: strlen == 0; invalid input (no string)\\n"" )"	1280:2:31482:31558	28145	0	True				
ANR	28185	CallExpression	"DBGPRINTF ( ""rainerscript: str2num: strlen == 0; invalid input (no string)\\n"" )"		28145	0					
ANR	28186	Callee	DBGPRINTF		28145	0					
ANR	28187	Identifier	DBGPRINTF		28145	0					
ANR	28188	ArgumentList	"""rainerscript: str2num: strlen == 0; invalid input (no string)\\n"""		28145	1					
ANR	28189	Argument	"""rainerscript: str2num: strlen == 0; invalid input (no string)\\n"""		28145	0					
ANR	28190	PrimaryExpression	"""rainerscript: str2num: strlen == 0; invalid input (no string)\\n"""		28145	0					
ANR	28191	IfStatement	if ( bSuccess != NULL )		28145	1					
ANR	28192	Condition	bSuccess != NULL	1281:5:31565:31580	28145	0	True				
ANR	28193	EqualityExpression	bSuccess != NULL		28145	0		!=			
ANR	28194	Identifier	bSuccess		28145	0					
ANR	28195	Identifier	NULL		28145	1					
ANR	28196	CompoundStatement		9:23:208:208	28145	1					
ANR	28197	ExpressionStatement	* bSuccess = 1	1282:3:31588:31601	28145	0	True				
ANR	28198	AssignmentExpression	* bSuccess = 1		28145	0		=			
ANR	28199	UnaryOperationExpression	* bSuccess		28145	0					
ANR	28200	UnaryOperator	*		28145	0					
ANR	28201	Identifier	bSuccess		28145	1					
ANR	28202	PrimaryExpression	1		28145	1					
ANR	28203	GotoStatement	goto done ;	1284:2:31609:31618	28145	2	True				
ANR	28204	Identifier	done		28145	0					
ANR	28205	IfStatement	if ( c [ 0 ] == '-' )		28145	9					
ANR	28206	Condition	c [ 0 ] == '-'	1286:4:31627:31637	28145	0	True				
ANR	28207	EqualityExpression	c [ 0 ] == '-'		28145	0		==			
ANR	28208	ArrayIndexing	c [ 0 ]		28145	0					
ANR	28209	Identifier	c		28145	0					
ANR	28210	PrimaryExpression	0		28145	1					
ANR	28211	PrimaryExpression	'-'		28145	1					
ANR	28212	CompoundStatement		14:17:265:265	28145	1					
ANR	28213	ExpressionStatement	neg = - 1	1287:2:31644:31652	28145	0	True				
ANR	28214	AssignmentExpression	neg = - 1		28145	0		=			
ANR	28215	Identifier	neg		28145	0					
ANR	28216	UnaryOperationExpression	- 1		28145	1					
ANR	28217	UnaryOperator	-		28145	0					
ANR	28218	PrimaryExpression	1		28145	1					
ANR	28219	ExpressionStatement	i = - 1	1288:2:31656:31662	28145	1	True				
ANR	28220	AssignmentExpression	i = - 1		28145	0		=			
ANR	28221	Identifier	i		28145	0					
ANR	28222	UnaryOperationExpression	- 1		28145	1					
ANR	28223	UnaryOperator	-		28145	0					
ANR	28224	PrimaryExpression	1		28145	1					
ANR	28225	ElseStatement	else		28145	0					
ANR	28226	CompoundStatement		17:8:297:297	28145	0					
ANR	28227	ExpressionStatement	neg = 1	1290:2:31676:31683	28145	0	True				
ANR	28228	AssignmentExpression	neg = 1		28145	0		=			
ANR	28229	Identifier	neg		28145	0					
ANR	28230	PrimaryExpression	1		28145	1					
ANR	28231	ExpressionStatement	i = 0	1291:2:31687:31692	28145	1	True				
ANR	28232	AssignmentExpression	i = 0		28145	0		=			
ANR	28233	Identifier	i		28145	0					
ANR	28234	PrimaryExpression	0		28145	1					
ANR	28235	WhileStatement	while ( i < s -> lenStr && isdigit ( c [ i ] ) )		28145	10					
ANR	28236	Condition	i < s -> lenStr && isdigit ( c [ i ] )	1293:7:31704:31733	28145	0	True				
ANR	28237	AndExpression	i < s -> lenStr && isdigit ( c [ i ] )		28145	0		&&			
ANR	28238	RelationalExpression	i < s -> lenStr		28145	0		<			
ANR	28239	Identifier	i		28145	0					
ANR	28240	PtrMemberAccess	s -> lenStr		28145	1					
ANR	28241	Identifier	s		28145	0					
ANR	28242	Identifier	lenStr		28145	1					
ANR	28243	CallExpression	isdigit ( c [ i ] )		28145	1					
ANR	28244	Callee	isdigit		28145	0					
ANR	28245	Identifier	isdigit		28145	0					
ANR	28246	ArgumentList	c [ i ]		28145	1					
ANR	28247	Argument	c [ i ]		28145	0					
ANR	28248	ArrayIndexing	c [ i ]		28145	0					
ANR	28249	Identifier	c		28145	0					
ANR	28250	Identifier	i		28145	1					
ANR	28251	CompoundStatement		21:39:361:361	28145	1					
ANR	28252	ExpressionStatement	num = num * 10 + c [ i ] - '0'	1294:2:31740:31767	28145	0	True				
ANR	28253	AssignmentExpression	num = num * 10 + c [ i ] - '0'		28145	0		=			
ANR	28254	Identifier	num		28145	0					
ANR	28255	AdditiveExpression	num * 10 + c [ i ] - '0'		28145	1		+			
ANR	28256	MultiplicativeExpression	num * 10		28145	0		*			
ANR	28257	Identifier	num		28145	0					
ANR	28258	PrimaryExpression	10		28145	1					
ANR	28259	AdditiveExpression	c [ i ] - '0'		28145	1		-			
ANR	28260	ArrayIndexing	c [ i ]		28145	0					
ANR	28261	Identifier	c		28145	0					
ANR	28262	Identifier	i		28145	1					
ANR	28263	PrimaryExpression	'0'		28145	1					
ANR	28264	ExpressionStatement	++ i	1295:2:31771:31774	28145	1	True				
ANR	28265	UnaryExpression	++ i		28145	0					
ANR	28266	IncDec	++		28145	0					
ANR	28267	Identifier	i		28145	1					
ANR	28268	ExpressionStatement	num *= neg	1297:1:31780:31790	28145	11	True				
ANR	28269	AssignmentExpression	num *= neg		28145	0		*=			
ANR	28270	Identifier	num		28145	0					
ANR	28271	Identifier	neg		28145	1					
ANR	28272	IfStatement	if ( bSuccess != NULL )		28145	12					
ANR	28273	Condition	bSuccess != NULL	1298:4:31796:31811	28145	0	True				
ANR	28274	EqualityExpression	bSuccess != NULL		28145	0		!=			
ANR	28275	Identifier	bSuccess		28145	0					
ANR	28276	Identifier	NULL		28145	1					
ANR	28277	ExpressionStatement	* bSuccess = ( i == s -> lenStr ) ? 1 : 0	1299:2:31816:31852	28145	1	True				
ANR	28278	AssignmentExpression	* bSuccess = ( i == s -> lenStr ) ? 1 : 0		28145	0		=			
ANR	28279	UnaryOperationExpression	* bSuccess		28145	0					
ANR	28280	UnaryOperator	*		28145	0					
ANR	28281	Identifier	bSuccess		28145	1					
ANR	28282	ConditionalExpression	( i == s -> lenStr ) ? 1 : 0		28145	1					
ANR	28283	Condition	i == s -> lenStr		28145	0					
ANR	28284	EqualityExpression	i == s -> lenStr		28145	0		==			
ANR	28285	Identifier	i		28145	0					
ANR	28286	PtrMemberAccess	s -> lenStr		28145	1					
ANR	28287	Identifier	s		28145	0					
ANR	28288	Identifier	lenStr		28145	1					
ANR	28289	PrimaryExpression	1		28145	1					
ANR	28290	PrimaryExpression	0		28145	2					
ANR	28291	Label	done :	1300:0:31854:31858	28145	13	True				
ANR	28292	Identifier	done		28145	0					
ANR	28293	ReturnStatement	return num ;	1301:1:31861:31871	28145	14	True				
ANR	28294	Identifier	num		28145	0					
ANR	28295	ReturnType	static int64_t		28145	1					
ANR	28296	Identifier	str2num		28145	2					
ANR	28297	ParameterList	"es_str_t * s , int * bSuccess"		28145	3					
ANR	28298	Parameter	es_str_t * s	1272:8:31346:31356	28145	0	True				
ANR	28299	ParameterType	es_str_t *		28145	0					
ANR	28300	Identifier	s		28145	1					
ANR	28301	Parameter	int * bSuccess	1272:21:31359:31371	28145	1	True				
ANR	28302	ParameterType	int *		28145	0					
ANR	28303	Identifier	bSuccess		28145	1					
ANR	28304	CFGEntryNode	ENTRY		28145		True				
ANR	28305	CFGExitNode	EXIT		28145		True				
ANR	28306	Symbol	bSuccess		28145						
ANR	28307	Symbol	c		28145						
ANR	28308	Symbol	NULL		28145						
ANR	28309	Symbol	num		28145						
ANR	28310	Symbol	i		28145						
ANR	28311	Symbol	* bSuccess		28145						
ANR	28312	Symbol	* c		28145						
ANR	28313	Symbol	s -> lenStr		28145						
ANR	28314	Symbol	es_getBufAddr		28145						
ANR	28315	Symbol	neg		28145						
ANR	28316	Symbol	s		28145						
ANR	28317	Symbol	* i		28145						
ANR	28318	Symbol	* s		28145						
ANR	28319	Symbol	isdigit		28145						
ANR	28320	Function	var2Number	1311:0:32197:32527							
ANR	28321	FunctionDef	"var2Number (struct svar * r , int * bSuccess)"		28320	0					
ANR	28322	CompoundStatement		1313:0:32256:32527	28320	0					
ANR	28323	IdentifierDeclStatement	long long n = 0 ;	1314:1:32259:32274	28320	0	True				
ANR	28324	IdentifierDecl	n = 0		28320	0					
ANR	28325	IdentifierDeclType	long long		28320	0					
ANR	28326	Identifier	n		28320	1					
ANR	28327	AssignmentExpression	n = 0		28320	2		=			
ANR	28328	Identifier	n		28320	0					
ANR	28329	PrimaryExpression	0		28320	1					
ANR	28330	IfStatement	if ( r -> datatype == 'S' )		28320	1					
ANR	28331	Condition	r -> datatype == 'S'	1315:4:32280:32297	28320	0	True				
ANR	28332	EqualityExpression	r -> datatype == 'S'		28320	0		==			
ANR	28333	PtrMemberAccess	r -> datatype		28320	0					
ANR	28334	Identifier	r		28320	0					
ANR	28335	Identifier	datatype		28320	1					
ANR	28336	PrimaryExpression	'S'		28320	1					
ANR	28337	CompoundStatement		3:24:43:43	28320	1					
ANR	28338	ExpressionStatement	"n = str2num ( r -> d . estr , bSuccess )"	1316:2:32304:32336	28320	0	True				
ANR	28339	AssignmentExpression	"n = str2num ( r -> d . estr , bSuccess )"		28320	0		=			
ANR	28340	Identifier	n		28320	0					
ANR	28341	CallExpression	"str2num ( r -> d . estr , bSuccess )"		28320	1					
ANR	28342	Callee	str2num		28320	0					
ANR	28343	Identifier	str2num		28320	0					
ANR	28344	ArgumentList	r -> d . estr		28320	1					
ANR	28345	Argument	r -> d . estr		28320	0					
ANR	28346	MemberAccess	r -> d . estr		28320	0					
ANR	28347	PtrMemberAccess	r -> d		28320	0					
ANR	28348	Identifier	r		28320	0					
ANR	28349	Identifier	d		28320	1					
ANR	28350	Identifier	estr		28320	1					
ANR	28351	Argument	bSuccess		28320	1					
ANR	28352	Identifier	bSuccess		28320	0					
ANR	28353	ElseStatement	else		28320	0					
ANR	28354	CompoundStatement		5:8:89:89	28320	0					
ANR	28355	IfStatement	if ( r -> datatype == 'J' )		28320	0					
ANR	28356	Condition	r -> datatype == 'J'	1318:5:32353:32370	28320	0	True				
ANR	28357	EqualityExpression	r -> datatype == 'J'		28320	0		==			
ANR	28358	PtrMemberAccess	r -> datatype		28320	0					
ANR	28359	Identifier	r		28320	0					
ANR	28360	Identifier	datatype		28320	1					
ANR	28361	PrimaryExpression	'J'		28320	1					
ANR	28362	CompoundStatement		6:25:116:116	28320	1					
ANR	28363	ExpressionStatement	n = ( r -> d . json == NULL ) ? 0 : json_object_get_int64 ( r -> d . json )	1319:3:32378:32440	28320	0	True				
ANR	28364	AssignmentExpression	n = ( r -> d . json == NULL ) ? 0 : json_object_get_int64 ( r -> d . json )		28320	0		=			
ANR	28365	Identifier	n		28320	0					
ANR	28366	ConditionalExpression	( r -> d . json == NULL ) ? 0 : json_object_get_int64 ( r -> d . json )		28320	1					
ANR	28367	Condition	r -> d . json == NULL		28320	0					
ANR	28368	EqualityExpression	r -> d . json == NULL		28320	0		==			
ANR	28369	MemberAccess	r -> d . json		28320	0					
ANR	28370	PtrMemberAccess	r -> d		28320	0					
ANR	28371	Identifier	r		28320	0					
ANR	28372	Identifier	d		28320	1					
ANR	28373	Identifier	json		28320	1					
ANR	28374	Identifier	NULL		28320	1					
ANR	28375	PrimaryExpression	0		28320	1					
ANR	28376	CallExpression	json_object_get_int64 ( r -> d . json )		28320	2					
ANR	28377	Callee	json_object_get_int64		28320	0					
ANR	28378	Identifier	json_object_get_int64		28320	0					
ANR	28379	ArgumentList	r -> d . json		28320	1					
ANR	28380	Argument	r -> d . json		28320	0					
ANR	28381	MemberAccess	r -> d . json		28320	0					
ANR	28382	PtrMemberAccess	r -> d		28320	0					
ANR	28383	Identifier	r		28320	0					
ANR	28384	Identifier	d		28320	1					
ANR	28385	Identifier	json		28320	1					
ANR	28386	ElseStatement	else		28320	0					
ANR	28387	CompoundStatement		8:9:194:194	28320	0					
ANR	28388	ExpressionStatement	n = r -> d . n	1321:3:32456:32466	28320	0	True				
ANR	28389	AssignmentExpression	n = r -> d . n		28320	0		=			
ANR	28390	Identifier	n		28320	0					
ANR	28391	MemberAccess	r -> d . n		28320	1					
ANR	28392	PtrMemberAccess	r -> d		28320	0					
ANR	28393	Identifier	r		28320	0					
ANR	28394	Identifier	d		28320	1					
ANR	28395	Identifier	n		28320	1					
ANR	28396	IfStatement	if ( bSuccess != NULL )		28320	1					
ANR	28397	Condition	bSuccess != NULL	1323:5:32477:32492	28320	0	True				
ANR	28398	EqualityExpression	bSuccess != NULL		28320	0		!=			
ANR	28399	Identifier	bSuccess		28320	0					
ANR	28400	Identifier	NULL		28320	1					
ANR	28401	ExpressionStatement	* bSuccess = 1	1324:3:32498:32511	28320	1	True				
ANR	28402	AssignmentExpression	* bSuccess = 1		28320	0		=			
ANR	28403	UnaryOperationExpression	* bSuccess		28320	0					
ANR	28404	UnaryOperator	*		28320	0					
ANR	28405	Identifier	bSuccess		28320	1					
ANR	28406	PrimaryExpression	1		28320	1					
ANR	28407	ReturnStatement	return n ;	1326:1:32517:32525	28320	2	True				
ANR	28408	Identifier	n		28320	0					
ANR	28409	ReturnType	static long long		28320	1					
ANR	28410	Identifier	var2Number		28320	2					
ANR	28411	ParameterList	"struct svar * r , int * bSuccess"		28320	3					
ANR	28412	Parameter	struct svar * r	1312:11:32225:32238	28320	0	True				
ANR	28413	ParameterType	struct svar *		28320	0					
ANR	28414	Identifier	r		28320	1					
ANR	28415	Parameter	int * bSuccess	1312:27:32241:32253	28320	1	True				
ANR	28416	ParameterType	int *		28320	0					
ANR	28417	Identifier	bSuccess		28320	1					
ANR	28418	CFGEntryNode	ENTRY		28320		True				
ANR	28419	CFGExitNode	EXIT		28320		True				
ANR	28420	Symbol	bSuccess		28320						
ANR	28421	Symbol	r -> d		28320						
ANR	28422	Symbol	NULL		28320						
ANR	28423	Symbol	r -> datatype		28320						
ANR	28424	Symbol	* bSuccess		28320						
ANR	28425	Symbol	n		28320						
ANR	28426	Symbol	r		28320						
ANR	28427	Symbol	str2num		28320						
ANR	28428	Symbol	r -> d . n		28320						
ANR	28429	Symbol	* r		28320						
ANR	28430	Symbol	r -> d . estr		28320						
ANR	28431	Symbol	json_object_get_int64		28320						
ANR	28432	Symbol	r -> d . json		28320						
ANR	28433	DeclStmt									
ANR	28434	Decl							es_str_t	es_str_t *	estr
ANR	28435	DeclStmt									
ANR	28436	Decl							const char	const char *	cstr
ANR	28437	DeclStmt									
ANR	28438	Decl							rs_size_t	rs_size_t	lenstr
ANR	28439	DeclStmt									
ANR	28440	Decl							uchar	uchar *	cstr
ANR	28441	DeclStmt									
ANR	28442	Decl							es_str_t	es_str_t *	estr
ANR	28443	DeclStmt									
ANR	28444	Decl							int	int	SKIP_NOTHING
ANR	28445	DeclStmt									
ANR	28446	Decl							int	int	SKIP_STRING
ANR	28447	Function	varFreeMembersSelectively	1378:0:33636:33869							
ANR	28448	FunctionDef	"varFreeMembersSelectively (const struct svar * r , const int skipMask)"		28447	0					
ANR	28449	CompoundStatement		1380:0:33716:33869	28447	0					
ANR	28450	IfStatement	if ( r -> datatype == 'J' )		28447	0					
ANR	28451	Condition	r -> datatype == 'J'	1381:4:33722:33739	28447	0	True				
ANR	28452	EqualityExpression	r -> datatype == 'J'		28447	0		==			
ANR	28453	PtrMemberAccess	r -> datatype		28447	0					
ANR	28454	Identifier	r		28447	0					
ANR	28455	Identifier	datatype		28447	1					
ANR	28456	PrimaryExpression	'J'		28447	1					
ANR	28457	CompoundStatement		2:24:25:25	28447	1					
ANR	28458	ExpressionStatement	json_object_put ( r -> d . json )	1382:2:33746:33772	28447	0	True				
ANR	28459	CallExpression	json_object_put ( r -> d . json )		28447	0					
ANR	28460	Callee	json_object_put		28447	0					
ANR	28461	Identifier	json_object_put		28447	0					
ANR	28462	ArgumentList	r -> d . json		28447	1					
ANR	28463	Argument	r -> d . json		28447	0					
ANR	28464	MemberAccess	r -> d . json		28447	0					
ANR	28465	PtrMemberAccess	r -> d		28447	0					
ANR	28466	Identifier	r		28447	0					
ANR	28467	Identifier	d		28447	1					
ANR	28468	Identifier	json		28447	1					
ANR	28469	ElseStatement	else		28447	0					
ANR	28470	IfStatement	if ( ! ( skipMask & SKIP_STRING ) && ( r -> datatype == 'S' ) )		28447	0					
ANR	28471	Condition	! ( skipMask & SKIP_STRING ) && ( r -> datatype == 'S' )	1383:12:33786:33834	28447	0	True				
ANR	28472	AndExpression	! ( skipMask & SKIP_STRING ) && ( r -> datatype == 'S' )		28447	0		&&			
ANR	28473	UnaryOperationExpression	! ( skipMask & SKIP_STRING )		28447	0					
ANR	28474	UnaryOperator	!		28447	0					
ANR	28475	BitAndExpression	skipMask & SKIP_STRING		28447	1		&			
ANR	28476	Identifier	skipMask		28447	0					
ANR	28477	Identifier	SKIP_STRING		28447	1					
ANR	28478	EqualityExpression	r -> datatype == 'S'		28447	1		==			
ANR	28479	PtrMemberAccess	r -> datatype		28447	0					
ANR	28480	Identifier	r		28447	0					
ANR	28481	Identifier	datatype		28447	1					
ANR	28482	PrimaryExpression	'S'		28447	1					
ANR	28483	CompoundStatement		4:63:120:120	28447	1					
ANR	28484	ExpressionStatement	es_deleteStr ( r -> d . estr )	1384:2:33841:33864	28447	0	True				
ANR	28485	CallExpression	es_deleteStr ( r -> d . estr )		28447	0					
ANR	28486	Callee	es_deleteStr		28447	0					
ANR	28487	Identifier	es_deleteStr		28447	0					
ANR	28488	ArgumentList	r -> d . estr		28447	1					
ANR	28489	Argument	r -> d . estr		28447	0					
ANR	28490	MemberAccess	r -> d . estr		28447	0					
ANR	28491	PtrMemberAccess	r -> d		28447	0					
ANR	28492	Identifier	r		28447	0					
ANR	28493	Identifier	d		28447	1					
ANR	28494	Identifier	estr		28447	1					
ANR	28495	ReturnType	static void		28447	1					
ANR	28496	Identifier	varFreeMembersSelectively		28447	2					
ANR	28497	ParameterList	"const struct svar * r , const int skipMask"		28447	3					
ANR	28498	Parameter	const struct svar * r	1379:26:33674:33693	28447	0	True				
ANR	28499	ParameterType	const struct svar *		28447	0					
ANR	28500	Identifier	r		28447	1					
ANR	28501	Parameter	const int skipMask	1379:48:33696:33713	28447	1	True				
ANR	28502	ParameterType	const int		28447	0					
ANR	28503	Identifier	skipMask		28447	1					
ANR	28504	CFGEntryNode	ENTRY		28447		True				
ANR	28505	CFGExitNode	EXIT		28447		True				
ANR	28506	Symbol	r		28447						
ANR	28507	Symbol	r -> d		28447						
ANR	28508	Symbol	SKIP_STRING		28447						
ANR	28509	Symbol	skipMask		28447						
ANR	28510	Symbol	r -> datatype		28447						
ANR	28511	Symbol	* r		28447						
ANR	28512	Symbol	r -> d . estr		28447						
ANR	28513	Symbol	r -> d . json		28447						
ANR	28514	Function	varFreeMembers	1388:0:33872:33968							
ANR	28515	FunctionDef	varFreeMembers (const struct svar * r)		28514	0					
ANR	28516	CompoundStatement		1390:0:33921:33968	28514	0					
ANR	28517	ExpressionStatement	"varFreeMembersSelectively ( r , SKIP_NOTHING )"	1391:1:33924:33966	28514	0	True				
ANR	28518	CallExpression	"varFreeMembersSelectively ( r , SKIP_NOTHING )"		28514	0					
ANR	28519	Callee	varFreeMembersSelectively		28514	0					
ANR	28520	Identifier	varFreeMembersSelectively		28514	0					
ANR	28521	ArgumentList	r		28514	1					
ANR	28522	Argument	r		28514	0					
ANR	28523	Identifier	r		28514	0					
ANR	28524	Argument	SKIP_NOTHING		28514	1					
ANR	28525	Identifier	SKIP_NOTHING		28514	0					
ANR	28526	ReturnType	static void		28514	1					
ANR	28527	Identifier	varFreeMembers		28514	2					
ANR	28528	ParameterList	const struct svar * r		28514	3					
ANR	28529	Parameter	const struct svar * r	1389:15:33899:33918	28514	0	True				
ANR	28530	ParameterType	const struct svar *		28514	0					
ANR	28531	Identifier	r		28514	1					
ANR	28532	CFGEntryNode	ENTRY		28514		True				
ANR	28533	CFGExitNode	EXIT		28514		True				
ANR	28534	Symbol	r		28514						
ANR	28535	Symbol	SKIP_NOTHING		28514						
ANR	28536	Function	doExtractFieldByChar	1395:0:33972:35420							
ANR	28537	FunctionDef	"doExtractFieldByChar (uchar * str , uchar delim , const int matchnbr , uchar * * resstr)"		28536	0					
ANR	28538	CompoundStatement		1397:0:34070:35420	28536	0					
ANR	28539	IdentifierDeclStatement	int iCurrFld ;	1398:1:34073:34085	28536	0	True				
ANR	28540	IdentifierDecl	iCurrFld		28536	0					
ANR	28541	IdentifierDeclType	int		28536	0					
ANR	28542	Identifier	iCurrFld		28536	1					
ANR	28543	IdentifierDeclStatement	int allocLen ;	1399:4:34091:34103	28536	1	True				
ANR	28544	IdentifierDecl	allocLen		28536	0					
ANR	28545	IdentifierDeclType	int		28536	0					
ANR	28546	Identifier	allocLen		28536	1					
ANR	28547	IdentifierDeclStatement	int iLen ;	1400:1:34106:34114	28536	2	True				
ANR	28548	IdentifierDecl	iLen		28536	0					
ANR	28549	IdentifierDeclType	int		28536	0					
ANR	28550	Identifier	iLen		28536	1					
ANR	28551	IdentifierDeclStatement	uchar * pBuf ;	1401:1:34117:34128	28536	3	True				
ANR	28552	IdentifierDecl	* pBuf		28536	0					
ANR	28553	IdentifierDeclType	uchar *		28536	0					
ANR	28554	Identifier	pBuf		28536	1					
ANR	28555	IdentifierDeclStatement	uchar * pFld ;	1402:1:34131:34142	28536	4	True				
ANR	28556	IdentifierDecl	* pFld		28536	0					
ANR	28557	IdentifierDeclType	uchar *		28536	0					
ANR	28558	Identifier	pFld		28536	1					
ANR	28559	IdentifierDeclStatement	uchar * pFldEnd ;	1403:1:34145:34159	28536	5	True				
ANR	28560	IdentifierDecl	* pFldEnd		28536	0					
ANR	28561	IdentifierDeclType	uchar *		28536	0					
ANR	28562	Identifier	pFldEnd		28536	1					
ANR	28563	ExpressionStatement	DEFiRet	1404:1:34162:34169	28536	6	True				
ANR	28564	Identifier	DEFiRet		28536	0					
ANR	28565	ExpressionStatement	iCurrFld = 1	1407:1:34217:34229	28536	7	True				
ANR	28566	AssignmentExpression	iCurrFld = 1		28536	0		=			
ANR	28567	Identifier	iCurrFld		28536	0					
ANR	28568	PrimaryExpression	1		28536	1					
ANR	28569	ExpressionStatement	pFld = str	1408:1:34232:34242	28536	8	True				
ANR	28570	AssignmentExpression	pFld = str		28536	0		=			
ANR	28571	Identifier	pFld		28536	0					
ANR	28572	Identifier	str		28536	1					
ANR	28573	WhileStatement	while ( * pFld && iCurrFld < matchnbr )		28536	9					
ANR	28574	Condition	* pFld && iCurrFld < matchnbr	1409:7:34251:34278	28536	0	True				
ANR	28575	AndExpression	* pFld && iCurrFld < matchnbr		28536	0		&&			
ANR	28576	UnaryOperationExpression	* pFld		28536	0					
ANR	28577	UnaryOperator	*		28536	0					
ANR	28578	Identifier	pFld		28536	1					
ANR	28579	RelationalExpression	iCurrFld < matchnbr		28536	1		<			
ANR	28580	Identifier	iCurrFld		28536	0					
ANR	28581	Identifier	matchnbr		28536	1					
ANR	28582	CompoundStatement		13:37:210:210	28536	1					
ANR	28583	WhileStatement	while ( * pFld && ( uchar ) * pFld != delim )		28536	0					
ANR	28584	Condition	* pFld && ( uchar ) * pFld != delim	1411:8:34363:34393	28536	0	True				
ANR	28585	AndExpression	* pFld && ( uchar ) * pFld != delim		28536	0		&&			
ANR	28586	UnaryOperationExpression	* pFld		28536	0					
ANR	28587	UnaryOperator	*		28536	0					
ANR	28588	Identifier	pFld		28536	1					
ANR	28589	EqualityExpression	( uchar ) * pFld != delim		28536	1		!=			
ANR	28590	CastExpression	( uchar ) * pFld		28536	0					
ANR	28591	CastTarget	uchar		28536	0					
ANR	28592	UnaryOperationExpression	* pFld		28536	1					
ANR	28593	UnaryOperator	*		28536	0					
ANR	28594	Identifier	pFld		28536	1					
ANR	28595	Identifier	delim		28536	1					
ANR	28596	ExpressionStatement	++ pFld	1412:3:34399:34405	28536	1	True				
ANR	28597	UnaryExpression	++ pFld		28536	0					
ANR	28598	IncDec	++		28536	0					
ANR	28599	Identifier	pFld		28536	1					
ANR	28600	IfStatement	if ( * pFld == delim )		28536	1					
ANR	28601	Condition	* pFld == delim	1413:5:34443:34456	28536	0	True				
ANR	28602	EqualityExpression	* pFld == delim		28536	0		==			
ANR	28603	UnaryOperationExpression	* pFld		28536	0					
ANR	28604	UnaryOperator	*		28536	0					
ANR	28605	Identifier	pFld		28536	1					
ANR	28606	Identifier	delim		28536	1					
ANR	28607	CompoundStatement		17:21:388:388	28536	1					
ANR	28608	ExpressionStatement	++ pFld	1414:3:34464:34470	28536	0	True				
ANR	28609	UnaryExpression	++ pFld		28536	0					
ANR	28610	IncDec	++		28536	0					
ANR	28611	Identifier	pFld		28536	1					
ANR	28612	ExpressionStatement	++ iCurrFld	1415:3:34488:34498	28536	1	True				
ANR	28613	UnaryExpression	++ iCurrFld		28536	0					
ANR	28614	IncDec	++		28536	0					
ANR	28615	Identifier	iCurrFld		28536	1					
ANR	28616	ExpressionStatement	"DBGPRINTF ( ""field() field requested %d, field found %d\\n"" , matchnbr , iCurrFld )"	1418:1:34508:34585	28536	10	True				
ANR	28617	CallExpression	"DBGPRINTF ( ""field() field requested %d, field found %d\\n"" , matchnbr , iCurrFld )"		28536	0					
ANR	28618	Callee	DBGPRINTF		28536	0					
ANR	28619	Identifier	DBGPRINTF		28536	0					
ANR	28620	ArgumentList	"""field() field requested %d, field found %d\\n"""		28536	1					
ANR	28621	Argument	"""field() field requested %d, field found %d\\n"""		28536	0					
ANR	28622	PrimaryExpression	"""field() field requested %d, field found %d\\n"""		28536	0					
ANR	28623	Argument	matchnbr		28536	1					
ANR	28624	Identifier	matchnbr		28536	0					
ANR	28625	Argument	iCurrFld		28536	2					
ANR	28626	Identifier	iCurrFld		28536	0					
ANR	28627	IfStatement	if ( iCurrFld == matchnbr )		28536	11					
ANR	28628	Condition	iCurrFld == matchnbr	1420:4:34593:34612	28536	0	True				
ANR	28629	EqualityExpression	iCurrFld == matchnbr		28536	0		==			
ANR	28630	Identifier	iCurrFld		28536	0					
ANR	28631	Identifier	matchnbr		28536	1					
ANR	28632	CompoundStatement		38:3:1124:1166	28536	1					
ANR	28633	ExpressionStatement	pFldEnd = pFld	1423:2:34701:34715	28536	0	True				
ANR	28634	AssignmentExpression	pFldEnd = pFld		28536	0		=			
ANR	28635	Identifier	pFldEnd		28536	0					
ANR	28636	Identifier	pFld		28536	1					
ANR	28637	WhileStatement	while ( * pFldEnd && * pFldEnd != delim )		28536	1					
ANR	28638	Condition	* pFldEnd && * pFldEnd != delim	1424:8:34725:34753	28536	0	True				
ANR	28639	AndExpression	* pFldEnd && * pFldEnd != delim		28536	0		&&			
ANR	28640	UnaryOperationExpression	* pFldEnd		28536	0					
ANR	28641	UnaryOperator	*		28536	0					
ANR	28642	Identifier	pFldEnd		28536	1					
ANR	28643	EqualityExpression	* pFldEnd != delim		28536	1		!=			
ANR	28644	UnaryOperationExpression	* pFldEnd		28536	0					
ANR	28645	UnaryOperator	*		28536	0					
ANR	28646	Identifier	pFldEnd		28536	1					
ANR	28647	Identifier	delim		28536	1					
ANR	28648	ExpressionStatement	++ pFldEnd	1425:3:34759:34768	28536	1	True				
ANR	28649	UnaryExpression	++ pFldEnd		28536	0					
ANR	28650	IncDec	++		28536	0					
ANR	28651	Identifier	pFldEnd		28536	1					
ANR	28652	ExpressionStatement	-- pFldEnd	1426:2:34772:34781	28536	2	True				
ANR	28653	UnaryExpression	-- pFldEnd		28536	0					
ANR	28654	IncDec	--		28536	0					
ANR	28655	Identifier	pFldEnd		28536	1					
ANR	28656	ExpressionStatement	iLen = pFldEnd - pFld + 1	1429:2:34952:34977	28536	3	True				
ANR	28657	AssignmentExpression	iLen = pFldEnd - pFld + 1		28536	0		=			
ANR	28658	Identifier	iLen		28536	0					
ANR	28659	AdditiveExpression	pFldEnd - pFld + 1		28536	1		-			
ANR	28660	Identifier	pFldEnd		28536	0					
ANR	28661	AdditiveExpression	pFld + 1		28536	1		+			
ANR	28662	Identifier	pFld		28536	0					
ANR	28663	PrimaryExpression	1		28536	1					
ANR	28664	ExpressionStatement	allocLen = iLen + 1	1430:2:35025:35044	28536	4	True				
ANR	28665	AssignmentExpression	allocLen = iLen + 1		28536	0		=			
ANR	28666	Identifier	allocLen		28536	0					
ANR	28667	AdditiveExpression	iLen + 1		28536	1		+			
ANR	28668	Identifier	iLen		28536	0					
ANR	28669	PrimaryExpression	1		28536	1					
ANR	28670	Statement	ifdef	1431:3:35049:35053	28536	5	True				
ANR	28671	Statement	VALGRIND	1431:9:35055:35062	28536	6	True				
ANR	28672	ExpressionStatement	allocLen += ( 3 - ( iLen % 4 ) )	1432:2:35066:35094	28536	7	True				
ANR	28673	AssignmentExpression	allocLen += ( 3 - ( iLen % 4 ) )		28536	0		+=			
ANR	28674	Identifier	allocLen		28536	0					
ANR	28675	AdditiveExpression	3 - ( iLen % 4 )		28536	1		-			
ANR	28676	PrimaryExpression	3		28536	0					
ANR	28677	MultiplicativeExpression	iLen % 4		28536	1		%			
ANR	28678	Identifier	iLen		28536	0					
ANR	28679	PrimaryExpression	4		28536	1					
ANR	28680	IdentifierDeclStatement	endif CHKmalloc ( pBuf = MALLOC ( allocLen ) ) ;	1434:3:35195:35237	28536	8	True				
ANR	28681	IdentifierDecl	CHKmalloc ( pBuf = MALLOC ( allocLen ) )		28536	0					
ANR	28682	IdentifierDeclType	endif		28536	0					
ANR	28683	Identifier	CHKmalloc		28536	1					
ANR	28684	AssignmentExpression	pBuf = MALLOC ( allocLen )		28536	2		=			
ANR	28685	Identifier	pBuf		28536	0					
ANR	28686	CallExpression	MALLOC ( allocLen )		28536	1					
ANR	28687	Callee	MALLOC		28536	0					
ANR	28688	Identifier	MALLOC		28536	0					
ANR	28689	ArgumentList	allocLen		28536	1					
ANR	28690	Argument	allocLen		28536	0					
ANR	28691	Identifier	allocLen		28536	0					
ANR	28692	ExpressionStatement	"memcpy ( pBuf , pFld , iLen )"	1437:2:35258:35282	28536	9	True				
ANR	28693	CallExpression	"memcpy ( pBuf , pFld , iLen )"		28536	0					
ANR	28694	Callee	memcpy		28536	0					
ANR	28695	Identifier	memcpy		28536	0					
ANR	28696	ArgumentList	pBuf		28536	1					
ANR	28697	Argument	pBuf		28536	0					
ANR	28698	Identifier	pBuf		28536	0					
ANR	28699	Argument	pFld		28536	1					
ANR	28700	Identifier	pFld		28536	0					
ANR	28701	Argument	iLen		28536	2					
ANR	28702	Identifier	iLen		28536	0					
ANR	28703	ExpressionStatement	pBuf [ iLen ] = '\\0'	1438:2:35286:35303	28536	10	True				
ANR	28704	AssignmentExpression	pBuf [ iLen ] = '\\0'		28536	0		=			
ANR	28705	ArrayIndexing	pBuf [ iLen ]		28536	0					
ANR	28706	Identifier	pBuf		28536	0					
ANR	28707	Identifier	iLen		28536	1					
ANR	28708	PrimaryExpression	'\\0'		28536	1					
ANR	28709	ExpressionStatement	* resstr = pBuf	1439:2:35326:35340	28536	11	True				
ANR	28710	AssignmentExpression	* resstr = pBuf		28536	0		=			
ANR	28711	UnaryOperationExpression	* resstr		28536	0					
ANR	28712	UnaryOperator	*		28536	0					
ANR	28713	Identifier	resstr		28536	1					
ANR	28714	Identifier	pBuf		28536	1					
ANR	28715	ElseStatement	else		28536	0					
ANR	28716	CompoundStatement		44:8:1279:1279	28536	0					
ANR	28717	ExpressionStatement	ABORT_FINALIZE ( RS_RET_FIELD_NOT_FOUND )	1441:2:35354:35392	28536	0	True				
ANR	28718	CallExpression	ABORT_FINALIZE ( RS_RET_FIELD_NOT_FOUND )		28536	0					
ANR	28719	Callee	ABORT_FINALIZE		28536	0					
ANR	28720	Identifier	ABORT_FINALIZE		28536	0					
ANR	28721	ArgumentList	RS_RET_FIELD_NOT_FOUND		28536	1					
ANR	28722	Argument	RS_RET_FIELD_NOT_FOUND		28536	0					
ANR	28723	Identifier	RS_RET_FIELD_NOT_FOUND		28536	0					
ANR	28724	Label	finalize_it :	1443:0:35397:35408	28536	12	True				
ANR	28725	Identifier	finalize_it		28536	0					
ANR	28726	ExpressionStatement	RETiRet	1444:1:35411:35418	28536	13	True				
ANR	28727	Identifier	RETiRet		28536	0					
ANR	28728	ReturnType	static rsRetVal		28536	1					
ANR	28729	Identifier	doExtractFieldByChar		28536	2					
ANR	28730	ParameterList	"uchar * str , uchar delim , const int matchnbr , uchar * * resstr"		28536	3					
ANR	28731	Parameter	uchar * str	1396:21:34009:34018	28536	0	True				
ANR	28732	ParameterType	uchar *		28536	0					
ANR	28733	Identifier	str		28536	1					
ANR	28734	Parameter	uchar delim	1396:33:34021:34031	28536	1	True				
ANR	28735	ParameterType	uchar		28536	0					
ANR	28736	Identifier	delim		28536	1					
ANR	28737	Parameter	const int matchnbr	1396:46:34034:34051	28536	2	True				
ANR	28738	ParameterType	const int		28536	0					
ANR	28739	Identifier	matchnbr		28536	1					
ANR	28740	Parameter	uchar * * resstr	1396:66:34054:34067	28536	3	True				
ANR	28741	ParameterType	uchar * *		28536	0					
ANR	28742	Identifier	resstr		28536	1					
ANR	28743	CFGEntryNode	ENTRY		28536		True				
ANR	28744	CFGExitNode	EXIT		28536		True				
ANR	28745	Symbol	pFldEnd		28536						
ANR	28746	Symbol	* resstr		28536						
ANR	28747	Symbol	* pFld		28536						
ANR	28748	Symbol	allocLen		28536						
ANR	28749	Symbol	matchnbr		28536						
ANR	28750	Symbol	str		28536						
ANR	28751	Symbol	pBuf		28536						
ANR	28752	Symbol	CHKmalloc		28536						
ANR	28753	Symbol	MALLOC		28536						
ANR	28754	Symbol	* pFldEnd		28536						
ANR	28755	Symbol	* pBuf		28536						
ANR	28756	Symbol	resstr		28536						
ANR	28757	Symbol	iCurrFld		28536						
ANR	28758	Symbol	iLen		28536						
ANR	28759	Symbol	RS_RET_FIELD_NOT_FOUND		28536						
ANR	28760	Symbol	pFld		28536						
ANR	28761	Symbol	* iLen		28536						
ANR	28762	Symbol	delim		28536						
ANR	28763	Function	doExtractFieldByStr	1448:0:35424:36643							
ANR	28764	FunctionDef	"doExtractFieldByStr (uchar * str , char * delim , const rs_size_t lenDelim , const int matchnbr , uchar * * resstr)"		28763	0					
ANR	28765	CompoundStatement		1450:0:35547:36643	28763	0					
ANR	28766	IdentifierDeclStatement	int iCurrFld ;	1451:1:35550:35562	28763	0	True				
ANR	28767	IdentifierDecl	iCurrFld		28763	0					
ANR	28768	IdentifierDeclType	int		28763	0					
ANR	28769	Identifier	iCurrFld		28763	1					
ANR	28770	IdentifierDeclStatement	int iLen ;	1452:1:35565:35573	28763	1	True				
ANR	28771	IdentifierDecl	iLen		28763	0					
ANR	28772	IdentifierDeclType	int		28763	0					
ANR	28773	Identifier	iLen		28763	1					
ANR	28774	IdentifierDeclStatement	uchar * pBuf ;	1453:1:35576:35587	28763	2	True				
ANR	28775	IdentifierDecl	* pBuf		28763	0					
ANR	28776	IdentifierDeclType	uchar *		28763	0					
ANR	28777	Identifier	pBuf		28763	1					
ANR	28778	IdentifierDeclStatement	uchar * pFld ;	1454:1:35590:35601	28763	3	True				
ANR	28779	IdentifierDecl	* pFld		28763	0					
ANR	28780	IdentifierDeclType	uchar *		28763	0					
ANR	28781	Identifier	pFld		28763	1					
ANR	28782	IdentifierDeclStatement	uchar * pFldEnd ;	1455:1:35604:35618	28763	4	True				
ANR	28783	IdentifierDecl	* pFldEnd		28763	0					
ANR	28784	IdentifierDeclType	uchar *		28763	0					
ANR	28785	Identifier	pFldEnd		28763	1					
ANR	28786	ExpressionStatement	DEFiRet	1456:1:35621:35628	28763	5	True				
ANR	28787	Identifier	DEFiRet		28763	0					
ANR	28788	IfStatement	if ( str == NULL || delim == NULL )		28763	6					
ANR	28789	Condition	str == NULL || delim == NULL	1458:5:35636:35663	28763	0	True				
ANR	28790	OrExpression	str == NULL || delim == NULL		28763	0		||			
ANR	28791	EqualityExpression	str == NULL		28763	0		==			
ANR	28792	Identifier	str		28763	0					
ANR	28793	Identifier	NULL		28763	1					
ANR	28794	EqualityExpression	delim == NULL		28763	1		==			
ANR	28795	Identifier	delim		28763	0					
ANR	28796	Identifier	NULL		28763	1					
ANR	28797	ExpressionStatement	ABORT_FINALIZE ( RS_RET_FIELD_NOT_FOUND )	1459:2:35668:35706	28763	1	True				
ANR	28798	CallExpression	ABORT_FINALIZE ( RS_RET_FIELD_NOT_FOUND )		28763	0					
ANR	28799	Callee	ABORT_FINALIZE		28763	0					
ANR	28800	Identifier	ABORT_FINALIZE		28763	0					
ANR	28801	ArgumentList	RS_RET_FIELD_NOT_FOUND		28763	1					
ANR	28802	Argument	RS_RET_FIELD_NOT_FOUND		28763	0					
ANR	28803	Identifier	RS_RET_FIELD_NOT_FOUND		28763	0					
ANR	28804	ExpressionStatement	iCurrFld = 1	1462:1:35754:35766	28763	7	True				
ANR	28805	AssignmentExpression	iCurrFld = 1		28763	0		=			
ANR	28806	Identifier	iCurrFld		28763	0					
ANR	28807	PrimaryExpression	1		28763	1					
ANR	28808	ExpressionStatement	pFld = str	1463:1:35769:35779	28763	8	True				
ANR	28809	AssignmentExpression	pFld = str		28763	0		=			
ANR	28810	Identifier	pFld		28763	0					
ANR	28811	Identifier	str		28763	1					
ANR	28812	WhileStatement	while ( pFld != NULL && iCurrFld < matchnbr )		28763	9					
ANR	28813	Condition	pFld != NULL && iCurrFld < matchnbr	1464:7:35788:35822	28763	0	True				
ANR	28814	AndExpression	pFld != NULL && iCurrFld < matchnbr		28763	0		&&			
ANR	28815	EqualityExpression	pFld != NULL		28763	0		!=			
ANR	28816	Identifier	pFld		28763	0					
ANR	28817	Identifier	NULL		28763	1					
ANR	28818	RelationalExpression	iCurrFld < matchnbr		28763	1		<			
ANR	28819	Identifier	iCurrFld		28763	0					
ANR	28820	Identifier	matchnbr		28763	1					
ANR	28821	CompoundStatement		15:44:277:277	28763	1					
ANR	28822	IfStatement	"if ( ( pFld = ( uchar * ) strstr ( ( char * ) pFld , delim ) ) != NULL )"		28763	0					
ANR	28823	Condition	"( pFld = ( uchar * ) strstr ( ( char * ) pFld , delim ) ) != NULL"	1465:5:35832:35883	28763	0	True				
ANR	28824	EqualityExpression	"( pFld = ( uchar * ) strstr ( ( char * ) pFld , delim ) ) != NULL"		28763	0		!=			
ANR	28825	AssignmentExpression	"pFld = ( uchar * ) strstr ( ( char * ) pFld , delim )"		28763	0		=			
ANR	28826	Identifier	pFld		28763	0					
ANR	28827	CastExpression	"( uchar * ) strstr ( ( char * ) pFld , delim )"		28763	1					
ANR	28828	CastTarget	uchar *		28763	0					
ANR	28829	CallExpression	"strstr ( ( char * ) pFld , delim )"		28763	1					
ANR	28830	Callee	strstr		28763	0					
ANR	28831	Identifier	strstr		28763	0					
ANR	28832	ArgumentList	( char * ) pFld		28763	1					
ANR	28833	Argument	( char * ) pFld		28763	0					
ANR	28834	CastExpression	( char * ) pFld		28763	0					
ANR	28835	CastTarget	char *		28763	0					
ANR	28836	Identifier	pFld		28763	1					
ANR	28837	Argument	delim		28763	1					
ANR	28838	Identifier	delim		28763	0					
ANR	28839	Identifier	NULL		28763	1					
ANR	28840	CompoundStatement		16:59:338:338	28763	1					
ANR	28841	ExpressionStatement	pFld += lenDelim	1466:3:35891:35907	28763	0	True				
ANR	28842	AssignmentExpression	pFld += lenDelim		28763	0		+=			
ANR	28843	Identifier	pFld		28763	0					
ANR	28844	Identifier	lenDelim		28763	1					
ANR	28845	ExpressionStatement	++ iCurrFld	1467:3:35912:35922	28763	1	True				
ANR	28846	UnaryExpression	++ iCurrFld		28763	0					
ANR	28847	IncDec	++		28763	0					
ANR	28848	Identifier	iCurrFld		28763	1					
ANR	28849	ExpressionStatement	"DBGPRINTF ( ""field() field requested %d, field found %d\\n"" , matchnbr , iCurrFld )"	1470:1:35932:36009	28763	10	True				
ANR	28850	CallExpression	"DBGPRINTF ( ""field() field requested %d, field found %d\\n"" , matchnbr , iCurrFld )"		28763	0					
ANR	28851	Callee	DBGPRINTF		28763	0					
ANR	28852	Identifier	DBGPRINTF		28763	0					
ANR	28853	ArgumentList	"""field() field requested %d, field found %d\\n"""		28763	1					
ANR	28854	Argument	"""field() field requested %d, field found %d\\n"""		28763	0					
ANR	28855	PrimaryExpression	"""field() field requested %d, field found %d\\n"""		28763	0					
ANR	28856	Argument	matchnbr		28763	1					
ANR	28857	Identifier	matchnbr		28763	0					
ANR	28858	Argument	iCurrFld		28763	2					
ANR	28859	Identifier	iCurrFld		28763	0					
ANR	28860	IfStatement	if ( iCurrFld == matchnbr )		28763	11					
ANR	28861	Condition	iCurrFld == matchnbr	1472:4:36017:36036	28763	0	True				
ANR	28862	EqualityExpression	iCurrFld == matchnbr		28763	0		==			
ANR	28863	Identifier	iCurrFld		28763	0					
ANR	28864	Identifier	matchnbr		28763	1					
ANR	28865	CompoundStatement		23:26:491:491	28763	1					
ANR	28866	ExpressionStatement	"pFldEnd = ( uchar * ) strstr ( ( char * ) pFld , delim )"	1475:2:36125:36170	28763	0	True				
ANR	28867	AssignmentExpression	"pFldEnd = ( uchar * ) strstr ( ( char * ) pFld , delim )"		28763	0		=			
ANR	28868	Identifier	pFldEnd		28763	0					
ANR	28869	CastExpression	"( uchar * ) strstr ( ( char * ) pFld , delim )"		28763	1					
ANR	28870	CastTarget	uchar *		28763	0					
ANR	28871	CallExpression	"strstr ( ( char * ) pFld , delim )"		28763	1					
ANR	28872	Callee	strstr		28763	0					
ANR	28873	Identifier	strstr		28763	0					
ANR	28874	ArgumentList	( char * ) pFld		28763	1					
ANR	28875	Argument	( char * ) pFld		28763	0					
ANR	28876	CastExpression	( char * ) pFld		28763	0					
ANR	28877	CastTarget	char *		28763	0					
ANR	28878	Identifier	pFld		28763	1					
ANR	28879	Argument	delim		28763	1					
ANR	28880	Identifier	delim		28763	0					
ANR	28881	IfStatement	if ( pFldEnd == NULL )		28763	1					
ANR	28882	Condition	pFldEnd == NULL	1476:5:36177:36191	28763	0	True				
ANR	28883	EqualityExpression	pFldEnd == NULL		28763	0		==			
ANR	28884	Identifier	pFldEnd		28763	0					
ANR	28885	Identifier	NULL		28763	1					
ANR	28886	CompoundStatement		27:22:646:646	28763	1					
ANR	28887	ExpressionStatement	iLen = strlen ( ( char * ) pFld )	1477:3:36199:36226	28763	0	True				
ANR	28888	AssignmentExpression	iLen = strlen ( ( char * ) pFld )		28763	0		=			
ANR	28889	Identifier	iLen		28763	0					
ANR	28890	CallExpression	strlen ( ( char * ) pFld )		28763	1					
ANR	28891	Callee	strlen		28763	0					
ANR	28892	Identifier	strlen		28763	0					
ANR	28893	ArgumentList	( char * ) pFld		28763	1					
ANR	28894	Argument	( char * ) pFld		28763	0					
ANR	28895	CastExpression	( char * ) pFld		28763	0					
ANR	28896	CastTarget	char *		28763	0					
ANR	28897	Identifier	pFld		28763	1					
ANR	28898	ElseStatement	else		28763	0					
ANR	28899	CompoundStatement		29:9:689:689	28763	0					
ANR	28900	ExpressionStatement	iLen = pFldEnd - pFld	1480:3:36349:36370	28763	0	True				
ANR	28901	AssignmentExpression	iLen = pFldEnd - pFld		28763	0		=			
ANR	28902	Identifier	iLen		28763	0					
ANR	28903	AdditiveExpression	pFldEnd - pFld		28763	1		-			
ANR	28904	Identifier	pFldEnd		28763	0					
ANR	28905	Identifier	pFld		28763	1					
ANR	28906	ExpressionStatement	CHKmalloc ( pBuf = MALLOC ( iLen + 1 ) )	1483:2:36426:36460	28763	2	True				
ANR	28907	CallExpression	CHKmalloc ( pBuf = MALLOC ( iLen + 1 ) )		28763	0					
ANR	28908	Callee	CHKmalloc		28763	0					
ANR	28909	Identifier	CHKmalloc		28763	0					
ANR	28910	ArgumentList	pBuf = MALLOC ( iLen + 1 )		28763	1					
ANR	28911	Argument	pBuf = MALLOC ( iLen + 1 )		28763	0					
ANR	28912	AssignmentExpression	pBuf = MALLOC ( iLen + 1 )		28763	0		=			
ANR	28913	Identifier	pBuf		28763	0					
ANR	28914	CallExpression	MALLOC ( iLen + 1 )		28763	1					
ANR	28915	Callee	MALLOC		28763	0					
ANR	28916	Identifier	MALLOC		28763	0					
ANR	28917	ArgumentList	iLen + 1		28763	1					
ANR	28918	Argument	iLen + 1		28763	0					
ANR	28919	AdditiveExpression	iLen + 1		28763	0		+			
ANR	28920	Identifier	iLen		28763	0					
ANR	28921	PrimaryExpression	1		28763	1					
ANR	28922	ExpressionStatement	"memcpy ( pBuf , pFld , iLen )"	1485:2:36481:36505	28763	3	True				
ANR	28923	CallExpression	"memcpy ( pBuf , pFld , iLen )"		28763	0					
ANR	28924	Callee	memcpy		28763	0					
ANR	28925	Identifier	memcpy		28763	0					
ANR	28926	ArgumentList	pBuf		28763	1					
ANR	28927	Argument	pBuf		28763	0					
ANR	28928	Identifier	pBuf		28763	0					
ANR	28929	Argument	pFld		28763	1					
ANR	28930	Identifier	pFld		28763	0					
ANR	28931	Argument	iLen		28763	2					
ANR	28932	Identifier	iLen		28763	0					
ANR	28933	ExpressionStatement	pBuf [ iLen ] = '\\0'	1486:2:36509:36526	28763	4	True				
ANR	28934	AssignmentExpression	pBuf [ iLen ] = '\\0'		28763	0		=			
ANR	28935	ArrayIndexing	pBuf [ iLen ]		28763	0					
ANR	28936	Identifier	pBuf		28763	0					
ANR	28937	Identifier	iLen		28763	1					
ANR	28938	PrimaryExpression	'\\0'		28763	1					
ANR	28939	ExpressionStatement	* resstr = pBuf	1487:2:36549:36563	28763	5	True				
ANR	28940	AssignmentExpression	* resstr = pBuf		28763	0		=			
ANR	28941	UnaryOperationExpression	* resstr		28763	0					
ANR	28942	UnaryOperator	*		28763	0					
ANR	28943	Identifier	resstr		28763	1					
ANR	28944	Identifier	pBuf		28763	1					
ANR	28945	ElseStatement	else		28763	0					
ANR	28946	CompoundStatement		39:8:1025:1025	28763	0					
ANR	28947	ExpressionStatement	ABORT_FINALIZE ( RS_RET_FIELD_NOT_FOUND )	1489:2:36577:36615	28763	0	True				
ANR	28948	CallExpression	ABORT_FINALIZE ( RS_RET_FIELD_NOT_FOUND )		28763	0					
ANR	28949	Callee	ABORT_FINALIZE		28763	0					
ANR	28950	Identifier	ABORT_FINALIZE		28763	0					
ANR	28951	ArgumentList	RS_RET_FIELD_NOT_FOUND		28763	1					
ANR	28952	Argument	RS_RET_FIELD_NOT_FOUND		28763	0					
ANR	28953	Identifier	RS_RET_FIELD_NOT_FOUND		28763	0					
ANR	28954	Label	finalize_it :	1491:0:36620:36631	28763	12	True				
ANR	28955	Identifier	finalize_it		28763	0					
ANR	28956	ExpressionStatement	RETiRet	1492:1:36634:36641	28763	13	True				
ANR	28957	Identifier	RETiRet		28763	0					
ANR	28958	ReturnType	static rsRetVal		28763	1					
ANR	28959	Identifier	doExtractFieldByStr		28763	2					
ANR	28960	ParameterList	"uchar * str , char * delim , const rs_size_t lenDelim , const int matchnbr , uchar * * resstr"		28763	3					
ANR	28961	Parameter	uchar * str	1449:20:35460:35469	28763	0	True				
ANR	28962	ParameterType	uchar *		28763	0					
ANR	28963	Identifier	str		28763	1					
ANR	28964	Parameter	char * delim	1449:32:35472:35482	28763	1	True				
ANR	28965	ParameterType	char *		28763	0					
ANR	28966	Identifier	delim		28763	1					
ANR	28967	Parameter	const rs_size_t lenDelim	1449:45:35485:35508	28763	2	True				
ANR	28968	ParameterType	const rs_size_t		28763	0					
ANR	28969	Identifier	lenDelim		28763	1					
ANR	28970	Parameter	const int matchnbr	1449:71:35511:35528	28763	3	True				
ANR	28971	ParameterType	const int		28763	0					
ANR	28972	Identifier	matchnbr		28763	1					
ANR	28973	Parameter	uchar * * resstr	1449:91:35531:35544	28763	4	True				
ANR	28974	ParameterType	uchar * *		28763	0					
ANR	28975	Identifier	resstr		28763	1					
ANR	28976	CFGEntryNode	ENTRY		28763		True				
ANR	28977	CFGExitNode	EXIT		28763		True				
ANR	28978	Symbol	pFldEnd		28763						
ANR	28979	Symbol	* resstr		28763						
ANR	28980	Symbol	NULL		28763						
ANR	28981	Symbol	matchnbr		28763						
ANR	28982	Symbol	lenDelim		28763						
ANR	28983	Symbol	str		28763						
ANR	28984	Symbol	pBuf		28763						
ANR	28985	Symbol	strlen		28763						
ANR	28986	Symbol	MALLOC		28763						
ANR	28987	Symbol	strstr		28763						
ANR	28988	Symbol	* pBuf		28763						
ANR	28989	Symbol	resstr		28763						
ANR	28990	Symbol	iCurrFld		28763						
ANR	28991	Symbol	iLen		28763						
ANR	28992	Symbol	RS_RET_FIELD_NOT_FOUND		28763						
ANR	28993	Symbol	pFld		28763						
ANR	28994	Symbol	* iLen		28763						
ANR	28995	Symbol	delim		28763						
ANR	28996	Function	doFunc_re_extract	1495:0:36646:39286							
ANR	28997	FunctionDef	"doFunc_re_extract (struct cnffunc * func , struct svar * ret , void * usrptr)"		28996	0					
ANR	28998	CompoundStatement		1497:0:36730:39286	28996	0					
ANR	28999	IdentifierDeclStatement	size_t submatchnbr ;	1498:1:36733:36751	28996	0	True				
ANR	29000	IdentifierDecl	submatchnbr		28996	0					
ANR	29001	IdentifierDeclType	size_t		28996	0					
ANR	29002	Identifier	submatchnbr		28996	1					
ANR	29003	IdentifierDeclStatement	short matchnbr ;	1499:1:36754:36768	28996	1	True				
ANR	29004	IdentifierDecl	matchnbr		28996	0					
ANR	29005	IdentifierDeclType	short		28996	0					
ANR	29006	Identifier	matchnbr		28996	1					
ANR	29007	IdentifierDeclStatement	regmatch_t pmatch [ 50 ] ;	1500:1:36771:36792	28996	2	True				
ANR	29008	IdentifierDecl	pmatch [ 50 ]		28996	0					
ANR	29009	IdentifierDeclType	regmatch_t [ 50 ]		28996	0					
ANR	29010	Identifier	pmatch		28996	1					
ANR	29011	PrimaryExpression	50		28996	2					
ANR	29012	IdentifierDeclStatement	int bMustFree ;	1501:1:36795:36808	28996	3	True				
ANR	29013	IdentifierDecl	bMustFree		28996	0					
ANR	29014	IdentifierDeclType	int		28996	0					
ANR	29015	Identifier	bMustFree		28996	1					
ANR	29016	IdentifierDeclStatement	es_str_t * estr = NULL ;	1502:1:36811:36832	28996	4	True				
ANR	29017	IdentifierDecl	* estr = NULL		28996	0					
ANR	29018	IdentifierDeclType	es_str_t *		28996	0					
ANR	29019	Identifier	estr		28996	1					
ANR	29020	AssignmentExpression	* estr = NULL		28996	2		=			
ANR	29021	Identifier	NULL		28996	0					
ANR	29022	Identifier	NULL		28996	1					
ANR	29023	IdentifierDeclStatement	char * str ;	1503:1:36874:36883	28996	5	True				
ANR	29024	IdentifierDecl	* str		28996	0					
ANR	29025	IdentifierDeclType	char *		28996	0					
ANR	29026	Identifier	str		28996	1					
ANR	29027	IdentifierDeclStatement	struct svar r [ CNFFUNC_MAX_ARGS ] ;	1504:1:36886:36917	28996	6	True				
ANR	29028	IdentifierDecl	r [ CNFFUNC_MAX_ARGS ]		28996	0					
ANR	29029	IdentifierDeclType	struct svar [ CNFFUNC_MAX_ARGS ]		28996	0					
ANR	29030	Identifier	r		28996	1					
ANR	29031	Identifier	CNFFUNC_MAX_ARGS		28996	2					
ANR	29032	IdentifierDeclStatement	int iLenBuf ;	1505:1:36920:36931	28996	7	True				
ANR	29033	IdentifierDecl	iLenBuf		28996	0					
ANR	29034	IdentifierDeclType	int		28996	0					
ANR	29035	Identifier	iLenBuf		28996	1					
ANR	29036	IdentifierDeclStatement	unsigned iOffs ;	1506:1:36934:36948	28996	8	True				
ANR	29037	IdentifierDecl	iOffs		28996	0					
ANR	29038	IdentifierDeclType	unsigned		28996	0					
ANR	29039	Identifier	iOffs		28996	1					
ANR	29040	IdentifierDeclStatement	short iTry = 0 ;	1507:1:36951:36965	28996	9	True				
ANR	29041	IdentifierDecl	iTry = 0		28996	0					
ANR	29042	IdentifierDeclType	short		28996	0					
ANR	29043	Identifier	iTry		28996	1					
ANR	29044	AssignmentExpression	iTry = 0		28996	2		=			
ANR	29045	Identifier	iTry		28996	0					
ANR	29046	PrimaryExpression	0		28996	1					
ANR	29047	IdentifierDeclStatement	uchar bFound = 0 ;	1508:1:36968:36984	28996	10	True				
ANR	29048	IdentifierDecl	bFound = 0		28996	0					
ANR	29049	IdentifierDeclType	uchar		28996	0					
ANR	29050	Identifier	bFound		28996	1					
ANR	29051	AssignmentExpression	bFound = 0		28996	2		=			
ANR	29052	Identifier	bFound		28996	0					
ANR	29053	PrimaryExpression	0		28996	1					
ANR	29054	ExpressionStatement	iOffs = 0	1509:1:36987:36996	28996	11	True				
ANR	29055	AssignmentExpression	iOffs = 0		28996	0		=			
ANR	29056	Identifier	iOffs		28996	0					
ANR	29057	PrimaryExpression	0		28996	1					
ANR	29058	IdentifierDeclStatement	sbool bHadNoMatch = 0 ;	1510:1:36999:37020	28996	12	True				
ANR	29059	IdentifierDecl	bHadNoMatch = 0		28996	0					
ANR	29060	IdentifierDeclType	sbool		28996	0					
ANR	29061	Identifier	bHadNoMatch		28996	1					
ANR	29062	AssignmentExpression	bHadNoMatch = 0		28996	2		=			
ANR	29063	Identifier	bHadNoMatch		28996	0					
ANR	29064	PrimaryExpression	0		28996	1					
ANR	29065	ExpressionStatement	"cnfexprEval ( func -> expr [ 0 ] , & r [ 0 ] , usrptr )"	1512:1:37024:37065	28996	13	True				
ANR	29066	CallExpression	"cnfexprEval ( func -> expr [ 0 ] , & r [ 0 ] , usrptr )"		28996	0					
ANR	29067	Callee	cnfexprEval		28996	0					
ANR	29068	Identifier	cnfexprEval		28996	0					
ANR	29069	ArgumentList	func -> expr [ 0 ]		28996	1					
ANR	29070	Argument	func -> expr [ 0 ]		28996	0					
ANR	29071	ArrayIndexing	func -> expr [ 0 ]		28996	0					
ANR	29072	PtrMemberAccess	func -> expr		28996	0					
ANR	29073	Identifier	func		28996	0					
ANR	29074	Identifier	expr		28996	1					
ANR	29075	PrimaryExpression	0		28996	1					
ANR	29076	Argument	& r [ 0 ]		28996	1					
ANR	29077	UnaryOperationExpression	& r [ 0 ]		28996	0					
ANR	29078	UnaryOperator	&		28996	0					
ANR	29079	ArrayIndexing	r [ 0 ]		28996	1					
ANR	29080	Identifier	r		28996	0					
ANR	29081	PrimaryExpression	0		28996	1					
ANR	29082	Argument	usrptr		28996	2					
ANR	29083	Identifier	usrptr		28996	0					
ANR	29084	ExpressionStatement	"cnfexprEval ( func -> expr [ 2 ] , & r [ 2 ] , usrptr )"	1516:1:37160:37201	28996	14	True				
ANR	29085	CallExpression	"cnfexprEval ( func -> expr [ 2 ] , & r [ 2 ] , usrptr )"		28996	0					
ANR	29086	Callee	cnfexprEval		28996	0					
ANR	29087	Identifier	cnfexprEval		28996	0					
ANR	29088	ArgumentList	func -> expr [ 2 ]		28996	1					
ANR	29089	Argument	func -> expr [ 2 ]		28996	0					
ANR	29090	ArrayIndexing	func -> expr [ 2 ]		28996	0					
ANR	29091	PtrMemberAccess	func -> expr		28996	0					
ANR	29092	Identifier	func		28996	0					
ANR	29093	Identifier	expr		28996	1					
ANR	29094	PrimaryExpression	2		28996	1					
ANR	29095	Argument	& r [ 2 ]		28996	1					
ANR	29096	UnaryOperationExpression	& r [ 2 ]		28996	0					
ANR	29097	UnaryOperator	&		28996	0					
ANR	29098	ArrayIndexing	r [ 2 ]		28996	1					
ANR	29099	Identifier	r		28996	0					
ANR	29100	PrimaryExpression	2		28996	1					
ANR	29101	Argument	usrptr		28996	2					
ANR	29102	Identifier	usrptr		28996	0					
ANR	29103	ExpressionStatement	"cnfexprEval ( func -> expr [ 3 ] , & r [ 3 ] , usrptr )"	1517:1:37204:37245	28996	15	True				
ANR	29104	CallExpression	"cnfexprEval ( func -> expr [ 3 ] , & r [ 3 ] , usrptr )"		28996	0					
ANR	29105	Callee	cnfexprEval		28996	0					
ANR	29106	Identifier	cnfexprEval		28996	0					
ANR	29107	ArgumentList	func -> expr [ 3 ]		28996	1					
ANR	29108	Argument	func -> expr [ 3 ]		28996	0					
ANR	29109	ArrayIndexing	func -> expr [ 3 ]		28996	0					
ANR	29110	PtrMemberAccess	func -> expr		28996	0					
ANR	29111	Identifier	func		28996	0					
ANR	29112	Identifier	expr		28996	1					
ANR	29113	PrimaryExpression	3		28996	1					
ANR	29114	Argument	& r [ 3 ]		28996	1					
ANR	29115	UnaryOperationExpression	& r [ 3 ]		28996	0					
ANR	29116	UnaryOperator	&		28996	0					
ANR	29117	ArrayIndexing	r [ 3 ]		28996	1					
ANR	29118	Identifier	r		28996	0					
ANR	29119	PrimaryExpression	3		28996	1					
ANR	29120	Argument	usrptr		28996	2					
ANR	29121	Identifier	usrptr		28996	0					
ANR	29122	ExpressionStatement	"str = ( char * ) var2CString ( & r [ 0 ] , & bMustFree )"	1518:1:37248:37292	28996	16	True				
ANR	29123	AssignmentExpression	"str = ( char * ) var2CString ( & r [ 0 ] , & bMustFree )"		28996	0		=			
ANR	29124	Identifier	str		28996	0					
ANR	29125	CastExpression	"( char * ) var2CString ( & r [ 0 ] , & bMustFree )"		28996	1					
ANR	29126	CastTarget	char *		28996	0					
ANR	29127	CallExpression	"var2CString ( & r [ 0 ] , & bMustFree )"		28996	1					
ANR	29128	Callee	var2CString		28996	0					
ANR	29129	Identifier	var2CString		28996	0					
ANR	29130	ArgumentList	& r [ 0 ]		28996	1					
ANR	29131	Argument	& r [ 0 ]		28996	0					
ANR	29132	UnaryOperationExpression	& r [ 0 ]		28996	0					
ANR	29133	UnaryOperator	&		28996	0					
ANR	29134	ArrayIndexing	r [ 0 ]		28996	1					
ANR	29135	Identifier	r		28996	0					
ANR	29136	PrimaryExpression	0		28996	1					
ANR	29137	Argument	& bMustFree		28996	1					
ANR	29138	UnaryOperationExpression	& bMustFree		28996	0					
ANR	29139	UnaryOperator	&		28996	0					
ANR	29140	Identifier	bMustFree		28996	1					
ANR	29141	ExpressionStatement	"matchnbr = ( short ) var2Number ( & r [ 2 ] , NULL )"	1519:1:37295:37337	28996	17	True				
ANR	29142	AssignmentExpression	"matchnbr = ( short ) var2Number ( & r [ 2 ] , NULL )"		28996	0		=			
ANR	29143	Identifier	matchnbr		28996	0					
ANR	29144	CastExpression	"( short ) var2Number ( & r [ 2 ] , NULL )"		28996	1					
ANR	29145	CastTarget	short		28996	0					
ANR	29146	CallExpression	"var2Number ( & r [ 2 ] , NULL )"		28996	1					
ANR	29147	Callee	var2Number		28996	0					
ANR	29148	Identifier	var2Number		28996	0					
ANR	29149	ArgumentList	& r [ 2 ]		28996	1					
ANR	29150	Argument	& r [ 2 ]		28996	0					
ANR	29151	UnaryOperationExpression	& r [ 2 ]		28996	0					
ANR	29152	UnaryOperator	&		28996	0					
ANR	29153	ArrayIndexing	r [ 2 ]		28996	1					
ANR	29154	Identifier	r		28996	0					
ANR	29155	PrimaryExpression	2		28996	1					
ANR	29156	Argument	NULL		28996	1					
ANR	29157	Identifier	NULL		28996	0					
ANR	29158	ExpressionStatement	"submatchnbr = ( size_t ) var2Number ( & r [ 3 ] , NULL )"	1520:1:37340:37386	28996	18	True				
ANR	29159	AssignmentExpression	"submatchnbr = ( size_t ) var2Number ( & r [ 3 ] , NULL )"		28996	0		=			
ANR	29160	Identifier	submatchnbr		28996	0					
ANR	29161	CastExpression	"( size_t ) var2Number ( & r [ 3 ] , NULL )"		28996	1					
ANR	29162	CastTarget	size_t		28996	0					
ANR	29163	CallExpression	"var2Number ( & r [ 3 ] , NULL )"		28996	1					
ANR	29164	Callee	var2Number		28996	0					
ANR	29165	Identifier	var2Number		28996	0					
ANR	29166	ArgumentList	& r [ 3 ]		28996	1					
ANR	29167	Argument	& r [ 3 ]		28996	0					
ANR	29168	UnaryOperationExpression	& r [ 3 ]		28996	0					
ANR	29169	UnaryOperator	&		28996	0					
ANR	29170	ArrayIndexing	r [ 3 ]		28996	1					
ANR	29171	Identifier	r		28996	0					
ANR	29172	PrimaryExpression	3		28996	1					
ANR	29173	Argument	NULL		28996	1					
ANR	29174	Identifier	NULL		28996	0					
ANR	29175	IfStatement	if ( submatchnbr >= sizeof ( pmatch ) / sizeof ( regmatch_t ) )		28996	19					
ANR	29176	Condition	submatchnbr >= sizeof ( pmatch ) / sizeof ( regmatch_t )	1521:4:37392:37439	28996	0	True				
ANR	29177	RelationalExpression	submatchnbr >= sizeof ( pmatch ) / sizeof ( regmatch_t )		28996	0		>=			
ANR	29178	Identifier	submatchnbr		28996	0					
ANR	29179	MultiplicativeExpression	sizeof ( pmatch ) / sizeof ( regmatch_t )		28996	1		/			
ANR	29180	SizeofExpression	sizeof ( pmatch )		28996	0					
ANR	29181	Sizeof	sizeof		28996	0					
ANR	29182	SizeofOperand	pmatch		28996	1					
ANR	29183	SizeofExpression	sizeof ( regmatch_t )		28996	1					
ANR	29184	Sizeof	sizeof		28996	0					
ANR	29185	SizeofOperand	regmatch_t		28996	1					
ANR	29186	CompoundStatement		25:54:711:711	28996	1					
ANR	29187	ExpressionStatement	"DBGPRINTF ( ""re_extract() submatch %zd is too large\\n"" , submatchnbr )"	1522:2:37446:37512	28996	0	True				
ANR	29188	CallExpression	"DBGPRINTF ( ""re_extract() submatch %zd is too large\\n"" , submatchnbr )"		28996	0					
ANR	29189	Callee	DBGPRINTF		28996	0					
ANR	29190	Identifier	DBGPRINTF		28996	0					
ANR	29191	ArgumentList	"""re_extract() submatch %zd is too large\\n"""		28996	1					
ANR	29192	Argument	"""re_extract() submatch %zd is too large\\n"""		28996	0					
ANR	29193	PrimaryExpression	"""re_extract() submatch %zd is too large\\n"""		28996	0					
ANR	29194	Argument	submatchnbr		28996	1					
ANR	29195	Identifier	submatchnbr		28996	0					
ANR	29196	ExpressionStatement	bHadNoMatch = 1	1523:2:37516:37531	28996	1	True				
ANR	29197	AssignmentExpression	bHadNoMatch = 1		28996	0		=			
ANR	29198	Identifier	bHadNoMatch		28996	0					
ANR	29199	PrimaryExpression	1		28996	1					
ANR	29200	GotoStatement	goto finalize_it ;	1524:2:37535:37551	28996	2	True				
ANR	29201	Identifier	finalize_it		28996	0					
ANR	29202	WhileStatement	while ( ! bFound )		28996	20					
ANR	29203	Condition	! bFound	1530:7:37674:37680	28996	0	True				
ANR	29204	UnaryOperationExpression	! bFound		28996	0					
ANR	29205	UnaryOperator	!		28996	0					
ANR	29206	Identifier	bFound		28996	1					
ANR	29207	CompoundStatement		35:2:956:967	28996	1					
ANR	29208	IdentifierDeclStatement	int iREstat ;	1531:2:37687:37698	28996	0	True				
ANR	29209	IdentifierDecl	iREstat		28996	0					
ANR	29210	IdentifierDeclType	int		28996	0					
ANR	29211	Identifier	iREstat		28996	1					
ANR	29212	ExpressionStatement	"iREstat = regexp . regexec ( func -> funcdata , ( char * ) ( str + iOffs ) , submatchnbr + 1 , pmatch , 0 )"	1532:2:37702:37796	28996	1	True				
ANR	29213	AssignmentExpression	"iREstat = regexp . regexec ( func -> funcdata , ( char * ) ( str + iOffs ) , submatchnbr + 1 , pmatch , 0 )"		28996	0		=			
ANR	29214	Identifier	iREstat		28996	0					
ANR	29215	CallExpression	"regexp . regexec ( func -> funcdata , ( char * ) ( str + iOffs ) , submatchnbr + 1 , pmatch , 0 )"		28996	1					
ANR	29216	Callee	regexp . regexec		28996	0					
ANR	29217	MemberAccess	regexp . regexec		28996	0					
ANR	29218	Identifier	regexp		28996	0					
ANR	29219	Identifier	regexec		28996	1					
ANR	29220	ArgumentList	func -> funcdata		28996	1					
ANR	29221	Argument	func -> funcdata		28996	0					
ANR	29222	PtrMemberAccess	func -> funcdata		28996	0					
ANR	29223	Identifier	func		28996	0					
ANR	29224	Identifier	funcdata		28996	1					
ANR	29225	Argument	( char * ) ( str + iOffs )		28996	1					
ANR	29226	CastExpression	( char * ) ( str + iOffs )		28996	0					
ANR	29227	CastTarget	char *		28996	0					
ANR	29228	AdditiveExpression	str + iOffs		28996	1		+			
ANR	29229	Identifier	str		28996	0					
ANR	29230	Identifier	iOffs		28996	1					
ANR	29231	Argument	submatchnbr + 1		28996	2					
ANR	29232	AdditiveExpression	submatchnbr + 1		28996	0		+			
ANR	29233	Identifier	submatchnbr		28996	0					
ANR	29234	PrimaryExpression	1		28996	1					
ANR	29235	Argument	pmatch		28996	3					
ANR	29236	Identifier	pmatch		28996	0					
ANR	29237	Argument	0		28996	4					
ANR	29238	PrimaryExpression	0		28996	0					
ANR	29239	ExpressionStatement	"DBGPRINTF ( ""re_extract: regexec return is %d\\n"" , iREstat )"	1534:2:37800:37856	28996	2	True				
ANR	29240	CallExpression	"DBGPRINTF ( ""re_extract: regexec return is %d\\n"" , iREstat )"		28996	0					
ANR	29241	Callee	DBGPRINTF		28996	0					
ANR	29242	Identifier	DBGPRINTF		28996	0					
ANR	29243	ArgumentList	"""re_extract: regexec return is %d\\n"""		28996	1					
ANR	29244	Argument	"""re_extract: regexec return is %d\\n"""		28996	0					
ANR	29245	PrimaryExpression	"""re_extract: regexec return is %d\\n"""		28996	0					
ANR	29246	Argument	iREstat		28996	1					
ANR	29247	Identifier	iREstat		28996	0					
ANR	29248	IfStatement	if ( iREstat == 0 )		28996	3					
ANR	29249	Condition	iREstat == 0	1535:5:37863:37874	28996	0	True				
ANR	29250	EqualityExpression	iREstat == 0		28996	0		==			
ANR	29251	Identifier	iREstat		28996	0					
ANR	29252	PrimaryExpression	0		28996	1					
ANR	29253	CompoundStatement		39:19:1146:1146	28996	1					
ANR	29254	IfStatement	if ( pmatch [ 0 ] . rm_so == - 1 )		28996	0					
ANR	29255	Condition	pmatch [ 0 ] . rm_so == - 1	1536:6:37885:37905	28996	0	True				
ANR	29256	EqualityExpression	pmatch [ 0 ] . rm_so == - 1		28996	0		==			
ANR	29257	MemberAccess	pmatch [ 0 ] . rm_so		28996	0					
ANR	29258	ArrayIndexing	pmatch [ 0 ]		28996	0					
ANR	29259	Identifier	pmatch		28996	0					
ANR	29260	PrimaryExpression	0		28996	1					
ANR	29261	Identifier	rm_so		28996	1					
ANR	29262	UnaryOperationExpression	- 1		28996	1					
ANR	29263	UnaryOperator	-		28996	0					
ANR	29264	PrimaryExpression	1		28996	1					
ANR	29265	CompoundStatement		40:29:1177:1177	28996	1					
ANR	29266	ExpressionStatement	"DBGPRINTF ( ""oops ... start offset of successful regexec is -1\\n"" )"	1537:4:37914:37978	28996	0	True				
ANR	29267	CallExpression	"DBGPRINTF ( ""oops ... start offset of successful regexec is -1\\n"" )"		28996	0					
ANR	29268	Callee	DBGPRINTF		28996	0					
ANR	29269	Identifier	DBGPRINTF		28996	0					
ANR	29270	ArgumentList	"""oops ... start offset of successful regexec is -1\\n"""		28996	1					
ANR	29271	Argument	"""oops ... start offset of successful regexec is -1\\n"""		28996	0					
ANR	29272	PrimaryExpression	"""oops ... start offset of successful regexec is -1\\n"""		28996	0					
ANR	29273	BreakStatement	break ;	1538:4:37984:37989	28996	1	True				
ANR	29274	IfStatement	if ( iTry == matchnbr )		28996	1					
ANR	29275	Condition	iTry == matchnbr	1540:6:38002:38017	28996	0	True				
ANR	29276	EqualityExpression	iTry == matchnbr		28996	0		==			
ANR	29277	Identifier	iTry		28996	0					
ANR	29278	Identifier	matchnbr		28996	1					
ANR	29279	CompoundStatement		44:24:1289:1289	28996	1					
ANR	29280	ExpressionStatement	bFound = 1	1541:4:38026:38036	28996	0	True				
ANR	29281	AssignmentExpression	bFound = 1		28996	0		=			
ANR	29282	Identifier	bFound		28996	0					
ANR	29283	PrimaryExpression	1		28996	1					
ANR	29284	ElseStatement	else		28996	0					
ANR	29285	CompoundStatement		46:10:1317:1317	28996	0					
ANR	29286	ExpressionStatement	"DBGPRINTF ( ""re_extract: regex found at offset %d, new offset %d, tries %d\\n"" , iOffs , ( int ) ( iOffs + pmatch [ 0 ] . rm_eo ) , iTry )"	1543:4:38054:38183	28996	0	True				
ANR	29287	CallExpression	"DBGPRINTF ( ""re_extract: regex found at offset %d, new offset %d, tries %d\\n"" , iOffs , ( int ) ( iOffs + pmatch [ 0 ] . rm_eo ) , iTry )"		28996	0					
ANR	29288	Callee	DBGPRINTF		28996	0					
ANR	29289	Identifier	DBGPRINTF		28996	0					
ANR	29290	ArgumentList	"""re_extract: regex found at offset %d, new offset %d, tries %d\\n"""		28996	1					
ANR	29291	Argument	"""re_extract: regex found at offset %d, new offset %d, tries %d\\n"""		28996	0					
ANR	29292	PrimaryExpression	"""re_extract: regex found at offset %d, new offset %d, tries %d\\n"""		28996	0					
ANR	29293	Argument	iOffs		28996	1					
ANR	29294	Identifier	iOffs		28996	0					
ANR	29295	Argument	( int ) ( iOffs + pmatch [ 0 ] . rm_eo )		28996	2					
ANR	29296	CastExpression	( int ) ( iOffs + pmatch [ 0 ] . rm_eo )		28996	0					
ANR	29297	CastTarget	int		28996	0					
ANR	29298	AdditiveExpression	iOffs + pmatch [ 0 ] . rm_eo		28996	1		+			
ANR	29299	Identifier	iOffs		28996	0					
ANR	29300	MemberAccess	pmatch [ 0 ] . rm_eo		28996	1					
ANR	29301	ArrayIndexing	pmatch [ 0 ]		28996	0					
ANR	29302	Identifier	pmatch		28996	0					
ANR	29303	PrimaryExpression	0		28996	1					
ANR	29304	Identifier	rm_eo		28996	1					
ANR	29305	Argument	iTry		28996	3					
ANR	29306	Identifier	iTry		28996	0					
ANR	29307	ExpressionStatement	iOffs += pmatch [ 0 ] . rm_eo	1545:4:38189:38213	28996	1	True				
ANR	29308	AssignmentExpression	iOffs += pmatch [ 0 ] . rm_eo		28996	0		+=			
ANR	29309	Identifier	iOffs		28996	0					
ANR	29310	MemberAccess	pmatch [ 0 ] . rm_eo		28996	1					
ANR	29311	ArrayIndexing	pmatch [ 0 ]		28996	0					
ANR	29312	Identifier	pmatch		28996	0					
ANR	29313	PrimaryExpression	0		28996	1					
ANR	29314	Identifier	rm_eo		28996	1					
ANR	29315	ExpressionStatement	++ iTry	1546:4:38219:38225	28996	2	True				
ANR	29316	UnaryExpression	++ iTry		28996	0					
ANR	29317	IncDec	++		28996	0					
ANR	29318	Identifier	iTry		28996	1					
ANR	29319	ElseStatement	else		28996	0					
ANR	29320	CompoundStatement		52:9:1510:1510	28996	0					
ANR	29321	BreakStatement	break ;	1549:3:38246:38251	28996	0	True				
ANR	29322	ExpressionStatement	"DBGPRINTF ( ""re_extract: regex: end search, found %d\\n"" , bFound )"	1552:1:38261:38323	28996	21	True				
ANR	29323	CallExpression	"DBGPRINTF ( ""re_extract: regex: end search, found %d\\n"" , bFound )"		28996	0					
ANR	29324	Callee	DBGPRINTF		28996	0					
ANR	29325	Identifier	DBGPRINTF		28996	0					
ANR	29326	ArgumentList	"""re_extract: regex: end search, found %d\\n"""		28996	1					
ANR	29327	Argument	"""re_extract: regex: end search, found %d\\n"""		28996	0					
ANR	29328	PrimaryExpression	"""re_extract: regex: end search, found %d\\n"""		28996	0					
ANR	29329	Argument	bFound		28996	1					
ANR	29330	Identifier	bFound		28996	0					
ANR	29331	IfStatement	if ( ! bFound )		28996	22					
ANR	29332	Condition	! bFound	1553:4:38329:38335	28996	0	True				
ANR	29333	UnaryOperationExpression	! bFound		28996	0					
ANR	29334	UnaryOperator	!		28996	0					
ANR	29335	Identifier	bFound		28996	1					
ANR	29336	CompoundStatement		57:13:1607:1607	28996	1					
ANR	29337	ExpressionStatement	bHadNoMatch = 1	1554:2:38342:38357	28996	0	True				
ANR	29338	AssignmentExpression	bHadNoMatch = 1		28996	0		=			
ANR	29339	Identifier	bHadNoMatch		28996	0					
ANR	29340	PrimaryExpression	1		28996	1					
ANR	29341	GotoStatement	goto finalize_it ;	1555:2:38361:38377	28996	1	True				
ANR	29342	Identifier	finalize_it		28996	0					
ANR	29343	ElseStatement	else		28996	0					
ANR	29344	CompoundStatement		60:8:1656:1656	28996	0					
ANR	29345	IfStatement	if ( pmatch [ submatchnbr ] . rm_so == - 1 )		28996	0					
ANR	29346	Condition	pmatch [ submatchnbr ] . rm_so == - 1	1559:5:38470:38500	28996	0	True				
ANR	29347	EqualityExpression	pmatch [ submatchnbr ] . rm_so == - 1		28996	0		==			
ANR	29348	MemberAccess	pmatch [ submatchnbr ] . rm_so		28996	0					
ANR	29349	ArrayIndexing	pmatch [ submatchnbr ]		28996	0					
ANR	29350	Identifier	pmatch		28996	0					
ANR	29351	Identifier	submatchnbr		28996	1					
ANR	29352	Identifier	rm_so		28996	1					
ANR	29353	UnaryOperationExpression	- 1		28996	1					
ANR	29354	UnaryOperator	-		28996	0					
ANR	29355	PrimaryExpression	1		28996	1					
ANR	29356	CompoundStatement		63:38:1772:1772	28996	1					
ANR	29357	ExpressionStatement	bHadNoMatch = 1	1560:3:38508:38523	28996	0	True				
ANR	29358	AssignmentExpression	bHadNoMatch = 1		28996	0		=			
ANR	29359	Identifier	bHadNoMatch		28996	0					
ANR	29360	PrimaryExpression	1		28996	1					
ANR	29361	GotoStatement	goto finalize_it ;	1561:3:38528:38544	28996	1	True				
ANR	29362	Identifier	finalize_it		28996	0					
ANR	29363	ExpressionStatement	iLenBuf = pmatch [ submatchnbr ] . rm_eo - pmatch [ submatchnbr ] . rm_so	1564:2:38614:38677	28996	1	True				
ANR	29364	AssignmentExpression	iLenBuf = pmatch [ submatchnbr ] . rm_eo - pmatch [ submatchnbr ] . rm_so		28996	0		=			
ANR	29365	Identifier	iLenBuf		28996	0					
ANR	29366	AdditiveExpression	pmatch [ submatchnbr ] . rm_eo - pmatch [ submatchnbr ] . rm_so		28996	1		-			
ANR	29367	MemberAccess	pmatch [ submatchnbr ] . rm_eo		28996	0					
ANR	29368	ArrayIndexing	pmatch [ submatchnbr ]		28996	0					
ANR	29369	Identifier	pmatch		28996	0					
ANR	29370	Identifier	submatchnbr		28996	1					
ANR	29371	Identifier	rm_eo		28996	1					
ANR	29372	MemberAccess	pmatch [ submatchnbr ] . rm_so		28996	1					
ANR	29373	ArrayIndexing	pmatch [ submatchnbr ]		28996	0					
ANR	29374	Identifier	pmatch		28996	0					
ANR	29375	Identifier	submatchnbr		28996	1					
ANR	29376	Identifier	rm_so		28996	1					
ANR	29377	ExpressionStatement	"estr = es_newStrFromBuf ( str + iOffs + pmatch [ submatchnbr ] . rm_so , iLenBuf )"	1565:2:38681:38759	28996	2	True				
ANR	29378	AssignmentExpression	"estr = es_newStrFromBuf ( str + iOffs + pmatch [ submatchnbr ] . rm_so , iLenBuf )"		28996	0		=			
ANR	29379	Identifier	estr		28996	0					
ANR	29380	CallExpression	"es_newStrFromBuf ( str + iOffs + pmatch [ submatchnbr ] . rm_so , iLenBuf )"		28996	1					
ANR	29381	Callee	es_newStrFromBuf		28996	0					
ANR	29382	Identifier	es_newStrFromBuf		28996	0					
ANR	29383	ArgumentList	str + iOffs + pmatch [ submatchnbr ] . rm_so		28996	1					
ANR	29384	Argument	str + iOffs + pmatch [ submatchnbr ] . rm_so		28996	0					
ANR	29385	AdditiveExpression	str + iOffs + pmatch [ submatchnbr ] . rm_so		28996	0		+			
ANR	29386	Identifier	str		28996	0					
ANR	29387	AdditiveExpression	iOffs + pmatch [ submatchnbr ] . rm_so		28996	1		+			
ANR	29388	Identifier	iOffs		28996	0					
ANR	29389	MemberAccess	pmatch [ submatchnbr ] . rm_so		28996	1					
ANR	29390	ArrayIndexing	pmatch [ submatchnbr ]		28996	0					
ANR	29391	Identifier	pmatch		28996	0					
ANR	29392	Identifier	submatchnbr		28996	1					
ANR	29393	Identifier	rm_so		28996	1					
ANR	29394	Argument	iLenBuf		28996	1					
ANR	29395	Identifier	iLenBuf		28996	0					
ANR	29396	Label	finalize_it :	1569:0:38765:38776	28996	23	True				
ANR	29397	Identifier	finalize_it		28996	0					
ANR	29398	IfStatement	if ( bMustFree )		28996	24					
ANR	29399	Condition	bMustFree	1570:4:38782:38790	28996	0	True				
ANR	29400	Identifier	bMustFree		28996	0					
ANR	29401	ExpressionStatement	free ( str )	1570:15:38793:38802	28996	1	True				
ANR	29402	CallExpression	free ( str )		28996	0					
ANR	29403	Callee	free		28996	0					
ANR	29404	Identifier	free		28996	0					
ANR	29405	ArgumentList	str		28996	1					
ANR	29406	Argument	str		28996	0					
ANR	29407	Identifier	str		28996	0					
ANR	29408	ExpressionStatement	varFreeMembers ( & r [ 0 ] )	1571:1:38805:38826	28996	25	True				
ANR	29409	CallExpression	varFreeMembers ( & r [ 0 ] )		28996	0					
ANR	29410	Callee	varFreeMembers		28996	0					
ANR	29411	Identifier	varFreeMembers		28996	0					
ANR	29412	ArgumentList	& r [ 0 ]		28996	1					
ANR	29413	Argument	& r [ 0 ]		28996	0					
ANR	29414	UnaryOperationExpression	& r [ 0 ]		28996	0					
ANR	29415	UnaryOperator	&		28996	0					
ANR	29416	ArrayIndexing	r [ 0 ]		28996	1					
ANR	29417	Identifier	r		28996	0					
ANR	29418	PrimaryExpression	0		28996	1					
ANR	29419	ExpressionStatement	varFreeMembers ( & r [ 2 ] )	1572:1:38829:38850	28996	26	True				
ANR	29420	CallExpression	varFreeMembers ( & r [ 2 ] )		28996	0					
ANR	29421	Callee	varFreeMembers		28996	0					
ANR	29422	Identifier	varFreeMembers		28996	0					
ANR	29423	ArgumentList	& r [ 2 ]		28996	1					
ANR	29424	Argument	& r [ 2 ]		28996	0					
ANR	29425	UnaryOperationExpression	& r [ 2 ]		28996	0					
ANR	29426	UnaryOperator	&		28996	0					
ANR	29427	ArrayIndexing	r [ 2 ]		28996	1					
ANR	29428	Identifier	r		28996	0					
ANR	29429	PrimaryExpression	2		28996	1					
ANR	29430	ExpressionStatement	varFreeMembers ( & r [ 3 ] )	1573:1:38853:38874	28996	27	True				
ANR	29431	CallExpression	varFreeMembers ( & r [ 3 ] )		28996	0					
ANR	29432	Callee	varFreeMembers		28996	0					
ANR	29433	Identifier	varFreeMembers		28996	0					
ANR	29434	ArgumentList	& r [ 3 ]		28996	1					
ANR	29435	Argument	& r [ 3 ]		28996	0					
ANR	29436	UnaryOperationExpression	& r [ 3 ]		28996	0					
ANR	29437	UnaryOperator	&		28996	0					
ANR	29438	ArrayIndexing	r [ 3 ]		28996	1					
ANR	29439	Identifier	r		28996	0					
ANR	29440	PrimaryExpression	3		28996	1					
ANR	29441	IfStatement	if ( bHadNoMatch )		28996	28					
ANR	29442	Condition	bHadNoMatch	1575:4:38881:38891	28996	0	True				
ANR	29443	Identifier	bHadNoMatch		28996	0					
ANR	29444	CompoundStatement		79:17:2163:2163	28996	1					
ANR	29445	ExpressionStatement	"cnfexprEval ( func -> expr [ 4 ] , & r [ 4 ] , usrptr )"	1576:2:38898:38939	28996	0	True				
ANR	29446	CallExpression	"cnfexprEval ( func -> expr [ 4 ] , & r [ 4 ] , usrptr )"		28996	0					
ANR	29447	Callee	cnfexprEval		28996	0					
ANR	29448	Identifier	cnfexprEval		28996	0					
ANR	29449	ArgumentList	func -> expr [ 4 ]		28996	1					
ANR	29450	Argument	func -> expr [ 4 ]		28996	0					
ANR	29451	ArrayIndexing	func -> expr [ 4 ]		28996	0					
ANR	29452	PtrMemberAccess	func -> expr		28996	0					
ANR	29453	Identifier	func		28996	0					
ANR	29454	Identifier	expr		28996	1					
ANR	29455	PrimaryExpression	4		28996	1					
ANR	29456	Argument	& r [ 4 ]		28996	1					
ANR	29457	UnaryOperationExpression	& r [ 4 ]		28996	0					
ANR	29458	UnaryOperator	&		28996	0					
ANR	29459	ArrayIndexing	r [ 4 ]		28996	1					
ANR	29460	Identifier	r		28996	0					
ANR	29461	PrimaryExpression	4		28996	1					
ANR	29462	Argument	usrptr		28996	2					
ANR	29463	Identifier	usrptr		28996	0					
ANR	29464	ExpressionStatement	"estr = var2String ( & r [ 4 ] , & bMustFree )"	1577:2:38943:38979	28996	1	True				
ANR	29465	AssignmentExpression	"estr = var2String ( & r [ 4 ] , & bMustFree )"		28996	0		=			
ANR	29466	Identifier	estr		28996	0					
ANR	29467	CallExpression	"var2String ( & r [ 4 ] , & bMustFree )"		28996	1					
ANR	29468	Callee	var2String		28996	0					
ANR	29469	Identifier	var2String		28996	0					
ANR	29470	ArgumentList	& r [ 4 ]		28996	1					
ANR	29471	Argument	& r [ 4 ]		28996	0					
ANR	29472	UnaryOperationExpression	& r [ 4 ]		28996	0					
ANR	29473	UnaryOperator	&		28996	0					
ANR	29474	ArrayIndexing	r [ 4 ]		28996	1					
ANR	29475	Identifier	r		28996	0					
ANR	29476	PrimaryExpression	4		28996	1					
ANR	29477	Argument	& bMustFree		28996	1					
ANR	29478	UnaryOperationExpression	& bMustFree		28996	0					
ANR	29479	UnaryOperator	&		28996	0					
ANR	29480	Identifier	bMustFree		28996	1					
ANR	29481	ExpressionStatement	"varFreeMembersSelectively ( & r [ 4 ] , SKIP_STRING )"	1578:2:38983:39028	28996	2	True				
ANR	29482	CallExpression	"varFreeMembersSelectively ( & r [ 4 ] , SKIP_STRING )"		28996	0					
ANR	29483	Callee	varFreeMembersSelectively		28996	0					
ANR	29484	Identifier	varFreeMembersSelectively		28996	0					
ANR	29485	ArgumentList	& r [ 4 ]		28996	1					
ANR	29486	Argument	& r [ 4 ]		28996	0					
ANR	29487	UnaryOperationExpression	& r [ 4 ]		28996	0					
ANR	29488	UnaryOperator	&		28996	0					
ANR	29489	ArrayIndexing	r [ 4 ]		28996	1					
ANR	29490	Identifier	r		28996	0					
ANR	29491	PrimaryExpression	4		28996	1					
ANR	29492	Argument	SKIP_STRING		28996	1					
ANR	29493	Identifier	SKIP_STRING		28996	0					
ANR	29494	ExpressionStatement	ret -> datatype = 'S'	1584:1:39235:39254	28996	29	True				
ANR	29495	AssignmentExpression	ret -> datatype = 'S'		28996	0		=			
ANR	29496	PtrMemberAccess	ret -> datatype		28996	0					
ANR	29497	Identifier	ret		28996	0					
ANR	29498	Identifier	datatype		28996	1					
ANR	29499	PrimaryExpression	'S'		28996	1					
ANR	29500	ExpressionStatement	ret -> d . estr = estr	1585:1:39257:39275	28996	30	True				
ANR	29501	AssignmentExpression	ret -> d . estr = estr		28996	0		=			
ANR	29502	MemberAccess	ret -> d . estr		28996	0					
ANR	29503	PtrMemberAccess	ret -> d		28996	0					
ANR	29504	Identifier	ret		28996	0					
ANR	29505	Identifier	d		28996	1					
ANR	29506	Identifier	estr		28996	1					
ANR	29507	Identifier	estr		28996	1					
ANR	29508	ReturnStatement	return ;	1586:1:39278:39284	28996	31	True				
ANR	29509	ReturnType	static void		28996	1					
ANR	29510	Identifier	doFunc_re_extract		28996	2					
ANR	29511	ParameterList	"struct cnffunc * func , struct svar * ret , void * usrptr"		28996	3					
ANR	29512	Parameter	struct cnffunc * func	1496:18:36676:36695	28996	0	True				
ANR	29513	ParameterType	struct cnffunc *		28996	0					
ANR	29514	Identifier	func		28996	1					
ANR	29515	Parameter	struct svar * ret	1496:40:36698:36713	28996	1	True				
ANR	29516	ParameterType	struct svar *		28996	0					
ANR	29517	Identifier	ret		28996	1					
ANR	29518	Parameter	void * usrptr	1496:58:36716:36727	28996	2	True				
ANR	29519	ParameterType	void *		28996	0					
ANR	29520	Identifier	usrptr		28996	1					
ANR	29521	CFGEntryNode	ENTRY		28996		True				
ANR	29522	CFGExitNode	EXIT		28996		True				
ANR	29523	Symbol	iOffs		28996						
ANR	29524	Symbol	regexp		28996						
ANR	29525	Symbol	pmatch [ 0 ] . rm_so		28996						
ANR	29526	Symbol	estr		28996						
ANR	29527	Symbol	func -> funcdata		28996						
ANR	29528	Symbol	* submatchnbr		28996						
ANR	29529	Symbol	iLenBuf		28996						
ANR	29530	Symbol	var2CString		28996						
ANR	29531	Symbol	pmatch [ submatchnbr ] . rm_eo		28996						
ANR	29532	Symbol	bFound		28996						
ANR	29533	Symbol	* ret		28996						
ANR	29534	Symbol	* pmatch		28996						
ANR	29535	Symbol	pmatch [ 0 ] . rm_eo		28996						
ANR	29536	Symbol	& bMustFree		28996						
ANR	29537	Symbol	var2Number		28996						
ANR	29538	Symbol	func -> expr		28996						
ANR	29539	Symbol	pmatch		28996						
ANR	29540	Symbol	var2String		28996						
ANR	29541	Symbol	ret		28996						
ANR	29542	Symbol	NULL		28996						
ANR	29543	Symbol	iTry		28996						
ANR	29544	Symbol	* func		28996						
ANR	29545	Symbol	* * func		28996						
ANR	29546	Symbol	es_newStrFromBuf		28996						
ANR	29547	Symbol	ret -> d . estr		28996						
ANR	29548	Symbol	bHadNoMatch		28996						
ANR	29549	Symbol	* func -> expr		28996						
ANR	29550	Symbol	usrptr		28996						
ANR	29551	Symbol	submatchnbr		28996						
ANR	29552	Symbol	matchnbr		28996						
ANR	29553	Symbol	iREstat		28996						
ANR	29554	Symbol	bMustFree		28996						
ANR	29555	Symbol	str		28996						
ANR	29556	Symbol	ret -> datatype		28996						
ANR	29557	Symbol	ret -> d		28996						
ANR	29558	Symbol	r		28996						
ANR	29559	Symbol	func		28996						
ANR	29560	Symbol	SKIP_STRING		28996						
ANR	29561	Symbol	regexp . regexec		28996						
ANR	29562	Symbol	pmatch [ submatchnbr ] . rm_so		28996						
ANR	29563	DeclStmt									
ANR	29564	Decl							rsRetVal	rsRetVal	localRet
ANR	29565	DeclStmt									
ANR	29566	Decl							actWrkrIParams_t	actWrkrIParams_t	iparam
ANR	29567	DeclStmt									
ANR	29568	Decl							int	int	freeOperand
ANR	29569	Decl							int	int	freeFind
ANR	29570	Decl							int	int	freeReplacement
ANR	29571	DeclStmt									
ANR	29572	Decl							es_str_t	es_str_t *	str
ANR	29573	DeclStmt									
ANR	29574	Decl							es_str_t	es_str_t *	findStr
ANR	29575	DeclStmt									
ANR	29576	Decl							es_str_t	es_str_t *	replaceWithStr
ANR	29577	DeclStmt									
ANR	29578	Decl							uchar	uchar *	find
ANR	29579	DeclStmt									
ANR	29580	Decl							uchar	uchar *	replaceWith
ANR	29581	DeclStmt									
ANR	29582	Decl							uint	uint	lfind
ANR	29583	DeclStmt									
ANR	29584	Decl							uint	uint	lReplaceWith
ANR	29585	DeclStmt									
ANR	29586	Decl							uint	uint	size
ANR	29587	DeclStmt									
ANR	29588	Decl							uchar	uchar *	src_buff
ANR	29589	DeclStmt									
ANR	29590	Decl							uint	uint	i
ANR	29591	Decl							uint	uint	j
ANR	29592	DeclStmt									
ANR	29593	Decl							es_str_t	es_str_t *	res
ANR	29594	DeclStmt									
ANR	29595	Decl							unsigned char	unsigned char *	dest
ANR	29596	DeclStmt									
ANR	29597	Decl							uint	uint	k
ANR	29598	Decl							uint	uint	s
ANR	29599	DeclStmt									
ANR	29600	Decl							int	int	freeSource
ANR	29601	Decl							int	int	freeWrapper
ANR	29602	DeclStmt									
ANR	29603	Decl							es_str_t	es_str_t *	sourceStr
ANR	29604	DeclStmt									
ANR	29605	Decl							es_str_t	es_str_t *	wrapperStr
ANR	29606	DeclStmt									
ANR	29607	Decl							uchar	uchar *	src
ANR	29608	DeclStmt									
ANR	29609	Decl							uchar	uchar *	wrapper
ANR	29610	DeclStmt									
ANR	29611	Decl							uint	uint	lWrapper
ANR	29612	DeclStmt									
ANR	29613	Decl							uint	uint	lSrc
ANR	29614	DeclStmt									
ANR	29615	Decl							uint	uint	totalLen
ANR	29616	DeclStmt									
ANR	29617	Decl							es_str_t	es_str_t *	res
ANR	29618	DeclStmt									
ANR	29619	Decl							uchar	uchar *	resBuf
ANR	29620	DeclStmt									
ANR	29621	Decl							int	int	success
ANR	29622	DeclStmt									
ANR	29623	Decl							long long	long long	max
ANR	29624	DeclStmt									
ANR	29625	Decl							long int	long int	x
ANR	29626	Function	ipv42num	1724:0:43395:45134							
ANR	29627	FunctionDef	ipv42num (char * str)		29626	0					
ANR	29628	CompoundStatement		1726:0:43432:45134	29626	0					
ANR	29629	IdentifierDeclStatement	"unsigned num [ 4 ] = { 0 , 0 , 0 , 0 } ;"	1727:1:43435:43465	29626	0	True				
ANR	29630	IdentifierDecl	"num [ 4 ] = { 0 , 0 , 0 , 0 }"		29626	0					
ANR	29631	IdentifierDeclType	unsigned [ 4 ]		29626	0					
ANR	29632	Identifier	num		29626	1					
ANR	29633	PrimaryExpression	4		29626	2					
ANR	29634	AssignmentExpression	"num [ 4 ] = { 0 , 0 , 0 , 0 }"		29626	3		=			
ANR	29635	Identifier	num		29626	0					
ANR	29636	InitializerList	0		29626	1					
ANR	29637	PrimaryExpression	0		29626	0					
ANR	29638	PrimaryExpression	0		29626	1					
ANR	29639	PrimaryExpression	0		29626	2					
ANR	29640	PrimaryExpression	0		29626	3					
ANR	29641	IdentifierDeclStatement	long long value = - 1 ;	1728:1:43468:43488	29626	1	True				
ANR	29642	IdentifierDecl	value = - 1		29626	0					
ANR	29643	IdentifierDeclType	long long		29626	0					
ANR	29644	Identifier	value		29626	1					
ANR	29645	AssignmentExpression	value = - 1		29626	2		=			
ANR	29646	Identifier	value		29626	0					
ANR	29647	UnaryOperationExpression	- 1		29626	1					
ANR	29648	UnaryOperator	-		29626	0					
ANR	29649	PrimaryExpression	1		29626	1					
ANR	29650	IdentifierDeclStatement	size_t len = strlen ( str ) ;	1729:1:43491:43515	29626	2	True				
ANR	29651	IdentifierDecl	len = strlen ( str )		29626	0					
ANR	29652	IdentifierDeclType	size_t		29626	0					
ANR	29653	Identifier	len		29626	1					
ANR	29654	AssignmentExpression	len = strlen ( str )		29626	2		=			
ANR	29655	Identifier	len		29626	0					
ANR	29656	CallExpression	strlen ( str )		29626	1					
ANR	29657	Callee	strlen		29626	0					
ANR	29658	Identifier	strlen		29626	0					
ANR	29659	ArgumentList	str		29626	1					
ANR	29660	Argument	str		29626	0					
ANR	29661	Identifier	str		29626	0					
ANR	29662	IdentifierDeclStatement	int cyc = 0 ;	1730:1:43518:43529	29626	3	True				
ANR	29663	IdentifierDecl	cyc = 0		29626	0					
ANR	29664	IdentifierDeclType	int		29626	0					
ANR	29665	Identifier	cyc		29626	1					
ANR	29666	AssignmentExpression	cyc = 0		29626	2		=			
ANR	29667	Identifier	cyc		29626	0					
ANR	29668	PrimaryExpression	0		29626	1					
ANR	29669	IdentifierDeclStatement	int prevdot = 0 ;	1731:1:43532:43547	29626	4	True				
ANR	29670	IdentifierDecl	prevdot = 0		29626	0					
ANR	29671	IdentifierDeclType	int		29626	0					
ANR	29672	Identifier	prevdot		29626	1					
ANR	29673	AssignmentExpression	prevdot = 0		29626	2		=			
ANR	29674	Identifier	prevdot		29626	0					
ANR	29675	PrimaryExpression	0		29626	1					
ANR	29676	IdentifierDeclStatement	int startblank = 0 ;	1732:1:43550:43568	29626	5	True				
ANR	29677	IdentifierDecl	startblank = 0		29626	0					
ANR	29678	IdentifierDeclType	int		29626	0					
ANR	29679	Identifier	startblank		29626	1					
ANR	29680	AssignmentExpression	startblank = 0		29626	2		=			
ANR	29681	Identifier	startblank		29626	0					
ANR	29682	PrimaryExpression	0		29626	1					
ANR	29683	IdentifierDeclStatement	int endblank = 0 ;	1733:1:43571:43587	29626	6	True				
ANR	29684	IdentifierDecl	endblank = 0		29626	0					
ANR	29685	IdentifierDeclType	int		29626	0					
ANR	29686	Identifier	endblank		29626	1					
ANR	29687	AssignmentExpression	endblank = 0		29626	2		=			
ANR	29688	Identifier	endblank		29626	0					
ANR	29689	PrimaryExpression	0		29626	1					
ANR	29690	ExpressionStatement	"DBGPRINTF ( ""rainerscript: (ipv42num) arg: '%s'\\n"" , str )"	1734:1:43590:43644	29626	7	True				
ANR	29691	CallExpression	"DBGPRINTF ( ""rainerscript: (ipv42num) arg: '%s'\\n"" , str )"		29626	0					
ANR	29692	Callee	DBGPRINTF		29626	0					
ANR	29693	Identifier	DBGPRINTF		29626	0					
ANR	29694	ArgumentList	"""rainerscript: (ipv42num) arg: '%s'\\n"""		29626	1					
ANR	29695	Argument	"""rainerscript: (ipv42num) arg: '%s'\\n"""		29626	0					
ANR	29696	PrimaryExpression	"""rainerscript: (ipv42num) arg: '%s'\\n"""		29626	0					
ANR	29697	Argument	str		29626	1					
ANR	29698	Identifier	str		29626	0					
ANR	29699	ForStatement	for ( unsigned int i = 0 ; i < len ; i ++ )		29626	8					
ANR	29700	ForInit	unsigned int i = 0 ;	1735:5:43651:43670	29626	0	True				
ANR	29701	IdentifierDeclStatement	unsigned int i = 0 ;		29626	0					
ANR	29702	IdentifierDecl	i = 0		29626	0					
ANR	29703	IdentifierDeclType	unsigned int		29626	0					
ANR	29704	Identifier	i		29626	1					
ANR	29705	AssignmentExpression	i = 0		29626	2		=			
ANR	29706	Identifier	i		29626	0					
ANR	29707	PrimaryExpression	0		29626	1					
ANR	29708	Condition	i < len	1735:26:43672:43678	29626	1	True				
ANR	29709	RelationalExpression	i < len		29626	0		<			
ANR	29710	Identifier	i		29626	0					
ANR	29711	Identifier	len		29626	1					
ANR	29712	PostIncDecOperationExpression	i ++	1735:36:43682:43684	29626	2	True				
ANR	29713	Identifier	i		29626	0					
ANR	29714	IncDec	++		29626	1					
ANR	29715	CompoundStatement		10:41:254:254	29626	3					
ANR	29716	SwitchStatement	switch ( str [ i ] )		29626	0					
ANR	29717	Condition	str [ i ]	1736:9:43698:43703	29626	0	True				
ANR	29718	ArrayIndexing	str [ i ]		29626	0					
ANR	29719	Identifier	str		29626	0					
ANR	29720	Identifier	i		29626	1					
ANR	29721	CompoundStatement		11:16:272:272	29626	1					
ANR	29722	Label	case '0' :	1737:2:43709:43717	29626	0	True				
ANR	29723	Label	case '1' :	1738:2:43721:43729	29626	1	True				
ANR	29724	Label	case '2' :	1739:2:43733:43741	29626	2	True				
ANR	29725	Label	case '3' :	1740:2:43745:43753	29626	3	True				
ANR	29726	Label	case '4' :	1741:2:43757:43765	29626	4	True				
ANR	29727	Label	case '5' :	1742:2:43769:43777	29626	5	True				
ANR	29728	Label	case '6' :	1743:2:43781:43789	29626	6	True				
ANR	29729	Label	case '7' :	1744:2:43793:43801	29626	7	True				
ANR	29730	Label	case '8' :	1745:2:43805:43813	29626	8	True				
ANR	29731	Label	case '9' :	1746:2:43817:43825	29626	9	True				
ANR	29732	IfStatement	if ( endblank == 1 )		29626	10					
ANR	29733	Condition	endblank == 1	1747:6:43833:43845	29626	0	True				
ANR	29734	EqualityExpression	endblank == 1		29626	0		==			
ANR	29735	Identifier	endblank		29626	0					
ANR	29736	PrimaryExpression	1		29626	1					
ANR	29737	CompoundStatement		22:20:414:414	29626	1					
ANR	29738	ExpressionStatement	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (invalid space(1))\\n"" )"	1748:4:43853:43942	29626	0	True				
ANR	29739	CallExpression	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (invalid space(1))\\n"" )"		29626	0					
ANR	29740	Callee	DBGPRINTF		29626	0					
ANR	29741	Identifier	DBGPRINTF		29626	0					
ANR	29742	ArgumentList	"""rainerscript: (ipv42num) error: wrong IP-Address format (invalid space(1))\\n"""		29626	1					
ANR	29743	Argument	"""rainerscript: (ipv42num) error: wrong IP-Address format (invalid space(1))\\n"""		29626	0					
ANR	29744	PrimaryExpression	"""rainerscript: (ipv42num) error: wrong IP-Address format (invalid space(1))\\n"""		29626	0					
ANR	29745	GotoStatement	goto done ;	1749:4:43948:43957	29626	1	True				
ANR	29746	Identifier	done		29626	0					
ANR	29747	ExpressionStatement	prevdot = 0	1751:3:43967:43978	29626	11	True				
ANR	29748	AssignmentExpression	prevdot = 0		29626	0		=			
ANR	29749	Identifier	prevdot		29626	0					
ANR	29750	PrimaryExpression	0		29626	1					
ANR	29751	ExpressionStatement	startblank = 0	1752:3:43983:43997	29626	12	True				
ANR	29752	AssignmentExpression	startblank = 0		29626	0		=			
ANR	29753	Identifier	startblank		29626	0					
ANR	29754	PrimaryExpression	0		29626	1					
ANR	29755	ExpressionStatement	"DBGPRINTF ( ""rainerscript: (ipv42num) cycle: %d\\n"" , cyc )"	1753:3:44002:44056	29626	13	True				
ANR	29756	CallExpression	"DBGPRINTF ( ""rainerscript: (ipv42num) cycle: %d\\n"" , cyc )"		29626	0					
ANR	29757	Callee	DBGPRINTF		29626	0					
ANR	29758	Identifier	DBGPRINTF		29626	0					
ANR	29759	ArgumentList	"""rainerscript: (ipv42num) cycle: %d\\n"""		29626	1					
ANR	29760	Argument	"""rainerscript: (ipv42num) cycle: %d\\n"""		29626	0					
ANR	29761	PrimaryExpression	"""rainerscript: (ipv42num) cycle: %d\\n"""		29626	0					
ANR	29762	Argument	cyc		29626	1					
ANR	29763	Identifier	cyc		29626	0					
ANR	29764	ExpressionStatement	num [ cyc ] = num [ cyc ] * 10 + ( str [ i ] - '0' )	1754:3:44061:44096	29626	14	True				
ANR	29765	AssignmentExpression	num [ cyc ] = num [ cyc ] * 10 + ( str [ i ] - '0' )		29626	0		=			
ANR	29766	ArrayIndexing	num [ cyc ]		29626	0					
ANR	29767	Identifier	num		29626	0					
ANR	29768	Identifier	cyc		29626	1					
ANR	29769	AdditiveExpression	num [ cyc ] * 10 + ( str [ i ] - '0' )		29626	1		+			
ANR	29770	MultiplicativeExpression	num [ cyc ] * 10		29626	0		*			
ANR	29771	ArrayIndexing	num [ cyc ]		29626	0					
ANR	29772	Identifier	num		29626	0					
ANR	29773	Identifier	cyc		29626	1					
ANR	29774	PrimaryExpression	10		29626	1					
ANR	29775	AdditiveExpression	str [ i ] - '0'		29626	1		-			
ANR	29776	ArrayIndexing	str [ i ]		29626	0					
ANR	29777	Identifier	str		29626	0					
ANR	29778	Identifier	i		29626	1					
ANR	29779	PrimaryExpression	'0'		29626	1					
ANR	29780	BreakStatement	break ;	1755:3:44101:44106	29626	15	True				
ANR	29781	Label	case ' ' :	1756:2:44110:44118	29626	16	True				
ANR	29782	ExpressionStatement	prevdot = 0	1757:3:44123:44134	29626	17	True				
ANR	29783	AssignmentExpression	prevdot = 0		29626	0		=			
ANR	29784	Identifier	prevdot		29626	0					
ANR	29785	PrimaryExpression	0		29626	1					
ANR	29786	IfStatement	if ( i == 0 || startblank == 1 )		29626	18					
ANR	29787	Condition	i == 0 || startblank == 1	1758:6:44142:44166	29626	0	True				
ANR	29788	OrExpression	i == 0 || startblank == 1		29626	0		||			
ANR	29789	EqualityExpression	i == 0		29626	0		==			
ANR	29790	Identifier	i		29626	0					
ANR	29791	PrimaryExpression	0		29626	1					
ANR	29792	EqualityExpression	startblank == 1		29626	1		==			
ANR	29793	Identifier	startblank		29626	0					
ANR	29794	PrimaryExpression	1		29626	1					
ANR	29795	CompoundStatement		33:32:735:735	29626	1					
ANR	29796	ExpressionStatement	startblank = 1	1759:4:44174:44188	29626	0	True				
ANR	29797	AssignmentExpression	startblank = 1		29626	0		=			
ANR	29798	Identifier	startblank		29626	0					
ANR	29799	PrimaryExpression	1		29626	1					
ANR	29800	BreakStatement	break ;	1760:4:44194:44199	29626	1	True				
ANR	29801	ElseStatement	else		29626	0					
ANR	29802	CompoundStatement		37:7:780:780	29626	0					
ANR	29803	ExpressionStatement	endblank = 1	1763:4:44219:44231	29626	0	True				
ANR	29804	AssignmentExpression	endblank = 1		29626	0		=			
ANR	29805	Identifier	endblank		29626	0					
ANR	29806	PrimaryExpression	1		29626	1					
ANR	29807	BreakStatement	break ;	1764:4:44237:44242	29626	1	True				
ANR	29808	Label	case '.' :	1766:2:44251:44259	29626	19	True				
ANR	29809	IfStatement	if ( endblank == 1 )		29626	20					
ANR	29810	Condition	endblank == 1	1767:6:44267:44279	29626	0	True				
ANR	29811	EqualityExpression	endblank == 1		29626	0		==			
ANR	29812	Identifier	endblank		29626	0					
ANR	29813	PrimaryExpression	1		29626	1					
ANR	29814	CompoundStatement		42:20:848:848	29626	1					
ANR	29815	ExpressionStatement	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (inalid space(2))\\n"" )"	1768:4:44287:44375	29626	0	True				
ANR	29816	CallExpression	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (inalid space(2))\\n"" )"		29626	0					
ANR	29817	Callee	DBGPRINTF		29626	0					
ANR	29818	Identifier	DBGPRINTF		29626	0					
ANR	29819	ArgumentList	"""rainerscript: (ipv42num) error: wrong IP-Address format (inalid space(2))\\n"""		29626	1					
ANR	29820	Argument	"""rainerscript: (ipv42num) error: wrong IP-Address format (inalid space(2))\\n"""		29626	0					
ANR	29821	PrimaryExpression	"""rainerscript: (ipv42num) error: wrong IP-Address format (inalid space(2))\\n"""		29626	0					
ANR	29822	GotoStatement	goto done ;	1769:4:44381:44390	29626	1	True				
ANR	29823	Identifier	done		29626	0					
ANR	29824	ExpressionStatement	startblank = 0	1771:3:44400:44414	29626	21	True				
ANR	29825	AssignmentExpression	startblank = 0		29626	0		=			
ANR	29826	Identifier	startblank		29626	0					
ANR	29827	PrimaryExpression	0		29626	1					
ANR	29828	IfStatement	if ( prevdot == 1 )		29626	22					
ANR	29829	Condition	prevdot == 1	1772:6:44422:44433	29626	0	True				
ANR	29830	EqualityExpression	prevdot == 1		29626	0		==			
ANR	29831	Identifier	prevdot		29626	0					
ANR	29832	PrimaryExpression	1		29626	1					
ANR	29833	CompoundStatement		47:19:1002:1002	29626	1					
ANR	29834	ExpressionStatement	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (two dots after one another)\\n"" )"	1773:4:44441:44540	29626	0	True				
ANR	29835	CallExpression	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (two dots after one another)\\n"" )"		29626	0					
ANR	29836	Callee	DBGPRINTF		29626	0					
ANR	29837	Identifier	DBGPRINTF		29626	0					
ANR	29838	ArgumentList	"""rainerscript: (ipv42num) error: wrong IP-Address format (two dots after one another)\\n"""		29626	1					
ANR	29839	Argument	"""rainerscript: (ipv42num) error: wrong IP-Address format (two dots after one another)\\n"""		29626	0					
ANR	29840	PrimaryExpression	"""rainerscript: (ipv42num) error: wrong IP-Address format (two dots after one another)\\n"""		29626	0					
ANR	29841	GotoStatement	goto done ;	1774:4:44546:44555	29626	1	True				
ANR	29842	Identifier	done		29626	0					
ANR	29843	ExpressionStatement	prevdot = 1	1776:3:44565:44576	29626	23	True				
ANR	29844	AssignmentExpression	prevdot = 1		29626	0		=			
ANR	29845	Identifier	prevdot		29626	0					
ANR	29846	PrimaryExpression	1		29626	1					
ANR	29847	ExpressionStatement	cyc ++	1777:3:44581:44586	29626	24	True				
ANR	29848	PostIncDecOperationExpression	cyc ++		29626	0					
ANR	29849	Identifier	cyc		29626	0					
ANR	29850	IncDec	++		29626	1					
ANR	29851	IfStatement	if ( cyc > 3 )		29626	25					
ANR	29852	Condition	cyc > 3	1778:6:44594:44600	29626	0	True				
ANR	29853	RelationalExpression	cyc > 3		29626	0		>			
ANR	29854	Identifier	cyc		29626	0					
ANR	29855	PrimaryExpression	3		29626	1					
ANR	29856	CompoundStatement		53:14:1169:1169	29626	1					
ANR	29857	ExpressionStatement	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (too many dots)\\n"" )"	1779:4:44608:44694	29626	0	True				
ANR	29858	CallExpression	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (too many dots)\\n"" )"		29626	0					
ANR	29859	Callee	DBGPRINTF		29626	0					
ANR	29860	Identifier	DBGPRINTF		29626	0					
ANR	29861	ArgumentList	"""rainerscript: (ipv42num) error: wrong IP-Address format (too many dots)\\n"""		29626	1					
ANR	29862	Argument	"""rainerscript: (ipv42num) error: wrong IP-Address format (too many dots)\\n"""		29626	0					
ANR	29863	PrimaryExpression	"""rainerscript: (ipv42num) error: wrong IP-Address format (too many dots)\\n"""		29626	0					
ANR	29864	GotoStatement	goto done ;	1780:4:44700:44709	29626	1	True				
ANR	29865	Identifier	done		29626	0					
ANR	29866	BreakStatement	break ;	1782:3:44719:44724	29626	26	True				
ANR	29867	Label	default :	1783:2:44728:44735	29626	27	True				
ANR	29868	Identifier	default		29626	0					
ANR	29869	ExpressionStatement	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (invalid charakter)\\n"" )"	1784:3:44740:44830	29626	28	True				
ANR	29870	CallExpression	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (invalid charakter)\\n"" )"		29626	0					
ANR	29871	Callee	DBGPRINTF		29626	0					
ANR	29872	Identifier	DBGPRINTF		29626	0					
ANR	29873	ArgumentList	"""rainerscript: (ipv42num) error: wrong IP-Address format (invalid charakter)\\n"""		29626	1					
ANR	29874	Argument	"""rainerscript: (ipv42num) error: wrong IP-Address format (invalid charakter)\\n"""		29626	0					
ANR	29875	PrimaryExpression	"""rainerscript: (ipv42num) error: wrong IP-Address format (invalid charakter)\\n"""		29626	0					
ANR	29876	GotoStatement	goto done ;	1785:3:44835:44844	29626	29	True				
ANR	29877	Identifier	done		29626	0					
ANR	29878	IfStatement	if ( cyc != 3 )		29626	9					
ANR	29879	Condition	cyc != 3	1788:4:44857:44864	29626	0	True				
ANR	29880	EqualityExpression	cyc != 3		29626	0		!=			
ANR	29881	Identifier	cyc		29626	0					
ANR	29882	PrimaryExpression	3		29626	1					
ANR	29883	CompoundStatement		63:13:1433:1433	29626	1					
ANR	29884	ExpressionStatement	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (wrong number of dots)\\n"" )"	1789:2:44870:44963	29626	0	True				
ANR	29885	CallExpression	"DBGPRINTF ( ""rainerscript: (ipv42num) error: wrong IP-Address format (wrong number of dots)\\n"" )"		29626	0					
ANR	29886	Callee	DBGPRINTF		29626	0					
ANR	29887	Identifier	DBGPRINTF		29626	0					
ANR	29888	ArgumentList	"""rainerscript: (ipv42num) error: wrong IP-Address format (wrong number of dots)\\n"""		29626	1					
ANR	29889	Argument	"""rainerscript: (ipv42num) error: wrong IP-Address format (wrong number of dots)\\n"""		29626	0					
ANR	29890	PrimaryExpression	"""rainerscript: (ipv42num) error: wrong IP-Address format (wrong number of dots)\\n"""		29626	0					
ANR	29891	GotoStatement	goto done ;	1790:2:44967:44976	29626	1	True				
ANR	29892	Identifier	done		29626	0					
ANR	29893	ExpressionStatement	value = num [ 0 ] * 256 * 256 * 256 + num [ 1 ] * 256 * 256 + num [ 2 ] * 256 + num [ 3 ]	1792:1:44982:45041	29626	10	True				
ANR	29894	AssignmentExpression	value = num [ 0 ] * 256 * 256 * 256 + num [ 1 ] * 256 * 256 + num [ 2 ] * 256 + num [ 3 ]		29626	0		=			
ANR	29895	Identifier	value		29626	0					
ANR	29896	AdditiveExpression	num [ 0 ] * 256 * 256 * 256 + num [ 1 ] * 256 * 256 + num [ 2 ] * 256 + num [ 3 ]		29626	1		+			
ANR	29897	MultiplicativeExpression	num [ 0 ] * 256 * 256 * 256		29626	0		*			
ANR	29898	ArrayIndexing	num [ 0 ]		29626	0					
ANR	29899	Identifier	num		29626	0					
ANR	29900	PrimaryExpression	0		29626	1					
ANR	29901	MultiplicativeExpression	256 * 256 * 256		29626	1		*			
ANR	29902	PrimaryExpression	256		29626	0					
ANR	29903	MultiplicativeExpression	256 * 256		29626	1		*			
ANR	29904	PrimaryExpression	256		29626	0					
ANR	29905	PrimaryExpression	256		29626	1					
ANR	29906	AdditiveExpression	num [ 1 ] * 256 * 256 + num [ 2 ] * 256 + num [ 3 ]		29626	1		+			
ANR	29907	MultiplicativeExpression	num [ 1 ] * 256 * 256		29626	0		*			
ANR	29908	ArrayIndexing	num [ 1 ]		29626	0					
ANR	29909	Identifier	num		29626	0					
ANR	29910	PrimaryExpression	1		29626	1					
ANR	29911	MultiplicativeExpression	256 * 256		29626	1		*			
ANR	29912	PrimaryExpression	256		29626	0					
ANR	29913	PrimaryExpression	256		29626	1					
ANR	29914	AdditiveExpression	num [ 2 ] * 256 + num [ 3 ]		29626	1		+			
ANR	29915	MultiplicativeExpression	num [ 2 ] * 256		29626	0		*			
ANR	29916	ArrayIndexing	num [ 2 ]		29626	0					
ANR	29917	Identifier	num		29626	0					
ANR	29918	PrimaryExpression	2		29626	1					
ANR	29919	PrimaryExpression	256		29626	1					
ANR	29920	ArrayIndexing	num [ 3 ]		29626	1					
ANR	29921	Identifier	num		29626	0					
ANR	29922	PrimaryExpression	3		29626	1					
ANR	29923	Label	done :	1793:0:45043:45047	29626	11	True				
ANR	29924	Identifier	done		29626	0					
ANR	29925	ExpressionStatement	"DBGPRINTF ( ""rainerscript: (ipv42num): return value:'%lld'\\n"" , value )"	1794:1:45050:45116	29626	12	True				
ANR	29926	CallExpression	"DBGPRINTF ( ""rainerscript: (ipv42num): return value:'%lld'\\n"" , value )"		29626	0					
ANR	29927	Callee	DBGPRINTF		29626	0					
ANR	29928	Identifier	DBGPRINTF		29626	0					
ANR	29929	ArgumentList	"""rainerscript: (ipv42num): return value:'%lld'\\n"""		29626	1					
ANR	29930	Argument	"""rainerscript: (ipv42num): return value:'%lld'\\n"""		29626	0					
ANR	29931	PrimaryExpression	"""rainerscript: (ipv42num): return value:'%lld'\\n"""		29626	0					
ANR	29932	Argument	value		29626	1					
ANR	29933	Identifier	value		29626	0					
ANR	29934	ReturnStatement	return ( value ) ;	1795:1:45119:45132	29626	13	True				
ANR	29935	Identifier	value		29626	0					
ANR	29936	ReturnType	static long long		29626	1					
ANR	29937	Identifier	ipv42num		29626	2					
ANR	29938	ParameterList	char * str		29626	3					
ANR	29939	Parameter	char * str	1725:9:43421:43429	29626	0	True				
ANR	29940	ParameterType	char *		29626	0					
ANR	29941	Identifier	str		29626	1					
ANR	29942	CFGEntryNode	ENTRY		29626		True				
ANR	29943	CFGExitNode	EXIT		29626		True				
ANR	29944	Symbol	num		29626						
ANR	29945	Symbol	* cyc		29626						
ANR	29946	Symbol	i		29626						
ANR	29947	Symbol	cyc		29626						
ANR	29948	Symbol	str		29626						
ANR	29949	Symbol	startblank		29626						
ANR	29950	Symbol	* num		29626						
ANR	29951	Symbol	strlen		29626						
ANR	29952	Symbol	* i		29626						
ANR	29953	Symbol	len		29626						
ANR	29954	Symbol	endblank		29626						
ANR	29955	Symbol	* str		29626						
ANR	29956	Symbol	value		29626						
ANR	29957	Symbol	prevdot		29626						
ANR	29958	DeclStmt									
ANR	29959	Decl							int	int	success
ANR	29960	DeclStmt									
ANR	29961	Decl							int	int [ 4 ]	numip
ANR	29962	DeclStmt									
ANR	29963	Decl							char	char [ 16 ]	str
ANR	29964	DeclStmt									
ANR	29965	Decl							size_t	size_t	len
ANR	29966	DeclStmt									
ANR	29967	Decl							es_str_t	es_str_t *	estr
ANR	29968	DeclStmt									
ANR	29969	Decl							long long	long long	num
ANR	29970	DeclStmt									
ANR	29971	Decl							int	int	i
ANR	29972	DeclStmt									
ANR	29973	Decl							char	char *	envvar
ANR	29974	DeclStmt									
ANR	29975	Decl							int	int	bMustFree
ANR	29976	DeclStmt									
ANR	29977	Decl							es_str_t	es_str_t *	estr
ANR	29978	DeclStmt									
ANR	29979	Decl							char	char *	str
ANR	29980	DeclStmt									
ANR	29981	Decl							uchar	uchar *	resStr
ANR	29982	DeclStmt									
ANR	29983	Decl							int	int	retval
ANR	29984	DeclStmt									
ANR	29985	Decl							struct svar	struct svar [ CNFFUNC_MAX_ARGS ]	r
ANR	29986	DeclStmt									
ANR	29987	Decl							int	int	delim
ANR	29988	DeclStmt									
ANR	29989	Decl							int	int	matchnbr
ANR	29990	DeclStmt									
ANR	29991	Decl							struct funcData_prifilt	struct funcData_prifilt *	pPrifilt
ANR	29992	DeclStmt									
ANR	29993	Decl							rsRetVal	rsRetVal	localRet
ANR	29994	DeclStmt									
ANR	29995	Decl							lookup_key_t	lookup_key_t	key
ANR	29996	DeclStmt									
ANR	29997	Decl							uint8_t	uint8_t	lookup_key_type
ANR	29998	DeclStmt									
ANR	29999	Decl							lookup_t	lookup_t *	lookup_table
ANR	30000	DeclStmt									
ANR	30001	Decl							char	char *	delimstr
ANR	30002	DeclStmt									
ANR	30003	Decl							char	char *	fname
ANR	30004	DeclStmt									
ANR	30005	Decl							rs_size_t	rs_size_t	propLen
ANR	30006	DeclStmt									
ANR	30007	Decl							uchar	uchar *	pszProp
ANR	30008	DeclStmt									
ANR	30009	Decl							unsigned short	unsigned short	bMustBeFreed
ANR	30010	DeclStmt									
ANR	30011	Decl							rsRetVal	rsRetVal	localRet
ANR	30012	DeclStmt									
ANR	30013	Decl							struct json_object	struct json_object *	json
ANR	30014	DeclStmt									
ANR	30015	Decl							uchar	uchar *	cstr
ANR	30016	DeclStmt									
ANR	30017	Decl							int	int	i
ANR	30018	DeclStmt									
ANR	30019	Decl							int	int	r
ANR	30020	DeclStmt									
ANR	30021	Decl							es_str_t	es_str_t * *	res
ANR	30022	DeclStmt									
ANR	30023	Decl							define FREE_BOTH_RET	define FREE_BOTH_RET	varFreeMembers
ANR	30024	DeclStmt									
ANR	30025	Decl							x	x	var2Number
ANR	30026	DeclStmt									
ANR	30027	Decl							FREE_BOTH_RET define PREP_TWO_STRINGS	FREE_BOTH_RET define PREP_TWO_STRINGS	cnfexprEval
ANR	30028	DeclStmt									
ANR	30029	Decl							struct svar	struct svar	r
ANR	30030	Decl							struct svar	struct svar	l
ANR	30031	DeclStmt									
ANR	30032	Decl							__restrict__	__restrict__	estr_l
ANR	30033	DeclStmt									
ANR	30034	Decl							int	int	convok_r
ANR	30035	Decl							int	int	convok_l
ANR	30036	DeclStmt									
ANR	30037	Decl							int	int	bMustFree
ANR	30038	Decl							int	int	bMustFree2
ANR	30039	DeclStmt									
ANR	30040	Decl							long long	long long	n_r
ANR	30041	Decl							long long	long long	n_l
ANR	30042	Function	cnfarrayContentDestruct	2692:0:71541:71695							
ANR	30043	FunctionDef	cnfarrayContentDestruct (struct cnfarray * ar)		30042	0					
ANR	30044	CompoundStatement		2694:0:71591:71695	30042	0					
ANR	30045	IdentifierDeclStatement	unsigned short i ;	2695:1:71594:71610	30042	0	True				
ANR	30046	IdentifierDecl	i		30042	0					
ANR	30047	IdentifierDeclType	unsigned short		30042	0					
ANR	30048	Identifier	i		30042	1					
ANR	30049	ForStatement	for ( i = 0 ; i < ar -> nmemb ; ++ i )		30042	1					
ANR	30050	ForInit	i = 0 ;	2696:5:71617:71623	30042	0	True				
ANR	30051	AssignmentExpression	i = 0		30042	0		=			
ANR	30052	Identifier	i		30042	0					
ANR	30053	PrimaryExpression	0		30042	1					
ANR	30054	Condition	i < ar -> nmemb	2696:13:71625:71637	30042	1	True				
ANR	30055	RelationalExpression	i < ar -> nmemb		30042	0		<			
ANR	30056	Identifier	i		30042	0					
ANR	30057	PtrMemberAccess	ar -> nmemb		30042	1					
ANR	30058	Identifier	ar		30042	0					
ANR	30059	Identifier	nmemb		30042	1					
ANR	30060	UnaryExpression	++ i	2696:29:71641:71643	30042	2	True				
ANR	30061	IncDec	++		30042	0					
ANR	30062	Identifier	i		30042	1					
ANR	30063	CompoundStatement		3:34:54:54	30042	3					
ANR	30064	ExpressionStatement	es_deleteStr ( ar -> arr [ i ] )	2697:2:71650:71674	30042	0	True				
ANR	30065	CallExpression	es_deleteStr ( ar -> arr [ i ] )		30042	0					
ANR	30066	Callee	es_deleteStr		30042	0					
ANR	30067	Identifier	es_deleteStr		30042	0					
ANR	30068	ArgumentList	ar -> arr [ i ]		30042	1					
ANR	30069	Argument	ar -> arr [ i ]		30042	0					
ANR	30070	ArrayIndexing	ar -> arr [ i ]		30042	0					
ANR	30071	PtrMemberAccess	ar -> arr		30042	0					
ANR	30072	Identifier	ar		30042	0					
ANR	30073	Identifier	arr		30042	1					
ANR	30074	Identifier	i		30042	1					
ANR	30075	ExpressionStatement	free ( ar -> arr )	2699:1:71680:71693	30042	2	True				
ANR	30076	CallExpression	free ( ar -> arr )		30042	0					
ANR	30077	Callee	free		30042	0					
ANR	30078	Identifier	free		30042	0					
ANR	30079	ArgumentList	ar -> arr		30042	1					
ANR	30080	Argument	ar -> arr		30042	0					
ANR	30081	PtrMemberAccess	ar -> arr		30042	0					
ANR	30082	Identifier	ar		30042	0					
ANR	30083	Identifier	arr		30042	1					
ANR	30084	ReturnType	void		30042	1					
ANR	30085	Identifier	cnfarrayContentDestruct		30042	2					
ANR	30086	ParameterList	struct cnfarray * ar		30042	3					
ANR	30087	Parameter	struct cnfarray * ar	2693:24:71570:71588	30042	0	True				
ANR	30088	ParameterType	struct cnfarray *		30042	0					
ANR	30089	Identifier	ar		30042	1					
ANR	30090	CFGEntryNode	ENTRY		30042		True				
ANR	30091	CFGExitNode	EXIT		30042		True				
ANR	30092	Symbol	ar		30042						
ANR	30093	Symbol	* i		30042						
ANR	30094	Symbol	* ar		30042						
ANR	30095	Symbol	ar -> nmemb		30042						
ANR	30096	Symbol	i		30042						
ANR	30097	Symbol	* ar -> arr		30042						
ANR	30098	Symbol	ar -> arr		30042						
ANR	30099	Symbol	* * ar		30042						
ANR	30100	Function	cnffuncDestruct	2702:0:71698:72148							
ANR	30101	FunctionDef	cnffuncDestruct (struct cnffunc * func)		30100	0					
ANR	30102	CompoundStatement		2704:0:71748:72148	30100	0					
ANR	30103	IdentifierDeclStatement	unsigned short i ;	2705:1:71751:71767	30100	0	True				
ANR	30104	IdentifierDecl	i		30100	0					
ANR	30105	IdentifierDeclType	unsigned short		30100	0					
ANR	30106	Identifier	i		30100	1					
ANR	30107	ForStatement	for ( i = 0 ; i < func -> nParams ; ++ i )		30100	1					
ANR	30108	ForInit	i = 0 ;	2707:5:71775:71781	30100	0	True				
ANR	30109	AssignmentExpression	i = 0		30100	0		=			
ANR	30110	Identifier	i		30100	0					
ANR	30111	PrimaryExpression	0		30100	1					
ANR	30112	Condition	i < func -> nParams	2707:13:71783:71799	30100	1	True				
ANR	30113	RelationalExpression	i < func -> nParams		30100	0		<			
ANR	30114	Identifier	i		30100	0					
ANR	30115	PtrMemberAccess	func -> nParams		30100	1					
ANR	30116	Identifier	func		30100	0					
ANR	30117	Identifier	nParams		30100	1					
ANR	30118	UnaryExpression	++ i	2707:33:71803:71805	30100	2	True				
ANR	30119	IncDec	++		30100	0					
ANR	30120	Identifier	i		30100	1					
ANR	30121	CompoundStatement		4:38:59:59	30100	3					
ANR	30122	ExpressionStatement	cnfexprDestruct ( func -> expr [ i ] )	2708:2:71812:71842	30100	0	True				
ANR	30123	CallExpression	cnfexprDestruct ( func -> expr [ i ] )		30100	0					
ANR	30124	Callee	cnfexprDestruct		30100	0					
ANR	30125	Identifier	cnfexprDestruct		30100	0					
ANR	30126	ArgumentList	func -> expr [ i ]		30100	1					
ANR	30127	Argument	func -> expr [ i ]		30100	0					
ANR	30128	ArrayIndexing	func -> expr [ i ]		30100	0					
ANR	30129	PtrMemberAccess	func -> expr		30100	0					
ANR	30130	Identifier	func		30100	0					
ANR	30131	Identifier	expr		30100	1					
ANR	30132	Identifier	i		30100	1					
ANR	30133	SwitchStatement	switch ( func -> fID )		30100	2					
ANR	30134	Condition	func -> fID	2711:8:71905:71913	30100	0	True				
ANR	30135	PtrMemberAccess	func -> fID		30100	0					
ANR	30136	Identifier	func		30100	0					
ANR	30137	Identifier	fID		30100	1					
ANR	30138	CompoundStatement		8:19:167:167	30100	1					
ANR	30139	Label	case CNFFUNC_RE_MATCH :	2712:2:71920:71941	30100	0	True				
ANR	30140	Identifier	CNFFUNC_RE_MATCH		30100	0					
ANR	30141	Label	case CNFFUNC_RE_EXTRACT :	2713:2:71945:71968	30100	1	True				
ANR	30142	Identifier	CNFFUNC_RE_EXTRACT		30100	0					
ANR	30143	IfStatement	if ( func -> funcdata != NULL )		30100	2					
ANR	30144	Condition	func -> funcdata != NULL	2714:6:71976:71997	30100	0	True				
ANR	30145	EqualityExpression	func -> funcdata != NULL		30100	0		!=			
ANR	30146	PtrMemberAccess	func -> funcdata		30100	0					
ANR	30147	Identifier	func		30100	0					
ANR	30148	Identifier	funcdata		30100	1					
ANR	30149	Identifier	NULL		30100	1					
ANR	30150	ExpressionStatement	regexp . regfree ( func -> funcdata )	2715:4:72004:72034	30100	1	True				
ANR	30151	CallExpression	regexp . regfree ( func -> funcdata )		30100	0					
ANR	30152	Callee	regexp . regfree		30100	0					
ANR	30153	MemberAccess	regexp . regfree		30100	0					
ANR	30154	Identifier	regexp		30100	0					
ANR	30155	Identifier	regfree		30100	1					
ANR	30156	ArgumentList	func -> funcdata		30100	1					
ANR	30157	Argument	func -> funcdata		30100	0					
ANR	30158	PtrMemberAccess	func -> funcdata		30100	0					
ANR	30159	Identifier	func		30100	0					
ANR	30160	Identifier	funcdata		30100	1					
ANR	30161	BreakStatement	break ;	2716:3:72039:72044	30100	3	True				
ANR	30162	Label	default :	2717:2:72048:72055	30100	4	True				
ANR	30163	Identifier	default		30100	0					
ANR	30164	BreakStatement	break ;	2717:10:72056:72061	30100	5	True				
ANR	30165	IfStatement	if ( func -> destructable_funcdata )		30100	3					
ANR	30166	Condition	func -> destructable_funcdata	2719:4:72070:72096	30100	0	True				
ANR	30167	PtrMemberAccess	func -> destructable_funcdata		30100	0					
ANR	30168	Identifier	func		30100	0					
ANR	30169	Identifier	destructable_funcdata		30100	1					
ANR	30170	CompoundStatement		16:33:350:350	30100	1					
ANR	30171	ExpressionStatement	free ( func -> funcdata )	2720:2:72103:72123	30100	0	True				
ANR	30172	CallExpression	free ( func -> funcdata )		30100	0					
ANR	30173	Callee	free		30100	0					
ANR	30174	Identifier	free		30100	0					
ANR	30175	ArgumentList	func -> funcdata		30100	1					
ANR	30176	Argument	func -> funcdata		30100	0					
ANR	30177	PtrMemberAccess	func -> funcdata		30100	0					
ANR	30178	Identifier	func		30100	0					
ANR	30179	Identifier	funcdata		30100	1					
ANR	30180	ExpressionStatement	free ( func -> fname )	2722:1:72129:72146	30100	4	True				
ANR	30181	CallExpression	free ( func -> fname )		30100	0					
ANR	30182	Callee	free		30100	0					
ANR	30183	Identifier	free		30100	0					
ANR	30184	ArgumentList	func -> fname		30100	1					
ANR	30185	Argument	func -> fname		30100	0					
ANR	30186	PtrMemberAccess	func -> fname		30100	0					
ANR	30187	Identifier	func		30100	0					
ANR	30188	Identifier	fname		30100	1					
ANR	30189	ReturnType	static void		30100	1					
ANR	30190	Identifier	cnffuncDestruct		30100	2					
ANR	30191	ParameterList	struct cnffunc * func		30100	3					
ANR	30192	Parameter	struct cnffunc * func	2703:16:71726:71745	30100	0	True				
ANR	30193	ParameterType	struct cnffunc *		30100	0					
ANR	30194	Identifier	func		30100	1					
ANR	30195	CFGEntryNode	ENTRY		30100		True				
ANR	30196	CFGExitNode	EXIT		30100		True				
ANR	30197	Symbol	regexp		30100						
ANR	30198	Symbol	NULL		30100						
ANR	30199	Symbol	* func		30100						
ANR	30200	Symbol	func -> funcdata		30100						
ANR	30201	Symbol	* * func		30100						
ANR	30202	Symbol	i		30100						
ANR	30203	Symbol	* func -> expr		30100						
ANR	30204	Symbol	* i		30100						
ANR	30205	Symbol	func		30100						
ANR	30206	Symbol	func -> expr		30100						
ANR	30207	Symbol	func -> fID		30100						
ANR	30208	Symbol	func -> destructable_funcdata		30100						
ANR	30209	Symbol	func -> nParams		30100						
ANR	30210	Symbol	func -> fname		30100						
ANR	30211	DeclStmt									
ANR	30212	Decl							int	int	convok
ANR	30213	DeclStmt									
ANR	30214	Decl							struct svar	struct svar	ret
ANR	30215	DeclStmt									
ANR	30216	Decl							int	int	retVal
ANR	30217	DeclStmt									
ANR	30218	Decl							struct svar	struct svar	ret
ANR	30219	DeclStmt									
ANR	30220	Decl							void	void *	retptr
ANR	30221	Function	doIndent	2817:0:74167:74267							
ANR	30222	FunctionDef	doIndent (int indent)		30221	0					
ANR	30223	CompoundStatement		2819:0:74207:74267	30221	0					
ANR	30224	IdentifierDeclStatement	int i ;	2820:1:74210:74215	30221	0	True				
ANR	30225	IdentifierDecl	i		30221	0					
ANR	30226	IdentifierDeclType	int		30221	0					
ANR	30227	Identifier	i		30221	1					
ANR	30228	ForStatement	for ( i = 0 ; i < indent ; ++ i )		30221	1					
ANR	30229	ForInit	i = 0 ;	2821:5:74222:74228	30221	0	True				
ANR	30230	AssignmentExpression	i = 0		30221	0		=			
ANR	30231	Identifier	i		30221	0					
ANR	30232	PrimaryExpression	0		30221	1					
ANR	30233	Condition	i < indent	2821:13:74230:74239	30221	1	True				
ANR	30234	RelationalExpression	i < indent		30221	0		<			
ANR	30235	Identifier	i		30221	0					
ANR	30236	Identifier	indent		30221	1					
ANR	30237	UnaryExpression	++ i	2821:26:74243:74245	30221	2	True				
ANR	30238	IncDec	++		30221	0					
ANR	30239	Identifier	i		30221	1					
ANR	30240	ExpressionStatement	"dbgprintf ( ""  "" )"	2822:2:74250:74265	30221	3	True				
ANR	30241	CallExpression	"dbgprintf ( ""  "" )"		30221	0					
ANR	30242	Callee	dbgprintf		30221	0					
ANR	30243	Identifier	dbgprintf		30221	0					
ANR	30244	ArgumentList	"""  """		30221	1					
ANR	30245	Argument	"""  """		30221	0					
ANR	30246	PrimaryExpression	"""  """		30221	0					
ANR	30247	ReturnType	inline static void		30221	1					
ANR	30248	Identifier	doIndent		30221	2					
ANR	30249	ParameterList	int indent		30221	3					
ANR	30250	Parameter	int indent	2818:9:74195:74204	30221	0	True				
ANR	30251	ParameterType	int		30221	0					
ANR	30252	Identifier	indent		30221	1					
ANR	30253	CFGEntryNode	ENTRY		30221		True				
ANR	30254	CFGExitNode	EXIT		30221		True				
ANR	30255	Symbol	indent		30221						
ANR	30256	Symbol	i		30221						
ANR	30257	Function	pmaskPrint	2825:0:74270:74520							
ANR	30258	FunctionDef	"pmaskPrint (uchar * pmask , int indent)"		30257	0					
ANR	30259	CompoundStatement		2827:0:74319:74520	30257	0					
ANR	30260	IdentifierDeclStatement	int i ;	2828:1:74322:74327	30257	0	True				
ANR	30261	IdentifierDecl	i		30257	0					
ANR	30262	IdentifierDeclType	int		30257	0					
ANR	30263	Identifier	i		30257	1					
ANR	30264	ExpressionStatement	doIndent ( indent )	2829:1:74330:74346	30257	1	True				
ANR	30265	CallExpression	doIndent ( indent )		30257	0					
ANR	30266	Callee	doIndent		30257	0					
ANR	30267	Identifier	doIndent		30257	0					
ANR	30268	ArgumentList	indent		30257	1					
ANR	30269	Argument	indent		30257	0					
ANR	30270	Identifier	indent		30257	0					
ANR	30271	ExpressionStatement	"dbgprintf ( ""pmask: "" )"	2830:1:74349:74369	30257	2	True				
ANR	30272	CallExpression	"dbgprintf ( ""pmask: "" )"		30257	0					
ANR	30273	Callee	dbgprintf		30257	0					
ANR	30274	Identifier	dbgprintf		30257	0					
ANR	30275	ArgumentList	"""pmask: """		30257	1					
ANR	30276	Argument	"""pmask: """		30257	0					
ANR	30277	PrimaryExpression	"""pmask: """		30257	0					
ANR	30278	ForStatement	for ( i = 0 ; i <= LOG_NFACILITIES ; i ++ )		30257	3					
ANR	30279	ForInit	i = 0 ;	2831:6:74377:74382	30257	0	True				
ANR	30280	AssignmentExpression	i = 0		30257	0		=			
ANR	30281	Identifier	i		30257	0					
ANR	30282	PrimaryExpression	0		30257	1					
ANR	30283	Condition	i <= LOG_NFACILITIES	2831:13:74384:74403	30257	1	True				
ANR	30284	RelationalExpression	i <= LOG_NFACILITIES		30257	0		<=			
ANR	30285	Identifier	i		30257	0					
ANR	30286	Identifier	LOG_NFACILITIES		30257	1					
ANR	30287	PostIncDecOperationExpression	i ++	2831:35:74406:74408	30257	2	True				
ANR	30288	Identifier	i		30257	0					
ANR	30289	IncDec	++		30257	1					
ANR	30290	IfStatement	if ( pmask [ i ] == TABLE_NOPRI )		30257	3					
ANR	30291	Condition	pmask [ i ] == TABLE_NOPRI	2832:6:74417:74439	30257	0	True				
ANR	30292	EqualityExpression	pmask [ i ] == TABLE_NOPRI		30257	0		==			
ANR	30293	ArrayIndexing	pmask [ i ]		30257	0					
ANR	30294	Identifier	pmask		30257	0					
ANR	30295	Identifier	i		30257	1					
ANR	30296	Identifier	TABLE_NOPRI		30257	1					
ANR	30297	ExpressionStatement	"dbgprintf ( "" X "" )"	2833:3:74445:74461	30257	1	True				
ANR	30298	CallExpression	"dbgprintf ( "" X "" )"		30257	0					
ANR	30299	Callee	dbgprintf		30257	0					
ANR	30300	Identifier	dbgprintf		30257	0					
ANR	30301	ArgumentList	""" X """		30257	1					
ANR	30302	Argument	""" X """		30257	0					
ANR	30303	PrimaryExpression	""" X """		30257	0					
ANR	30304	ElseStatement	else		30257	0					
ANR	30305	ExpressionStatement	"dbgprintf ( ""%2X "" , pmask [ i ] )"	2835:3:74473:74500	30257	0	True				
ANR	30306	CallExpression	"dbgprintf ( ""%2X "" , pmask [ i ] )"		30257	0					
ANR	30307	Callee	dbgprintf		30257	0					
ANR	30308	Identifier	dbgprintf		30257	0					
ANR	30309	ArgumentList	"""%2X """		30257	1					
ANR	30310	Argument	"""%2X """		30257	0					
ANR	30311	PrimaryExpression	"""%2X """		30257	0					
ANR	30312	Argument	pmask [ i ]		30257	1					
ANR	30313	ArrayIndexing	pmask [ i ]		30257	0					
ANR	30314	Identifier	pmask		30257	0					
ANR	30315	Identifier	i		30257	1					
ANR	30316	ExpressionStatement	"dbgprintf ( ""\\n"" )"	2836:1:74503:74518	30257	4	True				
ANR	30317	CallExpression	"dbgprintf ( ""\\n"" )"		30257	0					
ANR	30318	Callee	dbgprintf		30257	0					
ANR	30319	Identifier	dbgprintf		30257	0					
ANR	30320	ArgumentList	"""\\n"""		30257	1					
ANR	30321	Argument	"""\\n"""		30257	0					
ANR	30322	PrimaryExpression	"""\\n"""		30257	0					
ANR	30323	ReturnType	static void		30257	1					
ANR	30324	Identifier	pmaskPrint		30257	2					
ANR	30325	ParameterList	"uchar * pmask , int indent"		30257	3					
ANR	30326	Parameter	uchar * pmask	2826:11:74293:74304	30257	0	True				
ANR	30327	ParameterType	uchar *		30257	0					
ANR	30328	Identifier	pmask		30257	1					
ANR	30329	Parameter	int indent	2826:25:74307:74316	30257	1	True				
ANR	30330	ParameterType	int		30257	0					
ANR	30331	Identifier	indent		30257	1					
ANR	30332	CFGEntryNode	ENTRY		30257		True				
ANR	30333	CFGExitNode	EXIT		30257		True				
ANR	30334	Symbol	pmask		30257						
ANR	30335	Symbol	* i		30257						
ANR	30336	Symbol	indent		30257						
ANR	30337	Symbol	* pmask		30257						
ANR	30338	Symbol	i		30257						
ANR	30339	Symbol	LOG_NFACILITIES		30257						
ANR	30340	Symbol	TABLE_NOPRI		30257						
ANR	30341	Function	cnfarrayPrint	2839:0:74523:74752							
ANR	30342	FunctionDef	"cnfarrayPrint (struct cnfarray * ar , int indent)"		30341	0					
ANR	30343	CompoundStatement		2841:0:74582:74752	30341	0					
ANR	30344	IdentifierDeclStatement	int i ;	2842:1:74585:74590	30341	0	True				
ANR	30345	IdentifierDecl	i		30341	0					
ANR	30346	IdentifierDeclType	int		30341	0					
ANR	30347	Identifier	i		30341	1					
ANR	30348	ExpressionStatement	doIndent ( indent )	2843:1:74593:74609	30341	1	True				
ANR	30349	CallExpression	doIndent ( indent )		30341	0					
ANR	30350	Callee	doIndent		30341	0					
ANR	30351	Identifier	doIndent		30341	0					
ANR	30352	ArgumentList	indent		30341	1					
ANR	30353	Argument	indent		30341	0					
ANR	30354	Identifier	indent		30341	0					
ANR	30355	ExpressionStatement	"dbgprintf ( ""ARRAY:\\n"" )"	2843:19:74611:74632	30341	2	True				
ANR	30356	CallExpression	"dbgprintf ( ""ARRAY:\\n"" )"		30341	0					
ANR	30357	Callee	dbgprintf		30341	0					
ANR	30358	Identifier	dbgprintf		30341	0					
ANR	30359	ArgumentList	"""ARRAY:\\n"""		30341	1					
ANR	30360	Argument	"""ARRAY:\\n"""		30341	0					
ANR	30361	PrimaryExpression	"""ARRAY:\\n"""		30341	0					
ANR	30362	ForStatement	for ( i = 0 ; i < ar -> nmemb ; ++ i )		30341	3					
ANR	30363	ForInit	i = 0 ;	2844:5:74639:74645	30341	0	True				
ANR	30364	AssignmentExpression	i = 0		30341	0		=			
ANR	30365	Identifier	i		30341	0					
ANR	30366	PrimaryExpression	0		30341	1					
ANR	30367	Condition	i < ar -> nmemb	2844:13:74647:74659	30341	1	True				
ANR	30368	RelationalExpression	i < ar -> nmemb		30341	0		<			
ANR	30369	Identifier	i		30341	0					
ANR	30370	PtrMemberAccess	ar -> nmemb		30341	1					
ANR	30371	Identifier	ar		30341	0					
ANR	30372	Identifier	nmemb		30341	1					
ANR	30373	UnaryExpression	++ i	2844:29:74663:74665	30341	2	True				
ANR	30374	IncDec	++		30341	0					
ANR	30375	Identifier	i		30341	1					
ANR	30376	CompoundStatement		4:34:85:85	30341	3					
ANR	30377	ExpressionStatement	doIndent ( indent + 1 )	2845:2:74672:74690	30341	0	True				
ANR	30378	CallExpression	doIndent ( indent + 1 )		30341	0					
ANR	30379	Callee	doIndent		30341	0					
ANR	30380	Identifier	doIndent		30341	0					
ANR	30381	ArgumentList	indent + 1		30341	1					
ANR	30382	Argument	indent + 1		30341	0					
ANR	30383	AdditiveExpression	indent + 1		30341	0		+			
ANR	30384	Identifier	indent		30341	0					
ANR	30385	PrimaryExpression	1		30341	1					
ANR	30386	ExpressionStatement	"cstrPrint ( ""string '"" , ar -> arr [ i ] )"	2846:2:74694:74727	30341	1	True				
ANR	30387	CallExpression	"cstrPrint ( ""string '"" , ar -> arr [ i ] )"		30341	0					
ANR	30388	Callee	cstrPrint		30341	0					
ANR	30389	Identifier	cstrPrint		30341	0					
ANR	30390	ArgumentList	"""string '"""		30341	1					
ANR	30391	Argument	"""string '"""		30341	0					
ANR	30392	PrimaryExpression	"""string '"""		30341	0					
ANR	30393	Argument	ar -> arr [ i ]		30341	1					
ANR	30394	ArrayIndexing	ar -> arr [ i ]		30341	0					
ANR	30395	PtrMemberAccess	ar -> arr		30341	0					
ANR	30396	Identifier	ar		30341	0					
ANR	30397	Identifier	arr		30341	1					
ANR	30398	Identifier	i		30341	1					
ANR	30399	ExpressionStatement	"dbgprintf ( ""'\\n"" )"	2847:2:74731:74747	30341	2	True				
ANR	30400	CallExpression	"dbgprintf ( ""'\\n"" )"		30341	0					
ANR	30401	Callee	dbgprintf		30341	0					
ANR	30402	Identifier	dbgprintf		30341	0					
ANR	30403	ArgumentList	"""'\\n"""		30341	1					
ANR	30404	Argument	"""'\\n"""		30341	0					
ANR	30405	PrimaryExpression	"""'\\n"""		30341	0					
ANR	30406	ReturnType	static void		30341	1					
ANR	30407	Identifier	cnfarrayPrint		30341	2					
ANR	30408	ParameterList	"struct cnfarray * ar , int indent"		30341	3					
ANR	30409	Parameter	struct cnfarray * ar	2840:14:74549:74567	30341	0	True				
ANR	30410	ParameterType	struct cnfarray *		30341	0					
ANR	30411	Identifier	ar		30341	1					
ANR	30412	Parameter	int indent	2840:35:74570:74579	30341	1	True				
ANR	30413	ParameterType	int		30341	0					
ANR	30414	Identifier	indent		30341	1					
ANR	30415	CFGEntryNode	ENTRY		30341		True				
ANR	30416	CFGExitNode	EXIT		30341		True				
ANR	30417	Symbol	ar		30341						
ANR	30418	Symbol	* i		30341						
ANR	30419	Symbol	* ar		30341						
ANR	30420	Symbol	indent		30341						
ANR	30421	Symbol	ar -> nmemb		30341						
ANR	30422	Symbol	i		30341						
ANR	30423	Symbol	* ar -> arr		30341						
ANR	30424	Symbol	ar -> arr		30341						
ANR	30425	Symbol	* * ar		30341						
ANR	30426	Function	cnfexprPrint	2851:0:74755:77867							
ANR	30427	FunctionDef	"cnfexprPrint (struct cnfexpr * expr , int indent)"		30426	0					
ANR	30428	CompoundStatement		2853:0:74807:77867	30426	0					
ANR	30429	IdentifierDeclStatement	struct cnffunc * func ;	2854:1:74810:74830	30426	0	True				
ANR	30430	IdentifierDecl	* func		30426	0					
ANR	30431	IdentifierDeclType	struct cnffunc *		30426	0					
ANR	30432	Identifier	func		30426	1					
ANR	30433	IdentifierDeclStatement	int i ;	2855:1:74833:74838	30426	1	True				
ANR	30434	IdentifierDecl	i		30426	0					
ANR	30435	IdentifierDeclType	int		30426	0					
ANR	30436	Identifier	i		30426	1					
ANR	30437	SwitchStatement	switch ( expr -> nodetype )		30426	2					
ANR	30438	Condition	expr -> nodetype	2857:8:74849:74862	30426	0	True				
ANR	30439	PtrMemberAccess	expr -> nodetype		30426	0					
ANR	30440	Identifier	expr		30426	0					
ANR	30441	Identifier	nodetype		30426	1					
ANR	30442	CompoundStatement		5:24:57:57	30426	1					
ANR	30443	Label	case CMP_EQ :	2858:1:74868:74879	30426	0	True				
ANR	30444	Identifier	CMP_EQ		30426	0					
ANR	30445	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2859:2:74883:74914	30426	1	True				
ANR	30446	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30447	Callee	cnfexprPrint		30426	0					
ANR	30448	Identifier	cnfexprPrint		30426	0					
ANR	30449	ArgumentList	expr -> l		30426	1					
ANR	30450	Argument	expr -> l		30426	0					
ANR	30451	PtrMemberAccess	expr -> l		30426	0					
ANR	30452	Identifier	expr		30426	0					
ANR	30453	Identifier	l		30426	1					
ANR	30454	Argument	indent + 1		30426	1					
ANR	30455	AdditiveExpression	indent + 1		30426	0		+			
ANR	30456	Identifier	indent		30426	0					
ANR	30457	PrimaryExpression	1		30426	1					
ANR	30458	ExpressionStatement	doIndent ( indent )	2860:2:74918:74934	30426	2	True				
ANR	30459	CallExpression	doIndent ( indent )		30426	0					
ANR	30460	Callee	doIndent		30426	0					
ANR	30461	Identifier	doIndent		30426	0					
ANR	30462	ArgumentList	indent		30426	1					
ANR	30463	Argument	indent		30426	0					
ANR	30464	Identifier	indent		30426	0					
ANR	30465	ExpressionStatement	"dbgprintf ( ""==\\n"" )"	2861:2:74938:74955	30426	3	True				
ANR	30466	CallExpression	"dbgprintf ( ""==\\n"" )"		30426	0					
ANR	30467	Callee	dbgprintf		30426	0					
ANR	30468	Identifier	dbgprintf		30426	0					
ANR	30469	ArgumentList	"""==\\n"""		30426	1					
ANR	30470	Argument	"""==\\n"""		30426	0					
ANR	30471	PrimaryExpression	"""==\\n"""		30426	0					
ANR	30472	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2862:2:74959:74990	30426	4	True				
ANR	30473	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30474	Callee	cnfexprPrint		30426	0					
ANR	30475	Identifier	cnfexprPrint		30426	0					
ANR	30476	ArgumentList	expr -> r		30426	1					
ANR	30477	Argument	expr -> r		30426	0					
ANR	30478	PtrMemberAccess	expr -> r		30426	0					
ANR	30479	Identifier	expr		30426	0					
ANR	30480	Identifier	r		30426	1					
ANR	30481	Argument	indent + 1		30426	1					
ANR	30482	AdditiveExpression	indent + 1		30426	0		+			
ANR	30483	Identifier	indent		30426	0					
ANR	30484	PrimaryExpression	1		30426	1					
ANR	30485	BreakStatement	break ;	2863:2:74994:74999	30426	5	True				
ANR	30486	Label	case CMP_NE :	2864:1:75002:75013	30426	6	True				
ANR	30487	Identifier	CMP_NE		30426	0					
ANR	30488	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2865:2:75017:75048	30426	7	True				
ANR	30489	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30490	Callee	cnfexprPrint		30426	0					
ANR	30491	Identifier	cnfexprPrint		30426	0					
ANR	30492	ArgumentList	expr -> l		30426	1					
ANR	30493	Argument	expr -> l		30426	0					
ANR	30494	PtrMemberAccess	expr -> l		30426	0					
ANR	30495	Identifier	expr		30426	0					
ANR	30496	Identifier	l		30426	1					
ANR	30497	Argument	indent + 1		30426	1					
ANR	30498	AdditiveExpression	indent + 1		30426	0		+			
ANR	30499	Identifier	indent		30426	0					
ANR	30500	PrimaryExpression	1		30426	1					
ANR	30501	ExpressionStatement	doIndent ( indent )	2866:2:75052:75068	30426	8	True				
ANR	30502	CallExpression	doIndent ( indent )		30426	0					
ANR	30503	Callee	doIndent		30426	0					
ANR	30504	Identifier	doIndent		30426	0					
ANR	30505	ArgumentList	indent		30426	1					
ANR	30506	Argument	indent		30426	0					
ANR	30507	Identifier	indent		30426	0					
ANR	30508	ExpressionStatement	"dbgprintf ( ""!=\\n"" )"	2867:2:75072:75089	30426	9	True				
ANR	30509	CallExpression	"dbgprintf ( ""!=\\n"" )"		30426	0					
ANR	30510	Callee	dbgprintf		30426	0					
ANR	30511	Identifier	dbgprintf		30426	0					
ANR	30512	ArgumentList	"""!=\\n"""		30426	1					
ANR	30513	Argument	"""!=\\n"""		30426	0					
ANR	30514	PrimaryExpression	"""!=\\n"""		30426	0					
ANR	30515	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2868:2:75093:75124	30426	10	True				
ANR	30516	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30517	Callee	cnfexprPrint		30426	0					
ANR	30518	Identifier	cnfexprPrint		30426	0					
ANR	30519	ArgumentList	expr -> r		30426	1					
ANR	30520	Argument	expr -> r		30426	0					
ANR	30521	PtrMemberAccess	expr -> r		30426	0					
ANR	30522	Identifier	expr		30426	0					
ANR	30523	Identifier	r		30426	1					
ANR	30524	Argument	indent + 1		30426	1					
ANR	30525	AdditiveExpression	indent + 1		30426	0		+			
ANR	30526	Identifier	indent		30426	0					
ANR	30527	PrimaryExpression	1		30426	1					
ANR	30528	BreakStatement	break ;	2869:2:75128:75133	30426	11	True				
ANR	30529	Label	case CMP_LE :	2870:1:75136:75147	30426	12	True				
ANR	30530	Identifier	CMP_LE		30426	0					
ANR	30531	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2871:2:75151:75182	30426	13	True				
ANR	30532	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30533	Callee	cnfexprPrint		30426	0					
ANR	30534	Identifier	cnfexprPrint		30426	0					
ANR	30535	ArgumentList	expr -> l		30426	1					
ANR	30536	Argument	expr -> l		30426	0					
ANR	30537	PtrMemberAccess	expr -> l		30426	0					
ANR	30538	Identifier	expr		30426	0					
ANR	30539	Identifier	l		30426	1					
ANR	30540	Argument	indent + 1		30426	1					
ANR	30541	AdditiveExpression	indent + 1		30426	0		+			
ANR	30542	Identifier	indent		30426	0					
ANR	30543	PrimaryExpression	1		30426	1					
ANR	30544	ExpressionStatement	doIndent ( indent )	2872:2:75186:75202	30426	14	True				
ANR	30545	CallExpression	doIndent ( indent )		30426	0					
ANR	30546	Callee	doIndent		30426	0					
ANR	30547	Identifier	doIndent		30426	0					
ANR	30548	ArgumentList	indent		30426	1					
ANR	30549	Argument	indent		30426	0					
ANR	30550	Identifier	indent		30426	0					
ANR	30551	ExpressionStatement	"dbgprintf ( ""<=\\n"" )"	2873:2:75206:75223	30426	15	True				
ANR	30552	CallExpression	"dbgprintf ( ""<=\\n"" )"		30426	0					
ANR	30553	Callee	dbgprintf		30426	0					
ANR	30554	Identifier	dbgprintf		30426	0					
ANR	30555	ArgumentList	"""<=\\n"""		30426	1					
ANR	30556	Argument	"""<=\\n"""		30426	0					
ANR	30557	PrimaryExpression	"""<=\\n"""		30426	0					
ANR	30558	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2874:2:75227:75258	30426	16	True				
ANR	30559	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30560	Callee	cnfexprPrint		30426	0					
ANR	30561	Identifier	cnfexprPrint		30426	0					
ANR	30562	ArgumentList	expr -> r		30426	1					
ANR	30563	Argument	expr -> r		30426	0					
ANR	30564	PtrMemberAccess	expr -> r		30426	0					
ANR	30565	Identifier	expr		30426	0					
ANR	30566	Identifier	r		30426	1					
ANR	30567	Argument	indent + 1		30426	1					
ANR	30568	AdditiveExpression	indent + 1		30426	0		+			
ANR	30569	Identifier	indent		30426	0					
ANR	30570	PrimaryExpression	1		30426	1					
ANR	30571	BreakStatement	break ;	2875:2:75262:75267	30426	17	True				
ANR	30572	Label	case CMP_GE :	2876:1:75270:75281	30426	18	True				
ANR	30573	Identifier	CMP_GE		30426	0					
ANR	30574	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2877:2:75285:75316	30426	19	True				
ANR	30575	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30576	Callee	cnfexprPrint		30426	0					
ANR	30577	Identifier	cnfexprPrint		30426	0					
ANR	30578	ArgumentList	expr -> l		30426	1					
ANR	30579	Argument	expr -> l		30426	0					
ANR	30580	PtrMemberAccess	expr -> l		30426	0					
ANR	30581	Identifier	expr		30426	0					
ANR	30582	Identifier	l		30426	1					
ANR	30583	Argument	indent + 1		30426	1					
ANR	30584	AdditiveExpression	indent + 1		30426	0		+			
ANR	30585	Identifier	indent		30426	0					
ANR	30586	PrimaryExpression	1		30426	1					
ANR	30587	ExpressionStatement	doIndent ( indent )	2878:2:75320:75336	30426	20	True				
ANR	30588	CallExpression	doIndent ( indent )		30426	0					
ANR	30589	Callee	doIndent		30426	0					
ANR	30590	Identifier	doIndent		30426	0					
ANR	30591	ArgumentList	indent		30426	1					
ANR	30592	Argument	indent		30426	0					
ANR	30593	Identifier	indent		30426	0					
ANR	30594	ExpressionStatement	"dbgprintf ( "">=\\n"" )"	2879:2:75340:75357	30426	21	True				
ANR	30595	CallExpression	"dbgprintf ( "">=\\n"" )"		30426	0					
ANR	30596	Callee	dbgprintf		30426	0					
ANR	30597	Identifier	dbgprintf		30426	0					
ANR	30598	ArgumentList	""">=\\n"""		30426	1					
ANR	30599	Argument	""">=\\n"""		30426	0					
ANR	30600	PrimaryExpression	""">=\\n"""		30426	0					
ANR	30601	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2880:2:75361:75392	30426	22	True				
ANR	30602	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30603	Callee	cnfexprPrint		30426	0					
ANR	30604	Identifier	cnfexprPrint		30426	0					
ANR	30605	ArgumentList	expr -> r		30426	1					
ANR	30606	Argument	expr -> r		30426	0					
ANR	30607	PtrMemberAccess	expr -> r		30426	0					
ANR	30608	Identifier	expr		30426	0					
ANR	30609	Identifier	r		30426	1					
ANR	30610	Argument	indent + 1		30426	1					
ANR	30611	AdditiveExpression	indent + 1		30426	0		+			
ANR	30612	Identifier	indent		30426	0					
ANR	30613	PrimaryExpression	1		30426	1					
ANR	30614	BreakStatement	break ;	2881:2:75396:75401	30426	23	True				
ANR	30615	Label	case CMP_LT :	2882:1:75404:75415	30426	24	True				
ANR	30616	Identifier	CMP_LT		30426	0					
ANR	30617	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2883:2:75419:75450	30426	25	True				
ANR	30618	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30619	Callee	cnfexprPrint		30426	0					
ANR	30620	Identifier	cnfexprPrint		30426	0					
ANR	30621	ArgumentList	expr -> l		30426	1					
ANR	30622	Argument	expr -> l		30426	0					
ANR	30623	PtrMemberAccess	expr -> l		30426	0					
ANR	30624	Identifier	expr		30426	0					
ANR	30625	Identifier	l		30426	1					
ANR	30626	Argument	indent + 1		30426	1					
ANR	30627	AdditiveExpression	indent + 1		30426	0		+			
ANR	30628	Identifier	indent		30426	0					
ANR	30629	PrimaryExpression	1		30426	1					
ANR	30630	ExpressionStatement	doIndent ( indent )	2884:2:75454:75470	30426	26	True				
ANR	30631	CallExpression	doIndent ( indent )		30426	0					
ANR	30632	Callee	doIndent		30426	0					
ANR	30633	Identifier	doIndent		30426	0					
ANR	30634	ArgumentList	indent		30426	1					
ANR	30635	Argument	indent		30426	0					
ANR	30636	Identifier	indent		30426	0					
ANR	30637	ExpressionStatement	"dbgprintf ( ""<\\n"" )"	2885:2:75474:75490	30426	27	True				
ANR	30638	CallExpression	"dbgprintf ( ""<\\n"" )"		30426	0					
ANR	30639	Callee	dbgprintf		30426	0					
ANR	30640	Identifier	dbgprintf		30426	0					
ANR	30641	ArgumentList	"""<\\n"""		30426	1					
ANR	30642	Argument	"""<\\n"""		30426	0					
ANR	30643	PrimaryExpression	"""<\\n"""		30426	0					
ANR	30644	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2886:2:75494:75525	30426	28	True				
ANR	30645	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30646	Callee	cnfexprPrint		30426	0					
ANR	30647	Identifier	cnfexprPrint		30426	0					
ANR	30648	ArgumentList	expr -> r		30426	1					
ANR	30649	Argument	expr -> r		30426	0					
ANR	30650	PtrMemberAccess	expr -> r		30426	0					
ANR	30651	Identifier	expr		30426	0					
ANR	30652	Identifier	r		30426	1					
ANR	30653	Argument	indent + 1		30426	1					
ANR	30654	AdditiveExpression	indent + 1		30426	0		+			
ANR	30655	Identifier	indent		30426	0					
ANR	30656	PrimaryExpression	1		30426	1					
ANR	30657	BreakStatement	break ;	2887:2:75529:75534	30426	29	True				
ANR	30658	Label	case CMP_GT :	2888:1:75537:75548	30426	30	True				
ANR	30659	Identifier	CMP_GT		30426	0					
ANR	30660	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2889:2:75552:75583	30426	31	True				
ANR	30661	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30662	Callee	cnfexprPrint		30426	0					
ANR	30663	Identifier	cnfexprPrint		30426	0					
ANR	30664	ArgumentList	expr -> l		30426	1					
ANR	30665	Argument	expr -> l		30426	0					
ANR	30666	PtrMemberAccess	expr -> l		30426	0					
ANR	30667	Identifier	expr		30426	0					
ANR	30668	Identifier	l		30426	1					
ANR	30669	Argument	indent + 1		30426	1					
ANR	30670	AdditiveExpression	indent + 1		30426	0		+			
ANR	30671	Identifier	indent		30426	0					
ANR	30672	PrimaryExpression	1		30426	1					
ANR	30673	ExpressionStatement	doIndent ( indent )	2890:2:75587:75603	30426	32	True				
ANR	30674	CallExpression	doIndent ( indent )		30426	0					
ANR	30675	Callee	doIndent		30426	0					
ANR	30676	Identifier	doIndent		30426	0					
ANR	30677	ArgumentList	indent		30426	1					
ANR	30678	Argument	indent		30426	0					
ANR	30679	Identifier	indent		30426	0					
ANR	30680	ExpressionStatement	"dbgprintf ( "">\\n"" )"	2891:2:75607:75623	30426	33	True				
ANR	30681	CallExpression	"dbgprintf ( "">\\n"" )"		30426	0					
ANR	30682	Callee	dbgprintf		30426	0					
ANR	30683	Identifier	dbgprintf		30426	0					
ANR	30684	ArgumentList	""">\\n"""		30426	1					
ANR	30685	Argument	""">\\n"""		30426	0					
ANR	30686	PrimaryExpression	""">\\n"""		30426	0					
ANR	30687	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2892:2:75627:75658	30426	34	True				
ANR	30688	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30689	Callee	cnfexprPrint		30426	0					
ANR	30690	Identifier	cnfexprPrint		30426	0					
ANR	30691	ArgumentList	expr -> r		30426	1					
ANR	30692	Argument	expr -> r		30426	0					
ANR	30693	PtrMemberAccess	expr -> r		30426	0					
ANR	30694	Identifier	expr		30426	0					
ANR	30695	Identifier	r		30426	1					
ANR	30696	Argument	indent + 1		30426	1					
ANR	30697	AdditiveExpression	indent + 1		30426	0		+			
ANR	30698	Identifier	indent		30426	0					
ANR	30699	PrimaryExpression	1		30426	1					
ANR	30700	BreakStatement	break ;	2893:2:75662:75667	30426	35	True				
ANR	30701	Label	case CMP_CONTAINS :	2894:1:75670:75687	30426	36	True				
ANR	30702	Identifier	CMP_CONTAINS		30426	0					
ANR	30703	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2895:2:75691:75722	30426	37	True				
ANR	30704	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30705	Callee	cnfexprPrint		30426	0					
ANR	30706	Identifier	cnfexprPrint		30426	0					
ANR	30707	ArgumentList	expr -> l		30426	1					
ANR	30708	Argument	expr -> l		30426	0					
ANR	30709	PtrMemberAccess	expr -> l		30426	0					
ANR	30710	Identifier	expr		30426	0					
ANR	30711	Identifier	l		30426	1					
ANR	30712	Argument	indent + 1		30426	1					
ANR	30713	AdditiveExpression	indent + 1		30426	0		+			
ANR	30714	Identifier	indent		30426	0					
ANR	30715	PrimaryExpression	1		30426	1					
ANR	30716	ExpressionStatement	doIndent ( indent )	2896:2:75726:75742	30426	38	True				
ANR	30717	CallExpression	doIndent ( indent )		30426	0					
ANR	30718	Callee	doIndent		30426	0					
ANR	30719	Identifier	doIndent		30426	0					
ANR	30720	ArgumentList	indent		30426	1					
ANR	30721	Argument	indent		30426	0					
ANR	30722	Identifier	indent		30426	0					
ANR	30723	ExpressionStatement	"dbgprintf ( ""CONTAINS\\n"" )"	2897:2:75746:75769	30426	39	True				
ANR	30724	CallExpression	"dbgprintf ( ""CONTAINS\\n"" )"		30426	0					
ANR	30725	Callee	dbgprintf		30426	0					
ANR	30726	Identifier	dbgprintf		30426	0					
ANR	30727	ArgumentList	"""CONTAINS\\n"""		30426	1					
ANR	30728	Argument	"""CONTAINS\\n"""		30426	0					
ANR	30729	PrimaryExpression	"""CONTAINS\\n"""		30426	0					
ANR	30730	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2898:2:75773:75804	30426	40	True				
ANR	30731	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30732	Callee	cnfexprPrint		30426	0					
ANR	30733	Identifier	cnfexprPrint		30426	0					
ANR	30734	ArgumentList	expr -> r		30426	1					
ANR	30735	Argument	expr -> r		30426	0					
ANR	30736	PtrMemberAccess	expr -> r		30426	0					
ANR	30737	Identifier	expr		30426	0					
ANR	30738	Identifier	r		30426	1					
ANR	30739	Argument	indent + 1		30426	1					
ANR	30740	AdditiveExpression	indent + 1		30426	0		+			
ANR	30741	Identifier	indent		30426	0					
ANR	30742	PrimaryExpression	1		30426	1					
ANR	30743	BreakStatement	break ;	2899:2:75808:75813	30426	41	True				
ANR	30744	Label	case CMP_CONTAINSI :	2900:1:75816:75834	30426	42	True				
ANR	30745	Identifier	CMP_CONTAINSI		30426	0					
ANR	30746	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2901:2:75838:75869	30426	43	True				
ANR	30747	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30748	Callee	cnfexprPrint		30426	0					
ANR	30749	Identifier	cnfexprPrint		30426	0					
ANR	30750	ArgumentList	expr -> l		30426	1					
ANR	30751	Argument	expr -> l		30426	0					
ANR	30752	PtrMemberAccess	expr -> l		30426	0					
ANR	30753	Identifier	expr		30426	0					
ANR	30754	Identifier	l		30426	1					
ANR	30755	Argument	indent + 1		30426	1					
ANR	30756	AdditiveExpression	indent + 1		30426	0		+			
ANR	30757	Identifier	indent		30426	0					
ANR	30758	PrimaryExpression	1		30426	1					
ANR	30759	ExpressionStatement	doIndent ( indent )	2902:2:75873:75889	30426	44	True				
ANR	30760	CallExpression	doIndent ( indent )		30426	0					
ANR	30761	Callee	doIndent		30426	0					
ANR	30762	Identifier	doIndent		30426	0					
ANR	30763	ArgumentList	indent		30426	1					
ANR	30764	Argument	indent		30426	0					
ANR	30765	Identifier	indent		30426	0					
ANR	30766	ExpressionStatement	"dbgprintf ( ""CONTAINS_I\\n"" )"	2903:2:75893:75918	30426	45	True				
ANR	30767	CallExpression	"dbgprintf ( ""CONTAINS_I\\n"" )"		30426	0					
ANR	30768	Callee	dbgprintf		30426	0					
ANR	30769	Identifier	dbgprintf		30426	0					
ANR	30770	ArgumentList	"""CONTAINS_I\\n"""		30426	1					
ANR	30771	Argument	"""CONTAINS_I\\n"""		30426	0					
ANR	30772	PrimaryExpression	"""CONTAINS_I\\n"""		30426	0					
ANR	30773	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2904:2:75922:75953	30426	46	True				
ANR	30774	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30775	Callee	cnfexprPrint		30426	0					
ANR	30776	Identifier	cnfexprPrint		30426	0					
ANR	30777	ArgumentList	expr -> r		30426	1					
ANR	30778	Argument	expr -> r		30426	0					
ANR	30779	PtrMemberAccess	expr -> r		30426	0					
ANR	30780	Identifier	expr		30426	0					
ANR	30781	Identifier	r		30426	1					
ANR	30782	Argument	indent + 1		30426	1					
ANR	30783	AdditiveExpression	indent + 1		30426	0		+			
ANR	30784	Identifier	indent		30426	0					
ANR	30785	PrimaryExpression	1		30426	1					
ANR	30786	BreakStatement	break ;	2905:2:75957:75962	30426	47	True				
ANR	30787	Label	case CMP_STARTSWITH :	2906:1:75965:75984	30426	48	True				
ANR	30788	Identifier	CMP_STARTSWITH		30426	0					
ANR	30789	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2907:2:75988:76019	30426	49	True				
ANR	30790	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30791	Callee	cnfexprPrint		30426	0					
ANR	30792	Identifier	cnfexprPrint		30426	0					
ANR	30793	ArgumentList	expr -> l		30426	1					
ANR	30794	Argument	expr -> l		30426	0					
ANR	30795	PtrMemberAccess	expr -> l		30426	0					
ANR	30796	Identifier	expr		30426	0					
ANR	30797	Identifier	l		30426	1					
ANR	30798	Argument	indent + 1		30426	1					
ANR	30799	AdditiveExpression	indent + 1		30426	0		+			
ANR	30800	Identifier	indent		30426	0					
ANR	30801	PrimaryExpression	1		30426	1					
ANR	30802	ExpressionStatement	doIndent ( indent )	2908:2:76023:76039	30426	50	True				
ANR	30803	CallExpression	doIndent ( indent )		30426	0					
ANR	30804	Callee	doIndent		30426	0					
ANR	30805	Identifier	doIndent		30426	0					
ANR	30806	ArgumentList	indent		30426	1					
ANR	30807	Argument	indent		30426	0					
ANR	30808	Identifier	indent		30426	0					
ANR	30809	ExpressionStatement	"dbgprintf ( ""STARTSWITH\\n"" )"	2909:2:76043:76068	30426	51	True				
ANR	30810	CallExpression	"dbgprintf ( ""STARTSWITH\\n"" )"		30426	0					
ANR	30811	Callee	dbgprintf		30426	0					
ANR	30812	Identifier	dbgprintf		30426	0					
ANR	30813	ArgumentList	"""STARTSWITH\\n"""		30426	1					
ANR	30814	Argument	"""STARTSWITH\\n"""		30426	0					
ANR	30815	PrimaryExpression	"""STARTSWITH\\n"""		30426	0					
ANR	30816	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2910:2:76072:76103	30426	52	True				
ANR	30817	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30818	Callee	cnfexprPrint		30426	0					
ANR	30819	Identifier	cnfexprPrint		30426	0					
ANR	30820	ArgumentList	expr -> r		30426	1					
ANR	30821	Argument	expr -> r		30426	0					
ANR	30822	PtrMemberAccess	expr -> r		30426	0					
ANR	30823	Identifier	expr		30426	0					
ANR	30824	Identifier	r		30426	1					
ANR	30825	Argument	indent + 1		30426	1					
ANR	30826	AdditiveExpression	indent + 1		30426	0		+			
ANR	30827	Identifier	indent		30426	0					
ANR	30828	PrimaryExpression	1		30426	1					
ANR	30829	BreakStatement	break ;	2911:2:76107:76112	30426	53	True				
ANR	30830	Label	case CMP_STARTSWITHI :	2912:1:76115:76135	30426	54	True				
ANR	30831	Identifier	CMP_STARTSWITHI		30426	0					
ANR	30832	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2913:2:76139:76170	30426	55	True				
ANR	30833	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30834	Callee	cnfexprPrint		30426	0					
ANR	30835	Identifier	cnfexprPrint		30426	0					
ANR	30836	ArgumentList	expr -> l		30426	1					
ANR	30837	Argument	expr -> l		30426	0					
ANR	30838	PtrMemberAccess	expr -> l		30426	0					
ANR	30839	Identifier	expr		30426	0					
ANR	30840	Identifier	l		30426	1					
ANR	30841	Argument	indent + 1		30426	1					
ANR	30842	AdditiveExpression	indent + 1		30426	0		+			
ANR	30843	Identifier	indent		30426	0					
ANR	30844	PrimaryExpression	1		30426	1					
ANR	30845	ExpressionStatement	doIndent ( indent )	2914:2:76174:76190	30426	56	True				
ANR	30846	CallExpression	doIndent ( indent )		30426	0					
ANR	30847	Callee	doIndent		30426	0					
ANR	30848	Identifier	doIndent		30426	0					
ANR	30849	ArgumentList	indent		30426	1					
ANR	30850	Argument	indent		30426	0					
ANR	30851	Identifier	indent		30426	0					
ANR	30852	ExpressionStatement	"dbgprintf ( ""STARTSWITH_I\\n"" )"	2915:2:76194:76221	30426	57	True				
ANR	30853	CallExpression	"dbgprintf ( ""STARTSWITH_I\\n"" )"		30426	0					
ANR	30854	Callee	dbgprintf		30426	0					
ANR	30855	Identifier	dbgprintf		30426	0					
ANR	30856	ArgumentList	"""STARTSWITH_I\\n"""		30426	1					
ANR	30857	Argument	"""STARTSWITH_I\\n"""		30426	0					
ANR	30858	PrimaryExpression	"""STARTSWITH_I\\n"""		30426	0					
ANR	30859	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2916:2:76225:76256	30426	58	True				
ANR	30860	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30861	Callee	cnfexprPrint		30426	0					
ANR	30862	Identifier	cnfexprPrint		30426	0					
ANR	30863	ArgumentList	expr -> r		30426	1					
ANR	30864	Argument	expr -> r		30426	0					
ANR	30865	PtrMemberAccess	expr -> r		30426	0					
ANR	30866	Identifier	expr		30426	0					
ANR	30867	Identifier	r		30426	1					
ANR	30868	Argument	indent + 1		30426	1					
ANR	30869	AdditiveExpression	indent + 1		30426	0		+			
ANR	30870	Identifier	indent		30426	0					
ANR	30871	PrimaryExpression	1		30426	1					
ANR	30872	BreakStatement	break ;	2917:2:76260:76265	30426	59	True				
ANR	30873	Label	case OR :	2918:1:76268:76275	30426	60	True				
ANR	30874	Identifier	OR		30426	0					
ANR	30875	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2919:2:76279:76310	30426	61	True				
ANR	30876	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30877	Callee	cnfexprPrint		30426	0					
ANR	30878	Identifier	cnfexprPrint		30426	0					
ANR	30879	ArgumentList	expr -> l		30426	1					
ANR	30880	Argument	expr -> l		30426	0					
ANR	30881	PtrMemberAccess	expr -> l		30426	0					
ANR	30882	Identifier	expr		30426	0					
ANR	30883	Identifier	l		30426	1					
ANR	30884	Argument	indent + 1		30426	1					
ANR	30885	AdditiveExpression	indent + 1		30426	0		+			
ANR	30886	Identifier	indent		30426	0					
ANR	30887	PrimaryExpression	1		30426	1					
ANR	30888	ExpressionStatement	doIndent ( indent )	2920:2:76314:76330	30426	62	True				
ANR	30889	CallExpression	doIndent ( indent )		30426	0					
ANR	30890	Callee	doIndent		30426	0					
ANR	30891	Identifier	doIndent		30426	0					
ANR	30892	ArgumentList	indent		30426	1					
ANR	30893	Argument	indent		30426	0					
ANR	30894	Identifier	indent		30426	0					
ANR	30895	ExpressionStatement	"dbgprintf ( ""OR\\n"" )"	2921:2:76334:76351	30426	63	True				
ANR	30896	CallExpression	"dbgprintf ( ""OR\\n"" )"		30426	0					
ANR	30897	Callee	dbgprintf		30426	0					
ANR	30898	Identifier	dbgprintf		30426	0					
ANR	30899	ArgumentList	"""OR\\n"""		30426	1					
ANR	30900	Argument	"""OR\\n"""		30426	0					
ANR	30901	PrimaryExpression	"""OR\\n"""		30426	0					
ANR	30902	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2922:2:76355:76386	30426	64	True				
ANR	30903	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30904	Callee	cnfexprPrint		30426	0					
ANR	30905	Identifier	cnfexprPrint		30426	0					
ANR	30906	ArgumentList	expr -> r		30426	1					
ANR	30907	Argument	expr -> r		30426	0					
ANR	30908	PtrMemberAccess	expr -> r		30426	0					
ANR	30909	Identifier	expr		30426	0					
ANR	30910	Identifier	r		30426	1					
ANR	30911	Argument	indent + 1		30426	1					
ANR	30912	AdditiveExpression	indent + 1		30426	0		+			
ANR	30913	Identifier	indent		30426	0					
ANR	30914	PrimaryExpression	1		30426	1					
ANR	30915	BreakStatement	break ;	2923:2:76390:76395	30426	65	True				
ANR	30916	Label	case AND :	2924:1:76398:76406	30426	66	True				
ANR	30917	Identifier	AND		30426	0					
ANR	30918	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2925:2:76410:76441	30426	67	True				
ANR	30919	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	30920	Callee	cnfexprPrint		30426	0					
ANR	30921	Identifier	cnfexprPrint		30426	0					
ANR	30922	ArgumentList	expr -> l		30426	1					
ANR	30923	Argument	expr -> l		30426	0					
ANR	30924	PtrMemberAccess	expr -> l		30426	0					
ANR	30925	Identifier	expr		30426	0					
ANR	30926	Identifier	l		30426	1					
ANR	30927	Argument	indent + 1		30426	1					
ANR	30928	AdditiveExpression	indent + 1		30426	0		+			
ANR	30929	Identifier	indent		30426	0					
ANR	30930	PrimaryExpression	1		30426	1					
ANR	30931	ExpressionStatement	doIndent ( indent )	2926:2:76445:76461	30426	68	True				
ANR	30932	CallExpression	doIndent ( indent )		30426	0					
ANR	30933	Callee	doIndent		30426	0					
ANR	30934	Identifier	doIndent		30426	0					
ANR	30935	ArgumentList	indent		30426	1					
ANR	30936	Argument	indent		30426	0					
ANR	30937	Identifier	indent		30426	0					
ANR	30938	ExpressionStatement	"dbgprintf ( ""AND\\n"" )"	2927:2:76465:76483	30426	69	True				
ANR	30939	CallExpression	"dbgprintf ( ""AND\\n"" )"		30426	0					
ANR	30940	Callee	dbgprintf		30426	0					
ANR	30941	Identifier	dbgprintf		30426	0					
ANR	30942	ArgumentList	"""AND\\n"""		30426	1					
ANR	30943	Argument	"""AND\\n"""		30426	0					
ANR	30944	PrimaryExpression	"""AND\\n"""		30426	0					
ANR	30945	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2928:2:76487:76518	30426	70	True				
ANR	30946	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30947	Callee	cnfexprPrint		30426	0					
ANR	30948	Identifier	cnfexprPrint		30426	0					
ANR	30949	ArgumentList	expr -> r		30426	1					
ANR	30950	Argument	expr -> r		30426	0					
ANR	30951	PtrMemberAccess	expr -> r		30426	0					
ANR	30952	Identifier	expr		30426	0					
ANR	30953	Identifier	r		30426	1					
ANR	30954	Argument	indent + 1		30426	1					
ANR	30955	AdditiveExpression	indent + 1		30426	0		+			
ANR	30956	Identifier	indent		30426	0					
ANR	30957	PrimaryExpression	1		30426	1					
ANR	30958	BreakStatement	break ;	2929:2:76522:76527	30426	71	True				
ANR	30959	Label	case NOT :	2930:1:76530:76538	30426	72	True				
ANR	30960	Identifier	NOT		30426	0					
ANR	30961	ExpressionStatement	doIndent ( indent )	2931:2:76542:76558	30426	73	True				
ANR	30962	CallExpression	doIndent ( indent )		30426	0					
ANR	30963	Callee	doIndent		30426	0					
ANR	30964	Identifier	doIndent		30426	0					
ANR	30965	ArgumentList	indent		30426	1					
ANR	30966	Argument	indent		30426	0					
ANR	30967	Identifier	indent		30426	0					
ANR	30968	ExpressionStatement	"dbgprintf ( ""NOT\\n"" )"	2932:2:76562:76580	30426	74	True				
ANR	30969	CallExpression	"dbgprintf ( ""NOT\\n"" )"		30426	0					
ANR	30970	Callee	dbgprintf		30426	0					
ANR	30971	Identifier	dbgprintf		30426	0					
ANR	30972	ArgumentList	"""NOT\\n"""		30426	1					
ANR	30973	Argument	"""NOT\\n"""		30426	0					
ANR	30974	PrimaryExpression	"""NOT\\n"""		30426	0					
ANR	30975	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2933:2:76584:76615	30426	75	True				
ANR	30976	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	30977	Callee	cnfexprPrint		30426	0					
ANR	30978	Identifier	cnfexprPrint		30426	0					
ANR	30979	ArgumentList	expr -> r		30426	1					
ANR	30980	Argument	expr -> r		30426	0					
ANR	30981	PtrMemberAccess	expr -> r		30426	0					
ANR	30982	Identifier	expr		30426	0					
ANR	30983	Identifier	r		30426	1					
ANR	30984	Argument	indent + 1		30426	1					
ANR	30985	AdditiveExpression	indent + 1		30426	0		+			
ANR	30986	Identifier	indent		30426	0					
ANR	30987	PrimaryExpression	1		30426	1					
ANR	30988	BreakStatement	break ;	2934:2:76619:76624	30426	76	True				
ANR	30989	Label	case 'S' :	2935:1:76627:76635	30426	77	True				
ANR	30990	ExpressionStatement	doIndent ( indent )	2936:2:76639:76655	30426	78	True				
ANR	30991	CallExpression	doIndent ( indent )		30426	0					
ANR	30992	Callee	doIndent		30426	0					
ANR	30993	Identifier	doIndent		30426	0					
ANR	30994	ArgumentList	indent		30426	1					
ANR	30995	Argument	indent		30426	0					
ANR	30996	Identifier	indent		30426	0					
ANR	30997	ExpressionStatement	"cstrPrint ( ""string '"" , ( ( struct cnfstringval * ) expr ) -> estr )"	2937:2:76659:76716	30426	79	True				
ANR	30998	CallExpression	"cstrPrint ( ""string '"" , ( ( struct cnfstringval * ) expr ) -> estr )"		30426	0					
ANR	30999	Callee	cstrPrint		30426	0					
ANR	31000	Identifier	cstrPrint		30426	0					
ANR	31001	ArgumentList	"""string '"""		30426	1					
ANR	31002	Argument	"""string '"""		30426	0					
ANR	31003	PrimaryExpression	"""string '"""		30426	0					
ANR	31004	Argument	( ( struct cnfstringval * ) expr ) -> estr		30426	1					
ANR	31005	PtrMemberAccess	( ( struct cnfstringval * ) expr ) -> estr		30426	0					
ANR	31006	CastExpression	( struct cnfstringval * ) expr		30426	0					
ANR	31007	CastTarget	struct cnfstringval *		30426	0					
ANR	31008	Identifier	expr		30426	1					
ANR	31009	Identifier	estr		30426	1					
ANR	31010	ExpressionStatement	"dbgprintf ( ""'\\n"" )"	2938:2:76720:76736	30426	80	True				
ANR	31011	CallExpression	"dbgprintf ( ""'\\n"" )"		30426	0					
ANR	31012	Callee	dbgprintf		30426	0					
ANR	31013	Identifier	dbgprintf		30426	0					
ANR	31014	ArgumentList	"""'\\n"""		30426	1					
ANR	31015	Argument	"""'\\n"""		30426	0					
ANR	31016	PrimaryExpression	"""'\\n"""		30426	0					
ANR	31017	BreakStatement	break ;	2939:2:76740:76745	30426	81	True				
ANR	31018	Label	case 'A' :	2940:1:76748:76756	30426	82	True				
ANR	31019	ExpressionStatement	"cnfarrayPrint ( ( struct cnfarray * ) expr , indent )"	2941:2:76760:76805	30426	83	True				
ANR	31020	CallExpression	"cnfarrayPrint ( ( struct cnfarray * ) expr , indent )"		30426	0					
ANR	31021	Callee	cnfarrayPrint		30426	0					
ANR	31022	Identifier	cnfarrayPrint		30426	0					
ANR	31023	ArgumentList	( struct cnfarray * ) expr		30426	1					
ANR	31024	Argument	( struct cnfarray * ) expr		30426	0					
ANR	31025	CastExpression	( struct cnfarray * ) expr		30426	0					
ANR	31026	CastTarget	struct cnfarray *		30426	0					
ANR	31027	Identifier	expr		30426	1					
ANR	31028	Argument	indent		30426	1					
ANR	31029	Identifier	indent		30426	0					
ANR	31030	BreakStatement	break ;	2942:2:76809:76814	30426	84	True				
ANR	31031	Label	case 'N' :	2943:1:76817:76825	30426	85	True				
ANR	31032	ExpressionStatement	doIndent ( indent )	2944:2:76829:76845	30426	86	True				
ANR	31033	CallExpression	doIndent ( indent )		30426	0					
ANR	31034	Callee	doIndent		30426	0					
ANR	31035	Identifier	doIndent		30426	0					
ANR	31036	ArgumentList	indent		30426	1					
ANR	31037	Argument	indent		30426	0					
ANR	31038	Identifier	indent		30426	0					
ANR	31039	ExpressionStatement	"dbgprintf ( ""%lld\\n"" , ( ( struct cnfnumval * ) expr ) -> val )"	2945:2:76849:76900	30426	87	True				
ANR	31040	CallExpression	"dbgprintf ( ""%lld\\n"" , ( ( struct cnfnumval * ) expr ) -> val )"		30426	0					
ANR	31041	Callee	dbgprintf		30426	0					
ANR	31042	Identifier	dbgprintf		30426	0					
ANR	31043	ArgumentList	"""%lld\\n"""		30426	1					
ANR	31044	Argument	"""%lld\\n"""		30426	0					
ANR	31045	PrimaryExpression	"""%lld\\n"""		30426	0					
ANR	31046	Argument	( ( struct cnfnumval * ) expr ) -> val		30426	1					
ANR	31047	PtrMemberAccess	( ( struct cnfnumval * ) expr ) -> val		30426	0					
ANR	31048	CastExpression	( struct cnfnumval * ) expr		30426	0					
ANR	31049	CastTarget	struct cnfnumval *		30426	0					
ANR	31050	Identifier	expr		30426	1					
ANR	31051	Identifier	val		30426	1					
ANR	31052	BreakStatement	break ;	2946:2:76904:76909	30426	88	True				
ANR	31053	Label	case 'V' :	2947:1:76912:76920	30426	89	True				
ANR	31054	ExpressionStatement	doIndent ( indent )	2948:2:76924:76940	30426	90	True				
ANR	31055	CallExpression	doIndent ( indent )		30426	0					
ANR	31056	Callee	doIndent		30426	0					
ANR	31057	Identifier	doIndent		30426	0					
ANR	31058	ArgumentList	indent		30426	1					
ANR	31059	Argument	indent		30426	0					
ANR	31060	Identifier	indent		30426	0					
ANR	31061	ExpressionStatement	"dbgprintf ( ""var '%s'\\n"" , ( ( struct cnfvar * ) expr ) -> name )"	2949:2:76944:76997	30426	91	True				
ANR	31062	CallExpression	"dbgprintf ( ""var '%s'\\n"" , ( ( struct cnfvar * ) expr ) -> name )"		30426	0					
ANR	31063	Callee	dbgprintf		30426	0					
ANR	31064	Identifier	dbgprintf		30426	0					
ANR	31065	ArgumentList	"""var '%s'\\n"""		30426	1					
ANR	31066	Argument	"""var '%s'\\n"""		30426	0					
ANR	31067	PrimaryExpression	"""var '%s'\\n"""		30426	0					
ANR	31068	Argument	( ( struct cnfvar * ) expr ) -> name		30426	1					
ANR	31069	PtrMemberAccess	( ( struct cnfvar * ) expr ) -> name		30426	0					
ANR	31070	CastExpression	( struct cnfvar * ) expr		30426	0					
ANR	31071	CastTarget	struct cnfvar *		30426	0					
ANR	31072	Identifier	expr		30426	1					
ANR	31073	Identifier	name		30426	1					
ANR	31074	BreakStatement	break ;	2950:2:77001:77006	30426	92	True				
ANR	31075	Label	case 'F' :	2951:1:77009:77017	30426	93	True				
ANR	31076	ExpressionStatement	doIndent ( indent )	2952:2:77021:77037	30426	94	True				
ANR	31077	CallExpression	doIndent ( indent )		30426	0					
ANR	31078	Callee	doIndent		30426	0					
ANR	31079	Identifier	doIndent		30426	0					
ANR	31080	ArgumentList	indent		30426	1					
ANR	31081	Argument	indent		30426	0					
ANR	31082	Identifier	indent		30426	0					
ANR	31083	ExpressionStatement	func = ( struct cnffunc * ) expr	2953:2:77041:77070	30426	95	True				
ANR	31084	AssignmentExpression	func = ( struct cnffunc * ) expr		30426	0		=			
ANR	31085	Identifier	func		30426	0					
ANR	31086	CastExpression	( struct cnffunc * ) expr		30426	1					
ANR	31087	CastTarget	struct cnffunc *		30426	0					
ANR	31088	Identifier	expr		30426	1					
ANR	31089	ExpressionStatement	"cstrPrint ( ""function '"" , func -> fname )"	2954:2:77074:77110	30426	96	True				
ANR	31090	CallExpression	"cstrPrint ( ""function '"" , func -> fname )"		30426	0					
ANR	31091	Callee	cstrPrint		30426	0					
ANR	31092	Identifier	cstrPrint		30426	0					
ANR	31093	ArgumentList	"""function '"""		30426	1					
ANR	31094	Argument	"""function '"""		30426	0					
ANR	31095	PrimaryExpression	"""function '"""		30426	0					
ANR	31096	Argument	func -> fname		30426	1					
ANR	31097	PtrMemberAccess	func -> fname		30426	0					
ANR	31098	Identifier	func		30426	0					
ANR	31099	Identifier	fname		30426	1					
ANR	31100	ExpressionStatement	"dbgprintf ( ""' (id:%d, params:%hu)\\n"" , func -> fID , func -> nParams )"	2955:2:77114:77176	30426	97	True				
ANR	31101	CallExpression	"dbgprintf ( ""' (id:%d, params:%hu)\\n"" , func -> fID , func -> nParams )"		30426	0					
ANR	31102	Callee	dbgprintf		30426	0					
ANR	31103	Identifier	dbgprintf		30426	0					
ANR	31104	ArgumentList	"""' (id:%d, params:%hu)\\n"""		30426	1					
ANR	31105	Argument	"""' (id:%d, params:%hu)\\n"""		30426	0					
ANR	31106	PrimaryExpression	"""' (id:%d, params:%hu)\\n"""		30426	0					
ANR	31107	Argument	func -> fID		30426	1					
ANR	31108	PtrMemberAccess	func -> fID		30426	0					
ANR	31109	Identifier	func		30426	0					
ANR	31110	Identifier	fID		30426	1					
ANR	31111	Argument	func -> nParams		30426	2					
ANR	31112	PtrMemberAccess	func -> nParams		30426	0					
ANR	31113	Identifier	func		30426	0					
ANR	31114	Identifier	nParams		30426	1					
ANR	31115	IfStatement	if ( func -> fID == CNFFUNC_PRIFILT )		30426	98					
ANR	31116	Condition	func -> fID == CNFFUNC_PRIFILT	2956:5:77183:77210	30426	0	True				
ANR	31117	EqualityExpression	func -> fID == CNFFUNC_PRIFILT		30426	0		==			
ANR	31118	PtrMemberAccess	func -> fID		30426	0					
ANR	31119	Identifier	func		30426	0					
ANR	31120	Identifier	fID		30426	1					
ANR	31121	Identifier	CNFFUNC_PRIFILT		30426	1					
ANR	31122	CompoundStatement		105:3:2410:2437	30426	1					
ANR	31123	IdentifierDeclStatement	struct funcData_prifilt * pD ;	2957:3:77218:77245	30426	0	True				
ANR	31124	IdentifierDecl	* pD		30426	0					
ANR	31125	IdentifierDeclType	struct funcData_prifilt *		30426	0					
ANR	31126	Identifier	pD		30426	1					
ANR	31127	ExpressionStatement	pD = ( struct funcData_prifilt * ) func -> funcdata	2958:3:77250:77296	30426	1	True				
ANR	31128	AssignmentExpression	pD = ( struct funcData_prifilt * ) func -> funcdata		30426	0		=			
ANR	31129	Identifier	pD		30426	0					
ANR	31130	CastExpression	( struct funcData_prifilt * ) func -> funcdata		30426	1					
ANR	31131	CastTarget	struct funcData_prifilt *		30426	0					
ANR	31132	PtrMemberAccess	func -> funcdata		30426	1					
ANR	31133	Identifier	func		30426	0					
ANR	31134	Identifier	funcdata		30426	1					
ANR	31135	ExpressionStatement	"pmaskPrint ( pD -> pmask , indent + 1 )"	2959:3:77301:77332	30426	2	True				
ANR	31136	CallExpression	"pmaskPrint ( pD -> pmask , indent + 1 )"		30426	0					
ANR	31137	Callee	pmaskPrint		30426	0					
ANR	31138	Identifier	pmaskPrint		30426	0					
ANR	31139	ArgumentList	pD -> pmask		30426	1					
ANR	31140	Argument	pD -> pmask		30426	0					
ANR	31141	PtrMemberAccess	pD -> pmask		30426	0					
ANR	31142	Identifier	pD		30426	0					
ANR	31143	Identifier	pmask		30426	1					
ANR	31144	Argument	indent + 1		30426	1					
ANR	31145	AdditiveExpression	indent + 1		30426	0		+			
ANR	31146	Identifier	indent		30426	0					
ANR	31147	PrimaryExpression	1		30426	1					
ANR	31148	ForStatement	for ( i = 0 ; i < func -> nParams ; ++ i )		30426	99					
ANR	31149	ForInit	i = 0 ;	2961:6:77344:77350	30426	0	True				
ANR	31150	AssignmentExpression	i = 0		30426	0		=			
ANR	31151	Identifier	i		30426	0					
ANR	31152	PrimaryExpression	0		30426	1					
ANR	31153	Condition	i < func -> nParams	2961:14:77352:77368	30426	1	True				
ANR	31154	RelationalExpression	i < func -> nParams		30426	0		<			
ANR	31155	Identifier	i		30426	0					
ANR	31156	PtrMemberAccess	func -> nParams		30426	1					
ANR	31157	Identifier	func		30426	0					
ANR	31158	Identifier	nParams		30426	1					
ANR	31159	UnaryExpression	++ i	2961:34:77372:77374	30426	2	True				
ANR	31160	IncDec	++		30426	0					
ANR	31161	Identifier	i		30426	1					
ANR	31162	CompoundStatement		109:39:2569:2569	30426	3					
ANR	31163	ExpressionStatement	"cnfexprPrint ( func -> expr [ i ] , indent + 1 )"	2962:3:77382:77419	30426	0	True				
ANR	31164	CallExpression	"cnfexprPrint ( func -> expr [ i ] , indent + 1 )"		30426	0					
ANR	31165	Callee	cnfexprPrint		30426	0					
ANR	31166	Identifier	cnfexprPrint		30426	0					
ANR	31167	ArgumentList	func -> expr [ i ]		30426	1					
ANR	31168	Argument	func -> expr [ i ]		30426	0					
ANR	31169	ArrayIndexing	func -> expr [ i ]		30426	0					
ANR	31170	PtrMemberAccess	func -> expr		30426	0					
ANR	31171	Identifier	func		30426	0					
ANR	31172	Identifier	expr		30426	1					
ANR	31173	Identifier	i		30426	1					
ANR	31174	Argument	indent + 1		30426	1					
ANR	31175	AdditiveExpression	indent + 1		30426	0		+			
ANR	31176	Identifier	indent		30426	0					
ANR	31177	PrimaryExpression	1		30426	1					
ANR	31178	BreakStatement	break ;	2964:2:77427:77432	30426	100	True				
ANR	31179	Label	case '&' :	2965:1:77435:77443	30426	101	True				
ANR	31180	Label	case '+' :	2966:1:77446:77454	30426	102	True				
ANR	31181	Label	case '-' :	2967:1:77457:77465	30426	103	True				
ANR	31182	Label	case '*' :	2968:1:77468:77476	30426	104	True				
ANR	31183	Label	case '/' :	2969:1:77479:77487	30426	105	True				
ANR	31184	Label	case '%' :	2970:1:77490:77498	30426	106	True				
ANR	31185	Label	case 'M' :	2971:1:77501:77509	30426	107	True				
ANR	31186	IfStatement	if ( expr -> l != NULL )		30426	108					
ANR	31187	Condition	expr -> l != NULL	2972:5:77516:77530	30426	0	True				
ANR	31188	EqualityExpression	expr -> l != NULL		30426	0		!=			
ANR	31189	PtrMemberAccess	expr -> l		30426	0					
ANR	31190	Identifier	expr		30426	0					
ANR	31191	Identifier	l		30426	1					
ANR	31192	Identifier	NULL		30426	1					
ANR	31193	ExpressionStatement	"cnfexprPrint ( expr -> l , indent + 1 )"	2973:3:77536:77567	30426	1	True				
ANR	31194	CallExpression	"cnfexprPrint ( expr -> l , indent + 1 )"		30426	0					
ANR	31195	Callee	cnfexprPrint		30426	0					
ANR	31196	Identifier	cnfexprPrint		30426	0					
ANR	31197	ArgumentList	expr -> l		30426	1					
ANR	31198	Argument	expr -> l		30426	0					
ANR	31199	PtrMemberAccess	expr -> l		30426	0					
ANR	31200	Identifier	expr		30426	0					
ANR	31201	Identifier	l		30426	1					
ANR	31202	Argument	indent + 1		30426	1					
ANR	31203	AdditiveExpression	indent + 1		30426	0		+			
ANR	31204	Identifier	indent		30426	0					
ANR	31205	PrimaryExpression	1		30426	1					
ANR	31206	ExpressionStatement	doIndent ( indent )	2974:2:77571:77587	30426	109	True				
ANR	31207	CallExpression	doIndent ( indent )		30426	0					
ANR	31208	Callee	doIndent		30426	0					
ANR	31209	Identifier	doIndent		30426	0					
ANR	31210	ArgumentList	indent		30426	1					
ANR	31211	Argument	indent		30426	0					
ANR	31212	Identifier	indent		30426	0					
ANR	31213	ExpressionStatement	"dbgprintf ( ""%c\\n"" , ( char ) expr -> nodetype )"	2975:2:77591:77631	30426	110	True				
ANR	31214	CallExpression	"dbgprintf ( ""%c\\n"" , ( char ) expr -> nodetype )"		30426	0					
ANR	31215	Callee	dbgprintf		30426	0					
ANR	31216	Identifier	dbgprintf		30426	0					
ANR	31217	ArgumentList	"""%c\\n"""		30426	1					
ANR	31218	Argument	"""%c\\n"""		30426	0					
ANR	31219	PrimaryExpression	"""%c\\n"""		30426	0					
ANR	31220	Argument	( char ) expr -> nodetype		30426	1					
ANR	31221	CastExpression	( char ) expr -> nodetype		30426	0					
ANR	31222	CastTarget	char		30426	0					
ANR	31223	PtrMemberAccess	expr -> nodetype		30426	1					
ANR	31224	Identifier	expr		30426	0					
ANR	31225	Identifier	nodetype		30426	1					
ANR	31226	ExpressionStatement	"cnfexprPrint ( expr -> r , indent + 1 )"	2976:2:77635:77666	30426	111	True				
ANR	31227	CallExpression	"cnfexprPrint ( expr -> r , indent + 1 )"		30426	0					
ANR	31228	Callee	cnfexprPrint		30426	0					
ANR	31229	Identifier	cnfexprPrint		30426	0					
ANR	31230	ArgumentList	expr -> r		30426	1					
ANR	31231	Argument	expr -> r		30426	0					
ANR	31232	PtrMemberAccess	expr -> r		30426	0					
ANR	31233	Identifier	expr		30426	0					
ANR	31234	Identifier	r		30426	1					
ANR	31235	Argument	indent + 1		30426	1					
ANR	31236	AdditiveExpression	indent + 1		30426	0		+			
ANR	31237	Identifier	indent		30426	0					
ANR	31238	PrimaryExpression	1		30426	1					
ANR	31239	BreakStatement	break ;	2977:2:77670:77675	30426	112	True				
ANR	31240	Label	default :	2978:1:77678:77685	30426	113	True				
ANR	31241	Identifier	default		30426	0					
ANR	31242	ExpressionStatement	"dbgprintf ( ""error: unknown nodetype %u['%c']\\n"" , ( unsigned ) expr -> nodetype , ( char ) expr -> nodetype )"	2979:2:77689:77789	30426	114	True				
ANR	31243	CallExpression	"dbgprintf ( ""error: unknown nodetype %u['%c']\\n"" , ( unsigned ) expr -> nodetype , ( char ) expr -> nodetype )"		30426	0					
ANR	31244	Callee	dbgprintf		30426	0					
ANR	31245	Identifier	dbgprintf		30426	0					
ANR	31246	ArgumentList	"""error: unknown nodetype %u['%c']\\n"""		30426	1					
ANR	31247	Argument	"""error: unknown nodetype %u['%c']\\n"""		30426	0					
ANR	31248	PrimaryExpression	"""error: unknown nodetype %u['%c']\\n"""		30426	0					
ANR	31249	Argument	( unsigned ) expr -> nodetype		30426	1					
ANR	31250	CastExpression	( unsigned ) expr -> nodetype		30426	0					
ANR	31251	CastTarget	unsigned		30426	0					
ANR	31252	PtrMemberAccess	expr -> nodetype		30426	1					
ANR	31253	Identifier	expr		30426	0					
ANR	31254	Identifier	nodetype		30426	1					
ANR	31255	Argument	( char ) expr -> nodetype		30426	2					
ANR	31256	CastExpression	( char ) expr -> nodetype		30426	0					
ANR	31257	CastTarget	char		30426	0					
ANR	31258	PtrMemberAccess	expr -> nodetype		30426	1					
ANR	31259	Identifier	expr		30426	0					
ANR	31260	Identifier	nodetype		30426	1					
ANR	31261	ExpressionStatement	assert ( 0 )	2981:2:77793:77802	30426	115	True				
ANR	31262	CallExpression	assert ( 0 )		30426	0					
ANR	31263	Callee	assert		30426	0					
ANR	31264	Identifier	assert		30426	0					
ANR	31265	ArgumentList	0		30426	1					
ANR	31266	Argument	0		30426	0					
ANR	31267	PrimaryExpression	0		30426	0					
ANR	31268	BreakStatement	break ;	2982:2:77857:77862	30426	116	True				
ANR	31269	ReturnType	void		30426	1					
ANR	31270	Identifier	cnfexprPrint		30426	2					
ANR	31271	ParameterList	"struct cnfexpr * expr , int indent"		30426	3					
ANR	31272	Parameter	struct cnfexpr * expr	2852:13:74773:74792	30426	0	True				
ANR	31273	ParameterType	struct cnfexpr *		30426	0					
ANR	31274	Identifier	expr		30426	1					
ANR	31275	Parameter	int indent	2852:35:74795:74804	30426	1	True				
ANR	31276	ParameterType	int		30426	0					
ANR	31277	Identifier	indent		30426	1					
ANR	31278	CFGEntryNode	ENTRY		30426		True				
ANR	31279	CFGExitNode	EXIT		30426		True				
ANR	31280	Symbol	( ( struct cnfstringval * ) expr ) -> estr		30426						
ANR	31281	Symbol	func -> funcdata		30426						
ANR	31282	Symbol	indent		30426						
ANR	31283	Symbol	( ( struct cnfnumval * ) expr ) -> val		30426						
ANR	31284	Symbol	pD		30426						
ANR	31285	Symbol	pD -> pmask		30426						
ANR	31286	Symbol	func -> expr		30426						
ANR	31287	Symbol	func -> fID		30426						
ANR	31288	Symbol	* pD		30426						
ANR	31289	Symbol	expr		30426						
ANR	31290	Symbol	NULL		30426						
ANR	31291	Symbol	( ( struct cnfvar * ) expr ) -> name		30426						
ANR	31292	Symbol	* func		30426						
ANR	31293	Symbol	expr -> nodetype		30426						
ANR	31294	Symbol	CNFFUNC_PRIFILT		30426						
ANR	31295	Symbol	* * func		30426						
ANR	31296	Symbol	i		30426						
ANR	31297	Symbol	expr -> r		30426						
ANR	31298	Symbol	* func -> expr		30426						
ANR	31299	Symbol	expr -> l		30426						
ANR	31300	Symbol	* i		30426						
ANR	31301	Symbol	func		30426						
ANR	31302	Symbol	* expr		30426						
ANR	31303	Symbol	func -> fname		30426						
ANR	31304	Symbol	func -> nParams		30426						
ANR	31305	Function	cnfstmtPrintOnly	2989:0:78003:81394							
ANR	31306	FunctionDef	"cnfstmtPrintOnly (struct cnfstmt * stmt , int indent , sbool subtree)"		31305	0					
ANR	31307	CompoundStatement		2991:0:78074:81394	31305	0					
ANR	31308	IdentifierDeclStatement	char * cstr ;	2992:1:78077:78087	31305	0	True				
ANR	31309	IdentifierDecl	* cstr		31305	0					
ANR	31310	IdentifierDeclType	char *		31305	0					
ANR	31311	Identifier	cstr		31305	1					
ANR	31312	SwitchStatement	switch ( stmt -> nodetype )		31305	1					
ANR	31313	Condition	stmt -> nodetype	2993:8:78097:78110	31305	0	True				
ANR	31314	PtrMemberAccess	stmt -> nodetype		31305	0					
ANR	31315	Identifier	stmt		31305	0					
ANR	31316	Identifier	nodetype		31305	1					
ANR	31317	CompoundStatement		3:24:38:38	31305	1					
ANR	31318	Label	case S_NOP :	2994:1:78116:78126	31305	0	True				
ANR	31319	Identifier	S_NOP		31305	0					
ANR	31320	ExpressionStatement	doIndent ( indent )	2995:2:78130:78146	31305	1	True				
ANR	31321	CallExpression	doIndent ( indent )		31305	0					
ANR	31322	Callee	doIndent		31305	0					
ANR	31323	Identifier	doIndent		31305	0					
ANR	31324	ArgumentList	indent		31305	1					
ANR	31325	Argument	indent		31305	0					
ANR	31326	Identifier	indent		31305	0					
ANR	31327	ExpressionStatement	"dbgprintf ( ""NOP\\n"" )"	2995:20:78148:78166	31305	2	True				
ANR	31328	CallExpression	"dbgprintf ( ""NOP\\n"" )"		31305	0					
ANR	31329	Callee	dbgprintf		31305	0					
ANR	31330	Identifier	dbgprintf		31305	0					
ANR	31331	ArgumentList	"""NOP\\n"""		31305	1					
ANR	31332	Argument	"""NOP\\n"""		31305	0					
ANR	31333	PrimaryExpression	"""NOP\\n"""		31305	0					
ANR	31334	BreakStatement	break ;	2996:2:78170:78175	31305	3	True				
ANR	31335	Label	case S_STOP :	2997:1:78178:78189	31305	4	True				
ANR	31336	Identifier	S_STOP		31305	0					
ANR	31337	ExpressionStatement	doIndent ( indent )	2998:2:78193:78209	31305	5	True				
ANR	31338	CallExpression	doIndent ( indent )		31305	0					
ANR	31339	Callee	doIndent		31305	0					
ANR	31340	Identifier	doIndent		31305	0					
ANR	31341	ArgumentList	indent		31305	1					
ANR	31342	Argument	indent		31305	0					
ANR	31343	Identifier	indent		31305	0					
ANR	31344	ExpressionStatement	"dbgprintf ( ""STOP\\n"" )"	2998:20:78211:78230	31305	6	True				
ANR	31345	CallExpression	"dbgprintf ( ""STOP\\n"" )"		31305	0					
ANR	31346	Callee	dbgprintf		31305	0					
ANR	31347	Identifier	dbgprintf		31305	0					
ANR	31348	ArgumentList	"""STOP\\n"""		31305	1					
ANR	31349	Argument	"""STOP\\n"""		31305	0					
ANR	31350	PrimaryExpression	"""STOP\\n"""		31305	0					
ANR	31351	BreakStatement	break ;	2999:2:78234:78239	31305	7	True				
ANR	31352	Label	case S_CALL :	3000:1:78242:78253	31305	8	True				
ANR	31353	Identifier	S_CALL		31305	0					
ANR	31354	ExpressionStatement	"cstr = es_str2cstr ( stmt -> d . s_call . name , NULL )"	3001:2:78257:78302	31305	9	True				
ANR	31355	AssignmentExpression	"cstr = es_str2cstr ( stmt -> d . s_call . name , NULL )"		31305	0		=			
ANR	31356	Identifier	cstr		31305	0					
ANR	31357	CallExpression	"es_str2cstr ( stmt -> d . s_call . name , NULL )"		31305	1					
ANR	31358	Callee	es_str2cstr		31305	0					
ANR	31359	Identifier	es_str2cstr		31305	0					
ANR	31360	ArgumentList	stmt -> d . s_call . name		31305	1					
ANR	31361	Argument	stmt -> d . s_call . name		31305	0					
ANR	31362	MemberAccess	stmt -> d . s_call . name		31305	0					
ANR	31363	MemberAccess	stmt -> d . s_call		31305	0					
ANR	31364	PtrMemberAccess	stmt -> d		31305	0					
ANR	31365	Identifier	stmt		31305	0					
ANR	31366	Identifier	d		31305	1					
ANR	31367	Identifier	s_call		31305	1					
ANR	31368	Identifier	name		31305	1					
ANR	31369	Argument	NULL		31305	1					
ANR	31370	Identifier	NULL		31305	0					
ANR	31371	ExpressionStatement	doIndent ( indent )	3002:2:78306:78322	31305	10	True				
ANR	31372	CallExpression	doIndent ( indent )		31305	0					
ANR	31373	Callee	doIndent		31305	0					
ANR	31374	Identifier	doIndent		31305	0					
ANR	31375	ArgumentList	indent		31305	1					
ANR	31376	Argument	indent		31305	0					
ANR	31377	Identifier	indent		31305	0					
ANR	31378	ExpressionStatement	"dbgprintf ( ""CALL [%s, queue:%d]\\n"" , cstr , stmt -> d . s_call . ruleset == NULL ? 0 : 1 )"	3002:20:78324:78407	31305	11	True				
ANR	31379	CallExpression	"dbgprintf ( ""CALL [%s, queue:%d]\\n"" , cstr , stmt -> d . s_call . ruleset == NULL ? 0 : 1 )"		31305	0					
ANR	31380	Callee	dbgprintf		31305	0					
ANR	31381	Identifier	dbgprintf		31305	0					
ANR	31382	ArgumentList	"""CALL [%s, queue:%d]\\n"""		31305	1					
ANR	31383	Argument	"""CALL [%s, queue:%d]\\n"""		31305	0					
ANR	31384	PrimaryExpression	"""CALL [%s, queue:%d]\\n"""		31305	0					
ANR	31385	Argument	cstr		31305	1					
ANR	31386	Identifier	cstr		31305	0					
ANR	31387	Argument	stmt -> d . s_call . ruleset == NULL ? 0 : 1		31305	2					
ANR	31388	ConditionalExpression	stmt -> d . s_call . ruleset == NULL ? 0 : 1		31305	0					
ANR	31389	Condition	stmt -> d . s_call . ruleset == NULL		31305	0					
ANR	31390	EqualityExpression	stmt -> d . s_call . ruleset == NULL		31305	0		==			
ANR	31391	MemberAccess	stmt -> d . s_call . ruleset		31305	0					
ANR	31392	MemberAccess	stmt -> d . s_call		31305	0					
ANR	31393	PtrMemberAccess	stmt -> d		31305	0					
ANR	31394	Identifier	stmt		31305	0					
ANR	31395	Identifier	d		31305	1					
ANR	31396	Identifier	s_call		31305	1					
ANR	31397	Identifier	ruleset		31305	1					
ANR	31398	Identifier	NULL		31305	1					
ANR	31399	PrimaryExpression	0		31305	1					
ANR	31400	PrimaryExpression	1		31305	2					
ANR	31401	ExpressionStatement	free ( cstr )	3004:2:78411:78421	31305	12	True				
ANR	31402	CallExpression	free ( cstr )		31305	0					
ANR	31403	Callee	free		31305	0					
ANR	31404	Identifier	free		31305	0					
ANR	31405	ArgumentList	cstr		31305	1					
ANR	31406	Argument	cstr		31305	0					
ANR	31407	Identifier	cstr		31305	0					
ANR	31408	BreakStatement	break ;	3005:2:78425:78430	31305	13	True				
ANR	31409	Label	case S_CALL_INDIRECT :	3006:1:78433:78453	31305	14	True				
ANR	31410	Identifier	S_CALL_INDIRECT		31305	0					
ANR	31411	ExpressionStatement	doIndent ( indent )	3007:2:78457:78473	31305	15	True				
ANR	31412	CallExpression	doIndent ( indent )		31305	0					
ANR	31413	Callee	doIndent		31305	0					
ANR	31414	Identifier	doIndent		31305	0					
ANR	31415	ArgumentList	indent		31305	1					
ANR	31416	Argument	indent		31305	0					
ANR	31417	Identifier	indent		31305	0					
ANR	31418	ExpressionStatement	"dbgprintf ( ""CALL_INDIRECT\\n"" )"	3007:20:78475:78503	31305	16	True				
ANR	31419	CallExpression	"dbgprintf ( ""CALL_INDIRECT\\n"" )"		31305	0					
ANR	31420	Callee	dbgprintf		31305	0					
ANR	31421	Identifier	dbgprintf		31305	0					
ANR	31422	ArgumentList	"""CALL_INDIRECT\\n"""		31305	1					
ANR	31423	Argument	"""CALL_INDIRECT\\n"""		31305	0					
ANR	31424	PrimaryExpression	"""CALL_INDIRECT\\n"""		31305	0					
ANR	31425	ExpressionStatement	"cnfexprPrint ( stmt -> d . s_call_ind . expr , indent + 1 )"	3008:2:78507:78554	31305	17	True				
ANR	31426	CallExpression	"cnfexprPrint ( stmt -> d . s_call_ind . expr , indent + 1 )"		31305	0					
ANR	31427	Callee	cnfexprPrint		31305	0					
ANR	31428	Identifier	cnfexprPrint		31305	0					
ANR	31429	ArgumentList	stmt -> d . s_call_ind . expr		31305	1					
ANR	31430	Argument	stmt -> d . s_call_ind . expr		31305	0					
ANR	31431	MemberAccess	stmt -> d . s_call_ind . expr		31305	0					
ANR	31432	MemberAccess	stmt -> d . s_call_ind		31305	0					
ANR	31433	PtrMemberAccess	stmt -> d		31305	0					
ANR	31434	Identifier	stmt		31305	0					
ANR	31435	Identifier	d		31305	1					
ANR	31436	Identifier	s_call_ind		31305	1					
ANR	31437	Identifier	expr		31305	1					
ANR	31438	Argument	indent + 1		31305	1					
ANR	31439	AdditiveExpression	indent + 1		31305	0		+			
ANR	31440	Identifier	indent		31305	0					
ANR	31441	PrimaryExpression	1		31305	1					
ANR	31442	BreakStatement	break ;	3009:2:78558:78563	31305	18	True				
ANR	31443	Label	case S_ACT :	3010:1:78566:78576	31305	19	True				
ANR	31444	Identifier	S_ACT		31305	0					
ANR	31445	ExpressionStatement	doIndent ( indent )	3011:2:78580:78596	31305	20	True				
ANR	31446	CallExpression	doIndent ( indent )		31305	0					
ANR	31447	Callee	doIndent		31305	0					
ANR	31448	Identifier	doIndent		31305	0					
ANR	31449	ArgumentList	indent		31305	1					
ANR	31450	Argument	indent		31305	0					
ANR	31451	Identifier	indent		31305	0					
ANR	31452	ExpressionStatement	"dbgprintf ( ""ACTION %d [%s:%s]\\n"" , stmt -> d . act -> iActionNbr , modGetName ( stmt -> d . act -> pMod ) , stmt -> printable )"	3011:20:78598:78706	31305	21	True				
ANR	31453	CallExpression	"dbgprintf ( ""ACTION %d [%s:%s]\\n"" , stmt -> d . act -> iActionNbr , modGetName ( stmt -> d . act -> pMod ) , stmt -> printable )"		31305	0					
ANR	31454	Callee	dbgprintf		31305	0					
ANR	31455	Identifier	dbgprintf		31305	0					
ANR	31456	ArgumentList	"""ACTION %d [%s:%s]\\n"""		31305	1					
ANR	31457	Argument	"""ACTION %d [%s:%s]\\n"""		31305	0					
ANR	31458	PrimaryExpression	"""ACTION %d [%s:%s]\\n"""		31305	0					
ANR	31459	Argument	stmt -> d . act -> iActionNbr		31305	1					
ANR	31460	PtrMemberAccess	stmt -> d . act -> iActionNbr		31305	0					
ANR	31461	MemberAccess	stmt -> d . act		31305	0					
ANR	31462	PtrMemberAccess	stmt -> d		31305	0					
ANR	31463	Identifier	stmt		31305	0					
ANR	31464	Identifier	d		31305	1					
ANR	31465	Identifier	act		31305	1					
ANR	31466	Identifier	iActionNbr		31305	1					
ANR	31467	Argument	modGetName ( stmt -> d . act -> pMod )		31305	2					
ANR	31468	CallExpression	modGetName ( stmt -> d . act -> pMod )		31305	0					
ANR	31469	Callee	modGetName		31305	0					
ANR	31470	Identifier	modGetName		31305	0					
ANR	31471	ArgumentList	stmt -> d . act -> pMod		31305	1					
ANR	31472	Argument	stmt -> d . act -> pMod		31305	0					
ANR	31473	PtrMemberAccess	stmt -> d . act -> pMod		31305	0					
ANR	31474	MemberAccess	stmt -> d . act		31305	0					
ANR	31475	PtrMemberAccess	stmt -> d		31305	0					
ANR	31476	Identifier	stmt		31305	0					
ANR	31477	Identifier	d		31305	1					
ANR	31478	Identifier	act		31305	1					
ANR	31479	Identifier	pMod		31305	1					
ANR	31480	Argument	stmt -> printable		31305	3					
ANR	31481	PtrMemberAccess	stmt -> printable		31305	0					
ANR	31482	Identifier	stmt		31305	0					
ANR	31483	Identifier	printable		31305	1					
ANR	31484	BreakStatement	break ;	3013:2:78710:78715	31305	22	True				
ANR	31485	Label	case S_IF :	3014:1:78718:78727	31305	23	True				
ANR	31486	Identifier	S_IF		31305	0					
ANR	31487	ExpressionStatement	doIndent ( indent )	3015:2:78731:78747	31305	24	True				
ANR	31488	CallExpression	doIndent ( indent )		31305	0					
ANR	31489	Callee	doIndent		31305	0					
ANR	31490	Identifier	doIndent		31305	0					
ANR	31491	ArgumentList	indent		31305	1					
ANR	31492	Argument	indent		31305	0					
ANR	31493	Identifier	indent		31305	0					
ANR	31494	ExpressionStatement	"dbgprintf ( ""IF\\n"" )"	3015:20:78749:78766	31305	25	True				
ANR	31495	CallExpression	"dbgprintf ( ""IF\\n"" )"		31305	0					
ANR	31496	Callee	dbgprintf		31305	0					
ANR	31497	Identifier	dbgprintf		31305	0					
ANR	31498	ArgumentList	"""IF\\n"""		31305	1					
ANR	31499	Argument	"""IF\\n"""		31305	0					
ANR	31500	PrimaryExpression	"""IF\\n"""		31305	0					
ANR	31501	ExpressionStatement	"cnfexprPrint ( stmt -> d . s_if . expr , indent + 1 )"	3016:2:78770:78811	31305	26	True				
ANR	31502	CallExpression	"cnfexprPrint ( stmt -> d . s_if . expr , indent + 1 )"		31305	0					
ANR	31503	Callee	cnfexprPrint		31305	0					
ANR	31504	Identifier	cnfexprPrint		31305	0					
ANR	31505	ArgumentList	stmt -> d . s_if . expr		31305	1					
ANR	31506	Argument	stmt -> d . s_if . expr		31305	0					
ANR	31507	MemberAccess	stmt -> d . s_if . expr		31305	0					
ANR	31508	MemberAccess	stmt -> d . s_if		31305	0					
ANR	31509	PtrMemberAccess	stmt -> d		31305	0					
ANR	31510	Identifier	stmt		31305	0					
ANR	31511	Identifier	d		31305	1					
ANR	31512	Identifier	s_if		31305	1					
ANR	31513	Identifier	expr		31305	1					
ANR	31514	Argument	indent + 1		31305	1					
ANR	31515	AdditiveExpression	indent + 1		31305	0		+			
ANR	31516	Identifier	indent		31305	0					
ANR	31517	PrimaryExpression	1		31305	1					
ANR	31518	IfStatement	if ( subtree )		31305	27					
ANR	31519	Condition	subtree	3017:5:78818:78824	31305	0	True				
ANR	31520	Identifier	subtree		31305	0					
ANR	31521	CompoundStatement		27:14:752:752	31305	1					
ANR	31522	ExpressionStatement	doIndent ( indent )	3018:3:78832:78848	31305	0	True				
ANR	31523	CallExpression	doIndent ( indent )		31305	0					
ANR	31524	Callee	doIndent		31305	0					
ANR	31525	Identifier	doIndent		31305	0					
ANR	31526	ArgumentList	indent		31305	1					
ANR	31527	Argument	indent		31305	0					
ANR	31528	Identifier	indent		31305	0					
ANR	31529	ExpressionStatement	"dbgprintf ( ""THEN\\n"" )"	3018:21:78850:78869	31305	1	True				
ANR	31530	CallExpression	"dbgprintf ( ""THEN\\n"" )"		31305	0					
ANR	31531	Callee	dbgprintf		31305	0					
ANR	31532	Identifier	dbgprintf		31305	0					
ANR	31533	ArgumentList	"""THEN\\n"""		31305	1					
ANR	31534	Argument	"""THEN\\n"""		31305	0					
ANR	31535	PrimaryExpression	"""THEN\\n"""		31305	0					
ANR	31536	ExpressionStatement	"cnfstmtPrint ( stmt -> d . s_if . t_then , indent + 1 )"	3019:3:78874:78917	31305	2	True				
ANR	31537	CallExpression	"cnfstmtPrint ( stmt -> d . s_if . t_then , indent + 1 )"		31305	0					
ANR	31538	Callee	cnfstmtPrint		31305	0					
ANR	31539	Identifier	cnfstmtPrint		31305	0					
ANR	31540	ArgumentList	stmt -> d . s_if . t_then		31305	1					
ANR	31541	Argument	stmt -> d . s_if . t_then		31305	0					
ANR	31542	MemberAccess	stmt -> d . s_if . t_then		31305	0					
ANR	31543	MemberAccess	stmt -> d . s_if		31305	0					
ANR	31544	PtrMemberAccess	stmt -> d		31305	0					
ANR	31545	Identifier	stmt		31305	0					
ANR	31546	Identifier	d		31305	1					
ANR	31547	Identifier	s_if		31305	1					
ANR	31548	Identifier	t_then		31305	1					
ANR	31549	Argument	indent + 1		31305	1					
ANR	31550	AdditiveExpression	indent + 1		31305	0		+			
ANR	31551	Identifier	indent		31305	0					
ANR	31552	PrimaryExpression	1		31305	1					
ANR	31553	IfStatement	if ( stmt -> d . s_if . t_else != NULL )		31305	3					
ANR	31554	Condition	stmt -> d . s_if . t_else != NULL	3020:6:78925:78951	31305	0	True				
ANR	31555	EqualityExpression	stmt -> d . s_if . t_else != NULL		31305	0		!=			
ANR	31556	MemberAccess	stmt -> d . s_if . t_else		31305	0					
ANR	31557	MemberAccess	stmt -> d . s_if		31305	0					
ANR	31558	PtrMemberAccess	stmt -> d		31305	0					
ANR	31559	Identifier	stmt		31305	0					
ANR	31560	Identifier	d		31305	1					
ANR	31561	Identifier	s_if		31305	1					
ANR	31562	Identifier	t_else		31305	1					
ANR	31563	Identifier	NULL		31305	1					
ANR	31564	CompoundStatement		30:35:879:879	31305	1					
ANR	31565	ExpressionStatement	doIndent ( indent )	3021:4:78960:78976	31305	0	True				
ANR	31566	CallExpression	doIndent ( indent )		31305	0					
ANR	31567	Callee	doIndent		31305	0					
ANR	31568	Identifier	doIndent		31305	0					
ANR	31569	ArgumentList	indent		31305	1					
ANR	31570	Argument	indent		31305	0					
ANR	31571	Identifier	indent		31305	0					
ANR	31572	ExpressionStatement	"dbgprintf ( ""ELSE\\n"" )"	3021:22:78978:78997	31305	1	True				
ANR	31573	CallExpression	"dbgprintf ( ""ELSE\\n"" )"		31305	0					
ANR	31574	Callee	dbgprintf		31305	0					
ANR	31575	Identifier	dbgprintf		31305	0					
ANR	31576	ArgumentList	"""ELSE\\n"""		31305	1					
ANR	31577	Argument	"""ELSE\\n"""		31305	0					
ANR	31578	PrimaryExpression	"""ELSE\\n"""		31305	0					
ANR	31579	ExpressionStatement	"cnfstmtPrint ( stmt -> d . s_if . t_else , indent + 1 )"	3022:4:79003:79046	31305	2	True				
ANR	31580	CallExpression	"cnfstmtPrint ( stmt -> d . s_if . t_else , indent + 1 )"		31305	0					
ANR	31581	Callee	cnfstmtPrint		31305	0					
ANR	31582	Identifier	cnfstmtPrint		31305	0					
ANR	31583	ArgumentList	stmt -> d . s_if . t_else		31305	1					
ANR	31584	Argument	stmt -> d . s_if . t_else		31305	0					
ANR	31585	MemberAccess	stmt -> d . s_if . t_else		31305	0					
ANR	31586	MemberAccess	stmt -> d . s_if		31305	0					
ANR	31587	PtrMemberAccess	stmt -> d		31305	0					
ANR	31588	Identifier	stmt		31305	0					
ANR	31589	Identifier	d		31305	1					
ANR	31590	Identifier	s_if		31305	1					
ANR	31591	Identifier	t_else		31305	1					
ANR	31592	Argument	indent + 1		31305	1					
ANR	31593	AdditiveExpression	indent + 1		31305	0		+			
ANR	31594	Identifier	indent		31305	0					
ANR	31595	PrimaryExpression	1		31305	1					
ANR	31596	ExpressionStatement	doIndent ( indent )	3024:3:79056:79072	31305	4	True				
ANR	31597	CallExpression	doIndent ( indent )		31305	0					
ANR	31598	Callee	doIndent		31305	0					
ANR	31599	Identifier	doIndent		31305	0					
ANR	31600	ArgumentList	indent		31305	1					
ANR	31601	Argument	indent		31305	0					
ANR	31602	Identifier	indent		31305	0					
ANR	31603	ExpressionStatement	"dbgprintf ( ""END IF\\n"" )"	3024:21:79074:79095	31305	5	True				
ANR	31604	CallExpression	"dbgprintf ( ""END IF\\n"" )"		31305	0					
ANR	31605	Callee	dbgprintf		31305	0					
ANR	31606	Identifier	dbgprintf		31305	0					
ANR	31607	ArgumentList	"""END IF\\n"""		31305	1					
ANR	31608	Argument	"""END IF\\n"""		31305	0					
ANR	31609	PrimaryExpression	"""END IF\\n"""		31305	0					
ANR	31610	BreakStatement	break ;	3026:2:79103:79108	31305	28	True				
ANR	31611	Label	case S_FOREACH :	3027:1:79111:79125	31305	29	True				
ANR	31612	Identifier	S_FOREACH		31305	0					
ANR	31613	ExpressionStatement	doIndent ( indent )	3028:2:79129:79145	31305	30	True				
ANR	31614	CallExpression	doIndent ( indent )		31305	0					
ANR	31615	Callee	doIndent		31305	0					
ANR	31616	Identifier	doIndent		31305	0					
ANR	31617	ArgumentList	indent		31305	1					
ANR	31618	Argument	indent		31305	0					
ANR	31619	Identifier	indent		31305	0					
ANR	31620	ExpressionStatement	"dbgprintf ( ""FOREACH %s IN\\n"" , stmt -> d . s_foreach . iter -> var )"	3028:20:79147:79213	31305	31	True				
ANR	31621	CallExpression	"dbgprintf ( ""FOREACH %s IN\\n"" , stmt -> d . s_foreach . iter -> var )"		31305	0					
ANR	31622	Callee	dbgprintf		31305	0					
ANR	31623	Identifier	dbgprintf		31305	0					
ANR	31624	ArgumentList	"""FOREACH %s IN\\n"""		31305	1					
ANR	31625	Argument	"""FOREACH %s IN\\n"""		31305	0					
ANR	31626	PrimaryExpression	"""FOREACH %s IN\\n"""		31305	0					
ANR	31627	Argument	stmt -> d . s_foreach . iter -> var		31305	1					
ANR	31628	PtrMemberAccess	stmt -> d . s_foreach . iter -> var		31305	0					
ANR	31629	MemberAccess	stmt -> d . s_foreach . iter		31305	0					
ANR	31630	MemberAccess	stmt -> d . s_foreach		31305	0					
ANR	31631	PtrMemberAccess	stmt -> d		31305	0					
ANR	31632	Identifier	stmt		31305	0					
ANR	31633	Identifier	d		31305	1					
ANR	31634	Identifier	s_foreach		31305	1					
ANR	31635	Identifier	iter		31305	1					
ANR	31636	Identifier	var		31305	1					
ANR	31637	ExpressionStatement	"cnfexprPrint ( stmt -> d . s_foreach . iter -> collection , indent + 1 )"	3030:2:79217:79275	31305	32	True				
ANR	31638	CallExpression	"cnfexprPrint ( stmt -> d . s_foreach . iter -> collection , indent + 1 )"		31305	0					
ANR	31639	Callee	cnfexprPrint		31305	0					
ANR	31640	Identifier	cnfexprPrint		31305	0					
ANR	31641	ArgumentList	stmt -> d . s_foreach . iter -> collection		31305	1					
ANR	31642	Argument	stmt -> d . s_foreach . iter -> collection		31305	0					
ANR	31643	PtrMemberAccess	stmt -> d . s_foreach . iter -> collection		31305	0					
ANR	31644	MemberAccess	stmt -> d . s_foreach . iter		31305	0					
ANR	31645	MemberAccess	stmt -> d . s_foreach		31305	0					
ANR	31646	PtrMemberAccess	stmt -> d		31305	0					
ANR	31647	Identifier	stmt		31305	0					
ANR	31648	Identifier	d		31305	1					
ANR	31649	Identifier	s_foreach		31305	1					
ANR	31650	Identifier	iter		31305	1					
ANR	31651	Identifier	collection		31305	1					
ANR	31652	Argument	indent + 1		31305	1					
ANR	31653	AdditiveExpression	indent + 1		31305	0		+			
ANR	31654	Identifier	indent		31305	0					
ANR	31655	PrimaryExpression	1		31305	1					
ANR	31656	IfStatement	if ( subtree )		31305	33					
ANR	31657	Condition	subtree	3031:5:79282:79288	31305	0	True				
ANR	31658	Identifier	subtree		31305	0					
ANR	31659	CompoundStatement		41:14:1216:1216	31305	1					
ANR	31660	ExpressionStatement	doIndent ( indent )	3032:3:79296:79312	31305	0	True				
ANR	31661	CallExpression	doIndent ( indent )		31305	0					
ANR	31662	Callee	doIndent		31305	0					
ANR	31663	Identifier	doIndent		31305	0					
ANR	31664	ArgumentList	indent		31305	1					
ANR	31665	Argument	indent		31305	0					
ANR	31666	Identifier	indent		31305	0					
ANR	31667	ExpressionStatement	"dbgprintf ( ""DO\\n"" )"	3032:21:79314:79331	31305	1	True				
ANR	31668	CallExpression	"dbgprintf ( ""DO\\n"" )"		31305	0					
ANR	31669	Callee	dbgprintf		31305	0					
ANR	31670	Identifier	dbgprintf		31305	0					
ANR	31671	ArgumentList	"""DO\\n"""		31305	1					
ANR	31672	Argument	"""DO\\n"""		31305	0					
ANR	31673	PrimaryExpression	"""DO\\n"""		31305	0					
ANR	31674	ExpressionStatement	"cnfstmtPrint ( stmt -> d . s_foreach . body , indent + 1 )"	3033:3:79336:79382	31305	2	True				
ANR	31675	CallExpression	"cnfstmtPrint ( stmt -> d . s_foreach . body , indent + 1 )"		31305	0					
ANR	31676	Callee	cnfstmtPrint		31305	0					
ANR	31677	Identifier	cnfstmtPrint		31305	0					
ANR	31678	ArgumentList	stmt -> d . s_foreach . body		31305	1					
ANR	31679	Argument	stmt -> d . s_foreach . body		31305	0					
ANR	31680	MemberAccess	stmt -> d . s_foreach . body		31305	0					
ANR	31681	MemberAccess	stmt -> d . s_foreach		31305	0					
ANR	31682	PtrMemberAccess	stmt -> d		31305	0					
ANR	31683	Identifier	stmt		31305	0					
ANR	31684	Identifier	d		31305	1					
ANR	31685	Identifier	s_foreach		31305	1					
ANR	31686	Identifier	body		31305	1					
ANR	31687	Argument	indent + 1		31305	1					
ANR	31688	AdditiveExpression	indent + 1		31305	0		+			
ANR	31689	Identifier	indent		31305	0					
ANR	31690	PrimaryExpression	1		31305	1					
ANR	31691	ExpressionStatement	doIndent ( indent )	3034:3:79387:79403	31305	3	True				
ANR	31692	CallExpression	doIndent ( indent )		31305	0					
ANR	31693	Callee	doIndent		31305	0					
ANR	31694	Identifier	doIndent		31305	0					
ANR	31695	ArgumentList	indent		31305	1					
ANR	31696	Argument	indent		31305	0					
ANR	31697	Identifier	indent		31305	0					
ANR	31698	ExpressionStatement	"dbgprintf ( ""END FOREACH\\n"" )"	3034:21:79405:79431	31305	4	True				
ANR	31699	CallExpression	"dbgprintf ( ""END FOREACH\\n"" )"		31305	0					
ANR	31700	Callee	dbgprintf		31305	0					
ANR	31701	Identifier	dbgprintf		31305	0					
ANR	31702	ArgumentList	"""END FOREACH\\n"""		31305	1					
ANR	31703	Argument	"""END FOREACH\\n"""		31305	0					
ANR	31704	PrimaryExpression	"""END FOREACH\\n"""		31305	0					
ANR	31705	BreakStatement	break ;	3036:2:79439:79444	31305	34	True				
ANR	31706	Label	case S_SET :	3037:1:79447:79457	31305	35	True				
ANR	31707	Identifier	S_SET		31305	0					
ANR	31708	ExpressionStatement	doIndent ( indent )	3038:2:79461:79477	31305	36	True				
ANR	31709	CallExpression	doIndent ( indent )		31305	0					
ANR	31710	Callee	doIndent		31305	0					
ANR	31711	Identifier	doIndent		31305	0					
ANR	31712	ArgumentList	indent		31305	1					
ANR	31713	Argument	indent		31305	0					
ANR	31714	Identifier	indent		31305	0					
ANR	31715	ExpressionStatement	"dbgprintf ( ""SET %s =\\n"" , stmt -> d . s_set . varname )"	3038:20:79479:79531	31305	37	True				
ANR	31716	CallExpression	"dbgprintf ( ""SET %s =\\n"" , stmt -> d . s_set . varname )"		31305	0					
ANR	31717	Callee	dbgprintf		31305	0					
ANR	31718	Identifier	dbgprintf		31305	0					
ANR	31719	ArgumentList	"""SET %s =\\n"""		31305	1					
ANR	31720	Argument	"""SET %s =\\n"""		31305	0					
ANR	31721	PrimaryExpression	"""SET %s =\\n"""		31305	0					
ANR	31722	Argument	stmt -> d . s_set . varname		31305	1					
ANR	31723	MemberAccess	stmt -> d . s_set . varname		31305	0					
ANR	31724	MemberAccess	stmt -> d . s_set		31305	0					
ANR	31725	PtrMemberAccess	stmt -> d		31305	0					
ANR	31726	Identifier	stmt		31305	0					
ANR	31727	Identifier	d		31305	1					
ANR	31728	Identifier	s_set		31305	1					
ANR	31729	Identifier	varname		31305	1					
ANR	31730	ExpressionStatement	"cnfexprPrint ( stmt -> d . s_set . expr , indent + 1 )"	3040:2:79535:79577	31305	38	True				
ANR	31731	CallExpression	"cnfexprPrint ( stmt -> d . s_set . expr , indent + 1 )"		31305	0					
ANR	31732	Callee	cnfexprPrint		31305	0					
ANR	31733	Identifier	cnfexprPrint		31305	0					
ANR	31734	ArgumentList	stmt -> d . s_set . expr		31305	1					
ANR	31735	Argument	stmt -> d . s_set . expr		31305	0					
ANR	31736	MemberAccess	stmt -> d . s_set . expr		31305	0					
ANR	31737	MemberAccess	stmt -> d . s_set		31305	0					
ANR	31738	PtrMemberAccess	stmt -> d		31305	0					
ANR	31739	Identifier	stmt		31305	0					
ANR	31740	Identifier	d		31305	1					
ANR	31741	Identifier	s_set		31305	1					
ANR	31742	Identifier	expr		31305	1					
ANR	31743	Argument	indent + 1		31305	1					
ANR	31744	AdditiveExpression	indent + 1		31305	0		+			
ANR	31745	Identifier	indent		31305	0					
ANR	31746	PrimaryExpression	1		31305	1					
ANR	31747	ExpressionStatement	doIndent ( indent )	3041:2:79581:79597	31305	39	True				
ANR	31748	CallExpression	doIndent ( indent )		31305	0					
ANR	31749	Callee	doIndent		31305	0					
ANR	31750	Identifier	doIndent		31305	0					
ANR	31751	ArgumentList	indent		31305	1					
ANR	31752	Argument	indent		31305	0					
ANR	31753	Identifier	indent		31305	0					
ANR	31754	ExpressionStatement	"dbgprintf ( ""END SET\\n"" )"	3041:20:79599:79621	31305	40	True				
ANR	31755	CallExpression	"dbgprintf ( ""END SET\\n"" )"		31305	0					
ANR	31756	Callee	dbgprintf		31305	0					
ANR	31757	Identifier	dbgprintf		31305	0					
ANR	31758	ArgumentList	"""END SET\\n"""		31305	1					
ANR	31759	Argument	"""END SET\\n"""		31305	0					
ANR	31760	PrimaryExpression	"""END SET\\n"""		31305	0					
ANR	31761	BreakStatement	break ;	3042:2:79625:79630	31305	41	True				
ANR	31762	Label	case S_UNSET :	3043:1:79633:79645	31305	42	True				
ANR	31763	Identifier	S_UNSET		31305	0					
ANR	31764	ExpressionStatement	doIndent ( indent )	3044:2:79649:79665	31305	43	True				
ANR	31765	CallExpression	doIndent ( indent )		31305	0					
ANR	31766	Callee	doIndent		31305	0					
ANR	31767	Identifier	doIndent		31305	0					
ANR	31768	ArgumentList	indent		31305	1					
ANR	31769	Argument	indent		31305	0					
ANR	31770	Identifier	indent		31305	0					
ANR	31771	ExpressionStatement	"dbgprintf ( ""UNSET %s\\n"" , stmt -> d . s_unset . varname )"	3044:20:79667:79721	31305	44	True				
ANR	31772	CallExpression	"dbgprintf ( ""UNSET %s\\n"" , stmt -> d . s_unset . varname )"		31305	0					
ANR	31773	Callee	dbgprintf		31305	0					
ANR	31774	Identifier	dbgprintf		31305	0					
ANR	31775	ArgumentList	"""UNSET %s\\n"""		31305	1					
ANR	31776	Argument	"""UNSET %s\\n"""		31305	0					
ANR	31777	PrimaryExpression	"""UNSET %s\\n"""		31305	0					
ANR	31778	Argument	stmt -> d . s_unset . varname		31305	1					
ANR	31779	MemberAccess	stmt -> d . s_unset . varname		31305	0					
ANR	31780	MemberAccess	stmt -> d . s_unset		31305	0					
ANR	31781	PtrMemberAccess	stmt -> d		31305	0					
ANR	31782	Identifier	stmt		31305	0					
ANR	31783	Identifier	d		31305	1					
ANR	31784	Identifier	s_unset		31305	1					
ANR	31785	Identifier	varname		31305	1					
ANR	31786	BreakStatement	break ;	3046:2:79725:79730	31305	45	True				
ANR	31787	Label	case S_RELOAD_LOOKUP_TABLE :	3047:4:79736:79762	31305	46	True				
ANR	31788	Identifier	S_RELOAD_LOOKUP_TABLE		31305	0					
ANR	31789	ExpressionStatement	doIndent ( indent )	3048:2:79766:79782	31305	47	True				
ANR	31790	CallExpression	doIndent ( indent )		31305	0					
ANR	31791	Callee	doIndent		31305	0					
ANR	31792	Identifier	doIndent		31305	0					
ANR	31793	ArgumentList	indent		31305	1					
ANR	31794	Argument	indent		31305	0					
ANR	31795	Identifier	indent		31305	0					
ANR	31796	ExpressionStatement	"dbgprintf ( ""RELOAD_LOOKUP_TABLE table(%s) (stub with '%s' on error)"" , stmt -> d . s_reload_lookup_table . table_name , stmt -> d . s_reload_lookup_table . stub_value )"	3048:20:79784:79954	31305	48	True				
ANR	31797	CallExpression	"dbgprintf ( ""RELOAD_LOOKUP_TABLE table(%s) (stub with '%s' on error)"" , stmt -> d . s_reload_lookup_table . table_name , stmt -> d . s_reload_lookup_table . stub_value )"		31305	0					
ANR	31798	Callee	dbgprintf		31305	0					
ANR	31799	Identifier	dbgprintf		31305	0					
ANR	31800	ArgumentList	"""RELOAD_LOOKUP_TABLE table(%s) (stub with '%s' on error)"""		31305	1					
ANR	31801	Argument	"""RELOAD_LOOKUP_TABLE table(%s) (stub with '%s' on error)"""		31305	0					
ANR	31802	PrimaryExpression	"""RELOAD_LOOKUP_TABLE table(%s) (stub with '%s' on error)"""		31305	0					
ANR	31803	Argument	stmt -> d . s_reload_lookup_table . table_name		31305	1					
ANR	31804	MemberAccess	stmt -> d . s_reload_lookup_table . table_name		31305	0					
ANR	31805	MemberAccess	stmt -> d . s_reload_lookup_table		31305	0					
ANR	31806	PtrMemberAccess	stmt -> d		31305	0					
ANR	31807	Identifier	stmt		31305	0					
ANR	31808	Identifier	d		31305	1					
ANR	31809	Identifier	s_reload_lookup_table		31305	1					
ANR	31810	Identifier	table_name		31305	1					
ANR	31811	Argument	stmt -> d . s_reload_lookup_table . stub_value		31305	2					
ANR	31812	MemberAccess	stmt -> d . s_reload_lookup_table . stub_value		31305	0					
ANR	31813	MemberAccess	stmt -> d . s_reload_lookup_table		31305	0					
ANR	31814	PtrMemberAccess	stmt -> d		31305	0					
ANR	31815	Identifier	stmt		31305	0					
ANR	31816	Identifier	d		31305	1					
ANR	31817	Identifier	s_reload_lookup_table		31305	1					
ANR	31818	Identifier	stub_value		31305	1					
ANR	31819	BreakStatement	break ;	3051:2:79958:79963	31305	49	True				
ANR	31820	Label	case S_PRIFILT :	3052:1:79966:79980	31305	50	True				
ANR	31821	Identifier	S_PRIFILT		31305	0					
ANR	31822	ExpressionStatement	doIndent ( indent )	3053:2:79984:80000	31305	51	True				
ANR	31823	CallExpression	doIndent ( indent )		31305	0					
ANR	31824	Callee	doIndent		31305	0					
ANR	31825	Identifier	doIndent		31305	0					
ANR	31826	ArgumentList	indent		31305	1					
ANR	31827	Argument	indent		31305	0					
ANR	31828	Identifier	indent		31305	0					
ANR	31829	ExpressionStatement	"dbgprintf ( ""PRIFILT '%s'\\n"" , stmt -> printable )"	3053:20:80002:80046	31305	52	True				
ANR	31830	CallExpression	"dbgprintf ( ""PRIFILT '%s'\\n"" , stmt -> printable )"		31305	0					
ANR	31831	Callee	dbgprintf		31305	0					
ANR	31832	Identifier	dbgprintf		31305	0					
ANR	31833	ArgumentList	"""PRIFILT '%s'\\n"""		31305	1					
ANR	31834	Argument	"""PRIFILT '%s'\\n"""		31305	0					
ANR	31835	PrimaryExpression	"""PRIFILT '%s'\\n"""		31305	0					
ANR	31836	Argument	stmt -> printable		31305	1					
ANR	31837	PtrMemberAccess	stmt -> printable		31305	0					
ANR	31838	Identifier	stmt		31305	0					
ANR	31839	Identifier	printable		31305	1					
ANR	31840	ExpressionStatement	"pmaskPrint ( stmt -> d . s_prifilt . pmask , indent )"	3054:2:80050:80093	31305	53	True				
ANR	31841	CallExpression	"pmaskPrint ( stmt -> d . s_prifilt . pmask , indent )"		31305	0					
ANR	31842	Callee	pmaskPrint		31305	0					
ANR	31843	Identifier	pmaskPrint		31305	0					
ANR	31844	ArgumentList	stmt -> d . s_prifilt . pmask		31305	1					
ANR	31845	Argument	stmt -> d . s_prifilt . pmask		31305	0					
ANR	31846	MemberAccess	stmt -> d . s_prifilt . pmask		31305	0					
ANR	31847	MemberAccess	stmt -> d . s_prifilt		31305	0					
ANR	31848	PtrMemberAccess	stmt -> d		31305	0					
ANR	31849	Identifier	stmt		31305	0					
ANR	31850	Identifier	d		31305	1					
ANR	31851	Identifier	s_prifilt		31305	1					
ANR	31852	Identifier	pmask		31305	1					
ANR	31853	Argument	indent		31305	1					
ANR	31854	Identifier	indent		31305	0					
ANR	31855	IfStatement	if ( subtree )		31305	54					
ANR	31856	Condition	subtree	3055:5:80100:80106	31305	0	True				
ANR	31857	Identifier	subtree		31305	0					
ANR	31858	CompoundStatement		65:14:2034:2034	31305	1					
ANR	31859	ExpressionStatement	"cnfstmtPrint ( stmt -> d . s_prifilt . t_then , indent + 1 )"	3056:3:80114:80162	31305	0	True				
ANR	31860	CallExpression	"cnfstmtPrint ( stmt -> d . s_prifilt . t_then , indent + 1 )"		31305	0					
ANR	31861	Callee	cnfstmtPrint		31305	0					
ANR	31862	Identifier	cnfstmtPrint		31305	0					
ANR	31863	ArgumentList	stmt -> d . s_prifilt . t_then		31305	1					
ANR	31864	Argument	stmt -> d . s_prifilt . t_then		31305	0					
ANR	31865	MemberAccess	stmt -> d . s_prifilt . t_then		31305	0					
ANR	31866	MemberAccess	stmt -> d . s_prifilt		31305	0					
ANR	31867	PtrMemberAccess	stmt -> d		31305	0					
ANR	31868	Identifier	stmt		31305	0					
ANR	31869	Identifier	d		31305	1					
ANR	31870	Identifier	s_prifilt		31305	1					
ANR	31871	Identifier	t_then		31305	1					
ANR	31872	Argument	indent + 1		31305	1					
ANR	31873	AdditiveExpression	indent + 1		31305	0		+			
ANR	31874	Identifier	indent		31305	0					
ANR	31875	PrimaryExpression	1		31305	1					
ANR	31876	IfStatement	if ( stmt -> d . s_prifilt . t_else != NULL )		31305	1					
ANR	31877	Condition	stmt -> d . s_prifilt . t_else != NULL	3057:6:80170:80201	31305	0	True				
ANR	31878	EqualityExpression	stmt -> d . s_prifilt . t_else != NULL		31305	0		!=			
ANR	31879	MemberAccess	stmt -> d . s_prifilt . t_else		31305	0					
ANR	31880	MemberAccess	stmt -> d . s_prifilt		31305	0					
ANR	31881	PtrMemberAccess	stmt -> d		31305	0					
ANR	31882	Identifier	stmt		31305	0					
ANR	31883	Identifier	d		31305	1					
ANR	31884	Identifier	s_prifilt		31305	1					
ANR	31885	Identifier	t_else		31305	1					
ANR	31886	Identifier	NULL		31305	1					
ANR	31887	CompoundStatement		67:40:2129:2129	31305	1					
ANR	31888	ExpressionStatement	doIndent ( indent )	3058:4:80210:80226	31305	0	True				
ANR	31889	CallExpression	doIndent ( indent )		31305	0					
ANR	31890	Callee	doIndent		31305	0					
ANR	31891	Identifier	doIndent		31305	0					
ANR	31892	ArgumentList	indent		31305	1					
ANR	31893	Argument	indent		31305	0					
ANR	31894	Identifier	indent		31305	0					
ANR	31895	ExpressionStatement	"dbgprintf ( ""ELSE\\n"" )"	3058:22:80228:80247	31305	1	True				
ANR	31896	CallExpression	"dbgprintf ( ""ELSE\\n"" )"		31305	0					
ANR	31897	Callee	dbgprintf		31305	0					
ANR	31898	Identifier	dbgprintf		31305	0					
ANR	31899	ArgumentList	"""ELSE\\n"""		31305	1					
ANR	31900	Argument	"""ELSE\\n"""		31305	0					
ANR	31901	PrimaryExpression	"""ELSE\\n"""		31305	0					
ANR	31902	ExpressionStatement	"cnfstmtPrint ( stmt -> d . s_prifilt . t_else , indent + 1 )"	3059:4:80253:80301	31305	2	True				
ANR	31903	CallExpression	"cnfstmtPrint ( stmt -> d . s_prifilt . t_else , indent + 1 )"		31305	0					
ANR	31904	Callee	cnfstmtPrint		31305	0					
ANR	31905	Identifier	cnfstmtPrint		31305	0					
ANR	31906	ArgumentList	stmt -> d . s_prifilt . t_else		31305	1					
ANR	31907	Argument	stmt -> d . s_prifilt . t_else		31305	0					
ANR	31908	MemberAccess	stmt -> d . s_prifilt . t_else		31305	0					
ANR	31909	MemberAccess	stmt -> d . s_prifilt		31305	0					
ANR	31910	PtrMemberAccess	stmt -> d		31305	0					
ANR	31911	Identifier	stmt		31305	0					
ANR	31912	Identifier	d		31305	1					
ANR	31913	Identifier	s_prifilt		31305	1					
ANR	31914	Identifier	t_else		31305	1					
ANR	31915	Argument	indent + 1		31305	1					
ANR	31916	AdditiveExpression	indent + 1		31305	0		+			
ANR	31917	Identifier	indent		31305	0					
ANR	31918	PrimaryExpression	1		31305	1					
ANR	31919	ExpressionStatement	doIndent ( indent )	3061:3:80311:80327	31305	2	True				
ANR	31920	CallExpression	doIndent ( indent )		31305	0					
ANR	31921	Callee	doIndent		31305	0					
ANR	31922	Identifier	doIndent		31305	0					
ANR	31923	ArgumentList	indent		31305	1					
ANR	31924	Argument	indent		31305	0					
ANR	31925	Identifier	indent		31305	0					
ANR	31926	ExpressionStatement	"dbgprintf ( ""END PRIFILT\\n"" )"	3061:21:80329:80355	31305	3	True				
ANR	31927	CallExpression	"dbgprintf ( ""END PRIFILT\\n"" )"		31305	0					
ANR	31928	Callee	dbgprintf		31305	0					
ANR	31929	Identifier	dbgprintf		31305	0					
ANR	31930	ArgumentList	"""END PRIFILT\\n"""		31305	1					
ANR	31931	Argument	"""END PRIFILT\\n"""		31305	0					
ANR	31932	PrimaryExpression	"""END PRIFILT\\n"""		31305	0					
ANR	31933	BreakStatement	break ;	3063:2:80363:80368	31305	55	True				
ANR	31934	Label	case S_PROPFILT :	3064:1:80371:80386	31305	56	True				
ANR	31935	Identifier	S_PROPFILT		31305	0					
ANR	31936	ExpressionStatement	doIndent ( indent )	3065:2:80390:80406	31305	57	True				
ANR	31937	CallExpression	doIndent ( indent )		31305	0					
ANR	31938	Callee	doIndent		31305	0					
ANR	31939	Identifier	doIndent		31305	0					
ANR	31940	ArgumentList	indent		31305	1					
ANR	31941	Argument	indent		31305	0					
ANR	31942	Identifier	indent		31305	0					
ANR	31943	ExpressionStatement	"dbgprintf ( ""PROPFILT\\n"" )"	3065:20:80408:80431	31305	58	True				
ANR	31944	CallExpression	"dbgprintf ( ""PROPFILT\\n"" )"		31305	0					
ANR	31945	Callee	dbgprintf		31305	0					
ANR	31946	Identifier	dbgprintf		31305	0					
ANR	31947	ArgumentList	"""PROPFILT\\n"""		31305	1					
ANR	31948	Argument	"""PROPFILT\\n"""		31305	0					
ANR	31949	PrimaryExpression	"""PROPFILT\\n"""		31305	0					
ANR	31950	ExpressionStatement	doIndent ( indent )	3066:2:80435:80451	31305	59	True				
ANR	31951	CallExpression	doIndent ( indent )		31305	0					
ANR	31952	Callee	doIndent		31305	0					
ANR	31953	Identifier	doIndent		31305	0					
ANR	31954	ArgumentList	indent		31305	1					
ANR	31955	Argument	indent		31305	0					
ANR	31956	Identifier	indent		31305	0					
ANR	31957	ExpressionStatement	"dbgprintf ( ""\\tProperty.: '%s'\\n"" , propIDToName ( stmt -> d . s_propfilt . prop . id ) )"	3066:20:80453:80530	31305	60	True				
ANR	31958	CallExpression	"dbgprintf ( ""\\tProperty.: '%s'\\n"" , propIDToName ( stmt -> d . s_propfilt . prop . id ) )"		31305	0					
ANR	31959	Callee	dbgprintf		31305	0					
ANR	31960	Identifier	dbgprintf		31305	0					
ANR	31961	ArgumentList	"""\\tProperty.: '%s'\\n"""		31305	1					
ANR	31962	Argument	"""\\tProperty.: '%s'\\n"""		31305	0					
ANR	31963	PrimaryExpression	"""\\tProperty.: '%s'\\n"""		31305	0					
ANR	31964	Argument	propIDToName ( stmt -> d . s_propfilt . prop . id )		31305	1					
ANR	31965	CallExpression	propIDToName ( stmt -> d . s_propfilt . prop . id )		31305	0					
ANR	31966	Callee	propIDToName		31305	0					
ANR	31967	Identifier	propIDToName		31305	0					
ANR	31968	ArgumentList	stmt -> d . s_propfilt . prop . id		31305	1					
ANR	31969	Argument	stmt -> d . s_propfilt . prop . id		31305	0					
ANR	31970	MemberAccess	stmt -> d . s_propfilt . prop . id		31305	0					
ANR	31971	MemberAccess	stmt -> d . s_propfilt . prop		31305	0					
ANR	31972	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	31973	PtrMemberAccess	stmt -> d		31305	0					
ANR	31974	Identifier	stmt		31305	0					
ANR	31975	Identifier	d		31305	1					
ANR	31976	Identifier	s_propfilt		31305	1					
ANR	31977	Identifier	prop		31305	1					
ANR	31978	Identifier	id		31305	1					
ANR	31979	IfStatement	if ( stmt -> d . s_propfilt . prop . id == PROP_CEE || stmt -> d . s_propfilt . prop . id == PROP_LOCAL_VAR || stmt -> d . s_propfilt . prop . id == PROP_GLOBAL_VAR )		31305	61					
ANR	31980	Condition	stmt -> d . s_propfilt . prop . id == PROP_CEE || stmt -> d . s_propfilt . prop . id == PROP_LOCAL_VAR || stmt -> d . s_propfilt . prop . id == PROP_GLOBAL_VAR	3068:5:80537:80681	31305	0	True				
ANR	31981	OrExpression	stmt -> d . s_propfilt . prop . id == PROP_CEE || stmt -> d . s_propfilt . prop . id == PROP_LOCAL_VAR || stmt -> d . s_propfilt . prop . id == PROP_GLOBAL_VAR		31305	0		||			
ANR	31982	EqualityExpression	stmt -> d . s_propfilt . prop . id == PROP_CEE		31305	0		==			
ANR	31983	MemberAccess	stmt -> d . s_propfilt . prop . id		31305	0					
ANR	31984	MemberAccess	stmt -> d . s_propfilt . prop		31305	0					
ANR	31985	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	31986	PtrMemberAccess	stmt -> d		31305	0					
ANR	31987	Identifier	stmt		31305	0					
ANR	31988	Identifier	d		31305	1					
ANR	31989	Identifier	s_propfilt		31305	1					
ANR	31990	Identifier	prop		31305	1					
ANR	31991	Identifier	id		31305	1					
ANR	31992	Identifier	PROP_CEE		31305	1					
ANR	31993	OrExpression	stmt -> d . s_propfilt . prop . id == PROP_LOCAL_VAR || stmt -> d . s_propfilt . prop . id == PROP_GLOBAL_VAR		31305	1		||			
ANR	31994	EqualityExpression	stmt -> d . s_propfilt . prop . id == PROP_LOCAL_VAR		31305	0		==			
ANR	31995	MemberAccess	stmt -> d . s_propfilt . prop . id		31305	0					
ANR	31996	MemberAccess	stmt -> d . s_propfilt . prop		31305	0					
ANR	31997	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	31998	PtrMemberAccess	stmt -> d		31305	0					
ANR	31999	Identifier	stmt		31305	0					
ANR	32000	Identifier	d		31305	1					
ANR	32001	Identifier	s_propfilt		31305	1					
ANR	32002	Identifier	prop		31305	1					
ANR	32003	Identifier	id		31305	1					
ANR	32004	Identifier	PROP_LOCAL_VAR		31305	1					
ANR	32005	EqualityExpression	stmt -> d . s_propfilt . prop . id == PROP_GLOBAL_VAR		31305	1		==			
ANR	32006	MemberAccess	stmt -> d . s_propfilt . prop . id		31305	0					
ANR	32007	MemberAccess	stmt -> d . s_propfilt . prop		31305	0					
ANR	32008	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	32009	PtrMemberAccess	stmt -> d		31305	0					
ANR	32010	Identifier	stmt		31305	0					
ANR	32011	Identifier	d		31305	1					
ANR	32012	Identifier	s_propfilt		31305	1					
ANR	32013	Identifier	prop		31305	1					
ANR	32014	Identifier	id		31305	1					
ANR	32015	Identifier	PROP_GLOBAL_VAR		31305	1					
ANR	32016	CompoundStatement		80:52:2609:2609	31305	1					
ANR	32017	ExpressionStatement	doIndent ( indent )	3071:3:80689:80705	31305	0	True				
ANR	32018	CallExpression	doIndent ( indent )		31305	0					
ANR	32019	Callee	doIndent		31305	0					
ANR	32020	Identifier	doIndent		31305	0					
ANR	32021	ArgumentList	indent		31305	1					
ANR	32022	Argument	indent		31305	0					
ANR	32023	Identifier	indent		31305	0					
ANR	32024	ExpressionStatement	"dbgprintf ( ""\\tCEE-Prop.: '%s'\\n"" , stmt -> d . s_propfilt . prop . name )"	3072:3:80710:80772	31305	1	True				
ANR	32025	CallExpression	"dbgprintf ( ""\\tCEE-Prop.: '%s'\\n"" , stmt -> d . s_propfilt . prop . name )"		31305	0					
ANR	32026	Callee	dbgprintf		31305	0					
ANR	32027	Identifier	dbgprintf		31305	0					
ANR	32028	ArgumentList	"""\\tCEE-Prop.: '%s'\\n"""		31305	1					
ANR	32029	Argument	"""\\tCEE-Prop.: '%s'\\n"""		31305	0					
ANR	32030	PrimaryExpression	"""\\tCEE-Prop.: '%s'\\n"""		31305	0					
ANR	32031	Argument	stmt -> d . s_propfilt . prop . name		31305	1					
ANR	32032	MemberAccess	stmt -> d . s_propfilt . prop . name		31305	0					
ANR	32033	MemberAccess	stmt -> d . s_propfilt . prop		31305	0					
ANR	32034	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	32035	PtrMemberAccess	stmt -> d		31305	0					
ANR	32036	Identifier	stmt		31305	0					
ANR	32037	Identifier	d		31305	1					
ANR	32038	Identifier	s_propfilt		31305	1					
ANR	32039	Identifier	prop		31305	1					
ANR	32040	Identifier	name		31305	1					
ANR	32041	ExpressionStatement	doIndent ( indent )	3074:2:80780:80796	31305	62	True				
ANR	32042	CallExpression	doIndent ( indent )		31305	0					
ANR	32043	Callee	doIndent		31305	0					
ANR	32044	Identifier	doIndent		31305	0					
ANR	32045	ArgumentList	indent		31305	1					
ANR	32046	Argument	indent		31305	0					
ANR	32047	Identifier	indent		31305	0					
ANR	32048	ExpressionStatement	"dbgprintf ( ""\\tOperation: "" )"	3074:20:80798:80824	31305	63	True				
ANR	32049	CallExpression	"dbgprintf ( ""\\tOperation: "" )"		31305	0					
ANR	32050	Callee	dbgprintf		31305	0					
ANR	32051	Identifier	dbgprintf		31305	0					
ANR	32052	ArgumentList	"""\\tOperation: """		31305	1					
ANR	32053	Argument	"""\\tOperation: """		31305	0					
ANR	32054	PrimaryExpression	"""\\tOperation: """		31305	0					
ANR	32055	IfStatement	if ( stmt -> d . s_propfilt . isNegated )		31305	64					
ANR	32056	Condition	stmt -> d . s_propfilt . isNegated	3075:5:80831:80858	31305	0	True				
ANR	32057	MemberAccess	stmt -> d . s_propfilt . isNegated		31305	0					
ANR	32058	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	32059	PtrMemberAccess	stmt -> d		31305	0					
ANR	32060	Identifier	stmt		31305	0					
ANR	32061	Identifier	d		31305	1					
ANR	32062	Identifier	s_propfilt		31305	1					
ANR	32063	Identifier	isNegated		31305	1					
ANR	32064	ExpressionStatement	"dbgprintf ( ""NOT "" )"	3076:3:80864:80881	31305	1	True				
ANR	32065	CallExpression	"dbgprintf ( ""NOT "" )"		31305	0					
ANR	32066	Callee	dbgprintf		31305	0					
ANR	32067	Identifier	dbgprintf		31305	0					
ANR	32068	ArgumentList	"""NOT """		31305	1					
ANR	32069	Argument	"""NOT """		31305	0					
ANR	32070	PrimaryExpression	"""NOT """		31305	0					
ANR	32071	ExpressionStatement	"dbgprintf ( ""'%s'\\n"" , getFIOPName ( stmt -> d . s_propfilt . operation ) )"	3077:2:80885:80947	31305	65	True				
ANR	32072	CallExpression	"dbgprintf ( ""'%s'\\n"" , getFIOPName ( stmt -> d . s_propfilt . operation ) )"		31305	0					
ANR	32073	Callee	dbgprintf		31305	0					
ANR	32074	Identifier	dbgprintf		31305	0					
ANR	32075	ArgumentList	"""'%s'\\n"""		31305	1					
ANR	32076	Argument	"""'%s'\\n"""		31305	0					
ANR	32077	PrimaryExpression	"""'%s'\\n"""		31305	0					
ANR	32078	Argument	getFIOPName ( stmt -> d . s_propfilt . operation )		31305	1					
ANR	32079	CallExpression	getFIOPName ( stmt -> d . s_propfilt . operation )		31305	0					
ANR	32080	Callee	getFIOPName		31305	0					
ANR	32081	Identifier	getFIOPName		31305	0					
ANR	32082	ArgumentList	stmt -> d . s_propfilt . operation		31305	1					
ANR	32083	Argument	stmt -> d . s_propfilt . operation		31305	0					
ANR	32084	MemberAccess	stmt -> d . s_propfilt . operation		31305	0					
ANR	32085	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	32086	PtrMemberAccess	stmt -> d		31305	0					
ANR	32087	Identifier	stmt		31305	0					
ANR	32088	Identifier	d		31305	1					
ANR	32089	Identifier	s_propfilt		31305	1					
ANR	32090	Identifier	operation		31305	1					
ANR	32091	IfStatement	if ( stmt -> d . s_propfilt . pCSCompValue != NULL )		31305	66					
ANR	32092	Condition	stmt -> d . s_propfilt . pCSCompValue != NULL	3078:5:80954:80992	31305	0	True				
ANR	32093	EqualityExpression	stmt -> d . s_propfilt . pCSCompValue != NULL		31305	0		!=			
ANR	32094	MemberAccess	stmt -> d . s_propfilt . pCSCompValue		31305	0					
ANR	32095	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	32096	PtrMemberAccess	stmt -> d		31305	0					
ANR	32097	Identifier	stmt		31305	0					
ANR	32098	Identifier	d		31305	1					
ANR	32099	Identifier	s_propfilt		31305	1					
ANR	32100	Identifier	pCSCompValue		31305	1					
ANR	32101	Identifier	NULL		31305	1					
ANR	32102	CompoundStatement		88:46:2920:2920	31305	1					
ANR	32103	ExpressionStatement	doIndent ( indent )	3079:3:81000:81016	31305	0	True				
ANR	32104	CallExpression	doIndent ( indent )		31305	0					
ANR	32105	Callee	doIndent		31305	0					
ANR	32106	Identifier	doIndent		31305	0					
ANR	32107	ArgumentList	indent		31305	1					
ANR	32108	Argument	indent		31305	0					
ANR	32109	Identifier	indent		31305	0					
ANR	32110	ExpressionStatement	"dbgprintf ( ""\\tValue....: '%s'\\n"" , rsCStrGetSzStrNoNULL ( stmt -> d . s_propfilt . pCSCompValue ) )"	3079:21:81018:81115	31305	1	True				
ANR	32111	CallExpression	"dbgprintf ( ""\\tValue....: '%s'\\n"" , rsCStrGetSzStrNoNULL ( stmt -> d . s_propfilt . pCSCompValue ) )"		31305	0					
ANR	32112	Callee	dbgprintf		31305	0					
ANR	32113	Identifier	dbgprintf		31305	0					
ANR	32114	ArgumentList	"""\\tValue....: '%s'\\n"""		31305	1					
ANR	32115	Argument	"""\\tValue....: '%s'\\n"""		31305	0					
ANR	32116	PrimaryExpression	"""\\tValue....: '%s'\\n"""		31305	0					
ANR	32117	Argument	rsCStrGetSzStrNoNULL ( stmt -> d . s_propfilt . pCSCompValue )		31305	1					
ANR	32118	CallExpression	rsCStrGetSzStrNoNULL ( stmt -> d . s_propfilt . pCSCompValue )		31305	0					
ANR	32119	Callee	rsCStrGetSzStrNoNULL		31305	0					
ANR	32120	Identifier	rsCStrGetSzStrNoNULL		31305	0					
ANR	32121	ArgumentList	stmt -> d . s_propfilt . pCSCompValue		31305	1					
ANR	32122	Argument	stmt -> d . s_propfilt . pCSCompValue		31305	0					
ANR	32123	MemberAccess	stmt -> d . s_propfilt . pCSCompValue		31305	0					
ANR	32124	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	32125	PtrMemberAccess	stmt -> d		31305	0					
ANR	32126	Identifier	stmt		31305	0					
ANR	32127	Identifier	d		31305	1					
ANR	32128	Identifier	s_propfilt		31305	1					
ANR	32129	Identifier	pCSCompValue		31305	1					
ANR	32130	IfStatement	if ( subtree )		31305	67					
ANR	32131	Condition	subtree	3082:5:81126:81132	31305	0	True				
ANR	32132	Identifier	subtree		31305	0					
ANR	32133	CompoundStatement		92:14:3060:3060	31305	1					
ANR	32134	ExpressionStatement	doIndent ( indent )	3083:3:81140:81156	31305	0	True				
ANR	32135	CallExpression	doIndent ( indent )		31305	0					
ANR	32136	Callee	doIndent		31305	0					
ANR	32137	Identifier	doIndent		31305	0					
ANR	32138	ArgumentList	indent		31305	1					
ANR	32139	Argument	indent		31305	0					
ANR	32140	Identifier	indent		31305	0					
ANR	32141	ExpressionStatement	"dbgprintf ( ""THEN\\n"" )"	3083:21:81158:81177	31305	1	True				
ANR	32142	CallExpression	"dbgprintf ( ""THEN\\n"" )"		31305	0					
ANR	32143	Callee	dbgprintf		31305	0					
ANR	32144	Identifier	dbgprintf		31305	0					
ANR	32145	ArgumentList	"""THEN\\n"""		31305	1					
ANR	32146	Argument	"""THEN\\n"""		31305	0					
ANR	32147	PrimaryExpression	"""THEN\\n"""		31305	0					
ANR	32148	ExpressionStatement	"cnfstmtPrint ( stmt -> d . s_propfilt . t_then , indent + 1 )"	3084:3:81182:81231	31305	2	True				
ANR	32149	CallExpression	"cnfstmtPrint ( stmt -> d . s_propfilt . t_then , indent + 1 )"		31305	0					
ANR	32150	Callee	cnfstmtPrint		31305	0					
ANR	32151	Identifier	cnfstmtPrint		31305	0					
ANR	32152	ArgumentList	stmt -> d . s_propfilt . t_then		31305	1					
ANR	32153	Argument	stmt -> d . s_propfilt . t_then		31305	0					
ANR	32154	MemberAccess	stmt -> d . s_propfilt . t_then		31305	0					
ANR	32155	MemberAccess	stmt -> d . s_propfilt		31305	0					
ANR	32156	PtrMemberAccess	stmt -> d		31305	0					
ANR	32157	Identifier	stmt		31305	0					
ANR	32158	Identifier	d		31305	1					
ANR	32159	Identifier	s_propfilt		31305	1					
ANR	32160	Identifier	t_then		31305	1					
ANR	32161	Argument	indent + 1		31305	1					
ANR	32162	AdditiveExpression	indent + 1		31305	0		+			
ANR	32163	Identifier	indent		31305	0					
ANR	32164	PrimaryExpression	1		31305	1					
ANR	32165	ExpressionStatement	doIndent ( indent )	3085:3:81236:81252	31305	3	True				
ANR	32166	CallExpression	doIndent ( indent )		31305	0					
ANR	32167	Callee	doIndent		31305	0					
ANR	32168	Identifier	doIndent		31305	0					
ANR	32169	ArgumentList	indent		31305	1					
ANR	32170	Argument	indent		31305	0					
ANR	32171	Identifier	indent		31305	0					
ANR	32172	ExpressionStatement	"dbgprintf ( ""END PROPFILT\\n"" )"	3085:21:81254:81281	31305	4	True				
ANR	32173	CallExpression	"dbgprintf ( ""END PROPFILT\\n"" )"		31305	0					
ANR	32174	Callee	dbgprintf		31305	0					
ANR	32175	Identifier	dbgprintf		31305	0					
ANR	32176	ArgumentList	"""END PROPFILT\\n"""		31305	1					
ANR	32177	Argument	"""END PROPFILT\\n"""		31305	0					
ANR	32178	PrimaryExpression	"""END PROPFILT\\n"""		31305	0					
ANR	32179	BreakStatement	break ;	3087:2:81289:81294	31305	68	True				
ANR	32180	Label	default :	3088:1:81297:81304	31305	69	True				
ANR	32181	Identifier	default		31305	0					
ANR	32182	ExpressionStatement	"dbgprintf ( ""error: unknown stmt type %u\\n"" , ( unsigned ) stmt -> nodetype )"	3089:2:81308:81380	31305	70	True				
ANR	32183	CallExpression	"dbgprintf ( ""error: unknown stmt type %u\\n"" , ( unsigned ) stmt -> nodetype )"		31305	0					
ANR	32184	Callee	dbgprintf		31305	0					
ANR	32185	Identifier	dbgprintf		31305	0					
ANR	32186	ArgumentList	"""error: unknown stmt type %u\\n"""		31305	1					
ANR	32187	Argument	"""error: unknown stmt type %u\\n"""		31305	0					
ANR	32188	PrimaryExpression	"""error: unknown stmt type %u\\n"""		31305	0					
ANR	32189	Argument	( unsigned ) stmt -> nodetype		31305	1					
ANR	32190	CastExpression	( unsigned ) stmt -> nodetype		31305	0					
ANR	32191	CastTarget	unsigned		31305	0					
ANR	32192	PtrMemberAccess	stmt -> nodetype		31305	1					
ANR	32193	Identifier	stmt		31305	0					
ANR	32194	Identifier	nodetype		31305	1					
ANR	32195	BreakStatement	break ;	3091:2:81384:81389	31305	71	True				
ANR	32196	ReturnType	void		31305	1					
ANR	32197	Identifier	cnfstmtPrintOnly		31305	2					
ANR	32198	ParameterList	"struct cnfstmt * stmt , int indent , sbool subtree"		31305	3					
ANR	32199	Parameter	struct cnfstmt * stmt	2990:17:78025:78044	31305	0	True				
ANR	32200	ParameterType	struct cnfstmt *		31305	0					
ANR	32201	Identifier	stmt		31305	1					
ANR	32202	Parameter	int indent	2990:39:78047:78056	31305	1	True				
ANR	32203	ParameterType	int		31305	0					
ANR	32204	Identifier	indent		31305	1					
ANR	32205	Parameter	sbool subtree	2990:51:78059:78071	31305	2	True				
ANR	32206	ParameterType	sbool		31305	0					
ANR	32207	Identifier	subtree		31305	1					
ANR	32208	CFGEntryNode	ENTRY		31305		True				
ANR	32209	CFGExitNode	EXIT		31305		True				
ANR	32210	Symbol	stmt -> d . s_propfilt . prop . id		31305						
ANR	32211	Symbol	stmt -> d . s_call		31305						
ANR	32212	Symbol	stmt -> d . s_propfilt . prop . name		31305						
ANR	32213	Symbol	stmt -> d . s_call . ruleset		31305						
ANR	32214	Symbol	stmt -> nodetype		31305						
ANR	32215	Symbol	es_str2cstr		31305						
ANR	32216	Symbol	stmt -> d . s_foreach . iter -> collection		31305						
ANR	32217	Symbol	stmt -> d . s_propfilt . pCSCompValue		31305						
ANR	32218	Symbol	stmt -> d . s_set . varname		31305						
ANR	32219	Symbol	PROP_LOCAL_VAR		31305						
ANR	32220	Symbol	stmt -> d . act -> iActionNbr		31305						
ANR	32221	Symbol	stmt -> d . s_propfilt		31305						
ANR	32222	Symbol	stmt -> d . s_prifilt . t_then		31305						
ANR	32223	Symbol	stmt -> d . s_unset		31305						
ANR	32224	Symbol	rsCStrGetSzStrNoNULL		31305						
ANR	32225	Symbol	stmt -> d		31305						
ANR	32226	Symbol	* stmt -> d . act		31305						
ANR	32227	Symbol	NULL		31305						
ANR	32228	Symbol	stmt -> d . s_propfilt . prop		31305						
ANR	32229	Symbol	stmt -> d . s_propfilt . isNegated		31305						
ANR	32230	Symbol	stmt -> d . s_if . expr		31305						
ANR	32231	Symbol	stmt -> d . s_set . expr		31305						
ANR	32232	Symbol	stmt -> d . s_call_ind . expr		31305						
ANR	32233	Symbol	stmt -> d . s_propfilt . t_then		31305						
ANR	32234	Symbol	* stmt -> d . s_foreach . iter		31305						
ANR	32235	Symbol	stmt -> d . s_prifilt . t_else		31305						
ANR	32236	Symbol	stmt -> d . s_reload_lookup_table . stub_value		31305						
ANR	32237	Symbol	stmt -> d . s_foreach . iter		31305						
ANR	32238	Symbol	stmt -> d . s_foreach . body		31305						
ANR	32239	Symbol	PROP_CEE		31305						
ANR	32240	Symbol	stmt -> d . s_if		31305						
ANR	32241	Symbol	modGetName		31305						
ANR	32242	Symbol	stmt -> d . s_foreach . iter -> var		31305						
ANR	32243	Symbol	cstr		31305						
ANR	32244	Symbol	stmt -> d . s_if . t_else		31305						
ANR	32245	Symbol	indent		31305						
ANR	32246	Symbol	stmt -> d . s_set		31305						
ANR	32247	Symbol	propIDToName		31305						
ANR	32248	Symbol	stmt -> d . s_reload_lookup_table . table_name		31305						
ANR	32249	Symbol	stmt -> d . s_call_ind		31305						
ANR	32250	Symbol	* stmt -> d . s_foreach		31305						
ANR	32251	Symbol	stmt -> printable		31305						
ANR	32252	Symbol	* stmt		31305						
ANR	32253	Symbol	* stmt -> d		31305						
ANR	32254	Symbol	stmt -> d . s_prifilt . pmask		31305						
ANR	32255	Symbol	stmt -> d . s_reload_lookup_table		31305						
ANR	32256	Symbol	stmt -> d . act -> pMod		31305						
ANR	32257	Symbol	* * stmt		31305						
ANR	32258	Symbol	subtree		31305						
ANR	32259	Symbol	getFIOPName		31305						
ANR	32260	Symbol	stmt -> d . s_unset . varname		31305						
ANR	32261	Symbol	stmt -> d . s_foreach		31305						
ANR	32262	Symbol	stmt -> d . s_propfilt . operation		31305						
ANR	32263	Symbol	stmt -> d . s_call . name		31305						
ANR	32264	Symbol	PROP_GLOBAL_VAR		31305						
ANR	32265	Symbol	stmt		31305						
ANR	32266	Symbol	stmt -> d . s_prifilt		31305						
ANR	32267	Symbol	stmt -> d . act		31305						
ANR	32268	Symbol	stmt -> d . s_if . t_then		31305						
ANR	32269	Function	cnfstmtPrint	3094:0:81396:81647							
ANR	32270	FunctionDef	"cnfstmtPrint (struct cnfstmt * root , int indent)"		32269	0					
ANR	32271	CompoundStatement		3096:0:81448:81647	32269	0					
ANR	32272	IdentifierDeclStatement	struct cnfstmt * stmt ;	3097:1:81451:81471	32269	0	True				
ANR	32273	IdentifierDecl	* stmt		32269	0					
ANR	32274	IdentifierDeclType	struct cnfstmt *		32269	0					
ANR	32275	Identifier	stmt		32269	1					
ANR	32276	ForStatement	for ( stmt = root ; stmt != NULL ; stmt = stmt -> next )		32269	1					
ANR	32277	ForInit	stmt = root ;	3099:5:81557:81569	32269	0	True				
ANR	32278	AssignmentExpression	stmt = root		32269	0		=			
ANR	32279	Identifier	stmt		32269	0					
ANR	32280	Identifier	root		32269	1					
ANR	32281	Condition	stmt != NULL	3099:19:81571:81582	32269	1	True				
ANR	32282	EqualityExpression	stmt != NULL		32269	0		!=			
ANR	32283	Identifier	stmt		32269	0					
ANR	32284	Identifier	NULL		32269	1					
ANR	32285	AssignmentExpression	stmt = stmt -> next	3099:34:81586:81602	32269	2	True	=			
ANR	32286	Identifier	stmt		32269	0					
ANR	32287	PtrMemberAccess	stmt -> next		32269	1					
ANR	32288	Identifier	stmt		32269	0					
ANR	32289	Identifier	next		32269	1					
ANR	32290	CompoundStatement		4:53:156:156	32269	3					
ANR	32291	ExpressionStatement	"cnfstmtPrintOnly ( stmt , indent , 1 )"	3100:2:81609:81642	32269	0	True				
ANR	32292	CallExpression	"cnfstmtPrintOnly ( stmt , indent , 1 )"		32269	0					
ANR	32293	Callee	cnfstmtPrintOnly		32269	0					
ANR	32294	Identifier	cnfstmtPrintOnly		32269	0					
ANR	32295	ArgumentList	stmt		32269	1					
ANR	32296	Argument	stmt		32269	0					
ANR	32297	Identifier	stmt		32269	0					
ANR	32298	Argument	indent		32269	1					
ANR	32299	Identifier	indent		32269	0					
ANR	32300	Argument	1		32269	2					
ANR	32301	PrimaryExpression	1		32269	0					
ANR	32302	ReturnType	void		32269	1					
ANR	32303	Identifier	cnfstmtPrint		32269	2					
ANR	32304	ParameterList	"struct cnfstmt * root , int indent"		32269	3					
ANR	32305	Parameter	struct cnfstmt * root	3095:13:81414:81433	32269	0	True				
ANR	32306	ParameterType	struct cnfstmt *		32269	0					
ANR	32307	Identifier	root		32269	1					
ANR	32308	Parameter	int indent	3095:35:81436:81445	32269	1	True				
ANR	32309	ParameterType	int		32269	0					
ANR	32310	Identifier	indent		32269	1					
ANR	32311	CFGEntryNode	ENTRY		32269		True				
ANR	32312	CFGExitNode	EXIT		32269		True				
ANR	32313	Symbol	NULL		32269						
ANR	32314	Symbol	indent		32269						
ANR	32315	Symbol	root		32269						
ANR	32316	Symbol	* stmt		32269						
ANR	32317	Symbol	stmt -> next		32269						
ANR	32318	Symbol	stmt		32269						
ANR	32319	Function	cnfnumvalNew	3104:0:81650:81856							
ANR	32320	FunctionDef	cnfnumvalNew (const long long val)		32319	0					
ANR	32321	CompoundStatement		3106:0:81702:81856	32319	0					
ANR	32322	IdentifierDeclStatement	struct cnfnumval * numval ;	3107:1:81705:81729	32319	0	True				
ANR	32323	IdentifierDecl	* numval		32319	0					
ANR	32324	IdentifierDeclType	struct cnfnumval *		32319	0					
ANR	32325	Identifier	numval		32319	1					
ANR	32326	IfStatement	if ( ( numval = malloc ( sizeof ( struct cnfnumval ) ) ) != NULL )		32319	1					
ANR	32327	Condition	( numval = malloc ( sizeof ( struct cnfnumval ) ) ) != NULL	3108:4:81735:81785	32319	0	True				
ANR	32328	EqualityExpression	( numval = malloc ( sizeof ( struct cnfnumval ) ) ) != NULL		32319	0		!=			
ANR	32329	AssignmentExpression	numval = malloc ( sizeof ( struct cnfnumval ) )		32319	0		=			
ANR	32330	Identifier	numval		32319	0					
ANR	32331	CallExpression	malloc ( sizeof ( struct cnfnumval ) )		32319	1					
ANR	32332	Callee	malloc		32319	0					
ANR	32333	Identifier	malloc		32319	0					
ANR	32334	ArgumentList	sizeof ( struct cnfnumval )		32319	1					
ANR	32335	Argument	sizeof ( struct cnfnumval )		32319	0					
ANR	32336	SizeofExpression	sizeof ( struct cnfnumval )		32319	0					
ANR	32337	Sizeof	sizeof		32319	0					
ANR	32338	SizeofOperand	struct cnfnumval		32319	1					
ANR	32339	Identifier	NULL		32319	1					
ANR	32340	CompoundStatement		3:57:85:85	32319	1					
ANR	32341	ExpressionStatement	numval -> nodetype = 'N'	3109:2:81792:81814	32319	0	True				
ANR	32342	AssignmentExpression	numval -> nodetype = 'N'		32319	0		=			
ANR	32343	PtrMemberAccess	numval -> nodetype		32319	0					
ANR	32344	Identifier	numval		32319	0					
ANR	32345	Identifier	nodetype		32319	1					
ANR	32346	PrimaryExpression	'N'		32319	1					
ANR	32347	ExpressionStatement	numval -> val = val	3110:2:81818:81835	32319	1	True				
ANR	32348	AssignmentExpression	numval -> val = val		32319	0		=			
ANR	32349	PtrMemberAccess	numval -> val		32319	0					
ANR	32350	Identifier	numval		32319	0					
ANR	32351	Identifier	val		32319	1					
ANR	32352	Identifier	val		32319	1					
ANR	32353	ReturnStatement	return numval ;	3112:1:81841:81854	32319	2	True				
ANR	32354	Identifier	numval		32319	0					
ANR	32355	ReturnType	struct cnfnumval *		32319	1					
ANR	32356	Identifier	cnfnumvalNew		32319	2					
ANR	32357	ParameterList	const long long val		32319	3					
ANR	32358	Parameter	const long long val	3105:13:81681:81699	32319	0	True				
ANR	32359	ParameterType	const long long		32319	0					
ANR	32360	Identifier	val		32319	1					
ANR	32361	CFGEntryNode	ENTRY		32319		True				
ANR	32362	CFGExitNode	EXIT		32319		True				
ANR	32363	Symbol	val		32319						
ANR	32364	Symbol	* numval		32319						
ANR	32365	Symbol	malloc		32319						
ANR	32366	Symbol	numval		32319						
ANR	32367	Symbol	NULL		32319						
ANR	32368	Symbol	numval -> val		32319						
ANR	32369	Symbol	numval -> nodetype		32319						
ANR	32370	DeclStmt									
ANR	32371	Decl							struct cnfstringval	struct cnfstringval *	strval
ANR	32372	Function	cnfarrayNew	3127:0:82132:82432							
ANR	32373	FunctionDef	cnfarrayNew (es_str_t * val)		32372	0					
ANR	32374	CompoundStatement		3129:0:82176:82432	32372	0					
ANR	32375	IdentifierDeclStatement	struct cnfarray * ar ;	3130:1:82179:82198	32372	0	True				
ANR	32376	IdentifierDecl	* ar		32372	0					
ANR	32377	IdentifierDeclType	struct cnfarray *		32372	0					
ANR	32378	Identifier	ar		32372	1					
ANR	32379	IfStatement	if ( ( ar = malloc ( sizeof ( struct cnfarray ) ) ) != NULL )		32372	1					
ANR	32380	Condition	( ar = malloc ( sizeof ( struct cnfarray ) ) ) != NULL	3131:4:82204:82249	32372	0	True				
ANR	32381	EqualityExpression	( ar = malloc ( sizeof ( struct cnfarray ) ) ) != NULL		32372	0		!=			
ANR	32382	AssignmentExpression	ar = malloc ( sizeof ( struct cnfarray ) )		32372	0		=			
ANR	32383	Identifier	ar		32372	0					
ANR	32384	CallExpression	malloc ( sizeof ( struct cnfarray ) )		32372	1					
ANR	32385	Callee	malloc		32372	0					
ANR	32386	Identifier	malloc		32372	0					
ANR	32387	ArgumentList	sizeof ( struct cnfarray )		32372	1					
ANR	32388	Argument	sizeof ( struct cnfarray )		32372	0					
ANR	32389	SizeofExpression	sizeof ( struct cnfarray )		32372	0					
ANR	32390	Sizeof	sizeof		32372	0					
ANR	32391	SizeofOperand	struct cnfarray		32372	1					
ANR	32392	Identifier	NULL		32372	1					
ANR	32393	CompoundStatement		3:52:75:75	32372	1					
ANR	32394	ExpressionStatement	ar -> nodetype = 'A'	3132:2:82256:82274	32372	0	True				
ANR	32395	AssignmentExpression	ar -> nodetype = 'A'		32372	0		=			
ANR	32396	PtrMemberAccess	ar -> nodetype		32372	0					
ANR	32397	Identifier	ar		32372	0					
ANR	32398	Identifier	nodetype		32372	1					
ANR	32399	PrimaryExpression	'A'		32372	1					
ANR	32400	ExpressionStatement	ar -> nmemb = 1	3133:2:82278:82291	32372	1	True				
ANR	32401	AssignmentExpression	ar -> nmemb = 1		32372	0		=			
ANR	32402	PtrMemberAccess	ar -> nmemb		32372	0					
ANR	32403	Identifier	ar		32372	0					
ANR	32404	Identifier	nmemb		32372	1					
ANR	32405	PrimaryExpression	1		32372	1					
ANR	32406	IfStatement	if ( ( ar -> arr = malloc ( sizeof ( es_str_t * ) ) ) == NULL )		32372	2					
ANR	32407	Condition	( ar -> arr = malloc ( sizeof ( es_str_t * ) ) ) == NULL	3134:5:82298:82342	32372	0	True				
ANR	32408	EqualityExpression	( ar -> arr = malloc ( sizeof ( es_str_t * ) ) ) == NULL		32372	0		==			
ANR	32409	AssignmentExpression	ar -> arr = malloc ( sizeof ( es_str_t * ) )		32372	0		=			
ANR	32410	PtrMemberAccess	ar -> arr		32372	0					
ANR	32411	Identifier	ar		32372	0					
ANR	32412	Identifier	arr		32372	1					
ANR	32413	CallExpression	malloc ( sizeof ( es_str_t * ) )		32372	1					
ANR	32414	Callee	malloc		32372	0					
ANR	32415	Identifier	malloc		32372	0					
ANR	32416	ArgumentList	sizeof ( es_str_t * )		32372	1					
ANR	32417	Argument	sizeof ( es_str_t * )		32372	0					
ANR	32418	SizeofExpression	sizeof ( es_str_t * )		32372	0					
ANR	32419	Sizeof	sizeof		32372	0					
ANR	32420	SizeofOperand	es_str_t *		32372	1					
ANR	32421	Identifier	NULL		32372	1					
ANR	32422	CompoundStatement		6:52:168:168	32372	1					
ANR	32423	ExpressionStatement	free ( ar )	3135:3:82350:82358	32372	0	True				
ANR	32424	CallExpression	free ( ar )		32372	0					
ANR	32425	Callee	free		32372	0					
ANR	32426	Identifier	free		32372	0					
ANR	32427	ArgumentList	ar		32372	1					
ANR	32428	Argument	ar		32372	0					
ANR	32429	Identifier	ar		32372	0					
ANR	32430	ExpressionStatement	ar = NULL	3136:3:82363:82372	32372	1	True				
ANR	32431	AssignmentExpression	ar = NULL		32372	0		=			
ANR	32432	Identifier	ar		32372	0					
ANR	32433	Identifier	NULL		32372	1					
ANR	32434	GotoStatement	goto done ;	3137:3:82377:82386	32372	2	True				
ANR	32435	Identifier	done		32372	0					
ANR	32436	ExpressionStatement	ar -> arr [ 0 ] = val	3139:2:82394:82410	32372	3	True				
ANR	32437	AssignmentExpression	ar -> arr [ 0 ] = val		32372	0		=			
ANR	32438	ArrayIndexing	ar -> arr [ 0 ]		32372	0					
ANR	32439	PtrMemberAccess	ar -> arr		32372	0					
ANR	32440	Identifier	ar		32372	0					
ANR	32441	Identifier	arr		32372	1					
ANR	32442	PrimaryExpression	0		32372	1					
ANR	32443	Identifier	val		32372	1					
ANR	32444	Label	done :	3141:0:82415:82419	32372	2	True				
ANR	32445	Identifier	done		32372	0					
ANR	32446	ReturnStatement	return ar ;	3141:6:82421:82430	32372	3	True				
ANR	32447	Identifier	ar		32372	0					
ANR	32448	ReturnType	struct cnfarray *		32372	1					
ANR	32449	Identifier	cnfarrayNew		32372	2					
ANR	32450	ParameterList	es_str_t * val		32372	3					
ANR	32451	Parameter	es_str_t * val	3128:12:82161:82173	32372	0	True				
ANR	32452	ParameterType	es_str_t *		32372	0					
ANR	32453	Identifier	val		32372	1					
ANR	32454	CFGEntryNode	ENTRY		32372		True				
ANR	32455	CFGExitNode	EXIT		32372		True				
ANR	32456	Symbol	val		32372						
ANR	32457	Symbol	ar		32372						
ANR	32458	Symbol	malloc		32372						
ANR	32459	Symbol	NULL		32372						
ANR	32460	Symbol	* ar		32372						
ANR	32461	Symbol	ar -> nmemb		32372						
ANR	32462	Symbol	* ar -> arr		32372						
ANR	32463	Symbol	ar -> nodetype		32372						
ANR	32464	Symbol	ar -> arr		32372						
ANR	32465	Symbol	* * ar		32372						
ANR	32466	DeclStmt									
ANR	32467	Decl							es_str_t	es_str_t * *	newptr
ANR	32468	Function	cnfarrayDup	3160:0:82857:83078							
ANR	32469	FunctionDef	cnfarrayDup (struct cnfarray * old)		32468	0					
ANR	32470	CompoundStatement		3162:0:82908:83078	32468	0					
ANR	32471	IdentifierDeclStatement	int i ;	3163:1:82911:82916	32468	0	True				
ANR	32472	IdentifierDecl	i		32468	0					
ANR	32473	IdentifierDeclType	int		32468	0					
ANR	32474	Identifier	i		32468	1					
ANR	32475	IdentifierDeclStatement	struct cnfarray * ar ;	3164:1:82919:82938	32468	1	True				
ANR	32476	IdentifierDecl	* ar		32468	0					
ANR	32477	IdentifierDeclType	struct cnfarray *		32468	0					
ANR	32478	Identifier	ar		32468	1					
ANR	32479	ExpressionStatement	ar = cnfarrayNew ( es_strdup ( old -> arr [ 0 ] ) )	3165:1:82941:82981	32468	2	True				
ANR	32480	AssignmentExpression	ar = cnfarrayNew ( es_strdup ( old -> arr [ 0 ] ) )		32468	0		=			
ANR	32481	Identifier	ar		32468	0					
ANR	32482	CallExpression	cnfarrayNew ( es_strdup ( old -> arr [ 0 ] ) )		32468	1					
ANR	32483	Callee	cnfarrayNew		32468	0					
ANR	32484	Identifier	cnfarrayNew		32468	0					
ANR	32485	ArgumentList	es_strdup ( old -> arr [ 0 ] )		32468	1					
ANR	32486	Argument	es_strdup ( old -> arr [ 0 ] )		32468	0					
ANR	32487	CallExpression	es_strdup ( old -> arr [ 0 ] )		32468	0					
ANR	32488	Callee	es_strdup		32468	0					
ANR	32489	Identifier	es_strdup		32468	0					
ANR	32490	ArgumentList	old -> arr [ 0 ]		32468	1					
ANR	32491	Argument	old -> arr [ 0 ]		32468	0					
ANR	32492	ArrayIndexing	old -> arr [ 0 ]		32468	0					
ANR	32493	PtrMemberAccess	old -> arr		32468	0					
ANR	32494	Identifier	old		32468	0					
ANR	32495	Identifier	arr		32468	1					
ANR	32496	PrimaryExpression	0		32468	1					
ANR	32497	ForStatement	for ( i = 1 ; i < old -> nmemb ; ++ i )		32468	3					
ANR	32498	ForInit	i = 1 ;	3166:5:82988:82994	32468	0	True				
ANR	32499	AssignmentExpression	i = 1		32468	0		=			
ANR	32500	Identifier	i		32468	0					
ANR	32501	PrimaryExpression	1		32468	1					
ANR	32502	Condition	i < old -> nmemb	3166:13:82996:83009	32468	1	True				
ANR	32503	RelationalExpression	i < old -> nmemb		32468	0		<			
ANR	32504	Identifier	i		32468	0					
ANR	32505	PtrMemberAccess	old -> nmemb		32468	1					
ANR	32506	Identifier	old		32468	0					
ANR	32507	Identifier	nmemb		32468	1					
ANR	32508	UnaryExpression	++ i	3166:30:83013:83015	32468	2	True				
ANR	32509	IncDec	++		32468	0					
ANR	32510	Identifier	i		32468	1					
ANR	32511	CompoundStatement		5:35:109:109	32468	3					
ANR	32512	ExpressionStatement	"cnfarrayAdd ( ar , es_strdup ( old -> arr [ i ] ) )"	3167:2:83022:83061	32468	0	True				
ANR	32513	CallExpression	"cnfarrayAdd ( ar , es_strdup ( old -> arr [ i ] ) )"		32468	0					
ANR	32514	Callee	cnfarrayAdd		32468	0					
ANR	32515	Identifier	cnfarrayAdd		32468	0					
ANR	32516	ArgumentList	ar		32468	1					
ANR	32517	Argument	ar		32468	0					
ANR	32518	Identifier	ar		32468	0					
ANR	32519	Argument	es_strdup ( old -> arr [ i ] )		32468	1					
ANR	32520	CallExpression	es_strdup ( old -> arr [ i ] )		32468	0					
ANR	32521	Callee	es_strdup		32468	0					
ANR	32522	Identifier	es_strdup		32468	0					
ANR	32523	ArgumentList	old -> arr [ i ]		32468	1					
ANR	32524	Argument	old -> arr [ i ]		32468	0					
ANR	32525	ArrayIndexing	old -> arr [ i ]		32468	0					
ANR	32526	PtrMemberAccess	old -> arr		32468	0					
ANR	32527	Identifier	old		32468	0					
ANR	32528	Identifier	arr		32468	1					
ANR	32529	Identifier	i		32468	1					
ANR	32530	ReturnStatement	return ar ;	3169:1:83067:83076	32468	4	True				
ANR	32531	Identifier	ar		32468	0					
ANR	32532	ReturnType	struct cnfarray *		32468	1					
ANR	32533	Identifier	cnfarrayDup		32468	2					
ANR	32534	ParameterList	struct cnfarray * old		32468	3					
ANR	32535	Parameter	struct cnfarray * old	3161:12:82886:82905	32468	0	True				
ANR	32536	ParameterType	struct cnfarray *		32468	0					
ANR	32537	Identifier	old		32468	1					
ANR	32538	CFGEntryNode	ENTRY		32468		True				
ANR	32539	CFGExitNode	EXIT		32468		True				
ANR	32540	Symbol	ar		32468						
ANR	32541	Symbol	* old		32468						
ANR	32542	Symbol	cnfarrayNew		32468						
ANR	32543	Symbol	* old -> arr		32468						
ANR	32544	Symbol	es_strdup		32468						
ANR	32545	Symbol	* i		32468						
ANR	32546	Symbol	old		32468						
ANR	32547	Symbol	old -> nmemb		32468						
ANR	32548	Symbol	i		32468						
ANR	32549	Symbol	* * old		32468						
ANR	32550	Symbol	old -> arr		32468						
ANR	32551	Function	cnfvarNew	3172:0:83081:83323							
ANR	32552	FunctionDef	cnfvarNew (char * name)		32551	0					
ANR	32553	CompoundStatement		3174:0:83118:83323	32551	0					
ANR	32554	IdentifierDeclStatement	struct cnfvar * var ;	3175:1:83121:83139	32551	0	True				
ANR	32555	IdentifierDecl	* var		32551	0					
ANR	32556	IdentifierDeclType	struct cnfvar *		32551	0					
ANR	32557	Identifier	var		32551	1					
ANR	32558	IfStatement	if ( ( var = malloc ( sizeof ( struct cnfvar ) ) ) != NULL )		32551	1					
ANR	32559	Condition	( var = malloc ( sizeof ( struct cnfvar ) ) ) != NULL	3176:4:83145:83189	32551	0	True				
ANR	32560	EqualityExpression	( var = malloc ( sizeof ( struct cnfvar ) ) ) != NULL		32551	0		!=			
ANR	32561	AssignmentExpression	var = malloc ( sizeof ( struct cnfvar ) )		32551	0		=			
ANR	32562	Identifier	var		32551	0					
ANR	32563	CallExpression	malloc ( sizeof ( struct cnfvar ) )		32551	1					
ANR	32564	Callee	malloc		32551	0					
ANR	32565	Identifier	malloc		32551	0					
ANR	32566	ArgumentList	sizeof ( struct cnfvar )		32551	1					
ANR	32567	Argument	sizeof ( struct cnfvar )		32551	0					
ANR	32568	SizeofExpression	sizeof ( struct cnfvar )		32551	0					
ANR	32569	Sizeof	sizeof		32551	0					
ANR	32570	SizeofOperand	struct cnfvar		32551	1					
ANR	32571	Identifier	NULL		32551	1					
ANR	32572	CompoundStatement		3:51:73:73	32551	1					
ANR	32573	ExpressionStatement	var -> nodetype = 'V'	3177:2:83196:83215	32551	0	True				
ANR	32574	AssignmentExpression	var -> nodetype = 'V'		32551	0		=			
ANR	32575	PtrMemberAccess	var -> nodetype		32551	0					
ANR	32576	Identifier	var		32551	0					
ANR	32577	Identifier	nodetype		32551	1					
ANR	32578	PrimaryExpression	'V'		32551	1					
ANR	32579	ExpressionStatement	var -> name = name	3178:2:83219:83235	32551	1	True				
ANR	32580	AssignmentExpression	var -> name = name		32551	0		=			
ANR	32581	PtrMemberAccess	var -> name		32551	0					
ANR	32582	Identifier	var		32551	0					
ANR	32583	Identifier	name		32551	1					
ANR	32584	Identifier	name		32551	1					
ANR	32585	ExpressionStatement	"msgPropDescrFill ( & var -> prop , ( uchar * ) var -> name , strlen ( var -> name ) )"	3179:2:83239:83305	32551	2	True				
ANR	32586	CallExpression	"msgPropDescrFill ( & var -> prop , ( uchar * ) var -> name , strlen ( var -> name ) )"		32551	0					
ANR	32587	Callee	msgPropDescrFill		32551	0					
ANR	32588	Identifier	msgPropDescrFill		32551	0					
ANR	32589	ArgumentList	& var -> prop		32551	1					
ANR	32590	Argument	& var -> prop		32551	0					
ANR	32591	UnaryOperationExpression	& var -> prop		32551	0					
ANR	32592	UnaryOperator	&		32551	0					
ANR	32593	PtrMemberAccess	var -> prop		32551	1					
ANR	32594	Identifier	var		32551	0					
ANR	32595	Identifier	prop		32551	1					
ANR	32596	Argument	( uchar * ) var -> name		32551	1					
ANR	32597	CastExpression	( uchar * ) var -> name		32551	0					
ANR	32598	CastTarget	uchar *		32551	0					
ANR	32599	PtrMemberAccess	var -> name		32551	1					
ANR	32600	Identifier	var		32551	0					
ANR	32601	Identifier	name		32551	1					
ANR	32602	Argument	strlen ( var -> name )		32551	2					
ANR	32603	CallExpression	strlen ( var -> name )		32551	0					
ANR	32604	Callee	strlen		32551	0					
ANR	32605	Identifier	strlen		32551	0					
ANR	32606	ArgumentList	var -> name		32551	1					
ANR	32607	Argument	var -> name		32551	0					
ANR	32608	PtrMemberAccess	var -> name		32551	0					
ANR	32609	Identifier	var		32551	0					
ANR	32610	Identifier	name		32551	1					
ANR	32611	ReturnStatement	return var ;	3181:1:83311:83321	32551	2	True				
ANR	32612	Identifier	var		32551	0					
ANR	32613	ReturnType	struct cnfvar *		32551	1					
ANR	32614	Identifier	cnfvarNew		32551	2					
ANR	32615	ParameterList	char * name		32551	3					
ANR	32616	Parameter	char * name	3173:10:83106:83115	32551	0	True				
ANR	32617	ParameterType	char *		32551	0					
ANR	32618	Identifier	name		32551	1					
ANR	32619	CFGEntryNode	ENTRY		32551		True				
ANR	32620	CFGExitNode	EXIT		32551		True				
ANR	32621	Symbol	malloc		32551						
ANR	32622	Symbol	* var		32551						
ANR	32623	Symbol	strlen		32551						
ANR	32624	Symbol	NULL		32551						
ANR	32625	Symbol	var		32551						
ANR	32626	Symbol	var -> nodetype		32551						
ANR	32627	Symbol	name		32551						
ANR	32628	Symbol	var -> name		32551						
ANR	32629	Symbol	& var -> prop		32551						
ANR	32630	Function	cnfstmtNew	3184:0:83326:83560							
ANR	32631	FunctionDef	cnfstmtNew (unsigned s_type)		32630	0					
ANR	32632	CompoundStatement		3186:0:83371:83560	32630	0					
ANR	32633	IdentifierDeclStatement	struct cnfstmt * cnfstmt ;	3187:1:83374:83397	32630	0	True				
ANR	32634	IdentifierDecl	* cnfstmt		32630	0					
ANR	32635	IdentifierDeclType	struct cnfstmt *		32630	0					
ANR	32636	Identifier	cnfstmt		32630	1					
ANR	32637	IfStatement	if ( ( cnfstmt = malloc ( sizeof ( struct cnfstmt ) ) ) != NULL )		32630	1					
ANR	32638	Condition	( cnfstmt = malloc ( sizeof ( struct cnfstmt ) ) ) != NULL	3188:4:83403:83452	32630	0	True				
ANR	32639	EqualityExpression	( cnfstmt = malloc ( sizeof ( struct cnfstmt ) ) ) != NULL		32630	0		!=			
ANR	32640	AssignmentExpression	cnfstmt = malloc ( sizeof ( struct cnfstmt ) )		32630	0		=			
ANR	32641	Identifier	cnfstmt		32630	0					
ANR	32642	CallExpression	malloc ( sizeof ( struct cnfstmt ) )		32630	1					
ANR	32643	Callee	malloc		32630	0					
ANR	32644	Identifier	malloc		32630	0					
ANR	32645	ArgumentList	sizeof ( struct cnfstmt )		32630	1					
ANR	32646	Argument	sizeof ( struct cnfstmt )		32630	0					
ANR	32647	SizeofExpression	sizeof ( struct cnfstmt )		32630	0					
ANR	32648	Sizeof	sizeof		32630	0					
ANR	32649	SizeofOperand	struct cnfstmt		32630	1					
ANR	32650	Identifier	NULL		32630	1					
ANR	32651	CompoundStatement		3:56:83:83	32630	1					
ANR	32652	ExpressionStatement	cnfstmt -> nodetype = s_type	3189:2:83459:83485	32630	0	True				
ANR	32653	AssignmentExpression	cnfstmt -> nodetype = s_type		32630	0		=			
ANR	32654	PtrMemberAccess	cnfstmt -> nodetype		32630	0					
ANR	32655	Identifier	cnfstmt		32630	0					
ANR	32656	Identifier	nodetype		32630	1					
ANR	32657	Identifier	s_type		32630	1					
ANR	32658	ExpressionStatement	cnfstmt -> printable = NULL	3190:2:83489:83514	32630	1	True				
ANR	32659	AssignmentExpression	cnfstmt -> printable = NULL		32630	0		=			
ANR	32660	PtrMemberAccess	cnfstmt -> printable		32630	0					
ANR	32661	Identifier	cnfstmt		32630	0					
ANR	32662	Identifier	printable		32630	1					
ANR	32663	Identifier	NULL		32630	1					
ANR	32664	ExpressionStatement	cnfstmt -> next = NULL	3191:2:83518:83538	32630	2	True				
ANR	32665	AssignmentExpression	cnfstmt -> next = NULL		32630	0		=			
ANR	32666	PtrMemberAccess	cnfstmt -> next		32630	0					
ANR	32667	Identifier	cnfstmt		32630	0					
ANR	32668	Identifier	next		32630	1					
ANR	32669	Identifier	NULL		32630	1					
ANR	32670	ReturnStatement	return cnfstmt ;	3193:1:83544:83558	32630	2	True				
ANR	32671	Identifier	cnfstmt		32630	0					
ANR	32672	ReturnType	struct cnfstmt *		32630	1					
ANR	32673	Identifier	cnfstmtNew		32630	2					
ANR	32674	ParameterList	unsigned s_type		32630	3					
ANR	32675	Parameter	unsigned s_type	3185:11:83354:83368	32630	0	True				
ANR	32676	ParameterType	unsigned		32630	0					
ANR	32677	Identifier	s_type		32630	1					
ANR	32678	CFGEntryNode	ENTRY		32630		True				
ANR	32679	CFGExitNode	EXIT		32630		True				
ANR	32680	Symbol	cnfstmt -> printable		32630						
ANR	32681	Symbol	malloc		32630						
ANR	32682	Symbol	cnfstmt		32630						
ANR	32683	Symbol	NULL		32630						
ANR	32684	Symbol	cnfstmt -> next		32630						
ANR	32685	Symbol	s_type		32630						
ANR	32686	Symbol	* cnfstmt		32630						
ANR	32687	Symbol	cnfstmt -> nodetype		32630						
ANR	32688	Function	cnfstmtDisable	3203:0:83941:84023							
ANR	32689	FunctionDef	cnfstmtDisable (struct cnfstmt * cnfstmt)		32688	0					
ANR	32690	CompoundStatement		3205:0:83993:84023	32688	0					
ANR	32691	ExpressionStatement	cnfstmt -> nodetype = S_NOP	3206:1:83996:84021	32688	0	True				
ANR	32692	AssignmentExpression	cnfstmt -> nodetype = S_NOP		32688	0		=			
ANR	32693	PtrMemberAccess	cnfstmt -> nodetype		32688	0					
ANR	32694	Identifier	cnfstmt		32688	0					
ANR	32695	Identifier	nodetype		32688	1					
ANR	32696	Identifier	S_NOP		32688	1					
ANR	32697	ReturnType	static void		32688	1					
ANR	32698	Identifier	cnfstmtDisable		32688	2					
ANR	32699	ParameterList	struct cnfstmt * cnfstmt		32688	3					
ANR	32700	Parameter	struct cnfstmt * cnfstmt	3204:15:83968:83990	32688	0	True				
ANR	32701	ParameterType	struct cnfstmt *		32688	0					
ANR	32702	Identifier	cnfstmt		32688	1					
ANR	32703	CFGEntryNode	ENTRY		32688		True				
ANR	32704	CFGExitNode	EXIT		32688		True				
ANR	32705	Symbol	cnfstmt		32688						
ANR	32706	Symbol	* cnfstmt		32688						
ANR	32707	Symbol	cnfstmt -> nodetype		32688						
ANR	32708	Symbol	S_NOP		32688						
ANR	32709	DeclStmt									
ANR	32710	Decl							void	void ( struct cnfstmt * root )	cnfstmtDestructLst
ANR	32711	DeclStmt									
ANR	32712	Decl							void	void ( struct cnfitr * itr )	cnfIteratorDestruct
ANR	32713	Function	cnfstmtDestruct	3214:0:84155:85831							
ANR	32714	FunctionDef	cnfstmtDestruct (struct cnfstmt * stmt)		32713	0					
ANR	32715	CompoundStatement		3216:0:84205:85831	32713	0					
ANR	32716	SwitchStatement	switch ( stmt -> nodetype )		32713	0					
ANR	32717	Condition	stmt -> nodetype	3217:8:84215:84228	32713	0	True				
ANR	32718	PtrMemberAccess	stmt -> nodetype		32713	0					
ANR	32719	Identifier	stmt		32713	0					
ANR	32720	Identifier	nodetype		32713	1					
ANR	32721	CompoundStatement		2:24:25:25	32713	1					
ANR	32722	Label	case S_NOP :	3218:1:84234:84244	32713	0	True				
ANR	32723	Identifier	S_NOP		32713	0					
ANR	32724	Label	case S_STOP :	3219:1:84247:84258	32713	1	True				
ANR	32725	Identifier	S_STOP		32713	0					
ANR	32726	BreakStatement	break ;	3220:2:84262:84267	32713	2	True				
ANR	32727	Label	case S_CALL :	3221:1:84270:84281	32713	3	True				
ANR	32728	Identifier	S_CALL		32713	0					
ANR	32729	ExpressionStatement	es_deleteStr ( stmt -> d . s_call . name )	3222:2:84285:84318	32713	4	True				
ANR	32730	CallExpression	es_deleteStr ( stmt -> d . s_call . name )		32713	0					
ANR	32731	Callee	es_deleteStr		32713	0					
ANR	32732	Identifier	es_deleteStr		32713	0					
ANR	32733	ArgumentList	stmt -> d . s_call . name		32713	1					
ANR	32734	Argument	stmt -> d . s_call . name		32713	0					
ANR	32735	MemberAccess	stmt -> d . s_call . name		32713	0					
ANR	32736	MemberAccess	stmt -> d . s_call		32713	0					
ANR	32737	PtrMemberAccess	stmt -> d		32713	0					
ANR	32738	Identifier	stmt		32713	0					
ANR	32739	Identifier	d		32713	1					
ANR	32740	Identifier	s_call		32713	1					
ANR	32741	Identifier	name		32713	1					
ANR	32742	BreakStatement	break ;	3223:2:84322:84327	32713	5	True				
ANR	32743	Label	case S_CALL_INDIRECT :	3224:1:84330:84350	32713	6	True				
ANR	32744	Identifier	S_CALL_INDIRECT		32713	0					
ANR	32745	ExpressionStatement	cnfexprDestruct ( stmt -> d . s_call_ind . expr )	3225:2:84354:84394	32713	7	True				
ANR	32746	CallExpression	cnfexprDestruct ( stmt -> d . s_call_ind . expr )		32713	0					
ANR	32747	Callee	cnfexprDestruct		32713	0					
ANR	32748	Identifier	cnfexprDestruct		32713	0					
ANR	32749	ArgumentList	stmt -> d . s_call_ind . expr		32713	1					
ANR	32750	Argument	stmt -> d . s_call_ind . expr		32713	0					
ANR	32751	MemberAccess	stmt -> d . s_call_ind . expr		32713	0					
ANR	32752	MemberAccess	stmt -> d . s_call_ind		32713	0					
ANR	32753	PtrMemberAccess	stmt -> d		32713	0					
ANR	32754	Identifier	stmt		32713	0					
ANR	32755	Identifier	d		32713	1					
ANR	32756	Identifier	s_call_ind		32713	1					
ANR	32757	Identifier	expr		32713	1					
ANR	32758	BreakStatement	break ;	3226:2:84398:84403	32713	8	True				
ANR	32759	Label	case S_ACT :	3227:1:84406:84416	32713	9	True				
ANR	32760	Identifier	S_ACT		32713	0					
ANR	32761	ExpressionStatement	actionDestruct ( stmt -> d . act )	3228:2:84420:84447	32713	10	True				
ANR	32762	CallExpression	actionDestruct ( stmt -> d . act )		32713	0					
ANR	32763	Callee	actionDestruct		32713	0					
ANR	32764	Identifier	actionDestruct		32713	0					
ANR	32765	ArgumentList	stmt -> d . act		32713	1					
ANR	32766	Argument	stmt -> d . act		32713	0					
ANR	32767	MemberAccess	stmt -> d . act		32713	0					
ANR	32768	PtrMemberAccess	stmt -> d		32713	0					
ANR	32769	Identifier	stmt		32713	0					
ANR	32770	Identifier	d		32713	1					
ANR	32771	Identifier	act		32713	1					
ANR	32772	BreakStatement	break ;	3229:2:84451:84456	32713	11	True				
ANR	32773	Label	case S_IF :	3230:1:84459:84468	32713	12	True				
ANR	32774	Identifier	S_IF		32713	0					
ANR	32775	ExpressionStatement	cnfexprDestruct ( stmt -> d . s_if . expr )	3231:2:84472:84506	32713	13	True				
ANR	32776	CallExpression	cnfexprDestruct ( stmt -> d . s_if . expr )		32713	0					
ANR	32777	Callee	cnfexprDestruct		32713	0					
ANR	32778	Identifier	cnfexprDestruct		32713	0					
ANR	32779	ArgumentList	stmt -> d . s_if . expr		32713	1					
ANR	32780	Argument	stmt -> d . s_if . expr		32713	0					
ANR	32781	MemberAccess	stmt -> d . s_if . expr		32713	0					
ANR	32782	MemberAccess	stmt -> d . s_if		32713	0					
ANR	32783	PtrMemberAccess	stmt -> d		32713	0					
ANR	32784	Identifier	stmt		32713	0					
ANR	32785	Identifier	d		32713	1					
ANR	32786	Identifier	s_if		32713	1					
ANR	32787	Identifier	expr		32713	1					
ANR	32788	IfStatement	if ( stmt -> d . s_if . t_then != NULL )		32713	14					
ANR	32789	Condition	stmt -> d . s_if . t_then != NULL	3232:5:84513:84539	32713	0	True				
ANR	32790	EqualityExpression	stmt -> d . s_if . t_then != NULL		32713	0		!=			
ANR	32791	MemberAccess	stmt -> d . s_if . t_then		32713	0					
ANR	32792	MemberAccess	stmt -> d . s_if		32713	0					
ANR	32793	PtrMemberAccess	stmt -> d		32713	0					
ANR	32794	Identifier	stmt		32713	0					
ANR	32795	Identifier	d		32713	1					
ANR	32796	Identifier	s_if		32713	1					
ANR	32797	Identifier	t_then		32713	1					
ANR	32798	Identifier	NULL		32713	1					
ANR	32799	CompoundStatement		17:34:336:336	32713	1					
ANR	32800	ExpressionStatement	cnfstmtDestructLst ( stmt -> d . s_if . t_then )	3233:3:84547:84586	32713	0	True				
ANR	32801	CallExpression	cnfstmtDestructLst ( stmt -> d . s_if . t_then )		32713	0					
ANR	32802	Callee	cnfstmtDestructLst		32713	0					
ANR	32803	Identifier	cnfstmtDestructLst		32713	0					
ANR	32804	ArgumentList	stmt -> d . s_if . t_then		32713	1					
ANR	32805	Argument	stmt -> d . s_if . t_then		32713	0					
ANR	32806	MemberAccess	stmt -> d . s_if . t_then		32713	0					
ANR	32807	MemberAccess	stmt -> d . s_if		32713	0					
ANR	32808	PtrMemberAccess	stmt -> d		32713	0					
ANR	32809	Identifier	stmt		32713	0					
ANR	32810	Identifier	d		32713	1					
ANR	32811	Identifier	s_if		32713	1					
ANR	32812	Identifier	t_then		32713	1					
ANR	32813	IfStatement	if ( stmt -> d . s_if . t_else != NULL )		32713	15					
ANR	32814	Condition	stmt -> d . s_if . t_else != NULL	3235:5:84597:84623	32713	0	True				
ANR	32815	EqualityExpression	stmt -> d . s_if . t_else != NULL		32713	0		!=			
ANR	32816	MemberAccess	stmt -> d . s_if . t_else		32713	0					
ANR	32817	MemberAccess	stmt -> d . s_if		32713	0					
ANR	32818	PtrMemberAccess	stmt -> d		32713	0					
ANR	32819	Identifier	stmt		32713	0					
ANR	32820	Identifier	d		32713	1					
ANR	32821	Identifier	s_if		32713	1					
ANR	32822	Identifier	t_else		32713	1					
ANR	32823	Identifier	NULL		32713	1					
ANR	32824	CompoundStatement		20:34:420:420	32713	1					
ANR	32825	ExpressionStatement	cnfstmtDestructLst ( stmt -> d . s_if . t_else )	3236:3:84631:84670	32713	0	True				
ANR	32826	CallExpression	cnfstmtDestructLst ( stmt -> d . s_if . t_else )		32713	0					
ANR	32827	Callee	cnfstmtDestructLst		32713	0					
ANR	32828	Identifier	cnfstmtDestructLst		32713	0					
ANR	32829	ArgumentList	stmt -> d . s_if . t_else		32713	1					
ANR	32830	Argument	stmt -> d . s_if . t_else		32713	0					
ANR	32831	MemberAccess	stmt -> d . s_if . t_else		32713	0					
ANR	32832	MemberAccess	stmt -> d . s_if		32713	0					
ANR	32833	PtrMemberAccess	stmt -> d		32713	0					
ANR	32834	Identifier	stmt		32713	0					
ANR	32835	Identifier	d		32713	1					
ANR	32836	Identifier	s_if		32713	1					
ANR	32837	Identifier	t_else		32713	1					
ANR	32838	BreakStatement	break ;	3238:2:84678:84683	32713	16	True				
ANR	32839	Label	case S_FOREACH :	3239:1:84686:84700	32713	17	True				
ANR	32840	Identifier	S_FOREACH		32713	0					
ANR	32841	ExpressionStatement	cnfIteratorDestruct ( stmt -> d . s_foreach . iter )	3240:2:84704:84747	32713	18	True				
ANR	32842	CallExpression	cnfIteratorDestruct ( stmt -> d . s_foreach . iter )		32713	0					
ANR	32843	Callee	cnfIteratorDestruct		32713	0					
ANR	32844	Identifier	cnfIteratorDestruct		32713	0					
ANR	32845	ArgumentList	stmt -> d . s_foreach . iter		32713	1					
ANR	32846	Argument	stmt -> d . s_foreach . iter		32713	0					
ANR	32847	MemberAccess	stmt -> d . s_foreach . iter		32713	0					
ANR	32848	MemberAccess	stmt -> d . s_foreach		32713	0					
ANR	32849	PtrMemberAccess	stmt -> d		32713	0					
ANR	32850	Identifier	stmt		32713	0					
ANR	32851	Identifier	d		32713	1					
ANR	32852	Identifier	s_foreach		32713	1					
ANR	32853	Identifier	iter		32713	1					
ANR	32854	ExpressionStatement	cnfstmtDestructLst ( stmt -> d . s_foreach . body )	3241:2:84751:84793	32713	19	True				
ANR	32855	CallExpression	cnfstmtDestructLst ( stmt -> d . s_foreach . body )		32713	0					
ANR	32856	Callee	cnfstmtDestructLst		32713	0					
ANR	32857	Identifier	cnfstmtDestructLst		32713	0					
ANR	32858	ArgumentList	stmt -> d . s_foreach . body		32713	1					
ANR	32859	Argument	stmt -> d . s_foreach . body		32713	0					
ANR	32860	MemberAccess	stmt -> d . s_foreach . body		32713	0					
ANR	32861	MemberAccess	stmt -> d . s_foreach		32713	0					
ANR	32862	PtrMemberAccess	stmt -> d		32713	0					
ANR	32863	Identifier	stmt		32713	0					
ANR	32864	Identifier	d		32713	1					
ANR	32865	Identifier	s_foreach		32713	1					
ANR	32866	Identifier	body		32713	1					
ANR	32867	BreakStatement	break ;	3242:2:84797:84802	32713	20	True				
ANR	32868	Label	case S_SET :	3243:1:84805:84815	32713	21	True				
ANR	32869	Identifier	S_SET		32713	0					
ANR	32870	ExpressionStatement	free ( stmt -> d . s_set . varname )	3244:2:84819:84846	32713	22	True				
ANR	32871	CallExpression	free ( stmt -> d . s_set . varname )		32713	0					
ANR	32872	Callee	free		32713	0					
ANR	32873	Identifier	free		32713	0					
ANR	32874	ArgumentList	stmt -> d . s_set . varname		32713	1					
ANR	32875	Argument	stmt -> d . s_set . varname		32713	0					
ANR	32876	MemberAccess	stmt -> d . s_set . varname		32713	0					
ANR	32877	MemberAccess	stmt -> d . s_set		32713	0					
ANR	32878	PtrMemberAccess	stmt -> d		32713	0					
ANR	32879	Identifier	stmt		32713	0					
ANR	32880	Identifier	d		32713	1					
ANR	32881	Identifier	s_set		32713	1					
ANR	32882	Identifier	varname		32713	1					
ANR	32883	ExpressionStatement	cnfexprDestruct ( stmt -> d . s_set . expr )	3245:2:84850:84885	32713	23	True				
ANR	32884	CallExpression	cnfexprDestruct ( stmt -> d . s_set . expr )		32713	0					
ANR	32885	Callee	cnfexprDestruct		32713	0					
ANR	32886	Identifier	cnfexprDestruct		32713	0					
ANR	32887	ArgumentList	stmt -> d . s_set . expr		32713	1					
ANR	32888	Argument	stmt -> d . s_set . expr		32713	0					
ANR	32889	MemberAccess	stmt -> d . s_set . expr		32713	0					
ANR	32890	MemberAccess	stmt -> d . s_set		32713	0					
ANR	32891	PtrMemberAccess	stmt -> d		32713	0					
ANR	32892	Identifier	stmt		32713	0					
ANR	32893	Identifier	d		32713	1					
ANR	32894	Identifier	s_set		32713	1					
ANR	32895	Identifier	expr		32713	1					
ANR	32896	BreakStatement	break ;	3246:2:84889:84894	32713	24	True				
ANR	32897	Label	case S_UNSET :	3247:1:84897:84909	32713	25	True				
ANR	32898	Identifier	S_UNSET		32713	0					
ANR	32899	ExpressionStatement	free ( stmt -> d . s_set . varname )	3248:2:84913:84940	32713	26	True				
ANR	32900	CallExpression	free ( stmt -> d . s_set . varname )		32713	0					
ANR	32901	Callee	free		32713	0					
ANR	32902	Identifier	free		32713	0					
ANR	32903	ArgumentList	stmt -> d . s_set . varname		32713	1					
ANR	32904	Argument	stmt -> d . s_set . varname		32713	0					
ANR	32905	MemberAccess	stmt -> d . s_set . varname		32713	0					
ANR	32906	MemberAccess	stmt -> d . s_set		32713	0					
ANR	32907	PtrMemberAccess	stmt -> d		32713	0					
ANR	32908	Identifier	stmt		32713	0					
ANR	32909	Identifier	d		32713	1					
ANR	32910	Identifier	s_set		32713	1					
ANR	32911	Identifier	varname		32713	1					
ANR	32912	BreakStatement	break ;	3249:2:84944:84949	32713	27	True				
ANR	32913	Label	case S_PRIFILT :	3250:1:84952:84966	32713	28	True				
ANR	32914	Identifier	S_PRIFILT		32713	0					
ANR	32915	ExpressionStatement	cnfstmtDestructLst ( stmt -> d . s_prifilt . t_then )	3251:2:84970:85014	32713	29	True				
ANR	32916	CallExpression	cnfstmtDestructLst ( stmt -> d . s_prifilt . t_then )		32713	0					
ANR	32917	Callee	cnfstmtDestructLst		32713	0					
ANR	32918	Identifier	cnfstmtDestructLst		32713	0					
ANR	32919	ArgumentList	stmt -> d . s_prifilt . t_then		32713	1					
ANR	32920	Argument	stmt -> d . s_prifilt . t_then		32713	0					
ANR	32921	MemberAccess	stmt -> d . s_prifilt . t_then		32713	0					
ANR	32922	MemberAccess	stmt -> d . s_prifilt		32713	0					
ANR	32923	PtrMemberAccess	stmt -> d		32713	0					
ANR	32924	Identifier	stmt		32713	0					
ANR	32925	Identifier	d		32713	1					
ANR	32926	Identifier	s_prifilt		32713	1					
ANR	32927	Identifier	t_then		32713	1					
ANR	32928	ExpressionStatement	cnfstmtDestructLst ( stmt -> d . s_prifilt . t_else )	3252:2:85018:85062	32713	30	True				
ANR	32929	CallExpression	cnfstmtDestructLst ( stmt -> d . s_prifilt . t_else )		32713	0					
ANR	32930	Callee	cnfstmtDestructLst		32713	0					
ANR	32931	Identifier	cnfstmtDestructLst		32713	0					
ANR	32932	ArgumentList	stmt -> d . s_prifilt . t_else		32713	1					
ANR	32933	Argument	stmt -> d . s_prifilt . t_else		32713	0					
ANR	32934	MemberAccess	stmt -> d . s_prifilt . t_else		32713	0					
ANR	32935	MemberAccess	stmt -> d . s_prifilt		32713	0					
ANR	32936	PtrMemberAccess	stmt -> d		32713	0					
ANR	32937	Identifier	stmt		32713	0					
ANR	32938	Identifier	d		32713	1					
ANR	32939	Identifier	s_prifilt		32713	1					
ANR	32940	Identifier	t_else		32713	1					
ANR	32941	BreakStatement	break ;	3253:2:85066:85071	32713	31	True				
ANR	32942	Label	case S_PROPFILT :	3254:1:85074:85089	32713	32	True				
ANR	32943	Identifier	S_PROPFILT		32713	0					
ANR	32944	ExpressionStatement	msgPropDescrDestruct ( & stmt -> d . s_propfilt . prop )	3255:2:85093:85139	32713	33	True				
ANR	32945	CallExpression	msgPropDescrDestruct ( & stmt -> d . s_propfilt . prop )		32713	0					
ANR	32946	Callee	msgPropDescrDestruct		32713	0					
ANR	32947	Identifier	msgPropDescrDestruct		32713	0					
ANR	32948	ArgumentList	& stmt -> d . s_propfilt . prop		32713	1					
ANR	32949	Argument	& stmt -> d . s_propfilt . prop		32713	0					
ANR	32950	UnaryOperationExpression	& stmt -> d . s_propfilt . prop		32713	0					
ANR	32951	UnaryOperator	&		32713	0					
ANR	32952	MemberAccess	stmt -> d . s_propfilt . prop		32713	1					
ANR	32953	MemberAccess	stmt -> d . s_propfilt		32713	0					
ANR	32954	PtrMemberAccess	stmt -> d		32713	0					
ANR	32955	Identifier	stmt		32713	0					
ANR	32956	Identifier	d		32713	1					
ANR	32957	Identifier	s_propfilt		32713	1					
ANR	32958	Identifier	prop		32713	1					
ANR	32959	IfStatement	if ( stmt -> d . s_propfilt . regex_cache != NULL )		32713	34					
ANR	32960	Condition	stmt -> d . s_propfilt . regex_cache != NULL	3256:5:85146:85183	32713	0	True				
ANR	32961	EqualityExpression	stmt -> d . s_propfilt . regex_cache != NULL		32713	0		!=			
ANR	32962	MemberAccess	stmt -> d . s_propfilt . regex_cache		32713	0					
ANR	32963	MemberAccess	stmt -> d . s_propfilt		32713	0					
ANR	32964	PtrMemberAccess	stmt -> d		32713	0					
ANR	32965	Identifier	stmt		32713	0					
ANR	32966	Identifier	d		32713	1					
ANR	32967	Identifier	s_propfilt		32713	1					
ANR	32968	Identifier	regex_cache		32713	1					
ANR	32969	Identifier	NULL		32713	1					
ANR	32970	ExpressionStatement	rsCStrRegexDestruct ( & stmt -> d . s_propfilt . regex_cache )	3257:3:85189:85241	32713	1	True				
ANR	32971	CallExpression	rsCStrRegexDestruct ( & stmt -> d . s_propfilt . regex_cache )		32713	0					
ANR	32972	Callee	rsCStrRegexDestruct		32713	0					
ANR	32973	Identifier	rsCStrRegexDestruct		32713	0					
ANR	32974	ArgumentList	& stmt -> d . s_propfilt . regex_cache		32713	1					
ANR	32975	Argument	& stmt -> d . s_propfilt . regex_cache		32713	0					
ANR	32976	UnaryOperationExpression	& stmt -> d . s_propfilt . regex_cache		32713	0					
ANR	32977	UnaryOperator	&		32713	0					
ANR	32978	MemberAccess	stmt -> d . s_propfilt . regex_cache		32713	1					
ANR	32979	MemberAccess	stmt -> d . s_propfilt		32713	0					
ANR	32980	PtrMemberAccess	stmt -> d		32713	0					
ANR	32981	Identifier	stmt		32713	0					
ANR	32982	Identifier	d		32713	1					
ANR	32983	Identifier	s_propfilt		32713	1					
ANR	32984	Identifier	regex_cache		32713	1					
ANR	32985	IfStatement	if ( stmt -> d . s_propfilt . pCSCompValue != NULL )		32713	35					
ANR	32986	Condition	stmt -> d . s_propfilt . pCSCompValue != NULL	3258:5:85248:85286	32713	0	True				
ANR	32987	EqualityExpression	stmt -> d . s_propfilt . pCSCompValue != NULL		32713	0		!=			
ANR	32988	MemberAccess	stmt -> d . s_propfilt . pCSCompValue		32713	0					
ANR	32989	MemberAccess	stmt -> d . s_propfilt		32713	0					
ANR	32990	PtrMemberAccess	stmt -> d		32713	0					
ANR	32991	Identifier	stmt		32713	0					
ANR	32992	Identifier	d		32713	1					
ANR	32993	Identifier	s_propfilt		32713	1					
ANR	32994	Identifier	pCSCompValue		32713	1					
ANR	32995	Identifier	NULL		32713	1					
ANR	32996	ExpressionStatement	cstrDestruct ( & stmt -> d . s_propfilt . pCSCompValue )	3259:3:85292:85338	32713	1	True				
ANR	32997	CallExpression	cstrDestruct ( & stmt -> d . s_propfilt . pCSCompValue )		32713	0					
ANR	32998	Callee	cstrDestruct		32713	0					
ANR	32999	Identifier	cstrDestruct		32713	0					
ANR	33000	ArgumentList	& stmt -> d . s_propfilt . pCSCompValue		32713	1					
ANR	33001	Argument	& stmt -> d . s_propfilt . pCSCompValue		32713	0					
ANR	33002	UnaryOperationExpression	& stmt -> d . s_propfilt . pCSCompValue		32713	0					
ANR	33003	UnaryOperator	&		32713	0					
ANR	33004	MemberAccess	stmt -> d . s_propfilt . pCSCompValue		32713	1					
ANR	33005	MemberAccess	stmt -> d . s_propfilt		32713	0					
ANR	33006	PtrMemberAccess	stmt -> d		32713	0					
ANR	33007	Identifier	stmt		32713	0					
ANR	33008	Identifier	d		32713	1					
ANR	33009	Identifier	s_propfilt		32713	1					
ANR	33010	Identifier	pCSCompValue		32713	1					
ANR	33011	ExpressionStatement	cnfstmtDestructLst ( stmt -> d . s_propfilt . t_then )	3260:2:85342:85387	32713	36	True				
ANR	33012	CallExpression	cnfstmtDestructLst ( stmt -> d . s_propfilt . t_then )		32713	0					
ANR	33013	Callee	cnfstmtDestructLst		32713	0					
ANR	33014	Identifier	cnfstmtDestructLst		32713	0					
ANR	33015	ArgumentList	stmt -> d . s_propfilt . t_then		32713	1					
ANR	33016	Argument	stmt -> d . s_propfilt . t_then		32713	0					
ANR	33017	MemberAccess	stmt -> d . s_propfilt . t_then		32713	0					
ANR	33018	MemberAccess	stmt -> d . s_propfilt		32713	0					
ANR	33019	PtrMemberAccess	stmt -> d		32713	0					
ANR	33020	Identifier	stmt		32713	0					
ANR	33021	Identifier	d		32713	1					
ANR	33022	Identifier	s_propfilt		32713	1					
ANR	33023	Identifier	t_then		32713	1					
ANR	33024	BreakStatement	break ;	3261:2:85391:85396	32713	37	True				
ANR	33025	Label	case S_RELOAD_LOOKUP_TABLE :	3262:4:85402:85428	32713	38	True				
ANR	33026	Identifier	S_RELOAD_LOOKUP_TABLE		32713	0					
ANR	33027	IfStatement	if ( stmt -> d . s_reload_lookup_table . table_name != NULL )		32713	39					
ANR	33028	Condition	stmt -> d . s_reload_lookup_table . table_name != NULL	3263:12:85442:85489	32713	0	True				
ANR	33029	EqualityExpression	stmt -> d . s_reload_lookup_table . table_name != NULL		32713	0		!=			
ANR	33030	MemberAccess	stmt -> d . s_reload_lookup_table . table_name		32713	0					
ANR	33031	MemberAccess	stmt -> d . s_reload_lookup_table		32713	0					
ANR	33032	PtrMemberAccess	stmt -> d		32713	0					
ANR	33033	Identifier	stmt		32713	0					
ANR	33034	Identifier	d		32713	1					
ANR	33035	Identifier	s_reload_lookup_table		32713	1					
ANR	33036	Identifier	table_name		32713	1					
ANR	33037	Identifier	NULL		32713	1					
ANR	33038	CompoundStatement		48:62:1286:1286	32713	1					
ANR	33039	ExpressionStatement	free ( stmt -> d . s_reload_lookup_table . table_name )	3264:3:85497:85543	32713	0	True				
ANR	33040	CallExpression	free ( stmt -> d . s_reload_lookup_table . table_name )		32713	0					
ANR	33041	Callee	free		32713	0					
ANR	33042	Identifier	free		32713	0					
ANR	33043	ArgumentList	stmt -> d . s_reload_lookup_table . table_name		32713	1					
ANR	33044	Argument	stmt -> d . s_reload_lookup_table . table_name		32713	0					
ANR	33045	MemberAccess	stmt -> d . s_reload_lookup_table . table_name		32713	0					
ANR	33046	MemberAccess	stmt -> d . s_reload_lookup_table		32713	0					
ANR	33047	PtrMemberAccess	stmt -> d		32713	0					
ANR	33048	Identifier	stmt		32713	0					
ANR	33049	Identifier	d		32713	1					
ANR	33050	Identifier	s_reload_lookup_table		32713	1					
ANR	33051	Identifier	table_name		32713	1					
ANR	33052	IfStatement	if ( stmt -> d . s_reload_lookup_table . stub_value != NULL )		32713	40					
ANR	33053	Condition	stmt -> d . s_reload_lookup_table . stub_value != NULL	3266:12:85567:85614	32713	0	True				
ANR	33054	EqualityExpression	stmt -> d . s_reload_lookup_table . stub_value != NULL		32713	0		!=			
ANR	33055	MemberAccess	stmt -> d . s_reload_lookup_table . stub_value		32713	0					
ANR	33056	MemberAccess	stmt -> d . s_reload_lookup_table		32713	0					
ANR	33057	PtrMemberAccess	stmt -> d		32713	0					
ANR	33058	Identifier	stmt		32713	0					
ANR	33059	Identifier	d		32713	1					
ANR	33060	Identifier	s_reload_lookup_table		32713	1					
ANR	33061	Identifier	stub_value		32713	1					
ANR	33062	Identifier	NULL		32713	1					
ANR	33063	CompoundStatement		51:62:1411:1411	32713	1					
ANR	33064	ExpressionStatement	free ( stmt -> d . s_reload_lookup_table . stub_value )	3267:3:85622:85668	32713	0	True				
ANR	33065	CallExpression	free ( stmt -> d . s_reload_lookup_table . stub_value )		32713	0					
ANR	33066	Callee	free		32713	0					
ANR	33067	Identifier	free		32713	0					
ANR	33068	ArgumentList	stmt -> d . s_reload_lookup_table . stub_value		32713	1					
ANR	33069	Argument	stmt -> d . s_reload_lookup_table . stub_value		32713	0					
ANR	33070	MemberAccess	stmt -> d . s_reload_lookup_table . stub_value		32713	0					
ANR	33071	MemberAccess	stmt -> d . s_reload_lookup_table		32713	0					
ANR	33072	PtrMemberAccess	stmt -> d		32713	0					
ANR	33073	Identifier	stmt		32713	0					
ANR	33074	Identifier	d		32713	1					
ANR	33075	Identifier	s_reload_lookup_table		32713	1					
ANR	33076	Identifier	stub_value		32713	1					
ANR	33077	Label	default :	3269:1:85681:85688	32713	41	True				
ANR	33078	Identifier	default		32713	0					
ANR	33079	ExpressionStatement	"DBGPRINTF ( ""error: unknown stmt type during destruct %u\\n"" , ( unsigned ) stmt -> nodetype )"	3270:2:85692:85780	32713	42	True				
ANR	33080	CallExpression	"DBGPRINTF ( ""error: unknown stmt type during destruct %u\\n"" , ( unsigned ) stmt -> nodetype )"		32713	0					
ANR	33081	Callee	DBGPRINTF		32713	0					
ANR	33082	Identifier	DBGPRINTF		32713	0					
ANR	33083	ArgumentList	"""error: unknown stmt type during destruct %u\\n"""		32713	1					
ANR	33084	Argument	"""error: unknown stmt type during destruct %u\\n"""		32713	0					
ANR	33085	PrimaryExpression	"""error: unknown stmt type during destruct %u\\n"""		32713	0					
ANR	33086	Argument	( unsigned ) stmt -> nodetype		32713	1					
ANR	33087	CastExpression	( unsigned ) stmt -> nodetype		32713	0					
ANR	33088	CastTarget	unsigned		32713	0					
ANR	33089	PtrMemberAccess	stmt -> nodetype		32713	1					
ANR	33090	Identifier	stmt		32713	0					
ANR	33091	Identifier	nodetype		32713	1					
ANR	33092	BreakStatement	break ;	3272:2:85784:85789	32713	43	True				
ANR	33093	ExpressionStatement	free ( stmt -> printable )	3274:1:85795:85816	32713	1	True				
ANR	33094	CallExpression	free ( stmt -> printable )		32713	0					
ANR	33095	Callee	free		32713	0					
ANR	33096	Identifier	free		32713	0					
ANR	33097	ArgumentList	stmt -> printable		32713	1					
ANR	33098	Argument	stmt -> printable		32713	0					
ANR	33099	PtrMemberAccess	stmt -> printable		32713	0					
ANR	33100	Identifier	stmt		32713	0					
ANR	33101	Identifier	printable		32713	1					
ANR	33102	ExpressionStatement	free ( stmt )	3275:1:85819:85829	32713	2	True				
ANR	33103	CallExpression	free ( stmt )		32713	0					
ANR	33104	Callee	free		32713	0					
ANR	33105	Identifier	free		32713	0					
ANR	33106	ArgumentList	stmt		32713	1					
ANR	33107	Argument	stmt		32713	0					
ANR	33108	Identifier	stmt		32713	0					
ANR	33109	ReturnType	static void		32713	1					
ANR	33110	Identifier	cnfstmtDestruct		32713	2					
ANR	33111	ParameterList	struct cnfstmt * stmt		32713	3					
ANR	33112	Parameter	struct cnfstmt * stmt	3215:16:84183:84202	32713	0	True				
ANR	33113	ParameterType	struct cnfstmt *		32713	0					
ANR	33114	Identifier	stmt		32713	1					
ANR	33115	CFGEntryNode	ENTRY		32713		True				
ANR	33116	CFGExitNode	EXIT		32713		True				
ANR	33117	Symbol	stmt -> d . s_if . t_else		32713						
ANR	33118	Symbol	& stmt -> d . s_propfilt . prop		32713						
ANR	33119	Symbol	stmt -> d . s_call		32713						
ANR	33120	Symbol	& stmt -> d . s_propfilt . pCSCompValue		32713						
ANR	33121	Symbol	stmt -> d . s_set		32713						
ANR	33122	Symbol	stmt -> nodetype		32713						
ANR	33123	Symbol	stmt -> d . s_reload_lookup_table . table_name		32713						
ANR	33124	Symbol	stmt -> d . s_propfilt . pCSCompValue		32713						
ANR	33125	Symbol	stmt -> d . s_set . varname		32713						
ANR	33126	Symbol	stmt -> d . s_propfilt		32713						
ANR	33127	Symbol	stmt -> d . s_prifilt . t_then		32713						
ANR	33128	Symbol	stmt -> d . s_call_ind		32713						
ANR	33129	Symbol	& stmt -> d . s_propfilt . regex_cache		32713						
ANR	33130	Symbol	stmt -> printable		32713						
ANR	33131	Symbol	* stmt		32713						
ANR	33132	Symbol	stmt -> d		32713						
ANR	33133	Symbol	stmt -> d . s_propfilt . regex_cache		32713						
ANR	33134	Symbol	NULL		32713						
ANR	33135	Symbol	& stmt -> d . s_propfilt		32713						
ANR	33136	Symbol	stmt -> d . s_reload_lookup_table		32713						
ANR	33137	Symbol	& stmt -> d		32713						
ANR	33138	Symbol	stmt -> d . s_if . expr		32713						
ANR	33139	Symbol	stmt -> d . s_set . expr		32713						
ANR	33140	Symbol	stmt -> d . s_call_ind . expr		32713						
ANR	33141	Symbol	stmt -> d . s_propfilt . t_then		32713						
ANR	33142	Symbol	stmt -> d . s_prifilt . t_else		32713						
ANR	33143	Symbol	stmt -> d . s_reload_lookup_table . stub_value		32713						
ANR	33144	Symbol	stmt -> d . s_foreach . iter		32713						
ANR	33145	Symbol	stmt -> d . s_foreach . body		32713						
ANR	33146	Symbol	stmt -> d . s_foreach		32713						
ANR	33147	Symbol	stmt -> d . s_if		32713						
ANR	33148	Symbol	stmt -> d . s_call . name		32713						
ANR	33149	Symbol	stmt		32713						
ANR	33150	Symbol	stmt -> d . s_prifilt		32713						
ANR	33151	Symbol	stmt -> d . act		32713						
ANR	33152	Symbol	stmt -> d . s_if . t_then		32713						
ANR	33153	Function	cnfstmtDestructLst	3279:0:85882:86065							
ANR	33154	FunctionDef	cnfstmtDestructLst (struct cnfstmt * root)		33153	0					
ANR	33155	CompoundStatement		3281:0:85928:86065	33153	0					
ANR	33156	IdentifierDeclStatement	"struct cnfstmt * stmt , * todel ;"	3282:1:85931:85959	33153	0	True				
ANR	33157	IdentifierDecl	* stmt		33153	0					
ANR	33158	IdentifierDeclType	struct cnfstmt *		33153	0					
ANR	33159	Identifier	stmt		33153	1					
ANR	33160	IdentifierDecl	* todel		33153	1					
ANR	33161	IdentifierDeclType	struct cnfstmt *		33153	0					
ANR	33162	Identifier	todel		33153	1					
ANR	33163	ForStatement	for ( stmt = root ; stmt != NULL ; )		33153	1					
ANR	33164	ForInit	stmt = root ;	3283:5:85966:85978	33153	0	True				
ANR	33165	AssignmentExpression	stmt = root		33153	0		=			
ANR	33166	Identifier	stmt		33153	0					
ANR	33167	Identifier	root		33153	1					
ANR	33168	Condition	stmt != NULL	3283:19:85980:85991	33153	1	True				
ANR	33169	EqualityExpression	stmt != NULL		33153	0		!=			
ANR	33170	Identifier	stmt		33153	0					
ANR	33171	Identifier	NULL		33153	1					
ANR	33172	CompoundStatement		3:36:68:68	33153	2					
ANR	33173	ExpressionStatement	todel = stmt	3284:2:86001:86013	33153	0	True				
ANR	33174	AssignmentExpression	todel = stmt		33153	0		=			
ANR	33175	Identifier	todel		33153	0					
ANR	33176	Identifier	stmt		33153	1					
ANR	33177	ExpressionStatement	stmt = stmt -> next	3285:2:86017:86034	33153	1	True				
ANR	33178	AssignmentExpression	stmt = stmt -> next		33153	0		=			
ANR	33179	Identifier	stmt		33153	0					
ANR	33180	PtrMemberAccess	stmt -> next		33153	1					
ANR	33181	Identifier	stmt		33153	0					
ANR	33182	Identifier	next		33153	1					
ANR	33183	ExpressionStatement	cnfstmtDestruct ( todel )	3286:2:86038:86060	33153	2	True				
ANR	33184	CallExpression	cnfstmtDestruct ( todel )		33153	0					
ANR	33185	Callee	cnfstmtDestruct		33153	0					
ANR	33186	Identifier	cnfstmtDestruct		33153	0					
ANR	33187	ArgumentList	todel		33153	1					
ANR	33188	Argument	todel		33153	0					
ANR	33189	Identifier	todel		33153	0					
ANR	33190	ReturnType	void		33153	1					
ANR	33191	Identifier	cnfstmtDestructLst		33153	2					
ANR	33192	ParameterList	struct cnfstmt * root		33153	3					
ANR	33193	Parameter	struct cnfstmt * root	3280:19:85906:85925	33153	0	True				
ANR	33194	ParameterType	struct cnfstmt *		33153	0					
ANR	33195	Identifier	root		33153	1					
ANR	33196	CFGEntryNode	ENTRY		33153		True				
ANR	33197	CFGExitNode	EXIT		33153		True				
ANR	33198	Symbol	NULL		33153						
ANR	33199	Symbol	todel		33153						
ANR	33200	Symbol	root		33153						
ANR	33201	Symbol	* stmt		33153						
ANR	33202	Symbol	stmt -> next		33153						
ANR	33203	Symbol	stmt		33153						
ANR	33204	Function	cnfNewIterator	3290:0:86068:86281							
ANR	33205	FunctionDef	"cnfNewIterator (char * var , struct cnfexpr * collection)"		33204	0					
ANR	33206	CompoundStatement		3292:0:86138:86281	33204	0					
ANR	33207	IdentifierDeclStatement	struct cnfitr * itr ;	3293:1:86141:86159	33204	0	True				
ANR	33208	IdentifierDecl	* itr		33204	0					
ANR	33209	IdentifierDeclType	struct cnfitr *		33204	0					
ANR	33210	Identifier	itr		33204	1					
ANR	33211	IfStatement	if ( ( itr = malloc ( sizeof ( struct cnfitr ) ) ) != NULL )		33204	1					
ANR	33212	Condition	( itr = malloc ( sizeof ( struct cnfitr ) ) ) != NULL	3294:5:86166:86210	33204	0	True				
ANR	33213	EqualityExpression	( itr = malloc ( sizeof ( struct cnfitr ) ) ) != NULL		33204	0		!=			
ANR	33214	AssignmentExpression	itr = malloc ( sizeof ( struct cnfitr ) )		33204	0		=			
ANR	33215	Identifier	itr		33204	0					
ANR	33216	CallExpression	malloc ( sizeof ( struct cnfitr ) )		33204	1					
ANR	33217	Callee	malloc		33204	0					
ANR	33218	Identifier	malloc		33204	0					
ANR	33219	ArgumentList	sizeof ( struct cnfitr )		33204	1					
ANR	33220	Argument	sizeof ( struct cnfitr )		33204	0					
ANR	33221	SizeofExpression	sizeof ( struct cnfitr )		33204	0					
ANR	33222	Sizeof	sizeof		33204	0					
ANR	33223	SizeofOperand	struct cnfitr		33204	1					
ANR	33224	Identifier	NULL		33204	1					
ANR	33225	CompoundStatement		3:52:74:74	33204	1					
ANR	33226	ExpressionStatement	itr -> var = var	3295:2:86217:86231	33204	0	True				
ANR	33227	AssignmentExpression	itr -> var = var		33204	0		=			
ANR	33228	PtrMemberAccess	itr -> var		33204	0					
ANR	33229	Identifier	itr		33204	0					
ANR	33230	Identifier	var		33204	1					
ANR	33231	Identifier	var		33204	1					
ANR	33232	ExpressionStatement	itr -> collection = collection	3296:2:86235:86263	33204	1	True				
ANR	33233	AssignmentExpression	itr -> collection = collection		33204	0		=			
ANR	33234	PtrMemberAccess	itr -> collection		33204	0					
ANR	33235	Identifier	itr		33204	0					
ANR	33236	Identifier	collection		33204	1					
ANR	33237	Identifier	collection		33204	1					
ANR	33238	ReturnStatement	return itr ;	3298:1:86269:86279	33204	2	True				
ANR	33239	Identifier	itr		33204	0					
ANR	33240	ReturnType	struct cnfitr *		33204	1					
ANR	33241	Identifier	cnfNewIterator		33204	2					
ANR	33242	ParameterList	"char * var , struct cnfexpr * collection"		33204	3					
ANR	33243	Parameter	char * var	3291:15:86099:86107	33204	0	True				
ANR	33244	ParameterType	char *		33204	0					
ANR	33245	Identifier	var		33204	1					
ANR	33246	Parameter	struct cnfexpr * collection	3291:26:86110:86135	33204	1	True				
ANR	33247	ParameterType	struct cnfexpr *		33204	0					
ANR	33248	Identifier	collection		33204	1					
ANR	33249	CFGEntryNode	ENTRY		33204		True				
ANR	33250	CFGExitNode	EXIT		33204		True				
ANR	33251	Symbol	malloc		33204						
ANR	33252	Symbol	itr -> var		33204						
ANR	33253	Symbol	NULL		33204						
ANR	33254	Symbol	var		33204						
ANR	33255	Symbol	itr		33204						
ANR	33256	Symbol	itr -> collection		33204						
ANR	33257	Symbol	collection		33204						
ANR	33258	Symbol	* itr		33204						
ANR	33259	Function	cnfIteratorDestruct	3301:0:86284:86432							
ANR	33260	FunctionDef	cnfIteratorDestruct (struct cnfitr * itr)		33259	0					
ANR	33261	CompoundStatement		3303:0:86336:86432	33259	0					
ANR	33262	ExpressionStatement	free ( itr -> var )	3304:1:86339:86353	33259	0	True				
ANR	33263	CallExpression	free ( itr -> var )		33259	0					
ANR	33264	Callee	free		33259	0					
ANR	33265	Identifier	free		33259	0					
ANR	33266	ArgumentList	itr -> var		33259	1					
ANR	33267	Argument	itr -> var		33259	0					
ANR	33268	PtrMemberAccess	itr -> var		33259	0					
ANR	33269	Identifier	itr		33259	0					
ANR	33270	Identifier	var		33259	1					
ANR	33271	IfStatement	if ( itr -> collection != NULL )		33259	1					
ANR	33272	Condition	itr -> collection != NULL	3305:4:86359:86381	33259	0	True				
ANR	33273	EqualityExpression	itr -> collection != NULL		33259	0		!=			
ANR	33274	PtrMemberAccess	itr -> collection		33259	0					
ANR	33275	Identifier	itr		33259	0					
ANR	33276	Identifier	collection		33259	1					
ANR	33277	Identifier	NULL		33259	1					
ANR	33278	ExpressionStatement	cnfexprDestruct ( itr -> collection )	3306:2:86386:86418	33259	1	True				
ANR	33279	CallExpression	cnfexprDestruct ( itr -> collection )		33259	0					
ANR	33280	Callee	cnfexprDestruct		33259	0					
ANR	33281	Identifier	cnfexprDestruct		33259	0					
ANR	33282	ArgumentList	itr -> collection		33259	1					
ANR	33283	Argument	itr -> collection		33259	0					
ANR	33284	PtrMemberAccess	itr -> collection		33259	0					
ANR	33285	Identifier	itr		33259	0					
ANR	33286	Identifier	collection		33259	1					
ANR	33287	ExpressionStatement	free ( itr )	3307:1:86421:86430	33259	2	True				
ANR	33288	CallExpression	free ( itr )		33259	0					
ANR	33289	Callee	free		33259	0					
ANR	33290	Identifier	free		33259	0					
ANR	33291	ArgumentList	itr		33259	1					
ANR	33292	Argument	itr		33259	0					
ANR	33293	Identifier	itr		33259	0					
ANR	33294	ReturnType	static void		33259	1					
ANR	33295	Identifier	cnfIteratorDestruct		33259	2					
ANR	33296	ParameterList	struct cnfitr * itr		33259	3					
ANR	33297	Parameter	struct cnfitr * itr	3302:20:86316:86333	33259	0	True				
ANR	33298	ParameterType	struct cnfitr *		33259	0					
ANR	33299	Identifier	itr		33259	1					
ANR	33300	CFGEntryNode	ENTRY		33259		True				
ANR	33301	CFGExitNode	EXIT		33259		True				
ANR	33302	Symbol	itr -> var		33259						
ANR	33303	Symbol	NULL		33259						
ANR	33304	Symbol	itr		33259						
ANR	33305	Symbol	itr -> collection		33259						
ANR	33306	Symbol	* itr		33259						
ANR	33307	Function	cnfstmtNewSet	3310:0:86435:87044							
ANR	33308	FunctionDef	"cnfstmtNewSet (char * var , struct cnfexpr * expr , int force_reset)"		33307	0					
ANR	33309	CompoundStatement		3312:0:86516:87044	33307	0					
ANR	33310	IdentifierDeclStatement	propid_t propid ;	3313:1:86519:86534	33307	0	True				
ANR	33311	IdentifierDecl	propid		33307	0					
ANR	33312	IdentifierDeclType	propid_t		33307	0					
ANR	33313	Identifier	propid		33307	1					
ANR	33314	IdentifierDeclStatement	struct cnfstmt * cnfstmt ;	3314:1:86537:86560	33307	1	True				
ANR	33315	IdentifierDecl	* cnfstmt		33307	0					
ANR	33316	IdentifierDeclType	struct cnfstmt *		33307	0					
ANR	33317	Identifier	cnfstmt		33307	1					
ANR	33318	IfStatement	if ( ( cnfstmt = cnfstmtNew ( S_SET ) ) != NULL )		33307	2					
ANR	33319	Condition	( cnfstmt = cnfstmtNew ( S_SET ) ) != NULL	3315:4:86566:86602	33307	0	True				
ANR	33320	EqualityExpression	( cnfstmt = cnfstmtNew ( S_SET ) ) != NULL		33307	0		!=			
ANR	33321	AssignmentExpression	cnfstmt = cnfstmtNew ( S_SET )		33307	0		=			
ANR	33322	Identifier	cnfstmt		33307	0					
ANR	33323	CallExpression	cnfstmtNew ( S_SET )		33307	1					
ANR	33324	Callee	cnfstmtNew		33307	0					
ANR	33325	Identifier	cnfstmtNew		33307	0					
ANR	33326	ArgumentList	S_SET		33307	1					
ANR	33327	Argument	S_SET		33307	0					
ANR	33328	Identifier	S_SET		33307	0					
ANR	33329	Identifier	NULL		33307	1					
ANR	33330	CompoundStatement		4:43:88:88	33307	1					
ANR	33331	IfStatement	"if ( propNameToID ( ( uchar * ) var , & propid ) == RS_RET_OK && ( propid == PROP_CEE || propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR ) )"		33307	0					
ANR	33332	Condition	"propNameToID ( ( uchar * ) var , & propid ) == RS_RET_OK && ( propid == PROP_CEE || propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR )"	3316:5:86612:86766	33307	0	True				
ANR	33333	AndExpression	"propNameToID ( ( uchar * ) var , & propid ) == RS_RET_OK && ( propid == PROP_CEE || propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR )"		33307	0		&&			
ANR	33334	EqualityExpression	"propNameToID ( ( uchar * ) var , & propid ) == RS_RET_OK"		33307	0		==			
ANR	33335	CallExpression	"propNameToID ( ( uchar * ) var , & propid )"		33307	0					
ANR	33336	Callee	propNameToID		33307	0					
ANR	33337	Identifier	propNameToID		33307	0					
ANR	33338	ArgumentList	( uchar * ) var		33307	1					
ANR	33339	Argument	( uchar * ) var		33307	0					
ANR	33340	CastExpression	( uchar * ) var		33307	0					
ANR	33341	CastTarget	uchar *		33307	0					
ANR	33342	Identifier	var		33307	1					
ANR	33343	Argument	& propid		33307	1					
ANR	33344	UnaryOperationExpression	& propid		33307	0					
ANR	33345	UnaryOperator	&		33307	0					
ANR	33346	Identifier	propid		33307	1					
ANR	33347	Identifier	RS_RET_OK		33307	1					
ANR	33348	OrExpression	propid == PROP_CEE || propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR		33307	1		||			
ANR	33349	EqualityExpression	propid == PROP_CEE		33307	0		==			
ANR	33350	Identifier	propid		33307	0					
ANR	33351	Identifier	PROP_CEE		33307	1					
ANR	33352	OrExpression	propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR		33307	1		||			
ANR	33353	EqualityExpression	propid == PROP_LOCAL_VAR		33307	0		==			
ANR	33354	Identifier	propid		33307	0					
ANR	33355	Identifier	PROP_LOCAL_VAR		33307	1					
ANR	33356	EqualityExpression	propid == PROP_GLOBAL_VAR		33307	1		==			
ANR	33357	Identifier	propid		33307	0					
ANR	33358	Identifier	PROP_GLOBAL_VAR		33307	1					
ANR	33359	CompoundStatement		9:7:258:258	33307	1					
ANR	33360	ExpressionStatement	cnfstmt -> d . s_set . varname = ( uchar * ) var	3321:3:86780:86819	33307	0	True				
ANR	33361	AssignmentExpression	cnfstmt -> d . s_set . varname = ( uchar * ) var		33307	0		=			
ANR	33362	MemberAccess	cnfstmt -> d . s_set . varname		33307	0					
ANR	33363	MemberAccess	cnfstmt -> d . s_set		33307	0					
ANR	33364	PtrMemberAccess	cnfstmt -> d		33307	0					
ANR	33365	Identifier	cnfstmt		33307	0					
ANR	33366	Identifier	d		33307	1					
ANR	33367	Identifier	s_set		33307	1					
ANR	33368	Identifier	varname		33307	1					
ANR	33369	CastExpression	( uchar * ) var		33307	1					
ANR	33370	CastTarget	uchar *		33307	0					
ANR	33371	Identifier	var		33307	1					
ANR	33372	ExpressionStatement	cnfstmt -> d . s_set . expr = expr	3322:3:86824:86852	33307	1	True				
ANR	33373	AssignmentExpression	cnfstmt -> d . s_set . expr = expr		33307	0		=			
ANR	33374	MemberAccess	cnfstmt -> d . s_set . expr		33307	0					
ANR	33375	MemberAccess	cnfstmt -> d . s_set		33307	0					
ANR	33376	PtrMemberAccess	cnfstmt -> d		33307	0					
ANR	33377	Identifier	cnfstmt		33307	0					
ANR	33378	Identifier	d		33307	1					
ANR	33379	Identifier	s_set		33307	1					
ANR	33380	Identifier	expr		33307	1					
ANR	33381	Identifier	expr		33307	1					
ANR	33382	ExpressionStatement	cnfstmt -> d . s_set . force_reset = force_reset	3323:3:86857:86899	33307	2	True				
ANR	33383	AssignmentExpression	cnfstmt -> d . s_set . force_reset = force_reset		33307	0		=			
ANR	33384	MemberAccess	cnfstmt -> d . s_set . force_reset		33307	0					
ANR	33385	MemberAccess	cnfstmt -> d . s_set		33307	0					
ANR	33386	PtrMemberAccess	cnfstmt -> d		33307	0					
ANR	33387	Identifier	cnfstmt		33307	0					
ANR	33388	Identifier	d		33307	1					
ANR	33389	Identifier	s_set		33307	1					
ANR	33390	Identifier	force_reset		33307	1					
ANR	33391	Identifier	force_reset		33307	1					
ANR	33392	ElseStatement	else		33307	0					
ANR	33393	CompoundStatement		13:9:393:393	33307	0					
ANR	33394	ExpressionStatement	"parser_errmsg ( ""invalid variable '%s' in set statement."" , var )"	3325:3:86915:86976	33307	0	True				
ANR	33395	CallExpression	"parser_errmsg ( ""invalid variable '%s' in set statement."" , var )"		33307	0					
ANR	33396	Callee	parser_errmsg		33307	0					
ANR	33397	Identifier	parser_errmsg		33307	0					
ANR	33398	ArgumentList	"""invalid variable '%s' in set statement."""		33307	1					
ANR	33399	Argument	"""invalid variable '%s' in set statement."""		33307	0					
ANR	33400	PrimaryExpression	"""invalid variable '%s' in set statement."""		33307	0					
ANR	33401	Argument	var		33307	1					
ANR	33402	Identifier	var		33307	0					
ANR	33403	ExpressionStatement	free ( var )	3326:3:86981:86990	33307	1	True				
ANR	33404	CallExpression	free ( var )		33307	0					
ANR	33405	Callee	free		33307	0					
ANR	33406	Identifier	free		33307	0					
ANR	33407	ArgumentList	var		33307	1					
ANR	33408	Argument	var		33307	0					
ANR	33409	Identifier	var		33307	0					
ANR	33410	ExpressionStatement	cnfstmtDisable ( cnfstmt )	3327:3:86995:87018	33307	2	True				
ANR	33411	CallExpression	cnfstmtDisable ( cnfstmt )		33307	0					
ANR	33412	Callee	cnfstmtDisable		33307	0					
ANR	33413	Identifier	cnfstmtDisable		33307	0					
ANR	33414	ArgumentList	cnfstmt		33307	1					
ANR	33415	Argument	cnfstmt		33307	0					
ANR	33416	Identifier	cnfstmt		33307	0					
ANR	33417	ReturnStatement	return cnfstmt ;	3330:1:87028:87042	33307	3	True				
ANR	33418	Identifier	cnfstmt		33307	0					
ANR	33419	ReturnType	struct cnfstmt *		33307	1					
ANR	33420	Identifier	cnfstmtNewSet		33307	2					
ANR	33421	ParameterList	"char * var , struct cnfexpr * expr , int force_reset"		33307	3					
ANR	33422	Parameter	char * var	3311:14:86466:86474	33307	0	True				
ANR	33423	ParameterType	char *		33307	0					
ANR	33424	Identifier	var		33307	1					
ANR	33425	Parameter	struct cnfexpr * expr	3311:25:86477:86496	33307	1	True				
ANR	33426	ParameterType	struct cnfexpr *		33307	0					
ANR	33427	Identifier	expr		33307	1					
ANR	33428	Parameter	int force_reset	3311:47:86499:86513	33307	2	True				
ANR	33429	ParameterType	int		33307	0					
ANR	33430	Identifier	force_reset		33307	1					
ANR	33431	CFGEntryNode	ENTRY		33307		True				
ANR	33432	CFGExitNode	EXIT		33307		True				
ANR	33433	Symbol	cnfstmt -> d		33307						
ANR	33434	Symbol	NULL		33307						
ANR	33435	Symbol	cnfstmt -> d . s_set . expr		33307						
ANR	33436	Symbol	var		33307						
ANR	33437	Symbol	cnfstmtNew		33307						
ANR	33438	Symbol	RS_RET_OK		33307						
ANR	33439	Symbol	propid		33307						
ANR	33440	Symbol	S_SET		33307						
ANR	33441	Symbol	propNameToID		33307						
ANR	33442	Symbol	PROP_LOCAL_VAR		33307						
ANR	33443	Symbol	cnfstmt -> d . s_set		33307						
ANR	33444	Symbol	cnfstmt		33307						
ANR	33445	Symbol	cnfstmt -> d . s_set . varname		33307						
ANR	33446	Symbol	& propid		33307						
ANR	33447	Symbol	force_reset		33307						
ANR	33448	Symbol	PROP_CEE		33307						
ANR	33449	Symbol	expr		33307						
ANR	33450	Symbol	* cnfstmt		33307						
ANR	33451	Symbol	PROP_GLOBAL_VAR		33307						
ANR	33452	Symbol	cnfstmt -> d . s_set . force_reset		33307						
ANR	33453	Function	cnfstmtNewCall	3333:0:87047:87222							
ANR	33454	FunctionDef	cnfstmtNewCall (es_str_t * name)		33453	0					
ANR	33455	CompoundStatement		3335:0:87095:87222	33453	0					
ANR	33456	IdentifierDeclStatement	struct cnfstmt * cnfstmt ;	3336:1:87098:87121	33453	0	True				
ANR	33457	IdentifierDecl	* cnfstmt		33453	0					
ANR	33458	IdentifierDeclType	struct cnfstmt *		33453	0					
ANR	33459	Identifier	cnfstmt		33453	1					
ANR	33460	IfStatement	if ( ( cnfstmt = cnfstmtNew ( S_CALL ) ) != NULL )		33453	1					
ANR	33461	Condition	( cnfstmt = cnfstmtNew ( S_CALL ) ) != NULL	3337:4:87127:87164	33453	0	True				
ANR	33462	EqualityExpression	( cnfstmt = cnfstmtNew ( S_CALL ) ) != NULL		33453	0		!=			
ANR	33463	AssignmentExpression	cnfstmt = cnfstmtNew ( S_CALL )		33453	0		=			
ANR	33464	Identifier	cnfstmt		33453	0					
ANR	33465	CallExpression	cnfstmtNew ( S_CALL )		33453	1					
ANR	33466	Callee	cnfstmtNew		33453	0					
ANR	33467	Identifier	cnfstmtNew		33453	0					
ANR	33468	ArgumentList	S_CALL		33453	1					
ANR	33469	Argument	S_CALL		33453	0					
ANR	33470	Identifier	S_CALL		33453	0					
ANR	33471	Identifier	NULL		33453	1					
ANR	33472	CompoundStatement		3:44:71:71	33453	1					
ANR	33473	ExpressionStatement	cnfstmt -> d . s_call . name = name	3338:2:87171:87200	33453	0	True				
ANR	33474	AssignmentExpression	cnfstmt -> d . s_call . name = name		33453	0		=			
ANR	33475	MemberAccess	cnfstmt -> d . s_call . name		33453	0					
ANR	33476	MemberAccess	cnfstmt -> d . s_call		33453	0					
ANR	33477	PtrMemberAccess	cnfstmt -> d		33453	0					
ANR	33478	Identifier	cnfstmt		33453	0					
ANR	33479	Identifier	d		33453	1					
ANR	33480	Identifier	s_call		33453	1					
ANR	33481	Identifier	name		33453	1					
ANR	33482	Identifier	name		33453	1					
ANR	33483	ReturnStatement	return cnfstmt ;	3340:1:87206:87220	33453	2	True				
ANR	33484	Identifier	cnfstmt		33453	0					
ANR	33485	ReturnType	struct cnfstmt *		33453	1					
ANR	33486	Identifier	cnfstmtNewCall		33453	2					
ANR	33487	ParameterList	es_str_t * name		33453	3					
ANR	33488	Parameter	es_str_t * name	3334:15:87079:87092	33453	0	True				
ANR	33489	ParameterType	es_str_t *		33453	0					
ANR	33490	Identifier	name		33453	1					
ANR	33491	CFGEntryNode	ENTRY		33453		True				
ANR	33492	CFGExitNode	EXIT		33453		True				
ANR	33493	Symbol	cnfstmt -> d		33453						
ANR	33494	Symbol	cnfstmt		33453						
ANR	33495	Symbol	NULL		33453						
ANR	33496	Symbol	cnfstmt -> d . s_call . name		33453						
ANR	33497	Symbol	S_CALL		33453						
ANR	33498	Symbol	cnfstmtNew		33453						
ANR	33499	Symbol	cnfstmt -> d . s_call		33453						
ANR	33500	Symbol	name		33453						
ANR	33501	Symbol	* cnfstmt		33453						
ANR	33502	Function	cnfstmtNewReloadLookupTable	3343:0:87225:89468							
ANR	33503	FunctionDef	cnfstmtNewReloadLookupTable (struct cnffparamlst * fparams)		33502	0					
ANR	33504	CompoundStatement		3345:0:87300:89468	33502	0					
ANR	33505	IdentifierDeclStatement	int nParams ;	3346:1:87303:87314	33502	0	True				
ANR	33506	IdentifierDecl	nParams		33502	0					
ANR	33507	IdentifierDeclType	int		33502	0					
ANR	33508	Identifier	nParams		33502	1					
ANR	33509	IdentifierDeclStatement	"struct cnffparamlst * param , * nxt ;"	3347:1:87317:87349	33502	1	True				
ANR	33510	IdentifierDecl	* param		33502	0					
ANR	33511	IdentifierDeclType	struct cnffparamlst *		33502	0					
ANR	33512	Identifier	param		33502	1					
ANR	33513	IdentifierDecl	* nxt		33502	1					
ANR	33514	IdentifierDeclType	struct cnffparamlst *		33502	0					
ANR	33515	Identifier	nxt		33502	1					
ANR	33516	IdentifierDeclStatement	struct cnfstmt * cnfstmt ;	3348:1:87352:87375	33502	2	True				
ANR	33517	IdentifierDecl	* cnfstmt		33502	0					
ANR	33518	IdentifierDeclType	struct cnfstmt *		33502	0					
ANR	33519	Identifier	cnfstmt		33502	1					
ANR	33520	IdentifierDeclStatement	uint8_t failed = 0 ;	3349:1:87378:87396	33502	3	True				
ANR	33521	IdentifierDecl	failed = 0		33502	0					
ANR	33522	IdentifierDeclType	uint8_t		33502	0					
ANR	33523	Identifier	failed		33502	1					
ANR	33524	AssignmentExpression	failed = 0		33502	2		=			
ANR	33525	Identifier	failed		33502	0					
ANR	33526	PrimaryExpression	0		33502	1					
ANR	33527	IfStatement	if ( ( cnfstmt = cnfstmtNew ( S_RELOAD_LOOKUP_TABLE ) ) != NULL )		33502	4					
ANR	33528	Condition	( cnfstmt = cnfstmtNew ( S_RELOAD_LOOKUP_TABLE ) ) != NULL	3350:4:87402:87454	33502	0	True				
ANR	33529	EqualityExpression	( cnfstmt = cnfstmtNew ( S_RELOAD_LOOKUP_TABLE ) ) != NULL		33502	0		!=			
ANR	33530	AssignmentExpression	cnfstmt = cnfstmtNew ( S_RELOAD_LOOKUP_TABLE )		33502	0		=			
ANR	33531	Identifier	cnfstmt		33502	0					
ANR	33532	CallExpression	cnfstmtNew ( S_RELOAD_LOOKUP_TABLE )		33502	1					
ANR	33533	Callee	cnfstmtNew		33502	0					
ANR	33534	Identifier	cnfstmtNew		33502	0					
ANR	33535	ArgumentList	S_RELOAD_LOOKUP_TABLE		33502	1					
ANR	33536	Argument	S_RELOAD_LOOKUP_TABLE		33502	0					
ANR	33537	Identifier	S_RELOAD_LOOKUP_TABLE		33502	0					
ANR	33538	Identifier	NULL		33502	1					
ANR	33539	CompoundStatement		6:59:156:156	33502	1					
ANR	33540	ExpressionStatement	nParams = 0	3351:2:87461:87472	33502	0	True				
ANR	33541	AssignmentExpression	nParams = 0		33502	0		=			
ANR	33542	Identifier	nParams		33502	0					
ANR	33543	PrimaryExpression	0		33502	1					
ANR	33544	ForStatement	for ( param = fparams ; param != NULL ; param = param -> next )		33502	1					
ANR	33545	ForInit	param = fparams ;	3352:6:87480:87496	33502	0	True				
ANR	33546	AssignmentExpression	param = fparams		33502	0		=			
ANR	33547	Identifier	param		33502	0					
ANR	33548	Identifier	fparams		33502	1					
ANR	33549	Condition	param != NULL	3352:24:87498:87510	33502	1	True				
ANR	33550	EqualityExpression	param != NULL		33502	0		!=			
ANR	33551	Identifier	param		33502	0					
ANR	33552	Identifier	NULL		33502	1					
ANR	33553	AssignmentExpression	param = param -> next	3352:40:87514:87532	33502	2	True	=			
ANR	33554	Identifier	param		33502	0					
ANR	33555	PtrMemberAccess	param -> next		33502	1					
ANR	33556	Identifier	param		33502	0					
ANR	33557	Identifier	next		33502	1					
ANR	33558	CompoundStatement		8:61:234:234	33502	3					
ANR	33559	ExpressionStatement	++ nParams	3353:3:87540:87549	33502	0	True				
ANR	33560	UnaryExpression	++ nParams		33502	0					
ANR	33561	IncDec	++		33502	0					
ANR	33562	Identifier	nParams		33502	1					
ANR	33563	ExpressionStatement	cnfstmt -> d . s_reload_lookup_table . table_name = cnfstmt -> d . s_reload_lookup_table . stub_value = NULL	3355:2:87557:87653	33502	2	True				
ANR	33564	AssignmentExpression	cnfstmt -> d . s_reload_lookup_table . table_name = cnfstmt -> d . s_reload_lookup_table . stub_value = NULL		33502	0		=			
ANR	33565	MemberAccess	cnfstmt -> d . s_reload_lookup_table . table_name		33502	0					
ANR	33566	MemberAccess	cnfstmt -> d . s_reload_lookup_table		33502	0					
ANR	33567	PtrMemberAccess	cnfstmt -> d		33502	0					
ANR	33568	Identifier	cnfstmt		33502	0					
ANR	33569	Identifier	d		33502	1					
ANR	33570	Identifier	s_reload_lookup_table		33502	1					
ANR	33571	Identifier	table_name		33502	1					
ANR	33572	AssignmentExpression	cnfstmt -> d . s_reload_lookup_table . stub_value = NULL		33502	1		=			
ANR	33573	MemberAccess	cnfstmt -> d . s_reload_lookup_table . stub_value		33502	0					
ANR	33574	MemberAccess	cnfstmt -> d . s_reload_lookup_table		33502	0					
ANR	33575	PtrMemberAccess	cnfstmt -> d		33502	0					
ANR	33576	Identifier	cnfstmt		33502	0					
ANR	33577	Identifier	d		33502	1					
ANR	33578	Identifier	s_reload_lookup_table		33502	1					
ANR	33579	Identifier	stub_value		33502	1					
ANR	33580	Identifier	NULL		33502	1					
ANR	33581	SwitchStatement	switch ( nParams )		33502	3					
ANR	33582	Condition	nParams	3356:9:87664:87670	33502	0	True				
ANR	33583	Identifier	nParams		33502	0					
ANR	33584	CompoundStatement		12:18:372:372	33502	1					
ANR	33585	Label	case 2 :	3357:2:87677:87683	33502	0	True				
ANR	33586	ExpressionStatement	param = fparams -> next	3358:3:87688:87709	33502	1	True				
ANR	33587	AssignmentExpression	param = fparams -> next		33502	0		=			
ANR	33588	Identifier	param		33502	0					
ANR	33589	PtrMemberAccess	fparams -> next		33502	1					
ANR	33590	Identifier	fparams		33502	0					
ANR	33591	Identifier	next		33502	1					
ANR	33592	IfStatement	if ( param -> expr -> nodetype != 'S' )		33502	2					
ANR	33593	Condition	param -> expr -> nodetype != 'S'	3359:7:87718:87745	33502	0	True				
ANR	33594	EqualityExpression	param -> expr -> nodetype != 'S'		33502	0		!=			
ANR	33595	PtrMemberAccess	param -> expr -> nodetype		33502	0					
ANR	33596	PtrMemberAccess	param -> expr		33502	0					
ANR	33597	Identifier	param		33502	0					
ANR	33598	Identifier	expr		33502	1					
ANR	33599	Identifier	nodetype		33502	1					
ANR	33600	PrimaryExpression	'S'		33502	1					
ANR	33601	CompoundStatement		15:37:447:447	33502	1					
ANR	33602	Statement	parser_errmsg	3360:4:87754:87766	33502	0	True				
ANR	33603	Statement	(	3360:17:87767:87767	33502	1	True				
ANR	33604	Statement	"""statement ignored: reload_lookup_table(table_name, optional:stub_value_in_case_reload_fails) """	3360:18:87768:87862	33502	2	True				
ANR	33605	Statement	"""expects a litteral string for second argument\\n"""	3361:9:87873:87921	33502	3	True				
ANR	33606	Statement	)	3361:58:87922:87922	33502	4	True				
ANR	33607	ExpressionStatement		3361:59:87923:87923	33502	5	True				
ANR	33608	ExpressionStatement	failed = 1	3362:4:87929:87939	33502	6	True				
ANR	33609	AssignmentExpression	failed = 1		33502	0		=			
ANR	33610	Identifier	failed		33502	0					
ANR	33611	PrimaryExpression	1		33502	1					
ANR	33612	IfStatement	"if ( ( cnfstmt -> d . s_reload_lookup_table . stub_value = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL ) ) == NULL )"		33502	3					
ANR	33613	Condition	"( cnfstmt -> d . s_reload_lookup_table . stub_value = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL ) ) == NULL"	3364:7:87953:88080	33502	0	True				
ANR	33614	EqualityExpression	"( cnfstmt -> d . s_reload_lookup_table . stub_value = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL ) ) == NULL"		33502	0		==			
ANR	33615	AssignmentExpression	"cnfstmt -> d . s_reload_lookup_table . stub_value = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL )"		33502	0		=			
ANR	33616	MemberAccess	cnfstmt -> d . s_reload_lookup_table . stub_value		33502	0					
ANR	33617	MemberAccess	cnfstmt -> d . s_reload_lookup_table		33502	0					
ANR	33618	PtrMemberAccess	cnfstmt -> d		33502	0					
ANR	33619	Identifier	cnfstmt		33502	0					
ANR	33620	Identifier	d		33502	1					
ANR	33621	Identifier	s_reload_lookup_table		33502	1					
ANR	33622	Identifier	stub_value		33502	1					
ANR	33623	CastExpression	"( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL )"		33502	1					
ANR	33624	CastTarget	uchar *		33502	0					
ANR	33625	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL )"		33502	1					
ANR	33626	Callee	es_str2cstr		33502	0					
ANR	33627	Identifier	es_str2cstr		33502	0					
ANR	33628	ArgumentList	( ( struct cnfstringval * ) param -> expr ) -> estr		33502	1					
ANR	33629	Argument	( ( struct cnfstringval * ) param -> expr ) -> estr		33502	0					
ANR	33630	PtrMemberAccess	( ( struct cnfstringval * ) param -> expr ) -> estr		33502	0					
ANR	33631	CastExpression	( struct cnfstringval * ) param -> expr		33502	0					
ANR	33632	CastTarget	struct cnfstringval *		33502	0					
ANR	33633	PtrMemberAccess	param -> expr		33502	1					
ANR	33634	Identifier	param		33502	0					
ANR	33635	Identifier	expr		33502	1					
ANR	33636	Identifier	estr		33502	1					
ANR	33637	Argument	NULL		33502	1					
ANR	33638	Identifier	NULL		33502	0					
ANR	33639	Identifier	NULL		33502	1					
ANR	33640	CompoundStatement		21:83:782:782	33502	1					
ANR	33641	Statement	parser_errmsg	3366:4:88089:88101	33502	0	True				
ANR	33642	Statement	(	3366:17:88102:88102	33502	1	True				
ANR	33643	Statement	"""statement ignored: reload_lookup_table statement """	3366:18:88103:88153	33502	2	True				
ANR	33644	Statement	"""failed to allocate memory for lookup-table stub-value\\n"""	3367:4:88159:88215	33502	3	True				
ANR	33645	Statement	)	3367:61:88216:88216	33502	4	True				
ANR	33646	ExpressionStatement		3367:62:88217:88217	33502	5	True				
ANR	33647	ExpressionStatement	failed = 1	3368:4:88223:88233	33502	6	True				
ANR	33648	AssignmentExpression	failed = 1		33502	0		=			
ANR	33649	Identifier	failed		33502	0					
ANR	33650	PrimaryExpression	1		33502	1					
ANR	33651	Label	case 1 :	3370:2:88242:88248	33502	4	True				
ANR	33652	ExpressionStatement	param = fparams	3371:3:88253:88268	33502	5	True				
ANR	33653	AssignmentExpression	param = fparams		33502	0		=			
ANR	33654	Identifier	param		33502	0					
ANR	33655	Identifier	fparams		33502	1					
ANR	33656	IfStatement	if ( param -> expr -> nodetype != 'S' )		33502	6					
ANR	33657	Condition	param -> expr -> nodetype != 'S'	3372:7:88277:88304	33502	0	True				
ANR	33658	EqualityExpression	param -> expr -> nodetype != 'S'		33502	0		!=			
ANR	33659	PtrMemberAccess	param -> expr -> nodetype		33502	0					
ANR	33660	PtrMemberAccess	param -> expr		33502	0					
ANR	33661	Identifier	param		33502	0					
ANR	33662	Identifier	expr		33502	1					
ANR	33663	Identifier	nodetype		33502	1					
ANR	33664	PrimaryExpression	'S'		33502	1					
ANR	33665	CompoundStatement		28:37:1006:1006	33502	1					
ANR	33666	Statement	parser_errmsg	3373:4:88313:88325	33502	0	True				
ANR	33667	Statement	(	3373:17:88326:88326	33502	1	True				
ANR	33668	Statement	"""statement ignored: reload_lookup_table(table_name, optional:stub_value_in_case_reload_fails) """	3373:18:88327:88421	33502	2	True				
ANR	33669	Statement	"""expects a litteral string for first argument\\n"""	3374:9:88432:88479	33502	3	True				
ANR	33670	Statement	)	3374:57:88480:88480	33502	4	True				
ANR	33671	ExpressionStatement		3374:58:88481:88481	33502	5	True				
ANR	33672	ExpressionStatement	failed = 1	3375:4:88487:88497	33502	6	True				
ANR	33673	AssignmentExpression	failed = 1		33502	0		=			
ANR	33674	Identifier	failed		33502	0					
ANR	33675	PrimaryExpression	1		33502	1					
ANR	33676	IfStatement	"if ( ( cnfstmt -> d . s_reload_lookup_table . table_name = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL ) ) == NULL )"		33502	7					
ANR	33677	Condition	"( cnfstmt -> d . s_reload_lookup_table . table_name = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL ) ) == NULL"	3377:7:88511:88638	33502	0	True				
ANR	33678	EqualityExpression	"( cnfstmt -> d . s_reload_lookup_table . table_name = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL ) ) == NULL"		33502	0		==			
ANR	33679	AssignmentExpression	"cnfstmt -> d . s_reload_lookup_table . table_name = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL )"		33502	0		=			
ANR	33680	MemberAccess	cnfstmt -> d . s_reload_lookup_table . table_name		33502	0					
ANR	33681	MemberAccess	cnfstmt -> d . s_reload_lookup_table		33502	0					
ANR	33682	PtrMemberAccess	cnfstmt -> d		33502	0					
ANR	33683	Identifier	cnfstmt		33502	0					
ANR	33684	Identifier	d		33502	1					
ANR	33685	Identifier	s_reload_lookup_table		33502	1					
ANR	33686	Identifier	table_name		33502	1					
ANR	33687	CastExpression	"( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL )"		33502	1					
ANR	33688	CastTarget	uchar *		33502	0					
ANR	33689	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) param -> expr ) -> estr , NULL )"		33502	1					
ANR	33690	Callee	es_str2cstr		33502	0					
ANR	33691	Identifier	es_str2cstr		33502	0					
ANR	33692	ArgumentList	( ( struct cnfstringval * ) param -> expr ) -> estr		33502	1					
ANR	33693	Argument	( ( struct cnfstringval * ) param -> expr ) -> estr		33502	0					
ANR	33694	PtrMemberAccess	( ( struct cnfstringval * ) param -> expr ) -> estr		33502	0					
ANR	33695	CastExpression	( struct cnfstringval * ) param -> expr		33502	0					
ANR	33696	CastTarget	struct cnfstringval *		33502	0					
ANR	33697	PtrMemberAccess	param -> expr		33502	1					
ANR	33698	Identifier	param		33502	0					
ANR	33699	Identifier	expr		33502	1					
ANR	33700	Identifier	estr		33502	1					
ANR	33701	Argument	NULL		33502	1					
ANR	33702	Identifier	NULL		33502	0					
ANR	33703	Identifier	NULL		33502	1					
ANR	33704	CompoundStatement		34:83:1340:1340	33502	1					
ANR	33705	Statement	parser_errmsg	3379:4:88647:88659	33502	0	True				
ANR	33706	Statement	(	3379:17:88660:88660	33502	1	True				
ANR	33707	Statement	"""statement ignored: reload_lookup_table statement """	3379:18:88661:88711	33502	2	True				
ANR	33708	Statement	"""failed to allocate memory for lookup-table name\\n"""	3380:4:88717:88767	33502	3	True				
ANR	33709	Statement	)	3380:55:88768:88768	33502	4	True				
ANR	33710	ExpressionStatement		3380:56:88769:88769	33502	5	True				
ANR	33711	ExpressionStatement	failed = 1	3381:4:88775:88785	33502	6	True				
ANR	33712	AssignmentExpression	failed = 1		33502	0		=			
ANR	33713	Identifier	failed		33502	0					
ANR	33714	PrimaryExpression	1		33502	1					
ANR	33715	BreakStatement	break ;	3383:3:88795:88800	33502	8	True				
ANR	33716	Label	default :	3384:2:88804:88811	33502	9	True				
ANR	33717	Identifier	default		33502	0					
ANR	33718	Statement	parser_errmsg	3385:3:88816:88828	33502	10	True				
ANR	33719	Statement	(	3385:16:88829:88829	33502	11	True				
ANR	33720	Statement	"""statement ignored: reload_lookup_table(table_name, optional:stub_value_in_case_reload_fails) """	3385:17:88830:88924	33502	12	True				
ANR	33721	Statement	"""expected 1 or 2 arguments, but found '%d'\\n"""	3386:8:88934:88978	33502	13	True				
ANR	33722	Statement	","	3386:53:88979:88979	33502	14	True				
ANR	33723	Statement	nParams	3386:55:88981:88987	33502	15	True				
ANR	33724	Statement	)	3386:62:88988:88988	33502	16	True				
ANR	33725	ExpressionStatement		3386:63:88989:88989	33502	17	True				
ANR	33726	ExpressionStatement	failed = 1	3387:3:88994:89004	33502	18	True				
ANR	33727	AssignmentExpression	failed = 1		33502	0		=			
ANR	33728	Identifier	failed		33502	0					
ANR	33729	PrimaryExpression	1		33502	1					
ANR	33730	ExpressionStatement	param = fparams	3390:1:89014:89029	33502	5	True				
ANR	33731	AssignmentExpression	param = fparams		33502	0		=			
ANR	33732	Identifier	param		33502	0					
ANR	33733	Identifier	fparams		33502	1					
ANR	33734	WhileStatement	while ( param != NULL )		33502	6					
ANR	33735	Condition	param != NULL	3391:7:89038:89050	33502	0	True				
ANR	33736	EqualityExpression	param != NULL		33502	0		!=			
ANR	33737	Identifier	param		33502	0					
ANR	33738	Identifier	NULL		33502	1					
ANR	33739	CompoundStatement		47:22:1752:1752	33502	1					
ANR	33740	ExpressionStatement	nxt = param -> next	3392:2:89057:89074	33502	0	True				
ANR	33741	AssignmentExpression	nxt = param -> next		33502	0		=			
ANR	33742	Identifier	nxt		33502	0					
ANR	33743	PtrMemberAccess	param -> next		33502	1					
ANR	33744	Identifier	param		33502	0					
ANR	33745	Identifier	next		33502	1					
ANR	33746	IfStatement	if ( param -> expr != NULL )		33502	1					
ANR	33747	Condition	param -> expr != NULL	3393:6:89082:89100	33502	0	True				
ANR	33748	EqualityExpression	param -> expr != NULL		33502	0		!=			
ANR	33749	PtrMemberAccess	param -> expr		33502	0					
ANR	33750	Identifier	param		33502	0					
ANR	33751	Identifier	expr		33502	1					
ANR	33752	Identifier	NULL		33502	1					
ANR	33753	ExpressionStatement	cnfexprDestruct ( param -> expr )	3393:27:89103:89131	33502	1	True				
ANR	33754	CallExpression	cnfexprDestruct ( param -> expr )		33502	0					
ANR	33755	Callee	cnfexprDestruct		33502	0					
ANR	33756	Identifier	cnfexprDestruct		33502	0					
ANR	33757	ArgumentList	param -> expr		33502	1					
ANR	33758	Argument	param -> expr		33502	0					
ANR	33759	PtrMemberAccess	param -> expr		33502	0					
ANR	33760	Identifier	param		33502	0					
ANR	33761	Identifier	expr		33502	1					
ANR	33762	ExpressionStatement	free ( param )	3394:2:89135:89146	33502	2	True				
ANR	33763	CallExpression	free ( param )		33502	0					
ANR	33764	Callee	free		33502	0					
ANR	33765	Identifier	free		33502	0					
ANR	33766	ArgumentList	param		33502	1					
ANR	33767	Argument	param		33502	0					
ANR	33768	Identifier	param		33502	0					
ANR	33769	ExpressionStatement	param = nxt	3395:2:89150:89161	33502	3	True				
ANR	33770	AssignmentExpression	param = nxt		33502	0		=			
ANR	33771	Identifier	param		33502	0					
ANR	33772	Identifier	nxt		33502	1					
ANR	33773	IfStatement	if ( failed )		33502	7					
ANR	33774	Condition	failed	3397:5:89171:89176	33502	0	True				
ANR	33775	Identifier	failed		33502	0					
ANR	33776	CompoundStatement		53:13:1878:1878	33502	1					
ANR	33777	ExpressionStatement	cnfstmt -> nodetype = S_NOP	3398:2:89183:89208	33502	0	True				
ANR	33778	AssignmentExpression	cnfstmt -> nodetype = S_NOP		33502	0		=			
ANR	33779	PtrMemberAccess	cnfstmt -> nodetype		33502	0					
ANR	33780	Identifier	cnfstmt		33502	0					
ANR	33781	Identifier	nodetype		33502	1					
ANR	33782	Identifier	S_NOP		33502	1					
ANR	33783	IfStatement	if ( cnfstmt -> d . s_reload_lookup_table . table_name != NULL )		33502	1					
ANR	33784	Condition	cnfstmt -> d . s_reload_lookup_table . table_name != NULL	3399:6:89216:89266	33502	0	True				
ANR	33785	EqualityExpression	cnfstmt -> d . s_reload_lookup_table . table_name != NULL		33502	0		!=			
ANR	33786	MemberAccess	cnfstmt -> d . s_reload_lookup_table . table_name		33502	0					
ANR	33787	MemberAccess	cnfstmt -> d . s_reload_lookup_table		33502	0					
ANR	33788	PtrMemberAccess	cnfstmt -> d		33502	0					
ANR	33789	Identifier	cnfstmt		33502	0					
ANR	33790	Identifier	d		33502	1					
ANR	33791	Identifier	s_reload_lookup_table		33502	1					
ANR	33792	Identifier	table_name		33502	1					
ANR	33793	Identifier	NULL		33502	1					
ANR	33794	CompoundStatement		55:59:1968:1968	33502	1					
ANR	33795	ExpressionStatement	free ( cnfstmt -> d . s_reload_lookup_table . table_name )	3400:3:89274:89323	33502	0	True				
ANR	33796	CallExpression	free ( cnfstmt -> d . s_reload_lookup_table . table_name )		33502	0					
ANR	33797	Callee	free		33502	0					
ANR	33798	Identifier	free		33502	0					
ANR	33799	ArgumentList	cnfstmt -> d . s_reload_lookup_table . table_name		33502	1					
ANR	33800	Argument	cnfstmt -> d . s_reload_lookup_table . table_name		33502	0					
ANR	33801	MemberAccess	cnfstmt -> d . s_reload_lookup_table . table_name		33502	0					
ANR	33802	MemberAccess	cnfstmt -> d . s_reload_lookup_table		33502	0					
ANR	33803	PtrMemberAccess	cnfstmt -> d		33502	0					
ANR	33804	Identifier	cnfstmt		33502	0					
ANR	33805	Identifier	d		33502	1					
ANR	33806	Identifier	s_reload_lookup_table		33502	1					
ANR	33807	Identifier	table_name		33502	1					
ANR	33808	IfStatement	if ( cnfstmt -> d . s_reload_lookup_table . stub_value != NULL )		33502	2					
ANR	33809	Condition	cnfstmt -> d . s_reload_lookup_table . stub_value != NULL	3402:6:89335:89385	33502	0	True				
ANR	33810	EqualityExpression	cnfstmt -> d . s_reload_lookup_table . stub_value != NULL		33502	0		!=			
ANR	33811	MemberAccess	cnfstmt -> d . s_reload_lookup_table . stub_value		33502	0					
ANR	33812	MemberAccess	cnfstmt -> d . s_reload_lookup_table		33502	0					
ANR	33813	PtrMemberAccess	cnfstmt -> d		33502	0					
ANR	33814	Identifier	cnfstmt		33502	0					
ANR	33815	Identifier	d		33502	1					
ANR	33816	Identifier	s_reload_lookup_table		33502	1					
ANR	33817	Identifier	stub_value		33502	1					
ANR	33818	Identifier	NULL		33502	1					
ANR	33819	CompoundStatement		58:59:2087:2087	33502	1					
ANR	33820	ExpressionStatement	free ( cnfstmt -> d . s_reload_lookup_table . stub_value )	3403:3:89393:89442	33502	0	True				
ANR	33821	CallExpression	free ( cnfstmt -> d . s_reload_lookup_table . stub_value )		33502	0					
ANR	33822	Callee	free		33502	0					
ANR	33823	Identifier	free		33502	0					
ANR	33824	ArgumentList	cnfstmt -> d . s_reload_lookup_table . stub_value		33502	1					
ANR	33825	Argument	cnfstmt -> d . s_reload_lookup_table . stub_value		33502	0					
ANR	33826	MemberAccess	cnfstmt -> d . s_reload_lookup_table . stub_value		33502	0					
ANR	33827	MemberAccess	cnfstmt -> d . s_reload_lookup_table		33502	0					
ANR	33828	PtrMemberAccess	cnfstmt -> d		33502	0					
ANR	33829	Identifier	cnfstmt		33502	0					
ANR	33830	Identifier	d		33502	1					
ANR	33831	Identifier	s_reload_lookup_table		33502	1					
ANR	33832	Identifier	stub_value		33502	1					
ANR	33833	ReturnStatement	return cnfstmt ;	3406:1:89452:89466	33502	8	True				
ANR	33834	Identifier	cnfstmt		33502	0					
ANR	33835	ReturnType	struct cnfstmt *		33502	1					
ANR	33836	Identifier	cnfstmtNewReloadLookupTable		33502	2					
ANR	33837	ParameterList	struct cnffparamlst * fparams		33502	3					
ANR	33838	Parameter	struct cnffparamlst * fparams	3344:28:87270:87297	33502	0	True				
ANR	33839	ParameterType	struct cnffparamlst *		33502	0					
ANR	33840	Identifier	fparams		33502	1					
ANR	33841	CFGEntryNode	ENTRY		33502		True				
ANR	33842	CFGExitNode	EXIT		33502		True				
ANR	33843	Symbol	cnfstmt -> d		33502						
ANR	33844	Symbol	fparams		33502						
ANR	33845	Symbol	cnfstmt -> nodetype		33502						
ANR	33846	Symbol	fparams -> next		33502						
ANR	33847	Symbol	es_str2cstr		33502						
ANR	33848	Symbol	param		33502						
ANR	33849	Symbol	cnfstmt -> d . s_reload_lookup_table		33502						
ANR	33850	Symbol	( ( struct cnfstringval * ) param -> expr ) -> estr		33502						
ANR	33851	Symbol	* cnfstmt		33502						
ANR	33852	Symbol	NULL		33502						
ANR	33853	Symbol	cnfstmtNew		33502						
ANR	33854	Symbol	nParams		33502						
ANR	33855	Symbol	nxt		33502						
ANR	33856	Symbol	failed		33502						
ANR	33857	Symbol	* param		33502						
ANR	33858	Symbol	S_RELOAD_LOOKUP_TABLE		33502						
ANR	33859	Symbol	* fparams		33502						
ANR	33860	Symbol	cnfstmt		33502						
ANR	33861	Symbol	* * param		33502						
ANR	33862	Symbol	cnfstmt -> d . s_reload_lookup_table . stub_value		33502						
ANR	33863	Symbol	cnfstmt -> d . s_reload_lookup_table . table_name		33502						
ANR	33864	Symbol	param -> expr -> nodetype		33502						
ANR	33865	Symbol	* param -> expr		33502						
ANR	33866	Symbol	param -> next		33502						
ANR	33867	Symbol	S_NOP		33502						
ANR	33868	Symbol	param -> expr		33502						
ANR	33869	Function	cnfstmtNewUnset	3409:0:89471:89969							
ANR	33870	FunctionDef	cnfstmtNewUnset (char * var)		33869	0					
ANR	33871	CompoundStatement		3411:0:89515:89969	33869	0					
ANR	33872	IdentifierDeclStatement	propid_t propid ;	3412:1:89518:89533	33869	0	True				
ANR	33873	IdentifierDecl	propid		33869	0					
ANR	33874	IdentifierDeclType	propid_t		33869	0					
ANR	33875	Identifier	propid		33869	1					
ANR	33876	IdentifierDeclStatement	struct cnfstmt * cnfstmt ;	3413:1:89536:89559	33869	1	True				
ANR	33877	IdentifierDecl	* cnfstmt		33869	0					
ANR	33878	IdentifierDeclType	struct cnfstmt *		33869	0					
ANR	33879	Identifier	cnfstmt		33869	1					
ANR	33880	IfStatement	if ( ( cnfstmt = cnfstmtNew ( S_UNSET ) ) != NULL )		33869	2					
ANR	33881	Condition	( cnfstmt = cnfstmtNew ( S_UNSET ) ) != NULL	3414:4:89565:89603	33869	0	True				
ANR	33882	EqualityExpression	( cnfstmt = cnfstmtNew ( S_UNSET ) ) != NULL		33869	0		!=			
ANR	33883	AssignmentExpression	cnfstmt = cnfstmtNew ( S_UNSET )		33869	0		=			
ANR	33884	Identifier	cnfstmt		33869	0					
ANR	33885	CallExpression	cnfstmtNew ( S_UNSET )		33869	1					
ANR	33886	Callee	cnfstmtNew		33869	0					
ANR	33887	Identifier	cnfstmtNew		33869	0					
ANR	33888	ArgumentList	S_UNSET		33869	1					
ANR	33889	Argument	S_UNSET		33869	0					
ANR	33890	Identifier	S_UNSET		33869	0					
ANR	33891	Identifier	NULL		33869	1					
ANR	33892	CompoundStatement		4:45:90:90	33869	1					
ANR	33893	IfStatement	"if ( propNameToID ( ( uchar * ) var , & propid ) == RS_RET_OK && ( propid == PROP_CEE || propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR ) )"		33869	0					
ANR	33894	Condition	"propNameToID ( ( uchar * ) var , & propid ) == RS_RET_OK && ( propid == PROP_CEE || propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR )"	3415:5:89613:89767	33869	0	True				
ANR	33895	AndExpression	"propNameToID ( ( uchar * ) var , & propid ) == RS_RET_OK && ( propid == PROP_CEE || propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR )"		33869	0		&&			
ANR	33896	EqualityExpression	"propNameToID ( ( uchar * ) var , & propid ) == RS_RET_OK"		33869	0		==			
ANR	33897	CallExpression	"propNameToID ( ( uchar * ) var , & propid )"		33869	0					
ANR	33898	Callee	propNameToID		33869	0					
ANR	33899	Identifier	propNameToID		33869	0					
ANR	33900	ArgumentList	( uchar * ) var		33869	1					
ANR	33901	Argument	( uchar * ) var		33869	0					
ANR	33902	CastExpression	( uchar * ) var		33869	0					
ANR	33903	CastTarget	uchar *		33869	0					
ANR	33904	Identifier	var		33869	1					
ANR	33905	Argument	& propid		33869	1					
ANR	33906	UnaryOperationExpression	& propid		33869	0					
ANR	33907	UnaryOperator	&		33869	0					
ANR	33908	Identifier	propid		33869	1					
ANR	33909	Identifier	RS_RET_OK		33869	1					
ANR	33910	OrExpression	propid == PROP_CEE || propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR		33869	1		||			
ANR	33911	EqualityExpression	propid == PROP_CEE		33869	0		==			
ANR	33912	Identifier	propid		33869	0					
ANR	33913	Identifier	PROP_CEE		33869	1					
ANR	33914	OrExpression	propid == PROP_LOCAL_VAR || propid == PROP_GLOBAL_VAR		33869	1		||			
ANR	33915	EqualityExpression	propid == PROP_LOCAL_VAR		33869	0		==			
ANR	33916	Identifier	propid		33869	0					
ANR	33917	Identifier	PROP_LOCAL_VAR		33869	1					
ANR	33918	EqualityExpression	propid == PROP_GLOBAL_VAR		33869	1		==			
ANR	33919	Identifier	propid		33869	0					
ANR	33920	Identifier	PROP_GLOBAL_VAR		33869	1					
ANR	33921	CompoundStatement		9:7:260:260	33869	1					
ANR	33922	ExpressionStatement	cnfstmt -> d . s_unset . varname = ( uchar * ) var	3420:3:89781:89822	33869	0	True				
ANR	33923	AssignmentExpression	cnfstmt -> d . s_unset . varname = ( uchar * ) var		33869	0		=			
ANR	33924	MemberAccess	cnfstmt -> d . s_unset . varname		33869	0					
ANR	33925	MemberAccess	cnfstmt -> d . s_unset		33869	0					
ANR	33926	PtrMemberAccess	cnfstmt -> d		33869	0					
ANR	33927	Identifier	cnfstmt		33869	0					
ANR	33928	Identifier	d		33869	1					
ANR	33929	Identifier	s_unset		33869	1					
ANR	33930	Identifier	varname		33869	1					
ANR	33931	CastExpression	( uchar * ) var		33869	1					
ANR	33932	CastTarget	uchar *		33869	0					
ANR	33933	Identifier	var		33869	1					
ANR	33934	ElseStatement	else		33869	0					
ANR	33935	CompoundStatement		11:9:317:317	33869	0					
ANR	33936	ExpressionStatement	"parser_errmsg ( ""invalid variable '%s' in unset statement."" , var )"	3422:3:89838:89901	33869	0	True				
ANR	33937	CallExpression	"parser_errmsg ( ""invalid variable '%s' in unset statement."" , var )"		33869	0					
ANR	33938	Callee	parser_errmsg		33869	0					
ANR	33939	Identifier	parser_errmsg		33869	0					
ANR	33940	ArgumentList	"""invalid variable '%s' in unset statement."""		33869	1					
ANR	33941	Argument	"""invalid variable '%s' in unset statement."""		33869	0					
ANR	33942	PrimaryExpression	"""invalid variable '%s' in unset statement."""		33869	0					
ANR	33943	Argument	var		33869	1					
ANR	33944	Identifier	var		33869	0					
ANR	33945	ExpressionStatement	free ( var )	3423:3:89906:89915	33869	1	True				
ANR	33946	CallExpression	free ( var )		33869	0					
ANR	33947	Callee	free		33869	0					
ANR	33948	Identifier	free		33869	0					
ANR	33949	ArgumentList	var		33869	1					
ANR	33950	Argument	var		33869	0					
ANR	33951	Identifier	var		33869	0					
ANR	33952	ExpressionStatement	cnfstmtDisable ( cnfstmt )	3424:3:89920:89943	33869	2	True				
ANR	33953	CallExpression	cnfstmtDisable ( cnfstmt )		33869	0					
ANR	33954	Callee	cnfstmtDisable		33869	0					
ANR	33955	Identifier	cnfstmtDisable		33869	0					
ANR	33956	ArgumentList	cnfstmt		33869	1					
ANR	33957	Argument	cnfstmt		33869	0					
ANR	33958	Identifier	cnfstmt		33869	0					
ANR	33959	ReturnStatement	return cnfstmt ;	3427:1:89953:89967	33869	3	True				
ANR	33960	Identifier	cnfstmt		33869	0					
ANR	33961	ReturnType	struct cnfstmt *		33869	1					
ANR	33962	Identifier	cnfstmtNewUnset		33869	2					
ANR	33963	ParameterList	char * var		33869	3					
ANR	33964	Parameter	char * var	3410:16:89504:89512	33869	0	True				
ANR	33965	ParameterType	char *		33869	0					
ANR	33966	Identifier	var		33869	1					
ANR	33967	CFGEntryNode	ENTRY		33869		True				
ANR	33968	CFGExitNode	EXIT		33869		True				
ANR	33969	Symbol	cnfstmt -> d		33869						
ANR	33970	Symbol	NULL		33869						
ANR	33971	Symbol	cnfstmt -> d . s_unset		33869						
ANR	33972	Symbol	var		33869						
ANR	33973	Symbol	cnfstmtNew		33869						
ANR	33974	Symbol	RS_RET_OK		33869						
ANR	33975	Symbol	propid		33869						
ANR	33976	Symbol	S_UNSET		33869						
ANR	33977	Symbol	propNameToID		33869						
ANR	33978	Symbol	PROP_LOCAL_VAR		33869						
ANR	33979	Symbol	cnfstmt		33869						
ANR	33980	Symbol	cnfstmt -> d . s_unset . varname		33869						
ANR	33981	Symbol	& propid		33869						
ANR	33982	Symbol	PROP_CEE		33869						
ANR	33983	Symbol	* cnfstmt		33869						
ANR	33984	Symbol	PROP_GLOBAL_VAR		33869						
ANR	33985	Function	cnfstmtNewContinue	3430:0:89972:90043							
ANR	33986	FunctionDef	cnfstmtNewContinue ()		33985	0					
ANR	33987	CompoundStatement		3432:0:90014:90043	33985	0					
ANR	33988	ReturnStatement	return cnfstmtNew ( S_NOP ) ;	3433:1:90017:90041	33985	0	True				
ANR	33989	CallExpression	cnfstmtNew ( S_NOP )		33985	0					
ANR	33990	Callee	cnfstmtNew		33985	0					
ANR	33991	Identifier	cnfstmtNew		33985	0					
ANR	33992	ArgumentList	S_NOP		33985	1					
ANR	33993	Argument	S_NOP		33985	0					
ANR	33994	Identifier	S_NOP		33985	0					
ANR	33995	ReturnType	struct cnfstmt *		33985	1					
ANR	33996	Identifier	cnfstmtNewContinue		33985	2					
ANR	33997	ParameterList			33985	3					
ANR	33998	CFGEntryNode	ENTRY		33985		True				
ANR	33999	CFGExitNode	EXIT		33985		True				
ANR	34000	Symbol	cnfstmtNew		33985						
ANR	34001	Symbol	S_NOP		33985						
ANR	34002	Function	cnfstmtNewPRIFILT	3436:0:90046:90399							
ANR	34003	FunctionDef	"cnfstmtNewPRIFILT (char * prifilt , struct cnfstmt * t_then)"		34002	0					
ANR	34004	CompoundStatement		3438:0:90120:90399	34002	0					
ANR	34005	IdentifierDeclStatement	struct cnfstmt * cnfstmt ;	3439:1:90123:90146	34002	0	True				
ANR	34006	IdentifierDecl	* cnfstmt		34002	0					
ANR	34007	IdentifierDeclType	struct cnfstmt *		34002	0					
ANR	34008	Identifier	cnfstmt		34002	1					
ANR	34009	IfStatement	if ( ( cnfstmt = cnfstmtNew ( S_PRIFILT ) ) != NULL )		34002	1					
ANR	34010	Condition	( cnfstmt = cnfstmtNew ( S_PRIFILT ) ) != NULL	3440:4:90152:90192	34002	0	True				
ANR	34011	EqualityExpression	( cnfstmt = cnfstmtNew ( S_PRIFILT ) ) != NULL		34002	0		!=			
ANR	34012	AssignmentExpression	cnfstmt = cnfstmtNew ( S_PRIFILT )		34002	0		=			
ANR	34013	Identifier	cnfstmt		34002	0					
ANR	34014	CallExpression	cnfstmtNew ( S_PRIFILT )		34002	1					
ANR	34015	Callee	cnfstmtNew		34002	0					
ANR	34016	Identifier	cnfstmtNew		34002	0					
ANR	34017	ArgumentList	S_PRIFILT		34002	1					
ANR	34018	Argument	S_PRIFILT		34002	0					
ANR	34019	Identifier	S_PRIFILT		34002	0					
ANR	34020	Identifier	NULL		34002	1					
ANR	34021	CompoundStatement		3:47:74:74	34002	1					
ANR	34022	ExpressionStatement	cnfstmt -> printable = ( uchar * ) prifilt	3441:2:90199:90235	34002	0	True				
ANR	34023	AssignmentExpression	cnfstmt -> printable = ( uchar * ) prifilt		34002	0		=			
ANR	34024	PtrMemberAccess	cnfstmt -> printable		34002	0					
ANR	34025	Identifier	cnfstmt		34002	0					
ANR	34026	Identifier	printable		34002	1					
ANR	34027	CastExpression	( uchar * ) prifilt		34002	1					
ANR	34028	CastTarget	uchar *		34002	0					
ANR	34029	Identifier	prifilt		34002	1					
ANR	34030	ExpressionStatement	cnfstmt -> d . s_prifilt . t_then = t_then	3442:2:90239:90275	34002	1	True				
ANR	34031	AssignmentExpression	cnfstmt -> d . s_prifilt . t_then = t_then		34002	0		=			
ANR	34032	MemberAccess	cnfstmt -> d . s_prifilt . t_then		34002	0					
ANR	34033	MemberAccess	cnfstmt -> d . s_prifilt		34002	0					
ANR	34034	PtrMemberAccess	cnfstmt -> d		34002	0					
ANR	34035	Identifier	cnfstmt		34002	0					
ANR	34036	Identifier	d		34002	1					
ANR	34037	Identifier	s_prifilt		34002	1					
ANR	34038	Identifier	t_then		34002	1					
ANR	34039	Identifier	t_then		34002	1					
ANR	34040	ExpressionStatement	cnfstmt -> d . s_prifilt . t_else = NULL	3443:2:90279:90313	34002	2	True				
ANR	34041	AssignmentExpression	cnfstmt -> d . s_prifilt . t_else = NULL		34002	0		=			
ANR	34042	MemberAccess	cnfstmt -> d . s_prifilt . t_else		34002	0					
ANR	34043	MemberAccess	cnfstmt -> d . s_prifilt		34002	0					
ANR	34044	PtrMemberAccess	cnfstmt -> d		34002	0					
ANR	34045	Identifier	cnfstmt		34002	0					
ANR	34046	Identifier	d		34002	1					
ANR	34047	Identifier	s_prifilt		34002	1					
ANR	34048	Identifier	t_else		34002	1					
ANR	34049	Identifier	NULL		34002	1					
ANR	34050	ExpressionStatement	"DecodePRIFilter ( ( uchar * ) prifilt , cnfstmt -> d . s_prifilt . pmask )"	3444:2:90317:90377	34002	3	True				
ANR	34051	CallExpression	"DecodePRIFilter ( ( uchar * ) prifilt , cnfstmt -> d . s_prifilt . pmask )"		34002	0					
ANR	34052	Callee	DecodePRIFilter		34002	0					
ANR	34053	Identifier	DecodePRIFilter		34002	0					
ANR	34054	ArgumentList	( uchar * ) prifilt		34002	1					
ANR	34055	Argument	( uchar * ) prifilt		34002	0					
ANR	34056	CastExpression	( uchar * ) prifilt		34002	0					
ANR	34057	CastTarget	uchar *		34002	0					
ANR	34058	Identifier	prifilt		34002	1					
ANR	34059	Argument	cnfstmt -> d . s_prifilt . pmask		34002	1					
ANR	34060	MemberAccess	cnfstmt -> d . s_prifilt . pmask		34002	0					
ANR	34061	MemberAccess	cnfstmt -> d . s_prifilt		34002	0					
ANR	34062	PtrMemberAccess	cnfstmt -> d		34002	0					
ANR	34063	Identifier	cnfstmt		34002	0					
ANR	34064	Identifier	d		34002	1					
ANR	34065	Identifier	s_prifilt		34002	1					
ANR	34066	Identifier	pmask		34002	1					
ANR	34067	ReturnStatement	return cnfstmt ;	3446:1:90383:90397	34002	2	True				
ANR	34068	Identifier	cnfstmt		34002	0					
ANR	34069	ReturnType	struct cnfstmt *		34002	1					
ANR	34070	Identifier	cnfstmtNewPRIFILT		34002	2					
ANR	34071	ParameterList	"char * prifilt , struct cnfstmt * t_then"		34002	3					
ANR	34072	Parameter	char * prifilt	3437:18:90081:90093	34002	0	True				
ANR	34073	ParameterType	char *		34002	0					
ANR	34074	Identifier	prifilt		34002	1					
ANR	34075	Parameter	struct cnfstmt * t_then	3437:33:90096:90117	34002	1	True				
ANR	34076	ParameterType	struct cnfstmt *		34002	0					
ANR	34077	Identifier	t_then		34002	1					
ANR	34078	CFGEntryNode	ENTRY		34002		True				
ANR	34079	CFGExitNode	EXIT		34002		True				
ANR	34080	Symbol	cnfstmt -> printable		34002						
ANR	34081	Symbol	cnfstmt -> d		34002						
ANR	34082	Symbol	cnfstmt -> d . s_prifilt . pmask		34002						
ANR	34083	Symbol	S_PRIFILT		34002						
ANR	34084	Symbol	NULL		34002						
ANR	34085	Symbol	cnfstmtNew		34002						
ANR	34086	Symbol	cnfstmt -> d . s_prifilt . t_then		34002						
ANR	34087	Symbol	prifilt		34002						
ANR	34088	Symbol	t_then		34002						
ANR	34089	Symbol	cnfstmt		34002						
ANR	34090	Symbol	cnfstmt -> d . s_prifilt		34002						
ANR	34091	Symbol	* cnfstmt		34002						
ANR	34092	Symbol	cnfstmt -> d . s_prifilt . t_else		34002						
ANR	34093	Function	cnfstmtNewPROPFILT	3449:0:90402:90931							
ANR	34094	FunctionDef	"cnfstmtNewPROPFILT (char * propfilt , struct cnfstmt * t_then)"		34093	0					
ANR	34095	CompoundStatement		3451:0:90478:90931	34093	0					
ANR	34096	IdentifierDeclStatement	struct cnfstmt * cnfstmt ;	3452:1:90481:90504	34093	0	True				
ANR	34097	IdentifierDecl	* cnfstmt		34093	0					
ANR	34098	IdentifierDeclType	struct cnfstmt *		34093	0					
ANR	34099	Identifier	cnfstmt		34093	1					
ANR	34100	IfStatement	if ( ( cnfstmt = cnfstmtNew ( S_PROPFILT ) ) != NULL )		34093	1					
ANR	34101	Condition	( cnfstmt = cnfstmtNew ( S_PROPFILT ) ) != NULL	3453:4:90510:90551	34093	0	True				
ANR	34102	EqualityExpression	( cnfstmt = cnfstmtNew ( S_PROPFILT ) ) != NULL		34093	0		!=			
ANR	34103	AssignmentExpression	cnfstmt = cnfstmtNew ( S_PROPFILT )		34093	0		=			
ANR	34104	Identifier	cnfstmt		34093	0					
ANR	34105	CallExpression	cnfstmtNew ( S_PROPFILT )		34093	1					
ANR	34106	Callee	cnfstmtNew		34093	0					
ANR	34107	Identifier	cnfstmtNew		34093	0					
ANR	34108	ArgumentList	S_PROPFILT		34093	1					
ANR	34109	Argument	S_PROPFILT		34093	0					
ANR	34110	Identifier	S_PROPFILT		34093	0					
ANR	34111	Identifier	NULL		34093	1					
ANR	34112	CompoundStatement		3:48:75:75	34093	1					
ANR	34113	ExpressionStatement	cnfstmt -> printable = ( uchar * ) propfilt	3454:2:90558:90595	34093	0	True				
ANR	34114	AssignmentExpression	cnfstmt -> printable = ( uchar * ) propfilt		34093	0		=			
ANR	34115	PtrMemberAccess	cnfstmt -> printable		34093	0					
ANR	34116	Identifier	cnfstmt		34093	0					
ANR	34117	Identifier	printable		34093	1					
ANR	34118	CastExpression	( uchar * ) propfilt		34093	1					
ANR	34119	CastTarget	uchar *		34093	0					
ANR	34120	Identifier	propfilt		34093	1					
ANR	34121	ExpressionStatement	cnfstmt -> d . s_propfilt . t_then = t_then	3455:2:90599:90636	34093	1	True				
ANR	34122	AssignmentExpression	cnfstmt -> d . s_propfilt . t_then = t_then		34093	0		=			
ANR	34123	MemberAccess	cnfstmt -> d . s_propfilt . t_then		34093	0					
ANR	34124	MemberAccess	cnfstmt -> d . s_propfilt		34093	0					
ANR	34125	PtrMemberAccess	cnfstmt -> d		34093	0					
ANR	34126	Identifier	cnfstmt		34093	0					
ANR	34127	Identifier	d		34093	1					
ANR	34128	Identifier	s_propfilt		34093	1					
ANR	34129	Identifier	t_then		34093	1					
ANR	34130	Identifier	t_then		34093	1					
ANR	34131	ExpressionStatement	cnfstmt -> d . s_propfilt . regex_cache = NULL	3456:2:90640:90680	34093	2	True				
ANR	34132	AssignmentExpression	cnfstmt -> d . s_propfilt . regex_cache = NULL		34093	0		=			
ANR	34133	MemberAccess	cnfstmt -> d . s_propfilt . regex_cache		34093	0					
ANR	34134	MemberAccess	cnfstmt -> d . s_propfilt		34093	0					
ANR	34135	PtrMemberAccess	cnfstmt -> d		34093	0					
ANR	34136	Identifier	cnfstmt		34093	0					
ANR	34137	Identifier	d		34093	1					
ANR	34138	Identifier	s_propfilt		34093	1					
ANR	34139	Identifier	regex_cache		34093	1					
ANR	34140	Identifier	NULL		34093	1					
ANR	34141	ExpressionStatement	cnfstmt -> d . s_propfilt . pCSCompValue = NULL	3457:2:90684:90725	34093	3	True				
ANR	34142	AssignmentExpression	cnfstmt -> d . s_propfilt . pCSCompValue = NULL		34093	0		=			
ANR	34143	MemberAccess	cnfstmt -> d . s_propfilt . pCSCompValue		34093	0					
ANR	34144	MemberAccess	cnfstmt -> d . s_propfilt		34093	0					
ANR	34145	PtrMemberAccess	cnfstmt -> d		34093	0					
ANR	34146	Identifier	cnfstmt		34093	0					
ANR	34147	Identifier	d		34093	1					
ANR	34148	Identifier	s_propfilt		34093	1					
ANR	34149	Identifier	pCSCompValue		34093	1					
ANR	34150	Identifier	NULL		34093	1					
ANR	34151	IfStatement	"if ( DecodePropFilter ( ( uchar * ) propfilt , cnfstmt ) != RS_RET_OK )"		34093	4					
ANR	34152	Condition	"DecodePropFilter ( ( uchar * ) propfilt , cnfstmt ) != RS_RET_OK"	3458:5:90732:90787	34093	0	True				
ANR	34153	EqualityExpression	"DecodePropFilter ( ( uchar * ) propfilt , cnfstmt ) != RS_RET_OK"		34093	0		!=			
ANR	34154	CallExpression	"DecodePropFilter ( ( uchar * ) propfilt , cnfstmt )"		34093	0					
ANR	34155	Callee	DecodePropFilter		34093	0					
ANR	34156	Identifier	DecodePropFilter		34093	0					
ANR	34157	ArgumentList	( uchar * ) propfilt		34093	1					
ANR	34158	Argument	( uchar * ) propfilt		34093	0					
ANR	34159	CastExpression	( uchar * ) propfilt		34093	0					
ANR	34160	CastTarget	uchar *		34093	0					
ANR	34161	Identifier	propfilt		34093	1					
ANR	34162	Argument	cnfstmt		34093	1					
ANR	34163	Identifier	cnfstmt		34093	0					
ANR	34164	Identifier	RS_RET_OK		34093	1					
ANR	34165	CompoundStatement		8:63:311:311	34093	1					
ANR	34166	ExpressionStatement	cnfstmt -> nodetype = S_NOP	3459:3:90795:90820	34093	0	True				
ANR	34167	AssignmentExpression	cnfstmt -> nodetype = S_NOP		34093	0		=			
ANR	34168	PtrMemberAccess	cnfstmt -> nodetype		34093	0					
ANR	34169	Identifier	cnfstmt		34093	0					
ANR	34170	Identifier	nodetype		34093	1					
ANR	34171	Identifier	S_NOP		34093	1					
ANR	34172	ExpressionStatement	cnfstmtDestructLst ( t_then )	3460:3:90847:90873	34093	1	True				
ANR	34173	CallExpression	cnfstmtDestructLst ( t_then )		34093	0					
ANR	34174	Callee	cnfstmtDestructLst		34093	0					
ANR	34175	Identifier	cnfstmtDestructLst		34093	0					
ANR	34176	ArgumentList	t_then		34093	1					
ANR	34177	Argument	t_then		34093	0					
ANR	34178	Identifier	t_then		34093	0					
ANR	34179	ReturnStatement	return cnfstmt ;	3463:1:90915:90929	34093	2	True				
ANR	34180	Identifier	cnfstmt		34093	0					
ANR	34181	ReturnType	struct cnfstmt *		34093	1					
ANR	34182	Identifier	cnfstmtNewPROPFILT		34093	2					
ANR	34183	ParameterList	"char * propfilt , struct cnfstmt * t_then"		34093	3					
ANR	34184	Parameter	char * propfilt	3450:19:90438:90451	34093	0	True				
ANR	34185	ParameterType	char *		34093	0					
ANR	34186	Identifier	propfilt		34093	1					
ANR	34187	Parameter	struct cnfstmt * t_then	3450:35:90454:90475	34093	1	True				
ANR	34188	ParameterType	struct cnfstmt *		34093	0					
ANR	34189	Identifier	t_then		34093	1					
ANR	34190	CFGEntryNode	ENTRY		34093		True				
ANR	34191	CFGExitNode	EXIT		34093		True				
ANR	34192	Symbol	propfilt		34093						
ANR	34193	Symbol	cnfstmt -> printable		34093						
ANR	34194	Symbol	cnfstmt -> d		34093						
ANR	34195	Symbol	NULL		34093						
ANR	34196	Symbol	cnfstmtNew		34093						
ANR	34197	Symbol	RS_RET_OK		34093						
ANR	34198	Symbol	cnfstmt -> d . s_propfilt . t_then		34093						
ANR	34199	Symbol	t_then		34093						
ANR	34200	Symbol	cnfstmt -> nodetype		34093						
ANR	34201	Symbol	cnfstmt -> d . s_propfilt		34093						
ANR	34202	Symbol	cnfstmt		34093						
ANR	34203	Symbol	S_PROPFILT		34093						
ANR	34204	Symbol	DecodePropFilter		34093						
ANR	34205	Symbol	cnfstmt -> d . s_propfilt . pCSCompValue		34093						
ANR	34206	Symbol	cnfstmt -> d . s_propfilt . regex_cache		34093						
ANR	34207	Symbol	* cnfstmt		34093						
ANR	34208	Symbol	S_NOP		34093						
ANR	34209	Function	cnfstmtNewAct	3466:0:90934:91742							
ANR	34210	FunctionDef	cnfstmtNewAct (struct nvlst * lst)		34209	0					
ANR	34211	CompoundStatement		3468:0:90984:91742	34209	0					
ANR	34212	IdentifierDeclStatement	struct cnfstmt * cnfstmt ;	3469:1:90987:91010	34209	0	True				
ANR	34213	IdentifierDecl	* cnfstmt		34209	0					
ANR	34214	IdentifierDeclType	struct cnfstmt *		34209	0					
ANR	34215	Identifier	cnfstmt		34209	1					
ANR	34216	IdentifierDeclStatement	char namebuf [ 256 ] ;	3470:1:91013:91030	34209	1	True				
ANR	34217	IdentifierDecl	namebuf [ 256 ]		34209	0					
ANR	34218	IdentifierDeclType	char [ 256 ]		34209	0					
ANR	34219	Identifier	namebuf		34209	1					
ANR	34220	PrimaryExpression	256		34209	2					
ANR	34221	IdentifierDeclStatement	rsRetVal localRet ;	3471:1:91033:91050	34209	2	True				
ANR	34222	IdentifierDecl	localRet		34209	0					
ANR	34223	IdentifierDeclType	rsRetVal		34209	0					
ANR	34224	Identifier	localRet		34209	1					
ANR	34225	IfStatement	if ( ( cnfstmt = cnfstmtNew ( S_ACT ) ) == NULL )		34209	3					
ANR	34226	Condition	( cnfstmt = cnfstmtNew ( S_ACT ) ) == NULL	3472:4:91056:91092	34209	0	True				
ANR	34227	EqualityExpression	( cnfstmt = cnfstmtNew ( S_ACT ) ) == NULL		34209	0		==			
ANR	34228	AssignmentExpression	cnfstmt = cnfstmtNew ( S_ACT )		34209	0		=			
ANR	34229	Identifier	cnfstmt		34209	0					
ANR	34230	CallExpression	cnfstmtNew ( S_ACT )		34209	1					
ANR	34231	Callee	cnfstmtNew		34209	0					
ANR	34232	Identifier	cnfstmtNew		34209	0					
ANR	34233	ArgumentList	S_ACT		34209	1					
ANR	34234	Argument	S_ACT		34209	0					
ANR	34235	Identifier	S_ACT		34209	0					
ANR	34236	Identifier	NULL		34209	1					
ANR	34237	GotoStatement	goto done ;	3473:2:91098:91107	34209	1	True				
ANR	34238	Identifier	done		34209	0					
ANR	34239	ExpressionStatement	"localRet = actionNewInst ( lst , & cnfstmt -> d . act )"	3474:1:91110:91156	34209	4	True				
ANR	34240	AssignmentExpression	"localRet = actionNewInst ( lst , & cnfstmt -> d . act )"		34209	0		=			
ANR	34241	Identifier	localRet		34209	0					
ANR	34242	CallExpression	"actionNewInst ( lst , & cnfstmt -> d . act )"		34209	1					
ANR	34243	Callee	actionNewInst		34209	0					
ANR	34244	Identifier	actionNewInst		34209	0					
ANR	34245	ArgumentList	lst		34209	1					
ANR	34246	Argument	lst		34209	0					
ANR	34247	Identifier	lst		34209	0					
ANR	34248	Argument	& cnfstmt -> d . act		34209	1					
ANR	34249	UnaryOperationExpression	& cnfstmt -> d . act		34209	0					
ANR	34250	UnaryOperator	&		34209	0					
ANR	34251	MemberAccess	cnfstmt -> d . act		34209	1					
ANR	34252	PtrMemberAccess	cnfstmt -> d		34209	0					
ANR	34253	Identifier	cnfstmt		34209	0					
ANR	34254	Identifier	d		34209	1					
ANR	34255	Identifier	act		34209	1					
ANR	34256	IfStatement	if ( localRet == RS_RET_OK_WARN )		34209	5					
ANR	34257	Condition	localRet == RS_RET_OK_WARN	3475:4:91162:91187	34209	0	True				
ANR	34258	EqualityExpression	localRet == RS_RET_OK_WARN		34209	0		==			
ANR	34259	Identifier	localRet		34209	0					
ANR	34260	Identifier	RS_RET_OK_WARN		34209	1					
ANR	34261	CompoundStatement		8:32:205:205	34209	1					
ANR	34262	ExpressionStatement	"parser_errmsg ( ""warnings occured in file '%s' around line %d"" , cnfcurrfn , yylineno )"	3476:2:91194:91285	34209	0	True				
ANR	34263	CallExpression	"parser_errmsg ( ""warnings occured in file '%s' around line %d"" , cnfcurrfn , yylineno )"		34209	0					
ANR	34264	Callee	parser_errmsg		34209	0					
ANR	34265	Identifier	parser_errmsg		34209	0					
ANR	34266	ArgumentList	"""warnings occured in file '%s' around line %d"""		34209	1					
ANR	34267	Argument	"""warnings occured in file '%s' around line %d"""		34209	0					
ANR	34268	PrimaryExpression	"""warnings occured in file '%s' around line %d"""		34209	0					
ANR	34269	Argument	cnfcurrfn		34209	1					
ANR	34270	Identifier	cnfcurrfn		34209	0					
ANR	34271	Argument	yylineno		34209	2					
ANR	34272	Identifier	yylineno		34209	0					
ANR	34273	ElseStatement	else		34209	0					
ANR	34274	IfStatement	if ( localRet != RS_RET_OK )		34209	0					
ANR	34275	Condition	localRet != RS_RET_OK	3478:11:91298:91318	34209	0	True				
ANR	34276	EqualityExpression	localRet != RS_RET_OK		34209	0		!=			
ANR	34277	Identifier	localRet		34209	0					
ANR	34278	Identifier	RS_RET_OK		34209	1					
ANR	34279	CompoundStatement		11:34:336:336	34209	1					
ANR	34280	ExpressionStatement	"parser_errmsg ( ""errors occured in file '%s' around line %d"" , cnfcurrfn , yylineno )"	3479:2:91325:91414	34209	0	True				
ANR	34281	CallExpression	"parser_errmsg ( ""errors occured in file '%s' around line %d"" , cnfcurrfn , yylineno )"		34209	0					
ANR	34282	Callee	parser_errmsg		34209	0					
ANR	34283	Identifier	parser_errmsg		34209	0					
ANR	34284	ArgumentList	"""errors occured in file '%s' around line %d"""		34209	1					
ANR	34285	Argument	"""errors occured in file '%s' around line %d"""		34209	0					
ANR	34286	PrimaryExpression	"""errors occured in file '%s' around line %d"""		34209	0					
ANR	34287	Argument	cnfcurrfn		34209	1					
ANR	34288	Identifier	cnfcurrfn		34209	0					
ANR	34289	Argument	yylineno		34209	2					
ANR	34290	Identifier	yylineno		34209	0					
ANR	34291	ExpressionStatement	cnfstmt -> nodetype = S_NOP	3481:2:91418:91443	34209	1	True				
ANR	34292	AssignmentExpression	cnfstmt -> nodetype = S_NOP		34209	0		=			
ANR	34293	PtrMemberAccess	cnfstmt -> nodetype		34209	0					
ANR	34294	Identifier	cnfstmt		34209	0					
ANR	34295	Identifier	nodetype		34209	1					
ANR	34296	Identifier	S_NOP		34209	1					
ANR	34297	GotoStatement	goto done ;	3482:2:91469:91478	34209	2	True				
ANR	34298	Identifier	done		34209	0					
ANR	34299	ExpressionStatement	"snprintf ( namebuf , sizeof ( namebuf ) - 1 , ""action(type=\\""%s\\"" ...)"" , modGetName ( cnfstmt -> d . act -> pMod ) )"	3484:1:91484:91584	34209	6	True				
ANR	34300	CallExpression	"snprintf ( namebuf , sizeof ( namebuf ) - 1 , ""action(type=\\""%s\\"" ...)"" , modGetName ( cnfstmt -> d . act -> pMod ) )"		34209	0					
ANR	34301	Callee	snprintf		34209	0					
ANR	34302	Identifier	snprintf		34209	0					
ANR	34303	ArgumentList	namebuf		34209	1					
ANR	34304	Argument	namebuf		34209	0					
ANR	34305	Identifier	namebuf		34209	0					
ANR	34306	Argument	sizeof ( namebuf ) - 1		34209	1					
ANR	34307	AdditiveExpression	sizeof ( namebuf ) - 1		34209	0		-			
ANR	34308	SizeofExpression	sizeof ( namebuf )		34209	0					
ANR	34309	Sizeof	sizeof		34209	0					
ANR	34310	SizeofOperand	namebuf		34209	1					
ANR	34311	PrimaryExpression	1		34209	1					
ANR	34312	Argument	"""action(type=\\""%s\\"" ...)"""		34209	2					
ANR	34313	PrimaryExpression	"""action(type=\\""%s\\"" ...)"""		34209	0					
ANR	34314	Argument	modGetName ( cnfstmt -> d . act -> pMod )		34209	3					
ANR	34315	CallExpression	modGetName ( cnfstmt -> d . act -> pMod )		34209	0					
ANR	34316	Callee	modGetName		34209	0					
ANR	34317	Identifier	modGetName		34209	0					
ANR	34318	ArgumentList	cnfstmt -> d . act -> pMod		34209	1					
ANR	34319	Argument	cnfstmt -> d . act -> pMod		34209	0					
ANR	34320	PtrMemberAccess	cnfstmt -> d . act -> pMod		34209	0					
ANR	34321	MemberAccess	cnfstmt -> d . act		34209	0					
ANR	34322	PtrMemberAccess	cnfstmt -> d		34209	0					
ANR	34323	Identifier	cnfstmt		34209	0					
ANR	34324	Identifier	d		34209	1					
ANR	34325	Identifier	act		34209	1					
ANR	34326	Identifier	pMod		34209	1					
ANR	34327	ExpressionStatement	namebuf [ 255 ] = '\\0'	3486:1:91587:91606	34209	7	True				
ANR	34328	AssignmentExpression	namebuf [ 255 ] = '\\0'		34209	0		=			
ANR	34329	ArrayIndexing	namebuf [ 255 ]		34209	0					
ANR	34330	Identifier	namebuf		34209	0					
ANR	34331	PrimaryExpression	255		34209	1					
ANR	34332	PrimaryExpression	'\\0'		34209	1					
ANR	34333	ExpressionStatement	cnfstmt -> printable = ( uchar * ) strdup ( namebuf )	3487:1:91631:91675	34209	8	True				
ANR	34334	AssignmentExpression	cnfstmt -> printable = ( uchar * ) strdup ( namebuf )		34209	0		=			
ANR	34335	PtrMemberAccess	cnfstmt -> printable		34209	0					
ANR	34336	Identifier	cnfstmt		34209	0					
ANR	34337	Identifier	printable		34209	1					
ANR	34338	CastExpression	( uchar * ) strdup ( namebuf )		34209	1					
ANR	34339	CastTarget	uchar *		34209	0					
ANR	34340	CallExpression	strdup ( namebuf )		34209	1					
ANR	34341	Callee	strdup		34209	0					
ANR	34342	Identifier	strdup		34209	0					
ANR	34343	ArgumentList	namebuf		34209	1					
ANR	34344	Argument	namebuf		34209	0					
ANR	34345	Identifier	namebuf		34209	0					
ANR	34346	ExpressionStatement	nvlstChkUnused ( lst )	3488:1:91678:91697	34209	9	True				
ANR	34347	CallExpression	nvlstChkUnused ( lst )		34209	0					
ANR	34348	Callee	nvlstChkUnused		34209	0					
ANR	34349	Identifier	nvlstChkUnused		34209	0					
ANR	34350	ArgumentList	lst		34209	1					
ANR	34351	Argument	lst		34209	0					
ANR	34352	Identifier	lst		34209	0					
ANR	34353	ExpressionStatement	nvlstDestruct ( lst )	3489:1:91700:91718	34209	10	True				
ANR	34354	CallExpression	nvlstDestruct ( lst )		34209	0					
ANR	34355	Callee	nvlstDestruct		34209	0					
ANR	34356	Identifier	nvlstDestruct		34209	0					
ANR	34357	ArgumentList	lst		34209	1					
ANR	34358	Argument	lst		34209	0					
ANR	34359	Identifier	lst		34209	0					
ANR	34360	Label	done :	3490:0:91720:91724	34209	11	True				
ANR	34361	Identifier	done		34209	0					
ANR	34362	ReturnStatement	return cnfstmt ;	3490:6:91726:91740	34209	12	True				
ANR	34363	Identifier	cnfstmt		34209	0					
ANR	34364	ReturnType	struct cnfstmt *		34209	1					
ANR	34365	Identifier	cnfstmtNewAct		34209	2					
ANR	34366	ParameterList	struct nvlst * lst		34209	3					
ANR	34367	Parameter	struct nvlst * lst	3467:14:90965:90981	34209	0	True				
ANR	34368	ParameterType	struct nvlst *		34209	0					
ANR	34369	Identifier	lst		34209	1					
ANR	34370	CFGEntryNode	ENTRY		34209		True				
ANR	34371	CFGExitNode	EXIT		34209		True				
ANR	34372	Symbol	cnfstmt -> d		34209						
ANR	34373	Symbol	cnfstmt -> d . act -> pMod		34209						
ANR	34374	Symbol	actionNewInst		34209						
ANR	34375	Symbol	& cnfstmt -> d . act		34209						
ANR	34376	Symbol	lst		34209						
ANR	34377	Symbol	cnfstmt -> nodetype		34209						
ANR	34378	Symbol	* namebuf		34209						
ANR	34379	Symbol	& cnfstmt -> d		34209						
ANR	34380	Symbol	yylineno		34209						
ANR	34381	Symbol	* * cnfstmt		34209						
ANR	34382	Symbol	* cnfstmt -> d . act		34209						
ANR	34383	Symbol	* cnfstmt		34209						
ANR	34384	Symbol	cnfcurrfn		34209						
ANR	34385	Symbol	* cnfstmt -> d		34209						
ANR	34386	Symbol	RS_RET_OK_WARN		34209						
ANR	34387	Symbol	cnfstmt -> printable		34209						
ANR	34388	Symbol	NULL		34209						
ANR	34389	Symbol	cnfstmtNew		34209						
ANR	34390	Symbol	RS_RET_OK		34209						
ANR	34391	Symbol	namebuf		34209						
ANR	34392	Symbol	cnfstmt -> d . act		34209						
ANR	34393	Symbol	cnfstmt		34209						
ANR	34394	Symbol	S_ACT		34209						
ANR	34395	Symbol	strdup		34209						
ANR	34396	Symbol	localRet		34209						
ANR	34397	Symbol	modGetName		34209						
ANR	34398	Symbol	S_NOP		34209						
ANR	34399	Function	cnfstmtNewLegaAct	3493:0:91745:92339							
ANR	34400	FunctionDef	cnfstmtNewLegaAct (char * actline)		34399	0					
ANR	34401	CompoundStatement		3495:0:91795:92339	34399	0					
ANR	34402	IdentifierDeclStatement	struct cnfstmt * cnfstmt ;	3496:1:91798:91821	34399	0	True				
ANR	34403	IdentifierDecl	* cnfstmt		34399	0					
ANR	34404	IdentifierDeclType	struct cnfstmt *		34399	0					
ANR	34405	Identifier	cnfstmt		34399	1					
ANR	34406	IdentifierDeclStatement	rsRetVal localRet ;	3497:1:91824:91841	34399	1	True				
ANR	34407	IdentifierDecl	localRet		34399	0					
ANR	34408	IdentifierDeclType	rsRetVal		34399	0					
ANR	34409	Identifier	localRet		34399	1					
ANR	34410	IfStatement	if ( ( cnfstmt = cnfstmtNew ( S_ACT ) ) == NULL )		34399	2					
ANR	34411	Condition	( cnfstmt = cnfstmtNew ( S_ACT ) ) == NULL	3498:4:91847:91883	34399	0	True				
ANR	34412	EqualityExpression	( cnfstmt = cnfstmtNew ( S_ACT ) ) == NULL		34399	0		==			
ANR	34413	AssignmentExpression	cnfstmt = cnfstmtNew ( S_ACT )		34399	0		=			
ANR	34414	Identifier	cnfstmt		34399	0					
ANR	34415	CallExpression	cnfstmtNew ( S_ACT )		34399	1					
ANR	34416	Callee	cnfstmtNew		34399	0					
ANR	34417	Identifier	cnfstmtNew		34399	0					
ANR	34418	ArgumentList	S_ACT		34399	1					
ANR	34419	Argument	S_ACT		34399	0					
ANR	34420	Identifier	S_ACT		34399	0					
ANR	34421	Identifier	NULL		34399	1					
ANR	34422	GotoStatement	goto done ;	3499:2:91889:91898	34399	1	True				
ANR	34423	Identifier	done		34399	0					
ANR	34424	ExpressionStatement	cnfstmt -> printable = ( uchar * ) strdup ( ( char * ) actline )	3500:1:91901:91952	34399	3	True				
ANR	34425	AssignmentExpression	cnfstmt -> printable = ( uchar * ) strdup ( ( char * ) actline )		34399	0		=			
ANR	34426	PtrMemberAccess	cnfstmt -> printable		34399	0					
ANR	34427	Identifier	cnfstmt		34399	0					
ANR	34428	Identifier	printable		34399	1					
ANR	34429	CastExpression	( uchar * ) strdup ( ( char * ) actline )		34399	1					
ANR	34430	CastTarget	uchar *		34399	0					
ANR	34431	CallExpression	strdup ( ( char * ) actline )		34399	1					
ANR	34432	Callee	strdup		34399	0					
ANR	34433	Identifier	strdup		34399	0					
ANR	34434	ArgumentList	( char * ) actline		34399	1					
ANR	34435	Argument	( char * ) actline		34399	0					
ANR	34436	CastExpression	( char * ) actline		34399	0					
ANR	34437	CastTarget	char *		34399	0					
ANR	34438	Identifier	actline		34399	1					
ANR	34439	ExpressionStatement	"localRet = cflineDoAction ( loadConf , ( uchar * * ) & actline , & cnfstmt -> d . act )"	3501:1:91955:92026	34399	4	True				
ANR	34440	AssignmentExpression	"localRet = cflineDoAction ( loadConf , ( uchar * * ) & actline , & cnfstmt -> d . act )"		34399	0		=			
ANR	34441	Identifier	localRet		34399	0					
ANR	34442	CallExpression	"cflineDoAction ( loadConf , ( uchar * * ) & actline , & cnfstmt -> d . act )"		34399	1					
ANR	34443	Callee	cflineDoAction		34399	0					
ANR	34444	Identifier	cflineDoAction		34399	0					
ANR	34445	ArgumentList	loadConf		34399	1					
ANR	34446	Argument	loadConf		34399	0					
ANR	34447	Identifier	loadConf		34399	0					
ANR	34448	Argument	( uchar * * ) & actline		34399	1					
ANR	34449	CastExpression	( uchar * * ) & actline		34399	0					
ANR	34450	CastTarget	uchar * *		34399	0					
ANR	34451	UnaryOperationExpression	& actline		34399	1					
ANR	34452	UnaryOperator	&		34399	0					
ANR	34453	Identifier	actline		34399	1					
ANR	34454	Argument	& cnfstmt -> d . act		34399	2					
ANR	34455	UnaryOperationExpression	& cnfstmt -> d . act		34399	0					
ANR	34456	UnaryOperator	&		34399	0					
ANR	34457	MemberAccess	cnfstmt -> d . act		34399	1					
ANR	34458	PtrMemberAccess	cnfstmt -> d		34399	0					
ANR	34459	Identifier	cnfstmt		34399	0					
ANR	34460	Identifier	d		34399	1					
ANR	34461	Identifier	act		34399	1					
ANR	34462	IfStatement	if ( localRet != RS_RET_OK )		34399	5					
ANR	34463	Condition	localRet != RS_RET_OK	3502:4:92032:92052	34399	0	True				
ANR	34464	EqualityExpression	localRet != RS_RET_OK		34399	0		!=			
ANR	34465	Identifier	localRet		34399	0					
ANR	34466	Identifier	RS_RET_OK		34399	1					
ANR	34467	CompoundStatement		8:27:259:259	34399	1					
ANR	34468	ExpressionStatement	"parser_errmsg ( ""%s occured in file '%s' around line %d"" , ( localRet == RS_RET_OK_WARN ) ? ""warnings"" : ""errors"" , cnfcurrfn , yylineno )"	3503:2:92059:92207	34399	0	True				
ANR	34469	CallExpression	"parser_errmsg ( ""%s occured in file '%s' around line %d"" , ( localRet == RS_RET_OK_WARN ) ? ""warnings"" : ""errors"" , cnfcurrfn , yylineno )"		34399	0					
ANR	34470	Callee	parser_errmsg		34399	0					
ANR	34471	Identifier	parser_errmsg		34399	0					
ANR	34472	ArgumentList	"""%s occured in file '%s' around line %d"""		34399	1					
ANR	34473	Argument	"""%s occured in file '%s' around line %d"""		34399	0					
ANR	34474	PrimaryExpression	"""%s occured in file '%s' around line %d"""		34399	0					
ANR	34475	Argument	"( localRet == RS_RET_OK_WARN ) ? ""warnings"" : ""errors"""		34399	1					
ANR	34476	ConditionalExpression	"( localRet == RS_RET_OK_WARN ) ? ""warnings"" : ""errors"""		34399	0					
ANR	34477	Condition	localRet == RS_RET_OK_WARN		34399	0					
ANR	34478	EqualityExpression	localRet == RS_RET_OK_WARN		34399	0		==			
ANR	34479	Identifier	localRet		34399	0					
ANR	34480	Identifier	RS_RET_OK_WARN		34399	1					
ANR	34481	PrimaryExpression	"""warnings"""		34399	1					
ANR	34482	PrimaryExpression	"""errors"""		34399	2					
ANR	34483	Argument	cnfcurrfn		34399	2					
ANR	34484	Identifier	cnfcurrfn		34399	0					
ANR	34485	Argument	yylineno		34399	3					
ANR	34486	Identifier	yylineno		34399	0					
ANR	34487	IfStatement	if ( localRet != RS_RET_OK_WARN )		34399	1					
ANR	34488	Condition	localRet != RS_RET_OK_WARN	3506:5:92214:92239	34399	0	True				
ANR	34489	EqualityExpression	localRet != RS_RET_OK_WARN		34399	0		!=			
ANR	34490	Identifier	localRet		34399	0					
ANR	34491	Identifier	RS_RET_OK_WARN		34399	1					
ANR	34492	CompoundStatement		12:33:446:446	34399	1					
ANR	34493	ExpressionStatement	cnfstmt -> nodetype = S_NOP	3507:3:92247:92272	34399	0	True				
ANR	34494	AssignmentExpression	cnfstmt -> nodetype = S_NOP		34399	0		=			
ANR	34495	PtrMemberAccess	cnfstmt -> nodetype		34399	0					
ANR	34496	Identifier	cnfstmt		34399	0					
ANR	34497	Identifier	nodetype		34399	1					
ANR	34498	Identifier	S_NOP		34399	1					
ANR	34499	GotoStatement	goto done ;	3508:3:92299:92308	34399	1	True				
ANR	34500	Identifier	done		34399	0					
ANR	34501	Label	done :	3511:0:92317:92321	34399	6	True				
ANR	34502	Identifier	done		34399	0					
ANR	34503	ReturnStatement	return cnfstmt ;	3511:6:92323:92337	34399	7	True				
ANR	34504	Identifier	cnfstmt		34399	0					
ANR	34505	ReturnType	struct cnfstmt *		34399	1					
ANR	34506	Identifier	cnfstmtNewLegaAct		34399	2					
ANR	34507	ParameterList	char * actline		34399	3					
ANR	34508	Parameter	char * actline	3494:18:91780:91792	34399	0	True				
ANR	34509	ParameterType	char *		34399	0					
ANR	34510	Identifier	actline		34399	1					
ANR	34511	CFGEntryNode	ENTRY		34399		True				
ANR	34512	CFGExitNode	EXIT		34399		True				
ANR	34513	Symbol	cnfstmt -> printable		34399						
ANR	34514	Symbol	cnfstmt -> d		34399						
ANR	34515	Symbol	RS_RET_OK_WARN		34399						
ANR	34516	Symbol	NULL		34399						
ANR	34517	Symbol	& actline		34399						
ANR	34518	Symbol	cnfstmtNew		34399						
ANR	34519	Symbol	RS_RET_OK		34399						
ANR	34520	Symbol	actline		34399						
ANR	34521	Symbol	cflineDoAction		34399						
ANR	34522	Symbol	& cnfstmt -> d . act		34399						
ANR	34523	Symbol	cnfstmt -> nodetype		34399						
ANR	34524	Symbol	loadConf		34399						
ANR	34525	Symbol	cnfstmt		34399						
ANR	34526	Symbol	& cnfstmt -> d		34399						
ANR	34527	Symbol	yylineno		34399						
ANR	34528	Symbol	S_ACT		34399						
ANR	34529	Symbol	strdup		34399						
ANR	34530	Symbol	* cnfstmt		34399						
ANR	34531	Symbol	cnfcurrfn		34399						
ANR	34532	Symbol	localRet		34399						
ANR	34533	Symbol	S_NOP		34399						
ANR	34534	Function	getConstNumber	3519:0:92528:93627							
ANR	34535	FunctionDef	"getConstNumber (struct cnfexpr * expr , long long * l , long long * r)"		34534	0					
ANR	34536	CompoundStatement		3521:0:92604:93627	34534	0					
ANR	34537	IdentifierDeclStatement	int ret = 0 ;	3522:1:92607:92618	34534	0	True				
ANR	34538	IdentifierDecl	ret = 0		34534	0					
ANR	34539	IdentifierDeclType	int		34534	0					
ANR	34540	Identifier	ret		34534	1					
ANR	34541	AssignmentExpression	ret = 0		34534	2		=			
ANR	34542	Identifier	ret		34534	0					
ANR	34543	PrimaryExpression	0		34534	1					
ANR	34544	ExpressionStatement	cnfexprOptimize ( expr -> l )	3523:1:92621:92645	34534	1	True				
ANR	34545	CallExpression	cnfexprOptimize ( expr -> l )		34534	0					
ANR	34546	Callee	cnfexprOptimize		34534	0					
ANR	34547	Identifier	cnfexprOptimize		34534	0					
ANR	34548	ArgumentList	expr -> l		34534	1					
ANR	34549	Argument	expr -> l		34534	0					
ANR	34550	PtrMemberAccess	expr -> l		34534	0					
ANR	34551	Identifier	expr		34534	0					
ANR	34552	Identifier	l		34534	1					
ANR	34553	ExpressionStatement	cnfexprOptimize ( expr -> r )	3524:1:92648:92672	34534	2	True				
ANR	34554	CallExpression	cnfexprOptimize ( expr -> r )		34534	0					
ANR	34555	Callee	cnfexprOptimize		34534	0					
ANR	34556	Identifier	cnfexprOptimize		34534	0					
ANR	34557	ArgumentList	expr -> r		34534	1					
ANR	34558	Argument	expr -> r		34534	0					
ANR	34559	PtrMemberAccess	expr -> r		34534	0					
ANR	34560	Identifier	expr		34534	0					
ANR	34561	Identifier	r		34534	1					
ANR	34562	IfStatement	if ( expr -> l -> nodetype == 'N' )		34534	3					
ANR	34563	Condition	expr -> l -> nodetype == 'N'	3525:4:92678:92701	34534	0	True				
ANR	34564	EqualityExpression	expr -> l -> nodetype == 'N'		34534	0		==			
ANR	34565	PtrMemberAccess	expr -> l -> nodetype		34534	0					
ANR	34566	PtrMemberAccess	expr -> l		34534	0					
ANR	34567	Identifier	expr		34534	0					
ANR	34568	Identifier	l		34534	1					
ANR	34569	Identifier	nodetype		34534	1					
ANR	34570	PrimaryExpression	'N'		34534	1					
ANR	34571	CompoundStatement		5:30:99:99	34534	1					
ANR	34572	IfStatement	if ( expr -> r -> nodetype == 'N' )		34534	0					
ANR	34573	Condition	expr -> r -> nodetype == 'N'	3526:5:92711:92734	34534	0	True				
ANR	34574	EqualityExpression	expr -> r -> nodetype == 'N'		34534	0		==			
ANR	34575	PtrMemberAccess	expr -> r -> nodetype		34534	0					
ANR	34576	PtrMemberAccess	expr -> r		34534	0					
ANR	34577	Identifier	expr		34534	0					
ANR	34578	Identifier	r		34534	1					
ANR	34579	Identifier	nodetype		34534	1					
ANR	34580	PrimaryExpression	'N'		34534	1					
ANR	34581	CompoundStatement		6:31:132:132	34534	1					
ANR	34582	ExpressionStatement	ret = 1	3527:3:92742:92749	34534	0	True				
ANR	34583	AssignmentExpression	ret = 1		34534	0		=			
ANR	34584	Identifier	ret		34534	0					
ANR	34585	PrimaryExpression	1		34534	1					
ANR	34586	ExpressionStatement	* l = ( ( struct cnfnumval * ) expr -> l ) -> val	3528:3:92754:92792	34534	1	True				
ANR	34587	AssignmentExpression	* l = ( ( struct cnfnumval * ) expr -> l ) -> val		34534	0		=			
ANR	34588	UnaryOperationExpression	* l		34534	0					
ANR	34589	UnaryOperator	*		34534	0					
ANR	34590	Identifier	l		34534	1					
ANR	34591	PtrMemberAccess	( ( struct cnfnumval * ) expr -> l ) -> val		34534	1					
ANR	34592	CastExpression	( struct cnfnumval * ) expr -> l		34534	0					
ANR	34593	CastTarget	struct cnfnumval *		34534	0					
ANR	34594	PtrMemberAccess	expr -> l		34534	1					
ANR	34595	Identifier	expr		34534	0					
ANR	34596	Identifier	l		34534	1					
ANR	34597	Identifier	val		34534	1					
ANR	34598	ExpressionStatement	* r = ( ( struct cnfnumval * ) expr -> r ) -> val	3529:3:92797:92835	34534	2	True				
ANR	34599	AssignmentExpression	* r = ( ( struct cnfnumval * ) expr -> r ) -> val		34534	0		=			
ANR	34600	UnaryOperationExpression	* r		34534	0					
ANR	34601	UnaryOperator	*		34534	0					
ANR	34602	Identifier	r		34534	1					
ANR	34603	PtrMemberAccess	( ( struct cnfnumval * ) expr -> r ) -> val		34534	1					
ANR	34604	CastExpression	( struct cnfnumval * ) expr -> r		34534	0					
ANR	34605	CastTarget	struct cnfnumval *		34534	0					
ANR	34606	PtrMemberAccess	expr -> r		34534	1					
ANR	34607	Identifier	expr		34534	0					
ANR	34608	Identifier	r		34534	1					
ANR	34609	Identifier	val		34534	1					
ANR	34610	ExpressionStatement	cnfexprDestruct ( expr -> l )	3530:3:92840:92864	34534	3	True				
ANR	34611	CallExpression	cnfexprDestruct ( expr -> l )		34534	0					
ANR	34612	Callee	cnfexprDestruct		34534	0					
ANR	34613	Identifier	cnfexprDestruct		34534	0					
ANR	34614	ArgumentList	expr -> l		34534	1					
ANR	34615	Argument	expr -> l		34534	0					
ANR	34616	PtrMemberAccess	expr -> l		34534	0					
ANR	34617	Identifier	expr		34534	0					
ANR	34618	Identifier	l		34534	1					
ANR	34619	ExpressionStatement	cnfexprDestruct ( expr -> r )	3531:3:92869:92893	34534	4	True				
ANR	34620	CallExpression	cnfexprDestruct ( expr -> r )		34534	0					
ANR	34621	Callee	cnfexprDestruct		34534	0					
ANR	34622	Identifier	cnfexprDestruct		34534	0					
ANR	34623	ArgumentList	expr -> r		34534	1					
ANR	34624	Argument	expr -> r		34534	0					
ANR	34625	PtrMemberAccess	expr -> r		34534	0					
ANR	34626	Identifier	expr		34534	0					
ANR	34627	Identifier	r		34534	1					
ANR	34628	ElseStatement	else		34534	0					
ANR	34629	IfStatement	if ( expr -> r -> nodetype == 'S' )		34534	0					
ANR	34630	Condition	expr -> r -> nodetype == 'S'	3532:12:92907:92930	34534	0	True				
ANR	34631	EqualityExpression	expr -> r -> nodetype == 'S'		34534	0		==			
ANR	34632	PtrMemberAccess	expr -> r -> nodetype		34534	0					
ANR	34633	PtrMemberAccess	expr -> r		34534	0					
ANR	34634	Identifier	expr		34534	0					
ANR	34635	Identifier	r		34534	1					
ANR	34636	Identifier	nodetype		34534	1					
ANR	34637	PrimaryExpression	'S'		34534	1					
ANR	34638	CompoundStatement		12:38:328:328	34534	1					
ANR	34639	ExpressionStatement	ret = 1	3533:3:92938:92945	34534	0	True				
ANR	34640	AssignmentExpression	ret = 1		34534	0		=			
ANR	34641	Identifier	ret		34534	0					
ANR	34642	PrimaryExpression	1		34534	1					
ANR	34643	ExpressionStatement	* l = ( ( struct cnfnumval * ) expr -> l ) -> val	3534:3:92950:92988	34534	1	True				
ANR	34644	AssignmentExpression	* l = ( ( struct cnfnumval * ) expr -> l ) -> val		34534	0		=			
ANR	34645	UnaryOperationExpression	* l		34534	0					
ANR	34646	UnaryOperator	*		34534	0					
ANR	34647	Identifier	l		34534	1					
ANR	34648	PtrMemberAccess	( ( struct cnfnumval * ) expr -> l ) -> val		34534	1					
ANR	34649	CastExpression	( struct cnfnumval * ) expr -> l		34534	0					
ANR	34650	CastTarget	struct cnfnumval *		34534	0					
ANR	34651	PtrMemberAccess	expr -> l		34534	1					
ANR	34652	Identifier	expr		34534	0					
ANR	34653	Identifier	l		34534	1					
ANR	34654	Identifier	val		34534	1					
ANR	34655	ExpressionStatement	"* r = es_str2num ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"	3535:3:92993:93053	34534	2	True				
ANR	34656	AssignmentExpression	"* r = es_str2num ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		34534	0		=			
ANR	34657	UnaryOperationExpression	* r		34534	0					
ANR	34658	UnaryOperator	*		34534	0					
ANR	34659	Identifier	r		34534	1					
ANR	34660	CallExpression	"es_str2num ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		34534	1					
ANR	34661	Callee	es_str2num		34534	0					
ANR	34662	Identifier	es_str2num		34534	0					
ANR	34663	ArgumentList	( ( struct cnfstringval * ) expr -> r ) -> estr		34534	1					
ANR	34664	Argument	( ( struct cnfstringval * ) expr -> r ) -> estr		34534	0					
ANR	34665	PtrMemberAccess	( ( struct cnfstringval * ) expr -> r ) -> estr		34534	0					
ANR	34666	CastExpression	( struct cnfstringval * ) expr -> r		34534	0					
ANR	34667	CastTarget	struct cnfstringval *		34534	0					
ANR	34668	PtrMemberAccess	expr -> r		34534	1					
ANR	34669	Identifier	expr		34534	0					
ANR	34670	Identifier	r		34534	1					
ANR	34671	Identifier	estr		34534	1					
ANR	34672	Argument	NULL		34534	1					
ANR	34673	Identifier	NULL		34534	0					
ANR	34674	ExpressionStatement	cnfexprDestruct ( expr -> l )	3536:3:93058:93082	34534	3	True				
ANR	34675	CallExpression	cnfexprDestruct ( expr -> l )		34534	0					
ANR	34676	Callee	cnfexprDestruct		34534	0					
ANR	34677	Identifier	cnfexprDestruct		34534	0					
ANR	34678	ArgumentList	expr -> l		34534	1					
ANR	34679	Argument	expr -> l		34534	0					
ANR	34680	PtrMemberAccess	expr -> l		34534	0					
ANR	34681	Identifier	expr		34534	0					
ANR	34682	Identifier	l		34534	1					
ANR	34683	ExpressionStatement	cnfexprDestruct ( expr -> r )	3537:3:93087:93111	34534	4	True				
ANR	34684	CallExpression	cnfexprDestruct ( expr -> r )		34534	0					
ANR	34685	Callee	cnfexprDestruct		34534	0					
ANR	34686	Identifier	cnfexprDestruct		34534	0					
ANR	34687	ArgumentList	expr -> r		34534	1					
ANR	34688	Argument	expr -> r		34534	0					
ANR	34689	PtrMemberAccess	expr -> r		34534	0					
ANR	34690	Identifier	expr		34534	0					
ANR	34691	Identifier	r		34534	1					
ANR	34692	ElseStatement	else		34534	0					
ANR	34693	IfStatement	if ( expr -> l -> nodetype == 'S' )		34534	0					
ANR	34694	Condition	expr -> l -> nodetype == 'S'	3539:11:93128:93151	34534	0	True				
ANR	34695	EqualityExpression	expr -> l -> nodetype == 'S'		34534	0		==			
ANR	34696	PtrMemberAccess	expr -> l -> nodetype		34534	0					
ANR	34697	PtrMemberAccess	expr -> l		34534	0					
ANR	34698	Identifier	expr		34534	0					
ANR	34699	Identifier	l		34534	1					
ANR	34700	Identifier	nodetype		34534	1					
ANR	34701	PrimaryExpression	'S'		34534	1					
ANR	34702	CompoundStatement		19:37:549:549	34534	1					
ANR	34703	IfStatement	if ( expr -> r -> nodetype == 'N' )		34534	0					
ANR	34704	Condition	expr -> r -> nodetype == 'N'	3540:5:93161:93184	34534	0	True				
ANR	34705	EqualityExpression	expr -> r -> nodetype == 'N'		34534	0		==			
ANR	34706	PtrMemberAccess	expr -> r -> nodetype		34534	0					
ANR	34707	PtrMemberAccess	expr -> r		34534	0					
ANR	34708	Identifier	expr		34534	0					
ANR	34709	Identifier	r		34534	1					
ANR	34710	Identifier	nodetype		34534	1					
ANR	34711	PrimaryExpression	'N'		34534	1					
ANR	34712	CompoundStatement		20:31:582:582	34534	1					
ANR	34713	ExpressionStatement	ret = 1	3541:3:93192:93199	34534	0	True				
ANR	34714	AssignmentExpression	ret = 1		34534	0		=			
ANR	34715	Identifier	ret		34534	0					
ANR	34716	PrimaryExpression	1		34534	1					
ANR	34717	ExpressionStatement	"* l = es_str2num ( ( ( struct cnfstringval * ) expr -> l ) -> estr , NULL )"	3542:3:93204:93264	34534	1	True				
ANR	34718	AssignmentExpression	"* l = es_str2num ( ( ( struct cnfstringval * ) expr -> l ) -> estr , NULL )"		34534	0		=			
ANR	34719	UnaryOperationExpression	* l		34534	0					
ANR	34720	UnaryOperator	*		34534	0					
ANR	34721	Identifier	l		34534	1					
ANR	34722	CallExpression	"es_str2num ( ( ( struct cnfstringval * ) expr -> l ) -> estr , NULL )"		34534	1					
ANR	34723	Callee	es_str2num		34534	0					
ANR	34724	Identifier	es_str2num		34534	0					
ANR	34725	ArgumentList	( ( struct cnfstringval * ) expr -> l ) -> estr		34534	1					
ANR	34726	Argument	( ( struct cnfstringval * ) expr -> l ) -> estr		34534	0					
ANR	34727	PtrMemberAccess	( ( struct cnfstringval * ) expr -> l ) -> estr		34534	0					
ANR	34728	CastExpression	( struct cnfstringval * ) expr -> l		34534	0					
ANR	34729	CastTarget	struct cnfstringval *		34534	0					
ANR	34730	PtrMemberAccess	expr -> l		34534	1					
ANR	34731	Identifier	expr		34534	0					
ANR	34732	Identifier	l		34534	1					
ANR	34733	Identifier	estr		34534	1					
ANR	34734	Argument	NULL		34534	1					
ANR	34735	Identifier	NULL		34534	0					
ANR	34736	ExpressionStatement	* r = ( ( struct cnfnumval * ) expr -> r ) -> val	3543:3:93269:93307	34534	2	True				
ANR	34737	AssignmentExpression	* r = ( ( struct cnfnumval * ) expr -> r ) -> val		34534	0		=			
ANR	34738	UnaryOperationExpression	* r		34534	0					
ANR	34739	UnaryOperator	*		34534	0					
ANR	34740	Identifier	r		34534	1					
ANR	34741	PtrMemberAccess	( ( struct cnfnumval * ) expr -> r ) -> val		34534	1					
ANR	34742	CastExpression	( struct cnfnumval * ) expr -> r		34534	0					
ANR	34743	CastTarget	struct cnfnumval *		34534	0					
ANR	34744	PtrMemberAccess	expr -> r		34534	1					
ANR	34745	Identifier	expr		34534	0					
ANR	34746	Identifier	r		34534	1					
ANR	34747	Identifier	val		34534	1					
ANR	34748	ExpressionStatement	cnfexprDestruct ( expr -> l )	3544:3:93312:93336	34534	3	True				
ANR	34749	CallExpression	cnfexprDestruct ( expr -> l )		34534	0					
ANR	34750	Callee	cnfexprDestruct		34534	0					
ANR	34751	Identifier	cnfexprDestruct		34534	0					
ANR	34752	ArgumentList	expr -> l		34534	1					
ANR	34753	Argument	expr -> l		34534	0					
ANR	34754	PtrMemberAccess	expr -> l		34534	0					
ANR	34755	Identifier	expr		34534	0					
ANR	34756	Identifier	l		34534	1					
ANR	34757	ExpressionStatement	cnfexprDestruct ( expr -> r )	3545:3:93341:93365	34534	4	True				
ANR	34758	CallExpression	cnfexprDestruct ( expr -> r )		34534	0					
ANR	34759	Callee	cnfexprDestruct		34534	0					
ANR	34760	Identifier	cnfexprDestruct		34534	0					
ANR	34761	ArgumentList	expr -> r		34534	1					
ANR	34762	Argument	expr -> r		34534	0					
ANR	34763	PtrMemberAccess	expr -> r		34534	0					
ANR	34764	Identifier	expr		34534	0					
ANR	34765	Identifier	r		34534	1					
ANR	34766	ElseStatement	else		34534	0					
ANR	34767	IfStatement	if ( expr -> r -> nodetype == 'S' )		34534	0					
ANR	34768	Condition	expr -> r -> nodetype == 'S'	3546:12:93379:93402	34534	0	True				
ANR	34769	EqualityExpression	expr -> r -> nodetype == 'S'		34534	0		==			
ANR	34770	PtrMemberAccess	expr -> r -> nodetype		34534	0					
ANR	34771	PtrMemberAccess	expr -> r		34534	0					
ANR	34772	Identifier	expr		34534	0					
ANR	34773	Identifier	r		34534	1					
ANR	34774	Identifier	nodetype		34534	1					
ANR	34775	PrimaryExpression	'S'		34534	1					
ANR	34776	CompoundStatement		26:38:800:800	34534	1					
ANR	34777	ExpressionStatement	ret = 1	3547:3:93410:93417	34534	0	True				
ANR	34778	AssignmentExpression	ret = 1		34534	0		=			
ANR	34779	Identifier	ret		34534	0					
ANR	34780	PrimaryExpression	1		34534	1					
ANR	34781	ExpressionStatement	"* l = es_str2num ( ( ( struct cnfstringval * ) expr -> l ) -> estr , NULL )"	3548:3:93422:93482	34534	1	True				
ANR	34782	AssignmentExpression	"* l = es_str2num ( ( ( struct cnfstringval * ) expr -> l ) -> estr , NULL )"		34534	0		=			
ANR	34783	UnaryOperationExpression	* l		34534	0					
ANR	34784	UnaryOperator	*		34534	0					
ANR	34785	Identifier	l		34534	1					
ANR	34786	CallExpression	"es_str2num ( ( ( struct cnfstringval * ) expr -> l ) -> estr , NULL )"		34534	1					
ANR	34787	Callee	es_str2num		34534	0					
ANR	34788	Identifier	es_str2num		34534	0					
ANR	34789	ArgumentList	( ( struct cnfstringval * ) expr -> l ) -> estr		34534	1					
ANR	34790	Argument	( ( struct cnfstringval * ) expr -> l ) -> estr		34534	0					
ANR	34791	PtrMemberAccess	( ( struct cnfstringval * ) expr -> l ) -> estr		34534	0					
ANR	34792	CastExpression	( struct cnfstringval * ) expr -> l		34534	0					
ANR	34793	CastTarget	struct cnfstringval *		34534	0					
ANR	34794	PtrMemberAccess	expr -> l		34534	1					
ANR	34795	Identifier	expr		34534	0					
ANR	34796	Identifier	l		34534	1					
ANR	34797	Identifier	estr		34534	1					
ANR	34798	Argument	NULL		34534	1					
ANR	34799	Identifier	NULL		34534	0					
ANR	34800	ExpressionStatement	"* r = es_str2num ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"	3549:3:93487:93547	34534	2	True				
ANR	34801	AssignmentExpression	"* r = es_str2num ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		34534	0		=			
ANR	34802	UnaryOperationExpression	* r		34534	0					
ANR	34803	UnaryOperator	*		34534	0					
ANR	34804	Identifier	r		34534	1					
ANR	34805	CallExpression	"es_str2num ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		34534	1					
ANR	34806	Callee	es_str2num		34534	0					
ANR	34807	Identifier	es_str2num		34534	0					
ANR	34808	ArgumentList	( ( struct cnfstringval * ) expr -> r ) -> estr		34534	1					
ANR	34809	Argument	( ( struct cnfstringval * ) expr -> r ) -> estr		34534	0					
ANR	34810	PtrMemberAccess	( ( struct cnfstringval * ) expr -> r ) -> estr		34534	0					
ANR	34811	CastExpression	( struct cnfstringval * ) expr -> r		34534	0					
ANR	34812	CastTarget	struct cnfstringval *		34534	0					
ANR	34813	PtrMemberAccess	expr -> r		34534	1					
ANR	34814	Identifier	expr		34534	0					
ANR	34815	Identifier	r		34534	1					
ANR	34816	Identifier	estr		34534	1					
ANR	34817	Argument	NULL		34534	1					
ANR	34818	Identifier	NULL		34534	0					
ANR	34819	ExpressionStatement	cnfexprDestruct ( expr -> l )	3550:3:93552:93576	34534	3	True				
ANR	34820	CallExpression	cnfexprDestruct ( expr -> l )		34534	0					
ANR	34821	Callee	cnfexprDestruct		34534	0					
ANR	34822	Identifier	cnfexprDestruct		34534	0					
ANR	34823	ArgumentList	expr -> l		34534	1					
ANR	34824	Argument	expr -> l		34534	0					
ANR	34825	PtrMemberAccess	expr -> l		34534	0					
ANR	34826	Identifier	expr		34534	0					
ANR	34827	Identifier	l		34534	1					
ANR	34828	ExpressionStatement	cnfexprDestruct ( expr -> r )	3551:3:93581:93605	34534	4	True				
ANR	34829	CallExpression	cnfexprDestruct ( expr -> r )		34534	0					
ANR	34830	Callee	cnfexprDestruct		34534	0					
ANR	34831	Identifier	cnfexprDestruct		34534	0					
ANR	34832	ArgumentList	expr -> r		34534	1					
ANR	34833	Argument	expr -> r		34534	0					
ANR	34834	PtrMemberAccess	expr -> r		34534	0					
ANR	34835	Identifier	expr		34534	0					
ANR	34836	Identifier	r		34534	1					
ANR	34837	ReturnStatement	return ret ;	3554:1:93615:93625	34534	4	True				
ANR	34838	Identifier	ret		34534	0					
ANR	34839	ReturnType	static int		34534	1					
ANR	34840	Identifier	getConstNumber		34534	2					
ANR	34841	ParameterList	"struct cnfexpr * expr , long long * l , long long * r"		34534	3					
ANR	34842	Parameter	struct cnfexpr * expr	3520:15:92554:92573	34534	0	True				
ANR	34843	ParameterType	struct cnfexpr *		34534	0					
ANR	34844	Identifier	expr		34534	1					
ANR	34845	Parameter	long long * l	3520:37:92576:92587	34534	1	True				
ANR	34846	ParameterType	long long *		34534	0					
ANR	34847	Identifier	l		34534	1					
ANR	34848	Parameter	long long * r	3520:51:92590:92601	34534	2	True				
ANR	34849	ParameterType	long long *		34534	0					
ANR	34850	Identifier	r		34534	1					
ANR	34851	CFGEntryNode	ENTRY		34534		True				
ANR	34852	CFGExitNode	EXIT		34534		True				
ANR	34853	Symbol	ret		34534						
ANR	34854	Symbol	* expr -> r		34534						
ANR	34855	Symbol	NULL		34534						
ANR	34856	Symbol	expr -> r		34534						
ANR	34857	Symbol	* expr -> l		34534						
ANR	34858	Symbol	( ( struct cnfstringval * ) expr -> r ) -> estr		34534						
ANR	34859	Symbol	expr -> l -> nodetype		34534						
ANR	34860	Symbol	l		34534						
ANR	34861	Symbol	expr -> l		34534						
ANR	34862	Symbol	( ( struct cnfstringval * ) expr -> l ) -> estr		34534						
ANR	34863	Symbol	es_str2num		34534						
ANR	34864	Symbol	r		34534						
ANR	34865	Symbol	expr -> r -> nodetype		34534						
ANR	34866	Symbol	( ( struct cnfnumval * ) expr -> l ) -> val		34534						
ANR	34867	Symbol	* expr		34534						
ANR	34868	Symbol	* l		34534						
ANR	34869	Symbol	* * expr		34534						
ANR	34870	Symbol	( ( struct cnfnumval * ) expr -> r ) -> val		34534						
ANR	34871	Symbol	expr		34534						
ANR	34872	Symbol	* r		34534						
ANR	34873	Function	constFoldConcat	3559:0:93679:95280							
ANR	34874	FunctionDef	constFoldConcat (struct cnfexpr * expr)		34873	0					
ANR	34875	CompoundStatement		3561:0:93729:95280	34873	0					
ANR	34876	IdentifierDeclStatement	es_str_t * estr ;	3562:1:93732:93746	34873	0	True				
ANR	34877	IdentifierDecl	* estr		34873	0					
ANR	34878	IdentifierDeclType	es_str_t *		34873	0					
ANR	34879	Identifier	estr		34873	1					
ANR	34880	ExpressionStatement	cnfexprOptimize ( expr -> l )	3563:1:93749:93773	34873	1	True				
ANR	34881	CallExpression	cnfexprOptimize ( expr -> l )		34873	0					
ANR	34882	Callee	cnfexprOptimize		34873	0					
ANR	34883	Identifier	cnfexprOptimize		34873	0					
ANR	34884	ArgumentList	expr -> l		34873	1					
ANR	34885	Argument	expr -> l		34873	0					
ANR	34886	PtrMemberAccess	expr -> l		34873	0					
ANR	34887	Identifier	expr		34873	0					
ANR	34888	Identifier	l		34873	1					
ANR	34889	ExpressionStatement	cnfexprOptimize ( expr -> r )	3564:1:93776:93800	34873	2	True				
ANR	34890	CallExpression	cnfexprOptimize ( expr -> r )		34873	0					
ANR	34891	Callee	cnfexprOptimize		34873	0					
ANR	34892	Identifier	cnfexprOptimize		34873	0					
ANR	34893	ArgumentList	expr -> r		34873	1					
ANR	34894	Argument	expr -> r		34873	0					
ANR	34895	PtrMemberAccess	expr -> r		34873	0					
ANR	34896	Identifier	expr		34873	0					
ANR	34897	Identifier	r		34873	1					
ANR	34898	IfStatement	if ( expr -> l -> nodetype == 'S' )		34873	3					
ANR	34899	Condition	expr -> l -> nodetype == 'S'	3565:4:93806:93829	34873	0	True				
ANR	34900	EqualityExpression	expr -> l -> nodetype == 'S'		34873	0		==			
ANR	34901	PtrMemberAccess	expr -> l -> nodetype		34873	0					
ANR	34902	PtrMemberAccess	expr -> l		34873	0					
ANR	34903	Identifier	expr		34873	0					
ANR	34904	Identifier	l		34873	1					
ANR	34905	Identifier	nodetype		34873	1					
ANR	34906	PrimaryExpression	'S'		34873	1					
ANR	34907	CompoundStatement		5:30:102:102	34873	1					
ANR	34908	IfStatement	if ( expr -> r -> nodetype == 'S' )		34873	0					
ANR	34909	Condition	expr -> r -> nodetype == 'S'	3566:5:93839:93862	34873	0	True				
ANR	34910	EqualityExpression	expr -> r -> nodetype == 'S'		34873	0		==			
ANR	34911	PtrMemberAccess	expr -> r -> nodetype		34873	0					
ANR	34912	PtrMemberAccess	expr -> r		34873	0					
ANR	34913	Identifier	expr		34873	0					
ANR	34914	Identifier	r		34873	1					
ANR	34915	Identifier	nodetype		34873	1					
ANR	34916	PrimaryExpression	'S'		34873	1					
ANR	34917	CompoundStatement		6:31:135:135	34873	1					
ANR	34918	ExpressionStatement	estr = ( ( struct cnfstringval * ) expr -> l ) -> estr	3567:3:93870:93914	34873	0	True				
ANR	34919	AssignmentExpression	estr = ( ( struct cnfstringval * ) expr -> l ) -> estr		34873	0		=			
ANR	34920	Identifier	estr		34873	0					
ANR	34921	PtrMemberAccess	( ( struct cnfstringval * ) expr -> l ) -> estr		34873	1					
ANR	34922	CastExpression	( struct cnfstringval * ) expr -> l		34873	0					
ANR	34923	CastTarget	struct cnfstringval *		34873	0					
ANR	34924	PtrMemberAccess	expr -> l		34873	1					
ANR	34925	Identifier	expr		34873	0					
ANR	34926	Identifier	l		34873	1					
ANR	34927	Identifier	estr		34873	1					
ANR	34928	ExpressionStatement	( ( struct cnfstringval * ) expr -> l ) -> estr = NULL	3568:3:93919:93963	34873	1	True				
ANR	34929	AssignmentExpression	( ( struct cnfstringval * ) expr -> l ) -> estr = NULL		34873	0		=			
ANR	34930	PtrMemberAccess	( ( struct cnfstringval * ) expr -> l ) -> estr		34873	0					
ANR	34931	CastExpression	( struct cnfstringval * ) expr -> l		34873	0					
ANR	34932	CastTarget	struct cnfstringval *		34873	0					
ANR	34933	PtrMemberAccess	expr -> l		34873	1					
ANR	34934	Identifier	expr		34873	0					
ANR	34935	Identifier	l		34873	1					
ANR	34936	Identifier	estr		34873	1					
ANR	34937	Identifier	NULL		34873	1					
ANR	34938	ExpressionStatement	"es_addStr ( & estr , ( ( struct cnfstringval * ) expr -> r ) -> estr )"	3569:3:93968:94023	34873	2	True				
ANR	34939	CallExpression	"es_addStr ( & estr , ( ( struct cnfstringval * ) expr -> r ) -> estr )"		34873	0					
ANR	34940	Callee	es_addStr		34873	0					
ANR	34941	Identifier	es_addStr		34873	0					
ANR	34942	ArgumentList	& estr		34873	1					
ANR	34943	Argument	& estr		34873	0					
ANR	34944	UnaryOperationExpression	& estr		34873	0					
ANR	34945	UnaryOperator	&		34873	0					
ANR	34946	Identifier	estr		34873	1					
ANR	34947	Argument	( ( struct cnfstringval * ) expr -> r ) -> estr		34873	1					
ANR	34948	PtrMemberAccess	( ( struct cnfstringval * ) expr -> r ) -> estr		34873	0					
ANR	34949	CastExpression	( struct cnfstringval * ) expr -> r		34873	0					
ANR	34950	CastTarget	struct cnfstringval *		34873	0					
ANR	34951	PtrMemberAccess	expr -> r		34873	1					
ANR	34952	Identifier	expr		34873	0					
ANR	34953	Identifier	r		34873	1					
ANR	34954	Identifier	estr		34873	1					
ANR	34955	ExpressionStatement	cnfexprDestruct ( expr -> l )	3570:3:94028:94052	34873	3	True				
ANR	34956	CallExpression	cnfexprDestruct ( expr -> l )		34873	0					
ANR	34957	Callee	cnfexprDestruct		34873	0					
ANR	34958	Identifier	cnfexprDestruct		34873	0					
ANR	34959	ArgumentList	expr -> l		34873	1					
ANR	34960	Argument	expr -> l		34873	0					
ANR	34961	PtrMemberAccess	expr -> l		34873	0					
ANR	34962	Identifier	expr		34873	0					
ANR	34963	Identifier	l		34873	1					
ANR	34964	ExpressionStatement	cnfexprDestruct ( expr -> r )	3571:3:94057:94081	34873	4	True				
ANR	34965	CallExpression	cnfexprDestruct ( expr -> r )		34873	0					
ANR	34966	Callee	cnfexprDestruct		34873	0					
ANR	34967	Identifier	cnfexprDestruct		34873	0					
ANR	34968	ArgumentList	expr -> r		34873	1					
ANR	34969	Argument	expr -> r		34873	0					
ANR	34970	PtrMemberAccess	expr -> r		34873	0					
ANR	34971	Identifier	expr		34873	0					
ANR	34972	Identifier	r		34873	1					
ANR	34973	ExpressionStatement	expr -> nodetype = 'S'	3572:3:94086:94106	34873	5	True				
ANR	34974	AssignmentExpression	expr -> nodetype = 'S'		34873	0		=			
ANR	34975	PtrMemberAccess	expr -> nodetype		34873	0					
ANR	34976	Identifier	expr		34873	0					
ANR	34977	Identifier	nodetype		34873	1					
ANR	34978	PrimaryExpression	'S'		34873	1					
ANR	34979	ExpressionStatement	( ( struct cnfstringval * ) expr ) -> estr = estr	3573:3:94111:94152	34873	6	True				
ANR	34980	AssignmentExpression	( ( struct cnfstringval * ) expr ) -> estr = estr		34873	0		=			
ANR	34981	PtrMemberAccess	( ( struct cnfstringval * ) expr ) -> estr		34873	0					
ANR	34982	CastExpression	( struct cnfstringval * ) expr		34873	0					
ANR	34983	CastTarget	struct cnfstringval *		34873	0					
ANR	34984	Identifier	expr		34873	1					
ANR	34985	Identifier	estr		34873	1					
ANR	34986	Identifier	estr		34873	1					
ANR	34987	ElseStatement	else		34873	0					
ANR	34988	IfStatement	if ( expr -> r -> nodetype == 'N' )		34873	0					
ANR	34989	Condition	expr -> r -> nodetype == 'N'	3574:12:94166:94189	34873	0	True				
ANR	34990	EqualityExpression	expr -> r -> nodetype == 'N'		34873	0		==			
ANR	34991	PtrMemberAccess	expr -> r -> nodetype		34873	0					
ANR	34992	PtrMemberAccess	expr -> r		34873	0					
ANR	34993	Identifier	expr		34873	0					
ANR	34994	Identifier	r		34873	1					
ANR	34995	Identifier	nodetype		34873	1					
ANR	34996	PrimaryExpression	'N'		34873	1					
ANR	34997	CompoundStatement		15:3:467:483	34873	1					
ANR	34998	IdentifierDeclStatement	es_str_t * numstr ;	3575:3:94197:94213	34873	0	True				
ANR	34999	IdentifierDecl	* numstr		34873	0					
ANR	35000	IdentifierDeclType	es_str_t *		34873	0					
ANR	35001	Identifier	numstr		34873	1					
ANR	35002	ExpressionStatement	estr = ( ( struct cnfstringval * ) expr -> l ) -> estr	3576:3:94218:94262	34873	1	True				
ANR	35003	AssignmentExpression	estr = ( ( struct cnfstringval * ) expr -> l ) -> estr		34873	0		=			
ANR	35004	Identifier	estr		34873	0					
ANR	35005	PtrMemberAccess	( ( struct cnfstringval * ) expr -> l ) -> estr		34873	1					
ANR	35006	CastExpression	( struct cnfstringval * ) expr -> l		34873	0					
ANR	35007	CastTarget	struct cnfstringval *		34873	0					
ANR	35008	PtrMemberAccess	expr -> l		34873	1					
ANR	35009	Identifier	expr		34873	0					
ANR	35010	Identifier	l		34873	1					
ANR	35011	Identifier	estr		34873	1					
ANR	35012	ExpressionStatement	( ( struct cnfstringval * ) expr -> l ) -> estr = NULL	3577:3:94267:94311	34873	2	True				
ANR	35013	AssignmentExpression	( ( struct cnfstringval * ) expr -> l ) -> estr = NULL		34873	0		=			
ANR	35014	PtrMemberAccess	( ( struct cnfstringval * ) expr -> l ) -> estr		34873	0					
ANR	35015	CastExpression	( struct cnfstringval * ) expr -> l		34873	0					
ANR	35016	CastTarget	struct cnfstringval *		34873	0					
ANR	35017	PtrMemberAccess	expr -> l		34873	1					
ANR	35018	Identifier	expr		34873	0					
ANR	35019	Identifier	l		34873	1					
ANR	35020	Identifier	estr		34873	1					
ANR	35021	Identifier	NULL		34873	1					
ANR	35022	ExpressionStatement	numstr = es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> r ) -> val )	3578:3:94316:94379	34873	3	True				
ANR	35023	AssignmentExpression	numstr = es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> r ) -> val )		34873	0		=			
ANR	35024	Identifier	numstr		34873	0					
ANR	35025	CallExpression	es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> r ) -> val )		34873	1					
ANR	35026	Callee	es_newStrFromNumber		34873	0					
ANR	35027	Identifier	es_newStrFromNumber		34873	0					
ANR	35028	ArgumentList	( ( struct cnfnumval * ) expr -> r ) -> val		34873	1					
ANR	35029	Argument	( ( struct cnfnumval * ) expr -> r ) -> val		34873	0					
ANR	35030	PtrMemberAccess	( ( struct cnfnumval * ) expr -> r ) -> val		34873	0					
ANR	35031	CastExpression	( struct cnfnumval * ) expr -> r		34873	0					
ANR	35032	CastTarget	struct cnfnumval *		34873	0					
ANR	35033	PtrMemberAccess	expr -> r		34873	1					
ANR	35034	Identifier	expr		34873	0					
ANR	35035	Identifier	r		34873	1					
ANR	35036	Identifier	val		34873	1					
ANR	35037	ExpressionStatement	"es_addStr ( & estr , numstr )"	3579:3:94384:94408	34873	4	True				
ANR	35038	CallExpression	"es_addStr ( & estr , numstr )"		34873	0					
ANR	35039	Callee	es_addStr		34873	0					
ANR	35040	Identifier	es_addStr		34873	0					
ANR	35041	ArgumentList	& estr		34873	1					
ANR	35042	Argument	& estr		34873	0					
ANR	35043	UnaryOperationExpression	& estr		34873	0					
ANR	35044	UnaryOperator	&		34873	0					
ANR	35045	Identifier	estr		34873	1					
ANR	35046	Argument	numstr		34873	1					
ANR	35047	Identifier	numstr		34873	0					
ANR	35048	ExpressionStatement	es_deleteStr ( numstr )	3580:3:94413:94433	34873	5	True				
ANR	35049	CallExpression	es_deleteStr ( numstr )		34873	0					
ANR	35050	Callee	es_deleteStr		34873	0					
ANR	35051	Identifier	es_deleteStr		34873	0					
ANR	35052	ArgumentList	numstr		34873	1					
ANR	35053	Argument	numstr		34873	0					
ANR	35054	Identifier	numstr		34873	0					
ANR	35055	ExpressionStatement	cnfexprDestruct ( expr -> l )	3581:3:94438:94462	34873	6	True				
ANR	35056	CallExpression	cnfexprDestruct ( expr -> l )		34873	0					
ANR	35057	Callee	cnfexprDestruct		34873	0					
ANR	35058	Identifier	cnfexprDestruct		34873	0					
ANR	35059	ArgumentList	expr -> l		34873	1					
ANR	35060	Argument	expr -> l		34873	0					
ANR	35061	PtrMemberAccess	expr -> l		34873	0					
ANR	35062	Identifier	expr		34873	0					
ANR	35063	Identifier	l		34873	1					
ANR	35064	ExpressionStatement	cnfexprDestruct ( expr -> r )	3582:3:94467:94491	34873	7	True				
ANR	35065	CallExpression	cnfexprDestruct ( expr -> r )		34873	0					
ANR	35066	Callee	cnfexprDestruct		34873	0					
ANR	35067	Identifier	cnfexprDestruct		34873	0					
ANR	35068	ArgumentList	expr -> r		34873	1					
ANR	35069	Argument	expr -> r		34873	0					
ANR	35070	PtrMemberAccess	expr -> r		34873	0					
ANR	35071	Identifier	expr		34873	0					
ANR	35072	Identifier	r		34873	1					
ANR	35073	ExpressionStatement	expr -> nodetype = 'S'	3583:3:94496:94516	34873	8	True				
ANR	35074	AssignmentExpression	expr -> nodetype = 'S'		34873	0		=			
ANR	35075	PtrMemberAccess	expr -> nodetype		34873	0					
ANR	35076	Identifier	expr		34873	0					
ANR	35077	Identifier	nodetype		34873	1					
ANR	35078	PrimaryExpression	'S'		34873	1					
ANR	35079	ExpressionStatement	( ( struct cnfstringval * ) expr ) -> estr = estr	3584:3:94521:94562	34873	9	True				
ANR	35080	AssignmentExpression	( ( struct cnfstringval * ) expr ) -> estr = estr		34873	0		=			
ANR	35081	PtrMemberAccess	( ( struct cnfstringval * ) expr ) -> estr		34873	0					
ANR	35082	CastExpression	( struct cnfstringval * ) expr		34873	0					
ANR	35083	CastTarget	struct cnfstringval *		34873	0					
ANR	35084	Identifier	expr		34873	1					
ANR	35085	Identifier	estr		34873	1					
ANR	35086	Identifier	estr		34873	1					
ANR	35087	ElseStatement	else		34873	0					
ANR	35088	IfStatement	if ( expr -> l -> nodetype == 'N' )		34873	0					
ANR	35089	Condition	expr -> l -> nodetype == 'N'	3586:11:94579:94602	34873	0	True				
ANR	35090	EqualityExpression	expr -> l -> nodetype == 'N'		34873	0		==			
ANR	35091	PtrMemberAccess	expr -> l -> nodetype		34873	0					
ANR	35092	PtrMemberAccess	expr -> l		34873	0					
ANR	35093	Identifier	expr		34873	0					
ANR	35094	Identifier	l		34873	1					
ANR	35095	Identifier	nodetype		34873	1					
ANR	35096	PrimaryExpression	'N'		34873	1					
ANR	35097	CompoundStatement		26:37:875:875	34873	1					
ANR	35098	IfStatement	if ( expr -> r -> nodetype == 'S' )		34873	0					
ANR	35099	Condition	expr -> r -> nodetype == 'S'	3587:5:94612:94635	34873	0	True				
ANR	35100	EqualityExpression	expr -> r -> nodetype == 'S'		34873	0		==			
ANR	35101	PtrMemberAccess	expr -> r -> nodetype		34873	0					
ANR	35102	PtrMemberAccess	expr -> r		34873	0					
ANR	35103	Identifier	expr		34873	0					
ANR	35104	Identifier	r		34873	1					
ANR	35105	Identifier	nodetype		34873	1					
ANR	35106	PrimaryExpression	'S'		34873	1					
ANR	35107	CompoundStatement		27:31:908:908	34873	1					
ANR	35108	ExpressionStatement	estr = es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> l ) -> val )	3588:3:94643:94704	34873	0	True				
ANR	35109	AssignmentExpression	estr = es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> l ) -> val )		34873	0		=			
ANR	35110	Identifier	estr		34873	0					
ANR	35111	CallExpression	es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> l ) -> val )		34873	1					
ANR	35112	Callee	es_newStrFromNumber		34873	0					
ANR	35113	Identifier	es_newStrFromNumber		34873	0					
ANR	35114	ArgumentList	( ( struct cnfnumval * ) expr -> l ) -> val		34873	1					
ANR	35115	Argument	( ( struct cnfnumval * ) expr -> l ) -> val		34873	0					
ANR	35116	PtrMemberAccess	( ( struct cnfnumval * ) expr -> l ) -> val		34873	0					
ANR	35117	CastExpression	( struct cnfnumval * ) expr -> l		34873	0					
ANR	35118	CastTarget	struct cnfnumval *		34873	0					
ANR	35119	PtrMemberAccess	expr -> l		34873	1					
ANR	35120	Identifier	expr		34873	0					
ANR	35121	Identifier	l		34873	1					
ANR	35122	Identifier	val		34873	1					
ANR	35123	ExpressionStatement	"es_addStr ( & estr , ( ( struct cnfstringval * ) expr -> r ) -> estr )"	3589:3:94709:94764	34873	1	True				
ANR	35124	CallExpression	"es_addStr ( & estr , ( ( struct cnfstringval * ) expr -> r ) -> estr )"		34873	0					
ANR	35125	Callee	es_addStr		34873	0					
ANR	35126	Identifier	es_addStr		34873	0					
ANR	35127	ArgumentList	& estr		34873	1					
ANR	35128	Argument	& estr		34873	0					
ANR	35129	UnaryOperationExpression	& estr		34873	0					
ANR	35130	UnaryOperator	&		34873	0					
ANR	35131	Identifier	estr		34873	1					
ANR	35132	Argument	( ( struct cnfstringval * ) expr -> r ) -> estr		34873	1					
ANR	35133	PtrMemberAccess	( ( struct cnfstringval * ) expr -> r ) -> estr		34873	0					
ANR	35134	CastExpression	( struct cnfstringval * ) expr -> r		34873	0					
ANR	35135	CastTarget	struct cnfstringval *		34873	0					
ANR	35136	PtrMemberAccess	expr -> r		34873	1					
ANR	35137	Identifier	expr		34873	0					
ANR	35138	Identifier	r		34873	1					
ANR	35139	Identifier	estr		34873	1					
ANR	35140	ExpressionStatement	cnfexprDestruct ( expr -> l )	3590:3:94769:94793	34873	2	True				
ANR	35141	CallExpression	cnfexprDestruct ( expr -> l )		34873	0					
ANR	35142	Callee	cnfexprDestruct		34873	0					
ANR	35143	Identifier	cnfexprDestruct		34873	0					
ANR	35144	ArgumentList	expr -> l		34873	1					
ANR	35145	Argument	expr -> l		34873	0					
ANR	35146	PtrMemberAccess	expr -> l		34873	0					
ANR	35147	Identifier	expr		34873	0					
ANR	35148	Identifier	l		34873	1					
ANR	35149	ExpressionStatement	cnfexprDestruct ( expr -> r )	3591:3:94798:94822	34873	3	True				
ANR	35150	CallExpression	cnfexprDestruct ( expr -> r )		34873	0					
ANR	35151	Callee	cnfexprDestruct		34873	0					
ANR	35152	Identifier	cnfexprDestruct		34873	0					
ANR	35153	ArgumentList	expr -> r		34873	1					
ANR	35154	Argument	expr -> r		34873	0					
ANR	35155	PtrMemberAccess	expr -> r		34873	0					
ANR	35156	Identifier	expr		34873	0					
ANR	35157	Identifier	r		34873	1					
ANR	35158	ExpressionStatement	expr -> nodetype = 'S'	3592:3:94827:94847	34873	4	True				
ANR	35159	AssignmentExpression	expr -> nodetype = 'S'		34873	0		=			
ANR	35160	PtrMemberAccess	expr -> nodetype		34873	0					
ANR	35161	Identifier	expr		34873	0					
ANR	35162	Identifier	nodetype		34873	1					
ANR	35163	PrimaryExpression	'S'		34873	1					
ANR	35164	ExpressionStatement	( ( struct cnfstringval * ) expr ) -> estr = estr	3593:3:94852:94893	34873	5	True				
ANR	35165	AssignmentExpression	( ( struct cnfstringval * ) expr ) -> estr = estr		34873	0		=			
ANR	35166	PtrMemberAccess	( ( struct cnfstringval * ) expr ) -> estr		34873	0					
ANR	35167	CastExpression	( struct cnfstringval * ) expr		34873	0					
ANR	35168	CastTarget	struct cnfstringval *		34873	0					
ANR	35169	Identifier	expr		34873	1					
ANR	35170	Identifier	estr		34873	1					
ANR	35171	Identifier	estr		34873	1					
ANR	35172	ElseStatement	else		34873	0					
ANR	35173	IfStatement	if ( expr -> r -> nodetype == 'S' )		34873	0					
ANR	35174	Condition	expr -> r -> nodetype == 'S'	3594:12:94907:94930	34873	0	True				
ANR	35175	EqualityExpression	expr -> r -> nodetype == 'S'		34873	0		==			
ANR	35176	PtrMemberAccess	expr -> r -> nodetype		34873	0					
ANR	35177	PtrMemberAccess	expr -> r		34873	0					
ANR	35178	Identifier	expr		34873	0					
ANR	35179	Identifier	r		34873	1					
ANR	35180	Identifier	nodetype		34873	1					
ANR	35181	PrimaryExpression	'S'		34873	1					
ANR	35182	CompoundStatement		35:3:1208:1224	34873	1					
ANR	35183	IdentifierDeclStatement	es_str_t * numstr ;	3595:3:94938:94954	34873	0	True				
ANR	35184	IdentifierDecl	* numstr		34873	0					
ANR	35185	IdentifierDeclType	es_str_t *		34873	0					
ANR	35186	Identifier	numstr		34873	1					
ANR	35187	ExpressionStatement	estr = es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> l ) -> val )	3596:3:94959:95020	34873	1	True				
ANR	35188	AssignmentExpression	estr = es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> l ) -> val )		34873	0		=			
ANR	35189	Identifier	estr		34873	0					
ANR	35190	CallExpression	es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> l ) -> val )		34873	1					
ANR	35191	Callee	es_newStrFromNumber		34873	0					
ANR	35192	Identifier	es_newStrFromNumber		34873	0					
ANR	35193	ArgumentList	( ( struct cnfnumval * ) expr -> l ) -> val		34873	1					
ANR	35194	Argument	( ( struct cnfnumval * ) expr -> l ) -> val		34873	0					
ANR	35195	PtrMemberAccess	( ( struct cnfnumval * ) expr -> l ) -> val		34873	0					
ANR	35196	CastExpression	( struct cnfnumval * ) expr -> l		34873	0					
ANR	35197	CastTarget	struct cnfnumval *		34873	0					
ANR	35198	PtrMemberAccess	expr -> l		34873	1					
ANR	35199	Identifier	expr		34873	0					
ANR	35200	Identifier	l		34873	1					
ANR	35201	Identifier	val		34873	1					
ANR	35202	ExpressionStatement	numstr = es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> r ) -> val )	3597:3:95025:95088	34873	2	True				
ANR	35203	AssignmentExpression	numstr = es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> r ) -> val )		34873	0		=			
ANR	35204	Identifier	numstr		34873	0					
ANR	35205	CallExpression	es_newStrFromNumber ( ( ( struct cnfnumval * ) expr -> r ) -> val )		34873	1					
ANR	35206	Callee	es_newStrFromNumber		34873	0					
ANR	35207	Identifier	es_newStrFromNumber		34873	0					
ANR	35208	ArgumentList	( ( struct cnfnumval * ) expr -> r ) -> val		34873	1					
ANR	35209	Argument	( ( struct cnfnumval * ) expr -> r ) -> val		34873	0					
ANR	35210	PtrMemberAccess	( ( struct cnfnumval * ) expr -> r ) -> val		34873	0					
ANR	35211	CastExpression	( struct cnfnumval * ) expr -> r		34873	0					
ANR	35212	CastTarget	struct cnfnumval *		34873	0					
ANR	35213	PtrMemberAccess	expr -> r		34873	1					
ANR	35214	Identifier	expr		34873	0					
ANR	35215	Identifier	r		34873	1					
ANR	35216	Identifier	val		34873	1					
ANR	35217	ExpressionStatement	"es_addStr ( & estr , numstr )"	3598:3:95093:95117	34873	3	True				
ANR	35218	CallExpression	"es_addStr ( & estr , numstr )"		34873	0					
ANR	35219	Callee	es_addStr		34873	0					
ANR	35220	Identifier	es_addStr		34873	0					
ANR	35221	ArgumentList	& estr		34873	1					
ANR	35222	Argument	& estr		34873	0					
ANR	35223	UnaryOperationExpression	& estr		34873	0					
ANR	35224	UnaryOperator	&		34873	0					
ANR	35225	Identifier	estr		34873	1					
ANR	35226	Argument	numstr		34873	1					
ANR	35227	Identifier	numstr		34873	0					
ANR	35228	ExpressionStatement	es_deleteStr ( numstr )	3599:3:95122:95142	34873	4	True				
ANR	35229	CallExpression	es_deleteStr ( numstr )		34873	0					
ANR	35230	Callee	es_deleteStr		34873	0					
ANR	35231	Identifier	es_deleteStr		34873	0					
ANR	35232	ArgumentList	numstr		34873	1					
ANR	35233	Argument	numstr		34873	0					
ANR	35234	Identifier	numstr		34873	0					
ANR	35235	ExpressionStatement	cnfexprDestruct ( expr -> l )	3600:3:95147:95171	34873	5	True				
ANR	35236	CallExpression	cnfexprDestruct ( expr -> l )		34873	0					
ANR	35237	Callee	cnfexprDestruct		34873	0					
ANR	35238	Identifier	cnfexprDestruct		34873	0					
ANR	35239	ArgumentList	expr -> l		34873	1					
ANR	35240	Argument	expr -> l		34873	0					
ANR	35241	PtrMemberAccess	expr -> l		34873	0					
ANR	35242	Identifier	expr		34873	0					
ANR	35243	Identifier	l		34873	1					
ANR	35244	ExpressionStatement	cnfexprDestruct ( expr -> r )	3601:3:95176:95200	34873	6	True				
ANR	35245	CallExpression	cnfexprDestruct ( expr -> r )		34873	0					
ANR	35246	Callee	cnfexprDestruct		34873	0					
ANR	35247	Identifier	cnfexprDestruct		34873	0					
ANR	35248	ArgumentList	expr -> r		34873	1					
ANR	35249	Argument	expr -> r		34873	0					
ANR	35250	PtrMemberAccess	expr -> r		34873	0					
ANR	35251	Identifier	expr		34873	0					
ANR	35252	Identifier	r		34873	1					
ANR	35253	ExpressionStatement	expr -> nodetype = 'S'	3602:3:95205:95225	34873	7	True				
ANR	35254	AssignmentExpression	expr -> nodetype = 'S'		34873	0		=			
ANR	35255	PtrMemberAccess	expr -> nodetype		34873	0					
ANR	35256	Identifier	expr		34873	0					
ANR	35257	Identifier	nodetype		34873	1					
ANR	35258	PrimaryExpression	'S'		34873	1					
ANR	35259	ExpressionStatement	( ( struct cnfstringval * ) expr ) -> estr = estr	3603:3:95230:95271	34873	8	True				
ANR	35260	AssignmentExpression	( ( struct cnfstringval * ) expr ) -> estr = estr		34873	0		=			
ANR	35261	PtrMemberAccess	( ( struct cnfstringval * ) expr ) -> estr		34873	0					
ANR	35262	CastExpression	( struct cnfstringval * ) expr		34873	0					
ANR	35263	CastTarget	struct cnfstringval *		34873	0					
ANR	35264	Identifier	expr		34873	1					
ANR	35265	Identifier	estr		34873	1					
ANR	35266	Identifier	estr		34873	1					
ANR	35267	ReturnType	static void		34873	1					
ANR	35268	Identifier	constFoldConcat		34873	2					
ANR	35269	ParameterList	struct cnfexpr * expr		34873	3					
ANR	35270	Parameter	struct cnfexpr * expr	3560:16:93707:93726	34873	0	True				
ANR	35271	ParameterType	struct cnfexpr *		34873	0					
ANR	35272	Identifier	expr		34873	1					
ANR	35273	CFGEntryNode	ENTRY		34873		True				
ANR	35274	CFGExitNode	EXIT		34873		True				
ANR	35275	Symbol	( ( struct cnfstringval * ) expr ) -> estr		34873						
ANR	35276	Symbol	estr		34873						
ANR	35277	Symbol	* expr -> r		34873						
ANR	35278	Symbol	NULL		34873						
ANR	35279	Symbol	expr -> nodetype		34873						
ANR	35280	Symbol	expr -> r		34873						
ANR	35281	Symbol	* expr -> l		34873						
ANR	35282	Symbol	( ( struct cnfstringval * ) expr -> r ) -> estr		34873						
ANR	35283	Symbol	expr -> l -> nodetype		34873						
ANR	35284	Symbol	& estr		34873						
ANR	35285	Symbol	expr -> l		34873						
ANR	35286	Symbol	( ( struct cnfstringval * ) expr -> l ) -> estr		34873						
ANR	35287	Symbol	expr -> r -> nodetype		34873						
ANR	35288	Symbol	numstr		34873						
ANR	35289	Symbol	( ( struct cnfnumval * ) expr -> l ) -> val		34873						
ANR	35290	Symbol	* expr		34873						
ANR	35291	Symbol	* * expr		34873						
ANR	35292	Symbol	( ( struct cnfnumval * ) expr -> r ) -> val		34873						
ANR	35293	Symbol	expr		34873						
ANR	35294	Symbol	es_newStrFromNumber		34873						
ANR	35295	Function	cnfexprOptimize_CMP_severity_facility	3612:0:95426:96772							
ANR	35296	FunctionDef	cnfexprOptimize_CMP_severity_facility (struct cnfexpr * expr)		35295	0					
ANR	35297	CompoundStatement		3614:0:95509:96772	35295	0					
ANR	35298	IdentifierDeclStatement	struct cnffunc * func ;	3615:1:95512:95532	35295	0	True				
ANR	35299	IdentifierDecl	* func		35295	0					
ANR	35300	IdentifierDeclType	struct cnffunc *		35295	0					
ANR	35301	Identifier	func		35295	1					
ANR	35302	IfStatement	if ( expr -> l -> nodetype != 'V' )		35295	1					
ANR	35303	Condition	expr -> l -> nodetype != 'V'	3617:4:95539:95562	35295	0	True				
ANR	35304	EqualityExpression	expr -> l -> nodetype != 'V'		35295	0		!=			
ANR	35305	PtrMemberAccess	expr -> l -> nodetype		35295	0					
ANR	35306	PtrMemberAccess	expr -> l		35295	0					
ANR	35307	Identifier	expr		35295	0					
ANR	35308	Identifier	l		35295	1					
ANR	35309	Identifier	nodetype		35295	1					
ANR	35310	PrimaryExpression	'V'		35295	1					
ANR	35311	ExpressionStatement	FINALIZE	3618:2:95567:95575	35295	1	True				
ANR	35312	Identifier	FINALIZE		35295	0					
ANR	35313	IfStatement	"if ( ! strcmp ( ""syslogseverity"" , ( ( struct cnfvar * ) expr -> l ) -> name ) )"		35295	2					
ANR	35314	Condition	"! strcmp ( ""syslogseverity"" , ( ( struct cnfvar * ) expr -> l ) -> name )"	3620:4:95582:95639	35295	0	True				
ANR	35315	UnaryOperationExpression	"! strcmp ( ""syslogseverity"" , ( ( struct cnfvar * ) expr -> l ) -> name )"		35295	0					
ANR	35316	UnaryOperator	!		35295	0					
ANR	35317	CallExpression	"strcmp ( ""syslogseverity"" , ( ( struct cnfvar * ) expr -> l ) -> name )"		35295	1					
ANR	35318	Callee	strcmp		35295	0					
ANR	35319	Identifier	strcmp		35295	0					
ANR	35320	ArgumentList	"""syslogseverity"""		35295	1					
ANR	35321	Argument	"""syslogseverity"""		35295	0					
ANR	35322	PrimaryExpression	"""syslogseverity"""		35295	0					
ANR	35323	Argument	( ( struct cnfvar * ) expr -> l ) -> name		35295	1					
ANR	35324	PtrMemberAccess	( ( struct cnfvar * ) expr -> l ) -> name		35295	0					
ANR	35325	CastExpression	( struct cnfvar * ) expr -> l		35295	0					
ANR	35326	CastTarget	struct cnfvar *		35295	0					
ANR	35327	PtrMemberAccess	expr -> l		35295	1					
ANR	35328	Identifier	expr		35295	0					
ANR	35329	Identifier	l		35295	1					
ANR	35330	Identifier	name		35295	1					
ANR	35331	CompoundStatement		7:64:132:132	35295	1					
ANR	35332	IfStatement	if ( expr -> r -> nodetype == 'N' )		35295	0					
ANR	35333	Condition	expr -> r -> nodetype == 'N'	3621:5:95649:95672	35295	0	True				
ANR	35334	EqualityExpression	expr -> r -> nodetype == 'N'		35295	0		==			
ANR	35335	PtrMemberAccess	expr -> r -> nodetype		35295	0					
ANR	35336	PtrMemberAccess	expr -> r		35295	0					
ANR	35337	Identifier	expr		35295	0					
ANR	35338	Identifier	r		35295	1					
ANR	35339	Identifier	nodetype		35295	1					
ANR	35340	PrimaryExpression	'N'		35295	1					
ANR	35341	CompoundStatement		9:3:170:219	35295	1					
ANR	35342	IdentifierDeclStatement	int sev = ( int ) ( ( struct cnfnumval * ) expr -> r ) -> val ;	3622:3:95680:95729	35295	0	True				
ANR	35343	IdentifierDecl	sev = ( int ) ( ( struct cnfnumval * ) expr -> r ) -> val		35295	0					
ANR	35344	IdentifierDeclType	int		35295	0					
ANR	35345	Identifier	sev		35295	1					
ANR	35346	AssignmentExpression	sev = ( int ) ( ( struct cnfnumval * ) expr -> r ) -> val		35295	2		=			
ANR	35347	Identifier	sev		35295	0					
ANR	35348	CastExpression	( int ) ( ( struct cnfnumval * ) expr -> r ) -> val		35295	1					
ANR	35349	CastTarget	int		35295	0					
ANR	35350	PtrMemberAccess	( ( struct cnfnumval * ) expr -> r ) -> val		35295	1					
ANR	35351	CastExpression	( struct cnfnumval * ) expr -> r		35295	0					
ANR	35352	CastTarget	struct cnfnumval *		35295	0					
ANR	35353	PtrMemberAccess	expr -> r		35295	1					
ANR	35354	Identifier	expr		35295	0					
ANR	35355	Identifier	r		35295	1					
ANR	35356	Identifier	val		35295	1					
ANR	35357	IfStatement	if ( sev >= 0 && sev <= 7 )		35295	1					
ANR	35358	Condition	sev >= 0 && sev <= 7	3623:6:95737:95756	35295	0	True				
ANR	35359	AndExpression	sev >= 0 && sev <= 7		35295	0		&&			
ANR	35360	RelationalExpression	sev >= 0		35295	0		>=			
ANR	35361	Identifier	sev		35295	0					
ANR	35362	PrimaryExpression	0		35295	1					
ANR	35363	RelationalExpression	sev <= 7		35295	1		<=			
ANR	35364	Identifier	sev		35295	0					
ANR	35365	PrimaryExpression	7		35295	1					
ANR	35366	CompoundStatement		10:28:249:249	35295	1					
ANR	35367	ExpressionStatement	"DBGPRINTF ( ""optimizer: change comparison OP to FUNC prifilt()\\n"" )"	3624:4:95765:95829	35295	0	True				
ANR	35368	CallExpression	"DBGPRINTF ( ""optimizer: change comparison OP to FUNC prifilt()\\n"" )"		35295	0					
ANR	35369	Callee	DBGPRINTF		35295	0					
ANR	35370	Identifier	DBGPRINTF		35295	0					
ANR	35371	ArgumentList	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35295	1					
ANR	35372	Argument	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35295	0					
ANR	35373	PrimaryExpression	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35295	0					
ANR	35374	ExpressionStatement	func = cnffuncNew_prifilt ( 0 )	3625:4:95835:95863	35295	1	True				
ANR	35375	AssignmentExpression	func = cnffuncNew_prifilt ( 0 )		35295	0		=			
ANR	35376	Identifier	func		35295	0					
ANR	35377	CallExpression	cnffuncNew_prifilt ( 0 )		35295	1					
ANR	35378	Callee	cnffuncNew_prifilt		35295	0					
ANR	35379	Identifier	cnffuncNew_prifilt		35295	0					
ANR	35380	ArgumentList	0		35295	1					
ANR	35381	Argument	0		35295	0					
ANR	35382	PrimaryExpression	0		35295	0					
ANR	35383	ExpressionStatement	"prifiltSetSeverity ( func -> funcdata , sev , expr -> nodetype )"	3626:4:95907:95962	35295	2	True				
ANR	35384	CallExpression	"prifiltSetSeverity ( func -> funcdata , sev , expr -> nodetype )"		35295	0					
ANR	35385	Callee	prifiltSetSeverity		35295	0					
ANR	35386	Identifier	prifiltSetSeverity		35295	0					
ANR	35387	ArgumentList	func -> funcdata		35295	1					
ANR	35388	Argument	func -> funcdata		35295	0					
ANR	35389	PtrMemberAccess	func -> funcdata		35295	0					
ANR	35390	Identifier	func		35295	0					
ANR	35391	Identifier	funcdata		35295	1					
ANR	35392	Argument	sev		35295	1					
ANR	35393	Identifier	sev		35295	0					
ANR	35394	Argument	expr -> nodetype		35295	2					
ANR	35395	PtrMemberAccess	expr -> nodetype		35295	0					
ANR	35396	Identifier	expr		35295	0					
ANR	35397	Identifier	nodetype		35295	1					
ANR	35398	ExpressionStatement	cnfexprDestruct ( expr )	3627:4:95968:95989	35295	3	True				
ANR	35399	CallExpression	cnfexprDestruct ( expr )		35295	0					
ANR	35400	Callee	cnfexprDestruct		35295	0					
ANR	35401	Identifier	cnfexprDestruct		35295	0					
ANR	35402	ArgumentList	expr		35295	1					
ANR	35403	Argument	expr		35295	0					
ANR	35404	Identifier	expr		35295	0					
ANR	35405	ExpressionStatement	expr = ( struct cnfexpr * ) func	3628:4:95995:96024	35295	4	True				
ANR	35406	AssignmentExpression	expr = ( struct cnfexpr * ) func		35295	0		=			
ANR	35407	Identifier	expr		35295	0					
ANR	35408	CastExpression	( struct cnfexpr * ) func		35295	1					
ANR	35409	CastTarget	struct cnfexpr *		35295	0					
ANR	35410	Identifier	func		35295	1					
ANR	35411	ElseStatement	else		35295	0					
ANR	35412	CompoundStatement		16:10:526:526	35295	0					
ANR	35413	Statement	parser_errmsg	3630:4:96042:96054	35295	0	True				
ANR	35414	Statement	(	3630:17:96055:96055	35295	1	True				
ANR	35415	Statement	"""invalid syslogseverity %d, expression will always """	3630:18:96056:96107	35295	2	True				
ANR	35416	Statement	"""evaluate to FALSE"""	3631:11:96120:96138	35295	3	True				
ANR	35417	Statement	","	3631:30:96139:96139	35295	4	True				
ANR	35418	Statement	sev	3631:32:96141:96143	35295	5	True				
ANR	35419	Statement	)	3631:35:96144:96144	35295	6	True				
ANR	35420	ExpressionStatement		3631:36:96145:96145	35295	7	True				
ANR	35421	ElseStatement	else		35295	0					
ANR	35422	IfStatement	"if ( ! strcmp ( ""syslogfacility"" , ( ( struct cnfvar * ) expr -> l ) -> name ) )"		35295	0					
ANR	35423	Condition	"! strcmp ( ""syslogfacility"" , ( ( struct cnfvar * ) expr -> l ) -> name )"	3634:11:96167:96224	35295	0	True				
ANR	35424	UnaryOperationExpression	"! strcmp ( ""syslogfacility"" , ( ( struct cnfvar * ) expr -> l ) -> name )"		35295	0					
ANR	35425	UnaryOperator	!		35295	0					
ANR	35426	CallExpression	"strcmp ( ""syslogfacility"" , ( ( struct cnfvar * ) expr -> l ) -> name )"		35295	1					
ANR	35427	Callee	strcmp		35295	0					
ANR	35428	Identifier	strcmp		35295	0					
ANR	35429	ArgumentList	"""syslogfacility"""		35295	1					
ANR	35430	Argument	"""syslogfacility"""		35295	0					
ANR	35431	PrimaryExpression	"""syslogfacility"""		35295	0					
ANR	35432	Argument	( ( struct cnfvar * ) expr -> l ) -> name		35295	1					
ANR	35433	PtrMemberAccess	( ( struct cnfvar * ) expr -> l ) -> name		35295	0					
ANR	35434	CastExpression	( struct cnfvar * ) expr -> l		35295	0					
ANR	35435	CastTarget	struct cnfvar *		35295	0					
ANR	35436	PtrMemberAccess	expr -> l		35295	1					
ANR	35437	Identifier	expr		35295	0					
ANR	35438	Identifier	l		35295	1					
ANR	35439	Identifier	name		35295	1					
ANR	35440	CompoundStatement		21:71:717:717	35295	1					
ANR	35441	IfStatement	if ( expr -> r -> nodetype == 'N' )		35295	0					
ANR	35442	Condition	expr -> r -> nodetype == 'N'	3635:5:96234:96257	35295	0	True				
ANR	35443	EqualityExpression	expr -> r -> nodetype == 'N'		35295	0		==			
ANR	35444	PtrMemberAccess	expr -> r -> nodetype		35295	0					
ANR	35445	PtrMemberAccess	expr -> r		35295	0					
ANR	35446	Identifier	expr		35295	0					
ANR	35447	Identifier	r		35295	1					
ANR	35448	Identifier	nodetype		35295	1					
ANR	35449	PrimaryExpression	'N'		35295	1					
ANR	35450	CompoundStatement		23:3:755:804	35295	1					
ANR	35451	IdentifierDeclStatement	int fac = ( int ) ( ( struct cnfnumval * ) expr -> r ) -> val ;	3636:3:96265:96314	35295	0	True				
ANR	35452	IdentifierDecl	fac = ( int ) ( ( struct cnfnumval * ) expr -> r ) -> val		35295	0					
ANR	35453	IdentifierDeclType	int		35295	0					
ANR	35454	Identifier	fac		35295	1					
ANR	35455	AssignmentExpression	fac = ( int ) ( ( struct cnfnumval * ) expr -> r ) -> val		35295	2		=			
ANR	35456	Identifier	fac		35295	0					
ANR	35457	CastExpression	( int ) ( ( struct cnfnumval * ) expr -> r ) -> val		35295	1					
ANR	35458	CastTarget	int		35295	0					
ANR	35459	PtrMemberAccess	( ( struct cnfnumval * ) expr -> r ) -> val		35295	1					
ANR	35460	CastExpression	( struct cnfnumval * ) expr -> r		35295	0					
ANR	35461	CastTarget	struct cnfnumval *		35295	0					
ANR	35462	PtrMemberAccess	expr -> r		35295	1					
ANR	35463	Identifier	expr		35295	0					
ANR	35464	Identifier	r		35295	1					
ANR	35465	Identifier	val		35295	1					
ANR	35466	IfStatement	if ( fac >= 0 && fac <= 24 )		35295	1					
ANR	35467	Condition	fac >= 0 && fac <= 24	3637:6:96322:96342	35295	0	True				
ANR	35468	AndExpression	fac >= 0 && fac <= 24		35295	0		&&			
ANR	35469	RelationalExpression	fac >= 0		35295	0		>=			
ANR	35470	Identifier	fac		35295	0					
ANR	35471	PrimaryExpression	0		35295	1					
ANR	35472	RelationalExpression	fac <= 24		35295	1		<=			
ANR	35473	Identifier	fac		35295	0					
ANR	35474	PrimaryExpression	24		35295	1					
ANR	35475	CompoundStatement		24:29:835:835	35295	1					
ANR	35476	ExpressionStatement	"DBGPRINTF ( ""optimizer: change comparison OP to FUNC prifilt()\\n"" )"	3638:4:96351:96415	35295	0	True				
ANR	35477	CallExpression	"DBGPRINTF ( ""optimizer: change comparison OP to FUNC prifilt()\\n"" )"		35295	0					
ANR	35478	Callee	DBGPRINTF		35295	0					
ANR	35479	Identifier	DBGPRINTF		35295	0					
ANR	35480	ArgumentList	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35295	1					
ANR	35481	Argument	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35295	0					
ANR	35482	PrimaryExpression	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35295	0					
ANR	35483	ExpressionStatement	func = cnffuncNew_prifilt ( 0 )	3639:4:96421:96449	35295	1	True				
ANR	35484	AssignmentExpression	func = cnffuncNew_prifilt ( 0 )		35295	0		=			
ANR	35485	Identifier	func		35295	0					
ANR	35486	CallExpression	cnffuncNew_prifilt ( 0 )		35295	1					
ANR	35487	Callee	cnffuncNew_prifilt		35295	0					
ANR	35488	Identifier	cnffuncNew_prifilt		35295	0					
ANR	35489	ArgumentList	0		35295	1					
ANR	35490	Argument	0		35295	0					
ANR	35491	PrimaryExpression	0		35295	0					
ANR	35492	ExpressionStatement	"prifiltSetFacility ( func -> funcdata , fac , expr -> nodetype )"	3640:4:96493:96548	35295	2	True				
ANR	35493	CallExpression	"prifiltSetFacility ( func -> funcdata , fac , expr -> nodetype )"		35295	0					
ANR	35494	Callee	prifiltSetFacility		35295	0					
ANR	35495	Identifier	prifiltSetFacility		35295	0					
ANR	35496	ArgumentList	func -> funcdata		35295	1					
ANR	35497	Argument	func -> funcdata		35295	0					
ANR	35498	PtrMemberAccess	func -> funcdata		35295	0					
ANR	35499	Identifier	func		35295	0					
ANR	35500	Identifier	funcdata		35295	1					
ANR	35501	Argument	fac		35295	1					
ANR	35502	Identifier	fac		35295	0					
ANR	35503	Argument	expr -> nodetype		35295	2					
ANR	35504	PtrMemberAccess	expr -> nodetype		35295	0					
ANR	35505	Identifier	expr		35295	0					
ANR	35506	Identifier	nodetype		35295	1					
ANR	35507	ExpressionStatement	cnfexprDestruct ( expr )	3641:4:96554:96575	35295	3	True				
ANR	35508	CallExpression	cnfexprDestruct ( expr )		35295	0					
ANR	35509	Callee	cnfexprDestruct		35295	0					
ANR	35510	Identifier	cnfexprDestruct		35295	0					
ANR	35511	ArgumentList	expr		35295	1					
ANR	35512	Argument	expr		35295	0					
ANR	35513	Identifier	expr		35295	0					
ANR	35514	ExpressionStatement	expr = ( struct cnfexpr * ) func	3642:4:96581:96610	35295	4	True				
ANR	35515	AssignmentExpression	expr = ( struct cnfexpr * ) func		35295	0		=			
ANR	35516	Identifier	expr		35295	0					
ANR	35517	CastExpression	( struct cnfexpr * ) func		35295	1					
ANR	35518	CastTarget	struct cnfexpr *		35295	0					
ANR	35519	Identifier	func		35295	1					
ANR	35520	ElseStatement	else		35295	0					
ANR	35521	CompoundStatement		30:10:1112:1112	35295	0					
ANR	35522	Statement	parser_errmsg	3644:4:96628:96640	35295	0	True				
ANR	35523	Statement	(	3644:17:96641:96641	35295	1	True				
ANR	35524	Statement	"""invalid syslogfacility %d, expression will always """	3644:18:96642:96693	35295	2	True				
ANR	35525	Statement	"""evaluate to FALSE"""	3645:11:96706:96724	35295	3	True				
ANR	35526	Statement	","	3645:30:96725:96725	35295	4	True				
ANR	35527	Statement	fac	3645:32:96727:96729	35295	5	True				
ANR	35528	Statement	)	3645:35:96730:96730	35295	6	True				
ANR	35529	ExpressionStatement		3645:36:96731:96731	35295	7	True				
ANR	35530	Label	finalize_it :	3649:0:96745:96756	35295	3	True				
ANR	35531	Identifier	finalize_it		35295	0					
ANR	35532	ReturnStatement	return expr ;	3650:1:96759:96770	35295	4	True				
ANR	35533	Identifier	expr		35295	0					
ANR	35534	ReturnType	static struct cnfexpr *		35295	1					
ANR	35535	Identifier	cnfexprOptimize_CMP_severity_facility		35295	2					
ANR	35536	ParameterList	struct cnfexpr * expr		35295	3					
ANR	35537	Parameter	struct cnfexpr * expr	3613:38:95487:95506	35295	0	True				
ANR	35538	ParameterType	struct cnfexpr *		35295	0					
ANR	35539	Identifier	expr		35295	1					
ANR	35540	CFGEntryNode	ENTRY		35295		True				
ANR	35541	CFGExitNode	EXIT		35295		True				
ANR	35542	Symbol	strcmp		35295						
ANR	35543	Symbol	* expr -> r		35295						
ANR	35544	Symbol	cnffuncNew_prifilt		35295						
ANR	35545	Symbol	* func		35295						
ANR	35546	Symbol	func -> funcdata		35295						
ANR	35547	Symbol	sev		35295						
ANR	35548	Symbol	expr -> nodetype		35295						
ANR	35549	Symbol	* expr -> l		35295						
ANR	35550	Symbol	expr -> r		35295						
ANR	35551	Symbol	fac		35295						
ANR	35552	Symbol	expr -> l -> nodetype		35295						
ANR	35553	Symbol	expr -> l		35295						
ANR	35554	Symbol	expr -> r -> nodetype		35295						
ANR	35555	Symbol	func		35295						
ANR	35556	Symbol	* expr		35295						
ANR	35557	Symbol	( ( struct cnfvar * ) expr -> l ) -> name		35295						
ANR	35558	Symbol	* * expr		35295						
ANR	35559	Symbol	( ( struct cnfnumval * ) expr -> r ) -> val		35295						
ANR	35560	Symbol	expr		35295						
ANR	35561	Function	cnfexprOptimize_CMP_var	3657:0:96950:98475							
ANR	35562	FunctionDef	cnfexprOptimize_CMP_var (struct cnfexpr * expr)		35561	0					
ANR	35563	CompoundStatement		3659:0:97019:98475	35561	0					
ANR	35564	IdentifierDeclStatement	struct cnffunc * func ;	3660:1:97022:97042	35561	0	True				
ANR	35565	IdentifierDecl	* func		35561	0					
ANR	35566	IdentifierDeclType	struct cnffunc *		35561	0					
ANR	35567	Identifier	func		35561	1					
ANR	35568	IfStatement	"if ( ! strcmp ( ""syslogfacility-text"" , ( ( struct cnfvar * ) expr -> l ) -> name ) )"		35561	1					
ANR	35569	Condition	"! strcmp ( ""syslogfacility-text"" , ( ( struct cnfvar * ) expr -> l ) -> name )"	3662:4:97049:97111	35561	0	True				
ANR	35570	UnaryOperationExpression	"! strcmp ( ""syslogfacility-text"" , ( ( struct cnfvar * ) expr -> l ) -> name )"		35561	0					
ANR	35571	UnaryOperator	!		35561	0					
ANR	35572	CallExpression	"strcmp ( ""syslogfacility-text"" , ( ( struct cnfvar * ) expr -> l ) -> name )"		35561	1					
ANR	35573	Callee	strcmp		35561	0					
ANR	35574	Identifier	strcmp		35561	0					
ANR	35575	ArgumentList	"""syslogfacility-text"""		35561	1					
ANR	35576	Argument	"""syslogfacility-text"""		35561	0					
ANR	35577	PrimaryExpression	"""syslogfacility-text"""		35561	0					
ANR	35578	Argument	( ( struct cnfvar * ) expr -> l ) -> name		35561	1					
ANR	35579	PtrMemberAccess	( ( struct cnfvar * ) expr -> l ) -> name		35561	0					
ANR	35580	CastExpression	( struct cnfvar * ) expr -> l		35561	0					
ANR	35581	CastTarget	struct cnfvar *		35561	0					
ANR	35582	PtrMemberAccess	expr -> l		35561	1					
ANR	35583	Identifier	expr		35561	0					
ANR	35584	Identifier	l		35561	1					
ANR	35585	Identifier	name		35561	1					
ANR	35586	CompoundStatement		4:69:94:94	35561	1					
ANR	35587	IfStatement	if ( expr -> r -> nodetype == 'S' )		35561	0					
ANR	35588	Condition	expr -> r -> nodetype == 'S'	3663:5:97121:97144	35561	0	True				
ANR	35589	EqualityExpression	expr -> r -> nodetype == 'S'		35561	0		==			
ANR	35590	PtrMemberAccess	expr -> r -> nodetype		35561	0					
ANR	35591	PtrMemberAccess	expr -> r		35561	0					
ANR	35592	Identifier	expr		35561	0					
ANR	35593	Identifier	r		35561	1					
ANR	35594	Identifier	nodetype		35561	1					
ANR	35595	PrimaryExpression	'S'		35561	1					
ANR	35596	CompoundStatement		7:3:206:262	35561	1					
ANR	35597	IdentifierDeclStatement	"char * cstr = es_str2cstr ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL ) ;"	3664:3:97152:97221	35561	0	True				
ANR	35598	IdentifierDecl	"* cstr = es_str2cstr ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		35561	0					
ANR	35599	IdentifierDeclType	char *		35561	0					
ANR	35600	Identifier	cstr		35561	1					
ANR	35601	AssignmentExpression	"* cstr = es_str2cstr ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		35561	2		=			
ANR	35602	Identifier	cstr		35561	0					
ANR	35603	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		35561	1					
ANR	35604	Callee	es_str2cstr		35561	0					
ANR	35605	Identifier	es_str2cstr		35561	0					
ANR	35606	ArgumentList	( ( struct cnfstringval * ) expr -> r ) -> estr		35561	1					
ANR	35607	Argument	( ( struct cnfstringval * ) expr -> r ) -> estr		35561	0					
ANR	35608	PtrMemberAccess	( ( struct cnfstringval * ) expr -> r ) -> estr		35561	0					
ANR	35609	CastExpression	( struct cnfstringval * ) expr -> r		35561	0					
ANR	35610	CastTarget	struct cnfstringval *		35561	0					
ANR	35611	PtrMemberAccess	expr -> r		35561	1					
ANR	35612	Identifier	expr		35561	0					
ANR	35613	Identifier	r		35561	1					
ANR	35614	Identifier	estr		35561	1					
ANR	35615	Argument	NULL		35561	1					
ANR	35616	Identifier	NULL		35561	0					
ANR	35617	IdentifierDeclStatement	"int fac = decodeSyslogName ( ( uchar * ) cstr , syslogFacNames ) ;"	3665:3:97226:97282	35561	1	True				
ANR	35618	IdentifierDecl	"fac = decodeSyslogName ( ( uchar * ) cstr , syslogFacNames )"		35561	0					
ANR	35619	IdentifierDeclType	int		35561	0					
ANR	35620	Identifier	fac		35561	1					
ANR	35621	AssignmentExpression	"fac = decodeSyslogName ( ( uchar * ) cstr , syslogFacNames )"		35561	2		=			
ANR	35622	Identifier	fac		35561	0					
ANR	35623	CallExpression	"decodeSyslogName ( ( uchar * ) cstr , syslogFacNames )"		35561	1					
ANR	35624	Callee	decodeSyslogName		35561	0					
ANR	35625	Identifier	decodeSyslogName		35561	0					
ANR	35626	ArgumentList	( uchar * ) cstr		35561	1					
ANR	35627	Argument	( uchar * ) cstr		35561	0					
ANR	35628	CastExpression	( uchar * ) cstr		35561	0					
ANR	35629	CastTarget	uchar *		35561	0					
ANR	35630	Identifier	cstr		35561	1					
ANR	35631	Argument	syslogFacNames		35561	1					
ANR	35632	Identifier	syslogFacNames		35561	0					
ANR	35633	IfStatement	if ( fac == - 1 )		35561	2					
ANR	35634	Condition	fac == - 1	3666:6:97290:97298	35561	0	True				
ANR	35635	EqualityExpression	fac == - 1		35561	0		==			
ANR	35636	Identifier	fac		35561	0					
ANR	35637	UnaryOperationExpression	- 1		35561	1					
ANR	35638	UnaryOperator	-		35561	0					
ANR	35639	PrimaryExpression	1		35561	1					
ANR	35640	CompoundStatement		8:17:281:281	35561	1					
ANR	35641	Statement	parser_errmsg	3667:4:97307:97319	35561	0	True				
ANR	35642	Statement	(	3667:17:97320:97320	35561	1	True				
ANR	35643	Statement	"""invalid facility '%s', expression will always """	3667:18:97321:97368	35561	2	True				
ANR	35644	Statement	"""evaluate to FALSE"""	3668:11:97381:97399	35561	3	True				
ANR	35645	Statement	","	3668:30:97400:97400	35561	4	True				
ANR	35646	Statement	cstr	3668:32:97402:97405	35561	5	True				
ANR	35647	Statement	)	3668:36:97406:97406	35561	6	True				
ANR	35648	ExpressionStatement		3668:37:97407:97407	35561	7	True				
ANR	35649	ElseStatement	else		35561	0					
ANR	35650	CompoundStatement		11:10:399:399	35561	0					
ANR	35651	ExpressionStatement	"DBGPRINTF ( ""optimizer: change comparison OP to FUNC prifilt()\\n"" )"	3671:4:97461:97525	35561	0	True				
ANR	35652	CallExpression	"DBGPRINTF ( ""optimizer: change comparison OP to FUNC prifilt()\\n"" )"		35561	0					
ANR	35653	Callee	DBGPRINTF		35561	0					
ANR	35654	Identifier	DBGPRINTF		35561	0					
ANR	35655	ArgumentList	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35561	1					
ANR	35656	Argument	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35561	0					
ANR	35657	PrimaryExpression	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35561	0					
ANR	35658	ExpressionStatement	func = cnffuncNew_prifilt ( fac )	3672:4:97531:97561	35561	1	True				
ANR	35659	AssignmentExpression	func = cnffuncNew_prifilt ( fac )		35561	0		=			
ANR	35660	Identifier	func		35561	0					
ANR	35661	CallExpression	cnffuncNew_prifilt ( fac )		35561	1					
ANR	35662	Callee	cnffuncNew_prifilt		35561	0					
ANR	35663	Identifier	cnffuncNew_prifilt		35561	0					
ANR	35664	ArgumentList	fac		35561	1					
ANR	35665	Argument	fac		35561	0					
ANR	35666	Identifier	fac		35561	0					
ANR	35667	IfStatement	if ( expr -> nodetype == CMP_NE )		35561	2					
ANR	35668	Condition	expr -> nodetype == CMP_NE	3673:7:97570:97593	35561	0	True				
ANR	35669	EqualityExpression	expr -> nodetype == CMP_NE		35561	0		==			
ANR	35670	PtrMemberAccess	expr -> nodetype		35561	0					
ANR	35671	Identifier	expr		35561	0					
ANR	35672	Identifier	nodetype		35561	1					
ANR	35673	Identifier	CMP_NE		35561	1					
ANR	35674	ExpressionStatement	prifiltInvert ( func -> funcdata )	3674:5:97601:97630	35561	1	True				
ANR	35675	CallExpression	prifiltInvert ( func -> funcdata )		35561	0					
ANR	35676	Callee	prifiltInvert		35561	0					
ANR	35677	Identifier	prifiltInvert		35561	0					
ANR	35678	ArgumentList	func -> funcdata		35561	1					
ANR	35679	Argument	func -> funcdata		35561	0					
ANR	35680	PtrMemberAccess	func -> funcdata		35561	0					
ANR	35681	Identifier	func		35561	0					
ANR	35682	Identifier	funcdata		35561	1					
ANR	35683	ExpressionStatement	cnfexprDestruct ( expr )	3675:4:97636:97657	35561	3	True				
ANR	35684	CallExpression	cnfexprDestruct ( expr )		35561	0					
ANR	35685	Callee	cnfexprDestruct		35561	0					
ANR	35686	Identifier	cnfexprDestruct		35561	0					
ANR	35687	ArgumentList	expr		35561	1					
ANR	35688	Argument	expr		35561	0					
ANR	35689	Identifier	expr		35561	0					
ANR	35690	ExpressionStatement	expr = ( struct cnfexpr * ) func	3676:4:97663:97692	35561	4	True				
ANR	35691	AssignmentExpression	expr = ( struct cnfexpr * ) func		35561	0		=			
ANR	35692	Identifier	expr		35561	0					
ANR	35693	CastExpression	( struct cnfexpr * ) func		35561	1					
ANR	35694	CastTarget	struct cnfexpr *		35561	0					
ANR	35695	Identifier	func		35561	1					
ANR	35696	ExpressionStatement	free ( cstr )	3678:3:97702:97712	35561	3	True				
ANR	35697	CallExpression	free ( cstr )		35561	0					
ANR	35698	Callee	free		35561	0					
ANR	35699	Identifier	free		35561	0					
ANR	35700	ArgumentList	cstr		35561	1					
ANR	35701	Argument	cstr		35561	0					
ANR	35702	Identifier	cstr		35561	0					
ANR	35703	ElseStatement	else		35561	0					
ANR	35704	IfStatement	"if ( ! strcmp ( ""syslogseverity-text"" , ( ( struct cnfvar * ) expr -> l ) -> name ) )"		35561	0					
ANR	35705	Condition	"! strcmp ( ""syslogseverity-text"" , ( ( struct cnfvar * ) expr -> l ) -> name )"	3680:11:97729:97791	35561	0	True				
ANR	35706	UnaryOperationExpression	"! strcmp ( ""syslogseverity-text"" , ( ( struct cnfvar * ) expr -> l ) -> name )"		35561	0					
ANR	35707	UnaryOperator	!		35561	0					
ANR	35708	CallExpression	"strcmp ( ""syslogseverity-text"" , ( ( struct cnfvar * ) expr -> l ) -> name )"		35561	1					
ANR	35709	Callee	strcmp		35561	0					
ANR	35710	Identifier	strcmp		35561	0					
ANR	35711	ArgumentList	"""syslogseverity-text"""		35561	1					
ANR	35712	Argument	"""syslogseverity-text"""		35561	0					
ANR	35713	PrimaryExpression	"""syslogseverity-text"""		35561	0					
ANR	35714	Argument	( ( struct cnfvar * ) expr -> l ) -> name		35561	1					
ANR	35715	PtrMemberAccess	( ( struct cnfvar * ) expr -> l ) -> name		35561	0					
ANR	35716	CastExpression	( struct cnfvar * ) expr -> l		35561	0					
ANR	35717	CastTarget	struct cnfvar *		35561	0					
ANR	35718	PtrMemberAccess	expr -> l		35561	1					
ANR	35719	Identifier	expr		35561	0					
ANR	35720	Identifier	l		35561	1					
ANR	35721	Identifier	name		35561	1					
ANR	35722	CompoundStatement		22:76:774:774	35561	1					
ANR	35723	IfStatement	if ( expr -> r -> nodetype == 'S' )		35561	0					
ANR	35724	Condition	expr -> r -> nodetype == 'S'	3681:5:97801:97824	35561	0	True				
ANR	35725	EqualityExpression	expr -> r -> nodetype == 'S'		35561	0		==			
ANR	35726	PtrMemberAccess	expr -> r -> nodetype		35561	0					
ANR	35727	PtrMemberAccess	expr -> r		35561	0					
ANR	35728	Identifier	expr		35561	0					
ANR	35729	Identifier	r		35561	1					
ANR	35730	Identifier	nodetype		35561	1					
ANR	35731	PrimaryExpression	'S'		35561	1					
ANR	35732	CompoundStatement		25:3:886:942	35561	1					
ANR	35733	IdentifierDeclStatement	"char * cstr = es_str2cstr ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL ) ;"	3682:3:97832:97901	35561	0	True				
ANR	35734	IdentifierDecl	"* cstr = es_str2cstr ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		35561	0					
ANR	35735	IdentifierDeclType	char *		35561	0					
ANR	35736	Identifier	cstr		35561	1					
ANR	35737	AssignmentExpression	"* cstr = es_str2cstr ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		35561	2		=			
ANR	35738	Identifier	cstr		35561	0					
ANR	35739	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) expr -> r ) -> estr , NULL )"		35561	1					
ANR	35740	Callee	es_str2cstr		35561	0					
ANR	35741	Identifier	es_str2cstr		35561	0					
ANR	35742	ArgumentList	( ( struct cnfstringval * ) expr -> r ) -> estr		35561	1					
ANR	35743	Argument	( ( struct cnfstringval * ) expr -> r ) -> estr		35561	0					
ANR	35744	PtrMemberAccess	( ( struct cnfstringval * ) expr -> r ) -> estr		35561	0					
ANR	35745	CastExpression	( struct cnfstringval * ) expr -> r		35561	0					
ANR	35746	CastTarget	struct cnfstringval *		35561	0					
ANR	35747	PtrMemberAccess	expr -> r		35561	1					
ANR	35748	Identifier	expr		35561	0					
ANR	35749	Identifier	r		35561	1					
ANR	35750	Identifier	estr		35561	1					
ANR	35751	Argument	NULL		35561	1					
ANR	35752	Identifier	NULL		35561	0					
ANR	35753	IdentifierDeclStatement	"int sev = decodeSyslogName ( ( uchar * ) cstr , syslogPriNames ) ;"	3683:3:97906:97962	35561	1	True				
ANR	35754	IdentifierDecl	"sev = decodeSyslogName ( ( uchar * ) cstr , syslogPriNames )"		35561	0					
ANR	35755	IdentifierDeclType	int		35561	0					
ANR	35756	Identifier	sev		35561	1					
ANR	35757	AssignmentExpression	"sev = decodeSyslogName ( ( uchar * ) cstr , syslogPriNames )"		35561	2		=			
ANR	35758	Identifier	sev		35561	0					
ANR	35759	CallExpression	"decodeSyslogName ( ( uchar * ) cstr , syslogPriNames )"		35561	1					
ANR	35760	Callee	decodeSyslogName		35561	0					
ANR	35761	Identifier	decodeSyslogName		35561	0					
ANR	35762	ArgumentList	( uchar * ) cstr		35561	1					
ANR	35763	Argument	( uchar * ) cstr		35561	0					
ANR	35764	CastExpression	( uchar * ) cstr		35561	0					
ANR	35765	CastTarget	uchar *		35561	0					
ANR	35766	Identifier	cstr		35561	1					
ANR	35767	Argument	syslogPriNames		35561	1					
ANR	35768	Identifier	syslogPriNames		35561	0					
ANR	35769	IfStatement	if ( sev == - 1 )		35561	2					
ANR	35770	Condition	sev == - 1	3684:6:97970:97978	35561	0	True				
ANR	35771	EqualityExpression	sev == - 1		35561	0		==			
ANR	35772	Identifier	sev		35561	0					
ANR	35773	UnaryOperationExpression	- 1		35561	1					
ANR	35774	UnaryOperator	-		35561	0					
ANR	35775	PrimaryExpression	1		35561	1					
ANR	35776	CompoundStatement		26:17:961:961	35561	1					
ANR	35777	Statement	parser_errmsg	3685:4:97987:97999	35561	0	True				
ANR	35778	Statement	(	3685:17:98000:98000	35561	1	True				
ANR	35779	Statement	"""invalid syslogseverity '%s', expression will always """	3685:18:98001:98054	35561	2	True				
ANR	35780	Statement	"""evaluate to FALSE"""	3686:11:98067:98085	35561	3	True				
ANR	35781	Statement	","	3686:30:98086:98086	35561	4	True				
ANR	35782	Statement	cstr	3686:32:98088:98091	35561	5	True				
ANR	35783	Statement	)	3686:36:98092:98092	35561	6	True				
ANR	35784	ExpressionStatement		3686:37:98093:98093	35561	7	True				
ANR	35785	ElseStatement	else		35561	0					
ANR	35786	CompoundStatement		29:10:1085:1085	35561	0					
ANR	35787	ExpressionStatement	"DBGPRINTF ( ""optimizer: change comparison OP to FUNC prifilt()\\n"" )"	3689:4:98147:98211	35561	0	True				
ANR	35788	CallExpression	"DBGPRINTF ( ""optimizer: change comparison OP to FUNC prifilt()\\n"" )"		35561	0					
ANR	35789	Callee	DBGPRINTF		35561	0					
ANR	35790	Identifier	DBGPRINTF		35561	0					
ANR	35791	ArgumentList	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35561	1					
ANR	35792	Argument	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35561	0					
ANR	35793	PrimaryExpression	"""optimizer: change comparison OP to FUNC prifilt()\\n"""		35561	0					
ANR	35794	ExpressionStatement	func = cnffuncNew_prifilt ( 0 )	3690:4:98217:98245	35561	1	True				
ANR	35795	AssignmentExpression	func = cnffuncNew_prifilt ( 0 )		35561	0		=			
ANR	35796	Identifier	func		35561	0					
ANR	35797	CallExpression	cnffuncNew_prifilt ( 0 )		35561	1					
ANR	35798	Callee	cnffuncNew_prifilt		35561	0					
ANR	35799	Identifier	cnffuncNew_prifilt		35561	0					
ANR	35800	ArgumentList	0		35561	1					
ANR	35801	Argument	0		35561	0					
ANR	35802	PrimaryExpression	0		35561	0					
ANR	35803	ExpressionStatement	"prifiltSetSeverity ( func -> funcdata , sev , expr -> nodetype )"	3691:4:98251:98306	35561	2	True				
ANR	35804	CallExpression	"prifiltSetSeverity ( func -> funcdata , sev , expr -> nodetype )"		35561	0					
ANR	35805	Callee	prifiltSetSeverity		35561	0					
ANR	35806	Identifier	prifiltSetSeverity		35561	0					
ANR	35807	ArgumentList	func -> funcdata		35561	1					
ANR	35808	Argument	func -> funcdata		35561	0					
ANR	35809	PtrMemberAccess	func -> funcdata		35561	0					
ANR	35810	Identifier	func		35561	0					
ANR	35811	Identifier	funcdata		35561	1					
ANR	35812	Argument	sev		35561	1					
ANR	35813	Identifier	sev		35561	0					
ANR	35814	Argument	expr -> nodetype		35561	2					
ANR	35815	PtrMemberAccess	expr -> nodetype		35561	0					
ANR	35816	Identifier	expr		35561	0					
ANR	35817	Identifier	nodetype		35561	1					
ANR	35818	ExpressionStatement	cnfexprDestruct ( expr )	3692:4:98312:98333	35561	3	True				
ANR	35819	CallExpression	cnfexprDestruct ( expr )		35561	0					
ANR	35820	Callee	cnfexprDestruct		35561	0					
ANR	35821	Identifier	cnfexprDestruct		35561	0					
ANR	35822	ArgumentList	expr		35561	1					
ANR	35823	Argument	expr		35561	0					
ANR	35824	Identifier	expr		35561	0					
ANR	35825	ExpressionStatement	expr = ( struct cnfexpr * ) func	3693:4:98339:98368	35561	4	True				
ANR	35826	AssignmentExpression	expr = ( struct cnfexpr * ) func		35561	0		=			
ANR	35827	Identifier	expr		35561	0					
ANR	35828	CastExpression	( struct cnfexpr * ) func		35561	1					
ANR	35829	CastTarget	struct cnfexpr *		35561	0					
ANR	35830	Identifier	func		35561	1					
ANR	35831	ExpressionStatement	free ( cstr )	3695:3:98378:98388	35561	3	True				
ANR	35832	CallExpression	free ( cstr )		35561	0					
ANR	35833	Callee	free		35561	0					
ANR	35834	Identifier	free		35561	0					
ANR	35835	ArgumentList	cstr		35561	1					
ANR	35836	Argument	cstr		35561	0					
ANR	35837	Identifier	cstr		35561	0					
ANR	35838	ElseStatement	else		35561	0					
ANR	35839	CompoundStatement		39:8:1382:1382	35561	0					
ANR	35840	ExpressionStatement	expr = cnfexprOptimize_CMP_severity_facility ( expr )	3698:2:98406:98456	35561	0	True				
ANR	35841	AssignmentExpression	expr = cnfexprOptimize_CMP_severity_facility ( expr )		35561	0		=			
ANR	35842	Identifier	expr		35561	0					
ANR	35843	CallExpression	cnfexprOptimize_CMP_severity_facility ( expr )		35561	1					
ANR	35844	Callee	cnfexprOptimize_CMP_severity_facility		35561	0					
ANR	35845	Identifier	cnfexprOptimize_CMP_severity_facility		35561	0					
ANR	35846	ArgumentList	expr		35561	1					
ANR	35847	Argument	expr		35561	0					
ANR	35848	Identifier	expr		35561	0					
ANR	35849	ReturnStatement	return expr ;	3700:1:98462:98473	35561	2	True				
ANR	35850	Identifier	expr		35561	0					
ANR	35851	ReturnType	static struct cnfexpr *		35561	1					
ANR	35852	Identifier	cnfexprOptimize_CMP_var		35561	2					
ANR	35853	ParameterList	struct cnfexpr * expr		35561	3					
ANR	35854	Parameter	struct cnfexpr * expr	3658:24:96997:97016	35561	0	True				
ANR	35855	ParameterType	struct cnfexpr *		35561	0					
ANR	35856	Identifier	expr		35561	1					
ANR	35857	CFGEntryNode	ENTRY		35561		True				
ANR	35858	CFGExitNode	EXIT		35561		True				
ANR	35859	Symbol	cstr		35561						
ANR	35860	Symbol	* expr -> r		35561						
ANR	35861	Symbol	func -> funcdata		35561						
ANR	35862	Symbol	CMP_NE		35561						
ANR	35863	Symbol	* expr -> l		35561						
ANR	35864	Symbol	( ( struct cnfstringval * ) expr -> r ) -> estr		35561						
ANR	35865	Symbol	fac		35561						
ANR	35866	Symbol	es_str2cstr		35561						
ANR	35867	Symbol	expr		35561						
ANR	35868	Symbol	syslogPriNames		35561						
ANR	35869	Symbol	strcmp		35561						
ANR	35870	Symbol	NULL		35561						
ANR	35871	Symbol	cnffuncNew_prifilt		35561						
ANR	35872	Symbol	* func		35561						
ANR	35873	Symbol	sev		35561						
ANR	35874	Symbol	expr -> nodetype		35561						
ANR	35875	Symbol	syslogFacNames		35561						
ANR	35876	Symbol	cnfexprOptimize_CMP_severity_facility		35561						
ANR	35877	Symbol	expr -> r		35561						
ANR	35878	Symbol	expr -> l		35561						
ANR	35879	Symbol	expr -> r -> nodetype		35561						
ANR	35880	Symbol	func		35561						
ANR	35881	Symbol	* expr		35561						
ANR	35882	Symbol	( ( struct cnfvar * ) expr -> l ) -> name		35561						
ANR	35883	Symbol	* * expr		35561						
ANR	35884	Symbol	decodeSyslogName		35561						
ANR	35885	Function	cnfexprOptimize_NOT	3703:0:98478:98872							
ANR	35886	FunctionDef	cnfexprOptimize_NOT (struct cnfexpr * expr)		35885	0					
ANR	35887	CompoundStatement		3705:0:98543:98872	35885	0					
ANR	35888	IdentifierDeclStatement	struct cnffunc * func ;	3706:1:98546:98566	35885	0	True				
ANR	35889	IdentifierDecl	* func		35885	0					
ANR	35890	IdentifierDeclType	struct cnffunc *		35885	0					
ANR	35891	Identifier	func		35885	1					
ANR	35892	IfStatement	if ( expr -> r -> nodetype == 'F' )		35885	1					
ANR	35893	Condition	expr -> r -> nodetype == 'F'	3708:4:98573:98596	35885	0	True				
ANR	35894	EqualityExpression	expr -> r -> nodetype == 'F'		35885	0		==			
ANR	35895	PtrMemberAccess	expr -> r -> nodetype		35885	0					
ANR	35896	PtrMemberAccess	expr -> r		35885	0					
ANR	35897	Identifier	expr		35885	0					
ANR	35898	Identifier	r		35885	1					
ANR	35899	Identifier	nodetype		35885	1					
ANR	35900	PrimaryExpression	'F'		35885	1					
ANR	35901	CompoundStatement		4:30:55:55	35885	1					
ANR	35902	ExpressionStatement	func = ( struct cnffunc * ) expr -> r	3709:2:98603:98635	35885	0	True				
ANR	35903	AssignmentExpression	func = ( struct cnffunc * ) expr -> r		35885	0		=			
ANR	35904	Identifier	func		35885	0					
ANR	35905	CastExpression	( struct cnffunc * ) expr -> r		35885	1					
ANR	35906	CastTarget	struct cnffunc *		35885	0					
ANR	35907	PtrMemberAccess	expr -> r		35885	1					
ANR	35908	Identifier	expr		35885	0					
ANR	35909	Identifier	r		35885	1					
ANR	35910	IfStatement	if ( func -> fID == CNFFUNC_PRIFILT )		35885	1					
ANR	35911	Condition	func -> fID == CNFFUNC_PRIFILT	3710:5:98642:98669	35885	0	True				
ANR	35912	EqualityExpression	func -> fID == CNFFUNC_PRIFILT		35885	0		==			
ANR	35913	PtrMemberAccess	func -> fID		35885	0					
ANR	35914	Identifier	func		35885	0					
ANR	35915	Identifier	fID		35885	1					
ANR	35916	Identifier	CNFFUNC_PRIFILT		35885	1					
ANR	35917	CompoundStatement		6:35:128:128	35885	1					
ANR	35918	ExpressionStatement	"DBGPRINTF ( ""optimize NOT prifilt() to inverted prifilt()\\n"" )"	3711:3:98677:98736	35885	0	True				
ANR	35919	CallExpression	"DBGPRINTF ( ""optimize NOT prifilt() to inverted prifilt()\\n"" )"		35885	0					
ANR	35920	Callee	DBGPRINTF		35885	0					
ANR	35921	Identifier	DBGPRINTF		35885	0					
ANR	35922	ArgumentList	"""optimize NOT prifilt() to inverted prifilt()\\n"""		35885	1					
ANR	35923	Argument	"""optimize NOT prifilt() to inverted prifilt()\\n"""		35885	0					
ANR	35924	PrimaryExpression	"""optimize NOT prifilt() to inverted prifilt()\\n"""		35885	0					
ANR	35925	ExpressionStatement	expr -> r = NULL	3712:3:98741:98755	35885	1	True				
ANR	35926	AssignmentExpression	expr -> r = NULL		35885	0		=			
ANR	35927	PtrMemberAccess	expr -> r		35885	0					
ANR	35928	Identifier	expr		35885	0					
ANR	35929	Identifier	r		35885	1					
ANR	35930	Identifier	NULL		35885	1					
ANR	35931	ExpressionStatement	cnfexprDestruct ( expr )	3713:3:98760:98781	35885	2	True				
ANR	35932	CallExpression	cnfexprDestruct ( expr )		35885	0					
ANR	35933	Callee	cnfexprDestruct		35885	0					
ANR	35934	Identifier	cnfexprDestruct		35885	0					
ANR	35935	ArgumentList	expr		35885	1					
ANR	35936	Argument	expr		35885	0					
ANR	35937	Identifier	expr		35885	0					
ANR	35938	ExpressionStatement	prifiltInvert ( func -> funcdata )	3714:3:98786:98815	35885	3	True				
ANR	35939	CallExpression	prifiltInvert ( func -> funcdata )		35885	0					
ANR	35940	Callee	prifiltInvert		35885	0					
ANR	35941	Identifier	prifiltInvert		35885	0					
ANR	35942	ArgumentList	func -> funcdata		35885	1					
ANR	35943	Argument	func -> funcdata		35885	0					
ANR	35944	PtrMemberAccess	func -> funcdata		35885	0					
ANR	35945	Identifier	func		35885	0					
ANR	35946	Identifier	funcdata		35885	1					
ANR	35947	ExpressionStatement	expr = ( struct cnfexpr * ) func	3715:3:98820:98849	35885	4	True				
ANR	35948	AssignmentExpression	expr = ( struct cnfexpr * ) func		35885	0		=			
ANR	35949	Identifier	expr		35885	0					
ANR	35950	CastExpression	( struct cnfexpr * ) func		35885	1					
ANR	35951	CastTarget	struct cnfexpr *		35885	0					
ANR	35952	Identifier	func		35885	1					
ANR	35953	ReturnStatement	return expr ;	3718:1:98859:98870	35885	2	True				
ANR	35954	Identifier	expr		35885	0					
ANR	35955	ReturnType	static struct cnfexpr *		35885	1					
ANR	35956	Identifier	cnfexprOptimize_NOT		35885	2					
ANR	35957	ParameterList	struct cnfexpr * expr		35885	3					
ANR	35958	Parameter	struct cnfexpr * expr	3704:20:98521:98540	35885	0	True				
ANR	35959	ParameterType	struct cnfexpr *		35885	0					
ANR	35960	Identifier	expr		35885	1					
ANR	35961	CFGEntryNode	ENTRY		35885		True				
ANR	35962	CFGExitNode	EXIT		35885		True				
ANR	35963	Symbol	expr -> r -> nodetype		35885						
ANR	35964	Symbol	* expr -> r		35885						
ANR	35965	Symbol	NULL		35885						
ANR	35966	Symbol	func		35885						
ANR	35967	Symbol	* func		35885						
ANR	35968	Symbol	func -> funcdata		35885						
ANR	35969	Symbol	* expr		35885						
ANR	35970	Symbol	* * expr		35885						
ANR	35971	Symbol	CNFFUNC_PRIFILT		35885						
ANR	35972	Symbol	expr -> r		35885						
ANR	35973	Symbol	func -> fID		35885						
ANR	35974	Symbol	expr		35885						
ANR	35975	Function	cnfexprOptimize_AND_OR	3721:0:98875:99424							
ANR	35976	FunctionDef	cnfexprOptimize_AND_OR (struct cnfexpr * expr)		35975	0					
ANR	35977	CompoundStatement		3723:0:98943:99424	35975	0					
ANR	35978	IdentifierDeclStatement	"struct cnffunc * funcl , * funcr ;"	3724:1:98946:98975	35975	0	True				
ANR	35979	IdentifierDecl	* funcl		35975	0					
ANR	35980	IdentifierDeclType	struct cnffunc *		35975	0					
ANR	35981	Identifier	funcl		35975	1					
ANR	35982	IdentifierDecl	* funcr		35975	1					
ANR	35983	IdentifierDeclType	struct cnffunc *		35975	0					
ANR	35984	Identifier	funcr		35975	1					
ANR	35985	IfStatement	if ( expr -> l -> nodetype == 'F' )		35975	1					
ANR	35986	Condition	expr -> l -> nodetype == 'F'	3726:4:98982:99005	35975	0	True				
ANR	35987	EqualityExpression	expr -> l -> nodetype == 'F'		35975	0		==			
ANR	35988	PtrMemberAccess	expr -> l -> nodetype		35975	0					
ANR	35989	PtrMemberAccess	expr -> l		35975	0					
ANR	35990	Identifier	expr		35975	0					
ANR	35991	Identifier	l		35975	1					
ANR	35992	Identifier	nodetype		35975	1					
ANR	35993	PrimaryExpression	'F'		35975	1					
ANR	35994	CompoundStatement		4:30:64:64	35975	1					
ANR	35995	IfStatement	if ( expr -> r -> nodetype == 'F' )		35975	0					
ANR	35996	Condition	expr -> r -> nodetype == 'F'	3727:5:99015:99038	35975	0	True				
ANR	35997	EqualityExpression	expr -> r -> nodetype == 'F'		35975	0		==			
ANR	35998	PtrMemberAccess	expr -> r -> nodetype		35975	0					
ANR	35999	PtrMemberAccess	expr -> r		35975	0					
ANR	36000	Identifier	expr		35975	0					
ANR	36001	Identifier	r		35975	1					
ANR	36002	Identifier	nodetype		35975	1					
ANR	36003	PrimaryExpression	'F'		35975	1					
ANR	36004	CompoundStatement		5:31:97:97	35975	1					
ANR	36005	ExpressionStatement	funcl = ( struct cnffunc * ) expr -> l	3728:3:99046:99079	35975	0	True				
ANR	36006	AssignmentExpression	funcl = ( struct cnffunc * ) expr -> l		35975	0		=			
ANR	36007	Identifier	funcl		35975	0					
ANR	36008	CastExpression	( struct cnffunc * ) expr -> l		35975	1					
ANR	36009	CastTarget	struct cnffunc *		35975	0					
ANR	36010	PtrMemberAccess	expr -> l		35975	1					
ANR	36011	Identifier	expr		35975	0					
ANR	36012	Identifier	l		35975	1					
ANR	36013	ExpressionStatement	funcr = ( struct cnffunc * ) expr -> r	3729:3:99084:99117	35975	1	True				
ANR	36014	AssignmentExpression	funcr = ( struct cnffunc * ) expr -> r		35975	0		=			
ANR	36015	Identifier	funcr		35975	0					
ANR	36016	CastExpression	( struct cnffunc * ) expr -> r		35975	1					
ANR	36017	CastTarget	struct cnffunc *		35975	0					
ANR	36018	PtrMemberAccess	expr -> r		35975	1					
ANR	36019	Identifier	expr		35975	0					
ANR	36020	Identifier	r		35975	1					
ANR	36021	IfStatement	if ( funcl -> fID == CNFFUNC_PRIFILT && funcr -> fID == CNFFUNC_PRIFILT )		35975	2					
ANR	36022	Condition	funcl -> fID == CNFFUNC_PRIFILT && funcr -> fID == CNFFUNC_PRIFILT	3730:6:99125:99186	35975	0	True				
ANR	36023	AndExpression	funcl -> fID == CNFFUNC_PRIFILT && funcr -> fID == CNFFUNC_PRIFILT		35975	0		&&			
ANR	36024	EqualityExpression	funcl -> fID == CNFFUNC_PRIFILT		35975	0		==			
ANR	36025	PtrMemberAccess	funcl -> fID		35975	0					
ANR	36026	Identifier	funcl		35975	0					
ANR	36027	Identifier	fID		35975	1					
ANR	36028	Identifier	CNFFUNC_PRIFILT		35975	1					
ANR	36029	EqualityExpression	funcr -> fID == CNFFUNC_PRIFILT		35975	1		==			
ANR	36030	PtrMemberAccess	funcr -> fID		35975	0					
ANR	36031	Identifier	funcr		35975	0					
ANR	36032	Identifier	fID		35975	1					
ANR	36033	Identifier	CNFFUNC_PRIFILT		35975	1					
ANR	36034	CompoundStatement		8:70:245:245	35975	1					
ANR	36035	ExpressionStatement	"DBGPRINTF ( ""optimize combine AND/OR prifilt()\\n"" )"	3731:4:99195:99243	35975	0	True				
ANR	36036	CallExpression	"DBGPRINTF ( ""optimize combine AND/OR prifilt()\\n"" )"		35975	0					
ANR	36037	Callee	DBGPRINTF		35975	0					
ANR	36038	Identifier	DBGPRINTF		35975	0					
ANR	36039	ArgumentList	"""optimize combine AND/OR prifilt()\\n"""		35975	1					
ANR	36040	Argument	"""optimize combine AND/OR prifilt()\\n"""		35975	0					
ANR	36041	PrimaryExpression	"""optimize combine AND/OR prifilt()\\n"""		35975	0					
ANR	36042	ExpressionStatement	expr -> l = NULL	3732:4:99249:99263	35975	1	True				
ANR	36043	AssignmentExpression	expr -> l = NULL		35975	0		=			
ANR	36044	PtrMemberAccess	expr -> l		35975	0					
ANR	36045	Identifier	expr		35975	0					
ANR	36046	Identifier	l		35975	1					
ANR	36047	Identifier	NULL		35975	1					
ANR	36048	ExpressionStatement	"prifiltCombine ( funcl -> funcdata , funcr -> funcdata , expr -> nodetype )"	3733:4:99269:99333	35975	2	True				
ANR	36049	CallExpression	"prifiltCombine ( funcl -> funcdata , funcr -> funcdata , expr -> nodetype )"		35975	0					
ANR	36050	Callee	prifiltCombine		35975	0					
ANR	36051	Identifier	prifiltCombine		35975	0					
ANR	36052	ArgumentList	funcl -> funcdata		35975	1					
ANR	36053	Argument	funcl -> funcdata		35975	0					
ANR	36054	PtrMemberAccess	funcl -> funcdata		35975	0					
ANR	36055	Identifier	funcl		35975	0					
ANR	36056	Identifier	funcdata		35975	1					
ANR	36057	Argument	funcr -> funcdata		35975	1					
ANR	36058	PtrMemberAccess	funcr -> funcdata		35975	0					
ANR	36059	Identifier	funcr		35975	0					
ANR	36060	Identifier	funcdata		35975	1					
ANR	36061	Argument	expr -> nodetype		35975	2					
ANR	36062	PtrMemberAccess	expr -> nodetype		35975	0					
ANR	36063	Identifier	expr		35975	0					
ANR	36064	Identifier	nodetype		35975	1					
ANR	36065	ExpressionStatement	cnfexprDestruct ( expr )	3734:4:99339:99360	35975	3	True				
ANR	36066	CallExpression	cnfexprDestruct ( expr )		35975	0					
ANR	36067	Callee	cnfexprDestruct		35975	0					
ANR	36068	Identifier	cnfexprDestruct		35975	0					
ANR	36069	ArgumentList	expr		35975	1					
ANR	36070	Argument	expr		35975	0					
ANR	36071	Identifier	expr		35975	0					
ANR	36072	ExpressionStatement	expr = ( struct cnfexpr * ) funcl	3735:4:99366:99396	35975	4	True				
ANR	36073	AssignmentExpression	expr = ( struct cnfexpr * ) funcl		35975	0		=			
ANR	36074	Identifier	expr		35975	0					
ANR	36075	CastExpression	( struct cnfexpr * ) funcl		35975	1					
ANR	36076	CastTarget	struct cnfexpr *		35975	0					
ANR	36077	Identifier	funcl		35975	1					
ANR	36078	ReturnStatement	return expr ;	3739:1:99411:99422	35975	2	True				
ANR	36079	Identifier	expr		35975	0					
ANR	36080	ReturnType	static struct cnfexpr *		35975	1					
ANR	36081	Identifier	cnfexprOptimize_AND_OR		35975	2					
ANR	36082	ParameterList	struct cnfexpr * expr		35975	3					
ANR	36083	Parameter	struct cnfexpr * expr	3722:23:98921:98940	35975	0	True				
ANR	36084	ParameterType	struct cnfexpr *		35975	0					
ANR	36085	Identifier	expr		35975	1					
ANR	36086	CFGEntryNode	ENTRY		35975		True				
ANR	36087	CFGExitNode	EXIT		35975		True				
ANR	36088	Symbol	funcr -> fID		35975						
ANR	36089	Symbol	* expr -> r		35975						
ANR	36090	Symbol	NULL		35975						
ANR	36091	Symbol	expr -> nodetype		35975						
ANR	36092	Symbol	CNFFUNC_PRIFILT		35975						
ANR	36093	Symbol	* funcl		35975						
ANR	36094	Symbol	* expr -> l		35975						
ANR	36095	Symbol	expr -> r		35975						
ANR	36096	Symbol	expr -> l -> nodetype		35975						
ANR	36097	Symbol	* funcr		35975						
ANR	36098	Symbol	funcr -> funcdata		35975						
ANR	36099	Symbol	expr -> l		35975						
ANR	36100	Symbol	expr -> r -> nodetype		35975						
ANR	36101	Symbol	* expr		35975						
ANR	36102	Symbol	funcl -> funcdata		35975						
ANR	36103	Symbol	* * expr		35975						
ANR	36104	Symbol	funcl -> fID		35975						
ANR	36105	Symbol	expr		35975						
ANR	36106	Symbol	funcr		35975						
ANR	36107	Symbol	funcl		35975						
ANR	36108	Function	cnfexprOptimize_CMPEQ_arr	3746:0:99553:99776							
ANR	36109	FunctionDef	cnfexprOptimize_CMPEQ_arr (struct cnfarray * arr)		36108	0					
ANR	36110	CompoundStatement		3748:0:99620:99776	36108	0					
ANR	36111	ExpressionStatement	"DBGPRINTF ( ""optimizer: sorting array of %d members for CMP_EQ/NEQ comparison\\n"" , arr -> nmemb )"	3749:1:99623:99714	36108	0	True				
ANR	36112	CallExpression	"DBGPRINTF ( ""optimizer: sorting array of %d members for CMP_EQ/NEQ comparison\\n"" , arr -> nmemb )"		36108	0					
ANR	36113	Callee	DBGPRINTF		36108	0					
ANR	36114	Identifier	DBGPRINTF		36108	0					
ANR	36115	ArgumentList	"""optimizer: sorting array of %d members for CMP_EQ/NEQ comparison\\n"""		36108	1					
ANR	36116	Argument	"""optimizer: sorting array of %d members for CMP_EQ/NEQ comparison\\n"""		36108	0					
ANR	36117	PrimaryExpression	"""optimizer: sorting array of %d members for CMP_EQ/NEQ comparison\\n"""		36108	0					
ANR	36118	Argument	arr -> nmemb		36108	1					
ANR	36119	PtrMemberAccess	arr -> nmemb		36108	0					
ANR	36120	Identifier	arr		36108	0					
ANR	36121	Identifier	nmemb		36108	1					
ANR	36122	ExpressionStatement	"qsort ( arr -> arr , arr -> nmemb , sizeof ( es_str_t * ) , qs_arrcmp )"	3750:1:99717:99774	36108	1	True				
ANR	36123	CallExpression	"qsort ( arr -> arr , arr -> nmemb , sizeof ( es_str_t * ) , qs_arrcmp )"		36108	0					
ANR	36124	Callee	qsort		36108	0					
ANR	36125	Identifier	qsort		36108	0					
ANR	36126	ArgumentList	arr -> arr		36108	1					
ANR	36127	Argument	arr -> arr		36108	0					
ANR	36128	PtrMemberAccess	arr -> arr		36108	0					
ANR	36129	Identifier	arr		36108	0					
ANR	36130	Identifier	arr		36108	1					
ANR	36131	Argument	arr -> nmemb		36108	1					
ANR	36132	PtrMemberAccess	arr -> nmemb		36108	0					
ANR	36133	Identifier	arr		36108	0					
ANR	36134	Identifier	nmemb		36108	1					
ANR	36135	Argument	sizeof ( es_str_t * )		36108	2					
ANR	36136	SizeofExpression	sizeof ( es_str_t * )		36108	0					
ANR	36137	Sizeof	sizeof		36108	0					
ANR	36138	SizeofOperand	es_str_t *		36108	1					
ANR	36139	Argument	qs_arrcmp		36108	3					
ANR	36140	Identifier	qs_arrcmp		36108	0					
ANR	36141	ReturnType	static inline void		36108	1					
ANR	36142	Identifier	cnfexprOptimize_CMPEQ_arr		36108	2					
ANR	36143	ParameterList	struct cnfarray * arr		36108	3					
ANR	36144	Parameter	struct cnfarray * arr	3747:26:99598:99617	36108	0	True				
ANR	36145	ParameterType	struct cnfarray *		36108	0					
ANR	36146	Identifier	arr		36108	1					
ANR	36147	CFGEntryNode	ENTRY		36108		True				
ANR	36148	CFGExitNode	EXIT		36108		True				
ANR	36149	Symbol	arr		36108						
ANR	36150	Symbol	* arr		36108						
ANR	36151	Symbol	arr -> nmemb		36108						
ANR	36152	Symbol	qs_arrcmp		36108						
ANR	36153	Symbol	arr -> arr		36108						
ANR	36154	Function	cnfexprOptimize	3755:0:99823:102317							
ANR	36155	FunctionDef	cnfexprOptimize (struct cnfexpr * expr)		36154	0					
ANR	36156	CompoundStatement		3757:0:99877:102317	36154	0					
ANR	36157	IdentifierDeclStatement	"long long ln , rn ;"	3758:1:99880:99896	36154	0	True				
ANR	36158	IdentifierDecl	ln		36154	0					
ANR	36159	IdentifierDeclType	long long		36154	0					
ANR	36160	Identifier	ln		36154	1					
ANR	36161	IdentifierDecl	rn		36154	1					
ANR	36162	IdentifierDeclType	long long		36154	0					
ANR	36163	Identifier	rn		36154	1					
ANR	36164	IdentifierDeclStatement	struct cnfexpr * exprswap ;	3759:1:99899:99923	36154	1	True				
ANR	36165	IdentifierDecl	* exprswap		36154	0					
ANR	36166	IdentifierDeclType	struct cnfexpr *		36154	0					
ANR	36167	Identifier	exprswap		36154	1					
ANR	36168	ExpressionStatement	"DBGPRINTF ( ""optimize expr %p, type '%s'\\n"" , expr , tokenToString ( expr -> nodetype ) )"	3761:1:99927:100006	36154	2	True				
ANR	36169	CallExpression	"DBGPRINTF ( ""optimize expr %p, type '%s'\\n"" , expr , tokenToString ( expr -> nodetype ) )"		36154	0					
ANR	36170	Callee	DBGPRINTF		36154	0					
ANR	36171	Identifier	DBGPRINTF		36154	0					
ANR	36172	ArgumentList	"""optimize expr %p, type '%s'\\n"""		36154	1					
ANR	36173	Argument	"""optimize expr %p, type '%s'\\n"""		36154	0					
ANR	36174	PrimaryExpression	"""optimize expr %p, type '%s'\\n"""		36154	0					
ANR	36175	Argument	expr		36154	1					
ANR	36176	Identifier	expr		36154	0					
ANR	36177	Argument	tokenToString ( expr -> nodetype )		36154	2					
ANR	36178	CallExpression	tokenToString ( expr -> nodetype )		36154	0					
ANR	36179	Callee	tokenToString		36154	0					
ANR	36180	Identifier	tokenToString		36154	0					
ANR	36181	ArgumentList	expr -> nodetype		36154	1					
ANR	36182	Argument	expr -> nodetype		36154	0					
ANR	36183	PtrMemberAccess	expr -> nodetype		36154	0					
ANR	36184	Identifier	expr		36154	0					
ANR	36185	Identifier	nodetype		36154	1					
ANR	36186	SwitchStatement	switch ( expr -> nodetype )		36154	3					
ANR	36187	Condition	expr -> nodetype	3762:8:100016:100029	36154	0	True				
ANR	36188	PtrMemberAccess	expr -> nodetype		36154	0					
ANR	36189	Identifier	expr		36154	0					
ANR	36190	Identifier	nodetype		36154	1					
ANR	36191	CompoundStatement		6:24:154:154	36154	1					
ANR	36192	Label	case '&' :	3763:1:100035:100043	36154	0	True				
ANR	36193	ExpressionStatement	constFoldConcat ( expr )	3764:2:100047:100068	36154	1	True				
ANR	36194	CallExpression	constFoldConcat ( expr )		36154	0					
ANR	36195	Callee	constFoldConcat		36154	0					
ANR	36196	Identifier	constFoldConcat		36154	0					
ANR	36197	ArgumentList	expr		36154	1					
ANR	36198	Argument	expr		36154	0					
ANR	36199	Identifier	expr		36154	0					
ANR	36200	BreakStatement	break ;	3765:2:100072:100077	36154	2	True				
ANR	36201	Label	case '+' :	3766:1:100080:100088	36154	3	True				
ANR	36202	IfStatement	"if ( getConstNumber ( expr , & ln , & rn ) )"		36154	4					
ANR	36203	Condition	"getConstNumber ( expr , & ln , & rn )"	3767:5:100095:100124	36154	0	True				
ANR	36204	CallExpression	"getConstNumber ( expr , & ln , & rn )"		36154	0					
ANR	36205	Callee	getConstNumber		36154	0					
ANR	36206	Identifier	getConstNumber		36154	0					
ANR	36207	ArgumentList	expr		36154	1					
ANR	36208	Argument	expr		36154	0					
ANR	36209	Identifier	expr		36154	0					
ANR	36210	Argument	& ln		36154	1					
ANR	36211	UnaryOperationExpression	& ln		36154	0					
ANR	36212	UnaryOperator	&		36154	0					
ANR	36213	Identifier	ln		36154	1					
ANR	36214	Argument	& rn		36154	2					
ANR	36215	UnaryOperationExpression	& rn		36154	0					
ANR	36216	UnaryOperator	&		36154	0					
ANR	36217	Identifier	rn		36154	1					
ANR	36218	CompoundStatement		11:38:250:250	36154	1					
ANR	36219	ExpressionStatement	expr -> nodetype = 'N'	3768:3:100133:100153	36154	0	True				
ANR	36220	AssignmentExpression	expr -> nodetype = 'N'		36154	0		=			
ANR	36221	PtrMemberAccess	expr -> nodetype		36154	0					
ANR	36222	Identifier	expr		36154	0					
ANR	36223	Identifier	nodetype		36154	1					
ANR	36224	PrimaryExpression	'N'		36154	1					
ANR	36225	ExpressionStatement	( ( struct cnfnumval * ) expr ) -> val = ln + rn	3769:3:100158:100198	36154	1	True				
ANR	36226	AssignmentExpression	( ( struct cnfnumval * ) expr ) -> val = ln + rn		36154	0		=			
ANR	36227	PtrMemberAccess	( ( struct cnfnumval * ) expr ) -> val		36154	0					
ANR	36228	CastExpression	( struct cnfnumval * ) expr		36154	0					
ANR	36229	CastTarget	struct cnfnumval *		36154	0					
ANR	36230	Identifier	expr		36154	1					
ANR	36231	Identifier	val		36154	1					
ANR	36232	AdditiveExpression	ln + rn		36154	1		+			
ANR	36233	Identifier	ln		36154	0					
ANR	36234	Identifier	rn		36154	1					
ANR	36235	BreakStatement	break ;	3771:2:100206:100211	36154	5	True				
ANR	36236	Label	case '-' :	3772:1:100214:100222	36154	6	True				
ANR	36237	IfStatement	"if ( getConstNumber ( expr , & ln , & rn ) )"		36154	7					
ANR	36238	Condition	"getConstNumber ( expr , & ln , & rn )"	3773:5:100229:100258	36154	0	True				
ANR	36239	CallExpression	"getConstNumber ( expr , & ln , & rn )"		36154	0					
ANR	36240	Callee	getConstNumber		36154	0					
ANR	36241	Identifier	getConstNumber		36154	0					
ANR	36242	ArgumentList	expr		36154	1					
ANR	36243	Argument	expr		36154	0					
ANR	36244	Identifier	expr		36154	0					
ANR	36245	Argument	& ln		36154	1					
ANR	36246	UnaryOperationExpression	& ln		36154	0					
ANR	36247	UnaryOperator	&		36154	0					
ANR	36248	Identifier	ln		36154	1					
ANR	36249	Argument	& rn		36154	2					
ANR	36250	UnaryOperationExpression	& rn		36154	0					
ANR	36251	UnaryOperator	&		36154	0					
ANR	36252	Identifier	rn		36154	1					
ANR	36253	CompoundStatement		17:38:384:384	36154	1					
ANR	36254	ExpressionStatement	expr -> nodetype = 'N'	3774:3:100267:100287	36154	0	True				
ANR	36255	AssignmentExpression	expr -> nodetype = 'N'		36154	0		=			
ANR	36256	PtrMemberAccess	expr -> nodetype		36154	0					
ANR	36257	Identifier	expr		36154	0					
ANR	36258	Identifier	nodetype		36154	1					
ANR	36259	PrimaryExpression	'N'		36154	1					
ANR	36260	ExpressionStatement	( ( struct cnfnumval * ) expr ) -> val = ln - rn	3775:3:100292:100332	36154	1	True				
ANR	36261	AssignmentExpression	( ( struct cnfnumval * ) expr ) -> val = ln - rn		36154	0		=			
ANR	36262	PtrMemberAccess	( ( struct cnfnumval * ) expr ) -> val		36154	0					
ANR	36263	CastExpression	( struct cnfnumval * ) expr		36154	0					
ANR	36264	CastTarget	struct cnfnumval *		36154	0					
ANR	36265	Identifier	expr		36154	1					
ANR	36266	Identifier	val		36154	1					
ANR	36267	AdditiveExpression	ln - rn		36154	1		-			
ANR	36268	Identifier	ln		36154	0					
ANR	36269	Identifier	rn		36154	1					
ANR	36270	BreakStatement	break ;	3777:2:100340:100345	36154	8	True				
ANR	36271	Label	case '*' :	3778:1:100348:100356	36154	9	True				
ANR	36272	IfStatement	"if ( getConstNumber ( expr , & ln , & rn ) )"		36154	10					
ANR	36273	Condition	"getConstNumber ( expr , & ln , & rn )"	3779:5:100363:100392	36154	0	True				
ANR	36274	CallExpression	"getConstNumber ( expr , & ln , & rn )"		36154	0					
ANR	36275	Callee	getConstNumber		36154	0					
ANR	36276	Identifier	getConstNumber		36154	0					
ANR	36277	ArgumentList	expr		36154	1					
ANR	36278	Argument	expr		36154	0					
ANR	36279	Identifier	expr		36154	0					
ANR	36280	Argument	& ln		36154	1					
ANR	36281	UnaryOperationExpression	& ln		36154	0					
ANR	36282	UnaryOperator	&		36154	0					
ANR	36283	Identifier	ln		36154	1					
ANR	36284	Argument	& rn		36154	2					
ANR	36285	UnaryOperationExpression	& rn		36154	0					
ANR	36286	UnaryOperator	&		36154	0					
ANR	36287	Identifier	rn		36154	1					
ANR	36288	CompoundStatement		23:38:518:518	36154	1					
ANR	36289	ExpressionStatement	expr -> nodetype = 'N'	3780:3:100401:100421	36154	0	True				
ANR	36290	AssignmentExpression	expr -> nodetype = 'N'		36154	0		=			
ANR	36291	PtrMemberAccess	expr -> nodetype		36154	0					
ANR	36292	Identifier	expr		36154	0					
ANR	36293	Identifier	nodetype		36154	1					
ANR	36294	PrimaryExpression	'N'		36154	1					
ANR	36295	ExpressionStatement	( ( struct cnfnumval * ) expr ) -> val = ln * rn	3781:3:100426:100466	36154	1	True				
ANR	36296	AssignmentExpression	( ( struct cnfnumval * ) expr ) -> val = ln * rn		36154	0		=			
ANR	36297	PtrMemberAccess	( ( struct cnfnumval * ) expr ) -> val		36154	0					
ANR	36298	CastExpression	( struct cnfnumval * ) expr		36154	0					
ANR	36299	CastTarget	struct cnfnumval *		36154	0					
ANR	36300	Identifier	expr		36154	1					
ANR	36301	Identifier	val		36154	1					
ANR	36302	MultiplicativeExpression	ln * rn		36154	1		*			
ANR	36303	Identifier	ln		36154	0					
ANR	36304	Identifier	rn		36154	1					
ANR	36305	BreakStatement	break ;	3783:2:100474:100479	36154	11	True				
ANR	36306	Label	case '/' :	3784:1:100482:100490	36154	12	True				
ANR	36307	IfStatement	"if ( getConstNumber ( expr , & ln , & rn ) )"		36154	13					
ANR	36308	Condition	"getConstNumber ( expr , & ln , & rn )"	3785:5:100497:100526	36154	0	True				
ANR	36309	CallExpression	"getConstNumber ( expr , & ln , & rn )"		36154	0					
ANR	36310	Callee	getConstNumber		36154	0					
ANR	36311	Identifier	getConstNumber		36154	0					
ANR	36312	ArgumentList	expr		36154	1					
ANR	36313	Argument	expr		36154	0					
ANR	36314	Identifier	expr		36154	0					
ANR	36315	Argument	& ln		36154	1					
ANR	36316	UnaryOperationExpression	& ln		36154	0					
ANR	36317	UnaryOperator	&		36154	0					
ANR	36318	Identifier	ln		36154	1					
ANR	36319	Argument	& rn		36154	2					
ANR	36320	UnaryOperationExpression	& rn		36154	0					
ANR	36321	UnaryOperator	&		36154	0					
ANR	36322	Identifier	rn		36154	1					
ANR	36323	CompoundStatement		29:38:652:652	36154	1					
ANR	36324	ExpressionStatement	expr -> nodetype = 'N'	3786:3:100535:100555	36154	0	True				
ANR	36325	AssignmentExpression	expr -> nodetype = 'N'		36154	0		=			
ANR	36326	PtrMemberAccess	expr -> nodetype		36154	0					
ANR	36327	Identifier	expr		36154	0					
ANR	36328	Identifier	nodetype		36154	1					
ANR	36329	PrimaryExpression	'N'		36154	1					
ANR	36330	IfStatement	if ( rn == 0 )		36154	1					
ANR	36331	Condition	rn == 0	3787:6:100563:100569	36154	0	True				
ANR	36332	EqualityExpression	rn == 0		36154	0		==			
ANR	36333	Identifier	rn		36154	0					
ANR	36334	PrimaryExpression	0		36154	1					
ANR	36335	CompoundStatement		31:15:694:694	36154	1					
ANR	36336	ExpressionStatement	( ( struct cnfnumval * ) expr ) -> val = 0	3789:4:100605:100639	36154	0	True				
ANR	36337	AssignmentExpression	( ( struct cnfnumval * ) expr ) -> val = 0		36154	0		=			
ANR	36338	PtrMemberAccess	( ( struct cnfnumval * ) expr ) -> val		36154	0					
ANR	36339	CastExpression	( struct cnfnumval * ) expr		36154	0					
ANR	36340	CastTarget	struct cnfnumval *		36154	0					
ANR	36341	Identifier	expr		36154	1					
ANR	36342	Identifier	val		36154	1					
ANR	36343	PrimaryExpression	0		36154	1					
ANR	36344	ElseStatement	else		36154	0					
ANR	36345	CompoundStatement		34:10:773:773	36154	0					
ANR	36346	ExpressionStatement	( ( struct cnfnumval * ) expr ) -> val = ln / rn	3791:4:100657:100697	36154	0	True				
ANR	36347	AssignmentExpression	( ( struct cnfnumval * ) expr ) -> val = ln / rn		36154	0		=			
ANR	36348	PtrMemberAccess	( ( struct cnfnumval * ) expr ) -> val		36154	0					
ANR	36349	CastExpression	( struct cnfnumval * ) expr		36154	0					
ANR	36350	CastTarget	struct cnfnumval *		36154	0					
ANR	36351	Identifier	expr		36154	1					
ANR	36352	Identifier	val		36154	1					
ANR	36353	MultiplicativeExpression	ln / rn		36154	1		/			
ANR	36354	Identifier	ln		36154	0					
ANR	36355	Identifier	rn		36154	1					
ANR	36356	BreakStatement	break ;	3794:2:100710:100715	36154	14	True				
ANR	36357	Label	case '%' :	3795:1:100718:100726	36154	15	True				
ANR	36358	IfStatement	"if ( getConstNumber ( expr , & ln , & rn ) )"		36154	16					
ANR	36359	Condition	"getConstNumber ( expr , & ln , & rn )"	3796:5:100733:100762	36154	0	True				
ANR	36360	CallExpression	"getConstNumber ( expr , & ln , & rn )"		36154	0					
ANR	36361	Callee	getConstNumber		36154	0					
ANR	36362	Identifier	getConstNumber		36154	0					
ANR	36363	ArgumentList	expr		36154	1					
ANR	36364	Argument	expr		36154	0					
ANR	36365	Identifier	expr		36154	0					
ANR	36366	Argument	& ln		36154	1					
ANR	36367	UnaryOperationExpression	& ln		36154	0					
ANR	36368	UnaryOperator	&		36154	0					
ANR	36369	Identifier	ln		36154	1					
ANR	36370	Argument	& rn		36154	2					
ANR	36371	UnaryOperationExpression	& rn		36154	0					
ANR	36372	UnaryOperator	&		36154	0					
ANR	36373	Identifier	rn		36154	1					
ANR	36374	CompoundStatement		40:38:888:888	36154	1					
ANR	36375	ExpressionStatement	expr -> nodetype = 'N'	3797:3:100771:100791	36154	0	True				
ANR	36376	AssignmentExpression	expr -> nodetype = 'N'		36154	0		=			
ANR	36377	PtrMemberAccess	expr -> nodetype		36154	0					
ANR	36378	Identifier	expr		36154	0					
ANR	36379	Identifier	nodetype		36154	1					
ANR	36380	PrimaryExpression	'N'		36154	1					
ANR	36381	IfStatement	if ( rn == 0 )		36154	1					
ANR	36382	Condition	rn == 0	3798:6:100799:100805	36154	0	True				
ANR	36383	EqualityExpression	rn == 0		36154	0		==			
ANR	36384	Identifier	rn		36154	0					
ANR	36385	PrimaryExpression	0		36154	1					
ANR	36386	CompoundStatement		42:15:930:930	36154	1					
ANR	36387	ExpressionStatement	( ( struct cnfnumval * ) expr ) -> val = 0	3800:4:100841:100875	36154	0	True				
ANR	36388	AssignmentExpression	( ( struct cnfnumval * ) expr ) -> val = 0		36154	0		=			
ANR	36389	PtrMemberAccess	( ( struct cnfnumval * ) expr ) -> val		36154	0					
ANR	36390	CastExpression	( struct cnfnumval * ) expr		36154	0					
ANR	36391	CastTarget	struct cnfnumval *		36154	0					
ANR	36392	Identifier	expr		36154	1					
ANR	36393	Identifier	val		36154	1					
ANR	36394	PrimaryExpression	0		36154	1					
ANR	36395	ElseStatement	else		36154	0					
ANR	36396	CompoundStatement		45:10:1009:1009	36154	0					
ANR	36397	ExpressionStatement	( ( struct cnfnumval * ) expr ) -> val = ln % rn	3802:4:100893:100933	36154	0	True				
ANR	36398	AssignmentExpression	( ( struct cnfnumval * ) expr ) -> val = ln % rn		36154	0		=			
ANR	36399	PtrMemberAccess	( ( struct cnfnumval * ) expr ) -> val		36154	0					
ANR	36400	CastExpression	( struct cnfnumval * ) expr		36154	0					
ANR	36401	CastTarget	struct cnfnumval *		36154	0					
ANR	36402	Identifier	expr		36154	1					
ANR	36403	Identifier	val		36154	1					
ANR	36404	MultiplicativeExpression	ln % rn		36154	1		%			
ANR	36405	Identifier	ln		36154	0					
ANR	36406	Identifier	rn		36154	1					
ANR	36407	BreakStatement	break ;	3805:2:100946:100951	36154	17	True				
ANR	36408	Label	case CMP_NE :	3806:1:100954:100965	36154	18	True				
ANR	36409	Identifier	CMP_NE		36154	0					
ANR	36410	Label	case CMP_EQ :	3807:1:100968:100979	36154	19	True				
ANR	36411	Identifier	CMP_EQ		36154	0					
ANR	36412	ExpressionStatement	expr -> l = cnfexprOptimize ( expr -> l )	3808:2:100983:101017	36154	20	True				
ANR	36413	AssignmentExpression	expr -> l = cnfexprOptimize ( expr -> l )		36154	0		=			
ANR	36414	PtrMemberAccess	expr -> l		36154	0					
ANR	36415	Identifier	expr		36154	0					
ANR	36416	Identifier	l		36154	1					
ANR	36417	CallExpression	cnfexprOptimize ( expr -> l )		36154	1					
ANR	36418	Callee	cnfexprOptimize		36154	0					
ANR	36419	Identifier	cnfexprOptimize		36154	0					
ANR	36420	ArgumentList	expr -> l		36154	1					
ANR	36421	Argument	expr -> l		36154	0					
ANR	36422	PtrMemberAccess	expr -> l		36154	0					
ANR	36423	Identifier	expr		36154	0					
ANR	36424	Identifier	l		36154	1					
ANR	36425	ExpressionStatement	expr -> r = cnfexprOptimize ( expr -> r )	3809:2:101021:101055	36154	21	True				
ANR	36426	AssignmentExpression	expr -> r = cnfexprOptimize ( expr -> r )		36154	0		=			
ANR	36427	PtrMemberAccess	expr -> r		36154	0					
ANR	36428	Identifier	expr		36154	0					
ANR	36429	Identifier	r		36154	1					
ANR	36430	CallExpression	cnfexprOptimize ( expr -> r )		36154	1					
ANR	36431	Callee	cnfexprOptimize		36154	0					
ANR	36432	Identifier	cnfexprOptimize		36154	0					
ANR	36433	ArgumentList	expr -> r		36154	1					
ANR	36434	Argument	expr -> r		36154	0					
ANR	36435	PtrMemberAccess	expr -> r		36154	0					
ANR	36436	Identifier	expr		36154	0					
ANR	36437	Identifier	r		36154	1					
ANR	36438	IfStatement	if ( expr -> l -> nodetype == 'A' )		36154	22					
ANR	36439	Condition	expr -> l -> nodetype == 'A'	3810:5:101062:101085	36154	0	True				
ANR	36440	EqualityExpression	expr -> l -> nodetype == 'A'		36154	0		==			
ANR	36441	PtrMemberAccess	expr -> l -> nodetype		36154	0					
ANR	36442	PtrMemberAccess	expr -> l		36154	0					
ANR	36443	Identifier	expr		36154	0					
ANR	36444	Identifier	l		36154	1					
ANR	36445	Identifier	nodetype		36154	1					
ANR	36446	PrimaryExpression	'A'		36154	1					
ANR	36447	CompoundStatement		54:31:1210:1210	36154	1					
ANR	36448	IfStatement	if ( expr -> r -> nodetype == 'A' )		36154	0					
ANR	36449	Condition	expr -> r -> nodetype == 'A'	3811:6:101096:101119	36154	0	True				
ANR	36450	EqualityExpression	expr -> r -> nodetype == 'A'		36154	0		==			
ANR	36451	PtrMemberAccess	expr -> r -> nodetype		36154	0					
ANR	36452	PtrMemberAccess	expr -> r		36154	0					
ANR	36453	Identifier	expr		36154	0					
ANR	36454	Identifier	r		36154	1					
ANR	36455	Identifier	nodetype		36154	1					
ANR	36456	PrimaryExpression	'A'		36154	1					
ANR	36457	CompoundStatement		55:32:1244:1244	36154	1					
ANR	36458	Statement	parser_errmsg	3812:4:101128:101140	36154	0	True				
ANR	36459	Statement	(	3812:17:101141:101141	36154	1	True				
ANR	36460	Statement	"""warning: '==' or '<>' """	3812:18:101142:101165	36154	2	True				
ANR	36461	Statement	"""comparison of two constant string """	3813:6:101173:101208	36154	3	True				
ANR	36462	Statement	"""arrays makes no sense"""	3814:6:101216:101238	36154	4	True				
ANR	36463	Statement	)	3814:29:101239:101239	36154	5	True				
ANR	36464	ExpressionStatement		3814:30:101240:101240	36154	6	True				
ANR	36465	ElseStatement	else		36154	0					
ANR	36466	CompoundStatement		59:10:1374:1374	36154	0					
ANR	36467	ExpressionStatement	exprswap = expr -> l	3816:4:101296:101314	36154	0	True				
ANR	36468	AssignmentExpression	exprswap = expr -> l		36154	0		=			
ANR	36469	Identifier	exprswap		36154	0					
ANR	36470	PtrMemberAccess	expr -> l		36154	1					
ANR	36471	Identifier	expr		36154	0					
ANR	36472	Identifier	l		36154	1					
ANR	36473	ExpressionStatement	expr -> l = expr -> r	3817:4:101320:101337	36154	1	True				
ANR	36474	AssignmentExpression	expr -> l = expr -> r		36154	0		=			
ANR	36475	PtrMemberAccess	expr -> l		36154	0					
ANR	36476	Identifier	expr		36154	0					
ANR	36477	Identifier	l		36154	1					
ANR	36478	PtrMemberAccess	expr -> r		36154	1					
ANR	36479	Identifier	expr		36154	0					
ANR	36480	Identifier	r		36154	1					
ANR	36481	ExpressionStatement	expr -> r = exprswap	3818:4:101343:101361	36154	2	True				
ANR	36482	AssignmentExpression	expr -> r = exprswap		36154	0		=			
ANR	36483	PtrMemberAccess	expr -> r		36154	0					
ANR	36484	Identifier	expr		36154	0					
ANR	36485	Identifier	r		36154	1					
ANR	36486	Identifier	exprswap		36154	1					
ANR	36487	IfStatement	if ( expr -> r -> nodetype == 'A' )		36154	23					
ANR	36488	Condition	expr -> r -> nodetype == 'A'	3821:5:101377:101400	36154	0	True				
ANR	36489	EqualityExpression	expr -> r -> nodetype == 'A'		36154	0		==			
ANR	36490	PtrMemberAccess	expr -> r -> nodetype		36154	0					
ANR	36491	PtrMemberAccess	expr -> r		36154	0					
ANR	36492	Identifier	expr		36154	0					
ANR	36493	Identifier	r		36154	1					
ANR	36494	Identifier	nodetype		36154	1					
ANR	36495	PrimaryExpression	'A'		36154	1					
ANR	36496	CompoundStatement		65:31:1525:1525	36154	1					
ANR	36497	ExpressionStatement	cnfexprOptimize_CMPEQ_arr ( ( struct cnfarray * ) expr -> r )	3822:3:101408:101461	36154	0	True				
ANR	36498	CallExpression	cnfexprOptimize_CMPEQ_arr ( ( struct cnfarray * ) expr -> r )		36154	0					
ANR	36499	Callee	cnfexprOptimize_CMPEQ_arr		36154	0					
ANR	36500	Identifier	cnfexprOptimize_CMPEQ_arr		36154	0					
ANR	36501	ArgumentList	( struct cnfarray * ) expr -> r		36154	1					
ANR	36502	Argument	( struct cnfarray * ) expr -> r		36154	0					
ANR	36503	CastExpression	( struct cnfarray * ) expr -> r		36154	0					
ANR	36504	CastTarget	struct cnfarray *		36154	0					
ANR	36505	PtrMemberAccess	expr -> r		36154	1					
ANR	36506	Identifier	expr		36154	0					
ANR	36507	Identifier	r		36154	1					
ANR	36508	IfStatement	if ( expr -> l -> nodetype == 'V' )		36154	24					
ANR	36509	Condition	expr -> l -> nodetype == 'V'	3827:5:101560:101583	36154	0	True				
ANR	36510	EqualityExpression	expr -> l -> nodetype == 'V'		36154	0		==			
ANR	36511	PtrMemberAccess	expr -> l -> nodetype		36154	0					
ANR	36512	PtrMemberAccess	expr -> l		36154	0					
ANR	36513	Identifier	expr		36154	0					
ANR	36514	Identifier	l		36154	1					
ANR	36515	Identifier	nodetype		36154	1					
ANR	36516	PrimaryExpression	'V'		36154	1					
ANR	36517	CompoundStatement		71:31:1708:1708	36154	1					
ANR	36518	ExpressionStatement	expr = cnfexprOptimize_CMP_var ( expr )	3828:3:101591:101627	36154	0	True				
ANR	36519	AssignmentExpression	expr = cnfexprOptimize_CMP_var ( expr )		36154	0		=			
ANR	36520	Identifier	expr		36154	0					
ANR	36521	CallExpression	cnfexprOptimize_CMP_var ( expr )		36154	1					
ANR	36522	Callee	cnfexprOptimize_CMP_var		36154	0					
ANR	36523	Identifier	cnfexprOptimize_CMP_var		36154	0					
ANR	36524	ArgumentList	expr		36154	1					
ANR	36525	Argument	expr		36154	0					
ANR	36526	Identifier	expr		36154	0					
ANR	36527	BreakStatement	break ;	3830:2:101635:101640	36154	25	True				
ANR	36528	Label	case CMP_LE :	3831:1:101643:101654	36154	26	True				
ANR	36529	Identifier	CMP_LE		36154	0					
ANR	36530	Label	case CMP_GE :	3832:1:101657:101668	36154	27	True				
ANR	36531	Identifier	CMP_GE		36154	0					
ANR	36532	Label	case CMP_LT :	3833:1:101671:101682	36154	28	True				
ANR	36533	Identifier	CMP_LT		36154	0					
ANR	36534	Label	case CMP_GT :	3834:1:101685:101696	36154	29	True				
ANR	36535	Identifier	CMP_GT		36154	0					
ANR	36536	ExpressionStatement	expr -> l = cnfexprOptimize ( expr -> l )	3835:2:101700:101734	36154	30	True				
ANR	36537	AssignmentExpression	expr -> l = cnfexprOptimize ( expr -> l )		36154	0		=			
ANR	36538	PtrMemberAccess	expr -> l		36154	0					
ANR	36539	Identifier	expr		36154	0					
ANR	36540	Identifier	l		36154	1					
ANR	36541	CallExpression	cnfexprOptimize ( expr -> l )		36154	1					
ANR	36542	Callee	cnfexprOptimize		36154	0					
ANR	36543	Identifier	cnfexprOptimize		36154	0					
ANR	36544	ArgumentList	expr -> l		36154	1					
ANR	36545	Argument	expr -> l		36154	0					
ANR	36546	PtrMemberAccess	expr -> l		36154	0					
ANR	36547	Identifier	expr		36154	0					
ANR	36548	Identifier	l		36154	1					
ANR	36549	ExpressionStatement	expr -> r = cnfexprOptimize ( expr -> r )	3836:2:101738:101772	36154	31	True				
ANR	36550	AssignmentExpression	expr -> r = cnfexprOptimize ( expr -> r )		36154	0		=			
ANR	36551	PtrMemberAccess	expr -> r		36154	0					
ANR	36552	Identifier	expr		36154	0					
ANR	36553	Identifier	r		36154	1					
ANR	36554	CallExpression	cnfexprOptimize ( expr -> r )		36154	1					
ANR	36555	Callee	cnfexprOptimize		36154	0					
ANR	36556	Identifier	cnfexprOptimize		36154	0					
ANR	36557	ArgumentList	expr -> r		36154	1					
ANR	36558	Argument	expr -> r		36154	0					
ANR	36559	PtrMemberAccess	expr -> r		36154	0					
ANR	36560	Identifier	expr		36154	0					
ANR	36561	Identifier	r		36154	1					
ANR	36562	ExpressionStatement	expr = cnfexprOptimize_CMP_severity_facility ( expr )	3837:2:101776:101826	36154	32	True				
ANR	36563	AssignmentExpression	expr = cnfexprOptimize_CMP_severity_facility ( expr )		36154	0		=			
ANR	36564	Identifier	expr		36154	0					
ANR	36565	CallExpression	cnfexprOptimize_CMP_severity_facility ( expr )		36154	1					
ANR	36566	Callee	cnfexprOptimize_CMP_severity_facility		36154	0					
ANR	36567	Identifier	cnfexprOptimize_CMP_severity_facility		36154	0					
ANR	36568	ArgumentList	expr		36154	1					
ANR	36569	Argument	expr		36154	0					
ANR	36570	Identifier	expr		36154	0					
ANR	36571	BreakStatement	break ;	3838:2:101830:101835	36154	33	True				
ANR	36572	Label	case CMP_CONTAINS :	3839:1:101838:101855	36154	34	True				
ANR	36573	Identifier	CMP_CONTAINS		36154	0					
ANR	36574	Label	case CMP_CONTAINSI :	3840:1:101858:101876	36154	35	True				
ANR	36575	Identifier	CMP_CONTAINSI		36154	0					
ANR	36576	Label	case CMP_STARTSWITH :	3841:1:101879:101898	36154	36	True				
ANR	36577	Identifier	CMP_STARTSWITH		36154	0					
ANR	36578	Label	case CMP_STARTSWITHI :	3842:1:101901:101921	36154	37	True				
ANR	36579	Identifier	CMP_STARTSWITHI		36154	0					
ANR	36580	ExpressionStatement	expr -> l = cnfexprOptimize ( expr -> l )	3843:2:101925:101959	36154	38	True				
ANR	36581	AssignmentExpression	expr -> l = cnfexprOptimize ( expr -> l )		36154	0		=			
ANR	36582	PtrMemberAccess	expr -> l		36154	0					
ANR	36583	Identifier	expr		36154	0					
ANR	36584	Identifier	l		36154	1					
ANR	36585	CallExpression	cnfexprOptimize ( expr -> l )		36154	1					
ANR	36586	Callee	cnfexprOptimize		36154	0					
ANR	36587	Identifier	cnfexprOptimize		36154	0					
ANR	36588	ArgumentList	expr -> l		36154	1					
ANR	36589	Argument	expr -> l		36154	0					
ANR	36590	PtrMemberAccess	expr -> l		36154	0					
ANR	36591	Identifier	expr		36154	0					
ANR	36592	Identifier	l		36154	1					
ANR	36593	ExpressionStatement	expr -> r = cnfexprOptimize ( expr -> r )	3844:2:101963:101997	36154	39	True				
ANR	36594	AssignmentExpression	expr -> r = cnfexprOptimize ( expr -> r )		36154	0		=			
ANR	36595	PtrMemberAccess	expr -> r		36154	0					
ANR	36596	Identifier	expr		36154	0					
ANR	36597	Identifier	r		36154	1					
ANR	36598	CallExpression	cnfexprOptimize ( expr -> r )		36154	1					
ANR	36599	Callee	cnfexprOptimize		36154	0					
ANR	36600	Identifier	cnfexprOptimize		36154	0					
ANR	36601	ArgumentList	expr -> r		36154	1					
ANR	36602	Argument	expr -> r		36154	0					
ANR	36603	PtrMemberAccess	expr -> r		36154	0					
ANR	36604	Identifier	expr		36154	0					
ANR	36605	Identifier	r		36154	1					
ANR	36606	BreakStatement	break ;	3845:2:102001:102006	36154	40	True				
ANR	36607	Label	case AND :	3846:1:102009:102017	36154	41	True				
ANR	36608	Identifier	AND		36154	0					
ANR	36609	Label	case OR :	3847:1:102020:102027	36154	42	True				
ANR	36610	Identifier	OR		36154	0					
ANR	36611	ExpressionStatement	expr -> l = cnfexprOptimize ( expr -> l )	3848:2:102031:102065	36154	43	True				
ANR	36612	AssignmentExpression	expr -> l = cnfexprOptimize ( expr -> l )		36154	0		=			
ANR	36613	PtrMemberAccess	expr -> l		36154	0					
ANR	36614	Identifier	expr		36154	0					
ANR	36615	Identifier	l		36154	1					
ANR	36616	CallExpression	cnfexprOptimize ( expr -> l )		36154	1					
ANR	36617	Callee	cnfexprOptimize		36154	0					
ANR	36618	Identifier	cnfexprOptimize		36154	0					
ANR	36619	ArgumentList	expr -> l		36154	1					
ANR	36620	Argument	expr -> l		36154	0					
ANR	36621	PtrMemberAccess	expr -> l		36154	0					
ANR	36622	Identifier	expr		36154	0					
ANR	36623	Identifier	l		36154	1					
ANR	36624	ExpressionStatement	expr -> r = cnfexprOptimize ( expr -> r )	3849:2:102069:102103	36154	44	True				
ANR	36625	AssignmentExpression	expr -> r = cnfexprOptimize ( expr -> r )		36154	0		=			
ANR	36626	PtrMemberAccess	expr -> r		36154	0					
ANR	36627	Identifier	expr		36154	0					
ANR	36628	Identifier	r		36154	1					
ANR	36629	CallExpression	cnfexprOptimize ( expr -> r )		36154	1					
ANR	36630	Callee	cnfexprOptimize		36154	0					
ANR	36631	Identifier	cnfexprOptimize		36154	0					
ANR	36632	ArgumentList	expr -> r		36154	1					
ANR	36633	Argument	expr -> r		36154	0					
ANR	36634	PtrMemberAccess	expr -> r		36154	0					
ANR	36635	Identifier	expr		36154	0					
ANR	36636	Identifier	r		36154	1					
ANR	36637	ExpressionStatement	expr = cnfexprOptimize_AND_OR ( expr )	3850:2:102107:102142	36154	45	True				
ANR	36638	AssignmentExpression	expr = cnfexprOptimize_AND_OR ( expr )		36154	0		=			
ANR	36639	Identifier	expr		36154	0					
ANR	36640	CallExpression	cnfexprOptimize_AND_OR ( expr )		36154	1					
ANR	36641	Callee	cnfexprOptimize_AND_OR		36154	0					
ANR	36642	Identifier	cnfexprOptimize_AND_OR		36154	0					
ANR	36643	ArgumentList	expr		36154	1					
ANR	36644	Argument	expr		36154	0					
ANR	36645	Identifier	expr		36154	0					
ANR	36646	BreakStatement	break ;	3851:2:102146:102151	36154	46	True				
ANR	36647	Label	case NOT :	3852:1:102154:102162	36154	47	True				
ANR	36648	Identifier	NOT		36154	0					
ANR	36649	ExpressionStatement	expr -> r = cnfexprOptimize ( expr -> r )	3853:2:102166:102200	36154	48	True				
ANR	36650	AssignmentExpression	expr -> r = cnfexprOptimize ( expr -> r )		36154	0		=			
ANR	36651	PtrMemberAccess	expr -> r		36154	0					
ANR	36652	Identifier	expr		36154	0					
ANR	36653	Identifier	r		36154	1					
ANR	36654	CallExpression	cnfexprOptimize ( expr -> r )		36154	1					
ANR	36655	Callee	cnfexprOptimize		36154	0					
ANR	36656	Identifier	cnfexprOptimize		36154	0					
ANR	36657	ArgumentList	expr -> r		36154	1					
ANR	36658	Argument	expr -> r		36154	0					
ANR	36659	PtrMemberAccess	expr -> r		36154	0					
ANR	36660	Identifier	expr		36154	0					
ANR	36661	Identifier	r		36154	1					
ANR	36662	ExpressionStatement	expr = cnfexprOptimize_NOT ( expr )	3854:2:102204:102236	36154	49	True				
ANR	36663	AssignmentExpression	expr = cnfexprOptimize_NOT ( expr )		36154	0		=			
ANR	36664	Identifier	expr		36154	0					
ANR	36665	CallExpression	cnfexprOptimize_NOT ( expr )		36154	1					
ANR	36666	Callee	cnfexprOptimize_NOT		36154	0					
ANR	36667	Identifier	cnfexprOptimize_NOT		36154	0					
ANR	36668	ArgumentList	expr		36154	1					
ANR	36669	Argument	expr		36154	0					
ANR	36670	Identifier	expr		36154	0					
ANR	36671	BreakStatement	break ;	3855:2:102240:102245	36154	50	True				
ANR	36672	Label	default :	3856:1:102248:102255	36154	51	True				
ANR	36673	Identifier	default		36154	0					
ANR	36674	BreakStatement	break ;	3857:2:102293:102298	36154	52	True				
ANR	36675	ReturnStatement	return expr ;	3859:1:102304:102315	36154	4	True				
ANR	36676	Identifier	expr		36154	0					
ANR	36677	ReturnType	struct cnfexpr *		36154	1					
ANR	36678	Identifier	cnfexprOptimize		36154	2					
ANR	36679	ParameterList	struct cnfexpr * expr		36154	3					
ANR	36680	Parameter	struct cnfexpr * expr	3756:16:99855:99874	36154	0	True				
ANR	36681	ParameterType	struct cnfexpr *		36154	0					
ANR	36682	Identifier	expr		36154	1					
ANR	36683	CFGEntryNode	ENTRY		36154		True				
ANR	36684	CFGExitNode	EXIT		36154		True				
ANR	36685	Symbol	ln		36154						
ANR	36686	Symbol	cnfexprOptimize_AND_OR		36154						
ANR	36687	Symbol	* expr -> r		36154						
ANR	36688	Symbol	cnfexprOptimize_CMP_var		36154						
ANR	36689	Symbol	expr -> nodetype		36154						
ANR	36690	Symbol	& rn		36154						
ANR	36691	Symbol	cnfexprOptimize_CMP_severity_facility		36154						
ANR	36692	Symbol	getConstNumber		36154						
ANR	36693	Symbol	expr -> r		36154						
ANR	36694	Symbol	* expr -> l		36154						
ANR	36695	Symbol	expr -> l -> nodetype		36154						
ANR	36696	Symbol	tokenToString		36154						
ANR	36697	Symbol	( ( struct cnfnumval * ) expr ) -> val		36154						
ANR	36698	Symbol	& ln		36154						
ANR	36699	Symbol	cnfexprOptimize		36154						
ANR	36700	Symbol	expr -> l		36154						
ANR	36701	Symbol	expr -> r -> nodetype		36154						
ANR	36702	Symbol	exprswap		36154						
ANR	36703	Symbol	* expr		36154						
ANR	36704	Symbol	* * expr		36154						
ANR	36705	Symbol	expr		36154						
ANR	36706	Symbol	cnfexprOptimize_NOT		36154						
ANR	36707	Symbol	rn		36154						
ANR	36708	Function	removeNOPs	3865:0:102402:102992							
ANR	36709	FunctionDef	removeNOPs (struct cnfstmt * root)		36708	0					
ANR	36710	CompoundStatement		3867:0:102459:102992	36708	0					
ANR	36711	IdentifierDeclStatement	"struct cnfstmt * stmt , * toDel , * prevstmt = NULL ;"	3868:1:102462:102508	36708	0	True				
ANR	36712	IdentifierDecl	* stmt		36708	0					
ANR	36713	IdentifierDeclType	struct cnfstmt *		36708	0					
ANR	36714	Identifier	stmt		36708	1					
ANR	36715	IdentifierDecl	* toDel		36708	1					
ANR	36716	IdentifierDeclType	struct cnfstmt *		36708	0					
ANR	36717	Identifier	toDel		36708	1					
ANR	36718	IdentifierDecl	* prevstmt = NULL		36708	2					
ANR	36719	IdentifierDeclType	struct cnfstmt *		36708	0					
ANR	36720	Identifier	prevstmt		36708	1					
ANR	36721	AssignmentExpression	* prevstmt = NULL		36708	2		=			
ANR	36722	Identifier	NULL		36708	0					
ANR	36723	Identifier	NULL		36708	1					
ANR	36724	IdentifierDeclStatement	struct cnfstmt * newRoot = NULL ;	3869:1:102511:102541	36708	1	True				
ANR	36725	IdentifierDecl	* newRoot = NULL		36708	0					
ANR	36726	IdentifierDeclType	struct cnfstmt *		36708	0					
ANR	36727	Identifier	newRoot		36708	1					
ANR	36728	AssignmentExpression	* newRoot = NULL		36708	2		=			
ANR	36729	Identifier	NULL		36708	0					
ANR	36730	Identifier	NULL		36708	1					
ANR	36731	IfStatement	if ( root == NULL )		36708	2					
ANR	36732	Condition	root == NULL	3871:4:102549:102560	36708	0	True				
ANR	36733	EqualityExpression	root == NULL		36708	0		==			
ANR	36734	Identifier	root		36708	0					
ANR	36735	Identifier	NULL		36708	1					
ANR	36736	GotoStatement	goto done ;	3871:18:102563:102572	36708	1	True				
ANR	36737	Identifier	done		36708	0					
ANR	36738	ExpressionStatement	stmt = root	3872:1:102575:102586	36708	3	True				
ANR	36739	AssignmentExpression	stmt = root		36708	0		=			
ANR	36740	Identifier	stmt		36708	0					
ANR	36741	Identifier	root		36708	1					
ANR	36742	WhileStatement	while ( stmt != NULL )		36708	4					
ANR	36743	Condition	stmt != NULL	3873:7:102595:102606	36708	0	True				
ANR	36744	EqualityExpression	stmt != NULL		36708	0		!=			
ANR	36745	Identifier	stmt		36708	0					
ANR	36746	Identifier	NULL		36708	1					
ANR	36747	CompoundStatement		7:21:149:149	36708	1					
ANR	36748	IfStatement	if ( stmt -> nodetype == S_NOP )		36708	0					
ANR	36749	Condition	stmt -> nodetype == S_NOP	3874:5:102616:102638	36708	0	True				
ANR	36750	EqualityExpression	stmt -> nodetype == S_NOP		36708	0		==			
ANR	36751	PtrMemberAccess	stmt -> nodetype		36708	0					
ANR	36752	Identifier	stmt		36708	0					
ANR	36753	Identifier	nodetype		36708	1					
ANR	36754	Identifier	S_NOP		36708	1					
ANR	36755	CompoundStatement		8:30:181:181	36708	1					
ANR	36756	IfStatement	if ( prevstmt != NULL )		36708	0					
ANR	36757	Condition	prevstmt != NULL	3875:6:102649:102664	36708	0	True				
ANR	36758	EqualityExpression	prevstmt != NULL		36708	0		!=			
ANR	36759	Identifier	prevstmt		36708	0					
ANR	36760	Identifier	NULL		36708	1					
ANR	36761	ExpressionStatement	prevstmt -> next = NULL	3877:4:102727:102748	36708	1	True				
ANR	36762	AssignmentExpression	prevstmt -> next = NULL		36708	0		=			
ANR	36763	PtrMemberAccess	prevstmt -> next		36708	0					
ANR	36764	Identifier	prevstmt		36708	0					
ANR	36765	Identifier	next		36708	1					
ANR	36766	Identifier	NULL		36708	1					
ANR	36767	ExpressionStatement	toDel = stmt	3878:3:102753:102765	36708	1	True				
ANR	36768	AssignmentExpression	toDel = stmt		36708	0		=			
ANR	36769	Identifier	toDel		36708	0					
ANR	36770	Identifier	stmt		36708	1					
ANR	36771	ExpressionStatement	stmt = stmt -> next	3879:3:102770:102787	36708	2	True				
ANR	36772	AssignmentExpression	stmt = stmt -> next		36708	0		=			
ANR	36773	Identifier	stmt		36708	0					
ANR	36774	PtrMemberAccess	stmt -> next		36708	1					
ANR	36775	Identifier	stmt		36708	0					
ANR	36776	Identifier	next		36708	1					
ANR	36777	ExpressionStatement	cnfstmtDestruct ( toDel )	3880:3:102792:102814	36708	3	True				
ANR	36778	CallExpression	cnfstmtDestruct ( toDel )		36708	0					
ANR	36779	Callee	cnfstmtDestruct		36708	0					
ANR	36780	Identifier	cnfstmtDestruct		36708	0					
ANR	36781	ArgumentList	toDel		36708	1					
ANR	36782	Argument	toDel		36708	0					
ANR	36783	Identifier	toDel		36708	0					
ANR	36784	ElseStatement	else		36708	0					
ANR	36785	CompoundStatement		15:9:365:365	36708	0					
ANR	36786	IfStatement	if ( newRoot == NULL )		36708	0					
ANR	36787	Condition	newRoot == NULL	3882:6:102833:102847	36708	0	True				
ANR	36788	EqualityExpression	newRoot == NULL		36708	0		==			
ANR	36789	Identifier	newRoot		36708	0					
ANR	36790	Identifier	NULL		36708	1					
ANR	36791	ExpressionStatement	newRoot = stmt	3883:4:102854:102868	36708	1	True				
ANR	36792	AssignmentExpression	newRoot = stmt		36708	0		=			
ANR	36793	Identifier	newRoot		36708	0					
ANR	36794	Identifier	stmt		36708	1					
ANR	36795	IfStatement	if ( prevstmt != NULL )		36708	1					
ANR	36796	Condition	prevstmt != NULL	3884:6:102876:102891	36708	0	True				
ANR	36797	EqualityExpression	prevstmt != NULL		36708	0		!=			
ANR	36798	Identifier	prevstmt		36708	0					
ANR	36799	Identifier	NULL		36708	1					
ANR	36800	ExpressionStatement	prevstmt -> next = stmt	3885:4:102898:102919	36708	1	True				
ANR	36801	AssignmentExpression	prevstmt -> next = stmt		36708	0		=			
ANR	36802	PtrMemberAccess	prevstmt -> next		36708	0					
ANR	36803	Identifier	prevstmt		36708	0					
ANR	36804	Identifier	next		36708	1					
ANR	36805	Identifier	stmt		36708	1					
ANR	36806	ExpressionStatement	prevstmt = stmt	3886:3:102924:102939	36708	2	True				
ANR	36807	AssignmentExpression	prevstmt = stmt		36708	0		=			
ANR	36808	Identifier	prevstmt		36708	0					
ANR	36809	Identifier	stmt		36708	1					
ANR	36810	ExpressionStatement	stmt = stmt -> next	3887:3:102944:102961	36708	3	True				
ANR	36811	AssignmentExpression	stmt = stmt -> next		36708	0		=			
ANR	36812	Identifier	stmt		36708	0					
ANR	36813	PtrMemberAccess	stmt -> next		36708	1					
ANR	36814	Identifier	stmt		36708	0					
ANR	36815	Identifier	next		36708	1					
ANR	36816	Label	done :	3890:0:102970:102974	36708	5	True				
ANR	36817	Identifier	done		36708	0					
ANR	36818	ReturnStatement	return newRoot ;	3890:6:102976:102990	36708	6	True				
ANR	36819	Identifier	newRoot		36708	0					
ANR	36820	ReturnType	static struct cnfstmt *		36708	1					
ANR	36821	Identifier	removeNOPs		36708	2					
ANR	36822	ParameterList	struct cnfstmt * root		36708	3					
ANR	36823	Parameter	struct cnfstmt * root	3866:11:102437:102456	36708	0	True				
ANR	36824	ParameterType	struct cnfstmt *		36708	0					
ANR	36825	Identifier	root		36708	1					
ANR	36826	CFGEntryNode	ENTRY		36708		True				
ANR	36827	CFGExitNode	EXIT		36708		True				
ANR	36828	Symbol	prevstmt		36708						
ANR	36829	Symbol	NULL		36708						
ANR	36830	Symbol	* prevstmt		36708						
ANR	36831	Symbol	toDel		36708						
ANR	36832	Symbol	root		36708						
ANR	36833	Symbol	newRoot		36708						
ANR	36834	Symbol	* stmt		36708						
ANR	36835	Symbol	stmt -> nodetype		36708						
ANR	36836	Symbol	stmt -> next		36708						
ANR	36837	Symbol	stmt		36708						
ANR	36838	Symbol	S_NOP		36708						
ANR	36839	Symbol	prevstmt -> next		36708						
ANR	36840	Function	cnfstmtOptimizeForeach	3893:0:102995:103249							
ANR	36841	FunctionDef	cnfstmtOptimizeForeach (struct cnfstmt * stmt)		36840	0					
ANR	36842	CompoundStatement		3895:0:103052:103249	36840	0					
ANR	36843	ExpressionStatement	stmt -> d . s_foreach . iter -> collection = cnfexprOptimize ( stmt -> d . s_foreach . iter -> collection )	3896:1:103055:103143	36840	0	True				
ANR	36844	AssignmentExpression	stmt -> d . s_foreach . iter -> collection = cnfexprOptimize ( stmt -> d . s_foreach . iter -> collection )		36840	0		=			
ANR	36845	PtrMemberAccess	stmt -> d . s_foreach . iter -> collection		36840	0					
ANR	36846	MemberAccess	stmt -> d . s_foreach . iter		36840	0					
ANR	36847	MemberAccess	stmt -> d . s_foreach		36840	0					
ANR	36848	PtrMemberAccess	stmt -> d		36840	0					
ANR	36849	Identifier	stmt		36840	0					
ANR	36850	Identifier	d		36840	1					
ANR	36851	Identifier	s_foreach		36840	1					
ANR	36852	Identifier	iter		36840	1					
ANR	36853	Identifier	collection		36840	1					
ANR	36854	CallExpression	cnfexprOptimize ( stmt -> d . s_foreach . iter -> collection )		36840	1					
ANR	36855	Callee	cnfexprOptimize		36840	0					
ANR	36856	Identifier	cnfexprOptimize		36840	0					
ANR	36857	ArgumentList	stmt -> d . s_foreach . iter -> collection		36840	1					
ANR	36858	Argument	stmt -> d . s_foreach . iter -> collection		36840	0					
ANR	36859	PtrMemberAccess	stmt -> d . s_foreach . iter -> collection		36840	0					
ANR	36860	MemberAccess	stmt -> d . s_foreach . iter		36840	0					
ANR	36861	MemberAccess	stmt -> d . s_foreach		36840	0					
ANR	36862	PtrMemberAccess	stmt -> d		36840	0					
ANR	36863	Identifier	stmt		36840	0					
ANR	36864	Identifier	d		36840	1					
ANR	36865	Identifier	s_foreach		36840	1					
ANR	36866	Identifier	iter		36840	1					
ANR	36867	Identifier	collection		36840	1					
ANR	36868	ExpressionStatement	stmt -> d . s_foreach . body = removeNOPs ( stmt -> d . s_foreach . body )	3897:1:103146:103205	36840	1	True				
ANR	36869	AssignmentExpression	stmt -> d . s_foreach . body = removeNOPs ( stmt -> d . s_foreach . body )		36840	0		=			
ANR	36870	MemberAccess	stmt -> d . s_foreach . body		36840	0					
ANR	36871	MemberAccess	stmt -> d . s_foreach		36840	0					
ANR	36872	PtrMemberAccess	stmt -> d		36840	0					
ANR	36873	Identifier	stmt		36840	0					
ANR	36874	Identifier	d		36840	1					
ANR	36875	Identifier	s_foreach		36840	1					
ANR	36876	Identifier	body		36840	1					
ANR	36877	CallExpression	removeNOPs ( stmt -> d . s_foreach . body )		36840	1					
ANR	36878	Callee	removeNOPs		36840	0					
ANR	36879	Identifier	removeNOPs		36840	0					
ANR	36880	ArgumentList	stmt -> d . s_foreach . body		36840	1					
ANR	36881	Argument	stmt -> d . s_foreach . body		36840	0					
ANR	36882	MemberAccess	stmt -> d . s_foreach . body		36840	0					
ANR	36883	MemberAccess	stmt -> d . s_foreach		36840	0					
ANR	36884	PtrMemberAccess	stmt -> d		36840	0					
ANR	36885	Identifier	stmt		36840	0					
ANR	36886	Identifier	d		36840	1					
ANR	36887	Identifier	s_foreach		36840	1					
ANR	36888	Identifier	body		36840	1					
ANR	36889	ExpressionStatement	cnfstmtOptimize ( stmt -> d . s_foreach . body )	3898:1:103208:103247	36840	2	True				
ANR	36890	CallExpression	cnfstmtOptimize ( stmt -> d . s_foreach . body )		36840	0					
ANR	36891	Callee	cnfstmtOptimize		36840	0					
ANR	36892	Identifier	cnfstmtOptimize		36840	0					
ANR	36893	ArgumentList	stmt -> d . s_foreach . body		36840	1					
ANR	36894	Argument	stmt -> d . s_foreach . body		36840	0					
ANR	36895	MemberAccess	stmt -> d . s_foreach . body		36840	0					
ANR	36896	MemberAccess	stmt -> d . s_foreach		36840	0					
ANR	36897	PtrMemberAccess	stmt -> d		36840	0					
ANR	36898	Identifier	stmt		36840	0					
ANR	36899	Identifier	d		36840	1					
ANR	36900	Identifier	s_foreach		36840	1					
ANR	36901	Identifier	body		36840	1					
ANR	36902	ReturnType	static void		36840	1					
ANR	36903	Identifier	cnfstmtOptimizeForeach		36840	2					
ANR	36904	ParameterList	struct cnfstmt * stmt		36840	3					
ANR	36905	Parameter	struct cnfstmt * stmt	3894:23:103030:103049	36840	0	True				
ANR	36906	ParameterType	struct cnfstmt *		36840	0					
ANR	36907	Identifier	stmt		36840	1					
ANR	36908	CFGEntryNode	ENTRY		36840		True				
ANR	36909	CFGExitNode	EXIT		36840		True				
ANR	36910	Symbol	* * stmt		36840						
ANR	36911	Symbol	cnfexprOptimize		36840						
ANR	36912	Symbol	stmt -> d . s_foreach . iter -> collection		36840						
ANR	36913	Symbol	* stmt -> d . s_foreach . iter		36840						
ANR	36914	Symbol	stmt -> d . s_foreach . iter		36840						
ANR	36915	Symbol	* stmt -> d . s_foreach		36840						
ANR	36916	Symbol	stmt -> d . s_foreach . body		36840						
ANR	36917	Symbol	stmt -> d . s_foreach		36840						
ANR	36918	Symbol	stmt -> d		36840						
ANR	36919	Symbol	* stmt		36840						
ANR	36920	Symbol	* stmt -> d		36840						
ANR	36921	Symbol	stmt		36840						
ANR	36922	Symbol	removeNOPs		36840						
ANR	36923	Function	cnfstmtOptimizeIf	3902:0:103253:104412							
ANR	36924	FunctionDef	cnfstmtOptimizeIf (struct cnfstmt * stmt)		36923	0					
ANR	36925	CompoundStatement		3904:0:103305:104412	36923	0					
ANR	36926	IdentifierDeclStatement	"struct cnfstmt * t_then , * t_else ;"	3905:1:103308:103339	36923	0	True				
ANR	36927	IdentifierDecl	* t_then		36923	0					
ANR	36928	IdentifierDeclType	struct cnfstmt *		36923	0					
ANR	36929	Identifier	t_then		36923	1					
ANR	36930	IdentifierDecl	* t_else		36923	1					
ANR	36931	IdentifierDeclType	struct cnfstmt *		36923	0					
ANR	36932	Identifier	t_else		36923	1					
ANR	36933	IdentifierDeclStatement	struct cnfexpr * expr ;	3906:1:103342:103362	36923	1	True				
ANR	36934	IdentifierDecl	* expr		36923	0					
ANR	36935	IdentifierDeclType	struct cnfexpr *		36923	0					
ANR	36936	Identifier	expr		36923	1					
ANR	36937	IdentifierDeclStatement	struct cnffunc * func ;	3907:1:103365:103385	36923	2	True				
ANR	36938	IdentifierDecl	* func		36923	0					
ANR	36939	IdentifierDeclType	struct cnffunc *		36923	0					
ANR	36940	Identifier	func		36923	1					
ANR	36941	IdentifierDeclStatement	struct funcData_prifilt * prifilt ;	3908:1:103388:103420	36923	3	True				
ANR	36942	IdentifierDecl	* prifilt		36923	0					
ANR	36943	IdentifierDeclType	struct funcData_prifilt *		36923	0					
ANR	36944	Identifier	prifilt		36923	1					
ANR	36945	ExpressionStatement	expr = stmt -> d . s_if . expr = cnfexprOptimize ( stmt -> d . s_if . expr )	3910:1:103424:103485	36923	4	True				
ANR	36946	AssignmentExpression	expr = stmt -> d . s_if . expr = cnfexprOptimize ( stmt -> d . s_if . expr )		36923	0		=			
ANR	36947	Identifier	expr		36923	0					
ANR	36948	AssignmentExpression	stmt -> d . s_if . expr = cnfexprOptimize ( stmt -> d . s_if . expr )		36923	1		=			
ANR	36949	MemberAccess	stmt -> d . s_if . expr		36923	0					
ANR	36950	MemberAccess	stmt -> d . s_if		36923	0					
ANR	36951	PtrMemberAccess	stmt -> d		36923	0					
ANR	36952	Identifier	stmt		36923	0					
ANR	36953	Identifier	d		36923	1					
ANR	36954	Identifier	s_if		36923	1					
ANR	36955	Identifier	expr		36923	1					
ANR	36956	CallExpression	cnfexprOptimize ( stmt -> d . s_if . expr )		36923	1					
ANR	36957	Callee	cnfexprOptimize		36923	0					
ANR	36958	Identifier	cnfexprOptimize		36923	0					
ANR	36959	ArgumentList	stmt -> d . s_if . expr		36923	1					
ANR	36960	Argument	stmt -> d . s_if . expr		36923	0					
ANR	36961	MemberAccess	stmt -> d . s_if . expr		36923	0					
ANR	36962	MemberAccess	stmt -> d . s_if		36923	0					
ANR	36963	PtrMemberAccess	stmt -> d		36923	0					
ANR	36964	Identifier	stmt		36923	0					
ANR	36965	Identifier	d		36923	1					
ANR	36966	Identifier	s_if		36923	1					
ANR	36967	Identifier	expr		36923	1					
ANR	36968	ExpressionStatement	stmt -> d . s_if . t_then = removeNOPs ( stmt -> d . s_if . t_then )	3911:1:103488:103541	36923	5	True				
ANR	36969	AssignmentExpression	stmt -> d . s_if . t_then = removeNOPs ( stmt -> d . s_if . t_then )		36923	0		=			
ANR	36970	MemberAccess	stmt -> d . s_if . t_then		36923	0					
ANR	36971	MemberAccess	stmt -> d . s_if		36923	0					
ANR	36972	PtrMemberAccess	stmt -> d		36923	0					
ANR	36973	Identifier	stmt		36923	0					
ANR	36974	Identifier	d		36923	1					
ANR	36975	Identifier	s_if		36923	1					
ANR	36976	Identifier	t_then		36923	1					
ANR	36977	CallExpression	removeNOPs ( stmt -> d . s_if . t_then )		36923	1					
ANR	36978	Callee	removeNOPs		36923	0					
ANR	36979	Identifier	removeNOPs		36923	0					
ANR	36980	ArgumentList	stmt -> d . s_if . t_then		36923	1					
ANR	36981	Argument	stmt -> d . s_if . t_then		36923	0					
ANR	36982	MemberAccess	stmt -> d . s_if . t_then		36923	0					
ANR	36983	MemberAccess	stmt -> d . s_if		36923	0					
ANR	36984	PtrMemberAccess	stmt -> d		36923	0					
ANR	36985	Identifier	stmt		36923	0					
ANR	36986	Identifier	d		36923	1					
ANR	36987	Identifier	s_if		36923	1					
ANR	36988	Identifier	t_then		36923	1					
ANR	36989	ExpressionStatement	stmt -> d . s_if . t_else = removeNOPs ( stmt -> d . s_if . t_else )	3912:1:103544:103597	36923	6	True				
ANR	36990	AssignmentExpression	stmt -> d . s_if . t_else = removeNOPs ( stmt -> d . s_if . t_else )		36923	0		=			
ANR	36991	MemberAccess	stmt -> d . s_if . t_else		36923	0					
ANR	36992	MemberAccess	stmt -> d . s_if		36923	0					
ANR	36993	PtrMemberAccess	stmt -> d		36923	0					
ANR	36994	Identifier	stmt		36923	0					
ANR	36995	Identifier	d		36923	1					
ANR	36996	Identifier	s_if		36923	1					
ANR	36997	Identifier	t_else		36923	1					
ANR	36998	CallExpression	removeNOPs ( stmt -> d . s_if . t_else )		36923	1					
ANR	36999	Callee	removeNOPs		36923	0					
ANR	37000	Identifier	removeNOPs		36923	0					
ANR	37001	ArgumentList	stmt -> d . s_if . t_else		36923	1					
ANR	37002	Argument	stmt -> d . s_if . t_else		36923	0					
ANR	37003	MemberAccess	stmt -> d . s_if . t_else		36923	0					
ANR	37004	MemberAccess	stmt -> d . s_if		36923	0					
ANR	37005	PtrMemberAccess	stmt -> d		36923	0					
ANR	37006	Identifier	stmt		36923	0					
ANR	37007	Identifier	d		36923	1					
ANR	37008	Identifier	s_if		36923	1					
ANR	37009	Identifier	t_else		36923	1					
ANR	37010	ExpressionStatement	cnfstmtOptimize ( stmt -> d . s_if . t_then )	3913:1:103600:103636	36923	7	True				
ANR	37011	CallExpression	cnfstmtOptimize ( stmt -> d . s_if . t_then )		36923	0					
ANR	37012	Callee	cnfstmtOptimize		36923	0					
ANR	37013	Identifier	cnfstmtOptimize		36923	0					
ANR	37014	ArgumentList	stmt -> d . s_if . t_then		36923	1					
ANR	37015	Argument	stmt -> d . s_if . t_then		36923	0					
ANR	37016	MemberAccess	stmt -> d . s_if . t_then		36923	0					
ANR	37017	MemberAccess	stmt -> d . s_if		36923	0					
ANR	37018	PtrMemberAccess	stmt -> d		36923	0					
ANR	37019	Identifier	stmt		36923	0					
ANR	37020	Identifier	d		36923	1					
ANR	37021	Identifier	s_if		36923	1					
ANR	37022	Identifier	t_then		36923	1					
ANR	37023	ExpressionStatement	cnfstmtOptimize ( stmt -> d . s_if . t_else )	3914:1:103639:103675	36923	8	True				
ANR	37024	CallExpression	cnfstmtOptimize ( stmt -> d . s_if . t_else )		36923	0					
ANR	37025	Callee	cnfstmtOptimize		36923	0					
ANR	37026	Identifier	cnfstmtOptimize		36923	0					
ANR	37027	ArgumentList	stmt -> d . s_if . t_else		36923	1					
ANR	37028	Argument	stmt -> d . s_if . t_else		36923	0					
ANR	37029	MemberAccess	stmt -> d . s_if . t_else		36923	0					
ANR	37030	MemberAccess	stmt -> d . s_if		36923	0					
ANR	37031	PtrMemberAccess	stmt -> d		36923	0					
ANR	37032	Identifier	stmt		36923	0					
ANR	37033	Identifier	d		36923	1					
ANR	37034	Identifier	s_if		36923	1					
ANR	37035	Identifier	t_else		36923	1					
ANR	37036	IfStatement	if ( stmt -> d . s_if . expr -> nodetype == 'F' )		36923	9					
ANR	37037	Condition	stmt -> d . s_if . expr -> nodetype == 'F'	3916:4:103682:103715	36923	0	True				
ANR	37038	EqualityExpression	stmt -> d . s_if . expr -> nodetype == 'F'		36923	0		==			
ANR	37039	PtrMemberAccess	stmt -> d . s_if . expr -> nodetype		36923	0					
ANR	37040	MemberAccess	stmt -> d . s_if . expr		36923	0					
ANR	37041	MemberAccess	stmt -> d . s_if		36923	0					
ANR	37042	PtrMemberAccess	stmt -> d		36923	0					
ANR	37043	Identifier	stmt		36923	0					
ANR	37044	Identifier	d		36923	1					
ANR	37045	Identifier	s_if		36923	1					
ANR	37046	Identifier	expr		36923	1					
ANR	37047	Identifier	nodetype		36923	1					
ANR	37048	PrimaryExpression	'F'		36923	1					
ANR	37049	CompoundStatement		13:40:412:412	36923	1					
ANR	37050	ExpressionStatement	func = ( struct cnffunc * ) expr	3917:2:103722:103750	36923	0	True				
ANR	37051	AssignmentExpression	func = ( struct cnffunc * ) expr		36923	0		=			
ANR	37052	Identifier	func		36923	0					
ANR	37053	CastExpression	( struct cnffunc * ) expr		36923	1					
ANR	37054	CastTarget	struct cnffunc *		36923	0					
ANR	37055	Identifier	expr		36923	1					
ANR	37056	IfStatement	if ( func -> fID == CNFFUNC_PRIFILT )		36923	1					
ANR	37057	Condition	func -> fID == CNFFUNC_PRIFILT	3918:8:103760:103787	36923	0	True				
ANR	37058	EqualityExpression	func -> fID == CNFFUNC_PRIFILT		36923	0		==			
ANR	37059	PtrMemberAccess	func -> fID		36923	0					
ANR	37060	Identifier	func		36923	0					
ANR	37061	Identifier	fID		36923	1					
ANR	37062	Identifier	CNFFUNC_PRIFILT		36923	1					
ANR	37063	CompoundStatement		15:38:484:484	36923	1					
ANR	37064	ExpressionStatement	"DBGPRINTF ( ""optimizer: change IF to PRIFILT\\n"" )"	3919:3:103795:103841	36923	0	True				
ANR	37065	CallExpression	"DBGPRINTF ( ""optimizer: change IF to PRIFILT\\n"" )"		36923	0					
ANR	37066	Callee	DBGPRINTF		36923	0					
ANR	37067	Identifier	DBGPRINTF		36923	0					
ANR	37068	ArgumentList	"""optimizer: change IF to PRIFILT\\n"""		36923	1					
ANR	37069	Argument	"""optimizer: change IF to PRIFILT\\n"""		36923	0					
ANR	37070	PrimaryExpression	"""optimizer: change IF to PRIFILT\\n"""		36923	0					
ANR	37071	ExpressionStatement	t_then = stmt -> d . s_if . t_then	3920:3:103846:103874	36923	1	True				
ANR	37072	AssignmentExpression	t_then = stmt -> d . s_if . t_then		36923	0		=			
ANR	37073	Identifier	t_then		36923	0					
ANR	37074	MemberAccess	stmt -> d . s_if . t_then		36923	1					
ANR	37075	MemberAccess	stmt -> d . s_if		36923	0					
ANR	37076	PtrMemberAccess	stmt -> d		36923	0					
ANR	37077	Identifier	stmt		36923	0					
ANR	37078	Identifier	d		36923	1					
ANR	37079	Identifier	s_if		36923	1					
ANR	37080	Identifier	t_then		36923	1					
ANR	37081	ExpressionStatement	t_else = stmt -> d . s_if . t_else	3921:3:103879:103907	36923	2	True				
ANR	37082	AssignmentExpression	t_else = stmt -> d . s_if . t_else		36923	0		=			
ANR	37083	Identifier	t_else		36923	0					
ANR	37084	MemberAccess	stmt -> d . s_if . t_else		36923	1					
ANR	37085	MemberAccess	stmt -> d . s_if		36923	0					
ANR	37086	PtrMemberAccess	stmt -> d		36923	0					
ANR	37087	Identifier	stmt		36923	0					
ANR	37088	Identifier	d		36923	1					
ANR	37089	Identifier	s_if		36923	1					
ANR	37090	Identifier	t_else		36923	1					
ANR	37091	ExpressionStatement	stmt -> nodetype = S_PRIFILT	3922:3:103912:103938	36923	3	True				
ANR	37092	AssignmentExpression	stmt -> nodetype = S_PRIFILT		36923	0		=			
ANR	37093	PtrMemberAccess	stmt -> nodetype		36923	0					
ANR	37094	Identifier	stmt		36923	0					
ANR	37095	Identifier	nodetype		36923	1					
ANR	37096	Identifier	S_PRIFILT		36923	1					
ANR	37097	ExpressionStatement	prifilt = ( struct funcData_prifilt * ) func -> funcdata	3923:3:103943:103994	36923	4	True				
ANR	37098	AssignmentExpression	prifilt = ( struct funcData_prifilt * ) func -> funcdata		36923	0		=			
ANR	37099	Identifier	prifilt		36923	0					
ANR	37100	CastExpression	( struct funcData_prifilt * ) func -> funcdata		36923	1					
ANR	37101	CastTarget	struct funcData_prifilt *		36923	0					
ANR	37102	PtrMemberAccess	func -> funcdata		36923	1					
ANR	37103	Identifier	func		36923	0					
ANR	37104	Identifier	funcdata		36923	1					
ANR	37105	ExpressionStatement	"memcpy ( stmt -> d . s_prifilt . pmask , prifilt -> pmask , sizeof ( prifilt -> pmask ) )"	3924:3:103999:104074	36923	5	True				
ANR	37106	CallExpression	"memcpy ( stmt -> d . s_prifilt . pmask , prifilt -> pmask , sizeof ( prifilt -> pmask ) )"		36923	0					
ANR	37107	Callee	memcpy		36923	0					
ANR	37108	Identifier	memcpy		36923	0					
ANR	37109	ArgumentList	stmt -> d . s_prifilt . pmask		36923	1					
ANR	37110	Argument	stmt -> d . s_prifilt . pmask		36923	0					
ANR	37111	MemberAccess	stmt -> d . s_prifilt . pmask		36923	0					
ANR	37112	MemberAccess	stmt -> d . s_prifilt		36923	0					
ANR	37113	PtrMemberAccess	stmt -> d		36923	0					
ANR	37114	Identifier	stmt		36923	0					
ANR	37115	Identifier	d		36923	1					
ANR	37116	Identifier	s_prifilt		36923	1					
ANR	37117	Identifier	pmask		36923	1					
ANR	37118	Argument	prifilt -> pmask		36923	1					
ANR	37119	PtrMemberAccess	prifilt -> pmask		36923	0					
ANR	37120	Identifier	prifilt		36923	0					
ANR	37121	Identifier	pmask		36923	1					
ANR	37122	Argument	sizeof ( prifilt -> pmask )		36923	2					
ANR	37123	SizeofExpression	sizeof ( prifilt -> pmask )		36923	0					
ANR	37124	Sizeof	sizeof		36923	0					
ANR	37125	PtrMemberAccess	prifilt -> pmask		36923	1					
ANR	37126	Identifier	prifilt		36923	0					
ANR	37127	Identifier	pmask		36923	1					
ANR	37128	ExpressionStatement	stmt -> d . s_prifilt . t_then = t_then	3926:3:104079:104112	36923	6	True				
ANR	37129	AssignmentExpression	stmt -> d . s_prifilt . t_then = t_then		36923	0		=			
ANR	37130	MemberAccess	stmt -> d . s_prifilt . t_then		36923	0					
ANR	37131	MemberAccess	stmt -> d . s_prifilt		36923	0					
ANR	37132	PtrMemberAccess	stmt -> d		36923	0					
ANR	37133	Identifier	stmt		36923	0					
ANR	37134	Identifier	d		36923	1					
ANR	37135	Identifier	s_prifilt		36923	1					
ANR	37136	Identifier	t_then		36923	1					
ANR	37137	Identifier	t_then		36923	1					
ANR	37138	ExpressionStatement	stmt -> d . s_prifilt . t_else = t_else	3927:3:104117:104150	36923	7	True				
ANR	37139	AssignmentExpression	stmt -> d . s_prifilt . t_else = t_else		36923	0		=			
ANR	37140	MemberAccess	stmt -> d . s_prifilt . t_else		36923	0					
ANR	37141	MemberAccess	stmt -> d . s_prifilt		36923	0					
ANR	37142	PtrMemberAccess	stmt -> d		36923	0					
ANR	37143	Identifier	stmt		36923	0					
ANR	37144	Identifier	d		36923	1					
ANR	37145	Identifier	s_prifilt		36923	1					
ANR	37146	Identifier	t_else		36923	1					
ANR	37147	Identifier	t_else		36923	1					
ANR	37148	IfStatement	if ( func -> nParams == 0 )		36923	8					
ANR	37149	Condition	func -> nParams == 0	3928:6:104158:104175	36923	0	True				
ANR	37150	EqualityExpression	func -> nParams == 0		36923	0		==			
ANR	37151	PtrMemberAccess	func -> nParams		36923	0					
ANR	37152	Identifier	func		36923	0					
ANR	37153	Identifier	nParams		36923	1					
ANR	37154	PrimaryExpression	0		36923	1					
ANR	37155	ExpressionStatement	"stmt -> printable = ( uchar * ) strdup ( ""[Optimizer Result]"" )"	3929:4:104182:104236	36923	1	True				
ANR	37156	AssignmentExpression	"stmt -> printable = ( uchar * ) strdup ( ""[Optimizer Result]"" )"		36923	0		=			
ANR	37157	PtrMemberAccess	stmt -> printable		36923	0					
ANR	37158	Identifier	stmt		36923	0					
ANR	37159	Identifier	printable		36923	1					
ANR	37160	CastExpression	"( uchar * ) strdup ( ""[Optimizer Result]"" )"		36923	1					
ANR	37161	CastTarget	uchar *		36923	0					
ANR	37162	CallExpression	"strdup ( ""[Optimizer Result]"" )"		36923	1					
ANR	37163	Callee	strdup		36923	0					
ANR	37164	Identifier	strdup		36923	0					
ANR	37165	ArgumentList	"""[Optimizer Result]"""		36923	1					
ANR	37166	Argument	"""[Optimizer Result]"""		36923	0					
ANR	37167	PrimaryExpression	"""[Optimizer Result]"""		36923	0					
ANR	37168	ElseStatement	else		36923	0					
ANR	37169	ExpressionStatement	"stmt -> printable = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"	3931:4:104250:104344	36923	0	True				
ANR	37170	AssignmentExpression	"stmt -> printable = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		36923	0		=			
ANR	37171	PtrMemberAccess	stmt -> printable		36923	0					
ANR	37172	Identifier	stmt		36923	0					
ANR	37173	Identifier	printable		36923	1					
ANR	37174	CastExpression	"( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		36923	1					
ANR	37175	CastTarget	uchar *		36923	0					
ANR	37176	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		36923	1					
ANR	37177	Callee	es_str2cstr		36923	0					
ANR	37178	Identifier	es_str2cstr		36923	0					
ANR	37179	ArgumentList	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		36923	1					
ANR	37180	Argument	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		36923	0					
ANR	37181	PtrMemberAccess	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		36923	0					
ANR	37182	CastExpression	( struct cnfstringval * ) func -> expr [ 0 ]		36923	0					
ANR	37183	CastTarget	struct cnfstringval *		36923	0					
ANR	37184	ArrayIndexing	func -> expr [ 0 ]		36923	1					
ANR	37185	PtrMemberAccess	func -> expr		36923	0					
ANR	37186	Identifier	func		36923	0					
ANR	37187	Identifier	expr		36923	1					
ANR	37188	PrimaryExpression	0		36923	1					
ANR	37189	Identifier	estr		36923	1					
ANR	37190	Argument	NULL		36923	1					
ANR	37191	Identifier	NULL		36923	0					
ANR	37192	ExpressionStatement	cnfexprDestruct ( expr )	3933:3:104349:104370	36923	9	True				
ANR	37193	CallExpression	cnfexprDestruct ( expr )		36923	0					
ANR	37194	Callee	cnfexprDestruct		36923	0					
ANR	37195	Identifier	cnfexprDestruct		36923	0					
ANR	37196	ArgumentList	expr		36923	1					
ANR	37197	Argument	expr		36923	0					
ANR	37198	Identifier	expr		36923	0					
ANR	37199	ExpressionStatement	cnfstmtOptimizePRIFilt ( stmt )	3934:3:104375:104403	36923	10	True				
ANR	37200	CallExpression	cnfstmtOptimizePRIFilt ( stmt )		36923	0					
ANR	37201	Callee	cnfstmtOptimizePRIFilt		36923	0					
ANR	37202	Identifier	cnfstmtOptimizePRIFilt		36923	0					
ANR	37203	ArgumentList	stmt		36923	1					
ANR	37204	Argument	stmt		36923	0					
ANR	37205	Identifier	stmt		36923	0					
ANR	37206	ReturnType	static void		36923	1					
ANR	37207	Identifier	cnfstmtOptimizeIf		36923	2					
ANR	37208	ParameterList	struct cnfstmt * stmt		36923	3					
ANR	37209	Parameter	struct cnfstmt * stmt	3903:18:103283:103302	36923	0	True				
ANR	37210	ParameterType	struct cnfstmt *		36923	0					
ANR	37211	Identifier	stmt		36923	1					
ANR	37212	CFGEntryNode	ENTRY		36923		True				
ANR	37213	CFGExitNode	EXIT		36923		True				
ANR	37214	Symbol	stmt -> d . s_if . t_else		36923						
ANR	37215	Symbol	func -> funcdata		36923						
ANR	37216	Symbol	prifilt		36923						
ANR	37217	Symbol	stmt -> nodetype		36923						
ANR	37218	Symbol	es_str2cstr		36923						
ANR	37219	Symbol	stmt -> d . s_prifilt . t_then		36923						
ANR	37220	Symbol	* * * func		36923						
ANR	37221	Symbol	func -> expr		36923						
ANR	37222	Symbol	func -> fID		36923						
ANR	37223	Symbol	stmt -> printable		36923						
ANR	37224	Symbol	expr		36923						
ANR	37225	Symbol	* stmt		36923						
ANR	37226	Symbol	stmt -> d		36923						
ANR	37227	Symbol	* stmt -> d . s_if		36923						
ANR	37228	Symbol	* * func -> expr		36923						
ANR	37229	Symbol	* stmt -> d		36923						
ANR	37230	Symbol	stmt -> d . s_prifilt . pmask		36923						
ANR	37231	Symbol	removeNOPs		36923						
ANR	37232	Symbol	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		36923						
ANR	37233	Symbol	S_PRIFILT		36923						
ANR	37234	Symbol	NULL		36923						
ANR	37235	Symbol	* func		36923						
ANR	37236	Symbol	* prifilt		36923						
ANR	37237	Symbol	stmt -> d . s_if . expr -> nodetype		36923						
ANR	37238	Symbol	CNFFUNC_PRIFILT		36923						
ANR	37239	Symbol	* * func		36923						
ANR	37240	Symbol	* * stmt		36923						
ANR	37241	Symbol	* func -> expr		36923						
ANR	37242	Symbol	t_then		36923						
ANR	37243	Symbol	stmt -> d . s_if . expr		36923						
ANR	37244	Symbol	cnfexprOptimize		36923						
ANR	37245	Symbol	* stmt -> d . s_if . expr		36923						
ANR	37246	Symbol	stmt -> d . s_prifilt . t_else		36923						
ANR	37247	Symbol	func		36923						
ANR	37248	Symbol	prifilt -> pmask		36923						
ANR	37249	Symbol	t_else		36923						
ANR	37250	Symbol	stmt -> d . s_if		36923						
ANR	37251	Symbol	strdup		36923						
ANR	37252	Symbol	stmt		36923						
ANR	37253	Symbol	stmt -> d . s_prifilt		36923						
ANR	37254	Symbol	stmt -> d . s_if . t_then		36923						
ANR	37255	Symbol	func -> nParams		36923						
ANR	37256	Function	cnfstmtOptimizeAct	3939:0:104415:104694							
ANR	37257	FunctionDef	cnfstmtOptimizeAct (struct cnfstmt * stmt)		37256	0					
ANR	37258	CompoundStatement		3941:0:104468:104694	37256	0					
ANR	37259	IdentifierDeclStatement	action_t * pAct ;	3942:1:104471:104485	37256	0	True				
ANR	37260	IdentifierDecl	* pAct		37256	0					
ANR	37261	IdentifierDeclType	action_t *		37256	0					
ANR	37262	Identifier	pAct		37256	1					
ANR	37263	ExpressionStatement	pAct = stmt -> d . act	3944:1:104489:104507	37256	1	True				
ANR	37264	AssignmentExpression	pAct = stmt -> d . act		37256	0		=			
ANR	37265	Identifier	pAct		37256	0					
ANR	37266	MemberAccess	stmt -> d . act		37256	1					
ANR	37267	PtrMemberAccess	stmt -> d		37256	0					
ANR	37268	Identifier	stmt		37256	0					
ANR	37269	Identifier	d		37256	1					
ANR	37270	Identifier	act		37256	1					
ANR	37271	IfStatement	"if ( ! strcmp ( ( char * ) modGetName ( pAct -> pMod ) , ""builtin:omdiscard"" ) )"		37256	2					
ANR	37272	Condition	"! strcmp ( ( char * ) modGetName ( pAct -> pMod ) , ""builtin:omdiscard"" )"	3945:4:104513:104571	37256	0	True				
ANR	37273	UnaryOperationExpression	"! strcmp ( ( char * ) modGetName ( pAct -> pMod ) , ""builtin:omdiscard"" )"		37256	0					
ANR	37274	UnaryOperator	!		37256	0					
ANR	37275	CallExpression	"strcmp ( ( char * ) modGetName ( pAct -> pMod ) , ""builtin:omdiscard"" )"		37256	1					
ANR	37276	Callee	strcmp		37256	0					
ANR	37277	Identifier	strcmp		37256	0					
ANR	37278	ArgumentList	( char * ) modGetName ( pAct -> pMod )		37256	1					
ANR	37279	Argument	( char * ) modGetName ( pAct -> pMod )		37256	0					
ANR	37280	CastExpression	( char * ) modGetName ( pAct -> pMod )		37256	0					
ANR	37281	CastTarget	char *		37256	0					
ANR	37282	CallExpression	modGetName ( pAct -> pMod )		37256	1					
ANR	37283	Callee	modGetName		37256	0					
ANR	37284	Identifier	modGetName		37256	0					
ANR	37285	ArgumentList	pAct -> pMod		37256	1					
ANR	37286	Argument	pAct -> pMod		37256	0					
ANR	37287	PtrMemberAccess	pAct -> pMod		37256	0					
ANR	37288	Identifier	pAct		37256	0					
ANR	37289	Identifier	pMod		37256	1					
ANR	37290	Argument	"""builtin:omdiscard"""		37256	1					
ANR	37291	PrimaryExpression	"""builtin:omdiscard"""		37256	0					
ANR	37292	CompoundStatement		5:65:105:105	37256	1					
ANR	37293	ExpressionStatement	"DBGPRINTF ( ""optimizer: replacing omdiscard by STOP\\n"" )"	3946:2:104578:104631	37256	0	True				
ANR	37294	CallExpression	"DBGPRINTF ( ""optimizer: replacing omdiscard by STOP\\n"" )"		37256	0					
ANR	37295	Callee	DBGPRINTF		37256	0					
ANR	37296	Identifier	DBGPRINTF		37256	0					
ANR	37297	ArgumentList	"""optimizer: replacing omdiscard by STOP\\n"""		37256	1					
ANR	37298	Argument	"""optimizer: replacing omdiscard by STOP\\n"""		37256	0					
ANR	37299	PrimaryExpression	"""optimizer: replacing omdiscard by STOP\\n"""		37256	0					
ANR	37300	ExpressionStatement	actionDestruct ( stmt -> d . act )	3947:2:104635:104662	37256	1	True				
ANR	37301	CallExpression	actionDestruct ( stmt -> d . act )		37256	0					
ANR	37302	Callee	actionDestruct		37256	0					
ANR	37303	Identifier	actionDestruct		37256	0					
ANR	37304	ArgumentList	stmt -> d . act		37256	1					
ANR	37305	Argument	stmt -> d . act		37256	0					
ANR	37306	MemberAccess	stmt -> d . act		37256	0					
ANR	37307	PtrMemberAccess	stmt -> d		37256	0					
ANR	37308	Identifier	stmt		37256	0					
ANR	37309	Identifier	d		37256	1					
ANR	37310	Identifier	act		37256	1					
ANR	37311	ExpressionStatement	stmt -> nodetype = S_STOP	3948:2:104666:104689	37256	2	True				
ANR	37312	AssignmentExpression	stmt -> nodetype = S_STOP		37256	0		=			
ANR	37313	PtrMemberAccess	stmt -> nodetype		37256	0					
ANR	37314	Identifier	stmt		37256	0					
ANR	37315	Identifier	nodetype		37256	1					
ANR	37316	Identifier	S_STOP		37256	1					
ANR	37317	ReturnType	static void		37256	1					
ANR	37318	Identifier	cnfstmtOptimizeAct		37256	2					
ANR	37319	ParameterList	struct cnfstmt * stmt		37256	3					
ANR	37320	Parameter	struct cnfstmt * stmt	3940:19:104446:104465	37256	0	True				
ANR	37321	ParameterType	struct cnfstmt *		37256	0					
ANR	37322	Identifier	stmt		37256	1					
ANR	37323	CFGEntryNode	ENTRY		37256		True				
ANR	37324	CFGExitNode	EXIT		37256		True				
ANR	37325	Symbol	strcmp		37256						
ANR	37326	Symbol	pAct		37256						
ANR	37327	Symbol	pAct -> pMod		37256						
ANR	37328	Symbol	stmt -> d		37256						
ANR	37329	Symbol	* stmt		37256						
ANR	37330	Symbol	* pAct		37256						
ANR	37331	Symbol	stmt -> nodetype		37256						
ANR	37332	Symbol	modGetName		37256						
ANR	37333	Symbol	S_STOP		37256						
ANR	37334	Symbol	stmt		37256						
ANR	37335	Symbol	stmt -> d . act		37256						
ANR	37336	Function	cnfstmtOptimizePRIFilt	3952:0:104697:105750							
ANR	37337	FunctionDef	cnfstmtOptimizePRIFilt (struct cnfstmt * stmt)		37336	0					
ANR	37338	CompoundStatement		3954:0:104754:105750	37336	0					
ANR	37339	IdentifierDeclStatement	int i ;	3955:1:104757:104762	37336	0	True				
ANR	37340	IdentifierDecl	i		37336	0					
ANR	37341	IdentifierDeclType	int		37336	0					
ANR	37342	Identifier	i		37336	1					
ANR	37343	IdentifierDeclStatement	int isAlways = 1 ;	3956:1:104765:104781	37336	1	True				
ANR	37344	IdentifierDecl	isAlways = 1		37336	0					
ANR	37345	IdentifierDeclType	int		37336	0					
ANR	37346	Identifier	isAlways		37336	1					
ANR	37347	AssignmentExpression	isAlways = 1		37336	2		=			
ANR	37348	Identifier	isAlways		37336	0					
ANR	37349	PrimaryExpression	1		37336	1					
ANR	37350	IdentifierDeclStatement	"struct cnfstmt * subroot , * last ;"	3957:1:104784:104814	37336	2	True				
ANR	37351	IdentifierDecl	* subroot		37336	0					
ANR	37352	IdentifierDeclType	struct cnfstmt *		37336	0					
ANR	37353	Identifier	subroot		37336	1					
ANR	37354	IdentifierDecl	* last		37336	1					
ANR	37355	IdentifierDeclType	struct cnfstmt *		37336	0					
ANR	37356	Identifier	last		37336	1					
ANR	37357	ExpressionStatement	stmt -> d . s_prifilt . t_then = removeNOPs ( stmt -> d . s_prifilt . t_then )	3959:1:104818:104881	37336	3	True				
ANR	37358	AssignmentExpression	stmt -> d . s_prifilt . t_then = removeNOPs ( stmt -> d . s_prifilt . t_then )		37336	0		=			
ANR	37359	MemberAccess	stmt -> d . s_prifilt . t_then		37336	0					
ANR	37360	MemberAccess	stmt -> d . s_prifilt		37336	0					
ANR	37361	PtrMemberAccess	stmt -> d		37336	0					
ANR	37362	Identifier	stmt		37336	0					
ANR	37363	Identifier	d		37336	1					
ANR	37364	Identifier	s_prifilt		37336	1					
ANR	37365	Identifier	t_then		37336	1					
ANR	37366	CallExpression	removeNOPs ( stmt -> d . s_prifilt . t_then )		37336	1					
ANR	37367	Callee	removeNOPs		37336	0					
ANR	37368	Identifier	removeNOPs		37336	0					
ANR	37369	ArgumentList	stmt -> d . s_prifilt . t_then		37336	1					
ANR	37370	Argument	stmt -> d . s_prifilt . t_then		37336	0					
ANR	37371	MemberAccess	stmt -> d . s_prifilt . t_then		37336	0					
ANR	37372	MemberAccess	stmt -> d . s_prifilt		37336	0					
ANR	37373	PtrMemberAccess	stmt -> d		37336	0					
ANR	37374	Identifier	stmt		37336	0					
ANR	37375	Identifier	d		37336	1					
ANR	37376	Identifier	s_prifilt		37336	1					
ANR	37377	Identifier	t_then		37336	1					
ANR	37378	ExpressionStatement	cnfstmtOptimize ( stmt -> d . s_prifilt . t_then )	3960:1:104884:104925	37336	4	True				
ANR	37379	CallExpression	cnfstmtOptimize ( stmt -> d . s_prifilt . t_then )		37336	0					
ANR	37380	Callee	cnfstmtOptimize		37336	0					
ANR	37381	Identifier	cnfstmtOptimize		37336	0					
ANR	37382	ArgumentList	stmt -> d . s_prifilt . t_then		37336	1					
ANR	37383	Argument	stmt -> d . s_prifilt . t_then		37336	0					
ANR	37384	MemberAccess	stmt -> d . s_prifilt . t_then		37336	0					
ANR	37385	MemberAccess	stmt -> d . s_prifilt		37336	0					
ANR	37386	PtrMemberAccess	stmt -> d		37336	0					
ANR	37387	Identifier	stmt		37336	0					
ANR	37388	Identifier	d		37336	1					
ANR	37389	Identifier	s_prifilt		37336	1					
ANR	37390	Identifier	t_then		37336	1					
ANR	37391	ForStatement	for ( i = 0 ; i <= LOG_NFACILITIES ; i ++ )		37336	5					
ANR	37392	ForInit	i = 0 ;	3962:5:104933:104938	37336	0	True				
ANR	37393	AssignmentExpression	i = 0		37336	0		=			
ANR	37394	Identifier	i		37336	0					
ANR	37395	PrimaryExpression	0		37336	1					
ANR	37396	Condition	i <= LOG_NFACILITIES	3962:12:104940:104959	37336	1	True				
ANR	37397	RelationalExpression	i <= LOG_NFACILITIES		37336	0		<=			
ANR	37398	Identifier	i		37336	0					
ANR	37399	Identifier	LOG_NFACILITIES		37336	1					
ANR	37400	PostIncDecOperationExpression	i ++	3962:34:104962:104964	37336	2	True				
ANR	37401	Identifier	i		37336	0					
ANR	37402	IncDec	++		37336	1					
ANR	37403	IfStatement	if ( stmt -> d . s_prifilt . pmask [ i ] != 0xff )		37336	3					
ANR	37404	Condition	stmt -> d . s_prifilt . pmask [ i ] != 0xff	3963:5:104972:105005	37336	0	True				
ANR	37405	EqualityExpression	stmt -> d . s_prifilt . pmask [ i ] != 0xff		37336	0		!=			
ANR	37406	ArrayIndexing	stmt -> d . s_prifilt . pmask [ i ]		37336	0					
ANR	37407	MemberAccess	stmt -> d . s_prifilt . pmask		37336	0					
ANR	37408	MemberAccess	stmt -> d . s_prifilt		37336	0					
ANR	37409	PtrMemberAccess	stmt -> d		37336	0					
ANR	37410	Identifier	stmt		37336	0					
ANR	37411	Identifier	d		37336	1					
ANR	37412	Identifier	s_prifilt		37336	1					
ANR	37413	Identifier	pmask		37336	1					
ANR	37414	Identifier	i		37336	1					
ANR	37415	PrimaryExpression	0xff		37336	1					
ANR	37416	CompoundStatement		10:41:253:253	37336	1					
ANR	37417	ExpressionStatement	isAlways = 0	3964:3:105013:105025	37336	0	True				
ANR	37418	AssignmentExpression	isAlways = 0		37336	0		=			
ANR	37419	Identifier	isAlways		37336	0					
ANR	37420	PrimaryExpression	0		37336	1					
ANR	37421	BreakStatement	break ;	3965:3:105030:105035	37336	1	True				
ANR	37422	IfStatement	if ( ! isAlways )		37336	6					
ANR	37423	Condition	! isAlways	3967:4:105045:105053	37336	0	True				
ANR	37424	UnaryOperationExpression	! isAlways		37336	0					
ANR	37425	UnaryOperator	!		37336	0					
ANR	37426	Identifier	isAlways		37336	1					
ANR	37427	GotoStatement	goto done ;	3968:2:105058:105067	37336	1	True				
ANR	37428	Identifier	done		37336	0					
ANR	37429	ExpressionStatement	"DBGPRINTF ( ""optimizer: removing always-true PRIFILT %p\\n"" , stmt )"	3970:1:105071:105134	37336	7	True				
ANR	37430	CallExpression	"DBGPRINTF ( ""optimizer: removing always-true PRIFILT %p\\n"" , stmt )"		37336	0					
ANR	37431	Callee	DBGPRINTF		37336	0					
ANR	37432	Identifier	DBGPRINTF		37336	0					
ANR	37433	ArgumentList	"""optimizer: removing always-true PRIFILT %p\\n"""		37336	1					
ANR	37434	Argument	"""optimizer: removing always-true PRIFILT %p\\n"""		37336	0					
ANR	37435	PrimaryExpression	"""optimizer: removing always-true PRIFILT %p\\n"""		37336	0					
ANR	37436	Argument	stmt		37336	1					
ANR	37437	Identifier	stmt		37336	0					
ANR	37438	IfStatement	if ( stmt -> d . s_prifilt . t_else != NULL )		37336	8					
ANR	37439	Condition	stmt -> d . s_prifilt . t_else != NULL	3971:4:105140:105171	37336	0	True				
ANR	37440	EqualityExpression	stmt -> d . s_prifilt . t_else != NULL		37336	0		!=			
ANR	37441	MemberAccess	stmt -> d . s_prifilt . t_else		37336	0					
ANR	37442	MemberAccess	stmt -> d . s_prifilt		37336	0					
ANR	37443	PtrMemberAccess	stmt -> d		37336	0					
ANR	37444	Identifier	stmt		37336	0					
ANR	37445	Identifier	d		37336	1					
ANR	37446	Identifier	s_prifilt		37336	1					
ANR	37447	Identifier	t_else		37336	1					
ANR	37448	Identifier	NULL		37336	1					
ANR	37449	CompoundStatement		18:38:419:419	37336	1					
ANR	37450	ExpressionStatement	"parser_errmsg ( ""error: always-true PRI filter has else part!\\n"" )"	3972:2:105178:105241	37336	0	True				
ANR	37451	CallExpression	"parser_errmsg ( ""error: always-true PRI filter has else part!\\n"" )"		37336	0					
ANR	37452	Callee	parser_errmsg		37336	0					
ANR	37453	Identifier	parser_errmsg		37336	0					
ANR	37454	ArgumentList	"""error: always-true PRI filter has else part!\\n"""		37336	1					
ANR	37455	Argument	"""error: always-true PRI filter has else part!\\n"""		37336	0					
ANR	37456	PrimaryExpression	"""error: always-true PRI filter has else part!\\n"""		37336	0					
ANR	37457	ExpressionStatement	cnfstmtDestructLst ( stmt -> d . s_prifilt . t_else )	3973:2:105245:105289	37336	1	True				
ANR	37458	CallExpression	cnfstmtDestructLst ( stmt -> d . s_prifilt . t_else )		37336	0					
ANR	37459	Callee	cnfstmtDestructLst		37336	0					
ANR	37460	Identifier	cnfstmtDestructLst		37336	0					
ANR	37461	ArgumentList	stmt -> d . s_prifilt . t_else		37336	1					
ANR	37462	Argument	stmt -> d . s_prifilt . t_else		37336	0					
ANR	37463	MemberAccess	stmt -> d . s_prifilt . t_else		37336	0					
ANR	37464	MemberAccess	stmt -> d . s_prifilt		37336	0					
ANR	37465	PtrMemberAccess	stmt -> d		37336	0					
ANR	37466	Identifier	stmt		37336	0					
ANR	37467	Identifier	d		37336	1					
ANR	37468	Identifier	s_prifilt		37336	1					
ANR	37469	Identifier	t_else		37336	1					
ANR	37470	ExpressionStatement	free ( stmt -> printable )	3975:1:105295:105316	37336	9	True				
ANR	37471	CallExpression	free ( stmt -> printable )		37336	0					
ANR	37472	Callee	free		37336	0					
ANR	37473	Identifier	free		37336	0					
ANR	37474	ArgumentList	stmt -> printable		37336	1					
ANR	37475	Argument	stmt -> printable		37336	0					
ANR	37476	PtrMemberAccess	stmt -> printable		37336	0					
ANR	37477	Identifier	stmt		37336	0					
ANR	37478	Identifier	printable		37336	1					
ANR	37479	ExpressionStatement	stmt -> printable = NULL	3976:1:105319:105341	37336	10	True				
ANR	37480	AssignmentExpression	stmt -> printable = NULL		37336	0		=			
ANR	37481	PtrMemberAccess	stmt -> printable		37336	0					
ANR	37482	Identifier	stmt		37336	0					
ANR	37483	Identifier	printable		37336	1					
ANR	37484	Identifier	NULL		37336	1					
ANR	37485	ExpressionStatement	subroot = stmt -> d . s_prifilt . t_then	3977:1:105344:105378	37336	11	True				
ANR	37486	AssignmentExpression	subroot = stmt -> d . s_prifilt . t_then		37336	0		=			
ANR	37487	Identifier	subroot		37336	0					
ANR	37488	MemberAccess	stmt -> d . s_prifilt . t_then		37336	1					
ANR	37489	MemberAccess	stmt -> d . s_prifilt		37336	0					
ANR	37490	PtrMemberAccess	stmt -> d		37336	0					
ANR	37491	Identifier	stmt		37336	0					
ANR	37492	Identifier	d		37336	1					
ANR	37493	Identifier	s_prifilt		37336	1					
ANR	37494	Identifier	t_then		37336	1					
ANR	37495	IfStatement	if ( subroot == NULL )		37336	12					
ANR	37496	Condition	subroot == NULL	3978:4:105384:105398	37336	0	True				
ANR	37497	EqualityExpression	subroot == NULL		37336	0		==			
ANR	37498	Identifier	subroot		37336	0					
ANR	37499	Identifier	NULL		37336	1					
ANR	37500	CompoundStatement		25:21:646:646	37336	1					
ANR	37501	ExpressionStatement	stmt -> nodetype = S_NOP	3982:3:105507:105529	37336	0	True				
ANR	37502	AssignmentExpression	stmt -> nodetype = S_NOP		37336	0		=			
ANR	37503	PtrMemberAccess	stmt -> nodetype		37336	0					
ANR	37504	Identifier	stmt		37336	0					
ANR	37505	Identifier	nodetype		37336	1					
ANR	37506	Identifier	S_NOP		37336	1					
ANR	37507	GotoStatement	goto done ;	3983:3:105534:105543	37336	1	True				
ANR	37508	Identifier	done		37336	0					
ANR	37509	ForStatement	for ( last = subroot ; last -> next != NULL ; last = last -> next )		37336	13					
ANR	37510	ForInit	last = subroot ;	3985:5:105553:105568	37336	0	True				
ANR	37511	AssignmentExpression	last = subroot		37336	0		=			
ANR	37512	Identifier	last		37336	0					
ANR	37513	Identifier	subroot		37336	1					
ANR	37514	Condition	last -> next != NULL	3985:22:105570:105587	37336	1	True				
ANR	37515	EqualityExpression	last -> next != NULL		37336	0		!=			
ANR	37516	PtrMemberAccess	last -> next		37336	0					
ANR	37517	Identifier	last		37336	0					
ANR	37518	Identifier	next		37336	1					
ANR	37519	Identifier	NULL		37336	1					
ANR	37520	AssignmentExpression	last = last -> next	3985:43:105591:105607	37336	2	True	=			
ANR	37521	Identifier	last		37336	0					
ANR	37522	PtrMemberAccess	last -> next		37336	1					
ANR	37523	Identifier	last		37336	0					
ANR	37524	Identifier	next		37336	1					
ANR	37525	ExpressionStatement		3986:33:105643:105643	37336	3	True				
ANR	37526	ExpressionStatement	last -> next = stmt -> next	3987:1:105646:105669	37336	14	True				
ANR	37527	AssignmentExpression	last -> next = stmt -> next		37336	0		=			
ANR	37528	PtrMemberAccess	last -> next		37336	0					
ANR	37529	Identifier	last		37336	0					
ANR	37530	Identifier	next		37336	1					
ANR	37531	PtrMemberAccess	stmt -> next		37336	1					
ANR	37532	Identifier	stmt		37336	0					
ANR	37533	Identifier	next		37336	1					
ANR	37534	ExpressionStatement	"memcpy ( stmt , subroot , sizeof ( struct cnfstmt ) )"	3988:1:105672:105717	37336	15	True				
ANR	37535	CallExpression	"memcpy ( stmt , subroot , sizeof ( struct cnfstmt ) )"		37336	0					
ANR	37536	Callee	memcpy		37336	0					
ANR	37537	Identifier	memcpy		37336	0					
ANR	37538	ArgumentList	stmt		37336	1					
ANR	37539	Argument	stmt		37336	0					
ANR	37540	Identifier	stmt		37336	0					
ANR	37541	Argument	subroot		37336	1					
ANR	37542	Identifier	subroot		37336	0					
ANR	37543	Argument	sizeof ( struct cnfstmt )		37336	2					
ANR	37544	SizeofExpression	sizeof ( struct cnfstmt )		37336	0					
ANR	37545	Sizeof	sizeof		37336	0					
ANR	37546	SizeofOperand	struct cnfstmt		37336	1					
ANR	37547	ExpressionStatement	free ( subroot )	3989:1:105720:105733	37336	16	True				
ANR	37548	CallExpression	free ( subroot )		37336	0					
ANR	37549	Callee	free		37336	0					
ANR	37550	Identifier	free		37336	0					
ANR	37551	ArgumentList	subroot		37336	1					
ANR	37552	Argument	subroot		37336	0					
ANR	37553	Identifier	subroot		37336	0					
ANR	37554	Label	done :	3991:0:105736:105740	37336	17	True				
ANR	37555	Identifier	done		37336	0					
ANR	37556	ReturnStatement	return ;	3991:6:105742:105748	37336	18	True				
ANR	37557	ReturnType	static void		37336	1					
ANR	37558	Identifier	cnfstmtOptimizePRIFilt		37336	2					
ANR	37559	ParameterList	struct cnfstmt * stmt		37336	3					
ANR	37560	Parameter	struct cnfstmt * stmt	3953:23:104732:104751	37336	0	True				
ANR	37561	ParameterType	struct cnfstmt *		37336	0					
ANR	37562	Identifier	stmt		37336	1					
ANR	37563	CFGEntryNode	ENTRY		37336		True				
ANR	37564	CFGExitNode	EXIT		37336		True				
ANR	37565	Symbol	last -> next		37336						
ANR	37566	Symbol	isAlways		37336						
ANR	37567	Symbol	* stmt -> d . s_prifilt . pmask		37336						
ANR	37568	Symbol	subroot		37336						
ANR	37569	Symbol	stmt -> nodetype		37336						
ANR	37570	Symbol	stmt -> d . s_prifilt . t_then		37336						
ANR	37571	Symbol	* stmt -> d . s_prifilt		37336						
ANR	37572	Symbol	LOG_NFACILITIES		37336						
ANR	37573	Symbol	stmt -> printable		37336						
ANR	37574	Symbol	stmt -> d		37336						
ANR	37575	Symbol	* stmt		37336						
ANR	37576	Symbol	stmt -> d . s_prifilt . pmask		37336						
ANR	37577	Symbol	* stmt -> d		37336						
ANR	37578	Symbol	removeNOPs		37336						
ANR	37579	Symbol	NULL		37336						
ANR	37580	Symbol	last		37336						
ANR	37581	Symbol	i		37336						
ANR	37582	Symbol	* * stmt		37336						
ANR	37583	Symbol	* last		37336						
ANR	37584	Symbol	stmt -> d . s_prifilt . t_else		37336						
ANR	37585	Symbol	* i		37336						
ANR	37586	Symbol	stmt -> next		37336						
ANR	37587	Symbol	stmt		37336						
ANR	37588	Symbol	stmt -> d . s_prifilt		37336						
ANR	37589	Symbol	S_NOP		37336						
ANR	37590	Function	cnfstmtOptimizeReloadLookupTable	3994:0:105753:106030							
ANR	37591	FunctionDef	cnfstmtOptimizeReloadLookupTable (struct cnfstmt * stmt)		37590	0					
ANR	37592	CompoundStatement		3995:55:105820:106030	37590	0					
ANR	37593	IfStatement	if ( ( stmt -> d . s_reload_lookup_table . table = lookupFindTable ( stmt -> d . s_reload_lookup_table . table_name ) ) == NULL )		37590	0					
ANR	37594	Condition	( stmt -> d . s_reload_lookup_table . table = lookupFindTable ( stmt -> d . s_reload_lookup_table . table_name ) ) == NULL	3996:4:105826:105930	37590	0	True				
ANR	37595	EqualityExpression	( stmt -> d . s_reload_lookup_table . table = lookupFindTable ( stmt -> d . s_reload_lookup_table . table_name ) ) == NULL		37590	0		==			
ANR	37596	AssignmentExpression	stmt -> d . s_reload_lookup_table . table = lookupFindTable ( stmt -> d . s_reload_lookup_table . table_name )		37590	0		=			
ANR	37597	MemberAccess	stmt -> d . s_reload_lookup_table . table		37590	0					
ANR	37598	MemberAccess	stmt -> d . s_reload_lookup_table		37590	0					
ANR	37599	PtrMemberAccess	stmt -> d		37590	0					
ANR	37600	Identifier	stmt		37590	0					
ANR	37601	Identifier	d		37590	1					
ANR	37602	Identifier	s_reload_lookup_table		37590	1					
ANR	37603	Identifier	table		37590	1					
ANR	37604	CallExpression	lookupFindTable ( stmt -> d . s_reload_lookup_table . table_name )		37590	1					
ANR	37605	Callee	lookupFindTable		37590	0					
ANR	37606	Identifier	lookupFindTable		37590	0					
ANR	37607	ArgumentList	stmt -> d . s_reload_lookup_table . table_name		37590	1					
ANR	37608	Argument	stmt -> d . s_reload_lookup_table . table_name		37590	0					
ANR	37609	MemberAccess	stmt -> d . s_reload_lookup_table . table_name		37590	0					
ANR	37610	MemberAccess	stmt -> d . s_reload_lookup_table		37590	0					
ANR	37611	PtrMemberAccess	stmt -> d		37590	0					
ANR	37612	Identifier	stmt		37590	0					
ANR	37613	Identifier	d		37590	1					
ANR	37614	Identifier	s_reload_lookup_table		37590	1					
ANR	37615	Identifier	table_name		37590	1					
ANR	37616	Identifier	NULL		37590	1					
ANR	37617	CompoundStatement		2:111:112:112	37590	1					
ANR	37618	ExpressionStatement	"parser_errmsg ( ""lookup table '%s' not found\\n"" , stmt -> d . s_reload_lookup_table . table_name )"	3997:2:105937:106025	37590	0	True				
ANR	37619	CallExpression	"parser_errmsg ( ""lookup table '%s' not found\\n"" , stmt -> d . s_reload_lookup_table . table_name )"		37590	0					
ANR	37620	Callee	parser_errmsg		37590	0					
ANR	37621	Identifier	parser_errmsg		37590	0					
ANR	37622	ArgumentList	"""lookup table '%s' not found\\n"""		37590	1					
ANR	37623	Argument	"""lookup table '%s' not found\\n"""		37590	0					
ANR	37624	PrimaryExpression	"""lookup table '%s' not found\\n"""		37590	0					
ANR	37625	Argument	stmt -> d . s_reload_lookup_table . table_name		37590	1					
ANR	37626	MemberAccess	stmt -> d . s_reload_lookup_table . table_name		37590	0					
ANR	37627	MemberAccess	stmt -> d . s_reload_lookup_table		37590	0					
ANR	37628	PtrMemberAccess	stmt -> d		37590	0					
ANR	37629	Identifier	stmt		37590	0					
ANR	37630	Identifier	d		37590	1					
ANR	37631	Identifier	s_reload_lookup_table		37590	1					
ANR	37632	Identifier	table_name		37590	1					
ANR	37633	ReturnType	static void		37590	1					
ANR	37634	Identifier	cnfstmtOptimizeReloadLookupTable		37590	2					
ANR	37635	ParameterList	struct cnfstmt * stmt		37590	3					
ANR	37636	Parameter	struct cnfstmt * stmt	3995:33:105798:105817	37590	0	True				
ANR	37637	ParameterType	struct cnfstmt *		37590	0					
ANR	37638	Identifier	stmt		37590	1					
ANR	37639	CFGEntryNode	ENTRY		37590		True				
ANR	37640	CFGExitNode	EXIT		37590		True				
ANR	37641	Symbol	stmt -> d . s_reload_lookup_table . table		37590						
ANR	37642	Symbol	NULL		37590						
ANR	37643	Symbol	stmt -> d . s_reload_lookup_table		37590						
ANR	37644	Symbol	lookupFindTable		37590						
ANR	37645	Symbol	* stmt		37590						
ANR	37646	Symbol	stmt -> d		37590						
ANR	37647	Symbol	stmt -> d . s_reload_lookup_table . table_name		37590						
ANR	37648	Symbol	stmt		37590						
ANR	37649	Function	cnfstmtOptimizeCall	4004:0:106169:106940							
ANR	37650	FunctionDef	cnfstmtOptimizeCall (struct cnfstmt * stmt)		37649	0					
ANR	37651	CompoundStatement		4006:0:106223:106940	37649	0					
ANR	37652	IdentifierDeclStatement	ruleset_t * pRuleset ;	4007:1:106226:106245	37649	0	True				
ANR	37653	IdentifierDecl	* pRuleset		37649	0					
ANR	37654	IdentifierDeclType	ruleset_t *		37649	0					
ANR	37655	Identifier	pRuleset		37649	1					
ANR	37656	IdentifierDeclStatement	rsRetVal localRet ;	4008:1:106248:106265	37649	1	True				
ANR	37657	IdentifierDecl	localRet		37649	0					
ANR	37658	IdentifierDeclType	rsRetVal		37649	0					
ANR	37659	Identifier	localRet		37649	1					
ANR	37660	IdentifierDeclStatement	uchar * rsName ;	4009:1:106268:106281	37649	2	True				
ANR	37661	IdentifierDecl	* rsName		37649	0					
ANR	37662	IdentifierDeclType	uchar *		37649	0					
ANR	37663	Identifier	rsName		37649	1					
ANR	37664	ExpressionStatement	"rsName = ( uchar * ) es_str2cstr ( stmt -> d . s_call . name , NULL )"	4011:1:106285:106341	37649	3	True				
ANR	37665	AssignmentExpression	"rsName = ( uchar * ) es_str2cstr ( stmt -> d . s_call . name , NULL )"		37649	0		=			
ANR	37666	Identifier	rsName		37649	0					
ANR	37667	CastExpression	"( uchar * ) es_str2cstr ( stmt -> d . s_call . name , NULL )"		37649	1					
ANR	37668	CastTarget	uchar *		37649	0					
ANR	37669	CallExpression	"es_str2cstr ( stmt -> d . s_call . name , NULL )"		37649	1					
ANR	37670	Callee	es_str2cstr		37649	0					
ANR	37671	Identifier	es_str2cstr		37649	0					
ANR	37672	ArgumentList	stmt -> d . s_call . name		37649	1					
ANR	37673	Argument	stmt -> d . s_call . name		37649	0					
ANR	37674	MemberAccess	stmt -> d . s_call . name		37649	0					
ANR	37675	MemberAccess	stmt -> d . s_call		37649	0					
ANR	37676	PtrMemberAccess	stmt -> d		37649	0					
ANR	37677	Identifier	stmt		37649	0					
ANR	37678	Identifier	d		37649	1					
ANR	37679	Identifier	s_call		37649	1					
ANR	37680	Identifier	name		37649	1					
ANR	37681	Argument	NULL		37649	1					
ANR	37682	Identifier	NULL		37649	0					
ANR	37683	ExpressionStatement	"localRet = rulesetGetRuleset ( loadConf , & pRuleset , rsName )"	4012:1:106344:106401	37649	4	True				
ANR	37684	AssignmentExpression	"localRet = rulesetGetRuleset ( loadConf , & pRuleset , rsName )"		37649	0		=			
ANR	37685	Identifier	localRet		37649	0					
ANR	37686	CallExpression	"rulesetGetRuleset ( loadConf , & pRuleset , rsName )"		37649	1					
ANR	37687	Callee	rulesetGetRuleset		37649	0					
ANR	37688	Identifier	rulesetGetRuleset		37649	0					
ANR	37689	ArgumentList	loadConf		37649	1					
ANR	37690	Argument	loadConf		37649	0					
ANR	37691	Identifier	loadConf		37649	0					
ANR	37692	Argument	& pRuleset		37649	1					
ANR	37693	UnaryOperationExpression	& pRuleset		37649	0					
ANR	37694	UnaryOperator	&		37649	0					
ANR	37695	Identifier	pRuleset		37649	1					
ANR	37696	Argument	rsName		37649	2					
ANR	37697	Identifier	rsName		37649	0					
ANR	37698	IfStatement	if ( localRet != RS_RET_OK )		37649	5					
ANR	37699	Condition	localRet != RS_RET_OK	4013:4:106407:106427	37649	0	True				
ANR	37700	EqualityExpression	localRet != RS_RET_OK		37649	0		!=			
ANR	37701	Identifier	localRet		37649	0					
ANR	37702	Identifier	RS_RET_OK		37649	1					
ANR	37703	CompoundStatement		8:27:206:206	37649	1					
ANR	37704	ExpressionStatement	"parser_errmsg ( ""ruleset '%s' cannot be found\\n"" , rsName )"	4015:2:106492:106547	37649	0	True				
ANR	37705	CallExpression	"parser_errmsg ( ""ruleset '%s' cannot be found\\n"" , rsName )"		37649	0					
ANR	37706	Callee	parser_errmsg		37649	0					
ANR	37707	Identifier	parser_errmsg		37649	0					
ANR	37708	ArgumentList	"""ruleset '%s' cannot be found\\n"""		37649	1					
ANR	37709	Argument	"""ruleset '%s' cannot be found\\n"""		37649	0					
ANR	37710	PrimaryExpression	"""ruleset '%s' cannot be found\\n"""		37649	0					
ANR	37711	Argument	rsName		37649	1					
ANR	37712	Identifier	rsName		37649	0					
ANR	37713	ExpressionStatement	es_deleteStr ( stmt -> d . s_call . name )	4016:2:106551:106584	37649	1	True				
ANR	37714	CallExpression	es_deleteStr ( stmt -> d . s_call . name )		37649	0					
ANR	37715	Callee	es_deleteStr		37649	0					
ANR	37716	Identifier	es_deleteStr		37649	0					
ANR	37717	ArgumentList	stmt -> d . s_call . name		37649	1					
ANR	37718	Argument	stmt -> d . s_call . name		37649	0					
ANR	37719	MemberAccess	stmt -> d . s_call . name		37649	0					
ANR	37720	MemberAccess	stmt -> d . s_call		37649	0					
ANR	37721	PtrMemberAccess	stmt -> d		37649	0					
ANR	37722	Identifier	stmt		37649	0					
ANR	37723	Identifier	d		37649	1					
ANR	37724	Identifier	s_call		37649	1					
ANR	37725	Identifier	name		37649	1					
ANR	37726	ExpressionStatement	stmt -> nodetype = S_NOP	4017:2:106588:106610	37649	2	True				
ANR	37727	AssignmentExpression	stmt -> nodetype = S_NOP		37649	0		=			
ANR	37728	PtrMemberAccess	stmt -> nodetype		37649	0					
ANR	37729	Identifier	stmt		37649	0					
ANR	37730	Identifier	nodetype		37649	1					
ANR	37731	Identifier	S_NOP		37649	1					
ANR	37732	GotoStatement	goto done ;	4018:2:106614:106623	37649	3	True				
ANR	37733	Identifier	done		37649	0					
ANR	37734	ExpressionStatement	"DBGPRINTF ( ""CALL obtained ruleset ptr %p for ruleset '%s' [hasQueue:%d]\\n"" , pRuleset , rsName , rulesetHasQueue ( pRuleset ) )"	4020:1:106629:106752	37649	6	True				
ANR	37735	CallExpression	"DBGPRINTF ( ""CALL obtained ruleset ptr %p for ruleset '%s' [hasQueue:%d]\\n"" , pRuleset , rsName , rulesetHasQueue ( pRuleset ) )"		37649	0					
ANR	37736	Callee	DBGPRINTF		37649	0					
ANR	37737	Identifier	DBGPRINTF		37649	0					
ANR	37738	ArgumentList	"""CALL obtained ruleset ptr %p for ruleset '%s' [hasQueue:%d]\\n"""		37649	1					
ANR	37739	Argument	"""CALL obtained ruleset ptr %p for ruleset '%s' [hasQueue:%d]\\n"""		37649	0					
ANR	37740	PrimaryExpression	"""CALL obtained ruleset ptr %p for ruleset '%s' [hasQueue:%d]\\n"""		37649	0					
ANR	37741	Argument	pRuleset		37649	1					
ANR	37742	Identifier	pRuleset		37649	0					
ANR	37743	Argument	rsName		37649	2					
ANR	37744	Identifier	rsName		37649	0					
ANR	37745	Argument	rulesetHasQueue ( pRuleset )		37649	3					
ANR	37746	CallExpression	rulesetHasQueue ( pRuleset )		37649	0					
ANR	37747	Callee	rulesetHasQueue		37649	0					
ANR	37748	Identifier	rulesetHasQueue		37649	0					
ANR	37749	ArgumentList	pRuleset		37649	1					
ANR	37750	Argument	pRuleset		37649	0					
ANR	37751	Identifier	pRuleset		37649	0					
ANR	37752	IfStatement	if ( rulesetHasQueue ( pRuleset ) )		37649	7					
ANR	37753	Condition	rulesetHasQueue ( pRuleset )	4022:4:106758:106782	37649	0	True				
ANR	37754	CallExpression	rulesetHasQueue ( pRuleset )		37649	0					
ANR	37755	Callee	rulesetHasQueue		37649	0					
ANR	37756	Identifier	rulesetHasQueue		37649	0					
ANR	37757	ArgumentList	pRuleset		37649	1					
ANR	37758	Argument	pRuleset		37649	0					
ANR	37759	Identifier	pRuleset		37649	0					
ANR	37760	CompoundStatement		17:31:561:561	37649	1					
ANR	37761	ExpressionStatement	stmt -> d . s_call . ruleset = pRuleset	4023:2:106789:106822	37649	0	True				
ANR	37762	AssignmentExpression	stmt -> d . s_call . ruleset = pRuleset		37649	0		=			
ANR	37763	MemberAccess	stmt -> d . s_call . ruleset		37649	0					
ANR	37764	MemberAccess	stmt -> d . s_call		37649	0					
ANR	37765	PtrMemberAccess	stmt -> d		37649	0					
ANR	37766	Identifier	stmt		37649	0					
ANR	37767	Identifier	d		37649	1					
ANR	37768	Identifier	s_call		37649	1					
ANR	37769	Identifier	ruleset		37649	1					
ANR	37770	Identifier	pRuleset		37649	1					
ANR	37771	ElseStatement	else		37649	0					
ANR	37772	CompoundStatement		19:8:608:608	37649	0					
ANR	37773	ExpressionStatement	stmt -> d . s_call . ruleset = NULL	4025:2:106836:106865	37649	0	True				
ANR	37774	AssignmentExpression	stmt -> d . s_call . ruleset = NULL		37649	0		=			
ANR	37775	MemberAccess	stmt -> d . s_call . ruleset		37649	0					
ANR	37776	MemberAccess	stmt -> d . s_call		37649	0					
ANR	37777	PtrMemberAccess	stmt -> d		37649	0					
ANR	37778	Identifier	stmt		37649	0					
ANR	37779	Identifier	d		37649	1					
ANR	37780	Identifier	s_call		37649	1					
ANR	37781	Identifier	ruleset		37649	1					
ANR	37782	Identifier	NULL		37649	1					
ANR	37783	ExpressionStatement	stmt -> d . s_call . stmt = pRuleset -> root	4026:2:106869:106905	37649	1	True				
ANR	37784	AssignmentExpression	stmt -> d . s_call . stmt = pRuleset -> root		37649	0		=			
ANR	37785	MemberAccess	stmt -> d . s_call . stmt		37649	0					
ANR	37786	MemberAccess	stmt -> d . s_call		37649	0					
ANR	37787	PtrMemberAccess	stmt -> d		37649	0					
ANR	37788	Identifier	stmt		37649	0					
ANR	37789	Identifier	d		37649	1					
ANR	37790	Identifier	s_call		37649	1					
ANR	37791	Identifier	stmt		37649	1					
ANR	37792	PtrMemberAccess	pRuleset -> root		37649	1					
ANR	37793	Identifier	pRuleset		37649	0					
ANR	37794	Identifier	root		37649	1					
ANR	37795	Label	done :	4028:0:106910:106914	37649	8	True				
ANR	37796	Identifier	done		37649	0					
ANR	37797	ExpressionStatement	free ( rsName )	4029:1:106917:106929	37649	9	True				
ANR	37798	CallExpression	free ( rsName )		37649	0					
ANR	37799	Callee	free		37649	0					
ANR	37800	Identifier	free		37649	0					
ANR	37801	ArgumentList	rsName		37649	1					
ANR	37802	Argument	rsName		37649	0					
ANR	37803	Identifier	rsName		37649	0					
ANR	37804	ReturnStatement	return ;	4030:1:106932:106938	37649	10	True				
ANR	37805	ReturnType	static void		37649	1					
ANR	37806	Identifier	cnfstmtOptimizeCall		37649	2					
ANR	37807	ParameterList	struct cnfstmt * stmt		37649	3					
ANR	37808	Parameter	struct cnfstmt * stmt	4005:20:106201:106220	37649	0	True				
ANR	37809	ParameterType	struct cnfstmt *		37649	0					
ANR	37810	Identifier	stmt		37649	1					
ANR	37811	CFGEntryNode	ENTRY		37649		True				
ANR	37812	CFGExitNode	EXIT		37649		True				
ANR	37813	Symbol	NULL		37649						
ANR	37814	Symbol	RS_RET_OK		37649						
ANR	37815	Symbol	stmt -> d . s_call		37649						
ANR	37816	Symbol	pRuleset -> root		37649						
ANR	37817	Symbol	* pRuleset		37649						
ANR	37818	Symbol	stmt -> d . s_call . ruleset		37649						
ANR	37819	Symbol	stmt -> nodetype		37649						
ANR	37820	Symbol	rsName		37649						
ANR	37821	Symbol	es_str2cstr		37649						
ANR	37822	Symbol	& pRuleset		37649						
ANR	37823	Symbol	loadConf		37649						
ANR	37824	Symbol	rulesetGetRuleset		37649						
ANR	37825	Symbol	* stmt		37649						
ANR	37826	Symbol	stmt -> d		37649						
ANR	37827	Symbol	pRuleset		37649						
ANR	37828	Symbol	localRet		37649						
ANR	37829	Symbol	stmt -> d . s_call . name		37649						
ANR	37830	Symbol	stmt -> d . s_call . stmt		37649						
ANR	37831	Symbol	stmt		37649						
ANR	37832	Symbol	S_NOP		37649						
ANR	37833	Symbol	rulesetHasQueue		37649						
ANR	37834	Function	cnfstmtOptimize	4033:0:106983:108162							
ANR	37835	FunctionDef	cnfstmtOptimize (struct cnfstmt * root)		37834	0					
ANR	37836	CompoundStatement		4035:0:107026:108162	37834	0					
ANR	37837	IdentifierDeclStatement	struct cnfstmt * stmt ;	4036:1:107029:107049	37834	0	True				
ANR	37838	IdentifierDecl	* stmt		37834	0					
ANR	37839	IdentifierDeclType	struct cnfstmt *		37834	0					
ANR	37840	Identifier	stmt		37834	1					
ANR	37841	IfStatement	if ( root == NULL )		37834	1					
ANR	37842	Condition	root == NULL	4037:4:107055:107066	37834	0	True				
ANR	37843	EqualityExpression	root == NULL		37834	0		==			
ANR	37844	Identifier	root		37834	0					
ANR	37845	Identifier	NULL		37834	1					
ANR	37846	GotoStatement	goto done ;	4037:18:107069:107078	37834	1	True				
ANR	37847	Identifier	done		37834	0					
ANR	37848	ForStatement	for ( stmt = root ; stmt != NULL ; stmt = stmt -> next )		37834	2					
ANR	37849	ForInit	stmt = root ;	4038:5:107085:107097	37834	0	True				
ANR	37850	AssignmentExpression	stmt = root		37834	0		=			
ANR	37851	Identifier	stmt		37834	0					
ANR	37852	Identifier	root		37834	1					
ANR	37853	Condition	stmt != NULL	4038:19:107099:107110	37834	1	True				
ANR	37854	EqualityExpression	stmt != NULL		37834	0		!=			
ANR	37855	Identifier	stmt		37834	0					
ANR	37856	Identifier	NULL		37834	1					
ANR	37857	AssignmentExpression	stmt = stmt -> next	4038:34:107114:107130	37834	2	True	=			
ANR	37858	Identifier	stmt		37834	0					
ANR	37859	PtrMemberAccess	stmt -> next		37834	1					
ANR	37860	Identifier	stmt		37834	0					
ANR	37861	Identifier	next		37834	1					
ANR	37862	CompoundStatement		4:53:106:106	37834	3					
ANR	37863	SwitchStatement	switch ( stmt -> nodetype )		37834	0					
ANR	37864	Condition	stmt -> nodetype	4039:9:107144:107157	37834	0	True				
ANR	37865	PtrMemberAccess	stmt -> nodetype		37834	0					
ANR	37866	Identifier	stmt		37834	0					
ANR	37867	Identifier	nodetype		37834	1					
ANR	37868	CompoundStatement		5:25:133:133	37834	1					
ANR	37869	Label	case S_IF :	4040:2:107164:107173	37834	0	True				
ANR	37870	Identifier	S_IF		37834	0					
ANR	37871	ExpressionStatement	cnfstmtOptimizeIf ( stmt )	4041:3:107178:107201	37834	1	True				
ANR	37872	CallExpression	cnfstmtOptimizeIf ( stmt )		37834	0					
ANR	37873	Callee	cnfstmtOptimizeIf		37834	0					
ANR	37874	Identifier	cnfstmtOptimizeIf		37834	0					
ANR	37875	ArgumentList	stmt		37834	1					
ANR	37876	Argument	stmt		37834	0					
ANR	37877	Identifier	stmt		37834	0					
ANR	37878	BreakStatement	break ;	4042:3:107206:107211	37834	2	True				
ANR	37879	Label	case S_FOREACH :	4043:2:107215:107229	37834	3	True				
ANR	37880	Identifier	S_FOREACH		37834	0					
ANR	37881	ExpressionStatement	cnfstmtOptimizeForeach ( stmt )	4044:3:107234:107262	37834	4	True				
ANR	37882	CallExpression	cnfstmtOptimizeForeach ( stmt )		37834	0					
ANR	37883	Callee	cnfstmtOptimizeForeach		37834	0					
ANR	37884	Identifier	cnfstmtOptimizeForeach		37834	0					
ANR	37885	ArgumentList	stmt		37834	1					
ANR	37886	Argument	stmt		37834	0					
ANR	37887	Identifier	stmt		37834	0					
ANR	37888	BreakStatement	break ;	4045:3:107267:107272	37834	5	True				
ANR	37889	Label	case S_PRIFILT :	4046:2:107276:107290	37834	6	True				
ANR	37890	Identifier	S_PRIFILT		37834	0					
ANR	37891	ExpressionStatement	cnfstmtOptimizePRIFilt ( stmt )	4047:3:107295:107323	37834	7	True				
ANR	37892	CallExpression	cnfstmtOptimizePRIFilt ( stmt )		37834	0					
ANR	37893	Callee	cnfstmtOptimizePRIFilt		37834	0					
ANR	37894	Identifier	cnfstmtOptimizePRIFilt		37834	0					
ANR	37895	ArgumentList	stmt		37834	1					
ANR	37896	Argument	stmt		37834	0					
ANR	37897	Identifier	stmt		37834	0					
ANR	37898	BreakStatement	break ;	4048:3:107328:107333	37834	8	True				
ANR	37899	Label	case S_PROPFILT :	4049:2:107337:107352	37834	9	True				
ANR	37900	Identifier	S_PROPFILT		37834	0					
ANR	37901	ExpressionStatement	stmt -> d . s_propfilt . t_then = removeNOPs ( stmt -> d . s_propfilt . t_then )	4050:3:107357:107422	37834	10	True				
ANR	37902	AssignmentExpression	stmt -> d . s_propfilt . t_then = removeNOPs ( stmt -> d . s_propfilt . t_then )		37834	0		=			
ANR	37903	MemberAccess	stmt -> d . s_propfilt . t_then		37834	0					
ANR	37904	MemberAccess	stmt -> d . s_propfilt		37834	0					
ANR	37905	PtrMemberAccess	stmt -> d		37834	0					
ANR	37906	Identifier	stmt		37834	0					
ANR	37907	Identifier	d		37834	1					
ANR	37908	Identifier	s_propfilt		37834	1					
ANR	37909	Identifier	t_then		37834	1					
ANR	37910	CallExpression	removeNOPs ( stmt -> d . s_propfilt . t_then )		37834	1					
ANR	37911	Callee	removeNOPs		37834	0					
ANR	37912	Identifier	removeNOPs		37834	0					
ANR	37913	ArgumentList	stmt -> d . s_propfilt . t_then		37834	1					
ANR	37914	Argument	stmt -> d . s_propfilt . t_then		37834	0					
ANR	37915	MemberAccess	stmt -> d . s_propfilt . t_then		37834	0					
ANR	37916	MemberAccess	stmt -> d . s_propfilt		37834	0					
ANR	37917	PtrMemberAccess	stmt -> d		37834	0					
ANR	37918	Identifier	stmt		37834	0					
ANR	37919	Identifier	d		37834	1					
ANR	37920	Identifier	s_propfilt		37834	1					
ANR	37921	Identifier	t_then		37834	1					
ANR	37922	ExpressionStatement	cnfstmtOptimize ( stmt -> d . s_propfilt . t_then )	4051:3:107427:107469	37834	11	True				
ANR	37923	CallExpression	cnfstmtOptimize ( stmt -> d . s_propfilt . t_then )		37834	0					
ANR	37924	Callee	cnfstmtOptimize		37834	0					
ANR	37925	Identifier	cnfstmtOptimize		37834	0					
ANR	37926	ArgumentList	stmt -> d . s_propfilt . t_then		37834	1					
ANR	37927	Argument	stmt -> d . s_propfilt . t_then		37834	0					
ANR	37928	MemberAccess	stmt -> d . s_propfilt . t_then		37834	0					
ANR	37929	MemberAccess	stmt -> d . s_propfilt		37834	0					
ANR	37930	PtrMemberAccess	stmt -> d		37834	0					
ANR	37931	Identifier	stmt		37834	0					
ANR	37932	Identifier	d		37834	1					
ANR	37933	Identifier	s_propfilt		37834	1					
ANR	37934	Identifier	t_then		37834	1					
ANR	37935	BreakStatement	break ;	4052:3:107474:107479	37834	12	True				
ANR	37936	Label	case S_SET :	4053:2:107483:107493	37834	13	True				
ANR	37937	Identifier	S_SET		37834	0					
ANR	37938	ExpressionStatement	stmt -> d . s_set . expr = cnfexprOptimize ( stmt -> d . s_set . expr )	4054:3:107498:107554	37834	14	True				
ANR	37939	AssignmentExpression	stmt -> d . s_set . expr = cnfexprOptimize ( stmt -> d . s_set . expr )		37834	0		=			
ANR	37940	MemberAccess	stmt -> d . s_set . expr		37834	0					
ANR	37941	MemberAccess	stmt -> d . s_set		37834	0					
ANR	37942	PtrMemberAccess	stmt -> d		37834	0					
ANR	37943	Identifier	stmt		37834	0					
ANR	37944	Identifier	d		37834	1					
ANR	37945	Identifier	s_set		37834	1					
ANR	37946	Identifier	expr		37834	1					
ANR	37947	CallExpression	cnfexprOptimize ( stmt -> d . s_set . expr )		37834	1					
ANR	37948	Callee	cnfexprOptimize		37834	0					
ANR	37949	Identifier	cnfexprOptimize		37834	0					
ANR	37950	ArgumentList	stmt -> d . s_set . expr		37834	1					
ANR	37951	Argument	stmt -> d . s_set . expr		37834	0					
ANR	37952	MemberAccess	stmt -> d . s_set . expr		37834	0					
ANR	37953	MemberAccess	stmt -> d . s_set		37834	0					
ANR	37954	PtrMemberAccess	stmt -> d		37834	0					
ANR	37955	Identifier	stmt		37834	0					
ANR	37956	Identifier	d		37834	1					
ANR	37957	Identifier	s_set		37834	1					
ANR	37958	Identifier	expr		37834	1					
ANR	37959	BreakStatement	break ;	4055:3:107559:107564	37834	15	True				
ANR	37960	Label	case S_ACT :	4056:2:107568:107578	37834	16	True				
ANR	37961	Identifier	S_ACT		37834	0					
ANR	37962	ExpressionStatement	cnfstmtOptimizeAct ( stmt )	4057:3:107583:107607	37834	17	True				
ANR	37963	CallExpression	cnfstmtOptimizeAct ( stmt )		37834	0					
ANR	37964	Callee	cnfstmtOptimizeAct		37834	0					
ANR	37965	Identifier	cnfstmtOptimizeAct		37834	0					
ANR	37966	ArgumentList	stmt		37834	1					
ANR	37967	Argument	stmt		37834	0					
ANR	37968	Identifier	stmt		37834	0					
ANR	37969	BreakStatement	break ;	4058:3:107612:107617	37834	18	True				
ANR	37970	Label	case S_CALL :	4059:2:107621:107632	37834	19	True				
ANR	37971	Identifier	S_CALL		37834	0					
ANR	37972	ExpressionStatement	cnfstmtOptimizeCall ( stmt )	4060:3:107637:107662	37834	20	True				
ANR	37973	CallExpression	cnfstmtOptimizeCall ( stmt )		37834	0					
ANR	37974	Callee	cnfstmtOptimizeCall		37834	0					
ANR	37975	Identifier	cnfstmtOptimizeCall		37834	0					
ANR	37976	ArgumentList	stmt		37834	1					
ANR	37977	Argument	stmt		37834	0					
ANR	37978	Identifier	stmt		37834	0					
ANR	37979	BreakStatement	break ;	4061:3:107667:107672	37834	21	True				
ANR	37980	Label	case S_STOP :	4062:2:107676:107687	37834	22	True				
ANR	37981	Identifier	S_STOP		37834	0					
ANR	37982	IfStatement	if ( stmt -> next != NULL )		37834	23					
ANR	37983	Condition	stmt -> next != NULL	4063:6:107695:107712	37834	0	True				
ANR	37984	EqualityExpression	stmt -> next != NULL		37834	0		!=			
ANR	37985	PtrMemberAccess	stmt -> next		37834	0					
ANR	37986	Identifier	stmt		37834	0					
ANR	37987	Identifier	next		37834	1					
ANR	37988	Identifier	NULL		37834	1					
ANR	37989	ExpressionStatement	"parser_errmsg ( ""STOP is followed by unreachable statements!\\n"" )"	4064:4:107719:107781	37834	1	True				
ANR	37990	CallExpression	"parser_errmsg ( ""STOP is followed by unreachable statements!\\n"" )"		37834	0					
ANR	37991	Callee	parser_errmsg		37834	0					
ANR	37992	Identifier	parser_errmsg		37834	0					
ANR	37993	ArgumentList	"""STOP is followed by unreachable statements!\\n"""		37834	1					
ANR	37994	Argument	"""STOP is followed by unreachable statements!\\n"""		37834	0					
ANR	37995	PrimaryExpression	"""STOP is followed by unreachable statements!\\n"""		37834	0					
ANR	37996	BreakStatement	break ;	4065:3:107786:107791	37834	24	True				
ANR	37997	Label	case S_UNSET :	4066:2:107795:107807	37834	25	True				
ANR	37998	Identifier	S_UNSET		37834	0					
ANR	37999	BreakStatement	break ;	4067:3:107832:107837	37834	26	True				
ANR	38000	Label	case S_RELOAD_LOOKUP_TABLE :	4068:8:107847:107873	37834	27	True				
ANR	38001	Identifier	S_RELOAD_LOOKUP_TABLE		37834	0					
ANR	38002	ExpressionStatement	cnfstmtOptimizeReloadLookupTable ( stmt )	4069:12:107887:107925	37834	28	True				
ANR	38003	CallExpression	cnfstmtOptimizeReloadLookupTable ( stmt )		37834	0					
ANR	38004	Callee	cnfstmtOptimizeReloadLookupTable		37834	0					
ANR	38005	Identifier	cnfstmtOptimizeReloadLookupTable		37834	0					
ANR	38006	ArgumentList	stmt		37834	1					
ANR	38007	Argument	stmt		37834	0					
ANR	38008	Identifier	stmt		37834	0					
ANR	38009	BreakStatement	break ;	4070:3:107930:107935	37834	29	True				
ANR	38010	Label	case S_NOP :	4071:2:107939:107949	37834	30	True				
ANR	38011	Identifier	S_NOP		37834	0					
ANR	38012	ExpressionStatement	"DBGPRINTF ( ""optimizer error: we see a NOP, how come?\\n"" )"	4072:3:107954:108009	37834	31	True				
ANR	38013	CallExpression	"DBGPRINTF ( ""optimizer error: we see a NOP, how come?\\n"" )"		37834	0					
ANR	38014	Callee	DBGPRINTF		37834	0					
ANR	38015	Identifier	DBGPRINTF		37834	0					
ANR	38016	ArgumentList	"""optimizer error: we see a NOP, how come?\\n"""		37834	1					
ANR	38017	Argument	"""optimizer error: we see a NOP, how come?\\n"""		37834	0					
ANR	38018	PrimaryExpression	"""optimizer error: we see a NOP, how come?\\n"""		37834	0					
ANR	38019	BreakStatement	break ;	4073:3:108014:108019	37834	32	True				
ANR	38020	Label	default :	4074:2:108023:108030	37834	33	True				
ANR	38021	Identifier	default		37834	0					
ANR	38022	ExpressionStatement	"DBGPRINTF ( ""error: unknown stmt type %u during optimizer run\\n"" , ( unsigned ) stmt -> nodetype )"	4075:3:108035:108129	37834	34	True				
ANR	38023	CallExpression	"DBGPRINTF ( ""error: unknown stmt type %u during optimizer run\\n"" , ( unsigned ) stmt -> nodetype )"		37834	0					
ANR	38024	Callee	DBGPRINTF		37834	0					
ANR	38025	Identifier	DBGPRINTF		37834	0					
ANR	38026	ArgumentList	"""error: unknown stmt type %u during optimizer run\\n"""		37834	1					
ANR	38027	Argument	"""error: unknown stmt type %u during optimizer run\\n"""		37834	0					
ANR	38028	PrimaryExpression	"""error: unknown stmt type %u during optimizer run\\n"""		37834	0					
ANR	38029	Argument	( unsigned ) stmt -> nodetype		37834	1					
ANR	38030	CastExpression	( unsigned ) stmt -> nodetype		37834	0					
ANR	38031	CastTarget	unsigned		37834	0					
ANR	38032	PtrMemberAccess	stmt -> nodetype		37834	1					
ANR	38033	Identifier	stmt		37834	0					
ANR	38034	Identifier	nodetype		37834	1					
ANR	38035	BreakStatement	break ;	4077:3:108134:108139	37834	35	True				
ANR	38036	Label	done :	4080:0:108148:108152	37834	3	True				
ANR	38037	Identifier	done		37834	0					
ANR	38038	ReturnStatement	return ;	4080:6:108154:108160	37834	4	True				
ANR	38039	ReturnType	void		37834	1					
ANR	38040	Identifier	cnfstmtOptimize		37834	2					
ANR	38041	ParameterList	struct cnfstmt * root		37834	3					
ANR	38042	Parameter	struct cnfstmt * root	4034:16:107004:107023	37834	0	True				
ANR	38043	ParameterType	struct cnfstmt *		37834	0					
ANR	38044	Identifier	root		37834	1					
ANR	38045	CFGEntryNode	ENTRY		37834		True				
ANR	38046	CFGExitNode	EXIT		37834		True				
ANR	38047	Symbol	NULL		37834						
ANR	38048	Symbol	stmt -> d . s_set		37834						
ANR	38049	Symbol	stmt -> nodetype		37834						
ANR	38050	Symbol	cnfexprOptimize		37834						
ANR	38051	Symbol	stmt -> d . s_set . expr		37834						
ANR	38052	Symbol	stmt -> d . s_propfilt . t_then		37834						
ANR	38053	Symbol	stmt -> d . s_propfilt		37834						
ANR	38054	Symbol	root		37834						
ANR	38055	Symbol	* stmt		37834						
ANR	38056	Symbol	stmt -> d		37834						
ANR	38057	Symbol	stmt -> next		37834						
ANR	38058	Symbol	stmt		37834						
ANR	38059	Symbol	removeNOPs		37834						
ANR	38060	Function	cnffparamlstNew	4084:0:108166:108420							
ANR	38061	FunctionDef	"cnffparamlstNew (struct cnfexpr * expr , struct cnffparamlst * next)"		38060	0					
ANR	38062	CompoundStatement		4086:0:108253:108420	38060	0					
ANR	38063	IdentifierDeclStatement	struct cnffparamlst * lst ;	4087:1:108256:108280	38060	0	True				
ANR	38064	IdentifierDecl	* lst		38060	0					
ANR	38065	IdentifierDeclType	struct cnffparamlst *		38060	0					
ANR	38066	Identifier	lst		38060	1					
ANR	38067	IfStatement	if ( ( lst = malloc ( sizeof ( struct cnffparamlst ) ) ) != NULL )		38060	1					
ANR	38068	Condition	( lst = malloc ( sizeof ( struct cnffparamlst ) ) ) != NULL	4088:4:108286:108336	38060	0	True				
ANR	38069	EqualityExpression	( lst = malloc ( sizeof ( struct cnffparamlst ) ) ) != NULL		38060	0		!=			
ANR	38070	AssignmentExpression	lst = malloc ( sizeof ( struct cnffparamlst ) )		38060	0		=			
ANR	38071	Identifier	lst		38060	0					
ANR	38072	CallExpression	malloc ( sizeof ( struct cnffparamlst ) )		38060	1					
ANR	38073	Callee	malloc		38060	0					
ANR	38074	Identifier	malloc		38060	0					
ANR	38075	ArgumentList	sizeof ( struct cnffparamlst )		38060	1					
ANR	38076	Argument	sizeof ( struct cnffparamlst )		38060	0					
ANR	38077	SizeofExpression	sizeof ( struct cnffparamlst )		38060	0					
ANR	38078	Sizeof	sizeof		38060	0					
ANR	38079	SizeofOperand	struct cnffparamlst		38060	1					
ANR	38080	Identifier	NULL		38060	1					
ANR	38081	CompoundStatement		3:57:85:85	38060	1					
ANR	38082	ExpressionStatement	lst -> nodetype = 'P'	4089:2:108343:108362	38060	0	True				
ANR	38083	AssignmentExpression	lst -> nodetype = 'P'		38060	0		=			
ANR	38084	PtrMemberAccess	lst -> nodetype		38060	0					
ANR	38085	Identifier	lst		38060	0					
ANR	38086	Identifier	nodetype		38060	1					
ANR	38087	PrimaryExpression	'P'		38060	1					
ANR	38088	ExpressionStatement	lst -> expr = expr	4090:2:108366:108382	38060	1	True				
ANR	38089	AssignmentExpression	lst -> expr = expr		38060	0		=			
ANR	38090	PtrMemberAccess	lst -> expr		38060	0					
ANR	38091	Identifier	lst		38060	0					
ANR	38092	Identifier	expr		38060	1					
ANR	38093	Identifier	expr		38060	1					
ANR	38094	ExpressionStatement	lst -> next = next	4091:2:108386:108402	38060	2	True				
ANR	38095	AssignmentExpression	lst -> next = next		38060	0		=			
ANR	38096	PtrMemberAccess	lst -> next		38060	0					
ANR	38097	Identifier	lst		38060	0					
ANR	38098	Identifier	next		38060	1					
ANR	38099	Identifier	next		38060	1					
ANR	38100	ReturnStatement	return lst ;	4093:1:108408:108418	38060	2	True				
ANR	38101	Identifier	lst		38060	0					
ANR	38102	ReturnType	struct cnffparamlst *		38060	1					
ANR	38103	Identifier	cnffparamlstNew		38060	2					
ANR	38104	ParameterList	"struct cnfexpr * expr , struct cnffparamlst * next"		38060	3					
ANR	38105	Parameter	struct cnfexpr * expr	4085:16:108204:108223	38060	0	True				
ANR	38106	ParameterType	struct cnfexpr *		38060	0					
ANR	38107	Identifier	expr		38060	1					
ANR	38108	Parameter	struct cnffparamlst * next	4085:38:108226:108250	38060	1	True				
ANR	38109	ParameterType	struct cnffparamlst *		38060	0					
ANR	38110	Identifier	next		38060	1					
ANR	38111	CFGEntryNode	ENTRY		38060		True				
ANR	38112	CFGExitNode	EXIT		38060		True				
ANR	38113	Symbol	next		38060						
ANR	38114	Symbol	malloc		38060						
ANR	38115	Symbol	NULL		38060						
ANR	38116	Symbol	lst -> next		38060						
ANR	38117	Symbol	* lst		38060						
ANR	38118	Symbol	lst -> nodetype		38060						
ANR	38119	Symbol	lst -> expr		38060						
ANR	38120	Symbol	expr		38060						
ANR	38121	Symbol	lst		38060						
ANR	38122	Function	funcName2ID	4126:0:109417:111263							
ANR	38123	FunctionDef	"funcName2ID (es_str_t * fname , unsigned short nParams)"		38122	0					
ANR	38124	CompoundStatement		4128:0:109492:111263	38122	0					
ANR	38125	IfStatement	"if ( FUNC_NAME ( ""strlen"" ) )"		38122	0					
ANR	38126	Condition	"FUNC_NAME ( ""strlen"" )"	4129:4:109498:109516	38122	0	True				
ANR	38127	CallExpression	"FUNC_NAME ( ""strlen"" )"		38122	0					
ANR	38128	Callee	FUNC_NAME		38122	0					
ANR	38129	Identifier	FUNC_NAME		38122	0					
ANR	38130	ArgumentList	"""strlen"""		38122	1					
ANR	38131	Argument	"""strlen"""		38122	0					
ANR	38132	PrimaryExpression	"""strlen"""		38122	0					
ANR	38133	CompoundStatement		2:25:26:26	38122	1					
ANR	38134	ExpressionStatement	"GENERATE_FUNC ( ""strlen"" , 1 , CNFFUNC_STRLEN )"	4130:2:109523:109565	38122	0	True				
ANR	38135	CallExpression	"GENERATE_FUNC ( ""strlen"" , 1 , CNFFUNC_STRLEN )"		38122	0					
ANR	38136	Callee	GENERATE_FUNC		38122	0					
ANR	38137	Identifier	GENERATE_FUNC		38122	0					
ANR	38138	ArgumentList	"""strlen"""		38122	1					
ANR	38139	Argument	"""strlen"""		38122	0					
ANR	38140	PrimaryExpression	"""strlen"""		38122	0					
ANR	38141	Argument	1		38122	1					
ANR	38142	PrimaryExpression	1		38122	0					
ANR	38143	Argument	CNFFUNC_STRLEN		38122	2					
ANR	38144	Identifier	CNFFUNC_STRLEN		38122	0					
ANR	38145	ElseStatement	else		38122	0					
ANR	38146	IfStatement	"if ( FUNC_NAME ( ""getenv"" ) )"		38122	0					
ANR	38147	Condition	"FUNC_NAME ( ""getenv"" )"	4131:11:109578:109596	38122	0	True				
ANR	38148	CallExpression	"FUNC_NAME ( ""getenv"" )"		38122	0					
ANR	38149	Callee	FUNC_NAME		38122	0					
ANR	38150	Identifier	FUNC_NAME		38122	0					
ANR	38151	ArgumentList	"""getenv"""		38122	1					
ANR	38152	Argument	"""getenv"""		38122	0					
ANR	38153	PrimaryExpression	"""getenv"""		38122	0					
ANR	38154	CompoundStatement		4:32:106:106	38122	1					
ANR	38155	ExpressionStatement	"GENERATE_FUNC ( ""getenv"" , 1 , CNFFUNC_GETENV )"	4132:2:109603:109645	38122	0	True				
ANR	38156	CallExpression	"GENERATE_FUNC ( ""getenv"" , 1 , CNFFUNC_GETENV )"		38122	0					
ANR	38157	Callee	GENERATE_FUNC		38122	0					
ANR	38158	Identifier	GENERATE_FUNC		38122	0					
ANR	38159	ArgumentList	"""getenv"""		38122	1					
ANR	38160	Argument	"""getenv"""		38122	0					
ANR	38161	PrimaryExpression	"""getenv"""		38122	0					
ANR	38162	Argument	1		38122	1					
ANR	38163	PrimaryExpression	1		38122	0					
ANR	38164	Argument	CNFFUNC_GETENV		38122	2					
ANR	38165	Identifier	CNFFUNC_GETENV		38122	0					
ANR	38166	ElseStatement	else		38122	0					
ANR	38167	IfStatement	"if ( FUNC_NAME ( ""num2ipv4"" ) )"		38122	0					
ANR	38168	Condition	"FUNC_NAME ( ""num2ipv4"" )"	4133:11:109658:109678	38122	0	True				
ANR	38169	CallExpression	"FUNC_NAME ( ""num2ipv4"" )"		38122	0					
ANR	38170	Callee	FUNC_NAME		38122	0					
ANR	38171	Identifier	FUNC_NAME		38122	0					
ANR	38172	ArgumentList	"""num2ipv4"""		38122	1					
ANR	38173	Argument	"""num2ipv4"""		38122	0					
ANR	38174	PrimaryExpression	"""num2ipv4"""		38122	0					
ANR	38175	CompoundStatement		6:34:188:188	38122	1					
ANR	38176	ExpressionStatement	"GENERATE_FUNC ( ""num2ipv4"" , 1 , CNFFUNC_NUM2IPV4 )"	4134:2:109685:109731	38122	0	True				
ANR	38177	CallExpression	"GENERATE_FUNC ( ""num2ipv4"" , 1 , CNFFUNC_NUM2IPV4 )"		38122	0					
ANR	38178	Callee	GENERATE_FUNC		38122	0					
ANR	38179	Identifier	GENERATE_FUNC		38122	0					
ANR	38180	ArgumentList	"""num2ipv4"""		38122	1					
ANR	38181	Argument	"""num2ipv4"""		38122	0					
ANR	38182	PrimaryExpression	"""num2ipv4"""		38122	0					
ANR	38183	Argument	1		38122	1					
ANR	38184	PrimaryExpression	1		38122	0					
ANR	38185	Argument	CNFFUNC_NUM2IPV4		38122	2					
ANR	38186	Identifier	CNFFUNC_NUM2IPV4		38122	0					
ANR	38187	ElseStatement	else		38122	0					
ANR	38188	IfStatement	"if ( FUNC_NAME ( ""tolower"" ) )"		38122	0					
ANR	38189	Condition	"FUNC_NAME ( ""tolower"" )"	4135:11:109744:109763	38122	0	True				
ANR	38190	CallExpression	"FUNC_NAME ( ""tolower"" )"		38122	0					
ANR	38191	Callee	FUNC_NAME		38122	0					
ANR	38192	Identifier	FUNC_NAME		38122	0					
ANR	38193	ArgumentList	"""tolower"""		38122	1					
ANR	38194	Argument	"""tolower"""		38122	0					
ANR	38195	PrimaryExpression	"""tolower"""		38122	0					
ANR	38196	CompoundStatement		8:33:273:273	38122	1					
ANR	38197	ExpressionStatement	"GENERATE_FUNC ( ""tolower"" , 1 , CNFFUNC_TOLOWER )"	4136:2:109770:109814	38122	0	True				
ANR	38198	CallExpression	"GENERATE_FUNC ( ""tolower"" , 1 , CNFFUNC_TOLOWER )"		38122	0					
ANR	38199	Callee	GENERATE_FUNC		38122	0					
ANR	38200	Identifier	GENERATE_FUNC		38122	0					
ANR	38201	ArgumentList	"""tolower"""		38122	1					
ANR	38202	Argument	"""tolower"""		38122	0					
ANR	38203	PrimaryExpression	"""tolower"""		38122	0					
ANR	38204	Argument	1		38122	1					
ANR	38205	PrimaryExpression	1		38122	0					
ANR	38206	Argument	CNFFUNC_TOLOWER		38122	2					
ANR	38207	Identifier	CNFFUNC_TOLOWER		38122	0					
ANR	38208	ElseStatement	else		38122	0					
ANR	38209	IfStatement	"if ( FUNC_NAME ( ""cstr"" ) )"		38122	0					
ANR	38210	Condition	"FUNC_NAME ( ""cstr"" )"	4137:11:109827:109843	38122	0	True				
ANR	38211	CallExpression	"FUNC_NAME ( ""cstr"" )"		38122	0					
ANR	38212	Callee	FUNC_NAME		38122	0					
ANR	38213	Identifier	FUNC_NAME		38122	0					
ANR	38214	ArgumentList	"""cstr"""		38122	1					
ANR	38215	Argument	"""cstr"""		38122	0					
ANR	38216	PrimaryExpression	"""cstr"""		38122	0					
ANR	38217	CompoundStatement		10:30:353:353	38122	1					
ANR	38218	ExpressionStatement	"GENERATE_FUNC ( ""cstr"" , 1 , CNFFUNC_CSTR )"	4138:2:109850:109888	38122	0	True				
ANR	38219	CallExpression	"GENERATE_FUNC ( ""cstr"" , 1 , CNFFUNC_CSTR )"		38122	0					
ANR	38220	Callee	GENERATE_FUNC		38122	0					
ANR	38221	Identifier	GENERATE_FUNC		38122	0					
ANR	38222	ArgumentList	"""cstr"""		38122	1					
ANR	38223	Argument	"""cstr"""		38122	0					
ANR	38224	PrimaryExpression	"""cstr"""		38122	0					
ANR	38225	Argument	1		38122	1					
ANR	38226	PrimaryExpression	1		38122	0					
ANR	38227	Argument	CNFFUNC_CSTR		38122	2					
ANR	38228	Identifier	CNFFUNC_CSTR		38122	0					
ANR	38229	ElseStatement	else		38122	0					
ANR	38230	IfStatement	"if ( FUNC_NAME ( ""cnum"" ) )"		38122	0					
ANR	38231	Condition	"FUNC_NAME ( ""cnum"" )"	4139:11:109901:109917	38122	0	True				
ANR	38232	CallExpression	"FUNC_NAME ( ""cnum"" )"		38122	0					
ANR	38233	Callee	FUNC_NAME		38122	0					
ANR	38234	Identifier	FUNC_NAME		38122	0					
ANR	38235	ArgumentList	"""cnum"""		38122	1					
ANR	38236	Argument	"""cnum"""		38122	0					
ANR	38237	PrimaryExpression	"""cnum"""		38122	0					
ANR	38238	CompoundStatement		12:30:427:427	38122	1					
ANR	38239	ExpressionStatement	"GENERATE_FUNC ( ""cnum"" , 1 , CNFFUNC_CNUM )"	4140:2:109924:109962	38122	0	True				
ANR	38240	CallExpression	"GENERATE_FUNC ( ""cnum"" , 1 , CNFFUNC_CNUM )"		38122	0					
ANR	38241	Callee	GENERATE_FUNC		38122	0					
ANR	38242	Identifier	GENERATE_FUNC		38122	0					
ANR	38243	ArgumentList	"""cnum"""		38122	1					
ANR	38244	Argument	"""cnum"""		38122	0					
ANR	38245	PrimaryExpression	"""cnum"""		38122	0					
ANR	38246	Argument	1		38122	1					
ANR	38247	PrimaryExpression	1		38122	0					
ANR	38248	Argument	CNFFUNC_CNUM		38122	2					
ANR	38249	Identifier	CNFFUNC_CNUM		38122	0					
ANR	38250	ElseStatement	else		38122	0					
ANR	38251	IfStatement	"if ( FUNC_NAME ( ""ip42num"" ) )"		38122	0					
ANR	38252	Condition	"FUNC_NAME ( ""ip42num"" )"	4141:11:109975:109994	38122	0	True				
ANR	38253	CallExpression	"FUNC_NAME ( ""ip42num"" )"		38122	0					
ANR	38254	Callee	FUNC_NAME		38122	0					
ANR	38255	Identifier	FUNC_NAME		38122	0					
ANR	38256	ArgumentList	"""ip42num"""		38122	1					
ANR	38257	Argument	"""ip42num"""		38122	0					
ANR	38258	PrimaryExpression	"""ip42num"""		38122	0					
ANR	38259	CompoundStatement		14:33:504:504	38122	1					
ANR	38260	ExpressionStatement	"GENERATE_FUNC ( ""ip42num"" , 1 , CNFFUNC_IPV42NUM )"	4142:2:110001:110046	38122	0	True				
ANR	38261	CallExpression	"GENERATE_FUNC ( ""ip42num"" , 1 , CNFFUNC_IPV42NUM )"		38122	0					
ANR	38262	Callee	GENERATE_FUNC		38122	0					
ANR	38263	Identifier	GENERATE_FUNC		38122	0					
ANR	38264	ArgumentList	"""ip42num"""		38122	1					
ANR	38265	Argument	"""ip42num"""		38122	0					
ANR	38266	PrimaryExpression	"""ip42num"""		38122	0					
ANR	38267	Argument	1		38122	1					
ANR	38268	PrimaryExpression	1		38122	0					
ANR	38269	Argument	CNFFUNC_IPV42NUM		38122	2					
ANR	38270	Identifier	CNFFUNC_IPV42NUM		38122	0					
ANR	38271	ElseStatement	else		38122	0					
ANR	38272	IfStatement	"if ( FUNC_NAME ( ""re_match"" ) )"		38122	0					
ANR	38273	Condition	"FUNC_NAME ( ""re_match"" )"	4143:11:110059:110079	38122	0	True				
ANR	38274	CallExpression	"FUNC_NAME ( ""re_match"" )"		38122	0					
ANR	38275	Callee	FUNC_NAME		38122	0					
ANR	38276	Identifier	FUNC_NAME		38122	0					
ANR	38277	ArgumentList	"""re_match"""		38122	1					
ANR	38278	Argument	"""re_match"""		38122	0					
ANR	38279	PrimaryExpression	"""re_match"""		38122	0					
ANR	38280	CompoundStatement		16:34:589:589	38122	1					
ANR	38281	ExpressionStatement	"GENERATE_FUNC ( ""re_match"" , 2 , CNFFUNC_RE_MATCH )"	4144:2:110086:110132	38122	0	True				
ANR	38282	CallExpression	"GENERATE_FUNC ( ""re_match"" , 2 , CNFFUNC_RE_MATCH )"		38122	0					
ANR	38283	Callee	GENERATE_FUNC		38122	0					
ANR	38284	Identifier	GENERATE_FUNC		38122	0					
ANR	38285	ArgumentList	"""re_match"""		38122	1					
ANR	38286	Argument	"""re_match"""		38122	0					
ANR	38287	PrimaryExpression	"""re_match"""		38122	0					
ANR	38288	Argument	2		38122	1					
ANR	38289	PrimaryExpression	2		38122	0					
ANR	38290	Argument	CNFFUNC_RE_MATCH		38122	2					
ANR	38291	Identifier	CNFFUNC_RE_MATCH		38122	0					
ANR	38292	ElseStatement	else		38122	0					
ANR	38293	IfStatement	"if ( FUNC_NAME ( ""re_extract"" ) )"		38122	0					
ANR	38294	Condition	"FUNC_NAME ( ""re_extract"" )"	4145:11:110145:110167	38122	0	True				
ANR	38295	CallExpression	"FUNC_NAME ( ""re_extract"" )"		38122	0					
ANR	38296	Callee	FUNC_NAME		38122	0					
ANR	38297	Identifier	FUNC_NAME		38122	0					
ANR	38298	ArgumentList	"""re_extract"""		38122	1					
ANR	38299	Argument	"""re_extract"""		38122	0					
ANR	38300	PrimaryExpression	"""re_extract"""		38122	0					
ANR	38301	CompoundStatement		18:36:677:677	38122	1					
ANR	38302	ExpressionStatement	"GENERATE_FUNC ( ""re_extract"" , 5 , CNFFUNC_RE_EXTRACT )"	4146:2:110174:110224	38122	0	True				
ANR	38303	CallExpression	"GENERATE_FUNC ( ""re_extract"" , 5 , CNFFUNC_RE_EXTRACT )"		38122	0					
ANR	38304	Callee	GENERATE_FUNC		38122	0					
ANR	38305	Identifier	GENERATE_FUNC		38122	0					
ANR	38306	ArgumentList	"""re_extract"""		38122	1					
ANR	38307	Argument	"""re_extract"""		38122	0					
ANR	38308	PrimaryExpression	"""re_extract"""		38122	0					
ANR	38309	Argument	5		38122	1					
ANR	38310	PrimaryExpression	5		38122	0					
ANR	38311	Argument	CNFFUNC_RE_EXTRACT		38122	2					
ANR	38312	Identifier	CNFFUNC_RE_EXTRACT		38122	0					
ANR	38313	ElseStatement	else		38122	0					
ANR	38314	IfStatement	"if ( FUNC_NAME ( ""field"" ) )"		38122	0					
ANR	38315	Condition	"FUNC_NAME ( ""field"" )"	4147:11:110237:110254	38122	0	True				
ANR	38316	CallExpression	"FUNC_NAME ( ""field"" )"		38122	0					
ANR	38317	Callee	FUNC_NAME		38122	0					
ANR	38318	Identifier	FUNC_NAME		38122	0					
ANR	38319	ArgumentList	"""field"""		38122	1					
ANR	38320	Argument	"""field"""		38122	0					
ANR	38321	PrimaryExpression	"""field"""		38122	0					
ANR	38322	CompoundStatement		20:31:764:764	38122	1					
ANR	38323	ExpressionStatement	"GENERATE_FUNC ( ""field"" , 3 , CNFFUNC_FIELD )"	4148:2:110261:110301	38122	0	True				
ANR	38324	CallExpression	"GENERATE_FUNC ( ""field"" , 3 , CNFFUNC_FIELD )"		38122	0					
ANR	38325	Callee	GENERATE_FUNC		38122	0					
ANR	38326	Identifier	GENERATE_FUNC		38122	0					
ANR	38327	ArgumentList	"""field"""		38122	1					
ANR	38328	Argument	"""field"""		38122	0					
ANR	38329	PrimaryExpression	"""field"""		38122	0					
ANR	38330	Argument	3		38122	1					
ANR	38331	PrimaryExpression	3		38122	0					
ANR	38332	Argument	CNFFUNC_FIELD		38122	2					
ANR	38333	Identifier	CNFFUNC_FIELD		38122	0					
ANR	38334	ElseStatement	else		38122	0					
ANR	38335	IfStatement	"if ( FUNC_NAME ( ""exec_template"" ) )"		38122	0					
ANR	38336	Condition	"FUNC_NAME ( ""exec_template"" )"	4149:11:110314:110339	38122	0	True				
ANR	38337	CallExpression	"FUNC_NAME ( ""exec_template"" )"		38122	0					
ANR	38338	Callee	FUNC_NAME		38122	0					
ANR	38339	Identifier	FUNC_NAME		38122	0					
ANR	38340	ArgumentList	"""exec_template"""		38122	1					
ANR	38341	Argument	"""exec_template"""		38122	0					
ANR	38342	PrimaryExpression	"""exec_template"""		38122	0					
ANR	38343	CompoundStatement		22:39:849:849	38122	1					
ANR	38344	ExpressionStatement	"GENERATE_FUNC ( ""exec_template"" , 1 , CNFFUNC_EXEC_TEMPLATE )"	4150:2:110346:110402	38122	0	True				
ANR	38345	CallExpression	"GENERATE_FUNC ( ""exec_template"" , 1 , CNFFUNC_EXEC_TEMPLATE )"		38122	0					
ANR	38346	Callee	GENERATE_FUNC		38122	0					
ANR	38347	Identifier	GENERATE_FUNC		38122	0					
ANR	38348	ArgumentList	"""exec_template"""		38122	1					
ANR	38349	Argument	"""exec_template"""		38122	0					
ANR	38350	PrimaryExpression	"""exec_template"""		38122	0					
ANR	38351	Argument	1		38122	1					
ANR	38352	PrimaryExpression	1		38122	0					
ANR	38353	Argument	CNFFUNC_EXEC_TEMPLATE		38122	2					
ANR	38354	Identifier	CNFFUNC_EXEC_TEMPLATE		38122	0					
ANR	38355	ElseStatement	else		38122	0					
ANR	38356	IfStatement	"if ( FUNC_NAME ( ""prifilt"" ) )"		38122	0					
ANR	38357	Condition	"FUNC_NAME ( ""prifilt"" )"	4151:11:110415:110434	38122	0	True				
ANR	38358	CallExpression	"FUNC_NAME ( ""prifilt"" )"		38122	0					
ANR	38359	Callee	FUNC_NAME		38122	0					
ANR	38360	Identifier	FUNC_NAME		38122	0					
ANR	38361	ArgumentList	"""prifilt"""		38122	1					
ANR	38362	Argument	"""prifilt"""		38122	0					
ANR	38363	PrimaryExpression	"""prifilt"""		38122	0					
ANR	38364	CompoundStatement		24:33:944:944	38122	1					
ANR	38365	ExpressionStatement	"GENERATE_FUNC ( ""prifilt"" , 1 , CNFFUNC_PRIFILT )"	4152:2:110441:110485	38122	0	True				
ANR	38366	CallExpression	"GENERATE_FUNC ( ""prifilt"" , 1 , CNFFUNC_PRIFILT )"		38122	0					
ANR	38367	Callee	GENERATE_FUNC		38122	0					
ANR	38368	Identifier	GENERATE_FUNC		38122	0					
ANR	38369	ArgumentList	"""prifilt"""		38122	1					
ANR	38370	Argument	"""prifilt"""		38122	0					
ANR	38371	PrimaryExpression	"""prifilt"""		38122	0					
ANR	38372	Argument	1		38122	1					
ANR	38373	PrimaryExpression	1		38122	0					
ANR	38374	Argument	CNFFUNC_PRIFILT		38122	2					
ANR	38375	Identifier	CNFFUNC_PRIFILT		38122	0					
ANR	38376	ElseStatement	else		38122	0					
ANR	38377	IfStatement	"if ( FUNC_NAME ( ""lookup"" ) )"		38122	0					
ANR	38378	Condition	"FUNC_NAME ( ""lookup"" )"	4153:11:110498:110516	38122	0	True				
ANR	38379	CallExpression	"FUNC_NAME ( ""lookup"" )"		38122	0					
ANR	38380	Callee	FUNC_NAME		38122	0					
ANR	38381	Identifier	FUNC_NAME		38122	0					
ANR	38382	ArgumentList	"""lookup"""		38122	1					
ANR	38383	Argument	"""lookup"""		38122	0					
ANR	38384	PrimaryExpression	"""lookup"""		38122	0					
ANR	38385	CompoundStatement		26:32:1026:1026	38122	1					
ANR	38386	ExpressionStatement	"GENERATE_FUNC ( ""lookup"" , 2 , CNFFUNC_LOOKUP )"	4154:2:110523:110565	38122	0	True				
ANR	38387	CallExpression	"GENERATE_FUNC ( ""lookup"" , 2 , CNFFUNC_LOOKUP )"		38122	0					
ANR	38388	Callee	GENERATE_FUNC		38122	0					
ANR	38389	Identifier	GENERATE_FUNC		38122	0					
ANR	38390	ArgumentList	"""lookup"""		38122	1					
ANR	38391	Argument	"""lookup"""		38122	0					
ANR	38392	PrimaryExpression	"""lookup"""		38122	0					
ANR	38393	Argument	2		38122	1					
ANR	38394	PrimaryExpression	2		38122	0					
ANR	38395	Argument	CNFFUNC_LOOKUP		38122	2					
ANR	38396	Identifier	CNFFUNC_LOOKUP		38122	0					
ANR	38397	ElseStatement	else		38122	0					
ANR	38398	IfStatement	"if ( FUNC_NAME ( ""dyn_inc"" ) )"		38122	0					
ANR	38399	Condition	"FUNC_NAME ( ""dyn_inc"" )"	4155:11:110578:110597	38122	0	True				
ANR	38400	CallExpression	"FUNC_NAME ( ""dyn_inc"" )"		38122	0					
ANR	38401	Callee	FUNC_NAME		38122	0					
ANR	38402	Identifier	FUNC_NAME		38122	0					
ANR	38403	ArgumentList	"""dyn_inc"""		38122	1					
ANR	38404	Argument	"""dyn_inc"""		38122	0					
ANR	38405	PrimaryExpression	"""dyn_inc"""		38122	0					
ANR	38406	CompoundStatement		28:33:1107:1107	38122	1					
ANR	38407	ExpressionStatement	"GENERATE_FUNC ( ""dyn_inc"" , 2 , CNFFUNC_DYN_INC )"	4156:2:110604:110648	38122	0	True				
ANR	38408	CallExpression	"GENERATE_FUNC ( ""dyn_inc"" , 2 , CNFFUNC_DYN_INC )"		38122	0					
ANR	38409	Callee	GENERATE_FUNC		38122	0					
ANR	38410	Identifier	GENERATE_FUNC		38122	0					
ANR	38411	ArgumentList	"""dyn_inc"""		38122	1					
ANR	38412	Argument	"""dyn_inc"""		38122	0					
ANR	38413	PrimaryExpression	"""dyn_inc"""		38122	0					
ANR	38414	Argument	2		38122	1					
ANR	38415	PrimaryExpression	2		38122	0					
ANR	38416	Argument	CNFFUNC_DYN_INC		38122	2					
ANR	38417	Identifier	CNFFUNC_DYN_INC		38122	0					
ANR	38418	ElseStatement	else		38122	0					
ANR	38419	IfStatement	"if ( FUNC_NAME ( ""replace"" ) )"		38122	0					
ANR	38420	Condition	"FUNC_NAME ( ""replace"" )"	4157:11:110661:110680	38122	0	True				
ANR	38421	CallExpression	"FUNC_NAME ( ""replace"" )"		38122	0					
ANR	38422	Callee	FUNC_NAME		38122	0					
ANR	38423	Identifier	FUNC_NAME		38122	0					
ANR	38424	ArgumentList	"""replace"""		38122	1					
ANR	38425	Argument	"""replace"""		38122	0					
ANR	38426	PrimaryExpression	"""replace"""		38122	0					
ANR	38427	CompoundStatement		30:33:1190:1190	38122	1					
ANR	38428	Statement	GENERATE_FUNC_WITH_ERR_MSG	4158:2:110687:110712	38122	0	True				
ANR	38429	Statement	(	4158:28:110713:110713	38122	1	True				
ANR	38430	Statement	"""replace"""	4159:3:110718:110726	38122	2	True				
ANR	38431	Statement	","	4159:12:110727:110727	38122	3	True				
ANR	38432	Statement	3	4159:14:110729:110729	38122	4	True				
ANR	38433	Statement	","	4159:15:110730:110730	38122	5	True				
ANR	38434	Statement	CNFFUNC_REPLACE	4159:17:110732:110746	38122	6	True				
ANR	38435	Statement	","	4159:32:110747:110747	38122	7	True				
ANR	38436	Statement	"""number of parameters for %s() must be %s """	4160:3:110752:110794	38122	8	True				
ANR	38437	Statement	"""(operand_string, fragment_to_find, fragment_to_replace_in_its_place)"""	4161:3:110799:110868	38122	9	True				
ANR	38438	Statement	"""but is %d."""	4162:3:110873:110884	38122	10	True				
ANR	38439	Statement	)	4162:15:110885:110885	38122	11	True				
ANR	38440	ExpressionStatement		4162:16:110886:110886	38122	12	True				
ANR	38441	ElseStatement	else		38122	0					
ANR	38442	IfStatement	"if ( FUNC_NAME ( ""wrap"" ) )"		38122	0					
ANR	38443	Condition	"FUNC_NAME ( ""wrap"" )"	4163:11:110899:110915	38122	0	True				
ANR	38444	CallExpression	"FUNC_NAME ( ""wrap"" )"		38122	0					
ANR	38445	Callee	FUNC_NAME		38122	0					
ANR	38446	Identifier	FUNC_NAME		38122	0					
ANR	38447	ArgumentList	"""wrap"""		38122	1					
ANR	38448	Argument	"""wrap"""		38122	0					
ANR	38449	PrimaryExpression	"""wrap"""		38122	0					
ANR	38450	CompoundStatement		36:30:1425:1425	38122	1					
ANR	38451	Statement	GENERATE_FUNC_WITH_NARG_RANGE	4164:2:110922:110950	38122	0	True				
ANR	38452	Statement	(	4164:31:110951:110951	38122	1	True				
ANR	38453	Statement	"""wrap"""	4164:32:110952:110957	38122	2	True				
ANR	38454	Statement	","	4164:38:110958:110958	38122	3	True				
ANR	38455	Statement	2	4164:40:110960:110960	38122	4	True				
ANR	38456	Statement	","	4164:41:110961:110961	38122	5	True				
ANR	38457	Statement	3	4164:43:110963:110963	38122	6	True				
ANR	38458	Statement	","	4164:44:110964:110964	38122	7	True				
ANR	38459	Statement	CNFFUNC_WRAP	4164:46:110966:110977	38122	8	True				
ANR	38460	Statement	","	4164:58:110978:110978	38122	9	True				
ANR	38461	Statement	"""number of parameters for %s() must either be """	4165:3:110983:111029	38122	10	True				
ANR	38462	Statement	"""two (operand_string, wrapper) or"""	4166:3:111034:111067	38122	11	True				
ANR	38463	Statement	"""three (operand_string, wrapper, wrapper_escape_str)"""	4167:3:111072:111124	38122	12	True				
ANR	38464	Statement	"""but is %d."""	4168:3:111129:111140	38122	13	True				
ANR	38465	Statement	)	4168:15:111141:111141	38122	14	True				
ANR	38466	ExpressionStatement		4168:16:111142:111142	38122	15	True				
ANR	38467	ElseStatement	else		38122	0					
ANR	38468	IfStatement	"if ( FUNC_NAME ( ""random"" ) )"		38122	0					
ANR	38469	Condition	"FUNC_NAME ( ""random"" )"	4169:11:111155:111173	38122	0	True				
ANR	38470	CallExpression	"FUNC_NAME ( ""random"" )"		38122	0					
ANR	38471	Callee	FUNC_NAME		38122	0					
ANR	38472	Identifier	FUNC_NAME		38122	0					
ANR	38473	ArgumentList	"""random"""		38122	1					
ANR	38474	Argument	"""random"""		38122	0					
ANR	38475	PrimaryExpression	"""random"""		38122	0					
ANR	38476	CompoundStatement		42:32:1683:1683	38122	1					
ANR	38477	ExpressionStatement	"GENERATE_FUNC ( ""random"" , 1 , CNFFUNC_RANDOM )"	4170:2:111180:111222	38122	0	True				
ANR	38478	CallExpression	"GENERATE_FUNC ( ""random"" , 1 , CNFFUNC_RANDOM )"		38122	0					
ANR	38479	Callee	GENERATE_FUNC		38122	0					
ANR	38480	Identifier	GENERATE_FUNC		38122	0					
ANR	38481	ArgumentList	"""random"""		38122	1					
ANR	38482	Argument	"""random"""		38122	0					
ANR	38483	PrimaryExpression	"""random"""		38122	0					
ANR	38484	Argument	1		38122	1					
ANR	38485	PrimaryExpression	1		38122	0					
ANR	38486	Argument	CNFFUNC_RANDOM		38122	2					
ANR	38487	Identifier	CNFFUNC_RANDOM		38122	0					
ANR	38488	ElseStatement	else		38122	0					
ANR	38489	CompoundStatement		44:8:1739:1739	38122	0					
ANR	38490	ReturnStatement	return CNFFUNC_INVALID ;	4172:2:111236:111258	38122	0	True				
ANR	38491	Identifier	CNFFUNC_INVALID		38122	0					
ANR	38492	ReturnType	static enum cnffuncid		38122	1					
ANR	38493	Identifier	funcName2ID		38122	2					
ANR	38494	ParameterList	"es_str_t * fname , unsigned short nParams"		38122	3					
ANR	38495	Parameter	es_str_t * fname	4127:12:109451:109465	38122	0	True				
ANR	38496	ParameterType	es_str_t *		38122	0					
ANR	38497	Identifier	fname		38122	1					
ANR	38498	Parameter	unsigned short nParams	4127:29:109468:109489	38122	1	True				
ANR	38499	ParameterType	unsigned short		38122	0					
ANR	38500	Identifier	nParams		38122	1					
ANR	38501	CFGEntryNode	ENTRY		38122		True				
ANR	38502	CFGExitNode	EXIT		38122		True				
ANR	38503	Symbol	fname		38122						
ANR	38504	Symbol	CNFFUNC_EXEC_TEMPLATE		38122						
ANR	38505	Symbol	CNFFUNC_PRIFILT		38122						
ANR	38506	Symbol	CNFFUNC_LOOKUP		38122						
ANR	38507	Symbol	nParams		38122						
ANR	38508	Symbol	CNFFUNC_FIELD		38122						
ANR	38509	Symbol	CNFFUNC_NUM2IPV4		38122						
ANR	38510	Symbol	CNFFUNC_RE_EXTRACT		38122						
ANR	38511	Symbol	FUNC_NAME		38122						
ANR	38512	Symbol	CNFFUNC_CNUM		38122						
ANR	38513	Symbol	CNFFUNC_STRLEN		38122						
ANR	38514	Symbol	CNFFUNC_RE_MATCH		38122						
ANR	38515	Symbol	CNFFUNC_DYN_INC		38122						
ANR	38516	Symbol	CNFFUNC_RANDOM		38122						
ANR	38517	Symbol	CNFFUNC_TOLOWER		38122						
ANR	38518	Symbol	CNFFUNC_INVALID		38122						
ANR	38519	Symbol	CNFFUNC_GETENV		38122						
ANR	38520	Symbol	CNFFUNC_CSTR		38122						
ANR	38521	Symbol	CNFFUNC_IPV42NUM		38122						
ANR	38522	Function	initFunc_re_match	4177:0:111267:112218							
ANR	38523	FunctionDef	initFunc_re_match (struct cnffunc * func)		38522	0					
ANR	38524	CompoundStatement		4179:0:111323:112218	38522	0					
ANR	38525	IdentifierDeclStatement	rsRetVal localRet ;	4180:1:111326:111343	38522	0	True				
ANR	38526	IdentifierDecl	localRet		38522	0					
ANR	38527	IdentifierDeclType	rsRetVal		38522	0					
ANR	38528	Identifier	localRet		38522	1					
ANR	38529	IdentifierDeclStatement	char * regex = NULL ;	4181:1:111346:111364	38522	1	True				
ANR	38530	IdentifierDecl	* regex = NULL		38522	0					
ANR	38531	IdentifierDeclType	char *		38522	0					
ANR	38532	Identifier	regex		38522	1					
ANR	38533	AssignmentExpression	* regex = NULL		38522	2		=			
ANR	38534	Identifier	NULL		38522	0					
ANR	38535	Identifier	NULL		38522	1					
ANR	38536	IdentifierDeclStatement	regex_t * re ;	4182:1:111367:111378	38522	2	True				
ANR	38537	IdentifierDecl	* re		38522	0					
ANR	38538	IdentifierDeclType	regex_t *		38522	0					
ANR	38539	Identifier	re		38522	1					
ANR	38540	ExpressionStatement	DEFiRet	4183:1:111381:111388	38522	3	True				
ANR	38541	Identifier	DEFiRet		38522	0					
ANR	38542	IfStatement	if ( func -> nParams < 2 )		38522	4					
ANR	38543	Condition	func -> nParams < 2	4185:4:111395:111411	38522	0	True				
ANR	38544	RelationalExpression	func -> nParams < 2		38522	0		<			
ANR	38545	PtrMemberAccess	func -> nParams		38522	0					
ANR	38546	Identifier	func		38522	0					
ANR	38547	Identifier	nParams		38522	1					
ANR	38548	PrimaryExpression	2		38522	1					
ANR	38549	CompoundStatement		7:23:90:90	38522	1					
ANR	38550	ExpressionStatement	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"	4186:2:111418:111501	38522	0	True				
ANR	38551	CallExpression	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"		38522	0					
ANR	38552	Callee	parser_errmsg		38522	0					
ANR	38553	Identifier	parser_errmsg		38522	0					
ANR	38554	ArgumentList	"""rsyslog logic error in line %d of file %s\\n"""		38522	1					
ANR	38555	Argument	"""rsyslog logic error in line %d of file %s\\n"""		38522	0					
ANR	38556	PrimaryExpression	"""rsyslog logic error in line %d of file %s\\n"""		38522	0					
ANR	38557	Argument	__LINE__		38522	1					
ANR	38558	Identifier	__LINE__		38522	0					
ANR	38559	Argument	__FILE__		38522	2					
ANR	38560	Identifier	__FILE__		38522	0					
ANR	38561	ExpressionStatement	FINALIZE	4188:2:111505:111513	38522	1	True				
ANR	38562	Identifier	FINALIZE		38522	0					
ANR	38563	ExpressionStatement	func -> funcdata = NULL	4191:1:111520:111541	38522	5	True				
ANR	38564	AssignmentExpression	func -> funcdata = NULL		38522	0		=			
ANR	38565	PtrMemberAccess	func -> funcdata		38522	0					
ANR	38566	Identifier	func		38522	0					
ANR	38567	Identifier	funcdata		38522	1					
ANR	38568	Identifier	NULL		38522	1					
ANR	38569	IfStatement	if ( func -> expr [ 1 ] -> nodetype != 'S' )		38522	6					
ANR	38570	Condition	func -> expr [ 1 ] -> nodetype != 'S'	4192:4:111547:111576	38522	0	True				
ANR	38571	EqualityExpression	func -> expr [ 1 ] -> nodetype != 'S'		38522	0		!=			
ANR	38572	PtrMemberAccess	func -> expr [ 1 ] -> nodetype		38522	0					
ANR	38573	ArrayIndexing	func -> expr [ 1 ]		38522	0					
ANR	38574	PtrMemberAccess	func -> expr		38522	0					
ANR	38575	Identifier	func		38522	0					
ANR	38576	Identifier	expr		38522	1					
ANR	38577	PrimaryExpression	1		38522	1					
ANR	38578	Identifier	nodetype		38522	1					
ANR	38579	PrimaryExpression	'S'		38522	1					
ANR	38580	CompoundStatement		14:36:255:255	38522	1					
ANR	38581	ExpressionStatement	"parser_errmsg ( ""param 2 of re_match/extract() must be a constant string"" )"	4193:2:111583:111655	38522	0	True				
ANR	38582	CallExpression	"parser_errmsg ( ""param 2 of re_match/extract() must be a constant string"" )"		38522	0					
ANR	38583	Callee	parser_errmsg		38522	0					
ANR	38584	Identifier	parser_errmsg		38522	0					
ANR	38585	ArgumentList	"""param 2 of re_match/extract() must be a constant string"""		38522	1					
ANR	38586	Argument	"""param 2 of re_match/extract() must be a constant string"""		38522	0					
ANR	38587	PrimaryExpression	"""param 2 of re_match/extract() must be a constant string"""		38522	0					
ANR	38588	ExpressionStatement	FINALIZE	4194:2:111659:111667	38522	1	True				
ANR	38589	Identifier	FINALIZE		38522	0					
ANR	38590	ExpressionStatement	CHKmalloc ( re = malloc ( sizeof ( regex_t ) ) )	4197:1:111674:111713	38522	7	True				
ANR	38591	CallExpression	CHKmalloc ( re = malloc ( sizeof ( regex_t ) ) )		38522	0					
ANR	38592	Callee	CHKmalloc		38522	0					
ANR	38593	Identifier	CHKmalloc		38522	0					
ANR	38594	ArgumentList	re = malloc ( sizeof ( regex_t ) )		38522	1					
ANR	38595	Argument	re = malloc ( sizeof ( regex_t ) )		38522	0					
ANR	38596	AssignmentExpression	re = malloc ( sizeof ( regex_t ) )		38522	0		=			
ANR	38597	Identifier	re		38522	0					
ANR	38598	CallExpression	malloc ( sizeof ( regex_t ) )		38522	1					
ANR	38599	Callee	malloc		38522	0					
ANR	38600	Identifier	malloc		38522	0					
ANR	38601	ArgumentList	sizeof ( regex_t )		38522	1					
ANR	38602	Argument	sizeof ( regex_t )		38522	0					
ANR	38603	SizeofExpression	sizeof ( regex_t )		38522	0					
ANR	38604	Sizeof	sizeof		38522	0					
ANR	38605	SizeofOperand	regex_t		38522	1					
ANR	38606	ExpressionStatement	func -> funcdata = re	4198:1:111716:111735	38522	8	True				
ANR	38607	AssignmentExpression	func -> funcdata = re		38522	0		=			
ANR	38608	PtrMemberAccess	func -> funcdata		38522	0					
ANR	38609	Identifier	func		38522	0					
ANR	38610	Identifier	funcdata		38522	1					
ANR	38611	Identifier	re		38522	1					
ANR	38612	ExpressionStatement	"regex = es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 1 ] ) -> estr , NULL )"	4200:1:111739:111810	38522	9	True				
ANR	38613	AssignmentExpression	"regex = es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 1 ] ) -> estr , NULL )"		38522	0		=			
ANR	38614	Identifier	regex		38522	0					
ANR	38615	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 1 ] ) -> estr , NULL )"		38522	1					
ANR	38616	Callee	es_str2cstr		38522	0					
ANR	38617	Identifier	es_str2cstr		38522	0					
ANR	38618	ArgumentList	( ( struct cnfstringval * ) func -> expr [ 1 ] ) -> estr		38522	1					
ANR	38619	Argument	( ( struct cnfstringval * ) func -> expr [ 1 ] ) -> estr		38522	0					
ANR	38620	PtrMemberAccess	( ( struct cnfstringval * ) func -> expr [ 1 ] ) -> estr		38522	0					
ANR	38621	CastExpression	( struct cnfstringval * ) func -> expr [ 1 ]		38522	0					
ANR	38622	CastTarget	struct cnfstringval *		38522	0					
ANR	38623	ArrayIndexing	func -> expr [ 1 ]		38522	1					
ANR	38624	PtrMemberAccess	func -> expr		38522	0					
ANR	38625	Identifier	func		38522	0					
ANR	38626	Identifier	expr		38522	1					
ANR	38627	PrimaryExpression	1		38522	1					
ANR	38628	Identifier	estr		38522	1					
ANR	38629	Argument	NULL		38522	1					
ANR	38630	Identifier	NULL		38522	0					
ANR	38631	IfStatement	"if ( ( localRet = objUse ( regexp , LM_REGEXP_FILENAME ) ) == RS_RET_OK )"		38522	10					
ANR	38632	Condition	"( localRet = objUse ( regexp , LM_REGEXP_FILENAME ) ) == RS_RET_OK"	4202:4:111818:111877	38522	0	True				
ANR	38633	EqualityExpression	"( localRet = objUse ( regexp , LM_REGEXP_FILENAME ) ) == RS_RET_OK"		38522	0		==			
ANR	38634	AssignmentExpression	"localRet = objUse ( regexp , LM_REGEXP_FILENAME )"		38522	0		=			
ANR	38635	Identifier	localRet		38522	0					
ANR	38636	CallExpression	"objUse ( regexp , LM_REGEXP_FILENAME )"		38522	1					
ANR	38637	Callee	objUse		38522	0					
ANR	38638	Identifier	objUse		38522	0					
ANR	38639	ArgumentList	regexp		38522	1					
ANR	38640	Argument	regexp		38522	0					
ANR	38641	Identifier	regexp		38522	0					
ANR	38642	Argument	LM_REGEXP_FILENAME		38522	1					
ANR	38643	Identifier	LM_REGEXP_FILENAME		38522	0					
ANR	38644	Identifier	RS_RET_OK		38522	1					
ANR	38645	CompoundStatement		24:66:556:556	38522	1					
ANR	38646	IfStatement	"if ( regexp . regcomp ( re , ( char * ) regex , REG_EXTENDED ) != 0 )"		38522	0					
ANR	38647	Condition	"regexp . regcomp ( re , ( char * ) regex , REG_EXTENDED ) != 0"	4203:5:111887:111938	38522	0	True				
ANR	38648	EqualityExpression	"regexp . regcomp ( re , ( char * ) regex , REG_EXTENDED ) != 0"		38522	0		!=			
ANR	38649	CallExpression	"regexp . regcomp ( re , ( char * ) regex , REG_EXTENDED )"		38522	0					
ANR	38650	Callee	regexp . regcomp		38522	0					
ANR	38651	MemberAccess	regexp . regcomp		38522	0					
ANR	38652	Identifier	regexp		38522	0					
ANR	38653	Identifier	regcomp		38522	1					
ANR	38654	ArgumentList	re		38522	1					
ANR	38655	Argument	re		38522	0					
ANR	38656	Identifier	re		38522	0					
ANR	38657	Argument	( char * ) regex		38522	1					
ANR	38658	CastExpression	( char * ) regex		38522	0					
ANR	38659	CastTarget	char *		38522	0					
ANR	38660	Identifier	regex		38522	1					
ANR	38661	Argument	REG_EXTENDED		38522	2					
ANR	38662	Identifier	REG_EXTENDED		38522	0					
ANR	38663	PrimaryExpression	0		38522	1					
ANR	38664	CompoundStatement		25:59:617:617	38522	1					
ANR	38665	ExpressionStatement	"parser_errmsg ( ""cannot compile regex '%s'"" , regex )"	4204:3:111946:111995	38522	0	True				
ANR	38666	CallExpression	"parser_errmsg ( ""cannot compile regex '%s'"" , regex )"		38522	0					
ANR	38667	Callee	parser_errmsg		38522	0					
ANR	38668	Identifier	parser_errmsg		38522	0					
ANR	38669	ArgumentList	"""cannot compile regex '%s'"""		38522	1					
ANR	38670	Argument	"""cannot compile regex '%s'"""		38522	0					
ANR	38671	PrimaryExpression	"""cannot compile regex '%s'"""		38522	0					
ANR	38672	Argument	regex		38522	1					
ANR	38673	Identifier	regex		38522	0					
ANR	38674	ExpressionStatement	ABORT_FINALIZE ( RS_RET_ERR )	4205:3:112000:112026	38522	1	True				
ANR	38675	CallExpression	ABORT_FINALIZE ( RS_RET_ERR )		38522	0					
ANR	38676	Callee	ABORT_FINALIZE		38522	0					
ANR	38677	Identifier	ABORT_FINALIZE		38522	0					
ANR	38678	ArgumentList	RS_RET_ERR		38522	1					
ANR	38679	Argument	RS_RET_ERR		38522	0					
ANR	38680	Identifier	RS_RET_ERR		38522	0					
ANR	38681	ElseStatement	else		38522	0					
ANR	38682	CompoundStatement		29:8:716:716	38522	0					
ANR	38683	ExpressionStatement	"parser_errmsg ( ""could not load regex support - regex ignored"" )"	4208:2:112084:112145	38522	0	True				
ANR	38684	CallExpression	"parser_errmsg ( ""could not load regex support - regex ignored"" )"		38522	0					
ANR	38685	Callee	parser_errmsg		38522	0					
ANR	38686	Identifier	parser_errmsg		38522	0					
ANR	38687	ArgumentList	"""could not load regex support - regex ignored"""		38522	1					
ANR	38688	Argument	"""could not load regex support - regex ignored"""		38522	0					
ANR	38689	PrimaryExpression	"""could not load regex support - regex ignored"""		38522	0					
ANR	38690	ExpressionStatement	ABORT_FINALIZE ( RS_RET_ERR )	4209:2:112149:112175	38522	1	True				
ANR	38691	CallExpression	ABORT_FINALIZE ( RS_RET_ERR )		38522	0					
ANR	38692	Callee	ABORT_FINALIZE		38522	0					
ANR	38693	Identifier	ABORT_FINALIZE		38522	0					
ANR	38694	ArgumentList	RS_RET_ERR		38522	1					
ANR	38695	Argument	RS_RET_ERR		38522	0					
ANR	38696	Identifier	RS_RET_ERR		38522	0					
ANR	38697	Label	finalize_it :	4212:0:112181:112192	38522	11	True				
ANR	38698	Identifier	finalize_it		38522	0					
ANR	38699	ExpressionStatement	free ( regex )	4213:1:112195:112206	38522	12	True				
ANR	38700	CallExpression	free ( regex )		38522	0					
ANR	38701	Callee	free		38522	0					
ANR	38702	Identifier	free		38522	0					
ANR	38703	ArgumentList	regex		38522	1					
ANR	38704	Argument	regex		38522	0					
ANR	38705	Identifier	regex		38522	0					
ANR	38706	ExpressionStatement	RETiRet	4214:1:112209:112216	38522	13	True				
ANR	38707	Identifier	RETiRet		38522	0					
ANR	38708	ReturnType	static rsRetVal		38522	1					
ANR	38709	Identifier	initFunc_re_match		38522	2					
ANR	38710	ParameterList	struct cnffunc * func		38522	3					
ANR	38711	Parameter	struct cnffunc * func	4178:18:111301:111320	38522	0	True				
ANR	38712	ParameterType	struct cnffunc *		38522	0					
ANR	38713	Identifier	func		38522	1					
ANR	38714	CFGEntryNode	ENTRY		38522		True				
ANR	38715	CFGExitNode	EXIT		38522		True				
ANR	38716	Symbol	regexp		38522						
ANR	38717	Symbol	( ( struct cnfstringval * ) func -> expr [ 1 ] ) -> estr		38522						
ANR	38718	Symbol	func -> funcdata		38522						
ANR	38719	Symbol	RS_RET_ERR		38522						
ANR	38720	Symbol	REG_EXTENDED		38522						
ANR	38721	Symbol	es_str2cstr		38522						
ANR	38722	Symbol	objUse		38522						
ANR	38723	Symbol	* * * func		38522						
ANR	38724	Symbol	func -> expr		38522						
ANR	38725	Symbol	* * func -> expr		38522						
ANR	38726	Symbol	func -> expr [ 1 ] -> nodetype		38522						
ANR	38727	Symbol	LM_REGEXP_FILENAME		38522						
ANR	38728	Symbol	malloc		38522						
ANR	38729	Symbol	NULL		38522						
ANR	38730	Symbol	* func		38522						
ANR	38731	Symbol	RS_RET_OK		38522						
ANR	38732	Symbol	__FILE__		38522						
ANR	38733	Symbol	* * func		38522						
ANR	38734	Symbol	* func -> expr		38522						
ANR	38735	Symbol	__LINE__		38522						
ANR	38736	Symbol	regex		38522						
ANR	38737	Symbol	re		38522						
ANR	38738	Symbol	func		38522						
ANR	38739	Symbol	regexp . regcomp		38522						
ANR	38740	Symbol	localRet		38522						
ANR	38741	Symbol	func -> nParams		38522						
ANR	38742	Function	initFunc_exec_template	4218:0:112222:112911							
ANR	38743	FunctionDef	initFunc_exec_template (struct cnffunc * func)		38742	0					
ANR	38744	CompoundStatement		4220:0:112283:112911	38742	0					
ANR	38745	IdentifierDeclStatement	char * tplName = NULL ;	4221:1:112286:112306	38742	0	True				
ANR	38746	IdentifierDecl	* tplName = NULL		38742	0					
ANR	38747	IdentifierDeclType	char *		38742	0					
ANR	38748	Identifier	tplName		38742	1					
ANR	38749	AssignmentExpression	* tplName = NULL		38742	2		=			
ANR	38750	Identifier	NULL		38742	0					
ANR	38751	Identifier	NULL		38742	1					
ANR	38752	ExpressionStatement	DEFiRet	4222:1:112309:112316	38742	1	True				
ANR	38753	Identifier	DEFiRet		38742	0					
ANR	38754	ExpressionStatement	func -> destructable_funcdata = 0	4224:1:112320:112351	38742	2	True				
ANR	38755	AssignmentExpression	func -> destructable_funcdata = 0		38742	0		=			
ANR	38756	PtrMemberAccess	func -> destructable_funcdata		38742	0					
ANR	38757	Identifier	func		38742	0					
ANR	38758	Identifier	destructable_funcdata		38742	1					
ANR	38759	PrimaryExpression	0		38742	1					
ANR	38760	IfStatement	if ( func -> nParams != 1 )		38742	3					
ANR	38761	Condition	func -> nParams != 1	4226:4:112358:112375	38742	0	True				
ANR	38762	EqualityExpression	func -> nParams != 1		38742	0		!=			
ANR	38763	PtrMemberAccess	func -> nParams		38742	0					
ANR	38764	Identifier	func		38742	0					
ANR	38765	Identifier	nParams		38742	1					
ANR	38766	PrimaryExpression	1		38742	1					
ANR	38767	CompoundStatement		7:24:94:94	38742	1					
ANR	38768	ExpressionStatement	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"	4227:2:112382:112465	38742	0	True				
ANR	38769	CallExpression	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"		38742	0					
ANR	38770	Callee	parser_errmsg		38742	0					
ANR	38771	Identifier	parser_errmsg		38742	0					
ANR	38772	ArgumentList	"""rsyslog logic error in line %d of file %s\\n"""		38742	1					
ANR	38773	Argument	"""rsyslog logic error in line %d of file %s\\n"""		38742	0					
ANR	38774	PrimaryExpression	"""rsyslog logic error in line %d of file %s\\n"""		38742	0					
ANR	38775	Argument	__LINE__		38742	1					
ANR	38776	Identifier	__LINE__		38742	0					
ANR	38777	Argument	__FILE__		38742	2					
ANR	38778	Identifier	__FILE__		38742	0					
ANR	38779	ExpressionStatement	FINALIZE	4229:2:112469:112477	38742	1	True				
ANR	38780	Identifier	FINALIZE		38742	0					
ANR	38781	IfStatement	if ( func -> expr [ 0 ] -> nodetype != 'S' )		38742	4					
ANR	38782	Condition	func -> expr [ 0 ] -> nodetype != 'S'	4232:4:112487:112516	38742	0	True				
ANR	38783	EqualityExpression	func -> expr [ 0 ] -> nodetype != 'S'		38742	0		!=			
ANR	38784	PtrMemberAccess	func -> expr [ 0 ] -> nodetype		38742	0					
ANR	38785	ArrayIndexing	func -> expr [ 0 ]		38742	0					
ANR	38786	PtrMemberAccess	func -> expr		38742	0					
ANR	38787	Identifier	func		38742	0					
ANR	38788	Identifier	expr		38742	1					
ANR	38789	PrimaryExpression	0		38742	1					
ANR	38790	Identifier	nodetype		38742	1					
ANR	38791	PrimaryExpression	'S'		38742	1					
ANR	38792	CompoundStatement		13:36:235:235	38742	1					
ANR	38793	ExpressionStatement	"parser_errmsg ( ""exec_template(): param 1 must be a constant string"" )"	4233:2:112523:112590	38742	0	True				
ANR	38794	CallExpression	"parser_errmsg ( ""exec_template(): param 1 must be a constant string"" )"		38742	0					
ANR	38795	Callee	parser_errmsg		38742	0					
ANR	38796	Identifier	parser_errmsg		38742	0					
ANR	38797	ArgumentList	"""exec_template(): param 1 must be a constant string"""		38742	1					
ANR	38798	Argument	"""exec_template(): param 1 must be a constant string"""		38742	0					
ANR	38799	PrimaryExpression	"""exec_template(): param 1 must be a constant string"""		38742	0					
ANR	38800	ExpressionStatement	FINALIZE	4234:2:112594:112602	38742	1	True				
ANR	38801	Identifier	FINALIZE		38742	0					
ANR	38802	ExpressionStatement	"tplName = es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"	4237:1:112609:112682	38742	5	True				
ANR	38803	AssignmentExpression	"tplName = es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		38742	0		=			
ANR	38804	Identifier	tplName		38742	0					
ANR	38805	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		38742	1					
ANR	38806	Callee	es_str2cstr		38742	0					
ANR	38807	Identifier	es_str2cstr		38742	0					
ANR	38808	ArgumentList	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		38742	1					
ANR	38809	Argument	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		38742	0					
ANR	38810	PtrMemberAccess	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		38742	0					
ANR	38811	CastExpression	( struct cnfstringval * ) func -> expr [ 0 ]		38742	0					
ANR	38812	CastTarget	struct cnfstringval *		38742	0					
ANR	38813	ArrayIndexing	func -> expr [ 0 ]		38742	1					
ANR	38814	PtrMemberAccess	func -> expr		38742	0					
ANR	38815	Identifier	func		38742	0					
ANR	38816	Identifier	expr		38742	1					
ANR	38817	PrimaryExpression	0		38742	1					
ANR	38818	Identifier	estr		38742	1					
ANR	38819	Argument	NULL		38742	1					
ANR	38820	Identifier	NULL		38742	0					
ANR	38821	ExpressionStatement	"func -> funcdata = tplFind ( ourConf , tplName , strlen ( tplName ) )"	4238:1:112685:112744	38742	6	True				
ANR	38822	AssignmentExpression	"func -> funcdata = tplFind ( ourConf , tplName , strlen ( tplName ) )"		38742	0		=			
ANR	38823	PtrMemberAccess	func -> funcdata		38742	0					
ANR	38824	Identifier	func		38742	0					
ANR	38825	Identifier	funcdata		38742	1					
ANR	38826	CallExpression	"tplFind ( ourConf , tplName , strlen ( tplName ) )"		38742	1					
ANR	38827	Callee	tplFind		38742	0					
ANR	38828	Identifier	tplFind		38742	0					
ANR	38829	ArgumentList	ourConf		38742	1					
ANR	38830	Argument	ourConf		38742	0					
ANR	38831	Identifier	ourConf		38742	0					
ANR	38832	Argument	tplName		38742	1					
ANR	38833	Identifier	tplName		38742	0					
ANR	38834	Argument	strlen ( tplName )		38742	2					
ANR	38835	CallExpression	strlen ( tplName )		38742	0					
ANR	38836	Callee	strlen		38742	0					
ANR	38837	Identifier	strlen		38742	0					
ANR	38838	ArgumentList	tplName		38742	1					
ANR	38839	Argument	tplName		38742	0					
ANR	38840	Identifier	tplName		38742	0					
ANR	38841	IfStatement	if ( func -> funcdata == NULL )		38742	7					
ANR	38842	Condition	func -> funcdata == NULL	4239:4:112750:112771	38742	0	True				
ANR	38843	EqualityExpression	func -> funcdata == NULL		38742	0		==			
ANR	38844	PtrMemberAccess	func -> funcdata		38742	0					
ANR	38845	Identifier	func		38742	0					
ANR	38846	Identifier	funcdata		38742	1					
ANR	38847	Identifier	NULL		38742	1					
ANR	38848	CompoundStatement		20:28:490:490	38742	1					
ANR	38849	ExpressionStatement	"parser_errmsg ( ""exec_template(): template '%s' could not be found"" , tplName )"	4240:2:112778:112853	38742	0	True				
ANR	38850	CallExpression	"parser_errmsg ( ""exec_template(): template '%s' could not be found"" , tplName )"		38742	0					
ANR	38851	Callee	parser_errmsg		38742	0					
ANR	38852	Identifier	parser_errmsg		38742	0					
ANR	38853	ArgumentList	"""exec_template(): template '%s' could not be found"""		38742	1					
ANR	38854	Argument	"""exec_template(): template '%s' could not be found"""		38742	0					
ANR	38855	PrimaryExpression	"""exec_template(): template '%s' could not be found"""		38742	0					
ANR	38856	Argument	tplName		38742	1					
ANR	38857	Identifier	tplName		38742	0					
ANR	38858	ExpressionStatement	FINALIZE	4241:2:112857:112865	38742	1	True				
ANR	38859	Identifier	FINALIZE		38742	0					
ANR	38860	Label	finalize_it :	4245:0:112872:112883	38742	8	True				
ANR	38861	Identifier	finalize_it		38742	0					
ANR	38862	ExpressionStatement	free ( tplName )	4246:1:112886:112899	38742	9	True				
ANR	38863	CallExpression	free ( tplName )		38742	0					
ANR	38864	Callee	free		38742	0					
ANR	38865	Identifier	free		38742	0					
ANR	38866	ArgumentList	tplName		38742	1					
ANR	38867	Argument	tplName		38742	0					
ANR	38868	Identifier	tplName		38742	0					
ANR	38869	ExpressionStatement	RETiRet	4247:1:112902:112909	38742	10	True				
ANR	38870	Identifier	RETiRet		38742	0					
ANR	38871	ReturnType	static rsRetVal		38742	1					
ANR	38872	Identifier	initFunc_exec_template		38742	2					
ANR	38873	ParameterList	struct cnffunc * func		38742	3					
ANR	38874	Parameter	struct cnffunc * func	4219:23:112261:112280	38742	0	True				
ANR	38875	ParameterType	struct cnffunc *		38742	0					
ANR	38876	Identifier	func		38742	1					
ANR	38877	CFGEntryNode	ENTRY		38742		True				
ANR	38878	CFGExitNode	EXIT		38742		True				
ANR	38879	Symbol	NULL		38742						
ANR	38880	Symbol	* func		38742						
ANR	38881	Symbol	func -> funcdata		38742						
ANR	38882	Symbol	__FILE__		38742						
ANR	38883	Symbol	* * func		38742						
ANR	38884	Symbol	* func -> expr		38742						
ANR	38885	Symbol	__LINE__		38742						
ANR	38886	Symbol	tplFind		38742						
ANR	38887	Symbol	es_str2cstr		38742						
ANR	38888	Symbol	strlen		38742						
ANR	38889	Symbol	ourConf		38742						
ANR	38890	Symbol	tplName		38742						
ANR	38891	Symbol	func -> expr [ 0 ] -> nodetype		38742						
ANR	38892	Symbol	func		38742						
ANR	38893	Symbol	* * * func		38742						
ANR	38894	Symbol	func -> expr		38742						
ANR	38895	Symbol	* * func -> expr		38742						
ANR	38896	Symbol	func -> destructable_funcdata		38742						
ANR	38897	Symbol	func -> nParams		38742						
ANR	38898	Symbol	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		38742						
ANR	38899	Function	initFunc_prifilt	4251:0:112915:113557							
ANR	38900	FunctionDef	initFunc_prifilt (struct cnffunc * func)		38899	0					
ANR	38901	CompoundStatement		4253:0:112970:113557	38899	0					
ANR	38902	IdentifierDeclStatement	struct funcData_prifilt * pData ;	4254:1:112973:113003	38899	0	True				
ANR	38903	IdentifierDecl	* pData		38899	0					
ANR	38904	IdentifierDeclType	struct funcData_prifilt *		38899	0					
ANR	38905	Identifier	pData		38899	1					
ANR	38906	IdentifierDeclStatement	uchar * cstr ;	4255:1:113006:113017	38899	1	True				
ANR	38907	IdentifierDecl	* cstr		38899	0					
ANR	38908	IdentifierDeclType	uchar *		38899	0					
ANR	38909	Identifier	cstr		38899	1					
ANR	38910	ExpressionStatement	DEFiRet	4256:1:113020:113027	38899	2	True				
ANR	38911	Identifier	DEFiRet		38899	0					
ANR	38912	IfStatement	if ( func -> nParams != 1 )		38899	3					
ANR	38913	Condition	func -> nParams != 1	4258:4:113034:113051	38899	0	True				
ANR	38914	EqualityExpression	func -> nParams != 1		38899	0		!=			
ANR	38915	PtrMemberAccess	func -> nParams		38899	0					
ANR	38916	Identifier	func		38899	0					
ANR	38917	Identifier	nParams		38899	1					
ANR	38918	PrimaryExpression	1		38899	1					
ANR	38919	CompoundStatement		6:24:83:83	38899	1					
ANR	38920	ExpressionStatement	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"	4259:2:113058:113141	38899	0	True				
ANR	38921	CallExpression	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"		38899	0					
ANR	38922	Callee	parser_errmsg		38899	0					
ANR	38923	Identifier	parser_errmsg		38899	0					
ANR	38924	ArgumentList	"""rsyslog logic error in line %d of file %s\\n"""		38899	1					
ANR	38925	Argument	"""rsyslog logic error in line %d of file %s\\n"""		38899	0					
ANR	38926	PrimaryExpression	"""rsyslog logic error in line %d of file %s\\n"""		38899	0					
ANR	38927	Argument	__LINE__		38899	1					
ANR	38928	Identifier	__LINE__		38899	0					
ANR	38929	Argument	__FILE__		38899	2					
ANR	38930	Identifier	__FILE__		38899	0					
ANR	38931	ExpressionStatement	FINALIZE	4261:2:113145:113153	38899	1	True				
ANR	38932	Identifier	FINALIZE		38899	0					
ANR	38933	ExpressionStatement	func -> funcdata = NULL	4264:1:113160:113181	38899	4	True				
ANR	38934	AssignmentExpression	func -> funcdata = NULL		38899	0		=			
ANR	38935	PtrMemberAccess	func -> funcdata		38899	0					
ANR	38936	Identifier	func		38899	0					
ANR	38937	Identifier	funcdata		38899	1					
ANR	38938	Identifier	NULL		38899	1					
ANR	38939	IfStatement	if ( func -> expr [ 0 ] -> nodetype != 'S' )		38899	5					
ANR	38940	Condition	func -> expr [ 0 ] -> nodetype != 'S'	4265:4:113187:113216	38899	0	True				
ANR	38941	EqualityExpression	func -> expr [ 0 ] -> nodetype != 'S'		38899	0		!=			
ANR	38942	PtrMemberAccess	func -> expr [ 0 ] -> nodetype		38899	0					
ANR	38943	ArrayIndexing	func -> expr [ 0 ]		38899	0					
ANR	38944	PtrMemberAccess	func -> expr		38899	0					
ANR	38945	Identifier	func		38899	0					
ANR	38946	Identifier	expr		38899	1					
ANR	38947	PrimaryExpression	0		38899	1					
ANR	38948	Identifier	nodetype		38899	1					
ANR	38949	PrimaryExpression	'S'		38899	1					
ANR	38950	CompoundStatement		13:36:248:248	38899	1					
ANR	38951	ExpressionStatement	"parser_errmsg ( ""param 1 of prifilt() must be a constant string"" )"	4266:2:113223:113286	38899	0	True				
ANR	38952	CallExpression	"parser_errmsg ( ""param 1 of prifilt() must be a constant string"" )"		38899	0					
ANR	38953	Callee	parser_errmsg		38899	0					
ANR	38954	Identifier	parser_errmsg		38899	0					
ANR	38955	ArgumentList	"""param 1 of prifilt() must be a constant string"""		38899	1					
ANR	38956	Argument	"""param 1 of prifilt() must be a constant string"""		38899	0					
ANR	38957	PrimaryExpression	"""param 1 of prifilt() must be a constant string"""		38899	0					
ANR	38958	ExpressionStatement	FINALIZE	4267:2:113290:113298	38899	1	True				
ANR	38959	Identifier	FINALIZE		38899	0					
ANR	38960	ExpressionStatement	"CHKmalloc ( pData = calloc ( 1 , sizeof ( struct funcData_prifilt ) ) )"	4270:1:113305:113366	38899	6	True				
ANR	38961	CallExpression	"CHKmalloc ( pData = calloc ( 1 , sizeof ( struct funcData_prifilt ) ) )"		38899	0					
ANR	38962	Callee	CHKmalloc		38899	0					
ANR	38963	Identifier	CHKmalloc		38899	0					
ANR	38964	ArgumentList	"pData = calloc ( 1 , sizeof ( struct funcData_prifilt ) )"		38899	1					
ANR	38965	Argument	"pData = calloc ( 1 , sizeof ( struct funcData_prifilt ) )"		38899	0					
ANR	38966	AssignmentExpression	"pData = calloc ( 1 , sizeof ( struct funcData_prifilt ) )"		38899	0		=			
ANR	38967	Identifier	pData		38899	0					
ANR	38968	CallExpression	"calloc ( 1 , sizeof ( struct funcData_prifilt ) )"		38899	1					
ANR	38969	Callee	calloc		38899	0					
ANR	38970	Identifier	calloc		38899	0					
ANR	38971	ArgumentList	1		38899	1					
ANR	38972	Argument	1		38899	0					
ANR	38973	PrimaryExpression	1		38899	0					
ANR	38974	Argument	sizeof ( struct funcData_prifilt )		38899	1					
ANR	38975	SizeofExpression	sizeof ( struct funcData_prifilt )		38899	0					
ANR	38976	Sizeof	sizeof		38899	0					
ANR	38977	SizeofOperand	struct funcData_prifilt		38899	1					
ANR	38978	ExpressionStatement	func -> funcdata = pData	4271:1:113369:113391	38899	7	True				
ANR	38979	AssignmentExpression	func -> funcdata = pData		38899	0		=			
ANR	38980	PtrMemberAccess	func -> funcdata		38899	0					
ANR	38981	Identifier	func		38899	0					
ANR	38982	Identifier	funcdata		38899	1					
ANR	38983	Identifier	pData		38899	1					
ANR	38984	ExpressionStatement	"cstr = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"	4272:1:113394:113472	38899	8	True				
ANR	38985	AssignmentExpression	"cstr = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		38899	0		=			
ANR	38986	Identifier	cstr		38899	0					
ANR	38987	CastExpression	"( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		38899	1					
ANR	38988	CastTarget	uchar *		38899	0					
ANR	38989	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		38899	1					
ANR	38990	Callee	es_str2cstr		38899	0					
ANR	38991	Identifier	es_str2cstr		38899	0					
ANR	38992	ArgumentList	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		38899	1					
ANR	38993	Argument	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		38899	0					
ANR	38994	PtrMemberAccess	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		38899	0					
ANR	38995	CastExpression	( struct cnfstringval * ) func -> expr [ 0 ]		38899	0					
ANR	38996	CastTarget	struct cnfstringval *		38899	0					
ANR	38997	ArrayIndexing	func -> expr [ 0 ]		38899	1					
ANR	38998	PtrMemberAccess	func -> expr		38899	0					
ANR	38999	Identifier	func		38899	0					
ANR	39000	Identifier	expr		38899	1					
ANR	39001	PrimaryExpression	0		38899	1					
ANR	39002	Identifier	estr		38899	1					
ANR	39003	Argument	NULL		38899	1					
ANR	39004	Identifier	NULL		38899	0					
ANR	39005	ExpressionStatement	"CHKiRet ( DecodePRIFilter ( cstr , pData -> pmask ) )"	4273:1:113475:113519	38899	9	True				
ANR	39006	CallExpression	"CHKiRet ( DecodePRIFilter ( cstr , pData -> pmask ) )"		38899	0					
ANR	39007	Callee	CHKiRet		38899	0					
ANR	39008	Identifier	CHKiRet		38899	0					
ANR	39009	ArgumentList	"DecodePRIFilter ( cstr , pData -> pmask )"		38899	1					
ANR	39010	Argument	"DecodePRIFilter ( cstr , pData -> pmask )"		38899	0					
ANR	39011	CallExpression	"DecodePRIFilter ( cstr , pData -> pmask )"		38899	0					
ANR	39012	Callee	DecodePRIFilter		38899	0					
ANR	39013	Identifier	DecodePRIFilter		38899	0					
ANR	39014	ArgumentList	cstr		38899	1					
ANR	39015	Argument	cstr		38899	0					
ANR	39016	Identifier	cstr		38899	0					
ANR	39017	Argument	pData -> pmask		38899	1					
ANR	39018	PtrMemberAccess	pData -> pmask		38899	0					
ANR	39019	Identifier	pData		38899	0					
ANR	39020	Identifier	pmask		38899	1					
ANR	39021	ExpressionStatement	free ( cstr )	4274:1:113522:113532	38899	10	True				
ANR	39022	CallExpression	free ( cstr )		38899	0					
ANR	39023	Callee	free		38899	0					
ANR	39024	Identifier	free		38899	0					
ANR	39025	ArgumentList	cstr		38899	1					
ANR	39026	Argument	cstr		38899	0					
ANR	39027	Identifier	cstr		38899	0					
ANR	39028	Label	finalize_it :	4275:0:113534:113545	38899	11	True				
ANR	39029	Identifier	finalize_it		38899	0					
ANR	39030	ExpressionStatement	RETiRet	4276:1:113548:113555	38899	12	True				
ANR	39031	Identifier	RETiRet		38899	0					
ANR	39032	ReturnType	static rsRetVal		38899	1					
ANR	39033	Identifier	initFunc_prifilt		38899	2					
ANR	39034	ParameterList	struct cnffunc * func		38899	3					
ANR	39035	Parameter	struct cnffunc * func	4252:17:112948:112967	38899	0	True				
ANR	39036	ParameterType	struct cnffunc *		38899	0					
ANR	39037	Identifier	func		38899	1					
ANR	39038	CFGEntryNode	ENTRY		38899		True				
ANR	39039	CFGExitNode	EXIT		38899		True				
ANR	39040	Symbol	cstr		38899						
ANR	39041	Symbol	NULL		38899						
ANR	39042	Symbol	* func		38899						
ANR	39043	Symbol	func -> funcdata		38899						
ANR	39044	Symbol	pData -> pmask		38899						
ANR	39045	Symbol	__FILE__		38899						
ANR	39046	Symbol	* * func		38899						
ANR	39047	Symbol	* func -> expr		38899						
ANR	39048	Symbol	calloc		38899						
ANR	39049	Symbol	__LINE__		38899						
ANR	39050	Symbol	es_str2cstr		38899						
ANR	39051	Symbol	* pData		38899						
ANR	39052	Symbol	pData		38899						
ANR	39053	Symbol	func -> expr [ 0 ] -> nodetype		38899						
ANR	39054	Symbol	DecodePRIFilter		38899						
ANR	39055	Symbol	func		38899						
ANR	39056	Symbol	* * * func		38899						
ANR	39057	Symbol	func -> expr		38899						
ANR	39058	Symbol	* * func -> expr		38899						
ANR	39059	Symbol	func -> nParams		38899						
ANR	39060	Symbol	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		38899						
ANR	39061	Function	resolveLookupTable	4280:0:113561:114402							
ANR	39062	FunctionDef	resolveLookupTable (struct cnffunc * func)		39061	0					
ANR	39063	CompoundStatement		4282:0:113618:114402	39061	0					
ANR	39064	IdentifierDeclStatement	uchar * cstr = NULL ;	4283:1:113621:113639	39061	0	True				
ANR	39065	IdentifierDecl	* cstr = NULL		39061	0					
ANR	39066	IdentifierDeclType	uchar *		39061	0					
ANR	39067	Identifier	cstr		39061	1					
ANR	39068	AssignmentExpression	* cstr = NULL		39061	2		=			
ANR	39069	Identifier	NULL		39061	0					
ANR	39070	Identifier	NULL		39061	1					
ANR	39071	IdentifierDeclStatement	char * fn_name = NULL ;	4284:1:113642:113662	39061	1	True				
ANR	39072	IdentifierDecl	* fn_name = NULL		39061	0					
ANR	39073	IdentifierDeclType	char *		39061	0					
ANR	39074	Identifier	fn_name		39061	1					
ANR	39075	AssignmentExpression	* fn_name = NULL		39061	2		=			
ANR	39076	Identifier	NULL		39061	0					
ANR	39077	Identifier	NULL		39061	1					
ANR	39078	ExpressionStatement	DEFiRet	4285:1:113665:113672	39061	2	True				
ANR	39079	Identifier	DEFiRet		39061	0					
ANR	39080	ExpressionStatement	func -> destructable_funcdata = 0	4287:1:113676:113707	39061	3	True				
ANR	39081	AssignmentExpression	func -> destructable_funcdata = 0		39061	0		=			
ANR	39082	PtrMemberAccess	func -> destructable_funcdata		39061	0					
ANR	39083	Identifier	func		39061	0					
ANR	39084	Identifier	destructable_funcdata		39061	1					
ANR	39085	PrimaryExpression	0		39061	1					
ANR	39086	IfStatement	if ( func -> nParams == 0 )		39061	4					
ANR	39087	Condition	func -> nParams == 0	4289:4:113714:113731	39061	0	True				
ANR	39088	EqualityExpression	func -> nParams == 0		39061	0		==			
ANR	39089	PtrMemberAccess	func -> nParams		39061	0					
ANR	39090	Identifier	func		39061	0					
ANR	39091	Identifier	nParams		39061	1					
ANR	39092	PrimaryExpression	0		39061	1					
ANR	39093	CompoundStatement		8:24:115:115	39061	1					
ANR	39094	ExpressionStatement	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"	4290:2:113782:113865	39061	0	True				
ANR	39095	CallExpression	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"		39061	0					
ANR	39096	Callee	parser_errmsg		39061	0					
ANR	39097	Identifier	parser_errmsg		39061	0					
ANR	39098	ArgumentList	"""rsyslog logic error in line %d of file %s\\n"""		39061	1					
ANR	39099	Argument	"""rsyslog logic error in line %d of file %s\\n"""		39061	0					
ANR	39100	PrimaryExpression	"""rsyslog logic error in line %d of file %s\\n"""		39061	0					
ANR	39101	Argument	__LINE__		39061	1					
ANR	39102	Identifier	__LINE__		39061	0					
ANR	39103	Argument	__FILE__		39061	2					
ANR	39104	Identifier	__FILE__		39061	0					
ANR	39105	ExpressionStatement	FINALIZE	4292:2:113869:113877	39061	1	True				
ANR	39106	Identifier	FINALIZE		39061	0					
ANR	39107	ExpressionStatement	"CHKmalloc ( fn_name = es_str2cstr ( func -> fname , NULL ) )"	4295:1:113884:113935	39061	5	True				
ANR	39108	CallExpression	"CHKmalloc ( fn_name = es_str2cstr ( func -> fname , NULL ) )"		39061	0					
ANR	39109	Callee	CHKmalloc		39061	0					
ANR	39110	Identifier	CHKmalloc		39061	0					
ANR	39111	ArgumentList	"fn_name = es_str2cstr ( func -> fname , NULL )"		39061	1					
ANR	39112	Argument	"fn_name = es_str2cstr ( func -> fname , NULL )"		39061	0					
ANR	39113	AssignmentExpression	"fn_name = es_str2cstr ( func -> fname , NULL )"		39061	0		=			
ANR	39114	Identifier	fn_name		39061	0					
ANR	39115	CallExpression	"es_str2cstr ( func -> fname , NULL )"		39061	1					
ANR	39116	Callee	es_str2cstr		39061	0					
ANR	39117	Identifier	es_str2cstr		39061	0					
ANR	39118	ArgumentList	func -> fname		39061	1					
ANR	39119	Argument	func -> fname		39061	0					
ANR	39120	PtrMemberAccess	func -> fname		39061	0					
ANR	39121	Identifier	func		39061	0					
ANR	39122	Identifier	fname		39061	1					
ANR	39123	Argument	NULL		39061	1					
ANR	39124	Identifier	NULL		39061	0					
ANR	39125	ExpressionStatement	func -> funcdata = NULL	4297:1:113939:113960	39061	6	True				
ANR	39126	AssignmentExpression	func -> funcdata = NULL		39061	0		=			
ANR	39127	PtrMemberAccess	func -> funcdata		39061	0					
ANR	39128	Identifier	func		39061	0					
ANR	39129	Identifier	funcdata		39061	1					
ANR	39130	Identifier	NULL		39061	1					
ANR	39131	IfStatement	if ( func -> expr [ 0 ] -> nodetype != 'S' )		39061	7					
ANR	39132	Condition	func -> expr [ 0 ] -> nodetype != 'S'	4298:4:113966:113995	39061	0	True				
ANR	39133	EqualityExpression	func -> expr [ 0 ] -> nodetype != 'S'		39061	0		!=			
ANR	39134	PtrMemberAccess	func -> expr [ 0 ] -> nodetype		39061	0					
ANR	39135	ArrayIndexing	func -> expr [ 0 ]		39061	0					
ANR	39136	PtrMemberAccess	func -> expr		39061	0					
ANR	39137	Identifier	func		39061	0					
ANR	39138	Identifier	expr		39061	1					
ANR	39139	PrimaryExpression	0		39061	1					
ANR	39140	Identifier	nodetype		39061	1					
ANR	39141	PrimaryExpression	'S'		39061	1					
ANR	39142	CompoundStatement		17:36:379:379	39061	1					
ANR	39143	ExpressionStatement	"parser_errmsg ( ""table name (param 1) of %s() must be a constant string"" , fn_name )"	4299:2:114002:114082	39061	0	True				
ANR	39144	CallExpression	"parser_errmsg ( ""table name (param 1) of %s() must be a constant string"" , fn_name )"		39061	0					
ANR	39145	Callee	parser_errmsg		39061	0					
ANR	39146	Identifier	parser_errmsg		39061	0					
ANR	39147	ArgumentList	"""table name (param 1) of %s() must be a constant string"""		39061	1					
ANR	39148	Argument	"""table name (param 1) of %s() must be a constant string"""		39061	0					
ANR	39149	PrimaryExpression	"""table name (param 1) of %s() must be a constant string"""		39061	0					
ANR	39150	Argument	fn_name		39061	1					
ANR	39151	Identifier	fn_name		39061	0					
ANR	39152	ExpressionStatement	FINALIZE	4300:2:114086:114094	39061	1	True				
ANR	39153	Identifier	FINALIZE		39061	0					
ANR	39154	ExpressionStatement	"CHKmalloc ( cstr = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL ) )"	4303:1:114101:114190	39061	8	True				
ANR	39155	CallExpression	"CHKmalloc ( cstr = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL ) )"		39061	0					
ANR	39156	Callee	CHKmalloc		39061	0					
ANR	39157	Identifier	CHKmalloc		39061	0					
ANR	39158	ArgumentList	"cstr = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		39061	1					
ANR	39159	Argument	"cstr = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		39061	0					
ANR	39160	AssignmentExpression	"cstr = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		39061	0		=			
ANR	39161	Identifier	cstr		39061	0					
ANR	39162	CastExpression	"( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		39061	1					
ANR	39163	CastTarget	uchar *		39061	0					
ANR	39164	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		39061	1					
ANR	39165	Callee	es_str2cstr		39061	0					
ANR	39166	Identifier	es_str2cstr		39061	0					
ANR	39167	ArgumentList	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		39061	1					
ANR	39168	Argument	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		39061	0					
ANR	39169	PtrMemberAccess	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		39061	0					
ANR	39170	CastExpression	( struct cnfstringval * ) func -> expr [ 0 ]		39061	0					
ANR	39171	CastTarget	struct cnfstringval *		39061	0					
ANR	39172	ArrayIndexing	func -> expr [ 0 ]		39061	1					
ANR	39173	PtrMemberAccess	func -> expr		39061	0					
ANR	39174	Identifier	func		39061	0					
ANR	39175	Identifier	expr		39061	1					
ANR	39176	PrimaryExpression	0		39061	1					
ANR	39177	Identifier	estr		39061	1					
ANR	39178	Argument	NULL		39061	1					
ANR	39179	Identifier	NULL		39061	0					
ANR	39180	IfStatement	if ( ( func -> funcdata = lookupFindTable ( cstr ) ) == NULL )		39061	9					
ANR	39181	Condition	( func -> funcdata = lookupFindTable ( cstr ) ) == NULL	4304:4:114196:114243	39061	0	True				
ANR	39182	EqualityExpression	( func -> funcdata = lookupFindTable ( cstr ) ) == NULL		39061	0		==			
ANR	39183	AssignmentExpression	func -> funcdata = lookupFindTable ( cstr )		39061	0		=			
ANR	39184	PtrMemberAccess	func -> funcdata		39061	0					
ANR	39185	Identifier	func		39061	0					
ANR	39186	Identifier	funcdata		39061	1					
ANR	39187	CallExpression	lookupFindTable ( cstr )		39061	1					
ANR	39188	Callee	lookupFindTable		39061	0					
ANR	39189	Identifier	lookupFindTable		39061	0					
ANR	39190	ArgumentList	cstr		39061	1					
ANR	39191	Argument	cstr		39061	0					
ANR	39192	Identifier	cstr		39061	0					
ANR	39193	Identifier	NULL		39061	1					
ANR	39194	CompoundStatement		23:54:627:627	39061	1					
ANR	39195	ExpressionStatement	"parser_errmsg ( ""lookup table '%s' not found (used in function: %s)"" , cstr , fn_name )"	4305:2:114250:114332	39061	0	True				
ANR	39196	CallExpression	"parser_errmsg ( ""lookup table '%s' not found (used in function: %s)"" , cstr , fn_name )"		39061	0					
ANR	39197	Callee	parser_errmsg		39061	0					
ANR	39198	Identifier	parser_errmsg		39061	0					
ANR	39199	ArgumentList	"""lookup table '%s' not found (used in function: %s)"""		39061	1					
ANR	39200	Argument	"""lookup table '%s' not found (used in function: %s)"""		39061	0					
ANR	39201	PrimaryExpression	"""lookup table '%s' not found (used in function: %s)"""		39061	0					
ANR	39202	Argument	cstr		39061	1					
ANR	39203	Identifier	cstr		39061	0					
ANR	39204	Argument	fn_name		39061	2					
ANR	39205	Identifier	fn_name		39061	0					
ANR	39206	ExpressionStatement	FINALIZE	4306:2:114336:114344	39061	1	True				
ANR	39207	Identifier	FINALIZE		39061	0					
ANR	39208	Label	finalize_it :	4309:0:114350:114361	39061	10	True				
ANR	39209	Identifier	finalize_it		39061	0					
ANR	39210	ExpressionStatement	free ( cstr )	4310:1:114364:114374	39061	11	True				
ANR	39211	CallExpression	free ( cstr )		39061	0					
ANR	39212	Callee	free		39061	0					
ANR	39213	Identifier	free		39061	0					
ANR	39214	ArgumentList	cstr		39061	1					
ANR	39215	Argument	cstr		39061	0					
ANR	39216	Identifier	cstr		39061	0					
ANR	39217	ExpressionStatement	free ( fn_name )	4311:1:114377:114390	39061	12	True				
ANR	39218	CallExpression	free ( fn_name )		39061	0					
ANR	39219	Callee	free		39061	0					
ANR	39220	Identifier	free		39061	0					
ANR	39221	ArgumentList	fn_name		39061	1					
ANR	39222	Argument	fn_name		39061	0					
ANR	39223	Identifier	fn_name		39061	0					
ANR	39224	ExpressionStatement	RETiRet	4312:1:114393:114400	39061	13	True				
ANR	39225	Identifier	RETiRet		39061	0					
ANR	39226	ReturnType	static rsRetVal		39061	1					
ANR	39227	Identifier	resolveLookupTable		39061	2					
ANR	39228	ParameterList	struct cnffunc * func		39061	3					
ANR	39229	Parameter	struct cnffunc * func	4281:19:113596:113615	39061	0	True				
ANR	39230	ParameterType	struct cnffunc *		39061	0					
ANR	39231	Identifier	func		39061	1					
ANR	39232	CFGEntryNode	ENTRY		39061		True				
ANR	39233	CFGExitNode	EXIT		39061		True				
ANR	39234	Symbol	cstr		39061						
ANR	39235	Symbol	NULL		39061						
ANR	39236	Symbol	* func		39061						
ANR	39237	Symbol	func -> funcdata		39061						
ANR	39238	Symbol	__FILE__		39061						
ANR	39239	Symbol	* * func		39061						
ANR	39240	Symbol	* func -> expr		39061						
ANR	39241	Symbol	__LINE__		39061						
ANR	39242	Symbol	es_str2cstr		39061						
ANR	39243	Symbol	func -> expr [ 0 ] -> nodetype		39061						
ANR	39244	Symbol	func		39061						
ANR	39245	Symbol	* * * func		39061						
ANR	39246	Symbol	func -> expr		39061						
ANR	39247	Symbol	lookupFindTable		39061						
ANR	39248	Symbol	* * func -> expr		39061						
ANR	39249	Symbol	fn_name		39061						
ANR	39250	Symbol	func -> destructable_funcdata		39061						
ANR	39251	Symbol	func -> nParams		39061						
ANR	39252	Symbol	func -> fname		39061						
ANR	39253	Symbol	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		39061						
ANR	39254	Function	initFunc_dyn_stats	4315:0:114405:115125							
ANR	39255	FunctionDef	initFunc_dyn_stats (struct cnffunc * func)		39254	0					
ANR	39256	CompoundStatement		4317:0:114462:115125	39254	0					
ANR	39257	IdentifierDeclStatement	uchar * cstr = NULL ;	4318:1:114465:114483	39254	0	True				
ANR	39258	IdentifierDecl	* cstr = NULL		39254	0					
ANR	39259	IdentifierDeclType	uchar *		39254	0					
ANR	39260	Identifier	cstr		39254	1					
ANR	39261	AssignmentExpression	* cstr = NULL		39254	2		=			
ANR	39262	Identifier	NULL		39254	0					
ANR	39263	Identifier	NULL		39254	1					
ANR	39264	ExpressionStatement	DEFiRet	4319:1:114486:114493	39254	1	True				
ANR	39265	Identifier	DEFiRet		39254	0					
ANR	39266	ExpressionStatement	func -> destructable_funcdata = 0	4321:1:114497:114528	39254	2	True				
ANR	39267	AssignmentExpression	func -> destructable_funcdata = 0		39254	0		=			
ANR	39268	PtrMemberAccess	func -> destructable_funcdata		39254	0					
ANR	39269	Identifier	func		39254	0					
ANR	39270	Identifier	destructable_funcdata		39254	1					
ANR	39271	PrimaryExpression	0		39254	1					
ANR	39272	IfStatement	if ( func -> nParams != 2 )		39254	3					
ANR	39273	Condition	func -> nParams != 2	4323:4:114535:114552	39254	0	True				
ANR	39274	EqualityExpression	func -> nParams != 2		39254	0		!=			
ANR	39275	PtrMemberAccess	func -> nParams		39254	0					
ANR	39276	Identifier	func		39254	0					
ANR	39277	Identifier	nParams		39254	1					
ANR	39278	PrimaryExpression	2		39254	1					
ANR	39279	CompoundStatement		7:24:92:92	39254	1					
ANR	39280	ExpressionStatement	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"	4324:2:114559:114646	39254	0	True				
ANR	39281	CallExpression	"parser_errmsg ( ""rsyslog logic error in line %d of file %s\\n"" , __LINE__ , __FILE__ )"		39254	0					
ANR	39282	Callee	parser_errmsg		39254	0					
ANR	39283	Identifier	parser_errmsg		39254	0					
ANR	39284	ArgumentList	"""rsyslog logic error in line %d of file %s\\n"""		39254	1					
ANR	39285	Argument	"""rsyslog logic error in line %d of file %s\\n"""		39254	0					
ANR	39286	PrimaryExpression	"""rsyslog logic error in line %d of file %s\\n"""		39254	0					
ANR	39287	Argument	__LINE__		39254	1					
ANR	39288	Identifier	__LINE__		39254	0					
ANR	39289	Argument	__FILE__		39254	2					
ANR	39290	Identifier	__FILE__		39254	0					
ANR	39291	ExpressionStatement	FINALIZE	4326:2:114650:114658	39254	1	True				
ANR	39292	Identifier	FINALIZE		39254	0					
ANR	39293	ExpressionStatement	func -> funcdata = NULL	4329:1:114665:114686	39254	4	True				
ANR	39294	AssignmentExpression	func -> funcdata = NULL		39254	0		=			
ANR	39295	PtrMemberAccess	func -> funcdata		39254	0					
ANR	39296	Identifier	func		39254	0					
ANR	39297	Identifier	funcdata		39254	1					
ANR	39298	Identifier	NULL		39254	1					
ANR	39299	IfStatement	if ( func -> expr [ 0 ] -> nodetype != 'S' )		39254	5					
ANR	39300	Condition	func -> expr [ 0 ] -> nodetype != 'S'	4330:4:114692:114721	39254	0	True				
ANR	39301	EqualityExpression	func -> expr [ 0 ] -> nodetype != 'S'		39254	0		!=			
ANR	39302	PtrMemberAccess	func -> expr [ 0 ] -> nodetype		39254	0					
ANR	39303	ArrayIndexing	func -> expr [ 0 ]		39254	0					
ANR	39304	PtrMemberAccess	func -> expr		39254	0					
ANR	39305	Identifier	func		39254	0					
ANR	39306	Identifier	expr		39254	1					
ANR	39307	PrimaryExpression	0		39254	1					
ANR	39308	Identifier	nodetype		39254	1					
ANR	39309	PrimaryExpression	'S'		39254	1					
ANR	39310	CompoundStatement		14:36:261:261	39254	1					
ANR	39311	Statement	parser_errmsg	4331:2:114728:114740	39254	0	True				
ANR	39312	Statement	(	4331:15:114741:114741	39254	1	True				
ANR	39313	Statement	"""dyn-stats bucket-name (param 1) of dyn-stats manipulating """	4331:16:114742:114801	39254	2	True				
ANR	39314	Statement	"""functions like dyn_inc must be a constant string"""	4332:2:114805:114854	39254	3	True				
ANR	39315	Statement	)	4332:52:114855:114855	39254	4	True				
ANR	39316	ExpressionStatement		4332:53:114856:114856	39254	5	True				
ANR	39317	ExpressionStatement	FINALIZE	4333:2:114860:114868	39254	6	True				
ANR	39318	Identifier	FINALIZE		39254	0					
ANR	39319	ExpressionStatement	"cstr = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"	4336:1:114875:114953	39254	6	True				
ANR	39320	AssignmentExpression	"cstr = ( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		39254	0		=			
ANR	39321	Identifier	cstr		39254	0					
ANR	39322	CastExpression	"( uchar * ) es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		39254	1					
ANR	39323	CastTarget	uchar *		39254	0					
ANR	39324	CallExpression	"es_str2cstr ( ( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr , NULL )"		39254	1					
ANR	39325	Callee	es_str2cstr		39254	0					
ANR	39326	Identifier	es_str2cstr		39254	0					
ANR	39327	ArgumentList	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		39254	1					
ANR	39328	Argument	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		39254	0					
ANR	39329	PtrMemberAccess	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		39254	0					
ANR	39330	CastExpression	( struct cnfstringval * ) func -> expr [ 0 ]		39254	0					
ANR	39331	CastTarget	struct cnfstringval *		39254	0					
ANR	39332	ArrayIndexing	func -> expr [ 0 ]		39254	1					
ANR	39333	PtrMemberAccess	func -> expr		39254	0					
ANR	39334	Identifier	func		39254	0					
ANR	39335	Identifier	expr		39254	1					
ANR	39336	PrimaryExpression	0		39254	1					
ANR	39337	Identifier	estr		39254	1					
ANR	39338	Argument	NULL		39254	1					
ANR	39339	Identifier	NULL		39254	0					
ANR	39340	IfStatement	if ( ( func -> funcdata = dynstats_findBucket ( cstr ) ) == NULL )		39254	7					
ANR	39341	Condition	( func -> funcdata = dynstats_findBucket ( cstr ) ) == NULL	4337:4:114959:115010	39254	0	True				
ANR	39342	EqualityExpression	( func -> funcdata = dynstats_findBucket ( cstr ) ) == NULL		39254	0		==			
ANR	39343	AssignmentExpression	func -> funcdata = dynstats_findBucket ( cstr )		39254	0		=			
ANR	39344	PtrMemberAccess	func -> funcdata		39254	0					
ANR	39345	Identifier	func		39254	0					
ANR	39346	Identifier	funcdata		39254	1					
ANR	39347	CallExpression	dynstats_findBucket ( cstr )		39254	1					
ANR	39348	Callee	dynstats_findBucket		39254	0					
ANR	39349	Identifier	dynstats_findBucket		39254	0					
ANR	39350	ArgumentList	cstr		39254	1					
ANR	39351	Argument	cstr		39254	0					
ANR	39352	Identifier	cstr		39254	0					
ANR	39353	Identifier	NULL		39254	1					
ANR	39354	CompoundStatement		21:58:550:550	39254	1					
ANR	39355	ExpressionStatement	"parser_errmsg ( ""dyn-stats bucket '%s' not found"" , cstr )"	4338:2:115017:115071	39254	0	True				
ANR	39356	CallExpression	"parser_errmsg ( ""dyn-stats bucket '%s' not found"" , cstr )"		39254	0					
ANR	39357	Callee	parser_errmsg		39254	0					
ANR	39358	Identifier	parser_errmsg		39254	0					
ANR	39359	ArgumentList	"""dyn-stats bucket '%s' not found"""		39254	1					
ANR	39360	Argument	"""dyn-stats bucket '%s' not found"""		39254	0					
ANR	39361	PrimaryExpression	"""dyn-stats bucket '%s' not found"""		39254	0					
ANR	39362	Argument	cstr		39254	1					
ANR	39363	Identifier	cstr		39254	0					
ANR	39364	ExpressionStatement	FINALIZE	4339:2:115075:115083	39254	1	True				
ANR	39365	Identifier	FINALIZE		39254	0					
ANR	39366	Label	finalize_it :	4342:0:115089:115100	39254	8	True				
ANR	39367	Identifier	finalize_it		39254	0					
ANR	39368	ExpressionStatement	free ( cstr )	4343:1:115103:115113	39254	9	True				
ANR	39369	CallExpression	free ( cstr )		39254	0					
ANR	39370	Callee	free		39254	0					
ANR	39371	Identifier	free		39254	0					
ANR	39372	ArgumentList	cstr		39254	1					
ANR	39373	Argument	cstr		39254	0					
ANR	39374	Identifier	cstr		39254	0					
ANR	39375	ExpressionStatement	RETiRet	4344:1:115116:115123	39254	10	True				
ANR	39376	Identifier	RETiRet		39254	0					
ANR	39377	ReturnType	static rsRetVal		39254	1					
ANR	39378	Identifier	initFunc_dyn_stats		39254	2					
ANR	39379	ParameterList	struct cnffunc * func		39254	3					
ANR	39380	Parameter	struct cnffunc * func	4316:19:114440:114459	39254	0	True				
ANR	39381	ParameterType	struct cnffunc *		39254	0					
ANR	39382	Identifier	func		39254	1					
ANR	39383	CFGEntryNode	ENTRY		39254		True				
ANR	39384	CFGExitNode	EXIT		39254		True				
ANR	39385	Symbol	cstr		39254						
ANR	39386	Symbol	NULL		39254						
ANR	39387	Symbol	* func		39254						
ANR	39388	Symbol	func -> funcdata		39254						
ANR	39389	Symbol	__FILE__		39254						
ANR	39390	Symbol	* * func		39254						
ANR	39391	Symbol	* func -> expr		39254						
ANR	39392	Symbol	__LINE__		39254						
ANR	39393	Symbol	es_str2cstr		39254						
ANR	39394	Symbol	func -> expr [ 0 ] -> nodetype		39254						
ANR	39395	Symbol	func		39254						
ANR	39396	Symbol	dynstats_findBucket		39254						
ANR	39397	Symbol	* * * func		39254						
ANR	39398	Symbol	func -> expr		39254						
ANR	39399	Symbol	* * func -> expr		39254						
ANR	39400	Symbol	func -> destructable_funcdata		39254						
ANR	39401	Symbol	func -> nParams		39254						
ANR	39402	Symbol	( ( struct cnfstringval * ) func -> expr [ 0 ] ) -> estr		39254						
ANR	39403	Function	cnffuncNew	4347:0:115128:116487							
ANR	39404	FunctionDef	"cnffuncNew (es_str_t * fname , struct cnffparamlst * paramlst)"		39403	0					
ANR	39405	CompoundStatement		4349:0:115204:116487	39403	0					
ANR	39406	IdentifierDeclStatement	struct cnffunc * func ;	4350:1:115207:115227	39403	0	True				
ANR	39407	IdentifierDecl	* func		39403	0					
ANR	39408	IdentifierDeclType	struct cnffunc *		39403	0					
ANR	39409	Identifier	func		39403	1					
ANR	39410	IdentifierDeclStatement	"struct cnffparamlst * param , * toDel ;"	4351:1:115230:115264	39403	1	True				
ANR	39411	IdentifierDecl	* param		39403	0					
ANR	39412	IdentifierDeclType	struct cnffparamlst *		39403	0					
ANR	39413	Identifier	param		39403	1					
ANR	39414	IdentifierDecl	* toDel		39403	1					
ANR	39415	IdentifierDeclType	struct cnffparamlst *		39403	0					
ANR	39416	Identifier	toDel		39403	1					
ANR	39417	IdentifierDeclStatement	unsigned short i ;	4352:1:115267:115283	39403	2	True				
ANR	39418	IdentifierDecl	i		39403	0					
ANR	39419	IdentifierDeclType	unsigned short		39403	0					
ANR	39420	Identifier	i		39403	1					
ANR	39421	IdentifierDeclStatement	unsigned short nParams ;	4353:1:115286:115308	39403	3	True				
ANR	39422	IdentifierDecl	nParams		39403	0					
ANR	39423	IdentifierDeclType	unsigned short		39403	0					
ANR	39424	Identifier	nParams		39403	1					
ANR	39425	ExpressionStatement	nParams = 0	4356:1:115369:115380	39403	4	True				
ANR	39426	AssignmentExpression	nParams = 0		39403	0		=			
ANR	39427	Identifier	nParams		39403	0					
ANR	39428	PrimaryExpression	0		39403	1					
ANR	39429	ForStatement	for ( param = paramlst ; param != NULL ; param = param -> next )		39403	5					
ANR	39430	ForInit	param = paramlst ;	4357:5:115387:115404	39403	0	True				
ANR	39431	AssignmentExpression	param = paramlst		39403	0		=			
ANR	39432	Identifier	param		39403	0					
ANR	39433	Identifier	paramlst		39403	1					
ANR	39434	Condition	param != NULL	4357:24:115406:115418	39403	1	True				
ANR	39435	EqualityExpression	param != NULL		39403	0		!=			
ANR	39436	Identifier	param		39403	0					
ANR	39437	Identifier	NULL		39403	1					
ANR	39438	AssignmentExpression	param = param -> next	4357:40:115422:115440	39403	2	True	=			
ANR	39439	Identifier	param		39403	0					
ANR	39440	PtrMemberAccess	param -> next		39403	1					
ANR	39441	Identifier	param		39403	0					
ANR	39442	Identifier	next		39403	1					
ANR	39443	ExpressionStatement	++ nParams	4358:2:115445:115454	39403	3	True				
ANR	39444	UnaryExpression	++ nParams		39403	0					
ANR	39445	IncDec	++		39403	0					
ANR	39446	Identifier	nParams		39403	1					
ANR	39447	IfStatement	if ( ( func = malloc ( sizeof ( struct cnffunc ) + ( nParams * sizeof ( struct cnfexp * ) ) ) ) != NULL )		39403	6					
ANR	39448	Condition	( func = malloc ( sizeof ( struct cnffunc ) + ( nParams * sizeof ( struct cnfexp * ) ) ) ) != NULL	4359:4:115460:115547	39403	0	True				
ANR	39449	EqualityExpression	( func = malloc ( sizeof ( struct cnffunc ) + ( nParams * sizeof ( struct cnfexp * ) ) ) ) != NULL		39403	0		!=			
ANR	39450	AssignmentExpression	func = malloc ( sizeof ( struct cnffunc ) + ( nParams * sizeof ( struct cnfexp * ) ) )		39403	0		=			
ANR	39451	Identifier	func		39403	0					
ANR	39452	CallExpression	malloc ( sizeof ( struct cnffunc ) + ( nParams * sizeof ( struct cnfexp * ) ) )		39403	1					
ANR	39453	Callee	malloc		39403	0					
ANR	39454	Identifier	malloc		39403	0					
ANR	39455	ArgumentList	sizeof ( struct cnffunc ) + ( nParams * sizeof ( struct cnfexp * ) )		39403	1					
ANR	39456	Argument	sizeof ( struct cnffunc ) + ( nParams * sizeof ( struct cnfexp * ) )		39403	0					
ANR	39457	AdditiveExpression	sizeof ( struct cnffunc ) + ( nParams * sizeof ( struct cnfexp * ) )		39403	0		+			
ANR	39458	SizeofExpression	sizeof ( struct cnffunc )		39403	0					
ANR	39459	Sizeof	sizeof		39403	0					
ANR	39460	SizeofOperand	struct cnffunc		39403	1					
ANR	39461	MultiplicativeExpression	nParams * sizeof ( struct cnfexp * )		39403	1		*			
ANR	39462	Identifier	nParams		39403	0					
ANR	39463	SizeofExpression	sizeof ( struct cnfexp * )		39403	1					
ANR	39464	Sizeof	sizeof		39403	0					
ANR	39465	SizeofOperand	struct cnfexp *		39403	1					
ANR	39466	Identifier	NULL		39403	1					
ANR	39467	CompoundStatement		12:13:345:345	39403	1					
ANR	39468	ExpressionStatement	func -> nodetype = 'F'	4361:2:115554:115574	39403	0	True				
ANR	39469	AssignmentExpression	func -> nodetype = 'F'		39403	0		=			
ANR	39470	PtrMemberAccess	func -> nodetype		39403	0					
ANR	39471	Identifier	func		39403	0					
ANR	39472	Identifier	nodetype		39403	1					
ANR	39473	PrimaryExpression	'F'		39403	1					
ANR	39474	ExpressionStatement	func -> fname = fname	4362:2:115578:115597	39403	1	True				
ANR	39475	AssignmentExpression	func -> fname = fname		39403	0		=			
ANR	39476	PtrMemberAccess	func -> fname		39403	0					
ANR	39477	Identifier	func		39403	0					
ANR	39478	Identifier	fname		39403	1					
ANR	39479	Identifier	fname		39403	1					
ANR	39480	ExpressionStatement	func -> nParams = nParams	4363:2:115601:115624	39403	2	True				
ANR	39481	AssignmentExpression	func -> nParams = nParams		39403	0		=			
ANR	39482	PtrMemberAccess	func -> nParams		39403	0					
ANR	39483	Identifier	func		39403	0					
ANR	39484	Identifier	nParams		39403	1					
ANR	39485	Identifier	nParams		39403	1					
ANR	39486	ExpressionStatement	func -> funcdata = NULL	4364:2:115628:115649	39403	3	True				
ANR	39487	AssignmentExpression	func -> funcdata = NULL		39403	0		=			
ANR	39488	PtrMemberAccess	func -> funcdata		39403	0					
ANR	39489	Identifier	func		39403	0					
ANR	39490	Identifier	funcdata		39403	1					
ANR	39491	Identifier	NULL		39403	1					
ANR	39492	ExpressionStatement	func -> destructable_funcdata = 1	4365:2:115653:115684	39403	4	True				
ANR	39493	AssignmentExpression	func -> destructable_funcdata = 1		39403	0		=			
ANR	39494	PtrMemberAccess	func -> destructable_funcdata		39403	0					
ANR	39495	Identifier	func		39403	0					
ANR	39496	Identifier	destructable_funcdata		39403	1					
ANR	39497	PrimaryExpression	1		39403	1					
ANR	39498	ExpressionStatement	"func -> fID = funcName2ID ( fname , nParams )"	4366:2:115688:115727	39403	5	True				
ANR	39499	AssignmentExpression	"func -> fID = funcName2ID ( fname , nParams )"		39403	0		=			
ANR	39500	PtrMemberAccess	func -> fID		39403	0					
ANR	39501	Identifier	func		39403	0					
ANR	39502	Identifier	fID		39403	1					
ANR	39503	CallExpression	"funcName2ID ( fname , nParams )"		39403	1					
ANR	39504	Callee	funcName2ID		39403	0					
ANR	39505	Identifier	funcName2ID		39403	0					
ANR	39506	ArgumentList	fname		39403	1					
ANR	39507	Argument	fname		39403	0					
ANR	39508	Identifier	fname		39403	0					
ANR	39509	Argument	nParams		39403	1					
ANR	39510	Identifier	nParams		39403	0					
ANR	39511	ExpressionStatement	param = paramlst	4368:2:115784:115800	39403	6	True				
ANR	39512	AssignmentExpression	param = paramlst		39403	0		=			
ANR	39513	Identifier	param		39403	0					
ANR	39514	Identifier	paramlst		39403	1					
ANR	39515	ForStatement	for ( i = 0 ; i < nParams ; ++ i )		39403	7					
ANR	39516	ForInit	i = 0 ;	4369:6:115808:115814	39403	0	True				
ANR	39517	AssignmentExpression	i = 0		39403	0		=			
ANR	39518	Identifier	i		39403	0					
ANR	39519	PrimaryExpression	0		39403	1					
ANR	39520	Condition	i < nParams	4369:14:115816:115826	39403	1	True				
ANR	39521	RelationalExpression	i < nParams		39403	0		<			
ANR	39522	Identifier	i		39403	0					
ANR	39523	Identifier	nParams		39403	1					
ANR	39524	UnaryExpression	++ i	4369:28:115830:115832	39403	2	True				
ANR	39525	IncDec	++		39403	0					
ANR	39526	Identifier	i		39403	1					
ANR	39527	CompoundStatement		21:33:630:630	39403	3					
ANR	39528	ExpressionStatement	func -> expr [ i ] = param -> expr	4370:3:115840:115867	39403	0	True				
ANR	39529	AssignmentExpression	func -> expr [ i ] = param -> expr		39403	0		=			
ANR	39530	ArrayIndexing	func -> expr [ i ]		39403	0					
ANR	39531	PtrMemberAccess	func -> expr		39403	0					
ANR	39532	Identifier	func		39403	0					
ANR	39533	Identifier	expr		39403	1					
ANR	39534	Identifier	i		39403	1					
ANR	39535	PtrMemberAccess	param -> expr		39403	1					
ANR	39536	Identifier	param		39403	0					
ANR	39537	Identifier	expr		39403	1					
ANR	39538	ExpressionStatement	toDel = param	4371:3:115872:115885	39403	1	True				
ANR	39539	AssignmentExpression	toDel = param		39403	0		=			
ANR	39540	Identifier	toDel		39403	0					
ANR	39541	Identifier	param		39403	1					
ANR	39542	ExpressionStatement	param = param -> next	4372:3:115890:115909	39403	2	True				
ANR	39543	AssignmentExpression	param = param -> next		39403	0		=			
ANR	39544	Identifier	param		39403	0					
ANR	39545	PtrMemberAccess	param -> next		39403	1					
ANR	39546	Identifier	param		39403	0					
ANR	39547	Identifier	next		39403	1					
ANR	39548	ExpressionStatement	free ( toDel )	4373:3:115914:115925	39403	3	True				
ANR	39549	CallExpression	free ( toDel )		39403	0					
ANR	39550	Callee	free		39403	0					
ANR	39551	Identifier	free		39403	0					
ANR	39552	ArgumentList	toDel		39403	1					
ANR	39553	Argument	toDel		39403	0					
ANR	39554	Identifier	toDel		39403	0					
ANR	39555	SwitchStatement	switch ( func -> fID )		39403	8					
ANR	39556	Condition	func -> fID	4376:9:115994:116002	39403	0	True				
ANR	39557	PtrMemberAccess	func -> fID		39403	0					
ANR	39558	Identifier	func		39403	0					
ANR	39559	Identifier	fID		39403	1					
ANR	39560	CompoundStatement		28:20:800:800	39403	1					
ANR	39561	Label	case CNFFUNC_RE_MATCH :	4377:3:116010:116031	39403	0	True				
ANR	39562	Identifier	CNFFUNC_RE_MATCH		39403	0					
ANR	39563	Label	case CNFFUNC_RE_EXTRACT :	4378:3:116036:116059	39403	1	True				
ANR	39564	Identifier	CNFFUNC_RE_EXTRACT		39403	0					
ANR	39565	ExpressionStatement	initFunc_re_match ( func )	4380:4:116141:116164	39403	2	True				
ANR	39566	CallExpression	initFunc_re_match ( func )		39403	0					
ANR	39567	Callee	initFunc_re_match		39403	0					
ANR	39568	Identifier	initFunc_re_match		39403	0					
ANR	39569	ArgumentList	func		39403	1					
ANR	39570	Argument	func		39403	0					
ANR	39571	Identifier	func		39403	0					
ANR	39572	BreakStatement	break ;	4381:4:116170:116175	39403	3	True				
ANR	39573	Label	case CNFFUNC_PRIFILT :	4382:3:116180:116200	39403	4	True				
ANR	39574	Identifier	CNFFUNC_PRIFILT		39403	0					
ANR	39575	ExpressionStatement	initFunc_prifilt ( func )	4383:4:116206:116228	39403	5	True				
ANR	39576	CallExpression	initFunc_prifilt ( func )		39403	0					
ANR	39577	Callee	initFunc_prifilt		39403	0					
ANR	39578	Identifier	initFunc_prifilt		39403	0					
ANR	39579	ArgumentList	func		39403	1					
ANR	39580	Argument	func		39403	0					
ANR	39581	Identifier	func		39403	0					
ANR	39582	BreakStatement	break ;	4384:4:116234:116239	39403	6	True				
ANR	39583	Label	case CNFFUNC_LOOKUP :	4385:3:116244:116263	39403	7	True				
ANR	39584	Identifier	CNFFUNC_LOOKUP		39403	0					
ANR	39585	ExpressionStatement	resolveLookupTable ( func )	4386:4:116269:116293	39403	8	True				
ANR	39586	CallExpression	resolveLookupTable ( func )		39403	0					
ANR	39587	Callee	resolveLookupTable		39403	0					
ANR	39588	Identifier	resolveLookupTable		39403	0					
ANR	39589	ArgumentList	func		39403	1					
ANR	39590	Argument	func		39403	0					
ANR	39591	Identifier	func		39403	0					
ANR	39592	BreakStatement	break ;	4387:4:116299:116304	39403	9	True				
ANR	39593	Label	case CNFFUNC_EXEC_TEMPLATE :	4388:3:116309:116335	39403	10	True				
ANR	39594	Identifier	CNFFUNC_EXEC_TEMPLATE		39403	0					
ANR	39595	ExpressionStatement	initFunc_exec_template ( func )	4389:4:116341:116369	39403	11	True				
ANR	39596	CallExpression	initFunc_exec_template ( func )		39403	0					
ANR	39597	Callee	initFunc_exec_template		39403	0					
ANR	39598	Identifier	initFunc_exec_template		39403	0					
ANR	39599	ArgumentList	func		39403	1					
ANR	39600	Argument	func		39403	0					
ANR	39601	Identifier	func		39403	0					
ANR	39602	BreakStatement	break ;	4390:4:116375:116380	39403	12	True				
ANR	39603	Label	case CNFFUNC_DYN_INC :	4391:3:116385:116405	39403	13	True				
ANR	39604	Identifier	CNFFUNC_DYN_INC		39403	0					
ANR	39605	ExpressionStatement	initFunc_dyn_stats ( func )	4392:4:116411:116435	39403	14	True				
ANR	39606	CallExpression	initFunc_dyn_stats ( func )		39403	0					
ANR	39607	Callee	initFunc_dyn_stats		39403	0					
ANR	39608	Identifier	initFunc_dyn_stats		39403	0					
ANR	39609	ArgumentList	func		39403	1					
ANR	39610	Argument	func		39403	0					
ANR	39611	Identifier	func		39403	0					
ANR	39612	BreakStatement	break ;	4393:4:116441:116446	39403	15	True				
ANR	39613	Label	default :	4394:3:116451:116458	39403	16	True				
ANR	39614	Identifier	default		39403	0					
ANR	39615	BreakStatement	break ;	4394:11:116459:116464	39403	17	True				
ANR	39616	ReturnStatement	return func ;	4397:1:116474:116485	39403	7	True				
ANR	39617	Identifier	func		39403	0					
ANR	39618	ReturnType	struct cnffunc *		39403	1					
ANR	39619	Identifier	cnffuncNew		39403	2					
ANR	39620	ParameterList	"es_str_t * fname , struct cnffparamlst * paramlst"		39403	3					
ANR	39621	Parameter	es_str_t * fname	4348:11:115156:115170	39403	0	True				
ANR	39622	ParameterType	es_str_t *		39403	0					
ANR	39623	Identifier	fname		39403	1					
ANR	39624	Parameter	struct cnffparamlst * paramlst	4348:28:115173:115201	39403	1	True				
ANR	39625	ParameterType	struct cnffparamlst *		39403	0					
ANR	39626	Identifier	paramlst		39403	1					
ANR	39627	CFGEntryNode	ENTRY		39403		True				
ANR	39628	CFGExitNode	EXIT		39403		True				
ANR	39629	Symbol	fname		39403						
ANR	39630	Symbol	malloc		39403						
ANR	39631	Symbol	NULL		39403						
ANR	39632	Symbol	* func		39403						
ANR	39633	Symbol	func -> funcdata		39403						
ANR	39634	Symbol	toDel		39403						
ANR	39635	Symbol	* * func		39403						
ANR	39636	Symbol	i		39403						
ANR	39637	Symbol	nParams		39403						
ANR	39638	Symbol	* func -> expr		39403						
ANR	39639	Symbol	* param		39403						
ANR	39640	Symbol	paramlst		39403						
ANR	39641	Symbol	func -> nodetype		39403						
ANR	39642	Symbol	* i		39403						
ANR	39643	Symbol	func		39403						
ANR	39644	Symbol	param		39403						
ANR	39645	Symbol	funcName2ID		39403						
ANR	39646	Symbol	func -> expr		39403						
ANR	39647	Symbol	func -> fID		39403						
ANR	39648	Symbol	param -> next		39403						
ANR	39649	Symbol	func -> destructable_funcdata		39403						
ANR	39650	Symbol	func -> fname		39403						
ANR	39651	Symbol	func -> nParams		39403						
ANR	39652	Symbol	param -> expr		39403						
ANR	39653	Function	cnffuncNew_prifilt	4404:0:116580:117161							
ANR	39654	FunctionDef	cnffuncNew_prifilt (int fac)		39653	0					
ANR	39655	CompoundStatement		4406:0:116625:117161	39653	0					
ANR	39656	IdentifierDeclStatement	struct cnffunc * func ;	4407:1:116628:116648	39653	0	True				
ANR	39657	IdentifierDecl	* func		39653	0					
ANR	39658	IdentifierDeclType	struct cnffunc *		39653	0					
ANR	39659	Identifier	func		39653	1					
ANR	39660	ExpressionStatement	fac >>= 3	4409:1:116652:116661	39653	1	True				
ANR	39661	AssignmentExpression	fac >>= 3		39653	0		>>=			
ANR	39662	Identifier	fac		39653	0					
ANR	39663	PrimaryExpression	3		39653	1					
ANR	39664	IfStatement	if ( fac >= LOG_NFACILITIES + 1 || fac < 0 )		39653	2					
ANR	39665	Condition	fac >= LOG_NFACILITIES + 1 || fac < 0	4410:5:116668:116704	39653	0	True				
ANR	39666	OrExpression	fac >= LOG_NFACILITIES + 1 || fac < 0		39653	0		||			
ANR	39667	RelationalExpression	fac >= LOG_NFACILITIES + 1		39653	0		>=			
ANR	39668	Identifier	fac		39653	0					
ANR	39669	AdditiveExpression	LOG_NFACILITIES + 1		39653	1		+			
ANR	39670	Identifier	LOG_NFACILITIES		39653	0					
ANR	39671	PrimaryExpression	1		39653	1					
ANR	39672	RelationalExpression	fac < 0		39653	1		<			
ANR	39673	Identifier	fac		39653	0					
ANR	39674	PrimaryExpression	0		39653	1					
ANR	39675	ReturnStatement	return NULL ;	4411:2:116709:116720	39653	1	True				
ANR	39676	Identifier	NULL		39653	0					
ANR	39677	IfStatement	if ( ( func = malloc ( sizeof ( struct cnffunc ) ) ) != NULL )		39653	3					
ANR	39678	Condition	( func = malloc ( sizeof ( struct cnffunc ) ) ) != NULL	4413:4:116727:116773	39653	0	True				
ANR	39679	EqualityExpression	( func = malloc ( sizeof ( struct cnffunc ) ) ) != NULL		39653	0		!=			
ANR	39680	AssignmentExpression	func = malloc ( sizeof ( struct cnffunc ) )		39653	0		=			
ANR	39681	Identifier	func		39653	0					
ANR	39682	CallExpression	malloc ( sizeof ( struct cnffunc ) )		39653	1					
ANR	39683	Callee	malloc		39653	0					
ANR	39684	Identifier	malloc		39653	0					
ANR	39685	ArgumentList	sizeof ( struct cnffunc )		39653	1					
ANR	39686	Argument	sizeof ( struct cnffunc )		39653	0					
ANR	39687	SizeofExpression	sizeof ( struct cnffunc )		39653	0					
ANR	39688	Sizeof	sizeof		39653	0					
ANR	39689	SizeofOperand	struct cnffunc		39653	1					
ANR	39690	Identifier	NULL		39653	1					
ANR	39691	CompoundStatement		8:53:150:150	39653	1					
ANR	39692	IfStatement	"if ( ( func -> funcdata = calloc ( 1 , sizeof ( struct funcData_prifilt ) ) ) == NULL )"		39653	0					
ANR	39693	Condition	"( func -> funcdata = calloc ( 1 , sizeof ( struct funcData_prifilt ) ) ) == NULL"	4414:6:116784:116852	39653	0	True				
ANR	39694	EqualityExpression	"( func -> funcdata = calloc ( 1 , sizeof ( struct funcData_prifilt ) ) ) == NULL"		39653	0		==			
ANR	39695	AssignmentExpression	"func -> funcdata = calloc ( 1 , sizeof ( struct funcData_prifilt ) )"		39653	0		=			
ANR	39696	PtrMemberAccess	func -> funcdata		39653	0					
ANR	39697	Identifier	func		39653	0					
ANR	39698	Identifier	funcdata		39653	1					
ANR	39699	CallExpression	"calloc ( 1 , sizeof ( struct funcData_prifilt ) )"		39653	1					
ANR	39700	Callee	calloc		39653	0					
ANR	39701	Identifier	calloc		39653	0					
ANR	39702	ArgumentList	1		39653	1					
ANR	39703	Argument	1		39653	0					
ANR	39704	PrimaryExpression	1		39653	0					
ANR	39705	Argument	sizeof ( struct funcData_prifilt )		39653	1					
ANR	39706	SizeofExpression	sizeof ( struct funcData_prifilt )		39653	0					
ANR	39707	Sizeof	sizeof		39653	0					
ANR	39708	SizeofOperand	struct funcData_prifilt		39653	1					
ANR	39709	Identifier	NULL		39653	1					
ANR	39710	CompoundStatement		9:77:229:229	39653	1					
ANR	39711	ExpressionStatement	free ( func )	4415:3:116860:116870	39653	0	True				
ANR	39712	CallExpression	free ( func )		39653	0					
ANR	39713	Callee	free		39653	0					
ANR	39714	Identifier	free		39653	0					
ANR	39715	ArgumentList	func		39653	1					
ANR	39716	Argument	func		39653	0					
ANR	39717	Identifier	func		39653	0					
ANR	39718	ReturnStatement	return NULL ;	4416:3:116875:116886	39653	1	True				
ANR	39719	Identifier	NULL		39653	0					
ANR	39720	ExpressionStatement	func -> nodetype = 'F'	4418:2:116894:116914	39653	1	True				
ANR	39721	AssignmentExpression	func -> nodetype = 'F'		39653	0		=			
ANR	39722	PtrMemberAccess	func -> nodetype		39653	0					
ANR	39723	Identifier	func		39653	0					
ANR	39724	Identifier	nodetype		39653	1					
ANR	39725	PrimaryExpression	'F'		39653	1					
ANR	39726	ExpressionStatement	"func -> fname = es_newStrFromCStr ( ""prifilt"" , sizeof ( ""prifilt"" ) - 1 )"	4419:2:116918:116981	39653	2	True				
ANR	39727	AssignmentExpression	"func -> fname = es_newStrFromCStr ( ""prifilt"" , sizeof ( ""prifilt"" ) - 1 )"		39653	0		=			
ANR	39728	PtrMemberAccess	func -> fname		39653	0					
ANR	39729	Identifier	func		39653	0					
ANR	39730	Identifier	fname		39653	1					
ANR	39731	CallExpression	"es_newStrFromCStr ( ""prifilt"" , sizeof ( ""prifilt"" ) - 1 )"		39653	1					
ANR	39732	Callee	es_newStrFromCStr		39653	0					
ANR	39733	Identifier	es_newStrFromCStr		39653	0					
ANR	39734	ArgumentList	"""prifilt"""		39653	1					
ANR	39735	Argument	"""prifilt"""		39653	0					
ANR	39736	PrimaryExpression	"""prifilt"""		39653	0					
ANR	39737	Argument	"sizeof ( ""prifilt"" ) - 1"		39653	1					
ANR	39738	AdditiveExpression	"sizeof ( ""prifilt"" ) - 1"		39653	0		-			
ANR	39739	SizeofExpression	"sizeof ( ""prifilt"" )"		39653	0					
ANR	39740	Sizeof	sizeof		39653	0					
ANR	39741	PrimaryExpression	"""prifilt"""		39653	1					
ANR	39742	PrimaryExpression	1		39653	1					
ANR	39743	ExpressionStatement	func -> nParams = 0	4420:2:116985:117002	39653	3	True				
ANR	39744	AssignmentExpression	func -> nParams = 0		39653	0		=			
ANR	39745	PtrMemberAccess	func -> nParams		39653	0					
ANR	39746	Identifier	func		39653	0					
ANR	39747	Identifier	nParams		39653	1					
ANR	39748	PrimaryExpression	0		39653	1					
ANR	39749	ExpressionStatement	func -> fID = CNFFUNC_PRIFILT	4421:2:117006:117033	39653	4	True				
ANR	39750	AssignmentExpression	func -> fID = CNFFUNC_PRIFILT		39653	0		=			
ANR	39751	PtrMemberAccess	func -> fID		39653	0					
ANR	39752	Identifier	func		39653	0					
ANR	39753	Identifier	fID		39653	1					
ANR	39754	Identifier	CNFFUNC_PRIFILT		39653	1					
ANR	39755	ExpressionStatement	func -> destructable_funcdata = 1	4422:2:117037:117068	39653	5	True				
ANR	39756	AssignmentExpression	func -> destructable_funcdata = 1		39653	0		=			
ANR	39757	PtrMemberAccess	func -> destructable_funcdata		39653	0					
ANR	39758	Identifier	func		39653	0					
ANR	39759	Identifier	destructable_funcdata		39653	1					
ANR	39760	PrimaryExpression	1		39653	1					
ANR	39761	ExpressionStatement	( ( struct funcData_prifilt * ) func -> funcdata ) -> pmask [ fac ] = TABLE_ALLPRI	4423:2:117072:117142	39653	6	True				
ANR	39762	AssignmentExpression	( ( struct funcData_prifilt * ) func -> funcdata ) -> pmask [ fac ] = TABLE_ALLPRI		39653	0		=			
ANR	39763	ArrayIndexing	( ( struct funcData_prifilt * ) func -> funcdata ) -> pmask [ fac ]		39653	0					
ANR	39764	PtrMemberAccess	( ( struct funcData_prifilt * ) func -> funcdata ) -> pmask		39653	0					
ANR	39765	CastExpression	( struct funcData_prifilt * ) func -> funcdata		39653	0					
ANR	39766	CastTarget	struct funcData_prifilt *		39653	0					
ANR	39767	PtrMemberAccess	func -> funcdata		39653	1					
ANR	39768	Identifier	func		39653	0					
ANR	39769	Identifier	funcdata		39653	1					
ANR	39770	Identifier	pmask		39653	1					
ANR	39771	Identifier	fac		39653	1					
ANR	39772	Identifier	TABLE_ALLPRI		39653	1					
ANR	39773	ReturnStatement	return func ;	4425:1:117148:117159	39653	4	True				
ANR	39774	Identifier	func		39653	0					
ANR	39775	ReturnType	struct cnffunc *		39653	1					
ANR	39776	Identifier	cnffuncNew_prifilt		39653	2					
ANR	39777	ParameterList	int fac		39653	3					
ANR	39778	Parameter	int fac	4405:19:116616:116622	39653	0	True				
ANR	39779	ParameterType	int		39653	0					
ANR	39780	Identifier	fac		39653	1					
ANR	39781	CFGEntryNode	ENTRY		39653		True				
ANR	39782	CFGExitNode	EXIT		39653		True				
ANR	39783	Symbol	malloc		39653						
ANR	39784	Symbol	NULL		39653						
ANR	39785	Symbol	func -> funcdata		39653						
ANR	39786	Symbol	* func		39653						
ANR	39787	Symbol	* * func -> funcdata		39653						
ANR	39788	Symbol	CNFFUNC_PRIFILT		39653						
ANR	39789	Symbol	* func -> funcdata		39653						
ANR	39790	Symbol	* * func		39653						
ANR	39791	Symbol	es_newStrFromCStr		39653						
ANR	39792	Symbol	fac		39653						
ANR	39793	Symbol	calloc		39653						
ANR	39794	Symbol	( ( struct funcData_prifilt * ) func -> funcdata ) -> pmask		39653						
ANR	39795	Symbol	TABLE_ALLPRI		39653						
ANR	39796	Symbol	* fac		39653						
ANR	39797	Symbol	func -> nodetype		39653						
ANR	39798	Symbol	func		39653						
ANR	39799	Symbol	* * * func		39653						
ANR	39800	Symbol	* ( ( struct funcData_prifilt * ) func -> funcdata ) -> pmask		39653						
ANR	39801	Symbol	LOG_NFACILITIES		39653						
ANR	39802	Symbol	func -> fID		39653						
ANR	39803	Symbol	func -> destructable_funcdata		39653						
ANR	39804	Symbol	func -> fname		39653						
ANR	39805	Symbol	func -> nParams		39653						
ANR	39806	Function	cnfDoInclude	4432:0:117307:119698							
ANR	39807	FunctionDef	cnfDoInclude (char * name)		39806	0					
ANR	39808	CompoundStatement		4434:0:117336:119698	39806	0					
ANR	39809	IdentifierDeclStatement	char * cfgFile ;	4435:1:117339:117352	39806	0	True				
ANR	39810	IdentifierDecl	* cfgFile		39806	0					
ANR	39811	IdentifierDeclType	char *		39806	0					
ANR	39812	Identifier	cfgFile		39806	1					
ANR	39813	IdentifierDeclStatement	char * finalName ;	4436:1:117355:117370	39806	1	True				
ANR	39814	IdentifierDecl	* finalName		39806	0					
ANR	39815	IdentifierDeclType	char *		39806	0					
ANR	39816	Identifier	finalName		39806	1					
ANR	39817	IdentifierDeclStatement	int i ;	4437:1:117373:117378	39806	2	True				
ANR	39818	IdentifierDecl	i		39806	0					
ANR	39819	IdentifierDeclType	int		39806	0					
ANR	39820	Identifier	i		39806	1					
ANR	39821	IdentifierDeclStatement	int result ;	4438:1:117381:117391	39806	3	True				
ANR	39822	IdentifierDecl	result		39806	0					
ANR	39823	IdentifierDeclType	int		39806	0					
ANR	39824	Identifier	result		39806	1					
ANR	39825	IdentifierDeclStatement	glob_t cfgFiles ;	4439:1:117394:117409	39806	4	True				
ANR	39826	IdentifierDecl	cfgFiles		39806	0					
ANR	39827	IdentifierDeclType	glob_t		39806	0					
ANR	39828	Identifier	cfgFiles		39806	1					
ANR	39829	IdentifierDeclStatement	struct stat fileInfo ;	4440:1:117412:117432	39806	5	True				
ANR	39830	IdentifierDecl	fileInfo		39806	0					
ANR	39831	IdentifierDeclType	struct stat		39806	0					
ANR	39832	Identifier	fileInfo		39806	1					
ANR	39833	IdentifierDeclStatement	char nameBuf [ MAXFNAME + 1 ] ;	4441:1:117435:117459	39806	6	True				
ANR	39834	IdentifierDecl	nameBuf [ MAXFNAME + 1 ]		39806	0					
ANR	39835	IdentifierDeclType	char [ MAXFNAME + 1 ]		39806	0					
ANR	39836	Identifier	nameBuf		39806	1					
ANR	39837	AdditiveExpression	MAXFNAME + 1		39806	2		+			
ANR	39838	Identifier	MAXFNAME		39806	0					
ANR	39839	PrimaryExpression	1		39806	1					
ANR	39840	IdentifierDeclStatement	char cwdBuf [ MAXFNAME + 1 ] ;	4442:1:117462:117485	39806	7	True				
ANR	39841	IdentifierDecl	cwdBuf [ MAXFNAME + 1 ]		39806	0					
ANR	39842	IdentifierDeclType	char [ MAXFNAME + 1 ]		39806	0					
ANR	39843	Identifier	cwdBuf		39806	1					
ANR	39844	AdditiveExpression	MAXFNAME + 1		39806	2		+			
ANR	39845	Identifier	MAXFNAME		39806	0					
ANR	39846	PrimaryExpression	1		39806	1					
ANR	39847	ExpressionStatement	finalName = name	4444:1:117489:117505	39806	8	True				
ANR	39848	AssignmentExpression	finalName = name		39806	0		=			
ANR	39849	Identifier	finalName		39806	0					
ANR	39850	Identifier	name		39806	1					
ANR	39851	IfStatement	"if ( stat ( name , & fileInfo ) == 0 )"		39806	9					
ANR	39852	Condition	"stat ( name , & fileInfo ) == 0"	4445:4:117511:117536	39806	0	True				
ANR	39853	EqualityExpression	"stat ( name , & fileInfo ) == 0"		39806	0		==			
ANR	39854	CallExpression	"stat ( name , & fileInfo )"		39806	0					
ANR	39855	Callee	stat		39806	0					
ANR	39856	Identifier	stat		39806	0					
ANR	39857	ArgumentList	name		39806	1					
ANR	39858	Argument	name		39806	0					
ANR	39859	Identifier	name		39806	0					
ANR	39860	Argument	& fileInfo		39806	1					
ANR	39861	UnaryOperationExpression	& fileInfo		39806	0					
ANR	39862	UnaryOperator	&		39806	0					
ANR	39863	Identifier	fileInfo		39806	1					
ANR	39864	PrimaryExpression	0		39806	1					
ANR	39865	CompoundStatement		12:32:202:202	39806	1					
ANR	39866	IfStatement	if ( S_ISDIR ( fileInfo . st_mode ) )		39806	0					
ANR	39867	Condition	S_ISDIR ( fileInfo . st_mode )	4447:5:117630:117654	39806	0	True				
ANR	39868	CallExpression	S_ISDIR ( fileInfo . st_mode )		39806	0					
ANR	39869	Callee	S_ISDIR		39806	0					
ANR	39870	Identifier	S_ISDIR		39806	0					
ANR	39871	ArgumentList	fileInfo . st_mode		39806	1					
ANR	39872	Argument	fileInfo . st_mode		39806	0					
ANR	39873	MemberAccess	fileInfo . st_mode		39806	0					
ANR	39874	Identifier	fileInfo		39806	0					
ANR	39875	Identifier	st_mode		39806	1					
ANR	39876	CompoundStatement		14:32:320:320	39806	1					
ANR	39877	ExpressionStatement	"snprintf ( nameBuf , sizeof ( nameBuf ) , ""%s*"" , name )"	4449:3:117731:117778	39806	0	True				
ANR	39878	CallExpression	"snprintf ( nameBuf , sizeof ( nameBuf ) , ""%s*"" , name )"		39806	0					
ANR	39879	Callee	snprintf		39806	0					
ANR	39880	Identifier	snprintf		39806	0					
ANR	39881	ArgumentList	nameBuf		39806	1					
ANR	39882	Argument	nameBuf		39806	0					
ANR	39883	Identifier	nameBuf		39806	0					
ANR	39884	Argument	sizeof ( nameBuf )		39806	1					
ANR	39885	SizeofExpression	sizeof ( nameBuf )		39806	0					
ANR	39886	Sizeof	sizeof		39806	0					
ANR	39887	SizeofOperand	nameBuf		39806	1					
ANR	39888	Argument	"""%s*"""		39806	2					
ANR	39889	PrimaryExpression	"""%s*"""		39806	0					
ANR	39890	Argument	name		39806	3					
ANR	39891	Identifier	name		39806	0					
ANR	39892	ExpressionStatement	finalName = nameBuf	4450:3:117783:117802	39806	1	True				
ANR	39893	AssignmentExpression	finalName = nameBuf		39806	0		=			
ANR	39894	Identifier	finalName		39806	0					
ANR	39895	Identifier	nameBuf		39806	1					
ANR	39896	ExpressionStatement	"result = glob ( finalName , GLOB_MARK | GLOB_NOMAGIC , NULL , & cfgFiles )"	4458:1:118019:118086	39806	10	True				
ANR	39897	AssignmentExpression	"result = glob ( finalName , GLOB_MARK | GLOB_NOMAGIC , NULL , & cfgFiles )"		39806	0		=			
ANR	39898	Identifier	result		39806	0					
ANR	39899	CallExpression	"glob ( finalName , GLOB_MARK | GLOB_NOMAGIC , NULL , & cfgFiles )"		39806	1					
ANR	39900	Callee	glob		39806	0					
ANR	39901	Identifier	glob		39806	0					
ANR	39902	ArgumentList	finalName		39806	1					
ANR	39903	Argument	finalName		39806	0					
ANR	39904	Identifier	finalName		39806	0					
ANR	39905	Argument	GLOB_MARK | GLOB_NOMAGIC		39806	1					
ANR	39906	InclusiveOrExpression	GLOB_MARK | GLOB_NOMAGIC		39806	0		|			
ANR	39907	Identifier	GLOB_MARK		39806	0					
ANR	39908	Identifier	GLOB_NOMAGIC		39806	1					
ANR	39909	Argument	NULL		39806	2					
ANR	39910	Identifier	NULL		39806	0					
ANR	39911	Argument	& cfgFiles		39806	3					
ANR	39912	UnaryOperationExpression	& cfgFiles		39806	0					
ANR	39913	UnaryOperator	&		39806	0					
ANR	39914	Identifier	cfgFiles		39806	1					
ANR	39915	IfStatement	if ( result == GLOB_NOMATCH )		39806	11					
ANR	39916	Condition	result == GLOB_NOMATCH	4459:4:118092:118113	39806	0	True				
ANR	39917	EqualityExpression	result == GLOB_NOMATCH		39806	0		==			
ANR	39918	Identifier	result		39806	0					
ANR	39919	Identifier	GLOB_NOMATCH		39806	1					
ANR	39920	CompoundStatement		26:28:779:779	39806	1					
ANR	39921	ReturnStatement	return 0 ;	4464:8:118286:118294	39806	0	True				
ANR	39922	PrimaryExpression	0		39806	0					
ANR	39923	IfStatement	if ( result == GLOB_NOSPACE || result == GLOB_ABORTED )		39806	12					
ANR	39924	Condition	result == GLOB_NOSPACE || result == GLOB_ABORTED	4467:4:118307:118354	39806	0	True				
ANR	39925	OrExpression	result == GLOB_NOSPACE || result == GLOB_ABORTED		39806	0		||			
ANR	39926	EqualityExpression	result == GLOB_NOSPACE		39806	0		==			
ANR	39927	Identifier	result		39806	0					
ANR	39928	Identifier	GLOB_NOSPACE		39806	1					
ANR	39929	EqualityExpression	result == GLOB_ABORTED		39806	1		==			
ANR	39930	Identifier	result		39806	0					
ANR	39931	Identifier	GLOB_ABORTED		39806	1					
ANR	39932	CompoundStatement		35:2:1024:1041	39806	1					
ANR	39933	IdentifierDeclStatement	char errStr [ 1024 ] ;	4468:2:118361:118378	39806	0	True				
ANR	39934	IdentifierDecl	errStr [ 1024 ]		39806	0					
ANR	39935	IdentifierDeclType	char [ 1024 ]		39806	0					
ANR	39936	Identifier	errStr		39806	1					
ANR	39937	PrimaryExpression	1024		39806	2					
ANR	39938	ExpressionStatement	"rs_strerror_r ( errno , errStr , sizeof ( errStr ) )"	4469:2:118382:118426	39806	1	True				
ANR	39939	CallExpression	"rs_strerror_r ( errno , errStr , sizeof ( errStr ) )"		39806	0					
ANR	39940	Callee	rs_strerror_r		39806	0					
ANR	39941	Identifier	rs_strerror_r		39806	0					
ANR	39942	ArgumentList	errno		39806	1					
ANR	39943	Argument	errno		39806	0					
ANR	39944	Identifier	errno		39806	0					
ANR	39945	Argument	errStr		39806	1					
ANR	39946	Identifier	errStr		39806	0					
ANR	39947	Argument	sizeof ( errStr )		39806	2					
ANR	39948	SizeofExpression	sizeof ( errStr )		39806	0					
ANR	39949	Sizeof	sizeof		39806	0					
ANR	39950	SizeofOperand	errStr		39806	1					
ANR	39951	IfStatement	"if ( getcwd ( cwdBuf , sizeof ( cwdBuf ) ) == NULL )"		39806	2					
ANR	39952	Condition	"getcwd ( cwdBuf , sizeof ( cwdBuf ) ) == NULL"	4470:5:118433:118470	39806	0	True				
ANR	39953	EqualityExpression	"getcwd ( cwdBuf , sizeof ( cwdBuf ) ) == NULL"		39806	0		==			
ANR	39954	CallExpression	"getcwd ( cwdBuf , sizeof ( cwdBuf ) )"		39806	0					
ANR	39955	Callee	getcwd		39806	0					
ANR	39956	Identifier	getcwd		39806	0					
ANR	39957	ArgumentList	cwdBuf		39806	1					
ANR	39958	Argument	cwdBuf		39806	0					
ANR	39959	Identifier	cwdBuf		39806	0					
ANR	39960	Argument	sizeof ( cwdBuf )		39806	1					
ANR	39961	SizeofExpression	sizeof ( cwdBuf )		39806	0					
ANR	39962	Sizeof	sizeof		39806	0					
ANR	39963	SizeofOperand	cwdBuf		39806	1					
ANR	39964	Identifier	NULL		39806	1					
ANR	39965	ExpressionStatement	"strcpy ( cwdBuf , ""??getcwd() failed??"" )"	4471:3:118476:118513	39806	1	True				
ANR	39966	CallExpression	"strcpy ( cwdBuf , ""??getcwd() failed??"" )"		39806	0					
ANR	39967	Callee	strcpy		39806	0					
ANR	39968	Identifier	strcpy		39806	0					
ANR	39969	ArgumentList	cwdBuf		39806	1					
ANR	39970	Argument	cwdBuf		39806	0					
ANR	39971	Identifier	cwdBuf		39806	0					
ANR	39972	Argument	"""??getcwd() failed??"""		39806	1					
ANR	39973	PrimaryExpression	"""??getcwd() failed??"""		39806	0					
ANR	39974	ExpressionStatement	"parser_errmsg ( ""error accessing config file or directory '%s' [cwd:%s]: %s"" , finalName , cwdBuf , errStr )"	4472:2:118517:118623	39806	3	True				
ANR	39975	CallExpression	"parser_errmsg ( ""error accessing config file or directory '%s' [cwd:%s]: %s"" , finalName , cwdBuf , errStr )"		39806	0					
ANR	39976	Callee	parser_errmsg		39806	0					
ANR	39977	Identifier	parser_errmsg		39806	0					
ANR	39978	ArgumentList	"""error accessing config file or directory '%s' [cwd:%s]: %s"""		39806	1					
ANR	39979	Argument	"""error accessing config file or directory '%s' [cwd:%s]: %s"""		39806	0					
ANR	39980	PrimaryExpression	"""error accessing config file or directory '%s' [cwd:%s]: %s"""		39806	0					
ANR	39981	Argument	finalName		39806	1					
ANR	39982	Identifier	finalName		39806	0					
ANR	39983	Argument	cwdBuf		39806	2					
ANR	39984	Identifier	cwdBuf		39806	0					
ANR	39985	Argument	errStr		39806	3					
ANR	39986	Identifier	errStr		39806	0					
ANR	39987	ReturnStatement	return 1 ;	4474:2:118627:118635	39806	4	True				
ANR	39988	PrimaryExpression	1		39806	0					
ANR	39989	ForStatement	for ( i = cfgFiles . gl_pathc - 1 ; i >= 0 ; i -- )		39806	13					
ANR	39990	ForInit	i = cfgFiles . gl_pathc - 1 ;	4482:5:118856:118881	39806	0	True				
ANR	39991	AssignmentExpression	i = cfgFiles . gl_pathc - 1		39806	0		=			
ANR	39992	Identifier	i		39806	0					
ANR	39993	AdditiveExpression	cfgFiles . gl_pathc - 1		39806	1		-			
ANR	39994	MemberAccess	cfgFiles . gl_pathc		39806	0					
ANR	39995	Identifier	cfgFiles		39806	0					
ANR	39996	Identifier	gl_pathc		39806	1					
ANR	39997	PrimaryExpression	1		39806	1					
ANR	39998	Condition	i >= 0	4482:32:118883:118888	39806	1	True				
ANR	39999	RelationalExpression	i >= 0		39806	0		>=			
ANR	40000	Identifier	i		39806	0					
ANR	40001	PrimaryExpression	0		39806	1					
ANR	40002	PostIncDecOperationExpression	i --	4482:41:118892:118894	39806	2	True				
ANR	40003	Identifier	i		39806	0					
ANR	40004	IncDec	--		39806	1					
ANR	40005	CompoundStatement		49:46:1560:1560	39806	3					
ANR	40006	ExpressionStatement	cfgFile = cfgFiles . gl_pathv [ i ]	4483:2:118901:118931	39806	0	True				
ANR	40007	AssignmentExpression	cfgFile = cfgFiles . gl_pathv [ i ]		39806	0		=			
ANR	40008	Identifier	cfgFile		39806	0					
ANR	40009	ArrayIndexing	cfgFiles . gl_pathv [ i ]		39806	1					
ANR	40010	MemberAccess	cfgFiles . gl_pathv		39806	0					
ANR	40011	Identifier	cfgFiles		39806	0					
ANR	40012	Identifier	gl_pathv		39806	1					
ANR	40013	Identifier	i		39806	1					
ANR	40014	IfStatement	"if ( stat ( cfgFile , & fileInfo ) != 0 )"		39806	1					
ANR	40015	Condition	"stat ( cfgFile , & fileInfo ) != 0"	4484:5:118938:118966	39806	0	True				
ANR	40016	EqualityExpression	"stat ( cfgFile , & fileInfo ) != 0"		39806	0		!=			
ANR	40017	CallExpression	"stat ( cfgFile , & fileInfo )"		39806	0					
ANR	40018	Callee	stat		39806	0					
ANR	40019	Identifier	stat		39806	0					
ANR	40020	ArgumentList	cfgFile		39806	1					
ANR	40021	Argument	cfgFile		39806	0					
ANR	40022	Identifier	cfgFile		39806	0					
ANR	40023	Argument	& fileInfo		39806	1					
ANR	40024	UnaryOperationExpression	& fileInfo		39806	0					
ANR	40025	UnaryOperator	&		39806	0					
ANR	40026	Identifier	fileInfo		39806	1					
ANR	40027	PrimaryExpression	0		39806	1					
ANR	40028	CompoundStatement		52:3:1637:1654	39806	1					
ANR	40029	IdentifierDeclStatement	char errStr [ 1024 ] ;	4485:3:118974:118991	39806	0	True				
ANR	40030	IdentifierDecl	errStr [ 1024 ]		39806	0					
ANR	40031	IdentifierDeclType	char [ 1024 ]		39806	0					
ANR	40032	Identifier	errStr		39806	1					
ANR	40033	PrimaryExpression	1024		39806	2					
ANR	40034	ExpressionStatement	"rs_strerror_r ( errno , errStr , sizeof ( errStr ) )"	4486:3:118996:119040	39806	1	True				
ANR	40035	CallExpression	"rs_strerror_r ( errno , errStr , sizeof ( errStr ) )"		39806	0					
ANR	40036	Callee	rs_strerror_r		39806	0					
ANR	40037	Identifier	rs_strerror_r		39806	0					
ANR	40038	ArgumentList	errno		39806	1					
ANR	40039	Argument	errno		39806	0					
ANR	40040	Identifier	errno		39806	0					
ANR	40041	Argument	errStr		39806	1					
ANR	40042	Identifier	errStr		39806	0					
ANR	40043	Argument	sizeof ( errStr )		39806	2					
ANR	40044	SizeofExpression	sizeof ( errStr )		39806	0					
ANR	40045	Sizeof	sizeof		39806	0					
ANR	40046	SizeofOperand	errStr		39806	1					
ANR	40047	IfStatement	"if ( getcwd ( cwdBuf , sizeof ( cwdBuf ) ) == NULL )"		39806	2					
ANR	40048	Condition	"getcwd ( cwdBuf , sizeof ( cwdBuf ) ) == NULL"	4487:6:119048:119085	39806	0	True				
ANR	40049	EqualityExpression	"getcwd ( cwdBuf , sizeof ( cwdBuf ) ) == NULL"		39806	0		==			
ANR	40050	CallExpression	"getcwd ( cwdBuf , sizeof ( cwdBuf ) )"		39806	0					
ANR	40051	Callee	getcwd		39806	0					
ANR	40052	Identifier	getcwd		39806	0					
ANR	40053	ArgumentList	cwdBuf		39806	1					
ANR	40054	Argument	cwdBuf		39806	0					
ANR	40055	Identifier	cwdBuf		39806	0					
ANR	40056	Argument	sizeof ( cwdBuf )		39806	1					
ANR	40057	SizeofExpression	sizeof ( cwdBuf )		39806	0					
ANR	40058	Sizeof	sizeof		39806	0					
ANR	40059	SizeofOperand	cwdBuf		39806	1					
ANR	40060	Identifier	NULL		39806	1					
ANR	40061	ExpressionStatement	"strcpy ( cwdBuf , ""??getcwd() failed??"" )"	4488:4:119092:119129	39806	1	True				
ANR	40062	CallExpression	"strcpy ( cwdBuf , ""??getcwd() failed??"" )"		39806	0					
ANR	40063	Callee	strcpy		39806	0					
ANR	40064	Identifier	strcpy		39806	0					
ANR	40065	ArgumentList	cwdBuf		39806	1					
ANR	40066	Argument	cwdBuf		39806	0					
ANR	40067	Identifier	cwdBuf		39806	0					
ANR	40068	Argument	"""??getcwd() failed??"""		39806	1					
ANR	40069	PrimaryExpression	"""??getcwd() failed??"""		39806	0					
ANR	40070	Statement	parser_errmsg	4489:3:119134:119146	39806	3	True				
ANR	40071	Statement	(	4489:16:119147:119147	39806	4	True				
ANR	40072	Statement	"""error accessing config file or directory '%s' """	4489:17:119148:119195	39806	5	True				
ANR	40073	Statement	"""[cwd: %s]: %s"""	4490:5:119202:119216	39806	6	True				
ANR	40074	Statement	","	4490:20:119217:119217	39806	7	True				
ANR	40075	Statement	cfgFile	4490:22:119219:119225	39806	8	True				
ANR	40076	Statement	","	4490:29:119226:119226	39806	9	True				
ANR	40077	Statement	cwdBuf	4490:31:119228:119233	39806	10	True				
ANR	40078	Statement	","	4490:37:119234:119234	39806	11	True				
ANR	40079	Statement	errStr	4490:39:119236:119241	39806	12	True				
ANR	40080	Statement	)	4490:45:119242:119242	39806	13	True				
ANR	40081	ExpressionStatement		4490:46:119243:119243	39806	14	True				
ANR	40082	ReturnStatement	return 1 ;	4491:3:119248:119256	39806	15	True				
ANR	40083	PrimaryExpression	1		39806	0					
ANR	40084	IfStatement	if ( S_ISREG ( fileInfo . st_mode ) )		39806	2					
ANR	40085	Condition	S_ISREG ( fileInfo . st_mode )	4494:5:119268:119292	39806	0	True				
ANR	40086	CallExpression	S_ISREG ( fileInfo . st_mode )		39806	0					
ANR	40087	Callee	S_ISREG		39806	0					
ANR	40088	Identifier	S_ISREG		39806	0					
ANR	40089	ArgumentList	fileInfo . st_mode		39806	1					
ANR	40090	Argument	fileInfo . st_mode		39806	0					
ANR	40091	MemberAccess	fileInfo . st_mode		39806	0					
ANR	40092	Identifier	fileInfo		39806	0					
ANR	40093	Identifier	st_mode		39806	1					
ANR	40094	CompoundStatement		61:32:1958:1958	39806	1					
ANR	40095	ExpressionStatement	"DBGPRINTF ( ""requested to include config file '%s'\\n"" , cfgFile )"	4495:3:119318:119379	39806	0	True				
ANR	40096	CallExpression	"DBGPRINTF ( ""requested to include config file '%s'\\n"" , cfgFile )"		39806	0					
ANR	40097	Callee	DBGPRINTF		39806	0					
ANR	40098	Identifier	DBGPRINTF		39806	0					
ANR	40099	ArgumentList	"""requested to include config file '%s'\\n"""		39806	1					
ANR	40100	Argument	"""requested to include config file '%s'\\n"""		39806	0					
ANR	40101	PrimaryExpression	"""requested to include config file '%s'\\n"""		39806	0					
ANR	40102	Argument	cfgFile		39806	1					
ANR	40103	Identifier	cfgFile		39806	0					
ANR	40104	ExpressionStatement	cnfSetLexFile ( cfgFile )	4496:3:119384:119406	39806	1	True				
ANR	40105	CallExpression	cnfSetLexFile ( cfgFile )		39806	0					
ANR	40106	Callee	cnfSetLexFile		39806	0					
ANR	40107	Identifier	cnfSetLexFile		39806	0					
ANR	40108	ArgumentList	cfgFile		39806	1					
ANR	40109	Argument	cfgFile		39806	0					
ANR	40110	Identifier	cfgFile		39806	0					
ANR	40111	ElseStatement	else		39806	0					
ANR	40112	IfStatement	if ( S_ISDIR ( fileInfo . st_mode ) )		39806	0					
ANR	40113	Condition	S_ISDIR ( fileInfo . st_mode )	4497:12:119420:119444	39806	0	True				
ANR	40114	CallExpression	S_ISDIR ( fileInfo . st_mode )		39806	0					
ANR	40115	Callee	S_ISDIR		39806	0					
ANR	40116	Identifier	S_ISDIR		39806	0					
ANR	40117	ArgumentList	fileInfo . st_mode		39806	1					
ANR	40118	Argument	fileInfo . st_mode		39806	0					
ANR	40119	MemberAccess	fileInfo . st_mode		39806	0					
ANR	40120	Identifier	fileInfo		39806	0					
ANR	40121	Identifier	st_mode		39806	1					
ANR	40122	CompoundStatement		64:39:2110:2110	39806	1					
ANR	40123	ExpressionStatement	"DBGPRINTF ( ""requested to include directory '%s'\\n"" , cfgFile )"	4498:3:119475:119534	39806	0	True				
ANR	40124	CallExpression	"DBGPRINTF ( ""requested to include directory '%s'\\n"" , cfgFile )"		39806	0					
ANR	40125	Callee	DBGPRINTF		39806	0					
ANR	40126	Identifier	DBGPRINTF		39806	0					
ANR	40127	ArgumentList	"""requested to include directory '%s'\\n"""		39806	1					
ANR	40128	Argument	"""requested to include directory '%s'\\n"""		39806	0					
ANR	40129	PrimaryExpression	"""requested to include directory '%s'\\n"""		39806	0					
ANR	40130	Argument	cfgFile		39806	1					
ANR	40131	Identifier	cfgFile		39806	0					
ANR	40132	ExpressionStatement	cnfDoInclude ( cfgFile )	4499:3:119539:119560	39806	1	True				
ANR	40133	CallExpression	cnfDoInclude ( cfgFile )		39806	0					
ANR	40134	Callee	cnfDoInclude		39806	0					
ANR	40135	Identifier	cnfDoInclude		39806	0					
ANR	40136	ArgumentList	cfgFile		39806	1					
ANR	40137	Argument	cfgFile		39806	0					
ANR	40138	Identifier	cfgFile		39806	0					
ANR	40139	ElseStatement	else		39806	0					
ANR	40140	CompoundStatement		67:9:2234:2234	39806	0					
ANR	40141	ExpressionStatement	"DBGPRINTF ( ""warning: unable to process IncludeConfig directive '%s'\\n"" , cfgFile )"	4501:3:119576:119655	39806	0	True				
ANR	40142	CallExpression	"DBGPRINTF ( ""warning: unable to process IncludeConfig directive '%s'\\n"" , cfgFile )"		39806	0					
ANR	40143	Callee	DBGPRINTF		39806	0					
ANR	40144	Identifier	DBGPRINTF		39806	0					
ANR	40145	ArgumentList	"""warning: unable to process IncludeConfig directive '%s'\\n"""		39806	1					
ANR	40146	Argument	"""warning: unable to process IncludeConfig directive '%s'\\n"""		39806	0					
ANR	40147	PrimaryExpression	"""warning: unable to process IncludeConfig directive '%s'\\n"""		39806	0					
ANR	40148	Argument	cfgFile		39806	1					
ANR	40149	Identifier	cfgFile		39806	0					
ANR	40150	ExpressionStatement	globfree ( & cfgFiles )	4505:1:119666:119685	39806	14	True				
ANR	40151	CallExpression	globfree ( & cfgFiles )		39806	0					
ANR	40152	Callee	globfree		39806	0					
ANR	40153	Identifier	globfree		39806	0					
ANR	40154	ArgumentList	& cfgFiles		39806	1					
ANR	40155	Argument	& cfgFiles		39806	0					
ANR	40156	UnaryOperationExpression	& cfgFiles		39806	0					
ANR	40157	UnaryOperator	&		39806	0					
ANR	40158	Identifier	cfgFiles		39806	1					
ANR	40159	ReturnStatement	return 0 ;	4506:1:119688:119696	39806	15	True				
ANR	40160	PrimaryExpression	0		39806	0					
ANR	40161	ReturnType	int		39806	1					
ANR	40162	Identifier	cnfDoInclude		39806	2					
ANR	40163	ParameterList	char * name		39806	3					
ANR	40164	Parameter	char * name	4433:13:117324:117333	39806	0	True				
ANR	40165	ParameterType	char *		39806	0					
ANR	40166	Identifier	name		39806	1					
ANR	40167	CFGEntryNode	ENTRY		39806		True				
ANR	40168	CFGExitNode	EXIT		39806		True				
ANR	40169	Symbol	cfgFiles . gl_pathv		39806						
ANR	40170	Symbol	* cfgFiles . gl_pathv		39806						
ANR	40171	Symbol	cwdBuf		39806						
ANR	40172	Symbol	glob		39806						
ANR	40173	Symbol	nameBuf		39806						
ANR	40174	Symbol	finalName		39806						
ANR	40175	Symbol	GLOB_NOSPACE		39806						
ANR	40176	Symbol	result		39806						
ANR	40177	Symbol	* cfgFiles		39806						
ANR	40178	Symbol	cfgFiles . gl_pathc		39806						
ANR	40179	Symbol	getcwd		39806						
ANR	40180	Symbol	errStr		39806						
ANR	40181	Symbol	& fileInfo		39806						
ANR	40182	Symbol	stat		39806						
ANR	40183	Symbol	errno		39806						
ANR	40184	Symbol	NULL		39806						
ANR	40185	Symbol	cfgFile		39806						
ANR	40186	Symbol	GLOB_NOMATCH		39806						
ANR	40187	Symbol	i		39806						
ANR	40188	Symbol	fileInfo		39806						
ANR	40189	Symbol	GLOB_MARK		39806						
ANR	40190	Symbol	cfgFiles		39806						
ANR	40191	Symbol	* i		39806						
ANR	40192	Symbol	S_ISREG		39806						
ANR	40193	Symbol	GLOB_ABORTED		39806						
ANR	40194	Symbol	fileInfo . st_mode		39806						
ANR	40195	Symbol	name		39806						
ANR	40196	Symbol	S_ISDIR		39806						
ANR	40197	Symbol	GLOB_NOMAGIC		39806						
ANR	40198	Symbol	& cfgFiles		39806						
ANR	40199	Function	varDelete	4509:0:119701:119907							
ANR	40200	FunctionDef	varDelete (const struct svar * v)		40199	0					
ANR	40201	CompoundStatement		4511:0:119738:119907	40199	0					
ANR	40202	SwitchStatement	switch ( v -> datatype )		40199	0					
ANR	40203	Condition	v -> datatype	4512:8:119748:119758	40199	0	True				
ANR	40204	PtrMemberAccess	v -> datatype		40199	0					
ANR	40205	Identifier	v		40199	0					
ANR	40206	Identifier	datatype		40199	1					
ANR	40207	CompoundStatement		2:21:22:22	40199	1					
ANR	40208	Label	case 'S' :	4513:1:119764:119772	40199	0	True				
ANR	40209	Label	case 'J' :	4514:1:119775:119783	40199	1	True				
ANR	40210	ExpressionStatement	varFreeMembers ( v )	4515:2:119787:119804	40199	2	True				
ANR	40211	CallExpression	varFreeMembers ( v )		40199	0					
ANR	40212	Callee	varFreeMembers		40199	0					
ANR	40213	Identifier	varFreeMembers		40199	0					
ANR	40214	ArgumentList	v		40199	1					
ANR	40215	Argument	v		40199	0					
ANR	40216	Identifier	v		40199	0					
ANR	40217	BreakStatement	break ;	4516:2:119808:119813	40199	3	True				
ANR	40218	Label	case 'A' :	4517:1:119816:119824	40199	4	True				
ANR	40219	ExpressionStatement	cnfarrayContentDestruct ( v -> d . ar )	4518:2:119828:119860	40199	5	True				
ANR	40220	CallExpression	cnfarrayContentDestruct ( v -> d . ar )		40199	0					
ANR	40221	Callee	cnfarrayContentDestruct		40199	0					
ANR	40222	Identifier	cnfarrayContentDestruct		40199	0					
ANR	40223	ArgumentList	v -> d . ar		40199	1					
ANR	40224	Argument	v -> d . ar		40199	0					
ANR	40225	MemberAccess	v -> d . ar		40199	0					
ANR	40226	PtrMemberAccess	v -> d		40199	0					
ANR	40227	Identifier	v		40199	0					
ANR	40228	Identifier	d		40199	1					
ANR	40229	Identifier	ar		40199	1					
ANR	40230	ExpressionStatement	free ( v -> d . ar )	4519:2:119864:119877	40199	6	True				
ANR	40231	CallExpression	free ( v -> d . ar )		40199	0					
ANR	40232	Callee	free		40199	0					
ANR	40233	Identifier	free		40199	0					
ANR	40234	ArgumentList	v -> d . ar		40199	1					
ANR	40235	Argument	v -> d . ar		40199	0					
ANR	40236	MemberAccess	v -> d . ar		40199	0					
ANR	40237	PtrMemberAccess	v -> d		40199	0					
ANR	40238	Identifier	v		40199	0					
ANR	40239	Identifier	d		40199	1					
ANR	40240	Identifier	ar		40199	1					
ANR	40241	BreakStatement	break ;	4520:2:119881:119886	40199	7	True				
ANR	40242	Label	default :	4521:1:119889:119896	40199	8	True				
ANR	40243	Identifier	default		40199	0					
ANR	40244	BreakStatement	break ;	4521:9:119897:119902	40199	9	True				
ANR	40245	ReturnType	void		40199	1					
ANR	40246	Identifier	varDelete		40199	2					
ANR	40247	ParameterList	const struct svar * v		40199	3					
ANR	40248	Parameter	const struct svar * v	4510:10:119716:119735	40199	0	True				
ANR	40249	ParameterType	const struct svar *		40199	0					
ANR	40250	Identifier	v		40199	1					
ANR	40251	CFGEntryNode	ENTRY		40199		True				
ANR	40252	CFGExitNode	EXIT		40199		True				
ANR	40253	Symbol	* v		40199						
ANR	40254	Symbol	v		40199						
ANR	40255	Symbol	v -> d . ar		40199						
ANR	40256	Symbol	v -> d		40199						
ANR	40257	Symbol	v -> datatype		40199						
ANR	40258	Function	cnfparamvalsDestruct	4525:0:119910:120179							
ANR	40259	FunctionDef	"cnfparamvalsDestruct (const struct cnfparamvals * paramvals , const struct cnfparamblk * blk)"		40258	0					
ANR	40260	CompoundStatement		4527:0:120005:120179	40258	0					
ANR	40261	IdentifierDeclStatement	int i ;	4528:1:120008:120013	40258	0	True				
ANR	40262	IdentifierDecl	i		40258	0					
ANR	40263	IdentifierDeclType	int		40258	0					
ANR	40264	Identifier	i		40258	1					
ANR	40265	IfStatement	if ( paramvals == NULL )		40258	1					
ANR	40266	Condition	paramvals == NULL	4529:4:120019:120035	40258	0	True				
ANR	40267	EqualityExpression	paramvals == NULL		40258	0		==			
ANR	40268	Identifier	paramvals		40258	0					
ANR	40269	Identifier	NULL		40258	1					
ANR	40270	ReturnStatement	return ;	4530:2:120040:120046	40258	1	True				
ANR	40271	ForStatement	for ( i = 0 ; i < blk -> nParams ; ++ i )		40258	2					
ANR	40272	ForInit	i = 0 ;	4531:5:120053:120059	40258	0	True				
ANR	40273	AssignmentExpression	i = 0		40258	0		=			
ANR	40274	Identifier	i		40258	0					
ANR	40275	PrimaryExpression	0		40258	1					
ANR	40276	Condition	i < blk -> nParams	4531:13:120061:120076	40258	1	True				
ANR	40277	RelationalExpression	i < blk -> nParams		40258	0		<			
ANR	40278	Identifier	i		40258	0					
ANR	40279	PtrMemberAccess	blk -> nParams		40258	1					
ANR	40280	Identifier	blk		40258	0					
ANR	40281	Identifier	nParams		40258	1					
ANR	40282	UnaryExpression	++ i	4531:32:120080:120082	40258	2	True				
ANR	40283	IncDec	++		40258	0					
ANR	40284	Identifier	i		40258	1					
ANR	40285	CompoundStatement		5:37:79:79	40258	3					
ANR	40286	IfStatement	if ( paramvals [ i ] . bUsed )		40258	0					
ANR	40287	Condition	paramvals [ i ] . bUsed	4532:5:120092:120109	40258	0	True				
ANR	40288	MemberAccess	paramvals [ i ] . bUsed		40258	0					
ANR	40289	ArrayIndexing	paramvals [ i ]		40258	0					
ANR	40290	Identifier	paramvals		40258	0					
ANR	40291	Identifier	i		40258	1					
ANR	40292	Identifier	bUsed		40258	1					
ANR	40293	CompoundStatement		6:25:106:106	40258	1					
ANR	40294	ExpressionStatement	varDelete ( & paramvals [ i ] . val )	4533:3:120117:120145	40258	0	True				
ANR	40295	CallExpression	varDelete ( & paramvals [ i ] . val )		40258	0					
ANR	40296	Callee	varDelete		40258	0					
ANR	40297	Identifier	varDelete		40258	0					
ANR	40298	ArgumentList	& paramvals [ i ] . val		40258	1					
ANR	40299	Argument	& paramvals [ i ] . val		40258	0					
ANR	40300	UnaryOperationExpression	& paramvals [ i ] . val		40258	0					
ANR	40301	UnaryOperator	&		40258	0					
ANR	40302	MemberAccess	paramvals [ i ] . val		40258	1					
ANR	40303	ArrayIndexing	paramvals [ i ]		40258	0					
ANR	40304	Identifier	paramvals		40258	0					
ANR	40305	Identifier	i		40258	1					
ANR	40306	Identifier	val		40258	1					
ANR	40307	ExpressionStatement	free ( ( void * ) paramvals )	4536:1:120155:120177	40258	3	True				
ANR	40308	CallExpression	free ( ( void * ) paramvals )		40258	0					
ANR	40309	Callee	free		40258	0					
ANR	40310	Identifier	free		40258	0					
ANR	40311	ArgumentList	( void * ) paramvals		40258	1					
ANR	40312	Argument	( void * ) paramvals		40258	0					
ANR	40313	CastExpression	( void * ) paramvals		40258	0					
ANR	40314	CastTarget	void *		40258	0					
ANR	40315	Identifier	paramvals		40258	1					
ANR	40316	ReturnType	void		40258	1					
ANR	40317	Identifier	cnfparamvalsDestruct		40258	2					
ANR	40318	ParameterList	"const struct cnfparamvals * paramvals , const struct cnfparamblk * blk"		40258	3					
ANR	40319	Parameter	const struct cnfparamvals * paramvals	4526:21:119936:119971	40258	0	True				
ANR	40320	ParameterType	const struct cnfparamvals *		40258	0					
ANR	40321	Identifier	paramvals		40258	1					
ANR	40322	Parameter	const struct cnfparamblk * blk	4526:59:119974:120002	40258	1	True				
ANR	40323	ParameterType	const struct cnfparamblk *		40258	0					
ANR	40324	Identifier	blk		40258	1					
ANR	40325	CFGEntryNode	ENTRY		40258		True				
ANR	40326	CFGExitNode	EXIT		40258		True				
ANR	40327	Symbol	blk		40258						
ANR	40328	Symbol	* paramvals		40258						
ANR	40329	Symbol	& paramvals [ i ] . val		40258						
ANR	40330	Symbol	NULL		40258						
ANR	40331	Symbol	* i		40258						
ANR	40332	Symbol	* blk		40258						
ANR	40333	Symbol	blk -> nParams		40258						
ANR	40334	Symbol	paramvals [ i ] . bUsed		40258						
ANR	40335	Symbol	paramvals		40258						
ANR	40336	Symbol	i		40258						
ANR	40337	Function	cnfparamGetIdx	4545:0:120541:120772							
ANR	40338	FunctionDef	"cnfparamGetIdx (struct cnfparamblk * params , const char * name)"		40337	0					
ANR	40339	CompoundStatement		4547:0:120606:120772	40337	0					
ANR	40340	IdentifierDeclStatement	int i ;	4548:1:120609:120614	40337	0	True				
ANR	40341	IdentifierDecl	i		40337	0					
ANR	40342	IdentifierDeclType	int		40337	0					
ANR	40343	Identifier	i		40337	1					
ANR	40344	ForStatement	for ( i = 0 ; i < params -> nParams ; ++ i )		40337	1					
ANR	40345	ForInit	i = 0 ;	4549:5:120621:120627	40337	0	True				
ANR	40346	AssignmentExpression	i = 0		40337	0		=			
ANR	40347	Identifier	i		40337	0					
ANR	40348	PrimaryExpression	0		40337	1					
ANR	40349	Condition	i < params -> nParams	4549:13:120629:120647	40337	1	True				
ANR	40350	RelationalExpression	i < params -> nParams		40337	0		<			
ANR	40351	Identifier	i		40337	0					
ANR	40352	PtrMemberAccess	params -> nParams		40337	1					
ANR	40353	Identifier	params		40337	0					
ANR	40354	Identifier	nParams		40337	1					
ANR	40355	UnaryExpression	++ i	4549:35:120651:120653	40337	2	True				
ANR	40356	IncDec	++		40337	0					
ANR	40357	Identifier	i		40337	1					
ANR	40358	IfStatement	"if ( ! strcmp ( params -> descr [ i ] . name , name ) )"		40337	3					
ANR	40359	Condition	"! strcmp ( params -> descr [ i ] . name , name )"	4550:5:120661:120696	40337	0	True				
ANR	40360	UnaryOperationExpression	"! strcmp ( params -> descr [ i ] . name , name )"		40337	0					
ANR	40361	UnaryOperator	!		40337	0					
ANR	40362	CallExpression	"strcmp ( params -> descr [ i ] . name , name )"		40337	1					
ANR	40363	Callee	strcmp		40337	0					
ANR	40364	Identifier	strcmp		40337	0					
ANR	40365	ArgumentList	params -> descr [ i ] . name		40337	1					
ANR	40366	Argument	params -> descr [ i ] . name		40337	0					
ANR	40367	MemberAccess	params -> descr [ i ] . name		40337	0					
ANR	40368	ArrayIndexing	params -> descr [ i ]		40337	0					
ANR	40369	PtrMemberAccess	params -> descr		40337	0					
ANR	40370	Identifier	params		40337	0					
ANR	40371	Identifier	descr		40337	1					
ANR	40372	Identifier	i		40337	1					
ANR	40373	Identifier	name		40337	1					
ANR	40374	Argument	name		40337	1					
ANR	40375	Identifier	name		40337	0					
ANR	40376	BreakStatement	break ;	4551:3:120702:120707	40337	1	True				
ANR	40377	IfStatement	if ( i == params -> nParams )		40337	2					
ANR	40378	Condition	i == params -> nParams	4552:4:120713:120732	40337	0	True				
ANR	40379	EqualityExpression	i == params -> nParams		40337	0		==			
ANR	40380	Identifier	i		40337	0					
ANR	40381	PtrMemberAccess	params -> nParams		40337	1					
ANR	40382	Identifier	params		40337	0					
ANR	40383	Identifier	nParams		40337	1					
ANR	40384	ExpressionStatement	i = - 1	4553:2:120737:120743	40337	1	True				
ANR	40385	AssignmentExpression	i = - 1		40337	0		=			
ANR	40386	Identifier	i		40337	0					
ANR	40387	UnaryOperationExpression	- 1		40337	1					
ANR	40388	UnaryOperator	-		40337	0					
ANR	40389	PrimaryExpression	1		40337	1					
ANR	40390	ReturnStatement	return i ;	4554:1:120762:120770	40337	3	True				
ANR	40391	Identifier	i		40337	0					
ANR	40392	ReturnType	int		40337	1					
ANR	40393	Identifier	cnfparamGetIdx		40337	2					
ANR	40394	ParameterList	"struct cnfparamblk * params , const char * name"		40337	3					
ANR	40395	Parameter	struct cnfparamblk * params	4546:15:120560:120585	40337	0	True				
ANR	40396	ParameterType	struct cnfparamblk *		40337	0					
ANR	40397	Identifier	params		40337	1					
ANR	40398	Parameter	const char * name	4546:43:120588:120603	40337	1	True				
ANR	40399	ParameterType	const char *		40337	0					
ANR	40400	Identifier	name		40337	1					
ANR	40401	CFGEntryNode	ENTRY		40337		True				
ANR	40402	CFGExitNode	EXIT		40337		True				
ANR	40403	Symbol	strcmp		40337						
ANR	40404	Symbol	params -> descr [ i ] . name		40337						
ANR	40405	Symbol	* i		40337						
ANR	40406	Symbol	params -> descr		40337						
ANR	40407	Symbol	name		40337						
ANR	40408	Symbol	i		40337						
ANR	40409	Symbol	params		40337						
ANR	40410	Symbol	* * params		40337						
ANR	40411	Symbol	params -> nParams		40337						
ANR	40412	Symbol	* params		40337						
ANR	40413	Symbol	* params -> descr		40337						
ANR	40414	Function	cstrPrint	4558:0:120776:120914							
ANR	40415	FunctionDef	"cstrPrint (const char * text , es_str_t * estr)"		40414	0					
ANR	40416	CompoundStatement		4560:0:120825:120914	40414	0					
ANR	40417	IdentifierDeclStatement	char * str ;	4561:1:120828:120837	40414	0	True				
ANR	40418	IdentifierDecl	* str		40414	0					
ANR	40419	IdentifierDeclType	char *		40414	0					
ANR	40420	Identifier	str		40414	1					
ANR	40421	ExpressionStatement	"str = es_str2cstr ( estr , NULL )"	4562:1:120840:120869	40414	1	True				
ANR	40422	AssignmentExpression	"str = es_str2cstr ( estr , NULL )"		40414	0		=			
ANR	40423	Identifier	str		40414	0					
ANR	40424	CallExpression	"es_str2cstr ( estr , NULL )"		40414	1					
ANR	40425	Callee	es_str2cstr		40414	0					
ANR	40426	Identifier	es_str2cstr		40414	0					
ANR	40427	ArgumentList	estr		40414	1					
ANR	40428	Argument	estr		40414	0					
ANR	40429	Identifier	estr		40414	0					
ANR	40430	Argument	NULL		40414	1					
ANR	40431	Identifier	NULL		40414	0					
ANR	40432	ExpressionStatement	"dbgprintf ( ""%s%s"" , text , str )"	4563:1:120872:120900	40414	2	True				
ANR	40433	CallExpression	"dbgprintf ( ""%s%s"" , text , str )"		40414	0					
ANR	40434	Callee	dbgprintf		40414	0					
ANR	40435	Identifier	dbgprintf		40414	0					
ANR	40436	ArgumentList	"""%s%s"""		40414	1					
ANR	40437	Argument	"""%s%s"""		40414	0					
ANR	40438	PrimaryExpression	"""%s%s"""		40414	0					
ANR	40439	Argument	text		40414	1					
ANR	40440	Identifier	text		40414	0					
ANR	40441	Argument	str		40414	2					
ANR	40442	Identifier	str		40414	0					
ANR	40443	ExpressionStatement	free ( str )	4564:1:120903:120912	40414	3	True				
ANR	40444	CallExpression	free ( str )		40414	0					
ANR	40445	Callee	free		40414	0					
ANR	40446	Identifier	free		40414	0					
ANR	40447	ArgumentList	str		40414	1					
ANR	40448	Argument	str		40414	0					
ANR	40449	Identifier	str		40414	0					
ANR	40450	ReturnType	void		40414	1					
ANR	40451	Identifier	cstrPrint		40414	2					
ANR	40452	ParameterList	"const char * text , es_str_t * estr"		40414	3					
ANR	40453	Parameter	const char * text	4559:10:120791:120806	40414	0	True				
ANR	40454	ParameterType	const char *		40414	0					
ANR	40455	Identifier	text		40414	1					
ANR	40456	Parameter	es_str_t * estr	4559:28:120809:120822	40414	1	True				
ANR	40457	ParameterType	es_str_t *		40414	0					
ANR	40458	Identifier	estr		40414	1					
ANR	40459	CFGEntryNode	ENTRY		40414		True				
ANR	40460	CFGExitNode	EXIT		40414		True				
ANR	40461	Symbol	str		40414						
ANR	40462	Symbol	estr		40414						
ANR	40463	Symbol	NULL		40414						
ANR	40464	Symbol	text		40414						
ANR	40465	Symbol	es_str2cstr		40414						
ANR	40466	Function	rmLeadingSpace	4567:0:120917:121014							
ANR	40467	FunctionDef	rmLeadingSpace (char * s)		40466	0					
ANR	40468	CompoundStatement		4569:0:120948:121014	40466	0					
ANR	40469	IdentifierDeclStatement	char * p ;	4570:1:120951:120958	40466	0	True				
ANR	40470	IdentifierDecl	* p		40466	0					
ANR	40471	IdentifierDeclType	char *		40466	0					
ANR	40472	Identifier	p		40466	1					
ANR	40473	ForStatement	for ( p = s ; * p && isspace ( * p ) ; ++ p )		40466	1					
ANR	40474	ForInit	p = s ;	4571:5:120965:120971	40466	0	True				
ANR	40475	AssignmentExpression	p = s		40466	0		=			
ANR	40476	Identifier	p		40466	0					
ANR	40477	Identifier	s		40466	1					
ANR	40478	Condition	* p && isspace ( * p )	4571:13:120973:120989	40466	1	True				
ANR	40479	AndExpression	* p && isspace ( * p )		40466	0		&&			
ANR	40480	UnaryOperationExpression	* p		40466	0					
ANR	40481	UnaryOperator	*		40466	0					
ANR	40482	Identifier	p		40466	1					
ANR	40483	CallExpression	isspace ( * p )		40466	1					
ANR	40484	Callee	isspace		40466	0					
ANR	40485	Identifier	isspace		40466	0					
ANR	40486	ArgumentList	* p		40466	1					
ANR	40487	Argument	* p		40466	0					
ANR	40488	UnaryOperationExpression	* p		40466	0					
ANR	40489	UnaryOperator	*		40466	0					
ANR	40490	Identifier	p		40466	1					
ANR	40491	UnaryExpression	++ p	4571:33:120993:120995	40466	2	True				
ANR	40492	IncDec	++		40466	0					
ANR	40493	Identifier	p		40466	1					
ANR	40494	ExpressionStatement		4572:2:121000:121000	40466	3	True				
ANR	40495	ReturnStatement	return ( p ) ;	4573:1:121003:121012	40466	2	True				
ANR	40496	Identifier	p		40466	0					
ANR	40497	ReturnType	char *		40466	1					
ANR	40498	Identifier	rmLeadingSpace		40466	2					
ANR	40499	ParameterList	char * s		40466	3					
ANR	40500	Parameter	char * s	4568:15:120939:120945	40466	0	True				
ANR	40501	ParameterType	char *		40466	0					
ANR	40502	Identifier	s		40466	1					
ANR	40503	CFGEntryNode	ENTRY		40466		True				
ANR	40504	CFGExitNode	EXIT		40466		True				
ANR	40505	Symbol	p		40466						
ANR	40506	Symbol	s		40466						
ANR	40507	Symbol	isspace		40466						
ANR	40508	Symbol	* p		40466						
ANR	40509	Function	initRainerscript	4577:0:121093:121196							
ANR	40510	FunctionDef	initRainerscript ()		40509	0					
ANR	40511	CompoundStatement		4579:0:121125:121196	40509	0					
ANR	40512	ExpressionStatement	DEFiRet	4580:1:121128:121135	40509	0	True				
ANR	40513	Identifier	DEFiRet		40509	0					
ANR	40514	ExpressionStatement	CHKiRet ( objGetObjInterface ( & obj ) )	4581:1:121138:121171	40509	1	True				
ANR	40515	CallExpression	CHKiRet ( objGetObjInterface ( & obj ) )		40509	0					
ANR	40516	Callee	CHKiRet		40509	0					
ANR	40517	Identifier	CHKiRet		40509	0					
ANR	40518	ArgumentList	objGetObjInterface ( & obj )		40509	1					
ANR	40519	Argument	objGetObjInterface ( & obj )		40509	0					
ANR	40520	CallExpression	objGetObjInterface ( & obj )		40509	0					
ANR	40521	Callee	objGetObjInterface		40509	0					
ANR	40522	Identifier	objGetObjInterface		40509	0					
ANR	40523	ArgumentList	& obj		40509	1					
ANR	40524	Argument	& obj		40509	0					
ANR	40525	UnaryOperationExpression	& obj		40509	0					
ANR	40526	UnaryOperator	&		40509	0					
ANR	40527	Identifier	obj		40509	1					
ANR	40528	Label	finalize_it :	4582:0:121173:121184	40509	2	True				
ANR	40529	Identifier	finalize_it		40509	0					
ANR	40530	ExpressionStatement	RETiRet	4583:1:121187:121194	40509	3	True				
ANR	40531	Identifier	RETiRet		40509	0					
ANR	40532	ReturnType	rsRetVal		40509	1					
ANR	40533	Identifier	initRainerscript		40509	2					
ANR	40534	ParameterList			40509	3					
ANR	40535	CFGEntryNode	ENTRY		40509		True				
ANR	40536	CFGExitNode	EXIT		40509		True				
ANR	40537	Symbol	objGetObjInterface		40509						
ANR	40538	Symbol	& obj		40509						
ANR	40539	Function	isodigit	4587:0:121250:121319							
ANR	40540	FunctionDef	isodigit (uchar c)		40539	0					
ANR	40541	CompoundStatement		4589:0:121286:121319	40539	0					
ANR	40542	ReturnStatement	return ( c >= '0' && c <= '7' ) ;	4590:1:121289:121317	40539	0	True				
ANR	40543	AndExpression	c >= '0' && c <= '7'		40539	0		&&			
ANR	40544	RelationalExpression	c >= '0'		40539	0		>=			
ANR	40545	Identifier	c		40539	0					
ANR	40546	PrimaryExpression	'0'		40539	1					
ANR	40547	RelationalExpression	c <= '7'		40539	1		<=			
ANR	40548	Identifier	c		40539	0					
ANR	40549	PrimaryExpression	'7'		40539	1					
ANR	40550	ReturnType	static inline int		40539	1					
ANR	40551	Identifier	isodigit		40539	2					
ANR	40552	ParameterList	uchar c		40539	3					
ANR	40553	Parameter	uchar c	4588:9:121277:121283	40539	0	True				
ANR	40554	ParameterType	uchar		40539	0					
ANR	40555	Identifier	c		40539	1					
ANR	40556	CFGEntryNode	ENTRY		40539		True				
ANR	40557	CFGExitNode	EXIT		40539		True				
ANR	40558	Symbol	c		40539						
ANR	40559	Function	hexDigitVal	4598:0:121495:121639							
ANR	40560	FunctionDef	hexDigitVal (char c)		40559	0					
ANR	40561	CompoundStatement		4600:0:121526:121639	40559	0					
ANR	40562	IdentifierDeclStatement	int r ;	4601:1:121529:121534	40559	0	True				
ANR	40563	IdentifierDecl	r		40559	0					
ANR	40564	IdentifierDeclType	int		40559	0					
ANR	40565	Identifier	r		40559	1					
ANR	40566	IfStatement	if ( c < 'A' )		40559	1					
ANR	40567	Condition	c < 'A'	4602:4:121540:121546	40559	0	True				
ANR	40568	RelationalExpression	c < 'A'		40559	0		<			
ANR	40569	Identifier	c		40559	0					
ANR	40570	PrimaryExpression	'A'		40559	1					
ANR	40571	ExpressionStatement	r = c - '0'	4603:2:121551:121562	40559	1	True				
ANR	40572	AssignmentExpression	r = c - '0'		40559	0		=			
ANR	40573	Identifier	r		40559	0					
ANR	40574	AdditiveExpression	c - '0'		40559	1		-			
ANR	40575	Identifier	c		40559	0					
ANR	40576	PrimaryExpression	'0'		40559	1					
ANR	40577	ElseStatement	else		40559	0					
ANR	40578	IfStatement	if ( c < 'a' )		40559	0					
ANR	40579	Condition	c < 'a'	4604:9:121573:121579	40559	0	True				
ANR	40580	RelationalExpression	c < 'a'		40559	0		<			
ANR	40581	Identifier	c		40559	0					
ANR	40582	PrimaryExpression	'a'		40559	1					
ANR	40583	ExpressionStatement	r = c - 'A' + 10	4605:2:121584:121600	40559	1	True				
ANR	40584	AssignmentExpression	r = c - 'A' + 10		40559	0		=			
ANR	40585	Identifier	r		40559	0					
ANR	40586	AdditiveExpression	c - 'A' + 10		40559	1		-			
ANR	40587	Identifier	c		40559	0					
ANR	40588	AdditiveExpression	'A' + 10		40559	1		+			
ANR	40589	PrimaryExpression	'A'		40559	0					
ANR	40590	PrimaryExpression	10		40559	1					
ANR	40591	ElseStatement	else		40559	0					
ANR	40592	ExpressionStatement	r = c - 'a' + 10	4607:2:121610:121626	40559	0	True				
ANR	40593	AssignmentExpression	r = c - 'a' + 10		40559	0		=			
ANR	40594	Identifier	r		40559	0					
ANR	40595	AdditiveExpression	c - 'a' + 10		40559	1		-			
ANR	40596	Identifier	c		40559	0					
ANR	40597	AdditiveExpression	'a' + 10		40559	1		+			
ANR	40598	PrimaryExpression	'a'		40559	0					
ANR	40599	PrimaryExpression	10		40559	1					
ANR	40600	ReturnStatement	return r ;	4608:1:121629:121637	40559	2	True				
ANR	40601	Identifier	r		40559	0					
ANR	40602	ReturnType	static int		40559	1					
ANR	40603	Identifier	hexDigitVal		40559	2					
ANR	40604	ParameterList	char c		40559	3					
ANR	40605	Parameter	char c	4599:12:121518:121523	40559	0	True				
ANR	40606	ParameterType	char		40559	0					
ANR	40607	Identifier	c		40559	1					
ANR	40608	CFGEntryNode	ENTRY		40559		True				
ANR	40609	CFGExitNode	EXIT		40559		True				
ANR	40610	Symbol	r		40559						
ANR	40611	Symbol	c		40559						
ANR	40612	Function	doUnescape	4614:0:121751:123357							
ANR	40613	FunctionDef	"doUnescape (unsigned char * c , int len , int * iSrc , int iDst)"		40612	0					
ANR	40614	CompoundStatement		4616:0:121822:123357	40612	0					
ANR	40615	IfStatement	if ( c [ * iSrc ] == '\\\\' )		40612	0					
ANR	40616	Condition	c [ * iSrc ] == '\\\\'	4617:4:121828:121843	40612	0	True				
ANR	40617	EqualityExpression	c [ * iSrc ] == '\\\\'		40612	0		==			
ANR	40618	ArrayIndexing	c [ * iSrc ]		40612	0					
ANR	40619	Identifier	c		40612	0					
ANR	40620	UnaryOperationExpression	* iSrc		40612	1					
ANR	40621	UnaryOperator	*		40612	0					
ANR	40622	Identifier	iSrc		40612	1					
ANR	40623	PrimaryExpression	'\\\\'		40612	1					
ANR	40624	CompoundStatement		2:22:23:23	40612	1					
ANR	40625	IfStatement	if ( ++ ( * iSrc ) == len )		40612	0					
ANR	40626	Condition	++ ( * iSrc ) == len	4618:5:121853:121868	40612	0	True				
ANR	40627	EqualityExpression	++ ( * iSrc ) == len		40612	0		==			
ANR	40628	UnaryExpression	++ ( * iSrc )		40612	0					
ANR	40629	IncDec	++		40612	0					
ANR	40630	UnaryOperationExpression	* iSrc		40612	1					
ANR	40631	UnaryOperator	*		40612	0					
ANR	40632	Identifier	iSrc		40612	1					
ANR	40633	Identifier	len		40612	1					
ANR	40634	CompoundStatement		3:23:48:48	40612	1					
ANR	40635	ExpressionStatement	c [ iDst ] = '\\\\'	4620:3:121932:121946	40612	0	True				
ANR	40636	AssignmentExpression	c [ iDst ] = '\\\\'		40612	0		=			
ANR	40637	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40638	Identifier	c		40612	0					
ANR	40639	Identifier	iDst		40612	1					
ANR	40640	PrimaryExpression	'\\\\'		40612	1					
ANR	40641	SwitchStatement	switch ( c [ * iSrc ] )		40612	1					
ANR	40642	Condition	c [ * iSrc ]	4623:9:121992:121999	40612	0	True				
ANR	40643	ArrayIndexing	c [ * iSrc ]		40612	0					
ANR	40644	Identifier	c		40612	0					
ANR	40645	UnaryOperationExpression	* iSrc		40612	1					
ANR	40646	UnaryOperator	*		40612	0					
ANR	40647	Identifier	iSrc		40612	1					
ANR	40648	CompoundStatement		8:19:179:179	40612	1					
ANR	40649	Label	case 'a' :	4624:2:122006:122014	40612	0	True				
ANR	40650	ExpressionStatement	c [ iDst ] = '\\007'	4625:3:122019:122035	40612	1	True				
ANR	40651	AssignmentExpression	c [ iDst ] = '\\007'		40612	0		=			
ANR	40652	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40653	Identifier	c		40612	0					
ANR	40654	Identifier	iDst		40612	1					
ANR	40655	PrimaryExpression	'\\007'		40612	1					
ANR	40656	BreakStatement	break ;	4626:3:122040:122045	40612	2	True				
ANR	40657	Label	case 'b' :	4627:2:122049:122057	40612	3	True				
ANR	40658	ExpressionStatement	c [ iDst ] = '\\b'	4628:3:122062:122076	40612	4	True				
ANR	40659	AssignmentExpression	c [ iDst ] = '\\b'		40612	0		=			
ANR	40660	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40661	Identifier	c		40612	0					
ANR	40662	Identifier	iDst		40612	1					
ANR	40663	PrimaryExpression	'\\b'		40612	1					
ANR	40664	BreakStatement	break ;	4629:3:122081:122086	40612	5	True				
ANR	40665	Label	case 'f' :	4630:2:122090:122098	40612	6	True				
ANR	40666	ExpressionStatement	c [ iDst ] = '\\014'	4631:3:122103:122119	40612	7	True				
ANR	40667	AssignmentExpression	c [ iDst ] = '\\014'		40612	0		=			
ANR	40668	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40669	Identifier	c		40612	0					
ANR	40670	Identifier	iDst		40612	1					
ANR	40671	PrimaryExpression	'\\014'		40612	1					
ANR	40672	BreakStatement	break ;	4632:3:122124:122129	40612	8	True				
ANR	40673	Label	case 'n' :	4633:2:122133:122141	40612	9	True				
ANR	40674	ExpressionStatement	c [ iDst ] = '\\n'	4634:3:122146:122160	40612	10	True				
ANR	40675	AssignmentExpression	c [ iDst ] = '\\n'		40612	0		=			
ANR	40676	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40677	Identifier	c		40612	0					
ANR	40678	Identifier	iDst		40612	1					
ANR	40679	PrimaryExpression	'\\n'		40612	1					
ANR	40680	BreakStatement	break ;	4635:3:122165:122170	40612	11	True				
ANR	40681	Label	case 'r' :	4636:2:122174:122182	40612	12	True				
ANR	40682	ExpressionStatement	c [ iDst ] = '\\r'	4637:3:122187:122201	40612	13	True				
ANR	40683	AssignmentExpression	c [ iDst ] = '\\r'		40612	0		=			
ANR	40684	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40685	Identifier	c		40612	0					
ANR	40686	Identifier	iDst		40612	1					
ANR	40687	PrimaryExpression	'\\r'		40612	1					
ANR	40688	BreakStatement	break ;	4638:3:122206:122211	40612	14	True				
ANR	40689	Label	case 't' :	4639:2:122215:122223	40612	15	True				
ANR	40690	ExpressionStatement	c [ iDst ] = '\\t'	4640:3:122228:122242	40612	16	True				
ANR	40691	AssignmentExpression	c [ iDst ] = '\\t'		40612	0		=			
ANR	40692	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40693	Identifier	c		40612	0					
ANR	40694	Identifier	iDst		40612	1					
ANR	40695	PrimaryExpression	'\\t'		40612	1					
ANR	40696	BreakStatement	break ;	4641:3:122247:122252	40612	17	True				
ANR	40697	Label	case '\\'' :	4642:2:122256:122265	40612	18	True				
ANR	40698	ExpressionStatement	c [ iDst ] = '\\''	4643:3:122270:122284	40612	19	True				
ANR	40699	AssignmentExpression	c [ iDst ] = '\\''		40612	0		=			
ANR	40700	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40701	Identifier	c		40612	0					
ANR	40702	Identifier	iDst		40612	1					
ANR	40703	PrimaryExpression	'\\''		40612	1					
ANR	40704	BreakStatement	break ;	4644:3:122289:122294	40612	20	True				
ANR	40705	Label	"case '""' :"	4645:2:122298:122306	40612	21	True				
ANR	40706	ExpressionStatement	"c [ iDst ] = '""'"	4646:3:122311:122324	40612	22	True				
ANR	40707	AssignmentExpression	"c [ iDst ] = '""'"		40612	0		=			
ANR	40708	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40709	Identifier	c		40612	0					
ANR	40710	Identifier	iDst		40612	1					
ANR	40711	PrimaryExpression	"'""'"		40612	1					
ANR	40712	BreakStatement	break ;	4647:3:122329:122334	40612	23	True				
ANR	40713	Label	case '?' :	4648:2:122338:122346	40612	24	True				
ANR	40714	ExpressionStatement	c [ iDst ] = '?'	4649:3:122351:122364	40612	25	True				
ANR	40715	AssignmentExpression	c [ iDst ] = '?'		40612	0		=			
ANR	40716	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40717	Identifier	c		40612	0					
ANR	40718	Identifier	iDst		40612	1					
ANR	40719	PrimaryExpression	'?'		40612	1					
ANR	40720	BreakStatement	break ;	4650:3:122369:122374	40612	26	True				
ANR	40721	Label	case '$' :	4651:2:122378:122386	40612	27	True				
ANR	40722	ExpressionStatement	c [ iDst ] = '$'	4652:3:122391:122404	40612	28	True				
ANR	40723	AssignmentExpression	c [ iDst ] = '$'		40612	0		=			
ANR	40724	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40725	Identifier	c		40612	0					
ANR	40726	Identifier	iDst		40612	1					
ANR	40727	PrimaryExpression	'$'		40612	1					
ANR	40728	BreakStatement	break ;	4653:3:122409:122414	40612	29	True				
ANR	40729	Label	case '\\\\' :	4654:2:122418:122427	40612	30	True				
ANR	40730	ExpressionStatement	c [ iDst ] = '\\\\'	4655:3:122432:122446	40612	31	True				
ANR	40731	AssignmentExpression	c [ iDst ] = '\\\\'		40612	0		=			
ANR	40732	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40733	Identifier	c		40612	0					
ANR	40734	Identifier	iDst		40612	1					
ANR	40735	PrimaryExpression	'\\\\'		40612	1					
ANR	40736	BreakStatement	break ;	4656:3:122451:122456	40612	32	True				
ANR	40737	Label	case 'x' :	4657:2:122460:122468	40612	33	True				
ANR	40738	IfStatement	if ( ( * iSrc ) + 2 >= len || ! isxdigit ( c [ ( * iSrc ) + 1 ] ) || ! isxdigit ( c [ ( * iSrc ) + 2 ] ) )		40612	34					
ANR	40739	Condition	( * iSrc ) + 2 >= len || ! isxdigit ( c [ ( * iSrc ) + 1 ] ) || ! isxdigit ( c [ ( * iSrc ) + 2 ] )	4658:10:122480:122561	40612	0	True				
ANR	40740	OrExpression	( * iSrc ) + 2 >= len || ! isxdigit ( c [ ( * iSrc ) + 1 ] ) || ! isxdigit ( c [ ( * iSrc ) + 2 ] )		40612	0		||			
ANR	40741	RelationalExpression	( * iSrc ) + 2 >= len		40612	0		>=			
ANR	40742	AdditiveExpression	( * iSrc ) + 2		40612	0		+			
ANR	40743	UnaryOperationExpression	* iSrc		40612	0					
ANR	40744	UnaryOperator	*		40612	0					
ANR	40745	Identifier	iSrc		40612	1					
ANR	40746	PrimaryExpression	2		40612	1					
ANR	40747	Identifier	len		40612	1					
ANR	40748	OrExpression	! isxdigit ( c [ ( * iSrc ) + 1 ] ) || ! isxdigit ( c [ ( * iSrc ) + 2 ] )		40612	1		||			
ANR	40749	UnaryOperationExpression	! isxdigit ( c [ ( * iSrc ) + 1 ] )		40612	0					
ANR	40750	UnaryOperator	!		40612	0					
ANR	40751	CallExpression	isxdigit ( c [ ( * iSrc ) + 1 ] )		40612	1					
ANR	40752	Callee	isxdigit		40612	0					
ANR	40753	Identifier	isxdigit		40612	0					
ANR	40754	ArgumentList	c [ ( * iSrc ) + 1 ]		40612	1					
ANR	40755	Argument	c [ ( * iSrc ) + 1 ]		40612	0					
ANR	40756	ArrayIndexing	c [ ( * iSrc ) + 1 ]		40612	0					
ANR	40757	Identifier	c		40612	0					
ANR	40758	AdditiveExpression	( * iSrc ) + 1		40612	1		+			
ANR	40759	UnaryOperationExpression	* iSrc		40612	0					
ANR	40760	UnaryOperator	*		40612	0					
ANR	40761	Identifier	iSrc		40612	1					
ANR	40762	PrimaryExpression	1		40612	1					
ANR	40763	UnaryOperationExpression	! isxdigit ( c [ ( * iSrc ) + 2 ] )		40612	1					
ANR	40764	UnaryOperator	!		40612	0					
ANR	40765	CallExpression	isxdigit ( c [ ( * iSrc ) + 2 ] )		40612	1					
ANR	40766	Callee	isxdigit		40612	0					
ANR	40767	Identifier	isxdigit		40612	0					
ANR	40768	ArgumentList	c [ ( * iSrc ) + 2 ]		40612	1					
ANR	40769	Argument	c [ ( * iSrc ) + 2 ]		40612	0					
ANR	40770	ArrayIndexing	c [ ( * iSrc ) + 2 ]		40612	0					
ANR	40771	Identifier	c		40612	0					
ANR	40772	AdditiveExpression	( * iSrc ) + 2		40612	1		+			
ANR	40773	UnaryOperationExpression	* iSrc		40612	0					
ANR	40774	UnaryOperator	*		40612	0					
ANR	40775	Identifier	iSrc		40612	1					
ANR	40776	PrimaryExpression	2		40612	1					
ANR	40777	CompoundStatement		45:34:741:741	40612	1					
ANR	40778	ExpressionStatement	c [ iDst ] = '\\\\'	4662:4:122616:122630	40612	0	True				
ANR	40779	AssignmentExpression	c [ iDst ] = '\\\\'		40612	0		=			
ANR	40780	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40781	Identifier	c		40612	0					
ANR	40782	Identifier	iDst		40612	1					
ANR	40783	PrimaryExpression	'\\\\'		40612	1					
ANR	40784	ExpressionStatement	-- ( * iSrc )	4663:4:122636:122645	40612	1	True				
ANR	40785	UnaryExpression	-- ( * iSrc )		40612	0					
ANR	40786	IncDec	--		40612	0					
ANR	40787	UnaryOperationExpression	* iSrc		40612	1					
ANR	40788	UnaryOperator	*		40612	0					
ANR	40789	Identifier	iSrc		40612	1					
ANR	40790	ExpressionStatement	c [ iDst ] = ( hexDigitVal ( c [ ( * iSrc ) + 1 ] ) << 4 ) + hexDigitVal ( c [ ( * iSrc ) + 2 ] )	4665:3:122655:122731	40612	35	True				
ANR	40791	AssignmentExpression	c [ iDst ] = ( hexDigitVal ( c [ ( * iSrc ) + 1 ] ) << 4 ) + hexDigitVal ( c [ ( * iSrc ) + 2 ] )		40612	0		=			
ANR	40792	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40793	Identifier	c		40612	0					
ANR	40794	Identifier	iDst		40612	1					
ANR	40795	AdditiveExpression	( hexDigitVal ( c [ ( * iSrc ) + 1 ] ) << 4 ) + hexDigitVal ( c [ ( * iSrc ) + 2 ] )		40612	1		+			
ANR	40796	ShiftExpression	hexDigitVal ( c [ ( * iSrc ) + 1 ] ) << 4		40612	0		<<			
ANR	40797	CallExpression	hexDigitVal ( c [ ( * iSrc ) + 1 ] )		40612	0					
ANR	40798	Callee	hexDigitVal		40612	0					
ANR	40799	Identifier	hexDigitVal		40612	0					
ANR	40800	ArgumentList	c [ ( * iSrc ) + 1 ]		40612	1					
ANR	40801	Argument	c [ ( * iSrc ) + 1 ]		40612	0					
ANR	40802	ArrayIndexing	c [ ( * iSrc ) + 1 ]		40612	0					
ANR	40803	Identifier	c		40612	0					
ANR	40804	AdditiveExpression	( * iSrc ) + 1		40612	1		+			
ANR	40805	UnaryOperationExpression	* iSrc		40612	0					
ANR	40806	UnaryOperator	*		40612	0					
ANR	40807	Identifier	iSrc		40612	1					
ANR	40808	PrimaryExpression	1		40612	1					
ANR	40809	PrimaryExpression	4		40612	1					
ANR	40810	CallExpression	hexDigitVal ( c [ ( * iSrc ) + 2 ] )		40612	1					
ANR	40811	Callee	hexDigitVal		40612	0					
ANR	40812	Identifier	hexDigitVal		40612	0					
ANR	40813	ArgumentList	c [ ( * iSrc ) + 2 ]		40612	1					
ANR	40814	Argument	c [ ( * iSrc ) + 2 ]		40612	0					
ANR	40815	ArrayIndexing	c [ ( * iSrc ) + 2 ]		40612	0					
ANR	40816	Identifier	c		40612	0					
ANR	40817	AdditiveExpression	( * iSrc ) + 2		40612	1		+			
ANR	40818	UnaryOperationExpression	* iSrc		40612	0					
ANR	40819	UnaryOperator	*		40612	0					
ANR	40820	Identifier	iSrc		40612	1					
ANR	40821	PrimaryExpression	2		40612	1					
ANR	40822	ExpressionStatement	* iSrc += 2	4667:3:122736:122746	40612	36	True				
ANR	40823	AssignmentExpression	* iSrc += 2		40612	0		+=			
ANR	40824	UnaryOperationExpression	* iSrc		40612	0					
ANR	40825	UnaryOperator	*		40612	0					
ANR	40826	Identifier	iSrc		40612	1					
ANR	40827	PrimaryExpression	2		40612	1					
ANR	40828	BreakStatement	break ;	4668:3:122751:122756	40612	37	True				
ANR	40829	Label	case '0' :	4669:2:122760:122768	40612	38	True				
ANR	40830	Label	case '1' :	4670:2:122791:122799	40612	39	True				
ANR	40831	Label	case '2' :	4671:2:122803:122811	40612	40	True				
ANR	40832	Label	case '3' :	4672:2:122815:122823	40612	41	True				
ANR	40833	Label	case '4' :	4673:2:122827:122835	40612	42	True				
ANR	40834	Label	case '5' :	4674:2:122839:122847	40612	43	True				
ANR	40835	Label	case '6' :	4675:2:122851:122859	40612	44	True				
ANR	40836	Label	case '7' :	4676:2:122863:122871	40612	45	True				
ANR	40837	IfStatement	if ( ( * iSrc ) + 2 >= len || ! isodigit ( c [ ( * iSrc ) + 1 ] ) || ! isodigit ( c [ ( * iSrc ) + 2 ] ) )		40612	46					
ANR	40838	Condition	( * iSrc ) + 2 >= len || ! isodigit ( c [ ( * iSrc ) + 1 ] ) || ! isodigit ( c [ ( * iSrc ) + 2 ] )	4677:10:122883:122964	40612	0	True				
ANR	40839	OrExpression	( * iSrc ) + 2 >= len || ! isodigit ( c [ ( * iSrc ) + 1 ] ) || ! isodigit ( c [ ( * iSrc ) + 2 ] )		40612	0		||			
ANR	40840	RelationalExpression	( * iSrc ) + 2 >= len		40612	0		>=			
ANR	40841	AdditiveExpression	( * iSrc ) + 2		40612	0		+			
ANR	40842	UnaryOperationExpression	* iSrc		40612	0					
ANR	40843	UnaryOperator	*		40612	0					
ANR	40844	Identifier	iSrc		40612	1					
ANR	40845	PrimaryExpression	2		40612	1					
ANR	40846	Identifier	len		40612	1					
ANR	40847	OrExpression	! isodigit ( c [ ( * iSrc ) + 1 ] ) || ! isodigit ( c [ ( * iSrc ) + 2 ] )		40612	1		||			
ANR	40848	UnaryOperationExpression	! isodigit ( c [ ( * iSrc ) + 1 ] )		40612	0					
ANR	40849	UnaryOperator	!		40612	0					
ANR	40850	CallExpression	isodigit ( c [ ( * iSrc ) + 1 ] )		40612	1					
ANR	40851	Callee	isodigit		40612	0					
ANR	40852	Identifier	isodigit		40612	0					
ANR	40853	ArgumentList	c [ ( * iSrc ) + 1 ]		40612	1					
ANR	40854	Argument	c [ ( * iSrc ) + 1 ]		40612	0					
ANR	40855	ArrayIndexing	c [ ( * iSrc ) + 1 ]		40612	0					
ANR	40856	Identifier	c		40612	0					
ANR	40857	AdditiveExpression	( * iSrc ) + 1		40612	1		+			
ANR	40858	UnaryOperationExpression	* iSrc		40612	0					
ANR	40859	UnaryOperator	*		40612	0					
ANR	40860	Identifier	iSrc		40612	1					
ANR	40861	PrimaryExpression	1		40612	1					
ANR	40862	UnaryOperationExpression	! isodigit ( c [ ( * iSrc ) + 2 ] )		40612	1					
ANR	40863	UnaryOperator	!		40612	0					
ANR	40864	CallExpression	isodigit ( c [ ( * iSrc ) + 2 ] )		40612	1					
ANR	40865	Callee	isodigit		40612	0					
ANR	40866	Identifier	isodigit		40612	0					
ANR	40867	ArgumentList	c [ ( * iSrc ) + 2 ]		40612	1					
ANR	40868	Argument	c [ ( * iSrc ) + 2 ]		40612	0					
ANR	40869	ArrayIndexing	c [ ( * iSrc ) + 2 ]		40612	0					
ANR	40870	Identifier	c		40612	0					
ANR	40871	AdditiveExpression	( * iSrc ) + 2		40612	1		+			
ANR	40872	UnaryOperationExpression	* iSrc		40612	0					
ANR	40873	UnaryOperator	*		40612	0					
ANR	40874	Identifier	iSrc		40612	1					
ANR	40875	PrimaryExpression	2		40612	1					
ANR	40876	CompoundStatement		64:34:1144:1144	40612	1					
ANR	40877	ExpressionStatement	c [ iDst ] = '\\\\'	4681:4:123019:123033	40612	0	True				
ANR	40878	AssignmentExpression	c [ iDst ] = '\\\\'		40612	0		=			
ANR	40879	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40880	Identifier	c		40612	0					
ANR	40881	Identifier	iDst		40612	1					
ANR	40882	PrimaryExpression	'\\\\'		40612	1					
ANR	40883	ExpressionStatement	-- ( * iSrc )	4682:4:123039:123048	40612	1	True				
ANR	40884	UnaryExpression	-- ( * iSrc )		40612	0					
ANR	40885	IncDec	--		40612	0					
ANR	40886	UnaryOperationExpression	* iSrc		40612	1					
ANR	40887	UnaryOperator	*		40612	0					
ANR	40888	Identifier	iSrc		40612	1					
ANR	40889	ExpressionStatement	c [ iDst ] = ( ( c [ ( * iSrc ) ] - '0' ) << 6 ) + ( ( c [ ( * iSrc ) + 1 ] - '0' ) << 3 ) + ( c [ ( * iSrc ) + 2 ] - '0' )	4684:3:123058:123175	40612	47	True				
ANR	40890	AssignmentExpression	c [ iDst ] = ( ( c [ ( * iSrc ) ] - '0' ) << 6 ) + ( ( c [ ( * iSrc ) + 1 ] - '0' ) << 3 ) + ( c [ ( * iSrc ) + 2 ] - '0' )		40612	0		=			
ANR	40891	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40892	Identifier	c		40612	0					
ANR	40893	Identifier	iDst		40612	1					
ANR	40894	AdditiveExpression	( ( c [ ( * iSrc ) ] - '0' ) << 6 ) + ( ( c [ ( * iSrc ) + 1 ] - '0' ) << 3 ) + ( c [ ( * iSrc ) + 2 ] - '0' )		40612	1		+			
ANR	40895	ShiftExpression	( c [ ( * iSrc ) ] - '0' ) << 6		40612	0		<<			
ANR	40896	AdditiveExpression	c [ ( * iSrc ) ] - '0'		40612	0		-			
ANR	40897	ArrayIndexing	c [ ( * iSrc ) ]		40612	0					
ANR	40898	Identifier	c		40612	0					
ANR	40899	UnaryOperationExpression	* iSrc		40612	1					
ANR	40900	UnaryOperator	*		40612	0					
ANR	40901	Identifier	iSrc		40612	1					
ANR	40902	PrimaryExpression	'0'		40612	1					
ANR	40903	PrimaryExpression	6		40612	1					
ANR	40904	AdditiveExpression	( ( c [ ( * iSrc ) + 1 ] - '0' ) << 3 ) + ( c [ ( * iSrc ) + 2 ] - '0' )		40612	1		+			
ANR	40905	ShiftExpression	( c [ ( * iSrc ) + 1 ] - '0' ) << 3		40612	0		<<			
ANR	40906	AdditiveExpression	c [ ( * iSrc ) + 1 ] - '0'		40612	0		-			
ANR	40907	ArrayIndexing	c [ ( * iSrc ) + 1 ]		40612	0					
ANR	40908	Identifier	c		40612	0					
ANR	40909	AdditiveExpression	( * iSrc ) + 1		40612	1		+			
ANR	40910	UnaryOperationExpression	* iSrc		40612	0					
ANR	40911	UnaryOperator	*		40612	0					
ANR	40912	Identifier	iSrc		40612	1					
ANR	40913	PrimaryExpression	1		40612	1					
ANR	40914	PrimaryExpression	'0'		40612	1					
ANR	40915	PrimaryExpression	3		40612	1					
ANR	40916	AdditiveExpression	c [ ( * iSrc ) + 2 ] - '0'		40612	1		-			
ANR	40917	ArrayIndexing	c [ ( * iSrc ) + 2 ]		40612	0					
ANR	40918	Identifier	c		40612	0					
ANR	40919	AdditiveExpression	( * iSrc ) + 2		40612	1		+			
ANR	40920	UnaryOperationExpression	* iSrc		40612	0					
ANR	40921	UnaryOperator	*		40612	0					
ANR	40922	Identifier	iSrc		40612	1					
ANR	40923	PrimaryExpression	2		40612	1					
ANR	40924	PrimaryExpression	'0'		40612	1					
ANR	40925	ExpressionStatement	* iSrc += 2	4687:3:123180:123190	40612	48	True				
ANR	40926	AssignmentExpression	* iSrc += 2		40612	0		+=			
ANR	40927	UnaryOperationExpression	* iSrc		40612	0					
ANR	40928	UnaryOperator	*		40612	0					
ANR	40929	Identifier	iSrc		40612	1					
ANR	40930	PrimaryExpression	2		40612	1					
ANR	40931	BreakStatement	break ;	4688:3:123195:123200	40612	49	True				
ANR	40932	Label	default :	4689:2:123204:123211	40612	50	True				
ANR	40933	Identifier	default		40612	0					
ANR	40934	ExpressionStatement	c [ iDst ] = '?'	4691:3:123267:123280	40612	51	True				
ANR	40935	AssignmentExpression	c [ iDst ] = '?'		40612	0		=			
ANR	40936	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40937	Identifier	c		40612	0					
ANR	40938	Identifier	iDst		40612	1					
ANR	40939	PrimaryExpression	'?'		40612	1					
ANR	40940	BreakStatement	break ;	4692:3:123285:123290	40612	52	True				
ANR	40941	ElseStatement	else		40612	0					
ANR	40942	CompoundStatement		79:8:1481:1481	40612	0					
ANR	40943	ExpressionStatement	c [ iDst ] = c [ * iSrc ]	4696:2:123334:123352	40612	0	True				
ANR	40944	AssignmentExpression	c [ iDst ] = c [ * iSrc ]		40612	0		=			
ANR	40945	ArrayIndexing	c [ iDst ]		40612	0					
ANR	40946	Identifier	c		40612	0					
ANR	40947	Identifier	iDst		40612	1					
ANR	40948	ArrayIndexing	c [ * iSrc ]		40612	1					
ANR	40949	Identifier	c		40612	0					
ANR	40950	UnaryOperationExpression	* iSrc		40612	1					
ANR	40951	UnaryOperator	*		40612	0					
ANR	40952	Identifier	iSrc		40612	1					
ANR	40953	ReturnType	static void		40612	1					
ANR	40954	Identifier	doUnescape		40612	2					
ANR	40955	ParameterList	"unsigned char * c , int len , int * iSrc , int iDst"		40612	3					
ANR	40956	Parameter	unsigned char * c	4615:11:121774:121789	40612	0	True				
ANR	40957	ParameterType	unsigned char *		40612	0					
ANR	40958	Identifier	c		40612	1					
ANR	40959	Parameter	int len	4615:29:121792:121798	40612	1	True				
ANR	40960	ParameterType	int		40612	0					
ANR	40961	Identifier	len		40612	1					
ANR	40962	Parameter	int * iSrc	4615:38:121801:121809	40612	2	True				
ANR	40963	ParameterType	int *		40612	0					
ANR	40964	Identifier	iSrc		40612	1					
ANR	40965	Parameter	int iDst	4615:49:121812:121819	40612	3	True				
ANR	40966	ParameterType	int		40612	0					
ANR	40967	Identifier	iDst		40612	1					
ANR	40968	CFGEntryNode	ENTRY		40612		True				
ANR	40969	CFGExitNode	EXIT		40612		True				
ANR	40970	Symbol	c		40612						
ANR	40971	Symbol	len		40612						
ANR	40972	Symbol	iSrc		40612						
ANR	40973	Symbol	hexDigitVal		40612						
ANR	40974	Symbol	iDst		40612						
ANR	40975	Symbol	isodigit		40612						
ANR	40976	Symbol	* c		40612						
ANR	40977	Symbol	* iDst		40612						
ANR	40978	Symbol	* iSrc		40612						
ANR	40979	Symbol	* * iSrc		40612						
ANR	40980	Symbol	isxdigit		40612						
ANR	40981	Function	unescapeStr	4700:0:123360:123833							
ANR	40982	FunctionDef	"unescapeStr (uchar * s , int len)"		40981	0					
ANR	40983	CompoundStatement		4702:0:123396:123833	40981	0					
ANR	40984	IdentifierDeclStatement	"int iSrc , iDst ;"	4703:1:123399:123413	40981	0	True				
ANR	40985	IdentifierDecl	iSrc		40981	0					
ANR	40986	IdentifierDeclType	int		40981	0					
ANR	40987	Identifier	iSrc		40981	1					
ANR	40988	IdentifierDecl	iDst		40981	1					
ANR	40989	IdentifierDeclType	int		40981	0					
ANR	40990	Identifier	iDst		40981	1					
ANR	40991	ExpressionStatement	assert ( s != NULL )	4704:1:123416:123433	40981	1	True				
ANR	40992	CallExpression	assert ( s != NULL )		40981	0					
ANR	40993	Callee	assert		40981	0					
ANR	40994	Identifier	assert		40981	0					
ANR	40995	ArgumentList	s != NULL		40981	1					
ANR	40996	Argument	s != NULL		40981	0					
ANR	40997	EqualityExpression	s != NULL		40981	0		!=			
ANR	40998	Identifier	s		40981	0					
ANR	40999	Identifier	NULL		40981	1					
ANR	41000	ExpressionStatement	iSrc = 0	4707:1:123508:123516	40981	2	True				
ANR	41001	AssignmentExpression	iSrc = 0		40981	0		=			
ANR	41002	Identifier	iSrc		40981	0					
ANR	41003	PrimaryExpression	0		40981	1					
ANR	41004	WhileStatement	while ( iSrc < len && s [ iSrc ] != '\\\\' )		40981	3					
ANR	41005	Condition	iSrc < len && s [ iSrc ] != '\\\\'	4708:7:123525:123553	40981	0	True				
ANR	41006	AndExpression	iSrc < len && s [ iSrc ] != '\\\\'		40981	0		&&			
ANR	41007	RelationalExpression	iSrc < len		40981	0		<			
ANR	41008	Identifier	iSrc		40981	0					
ANR	41009	Identifier	len		40981	1					
ANR	41010	EqualityExpression	s [ iSrc ] != '\\\\'		40981	1		!=			
ANR	41011	ArrayIndexing	s [ iSrc ]		40981	0					
ANR	41012	Identifier	s		40981	0					
ANR	41013	Identifier	iSrc		40981	1					
ANR	41014	PrimaryExpression	'\\\\'		40981	1					
ANR	41015	ExpressionStatement	++ iSrc	4709:2:123558:123564	40981	1	True				
ANR	41016	UnaryExpression	++ iSrc		40981	0					
ANR	41017	IncDec	++		40981	0					
ANR	41018	Identifier	iSrc		40981	1					
ANR	41019	IfStatement	if ( iSrc != len )		40981	4					
ANR	41020	Condition	iSrc != len	4713:4:123698:123708	40981	0	True				
ANR	41021	EqualityExpression	iSrc != len		40981	0		!=			
ANR	41022	Identifier	iSrc		40981	0					
ANR	41023	Identifier	len		40981	1					
ANR	41024	CompoundStatement		12:17:314:314	40981	1					
ANR	41025	ExpressionStatement	iDst = iSrc	4714:2:123715:123726	40981	0	True				
ANR	41026	AssignmentExpression	iDst = iSrc		40981	0		=			
ANR	41027	Identifier	iDst		40981	0					
ANR	41028	Identifier	iSrc		40981	1					
ANR	41029	WhileStatement	while ( iSrc < len )		40981	1					
ANR	41030	Condition	iSrc < len	4715:8:123736:123745	40981	0	True				
ANR	41031	RelationalExpression	iSrc < len		40981	0		<			
ANR	41032	Identifier	iSrc		40981	0					
ANR	41033	Identifier	len		40981	1					
ANR	41034	CompoundStatement		14:20:351:351	40981	1					
ANR	41035	ExpressionStatement	"doUnescape ( s , len , & iSrc , iDst )"	4716:3:123753:123784	40981	0	True				
ANR	41036	CallExpression	"doUnescape ( s , len , & iSrc , iDst )"		40981	0					
ANR	41037	Callee	doUnescape		40981	0					
ANR	41038	Identifier	doUnescape		40981	0					
ANR	41039	ArgumentList	s		40981	1					
ANR	41040	Argument	s		40981	0					
ANR	41041	Identifier	s		40981	0					
ANR	41042	Argument	len		40981	1					
ANR	41043	Identifier	len		40981	0					
ANR	41044	Argument	& iSrc		40981	2					
ANR	41045	UnaryOperationExpression	& iSrc		40981	0					
ANR	41046	UnaryOperator	&		40981	0					
ANR	41047	Identifier	iSrc		40981	1					
ANR	41048	Argument	iDst		40981	3					
ANR	41049	Identifier	iDst		40981	0					
ANR	41050	ExpressionStatement	++ iSrc	4717:3:123789:123795	40981	1	True				
ANR	41051	UnaryExpression	++ iSrc		40981	0					
ANR	41052	IncDec	++		40981	0					
ANR	41053	Identifier	iSrc		40981	1					
ANR	41054	ExpressionStatement	++ iDst	4718:3:123800:123806	40981	2	True				
ANR	41055	UnaryExpression	++ iDst		40981	0					
ANR	41056	IncDec	++		40981	0					
ANR	41057	Identifier	iDst		40981	1					
ANR	41058	ExpressionStatement	s [ iDst ] = '\\0'	4720:2:123814:123828	40981	2	True				
ANR	41059	AssignmentExpression	s [ iDst ] = '\\0'		40981	0		=			
ANR	41060	ArrayIndexing	s [ iDst ]		40981	0					
ANR	41061	Identifier	s		40981	0					
ANR	41062	Identifier	iDst		40981	1					
ANR	41063	PrimaryExpression	'\\0'		40981	1					
ANR	41064	ReturnType	void		40981	1					
ANR	41065	Identifier	unescapeStr		40981	2					
ANR	41066	ParameterList	"uchar * s , int len"		40981	3					
ANR	41067	Parameter	uchar * s	4701:12:123377:123384	40981	0	True				
ANR	41068	ParameterType	uchar *		40981	0					
ANR	41069	Identifier	s		40981	1					
ANR	41070	Parameter	int len	4701:22:123387:123393	40981	1	True				
ANR	41071	ParameterType	int		40981	0					
ANR	41072	Identifier	len		40981	1					
ANR	41073	CFGEntryNode	ENTRY		40981		True				
ANR	41074	CFGExitNode	EXIT		40981		True				
ANR	41075	Symbol	s		40981						
ANR	41076	Symbol	NULL		40981						
ANR	41077	Symbol	len		40981						
ANR	41078	Symbol	& iSrc		40981						
ANR	41079	Symbol	iSrc		40981						
ANR	41080	Symbol	iDst		40981						
ANR	41081	Symbol	* s		40981						
ANR	41082	Symbol	* iDst		40981						
ANR	41083	Symbol	* iSrc		40981						
ANR	41084	Function	tokenval2str	4724:0:123836:125341							
ANR	41085	FunctionDef	tokenval2str (const int tok)		41084	0					
ANR	41086	CompoundStatement		4726:0:123877:125341	41084	0					
ANR	41087	IfStatement	if ( tok < 256 )		41084	0					
ANR	41088	Condition	tok < 256	4727:4:123883:123891	41084	0	True				
ANR	41089	RelationalExpression	tok < 256		41084	0		<			
ANR	41090	Identifier	tok		41084	0					
ANR	41091	PrimaryExpression	256		41084	1					
ANR	41092	ReturnStatement	"return """" ;"	4727:15:123894:123903	41084	1	True				
ANR	41093	PrimaryExpression	""""""		41084	0					
ANR	41094	SwitchStatement	switch ( tok )		41084	1					
ANR	41095	Condition	tok	4728:8:123913:123915	41084	0	True				
ANR	41096	Identifier	tok		41084	0					
ANR	41097	CompoundStatement		3:13:40:40	41084	1					
ANR	41098	Label	case NAME :	4729:1:123921:123930	41084	0	True				
ANR	41099	Identifier	NAME		41084	0					
ANR	41100	ReturnStatement	"return ""NAME"" ;"	4729:12:123932:123945	41084	1	True				
ANR	41101	PrimaryExpression	"""NAME"""		41084	0					
ANR	41102	Label	case FUNC :	4730:1:123948:123957	41084	2	True				
ANR	41103	Identifier	FUNC		41084	0					
ANR	41104	ReturnStatement	"return ""FUNC"" ;"	4730:12:123959:123972	41084	3	True				
ANR	41105	PrimaryExpression	"""FUNC"""		41084	0					
ANR	41106	Label	case BEGINOBJ :	4731:1:123975:123988	41084	4	True				
ANR	41107	Identifier	BEGINOBJ		41084	0					
ANR	41108	ReturnStatement	"return ""BEGINOBJ"" ;"	4731:16:123990:124007	41084	5	True				
ANR	41109	PrimaryExpression	"""BEGINOBJ"""		41084	0					
ANR	41110	Label	case ENDOBJ :	4732:1:124010:124021	41084	6	True				
ANR	41111	Identifier	ENDOBJ		41084	0					
ANR	41112	ReturnStatement	"return ""ENDOBJ"" ;"	4732:14:124023:124038	41084	7	True				
ANR	41113	PrimaryExpression	"""ENDOBJ"""		41084	0					
ANR	41114	Label	case BEGIN_ACTION :	4733:1:124041:124058	41084	8	True				
ANR	41115	Identifier	BEGIN_ACTION		41084	0					
ANR	41116	ReturnStatement	"return ""BEGIN_ACTION"" ;"	4733:20:124060:124081	41084	9	True				
ANR	41117	PrimaryExpression	"""BEGIN_ACTION"""		41084	0					
ANR	41118	Label	case BEGIN_PROPERTY :	4734:1:124084:124103	41084	10	True				
ANR	41119	Identifier	BEGIN_PROPERTY		41084	0					
ANR	41120	ReturnStatement	"return ""BEGIN_PROPERTY"" ;"	4734:22:124105:124128	41084	11	True				
ANR	41121	PrimaryExpression	"""BEGIN_PROPERTY"""		41084	0					
ANR	41122	Label	case BEGIN_CONSTANT :	4735:1:124131:124150	41084	12	True				
ANR	41123	Identifier	BEGIN_CONSTANT		41084	0					
ANR	41124	ReturnStatement	"return ""BEGIN_CONSTANT"" ;"	4735:22:124152:124175	41084	13	True				
ANR	41125	PrimaryExpression	"""BEGIN_CONSTANT"""		41084	0					
ANR	41126	Label	case BEGIN_TPL :	4736:1:124178:124192	41084	14	True				
ANR	41127	Identifier	BEGIN_TPL		41084	0					
ANR	41128	ReturnStatement	"return ""BEGIN_TPL"" ;"	4736:17:124194:124212	41084	15	True				
ANR	41129	PrimaryExpression	"""BEGIN_TPL"""		41084	0					
ANR	41130	Label	case BEGIN_RULESET :	4737:1:124215:124233	41084	16	True				
ANR	41131	Identifier	BEGIN_RULESET		41084	0					
ANR	41132	ReturnStatement	"return ""BEGIN_RULESET"" ;"	4737:21:124235:124257	41084	17	True				
ANR	41133	PrimaryExpression	"""BEGIN_RULESET"""		41084	0					
ANR	41134	Label	case STOP :	4738:1:124260:124269	41084	18	True				
ANR	41135	Identifier	STOP		41084	0					
ANR	41136	ReturnStatement	"return ""STOP"" ;"	4738:12:124271:124284	41084	19	True				
ANR	41137	PrimaryExpression	"""STOP"""		41084	0					
ANR	41138	Label	case SET :	4739:1:124287:124295	41084	20	True				
ANR	41139	Identifier	SET		41084	0					
ANR	41140	ReturnStatement	"return ""SET"" ;"	4739:11:124297:124309	41084	21	True				
ANR	41141	PrimaryExpression	"""SET"""		41084	0					
ANR	41142	Label	case UNSET :	4740:1:124312:124322	41084	22	True				
ANR	41143	Identifier	UNSET		41084	0					
ANR	41144	ReturnStatement	"return ""UNSET"" ;"	4740:13:124324:124338	41084	23	True				
ANR	41145	PrimaryExpression	"""UNSET"""		41084	0					
ANR	41146	Label	case CONTINUE :	4741:1:124341:124354	41084	24	True				
ANR	41147	Identifier	CONTINUE		41084	0					
ANR	41148	ReturnStatement	"return ""CONTINUE"" ;"	4741:16:124356:124373	41084	25	True				
ANR	41149	PrimaryExpression	"""CONTINUE"""		41084	0					
ANR	41150	Label	case CALL :	4742:1:124376:124385	41084	26	True				
ANR	41151	Identifier	CALL		41084	0					
ANR	41152	ReturnStatement	"return ""CALL"" ;"	4742:12:124387:124400	41084	27	True				
ANR	41153	PrimaryExpression	"""CALL"""		41084	0					
ANR	41154	Label	case LEGACY_ACTION :	4743:1:124403:124421	41084	28	True				
ANR	41155	Identifier	LEGACY_ACTION		41084	0					
ANR	41156	ReturnStatement	"return ""LEGACY_ACTION"" ;"	4743:21:124423:124445	41084	29	True				
ANR	41157	PrimaryExpression	"""LEGACY_ACTION"""		41084	0					
ANR	41158	Label	case LEGACY_RULESET :	4744:1:124448:124467	41084	30	True				
ANR	41159	Identifier	LEGACY_RULESET		41084	0					
ANR	41160	ReturnStatement	"return ""LEGACY_RULESET"" ;"	4744:22:124469:124492	41084	31	True				
ANR	41161	PrimaryExpression	"""LEGACY_RULESET"""		41084	0					
ANR	41162	Label	case PRIFILT :	4745:1:124495:124507	41084	32	True				
ANR	41163	Identifier	PRIFILT		41084	0					
ANR	41164	ReturnStatement	"return ""PRIFILT"" ;"	4745:15:124509:124525	41084	33	True				
ANR	41165	PrimaryExpression	"""PRIFILT"""		41084	0					
ANR	41166	Label	case PROPFILT :	4746:1:124528:124541	41084	34	True				
ANR	41167	Identifier	PROPFILT		41084	0					
ANR	41168	ReturnStatement	"return ""PROPFILT"" ;"	4746:16:124543:124560	41084	35	True				
ANR	41169	PrimaryExpression	"""PROPFILT"""		41084	0					
ANR	41170	Label	case BSD_TAG_SELECTOR :	4747:1:124563:124584	41084	36	True				
ANR	41171	Identifier	BSD_TAG_SELECTOR		41084	0					
ANR	41172	ReturnStatement	"return ""BSD_TAG_SELECTOR"" ;"	4747:24:124586:124611	41084	37	True				
ANR	41173	PrimaryExpression	"""BSD_TAG_SELECTOR"""		41084	0					
ANR	41174	Label	case BSD_HOST_SELECTOR :	4748:1:124614:124636	41084	38	True				
ANR	41175	Identifier	BSD_HOST_SELECTOR		41084	0					
ANR	41176	ReturnStatement	"return ""BSD_HOST_SELECTOR"" ;"	4748:25:124638:124664	41084	39	True				
ANR	41177	PrimaryExpression	"""BSD_HOST_SELECTOR"""		41084	0					
ANR	41178	Label	case IF :	4749:1:124667:124674	41084	40	True				
ANR	41179	Identifier	IF		41084	0					
ANR	41180	ReturnStatement	"return ""IF"" ;"	4749:10:124676:124687	41084	41	True				
ANR	41181	PrimaryExpression	"""IF"""		41084	0					
ANR	41182	Label	case THEN :	4750:1:124690:124699	41084	42	True				
ANR	41183	Identifier	THEN		41084	0					
ANR	41184	ReturnStatement	"return ""THEN"" ;"	4750:12:124701:124714	41084	43	True				
ANR	41185	PrimaryExpression	"""THEN"""		41084	0					
ANR	41186	Label	case ELSE :	4751:1:124717:124726	41084	44	True				
ANR	41187	Identifier	ELSE		41084	0					
ANR	41188	ReturnStatement	"return ""ELSE"" ;"	4751:12:124728:124741	41084	45	True				
ANR	41189	PrimaryExpression	"""ELSE"""		41084	0					
ANR	41190	Label	case OR :	4752:1:124744:124751	41084	46	True				
ANR	41191	Identifier	OR		41084	0					
ANR	41192	ReturnStatement	"return ""OR"" ;"	4752:10:124753:124764	41084	47	True				
ANR	41193	PrimaryExpression	"""OR"""		41084	0					
ANR	41194	Label	case AND :	4753:1:124767:124775	41084	48	True				
ANR	41195	Identifier	AND		41084	0					
ANR	41196	ReturnStatement	"return ""AND"" ;"	4753:11:124777:124789	41084	49	True				
ANR	41197	PrimaryExpression	"""AND"""		41084	0					
ANR	41198	Label	case NOT :	4754:1:124792:124800	41084	50	True				
ANR	41199	Identifier	NOT		41084	0					
ANR	41200	ReturnStatement	"return ""NOT"" ;"	4754:11:124802:124814	41084	51	True				
ANR	41201	PrimaryExpression	"""NOT"""		41084	0					
ANR	41202	Label	case VAR :	4755:1:124817:124825	41084	52	True				
ANR	41203	Identifier	VAR		41084	0					
ANR	41204	ReturnStatement	"return ""VAR"" ;"	4755:11:124827:124839	41084	53	True				
ANR	41205	PrimaryExpression	"""VAR"""		41084	0					
ANR	41206	Label	case STRING :	4756:1:124842:124853	41084	54	True				
ANR	41207	Identifier	STRING		41084	0					
ANR	41208	ReturnStatement	"return ""STRING"" ;"	4756:14:124855:124870	41084	55	True				
ANR	41209	PrimaryExpression	"""STRING"""		41084	0					
ANR	41210	Label	case NUMBER :	4757:1:124873:124884	41084	56	True				
ANR	41211	Identifier	NUMBER		41084	0					
ANR	41212	ReturnStatement	"return ""NUMBER"" ;"	4757:14:124886:124901	41084	57	True				
ANR	41213	PrimaryExpression	"""NUMBER"""		41084	0					
ANR	41214	Label	case CMP_EQ :	4758:1:124904:124915	41084	58	True				
ANR	41215	Identifier	CMP_EQ		41084	0					
ANR	41216	ReturnStatement	"return ""CMP_EQ"" ;"	4758:14:124917:124932	41084	59	True				
ANR	41217	PrimaryExpression	"""CMP_EQ"""		41084	0					
ANR	41218	Label	case CMP_NE :	4759:1:124935:124946	41084	60	True				
ANR	41219	Identifier	CMP_NE		41084	0					
ANR	41220	ReturnStatement	"return ""CMP_NE"" ;"	4759:14:124948:124963	41084	61	True				
ANR	41221	PrimaryExpression	"""CMP_NE"""		41084	0					
ANR	41222	Label	case CMP_LE :	4760:1:124966:124977	41084	62	True				
ANR	41223	Identifier	CMP_LE		41084	0					
ANR	41224	ReturnStatement	"return ""CMP_LE"" ;"	4760:14:124979:124994	41084	63	True				
ANR	41225	PrimaryExpression	"""CMP_LE"""		41084	0					
ANR	41226	Label	case CMP_GE :	4761:1:124997:125008	41084	64	True				
ANR	41227	Identifier	CMP_GE		41084	0					
ANR	41228	ReturnStatement	"return ""CMP_GE"" ;"	4761:14:125010:125025	41084	65	True				
ANR	41229	PrimaryExpression	"""CMP_GE"""		41084	0					
ANR	41230	Label	case CMP_LT :	4762:1:125028:125039	41084	66	True				
ANR	41231	Identifier	CMP_LT		41084	0					
ANR	41232	ReturnStatement	"return ""CMP_LT"" ;"	4762:14:125041:125056	41084	67	True				
ANR	41233	PrimaryExpression	"""CMP_LT"""		41084	0					
ANR	41234	Label	case CMP_GT :	4763:1:125059:125070	41084	68	True				
ANR	41235	Identifier	CMP_GT		41084	0					
ANR	41236	ReturnStatement	"return ""CMP_GT"" ;"	4763:14:125072:125087	41084	69	True				
ANR	41237	PrimaryExpression	"""CMP_GT"""		41084	0					
ANR	41238	Label	case CMP_CONTAINS :	4764:1:125090:125107	41084	70	True				
ANR	41239	Identifier	CMP_CONTAINS		41084	0					
ANR	41240	ReturnStatement	"return ""CMP_CONTAINS"" ;"	4764:20:125109:125130	41084	71	True				
ANR	41241	PrimaryExpression	"""CMP_CONTAINS"""		41084	0					
ANR	41242	Label	case CMP_CONTAINSI :	4765:1:125133:125151	41084	72	True				
ANR	41243	Identifier	CMP_CONTAINSI		41084	0					
ANR	41244	ReturnStatement	"return ""CMP_CONTAINSI"" ;"	4765:21:125153:125175	41084	73	True				
ANR	41245	PrimaryExpression	"""CMP_CONTAINSI"""		41084	0					
ANR	41246	Label	case CMP_STARTSWITH :	4766:1:125178:125197	41084	74	True				
ANR	41247	Identifier	CMP_STARTSWITH		41084	0					
ANR	41248	ReturnStatement	"return ""CMP_STARTSWITH"" ;"	4766:22:125199:125222	41084	75	True				
ANR	41249	PrimaryExpression	"""CMP_STARTSWITH"""		41084	0					
ANR	41250	Label	case CMP_STARTSWITHI :	4767:1:125225:125245	41084	76	True				
ANR	41251	Identifier	CMP_STARTSWITHI		41084	0					
ANR	41252	ReturnStatement	"return ""CMP_STARTSWITHI"" ;"	4767:23:125247:125271	41084	77	True				
ANR	41253	PrimaryExpression	"""CMP_STARTSWITHI"""		41084	0					
ANR	41254	Label	case UMINUS :	4768:1:125274:125285	41084	78	True				
ANR	41255	Identifier	UMINUS		41084	0					
ANR	41256	ReturnStatement	"return ""UMINUS"" ;"	4768:14:125287:125302	41084	79	True				
ANR	41257	PrimaryExpression	"""UMINUS"""		41084	0					
ANR	41258	Label	default :	4769:1:125305:125312	41084	80	True				
ANR	41259	Identifier	default		41084	0					
ANR	41260	ReturnStatement	"return ""UNKNOWN TOKEN"" ;"	4769:10:125314:125336	41084	81	True				
ANR	41261	PrimaryExpression	"""UNKNOWN TOKEN"""		41084	0					
ANR	41262	ReturnType	const char *		41084	1					
ANR	41263	Identifier	tokenval2str		41084	2					
ANR	41264	ParameterList	const int tok		41084	3					
ANR	41265	Parameter	const int tok	4725:13:123862:123874	41084	0	True				
ANR	41266	ParameterType	const int		41084	0					
ANR	41267	Identifier	tok		41084	1					
ANR	41268	CFGEntryNode	ENTRY		41084		True				
ANR	41269	CFGExitNode	EXIT		41084		True				
ANR	41270	Symbol	tok		41084						
