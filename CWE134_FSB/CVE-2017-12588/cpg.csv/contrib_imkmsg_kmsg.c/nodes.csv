command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6900	File	data/converged/CVE-2017-12588_rsyslog/contrib_imkmsg_kmsg.c								
ANR	6901	DeclStmt									
ANR	6902	Decl							int	int	fklog
ANR	6903	Function	submitSyslog	56:0:1568:3634							
ANR	6904	FunctionDef	submitSyslog (uchar * buf)		6903	0					
ANR	6905	CompoundStatement		58:0:1605:3634	6903	0					
ANR	6906	IdentifierDeclStatement	long offs = 0 ;	59:1:1608:1621	6903	0	True				
ANR	6907	IdentifierDecl	offs = 0		6903	0					
ANR	6908	IdentifierDeclType	long		6903	0					
ANR	6909	Identifier	offs		6903	1					
ANR	6910	AssignmentExpression	offs = 0		6903	2		=			
ANR	6911	Identifier	offs		6903	0					
ANR	6912	PrimaryExpression	0		6903	1					
ANR	6913	IdentifierDeclStatement	struct timeval tv ;	60:1:1624:1641	6903	1	True				
ANR	6914	IdentifierDecl	tv		6903	0					
ANR	6915	IdentifierDeclType	struct timeval		6903	0					
ANR	6916	Identifier	tv		6903	1					
ANR	6917	IdentifierDeclStatement	struct sysinfo info ;	61:1:1644:1663	6903	2	True				
ANR	6918	IdentifierDecl	info		6903	0					
ANR	6919	IdentifierDeclType	struct sysinfo		6903	0					
ANR	6920	Identifier	info		6903	1					
ANR	6921	IdentifierDeclStatement	unsigned long int timestamp = 0 ;	62:1:1666:1697	6903	3	True				
ANR	6922	IdentifierDecl	timestamp = 0		6903	0					
ANR	6923	IdentifierDeclType	unsigned long int		6903	0					
ANR	6924	Identifier	timestamp		6903	1					
ANR	6925	AssignmentExpression	timestamp = 0		6903	2		=			
ANR	6926	Identifier	timestamp		6903	0					
ANR	6927	PrimaryExpression	0		6903	1					
ANR	6928	IdentifierDeclStatement	char name [ 1024 ] ;	63:1:1700:1715	6903	4	True				
ANR	6929	IdentifierDecl	name [ 1024 ]		6903	0					
ANR	6930	IdentifierDeclType	char [ 1024 ]		6903	0					
ANR	6931	Identifier	name		6903	1					
ANR	6932	PrimaryExpression	1024		6903	2					
ANR	6933	IdentifierDeclStatement	char value [ 1024 ] ;	64:1:1718:1734	6903	5	True				
ANR	6934	IdentifierDecl	value [ 1024 ]		6903	0					
ANR	6935	IdentifierDeclType	char [ 1024 ]		6903	0					
ANR	6936	Identifier	value		6903	1					
ANR	6937	PrimaryExpression	1024		6903	2					
ANR	6938	IdentifierDeclStatement	char msg [ 1024 ] ;	65:1:1737:1751	6903	6	True				
ANR	6939	IdentifierDecl	msg [ 1024 ]		6903	0					
ANR	6940	IdentifierDeclType	char [ 1024 ]		6903	0					
ANR	6941	Identifier	msg		6903	1					
ANR	6942	PrimaryExpression	1024		6903	2					
ANR	6943	IdentifierDeclStatement	syslog_pri_t priority = 0 ;	66:1:1754:1779	6903	7	True				
ANR	6944	IdentifierDecl	priority = 0		6903	0					
ANR	6945	IdentifierDeclType	syslog_pri_t		6903	0					
ANR	6946	Identifier	priority		6903	1					
ANR	6947	AssignmentExpression	priority = 0		6903	2		=			
ANR	6948	Identifier	priority		6903	0					
ANR	6949	PrimaryExpression	0		6903	1					
ANR	6950	IdentifierDeclStatement	long int sequnum = 0 ;	67:1:1782:1802	6903	8	True				
ANR	6951	IdentifierDecl	sequnum = 0		6903	0					
ANR	6952	IdentifierDeclType	long int		6903	0					
ANR	6953	Identifier	sequnum		6903	1					
ANR	6954	AssignmentExpression	sequnum = 0		6903	2		=			
ANR	6955	Identifier	sequnum		6903	0					
ANR	6956	PrimaryExpression	0		6903	1					
ANR	6957	IdentifierDeclStatement	"struct json_object * json = NULL , * jval ;"	68:1:1805:1843	6903	9	True				
ANR	6958	IdentifierDecl	* json = NULL		6903	0					
ANR	6959	IdentifierDeclType	struct json_object *		6903	0					
ANR	6960	Identifier	json		6903	1					
ANR	6961	AssignmentExpression	* json = NULL		6903	2		=			
ANR	6962	Identifier	NULL		6903	0					
ANR	6963	Identifier	NULL		6903	1					
ANR	6964	IdentifierDecl	* jval		6903	1					
ANR	6965	IdentifierDeclType	struct json_object *		6903	0					
ANR	6966	Identifier	jval		6903	1					
ANR	6967	ExpressionStatement	json = json_object_new_object ( )	71:1:1877:1908	6903	10	True				
ANR	6968	AssignmentExpression	json = json_object_new_object ( )		6903	0		=			
ANR	6969	Identifier	json		6903	0					
ANR	6970	CallExpression	json_object_new_object ( )		6903	1					
ANR	6971	Callee	json_object_new_object		6903	0					
ANR	6972	Identifier	json_object_new_object		6903	0					
ANR	6973	ArgumentList			6903	1					
ANR	6974	ForStatement	for ( ; isdigit ( * buf ) ; buf ++ )		6903	11					
ANR	6975	Condition	isdigit ( * buf )	74:8:1939:1951	6903	0	True				
ANR	6976	CallExpression	isdigit ( * buf )		6903	0					
ANR	6977	Callee	isdigit		6903	0					
ANR	6978	Identifier	isdigit		6903	0					
ANR	6979	ArgumentList	* buf		6903	1					
ANR	6980	Argument	* buf		6903	0					
ANR	6981	UnaryOperationExpression	* buf		6903	0					
ANR	6982	UnaryOperator	*		6903	0					
ANR	6983	Identifier	buf		6903	1					
ANR	6984	PostIncDecOperationExpression	buf ++	74:23:1954:1958	6903	1	True				
ANR	6985	Identifier	buf		6903	0					
ANR	6986	IncDec	++		6903	1					
ANR	6987	CompoundStatement		17:30:355:355	6903	2					
ANR	6988	ExpressionStatement	priority = ( priority * 10 ) + ( * buf - '0' )	75:2:1965:2006	6903	0	True				
ANR	6989	AssignmentExpression	priority = ( priority * 10 ) + ( * buf - '0' )		6903	0		=			
ANR	6990	Identifier	priority		6903	0					
ANR	6991	AdditiveExpression	( priority * 10 ) + ( * buf - '0' )		6903	1		+			
ANR	6992	MultiplicativeExpression	priority * 10		6903	0		*			
ANR	6993	Identifier	priority		6903	0					
ANR	6994	PrimaryExpression	10		6903	1					
ANR	6995	AdditiveExpression	* buf - '0'		6903	1		-			
ANR	6996	UnaryOperationExpression	* buf		6903	0					
ANR	6997	UnaryOperator	*		6903	0					
ANR	6998	Identifier	buf		6903	1					
ANR	6999	PrimaryExpression	'0'		6903	1					
ANR	7000	ExpressionStatement	buf ++	77:1:2012:2017	6903	12	True				
ANR	7001	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7002	Identifier	buf		6903	0					
ANR	7003	IncDec	++		6903	1					
ANR	7004	ForStatement	for ( ; isdigit ( * buf ) ; buf ++ )		6903	13					
ANR	7005	Condition	isdigit ( * buf )	80:8:2083:2095	6903	0	True				
ANR	7006	CallExpression	isdigit ( * buf )		6903	0					
ANR	7007	Callee	isdigit		6903	0					
ANR	7008	Identifier	isdigit		6903	0					
ANR	7009	ArgumentList	* buf		6903	1					
ANR	7010	Argument	* buf		6903	0					
ANR	7011	UnaryOperationExpression	* buf		6903	0					
ANR	7012	UnaryOperator	*		6903	0					
ANR	7013	Identifier	buf		6903	1					
ANR	7014	PostIncDecOperationExpression	buf ++	80:23:2098:2102	6903	1	True				
ANR	7015	Identifier	buf		6903	0					
ANR	7016	IncDec	++		6903	1					
ANR	7017	CompoundStatement		23:30:499:499	6903	2					
ANR	7018	ExpressionStatement	sequnum = ( sequnum * 10 ) + ( * buf - '0' )	81:2:2109:2148	6903	0	True				
ANR	7019	AssignmentExpression	sequnum = ( sequnum * 10 ) + ( * buf - '0' )		6903	0		=			
ANR	7020	Identifier	sequnum		6903	0					
ANR	7021	AdditiveExpression	( sequnum * 10 ) + ( * buf - '0' )		6903	1		+			
ANR	7022	MultiplicativeExpression	sequnum * 10		6903	0		*			
ANR	7023	Identifier	sequnum		6903	0					
ANR	7024	PrimaryExpression	10		6903	1					
ANR	7025	AdditiveExpression	* buf - '0'		6903	1		-			
ANR	7026	UnaryOperationExpression	* buf		6903	0					
ANR	7027	UnaryOperator	*		6903	0					
ANR	7028	Identifier	buf		6903	1					
ANR	7029	PrimaryExpression	'0'		6903	1					
ANR	7030	ExpressionStatement	buf ++	83:1:2154:2159	6903	14	True				
ANR	7031	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7032	Identifier	buf		6903	0					
ANR	7033	IncDec	++		6903	1					
ANR	7034	ExpressionStatement	jval = json_object_new_int ( sequnum )	84:1:2175:2210	6903	15	True				
ANR	7035	AssignmentExpression	jval = json_object_new_int ( sequnum )		6903	0		=			
ANR	7036	Identifier	jval		6903	0					
ANR	7037	CallExpression	json_object_new_int ( sequnum )		6903	1					
ANR	7038	Callee	json_object_new_int		6903	0					
ANR	7039	Identifier	json_object_new_int		6903	0					
ANR	7040	ArgumentList	sequnum		6903	1					
ANR	7041	Argument	sequnum		6903	0					
ANR	7042	Identifier	sequnum		6903	0					
ANR	7043	ExpressionStatement	"json_object_object_add ( json , ""sequnum"" , jval )"	85:1:2213:2258	6903	16	True				
ANR	7044	CallExpression	"json_object_object_add ( json , ""sequnum"" , jval )"		6903	0					
ANR	7045	Callee	json_object_object_add		6903	0					
ANR	7046	Identifier	json_object_object_add		6903	0					
ANR	7047	ArgumentList	json		6903	1					
ANR	7048	Argument	json		6903	0					
ANR	7049	Identifier	json		6903	0					
ANR	7050	Argument	"""sequnum"""		6903	1					
ANR	7051	PrimaryExpression	"""sequnum"""		6903	0					
ANR	7052	Argument	jval		6903	2					
ANR	7053	Identifier	jval		6903	0					
ANR	7054	ForStatement	for ( ; isdigit ( * buf ) ; buf ++ )		6903	17					
ANR	7055	Condition	isdigit ( * buf )	88:8:2290:2302	6903	0	True				
ANR	7056	CallExpression	isdigit ( * buf )		6903	0					
ANR	7057	Callee	isdigit		6903	0					
ANR	7058	Identifier	isdigit		6903	0					
ANR	7059	ArgumentList	* buf		6903	1					
ANR	7060	Argument	* buf		6903	0					
ANR	7061	UnaryOperationExpression	* buf		6903	0					
ANR	7062	UnaryOperator	*		6903	0					
ANR	7063	Identifier	buf		6903	1					
ANR	7064	PostIncDecOperationExpression	buf ++	88:23:2305:2309	6903	1	True				
ANR	7065	Identifier	buf		6903	0					
ANR	7066	IncDec	++		6903	1					
ANR	7067	CompoundStatement		31:30:706:706	6903	2					
ANR	7068	ExpressionStatement	timestamp = ( timestamp * 10 ) + ( * buf - '0' )	89:2:2316:2359	6903	0	True				
ANR	7069	AssignmentExpression	timestamp = ( timestamp * 10 ) + ( * buf - '0' )		6903	0		=			
ANR	7070	Identifier	timestamp		6903	0					
ANR	7071	AdditiveExpression	( timestamp * 10 ) + ( * buf - '0' )		6903	1		+			
ANR	7072	MultiplicativeExpression	timestamp * 10		6903	0		*			
ANR	7073	Identifier	timestamp		6903	0					
ANR	7074	PrimaryExpression	10		6903	1					
ANR	7075	AdditiveExpression	* buf - '0'		6903	1		-			
ANR	7076	UnaryOperationExpression	* buf		6903	0					
ANR	7077	UnaryOperator	*		6903	0					
ANR	7078	Identifier	buf		6903	1					
ANR	7079	PrimaryExpression	'0'		6903	1					
ANR	7080	WhileStatement	while ( * buf != ';' )		6903	18					
ANR	7081	Condition	* buf != ';'	92:8:2373:2383	6903	0	True				
ANR	7082	EqualityExpression	* buf != ';'		6903	0		!=			
ANR	7083	UnaryOperationExpression	* buf		6903	0					
ANR	7084	UnaryOperator	*		6903	0					
ANR	7085	Identifier	buf		6903	1					
ANR	7086	PrimaryExpression	';'		6903	1					
ANR	7087	CompoundStatement		35:21:780:780	6903	1					
ANR	7088	ExpressionStatement	buf ++	93:2:2390:2395	6903	0	True				
ANR	7089	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7090	Identifier	buf		6903	0					
ANR	7091	IncDec	++		6903	1					
ANR	7092	ExpressionStatement	buf ++	95:1:2440:2445	6903	19	True				
ANR	7093	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7094	Identifier	buf		6903	0					
ANR	7095	IncDec	++		6903	1					
ANR	7096	ExpressionStatement	offs = 0	98:1:2481:2489	6903	20	True				
ANR	7097	AssignmentExpression	offs = 0		6903	0		=			
ANR	7098	Identifier	offs		6903	0					
ANR	7099	PrimaryExpression	0		6903	1					
ANR	7100	ForStatement	"for ( ; * buf != '\\n' && * buf != '\\0' ; buf ++ , offs ++ )"		6903	21					
ANR	7101	Condition	* buf != '\\n' && * buf != '\\0'	99:8:2499:2526	6903	0	True				
ANR	7102	AndExpression	* buf != '\\n' && * buf != '\\0'		6903	0		&&			
ANR	7103	EqualityExpression	* buf != '\\n'		6903	0		!=			
ANR	7104	UnaryOperationExpression	* buf		6903	0					
ANR	7105	UnaryOperator	*		6903	0					
ANR	7106	Identifier	buf		6903	1					
ANR	7107	PrimaryExpression	'\\n'		6903	1					
ANR	7108	EqualityExpression	* buf != '\\0'		6903	1		!=			
ANR	7109	UnaryOperationExpression	* buf		6903	0					
ANR	7110	UnaryOperator	*		6903	0					
ANR	7111	Identifier	buf		6903	1					
ANR	7112	PrimaryExpression	'\\0'		6903	1					
ANR	7113	Expression	"buf ++ , offs ++"	99:38:2529:2541	6903	1	True				
ANR	7114	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7115	Identifier	buf		6903	0					
ANR	7116	IncDec	++		6903	1					
ANR	7117	PostIncDecOperationExpression	offs ++		6903	1					
ANR	7118	Identifier	offs		6903	0					
ANR	7119	IncDec	++		6903	1					
ANR	7120	CompoundStatement		42:53:938:938	6903	2					
ANR	7121	ExpressionStatement	msg [ offs ] = * buf	100:2:2548:2564	6903	0	True				
ANR	7122	AssignmentExpression	msg [ offs ] = * buf		6903	0		=			
ANR	7123	ArrayIndexing	msg [ offs ]		6903	0					
ANR	7124	Identifier	msg		6903	0					
ANR	7125	Identifier	offs		6903	1					
ANR	7126	UnaryOperationExpression	* buf		6903	1					
ANR	7127	UnaryOperator	*		6903	0					
ANR	7128	Identifier	buf		6903	1					
ANR	7129	ExpressionStatement	msg [ offs ] = '\\0'	102:1:2570:2586	6903	22	True				
ANR	7130	AssignmentExpression	msg [ offs ] = '\\0'		6903	0		=			
ANR	7131	ArrayIndexing	msg [ offs ]		6903	0					
ANR	7132	Identifier	msg		6903	0					
ANR	7133	Identifier	offs		6903	1					
ANR	7134	PrimaryExpression	'\\0'		6903	1					
ANR	7135	ExpressionStatement	jval = json_object_new_string ( ( char * ) msg )	103:1:2589:2630	6903	23	True				
ANR	7136	AssignmentExpression	jval = json_object_new_string ( ( char * ) msg )		6903	0		=			
ANR	7137	Identifier	jval		6903	0					
ANR	7138	CallExpression	json_object_new_string ( ( char * ) msg )		6903	1					
ANR	7139	Callee	json_object_new_string		6903	0					
ANR	7140	Identifier	json_object_new_string		6903	0					
ANR	7141	ArgumentList	( char * ) msg		6903	1					
ANR	7142	Argument	( char * ) msg		6903	0					
ANR	7143	CastExpression	( char * ) msg		6903	0					
ANR	7144	CastTarget	char *		6903	0					
ANR	7145	Identifier	msg		6903	1					
ANR	7146	ExpressionStatement	"json_object_object_add ( json , ""msg"" , jval )"	104:1:2633:2674	6903	24	True				
ANR	7147	CallExpression	"json_object_object_add ( json , ""msg"" , jval )"		6903	0					
ANR	7148	Callee	json_object_object_add		6903	0					
ANR	7149	Identifier	json_object_object_add		6903	0					
ANR	7150	ArgumentList	json		6903	1					
ANR	7151	Argument	json		6903	0					
ANR	7152	Identifier	json		6903	0					
ANR	7153	Argument	"""msg"""		6903	1					
ANR	7154	PrimaryExpression	"""msg"""		6903	0					
ANR	7155	Argument	jval		6903	2					
ANR	7156	Identifier	jval		6903	0					
ANR	7157	IfStatement	if ( * buf != '\\0' )		6903	25					
ANR	7158	Condition	* buf != '\\0'	106:5:2682:2693	6903	0	True				
ANR	7159	EqualityExpression	* buf != '\\0'		6903	0		!=			
ANR	7160	UnaryOperationExpression	* buf		6903	0					
ANR	7161	UnaryOperator	*		6903	0					
ANR	7162	Identifier	buf		6903	1					
ANR	7163	PrimaryExpression	'\\0'		6903	1					
ANR	7164	ExpressionStatement	buf ++	107:2:2745:2750	6903	1	True				
ANR	7165	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7166	Identifier	buf		6903	0					
ANR	7167	IncDec	++		6903	1					
ANR	7168	WhileStatement	while ( * buf )		6903	26					
ANR	7169	Condition	* buf	109:8:2761:2764	6903	0	True				
ANR	7170	UnaryOperationExpression	* buf		6903	0					
ANR	7171	UnaryOperator	*		6903	0					
ANR	7172	Identifier	buf		6903	1					
ANR	7173	CompoundStatement		52:14:1161:1161	6903	1					
ANR	7174	ExpressionStatement	buf ++	111:2:2804:2809	6903	0	True				
ANR	7175	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7176	Identifier	buf		6903	0					
ANR	7177	IncDec	++		6903	1					
ANR	7178	ExpressionStatement	offs = 0	112:2:2828:2836	6903	1	True				
ANR	7179	AssignmentExpression	offs = 0		6903	0		=			
ANR	7180	Identifier	offs		6903	0					
ANR	7181	PrimaryExpression	0		6903	1					
ANR	7182	ForStatement	"for ( ; * buf != '=' && * buf != ' ' ; buf ++ , offs ++ )"		6903	2					
ANR	7183	Condition	* buf != '=' && * buf != ' '	113:9:2847:2872	6903	0	True				
ANR	7184	AndExpression	* buf != '=' && * buf != ' '		6903	0		&&			
ANR	7185	EqualityExpression	* buf != '='		6903	0		!=			
ANR	7186	UnaryOperationExpression	* buf		6903	0					
ANR	7187	UnaryOperator	*		6903	0					
ANR	7188	Identifier	buf		6903	1					
ANR	7189	PrimaryExpression	'='		6903	1					
ANR	7190	EqualityExpression	* buf != ' '		6903	1		!=			
ANR	7191	UnaryOperationExpression	* buf		6903	0					
ANR	7192	UnaryOperator	*		6903	0					
ANR	7193	Identifier	buf		6903	1					
ANR	7194	PrimaryExpression	' '		6903	1					
ANR	7195	Expression	"buf ++ , offs ++"	113:37:2875:2887	6903	1	True				
ANR	7196	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7197	Identifier	buf		6903	0					
ANR	7198	IncDec	++		6903	1					
ANR	7199	PostIncDecOperationExpression	offs ++		6903	1					
ANR	7200	Identifier	offs		6903	0					
ANR	7201	IncDec	++		6903	1					
ANR	7202	CompoundStatement		56:52:1284:1284	6903	2					
ANR	7203	ExpressionStatement	name [ offs ] = * buf	114:3:2895:2912	6903	0	True				
ANR	7204	AssignmentExpression	name [ offs ] = * buf		6903	0		=			
ANR	7205	ArrayIndexing	name [ offs ]		6903	0					
ANR	7206	Identifier	name		6903	0					
ANR	7207	Identifier	offs		6903	1					
ANR	7208	UnaryOperationExpression	* buf		6903	1					
ANR	7209	UnaryOperator	*		6903	0					
ANR	7210	Identifier	buf		6903	1					
ANR	7211	ExpressionStatement	name [ offs ] = '\\0'	116:2:2920:2937	6903	3	True				
ANR	7212	AssignmentExpression	name [ offs ] = '\\0'		6903	0		=			
ANR	7213	ArrayIndexing	name [ offs ]		6903	0					
ANR	7214	Identifier	name		6903	0					
ANR	7215	Identifier	offs		6903	1					
ANR	7216	PrimaryExpression	'\\0'		6903	1					
ANR	7217	ExpressionStatement	buf ++	117:2:2941:2946	6903	4	True				
ANR	7218	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7219	Identifier	buf		6903	0					
ANR	7220	IncDec	++		6903	1					
ANR	7221	ExpressionStatement		117:28:2967:2967	6903	5	True				
ANR	7222	ExpressionStatement	offs = 0	119:2:2972:2980	6903	6	True				
ANR	7223	AssignmentExpression	offs = 0		6903	0		=			
ANR	7224	Identifier	offs		6903	0					
ANR	7225	PrimaryExpression	0		6903	1					
ANR	7226	ForStatement	"for ( ; * buf != '\\n' && * buf != '\\0' ; buf ++ , offs ++ )"		6903	7					
ANR	7227	Condition	* buf != '\\n' && * buf != '\\0'	120:9:2991:3018	6903	0	True				
ANR	7228	AndExpression	* buf != '\\n' && * buf != '\\0'		6903	0		&&			
ANR	7229	EqualityExpression	* buf != '\\n'		6903	0		!=			
ANR	7230	UnaryOperationExpression	* buf		6903	0					
ANR	7231	UnaryOperator	*		6903	0					
ANR	7232	Identifier	buf		6903	1					
ANR	7233	PrimaryExpression	'\\n'		6903	1					
ANR	7234	EqualityExpression	* buf != '\\0'		6903	1		!=			
ANR	7235	UnaryOperationExpression	* buf		6903	0					
ANR	7236	UnaryOperator	*		6903	0					
ANR	7237	Identifier	buf		6903	1					
ANR	7238	PrimaryExpression	'\\0'		6903	1					
ANR	7239	Expression	"buf ++ , offs ++"	120:39:3021:3033	6903	1	True				
ANR	7240	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7241	Identifier	buf		6903	0					
ANR	7242	IncDec	++		6903	1					
ANR	7243	PostIncDecOperationExpression	offs ++		6903	1					
ANR	7244	Identifier	offs		6903	0					
ANR	7245	IncDec	++		6903	1					
ANR	7246	CompoundStatement		63:54:1430:1430	6903	2					
ANR	7247	ExpressionStatement	value [ offs ] = * buf	121:3:3041:3059	6903	0	True				
ANR	7248	AssignmentExpression	value [ offs ] = * buf		6903	0		=			
ANR	7249	ArrayIndexing	value [ offs ]		6903	0					
ANR	7250	Identifier	value		6903	0					
ANR	7251	Identifier	offs		6903	1					
ANR	7252	UnaryOperationExpression	* buf		6903	1					
ANR	7253	UnaryOperator	*		6903	0					
ANR	7254	Identifier	buf		6903	1					
ANR	7255	ExpressionStatement	value [ offs ] = '\\0'	123:2:3067:3085	6903	8	True				
ANR	7256	AssignmentExpression	value [ offs ] = '\\0'		6903	0		=			
ANR	7257	ArrayIndexing	value [ offs ]		6903	0					
ANR	7258	Identifier	value		6903	0					
ANR	7259	Identifier	offs		6903	1					
ANR	7260	PrimaryExpression	'\\0'		6903	1					
ANR	7261	IfStatement	if ( * buf != '\\0' )		6903	9					
ANR	7262	Condition	* buf != '\\0'	124:6:3093:3104	6903	0	True				
ANR	7263	EqualityExpression	* buf != '\\0'		6903	0		!=			
ANR	7264	UnaryOperationExpression	* buf		6903	0					
ANR	7265	UnaryOperator	*		6903	0					
ANR	7266	Identifier	buf		6903	1					
ANR	7267	PrimaryExpression	'\\0'		6903	1					
ANR	7268	CompoundStatement		67:20:1501:1501	6903	1					
ANR	7269	ExpressionStatement	buf ++	125:3:3112:3117	6903	0	True				
ANR	7270	PostIncDecOperationExpression	buf ++		6903	0					
ANR	7271	Identifier	buf		6903	0					
ANR	7272	IncDec	++		6903	1					
ANR	7273	ExpressionStatement	jval = json_object_new_string ( ( char * ) value )	128:2:3158:3201	6903	10	True				
ANR	7274	AssignmentExpression	jval = json_object_new_string ( ( char * ) value )		6903	0		=			
ANR	7275	Identifier	jval		6903	0					
ANR	7276	CallExpression	json_object_new_string ( ( char * ) value )		6903	1					
ANR	7277	Callee	json_object_new_string		6903	0					
ANR	7278	Identifier	json_object_new_string		6903	0					
ANR	7279	ArgumentList	( char * ) value		6903	1					
ANR	7280	Argument	( char * ) value		6903	0					
ANR	7281	CastExpression	( char * ) value		6903	0					
ANR	7282	CastTarget	char *		6903	0					
ANR	7283	Identifier	value		6903	1					
ANR	7284	ExpressionStatement	"json_object_object_add ( json , name , jval )"	129:2:3205:3245	6903	11	True				
ANR	7285	CallExpression	"json_object_object_add ( json , name , jval )"		6903	0					
ANR	7286	Callee	json_object_object_add		6903	0					
ANR	7287	Identifier	json_object_object_add		6903	0					
ANR	7288	ArgumentList	json		6903	1					
ANR	7289	Argument	json		6903	0					
ANR	7290	Identifier	json		6903	0					
ANR	7291	Argument	name		6903	1					
ANR	7292	Identifier	name		6903	0					
ANR	7293	Argument	jval		6903	2					
ANR	7294	Identifier	jval		6903	0					
ANR	7295	ExpressionStatement	sysinfo ( & info )	133:1:3279:3293	6903	27	True				
ANR	7296	CallExpression	sysinfo ( & info )		6903	0					
ANR	7297	Callee	sysinfo		6903	0					
ANR	7298	Identifier	sysinfo		6903	0					
ANR	7299	ArgumentList	& info		6903	1					
ANR	7300	Argument	& info		6903	0					
ANR	7301	UnaryOperationExpression	& info		6903	0					
ANR	7302	UnaryOperator	&		6903	0					
ANR	7303	Identifier	info		6903	1					
ANR	7304	ExpressionStatement	"gettimeofday ( & tv , NULL )"	134:1:3296:3319	6903	28	True				
ANR	7305	CallExpression	"gettimeofday ( & tv , NULL )"		6903	0					
ANR	7306	Callee	gettimeofday		6903	0					
ANR	7307	Identifier	gettimeofday		6903	0					
ANR	7308	ArgumentList	& tv		6903	1					
ANR	7309	Argument	& tv		6903	0					
ANR	7310	UnaryOperationExpression	& tv		6903	0					
ANR	7311	UnaryOperator	&		6903	0					
ANR	7312	Identifier	tv		6903	1					
ANR	7313	Argument	NULL		6903	1					
ANR	7314	Identifier	NULL		6903	0					
ANR	7315	ExpressionStatement	tv . tv_sec -= info . uptime	137:1:3344:3368	6903	29	True				
ANR	7316	AssignmentExpression	tv . tv_sec -= info . uptime		6903	0		-=			
ANR	7317	MemberAccess	tv . tv_sec		6903	0					
ANR	7318	Identifier	tv		6903	0					
ANR	7319	Identifier	tv_sec		6903	1					
ANR	7320	MemberAccess	info . uptime		6903	1					
ANR	7321	Identifier	info		6903	0					
ANR	7322	Identifier	uptime		6903	1					
ANR	7323	ExpressionStatement	tv . tv_sec += timestamp / 1000000	139:1:3372:3404	6903	30	True				
ANR	7324	AssignmentExpression	tv . tv_sec += timestamp / 1000000		6903	0		+=			
ANR	7325	MemberAccess	tv . tv_sec		6903	0					
ANR	7326	Identifier	tv		6903	0					
ANR	7327	Identifier	tv_sec		6903	1					
ANR	7328	MultiplicativeExpression	timestamp / 1000000		6903	1		/			
ANR	7329	Identifier	timestamp		6903	0					
ANR	7330	PrimaryExpression	1000000		6903	1					
ANR	7331	ExpressionStatement	tv . tv_usec += timestamp % 1000000	140:1:3407:3440	6903	31	True				
ANR	7332	AssignmentExpression	tv . tv_usec += timestamp % 1000000		6903	0		+=			
ANR	7333	MemberAccess	tv . tv_usec		6903	0					
ANR	7334	Identifier	tv		6903	0					
ANR	7335	Identifier	tv_usec		6903	1					
ANR	7336	MultiplicativeExpression	timestamp % 1000000		6903	1		%			
ANR	7337	Identifier	timestamp		6903	0					
ANR	7338	PrimaryExpression	1000000		6903	1					
ANR	7339	WhileStatement	while ( tv . tv_usec < 0 )		6903	32					
ANR	7340	Condition	tv . tv_usec < 0	142:8:3451:3464	6903	0	True				
ANR	7341	RelationalExpression	tv . tv_usec < 0		6903	0		<			
ANR	7342	MemberAccess	tv . tv_usec		6903	0					
ANR	7343	Identifier	tv		6903	0					
ANR	7344	Identifier	tv_usec		6903	1					
ANR	7345	PrimaryExpression	0		6903	1					
ANR	7346	CompoundStatement		85:24:1861:1861	6903	1					
ANR	7347	ExpressionStatement	tv . tv_sec --	143:2:3471:3482	6903	0	True				
ANR	7348	PostIncDecOperationExpression	tv . tv_sec --		6903	0					
ANR	7349	MemberAccess	tv . tv_sec		6903	0					
ANR	7350	Identifier	tv		6903	0					
ANR	7351	Identifier	tv_sec		6903	1					
ANR	7352	IncDec	--		6903	1					
ANR	7353	ExpressionStatement	tv . tv_usec += 1000000	144:2:3486:3507	6903	1	True				
ANR	7354	AssignmentExpression	tv . tv_usec += 1000000		6903	0		+=			
ANR	7355	MemberAccess	tv . tv_usec		6903	0					
ANR	7356	Identifier	tv		6903	0					
ANR	7357	Identifier	tv_usec		6903	1					
ANR	7358	PrimaryExpression	1000000		6903	1					
ANR	7359	WhileStatement	while ( tv . tv_usec >= 1000000 )		6903	33					
ANR	7360	Condition	tv . tv_usec >= 1000000	147:8:3521:3541	6903	0	True				
ANR	7361	RelationalExpression	tv . tv_usec >= 1000000		6903	0		>=			
ANR	7362	MemberAccess	tv . tv_usec		6903	0					
ANR	7363	Identifier	tv		6903	0					
ANR	7364	Identifier	tv_usec		6903	1					
ANR	7365	PrimaryExpression	1000000		6903	1					
ANR	7366	CompoundStatement		90:31:1938:1938	6903	1					
ANR	7367	ExpressionStatement	tv . tv_sec ++	148:2:3548:3559	6903	0	True				
ANR	7368	PostIncDecOperationExpression	tv . tv_sec ++		6903	0					
ANR	7369	MemberAccess	tv . tv_sec		6903	0					
ANR	7370	Identifier	tv		6903	0					
ANR	7371	Identifier	tv_sec		6903	1					
ANR	7372	IncDec	++		6903	1					
ANR	7373	ExpressionStatement	tv . tv_usec -= 1000000	149:2:3563:3584	6903	1	True				
ANR	7374	AssignmentExpression	tv . tv_usec -= 1000000		6903	0		-=			
ANR	7375	MemberAccess	tv . tv_usec		6903	0					
ANR	7376	Identifier	tv		6903	0					
ANR	7377	Identifier	tv_usec		6903	1					
ANR	7378	PrimaryExpression	1000000		6903	1					
ANR	7379	ExpressionStatement	"Syslog ( priority , ( uchar * ) msg , & tv , json )"	152:1:3591:3632	6903	34	True				
ANR	7380	CallExpression	"Syslog ( priority , ( uchar * ) msg , & tv , json )"		6903	0					
ANR	7381	Callee	Syslog		6903	0					
ANR	7382	Identifier	Syslog		6903	0					
ANR	7383	ArgumentList	priority		6903	1					
ANR	7384	Argument	priority		6903	0					
ANR	7385	Identifier	priority		6903	0					
ANR	7386	Argument	( uchar * ) msg		6903	1					
ANR	7387	CastExpression	( uchar * ) msg		6903	0					
ANR	7388	CastTarget	uchar *		6903	0					
ANR	7389	Identifier	msg		6903	1					
ANR	7390	Argument	& tv		6903	2					
ANR	7391	UnaryOperationExpression	& tv		6903	0					
ANR	7392	UnaryOperator	&		6903	0					
ANR	7393	Identifier	tv		6903	1					
ANR	7394	Argument	json		6903	3					
ANR	7395	Identifier	json		6903	0					
ANR	7396	ReturnType	static void		6903	1					
ANR	7397	Identifier	submitSyslog		6903	2					
ANR	7398	ParameterList	uchar * buf		6903	3					
ANR	7399	Parameter	uchar * buf	57:13:1593:1602	6903	0	True				
ANR	7400	ParameterType	uchar *		6903	0					
ANR	7401	Identifier	buf		6903	1					
ANR	7402	CFGEntryNode	ENTRY		6903		True				
ANR	7403	CFGExitNode	EXIT		6903		True				
ANR	7404	Symbol	msg		6903						
ANR	7405	Symbol	tv . tv_sec		6903						
ANR	7406	Symbol	json_object_new_object		6903						
ANR	7407	Symbol	tv		6903						
ANR	7408	Symbol	json_object_new_string		6903						
ANR	7409	Symbol	jval		6903						
ANR	7410	Symbol	offs		6903						
ANR	7411	Symbol	info . uptime		6903						
ANR	7412	Symbol	json		6903						
ANR	7413	Symbol	value		6903						
ANR	7414	Symbol	isdigit		6903						
ANR	7415	Symbol	info		6903						
ANR	7416	Symbol	timestamp		6903						
ANR	7417	Symbol	* name		6903						
ANR	7418	Symbol	tv . tv_usec		6903						
ANR	7419	Symbol	* buf		6903						
ANR	7420	Symbol	NULL		6903						
ANR	7421	Symbol	& info		6903						
ANR	7422	Symbol	sequnum		6903						
ANR	7423	Symbol	* msg		6903						
ANR	7424	Symbol	priority		6903						
ANR	7425	Symbol	json_object_new_int		6903						
ANR	7426	Symbol	& tv		6903						
ANR	7427	Symbol	buf		6903						
ANR	7428	Symbol	* value		6903						
ANR	7429	Symbol	name		6903						
ANR	7430	Symbol	* offs		6903						
ANR	7431	Function	klogWillRunPrePrivDrop	158:0:3722:4070							
ANR	7432	FunctionDef	klogWillRunPrePrivDrop (modConfData_t * pModConf)		7431	0					
ANR	7433	CompoundStatement		160:0:3779:4070	7431	0					
ANR	7434	IdentifierDeclStatement	char errmsg [ 2048 ] ;	161:1:3782:3799	7431	0	True				
ANR	7435	IdentifierDecl	errmsg [ 2048 ]		7431	0					
ANR	7436	IdentifierDeclType	char [ 2048 ]		7431	0					
ANR	7437	Identifier	errmsg		7431	1					
ANR	7438	PrimaryExpression	2048		7431	2					
ANR	7439	ExpressionStatement	DEFiRet	162:1:3802:3809	7431	1	True				
ANR	7440	Identifier	DEFiRet		7431	0					
ANR	7441	ExpressionStatement	"fklog = open ( _PATH_KLOG , O_RDONLY , 0 )"	164:1:3813:3850	7431	2	True				
ANR	7442	AssignmentExpression	"fklog = open ( _PATH_KLOG , O_RDONLY , 0 )"		7431	0		=			
ANR	7443	Identifier	fklog		7431	0					
ANR	7444	CallExpression	"open ( _PATH_KLOG , O_RDONLY , 0 )"		7431	1					
ANR	7445	Callee	open		7431	0					
ANR	7446	Identifier	open		7431	0					
ANR	7447	ArgumentList	_PATH_KLOG		7431	1					
ANR	7448	Argument	_PATH_KLOG		7431	0					
ANR	7449	Identifier	_PATH_KLOG		7431	0					
ANR	7450	Argument	O_RDONLY		7431	1					
ANR	7451	Identifier	O_RDONLY		7431	0					
ANR	7452	Argument	0		7431	2					
ANR	7453	PrimaryExpression	0		7431	0					
ANR	7454	IfStatement	if ( fklog < 0 )		7431	3					
ANR	7455	Condition	fklog < 0	165:5:3857:3865	7431	0	True				
ANR	7456	RelationalExpression	fklog < 0		7431	0		<			
ANR	7457	Identifier	fklog		7431	0					
ANR	7458	PrimaryExpression	0		7431	1					
ANR	7459	CompoundStatement		6:16:88:88	7431	1					
ANR	7460	ExpressionStatement	"imkmsgLogIntMsg ( LOG_ERR , ""imkmsg: cannot open kernel log (%s): %s."" , _PATH_KLOG , rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) ) )"	166:2:3872:4001	7431	0	True				
ANR	7461	CallExpression	"imkmsgLogIntMsg ( LOG_ERR , ""imkmsg: cannot open kernel log (%s): %s."" , _PATH_KLOG , rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) ) )"		7431	0					
ANR	7462	Callee	imkmsgLogIntMsg		7431	0					
ANR	7463	Identifier	imkmsgLogIntMsg		7431	0					
ANR	7464	ArgumentList	LOG_ERR		7431	1					
ANR	7465	Argument	LOG_ERR		7431	0					
ANR	7466	Identifier	LOG_ERR		7431	0					
ANR	7467	Argument	"""imkmsg: cannot open kernel log (%s): %s."""		7431	1					
ANR	7468	PrimaryExpression	"""imkmsg: cannot open kernel log (%s): %s."""		7431	0					
ANR	7469	Argument	_PATH_KLOG		7431	2					
ANR	7470	Identifier	_PATH_KLOG		7431	0					
ANR	7471	Argument	"rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) )"		7431	3					
ANR	7472	CallExpression	"rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) )"		7431	0					
ANR	7473	Callee	rs_strerror_r		7431	0					
ANR	7474	Identifier	rs_strerror_r		7431	0					
ANR	7475	ArgumentList	errno		7431	1					
ANR	7476	Argument	errno		7431	0					
ANR	7477	Identifier	errno		7431	0					
ANR	7478	Argument	errmsg		7431	1					
ANR	7479	Identifier	errmsg		7431	0					
ANR	7480	Argument	sizeof ( errmsg )		7431	2					
ANR	7481	SizeofExpression	sizeof ( errmsg )		7431	0					
ANR	7482	Sizeof	sizeof		7431	0					
ANR	7483	SizeofOperand	errmsg		7431	1					
ANR	7484	ExpressionStatement	ABORT_FINALIZE ( RS_RET_ERR_OPEN_KLOG )	168:2:4005:4041	7431	1	True				
ANR	7485	CallExpression	ABORT_FINALIZE ( RS_RET_ERR_OPEN_KLOG )		7431	0					
ANR	7486	Callee	ABORT_FINALIZE		7431	0					
ANR	7487	Identifier	ABORT_FINALIZE		7431	0					
ANR	7488	ArgumentList	RS_RET_ERR_OPEN_KLOG		7431	1					
ANR	7489	Argument	RS_RET_ERR_OPEN_KLOG		7431	0					
ANR	7490	Identifier	RS_RET_ERR_OPEN_KLOG		7431	0					
ANR	7491	Label	finalize_it :	171:0:4047:4058	7431	4	True				
ANR	7492	Identifier	finalize_it		7431	0					
ANR	7493	ExpressionStatement	RETiRet	172:1:4061:4068	7431	5	True				
ANR	7494	Identifier	RETiRet		7431	0					
ANR	7495	ReturnType	rsRetVal		7431	1					
ANR	7496	Identifier	klogWillRunPrePrivDrop		7431	2					
ANR	7497	ParameterList	modConfData_t * pModConf		7431	3					
ANR	7498	Parameter	modConfData_t * pModConf	159:23:3754:3776	7431	0	True				
ANR	7499	ParameterType	modConfData_t *		7431	0					
ANR	7500	Identifier	pModConf		7431	1					
ANR	7501	CFGEntryNode	ENTRY		7431		True				
ANR	7502	CFGExitNode	EXIT		7431		True				
ANR	7503	Symbol	fklog		7431						
ANR	7504	Symbol	_PATH_KLOG		7431						
ANR	7505	Symbol	errno		7431						
ANR	7506	Symbol	RS_RET_ERR_OPEN_KLOG		7431						
ANR	7507	Symbol	O_RDONLY		7431						
ANR	7508	Symbol	LOG_ERR		7431						
ANR	7509	Symbol	pModConf		7431						
ANR	7510	Symbol	errmsg		7431						
ANR	7511	Symbol	rs_strerror_r		7431						
ANR	7512	Symbol	open		7431						
ANR	7513	Function	klogWillRunPostPrivDrop	177:0:4143:4589							
ANR	7514	FunctionDef	klogWillRunPostPrivDrop (modConfData_t * pModConf)		7513	0					
ANR	7515	CompoundStatement		179:0:4201:4589	7513	0					
ANR	7516	IdentifierDeclStatement	char errmsg [ 2048 ] ;	180:1:4204:4221	7513	0	True				
ANR	7517	IdentifierDecl	errmsg [ 2048 ]		7513	0					
ANR	7518	IdentifierDeclType	char [ 2048 ]		7513	0					
ANR	7519	Identifier	errmsg		7513	1					
ANR	7520	PrimaryExpression	2048		7513	2					
ANR	7521	IdentifierDeclStatement	int r ;	181:1:4224:4229	7513	1	True				
ANR	7522	IdentifierDecl	r		7513	0					
ANR	7523	IdentifierDeclType	int		7513	0					
ANR	7524	Identifier	r		7513	1					
ANR	7525	ExpressionStatement	DEFiRet	182:1:4232:4239	7513	2	True				
ANR	7526	Identifier	DEFiRet		7513	0					
ANR	7527	ExpressionStatement	"r = read ( fklog , NULL , 0 )"	186:1:4316:4340	7513	3	True				
ANR	7528	AssignmentExpression	"r = read ( fklog , NULL , 0 )"		7513	0		=			
ANR	7529	Identifier	r		7513	0					
ANR	7530	CallExpression	"read ( fklog , NULL , 0 )"		7513	1					
ANR	7531	Callee	read		7513	0					
ANR	7532	Identifier	read		7513	0					
ANR	7533	ArgumentList	fklog		7513	1					
ANR	7534	Argument	fklog		7513	0					
ANR	7535	Identifier	fklog		7513	0					
ANR	7536	Argument	NULL		7513	1					
ANR	7537	Identifier	NULL		7513	0					
ANR	7538	Argument	0		7513	2					
ANR	7539	PrimaryExpression	0		7513	0					
ANR	7540	IfStatement	if ( r < 0 && errno != EINVAL )		7513	4					
ANR	7541	Condition	r < 0 && errno != EINVAL	187:5:4347:4370	7513	0	True				
ANR	7542	AndExpression	r < 0 && errno != EINVAL		7513	0		&&			
ANR	7543	RelationalExpression	r < 0		7513	0		<			
ANR	7544	Identifier	r		7513	0					
ANR	7545	PrimaryExpression	0		7513	1					
ANR	7546	EqualityExpression	errno != EINVAL		7513	1		!=			
ANR	7547	Identifier	errno		7513	0					
ANR	7548	Identifier	EINVAL		7513	1					
ANR	7549	CompoundStatement		9:31:171:171	7513	1					
ANR	7550	ExpressionStatement	"imkmsgLogIntMsg ( LOG_ERR , ""imkmsg: cannot open kernel log (%s): %s."" , _PATH_KLOG , rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) ) )"	188:2:4377:4506	7513	0	True				
ANR	7551	CallExpression	"imkmsgLogIntMsg ( LOG_ERR , ""imkmsg: cannot open kernel log (%s): %s."" , _PATH_KLOG , rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) ) )"		7513	0					
ANR	7552	Callee	imkmsgLogIntMsg		7513	0					
ANR	7553	Identifier	imkmsgLogIntMsg		7513	0					
ANR	7554	ArgumentList	LOG_ERR		7513	1					
ANR	7555	Argument	LOG_ERR		7513	0					
ANR	7556	Identifier	LOG_ERR		7513	0					
ANR	7557	Argument	"""imkmsg: cannot open kernel log (%s): %s."""		7513	1					
ANR	7558	PrimaryExpression	"""imkmsg: cannot open kernel log (%s): %s."""		7513	0					
ANR	7559	Argument	_PATH_KLOG		7513	2					
ANR	7560	Identifier	_PATH_KLOG		7513	0					
ANR	7561	Argument	"rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) )"		7513	3					
ANR	7562	CallExpression	"rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) )"		7513	0					
ANR	7563	Callee	rs_strerror_r		7513	0					
ANR	7564	Identifier	rs_strerror_r		7513	0					
ANR	7565	ArgumentList	errno		7513	1					
ANR	7566	Argument	errno		7513	0					
ANR	7567	Identifier	errno		7513	0					
ANR	7568	Argument	errmsg		7513	1					
ANR	7569	Identifier	errmsg		7513	0					
ANR	7570	Argument	sizeof ( errmsg )		7513	2					
ANR	7571	SizeofExpression	sizeof ( errmsg )		7513	0					
ANR	7572	Sizeof	sizeof		7513	0					
ANR	7573	SizeofOperand	errmsg		7513	1					
ANR	7574	ExpressionStatement	fklog = - 1	190:2:4510:4520	7513	1	True				
ANR	7575	AssignmentExpression	fklog = - 1		7513	0		=			
ANR	7576	Identifier	fklog		7513	0					
ANR	7577	UnaryOperationExpression	- 1		7513	1					
ANR	7578	UnaryOperator	-		7513	0					
ANR	7579	PrimaryExpression	1		7513	1					
ANR	7580	ExpressionStatement	ABORT_FINALIZE ( RS_RET_ERR_OPEN_KLOG )	191:2:4524:4560	7513	2	True				
ANR	7581	CallExpression	ABORT_FINALIZE ( RS_RET_ERR_OPEN_KLOG )		7513	0					
ANR	7582	Callee	ABORT_FINALIZE		7513	0					
ANR	7583	Identifier	ABORT_FINALIZE		7513	0					
ANR	7584	ArgumentList	RS_RET_ERR_OPEN_KLOG		7513	1					
ANR	7585	Argument	RS_RET_ERR_OPEN_KLOG		7513	0					
ANR	7586	Identifier	RS_RET_ERR_OPEN_KLOG		7513	0					
ANR	7587	Label	finalize_it :	194:0:4566:4577	7513	5	True				
ANR	7588	Identifier	finalize_it		7513	0					
ANR	7589	ExpressionStatement	RETiRet	195:1:4580:4587	7513	6	True				
ANR	7590	Identifier	RETiRet		7513	0					
ANR	7591	ReturnType	rsRetVal		7513	1					
ANR	7592	Identifier	klogWillRunPostPrivDrop		7513	2					
ANR	7593	ParameterList	modConfData_t * pModConf		7513	3					
ANR	7594	Parameter	modConfData_t * pModConf	178:24:4176:4198	7513	0	True				
ANR	7595	ParameterType	modConfData_t *		7513	0					
ANR	7596	Identifier	pModConf		7513	1					
ANR	7597	CFGEntryNode	ENTRY		7513		True				
ANR	7598	CFGExitNode	EXIT		7513		True				
ANR	7599	Symbol	fklog		7513						
ANR	7600	Symbol	EINVAL		7513						
ANR	7601	Symbol	r		7513						
ANR	7602	Symbol	errno		7513						
ANR	7603	Symbol	_PATH_KLOG		7513						
ANR	7604	Symbol	RS_RET_ERR_OPEN_KLOG		7513						
ANR	7605	Symbol	read		7513						
ANR	7606	Symbol	NULL		7513						
ANR	7607	Symbol	LOG_ERR		7513						
ANR	7608	Symbol	pModConf		7513						
ANR	7609	Symbol	errmsg		7513						
ANR	7610	Symbol	rs_strerror_r		7513						
ANR	7611	Function	readkmsg	201:0:4691:5543							
ANR	7612	FunctionDef	readkmsg ()		7611	0					
ANR	7613	CompoundStatement		203:0:4718:5543	7611	0					
ANR	7614	IdentifierDeclStatement	int i ;	204:1:4721:4726	7611	0	True				
ANR	7615	IdentifierDecl	i		7611	0					
ANR	7616	IdentifierDeclType	int		7611	0					
ANR	7617	Identifier	i		7611	1					
ANR	7618	IdentifierDeclStatement	uchar pRcv [ 8192 + 1 ] ;	205:1:4729:4747	7611	1	True				
ANR	7619	IdentifierDecl	pRcv [ 8192 + 1 ]		7611	0					
ANR	7620	IdentifierDeclType	uchar [ 8192 + 1 ]		7611	0					
ANR	7621	Identifier	pRcv		7611	1					
ANR	7622	AdditiveExpression	8192 + 1		7611	2		+			
ANR	7623	PrimaryExpression	8192		7611	0					
ANR	7624	PrimaryExpression	1		7611	1					
ANR	7625	IdentifierDeclStatement	char errmsg [ 2048 ] ;	206:1:4750:4767	7611	2	True				
ANR	7626	IdentifierDecl	errmsg [ 2048 ]		7611	0					
ANR	7627	IdentifierDeclType	char [ 2048 ]		7611	0					
ANR	7628	Identifier	errmsg		7611	1					
ANR	7629	PrimaryExpression	2048		7611	2					
ANR	7630	ForStatement	for ( ; ; )		7611	3					
ANR	7631	CompoundStatement		6:10:61:61	7611	0					
ANR	7632	ExpressionStatement	"dbgprintf ( ""imkmsg waiting for kernel log line\\n"" )"	209:2:4784:4833	7611	0	True				
ANR	7633	CallExpression	"dbgprintf ( ""imkmsg waiting for kernel log line\\n"" )"		7611	0					
ANR	7634	Callee	dbgprintf		7611	0					
ANR	7635	Identifier	dbgprintf		7611	0					
ANR	7636	ArgumentList	"""imkmsg waiting for kernel log line\\n"""		7611	1					
ANR	7637	Argument	"""imkmsg waiting for kernel log line\\n"""		7611	0					
ANR	7638	PrimaryExpression	"""imkmsg waiting for kernel log line\\n"""		7611	0					
ANR	7639	ExpressionStatement	"i = read ( fklog , pRcv , 8192 )"	212:2:4928:4955	7611	1	True				
ANR	7640	AssignmentExpression	"i = read ( fklog , pRcv , 8192 )"		7611	0		=			
ANR	7641	Identifier	i		7611	0					
ANR	7642	CallExpression	"read ( fklog , pRcv , 8192 )"		7611	1					
ANR	7643	Callee	read		7611	0					
ANR	7644	Identifier	read		7611	0					
ANR	7645	ArgumentList	fklog		7611	1					
ANR	7646	Argument	fklog		7611	0					
ANR	7647	Identifier	fklog		7611	0					
ANR	7648	Argument	pRcv		7611	1					
ANR	7649	Identifier	pRcv		7611	0					
ANR	7650	Argument	8192		7611	2					
ANR	7651	PrimaryExpression	8192		7611	0					
ANR	7652	IfStatement	if ( i > 0 )		7611	2					
ANR	7653	Condition	i > 0	214:6:4964:4968	7611	0	True				
ANR	7654	RelationalExpression	i > 0		7611	0		>			
ANR	7655	Identifier	i		7611	0					
ANR	7656	PrimaryExpression	0		7611	1					
ANR	7657	CompoundStatement		12:13:252:252	7611	1					
ANR	7658	ExpressionStatement	pRcv [ i ] = '\\0'	216:3:5030:5044	7611	0	True				
ANR	7659	AssignmentExpression	pRcv [ i ] = '\\0'		7611	0		=			
ANR	7660	ArrayIndexing	pRcv [ i ]		7611	0					
ANR	7661	Identifier	pRcv		7611	0					
ANR	7662	Identifier	i		7611	1					
ANR	7663	PrimaryExpression	'\\0'		7611	1					
ANR	7664	ElseStatement	else		7611	0					
ANR	7665	IfStatement	if ( i == - EPIPE )		7611	0					
ANR	7666	Condition	i == - EPIPE	217:13:5059:5069	7611	0	True				
ANR	7667	EqualityExpression	i == - EPIPE		7611	0		==			
ANR	7668	Identifier	i		7611	0					
ANR	7669	UnaryOperationExpression	- EPIPE		7611	1					
ANR	7670	UnaryOperator	-		7611	0					
ANR	7671	Identifier	EPIPE		7611	1					
ANR	7672	CompoundStatement		15:26:353:353	7611	1					
ANR	7673	ExpressionStatement	"imkmsgLogIntMsg ( LOG_WARNING , ""imkmsg: some messages in circular buffer got overwritten"" )"	218:3:5077:5170	7611	0	True				
ANR	7674	CallExpression	"imkmsgLogIntMsg ( LOG_WARNING , ""imkmsg: some messages in circular buffer got overwritten"" )"		7611	0					
ANR	7675	Callee	imkmsgLogIntMsg		7611	0					
ANR	7676	Identifier	imkmsgLogIntMsg		7611	0					
ANR	7677	ArgumentList	LOG_WARNING		7611	1					
ANR	7678	Argument	LOG_WARNING		7611	0					
ANR	7679	Identifier	LOG_WARNING		7611	0					
ANR	7680	Argument	"""imkmsg: some messages in circular buffer got overwritten"""		7611	1					
ANR	7681	PrimaryExpression	"""imkmsg: some messages in circular buffer got overwritten"""		7611	0					
ANR	7682	ContinueStatement	continue ;	220:3:5175:5183	7611	1	True				
ANR	7683	ElseStatement	else		7611	0					
ANR	7684	CompoundStatement		19:9:475:475	7611	0					
ANR	7685	IfStatement	if ( i < 0 && errno != EINTR && errno != EAGAIN )		7611	0					
ANR	7686	Condition	i < 0 && errno != EINTR && errno != EAGAIN	223:7:5264:5305	7611	0	True				
ANR	7687	AndExpression	i < 0 && errno != EINTR && errno != EAGAIN		7611	0		&&			
ANR	7688	RelationalExpression	i < 0		7611	0		<			
ANR	7689	Identifier	i		7611	0					
ANR	7690	PrimaryExpression	0		7611	1					
ANR	7691	AndExpression	errno != EINTR && errno != EAGAIN		7611	1		&&			
ANR	7692	EqualityExpression	errno != EINTR		7611	0		!=			
ANR	7693	Identifier	errno		7611	0					
ANR	7694	Identifier	EINTR		7611	1					
ANR	7695	EqualityExpression	errno != EAGAIN		7611	1		!=			
ANR	7696	Identifier	errno		7611	0					
ANR	7697	Identifier	EAGAIN		7611	1					
ANR	7698	CompoundStatement		21:51:589:589	7611	1					
ANR	7699	ExpressionStatement	"imkmsgLogIntMsg ( LOG_ERR , ""imkmsg: error reading kernel log - shutting down: %s"" , rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) ) )"	225:4:5338:5480	7611	0	True				
ANR	7700	CallExpression	"imkmsgLogIntMsg ( LOG_ERR , ""imkmsg: error reading kernel log - shutting down: %s"" , rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) ) )"		7611	0					
ANR	7701	Callee	imkmsgLogIntMsg		7611	0					
ANR	7702	Identifier	imkmsgLogIntMsg		7611	0					
ANR	7703	ArgumentList	LOG_ERR		7611	1					
ANR	7704	Argument	LOG_ERR		7611	0					
ANR	7705	Identifier	LOG_ERR		7611	0					
ANR	7706	Argument	"""imkmsg: error reading kernel log - shutting down: %s"""		7611	1					
ANR	7707	PrimaryExpression	"""imkmsg: error reading kernel log - shutting down: %s"""		7611	0					
ANR	7708	Argument	"rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) )"		7611	2					
ANR	7709	CallExpression	"rs_strerror_r ( errno , errmsg , sizeof ( errmsg ) )"		7611	0					
ANR	7710	Callee	rs_strerror_r		7611	0					
ANR	7711	Identifier	rs_strerror_r		7611	0					
ANR	7712	ArgumentList	errno		7611	1					
ANR	7713	Argument	errno		7611	0					
ANR	7714	Identifier	errno		7611	0					
ANR	7715	Argument	errmsg		7611	1					
ANR	7716	Identifier	errmsg		7611	0					
ANR	7717	Argument	sizeof ( errmsg )		7611	2					
ANR	7718	SizeofExpression	sizeof ( errmsg )		7611	0					
ANR	7719	Sizeof	sizeof		7611	0					
ANR	7720	SizeofOperand	errmsg		7611	1					
ANR	7721	ExpressionStatement	fklog = - 1	228:4:5486:5496	7611	1	True				
ANR	7722	AssignmentExpression	fklog = - 1		7611	0		=			
ANR	7723	Identifier	fklog		7611	0					
ANR	7724	UnaryOperationExpression	- 1		7611	1					
ANR	7725	UnaryOperator	-		7611	0					
ANR	7726	PrimaryExpression	1		7611	1					
ANR	7727	BreakStatement	break ;	230:3:5506:5511	7611	1	True				
ANR	7728	ExpressionStatement	submitSyslog ( pRcv )	233:2:5520:5538	7611	3	True				
ANR	7729	CallExpression	submitSyslog ( pRcv )		7611	0					
ANR	7730	Callee	submitSyslog		7611	0					
ANR	7731	Identifier	submitSyslog		7611	0					
ANR	7732	ArgumentList	pRcv		7611	1					
ANR	7733	Argument	pRcv		7611	0					
ANR	7734	Identifier	pRcv		7611	0					
ANR	7735	ReturnType	static void		7611	1					
ANR	7736	Identifier	readkmsg		7611	2					
ANR	7737	ParameterList			7611	3					
ANR	7738	CFGEntryNode	ENTRY		7611		True				
ANR	7739	CFGExitNode	EXIT		7611		True				
ANR	7740	InfiniteForNode	true		7611		True				
ANR	7741	Symbol	pRcv		7611						
ANR	7742	Symbol	EPIPE		7611						
ANR	7743	Symbol	errno		7611						
ANR	7744	Symbol	read		7611						
ANR	7745	Symbol	EINTR		7611						
ANR	7746	Symbol	EAGAIN		7611						
ANR	7747	Symbol	i		7611						
ANR	7748	Symbol	errmsg		7611						
ANR	7749	Symbol	* pRcv		7611						
ANR	7750	Symbol	LOG_WARNING		7611						
ANR	7751	Symbol	rs_strerror_r		7611						
ANR	7752	Symbol	fklog		7611						
ANR	7753	Symbol	* i		7611						
ANR	7754	Symbol	LOG_ERR		7611						
ANR	7755	Function	klogAfterRun	241:0:5629:5878							
ANR	7756	FunctionDef	klogAfterRun (modConfData_t * pModConf)		7755	0					
ANR	7757	CompoundStatement		242:0:5676:5878	7755	0					
ANR	7758	ExpressionStatement	DEFiRet	243:1:5679:5686	7755	0	True				
ANR	7759	Identifier	DEFiRet		7755	0					
ANR	7760	IfStatement	if ( fklog != - 1 )		7755	1					
ANR	7761	Condition	fklog != - 1	244:4:5692:5702	7755	0	True				
ANR	7762	EqualityExpression	fklog != - 1		7755	0		!=			
ANR	7763	Identifier	fklog		7755	0					
ANR	7764	UnaryOperationExpression	- 1		7755	1					
ANR	7765	UnaryOperator	-		7755	0					
ANR	7766	PrimaryExpression	1		7755	1					
ANR	7767	ExpressionStatement	close ( fklog )	245:2:5707:5719	7755	1	True				
ANR	7768	CallExpression	close ( fklog )		7755	0					
ANR	7769	Callee	close		7755	0					
ANR	7770	Identifier	close		7755	0					
ANR	7771	ArgumentList	fklog		7755	1					
ANR	7772	Argument	fklog		7755	0					
ANR	7773	Identifier	fklog		7755	0					
ANR	7774	IfStatement	if ( pModConf -> console_log_level != - 1 )		7755	2					
ANR	7775	Condition	pModConf -> console_log_level != - 1	247:4:5810:5842	7755	0	True				
ANR	7776	EqualityExpression	pModConf -> console_log_level != - 1		7755	0		!=			
ANR	7777	PtrMemberAccess	pModConf -> console_log_level		7755	0					
ANR	7778	Identifier	pModConf		7755	0					
ANR	7779	Identifier	console_log_level		7755	1					
ANR	7780	UnaryOperationExpression	- 1		7755	1					
ANR	7781	UnaryOperator	-		7755	0					
ANR	7782	PrimaryExpression	1		7755	1					
ANR	7783	ExpressionStatement	"klogctl ( 7 , NULL , 0 )"	248:2:5847:5866	7755	1	True				
ANR	7784	CallExpression	"klogctl ( 7 , NULL , 0 )"		7755	0					
ANR	7785	Callee	klogctl		7755	0					
ANR	7786	Identifier	klogctl		7755	0					
ANR	7787	ArgumentList	7		7755	1					
ANR	7788	Argument	7		7755	0					
ANR	7789	PrimaryExpression	7		7755	0					
ANR	7790	Argument	NULL		7755	1					
ANR	7791	Identifier	NULL		7755	0					
ANR	7792	Argument	0		7755	2					
ANR	7793	PrimaryExpression	0		7755	0					
ANR	7794	ExpressionStatement	RETiRet	249:1:5869:5876	7755	3	True				
ANR	7795	Identifier	RETiRet		7755	0					
ANR	7796	ReturnType	rsRetVal		7755	1					
ANR	7797	Identifier	klogAfterRun		7755	2					
ANR	7798	ParameterList	modConfData_t * pModConf		7755	3					
ANR	7799	Parameter	modConfData_t * pModConf	241:22:5651:5673	7755	0	True				
ANR	7800	ParameterType	modConfData_t *		7755	0					
ANR	7801	Identifier	pModConf		7755	1					
ANR	7802	CFGEntryNode	ENTRY		7755		True				
ANR	7803	CFGExitNode	EXIT		7755		True				
ANR	7804	Symbol	fklog		7755						
ANR	7805	Symbol	NULL		7755						
ANR	7806	Symbol	* pModConf		7755						
ANR	7807	Symbol	pModConf		7755						
ANR	7808	Symbol	pModConf -> console_log_level		7755						
ANR	7809	Function	klogFacilIntMsg	268:0:6220:6268							
ANR	7810	FunctionDef	klogFacilIntMsg ()		7809	0					
ANR	7811	CompoundStatement		270:0:6246:6268	7809	0					
ANR	7812	ReturnStatement	return LOG_SYSLOG ;	271:1:6249:6266	7809	0	True				
ANR	7813	Identifier	LOG_SYSLOG		7809	0					
ANR	7814	ReturnType	int		7809	1					
ANR	7815	Identifier	klogFacilIntMsg		7809	2					
ANR	7816	ParameterList			7809	3					
ANR	7817	CFGEntryNode	ENTRY		7809		True				
ANR	7818	CFGExitNode	EXIT		7809		True				
ANR	7819	Symbol	LOG_SYSLOG		7809						
