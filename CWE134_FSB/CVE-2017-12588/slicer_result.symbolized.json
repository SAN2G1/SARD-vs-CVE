[{"FileName": "omzmq3_before.c", "Caller": "getSocketType", "Source": false, "Sink": false, "idx": 0, "CWE-ID": "CWE-3", "category": "CallExpression", "criterion": "strcmp", "line": 171, "label": -3, "slices": ["int getSocketType(char* name) {\n", "    int type = -1;\n", "    uint i;\n", "    for(i=0; i<sizeof(types)/sizeof(struct socket_type); ++i) {\n", "        if( !strcmp(types[i].name, name) ) {\n", "            type = types[i].type;\n"], "tokenized": "int FUNC1(char *Var1){\nint  Var2=-1; \nuint  Var3; \nfor (Var3=0; Var3<sizeof (Var4)/sizeof (struct  Var5); STRUCT1  Var3){\nif (!strcmp(Var4[Var3].memberVar1,memberVar1)){\nVar2=Var4[Var3].memberVar2; \n"}, {"FileName": "omzmq3_before.c", "Caller": "getSocketAction", "Source": false, "Sink": false, "idx": 1, "CWE-ID": "CWE-3", "category": "CallExpression", "criterion": "strcmp", "line": 184, "label": -3, "slices": ["static int getSocketAction(char* name) {\n", "    int action = -1;\n", "    uint i;\n", "    for(i=0; i < sizeof(actions)/sizeof(struct socket_action); ++i) {\n", "        if(!strcmp(actions[i].name, name)) {\n", "            action = actions[i].action;\n"], "tokenized": "static int FUNC1(char *Var1){\nint  Var2=-1; \nuint  Var3; \nfor (Var3=0; Var3<sizeof (Var4)/sizeof (struct  Var5); STRUCT1  Var3){\nif (!strcmp(Var4[Var3].memberVar1,memberVar1)){\nVar2=Var4[Var3].memberVar2; \n"}]