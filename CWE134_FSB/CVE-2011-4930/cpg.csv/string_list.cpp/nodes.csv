command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5278249	File	data/converged/CVE-2011-4930_htcondor/string_list.cpp								
ANR	5278250	DeclStmt									
ANR	5278251	Decl							char	char * ( const char * )	strnewp
ANR	5278252	Function	StringList :: isSeparator	36:0:1227:1372							
ANR	5278253	FunctionDef	StringList :: isSeparator (char x)		5278252	0					
ANR	5278254	CompoundStatement		38:0:1265:1372	5278252	0					
ANR	5278255	ForStatement	for ( char * sep = m_delimiters ; * sep ; sep ++ )		5278252	0					
ANR	5278256	ForInit	char * sep = m_delimiters ;	39:7:1274:1298	5278252	0	True				
ANR	5278257	IdentifierDeclStatement	char * sep = m_delimiters ;		5278252	0					
ANR	5278258	IdentifierDecl	* sep = m_delimiters		5278252	0					
ANR	5278259	IdentifierDeclType	char *		5278252	0					
ANR	5278260	Identifier	sep		5278252	1					
ANR	5278261	AssignmentExpression	* sep = m_delimiters		5278252	2		=			
ANR	5278262	Identifier	m_delimiters		5278252	0					
ANR	5278263	Identifier	m_delimiters		5278252	1					
ANR	5278264	Condition	* sep	39:33:1300:1303	5278252	1	True				
ANR	5278265	UnaryOperationExpression	* sep		5278252	0					
ANR	5278266	UnaryOperator	*		5278252	0					
ANR	5278267	Identifier	sep		5278252	1					
ANR	5278268	PostIncDecOperationExpression	sep ++	39:39:1306:1310	5278252	2	True				
ANR	5278269	Identifier	sep		5278252	0					
ANR	5278270	IncDec	++		5278252	1					
ANR	5278271	CompoundStatement		2:47:48:48	5278252	3					
ANR	5278272	IfStatement	if ( x == ( * sep ) )		5278252	0					
ANR	5278273	Condition	x == ( * sep )	40:7:1323:1335	5278252	0	True				
ANR	5278274	EqualityExpression	x == ( * sep )		5278252	0		==			
ANR	5278275	Identifier	x		5278252	0					
ANR	5278276	UnaryOperationExpression	* sep		5278252	1					
ANR	5278277	UnaryOperator	*		5278252	0					
ANR	5278278	Identifier	sep		5278252	1					
ANR	5278279	CompoundStatement		3:23:73:73	5278252	1					
ANR	5278280	ReturnStatement	return 1 ;	41:3:1344:1352	5278252	0	True				
ANR	5278281	PrimaryExpression	1		5278252	0					
ANR	5278282	ReturnStatement	return 0 ;	44:1:1362:1370	5278252	1	True				
ANR	5278283	PrimaryExpression	0		5278252	0					
ANR	5278284	ReturnType	int		5278252	1					
ANR	5278285	Identifier	StringList :: isSeparator		5278252	2					
ANR	5278286	ParameterList	char x		5278252	3					
ANR	5278287	Parameter	char x	37:25:1256:1261	5278252	0	True				
ANR	5278288	ParameterType	char		5278252	0					
ANR	5278289	Identifier	x		5278252	1					
ANR	5278290	CFGEntryNode	ENTRY		5278252		True				
ANR	5278291	CFGExitNode	EXIT		5278252		True				
ANR	5278292	Symbol	m_delimiters		5278252						
ANR	5278293	Symbol	x		5278252						
ANR	5278294	Symbol	* sep		5278252						
ANR	5278295	Symbol	sep		5278252						
ANR	5278296	Function	StringList :: StringList	47:0:1375:1574							
ANR	5278297	FunctionDef	"StringList :: StringList (const char * s , const char * delim)"		5278296	0					
ANR	5278298	CompoundStatement		48:0:1434:1574	5278296	0					
ANR	5278299	IfStatement	if ( delim )		5278296	0					
ANR	5278300	Condition	delim	49:6:1442:1446	5278296	0	True				
ANR	5278301	Identifier	delim		5278296	0					
ANR	5278302	CompoundStatement		2:14:15:15	5278296	1					
ANR	5278303	ExpressionStatement	m_delimiters = strnewp ( delim )	50:2:1454:1485	5278296	0	True				
ANR	5278304	AssignmentExpression	m_delimiters = strnewp ( delim )		5278296	0		=			
ANR	5278305	Identifier	m_delimiters		5278296	0					
ANR	5278306	CallExpression	strnewp ( delim )		5278296	1					
ANR	5278307	Callee	strnewp		5278296	0					
ANR	5278308	Identifier	strnewp		5278296	0					
ANR	5278309	ArgumentList	delim		5278296	1					
ANR	5278310	Argument	delim		5278296	0					
ANR	5278311	Identifier	delim		5278296	0					
ANR	5278312	ElseStatement	else		5278296	0					
ANR	5278313	CompoundStatement		4:8:60:60	5278296	0					
ANR	5278314	ExpressionStatement	"m_delimiters = strnewp ( """" )"	52:2:1499:1527	5278296	0	True				
ANR	5278315	AssignmentExpression	"m_delimiters = strnewp ( """" )"		5278296	0		=			
ANR	5278316	Identifier	m_delimiters		5278296	0					
ANR	5278317	CallExpression	"strnewp ( """" )"		5278296	1					
ANR	5278318	Callee	strnewp		5278296	0					
ANR	5278319	Identifier	strnewp		5278296	0					
ANR	5278320	ArgumentList	""""""		5278296	1					
ANR	5278321	Argument	""""""		5278296	0					
ANR	5278322	PrimaryExpression	""""""		5278296	0					
ANR	5278323	IfStatement	if ( s )		5278296	1					
ANR	5278324	Condition	s	54:6:1538:1538	5278296	0	True				
ANR	5278325	Identifier	s		5278296	0					
ANR	5278326	CompoundStatement		7:10:107:107	5278296	1					
ANR	5278327	ExpressionStatement	initializeFromString ( s )	55:2:1546:1569	5278296	0	True				
ANR	5278328	CallExpression	initializeFromString ( s )		5278296	0					
ANR	5278329	Callee	initializeFromString		5278296	0					
ANR	5278330	Identifier	initializeFromString		5278296	0					
ANR	5278331	ArgumentList	s		5278296	1					
ANR	5278332	Argument	s		5278296	0					
ANR	5278333	Identifier	s		5278296	0					
ANR	5278334	Identifier	StringList :: StringList		5278296	1					
ANR	5278335	ParameterList	"const char * s , const char * delim"		5278296	2					
ANR	5278336	Parameter	const char * s	47:23:1398:1410	5278296	0	True				
ANR	5278337	ParameterType	const char *		5278296	0					
ANR	5278338	Identifier	s		5278296	1					
ANR	5278339	Parameter	const char * delim	47:38:1413:1429	5278296	1	True				
ANR	5278340	ParameterType	const char *		5278296	0					
ANR	5278341	Identifier	delim		5278296	1					
ANR	5278342	CFGEntryNode	ENTRY		5278296		True				
ANR	5278343	CFGExitNode	EXIT		5278296		True				
ANR	5278344	Symbol	s		5278296						
ANR	5278345	Symbol	m_delimiters		5278296						
ANR	5278346	Symbol	strnewp		5278296						
ANR	5278347	Symbol	delim		5278296						
ANR	5278348	Function	StringList :: StringList	59:0:1577:2118							
ANR	5278349	FunctionDef	StringList :: StringList (const StringList & other)		5278348	0					
ANR	5278350	CompoundStatement		61:0:1652:2118	5278348	0					
ANR	5278351	IdentifierDeclStatement	char * str ;	62:1:1655:1667	5278348	0	True				
ANR	5278352	IdentifierDecl	* str		5278348	0					
ANR	5278353	IdentifierDeclType	char *		5278348	0					
ANR	5278354	Identifier	str		5278348	1					
ANR	5278355	IdentifierDeclStatement	ListIterator < char > iter ;	63:1:1670:1694	5278348	1	True				
ANR	5278356	IdentifierDecl	iter		5278348	0					
ANR	5278357	IdentifierDeclType	ListIterator < char >		5278348	0					
ANR	5278358	Identifier	iter		5278348	1					
ANR	5278359	IdentifierDeclStatement	const char * delim = other . getDelimiters ( ) ;	65:1:1698:1739	5278348	2	True				
ANR	5278360	IdentifierDecl	* delim = other . getDelimiters ( )		5278348	0					
ANR	5278361	IdentifierDeclType	const char *		5278348	0					
ANR	5278362	Identifier	delim		5278348	1					
ANR	5278363	AssignmentExpression	* delim = other . getDelimiters ( )		5278348	2		=			
ANR	5278364	Identifier	delim		5278348	0					
ANR	5278365	CallExpression	other . getDelimiters ( )		5278348	1					
ANR	5278366	Callee	other . getDelimiters		5278348	0					
ANR	5278367	MemberAccess	other . getDelimiters		5278348	0					
ANR	5278368	Identifier	other		5278348	0					
ANR	5278369	Identifier	getDelimiters		5278348	1					
ANR	5278370	ArgumentList			5278348	1					
ANR	5278371	IfStatement	if ( delim )		5278348	3					
ANR	5278372	Condition	delim	66:6:1747:1751	5278348	0	True				
ANR	5278373	Identifier	delim		5278348	0					
ANR	5278374	CompoundStatement		6:14:102:102	5278348	1					
ANR	5278375	ExpressionStatement	m_delimiters = strnewp ( delim )	67:2:1759:1790	5278348	0	True				
ANR	5278376	AssignmentExpression	m_delimiters = strnewp ( delim )		5278348	0		=			
ANR	5278377	Identifier	m_delimiters		5278348	0					
ANR	5278378	CallExpression	strnewp ( delim )		5278348	1					
ANR	5278379	Callee	strnewp		5278348	0					
ANR	5278380	Identifier	strnewp		5278348	0					
ANR	5278381	ArgumentList	delim		5278348	1					
ANR	5278382	Argument	delim		5278348	0					
ANR	5278383	Identifier	delim		5278348	0					
ANR	5278384	ExpressionStatement	iter . Initialize ( other . getList ( ) )	71:1:1867:1901	5278348	4	True				
ANR	5278385	CallExpression	iter . Initialize ( other . getList ( ) )		5278348	0					
ANR	5278386	Callee	iter . Initialize		5278348	0					
ANR	5278387	MemberAccess	iter . Initialize		5278348	0					
ANR	5278388	Identifier	iter		5278348	0					
ANR	5278389	Identifier	Initialize		5278348	1					
ANR	5278390	ArgumentList	other . getList ( )		5278348	1					
ANR	5278391	Argument	other . getList ( )		5278348	0					
ANR	5278392	CallExpression	other . getList ( )		5278348	0					
ANR	5278393	Callee	other . getList		5278348	0					
ANR	5278394	MemberAccess	other . getList		5278348	0					
ANR	5278395	Identifier	other		5278348	0					
ANR	5278396	Identifier	getList		5278348	1					
ANR	5278397	ArgumentList			5278348	1					
ANR	5278398	ExpressionStatement	iter . ToBeforeFirst ( )	72:1:1904:1925	5278348	5	True				
ANR	5278399	CallExpression	iter . ToBeforeFirst ( )		5278348	0					
ANR	5278400	Callee	iter . ToBeforeFirst		5278348	0					
ANR	5278401	MemberAccess	iter . ToBeforeFirst		5278348	0					
ANR	5278402	Identifier	iter		5278348	0					
ANR	5278403	Identifier	ToBeforeFirst		5278348	1					
ANR	5278404	ArgumentList			5278348	1					
ANR	5278405	WhileStatement	while ( iter . Next ( str ) )		5278348	6					
ANR	5278406	Condition	iter . Next ( str )	73:9:1936:1949	5278348	0	True				
ANR	5278407	CallExpression	iter . Next ( str )		5278348	0					
ANR	5278408	Callee	iter . Next		5278348	0					
ANR	5278409	MemberAccess	iter . Next		5278348	0					
ANR	5278410	Identifier	iter		5278348	0					
ANR	5278411	Identifier	Next		5278348	1					
ANR	5278412	ArgumentList	str		5278348	1					
ANR	5278413	Argument	str		5278348	0					
ANR	5278414	Identifier	str		5278348	0					
ANR	5278415	CompoundStatement		14:2:304:329	5278348	1					
ANR	5278416	IdentifierDeclStatement	char * dup = strdup ( str ) ;	74:2:1957:1982	5278348	0	True				
ANR	5278417	IdentifierDecl	* dup = strdup ( str )		5278348	0					
ANR	5278418	IdentifierDeclType	char *		5278348	0					
ANR	5278419	Identifier	dup		5278348	1					
ANR	5278420	AssignmentExpression	* dup = strdup ( str )		5278348	2		=			
ANR	5278421	Identifier	dup		5278348	0					
ANR	5278422	CallExpression	strdup ( str )		5278348	1					
ANR	5278423	Callee	strdup		5278348	0					
ANR	5278424	Identifier	strdup		5278348	0					
ANR	5278425	ArgumentList	str		5278348	1					
ANR	5278426	Argument	str		5278348	0					
ANR	5278427	Identifier	str		5278348	0					
ANR	5278428	ExpressionStatement	ASSERT ( dup )	75:2:1986:1999	5278348	1	True				
ANR	5278429	CallExpression	ASSERT ( dup )		5278348	0					
ANR	5278430	Callee	ASSERT		5278348	0					
ANR	5278431	Identifier	ASSERT		5278348	0					
ANR	5278432	ArgumentList	dup		5278348	1					
ANR	5278433	Argument	dup		5278348	0					
ANR	5278434	Identifier	dup		5278348	0					
ANR	5278435	ExpressionStatement	m_strings . Append ( dup )	76:2:2003:2026	5278348	2	True				
ANR	5278436	CallExpression	m_strings . Append ( dup )		5278348	0					
ANR	5278437	Callee	m_strings . Append		5278348	0					
ANR	5278438	MemberAccess	m_strings . Append		5278348	0					
ANR	5278439	Identifier	m_strings		5278348	0					
ANR	5278440	Identifier	Append		5278348	1					
ANR	5278441	ArgumentList	dup		5278348	1					
ANR	5278442	Argument	dup		5278348	0					
ANR	5278443	Identifier	dup		5278348	0					
ANR	5278444	IfStatement	if ( other . getDelimiters ( ) )		5278348	7					
ANR	5278445	Condition	other . getDelimiters ( )	78:6:2037:2058	5278348	0	True				
ANR	5278446	CallExpression	other . getDelimiters ( )		5278348	0					
ANR	5278447	Callee	other . getDelimiters		5278348	0					
ANR	5278448	MemberAccess	other . getDelimiters		5278348	0					
ANR	5278449	Identifier	other		5278348	0					
ANR	5278450	Identifier	getDelimiters		5278348	1					
ANR	5278451	ArgumentList			5278348	1					
ANR	5278452	CompoundStatement		18:31:409:409	5278348	1					
ANR	5278453	ExpressionStatement	m_delimiters = strnewp ( other . getDelimiters ( ) )	79:2:2066:2113	5278348	0	True				
ANR	5278454	AssignmentExpression	m_delimiters = strnewp ( other . getDelimiters ( ) )		5278348	0		=			
ANR	5278455	Identifier	m_delimiters		5278348	0					
ANR	5278456	CallExpression	strnewp ( other . getDelimiters ( ) )		5278348	1					
ANR	5278457	Callee	strnewp		5278348	0					
ANR	5278458	Identifier	strnewp		5278348	0					
ANR	5278459	ArgumentList	other . getDelimiters ( )		5278348	1					
ANR	5278460	Argument	other . getDelimiters ( )		5278348	0					
ANR	5278461	CallExpression	other . getDelimiters ( )		5278348	0					
ANR	5278462	Callee	other . getDelimiters		5278348	0					
ANR	5278463	MemberAccess	other . getDelimiters		5278348	0					
ANR	5278464	Identifier	other		5278348	0					
ANR	5278465	Identifier	getDelimiters		5278348	1					
ANR	5278466	ArgumentList			5278348	1					
ANR	5278467	Identifier	StringList :: StringList		5278348	1					
ANR	5278468	ParameterList	const StringList & other		5278348	2					
ANR	5278469	Parameter	const StringList & other	59:24:1601:1623	5278348	0	True				
ANR	5278470	ParameterType	const StringList &		5278348	0					
ANR	5278471	Identifier	other		5278348	1					
ANR	5278472	CFGEntryNode	ENTRY		5278348		True				
ANR	5278473	CFGExitNode	EXIT		5278348		True				
ANR	5278474	Symbol	str		5278348						
ANR	5278475	Symbol	other . getDelimiters		5278348						
ANR	5278476	Symbol	other		5278348						
ANR	5278477	Symbol	m_delimiters		5278348						
ANR	5278478	Symbol	iter . Next		5278348						
ANR	5278479	Symbol	iter		5278348						
ANR	5278480	Symbol	strnewp		5278348						
ANR	5278481	Symbol	m_strings		5278348						
ANR	5278482	Symbol	strdup		5278348						
ANR	5278483	Symbol	other . getList		5278348						
ANR	5278484	Symbol	dup		5278348						
ANR	5278485	Symbol	delim		5278348						
ANR	5278486	Function	StringList :: initializeFromString	83:0:2121:3206							
ANR	5278487	FunctionDef	StringList :: initializeFromString (const char * s)		5278486	0					
ANR	5278488	CompoundStatement		85:0:2175:3206	5278486	0					
ANR	5278489	IfStatement	if ( ! s )		5278486	0					
ANR	5278490	Condition	! s	86:4:2181:2182	5278486	0	True				
ANR	5278491	UnaryOperationExpression	! s		5278486	0					
ANR	5278492	UnaryOperator	!		5278486	0					
ANR	5278493	Identifier	s		5278486	1					
ANR	5278494	CompoundStatement		3:1:11:11	5278486	1					
ANR	5278495	ExpressionStatement	"EXCEPT ( ""StringList::initializeFromString passed a null pointer"" )"	88:2:2191:2255	5278486	0	True				
ANR	5278496	CallExpression	"EXCEPT ( ""StringList::initializeFromString passed a null pointer"" )"		5278486	0					
ANR	5278497	Callee	EXCEPT		5278486	0					
ANR	5278498	Identifier	EXCEPT		5278486	0					
ANR	5278499	ArgumentList	"""StringList::initializeFromString passed a null pointer"""		5278486	1					
ANR	5278500	Argument	"""StringList::initializeFromString passed a null pointer"""		5278486	0					
ANR	5278501	PrimaryExpression	"""StringList::initializeFromString passed a null pointer"""		5278486	0					
ANR	5278502	IdentifierDeclStatement	const char * walk_ptr = s ;	97:1:2503:2527	5278486	1	True				
ANR	5278503	IdentifierDecl	* walk_ptr = s		5278486	0					
ANR	5278504	IdentifierDeclType	const char *		5278486	0					
ANR	5278505	Identifier	walk_ptr		5278486	1					
ANR	5278506	AssignmentExpression	* walk_ptr = s		5278486	2		=			
ANR	5278507	Identifier	s		5278486	0					
ANR	5278508	Identifier	s		5278486	1					
ANR	5278509	WhileStatement	while ( * walk_ptr != '\\0' )		5278486	2					
ANR	5278510	Condition	* walk_ptr != '\\0'	99:8:2538:2554	5278486	0	True				
ANR	5278511	EqualityExpression	* walk_ptr != '\\0'		5278486	0		!=			
ANR	5278512	UnaryOperationExpression	* walk_ptr		5278486	0					
ANR	5278513	UnaryOperator	*		5278486	0					
ANR	5278514	Identifier	walk_ptr		5278486	1					
ANR	5278515	PrimaryExpression	'\\0'		5278486	1					
ANR	5278516	CompoundStatement		34:2:840:883	5278486	1					
ANR	5278517	WhileStatement	while ( ( isSeparator ( * walk_ptr ) || isspace ( * walk_ptr ) ) && * walk_ptr != '\\0' )		5278486	0					
ANR	5278518	Condition	( isSeparator ( * walk_ptr ) || isspace ( * walk_ptr ) ) && * walk_ptr != '\\0'	102:9:2611:2684	5278486	0	True				
ANR	5278519	AndExpression	( isSeparator ( * walk_ptr ) || isspace ( * walk_ptr ) ) && * walk_ptr != '\\0'		5278486	0		&&			
ANR	5278520	OrExpression	isSeparator ( * walk_ptr ) || isspace ( * walk_ptr )		5278486	0		||			
ANR	5278521	CallExpression	isSeparator ( * walk_ptr )		5278486	0					
ANR	5278522	Callee	isSeparator		5278486	0					
ANR	5278523	Identifier	isSeparator		5278486	0					
ANR	5278524	ArgumentList	* walk_ptr		5278486	1					
ANR	5278525	Argument	* walk_ptr		5278486	0					
ANR	5278526	UnaryOperationExpression	* walk_ptr		5278486	0					
ANR	5278527	UnaryOperator	*		5278486	0					
ANR	5278528	Identifier	walk_ptr		5278486	1					
ANR	5278529	CallExpression	isspace ( * walk_ptr )		5278486	1					
ANR	5278530	Callee	isspace		5278486	0					
ANR	5278531	Identifier	isspace		5278486	0					
ANR	5278532	ArgumentList	* walk_ptr		5278486	1					
ANR	5278533	Argument	* walk_ptr		5278486	0					
ANR	5278534	UnaryOperationExpression	* walk_ptr		5278486	0					
ANR	5278535	UnaryOperator	*		5278486	0					
ANR	5278536	Identifier	walk_ptr		5278486	1					
ANR	5278537	EqualityExpression	* walk_ptr != '\\0'		5278486	1		!=			
ANR	5278538	UnaryOperationExpression	* walk_ptr		5278486	0					
ANR	5278539	UnaryOperator	*		5278486	0					
ANR	5278540	Identifier	walk_ptr		5278486	1					
ANR	5278541	PrimaryExpression	'\\0'		5278486	1					
ANR	5278542	ExpressionStatement	walk_ptr ++	104:3:2691:2701	5278486	1	True				
ANR	5278543	PostIncDecOperationExpression	walk_ptr ++		5278486	0					
ANR	5278544	Identifier	walk_ptr		5278486	0					
ANR	5278545	IncDec	++		5278486	1					
ANR	5278546	IfStatement	if ( * walk_ptr == '\\0' )		5278486	1					
ANR	5278547	Condition	* walk_ptr == '\\0'	106:6:2710:2726	5278486	0	True				
ANR	5278548	EqualityExpression	* walk_ptr == '\\0'		5278486	0		==			
ANR	5278549	UnaryOperationExpression	* walk_ptr		5278486	0					
ANR	5278550	UnaryOperator	*		5278486	0					
ANR	5278551	Identifier	walk_ptr		5278486	1					
ANR	5278552	PrimaryExpression	'\\0'		5278486	1					
ANR	5278553	BreakStatement	break ;	107:3:2732:2737	5278486	1	True				
ANR	5278554	IdentifierDeclStatement	const char * begin_ptr = walk_ptr ;	110:2:2794:2826	5278486	2	True				
ANR	5278555	IdentifierDecl	* begin_ptr = walk_ptr		5278486	0					
ANR	5278556	IdentifierDeclType	const char *		5278486	0					
ANR	5278557	Identifier	begin_ptr		5278486	1					
ANR	5278558	AssignmentExpression	* begin_ptr = walk_ptr		5278486	2		=			
ANR	5278559	Identifier	walk_ptr		5278486	0					
ANR	5278560	Identifier	walk_ptr		5278486	1					
ANR	5278561	WhileStatement	while ( ! isSeparator ( * walk_ptr ) && * walk_ptr != '\\0' )		5278486	3					
ANR	5278562	Condition	! isSeparator ( * walk_ptr ) && * walk_ptr != '\\0'	113:9:2874:2918	5278486	0	True				
ANR	5278563	AndExpression	! isSeparator ( * walk_ptr ) && * walk_ptr != '\\0'		5278486	0		&&			
ANR	5278564	UnaryOperationExpression	! isSeparator ( * walk_ptr )		5278486	0					
ANR	5278565	UnaryOperator	!		5278486	0					
ANR	5278566	CallExpression	isSeparator ( * walk_ptr )		5278486	1					
ANR	5278567	Callee	isSeparator		5278486	0					
ANR	5278568	Identifier	isSeparator		5278486	0					
ANR	5278569	ArgumentList	* walk_ptr		5278486	1					
ANR	5278570	Argument	* walk_ptr		5278486	0					
ANR	5278571	UnaryOperationExpression	* walk_ptr		5278486	0					
ANR	5278572	UnaryOperator	*		5278486	0					
ANR	5278573	Identifier	walk_ptr		5278486	1					
ANR	5278574	EqualityExpression	* walk_ptr != '\\0'		5278486	1		!=			
ANR	5278575	UnaryOperationExpression	* walk_ptr		5278486	0					
ANR	5278576	UnaryOperator	*		5278486	0					
ANR	5278577	Identifier	walk_ptr		5278486	1					
ANR	5278578	PrimaryExpression	'\\0'		5278486	1					
ANR	5278579	ExpressionStatement	walk_ptr ++	114:3:2924:2934	5278486	1	True				
ANR	5278580	PostIncDecOperationExpression	walk_ptr ++		5278486	0					
ANR	5278581	Identifier	walk_ptr		5278486	0					
ANR	5278582	IncDec	++		5278486	1					
ANR	5278583	IdentifierDeclStatement	int len = ( walk_ptr - begin_ptr ) ;	117:2:2980:3012	5278486	4	True				
ANR	5278584	IdentifierDecl	len = ( walk_ptr - begin_ptr )		5278486	0					
ANR	5278585	IdentifierDeclType	int		5278486	0					
ANR	5278586	Identifier	len		5278486	1					
ANR	5278587	AssignmentExpression	len = ( walk_ptr - begin_ptr )		5278486	2		=			
ANR	5278588	Identifier	len		5278486	0					
ANR	5278589	AdditiveExpression	walk_ptr - begin_ptr		5278486	1		-			
ANR	5278590	Identifier	walk_ptr		5278486	0					
ANR	5278591	Identifier	begin_ptr		5278486	1					
ANR	5278592	IdentifierDeclStatement	char * tmp_string = ( char * ) malloc ( 1 + len ) ;	118:2:3016:3059	5278486	5	True				
ANR	5278593	IdentifierDecl	* tmp_string = ( char * ) malloc ( 1 + len )		5278486	0					
ANR	5278594	IdentifierDeclType	char *		5278486	0					
ANR	5278595	Identifier	tmp_string		5278486	1					
ANR	5278596	AssignmentExpression	* tmp_string = ( char * ) malloc ( 1 + len )		5278486	2		=			
ANR	5278597	Identifier	tmp_string		5278486	0					
ANR	5278598	CastExpression	( char * ) malloc ( 1 + len )		5278486	1					
ANR	5278599	CastTarget	char *		5278486	0					
ANR	5278600	CallExpression	malloc ( 1 + len )		5278486	1					
ANR	5278601	Callee	malloc		5278486	0					
ANR	5278602	Identifier	malloc		5278486	0					
ANR	5278603	ArgumentList	1 + len		5278486	1					
ANR	5278604	Argument	1 + len		5278486	0					
ANR	5278605	AdditiveExpression	1 + len		5278486	0		+			
ANR	5278606	PrimaryExpression	1		5278486	0					
ANR	5278607	Identifier	len		5278486	1					
ANR	5278608	ExpressionStatement	"strncpy ( tmp_string , begin_ptr , len )"	119:2:3063:3099	5278486	6	True				
ANR	5278609	CallExpression	"strncpy ( tmp_string , begin_ptr , len )"		5278486	0					
ANR	5278610	Callee	strncpy		5278486	0					
ANR	5278611	Identifier	strncpy		5278486	0					
ANR	5278612	ArgumentList	tmp_string		5278486	1					
ANR	5278613	Argument	tmp_string		5278486	0					
ANR	5278614	Identifier	tmp_string		5278486	0					
ANR	5278615	Argument	begin_ptr		5278486	1					
ANR	5278616	Identifier	begin_ptr		5278486	0					
ANR	5278617	Argument	len		5278486	2					
ANR	5278618	Identifier	len		5278486	0					
ANR	5278619	ExpressionStatement	tmp_string [ len ] = '\\0'	120:2:3103:3125	5278486	7	True				
ANR	5278620	AssignmentExpression	tmp_string [ len ] = '\\0'		5278486	0		=			
ANR	5278621	ArrayIndexing	tmp_string [ len ]		5278486	0					
ANR	5278622	Identifier	tmp_string		5278486	0					
ANR	5278623	Identifier	len		5278486	1					
ANR	5278624	PrimaryExpression	'\\0'		5278486	1					
ANR	5278625	ExpressionStatement	m_strings . Append ( tmp_string )	123:2:3172:3201	5278486	8	True				
ANR	5278626	CallExpression	m_strings . Append ( tmp_string )		5278486	0					
ANR	5278627	Callee	m_strings . Append		5278486	0					
ANR	5278628	MemberAccess	m_strings . Append		5278486	0					
ANR	5278629	Identifier	m_strings		5278486	0					
ANR	5278630	Identifier	Append		5278486	1					
ANR	5278631	ArgumentList	tmp_string		5278486	1					
ANR	5278632	Argument	tmp_string		5278486	0					
ANR	5278633	Identifier	tmp_string		5278486	0					
ANR	5278634	ReturnType	void		5278486	1					
ANR	5278635	Identifier	StringList :: initializeFromString		5278486	2					
ANR	5278636	ParameterList	const char * s		5278486	3					
ANR	5278637	Parameter	const char * s	84:34:2160:2172	5278486	0	True				
ANR	5278638	ParameterType	const char *		5278486	0					
ANR	5278639	Identifier	s		5278486	1					
ANR	5278640	CFGEntryNode	ENTRY		5278486		True				
ANR	5278641	CFGExitNode	EXIT		5278486		True				
ANR	5278642	Symbol	* walk_ptr		5278486						
ANR	5278643	Symbol	malloc		5278486						
ANR	5278644	Symbol	* tmp_string		5278486						
ANR	5278645	Symbol	s		5278486						
ANR	5278646	Symbol	len		5278486						
ANR	5278647	Symbol	isspace		5278486						
ANR	5278648	Symbol	m_strings		5278486						
ANR	5278649	Symbol	begin_ptr		5278486						
ANR	5278650	Symbol	tmp_string		5278486						
ANR	5278651	Symbol	walk_ptr		5278486						
ANR	5278652	Symbol	isSeparator		5278486						
ANR	5278653	Symbol	* len		5278486						
ANR	5278654	Function	StringList :: print	127:0:3209:3330							
ANR	5278655	FunctionDef	StringList :: print ()		5278654	0					
ANR	5278656	CompoundStatement		129:0:3239:3330	5278654	0					
ANR	5278657	IdentifierDeclStatement	char * x ;	130:1:3242:3249	5278654	0	True				
ANR	5278658	IdentifierDecl	* x		5278654	0					
ANR	5278659	IdentifierDeclType	char *		5278654	0					
ANR	5278660	Identifier	x		5278654	1					
ANR	5278661	ExpressionStatement	m_strings . Rewind ( )	131:1:3252:3271	5278654	1	True				
ANR	5278662	CallExpression	m_strings . Rewind ( )		5278654	0					
ANR	5278663	Callee	m_strings . Rewind		5278654	0					
ANR	5278664	MemberAccess	m_strings . Rewind		5278654	0					
ANR	5278665	Identifier	m_strings		5278654	0					
ANR	5278666	Identifier	Rewind		5278654	1					
ANR	5278667	ArgumentList			5278654	1					
ANR	5278668	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		5278654	2					
ANR	5278669	Condition	x = m_strings . Next ( )	132:8:3281:3303	5278654	0	True				
ANR	5278670	AssignmentExpression	x = m_strings . Next ( )		5278654	0		=			
ANR	5278671	Identifier	x		5278654	0					
ANR	5278672	CallExpression	m_strings . Next ( )		5278654	1					
ANR	5278673	Callee	m_strings . Next		5278654	0					
ANR	5278674	MemberAccess	m_strings . Next		5278654	0					
ANR	5278675	Identifier	m_strings		5278654	0					
ANR	5278676	Identifier	Next		5278654	1					
ANR	5278677	ArgumentList			5278654	1					
ANR	5278678	ExpressionStatement	"printf ( ""[%s]\\n"" , x )"	133:2:3308:3328	5278654	1	True				
ANR	5278679	CallExpression	"printf ( ""[%s]\\n"" , x )"		5278654	0					
ANR	5278680	Callee	printf		5278654	0					
ANR	5278681	Identifier	printf		5278654	0					
ANR	5278682	ArgumentList	"""[%s]\\n"""		5278654	1					
ANR	5278683	Argument	"""[%s]\\n"""		5278654	0					
ANR	5278684	PrimaryExpression	"""[%s]\\n"""		5278654	0					
ANR	5278685	Argument	x		5278654	1					
ANR	5278686	Identifier	x		5278654	0					
ANR	5278687	ReturnType	void		5278654	1					
ANR	5278688	Identifier	StringList :: print		5278654	2					
ANR	5278689	ParameterList			5278654	3					
ANR	5278690	CFGEntryNode	ENTRY		5278654		True				
ANR	5278691	CFGExitNode	EXIT		5278654		True				
ANR	5278692	Symbol	x		5278654						
ANR	5278693	Symbol	m_strings		5278654						
ANR	5278694	Symbol	m_strings . Next		5278654						
ANR	5278695	Function	StringList :: clearAll	136:0:3333:3453							
ANR	5278696	FunctionDef	StringList :: clearAll ()		5278695	0					
ANR	5278697	CompoundStatement		138:0:3361:3453	5278695	0					
ANR	5278698	IdentifierDeclStatement	char * x ;	139:1:3364:3371	5278695	0	True				
ANR	5278699	IdentifierDecl	* x		5278695	0					
ANR	5278700	IdentifierDeclType	char *		5278695	0					
ANR	5278701	Identifier	x		5278695	1					
ANR	5278702	ExpressionStatement	m_strings . Rewind ( )	140:1:3374:3393	5278695	1	True				
ANR	5278703	CallExpression	m_strings . Rewind ( )		5278695	0					
ANR	5278704	Callee	m_strings . Rewind		5278695	0					
ANR	5278705	MemberAccess	m_strings . Rewind		5278695	0					
ANR	5278706	Identifier	m_strings		5278695	0					
ANR	5278707	Identifier	Rewind		5278695	1					
ANR	5278708	ArgumentList			5278695	1					
ANR	5278709	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		5278695	2					
ANR	5278710	Condition	x = m_strings . Next ( )	141:8:3403:3425	5278695	0	True				
ANR	5278711	AssignmentExpression	x = m_strings . Next ( )		5278695	0		=			
ANR	5278712	Identifier	x		5278695	0					
ANR	5278713	CallExpression	m_strings . Next ( )		5278695	1					
ANR	5278714	Callee	m_strings . Next		5278695	0					
ANR	5278715	MemberAccess	m_strings . Next		5278695	0					
ANR	5278716	Identifier	m_strings		5278695	0					
ANR	5278717	Identifier	Next		5278695	1					
ANR	5278718	ArgumentList			5278695	1					
ANR	5278719	CompoundStatement		5:1:67:67	5278695	1					
ANR	5278720	ExpressionStatement	deleteCurrent ( )	143:2:3433:3448	5278695	0	True				
ANR	5278721	CallExpression	deleteCurrent ( )		5278695	0					
ANR	5278722	Callee	deleteCurrent		5278695	0					
ANR	5278723	Identifier	deleteCurrent		5278695	0					
ANR	5278724	ArgumentList			5278695	1					
ANR	5278725	ReturnType	void		5278695	1					
ANR	5278726	Identifier	StringList :: clearAll		5278695	2					
ANR	5278727	ParameterList			5278695	3					
ANR	5278728	CFGEntryNode	ENTRY		5278695		True				
ANR	5278729	CFGExitNode	EXIT		5278695		True				
ANR	5278730	Symbol	x		5278695						
ANR	5278731	Symbol	m_strings		5278695						
ANR	5278732	Symbol	m_strings . Next		5278695						
ANR	5278733	Function	StringList :: ~StringList	147:0:3456:3545							
ANR	5278734	FunctionDef	StringList :: ~StringList ()		5278733	0					
ANR	5278735	CompoundStatement		148:0:3483:3545	5278733	0					
ANR	5278736	ExpressionStatement	clearAll ( )	149:1:3486:3496	5278733	0	True				
ANR	5278737	CallExpression	clearAll ( )		5278733	0					
ANR	5278738	Callee	clearAll		5278733	0					
ANR	5278739	Identifier	clearAll		5278733	0					
ANR	5278740	ArgumentList			5278733	1					
ANR	5278741	IfStatement	if ( m_delimiters )		5278733	1					
ANR	5278742	Condition	m_delimiters	150:6:3504:3515	5278733	0	True				
ANR	5278743	Identifier	m_delimiters		5278733	0					
ANR	5278744	Statement	delete	151:2:3521:3526	5278733	1	True				
ANR	5278745	Statement	[	151:9:3528:3528	5278733	2	True				
ANR	5278746	Statement	]	151:10:3529:3529	5278733	3	True				
ANR	5278747	ExpressionStatement	m_delimiters	151:12:3531:3543	5278733	4	True				
ANR	5278748	Identifier	m_delimiters		5278733	0					
ANR	5278749	Identifier	StringList :: ~StringList		5278733	1					
ANR	5278750	ParameterList			5278733	2					
ANR	5278751	CFGEntryNode	ENTRY		5278733		True				
ANR	5278752	CFGExitNode	EXIT		5278733		True				
ANR	5278753	Symbol	m_delimiters		5278733						
ANR	5278754	Function	StringList :: create_union	155:0:3549:3951							
ANR	5278755	FunctionDef	"StringList :: create_union (StringList & subset , bool anycase)"		5278754	0					
ANR	5278756	CompoundStatement		157:0:3614:3951	5278754	0					
ANR	5278757	IdentifierDeclStatement	char * x ;	158:1:3617:3624	5278754	0	True				
ANR	5278758	IdentifierDecl	* x		5278754	0					
ANR	5278759	IdentifierDeclType	char *		5278754	0					
ANR	5278760	Identifier	x		5278754	1					
ANR	5278761	IdentifierDeclStatement	BOOLEAN ret_val = TRUE ;	159:1:3627:3649	5278754	1	True				
ANR	5278762	IdentifierDecl	ret_val = TRUE		5278754	0					
ANR	5278763	IdentifierDeclType	BOOLEAN		5278754	0					
ANR	5278764	Identifier	ret_val		5278754	1					
ANR	5278765	AssignmentExpression	ret_val = TRUE		5278754	2		=			
ANR	5278766	Identifier	TRUE		5278754	0					
ANR	5278767	Identifier	TRUE		5278754	1					
ANR	5278768	IdentifierDeclStatement	bool result = false ;	160:1:3652:3671	5278754	2	True				
ANR	5278769	IdentifierDecl	result = false		5278754	0					
ANR	5278770	IdentifierDeclType	bool		5278754	0					
ANR	5278771	Identifier	result		5278754	1					
ANR	5278772	AssignmentExpression	result = false		5278754	2		=			
ANR	5278773	Identifier	false		5278754	0					
ANR	5278774	Identifier	false		5278754	1					
ANR	5278775	ExpressionStatement	subset . rewind ( )	162:1:3700:3716	5278754	3	True				
ANR	5278776	CallExpression	subset . rewind ( )		5278754	0					
ANR	5278777	Callee	subset . rewind		5278754	0					
ANR	5278778	MemberAccess	subset . rewind		5278754	0					
ANR	5278779	Identifier	subset		5278754	0					
ANR	5278780	Identifier	rewind		5278754	1					
ANR	5278781	ArgumentList			5278754	1					
ANR	5278782	WhileStatement	while ( ( x = subset . next ( ) ) )		5278754	4					
ANR	5278783	Condition	x = subset . next ( )	163:8:3726:3745	5278754	0	True				
ANR	5278784	AssignmentExpression	x = subset . next ( )		5278754	0		=			
ANR	5278785	Identifier	x		5278754	0					
ANR	5278786	CallExpression	subset . next ( )		5278754	1					
ANR	5278787	Callee	subset . next		5278754	0					
ANR	5278788	MemberAccess	subset . next		5278754	0					
ANR	5278789	Identifier	subset		5278754	0					
ANR	5278790	Identifier	next		5278754	1					
ANR	5278791	ArgumentList			5278754	1					
ANR	5278792	CompoundStatement		7:30:133:133	5278754	1					
ANR	5278793	IfStatement	if ( anycase )		5278754	0					
ANR	5278794	Condition	anycase	164:7:3757:3763	5278754	0	True				
ANR	5278795	Identifier	anycase		5278754	0					
ANR	5278796	CompoundStatement		8:17:152:152	5278754	1					
ANR	5278797	ExpressionStatement	ret_val = contains_anycase ( x )	165:3:3772:3801	5278754	0	True				
ANR	5278798	AssignmentExpression	ret_val = contains_anycase ( x )		5278754	0		=			
ANR	5278799	Identifier	ret_val		5278754	0					
ANR	5278800	CallExpression	contains_anycase ( x )		5278754	1					
ANR	5278801	Callee	contains_anycase		5278754	0					
ANR	5278802	Identifier	contains_anycase		5278754	0					
ANR	5278803	ArgumentList	x		5278754	1					
ANR	5278804	Argument	x		5278754	0					
ANR	5278805	Identifier	x		5278754	0					
ANR	5278806	ElseStatement	else		5278754	0					
ANR	5278807	CompoundStatement		10:9:197:197	5278754	0					
ANR	5278808	ExpressionStatement	ret_val = contains ( x )	167:3:3817:3838	5278754	0	True				
ANR	5278809	AssignmentExpression	ret_val = contains ( x )		5278754	0		=			
ANR	5278810	Identifier	ret_val		5278754	0					
ANR	5278811	CallExpression	contains ( x )		5278754	1					
ANR	5278812	Callee	contains		5278754	0					
ANR	5278813	Identifier	contains		5278754	0					
ANR	5278814	ArgumentList	x		5278754	1					
ANR	5278815	Argument	x		5278754	0					
ANR	5278816	Identifier	x		5278754	0					
ANR	5278817	IfStatement	if ( ret_val == FALSE )		5278754	1					
ANR	5278818	Condition	ret_val == FALSE	170:6:3875:3890	5278754	0	True				
ANR	5278819	EqualityExpression	ret_val == FALSE		5278754	0		==			
ANR	5278820	Identifier	ret_val		5278754	0					
ANR	5278821	Identifier	FALSE		5278754	1					
ANR	5278822	CompoundStatement		14:25:279:279	5278754	1					
ANR	5278823	ExpressionStatement	result = true	171:3:3899:3912	5278754	0	True				
ANR	5278824	AssignmentExpression	result = true		5278754	0		=			
ANR	5278825	Identifier	result		5278754	0					
ANR	5278826	Identifier	true		5278754	1					
ANR	5278827	ExpressionStatement	append ( x )	172:3:3917:3926	5278754	1	True				
ANR	5278828	CallExpression	append ( x )		5278754	0					
ANR	5278829	Callee	append		5278754	0					
ANR	5278830	Identifier	append		5278754	0					
ANR	5278831	ArgumentList	x		5278754	1					
ANR	5278832	Argument	x		5278754	0					
ANR	5278833	Identifier	x		5278754	0					
ANR	5278834	ReturnStatement	return result ;	175:1:3936:3949	5278754	5	True				
ANR	5278835	Identifier	result		5278754	0					
ANR	5278836	ReturnType	bool		5278754	1					
ANR	5278837	Identifier	StringList :: create_union		5278754	2					
ANR	5278838	ParameterList	"StringList & subset , bool anycase"		5278754	3					
ANR	5278839	Parameter	StringList & subset	156:25:3579:3597	5278754	0	True				
ANR	5278840	ParameterType	StringList &		5278754	0					
ANR	5278841	Identifier	subset		5278754	1					
ANR	5278842	Parameter	bool anycase	156:46:3600:3611	5278754	1	True				
ANR	5278843	ParameterType	bool		5278754	0					
ANR	5278844	Identifier	anycase		5278754	1					
ANR	5278845	CFGEntryNode	ENTRY		5278754		True				
ANR	5278846	CFGExitNode	EXIT		5278754		True				
ANR	5278847	Symbol	result		5278754						
ANR	5278848	Symbol	contains		5278754						
ANR	5278849	Symbol	anycase		5278754						
ANR	5278850	Symbol	contains_anycase		5278754						
ANR	5278851	Symbol	x		5278754						
ANR	5278852	Symbol	false		5278754						
ANR	5278853	Symbol	subset . next		5278754						
ANR	5278854	Symbol	true		5278754						
ANR	5278855	Symbol	TRUE		5278754						
ANR	5278856	Symbol	FALSE		5278754						
ANR	5278857	Symbol	ret_val		5278754						
ANR	5278858	Symbol	subset		5278754						
ANR	5278859	Function	StringList :: contains_list	179:0:3955:4262							
ANR	5278860	FunctionDef	"StringList :: contains_list (StringList & subset , bool anycase)"		5278859	0					
ANR	5278861	CompoundStatement		181:0:4021:4262	5278859	0					
ANR	5278862	IdentifierDeclStatement	char * x ;	182:1:4024:4031	5278859	0	True				
ANR	5278863	IdentifierDecl	* x		5278859	0					
ANR	5278864	IdentifierDeclType	char *		5278859	0					
ANR	5278865	Identifier	x		5278859	1					
ANR	5278866	IdentifierDeclStatement	BOOLEAN ret_val ;	183:1:4034:4049	5278859	1	True				
ANR	5278867	IdentifierDecl	ret_val		5278859	0					
ANR	5278868	IdentifierDeclType	BOOLEAN		5278859	0					
ANR	5278869	Identifier	ret_val		5278859	1					
ANR	5278870	ExpressionStatement	subset . rewind ( )	185:1:4053:4069	5278859	2	True				
ANR	5278871	CallExpression	subset . rewind ( )		5278859	0					
ANR	5278872	Callee	subset . rewind		5278859	0					
ANR	5278873	MemberAccess	subset . rewind		5278859	0					
ANR	5278874	Identifier	subset		5278859	0					
ANR	5278875	Identifier	rewind		5278859	1					
ANR	5278876	ArgumentList			5278859	1					
ANR	5278877	WhileStatement	while ( ( x = subset . next ( ) ) )		5278859	3					
ANR	5278878	Condition	x = subset . next ( )	186:8:4079:4098	5278859	0	True				
ANR	5278879	AssignmentExpression	x = subset . next ( )		5278859	0		=			
ANR	5278880	Identifier	x		5278859	0					
ANR	5278881	CallExpression	subset . next ( )		5278859	1					
ANR	5278882	Callee	subset . next		5278859	0					
ANR	5278883	MemberAccess	subset . next		5278859	0					
ANR	5278884	Identifier	subset		5278859	0					
ANR	5278885	Identifier	next		5278859	1					
ANR	5278886	ArgumentList			5278859	1					
ANR	5278887	CompoundStatement		6:30:79:79	5278859	1					
ANR	5278888	IfStatement	if ( anycase )		5278859	0					
ANR	5278889	Condition	anycase	187:7:4110:4116	5278859	0	True				
ANR	5278890	Identifier	anycase		5278859	0					
ANR	5278891	CompoundStatement		7:17:98:98	5278859	1					
ANR	5278892	ExpressionStatement	ret_val = contains_anycase ( x )	188:3:4125:4154	5278859	0	True				
ANR	5278893	AssignmentExpression	ret_val = contains_anycase ( x )		5278859	0		=			
ANR	5278894	Identifier	ret_val		5278859	0					
ANR	5278895	CallExpression	contains_anycase ( x )		5278859	1					
ANR	5278896	Callee	contains_anycase		5278859	0					
ANR	5278897	Identifier	contains_anycase		5278859	0					
ANR	5278898	ArgumentList	x		5278859	1					
ANR	5278899	Argument	x		5278859	0					
ANR	5278900	Identifier	x		5278859	0					
ANR	5278901	ElseStatement	else		5278859	0					
ANR	5278902	CompoundStatement		9:9:143:143	5278859	0					
ANR	5278903	ExpressionStatement	ret_val = contains ( x )	190:3:4170:4191	5278859	0	True				
ANR	5278904	AssignmentExpression	ret_val = contains ( x )		5278859	0		=			
ANR	5278905	Identifier	ret_val		5278859	0					
ANR	5278906	CallExpression	contains ( x )		5278859	1					
ANR	5278907	Callee	contains		5278859	0					
ANR	5278908	Identifier	contains		5278859	0					
ANR	5278909	ArgumentList	x		5278859	1					
ANR	5278910	Argument	x		5278859	0					
ANR	5278911	Identifier	x		5278859	0					
ANR	5278912	IfStatement	if ( ret_val == FALSE )		5278859	1					
ANR	5278913	Condition	ret_val == FALSE	192:6:4203:4218	5278859	0	True				
ANR	5278914	EqualityExpression	ret_val == FALSE		5278859	0		==			
ANR	5278915	Identifier	ret_val		5278859	0					
ANR	5278916	Identifier	FALSE		5278859	1					
ANR	5278917	CompoundStatement		12:25:200:200	5278859	1					
ANR	5278918	ReturnStatement	return false ;	193:3:4227:4239	5278859	0	True				
ANR	5278919	Identifier	false		5278859	0					
ANR	5278920	ReturnStatement	return true ;	196:1:4249:4260	5278859	4	True				
ANR	5278921	Identifier	true		5278859	0					
ANR	5278922	ReturnType	bool		5278859	1					
ANR	5278923	Identifier	StringList :: contains_list		5278859	2					
ANR	5278924	ParameterList	"StringList & subset , bool anycase"		5278859	3					
ANR	5278925	Parameter	StringList & subset	180:26:3986:4004	5278859	0	True				
ANR	5278926	ParameterType	StringList &		5278859	0					
ANR	5278927	Identifier	subset		5278859	1					
ANR	5278928	Parameter	bool anycase	180:47:4007:4018	5278859	1	True				
ANR	5278929	ParameterType	bool		5278859	0					
ANR	5278930	Identifier	anycase		5278859	1					
ANR	5278931	CFGEntryNode	ENTRY		5278859		True				
ANR	5278932	CFGExitNode	EXIT		5278859		True				
ANR	5278933	Symbol	contains		5278859						
ANR	5278934	Symbol	anycase		5278859						
ANR	5278935	Symbol	contains_anycase		5278859						
ANR	5278936	Symbol	x		5278859						
ANR	5278937	Symbol	subset . next		5278859						
ANR	5278938	Symbol	false		5278859						
ANR	5278939	Symbol	true		5278859						
ANR	5278940	Symbol	FALSE		5278859						
ANR	5278941	Symbol	ret_val		5278859						
ANR	5278942	Symbol	subset		5278859						
ANR	5278943	Function	StringList :: contains	200:0:4266:4454							
ANR	5278944	FunctionDef	StringList :: contains (const char * st)		5278943	0					
ANR	5278945	CompoundStatement		202:0:4313:4454	5278943	0					
ANR	5278946	IdentifierDeclStatement	char * x ;	203:1:4316:4323	5278943	0	True				
ANR	5278947	IdentifierDecl	* x		5278943	0					
ANR	5278948	IdentifierDeclType	char *		5278943	0					
ANR	5278949	Identifier	x		5278943	1					
ANR	5278950	ExpressionStatement	m_strings . Rewind ( )	205:1:4327:4346	5278943	1	True				
ANR	5278951	CallExpression	m_strings . Rewind ( )		5278943	0					
ANR	5278952	Callee	m_strings . Rewind		5278943	0					
ANR	5278953	MemberAccess	m_strings . Rewind		5278943	0					
ANR	5278954	Identifier	m_strings		5278943	0					
ANR	5278955	Identifier	Rewind		5278943	1					
ANR	5278956	ArgumentList			5278943	1					
ANR	5278957	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		5278943	2					
ANR	5278958	Condition	x = m_strings . Next ( )	206:8:4356:4378	5278943	0	True				
ANR	5278959	AssignmentExpression	x = m_strings . Next ( )		5278943	0		=			
ANR	5278960	Identifier	x		5278943	0					
ANR	5278961	CallExpression	m_strings . Next ( )		5278943	1					
ANR	5278962	Callee	m_strings . Next		5278943	0					
ANR	5278963	MemberAccess	m_strings . Next		5278943	0					
ANR	5278964	Identifier	m_strings		5278943	0					
ANR	5278965	Identifier	Next		5278943	1					
ANR	5278966	ArgumentList			5278943	1					
ANR	5278967	CompoundStatement		5:33:67:67	5278943	1					
ANR	5278968	IfStatement	"if ( strcmp ( st , x ) == MATCH )"		5278943	0					
ANR	5278969	Condition	"strcmp ( st , x ) == MATCH"	207:6:4389:4410	5278943	0	True				
ANR	5278970	EqualityExpression	"strcmp ( st , x ) == MATCH"		5278943	0		==			
ANR	5278971	CallExpression	"strcmp ( st , x )"		5278943	0					
ANR	5278972	Callee	strcmp		5278943	0					
ANR	5278973	Identifier	strcmp		5278943	0					
ANR	5278974	ArgumentList	st		5278943	1					
ANR	5278975	Argument	st		5278943	0					
ANR	5278976	Identifier	st		5278943	0					
ANR	5278977	Argument	x		5278943	1					
ANR	5278978	Identifier	x		5278943	0					
ANR	5278979	Identifier	MATCH		5278943	1					
ANR	5278980	CompoundStatement		6:31:100:100	5278943	1					
ANR	5278981	ReturnStatement	return TRUE ;	208:3:4419:4430	5278943	0	True				
ANR	5278982	Identifier	TRUE		5278943	0					
ANR	5278983	ReturnStatement	return FALSE ;	211:1:4440:4452	5278943	3	True				
ANR	5278984	Identifier	FALSE		5278943	0					
ANR	5278985	ReturnType	BOOLEAN		5278943	1					
ANR	5278986	Identifier	StringList :: contains		5278943	2					
ANR	5278987	ParameterList	const char * st		5278943	3					
ANR	5278988	Parameter	const char * st	201:22:4296:4309	5278943	0	True				
ANR	5278989	ParameterType	const char *		5278943	0					
ANR	5278990	Identifier	st		5278943	1					
ANR	5278991	CFGEntryNode	ENTRY		5278943		True				
ANR	5278992	CFGExitNode	EXIT		5278943		True				
ANR	5278993	Symbol	strcmp		5278943						
ANR	5278994	Symbol	st		5278943						
ANR	5278995	Symbol	x		5278943						
ANR	5278996	Symbol	m_strings		5278943						
ANR	5278997	Symbol	TRUE		5278943						
ANR	5278998	Symbol	FALSE		5278943						
ANR	5278999	Symbol	m_strings . Next		5278943						
ANR	5279000	Symbol	MATCH		5278943						
ANR	5279001	Function	StringList :: contains_anycase	215:0:4458:4658							
ANR	5279002	FunctionDef	StringList :: contains_anycase (const char * st)		5279001	0					
ANR	5279003	CompoundStatement		217:0:4513:4658	5279001	0					
ANR	5279004	IdentifierDeclStatement	char * x ;	218:1:4516:4523	5279001	0	True				
ANR	5279005	IdentifierDecl	* x		5279001	0					
ANR	5279006	IdentifierDeclType	char *		5279001	0					
ANR	5279007	Identifier	x		5279001	1					
ANR	5279008	ExpressionStatement	m_strings . Rewind ( )	220:1:4527:4546	5279001	1	True				
ANR	5279009	CallExpression	m_strings . Rewind ( )		5279001	0					
ANR	5279010	Callee	m_strings . Rewind		5279001	0					
ANR	5279011	MemberAccess	m_strings . Rewind		5279001	0					
ANR	5279012	Identifier	m_strings		5279001	0					
ANR	5279013	Identifier	Rewind		5279001	1					
ANR	5279014	ArgumentList			5279001	1					
ANR	5279015	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		5279001	2					
ANR	5279016	Condition	x = m_strings . Next ( )	221:8:4556:4578	5279001	0	True				
ANR	5279017	AssignmentExpression	x = m_strings . Next ( )		5279001	0		=			
ANR	5279018	Identifier	x		5279001	0					
ANR	5279019	CallExpression	m_strings . Next ( )		5279001	1					
ANR	5279020	Callee	m_strings . Next		5279001	0					
ANR	5279021	MemberAccess	m_strings . Next		5279001	0					
ANR	5279022	Identifier	m_strings		5279001	0					
ANR	5279023	Identifier	Next		5279001	1					
ANR	5279024	ArgumentList			5279001	1					
ANR	5279025	CompoundStatement		5:33:67:67	5279001	1					
ANR	5279026	IfStatement	"if ( strcasecmp ( st , x ) == MATCH )"		5279001	0					
ANR	5279027	Condition	"strcasecmp ( st , x ) == MATCH"	222:6:4589:4614	5279001	0	True				
ANR	5279028	EqualityExpression	"strcasecmp ( st , x ) == MATCH"		5279001	0		==			
ANR	5279029	CallExpression	"strcasecmp ( st , x )"		5279001	0					
ANR	5279030	Callee	strcasecmp		5279001	0					
ANR	5279031	Identifier	strcasecmp		5279001	0					
ANR	5279032	ArgumentList	st		5279001	1					
ANR	5279033	Argument	st		5279001	0					
ANR	5279034	Identifier	st		5279001	0					
ANR	5279035	Argument	x		5279001	1					
ANR	5279036	Identifier	x		5279001	0					
ANR	5279037	Identifier	MATCH		5279001	1					
ANR	5279038	CompoundStatement		6:35:104:104	5279001	1					
ANR	5279039	ReturnStatement	return TRUE ;	223:3:4623:4634	5279001	0	True				
ANR	5279040	Identifier	TRUE		5279001	0					
ANR	5279041	ReturnStatement	return FALSE ;	226:1:4644:4656	5279001	3	True				
ANR	5279042	Identifier	FALSE		5279001	0					
ANR	5279043	ReturnType	BOOLEAN		5279001	1					
ANR	5279044	Identifier	StringList :: contains_anycase		5279001	2					
ANR	5279045	ParameterList	const char * st		5279001	3					
ANR	5279046	Parameter	const char * st	216:30:4496:4509	5279001	0	True				
ANR	5279047	ParameterType	const char *		5279001	0					
ANR	5279048	Identifier	st		5279001	1					
ANR	5279049	CFGEntryNode	ENTRY		5279001		True				
ANR	5279050	CFGExitNode	EXIT		5279001		True				
ANR	5279051	Symbol	st		5279001						
ANR	5279052	Symbol	x		5279001						
ANR	5279053	Symbol	m_strings		5279001						
ANR	5279054	Symbol	TRUE		5279001						
ANR	5279055	Symbol	FALSE		5279001						
ANR	5279056	Symbol	m_strings . Next		5279001						
ANR	5279057	Symbol	strcasecmp		5279001						
ANR	5279058	Symbol	MATCH		5279001						
ANR	5279059	Function	StringList :: remove	230:0:4662:4831							
ANR	5279060	FunctionDef	StringList :: remove (const char * str)		5279059	0					
ANR	5279061	CompoundStatement		232:0:4703:4831	5279059	0					
ANR	5279062	IdentifierDeclStatement	char * x ;	233:1:4706:4713	5279059	0	True				
ANR	5279063	IdentifierDecl	* x		5279059	0					
ANR	5279064	IdentifierDeclType	char *		5279059	0					
ANR	5279065	Identifier	x		5279059	1					
ANR	5279066	ExpressionStatement	m_strings . Rewind ( )	235:1:4717:4735	5279059	1	True				
ANR	5279067	CallExpression	m_strings . Rewind ( )		5279059	0					
ANR	5279068	Callee	m_strings . Rewind		5279059	0					
ANR	5279069	MemberAccess	m_strings . Rewind		5279059	0					
ANR	5279070	Identifier	m_strings		5279059	0					
ANR	5279071	Identifier	Rewind		5279059	1					
ANR	5279072	ArgumentList			5279059	1					
ANR	5279073	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		5279059	2					
ANR	5279074	Condition	x = m_strings . Next ( )	236:8:4745:4766	5279059	0	True				
ANR	5279075	AssignmentExpression	x = m_strings . Next ( )		5279059	0		=			
ANR	5279076	Identifier	x		5279059	0					
ANR	5279077	CallExpression	m_strings . Next ( )		5279059	1					
ANR	5279078	Callee	m_strings . Next		5279059	0					
ANR	5279079	MemberAccess	m_strings . Next		5279059	0					
ANR	5279080	Identifier	m_strings		5279059	0					
ANR	5279081	Identifier	Next		5279059	1					
ANR	5279082	ArgumentList			5279059	1					
ANR	5279083	CompoundStatement		5:32:65:65	5279059	1					
ANR	5279084	IfStatement	"if ( strcmp ( str , x ) == MATCH )"		5279059	0					
ANR	5279085	Condition	"strcmp ( str , x ) == MATCH"	237:6:4777:4799	5279059	0	True				
ANR	5279086	EqualityExpression	"strcmp ( str , x ) == MATCH"		5279059	0		==			
ANR	5279087	CallExpression	"strcmp ( str , x )"		5279059	0					
ANR	5279088	Callee	strcmp		5279059	0					
ANR	5279089	Identifier	strcmp		5279059	0					
ANR	5279090	ArgumentList	str		5279059	1					
ANR	5279091	Argument	str		5279059	0					
ANR	5279092	Identifier	str		5279059	0					
ANR	5279093	Argument	x		5279059	1					
ANR	5279094	Identifier	x		5279059	0					
ANR	5279095	Identifier	MATCH		5279059	1					
ANR	5279096	CompoundStatement		6:31:98:98	5279059	1					
ANR	5279097	ExpressionStatement	deleteCurrent ( )	238:3:4807:4822	5279059	0	True				
ANR	5279098	CallExpression	deleteCurrent ( )		5279059	0					
ANR	5279099	Callee	deleteCurrent		5279059	0					
ANR	5279100	Identifier	deleteCurrent		5279059	0					
ANR	5279101	ArgumentList			5279059	1					
ANR	5279102	ReturnType	void		5279059	1					
ANR	5279103	Identifier	StringList :: remove		5279059	2					
ANR	5279104	ParameterList	const char * str		5279059	3					
ANR	5279105	Parameter	const char * str	231:19:4686:4700	5279059	0	True				
ANR	5279106	ParameterType	const char *		5279059	0					
ANR	5279107	Identifier	str		5279059	1					
ANR	5279108	CFGEntryNode	ENTRY		5279059		True				
ANR	5279109	CFGExitNode	EXIT		5279059		True				
ANR	5279110	Symbol	str		5279059						
ANR	5279111	Symbol	strcmp		5279059						
ANR	5279112	Symbol	x		5279059						
ANR	5279113	Symbol	m_strings		5279059						
ANR	5279114	Symbol	m_strings . Next		5279059						
ANR	5279115	Symbol	MATCH		5279059						
ANR	5279116	Function	StringList :: remove_anycase	243:0:4834:5015							
ANR	5279117	FunctionDef	StringList :: remove_anycase (const char * str)		5279116	0					
ANR	5279118	CompoundStatement		245:0:4883:5015	5279116	0					
ANR	5279119	IdentifierDeclStatement	char * x ;	246:1:4886:4893	5279116	0	True				
ANR	5279120	IdentifierDecl	* x		5279116	0					
ANR	5279121	IdentifierDeclType	char *		5279116	0					
ANR	5279122	Identifier	x		5279116	1					
ANR	5279123	ExpressionStatement	m_strings . Rewind ( )	248:1:4897:4915	5279116	1	True				
ANR	5279124	CallExpression	m_strings . Rewind ( )		5279116	0					
ANR	5279125	Callee	m_strings . Rewind		5279116	0					
ANR	5279126	MemberAccess	m_strings . Rewind		5279116	0					
ANR	5279127	Identifier	m_strings		5279116	0					
ANR	5279128	Identifier	Rewind		5279116	1					
ANR	5279129	ArgumentList			5279116	1					
ANR	5279130	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		5279116	2					
ANR	5279131	Condition	x = m_strings . Next ( )	249:8:4925:4946	5279116	0	True				
ANR	5279132	AssignmentExpression	x = m_strings . Next ( )		5279116	0		=			
ANR	5279133	Identifier	x		5279116	0					
ANR	5279134	CallExpression	m_strings . Next ( )		5279116	1					
ANR	5279135	Callee	m_strings . Next		5279116	0					
ANR	5279136	MemberAccess	m_strings . Next		5279116	0					
ANR	5279137	Identifier	m_strings		5279116	0					
ANR	5279138	Identifier	Next		5279116	1					
ANR	5279139	ArgumentList			5279116	1					
ANR	5279140	CompoundStatement		5:32:65:65	5279116	1					
ANR	5279141	IfStatement	"if ( strcasecmp ( str , x ) == MATCH )"		5279116	0					
ANR	5279142	Condition	"strcasecmp ( str , x ) == MATCH"	250:6:4957:4983	5279116	0	True				
ANR	5279143	EqualityExpression	"strcasecmp ( str , x ) == MATCH"		5279116	0		==			
ANR	5279144	CallExpression	"strcasecmp ( str , x )"		5279116	0					
ANR	5279145	Callee	strcasecmp		5279116	0					
ANR	5279146	Identifier	strcasecmp		5279116	0					
ANR	5279147	ArgumentList	str		5279116	1					
ANR	5279148	Argument	str		5279116	0					
ANR	5279149	Identifier	str		5279116	0					
ANR	5279150	Argument	x		5279116	1					
ANR	5279151	Identifier	x		5279116	0					
ANR	5279152	Identifier	MATCH		5279116	1					
ANR	5279153	CompoundStatement		6:35:102:102	5279116	1					
ANR	5279154	ExpressionStatement	deleteCurrent ( )	251:3:4991:5006	5279116	0	True				
ANR	5279155	CallExpression	deleteCurrent ( )		5279116	0					
ANR	5279156	Callee	deleteCurrent		5279116	0					
ANR	5279157	Identifier	deleteCurrent		5279116	0					
ANR	5279158	ArgumentList			5279116	1					
ANR	5279159	ReturnType	void		5279116	1					
ANR	5279160	Identifier	StringList :: remove_anycase		5279116	2					
ANR	5279161	ParameterList	const char * str		5279116	3					
ANR	5279162	Parameter	const char * str	244:27:4866:4880	5279116	0	True				
ANR	5279163	ParameterType	const char *		5279116	0					
ANR	5279164	Identifier	str		5279116	1					
ANR	5279165	CFGEntryNode	ENTRY		5279116		True				
ANR	5279166	CFGExitNode	EXIT		5279116		True				
ANR	5279167	Symbol	str		5279116						
ANR	5279168	Symbol	x		5279116						
ANR	5279169	Symbol	m_strings		5279116						
ANR	5279170	Symbol	m_strings . Next		5279116						
ANR	5279171	Symbol	strcasecmp		5279116						
ANR	5279172	Symbol	MATCH		5279116						
ANR	5279173	Function	StringList :: substring	256:0:5018:5246							
ANR	5279174	FunctionDef	StringList :: substring (const char * st)		5279173	0					
ANR	5279175	CompoundStatement		258:0:5066:5246	5279173	0					
ANR	5279176	IdentifierDeclStatement	char * x ;	259:1:5069:5079	5279173	0	True				
ANR	5279177	IdentifierDecl	* x		5279173	0					
ANR	5279178	IdentifierDeclType	char *		5279173	0					
ANR	5279179	Identifier	x		5279173	1					
ANR	5279180	IdentifierDeclStatement	int len ;	260:1:5082:5089	5279173	1	True				
ANR	5279181	IdentifierDecl	len		5279173	0					
ANR	5279182	IdentifierDeclType	int		5279173	0					
ANR	5279183	Identifier	len		5279173	1					
ANR	5279184	ExpressionStatement	m_strings . Rewind ( )	262:1:5094:5113	5279173	2	True				
ANR	5279185	CallExpression	m_strings . Rewind ( )		5279173	0					
ANR	5279186	Callee	m_strings . Rewind		5279173	0					
ANR	5279187	MemberAccess	m_strings . Rewind		5279173	0					
ANR	5279188	Identifier	m_strings		5279173	0					
ANR	5279189	Identifier	Rewind		5279173	1					
ANR	5279190	ArgumentList			5279173	1					
ANR	5279191	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		5279173	3					
ANR	5279192	Condition	x = m_strings . Next ( )	263:8:5123:5144	5279173	0	True				
ANR	5279193	AssignmentExpression	x = m_strings . Next ( )		5279173	0		=			
ANR	5279194	Identifier	x		5279173	0					
ANR	5279195	CallExpression	m_strings . Next ( )		5279173	1					
ANR	5279196	Callee	m_strings . Next		5279173	0					
ANR	5279197	MemberAccess	m_strings . Next		5279173	0					
ANR	5279198	Identifier	m_strings		5279173	0					
ANR	5279199	Identifier	Next		5279173	1					
ANR	5279200	ArgumentList			5279173	1					
ANR	5279201	CompoundStatement		6:33:81:81	5279173	1					
ANR	5279202	ExpressionStatement	len = strlen ( x )	264:2:5152:5167	5279173	0	True				
ANR	5279203	AssignmentExpression	len = strlen ( x )		5279173	0		=			
ANR	5279204	Identifier	len		5279173	0					
ANR	5279205	CallExpression	strlen ( x )		5279173	1					
ANR	5279206	Callee	strlen		5279173	0					
ANR	5279207	Identifier	strlen		5279173	0					
ANR	5279208	ArgumentList	x		5279173	1					
ANR	5279209	Argument	x		5279173	0					
ANR	5279210	Identifier	x		5279173	0					
ANR	5279211	IfStatement	"if ( strncmp ( st , x , len ) == MATCH )"		5279173	1					
ANR	5279212	Condition	"strncmp ( st , x , len ) == MATCH"	265:6:5175:5202	5279173	0	True				
ANR	5279213	EqualityExpression	"strncmp ( st , x , len ) == MATCH"		5279173	0		==			
ANR	5279214	CallExpression	"strncmp ( st , x , len )"		5279173	0					
ANR	5279215	Callee	strncmp		5279173	0					
ANR	5279216	Identifier	strncmp		5279173	0					
ANR	5279217	ArgumentList	st		5279173	1					
ANR	5279218	Argument	st		5279173	0					
ANR	5279219	Identifier	st		5279173	0					
ANR	5279220	Argument	x		5279173	1					
ANR	5279221	Identifier	x		5279173	0					
ANR	5279222	Argument	len		5279173	2					
ANR	5279223	Identifier	len		5279173	0					
ANR	5279224	Identifier	MATCH		5279173	1					
ANR	5279225	CompoundStatement		8:37:139:139	5279173	1					
ANR	5279226	ReturnStatement	return TRUE ;	266:3:5211:5222	5279173	0	True				
ANR	5279227	Identifier	TRUE		5279173	0					
ANR	5279228	ReturnStatement	return FALSE ;	269:1:5232:5244	5279173	4	True				
ANR	5279229	Identifier	FALSE		5279173	0					
ANR	5279230	ReturnType	BOOLEAN		5279173	1					
ANR	5279231	Identifier	StringList :: substring		5279173	2					
ANR	5279232	ParameterList	const char * st		5279173	3					
ANR	5279233	Parameter	const char * st	257:23:5049:5062	5279173	0	True				
ANR	5279234	ParameterType	const char *		5279173	0					
ANR	5279235	Identifier	st		5279173	1					
ANR	5279236	CFGEntryNode	ENTRY		5279173		True				
ANR	5279237	CFGExitNode	EXIT		5279173		True				
ANR	5279238	Symbol	st		5279173						
ANR	5279239	Symbol	strlen		5279173						
ANR	5279240	Symbol	strncmp		5279173						
ANR	5279241	Symbol	len		5279173						
ANR	5279242	Symbol	x		5279173						
ANR	5279243	Symbol	m_strings		5279173						
ANR	5279244	Symbol	TRUE		5279173						
ANR	5279245	Symbol	FALSE		5279173						
ANR	5279246	Symbol	m_strings . Next		5279173						
ANR	5279247	Symbol	MATCH		5279173						
ANR	5279248	Function	StringList :: contains_withwildcard	272:0:5249:5369							
ANR	5279249	FunctionDef	StringList :: contains_withwildcard (const char * string)		5279248	0					
ANR	5279250	CompoundStatement		274:0:5311:5369	5279248	0					
ANR	5279251	ReturnStatement	"return ( contains_withwildcard ( string , false ) != NULL ) ;"	275:1:5314:5367	5279248	0	True				
ANR	5279252	EqualityExpression	"contains_withwildcard ( string , false ) != NULL"		5279248	0		!=			
ANR	5279253	CallExpression	"contains_withwildcard ( string , false )"		5279248	0					
ANR	5279254	Callee	contains_withwildcard		5279248	0					
ANR	5279255	Identifier	contains_withwildcard		5279248	0					
ANR	5279256	ArgumentList	string		5279248	1					
ANR	5279257	Argument	string		5279248	0					
ANR	5279258	Identifier	string		5279248	0					
ANR	5279259	Argument	false		5279248	1					
ANR	5279260	Identifier	false		5279248	0					
ANR	5279261	Identifier	NULL		5279248	1					
ANR	5279262	ReturnType	BOOLEAN		5279248	1					
ANR	5279263	Identifier	StringList :: contains_withwildcard		5279248	2					
ANR	5279264	ParameterList	const char * string		5279248	3					
ANR	5279265	Parameter	const char * string	273:34:5291:5308	5279248	0	True				
ANR	5279266	ParameterType	const char *		5279248	0					
ANR	5279267	Identifier	string		5279248	1					
ANR	5279268	CFGEntryNode	ENTRY		5279248		True				
ANR	5279269	CFGExitNode	EXIT		5279248		True				
ANR	5279270	Symbol	NULL		5279248						
ANR	5279271	Symbol	string		5279248						
ANR	5279272	Symbol	contains_withwildcard		5279248						
ANR	5279273	Symbol	false		5279248						
ANR	5279274	Function	StringList :: contains_anycase_withwildcard	278:0:5372:5499							
ANR	5279275	FunctionDef	StringList :: contains_anycase_withwildcard (const char * string)		5279274	0					
ANR	5279276	CompoundStatement		280:0:5442:5499	5279274	0					
ANR	5279277	ReturnStatement	"return ( contains_withwildcard ( string , true ) != NULL ) ;"	281:1:5445:5497	5279274	0	True				
ANR	5279278	EqualityExpression	"contains_withwildcard ( string , true ) != NULL"		5279274	0		!=			
ANR	5279279	CallExpression	"contains_withwildcard ( string , true )"		5279274	0					
ANR	5279280	Callee	contains_withwildcard		5279274	0					
ANR	5279281	Identifier	contains_withwildcard		5279274	0					
ANR	5279282	ArgumentList	string		5279274	1					
ANR	5279283	Argument	string		5279274	0					
ANR	5279284	Identifier	string		5279274	0					
ANR	5279285	Argument	true		5279274	1					
ANR	5279286	Identifier	true		5279274	0					
ANR	5279287	Identifier	NULL		5279274	1					
ANR	5279288	ReturnType	BOOLEAN		5279274	1					
ANR	5279289	Identifier	StringList :: contains_anycase_withwildcard		5279274	2					
ANR	5279290	ParameterList	const char * string		5279274	3					
ANR	5279291	Parameter	const char * string	279:42:5422:5439	5279274	0	True				
ANR	5279292	ParameterType	const char *		5279274	0					
ANR	5279293	Identifier	string		5279274	1					
ANR	5279294	CFGEntryNode	ENTRY		5279274		True				
ANR	5279295	CFGExitNode	EXIT		5279274		True				
ANR	5279296	Symbol	NULL		5279274						
ANR	5279297	Symbol	string		5279274						
ANR	5279298	Symbol	contains_withwildcard		5279274						
ANR	5279299	Symbol	true		5279274						
ANR	5279300	Function	StringList :: find_matches_anycase_withwildcard	285:0:5503:5662							
ANR	5279301	FunctionDef	"StringList :: find_matches_anycase_withwildcard (const char * string , StringList * matches)"		5279300	0					
ANR	5279302	CompoundStatement		287:0:5597:5662	5279300	0					
ANR	5279303	ReturnStatement	"return contains_withwildcard ( string , true , matches ) != NULL ;"	288:4:5603:5660	5279300	0	True				
ANR	5279304	EqualityExpression	"contains_withwildcard ( string , true , matches ) != NULL"		5279300	0		!=			
ANR	5279305	CallExpression	"contains_withwildcard ( string , true , matches )"		5279300	0					
ANR	5279306	Callee	contains_withwildcard		5279300	0					
ANR	5279307	Identifier	contains_withwildcard		5279300	0					
ANR	5279308	ArgumentList	string		5279300	1					
ANR	5279309	Argument	string		5279300	0					
ANR	5279310	Identifier	string		5279300	0					
ANR	5279311	Argument	true		5279300	1					
ANR	5279312	Identifier	true		5279300	0					
ANR	5279313	Argument	matches		5279300	2					
ANR	5279314	Identifier	matches		5279300	0					
ANR	5279315	Identifier	NULL		5279300	1					
ANR	5279316	ReturnType	bool		5279300	1					
ANR	5279317	Identifier	StringList :: find_matches_anycase_withwildcard		5279300	2					
ANR	5279318	ParameterList	"const char * string , StringList * matches"		5279300	3					
ANR	5279319	Parameter	const char * string	286:47:5555:5573	5279300	0	True				
ANR	5279320	ParameterType	const char *		5279300	0					
ANR	5279321	Identifier	string		5279300	1					
ANR	5279322	Parameter	StringList * matches	286:68:5576:5594	5279300	1	True				
ANR	5279323	ParameterType	StringList *		5279300	0					
ANR	5279324	Identifier	matches		5279300	1					
ANR	5279325	CFGEntryNode	ENTRY		5279300		True				
ANR	5279326	CFGExitNode	EXIT		5279300		True				
ANR	5279327	Symbol	NULL		5279300						
ANR	5279328	Symbol	string		5279300						
ANR	5279329	Symbol	contains_withwildcard		5279300						
ANR	5279330	Symbol	true		5279300						
ANR	5279331	Symbol	matches		5279300						
ANR	5279332	Function	StringList :: contains_withwildcard	296:0:5923:8889							
ANR	5279333	FunctionDef	"StringList :: contains_withwildcard (const char * string , bool anycase , StringList * matches)"		5279332	0					
ANR	5279334	CompoundStatement		298:0:6025:8889	5279332	0					
ANR	5279335	IdentifierDeclStatement	char * x ;	299:1:6028:6035	5279332	0	True				
ANR	5279336	IdentifierDecl	* x		5279332	0					
ANR	5279337	IdentifierDeclType	char *		5279332	0					
ANR	5279338	Identifier	x		5279332	1					
ANR	5279339	IdentifierDeclStatement	char * matchstart ;	300:1:6038:6054	5279332	1	True				
ANR	5279340	IdentifierDecl	* matchstart		5279332	0					
ANR	5279341	IdentifierDeclType	char *		5279332	0					
ANR	5279342	Identifier	matchstart		5279332	1					
ANR	5279343	IdentifierDeclStatement	char * matchend ;	301:1:6057:6071	5279332	2	True				
ANR	5279344	IdentifierDecl	* matchend		5279332	0					
ANR	5279345	IdentifierDeclType	char *		5279332	0					
ANR	5279346	Identifier	matchend		5279332	1					
ANR	5279347	IdentifierDeclStatement	char * asterisk ;	302:1:6074:6088	5279332	3	True				
ANR	5279348	IdentifierDecl	* asterisk		5279332	0					
ANR	5279349	IdentifierDeclType	char *		5279332	0					
ANR	5279350	Identifier	asterisk		5279332	1					
ANR	5279351	IdentifierDeclStatement	"int matchendlen , len ;"	303:1:6091:6111	5279332	4	True				
ANR	5279352	IdentifierDecl	matchendlen		5279332	0					
ANR	5279353	IdentifierDeclType	int		5279332	0					
ANR	5279354	Identifier	matchendlen		5279332	1					
ANR	5279355	IdentifierDecl	len		5279332	1					
ANR	5279356	IdentifierDeclType	int		5279332	0					
ANR	5279357	Identifier	len		5279332	1					
ANR	5279358	IdentifierDeclStatement	BOOLEAN result ;	304:4:6117:6131	5279332	5	True				
ANR	5279359	IdentifierDecl	result		5279332	0					
ANR	5279360	IdentifierDeclType	BOOLEAN		5279332	0					
ANR	5279361	Identifier	result		5279332	1					
ANR	5279362	IdentifierDeclStatement	int temp ;	305:1:6135:6143	5279332	6	True				
ANR	5279363	IdentifierDecl	temp		5279332	0					
ANR	5279364	IdentifierDeclType	int		5279332	0					
ANR	5279365	Identifier	temp		5279332	1					
ANR	5279366	IfStatement	if ( ! string )		5279332	7					
ANR	5279367	Condition	! string	307:6:6153:6159	5279332	0	True				
ANR	5279368	UnaryOperationExpression	! string		5279332	0					
ANR	5279369	UnaryOperator	!		5279332	0					
ANR	5279370	Identifier	string		5279332	1					
ANR	5279371	ReturnStatement	return NULL ;	308:2:6165:6176	5279332	1	True				
ANR	5279372	Identifier	NULL		5279332	0					
ANR	5279373	ExpressionStatement	m_strings . Rewind ( )	310:1:6180:6198	5279332	8	True				
ANR	5279374	CallExpression	m_strings . Rewind ( )		5279332	0					
ANR	5279375	Callee	m_strings . Rewind		5279332	0					
ANR	5279376	MemberAccess	m_strings . Rewind		5279332	0					
ANR	5279377	Identifier	m_strings		5279332	0					
ANR	5279378	Identifier	Rewind		5279332	1					
ANR	5279379	ArgumentList			5279332	1					
ANR	5279380	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		5279332	9					
ANR	5279381	Condition	x = m_strings . Next ( )	312:9:6210:6229	5279332	0	True				
ANR	5279382	AssignmentExpression	x = m_strings . Next ( )		5279332	0		=			
ANR	5279383	Identifier	x		5279332	0					
ANR	5279384	CallExpression	m_strings . Next ( )		5279332	1					
ANR	5279385	Callee	m_strings . Next		5279332	0					
ANR	5279386	MemberAccess	m_strings . Next		5279332	0					
ANR	5279387	Identifier	m_strings		5279332	0					
ANR	5279388	Identifier	Next		5279332	1					
ANR	5279389	ArgumentList			5279332	1					
ANR	5279390	CompoundStatement		15:32:207:207	5279332	1					
ANR	5279391	IfStatement	"if ( ( asterisk = strchr ( x , '*' ) ) == NULL )"		5279332	0					
ANR	5279392	Condition	"( asterisk = strchr ( x , '*' ) ) == NULL"	314:7:6243:6276	5279332	0	True				
ANR	5279393	EqualityExpression	"( asterisk = strchr ( x , '*' ) ) == NULL"		5279332	0		==			
ANR	5279394	AssignmentExpression	"asterisk = strchr ( x , '*' )"		5279332	0		=			
ANR	5279395	Identifier	asterisk		5279332	0					
ANR	5279396	CallExpression	"strchr ( x , '*' )"		5279332	1					
ANR	5279397	Callee	strchr		5279332	0					
ANR	5279398	Identifier	strchr		5279332	0					
ANR	5279399	ArgumentList	x		5279332	1					
ANR	5279400	Argument	x		5279332	0					
ANR	5279401	Identifier	x		5279332	0					
ANR	5279402	Argument	'*'		5279332	1					
ANR	5279403	PrimaryExpression	'*'		5279332	0					
ANR	5279404	Identifier	NULL		5279332	1					
ANR	5279405	CompoundStatement		17:44:254:254	5279332	1					
ANR	5279406	IfStatement	if ( anycase )		5279332	0					
ANR	5279407	Condition	anycase	316:7:6344:6350	5279332	0	True				
ANR	5279408	Identifier	anycase		5279332	0					
ANR	5279409	CompoundStatement		19:16:327:327	5279332	1					
ANR	5279410	ExpressionStatement	"temp = strcasecmp ( x , string )"	317:4:6359:6386	5279332	0	True				
ANR	5279411	AssignmentExpression	"temp = strcasecmp ( x , string )"		5279332	0		=			
ANR	5279412	Identifier	temp		5279332	0					
ANR	5279413	CallExpression	"strcasecmp ( x , string )"		5279332	1					
ANR	5279414	Callee	strcasecmp		5279332	0					
ANR	5279415	Identifier	strcasecmp		5279332	0					
ANR	5279416	ArgumentList	x		5279332	1					
ANR	5279417	Argument	x		5279332	0					
ANR	5279418	Identifier	x		5279332	0					
ANR	5279419	Argument	string		5279332	1					
ANR	5279420	Identifier	string		5279332	0					
ANR	5279421	ElseStatement	else		5279332	0					
ANR	5279422	CompoundStatement		21:10:372:372	5279332	0					
ANR	5279423	ExpressionStatement	"temp = strcmp ( x , string )"	319:4:6404:6427	5279332	0	True				
ANR	5279424	AssignmentExpression	"temp = strcmp ( x , string )"		5279332	0		=			
ANR	5279425	Identifier	temp		5279332	0					
ANR	5279426	CallExpression	"strcmp ( x , string )"		5279332	1					
ANR	5279427	Callee	strcmp		5279332	0					
ANR	5279428	Identifier	strcmp		5279332	0					
ANR	5279429	ArgumentList	x		5279332	1					
ANR	5279430	Argument	x		5279332	0					
ANR	5279431	Identifier	x		5279332	0					
ANR	5279432	Argument	string		5279332	1					
ANR	5279433	Identifier	string		5279332	0					
ANR	5279434	IfStatement	if ( temp == MATCH )		5279332	1					
ANR	5279435	Condition	temp == MATCH	321:8:6442:6454	5279332	0	True				
ANR	5279436	EqualityExpression	temp == MATCH		5279332	0		==			
ANR	5279437	Identifier	temp		5279332	0					
ANR	5279438	Identifier	MATCH		5279332	1					
ANR	5279439	CompoundStatement		24:24:432:432	5279332	1					
ANR	5279440	IfStatement	if ( matches )		5279332	0					
ANR	5279441	Condition	matches	322:8:6468:6474	5279332	0	True				
ANR	5279442	Identifier	matches		5279332	0					
ANR	5279443	CompoundStatement		25:18:452:452	5279332	1					
ANR	5279444	ExpressionStatement	matches -> append ( x )	323:5:6485:6503	5279332	0	True				
ANR	5279445	CallExpression	matches -> append ( x )		5279332	0					
ANR	5279446	Callee	matches -> append		5279332	0					
ANR	5279447	PtrMemberAccess	matches -> append		5279332	0					
ANR	5279448	Identifier	matches		5279332	0					
ANR	5279449	Identifier	append		5279332	1					
ANR	5279450	ArgumentList	x		5279332	1					
ANR	5279451	Argument	x		5279332	0					
ANR	5279452	Identifier	x		5279332	0					
ANR	5279453	ElseStatement	else		5279332	0					
ANR	5279454	CompoundStatement		28:9:494:494	5279332	0					
ANR	5279455	ReturnStatement	return x ;	326:5:6527:6535	5279332	0	True				
ANR	5279456	Identifier	x		5279332	0					
ANR	5279457	ContinueStatement	continue ;	329:3:6551:6559	5279332	2	True				
ANR	5279458	IfStatement	if ( asterisk == x )		5279332	1					
ANR	5279459	Condition	asterisk == x	332:7:6573:6585	5279332	0	True				
ANR	5279460	EqualityExpression	asterisk == x		5279332	0		==			
ANR	5279461	Identifier	asterisk		5279332	0					
ANR	5279462	Identifier	x		5279332	1					
ANR	5279463	CompoundStatement		36:3:568:600	5279332	1					
ANR	5279464	IdentifierDeclStatement	"char * asterisk2 = strrchr ( x , '*' ) ;"	333:3:6594:6626	5279332	0	True				
ANR	5279465	IdentifierDecl	"* asterisk2 = strrchr ( x , '*' )"		5279332	0					
ANR	5279466	IdentifierDeclType	char *		5279332	0					
ANR	5279467	Identifier	asterisk2		5279332	1					
ANR	5279468	AssignmentExpression	"* asterisk2 = strrchr ( x , '*' )"		5279332	2		=			
ANR	5279469	Identifier	asterisk2		5279332	0					
ANR	5279470	CallExpression	"strrchr ( x , '*' )"		5279332	1					
ANR	5279471	Callee	strrchr		5279332	0					
ANR	5279472	Identifier	strrchr		5279332	0					
ANR	5279473	ArgumentList	x		5279332	1					
ANR	5279474	Argument	x		5279332	0					
ANR	5279475	Identifier	x		5279332	0					
ANR	5279476	Argument	'*'		5279332	1					
ANR	5279477	PrimaryExpression	'*'		5279332	0					
ANR	5279478	IfStatement	if ( asterisk2 && asterisk2 [ 1 ] == '\\0' && asterisk2 != asterisk )		5279332	1					
ANR	5279479	Condition	asterisk2 && asterisk2 [ 1 ] == '\\0' && asterisk2 != asterisk	334:8:6636:6693	5279332	0	True				
ANR	5279480	AndExpression	asterisk2 && asterisk2 [ 1 ] == '\\0' && asterisk2 != asterisk		5279332	0		&&			
ANR	5279481	Identifier	asterisk2		5279332	0					
ANR	5279482	AndExpression	asterisk2 [ 1 ] == '\\0' && asterisk2 != asterisk		5279332	1		&&			
ANR	5279483	EqualityExpression	asterisk2 [ 1 ] == '\\0'		5279332	0		==			
ANR	5279484	ArrayIndexing	asterisk2 [ 1 ]		5279332	0					
ANR	5279485	Identifier	asterisk2		5279332	0					
ANR	5279486	PrimaryExpression	1		5279332	1					
ANR	5279487	PrimaryExpression	'\\0'		5279332	1					
ANR	5279488	EqualityExpression	asterisk2 != asterisk		5279332	1		!=			
ANR	5279489	Identifier	asterisk2		5279332	0					
ANR	5279490	Identifier	asterisk		5279332	1					
ANR	5279491	CompoundStatement		39:4:719:734	5279332	1					
ANR	5279492	IdentifierDeclStatement	const char * pos ;	336:4:6745:6760	5279332	0	True				
ANR	5279493	IdentifierDecl	* pos		5279332	0					
ANR	5279494	IdentifierDeclType	const char *		5279332	0					
ANR	5279495	Identifier	pos		5279332	1					
ANR	5279496	ExpressionStatement	* asterisk2 = '\\0'	337:4:6766:6783	5279332	1	True				
ANR	5279497	AssignmentExpression	* asterisk2 = '\\0'		5279332	0		=			
ANR	5279498	UnaryOperationExpression	* asterisk2		5279332	0					
ANR	5279499	UnaryOperator	*		5279332	0					
ANR	5279500	Identifier	asterisk2		5279332	1					
ANR	5279501	PrimaryExpression	'\\0'		5279332	1					
ANR	5279502	IfStatement	if ( anycase )		5279332	2					
ANR	5279503	Condition	anycase	338:8:6793:6799	5279332	0	True				
ANR	5279504	Identifier	anycase		5279332	0					
ANR	5279505	CompoundStatement		41:17:776:776	5279332	1					
ANR	5279506	ExpressionStatement	"pos = strcasestr ( string , & x [ 1 ] )"	339:5:6809:6839	5279332	0	True				
ANR	5279507	AssignmentExpression	"pos = strcasestr ( string , & x [ 1 ] )"		5279332	0		=			
ANR	5279508	Identifier	pos		5279332	0					
ANR	5279509	CallExpression	"strcasestr ( string , & x [ 1 ] )"		5279332	1					
ANR	5279510	Callee	strcasestr		5279332	0					
ANR	5279511	Identifier	strcasestr		5279332	0					
ANR	5279512	ArgumentList	string		5279332	1					
ANR	5279513	Argument	string		5279332	0					
ANR	5279514	Identifier	string		5279332	0					
ANR	5279515	Argument	& x [ 1 ]		5279332	1					
ANR	5279516	UnaryOperationExpression	& x [ 1 ]		5279332	0					
ANR	5279517	UnaryOperator	&		5279332	0					
ANR	5279518	ArrayIndexing	x [ 1 ]		5279332	1					
ANR	5279519	Identifier	x		5279332	0					
ANR	5279520	PrimaryExpression	1		5279332	1					
ANR	5279521	ElseStatement	else		5279332	0					
ANR	5279522	CompoundStatement		43:11:826:826	5279332	0					
ANR	5279523	ExpressionStatement	"pos = strstr ( string , & x [ 1 ] )"	341:5:6859:6885	5279332	0	True				
ANR	5279524	AssignmentExpression	"pos = strstr ( string , & x [ 1 ] )"		5279332	0		=			
ANR	5279525	Identifier	pos		5279332	0					
ANR	5279526	CallExpression	"strstr ( string , & x [ 1 ] )"		5279332	1					
ANR	5279527	Callee	strstr		5279332	0					
ANR	5279528	Identifier	strstr		5279332	0					
ANR	5279529	ArgumentList	string		5279332	1					
ANR	5279530	Argument	string		5279332	0					
ANR	5279531	Identifier	string		5279332	0					
ANR	5279532	Argument	& x [ 1 ]		5279332	1					
ANR	5279533	UnaryOperationExpression	& x [ 1 ]		5279332	0					
ANR	5279534	UnaryOperator	&		5279332	0					
ANR	5279535	ArrayIndexing	x [ 1 ]		5279332	1					
ANR	5279536	Identifier	x		5279332	0					
ANR	5279537	PrimaryExpression	1		5279332	1					
ANR	5279538	ExpressionStatement	* asterisk2 = '*'	343:4:6897:6913	5279332	3	True				
ANR	5279539	AssignmentExpression	* asterisk2 = '*'		5279332	0		=			
ANR	5279540	UnaryOperationExpression	* asterisk2		5279332	0					
ANR	5279541	UnaryOperator	*		5279332	0					
ANR	5279542	Identifier	asterisk2		5279332	1					
ANR	5279543	PrimaryExpression	'*'		5279332	1					
ANR	5279544	IfStatement	if ( pos )		5279332	4					
ANR	5279545	Condition	pos	344:9:6924:6926	5279332	0	True				
ANR	5279546	Identifier	pos		5279332	0					
ANR	5279547	CompoundStatement		47:15:904:904	5279332	1					
ANR	5279548	IfStatement	if ( matches )		5279332	0					
ANR	5279549	Condition	matches	345:9:6941:6947	5279332	0	True				
ANR	5279550	Identifier	matches		5279332	0					
ANR	5279551	CompoundStatement		48:19:925:925	5279332	1					
ANR	5279552	ExpressionStatement	matches -> append ( x )	346:6:6959:6979	5279332	0	True				
ANR	5279553	CallExpression	matches -> append ( x )		5279332	0					
ANR	5279554	Callee	matches -> append		5279332	0					
ANR	5279555	PtrMemberAccess	matches -> append		5279332	0					
ANR	5279556	Identifier	matches		5279332	0					
ANR	5279557	Identifier	append		5279332	1					
ANR	5279558	ArgumentList	x		5279332	1					
ANR	5279559	Argument	x		5279332	0					
ANR	5279560	Identifier	x		5279332	0					
ANR	5279561	ElseStatement	else		5279332	0					
ANR	5279562	CompoundStatement		51:10:972:972	5279332	0					
ANR	5279563	ReturnStatement	return x ;	349:6:7006:7014	5279332	0	True				
ANR	5279564	Identifier	x		5279332	0					
ANR	5279565	ContinueStatement	continue ;	352:4:7033:7041	5279332	5	True				
ANR	5279566	ExpressionStatement	matchstart = NULL	355:3:7088:7105	5279332	2	True				
ANR	5279567	AssignmentExpression	matchstart = NULL		5279332	0		=			
ANR	5279568	Identifier	matchstart		5279332	0					
ANR	5279569	Identifier	NULL		5279332	1					
ANR	5279570	ExpressionStatement	matchend = & ( x [ 1 ] )	356:3:7110:7128	5279332	3	True				
ANR	5279571	AssignmentExpression	matchend = & ( x [ 1 ] )		5279332	0		=			
ANR	5279572	Identifier	matchend		5279332	0					
ANR	5279573	UnaryOperationExpression	& ( x [ 1 ] )		5279332	1					
ANR	5279574	UnaryOperator	&		5279332	0					
ANR	5279575	ArrayIndexing	x [ 1 ]		5279332	1					
ANR	5279576	Identifier	x		5279332	0					
ANR	5279577	PrimaryExpression	1		5279332	1					
ANR	5279578	ElseStatement	else		5279332	0					
ANR	5279579	CompoundStatement		60:9:1113:1113	5279332	0					
ANR	5279580	IfStatement	if ( asterisk [ 1 ] == '\\0' )		5279332	0					
ANR	5279581	Condition	asterisk [ 1 ] == '\\0'	358:8:7149:7167	5279332	0	True				
ANR	5279582	EqualityExpression	asterisk [ 1 ] == '\\0'		5279332	0		==			
ANR	5279583	ArrayIndexing	asterisk [ 1 ]		5279332	0					
ANR	5279584	Identifier	asterisk		5279332	0					
ANR	5279585	PrimaryExpression	1		5279332	1					
ANR	5279586	PrimaryExpression	'\\0'		5279332	1					
ANR	5279587	CompoundStatement		61:30:1145:1145	5279332	1					
ANR	5279588	ExpressionStatement	* asterisk = '\\0'	360:4:7214:7230	5279332	0	True				
ANR	5279589	AssignmentExpression	* asterisk = '\\0'		5279332	0		=			
ANR	5279590	UnaryOperationExpression	* asterisk		5279332	0					
ANR	5279591	UnaryOperator	*		5279332	0					
ANR	5279592	Identifier	asterisk		5279332	1					
ANR	5279593	PrimaryExpression	'\\0'		5279332	1					
ANR	5279594	IfStatement	if ( anycase )		5279332	1					
ANR	5279595	Condition	anycase	361:8:7259:7265	5279332	0	True				
ANR	5279596	Identifier	anycase		5279332	0					
ANR	5279597	CompoundStatement		64:17:1242:1242	5279332	1					
ANR	5279598	ExpressionStatement	"temp = strncasecmp ( x , string , strlen ( x ) )"	362:5:7275:7313	5279332	0	True				
ANR	5279599	AssignmentExpression	"temp = strncasecmp ( x , string , strlen ( x ) )"		5279332	0		=			
ANR	5279600	Identifier	temp		5279332	0					
ANR	5279601	CallExpression	"strncasecmp ( x , string , strlen ( x ) )"		5279332	1					
ANR	5279602	Callee	strncasecmp		5279332	0					
ANR	5279603	Identifier	strncasecmp		5279332	0					
ANR	5279604	ArgumentList	x		5279332	1					
ANR	5279605	Argument	x		5279332	0					
ANR	5279606	Identifier	x		5279332	0					
ANR	5279607	Argument	string		5279332	1					
ANR	5279608	Identifier	string		5279332	0					
ANR	5279609	Argument	strlen ( x )		5279332	2					
ANR	5279610	CallExpression	strlen ( x )		5279332	0					
ANR	5279611	Callee	strlen		5279332	0					
ANR	5279612	Identifier	strlen		5279332	0					
ANR	5279613	ArgumentList	x		5279332	1					
ANR	5279614	Argument	x		5279332	0					
ANR	5279615	Identifier	x		5279332	0					
ANR	5279616	ElseStatement	else		5279332	0					
ANR	5279617	CompoundStatement		66:11:1300:1300	5279332	0					
ANR	5279618	ExpressionStatement	"temp = strncmp ( x , string , strlen ( x ) )"	364:5:7333:7367	5279332	0	True				
ANR	5279619	AssignmentExpression	"temp = strncmp ( x , string , strlen ( x ) )"		5279332	0		=			
ANR	5279620	Identifier	temp		5279332	0					
ANR	5279621	CallExpression	"strncmp ( x , string , strlen ( x ) )"		5279332	1					
ANR	5279622	Callee	strncmp		5279332	0					
ANR	5279623	Identifier	strncmp		5279332	0					
ANR	5279624	ArgumentList	x		5279332	1					
ANR	5279625	Argument	x		5279332	0					
ANR	5279626	Identifier	x		5279332	0					
ANR	5279627	Argument	string		5279332	1					
ANR	5279628	Identifier	string		5279332	0					
ANR	5279629	Argument	strlen ( x )		5279332	2					
ANR	5279630	CallExpression	strlen ( x )		5279332	0					
ANR	5279631	Callee	strlen		5279332	0					
ANR	5279632	Identifier	strlen		5279332	0					
ANR	5279633	ArgumentList	x		5279332	1					
ANR	5279634	Argument	x		5279332	0					
ANR	5279635	Identifier	x		5279332	0					
ANR	5279636	ExpressionStatement	* asterisk = '*'	366:4:7379:7394	5279332	2	True				
ANR	5279637	AssignmentExpression	* asterisk = '*'		5279332	0		=			
ANR	5279638	UnaryOperationExpression	* asterisk		5279332	0					
ANR	5279639	UnaryOperator	*		5279332	0					
ANR	5279640	Identifier	asterisk		5279332	1					
ANR	5279641	PrimaryExpression	'*'		5279332	1					
ANR	5279642	IfStatement	if ( temp == MATCH )		5279332	3					
ANR	5279643	Condition	temp == MATCH	367:9:7425:7437	5279332	0	True				
ANR	5279644	EqualityExpression	temp == MATCH		5279332	0		==			
ANR	5279645	Identifier	temp		5279332	0					
ANR	5279646	Identifier	MATCH		5279332	1					
ANR	5279647	CompoundStatement		70:25:1415:1415	5279332	1					
ANR	5279648	IfStatement	if ( matches )		5279332	0					
ANR	5279649	Condition	matches	368:9:7452:7458	5279332	0	True				
ANR	5279650	Identifier	matches		5279332	0					
ANR	5279651	CompoundStatement		71:19:1436:1436	5279332	1					
ANR	5279652	ExpressionStatement	matches -> append ( x )	369:6:7470:7490	5279332	0	True				
ANR	5279653	CallExpression	matches -> append ( x )		5279332	0					
ANR	5279654	Callee	matches -> append		5279332	0					
ANR	5279655	PtrMemberAccess	matches -> append		5279332	0					
ANR	5279656	Identifier	matches		5279332	0					
ANR	5279657	Identifier	append		5279332	1					
ANR	5279658	ArgumentList	x		5279332	1					
ANR	5279659	Argument	x		5279332	0					
ANR	5279660	Identifier	x		5279332	0					
ANR	5279661	ElseStatement	else		5279332	0					
ANR	5279662	CompoundStatement		74:10:1483:1483	5279332	0					
ANR	5279663	ReturnStatement	return x ;	372:6:7517:7525	5279332	0	True				
ANR	5279664	Identifier	x		5279332	0					
ANR	5279665	ContinueStatement	continue ;	375:4:7544:7552	5279332	4	True				
ANR	5279666	ElseStatement	else		5279332	0					
ANR	5279667	CompoundStatement		79:10:1538:1538	5279332	0					
ANR	5279668	ExpressionStatement	matchstart = x	378:4:7622:7636	5279332	0	True				
ANR	5279669	AssignmentExpression	matchstart = x		5279332	0		=			
ANR	5279670	Identifier	matchstart		5279332	0					
ANR	5279671	Identifier	x		5279332	1					
ANR	5279672	ExpressionStatement	matchend = & ( asterisk [ 1 ] )	379:4:7642:7667	5279332	1	True				
ANR	5279673	AssignmentExpression	matchend = & ( asterisk [ 1 ] )		5279332	0		=			
ANR	5279674	Identifier	matchend		5279332	0					
ANR	5279675	UnaryOperationExpression	& ( asterisk [ 1 ] )		5279332	1					
ANR	5279676	UnaryOperator	&		5279332	0					
ANR	5279677	ArrayIndexing	asterisk [ 1 ]		5279332	1					
ANR	5279678	Identifier	asterisk		5279332	0					
ANR	5279679	PrimaryExpression	1		5279332	1					
ANR	5279680	ExpressionStatement	result = TRUE	387:2:7868:7881	5279332	2	True				
ANR	5279681	AssignmentExpression	result = TRUE		5279332	0		=			
ANR	5279682	Identifier	result		5279332	0					
ANR	5279683	Identifier	TRUE		5279332	1					
ANR	5279684	ExpressionStatement	* asterisk = '\\0'	388:2:7885:7901	5279332	3	True				
ANR	5279685	AssignmentExpression	* asterisk = '\\0'		5279332	0		=			
ANR	5279686	UnaryOperationExpression	* asterisk		5279332	0					
ANR	5279687	UnaryOperator	*		5279332	0					
ANR	5279688	Identifier	asterisk		5279332	1					
ANR	5279689	PrimaryExpression	'\\0'		5279332	1					
ANR	5279690	IfStatement	if ( matchstart )		5279332	4					
ANR	5279691	Condition	matchstart	389:7:7942:7951	5279332	0	True				
ANR	5279692	Identifier	matchstart		5279332	0					
ANR	5279693	CompoundStatement		92:20:1929:1929	5279332	1					
ANR	5279694	IfStatement	if ( anycase )		5279332	0					
ANR	5279695	Condition	anycase	390:8:7965:7971	5279332	0	True				
ANR	5279696	Identifier	anycase		5279332	0					
ANR	5279697	CompoundStatement		93:18:1949:1949	5279332	1					
ANR	5279698	ExpressionStatement	"temp = strncasecmp ( matchstart , string , strlen ( matchstart ) )"	391:4:7981:8037	5279332	0	True				
ANR	5279699	AssignmentExpression	"temp = strncasecmp ( matchstart , string , strlen ( matchstart ) )"		5279332	0		=			
ANR	5279700	Identifier	temp		5279332	0					
ANR	5279701	CallExpression	"strncasecmp ( matchstart , string , strlen ( matchstart ) )"		5279332	1					
ANR	5279702	Callee	strncasecmp		5279332	0					
ANR	5279703	Identifier	strncasecmp		5279332	0					
ANR	5279704	ArgumentList	matchstart		5279332	1					
ANR	5279705	Argument	matchstart		5279332	0					
ANR	5279706	Identifier	matchstart		5279332	0					
ANR	5279707	Argument	string		5279332	1					
ANR	5279708	Identifier	string		5279332	0					
ANR	5279709	Argument	strlen ( matchstart )		5279332	2					
ANR	5279710	CallExpression	strlen ( matchstart )		5279332	0					
ANR	5279711	Callee	strlen		5279332	0					
ANR	5279712	Identifier	strlen		5279332	0					
ANR	5279713	ArgumentList	matchstart		5279332	1					
ANR	5279714	Argument	matchstart		5279332	0					
ANR	5279715	Identifier	matchstart		5279332	0					
ANR	5279716	ElseStatement	else		5279332	0					
ANR	5279717	CompoundStatement		95:10:2023:2023	5279332	0					
ANR	5279718	ExpressionStatement	"temp = strncmp ( matchstart , string , strlen ( matchstart ) )"	393:4:8055:8107	5279332	0	True				
ANR	5279719	AssignmentExpression	"temp = strncmp ( matchstart , string , strlen ( matchstart ) )"		5279332	0		=			
ANR	5279720	Identifier	temp		5279332	0					
ANR	5279721	CallExpression	"strncmp ( matchstart , string , strlen ( matchstart ) )"		5279332	1					
ANR	5279722	Callee	strncmp		5279332	0					
ANR	5279723	Identifier	strncmp		5279332	0					
ANR	5279724	ArgumentList	matchstart		5279332	1					
ANR	5279725	Argument	matchstart		5279332	0					
ANR	5279726	Identifier	matchstart		5279332	0					
ANR	5279727	Argument	string		5279332	1					
ANR	5279728	Identifier	string		5279332	0					
ANR	5279729	Argument	strlen ( matchstart )		5279332	2					
ANR	5279730	CallExpression	strlen ( matchstart )		5279332	0					
ANR	5279731	Callee	strlen		5279332	0					
ANR	5279732	Identifier	strlen		5279332	0					
ANR	5279733	ArgumentList	matchstart		5279332	1					
ANR	5279734	Argument	matchstart		5279332	0					
ANR	5279735	Identifier	matchstart		5279332	0					
ANR	5279736	IfStatement	if ( temp != MATCH )		5279332	1					
ANR	5279737	Condition	temp != MATCH	395:8:8122:8134	5279332	0	True				
ANR	5279738	EqualityExpression	temp != MATCH		5279332	0		!=			
ANR	5279739	Identifier	temp		5279332	0					
ANR	5279740	Identifier	MATCH		5279332	1					
ANR	5279741	ExpressionStatement	result = FALSE	396:4:8143:8157	5279332	1	True				
ANR	5279742	AssignmentExpression	result = FALSE		5279332	0		=			
ANR	5279743	Identifier	result		5279332	0					
ANR	5279744	Identifier	FALSE		5279332	1					
ANR	5279745	IfStatement	if ( matchend && result == TRUE )		5279332	5					
ANR	5279746	Condition	matchend && result == TRUE	398:7:8170:8195	5279332	0	True				
ANR	5279747	AndExpression	matchend && result == TRUE		5279332	0		&&			
ANR	5279748	Identifier	matchend		5279332	0					
ANR	5279749	EqualityExpression	result == TRUE		5279332	1		==			
ANR	5279750	Identifier	result		5279332	0					
ANR	5279751	Identifier	TRUE		5279332	1					
ANR	5279752	CompoundStatement		101:35:2172:2172	5279332	1					
ANR	5279753	ExpressionStatement	len = strlen ( string )	399:3:8203:8223	5279332	0	True				
ANR	5279754	AssignmentExpression	len = strlen ( string )		5279332	0		=			
ANR	5279755	Identifier	len		5279332	0					
ANR	5279756	CallExpression	strlen ( string )		5279332	1					
ANR	5279757	Callee	strlen		5279332	0					
ANR	5279758	Identifier	strlen		5279332	0					
ANR	5279759	ArgumentList	string		5279332	1					
ANR	5279760	Argument	string		5279332	0					
ANR	5279761	Identifier	string		5279332	0					
ANR	5279762	ExpressionStatement	matchendlen = strlen ( matchend )	400:3:8228:8258	5279332	1	True				
ANR	5279763	AssignmentExpression	matchendlen = strlen ( matchend )		5279332	0		=			
ANR	5279764	Identifier	matchendlen		5279332	0					
ANR	5279765	CallExpression	strlen ( matchend )		5279332	1					
ANR	5279766	Callee	strlen		5279332	0					
ANR	5279767	Identifier	strlen		5279332	0					
ANR	5279768	ArgumentList	matchend		5279332	1					
ANR	5279769	Argument	matchend		5279332	0					
ANR	5279770	Identifier	matchend		5279332	0					
ANR	5279771	IfStatement	if ( matchendlen > len )		5279332	2					
ANR	5279772	Condition	matchendlen > len	401:8:8268:8284	5279332	0	True				
ANR	5279773	RelationalExpression	matchendlen > len		5279332	0		>			
ANR	5279774	Identifier	matchendlen		5279332	0					
ANR	5279775	Identifier	len		5279332	1					
ANR	5279776	ExpressionStatement	result = FALSE	402:4:8329:8343	5279332	1	True				
ANR	5279777	AssignmentExpression	result = FALSE		5279332	0		=			
ANR	5279778	Identifier	result		5279332	0					
ANR	5279779	Identifier	FALSE		5279332	1					
ANR	5279780	IfStatement	if ( result == TRUE )		5279332	3					
ANR	5279781	Condition	result == TRUE	403:8:8353:8366	5279332	0	True				
ANR	5279782	EqualityExpression	result == TRUE		5279332	0		==			
ANR	5279783	Identifier	result		5279332	0					
ANR	5279784	Identifier	TRUE		5279332	1					
ANR	5279785	CompoundStatement		106:25:2344:2344	5279332	1					
ANR	5279786	IfStatement	if ( anycase )		5279332	0					
ANR	5279787	Condition	anycase	404:8:8380:8386	5279332	0	True				
ANR	5279788	Identifier	anycase		5279332	0					
ANR	5279789	CompoundStatement		107:17:2363:2363	5279332	1					
ANR	5279790	ExpressionStatement	"temp = strcasecmp ( & ( string [ len - matchendlen ] ) , matchend )"	405:5:8396:8450	5279332	0	True				
ANR	5279791	AssignmentExpression	"temp = strcasecmp ( & ( string [ len - matchendlen ] ) , matchend )"		5279332	0		=			
ANR	5279792	Identifier	temp		5279332	0					
ANR	5279793	CallExpression	"strcasecmp ( & ( string [ len - matchendlen ] ) , matchend )"		5279332	1					
ANR	5279794	Callee	strcasecmp		5279332	0					
ANR	5279795	Identifier	strcasecmp		5279332	0					
ANR	5279796	ArgumentList	& ( string [ len - matchendlen ] )		5279332	1					
ANR	5279797	Argument	& ( string [ len - matchendlen ] )		5279332	0					
ANR	5279798	UnaryOperationExpression	& ( string [ len - matchendlen ] )		5279332	0					
ANR	5279799	UnaryOperator	&		5279332	0					
ANR	5279800	ArrayIndexing	string [ len - matchendlen ]		5279332	1					
ANR	5279801	Identifier	string		5279332	0					
ANR	5279802	AdditiveExpression	len - matchendlen		5279332	1		-			
ANR	5279803	Identifier	len		5279332	0					
ANR	5279804	Identifier	matchendlen		5279332	1					
ANR	5279805	Argument	matchend		5279332	1					
ANR	5279806	Identifier	matchend		5279332	0					
ANR	5279807	ElseStatement	else		5279332	0					
ANR	5279808	CompoundStatement		109:11:2437:2437	5279332	0					
ANR	5279809	ExpressionStatement	"temp = strcmp ( & ( string [ len - matchendlen ] ) , matchend )"	407:5:8470:8520	5279332	0	True				
ANR	5279810	AssignmentExpression	"temp = strcmp ( & ( string [ len - matchendlen ] ) , matchend )"		5279332	0		=			
ANR	5279811	Identifier	temp		5279332	0					
ANR	5279812	CallExpression	"strcmp ( & ( string [ len - matchendlen ] ) , matchend )"		5279332	1					
ANR	5279813	Callee	strcmp		5279332	0					
ANR	5279814	Identifier	strcmp		5279332	0					
ANR	5279815	ArgumentList	& ( string [ len - matchendlen ] )		5279332	1					
ANR	5279816	Argument	& ( string [ len - matchendlen ] )		5279332	0					
ANR	5279817	UnaryOperationExpression	& ( string [ len - matchendlen ] )		5279332	0					
ANR	5279818	UnaryOperator	&		5279332	0					
ANR	5279819	ArrayIndexing	string [ len - matchendlen ]		5279332	1					
ANR	5279820	Identifier	string		5279332	0					
ANR	5279821	AdditiveExpression	len - matchendlen		5279332	1		-			
ANR	5279822	Identifier	len		5279332	0					
ANR	5279823	Identifier	matchendlen		5279332	1					
ANR	5279824	Argument	matchend		5279332	1					
ANR	5279825	Identifier	matchend		5279332	0					
ANR	5279826	IfStatement	if ( temp != MATCH )		5279332	1					
ANR	5279827	Condition	temp != MATCH	409:9:8537:8549	5279332	0	True				
ANR	5279828	EqualityExpression	temp != MATCH		5279332	0		!=			
ANR	5279829	Identifier	temp		5279332	0					
ANR	5279830	Identifier	MATCH		5279332	1					
ANR	5279831	ExpressionStatement	result = FALSE	410:5:8558:8572	5279332	1	True				
ANR	5279832	AssignmentExpression	result = FALSE		5279332	0		=			
ANR	5279833	Identifier	result		5279332	0					
ANR	5279834	Identifier	FALSE		5279332	1					
ANR	5279835	ExpressionStatement	* asterisk = '*'	413:2:8585:8600	5279332	6	True				
ANR	5279836	AssignmentExpression	* asterisk = '*'		5279332	0		=			
ANR	5279837	UnaryOperationExpression	* asterisk		5279332	0					
ANR	5279838	UnaryOperator	*		5279332	0					
ANR	5279839	Identifier	asterisk		5279332	1					
ANR	5279840	PrimaryExpression	'*'		5279332	1					
ANR	5279841	IfStatement	if ( result == TRUE )		5279332	7					
ANR	5279842	Condition	result == TRUE	414:7:8656:8669	5279332	0	True				
ANR	5279843	EqualityExpression	result == TRUE		5279332	0		==			
ANR	5279844	Identifier	result		5279332	0					
ANR	5279845	Identifier	TRUE		5279332	1					
ANR	5279846	CompoundStatement		117:24:2647:2647	5279332	1					
ANR	5279847	IfStatement	if ( matches )		5279332	0					
ANR	5279848	Condition	matches	415:7:8682:8688	5279332	0	True				
ANR	5279849	Identifier	matches		5279332	0					
ANR	5279850	CompoundStatement		118:17:2666:2666	5279332	1					
ANR	5279851	ExpressionStatement	matches -> append ( x )	416:4:8698:8718	5279332	0	True				
ANR	5279852	CallExpression	matches -> append ( x )		5279332	0					
ANR	5279853	Callee	matches -> append		5279332	0					
ANR	5279854	PtrMemberAccess	matches -> append		5279332	0					
ANR	5279855	Identifier	matches		5279332	0					
ANR	5279856	Identifier	append		5279332	1					
ANR	5279857	ArgumentList	x		5279332	1					
ANR	5279858	Argument	x		5279332	0					
ANR	5279859	Identifier	x		5279332	0					
ANR	5279860	ElseStatement	else		5279332	0					
ANR	5279861	CompoundStatement		121:8:2707:2707	5279332	0					
ANR	5279862	ReturnStatement	return x ;	419:4:8739:8747	5279332	0	True				
ANR	5279863	Identifier	x		5279332	0					
ANR	5279864	IfStatement	if ( matches && ! matches -> isEmpty ( ) )		5279332	10					
ANR	5279865	Condition	matches && ! matches -> isEmpty ( )	425:5:8790:8819	5279332	0	True				
ANR	5279866	AndExpression	matches && ! matches -> isEmpty ( )		5279332	0		&&			
ANR	5279867	Identifier	matches		5279332	0					
ANR	5279868	UnaryOperationExpression	! matches -> isEmpty ( )		5279332	1					
ANR	5279869	UnaryOperator	!		5279332	0					
ANR	5279870	CallExpression	matches -> isEmpty ( )		5279332	1					
ANR	5279871	Callee	matches -> isEmpty		5279332	0					
ANR	5279872	PtrMemberAccess	matches -> isEmpty		5279332	0					
ANR	5279873	Identifier	matches		5279332	0					
ANR	5279874	Identifier	isEmpty		5279332	1					
ANR	5279875	ArgumentList			5279332	1					
ANR	5279876	CompoundStatement		128:38:2797:2797	5279332	1					
ANR	5279877	ExpressionStatement	matches -> rewind ( )	426:2:8827:8844	5279332	0	True				
ANR	5279878	CallExpression	matches -> rewind ( )		5279332	0					
ANR	5279879	Callee	matches -> rewind		5279332	0					
ANR	5279880	PtrMemberAccess	matches -> rewind		5279332	0					
ANR	5279881	Identifier	matches		5279332	0					
ANR	5279882	Identifier	rewind		5279332	1					
ANR	5279883	ArgumentList			5279332	1					
ANR	5279884	ReturnStatement	return matches -> next ( ) ;	427:2:8848:8870	5279332	1	True				
ANR	5279885	CallExpression	matches -> next ( )		5279332	0					
ANR	5279886	Callee	matches -> next		5279332	0					
ANR	5279887	PtrMemberAccess	matches -> next		5279332	0					
ANR	5279888	Identifier	matches		5279332	0					
ANR	5279889	Identifier	next		5279332	1					
ANR	5279890	ArgumentList			5279332	1					
ANR	5279891	ReturnStatement	return NULL ;	429:1:8876:8887	5279332	11	True				
ANR	5279892	Identifier	NULL		5279332	0					
ANR	5279893	ReturnType	const char *		5279332	1					
ANR	5279894	Identifier	StringList :: contains_withwildcard		5279332	2					
ANR	5279895	ParameterList	"const char * string , bool anycase , StringList * matches"		5279332	3					
ANR	5279896	Parameter	const char * string	297:34:5970:5987	5279332	0	True				
ANR	5279897	ParameterType	const char *		5279332	0					
ANR	5279898	Identifier	string		5279332	1					
ANR	5279899	Parameter	bool anycase	297:54:5990:6001	5279332	1	True				
ANR	5279900	ParameterType	bool		5279332	0					
ANR	5279901	Identifier	anycase		5279332	1					
ANR	5279902	Parameter	StringList * matches	297:68:6004:6022	5279332	2	True				
ANR	5279903	ParameterType	StringList *		5279332	0					
ANR	5279904	Identifier	matches		5279332	1					
ANR	5279905	CFGEntryNode	ENTRY		5279332		True				
ANR	5279906	CFGExitNode	EXIT		5279332		True				
ANR	5279907	Symbol	* matches		5279332						
ANR	5279908	Symbol	string		5279332						
ANR	5279909	Symbol	matchend		5279332						
ANR	5279910	Symbol	asterisk		5279332						
ANR	5279911	Symbol	strncasecmp		5279332						
ANR	5279912	Symbol	strchr		5279332						
ANR	5279913	Symbol	matches -> isEmpty		5279332						
ANR	5279914	Symbol	result		5279332						
ANR	5279915	Symbol	strlen		5279332						
ANR	5279916	Symbol	strncmp		5279332						
ANR	5279917	Symbol	len		5279332						
ANR	5279918	Symbol	anycase		5279332						
ANR	5279919	Symbol	pos		5279332						
ANR	5279920	Symbol	strcasecmp		5279332						
ANR	5279921	Symbol	matches -> next		5279332						
ANR	5279922	Symbol	strcmp		5279332						
ANR	5279923	Symbol	temp		5279332						
ANR	5279924	Symbol	NULL		5279332						
ANR	5279925	Symbol	* asterisk2		5279332						
ANR	5279926	Symbol	* asterisk		5279332						
ANR	5279927	Symbol	strcasestr		5279332						
ANR	5279928	Symbol	TRUE		5279332						
ANR	5279929	Symbol	m_strings . Next		5279332						
ANR	5279930	Symbol	matches		5279332						
ANR	5279931	Symbol	strstr		5279332						
ANR	5279932	Symbol	matchendlen		5279332						
ANR	5279933	Symbol	strrchr		5279332						
ANR	5279934	Symbol	x		5279332						
ANR	5279935	Symbol	m_strings		5279332						
ANR	5279936	Symbol	asterisk2		5279332						
ANR	5279937	Symbol	matchstart		5279332						
ANR	5279938	Symbol	FALSE		5279332						
ANR	5279939	Symbol	MATCH		5279332						
ANR	5279940	Function	StringList :: find	432:0:8892:9230							
ANR	5279941	FunctionDef	"StringList :: find (const char * str , bool anycase)"		5279940	0					
ANR	5279942	CompoundStatement		434:0:8953:9230	5279940	0					
ANR	5279943	IdentifierDeclStatement	char * x ;	435:1:8956:8963	5279940	0	True				
ANR	5279944	IdentifierDecl	* x		5279940	0					
ANR	5279945	IdentifierDeclType	char *		5279940	0					
ANR	5279946	Identifier	x		5279940	1					
ANR	5279947	IdentifierDeclStatement	ListIterator < char > iter ( m_strings ) ;	437:4:8970:9007	5279940	1	True				
ANR	5279948	IdentifierDecl	iter ( m_strings )		5279940	0					
ANR	5279949	IdentifierDeclType	ListIterator < char >		5279940	0					
ANR	5279950	Identifier	iter		5279940	1					
ANR	5279951	Identifier	m_strings		5279940	2					
ANR	5279952	ExpressionStatement	iter . ToBeforeFirst ( )	438:4:9013:9034	5279940	2	True				
ANR	5279953	CallExpression	iter . ToBeforeFirst ( )		5279940	0					
ANR	5279954	Callee	iter . ToBeforeFirst		5279940	0					
ANR	5279955	MemberAccess	iter . ToBeforeFirst		5279940	0					
ANR	5279956	Identifier	iter		5279940	0					
ANR	5279957	Identifier	ToBeforeFirst		5279940	1					
ANR	5279958	ArgumentList			5279940	1					
ANR	5279959	WhileStatement	while ( iter . Next ( x ) )		5279940	3					
ANR	5279960	Condition	iter . Next ( x )	439:9:9045:9056	5279940	0	True				
ANR	5279961	CallExpression	iter . Next ( x )		5279940	0					
ANR	5279962	Callee	iter . Next		5279940	0					
ANR	5279963	MemberAccess	iter . Next		5279940	0					
ANR	5279964	Identifier	iter		5279940	0					
ANR	5279965	Identifier	Next		5279940	1					
ANR	5279966	ArgumentList	x		5279940	1					
ANR	5279967	Argument	x		5279940	0					
ANR	5279968	Identifier	x		5279940	0					
ANR	5279969	CompoundStatement		6:24:106:106	5279940	1					
ANR	5279970	IfStatement	"if ( ( anycase ) && ( strcasecmp ( str , x ) == MATCH ) )"		5279940	0					
ANR	5279971	Condition	"( anycase ) && ( strcasecmp ( str , x ) == MATCH )"	440:6:9068:9111	5279940	0	True				
ANR	5279972	AndExpression	"( anycase ) && ( strcasecmp ( str , x ) == MATCH )"		5279940	0		&&			
ANR	5279973	Identifier	anycase		5279940	0					
ANR	5279974	EqualityExpression	"strcasecmp ( str , x ) == MATCH"		5279940	1		==			
ANR	5279975	CallExpression	"strcasecmp ( str , x )"		5279940	0					
ANR	5279976	Callee	strcasecmp		5279940	0					
ANR	5279977	Identifier	strcasecmp		5279940	0					
ANR	5279978	ArgumentList	str		5279940	1					
ANR	5279979	Argument	str		5279940	0					
ANR	5279980	Identifier	str		5279940	0					
ANR	5279981	Argument	x		5279940	1					
ANR	5279982	Identifier	x		5279940	0					
ANR	5279983	Identifier	MATCH		5279940	1					
ANR	5279984	CompoundStatement		7:53:161:161	5279940	1					
ANR	5279985	ReturnStatement	return true ;	441:3:9120:9131	5279940	0	True				
ANR	5279986	Identifier	true		5279940	0					
ANR	5279987	ElseStatement	else		5279940	0					
ANR	5279988	IfStatement	"if ( ( ! anycase ) && ( strcmp ( str , x ) == MATCH ) )"		5279940	0					
ANR	5279989	Condition	"( ! anycase ) && ( strcmp ( str , x ) == MATCH )"	443:11:9148:9186	5279940	0	True				
ANR	5279990	AndExpression	"( ! anycase ) && ( strcmp ( str , x ) == MATCH )"		5279940	0		&&			
ANR	5279991	UnaryOperationExpression	! anycase		5279940	0					
ANR	5279992	UnaryOperator	!		5279940	0					
ANR	5279993	Identifier	anycase		5279940	1					
ANR	5279994	EqualityExpression	"strcmp ( str , x ) == MATCH"		5279940	1		==			
ANR	5279995	CallExpression	"strcmp ( str , x )"		5279940	0					
ANR	5279996	Callee	strcmp		5279940	0					
ANR	5279997	Identifier	strcmp		5279940	0					
ANR	5279998	ArgumentList	str		5279940	1					
ANR	5279999	Argument	str		5279940	0					
ANR	5280000	Identifier	str		5279940	0					
ANR	5280001	Argument	x		5279940	1					
ANR	5280002	Identifier	x		5279940	0					
ANR	5280003	Identifier	MATCH		5279940	1					
ANR	5280004	CompoundStatement		10:53:236:236	5279940	1					
ANR	5280005	ReturnStatement	return true ;	444:3:9195:9206	5279940	0	True				
ANR	5280006	Identifier	true		5279940	0					
ANR	5280007	ReturnStatement	return false ;	447:1:9216:9228	5279940	4	True				
ANR	5280008	Identifier	false		5279940	0					
ANR	5280009	ReturnType	bool		5279940	1					
ANR	5280010	Identifier	StringList :: find		5279940	2					
ANR	5280011	ParameterList	"const char * str , bool anycase"		5279940	3					
ANR	5280012	Parameter	const char * str	433:18:8915:8929	5279940	0	True				
ANR	5280013	ParameterType	const char *		5279940	0					
ANR	5280014	Identifier	str		5279940	1					
ANR	5280015	Parameter	bool anycase	433:35:8932:8943	5279940	1	True				
ANR	5280016	ParameterType	bool		5279940	0					
ANR	5280017	Identifier	anycase		5279940	1					
ANR	5280018	CFGEntryNode	ENTRY		5279940		True				
ANR	5280019	CFGExitNode	EXIT		5279940		True				
ANR	5280020	Symbol	str		5279940						
ANR	5280021	Symbol	strcmp		5279940						
ANR	5280022	Symbol	anycase		5279940						
ANR	5280023	Symbol	iter . Next		5279940						
ANR	5280024	Symbol	x		5279940						
ANR	5280025	Symbol	true		5279940						
ANR	5280026	Symbol	false		5279940						
ANR	5280027	Symbol	iter		5279940						
ANR	5280028	Symbol	strcasecmp		5279940						
ANR	5280029	Symbol	MATCH		5279940						
ANR	5280030	Function	StringList :: identical	450:0:9233:9895							
ANR	5280031	FunctionDef	"StringList :: identical (const StringList & other , bool anycase)"		5280030	0					
ANR	5280032	CompoundStatement		452:0:9307:9895	5280030	0					
ANR	5280033	IdentifierDeclStatement	char * x ;	453:1:9310:9317	5280030	0	True				
ANR	5280034	IdentifierDecl	* x		5280030	0					
ANR	5280035	IdentifierDeclType	char *		5280030	0					
ANR	5280036	Identifier	x		5280030	1					
ANR	5280037	IdentifierDeclStatement	ListIterator < char > iter ;	454:1:9320:9343	5280030	1	True				
ANR	5280038	IdentifierDecl	iter		5280030	0					
ANR	5280039	IdentifierDeclType	ListIterator < char >		5280030	0					
ANR	5280040	Identifier	iter		5280030	1					
ANR	5280041	IfStatement	if ( other . number ( ) != this -> number ( ) )		5280030	2					
ANR	5280042	Condition	other . number ( ) != this -> number ( )	457:6:9396:9427	5280030	0	True				
ANR	5280043	EqualityExpression	other . number ( ) != this -> number ( )		5280030	0		!=			
ANR	5280044	CallExpression	other . number ( )		5280030	0					
ANR	5280045	Callee	other . number		5280030	0					
ANR	5280046	MemberAccess	other . number		5280030	0					
ANR	5280047	Identifier	other		5280030	0					
ANR	5280048	Identifier	number		5280030	1					
ANR	5280049	ArgumentList			5280030	1					
ANR	5280050	CallExpression	this -> number ( )		5280030	1					
ANR	5280051	Callee	this -> number		5280030	0					
ANR	5280052	PtrMemberAccess	this -> number		5280030	0					
ANR	5280053	Identifier	this		5280030	0					
ANR	5280054	Identifier	number		5280030	1					
ANR	5280055	ArgumentList			5280030	1					
ANR	5280056	CompoundStatement		6:41:123:123	5280030	1					
ANR	5280057	ReturnStatement	return false ;	458:2:9435:9447	5280030	0	True				
ANR	5280058	Identifier	false		5280030	0					
ANR	5280059	ExpressionStatement	iter . Initialize ( other . getList ( ) )	462:1:9524:9559	5280030	3	True				
ANR	5280060	CallExpression	iter . Initialize ( other . getList ( ) )		5280030	0					
ANR	5280061	Callee	iter . Initialize		5280030	0					
ANR	5280062	MemberAccess	iter . Initialize		5280030	0					
ANR	5280063	Identifier	iter		5280030	0					
ANR	5280064	Identifier	Initialize		5280030	1					
ANR	5280065	ArgumentList	other . getList ( )		5280030	1					
ANR	5280066	Argument	other . getList ( )		5280030	0					
ANR	5280067	CallExpression	other . getList ( )		5280030	0					
ANR	5280068	Callee	other . getList		5280030	0					
ANR	5280069	MemberAccess	other . getList		5280030	0					
ANR	5280070	Identifier	other		5280030	0					
ANR	5280071	Identifier	getList		5280030	1					
ANR	5280072	ArgumentList			5280030	1					
ANR	5280073	ExpressionStatement	iter . ToBeforeFirst ( )	463:1:9562:9583	5280030	4	True				
ANR	5280074	CallExpression	iter . ToBeforeFirst ( )		5280030	0					
ANR	5280075	Callee	iter . ToBeforeFirst		5280030	0					
ANR	5280076	MemberAccess	iter . ToBeforeFirst		5280030	0					
ANR	5280077	Identifier	iter		5280030	0					
ANR	5280078	Identifier	ToBeforeFirst		5280030	1					
ANR	5280079	ArgumentList			5280030	1					
ANR	5280080	WhileStatement	while ( iter . Next ( x ) )		5280030	5					
ANR	5280081	Condition	iter . Next ( x )	464:9:9594:9605	5280030	0	True				
ANR	5280082	CallExpression	iter . Next ( x )		5280030	0					
ANR	5280083	Callee	iter . Next		5280030	0					
ANR	5280084	MemberAccess	iter . Next		5280030	0					
ANR	5280085	Identifier	iter		5280030	0					
ANR	5280086	Identifier	Next		5280030	1					
ANR	5280087	ArgumentList	x		5280030	1					
ANR	5280088	Argument	x		5280030	0					
ANR	5280089	Identifier	x		5280030	0					
ANR	5280090	CompoundStatement		13:24:301:301	5280030	1					
ANR	5280091	IfStatement	"if ( ! find ( x , anycase ) )"		5280030	0					
ANR	5280092	Condition	"! find ( x , anycase )"	465:7:9618:9636	5280030	0	True				
ANR	5280093	UnaryOperationExpression	"! find ( x , anycase )"		5280030	0					
ANR	5280094	UnaryOperator	!		5280030	0					
ANR	5280095	CallExpression	"find ( x , anycase )"		5280030	1					
ANR	5280096	Callee	find		5280030	0					
ANR	5280097	Identifier	find		5280030	0					
ANR	5280098	ArgumentList	x		5280030	1					
ANR	5280099	Argument	x		5280030	0					
ANR	5280100	Identifier	x		5280030	0					
ANR	5280101	Argument	anycase		5280030	1					
ANR	5280102	Identifier	anycase		5280030	0					
ANR	5280103	CompoundStatement		14:29:332:332	5280030	1					
ANR	5280104	ReturnStatement	return false ;	466:3:9645:9657	5280030	0	True				
ANR	5280105	Identifier	false		5280030	0					
ANR	5280106	ExpressionStatement	iter . Initialize ( m_strings )	471:1:9738:9767	5280030	6	True				
ANR	5280107	CallExpression	iter . Initialize ( m_strings )		5280030	0					
ANR	5280108	Callee	iter . Initialize		5280030	0					
ANR	5280109	MemberAccess	iter . Initialize		5280030	0					
ANR	5280110	Identifier	iter		5280030	0					
ANR	5280111	Identifier	Initialize		5280030	1					
ANR	5280112	ArgumentList	m_strings		5280030	1					
ANR	5280113	Argument	m_strings		5280030	0					
ANR	5280114	Identifier	m_strings		5280030	0					
ANR	5280115	ExpressionStatement	iter . ToBeforeFirst ( )	472:1:9770:9791	5280030	7	True				
ANR	5280116	CallExpression	iter . ToBeforeFirst ( )		5280030	0					
ANR	5280117	Callee	iter . ToBeforeFirst		5280030	0					
ANR	5280118	MemberAccess	iter . ToBeforeFirst		5280030	0					
ANR	5280119	Identifier	iter		5280030	0					
ANR	5280120	Identifier	ToBeforeFirst		5280030	1					
ANR	5280121	ArgumentList			5280030	1					
ANR	5280122	WhileStatement	while ( iter . Next ( x ) )		5280030	8					
ANR	5280123	Condition	iter . Next ( x )	473:9:9802:9813	5280030	0	True				
ANR	5280124	CallExpression	iter . Next ( x )		5280030	0					
ANR	5280125	Callee	iter . Next		5280030	0					
ANR	5280126	MemberAccess	iter . Next		5280030	0					
ANR	5280127	Identifier	iter		5280030	0					
ANR	5280128	Identifier	Next		5280030	1					
ANR	5280129	ArgumentList	x		5280030	1					
ANR	5280130	Argument	x		5280030	0					
ANR	5280131	Identifier	x		5280030	0					
ANR	5280132	CompoundStatement		22:24:509:509	5280030	1					
ANR	5280133	IfStatement	"if ( ! other . find ( x , anycase ) )"		5280030	0					
ANR	5280134	Condition	"! other . find ( x , anycase )"	474:7:9826:9850	5280030	0	True				
ANR	5280135	UnaryOperationExpression	"! other . find ( x , anycase )"		5280030	0					
ANR	5280136	UnaryOperator	!		5280030	0					
ANR	5280137	CallExpression	"other . find ( x , anycase )"		5280030	1					
ANR	5280138	Callee	other . find		5280030	0					
ANR	5280139	MemberAccess	other . find		5280030	0					
ANR	5280140	Identifier	other		5280030	0					
ANR	5280141	Identifier	find		5280030	1					
ANR	5280142	ArgumentList	x		5280030	1					
ANR	5280143	Argument	x		5280030	0					
ANR	5280144	Identifier	x		5280030	0					
ANR	5280145	Argument	anycase		5280030	1					
ANR	5280146	Identifier	anycase		5280030	0					
ANR	5280147	CompoundStatement		23:35:546:546	5280030	1					
ANR	5280148	ReturnStatement	return false ;	475:3:9859:9871	5280030	0	True				
ANR	5280149	Identifier	false		5280030	0					
ANR	5280150	ReturnStatement	return true ;	479:1:9882:9893	5280030	9	True				
ANR	5280151	Identifier	true		5280030	0					
ANR	5280152	ReturnType	bool		5280030	1					
ANR	5280153	Identifier	StringList :: identical		5280030	2					
ANR	5280154	ParameterList	"const StringList & other , bool anycase"		5280030	3					
ANR	5280155	Parameter	const StringList & other	451:23:9261:9283	5280030	0	True				
ANR	5280156	ParameterType	const StringList &		5280030	0					
ANR	5280157	Identifier	other		5280030	1					
ANR	5280158	Parameter	bool anycase	451:48:9286:9297	5280030	1	True				
ANR	5280159	ParameterType	bool		5280030	0					
ANR	5280160	Identifier	anycase		5280030	1					
ANR	5280161	CFGEntryNode	ENTRY		5280030		True				
ANR	5280162	CFGExitNode	EXIT		5280030		True				
ANR	5280163	Symbol	other		5280030						
ANR	5280164	Symbol	iter . Next		5280030						
ANR	5280165	Symbol	this -> number		5280030						
ANR	5280166	Symbol	other . find		5280030						
ANR	5280167	Symbol	this		5280030						
ANR	5280168	Symbol	false		5280030						
ANR	5280169	Symbol	iter		5280030						
ANR	5280170	Symbol	other . number		5280030						
ANR	5280171	Symbol	* this		5280030						
ANR	5280172	Symbol	anycase		5280030						
ANR	5280173	Symbol	find		5280030						
ANR	5280174	Symbol	x		5280030						
ANR	5280175	Symbol	true		5280030						
ANR	5280176	Symbol	m_strings		5280030						
ANR	5280177	Symbol	other . getList		5280030						
ANR	5280178	Function	StringList :: print_to_string	484:0:10005:10091							
ANR	5280179	FunctionDef	StringList :: print_to_string ()		5280178	0					
ANR	5280180	CompoundStatement		486:0:10051:10091	5280178	0					
ANR	5280181	ReturnStatement	"return print_to_delimed_string ( "","" ) ;"	487:1:10054:10089	5280178	0	True				
ANR	5280182	CallExpression	"print_to_delimed_string ( "","" )"		5280178	0					
ANR	5280183	Callee	print_to_delimed_string		5280178	0					
ANR	5280184	Identifier	print_to_delimed_string		5280178	0					
ANR	5280185	ArgumentList	""","""		5280178	1					
ANR	5280186	Argument	""","""		5280178	0					
ANR	5280187	PrimaryExpression	""","""		5280178	0					
ANR	5280188	ReturnType	char *		5280178	1					
ANR	5280189	Identifier	StringList :: print_to_string		5280178	2					
ANR	5280190	ParameterList			5280178	3					
ANR	5280191	CFGEntryNode	ENTRY		5280178		True				
ANR	5280192	CFGExitNode	EXIT		5280178		True				
ANR	5280193	Symbol	print_to_delimed_string		5280178						
ANR	5280194	Function	StringList :: print_to_delimed_string	490:0:10094:11032							
ANR	5280195	FunctionDef	StringList :: print_to_delimed_string (const char * delim)		5280194	0					
ANR	5280196	CompoundStatement		492:0:10162:11032	5280194	0					
ANR	5280197	IdentifierDeclStatement	ListIterator < char > iter ;	494:4:10169:10193	5280194	0	True				
ANR	5280198	IdentifierDecl	iter		5280194	0					
ANR	5280199	IdentifierDeclType	ListIterator < char >		5280194	0					
ANR	5280200	Identifier	iter		5280194	1					
ANR	5280201	IdentifierDeclStatement	char * tmp ;	495:1:10196:10208	5280194	1	True				
ANR	5280202	IdentifierDecl	* tmp		5280194	0					
ANR	5280203	IdentifierDeclType	char *		5280194	0					
ANR	5280204	Identifier	tmp		5280194	1					
ANR	5280205	IfStatement	if ( delim == NULL )		5280194	2					
ANR	5280206	Condition	delim == NULL	497:6:10217:10229	5280194	0	True				
ANR	5280207	EqualityExpression	delim == NULL		5280194	0		==			
ANR	5280208	Identifier	delim		5280194	0					
ANR	5280209	Identifier	NULL		5280194	1					
ANR	5280210	CompoundStatement		6:22:70:70	5280194	1					
ANR	5280211	ExpressionStatement	delim = m_delimiters	498:2:10237:10257	5280194	0	True				
ANR	5280212	AssignmentExpression	delim = m_delimiters		5280194	0		=			
ANR	5280213	Identifier	delim		5280194	0					
ANR	5280214	Identifier	m_delimiters		5280194	1					
ANR	5280215	IdentifierDeclStatement	int num = m_strings . Number ( ) ;	502:1:10318:10346	5280194	3	True				
ANR	5280216	IdentifierDecl	num = m_strings . Number ( )		5280194	0					
ANR	5280217	IdentifierDeclType	int		5280194	0					
ANR	5280218	Identifier	num		5280194	1					
ANR	5280219	AssignmentExpression	num = m_strings . Number ( )		5280194	2		=			
ANR	5280220	Identifier	num		5280194	0					
ANR	5280221	CallExpression	m_strings . Number ( )		5280194	1					
ANR	5280222	Callee	m_strings . Number		5280194	0					
ANR	5280223	MemberAccess	m_strings . Number		5280194	0					
ANR	5280224	Identifier	m_strings		5280194	0					
ANR	5280225	Identifier	Number		5280194	1					
ANR	5280226	ArgumentList			5280194	1					
ANR	5280227	IfStatement	if ( num == 0 )		5280194	4					
ANR	5280228	Condition	num == 0	503:4:10352:10359	5280194	0	True				
ANR	5280229	EqualityExpression	num == 0		5280194	0		==			
ANR	5280230	Identifier	num		5280194	0					
ANR	5280231	PrimaryExpression	0		5280194	1					
ANR	5280232	CompoundStatement		12:14:199:199	5280194	1					
ANR	5280233	ReturnStatement	return NULL ;	504:2:10366:10377	5280194	0	True				
ANR	5280234	Identifier	NULL		5280194	0					
ANR	5280235	ExpressionStatement	iter . Initialize ( m_strings )	507:4:10387:10415	5280194	5	True				
ANR	5280236	CallExpression	iter . Initialize ( m_strings )		5280194	0					
ANR	5280237	Callee	iter . Initialize		5280194	0					
ANR	5280238	MemberAccess	iter . Initialize		5280194	0					
ANR	5280239	Identifier	iter		5280194	0					
ANR	5280240	Identifier	Initialize		5280194	1					
ANR	5280241	ArgumentList	m_strings		5280194	1					
ANR	5280242	Argument	m_strings		5280194	0					
ANR	5280243	Identifier	m_strings		5280194	0					
ANR	5280244	ExpressionStatement	iter . ToBeforeFirst ( )	508:4:10421:10442	5280194	6	True				
ANR	5280245	CallExpression	iter . ToBeforeFirst ( )		5280194	0					
ANR	5280246	Callee	iter . ToBeforeFirst		5280194	0					
ANR	5280247	MemberAccess	iter . ToBeforeFirst		5280194	0					
ANR	5280248	Identifier	iter		5280194	0					
ANR	5280249	Identifier	ToBeforeFirst		5280194	1					
ANR	5280250	ArgumentList			5280194	1					
ANR	5280251	IdentifierDeclStatement	int len = 1 ;	509:1:10445:10457	5280194	7	True				
ANR	5280252	IdentifierDecl	len = 1		5280194	0					
ANR	5280253	IdentifierDeclType	int		5280194	0					
ANR	5280254	Identifier	len		5280194	1					
ANR	5280255	AssignmentExpression	len = 1		5280194	2		=			
ANR	5280256	Identifier	len		5280194	0					
ANR	5280257	PrimaryExpression	1		5280194	1					
ANR	5280258	WhileStatement	while ( iter . Next ( tmp ) )		5280194	8					
ANR	5280259	Condition	iter . Next ( tmp )	510:9:10468:10481	5280194	0	True				
ANR	5280260	CallExpression	iter . Next ( tmp )		5280194	0					
ANR	5280261	Callee	iter . Next		5280194	0					
ANR	5280262	MemberAccess	iter . Next		5280194	0					
ANR	5280263	Identifier	iter		5280194	0					
ANR	5280264	Identifier	Next		5280194	1					
ANR	5280265	ArgumentList	tmp		5280194	1					
ANR	5280266	Argument	tmp		5280194	0					
ANR	5280267	Identifier	tmp		5280194	0					
ANR	5280268	CompoundStatement		19:26:322:322	5280194	1					
ANR	5280269	ExpressionStatement	len += ( strlen ( tmp ) + strlen ( delim ) )	511:2:10489:10527	5280194	0	True				
ANR	5280270	AssignmentExpression	len += ( strlen ( tmp ) + strlen ( delim ) )		5280194	0		+=			
ANR	5280271	Identifier	len		5280194	0					
ANR	5280272	AdditiveExpression	strlen ( tmp ) + strlen ( delim )		5280194	1		+			
ANR	5280273	CallExpression	strlen ( tmp )		5280194	0					
ANR	5280274	Callee	strlen		5280194	0					
ANR	5280275	Identifier	strlen		5280194	0					
ANR	5280276	ArgumentList	tmp		5280194	1					
ANR	5280277	Argument	tmp		5280194	0					
ANR	5280278	Identifier	tmp		5280194	0					
ANR	5280279	CallExpression	strlen ( delim )		5280194	1					
ANR	5280280	Callee	strlen		5280194	0					
ANR	5280281	Identifier	strlen		5280194	0					
ANR	5280282	ArgumentList	delim		5280194	1					
ANR	5280283	Argument	delim		5280194	0					
ANR	5280284	Identifier	delim		5280194	0					
ANR	5280285	IdentifierDeclStatement	"char * buf = ( char * ) calloc ( len , 1 ) ;"	516:1:10649:10683	5280194	9	True				
ANR	5280286	IdentifierDecl	"* buf = ( char * ) calloc ( len , 1 )"		5280194	0					
ANR	5280287	IdentifierDeclType	char *		5280194	0					
ANR	5280288	Identifier	buf		5280194	1					
ANR	5280289	AssignmentExpression	"* buf = ( char * ) calloc ( len , 1 )"		5280194	2		=			
ANR	5280290	Identifier	buf		5280194	0					
ANR	5280291	CastExpression	"( char * ) calloc ( len , 1 )"		5280194	1					
ANR	5280292	CastTarget	char *		5280194	0					
ANR	5280293	CallExpression	"calloc ( len , 1 )"		5280194	1					
ANR	5280294	Callee	calloc		5280194	0					
ANR	5280295	Identifier	calloc		5280194	0					
ANR	5280296	ArgumentList	len		5280194	1					
ANR	5280297	Argument	len		5280194	0					
ANR	5280298	Identifier	len		5280194	0					
ANR	5280299	Argument	1		5280194	1					
ANR	5280300	PrimaryExpression	1		5280194	0					
ANR	5280301	IfStatement	if ( buf == NULL )		5280194	10					
ANR	5280302	Condition	buf == NULL	517:5:10690:10700	5280194	0	True				
ANR	5280303	EqualityExpression	buf == NULL		5280194	0		==			
ANR	5280304	Identifier	buf		5280194	0					
ANR	5280305	Identifier	NULL		5280194	1					
ANR	5280306	CompoundStatement		26:18:540:540	5280194	1					
ANR	5280307	ExpressionStatement	"EXCEPT ( ""Out of memory in StringList::print_to_string"" )"	518:2:10707:10761	5280194	0	True				
ANR	5280308	CallExpression	"EXCEPT ( ""Out of memory in StringList::print_to_string"" )"		5280194	0					
ANR	5280309	Callee	EXCEPT		5280194	0					
ANR	5280310	Identifier	EXCEPT		5280194	0					
ANR	5280311	ArgumentList	"""Out of memory in StringList::print_to_string"""		5280194	1					
ANR	5280312	Argument	"""Out of memory in StringList::print_to_string"""		5280194	0					
ANR	5280313	PrimaryExpression	"""Out of memory in StringList::print_to_string"""		5280194	0					
ANR	5280314	ExpressionStatement	* buf = '\\0'	520:1:10767:10778	5280194	11	True				
ANR	5280315	AssignmentExpression	* buf = '\\0'		5280194	0		=			
ANR	5280316	UnaryOperationExpression	* buf		5280194	0					
ANR	5280317	UnaryOperator	*		5280194	0					
ANR	5280318	Identifier	buf		5280194	1					
ANR	5280319	PrimaryExpression	'\\0'		5280194	1					
ANR	5280320	ExpressionStatement	iter . Initialize ( m_strings )	522:4:10785:10813	5280194	12	True				
ANR	5280321	CallExpression	iter . Initialize ( m_strings )		5280194	0					
ANR	5280322	Callee	iter . Initialize		5280194	0					
ANR	5280323	MemberAccess	iter . Initialize		5280194	0					
ANR	5280324	Identifier	iter		5280194	0					
ANR	5280325	Identifier	Initialize		5280194	1					
ANR	5280326	ArgumentList	m_strings		5280194	1					
ANR	5280327	Argument	m_strings		5280194	0					
ANR	5280328	Identifier	m_strings		5280194	0					
ANR	5280329	ExpressionStatement	iter . ToBeforeFirst ( )	523:4:10819:10840	5280194	13	True				
ANR	5280330	CallExpression	iter . ToBeforeFirst ( )		5280194	0					
ANR	5280331	Callee	iter . ToBeforeFirst		5280194	0					
ANR	5280332	MemberAccess	iter . ToBeforeFirst		5280194	0					
ANR	5280333	Identifier	iter		5280194	0					
ANR	5280334	Identifier	ToBeforeFirst		5280194	1					
ANR	5280335	ArgumentList			5280194	1					
ANR	5280336	IdentifierDeclStatement	int n = 0 ;	524:1:10843:10853	5280194	14	True				
ANR	5280337	IdentifierDecl	n = 0		5280194	0					
ANR	5280338	IdentifierDeclType	int		5280194	0					
ANR	5280339	Identifier	n		5280194	1					
ANR	5280340	AssignmentExpression	n = 0		5280194	2		=			
ANR	5280341	Identifier	n		5280194	0					
ANR	5280342	PrimaryExpression	0		5280194	1					
ANR	5280343	WhileStatement	while ( iter . Next ( tmp ) )		5280194	15					
ANR	5280344	Condition	iter . Next ( tmp )	525:9:10864:10877	5280194	0	True				
ANR	5280345	CallExpression	iter . Next ( tmp )		5280194	0					
ANR	5280346	Callee	iter . Next		5280194	0					
ANR	5280347	MemberAccess	iter . Next		5280194	0					
ANR	5280348	Identifier	iter		5280194	0					
ANR	5280349	Identifier	Next		5280194	1					
ANR	5280350	ArgumentList	tmp		5280194	1					
ANR	5280351	Argument	tmp		5280194	0					
ANR	5280352	Identifier	tmp		5280194	0					
ANR	5280353	CompoundStatement		34:26:718:718	5280194	1					
ANR	5280354	ExpressionStatement	"strcat ( buf , tmp )"	526:2:10885:10903	5280194	0	True				
ANR	5280355	CallExpression	"strcat ( buf , tmp )"		5280194	0					
ANR	5280356	Callee	strcat		5280194	0					
ANR	5280357	Identifier	strcat		5280194	0					
ANR	5280358	ArgumentList	buf		5280194	1					
ANR	5280359	Argument	buf		5280194	0					
ANR	5280360	Identifier	buf		5280194	0					
ANR	5280361	Argument	tmp		5280194	1					
ANR	5280362	Identifier	tmp		5280194	0					
ANR	5280363	IfStatement	if ( ++ n < num )		5280194	1					
ANR	5280364	Condition	++ n < num	529:7:10974:10982	5280194	0	True				
ANR	5280365	RelationalExpression	++ n < num		5280194	0		<			
ANR	5280366	UnaryExpression	++ n		5280194	0					
ANR	5280367	IncDec	++		5280194	0					
ANR	5280368	Identifier	n		5280194	1					
ANR	5280369	Identifier	num		5280194	1					
ANR	5280370	CompoundStatement		38:19:823:823	5280194	1					
ANR	5280371	ExpressionStatement	"strcat ( buf , delim )"	530:3:10991:11009	5280194	0	True				
ANR	5280372	CallExpression	"strcat ( buf , delim )"		5280194	0					
ANR	5280373	Callee	strcat		5280194	0					
ANR	5280374	Identifier	strcat		5280194	0					
ANR	5280375	ArgumentList	buf		5280194	1					
ANR	5280376	Argument	buf		5280194	0					
ANR	5280377	Identifier	buf		5280194	0					
ANR	5280378	Argument	delim		5280194	1					
ANR	5280379	Identifier	delim		5280194	0					
ANR	5280380	ReturnStatement	return buf ;	534:1:11020:11030	5280194	16	True				
ANR	5280381	Identifier	buf		5280194	0					
ANR	5280382	ReturnType	char *		5280194	1					
ANR	5280383	Identifier	StringList :: print_to_delimed_string		5280194	2					
ANR	5280384	ParameterList	const char * delim		5280194	3					
ANR	5280385	Parameter	const char * delim	491:36:10137:10153	5280194	0	True				
ANR	5280386	ParameterType	const char *		5280194	0					
ANR	5280387	Identifier	delim		5280194	1					
ANR	5280388	CFGEntryNode	ENTRY		5280194		True				
ANR	5280389	CFGExitNode	EXIT		5280194		True				
ANR	5280390	Symbol	* buf		5280194						
ANR	5280391	Symbol	NULL		5280194						
ANR	5280392	Symbol	m_delimiters		5280194						
ANR	5280393	Symbol	iter . Next		5280194						
ANR	5280394	Symbol	num		5280194						
ANR	5280395	Symbol	iter		5280194						
ANR	5280396	Symbol	calloc		5280194						
ANR	5280397	Symbol	n		5280194						
ANR	5280398	Symbol	m_strings . Number		5280194						
ANR	5280399	Symbol	strlen		5280194						
ANR	5280400	Symbol	buf		5280194						
ANR	5280401	Symbol	len		5280194						
ANR	5280402	Symbol	tmp		5280194						
ANR	5280403	Symbol	m_strings		5280194						
ANR	5280404	Symbol	delim		5280194						
ANR	5280405	Function	StringList :: deleteCurrent	537:0:11035:11161							
ANR	5280406	FunctionDef	StringList :: deleteCurrent ()		5280405	0					
ANR	5280407	CompoundStatement		538:28:11068:11161	5280405	0					
ANR	5280408	IfStatement	if ( m_strings . Current ( ) )		5280405	0					
ANR	5280409	Condition	m_strings . Current ( )	539:5:11075:11093	5280405	0	True				
ANR	5280410	CallExpression	m_strings . Current ( )		5280405	0					
ANR	5280411	Callee	m_strings . Current		5280405	0					
ANR	5280412	MemberAccess	m_strings . Current		5280405	0					
ANR	5280413	Identifier	m_strings		5280405	0					
ANR	5280414	Identifier	Current		5280405	1					
ANR	5280415	ArgumentList			5280405	1					
ANR	5280416	CompoundStatement		2:27:28:28	5280405	1					
ANR	5280417	ExpressionStatement	FREE ( m_strings . Current ( ) )	540:2:11101:11128	5280405	0	True				
ANR	5280418	CallExpression	FREE ( m_strings . Current ( ) )		5280405	0					
ANR	5280419	Callee	FREE		5280405	0					
ANR	5280420	Identifier	FREE		5280405	0					
ANR	5280421	ArgumentList	m_strings . Current ( )		5280405	1					
ANR	5280422	Argument	m_strings . Current ( )		5280405	0					
ANR	5280423	CallExpression	m_strings . Current ( )		5280405	0					
ANR	5280424	Callee	m_strings . Current		5280405	0					
ANR	5280425	MemberAccess	m_strings . Current		5280405	0					
ANR	5280426	Identifier	m_strings		5280405	0					
ANR	5280427	Identifier	Current		5280405	1					
ANR	5280428	ArgumentList			5280405	1					
ANR	5280429	ExpressionStatement	m_strings . DeleteCurrent ( )	542:1:11134:11159	5280405	1	True				
ANR	5280430	CallExpression	m_strings . DeleteCurrent ( )		5280405	0					
ANR	5280431	Callee	m_strings . DeleteCurrent		5280405	0					
ANR	5280432	MemberAccess	m_strings . DeleteCurrent		5280405	0					
ANR	5280433	Identifier	m_strings		5280405	0					
ANR	5280434	Identifier	DeleteCurrent		5280405	1					
ANR	5280435	ArgumentList			5280405	1					
ANR	5280436	ReturnType	void		5280405	1					
ANR	5280437	Identifier	StringList :: deleteCurrent		5280405	2					
ANR	5280438	ParameterList			5280405	3					
ANR	5280439	CFGEntryNode	ENTRY		5280405		True				
ANR	5280440	CFGExitNode	EXIT		5280405		True				
ANR	5280441	Symbol	m_strings		5280405						
ANR	5280442	Symbol	m_strings . Current		5280405						
ANR	5280443	Function	string_compare	546:0:11165:11281							
ANR	5280444	FunctionDef	"string_compare (const void * x , const void * y)"		5280443	0					
ANR	5280445	CompoundStatement		546:56:11221:11281	5280443	0					
ANR	5280446	Statement	return	547:1:11224:11229	5280443	0	True				
ANR	5280447	Statement	strcmp	547:8:11231:11236	5280443	1	True				
ANR	5280448	Statement	(	547:14:11237:11237	5280443	2	True				
ANR	5280449	Statement	*	547:15:11238:11238	5280443	3	True				
ANR	5280450	Statement	(	547:16:11239:11239	5280443	4	True				
ANR	5280451	Statement	char	547:17:11240:11243	5280443	5	True				
ANR	5280452	Statement	*	547:22:11245:11245	5280443	6	True				
ANR	5280453	Statement	const	547:24:11247:11251	5280443	7	True				
ANR	5280454	Statement	*	547:30:11253:11253	5280443	8	True				
ANR	5280455	Statement	)	547:31:11254:11254	5280443	9	True				
ANR	5280456	Statement	x	547:33:11256:11256	5280443	10	True				
ANR	5280457	Statement	","	547:34:11257:11257	5280443	11	True				
ANR	5280458	Statement	*	547:36:11259:11259	5280443	12	True				
ANR	5280459	Statement	(	547:37:11260:11260	5280443	13	True				
ANR	5280460	Statement	char	547:38:11261:11264	5280443	14	True				
ANR	5280461	Statement	*	547:43:11266:11266	5280443	15	True				
ANR	5280462	Statement	const	547:45:11268:11272	5280443	16	True				
ANR	5280463	Statement	*	547:51:11274:11274	5280443	17	True				
ANR	5280464	Statement	)	547:52:11275:11275	5280443	18	True				
ANR	5280465	Statement	y	547:54:11277:11277	5280443	19	True				
ANR	5280466	Statement	)	547:55:11278:11278	5280443	20	True				
ANR	5280467	ExpressionStatement		547:56:11279:11279	5280443	21	True				
ANR	5280468	ReturnType	static int		5280443	1					
ANR	5280469	Identifier	string_compare		5280443	2					
ANR	5280470	ParameterList	"const void * x , const void * y"		5280443	3					
ANR	5280471	Parameter	const void * x	546:26:11191:11203	5280443	0	True				
ANR	5280472	ParameterType	const void *		5280443	0					
ANR	5280473	Identifier	x		5280443	1					
ANR	5280474	Parameter	const void * y	546:41:11206:11218	5280443	1	True				
ANR	5280475	ParameterType	const void *		5280443	0					
ANR	5280476	Identifier	y		5280443	1					
ANR	5280477	CFGEntryNode	ENTRY		5280443		True				
ANR	5280478	CFGExitNode	EXIT		5280443		True				
ANR	5280479	Symbol	x		5280443						
ANR	5280480	Symbol	y		5280443						
ANR	5280481	Function	StringList :: qsort	550:0:11284:11700							
ANR	5280482	FunctionDef	StringList :: qsort ()		5280481	0					
ANR	5280483	CompoundStatement		551:20:11309:11700	5280481	0					
ANR	5280484	IdentifierDeclStatement	char * str ;	552:1:11312:11321	5280481	0	True				
ANR	5280485	IdentifierDecl	* str		5280481	0					
ANR	5280486	IdentifierDeclType	char *		5280481	0					
ANR	5280487	Identifier	str		5280481	1					
ANR	5280488	IdentifierDeclStatement	int i ;	553:2:11325:11330	5280481	1	True				
ANR	5280489	IdentifierDecl	i		5280481	0					
ANR	5280490	IdentifierDeclType	int		5280481	0					
ANR	5280491	Identifier	i		5280481	1					
ANR	5280492	IdentifierDeclStatement	int count = m_strings . Length ( ) ;	554:1:11333:11363	5280481	2	True				
ANR	5280493	IdentifierDecl	count = m_strings . Length ( )		5280481	0					
ANR	5280494	IdentifierDeclType	int		5280481	0					
ANR	5280495	Identifier	count		5280481	1					
ANR	5280496	AssignmentExpression	count = m_strings . Length ( )		5280481	2		=			
ANR	5280497	Identifier	count		5280481	0					
ANR	5280498	CallExpression	m_strings . Length ( )		5280481	1					
ANR	5280499	Callee	m_strings . Length		5280481	0					
ANR	5280500	MemberAccess	m_strings . Length		5280481	0					
ANR	5280501	Identifier	m_strings		5280481	0					
ANR	5280502	Identifier	Length		5280481	1					
ANR	5280503	ArgumentList			5280481	1					
ANR	5280504	IdentifierDeclStatement	"char * * list = ( char * * ) calloc ( count , sizeof ( char * ) ) ;"	555:1:11366:11419	5280481	3	True				
ANR	5280505	IdentifierDecl	"* * list = ( char * * ) calloc ( count , sizeof ( char * ) )"		5280481	0					
ANR	5280506	IdentifierDeclType	char * *		5280481	0					
ANR	5280507	Identifier	list		5280481	1					
ANR	5280508	AssignmentExpression	"* * list = ( char * * ) calloc ( count , sizeof ( char * ) )"		5280481	2		=			
ANR	5280509	Identifier	list		5280481	0					
ANR	5280510	CastExpression	"( char * * ) calloc ( count , sizeof ( char * ) )"		5280481	1					
ANR	5280511	CastTarget	char * *		5280481	0					
ANR	5280512	CallExpression	"calloc ( count , sizeof ( char * ) )"		5280481	1					
ANR	5280513	Callee	calloc		5280481	0					
ANR	5280514	Identifier	calloc		5280481	0					
ANR	5280515	ArgumentList	count		5280481	1					
ANR	5280516	Argument	count		5280481	0					
ANR	5280517	Identifier	count		5280481	0					
ANR	5280518	Argument	sizeof ( char * )		5280481	1					
ANR	5280519	SizeofExpression	sizeof ( char * )		5280481	0					
ANR	5280520	Sizeof	sizeof		5280481	0					
ANR	5280521	SizeofOperand	char *		5280481	1					
ANR	5280522	ForStatement	"for ( i = 0 , m_strings . Rewind ( ) ; ( str = m_strings . Next ( ) ) ; i ++ )"		5280481	4					
ANR	5280523	ForInit	"i = 0 , m_strings . Rewind ( ) ;"	557:6:11428:11453	5280481	0	True				
ANR	5280524	Expression	"i = 0 , m_strings . Rewind ( )"		5280481	0					
ANR	5280525	AssignmentExpression	i = 0		5280481	0		=			
ANR	5280526	Identifier	i		5280481	0					
ANR	5280527	PrimaryExpression	0		5280481	1					
ANR	5280528	CallExpression	m_strings . Rewind ( )		5280481	1					
ANR	5280529	Callee	m_strings . Rewind		5280481	0					
ANR	5280530	MemberAccess	m_strings . Rewind		5280481	0					
ANR	5280531	Identifier	m_strings		5280481	0					
ANR	5280532	Identifier	Rewind		5280481	1					
ANR	5280533	ArgumentList			5280481	1					
ANR	5280534	Condition	str = m_strings . Next ( )	557:33:11455:11478	5280481	1	True				
ANR	5280535	AssignmentExpression	str = m_strings . Next ( )		5280481	0		=			
ANR	5280536	Identifier	str		5280481	0					
ANR	5280537	CallExpression	m_strings . Next ( )		5280481	1					
ANR	5280538	Callee	m_strings . Next		5280481	0					
ANR	5280539	MemberAccess	m_strings . Next		5280481	0					
ANR	5280540	Identifier	m_strings		5280481	0					
ANR	5280541	Identifier	Next		5280481	1					
ANR	5280542	ArgumentList			5280481	1					
ANR	5280543	PostIncDecOperationExpression	i ++	557:59:11481:11483	5280481	2	True				
ANR	5280544	Identifier	i		5280481	0					
ANR	5280545	IncDec	++		5280481	1					
ANR	5280546	CompoundStatement		7:64:176:176	5280481	3					
ANR	5280547	ExpressionStatement	list [ i ] = strdup ( str )	558:2:11490:11511	5280481	0	True				
ANR	5280548	AssignmentExpression	list [ i ] = strdup ( str )		5280481	0		=			
ANR	5280549	ArrayIndexing	list [ i ]		5280481	0					
ANR	5280550	Identifier	list		5280481	0					
ANR	5280551	Identifier	i		5280481	1					
ANR	5280552	CallExpression	strdup ( str )		5280481	1					
ANR	5280553	Callee	strdup		5280481	0					
ANR	5280554	Identifier	strdup		5280481	0					
ANR	5280555	ArgumentList	str		5280481	1					
ANR	5280556	Argument	str		5280481	0					
ANR	5280557	Identifier	str		5280481	0					
ANR	5280558	Statement	::	561:1:11556:11557	5280481	5	True				
ANR	5280559	ExpressionStatement	"qsort ( list , count , sizeof ( char * ) , string_compare )"	561:3:11558:11608	5280481	6	True				
ANR	5280560	CallExpression	"qsort ( list , count , sizeof ( char * ) , string_compare )"		5280481	0					
ANR	5280561	Callee	qsort		5280481	0					
ANR	5280562	Identifier	qsort		5280481	0					
ANR	5280563	ArgumentList	list		5280481	1					
ANR	5280564	Argument	list		5280481	0					
ANR	5280565	Identifier	list		5280481	0					
ANR	5280566	Argument	count		5280481	1					
ANR	5280567	Identifier	count		5280481	0					
ANR	5280568	Argument	sizeof ( char * )		5280481	2					
ANR	5280569	SizeofExpression	sizeof ( char * )		5280481	0					
ANR	5280570	Sizeof	sizeof		5280481	0					
ANR	5280571	SizeofOperand	char *		5280481	1					
ANR	5280572	Argument	string_compare		5280481	3					
ANR	5280573	Identifier	string_compare		5280481	0					
ANR	5280574	ForStatement	"for ( i = 0 , clearAll ( ) ; i < count ; i ++ )"		5280481	7					
ANR	5280575	ForInit	"i = 0 , clearAll ( ) ;"	563:6:11617:11634	5280481	0	True				
ANR	5280576	Expression	"i = 0 , clearAll ( )"		5280481	0					
ANR	5280577	AssignmentExpression	i = 0		5280481	0		=			
ANR	5280578	Identifier	i		5280481	0					
ANR	5280579	PrimaryExpression	0		5280481	1					
ANR	5280580	CallExpression	clearAll ( )		5280481	1					
ANR	5280581	Callee	clearAll		5280481	0					
ANR	5280582	Identifier	clearAll		5280481	0					
ANR	5280583	ArgumentList			5280481	1					
ANR	5280584	Condition	i < count	563:25:11636:11644	5280481	1	True				
ANR	5280585	RelationalExpression	i < count		5280481	0		<			
ANR	5280586	Identifier	i		5280481	0					
ANR	5280587	Identifier	count		5280481	1					
ANR	5280588	PostIncDecOperationExpression	i ++	563:36:11647:11649	5280481	2	True				
ANR	5280589	Identifier	i		5280481	0					
ANR	5280590	IncDec	++		5280481	1					
ANR	5280591	CompoundStatement		13:41:342:342	5280481	3					
ANR	5280592	ExpressionStatement	m_strings . Append ( list [ i ] )	564:2:11656:11681	5280481	0	True				
ANR	5280593	CallExpression	m_strings . Append ( list [ i ] )		5280481	0					
ANR	5280594	Callee	m_strings . Append		5280481	0					
ANR	5280595	MemberAccess	m_strings . Append		5280481	0					
ANR	5280596	Identifier	m_strings		5280481	0					
ANR	5280597	Identifier	Append		5280481	1					
ANR	5280598	ArgumentList	list [ i ]		5280481	1					
ANR	5280599	Argument	list [ i ]		5280481	0					
ANR	5280600	ArrayIndexing	list [ i ]		5280481	0					
ANR	5280601	Identifier	list		5280481	0					
ANR	5280602	Identifier	i		5280481	1					
ANR	5280603	ExpressionStatement	free ( list )	567:1:11688:11698	5280481	8	True				
ANR	5280604	CallExpression	free ( list )		5280481	0					
ANR	5280605	Callee	free		5280481	0					
ANR	5280606	Identifier	free		5280481	0					
ANR	5280607	ArgumentList	list		5280481	1					
ANR	5280608	Argument	list		5280481	0					
ANR	5280609	Identifier	list		5280481	0					
ANR	5280610	ReturnType	void		5280481	1					
ANR	5280611	Identifier	StringList :: qsort		5280481	2					
ANR	5280612	ParameterList			5280481	3					
ANR	5280613	CFGEntryNode	ENTRY		5280481		True				
ANR	5280614	CFGExitNode	EXIT		5280481		True				
ANR	5280615	Symbol	str		5280481						
ANR	5280616	Symbol	string_compare		5280481						
ANR	5280617	Symbol	* i		5280481						
ANR	5280618	Symbol	* list		5280481						
ANR	5280619	Symbol	count		5280481						
ANR	5280620	Symbol	m_strings . Length		5280481						
ANR	5280621	Symbol	i		5280481						
ANR	5280622	Symbol	m_strings		5280481						
ANR	5280623	Symbol	calloc		5280481						
ANR	5280624	Symbol	m_strings . Next		5280481						
ANR	5280625	Symbol	strdup		5280481						
ANR	5280626	Symbol	list		5280481						
ANR	5280627	Function	StringList :: shuffle	570:0:11703:12241							
ANR	5280628	FunctionDef	StringList :: shuffle ()		5280627	0					
ANR	5280629	CompoundStatement		571:22:11730:12241	5280627	0					
ANR	5280630	IdentifierDeclStatement	char * str ;	572:1:11733:11742	5280627	0	True				
ANR	5280631	IdentifierDecl	* str		5280627	0					
ANR	5280632	IdentifierDeclType	char *		5280627	0					
ANR	5280633	Identifier	str		5280627	1					
ANR	5280634	IdentifierDeclStatement	unsigned int i ;	573:2:11746:11760	5280627	1	True				
ANR	5280635	IdentifierDecl	i		5280627	0					
ANR	5280636	IdentifierDeclType	unsigned int		5280627	0					
ANR	5280637	Identifier	i		5280627	1					
ANR	5280638	IdentifierDeclStatement	unsigned int count = m_strings . Length ( ) ;	574:1:11763:11802	5280627	2	True				
ANR	5280639	IdentifierDecl	count = m_strings . Length ( )		5280627	0					
ANR	5280640	IdentifierDeclType	unsigned int		5280627	0					
ANR	5280641	Identifier	count		5280627	1					
ANR	5280642	AssignmentExpression	count = m_strings . Length ( )		5280627	2		=			
ANR	5280643	Identifier	count		5280627	0					
ANR	5280644	CallExpression	m_strings . Length ( )		5280627	1					
ANR	5280645	Callee	m_strings . Length		5280627	0					
ANR	5280646	MemberAccess	m_strings . Length		5280627	0					
ANR	5280647	Identifier	m_strings		5280627	0					
ANR	5280648	Identifier	Length		5280627	1					
ANR	5280649	ArgumentList			5280627	1					
ANR	5280650	IdentifierDeclStatement	"char * * list = ( char * * ) calloc ( count , sizeof ( char * ) ) ;"	575:1:11805:11858	5280627	3	True				
ANR	5280651	IdentifierDecl	"* * list = ( char * * ) calloc ( count , sizeof ( char * ) )"		5280627	0					
ANR	5280652	IdentifierDeclType	char * *		5280627	0					
ANR	5280653	Identifier	list		5280627	1					
ANR	5280654	AssignmentExpression	"* * list = ( char * * ) calloc ( count , sizeof ( char * ) )"		5280627	2		=			
ANR	5280655	Identifier	list		5280627	0					
ANR	5280656	CastExpression	"( char * * ) calloc ( count , sizeof ( char * ) )"		5280627	1					
ANR	5280657	CastTarget	char * *		5280627	0					
ANR	5280658	CallExpression	"calloc ( count , sizeof ( char * ) )"		5280627	1					
ANR	5280659	Callee	calloc		5280627	0					
ANR	5280660	Identifier	calloc		5280627	0					
ANR	5280661	ArgumentList	count		5280627	1					
ANR	5280662	Argument	count		5280627	0					
ANR	5280663	Identifier	count		5280627	0					
ANR	5280664	Argument	sizeof ( char * )		5280627	1					
ANR	5280665	SizeofExpression	sizeof ( char * )		5280627	0					
ANR	5280666	Sizeof	sizeof		5280627	0					
ANR	5280667	SizeofOperand	char *		5280627	1					
ANR	5280668	ForStatement	"for ( i = 0 , m_strings . Rewind ( ) ; ( str = m_strings . Next ( ) ) ; i ++ )"		5280627	4					
ANR	5280669	ForInit	"i = 0 , m_strings . Rewind ( ) ;"	577:6:11867:11892	5280627	0	True				
ANR	5280670	Expression	"i = 0 , m_strings . Rewind ( )"		5280627	0					
ANR	5280671	AssignmentExpression	i = 0		5280627	0		=			
ANR	5280672	Identifier	i		5280627	0					
ANR	5280673	PrimaryExpression	0		5280627	1					
ANR	5280674	CallExpression	m_strings . Rewind ( )		5280627	1					
ANR	5280675	Callee	m_strings . Rewind		5280627	0					
ANR	5280676	MemberAccess	m_strings . Rewind		5280627	0					
ANR	5280677	Identifier	m_strings		5280627	0					
ANR	5280678	Identifier	Rewind		5280627	1					
ANR	5280679	ArgumentList			5280627	1					
ANR	5280680	Condition	str = m_strings . Next ( )	577:33:11894:11917	5280627	1	True				
ANR	5280681	AssignmentExpression	str = m_strings . Next ( )		5280627	0		=			
ANR	5280682	Identifier	str		5280627	0					
ANR	5280683	CallExpression	m_strings . Next ( )		5280627	1					
ANR	5280684	Callee	m_strings . Next		5280627	0					
ANR	5280685	MemberAccess	m_strings . Next		5280627	0					
ANR	5280686	Identifier	m_strings		5280627	0					
ANR	5280687	Identifier	Next		5280627	1					
ANR	5280688	ArgumentList			5280627	1					
ANR	5280689	PostIncDecOperationExpression	i ++	577:59:11920:11922	5280627	2	True				
ANR	5280690	Identifier	i		5280627	0					
ANR	5280691	IncDec	++		5280627	1					
ANR	5280692	CompoundStatement		7:64:194:194	5280627	3					
ANR	5280693	ExpressionStatement	list [ i ] = strdup ( str )	578:2:11929:11950	5280627	0	True				
ANR	5280694	AssignmentExpression	list [ i ] = strdup ( str )		5280627	0		=			
ANR	5280695	ArrayIndexing	list [ i ]		5280627	0					
ANR	5280696	Identifier	list		5280627	0					
ANR	5280697	Identifier	i		5280627	1					
ANR	5280698	CallExpression	strdup ( str )		5280627	1					
ANR	5280699	Callee	strdup		5280627	0					
ANR	5280700	Identifier	strdup		5280627	0					
ANR	5280701	ArgumentList	str		5280627	1					
ANR	5280702	Argument	str		5280627	0					
ANR	5280703	Identifier	str		5280627	0					
ANR	5280704	ForStatement	for ( i = 0 ; i + 1 < count ; i ++ )		5280627	5					
ANR	5280705	ForInit	i = 0 ;	581:6:11962:11967	5280627	0	True				
ANR	5280706	AssignmentExpression	i = 0		5280627	0		=			
ANR	5280707	Identifier	i		5280627	0					
ANR	5280708	PrimaryExpression	0		5280627	1					
ANR	5280709	Condition	i + 1 < count	581:13:11969:11979	5280627	1	True				
ANR	5280710	RelationalExpression	i + 1 < count		5280627	0		<			
ANR	5280711	AdditiveExpression	i + 1		5280627	0		+			
ANR	5280712	Identifier	i		5280627	0					
ANR	5280713	PrimaryExpression	1		5280627	1					
ANR	5280714	Identifier	count		5280627	1					
ANR	5280715	PostIncDecOperationExpression	i ++	581:26:11982:11984	5280627	2	True				
ANR	5280716	Identifier	i		5280627	0					
ANR	5280717	IncDec	++		5280627	1					
ANR	5280718	CompoundStatement		12:2:260:329	5280627	3					
ANR	5280719	IdentifierDeclStatement	unsigned int j = ( unsigned int ) ( i + ( get_random_float ( ) * ( count - i ) ) ) ;	582:2:11991:12060	5280627	0	True				
ANR	5280720	IdentifierDecl	j = ( unsigned int ) ( i + ( get_random_float ( ) * ( count - i ) ) )		5280627	0					
ANR	5280721	IdentifierDeclType	unsigned int		5280627	0					
ANR	5280722	Identifier	j		5280627	1					
ANR	5280723	AssignmentExpression	j = ( unsigned int ) ( i + ( get_random_float ( ) * ( count - i ) ) )		5280627	2		=			
ANR	5280724	Identifier	j		5280627	0					
ANR	5280725	CastExpression	( unsigned int ) ( i + ( get_random_float ( ) * ( count - i ) ) )		5280627	1					
ANR	5280726	CastTarget	unsigned int		5280627	0					
ANR	5280727	AdditiveExpression	i + ( get_random_float ( ) * ( count - i ) )		5280627	1		+			
ANR	5280728	Identifier	i		5280627	0					
ANR	5280729	MultiplicativeExpression	get_random_float ( ) * ( count - i )		5280627	1		*			
ANR	5280730	CallExpression	get_random_float ( )		5280627	0					
ANR	5280731	Callee	get_random_float		5280627	0					
ANR	5280732	Identifier	get_random_float		5280627	0					
ANR	5280733	ArgumentList			5280627	1					
ANR	5280734	AdditiveExpression	count - i		5280627	1		-			
ANR	5280735	Identifier	count		5280627	0					
ANR	5280736	Identifier	i		5280627	1					
ANR	5280737	ExpressionStatement	str = list [ i ]	584:2:12095:12108	5280627	1	True				
ANR	5280738	AssignmentExpression	str = list [ i ]		5280627	0		=			
ANR	5280739	Identifier	str		5280627	0					
ANR	5280740	ArrayIndexing	list [ i ]		5280627	1					
ANR	5280741	Identifier	list		5280627	0					
ANR	5280742	Identifier	i		5280627	1					
ANR	5280743	ExpressionStatement	list [ i ] = list [ j ]	585:2:12112:12129	5280627	2	True				
ANR	5280744	AssignmentExpression	list [ i ] = list [ j ]		5280627	0		=			
ANR	5280745	ArrayIndexing	list [ i ]		5280627	0					
ANR	5280746	Identifier	list		5280627	0					
ANR	5280747	Identifier	i		5280627	1					
ANR	5280748	ArrayIndexing	list [ j ]		5280627	1					
ANR	5280749	Identifier	list		5280627	0					
ANR	5280750	Identifier	j		5280627	1					
ANR	5280751	ExpressionStatement	list [ j ] = str	586:2:12133:12146	5280627	3	True				
ANR	5280752	AssignmentExpression	list [ j ] = str		5280627	0		=			
ANR	5280753	ArrayIndexing	list [ j ]		5280627	0					
ANR	5280754	Identifier	list		5280627	0					
ANR	5280755	Identifier	j		5280627	1					
ANR	5280756	Identifier	str		5280627	1					
ANR	5280757	ForStatement	"for ( i = 0 , clearAll ( ) ; i < count ; i ++ )"		5280627	6					
ANR	5280758	ForInit	"i = 0 , clearAll ( ) ;"	589:6:12158:12175	5280627	0	True				
ANR	5280759	Expression	"i = 0 , clearAll ( )"		5280627	0					
ANR	5280760	AssignmentExpression	i = 0		5280627	0		=			
ANR	5280761	Identifier	i		5280627	0					
ANR	5280762	PrimaryExpression	0		5280627	1					
ANR	5280763	CallExpression	clearAll ( )		5280627	1					
ANR	5280764	Callee	clearAll		5280627	0					
ANR	5280765	Identifier	clearAll		5280627	0					
ANR	5280766	ArgumentList			5280627	1					
ANR	5280767	Condition	i < count	589:25:12177:12185	5280627	1	True				
ANR	5280768	RelationalExpression	i < count		5280627	0		<			
ANR	5280769	Identifier	i		5280627	0					
ANR	5280770	Identifier	count		5280627	1					
ANR	5280771	PostIncDecOperationExpression	i ++	589:36:12188:12190	5280627	2	True				
ANR	5280772	Identifier	i		5280627	0					
ANR	5280773	IncDec	++		5280627	1					
ANR	5280774	CompoundStatement		19:41:462:462	5280627	3					
ANR	5280775	ExpressionStatement	m_strings . Append ( list [ i ] )	590:2:12197:12222	5280627	0	True				
ANR	5280776	CallExpression	m_strings . Append ( list [ i ] )		5280627	0					
ANR	5280777	Callee	m_strings . Append		5280627	0					
ANR	5280778	MemberAccess	m_strings . Append		5280627	0					
ANR	5280779	Identifier	m_strings		5280627	0					
ANR	5280780	Identifier	Append		5280627	1					
ANR	5280781	ArgumentList	list [ i ]		5280627	1					
ANR	5280782	Argument	list [ i ]		5280627	0					
ANR	5280783	ArrayIndexing	list [ i ]		5280627	0					
ANR	5280784	Identifier	list		5280627	0					
ANR	5280785	Identifier	i		5280627	1					
ANR	5280786	ExpressionStatement	free ( list )	593:1:12229:12239	5280627	7	True				
ANR	5280787	CallExpression	free ( list )		5280627	0					
ANR	5280788	Callee	free		5280627	0					
ANR	5280789	Identifier	free		5280627	0					
ANR	5280790	ArgumentList	list		5280627	1					
ANR	5280791	Argument	list		5280627	0					
ANR	5280792	Identifier	list		5280627	0					
ANR	5280793	ReturnType	void		5280627	1					
ANR	5280794	Identifier	StringList :: shuffle		5280627	2					
ANR	5280795	ParameterList			5280627	3					
ANR	5280796	CFGEntryNode	ENTRY		5280627		True				
ANR	5280797	CFGExitNode	EXIT		5280627		True				
ANR	5280798	Symbol	count		5280627						
ANR	5280799	Symbol	i		5280627						
ANR	5280800	Symbol	j		5280627						
ANR	5280801	Symbol	get_random_float		5280627						
ANR	5280802	Symbol	calloc		5280627						
ANR	5280803	Symbol	m_strings . Next		5280627						
ANR	5280804	Symbol	list		5280627						
ANR	5280805	Symbol	str		5280627						
ANR	5280806	Symbol	* i		5280627						
ANR	5280807	Symbol	* j		5280627						
ANR	5280808	Symbol	* list		5280627						
ANR	5280809	Symbol	m_strings . Length		5280627						
ANR	5280810	Symbol	m_strings		5280627						
ANR	5280811	Symbol	strdup		5280627						
