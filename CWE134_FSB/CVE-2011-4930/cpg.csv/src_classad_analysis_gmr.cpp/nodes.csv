command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2476106	File	data/converged/CVE-2011-4930_htcondor/src_classad_analysis_gmr.cpp								
ANR	2476107	Function	GMR :: GMR	24:0:856:905							
ANR	2476108	FunctionDef	GMR :: GMR ()		2476107	0					
ANR	2476109	CompoundStatement		25:0:868:905	2476107	0					
ANR	2476110	ExpressionStatement	parentAd = NULL	26:4:874:889	2476107	0	True				
ANR	2476111	AssignmentExpression	parentAd = NULL		2476107	0		=			
ANR	2476112	Identifier	parentAd		2476107	0					
ANR	2476113	Identifier	NULL		2476107	1					
ANR	2476114	ExpressionStatement	key = - 1	27:4:895:903	2476107	1	True				
ANR	2476115	AssignmentExpression	key = - 1		2476107	0		=			
ANR	2476116	Identifier	key		2476107	0					
ANR	2476117	UnaryOperationExpression	- 1		2476107	1					
ANR	2476118	UnaryOperator	-		2476107	0					
ANR	2476119	PrimaryExpression	1		2476107	1					
ANR	2476120	Identifier	GMR :: GMR		2476107	1					
ANR	2476121	ParameterList			2476107	2					
ANR	2476122	CFGEntryNode	ENTRY		2476107		True				
ANR	2476123	CFGExitNode	EXIT		2476107		True				
ANR	2476124	Symbol	NULL		2476107						
ANR	2476125	Symbol	parentAd		2476107						
ANR	2476126	Symbol	key		2476107						
ANR	2476127	Function	GMR :: ~GMR	31:0:909:1051							
ANR	2476128	FunctionDef	GMR :: ~GMR ()		2476127	0					
ANR	2476129	CompoundStatement		32:0:922:1051	2476127	0					
ANR	2476130	IfStatement	if ( parentAd )		2476127	0					
ANR	2476131	Condition	parentAd	33:8:932:939	2476127	0	True				
ANR	2476132	Identifier	parentAd		2476127	0					
ANR	2476133	CompoundStatement		2:19:20:20	2476127	1					
ANR	2476134	Statement	delete	34:8:953:958	2476127	0	True				
ANR	2476135	ExpressionStatement	parentAd	34:15:960:968	2476127	1	True				
ANR	2476136	Identifier	parentAd		2476127	0					
ANR	2476137	ExpressionStatement	"printf ( ""Deleted GMR %d (in dtor)\\n"" , key )"	37:4:999:1042	2476127	1	True				
ANR	2476138	CallExpression	"printf ( ""Deleted GMR %d (in dtor)\\n"" , key )"		2476127	0					
ANR	2476139	Callee	printf		2476127	0					
ANR	2476140	Identifier	printf		2476127	0					
ANR	2476141	ArgumentList	"""Deleted GMR %d (in dtor)\\n"""		2476127	1					
ANR	2476142	Argument	"""Deleted GMR %d (in dtor)\\n"""		2476127	0					
ANR	2476143	PrimaryExpression	"""Deleted GMR %d (in dtor)\\n"""		2476127	0					
ANR	2476144	Argument	key		2476127	1					
ANR	2476145	Identifier	key		2476127	0					
ANR	2476146	Identifier	GMR :: ~GMR		2476127	1					
ANR	2476147	ParameterList			2476127	2					
ANR	2476148	CFGEntryNode	ENTRY		2476127		True				
ANR	2476149	CFGExitNode	EXIT		2476127		True				
ANR	2476150	Symbol	parentAd		2476127						
ANR	2476151	Symbol	key		2476127						
ANR	2476152	Function	GMR :: MakeGMR	42:0:1055:4419							
ANR	2476153	FunctionDef	"GMR :: MakeGMR (int key , classad :: ClassAd * ad)"		2476152	0					
ANR	2476154	CompoundStatement		44:0:1107:4419	2476152	0					
ANR	2476155	IdentifierDeclStatement	const classad :: ExprTree * expr ;	45:4:1113:1151	2476152	0	True				
ANR	2476156	IdentifierDecl	* expr		2476152	0					
ANR	2476157	IdentifierDeclType	const classad :: ExprTree *		2476152	0					
ANR	2476158	Identifier	expr		2476152	1					
ANR	2476159	IdentifierDeclStatement	classad :: ClassAd * portAd ;	46:4:1157:1197	2476152	1	True				
ANR	2476160	IdentifierDecl	* portAd		2476152	0					
ANR	2476161	IdentifierDeclType	classad :: ClassAd *		2476152	0					
ANR	2476162	Identifier	portAd		2476152	1					
ANR	2476163	IdentifierDeclStatement	const classad :: ExprList * el ;	47:4:1203:1236	2476152	2	True				
ANR	2476164	IdentifierDecl	* el		2476152	0					
ANR	2476165	IdentifierDeclType	const classad :: ExprList *		2476152	0					
ANR	2476166	Identifier	el		2476152	1					
ANR	2476167	IdentifierDeclStatement	classad :: ExprListIterator eli ;	48:4:1242:1278	2476152	3	True				
ANR	2476168	IdentifierDecl	eli		2476152	0					
ANR	2476169	IdentifierDeclType	classad :: ExprListIterator		2476152	0					
ANR	2476170	Identifier	eli		2476152	1					
ANR	2476171	IdentifierDeclStatement	Dependencies :: iterator dit ;	49:4:1284:1311	2476152	4	True				
ANR	2476172	IdentifierDecl	dit		2476152	0					
ANR	2476173	IdentifierDeclType	Dependencies :: iterator		2476152	0					
ANR	2476174	Identifier	dit		2476152	1					
ANR	2476175	IdentifierDeclStatement	classad :: Value val ;	50:4:1317:1353	2476152	5	True				
ANR	2476176	IdentifierDecl	val		2476152	0					
ANR	2476177	IdentifierDeclType	classad :: Value		2476152	0					
ANR	2476178	Identifier	val		2476152	1					
ANR	2476179	IdentifierDeclStatement	GMR :: Port port ;	51:4:1359:1387	2476152	6	True				
ANR	2476180	IdentifierDecl	port		2476152	0					
ANR	2476181	IdentifierDeclType	GMR :: Port		2476152	0					
ANR	2476182	Identifier	port		2476152	1					
ANR	2476183	IdentifierDeclStatement	classad :: ClassAdIterator citr ;	52:4:1393:1430	2476152	7	True				
ANR	2476184	IdentifierDecl	citr		2476152	0					
ANR	2476185	IdentifierDeclType	classad :: ClassAdIterator		2476152	0					
ANR	2476186	Identifier	citr		2476152	1					
ANR	2476187	IdentifierDeclStatement	std :: string attr ;	53:4:1436:1469	2476152	8	True				
ANR	2476188	IdentifierDecl	attr		2476152	0					
ANR	2476189	IdentifierDeclType	std :: string		2476152	0					
ANR	2476190	Identifier	attr		2476152	1					
ANR	2476191	IdentifierDeclStatement	Ports :: iterator portItr ;	54:4:1475:1506	2476152	9	True				
ANR	2476192	IdentifierDecl	portItr		2476152	0					
ANR	2476193	IdentifierDeclType	Ports :: iterator		2476152	0					
ANR	2476194	Identifier	portItr		2476152	1					
ANR	2476195	IdentifierDeclStatement	GMR * gmr = new GMR ( ) ;	55:4:1512:1553	2476152	10	True				
ANR	2476196	IdentifierDecl	* gmr = new GMR ( )		2476152	0					
ANR	2476197	IdentifierDeclType	GMR *		2476152	0					
ANR	2476198	Identifier	gmr		2476152	1					
ANR	2476199	AssignmentExpression	* gmr = new GMR ( )		2476152	2		=			
ANR	2476200	Identifier	gmr		2476152	0					
ANR	2476201	UnaryExpression	new GMR ( )		2476152	1					
ANR	2476202	IfStatement	if ( ! gmr )		2476152	11					
ANR	2476203	Condition	! gmr	57:8:1564:1567	2476152	0	True				
ANR	2476204	UnaryOperationExpression	! gmr		2476152	0					
ANR	2476205	UnaryOperator	!		2476152	0					
ANR	2476206	Identifier	gmr		2476152	1					
ANR	2476207	ReturnStatement	return ( NULL ) ;	57:15:1571:1585	2476152	1	True				
ANR	2476208	Identifier	NULL		2476152	0					
ANR	2476209	ExpressionStatement	gmr -> parentAd = ad	58:4:1591:1609	2476152	12	True				
ANR	2476210	AssignmentExpression	gmr -> parentAd = ad		2476152	0		=			
ANR	2476211	PtrMemberAccess	gmr -> parentAd		2476152	0					
ANR	2476212	Identifier	gmr		2476152	0					
ANR	2476213	Identifier	parentAd		2476152	1					
ANR	2476214	Identifier	ad		2476152	1					
ANR	2476215	IfStatement	"if ( ! ad -> EvaluateAttr ( ""Ports"" , val ) )"		2476152	13					
ANR	2476216	Condition	"! ad -> EvaluateAttr ( ""Ports"" , val )"	61:8:1649:1681	2476152	0	True				
ANR	2476217	UnaryOperationExpression	"! ad -> EvaluateAttr ( ""Ports"" , val )"		2476152	0					
ANR	2476218	UnaryOperator	!		2476152	0					
ANR	2476219	CallExpression	"ad -> EvaluateAttr ( ""Ports"" , val )"		2476152	1					
ANR	2476220	Callee	ad -> EvaluateAttr		2476152	0					
ANR	2476221	PtrMemberAccess	ad -> EvaluateAttr		2476152	0					
ANR	2476222	Identifier	ad		2476152	0					
ANR	2476223	Identifier	EvaluateAttr		2476152	1					
ANR	2476224	ArgumentList	"""Ports"""		2476152	1					
ANR	2476225	Argument	"""Ports"""		2476152	0					
ANR	2476226	PrimaryExpression	"""Ports"""		2476152	0					
ANR	2476227	Argument	val		2476152	1					
ANR	2476228	Identifier	val		2476152	0					
ANR	2476229	CompoundStatement		18:44:577:577	2476152	1					
ANR	2476230	ExpressionStatement	"printf ( ""Failed to get 'Ports' attribute\\n"" )"	62:8:1695:1739	2476152	0	True				
ANR	2476231	CallExpression	"printf ( ""Failed to get 'Ports' attribute\\n"" )"		2476152	0					
ANR	2476232	Callee	printf		2476152	0					
ANR	2476233	Identifier	printf		2476152	0					
ANR	2476234	ArgumentList	"""Failed to get 'Ports' attribute\\n"""		2476152	1					
ANR	2476235	Argument	"""Failed to get 'Ports' attribute\\n"""		2476152	0					
ANR	2476236	PrimaryExpression	"""Failed to get 'Ports' attribute\\n"""		2476152	0					
ANR	2476237	Statement	delete	63:8:1749:1754	2476152	1	True				
ANR	2476238	ExpressionStatement	gmr	63:15:1756:1759	2476152	2	True				
ANR	2476239	Identifier	gmr		2476152	0					
ANR	2476240	ReturnStatement	return ( NULL ) ;	64:8:1769:1783	2476152	3	True				
ANR	2476241	Identifier	NULL		2476152	0					
ANR	2476242	IfStatement	if ( ! val . IsListValue ( el ) )		2476152	14					
ANR	2476243	Condition	! val . IsListValue ( el )	66:8:1799:1820	2476152	0	True				
ANR	2476244	UnaryOperationExpression	! val . IsListValue ( el )		2476152	0					
ANR	2476245	UnaryOperator	!		2476152	0					
ANR	2476246	CallExpression	val . IsListValue ( el )		2476152	1					
ANR	2476247	Callee	val . IsListValue		2476152	0					
ANR	2476248	MemberAccess	val . IsListValue		2476152	0					
ANR	2476249	Identifier	val		2476152	0					
ANR	2476250	Identifier	IsListValue		2476152	1					
ANR	2476251	ArgumentList	el		2476152	1					
ANR	2476252	Argument	el		2476152	0					
ANR	2476253	Identifier	el		2476152	0					
ANR	2476254	CompoundStatement		23:33:716:716	2476152	1					
ANR	2476255	ExpressionStatement	"printf ( ""'Ports' attribute not a list\\n"" )"	67:8:1834:1876	2476152	0	True				
ANR	2476256	CallExpression	"printf ( ""'Ports' attribute not a list\\n"" )"		2476152	0					
ANR	2476257	Callee	printf		2476152	0					
ANR	2476258	Identifier	printf		2476152	0					
ANR	2476259	ArgumentList	"""'Ports' attribute not a list\\n"""		2476152	1					
ANR	2476260	Argument	"""'Ports' attribute not a list\\n"""		2476152	0					
ANR	2476261	PrimaryExpression	"""'Ports' attribute not a list\\n"""		2476152	0					
ANR	2476262	Statement	delete	68:8:1886:1891	2476152	1	True				
ANR	2476263	ExpressionStatement	gmr	68:15:1893:1896	2476152	2	True				
ANR	2476264	Identifier	gmr		2476152	0					
ANR	2476265	ReturnStatement	return ( NULL ) ;	69:8:1906:1920	2476152	3	True				
ANR	2476266	Identifier	NULL		2476152	0					
ANR	2476267	ForStatement	for ( eli . Initialize ( el ) ; ! eli . IsAfterLast ( ) ; eli . NextExpr ( ) )		2476152	15					
ANR	2476268	ForInit	eli . Initialize ( el ) ;	73:9:1973:1994	2476152	0	True				
ANR	2476269	CallExpression	eli . Initialize ( el )		2476152	0					
ANR	2476270	Callee	eli . Initialize		2476152	0					
ANR	2476271	MemberAccess	eli . Initialize		2476152	0					
ANR	2476272	Identifier	eli		2476152	0					
ANR	2476273	Identifier	Initialize		2476152	1					
ANR	2476274	ArgumentList	el		2476152	1					
ANR	2476275	Argument	el		2476152	0					
ANR	2476276	Identifier	el		2476152	0					
ANR	2476277	Condition	! eli . IsAfterLast ( )	73:32:1996:2014	2476152	1	True				
ANR	2476278	UnaryOperationExpression	! eli . IsAfterLast ( )		2476152	0					
ANR	2476279	UnaryOperator	!		2476152	0					
ANR	2476280	CallExpression	eli . IsAfterLast ( )		2476152	1					
ANR	2476281	Callee	eli . IsAfterLast		2476152	0					
ANR	2476282	MemberAccess	eli . IsAfterLast		2476152	0					
ANR	2476283	Identifier	eli		2476152	0					
ANR	2476284	Identifier	IsAfterLast		2476152	1					
ANR	2476285	ArgumentList			2476152	1					
ANR	2476286	CallExpression	eli . NextExpr ( )	73:53:2017:2031	2476152	2	True				
ANR	2476287	Callee	eli . NextExpr		2476152	0					
ANR	2476288	MemberAccess	eli . NextExpr		2476152	0					
ANR	2476289	Identifier	eli		2476152	0					
ANR	2476290	Identifier	NextExpr		2476152	1					
ANR	2476291	ArgumentList			2476152	1					
ANR	2476292	CompoundStatement		30:71:927:927	2476152	3					
ANR	2476293	IfStatement	if ( ! ( expr = eli . CurrentExpr ( ) ) || expr -> GetKind ( ) != classad :: ExprTree :: CLASSAD_NODE )		2476152	0					
ANR	2476294	Condition	! ( expr = eli . CurrentExpr ( ) ) || expr -> GetKind ( ) != classad :: ExprTree :: CLASSAD_NODE	74:11:2048:2122	2476152	0	True				
ANR	2476295	OrExpression	! ( expr = eli . CurrentExpr ( ) ) || expr -> GetKind ( ) != classad :: ExprTree :: CLASSAD_NODE		2476152	0		||			
ANR	2476296	UnaryOperationExpression	! ( expr = eli . CurrentExpr ( ) )		2476152	0					
ANR	2476297	UnaryOperator	!		2476152	0					
ANR	2476298	AssignmentExpression	expr = eli . CurrentExpr ( )		2476152	1		=			
ANR	2476299	Identifier	expr		2476152	0					
ANR	2476300	CallExpression	eli . CurrentExpr ( )		2476152	1					
ANR	2476301	Callee	eli . CurrentExpr		2476152	0					
ANR	2476302	MemberAccess	eli . CurrentExpr		2476152	0					
ANR	2476303	Identifier	eli		2476152	0					
ANR	2476304	Identifier	CurrentExpr		2476152	1					
ANR	2476305	ArgumentList			2476152	1					
ANR	2476306	EqualityExpression	expr -> GetKind ( ) != classad :: ExprTree :: CLASSAD_NODE		2476152	1		!=			
ANR	2476307	CallExpression	expr -> GetKind ( )		2476152	0					
ANR	2476308	Callee	expr -> GetKind		2476152	0					
ANR	2476309	PtrMemberAccess	expr -> GetKind		2476152	0					
ANR	2476310	Identifier	expr		2476152	0					
ANR	2476311	Identifier	GetKind		2476152	1					
ANR	2476312	ArgumentList			2476152	1					
ANR	2476313	Identifier	classad :: ExprTree :: CLASSAD_NODE		2476152	1					
ANR	2476314	CompoundStatement		31:87:1016:1016	2476152	1					
ANR	2476315	ExpressionStatement	"printf ( ""Port is not a classad\\n"" )"	75:12:2138:2173	2476152	0	True				
ANR	2476316	CallExpression	"printf ( ""Port is not a classad\\n"" )"		2476152	0					
ANR	2476317	Callee	printf		2476152	0					
ANR	2476318	Identifier	printf		2476152	0					
ANR	2476319	ArgumentList	"""Port is not a classad\\n"""		2476152	1					
ANR	2476320	Argument	"""Port is not a classad\\n"""		2476152	0					
ANR	2476321	PrimaryExpression	"""Port is not a classad\\n"""		2476152	0					
ANR	2476322	Statement	delete	76:12:2187:2192	2476152	1	True				
ANR	2476323	ExpressionStatement	gmr	76:19:2194:2197	2476152	2	True				
ANR	2476324	Identifier	gmr		2476152	0					
ANR	2476325	ReturnStatement	return ( NULL ) ;	77:12:2211:2225	2476152	3	True				
ANR	2476326	Identifier	NULL		2476152	0					
ANR	2476327	ExpressionStatement	portAd = ( classad :: ClassAd * ) expr	79:8:2245:2277	2476152	1	True				
ANR	2476328	AssignmentExpression	portAd = ( classad :: ClassAd * ) expr		2476152	0		=			
ANR	2476329	Identifier	portAd		2476152	0					
ANR	2476330	CastExpression	( classad :: ClassAd * ) expr		2476152	1					
ANR	2476331	CastTarget	classad :: ClassAd *		2476152	0					
ANR	2476332	Identifier	expr		2476152	1					
ANR	2476333	ExpressionStatement	port . portAd = portAd	81:8:2288:2308	2476152	2	True				
ANR	2476334	AssignmentExpression	port . portAd = portAd		2476152	0		=			
ANR	2476335	MemberAccess	port . portAd		2476152	0					
ANR	2476336	Identifier	port		2476152	0					
ANR	2476337	Identifier	portAd		2476152	1					
ANR	2476338	Identifier	portAd		2476152	1					
ANR	2476339	IfStatement	"if ( ! portAd -> EvaluateAttrString ( ""label"" , port . label ) )"		2476152	3					
ANR	2476340	Condition	"! portAd -> EvaluateAttrString ( ""label"" , port . label )"	82:12:2322:2371	2476152	0	True				
ANR	2476341	UnaryOperationExpression	"! portAd -> EvaluateAttrString ( ""label"" , port . label )"		2476152	0					
ANR	2476342	UnaryOperator	!		2476152	0					
ANR	2476343	CallExpression	"portAd -> EvaluateAttrString ( ""label"" , port . label )"		2476152	1					
ANR	2476344	Callee	portAd -> EvaluateAttrString		2476152	0					
ANR	2476345	PtrMemberAccess	portAd -> EvaluateAttrString		2476152	0					
ANR	2476346	Identifier	portAd		2476152	0					
ANR	2476347	Identifier	EvaluateAttrString		2476152	1					
ANR	2476348	ArgumentList	"""label"""		2476152	1					
ANR	2476349	Argument	"""label"""		2476152	0					
ANR	2476350	PrimaryExpression	"""label"""		2476152	0					
ANR	2476351	Argument	port . label		2476152	1					
ANR	2476352	MemberAccess	port . label		2476152	0					
ANR	2476353	Identifier	port		2476152	0					
ANR	2476354	Identifier	label		2476152	1					
ANR	2476355	CompoundStatement		39:65:1267:1267	2476152	1					
ANR	2476356	ExpressionStatement	"printf ( ""Bad or missing port label\\n"" )"	83:12:2389:2428	2476152	0	True				
ANR	2476357	CallExpression	"printf ( ""Bad or missing port label\\n"" )"		2476152	0					
ANR	2476358	Callee	printf		2476152	0					
ANR	2476359	Identifier	printf		2476152	0					
ANR	2476360	ArgumentList	"""Bad or missing port label\\n"""		2476152	1					
ANR	2476361	Argument	"""Bad or missing port label\\n"""		2476152	0					
ANR	2476362	PrimaryExpression	"""Bad or missing port label\\n"""		2476152	0					
ANR	2476363	Statement	delete	84:12:2442:2447	2476152	1	True				
ANR	2476364	ExpressionStatement	gmr	84:19:2449:2452	2476152	2	True				
ANR	2476365	Identifier	gmr		2476152	0					
ANR	2476366	ReturnStatement	return ( NULL ) ;	85:12:2466:2480	2476152	3	True				
ANR	2476367	Identifier	NULL		2476152	0					
ANR	2476368	ForStatement	for ( portItr = gmr -> ports . begin ( ) ; portItr != gmr -> ports . end ( ) ; portItr ++ )		2476152	4					
ANR	2476369	ForInit	portItr = gmr -> ports . begin ( ) ;	89:13:2566:2592	2476152	0	True				
ANR	2476370	AssignmentExpression	portItr = gmr -> ports . begin ( )		2476152	0		=			
ANR	2476371	Identifier	portItr		2476152	0					
ANR	2476372	CallExpression	gmr -> ports . begin ( )		2476152	1					
ANR	2476373	Callee	gmr -> ports . begin		2476152	0					
ANR	2476374	MemberAccess	gmr -> ports . begin		2476152	0					
ANR	2476375	PtrMemberAccess	gmr -> ports		2476152	0					
ANR	2476376	Identifier	gmr		2476152	0					
ANR	2476377	Identifier	ports		2476152	1					
ANR	2476378	Identifier	begin		2476152	1					
ANR	2476379	ArgumentList			2476152	1					
ANR	2476380	Condition	portItr != gmr -> ports . end ( )	89:41:2594:2618	2476152	1	True				
ANR	2476381	EqualityExpression	portItr != gmr -> ports . end ( )		2476152	0		!=			
ANR	2476382	Identifier	portItr		2476152	0					
ANR	2476383	CallExpression	gmr -> ports . end ( )		2476152	1					
ANR	2476384	Callee	gmr -> ports . end		2476152	0					
ANR	2476385	MemberAccess	gmr -> ports . end		2476152	0					
ANR	2476386	PtrMemberAccess	gmr -> ports		2476152	0					
ANR	2476387	Identifier	gmr		2476152	0					
ANR	2476388	Identifier	ports		2476152	1					
ANR	2476389	Identifier	end		2476152	1					
ANR	2476390	ArgumentList			2476152	1					
ANR	2476391	PostIncDecOperationExpression	portItr ++	89:68:2621:2629	2476152	2	True				
ANR	2476392	Identifier	portItr		2476152	0					
ANR	2476393	IncDec	++		2476152	1					
ANR	2476394	CompoundStatement		46:79:1524:1524	2476152	3					
ANR	2476395	IfStatement	"if ( strcasecmp ( portItr -> label . c_str ( ) , port . label . c_str ( ) ) == 0 )"		2476152	0					
ANR	2476396	Condition	"strcasecmp ( portItr -> label . c_str ( ) , port . label . c_str ( ) ) == 0"	90:16:2650:2710	2476152	0	True				
ANR	2476397	EqualityExpression	"strcasecmp ( portItr -> label . c_str ( ) , port . label . c_str ( ) ) == 0"		2476152	0		==			
ANR	2476398	CallExpression	"strcasecmp ( portItr -> label . c_str ( ) , port . label . c_str ( ) )"		2476152	0					
ANR	2476399	Callee	strcasecmp		2476152	0					
ANR	2476400	Identifier	strcasecmp		2476152	0					
ANR	2476401	ArgumentList	portItr -> label . c_str ( )		2476152	1					
ANR	2476402	Argument	portItr -> label . c_str ( )		2476152	0					
ANR	2476403	CallExpression	portItr -> label . c_str ( )		2476152	0					
ANR	2476404	Callee	portItr -> label . c_str		2476152	0					
ANR	2476405	MemberAccess	portItr -> label . c_str		2476152	0					
ANR	2476406	PtrMemberAccess	portItr -> label		2476152	0					
ANR	2476407	Identifier	portItr		2476152	0					
ANR	2476408	Identifier	label		2476152	1					
ANR	2476409	Identifier	c_str		2476152	1					
ANR	2476410	ArgumentList			2476152	1					
ANR	2476411	Argument	port . label . c_str ( )		2476152	1					
ANR	2476412	CallExpression	port . label . c_str ( )		2476152	0					
ANR	2476413	Callee	port . label . c_str		2476152	0					
ANR	2476414	MemberAccess	port . label . c_str		2476152	0					
ANR	2476415	MemberAccess	port . label		2476152	0					
ANR	2476416	Identifier	port		2476152	0					
ANR	2476417	Identifier	label		2476152	1					
ANR	2476418	Identifier	c_str		2476152	1					
ANR	2476419	ArgumentList			2476152	1					
ANR	2476420	PrimaryExpression	0		2476152	1					
ANR	2476421	CompoundStatement		47:79:1605:1605	2476152	1					
ANR	2476422	ExpressionStatement	"printf ( ""Port %s already declared\\n"" , port . label . c_str ( ) )"	91:16:2731:2790	2476152	0	True				
ANR	2476423	CallExpression	"printf ( ""Port %s already declared\\n"" , port . label . c_str ( ) )"		2476152	0					
ANR	2476424	Callee	printf		2476152	0					
ANR	2476425	Identifier	printf		2476152	0					
ANR	2476426	ArgumentList	"""Port %s already declared\\n"""		2476152	1					
ANR	2476427	Argument	"""Port %s already declared\\n"""		2476152	0					
ANR	2476428	PrimaryExpression	"""Port %s already declared\\n"""		2476152	0					
ANR	2476429	Argument	port . label . c_str ( )		2476152	1					
ANR	2476430	CallExpression	port . label . c_str ( )		2476152	0					
ANR	2476431	Callee	port . label . c_str		2476152	0					
ANR	2476432	MemberAccess	port . label . c_str		2476152	0					
ANR	2476433	MemberAccess	port . label		2476152	0					
ANR	2476434	Identifier	port		2476152	0					
ANR	2476435	Identifier	label		2476152	1					
ANR	2476436	Identifier	c_str		2476152	1					
ANR	2476437	ArgumentList			2476152	1					
ANR	2476438	Statement	delete	92:16:2808:2813	2476152	1	True				
ANR	2476439	ExpressionStatement	gmr	92:23:2815:2818	2476152	2	True				
ANR	2476440	Identifier	gmr		2476152	0					
ANR	2476441	ReturnStatement	return ( NULL ) ;	93:16:2836:2850	2476152	3	True				
ANR	2476442	Identifier	NULL		2476152	0					
ANR	2476443	ExpressionStatement	citr . Initialize ( * portAd )	99:8:2954:2980	2476152	5	True				
ANR	2476444	CallExpression	citr . Initialize ( * portAd )		2476152	0					
ANR	2476445	Callee	citr . Initialize		2476152	0					
ANR	2476446	MemberAccess	citr . Initialize		2476152	0					
ANR	2476447	Identifier	citr		2476152	0					
ANR	2476448	Identifier	Initialize		2476152	1					
ANR	2476449	ArgumentList	* portAd		2476152	1					
ANR	2476450	Argument	* portAd		2476152	0					
ANR	2476451	UnaryOperationExpression	* portAd		2476152	0					
ANR	2476452	UnaryOperator	*		2476152	0					
ANR	2476453	Identifier	portAd		2476152	1					
ANR	2476454	ForStatement	"for ( ; ! citr . IsAfterLast ( ) ; citr . NextAttribute ( attr , expr ) )"		2476152	6					
ANR	2476455	Condition	! citr . IsAfterLast ( )	100:15:2997:3016	2476152	0	True				
ANR	2476456	UnaryOperationExpression	! citr . IsAfterLast ( )		2476152	0					
ANR	2476457	UnaryOperator	!		2476152	0					
ANR	2476458	CallExpression	citr . IsAfterLast ( )		2476152	1					
ANR	2476459	Callee	citr . IsAfterLast		2476152	0					
ANR	2476460	MemberAccess	citr . IsAfterLast		2476152	0					
ANR	2476461	Identifier	citr		2476152	0					
ANR	2476462	Identifier	IsAfterLast		2476152	1					
ANR	2476463	ArgumentList			2476152	1					
ANR	2476464	CallExpression	"citr . NextAttribute ( attr , expr )"	100:38:3020:3051	2476152	1	True				
ANR	2476465	Callee	citr . NextAttribute		2476152	0					
ANR	2476466	MemberAccess	citr . NextAttribute		2476152	0					
ANR	2476467	Identifier	citr		2476152	0					
ANR	2476468	Identifier	NextAttribute		2476152	1					
ANR	2476469	ArgumentList	attr		2476152	1					
ANR	2476470	Argument	attr		2476152	0					
ANR	2476471	Identifier	attr		2476152	0					
ANR	2476472	Argument	expr		2476152	1					
ANR	2476473	Identifier	expr		2476152	0					
ANR	2476474	CompoundStatement		57:73:1947:1947	2476152	2					
ANR	2476475	ExpressionStatement	"citr . CurrentAttribute ( attr , expr )"	101:12:3069:3104	2476152	0	True				
ANR	2476476	CallExpression	"citr . CurrentAttribute ( attr , expr )"		2476152	0					
ANR	2476477	Callee	citr . CurrentAttribute		2476152	0					
ANR	2476478	MemberAccess	citr . CurrentAttribute		2476152	0					
ANR	2476479	Identifier	citr		2476152	0					
ANR	2476480	Identifier	CurrentAttribute		2476152	1					
ANR	2476481	ArgumentList	attr		2476152	1					
ANR	2476482	Argument	attr		2476152	0					
ANR	2476483	Identifier	attr		2476152	0					
ANR	2476484	Argument	expr		2476152	1					
ANR	2476485	Identifier	expr		2476152	0					
ANR	2476486	IfStatement	"if ( ! ad -> GetExternalReferences ( expr , port . dependencies , false ) )"		2476152	1					
ANR	2476487	Condition	"! ad -> GetExternalReferences ( expr , port . dependencies , false )"	102:16:3122:3181	2476152	0	True				
ANR	2476488	UnaryOperationExpression	"! ad -> GetExternalReferences ( expr , port . dependencies , false )"		2476152	0					
ANR	2476489	UnaryOperator	!		2476152	0					
ANR	2476490	CallExpression	"ad -> GetExternalReferences ( expr , port . dependencies , false )"		2476152	1					
ANR	2476491	Callee	ad -> GetExternalReferences		2476152	0					
ANR	2476492	PtrMemberAccess	ad -> GetExternalReferences		2476152	0					
ANR	2476493	Identifier	ad		2476152	0					
ANR	2476494	Identifier	GetExternalReferences		2476152	1					
ANR	2476495	ArgumentList	expr		2476152	1					
ANR	2476496	Argument	expr		2476152	0					
ANR	2476497	Identifier	expr		2476152	0					
ANR	2476498	Argument	port . dependencies		2476152	1					
ANR	2476499	MemberAccess	port . dependencies		2476152	0					
ANR	2476500	Identifier	port		2476152	0					
ANR	2476501	Identifier	dependencies		2476152	1					
ANR	2476502	Argument	false		2476152	2					
ANR	2476503	Identifier	false		2476152	0					
ANR	2476504	CompoundStatement		59:78:2076:2076	2476152	1					
ANR	2476505	ExpressionStatement	"printf ( ""Failed to get external refs for %s in port %s\\n"" , attr . c_str ( ) , port . label . c_str ( ) )"	103:16:3202:3317	2476152	0	True				
ANR	2476506	CallExpression	"printf ( ""Failed to get external refs for %s in port %s\\n"" , attr . c_str ( ) , port . label . c_str ( ) )"		2476152	0					
ANR	2476507	Callee	printf		2476152	0					
ANR	2476508	Identifier	printf		2476152	0					
ANR	2476509	ArgumentList	"""Failed to get external refs for %s in port %s\\n"""		2476152	1					
ANR	2476510	Argument	"""Failed to get external refs for %s in port %s\\n"""		2476152	0					
ANR	2476511	PrimaryExpression	"""Failed to get external refs for %s in port %s\\n"""		2476152	0					
ANR	2476512	Argument	attr . c_str ( )		2476152	1					
ANR	2476513	CallExpression	attr . c_str ( )		2476152	0					
ANR	2476514	Callee	attr . c_str		2476152	0					
ANR	2476515	MemberAccess	attr . c_str		2476152	0					
ANR	2476516	Identifier	attr		2476152	0					
ANR	2476517	Identifier	c_str		2476152	1					
ANR	2476518	ArgumentList			2476152	1					
ANR	2476519	Argument	port . label . c_str ( )		2476152	2					
ANR	2476520	CallExpression	port . label . c_str ( )		2476152	0					
ANR	2476521	Callee	port . label . c_str		2476152	0					
ANR	2476522	MemberAccess	port . label . c_str		2476152	0					
ANR	2476523	MemberAccess	port . label		2476152	0					
ANR	2476524	Identifier	port		2476152	0					
ANR	2476525	Identifier	label		2476152	1					
ANR	2476526	Identifier	c_str		2476152	1					
ANR	2476527	ArgumentList			2476152	1					
ANR	2476528	Statement	delete	105:16:3335:3340	2476152	1	True				
ANR	2476529	ExpressionStatement	gmr	105:23:3342:3345	2476152	2	True				
ANR	2476530	Identifier	gmr		2476152	0					
ANR	2476531	ReturnStatement	return ( NULL ) ;	106:16:3363:3377	2476152	3	True				
ANR	2476532	Identifier	NULL		2476152	0					
ANR	2476533	ForStatement	for ( dit = port . dependencies . begin ( ) ; dit != port . dependencies . end ( ) ; dit ++ )		2476152	7					
ANR	2476534	ForInit	dit = port . dependencies . begin ( ) ;	111:12:3480:3509	2476152	0	True				
ANR	2476535	AssignmentExpression	dit = port . dependencies . begin ( )		2476152	0		=			
ANR	2476536	Identifier	dit		2476152	0					
ANR	2476537	CallExpression	port . dependencies . begin ( )		2476152	1					
ANR	2476538	Callee	port . dependencies . begin		2476152	0					
ANR	2476539	MemberAccess	port . dependencies . begin		2476152	0					
ANR	2476540	MemberAccess	port . dependencies		2476152	0					
ANR	2476541	Identifier	port		2476152	0					
ANR	2476542	Identifier	dependencies		2476152	1					
ANR	2476543	Identifier	begin		2476152	1					
ANR	2476544	ArgumentList			2476152	1					
ANR	2476545	Condition	dit != port . dependencies . end ( )	111:42:3510:3537	2476152	1	True				
ANR	2476546	EqualityExpression	dit != port . dependencies . end ( )		2476152	0		!=			
ANR	2476547	Identifier	dit		2476152	0					
ANR	2476548	CallExpression	port . dependencies . end ( )		2476152	1					
ANR	2476549	Callee	port . dependencies . end		2476152	0					
ANR	2476550	MemberAccess	port . dependencies . end		2476152	0					
ANR	2476551	MemberAccess	port . dependencies		2476152	0					
ANR	2476552	Identifier	port		2476152	0					
ANR	2476553	Identifier	dependencies		2476152	1					
ANR	2476554	Identifier	end		2476152	1					
ANR	2476555	ArgumentList			2476152	1					
ANR	2476556	PostIncDecOperationExpression	dit ++	111:71:3539:3543	2476152	2	True				
ANR	2476557	Identifier	dit		2476152	0					
ANR	2476558	IncDec	++		2476152	1					
ANR	2476559	CompoundStatement		68:78:2438:2438	2476152	3					
ANR	2476560	IfStatement	"if ( strcasecmp ( dit -> c_str ( ) , port . label . c_str ( ) ) == 0 )"		2476152	0					
ANR	2476561	Condition	"strcasecmp ( dit -> c_str ( ) , port . label . c_str ( ) ) == 0"	113:16:3603:3655	2476152	0	True				
ANR	2476562	EqualityExpression	"strcasecmp ( dit -> c_str ( ) , port . label . c_str ( ) ) == 0"		2476152	0		==			
ANR	2476563	CallExpression	"strcasecmp ( dit -> c_str ( ) , port . label . c_str ( ) )"		2476152	0					
ANR	2476564	Callee	strcasecmp		2476152	0					
ANR	2476565	Identifier	strcasecmp		2476152	0					
ANR	2476566	ArgumentList	dit -> c_str ( )		2476152	1					
ANR	2476567	Argument	dit -> c_str ( )		2476152	0					
ANR	2476568	CallExpression	dit -> c_str ( )		2476152	0					
ANR	2476569	Callee	dit -> c_str		2476152	0					
ANR	2476570	PtrMemberAccess	dit -> c_str		2476152	0					
ANR	2476571	Identifier	dit		2476152	0					
ANR	2476572	Identifier	c_str		2476152	1					
ANR	2476573	ArgumentList			2476152	1					
ANR	2476574	Argument	port . label . c_str ( )		2476152	1					
ANR	2476575	CallExpression	port . label . c_str ( )		2476152	0					
ANR	2476576	Callee	port . label . c_str		2476152	0					
ANR	2476577	MemberAccess	port . label . c_str		2476152	0					
ANR	2476578	MemberAccess	port . label		2476152	0					
ANR	2476579	Identifier	port		2476152	0					
ANR	2476580	Identifier	label		2476152	1					
ANR	2476581	Identifier	c_str		2476152	1					
ANR	2476582	ArgumentList			2476152	1					
ANR	2476583	PrimaryExpression	0		2476152	1					
ANR	2476584	CompoundStatement		70:72:2551:2551	2476152	1					
ANR	2476585	ContinueStatement	continue ;	114:16:3677:3685	2476152	0	True				
ANR	2476586	ForStatement	for ( portItr = gmr -> ports . begin ( ) ; portItr != gmr -> ports . end ( ) ; portItr ++ )		2476152	1					
ANR	2476587	ForInit	portItr = gmr -> ports . begin ( ) ;	117:16:3776:3802	2476152	0	True				
ANR	2476588	AssignmentExpression	portItr = gmr -> ports . begin ( )		2476152	0		=			
ANR	2476589	Identifier	portItr		2476152	0					
ANR	2476590	CallExpression	gmr -> ports . begin ( )		2476152	1					
ANR	2476591	Callee	gmr -> ports . begin		2476152	0					
ANR	2476592	MemberAccess	gmr -> ports . begin		2476152	0					
ANR	2476593	PtrMemberAccess	gmr -> ports		2476152	0					
ANR	2476594	Identifier	gmr		2476152	0					
ANR	2476595	Identifier	ports		2476152	1					
ANR	2476596	Identifier	begin		2476152	1					
ANR	2476597	ArgumentList			2476152	1					
ANR	2476598	Condition	portItr != gmr -> ports . end ( )	117:43:3803:3827	2476152	1	True				
ANR	2476599	EqualityExpression	portItr != gmr -> ports . end ( )		2476152	0		!=			
ANR	2476600	Identifier	portItr		2476152	0					
ANR	2476601	CallExpression	gmr -> ports . end ( )		2476152	1					
ANR	2476602	Callee	gmr -> ports . end		2476152	0					
ANR	2476603	MemberAccess	gmr -> ports . end		2476152	0					
ANR	2476604	PtrMemberAccess	gmr -> ports		2476152	0					
ANR	2476605	Identifier	gmr		2476152	0					
ANR	2476606	Identifier	ports		2476152	1					
ANR	2476607	Identifier	end		2476152	1					
ANR	2476608	ArgumentList			2476152	1					
ANR	2476609	PostIncDecOperationExpression	portItr ++	117:69:3829:3837	2476152	2	True				
ANR	2476610	Identifier	portItr		2476152	0					
ANR	2476611	IncDec	++		2476152	1					
ANR	2476612	CompoundStatement		74:79:2731:2731	2476152	3					
ANR	2476613	IfStatement	"if ( strcasecmp ( dit -> c_str ( ) , portItr -> label . c_str ( ) ) == 0 )"		2476152	0					
ANR	2476614	Condition	"strcasecmp ( dit -> c_str ( ) , portItr -> label . c_str ( ) ) == 0"	118:20:3861:3915	2476152	0	True				
ANR	2476615	EqualityExpression	"strcasecmp ( dit -> c_str ( ) , portItr -> label . c_str ( ) ) == 0"		2476152	0		==			
ANR	2476616	CallExpression	"strcasecmp ( dit -> c_str ( ) , portItr -> label . c_str ( ) )"		2476152	0					
ANR	2476617	Callee	strcasecmp		2476152	0					
ANR	2476618	Identifier	strcasecmp		2476152	0					
ANR	2476619	ArgumentList	dit -> c_str ( )		2476152	1					
ANR	2476620	Argument	dit -> c_str ( )		2476152	0					
ANR	2476621	CallExpression	dit -> c_str ( )		2476152	0					
ANR	2476622	Callee	dit -> c_str		2476152	0					
ANR	2476623	PtrMemberAccess	dit -> c_str		2476152	0					
ANR	2476624	Identifier	dit		2476152	0					
ANR	2476625	Identifier	c_str		2476152	1					
ANR	2476626	ArgumentList			2476152	1					
ANR	2476627	Argument	portItr -> label . c_str ( )		2476152	1					
ANR	2476628	CallExpression	portItr -> label . c_str ( )		2476152	0					
ANR	2476629	Callee	portItr -> label . c_str		2476152	0					
ANR	2476630	MemberAccess	portItr -> label . c_str		2476152	0					
ANR	2476631	PtrMemberAccess	portItr -> label		2476152	0					
ANR	2476632	Identifier	portItr		2476152	0					
ANR	2476633	Identifier	label		2476152	1					
ANR	2476634	Identifier	c_str		2476152	1					
ANR	2476635	ArgumentList			2476152	1					
ANR	2476636	PrimaryExpression	0		2476152	1					
ANR	2476637	CompoundStatement		75:78:2811:2811	2476152	1					
ANR	2476638	BreakStatement	break ;	119:20:3941:3946	2476152	0	True				
ANR	2476639	IfStatement	if ( portItr == gmr -> ports . end ( ) )		2476152	2					
ANR	2476640	Condition	portItr == gmr -> ports . end ( )	122:16:3996:4023	2476152	0	True				
ANR	2476641	EqualityExpression	portItr == gmr -> ports . end ( )		2476152	0		==			
ANR	2476642	Identifier	portItr		2476152	0					
ANR	2476643	CallExpression	gmr -> ports . end ( )		2476152	1					
ANR	2476644	Callee	gmr -> ports . end		2476152	0					
ANR	2476645	MemberAccess	gmr -> ports . end		2476152	0					
ANR	2476646	PtrMemberAccess	gmr -> ports		2476152	0					
ANR	2476647	Identifier	gmr		2476152	0					
ANR	2476648	Identifier	ports		2476152	1					
ANR	2476649	Identifier	end		2476152	1					
ANR	2476650	ArgumentList			2476152	1					
ANR	2476651	CompoundStatement		79:47:2919:2919	2476152	1					
ANR	2476652	ExpressionStatement	"printf ( ""Illegal reference/dependency %s in port %s\\n"" , dit -> c_str ( ) , port . label . c_str ( ) )"	123:16:4045:4157	2476152	0	True				
ANR	2476653	CallExpression	"printf ( ""Illegal reference/dependency %s in port %s\\n"" , dit -> c_str ( ) , port . label . c_str ( ) )"		2476152	0					
ANR	2476654	Callee	printf		2476152	0					
ANR	2476655	Identifier	printf		2476152	0					
ANR	2476656	ArgumentList	"""Illegal reference/dependency %s in port %s\\n"""		2476152	1					
ANR	2476657	Argument	"""Illegal reference/dependency %s in port %s\\n"""		2476152	0					
ANR	2476658	PrimaryExpression	"""Illegal reference/dependency %s in port %s\\n"""		2476152	0					
ANR	2476659	Argument	dit -> c_str ( )		2476152	1					
ANR	2476660	CallExpression	dit -> c_str ( )		2476152	0					
ANR	2476661	Callee	dit -> c_str		2476152	0					
ANR	2476662	PtrMemberAccess	dit -> c_str		2476152	0					
ANR	2476663	Identifier	dit		2476152	0					
ANR	2476664	Identifier	c_str		2476152	1					
ANR	2476665	ArgumentList			2476152	1					
ANR	2476666	Argument	port . label . c_str ( )		2476152	2					
ANR	2476667	CallExpression	port . label . c_str ( )		2476152	0					
ANR	2476668	Callee	port . label . c_str		2476152	0					
ANR	2476669	MemberAccess	port . label . c_str		2476152	0					
ANR	2476670	MemberAccess	port . label		2476152	0					
ANR	2476671	Identifier	port		2476152	0					
ANR	2476672	Identifier	label		2476152	1					
ANR	2476673	Identifier	c_str		2476152	1					
ANR	2476674	ArgumentList			2476152	1					
ANR	2476675	Statement	delete	125:16:4175:4180	2476152	1	True				
ANR	2476676	ExpressionStatement	gmr	125:23:4182:4185	2476152	2	True				
ANR	2476677	Identifier	gmr		2476152	0					
ANR	2476678	ReturnStatement	return ( NULL ) ;	126:16:4203:4217	2476152	3	True				
ANR	2476679	Identifier	NULL		2476152	0					
ANR	2476680	ExpressionStatement	gmr -> ports . push_back ( port )	131:8:4293:4321	2476152	8	True				
ANR	2476681	CallExpression	gmr -> ports . push_back ( port )		2476152	0					
ANR	2476682	Callee	gmr -> ports . push_back		2476152	0					
ANR	2476683	MemberAccess	gmr -> ports . push_back		2476152	0					
ANR	2476684	PtrMemberAccess	gmr -> ports		2476152	0					
ANR	2476685	Identifier	gmr		2476152	0					
ANR	2476686	Identifier	ports		2476152	1					
ANR	2476687	Identifier	push_back		2476152	1					
ANR	2476688	ArgumentList	port		2476152	1					
ANR	2476689	Argument	port		2476152	0					
ANR	2476690	Identifier	port		2476152	0					
ANR	2476691	ExpressionStatement	gmr -> key = key	134:4:4334:4348	2476152	16	True				
ANR	2476692	AssignmentExpression	gmr -> key = key		2476152	0		=			
ANR	2476693	PtrMemberAccess	gmr -> key		2476152	0					
ANR	2476694	Identifier	gmr		2476152	0					
ANR	2476695	Identifier	key		2476152	1					
ANR	2476696	Identifier	key		2476152	1					
ANR	2476697	ReturnStatement	return ( gmr ) ;	136:4:4404:4417	2476152	17	True				
ANR	2476698	Identifier	gmr		2476152	0					
ANR	2476699	ReturnType	GMR *		2476152	1					
ANR	2476700	Identifier	GMR :: MakeGMR		2476152	2					
ANR	2476701	ParameterList	"int key , classad :: ClassAd * ad"		2476152	3					
ANR	2476702	Parameter	int key	43:14:1075:1081	2476152	0	True				
ANR	2476703	ParameterType	int		2476152	0					
ANR	2476704	Identifier	key		2476152	1					
ANR	2476705	Parameter	classad :: ClassAd * ad	43:23:1084:1103	2476152	1	True				
ANR	2476706	ParameterType	classad :: ClassAd *		2476152	0					
ANR	2476707	Identifier	ad		2476152	1					
ANR	2476708	CFGEntryNode	ENTRY		2476152		True				
ANR	2476709	CFGExitNode	EXIT		2476152		True				
ANR	2476710	Symbol	eli . CurrentExpr		2476152						
ANR	2476711	Symbol	port . portAd		2476152						
ANR	2476712	Symbol	ad -> GetExternalReferences		2476152						
ANR	2476713	Symbol	attr . c_str		2476152						
ANR	2476714	Symbol	gmr -> key		2476152						
ANR	2476715	Symbol	portItr		2476152						
ANR	2476716	Symbol	* dit		2476152						
ANR	2476717	Symbol	port . dependencies . end		2476152						
ANR	2476718	Symbol	gmr -> ports . begin		2476152						
ANR	2476719	Symbol	* gmr		2476152						
ANR	2476720	Symbol	citr		2476152						
ANR	2476721	Symbol	* ad		2476152						
ANR	2476722	Symbol	portItr -> label		2476152						
ANR	2476723	Symbol	gmr		2476152						
ANR	2476724	Symbol	dit		2476152						
ANR	2476725	Symbol	dit -> c_str		2476152						
ANR	2476726	Symbol	* portItr		2476152						
ANR	2476727	Symbol	eli . IsAfterLast		2476152						
ANR	2476728	Symbol	* portAd		2476152						
ANR	2476729	Symbol	portItr -> label . c_str		2476152						
ANR	2476730	Symbol	ad -> EvaluateAttr		2476152						
ANR	2476731	Symbol	port . dependencies . begin		2476152						
ANR	2476732	Symbol	expr		2476152						
ANR	2476733	Symbol	gmr -> ports		2476152						
ANR	2476734	Symbol	attr		2476152						
ANR	2476735	Symbol	val . IsListValue		2476152						
ANR	2476736	Symbol	gmr -> ports . end		2476152						
ANR	2476737	Symbol	port . label . c_str		2476152						
ANR	2476738	Symbol	strcasecmp		2476152						
ANR	2476739	Symbol	key		2476152						
ANR	2476740	Symbol	val		2476152						
ANR	2476741	Symbol	expr -> GetKind		2476152						
ANR	2476742	Symbol	port . dependencies		2476152						
ANR	2476743	Symbol	ad		2476152						
ANR	2476744	Symbol	eli		2476152						
ANR	2476745	Symbol	NULL		2476152						
ANR	2476746	Symbol	el		2476152						
ANR	2476747	Symbol	false		2476152						
ANR	2476748	Symbol	classad :: ExprTree :: CLASSAD_NODE		2476152						
ANR	2476749	Symbol	portAd -> EvaluateAttrString		2476152						
ANR	2476750	Symbol	gmr -> parentAd		2476152						
ANR	2476751	Symbol	portAd		2476152						
ANR	2476752	Symbol	port . label		2476152						
ANR	2476753	Symbol	port		2476152						
ANR	2476754	Symbol	* expr		2476152						
ANR	2476755	Symbol	citr . IsAfterLast		2476152						
ANR	2476756	Function	GMR :: GetExternalReferences	140:0:4423:5602							
ANR	2476757	FunctionDef	GMR :: GetExternalReferences (classad :: References & refs)		2476756	0					
ANR	2476758	CompoundStatement		142:0:4484:5602	2476756	0					
ANR	2476759	IdentifierDeclStatement	"classad :: ClassAd ctx , * pctx ;"	143:4:4490:4525	2476756	0	True				
ANR	2476760	IdentifierDecl	ctx		2476756	0					
ANR	2476761	IdentifierDeclType	classad :: ClassAd		2476756	0					
ANR	2476762	Identifier	ctx		2476756	1					
ANR	2476763	IdentifierDecl	* pctx		2476756	1					
ANR	2476764	IdentifierDeclType	classad :: ClassAd *		2476756	0					
ANR	2476765	Identifier	pctx		2476756	1					
ANR	2476766	IdentifierDeclStatement	classad :: PortReferences prefs ;	144:4:4531:4561	2476756	1	True				
ANR	2476767	IdentifierDecl	prefs		2476756	0					
ANR	2476768	IdentifierDeclType	classad :: PortReferences		2476756	0					
ANR	2476769	Identifier	prefs		2476756	1					
ANR	2476770	IdentifierDeclStatement	classad :: References tmp ;	145:4:4567:4595	2476756	2	True				
ANR	2476771	IdentifierDecl	tmp		2476756	0					
ANR	2476772	IdentifierDeclType	classad :: References		2476756	0					
ANR	2476773	Identifier	tmp		2476756	1					
ANR	2476774	IdentifierDeclStatement	Ports :: iterator itr ;	146:4:4601:4620	2476756	3	True				
ANR	2476775	IdentifierDecl	itr		2476756	0					
ANR	2476776	IdentifierDeclType	Ports :: iterator		2476756	0					
ANR	2476777	Identifier	itr		2476756	1					
ANR	2476778	IdentifierDeclStatement	classad :: ExprTree * tree ;	147:4:4626:4656	2476756	4	True				
ANR	2476779	IdentifierDecl	* tree		2476756	0					
ANR	2476780	IdentifierDeclType	classad :: ExprTree *		2476756	0					
ANR	2476781	Identifier	tree		2476756	1					
ANR	2476782	ExpressionStatement	"ctx . Insert ( ""_ad"" , parentAd )"	149:4:4663:4692	2476756	5	True				
ANR	2476783	CallExpression	"ctx . Insert ( ""_ad"" , parentAd )"		2476756	0					
ANR	2476784	Callee	ctx . Insert		2476756	0					
ANR	2476785	MemberAccess	ctx . Insert		2476756	0					
ANR	2476786	Identifier	ctx		2476756	0					
ANR	2476787	Identifier	Insert		2476756	1					
ANR	2476788	ArgumentList	"""_ad"""		2476756	1					
ANR	2476789	Argument	"""_ad"""		2476756	0					
ANR	2476790	PrimaryExpression	"""_ad"""		2476756	0					
ANR	2476791	Argument	parentAd		2476756	1					
ANR	2476792	Identifier	parentAd		2476756	0					
ANR	2476793	ForStatement	for ( itr = ports . begin ( ) ; itr != ports . end ( ) ; itr ++ )		2476756	6					
ANR	2476794	ForInit	itr = ports . begin ( ) ;	150:9:4703:4723	2476756	0	True				
ANR	2476795	AssignmentExpression	itr = ports . begin ( )		2476756	0		=			
ANR	2476796	Identifier	itr		2476756	0					
ANR	2476797	CallExpression	ports . begin ( )		2476756	1					
ANR	2476798	Callee	ports . begin		2476756	0					
ANR	2476799	MemberAccess	ports . begin		2476756	0					
ANR	2476800	Identifier	ports		2476756	0					
ANR	2476801	Identifier	begin		2476756	1					
ANR	2476802	ArgumentList			2476756	1					
ANR	2476803	Condition	itr != ports . end ( )	150:31:4725:4743	2476756	1	True				
ANR	2476804	EqualityExpression	itr != ports . end ( )		2476756	0		!=			
ANR	2476805	Identifier	itr		2476756	0					
ANR	2476806	CallExpression	ports . end ( )		2476756	1					
ANR	2476807	Callee	ports . end		2476756	0					
ANR	2476808	MemberAccess	ports . end		2476756	0					
ANR	2476809	Identifier	ports		2476756	0					
ANR	2476810	Identifier	end		2476756	1					
ANR	2476811	ArgumentList			2476756	1					
ANR	2476812	PostIncDecOperationExpression	itr ++	150:52:4746:4750	2476756	2	True				
ANR	2476813	Identifier	itr		2476756	0					
ANR	2476814	IncDec	++		2476756	1					
ANR	2476815	CompoundStatement		9:60:269:269	2476756	3					
ANR	2476816	ExpressionStatement	pctx = new classad :: ClassAd ( )	152:8:4837:4867	2476756	0	True				
ANR	2476817	AssignmentExpression	pctx = new classad :: ClassAd ( )		2476756	0		=			
ANR	2476818	Identifier	pctx		2476756	0					
ANR	2476819	UnaryExpression	new classad :: ClassAd ( )		2476756	1					
ANR	2476820	ExpressionStatement	"ctx . Insert ( itr -> label , pctx )"	153:8:4877:4907	2476756	1	True				
ANR	2476821	CallExpression	"ctx . Insert ( itr -> label , pctx )"		2476756	0					
ANR	2476822	Callee	ctx . Insert		2476756	0					
ANR	2476823	MemberAccess	ctx . Insert		2476756	0					
ANR	2476824	Identifier	ctx		2476756	0					
ANR	2476825	Identifier	Insert		2476756	1					
ANR	2476826	ArgumentList	itr -> label		2476756	1					
ANR	2476827	Argument	itr -> label		2476756	0					
ANR	2476828	PtrMemberAccess	itr -> label		2476756	0					
ANR	2476829	Identifier	itr		2476756	0					
ANR	2476830	Identifier	label		2476756	1					
ANR	2476831	Argument	pctx		2476756	1					
ANR	2476832	Identifier	pctx		2476756	0					
ANR	2476833	ExpressionStatement	prefs [ pctx ] = tmp	154:8:4917:4934	2476756	2	True				
ANR	2476834	AssignmentExpression	prefs [ pctx ] = tmp		2476756	0		=			
ANR	2476835	ArrayIndexing	prefs [ pctx ]		2476756	0					
ANR	2476836	Identifier	prefs		2476756	0					
ANR	2476837	Identifier	pctx		2476756	1					
ANR	2476838	Identifier	tmp		2476756	1					
ANR	2476839	IfStatement	"if ( ! ( tree = itr -> portAd -> Lookup ( ""Requirements"" ) ) )"		2476756	3					
ANR	2476840	Condition	"! ( tree = itr -> portAd -> Lookup ( ""Requirements"" ) )"	157:12:4997:5045	2476756	0	True				
ANR	2476841	UnaryOperationExpression	"! ( tree = itr -> portAd -> Lookup ( ""Requirements"" ) )"		2476756	0					
ANR	2476842	UnaryOperator	!		2476756	0					
ANR	2476843	AssignmentExpression	"tree = itr -> portAd -> Lookup ( ""Requirements"" )"		2476756	1		=			
ANR	2476844	Identifier	tree		2476756	0					
ANR	2476845	CallExpression	"itr -> portAd -> Lookup ( ""Requirements"" )"		2476756	1					
ANR	2476846	Callee	itr -> portAd -> Lookup		2476756	0					
ANR	2476847	PtrMemberAccess	itr -> portAd -> Lookup		2476756	0					
ANR	2476848	PtrMemberAccess	itr -> portAd		2476756	0					
ANR	2476849	Identifier	itr		2476756	0					
ANR	2476850	Identifier	portAd		2476756	1					
ANR	2476851	Identifier	Lookup		2476756	1					
ANR	2476852	ArgumentList	"""Requirements"""		2476756	1					
ANR	2476853	Argument	"""Requirements"""		2476756	0					
ANR	2476854	PrimaryExpression	"""Requirements"""		2476756	0					
ANR	2476855	ContinueStatement	continue ;	157:64:5049:5057	2476756	1	True				
ANR	2476856	IfStatement	"if ( ! ( itr -> portAd -> GetExternalReferences ( tree , prefs ) ) )"		2476756	4					
ANR	2476857	Condition	"! ( itr -> portAd -> GetExternalReferences ( tree , prefs ) )"	158:12:5071:5124	2476756	0	True				
ANR	2476858	UnaryOperationExpression	"! ( itr -> portAd -> GetExternalReferences ( tree , prefs ) )"		2476756	0					
ANR	2476859	UnaryOperator	!		2476756	0					
ANR	2476860	CallExpression	"itr -> portAd -> GetExternalReferences ( tree , prefs )"		2476756	1					
ANR	2476861	Callee	itr -> portAd -> GetExternalReferences		2476756	0					
ANR	2476862	PtrMemberAccess	itr -> portAd -> GetExternalReferences		2476756	0					
ANR	2476863	PtrMemberAccess	itr -> portAd		2476756	0					
ANR	2476864	Identifier	itr		2476756	0					
ANR	2476865	Identifier	portAd		2476756	1					
ANR	2476866	Identifier	GetExternalReferences		2476756	1					
ANR	2476867	ArgumentList	tree		2476756	1					
ANR	2476868	Argument	tree		2476756	0					
ANR	2476869	Identifier	tree		2476756	0					
ANR	2476870	Argument	prefs		2476756	1					
ANR	2476871	Identifier	prefs		2476756	0					
ANR	2476872	CompoundStatement		17:69:643:643	2476756	1					
ANR	2476873	ExpressionStatement	"ctx . Remove ( ""_ad"" )"	159:12:5142:5161	2476756	0	True				
ANR	2476874	CallExpression	"ctx . Remove ( ""_ad"" )"		2476756	0					
ANR	2476875	Callee	ctx . Remove		2476756	0					
ANR	2476876	MemberAccess	ctx . Remove		2476756	0					
ANR	2476877	Identifier	ctx		2476756	0					
ANR	2476878	Identifier	Remove		2476756	1					
ANR	2476879	ArgumentList	"""_ad"""		2476756	1					
ANR	2476880	Argument	"""_ad"""		2476756	0					
ANR	2476881	PrimaryExpression	"""_ad"""		2476756	0					
ANR	2476882	ReturnStatement	return ( false ) ;	160:12:5175:5190	2476756	1	True				
ANR	2476883	Identifier	false		2476756	0					
ANR	2476884	IdentifierDeclStatement	classad :: PortReferences :: iterator prItr ;	165:4:5267:5309	2476756	7	True				
ANR	2476885	IdentifierDecl	prItr		2476756	0					
ANR	2476886	IdentifierDeclType	classad :: PortReferences :: iterator		2476756	0					
ANR	2476887	Identifier	prItr		2476756	1					
ANR	2476888	IdentifierDeclStatement	classad :: References :: iterator rItr ;	166:4:5315:5356	2476756	8	True				
ANR	2476889	IdentifierDecl	rItr		2476756	0					
ANR	2476890	IdentifierDeclType	classad :: References :: iterator		2476756	0					
ANR	2476891	Identifier	rItr		2476756	1					
ANR	2476892	ForStatement	for ( prItr = prefs . begin ( ) ; prItr != prefs . end ( ) ; prItr ++ )		2476756	9					
ANR	2476893	ForInit	prItr = prefs . begin ( ) ;	167:9:5367:5389	2476756	0	True				
ANR	2476894	AssignmentExpression	prItr = prefs . begin ( )		2476756	0		=			
ANR	2476895	Identifier	prItr		2476756	0					
ANR	2476896	CallExpression	prefs . begin ( )		2476756	1					
ANR	2476897	Callee	prefs . begin		2476756	0					
ANR	2476898	MemberAccess	prefs . begin		2476756	0					
ANR	2476899	Identifier	prefs		2476756	0					
ANR	2476900	Identifier	begin		2476756	1					
ANR	2476901	ArgumentList			2476756	1					
ANR	2476902	Condition	prItr != prefs . end ( )	167:33:5391:5411	2476756	1	True				
ANR	2476903	EqualityExpression	prItr != prefs . end ( )		2476756	0		!=			
ANR	2476904	Identifier	prItr		2476756	0					
ANR	2476905	CallExpression	prefs . end ( )		2476756	1					
ANR	2476906	Callee	prefs . end		2476756	0					
ANR	2476907	MemberAccess	prefs . end		2476756	0					
ANR	2476908	Identifier	prefs		2476756	0					
ANR	2476909	Identifier	end		2476756	1					
ANR	2476910	ArgumentList			2476756	1					
ANR	2476911	PostIncDecOperationExpression	prItr ++	167:56:5414:5420	2476756	2	True				
ANR	2476912	Identifier	prItr		2476756	0					
ANR	2476913	IncDec	++		2476756	1					
ANR	2476914	CompoundStatement		26:66:939:939	2476756	3					
ANR	2476915	ForStatement	for ( rItr = prItr -> second . begin ( ) ; rItr != prItr -> second . end ( ) ; rItr ++ )		2476756	0					
ANR	2476916	ForInit	rItr = prItr -> second . begin ( ) ;	168:13:5439:5466	2476756	0	True				
ANR	2476917	AssignmentExpression	rItr = prItr -> second . begin ( )		2476756	0		=			
ANR	2476918	Identifier	rItr		2476756	0					
ANR	2476919	CallExpression	prItr -> second . begin ( )		2476756	1					
ANR	2476920	Callee	prItr -> second . begin		2476756	0					
ANR	2476921	MemberAccess	prItr -> second . begin		2476756	0					
ANR	2476922	PtrMemberAccess	prItr -> second		2476756	0					
ANR	2476923	Identifier	prItr		2476756	0					
ANR	2476924	Identifier	second		2476756	1					
ANR	2476925	Identifier	begin		2476756	1					
ANR	2476926	ArgumentList			2476756	1					
ANR	2476927	Condition	rItr != prItr -> second . end ( )	168:42:5468:5493	2476756	1	True				
ANR	2476928	EqualityExpression	rItr != prItr -> second . end ( )		2476756	0		!=			
ANR	2476929	Identifier	rItr		2476756	0					
ANR	2476930	CallExpression	prItr -> second . end ( )		2476756	1					
ANR	2476931	Callee	prItr -> second . end		2476756	0					
ANR	2476932	MemberAccess	prItr -> second . end		2476756	0					
ANR	2476933	PtrMemberAccess	prItr -> second		2476756	0					
ANR	2476934	Identifier	prItr		2476756	0					
ANR	2476935	Identifier	second		2476756	1					
ANR	2476936	Identifier	end		2476756	1					
ANR	2476937	ArgumentList			2476756	1					
ANR	2476938	PostIncDecOperationExpression	rItr ++	168:70:5496:5501	2476756	2	True				
ANR	2476939	Identifier	rItr		2476756	0					
ANR	2476940	IncDec	++		2476756	1					
ANR	2476941	CompoundStatement		27:78:1019:1019	2476756	3					
ANR	2476942	ExpressionStatement	refs . insert ( * rItr )	169:12:5518:5538	2476756	0	True				
ANR	2476943	CallExpression	refs . insert ( * rItr )		2476756	0					
ANR	2476944	Callee	refs . insert		2476756	0					
ANR	2476945	MemberAccess	refs . insert		2476756	0					
ANR	2476946	Identifier	refs		2476756	0					
ANR	2476947	Identifier	insert		2476756	1					
ANR	2476948	ArgumentList	* rItr		2476756	1					
ANR	2476949	Argument	* rItr		2476756	0					
ANR	2476950	UnaryOperationExpression	* rItr		2476756	0					
ANR	2476951	UnaryOperator	*		2476756	0					
ANR	2476952	Identifier	rItr		2476756	1					
ANR	2476953	ExpressionStatement	"ctx . Remove ( ""_ad"" )"	173:4:5561:5580	2476756	10	True				
ANR	2476954	CallExpression	"ctx . Remove ( ""_ad"" )"		2476756	0					
ANR	2476955	Callee	ctx . Remove		2476756	0					
ANR	2476956	MemberAccess	ctx . Remove		2476756	0					
ANR	2476957	Identifier	ctx		2476756	0					
ANR	2476958	Identifier	Remove		2476756	1					
ANR	2476959	ArgumentList	"""_ad"""		2476756	1					
ANR	2476960	Argument	"""_ad"""		2476756	0					
ANR	2476961	PrimaryExpression	"""_ad"""		2476756	0					
ANR	2476962	ReturnStatement	return ( true ) ;	174:4:5586:5600	2476756	11	True				
ANR	2476963	Identifier	true		2476756	0					
ANR	2476964	ReturnType	bool		2476756	1					
ANR	2476965	Identifier	GMR :: GetExternalReferences		2476756	2					
ANR	2476966	ParameterList	classad :: References & refs		2476756	3					
ANR	2476967	Parameter	classad :: References & refs	141:28:4456:4480	2476756	0	True				
ANR	2476968	ParameterType	classad :: References &		2476756	0					
ANR	2476969	Identifier	refs		2476756	1					
ANR	2476970	CFGEntryNode	ENTRY		2476756		True				
ANR	2476971	CFGExitNode	EXIT		2476756		True				
ANR	2476972	Symbol	pctx		2476756						
ANR	2476973	Symbol	ports . begin		2476756						
ANR	2476974	Symbol	prItr -> second . end		2476756						
ANR	2476975	Symbol	ports		2476756						
ANR	2476976	Symbol	itr -> label		2476756						
ANR	2476977	Symbol	* pctx		2476756						
ANR	2476978	Symbol	* prItr		2476756						
ANR	2476979	Symbol	itr -> portAd		2476756						
ANR	2476980	Symbol	ports . end		2476756						
ANR	2476981	Symbol	tmp		2476756						
ANR	2476982	Symbol	prItr		2476756						
ANR	2476983	Symbol	prefs . begin		2476756						
ANR	2476984	Symbol	prItr -> second		2476756						
ANR	2476985	Symbol	rItr		2476756						
ANR	2476986	Symbol	prefs . end		2476756						
ANR	2476987	Symbol	ctx		2476756						
ANR	2476988	Symbol	itr		2476756						
ANR	2476989	Symbol	parentAd		2476756						
ANR	2476990	Symbol	prItr -> second . begin		2476756						
ANR	2476991	Symbol	* itr -> portAd		2476756						
ANR	2476992	Symbol	tree		2476756						
ANR	2476993	Symbol	false		2476756						
ANR	2476994	Symbol	* rItr		2476756						
ANR	2476995	Symbol	* itr		2476756						
ANR	2476996	Symbol	prefs		2476756						
ANR	2476997	Symbol	refs		2476756						
ANR	2476998	Symbol	true		2476756						
ANR	2476999	Symbol	itr -> portAd -> Lookup		2476756						
ANR	2477000	Symbol	* prefs		2476756						
ANR	2477001	Symbol	* * itr		2476756						
ANR	2477002	Symbol	itr -> portAd -> GetExternalReferences		2476756						
ANR	2477003	Function	GMR :: Display	230:0:6816:7215							
ANR	2477004	FunctionDef	GMR :: Display (FILE * fp)		2477003	0					
ANR	2477005	CompoundStatement		232:0:6846:7215	2477003	0					
ANR	2477006	IdentifierDeclStatement	Ports :: iterator itr ;	233:4:6852:6879	2477003	0	True				
ANR	2477007	IdentifierDecl	itr		2477003	0					
ANR	2477008	IdentifierDeclType	Ports :: iterator		2477003	0					
ANR	2477009	Identifier	itr		2477003	1					
ANR	2477010	IdentifierDeclStatement	Dependencies :: iterator dit ;	234:4:6885:6912	2477003	1	True				
ANR	2477011	IdentifierDecl	dit		2477003	0					
ANR	2477012	IdentifierDeclType	Dependencies :: iterator		2477003	0					
ANR	2477013	Identifier	dit		2477003	1					
ANR	2477014	ForStatement	for ( itr = ports . begin ( ) ; itr != ports . end ( ) ; itr ++ )		2477003	2					
ANR	2477015	ForInit	itr = ports . begin ( ) ;	236:9:6924:6944	2477003	0	True				
ANR	2477016	AssignmentExpression	itr = ports . begin ( )		2477003	0		=			
ANR	2477017	Identifier	itr		2477003	0					
ANR	2477018	CallExpression	ports . begin ( )		2477003	1					
ANR	2477019	Callee	ports . begin		2477003	0					
ANR	2477020	MemberAccess	ports . begin		2477003	0					
ANR	2477021	Identifier	ports		2477003	0					
ANR	2477022	Identifier	begin		2477003	1					
ANR	2477023	ArgumentList			2477003	1					
ANR	2477024	Condition	itr != ports . end ( )	236:31:6946:6964	2477003	1	True				
ANR	2477025	EqualityExpression	itr != ports . end ( )		2477003	0		!=			
ANR	2477026	Identifier	itr		2477003	0					
ANR	2477027	CallExpression	ports . end ( )		2477003	1					
ANR	2477028	Callee	ports . end		2477003	0					
ANR	2477029	MemberAccess	ports . end		2477003	0					
ANR	2477030	Identifier	ports		2477003	0					
ANR	2477031	Identifier	end		2477003	1					
ANR	2477032	ArgumentList			2477003	1					
ANR	2477033	PostIncDecOperationExpression	itr ++	236:52:6967:6971	2477003	2	True				
ANR	2477034	Identifier	itr		2477003	0					
ANR	2477035	IncDec	++		2477003	1					
ANR	2477036	CompoundStatement		5:60:128:128	2477003	3					
ANR	2477037	ExpressionStatement	"fprintf ( fp , ""Port %s: Depends on "" , itr -> label . c_str ( ) )"	237:8:6985:7043	2477003	0	True				
ANR	2477038	CallExpression	"fprintf ( fp , ""Port %s: Depends on "" , itr -> label . c_str ( ) )"		2477003	0					
ANR	2477039	Callee	fprintf		2477003	0					
ANR	2477040	Identifier	fprintf		2477003	0					
ANR	2477041	ArgumentList	fp		2477003	1					
ANR	2477042	Argument	fp		2477003	0					
ANR	2477043	Identifier	fp		2477003	0					
ANR	2477044	Argument	"""Port %s: Depends on """		2477003	1					
ANR	2477045	PrimaryExpression	"""Port %s: Depends on """		2477003	0					
ANR	2477046	Argument	itr -> label . c_str ( )		2477003	2					
ANR	2477047	CallExpression	itr -> label . c_str ( )		2477003	0					
ANR	2477048	Callee	itr -> label . c_str		2477003	0					
ANR	2477049	MemberAccess	itr -> label . c_str		2477003	0					
ANR	2477050	PtrMemberAccess	itr -> label		2477003	0					
ANR	2477051	Identifier	itr		2477003	0					
ANR	2477052	Identifier	label		2477003	1					
ANR	2477053	Identifier	c_str		2477003	1					
ANR	2477054	ArgumentList			2477003	1					
ANR	2477055	ForStatement	for ( dit = itr -> dependencies . begin ( ) ; dit != itr -> dependencies . end ( ) ; dit ++ )		2477003	1					
ANR	2477056	ForInit	dit = itr -> dependencies . begin ( ) ;	238:12:7057:7086	2477003	0	True				
ANR	2477057	AssignmentExpression	dit = itr -> dependencies . begin ( )		2477003	0		=			
ANR	2477058	Identifier	dit		2477003	0					
ANR	2477059	CallExpression	itr -> dependencies . begin ( )		2477003	1					
ANR	2477060	Callee	itr -> dependencies . begin		2477003	0					
ANR	2477061	MemberAccess	itr -> dependencies . begin		2477003	0					
ANR	2477062	PtrMemberAccess	itr -> dependencies		2477003	0					
ANR	2477063	Identifier	itr		2477003	0					
ANR	2477064	Identifier	dependencies		2477003	1					
ANR	2477065	Identifier	begin		2477003	1					
ANR	2477066	ArgumentList			2477003	1					
ANR	2477067	Condition	dit != itr -> dependencies . end ( )	238:42:7087:7114	2477003	1	True				
ANR	2477068	EqualityExpression	dit != itr -> dependencies . end ( )		2477003	0		!=			
ANR	2477069	Identifier	dit		2477003	0					
ANR	2477070	CallExpression	itr -> dependencies . end ( )		2477003	1					
ANR	2477071	Callee	itr -> dependencies . end		2477003	0					
ANR	2477072	MemberAccess	itr -> dependencies . end		2477003	0					
ANR	2477073	PtrMemberAccess	itr -> dependencies		2477003	0					
ANR	2477074	Identifier	itr		2477003	0					
ANR	2477075	Identifier	dependencies		2477003	1					
ANR	2477076	Identifier	end		2477003	1					
ANR	2477077	ArgumentList			2477003	1					
ANR	2477078	PostIncDecOperationExpression	dit ++	238:71:7116:7120	2477003	2	True				
ANR	2477079	Identifier	dit		2477003	0					
ANR	2477080	IncDec	++		2477003	1					
ANR	2477081	CompoundStatement		7:77:275:275	2477003	3					
ANR	2477082	ExpressionStatement	"fprintf ( fp , "" %s"" , dit -> c_str ( ) )"	239:12:7136:7171	2477003	0	True				
ANR	2477083	CallExpression	"fprintf ( fp , "" %s"" , dit -> c_str ( ) )"		2477003	0					
ANR	2477084	Callee	fprintf		2477003	0					
ANR	2477085	Identifier	fprintf		2477003	0					
ANR	2477086	ArgumentList	fp		2477003	1					
ANR	2477087	Argument	fp		2477003	0					
ANR	2477088	Identifier	fp		2477003	0					
ANR	2477089	Argument	""" %s"""		2477003	1					
ANR	2477090	PrimaryExpression	""" %s"""		2477003	0					
ANR	2477091	Argument	dit -> c_str ( )		2477003	2					
ANR	2477092	CallExpression	dit -> c_str ( )		2477003	0					
ANR	2477093	Callee	dit -> c_str		2477003	0					
ANR	2477094	PtrMemberAccess	dit -> c_str		2477003	0					
ANR	2477095	Identifier	dit		2477003	0					
ANR	2477096	Identifier	c_str		2477003	1					
ANR	2477097	ArgumentList			2477003	1					
ANR	2477098	ExpressionStatement	"putc ( '\\n' , fp )"	241:8:7191:7207	2477003	2	True				
ANR	2477099	CallExpression	"putc ( '\\n' , fp )"		2477003	0					
ANR	2477100	Callee	putc		2477003	0					
ANR	2477101	Identifier	putc		2477003	0					
ANR	2477102	ArgumentList	'\\n'		2477003	1					
ANR	2477103	Argument	'\\n'		2477003	0					
ANR	2477104	PrimaryExpression	'\\n'		2477003	0					
ANR	2477105	Argument	fp		2477003	1					
ANR	2477106	Identifier	fp		2477003	0					
ANR	2477107	ReturnType	void		2477003	1					
ANR	2477108	Identifier	GMR :: Display		2477003	2					
ANR	2477109	ParameterList	FILE * fp		2477003	3					
ANR	2477110	Parameter	FILE * fp	231:14:6835:6842	2477003	0	True				
ANR	2477111	ParameterType	FILE *		2477003	0					
ANR	2477112	Identifier	fp		2477003	1					
ANR	2477113	CFGEntryNode	ENTRY		2477003		True				
ANR	2477114	CFGExitNode	EXIT		2477003		True				
ANR	2477115	Symbol	itr -> label . c_str		2477003						
ANR	2477116	Symbol	ports . begin		2477003						
ANR	2477117	Symbol	itr		2477003						
ANR	2477118	Symbol	* dit		2477003						
ANR	2477119	Symbol	fp		2477003						
ANR	2477120	Symbol	ports		2477003						
ANR	2477121	Symbol	dit		2477003						
ANR	2477122	Symbol	* itr		2477003						
ANR	2477123	Symbol	dit -> c_str		2477003						
ANR	2477124	Symbol	itr -> label		2477003						
ANR	2477125	Symbol	itr -> dependencies		2477003						
ANR	2477126	Symbol	ports . end		2477003						
ANR	2477127	Symbol	itr -> dependencies . end		2477003						
ANR	2477128	Symbol	itr -> dependencies . begin		2477003						
