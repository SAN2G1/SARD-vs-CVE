command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5254062	File	data/converged/CVE-2011-4930_htcondor/stl_string_utils.cpp								
ANR	5254063	Function	assign	26:0:924:1000							
ANR	5254064	FunctionDef	"assign (std :: string & dst , const MyString & src)"		5254063	0					
ANR	5254065	CompoundStatement		26:51:975:1000	5254063	0					
ANR	5254066	ExpressionStatement	dst = src . Value ( )	27:4:981:998	5254063	0	True				
ANR	5254067	AssignmentExpression	dst = src . Value ( )		5254063	0		=			
ANR	5254068	Identifier	dst		5254063	0					
ANR	5254069	CallExpression	src . Value ( )		5254063	1					
ANR	5254070	Callee	src . Value		5254063	0					
ANR	5254071	MemberAccess	src . Value		5254063	0					
ANR	5254072	Identifier	src		5254063	0					
ANR	5254073	Identifier	Value		5254063	1					
ANR	5254074	ArgumentList			5254063	1					
ANR	5254075	ReturnType	void		5254063	1					
ANR	5254076	Identifier	assign		5254063	2					
ANR	5254077	ParameterList	"std :: string & dst , const MyString & src"		5254063	3					
ANR	5254078	Parameter	std :: string & dst	26:12:936:951	5254063	0	True				
ANR	5254079	ParameterType	std :: string &		5254063	0					
ANR	5254080	Identifier	dst		5254063	1					
ANR	5254081	Parameter	const MyString & src	26:30:954:972	5254063	1	True				
ANR	5254082	ParameterType	const MyString &		5254063	0					
ANR	5254083	Identifier	src		5254063	1					
ANR	5254084	CFGEntryNode	ENTRY		5254063		True				
ANR	5254085	CFGExitNode	EXIT		5254063		True				
ANR	5254086	Symbol	src . Value		5254063						
ANR	5254087	Symbol	dst		5254063						
ANR	5254088	Symbol	src		5254063						
ANR	5254089	Function	assign	29:0:1002:1078							
ANR	5254090	FunctionDef	"assign (MyString & dst , const std :: string & src)"		5254089	0					
ANR	5254091	CompoundStatement		29:51:1053:1078	5254089	0					
ANR	5254092	ExpressionStatement	dst = src . c_str ( )	30:4:1059:1076	5254089	0	True				
ANR	5254093	AssignmentExpression	dst = src . c_str ( )		5254089	0		=			
ANR	5254094	Identifier	dst		5254089	0					
ANR	5254095	CallExpression	src . c_str ( )		5254089	1					
ANR	5254096	Callee	src . c_str		5254089	0					
ANR	5254097	MemberAccess	src . c_str		5254089	0					
ANR	5254098	Identifier	src		5254089	0					
ANR	5254099	Identifier	c_str		5254089	1					
ANR	5254100	ArgumentList			5254089	1					
ANR	5254101	ReturnType	void		5254089	1					
ANR	5254102	Identifier	assign		5254089	2					
ANR	5254103	ParameterList	"MyString & dst , const std :: string & src"		5254089	3					
ANR	5254104	Parameter	MyString & dst	29:12:1014:1026	5254089	0	True				
ANR	5254105	ParameterType	MyString &		5254089	0					
ANR	5254106	Identifier	dst		5254089	1					
ANR	5254107	Parameter	const std :: string & src	29:27:1029:1050	5254089	1	True				
ANR	5254108	ParameterType	const std :: string &		5254089	0					
ANR	5254109	Identifier	src		5254089	1					
ANR	5254110	CFGEntryNode	ENTRY		5254089		True				
ANR	5254111	CFGExitNode	EXIT		5254089		True				
ANR	5254112	Symbol	src . c_str		5254089						
ANR	5254113	Symbol	dst		5254089						
ANR	5254114	Symbol	src		5254089						
ANR	5254115	Function	operator ==	33:0:1081:1163							
ANR	5254116	FunctionDef	"operator == (const MyString & L , const std :: string & R)"		5254115	0					
ANR	5254117	CompoundStatement		33:57:1138:1163	5254115	0					
ANR	5254118	ReturnStatement	return R == L . Value ( ) ;	33:1:1140:1161	5254115	0	True				
ANR	5254119	EqualityExpression	R == L . Value ( )		5254115	0		==			
ANR	5254120	Identifier	R		5254115	0					
ANR	5254121	CallExpression	L . Value ( )		5254115	1					
ANR	5254122	Callee	L . Value		5254115	0					
ANR	5254123	MemberAccess	L . Value		5254115	0					
ANR	5254124	Identifier	L		5254115	0					
ANR	5254125	Identifier	Value		5254115	1					
ANR	5254126	ArgumentList			5254115	1					
ANR	5254127	ReturnType	bool		5254115	1					
ANR	5254128	Identifier	operator ==		5254115	2					
ANR	5254129	ParameterList	"const MyString & L , const std :: string & R"		5254115	3					
ANR	5254130	Parameter	const MyString & L	33:16:1097:1113	5254115	0	True				
ANR	5254131	ParameterType	const MyString &		5254115	0					
ANR	5254132	Identifier	L		5254115	1					
ANR	5254133	Parameter	const std :: string & R	33:35:1116:1135	5254115	1	True				
ANR	5254134	ParameterType	const std :: string &		5254115	0					
ANR	5254135	Identifier	R		5254115	1					
ANR	5254136	CFGEntryNode	ENTRY		5254115		True				
ANR	5254137	CFGExitNode	EXIT		5254115		True				
ANR	5254138	Symbol	R		5254115						
ANR	5254139	Symbol	L . Value		5254115						
ANR	5254140	Symbol	L		5254115						
ANR	5254141	Function	operator ==	34:0:1165:1247							
ANR	5254142	FunctionDef	"operator == (const std :: string & L , const MyString & R)"		5254141	0					
ANR	5254143	CompoundStatement		34:57:1222:1247	5254141	0					
ANR	5254144	ReturnStatement	return L == R . Value ( ) ;	34:1:1224:1245	5254141	0	True				
ANR	5254145	EqualityExpression	L == R . Value ( )		5254141	0		==			
ANR	5254146	Identifier	L		5254141	0					
ANR	5254147	CallExpression	R . Value ( )		5254141	1					
ANR	5254148	Callee	R . Value		5254141	0					
ANR	5254149	MemberAccess	R . Value		5254141	0					
ANR	5254150	Identifier	R		5254141	0					
ANR	5254151	Identifier	Value		5254141	1					
ANR	5254152	ArgumentList			5254141	1					
ANR	5254153	ReturnType	bool		5254141	1					
ANR	5254154	Identifier	operator ==		5254141	2					
ANR	5254155	ParameterList	"const std :: string & L , const MyString & R"		5254141	3					
ANR	5254156	Parameter	const std :: string & L	34:16:1181:1200	5254141	0	True				
ANR	5254157	ParameterType	const std :: string &		5254141	0					
ANR	5254158	Identifier	L		5254141	1					
ANR	5254159	Parameter	const MyString & R	34:38:1203:1219	5254141	1	True				
ANR	5254160	ParameterType	const MyString &		5254141	0					
ANR	5254161	Identifier	R		5254141	1					
ANR	5254162	CFGEntryNode	ENTRY		5254141		True				
ANR	5254163	CFGExitNode	EXIT		5254141		True				
ANR	5254164	Symbol	R		5254141						
ANR	5254165	Symbol	R . Value		5254141						
ANR	5254166	Symbol	L		5254141						
ANR	5254167	Function	operator !=	35:0:1249:1331							
ANR	5254168	FunctionDef	"operator != (const MyString & L , const std :: string & R)"		5254167	0					
ANR	5254169	CompoundStatement		35:57:1306:1331	5254167	0					
ANR	5254170	ReturnStatement	return R != L . Value ( ) ;	35:1:1308:1329	5254167	0	True				
ANR	5254171	EqualityExpression	R != L . Value ( )		5254167	0		!=			
ANR	5254172	Identifier	R		5254167	0					
ANR	5254173	CallExpression	L . Value ( )		5254167	1					
ANR	5254174	Callee	L . Value		5254167	0					
ANR	5254175	MemberAccess	L . Value		5254167	0					
ANR	5254176	Identifier	L		5254167	0					
ANR	5254177	Identifier	Value		5254167	1					
ANR	5254178	ArgumentList			5254167	1					
ANR	5254179	ReturnType	bool		5254167	1					
ANR	5254180	Identifier	operator !=		5254167	2					
ANR	5254181	ParameterList	"const MyString & L , const std :: string & R"		5254167	3					
ANR	5254182	Parameter	const MyString & L	35:16:1265:1281	5254167	0	True				
ANR	5254183	ParameterType	const MyString &		5254167	0					
ANR	5254184	Identifier	L		5254167	1					
ANR	5254185	Parameter	const std :: string & R	35:35:1284:1303	5254167	1	True				
ANR	5254186	ParameterType	const std :: string &		5254167	0					
ANR	5254187	Identifier	R		5254167	1					
ANR	5254188	CFGEntryNode	ENTRY		5254167		True				
ANR	5254189	CFGExitNode	EXIT		5254167		True				
ANR	5254190	Symbol	R		5254167						
ANR	5254191	Symbol	L . Value		5254167						
ANR	5254192	Symbol	L		5254167						
ANR	5254193	Function	operator !=	36:0:1333:1415							
ANR	5254194	FunctionDef	"operator != (const std :: string & L , const MyString & R)"		5254193	0					
ANR	5254195	CompoundStatement		36:57:1390:1415	5254193	0					
ANR	5254196	ReturnStatement	return L != R . Value ( ) ;	36:1:1392:1413	5254193	0	True				
ANR	5254197	EqualityExpression	L != R . Value ( )		5254193	0		!=			
ANR	5254198	Identifier	L		5254193	0					
ANR	5254199	CallExpression	R . Value ( )		5254193	1					
ANR	5254200	Callee	R . Value		5254193	0					
ANR	5254201	MemberAccess	R . Value		5254193	0					
ANR	5254202	Identifier	R		5254193	0					
ANR	5254203	Identifier	Value		5254193	1					
ANR	5254204	ArgumentList			5254193	1					
ANR	5254205	ReturnType	bool		5254193	1					
ANR	5254206	Identifier	operator !=		5254193	2					
ANR	5254207	ParameterList	"const std :: string & L , const MyString & R"		5254193	3					
ANR	5254208	Parameter	const std :: string & L	36:16:1349:1368	5254193	0	True				
ANR	5254209	ParameterType	const std :: string &		5254193	0					
ANR	5254210	Identifier	L		5254193	1					
ANR	5254211	Parameter	const MyString & R	36:38:1371:1387	5254193	1	True				
ANR	5254212	ParameterType	const MyString &		5254193	0					
ANR	5254213	Identifier	R		5254193	1					
ANR	5254214	CFGEntryNode	ENTRY		5254193		True				
ANR	5254215	CFGExitNode	EXIT		5254193		True				
ANR	5254216	Symbol	R		5254193						
ANR	5254217	Symbol	R . Value		5254193						
ANR	5254218	Symbol	L		5254193						
ANR	5254219	Function	operator <	37:0:1417:1497							
ANR	5254220	FunctionDef	"operator < (const MyString & L , const std :: string & R)"		5254219	0					
ANR	5254221	CompoundStatement		37:56:1473:1497	5254219	0					
ANR	5254222	ReturnStatement	return R > L . Value ( ) ;	37:1:1475:1495	5254219	0	True				
ANR	5254223	RelationalExpression	R > L . Value ( )		5254219	0		>			
ANR	5254224	Identifier	R		5254219	0					
ANR	5254225	CallExpression	L . Value ( )		5254219	1					
ANR	5254226	Callee	L . Value		5254219	0					
ANR	5254227	MemberAccess	L . Value		5254219	0					
ANR	5254228	Identifier	L		5254219	0					
ANR	5254229	Identifier	Value		5254219	1					
ANR	5254230	ArgumentList			5254219	1					
ANR	5254231	ReturnType	bool		5254219	1					
ANR	5254232	Identifier	operator <		5254219	2					
ANR	5254233	ParameterList	"const MyString & L , const std :: string & R"		5254219	3					
ANR	5254234	Parameter	const MyString & L	37:15:1432:1448	5254219	0	True				
ANR	5254235	ParameterType	const MyString &		5254219	0					
ANR	5254236	Identifier	L		5254219	1					
ANR	5254237	Parameter	const std :: string & R	37:34:1451:1470	5254219	1	True				
ANR	5254238	ParameterType	const std :: string &		5254219	0					
ANR	5254239	Identifier	R		5254219	1					
ANR	5254240	CFGEntryNode	ENTRY		5254219		True				
ANR	5254241	CFGExitNode	EXIT		5254219		True				
ANR	5254242	Symbol	R		5254219						
ANR	5254243	Symbol	L . Value		5254219						
ANR	5254244	Symbol	L		5254219						
ANR	5254245	Function	operator <	38:0:1499:1579							
ANR	5254246	FunctionDef	"operator < (const std :: string & L , const MyString & R)"		5254245	0					
ANR	5254247	CompoundStatement		38:56:1555:1579	5254245	0					
ANR	5254248	ReturnStatement	return L < R . Value ( ) ;	38:1:1557:1577	5254245	0	True				
ANR	5254249	RelationalExpression	L < R . Value ( )		5254245	0		<			
ANR	5254250	Identifier	L		5254245	0					
ANR	5254251	CallExpression	R . Value ( )		5254245	1					
ANR	5254252	Callee	R . Value		5254245	0					
ANR	5254253	MemberAccess	R . Value		5254245	0					
ANR	5254254	Identifier	R		5254245	0					
ANR	5254255	Identifier	Value		5254245	1					
ANR	5254256	ArgumentList			5254245	1					
ANR	5254257	ReturnType	bool		5254245	1					
ANR	5254258	Identifier	operator <		5254245	2					
ANR	5254259	ParameterList	"const std :: string & L , const MyString & R"		5254245	3					
ANR	5254260	Parameter	const std :: string & L	38:15:1514:1533	5254245	0	True				
ANR	5254261	ParameterType	const std :: string &		5254245	0					
ANR	5254262	Identifier	L		5254245	1					
ANR	5254263	Parameter	const MyString & R	38:37:1536:1552	5254245	1	True				
ANR	5254264	ParameterType	const MyString &		5254245	0					
ANR	5254265	Identifier	R		5254245	1					
ANR	5254266	CFGEntryNode	ENTRY		5254245		True				
ANR	5254267	CFGExitNode	EXIT		5254245		True				
ANR	5254268	Symbol	R		5254245						
ANR	5254269	Symbol	R . Value		5254245						
ANR	5254270	Symbol	L		5254245						
ANR	5254271	Function	operator >	39:0:1581:1661							
ANR	5254272	FunctionDef	"operator > (const MyString & L , const std :: string & R)"		5254271	0					
ANR	5254273	CompoundStatement		39:56:1637:1661	5254271	0					
ANR	5254274	ReturnStatement	return R < L . Value ( ) ;	39:1:1639:1659	5254271	0	True				
ANR	5254275	RelationalExpression	R < L . Value ( )		5254271	0		<			
ANR	5254276	Identifier	R		5254271	0					
ANR	5254277	CallExpression	L . Value ( )		5254271	1					
ANR	5254278	Callee	L . Value		5254271	0					
ANR	5254279	MemberAccess	L . Value		5254271	0					
ANR	5254280	Identifier	L		5254271	0					
ANR	5254281	Identifier	Value		5254271	1					
ANR	5254282	ArgumentList			5254271	1					
ANR	5254283	ReturnType	bool		5254271	1					
ANR	5254284	Identifier	operator >		5254271	2					
ANR	5254285	ParameterList	"const MyString & L , const std :: string & R"		5254271	3					
ANR	5254286	Parameter	const MyString & L	39:15:1596:1612	5254271	0	True				
ANR	5254287	ParameterType	const MyString &		5254271	0					
ANR	5254288	Identifier	L		5254271	1					
ANR	5254289	Parameter	const std :: string & R	39:34:1615:1634	5254271	1	True				
ANR	5254290	ParameterType	const std :: string &		5254271	0					
ANR	5254291	Identifier	R		5254271	1					
ANR	5254292	CFGEntryNode	ENTRY		5254271		True				
ANR	5254293	CFGExitNode	EXIT		5254271		True				
ANR	5254294	Symbol	R		5254271						
ANR	5254295	Symbol	L . Value		5254271						
ANR	5254296	Symbol	L		5254271						
ANR	5254297	Function	operator >	40:0:1663:1743							
ANR	5254298	FunctionDef	"operator > (const std :: string & L , const MyString & R)"		5254297	0					
ANR	5254299	CompoundStatement		40:56:1719:1743	5254297	0					
ANR	5254300	ReturnStatement	return L > R . Value ( ) ;	40:1:1721:1741	5254297	0	True				
ANR	5254301	RelationalExpression	L > R . Value ( )		5254297	0		>			
ANR	5254302	Identifier	L		5254297	0					
ANR	5254303	CallExpression	R . Value ( )		5254297	1					
ANR	5254304	Callee	R . Value		5254297	0					
ANR	5254305	MemberAccess	R . Value		5254297	0					
ANR	5254306	Identifier	R		5254297	0					
ANR	5254307	Identifier	Value		5254297	1					
ANR	5254308	ArgumentList			5254297	1					
ANR	5254309	ReturnType	bool		5254297	1					
ANR	5254310	Identifier	operator >		5254297	2					
ANR	5254311	ParameterList	"const std :: string & L , const MyString & R"		5254297	3					
ANR	5254312	Parameter	const std :: string & L	40:15:1678:1697	5254297	0	True				
ANR	5254313	ParameterType	const std :: string &		5254297	0					
ANR	5254314	Identifier	L		5254297	1					
ANR	5254315	Parameter	const MyString & R	40:37:1700:1716	5254297	1	True				
ANR	5254316	ParameterType	const MyString &		5254297	0					
ANR	5254317	Identifier	R		5254297	1					
ANR	5254318	CFGEntryNode	ENTRY		5254297		True				
ANR	5254319	CFGExitNode	EXIT		5254297		True				
ANR	5254320	Symbol	R		5254297						
ANR	5254321	Symbol	R . Value		5254297						
ANR	5254322	Symbol	L		5254297						
ANR	5254323	Function	operator <=	41:0:1745:1827							
ANR	5254324	FunctionDef	"operator <= (const MyString & L , const std :: string & R)"		5254323	0					
ANR	5254325	CompoundStatement		41:57:1802:1827	5254323	0					
ANR	5254326	ReturnStatement	return R >= L . Value ( ) ;	41:1:1804:1825	5254323	0	True				
ANR	5254327	RelationalExpression	R >= L . Value ( )		5254323	0		>=			
ANR	5254328	Identifier	R		5254323	0					
ANR	5254329	CallExpression	L . Value ( )		5254323	1					
ANR	5254330	Callee	L . Value		5254323	0					
ANR	5254331	MemberAccess	L . Value		5254323	0					
ANR	5254332	Identifier	L		5254323	0					
ANR	5254333	Identifier	Value		5254323	1					
ANR	5254334	ArgumentList			5254323	1					
ANR	5254335	ReturnType	bool		5254323	1					
ANR	5254336	Identifier	operator <=		5254323	2					
ANR	5254337	ParameterList	"const MyString & L , const std :: string & R"		5254323	3					
ANR	5254338	Parameter	const MyString & L	41:16:1761:1777	5254323	0	True				
ANR	5254339	ParameterType	const MyString &		5254323	0					
ANR	5254340	Identifier	L		5254323	1					
ANR	5254341	Parameter	const std :: string & R	41:35:1780:1799	5254323	1	True				
ANR	5254342	ParameterType	const std :: string &		5254323	0					
ANR	5254343	Identifier	R		5254323	1					
ANR	5254344	CFGEntryNode	ENTRY		5254323		True				
ANR	5254345	CFGExitNode	EXIT		5254323		True				
ANR	5254346	Symbol	R		5254323						
ANR	5254347	Symbol	L . Value		5254323						
ANR	5254348	Symbol	L		5254323						
ANR	5254349	Function	operator <=	42:0:1829:1911							
ANR	5254350	FunctionDef	"operator <= (const std :: string & L , const MyString & R)"		5254349	0					
ANR	5254351	CompoundStatement		42:57:1886:1911	5254349	0					
ANR	5254352	ReturnStatement	return L <= R . Value ( ) ;	42:1:1888:1909	5254349	0	True				
ANR	5254353	RelationalExpression	L <= R . Value ( )		5254349	0		<=			
ANR	5254354	Identifier	L		5254349	0					
ANR	5254355	CallExpression	R . Value ( )		5254349	1					
ANR	5254356	Callee	R . Value		5254349	0					
ANR	5254357	MemberAccess	R . Value		5254349	0					
ANR	5254358	Identifier	R		5254349	0					
ANR	5254359	Identifier	Value		5254349	1					
ANR	5254360	ArgumentList			5254349	1					
ANR	5254361	ReturnType	bool		5254349	1					
ANR	5254362	Identifier	operator <=		5254349	2					
ANR	5254363	ParameterList	"const std :: string & L , const MyString & R"		5254349	3					
ANR	5254364	Parameter	const std :: string & L	42:16:1845:1864	5254349	0	True				
ANR	5254365	ParameterType	const std :: string &		5254349	0					
ANR	5254366	Identifier	L		5254349	1					
ANR	5254367	Parameter	const MyString & R	42:38:1867:1883	5254349	1	True				
ANR	5254368	ParameterType	const MyString &		5254349	0					
ANR	5254369	Identifier	R		5254349	1					
ANR	5254370	CFGEntryNode	ENTRY		5254349		True				
ANR	5254371	CFGExitNode	EXIT		5254349		True				
ANR	5254372	Symbol	R		5254349						
ANR	5254373	Symbol	R . Value		5254349						
ANR	5254374	Symbol	L		5254349						
ANR	5254375	Function	operator >=	43:0:1913:1995							
ANR	5254376	FunctionDef	"operator >= (const MyString & L , const std :: string & R)"		5254375	0					
ANR	5254377	CompoundStatement		43:57:1970:1995	5254375	0					
ANR	5254378	ReturnStatement	return R <= L . Value ( ) ;	43:1:1972:1993	5254375	0	True				
ANR	5254379	RelationalExpression	R <= L . Value ( )		5254375	0		<=			
ANR	5254380	Identifier	R		5254375	0					
ANR	5254381	CallExpression	L . Value ( )		5254375	1					
ANR	5254382	Callee	L . Value		5254375	0					
ANR	5254383	MemberAccess	L . Value		5254375	0					
ANR	5254384	Identifier	L		5254375	0					
ANR	5254385	Identifier	Value		5254375	1					
ANR	5254386	ArgumentList			5254375	1					
ANR	5254387	ReturnType	bool		5254375	1					
ANR	5254388	Identifier	operator >=		5254375	2					
ANR	5254389	ParameterList	"const MyString & L , const std :: string & R"		5254375	3					
ANR	5254390	Parameter	const MyString & L	43:16:1929:1945	5254375	0	True				
ANR	5254391	ParameterType	const MyString &		5254375	0					
ANR	5254392	Identifier	L		5254375	1					
ANR	5254393	Parameter	const std :: string & R	43:35:1948:1967	5254375	1	True				
ANR	5254394	ParameterType	const std :: string &		5254375	0					
ANR	5254395	Identifier	R		5254375	1					
ANR	5254396	CFGEntryNode	ENTRY		5254375		True				
ANR	5254397	CFGExitNode	EXIT		5254375		True				
ANR	5254398	Symbol	R		5254375						
ANR	5254399	Symbol	L . Value		5254375						
ANR	5254400	Symbol	L		5254375						
ANR	5254401	Function	operator >=	44:0:1997:2079							
ANR	5254402	FunctionDef	"operator >= (const std :: string & L , const MyString & R)"		5254401	0					
ANR	5254403	CompoundStatement		44:57:2054:2079	5254401	0					
ANR	5254404	ReturnStatement	return L >= R . Value ( ) ;	44:1:2056:2077	5254401	0	True				
ANR	5254405	RelationalExpression	L >= R . Value ( )		5254401	0		>=			
ANR	5254406	Identifier	L		5254401	0					
ANR	5254407	CallExpression	R . Value ( )		5254401	1					
ANR	5254408	Callee	R . Value		5254401	0					
ANR	5254409	MemberAccess	R . Value		5254401	0					
ANR	5254410	Identifier	R		5254401	0					
ANR	5254411	Identifier	Value		5254401	1					
ANR	5254412	ArgumentList			5254401	1					
ANR	5254413	ReturnType	bool		5254401	1					
ANR	5254414	Identifier	operator >=		5254401	2					
ANR	5254415	ParameterList	"const std :: string & L , const MyString & R"		5254401	3					
ANR	5254416	Parameter	const std :: string & L	44:16:2013:2032	5254401	0	True				
ANR	5254417	ParameterType	const std :: string &		5254401	0					
ANR	5254418	Identifier	L		5254401	1					
ANR	5254419	Parameter	const MyString & R	44:38:2035:2051	5254401	1	True				
ANR	5254420	ParameterType	const MyString &		5254401	0					
ANR	5254421	Identifier	R		5254401	1					
ANR	5254422	CFGEntryNode	ENTRY		5254401		True				
ANR	5254423	CFGExitNode	EXIT		5254401		True				
ANR	5254424	Symbol	R		5254401						
ANR	5254425	Symbol	R . Value		5254401						
ANR	5254426	Symbol	L		5254401						
ANR	5254427	Function	vsprintf	47:0:2083:3720							
ANR	5254428	FunctionDef	"vsprintf (std :: string & s , const char * format , va_list pargs)"		5254427	0					
ANR	5254429	CompoundStatement		47:64:2147:3720	5254427	0					
ANR	5254430	IdentifierDeclStatement	char fixbuf [ STL_STRING_UTILS_FIXBUF ] ;	48:4:2153:2189	5254427	0	True				
ANR	5254431	IdentifierDecl	fixbuf [ STL_STRING_UTILS_FIXBUF ]		5254427	0					
ANR	5254432	IdentifierDeclType	char [ STL_STRING_UTILS_FIXBUF ]		5254427	0					
ANR	5254433	Identifier	fixbuf		5254427	1					
ANR	5254434	Identifier	STL_STRING_UTILS_FIXBUF		5254427	2					
ANR	5254435	IdentifierDeclStatement	const int fixlen = sizeof ( fixbuf ) / sizeof ( fixbuf [ 0 ] ) ;	49:4:2195:2246	5254427	1	True				
ANR	5254436	IdentifierDecl	fixlen = sizeof ( fixbuf ) / sizeof ( fixbuf [ 0 ] )		5254427	0					
ANR	5254437	IdentifierDeclType	const int		5254427	0					
ANR	5254438	Identifier	fixlen		5254427	1					
ANR	5254439	AssignmentExpression	fixlen = sizeof ( fixbuf ) / sizeof ( fixbuf [ 0 ] )		5254427	2		=			
ANR	5254440	Identifier	fixlen		5254427	0					
ANR	5254441	MultiplicativeExpression	sizeof ( fixbuf ) / sizeof ( fixbuf [ 0 ] )		5254427	1		/			
ANR	5254442	SizeofExpression	sizeof ( fixbuf )		5254427	0					
ANR	5254443	Sizeof	sizeof		5254427	0					
ANR	5254444	SizeofOperand	fixbuf		5254427	1					
ANR	5254445	SizeofExpression	sizeof ( fixbuf [ 0 ] )		5254427	1					
ANR	5254446	Sizeof	sizeof		5254427	0					
ANR	5254447	ArrayIndexing	fixbuf [ 0 ]		5254427	1					
ANR	5254448	Identifier	fixbuf		5254427	0					
ANR	5254449	PrimaryExpression	0		5254427	1					
ANR	5254450	IdentifierDeclStatement	int n ;	50:1:2249:2254	5254427	2	True				
ANR	5254451	IdentifierDecl	n		5254427	0					
ANR	5254452	IdentifierDeclType	int		5254427	0					
ANR	5254453	Identifier	n		5254427	1					
ANR	5254454	IdentifierDeclStatement	va_list args ;	51:1:2257:2270	5254427	3	True				
ANR	5254455	IdentifierDecl	args		5254427	0					
ANR	5254456	IdentifierDeclType	va_list		5254427	0					
ANR	5254457	Identifier	args		5254427	1					
ANR	5254458	ExpressionStatement	"n = vsnprintf ( fixbuf , fixlen , format , pargs )"	57:1:2465:2509	5254427	4	True				
ANR	5254459	AssignmentExpression	"n = vsnprintf ( fixbuf , fixlen , format , pargs )"		5254427	0		=			
ANR	5254460	Identifier	n		5254427	0					
ANR	5254461	CallExpression	"vsnprintf ( fixbuf , fixlen , format , pargs )"		5254427	1					
ANR	5254462	Callee	vsnprintf		5254427	0					
ANR	5254463	Identifier	vsnprintf		5254427	0					
ANR	5254464	ArgumentList	fixbuf		5254427	1					
ANR	5254465	Argument	fixbuf		5254427	0					
ANR	5254466	Identifier	fixbuf		5254427	0					
ANR	5254467	Argument	fixlen		5254427	1					
ANR	5254468	Identifier	fixlen		5254427	0					
ANR	5254469	Argument	format		5254427	2					
ANR	5254470	Identifier	format		5254427	0					
ANR	5254471	Argument	pargs		5254427	3					
ANR	5254472	Identifier	pargs		5254427	0					
ANR	5254473	IfStatement	if ( n < fixlen )		5254427	5					
ANR	5254474	Condition	n < fixlen	66:8:2724:2733	5254427	0	True				
ANR	5254475	RelationalExpression	n < fixlen		5254427	0		<			
ANR	5254476	Identifier	n		5254427	0					
ANR	5254477	Identifier	fixlen		5254427	1					
ANR	5254478	CompoundStatement		20:20:588:588	5254427	1					
ANR	5254479	ExpressionStatement	s = fixbuf	67:8:2746:2756	5254427	0	True				
ANR	5254480	AssignmentExpression	s = fixbuf		5254427	0		=			
ANR	5254481	Identifier	s		5254427	0					
ANR	5254482	Identifier	fixbuf		5254427	1					
ANR	5254483	ReturnStatement	return n ;	68:8:2766:2774	5254427	1	True				
ANR	5254484	Identifier	n		5254427	0					
ANR	5254485	ExpressionStatement	n += 1	73:4:2918:2924	5254427	6	True				
ANR	5254486	AssignmentExpression	n += 1		5254427	0		+=			
ANR	5254487	Identifier	n		5254427	0					
ANR	5254488	PrimaryExpression	1		5254427	1					
ANR	5254489	IdentifierDeclStatement	char * varbuf = NULL ;	74:4:2930:2949	5254427	7	True				
ANR	5254490	IdentifierDecl	* varbuf = NULL		5254427	0					
ANR	5254491	IdentifierDeclType	char *		5254427	0					
ANR	5254492	Identifier	varbuf		5254427	1					
ANR	5254493	AssignmentExpression	* varbuf = NULL		5254427	2		=			
ANR	5254494	Identifier	NULL		5254427	0					
ANR	5254495	Identifier	NULL		5254427	1					
ANR	5254496	TryStatement	try		5254427	8					
ANR	5254497	CompoundStatement		30:8:885:885	5254427	0					
ANR	5254498	ExpressionStatement	varbuf = new char [ n ]		5254427	0					
ANR	5254499	AssignmentExpression	varbuf = new char [ n ]		5254427	0		=			
ANR	5254500	Identifier	varbuf		5254427	0					
ANR	5254501	Identifier	n		5254427	1					
ANR	5254502	CatchList			5254427	1					
ANR	5254503	CatchStatement	catch ( ... )		5254427	0					
ANR	5254504	CompoundStatement		32:18:935:935	5254427	0					
ANR	5254505	ExpressionStatement	varbuf = NULL	79:8:3093:3106	5254427	0	True				
ANR	5254506	AssignmentExpression	varbuf = NULL		5254427	0		=			
ANR	5254507	Identifier	varbuf		5254427	0					
ANR	5254508	Identifier	NULL		5254427	1					
ANR	5254509	IfStatement	if ( NULL == varbuf )		5254427	9					
ANR	5254510	Condition	NULL == varbuf	81:8:3122:3135	5254427	0	True				
ANR	5254511	EqualityExpression	NULL == varbuf		5254427	0		==			
ANR	5254512	Identifier	NULL		5254427	0					
ANR	5254513	Identifier	varbuf		5254427	1					
ANR	5254514	ExpressionStatement	"EXCEPT ( ""Failed to allocate char buffer of %d chars"" , n )"	81:24:3138:3193	5254427	1	True				
ANR	5254515	CallExpression	"EXCEPT ( ""Failed to allocate char buffer of %d chars"" , n )"		5254427	0					
ANR	5254516	Callee	EXCEPT		5254427	0					
ANR	5254517	Identifier	EXCEPT		5254427	0					
ANR	5254518	ArgumentList	"""Failed to allocate char buffer of %d chars"""		5254427	1					
ANR	5254519	Argument	"""Failed to allocate char buffer of %d chars"""		5254427	0					
ANR	5254520	PrimaryExpression	"""Failed to allocate char buffer of %d chars"""		5254427	0					
ANR	5254521	Argument	n		5254427	1					
ANR	5254522	Identifier	n		5254427	0					
ANR	5254523	IdentifierDeclStatement	"int nn = vsnprintf ( varbuf , n , format , pargs ) ;"	85:1:3268:3312	5254427	10	True				
ANR	5254524	IdentifierDecl	"nn = vsnprintf ( varbuf , n , format , pargs )"		5254427	0					
ANR	5254525	IdentifierDeclType	int		5254427	0					
ANR	5254526	Identifier	nn		5254427	1					
ANR	5254527	AssignmentExpression	"nn = vsnprintf ( varbuf , n , format , pargs )"		5254427	2		=			
ANR	5254528	Identifier	nn		5254427	0					
ANR	5254529	CallExpression	"vsnprintf ( varbuf , n , format , pargs )"		5254427	1					
ANR	5254530	Callee	vsnprintf		5254427	0					
ANR	5254531	Identifier	vsnprintf		5254427	0					
ANR	5254532	ArgumentList	varbuf		5254427	1					
ANR	5254533	Argument	varbuf		5254427	0					
ANR	5254534	Identifier	varbuf		5254427	0					
ANR	5254535	Argument	n		5254427	1					
ANR	5254536	Identifier	n		5254427	0					
ANR	5254537	Argument	format		5254427	2					
ANR	5254538	Identifier	format		5254427	0					
ANR	5254539	Argument	pargs		5254427	3					
ANR	5254540	Identifier	pargs		5254427	0					
ANR	5254541	IfStatement	if ( nn >= n )		5254427	11					
ANR	5254542	Condition	nn >= n	93:8:3475:3481	5254427	0	True				
ANR	5254543	RelationalExpression	nn >= n		5254427	0		>=			
ANR	5254544	Identifier	nn		5254427	0					
ANR	5254545	Identifier	n		5254427	1					
ANR	5254546	ExpressionStatement	"EXCEPT ( ""Insufficient buffer size (%d) for printing %d chars"" , n , nn )"	93:17:3484:3552	5254427	1	True				
ANR	5254547	CallExpression	"EXCEPT ( ""Insufficient buffer size (%d) for printing %d chars"" , n , nn )"		5254427	0					
ANR	5254548	Callee	EXCEPT		5254427	0					
ANR	5254549	Identifier	EXCEPT		5254427	0					
ANR	5254550	ArgumentList	"""Insufficient buffer size (%d) for printing %d chars"""		5254427	1					
ANR	5254551	Argument	"""Insufficient buffer size (%d) for printing %d chars"""		5254427	0					
ANR	5254552	PrimaryExpression	"""Insufficient buffer size (%d) for printing %d chars"""		5254427	0					
ANR	5254553	Argument	n		5254427	1					
ANR	5254554	Identifier	n		5254427	0					
ANR	5254555	Argument	nn		5254427	2					
ANR	5254556	Identifier	nn		5254427	0					
ANR	5254557	ExpressionStatement	s = varbuf	96:4:3595:3605	5254427	12	True				
ANR	5254558	AssignmentExpression	s = varbuf		5254427	0		=			
ANR	5254559	Identifier	s		5254427	0					
ANR	5254560	Identifier	varbuf		5254427	1					
ANR	5254561	Statement	delete	99:4:3649:3654	5254427	13	True				
ANR	5254562	Statement	[	99:10:3655:3655	5254427	14	True				
ANR	5254563	Statement	]	99:11:3656:3656	5254427	15	True				
ANR	5254564	ExpressionStatement	varbuf	99:13:3658:3664	5254427	16	True				
ANR	5254565	Identifier	varbuf		5254427	0					
ANR	5254566	ReturnStatement	return nn ;	102:4:3709:3718	5254427	17	True				
ANR	5254567	Identifier	nn		5254427	0					
ANR	5254568	ReturnType	int		5254427	1					
ANR	5254569	Identifier	vsprintf		5254427	2					
ANR	5254570	ParameterList	"std :: string & s , const char * format , va_list pargs"		5254427	3					
ANR	5254571	Parameter	std :: string & s	47:13:2096:2109	5254427	0	True				
ANR	5254572	ParameterType	std :: string &		5254427	0					
ANR	5254573	Identifier	s		5254427	1					
ANR	5254574	Parameter	const char * format	47:29:2112:2129	5254427	1	True				
ANR	5254575	ParameterType	const char *		5254427	0					
ANR	5254576	Identifier	format		5254427	1					
ANR	5254577	Parameter	va_list pargs	47:49:2132:2144	5254427	2	True				
ANR	5254578	ParameterType	va_list		5254427	0					
ANR	5254579	Identifier	pargs		5254427	1					
ANR	5254580	CFGEntryNode	ENTRY		5254427		True				
ANR	5254581	CFGExitNode	EXIT		5254427		True				
ANR	5254582	CFGErrorNode	ERROR		5254427		True				
ANR	5254583	Symbol	args		5254427						
ANR	5254584	Symbol	nn		5254427						
ANR	5254585	Symbol	* fixbuf		5254427						
ANR	5254586	Symbol	s		5254427						
ANR	5254587	Symbol	fixbuf		5254427						
ANR	5254588	Symbol	NULL		5254427						
ANR	5254589	Symbol	varbuf		5254427						
ANR	5254590	Symbol	pargs		5254427						
ANR	5254591	Symbol	format		5254427						
ANR	5254592	Symbol	vsnprintf		5254427						
ANR	5254593	Symbol	fixlen		5254427						
ANR	5254594	Symbol	n		5254427						
ANR	5254595	Function	sprintf	105:0:3723:3895							
ANR	5254596	FunctionDef	"sprintf (std :: string & s , const char * format)"		5254595	0					
ANR	5254597	CompoundStatement		105:53:3776:3895	5254595	0					
ANR	5254598	IdentifierDeclStatement	va_list args ;	106:4:3782:3794	5254595	0	True				
ANR	5254599	IdentifierDecl	args		5254595	0					
ANR	5254600	IdentifierDeclType	va_list		5254595	0					
ANR	5254601	Identifier	args		5254595	1					
ANR	5254602	ExpressionStatement	"va_start ( args , format )"	107:4:3800:3822	5254595	1	True				
ANR	5254603	CallExpression	"va_start ( args , format )"		5254595	0					
ANR	5254604	Callee	va_start		5254595	0					
ANR	5254605	Identifier	va_start		5254595	0					
ANR	5254606	ArgumentList	args		5254595	1					
ANR	5254607	Argument	args		5254595	0					
ANR	5254608	Identifier	args		5254595	0					
ANR	5254609	Argument	format		5254595	1					
ANR	5254610	Identifier	format		5254595	0					
ANR	5254611	IdentifierDeclStatement	"int r = vsprintf ( s , format , args ) ;"	108:4:3828:3861	5254595	2	True				
ANR	5254612	IdentifierDecl	"r = vsprintf ( s , format , args )"		5254595	0					
ANR	5254613	IdentifierDeclType	int		5254595	0					
ANR	5254614	Identifier	r		5254595	1					
ANR	5254615	AssignmentExpression	"r = vsprintf ( s , format , args )"		5254595	2		=			
ANR	5254616	Identifier	r		5254595	0					
ANR	5254617	CallExpression	"vsprintf ( s , format , args )"		5254595	1					
ANR	5254618	Callee	vsprintf		5254595	0					
ANR	5254619	Identifier	vsprintf		5254595	0					
ANR	5254620	ArgumentList	s		5254595	1					
ANR	5254621	Argument	s		5254595	0					
ANR	5254622	Identifier	s		5254595	0					
ANR	5254623	Argument	format		5254595	1					
ANR	5254624	Identifier	format		5254595	0					
ANR	5254625	Argument	args		5254595	2					
ANR	5254626	Identifier	args		5254595	0					
ANR	5254627	ExpressionStatement	va_end ( args )	109:4:3867:3879	5254595	3	True				
ANR	5254628	CallExpression	va_end ( args )		5254595	0					
ANR	5254629	Callee	va_end		5254595	0					
ANR	5254630	Identifier	va_end		5254595	0					
ANR	5254631	ArgumentList	args		5254595	1					
ANR	5254632	Argument	args		5254595	0					
ANR	5254633	Identifier	args		5254595	0					
ANR	5254634	ReturnStatement	return r ;	110:4:3885:3893	5254595	4	True				
ANR	5254635	Identifier	r		5254595	0					
ANR	5254636	ReturnType	int		5254595	1					
ANR	5254637	Identifier	sprintf		5254595	2					
ANR	5254638	ParameterList	"std :: string & s , const char * format"		5254595	3					
ANR	5254639	Parameter	std :: string & s	105:12:3735:3748	5254595	0	True				
ANR	5254640	ParameterType	std :: string &		5254595	0					
ANR	5254641	Identifier	s		5254595	1					
ANR	5254642	Parameter	const char * format	105:28:3751:3768	5254595	1	True				
ANR	5254643	ParameterType	const char *		5254595	0					
ANR	5254644	Identifier	format		5254595	1					
ANR	5254645	CFGEntryNode	ENTRY		5254595		True				
ANR	5254646	CFGExitNode	EXIT		5254595		True				
ANR	5254647	Symbol	args		5254595						
ANR	5254648	Symbol	r		5254595						
ANR	5254649	Symbol	s		5254595						
ANR	5254650	Symbol	format		5254595						
ANR	5254651	Symbol	vsprintf		5254595						
ANR	5254652	Function	sprintf	113:0:3898:4176							
ANR	5254653	FunctionDef	"sprintf (MyString & s , const char * format)"		5254652	0					
ANR	5254654	CompoundStatement		113:50:3948:4176	5254652	0					
ANR	5254655	IdentifierDeclStatement	va_list args ;	114:4:3954:3966	5254652	0	True				
ANR	5254656	IdentifierDecl	args		5254652	0					
ANR	5254657	IdentifierDeclType	va_list		5254652	0					
ANR	5254658	Identifier	args		5254652	1					
ANR	5254659	IdentifierDeclStatement	std :: string t ;	115:4:3972:3985	5254652	1	True				
ANR	5254660	IdentifierDecl	t		5254652	0					
ANR	5254661	IdentifierDeclType	std :: string		5254652	0					
ANR	5254662	Identifier	t		5254652	1					
ANR	5254663	ExpressionStatement	"va_start ( args , format )"	116:4:3991:4013	5254652	2	True				
ANR	5254664	CallExpression	"va_start ( args , format )"		5254652	0					
ANR	5254665	Callee	va_start		5254652	0					
ANR	5254666	Identifier	va_start		5254652	0					
ANR	5254667	ArgumentList	args		5254652	1					
ANR	5254668	Argument	args		5254652	0					
ANR	5254669	Identifier	args		5254652	0					
ANR	5254670	Argument	format		5254652	1					
ANR	5254671	Identifier	format		5254652	0					
ANR	5254672	IdentifierDeclStatement	"int r = vsprintf ( t , format , args ) ;"	118:4:4091:4124	5254652	3	True				
ANR	5254673	IdentifierDecl	"r = vsprintf ( t , format , args )"		5254652	0					
ANR	5254674	IdentifierDeclType	int		5254652	0					
ANR	5254675	Identifier	r		5254652	1					
ANR	5254676	AssignmentExpression	"r = vsprintf ( t , format , args )"		5254652	2		=			
ANR	5254677	Identifier	r		5254652	0					
ANR	5254678	CallExpression	"vsprintf ( t , format , args )"		5254652	1					
ANR	5254679	Callee	vsprintf		5254652	0					
ANR	5254680	Identifier	vsprintf		5254652	0					
ANR	5254681	ArgumentList	t		5254652	1					
ANR	5254682	Argument	t		5254652	0					
ANR	5254683	Identifier	t		5254652	0					
ANR	5254684	Argument	format		5254652	1					
ANR	5254685	Identifier	format		5254652	0					
ANR	5254686	Argument	args		5254652	2					
ANR	5254687	Identifier	args		5254652	0					
ANR	5254688	ExpressionStatement	va_end ( args )	119:4:4130:4142	5254652	4	True				
ANR	5254689	CallExpression	va_end ( args )		5254652	0					
ANR	5254690	Callee	va_end		5254652	0					
ANR	5254691	Identifier	va_end		5254652	0					
ANR	5254692	ArgumentList	args		5254652	1					
ANR	5254693	Argument	args		5254652	0					
ANR	5254694	Identifier	args		5254652	0					
ANR	5254695	ExpressionStatement	"assign ( s , t )"	120:4:4148:4160	5254652	5	True				
ANR	5254696	CallExpression	"assign ( s , t )"		5254652	0					
ANR	5254697	Callee	assign		5254652	0					
ANR	5254698	Identifier	assign		5254652	0					
ANR	5254699	ArgumentList	s		5254652	1					
ANR	5254700	Argument	s		5254652	0					
ANR	5254701	Identifier	s		5254652	0					
ANR	5254702	Argument	t		5254652	1					
ANR	5254703	Identifier	t		5254652	0					
ANR	5254704	ReturnStatement	return r ;	121:4:4166:4174	5254652	6	True				
ANR	5254705	Identifier	r		5254652	0					
ANR	5254706	ReturnType	int		5254652	1					
ANR	5254707	Identifier	sprintf		5254652	2					
ANR	5254708	ParameterList	"MyString & s , const char * format"		5254652	3					
ANR	5254709	Parameter	MyString & s	113:12:3910:3920	5254652	0	True				
ANR	5254710	ParameterType	MyString &		5254652	0					
ANR	5254711	Identifier	s		5254652	1					
ANR	5254712	Parameter	const char * format	113:25:3923:3940	5254652	1	True				
ANR	5254713	ParameterType	const char *		5254652	0					
ANR	5254714	Identifier	format		5254652	1					
ANR	5254715	CFGEntryNode	ENTRY		5254652		True				
ANR	5254716	CFGExitNode	EXIT		5254652		True				
ANR	5254717	Symbol	args		5254652						
ANR	5254718	Symbol	r		5254652						
ANR	5254719	Symbol	s		5254652						
ANR	5254720	Symbol	t		5254652						
ANR	5254721	Symbol	format		5254652						
ANR	5254722	Symbol	vsprintf		5254652						
ANR	5254723	Function	sprintf_cat	124:0:4179:4386							
ANR	5254724	FunctionDef	"sprintf_cat (std :: string & s , const char * format)"		5254723	0					
ANR	5254725	CompoundStatement		124:57:4236:4386	5254723	0					
ANR	5254726	IdentifierDeclStatement	va_list args ;	125:4:4242:4254	5254723	0	True				
ANR	5254727	IdentifierDecl	args		5254723	0					
ANR	5254728	IdentifierDeclType	va_list		5254723	0					
ANR	5254729	Identifier	args		5254723	1					
ANR	5254730	IdentifierDeclStatement	std :: string t ;	126:4:4260:4273	5254723	1	True				
ANR	5254731	IdentifierDecl	t		5254723	0					
ANR	5254732	IdentifierDeclType	std :: string		5254723	0					
ANR	5254733	Identifier	t		5254723	1					
ANR	5254734	ExpressionStatement	"va_start ( args , format )"	127:4:4279:4301	5254723	2	True				
ANR	5254735	CallExpression	"va_start ( args , format )"		5254723	0					
ANR	5254736	Callee	va_start		5254723	0					
ANR	5254737	Identifier	va_start		5254723	0					
ANR	5254738	ArgumentList	args		5254723	1					
ANR	5254739	Argument	args		5254723	0					
ANR	5254740	Identifier	args		5254723	0					
ANR	5254741	Argument	format		5254723	1					
ANR	5254742	Identifier	format		5254723	0					
ANR	5254743	IdentifierDeclStatement	"int r = vsprintf ( t , format , args ) ;"	128:4:4307:4340	5254723	3	True				
ANR	5254744	IdentifierDecl	"r = vsprintf ( t , format , args )"		5254723	0					
ANR	5254745	IdentifierDeclType	int		5254723	0					
ANR	5254746	Identifier	r		5254723	1					
ANR	5254747	AssignmentExpression	"r = vsprintf ( t , format , args )"		5254723	2		=			
ANR	5254748	Identifier	r		5254723	0					
ANR	5254749	CallExpression	"vsprintf ( t , format , args )"		5254723	1					
ANR	5254750	Callee	vsprintf		5254723	0					
ANR	5254751	Identifier	vsprintf		5254723	0					
ANR	5254752	ArgumentList	t		5254723	1					
ANR	5254753	Argument	t		5254723	0					
ANR	5254754	Identifier	t		5254723	0					
ANR	5254755	Argument	format		5254723	1					
ANR	5254756	Identifier	format		5254723	0					
ANR	5254757	Argument	args		5254723	2					
ANR	5254758	Identifier	args		5254723	0					
ANR	5254759	ExpressionStatement	va_end ( args )	129:4:4346:4358	5254723	4	True				
ANR	5254760	CallExpression	va_end ( args )		5254723	0					
ANR	5254761	Callee	va_end		5254723	0					
ANR	5254762	Identifier	va_end		5254723	0					
ANR	5254763	ArgumentList	args		5254723	1					
ANR	5254764	Argument	args		5254723	0					
ANR	5254765	Identifier	args		5254723	0					
ANR	5254766	ExpressionStatement	s += t	130:4:4364:4370	5254723	5	True				
ANR	5254767	AssignmentExpression	s += t		5254723	0		+=			
ANR	5254768	Identifier	s		5254723	0					
ANR	5254769	Identifier	t		5254723	1					
ANR	5254770	ReturnStatement	return r ;	131:4:4376:4384	5254723	6	True				
ANR	5254771	Identifier	r		5254723	0					
ANR	5254772	ReturnType	int		5254723	1					
ANR	5254773	Identifier	sprintf_cat		5254723	2					
ANR	5254774	ParameterList	"std :: string & s , const char * format"		5254723	3					
ANR	5254775	Parameter	std :: string & s	124:16:4195:4208	5254723	0	True				
ANR	5254776	ParameterType	std :: string &		5254723	0					
ANR	5254777	Identifier	s		5254723	1					
ANR	5254778	Parameter	const char * format	124:32:4211:4228	5254723	1	True				
ANR	5254779	ParameterType	const char *		5254723	0					
ANR	5254780	Identifier	format		5254723	1					
ANR	5254781	CFGEntryNode	ENTRY		5254723		True				
ANR	5254782	CFGExitNode	EXIT		5254723		True				
ANR	5254783	Symbol	args		5254723						
ANR	5254784	Symbol	r		5254723						
ANR	5254785	Symbol	s		5254723						
ANR	5254786	Symbol	t		5254723						
ANR	5254787	Symbol	format		5254723						
ANR	5254788	Symbol	vsprintf		5254723						
ANR	5254789	Function	sprintf_cat	134:0:4389:4601							
ANR	5254790	FunctionDef	"sprintf_cat (MyString & s , const char * format)"		5254789	0					
ANR	5254791	CompoundStatement		134:54:4443:4601	5254789	0					
ANR	5254792	IdentifierDeclStatement	va_list args ;	135:4:4449:4461	5254789	0	True				
ANR	5254793	IdentifierDecl	args		5254789	0					
ANR	5254794	IdentifierDeclType	va_list		5254789	0					
ANR	5254795	Identifier	args		5254789	1					
ANR	5254796	IdentifierDeclStatement	std :: string t ;	136:4:4467:4480	5254789	1	True				
ANR	5254797	IdentifierDecl	t		5254789	0					
ANR	5254798	IdentifierDeclType	std :: string		5254789	0					
ANR	5254799	Identifier	t		5254789	1					
ANR	5254800	ExpressionStatement	"va_start ( args , format )"	137:4:4486:4508	5254789	2	True				
ANR	5254801	CallExpression	"va_start ( args , format )"		5254789	0					
ANR	5254802	Callee	va_start		5254789	0					
ANR	5254803	Identifier	va_start		5254789	0					
ANR	5254804	ArgumentList	args		5254789	1					
ANR	5254805	Argument	args		5254789	0					
ANR	5254806	Identifier	args		5254789	0					
ANR	5254807	Argument	format		5254789	1					
ANR	5254808	Identifier	format		5254789	0					
ANR	5254809	IdentifierDeclStatement	"int r = vsprintf ( t , format , args ) ;"	138:4:4514:4547	5254789	3	True				
ANR	5254810	IdentifierDecl	"r = vsprintf ( t , format , args )"		5254789	0					
ANR	5254811	IdentifierDeclType	int		5254789	0					
ANR	5254812	Identifier	r		5254789	1					
ANR	5254813	AssignmentExpression	"r = vsprintf ( t , format , args )"		5254789	2		=			
ANR	5254814	Identifier	r		5254789	0					
ANR	5254815	CallExpression	"vsprintf ( t , format , args )"		5254789	1					
ANR	5254816	Callee	vsprintf		5254789	0					
ANR	5254817	Identifier	vsprintf		5254789	0					
ANR	5254818	ArgumentList	t		5254789	1					
ANR	5254819	Argument	t		5254789	0					
ANR	5254820	Identifier	t		5254789	0					
ANR	5254821	Argument	format		5254789	1					
ANR	5254822	Identifier	format		5254789	0					
ANR	5254823	Argument	args		5254789	2					
ANR	5254824	Identifier	args		5254789	0					
ANR	5254825	ExpressionStatement	va_end ( args )	139:4:4553:4565	5254789	4	True				
ANR	5254826	CallExpression	va_end ( args )		5254789	0					
ANR	5254827	Callee	va_end		5254789	0					
ANR	5254828	Identifier	va_end		5254789	0					
ANR	5254829	ArgumentList	args		5254789	1					
ANR	5254830	Argument	args		5254789	0					
ANR	5254831	Identifier	args		5254789	0					
ANR	5254832	ExpressionStatement	s += t . c_str ( )	140:4:4571:4585	5254789	5	True				
ANR	5254833	AssignmentExpression	s += t . c_str ( )		5254789	0		+=			
ANR	5254834	Identifier	s		5254789	0					
ANR	5254835	CallExpression	t . c_str ( )		5254789	1					
ANR	5254836	Callee	t . c_str		5254789	0					
ANR	5254837	MemberAccess	t . c_str		5254789	0					
ANR	5254838	Identifier	t		5254789	0					
ANR	5254839	Identifier	c_str		5254789	1					
ANR	5254840	ArgumentList			5254789	1					
ANR	5254841	ReturnStatement	return r ;	141:4:4591:4599	5254789	6	True				
ANR	5254842	Identifier	r		5254789	0					
ANR	5254843	ReturnType	int		5254789	1					
ANR	5254844	Identifier	sprintf_cat		5254789	2					
ANR	5254845	ParameterList	"MyString & s , const char * format"		5254789	3					
ANR	5254846	Parameter	MyString & s	134:16:4405:4415	5254789	0	True				
ANR	5254847	ParameterType	MyString &		5254789	0					
ANR	5254848	Identifier	s		5254789	1					
ANR	5254849	Parameter	const char * format	134:29:4418:4435	5254789	1	True				
ANR	5254850	ParameterType	const char *		5254789	0					
ANR	5254851	Identifier	format		5254789	1					
ANR	5254852	CFGEntryNode	ENTRY		5254789		True				
ANR	5254853	CFGExitNode	EXIT		5254789		True				
ANR	5254854	Symbol	args		5254789						
ANR	5254855	Symbol	r		5254789						
ANR	5254856	Symbol	s		5254789						
ANR	5254857	Symbol	t		5254789						
ANR	5254858	Symbol	t . c_str		5254789						
ANR	5254859	Symbol	format		5254789						
ANR	5254860	Symbol	vsprintf		5254789						
ANR	5254861	Function	chomp	144:0:4604:4904							
ANR	5254862	FunctionDef	chomp (std :: string & str)		5254861	0					
ANR	5254863	CompoundStatement		145:0:4633:4904	5254861	0					
ANR	5254864	IdentifierDeclStatement	bool chomped = false ;	146:1:4636:4656	5254861	0	True				
ANR	5254865	IdentifierDecl	chomped = false		5254861	0					
ANR	5254866	IdentifierDeclType	bool		5254861	0					
ANR	5254867	Identifier	chomped		5254861	1					
ANR	5254868	AssignmentExpression	chomped = false		5254861	2		=			
ANR	5254869	Identifier	false		5254861	0					
ANR	5254870	Identifier	false		5254861	1					
ANR	5254871	IfStatement	if ( str . empty ( ) )		5254861	1					
ANR	5254872	Condition	str . empty ( )	147:5:4663:4673	5254861	0	True				
ANR	5254873	CallExpression	str . empty ( )		5254861	0					
ANR	5254874	Callee	str . empty		5254861	0					
ANR	5254875	MemberAccess	str . empty		5254861	0					
ANR	5254876	Identifier	str		5254861	0					
ANR	5254877	Identifier	empty		5254861	1					
ANR	5254878	ArgumentList			5254861	1					
ANR	5254879	CompoundStatement		3:19:43:43	5254861	1					
ANR	5254880	ReturnStatement	return chomped ;	148:2:4681:4695	5254861	0	True				
ANR	5254881	Identifier	chomped		5254861	0					
ANR	5254882	IfStatement	if ( str [ str . length ( ) - 1 ] == '\\n' )		5254861	2					
ANR	5254883	Condition	str [ str . length ( ) - 1 ] == '\\n'	150:5:4705:4731	5254861	0	True				
ANR	5254884	EqualityExpression	str [ str . length ( ) - 1 ] == '\\n'		5254861	0		==			
ANR	5254885	ArrayIndexing	str [ str . length ( ) - 1 ]		5254861	0					
ANR	5254886	Identifier	str		5254861	0					
ANR	5254887	AdditiveExpression	str . length ( ) - 1		5254861	1		-			
ANR	5254888	CallExpression	str . length ( )		5254861	0					
ANR	5254889	Callee	str . length		5254861	0					
ANR	5254890	MemberAccess	str . length		5254861	0					
ANR	5254891	Identifier	str		5254861	0					
ANR	5254892	Identifier	length		5254861	1					
ANR	5254893	ArgumentList			5254861	1					
ANR	5254894	PrimaryExpression	1		5254861	1					
ANR	5254895	PrimaryExpression	'\\n'		5254861	1					
ANR	5254896	CompoundStatement		6:35:101:101	5254861	1					
ANR	5254897	ExpressionStatement	str . erase ( str . length ( ) - 1 )	151:2:4739:4764	5254861	0	True				
ANR	5254898	CallExpression	str . erase ( str . length ( ) - 1 )		5254861	0					
ANR	5254899	Callee	str . erase		5254861	0					
ANR	5254900	MemberAccess	str . erase		5254861	0					
ANR	5254901	Identifier	str		5254861	0					
ANR	5254902	Identifier	erase		5254861	1					
ANR	5254903	ArgumentList	str . length ( ) - 1		5254861	1					
ANR	5254904	Argument	str . length ( ) - 1		5254861	0					
ANR	5254905	AdditiveExpression	str . length ( ) - 1		5254861	0		-			
ANR	5254906	CallExpression	str . length ( )		5254861	0					
ANR	5254907	Callee	str . length		5254861	0					
ANR	5254908	MemberAccess	str . length		5254861	0					
ANR	5254909	Identifier	str		5254861	0					
ANR	5254910	Identifier	length		5254861	1					
ANR	5254911	ArgumentList			5254861	1					
ANR	5254912	PrimaryExpression	1		5254861	1					
ANR	5254913	ExpressionStatement	chomped = true	152:2:4768:4782	5254861	1	True				
ANR	5254914	AssignmentExpression	chomped = true		5254861	0		=			
ANR	5254915	Identifier	chomped		5254861	0					
ANR	5254916	Identifier	true		5254861	1					
ANR	5254917	IfStatement	if ( ( str . length ( ) > 0 ) && ( str [ str . length ( ) - 1 ] == '\\r' ) )		5254861	2					
ANR	5254918	Condition	( str . length ( ) > 0 ) && ( str [ str . length ( ) - 1 ] == '\\r' )	153:6:4790:4844	5254861	0	True				
ANR	5254919	AndExpression	( str . length ( ) > 0 ) && ( str [ str . length ( ) - 1 ] == '\\r' )		5254861	0		&&			
ANR	5254920	RelationalExpression	str . length ( ) > 0		5254861	0		>			
ANR	5254921	CallExpression	str . length ( )		5254861	0					
ANR	5254922	Callee	str . length		5254861	0					
ANR	5254923	MemberAccess	str . length		5254861	0					
ANR	5254924	Identifier	str		5254861	0					
ANR	5254925	Identifier	length		5254861	1					
ANR	5254926	ArgumentList			5254861	1					
ANR	5254927	PrimaryExpression	0		5254861	1					
ANR	5254928	EqualityExpression	str [ str . length ( ) - 1 ] == '\\r'		5254861	1		==			
ANR	5254929	ArrayIndexing	str [ str . length ( ) - 1 ]		5254861	0					
ANR	5254930	Identifier	str		5254861	0					
ANR	5254931	AdditiveExpression	str . length ( ) - 1		5254861	1		-			
ANR	5254932	CallExpression	str . length ( )		5254861	0					
ANR	5254933	Callee	str . length		5254861	0					
ANR	5254934	MemberAccess	str . length		5254861	0					
ANR	5254935	Identifier	str		5254861	0					
ANR	5254936	Identifier	length		5254861	1					
ANR	5254937	ArgumentList			5254861	1					
ANR	5254938	PrimaryExpression	1		5254861	1					
ANR	5254939	PrimaryExpression	'\\r'		5254861	1					
ANR	5254940	CompoundStatement		9:64:214:214	5254861	1					
ANR	5254941	ExpressionStatement	str . erase ( str . length ( ) - 1 )	154:3:4853:4878	5254861	0	True				
ANR	5254942	CallExpression	str . erase ( str . length ( ) - 1 )		5254861	0					
ANR	5254943	Callee	str . erase		5254861	0					
ANR	5254944	MemberAccess	str . erase		5254861	0					
ANR	5254945	Identifier	str		5254861	0					
ANR	5254946	Identifier	erase		5254861	1					
ANR	5254947	ArgumentList	str . length ( ) - 1		5254861	1					
ANR	5254948	Argument	str . length ( ) - 1		5254861	0					
ANR	5254949	AdditiveExpression	str . length ( ) - 1		5254861	0		-			
ANR	5254950	CallExpression	str . length ( )		5254861	0					
ANR	5254951	Callee	str . length		5254861	0					
ANR	5254952	MemberAccess	str . length		5254861	0					
ANR	5254953	Identifier	str		5254861	0					
ANR	5254954	Identifier	length		5254861	1					
ANR	5254955	ArgumentList			5254861	1					
ANR	5254956	PrimaryExpression	1		5254861	1					
ANR	5254957	ReturnStatement	return chomped ;	157:1:4888:4902	5254861	3	True				
ANR	5254958	Identifier	chomped		5254861	0					
ANR	5254959	ReturnType	bool		5254861	1					
ANR	5254960	Identifier	chomp		5254861	2					
ANR	5254961	ParameterList	std :: string & str		5254861	3					
ANR	5254962	Parameter	std :: string & str	144:11:4615:4630	5254861	0	True				
ANR	5254963	ParameterType	std :: string &		5254861	0					
ANR	5254964	Identifier	str		5254861	1					
ANR	5254965	CFGEntryNode	ENTRY		5254861		True				
ANR	5254966	CFGExitNode	EXIT		5254861		True				
ANR	5254967	Symbol	str		5254861						
ANR	5254968	Symbol	str . empty		5254861						
ANR	5254969	Symbol	false		5254861						
ANR	5254970	Symbol	true		5254861						
ANR	5254971	Symbol	str . length		5254861						
ANR	5254972	Symbol	* str		5254861						
ANR	5254973	Symbol	chomped		5254861						
ANR	5254974	Symbol	* str . length		5254861						
ANR	5254975	Function	trim	160:0:4907:5257							
ANR	5254976	FunctionDef	trim (std :: string & str)		5254975	0					
ANR	5254977	CompoundStatement		161:0:4937:5257	5254975	0					
ANR	5254978	IfStatement	if ( str . empty ( ) )		5254975	0					
ANR	5254979	Condition	str . empty ( )	162:5:4944:4954	5254975	0	True				
ANR	5254980	CallExpression	str . empty ( )		5254975	0					
ANR	5254981	Callee	str . empty		5254975	0					
ANR	5254982	MemberAccess	str . empty		5254975	0					
ANR	5254983	Identifier	str		5254975	0					
ANR	5254984	Identifier	empty		5254975	1					
ANR	5254985	ArgumentList			5254975	1					
ANR	5254986	CompoundStatement		2:19:20:20	5254975	1					
ANR	5254987	ReturnStatement	return ;	163:2:4962:4968	5254975	0	True				
ANR	5254988	IdentifierDeclStatement	unsigned begin = 0 ;	165:1:4974:4992	5254975	1	True				
ANR	5254989	IdentifierDecl	begin = 0		5254975	0					
ANR	5254990	IdentifierDeclType	unsigned		5254975	0					
ANR	5254991	Identifier	begin		5254975	1					
ANR	5254992	AssignmentExpression	begin = 0		5254975	2		=			
ANR	5254993	Identifier	begin		5254975	0					
ANR	5254994	PrimaryExpression	0		5254975	1					
ANR	5254995	WhileStatement	while ( begin < str . length ( ) && isspace ( str [ begin ] ) )		5254975	2					
ANR	5254996	Condition	begin < str . length ( ) && isspace ( str [ begin ] )	166:9:5003:5045	5254975	0	True				
ANR	5254997	AndExpression	begin < str . length ( ) && isspace ( str [ begin ] )		5254975	0		&&			
ANR	5254998	RelationalExpression	begin < str . length ( )		5254975	0		<			
ANR	5254999	Identifier	begin		5254975	0					
ANR	5255000	CallExpression	str . length ( )		5254975	1					
ANR	5255001	Callee	str . length		5254975	0					
ANR	5255002	MemberAccess	str . length		5254975	0					
ANR	5255003	Identifier	str		5254975	0					
ANR	5255004	Identifier	length		5254975	1					
ANR	5255005	ArgumentList			5254975	1					
ANR	5255006	CallExpression	isspace ( str [ begin ] )		5254975	1					
ANR	5255007	Callee	isspace		5254975	0					
ANR	5255008	Identifier	isspace		5254975	0					
ANR	5255009	ArgumentList	str [ begin ]		5254975	1					
ANR	5255010	Argument	str [ begin ]		5254975	0					
ANR	5255011	ArrayIndexing	str [ begin ]		5254975	0					
ANR	5255012	Identifier	str		5254975	0					
ANR	5255013	Identifier	begin		5254975	1					
ANR	5255014	CompoundStatement		6:55:111:111	5254975	1					
ANR	5255015	ExpressionStatement	++ begin	167:2:5053:5060	5254975	0	True				
ANR	5255016	UnaryExpression	++ begin		5254975	0					
ANR	5255017	IncDec	++		5254975	0					
ANR	5255018	Identifier	begin		5254975	1					
ANR	5255019	IdentifierDeclStatement	int end = str . length ( ) - 1 ;	170:1:5067:5095	5254975	3	True				
ANR	5255020	IdentifierDecl	end = str . length ( ) - 1		5254975	0					
ANR	5255021	IdentifierDeclType	int		5254975	0					
ANR	5255022	Identifier	end		5254975	1					
ANR	5255023	AssignmentExpression	end = str . length ( ) - 1		5254975	2		=			
ANR	5255024	Identifier	end		5254975	0					
ANR	5255025	AdditiveExpression	str . length ( ) - 1		5254975	1		-			
ANR	5255026	CallExpression	str . length ( )		5254975	0					
ANR	5255027	Callee	str . length		5254975	0					
ANR	5255028	MemberAccess	str . length		5254975	0					
ANR	5255029	Identifier	str		5254975	0					
ANR	5255030	Identifier	length		5254975	1					
ANR	5255031	ArgumentList			5254975	1					
ANR	5255032	PrimaryExpression	1		5254975	1					
ANR	5255033	WhileStatement	while ( end >= 0 && isspace ( str [ end ] ) )		5254975	4					
ANR	5255034	Condition	end >= 0 && isspace ( str [ end ] )	171:9:5106:5134	5254975	0	True				
ANR	5255035	AndExpression	end >= 0 && isspace ( str [ end ] )		5254975	0		&&			
ANR	5255036	RelationalExpression	end >= 0		5254975	0		>=			
ANR	5255037	Identifier	end		5254975	0					
ANR	5255038	PrimaryExpression	0		5254975	1					
ANR	5255039	CallExpression	isspace ( str [ end ] )		5254975	1					
ANR	5255040	Callee	isspace		5254975	0					
ANR	5255041	Identifier	isspace		5254975	0					
ANR	5255042	ArgumentList	str [ end ]		5254975	1					
ANR	5255043	Argument	str [ end ]		5254975	0					
ANR	5255044	ArrayIndexing	str [ end ]		5254975	0					
ANR	5255045	Identifier	str		5254975	0					
ANR	5255046	Identifier	end		5254975	1					
ANR	5255047	CompoundStatement		11:41:200:200	5254975	1					
ANR	5255048	ExpressionStatement	-- end	172:2:5142:5147	5254975	0	True				
ANR	5255049	UnaryExpression	-- end		5254975	0					
ANR	5255050	IncDec	--		5254975	0					
ANR	5255051	Identifier	end		5254975	1					
ANR	5255052	IfStatement	if ( begin != 0 || end != ( int ) ( str . length ( ) ) - 1 )		5254975	5					
ANR	5255053	Condition	begin != 0 || end != ( int ) ( str . length ( ) ) - 1	175:6:5159:5202	5254975	0	True				
ANR	5255054	OrExpression	begin != 0 || end != ( int ) ( str . length ( ) ) - 1		5254975	0		||			
ANR	5255055	EqualityExpression	begin != 0		5254975	0		!=			
ANR	5255056	Identifier	begin		5254975	0					
ANR	5255057	PrimaryExpression	0		5254975	1					
ANR	5255058	EqualityExpression	end != ( int ) ( str . length ( ) ) - 1		5254975	1		!=			
ANR	5255059	Identifier	end		5254975	0					
ANR	5255060	AdditiveExpression	( int ) ( str . length ( ) ) - 1		5254975	1		-			
ANR	5255061	CastExpression	( int ) ( str . length ( ) )		5254975	0					
ANR	5255062	CastTarget	int		5254975	0					
ANR	5255063	CallExpression	str . length ( )		5254975	1					
ANR	5255064	Callee	str . length		5254975	0					
ANR	5255065	MemberAccess	str . length		5254975	0					
ANR	5255066	Identifier	str		5254975	0					
ANR	5255067	Identifier	length		5254975	1					
ANR	5255068	ArgumentList			5254975	1					
ANR	5255069	PrimaryExpression	1		5254975	1					
ANR	5255070	CompoundStatement		15:53:268:268	5254975	1					
ANR	5255071	ExpressionStatement	"str = str . substr ( begin , ( end - begin ) + 1 )"	176:2:5210:5252	5254975	0	True				
ANR	5255072	AssignmentExpression	"str = str . substr ( begin , ( end - begin ) + 1 )"		5254975	0		=			
ANR	5255073	Identifier	str		5254975	0					
ANR	5255074	CallExpression	"str . substr ( begin , ( end - begin ) + 1 )"		5254975	1					
ANR	5255075	Callee	str . substr		5254975	0					
ANR	5255076	MemberAccess	str . substr		5254975	0					
ANR	5255077	Identifier	str		5254975	0					
ANR	5255078	Identifier	substr		5254975	1					
ANR	5255079	ArgumentList	begin		5254975	1					
ANR	5255080	Argument	begin		5254975	0					
ANR	5255081	Identifier	begin		5254975	0					
ANR	5255082	Argument	( end - begin ) + 1		5254975	1					
ANR	5255083	AdditiveExpression	( end - begin ) + 1		5254975	0		+			
ANR	5255084	AdditiveExpression	end - begin		5254975	0		-			
ANR	5255085	Identifier	end		5254975	0					
ANR	5255086	Identifier	begin		5254975	1					
ANR	5255087	PrimaryExpression	1		5254975	1					
ANR	5255088	ReturnType	void		5254975	1					
ANR	5255089	Identifier	trim		5254975	2					
ANR	5255090	ParameterList	std :: string & str		5254975	3					
ANR	5255091	Parameter	std :: string & str	160:11:4918:4933	5254975	0	True				
ANR	5255092	ParameterType	std :: string &		5254975	0					
ANR	5255093	Identifier	str		5254975	1					
ANR	5255094	CFGEntryNode	ENTRY		5254975		True				
ANR	5255095	CFGExitNode	EXIT		5254975		True				
ANR	5255096	Symbol	str		5254975						
ANR	5255097	Symbol	str . empty		5254975						
ANR	5255098	Symbol	* begin		5254975						
ANR	5255099	Symbol	isspace		5254975						
ANR	5255100	Symbol	str . substr		5254975						
ANR	5255101	Symbol	end		5254975						
ANR	5255102	Symbol	* end		5254975						
ANR	5255103	Symbol	* str		5254975						
ANR	5255104	Symbol	str . length		5254975						
ANR	5255105	Symbol	begin		5254975						
ANR	5255106	Function	upper_case	188:0:5386:5539							
ANR	5255107	FunctionDef	upper_case (std :: string & str)		5255106	0					
ANR	5255108	CompoundStatement		189:0:5422:5539	5255106	0					
ANR	5255109	ForStatement	for ( int i = 0 ; str [ i ] ; i ++ )		5255106	0					
ANR	5255110	ForInit	int i = 0 ;	190:7:5431:5440	5255106	0	True				
ANR	5255111	IdentifierDeclStatement	int i = 0 ;		5255106	0					
ANR	5255112	IdentifierDecl	i = 0		5255106	0					
ANR	5255113	IdentifierDeclType	int		5255106	0					
ANR	5255114	Identifier	i		5255106	1					
ANR	5255115	AssignmentExpression	i = 0		5255106	2		=			
ANR	5255116	Identifier	i		5255106	0					
ANR	5255117	PrimaryExpression	0		5255106	1					
ANR	5255118	Condition	str [ i ]	190:18:5442:5447	5255106	1	True				
ANR	5255119	ArrayIndexing	str [ i ]		5255106	0					
ANR	5255120	Identifier	str		5255106	0					
ANR	5255121	Identifier	i		5255106	1					
ANR	5255122	PostIncDecOperationExpression	i ++	190:26:5450:5452	5255106	2	True				
ANR	5255123	Identifier	i		5255106	0					
ANR	5255124	IncDec	++		5255106	1					
ANR	5255125	CompoundStatement		2:32:33:33	5255106	3					
ANR	5255126	IfStatement	if ( str [ i ] >= 'a' && str [ i ] <= 'z' )		5255106	0					
ANR	5255127	Condition	str [ i ] >= 'a' && str [ i ] <= 'z'	191:7:5465:5494	5255106	0	True				
ANR	5255128	AndExpression	str [ i ] >= 'a' && str [ i ] <= 'z'		5255106	0		&&			
ANR	5255129	RelationalExpression	str [ i ] >= 'a'		5255106	0		>=			
ANR	5255130	ArrayIndexing	str [ i ]		5255106	0					
ANR	5255131	Identifier	str		5255106	0					
ANR	5255132	Identifier	i		5255106	1					
ANR	5255133	PrimaryExpression	'a'		5255106	1					
ANR	5255134	RelationalExpression	str [ i ] <= 'z'		5255106	1		<=			
ANR	5255135	ArrayIndexing	str [ i ]		5255106	0					
ANR	5255136	Identifier	str		5255106	0					
ANR	5255137	Identifier	i		5255106	1					
ANR	5255138	PrimaryExpression	'z'		5255106	1					
ANR	5255139	CompoundStatement		3:40:75:75	5255106	1					
ANR	5255140	ExpressionStatement	str [ i ] = _toupper ( str [ i ] )	192:3:5503:5530	5255106	0	True				
ANR	5255141	AssignmentExpression	str [ i ] = _toupper ( str [ i ] )		5255106	0		=			
ANR	5255142	ArrayIndexing	str [ i ]		5255106	0					
ANR	5255143	Identifier	str		5255106	0					
ANR	5255144	Identifier	i		5255106	1					
ANR	5255145	CallExpression	_toupper ( str [ i ] )		5255106	1					
ANR	5255146	Callee	_toupper		5255106	0					
ANR	5255147	Identifier	_toupper		5255106	0					
ANR	5255148	ArgumentList	str [ i ]		5255106	1					
ANR	5255149	Argument	str [ i ]		5255106	0					
ANR	5255150	ArrayIndexing	str [ i ]		5255106	0					
ANR	5255151	Identifier	str		5255106	0					
ANR	5255152	Identifier	i		5255106	1					
ANR	5255153	ReturnType	void		5255106	1					
ANR	5255154	Identifier	upper_case		5255106	2					
ANR	5255155	ParameterList	std :: string & str		5255106	3					
ANR	5255156	Parameter	std :: string & str	188:17:5403:5418	5255106	0	True				
ANR	5255157	ParameterType	std :: string &		5255106	0					
ANR	5255158	Identifier	str		5255106	1					
ANR	5255159	CFGEntryNode	ENTRY		5255106		True				
ANR	5255160	CFGExitNode	EXIT		5255106		True				
ANR	5255161	Symbol	str		5255106						
ANR	5255162	Symbol	* i		5255106						
ANR	5255163	Symbol	i		5255106						
ANR	5255164	Symbol	_toupper		5255106						
ANR	5255165	Symbol	* str		5255106						
ANR	5255166	Function	lower_case	197:0:5542:5695							
ANR	5255167	FunctionDef	lower_case (std :: string & str)		5255166	0					
ANR	5255168	CompoundStatement		198:0:5578:5695	5255166	0					
ANR	5255169	ForStatement	for ( int i = 0 ; str [ i ] ; i ++ )		5255166	0					
ANR	5255170	ForInit	int i = 0 ;	199:7:5587:5596	5255166	0	True				
ANR	5255171	IdentifierDeclStatement	int i = 0 ;		5255166	0					
ANR	5255172	IdentifierDecl	i = 0		5255166	0					
ANR	5255173	IdentifierDeclType	int		5255166	0					
ANR	5255174	Identifier	i		5255166	1					
ANR	5255175	AssignmentExpression	i = 0		5255166	2		=			
ANR	5255176	Identifier	i		5255166	0					
ANR	5255177	PrimaryExpression	0		5255166	1					
ANR	5255178	Condition	str [ i ]	199:18:5598:5603	5255166	1	True				
ANR	5255179	ArrayIndexing	str [ i ]		5255166	0					
ANR	5255180	Identifier	str		5255166	0					
ANR	5255181	Identifier	i		5255166	1					
ANR	5255182	PostIncDecOperationExpression	i ++	199:26:5606:5608	5255166	2	True				
ANR	5255183	Identifier	i		5255166	0					
ANR	5255184	IncDec	++		5255166	1					
ANR	5255185	CompoundStatement		2:32:33:33	5255166	3					
ANR	5255186	IfStatement	if ( str [ i ] >= 'A' && str [ i ] <= 'Z' )		5255166	0					
ANR	5255187	Condition	str [ i ] >= 'A' && str [ i ] <= 'Z'	200:7:5621:5650	5255166	0	True				
ANR	5255188	AndExpression	str [ i ] >= 'A' && str [ i ] <= 'Z'		5255166	0		&&			
ANR	5255189	RelationalExpression	str [ i ] >= 'A'		5255166	0		>=			
ANR	5255190	ArrayIndexing	str [ i ]		5255166	0					
ANR	5255191	Identifier	str		5255166	0					
ANR	5255192	Identifier	i		5255166	1					
ANR	5255193	PrimaryExpression	'A'		5255166	1					
ANR	5255194	RelationalExpression	str [ i ] <= 'Z'		5255166	1		<=			
ANR	5255195	ArrayIndexing	str [ i ]		5255166	0					
ANR	5255196	Identifier	str		5255166	0					
ANR	5255197	Identifier	i		5255166	1					
ANR	5255198	PrimaryExpression	'Z'		5255166	1					
ANR	5255199	CompoundStatement		3:40:75:75	5255166	1					
ANR	5255200	ExpressionStatement	str [ i ] = _tolower ( str [ i ] )	201:3:5659:5686	5255166	0	True				
ANR	5255201	AssignmentExpression	str [ i ] = _tolower ( str [ i ] )		5255166	0		=			
ANR	5255202	ArrayIndexing	str [ i ]		5255166	0					
ANR	5255203	Identifier	str		5255166	0					
ANR	5255204	Identifier	i		5255166	1					
ANR	5255205	CallExpression	_tolower ( str [ i ] )		5255166	1					
ANR	5255206	Callee	_tolower		5255166	0					
ANR	5255207	Identifier	_tolower		5255166	0					
ANR	5255208	ArgumentList	str [ i ]		5255166	1					
ANR	5255209	Argument	str [ i ]		5255166	0					
ANR	5255210	ArrayIndexing	str [ i ]		5255166	0					
ANR	5255211	Identifier	str		5255166	0					
ANR	5255212	Identifier	i		5255166	1					
ANR	5255213	ReturnType	void		5255166	1					
ANR	5255214	Identifier	lower_case		5255166	2					
ANR	5255215	ParameterList	std :: string & str		5255166	3					
ANR	5255216	Parameter	std :: string & str	197:17:5559:5574	5255166	0	True				
ANR	5255217	ParameterType	std :: string &		5255166	0					
ANR	5255218	Identifier	str		5255166	1					
ANR	5255219	CFGEntryNode	ENTRY		5255166		True				
ANR	5255220	CFGExitNode	EXIT		5255166		True				
ANR	5255221	Symbol	str		5255166						
ANR	5255222	Symbol	* i		5255166						
ANR	5255223	Symbol	_tolower		5255166						
ANR	5255224	Symbol	i		5255166						
ANR	5255225	Symbol	* str		5255166						
ANR	5255226	DeclStmt									
ANR	5255227	Decl							char	char *	tokenBuf
ANR	5255228	DeclStmt									
ANR	5255229	Decl							char	char *	nextToken
ANR	5255230	Function	Tokenize	209:0:5760:5823							
ANR	5255231	FunctionDef	Tokenize (const MyString & str)		5255230	0					
ANR	5255232	CompoundStatement		210:0:5795:5823	5255230	0					
ANR	5255233	ExpressionStatement	Tokenize ( str . Value ( ) )	211:1:5798:5821	5255230	0	True				
ANR	5255234	CallExpression	Tokenize ( str . Value ( ) )		5255230	0					
ANR	5255235	Callee	Tokenize		5255230	0					
ANR	5255236	Identifier	Tokenize		5255230	0					
ANR	5255237	ArgumentList	str . Value ( )		5255230	1					
ANR	5255238	Argument	str . Value ( )		5255230	0					
ANR	5255239	CallExpression	str . Value ( )		5255230	0					
ANR	5255240	Callee	str . Value		5255230	0					
ANR	5255241	MemberAccess	str . Value		5255230	0					
ANR	5255242	Identifier	str		5255230	0					
ANR	5255243	Identifier	Value		5255230	1					
ANR	5255244	ArgumentList			5255230	1					
ANR	5255245	ReturnType	void		5255230	1					
ANR	5255246	Identifier	Tokenize		5255230	2					
ANR	5255247	ParameterList	const MyString & str		5255230	3					
ANR	5255248	Parameter	const MyString & str	209:14:5774:5792	5255230	0	True				
ANR	5255249	ParameterType	const MyString &		5255230	0					
ANR	5255250	Identifier	str		5255230	1					
ANR	5255251	CFGEntryNode	ENTRY		5255230		True				
ANR	5255252	CFGExitNode	EXIT		5255230		True				
ANR	5255253	Symbol	str		5255230						
ANR	5255254	Symbol	str . Value		5255230						
ANR	5255255	Function	Tokenize	214:0:5826:5892							
ANR	5255256	FunctionDef	Tokenize (const std :: string & str)		5255255	0					
ANR	5255257	CompoundStatement		215:0:5864:5892	5255255	0					
ANR	5255258	ExpressionStatement	Tokenize ( str . c_str ( ) )	216:1:5867:5890	5255255	0	True				
ANR	5255259	CallExpression	Tokenize ( str . c_str ( ) )		5255255	0					
ANR	5255260	Callee	Tokenize		5255255	0					
ANR	5255261	Identifier	Tokenize		5255255	0					
ANR	5255262	ArgumentList	str . c_str ( )		5255255	1					
ANR	5255263	Argument	str . c_str ( )		5255255	0					
ANR	5255264	CallExpression	str . c_str ( )		5255255	0					
ANR	5255265	Callee	str . c_str		5255255	0					
ANR	5255266	MemberAccess	str . c_str		5255255	0					
ANR	5255267	Identifier	str		5255255	0					
ANR	5255268	Identifier	c_str		5255255	1					
ANR	5255269	ArgumentList			5255255	1					
ANR	5255270	ReturnType	void		5255255	1					
ANR	5255271	Identifier	Tokenize		5255255	2					
ANR	5255272	ParameterList	const std :: string & str		5255255	3					
ANR	5255273	Parameter	const std :: string & str	214:14:5840:5861	5255255	0	True				
ANR	5255274	ParameterType	const std :: string &		5255255	0					
ANR	5255275	Identifier	str		5255255	1					
ANR	5255276	CFGEntryNode	ENTRY		5255255		True				
ANR	5255277	CFGExitNode	EXIT		5255255		True				
ANR	5255278	Symbol	str		5255255						
ANR	5255279	Symbol	str . c_str		5255255						
ANR	5255280	Function	Tokenize	219:0:5895:6092							
ANR	5255281	FunctionDef	Tokenize (const char * str)		5255280	0					
ANR	5255282	CompoundStatement		220:0:5926:6092	5255280	0					
ANR	5255283	ExpressionStatement	free ( tokenBuf )	221:1:5929:5945	5255280	0	True				
ANR	5255284	CallExpression	free ( tokenBuf )		5255280	0					
ANR	5255285	Callee	free		5255280	0					
ANR	5255286	Identifier	free		5255280	0					
ANR	5255287	ArgumentList	tokenBuf		5255280	1					
ANR	5255288	Argument	tokenBuf		5255280	0					
ANR	5255289	Identifier	tokenBuf		5255280	0					
ANR	5255290	ExpressionStatement	tokenBuf = NULL	222:1:5948:5963	5255280	1	True				
ANR	5255291	AssignmentExpression	tokenBuf = NULL		5255280	0		=			
ANR	5255292	Identifier	tokenBuf		5255280	0					
ANR	5255293	Identifier	NULL		5255280	1					
ANR	5255294	ExpressionStatement	nextToken = NULL	223:1:5966:5982	5255280	2	True				
ANR	5255295	AssignmentExpression	nextToken = NULL		5255280	0		=			
ANR	5255296	Identifier	nextToken		5255280	0					
ANR	5255297	Identifier	NULL		5255280	1					
ANR	5255298	IfStatement	if ( str )		5255280	3					
ANR	5255299	Condition	str	224:6:5990:5992	5255280	0	True				
ANR	5255300	Identifier	str		5255280	0					
ANR	5255301	CompoundStatement		5:12:69:69	5255280	1					
ANR	5255302	ExpressionStatement	tokenBuf = strdup ( str )	225:2:6000:6024	5255280	0	True				
ANR	5255303	AssignmentExpression	tokenBuf = strdup ( str )		5255280	0		=			
ANR	5255304	Identifier	tokenBuf		5255280	0					
ANR	5255305	CallExpression	strdup ( str )		5255280	1					
ANR	5255306	Callee	strdup		5255280	0					
ANR	5255307	Identifier	strdup		5255280	0					
ANR	5255308	ArgumentList	str		5255280	1					
ANR	5255309	Argument	str		5255280	0					
ANR	5255310	Identifier	str		5255280	0					
ANR	5255311	IfStatement	if ( strlen ( tokenBuf ) > 0 )		5255280	1					
ANR	5255312	Condition	strlen ( tokenBuf ) > 0	226:7:6033:6054	5255280	0	True				
ANR	5255313	RelationalExpression	strlen ( tokenBuf ) > 0		5255280	0		>			
ANR	5255314	CallExpression	strlen ( tokenBuf )		5255280	0					
ANR	5255315	Callee	strlen		5255280	0					
ANR	5255316	Identifier	strlen		5255280	0					
ANR	5255317	ArgumentList	tokenBuf		5255280	1					
ANR	5255318	Argument	tokenBuf		5255280	0					
ANR	5255319	Identifier	tokenBuf		5255280	0					
ANR	5255320	PrimaryExpression	0		5255280	1					
ANR	5255321	CompoundStatement		7:32:131:131	5255280	1					
ANR	5255322	ExpressionStatement	nextToken = tokenBuf	227:3:6063:6083	5255280	0	True				
ANR	5255323	AssignmentExpression	nextToken = tokenBuf		5255280	0		=			
ANR	5255324	Identifier	nextToken		5255280	0					
ANR	5255325	Identifier	tokenBuf		5255280	1					
ANR	5255326	ReturnType	void		5255280	1					
ANR	5255327	Identifier	Tokenize		5255280	2					
ANR	5255328	ParameterList	const char * str		5255280	3					
ANR	5255329	Parameter	const char * str	219:14:5909:5923	5255280	0	True				
ANR	5255330	ParameterType	const char *		5255280	0					
ANR	5255331	Identifier	str		5255280	1					
ANR	5255332	CFGEntryNode	ENTRY		5255280		True				
ANR	5255333	CFGExitNode	EXIT		5255280		True				
ANR	5255334	Symbol	str		5255280						
ANR	5255335	Symbol	strlen		5255280						
ANR	5255336	Symbol	NULL		5255280						
ANR	5255337	Symbol	nextToken		5255280						
ANR	5255338	Symbol	strdup		5255280						
ANR	5255339	Symbol	tokenBuf		5255280						
ANR	5255340	Function	GetNextToken	232:0:6095:6608							
ANR	5255341	FunctionDef	"GetNextToken (const char * delim , bool skipBlankTokens)"		5255340	0					
ANR	5255342	CompoundStatement		233:0:6161:6608	5255340	0					
ANR	5255343	IdentifierDeclStatement	const char * result = nextToken ;	234:1:6164:6194	5255340	0	True				
ANR	5255344	IdentifierDecl	* result = nextToken		5255340	0					
ANR	5255345	IdentifierDeclType	const char *		5255340	0					
ANR	5255346	Identifier	result		5255340	1					
ANR	5255347	AssignmentExpression	* result = nextToken		5255340	2		=			
ANR	5255348	Identifier	nextToken		5255340	0					
ANR	5255349	Identifier	nextToken		5255340	1					
ANR	5255350	IfStatement	if ( ! delim || strlen ( delim ) == 0 )		5255340	1					
ANR	5255351	Condition	! delim || strlen ( delim ) == 0	236:6:6203:6230	5255340	0	True				
ANR	5255352	OrExpression	! delim || strlen ( delim ) == 0		5255340	0		||			
ANR	5255353	UnaryOperationExpression	! delim		5255340	0					
ANR	5255354	UnaryOperator	!		5255340	0					
ANR	5255355	Identifier	delim		5255340	1					
ANR	5255356	EqualityExpression	strlen ( delim ) == 0		5255340	1		==			
ANR	5255357	CallExpression	strlen ( delim )		5255340	0					
ANR	5255358	Callee	strlen		5255340	0					
ANR	5255359	Identifier	strlen		5255340	0					
ANR	5255360	ArgumentList	delim		5255340	1					
ANR	5255361	Argument	delim		5255340	0					
ANR	5255362	Identifier	delim		5255340	0					
ANR	5255363	PrimaryExpression	0		5255340	1					
ANR	5255364	CompoundStatement		4:37:72:72	5255340	1					
ANR	5255365	ExpressionStatement	result = NULL	237:2:6238:6251	5255340	0	True				
ANR	5255366	AssignmentExpression	result = NULL		5255340	0		=			
ANR	5255367	Identifier	result		5255340	0					
ANR	5255368	Identifier	NULL		5255340	1					
ANR	5255369	IfStatement	if ( result != NULL )		5255340	2					
ANR	5255370	Condition	result != NULL	240:6:6263:6276	5255340	0	True				
ANR	5255371	EqualityExpression	result != NULL		5255340	0		!=			
ANR	5255372	Identifier	result		5255340	0					
ANR	5255373	Identifier	NULL		5255340	1					
ANR	5255374	CompoundStatement		8:23:118:118	5255340	1					
ANR	5255375	WhileStatement	"while ( * nextToken != '\\0' && index ( delim , * nextToken ) == NULL )"		5255340	0					
ANR	5255376	Condition	"* nextToken != '\\0' && index ( delim , * nextToken ) == NULL"	241:10:6292:6345	5255340	0	True				
ANR	5255377	AndExpression	"* nextToken != '\\0' && index ( delim , * nextToken ) == NULL"		5255340	0		&&			
ANR	5255378	EqualityExpression	* nextToken != '\\0'		5255340	0		!=			
ANR	5255379	UnaryOperationExpression	* nextToken		5255340	0					
ANR	5255380	UnaryOperator	*		5255340	0					
ANR	5255381	Identifier	nextToken		5255340	1					
ANR	5255382	PrimaryExpression	'\\0'		5255340	1					
ANR	5255383	EqualityExpression	"index ( delim , * nextToken ) == NULL"		5255340	1		==			
ANR	5255384	CallExpression	"index ( delim , * nextToken )"		5255340	0					
ANR	5255385	Callee	index		5255340	0					
ANR	5255386	Identifier	index		5255340	0					
ANR	5255387	ArgumentList	delim		5255340	1					
ANR	5255388	Argument	delim		5255340	0					
ANR	5255389	Identifier	delim		5255340	0					
ANR	5255390	Argument	* nextToken		5255340	1					
ANR	5255391	UnaryOperationExpression	* nextToken		5255340	0					
ANR	5255392	UnaryOperator	*		5255340	0					
ANR	5255393	Identifier	nextToken		5255340	1					
ANR	5255394	Identifier	NULL		5255340	1					
ANR	5255395	CompoundStatement		9:67:187:187	5255340	1					
ANR	5255396	ExpressionStatement	nextToken ++	242:3:6354:6365	5255340	0	True				
ANR	5255397	PostIncDecOperationExpression	nextToken ++		5255340	0					
ANR	5255398	Identifier	nextToken		5255340	0					
ANR	5255399	IncDec	++		5255340	1					
ANR	5255400	IfStatement	if ( * nextToken != '\\0' )		5255340	1					
ANR	5255401	Condition	* nextToken != '\\0'	245:7:6379:6396	5255340	0	True				
ANR	5255402	EqualityExpression	* nextToken != '\\0'		5255340	0		!=			
ANR	5255403	UnaryOperationExpression	* nextToken		5255340	0					
ANR	5255404	UnaryOperator	*		5255340	0					
ANR	5255405	Identifier	nextToken		5255340	1					
ANR	5255406	PrimaryExpression	'\\0'		5255340	1					
ANR	5255407	CompoundStatement		13:28:238:238	5255340	1					
ANR	5255408	ExpressionStatement	* nextToken = '\\0'	246:3:6405:6422	5255340	0	True				
ANR	5255409	AssignmentExpression	* nextToken = '\\0'		5255340	0		=			
ANR	5255410	UnaryOperationExpression	* nextToken		5255340	0					
ANR	5255411	UnaryOperator	*		5255340	0					
ANR	5255412	Identifier	nextToken		5255340	1					
ANR	5255413	PrimaryExpression	'\\0'		5255340	1					
ANR	5255414	ExpressionStatement	nextToken ++	247:3:6427:6438	5255340	1	True				
ANR	5255415	PostIncDecOperationExpression	nextToken ++		5255340	0					
ANR	5255416	Identifier	nextToken		5255340	0					
ANR	5255417	IncDec	++		5255340	1					
ANR	5255418	ElseStatement	else		5255340	0					
ANR	5255419	CompoundStatement		16:9:287:287	5255340	0					
ANR	5255420	ExpressionStatement	nextToken = NULL	249:3:6454:6470	5255340	0	True				
ANR	5255421	AssignmentExpression	nextToken = NULL		5255340	0		=			
ANR	5255422	Identifier	nextToken		5255340	0					
ANR	5255423	Identifier	NULL		5255340	1					
ANR	5255424	IfStatement	if ( skipBlankTokens && result && strlen ( result ) == 0 )		5255340	3					
ANR	5255425	Condition	skipBlankTokens && result && strlen ( result ) == 0	253:6:6486:6533	5255340	0	True				
ANR	5255426	AndExpression	skipBlankTokens && result && strlen ( result ) == 0		5255340	0		&&			
ANR	5255427	Identifier	skipBlankTokens		5255340	0					
ANR	5255428	AndExpression	result && strlen ( result ) == 0		5255340	1		&&			
ANR	5255429	Identifier	result		5255340	0					
ANR	5255430	EqualityExpression	strlen ( result ) == 0		5255340	1		==			
ANR	5255431	CallExpression	strlen ( result )		5255340	0					
ANR	5255432	Callee	strlen		5255340	0					
ANR	5255433	Identifier	strlen		5255340	0					
ANR	5255434	ArgumentList	result		5255340	1					
ANR	5255435	Argument	result		5255340	0					
ANR	5255436	Identifier	result		5255340	0					
ANR	5255437	PrimaryExpression	0		5255340	1					
ANR	5255438	CompoundStatement		21:57:375:375	5255340	1					
ANR	5255439	ExpressionStatement	"result = GetNextToken ( delim , skipBlankTokens )"	254:2:6541:6586	5255340	0	True				
ANR	5255440	AssignmentExpression	"result = GetNextToken ( delim , skipBlankTokens )"		5255340	0		=			
ANR	5255441	Identifier	result		5255340	0					
ANR	5255442	CallExpression	"GetNextToken ( delim , skipBlankTokens )"		5255340	1					
ANR	5255443	Callee	GetNextToken		5255340	0					
ANR	5255444	Identifier	GetNextToken		5255340	0					
ANR	5255445	ArgumentList	delim		5255340	1					
ANR	5255446	Argument	delim		5255340	0					
ANR	5255447	Identifier	delim		5255340	0					
ANR	5255448	Argument	skipBlankTokens		5255340	1					
ANR	5255449	Identifier	skipBlankTokens		5255340	0					
ANR	5255450	ReturnStatement	return result ;	257:1:6593:6606	5255340	4	True				
ANR	5255451	Identifier	result		5255340	0					
ANR	5255452	ReturnType	const char *		5255340	1					
ANR	5255453	Identifier	GetNextToken		5255340	2					
ANR	5255454	ParameterList	"const char * delim , bool skipBlankTokens"		5255340	3					
ANR	5255455	Parameter	const char * delim	232:25:6120:6136	5255340	0	True				
ANR	5255456	ParameterType	const char *		5255340	0					
ANR	5255457	Identifier	delim		5255340	1					
ANR	5255458	Parameter	bool skipBlankTokens	232:44:6139:6158	5255340	1	True				
ANR	5255459	ParameterType	bool		5255340	0					
ANR	5255460	Identifier	skipBlankTokens		5255340	1					
ANR	5255461	CFGEntryNode	ENTRY		5255340		True				
ANR	5255462	CFGExitNode	EXIT		5255340		True				
ANR	5255463	Symbol	result		5255340						
ANR	5255464	Symbol	strlen		5255340						
ANR	5255465	Symbol	NULL		5255340						
ANR	5255466	Symbol	* nextToken		5255340						
ANR	5255467	Symbol	skipBlankTokens		5255340						
ANR	5255468	Symbol	nextToken		5255340						
ANR	5255469	Symbol	GetNextToken		5255340						
ANR	5255470	Symbol	index		5255340						
ANR	5255471	Symbol	delim		5255340						
ANR	5255472	Function	join	260:0:6611:6853							
ANR	5255473	FunctionDef	"join (std :: vector < std :: string > & v , char const * delim , std :: string & result)"		5255472	0					
ANR	5255474	CompoundStatement		261:0:6692:6853	5255472	0					
ANR	5255475	IdentifierDeclStatement	std :: vector < std :: string > :: iterator it ;	262:1:6695:6732	5255472	0	True				
ANR	5255476	IdentifierDecl	it		5255472	0					
ANR	5255477	IdentifierDeclType	std :: vector < std :: string > :: iterator		5255472	0					
ANR	5255478	Identifier	it		5255472	1					
ANR	5255479	ForStatement	for ( it = v . begin ( ) ; it != v . end ( ) ; it ++ )		5255472	1					
ANR	5255480	ForInit	it = v . begin ( ) ;	263:5:6739:6753	5255472	0	True				
ANR	5255481	AssignmentExpression	it = v . begin ( )		5255472	0		=			
ANR	5255482	Identifier	it		5255472	0					
ANR	5255483	CallExpression	v . begin ( )		5255472	1					
ANR	5255484	Callee	v . begin		5255472	0					
ANR	5255485	MemberAccess	v . begin		5255472	0					
ANR	5255486	Identifier	v		5255472	0					
ANR	5255487	Identifier	begin		5255472	1					
ANR	5255488	ArgumentList			5255472	1					
ANR	5255489	Condition	it != v . end ( )	264:2:6757:6769	5255472	1	True				
ANR	5255490	EqualityExpression	it != v . end ( )		5255472	0		!=			
ANR	5255491	Identifier	it		5255472	0					
ANR	5255492	CallExpression	v . end ( )		5255472	1					
ANR	5255493	Callee	v . end		5255472	0					
ANR	5255494	MemberAccess	v . end		5255472	0					
ANR	5255495	Identifier	v		5255472	0					
ANR	5255496	Identifier	end		5255472	1					
ANR	5255497	ArgumentList			5255472	1					
ANR	5255498	PostIncDecOperationExpression	it ++	265:2:6774:6777	5255472	2	True				
ANR	5255499	Identifier	it		5255472	0					
ANR	5255500	IncDec	++		5255472	1					
ANR	5255501	CompoundStatement		6:1:88:88	5255472	3					
ANR	5255502	IfStatement	if ( result . size ( ) )		5255472	0					
ANR	5255503	Condition	result . size ( )	267:6:6789:6801	5255472	0	True				
ANR	5255504	CallExpression	result . size ( )		5255472	0					
ANR	5255505	Callee	result . size		5255472	0					
ANR	5255506	MemberAccess	result . size		5255472	0					
ANR	5255507	Identifier	result		5255472	0					
ANR	5255508	Identifier	size		5255472	1					
ANR	5255509	ArgumentList			5255472	1					
ANR	5255510	CompoundStatement		7:22:112:112	5255472	1					
ANR	5255511	ExpressionStatement	result += delim	268:3:6810:6825	5255472	0	True				
ANR	5255512	AssignmentExpression	result += delim		5255472	0		+=			
ANR	5255513	Identifier	result		5255472	0					
ANR	5255514	Identifier	delim		5255472	1					
ANR	5255515	ExpressionStatement	result += ( * it )	270:2:6833:6848	5255472	1	True				
ANR	5255516	AssignmentExpression	result += ( * it )		5255472	0		+=			
ANR	5255517	Identifier	result		5255472	0					
ANR	5255518	UnaryOperationExpression	* it		5255472	1					
ANR	5255519	UnaryOperator	*		5255472	0					
ANR	5255520	Identifier	it		5255472	1					
ANR	5255521	ReturnType	void		5255472	1					
ANR	5255522	Identifier	join		5255472	2					
ANR	5255523	ParameterList	"std :: vector < std :: string > & v , char const * delim , std :: string & result"		5255472	3					
ANR	5255524	Parameter	std :: vector < std :: string > & v	260:10:6621:6649	5255472	0	True				
ANR	5255525	ParameterType	std :: vector < std :: string > &		5255472	0					
ANR	5255526	Identifier	v		5255472	1					
ANR	5255527	Parameter	char const * delim	260:41:6652:6668	5255472	1	True				
ANR	5255528	ParameterType	char const *		5255472	0					
ANR	5255529	Identifier	delim		5255472	1					
ANR	5255530	Parameter	std :: string & result	260:60:6671:6689	5255472	2	True				
ANR	5255531	ParameterType	std :: string &		5255472	0					
ANR	5255532	Identifier	result		5255472	1					
ANR	5255533	CFGEntryNode	ENTRY		5255472		True				
ANR	5255534	CFGExitNode	EXIT		5255472		True				
ANR	5255535	Symbol	result		5255472						
ANR	5255536	Symbol	* it		5255472						
ANR	5255537	Symbol	v . begin		5255472						
ANR	5255538	Symbol	result . size		5255472						
ANR	5255539	Symbol	v		5255472						
ANR	5255540	Symbol	it		5255472						
ANR	5255541	Symbol	v . end		5255472						
ANR	5255542	Symbol	delim		5255472						
