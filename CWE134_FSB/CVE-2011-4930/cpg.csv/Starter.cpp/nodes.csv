command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	560446	File	data/converged/CVE-2011-4930_htcondor/Starter.cpp								
ANR	560447	DeclStmt									
ANR	560448	Decl							extern dynuser	extern dynuser *	myDynuser
ANR	560449	Function	Starter :: Starter	49:0:1471:1557							
ANR	560450	FunctionDef	Starter :: Starter ()		560449	0					
ANR	560451	CompoundStatement		50:0:1490:1557	560449	0					
ANR	560452	ExpressionStatement	s_ad = NULL	51:1:1493:1504	560449	0	True				
ANR	560453	AssignmentExpression	s_ad = NULL		560449	0		=			
ANR	560454	Identifier	s_ad		560449	0					
ANR	560455	Identifier	NULL		560449	1					
ANR	560456	ExpressionStatement	s_path = NULL	52:1:1507:1520	560449	1	True				
ANR	560457	AssignmentExpression	s_path = NULL		560449	0		=			
ANR	560458	Identifier	s_path		560449	0					
ANR	560459	Identifier	NULL		560449	1					
ANR	560460	ExpressionStatement	s_is_dc = false	53:1:1523:1538	560449	2	True				
ANR	560461	AssignmentExpression	s_is_dc = false		560449	0		=			
ANR	560462	Identifier	s_is_dc		560449	0					
ANR	560463	Identifier	false		560449	1					
ANR	560464	ExpressionStatement	initRunData ( )	55:1:1542:1555	560449	3	True				
ANR	560465	CallExpression	initRunData ( )		560449	0					
ANR	560466	Callee	initRunData		560449	0					
ANR	560467	Identifier	initRunData		560449	0					
ANR	560468	ArgumentList			560449	1					
ANR	560469	Identifier	Starter :: Starter		560449	1					
ANR	560470	ParameterList			560449	2					
ANR	560471	CFGEntryNode	ENTRY		560449		True				
ANR	560472	CFGExitNode	EXIT		560449		True				
ANR	560473	Symbol	NULL		560449						
ANR	560474	Symbol	false		560449						
ANR	560475	Symbol	s_ad		560449						
ANR	560476	Symbol	s_path		560449						
ANR	560477	Symbol	s_is_dc		560449						
ANR	560478	Function	Starter :: Starter	59:0:1561:1980							
ANR	560479	FunctionDef	Starter :: Starter (const Starter & s)		560478	0					
ANR	560480	CompoundStatement		61:0:1614:1980	560478	0					
ANR	560481	IfStatement	if ( s . s_claim || s . s_pid || s . s_birthdate || s . s_port1 >= 0 || s . s_port2 >= 0 )		560478	0					
ANR	560482	Condition	s . s_claim || s . s_pid || s . s_birthdate || s . s_port1 >= 0 || s . s_port2 >= 0	62:5:1621:1698	560478	0	True				
ANR	560483	OrExpression	s . s_claim || s . s_pid || s . s_birthdate || s . s_port1 >= 0 || s . s_port2 >= 0		560478	0		||			
ANR	560484	MemberAccess	s . s_claim		560478	0					
ANR	560485	Identifier	s		560478	0					
ANR	560486	Identifier	s_claim		560478	1					
ANR	560487	OrExpression	s . s_pid || s . s_birthdate || s . s_port1 >= 0 || s . s_port2 >= 0		560478	1		||			
ANR	560488	MemberAccess	s . s_pid		560478	0					
ANR	560489	Identifier	s		560478	0					
ANR	560490	Identifier	s_pid		560478	1					
ANR	560491	OrExpression	s . s_birthdate || s . s_port1 >= 0 || s . s_port2 >= 0		560478	1		||			
ANR	560492	MemberAccess	s . s_birthdate		560478	0					
ANR	560493	Identifier	s		560478	0					
ANR	560494	Identifier	s_birthdate		560478	1					
ANR	560495	OrExpression	s . s_port1 >= 0 || s . s_port2 >= 0		560478	1		||			
ANR	560496	RelationalExpression	s . s_port1 >= 0		560478	0		>=			
ANR	560497	MemberAccess	s . s_port1		560478	0					
ANR	560498	Identifier	s		560478	0					
ANR	560499	Identifier	s_port1		560478	1					
ANR	560500	PrimaryExpression	0		560478	1					
ANR	560501	RelationalExpression	s . s_port2 >= 0		560478	1		>=			
ANR	560502	MemberAccess	s . s_port2		560478	0					
ANR	560503	Identifier	s		560478	0					
ANR	560504	Identifier	s_port2		560478	1					
ANR	560505	PrimaryExpression	0		560478	1					
ANR	560506	CompoundStatement		4:1:88:88	560478	1					
ANR	560507	ExpressionStatement	"EXCEPT ( ""Trying to copy a Starter object that's already running!"" )"	65:2:1707:1774	560478	0	True				
ANR	560508	CallExpression	"EXCEPT ( ""Trying to copy a Starter object that's already running!"" )"		560478	0					
ANR	560509	Callee	EXCEPT		560478	0					
ANR	560510	Identifier	EXCEPT		560478	0					
ANR	560511	ArgumentList	"""Trying to copy a Starter object that's already running!"""		560478	1					
ANR	560512	Argument	"""Trying to copy a Starter object that's already running!"""		560478	0					
ANR	560513	PrimaryExpression	"""Trying to copy a Starter object that's already running!"""		560478	0					
ANR	560514	IfStatement	if ( s . s_ad )		560478	1					
ANR	560515	Condition	s . s_ad	68:5:1785:1790	560478	0	True				
ANR	560516	MemberAccess	s . s_ad		560478	0					
ANR	560517	Identifier	s		560478	0					
ANR	560518	Identifier	s_ad		560478	1					
ANR	560519	CompoundStatement		8:14:179:179	560478	1					
ANR	560520	ExpressionStatement	s_ad = new ClassAd ( * ( s . s_ad ) )	69:2:1798:1829	560478	0	True				
ANR	560521	AssignmentExpression	s_ad = new ClassAd ( * ( s . s_ad ) )		560478	0		=			
ANR	560522	Identifier	s_ad		560478	0					
ANR	560523	UnaryOperationExpression	* ( s . s_ad )		560478	1					
ANR	560524	UnaryOperator	*		560478	0					
ANR	560525	MemberAccess	s . s_ad		560478	1					
ANR	560526	Identifier	s		560478	0					
ANR	560527	Identifier	s_ad		560478	1					
ANR	560528	ElseStatement	else		560478	0					
ANR	560529	CompoundStatement		10:8:224:224	560478	0					
ANR	560530	ExpressionStatement	s_ad = NULL	71:2:1843:1854	560478	0	True				
ANR	560531	AssignmentExpression	s_ad = NULL		560478	0		=			
ANR	560532	Identifier	s_ad		560478	0					
ANR	560533	Identifier	NULL		560478	1					
ANR	560534	IfStatement	if ( s . s_path )		560478	2					
ANR	560535	Condition	s . s_path	74:5:1865:1872	560478	0	True				
ANR	560536	MemberAccess	s . s_path		560478	0					
ANR	560537	Identifier	s		560478	0					
ANR	560538	Identifier	s_path		560478	1					
ANR	560539	CompoundStatement		14:16:261:261	560478	1					
ANR	560540	ExpressionStatement	s_path = strnewp ( s . s_path )	75:2:1880:1908	560478	0	True				
ANR	560541	AssignmentExpression	s_path = strnewp ( s . s_path )		560478	0		=			
ANR	560542	Identifier	s_path		560478	0					
ANR	560543	CallExpression	strnewp ( s . s_path )		560478	1					
ANR	560544	Callee	strnewp		560478	0					
ANR	560545	Identifier	strnewp		560478	0					
ANR	560546	ArgumentList	s . s_path		560478	1					
ANR	560547	Argument	s . s_path		560478	0					
ANR	560548	MemberAccess	s . s_path		560478	0					
ANR	560549	Identifier	s		560478	0					
ANR	560550	Identifier	s_path		560478	1					
ANR	560551	ElseStatement	else		560478	0					
ANR	560552	CompoundStatement		16:8:303:303	560478	0					
ANR	560553	ExpressionStatement	s_path = NULL	77:2:1922:1935	560478	0	True				
ANR	560554	AssignmentExpression	s_path = NULL		560478	0		=			
ANR	560555	Identifier	s_path		560478	0					
ANR	560556	Identifier	NULL		560478	1					
ANR	560557	ExpressionStatement	s_is_dc = s . s_is_dc	80:1:1942:1961	560478	3	True				
ANR	560558	AssignmentExpression	s_is_dc = s . s_is_dc		560478	0		=			
ANR	560559	Identifier	s_is_dc		560478	0					
ANR	560560	MemberAccess	s . s_is_dc		560478	1					
ANR	560561	Identifier	s		560478	0					
ANR	560562	Identifier	s_is_dc		560478	1					
ANR	560563	ExpressionStatement	initRunData ( )	82:1:1965:1978	560478	4	True				
ANR	560564	CallExpression	initRunData ( )		560478	0					
ANR	560565	Callee	initRunData		560478	0					
ANR	560566	Identifier	initRunData		560478	0					
ANR	560567	ArgumentList			560478	1					
ANR	560568	Identifier	Starter :: Starter		560478	1					
ANR	560569	ParameterList	const Starter & s		560478	2					
ANR	560570	Parameter	const Starter & s	59:18:1579:1594	560478	0	True				
ANR	560571	ParameterType	const Starter &		560478	0					
ANR	560572	Identifier	s		560478	1					
ANR	560573	CFGEntryNode	ENTRY		560478		True				
ANR	560574	CFGExitNode	EXIT		560478		True				
ANR	560575	Symbol	NULL		560478						
ANR	560576	Symbol	* s . s_ad		560478						
ANR	560577	Symbol	s . s_port2		560478						
ANR	560578	Symbol	s . s_path		560478						
ANR	560579	Symbol	s . s_port1		560478						
ANR	560580	Symbol	s . s_ad		560478						
ANR	560581	Symbol	s . s_is_dc		560478						
ANR	560582	Symbol	s_is_dc		560478						
ANR	560583	Symbol	* ( s . s_ad )		560478						
ANR	560584	Symbol	s		560478						
ANR	560585	Symbol	s . s_birthdate		560478						
ANR	560586	Symbol	strnewp		560478						
ANR	560587	Symbol	s_ad		560478						
ANR	560588	Symbol	s . s_claim		560478						
ANR	560589	Symbol	* s		560478						
ANR	560590	Symbol	s_path		560478						
ANR	560591	Symbol	s . s_pid		560478						
ANR	560592	Function	Starter :: initRunData	86:0:1984:2527							
ANR	560593	FunctionDef	Starter :: initRunData ()		560592	0					
ANR	560594	CompoundStatement		88:0:2019:2527	560592	0					
ANR	560595	ExpressionStatement	s_claim = NULL	89:1:2022:2036	560592	0	True				
ANR	560596	AssignmentExpression	s_claim = NULL		560592	0		=			
ANR	560597	Identifier	s_claim		560592	0					
ANR	560598	Identifier	NULL		560592	1					
ANR	560599	ExpressionStatement	s_pid = 0	90:1:2039:2048	560592	1	True				
ANR	560600	AssignmentExpression	s_pid = 0		560592	0		=			
ANR	560601	Identifier	s_pid		560592	0					
ANR	560602	PrimaryExpression	0		560592	1					
ANR	560603	ExpressionStatement	s_birthdate = 0	91:1:2095:2110	560592	2	True				
ANR	560604	AssignmentExpression	s_birthdate = 0		560592	0		=			
ANR	560605	Identifier	s_birthdate		560592	0					
ANR	560606	PrimaryExpression	0		560592	1					
ANR	560607	ExpressionStatement	s_kill_tid = - 1	92:1:2113:2128	560592	3	True				
ANR	560608	AssignmentExpression	s_kill_tid = - 1		560592	0		=			
ANR	560609	Identifier	s_kill_tid		560592	0					
ANR	560610	UnaryOperationExpression	- 1		560592	1					
ANR	560611	UnaryOperator	-		560592	0					
ANR	560612	PrimaryExpression	1		560592	1					
ANR	560613	ExpressionStatement	s_softkill_tid = - 1	93:1:2131:2150	560592	4	True				
ANR	560614	AssignmentExpression	s_softkill_tid = - 1		560592	0		=			
ANR	560615	Identifier	s_softkill_tid		560592	0					
ANR	560616	UnaryOperationExpression	- 1		560592	1					
ANR	560617	UnaryOperator	-		560592	0					
ANR	560618	PrimaryExpression	1		560592	1					
ANR	560619	ExpressionStatement	s_port1 = - 1	94:1:2153:2165	560592	5	True				
ANR	560620	AssignmentExpression	s_port1 = - 1		560592	0		=			
ANR	560621	Identifier	s_port1		560592	0					
ANR	560622	UnaryOperationExpression	- 1		560592	1					
ANR	560623	UnaryOperator	-		560592	0					
ANR	560624	PrimaryExpression	1		560592	1					
ANR	560625	ExpressionStatement	s_port2 = - 1	95:1:2168:2180	560592	6	True				
ANR	560626	AssignmentExpression	s_port2 = - 1		560592	0		=			
ANR	560627	Identifier	s_port2		560592	0					
ANR	560628	UnaryOperationExpression	- 1		560592	1					
ANR	560629	UnaryOperator	-		560592	0					
ANR	560630	PrimaryExpression	1		560592	1					
ANR	560631	ExpressionStatement	s_reaper_id = - 1	96:1:2183:2199	560592	7	True				
ANR	560632	AssignmentExpression	s_reaper_id = - 1		560592	0		=			
ANR	560633	Identifier	s_reaper_id		560592	0					
ANR	560634	UnaryOperationExpression	- 1		560592	1					
ANR	560635	UnaryOperator	-		560592	0					
ANR	560636	PrimaryExpression	1		560592	1					
ANR	560637	ExpressionStatement	s_is_boinc = false	99:1:2218:2236	560592	8	True				
ANR	560638	AssignmentExpression	s_is_boinc = false		560592	0		=			
ANR	560639	Identifier	s_is_boinc		560592	0					
ANR	560640	Identifier	false		560592	1					
ANR	560641	ExpressionStatement	s_job_update_sock = NULL	101:1:2263:2287	560592	9	True				
ANR	560642	AssignmentExpression	s_job_update_sock = NULL		560592	0		=			
ANR	560643	Identifier	s_job_update_sock		560592	0					
ANR	560644	Identifier	NULL		560592	1					
ANR	560645	ExpressionStatement	m_hold_job_cb = NULL	103:1:2291:2311	560592	10	True				
ANR	560646	AssignmentExpression	m_hold_job_cb = NULL		560592	0		=			
ANR	560647	Identifier	m_hold_job_cb		560592	0					
ANR	560648	Identifier	NULL		560592	1					
ANR	560649	ExpressionStatement	s_usage . max_image_size = 0	106:1:2361:2387	560592	11	True				
ANR	560650	AssignmentExpression	s_usage . max_image_size = 0		560592	0		=			
ANR	560651	MemberAccess	s_usage . max_image_size		560592	0					
ANR	560652	Identifier	s_usage		560592	0					
ANR	560653	Identifier	max_image_size		560592	1					
ANR	560654	PrimaryExpression	0		560592	1					
ANR	560655	ExpressionStatement	s_usage . num_procs = 0	107:1:2390:2411	560592	12	True				
ANR	560656	AssignmentExpression	s_usage . num_procs = 0		560592	0		=			
ANR	560657	MemberAccess	s_usage . num_procs		560592	0					
ANR	560658	Identifier	s_usage		560592	0					
ANR	560659	Identifier	num_procs		560592	1					
ANR	560660	PrimaryExpression	0		560592	1					
ANR	560661	ExpressionStatement	s_usage . percent_cpu = 0.0	108:1:2414:2439	560592	13	True				
ANR	560662	AssignmentExpression	s_usage . percent_cpu = 0.0		560592	0		=			
ANR	560663	MemberAccess	s_usage . percent_cpu		560592	0					
ANR	560664	Identifier	s_usage		560592	0					
ANR	560665	Identifier	percent_cpu		560592	1					
ANR	560666	PrimaryExpression	0.0		560592	1					
ANR	560667	ExpressionStatement	s_usage . sys_cpu_time = 0	109:1:2442:2466	560592	14	True				
ANR	560668	AssignmentExpression	s_usage . sys_cpu_time = 0		560592	0		=			
ANR	560669	MemberAccess	s_usage . sys_cpu_time		560592	0					
ANR	560670	Identifier	s_usage		560592	0					
ANR	560671	Identifier	sys_cpu_time		560592	1					
ANR	560672	PrimaryExpression	0		560592	1					
ANR	560673	ExpressionStatement	s_usage . total_image_size = 0	110:1:2469:2497	560592	15	True				
ANR	560674	AssignmentExpression	s_usage . total_image_size = 0		560592	0		=			
ANR	560675	MemberAccess	s_usage . total_image_size		560592	0					
ANR	560676	Identifier	s_usage		560592	0					
ANR	560677	Identifier	total_image_size		560592	1					
ANR	560678	PrimaryExpression	0		560592	1					
ANR	560679	ExpressionStatement	s_usage . user_cpu_time = 0	111:1:2500:2525	560592	16	True				
ANR	560680	AssignmentExpression	s_usage . user_cpu_time = 0		560592	0		=			
ANR	560681	MemberAccess	s_usage . user_cpu_time		560592	0					
ANR	560682	Identifier	s_usage		560592	0					
ANR	560683	Identifier	user_cpu_time		560592	1					
ANR	560684	PrimaryExpression	0		560592	1					
ANR	560685	ReturnType	void		560592	1					
ANR	560686	Identifier	Starter :: initRunData		560592	2					
ANR	560687	ParameterList			560592	3					
ANR	560688	CFGEntryNode	ENTRY		560592		True				
ANR	560689	CFGExitNode	EXIT		560592		True				
ANR	560690	Symbol	s_port2		560592						
ANR	560691	Symbol	NULL		560592						
ANR	560692	Symbol	s_kill_tid		560592						
ANR	560693	Symbol	s_port1		560592						
ANR	560694	Symbol	s_usage . percent_cpu		560592						
ANR	560695	Symbol	false		560592						
ANR	560696	Symbol	s_is_boinc		560592						
ANR	560697	Symbol	m_hold_job_cb		560592						
ANR	560698	Symbol	s_usage . max_image_size		560592						
ANR	560699	Symbol	s_usage . sys_cpu_time		560592						
ANR	560700	Symbol	s_birthdate		560592						
ANR	560701	Symbol	s_usage . user_cpu_time		560592						
ANR	560702	Symbol	s_usage . num_procs		560592						
ANR	560703	Symbol	s_reaper_id		560592						
ANR	560704	Symbol	s_job_update_sock		560592						
ANR	560705	Symbol	s_softkill_tid		560592						
ANR	560706	Symbol	s_usage . total_image_size		560592						
ANR	560707	Symbol	s_usage		560592						
ANR	560708	Symbol	s_claim		560592						
ANR	560709	Symbol	s_pid		560592						
ANR	560710	Function	Starter :: ~Starter	115:0:2531:2841							
ANR	560711	FunctionDef	Starter :: ~Starter ()		560710	0					
ANR	560712	CompoundStatement		116:0:2551:2841	560710	0					
ANR	560713	ExpressionStatement	cancelKillTimer ( )	117:1:2554:2571	560710	0	True				
ANR	560714	CallExpression	cancelKillTimer ( )		560710	0					
ANR	560715	Callee	cancelKillTimer		560710	0					
ANR	560716	Identifier	cancelKillTimer		560710	0					
ANR	560717	ArgumentList			560710	1					
ANR	560718	IfStatement	if ( s_path )		560710	1					
ANR	560719	Condition	s_path	119:5:2579:2584	560710	0	True				
ANR	560720	Identifier	s_path		560710	0					
ANR	560721	CompoundStatement		4:13:35:35	560710	1					
ANR	560722	Statement	delete	120:2:2591:2596	560710	0	True				
ANR	560723	Statement	[	120:9:2598:2598	560710	1	True				
ANR	560724	Statement	]	120:10:2599:2599	560710	2	True				
ANR	560725	ExpressionStatement	s_path	120:12:2601:2607	560710	3	True				
ANR	560726	Identifier	s_path		560710	0					
ANR	560727	IfStatement	if ( s_ad )		560710	2					
ANR	560728	Condition	s_ad	122:5:2617:2620	560710	0	True				
ANR	560729	Identifier	s_ad		560710	0					
ANR	560730	CompoundStatement		7:12:72:72	560710	1					
ANR	560731	Statement	delete	123:2:2628:2633	560710	0	True				
ANR	560732	ExpressionStatement	s_ad	123:8:2634:2642	560710	1	True				
ANR	560733	Identifier	s_ad		560710	0					
ANR	560734	IfStatement	if ( s_job_update_sock )		560710	3					
ANR	560735	Condition	s_job_update_sock	125:5:2652:2668	560710	0	True				
ANR	560736	Identifier	s_job_update_sock		560710	0					
ANR	560737	CompoundStatement		10:25:120:120	560710	1					
ANR	560738	ExpressionStatement	daemonCore -> Cancel_Socket ( s_job_update_sock )	126:2:2676:2722	560710	0	True				
ANR	560739	CallExpression	daemonCore -> Cancel_Socket ( s_job_update_sock )		560710	0					
ANR	560740	Callee	daemonCore -> Cancel_Socket		560710	0					
ANR	560741	PtrMemberAccess	daemonCore -> Cancel_Socket		560710	0					
ANR	560742	Identifier	daemonCore		560710	0					
ANR	560743	Identifier	Cancel_Socket		560710	1					
ANR	560744	ArgumentList	s_job_update_sock		560710	1					
ANR	560745	Argument	s_job_update_sock		560710	0					
ANR	560746	Identifier	s_job_update_sock		560710	0					
ANR	560747	Statement	delete	127:2:2726:2731	560710	1	True				
ANR	560748	ExpressionStatement	s_job_update_sock	127:9:2733:2750	560710	2	True				
ANR	560749	Identifier	s_job_update_sock		560710	0					
ANR	560750	IfStatement	if ( m_hold_job_cb )		560710	4					
ANR	560751	Condition	m_hold_job_cb	130:5:2761:2773	560710	0	True				
ANR	560752	Identifier	m_hold_job_cb		560710	0					
ANR	560753	CompoundStatement		15:21:225:225	560710	1					
ANR	560754	ExpressionStatement	m_hold_job_cb -> cancelCallback ( )	131:2:2781:2812	560710	0	True				
ANR	560755	CallExpression	m_hold_job_cb -> cancelCallback ( )		560710	0					
ANR	560756	Callee	m_hold_job_cb -> cancelCallback		560710	0					
ANR	560757	PtrMemberAccess	m_hold_job_cb -> cancelCallback		560710	0					
ANR	560758	Identifier	m_hold_job_cb		560710	0					
ANR	560759	Identifier	cancelCallback		560710	1					
ANR	560760	ArgumentList			560710	1					
ANR	560761	ExpressionStatement	m_hold_job_cb = NULL	132:2:2816:2836	560710	1	True				
ANR	560762	AssignmentExpression	m_hold_job_cb = NULL		560710	0		=			
ANR	560763	Identifier	m_hold_job_cb		560710	0					
ANR	560764	Identifier	NULL		560710	1					
ANR	560765	Identifier	Starter :: ~Starter		560710	1					
ANR	560766	ParameterList			560710	2					
ANR	560767	CFGEntryNode	ENTRY		560710		True				
ANR	560768	CFGExitNode	EXIT		560710		True				
ANR	560769	Symbol	NULL		560710						
ANR	560770	Symbol	s_job_update_sock		560710						
ANR	560771	Symbol	daemonCore		560710						
ANR	560772	Symbol	m_hold_job_cb		560710						
ANR	560773	Symbol	s_ad		560710						
ANR	560774	Symbol	s_path		560710						
ANR	560775	Function	Starter :: satisfies	137:0:2845:3245							
ANR	560776	FunctionDef	"Starter :: satisfies (ClassAd * job_ad , ClassAd * mach_ad)"		560775	0					
ANR	560777	CompoundStatement		139:0:2906:3245	560775	0					
ANR	560778	IdentifierDeclStatement	int requirements = 0 ;	140:1:2909:2929	560775	0	True				
ANR	560779	IdentifierDecl	requirements = 0		560775	0					
ANR	560780	IdentifierDeclType	int		560775	0					
ANR	560781	Identifier	requirements		560775	1					
ANR	560782	AssignmentExpression	requirements = 0		560775	2		=			
ANR	560783	Identifier	requirements		560775	0					
ANR	560784	PrimaryExpression	0		560775	1					
ANR	560785	IdentifierDeclStatement	ClassAd * merged_ad ;	141:1:2932:2950	560775	1	True				
ANR	560786	IdentifierDecl	* merged_ad		560775	0					
ANR	560787	IdentifierDeclType	ClassAd *		560775	0					
ANR	560788	Identifier	merged_ad		560775	1					
ANR	560789	IfStatement	if ( mach_ad )		560775	2					
ANR	560790	Condition	mach_ad	142:5:2957:2963	560775	0	True				
ANR	560791	Identifier	mach_ad		560775	0					
ANR	560792	CompoundStatement		4:15:60:60	560775	1					
ANR	560793	ExpressionStatement	merged_ad = new ClassAd ( * mach_ad )	143:2:2971:3006	560775	0	True				
ANR	560794	AssignmentExpression	merged_ad = new ClassAd ( * mach_ad )		560775	0		=			
ANR	560795	Identifier	merged_ad		560775	0					
ANR	560796	UnaryOperationExpression	* mach_ad		560775	1					
ANR	560797	UnaryOperator	*		560775	0					
ANR	560798	Identifier	mach_ad		560775	1					
ANR	560799	ExpressionStatement	"MergeClassAds ( merged_ad , s_ad , true )"	144:2:3010:3048	560775	1	True				
ANR	560800	CallExpression	"MergeClassAds ( merged_ad , s_ad , true )"		560775	0					
ANR	560801	Callee	MergeClassAds		560775	0					
ANR	560802	Identifier	MergeClassAds		560775	0					
ANR	560803	ArgumentList	merged_ad		560775	1					
ANR	560804	Argument	merged_ad		560775	0					
ANR	560805	Identifier	merged_ad		560775	0					
ANR	560806	Argument	s_ad		560775	1					
ANR	560807	Identifier	s_ad		560775	0					
ANR	560808	Argument	true		560775	2					
ANR	560809	Identifier	true		560775	0					
ANR	560810	ElseStatement	else		560775	0					
ANR	560811	CompoundStatement		7:8:151:151	560775	0					
ANR	560812	ExpressionStatement	merged_ad = new ClassAd ( * s_ad )	146:2:3062:3094	560775	0	True				
ANR	560813	AssignmentExpression	merged_ad = new ClassAd ( * s_ad )		560775	0		=			
ANR	560814	Identifier	merged_ad		560775	0					
ANR	560815	UnaryOperationExpression	* s_ad		560775	1					
ANR	560816	UnaryOperator	*		560775	0					
ANR	560817	Identifier	s_ad		560775	1					
ANR	560818	IfStatement	"if ( ! job_ad -> EvalBool ( ATTR_REQUIREMENTS , merged_ad , requirements ) )"		560775	3					
ANR	560819	Condition	"! job_ad -> EvalBool ( ATTR_REQUIREMENTS , merged_ad , requirements )"	148:5:3104:3165	560775	0	True				
ANR	560820	UnaryOperationExpression	"! job_ad -> EvalBool ( ATTR_REQUIREMENTS , merged_ad , requirements )"		560775	0					
ANR	560821	UnaryOperator	!		560775	0					
ANR	560822	CallExpression	"job_ad -> EvalBool ( ATTR_REQUIREMENTS , merged_ad , requirements )"		560775	1					
ANR	560823	Callee	job_ad -> EvalBool		560775	0					
ANR	560824	PtrMemberAccess	job_ad -> EvalBool		560775	0					
ANR	560825	Identifier	job_ad		560775	0					
ANR	560826	Identifier	EvalBool		560775	1					
ANR	560827	ArgumentList	ATTR_REQUIREMENTS		560775	1					
ANR	560828	Argument	ATTR_REQUIREMENTS		560775	0					
ANR	560829	Identifier	ATTR_REQUIREMENTS		560775	0					
ANR	560830	Argument	merged_ad		560775	1					
ANR	560831	Identifier	merged_ad		560775	0					
ANR	560832	Argument	requirements		560775	2					
ANR	560833	Identifier	requirements		560775	0					
ANR	560834	CompoundStatement		10:70:262:262	560775	1					
ANR	560835	ExpressionStatement	requirements = 0	149:2:3174:3190	560775	0	True				
ANR	560836	AssignmentExpression	requirements = 0		560775	0		=			
ANR	560837	Identifier	requirements		560775	0					
ANR	560838	PrimaryExpression	0		560775	1					
ANR	560839	Statement	delete	151:1:3196:3201	560775	4	True				
ANR	560840	ExpressionStatement	merged_ad	151:7:3202:3215	560775	5	True				
ANR	560841	Identifier	merged_ad		560775	0					
ANR	560842	ReturnStatement	return ( bool ) requirements ;	152:1:3218:3243	560775	6	True				
ANR	560843	CastExpression	( bool ) requirements		560775	0					
ANR	560844	CastTarget	bool		560775	0					
ANR	560845	Identifier	requirements		560775	1					
ANR	560846	ReturnType	bool		560775	1					
ANR	560847	Identifier	Starter :: satisfies		560775	2					
ANR	560848	ParameterList	"ClassAd * job_ad , ClassAd * mach_ad"		560775	3					
ANR	560849	Parameter	ClassAd * job_ad	138:20:2870:2884	560775	0	True				
ANR	560850	ParameterType	ClassAd *		560775	0					
ANR	560851	Identifier	job_ad		560775	1					
ANR	560852	Parameter	ClassAd * mach_ad	138:37:2887:2902	560775	1	True				
ANR	560853	ParameterType	ClassAd *		560775	0					
ANR	560854	Identifier	mach_ad		560775	1					
ANR	560855	CFGEntryNode	ENTRY		560775		True				
ANR	560856	CFGExitNode	EXIT		560775		True				
ANR	560857	Symbol	* s_ad		560775						
ANR	560858	Symbol	requirements		560775						
ANR	560859	Symbol	* mach_ad		560775						
ANR	560860	Symbol	ATTR_REQUIREMENTS		560775						
ANR	560861	Symbol	merged_ad		560775						
ANR	560862	Symbol	mach_ad		560775						
ANR	560863	Symbol	true		560775						
ANR	560864	Symbol	s_ad		560775						
ANR	560865	Symbol	job_ad -> EvalBool		560775						
ANR	560866	Symbol	job_ad		560775						
ANR	560867	Symbol	* job_ad		560775						
ANR	560868	Function	Starter :: provides	156:0:3249:3438							
ANR	560869	FunctionDef	Starter :: provides (const char * ability)		560868	0					
ANR	560870	CompoundStatement		158:0:3295:3438	560868	0					
ANR	560871	IdentifierDeclStatement	int has_it = 0 ;	159:1:3298:3312	560868	0	True				
ANR	560872	IdentifierDecl	has_it = 0		560868	0					
ANR	560873	IdentifierDeclType	int		560868	0					
ANR	560874	Identifier	has_it		560868	1					
ANR	560875	AssignmentExpression	has_it = 0		560868	2		=			
ANR	560876	Identifier	has_it		560868	0					
ANR	560877	PrimaryExpression	0		560868	1					
ANR	560878	IfStatement	if ( ! s_ad )		560868	1					
ANR	560879	Condition	! s_ad	160:5:3319:3324	560868	0	True				
ANR	560880	UnaryOperationExpression	! s_ad		560868	0					
ANR	560881	UnaryOperator	!		560868	0					
ANR	560882	Identifier	s_ad		560868	1					
ANR	560883	CompoundStatement		3:14:32:32	560868	1					
ANR	560884	ReturnStatement	return false ;	161:2:3332:3344	560868	0	True				
ANR	560885	Identifier	false		560868	0					
ANR	560886	IfStatement	"if ( ! s_ad -> EvalBool ( ability , NULL , has_it ) )"		560868	2					
ANR	560887	Condition	"! s_ad -> EvalBool ( ability , NULL , has_it )"	163:5:3354:3392	560868	0	True				
ANR	560888	UnaryOperationExpression	"! s_ad -> EvalBool ( ability , NULL , has_it )"		560868	0					
ANR	560889	UnaryOperator	!		560868	0					
ANR	560890	CallExpression	"s_ad -> EvalBool ( ability , NULL , has_it )"		560868	1					
ANR	560891	Callee	s_ad -> EvalBool		560868	0					
ANR	560892	PtrMemberAccess	s_ad -> EvalBool		560868	0					
ANR	560893	Identifier	s_ad		560868	0					
ANR	560894	Identifier	EvalBool		560868	1					
ANR	560895	ArgumentList	ability		560868	1					
ANR	560896	Argument	ability		560868	0					
ANR	560897	Identifier	ability		560868	0					
ANR	560898	Argument	NULL		560868	1					
ANR	560899	Identifier	NULL		560868	0					
ANR	560900	Argument	has_it		560868	2					
ANR	560901	Identifier	has_it		560868	0					
ANR	560902	CompoundStatement		6:47:100:100	560868	1					
ANR	560903	ExpressionStatement	has_it = 0	164:2:3401:3411	560868	0	True				
ANR	560904	AssignmentExpression	has_it = 0		560868	0		=			
ANR	560905	Identifier	has_it		560868	0					
ANR	560906	PrimaryExpression	0		560868	1					
ANR	560907	ReturnStatement	return ( bool ) has_it ;	166:1:3417:3436	560868	3	True				
ANR	560908	CastExpression	( bool ) has_it		560868	0					
ANR	560909	CastTarget	bool		560868	0					
ANR	560910	Identifier	has_it		560868	1					
ANR	560911	ReturnType	bool		560868	1					
ANR	560912	Identifier	Starter :: provides		560868	2					
ANR	560913	ParameterList	const char * ability		560868	3					
ANR	560914	Parameter	const char * ability	157:19:3273:3291	560868	0	True				
ANR	560915	ParameterType	const char *		560868	0					
ANR	560916	Identifier	ability		560868	1					
ANR	560917	CFGEntryNode	ENTRY		560868		True				
ANR	560918	CFGExitNode	EXIT		560868		True				
ANR	560919	Symbol	* s_ad		560868						
ANR	560920	Symbol	NULL		560868						
ANR	560921	Symbol	has_it		560868						
ANR	560922	Symbol	s_ad -> EvalBool		560868						
ANR	560923	Symbol	false		560868						
ANR	560924	Symbol	s_ad		560868						
ANR	560925	Symbol	ability		560868						
ANR	560926	Function	Starter :: setAd	170:0:3442:3526							
ANR	560927	FunctionDef	Starter :: setAd (ClassAd * ad)		560926	0					
ANR	560928	CompoundStatement		172:0:3477:3526	560926	0					
ANR	560929	IfStatement	if ( s_ad )		560926	0					
ANR	560930	Condition	s_ad	173:5:3484:3487	560926	0	True				
ANR	560931	Identifier	s_ad		560926	0					
ANR	560932	CompoundStatement		2:12:13:13	560926	1					
ANR	560933	Statement	delete	174:2:3495:3500	560926	0	True				
ANR	560934	ExpressionStatement	s_ad	174:8:3501:3509	560926	1	True				
ANR	560935	Identifier	s_ad		560926	0					
ANR	560936	ExpressionStatement	s_ad = ad	176:1:3515:3524	560926	1	True				
ANR	560937	AssignmentExpression	s_ad = ad		560926	0		=			
ANR	560938	Identifier	s_ad		560926	0					
ANR	560939	Identifier	ad		560926	1					
ANR	560940	ReturnType	void		560926	1					
ANR	560941	Identifier	Starter :: setAd		560926	2					
ANR	560942	ParameterList	ClassAd * ad		560926	3					
ANR	560943	Parameter	ClassAd * ad	171:16:3463:3473	560926	0	True				
ANR	560944	ParameterType	ClassAd *		560926	0					
ANR	560945	Identifier	ad		560926	1					
ANR	560946	CFGEntryNode	ENTRY		560926		True				
ANR	560947	CFGExitNode	EXIT		560926		True				
ANR	560948	Symbol	ad		560926						
ANR	560949	Symbol	s_ad		560926						
ANR	560950	Function	Starter :: setPath	180:0:3530:3656							
ANR	560951	FunctionDef	Starter :: setPath (const char * updated_path)		560950	0					
ANR	560952	CompoundStatement		182:0:3580:3656	560950	0					
ANR	560953	IfStatement	if ( s_path )		560950	0					
ANR	560954	Condition	s_path	183:5:3587:3592	560950	0	True				
ANR	560955	Identifier	s_path		560950	0					
ANR	560956	CompoundStatement		2:14:15:15	560950	1					
ANR	560957	Statement	delete	184:2:3600:3605	560950	0	True				
ANR	560958	Statement	[	184:9:3607:3607	560950	1	True				
ANR	560959	Statement	]	184:10:3608:3608	560950	2	True				
ANR	560960	ExpressionStatement	s_path	184:12:3610:3616	560950	3	True				
ANR	560961	Identifier	s_path		560950	0					
ANR	560962	ExpressionStatement	s_path = strnewp ( updated_path )	186:1:3622:3654	560950	1	True				
ANR	560963	AssignmentExpression	s_path = strnewp ( updated_path )		560950	0		=			
ANR	560964	Identifier	s_path		560950	0					
ANR	560965	CallExpression	strnewp ( updated_path )		560950	1					
ANR	560966	Callee	strnewp		560950	0					
ANR	560967	Identifier	strnewp		560950	0					
ANR	560968	ArgumentList	updated_path		560950	1					
ANR	560969	Argument	updated_path		560950	0					
ANR	560970	Identifier	updated_path		560950	0					
ANR	560971	ReturnType	void		560950	1					
ANR	560972	Identifier	Starter :: setPath		560950	2					
ANR	560973	ParameterList	const char * updated_path		560950	3					
ANR	560974	Parameter	const char * updated_path	181:18:3553:3576	560950	0	True				
ANR	560975	ParameterType	const char *		560950	0					
ANR	560976	Identifier	updated_path		560950	1					
ANR	560977	CFGEntryNode	ENTRY		560950		True				
ANR	560978	CFGExitNode	EXIT		560950		True				
ANR	560979	Symbol	updated_path		560950						
ANR	560980	Symbol	strnewp		560950						
ANR	560981	Symbol	s_path		560950						
ANR	560982	Function	Starter :: setIsDC	189:0:3659:3731							
ANR	560983	FunctionDef	Starter :: setIsDC (bool updated_is_dc)		560982	0					
ANR	560984	CompoundStatement		191:0:3703:3731	560982	0					
ANR	560985	ExpressionStatement	s_is_dc = updated_is_dc	192:1:3706:3729	560982	0	True				
ANR	560986	AssignmentExpression	s_is_dc = updated_is_dc		560982	0		=			
ANR	560987	Identifier	s_is_dc		560982	0					
ANR	560988	Identifier	updated_is_dc		560982	1					
ANR	560989	ReturnType	void		560982	1					
ANR	560990	Identifier	Starter :: setIsDC		560982	2					
ANR	560991	ParameterList	bool updated_is_dc		560982	3					
ANR	560992	Parameter	bool updated_is_dc	190:18:3682:3699	560982	0	True				
ANR	560993	ParameterType	bool		560982	0					
ANR	560994	Identifier	updated_is_dc		560982	1					
ANR	560995	CFGEntryNode	ENTRY		560982		True				
ANR	560996	CFGExitNode	EXIT		560982		True				
ANR	560997	Symbol	updated_is_dc		560982						
ANR	560998	Symbol	s_is_dc		560982						
ANR	560999	Function	Starter :: setClaim	195:0:3734:3785							
ANR	561000	FunctionDef	Starter :: setClaim (Claim * c)		560999	0					
ANR	561001	CompoundStatement		197:0:3769:3785	560999	0					
ANR	561002	ExpressionStatement	s_claim = c	198:1:3772:3783	560999	0	True				
ANR	561003	AssignmentExpression	s_claim = c		560999	0		=			
ANR	561004	Identifier	s_claim		560999	0					
ANR	561005	Identifier	c		560999	1					
ANR	561006	ReturnType	void		560999	1					
ANR	561007	Identifier	Starter :: setClaim		560999	2					
ANR	561008	ParameterList	Claim * c		560999	3					
ANR	561009	Parameter	Claim * c	196:19:3758:3765	560999	0	True				
ANR	561010	ParameterType	Claim *		560999	0					
ANR	561011	Identifier	c		560999	1					
ANR	561012	CFGEntryNode	ENTRY		560999		True				
ANR	561013	CFGExitNode	EXIT		560999		True				
ANR	561014	Symbol	c		560999						
ANR	561015	Symbol	s_claim		560999						
ANR	561016	Function	Starter :: setPorts	202:0:3789:3874							
ANR	561017	FunctionDef	"Starter :: setPorts (int port1 , int port2)"		561016	0					
ANR	561018	CompoundStatement		204:0:3836:3874	561016	0					
ANR	561019	ExpressionStatement	s_port1 = port1	205:1:3839:3854	561016	0	True				
ANR	561020	AssignmentExpression	s_port1 = port1		561016	0		=			
ANR	561021	Identifier	s_port1		561016	0					
ANR	561022	Identifier	port1		561016	1					
ANR	561023	ExpressionStatement	s_port2 = port2	206:1:3857:3872	561016	1	True				
ANR	561024	AssignmentExpression	s_port2 = port2		561016	0		=			
ANR	561025	Identifier	s_port2		561016	0					
ANR	561026	Identifier	port2		561016	1					
ANR	561027	ReturnType	void		561016	1					
ANR	561028	Identifier	Starter :: setPorts		561016	2					
ANR	561029	ParameterList	"int port1 , int port2"		561016	3					
ANR	561030	Parameter	int port1	203:19:3813:3821	561016	0	True				
ANR	561031	ParameterType	int		561016	0					
ANR	561032	Identifier	port1		561016	1					
ANR	561033	Parameter	int port2	203:30:3824:3832	561016	1	True				
ANR	561034	ParameterType	int		561016	0					
ANR	561035	Identifier	port2		561016	1					
ANR	561036	CFGEntryNode	ENTRY		561016		True				
ANR	561037	CFGExitNode	EXIT		561016		True				
ANR	561038	Symbol	s_port2		561016						
ANR	561039	Symbol	s_port1		561016						
ANR	561040	Symbol	port1		561016						
ANR	561041	Symbol	port2		561016						
ANR	561042	Function	Starter :: publish	210:0:3878:5443							
ANR	561043	FunctionDef	"Starter :: publish (ClassAd * ad , amask_t mask , StringList * list)"		561042	0					
ANR	561044	CompoundStatement		212:0:3947:5443	561042	0					
ANR	561045	IfStatement	if ( ! ( IS_STATIC ( mask ) && IS_PUBLIC ( mask ) ) )		561042	0					
ANR	561046	Condition	! ( IS_STATIC ( mask ) && IS_PUBLIC ( mask ) )	213:5:3954:3990	561042	0	True				
ANR	561047	UnaryOperationExpression	! ( IS_STATIC ( mask ) && IS_PUBLIC ( mask ) )		561042	0					
ANR	561048	UnaryOperator	!		561042	0					
ANR	561049	AndExpression	IS_STATIC ( mask ) && IS_PUBLIC ( mask )		561042	1		&&			
ANR	561050	CallExpression	IS_STATIC ( mask )		561042	0					
ANR	561051	Callee	IS_STATIC		561042	0					
ANR	561052	Identifier	IS_STATIC		561042	0					
ANR	561053	ArgumentList	mask		561042	1					
ANR	561054	Argument	mask		561042	0					
ANR	561055	Identifier	mask		561042	0					
ANR	561056	CallExpression	IS_PUBLIC ( mask )		561042	1					
ANR	561057	Callee	IS_PUBLIC		561042	0					
ANR	561058	Identifier	IS_PUBLIC		561042	0					
ANR	561059	ArgumentList	mask		561042	1					
ANR	561060	Argument	mask		561042	0					
ANR	561061	Identifier	mask		561042	0					
ANR	561062	CompoundStatement		2:45:46:46	561042	1					
ANR	561063	ReturnStatement	return ;	214:2:3998:4004	561042	0	True				
ANR	561064	IdentifierDeclStatement	char * ignored_attrs = NULL ;	223:1:4353:4379	561042	1	True				
ANR	561065	IdentifierDecl	* ignored_attrs = NULL		561042	0					
ANR	561066	IdentifierDeclType	char *		561042	0					
ANR	561067	Identifier	ignored_attrs		561042	1					
ANR	561068	AssignmentExpression	* ignored_attrs = NULL		561042	2		=			
ANR	561069	Identifier	NULL		561042	0					
ANR	561070	Identifier	NULL		561042	1					
ANR	561071	IdentifierDeclStatement	StringList * ignored_attr_list = NULL ;	224:1:4382:4418	561042	2	True				
ANR	561072	IdentifierDecl	* ignored_attr_list = NULL		561042	0					
ANR	561073	IdentifierDeclType	StringList *		561042	0					
ANR	561074	Identifier	ignored_attr_list		561042	1					
ANR	561075	AssignmentExpression	* ignored_attr_list = NULL		561042	2		=			
ANR	561076	Identifier	NULL		561042	0					
ANR	561077	Identifier	NULL		561042	1					
ANR	561078	IfStatement	"if ( s_ad -> LookupString ( ATTR_STARTER_IGNORED_ATTRS , & ignored_attrs ) )"		561042	3					
ANR	561079	Condition	"s_ad -> LookupString ( ATTR_STARTER_IGNORED_ATTRS , & ignored_attrs )"	225:5:4425:4486	561042	0	True				
ANR	561080	CallExpression	"s_ad -> LookupString ( ATTR_STARTER_IGNORED_ATTRS , & ignored_attrs )"		561042	0					
ANR	561081	Callee	s_ad -> LookupString		561042	0					
ANR	561082	PtrMemberAccess	s_ad -> LookupString		561042	0					
ANR	561083	Identifier	s_ad		561042	0					
ANR	561084	Identifier	LookupString		561042	1					
ANR	561085	ArgumentList	ATTR_STARTER_IGNORED_ATTRS		561042	1					
ANR	561086	Argument	ATTR_STARTER_IGNORED_ATTRS		561042	0					
ANR	561087	Identifier	ATTR_STARTER_IGNORED_ATTRS		561042	0					
ANR	561088	Argument	& ignored_attrs		561042	1					
ANR	561089	UnaryOperationExpression	& ignored_attrs		561042	0					
ANR	561090	UnaryOperator	&		561042	0					
ANR	561091	Identifier	ignored_attrs		561042	1					
ANR	561092	CompoundStatement		14:69:541:541	561042	1					
ANR	561093	ExpressionStatement	ignored_attr_list = new StringList ( ignored_attrs )	226:2:4493:4542	561042	0	True				
ANR	561094	AssignmentExpression	ignored_attr_list = new StringList ( ignored_attrs )		561042	0		=			
ANR	561095	Identifier	ignored_attr_list		561042	0					
ANR	561096	Identifier	ignored_attrs		561042	1					
ANR	561097	ExpressionStatement	free ( ignored_attrs )	227:2:4546:4565	561042	1	True				
ANR	561098	CallExpression	free ( ignored_attrs )		561042	0					
ANR	561099	Callee	free		561042	0					
ANR	561100	Identifier	free		561042	0					
ANR	561101	ArgumentList	ignored_attrs		561042	1					
ANR	561102	Argument	ignored_attrs		561042	0					
ANR	561103	Identifier	ignored_attrs		561042	0					
ANR	561104	ExpressionStatement	ignored_attr_list -> append ( ATTR_STARTER_IGNORED_ATTRS )	231:2:4643:4696	561042	2	True				
ANR	561105	CallExpression	ignored_attr_list -> append ( ATTR_STARTER_IGNORED_ATTRS )		561042	0					
ANR	561106	Callee	ignored_attr_list -> append		561042	0					
ANR	561107	PtrMemberAccess	ignored_attr_list -> append		561042	0					
ANR	561108	Identifier	ignored_attr_list		561042	0					
ANR	561109	Identifier	append		561042	1					
ANR	561110	ArgumentList	ATTR_STARTER_IGNORED_ATTRS		561042	1					
ANR	561111	Argument	ATTR_STARTER_IGNORED_ATTRS		561042	0					
ANR	561112	Identifier	ATTR_STARTER_IGNORED_ATTRS		561042	0					
ANR	561113	IdentifierDeclStatement	ExprTree * tree ;	234:1:4703:4717	561042	4	True				
ANR	561114	IdentifierDecl	* tree		561042	0					
ANR	561115	IdentifierDeclType	ExprTree *		561042	0					
ANR	561116	Identifier	tree		561042	1					
ANR	561117	IdentifierDeclStatement	const char * lhstr = NULL ;	235:1:4720:4744	561042	5	True				
ANR	561118	IdentifierDecl	* lhstr = NULL		561042	0					
ANR	561119	IdentifierDeclType	const char *		561042	0					
ANR	561120	Identifier	lhstr		561042	1					
ANR	561121	AssignmentExpression	* lhstr = NULL		561042	2		=			
ANR	561122	Identifier	NULL		561042	0					
ANR	561123	Identifier	NULL		561042	1					
ANR	561124	ExpressionStatement	s_ad -> ResetExpr ( )	236:1:4747:4764	561042	6	True				
ANR	561125	CallExpression	s_ad -> ResetExpr ( )		561042	0					
ANR	561126	Callee	s_ad -> ResetExpr		561042	0					
ANR	561127	PtrMemberAccess	s_ad -> ResetExpr		561042	0					
ANR	561128	Identifier	s_ad		561042	0					
ANR	561129	Identifier	ResetExpr		561042	1					
ANR	561130	ArgumentList			561042	1					
ANR	561131	WhileStatement	"while ( s_ad -> NextExpr ( lhstr , tree ) )"		561042	7					
ANR	561132	Condition	"s_ad -> NextExpr ( lhstr , tree )"	237:8:4774:4800	561042	0	True				
ANR	561133	CallExpression	"s_ad -> NextExpr ( lhstr , tree )"		561042	0					
ANR	561134	Callee	s_ad -> NextExpr		561042	0					
ANR	561135	PtrMemberAccess	s_ad -> NextExpr		561042	0					
ANR	561136	Identifier	s_ad		561042	0					
ANR	561137	Identifier	NextExpr		561042	1					
ANR	561138	ArgumentList	lhstr		561042	1					
ANR	561139	Argument	lhstr		561042	0					
ANR	561140	Identifier	lhstr		561042	0					
ANR	561141	Argument	tree		561042	1					
ANR	561142	Identifier	tree		561042	0					
ANR	561143	CompoundStatement		26:38:856:856	561042	1					
ANR	561144	IfStatement	if ( ignored_attr_list )		561042	0					
ANR	561145	Condition	ignored_attr_list	239:6:4813:4829	561042	0	True				
ANR	561146	Identifier	ignored_attr_list		561042	0					
ANR	561147	CompoundStatement		28:25:884:884	561042	1					
ANR	561148	IfStatement	if ( ! ignored_attr_list -> contains ( lhstr ) )		561042	0					
ANR	561149	Condition	! ignored_attr_list -> contains ( lhstr )	241:7:4902:4936	561042	0	True				
ANR	561150	UnaryOperationExpression	! ignored_attr_list -> contains ( lhstr )		561042	0					
ANR	561151	UnaryOperator	!		561042	0					
ANR	561152	CallExpression	ignored_attr_list -> contains ( lhstr )		561042	1					
ANR	561153	Callee	ignored_attr_list -> contains		561042	0					
ANR	561154	PtrMemberAccess	ignored_attr_list -> contains		561042	0					
ANR	561155	Identifier	ignored_attr_list		561042	0					
ANR	561156	Identifier	contains		561042	1					
ANR	561157	ArgumentList	lhstr		561042	1					
ANR	561158	Argument	lhstr		561042	0					
ANR	561159	Identifier	lhstr		561042	0					
ANR	561160	CompoundStatement		30:44:991:991	561042	1					
ANR	561161	ExpressionStatement	"ad -> Insert ( lhstr , tree -> Copy ( ) )"	242:4:4945:4976	561042	0	True				
ANR	561162	CallExpression	"ad -> Insert ( lhstr , tree -> Copy ( ) )"		561042	0					
ANR	561163	Callee	ad -> Insert		561042	0					
ANR	561164	PtrMemberAccess	ad -> Insert		561042	0					
ANR	561165	Identifier	ad		561042	0					
ANR	561166	Identifier	Insert		561042	1					
ANR	561167	ArgumentList	lhstr		561042	1					
ANR	561168	Argument	lhstr		561042	0					
ANR	561169	Identifier	lhstr		561042	0					
ANR	561170	Argument	tree -> Copy ( )		561042	1					
ANR	561171	CallExpression	tree -> Copy ( )		561042	0					
ANR	561172	Callee	tree -> Copy		561042	0					
ANR	561173	PtrMemberAccess	tree -> Copy		561042	0					
ANR	561174	Identifier	tree		561042	0					
ANR	561175	Identifier	Copy		561042	1					
ANR	561176	ArgumentList			561042	1					
ANR	561177	IfStatement	"if ( strncasecmp ( lhstr , ""Has"" , 3 ) == MATCH )"		561042	1					
ANR	561178	Condition	"strncasecmp ( lhstr , ""Has"" , 3 ) == MATCH"	243:8:4986:5022	561042	0	True				
ANR	561179	EqualityExpression	"strncasecmp ( lhstr , ""Has"" , 3 ) == MATCH"		561042	0		==			
ANR	561180	CallExpression	"strncasecmp ( lhstr , ""Has"" , 3 )"		561042	0					
ANR	561181	Callee	strncasecmp		561042	0					
ANR	561182	Identifier	strncasecmp		561042	0					
ANR	561183	ArgumentList	lhstr		561042	1					
ANR	561184	Argument	lhstr		561042	0					
ANR	561185	Identifier	lhstr		561042	0					
ANR	561186	Argument	"""Has"""		561042	1					
ANR	561187	PrimaryExpression	"""Has"""		561042	0					
ANR	561188	Argument	3		561042	2					
ANR	561189	PrimaryExpression	3		561042	0					
ANR	561190	Identifier	MATCH		561042	1					
ANR	561191	CompoundStatement		32:47:1077:1077	561042	1					
ANR	561192	ExpressionStatement	list -> append ( lhstr )	244:5:5032:5051	561042	0	True				
ANR	561193	CallExpression	list -> append ( lhstr )		561042	0					
ANR	561194	Callee	list -> append		561042	0					
ANR	561195	PtrMemberAccess	list -> append		561042	0					
ANR	561196	Identifier	list		561042	0					
ANR	561197	Identifier	append		561042	1					
ANR	561198	ArgumentList	lhstr		561042	1					
ANR	561199	Argument	lhstr		561042	0					
ANR	561200	Identifier	lhstr		561042	0					
ANR	561201	ElseStatement	else		561042	0					
ANR	561202	CompoundStatement		37:7:1127:1127	561042	0					
ANR	561203	IfStatement	"if ( strncasecmp ( lhstr , ""Has"" , 3 ) == MATCH )"		561042	0					
ANR	561204	Condition	"strncasecmp ( lhstr , ""Has"" , 3 ) == MATCH"	250:7:5145:5181	561042	0	True				
ANR	561205	EqualityExpression	"strncasecmp ( lhstr , ""Has"" , 3 ) == MATCH"		561042	0		==			
ANR	561206	CallExpression	"strncasecmp ( lhstr , ""Has"" , 3 )"		561042	0					
ANR	561207	Callee	strncasecmp		561042	0					
ANR	561208	Identifier	strncasecmp		561042	0					
ANR	561209	ArgumentList	lhstr		561042	1					
ANR	561210	Argument	lhstr		561042	0					
ANR	561211	Identifier	lhstr		561042	0					
ANR	561212	Argument	"""Has"""		561042	1					
ANR	561213	PrimaryExpression	"""Has"""		561042	0					
ANR	561214	Argument	3		561042	2					
ANR	561215	PrimaryExpression	3		561042	0					
ANR	561216	Identifier	MATCH		561042	1					
ANR	561217	CompoundStatement		39:47:1237:1237	561042	1					
ANR	561218	ExpressionStatement	"ad -> Insert ( lhstr , tree -> Copy ( ) )"	251:4:5191:5224	561042	0	True				
ANR	561219	CallExpression	"ad -> Insert ( lhstr , tree -> Copy ( ) )"		561042	0					
ANR	561220	Callee	ad -> Insert		561042	0					
ANR	561221	PtrMemberAccess	ad -> Insert		561042	0					
ANR	561222	Identifier	ad		561042	0					
ANR	561223	Identifier	Insert		561042	1					
ANR	561224	ArgumentList	lhstr		561042	1					
ANR	561225	Argument	lhstr		561042	0					
ANR	561226	Identifier	lhstr		561042	0					
ANR	561227	Argument	tree -> Copy ( )		561042	1					
ANR	561228	CallExpression	tree -> Copy ( )		561042	0					
ANR	561229	Callee	tree -> Copy		561042	0					
ANR	561230	PtrMemberAccess	tree -> Copy		561042	0					
ANR	561231	Identifier	tree		561042	0					
ANR	561232	Identifier	Copy		561042	1					
ANR	561233	ArgumentList			561042	1					
ANR	561234	IfStatement	if ( list )		561042	1					
ANR	561235	Condition	list	252:8:5234:5237	561042	0	True				
ANR	561236	Identifier	list		561042	0					
ANR	561237	CompoundStatement		41:15:1293:1293	561042	1					
ANR	561238	ExpressionStatement	list -> append ( lhstr )	253:5:5248:5269	561042	0	True				
ANR	561239	CallExpression	list -> append ( lhstr )		561042	0					
ANR	561240	Callee	list -> append		561042	0					
ANR	561241	PtrMemberAccess	list -> append		561042	0					
ANR	561242	Identifier	list		561042	0					
ANR	561243	Identifier	append		561042	1					
ANR	561244	ArgumentList	lhstr		561042	1					
ANR	561245	Argument	lhstr		561042	0					
ANR	561246	Identifier	lhstr		561042	0					
ANR	561247	ElseStatement	else		561042	0					
ANR	561248	IfStatement	"if ( strncasecmp ( lhstr , ""Java"" , 4 ) == MATCH )"		561042	0					
ANR	561249	Condition	"strncasecmp ( lhstr , ""Java"" , 4 ) == MATCH"	255:14:5291:5328	561042	0	True				
ANR	561250	EqualityExpression	"strncasecmp ( lhstr , ""Java"" , 4 ) == MATCH"		561042	0		==			
ANR	561251	CallExpression	"strncasecmp ( lhstr , ""Java"" , 4 )"		561042	0					
ANR	561252	Callee	strncasecmp		561042	0					
ANR	561253	Identifier	strncasecmp		561042	0					
ANR	561254	ArgumentList	lhstr		561042	1					
ANR	561255	Argument	lhstr		561042	0					
ANR	561256	Identifier	lhstr		561042	0					
ANR	561257	Argument	"""Java"""		561042	1					
ANR	561258	PrimaryExpression	"""Java"""		561042	0					
ANR	561259	Argument	4		561042	2					
ANR	561260	PrimaryExpression	4		561042	0					
ANR	561261	Identifier	MATCH		561042	1					
ANR	561262	CompoundStatement		44:55:1384:1384	561042	1					
ANR	561263	ExpressionStatement	"ad -> Insert ( lhstr , tree -> Copy ( ) )"	256:4:5338:5371	561042	0	True				
ANR	561264	CallExpression	"ad -> Insert ( lhstr , tree -> Copy ( ) )"		561042	0					
ANR	561265	Callee	ad -> Insert		561042	0					
ANR	561266	PtrMemberAccess	ad -> Insert		561042	0					
ANR	561267	Identifier	ad		561042	0					
ANR	561268	Identifier	Insert		561042	1					
ANR	561269	ArgumentList	lhstr		561042	1					
ANR	561270	Argument	lhstr		561042	0					
ANR	561271	Identifier	lhstr		561042	0					
ANR	561272	Argument	tree -> Copy ( )		561042	1					
ANR	561273	CallExpression	tree -> Copy ( )		561042	0					
ANR	561274	Callee	tree -> Copy		561042	0					
ANR	561275	PtrMemberAccess	tree -> Copy		561042	0					
ANR	561276	Identifier	tree		561042	0					
ANR	561277	Identifier	Copy		561042	1					
ANR	561278	ArgumentList			561042	1					
ANR	561279	IfStatement	if ( ignored_attr_list )		561042	8					
ANR	561280	Condition	ignored_attr_list	261:5:5391:5407	561042	0	True				
ANR	561281	Identifier	ignored_attr_list		561042	0					
ANR	561282	CompoundStatement		50:24:1462:1462	561042	1					
ANR	561283	Statement	delete	262:2:5414:5419	561042	0	True				
ANR	561284	ExpressionStatement	ignored_attr_list	262:9:5421:5438	561042	1	True				
ANR	561285	Identifier	ignored_attr_list		561042	0					
ANR	561286	ReturnType	void		561042	1					
ANR	561287	Identifier	Starter :: publish		561042	2					
ANR	561288	ParameterList	"ClassAd * ad , amask_t mask , StringList * list"		561042	3					
ANR	561289	Parameter	ClassAd * ad	211:18:3901:3911	561042	0	True				
ANR	561290	ParameterType	ClassAd *		561042	0					
ANR	561291	Identifier	ad		561042	1					
ANR	561292	Parameter	amask_t mask	211:31:3914:3925	561042	1	True				
ANR	561293	ParameterType	amask_t		561042	0					
ANR	561294	Identifier	mask		561042	1					
ANR	561295	Parameter	StringList * list	211:45:3928:3943	561042	2	True				
ANR	561296	ParameterType	StringList *		561042	0					
ANR	561297	Identifier	list		561042	1					
ANR	561298	CFGEntryNode	ENTRY		561042		True				
ANR	561299	CFGExitNode	EXIT		561042		True				
ANR	561300	Symbol	ATTR_STARTER_IGNORED_ATTRS		561042						
ANR	561301	Symbol	* s_ad		561042						
ANR	561302	Symbol	s_ad -> NextExpr		561042						
ANR	561303	Symbol	ad		561042						
ANR	561304	Symbol	NULL		561042						
ANR	561305	Symbol	s_ad -> LookupString		561042						
ANR	561306	Symbol	ignored_attrs		561042						
ANR	561307	Symbol	tree		561042						
ANR	561308	Symbol	strncasecmp		561042						
ANR	561309	Symbol	* ignored_attr_list		561042						
ANR	561310	Symbol	list		561042						
ANR	561311	Symbol	ignored_attr_list		561042						
ANR	561312	Symbol	ignored_attr_list -> contains		561042						
ANR	561313	Symbol	* tree		561042						
ANR	561314	Symbol	& ignored_attrs		561042						
ANR	561315	Symbol	IS_STATIC		561042						
ANR	561316	Symbol	lhstr		561042						
ANR	561317	Symbol	s_ad		561042						
ANR	561318	Symbol	IS_PUBLIC		561042						
ANR	561319	Symbol	MATCH		561042						
ANR	561320	Symbol	mask		561042						
ANR	561321	Symbol	tree -> Copy		561042						
ANR	561322	Function	Starter :: kill	267:0:5447:5513							
ANR	561323	FunctionDef	Starter :: kill (int signo)		561322	0					
ANR	561324	CompoundStatement		269:0:5479:5513	561322	0					
ANR	561325	ReturnStatement	"return reallykill ( signo , 0 ) ;"	270:1:5482:5511	561322	0	True				
ANR	561326	CallExpression	"reallykill ( signo , 0 )"		561322	0					
ANR	561327	Callee	reallykill		561322	0					
ANR	561328	Identifier	reallykill		561322	0					
ANR	561329	ArgumentList	signo		561322	1					
ANR	561330	Argument	signo		561322	0					
ANR	561331	Identifier	signo		561322	0					
ANR	561332	Argument	0		561322	1					
ANR	561333	PrimaryExpression	0		561322	0					
ANR	561334	ReturnType	bool		561322	1					
ANR	561335	Identifier	Starter :: kill		561322	2					
ANR	561336	ParameterList	int signo		561322	3					
ANR	561337	Parameter	int signo	268:15:5467:5475	561322	0	True				
ANR	561338	ParameterType	int		561322	0					
ANR	561339	Identifier	signo		561322	1					
ANR	561340	CFGEntryNode	ENTRY		561322		True				
ANR	561341	CFGExitNode	EXIT		561322		True				
ANR	561342	Symbol	reallykill		561322						
ANR	561343	Symbol	signo		561322						
ANR	561344	Function	Starter :: killpg	274:0:5517:5585							
ANR	561345	FunctionDef	Starter :: killpg (int signo)		561344	0					
ANR	561346	CompoundStatement		276:0:5551:5585	561344	0					
ANR	561347	ReturnStatement	"return reallykill ( signo , 1 ) ;"	277:1:5554:5583	561344	0	True				
ANR	561348	CallExpression	"reallykill ( signo , 1 )"		561344	0					
ANR	561349	Callee	reallykill		561344	0					
ANR	561350	Identifier	reallykill		561344	0					
ANR	561351	ArgumentList	signo		561344	1					
ANR	561352	Argument	signo		561344	0					
ANR	561353	Identifier	signo		561344	0					
ANR	561354	Argument	1		561344	1					
ANR	561355	PrimaryExpression	1		561344	0					
ANR	561356	ReturnType	bool		561344	1					
ANR	561357	Identifier	Starter :: killpg		561344	2					
ANR	561358	ParameterList	int signo		561344	3					
ANR	561359	Parameter	int signo	275:17:5539:5547	561344	0	True				
ANR	561360	ParameterType	int		561344	0					
ANR	561361	Identifier	signo		561344	1					
ANR	561362	CFGEntryNode	ENTRY		561344		True				
ANR	561363	CFGExitNode	EXIT		561344		True				
ANR	561364	Symbol	reallykill		561344						
ANR	561365	Symbol	signo		561344						
ANR	561366	Function	Starter :: killkids	281:0:5589:5653							
ANR	561367	FunctionDef	Starter :: killkids (int signo)		561366	0					
ANR	561368	CompoundStatement		283:0:5626:5653	561366	0					
ANR	561369	ExpressionStatement	"reallykill ( signo , 2 )"	284:1:5629:5651	561366	0	True				
ANR	561370	CallExpression	"reallykill ( signo , 2 )"		561366	0					
ANR	561371	Callee	reallykill		561366	0					
ANR	561372	Identifier	reallykill		561366	0					
ANR	561373	ArgumentList	signo		561366	1					
ANR	561374	Argument	signo		561366	0					
ANR	561375	Identifier	signo		561366	0					
ANR	561376	Argument	2		561366	1					
ANR	561377	PrimaryExpression	2		561366	0					
ANR	561378	ReturnType	void		561366	1					
ANR	561379	Identifier	Starter :: killkids		561366	2					
ANR	561380	ParameterList	int signo		561366	3					
ANR	561381	Parameter	int signo	282:19:5613:5621	561366	0	True				
ANR	561382	ParameterType	int		561366	0					
ANR	561383	Identifier	signo		561366	1					
ANR	561384	CFGEntryNode	ENTRY		561366		True				
ANR	561385	CFGExitNode	EXIT		561366		True				
ANR	561386	Symbol	signo		561366						
ANR	561387	Function	Starter :: reallykill	288:0:5657:12049							
ANR	561388	FunctionDef	"Starter :: reallykill (int signo , int type)"		561387	0					
ANR	561389	CompoundStatement		290:0:5705:12049	561387	0					
ANR	561390	IdentifierDeclStatement	struct stat st ;	292:1:5722:5736	561387	0	True				
ANR	561391	IdentifierDecl	st		561387	0					
ANR	561392	IdentifierDeclType	struct stat		561387	0					
ANR	561393	Identifier	st		561387	1					
ANR	561394	IdentifierDeclStatement	"int ret = 0 , sig = 0 ;"	294:1:5746:5768	561387	1	True				
ANR	561395	IdentifierDecl	ret = 0		561387	0					
ANR	561396	IdentifierDeclType	int		561387	0					
ANR	561397	Identifier	ret		561387	1					
ANR	561398	AssignmentExpression	ret = 0		561387	2		=			
ANR	561399	Identifier	ret		561387	0					
ANR	561400	PrimaryExpression	0		561387	1					
ANR	561401	IdentifierDecl	sig = 0		561387	1					
ANR	561402	IdentifierDeclType	int		561387	0					
ANR	561403	Identifier	sig		561387	1					
ANR	561404	AssignmentExpression	sig = 0		561387	2		=			
ANR	561405	Identifier	sig		561387	0					
ANR	561406	PrimaryExpression	0		561387	1					
ANR	561407	IdentifierDeclStatement	priv_state priv ;	295:1:5771:5786	561387	2	True				
ANR	561408	IdentifierDecl	priv		561387	0					
ANR	561409	IdentifierDeclType	priv_state		561387	0					
ANR	561410	Identifier	priv		561387	1					
ANR	561411	IdentifierDeclStatement	"const char * signame = """" ;"	296:1:5789:5813	561387	3	True				
ANR	561412	IdentifierDecl	"* signame = """""		561387	0					
ANR	561413	IdentifierDeclType	const char *		561387	0					
ANR	561414	Identifier	signame		561387	1					
ANR	561415	AssignmentExpression	"* signame = """""		561387	2		=			
ANR	561416	Identifier	signame		561387	0					
ANR	561417	PrimaryExpression	""""""		561387	1					
ANR	561418	IfStatement	if ( s_pid == 0 )		561387	4					
ANR	561419	Condition	s_pid == 0	298:6:5822:5831	561387	0	True				
ANR	561420	EqualityExpression	s_pid == 0		561387	0		==			
ANR	561421	Identifier	s_pid		561387	0					
ANR	561422	PrimaryExpression	0		561387	1					
ANR	561423	CompoundStatement		9:19:129:129	561387	1					
ANR	561424	ReturnStatement	return true ;	300:2:5903:5914	561387	0	True				
ANR	561425	Identifier	true		561387	0					
ANR	561426	SwitchStatement	switch ( signo )		561387	5					
ANR	561427	Condition	signo	303:9:5929:5933	561387	0	True				
ANR	561428	Identifier	signo		561387	0					
ANR	561429	CompoundStatement		14:17:231:231	561387	1					
ANR	561430	Label	case DC_SIGSUSPEND :	304:1:5940:5958	561387	0	True				
ANR	561431	Identifier	DC_SIGSUSPEND		561387	0					
ANR	561432	ExpressionStatement	"signame = ""DC_SIGSUSPEND"""	305:2:5962:5987	561387	1	True				
ANR	561433	AssignmentExpression	"signame = ""DC_SIGSUSPEND"""		561387	0		=			
ANR	561434	Identifier	signame		561387	0					
ANR	561435	PrimaryExpression	"""DC_SIGSUSPEND"""		561387	1					
ANR	561436	BreakStatement	break ;	306:2:5991:5996	561387	2	True				
ANR	561437	Label	case DC_SIGHARDKILL :	307:1:5999:6018	561387	3	True				
ANR	561438	Identifier	DC_SIGHARDKILL		561387	0					
ANR	561439	ExpressionStatement	signo = SIGQUIT	308:2:6022:6037	561387	4	True				
ANR	561440	AssignmentExpression	signo = SIGQUIT		561387	0		=			
ANR	561441	Identifier	signo		561387	0					
ANR	561442	Identifier	SIGQUIT		561387	1					
ANR	561443	ExpressionStatement	"signame = ""SIGQUIT"""	309:2:6041:6060	561387	5	True				
ANR	561444	AssignmentExpression	"signame = ""SIGQUIT"""		561387	0		=			
ANR	561445	Identifier	signame		561387	0					
ANR	561446	PrimaryExpression	"""SIGQUIT"""		561387	1					
ANR	561447	BreakStatement	break ;	310:2:6064:6069	561387	6	True				
ANR	561448	Label	case DC_SIGSOFTKILL :	311:1:6072:6091	561387	7	True				
ANR	561449	Identifier	DC_SIGSOFTKILL		561387	0					
ANR	561450	ExpressionStatement	signo = SIGTERM	312:2:6095:6110	561387	8	True				
ANR	561451	AssignmentExpression	signo = SIGTERM		561387	0		=			
ANR	561452	Identifier	signo		561387	0					
ANR	561453	Identifier	SIGTERM		561387	1					
ANR	561454	ExpressionStatement	"signame = ""SIGTERM"""	313:2:6114:6133	561387	9	True				
ANR	561455	AssignmentExpression	"signame = ""SIGTERM"""		561387	0		=			
ANR	561456	Identifier	signame		561387	0					
ANR	561457	PrimaryExpression	"""SIGTERM"""		561387	1					
ANR	561458	BreakStatement	break ;	314:2:6137:6142	561387	10	True				
ANR	561459	Label	case DC_SIGPCKPT :	315:1:6145:6161	561387	11	True				
ANR	561460	Identifier	DC_SIGPCKPT		561387	0					
ANR	561461	ExpressionStatement	"signame = ""DC_SIGPCKPT"""	316:2:6165:6188	561387	12	True				
ANR	561462	AssignmentExpression	"signame = ""DC_SIGPCKPT"""		561387	0		=			
ANR	561463	Identifier	signame		561387	0					
ANR	561464	PrimaryExpression	"""DC_SIGPCKPT"""		561387	1					
ANR	561465	BreakStatement	break ;	317:2:6192:6197	561387	13	True				
ANR	561466	Label	case DC_SIGCONTINUE :	318:1:6200:6219	561387	14	True				
ANR	561467	Identifier	DC_SIGCONTINUE		561387	0					
ANR	561468	ExpressionStatement	"signame = ""DC_SIGCONTINUE"""	319:2:6223:6249	561387	15	True				
ANR	561469	AssignmentExpression	"signame = ""DC_SIGCONTINUE"""		561387	0		=			
ANR	561470	Identifier	signame		561387	0					
ANR	561471	PrimaryExpression	"""DC_SIGCONTINUE"""		561387	1					
ANR	561472	BreakStatement	break ;	320:2:6253:6258	561387	16	True				
ANR	561473	Label	case SIGHUP :	321:1:6261:6272	561387	17	True				
ANR	561474	Identifier	SIGHUP		561387	0					
ANR	561475	ExpressionStatement	"signame = ""SIGHUP"""	322:2:6276:6294	561387	18	True				
ANR	561476	AssignmentExpression	"signame = ""SIGHUP"""		561387	0		=			
ANR	561477	Identifier	signame		561387	0					
ANR	561478	PrimaryExpression	"""SIGHUP"""		561387	1					
ANR	561479	BreakStatement	break ;	323:2:6298:6303	561387	19	True				
ANR	561480	Label	case SIGKILL :	324:1:6306:6318	561387	20	True				
ANR	561481	Identifier	SIGKILL		561387	0					
ANR	561482	ExpressionStatement	"signame = ""SIGKILL"""	325:2:6322:6341	561387	21	True				
ANR	561483	AssignmentExpression	"signame = ""SIGKILL"""		561387	0		=			
ANR	561484	Identifier	signame		561387	0					
ANR	561485	PrimaryExpression	"""SIGKILL"""		561387	1					
ANR	561486	BreakStatement	break ;	326:2:6345:6350	561387	22	True				
ANR	561487	Label	default :	327:1:6353:6360	561387	23	True				
ANR	561488	Identifier	default		561387	0					
ANR	561489	ExpressionStatement	"EXCEPT ( ""Unknown signal (%d) in Starter::reallykill"" , signo )"	328:2:6364:6425	561387	24	True				
ANR	561490	CallExpression	"EXCEPT ( ""Unknown signal (%d) in Starter::reallykill"" , signo )"		561387	0					
ANR	561491	Callee	EXCEPT		561387	0					
ANR	561492	Identifier	EXCEPT		561387	0					
ANR	561493	ArgumentList	"""Unknown signal (%d) in Starter::reallykill"""		561387	1					
ANR	561494	Argument	"""Unknown signal (%d) in Starter::reallykill"""		561387	0					
ANR	561495	PrimaryExpression	"""Unknown signal (%d) in Starter::reallykill"""		561387	0					
ANR	561496	Argument	signo		561387	1					
ANR	561497	Identifier	signo		561387	0					
ANR	561498	IfStatement	if ( ! is_dc ( ) )		561387	6					
ANR	561499	Condition	! is_dc ( )	333:5:6457:6464	561387	0	True				
ANR	561500	UnaryOperationExpression	! is_dc ( )		561387	0					
ANR	561501	UnaryOperator	!		561387	0					
ANR	561502	CallExpression	is_dc ( )		561387	1					
ANR	561503	Callee	is_dc		561387	0					
ANR	561504	Identifier	is_dc		561387	0					
ANR	561505	ArgumentList			561387	1					
ANR	561506	CompoundStatement		44:16:762:762	561387	1					
ANR	561507	SwitchStatement	switch ( signo )		561387	0					
ANR	561508	Condition	signo	334:10:6480:6484	561387	0	True				
ANR	561509	Identifier	signo		561387	0					
ANR	561510	CompoundStatement		45:18:782:782	561387	1					
ANR	561511	Label	case DC_SIGSUSPEND :	335:2:6492:6510	561387	0	True				
ANR	561512	Identifier	DC_SIGSUSPEND		561387	0					
ANR	561513	ExpressionStatement	sig = SIGUSR1	336:3:6515:6528	561387	1	True				
ANR	561514	AssignmentExpression	sig = SIGUSR1		561387	0		=			
ANR	561515	Identifier	sig		561387	0					
ANR	561516	Identifier	SIGUSR1		561387	1					
ANR	561517	BreakStatement	break ;	337:3:6533:6538	561387	2	True				
ANR	561518	Label	case SIGQUIT :	338:2:6542:6554	561387	3	True				
ANR	561519	Identifier	SIGQUIT		561387	0					
ANR	561520	Label	case DC_SIGHARDKILL :	339:2:6558:6577	561387	4	True				
ANR	561521	Identifier	DC_SIGHARDKILL		561387	0					
ANR	561522	ExpressionStatement	sig = SIGINT	340:3:6582:6594	561387	5	True				
ANR	561523	AssignmentExpression	sig = SIGINT		561387	0		=			
ANR	561524	Identifier	sig		561387	0					
ANR	561525	Identifier	SIGINT		561387	1					
ANR	561526	BreakStatement	break ;	341:3:6599:6604	561387	6	True				
ANR	561527	Label	case SIGTERM :	342:2:6608:6620	561387	7	True				
ANR	561528	Identifier	SIGTERM		561387	0					
ANR	561529	Label	case DC_SIGSOFTKILL :	343:2:6624:6643	561387	8	True				
ANR	561530	Identifier	DC_SIGSOFTKILL		561387	0					
ANR	561531	ExpressionStatement	sig = SIGTSTP	344:3:6648:6661	561387	9	True				
ANR	561532	AssignmentExpression	sig = SIGTSTP		561387	0		=			
ANR	561533	Identifier	sig		561387	0					
ANR	561534	Identifier	SIGTSTP		561387	1					
ANR	561535	BreakStatement	break ;	345:3:6666:6671	561387	10	True				
ANR	561536	Label	case DC_SIGPCKPT :	346:2:6675:6691	561387	11	True				
ANR	561537	Identifier	DC_SIGPCKPT		561387	0					
ANR	561538	ExpressionStatement	sig = SIGUSR2	347:3:6696:6709	561387	12	True				
ANR	561539	AssignmentExpression	sig = SIGUSR2		561387	0		=			
ANR	561540	Identifier	sig		561387	0					
ANR	561541	Identifier	SIGUSR2		561387	1					
ANR	561542	BreakStatement	break ;	348:3:6714:6719	561387	13	True				
ANR	561543	Label	case DC_SIGCONTINUE :	349:2:6723:6742	561387	14	True				
ANR	561544	Identifier	DC_SIGCONTINUE		561387	0					
ANR	561545	ExpressionStatement	sig = SIGCONT	350:3:6747:6760	561387	15	True				
ANR	561546	AssignmentExpression	sig = SIGCONT		561387	0		=			
ANR	561547	Identifier	sig		561387	0					
ANR	561548	Identifier	SIGCONT		561387	1					
ANR	561549	BreakStatement	break ;	351:3:6765:6770	561387	16	True				
ANR	561550	Label	case SIGHUP :	352:2:6774:6785	561387	17	True				
ANR	561551	Identifier	SIGHUP		561387	0					
ANR	561552	ExpressionStatement	sig = SIGHUP	353:3:6790:6802	561387	18	True				
ANR	561553	AssignmentExpression	sig = SIGHUP		561387	0		=			
ANR	561554	Identifier	sig		561387	0					
ANR	561555	Identifier	SIGHUP		561387	1					
ANR	561556	BreakStatement	break ;	354:3:6807:6812	561387	19	True				
ANR	561557	Label	case SIGKILL :	355:2:6816:6828	561387	20	True				
ANR	561558	Identifier	SIGKILL		561387	0					
ANR	561559	ExpressionStatement	sig = SIGKILL	356:3:6833:6846	561387	21	True				
ANR	561560	AssignmentExpression	sig = SIGKILL		561387	0		=			
ANR	561561	Identifier	sig		561387	0					
ANR	561562	Identifier	SIGKILL		561387	1					
ANR	561563	BreakStatement	break ;	357:3:6851:6856	561387	22	True				
ANR	561564	Label	default :	358:2:6860:6867	561387	23	True				
ANR	561565	Identifier	default		561387	0					
ANR	561566	ExpressionStatement	"EXCEPT ( ""Unknown signal (%d) in Starter::reallykill"" , signo )"	359:3:6872:6933	561387	24	True				
ANR	561567	CallExpression	"EXCEPT ( ""Unknown signal (%d) in Starter::reallykill"" , signo )"		561387	0					
ANR	561568	Callee	EXCEPT		561387	0					
ANR	561569	Identifier	EXCEPT		561387	0					
ANR	561570	ArgumentList	"""Unknown signal (%d) in Starter::reallykill"""		561387	1					
ANR	561571	Argument	"""Unknown signal (%d) in Starter::reallykill"""		561387	0					
ANR	561572	PrimaryExpression	"""Unknown signal (%d) in Starter::reallykill"""		561387	0					
ANR	561573	Argument	signo		561387	1					
ANR	561574	Identifier	signo		561387	0					
ANR	561575	IdentifierDeclStatement	"int needs_stat = TRUE , first_time = TRUE ;"	394:1:8515:8555	561387	7	True				
ANR	561576	IdentifierDecl	needs_stat = TRUE		561387	0					
ANR	561577	IdentifierDeclType	int		561387	0					
ANR	561578	Identifier	needs_stat		561387	1					
ANR	561579	AssignmentExpression	needs_stat = TRUE		561387	2		=			
ANR	561580	Identifier	TRUE		561387	0					
ANR	561581	Identifier	TRUE		561387	1					
ANR	561582	IdentifierDecl	first_time = TRUE		561387	1					
ANR	561583	IdentifierDeclType	int		561387	0					
ANR	561584	Identifier	first_time		561387	1					
ANR	561585	AssignmentExpression	first_time = TRUE		561387	2		=			
ANR	561586	Identifier	TRUE		561387	0					
ANR	561587	Identifier	TRUE		561387	1					
ANR	561588	WhileStatement	while ( needs_stat )		561387	8					
ANR	561589	Condition	needs_stat	395:8:8565:8574	561387	0	True				
ANR	561590	Identifier	needs_stat		561387	0					
ANR	561591	CompoundStatement		106:21:2872:2872	561387	1					
ANR	561592	ExpressionStatement	errno = 0	396:2:8582:8591	561387	0	True				
ANR	561593	AssignmentExpression	errno = 0		561387	0		=			
ANR	561594	Identifier	errno		561387	0					
ANR	561595	PrimaryExpression	0		561387	1					
ANR	561596	ExpressionStatement	"ret = stat ( s_path , & st )"	397:2:8595:8618	561387	1	True				
ANR	561597	AssignmentExpression	"ret = stat ( s_path , & st )"		561387	0		=			
ANR	561598	Identifier	ret		561387	0					
ANR	561599	CallExpression	"stat ( s_path , & st )"		561387	1					
ANR	561600	Callee	stat		561387	0					
ANR	561601	Identifier	stat		561387	0					
ANR	561602	ArgumentList	s_path		561387	1					
ANR	561603	Argument	s_path		561387	0					
ANR	561604	Identifier	s_path		561387	0					
ANR	561605	Argument	& st		561387	1					
ANR	561606	UnaryOperationExpression	& st		561387	0					
ANR	561607	UnaryOperator	&		561387	0					
ANR	561608	Identifier	st		561387	1					
ANR	561609	IfStatement	if ( ret >= 0 )		561387	2					
ANR	561610	Condition	ret >= 0	398:6:8626:8632	561387	0	True				
ANR	561611	RelationalExpression	ret >= 0		561387	0		>=			
ANR	561612	Identifier	ret		561387	0					
ANR	561613	PrimaryExpression	0		561387	1					
ANR	561614	CompoundStatement		109:16:2930:2930	561387	1					
ANR	561615	ExpressionStatement	needs_stat = FALSE	399:3:8641:8659	561387	0	True				
ANR	561616	AssignmentExpression	needs_stat = FALSE		561387	0		=			
ANR	561617	Identifier	needs_stat		561387	0					
ANR	561618	Identifier	FALSE		561387	1					
ANR	561619	ContinueStatement	continue ;	400:3:8664:8672	561387	1	True				
ANR	561620	SwitchStatement	switch ( errno )		561387	3					
ANR	561621	Condition	errno	402:10:8688:8692	561387	0	True				
ANR	561622	Identifier	errno		561387	0					
ANR	561623	CompoundStatement		113:18:2990:2990	561387	1					
ANR	561624	Label	case EINTR :	403:2:8700:8710	561387	0	True				
ANR	561625	Identifier	EINTR		561387	0					
ANR	561626	Label	case ETIMEDOUT :	404:2:8714:8728	561387	1	True				
ANR	561627	Identifier	ETIMEDOUT		561387	0					
ANR	561628	BreakStatement	break ;	405:3:8733:8738	561387	2	True				
ANR	561629	Label	case ENOENT :	406:2:8742:8753	561387	3	True				
ANR	561630	Identifier	ENOENT		561387	0					
ANR	561631	Label	case ENOTDIR :	407:2:8757:8769	561387	4	True				
ANR	561632	Identifier	ENOTDIR		561387	0					
ANR	561633	Label	case EACCES :	408:2:8773:8784	561387	5	True				
ANR	561634	Identifier	EACCES		561387	0					
ANR	561635	ExpressionStatement	needs_stat = FALSE	409:3:8789:8807	561387	6	True				
ANR	561636	AssignmentExpression	needs_stat = FALSE		561387	0		=			
ANR	561637	Identifier	needs_stat		561387	0					
ANR	561638	Identifier	FALSE		561387	1					
ANR	561639	BreakStatement	break ;	410:3:8812:8817	561387	7	True				
ANR	561640	Label	case ESTALE :	416:2:9075:9086	561387	8	True				
ANR	561641	Identifier	ESTALE		561387	0					
ANR	561642	ExpressionStatement	"EXCEPT ( ""Condor binaries are on a stale NFS mount.  Aborting."" )"	417:3:9091:9155	561387	9	True				
ANR	561643	CallExpression	"EXCEPT ( ""Condor binaries are on a stale NFS mount.  Aborting."" )"		561387	0					
ANR	561644	Callee	EXCEPT		561387	0					
ANR	561645	Identifier	EXCEPT		561387	0					
ANR	561646	ArgumentList	"""Condor binaries are on a stale NFS mount.  Aborting."""		561387	1					
ANR	561647	Argument	"""Condor binaries are on a stale NFS mount.  Aborting."""		561387	0					
ANR	561648	PrimaryExpression	"""Condor binaries are on a stale NFS mount.  Aborting."""		561387	0					
ANR	561649	BreakStatement	break ;	418:3:9160:9165	561387	10	True				
ANR	561650	Label	default :	432:2:9465:9472	561387	11	True				
ANR	561651	Identifier	default		561387	0					
ANR	561652	ExpressionStatement	"EXCEPT ( ""stat(%s) failed with unexpected errno %d (%s)"" , s_path , errno , strerror ( errno ) )"	433:3:9477:9574	561387	12	True				
ANR	561653	CallExpression	"EXCEPT ( ""stat(%s) failed with unexpected errno %d (%s)"" , s_path , errno , strerror ( errno ) )"		561387	0					
ANR	561654	Callee	EXCEPT		561387	0					
ANR	561655	Identifier	EXCEPT		561387	0					
ANR	561656	ArgumentList	"""stat(%s) failed with unexpected errno %d (%s)"""		561387	1					
ANR	561657	Argument	"""stat(%s) failed with unexpected errno %d (%s)"""		561387	0					
ANR	561658	PrimaryExpression	"""stat(%s) failed with unexpected errno %d (%s)"""		561387	0					
ANR	561659	Argument	s_path		561387	1					
ANR	561660	Identifier	s_path		561387	0					
ANR	561661	Argument	errno		561387	2					
ANR	561662	Identifier	errno		561387	0					
ANR	561663	Argument	strerror ( errno )		561387	3					
ANR	561664	CallExpression	strerror ( errno )		561387	0					
ANR	561665	Callee	strerror		561387	0					
ANR	561666	Identifier	strerror		561387	0					
ANR	561667	ArgumentList	errno		561387	1					
ANR	561668	Argument	errno		561387	0					
ANR	561669	Identifier	errno		561387	0					
ANR	561670	IfStatement	if ( is_dc ( ) )		561387	9					
ANR	561671	Condition	is_dc ( )	439:5:9618:9624	561387	0	True				
ANR	561672	CallExpression	is_dc ( )		561387	0					
ANR	561673	Callee	is_dc		561387	0					
ANR	561674	Identifier	is_dc		561387	0					
ANR	561675	ArgumentList			561387	1					
ANR	561676	CompoundStatement		150:15:3922:3922	561387	1					
ANR	561677	IfStatement	if ( type == 1 )		561387	0					
ANR	561678	Condition	type == 1	443:7:9777:9785	561387	0	True				
ANR	561679	EqualityExpression	type == 1		561387	0		==			
ANR	561680	Identifier	type		561387	0					
ANR	561681	PrimaryExpression	1		561387	1					
ANR	561682	CompoundStatement		154:19:4083:4083	561387	1					
ANR	561683	ExpressionStatement	type = 2	444:3:9794:9802	561387	0	True				
ANR	561684	AssignmentExpression	type = 2		561387	0		=			
ANR	561685	Identifier	type		561387	0					
ANR	561686	PrimaryExpression	2		561387	1					
ANR	561687	SwitchStatement	switch ( type )		561387	10					
ANR	561688	Condition	type	448:9:9821:9824	561387	0	True				
ANR	561689	Identifier	type		561387	0					
ANR	561690	CompoundStatement		159:16:4122:4122	561387	1					
ANR	561691	Label	case 0 :	449:1:9831:9837	561387	0	True				
ANR	561692	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""In Starter::kill() with pid %d, sig %d (%s)\\n"" , s_pid , signo , signame )"	450:2:9841:9947	561387	1	True				
ANR	561693	CallExpression	"dprintf ( D_FULLDEBUG , ""In Starter::kill() with pid %d, sig %d (%s)\\n"" , s_pid , signo , signame )"		561387	0					
ANR	561694	Callee	dprintf		561387	0					
ANR	561695	Identifier	dprintf		561387	0					
ANR	561696	ArgumentList	D_FULLDEBUG		561387	1					
ANR	561697	Argument	D_FULLDEBUG		561387	0					
ANR	561698	Identifier	D_FULLDEBUG		561387	0					
ANR	561699	Argument	"""In Starter::kill() with pid %d, sig %d (%s)\\n"""		561387	1					
ANR	561700	PrimaryExpression	"""In Starter::kill() with pid %d, sig %d (%s)\\n"""		561387	0					
ANR	561701	Argument	s_pid		561387	2					
ANR	561702	Identifier	s_pid		561387	0					
ANR	561703	Argument	signo		561387	3					
ANR	561704	Identifier	signo		561387	0					
ANR	561705	Argument	signame		561387	4					
ANR	561706	Identifier	signame		561387	0					
ANR	561707	BreakStatement	break ;	453:2:9951:9956	561387	2	True				
ANR	561708	Label	case 1 :	454:1:9959:9965	561387	3	True				
ANR	561709	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""In Starter::killpg() with pid %d, sig %d (%s)\\n"" , s_pid , signo , signame )"	455:2:9969:10077	561387	4	True				
ANR	561710	CallExpression	"dprintf ( D_FULLDEBUG , ""In Starter::killpg() with pid %d, sig %d (%s)\\n"" , s_pid , signo , signame )"		561387	0					
ANR	561711	Callee	dprintf		561387	0					
ANR	561712	Identifier	dprintf		561387	0					
ANR	561713	ArgumentList	D_FULLDEBUG		561387	1					
ANR	561714	Argument	D_FULLDEBUG		561387	0					
ANR	561715	Identifier	D_FULLDEBUG		561387	0					
ANR	561716	Argument	"""In Starter::killpg() with pid %d, sig %d (%s)\\n"""		561387	1					
ANR	561717	PrimaryExpression	"""In Starter::killpg() with pid %d, sig %d (%s)\\n"""		561387	0					
ANR	561718	Argument	s_pid		561387	2					
ANR	561719	Identifier	s_pid		561387	0					
ANR	561720	Argument	signo		561387	3					
ANR	561721	Identifier	signo		561387	0					
ANR	561722	Argument	signame		561387	4					
ANR	561723	Identifier	signame		561387	0					
ANR	561724	BreakStatement	break ;	458:2:10081:10086	561387	5	True				
ANR	561725	Label	case 2 :	459:1:10089:10095	561387	6	True				
ANR	561726	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""In Starter::kill_kids() with pid %d, sig %d (%s)\\n"" , s_pid , signo , signame )"	460:2:10099:10210	561387	7	True				
ANR	561727	CallExpression	"dprintf ( D_FULLDEBUG , ""In Starter::kill_kids() with pid %d, sig %d (%s)\\n"" , s_pid , signo , signame )"		561387	0					
ANR	561728	Callee	dprintf		561387	0					
ANR	561729	Identifier	dprintf		561387	0					
ANR	561730	ArgumentList	D_FULLDEBUG		561387	1					
ANR	561731	Argument	D_FULLDEBUG		561387	0					
ANR	561732	Identifier	D_FULLDEBUG		561387	0					
ANR	561733	Argument	"""In Starter::kill_kids() with pid %d, sig %d (%s)\\n"""		561387	1					
ANR	561734	PrimaryExpression	"""In Starter::kill_kids() with pid %d, sig %d (%s)\\n"""		561387	0					
ANR	561735	Argument	s_pid		561387	2					
ANR	561736	Identifier	s_pid		561387	0					
ANR	561737	Argument	signo		561387	3					
ANR	561738	Identifier	signo		561387	0					
ANR	561739	Argument	signame		561387	4					
ANR	561740	Identifier	signame		561387	0					
ANR	561741	BreakStatement	break ;	463:2:10214:10219	561387	8	True				
ANR	561742	Label	default :	464:1:10222:10229	561387	9	True				
ANR	561743	Identifier	default		561387	0					
ANR	561744	ExpressionStatement	"EXCEPT ( ""Unknown type (%d) in Starter::reallykill\\n"" , type )"	465:2:10233:10293	561387	10	True				
ANR	561745	CallExpression	"EXCEPT ( ""Unknown type (%d) in Starter::reallykill\\n"" , type )"		561387	0					
ANR	561746	Callee	EXCEPT		561387	0					
ANR	561747	Identifier	EXCEPT		561387	0					
ANR	561748	ArgumentList	"""Unknown type (%d) in Starter::reallykill\\n"""		561387	1					
ANR	561749	Argument	"""Unknown type (%d) in Starter::reallykill\\n"""		561387	0					
ANR	561750	PrimaryExpression	"""Unknown type (%d) in Starter::reallykill\\n"""		561387	0					
ANR	561751	Argument	type		561387	1					
ANR	561752	Identifier	type		561387	0					
ANR	561753	ExpressionStatement	priv = set_root_priv ( )	468:1:10300:10322	561387	11	True				
ANR	561754	AssignmentExpression	priv = set_root_priv ( )		561387	0		=			
ANR	561755	Identifier	priv		561387	0					
ANR	561756	CallExpression	set_root_priv ( )		561387	1					
ANR	561757	Callee	set_root_priv		561387	0					
ANR	561758	Identifier	set_root_priv		561387	0					
ANR	561759	ArgumentList			561387	1					
ANR	561760	IfStatement	if ( ! is_dc ( ) )		561387	12					
ANR	561761	Condition	! is_dc ( )	471:5:10344:10352	561387	0	True				
ANR	561762	UnaryOperationExpression	! is_dc ( )		561387	0					
ANR	561763	UnaryOperator	!		561387	0					
ANR	561764	CallExpression	is_dc ( )		561387	1					
ANR	561765	Callee	is_dc		561387	0					
ANR	561766	Identifier	is_dc		561387	0					
ANR	561767	ArgumentList			561387	1					
ANR	561768	CompoundStatement		182:17:4650:4650	561387	1					
ANR	561769	IfStatement	if ( sig != SIGSTOP && sig != SIGCONT && sig != SIGKILL )		561387	0					
ANR	561770	Condition	sig != SIGSTOP && sig != SIGCONT && sig != SIGKILL	475:6:10525:10574	561387	0	True				
ANR	561771	AndExpression	sig != SIGSTOP && sig != SIGCONT && sig != SIGKILL		561387	0		&&			
ANR	561772	EqualityExpression	sig != SIGSTOP		561387	0		!=			
ANR	561773	Identifier	sig		561387	0					
ANR	561774	Identifier	SIGSTOP		561387	1					
ANR	561775	AndExpression	sig != SIGCONT && sig != SIGKILL		561387	1		&&			
ANR	561776	EqualityExpression	sig != SIGCONT		561387	0		!=			
ANR	561777	Identifier	sig		561387	0					
ANR	561778	Identifier	SIGCONT		561387	1					
ANR	561779	EqualityExpression	sig != SIGKILL		561387	1		!=			
ANR	561780	Identifier	sig		561387	0					
ANR	561781	Identifier	SIGKILL		561387	1					
ANR	561782	CompoundStatement		186:59:4872:4872	561387	1					
ANR	561783	IfStatement	if ( type == 1 )		561387	0					
ANR	561784	Condition	type == 1	476:7:10587:10595	561387	0	True				
ANR	561785	EqualityExpression	type == 1		561387	0		==			
ANR	561786	Identifier	type		561387	0					
ANR	561787	PrimaryExpression	1		561387	1					
ANR	561788	CompoundStatement		187:19:4893:4893	561387	1					
ANR	561789	Statement	ret	477:4:10606:10608	561387	0	True				
ANR	561790	Statement	=	477:8:10610:10610	561387	1	True				
ANR	561791	Statement	::	477:10:10612:10613	561387	2	True				
ANR	561792	ExpressionStatement	"kill ( - ( s_pid ) , SIGCONT )"	477:12:10614:10639	561387	3	True				
ANR	561793	CallExpression	"kill ( - ( s_pid ) , SIGCONT )"		561387	0					
ANR	561794	Callee	kill		561387	0					
ANR	561795	Identifier	kill		561387	0					
ANR	561796	ArgumentList	- ( s_pid )		561387	1					
ANR	561797	Argument	- ( s_pid )		561387	0					
ANR	561798	UnaryOperationExpression	- ( s_pid )		561387	0					
ANR	561799	UnaryOperator	-		561387	0					
ANR	561800	Identifier	s_pid		561387	1					
ANR	561801	Argument	SIGCONT		561387	1					
ANR	561802	Identifier	SIGCONT		561387	0					
ANR	561803	ElseStatement	else		561387	0					
ANR	561804	IfStatement	if ( type == 0 && ! daemonCore -> ProcessExitedButNotReaped ( s_pid ) )		561387	0					
ANR	561805	Condition	type == 0 && ! daemonCore -> ProcessExitedButNotReaped ( s_pid )	478:14:10655:10719	561387	0	True				
ANR	561806	AndExpression	type == 0 && ! daemonCore -> ProcessExitedButNotReaped ( s_pid )		561387	0		&&			
ANR	561807	EqualityExpression	type == 0		561387	0		==			
ANR	561808	Identifier	type		561387	0					
ANR	561809	PrimaryExpression	0		561387	1					
ANR	561810	UnaryOperationExpression	! daemonCore -> ProcessExitedButNotReaped ( s_pid )		561387	1					
ANR	561811	UnaryOperator	!		561387	0					
ANR	561812	CallExpression	daemonCore -> ProcessExitedButNotReaped ( s_pid )		561387	1					
ANR	561813	Callee	daemonCore -> ProcessExitedButNotReaped		561387	0					
ANR	561814	PtrMemberAccess	daemonCore -> ProcessExitedButNotReaped		561387	0					
ANR	561815	Identifier	daemonCore		561387	0					
ANR	561816	Identifier	ProcessExitedButNotReaped		561387	1					
ANR	561817	ArgumentList	s_pid		561387	1					
ANR	561818	Argument	s_pid		561387	0					
ANR	561819	Identifier	s_pid		561387	0					
ANR	561820	CompoundStatement		191:3:5020:5020	561387	1					
ANR	561821	Statement	ret	481:4:10732:10734	561387	0	True				
ANR	561822	Statement	=	481:8:10736:10736	561387	1	True				
ANR	561823	Statement	::	481:10:10738:10739	561387	2	True				
ANR	561824	ExpressionStatement	"kill ( ( s_pid ) , SIGCONT )"	481:12:10740:10764	561387	3	True				
ANR	561825	CallExpression	"kill ( ( s_pid ) , SIGCONT )"		561387	0					
ANR	561826	Callee	kill		561387	0					
ANR	561827	Identifier	kill		561387	0					
ANR	561828	ArgumentList	s_pid		561387	1					
ANR	561829	Argument	s_pid		561387	0					
ANR	561830	Identifier	s_pid		561387	0					
ANR	561831	Argument	SIGCONT		561387	1					
ANR	561832	Identifier	SIGCONT		561387	0					
ANR	561833	SwitchStatement	switch ( type )		561387	13					
ANR	561834	Condition	type	488:9:10836:10839	561387	0	True				
ANR	561835	Identifier	type		561387	0					
ANR	561836	CompoundStatement		199:16:5137:5137	561387	1					
ANR	561837	Label	case 0 :	489:1:10846:10852	561387	0	True				
ANR	561838	IfStatement	if ( is_dc ( ) )		561387	1					
ANR	561839	Condition	is_dc ( )	490:6:10860:10866	561387	0	True				
ANR	561840	CallExpression	is_dc ( )		561387	0					
ANR	561841	Callee	is_dc		561387	0					
ANR	561842	Identifier	is_dc		561387	0					
ANR	561843	ArgumentList			561387	1					
ANR	561844	CompoundStatement		201:16:5164:5164	561387	1					
ANR	561845	ExpressionStatement	"ret = daemonCore -> Send_Signal ( ( s_pid ) , signo )"	491:3:10877:10924	561387	0	True				
ANR	561846	AssignmentExpression	"ret = daemonCore -> Send_Signal ( ( s_pid ) , signo )"		561387	0		=			
ANR	561847	Identifier	ret		561387	0					
ANR	561848	CallExpression	"daemonCore -> Send_Signal ( ( s_pid ) , signo )"		561387	1					
ANR	561849	Callee	daemonCore -> Send_Signal		561387	0					
ANR	561850	PtrMemberAccess	daemonCore -> Send_Signal		561387	0					
ANR	561851	Identifier	daemonCore		561387	0					
ANR	561852	Identifier	Send_Signal		561387	1					
ANR	561853	ArgumentList	s_pid		561387	1					
ANR	561854	Argument	s_pid		561387	0					
ANR	561855	Identifier	s_pid		561387	0					
ANR	561856	Argument	signo		561387	1					
ANR	561857	Identifier	signo		561387	0					
ANR	561858	IfStatement	if ( ret == FALSE )		561387	1					
ANR	561859	Condition	ret == FALSE	493:7:10993:11004	561387	0	True				
ANR	561860	EqualityExpression	ret == FALSE		561387	0		==			
ANR	561861	Identifier	ret		561387	0					
ANR	561862	Identifier	FALSE		561387	1					
ANR	561863	CompoundStatement		204:22:5302:5302	561387	1					
ANR	561864	ExpressionStatement	ret = - 1	494:4:11014:11022	561387	0	True				
ANR	561865	AssignmentExpression	ret = - 1		561387	0		=			
ANR	561866	Identifier	ret		561387	0					
ANR	561867	UnaryOperationExpression	- 1		561387	1					
ANR	561868	UnaryOperator	-		561387	0					
ANR	561869	PrimaryExpression	1		561387	1					
ANR	561870	ElseStatement	else		561387	0					
ANR	561871	CompoundStatement		206:10:5328:5328	561387	0					
ANR	561872	ExpressionStatement	ret = 0	496:4:11040:11047	561387	0	True				
ANR	561873	AssignmentExpression	ret = 0		561387	0		=			
ANR	561874	Identifier	ret		561387	0					
ANR	561875	PrimaryExpression	0		561387	1					
ANR	561876	BreakStatement	break ;	498:3:11057:11062	561387	2	True				
ANR	561877	ElseStatement	else		561387	0					
ANR	561878	CompoundStatement		212:7:5384:5384	561387	0					
ANR	561879	IfStatement	if ( ! daemonCore -> ProcessExitedButNotReaped ( s_pid ) )		561387	0					
ANR	561880	Condition	! daemonCore -> ProcessExitedButNotReaped ( s_pid )	502:7:11099:11143	561387	0	True				
ANR	561881	UnaryOperationExpression	! daemonCore -> ProcessExitedButNotReaped ( s_pid )		561387	0					
ANR	561882	UnaryOperator	!		561387	0					
ANR	561883	CallExpression	daemonCore -> ProcessExitedButNotReaped ( s_pid )		561387	1					
ANR	561884	Callee	daemonCore -> ProcessExitedButNotReaped		561387	0					
ANR	561885	PtrMemberAccess	daemonCore -> ProcessExitedButNotReaped		561387	0					
ANR	561886	Identifier	daemonCore		561387	0					
ANR	561887	Identifier	ProcessExitedButNotReaped		561387	1					
ANR	561888	ArgumentList	s_pid		561387	1					
ANR	561889	Argument	s_pid		561387	0					
ANR	561890	Identifier	s_pid		561387	0					
ANR	561891	CompoundStatement		213:54:5440:5440	561387	1					
ANR	561892	Statement	ret	503:4:11152:11154	561387	0	True				
ANR	561893	Statement	=	503:8:11156:11156	561387	1	True				
ANR	561894	Statement	::	503:10:11158:11159	561387	2	True				
ANR	561895	ExpressionStatement	"kill ( ( s_pid ) , sig )"	503:12:11160:11180	561387	3	True				
ANR	561896	CallExpression	"kill ( ( s_pid ) , sig )"		561387	0					
ANR	561897	Callee	kill		561387	0					
ANR	561898	Identifier	kill		561387	0					
ANR	561899	ArgumentList	s_pid		561387	1					
ANR	561900	Argument	s_pid		561387	0					
ANR	561901	Identifier	s_pid		561387	0					
ANR	561902	Argument	sig		561387	1					
ANR	561903	Identifier	sig		561387	0					
ANR	561904	BreakStatement	break ;	505:3:11190:11195	561387	1	True				
ANR	561905	Label	case 1 :	509:1:11224:11230	561387	2	True				
ANR	561906	Statement	ret	512:2:11292:11294	561387	3	True				
ANR	561907	Statement	=	512:6:11296:11296	561387	4	True				
ANR	561908	Statement	::	512:8:11298:11299	561387	5	True				
ANR	561909	ExpressionStatement	"kill ( - ( s_pid ) , sig )"	512:10:11300:11321	561387	6	True				
ANR	561910	CallExpression	"kill ( - ( s_pid ) , sig )"		561387	0					
ANR	561911	Callee	kill		561387	0					
ANR	561912	Identifier	kill		561387	0					
ANR	561913	ArgumentList	- ( s_pid )		561387	1					
ANR	561914	Argument	- ( s_pid )		561387	0					
ANR	561915	UnaryOperationExpression	- ( s_pid )		561387	0					
ANR	561916	UnaryOperator	-		561387	0					
ANR	561917	Identifier	s_pid		561387	1					
ANR	561918	Argument	sig		561387	1					
ANR	561919	Identifier	sig		561387	0					
ANR	561920	BreakStatement	break ;	513:2:11325:11330	561387	7	True				
ANR	561921	Label	case 2 :	516:1:11355:11361	561387	8	True				
ANR	561922	IfStatement	if ( signo != SIGKILL )		561387	9					
ANR	561923	Condition	signo != SIGKILL	517:6:11369:11384	561387	0	True				
ANR	561924	EqualityExpression	signo != SIGKILL		561387	0		!=			
ANR	561925	Identifier	signo		561387	0					
ANR	561926	Identifier	SIGKILL		561387	1					
ANR	561927	CompoundStatement		228:25:5682:5682	561387	1					
ANR	561928	ExpressionStatement	"dprintf ( D_ALWAYS , ""In Starter::killkids() with %s\\n"" , signame )"	518:3:11393:11464	561387	0	True				
ANR	561929	CallExpression	"dprintf ( D_ALWAYS , ""In Starter::killkids() with %s\\n"" , signame )"		561387	0					
ANR	561930	Callee	dprintf		561387	0					
ANR	561931	Identifier	dprintf		561387	0					
ANR	561932	ArgumentList	D_ALWAYS		561387	1					
ANR	561933	Argument	D_ALWAYS		561387	0					
ANR	561934	Identifier	D_ALWAYS		561387	0					
ANR	561935	Argument	"""In Starter::killkids() with %s\\n"""		561387	1					
ANR	561936	PrimaryExpression	"""In Starter::killkids() with %s\\n"""		561387	0					
ANR	561937	Argument	signame		561387	2					
ANR	561938	Identifier	signame		561387	0					
ANR	561939	ExpressionStatement	"EXCEPT ( ""Starter::killkids() can only handle SIGKILL!"" )"	520:3:11469:11525	561387	1	True				
ANR	561940	CallExpression	"EXCEPT ( ""Starter::killkids() can only handle SIGKILL!"" )"		561387	0					
ANR	561941	Callee	EXCEPT		561387	0					
ANR	561942	Identifier	EXCEPT		561387	0					
ANR	561943	ArgumentList	"""Starter::killkids() can only handle SIGKILL!"""		561387	1					
ANR	561944	Argument	"""Starter::killkids() can only handle SIGKILL!"""		561387	0					
ANR	561945	PrimaryExpression	"""Starter::killkids() can only handle SIGKILL!"""		561387	0					
ANR	561946	IfStatement	if ( daemonCore -> Kill_Family ( s_pid ) == FALSE )		561387	10					
ANR	561947	Condition	daemonCore -> Kill_Family ( s_pid ) == FALSE	522:6:11537:11575	561387	0	True				
ANR	561948	EqualityExpression	daemonCore -> Kill_Family ( s_pid ) == FALSE		561387	0		==			
ANR	561949	CallExpression	daemonCore -> Kill_Family ( s_pid )		561387	0					
ANR	561950	Callee	daemonCore -> Kill_Family		561387	0					
ANR	561951	PtrMemberAccess	daemonCore -> Kill_Family		561387	0					
ANR	561952	Identifier	daemonCore		561387	0					
ANR	561953	Identifier	Kill_Family		561387	1					
ANR	561954	ArgumentList	s_pid		561387	1					
ANR	561955	Argument	s_pid		561387	0					
ANR	561956	Identifier	s_pid		561387	0					
ANR	561957	Identifier	FALSE		561387	1					
ANR	561958	CompoundStatement		233:47:5872:5872	561387	1					
ANR	561959	ExpressionStatement	"dprintf ( D_ALWAYS , ""error killing process family of starter with pid %u\\n"" , s_pid )"	523:3:11583:11679	561387	0	True				
ANR	561960	CallExpression	"dprintf ( D_ALWAYS , ""error killing process family of starter with pid %u\\n"" , s_pid )"		561387	0					
ANR	561961	Callee	dprintf		561387	0					
ANR	561962	Identifier	dprintf		561387	0					
ANR	561963	ArgumentList	D_ALWAYS		561387	1					
ANR	561964	Argument	D_ALWAYS		561387	0					
ANR	561965	Identifier	D_ALWAYS		561387	0					
ANR	561966	Argument	"""error killing process family of starter with pid %u\\n"""		561387	1					
ANR	561967	PrimaryExpression	"""error killing process family of starter with pid %u\\n"""		561387	0					
ANR	561968	Argument	s_pid		561387	2					
ANR	561969	Identifier	s_pid		561387	0					
ANR	561970	ExpressionStatement	ret = - 1	526:3:11684:11692	561387	1	True				
ANR	561971	AssignmentExpression	ret = - 1		561387	0		=			
ANR	561972	Identifier	ret		561387	0					
ANR	561973	UnaryOperationExpression	- 1		561387	1					
ANR	561974	UnaryOperator	-		561387	0					
ANR	561975	PrimaryExpression	1		561387	1					
ANR	561976	BreakStatement	break ;	528:2:11700:11705	561387	11	True				
ANR	561977	ExpressionStatement	set_priv ( priv )	531:1:11712:11726	561387	14	True				
ANR	561978	CallExpression	set_priv ( priv )		561387	0					
ANR	561979	Callee	set_priv		561387	0					
ANR	561980	Identifier	set_priv		561387	0					
ANR	561981	ArgumentList	priv		561387	1					
ANR	561982	Argument	priv		561387	0					
ANR	561983	Identifier	priv		561387	0					
ANR	561984	IfStatement	if ( ret < 0 )		561387	15					
ANR	561985	Condition	ret < 0	534:5:11782:11788	561387	0	True				
ANR	561986	RelationalExpression	ret < 0		561387	0		<			
ANR	561987	Identifier	ret		561387	0					
ANR	561988	PrimaryExpression	0		561387	1					
ANR	561989	CompoundStatement		245:15:6086:6086	561387	1					
ANR	561990	IfStatement	if ( errno == ESRCH )		561387	0					
ANR	561991	Condition	errno == ESRCH	535:5:11799:11810	561387	0	True				
ANR	561992	EqualityExpression	errno == ESRCH		561387	0		==			
ANR	561993	Identifier	errno		561387	0					
ANR	561994	Identifier	ESRCH		561387	1					
ANR	561995	CompoundStatement		246:19:6107:6107	561387	1					
ANR	561996	ReturnStatement	return true ;	537:3:11860:11871	561387	0	True				
ANR	561997	Identifier	true		561387	0					
ANR	561998	ElseStatement	else		561387	0					
ANR	561999	CompoundStatement		249:9:6176:6176	561387	0					
ANR	562000	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error sending signal to starter, errno = %d (%s)\\n"" , errno , strerror ( errno ) )"	539:3:11887:11998	561387	0	True				
ANR	562001	CallExpression	"dprintf ( D_ALWAYS , ""Error sending signal to starter, errno = %d (%s)\\n"" , errno , strerror ( errno ) )"		561387	0					
ANR	562002	Callee	dprintf		561387	0					
ANR	562003	Identifier	dprintf		561387	0					
ANR	562004	ArgumentList	D_ALWAYS		561387	1					
ANR	562005	Argument	D_ALWAYS		561387	0					
ANR	562006	Identifier	D_ALWAYS		561387	0					
ANR	562007	Argument	"""Error sending signal to starter, errno = %d (%s)\\n"""		561387	1					
ANR	562008	PrimaryExpression	"""Error sending signal to starter, errno = %d (%s)\\n"""		561387	0					
ANR	562009	Argument	errno		561387	2					
ANR	562010	Identifier	errno		561387	0					
ANR	562011	Argument	strerror ( errno )		561387	3					
ANR	562012	CallExpression	strerror ( errno )		561387	0					
ANR	562013	Callee	strerror		561387	0					
ANR	562014	Identifier	strerror		561387	0					
ANR	562015	ArgumentList	errno		561387	1					
ANR	562016	Argument	errno		561387	0					
ANR	562017	Identifier	errno		561387	0					
ANR	562018	ReturnStatement	return false ;	542:3:12003:12015	561387	1	True				
ANR	562019	Identifier	false		561387	0					
ANR	562020	ElseStatement	else		561387	0					
ANR	562021	CompoundStatement		255:8:6323:6323	561387	0					
ANR	562022	ReturnStatement	return true ;	545:2:12033:12044	561387	0	True				
ANR	562023	Identifier	true		561387	0					
ANR	562024	ReturnType	bool		561387	1					
ANR	562025	Identifier	Starter :: reallykill		561387	2					
ANR	562026	ParameterList	"int signo , int type"		561387	3					
ANR	562027	Parameter	int signo	289:21:5683:5691	561387	0	True				
ANR	562028	ParameterType	int		561387	0					
ANR	562029	Identifier	signo		561387	1					
ANR	562030	Parameter	int type	289:32:5694:5701	561387	1	True				
ANR	562031	ParameterType	int		561387	0					
ANR	562032	Identifier	type		561387	1					
ANR	562033	CFGEntryNode	ENTRY		561387		True				
ANR	562034	CFGExitNode	EXIT		561387		True				
ANR	562035	Symbol	SIGQUIT		561387						
ANR	562036	Symbol	is_dc		561387						
ANR	562037	Symbol	& st		561387						
ANR	562038	Symbol	type		561387						
ANR	562039	Symbol	SIGKILL		561387						
ANR	562040	Symbol	sig		561387						
ANR	562041	Symbol	daemonCore -> Kill_Family		561387						
ANR	562042	Symbol	first_time		561387						
ANR	562043	Symbol	signo		561387						
ANR	562044	Symbol	daemonCore		561387						
ANR	562045	Symbol	SIGHUP		561387						
ANR	562046	Symbol	priv		561387						
ANR	562047	Symbol	SIGTERM		561387						
ANR	562048	Symbol	SIGCONT		561387						
ANR	562049	Symbol	s_path		561387						
ANR	562050	Symbol	ret		561387						
ANR	562051	Symbol	st		561387						
ANR	562052	Symbol	errno		561387						
ANR	562053	Symbol	stat		561387						
ANR	562054	Symbol	daemonCore -> ProcessExitedButNotReaped		561387						
ANR	562055	Symbol	signame		561387						
ANR	562056	Symbol	SIGUSR2		561387						
ANR	562057	Symbol	D_ALWAYS		561387						
ANR	562058	Symbol	false		561387						
ANR	562059	Symbol	SIGUSR1		561387						
ANR	562060	Symbol	TRUE		561387						
ANR	562061	Symbol	SIGTSTP		561387						
ANR	562062	Symbol	D_FULLDEBUG		561387						
ANR	562063	Symbol	set_root_priv		561387						
ANR	562064	Symbol	strerror		561387						
ANR	562065	Symbol	daemonCore -> Send_Signal		561387						
ANR	562066	Symbol	needs_stat		561387						
ANR	562067	Symbol	SIGSTOP		561387						
ANR	562068	Symbol	SIGINT		561387						
ANR	562069	Symbol	* daemonCore		561387						
ANR	562070	Symbol	true		561387						
ANR	562071	Symbol	FALSE		561387						
ANR	562072	Symbol	ESRCH		561387						
ANR	562073	Symbol	s_pid		561387						
ANR	562074	Function	Starter :: finalizeExecuteDir	549:0:12052:12327							
ANR	562075	FunctionDef	Starter :: finalizeExecuteDir ()		562074	0					
ANR	562076	CompoundStatement		551:0:12087:12327	562074	0					
ANR	562077	IfStatement	if ( ! executeDir ( ) )		562074	0					
ANR	562078	Condition	! executeDir ( )	554:5:12218:12230	562074	0	True				
ANR	562079	UnaryOperationExpression	! executeDir ( )		562074	0					
ANR	562080	UnaryOperator	!		562074	0					
ANR	562081	CallExpression	executeDir ( )		562074	1					
ANR	562082	Callee	executeDir		562074	0					
ANR	562083	Identifier	executeDir		562074	0					
ANR	562084	ArgumentList			562074	1					
ANR	562085	CompoundStatement		4:21:146:146	562074	1					
ANR	562086	ExpressionStatement	ASSERT ( s_claim && s_claim -> rip ( ) )	555:2:12238:12273	562074	0	True				
ANR	562087	CallExpression	ASSERT ( s_claim && s_claim -> rip ( ) )		562074	0					
ANR	562088	Callee	ASSERT		562074	0					
ANR	562089	Identifier	ASSERT		562074	0					
ANR	562090	ArgumentList	s_claim && s_claim -> rip ( )		562074	1					
ANR	562091	Argument	s_claim && s_claim -> rip ( )		562074	0					
ANR	562092	AndExpression	s_claim && s_claim -> rip ( )		562074	0		&&			
ANR	562093	Identifier	s_claim		562074	0					
ANR	562094	CallExpression	s_claim -> rip ( )		562074	1					
ANR	562095	Callee	s_claim -> rip		562074	0					
ANR	562096	PtrMemberAccess	s_claim -> rip		562074	0					
ANR	562097	Identifier	s_claim		562074	0					
ANR	562098	Identifier	rip		562074	1					
ANR	562099	ArgumentList			562074	1					
ANR	562100	ExpressionStatement	setExecuteDir ( s_claim -> rip ( ) -> executeDir ( ) )	556:2:12277:12322	562074	1	True				
ANR	562101	CallExpression	setExecuteDir ( s_claim -> rip ( ) -> executeDir ( ) )		562074	0					
ANR	562102	Callee	setExecuteDir		562074	0					
ANR	562103	Identifier	setExecuteDir		562074	0					
ANR	562104	ArgumentList	s_claim -> rip ( ) -> executeDir ( )		562074	1					
ANR	562105	Argument	s_claim -> rip ( ) -> executeDir ( )		562074	0					
ANR	562106	CallExpression	s_claim -> rip ( ) -> executeDir ( )		562074	0					
ANR	562107	Callee	s_claim -> rip ( ) -> executeDir		562074	0					
ANR	562108	PtrMemberAccess	s_claim -> rip ( ) -> executeDir		562074	0					
ANR	562109	CallExpression	s_claim -> rip ( )		562074	0					
ANR	562110	Callee	s_claim -> rip		562074	0					
ANR	562111	PtrMemberAccess	s_claim -> rip		562074	0					
ANR	562112	Identifier	s_claim		562074	0					
ANR	562113	Identifier	rip		562074	1					
ANR	562114	ArgumentList			562074	1					
ANR	562115	Identifier	executeDir		562074	1					
ANR	562116	ArgumentList			562074	1					
ANR	562117	ReturnType	void		562074	1					
ANR	562118	Identifier	Starter :: finalizeExecuteDir		562074	2					
ANR	562119	ParameterList			562074	3					
ANR	562120	CFGEntryNode	ENTRY		562074		True				
ANR	562121	CFGExitNode	EXIT		562074		True				
ANR	562122	Symbol	s_claim -> rip ( ) -> executeDir		562074						
ANR	562123	Symbol	* s_claim		562074						
ANR	562124	Symbol	* * s_claim		562074						
ANR	562125	Symbol	s_claim -> rip		562074						
ANR	562126	Symbol	* s_claim -> rip		562074						
ANR	562127	Symbol	executeDir		562074						
ANR	562128	Symbol	s_claim		562074						
ANR	562129	Function	Starter :: executeDir	560:0:12330:12430							
ANR	562130	FunctionDef	Starter :: executeDir ()		562129	0					
ANR	562131	CompoundStatement		562:0:12365:12430	562129	0					
ANR	562132	ReturnStatement	return s_execute_dir . Length ( ) ? s_execute_dir . Value ( ) : NULL ;	563:1:12368:12428	562129	0	True				
ANR	562133	ConditionalExpression	s_execute_dir . Length ( ) ? s_execute_dir . Value ( ) : NULL		562129	0					
ANR	562134	Condition	s_execute_dir . Length ( )		562129	0					
ANR	562135	CallExpression	s_execute_dir . Length ( )		562129	0					
ANR	562136	Callee	s_execute_dir . Length		562129	0					
ANR	562137	MemberAccess	s_execute_dir . Length		562129	0					
ANR	562138	Identifier	s_execute_dir		562129	0					
ANR	562139	Identifier	Length		562129	1					
ANR	562140	ArgumentList			562129	1					
ANR	562141	CallExpression	s_execute_dir . Value ( )		562129	1					
ANR	562142	Callee	s_execute_dir . Value		562129	0					
ANR	562143	MemberAccess	s_execute_dir . Value		562129	0					
ANR	562144	Identifier	s_execute_dir		562129	0					
ANR	562145	Identifier	Value		562129	1					
ANR	562146	ArgumentList			562129	1					
ANR	562147	Identifier	NULL		562129	2					
ANR	562148	ReturnType	char const *		562129	1					
ANR	562149	Identifier	Starter :: executeDir		562129	2					
ANR	562150	ParameterList			562129	3					
ANR	562151	CFGEntryNode	ENTRY		562129		True				
ANR	562152	CFGExitNode	EXIT		562129		True				
ANR	562153	Symbol	NULL		562129						
ANR	562154	Symbol	s_execute_dir . Length		562129						
ANR	562155	Symbol	s_execute_dir		562129						
ANR	562156	Symbol	s_execute_dir . Value		562129						
ANR	562157	Function	Starter :: spawn	566:0:12433:13120							
ANR	562158	FunctionDef	"Starter :: spawn (time_t now , Stream * s)"		562157	0					
ANR	562159	CompoundStatement		568:0:12478:13120	562157	0					
ANR	562160	ExpressionStatement	finalizeExecuteDir ( )	570:1:12534:12554	562157	0	True				
ANR	562161	CallExpression	finalizeExecuteDir ( )		562157	0					
ANR	562162	Callee	finalizeExecuteDir		562157	0					
ANR	562163	Identifier	finalizeExecuteDir		562157	0					
ANR	562164	ArgumentList			562157	1					
ANR	562165	IfStatement	if ( claimType ( ) == CLAIM_COD )		562157	1					
ANR	562166	Condition	claimType ( ) == CLAIM_COD	572:5:12562:12585	562157	0	True				
ANR	562167	EqualityExpression	claimType ( ) == CLAIM_COD		562157	0		==			
ANR	562168	CallExpression	claimType ( )		562157	0					
ANR	562169	Callee	claimType		562157	0					
ANR	562170	Identifier	claimType		562157	0					
ANR	562171	ArgumentList			562157	1					
ANR	562172	Identifier	CLAIM_COD		562157	1					
ANR	562173	CompoundStatement		5:31:109:109	562157	1					
ANR	562174	ExpressionStatement	s_pid = execJobPipeStarter ( )	573:2:12592:12620	562157	0	True				
ANR	562175	AssignmentExpression	s_pid = execJobPipeStarter ( )		562157	0		=			
ANR	562176	Identifier	s_pid		562157	0					
ANR	562177	CallExpression	execJobPipeStarter ( )		562157	1					
ANR	562178	Callee	execJobPipeStarter		562157	0					
ANR	562179	Identifier	execJobPipeStarter		562157	0					
ANR	562180	ArgumentList			562157	1					
ANR	562181	ElseStatement	else		562157	0					
ANR	562182	IfStatement	if ( claimType ( ) == CLAIM_FETCH )		562157	0					
ANR	562183	Condition	claimType ( ) == CLAIM_FETCH	576:10:12654:12679	562157	0	True				
ANR	562184	EqualityExpression	claimType ( ) == CLAIM_FETCH		562157	0		==			
ANR	562185	CallExpression	claimType ( )		562157	0					
ANR	562186	Callee	claimType		562157	0					
ANR	562187	Identifier	claimType		562157	0					
ANR	562188	ArgumentList			562157	1					
ANR	562189	Identifier	CLAIM_FETCH		562157	1					
ANR	562190	CompoundStatement		9:38:203:203	562157	1					
ANR	562191	ExpressionStatement	s_pid = execJobPipeStarter ( )	577:2:12686:12714	562157	0	True				
ANR	562192	AssignmentExpression	s_pid = execJobPipeStarter ( )		562157	0		=			
ANR	562193	Identifier	s_pid		562157	0					
ANR	562194	CallExpression	execJobPipeStarter ( )		562157	1					
ANR	562195	Callee	execJobPipeStarter		562157	0					
ANR	562196	Identifier	execJobPipeStarter		562157	0					
ANR	562197	ArgumentList			562157	1					
ANR	562198	ElseStatement	else		562157	0					
ANR	562199	IfStatement	if ( isBOINC ( ) )		562157	0					
ANR	562200	Condition	isBOINC ( )	581:10:12772:12780	562157	0	True				
ANR	562201	CallExpression	isBOINC ( )		562157	0					
ANR	562202	Callee	isBOINC		562157	0					
ANR	562203	Identifier	isBOINC		562157	0					
ANR	562204	ArgumentList			562157	1					
ANR	562205	CompoundStatement		14:22:305:305	562157	1					
ANR	562206	ExpressionStatement	s_pid = execBOINCStarter ( )	582:2:12788:12814	562157	0	True				
ANR	562207	AssignmentExpression	s_pid = execBOINCStarter ( )		562157	0		=			
ANR	562208	Identifier	s_pid		562157	0					
ANR	562209	CallExpression	execBOINCStarter ( )		562157	1					
ANR	562210	Callee	execBOINCStarter		562157	0					
ANR	562211	Identifier	execBOINCStarter		562157	0					
ANR	562212	ArgumentList			562157	1					
ANR	562213	ElseStatement	else		562157	0					
ANR	562214	IfStatement	if ( is_dc ( ) )		562157	0					
ANR	562215	Condition	is_dc ( )	585:10:12854:12860	562157	0	True				
ANR	562216	CallExpression	is_dc ( )		562157	0					
ANR	562217	Callee	is_dc		562157	0					
ANR	562218	Identifier	is_dc		562157	0					
ANR	562219	ArgumentList			562157	1					
ANR	562220	CompoundStatement		18:20:385:385	562157	1					
ANR	562221	ExpressionStatement	s_pid = execDCStarter ( s )	586:2:12868:12894	562157	0	True				
ANR	562222	AssignmentExpression	s_pid = execDCStarter ( s )		562157	0		=			
ANR	562223	Identifier	s_pid		562157	0					
ANR	562224	CallExpression	execDCStarter ( s )		562157	1					
ANR	562225	Callee	execDCStarter		562157	0					
ANR	562226	Identifier	execDCStarter		562157	0					
ANR	562227	ArgumentList	s		562157	1					
ANR	562228	Argument	s		562157	0					
ANR	562229	Identifier	s		562157	0					
ANR	562230	ElseStatement	else		562157	0					
ANR	562231	CompoundStatement		21:6:427:427	562157	0					
ANR	562232	ExpressionStatement	s_pid = execOldStarter ( )	590:2:12953:12977	562157	0	True				
ANR	562233	AssignmentExpression	s_pid = execOldStarter ( )		562157	0		=			
ANR	562234	Identifier	s_pid		562157	0					
ANR	562235	CallExpression	execOldStarter ( )		562157	1					
ANR	562236	Callee	execOldStarter		562157	0					
ANR	562237	Identifier	execOldStarter		562157	0					
ANR	562238	ArgumentList			562157	1					
ANR	562239	IfStatement	if ( s_pid == 0 )		562157	2					
ANR	562240	Condition	s_pid == 0	593:5:12988:12997	562157	0	True				
ANR	562241	EqualityExpression	s_pid == 0		562157	0		==			
ANR	562242	Identifier	s_pid		562157	0					
ANR	562243	PrimaryExpression	0		562157	1					
ANR	562244	CompoundStatement		26:18:522:522	562157	1					
ANR	562245	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: exec_starter returned %d\\n"" , s_pid )"	594:2:13005:13068	562157	0	True				
ANR	562246	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: exec_starter returned %d\\n"" , s_pid )"		562157	0					
ANR	562247	Callee	dprintf		562157	0					
ANR	562248	Identifier	dprintf		562157	0					
ANR	562249	ArgumentList	D_ALWAYS		562157	1					
ANR	562250	Argument	D_ALWAYS		562157	0					
ANR	562251	Identifier	D_ALWAYS		562157	0					
ANR	562252	Argument	"""ERROR: exec_starter returned %d\\n"""		562157	1					
ANR	562253	PrimaryExpression	"""ERROR: exec_starter returned %d\\n"""		562157	0					
ANR	562254	Argument	s_pid		562157	2					
ANR	562255	Identifier	s_pid		562157	0					
ANR	562256	ElseStatement	else		562157	0					
ANR	562257	CompoundStatement		28:8:599:599	562157	0					
ANR	562258	ExpressionStatement	s_birthdate = now	596:2:13082:13099	562157	0	True				
ANR	562259	AssignmentExpression	s_birthdate = now		562157	0		=			
ANR	562260	Identifier	s_birthdate		562157	0					
ANR	562261	Identifier	now		562157	1					
ANR	562262	ReturnStatement	return s_pid ;	599:1:13106:13118	562157	3	True				
ANR	562263	Identifier	s_pid		562157	0					
ANR	562264	ReturnType	int		562157	1					
ANR	562265	Identifier	Starter :: spawn		562157	2					
ANR	562266	ParameterList	"time_t now , Stream * s"		562157	3					
ANR	562267	Parameter	time_t now	567:16:12454:12463	562157	0	True				
ANR	562268	ParameterType	time_t		562157	0					
ANR	562269	Identifier	now		562157	1					
ANR	562270	Parameter	Stream * s	567:28:12466:12474	562157	1	True				
ANR	562271	ParameterType	Stream *		562157	0					
ANR	562272	Identifier	s		562157	1					
ANR	562273	CFGEntryNode	ENTRY		562157		True				
ANR	562274	CFGExitNode	EXIT		562157		True				
ANR	562275	Symbol	execBOINCStarter		562157						
ANR	562276	Symbol	CLAIM_FETCH		562157						
ANR	562277	Symbol	CLAIM_COD		562157						
ANR	562278	Symbol	execDCStarter		562157						
ANR	562279	Symbol	D_ALWAYS		562157						
ANR	562280	Symbol	is_dc		562157						
ANR	562281	Symbol	execOldStarter		562157						
ANR	562282	Symbol	s_birthdate		562157						
ANR	562283	Symbol	claimType		562157						
ANR	562284	Symbol	execJobPipeStarter		562157						
ANR	562285	Symbol	s		562157						
ANR	562286	Symbol	isBOINC		562157						
ANR	562287	Symbol	now		562157						
ANR	562288	Symbol	s_pid		562157						
ANR	562289	Function	Starter :: exited	602:0:13123:14915							
ANR	562290	FunctionDef	Starter :: exited (int status)		562289	0					
ANR	562291	CompoundStatement		604:0:13156:14915	562289	0					
ANR	562292	IdentifierDeclStatement	ClassAd * jobAd = NULL ;	605:1:13159:13180	562289	0	True				
ANR	562293	IdentifierDecl	* jobAd = NULL		562289	0					
ANR	562294	IdentifierDeclType	ClassAd *		562289	0					
ANR	562295	Identifier	jobAd		562289	1					
ANR	562296	AssignmentExpression	* jobAd = NULL		562289	2		=			
ANR	562297	Identifier	NULL		562289	0					
ANR	562298	Identifier	NULL		562289	1					
ANR	562299	IdentifierDeclStatement	bool jobAdNeedsFree = true ;	606:1:13183:13209	562289	1	True				
ANR	562300	IdentifierDecl	jobAdNeedsFree = true		562289	0					
ANR	562301	IdentifierDeclType	bool		562289	0					
ANR	562302	Identifier	jobAdNeedsFree		562289	1					
ANR	562303	AssignmentExpression	jobAdNeedsFree = true		562289	2		=			
ANR	562304	Identifier	true		562289	0					
ANR	562305	Identifier	true		562289	1					
ANR	562306	IfStatement	if ( s_claim && s_claim -> ad ( ) )		562289	2					
ANR	562307	Condition	s_claim && s_claim -> ad ( )	608:5:13217:13240	562289	0	True				
ANR	562308	AndExpression	s_claim && s_claim -> ad ( )		562289	0		&&			
ANR	562309	Identifier	s_claim		562289	0					
ANR	562310	CallExpression	s_claim -> ad ( )		562289	1					
ANR	562311	Callee	s_claim -> ad		562289	0					
ANR	562312	PtrMemberAccess	s_claim -> ad		562289	0					
ANR	562313	Identifier	s_claim		562289	0					
ANR	562314	Identifier	ad		562289	1					
ANR	562315	ArgumentList			562289	1					
ANR	562316	CompoundStatement		5:31:86:86	562289	1					
ANR	562317	ExpressionStatement	jobAd = s_claim -> ad ( )	610:2:13332:13353	562289	0	True				
ANR	562318	AssignmentExpression	jobAd = s_claim -> ad ( )		562289	0		=			
ANR	562319	Identifier	jobAd		562289	0					
ANR	562320	CallExpression	s_claim -> ad ( )		562289	1					
ANR	562321	Callee	s_claim -> ad		562289	0					
ANR	562322	PtrMemberAccess	s_claim -> ad		562289	0					
ANR	562323	Identifier	s_claim		562289	0					
ANR	562324	Identifier	ad		562289	1					
ANR	562325	ArgumentList			562289	1					
ANR	562326	ExpressionStatement	jobAdNeedsFree = false	611:2:13357:13379	562289	1	True				
ANR	562327	AssignmentExpression	jobAdNeedsFree = false		562289	0		=			
ANR	562328	Identifier	jobAdNeedsFree		562289	0					
ANR	562329	Identifier	false		562289	1					
ANR	562330	ElseStatement	else		562289	0					
ANR	562331	CompoundStatement		22:2:649:662	562289	0					
ANR	562332	IdentifierDeclStatement	int now = ( int ) time ( 0 ) ;	614:2:13413:13436	562289	0	True				
ANR	562333	IdentifierDecl	now = ( int ) time ( 0 )		562289	0					
ANR	562334	IdentifierDeclType	int		562289	0					
ANR	562335	Identifier	now		562289	1					
ANR	562336	AssignmentExpression	now = ( int ) time ( 0 )		562289	2		=			
ANR	562337	Identifier	now		562289	0					
ANR	562338	CastExpression	( int ) time ( 0 )		562289	1					
ANR	562339	CastTarget	int		562289	0					
ANR	562340	CallExpression	time ( 0 )		562289	1					
ANR	562341	Callee	time		562289	0					
ANR	562342	Identifier	time		562289	0					
ANR	562343	ArgumentList	0		562289	1					
ANR	562344	Argument	0		562289	0					
ANR	562345	PrimaryExpression	0		562289	0					
ANR	562346	ExpressionStatement	jobAd = new ClassAd ( )	615:2:13440:13461	562289	1	True				
ANR	562347	AssignmentExpression	jobAd = new ClassAd ( )		562289	0		=			
ANR	562348	Identifier	jobAd		562289	0					
ANR	562349	UnaryExpression	new ClassAd ( )		562289	1					
ANR	562350	ExpressionStatement	"jobAd -> SetMyTypeName ( ""Job"" )"	616:2:13465:13492	562289	2	True				
ANR	562351	CallExpression	"jobAd -> SetMyTypeName ( ""Job"" )"		562289	0					
ANR	562352	Callee	jobAd -> SetMyTypeName		562289	0					
ANR	562353	PtrMemberAccess	jobAd -> SetMyTypeName		562289	0					
ANR	562354	Identifier	jobAd		562289	0					
ANR	562355	Identifier	SetMyTypeName		562289	1					
ANR	562356	ArgumentList	"""Job"""		562289	1					
ANR	562357	Argument	"""Job"""		562289	0					
ANR	562358	PrimaryExpression	"""Job"""		562289	0					
ANR	562359	ExpressionStatement	"jobAd -> SetTargetTypeName ( ""Machine"" )"	617:2:13496:13531	562289	3	True				
ANR	562360	CallExpression	"jobAd -> SetTargetTypeName ( ""Machine"" )"		562289	0					
ANR	562361	Callee	jobAd -> SetTargetTypeName		562289	0					
ANR	562362	PtrMemberAccess	jobAd -> SetTargetTypeName		562289	0					
ANR	562363	Identifier	jobAd		562289	0					
ANR	562364	Identifier	SetTargetTypeName		562289	1					
ANR	562365	ArgumentList	"""Machine"""		562289	1					
ANR	562366	Argument	"""Machine"""		562289	0					
ANR	562367	PrimaryExpression	"""Machine"""		562289	0					
ANR	562368	ExpressionStatement	"jobAd -> Assign ( ATTR_CLUSTER_ID , now )"	618:2:13535:13570	562289	4	True				
ANR	562369	CallExpression	"jobAd -> Assign ( ATTR_CLUSTER_ID , now )"		562289	0					
ANR	562370	Callee	jobAd -> Assign		562289	0					
ANR	562371	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562372	Identifier	jobAd		562289	0					
ANR	562373	Identifier	Assign		562289	1					
ANR	562374	ArgumentList	ATTR_CLUSTER_ID		562289	1					
ANR	562375	Argument	ATTR_CLUSTER_ID		562289	0					
ANR	562376	Identifier	ATTR_CLUSTER_ID		562289	0					
ANR	562377	Argument	now		562289	1					
ANR	562378	Identifier	now		562289	0					
ANR	562379	ExpressionStatement	"jobAd -> Assign ( ATTR_PROC_ID , 1 )"	619:2:13574:13604	562289	5	True				
ANR	562380	CallExpression	"jobAd -> Assign ( ATTR_PROC_ID , 1 )"		562289	0					
ANR	562381	Callee	jobAd -> Assign		562289	0					
ANR	562382	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562383	Identifier	jobAd		562289	0					
ANR	562384	Identifier	Assign		562289	1					
ANR	562385	ArgumentList	ATTR_PROC_ID		562289	1					
ANR	562386	Argument	ATTR_PROC_ID		562289	0					
ANR	562387	Identifier	ATTR_PROC_ID		562289	0					
ANR	562388	Argument	1		562289	1					
ANR	562389	PrimaryExpression	1		562289	0					
ANR	562390	ExpressionStatement	"jobAd -> Assign ( ATTR_OWNER , ""boinc"" )"	620:2:13608:13642	562289	6	True				
ANR	562391	CallExpression	"jobAd -> Assign ( ATTR_OWNER , ""boinc"" )"		562289	0					
ANR	562392	Callee	jobAd -> Assign		562289	0					
ANR	562393	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562394	Identifier	jobAd		562289	0					
ANR	562395	Identifier	Assign		562289	1					
ANR	562396	ArgumentList	ATTR_OWNER		562289	1					
ANR	562397	Argument	ATTR_OWNER		562289	0					
ANR	562398	Identifier	ATTR_OWNER		562289	0					
ANR	562399	Argument	"""boinc"""		562289	1					
ANR	562400	PrimaryExpression	"""boinc"""		562289	0					
ANR	562401	ExpressionStatement	"jobAd -> Assign ( ATTR_Q_DATE , ( int ) s_birthdate )"	621:2:13646:13690	562289	7	True				
ANR	562402	CallExpression	"jobAd -> Assign ( ATTR_Q_DATE , ( int ) s_birthdate )"		562289	0					
ANR	562403	Callee	jobAd -> Assign		562289	0					
ANR	562404	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562405	Identifier	jobAd		562289	0					
ANR	562406	Identifier	Assign		562289	1					
ANR	562407	ArgumentList	ATTR_Q_DATE		562289	1					
ANR	562408	Argument	ATTR_Q_DATE		562289	0					
ANR	562409	Identifier	ATTR_Q_DATE		562289	0					
ANR	562410	Argument	( int ) s_birthdate		562289	1					
ANR	562411	CastExpression	( int ) s_birthdate		562289	0					
ANR	562412	CastTarget	int		562289	0					
ANR	562413	Identifier	s_birthdate		562289	1					
ANR	562414	ExpressionStatement	"jobAd -> Assign ( ATTR_JOB_PRIO , 0 )"	622:2:13694:13725	562289	8	True				
ANR	562415	CallExpression	"jobAd -> Assign ( ATTR_JOB_PRIO , 0 )"		562289	0					
ANR	562416	Callee	jobAd -> Assign		562289	0					
ANR	562417	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562418	Identifier	jobAd		562289	0					
ANR	562419	Identifier	Assign		562289	1					
ANR	562420	ArgumentList	ATTR_JOB_PRIO		562289	1					
ANR	562421	Argument	ATTR_JOB_PRIO		562289	0					
ANR	562422	Identifier	ATTR_JOB_PRIO		562289	0					
ANR	562423	Argument	0		562289	1					
ANR	562424	PrimaryExpression	0		562289	0					
ANR	562425	ExpressionStatement	"jobAd -> Assign ( ATTR_IMAGE_SIZE , 0 )"	623:2:13729:13762	562289	9	True				
ANR	562426	CallExpression	"jobAd -> Assign ( ATTR_IMAGE_SIZE , 0 )"		562289	0					
ANR	562427	Callee	jobAd -> Assign		562289	0					
ANR	562428	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562429	Identifier	jobAd		562289	0					
ANR	562430	Identifier	Assign		562289	1					
ANR	562431	ArgumentList	ATTR_IMAGE_SIZE		562289	1					
ANR	562432	Argument	ATTR_IMAGE_SIZE		562289	0					
ANR	562433	Identifier	ATTR_IMAGE_SIZE		562289	0					
ANR	562434	Argument	0		562289	1					
ANR	562435	PrimaryExpression	0		562289	0					
ANR	562436	ExpressionStatement	"jobAd -> Assign ( ATTR_JOB_CMD , ""boinc"" )"	624:2:13766:13802	562289	10	True				
ANR	562437	CallExpression	"jobAd -> Assign ( ATTR_JOB_CMD , ""boinc"" )"		562289	0					
ANR	562438	Callee	jobAd -> Assign		562289	0					
ANR	562439	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562440	Identifier	jobAd		562289	0					
ANR	562441	Identifier	Assign		562289	1					
ANR	562442	ArgumentList	ATTR_JOB_CMD		562289	1					
ANR	562443	Argument	ATTR_JOB_CMD		562289	0					
ANR	562444	Identifier	ATTR_JOB_CMD		562289	0					
ANR	562445	Argument	"""boinc"""		562289	1					
ANR	562446	PrimaryExpression	"""boinc"""		562289	0					
ANR	562447	IdentifierDeclStatement	MyString gjid ;	625:2:13806:13819	562289	11	True				
ANR	562448	IdentifierDecl	gjid		562289	0					
ANR	562449	IdentifierDeclType	MyString		562289	0					
ANR	562450	Identifier	gjid		562289	1					
ANR	562451	ExpressionStatement	"gjid . sprintf ( ""%s#%d#%d#%d"" , get_local_hostname ( ) . Value ( ) , now , 1 , now )"	626:2:13823:13900	562289	12	True				
ANR	562452	CallExpression	"gjid . sprintf ( ""%s#%d#%d#%d"" , get_local_hostname ( ) . Value ( ) , now , 1 , now )"		562289	0					
ANR	562453	Callee	gjid . sprintf		562289	0					
ANR	562454	MemberAccess	gjid . sprintf		562289	0					
ANR	562455	Identifier	gjid		562289	0					
ANR	562456	Identifier	sprintf		562289	1					
ANR	562457	ArgumentList	"""%s#%d#%d#%d"""		562289	1					
ANR	562458	Argument	"""%s#%d#%d#%d"""		562289	0					
ANR	562459	PrimaryExpression	"""%s#%d#%d#%d"""		562289	0					
ANR	562460	Argument	get_local_hostname ( ) . Value ( )		562289	1					
ANR	562461	CallExpression	get_local_hostname ( ) . Value ( )		562289	0					
ANR	562462	Callee	get_local_hostname ( ) . Value		562289	0					
ANR	562463	MemberAccess	get_local_hostname ( ) . Value		562289	0					
ANR	562464	CallExpression	get_local_hostname ( )		562289	0					
ANR	562465	Callee	get_local_hostname		562289	0					
ANR	562466	Identifier	get_local_hostname		562289	0					
ANR	562467	ArgumentList			562289	1					
ANR	562468	Identifier	Value		562289	1					
ANR	562469	ArgumentList			562289	1					
ANR	562470	Argument	now		562289	2					
ANR	562471	Identifier	now		562289	0					
ANR	562472	Argument	1		562289	3					
ANR	562473	PrimaryExpression	1		562289	0					
ANR	562474	Argument	now		562289	4					
ANR	562475	Identifier	now		562289	0					
ANR	562476	ExpressionStatement	"jobAd -> Assign ( ATTR_GLOBAL_JOB_ID , gjid )"	628:2:13904:13943	562289	13	True				
ANR	562477	CallExpression	"jobAd -> Assign ( ATTR_GLOBAL_JOB_ID , gjid )"		562289	0					
ANR	562478	Callee	jobAd -> Assign		562289	0					
ANR	562479	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562480	Identifier	jobAd		562289	0					
ANR	562481	Identifier	Assign		562289	1					
ANR	562482	ArgumentList	ATTR_GLOBAL_JOB_ID		562289	1					
ANR	562483	Argument	ATTR_GLOBAL_JOB_ID		562289	0					
ANR	562484	Identifier	ATTR_GLOBAL_JOB_ID		562289	0					
ANR	562485	Argument	gjid		562289	1					
ANR	562486	Identifier	gjid		562289	0					
ANR	562487	ExpressionStatement	"jobAd -> Assign ( ATTR_COMPLETION_DATE , ( int ) time ( 0 ) )"	632:1:13991:14040	562289	3	True				
ANR	562488	CallExpression	"jobAd -> Assign ( ATTR_COMPLETION_DATE , ( int ) time ( 0 ) )"		562289	0					
ANR	562489	Callee	jobAd -> Assign		562289	0					
ANR	562490	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562491	Identifier	jobAd		562289	0					
ANR	562492	Identifier	Assign		562289	1					
ANR	562493	ArgumentList	ATTR_COMPLETION_DATE		562289	1					
ANR	562494	Argument	ATTR_COMPLETION_DATE		562289	0					
ANR	562495	Identifier	ATTR_COMPLETION_DATE		562289	0					
ANR	562496	Argument	( int ) time ( 0 )		562289	1					
ANR	562497	CastExpression	( int ) time ( 0 )		562289	0					
ANR	562498	CastTarget	int		562289	0					
ANR	562499	CallExpression	time ( 0 )		562289	1					
ANR	562500	Callee	time		562289	0					
ANR	562501	Identifier	time		562289	0					
ANR	562502	ArgumentList	0		562289	1					
ANR	562503	Argument	0		562289	0					
ANR	562504	PrimaryExpression	0		562289	0					
ANR	562505	IdentifierDeclStatement	int runtime = time ( 0 ) - s_birthdate ;	633:1:14043:14078	562289	4	True				
ANR	562506	IdentifierDecl	runtime = time ( 0 ) - s_birthdate		562289	0					
ANR	562507	IdentifierDeclType	int		562289	0					
ANR	562508	Identifier	runtime		562289	1					
ANR	562509	AssignmentExpression	runtime = time ( 0 ) - s_birthdate		562289	2		=			
ANR	562510	Identifier	runtime		562289	0					
ANR	562511	AdditiveExpression	time ( 0 ) - s_birthdate		562289	1		-			
ANR	562512	CallExpression	time ( 0 )		562289	0					
ANR	562513	Callee	time		562289	0					
ANR	562514	Identifier	time		562289	0					
ANR	562515	ArgumentList	0		562289	1					
ANR	562516	Argument	0		562289	0					
ANR	562517	PrimaryExpression	0		562289	0					
ANR	562518	Identifier	s_birthdate		562289	1					
ANR	562519	ExpressionStatement	"jobAd -> Assign ( ATTR_JOB_REMOTE_WALL_CLOCK , runtime )"	635:1:14083:14133	562289	5	True				
ANR	562520	CallExpression	"jobAd -> Assign ( ATTR_JOB_REMOTE_WALL_CLOCK , runtime )"		562289	0					
ANR	562521	Callee	jobAd -> Assign		562289	0					
ANR	562522	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562523	Identifier	jobAd		562289	0					
ANR	562524	Identifier	Assign		562289	1					
ANR	562525	ArgumentList	ATTR_JOB_REMOTE_WALL_CLOCK		562289	1					
ANR	562526	Argument	ATTR_JOB_REMOTE_WALL_CLOCK		562289	0					
ANR	562527	Identifier	ATTR_JOB_REMOTE_WALL_CLOCK		562289	0					
ANR	562528	Argument	runtime		562289	1					
ANR	562529	Identifier	runtime		562289	0					
ANR	562530	IdentifierDeclStatement	int jobStatus = COMPLETED ;	636:1:14136:14161	562289	6	True				
ANR	562531	IdentifierDecl	jobStatus = COMPLETED		562289	0					
ANR	562532	IdentifierDeclType	int		562289	0					
ANR	562533	Identifier	jobStatus		562289	1					
ANR	562534	AssignmentExpression	jobStatus = COMPLETED		562289	2		=			
ANR	562535	Identifier	COMPLETED		562289	0					
ANR	562536	Identifier	COMPLETED		562289	1					
ANR	562537	IfStatement	if ( WIFSIGNALED ( status ) )		562289	7					
ANR	562538	Condition	WIFSIGNALED ( status )	637:5:14168:14186	562289	0	True				
ANR	562539	CallExpression	WIFSIGNALED ( status )		562289	0					
ANR	562540	Callee	WIFSIGNALED		562289	0					
ANR	562541	Identifier	WIFSIGNALED		562289	0					
ANR	562542	ArgumentList	status		562289	1					
ANR	562543	Argument	status		562289	0					
ANR	562544	Identifier	status		562289	0					
ANR	562545	CompoundStatement		34:26:1032:1032	562289	1					
ANR	562546	ExpressionStatement	jobStatus = REMOVED	638:2:14193:14212	562289	0	True				
ANR	562547	AssignmentExpression	jobStatus = REMOVED		562289	0		=			
ANR	562548	Identifier	jobStatus		562289	0					
ANR	562549	Identifier	REMOVED		562289	1					
ANR	562550	ExpressionStatement	"jobAd -> Assign ( ATTR_JOB_STATUS , jobStatus )"	640:1:14218:14259	562289	8	True				
ANR	562551	CallExpression	"jobAd -> Assign ( ATTR_JOB_STATUS , jobStatus )"		562289	0					
ANR	562552	Callee	jobAd -> Assign		562289	0					
ANR	562553	PtrMemberAccess	jobAd -> Assign		562289	0					
ANR	562554	Identifier	jobAd		562289	0					
ANR	562555	Identifier	Assign		562289	1					
ANR	562556	ArgumentList	ATTR_JOB_STATUS		562289	1					
ANR	562557	Argument	ATTR_JOB_STATUS		562289	0					
ANR	562558	Identifier	ATTR_JOB_STATUS		562289	0					
ANR	562559	Argument	jobStatus		562289	1					
ANR	562560	Identifier	jobStatus		562289	0					
ANR	562561	ExpressionStatement	AppendHistory ( jobAd )	641:1:14262:14282	562289	9	True				
ANR	562562	CallExpression	AppendHistory ( jobAd )		562289	0					
ANR	562563	Callee	AppendHistory		562289	0					
ANR	562564	Identifier	AppendHistory		562289	0					
ANR	562565	ArgumentList	jobAd		562289	1					
ANR	562566	Argument	jobAd		562289	0					
ANR	562567	Identifier	jobAd		562289	0					
ANR	562568	ExpressionStatement	"WritePerJobHistoryFile ( jobAd , true )"	642:1:14285:14347	562289	10	True				
ANR	562569	CallExpression	"WritePerJobHistoryFile ( jobAd , true )"		562289	0					
ANR	562570	Callee	WritePerJobHistoryFile		562289	0					
ANR	562571	Identifier	WritePerJobHistoryFile		562289	0					
ANR	562572	ArgumentList	jobAd		562289	1					
ANR	562573	Argument	jobAd		562289	0					
ANR	562574	Identifier	jobAd		562289	0					
ANR	562575	Argument	true		562289	1					
ANR	562576	Identifier	true		562289	0					
ANR	562577	IfStatement	if ( jobAdNeedsFree )		562289	11					
ANR	562578	Condition	jobAdNeedsFree	644:5:14355:14368	562289	0	True				
ANR	562579	Identifier	jobAdNeedsFree		562289	0					
ANR	562580	CompoundStatement		41:21:1214:1214	562289	1					
ANR	562581	Statement	delete	645:2:14375:14380	562289	0	True				
ANR	562582	ExpressionStatement	jobAd	645:9:14382:14387	562289	1	True				
ANR	562583	Identifier	jobAd		562289	0					
ANR	562584	ExpressionStatement	cancelKillTimer ( )	649:1:14441:14458	562289	12	True				
ANR	562585	CallExpression	cancelKillTimer ( )		562289	0					
ANR	562586	Callee	cancelKillTimer		562289	0					
ANR	562587	Identifier	cancelKillTimer		562289	0					
ANR	562588	ArgumentList			562289	1					
ANR	562589	IfStatement	if ( daemonCore -> Kill_Family ( s_pid ) == FALSE )		562289	13					
ANR	562590	Condition	daemonCore -> Kill_Family ( s_pid ) == FALSE	653:5:14548:14586	562289	0	True				
ANR	562591	EqualityExpression	daemonCore -> Kill_Family ( s_pid ) == FALSE		562289	0		==			
ANR	562592	CallExpression	daemonCore -> Kill_Family ( s_pid )		562289	0					
ANR	562593	Callee	daemonCore -> Kill_Family		562289	0					
ANR	562594	PtrMemberAccess	daemonCore -> Kill_Family		562289	0					
ANR	562595	Identifier	daemonCore		562289	0					
ANR	562596	Identifier	Kill_Family		562289	1					
ANR	562597	ArgumentList	s_pid		562289	1					
ANR	562598	Argument	s_pid		562289	0					
ANR	562599	Identifier	s_pid		562289	0					
ANR	562600	Identifier	FALSE		562289	1					
ANR	562601	CompoundStatement		50:46:1432:1432	562289	1					
ANR	562602	ExpressionStatement	"dprintf ( D_ALWAYS , ""error killing process family of starter with pid %u\\n"" , s_pid )"	654:2:14593:14694	562289	0	True				
ANR	562603	CallExpression	"dprintf ( D_ALWAYS , ""error killing process family of starter with pid %u\\n"" , s_pid )"		562289	0					
ANR	562604	Callee	dprintf		562289	0					
ANR	562605	Identifier	dprintf		562289	0					
ANR	562606	ArgumentList	D_ALWAYS		562289	1					
ANR	562607	Argument	D_ALWAYS		562289	0					
ANR	562608	Identifier	D_ALWAYS		562289	0					
ANR	562609	Argument	"""error killing process family of starter with pid %u\\n"""		562289	1					
ANR	562610	PrimaryExpression	"""error killing process family of starter with pid %u\\n"""		562289	0					
ANR	562611	Argument	s_pid		562289	2					
ANR	562612	Identifier	s_pid		562289	0					
ANR	562613	ExpressionStatement	ASSERT ( executeDir ( ) )	660:1:14742:14764	562289	14	True				
ANR	562614	CallExpression	ASSERT ( executeDir ( ) )		562289	0					
ANR	562615	Callee	ASSERT		562289	0					
ANR	562616	Identifier	ASSERT		562289	0					
ANR	562617	ArgumentList	executeDir ( )		562289	1					
ANR	562618	Argument	executeDir ( )		562289	0					
ANR	562619	CallExpression	executeDir ( )		562289	0					
ANR	562620	Callee	executeDir		562289	0					
ANR	562621	Identifier	executeDir		562289	0					
ANR	562622	ArgumentList			562289	1					
ANR	562623	ExpressionStatement	"cleanup_execute_dir ( s_pid , executeDir ( ) )"	661:1:14767:14809	562289	15	True				
ANR	562624	CallExpression	"cleanup_execute_dir ( s_pid , executeDir ( ) )"		562289	0					
ANR	562625	Callee	cleanup_execute_dir		562289	0					
ANR	562626	Identifier	cleanup_execute_dir		562289	0					
ANR	562627	ArgumentList	s_pid		562289	1					
ANR	562628	Argument	s_pid		562289	0					
ANR	562629	Identifier	s_pid		562289	0					
ANR	562630	Argument	executeDir ( )		562289	1					
ANR	562631	CallExpression	executeDir ( )		562289	0					
ANR	562632	Callee	executeDir		562289	0					
ANR	562633	Identifier	executeDir		562289	0					
ANR	562634	ArgumentList			562289	1					
ANR	562635	IfStatement	"if ( param_boolean ( ""GLEXEC_STARTER"" , false ) )"		562289	16					
ANR	562636	Condition	"param_boolean ( ""GLEXEC_STARTER"" , false )"	664:5:14836:14875	562289	0	True				
ANR	562637	CallExpression	"param_boolean ( ""GLEXEC_STARTER"" , false )"		562289	0					
ANR	562638	Callee	param_boolean		562289	0					
ANR	562639	Identifier	param_boolean		562289	0					
ANR	562640	ArgumentList	"""GLEXEC_STARTER"""		562289	1					
ANR	562641	Argument	"""GLEXEC_STARTER"""		562289	0					
ANR	562642	PrimaryExpression	"""GLEXEC_STARTER"""		562289	0					
ANR	562643	Argument	false		562289	1					
ANR	562644	Identifier	false		562289	0					
ANR	562645	CompoundStatement		61:48:1722:1722	562289	1					
ANR	562646	ExpressionStatement	cleanupAfterGlexec ( )	665:2:14883:14903	562289	0	True				
ANR	562647	CallExpression	cleanupAfterGlexec ( )		562289	0					
ANR	562648	Callee	cleanupAfterGlexec		562289	0					
ANR	562649	Identifier	cleanupAfterGlexec		562289	0					
ANR	562650	ArgumentList			562289	1					
ANR	562651	ReturnType	void		562289	1					
ANR	562652	Identifier	Starter :: exited		562289	2					
ANR	562653	ParameterList	int status		562289	3					
ANR	562654	Parameter	int status	603:16:13144:13153	562289	0	True				
ANR	562655	ParameterType	int		562289	0					
ANR	562656	Identifier	status		562289	1					
ANR	562657	CFGEntryNode	ENTRY		562289		True				
ANR	562658	CFGExitNode	EXIT		562289		True				
ANR	562659	Symbol	jobAdNeedsFree		562289						
ANR	562660	Symbol	jobStatus		562289						
ANR	562661	Symbol	ATTR_JOB_REMOTE_WALL_CLOCK		562289						
ANR	562662	Symbol	ATTR_PROC_ID		562289						
ANR	562663	Symbol	jobAd		562289						
ANR	562664	Symbol	s_birthdate		562289						
ANR	562665	Symbol	get_local_hostname ( ) . Value		562289						
ANR	562666	Symbol	ATTR_JOB_CMD		562289						
ANR	562667	Symbol	gjid		562289						
ANR	562668	Symbol	daemonCore -> Kill_Family		562289						
ANR	562669	Symbol	ATTR_CLUSTER_ID		562289						
ANR	562670	Symbol	COMPLETED		562289						
ANR	562671	Symbol	ATTR_JOB_STATUS		562289						
ANR	562672	Symbol	now		562289						
ANR	562673	Symbol	daemonCore		562289						
ANR	562674	Symbol	s_claim		562289						
ANR	562675	Symbol	ATTR_OWNER		562289						
ANR	562676	Symbol	REMOVED		562289						
ANR	562677	Symbol	WIFSIGNALED		562289						
ANR	562678	Symbol	NULL		562289						
ANR	562679	Symbol	false		562289						
ANR	562680	Symbol	ATTR_Q_DATE		562289						
ANR	562681	Symbol	D_ALWAYS		562289						
ANR	562682	Symbol	get_local_hostname		562289						
ANR	562683	Symbol	runtime		562289						
ANR	562684	Symbol	param_boolean		562289						
ANR	562685	Symbol	ATTR_COMPLETION_DATE		562289						
ANR	562686	Symbol	ATTR_JOB_PRIO		562289						
ANR	562687	Symbol	ATTR_GLOBAL_JOB_ID		562289						
ANR	562688	Symbol	* s_claim		562289						
ANR	562689	Symbol	s_claim -> ad		562289						
ANR	562690	Symbol	* daemonCore		562289						
ANR	562691	Symbol	true		562289						
ANR	562692	Symbol	FALSE		562289						
ANR	562693	Symbol	time		562289						
ANR	562694	Symbol	executeDir		562289						
ANR	562695	Symbol	s_pid		562289						
ANR	562696	Symbol	status		562289						
ANR	562697	Symbol	ATTR_IMAGE_SIZE		562289						
ANR	562698	Function	Starter :: execJobPipeStarter	671:0:14919:16663							
ANR	562699	FunctionDef	Starter :: execJobPipeStarter ()		562698	0					
ANR	562700	CompoundStatement		673:0:14959:16663	562698	0					
ANR	562701	IdentifierDeclStatement	int rval ;	674:1:14962:14970	562698	0	True				
ANR	562702	IdentifierDecl	rval		562698	0					
ANR	562703	IdentifierDeclType	int		562698	0					
ANR	562704	Identifier	rval		562698	1					
ANR	562705	IdentifierDeclStatement	MyString lock_env ;	675:1:14973:14990	562698	1	True				
ANR	562706	IdentifierDecl	lock_env		562698	0					
ANR	562707	IdentifierDeclType	MyString		562698	0					
ANR	562708	Identifier	lock_env		562698	1					
ANR	562709	IdentifierDeclStatement	ArgList args ;	676:1:14993:15005	562698	2	True				
ANR	562710	IdentifierDecl	args		562698	0					
ANR	562711	IdentifierDeclType	ArgList		562698	0					
ANR	562712	Identifier	args		562698	1					
ANR	562713	IdentifierDeclStatement	Env env ;	677:1:15008:15015	562698	3	True				
ANR	562714	IdentifierDecl	env		562698	0					
ANR	562715	IdentifierDeclType	Env		562698	0					
ANR	562716	Identifier	env		562698	1					
ANR	562717	IdentifierDeclStatement	char * tmp ;	678:1:15018:15027	562698	4	True				
ANR	562718	IdentifierDecl	* tmp		562698	0					
ANR	562719	IdentifierDeclType	char *		562698	0					
ANR	562720	Identifier	tmp		562698	1					
ANR	562721	IfStatement	if ( s_claim -> type ( ) == CLAIM_COD )		562698	5					
ANR	562722	Condition	s_claim -> type ( ) == CLAIM_COD	680:5:15035:15062	562698	0	True				
ANR	562723	EqualityExpression	s_claim -> type ( ) == CLAIM_COD		562698	0		==			
ANR	562724	CallExpression	s_claim -> type ( )		562698	0					
ANR	562725	Callee	s_claim -> type		562698	0					
ANR	562726	PtrMemberAccess	s_claim -> type		562698	0					
ANR	562727	Identifier	s_claim		562698	0					
ANR	562728	Identifier	type		562698	1					
ANR	562729	ArgumentList			562698	1					
ANR	562730	Identifier	CLAIM_COD		562698	1					
ANR	562731	CompoundStatement		8:35:105:105	562698	1					
ANR	562732	ExpressionStatement	"tmp = param ( ""LOCK"" )"	681:2:15069:15090	562698	0	True				
ANR	562733	AssignmentExpression	"tmp = param ( ""LOCK"" )"		562698	0		=			
ANR	562734	Identifier	tmp		562698	0					
ANR	562735	CallExpression	"param ( ""LOCK"" )"		562698	1					
ANR	562736	Callee	param		562698	0					
ANR	562737	Identifier	param		562698	0					
ANR	562738	ArgumentList	"""LOCK"""		562698	1					
ANR	562739	Argument	"""LOCK"""		562698	0					
ANR	562740	PrimaryExpression	"""LOCK"""		562698	0					
ANR	562741	IfStatement	if ( ! tmp )		562698	1					
ANR	562742	Condition	! tmp	682:6:15098:15102	562698	0	True				
ANR	562743	UnaryOperationExpression	! tmp		562698	0					
ANR	562744	UnaryOperator	!		562698	0					
ANR	562745	Identifier	tmp		562698	1					
ANR	562746	CompoundStatement		10:14:146:146	562698	1					
ANR	562747	ExpressionStatement	"tmp = param ( ""LOG"" )"	683:3:15112:15132	562698	0	True				
ANR	562748	AssignmentExpression	"tmp = param ( ""LOG"" )"		562698	0		=			
ANR	562749	Identifier	tmp		562698	0					
ANR	562750	CallExpression	"param ( ""LOG"" )"		562698	1					
ANR	562751	Callee	param		562698	0					
ANR	562752	Identifier	param		562698	0					
ANR	562753	ArgumentList	"""LOG"""		562698	1					
ANR	562754	Argument	"""LOG"""		562698	0					
ANR	562755	PrimaryExpression	"""LOG"""		562698	0					
ANR	562756	IfStatement	if ( ! tmp )		562698	2					
ANR	562757	Condition	! tmp	685:6:15144:15148	562698	0	True				
ANR	562758	UnaryOperationExpression	! tmp		562698	0					
ANR	562759	UnaryOperator	!		562698	0					
ANR	562760	Identifier	tmp		562698	1					
ANR	562761	CompoundStatement		13:14:192:192	562698	1					
ANR	562762	ExpressionStatement	"EXCEPT ( ""LOG not defined!"" )"	686:3:15158:15186	562698	0	True				
ANR	562763	CallExpression	"EXCEPT ( ""LOG not defined!"" )"		562698	0					
ANR	562764	Callee	EXCEPT		562698	0					
ANR	562765	Identifier	EXCEPT		562698	0					
ANR	562766	ArgumentList	"""LOG not defined!"""		562698	1					
ANR	562767	Argument	"""LOG not defined!"""		562698	0					
ANR	562768	PrimaryExpression	"""LOG not defined!"""		562698	0					
ANR	562769	ExpressionStatement	"lock_env = ""_condor_STARTER_LOCK="""	688:2:15194:15228	562698	3	True				
ANR	562770	AssignmentExpression	"lock_env = ""_condor_STARTER_LOCK="""		562698	0		=			
ANR	562771	Identifier	lock_env		562698	0					
ANR	562772	PrimaryExpression	"""_condor_STARTER_LOCK="""		562698	1					
ANR	562773	ExpressionStatement	lock_env += tmp	689:2:15232:15247	562698	4	True				
ANR	562774	AssignmentExpression	lock_env += tmp		562698	0		+=			
ANR	562775	Identifier	lock_env		562698	0					
ANR	562776	Identifier	tmp		562698	1					
ANR	562777	ExpressionStatement	free ( tmp )	690:2:15251:15262	562698	5	True				
ANR	562778	CallExpression	free ( tmp )		562698	0					
ANR	562779	Callee	free		562698	0					
ANR	562780	Identifier	free		562698	0					
ANR	562781	ArgumentList	tmp		562698	1					
ANR	562782	Argument	tmp		562698	0					
ANR	562783	Identifier	tmp		562698	0					
ANR	562784	ExpressionStatement	lock_env += DIR_DELIM_CHAR	691:2:15266:15292	562698	6	True				
ANR	562785	AssignmentExpression	lock_env += DIR_DELIM_CHAR		562698	0		+=			
ANR	562786	Identifier	lock_env		562698	0					
ANR	562787	Identifier	DIR_DELIM_CHAR		562698	1					
ANR	562788	ExpressionStatement	"lock_env += ""StarterLock.cod"""	692:2:15296:15325	562698	7	True				
ANR	562789	AssignmentExpression	"lock_env += ""StarterLock.cod"""		562698	0		+=			
ANR	562790	Identifier	lock_env		562698	0					
ANR	562791	PrimaryExpression	"""StarterLock.cod"""		562698	1					
ANR	562792	ExpressionStatement	env . SetEnv ( lock_env . Value ( ) )	694:2:15330:15358	562698	8	True				
ANR	562793	CallExpression	env . SetEnv ( lock_env . Value ( ) )		562698	0					
ANR	562794	Callee	env . SetEnv		562698	0					
ANR	562795	MemberAccess	env . SetEnv		562698	0					
ANR	562796	Identifier	env		562698	0					
ANR	562797	Identifier	SetEnv		562698	1					
ANR	562798	ArgumentList	lock_env . Value ( )		562698	1					
ANR	562799	Argument	lock_env . Value ( )		562698	0					
ANR	562800	CallExpression	lock_env . Value ( )		562698	0					
ANR	562801	Callee	lock_env . Value		562698	0					
ANR	562802	MemberAccess	lock_env . Value		562698	0					
ANR	562803	Identifier	lock_env		562698	0					
ANR	562804	Identifier	Value		562698	1					
ANR	562805	ArgumentList			562698	1					
ANR	562806	ExpressionStatement	s_claim -> makeStarterArgs ( args )	698:1:15432:15462	562698	6	True				
ANR	562807	CallExpression	s_claim -> makeStarterArgs ( args )		562698	0					
ANR	562808	Callee	s_claim -> makeStarterArgs		562698	0					
ANR	562809	PtrMemberAccess	s_claim -> makeStarterArgs		562698	0					
ANR	562810	Identifier	s_claim		562698	0					
ANR	562811	Identifier	makeStarterArgs		562698	1					
ANR	562812	ArgumentList	args		562698	1					
ANR	562813	Argument	args		562698	0					
ANR	562814	Identifier	args		562698	0					
ANR	562815	IdentifierDeclStatement	int * std_fds_p = NULL ;	700:1:15466:15487	562698	7	True				
ANR	562816	IdentifierDecl	* std_fds_p = NULL		562698	0					
ANR	562817	IdentifierDeclType	int *		562698	0					
ANR	562818	Identifier	std_fds_p		562698	1					
ANR	562819	AssignmentExpression	* std_fds_p = NULL		562698	2		=			
ANR	562820	Identifier	NULL		562698	0					
ANR	562821	Identifier	NULL		562698	1					
ANR	562822	IdentifierDeclStatement	int std_fds [ 3 ] ;	701:1:15490:15504	562698	8	True				
ANR	562823	IdentifierDecl	std_fds [ 3 ]		562698	0					
ANR	562824	IdentifierDeclType	int [ 3 ]		562698	0					
ANR	562825	Identifier	std_fds		562698	1					
ANR	562826	PrimaryExpression	3		562698	2					
ANR	562827	IdentifierDeclStatement	int pipe_fds [ 2 ] ;	702:1:15507:15522	562698	9	True				
ANR	562828	IdentifierDecl	pipe_fds [ 2 ]		562698	0					
ANR	562829	IdentifierDeclType	int [ 2 ]		562698	0					
ANR	562830	Identifier	pipe_fds		562698	1					
ANR	562831	PrimaryExpression	2		562698	2					
ANR	562832	IfStatement	if ( s_claim -> hasJobAd ( ) )		562698	10					
ANR	562833	Condition	s_claim -> hasJobAd ( )	703:5:15529:15547	562698	0	True				
ANR	562834	CallExpression	s_claim -> hasJobAd ( )		562698	0					
ANR	562835	Callee	s_claim -> hasJobAd		562698	0					
ANR	562836	PtrMemberAccess	s_claim -> hasJobAd		562698	0					
ANR	562837	Identifier	s_claim		562698	0					
ANR	562838	Identifier	hasJobAd		562698	1					
ANR	562839	ArgumentList			562698	1					
ANR	562840	CompoundStatement		31:27:591:591	562698	1					
ANR	562841	IfStatement	if ( ! daemonCore -> Create_Pipe ( pipe_fds ) )		562698	0					
ANR	562842	Condition	! daemonCore -> Create_Pipe ( pipe_fds )	704:6:15559:15593	562698	0	True				
ANR	562843	UnaryOperationExpression	! daemonCore -> Create_Pipe ( pipe_fds )		562698	0					
ANR	562844	UnaryOperator	!		562698	0					
ANR	562845	CallExpression	daemonCore -> Create_Pipe ( pipe_fds )		562698	1					
ANR	562846	Callee	daemonCore -> Create_Pipe		562698	0					
ANR	562847	PtrMemberAccess	daemonCore -> Create_Pipe		562698	0					
ANR	562848	Identifier	daemonCore		562698	0					
ANR	562849	Identifier	Create_Pipe		562698	1					
ANR	562850	ArgumentList	pipe_fds		562698	1					
ANR	562851	Argument	pipe_fds		562698	0					
ANR	562852	Identifier	pipe_fds		562698	0					
ANR	562853	CompoundStatement		32:44:637:637	562698	1					
ANR	562854	Statement	dprintf	705:3:15602:15608	562698	0	True				
ANR	562855	Statement	(	705:10:15609:15609	562698	1	True				
ANR	562856	Statement	D_ALWAYS	705:12:15611:15618	562698	2	True				
ANR	562857	Statement	","	705:20:15619:15619	562698	3	True				
ANR	562858	Statement	"""ERROR: Can't create pipe to pass job ClassAd """	705:22:15621:15667	562698	4	True				
ANR	562859	Statement	"""to starter, aborting\\n"""	706:6:15675:15698	562698	5	True				
ANR	562860	Statement	)	706:31:15700:15700	562698	6	True				
ANR	562861	ExpressionStatement		706:32:15701:15701	562698	7	True				
ANR	562862	ReturnStatement	return 0 ;	707:3:15706:15714	562698	8	True				
ANR	562863	PrimaryExpression	0		562698	0					
ANR	562864	ExpressionStatement	std_fds [ 0 ] = pipe_fds [ 0 ]	712:2:15868:15892	562698	1	True				
ANR	562865	AssignmentExpression	std_fds [ 0 ] = pipe_fds [ 0 ]		562698	0		=			
ANR	562866	ArrayIndexing	std_fds [ 0 ]		562698	0					
ANR	562867	Identifier	std_fds		562698	0					
ANR	562868	PrimaryExpression	0		562698	1					
ANR	562869	ArrayIndexing	pipe_fds [ 0 ]		562698	1					
ANR	562870	Identifier	pipe_fds		562698	0					
ANR	562871	PrimaryExpression	0		562698	1					
ANR	562872	ExpressionStatement	std_fds [ 1 ] = - 1	713:2:15896:15911	562698	2	True				
ANR	562873	AssignmentExpression	std_fds [ 1 ] = - 1		562698	0		=			
ANR	562874	ArrayIndexing	std_fds [ 1 ]		562698	0					
ANR	562875	Identifier	std_fds		562698	0					
ANR	562876	PrimaryExpression	1		562698	1					
ANR	562877	UnaryOperationExpression	- 1		562698	1					
ANR	562878	UnaryOperator	-		562698	0					
ANR	562879	PrimaryExpression	1		562698	1					
ANR	562880	ExpressionStatement	std_fds [ 2 ] = - 1	714:2:15915:15930	562698	3	True				
ANR	562881	AssignmentExpression	std_fds [ 2 ] = - 1		562698	0		=			
ANR	562882	ArrayIndexing	std_fds [ 2 ]		562698	0					
ANR	562883	Identifier	std_fds		562698	0					
ANR	562884	PrimaryExpression	2		562698	1					
ANR	562885	UnaryOperationExpression	- 1		562698	1					
ANR	562886	UnaryOperator	-		562698	0					
ANR	562887	PrimaryExpression	1		562698	1					
ANR	562888	ExpressionStatement	std_fds_p = std_fds	715:2:15934:15953	562698	4	True				
ANR	562889	AssignmentExpression	std_fds_p = std_fds		562698	0		=			
ANR	562890	Identifier	std_fds_p		562698	0					
ANR	562891	Identifier	std_fds		562698	1					
ANR	562892	ExpressionStatement	"rval = execDCStarter ( args , & env , std_fds_p , NULL )"	718:1:15960:16011	562698	11	True				
ANR	562893	AssignmentExpression	"rval = execDCStarter ( args , & env , std_fds_p , NULL )"		562698	0		=			
ANR	562894	Identifier	rval		562698	0					
ANR	562895	CallExpression	"execDCStarter ( args , & env , std_fds_p , NULL )"		562698	1					
ANR	562896	Callee	execDCStarter		562698	0					
ANR	562897	Identifier	execDCStarter		562698	0					
ANR	562898	ArgumentList	args		562698	1					
ANR	562899	Argument	args		562698	0					
ANR	562900	Identifier	args		562698	0					
ANR	562901	Argument	& env		562698	1					
ANR	562902	UnaryOperationExpression	& env		562698	0					
ANR	562903	UnaryOperator	&		562698	0					
ANR	562904	Identifier	env		562698	1					
ANR	562905	Argument	std_fds_p		562698	2					
ANR	562906	Identifier	std_fds_p		562698	0					
ANR	562907	Argument	NULL		562698	3					
ANR	562908	Identifier	NULL		562698	0					
ANR	562909	IfStatement	if ( s_claim -> hasJobAd ( ) )		562698	12					
ANR	562910	Condition	s_claim -> hasJobAd ( )	720:5:16019:16037	562698	0	True				
ANR	562911	CallExpression	s_claim -> hasJobAd ( )		562698	0					
ANR	562912	Callee	s_claim -> hasJobAd		562698	0					
ANR	562913	PtrMemberAccess	s_claim -> hasJobAd		562698	0					
ANR	562914	Identifier	s_claim		562698	0					
ANR	562915	Identifier	hasJobAd		562698	1					
ANR	562916	ArgumentList			562698	1					
ANR	562917	CompoundStatement		48:27:1081:1081	562698	1					
ANR	562918	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_fds [ 0 ] )	727:2:16312:16349	562698	0	True				
ANR	562919	CallExpression	daemonCore -> Close_Pipe ( pipe_fds [ 0 ] )		562698	0					
ANR	562920	Callee	daemonCore -> Close_Pipe		562698	0					
ANR	562921	PtrMemberAccess	daemonCore -> Close_Pipe		562698	0					
ANR	562922	Identifier	daemonCore		562698	0					
ANR	562923	Identifier	Close_Pipe		562698	1					
ANR	562924	ArgumentList	pipe_fds [ 0 ]		562698	1					
ANR	562925	Argument	pipe_fds [ 0 ]		562698	0					
ANR	562926	ArrayIndexing	pipe_fds [ 0 ]		562698	0					
ANR	562927	Identifier	pipe_fds		562698	0					
ANR	562928	PrimaryExpression	0		562698	1					
ANR	562929	ExpressionStatement	s_claim -> writeJobAd ( pipe_fds [ 1 ] )	732:2:16467:16501	562698	1	True				
ANR	562930	CallExpression	s_claim -> writeJobAd ( pipe_fds [ 1 ] )		562698	0					
ANR	562931	Callee	s_claim -> writeJobAd		562698	0					
ANR	562932	PtrMemberAccess	s_claim -> writeJobAd		562698	0					
ANR	562933	Identifier	s_claim		562698	0					
ANR	562934	Identifier	writeJobAd		562698	1					
ANR	562935	ArgumentList	pipe_fds [ 1 ]		562698	1					
ANR	562936	Argument	pipe_fds [ 1 ]		562698	0					
ANR	562937	ArrayIndexing	pipe_fds [ 1 ]		562698	0					
ANR	562938	Identifier	pipe_fds		562698	0					
ANR	562939	PrimaryExpression	1		562698	1					
ANR	562940	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_fds [ 1 ] )	736:2:16606:16643	562698	2	True				
ANR	562941	CallExpression	daemonCore -> Close_Pipe ( pipe_fds [ 1 ] )		562698	0					
ANR	562942	Callee	daemonCore -> Close_Pipe		562698	0					
ANR	562943	PtrMemberAccess	daemonCore -> Close_Pipe		562698	0					
ANR	562944	Identifier	daemonCore		562698	0					
ANR	562945	Identifier	Close_Pipe		562698	1					
ANR	562946	ArgumentList	pipe_fds [ 1 ]		562698	1					
ANR	562947	Argument	pipe_fds [ 1 ]		562698	0					
ANR	562948	ArrayIndexing	pipe_fds [ 1 ]		562698	0					
ANR	562949	Identifier	pipe_fds		562698	0					
ANR	562950	PrimaryExpression	1		562698	1					
ANR	562951	ReturnStatement	return rval ;	739:1:16650:16661	562698	13	True				
ANR	562952	Identifier	rval		562698	0					
ANR	562953	ReturnType	int		562698	1					
ANR	562954	Identifier	Starter :: execJobPipeStarter		562698	2					
ANR	562955	ParameterList			562698	3					
ANR	562956	CFGEntryNode	ENTRY		562698		True				
ANR	562957	CFGExitNode	EXIT		562698		True				
ANR	562958	Symbol	NULL		562698						
ANR	562959	Symbol	s_claim -> hasJobAd		562698						
ANR	562960	Symbol	lock_env . Value		562698						
ANR	562961	Symbol	CLAIM_COD		562698						
ANR	562962	Symbol	DIR_DELIM_CHAR		562698						
ANR	562963	Symbol	execDCStarter		562698						
ANR	562964	Symbol	pipe_fds		562698						
ANR	562965	Symbol	lock_env		562698						
ANR	562966	Symbol	env		562698						
ANR	562967	Symbol	* std_fds		562698						
ANR	562968	Symbol	args		562698						
ANR	562969	Symbol	s_claim -> type		562698						
ANR	562970	Symbol	* s_claim		562698						
ANR	562971	Symbol	std_fds_p		562698						
ANR	562972	Symbol	& env		562698						
ANR	562973	Symbol	param		562698						
ANR	562974	Symbol	std_fds		562698						
ANR	562975	Symbol	tmp		562698						
ANR	562976	Symbol	* daemonCore		562698						
ANR	562977	Symbol	daemonCore		562698						
ANR	562978	Symbol	rval		562698						
ANR	562979	Symbol	daemonCore -> Create_Pipe		562698						
ANR	562980	Symbol	* pipe_fds		562698						
ANR	562981	Symbol	s_claim		562698						
ANR	562982	Function	Starter :: execBOINCStarter	744:0:16682:16958							
ANR	562983	FunctionDef	Starter :: execBOINCStarter ()		562982	0					
ANR	562984	CompoundStatement		746:0:16720:16958	562982	0					
ANR	562985	IdentifierDeclStatement	ArgList args ;	747:1:16723:16735	562982	0	True				
ANR	562986	IdentifierDecl	args		562982	0					
ANR	562987	IdentifierDeclType	ArgList		562982	0					
ANR	562988	Identifier	args		562982	1					
ANR	562989	ExpressionStatement	"args . AppendArg ( ""condor_starter"" )"	749:1:16739:16771	562982	1	True				
ANR	562990	CallExpression	"args . AppendArg ( ""condor_starter"" )"		562982	0					
ANR	562991	Callee	args . AppendArg		562982	0					
ANR	562992	MemberAccess	args . AppendArg		562982	0					
ANR	562993	Identifier	args		562982	0					
ANR	562994	Identifier	AppendArg		562982	1					
ANR	562995	ArgumentList	"""condor_starter"""		562982	1					
ANR	562996	Argument	"""condor_starter"""		562982	0					
ANR	562997	PrimaryExpression	"""condor_starter"""		562982	0					
ANR	562998	ExpressionStatement	"args . AppendArg ( ""-f"" )"	750:1:16774:16794	562982	2	True				
ANR	562999	CallExpression	"args . AppendArg ( ""-f"" )"		562982	0					
ANR	563000	Callee	args . AppendArg		562982	0					
ANR	563001	MemberAccess	args . AppendArg		562982	0					
ANR	563002	Identifier	args		562982	0					
ANR	563003	Identifier	AppendArg		562982	1					
ANR	563004	ArgumentList	"""-f"""		562982	1					
ANR	563005	Argument	"""-f"""		562982	0					
ANR	563006	PrimaryExpression	"""-f"""		562982	0					
ANR	563007	ExpressionStatement	"args . AppendArg ( ""-append"" )"	751:1:16797:16822	562982	3	True				
ANR	563008	CallExpression	"args . AppendArg ( ""-append"" )"		562982	0					
ANR	563009	Callee	args . AppendArg		562982	0					
ANR	563010	MemberAccess	args . AppendArg		562982	0					
ANR	563011	Identifier	args		562982	0					
ANR	563012	Identifier	AppendArg		562982	1					
ANR	563013	ArgumentList	"""-append"""		562982	1					
ANR	563014	Argument	"""-append"""		562982	0					
ANR	563015	PrimaryExpression	"""-append"""		562982	0					
ANR	563016	ExpressionStatement	"args . AppendArg ( ""boinc"" )"	752:1:16825:16848	562982	4	True				
ANR	563017	CallExpression	"args . AppendArg ( ""boinc"" )"		562982	0					
ANR	563018	Callee	args . AppendArg		562982	0					
ANR	563019	MemberAccess	args . AppendArg		562982	0					
ANR	563020	Identifier	args		562982	0					
ANR	563021	Identifier	AppendArg		562982	1					
ANR	563022	ArgumentList	"""boinc"""		562982	1					
ANR	563023	Argument	"""boinc"""		562982	0					
ANR	563024	PrimaryExpression	"""boinc"""		562982	0					
ANR	563025	ExpressionStatement	"args . AppendArg ( ""-job-keyword"" )"	753:1:16851:16881	562982	5	True				
ANR	563026	CallExpression	"args . AppendArg ( ""-job-keyword"" )"		562982	0					
ANR	563027	Callee	args . AppendArg		562982	0					
ANR	563028	MemberAccess	args . AppendArg		562982	0					
ANR	563029	Identifier	args		562982	0					
ANR	563030	Identifier	AppendArg		562982	1					
ANR	563031	ArgumentList	"""-job-keyword"""		562982	1					
ANR	563032	Argument	"""-job-keyword"""		562982	0					
ANR	563033	PrimaryExpression	"""-job-keyword"""		562982	0					
ANR	563034	ExpressionStatement	"args . AppendArg ( ""boinc"" )"	754:1:16884:16907	562982	6	True				
ANR	563035	CallExpression	"args . AppendArg ( ""boinc"" )"		562982	0					
ANR	563036	Callee	args . AppendArg		562982	0					
ANR	563037	MemberAccess	args . AppendArg		562982	0					
ANR	563038	Identifier	args		562982	0					
ANR	563039	Identifier	AppendArg		562982	1					
ANR	563040	ArgumentList	"""boinc"""		562982	1					
ANR	563041	Argument	"""boinc"""		562982	0					
ANR	563042	PrimaryExpression	"""boinc"""		562982	0					
ANR	563043	ReturnStatement	"return execDCStarter ( args , NULL , NULL , NULL ) ;"	755:1:16910:16956	562982	7	True				
ANR	563044	CallExpression	"execDCStarter ( args , NULL , NULL , NULL )"		562982	0					
ANR	563045	Callee	execDCStarter		562982	0					
ANR	563046	Identifier	execDCStarter		562982	0					
ANR	563047	ArgumentList	args		562982	1					
ANR	563048	Argument	args		562982	0					
ANR	563049	Identifier	args		562982	0					
ANR	563050	Argument	NULL		562982	1					
ANR	563051	Identifier	NULL		562982	0					
ANR	563052	Argument	NULL		562982	2					
ANR	563053	Identifier	NULL		562982	0					
ANR	563054	Argument	NULL		562982	3					
ANR	563055	Identifier	NULL		562982	0					
ANR	563056	ReturnType	int		562982	1					
ANR	563057	Identifier	Starter :: execBOINCStarter		562982	2					
ANR	563058	ParameterList			562982	3					
ANR	563059	CFGEntryNode	ENTRY		562982		True				
ANR	563060	CFGExitNode	EXIT		562982		True				
ANR	563061	Symbol	args		562982						
ANR	563062	Symbol	NULL		562982						
ANR	563063	Symbol	execDCStarter		562982						
ANR	563064	Function	Starter :: execDCStarter	760:0:16986:17528							
ANR	563065	FunctionDef	Starter :: execDCStarter (Stream * s)		563064	0					
ANR	563066	CompoundStatement		762:0:17026:17528	563064	0					
ANR	563067	IdentifierDeclStatement	ArgList args ;	763:1:17029:17041	563064	0	True				
ANR	563068	IdentifierDecl	args		563064	0					
ANR	563069	IdentifierDeclType	ArgList		563064	0					
ANR	563070	Identifier	args		563064	1					
ANR	563071	IdentifierDeclStatement	char * hostname = s_claim -> client ( ) -> host ( ) ;	765:1:17045:17087	563064	1	True				
ANR	563072	IdentifierDecl	* hostname = s_claim -> client ( ) -> host ( )		563064	0					
ANR	563073	IdentifierDeclType	char *		563064	0					
ANR	563074	Identifier	hostname		563064	1					
ANR	563075	AssignmentExpression	* hostname = s_claim -> client ( ) -> host ( )		563064	2		=			
ANR	563076	Identifier	hostname		563064	0					
ANR	563077	CallExpression	s_claim -> client ( ) -> host ( )		563064	1					
ANR	563078	Callee	s_claim -> client ( ) -> host		563064	0					
ANR	563079	PtrMemberAccess	s_claim -> client ( ) -> host		563064	0					
ANR	563080	CallExpression	s_claim -> client ( )		563064	0					
ANR	563081	Callee	s_claim -> client		563064	0					
ANR	563082	PtrMemberAccess	s_claim -> client		563064	0					
ANR	563083	Identifier	s_claim		563064	0					
ANR	563084	Identifier	client		563064	1					
ANR	563085	ArgumentList			563064	1					
ANR	563086	Identifier	host		563064	1					
ANR	563087	ArgumentList			563064	1					
ANR	563088	IfStatement	if ( resmgr -> is_smp ( ) )		563064	2					
ANR	563089	Condition	resmgr -> is_smp ( )	766:6:17095:17110	563064	0	True				
ANR	563090	CallExpression	resmgr -> is_smp ( )		563064	0					
ANR	563091	Callee	resmgr -> is_smp		563064	0					
ANR	563092	PtrMemberAccess	resmgr -> is_smp		563064	0					
ANR	563093	Identifier	resmgr		563064	0					
ANR	563094	Identifier	is_smp		563064	1					
ANR	563095	ArgumentList			563064	1					
ANR	563096	CompoundStatement		5:25:87:87	563064	1					
ANR	563097	ExpressionStatement	"args . AppendArg ( ""condor_starter"" )"	769:2:17218:17250	563064	0	True				
ANR	563098	CallExpression	"args . AppendArg ( ""condor_starter"" )"		563064	0					
ANR	563099	Callee	args . AppendArg		563064	0					
ANR	563100	MemberAccess	args . AppendArg		563064	0					
ANR	563101	Identifier	args		563064	0					
ANR	563102	Identifier	AppendArg		563064	1					
ANR	563103	ArgumentList	"""condor_starter"""		563064	1					
ANR	563104	Argument	"""condor_starter"""		563064	0					
ANR	563105	PrimaryExpression	"""condor_starter"""		563064	0					
ANR	563106	ExpressionStatement	"args . AppendArg ( ""-f"" )"	770:2:17254:17274	563064	1	True				
ANR	563107	CallExpression	"args . AppendArg ( ""-f"" )"		563064	0					
ANR	563108	Callee	args . AppendArg		563064	0					
ANR	563109	MemberAccess	args . AppendArg		563064	0					
ANR	563110	Identifier	args		563064	0					
ANR	563111	Identifier	AppendArg		563064	1					
ANR	563112	ArgumentList	"""-f"""		563064	1					
ANR	563113	Argument	"""-f"""		563064	0					
ANR	563114	PrimaryExpression	"""-f"""		563064	0					
ANR	563115	ExpressionStatement	"args . AppendArg ( ""-a"" )"	771:2:17278:17298	563064	2	True				
ANR	563116	CallExpression	"args . AppendArg ( ""-a"" )"		563064	0					
ANR	563117	Callee	args . AppendArg		563064	0					
ANR	563118	MemberAccess	args . AppendArg		563064	0					
ANR	563119	Identifier	args		563064	0					
ANR	563120	Identifier	AppendArg		563064	1					
ANR	563121	ArgumentList	"""-a"""		563064	1					
ANR	563122	Argument	"""-a"""		563064	0					
ANR	563123	PrimaryExpression	"""-a"""		563064	0					
ANR	563124	ExpressionStatement	args . AppendArg ( s_claim -> rip ( ) -> r_id_str )	772:2:17302:17342	563064	3	True				
ANR	563125	CallExpression	args . AppendArg ( s_claim -> rip ( ) -> r_id_str )		563064	0					
ANR	563126	Callee	args . AppendArg		563064	0					
ANR	563127	MemberAccess	args . AppendArg		563064	0					
ANR	563128	Identifier	args		563064	0					
ANR	563129	Identifier	AppendArg		563064	1					
ANR	563130	ArgumentList	s_claim -> rip ( ) -> r_id_str		563064	1					
ANR	563131	Argument	s_claim -> rip ( ) -> r_id_str		563064	0					
ANR	563132	PtrMemberAccess	s_claim -> rip ( ) -> r_id_str		563064	0					
ANR	563133	CallExpression	s_claim -> rip ( )		563064	0					
ANR	563134	Callee	s_claim -> rip		563064	0					
ANR	563135	PtrMemberAccess	s_claim -> rip		563064	0					
ANR	563136	Identifier	s_claim		563064	0					
ANR	563137	Identifier	rip		563064	1					
ANR	563138	ArgumentList			563064	1					
ANR	563139	Identifier	r_id_str		563064	1					
ANR	563140	ExpressionStatement	args . AppendArg ( hostname )	773:2:17346:17370	563064	4	True				
ANR	563141	CallExpression	args . AppendArg ( hostname )		563064	0					
ANR	563142	Callee	args . AppendArg		563064	0					
ANR	563143	MemberAccess	args . AppendArg		563064	0					
ANR	563144	Identifier	args		563064	0					
ANR	563145	Identifier	AppendArg		563064	1					
ANR	563146	ArgumentList	hostname		563064	1					
ANR	563147	Argument	hostname		563064	0					
ANR	563148	Identifier	hostname		563064	0					
ANR	563149	ElseStatement	else		563064	0					
ANR	563150	CompoundStatement		13:8:353:353	563064	0					
ANR	563151	ExpressionStatement	"args . AppendArg ( ""condor_starter"" )"	775:2:17384:17416	563064	0	True				
ANR	563152	CallExpression	"args . AppendArg ( ""condor_starter"" )"		563064	0					
ANR	563153	Callee	args . AppendArg		563064	0					
ANR	563154	MemberAccess	args . AppendArg		563064	0					
ANR	563155	Identifier	args		563064	0					
ANR	563156	Identifier	AppendArg		563064	1					
ANR	563157	ArgumentList	"""condor_starter"""		563064	1					
ANR	563158	Argument	"""condor_starter"""		563064	0					
ANR	563159	PrimaryExpression	"""condor_starter"""		563064	0					
ANR	563160	ExpressionStatement	"args . AppendArg ( ""-f"" )"	776:2:17420:17440	563064	1	True				
ANR	563161	CallExpression	"args . AppendArg ( ""-f"" )"		563064	0					
ANR	563162	Callee	args . AppendArg		563064	0					
ANR	563163	MemberAccess	args . AppendArg		563064	0					
ANR	563164	Identifier	args		563064	0					
ANR	563165	Identifier	AppendArg		563064	1					
ANR	563166	ArgumentList	"""-f"""		563064	1					
ANR	563167	Argument	"""-f"""		563064	0					
ANR	563168	PrimaryExpression	"""-f"""		563064	0					
ANR	563169	ExpressionStatement	args . AppendArg ( hostname )	777:2:17444:17468	563064	2	True				
ANR	563170	CallExpression	args . AppendArg ( hostname )		563064	0					
ANR	563171	Callee	args . AppendArg		563064	0					
ANR	563172	MemberAccess	args . AppendArg		563064	0					
ANR	563173	Identifier	args		563064	0					
ANR	563174	Identifier	AppendArg		563064	1					
ANR	563175	ArgumentList	hostname		563064	1					
ANR	563176	Argument	hostname		563064	0					
ANR	563177	Identifier	hostname		563064	0					
ANR	563178	ExpressionStatement	"execDCStarter ( args , NULL , NULL , s )"	779:1:17474:17510	563064	3	True				
ANR	563179	CallExpression	"execDCStarter ( args , NULL , NULL , s )"		563064	0					
ANR	563180	Callee	execDCStarter		563064	0					
ANR	563181	Identifier	execDCStarter		563064	0					
ANR	563182	ArgumentList	args		563064	1					
ANR	563183	Argument	args		563064	0					
ANR	563184	Identifier	args		563064	0					
ANR	563185	Argument	NULL		563064	1					
ANR	563186	Identifier	NULL		563064	0					
ANR	563187	Argument	NULL		563064	2					
ANR	563188	Identifier	NULL		563064	0					
ANR	563189	Argument	s		563064	3					
ANR	563190	Identifier	s		563064	0					
ANR	563191	ReturnStatement	return s_pid ;	781:1:17514:17526	563064	4	True				
ANR	563192	Identifier	s_pid		563064	0					
ANR	563193	ReturnType	int		563064	1					
ANR	563194	Identifier	Starter :: execDCStarter		563064	2					
ANR	563195	ParameterList	Stream * s		563064	3					
ANR	563196	Parameter	Stream * s	761:24:17014:17022	563064	0	True				
ANR	563197	ParameterType	Stream *		563064	0					
ANR	563198	Identifier	s		563064	1					
ANR	563199	CFGEntryNode	ENTRY		563064		True				
ANR	563200	CFGExitNode	EXIT		563064		True				
ANR	563201	Symbol	NULL		563064						
ANR	563202	Symbol	* * s_claim		563064						
ANR	563203	Symbol	* resmgr		563064						
ANR	563204	Symbol	s_claim -> rip ( ) -> r_id_str		563064						
ANR	563205	Symbol	* s_claim -> rip		563064						
ANR	563206	Symbol	s_claim -> client ( ) -> host		563064						
ANR	563207	Symbol	args		563064						
ANR	563208	Symbol	hostname		563064						
ANR	563209	Symbol	* s_claim -> client		563064						
ANR	563210	Symbol	s		563064						
ANR	563211	Symbol	* s_claim		563064						
ANR	563212	Symbol	resmgr		563064						
ANR	563213	Symbol	s_claim -> rip		563064						
ANR	563214	Symbol	s_claim -> client		563064						
ANR	563215	Symbol	s_claim		563064						
ANR	563216	Symbol	resmgr -> is_smp		563064						
ANR	563217	Symbol	s_pid		563064						
ANR	563218	Function	Starter :: receiveJobClassAdUpdate	784:0:17531:18744							
ANR	563219	FunctionDef	Starter :: receiveJobClassAdUpdate (Stream * stream)		563218	0					
ANR	563220	CompoundStatement		786:0:17586:18744	563218	0					
ANR	563221	IdentifierDeclStatement	ClassAd update_ad ;	787:1:17589:17606	563218	0	True				
ANR	563222	IdentifierDecl	update_ad		563218	0					
ANR	563223	IdentifierDeclType	ClassAd		563218	0					
ANR	563224	Identifier	update_ad		563218	1					
ANR	563225	IdentifierDeclStatement	int final_update = 0 ;	788:1:17609:17629	563218	1	True				
ANR	563226	IdentifierDecl	final_update = 0		563218	0					
ANR	563227	IdentifierDeclType	int		563218	0					
ANR	563228	Identifier	final_update		563218	1					
ANR	563229	AssignmentExpression	final_update = 0		563218	2		=			
ANR	563230	Identifier	final_update		563218	0					
ANR	563231	PrimaryExpression	0		563218	1					
ANR	563232	ExpressionStatement	stream -> decode ( )	794:1:17785:17801	563218	2	True				
ANR	563233	CallExpression	stream -> decode ( )		563218	0					
ANR	563234	Callee	stream -> decode		563218	0					
ANR	563235	PtrMemberAccess	stream -> decode		563218	0					
ANR	563236	Identifier	stream		563218	0					
ANR	563237	Identifier	decode		563218	1					
ANR	563238	ArgumentList			563218	1					
ANR	563239	IfStatement	if ( ! stream -> get ( final_update ) || ! update_ad . initFromStream ( * stream ) || ! stream -> end_of_message ( ) )		563218	3					
ANR	563240	Condition	! stream -> get ( final_update ) || ! update_ad . initFromStream ( * stream ) || ! stream -> end_of_message ( )	795:5:17808:17907	563218	0	True				
ANR	563241	OrExpression	! stream -> get ( final_update ) || ! update_ad . initFromStream ( * stream ) || ! stream -> end_of_message ( )		563218	0		||			
ANR	563242	UnaryOperationExpression	! stream -> get ( final_update )		563218	0					
ANR	563243	UnaryOperator	!		563218	0					
ANR	563244	CallExpression	stream -> get ( final_update )		563218	1					
ANR	563245	Callee	stream -> get		563218	0					
ANR	563246	PtrMemberAccess	stream -> get		563218	0					
ANR	563247	Identifier	stream		563218	0					
ANR	563248	Identifier	get		563218	1					
ANR	563249	ArgumentList	final_update		563218	1					
ANR	563250	Argument	final_update		563218	0					
ANR	563251	Identifier	final_update		563218	0					
ANR	563252	OrExpression	! update_ad . initFromStream ( * stream ) || ! stream -> end_of_message ( )		563218	1		||			
ANR	563253	UnaryOperationExpression	! update_ad . initFromStream ( * stream )		563218	0					
ANR	563254	UnaryOperator	!		563218	0					
ANR	563255	CallExpression	update_ad . initFromStream ( * stream )		563218	1					
ANR	563256	Callee	update_ad . initFromStream		563218	0					
ANR	563257	MemberAccess	update_ad . initFromStream		563218	0					
ANR	563258	Identifier	update_ad		563218	0					
ANR	563259	Identifier	initFromStream		563218	1					
ANR	563260	ArgumentList	* stream		563218	1					
ANR	563261	Argument	* stream		563218	0					
ANR	563262	UnaryOperationExpression	* stream		563218	0					
ANR	563263	UnaryOperator	*		563218	0					
ANR	563264	Identifier	stream		563218	1					
ANR	563265	UnaryOperationExpression	! stream -> end_of_message ( )		563218	1					
ANR	563266	UnaryOperator	!		563218	0					
ANR	563267	CallExpression	stream -> end_of_message ( )		563218	1					
ANR	563268	Callee	stream -> end_of_message		563218	0					
ANR	563269	PtrMemberAccess	stream -> end_of_message		563218	0					
ANR	563270	Identifier	stream		563218	0					
ANR	563271	Identifier	end_of_message		563218	1					
ANR	563272	ArgumentList			563218	1					
ANR	563273	CompoundStatement		13:1:325:325	563218	1					
ANR	563274	ExpressionStatement	final_update = 1	799:2:17916:17932	563218	0	True				
ANR	563275	AssignmentExpression	final_update = 1		563218	0		=			
ANR	563276	Identifier	final_update		563218	0					
ANR	563277	PrimaryExpression	1		563218	1					
ANR	563278	ElseStatement	else		563218	0					
ANR	563279	CompoundStatement		16:6:356:356	563218	0					
ANR	563280	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Received job ClassAd update from starter.\\n"" )"	802:2:17947:18014	563218	0	True				
ANR	563281	CallExpression	"dprintf ( D_FULLDEBUG , ""Received job ClassAd update from starter.\\n"" )"		563218	0					
ANR	563282	Callee	dprintf		563218	0					
ANR	563283	Identifier	dprintf		563218	0					
ANR	563284	ArgumentList	D_FULLDEBUG		563218	1					
ANR	563285	Argument	D_FULLDEBUG		563218	0					
ANR	563286	Identifier	D_FULLDEBUG		563218	0					
ANR	563287	Argument	"""Received job ClassAd update from starter.\\n"""		563218	1					
ANR	563288	PrimaryExpression	"""Received job ClassAd update from starter.\\n"""		563218	0					
ANR	563289	ExpressionStatement	update_ad . dPrint ( D_JOB )	803:2:18018:18043	563218	1	True				
ANR	563290	CallExpression	update_ad . dPrint ( D_JOB )		563218	0					
ANR	563291	Callee	update_ad . dPrint		563218	0					
ANR	563292	MemberAccess	update_ad . dPrint		563218	0					
ANR	563293	Identifier	update_ad		563218	0					
ANR	563294	Identifier	dPrint		563218	1					
ANR	563295	ArgumentList	D_JOB		563218	1					
ANR	563296	Argument	D_JOB		563218	0					
ANR	563297	Identifier	D_JOB		563218	0					
ANR	563298	ExpressionStatement	"update_ad . LookupString ( ATTR_STARTER_IP_ADDR , m_starter_addr )"	811:2:18379:18438	563218	2	True				
ANR	563299	CallExpression	"update_ad . LookupString ( ATTR_STARTER_IP_ADDR , m_starter_addr )"		563218	0					
ANR	563300	Callee	update_ad . LookupString		563218	0					
ANR	563301	MemberAccess	update_ad . LookupString		563218	0					
ANR	563302	Identifier	update_ad		563218	0					
ANR	563303	Identifier	LookupString		563218	1					
ANR	563304	ArgumentList	ATTR_STARTER_IP_ADDR		563218	1					
ANR	563305	Argument	ATTR_STARTER_IP_ADDR		563218	0					
ANR	563306	Identifier	ATTR_STARTER_IP_ADDR		563218	0					
ANR	563307	Argument	m_starter_addr		563218	1					
ANR	563308	Identifier	m_starter_addr		563218	0					
ANR	563309	IfStatement	if ( s_claim )		563218	3					
ANR	563310	Condition	s_claim	813:6:18447:18453	563218	0	True				
ANR	563311	Identifier	s_claim		563218	0					
ANR	563312	CompoundStatement		28:16:870:870	563218	1					
ANR	563313	ExpressionStatement	s_claim -> receiveJobClassAdUpdate ( update_ad )	814:3:18462:18507	563218	0	True				
ANR	563314	CallExpression	s_claim -> receiveJobClassAdUpdate ( update_ad )		563218	0					
ANR	563315	Callee	s_claim -> receiveJobClassAdUpdate		563218	0					
ANR	563316	PtrMemberAccess	s_claim -> receiveJobClassAdUpdate		563218	0					
ANR	563317	Identifier	s_claim		563218	0					
ANR	563318	Identifier	receiveJobClassAdUpdate		563218	1					
ANR	563319	ArgumentList	update_ad		563218	1					
ANR	563320	Argument	update_ad		563218	0					
ANR	563321	Identifier	update_ad		563218	0					
ANR	563322	IfStatement	if ( final_update )		563218	4					
ANR	563323	Condition	final_update	818:5:18522:18533	563218	0	True				
ANR	563324	Identifier	final_update		563218	0					
ANR	563325	CompoundStatement		33:20:950:950	563218	1					
ANR	563326	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Closing job ClassAd update socket from starter.\\n"" )"	819:2:18541:18614	563218	0	True				
ANR	563327	CallExpression	"dprintf ( D_FULLDEBUG , ""Closing job ClassAd update socket from starter.\\n"" )"		563218	0					
ANR	563328	Callee	dprintf		563218	0					
ANR	563329	Identifier	dprintf		563218	0					
ANR	563330	ArgumentList	D_FULLDEBUG		563218	1					
ANR	563331	Argument	D_FULLDEBUG		563218	0					
ANR	563332	Identifier	D_FULLDEBUG		563218	0					
ANR	563333	Argument	"""Closing job ClassAd update socket from starter.\\n"""		563218	1					
ANR	563334	PrimaryExpression	"""Closing job ClassAd update socket from starter.\\n"""		563218	0					
ANR	563335	ExpressionStatement	daemonCore -> Cancel_Socket ( s_job_update_sock )	820:2:18618:18662	563218	1	True				
ANR	563336	CallExpression	daemonCore -> Cancel_Socket ( s_job_update_sock )		563218	0					
ANR	563337	Callee	daemonCore -> Cancel_Socket		563218	0					
ANR	563338	PtrMemberAccess	daemonCore -> Cancel_Socket		563218	0					
ANR	563339	Identifier	daemonCore		563218	0					
ANR	563340	Identifier	Cancel_Socket		563218	1					
ANR	563341	ArgumentList	s_job_update_sock		563218	1					
ANR	563342	Argument	s_job_update_sock		563218	0					
ANR	563343	Identifier	s_job_update_sock		563218	0					
ANR	563344	Statement	delete	821:2:18666:18671	563218	2	True				
ANR	563345	ExpressionStatement	s_job_update_sock	821:9:18673:18690	563218	3	True				
ANR	563346	Identifier	s_job_update_sock		563218	0					
ANR	563347	ExpressionStatement	s_job_update_sock = NULL	822:2:18694:18718	563218	4	True				
ANR	563348	AssignmentExpression	s_job_update_sock = NULL		563218	0		=			
ANR	563349	Identifier	s_job_update_sock		563218	0					
ANR	563350	Identifier	NULL		563218	1					
ANR	563351	ReturnStatement	return KEEP_STREAM ;	824:1:18724:18742	563218	5	True				
ANR	563352	Identifier	KEEP_STREAM		563218	0					
ANR	563353	ReturnType	int		563218	1					
ANR	563354	Identifier	Starter :: receiveJobClassAdUpdate		563218	2					
ANR	563355	ParameterList	Stream * stream		563218	3					
ANR	563356	Parameter	Stream * stream	785:34:17569:17582	563218	0	True				
ANR	563357	ParameterType	Stream *		563218	0					
ANR	563358	Identifier	stream		563218	1					
ANR	563359	CFGEntryNode	ENTRY		563218		True				
ANR	563360	CFGExitNode	EXIT		563218		True				
ANR	563361	Symbol	stream -> end_of_message		563218						
ANR	563362	Symbol	stream -> get		563218						
ANR	563363	Symbol	NULL		563218						
ANR	563364	Symbol	update_ad		563218						
ANR	563365	Symbol	D_JOB		563218						
ANR	563366	Symbol	update_ad . initFromStream		563218						
ANR	563367	Symbol	D_FULLDEBUG		563218						
ANR	563368	Symbol	m_starter_addr		563218						
ANR	563369	Symbol	KEEP_STREAM		563218						
ANR	563370	Symbol	final_update		563218						
ANR	563371	Symbol	stream		563218						
ANR	563372	Symbol	s_job_update_sock		563218						
ANR	563373	Symbol	daemonCore		563218						
ANR	563374	Symbol	* stream		563218						
ANR	563375	Symbol	ATTR_STARTER_IP_ADDR		563218						
ANR	563376	Symbol	s_claim		563218						
ANR	563377	Function	Starter :: execDCStarter	827:0:18747:22319							
ANR	563378	FunctionDef	"Starter :: execDCStarter (ArgList const & args , Env const * env , int * std_fds , Stream * s)"		563377	0					
ANR	563379	CompoundStatement		830:0:18845:22319	563377	0					
ANR	563380	IdentifierDeclStatement	"Stream * inherit_list [ ] = { 0 , s , 0 } ;"	831:1:18848:18979	563377	0	True				
ANR	563381	IdentifierDecl	"* inherit_list [ ] = { 0 , s , 0 }"		563377	0					
ANR	563382	IdentifierDeclType	Stream * [ ]		563377	0					
ANR	563383	Identifier	inherit_list		563377	1					
ANR	563384	AssignmentExpression	"* inherit_list [ ] = { 0 , s , 0 }"		563377	2		=			
ANR	563385	Identifier	inherit_list		563377	0					
ANR	563386	InitializerList	0		563377	1					
ANR	563387	PrimaryExpression	0		563377	0					
ANR	563388	Identifier	s		563377	1					
ANR	563389	PrimaryExpression	0		563377	2					
ANR	563390	IdentifierDeclStatement	const ArgList * final_args = & args ;	836:1:18983:19016	563377	1	True				
ANR	563391	IdentifierDecl	* final_args = & args		563377	0					
ANR	563392	IdentifierDeclType	const ArgList *		563377	0					
ANR	563393	Identifier	final_args		563377	1					
ANR	563394	AssignmentExpression	* final_args = & args		563377	2		=			
ANR	563395	Identifier	final_args		563377	0					
ANR	563396	UnaryOperationExpression	& args		563377	1					
ANR	563397	UnaryOperator	&		563377	0					
ANR	563398	Identifier	args		563377	1					
ANR	563399	IdentifierDeclStatement	const char * final_path = s_path ;	837:1:19019:19050	563377	2	True				
ANR	563400	IdentifierDecl	* final_path = s_path		563377	0					
ANR	563401	IdentifierDeclType	const char *		563377	0					
ANR	563402	Identifier	final_path		563377	1					
ANR	563403	AssignmentExpression	* final_path = s_path		563377	2		=			
ANR	563404	Identifier	s_path		563377	0					
ANR	563405	Identifier	s_path		563377	1					
ANR	563406	IdentifierDeclStatement	Env new_env ;	838:1:19053:19064	563377	3	True				
ANR	563407	IdentifierDecl	new_env		563377	0					
ANR	563408	IdentifierDeclType	Env		563377	0					
ANR	563409	Identifier	new_env		563377	1					
ANR	563410	IfStatement	if ( env )		563377	4					
ANR	563411	Condition	env	840:5:19072:19074	563377	0	True				
ANR	563412	Identifier	env		563377	0					
ANR	563413	CompoundStatement		11:11:232:232	563377	1					
ANR	563414	ExpressionStatement	new_env . MergeFrom ( * env )	841:2:19082:19107	563377	0	True				
ANR	563415	CallExpression	new_env . MergeFrom ( * env )		563377	0					
ANR	563416	Callee	new_env . MergeFrom		563377	0					
ANR	563417	MemberAccess	new_env . MergeFrom		563377	0					
ANR	563418	Identifier	new_env		563377	0					
ANR	563419	Identifier	MergeFrom		563377	1					
ANR	563420	ArgumentList	* env		563377	1					
ANR	563421	Argument	* env		563377	0					
ANR	563422	UnaryOperationExpression	* env		563377	0					
ANR	563423	UnaryOperator	*		563377	0					
ANR	563424	Identifier	env		563377	1					
ANR	563425	ExpressionStatement	ASSERT ( executeDir ( ) )	848:1:19328:19350	563377	5	True				
ANR	563426	CallExpression	ASSERT ( executeDir ( ) )		563377	0					
ANR	563427	Callee	ASSERT		563377	0					
ANR	563428	Identifier	ASSERT		563377	0					
ANR	563429	ArgumentList	executeDir ( )		563377	1					
ANR	563430	Argument	executeDir ( )		563377	0					
ANR	563431	CallExpression	executeDir ( )		563377	0					
ANR	563432	Callee	executeDir		563377	0					
ANR	563433	Identifier	executeDir		563377	0					
ANR	563434	ArgumentList			563377	1					
ANR	563435	ExpressionStatement	"new_env . SetEnv ( ""_CONDOR_EXECUTE"" , executeDir ( ) )"	849:1:19353:19402	563377	6	True				
ANR	563436	CallExpression	"new_env . SetEnv ( ""_CONDOR_EXECUTE"" , executeDir ( ) )"		563377	0					
ANR	563437	Callee	new_env . SetEnv		563377	0					
ANR	563438	MemberAccess	new_env . SetEnv		563377	0					
ANR	563439	Identifier	new_env		563377	0					
ANR	563440	Identifier	SetEnv		563377	1					
ANR	563441	ArgumentList	"""_CONDOR_EXECUTE"""		563377	1					
ANR	563442	Argument	"""_CONDOR_EXECUTE"""		563377	0					
ANR	563443	PrimaryExpression	"""_CONDOR_EXECUTE"""		563377	0					
ANR	563444	Argument	executeDir ( )		563377	1					
ANR	563445	CallExpression	executeDir ( )		563377	0					
ANR	563446	Callee	executeDir		563377	0					
ANR	563447	Identifier	executeDir		563377	0					
ANR	563448	ArgumentList			563377	1					
ANR	563449	ExpressionStatement	env = & new_env	851:1:19406:19420	563377	7	True				
ANR	563450	AssignmentExpression	env = & new_env		563377	0		=			
ANR	563451	Identifier	env		563377	0					
ANR	563452	UnaryOperationExpression	& new_env		563377	1					
ANR	563453	UnaryOperator	&		563377	0					
ANR	563454	Identifier	new_env		563377	1					
ANR	563455	IdentifierDeclStatement	ReliSock child_job_update_sock ;	854:1:19425:19455	563377	8	True				
ANR	563456	IdentifierDecl	child_job_update_sock		563377	0					
ANR	563457	IdentifierDeclType	ReliSock		563377	0					
ANR	563458	Identifier	child_job_update_sock		563377	1					
ANR	563459	ExpressionStatement	ASSERT ( ! s_job_update_sock )	855:1:19490:19518	563377	9	True				
ANR	563460	CallExpression	ASSERT ( ! s_job_update_sock )		563377	0					
ANR	563461	Callee	ASSERT		563377	0					
ANR	563462	Identifier	ASSERT		563377	0					
ANR	563463	ArgumentList	! s_job_update_sock		563377	1					
ANR	563464	Argument	! s_job_update_sock		563377	0					
ANR	563465	UnaryOperationExpression	! s_job_update_sock		563377	0					
ANR	563466	UnaryOperator	!		563377	0					
ANR	563467	Identifier	s_job_update_sock		563377	1					
ANR	563468	Statement	s_job_update_sock	856:1:19521:19537	563377	10	True				
ANR	563469	Statement	=	856:19:19539:19539	563377	11	True				
ANR	563470	Statement	new	856:21:19541:19543	563377	12	True				
ANR	563471	ExpressionStatement	ReliSock	856:25:19545:19553	563377	13	True				
ANR	563472	Identifier	ReliSock		563377	0					
ANR	563473	ExpressionStatement	ASSERT ( s_job_update_sock )	857:1:19598:19625	563377	14	True				
ANR	563474	CallExpression	ASSERT ( s_job_update_sock )		563377	0					
ANR	563475	Callee	ASSERT		563377	0					
ANR	563476	Identifier	ASSERT		563377	0					
ANR	563477	ArgumentList	s_job_update_sock		563377	1					
ANR	563478	Argument	s_job_update_sock		563377	0					
ANR	563479	Identifier	s_job_update_sock		563377	0					
ANR	563480	IfStatement	if ( ! s_job_update_sock -> connect_socketpair ( child_job_update_sock ) )		563377	15					
ANR	563481	Condition	! s_job_update_sock -> connect_socketpair ( child_job_update_sock )	861:5:19734:19796	563377	0	True				
ANR	563482	UnaryOperationExpression	! s_job_update_sock -> connect_socketpair ( child_job_update_sock )		563377	0					
ANR	563483	UnaryOperator	!		563377	0					
ANR	563484	CallExpression	s_job_update_sock -> connect_socketpair ( child_job_update_sock )		563377	1					
ANR	563485	Callee	s_job_update_sock -> connect_socketpair		563377	0					
ANR	563486	PtrMemberAccess	s_job_update_sock -> connect_socketpair		563377	0					
ANR	563487	Identifier	s_job_update_sock		563377	0					
ANR	563488	Identifier	connect_socketpair		563377	1					
ANR	563489	ArgumentList	child_job_update_sock		563377	1					
ANR	563490	Argument	child_job_update_sock		563377	0					
ANR	563491	Identifier	child_job_update_sock		563377	0					
ANR	563492	CompoundStatement		32:71:954:954	563377	1					
ANR	563493	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Failed to create job ClassAd update socket!\\n"" )"	862:2:19804:19878	563377	0	True				
ANR	563494	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Failed to create job ClassAd update socket!\\n"" )"		563377	0					
ANR	563495	Callee	dprintf		563377	0					
ANR	563496	Identifier	dprintf		563377	0					
ANR	563497	ArgumentList	D_ALWAYS		563377	1					
ANR	563498	Argument	D_ALWAYS		563377	0					
ANR	563499	Identifier	D_ALWAYS		563377	0					
ANR	563500	Argument	"""ERROR: Failed to create job ClassAd update socket!\\n"""		563377	1					
ANR	563501	PrimaryExpression	"""ERROR: Failed to create job ClassAd update socket!\\n"""		563377	0					
ANR	563502	ExpressionStatement	s_pid = 0	863:2:19882:19891	563377	1	True				
ANR	563503	AssignmentExpression	s_pid = 0		563377	0		=			
ANR	563504	Identifier	s_pid		563377	0					
ANR	563505	PrimaryExpression	0		563377	1					
ANR	563506	ReturnStatement	return s_pid ;	864:2:19895:19907	563377	2	True				
ANR	563507	Identifier	s_pid		563377	0					
ANR	563508	ExpressionStatement	inherit_list [ 0 ] = & child_job_update_sock	866:1:19913:19953	563377	16	True				
ANR	563509	AssignmentExpression	inherit_list [ 0 ] = & child_job_update_sock		563377	0		=			
ANR	563510	ArrayIndexing	inherit_list [ 0 ]		563377	0					
ANR	563511	Identifier	inherit_list		563377	0					
ANR	563512	PrimaryExpression	0		563377	1					
ANR	563513	UnaryOperationExpression	& child_job_update_sock		563377	1					
ANR	563514	UnaryOperator	&		563377	0					
ANR	563515	Identifier	child_job_update_sock		563377	1					
ANR	563516	IfStatement	if ( s_claim )		563377	17					
ANR	563517	Condition	s_claim	869:5:20000:20006	563377	0	True				
ANR	563518	Identifier	s_claim		563377	0					
ANR	563519	ExpressionStatement	s_claim -> writeMachAd ( s_job_update_sock )	870:2:20012:20053	563377	1	True				
ANR	563520	CallExpression	s_claim -> writeMachAd ( s_job_update_sock )		563377	0					
ANR	563521	Callee	s_claim -> writeMachAd		563377	0					
ANR	563522	PtrMemberAccess	s_claim -> writeMachAd		563377	0					
ANR	563523	Identifier	s_claim		563377	0					
ANR	563524	Identifier	writeMachAd		563377	1					
ANR	563525	ArgumentList	s_job_update_sock		563377	1					
ANR	563526	Argument	s_job_update_sock		563377	0					
ANR	563527	Identifier	s_job_update_sock		563377	0					
ANR	563528	IfStatement	"if ( daemonCore -> Register_Socket ( s_job_update_sock , ""starter ClassAd update socket"" , ( SocketHandlercpp ) & Starter :: receiveJobClassAdUpdate , ""receiveJobClassAdUpdate"" , this ) < 0 )"		563377	18					
ANR	563529	Condition	"daemonCore -> Register_Socket ( s_job_update_sock , ""starter ClassAd update socket"" , ( SocketHandlercpp ) & Starter :: receiveJobClassAdUpdate , ""receiveJobClassAdUpdate"" , this ) < 0"	872:5:20061:20245	563377	0	True				
ANR	563530	RelationalExpression	"daemonCore -> Register_Socket ( s_job_update_sock , ""starter ClassAd update socket"" , ( SocketHandlercpp ) & Starter :: receiveJobClassAdUpdate , ""receiveJobClassAdUpdate"" , this ) < 0"		563377	0		<			
ANR	563531	CallExpression	"daemonCore -> Register_Socket ( s_job_update_sock , ""starter ClassAd update socket"" , ( SocketHandlercpp ) & Starter :: receiveJobClassAdUpdate , ""receiveJobClassAdUpdate"" , this )"		563377	0					
ANR	563532	Callee	daemonCore -> Register_Socket		563377	0					
ANR	563533	PtrMemberAccess	daemonCore -> Register_Socket		563377	0					
ANR	563534	Identifier	daemonCore		563377	0					
ANR	563535	Identifier	Register_Socket		563377	1					
ANR	563536	ArgumentList	s_job_update_sock		563377	1					
ANR	563537	Argument	s_job_update_sock		563377	0					
ANR	563538	Identifier	s_job_update_sock		563377	0					
ANR	563539	Argument	"""starter ClassAd update socket"""		563377	1					
ANR	563540	PrimaryExpression	"""starter ClassAd update socket"""		563377	0					
ANR	563541	Argument	( SocketHandlercpp ) & Starter :: receiveJobClassAdUpdate		563377	2					
ANR	563542	CastExpression	( SocketHandlercpp ) & Starter :: receiveJobClassAdUpdate		563377	0					
ANR	563543	CastTarget	SocketHandlercpp		563377	0					
ANR	563544	UnaryOperationExpression	& Starter :: receiveJobClassAdUpdate		563377	1					
ANR	563545	UnaryOperator	&		563377	0					
ANR	563546	Identifier	Starter :: receiveJobClassAdUpdate		563377	1					
ANR	563547	Argument	"""receiveJobClassAdUpdate"""		563377	3					
ANR	563548	PrimaryExpression	"""receiveJobClassAdUpdate"""		563377	0					
ANR	563549	Argument	this		563377	4					
ANR	563550	Identifier	this		563377	0					
ANR	563551	PrimaryExpression	0		563377	1					
ANR	563552	CompoundStatement		49:1:1404:1404	563377	1					
ANR	563553	ExpressionStatement	"EXCEPT ( ""Failed to register ClassAd update socket."" )"	879:2:20254:20305	563377	0	True				
ANR	563554	CallExpression	"EXCEPT ( ""Failed to register ClassAd update socket."" )"		563377	0					
ANR	563555	Callee	EXCEPT		563377	0					
ANR	563556	Identifier	EXCEPT		563377	0					
ANR	563557	ArgumentList	"""Failed to register ClassAd update socket."""		563377	1					
ANR	563558	Argument	"""Failed to register ClassAd update socket."""		563377	0					
ANR	563559	PrimaryExpression	"""Failed to register ClassAd update socket."""		563377	0					
ANR	563560	IdentifierDeclStatement	ArgList glexec_args ;	886:1:20463:20482	563377	19	True				
ANR	563561	IdentifierDecl	glexec_args		563377	0					
ANR	563562	IdentifierDeclType	ArgList		563377	0					
ANR	563563	Identifier	glexec_args		563377	1					
ANR	563564	IdentifierDeclStatement	Env glexec_env ;	887:1:20485:20499	563377	20	True				
ANR	563565	IdentifierDecl	glexec_env		563377	0					
ANR	563566	IdentifierDeclType	Env		563377	0					
ANR	563567	Identifier	glexec_env		563377	1					
ANR	563568	IdentifierDeclStatement	int glexec_std_fds [ 3 ] ;	888:1:20502:20523	563377	21	True				
ANR	563569	IdentifierDecl	glexec_std_fds [ 3 ]		563377	0					
ANR	563570	IdentifierDeclType	int [ 3 ]		563377	0					
ANR	563571	Identifier	glexec_std_fds		563377	1					
ANR	563572	PrimaryExpression	3		563377	2					
ANR	563573	IfStatement	"if ( param_boolean ( ""GLEXEC_STARTER"" , false ) )"		563377	22					
ANR	563574	Condition	"param_boolean ( ""GLEXEC_STARTER"" , false )"	889:5:20530:20569	563377	0	True				
ANR	563575	CallExpression	"param_boolean ( ""GLEXEC_STARTER"" , false )"		563377	0					
ANR	563576	Callee	param_boolean		563377	0					
ANR	563577	Identifier	param_boolean		563377	0					
ANR	563578	ArgumentList	"""GLEXEC_STARTER"""		563377	1					
ANR	563579	Argument	"""GLEXEC_STARTER"""		563377	0					
ANR	563580	PrimaryExpression	"""GLEXEC_STARTER"""		563377	0					
ANR	563581	Argument	false		563377	1					
ANR	563582	Identifier	false		563377	0					
ANR	563583	CompoundStatement		60:48:1727:1727	563377	1					
ANR	563584	IfStatement	"if ( ! glexec_starter_prepare ( s_path , s_claim -> client ( ) -> proxyFile ( ) , args , env , std_fds , glexec_args , glexec_env , glexec_std_fds ) )"		563377	0					
ANR	563585	Condition	"! glexec_starter_prepare ( s_path , s_claim -> client ( ) -> proxyFile ( ) , args , env , std_fds , glexec_args , glexec_env , glexec_std_fds )"	890:6:20581:20931	563377	0	True				
ANR	563586	UnaryOperationExpression	"! glexec_starter_prepare ( s_path , s_claim -> client ( ) -> proxyFile ( ) , args , env , std_fds , glexec_args , glexec_env , glexec_std_fds )"		563377	0					
ANR	563587	UnaryOperator	!		563377	0					
ANR	563588	CallExpression	"glexec_starter_prepare ( s_path , s_claim -> client ( ) -> proxyFile ( ) , args , env , std_fds , glexec_args , glexec_env , glexec_std_fds )"		563377	1					
ANR	563589	Callee	glexec_starter_prepare		563377	0					
ANR	563590	Identifier	glexec_starter_prepare		563377	0					
ANR	563591	ArgumentList	s_path		563377	1					
ANR	563592	Argument	s_path		563377	0					
ANR	563593	Identifier	s_path		563377	0					
ANR	563594	Argument	s_claim -> client ( ) -> proxyFile ( )		563377	1					
ANR	563595	CallExpression	s_claim -> client ( ) -> proxyFile ( )		563377	0					
ANR	563596	Callee	s_claim -> client ( ) -> proxyFile		563377	0					
ANR	563597	PtrMemberAccess	s_claim -> client ( ) -> proxyFile		563377	0					
ANR	563598	CallExpression	s_claim -> client ( )		563377	0					
ANR	563599	Callee	s_claim -> client		563377	0					
ANR	563600	PtrMemberAccess	s_claim -> client		563377	0					
ANR	563601	Identifier	s_claim		563377	0					
ANR	563602	Identifier	client		563377	1					
ANR	563603	ArgumentList			563377	1					
ANR	563604	Identifier	proxyFile		563377	1					
ANR	563605	ArgumentList			563377	1					
ANR	563606	Argument	args		563377	2					
ANR	563607	Identifier	args		563377	0					
ANR	563608	Argument	env		563377	3					
ANR	563609	Identifier	env		563377	0					
ANR	563610	Argument	std_fds		563377	4					
ANR	563611	Identifier	std_fds		563377	0					
ANR	563612	Argument	glexec_args		563377	5					
ANR	563613	Identifier	glexec_args		563377	0					
ANR	563614	Argument	glexec_env		563377	6					
ANR	563615	Identifier	glexec_env		563377	0					
ANR	563616	Argument	glexec_std_fds		563377	7					
ANR	563617	Identifier	glexec_std_fds		563377	0					
ANR	563618	CompoundStatement		69:2:2091:2091	563377	1					
ANR	563619	ExpressionStatement	cleanupAfterGlexec ( )	901:3:21021:21041	563377	0	True				
ANR	563620	CallExpression	cleanupAfterGlexec ( )		563377	0					
ANR	563621	Callee	cleanupAfterGlexec		563377	0					
ANR	563622	Identifier	cleanupAfterGlexec		563377	0					
ANR	563623	ArgumentList			563377	1					
ANR	563624	ReturnStatement	return 0 ;	902:3:21046:21054	563377	1	True				
ANR	563625	PrimaryExpression	0		563377	0					
ANR	563626	ExpressionStatement	final_path = glexec_args . GetArg ( 0 )	904:2:21062:21096	563377	1	True				
ANR	563627	AssignmentExpression	final_path = glexec_args . GetArg ( 0 )		563377	0		=			
ANR	563628	Identifier	final_path		563377	0					
ANR	563629	CallExpression	glexec_args . GetArg ( 0 )		563377	1					
ANR	563630	Callee	glexec_args . GetArg		563377	0					
ANR	563631	MemberAccess	glexec_args . GetArg		563377	0					
ANR	563632	Identifier	glexec_args		563377	0					
ANR	563633	Identifier	GetArg		563377	1					
ANR	563634	ArgumentList	0		563377	1					
ANR	563635	Argument	0		563377	0					
ANR	563636	PrimaryExpression	0		563377	0					
ANR	563637	ExpressionStatement	final_args = & glexec_args	905:2:21100:21125	563377	2	True				
ANR	563638	AssignmentExpression	final_args = & glexec_args		563377	0		=			
ANR	563639	Identifier	final_args		563377	0					
ANR	563640	UnaryOperationExpression	& glexec_args		563377	1					
ANR	563641	UnaryOperator	&		563377	0					
ANR	563642	Identifier	glexec_args		563377	1					
ANR	563643	ExpressionStatement	env = & glexec_env	906:2:21129:21146	563377	3	True				
ANR	563644	AssignmentExpression	env = & glexec_env		563377	0		=			
ANR	563645	Identifier	env		563377	0					
ANR	563646	UnaryOperationExpression	& glexec_env		563377	1					
ANR	563647	UnaryOperator	&		563377	0					
ANR	563648	Identifier	glexec_env		563377	1					
ANR	563649	ExpressionStatement	std_fds = glexec_std_fds	907:2:21150:21174	563377	4	True				
ANR	563650	AssignmentExpression	std_fds = glexec_std_fds		563377	0		=			
ANR	563651	Identifier	std_fds		563377	0					
ANR	563652	Identifier	glexec_std_fds		563377	1					
ANR	563653	IdentifierDeclStatement	int reaper_id ;	911:1:21199:21212	563377	23	True				
ANR	563654	IdentifierDecl	reaper_id		563377	0					
ANR	563655	IdentifierDeclType	int		563377	0					
ANR	563656	Identifier	reaper_id		563377	1					
ANR	563657	IfStatement	if ( s_reaper_id > 0 )		563377	24					
ANR	563658	Condition	s_reaper_id > 0	912:5:21219:21233	563377	0	True				
ANR	563659	RelationalExpression	s_reaper_id > 0		563377	0		>			
ANR	563660	Identifier	s_reaper_id		563377	0					
ANR	563661	PrimaryExpression	0		563377	1					
ANR	563662	CompoundStatement		83:23:2391:2391	563377	1					
ANR	563663	ExpressionStatement	reaper_id = s_reaper_id	913:2:21241:21264	563377	0	True				
ANR	563664	AssignmentExpression	reaper_id = s_reaper_id		563377	0		=			
ANR	563665	Identifier	reaper_id		563377	0					
ANR	563666	Identifier	s_reaper_id		563377	1					
ANR	563667	ElseStatement	else		563377	0					
ANR	563668	CompoundStatement		85:8:2428:2428	563377	0					
ANR	563669	ExpressionStatement	reaper_id = main_reaper	915:2:21278:21301	563377	0	True				
ANR	563670	AssignmentExpression	reaper_id = main_reaper		563377	0		=			
ANR	563671	Identifier	reaper_id		563377	0					
ANR	563672	Identifier	main_reaper		563377	1					
ANR	563673	IfStatement	if ( DebugFlags & D_FULLDEBUG )		563377	25					
ANR	563674	Condition	DebugFlags & D_FULLDEBUG	918:4:21311:21334	563377	0	True				
ANR	563675	BitAndExpression	DebugFlags & D_FULLDEBUG		563377	0		&			
ANR	563676	Identifier	DebugFlags		563377	0					
ANR	563677	Identifier	D_FULLDEBUG		563377	1					
ANR	563678	CompoundStatement		90:2:2495:2515	563377	1					
ANR	563679	IdentifierDeclStatement	MyString args_string ;	919:2:21341:21361	563377	0	True				
ANR	563680	IdentifierDecl	args_string		563377	0					
ANR	563681	IdentifierDeclType	MyString		563377	0					
ANR	563682	Identifier	args_string		563377	1					
ANR	563683	ExpressionStatement	final_args -> GetArgsStringForDisplay ( & args_string )	920:2:21365:21414	563377	1	True				
ANR	563684	CallExpression	final_args -> GetArgsStringForDisplay ( & args_string )		563377	0					
ANR	563685	Callee	final_args -> GetArgsStringForDisplay		563377	0					
ANR	563686	PtrMemberAccess	final_args -> GetArgsStringForDisplay		563377	0					
ANR	563687	Identifier	final_args		563377	0					
ANR	563688	Identifier	GetArgsStringForDisplay		563377	1					
ANR	563689	ArgumentList	& args_string		563377	1					
ANR	563690	Argument	& args_string		563377	0					
ANR	563691	UnaryOperationExpression	& args_string		563377	0					
ANR	563692	UnaryOperator	&		563377	0					
ANR	563693	Identifier	args_string		563377	1					
ANR	563694	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""About to Create_Process \\""%s\\""\\n"" , args_string . Value ( ) )"	921:2:21418:21502	563377	2	True				
ANR	563695	CallExpression	"dprintf ( D_FULLDEBUG , ""About to Create_Process \\""%s\\""\\n"" , args_string . Value ( ) )"		563377	0					
ANR	563696	Callee	dprintf		563377	0					
ANR	563697	Identifier	dprintf		563377	0					
ANR	563698	ArgumentList	D_FULLDEBUG		563377	1					
ANR	563699	Argument	D_FULLDEBUG		563377	0					
ANR	563700	Identifier	D_FULLDEBUG		563377	0					
ANR	563701	Argument	"""About to Create_Process \\""%s\\""\\n"""		563377	1					
ANR	563702	PrimaryExpression	"""About to Create_Process \\""%s\\""\\n"""		563377	0					
ANR	563703	Argument	args_string . Value ( )		563377	2					
ANR	563704	CallExpression	args_string . Value ( )		563377	0					
ANR	563705	Callee	args_string . Value		563377	0					
ANR	563706	MemberAccess	args_string . Value		563377	0					
ANR	563707	Identifier	args_string		563377	0					
ANR	563708	Identifier	Value		563377	1					
ANR	563709	ArgumentList			563377	1					
ANR	563710	IdentifierDeclStatement	FamilyInfo fi ;	925:1:21509:21522	563377	26	True				
ANR	563711	IdentifierDecl	fi		563377	0					
ANR	563712	IdentifierDeclType	FamilyInfo		563377	0					
ANR	563713	Identifier	fi		563377	1					
ANR	563714	ExpressionStatement	fi . max_snapshot_interval = pid_snapshot_interval	926:1:21525:21573	563377	27	True				
ANR	563715	AssignmentExpression	fi . max_snapshot_interval = pid_snapshot_interval		563377	0		=			
ANR	563716	MemberAccess	fi . max_snapshot_interval		563377	0					
ANR	563717	Identifier	fi		563377	0					
ANR	563718	Identifier	max_snapshot_interval		563377	1					
ANR	563719	Identifier	pid_snapshot_interval		563377	1					
ANR	563720	ExpressionStatement	"s_pid = daemonCore -> Create_Process ( final_path , * final_args , PRIV_ROOT , reaper_id , TRUE , env , NULL , & fi , inherit_list , std_fds )"	928:1:21577:21726	563377	28	True				
ANR	563721	AssignmentExpression	"s_pid = daemonCore -> Create_Process ( final_path , * final_args , PRIV_ROOT , reaper_id , TRUE , env , NULL , & fi , inherit_list , std_fds )"		563377	0		=			
ANR	563722	Identifier	s_pid		563377	0					
ANR	563723	CallExpression	"daemonCore -> Create_Process ( final_path , * final_args , PRIV_ROOT , reaper_id , TRUE , env , NULL , & fi , inherit_list , std_fds )"		563377	1					
ANR	563724	Callee	daemonCore -> Create_Process		563377	0					
ANR	563725	PtrMemberAccess	daemonCore -> Create_Process		563377	0					
ANR	563726	Identifier	daemonCore		563377	0					
ANR	563727	Identifier	Create_Process		563377	1					
ANR	563728	ArgumentList	final_path		563377	1					
ANR	563729	Argument	final_path		563377	0					
ANR	563730	Identifier	final_path		563377	0					
ANR	563731	Argument	* final_args		563377	1					
ANR	563732	UnaryOperationExpression	* final_args		563377	0					
ANR	563733	UnaryOperator	*		563377	0					
ANR	563734	Identifier	final_args		563377	1					
ANR	563735	Argument	PRIV_ROOT		563377	2					
ANR	563736	Identifier	PRIV_ROOT		563377	0					
ANR	563737	Argument	reaper_id		563377	3					
ANR	563738	Identifier	reaper_id		563377	0					
ANR	563739	Argument	TRUE		563377	4					
ANR	563740	Identifier	TRUE		563377	0					
ANR	563741	Argument	env		563377	5					
ANR	563742	Identifier	env		563377	0					
ANR	563743	Argument	NULL		563377	6					
ANR	563744	Identifier	NULL		563377	0					
ANR	563745	Argument	& fi		563377	7					
ANR	563746	UnaryOperationExpression	& fi		563377	0					
ANR	563747	UnaryOperator	&		563377	0					
ANR	563748	Identifier	fi		563377	1					
ANR	563749	Argument	inherit_list		563377	8					
ANR	563750	Identifier	inherit_list		563377	0					
ANR	563751	Argument	std_fds		563377	9					
ANR	563752	Identifier	std_fds		563377	0					
ANR	563753	IfStatement	if ( s_pid == FALSE )		563377	29					
ANR	563754	Condition	s_pid == FALSE	931:5:21733:21746	563377	0	True				
ANR	563755	EqualityExpression	s_pid == FALSE		563377	0		==			
ANR	563756	Identifier	s_pid		563377	0					
ANR	563757	Identifier	FALSE		563377	1					
ANR	563758	CompoundStatement		102:22:2904:2904	563377	1					
ANR	563759	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: exec_starter failed!\\n"" )"	932:2:21754:21805	563377	0	True				
ANR	563760	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: exec_starter failed!\\n"" )"		563377	0					
ANR	563761	Callee	dprintf		563377	0					
ANR	563762	Identifier	dprintf		563377	0					
ANR	563763	ArgumentList	D_ALWAYS		563377	1					
ANR	563764	Argument	D_ALWAYS		563377	0					
ANR	563765	Identifier	D_ALWAYS		563377	0					
ANR	563766	Argument	"""ERROR: exec_starter failed!\\n"""		563377	1					
ANR	563767	PrimaryExpression	"""ERROR: exec_starter failed!\\n"""		563377	0					
ANR	563768	ExpressionStatement	s_pid = 0	933:2:21809:21818	563377	1	True				
ANR	563769	AssignmentExpression	s_pid = 0		563377	0		=			
ANR	563770	Identifier	s_pid		563377	0					
ANR	563771	PrimaryExpression	0		563377	1					
ANR	563772	IfStatement	"if ( param_boolean ( ""GLEXEC_STARTER"" , false ) )"		563377	30					
ANR	563773	Condition	"param_boolean ( ""GLEXEC_STARTER"" , false )"	937:5:21848:21887	563377	0	True				
ANR	563774	CallExpression	"param_boolean ( ""GLEXEC_STARTER"" , false )"		563377	0					
ANR	563775	Callee	param_boolean		563377	0					
ANR	563776	Identifier	param_boolean		563377	0					
ANR	563777	ArgumentList	"""GLEXEC_STARTER"""		563377	1					
ANR	563778	Argument	"""GLEXEC_STARTER"""		563377	0					
ANR	563779	PrimaryExpression	"""GLEXEC_STARTER"""		563377	0					
ANR	563780	Argument	false		563377	1					
ANR	563781	Identifier	false		563377	0					
ANR	563782	CompoundStatement		108:48:3045:3045	563377	1					
ANR	563783	IfStatement	if ( ! glexec_starter_handle_env ( s_pid ) )		563377	0					
ANR	563784	Condition	! glexec_starter_handle_env ( s_pid )	943:7:22127:22159	563377	0	True				
ANR	563785	UnaryOperationExpression	! glexec_starter_handle_env ( s_pid )		563377	0					
ANR	563786	UnaryOperator	!		563377	0					
ANR	563787	CallExpression	glexec_starter_handle_env ( s_pid )		563377	1					
ANR	563788	Callee	glexec_starter_handle_env		563377	0					
ANR	563789	Identifier	glexec_starter_handle_env		563377	0					
ANR	563790	ArgumentList	s_pid		563377	1					
ANR	563791	Argument	s_pid		563377	0					
ANR	563792	Identifier	s_pid		563377	0					
ANR	563793	CompoundStatement		114:43:3317:3317	563377	1					
ANR	563794	ExpressionStatement	cleanupAfterGlexec ( )	946:3:22254:22274	563377	0	True				
ANR	563795	CallExpression	cleanupAfterGlexec ( )		563377	0					
ANR	563796	Callee	cleanupAfterGlexec		563377	0					
ANR	563797	Identifier	cleanupAfterGlexec		563377	0					
ANR	563798	ArgumentList			563377	1					
ANR	563799	ReturnStatement	return 0 ;	947:3:22279:22287	563377	1	True				
ANR	563800	PrimaryExpression	0		563377	0					
ANR	563801	ReturnStatement	return s_pid ;	952:1:22305:22317	563377	31	True				
ANR	563802	Identifier	s_pid		563377	0					
ANR	563803	ReturnType	int		563377	1					
ANR	563804	Identifier	Starter :: execDCStarter		563377	2					
ANR	563805	ParameterList	"ArgList const & args , Env const * env , int * std_fds , Stream * s"		563377	3					
ANR	563806	Parameter	ArgList const & args	828:24:18775:18793	563377	0	True				
ANR	563807	ParameterType	ArgList const &		563377	0					
ANR	563808	Identifier	args		563377	1					
ANR	563809	Parameter	Env const * env	828:45:18796:18809	563377	1	True				
ANR	563810	ParameterType	Env const *		563377	0					
ANR	563811	Identifier	env		563377	1					
ANR	563812	Parameter	int * std_fds	829:6:18819:18830	563377	2	True				
ANR	563813	ParameterType	int *		563377	0					
ANR	563814	Identifier	std_fds		563377	1					
ANR	563815	Parameter	Stream * s	829:20:18833:18841	563377	3	True				
ANR	563816	ParameterType	Stream *		563377	0					
ANR	563817	Identifier	s		563377	1					
ANR	563818	CFGEntryNode	ENTRY		563377		True				
ANR	563819	CFGExitNode	EXIT		563377		True				
ANR	563820	Symbol	final_args		563377						
ANR	563821	Symbol	daemonCore -> Create_Process		563377						
ANR	563822	Symbol	glexec_env		563377						
ANR	563823	Symbol	glexec_args . GetArg		563377						
ANR	563824	Symbol	& child_job_update_sock		563377						
ANR	563825	Symbol	s_job_update_sock -> connect_socketpair		563377						
ANR	563826	Symbol	& new_env		563377						
ANR	563827	Symbol	NULL		563377						
ANR	563828	Symbol	* env		563377						
ANR	563829	Symbol	this		563377						
ANR	563830	Symbol	args_string . Value		563377						
ANR	563831	Symbol	main_reaper		563377						
ANR	563832	Symbol	TRUE		563377						
ANR	563833	Symbol	param_boolean		563377						
ANR	563834	Symbol	DebugFlags		563377						
ANR	563835	Symbol	D_FULLDEBUG		563377						
ANR	563836	Symbol	pid_snapshot_interval		563377						
ANR	563837	Symbol	* daemonCore		563377						
ANR	563838	Symbol	PRIV_ROOT		563377						
ANR	563839	Symbol	glexec_args		563377						
ANR	563840	Symbol	s_claim -> client ( ) -> proxyFile		563377						
ANR	563841	Symbol	s_claim -> client		563377						
ANR	563842	Symbol	* s_job_update_sock		563377						
ANR	563843	Symbol	s_pid		563377						
ANR	563844	Symbol	& args_string		563377						
ANR	563845	Symbol	final_path		563377						
ANR	563846	Symbol	fi		563377						
ANR	563847	Symbol	* * s_claim		563377						
ANR	563848	Symbol	& glexec_env		563377						
ANR	563849	Symbol	fi . max_snapshot_interval		563377						
ANR	563850	Symbol	glexec_std_fds		563377						
ANR	563851	Symbol	glexec_starter_handle_env		563377						
ANR	563852	Symbol	new_env		563377						
ANR	563853	Symbol	s_reaper_id		563377						
ANR	563854	Symbol	std_fds		563377						
ANR	563855	Symbol	daemonCore -> Register_Socket		563377						
ANR	563856	Symbol	* inherit_list		563377						
ANR	563857	Symbol	daemonCore		563377						
ANR	563858	Symbol	s_path		563377						
ANR	563859	Symbol	s_claim		563377						
ANR	563860	Symbol	& args		563377						
ANR	563861	Symbol	args_string		563377						
ANR	563862	Symbol	reaper_id		563377						
ANR	563863	Symbol	glexec_starter_prepare		563377						
ANR	563864	Symbol	D_ALWAYS		563377						
ANR	563865	Symbol	false		563377						
ANR	563866	Symbol	inherit_list		563377						
ANR	563867	Symbol	env		563377						
ANR	563868	Symbol	& fi		563377						
ANR	563869	Symbol	& glexec_args		563377						
ANR	563870	Symbol	child_job_update_sock		563377						
ANR	563871	Symbol	args		563377						
ANR	563872	Symbol	& Starter :: receiveJobClassAdUpdate		563377						
ANR	563873	Symbol	* s_claim -> client		563377						
ANR	563874	Symbol	s		563377						
ANR	563875	Symbol	* s_claim		563377						
ANR	563876	Symbol	s_job_update_sock		563377						
ANR	563877	Symbol	FALSE		563377						
ANR	563878	Symbol	executeDir		563377						
ANR	563879	Symbol	* final_args		563377						
ANR	563880	Function	Starter :: execOldStarter	956:0:22323:25815							
ANR	563881	FunctionDef	Starter :: execOldStarter ()		563880	0					
ANR	563882	CompoundStatement		958:0:22359:25815	563880	0					
ANR	563883	ReturnStatement	return 0 ;	960:1:22409:22417	563880	0	True				
ANR	563884	PrimaryExpression	0		563880	0					
ANR	563885	ReturnType	int		563880	1					
ANR	563886	Identifier	Starter :: execOldStarter		563880	2					
ANR	563887	ParameterList			563880	3					
ANR	563888	CFGEntryNode	ENTRY		563880		True				
ANR	563889	CFGExitNode	EXIT		563880		True				
ANR	563890	Function	Starter :: cleanupAfterGlexec	1072:0:25837:26326							
ANR	563891	FunctionDef	Starter :: cleanupAfterGlexec ()		563890	0					
ANR	563892	CompoundStatement		1074:0:25872:26326	563890	0					
ANR	563893	IfStatement	if ( s_claim && s_claim -> client ( ) -> proxyFile ( ) != NULL )		563890	0					
ANR	563894	Condition	s_claim && s_claim -> client ( ) -> proxyFile ( ) != NULL	1077:5:25991:26039	563890	0	True				
ANR	563895	AndExpression	s_claim && s_claim -> client ( ) -> proxyFile ( ) != NULL		563890	0		&&			
ANR	563896	Identifier	s_claim		563890	0					
ANR	563897	EqualityExpression	s_claim -> client ( ) -> proxyFile ( ) != NULL		563890	1		!=			
ANR	563898	CallExpression	s_claim -> client ( ) -> proxyFile ( )		563890	0					
ANR	563899	Callee	s_claim -> client ( ) -> proxyFile		563890	0					
ANR	563900	PtrMemberAccess	s_claim -> client ( ) -> proxyFile		563890	0					
ANR	563901	CallExpression	s_claim -> client ( )		563890	0					
ANR	563902	Callee	s_claim -> client		563890	0					
ANR	563903	PtrMemberAccess	s_claim -> client		563890	0					
ANR	563904	Identifier	s_claim		563890	0					
ANR	563905	Identifier	client		563890	1					
ANR	563906	ArgumentList			563890	1					
ANR	563907	Identifier	proxyFile		563890	1					
ANR	563908	ArgumentList			563890	1					
ANR	563909	Identifier	NULL		563890	1					
ANR	563910	CompoundStatement		4:57:170:170	563890	1					
ANR	563911	IfStatement	if ( unlink ( s_claim -> client ( ) -> proxyFile ( ) ) == - 1 )		563890	0					
ANR	563912	Condition	unlink ( s_claim -> client ( ) -> proxyFile ( ) ) == - 1	1078:7:26052:26097	563890	0	True				
ANR	563913	EqualityExpression	unlink ( s_claim -> client ( ) -> proxyFile ( ) ) == - 1		563890	0		==			
ANR	563914	CallExpression	unlink ( s_claim -> client ( ) -> proxyFile ( ) )		563890	0					
ANR	563915	Callee	unlink		563890	0					
ANR	563916	Identifier	unlink		563890	0					
ANR	563917	ArgumentList	s_claim -> client ( ) -> proxyFile ( )		563890	1					
ANR	563918	Argument	s_claim -> client ( ) -> proxyFile ( )		563890	0					
ANR	563919	CallExpression	s_claim -> client ( ) -> proxyFile ( )		563890	0					
ANR	563920	Callee	s_claim -> client ( ) -> proxyFile		563890	0					
ANR	563921	PtrMemberAccess	s_claim -> client ( ) -> proxyFile		563890	0					
ANR	563922	CallExpression	s_claim -> client ( )		563890	0					
ANR	563923	Callee	s_claim -> client		563890	0					
ANR	563924	PtrMemberAccess	s_claim -> client		563890	0					
ANR	563925	Identifier	s_claim		563890	0					
ANR	563926	Identifier	client		563890	1					
ANR	563927	ArgumentList			563890	1					
ANR	563928	Identifier	proxyFile		563890	1					
ANR	563929	ArgumentList			563890	1					
ANR	563930	UnaryOperationExpression	- 1		563890	1					
ANR	563931	UnaryOperator	-		563890	0					
ANR	563932	PrimaryExpression	1		563890	1					
ANR	563933	CompoundStatement		5:55:227:227	563890	1					
ANR	563934	ExpressionStatement	"dprintf ( D_ALWAYS , ""error removing temporary proxy %s: %s (%d)\\n"" , s_claim -> client ( ) -> proxyFile ( ) , strerror ( errno ) , errno )"	1079:3:26105:26276	563890	0	True				
ANR	563935	CallExpression	"dprintf ( D_ALWAYS , ""error removing temporary proxy %s: %s (%d)\\n"" , s_claim -> client ( ) -> proxyFile ( ) , strerror ( errno ) , errno )"		563890	0					
ANR	563936	Callee	dprintf		563890	0					
ANR	563937	Identifier	dprintf		563890	0					
ANR	563938	ArgumentList	D_ALWAYS		563890	1					
ANR	563939	Argument	D_ALWAYS		563890	0					
ANR	563940	Identifier	D_ALWAYS		563890	0					
ANR	563941	Argument	"""error removing temporary proxy %s: %s (%d)\\n"""		563890	1					
ANR	563942	PrimaryExpression	"""error removing temporary proxy %s: %s (%d)\\n"""		563890	0					
ANR	563943	Argument	s_claim -> client ( ) -> proxyFile ( )		563890	2					
ANR	563944	CallExpression	s_claim -> client ( ) -> proxyFile ( )		563890	0					
ANR	563945	Callee	s_claim -> client ( ) -> proxyFile		563890	0					
ANR	563946	PtrMemberAccess	s_claim -> client ( ) -> proxyFile		563890	0					
ANR	563947	CallExpression	s_claim -> client ( )		563890	0					
ANR	563948	Callee	s_claim -> client		563890	0					
ANR	563949	PtrMemberAccess	s_claim -> client		563890	0					
ANR	563950	Identifier	s_claim		563890	0					
ANR	563951	Identifier	client		563890	1					
ANR	563952	ArgumentList			563890	1					
ANR	563953	Identifier	proxyFile		563890	1					
ANR	563954	ArgumentList			563890	1					
ANR	563955	Argument	strerror ( errno )		563890	3					
ANR	563956	CallExpression	strerror ( errno )		563890	0					
ANR	563957	Callee	strerror		563890	0					
ANR	563958	Identifier	strerror		563890	0					
ANR	563959	ArgumentList	errno		563890	1					
ANR	563960	Argument	errno		563890	0					
ANR	563961	Identifier	errno		563890	0					
ANR	563962	Argument	errno		563890	4					
ANR	563963	Identifier	errno		563890	0					
ANR	563964	ExpressionStatement	s_claim -> client ( ) -> setProxyFile ( NULL )	1085:2:26284:26321	563890	1	True				
ANR	563965	CallExpression	s_claim -> client ( ) -> setProxyFile ( NULL )		563890	0					
ANR	563966	Callee	s_claim -> client ( ) -> setProxyFile		563890	0					
ANR	563967	PtrMemberAccess	s_claim -> client ( ) -> setProxyFile		563890	0					
ANR	563968	CallExpression	s_claim -> client ( )		563890	0					
ANR	563969	Callee	s_claim -> client		563890	0					
ANR	563970	PtrMemberAccess	s_claim -> client		563890	0					
ANR	563971	Identifier	s_claim		563890	0					
ANR	563972	Identifier	client		563890	1					
ANR	563973	ArgumentList			563890	1					
ANR	563974	Identifier	setProxyFile		563890	1					
ANR	563975	ArgumentList	NULL		563890	1					
ANR	563976	Argument	NULL		563890	0					
ANR	563977	Identifier	NULL		563890	0					
ANR	563978	ReturnType	void		563890	1					
ANR	563979	Identifier	Starter :: cleanupAfterGlexec		563890	2					
ANR	563980	ParameterList			563890	3					
ANR	563981	CFGEntryNode	ENTRY		563890		True				
ANR	563982	CFGExitNode	EXIT		563890		True				
ANR	563983	Symbol	strerror		563890						
ANR	563984	Symbol	* s_claim -> client		563890						
ANR	563985	Symbol	errno		563890						
ANR	563986	Symbol	NULL		563890						
ANR	563987	Symbol	* s_claim		563890						
ANR	563988	Symbol	unlink		563890						
ANR	563989	Symbol	* * s_claim		563890						
ANR	563990	Symbol	D_ALWAYS		563890						
ANR	563991	Symbol	s_claim -> client		563890						
ANR	563992	Symbol	s_claim -> client ( ) -> proxyFile		563890						
ANR	563993	Symbol	s_claim		563890						
ANR	563994	Function	Starter :: claimType	1090:0:26336:26437							
ANR	563995	FunctionDef	Starter :: claimType ()		563994	0					
ANR	563996	CompoundStatement		1092:0:26367:26437	563994	0					
ANR	563997	IfStatement	if ( ! s_claim )		563994	0					
ANR	563998	Condition	! s_claim	1093:5:26374:26382	563994	0	True				
ANR	563999	UnaryOperationExpression	! s_claim		563994	0					
ANR	564000	UnaryOperator	!		563994	0					
ANR	564001	Identifier	s_claim		563994	1					
ANR	564002	CompoundStatement		2:17:18:18	563994	1					
ANR	564003	ReturnStatement	return CLAIM_NONE ;	1094:2:26390:26407	563994	0	True				
ANR	564004	Identifier	CLAIM_NONE		563994	0					
ANR	564005	ReturnStatement	return s_claim -> type ( ) ;	1096:1:26413:26435	563994	1	True				
ANR	564006	CallExpression	s_claim -> type ( )		563994	0					
ANR	564007	Callee	s_claim -> type		563994	0					
ANR	564008	PtrMemberAccess	s_claim -> type		563994	0					
ANR	564009	Identifier	s_claim		563994	0					
ANR	564010	Identifier	type		563994	1					
ANR	564011	ArgumentList			563994	1					
ANR	564012	ReturnType	ClaimType		563994	1					
ANR	564013	Identifier	Starter :: claimType		563994	2					
ANR	564014	ParameterList			563994	3					
ANR	564015	CFGEntryNode	ENTRY		563994		True				
ANR	564016	CFGExitNode	EXIT		563994		True				
ANR	564017	Symbol	s_claim -> type		563994						
ANR	564018	Symbol	* s_claim		563994						
ANR	564019	Symbol	CLAIM_NONE		563994						
ANR	564020	Symbol	s_claim		563994						
ANR	564021	Function	Starter :: active	1100:0:26441:26491							
ANR	564022	FunctionDef	Starter :: active ()		564021	0					
ANR	564023	CompoundStatement		1102:0:26464:26491	564021	0					
ANR	564024	ReturnStatement	return ( ( s_pid != 0 ) ) ;	1103:1:26467:26489	564021	0	True				
ANR	564025	EqualityExpression	s_pid != 0		564021	0		!=			
ANR	564026	Identifier	s_pid		564021	0					
ANR	564027	PrimaryExpression	0		564021	1					
ANR	564028	ReturnType	bool		564021	1					
ANR	564029	Identifier	Starter :: active		564021	2					
ANR	564030	ParameterList			564021	3					
ANR	564031	CFGEntryNode	ENTRY		564021		True				
ANR	564032	CFGExitNode	EXIT		564021		True				
ANR	564033	Symbol	s_pid		564021						
ANR	564034	Function	Starter :: dprintf	1107:0:26496:26753							
ANR	564035	FunctionDef	"Starter :: dprintf (int flags , const char * fmt)"		564034	0					
ANR	564036	CompoundStatement		1109:0:26553:26753	564034	0					
ANR	564037	IdentifierDeclStatement	va_list args ;	1110:1:26556:26568	564034	0	True				
ANR	564038	IdentifierDecl	args		564034	0					
ANR	564039	IdentifierDeclType	va_list		564034	0					
ANR	564040	Identifier	args		564034	1					
ANR	564041	ExpressionStatement	"va_start ( args , fmt )"	1111:1:26571:26592	564034	1	True				
ANR	564042	CallExpression	"va_start ( args , fmt )"		564034	0					
ANR	564043	Callee	va_start		564034	0					
ANR	564044	Identifier	va_start		564034	0					
ANR	564045	ArgumentList	args		564034	1					
ANR	564046	Argument	args		564034	0					
ANR	564047	Identifier	args		564034	0					
ANR	564048	Argument	fmt		564034	1					
ANR	564049	Identifier	fmt		564034	0					
ANR	564050	IfStatement	if ( s_claim && s_claim -> rip ( ) )		564034	2					
ANR	564051	Condition	s_claim && s_claim -> rip ( )	1112:5:26599:26623	564034	0	True				
ANR	564052	AndExpression	s_claim && s_claim -> rip ( )		564034	0		&&			
ANR	564053	Identifier	s_claim		564034	0					
ANR	564054	CallExpression	s_claim -> rip ( )		564034	1					
ANR	564055	Callee	s_claim -> rip		564034	0					
ANR	564056	PtrMemberAccess	s_claim -> rip		564034	0					
ANR	564057	Identifier	s_claim		564034	0					
ANR	564058	Identifier	rip		564034	1					
ANR	564059	ArgumentList			564034	1					
ANR	564060	CompoundStatement		4:33:73:73	564034	1					
ANR	564061	ExpressionStatement	"s_claim -> rip ( ) -> dprintf_va ( flags , fmt , args )"	1113:2:26631:26677	564034	0	True				
ANR	564062	CallExpression	"s_claim -> rip ( ) -> dprintf_va ( flags , fmt , args )"		564034	0					
ANR	564063	Callee	s_claim -> rip ( ) -> dprintf_va		564034	0					
ANR	564064	PtrMemberAccess	s_claim -> rip ( ) -> dprintf_va		564034	0					
ANR	564065	CallExpression	s_claim -> rip ( )		564034	0					
ANR	564066	Callee	s_claim -> rip		564034	0					
ANR	564067	PtrMemberAccess	s_claim -> rip		564034	0					
ANR	564068	Identifier	s_claim		564034	0					
ANR	564069	Identifier	rip		564034	1					
ANR	564070	ArgumentList			564034	1					
ANR	564071	Identifier	dprintf_va		564034	1					
ANR	564072	ArgumentList	flags		564034	1					
ANR	564073	Argument	flags		564034	0					
ANR	564074	Identifier	flags		564034	0					
ANR	564075	Argument	fmt		564034	1					
ANR	564076	Identifier	fmt		564034	0					
ANR	564077	Argument	args		564034	2					
ANR	564078	Identifier	args		564034	0					
ANR	564079	ElseStatement	else		564034	0					
ANR	564080	CompoundStatement		6:8:133:133	564034	0					
ANR	564081	Statement	::	1115:2:26691:26692	564034	0	True				
ANR	564082	ExpressionStatement	"_condor_dprintf_va ( flags , fmt , args )"	1115:4:26693:26731	564034	1	True				
ANR	564083	CallExpression	"_condor_dprintf_va ( flags , fmt , args )"		564034	0					
ANR	564084	Callee	_condor_dprintf_va		564034	0					
ANR	564085	Identifier	_condor_dprintf_va		564034	0					
ANR	564086	ArgumentList	flags		564034	1					
ANR	564087	Argument	flags		564034	0					
ANR	564088	Identifier	flags		564034	0					
ANR	564089	Argument	fmt		564034	1					
ANR	564090	Identifier	fmt		564034	0					
ANR	564091	Argument	args		564034	2					
ANR	564092	Identifier	args		564034	0					
ANR	564093	ExpressionStatement	va_end ( args )	1117:1:26737:26751	564034	3	True				
ANR	564094	CallExpression	va_end ( args )		564034	0					
ANR	564095	Callee	va_end		564034	0					
ANR	564096	Identifier	va_end		564034	0					
ANR	564097	ArgumentList	args		564034	1					
ANR	564098	Argument	args		564034	0					
ANR	564099	Identifier	args		564034	0					
ANR	564100	ReturnType	void		564034	1					
ANR	564101	Identifier	Starter :: dprintf		564034	2					
ANR	564102	ParameterList	"int flags , const char * fmt"		564034	3					
ANR	564103	Parameter	int flags	1108:18:26519:26527	564034	0	True				
ANR	564104	ParameterType	int		564034	0					
ANR	564105	Identifier	flags		564034	1					
ANR	564106	Parameter	const char * fmt	1108:29:26530:26544	564034	1	True				
ANR	564107	ParameterType	const char *		564034	0					
ANR	564108	Identifier	fmt		564034	1					
ANR	564109	CFGEntryNode	ENTRY		564034		True				
ANR	564110	CFGExitNode	EXIT		564034		True				
ANR	564111	Symbol	args		564034						
ANR	564112	Symbol	* s_claim		564034						
ANR	564113	Symbol	flags		564034						
ANR	564114	Symbol	s_claim -> rip		564034						
ANR	564115	Symbol	fmt		564034						
ANR	564116	Symbol	s_claim		564034						
ANR	564117	Function	Starter :: percentCpuUsage	1121:0:26757:27777							
ANR	564118	FunctionDef	Starter :: percentCpuUsage ()		564117	0					
ANR	564119	CompoundStatement		1123:0:26796:27777	564117	0					
ANR	564120	IfStatement	"if ( daemonCore -> Get_Family_Usage ( s_pid , s_usage , true ) == FALSE )"		564117	0					
ANR	564121	Condition	"daemonCore -> Get_Family_Usage ( s_pid , s_usage , true ) == FALSE"	1124:5:26803:26861	564117	0	True				
ANR	564122	EqualityExpression	"daemonCore -> Get_Family_Usage ( s_pid , s_usage , true ) == FALSE"		564117	0		==			
ANR	564123	CallExpression	"daemonCore -> Get_Family_Usage ( s_pid , s_usage , true )"		564117	0					
ANR	564124	Callee	daemonCore -> Get_Family_Usage		564117	0					
ANR	564125	PtrMemberAccess	daemonCore -> Get_Family_Usage		564117	0					
ANR	564126	Identifier	daemonCore		564117	0					
ANR	564127	Identifier	Get_Family_Usage		564117	1					
ANR	564128	ArgumentList	s_pid		564117	1					
ANR	564129	Argument	s_pid		564117	0					
ANR	564130	Identifier	s_pid		564117	0					
ANR	564131	Argument	s_usage		564117	1					
ANR	564132	Identifier	s_usage		564117	0					
ANR	564133	Argument	true		564117	2					
ANR	564134	Identifier	true		564117	0					
ANR	564135	Identifier	FALSE		564117	1					
ANR	564136	CompoundStatement		2:66:67:67	564117	1					
ANR	564137	Statement	EXCEPT	1125:2:26868:26873	564117	0	True				
ANR	564138	Statement	(	1125:8:26874:26874	564117	1	True				
ANR	564139	Statement	"""Starter::percentCpuUsage(): Fatal error getting process """	1125:10:26876:26933	564117	2	True				
ANR	564140	Statement	"""info for the starter and decendents"""	1126:10:26945:26981	564117	3	True				
ANR	564141	Statement	)	1126:48:26983:26983	564117	4	True				
ANR	564142	ExpressionStatement		1126:49:26984:26984	564117	5	True				
ANR	564143	IfStatement	if ( resmgr )		564117	1					
ANR	564144	Condition	resmgr	1136:6:27417:27422	564117	0	True				
ANR	564145	Identifier	resmgr		564117	0					
ANR	564146	CompoundStatement		14:15:629:629	564117	1					
ANR	564147	ExpressionStatement	"resmgr -> m_vmuniverse_mgr . getUsageForVM ( s_pid , s_usage )"	1137:2:27430:27484	564117	0	True				
ANR	564148	CallExpression	"resmgr -> m_vmuniverse_mgr . getUsageForVM ( s_pid , s_usage )"		564117	0					
ANR	564149	Callee	resmgr -> m_vmuniverse_mgr . getUsageForVM		564117	0					
ANR	564150	MemberAccess	resmgr -> m_vmuniverse_mgr . getUsageForVM		564117	0					
ANR	564151	PtrMemberAccess	resmgr -> m_vmuniverse_mgr		564117	0					
ANR	564152	Identifier	resmgr		564117	0					
ANR	564153	Identifier	m_vmuniverse_mgr		564117	1					
ANR	564154	Identifier	getUsageForVM		564117	1					
ANR	564155	ArgumentList	s_pid		564117	1					
ANR	564156	Argument	s_pid		564117	0					
ANR	564157	Identifier	s_pid		564117	0					
ANR	564158	Argument	s_usage		564117	1					
ANR	564159	Identifier	s_usage		564117	0					
ANR	564160	IfStatement	if ( ( DebugFlags & D_FULLDEBUG ) && ( DebugFlags & D_LOAD ) )		564117	2					
ANR	564161	Condition	( DebugFlags & D_FULLDEBUG ) && ( DebugFlags & D_LOAD )	1140:5:27495:27545	564117	0	True				
ANR	564162	AndExpression	( DebugFlags & D_FULLDEBUG ) && ( DebugFlags & D_LOAD )		564117	0		&&			
ANR	564163	BitAndExpression	DebugFlags & D_FULLDEBUG		564117	0		&			
ANR	564164	Identifier	DebugFlags		564117	0					
ANR	564165	Identifier	D_FULLDEBUG		564117	1					
ANR	564166	BitAndExpression	DebugFlags & D_LOAD		564117	1		&			
ANR	564167	Identifier	DebugFlags		564117	0					
ANR	564168	Identifier	D_LOAD		564117	1					
ANR	564169	CompoundStatement		18:59:752:752	564117	1					
ANR	564170	Statement	dprintf	1141:2:27553:27559	564117	0	True				
ANR	564171	Statement	(	1141:9:27560:27560	564117	1	True				
ANR	564172	Statement	D_FULLDEBUG	1141:11:27562:27572	564117	2	True				
ANR	564173	Statement	","	1141:22:27573:27573	564117	3	True				
ANR	564174	Statement	"""Starter::percentCpuUsage(): Percent CPU usage """	1142:10:27585:27632	564117	4	True				
ANR	564175	Statement	"""for the family of starter with pid %u is: %f\\n"""	1143:10:27644:27691	564117	5	True				
ANR	564176	Statement	","	1143:58:27692:27692	564117	6	True				
ANR	564177	Statement	s_pid	1144:10:27704:27708	564117	7	True				
ANR	564178	Statement	","	1144:15:27709:27709	564117	8	True				
ANR	564179	Statement	s_usage	1145:10:27721:27727	564117	9	True				
ANR	564180	Statement	.	1145:17:27728:27728	564117	10	True				
ANR	564181	Statement	percent_cpu	1145:18:27729:27739	564117	11	True				
ANR	564182	Statement	)	1145:30:27741:27741	564117	12	True				
ANR	564183	ExpressionStatement		1145:31:27742:27742	564117	13	True				
ANR	564184	ReturnStatement	return s_usage . percent_cpu ;	1148:1:27749:27775	564117	3	True				
ANR	564185	MemberAccess	s_usage . percent_cpu		564117	0					
ANR	564186	Identifier	s_usage		564117	0					
ANR	564187	Identifier	percent_cpu		564117	1					
ANR	564188	ReturnType	float		564117	1					
ANR	564189	Identifier	Starter :: percentCpuUsage		564117	2					
ANR	564190	ParameterList			564117	3					
ANR	564191	CFGEntryNode	ENTRY		564117		True				
ANR	564192	CFGExitNode	EXIT		564117		True				
ANR	564193	Symbol	s_usage . percent_cpu		564117						
ANR	564194	Symbol	daemonCore -> Get_Family_Usage		564117						
ANR	564195	Symbol	* resmgr		564117						
ANR	564196	Symbol	D_LOAD		564117						
ANR	564197	Symbol	D_FULLDEBUG		564117						
ANR	564198	Symbol	DebugFlags		564117						
ANR	564199	Symbol	resmgr		564117						
ANR	564200	Symbol	* daemonCore		564117						
ANR	564201	Symbol	daemonCore		564117						
ANR	564202	Symbol	true		564117						
ANR	564203	Symbol	s_usage		564117						
ANR	564204	Symbol	FALSE		564117						
ANR	564205	Symbol	resmgr -> m_vmuniverse_mgr		564117						
ANR	564206	Symbol	s_pid		564117						
ANR	564207	Function	Starter :: imageSize	1151:0:27780:27997							
ANR	564208	FunctionDef	Starter :: imageSize ()		564207	0					
ANR	564209	CompoundStatement		1153:0:27821:27997	564207	0					
ANR	564210	ReturnStatement	return s_usage . total_image_size ;	1157:1:27964:27995	564207	0	True				
ANR	564211	MemberAccess	s_usage . total_image_size		564207	0					
ANR	564212	Identifier	s_usage		564207	0					
ANR	564213	Identifier	total_image_size		564207	1					
ANR	564214	ReturnType	unsigned long		564207	1					
ANR	564215	Identifier	Starter :: imageSize		564207	2					
ANR	564216	ParameterList			564207	3					
ANR	564217	CFGEntryNode	ENTRY		564207		True				
ANR	564218	CFGExitNode	EXIT		564207		True				
ANR	564219	Symbol	s_usage . total_image_size		564207						
ANR	564220	Symbol	s_usage		564207						
ANR	564221	Function	Starter :: printInfo	1161:0:28001:28399							
ANR	564222	FunctionDef	Starter :: printInfo (int debug_level)		564221	0					
ANR	564223	CompoundStatement		1163:0:28044:28399	564221	0					
ANR	564224	ExpressionStatement	"dprintf ( debug_level , ""Info for \\""%s\\"":\\n"" , s_path )"	1164:1:28047:28099	564221	0	True				
ANR	564225	CallExpression	"dprintf ( debug_level , ""Info for \\""%s\\"":\\n"" , s_path )"		564221	0					
ANR	564226	Callee	dprintf		564221	0					
ANR	564227	Identifier	dprintf		564221	0					
ANR	564228	ArgumentList	debug_level		564221	1					
ANR	564229	Argument	debug_level		564221	0					
ANR	564230	Identifier	debug_level		564221	0					
ANR	564231	Argument	"""Info for \\""%s\\"":\\n"""		564221	1					
ANR	564232	PrimaryExpression	"""Info for \\""%s\\"":\\n"""		564221	0					
ANR	564233	Argument	s_path		564221	2					
ANR	564234	Identifier	s_path		564221	0					
ANR	564235	ExpressionStatement	"dprintf ( debug_level | D_NOHEADER , ""IsDaemonCore: %s\\n"" , s_is_dc ? ""True"" : ""False"" )"	1165:1:28102:28192	564221	1	True				
ANR	564236	CallExpression	"dprintf ( debug_level | D_NOHEADER , ""IsDaemonCore: %s\\n"" , s_is_dc ? ""True"" : ""False"" )"		564221	0					
ANR	564237	Callee	dprintf		564221	0					
ANR	564238	Identifier	dprintf		564221	0					
ANR	564239	ArgumentList	debug_level | D_NOHEADER		564221	1					
ANR	564240	Argument	debug_level | D_NOHEADER		564221	0					
ANR	564241	InclusiveOrExpression	debug_level | D_NOHEADER		564221	0		|			
ANR	564242	Identifier	debug_level		564221	0					
ANR	564243	Identifier	D_NOHEADER		564221	1					
ANR	564244	Argument	"""IsDaemonCore: %s\\n"""		564221	1					
ANR	564245	PrimaryExpression	"""IsDaemonCore: %s\\n"""		564221	0					
ANR	564246	Argument	"s_is_dc ? ""True"" : ""False"""		564221	2					
ANR	564247	ConditionalExpression	"s_is_dc ? ""True"" : ""False"""		564221	0					
ANR	564248	Condition	s_is_dc		564221	0					
ANR	564249	Identifier	s_is_dc		564221	0					
ANR	564250	PrimaryExpression	"""True"""		564221	1					
ANR	564251	PrimaryExpression	"""False"""		564221	2					
ANR	564252	IfStatement	if ( ! s_ad )		564221	2					
ANR	564253	Condition	! s_ad	1167:5:28199:28204	564221	0	True				
ANR	564254	UnaryOperationExpression	! s_ad		564221	0					
ANR	564255	UnaryOperator	!		564221	0					
ANR	564256	Identifier	s_ad		564221	1					
ANR	564257	CompoundStatement		5:14:163:163	564221	1					
ANR	564258	ExpressionStatement	"dprintf ( debug_level | D_NOHEADER , ""No ClassAd available!\\n"" )"	1168:2:28212:28280	564221	0	True				
ANR	564259	CallExpression	"dprintf ( debug_level | D_NOHEADER , ""No ClassAd available!\\n"" )"		564221	0					
ANR	564260	Callee	dprintf		564221	0					
ANR	564261	Identifier	dprintf		564221	0					
ANR	564262	ArgumentList	debug_level | D_NOHEADER		564221	1					
ANR	564263	Argument	debug_level | D_NOHEADER		564221	0					
ANR	564264	InclusiveOrExpression	debug_level | D_NOHEADER		564221	0		|			
ANR	564265	Identifier	debug_level		564221	0					
ANR	564266	Identifier	D_NOHEADER		564221	1					
ANR	564267	Argument	"""No ClassAd available!\\n"""		564221	1					
ANR	564268	PrimaryExpression	"""No ClassAd available!\\n"""		564221	0					
ANR	564269	ElseStatement	else		564221	0					
ANR	564270	CompoundStatement		8:8:246:246	564221	0					
ANR	564271	ExpressionStatement	s_ad -> dPrint ( debug_level )	1171:2:28295:28322	564221	0	True				
ANR	564272	CallExpression	s_ad -> dPrint ( debug_level )		564221	0					
ANR	564273	Callee	s_ad -> dPrint		564221	0					
ANR	564274	PtrMemberAccess	s_ad -> dPrint		564221	0					
ANR	564275	Identifier	s_ad		564221	0					
ANR	564276	Identifier	dPrint		564221	1					
ANR	564277	ArgumentList	debug_level		564221	1					
ANR	564278	Argument	debug_level		564221	0					
ANR	564279	Identifier	debug_level		564221	0					
ANR	564280	ExpressionStatement	"dprintf ( debug_level | D_NOHEADER , ""*** End of starter info ***\\n"" )"	1173:1:28328:28396	564221	3	True				
ANR	564281	CallExpression	"dprintf ( debug_level | D_NOHEADER , ""*** End of starter info ***\\n"" )"		564221	0					
ANR	564282	Callee	dprintf		564221	0					
ANR	564283	Identifier	dprintf		564221	0					
ANR	564284	ArgumentList	debug_level | D_NOHEADER		564221	1					
ANR	564285	Argument	debug_level | D_NOHEADER		564221	0					
ANR	564286	InclusiveOrExpression	debug_level | D_NOHEADER		564221	0		|			
ANR	564287	Identifier	debug_level		564221	0					
ANR	564288	Identifier	D_NOHEADER		564221	1					
ANR	564289	Argument	"""*** End of starter info ***\\n"""		564221	1					
ANR	564290	PrimaryExpression	"""*** End of starter info ***\\n"""		564221	0					
ANR	564291	ReturnType	void		564221	1					
ANR	564292	Identifier	Starter :: printInfo		564221	2					
ANR	564293	ParameterList	int debug_level		564221	3					
ANR	564294	Parameter	int debug_level	1162:20:28026:28040	564221	0	True				
ANR	564295	ParameterType	int		564221	0					
ANR	564296	Identifier	debug_level		564221	1					
ANR	564297	CFGEntryNode	ENTRY		564221		True				
ANR	564298	CFGExitNode	EXIT		564221		True				
ANR	564299	Symbol	debug_level		564221						
ANR	564300	Symbol	s_ad		564221						
ANR	564301	Symbol	s_path		564221						
ANR	564302	Symbol	s_is_dc		564221						
ANR	564303	Symbol	D_NOHEADER		564221						
ANR	564304	Function	Starter :: getIpAddr	1177:0:28403:28914							
ANR	564305	FunctionDef	Starter :: getIpAddr ()		564304	0					
ANR	564306	CompoundStatement		1179:0:28442:28914	564304	0					
ANR	564307	IfStatement	if ( ! s_pid )		564304	0					
ANR	564308	Condition	! s_pid	1180:5:28449:28455	564304	0	True				
ANR	564309	UnaryOperationExpression	! s_pid		564304	0					
ANR	564310	UnaryOperator	!		564304	0					
ANR	564311	Identifier	s_pid		564304	1					
ANR	564312	CompoundStatement		2:15:16:16	564304	1					
ANR	564313	ReturnStatement	return NULL ;	1181:2:28463:28474	564304	0	True				
ANR	564314	Identifier	NULL		564304	0					
ANR	564315	IfStatement	if ( ! m_starter_addr . IsEmpty ( ) )		564304	1					
ANR	564316	Condition	! m_starter_addr . IsEmpty ( )	1183:5:28484:28508	564304	0	True				
ANR	564317	UnaryOperationExpression	! m_starter_addr . IsEmpty ( )		564304	0					
ANR	564318	UnaryOperator	!		564304	0					
ANR	564319	CallExpression	m_starter_addr . IsEmpty ( )		564304	1					
ANR	564320	Callee	m_starter_addr . IsEmpty		564304	0					
ANR	564321	MemberAccess	m_starter_addr . IsEmpty		564304	0					
ANR	564322	Identifier	m_starter_addr		564304	0					
ANR	564323	Identifier	IsEmpty		564304	1					
ANR	564324	ArgumentList			564304	1					
ANR	564325	CompoundStatement		5:33:69:69	564304	1					
ANR	564326	ReturnStatement	return m_starter_addr . Value ( ) ;	1184:2:28516:28545	564304	0	True				
ANR	564327	CallExpression	m_starter_addr . Value ( )		564304	0					
ANR	564328	Callee	m_starter_addr . Value		564304	0					
ANR	564329	MemberAccess	m_starter_addr . Value		564304	0					
ANR	564330	Identifier	m_starter_addr		564304	0					
ANR	564331	Identifier	Value		564304	1					
ANR	564332	ArgumentList			564304	1					
ANR	564333	Statement	dprintf	1190:1:28715:28721	564304	2	True				
ANR	564334	Statement	(	1190:8:28722:28722	564304	3	True				
ANR	564335	Statement	D_ALWAYS	1190:9:28723:28730	564304	4	True				
ANR	564336	Statement	","	1190:17:28731:28731	564304	5	True				
ANR	564337	Statement	"""Warning: giving raw address in response to starter address query,"""	1191:3:28736:28802	564304	6	True				
ANR	564338	Statement	"""because update from starter not received yet.\\n"""	1192:3:28807:28855	564304	7	True				
ANR	564339	Statement	)	1192:52:28856:28856	564304	8	True				
ANR	564340	ExpressionStatement		1192:53:28857:28857	564304	9	True				
ANR	564341	ReturnStatement	return daemonCore -> InfoCommandSinfulString ( s_pid ) ;	1194:1:28861:28912	564304	10	True				
ANR	564342	CallExpression	daemonCore -> InfoCommandSinfulString ( s_pid )		564304	0					
ANR	564343	Callee	daemonCore -> InfoCommandSinfulString		564304	0					
ANR	564344	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		564304	0					
ANR	564345	Identifier	daemonCore		564304	0					
ANR	564346	Identifier	InfoCommandSinfulString		564304	1					
ANR	564347	ArgumentList	s_pid		564304	1					
ANR	564348	Argument	s_pid		564304	0					
ANR	564349	Identifier	s_pid		564304	0					
ANR	564350	ReturnType	char const *		564304	1					
ANR	564351	Identifier	Starter :: getIpAddr		564304	2					
ANR	564352	ParameterList			564304	3					
ANR	564353	CFGEntryNode	ENTRY		564304		True				
ANR	564354	CFGExitNode	EXIT		564304		True				
ANR	564355	Symbol	daemonCore -> InfoCommandSinfulString		564304						
ANR	564356	Symbol	NULL		564304						
ANR	564357	Symbol	* daemonCore		564304						
ANR	564358	Symbol	daemonCore		564304						
ANR	564359	Symbol	m_starter_addr . IsEmpty		564304						
ANR	564360	Symbol	m_starter_addr . Value		564304						
ANR	564361	Symbol	m_starter_addr		564304						
ANR	564362	Symbol	s_pid		564304						
ANR	564363	Function	Starter :: killHard	1198:0:28918:29166							
ANR	564364	FunctionDef	Starter :: killHard ()		564363	0					
ANR	564365	CompoundStatement		1200:0:28949:29166	564363	0					
ANR	564366	IfStatement	if ( ! active ( ) )		564363	0					
ANR	564367	Condition	! active ( )	1201:5:28956:28965	564363	0	True				
ANR	564368	UnaryOperationExpression	! active ( )		564363	0					
ANR	564369	UnaryOperator	!		564363	0					
ANR	564370	CallExpression	active ( )		564363	1					
ANR	564371	Callee	active		564363	0					
ANR	564372	Identifier	active		564363	0					
ANR	564373	ArgumentList			564363	1					
ANR	564374	CompoundStatement		2:18:19:19	564363	1					
ANR	564375	ReturnStatement	return true ;	1202:2:28973:28984	564363	0	True				
ANR	564376	Identifier	true		564363	0					
ANR	564377	IfStatement	if ( ! kill ( DC_SIGHARDKILL ) )		564363	1					
ANR	564378	Condition	! kill ( DC_SIGHARDKILL )	1205:5:28996:29017	564363	0	True				
ANR	564379	UnaryOperationExpression	! kill ( DC_SIGHARDKILL )		564363	0					
ANR	564380	UnaryOperator	!		564363	0					
ANR	564381	CallExpression	kill ( DC_SIGHARDKILL )		564363	1					
ANR	564382	Callee	kill		564363	0					
ANR	564383	Identifier	kill		564363	0					
ANR	564384	ArgumentList	DC_SIGHARDKILL		564363	1					
ANR	564385	Argument	DC_SIGHARDKILL		564363	0					
ANR	564386	Identifier	DC_SIGHARDKILL		564363	0					
ANR	564387	CompoundStatement		6:30:71:71	564363	1					
ANR	564388	ExpressionStatement	killpg ( SIGKILL )	1206:2:29025:29042	564363	0	True				
ANR	564389	CallExpression	killpg ( SIGKILL )		564363	0					
ANR	564390	Callee	killpg		564363	0					
ANR	564391	Identifier	killpg		564363	0					
ANR	564392	ArgumentList	SIGKILL		564363	1					
ANR	564393	Argument	SIGKILL		564363	0					
ANR	564394	Identifier	SIGKILL		564363	0					
ANR	564395	ReturnStatement	return false ;	1207:2:29046:29058	564363	1	True				
ANR	564396	Identifier	false		564363	0					
ANR	564397	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""in starter:killHard starting kill timer\\n"" )"	1209:1:29064:29129	564363	2	True				
ANR	564398	CallExpression	"dprintf ( D_FULLDEBUG , ""in starter:killHard starting kill timer\\n"" )"		564363	0					
ANR	564399	Callee	dprintf		564363	0					
ANR	564400	Identifier	dprintf		564363	0					
ANR	564401	ArgumentList	D_FULLDEBUG		564363	1					
ANR	564402	Argument	D_FULLDEBUG		564363	0					
ANR	564403	Identifier	D_FULLDEBUG		564363	0					
ANR	564404	Argument	"""in starter:killHard starting kill timer\\n"""		564363	1					
ANR	564405	PrimaryExpression	"""in starter:killHard starting kill timer\\n"""		564363	0					
ANR	564406	ExpressionStatement	startKillTimer ( )	1210:1:29132:29148	564363	3	True				
ANR	564407	CallExpression	startKillTimer ( )		564363	0					
ANR	564408	Callee	startKillTimer		564363	0					
ANR	564409	Identifier	startKillTimer		564363	0					
ANR	564410	ArgumentList			564363	1					
ANR	564411	ReturnStatement	return true ;	1212:1:29153:29164	564363	4	True				
ANR	564412	Identifier	true		564363	0					
ANR	564413	ReturnType	bool		564363	1					
ANR	564414	Identifier	Starter :: killHard		564363	2					
ANR	564415	ParameterList			564363	3					
ANR	564416	CFGEntryNode	ENTRY		564363		True				
ANR	564417	CFGExitNode	EXIT		564363		True				
ANR	564418	Symbol	DC_SIGHARDKILL		564363						
ANR	564419	Symbol	true		564363						
ANR	564420	Symbol	false		564363						
ANR	564421	Symbol	active		564363						
ANR	564422	Symbol	D_FULLDEBUG		564363						
ANR	564423	Symbol	kill		564363						
ANR	564424	Symbol	SIGKILL		564363						
ANR	564425	Function	Starter :: suspend	1244:0:29968:30123							
ANR	564426	FunctionDef	Starter :: suspend ()		564425	0					
ANR	564427	CompoundStatement		1246:0:29998:30123	564425	0					
ANR	564428	IfStatement	if ( ! active ( ) )		564425	0					
ANR	564429	Condition	! active ( )	1247:5:30005:30014	564425	0	True				
ANR	564430	UnaryOperationExpression	! active ( )		564425	0					
ANR	564431	UnaryOperator	!		564425	0					
ANR	564432	CallExpression	active ( )		564425	1					
ANR	564433	Callee	active		564425	0					
ANR	564434	Identifier	active		564425	0					
ANR	564435	ArgumentList			564425	1					
ANR	564436	CompoundStatement		2:18:19:19	564425	1					
ANR	564437	ReturnStatement	return true ;	1248:2:30022:30033	564425	0	True				
ANR	564438	Identifier	true		564425	0					
ANR	564439	IfStatement	if ( ! kill ( DC_SIGSUSPEND ) )		564425	1					
ANR	564440	Condition	! kill ( DC_SIGSUSPEND )	1250:5:30043:30063	564425	0	True				
ANR	564441	UnaryOperationExpression	! kill ( DC_SIGSUSPEND )		564425	0					
ANR	564442	UnaryOperator	!		564425	0					
ANR	564443	CallExpression	kill ( DC_SIGSUSPEND )		564425	1					
ANR	564444	Callee	kill		564425	0					
ANR	564445	Identifier	kill		564425	0					
ANR	564446	ArgumentList	DC_SIGSUSPEND		564425	1					
ANR	564447	Argument	DC_SIGSUSPEND		564425	0					
ANR	564448	Identifier	DC_SIGSUSPEND		564425	0					
ANR	564449	CompoundStatement		5:29:68:68	564425	1					
ANR	564450	ExpressionStatement	killpg ( SIGKILL )	1251:2:30071:30088	564425	0	True				
ANR	564451	CallExpression	killpg ( SIGKILL )		564425	0					
ANR	564452	Callee	killpg		564425	0					
ANR	564453	Identifier	killpg		564425	0					
ANR	564454	ArgumentList	SIGKILL		564425	1					
ANR	564455	Argument	SIGKILL		564425	0					
ANR	564456	Identifier	SIGKILL		564425	0					
ANR	564457	ReturnStatement	return false ;	1252:2:30092:30104	564425	1	True				
ANR	564458	Identifier	false		564425	0					
ANR	564459	ReturnStatement	return true ;	1254:1:30110:30121	564425	2	True				
ANR	564460	Identifier	true		564425	0					
ANR	564461	ReturnType	bool		564425	1					
ANR	564462	Identifier	Starter :: suspend		564425	2					
ANR	564463	ParameterList			564425	3					
ANR	564464	CFGEntryNode	ENTRY		564425		True				
ANR	564465	CFGExitNode	EXIT		564425		True				
ANR	564466	Symbol	DC_SIGSUSPEND		564425						
ANR	564467	Symbol	true		564425						
ANR	564468	Symbol	false		564425						
ANR	564469	Symbol	active		564425						
ANR	564470	Symbol	kill		564425						
ANR	564471	Symbol	SIGKILL		564425						
ANR	564472	Function	Starter :: resume	1258:0:30127:30282							
ANR	564473	FunctionDef	Starter :: resume ()		564472	0					
ANR	564474	CompoundStatement		1260:0:30156:30282	564472	0					
ANR	564475	IfStatement	if ( ! active ( ) )		564472	0					
ANR	564476	Condition	! active ( )	1261:5:30163:30172	564472	0	True				
ANR	564477	UnaryOperationExpression	! active ( )		564472	0					
ANR	564478	UnaryOperator	!		564472	0					
ANR	564479	CallExpression	active ( )		564472	1					
ANR	564480	Callee	active		564472	0					
ANR	564481	Identifier	active		564472	0					
ANR	564482	ArgumentList			564472	1					
ANR	564483	CompoundStatement		2:18:19:19	564472	1					
ANR	564484	ReturnStatement	return true ;	1262:2:30180:30191	564472	0	True				
ANR	564485	Identifier	true		564472	0					
ANR	564486	IfStatement	if ( ! kill ( DC_SIGCONTINUE ) )		564472	1					
ANR	564487	Condition	! kill ( DC_SIGCONTINUE )	1264:5:30201:30222	564472	0	True				
ANR	564488	UnaryOperationExpression	! kill ( DC_SIGCONTINUE )		564472	0					
ANR	564489	UnaryOperator	!		564472	0					
ANR	564490	CallExpression	kill ( DC_SIGCONTINUE )		564472	1					
ANR	564491	Callee	kill		564472	0					
ANR	564492	Identifier	kill		564472	0					
ANR	564493	ArgumentList	DC_SIGCONTINUE		564472	1					
ANR	564494	Argument	DC_SIGCONTINUE		564472	0					
ANR	564495	Identifier	DC_SIGCONTINUE		564472	0					
ANR	564496	CompoundStatement		5:30:69:69	564472	1					
ANR	564497	ExpressionStatement	killpg ( SIGKILL )	1265:2:30230:30247	564472	0	True				
ANR	564498	CallExpression	killpg ( SIGKILL )		564472	0					
ANR	564499	Callee	killpg		564472	0					
ANR	564500	Identifier	killpg		564472	0					
ANR	564501	ArgumentList	SIGKILL		564472	1					
ANR	564502	Argument	SIGKILL		564472	0					
ANR	564503	Identifier	SIGKILL		564472	0					
ANR	564504	ReturnStatement	return false ;	1266:2:30251:30263	564472	1	True				
ANR	564505	Identifier	false		564472	0					
ANR	564506	ReturnStatement	return true ;	1268:1:30269:30280	564472	2	True				
ANR	564507	Identifier	true		564472	0					
ANR	564508	ReturnType	bool		564472	1					
ANR	564509	Identifier	Starter :: resume		564472	2					
ANR	564510	ParameterList			564472	3					
ANR	564511	CFGEntryNode	ENTRY		564472		True				
ANR	564512	CFGExitNode	EXIT		564472		True				
ANR	564513	Symbol	DC_SIGCONTINUE		564472						
ANR	564514	Symbol	true		564472						
ANR	564515	Symbol	false		564472						
ANR	564516	Symbol	active		564472						
ANR	564517	Symbol	kill		564472						
ANR	564518	Symbol	SIGKILL		564472						
ANR	564519	Function	Starter :: startKillTimer	1272:0:30286:31076							
ANR	564520	FunctionDef	Starter :: startKillTimer ()		564519	0					
ANR	564521	CompoundStatement		1274:0:30322:31076	564519	0					
ANR	564522	IfStatement	if ( s_kill_tid >= 0 )		564519	0					
ANR	564523	Condition	s_kill_tid >= 0	1275:5:30329:30343	564519	0	True				
ANR	564524	RelationalExpression	s_kill_tid >= 0		564519	0		>=			
ANR	564525	Identifier	s_kill_tid		564519	0					
ANR	564526	PrimaryExpression	0		564519	1					
ANR	564527	CompoundStatement		2:23:24:24	564519	1					
ANR	564528	ReturnStatement	return TRUE ;	1277:2:30380:30391	564519	0	True				
ANR	564529	Identifier	TRUE		564519	0					
ANR	564530	IdentifierDeclStatement	int tmp_killing_timeout = killing_timeout ;	1280:1:30399:30440	564519	1	True				
ANR	564531	IdentifierDecl	tmp_killing_timeout = killing_timeout		564519	0					
ANR	564532	IdentifierDeclType	int		564519	0					
ANR	564533	Identifier	tmp_killing_timeout		564519	1					
ANR	564534	AssignmentExpression	tmp_killing_timeout = killing_timeout		564519	2		=			
ANR	564535	Identifier	killing_timeout		564519	0					
ANR	564536	Identifier	killing_timeout		564519	1					
ANR	564537	IfStatement	if ( s_claim && ( s_claim -> universe ( ) == CONDOR_UNIVERSE_VM ) )		564519	2					
ANR	564538	Condition	s_claim && ( s_claim -> universe ( ) == CONDOR_UNIVERSE_VM )	1281:5:30447:30500	564519	0	True				
ANR	564539	AndExpression	s_claim && ( s_claim -> universe ( ) == CONDOR_UNIVERSE_VM )		564519	0		&&			
ANR	564540	Identifier	s_claim		564519	0					
ANR	564541	EqualityExpression	s_claim -> universe ( ) == CONDOR_UNIVERSE_VM		564519	1		==			
ANR	564542	CallExpression	s_claim -> universe ( )		564519	0					
ANR	564543	Callee	s_claim -> universe		564519	0					
ANR	564544	PtrMemberAccess	s_claim -> universe		564519	0					
ANR	564545	Identifier	s_claim		564519	0					
ANR	564546	Identifier	universe		564519	1					
ANR	564547	ArgumentList			564519	1					
ANR	564548	Identifier	CONDOR_UNIVERSE_VM		564519	1					
ANR	564549	CompoundStatement		10:2:238:303	564519	1					
ANR	564550	IdentifierDeclStatement	"int vm_killing_timeout = param_integer ( ""VM_KILLING_TIMEOUT"" , 60 ) ;"	1283:2:30561:30626	564519	0	True				
ANR	564551	IdentifierDecl	"vm_killing_timeout = param_integer ( ""VM_KILLING_TIMEOUT"" , 60 )"		564519	0					
ANR	564552	IdentifierDeclType	int		564519	0					
ANR	564553	Identifier	vm_killing_timeout		564519	1					
ANR	564554	AssignmentExpression	"vm_killing_timeout = param_integer ( ""VM_KILLING_TIMEOUT"" , 60 )"		564519	2		=			
ANR	564555	Identifier	vm_killing_timeout		564519	0					
ANR	564556	CallExpression	"param_integer ( ""VM_KILLING_TIMEOUT"" , 60 )"		564519	1					
ANR	564557	Callee	param_integer		564519	0					
ANR	564558	Identifier	param_integer		564519	0					
ANR	564559	ArgumentList	"""VM_KILLING_TIMEOUT"""		564519	1					
ANR	564560	Argument	"""VM_KILLING_TIMEOUT"""		564519	0					
ANR	564561	PrimaryExpression	"""VM_KILLING_TIMEOUT"""		564519	0					
ANR	564562	Argument	60		564519	1					
ANR	564563	PrimaryExpression	60		564519	0					
ANR	564564	IfStatement	if ( killing_timeout < vm_killing_timeout )		564519	1					
ANR	564565	Condition	killing_timeout < vm_killing_timeout	1284:6:30634:30669	564519	0	True				
ANR	564566	RelationalExpression	killing_timeout < vm_killing_timeout		564519	0		<			
ANR	564567	Identifier	killing_timeout		564519	0					
ANR	564568	Identifier	vm_killing_timeout		564519	1					
ANR	564569	CompoundStatement		11:45:350:350	564519	1					
ANR	564570	ExpressionStatement	tmp_killing_timeout = vm_killing_timeout	1285:3:30678:30718	564519	0	True				
ANR	564571	AssignmentExpression	tmp_killing_timeout = vm_killing_timeout		564519	0		=			
ANR	564572	Identifier	tmp_killing_timeout		564519	0					
ANR	564573	Identifier	vm_killing_timeout		564519	1					
ANR	564574	ExpressionStatement	"s_kill_tid = daemonCore -> Register_Timer ( tmp_killing_timeout , tmp_killing_timeout , ( TimerHandlercpp ) & Starter :: sigkillStarter , ""sigkillStarter"" , this )"	1291:1:30814:30986	564519	3	True				
ANR	564575	AssignmentExpression	"s_kill_tid = daemonCore -> Register_Timer ( tmp_killing_timeout , tmp_killing_timeout , ( TimerHandlercpp ) & Starter :: sigkillStarter , ""sigkillStarter"" , this )"		564519	0		=			
ANR	564576	Identifier	s_kill_tid		564519	0					
ANR	564577	CallExpression	"daemonCore -> Register_Timer ( tmp_killing_timeout , tmp_killing_timeout , ( TimerHandlercpp ) & Starter :: sigkillStarter , ""sigkillStarter"" , this )"		564519	1					
ANR	564578	Callee	daemonCore -> Register_Timer		564519	0					
ANR	564579	PtrMemberAccess	daemonCore -> Register_Timer		564519	0					
ANR	564580	Identifier	daemonCore		564519	0					
ANR	564581	Identifier	Register_Timer		564519	1					
ANR	564582	ArgumentList	tmp_killing_timeout		564519	1					
ANR	564583	Argument	tmp_killing_timeout		564519	0					
ANR	564584	Identifier	tmp_killing_timeout		564519	0					
ANR	564585	Argument	tmp_killing_timeout		564519	1					
ANR	564586	Identifier	tmp_killing_timeout		564519	0					
ANR	564587	Argument	( TimerHandlercpp ) & Starter :: sigkillStarter		564519	2					
ANR	564588	CastExpression	( TimerHandlercpp ) & Starter :: sigkillStarter		564519	0					
ANR	564589	CastTarget	TimerHandlercpp		564519	0					
ANR	564590	UnaryOperationExpression	& Starter :: sigkillStarter		564519	1					
ANR	564591	UnaryOperator	&		564519	0					
ANR	564592	Identifier	Starter :: sigkillStarter		564519	1					
ANR	564593	Argument	"""sigkillStarter"""		564519	3					
ANR	564594	PrimaryExpression	"""sigkillStarter"""		564519	0					
ANR	564595	Argument	this		564519	4					
ANR	564596	Identifier	this		564519	0					
ANR	564597	IfStatement	if ( s_kill_tid < 0 )		564519	4					
ANR	564598	Condition	s_kill_tid < 0	1296:5:30993:31006	564519	0	True				
ANR	564599	RelationalExpression	s_kill_tid < 0		564519	0		<			
ANR	564600	Identifier	s_kill_tid		564519	0					
ANR	564601	PrimaryExpression	0		564519	1					
ANR	564602	CompoundStatement		23:22:687:687	564519	1					
ANR	564603	ExpressionStatement	"EXCEPT ( ""Can't register DaemonCore timer"" )"	1297:2:31014:31057	564519	0	True				
ANR	564604	CallExpression	"EXCEPT ( ""Can't register DaemonCore timer"" )"		564519	0					
ANR	564605	Callee	EXCEPT		564519	0					
ANR	564606	Identifier	EXCEPT		564519	0					
ANR	564607	ArgumentList	"""Can't register DaemonCore timer"""		564519	1					
ANR	564608	Argument	"""Can't register DaemonCore timer"""		564519	0					
ANR	564609	PrimaryExpression	"""Can't register DaemonCore timer"""		564519	0					
ANR	564610	ReturnStatement	return TRUE ;	1299:1:31063:31074	564519	5	True				
ANR	564611	Identifier	TRUE		564519	0					
ANR	564612	ReturnType	int		564519	1					
ANR	564613	Identifier	Starter :: startKillTimer		564519	2					
ANR	564614	ParameterList			564519	3					
ANR	564615	CFGEntryNode	ENTRY		564519		True				
ANR	564616	CFGExitNode	EXIT		564519		True				
ANR	564617	Symbol	vm_killing_timeout		564519						
ANR	564618	Symbol	s_kill_tid		564519						
ANR	564619	Symbol	& Starter :: sigkillStarter		564519						
ANR	564620	Symbol	this		564519						
ANR	564621	Symbol	TRUE		564519						
ANR	564622	Symbol	killing_timeout		564519						
ANR	564623	Symbol	tmp_killing_timeout		564519						
ANR	564624	Symbol	* s_claim		564519						
ANR	564625	Symbol	* daemonCore		564519						
ANR	564626	Symbol	daemonCore -> Register_Timer		564519						
ANR	564627	Symbol	daemonCore		564519						
ANR	564628	Symbol	CONDOR_UNIVERSE_VM		564519						
ANR	564629	Symbol	s_claim -> universe		564519						
ANR	564630	Symbol	param_integer		564519						
ANR	564631	Symbol	s_claim		564519						
ANR	564632	Function	Starter :: startSoftkillTimeout	1303:0:31080:31668							
ANR	564633	FunctionDef	Starter :: startSoftkillTimeout ()		564632	0					
ANR	564634	CompoundStatement		1305:0:31122:31668	564632	0					
ANR	564635	IfStatement	if ( s_softkill_tid >= 0 )		564632	0					
ANR	564636	Condition	s_softkill_tid >= 0	1306:5:31129:31147	564632	0	True				
ANR	564637	RelationalExpression	s_softkill_tid >= 0		564632	0		>=			
ANR	564638	Identifier	s_softkill_tid		564632	0					
ANR	564639	PrimaryExpression	0		564632	1					
ANR	564640	CompoundStatement		2:27:28:28	564632	1					
ANR	564641	ReturnStatement	return TRUE ;	1308:2:31184:31195	564632	0	True				
ANR	564642	Identifier	TRUE		564632	0					
ANR	564643	IdentifierDeclStatement	int softkill_timeout = s_claim ? s_claim -> rip ( ) -> evalMaxVacateTime ( ) : 0 ;	1311:1:31202:31274	564632	1	True				
ANR	564644	IdentifierDecl	softkill_timeout = s_claim ? s_claim -> rip ( ) -> evalMaxVacateTime ( ) : 0		564632	0					
ANR	564645	IdentifierDeclType	int		564632	0					
ANR	564646	Identifier	softkill_timeout		564632	1					
ANR	564647	AssignmentExpression	softkill_timeout = s_claim ? s_claim -> rip ( ) -> evalMaxVacateTime ( ) : 0		564632	2		=			
ANR	564648	Identifier	softkill_timeout		564632	0					
ANR	564649	ConditionalExpression	s_claim ? s_claim -> rip ( ) -> evalMaxVacateTime ( ) : 0		564632	1					
ANR	564650	Condition	s_claim		564632	0					
ANR	564651	Identifier	s_claim		564632	0					
ANR	564652	CallExpression	s_claim -> rip ( ) -> evalMaxVacateTime ( )		564632	1					
ANR	564653	Callee	s_claim -> rip ( ) -> evalMaxVacateTime		564632	0					
ANR	564654	PtrMemberAccess	s_claim -> rip ( ) -> evalMaxVacateTime		564632	0					
ANR	564655	CallExpression	s_claim -> rip ( )		564632	0					
ANR	564656	Callee	s_claim -> rip		564632	0					
ANR	564657	PtrMemberAccess	s_claim -> rip		564632	0					
ANR	564658	Identifier	s_claim		564632	0					
ANR	564659	Identifier	rip		564632	1					
ANR	564660	ArgumentList			564632	1					
ANR	564661	Identifier	evalMaxVacateTime		564632	1					
ANR	564662	ArgumentList			564632	1					
ANR	564663	PrimaryExpression	0		564632	2					
ANR	564664	IfStatement	if ( softkill_timeout < 0 )		564632	2					
ANR	564665	Condition	softkill_timeout < 0	1312:5:31281:31300	564632	0	True				
ANR	564666	RelationalExpression	softkill_timeout < 0		564632	0		<			
ANR	564667	Identifier	softkill_timeout		564632	0					
ANR	564668	PrimaryExpression	0		564632	1					
ANR	564669	CompoundStatement		8:28:181:181	564632	1					
ANR	564670	ExpressionStatement	softkill_timeout = 0	1313:2:31308:31328	564632	0	True				
ANR	564671	AssignmentExpression	softkill_timeout = 0		564632	0		=			
ANR	564672	Identifier	softkill_timeout		564632	0					
ANR	564673	PrimaryExpression	0		564632	1					
ANR	564674	ExpressionStatement	"s_softkill_tid = daemonCore -> Register_Timer ( softkill_timeout , ( TimerHandlercpp ) & Starter :: softkillTimeout , ""softkillTimeout"" , this )"	1316:1:31335:31482	564632	3	True				
ANR	564675	AssignmentExpression	"s_softkill_tid = daemonCore -> Register_Timer ( softkill_timeout , ( TimerHandlercpp ) & Starter :: softkillTimeout , ""softkillTimeout"" , this )"		564632	0		=			
ANR	564676	Identifier	s_softkill_tid		564632	0					
ANR	564677	CallExpression	"daemonCore -> Register_Timer ( softkill_timeout , ( TimerHandlercpp ) & Starter :: softkillTimeout , ""softkillTimeout"" , this )"		564632	1					
ANR	564678	Callee	daemonCore -> Register_Timer		564632	0					
ANR	564679	PtrMemberAccess	daemonCore -> Register_Timer		564632	0					
ANR	564680	Identifier	daemonCore		564632	0					
ANR	564681	Identifier	Register_Timer		564632	1					
ANR	564682	ArgumentList	softkill_timeout		564632	1					
ANR	564683	Argument	softkill_timeout		564632	0					
ANR	564684	Identifier	softkill_timeout		564632	0					
ANR	564685	Argument	( TimerHandlercpp ) & Starter :: softkillTimeout		564632	1					
ANR	564686	CastExpression	( TimerHandlercpp ) & Starter :: softkillTimeout		564632	0					
ANR	564687	CastTarget	TimerHandlercpp		564632	0					
ANR	564688	UnaryOperationExpression	& Starter :: softkillTimeout		564632	1					
ANR	564689	UnaryOperator	&		564632	0					
ANR	564690	Identifier	Starter :: softkillTimeout		564632	1					
ANR	564691	Argument	"""softkillTimeout"""		564632	2					
ANR	564692	PrimaryExpression	"""softkillTimeout"""		564632	0					
ANR	564693	Argument	this		564632	3					
ANR	564694	Identifier	this		564632	0					
ANR	564695	IfStatement	if ( s_softkill_tid < 0 )		564632	4					
ANR	564696	Condition	s_softkill_tid < 0	1320:5:31489:31506	564632	0	True				
ANR	564697	RelationalExpression	s_softkill_tid < 0		564632	0		<			
ANR	564698	Identifier	s_softkill_tid		564632	0					
ANR	564699	PrimaryExpression	0		564632	1					
ANR	564700	CompoundStatement		16:26:387:387	564632	1					
ANR	564701	ExpressionStatement	"EXCEPT ( ""Can't register softkillTimeout timer"" )"	1321:2:31514:31562	564632	0	True				
ANR	564702	CallExpression	"EXCEPT ( ""Can't register softkillTimeout timer"" )"		564632	0					
ANR	564703	Callee	EXCEPT		564632	0					
ANR	564704	Identifier	EXCEPT		564632	0					
ANR	564705	ArgumentList	"""Can't register softkillTimeout timer"""		564632	1					
ANR	564706	Argument	"""Can't register softkillTimeout timer"""		564632	0					
ANR	564707	PrimaryExpression	"""Can't register softkillTimeout timer"""		564632	0					
ANR	564708	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Using max vacate time of %ds for this job.\\n"" , softkill_timeout )"	1323:1:31568:31652	564632	5	True				
ANR	564709	CallExpression	"dprintf ( D_FULLDEBUG , ""Using max vacate time of %ds for this job.\\n"" , softkill_timeout )"		564632	0					
ANR	564710	Callee	dprintf		564632	0					
ANR	564711	Identifier	dprintf		564632	0					
ANR	564712	ArgumentList	D_FULLDEBUG		564632	1					
ANR	564713	Argument	D_FULLDEBUG		564632	0					
ANR	564714	Identifier	D_FULLDEBUG		564632	0					
ANR	564715	Argument	"""Using max vacate time of %ds for this job.\\n"""		564632	1					
ANR	564716	PrimaryExpression	"""Using max vacate time of %ds for this job.\\n"""		564632	0					
ANR	564717	Argument	softkill_timeout		564632	2					
ANR	564718	Identifier	softkill_timeout		564632	0					
ANR	564719	ReturnStatement	return TRUE ;	1324:1:31655:31666	564632	6	True				
ANR	564720	Identifier	TRUE		564632	0					
ANR	564721	ReturnType	int		564632	1					
ANR	564722	Identifier	Starter :: startSoftkillTimeout		564632	2					
ANR	564723	ParameterList			564632	3					
ANR	564724	CFGEntryNode	ENTRY		564632		True				
ANR	564725	CFGExitNode	EXIT		564632		True				
ANR	564726	Symbol	* * s_claim		564632						
ANR	564727	Symbol	softkill_timeout		564632						
ANR	564728	Symbol	this		564632						
ANR	564729	Symbol	TRUE		564632						
ANR	564730	Symbol	& Starter :: softkillTimeout		564632						
ANR	564731	Symbol	D_FULLDEBUG		564632						
ANR	564732	Symbol	* s_claim -> rip		564632						
ANR	564733	Symbol	s_claim -> rip ( ) -> evalMaxVacateTime		564632						
ANR	564734	Symbol	* s_claim		564632						
ANR	564735	Symbol	* daemonCore		564632						
ANR	564736	Symbol	s_softkill_tid		564632						
ANR	564737	Symbol	daemonCore		564632						
ANR	564738	Symbol	daemonCore -> Register_Timer		564632						
ANR	564739	Symbol	s_claim -> rip		564632						
ANR	564740	Symbol	s_claim		564632						
ANR	564741	Function	Starter :: cancelKillTimer	1328:0:31672:32419							
ANR	564742	FunctionDef	Starter :: cancelKillTimer ()		564741	0					
ANR	564743	CompoundStatement		1330:0:31710:32419	564741	0					
ANR	564744	IdentifierDeclStatement	int rval ;	1331:1:31713:31721	564741	0	True				
ANR	564745	IdentifierDecl	rval		564741	0					
ANR	564746	IdentifierDeclType	int		564741	0					
ANR	564747	Identifier	rval		564741	1					
ANR	564748	IfStatement	if ( s_kill_tid != - 1 )		564741	1					
ANR	564749	Condition	s_kill_tid != - 1	1332:5:31728:31743	564741	0	True				
ANR	564750	EqualityExpression	s_kill_tid != - 1		564741	0		!=			
ANR	564751	Identifier	s_kill_tid		564741	0					
ANR	564752	UnaryOperationExpression	- 1		564741	1					
ANR	564753	UnaryOperator	-		564741	0					
ANR	564754	PrimaryExpression	1		564741	1					
ANR	564755	CompoundStatement		3:24:36:36	564741	1					
ANR	564756	ExpressionStatement	rval = daemonCore -> Cancel_Timer ( s_kill_tid )	1333:2:31751:31796	564741	0	True				
ANR	564757	AssignmentExpression	rval = daemonCore -> Cancel_Timer ( s_kill_tid )		564741	0		=			
ANR	564758	Identifier	rval		564741	0					
ANR	564759	CallExpression	daemonCore -> Cancel_Timer ( s_kill_tid )		564741	1					
ANR	564760	Callee	daemonCore -> Cancel_Timer		564741	0					
ANR	564761	PtrMemberAccess	daemonCore -> Cancel_Timer		564741	0					
ANR	564762	Identifier	daemonCore		564741	0					
ANR	564763	Identifier	Cancel_Timer		564741	1					
ANR	564764	ArgumentList	s_kill_tid		564741	1					
ANR	564765	Argument	s_kill_tid		564741	0					
ANR	564766	Identifier	s_kill_tid		564741	0					
ANR	564767	IfStatement	if ( rval < 0 )		564741	1					
ANR	564768	Condition	rval < 0	1334:6:31804:31811	564741	0	True				
ANR	564769	RelationalExpression	rval < 0		564741	0		<			
ANR	564770	Identifier	rval		564741	0					
ANR	564771	PrimaryExpression	0		564741	1					
ANR	564772	CompoundStatement		5:17:104:104	564741	1					
ANR	564773	Statement	dprintf	1335:3:31820:31826	564741	0	True				
ANR	564774	Statement	(	1335:10:31827:31827	564741	1	True				
ANR	564775	Statement	D_ALWAYS	1335:12:31829:31836	564741	2	True				
ANR	564776	Statement	","	1335:20:31837:31837	564741	3	True				
ANR	564777	Statement	"""Failed to cancel hardkill-starter timer (%d): """	1336:6:31846:31893	564741	4	True				
ANR	564778	Statement	"""daemonCore error\\n"""	1337:6:31901:31920	564741	5	True				
ANR	564779	Statement	","	1337:26:31921:31921	564741	6	True				
ANR	564780	Statement	s_kill_tid	1337:28:31923:31932	564741	7	True				
ANR	564781	Statement	)	1337:39:31934:31934	564741	8	True				
ANR	564782	ExpressionStatement		1337:40:31935:31935	564741	9	True				
ANR	564783	ElseStatement	else		564741	0					
ANR	564784	CompoundStatement		9:9:235:235	564741	0					
ANR	564785	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Canceled hardkill-starter timer (%d)\\n"" , s_kill_tid )"	1339:3:31951:32033	564741	0	True				
ANR	564786	CallExpression	"dprintf ( D_FULLDEBUG , ""Canceled hardkill-starter timer (%d)\\n"" , s_kill_tid )"		564741	0					
ANR	564787	Callee	dprintf		564741	0					
ANR	564788	Identifier	dprintf		564741	0					
ANR	564789	ArgumentList	D_FULLDEBUG		564741	1					
ANR	564790	Argument	D_FULLDEBUG		564741	0					
ANR	564791	Identifier	D_FULLDEBUG		564741	0					
ANR	564792	Argument	"""Canceled hardkill-starter timer (%d)\\n"""		564741	1					
ANR	564793	PrimaryExpression	"""Canceled hardkill-starter timer (%d)\\n"""		564741	0					
ANR	564794	Argument	s_kill_tid		564741	2					
ANR	564795	Identifier	s_kill_tid		564741	0					
ANR	564796	ExpressionStatement	s_kill_tid = - 1	1342:2:32041:32056	564741	2	True				
ANR	564797	AssignmentExpression	s_kill_tid = - 1		564741	0		=			
ANR	564798	Identifier	s_kill_tid		564741	0					
ANR	564799	UnaryOperationExpression	- 1		564741	1					
ANR	564800	UnaryOperator	-		564741	0					
ANR	564801	PrimaryExpression	1		564741	1					
ANR	564802	IfStatement	if ( s_softkill_tid != - 1 )		564741	2					
ANR	564803	Condition	s_softkill_tid != - 1	1344:5:32066:32085	564741	0	True				
ANR	564804	EqualityExpression	s_softkill_tid != - 1		564741	0		!=			
ANR	564805	Identifier	s_softkill_tid		564741	0					
ANR	564806	UnaryOperationExpression	- 1		564741	1					
ANR	564807	UnaryOperator	-		564741	0					
ANR	564808	PrimaryExpression	1		564741	1					
ANR	564809	CompoundStatement		15:28:378:378	564741	1					
ANR	564810	ExpressionStatement	rval = daemonCore -> Cancel_Timer ( s_softkill_tid )	1345:2:32093:32142	564741	0	True				
ANR	564811	AssignmentExpression	rval = daemonCore -> Cancel_Timer ( s_softkill_tid )		564741	0		=			
ANR	564812	Identifier	rval		564741	0					
ANR	564813	CallExpression	daemonCore -> Cancel_Timer ( s_softkill_tid )		564741	1					
ANR	564814	Callee	daemonCore -> Cancel_Timer		564741	0					
ANR	564815	PtrMemberAccess	daemonCore -> Cancel_Timer		564741	0					
ANR	564816	Identifier	daemonCore		564741	0					
ANR	564817	Identifier	Cancel_Timer		564741	1					
ANR	564818	ArgumentList	s_softkill_tid		564741	1					
ANR	564819	Argument	s_softkill_tid		564741	0					
ANR	564820	Identifier	s_softkill_tid		564741	0					
ANR	564821	IfStatement	if ( rval < 0 )		564741	1					
ANR	564822	Condition	rval < 0	1346:6:32150:32157	564741	0	True				
ANR	564823	RelationalExpression	rval < 0		564741	0		<			
ANR	564824	Identifier	rval		564741	0					
ANR	564825	PrimaryExpression	0		564741	1					
ANR	564826	CompoundStatement		17:17:450:450	564741	1					
ANR	564827	Statement	dprintf	1347:3:32166:32172	564741	0	True				
ANR	564828	Statement	(	1347:10:32173:32173	564741	1	True				
ANR	564829	Statement	D_ALWAYS	1347:12:32175:32182	564741	2	True				
ANR	564830	Statement	","	1347:20:32183:32183	564741	3	True				
ANR	564831	Statement	"""Failed to cancel softkill-starter timer (%d): """	1348:6:32192:32239	564741	4	True				
ANR	564832	Statement	"""daemonCore error\\n"""	1349:6:32247:32266	564741	5	True				
ANR	564833	Statement	","	1349:26:32267:32267	564741	6	True				
ANR	564834	Statement	s_softkill_tid	1349:28:32269:32282	564741	7	True				
ANR	564835	Statement	)	1349:43:32284:32284	564741	8	True				
ANR	564836	ExpressionStatement		1349:44:32285:32285	564741	9	True				
ANR	564837	ElseStatement	else		564741	0					
ANR	564838	CompoundStatement		21:9:585:585	564741	0					
ANR	564839	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Canceled softkill-starter timer (%d)\\n"" , s_softkill_tid )"	1351:3:32301:32387	564741	0	True				
ANR	564840	CallExpression	"dprintf ( D_FULLDEBUG , ""Canceled softkill-starter timer (%d)\\n"" , s_softkill_tid )"		564741	0					
ANR	564841	Callee	dprintf		564741	0					
ANR	564842	Identifier	dprintf		564741	0					
ANR	564843	ArgumentList	D_FULLDEBUG		564741	1					
ANR	564844	Argument	D_FULLDEBUG		564741	0					
ANR	564845	Identifier	D_FULLDEBUG		564741	0					
ANR	564846	Argument	"""Canceled softkill-starter timer (%d)\\n"""		564741	1					
ANR	564847	PrimaryExpression	"""Canceled softkill-starter timer (%d)\\n"""		564741	0					
ANR	564848	Argument	s_softkill_tid		564741	2					
ANR	564849	Identifier	s_softkill_tid		564741	0					
ANR	564850	ExpressionStatement	s_softkill_tid = - 1	1354:2:32395:32414	564741	2	True				
ANR	564851	AssignmentExpression	s_softkill_tid = - 1		564741	0		=			
ANR	564852	Identifier	s_softkill_tid		564741	0					
ANR	564853	UnaryOperationExpression	- 1		564741	1					
ANR	564854	UnaryOperator	-		564741	0					
ANR	564855	PrimaryExpression	1		564741	1					
ANR	564856	ReturnType	void		564741	1					
ANR	564857	Identifier	Starter :: cancelKillTimer		564741	2					
ANR	564858	ParameterList			564741	3					
ANR	564859	CFGEntryNode	ENTRY		564741		True				
ANR	564860	CFGExitNode	EXIT		564741		True				
ANR	564861	Symbol	s_kill_tid		564741						
ANR	564862	Symbol	* daemonCore		564741						
ANR	564863	Symbol	daemonCore		564741						
ANR	564864	Symbol	s_softkill_tid		564741						
ANR	564865	Symbol	rval		564741						
ANR	564866	Symbol	D_FULLDEBUG		564741						
ANR	564867	Symbol	daemonCore -> Cancel_Timer		564741						
ANR	564868	Function	Starter :: sigkillStarter	1359:0:32423:32925							
ANR	564869	FunctionDef	Starter :: sigkillStarter ()		564868	0					
ANR	564870	CompoundStatement		1361:0:32460:32925	564868	0					
ANR	564871	IfStatement	if ( active ( ) )		564868	0					
ANR	564872	Condition	active ( )	1365:5:32568:32575	564868	0	True				
ANR	564873	CallExpression	active ( )		564868	0					
ANR	564874	Callee	active		564868	0					
ANR	564875	Identifier	active		564868	0					
ANR	564876	ArgumentList			564868	1					
ANR	564877	CompoundStatement		5:16:118:118	564868	1					
ANR	564878	Statement	dprintf	1366:2:32583:32589	564868	0	True				
ANR	564879	Statement	(	1366:9:32590:32590	564868	1	True				
ANR	564880	Statement	D_ALWAYS	1366:11:32592:32599	564868	2	True				
ANR	564881	Statement	","	1366:19:32600:32600	564868	3	True				
ANR	564882	Statement	"""starter (pid %d) is not responding to the """	1366:21:32602:32645	564868	4	True				
ANR	564883	Statement	"""request to hardkill its job.  The startd will now """	1367:5:32652:32703	564868	5	True				
ANR	564884	Statement	"""directly hard kill the starter and all its """	1368:5:32710:32754	564868	6	True				
ANR	564885	Statement	"""decendents.\\n"""	1369:5:32761:32775	564868	7	True				
ANR	564886	Statement	","	1369:20:32776:32776	564868	8	True				
ANR	564887	Statement	s_pid	1369:22:32778:32782	564868	9	True				
ANR	564888	Statement	)	1369:28:32784:32784	564868	10	True				
ANR	564889	ExpressionStatement		1369:29:32785:32785	564868	11	True				
ANR	564890	ExpressionStatement	killkids ( SIGKILL )	1372:2:32832:32851	564868	12	True				
ANR	564891	CallExpression	killkids ( SIGKILL )		564868	0					
ANR	564892	Callee	killkids		564868	0					
ANR	564893	Identifier	killkids		564868	0					
ANR	564894	ArgumentList	SIGKILL		564868	1					
ANR	564895	Argument	SIGKILL		564868	0					
ANR	564896	Identifier	SIGKILL		564868	0					
ANR	564897	ExpressionStatement	killpg ( SIGKILL )	1375:2:32903:32920	564868	13	True				
ANR	564898	CallExpression	killpg ( SIGKILL )		564868	0					
ANR	564899	Callee	killpg		564868	0					
ANR	564900	Identifier	killpg		564868	0					
ANR	564901	ArgumentList	SIGKILL		564868	1					
ANR	564902	Argument	SIGKILL		564868	0					
ANR	564903	Identifier	SIGKILL		564868	0					
ANR	564904	ReturnType	void		564868	1					
ANR	564905	Identifier	Starter :: sigkillStarter		564868	2					
ANR	564906	ParameterList			564868	3					
ANR	564907	CFGEntryNode	ENTRY		564868		True				
ANR	564908	CFGExitNode	EXIT		564868		True				
ANR	564909	Symbol	active		564868						
ANR	564910	Symbol	SIGKILL		564868						
ANR	564911	Function	Starter :: softkillTimeout	1379:0:32928:33121							
ANR	564912	FunctionDef	Starter :: softkillTimeout ()		564911	0					
ANR	564913	CompoundStatement		1381:0:32966:33121	564911	0					
ANR	564914	ExpressionStatement	s_softkill_tid = - 1	1382:1:32969:32988	564911	0	True				
ANR	564915	AssignmentExpression	s_softkill_tid = - 1		564911	0		=			
ANR	564916	Identifier	s_softkill_tid		564911	0					
ANR	564917	UnaryOperationExpression	- 1		564911	1					
ANR	564918	UnaryOperator	-		564911	0					
ANR	564919	PrimaryExpression	1		564911	1					
ANR	564920	IfStatement	if ( active ( ) )		564911	1					
ANR	564921	Condition	active ( )	1383:5:32995:33002	564911	0	True				
ANR	564922	CallExpression	active ( )		564911	0					
ANR	564923	Callee	active		564911	0					
ANR	564924	Identifier	active		564911	0					
ANR	564925	ArgumentList			564911	1					
ANR	564926	CompoundStatement		3:16:39:39	564911	1					
ANR	564927	ExpressionStatement	"dprintf ( D_ALWAYS , ""max vacate time expired.  Escalating to a fast shutdown of the job.\\n"" )"	1384:2:33010:33102	564911	0	True				
ANR	564928	CallExpression	"dprintf ( D_ALWAYS , ""max vacate time expired.  Escalating to a fast shutdown of the job.\\n"" )"		564911	0					
ANR	564929	Callee	dprintf		564911	0					
ANR	564930	Identifier	dprintf		564911	0					
ANR	564931	ArgumentList	D_ALWAYS		564911	1					
ANR	564932	Argument	D_ALWAYS		564911	0					
ANR	564933	Identifier	D_ALWAYS		564911	0					
ANR	564934	Argument	"""max vacate time expired.  Escalating to a fast shutdown of the job.\\n"""		564911	1					
ANR	564935	PrimaryExpression	"""max vacate time expired.  Escalating to a fast shutdown of the job.\\n"""		564911	0					
ANR	564936	ExpressionStatement	killHard ( )	1385:2:33106:33116	564911	1	True				
ANR	564937	CallExpression	killHard ( )		564911	0					
ANR	564938	Callee	killHard		564911	0					
ANR	564939	Identifier	killHard		564911	0					
ANR	564940	ArgumentList			564911	1					
ANR	564941	ReturnType	void		564911	1					
ANR	564942	Identifier	Starter :: softkillTimeout		564911	2					
ANR	564943	ParameterList			564911	3					
ANR	564944	CFGEntryNode	ENTRY		564911		True				
ANR	564945	CFGExitNode	EXIT		564911		True				
ANR	564946	Symbol	s_softkill_tid		564911						
ANR	564947	Symbol	D_ALWAYS		564911						
ANR	564948	Symbol	active		564911						
ANR	564949	Function	Starter :: holdJob	1389:0:33124:33796							
ANR	564950	FunctionDef	"Starter :: holdJob (char const * hold_reason , int hold_code , int hold_subcode)"		564949	0					
ANR	564951	CompoundStatement		1391:0:33202:33796	564949	0					
ANR	564952	IfStatement	if ( ! s_is_dc )		564949	0					
ANR	564953	Condition	! s_is_dc	1392:5:33209:33216	564949	0	True				
ANR	564954	UnaryOperationExpression	! s_is_dc		564949	0					
ANR	564955	UnaryOperator	!		564949	0					
ANR	564956	Identifier	s_is_dc		564949	1					
ANR	564957	CompoundStatement		2:16:17:17	564949	1					
ANR	564958	ReturnStatement	return false ;	1393:2:33224:33236	564949	0	True				
ANR	564959	Identifier	false		564949	0					
ANR	564960	IfStatement	if ( m_hold_job_cb )		564949	1					
ANR	564961	Condition	m_hold_job_cb	1395:5:33301:33313	564949	0	True				
ANR	564962	Identifier	m_hold_job_cb		564949	0					
ANR	564963	CompoundStatement		5:21:114:114	564949	1					
ANR	564964	ExpressionStatement	"dprintf ( D_ALWAYS , ""holdJob() called when operation already in progress (starter pid %d).\\n"" , s_pid )"	1396:2:33321:33419	564949	0	True				
ANR	564965	CallExpression	"dprintf ( D_ALWAYS , ""holdJob() called when operation already in progress (starter pid %d).\\n"" , s_pid )"		564949	0					
ANR	564966	Callee	dprintf		564949	0					
ANR	564967	Identifier	dprintf		564949	0					
ANR	564968	ArgumentList	D_ALWAYS		564949	1					
ANR	564969	Argument	D_ALWAYS		564949	0					
ANR	564970	Identifier	D_ALWAYS		564949	0					
ANR	564971	Argument	"""holdJob() called when operation already in progress (starter pid %d).\\n"""		564949	1					
ANR	564972	PrimaryExpression	"""holdJob() called when operation already in progress (starter pid %d).\\n"""		564949	0					
ANR	564973	Argument	s_pid		564949	2					
ANR	564974	Identifier	s_pid		564949	0					
ANR	564975	ReturnStatement	return true ;	1397:2:33423:33434	564949	1	True				
ANR	564976	Identifier	true		564949	0					
ANR	564977	IdentifierDeclStatement	classy_counted_ptr < DCStarter > starter = new DCStarter ( getIpAddr ( ) ) ;	1400:1:33441:33507	564949	2	True				
ANR	564978	IdentifierDecl	starter = new DCStarter ( getIpAddr ( ) )		564949	0					
ANR	564979	IdentifierDeclType	classy_counted_ptr < DCStarter >		564949	0					
ANR	564980	Identifier	starter		564949	1					
ANR	564981	AssignmentExpression	starter = new DCStarter ( getIpAddr ( ) )		564949	2		=			
ANR	564982	Identifier	starter		564949	0					
ANR	564983	CallExpression	getIpAddr ( )		564949	1					
ANR	564984	Callee	getIpAddr		564949	0					
ANR	564985	Identifier	getIpAddr		564949	0					
ANR	564986	ArgumentList			564949	1					
ANR	564987	IdentifierDeclStatement	"classy_counted_ptr < StarterHoldJobMsg > msg = new StarterHoldJobMsg ( hold_reason , hold_code , hold_subcode ) ;"	1401:1:33510:33611	564949	3	True				
ANR	564988	IdentifierDecl	"msg = new StarterHoldJobMsg ( hold_reason , hold_code , hold_subcode )"		564949	0					
ANR	564989	IdentifierDeclType	classy_counted_ptr < StarterHoldJobMsg >		564949	0					
ANR	564990	Identifier	msg		564949	1					
ANR	564991	AssignmentExpression	"msg = new StarterHoldJobMsg ( hold_reason , hold_code , hold_subcode )"		564949	2		=			
ANR	564992	Identifier	msg		564949	0					
ANR	564993	Expression	"hold_reason , hold_code , hold_subcode"		564949	1					
ANR	564994	Identifier	hold_reason		564949	0					
ANR	564995	Expression	"hold_code , hold_subcode"		564949	1					
ANR	564996	Identifier	hold_code		564949	0					
ANR	564997	Identifier	hold_subcode		564949	1					
ANR	564998	ExpressionStatement	"m_hold_job_cb = new DCMsgCallback ( ( DCMsgCallback :: CppFunction ) & Starter :: holdJobCallback , this )"	1403:1:33615:33711	564949	4	True				
ANR	564999	AssignmentExpression	"m_hold_job_cb = new DCMsgCallback ( ( DCMsgCallback :: CppFunction ) & Starter :: holdJobCallback , this )"		564949	0		=			
ANR	565000	Identifier	m_hold_job_cb		564949	0					
ANR	565001	Expression	"( DCMsgCallback :: CppFunction ) & Starter :: holdJobCallback , this"		564949	1					
ANR	565002	CastExpression	( DCMsgCallback :: CppFunction ) & Starter :: holdJobCallback		564949	0					
ANR	565003	CastTarget	DCMsgCallback :: CppFunction		564949	0					
ANR	565004	UnaryOperationExpression	& Starter :: holdJobCallback		564949	1					
ANR	565005	UnaryOperator	&		564949	0					
ANR	565006	Identifier	Starter :: holdJobCallback		564949	1					
ANR	565007	Identifier	this		564949	1					
ANR	565008	ExpressionStatement	msg -> setCallback ( m_hold_job_cb )	1405:1:33715:33748	564949	5	True				
ANR	565009	CallExpression	msg -> setCallback ( m_hold_job_cb )		564949	0					
ANR	565010	Callee	msg -> setCallback		564949	0					
ANR	565011	PtrMemberAccess	msg -> setCallback		564949	0					
ANR	565012	Identifier	msg		564949	0					
ANR	565013	Identifier	setCallback		564949	1					
ANR	565014	ArgumentList	m_hold_job_cb		564949	1					
ANR	565015	Argument	m_hold_job_cb		564949	0					
ANR	565016	Identifier	m_hold_job_cb		564949	0					
ANR	565017	ExpressionStatement	starter -> sendMsg ( msg . get ( ) )	1407:1:33752:33779	564949	6	True				
ANR	565018	CallExpression	starter -> sendMsg ( msg . get ( ) )		564949	0					
ANR	565019	Callee	starter -> sendMsg		564949	0					
ANR	565020	PtrMemberAccess	starter -> sendMsg		564949	0					
ANR	565021	Identifier	starter		564949	0					
ANR	565022	Identifier	sendMsg		564949	1					
ANR	565023	ArgumentList	msg . get ( )		564949	1					
ANR	565024	Argument	msg . get ( )		564949	0					
ANR	565025	CallExpression	msg . get ( )		564949	0					
ANR	565026	Callee	msg . get		564949	0					
ANR	565027	MemberAccess	msg . get		564949	0					
ANR	565028	Identifier	msg		564949	0					
ANR	565029	Identifier	get		564949	1					
ANR	565030	ArgumentList			564949	1					
ANR	565031	ReturnStatement	return true ;	1409:1:33783:33794	564949	7	True				
ANR	565032	Identifier	true		564949	0					
ANR	565033	ReturnType	bool		564949	1					
ANR	565034	Identifier	Starter :: holdJob		564949	2					
ANR	565035	ParameterList	"char const * hold_reason , int hold_code , int hold_subcode"		564949	3					
ANR	565036	Parameter	char const * hold_reason	1390:17:33146:33168	564949	0	True				
ANR	565037	ParameterType	char const *		564949	0					
ANR	565038	Identifier	hold_reason		564949	1					
ANR	565039	Parameter	int hold_code	1390:41:33170:33182	564949	1	True				
ANR	565040	ParameterType	int		564949	0					
ANR	565041	Identifier	hold_code		564949	1					
ANR	565042	Parameter	int hold_subcode	1390:55:33184:33199	564949	2	True				
ANR	565043	ParameterType	int		564949	0					
ANR	565044	Identifier	hold_subcode		564949	1					
ANR	565045	CFGEntryNode	ENTRY		564949		True				
ANR	565046	CFGExitNode	EXIT		564949		True				
ANR	565047	Symbol	msg		564949						
ANR	565048	Symbol	getIpAddr		564949						
ANR	565049	Symbol	starter		564949						
ANR	565050	Symbol	false		564949						
ANR	565051	Symbol	m_hold_job_cb		564949						
ANR	565052	Symbol	D_ALWAYS		564949						
ANR	565053	Symbol	this		564949						
ANR	565054	Symbol	hold_reason		564949						
ANR	565055	Symbol	s_is_dc		564949						
ANR	565056	Symbol	hold_subcode		564949						
ANR	565057	Symbol	hold_code		564949						
ANR	565058	Symbol	& Starter :: holdJobCallback		564949						
ANR	565059	Symbol	true		564949						
ANR	565060	Symbol	msg . get		564949						
ANR	565061	Symbol	s_pid		564949						
ANR	565062	Function	Starter :: holdJobCallback	1412:0:33799:34109							
ANR	565063	FunctionDef	Starter :: holdJobCallback (DCMsgCallback * cb)		565062	0					
ANR	565064	CompoundStatement		1414:0:33848:34109	565062	0					
ANR	565065	ExpressionStatement	ASSERT ( m_hold_job_cb == cb )	1415:1:33851:33880	565062	0	True				
ANR	565066	CallExpression	ASSERT ( m_hold_job_cb == cb )		565062	0					
ANR	565067	Callee	ASSERT		565062	0					
ANR	565068	Identifier	ASSERT		565062	0					
ANR	565069	ArgumentList	m_hold_job_cb == cb		565062	1					
ANR	565070	Argument	m_hold_job_cb == cb		565062	0					
ANR	565071	EqualityExpression	m_hold_job_cb == cb		565062	0		==			
ANR	565072	Identifier	m_hold_job_cb		565062	0					
ANR	565073	Identifier	cb		565062	1					
ANR	565074	ExpressionStatement	m_hold_job_cb = NULL	1416:1:33883:33903	565062	1	True				
ANR	565075	AssignmentExpression	m_hold_job_cb = NULL		565062	0		=			
ANR	565076	Identifier	m_hold_job_cb		565062	0					
ANR	565077	Identifier	NULL		565062	1					
ANR	565078	ExpressionStatement	ASSERT ( cb -> getMessage ( ) )	1418:1:33907:33933	565062	2	True				
ANR	565079	CallExpression	ASSERT ( cb -> getMessage ( ) )		565062	0					
ANR	565080	Callee	ASSERT		565062	0					
ANR	565081	Identifier	ASSERT		565062	0					
ANR	565082	ArgumentList	cb -> getMessage ( )		565062	1					
ANR	565083	Argument	cb -> getMessage ( )		565062	0					
ANR	565084	CallExpression	cb -> getMessage ( )		565062	0					
ANR	565085	Callee	cb -> getMessage		565062	0					
ANR	565086	PtrMemberAccess	cb -> getMessage		565062	0					
ANR	565087	Identifier	cb		565062	0					
ANR	565088	Identifier	getMessage		565062	1					
ANR	565089	ArgumentList			565062	1					
ANR	565090	IfStatement	if ( cb -> getMessage ( ) -> deliveryStatus ( ) != DCMsg :: DELIVERY_SUCCEEDED )		565062	3					
ANR	565091	Condition	cb -> getMessage ( ) -> deliveryStatus ( ) != DCMsg :: DELIVERY_SUCCEEDED	1419:5:33940:34002	565062	0	True				
ANR	565092	EqualityExpression	cb -> getMessage ( ) -> deliveryStatus ( ) != DCMsg :: DELIVERY_SUCCEEDED		565062	0		!=			
ANR	565093	CallExpression	cb -> getMessage ( ) -> deliveryStatus ( )		565062	0					
ANR	565094	Callee	cb -> getMessage ( ) -> deliveryStatus		565062	0					
ANR	565095	PtrMemberAccess	cb -> getMessage ( ) -> deliveryStatus		565062	0					
ANR	565096	CallExpression	cb -> getMessage ( )		565062	0					
ANR	565097	Callee	cb -> getMessage		565062	0					
ANR	565098	PtrMemberAccess	cb -> getMessage		565062	0					
ANR	565099	Identifier	cb		565062	0					
ANR	565100	Identifier	getMessage		565062	1					
ANR	565101	ArgumentList			565062	1					
ANR	565102	Identifier	deliveryStatus		565062	1					
ANR	565103	ArgumentList			565062	1					
ANR	565104	Identifier	DCMsg :: DELIVERY_SUCCEEDED		565062	1					
ANR	565105	CompoundStatement		6:71:157:157	565062	1					
ANR	565106	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to hold job (starter pid %d), so killing it.\\n"" , s_pid )"	1420:2:34010:34090	565062	0	True				
ANR	565107	CallExpression	"dprintf ( D_ALWAYS , ""Failed to hold job (starter pid %d), so killing it.\\n"" , s_pid )"		565062	0					
ANR	565108	Callee	dprintf		565062	0					
ANR	565109	Identifier	dprintf		565062	0					
ANR	565110	ArgumentList	D_ALWAYS		565062	1					
ANR	565111	Argument	D_ALWAYS		565062	0					
ANR	565112	Identifier	D_ALWAYS		565062	0					
ANR	565113	Argument	"""Failed to hold job (starter pid %d), so killing it.\\n"""		565062	1					
ANR	565114	PrimaryExpression	"""Failed to hold job (starter pid %d), so killing it.\\n"""		565062	0					
ANR	565115	Argument	s_pid		565062	2					
ANR	565116	Identifier	s_pid		565062	0					
ANR	565117	ExpressionStatement	killSoft ( )	1421:2:34094:34104	565062	1	True				
ANR	565118	CallExpression	killSoft ( )		565062	0					
ANR	565119	Callee	killSoft		565062	0					
ANR	565120	Identifier	killSoft		565062	0					
ANR	565121	ArgumentList			565062	1					
ANR	565122	ReturnType	void		565062	1					
ANR	565123	Identifier	Starter :: holdJobCallback		565062	2					
ANR	565124	ParameterList	DCMsgCallback * cb		565062	3					
ANR	565125	Parameter	DCMsgCallback * cb	1413:25:33829:33845	565062	0	True				
ANR	565126	ParameterType	DCMsgCallback *		565062	0					
ANR	565127	Identifier	cb		565062	1					
ANR	565128	CFGEntryNode	ENTRY		565062		True				
ANR	565129	CFGExitNode	EXIT		565062		True				
ANR	565130	Symbol	DCMsg :: DELIVERY_SUCCEEDED		565062						
ANR	565131	Symbol	cb -> getMessage		565062						
ANR	565132	Symbol	NULL		565062						
ANR	565133	Symbol	cb -> getMessage ( ) -> deliveryStatus		565062						
ANR	565134	Symbol	* cb		565062						
ANR	565135	Symbol	m_hold_job_cb		565062						
ANR	565136	Symbol	D_ALWAYS		565062						
ANR	565137	Symbol	* * cb		565062						
ANR	565138	Symbol	* cb -> getMessage		565062						
ANR	565139	Symbol	s_pid		565062						
ANR	565140	Symbol	cb		565062						
