command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	509365	File	data/converged/CVE-2011-4930_htcondor/Queue.t.cpp								
ANR	509366	Function	main	24:0:869:1622							
ANR	509367	FunctionDef	"main (int argc , char * argv [ ])"		509366	0					
ANR	509368	CompoundStatement		24:34:903:1622	509366	0					
ANR	509369	IdentifierDeclStatement	Queue < int > queue ;	25:2:907:923	509366	0	True				
ANR	509370	IdentifierDecl	queue		509366	0					
ANR	509371	IdentifierDeclType	Queue < int >		509366	0					
ANR	509372	Identifier	queue		509366	1					
ANR	509373	IdentifierDeclStatement	int * foo ;	26:2:927:936	509366	1	True				
ANR	509374	IdentifierDecl	* foo		509366	0					
ANR	509375	IdentifierDeclType	int *		509366	0					
ANR	509376	Identifier	foo		509366	1					
ANR	509377	IdentifierDeclStatement	int i = 0 ;	27:2:940:949	509366	2	True				
ANR	509378	IdentifierDecl	i = 0		509366	0					
ANR	509379	IdentifierDeclType	int		509366	0					
ANR	509380	Identifier	i		509366	1					
ANR	509381	AssignmentExpression	i = 0		509366	2		=			
ANR	509382	Identifier	i		509366	0					
ANR	509383	PrimaryExpression	0		509366	1					
ANR	509384	ExpressionStatement	foo = new int ( 0 )	29:1:953:969	509366	3	True				
ANR	509385	AssignmentExpression	foo = new int ( 0 )		509366	0		=			
ANR	509386	Identifier	foo		509366	0					
ANR	509387	PrimaryExpression	0		509366	1					
ANR	509388	ExpressionStatement	queue . enqueue ( * foo )	30:1:972:994	509366	4	True				
ANR	509389	CallExpression	queue . enqueue ( * foo )		509366	0					
ANR	509390	Callee	queue . enqueue		509366	0					
ANR	509391	MemberAccess	queue . enqueue		509366	0					
ANR	509392	Identifier	queue		509366	0					
ANR	509393	Identifier	enqueue		509366	1					
ANR	509394	ArgumentList	* foo		509366	1					
ANR	509395	Argument	* foo		509366	0					
ANR	509396	UnaryOperationExpression	* foo		509366	0					
ANR	509397	UnaryOperator	*		509366	0					
ANR	509398	Identifier	foo		509366	1					
ANR	509399	ExpressionStatement	foo = new int ( 0 )	31:1:997:1013	509366	5	True				
ANR	509400	AssignmentExpression	foo = new int ( 0 )		509366	0		=			
ANR	509401	Identifier	foo		509366	0					
ANR	509402	PrimaryExpression	0		509366	1					
ANR	509403	ExpressionStatement	queue . enqueue ( * foo )	32:1:1016:1038	509366	6	True				
ANR	509404	CallExpression	queue . enqueue ( * foo )		509366	0					
ANR	509405	Callee	queue . enqueue		509366	0					
ANR	509406	MemberAccess	queue . enqueue		509366	0					
ANR	509407	Identifier	queue		509366	0					
ANR	509408	Identifier	enqueue		509366	1					
ANR	509409	ArgumentList	* foo		509366	1					
ANR	509410	Argument	* foo		509366	0					
ANR	509411	UnaryOperationExpression	* foo		509366	0					
ANR	509412	UnaryOperator	*		509366	0					
ANR	509413	Identifier	foo		509366	1					
ANR	509414	ExpressionStatement	foo = new int ( 0 )	33:1:1041:1057	509366	7	True				
ANR	509415	AssignmentExpression	foo = new int ( 0 )		509366	0		=			
ANR	509416	Identifier	foo		509366	0					
ANR	509417	PrimaryExpression	0		509366	1					
ANR	509418	ExpressionStatement	queue . enqueue ( * foo )	34:1:1060:1082	509366	8	True				
ANR	509419	CallExpression	queue . enqueue ( * foo )		509366	0					
ANR	509420	Callee	queue . enqueue		509366	0					
ANR	509421	MemberAccess	queue . enqueue		509366	0					
ANR	509422	Identifier	queue		509366	0					
ANR	509423	Identifier	enqueue		509366	1					
ANR	509424	ArgumentList	* foo		509366	1					
ANR	509425	Argument	* foo		509366	0					
ANR	509426	UnaryOperationExpression	* foo		509366	0					
ANR	509427	UnaryOperator	*		509366	0					
ANR	509428	Identifier	foo		509366	1					
ANR	509429	ExpressionStatement	queue . dequeue ( * foo )	35:1:1085:1107	509366	9	True				
ANR	509430	CallExpression	queue . dequeue ( * foo )		509366	0					
ANR	509431	Callee	queue . dequeue		509366	0					
ANR	509432	MemberAccess	queue . dequeue		509366	0					
ANR	509433	Identifier	queue		509366	0					
ANR	509434	Identifier	dequeue		509366	1					
ANR	509435	ArgumentList	* foo		509366	1					
ANR	509436	Argument	* foo		509366	0					
ANR	509437	UnaryOperationExpression	* foo		509366	0					
ANR	509438	UnaryOperator	*		509366	0					
ANR	509439	Identifier	foo		509366	1					
ANR	509440	ForStatement	for ( i = 0 ; i < 1000 ; i ++ )		509366	10					
ANR	509441	ForInit	i = 0 ;	37:6:1141:1146	509366	0	True				
ANR	509442	AssignmentExpression	i = 0		509366	0		=			
ANR	509443	Identifier	i		509366	0					
ANR	509444	PrimaryExpression	0		509366	1					
ANR	509445	Condition	i < 1000	37:13:1148:1155	509366	1	True				
ANR	509446	RelationalExpression	i < 1000		509366	0		<			
ANR	509447	Identifier	i		509366	0					
ANR	509448	PrimaryExpression	1000		509366	1					
ANR	509449	PostIncDecOperationExpression	i ++	37:23:1158:1160	509366	2	True				
ANR	509450	Identifier	i		509366	0					
ANR	509451	IncDec	++		509366	1					
ANR	509452	CompoundStatement		14:28:259:259	509366	3					
ANR	509453	ExpressionStatement	foo = new int ( i )	38:2:1167:1183	509366	0	True				
ANR	509454	AssignmentExpression	foo = new int ( i )		509366	0		=			
ANR	509455	Identifier	foo		509366	0					
ANR	509456	Identifier	i		509366	1					
ANR	509457	IfStatement	if ( queue . enqueue ( * foo ) )		509366	1					
ANR	509458	Condition	queue . enqueue ( * foo )	39:7:1192:1210	509366	0	True				
ANR	509459	CallExpression	queue . enqueue ( * foo )		509366	0					
ANR	509460	Callee	queue . enqueue		509366	0					
ANR	509461	MemberAccess	queue . enqueue		509366	0					
ANR	509462	Identifier	queue		509366	0					
ANR	509463	Identifier	enqueue		509366	1					
ANR	509464	ArgumentList	* foo		509366	1					
ANR	509465	Argument	* foo		509366	0					
ANR	509466	UnaryOperationExpression	* foo		509366	0					
ANR	509467	UnaryOperator	*		509366	0					
ANR	509468	Identifier	foo		509366	1					
ANR	509469	CompoundStatement		16:29:310:310	509366	1					
ANR	509470	ExpressionStatement	"cout << ""FAILED at "" << * foo << ""\\n"""	40:3:1219:1255	509366	0	True				
ANR	509471	ShiftExpression	"cout << ""FAILED at "" << * foo << ""\\n"""		509366	0		<<			
ANR	509472	Identifier	cout		509366	0					
ANR	509473	ShiftExpression	"""FAILED at "" << * foo << ""\\n"""		509366	1		<<			
ANR	509474	PrimaryExpression	"""FAILED at """		509366	0					
ANR	509475	ShiftExpression	"* foo << ""\\n"""		509366	1		<<			
ANR	509476	UnaryOperationExpression	* foo		509366	0					
ANR	509477	UnaryOperator	*		509366	0					
ANR	509478	Identifier	foo		509366	1					
ANR	509479	PrimaryExpression	"""\\n"""		509366	1					
ANR	509480	ExpressionStatement	queue . dequeue ( * foo )	44:1:1266:1288	509366	11	True				
ANR	509481	CallExpression	queue . dequeue ( * foo )		509366	0					
ANR	509482	Callee	queue . dequeue		509366	0					
ANR	509483	MemberAccess	queue . dequeue		509366	0					
ANR	509484	Identifier	queue		509366	0					
ANR	509485	Identifier	dequeue		509366	1					
ANR	509486	ArgumentList	* foo		509366	1					
ANR	509487	Argument	* foo		509366	0					
ANR	509488	UnaryOperationExpression	* foo		509366	0					
ANR	509489	UnaryOperator	*		509366	0					
ANR	509490	Identifier	foo		509366	1					
ANR	509491	ExpressionStatement	queue . dequeue ( * foo )	45:1:1291:1313	509366	12	True				
ANR	509492	CallExpression	queue . dequeue ( * foo )		509366	0					
ANR	509493	Callee	queue . dequeue		509366	0					
ANR	509494	MemberAccess	queue . dequeue		509366	0					
ANR	509495	Identifier	queue		509366	0					
ANR	509496	Identifier	dequeue		509366	1					
ANR	509497	ArgumentList	* foo		509366	1					
ANR	509498	Argument	* foo		509366	0					
ANR	509499	UnaryOperationExpression	* foo		509366	0					
ANR	509500	UnaryOperator	*		509366	0					
ANR	509501	Identifier	foo		509366	1					
ANR	509502	ForStatement	for ( i = 0 ; i < 1000 ; i ++ )		509366	13					
ANR	509503	ForInit	i = 0 ;	47:6:1343:1348	509366	0	True				
ANR	509504	AssignmentExpression	i = 0		509366	0		=			
ANR	509505	Identifier	i		509366	0					
ANR	509506	PrimaryExpression	0		509366	1					
ANR	509507	Condition	i < 1000	47:13:1350:1357	509366	1	True				
ANR	509508	RelationalExpression	i < 1000		509366	0		<			
ANR	509509	Identifier	i		509366	0					
ANR	509510	PrimaryExpression	1000		509366	1					
ANR	509511	PostIncDecOperationExpression	i ++	47:23:1360:1362	509366	2	True				
ANR	509512	Identifier	i		509366	0					
ANR	509513	IncDec	++		509366	1					
ANR	509514	CompoundStatement		24:28:461:461	509366	3					
ANR	509515	IfStatement	if ( queue . dequeue ( * foo ) )		509366	0					
ANR	509516	Condition	queue . dequeue ( * foo )	48:7:1374:1394	509366	0	True				
ANR	509517	CallExpression	queue . dequeue ( * foo )		509366	0					
ANR	509518	Callee	queue . dequeue		509366	0					
ANR	509519	MemberAccess	queue . dequeue		509366	0					
ANR	509520	Identifier	queue		509366	0					
ANR	509521	Identifier	dequeue		509366	1					
ANR	509522	ArgumentList	* foo		509366	1					
ANR	509523	Argument	* foo		509366	0					
ANR	509524	UnaryOperationExpression	* foo		509366	0					
ANR	509525	UnaryOperator	*		509366	0					
ANR	509526	Identifier	foo		509366	1					
ANR	509527	CompoundStatement		25:31:494:494	509366	1					
ANR	509528	ExpressionStatement	"cout << ""FAILED to dequeue at "" << i << ""\\n"""	49:3:1403:1447	509366	0	True				
ANR	509529	ShiftExpression	"cout << ""FAILED to dequeue at "" << i << ""\\n"""		509366	0		<<			
ANR	509530	Identifier	cout		509366	0					
ANR	509531	ShiftExpression	"""FAILED to dequeue at "" << i << ""\\n"""		509366	1		<<			
ANR	509532	PrimaryExpression	"""FAILED to dequeue at """		509366	0					
ANR	509533	ShiftExpression	"i << ""\\n"""		509366	1		<<			
ANR	509534	Identifier	i		509366	0					
ANR	509535	PrimaryExpression	"""\\n"""		509366	1					
ANR	509536	IfStatement	if ( * foo != i )		509366	1					
ANR	509537	Condition	* foo != i	51:7:1460:1469	509366	0	True				
ANR	509538	EqualityExpression	* foo != i		509366	0		!=			
ANR	509539	UnaryOperationExpression	* foo		509366	0					
ANR	509540	UnaryOperator	*		509366	0					
ANR	509541	Identifier	foo		509366	1					
ANR	509542	Identifier	i		509366	1					
ANR	509543	CompoundStatement		28:19:568:568	509366	1					
ANR	509544	ExpressionStatement	"cout << ""RETURNED WRONG THING!  got "" << * foo << "" instead of "" << i << ""\\n"""	52:3:1477:1545	509366	0	True				
ANR	509545	ShiftExpression	"cout << ""RETURNED WRONG THING!  got "" << * foo << "" instead of "" << i << ""\\n"""		509366	0		<<			
ANR	509546	Identifier	cout		509366	0					
ANR	509547	ShiftExpression	"""RETURNED WRONG THING!  got "" << * foo << "" instead of "" << i << ""\\n"""		509366	1		<<			
ANR	509548	PrimaryExpression	"""RETURNED WRONG THING!  got """		509366	0					
ANR	509549	ShiftExpression	"* foo << "" instead of "" << i << ""\\n"""		509366	1		<<			
ANR	509550	UnaryOperationExpression	* foo		509366	0					
ANR	509551	UnaryOperator	*		509366	0					
ANR	509552	Identifier	foo		509366	1					
ANR	509553	ShiftExpression	""" instead of "" << i << ""\\n"""		509366	1		<<			
ANR	509554	PrimaryExpression	""" instead of """		509366	0					
ANR	509555	ShiftExpression	"i << ""\\n"""		509366	1		<<			
ANR	509556	Identifier	i		509366	0					
ANR	509557	PrimaryExpression	"""\\n"""		509366	1					
ANR	509558	ElseStatement	else		509366	0					
ANR	509559	CompoundStatement		30:9:652:652	509366	0					
ANR	509560	ExpressionStatement	"cout << ""RETURNED right thing.  got "" << * foo << ""\\n"""	54:3:1561:1610	509366	0	True				
ANR	509561	ShiftExpression	"cout << ""RETURNED right thing.  got "" << * foo << ""\\n"""		509366	0		<<			
ANR	509562	Identifier	cout		509366	0					
ANR	509563	ShiftExpression	"""RETURNED right thing.  got "" << * foo << ""\\n"""		509366	1		<<			
ANR	509564	PrimaryExpression	"""RETURNED right thing.  got """		509366	0					
ANR	509565	ShiftExpression	"* foo << ""\\n"""		509366	1		<<			
ANR	509566	UnaryOperationExpression	* foo		509366	0					
ANR	509567	UnaryOperator	*		509366	0					
ANR	509568	Identifier	foo		509366	1					
ANR	509569	PrimaryExpression	"""\\n"""		509366	1					
ANR	509570	ReturnType	int		509366	1					
ANR	509571	Identifier	main		509366	2					
ANR	509572	ParameterList	"int argc , char * argv [ ]"		509366	3					
ANR	509573	Parameter	int argc	24:10:879:886	509366	0	True				
ANR	509574	ParameterType	int		509366	0					
ANR	509575	Identifier	argc		509366	1					
ANR	509576	Parameter	char * argv [ ]	24:20:889:900	509366	1	True				
ANR	509577	ParameterType	char * [ ]		509366	0					
ANR	509578	Identifier	argv		509366	1					
ANR	509579	CFGEntryNode	ENTRY		509366		True				
ANR	509580	CFGExitNode	EXIT		509366		True				
ANR	509581	Symbol	argc		509366						
ANR	509582	Symbol	queue . dequeue		509366						
ANR	509583	Symbol	foo		509366						
ANR	509584	Symbol	i		509366						
ANR	509585	Symbol	queue . enqueue		509366						
ANR	509586	Symbol	argv		509366						
ANR	509587	Symbol	queue		509366						
ANR	509588	Symbol	* foo		509366						
