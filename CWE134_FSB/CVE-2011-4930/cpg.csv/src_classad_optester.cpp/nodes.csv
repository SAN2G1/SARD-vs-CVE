command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2567200	File	data/converged/CVE-2011-4930_htcondor/src_classad_optester.cpp								
ANR	2567201	Function	SetSyscalls	27:11:920:951							
ANR	2567202	FunctionDef	SetSyscalls ()		2567201	0					
ANR	2567203	CompoundStatement		27:30:939:951	2567201	0					
ANR	2567204	ReturnStatement	return 0 ;	27:1:941:949	2567201	0	True				
ANR	2567205	PrimaryExpression	0		2567201	0					
ANR	2567206	ReturnType	int		2567201	1					
ANR	2567207	Identifier	SetSyscalls		2567201	2					
ANR	2567208	ParameterList			2567201	3					
ANR	2567209	CFGEntryNode	ENTRY		2567201		True				
ANR	2567210	CFGExitNode	EXIT		2567201		True				
ANR	2567211	Function	main	29:0:954:3957							
ANR	2567212	FunctionDef	main ()		2567211	0					
ANR	2567213	CompoundStatement		30:0:970:3957	2567211	0					
ANR	2567214	IdentifierDeclStatement	char buffer [ 1024 ] ;	31:4:976:1000	2567211	0	True				
ANR	2567215	IdentifierDecl	buffer [ 1024 ]		2567211	0					
ANR	2567216	IdentifierDeclType	char [ 1024 ]		2567211	0					
ANR	2567217	Identifier	buffer		2567211	1					
ANR	2567218	PrimaryExpression	1024		2567211	2					
ANR	2567219	IdentifierDeclStatement	int buflen = 1024 ;	32:4:1006:1029	2567211	1	True				
ANR	2567220	IdentifierDecl	buflen = 1024		2567211	0					
ANR	2567221	IdentifierDeclType	int		2567211	0					
ANR	2567222	Identifier	buflen		2567211	1					
ANR	2567223	AssignmentExpression	buflen = 1024		2567211	2		=			
ANR	2567224	Identifier	buflen		2567211	0					
ANR	2567225	PrimaryExpression	1024		2567211	1					
ANR	2567226	IdentifierDeclStatement	Source source ;	33:4:1035:1053	2567211	2	True				
ANR	2567227	IdentifierDecl	source		2567211	0					
ANR	2567228	IdentifierDeclType	Source		2567211	0					
ANR	2567229	Identifier	source		2567211	1					
ANR	2567230	IdentifierDeclStatement	Sink sink ;	34:4:1059:1075	2567211	3	True				
ANR	2567231	IdentifierDecl	sink		2567211	0					
ANR	2567232	IdentifierDeclType	Sink		2567211	0					
ANR	2567233	Identifier	sink		2567211	1					
ANR	2567234	IdentifierDeclStatement	LocalContext le ;	35:4:1081:1096	2567211	4	True				
ANR	2567235	IdentifierDecl	le		2567211	0					
ANR	2567236	IdentifierDeclType	LocalContext		2567211	0					
ANR	2567237	Identifier	le		2567211	1					
ANR	2567238	IdentifierDeclStatement	Value val ;	36:4:1102:1117	2567211	5	True				
ANR	2567239	IdentifierDecl	val		2567211	0					
ANR	2567240	IdentifierDeclType	Value		2567211	0					
ANR	2567241	Identifier	val		2567211	1					
ANR	2567242	IdentifierDeclStatement	int op ;	37:1:1120:1128	2567211	6	True				
ANR	2567243	IdentifierDecl	op		2567211	0					
ANR	2567244	IdentifierDeclType	int		2567211	0					
ANR	2567245	Identifier	op		2567211	1					
ANR	2567246	IdentifierDeclStatement	"int type1 , type2 , type3 ;"	38:1:1131:1156	2567211	7	True				
ANR	2567247	IdentifierDecl	type1		2567211	0					
ANR	2567248	IdentifierDeclType	int		2567211	0					
ANR	2567249	Identifier	type1		2567211	1					
ANR	2567250	IdentifierDecl	type2		2567211	1					
ANR	2567251	IdentifierDeclType	int		2567211	0					
ANR	2567252	Identifier	type2		2567211	1					
ANR	2567253	IdentifierDecl	type3		2567211	2					
ANR	2567254	IdentifierDeclType	int		2567211	0					
ANR	2567255	Identifier	type3		2567211	1					
ANR	2567256	IdentifierDeclStatement	ExprTree * tree ;	39:1:1159:1173	2567211	8	True				
ANR	2567257	IdentifierDecl	* tree		2567211	0					
ANR	2567258	IdentifierDeclType	ExprTree *		2567211	0					
ANR	2567259	Identifier	tree		2567211	1					
ANR	2567260	IdentifierDeclStatement	"char * values [ ] = { ""undefined"" , ""error"" , ""10"" , ""3.141"" , ""\\""strVal\\"""" } ;"	40:1:1176:1245	2567211	9	True				
ANR	2567261	IdentifierDecl	"* values [ ] = { ""undefined"" , ""error"" , ""10"" , ""3.141"" , ""\\""strVal\\"""" }"		2567211	0					
ANR	2567262	IdentifierDeclType	char * [ ]		2567211	0					
ANR	2567263	Identifier	values		2567211	1					
ANR	2567264	AssignmentExpression	"* values [ ] = { ""undefined"" , ""error"" , ""10"" , ""3.141"" , ""\\""strVal\\"""" }"		2567211	2		=			
ANR	2567265	Identifier	values		2567211	0					
ANR	2567266	InitializerList	"""undefined"""		2567211	1					
ANR	2567267	PrimaryExpression	"""undefined"""		2567211	0					
ANR	2567268	PrimaryExpression	"""error"""		2567211	1					
ANR	2567269	PrimaryExpression	"""10"""		2567211	2					
ANR	2567270	PrimaryExpression	"""3.141"""		2567211	3					
ANR	2567271	PrimaryExpression	"""\\""strVal\\"""""		2567211	4					
ANR	2567272	ExpressionStatement	sink . setSink ( stdout )	42:1:1249:1270	2567211	10	True				
ANR	2567273	CallExpression	sink . setSink ( stdout )		2567211	0					
ANR	2567274	Callee	sink . setSink		2567211	0					
ANR	2567275	MemberAccess	sink . setSink		2567211	0					
ANR	2567276	Identifier	sink		2567211	0					
ANR	2567277	Identifier	setSink		2567211	1					
ANR	2567278	ArgumentList	stdout		2567211	1					
ANR	2567279	Argument	stdout		2567211	0					
ANR	2567280	Identifier	stdout		2567211	0					
ANR	2567281	ForStatement	for ( op = __FIRST_OP__ ; op <= __LAST_OP__ ; op ++ )		2567211	11					
ANR	2567282	ForInit	op = __FIRST_OP__ ;	45:6:1295:1312	2567211	0	True				
ANR	2567283	AssignmentExpression	op = __FIRST_OP__		2567211	0		=			
ANR	2567284	Identifier	op		2567211	0					
ANR	2567285	Identifier	__FIRST_OP__		2567211	1					
ANR	2567286	Condition	op <= __LAST_OP__	45:25:1314:1330	2567211	1	True				
ANR	2567287	RelationalExpression	op <= __LAST_OP__		2567211	0		<=			
ANR	2567288	Identifier	op		2567211	0					
ANR	2567289	Identifier	__LAST_OP__		2567211	1					
ANR	2567290	PostIncDecOperationExpression	op ++	45:44:1333:1336	2567211	2	True				
ANR	2567291	Identifier	op		2567211	0					
ANR	2567292	IncDec	++		2567211	1					
ANR	2567293	CompoundStatement		17:1:369:369	2567211	3					
ANR	2567294	ExpressionStatement	"printf ( ""\\n\\nTesting operator: %s\\n"" , Operation :: opString [ op ] )"	47:2:1344:1406	2567211	0	True				
ANR	2567295	CallExpression	"printf ( ""\\n\\nTesting operator: %s\\n"" , Operation :: opString [ op ] )"		2567211	0					
ANR	2567296	Callee	printf		2567211	0					
ANR	2567297	Identifier	printf		2567211	0					
ANR	2567298	ArgumentList	"""\\n\\nTesting operator: %s\\n"""		2567211	1					
ANR	2567299	Argument	"""\\n\\nTesting operator: %s\\n"""		2567211	0					
ANR	2567300	PrimaryExpression	"""\\n\\nTesting operator: %s\\n"""		2567211	0					
ANR	2567301	Argument	Operation :: opString [ op ]		2567211	1					
ANR	2567302	ArrayIndexing	Operation :: opString [ op ]		2567211	0					
ANR	2567303	Identifier	Operation :: opString		2567211	0					
ANR	2567304	Identifier	op		2567211	1					
ANR	2567305	IfStatement	if ( op == UNARY_PLUS_OP || op == UNARY_MINUS_OP || op == LOGICAL_NOT_OP || op == BITWISE_NOT_OP )		2567211	1					
ANR	2567306	Condition	op == UNARY_PLUS_OP || op == UNARY_MINUS_OP || op == LOGICAL_NOT_OP || op == BITWISE_NOT_OP	50:6:1443:1546	2567211	0	True				
ANR	2567307	OrExpression	op == UNARY_PLUS_OP || op == UNARY_MINUS_OP || op == LOGICAL_NOT_OP || op == BITWISE_NOT_OP		2567211	0		||			
ANR	2567308	EqualityExpression	op == UNARY_PLUS_OP		2567211	0		==			
ANR	2567309	Identifier	op		2567211	0					
ANR	2567310	Identifier	UNARY_PLUS_OP		2567211	1					
ANR	2567311	OrExpression	op == UNARY_MINUS_OP || op == LOGICAL_NOT_OP || op == BITWISE_NOT_OP		2567211	1		||			
ANR	2567312	EqualityExpression	op == UNARY_MINUS_OP		2567211	0		==			
ANR	2567313	Identifier	op		2567211	0					
ANR	2567314	Identifier	UNARY_MINUS_OP		2567211	1					
ANR	2567315	OrExpression	op == LOGICAL_NOT_OP || op == BITWISE_NOT_OP		2567211	1		||			
ANR	2567316	EqualityExpression	op == LOGICAL_NOT_OP		2567211	0		==			
ANR	2567317	Identifier	op		2567211	0					
ANR	2567318	Identifier	LOGICAL_NOT_OP		2567211	1					
ANR	2567319	EqualityExpression	op == BITWISE_NOT_OP		2567211	1		==			
ANR	2567320	Identifier	op		2567211	0					
ANR	2567321	Identifier	BITWISE_NOT_OP		2567211	1					
ANR	2567322	CompoundStatement		25:2:580:580	2567211	1					
ANR	2567323	ForStatement	for ( type1 = 0 ; type1 < 5 ; type1 ++ )		2567211	0					
ANR	2567324	ForInit	type1 = 0 ;	56:8:1593:1602	2567211	0	True				
ANR	2567325	AssignmentExpression	type1 = 0		2567211	0		=			
ANR	2567326	Identifier	type1		2567211	0					
ANR	2567327	PrimaryExpression	0		2567211	1					
ANR	2567328	Condition	type1 < 5	56:19:1604:1612	2567211	1	True				
ANR	2567329	RelationalExpression	type1 < 5		2567211	0		<			
ANR	2567330	Identifier	type1		2567211	0					
ANR	2567331	PrimaryExpression	5		2567211	1					
ANR	2567332	PostIncDecOperationExpression	type1 ++	56:30:1615:1621	2567211	2	True				
ANR	2567333	Identifier	type1		2567211	0					
ANR	2567334	IncDec	++		2567211	1					
ANR	2567335	CompoundStatement		28:3:656:656	2567211	3					
ANR	2567336	ExpressionStatement	"sprintf ( buffer , ""%s %s"" , Operation :: opString [ op ] , values [ type1 ] )"	58:4:1633:1696	2567211	0	True				
ANR	2567337	CallExpression	"sprintf ( buffer , ""%s %s"" , Operation :: opString [ op ] , values [ type1 ] )"		2567211	0					
ANR	2567338	Callee	sprintf		2567211	0					
ANR	2567339	Identifier	sprintf		2567211	0					
ANR	2567340	ArgumentList	buffer		2567211	1					
ANR	2567341	Argument	buffer		2567211	0					
ANR	2567342	Identifier	buffer		2567211	0					
ANR	2567343	Argument	"""%s %s"""		2567211	1					
ANR	2567344	PrimaryExpression	"""%s %s"""		2567211	0					
ANR	2567345	Argument	Operation :: opString [ op ]		2567211	2					
ANR	2567346	ArrayIndexing	Operation :: opString [ op ]		2567211	0					
ANR	2567347	Identifier	Operation :: opString		2567211	0					
ANR	2567348	Identifier	op		2567211	1					
ANR	2567349	Argument	values [ type1 ]		2567211	3					
ANR	2567350	ArrayIndexing	values [ type1 ]		2567211	0					
ANR	2567351	Identifier	values		2567211	0					
ANR	2567352	Identifier	type1		2567211	1					
ANR	2567353	ExpressionStatement	"printf ( ""%s => "" , buffer )"	59:4:1702:1727	2567211	1	True				
ANR	2567354	CallExpression	"printf ( ""%s => "" , buffer )"		2567211	0					
ANR	2567355	Callee	printf		2567211	0					
ANR	2567356	Identifier	printf		2567211	0					
ANR	2567357	ArgumentList	"""%s => """		2567211	1					
ANR	2567358	Argument	"""%s => """		2567211	0					
ANR	2567359	PrimaryExpression	"""%s => """		2567211	0					
ANR	2567360	Argument	buffer		2567211	1					
ANR	2567361	Identifier	buffer		2567211	0					
ANR	2567362	ExpressionStatement	"source . setSource ( buffer , buflen )"	60:4:1733:1766	2567211	2	True				
ANR	2567363	CallExpression	"source . setSource ( buffer , buflen )"		2567211	0					
ANR	2567364	Callee	source . setSource		2567211	0					
ANR	2567365	MemberAccess	source . setSource		2567211	0					
ANR	2567366	Identifier	source		2567211	0					
ANR	2567367	Identifier	setSource		2567211	1					
ANR	2567368	ArgumentList	buffer		2567211	1					
ANR	2567369	Argument	buffer		2567211	0					
ANR	2567370	Identifier	buffer		2567211	0					
ANR	2567371	Argument	buflen		2567211	1					
ANR	2567372	Identifier	buflen		2567211	0					
ANR	2567373	ExpressionStatement	tree = ExprTree :: fromSource ( source )	61:4:1772:1808	2567211	3	True				
ANR	2567374	AssignmentExpression	tree = ExprTree :: fromSource ( source )		2567211	0		=			
ANR	2567375	Identifier	tree		2567211	0					
ANR	2567376	CallExpression	ExprTree :: fromSource ( source )		2567211	1					
ANR	2567377	Callee	ExprTree :: fromSource		2567211	0					
ANR	2567378	Identifier	ExprTree :: fromSource		2567211	0					
ANR	2567379	ArgumentList	source		2567211	1					
ANR	2567380	Argument	source		2567211	0					
ANR	2567381	Identifier	source		2567211	0					
ANR	2567382	IfStatement	if ( ! tree )		2567211	4					
ANR	2567383	Condition	! tree	62:8:1818:1822	2567211	0	True				
ANR	2567384	UnaryOperationExpression	! tree		2567211	0					
ANR	2567385	UnaryOperator	!		2567211	0					
ANR	2567386	Identifier	tree		2567211	1					
ANR	2567387	CompoundStatement		34:4:859:859	2567211	1					
ANR	2567388	ExpressionStatement	"printf ( ""parse error!\\n"" )"	64:5:1837:1862	2567211	0	True				
ANR	2567389	CallExpression	"printf ( ""parse error!\\n"" )"		2567211	0					
ANR	2567390	Callee	printf		2567211	0					
ANR	2567391	Identifier	printf		2567211	0					
ANR	2567392	ArgumentList	"""parse error!\\n"""		2567211	1					
ANR	2567393	Argument	"""parse error!\\n"""		2567211	0					
ANR	2567394	PrimaryExpression	"""parse error!\\n"""		2567211	0					
ANR	2567395	ContinueStatement	continue ;	65:5:1869:1877	2567211	1	True				
ANR	2567396	ExpressionStatement	"le . evaluate ( tree , val )"	67:4:1889:1912	2567211	5	True				
ANR	2567397	CallExpression	"le . evaluate ( tree , val )"		2567211	0					
ANR	2567398	Callee	le . evaluate		2567211	0					
ANR	2567399	MemberAccess	le . evaluate		2567211	0					
ANR	2567400	Identifier	le		2567211	0					
ANR	2567401	Identifier	evaluate		2567211	1					
ANR	2567402	ArgumentList	tree		2567211	1					
ANR	2567403	Argument	tree		2567211	0					
ANR	2567404	Identifier	tree		2567211	0					
ANR	2567405	Argument	val		2567211	1					
ANR	2567406	Identifier	val		2567211	0					
ANR	2567407	ExpressionStatement	val . toSink ( sink )	68:4:1918:1935	2567211	6	True				
ANR	2567408	CallExpression	val . toSink ( sink )		2567211	0					
ANR	2567409	Callee	val . toSink		2567211	0					
ANR	2567410	MemberAccess	val . toSink		2567211	0					
ANR	2567411	Identifier	val		2567211	0					
ANR	2567412	Identifier	toSink		2567211	1					
ANR	2567413	ArgumentList	sink		2567211	1					
ANR	2567414	Argument	sink		2567211	0					
ANR	2567415	Identifier	sink		2567211	0					
ANR	2567416	ExpressionStatement	sink . flushSink ( )	69:4:1941:1957	2567211	7	True				
ANR	2567417	CallExpression	sink . flushSink ( )		2567211	0					
ANR	2567418	Callee	sink . flushSink		2567211	0					
ANR	2567419	MemberAccess	sink . flushSink		2567211	0					
ANR	2567420	Identifier	sink		2567211	0					
ANR	2567421	Identifier	flushSink		2567211	1					
ANR	2567422	ArgumentList			2567211	1					
ANR	2567423	Statement	delete	70:4:1963:1968	2567211	8	True				
ANR	2567424	ExpressionStatement	tree	70:11:1970:1974	2567211	9	True				
ANR	2567425	Identifier	tree		2567211	0					
ANR	2567426	ExpressionStatement	"printf ( ""\\n"" )"	71:4:1980:1993	2567211	10	True				
ANR	2567427	CallExpression	"printf ( ""\\n"" )"		2567211	0					
ANR	2567428	Callee	printf		2567211	0					
ANR	2567429	Identifier	printf		2567211	0					
ANR	2567430	ArgumentList	"""\\n"""		2567211	1					
ANR	2567431	Argument	"""\\n"""		2567211	0					
ANR	2567432	PrimaryExpression	"""\\n"""		2567211	0					
ANR	2567433	ElseStatement	else		2567211	0					
ANR	2567434	IfStatement	if ( op == PARENTHESES_OP )		2567211	0					
ANR	2567435	Condition	op == PARENTHESES_OP	75:6:2017:2036	2567211	0	True				
ANR	2567436	EqualityExpression	op == PARENTHESES_OP		2567211	0		==			
ANR	2567437	Identifier	op		2567211	0					
ANR	2567438	Identifier	PARENTHESES_OP		2567211	1					
ANR	2567439	CompoundStatement		47:2:1070:1070	2567211	1					
ANR	2567440	ForStatement	for ( type1 = 0 ; type1 < 5 ; type1 ++ )		2567211	0					
ANR	2567441	ForInit	type1 = 0 ;	78:8:2079:2088	2567211	0	True				
ANR	2567442	AssignmentExpression	type1 = 0		2567211	0		=			
ANR	2567443	Identifier	type1		2567211	0					
ANR	2567444	PrimaryExpression	0		2567211	1					
ANR	2567445	Condition	type1 < 5	78:19:2090:2098	2567211	1	True				
ANR	2567446	RelationalExpression	type1 < 5		2567211	0		<			
ANR	2567447	Identifier	type1		2567211	0					
ANR	2567448	PrimaryExpression	5		2567211	1					
ANR	2567449	PostIncDecOperationExpression	type1 ++	78:30:2101:2107	2567211	2	True				
ANR	2567450	Identifier	type1		2567211	0					
ANR	2567451	IncDec	++		2567211	1					
ANR	2567452	CompoundStatement		50:12:1151:1151	2567211	3					
ANR	2567453	ExpressionStatement	"sprintf ( buffer , ""( %s )"" , values [ type1 ] )"	80:16:2140:2180	2567211	0	True				
ANR	2567454	CallExpression	"sprintf ( buffer , ""( %s )"" , values [ type1 ] )"		2567211	0					
ANR	2567455	Callee	sprintf		2567211	0					
ANR	2567456	Identifier	sprintf		2567211	0					
ANR	2567457	ArgumentList	buffer		2567211	1					
ANR	2567458	Argument	buffer		2567211	0					
ANR	2567459	Identifier	buffer		2567211	0					
ANR	2567460	Argument	"""( %s )"""		2567211	1					
ANR	2567461	PrimaryExpression	"""( %s )"""		2567211	0					
ANR	2567462	Argument	values [ type1 ]		2567211	2					
ANR	2567463	ArrayIndexing	values [ type1 ]		2567211	0					
ANR	2567464	Identifier	values		2567211	0					
ANR	2567465	Identifier	type1		2567211	1					
ANR	2567466	ExpressionStatement	"printf ( ""%s => "" , buffer )"	81:16:2198:2223	2567211	1	True				
ANR	2567467	CallExpression	"printf ( ""%s => "" , buffer )"		2567211	0					
ANR	2567468	Callee	printf		2567211	0					
ANR	2567469	Identifier	printf		2567211	0					
ANR	2567470	ArgumentList	"""%s => """		2567211	1					
ANR	2567471	Argument	"""%s => """		2567211	0					
ANR	2567472	PrimaryExpression	"""%s => """		2567211	0					
ANR	2567473	Argument	buffer		2567211	1					
ANR	2567474	Identifier	buffer		2567211	0					
ANR	2567475	ExpressionStatement	"source . setSource ( buffer , buflen )"	82:16:2241:2274	2567211	2	True				
ANR	2567476	CallExpression	"source . setSource ( buffer , buflen )"		2567211	0					
ANR	2567477	Callee	source . setSource		2567211	0					
ANR	2567478	MemberAccess	source . setSource		2567211	0					
ANR	2567479	Identifier	source		2567211	0					
ANR	2567480	Identifier	setSource		2567211	1					
ANR	2567481	ArgumentList	buffer		2567211	1					
ANR	2567482	Argument	buffer		2567211	0					
ANR	2567483	Identifier	buffer		2567211	0					
ANR	2567484	Argument	buflen		2567211	1					
ANR	2567485	Identifier	buflen		2567211	0					
ANR	2567486	ExpressionStatement	tree = ExprTree :: fromSource ( source )	83:16:2292:2328	2567211	3	True				
ANR	2567487	AssignmentExpression	tree = ExprTree :: fromSource ( source )		2567211	0		=			
ANR	2567488	Identifier	tree		2567211	0					
ANR	2567489	CallExpression	ExprTree :: fromSource ( source )		2567211	1					
ANR	2567490	Callee	ExprTree :: fromSource		2567211	0					
ANR	2567491	Identifier	ExprTree :: fromSource		2567211	0					
ANR	2567492	ArgumentList	source		2567211	1					
ANR	2567493	Argument	source		2567211	0					
ANR	2567494	Identifier	source		2567211	0					
ANR	2567495	IfStatement	if ( ! tree )		2567211	4					
ANR	2567496	Condition	! tree	84:20:2353:2357	2567211	0	True				
ANR	2567497	UnaryOperationExpression	! tree		2567211	0					
ANR	2567498	UnaryOperator	!		2567211	0					
ANR	2567499	Identifier	tree		2567211	1					
ANR	2567500	CompoundStatement		56:16:1407:1407	2567211	1					
ANR	2567501	ExpressionStatement	"printf ( ""parse error!\\n"" )"	86:20:2400:2425	2567211	0	True				
ANR	2567502	CallExpression	"printf ( ""parse error!\\n"" )"		2567211	0					
ANR	2567503	Callee	printf		2567211	0					
ANR	2567504	Identifier	printf		2567211	0					
ANR	2567505	ArgumentList	"""parse error!\\n"""		2567211	1					
ANR	2567506	Argument	"""parse error!\\n"""		2567211	0					
ANR	2567507	PrimaryExpression	"""parse error!\\n"""		2567211	0					
ANR	2567508	ContinueStatement	continue ;	87:20:2455:2463	2567211	1	True				
ANR	2567509	ExpressionStatement	"le . evaluate ( tree , val )"	89:16:2499:2522	2567211	5	True				
ANR	2567510	CallExpression	"le . evaluate ( tree , val )"		2567211	0					
ANR	2567511	Callee	le . evaluate		2567211	0					
ANR	2567512	MemberAccess	le . evaluate		2567211	0					
ANR	2567513	Identifier	le		2567211	0					
ANR	2567514	Identifier	evaluate		2567211	1					
ANR	2567515	ArgumentList	tree		2567211	1					
ANR	2567516	Argument	tree		2567211	0					
ANR	2567517	Identifier	tree		2567211	0					
ANR	2567518	Argument	val		2567211	1					
ANR	2567519	Identifier	val		2567211	0					
ANR	2567520	ExpressionStatement	val . toSink ( sink )	90:16:2540:2557	2567211	6	True				
ANR	2567521	CallExpression	val . toSink ( sink )		2567211	0					
ANR	2567522	Callee	val . toSink		2567211	0					
ANR	2567523	MemberAccess	val . toSink		2567211	0					
ANR	2567524	Identifier	val		2567211	0					
ANR	2567525	Identifier	toSink		2567211	1					
ANR	2567526	ArgumentList	sink		2567211	1					
ANR	2567527	Argument	sink		2567211	0					
ANR	2567528	Identifier	sink		2567211	0					
ANR	2567529	ExpressionStatement	sink . flushSink ( )	91:16:2575:2591	2567211	7	True				
ANR	2567530	CallExpression	sink . flushSink ( )		2567211	0					
ANR	2567531	Callee	sink . flushSink		2567211	0					
ANR	2567532	MemberAccess	sink . flushSink		2567211	0					
ANR	2567533	Identifier	sink		2567211	0					
ANR	2567534	Identifier	flushSink		2567211	1					
ANR	2567535	ArgumentList			2567211	1					
ANR	2567536	Statement	delete	92:16:2609:2614	2567211	8	True				
ANR	2567537	ExpressionStatement	tree	92:23:2616:2620	2567211	9	True				
ANR	2567538	Identifier	tree		2567211	0					
ANR	2567539	ExpressionStatement	"printf ( ""\\n"" )"	93:16:2638:2651	2567211	10	True				
ANR	2567540	CallExpression	"printf ( ""\\n"" )"		2567211	0					
ANR	2567541	Callee	printf		2567211	0					
ANR	2567542	Identifier	printf		2567211	0					
ANR	2567543	ArgumentList	"""\\n"""		2567211	1					
ANR	2567544	Argument	"""\\n"""		2567211	0					
ANR	2567545	PrimaryExpression	"""\\n"""		2567211	0					
ANR	2567546	ElseStatement	else		2567211	0					
ANR	2567547	IfStatement	if ( op == TERNARY_OP )		2567211	0					
ANR	2567548	Condition	op == TERNARY_OP	97:6:2690:2705	2567211	0	True				
ANR	2567549	EqualityExpression	op == TERNARY_OP		2567211	0		==			
ANR	2567550	Identifier	op		2567211	0					
ANR	2567551	Identifier	TERNARY_OP		2567211	1					
ANR	2567552	CompoundStatement		69:2:1739:1739	2567211	1					
ANR	2567553	ForStatement	for ( type1 = 0 ; type1 < 5 ; type1 ++ )		2567211	0					
ANR	2567554	ForInit	type1 = 0 ;	100:8:2746:2755	2567211	0	True				
ANR	2567555	AssignmentExpression	type1 = 0		2567211	0		=			
ANR	2567556	Identifier	type1		2567211	0					
ANR	2567557	PrimaryExpression	0		2567211	1					
ANR	2567558	Condition	type1 < 5	100:19:2757:2765	2567211	1	True				
ANR	2567559	RelationalExpression	type1 < 5		2567211	0		<			
ANR	2567560	Identifier	type1		2567211	0					
ANR	2567561	PrimaryExpression	5		2567211	1					
ANR	2567562	PostIncDecOperationExpression	type1 ++	100:30:2768:2774	2567211	2	True				
ANR	2567563	Identifier	type1		2567211	0					
ANR	2567564	IncDec	++		2567211	1					
ANR	2567565	CompoundStatement		72:3:1809:1809	2567211	3					
ANR	2567566	ForStatement	for ( type2 = 0 ; type2 < 5 ; type2 ++ )		2567211	0					
ANR	2567567	ForInit	type2 = 0 ;	102:9:2791:2800	2567211	0	True				
ANR	2567568	AssignmentExpression	type2 = 0		2567211	0		=			
ANR	2567569	Identifier	type2		2567211	0					
ANR	2567570	PrimaryExpression	0		2567211	1					
ANR	2567571	Condition	type2 < 5	102:20:2802:2810	2567211	1	True				
ANR	2567572	RelationalExpression	type2 < 5		2567211	0		<			
ANR	2567573	Identifier	type2		2567211	0					
ANR	2567574	PrimaryExpression	5		2567211	1					
ANR	2567575	PostIncDecOperationExpression	type2 ++	102:31:2813:2819	2567211	2	True				
ANR	2567576	Identifier	type2		2567211	0					
ANR	2567577	IncDec	++		2567211	1					
ANR	2567578	CompoundStatement		74:4:1855:1855	2567211	3					
ANR	2567579	ForStatement	for ( type3 = 0 ; type3 < 5 ; type3 ++ )		2567211	0					
ANR	2567580	ForInit	type3 = 0 ;	104:10:2838:2847	2567211	0	True				
ANR	2567581	AssignmentExpression	type3 = 0		2567211	0		=			
ANR	2567582	Identifier	type3		2567211	0					
ANR	2567583	PrimaryExpression	0		2567211	1					
ANR	2567584	Condition	type3 < 5	104:21:2849:2857	2567211	1	True				
ANR	2567585	RelationalExpression	type3 < 5		2567211	0		<			
ANR	2567586	Identifier	type3		2567211	0					
ANR	2567587	PrimaryExpression	5		2567211	1					
ANR	2567588	PostIncDecOperationExpression	type3 ++	104:32:2860:2866	2567211	2	True				
ANR	2567589	Identifier	type3		2567211	0					
ANR	2567590	IncDec	++		2567211	1					
ANR	2567591	CompoundStatement		76:5:1903:1903	2567211	3					
ANR	2567592	ExpressionStatement	"sprintf ( buffer , ""%s ? %s : %s"" , values [ type1 ] , values [ type2 ] , values [ type3 ] )"	106:6:2882:2969	2567211	0	True				
ANR	2567593	CallExpression	"sprintf ( buffer , ""%s ? %s : %s"" , values [ type1 ] , values [ type2 ] , values [ type3 ] )"		2567211	0					
ANR	2567594	Callee	sprintf		2567211	0					
ANR	2567595	Identifier	sprintf		2567211	0					
ANR	2567596	ArgumentList	buffer		2567211	1					
ANR	2567597	Argument	buffer		2567211	0					
ANR	2567598	Identifier	buffer		2567211	0					
ANR	2567599	Argument	"""%s ? %s : %s"""		2567211	1					
ANR	2567600	PrimaryExpression	"""%s ? %s : %s"""		2567211	0					
ANR	2567601	Argument	values [ type1 ]		2567211	2					
ANR	2567602	ArrayIndexing	values [ type1 ]		2567211	0					
ANR	2567603	Identifier	values		2567211	0					
ANR	2567604	Identifier	type1		2567211	1					
ANR	2567605	Argument	values [ type2 ]		2567211	3					
ANR	2567606	ArrayIndexing	values [ type2 ]		2567211	0					
ANR	2567607	Identifier	values		2567211	0					
ANR	2567608	Identifier	type2		2567211	1					
ANR	2567609	Argument	values [ type3 ]		2567211	4					
ANR	2567610	ArrayIndexing	values [ type3 ]		2567211	0					
ANR	2567611	Identifier	values		2567211	0					
ANR	2567612	Identifier	type3		2567211	1					
ANR	2567613	ExpressionStatement	"printf ( ""%s => "" , buffer )"	108:6:2977:3002	2567211	1	True				
ANR	2567614	CallExpression	"printf ( ""%s => "" , buffer )"		2567211	0					
ANR	2567615	Callee	printf		2567211	0					
ANR	2567616	Identifier	printf		2567211	0					
ANR	2567617	ArgumentList	"""%s => """		2567211	1					
ANR	2567618	Argument	"""%s => """		2567211	0					
ANR	2567619	PrimaryExpression	"""%s => """		2567211	0					
ANR	2567620	Argument	buffer		2567211	1					
ANR	2567621	Identifier	buffer		2567211	0					
ANR	2567622	ExpressionStatement	"source . setSource ( buffer , buflen )"	109:6:3010:3043	2567211	2	True				
ANR	2567623	CallExpression	"source . setSource ( buffer , buflen )"		2567211	0					
ANR	2567624	Callee	source . setSource		2567211	0					
ANR	2567625	MemberAccess	source . setSource		2567211	0					
ANR	2567626	Identifier	source		2567211	0					
ANR	2567627	Identifier	setSource		2567211	1					
ANR	2567628	ArgumentList	buffer		2567211	1					
ANR	2567629	Argument	buffer		2567211	0					
ANR	2567630	Identifier	buffer		2567211	0					
ANR	2567631	Argument	buflen		2567211	1					
ANR	2567632	Identifier	buflen		2567211	0					
ANR	2567633	ExpressionStatement	tree = ExprTree :: fromSource ( source )	110:6:3051:3087	2567211	3	True				
ANR	2567634	AssignmentExpression	tree = ExprTree :: fromSource ( source )		2567211	0		=			
ANR	2567635	Identifier	tree		2567211	0					
ANR	2567636	CallExpression	ExprTree :: fromSource ( source )		2567211	1					
ANR	2567637	Callee	ExprTree :: fromSource		2567211	0					
ANR	2567638	Identifier	ExprTree :: fromSource		2567211	0					
ANR	2567639	ArgumentList	source		2567211	1					
ANR	2567640	Argument	source		2567211	0					
ANR	2567641	Identifier	source		2567211	0					
ANR	2567642	IfStatement	if ( ! tree )		2567211	4					
ANR	2567643	Condition	! tree	111:10:3099:3103	2567211	0	True				
ANR	2567644	UnaryOperationExpression	! tree		2567211	0					
ANR	2567645	UnaryOperator	!		2567211	0					
ANR	2567646	Identifier	tree		2567211	1					
ANR	2567647	CompoundStatement		83:6:2141:2141	2567211	1					
ANR	2567648	ExpressionStatement	"printf ( ""parse error!\\n"" )"	113:7:3121:3146	2567211	0	True				
ANR	2567649	CallExpression	"printf ( ""parse error!\\n"" )"		2567211	0					
ANR	2567650	Callee	printf		2567211	0					
ANR	2567651	Identifier	printf		2567211	0					
ANR	2567652	ArgumentList	"""parse error!\\n"""		2567211	1					
ANR	2567653	Argument	"""parse error!\\n"""		2567211	0					
ANR	2567654	PrimaryExpression	"""parse error!\\n"""		2567211	0					
ANR	2567655	ContinueStatement	continue ;	114:7:3155:3163	2567211	1	True				
ANR	2567656	ExpressionStatement	"le . evaluate ( tree , val )"	116:6:3179:3202	2567211	5	True				
ANR	2567657	CallExpression	"le . evaluate ( tree , val )"		2567211	0					
ANR	2567658	Callee	le . evaluate		2567211	0					
ANR	2567659	MemberAccess	le . evaluate		2567211	0					
ANR	2567660	Identifier	le		2567211	0					
ANR	2567661	Identifier	evaluate		2567211	1					
ANR	2567662	ArgumentList	tree		2567211	1					
ANR	2567663	Argument	tree		2567211	0					
ANR	2567664	Identifier	tree		2567211	0					
ANR	2567665	Argument	val		2567211	1					
ANR	2567666	Identifier	val		2567211	0					
ANR	2567667	ExpressionStatement	val . toSink ( sink )	117:6:3210:3227	2567211	6	True				
ANR	2567668	CallExpression	val . toSink ( sink )		2567211	0					
ANR	2567669	Callee	val . toSink		2567211	0					
ANR	2567670	MemberAccess	val . toSink		2567211	0					
ANR	2567671	Identifier	val		2567211	0					
ANR	2567672	Identifier	toSink		2567211	1					
ANR	2567673	ArgumentList	sink		2567211	1					
ANR	2567674	Argument	sink		2567211	0					
ANR	2567675	Identifier	sink		2567211	0					
ANR	2567676	ExpressionStatement	sink . flushSink ( )	118:6:3235:3252	2567211	7	True				
ANR	2567677	CallExpression	sink . flushSink ( )		2567211	0					
ANR	2567678	Callee	sink . flushSink		2567211	0					
ANR	2567679	MemberAccess	sink . flushSink		2567211	0					
ANR	2567680	Identifier	sink		2567211	0					
ANR	2567681	Identifier	flushSink		2567211	1					
ANR	2567682	ArgumentList			2567211	1					
ANR	2567683	Statement	delete	119:6:3260:3265	2567211	8	True				
ANR	2567684	ExpressionStatement	tree	119:13:3267:3271	2567211	9	True				
ANR	2567685	Identifier	tree		2567211	0					
ANR	2567686	ExpressionStatement	"printf ( ""\\n"" )"	120:6:3279:3292	2567211	10	True				
ANR	2567687	CallExpression	"printf ( ""\\n"" )"		2567211	0					
ANR	2567688	Callee	printf		2567211	0					
ANR	2567689	Identifier	printf		2567211	0					
ANR	2567690	ArgumentList	"""\\n"""		2567211	1					
ANR	2567691	Argument	"""\\n"""		2567211	0					
ANR	2567692	PrimaryExpression	"""\\n"""		2567211	0					
ANR	2567693	ElseStatement	else		2567211	0					
ANR	2567694	CompoundStatement		97:2:2354:2354	2567211	0					
ANR	2567695	ForStatement	for ( type1 = 0 ; type1 < 5 ; type1 ++ )		2567211	0					
ANR	2567696	ForInit	type1 = 0 ;	128:17:3392:3401	2567211	0	True				
ANR	2567697	AssignmentExpression	type1 = 0		2567211	0		=			
ANR	2567698	Identifier	type1		2567211	0					
ANR	2567699	PrimaryExpression	0		2567211	1					
ANR	2567700	Condition	type1 < 5	128:28:3403:3411	2567211	1	True				
ANR	2567701	RelationalExpression	type1 < 5		2567211	0		<			
ANR	2567702	Identifier	type1		2567211	0					
ANR	2567703	PrimaryExpression	5		2567211	1					
ANR	2567704	PostIncDecOperationExpression	type1 ++	128:39:3414:3420	2567211	2	True				
ANR	2567705	Identifier	type1		2567211	0					
ANR	2567706	IncDec	++		2567211	1					
ANR	2567707	CompoundStatement		100:12:2464:2464	2567211	3					
ANR	2567708	ForStatement	for ( type2 = 0 ; type2 < 5 ; type2 ++ )		2567211	0					
ANR	2567709	ForInit	type2 = 0 ;	130:21:3458:3467	2567211	0	True				
ANR	2567710	AssignmentExpression	type2 = 0		2567211	0		=			
ANR	2567711	Identifier	type2		2567211	0					
ANR	2567712	PrimaryExpression	0		2567211	1					
ANR	2567713	Condition	type2 < 5	130:32:3469:3477	2567211	1	True				
ANR	2567714	RelationalExpression	type2 < 5		2567211	0		<			
ANR	2567715	Identifier	type2		2567211	0					
ANR	2567716	PrimaryExpression	5		2567211	1					
ANR	2567717	PostIncDecOperationExpression	type2 ++	130:43:3480:3486	2567211	2	True				
ANR	2567718	Identifier	type2		2567211	0					
ANR	2567719	IncDec	++		2567211	1					
ANR	2567720	CompoundStatement		102:16:2534:2534	2567211	3					
ANR	2567721	ExpressionStatement	"sprintf ( buffer , ""%s %s %s"" , values [ type1 ] , Operation :: opString [ op ] , values [ type2 ] )"	132:5:3512:3604	2567211	0	True				
ANR	2567722	CallExpression	"sprintf ( buffer , ""%s %s %s"" , values [ type1 ] , Operation :: opString [ op ] , values [ type2 ] )"		2567211	0					
ANR	2567723	Callee	sprintf		2567211	0					
ANR	2567724	Identifier	sprintf		2567211	0					
ANR	2567725	ArgumentList	buffer		2567211	1					
ANR	2567726	Argument	buffer		2567211	0					
ANR	2567727	Identifier	buffer		2567211	0					
ANR	2567728	Argument	"""%s %s %s"""		2567211	1					
ANR	2567729	PrimaryExpression	"""%s %s %s"""		2567211	0					
ANR	2567730	Argument	values [ type1 ]		2567211	2					
ANR	2567731	ArrayIndexing	values [ type1 ]		2567211	0					
ANR	2567732	Identifier	values		2567211	0					
ANR	2567733	Identifier	type1		2567211	1					
ANR	2567734	Argument	Operation :: opString [ op ]		2567211	3					
ANR	2567735	ArrayIndexing	Operation :: opString [ op ]		2567211	0					
ANR	2567736	Identifier	Operation :: opString		2567211	0					
ANR	2567737	Identifier	op		2567211	1					
ANR	2567738	Argument	values [ type2 ]		2567211	4					
ANR	2567739	ArrayIndexing	values [ type2 ]		2567211	0					
ANR	2567740	Identifier	values		2567211	0					
ANR	2567741	Identifier	type2		2567211	1					
ANR	2567742	ExpressionStatement	"printf ( ""%s => "" , buffer )"	134:5:3611:3636	2567211	1	True				
ANR	2567743	CallExpression	"printf ( ""%s => "" , buffer )"		2567211	0					
ANR	2567744	Callee	printf		2567211	0					
ANR	2567745	Identifier	printf		2567211	0					
ANR	2567746	ArgumentList	"""%s => """		2567211	1					
ANR	2567747	Argument	"""%s => """		2567211	0					
ANR	2567748	PrimaryExpression	"""%s => """		2567211	0					
ANR	2567749	Argument	buffer		2567211	1					
ANR	2567750	Identifier	buffer		2567211	0					
ANR	2567751	ExpressionStatement	"source . setSource ( buffer , buflen )"	135:5:3643:3676	2567211	2	True				
ANR	2567752	CallExpression	"source . setSource ( buffer , buflen )"		2567211	0					
ANR	2567753	Callee	source . setSource		2567211	0					
ANR	2567754	MemberAccess	source . setSource		2567211	0					
ANR	2567755	Identifier	source		2567211	0					
ANR	2567756	Identifier	setSource		2567211	1					
ANR	2567757	ArgumentList	buffer		2567211	1					
ANR	2567758	Argument	buffer		2567211	0					
ANR	2567759	Identifier	buffer		2567211	0					
ANR	2567760	Argument	buflen		2567211	1					
ANR	2567761	Identifier	buflen		2567211	0					
ANR	2567762	ExpressionStatement	tree = ExprTree :: fromSource ( source )	136:5:3683:3719	2567211	3	True				
ANR	2567763	AssignmentExpression	tree = ExprTree :: fromSource ( source )		2567211	0		=			
ANR	2567764	Identifier	tree		2567211	0					
ANR	2567765	CallExpression	ExprTree :: fromSource ( source )		2567211	1					
ANR	2567766	Callee	ExprTree :: fromSource		2567211	0					
ANR	2567767	Identifier	ExprTree :: fromSource		2567211	0					
ANR	2567768	ArgumentList	source		2567211	1					
ANR	2567769	Argument	source		2567211	0					
ANR	2567770	Identifier	source		2567211	0					
ANR	2567771	IfStatement	if ( ! tree )		2567211	4					
ANR	2567772	Condition	! tree	137:9:3730:3734	2567211	0	True				
ANR	2567773	UnaryOperationExpression	! tree		2567211	0					
ANR	2567774	UnaryOperator	!		2567211	0					
ANR	2567775	Identifier	tree		2567211	1					
ANR	2567776	CompoundStatement		109:5:2771:2771	2567211	1					
ANR	2567777	ExpressionStatement	"printf ( ""parse error!\\n"" )"	139:6:3750:3775	2567211	0	True				
ANR	2567778	CallExpression	"printf ( ""parse error!\\n"" )"		2567211	0					
ANR	2567779	Callee	printf		2567211	0					
ANR	2567780	Identifier	printf		2567211	0					
ANR	2567781	ArgumentList	"""parse error!\\n"""		2567211	1					
ANR	2567782	Argument	"""parse error!\\n"""		2567211	0					
ANR	2567783	PrimaryExpression	"""parse error!\\n"""		2567211	0					
ANR	2567784	ContinueStatement	continue ;	140:6:3783:3791	2567211	1	True				
ANR	2567785	ExpressionStatement	"le . evaluate ( tree , val )"	142:5:3805:3828	2567211	5	True				
ANR	2567786	CallExpression	"le . evaluate ( tree , val )"		2567211	0					
ANR	2567787	Callee	le . evaluate		2567211	0					
ANR	2567788	MemberAccess	le . evaluate		2567211	0					
ANR	2567789	Identifier	le		2567211	0					
ANR	2567790	Identifier	evaluate		2567211	1					
ANR	2567791	ArgumentList	tree		2567211	1					
ANR	2567792	Argument	tree		2567211	0					
ANR	2567793	Identifier	tree		2567211	0					
ANR	2567794	Argument	val		2567211	1					
ANR	2567795	Identifier	val		2567211	0					
ANR	2567796	ExpressionStatement	val . toSink ( sink )	143:5:3835:3852	2567211	6	True				
ANR	2567797	CallExpression	val . toSink ( sink )		2567211	0					
ANR	2567798	Callee	val . toSink		2567211	0					
ANR	2567799	MemberAccess	val . toSink		2567211	0					
ANR	2567800	Identifier	val		2567211	0					
ANR	2567801	Identifier	toSink		2567211	1					
ANR	2567802	ArgumentList	sink		2567211	1					
ANR	2567803	Argument	sink		2567211	0					
ANR	2567804	Identifier	sink		2567211	0					
ANR	2567805	ExpressionStatement	sink . flushSink ( )	144:5:3859:3876	2567211	7	True				
ANR	2567806	CallExpression	sink . flushSink ( )		2567211	0					
ANR	2567807	Callee	sink . flushSink		2567211	0					
ANR	2567808	MemberAccess	sink . flushSink		2567211	0					
ANR	2567809	Identifier	sink		2567211	0					
ANR	2567810	Identifier	flushSink		2567211	1					
ANR	2567811	ArgumentList			2567211	1					
ANR	2567812	Statement	delete	145:5:3883:3888	2567211	8	True				
ANR	2567813	ExpressionStatement	tree	145:12:3890:3894	2567211	9	True				
ANR	2567814	Identifier	tree		2567211	0					
ANR	2567815	ExpressionStatement	"printf ( ""\\n"" )"	146:5:3901:3914	2567211	10	True				
ANR	2567816	CallExpression	"printf ( ""\\n"" )"		2567211	0					
ANR	2567817	Callee	printf		2567211	0					
ANR	2567818	Identifier	printf		2567211	0					
ANR	2567819	ArgumentList	"""\\n"""		2567211	1					
ANR	2567820	Argument	"""\\n"""		2567211	0					
ANR	2567821	PrimaryExpression	"""\\n"""		2567211	0					
ANR	2567822	ReturnStatement	return 0 ;	153:1:3947:3955	2567211	12	True				
ANR	2567823	PrimaryExpression	0		2567211	0					
ANR	2567824	ReturnType	int		2567211	1					
ANR	2567825	Identifier	main		2567211	2					
ANR	2567826	ParameterList			2567211	3					
ANR	2567827	CFGEntryNode	ENTRY		2567211		True				
ANR	2567828	CFGExitNode	EXIT		2567211		True				
ANR	2567829	Symbol	stdout		2567211						
ANR	2567830	Symbol	* op		2567211						
ANR	2567831	Symbol	* values		2567211						
ANR	2567832	Symbol	values		2567211						
ANR	2567833	Symbol	UNARY_MINUS_OP		2567211						
ANR	2567834	Symbol	source		2567211						
ANR	2567835	Symbol	TERNARY_OP		2567211						
ANR	2567836	Symbol	__LAST_OP__		2567211						
ANR	2567837	Symbol	buflen		2567211						
ANR	2567838	Symbol	buffer		2567211						
ANR	2567839	Symbol	ExprTree :: fromSource		2567211						
ANR	2567840	Symbol	val		2567211						
ANR	2567841	Symbol	op		2567211						
ANR	2567842	Symbol	type3		2567211						
ANR	2567843	Symbol	type2		2567211						
ANR	2567844	Symbol	sink		2567211						
ANR	2567845	Symbol	* Operation :: opString		2567211						
ANR	2567846	Symbol	tree		2567211						
ANR	2567847	Symbol	PARENTHESES_OP		2567211						
ANR	2567848	Symbol	type1		2567211						
ANR	2567849	Symbol	__FIRST_OP__		2567211						
ANR	2567850	Symbol	Operation :: opString		2567211						
ANR	2567851	Symbol	BITWISE_NOT_OP		2567211						
ANR	2567852	Symbol	le		2567211						
ANR	2567853	Symbol	LOGICAL_NOT_OP		2567211						
ANR	2567854	Symbol	UNARY_PLUS_OP		2567211						
ANR	2567855	Symbol	* type1		2567211						
ANR	2567856	Symbol	* type2		2567211						
ANR	2567857	Symbol	* type3		2567211						
