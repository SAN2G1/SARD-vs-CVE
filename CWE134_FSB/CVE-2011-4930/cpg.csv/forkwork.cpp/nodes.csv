command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1366607	File	data/converged/CVE-2011-4930_htcondor/forkwork.cpp								
ANR	1366608	Function	ForkWorker :: ForkWorker	31:0:1030:1105							
ANR	1366609	FunctionDef	ForkWorker :: ForkWorker ()		1366608	0					
ANR	1366610	CompoundStatement		32:0:1061:1105	1366608	0					
ANR	1366611	ExpressionStatement	valid = 0x5a5a	33:1:1064:1078	1366608	0	True				
ANR	1366612	AssignmentExpression	valid = 0x5a5a		1366608	0		=			
ANR	1366613	Identifier	valid		1366608	0					
ANR	1366614	PrimaryExpression	0x5a5a		1366608	1					
ANR	1366615	ExpressionStatement	pid = - 1	34:1:1081:1089	1366608	1	True				
ANR	1366616	AssignmentExpression	pid = - 1		1366608	0		=			
ANR	1366617	Identifier	pid		1366608	0					
ANR	1366618	UnaryOperationExpression	- 1		1366608	1					
ANR	1366619	UnaryOperator	-		1366608	0					
ANR	1366620	PrimaryExpression	1		1366608	1					
ANR	1366621	ExpressionStatement	parent = - 1	35:1:1092:1103	1366608	2	True				
ANR	1366622	AssignmentExpression	parent = - 1		1366608	0		=			
ANR	1366623	Identifier	parent		1366608	0					
ANR	1366624	UnaryOperationExpression	- 1		1366608	1					
ANR	1366625	UnaryOperator	-		1366608	0					
ANR	1366626	PrimaryExpression	1		1366608	1					
ANR	1366627	Identifier	ForkWorker :: ForkWorker		1366608	1					
ANR	1366628	ParameterList			1366608	2					
ANR	1366629	CFGEntryNode	ENTRY		1366608		True				
ANR	1366630	CFGExitNode	EXIT		1366608		True				
ANR	1366631	Symbol	valid		1366608						
ANR	1366632	Symbol	parent		1366608						
ANR	1366633	Symbol	pid		1366608						
ANR	1366634	Function	ForkWorker :: ~ForkWorker	39:0:1140:1272							
ANR	1366635	FunctionDef	ForkWorker :: ~ForkWorker ()		1366634	0					
ANR	1366636	CompoundStatement		40:0:1172:1272	1366634	0					
ANR	1366637	IfStatement	if ( valid != 0x5a5a )		1366634	0					
ANR	1366638	Condition	valid != 0x5a5a	41:6:1180:1194	1366634	0	True				
ANR	1366639	EqualityExpression	valid != 0x5a5a		1366634	0		!=			
ANR	1366640	Identifier	valid		1366634	0					
ANR	1366641	PrimaryExpression	0x5a5a		1366634	1					
ANR	1366642	CompoundStatement		2:24:25:25	1366634	1					
ANR	1366643	ExpressionStatement	"dprintf ( D_ALWAYS , ""ForkWorker: delete invalid!!\\n"" )"	42:2:1202:1255	1366634	0	True				
ANR	1366644	CallExpression	"dprintf ( D_ALWAYS , ""ForkWorker: delete invalid!!\\n"" )"		1366634	0					
ANR	1366645	Callee	dprintf		1366634	0					
ANR	1366646	Identifier	dprintf		1366634	0					
ANR	1366647	ArgumentList	D_ALWAYS		1366634	1					
ANR	1366648	Argument	D_ALWAYS		1366634	0					
ANR	1366649	Identifier	D_ALWAYS		1366634	0					
ANR	1366650	Argument	"""ForkWorker: delete invalid!!\\n"""		1366634	1					
ANR	1366651	PrimaryExpression	"""ForkWorker: delete invalid!!\\n"""		1366634	0					
ANR	1366652	ExpressionStatement	valid = 0	44:1:1261:1270	1366634	1	True				
ANR	1366653	AssignmentExpression	valid = 0		1366634	0		=			
ANR	1366654	Identifier	valid		1366634	0					
ANR	1366655	PrimaryExpression	0		1366634	1					
ANR	1366656	Identifier	ForkWorker :: ~ForkWorker		1366634	1					
ANR	1366657	ParameterList			1366634	2					
ANR	1366658	CFGEntryNode	ENTRY		1366634		True				
ANR	1366659	CFGExitNode	EXIT		1366634		True				
ANR	1366660	Symbol	valid		1366634						
ANR	1366661	Symbol	D_ALWAYS		1366634						
ANR	1366662	Function	ForkWorker :: Fork	48:0:1305:2080							
ANR	1366663	FunctionDef	ForkWorker :: Fork ()		1366662	0					
ANR	1366664	CompoundStatement		50:0:1341:2080	1366662	0					
ANR	1366665	IdentifierDeclStatement	ifndef WIN32 pid = fork ( ) ;	51:2:1345:1381	1366662	0	True				
ANR	1366666	IdentifierDecl	pid = fork ( )		1366662	0					
ANR	1366667	IdentifierDeclType	ifndef WIN32		1366662	0					
ANR	1366668	Identifier	pid		1366662	1					
ANR	1366669	AssignmentExpression	pid = fork ( )		1366662	2		=			
ANR	1366670	Identifier	pid		1366662	0					
ANR	1366671	CallExpression	fork ( )		1366662	1					
ANR	1366672	Callee	fork		1366662	0					
ANR	1366673	Identifier	fork		1366662	0					
ANR	1366674	ArgumentList			1366662	1					
ANR	1366675	IfStatement	if ( pid < 0 )		1366662	1					
ANR	1366676	Condition	pid < 0	55:6:1390:1396	1366662	0	True				
ANR	1366677	RelationalExpression	pid < 0		1366662	0		<			
ANR	1366678	Identifier	pid		1366662	0					
ANR	1366679	PrimaryExpression	0		1366662	1					
ANR	1366680	CompoundStatement		6:16:58:58	1366662	1					
ANR	1366681	ExpressionStatement	"dprintf ( D_ALWAYS , ""ForkWorker::Fork: Fork failed\\n"" )"	56:2:1404:1458	1366662	0	True				
ANR	1366682	CallExpression	"dprintf ( D_ALWAYS , ""ForkWorker::Fork: Fork failed\\n"" )"		1366662	0					
ANR	1366683	Callee	dprintf		1366662	0					
ANR	1366684	Identifier	dprintf		1366662	0					
ANR	1366685	ArgumentList	D_ALWAYS		1366662	1					
ANR	1366686	Argument	D_ALWAYS		1366662	0					
ANR	1366687	Identifier	D_ALWAYS		1366662	0					
ANR	1366688	Argument	"""ForkWorker::Fork: Fork failed\\n"""		1366662	1					
ANR	1366689	PrimaryExpression	"""ForkWorker::Fork: Fork failed\\n"""		1366662	0					
ANR	1366690	ReturnStatement	return FORK_FAILED ;	57:2:1462:1480	1366662	1	True				
ANR	1366691	Identifier	FORK_FAILED		1366662	0					
ANR	1366692	ElseStatement	else		1366662	0					
ANR	1366693	IfStatement	if ( 0 == pid )		1366662	0					
ANR	1366694	Condition	0 == pid	58:13:1495:1502	1366662	0	True				
ANR	1366695	EqualityExpression	0 == pid		1366662	0		==			
ANR	1366696	PrimaryExpression	0		1366662	0					
ANR	1366697	Identifier	pid		1366662	1					
ANR	1366698	CompoundStatement		9:24:164:164	1366662	1					
ANR	1366699	ExpressionStatement	daemonCore -> Forked_Child_Wants_Exit_By_Exec ( true )	64:2:1777:1828	1366662	0	True				
ANR	1366700	CallExpression	daemonCore -> Forked_Child_Wants_Exit_By_Exec ( true )		1366662	0					
ANR	1366701	Callee	daemonCore -> Forked_Child_Wants_Exit_By_Exec		1366662	0					
ANR	1366702	PtrMemberAccess	daemonCore -> Forked_Child_Wants_Exit_By_Exec		1366662	0					
ANR	1366703	Identifier	daemonCore		1366662	0					
ANR	1366704	Identifier	Forked_Child_Wants_Exit_By_Exec		1366662	1					
ANR	1366705	ArgumentList	true		1366662	1					
ANR	1366706	Argument	true		1366662	0					
ANR	1366707	Identifier	true		1366662	0					
ANR	1366708	ExpressionStatement	parent = getppid ( )	65:2:1832:1851	1366662	1	True				
ANR	1366709	AssignmentExpression	parent = getppid ( )		1366662	0		=			
ANR	1366710	Identifier	parent		1366662	0					
ANR	1366711	CallExpression	getppid ( )		1366662	1					
ANR	1366712	Callee	getppid		1366662	0					
ANR	1366713	Identifier	getppid		1366662	0					
ANR	1366714	ArgumentList			1366662	1					
ANR	1366715	ExpressionStatement	pid = - 1	66:2:1855:1863	1366662	2	True				
ANR	1366716	AssignmentExpression	pid = - 1		1366662	0		=			
ANR	1366717	Identifier	pid		1366662	0					
ANR	1366718	UnaryOperationExpression	- 1		1366662	1					
ANR	1366719	UnaryOperator	-		1366662	0					
ANR	1366720	PrimaryExpression	1		1366662	1					
ANR	1366721	ReturnStatement	return FORK_CHILD ;	67:2:1867:1884	1366662	3	True				
ANR	1366722	Identifier	FORK_CHILD		1366662	0					
ANR	1366723	ElseStatement	else		1366662	0					
ANR	1366724	CompoundStatement		19:8:552:552	1366662	0					
ANR	1366725	ExpressionStatement	parent = getpid ( )	70:2:1910:1928	1366662	0	True				
ANR	1366726	AssignmentExpression	parent = getpid ( )		1366662	0		=			
ANR	1366727	Identifier	parent		1366662	0					
ANR	1366728	CallExpression	getpid ( )		1366662	1					
ANR	1366729	Callee	getpid		1366662	0					
ANR	1366730	Identifier	getpid		1366662	0					
ANR	1366731	ArgumentList			1366662	1					
ANR	1366732	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ForkWorker::Fork: New child of %d = %d\\n"" , parent , pid )"	71:2:1932:2017	1366662	1	True				
ANR	1366733	CallExpression	"dprintf ( D_FULLDEBUG , ""ForkWorker::Fork: New child of %d = %d\\n"" , parent , pid )"		1366662	0					
ANR	1366734	Callee	dprintf		1366662	0					
ANR	1366735	Identifier	dprintf		1366662	0					
ANR	1366736	ArgumentList	D_FULLDEBUG		1366662	1					
ANR	1366737	Argument	D_FULLDEBUG		1366662	0					
ANR	1366738	Identifier	D_FULLDEBUG		1366662	0					
ANR	1366739	Argument	"""ForkWorker::Fork: New child of %d = %d\\n"""		1366662	1					
ANR	1366740	PrimaryExpression	"""ForkWorker::Fork: New child of %d = %d\\n"""		1366662	0					
ANR	1366741	Argument	parent		1366662	2					
ANR	1366742	Identifier	parent		1366662	0					
ANR	1366743	Argument	pid		1366662	3					
ANR	1366744	Identifier	pid		1366662	0					
ANR	1366745	ReturnStatement	return FORK_PARENT ;	73:2:2021:2039	1366662	2	True				
ANR	1366746	Identifier	FORK_PARENT		1366662	0					
ANR	1366747	ReturnType	ForkStatus		1366662	1					
ANR	1366748	Identifier	ForkWorker :: Fork		1366662	2					
ANR	1366749	ParameterList			1366662	3					
ANR	1366750	CFGEntryNode	ENTRY		1366662		True				
ANR	1366751	CFGExitNode	EXIT		1366662		True				
ANR	1366752	Symbol	parent		1366662						
ANR	1366753	Symbol	fork		1366662						
ANR	1366754	Symbol	getppid		1366662						
ANR	1366755	Symbol	FORK_PARENT		1366662						
ANR	1366756	Symbol	daemonCore		1366662						
ANR	1366757	Symbol	D_ALWAYS		1366662						
ANR	1366758	Symbol	true		1366662						
ANR	1366759	Symbol	pid		1366662						
ANR	1366760	Symbol	FORK_FAILED		1366662						
ANR	1366761	Symbol	FORK_CHILD		1366662						
ANR	1366762	Symbol	D_FULLDEBUG		1366662						
ANR	1366763	Symbol	getpid		1366662						
ANR	1366764	Function	ForkWork :: ForkWork	81:0:2108:2251							
ANR	1366765	FunctionDef	ForkWork :: ForkWork (int max_workers)		1366764	0					
ANR	1366766	CompoundStatement		82:0:2146:2251	1366764	0					
ANR	1366767	IdentifierDeclStatement	ifdef WIN32 max_workers = 0 ;	83:2:2150:2178	1366764	0	True				
ANR	1366768	IdentifierDecl	max_workers = 0		1366764	0					
ANR	1366769	IdentifierDeclType	ifdef WIN32		1366764	0					
ANR	1366770	Identifier	max_workers		1366764	1					
ANR	1366771	AssignmentExpression	max_workers = 0		1366764	2		=			
ANR	1366772	Identifier	max_workers		1366764	0					
ANR	1366773	PrimaryExpression	0		1366764	1					
ANR	1366774	IdentifierDeclStatement	endif maxWorkers = max_workers ;	85:2:2182:2213	1366764	1	True				
ANR	1366775	IdentifierDecl	maxWorkers = max_workers		1366764	0					
ANR	1366776	IdentifierDeclType	endif		1366764	0					
ANR	1366777	Identifier	maxWorkers		1366764	1					
ANR	1366778	AssignmentExpression	maxWorkers = max_workers		1366764	2		=			
ANR	1366779	Identifier	max_workers		1366764	0					
ANR	1366780	Identifier	max_workers		1366764	1					
ANR	1366781	ExpressionStatement	reaperId = - 1	87:1:2216:2229	1366764	2	True				
ANR	1366782	AssignmentExpression	reaperId = - 1		1366764	0		=			
ANR	1366783	Identifier	reaperId		1366764	0					
ANR	1366784	UnaryOperationExpression	- 1		1366764	1					
ANR	1366785	UnaryOperator	-		1366764	0					
ANR	1366786	PrimaryExpression	1		1366764	1					
ANR	1366787	ExpressionStatement	childExit = false	88:1:2232:2249	1366764	3	True				
ANR	1366788	AssignmentExpression	childExit = false		1366764	0		=			
ANR	1366789	Identifier	childExit		1366764	0					
ANR	1366790	Identifier	false		1366764	1					
ANR	1366791	Identifier	ForkWork :: ForkWork		1366764	1					
ANR	1366792	ParameterList	int max_workers		1366764	2					
ANR	1366793	Parameter	int max_workers	81:20:2128:2142	1366764	0	True				
ANR	1366794	ParameterType	int		1366764	0					
ANR	1366795	Identifier	max_workers		1366764	1					
ANR	1366796	CFGEntryNode	ENTRY		1366764		True				
ANR	1366797	CFGExitNode	EXIT		1366764		True				
ANR	1366798	Symbol	maxWorkers		1366764						
ANR	1366799	Symbol	reaperId		1366764						
ANR	1366800	Symbol	max_workers		1366764						
ANR	1366801	Symbol	childExit		1366764						
ANR	1366802	Symbol	false		1366764						
ANR	1366803	Function	ForkWork :: Initialize	92:0:2279:2596							
ANR	1366804	FunctionDef	ForkWork :: Initialize ()		1366803	0					
ANR	1366805	CompoundStatement		94:0:2312:2596	1366803	0					
ANR	1366806	IfStatement	if ( reaperId != - 1 )		1366803	0					
ANR	1366807	Condition	reaperId != - 1	95:5:2319:2332	1366803	0	True				
ANR	1366808	EqualityExpression	reaperId != - 1		1366803	0		!=			
ANR	1366809	Identifier	reaperId		1366803	0					
ANR	1366810	UnaryOperationExpression	- 1		1366803	1					
ANR	1366811	UnaryOperator	-		1366803	0					
ANR	1366812	PrimaryExpression	1		1366803	1					
ANR	1366813	CompoundStatement		2:22:23:23	1366803	1					
ANR	1366814	ReturnStatement	return 0 ;	97:2:2366:2374	1366803	0	True				
ANR	1366815	PrimaryExpression	0		1366803	0					
ANR	1366816	ExpressionStatement	"reaperId = daemonCore -> Register_Reaper ( ""ForkWork_Reaper"" , ( ReaperHandlercpp ) & ForkWork :: Reaper , ""ForkWork Reaper"" , this )"	101:1:2404:2535	1366803	1	True				
ANR	1366817	AssignmentExpression	"reaperId = daemonCore -> Register_Reaper ( ""ForkWork_Reaper"" , ( ReaperHandlercpp ) & ForkWork :: Reaper , ""ForkWork Reaper"" , this )"		1366803	0		=			
ANR	1366818	Identifier	reaperId		1366803	0					
ANR	1366819	CallExpression	"daemonCore -> Register_Reaper ( ""ForkWork_Reaper"" , ( ReaperHandlercpp ) & ForkWork :: Reaper , ""ForkWork Reaper"" , this )"		1366803	1					
ANR	1366820	Callee	daemonCore -> Register_Reaper		1366803	0					
ANR	1366821	PtrMemberAccess	daemonCore -> Register_Reaper		1366803	0					
ANR	1366822	Identifier	daemonCore		1366803	0					
ANR	1366823	Identifier	Register_Reaper		1366803	1					
ANR	1366824	ArgumentList	"""ForkWork_Reaper"""		1366803	1					
ANR	1366825	Argument	"""ForkWork_Reaper"""		1366803	0					
ANR	1366826	PrimaryExpression	"""ForkWork_Reaper"""		1366803	0					
ANR	1366827	Argument	( ReaperHandlercpp ) & ForkWork :: Reaper		1366803	1					
ANR	1366828	CastExpression	( ReaperHandlercpp ) & ForkWork :: Reaper		1366803	0					
ANR	1366829	CastTarget	ReaperHandlercpp		1366803	0					
ANR	1366830	UnaryOperationExpression	& ForkWork :: Reaper		1366803	1					
ANR	1366831	UnaryOperator	&		1366803	0					
ANR	1366832	Identifier	ForkWork :: Reaper		1366803	1					
ANR	1366833	Argument	"""ForkWork Reaper"""		1366803	2					
ANR	1366834	PrimaryExpression	"""ForkWork Reaper"""		1366803	0					
ANR	1366835	Argument	this		1366803	3					
ANR	1366836	Identifier	this		1366803	0					
ANR	1366837	ExpressionStatement	daemonCore -> Set_Default_Reaper ( reaperId )	106:4:2541:2583	1366803	2	True				
ANR	1366838	CallExpression	daemonCore -> Set_Default_Reaper ( reaperId )		1366803	0					
ANR	1366839	Callee	daemonCore -> Set_Default_Reaper		1366803	0					
ANR	1366840	PtrMemberAccess	daemonCore -> Set_Default_Reaper		1366803	0					
ANR	1366841	Identifier	daemonCore		1366803	0					
ANR	1366842	Identifier	Set_Default_Reaper		1366803	1					
ANR	1366843	ArgumentList	reaperId		1366803	1					
ANR	1366844	Argument	reaperId		1366803	0					
ANR	1366845	Identifier	reaperId		1366803	0					
ANR	1366846	ReturnStatement	return 0 ;	107:1:2586:2594	1366803	3	True				
ANR	1366847	PrimaryExpression	0		1366803	0					
ANR	1366848	ReturnType	int		1366803	1					
ANR	1366849	Identifier	ForkWork :: Initialize		1366803	2					
ANR	1366850	ParameterList			1366803	3					
ANR	1366851	CFGEntryNode	ENTRY		1366803		True				
ANR	1366852	CFGExitNode	EXIT		1366803		True				
ANR	1366853	Symbol	daemonCore -> Register_Reaper		1366803						
ANR	1366854	Symbol	reaperId		1366803						
ANR	1366855	Symbol	& ForkWork :: Reaper		1366803						
ANR	1366856	Symbol	* daemonCore		1366803						
ANR	1366857	Symbol	daemonCore		1366803						
ANR	1366858	Symbol	this		1366803						
ANR	1366859	Function	ForkWork :: ~ForkWork	111:0:2624:2686							
ANR	1366860	FunctionDef	ForkWork :: ~ForkWork ()		1366859	0					
ANR	1366861	CompoundStatement		112:0:2652:2686	1366859	0					
ANR	1366862	ExpressionStatement	DeleteAll ( )	114:1:2672:2684	1366859	0	True				
ANR	1366863	CallExpression	DeleteAll ( )		1366859	0					
ANR	1366864	Callee	DeleteAll		1366859	0					
ANR	1366865	Identifier	DeleteAll		1366859	0					
ANR	1366866	ArgumentList			1366859	1					
ANR	1366867	Identifier	ForkWork :: ~ForkWork		1366859	1					
ANR	1366868	ParameterList			1366859	2					
ANR	1366869	CFGEntryNode	ENTRY		1366859		True				
ANR	1366870	CFGExitNode	EXIT		1366859		True				
ANR	1366871	Function	ForkWork :: setMaxWorkers	118:0:2714:2993							
ANR	1366872	FunctionDef	ForkWork :: setMaxWorkers (int max_workers)		1366871	0					
ANR	1366873	CompoundStatement		120:0:2762:2993	1366871	0					
ANR	1366874	IdentifierDeclStatement	ifdef WIN32 max_workers = 0 ;	121:2:2766:2794	1366871	0	True				
ANR	1366875	IdentifierDecl	max_workers = 0		1366871	0					
ANR	1366876	IdentifierDeclType	ifdef WIN32		1366871	0					
ANR	1366877	Identifier	max_workers		1366871	1					
ANR	1366878	AssignmentExpression	max_workers = 0		1366871	2		=			
ANR	1366879	Identifier	max_workers		1366871	0					
ANR	1366880	PrimaryExpression	0		1366871	1					
ANR	1366881	IdentifierDeclStatement	endif maxWorkers = max_workers ;	123:2:2798:2829	1366871	1	True				
ANR	1366882	IdentifierDecl	maxWorkers = max_workers		1366871	0					
ANR	1366883	IdentifierDeclType	endif		1366871	0					
ANR	1366884	Identifier	maxWorkers		1366871	1					
ANR	1366885	AssignmentExpression	maxWorkers = max_workers		1366871	2		=			
ANR	1366886	Identifier	max_workers		1366871	0					
ANR	1366887	Identifier	max_workers		1366871	1					
ANR	1366888	IfStatement	if ( workerList . Number ( ) > maxWorkers )		1366871	2					
ANR	1366889	Condition	workerList . Number ( ) > maxWorkers	125:6:2837:2868	1366871	0	True				
ANR	1366890	RelationalExpression	workerList . Number ( ) > maxWorkers		1366871	0		>			
ANR	1366891	CallExpression	workerList . Number ( )		1366871	0					
ANR	1366892	Callee	workerList . Number		1366871	0					
ANR	1366893	MemberAccess	workerList . Number		1366871	0					
ANR	1366894	Identifier	workerList		1366871	0					
ANR	1366895	Identifier	Number		1366871	1					
ANR	1366896	ArgumentList			1366871	1					
ANR	1366897	Identifier	maxWorkers		1366871	1					
ANR	1366898	CompoundStatement		6:41:109:109	1366871	1					
ANR	1366899	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Warning: # forked workers (%d) exceeds new max (%d)\\n"" , workerList . Number ( ) , maxWorkers )"	126:2:2876:2988	1366871	0	True				
ANR	1366900	CallExpression	"dprintf ( D_FULLDEBUG , ""Warning: # forked workers (%d) exceeds new max (%d)\\n"" , workerList . Number ( ) , maxWorkers )"		1366871	0					
ANR	1366901	Callee	dprintf		1366871	0					
ANR	1366902	Identifier	dprintf		1366871	0					
ANR	1366903	ArgumentList	D_FULLDEBUG		1366871	1					
ANR	1366904	Argument	D_FULLDEBUG		1366871	0					
ANR	1366905	Identifier	D_FULLDEBUG		1366871	0					
ANR	1366906	Argument	"""Warning: # forked workers (%d) exceeds new max (%d)\\n"""		1366871	1					
ANR	1366907	PrimaryExpression	"""Warning: # forked workers (%d) exceeds new max (%d)\\n"""		1366871	0					
ANR	1366908	Argument	workerList . Number ( )		1366871	2					
ANR	1366909	CallExpression	workerList . Number ( )		1366871	0					
ANR	1366910	Callee	workerList . Number		1366871	0					
ANR	1366911	MemberAccess	workerList . Number		1366871	0					
ANR	1366912	Identifier	workerList		1366871	0					
ANR	1366913	Identifier	Number		1366871	1					
ANR	1366914	ArgumentList			1366871	1					
ANR	1366915	Argument	maxWorkers		1366871	3					
ANR	1366916	Identifier	maxWorkers		1366871	0					
ANR	1366917	ReturnType	void		1366871	1					
ANR	1366918	Identifier	ForkWork :: setMaxWorkers		1366871	2					
ANR	1366919	ParameterList	int max_workers		1366871	3					
ANR	1366920	Parameter	int max_workers	119:25:2744:2758	1366871	0	True				
ANR	1366921	ParameterType	int		1366871	0					
ANR	1366922	Identifier	max_workers		1366871	1					
ANR	1366923	CFGEntryNode	ENTRY		1366871		True				
ANR	1366924	CFGExitNode	EXIT		1366871		True				
ANR	1366925	Symbol	maxWorkers		1366871						
ANR	1366926	Symbol	max_workers		1366871						
ANR	1366927	Symbol	workerList		1366871						
ANR	1366928	Symbol	workerList . Number		1366871						
ANR	1366929	Symbol	D_FULLDEBUG		1366871						
ANR	1366930	Function	ForkWork :: DeleteAll	131:0:3033:3275							
ANR	1366931	FunctionDef	ForkWork :: DeleteAll ()		1366930	0					
ANR	1366932	CompoundStatement		133:0:3065:3275	1366930	0					
ANR	1366933	IdentifierDeclStatement	ForkWorker * worker ;	134:1:3068:3086	1366930	0	True				
ANR	1366934	IdentifierDecl	* worker		1366930	0					
ANR	1366935	IdentifierDeclType	ForkWorker *		1366930	0					
ANR	1366936	Identifier	worker		1366930	1					
ANR	1366937	ExpressionStatement	KillAll ( true )	137:1:3107:3122	1366930	1	True				
ANR	1366938	CallExpression	KillAll ( true )		1366930	0					
ANR	1366939	Callee	KillAll		1366930	0					
ANR	1366940	Identifier	KillAll		1366930	0					
ANR	1366941	ArgumentList	true		1366930	1					
ANR	1366942	Argument	true		1366930	0					
ANR	1366943	Identifier	true		1366930	0					
ANR	1366944	ExpressionStatement	workerList . Rewind ( )	140:1:3152:3172	1366930	2	True				
ANR	1366945	CallExpression	workerList . Rewind ( )		1366930	0					
ANR	1366946	Callee	workerList . Rewind		1366930	0					
ANR	1366947	MemberAccess	workerList . Rewind		1366930	0					
ANR	1366948	Identifier	workerList		1366930	0					
ANR	1366949	Identifier	Rewind		1366930	1					
ANR	1366950	ArgumentList			1366930	1					
ANR	1366951	WhileStatement	while ( workerList . Next ( worker ) )		1366930	3					
ANR	1366952	Condition	workerList . Next ( worker )	141:9:3183:3207	1366930	0	True				
ANR	1366953	CallExpression	workerList . Next ( worker )		1366930	0					
ANR	1366954	Callee	workerList . Next		1366930	0					
ANR	1366955	MemberAccess	workerList . Next		1366930	0					
ANR	1366956	Identifier	workerList		1366930	0					
ANR	1366957	Identifier	Next		1366930	1					
ANR	1366958	ArgumentList	worker		1366930	1					
ANR	1366959	Argument	worker		1366930	0					
ANR	1366960	Identifier	worker		1366930	0					
ANR	1366961	CompoundStatement		9:37:145:145	1366930	1					
ANR	1366962	ExpressionStatement	workerList . DeleteCurrent ( )	142:2:3215:3242	1366930	0	True				
ANR	1366963	CallExpression	workerList . DeleteCurrent ( )		1366930	0					
ANR	1366964	Callee	workerList . DeleteCurrent		1366930	0					
ANR	1366965	MemberAccess	workerList . DeleteCurrent		1366930	0					
ANR	1366966	Identifier	workerList		1366930	0					
ANR	1366967	Identifier	DeleteCurrent		1366930	1					
ANR	1366968	ArgumentList			1366930	1					
ANR	1366969	Statement	delete	143:2:3246:3251	1366930	1	True				
ANR	1366970	ExpressionStatement	worker	143:9:3253:3259	1366930	2	True				
ANR	1366971	Identifier	worker		1366930	0					
ANR	1366972	ReturnStatement	return 0 ;	145:1:3265:3273	1366930	4	True				
ANR	1366973	PrimaryExpression	0		1366930	0					
ANR	1366974	ReturnType	int		1366930	1					
ANR	1366975	Identifier	ForkWork :: DeleteAll		1366930	2					
ANR	1366976	ParameterList			1366930	3					
ANR	1366977	CFGEntryNode	ENTRY		1366930		True				
ANR	1366978	CFGExitNode	EXIT		1366930		True				
ANR	1366979	Symbol	true		1366930						
ANR	1366980	Symbol	workerList		1366930						
ANR	1366981	Symbol	worker		1366930						
ANR	1366982	Symbol	workerList . Next		1366930						
ANR	1366983	Function	ForkWork :: KillAll	149:0:3303:3902							
ANR	1366984	FunctionDef	ForkWork :: KillAll (bool force)		1366983	0					
ANR	1366985	CompoundStatement		151:0:3339:3902	1366983	0					
ANR	1366986	IdentifierDeclStatement	ForkWorker * worker ;	152:1:3342:3360	1366983	0	True				
ANR	1366987	IdentifierDecl	* worker		1366983	0					
ANR	1366988	IdentifierDeclType	ForkWorker *		1366983	0					
ANR	1366989	Identifier	worker		1366983	1					
ANR	1366990	IdentifierDeclStatement	int mypid = getpid ( ) ;	153:1:3363:3384	1366983	1	True				
ANR	1366991	IdentifierDecl	mypid = getpid ( )		1366983	0					
ANR	1366992	IdentifierDeclType	int		1366983	0					
ANR	1366993	Identifier	mypid		1366983	1					
ANR	1366994	AssignmentExpression	mypid = getpid ( )		1366983	2		=			
ANR	1366995	Identifier	mypid		1366983	0					
ANR	1366996	CallExpression	getpid ( )		1366983	1					
ANR	1366997	Callee	getpid		1366983	0					
ANR	1366998	Identifier	getpid		1366983	0					
ANR	1366999	ArgumentList			1366983	1					
ANR	1367000	IdentifierDeclStatement	int num_killed = 0 ;	154:1:3387:3406	1366983	2	True				
ANR	1367001	IdentifierDecl	num_killed = 0		1366983	0					
ANR	1367002	IdentifierDeclType	int		1366983	0					
ANR	1367003	Identifier	num_killed		1366983	1					
ANR	1367004	AssignmentExpression	num_killed = 0		1366983	2		=			
ANR	1367005	Identifier	num_killed		1366983	0					
ANR	1367006	PrimaryExpression	0		1366983	1					
ANR	1367007	ExpressionStatement	workerList . Rewind ( )	157:1:3436:3456	1366983	3	True				
ANR	1367008	CallExpression	workerList . Rewind ( )		1366983	0					
ANR	1367009	Callee	workerList . Rewind		1366983	0					
ANR	1367010	MemberAccess	workerList . Rewind		1366983	0					
ANR	1367011	Identifier	workerList		1366983	0					
ANR	1367012	Identifier	Rewind		1366983	1					
ANR	1367013	ArgumentList			1366983	1					
ANR	1367014	WhileStatement	while ( workerList . Next ( worker ) )		1366983	4					
ANR	1367015	Condition	workerList . Next ( worker )	158:9:3467:3491	1366983	0	True				
ANR	1367016	CallExpression	workerList . Next ( worker )		1366983	0					
ANR	1367017	Callee	workerList . Next		1366983	0					
ANR	1367018	MemberAccess	workerList . Next		1366983	0					
ANR	1367019	Identifier	workerList		1366983	0					
ANR	1367020	Identifier	Next		1366983	1					
ANR	1367021	ArgumentList	worker		1366983	1					
ANR	1367022	Argument	worker		1366983	0					
ANR	1367023	Identifier	worker		1366983	0					
ANR	1367024	CompoundStatement		8:37:155:155	1366983	1					
ANR	1367025	IfStatement	if ( mypid == worker -> getParent ( ) )		1366983	0					
ANR	1367026	Condition	mypid == worker -> getParent ( )	160:7:3536:3563	1366983	0	True				
ANR	1367027	EqualityExpression	mypid == worker -> getParent ( )		1366983	0		==			
ANR	1367028	Identifier	mypid		1366983	0					
ANR	1367029	CallExpression	worker -> getParent ( )		1366983	1					
ANR	1367030	Callee	worker -> getParent		1366983	0					
ANR	1367031	PtrMemberAccess	worker -> getParent		1366983	0					
ANR	1367032	Identifier	worker		1366983	0					
ANR	1367033	Identifier	getParent		1366983	1					
ANR	1367034	ArgumentList			1366983	1					
ANR	1367035	CompoundStatement		10:38:227:227	1366983	1					
ANR	1367036	ExpressionStatement	num_killed ++	161:3:3572:3584	1366983	0	True				
ANR	1367037	PostIncDecOperationExpression	num_killed ++		1366983	0					
ANR	1367038	Identifier	num_killed		1366983	0					
ANR	1367039	IncDec	++		1366983	1					
ANR	1367040	IfStatement	if ( force )		1366983	1					
ANR	1367041	Condition	force	162:8:3594:3598	1366983	0	True				
ANR	1367042	Identifier	force		1366983	0					
ANR	1367043	CompoundStatement		12:16:262:262	1366983	1					
ANR	1367044	ExpressionStatement	"daemonCore -> Send_Signal ( worker -> getPid ( ) , SIGKILL )"	163:4:3608:3660	1366983	0	True				
ANR	1367045	CallExpression	"daemonCore -> Send_Signal ( worker -> getPid ( ) , SIGKILL )"		1366983	0					
ANR	1367046	Callee	daemonCore -> Send_Signal		1366983	0					
ANR	1367047	PtrMemberAccess	daemonCore -> Send_Signal		1366983	0					
ANR	1367048	Identifier	daemonCore		1366983	0					
ANR	1367049	Identifier	Send_Signal		1366983	1					
ANR	1367050	ArgumentList	worker -> getPid ( )		1366983	1					
ANR	1367051	Argument	worker -> getPid ( )		1366983	0					
ANR	1367052	CallExpression	worker -> getPid ( )		1366983	0					
ANR	1367053	Callee	worker -> getPid		1366983	0					
ANR	1367054	PtrMemberAccess	worker -> getPid		1366983	0					
ANR	1367055	Identifier	worker		1366983	0					
ANR	1367056	Identifier	getPid		1366983	1					
ANR	1367057	ArgumentList			1366983	1					
ANR	1367058	Argument	SIGKILL		1366983	1					
ANR	1367059	Identifier	SIGKILL		1366983	0					
ANR	1367060	ElseStatement	else		1366983	0					
ANR	1367061	CompoundStatement		14:10:332:332	1366983	0					
ANR	1367062	ExpressionStatement	"daemonCore -> Send_Signal ( worker -> getPid ( ) , SIGTERM )"	165:4:3678:3730	1366983	0	True				
ANR	1367063	CallExpression	"daemonCore -> Send_Signal ( worker -> getPid ( ) , SIGTERM )"		1366983	0					
ANR	1367064	Callee	daemonCore -> Send_Signal		1366983	0					
ANR	1367065	PtrMemberAccess	daemonCore -> Send_Signal		1366983	0					
ANR	1367066	Identifier	daemonCore		1366983	0					
ANR	1367067	Identifier	Send_Signal		1366983	1					
ANR	1367068	ArgumentList	worker -> getPid ( )		1366983	1					
ANR	1367069	Argument	worker -> getPid ( )		1366983	0					
ANR	1367070	CallExpression	worker -> getPid ( )		1366983	0					
ANR	1367071	Callee	worker -> getPid		1366983	0					
ANR	1367072	PtrMemberAccess	worker -> getPid		1366983	0					
ANR	1367073	Identifier	worker		1366983	0					
ANR	1367074	Identifier	getPid		1366983	1					
ANR	1367075	ArgumentList			1366983	1					
ANR	1367076	Argument	SIGTERM		1366983	1					
ANR	1367077	Identifier	SIGTERM		1366983	0					
ANR	1367078	IfStatement	if ( num_killed )		1366983	5					
ANR	1367079	Condition	num_killed	171:6:3784:3793	1366983	0	True				
ANR	1367080	Identifier	num_killed		1366983	0					
ANR	1367081	CompoundStatement		21:19:457:457	1366983	1					
ANR	1367082	ExpressionStatement	"dprintf ( D_ALWAYS , ""ForkWork %d: Killed %d jobs\\n"" , mypid , workerList . Number ( ) )"	172:2:3801:3886	1366983	0	True				
ANR	1367083	CallExpression	"dprintf ( D_ALWAYS , ""ForkWork %d: Killed %d jobs\\n"" , mypid , workerList . Number ( ) )"		1366983	0					
ANR	1367084	Callee	dprintf		1366983	0					
ANR	1367085	Identifier	dprintf		1366983	0					
ANR	1367086	ArgumentList	D_ALWAYS		1366983	1					
ANR	1367087	Argument	D_ALWAYS		1366983	0					
ANR	1367088	Identifier	D_ALWAYS		1366983	0					
ANR	1367089	Argument	"""ForkWork %d: Killed %d jobs\\n"""		1366983	1					
ANR	1367090	PrimaryExpression	"""ForkWork %d: Killed %d jobs\\n"""		1366983	0					
ANR	1367091	Argument	mypid		1366983	2					
ANR	1367092	Identifier	mypid		1366983	0					
ANR	1367093	Argument	workerList . Number ( )		1366983	3					
ANR	1367094	CallExpression	workerList . Number ( )		1366983	0					
ANR	1367095	Callee	workerList . Number		1366983	0					
ANR	1367096	MemberAccess	workerList . Number		1366983	0					
ANR	1367097	Identifier	workerList		1366983	0					
ANR	1367098	Identifier	Number		1366983	1					
ANR	1367099	ArgumentList			1366983	1					
ANR	1367100	ReturnStatement	return 0 ;	175:1:3892:3900	1366983	6	True				
ANR	1367101	PrimaryExpression	0		1366983	0					
ANR	1367102	ReturnType	int		1366983	1					
ANR	1367103	Identifier	ForkWork :: KillAll		1366983	2					
ANR	1367104	ParameterList	bool force		1366983	3					
ANR	1367105	Parameter	bool force	150:19:3326:3335	1366983	0	True				
ANR	1367106	ParameterType	bool		1366983	0					
ANR	1367107	Identifier	force		1366983	1					
ANR	1367108	CFGEntryNode	ENTRY		1366983		True				
ANR	1367109	CFGExitNode	EXIT		1366983		True				
ANR	1367110	Symbol	num_killed		1366983						
ANR	1367111	Symbol	mypid		1366983						
ANR	1367112	Symbol	worker -> getParent		1366983						
ANR	1367113	Symbol	workerList		1366983						
ANR	1367114	Symbol	D_ALWAYS		1366983						
ANR	1367115	Symbol	workerList . Number		1366983						
ANR	1367116	Symbol	workerList . Next		1366983						
ANR	1367117	Symbol	SIGKILL		1366983						
ANR	1367118	Symbol	* worker		1366983						
ANR	1367119	Symbol	worker -> getPid		1366983						
ANR	1367120	Symbol	daemonCore		1366983						
ANR	1367121	Symbol	force		1366983						
ANR	1367122	Symbol	SIGTERM		1366983						
ANR	1367123	Symbol	worker		1366983						
ANR	1367124	Symbol	getpid		1366983						
ANR	1367125	Function	ForkWork :: NewJob	179:0:3939:4537							
ANR	1367126	FunctionDef	ForkWork :: NewJob ()		1367125	0					
ANR	1367127	CompoundStatement		181:0:3975:4537	1367125	0					
ANR	1367128	IfStatement	if ( workerList . Number ( ) >= maxWorkers )		1367125	0					
ANR	1367129	Condition	workerList . Number ( ) >= maxWorkers	183:6:4003:4035	1367125	0	True				
ANR	1367130	RelationalExpression	workerList . Number ( ) >= maxWorkers		1367125	0		>=			
ANR	1367131	CallExpression	workerList . Number ( )		1367125	0					
ANR	1367132	Callee	workerList . Number		1367125	0					
ANR	1367133	MemberAccess	workerList . Number		1367125	0					
ANR	1367134	Identifier	workerList		1367125	0					
ANR	1367135	Identifier	Number		1367125	1					
ANR	1367136	ArgumentList			1367125	1					
ANR	1367137	Identifier	maxWorkers		1367125	1					
ANR	1367138	CompoundStatement		3:42:63:63	1367125	1					
ANR	1367139	IfStatement	if ( maxWorkers )		1367125	0					
ANR	1367140	Condition	maxWorkers	184:7:4048:4057	1367125	0	True				
ANR	1367141	Identifier	maxWorkers		1367125	0					
ANR	1367142	CompoundStatement		4:20:85:85	1367125	1					
ANR	1367143	ExpressionStatement	"dprintf ( D_ALWAYS , ""ForkWork: not forking because reached max workers %d\\n"" , maxWorkers )"	185:3:4066:4155	1367125	0	True				
ANR	1367144	CallExpression	"dprintf ( D_ALWAYS , ""ForkWork: not forking because reached max workers %d\\n"" , maxWorkers )"		1367125	0					
ANR	1367145	Callee	dprintf		1367125	0					
ANR	1367146	Identifier	dprintf		1367125	0					
ANR	1367147	ArgumentList	D_ALWAYS		1367125	1					
ANR	1367148	Argument	D_ALWAYS		1367125	0					
ANR	1367149	Identifier	D_ALWAYS		1367125	0					
ANR	1367150	Argument	"""ForkWork: not forking because reached max workers %d\\n"""		1367125	1					
ANR	1367151	PrimaryExpression	"""ForkWork: not forking because reached max workers %d\\n"""		1367125	0					
ANR	1367152	Argument	maxWorkers		1367125	2					
ANR	1367153	Identifier	maxWorkers		1367125	0					
ANR	1367154	ReturnStatement	return FORK_BUSY ;	187:2:4163:4179	1367125	1	True				
ANR	1367155	Identifier	FORK_BUSY		1367125	0					
ANR	1367156	IdentifierDeclStatement	ForkWorker * worker = new ForkWorker ( ) ;	191:1:4209:4247	1367125	1	True				
ANR	1367157	IdentifierDecl	* worker = new ForkWorker ( )		1367125	0					
ANR	1367158	IdentifierDeclType	ForkWorker *		1367125	0					
ANR	1367159	Identifier	worker		1367125	1					
ANR	1367160	AssignmentExpression	* worker = new ForkWorker ( )		1367125	2		=			
ANR	1367161	Identifier	worker		1367125	0					
ANR	1367162	UnaryExpression	new ForkWorker ( )		1367125	1					
ANR	1367163	IdentifierDeclStatement	ForkStatus status = worker -> Fork ( ) ;	192:1:4250:4285	1367125	2	True				
ANR	1367164	IdentifierDecl	status = worker -> Fork ( )		1367125	0					
ANR	1367165	IdentifierDeclType	ForkStatus		1367125	0					
ANR	1367166	Identifier	status		1367125	1					
ANR	1367167	AssignmentExpression	status = worker -> Fork ( )		1367125	2		=			
ANR	1367168	Identifier	status		1367125	0					
ANR	1367169	CallExpression	worker -> Fork ( )		1367125	1					
ANR	1367170	Callee	worker -> Fork		1367125	0					
ANR	1367171	PtrMemberAccess	worker -> Fork		1367125	0					
ANR	1367172	Identifier	worker		1367125	0					
ANR	1367173	Identifier	Fork		1367125	1					
ANR	1367174	ArgumentList			1367125	1					
ANR	1367175	IfStatement	if ( FORK_PARENT == status )		1367125	3					
ANR	1367176	Condition	FORK_PARENT == status	195:6:4329:4349	1367125	0	True				
ANR	1367177	EqualityExpression	FORK_PARENT == status		1367125	0		==			
ANR	1367178	Identifier	FORK_PARENT		1367125	0					
ANR	1367179	Identifier	status		1367125	1					
ANR	1367180	CompoundStatement		15:30:377:377	1367125	1					
ANR	1367181	ExpressionStatement	workerList . Append ( worker )	196:2:4357:4384	1367125	0	True				
ANR	1367182	CallExpression	workerList . Append ( worker )		1367125	0					
ANR	1367183	Callee	workerList . Append		1367125	0					
ANR	1367184	MemberAccess	workerList . Append		1367125	0					
ANR	1367185	Identifier	workerList		1367125	0					
ANR	1367186	Identifier	Append		1367125	1					
ANR	1367187	ArgumentList	worker		1367125	1					
ANR	1367188	Argument	worker		1367125	0					
ANR	1367189	Identifier	worker		1367125	0					
ANR	1367190	ReturnStatement	return FORK_PARENT ;	197:2:4388:4406	1367125	1	True				
ANR	1367191	Identifier	FORK_PARENT		1367125	0					
ANR	1367192	ElseStatement	else		1367125	0					
ANR	1367193	IfStatement	if ( FORK_FAILED == status )		1367125	0					
ANR	1367194	Condition	FORK_FAILED == status	198:13:4421:4441	1367125	0	True				
ANR	1367195	EqualityExpression	FORK_FAILED == status		1367125	0		==			
ANR	1367196	Identifier	FORK_FAILED		1367125	0					
ANR	1367197	Identifier	status		1367125	1					
ANR	1367198	CompoundStatement		18:37:469:469	1367125	1					
ANR	1367199	Statement	delete	199:2:4449:4454	1367125	0	True				
ANR	1367200	ExpressionStatement	worker	199:9:4456:4462	1367125	1	True				
ANR	1367201	Identifier	worker		1367125	0					
ANR	1367202	ReturnStatement	return FORK_FAILED ;	200:2:4466:4484	1367125	2	True				
ANR	1367203	Identifier	FORK_FAILED		1367125	0					
ANR	1367204	ElseStatement	else		1367125	0					
ANR	1367205	CompoundStatement		21:8:518:518	1367125	0					
ANR	1367206	Statement	delete	202:2:4498:4503	1367125	0	True				
ANR	1367207	ExpressionStatement	worker	202:9:4505:4511	1367125	1	True				
ANR	1367208	Identifier	worker		1367125	0					
ANR	1367209	ReturnStatement	return FORK_CHILD ;	203:2:4515:4532	1367125	2	True				
ANR	1367210	Identifier	FORK_CHILD		1367125	0					
ANR	1367211	ReturnType	ForkStatus		1367125	1					
ANR	1367212	Identifier	ForkWork :: NewJob		1367125	2					
ANR	1367213	ParameterList			1367125	3					
ANR	1367214	CFGEntryNode	ENTRY		1367125		True				
ANR	1367215	CFGExitNode	EXIT		1367125		True				
ANR	1367216	Symbol	maxWorkers		1367125						
ANR	1367217	Symbol	FORK_BUSY		1367125						
ANR	1367218	Symbol	worker -> Fork		1367125						
ANR	1367219	Symbol	FORK_PARENT		1367125						
ANR	1367220	Symbol	workerList		1367125						
ANR	1367221	Symbol	D_ALWAYS		1367125						
ANR	1367222	Symbol	workerList . Number		1367125						
ANR	1367223	Symbol	FORK_FAILED		1367125						
ANR	1367224	Symbol	FORK_CHILD		1367125						
ANR	1367225	Symbol	worker		1367125						
ANR	1367226	Symbol	status		1367125						
ANR	1367227	Symbol	* worker		1367125						
ANR	1367228	Function	ForkWork :: WorkerDone	208:0:4564:4729							
ANR	1367229	FunctionDef	ForkWork :: WorkerDone (int exit_status)		1367228	0					
ANR	1367230	CompoundStatement		210:0:4609:4729	1367228	0					
ANR	1367231	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ForkWork: Child %d done, status %d\\n"" , getpid ( ) , exit_status )"	211:1:4612:4705	1367228	0	True				
ANR	1367232	CallExpression	"dprintf ( D_FULLDEBUG , ""ForkWork: Child %d done, status %d\\n"" , getpid ( ) , exit_status )"		1367228	0					
ANR	1367233	Callee	dprintf		1367228	0					
ANR	1367234	Identifier	dprintf		1367228	0					
ANR	1367235	ArgumentList	D_FULLDEBUG		1367228	1					
ANR	1367236	Argument	D_FULLDEBUG		1367228	0					
ANR	1367237	Identifier	D_FULLDEBUG		1367228	0					
ANR	1367238	Argument	"""ForkWork: Child %d done, status %d\\n"""		1367228	1					
ANR	1367239	PrimaryExpression	"""ForkWork: Child %d done, status %d\\n"""		1367228	0					
ANR	1367240	Argument	getpid ( )		1367228	2					
ANR	1367241	CallExpression	getpid ( )		1367228	0					
ANR	1367242	Callee	getpid		1367228	0					
ANR	1367243	Identifier	getpid		1367228	0					
ANR	1367244	ArgumentList			1367228	1					
ANR	1367245	Argument	exit_status		1367228	3					
ANR	1367246	Identifier	exit_status		1367228	0					
ANR	1367247	ExpressionStatement	exit ( exit_status )	214:1:4708:4727	1367228	1	True				
ANR	1367248	CallExpression	exit ( exit_status )		1367228	0					
ANR	1367249	Callee	exit		1367228	0					
ANR	1367250	Identifier	exit		1367228	0					
ANR	1367251	ArgumentList	exit_status		1367228	1					
ANR	1367252	Argument	exit_status		1367228	0					
ANR	1367253	Identifier	exit_status		1367228	0					
ANR	1367254	ReturnType	void		1367228	1					
ANR	1367255	Identifier	ForkWork :: WorkerDone		1367228	2					
ANR	1367256	ParameterList	int exit_status		1367228	3					
ANR	1367257	Parameter	int exit_status	209:22:4591:4605	1367228	0	True				
ANR	1367258	ParameterType	int		1367228	0					
ANR	1367259	Identifier	exit_status		1367228	1					
ANR	1367260	CFGEntryNode	ENTRY		1367228		True				
ANR	1367261	CFGExitNode	EXIT		1367228		True				
ANR	1367262	Symbol	D_FULLDEBUG		1367228						
ANR	1367263	Symbol	exit_status		1367228						
ANR	1367264	Symbol	getpid		1367228						
ANR	1367265	DeclStmt									
ANR	1367266	Decl							ForkWorker	ForkWorker *	worker
