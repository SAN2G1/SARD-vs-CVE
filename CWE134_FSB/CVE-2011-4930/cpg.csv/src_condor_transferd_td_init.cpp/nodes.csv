command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4266349	File	data/converged/CVE-2011-4930_htcondor/src_condor_transferd_td_init.cpp								
ANR	4266350	DeclStmt									
ANR	4266351	Decl							void	void ( void )	usage
ANR	4266352	Function	TransferD :: TransferD	34:0:1111:1471							
ANR	4266353	FunctionDef	TransferD :: TransferD ()		4266352	0					
ANR	4266354	CompoundStatement		38:0:1270:1471	4266352	0					
ANR	4266355	ExpressionStatement	m_initialized = FALSE	39:1:1273:1294	4266352	0	True				
ANR	4266356	AssignmentExpression	m_initialized = FALSE		4266352	0		=			
ANR	4266357	Identifier	m_initialized		4266352	0					
ANR	4266358	Identifier	FALSE		4266352	1					
ANR	4266359	ExpressionStatement	m_update_sock = NULL	40:1:1297:1317	4266352	1	True				
ANR	4266360	AssignmentExpression	m_update_sock = NULL		4266352	0		=			
ANR	4266361	Identifier	m_update_sock		4266352	0					
ANR	4266362	Identifier	NULL		4266352	1					
ANR	4266363	ExpressionStatement	m_inactivity_timer = time ( NULL )	44:1:1438:1469	4266352	2	True				
ANR	4266364	AssignmentExpression	m_inactivity_timer = time ( NULL )		4266352	0		=			
ANR	4266365	Identifier	m_inactivity_timer		4266352	0					
ANR	4266366	CallExpression	time ( NULL )		4266352	1					
ANR	4266367	Callee	time		4266352	0					
ANR	4266368	Identifier	time		4266352	0					
ANR	4266369	ArgumentList	NULL		4266352	1					
ANR	4266370	Argument	NULL		4266352	0					
ANR	4266371	Identifier	NULL		4266352	0					
ANR	4266372	Identifier	TransferD :: TransferD		4266352	1					
ANR	4266373	ParameterList			4266352	2					
ANR	4266374	CFGEntryNode	ENTRY		4266352		True				
ANR	4266375	CFGExitNode	EXIT		4266352		True				
ANR	4266376	Symbol	m_initialized		4266352						
ANR	4266377	Symbol	NULL		4266352						
ANR	4266378	Symbol	m_inactivity_timer		4266352						
ANR	4266379	Symbol	FALSE		4266352						
ANR	4266380	Symbol	time		4266352						
ANR	4266381	Symbol	m_update_sock		4266352						
ANR	4266382	Function	TransferD :: ~TransferD	47:0:1474:1763							
ANR	4266383	FunctionDef	TransferD :: ~TransferD ()		4266382	0					
ANR	4266384	CompoundStatement		48:0:1498:1763	4266382	0					
ANR	4266385	IdentifierDeclStatement	MyString key ;	49:1:1502:1514	4266382	0	True				
ANR	4266386	IdentifierDecl	key		4266382	0					
ANR	4266387	IdentifierDeclType	MyString		4266382	0					
ANR	4266388	Identifier	key		4266382	1					
ANR	4266389	IdentifierDeclStatement	TransferRequest * treq ;	50:1:1517:1538	4266382	1	True				
ANR	4266390	IdentifierDecl	* treq		4266382	0					
ANR	4266391	IdentifierDeclType	TransferRequest *		4266382	0					
ANR	4266392	Identifier	treq		4266382	1					
ANR	4266393	IfStatement	if ( m_initialized == TRUE )		4266382	2					
ANR	4266394	Condition	m_initialized == TRUE	53:5:1582:1602	4266382	0	True				
ANR	4266395	EqualityExpression	m_initialized == TRUE		4266382	0		==			
ANR	4266396	Identifier	m_initialized		4266382	0					
ANR	4266397	Identifier	TRUE		4266382	1					
ANR	4266398	CompoundStatement		6:28:106:106	4266382	1					
ANR	4266399	ExpressionStatement	m_treqs . startIterations ( )	54:2:1609:1634	4266382	0	True				
ANR	4266400	CallExpression	m_treqs . startIterations ( )		4266382	0					
ANR	4266401	Callee	m_treqs . startIterations		4266382	0					
ANR	4266402	MemberAccess	m_treqs . startIterations		4266382	0					
ANR	4266403	Identifier	m_treqs		4266382	0					
ANR	4266404	Identifier	startIterations		4266382	1					
ANR	4266405	ArgumentList			4266382	1					
ANR	4266406	WhileStatement	while ( m_treqs . iterate ( treq ) )		4266382	1					
ANR	4266407	Condition	m_treqs . iterate ( treq )	55:8:1644:1664	4266382	0	True				
ANR	4266408	CallExpression	m_treqs . iterate ( treq )		4266382	0					
ANR	4266409	Callee	m_treqs . iterate		4266382	0					
ANR	4266410	MemberAccess	m_treqs . iterate		4266382	0					
ANR	4266411	Identifier	m_treqs		4266382	0					
ANR	4266412	Identifier	iterate		4266382	1					
ANR	4266413	ArgumentList	treq		4266382	1					
ANR	4266414	Argument	treq		4266382	0					
ANR	4266415	Identifier	treq		4266382	0					
ANR	4266416	CompoundStatement		8:31:168:168	4266382	1					
ANR	4266417	ExpressionStatement	m_treqs . getCurrentKey ( key )	56:3:1672:1698	4266382	0	True				
ANR	4266418	CallExpression	m_treqs . getCurrentKey ( key )		4266382	0					
ANR	4266419	Callee	m_treqs . getCurrentKey		4266382	0					
ANR	4266420	MemberAccess	m_treqs . getCurrentKey		4266382	0					
ANR	4266421	Identifier	m_treqs		4266382	0					
ANR	4266422	Identifier	getCurrentKey		4266382	1					
ANR	4266423	ArgumentList	key		4266382	1					
ANR	4266424	Argument	key		4266382	0					
ANR	4266425	Identifier	key		4266382	0					
ANR	4266426	ExpressionStatement	m_treqs . remove ( key )	57:3:1703:1722	4266382	1	True				
ANR	4266427	CallExpression	m_treqs . remove ( key )		4266382	0					
ANR	4266428	Callee	m_treqs . remove		4266382	0					
ANR	4266429	MemberAccess	m_treqs . remove		4266382	0					
ANR	4266430	Identifier	m_treqs		4266382	0					
ANR	4266431	Identifier	remove		4266382	1					
ANR	4266432	ArgumentList	key		4266382	1					
ANR	4266433	Argument	key		4266382	0					
ANR	4266434	Identifier	key		4266382	0					
ANR	4266435	Statement	delete	58:3:1727:1732	4266382	2	True				
ANR	4266436	ExpressionStatement	treq	58:10:1734:1738	4266382	3	True				
ANR	4266437	Identifier	treq		4266382	0					
ANR	4266438	ExpressionStatement	treq = NULL	59:3:1743:1754	4266382	4	True				
ANR	4266439	AssignmentExpression	treq = NULL		4266382	0		=			
ANR	4266440	Identifier	treq		4266382	0					
ANR	4266441	Identifier	NULL		4266382	1					
ANR	4266442	Identifier	TransferD :: ~TransferD		4266382	1					
ANR	4266443	ParameterList			4266382	2					
ANR	4266444	CFGEntryNode	ENTRY		4266382		True				
ANR	4266445	CFGExitNode	EXIT		4266382		True				
ANR	4266446	Symbol	m_initialized		4266382						
ANR	4266447	Symbol	NULL		4266382						
ANR	4266448	Symbol	TRUE		4266382						
ANR	4266449	Symbol	treq		4266382						
ANR	4266450	Symbol	m_treqs		4266382						
ANR	4266451	Symbol	key		4266382						
ANR	4266452	Symbol	m_treqs . iterate		4266382						
ANR	4266453	Function	TransferD :: init	67:0:1883:4736							
ANR	4266454	FunctionDef	"TransferD :: init (int argc , char * argv [ ])"		4266453	0					
ANR	4266455	CompoundStatement		69:0:1928:4736	4266453	0					
ANR	4266456	IdentifierDeclStatement	RegisterResult ret ;	70:1:1931:1949	4266453	0	True				
ANR	4266457	IdentifierDecl	ret		4266453	0					
ANR	4266458	IdentifierDeclType	RegisterResult		4266453	0					
ANR	4266459	Identifier	ret		4266453	1					
ANR	4266460	IdentifierDeclStatement	int i ;	71:1:1952:1957	4266453	1	True				
ANR	4266461	IdentifierDecl	i		4266453	0					
ANR	4266462	IdentifierDeclType	int		4266453	0					
ANR	4266463	Identifier	i		4266453	1					
ANR	4266464	IdentifierDeclStatement	ReliSock * usock = NULL ;	72:1:1960:1982	4266453	2	True				
ANR	4266465	IdentifierDecl	* usock = NULL		4266453	0					
ANR	4266466	IdentifierDeclType	ReliSock *		4266453	0					
ANR	4266467	Identifier	usock		4266453	1					
ANR	4266468	AssignmentExpression	* usock = NULL		4266453	2		=			
ANR	4266469	Identifier	NULL		4266453	0					
ANR	4266470	Identifier	NULL		4266453	1					
ANR	4266471	IdentifierDeclStatement	unsigned long tout ;	73:1:1985:2003	4266453	3	True				
ANR	4266472	IdentifierDecl	tout		4266453	0					
ANR	4266473	IdentifierDeclType	unsigned long		4266453	0					
ANR	4266474	Identifier	tout		4266453	1					
ANR	4266475	ForStatement	for ( i = 1 ; i < argc ; i ++ )		4266453	4					
ANR	4266476	ForInit	i = 1 ;	77:6:2082:2087	4266453	0	True				
ANR	4266477	AssignmentExpression	i = 1		4266453	0		=			
ANR	4266478	Identifier	i		4266453	0					
ANR	4266479	PrimaryExpression	1		4266453	1					
ANR	4266480	Condition	i < argc	77:13:2089:2096	4266453	1	True				
ANR	4266481	RelationalExpression	i < argc		4266453	0		<			
ANR	4266482	Identifier	i		4266453	0					
ANR	4266483	Identifier	argc		4266453	1					
ANR	4266484	PostIncDecOperationExpression	i ++	77:23:2099:2101	4266453	2	True				
ANR	4266485	Identifier	i		4266453	0					
ANR	4266486	IncDec	++		4266453	1					
ANR	4266487	CompoundStatement		9:28:175:175	4266453	3					
ANR	4266488	IfStatement	"if ( strcmp ( argv [ i ] , ""--schedd"" ) == MATCH )"		4266453	0					
ANR	4266489	Condition	"strcmp ( argv [ i ] , ""--schedd"" ) == MATCH"	79:6:2177:2212	4266453	0	True				
ANR	4266490	EqualityExpression	"strcmp ( argv [ i ] , ""--schedd"" ) == MATCH"		4266453	0		==			
ANR	4266491	CallExpression	"strcmp ( argv [ i ] , ""--schedd"" )"		4266453	0					
ANR	4266492	Callee	strcmp		4266453	0					
ANR	4266493	Identifier	strcmp		4266453	0					
ANR	4266494	ArgumentList	argv [ i ]		4266453	1					
ANR	4266495	Argument	argv [ i ]		4266453	0					
ANR	4266496	ArrayIndexing	argv [ i ]		4266453	0					
ANR	4266497	Identifier	argv		4266453	0					
ANR	4266498	Identifier	i		4266453	1					
ANR	4266499	Argument	"""--schedd"""		4266453	1					
ANR	4266500	PrimaryExpression	"""--schedd"""		4266453	0					
ANR	4266501	Identifier	MATCH		4266453	1					
ANR	4266502	CompoundStatement		11:44:286:286	4266453	1					
ANR	4266503	IfStatement	if ( i + 1 < argc )		4266453	0					
ANR	4266504	Condition	i + 1 < argc	80:7:2224:2233	4266453	0	True				
ANR	4266505	RelationalExpression	i + 1 < argc		4266453	0		<			
ANR	4266506	AdditiveExpression	i + 1		4266453	0		+			
ANR	4266507	Identifier	i		4266453	0					
ANR	4266508	PrimaryExpression	1		4266453	1					
ANR	4266509	Identifier	argc		4266453	1					
ANR	4266510	CompoundStatement		12:19:307:307	4266453	1					
ANR	4266511	ExpressionStatement	g_td . m_features . set_schedd_sinful ( argv [ i + 1 ] )	81:4:2242:2286	4266453	0	True				
ANR	4266512	CallExpression	g_td . m_features . set_schedd_sinful ( argv [ i + 1 ] )		4266453	0					
ANR	4266513	Callee	g_td . m_features . set_schedd_sinful		4266453	0					
ANR	4266514	MemberAccess	g_td . m_features . set_schedd_sinful		4266453	0					
ANR	4266515	MemberAccess	g_td . m_features		4266453	0					
ANR	4266516	Identifier	g_td		4266453	0					
ANR	4266517	Identifier	m_features		4266453	1					
ANR	4266518	Identifier	set_schedd_sinful		4266453	1					
ANR	4266519	ArgumentList	argv [ i + 1 ]		4266453	1					
ANR	4266520	Argument	argv [ i + 1 ]		4266453	0					
ANR	4266521	ArrayIndexing	argv [ i + 1 ]		4266453	0					
ANR	4266522	Identifier	argv		4266453	0					
ANR	4266523	AdditiveExpression	i + 1		4266453	1		+			
ANR	4266524	Identifier	i		4266453	0					
ANR	4266525	PrimaryExpression	1		4266453	1					
ANR	4266526	ExpressionStatement	i ++	82:4:2292:2295	4266453	1	True				
ANR	4266527	PostIncDecOperationExpression	i ++		4266453	0					
ANR	4266528	Identifier	i		4266453	0					
ANR	4266529	IncDec	++		4266453	1					
ANR	4266530	IfStatement	"if ( strcmp ( argv [ i ] , ""--timeout"" ) == MATCH )"		4266453	1					
ANR	4266531	Condition	"strcmp ( argv [ i ] , ""--timeout"" ) == MATCH"	88:6:2459:2495	4266453	0	True				
ANR	4266532	EqualityExpression	"strcmp ( argv [ i ] , ""--timeout"" ) == MATCH"		4266453	0		==			
ANR	4266533	CallExpression	"strcmp ( argv [ i ] , ""--timeout"" )"		4266453	0					
ANR	4266534	Callee	strcmp		4266453	0					
ANR	4266535	Identifier	strcmp		4266453	0					
ANR	4266536	ArgumentList	argv [ i ]		4266453	1					
ANR	4266537	Argument	argv [ i ]		4266453	0					
ANR	4266538	ArrayIndexing	argv [ i ]		4266453	0					
ANR	4266539	Identifier	argv		4266453	0					
ANR	4266540	Identifier	i		4266453	1					
ANR	4266541	Argument	"""--timeout"""		4266453	1					
ANR	4266542	PrimaryExpression	"""--timeout"""		4266453	0					
ANR	4266543	Identifier	MATCH		4266453	1					
ANR	4266544	CompoundStatement		20:45:569:569	4266453	1					
ANR	4266545	IfStatement	if ( i + 1 < argc )		4266453	0					
ANR	4266546	Condition	i + 1 < argc	89:7:2507:2516	4266453	0	True				
ANR	4266547	RelationalExpression	i + 1 < argc		4266453	0		<			
ANR	4266548	AdditiveExpression	i + 1		4266453	0		+			
ANR	4266549	Identifier	i		4266453	0					
ANR	4266550	PrimaryExpression	1		4266453	1					
ANR	4266551	Identifier	argc		4266453	1					
ANR	4266552	CompoundStatement		21:19:590:590	4266453	1					
ANR	4266553	ExpressionStatement	"tout = strtoul ( argv [ i + 1 ] , NULL , 10 )"	90:4:2525:2560	4266453	0	True				
ANR	4266554	AssignmentExpression	"tout = strtoul ( argv [ i + 1 ] , NULL , 10 )"		4266453	0		=			
ANR	4266555	Identifier	tout		4266453	0					
ANR	4266556	CallExpression	"strtoul ( argv [ i + 1 ] , NULL , 10 )"		4266453	1					
ANR	4266557	Callee	strtoul		4266453	0					
ANR	4266558	Identifier	strtoul		4266453	0					
ANR	4266559	ArgumentList	argv [ i + 1 ]		4266453	1					
ANR	4266560	Argument	argv [ i + 1 ]		4266453	0					
ANR	4266561	ArrayIndexing	argv [ i + 1 ]		4266453	0					
ANR	4266562	Identifier	argv		4266453	0					
ANR	4266563	AdditiveExpression	i + 1		4266453	1		+			
ANR	4266564	Identifier	i		4266453	0					
ANR	4266565	PrimaryExpression	1		4266453	1					
ANR	4266566	Argument	NULL		4266453	1					
ANR	4266567	Identifier	NULL		4266453	0					
ANR	4266568	Argument	10		4266453	2					
ANR	4266569	PrimaryExpression	10		4266453	0					
ANR	4266570	ExpressionStatement	g_td . m_features . set_timeout ( tout )	91:4:2566:2599	4266453	1	True				
ANR	4266571	CallExpression	g_td . m_features . set_timeout ( tout )		4266453	0					
ANR	4266572	Callee	g_td . m_features . set_timeout		4266453	0					
ANR	4266573	MemberAccess	g_td . m_features . set_timeout		4266453	0					
ANR	4266574	MemberAccess	g_td . m_features		4266453	0					
ANR	4266575	Identifier	g_td		4266453	0					
ANR	4266576	Identifier	m_features		4266453	1					
ANR	4266577	Identifier	set_timeout		4266453	1					
ANR	4266578	ArgumentList	tout		4266453	1					
ANR	4266579	Argument	tout		4266453	0					
ANR	4266580	Identifier	tout		4266453	0					
ANR	4266581	ExpressionStatement	i ++	92:4:2605:2608	4266453	2	True				
ANR	4266582	PostIncDecOperationExpression	i ++		4266453	0					
ANR	4266583	Identifier	i		4266453	0					
ANR	4266584	IncDec	++		4266453	1					
ANR	4266585	IfStatement	"if ( strcmp ( argv [ i ] , ""--stdin"" ) == MATCH )"		4266453	2					
ANR	4266586	Condition	"strcmp ( argv [ i ] , ""--stdin"" ) == MATCH"	98:6:2754:2788	4266453	0	True				
ANR	4266587	EqualityExpression	"strcmp ( argv [ i ] , ""--stdin"" ) == MATCH"		4266453	0		==			
ANR	4266588	CallExpression	"strcmp ( argv [ i ] , ""--stdin"" )"		4266453	0					
ANR	4266589	Callee	strcmp		4266453	0					
ANR	4266590	Identifier	strcmp		4266453	0					
ANR	4266591	ArgumentList	argv [ i ]		4266453	1					
ANR	4266592	Argument	argv [ i ]		4266453	0					
ANR	4266593	ArrayIndexing	argv [ i ]		4266453	0					
ANR	4266594	Identifier	argv		4266453	0					
ANR	4266595	Identifier	i		4266453	1					
ANR	4266596	Argument	"""--stdin"""		4266453	1					
ANR	4266597	PrimaryExpression	"""--stdin"""		4266453	0					
ANR	4266598	Identifier	MATCH		4266453	1					
ANR	4266599	CompoundStatement		30:43:862:862	4266453	1					
ANR	4266600	ExpressionStatement	g_td . m_features . set_uses_stdin ( TRUE )	99:3:2796:2832	4266453	0	True				
ANR	4266601	CallExpression	g_td . m_features . set_uses_stdin ( TRUE )		4266453	0					
ANR	4266602	Callee	g_td . m_features . set_uses_stdin		4266453	0					
ANR	4266603	MemberAccess	g_td . m_features . set_uses_stdin		4266453	0					
ANR	4266604	MemberAccess	g_td . m_features		4266453	0					
ANR	4266605	Identifier	g_td		4266453	0					
ANR	4266606	Identifier	m_features		4266453	1					
ANR	4266607	Identifier	set_uses_stdin		4266453	1					
ANR	4266608	ArgumentList	TRUE		4266453	1					
ANR	4266609	Argument	TRUE		4266453	0					
ANR	4266610	Identifier	TRUE		4266453	0					
ANR	4266611	IfStatement	"if ( strcmp ( argv [ i ] , ""--id"" ) == MATCH )"		4266453	3					
ANR	4266612	Condition	"strcmp ( argv [ i ] , ""--id"" ) == MATCH"	105:6:2999:3030	4266453	0	True				
ANR	4266613	EqualityExpression	"strcmp ( argv [ i ] , ""--id"" ) == MATCH"		4266453	0		==			
ANR	4266614	CallExpression	"strcmp ( argv [ i ] , ""--id"" )"		4266453	0					
ANR	4266615	Callee	strcmp		4266453	0					
ANR	4266616	Identifier	strcmp		4266453	0					
ANR	4266617	ArgumentList	argv [ i ]		4266453	1					
ANR	4266618	Argument	argv [ i ]		4266453	0					
ANR	4266619	ArrayIndexing	argv [ i ]		4266453	0					
ANR	4266620	Identifier	argv		4266453	0					
ANR	4266621	Identifier	i		4266453	1					
ANR	4266622	Argument	"""--id"""		4266453	1					
ANR	4266623	PrimaryExpression	"""--id"""		4266453	0					
ANR	4266624	Identifier	MATCH		4266453	1					
ANR	4266625	CompoundStatement		37:40:1104:1104	4266453	1					
ANR	4266626	ExpressionStatement	g_td . m_features . set_id ( argv [ i + 1 ] )	106:3:3038:3071	4266453	0	True				
ANR	4266627	CallExpression	g_td . m_features . set_id ( argv [ i + 1 ] )		4266453	0					
ANR	4266628	Callee	g_td . m_features . set_id		4266453	0					
ANR	4266629	MemberAccess	g_td . m_features . set_id		4266453	0					
ANR	4266630	MemberAccess	g_td . m_features		4266453	0					
ANR	4266631	Identifier	g_td		4266453	0					
ANR	4266632	Identifier	m_features		4266453	1					
ANR	4266633	Identifier	set_id		4266453	1					
ANR	4266634	ArgumentList	argv [ i + 1 ]		4266453	1					
ANR	4266635	Argument	argv [ i + 1 ]		4266453	0					
ANR	4266636	ArrayIndexing	argv [ i + 1 ]		4266453	0					
ANR	4266637	Identifier	argv		4266453	0					
ANR	4266638	AdditiveExpression	i + 1		4266453	1		+			
ANR	4266639	Identifier	i		4266453	0					
ANR	4266640	PrimaryExpression	1		4266453	1					
ANR	4266641	ExpressionStatement	i ++	107:3:3076:3079	4266453	1	True				
ANR	4266642	PostIncDecOperationExpression	i ++		4266453	0					
ANR	4266643	Identifier	i		4266453	0					
ANR	4266644	IncDec	++		4266453	1					
ANR	4266645	IfStatement	"if ( strcmp ( argv [ i ] , ""--shadow"" ) == MATCH )"		4266453	4					
ANR	4266646	Condition	"strcmp ( argv [ i ] , ""--shadow"" ) == MATCH"	113:6:3302:3337	4266453	0	True				
ANR	4266647	EqualityExpression	"strcmp ( argv [ i ] , ""--shadow"" ) == MATCH"		4266453	0		==			
ANR	4266648	CallExpression	"strcmp ( argv [ i ] , ""--shadow"" )"		4266453	0					
ANR	4266649	Callee	strcmp		4266453	0					
ANR	4266650	Identifier	strcmp		4266453	0					
ANR	4266651	ArgumentList	argv [ i ]		4266453	1					
ANR	4266652	Argument	argv [ i ]		4266453	0					
ANR	4266653	ArrayIndexing	argv [ i ]		4266453	0					
ANR	4266654	Identifier	argv		4266453	0					
ANR	4266655	Identifier	i		4266453	1					
ANR	4266656	Argument	"""--shadow"""		4266453	1					
ANR	4266657	PrimaryExpression	"""--shadow"""		4266453	0					
ANR	4266658	Identifier	MATCH		4266453	1					
ANR	4266659	CompoundStatement		45:44:1411:1411	4266453	1					
ANR	4266660	ExpressionStatement	g_td . m_features . set_shadow_direction ( argv [ i + 1 ] )	114:3:3345:3392	4266453	0	True				
ANR	4266661	CallExpression	g_td . m_features . set_shadow_direction ( argv [ i + 1 ] )		4266453	0					
ANR	4266662	Callee	g_td . m_features . set_shadow_direction		4266453	0					
ANR	4266663	MemberAccess	g_td . m_features . set_shadow_direction		4266453	0					
ANR	4266664	MemberAccess	g_td . m_features		4266453	0					
ANR	4266665	Identifier	g_td		4266453	0					
ANR	4266666	Identifier	m_features		4266453	1					
ANR	4266667	Identifier	set_shadow_direction		4266453	1					
ANR	4266668	ArgumentList	argv [ i + 1 ]		4266453	1					
ANR	4266669	Argument	argv [ i + 1 ]		4266453	0					
ANR	4266670	ArrayIndexing	argv [ i + 1 ]		4266453	0					
ANR	4266671	Identifier	argv		4266453	0					
ANR	4266672	AdditiveExpression	i + 1		4266453	1		+			
ANR	4266673	Identifier	i		4266453	0					
ANR	4266674	PrimaryExpression	1		4266453	1					
ANR	4266675	ExpressionStatement	i ++	115:3:3397:3400	4266453	1	True				
ANR	4266676	PostIncDecOperationExpression	i ++		4266453	0					
ANR	4266677	Identifier	i		4266453	0					
ANR	4266678	IncDec	++		4266453	1					
ANR	4266679	IfStatement	"if ( strcmp ( argv [ i ] , ""--help"" ) == MATCH )"		4266453	5					
ANR	4266680	Condition	"strcmp ( argv [ i ] , ""--help"" ) == MATCH"	119:6:3443:3476	4266453	0	True				
ANR	4266681	EqualityExpression	"strcmp ( argv [ i ] , ""--help"" ) == MATCH"		4266453	0		==			
ANR	4266682	CallExpression	"strcmp ( argv [ i ] , ""--help"" )"		4266453	0					
ANR	4266683	Callee	strcmp		4266453	0					
ANR	4266684	Identifier	strcmp		4266453	0					
ANR	4266685	ArgumentList	argv [ i ]		4266453	1					
ANR	4266686	Argument	argv [ i ]		4266453	0					
ANR	4266687	ArrayIndexing	argv [ i ]		4266453	0					
ANR	4266688	Identifier	argv		4266453	0					
ANR	4266689	Identifier	i		4266453	1					
ANR	4266690	Argument	"""--help"""		4266453	1					
ANR	4266691	PrimaryExpression	"""--help"""		4266453	0					
ANR	4266692	Identifier	MATCH		4266453	1					
ANR	4266693	CompoundStatement		51:42:1550:1550	4266453	1					
ANR	4266694	ExpressionStatement	usage ( )	120:3:3484:3491	4266453	0	True				
ANR	4266695	CallExpression	usage ( )		4266453	0					
ANR	4266696	Callee	usage		4266453	0					
ANR	4266697	Identifier	usage		4266453	0					
ANR	4266698	ArgumentList			4266453	1					
ANR	4266699	IfStatement	if ( g_td . m_features . get_uses_stdin ( ) == TRUE )		4266453	5					
ANR	4266700	Condition	g_td . m_features . get_uses_stdin ( ) == TRUE	132:5:3821:3860	4266453	0	True				
ANR	4266701	EqualityExpression	g_td . m_features . get_uses_stdin ( ) == TRUE		4266453	0		==			
ANR	4266702	CallExpression	g_td . m_features . get_uses_stdin ( )		4266453	0					
ANR	4266703	Callee	g_td . m_features . get_uses_stdin		4266453	0					
ANR	4266704	MemberAccess	g_td . m_features . get_uses_stdin		4266453	0					
ANR	4266705	MemberAccess	g_td . m_features		4266453	0					
ANR	4266706	Identifier	g_td		4266453	0					
ANR	4266707	Identifier	m_features		4266453	1					
ANR	4266708	Identifier	get_uses_stdin		4266453	1					
ANR	4266709	ArgumentList			4266453	1					
ANR	4266710	Identifier	TRUE		4266453	1					
ANR	4266711	CompoundStatement		64:47:1934:1934	4266453	1					
ANR	4266712	ExpressionStatement	"dprintf ( D_ALWAYS , ""Loading transfer request from stdin...\\n"" )"	133:2:3867:3928	4266453	0	True				
ANR	4266713	CallExpression	"dprintf ( D_ALWAYS , ""Loading transfer request from stdin...\\n"" )"		4266453	0					
ANR	4266714	Callee	dprintf		4266453	0					
ANR	4266715	Identifier	dprintf		4266453	0					
ANR	4266716	ArgumentList	D_ALWAYS		4266453	1					
ANR	4266717	Argument	D_ALWAYS		4266453	0					
ANR	4266718	Identifier	D_ALWAYS		4266453	0					
ANR	4266719	Argument	"""Loading transfer request from stdin...\\n"""		4266453	1					
ANR	4266720	PrimaryExpression	"""Loading transfer request from stdin...\\n"""		4266453	0					
ANR	4266721	ExpressionStatement	g_td . accept_transfer_request ( stdin )	134:2:3932:3967	4266453	1	True				
ANR	4266722	CallExpression	g_td . accept_transfer_request ( stdin )		4266453	0					
ANR	4266723	Callee	g_td . accept_transfer_request		4266453	0					
ANR	4266724	MemberAccess	g_td . accept_transfer_request		4266453	0					
ANR	4266725	Identifier	g_td		4266453	0					
ANR	4266726	Identifier	accept_transfer_request		4266453	1					
ANR	4266727	ArgumentList	stdin		4266453	1					
ANR	4266728	Argument	stdin		4266453	0					
ANR	4266729	Identifier	stdin		4266453	0					
ANR	4266730	ExpressionStatement	ret = g_td . register_to_schedd ( & usock )	138:1:4036:4073	4266453	6	True				
ANR	4266731	AssignmentExpression	ret = g_td . register_to_schedd ( & usock )		4266453	0		=			
ANR	4266732	Identifier	ret		4266453	0					
ANR	4266733	CallExpression	g_td . register_to_schedd ( & usock )		4266453	1					
ANR	4266734	Callee	g_td . register_to_schedd		4266453	0					
ANR	4266735	MemberAccess	g_td . register_to_schedd		4266453	0					
ANR	4266736	Identifier	g_td		4266453	0					
ANR	4266737	Identifier	register_to_schedd		4266453	1					
ANR	4266738	ArgumentList	& usock		4266453	1					
ANR	4266739	Argument	& usock		4266453	0					
ANR	4266740	UnaryOperationExpression	& usock		4266453	0					
ANR	4266741	UnaryOperator	&		4266453	0					
ANR	4266742	Identifier	usock		4266453	1					
ANR	4266743	SwitchStatement	switch ( ret )		4266453	7					
ANR	4266744	Condition	ret	140:8:4084:4086	4266453	0	True				
ANR	4266745	Identifier	ret		4266453	0					
ANR	4266746	CompoundStatement		72:13:2160:2160	4266453	1					
ANR	4266747	Label	case REG_RESULT_NO_SCHEDD :	141:2:4093:4118	4266453	0	True				
ANR	4266748	Identifier	REG_RESULT_NO_SCHEDD		4266453	0					
ANR	4266749	BreakStatement	break ;	144:3:4227:4232	4266453	1	True				
ANR	4266750	Label	case REG_RESULT_FAILED :	145:2:4236:4258	4266453	2	True				
ANR	4266751	Identifier	REG_RESULT_FAILED		4266453	0					
ANR	4266752	ExpressionStatement	"EXCEPT ( ""Failed to register to schedd! Aborting."" )"	150:3:4498:4547	4266453	3	True				
ANR	4266753	CallExpression	"EXCEPT ( ""Failed to register to schedd! Aborting."" )"		4266453	0					
ANR	4266754	Callee	EXCEPT		4266453	0					
ANR	4266755	Identifier	EXCEPT		4266453	0					
ANR	4266756	ArgumentList	"""Failed to register to schedd! Aborting."""		4266453	1					
ANR	4266757	Argument	"""Failed to register to schedd! Aborting."""		4266453	0					
ANR	4266758	PrimaryExpression	"""Failed to register to schedd! Aborting."""		4266453	0					
ANR	4266759	BreakStatement	break ;	151:3:4552:4557	4266453	4	True				
ANR	4266760	Label	case REG_RESULT_SUCCESS :	153:2:4562:4585	4266453	5	True				
ANR	4266761	Identifier	REG_RESULT_SUCCESS		4266453	0					
ANR	4266762	ExpressionStatement	m_update_sock = usock	155:3:4628:4649	4266453	6	True				
ANR	4266763	AssignmentExpression	m_update_sock = usock		4266453	0		=			
ANR	4266764	Identifier	m_update_sock		4266453	0					
ANR	4266765	Identifier	usock		4266453	1					
ANR	4266766	BreakStatement	break ;	156:3:4654:4659	4266453	7	True				
ANR	4266767	Label	default :	158:2:4664:4671	4266453	8	True				
ANR	4266768	Identifier	default		4266453	0					
ANR	4266769	ExpressionStatement	"EXCEPT ( ""TransferD::init() Programmer error!"" )"	159:3:4676:4721	4266453	9	True				
ANR	4266770	CallExpression	"EXCEPT ( ""TransferD::init() Programmer error!"" )"		4266453	0					
ANR	4266771	Callee	EXCEPT		4266453	0					
ANR	4266772	Identifier	EXCEPT		4266453	0					
ANR	4266773	ArgumentList	"""TransferD::init() Programmer error!"""		4266453	1					
ANR	4266774	Argument	"""TransferD::init() Programmer error!"""		4266453	0					
ANR	4266775	PrimaryExpression	"""TransferD::init() Programmer error!"""		4266453	0					
ANR	4266776	BreakStatement	break ;	160:3:4726:4731	4266453	10	True				
ANR	4266777	ReturnType	void		4266453	1					
ANR	4266778	Identifier	TransferD :: init		4266453	2					
ANR	4266779	ParameterList	"int argc , char * argv [ ]"		4266453	3					
ANR	4266780	Parameter	int argc	68:16:1904:1911	4266453	0	True				
ANR	4266781	ParameterType	int		4266453	0					
ANR	4266782	Identifier	argc		4266453	1					
ANR	4266783	Parameter	char * argv [ ]	68:26:1914:1925	4266453	1	True				
ANR	4266784	ParameterType	char * [ ]		4266453	0					
ANR	4266785	Identifier	argv		4266453	1					
ANR	4266786	CFGEntryNode	ENTRY		4266453		True				
ANR	4266787	CFGExitNode	EXIT		4266453		True				
ANR	4266788	Symbol	argc		4266453						
ANR	4266789	Symbol	ret		4266453						
ANR	4266790	Symbol	strcmp		4266453						
ANR	4266791	Symbol	stdin		4266453						
ANR	4266792	Symbol	NULL		4266453						
ANR	4266793	Symbol	D_ALWAYS		4266453						
ANR	4266794	Symbol	i		4266453						
ANR	4266795	Symbol	TRUE		4266453						
ANR	4266796	Symbol	* argv		4266453						
ANR	4266797	Symbol	tout		4266453						
ANR	4266798	Symbol	argv		4266453						
ANR	4266799	Symbol	g_td . m_features . get_uses_stdin		4266453						
ANR	4266800	Symbol	m_update_sock		4266453						
ANR	4266801	Symbol	& usock		4266453						
ANR	4266802	Symbol	* i		4266453						
ANR	4266803	Symbol	g_td . register_to_schedd		4266453						
ANR	4266804	Symbol	g_td		4266453						
ANR	4266805	Symbol	strtoul		4266453						
ANR	4266806	Symbol	g_td . m_features		4266453						
ANR	4266807	Symbol	MATCH		4266453						
ANR	4266808	Symbol	usock		4266453						
ANR	4266809	Function	TransferD :: accept_transfer_request	165:0:4806:5919							
ANR	4266810	FunctionDef	TransferD :: accept_transfer_request (FILE * fin)		4266809	0					
ANR	4266811	CompoundStatement		167:0:4856:5919	4266809	0					
ANR	4266812	IdentifierDeclStatement	MyString encapsulation_method_line ;	168:1:4859:4893	4266809	0	True				
ANR	4266813	IdentifierDecl	encapsulation_method_line		4266809	0					
ANR	4266814	IdentifierDeclType	MyString		4266809	0					
ANR	4266815	Identifier	encapsulation_method_line		4266809	1					
ANR	4266816	IdentifierDeclStatement	MyString encap_end_line ;	169:1:4896:4919	4266809	1	True				
ANR	4266817	IdentifierDecl	encap_end_line		4266809	0					
ANR	4266818	IdentifierDeclType	MyString		4266809	0					
ANR	4266819	Identifier	encap_end_line		4266809	1					
ANR	4266820	IdentifierDeclStatement	EncapMethod em ;	170:1:4922:4936	4266809	2	True				
ANR	4266821	IdentifierDecl	em		4266809	0					
ANR	4266822	IdentifierDeclType	EncapMethod		4266809	0					
ANR	4266823	Identifier	em		4266809	1					
ANR	4266824	IdentifierDeclStatement	int rval = 0 ;	171:1:4939:4951	4266809	3	True				
ANR	4266825	IdentifierDecl	rval = 0		4266809	0					
ANR	4266826	IdentifierDeclType	int		4266809	0					
ANR	4266827	Identifier	rval		4266809	1					
ANR	4266828	AssignmentExpression	rval = 0		4266809	2		=			
ANR	4266829	Identifier	rval		4266809	0					
ANR	4266830	PrimaryExpression	0		4266809	1					
ANR	4266831	IfStatement	if ( encapsulation_method_line . readLine ( fin ) == FALSE )		4266809	4					
ANR	4266832	Condition	encapsulation_method_line . readLine ( fin ) == FALSE	178:5:5214:5261	4266809	0	True				
ANR	4266833	EqualityExpression	encapsulation_method_line . readLine ( fin ) == FALSE		4266809	0		==			
ANR	4266834	CallExpression	encapsulation_method_line . readLine ( fin )		4266809	0					
ANR	4266835	Callee	encapsulation_method_line . readLine		4266809	0					
ANR	4266836	MemberAccess	encapsulation_method_line . readLine		4266809	0					
ANR	4266837	Identifier	encapsulation_method_line		4266809	0					
ANR	4266838	Identifier	readLine		4266809	1					
ANR	4266839	ArgumentList	fin		4266809	1					
ANR	4266840	Argument	fin		4266809	0					
ANR	4266841	Identifier	fin		4266809	0					
ANR	4266842	Identifier	FALSE		4266809	1					
ANR	4266843	CompoundStatement		12:55:407:407	4266809	1					
ANR	4266844	ExpressionStatement	"EXCEPT ( ""Failed to read encapsulation method line!"" )"	179:2:5268:5319	4266809	0	True				
ANR	4266845	CallExpression	"EXCEPT ( ""Failed to read encapsulation method line!"" )"		4266809	0					
ANR	4266846	Callee	EXCEPT		4266809	0					
ANR	4266847	Identifier	EXCEPT		4266809	0					
ANR	4266848	ArgumentList	"""Failed to read encapsulation method line!"""		4266809	1					
ANR	4266849	Argument	"""Failed to read encapsulation method line!"""		4266809	0					
ANR	4266850	PrimaryExpression	"""Failed to read encapsulation method line!"""		4266809	0					
ANR	4266851	ExpressionStatement	encapsulation_method_line . trim ( )	181:1:5325:5357	4266809	5	True				
ANR	4266852	CallExpression	encapsulation_method_line . trim ( )		4266809	0					
ANR	4266853	Callee	encapsulation_method_line . trim		4266809	0					
ANR	4266854	MemberAccess	encapsulation_method_line . trim		4266809	0					
ANR	4266855	Identifier	encapsulation_method_line		4266809	0					
ANR	4266856	Identifier	trim		4266809	1					
ANR	4266857	ArgumentList			4266809	1					
ANR	4266858	ExpressionStatement	em = encap_method ( encapsulation_method_line )	183:1:5361:5405	4266809	6	True				
ANR	4266859	AssignmentExpression	em = encap_method ( encapsulation_method_line )		4266809	0		=			
ANR	4266860	Identifier	em		4266809	0					
ANR	4266861	CallExpression	encap_method ( encapsulation_method_line )		4266809	1					
ANR	4266862	Callee	encap_method		4266809	0					
ANR	4266863	Identifier	encap_method		4266809	0					
ANR	4266864	ArgumentList	encapsulation_method_line		4266809	1					
ANR	4266865	Argument	encapsulation_method_line		4266809	0					
ANR	4266866	Identifier	encapsulation_method_line		4266809	0					
ANR	4266867	SwitchStatement	switch ( em )		4266809	7					
ANR	4266868	Condition	em	187:9:5506:5507	4266809	0	True				
ANR	4266869	Identifier	em		4266809	0					
ANR	4266870	CompoundStatement		21:13:653:653	4266809	1					
ANR	4266871	Label	case ENCAP_METHOD_UNKNOWN :	189:2:5515:5540	4266809	0	True				
ANR	4266872	Identifier	ENCAP_METHOD_UNKNOWN		4266809	0					
ANR	4266873	Statement	EXCEPT	190:3:5545:5550	4266809	1	True				
ANR	4266874	Statement	(	190:9:5551:5551	4266809	2	True				
ANR	4266875	Statement	"""I don't understand the encapsulation method of the """	190:10:5552:5604	4266809	3	True				
ANR	4266876	Statement	"""protocol: %s\\n"""	191:5:5611:5626	4266809	4	True				
ANR	4266877	Statement	","	191:21:5627:5627	4266809	5	True				
ANR	4266878	Statement	encapsulation_method_line	191:23:5629:5653	4266809	6	True				
ANR	4266879	Statement	.	191:48:5654:5654	4266809	7	True				
ANR	4266880	Statement	Value	191:49:5655:5659	4266809	8	True				
ANR	4266881	Statement	(	191:54:5660:5660	4266809	9	True				
ANR	4266882	Statement	)	191:55:5661:5661	4266809	10	True				
ANR	4266883	Statement	)	191:56:5662:5662	4266809	11	True				
ANR	4266884	ExpressionStatement		191:57:5663:5663	4266809	12	True				
ANR	4266885	BreakStatement	break ;	192:3:5668:5673	4266809	13	True				
ANR	4266886	Label	case ENCAP_METHOD_OLD_CLASSADS :	194:2:5678:5708	4266809	14	True				
ANR	4266887	Identifier	ENCAP_METHOD_OLD_CLASSADS		4266809	0					
ANR	4266888	ExpressionStatement	rval = accept_transfer_request_encapsulation_old_classads ( fin )	195:3:5713:5775	4266809	15	True				
ANR	4266889	AssignmentExpression	rval = accept_transfer_request_encapsulation_old_classads ( fin )		4266809	0		=			
ANR	4266890	Identifier	rval		4266809	0					
ANR	4266891	CallExpression	accept_transfer_request_encapsulation_old_classads ( fin )		4266809	1					
ANR	4266892	Callee	accept_transfer_request_encapsulation_old_classads		4266809	0					
ANR	4266893	Identifier	accept_transfer_request_encapsulation_old_classads		4266809	0					
ANR	4266894	ArgumentList	fin		4266809	1					
ANR	4266895	Argument	fin		4266809	0					
ANR	4266896	Identifier	fin		4266809	0					
ANR	4266897	BreakStatement	break ;	196:3:5780:5785	4266809	16	True				
ANR	4266898	Label	default :	198:2:5790:5797	4266809	17	True				
ANR	4266899	Identifier	default		4266809	0					
ANR	4266900	ExpressionStatement	"EXCEPT ( ""TransferD::init(): Programmer error! encap unhandled!"" )"	199:3:5802:5865	4266809	18	True				
ANR	4266901	CallExpression	"EXCEPT ( ""TransferD::init(): Programmer error! encap unhandled!"" )"		4266809	0					
ANR	4266902	Callee	EXCEPT		4266809	0					
ANR	4266903	Identifier	EXCEPT		4266809	0					
ANR	4266904	ArgumentList	"""TransferD::init(): Programmer error! encap unhandled!"""		4266809	1					
ANR	4266905	Argument	"""TransferD::init(): Programmer error! encap unhandled!"""		4266809	0					
ANR	4266906	PrimaryExpression	"""TransferD::init(): Programmer error! encap unhandled!"""		4266809	0					
ANR	4266907	BreakStatement	break ;	200:3:5870:5875	4266809	19	True				
ANR	4266908	ExpressionStatement	m_initialized = TRUE	203:1:5882:5902	4266809	8	True				
ANR	4266909	AssignmentExpression	m_initialized = TRUE		4266809	0		=			
ANR	4266910	Identifier	m_initialized		4266809	0					
ANR	4266911	Identifier	TRUE		4266809	1					
ANR	4266912	ReturnStatement	return rval ;	205:1:5906:5917	4266809	9	True				
ANR	4266913	Identifier	rval		4266809	0					
ANR	4266914	ReturnType	int		4266809	1					
ANR	4266915	Identifier	TransferD :: accept_transfer_request		4266809	2					
ANR	4266916	ParameterList	FILE * fin		4266809	3					
ANR	4266917	Parameter	FILE * fin	166:35:4845:4853	4266809	0	True				
ANR	4266918	ParameterType	FILE *		4266809	0					
ANR	4266919	Identifier	fin		4266809	1					
ANR	4266920	CFGEntryNode	ENTRY		4266809		True				
ANR	4266921	CFGExitNode	EXIT		4266809		True				
ANR	4266922	Symbol	m_initialized		4266809						
ANR	4266923	Symbol	encapsulation_method_line		4266809						
ANR	4266924	Symbol	accept_transfer_request_encapsulation_old_classads		4266809						
ANR	4266925	Symbol	em		4266809						
ANR	4266926	Symbol	TRUE		4266809						
ANR	4266927	Symbol	fin		4266809						
ANR	4266928	Symbol	encap_end_line		4266809						
ANR	4266929	Symbol	rval		4266809						
ANR	4266930	Symbol	FALSE		4266809						
ANR	4266931	Symbol	encap_method		4266809						
ANR	4266932	Symbol	encapsulation_method_line . readLine		4266809						
ANR	4266933	Function	TransferD :: accept_transfer_request_encapsulation_old_classads	210:0:6012:7439							
ANR	4266934	FunctionDef	TransferD :: accept_transfer_request_encapsulation_old_classads (FILE * fin)		4266933	0					
ANR	4266935	CompoundStatement		212:0:6089:7439	4266933	0					
ANR	4266936	IdentifierDeclStatement	int i ;	213:1:6092:6097	4266933	0	True				
ANR	4266937	IdentifierDecl	i		4266933	0					
ANR	4266938	IdentifierDeclType	int		4266933	0					
ANR	4266939	Identifier	i		4266933	1					
ANR	4266940	IdentifierDeclStatement	"int eof , error , empty ;"	214:1:6100:6121	4266933	1	True				
ANR	4266941	IdentifierDecl	eof		4266933	0					
ANR	4266942	IdentifierDeclType	int		4266933	0					
ANR	4266943	Identifier	eof		4266933	1					
ANR	4266944	IdentifierDecl	error		4266933	1					
ANR	4266945	IdentifierDeclType	int		4266933	0					
ANR	4266946	Identifier	error		4266933	1					
ANR	4266947	IdentifierDecl	empty		4266933	2					
ANR	4266948	IdentifierDeclType	int		4266933	0					
ANR	4266949	Identifier	empty		4266933	1					
ANR	4266950	IdentifierDeclStatement	"const char * classad_delimitor = ""---\\n"" ;"	215:1:6124:6163	4266933	2	True				
ANR	4266951	IdentifierDecl	"* classad_delimitor = ""---\\n"""		4266933	0					
ANR	4266952	IdentifierDeclType	const char *		4266933	0					
ANR	4266953	Identifier	classad_delimitor		4266933	1					
ANR	4266954	AssignmentExpression	"* classad_delimitor = ""---\\n"""		4266933	2		=			
ANR	4266955	Identifier	classad_delimitor		4266933	0					
ANR	4266956	PrimaryExpression	"""---\\n"""		4266933	1					
ANR	4266957	IdentifierDeclStatement	ClassAd * ad ;	216:1:6166:6177	4266933	3	True				
ANR	4266958	IdentifierDecl	* ad		4266933	0					
ANR	4266959	IdentifierDeclType	ClassAd *		4266933	0					
ANR	4266960	Identifier	ad		4266933	1					
ANR	4266961	IdentifierDeclStatement	TransferRequest * treq = NULL ;	217:1:6180:6208	4266933	4	True				
ANR	4266962	IdentifierDecl	* treq = NULL		4266933	0					
ANR	4266963	IdentifierDeclType	TransferRequest *		4266933	0					
ANR	4266964	Identifier	treq		4266933	1					
ANR	4266965	AssignmentExpression	* treq = NULL		4266933	2		=			
ANR	4266966	Identifier	NULL		4266933	0					
ANR	4266967	Identifier	NULL		4266933	1					
ANR	4266968	IdentifierDeclStatement	MyString cap ;	218:1:6211:6223	4266933	5	True				
ANR	4266969	IdentifierDecl	cap		4266933	0					
ANR	4266970	IdentifierDeclType	MyString		4266933	0					
ANR	4266971	Identifier	cap		4266933	1					
ANR	4266972	ExpressionStatement	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"	221:1:6292:6351	4266933	6	True				
ANR	4266973	AssignmentExpression	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"		4266933	0		=			
ANR	4266974	Identifier	ad		4266933	0					
ANR	4266975	Expression	"fin , classad_delimitor , eof , error , empty"		4266933	1					
ANR	4266976	Identifier	fin		4266933	0					
ANR	4266977	Expression	"classad_delimitor , eof , error , empty"		4266933	1					
ANR	4266978	Identifier	classad_delimitor		4266933	0					
ANR	4266979	Expression	"eof , error , empty"		4266933	1					
ANR	4266980	Identifier	eof		4266933	0					
ANR	4266981	Expression	"error , empty"		4266933	1					
ANR	4266982	Identifier	error		4266933	0					
ANR	4266983	Identifier	empty		4266933	1					
ANR	4266984	IfStatement	if ( empty == TRUE )		4266933	7					
ANR	4266985	Condition	empty == TRUE	222:5:6358:6370	4266933	0	True				
ANR	4266986	EqualityExpression	empty == TRUE		4266933	0		==			
ANR	4266987	Identifier	empty		4266933	0					
ANR	4266988	Identifier	TRUE		4266933	1					
ANR	4266989	CompoundStatement		11:20:283:283	4266933	1					
ANR	4266990	ExpressionStatement	"EXCEPT ( ""Protocol faliure, can't read initial Info Packet"" )"	223:2:6377:6435	4266933	0	True				
ANR	4266991	CallExpression	"EXCEPT ( ""Protocol faliure, can't read initial Info Packet"" )"		4266933	0					
ANR	4266992	Callee	EXCEPT		4266933	0					
ANR	4266993	Identifier	EXCEPT		4266933	0					
ANR	4266994	ArgumentList	"""Protocol faliure, can't read initial Info Packet"""		4266933	1					
ANR	4266995	Argument	"""Protocol faliure, can't read initial Info Packet"""		4266933	0					
ANR	4266996	PrimaryExpression	"""Protocol faliure, can't read initial Info Packet"""		4266933	0					
ANR	4266997	ExpressionStatement	treq = new TransferRequest ( ad )	227:1:6511:6541	4266933	8	True				
ANR	4266998	AssignmentExpression	treq = new TransferRequest ( ad )		4266933	0		=			
ANR	4266999	Identifier	treq		4266933	0					
ANR	4267000	Identifier	ad		4266933	1					
ANR	4267001	IfStatement	if ( treq == NULL )		4266933	9					
ANR	4267002	Condition	treq == NULL	228:5:6548:6559	4266933	0	True				
ANR	4267003	EqualityExpression	treq == NULL		4266933	0		==			
ANR	4267004	Identifier	treq		4266933	0					
ANR	4267005	Identifier	NULL		4266933	1					
ANR	4267006	CompoundStatement		17:19:472:472	4266933	1					
ANR	4267007	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	229:2:6566:6590	4266933	0	True				
ANR	4267008	CallExpression	"EXCEPT ( ""Out of memory!"" )"		4266933	0					
ANR	4267009	Callee	EXCEPT		4266933	0					
ANR	4267010	Identifier	EXCEPT		4266933	0					
ANR	4267011	ArgumentList	"""Out of memory!"""		4266933	1					
ANR	4267012	Argument	"""Out of memory!"""		4266933	0					
ANR	4267013	PrimaryExpression	"""Out of memory!"""		4266933	0					
ANR	4267014	ExpressionStatement	treq -> dprintf ( D_ALWAYS )	232:1:6597:6620	4266933	10	True				
ANR	4267015	CallExpression	treq -> dprintf ( D_ALWAYS )		4266933	0					
ANR	4267016	Callee	treq -> dprintf		4266933	0					
ANR	4267017	PtrMemberAccess	treq -> dprintf		4266933	0					
ANR	4267018	Identifier	treq		4266933	0					
ANR	4267019	Identifier	dprintf		4266933	1					
ANR	4267020	ArgumentList	D_ALWAYS		4266933	1					
ANR	4267021	Argument	D_ALWAYS		4266933	0					
ANR	4267022	Identifier	D_ALWAYS		4266933	0					
ANR	4267023	IfStatement	if ( treq -> get_num_transfers ( ) <= 0 )		4266933	11					
ANR	4267024	Condition	treq -> get_num_transfers ( ) <= 0	235:5:6705:6734	4266933	0	True				
ANR	4267025	RelationalExpression	treq -> get_num_transfers ( ) <= 0		4266933	0		<=			
ANR	4267026	CallExpression	treq -> get_num_transfers ( )		4266933	0					
ANR	4267027	Callee	treq -> get_num_transfers		4266933	0					
ANR	4267028	PtrMemberAccess	treq -> get_num_transfers		4266933	0					
ANR	4267029	Identifier	treq		4266933	0					
ANR	4267030	Identifier	get_num_transfers		4266933	1					
ANR	4267031	ArgumentList			4266933	1					
ANR	4267032	PrimaryExpression	0		4266933	1					
ANR	4267033	CompoundStatement		24:37:647:647	4266933	1					
ANR	4267034	ExpressionStatement	"EXCEPT ( ""Protocol error!"" )"	236:2:6741:6766	4266933	0	True				
ANR	4267035	CallExpression	"EXCEPT ( ""Protocol error!"" )"		4266933	0					
ANR	4267036	Callee	EXCEPT		4266933	0					
ANR	4267037	Identifier	EXCEPT		4266933	0					
ANR	4267038	ArgumentList	"""Protocol error!"""		4266933	1					
ANR	4267039	Argument	"""Protocol error!"""		4266933	0					
ANR	4267040	PrimaryExpression	"""Protocol error!"""		4266933	0					
ANR	4267041	ForStatement	for ( i = 0 ; i < treq -> get_num_transfers ( ) ; i ++ )		4266933	12					
ANR	4267042	ForInit	i = 0 ;	240:6:6841:6846	4266933	0	True				
ANR	4267043	AssignmentExpression	i = 0		4266933	0		=			
ANR	4267044	Identifier	i		4266933	0					
ANR	4267045	PrimaryExpression	0		4266933	1					
ANR	4267046	Condition	i < treq -> get_num_transfers ( )	240:13:6848:6876	4266933	1	True				
ANR	4267047	RelationalExpression	i < treq -> get_num_transfers ( )		4266933	0		<			
ANR	4267048	Identifier	i		4266933	0					
ANR	4267049	CallExpression	treq -> get_num_transfers ( )		4266933	1					
ANR	4267050	Callee	treq -> get_num_transfers		4266933	0					
ANR	4267051	PtrMemberAccess	treq -> get_num_transfers		4266933	0					
ANR	4267052	Identifier	treq		4266933	0					
ANR	4267053	Identifier	get_num_transfers		4266933	1					
ANR	4267054	ArgumentList			4266933	1					
ANR	4267055	PostIncDecOperationExpression	i ++	240:44:6879:6881	4266933	2	True				
ANR	4267056	Identifier	i		4266933	0					
ANR	4267057	IncDec	++		4266933	1					
ANR	4267058	CompoundStatement		29:49:794:794	4266933	3					
ANR	4267059	ExpressionStatement	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"	241:2:6888:6947	4266933	0	True				
ANR	4267060	AssignmentExpression	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"		4266933	0		=			
ANR	4267061	Identifier	ad		4266933	0					
ANR	4267062	Expression	"fin , classad_delimitor , eof , error , empty"		4266933	1					
ANR	4267063	Identifier	fin		4266933	0					
ANR	4267064	Expression	"classad_delimitor , eof , error , empty"		4266933	1					
ANR	4267065	Identifier	classad_delimitor		4266933	0					
ANR	4267066	Expression	"eof , error , empty"		4266933	1					
ANR	4267067	Identifier	eof		4266933	0					
ANR	4267068	Expression	"error , empty"		4266933	1					
ANR	4267069	Identifier	error		4266933	0					
ANR	4267070	Identifier	empty		4266933	1					
ANR	4267071	IfStatement	if ( empty == TRUE )		4266933	1					
ANR	4267072	Condition	empty == TRUE	242:6:6955:6967	4266933	0	True				
ANR	4267073	EqualityExpression	empty == TRUE		4266933	0		==			
ANR	4267074	Identifier	empty		4266933	0					
ANR	4267075	Identifier	TRUE		4266933	1					
ANR	4267076	CompoundStatement		31:21:880:880	4266933	1					
ANR	4267077	ExpressionStatement	"EXCEPT ( ""Expected %d transfer job ads, got %d instead."" , treq -> get_num_transfers ( ) , i )"	243:3:6975:7065	4266933	0	True				
ANR	4267078	CallExpression	"EXCEPT ( ""Expected %d transfer job ads, got %d instead."" , treq -> get_num_transfers ( ) , i )"		4266933	0					
ANR	4267079	Callee	EXCEPT		4266933	0					
ANR	4267080	Identifier	EXCEPT		4266933	0					
ANR	4267081	ArgumentList	"""Expected %d transfer job ads, got %d instead."""		4266933	1					
ANR	4267082	Argument	"""Expected %d transfer job ads, got %d instead."""		4266933	0					
ANR	4267083	PrimaryExpression	"""Expected %d transfer job ads, got %d instead."""		4266933	0					
ANR	4267084	Argument	treq -> get_num_transfers ( )		4266933	1					
ANR	4267085	CallExpression	treq -> get_num_transfers ( )		4266933	0					
ANR	4267086	Callee	treq -> get_num_transfers		4266933	0					
ANR	4267087	PtrMemberAccess	treq -> get_num_transfers		4266933	0					
ANR	4267088	Identifier	treq		4266933	0					
ANR	4267089	Identifier	get_num_transfers		4266933	1					
ANR	4267090	ArgumentList			4266933	1					
ANR	4267091	Argument	i		4266933	2					
ANR	4267092	Identifier	i		4266933	0					
ANR	4267093	ExpressionStatement	ad -> dPrint ( D_ALWAYS )	246:2:7073:7093	4266933	2	True				
ANR	4267094	CallExpression	ad -> dPrint ( D_ALWAYS )		4266933	0					
ANR	4267095	Callee	ad -> dPrint		4266933	0					
ANR	4267096	PtrMemberAccess	ad -> dPrint		4266933	0					
ANR	4267097	Identifier	ad		4266933	0					
ANR	4267098	Identifier	dPrint		4266933	1					
ANR	4267099	ArgumentList	D_ALWAYS		4266933	1					
ANR	4267100	Argument	D_ALWAYS		4266933	0					
ANR	4267101	Identifier	D_ALWAYS		4266933	0					
ANR	4267102	ExpressionStatement	treq -> append_task ( ad )	247:2:7097:7118	4266933	3	True				
ANR	4267103	CallExpression	treq -> append_task ( ad )		4266933	0					
ANR	4267104	Callee	treq -> append_task		4266933	0					
ANR	4267105	PtrMemberAccess	treq -> append_task		4266933	0					
ANR	4267106	Identifier	treq		4266933	0					
ANR	4267107	Identifier	append_task		4266933	1					
ANR	4267108	ArgumentList	ad		4266933	1					
ANR	4267109	Argument	ad		4266933	0					
ANR	4267110	Identifier	ad		4266933	0					
ANR	4267111	ExpressionStatement	cap = gen_capability ( )	252:1:7247:7269	4266933	13	True				
ANR	4267112	AssignmentExpression	cap = gen_capability ( )		4266933	0		=			
ANR	4267113	Identifier	cap		4266933	0					
ANR	4267114	CallExpression	gen_capability ( )		4266933	1					
ANR	4267115	Callee	gen_capability		4266933	0					
ANR	4267116	Identifier	gen_capability		4266933	0					
ANR	4267117	ArgumentList			4266933	1					
ANR	4267118	ExpressionStatement	"m_treqs . insert ( cap , treq )"	255:1:7307:7332	4266933	14	True				
ANR	4267119	CallExpression	"m_treqs . insert ( cap , treq )"		4266933	0					
ANR	4267120	Callee	m_treqs . insert		4266933	0					
ANR	4267121	MemberAccess	m_treqs . insert		4266933	0					
ANR	4267122	Identifier	m_treqs		4266933	0					
ANR	4267123	Identifier	insert		4266933	1					
ANR	4267124	ArgumentList	cap		4266933	1					
ANR	4267125	Argument	cap		4266933	0					
ANR	4267126	Identifier	cap		4266933	0					
ANR	4267127	Argument	treq		4266933	1					
ANR	4267128	Identifier	treq		4266933	0					
ANR	4267129	ExpressionStatement	m_inactivity_timer = 0	258:1:7400:7422	4266933	15	True				
ANR	4267130	AssignmentExpression	m_inactivity_timer = 0		4266933	0		=			
ANR	4267131	Identifier	m_inactivity_timer		4266933	0					
ANR	4267132	PrimaryExpression	0		4266933	1					
ANR	4267133	ReturnStatement	return TRUE ;	260:1:7426:7437	4266933	16	True				
ANR	4267134	Identifier	TRUE		4266933	0					
ANR	4267135	ReturnType	int		4266933	1					
ANR	4267136	Identifier	TransferD :: accept_transfer_request_encapsulation_old_classads		4266933	2					
ANR	4267137	ParameterList	FILE * fin		4266933	3					
ANR	4267138	Parameter	FILE * fin	211:62:6078:6086	4266933	0	True				
ANR	4267139	ParameterType	FILE *		4266933	0					
ANR	4267140	Identifier	fin		4266933	1					
ANR	4267141	CFGEntryNode	ENTRY		4266933		True				
ANR	4267142	CFGExitNode	EXIT		4266933		True				
ANR	4267143	Symbol	ad		4266933						
ANR	4267144	Symbol	NULL		4266933						
ANR	4267145	Symbol	* treq		4266933						
ANR	4267146	Symbol	D_ALWAYS		4266933						
ANR	4267147	Symbol	i		4266933						
ANR	4267148	Symbol	TRUE		4266933						
ANR	4267149	Symbol	fin		4266933						
ANR	4267150	Symbol	classad_delimitor		4266933						
ANR	4267151	Symbol	error		4266933						
ANR	4267152	Symbol	gen_capability		4266933						
ANR	4267153	Symbol	m_treqs		4266933						
ANR	4267154	Symbol	empty		4266933						
ANR	4267155	Symbol	cap		4266933						
ANR	4267156	Symbol	m_inactivity_timer		4266933						
ANR	4267157	Symbol	treq -> get_num_transfers		4266933						
ANR	4267158	Symbol	treq		4266933						
ANR	4267159	Symbol	eof		4266933						
ANR	4267160	DeclStmt									
ANR	4267161	Decl							ReliSock	ReliSock *	rsock
ANR	4267162	DeclStmt									
ANR	4267163	Decl							MyString	MyString	sock_id
ANR	4267164	DeclStmt									
ANR	4267165	Decl							CondorError	CondorError	errstack
ANR	4267166	DeclStmt									
ANR	4267167	Decl							char	char *	_sock_id
ANR	4267168	Function	TransferD :: accept_transfer_request_handler	321:0:9392:10921							
ANR	4267169	FunctionDef	TransferD :: accept_transfer_request_handler (Stream * sock)		4267168	0					
ANR	4267170	CompoundStatement		323:0:9453:10921	4267168	0					
ANR	4267171	IdentifierDeclStatement	MyString encapsulation_method_line ;	324:1:9456:9490	4267168	0	True				
ANR	4267172	IdentifierDecl	encapsulation_method_line		4267168	0					
ANR	4267173	IdentifierDeclType	MyString		4267168	0					
ANR	4267174	Identifier	encapsulation_method_line		4267168	1					
ANR	4267175	IdentifierDeclStatement	MyString encap_end_line ;	325:1:9493:9516	4267168	1	True				
ANR	4267176	IdentifierDecl	encap_end_line		4267168	0					
ANR	4267177	IdentifierDeclType	MyString		4267168	0					
ANR	4267178	Identifier	encap_end_line		4267168	1					
ANR	4267179	IdentifierDeclStatement	EncapMethod em ;	326:1:9519:9533	4267168	2	True				
ANR	4267180	IdentifierDecl	em		4267168	0					
ANR	4267181	IdentifierDeclType	EncapMethod		4267168	0					
ANR	4267182	Identifier	em		4267168	1					
ANR	4267183	IdentifierDeclStatement	char * str = NULL ;	327:1:9536:9552	4267168	3	True				
ANR	4267184	IdentifierDecl	* str = NULL		4267168	0					
ANR	4267185	IdentifierDeclType	char *		4267168	0					
ANR	4267186	Identifier	str		4267168	1					
ANR	4267187	AssignmentExpression	* str = NULL		4267168	2		=			
ANR	4267188	Identifier	NULL		4267168	0					
ANR	4267189	Identifier	NULL		4267168	1					
ANR	4267190	IdentifierDeclStatement	int rval ;	328:1:9555:9563	4267168	4	True				
ANR	4267191	IdentifierDecl	rval		4267168	0					
ANR	4267192	IdentifierDeclType	int		4267168	0					
ANR	4267193	Identifier	rval		4267168	1					
ANR	4267194	ExpressionStatement	"dprintf ( D_ALWAYS , ""Entering TransferD::accept_transfer_request_handler()\\n"" )"	330:1:9567:9646	4267168	5	True				
ANR	4267195	CallExpression	"dprintf ( D_ALWAYS , ""Entering TransferD::accept_transfer_request_handler()\\n"" )"		4267168	0					
ANR	4267196	Callee	dprintf		4267168	0					
ANR	4267197	Identifier	dprintf		4267168	0					
ANR	4267198	ArgumentList	D_ALWAYS		4267168	1					
ANR	4267199	Argument	D_ALWAYS		4267168	0					
ANR	4267200	Identifier	D_ALWAYS		4267168	0					
ANR	4267201	Argument	"""Entering TransferD::accept_transfer_request_handler()\\n"""		4267168	1					
ANR	4267202	PrimaryExpression	"""Entering TransferD::accept_transfer_request_handler()\\n"""		4267168	0					
ANR	4267203	ExpressionStatement	"dprintf ( D_ALWAYS , ""INCOMING TRANSFER REQUEST!\\n"" )"	332:1:9649:9698	4267168	6	True				
ANR	4267204	CallExpression	"dprintf ( D_ALWAYS , ""INCOMING TRANSFER REQUEST!\\n"" )"		4267168	0					
ANR	4267205	Callee	dprintf		4267168	0					
ANR	4267206	Identifier	dprintf		4267168	0					
ANR	4267207	ArgumentList	D_ALWAYS		4267168	1					
ANR	4267208	Argument	D_ALWAYS		4267168	0					
ANR	4267209	Identifier	D_ALWAYS		4267168	0					
ANR	4267210	Argument	"""INCOMING TRANSFER REQUEST!\\n"""		4267168	1					
ANR	4267211	PrimaryExpression	"""INCOMING TRANSFER REQUEST!\\n"""		4267168	0					
ANR	4267212	ExpressionStatement	sock -> decode ( )	339:1:9960:9974	4267168	7	True				
ANR	4267213	CallExpression	sock -> decode ( )		4267168	0					
ANR	4267214	Callee	sock -> decode		4267168	0					
ANR	4267215	PtrMemberAccess	sock -> decode		4267168	0					
ANR	4267216	Identifier	sock		4267168	0					
ANR	4267217	Identifier	decode		4267168	1					
ANR	4267218	ArgumentList			4267168	1					
ANR	4267219	IfStatement	if ( sock -> code ( str ) == 0 )		4267168	8					
ANR	4267220	Condition	sock -> code ( str ) == 0	341:5:9982:10001	4267168	0	True				
ANR	4267221	EqualityExpression	sock -> code ( str ) == 0		4267168	0		==			
ANR	4267222	CallExpression	sock -> code ( str )		4267168	0					
ANR	4267223	Callee	sock -> code		4267168	0					
ANR	4267224	PtrMemberAccess	sock -> code		4267168	0					
ANR	4267225	Identifier	sock		4267168	0					
ANR	4267226	Identifier	code		4267168	1					
ANR	4267227	ArgumentList	str		4267168	1					
ANR	4267228	Argument	str		4267168	0					
ANR	4267229	Identifier	str		4267168	0					
ANR	4267230	PrimaryExpression	0		4267168	1					
ANR	4267231	CompoundStatement		19:27:550:550	4267168	1					
ANR	4267232	ExpressionStatement	"EXCEPT ( ""Schedd closed connection, I'm going away."" )"	342:2:10008:10059	4267168	0	True				
ANR	4267233	CallExpression	"EXCEPT ( ""Schedd closed connection, I'm going away."" )"		4267168	0					
ANR	4267234	Callee	EXCEPT		4267168	0					
ANR	4267235	Identifier	EXCEPT		4267168	0					
ANR	4267236	ArgumentList	"""Schedd closed connection, I'm going away."""		4267168	1					
ANR	4267237	Argument	"""Schedd closed connection, I'm going away."""		4267168	0					
ANR	4267238	PrimaryExpression	"""Schedd closed connection, I'm going away."""		4267168	0					
ANR	4267239	ExpressionStatement	sock -> end_of_message ( )	344:1:10065:10087	4267168	9	True				
ANR	4267240	CallExpression	sock -> end_of_message ( )		4267168	0					
ANR	4267241	Callee	sock -> end_of_message		4267168	0					
ANR	4267242	PtrMemberAccess	sock -> end_of_message		4267168	0					
ANR	4267243	Identifier	sock		4267168	0					
ANR	4267244	Identifier	end_of_message		4267168	1					
ANR	4267245	ArgumentList			4267168	1					
ANR	4267246	ExpressionStatement	encapsulation_method_line = str	346:1:10091:10122	4267168	10	True				
ANR	4267247	AssignmentExpression	encapsulation_method_line = str		4267168	0		=			
ANR	4267248	Identifier	encapsulation_method_line		4267168	0					
ANR	4267249	Identifier	str		4267168	1					
ANR	4267250	ExpressionStatement	free ( str )	347:1:10141:10150	4267168	11	True				
ANR	4267251	CallExpression	free ( str )		4267168	0					
ANR	4267252	Callee	free		4267168	0					
ANR	4267253	Identifier	free		4267168	0					
ANR	4267254	ArgumentList	str		4267168	1					
ANR	4267255	Argument	str		4267168	0					
ANR	4267256	Identifier	str		4267168	0					
ANR	4267257	ExpressionStatement	encapsulation_method_line . trim ( )	349:1:10154:10186	4267168	12	True				
ANR	4267258	CallExpression	encapsulation_method_line . trim ( )		4267168	0					
ANR	4267259	Callee	encapsulation_method_line . trim		4267168	0					
ANR	4267260	MemberAccess	encapsulation_method_line . trim		4267168	0					
ANR	4267261	Identifier	encapsulation_method_line		4267168	0					
ANR	4267262	Identifier	trim		4267168	1					
ANR	4267263	ArgumentList			4267168	1					
ANR	4267264	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read encap line: %s\\n"" , encapsulation_method_line . Value ( ) )"	351:1:10190:10270	4267168	13	True				
ANR	4267265	CallExpression	"dprintf ( D_ALWAYS , ""Read encap line: %s\\n"" , encapsulation_method_line . Value ( ) )"		4267168	0					
ANR	4267266	Callee	dprintf		4267168	0					
ANR	4267267	Identifier	dprintf		4267168	0					
ANR	4267268	ArgumentList	D_ALWAYS		4267168	1					
ANR	4267269	Argument	D_ALWAYS		4267168	0					
ANR	4267270	Identifier	D_ALWAYS		4267168	0					
ANR	4267271	Argument	"""Read encap line: %s\\n"""		4267168	1					
ANR	4267272	PrimaryExpression	"""Read encap line: %s\\n"""		4267168	0					
ANR	4267273	Argument	encapsulation_method_line . Value ( )		4267168	2					
ANR	4267274	CallExpression	encapsulation_method_line . Value ( )		4267168	0					
ANR	4267275	Callee	encapsulation_method_line . Value		4267168	0					
ANR	4267276	MemberAccess	encapsulation_method_line . Value		4267168	0					
ANR	4267277	Identifier	encapsulation_method_line		4267168	0					
ANR	4267278	Identifier	Value		4267168	1					
ANR	4267279	ArgumentList			4267168	1					
ANR	4267280	ExpressionStatement	em = encap_method ( encapsulation_method_line )	354:1:10274:10318	4267168	14	True				
ANR	4267281	AssignmentExpression	em = encap_method ( encapsulation_method_line )		4267168	0		=			
ANR	4267282	Identifier	em		4267168	0					
ANR	4267283	CallExpression	encap_method ( encapsulation_method_line )		4267168	1					
ANR	4267284	Callee	encap_method		4267168	0					
ANR	4267285	Identifier	encap_method		4267168	0					
ANR	4267286	ArgumentList	encapsulation_method_line		4267168	1					
ANR	4267287	Argument	encapsulation_method_line		4267168	0					
ANR	4267288	Identifier	encapsulation_method_line		4267168	0					
ANR	4267289	SwitchStatement	switch ( em )		4267168	15					
ANR	4267290	Condition	em	358:9:10419:10420	4267168	0	True				
ANR	4267291	Identifier	em		4267168	0					
ANR	4267292	CompoundStatement		36:13:969:969	4267168	1					
ANR	4267293	Label	case ENCAP_METHOD_UNKNOWN :	360:2:10428:10453	4267168	0	True				
ANR	4267294	Identifier	ENCAP_METHOD_UNKNOWN		4267168	0					
ANR	4267295	Statement	EXCEPT	361:3:10458:10463	4267168	1	True				
ANR	4267296	Statement	(	361:9:10464:10464	4267168	2	True				
ANR	4267297	Statement	"""I don't understand the encapsulation method of the """	361:10:10465:10517	4267168	3	True				
ANR	4267298	Statement	"""protocol: %s\\n"""	362:5:10524:10539	4267168	4	True				
ANR	4267299	Statement	","	362:21:10540:10540	4267168	5	True				
ANR	4267300	Statement	encapsulation_method_line	362:23:10542:10566	4267168	6	True				
ANR	4267301	Statement	.	362:48:10567:10567	4267168	7	True				
ANR	4267302	Statement	Value	362:49:10568:10572	4267168	8	True				
ANR	4267303	Statement	(	362:54:10573:10573	4267168	9	True				
ANR	4267304	Statement	)	362:55:10574:10574	4267168	10	True				
ANR	4267305	Statement	)	362:56:10575:10575	4267168	11	True				
ANR	4267306	ExpressionStatement		362:57:10576:10576	4267168	12	True				
ANR	4267307	BreakStatement	break ;	363:3:10581:10586	4267168	13	True				
ANR	4267308	Label	case ENCAP_METHOD_OLD_CLASSADS :	365:2:10591:10621	4267168	14	True				
ANR	4267309	Identifier	ENCAP_METHOD_OLD_CLASSADS		4267168	0					
ANR	4267310	ExpressionStatement	rval = accept_transfer_request_encapsulation_old_classads ( sock )	366:3:10626:10689	4267168	15	True				
ANR	4267311	AssignmentExpression	rval = accept_transfer_request_encapsulation_old_classads ( sock )		4267168	0		=			
ANR	4267312	Identifier	rval		4267168	0					
ANR	4267313	CallExpression	accept_transfer_request_encapsulation_old_classads ( sock )		4267168	1					
ANR	4267314	Callee	accept_transfer_request_encapsulation_old_classads		4267168	0					
ANR	4267315	Identifier	accept_transfer_request_encapsulation_old_classads		4267168	0					
ANR	4267316	ArgumentList	sock		4267168	1					
ANR	4267317	Argument	sock		4267168	0					
ANR	4267318	Identifier	sock		4267168	0					
ANR	4267319	BreakStatement	break ;	367:3:10694:10699	4267168	16	True				
ANR	4267320	Label	default :	369:2:10704:10711	4267168	17	True				
ANR	4267321	Identifier	default		4267168	0					
ANR	4267322	ExpressionStatement	"EXCEPT ( ""TransferD::init(): Programmer error! encap unhandled!"" )"	370:3:10716:10779	4267168	18	True				
ANR	4267323	CallExpression	"EXCEPT ( ""TransferD::init(): Programmer error! encap unhandled!"" )"		4267168	0					
ANR	4267324	Callee	EXCEPT		4267168	0					
ANR	4267325	Identifier	EXCEPT		4267168	0					
ANR	4267326	ArgumentList	"""TransferD::init(): Programmer error! encap unhandled!"""		4267168	1					
ANR	4267327	Argument	"""TransferD::init(): Programmer error! encap unhandled!"""		4267168	0					
ANR	4267328	PrimaryExpression	"""TransferD::init(): Programmer error! encap unhandled!"""		4267168	0					
ANR	4267329	BreakStatement	break ;	371:3:10784:10789	4267168	19	True				
ANR	4267330	ExpressionStatement	m_initialized = TRUE	374:1:10796:10816	4267168	16	True				
ANR	4267331	AssignmentExpression	m_initialized = TRUE		4267168	0		=			
ANR	4267332	Identifier	m_initialized		4267168	0					
ANR	4267333	Identifier	TRUE		4267168	1					
ANR	4267334	ExpressionStatement	"dprintf ( D_ALWAYS , ""Leaving TransferD::accept_transfer_request_handler()\\n"" )"	376:1:10820:10898	4267168	17	True				
ANR	4267335	CallExpression	"dprintf ( D_ALWAYS , ""Leaving TransferD::accept_transfer_request_handler()\\n"" )"		4267168	0					
ANR	4267336	Callee	dprintf		4267168	0					
ANR	4267337	Identifier	dprintf		4267168	0					
ANR	4267338	ArgumentList	D_ALWAYS		4267168	1					
ANR	4267339	Argument	D_ALWAYS		4267168	0					
ANR	4267340	Identifier	D_ALWAYS		4267168	0					
ANR	4267341	Argument	"""Leaving TransferD::accept_transfer_request_handler()\\n"""		4267168	1					
ANR	4267342	PrimaryExpression	"""Leaving TransferD::accept_transfer_request_handler()\\n"""		4267168	0					
ANR	4267343	ReturnStatement	return KEEP_STREAM ;	378:1:10901:10919	4267168	18	True				
ANR	4267344	Identifier	KEEP_STREAM		4267168	0					
ANR	4267345	ReturnType	int		4267168	1					
ANR	4267346	Identifier	TransferD :: accept_transfer_request_handler		4267168	2					
ANR	4267347	ParameterList	Stream * sock		4267168	3					
ANR	4267348	Parameter	Stream * sock	322:43:9439:9450	4267168	0	True				
ANR	4267349	ParameterType	Stream *		4267168	0					
ANR	4267350	Identifier	sock		4267168	1					
ANR	4267351	CFGEntryNode	ENTRY		4267168		True				
ANR	4267352	CFGExitNode	EXIT		4267168		True				
ANR	4267353	Symbol	m_initialized		4267168						
ANR	4267354	Symbol	NULL		4267168						
ANR	4267355	Symbol	accept_transfer_request_encapsulation_old_classads		4267168						
ANR	4267356	Symbol	em		4267168						
ANR	4267357	Symbol	D_ALWAYS		4267168						
ANR	4267358	Symbol	encapsulation_method_line . Value		4267168						
ANR	4267359	Symbol	TRUE		4267168						
ANR	4267360	Symbol	encap_end_line		4267168						
ANR	4267361	Symbol	KEEP_STREAM		4267168						
ANR	4267362	Symbol	str		4267168						
ANR	4267363	Symbol	sock		4267168						
ANR	4267364	Symbol	sock -> code		4267168						
ANR	4267365	Symbol	encapsulation_method_line		4267168						
ANR	4267366	Symbol	rval		4267168						
ANR	4267367	Symbol	* sock		4267168						
ANR	4267368	Symbol	encap_method		4267168						
ANR	4267369	Function	TransferD :: accept_transfer_request_encapsulation_old_classads	383:0:11013:14727							
ANR	4267370	FunctionDef	TransferD :: accept_transfer_request_encapsulation_old_classads (Stream * sock)		4267369	0					
ANR	4267371	CompoundStatement		385:0:11093:14727	4267369	0					
ANR	4267372	IdentifierDeclStatement	int i ;	386:1:11096:11101	4267369	0	True				
ANR	4267373	IdentifierDecl	i		4267369	0					
ANR	4267374	IdentifierDeclType	int		4267369	0					
ANR	4267375	Identifier	i		4267369	1					
ANR	4267376	IdentifierDeclStatement	ClassAd * ad = NULL ;	387:1:11104:11122	4267369	1	True				
ANR	4267377	IdentifierDecl	* ad = NULL		4267369	0					
ANR	4267378	IdentifierDeclType	ClassAd *		4267369	0					
ANR	4267379	Identifier	ad		4267369	1					
ANR	4267380	AssignmentExpression	* ad = NULL		4267369	2		=			
ANR	4267381	Identifier	NULL		4267369	0					
ANR	4267382	Identifier	NULL		4267369	1					
ANR	4267383	IdentifierDeclStatement	TransferRequest * treq = NULL ;	388:1:11125:11153	4267369	2	True				
ANR	4267384	IdentifierDecl	* treq = NULL		4267369	0					
ANR	4267385	IdentifierDeclType	TransferRequest *		4267369	0					
ANR	4267386	Identifier	treq		4267369	1					
ANR	4267387	AssignmentExpression	* treq = NULL		4267369	2		=			
ANR	4267388	Identifier	NULL		4267369	0					
ANR	4267389	Identifier	NULL		4267369	1					
ANR	4267390	IdentifierDeclStatement	MyString cap ;	389:1:11156:11168	4267369	3	True				
ANR	4267391	IdentifierDecl	cap		4267369	0					
ANR	4267392	IdentifierDeclType	MyString		4267369	0					
ANR	4267393	Identifier	cap		4267369	1					
ANR	4267394	IdentifierDeclStatement	ClassAd respad ;	390:1:11171:11185	4267369	4	True				
ANR	4267395	IdentifierDecl	respad		4267369	0					
ANR	4267396	IdentifierDeclType	ClassAd		4267369	0					
ANR	4267397	Identifier	respad		4267369	1					
ANR	4267398	Statement	dprintf	392:1:11189:11195	4267369	5	True				
ANR	4267399	Statement	(	392:8:11196:11196	4267369	6	True				
ANR	4267400	Statement	D_ALWAYS	392:9:11197:11204	4267369	7	True				
ANR	4267401	Statement	","	392:17:11205:11205	4267369	8	True				
ANR	4267402	Statement	"""Entering """	393:2:11209:11219	4267369	9	True				
ANR	4267403	Statement	"""TransferD::accept_transfer_request_encapsulation_old_classads()\\n"""	394:2:11223:11289	4267369	10	True				
ANR	4267404	Statement	)	394:69:11290:11290	4267369	11	True				
ANR	4267405	ExpressionStatement		394:70:11291:11291	4267369	12	True				
ANR	4267406	ExpressionStatement	sock -> decode ( )	396:1:11295:11309	4267369	13	True				
ANR	4267407	CallExpression	sock -> decode ( )		4267369	0					
ANR	4267408	Callee	sock -> decode		4267369	0					
ANR	4267409	PtrMemberAccess	sock -> decode		4267369	0					
ANR	4267410	Identifier	sock		4267369	0					
ANR	4267411	Identifier	decode		4267369	1					
ANR	4267412	ArgumentList			4267369	1					
ANR	4267413	ExpressionStatement	ad = new ClassAd ( )	403:1:11578:11596	4267369	14	True				
ANR	4267414	AssignmentExpression	ad = new ClassAd ( )		4267369	0		=			
ANR	4267415	Identifier	ad		4267369	0					
ANR	4267416	UnaryExpression	new ClassAd ( )		4267369	1					
ANR	4267417	IfStatement	if ( ad -> initFromStream ( * sock ) == 0 )		4267369	15					
ANR	4267418	Condition	ad -> initFromStream ( * sock ) == 0	404:5:11603:11632	4267369	0	True				
ANR	4267419	EqualityExpression	ad -> initFromStream ( * sock ) == 0		4267369	0		==			
ANR	4267420	CallExpression	ad -> initFromStream ( * sock )		4267369	0					
ANR	4267421	Callee	ad -> initFromStream		4267369	0					
ANR	4267422	PtrMemberAccess	ad -> initFromStream		4267369	0					
ANR	4267423	Identifier	ad		4267369	0					
ANR	4267424	Identifier	initFromStream		4267369	1					
ANR	4267425	ArgumentList	* sock		4267369	1					
ANR	4267426	Argument	* sock		4267369	0					
ANR	4267427	UnaryOperationExpression	* sock		4267369	0					
ANR	4267428	UnaryOperator	*		4267369	0					
ANR	4267429	Identifier	sock		4267369	1					
ANR	4267430	PrimaryExpression	0		4267369	1					
ANR	4267431	CompoundStatement		20:37:541:541	4267369	1					
ANR	4267432	ExpressionStatement	"EXCEPT ( ""XXX Couldn't init initial ad from stream!"" )"	406:2:11692:11743	4267369	0	True				
ANR	4267433	CallExpression	"EXCEPT ( ""XXX Couldn't init initial ad from stream!"" )"		4267369	0					
ANR	4267434	Callee	EXCEPT		4267369	0					
ANR	4267435	Identifier	EXCEPT		4267369	0					
ANR	4267436	ArgumentList	"""XXX Couldn't init initial ad from stream!"""		4267369	1					
ANR	4267437	Argument	"""XXX Couldn't init initial ad from stream!"""		4267369	0					
ANR	4267438	PrimaryExpression	"""XXX Couldn't init initial ad from stream!"""		4267369	0					
ANR	4267439	ExpressionStatement	sock -> end_of_message ( )	408:1:11749:11771	4267369	16	True				
ANR	4267440	CallExpression	sock -> end_of_message ( )		4267369	0					
ANR	4267441	Callee	sock -> end_of_message		4267369	0					
ANR	4267442	PtrMemberAccess	sock -> end_of_message		4267369	0					
ANR	4267443	Identifier	sock		4267369	0					
ANR	4267444	Identifier	end_of_message		4267369	1					
ANR	4267445	ArgumentList			4267369	1					
ANR	4267446	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read treq header.\\n"" )"	410:1:11775:11815	4267369	17	True				
ANR	4267447	CallExpression	"dprintf ( D_ALWAYS , ""Read treq header.\\n"" )"		4267369	0					
ANR	4267448	Callee	dprintf		4267369	0					
ANR	4267449	Identifier	dprintf		4267369	0					
ANR	4267450	ArgumentList	D_ALWAYS		4267369	1					
ANR	4267451	Argument	D_ALWAYS		4267369	0					
ANR	4267452	Identifier	D_ALWAYS		4267369	0					
ANR	4267453	Argument	"""Read treq header.\\n"""		4267369	1					
ANR	4267454	PrimaryExpression	"""Read treq header.\\n"""		4267369	0					
ANR	4267455	ExpressionStatement	treq = new TransferRequest ( ad )	413:1:11888:11918	4267369	18	True				
ANR	4267456	AssignmentExpression	treq = new TransferRequest ( ad )		4267369	0		=			
ANR	4267457	Identifier	treq		4267369	0					
ANR	4267458	Identifier	ad		4267369	1					
ANR	4267459	IfStatement	if ( treq == NULL )		4267369	19					
ANR	4267460	Condition	treq == NULL	414:5:11925:11936	4267369	0	True				
ANR	4267461	EqualityExpression	treq == NULL		4267369	0		==			
ANR	4267462	Identifier	treq		4267369	0					
ANR	4267463	Identifier	NULL		4267369	1					
ANR	4267464	CompoundStatement		30:19:845:845	4267369	1					
ANR	4267465	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	415:2:11943:11967	4267369	0	True				
ANR	4267466	CallExpression	"EXCEPT ( ""Out of memory!"" )"		4267369	0					
ANR	4267467	Callee	EXCEPT		4267369	0					
ANR	4267468	Identifier	EXCEPT		4267369	0					
ANR	4267469	ArgumentList	"""Out of memory!"""		4267369	1					
ANR	4267470	Argument	"""Out of memory!"""		4267369	0					
ANR	4267471	PrimaryExpression	"""Out of memory!"""		4267369	0					
ANR	4267472	IfStatement	if ( treq -> get_num_transfers ( ) <= 0 )		4267369	20					
ANR	4267473	Condition	treq -> get_num_transfers ( ) <= 0	419:5:12054:12083	4267369	0	True				
ANR	4267474	RelationalExpression	treq -> get_num_transfers ( ) <= 0		4267369	0		<=			
ANR	4267475	CallExpression	treq -> get_num_transfers ( )		4267369	0					
ANR	4267476	Callee	treq -> get_num_transfers		4267369	0					
ANR	4267477	PtrMemberAccess	treq -> get_num_transfers		4267369	0					
ANR	4267478	Identifier	treq		4267369	0					
ANR	4267479	Identifier	get_num_transfers		4267369	1					
ANR	4267480	ArgumentList			4267369	1					
ANR	4267481	PrimaryExpression	0		4267369	1					
ANR	4267482	CompoundStatement		35:37:992:992	4267369	1					
ANR	4267483	ExpressionStatement	"EXCEPT ( ""Protocol error!"" )"	420:2:12090:12115	4267369	0	True				
ANR	4267484	CallExpression	"EXCEPT ( ""Protocol error!"" )"		4267369	0					
ANR	4267485	Callee	EXCEPT		4267369	0					
ANR	4267486	Identifier	EXCEPT		4267369	0					
ANR	4267487	ArgumentList	"""Protocol error!"""		4267369	1					
ANR	4267488	Argument	"""Protocol error!"""		4267369	0					
ANR	4267489	PrimaryExpression	"""Protocol error!"""		4267369	0					
ANR	4267490	ForStatement	for ( i = 0 ; i < treq -> get_num_transfers ( ) ; i ++ )		4267369	21					
ANR	4267491	ForInit	i = 0 ;	424:6:12190:12195	4267369	0	True				
ANR	4267492	AssignmentExpression	i = 0		4267369	0		=			
ANR	4267493	Identifier	i		4267369	0					
ANR	4267494	PrimaryExpression	0		4267369	1					
ANR	4267495	Condition	i < treq -> get_num_transfers ( )	424:13:12197:12225	4267369	1	True				
ANR	4267496	RelationalExpression	i < treq -> get_num_transfers ( )		4267369	0		<			
ANR	4267497	Identifier	i		4267369	0					
ANR	4267498	CallExpression	treq -> get_num_transfers ( )		4267369	1					
ANR	4267499	Callee	treq -> get_num_transfers		4267369	0					
ANR	4267500	PtrMemberAccess	treq -> get_num_transfers		4267369	0					
ANR	4267501	Identifier	treq		4267369	0					
ANR	4267502	Identifier	get_num_transfers		4267369	1					
ANR	4267503	ArgumentList			4267369	1					
ANR	4267504	PostIncDecOperationExpression	i ++	424:44:12228:12230	4267369	2	True				
ANR	4267505	Identifier	i		4267369	0					
ANR	4267506	IncDec	++		4267369	1					
ANR	4267507	CompoundStatement		40:49:1139:1139	4267369	3					
ANR	4267508	ExpressionStatement	ad = new ClassAd ( )	425:2:12237:12255	4267369	0	True				
ANR	4267509	AssignmentExpression	ad = new ClassAd ( )		4267369	0		=			
ANR	4267510	Identifier	ad		4267369	0					
ANR	4267511	UnaryExpression	new ClassAd ( )		4267369	1					
ANR	4267512	IfStatement	if ( ad == NULL )		4267369	1					
ANR	4267513	Condition	ad == NULL	426:6:12263:12272	4267369	0	True				
ANR	4267514	EqualityExpression	ad == NULL		4267369	0		==			
ANR	4267515	Identifier	ad		4267369	0					
ANR	4267516	Identifier	NULL		4267369	1					
ANR	4267517	CompoundStatement		42:18:1181:1181	4267369	1					
ANR	4267518	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	427:3:12280:12304	4267369	0	True				
ANR	4267519	CallExpression	"EXCEPT ( ""Out of memory!"" )"		4267369	0					
ANR	4267520	Callee	EXCEPT		4267369	0					
ANR	4267521	Identifier	EXCEPT		4267369	0					
ANR	4267522	ArgumentList	"""Out of memory!"""		4267369	1					
ANR	4267523	Argument	"""Out of memory!"""		4267369	0					
ANR	4267524	PrimaryExpression	"""Out of memory!"""		4267369	0					
ANR	4267525	IfStatement	if ( ad -> initFromStream ( * sock ) == 0 )		4267369	2					
ANR	4267526	Condition	ad -> initFromStream ( * sock ) == 0	429:6:12316:12345	4267369	0	True				
ANR	4267527	EqualityExpression	ad -> initFromStream ( * sock ) == 0		4267369	0		==			
ANR	4267528	CallExpression	ad -> initFromStream ( * sock )		4267369	0					
ANR	4267529	Callee	ad -> initFromStream		4267369	0					
ANR	4267530	PtrMemberAccess	ad -> initFromStream		4267369	0					
ANR	4267531	Identifier	ad		4267369	0					
ANR	4267532	Identifier	initFromStream		4267369	1					
ANR	4267533	ArgumentList	* sock		4267369	1					
ANR	4267534	Argument	* sock		4267369	0					
ANR	4267535	UnaryOperationExpression	* sock		4267369	0					
ANR	4267536	UnaryOperator	*		4267369	0					
ANR	4267537	Identifier	sock		4267369	1					
ANR	4267538	PrimaryExpression	0		4267369	1					
ANR	4267539	CompoundStatement		45:38:1254:1254	4267369	1					
ANR	4267540	ExpressionStatement	"EXCEPT ( ""Expected %d transfer job ads, got %d instead."" , treq -> get_num_transfers ( ) , i )"	430:3:12353:12443	4267369	0	True				
ANR	4267541	CallExpression	"EXCEPT ( ""Expected %d transfer job ads, got %d instead."" , treq -> get_num_transfers ( ) , i )"		4267369	0					
ANR	4267542	Callee	EXCEPT		4267369	0					
ANR	4267543	Identifier	EXCEPT		4267369	0					
ANR	4267544	ArgumentList	"""Expected %d transfer job ads, got %d instead."""		4267369	1					
ANR	4267545	Argument	"""Expected %d transfer job ads, got %d instead."""		4267369	0					
ANR	4267546	PrimaryExpression	"""Expected %d transfer job ads, got %d instead."""		4267369	0					
ANR	4267547	Argument	treq -> get_num_transfers ( )		4267369	1					
ANR	4267548	CallExpression	treq -> get_num_transfers ( )		4267369	0					
ANR	4267549	Callee	treq -> get_num_transfers		4267369	0					
ANR	4267550	PtrMemberAccess	treq -> get_num_transfers		4267369	0					
ANR	4267551	Identifier	treq		4267369	0					
ANR	4267552	Identifier	get_num_transfers		4267369	1					
ANR	4267553	ArgumentList			4267369	1					
ANR	4267554	Argument	i		4267369	2					
ANR	4267555	Identifier	i		4267369	0					
ANR	4267556	ExpressionStatement	sock -> end_of_message ( )	433:2:12451:12473	4267369	3	True				
ANR	4267557	CallExpression	sock -> end_of_message ( )		4267369	0					
ANR	4267558	Callee	sock -> end_of_message		4267369	0					
ANR	4267559	PtrMemberAccess	sock -> end_of_message		4267369	0					
ANR	4267560	Identifier	sock		4267369	0					
ANR	4267561	Identifier	end_of_message		4267369	1					
ANR	4267562	ArgumentList			4267369	1					
ANR	4267563	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read treq job ad[%d].\\n"" , i )"	434:2:12477:12524	4267369	4	True				
ANR	4267564	CallExpression	"dprintf ( D_ALWAYS , ""Read treq job ad[%d].\\n"" , i )"		4267369	0					
ANR	4267565	Callee	dprintf		4267369	0					
ANR	4267566	Identifier	dprintf		4267369	0					
ANR	4267567	ArgumentList	D_ALWAYS		4267369	1					
ANR	4267568	Argument	D_ALWAYS		4267369	0					
ANR	4267569	Identifier	D_ALWAYS		4267369	0					
ANR	4267570	Argument	"""Read treq job ad[%d].\\n"""		4267369	1					
ANR	4267571	PrimaryExpression	"""Read treq job ad[%d].\\n"""		4267369	0					
ANR	4267572	Argument	i		4267369	2					
ANR	4267573	Identifier	i		4267369	0					
ANR	4267574	ExpressionStatement	treq -> append_task ( ad )	435:2:12528:12549	4267369	5	True				
ANR	4267575	CallExpression	treq -> append_task ( ad )		4267369	0					
ANR	4267576	Callee	treq -> append_task		4267369	0					
ANR	4267577	PtrMemberAccess	treq -> append_task		4267369	0					
ANR	4267578	Identifier	treq		4267369	0					
ANR	4267579	Identifier	append_task		4267369	1					
ANR	4267580	ArgumentList	ad		4267369	1					
ANR	4267581	Argument	ad		4267369	0					
ANR	4267582	Identifier	ad		4267369	0					
ANR	4267583	ExpressionStatement	sock -> end_of_message ( )	437:1:12555:12577	4267369	22	True				
ANR	4267584	CallExpression	sock -> end_of_message ( )		4267369	0					
ANR	4267585	Callee	sock -> end_of_message		4267369	0					
ANR	4267586	PtrMemberAccess	sock -> end_of_message		4267369	0					
ANR	4267587	Identifier	sock		4267369	0					
ANR	4267588	Identifier	end_of_message		4267369	1					
ANR	4267589	ArgumentList			4267369	1					
ANR	4267590	ExpressionStatement	sock -> encode ( )	439:1:12581:12595	4267369	23	True				
ANR	4267591	CallExpression	sock -> encode ( )		4267369	0					
ANR	4267592	Callee	sock -> encode		4267369	0					
ANR	4267593	PtrMemberAccess	sock -> encode		4267369	0					
ANR	4267594	Identifier	sock		4267369	0					
ANR	4267595	Identifier	encode		4267369	1					
ANR	4267596	ArgumentList			4267369	1					
ANR	4267597	SwitchStatement	switch ( treq -> get_xfer_protocol ( ) )		4267369	24					
ANR	4267598	Condition	treq -> get_xfer_protocol ( )	445:8:12811:12835	4267369	0	True				
ANR	4267599	CallExpression	treq -> get_xfer_protocol ( )		4267369	0					
ANR	4267600	Callee	treq -> get_xfer_protocol		4267369	0					
ANR	4267601	PtrMemberAccess	treq -> get_xfer_protocol		4267369	0					
ANR	4267602	Identifier	treq		4267369	0					
ANR	4267603	Identifier	get_xfer_protocol		4267369	1					
ANR	4267604	ArgumentList			4267369	1					
ANR	4267605	CompoundStatement		62:1:1745:1745	4267369	1					
ANR	4267606	Label	case FTP_CFTP :	447:2:12843:12856	4267369	0	True				
ANR	4267607	Identifier	FTP_CFTP		4267369	0					
ANR	4267608	ExpressionStatement	"respad . Assign ( ATTR_TREQ_INVALID_REQUEST , FALSE )"	448:3:12915:12962	4267369	1	True				
ANR	4267609	CallExpression	"respad . Assign ( ATTR_TREQ_INVALID_REQUEST , FALSE )"		4267369	0					
ANR	4267610	Callee	respad . Assign		4267369	0					
ANR	4267611	MemberAccess	respad . Assign		4267369	0					
ANR	4267612	Identifier	respad		4267369	0					
ANR	4267613	Identifier	Assign		4267369	1					
ANR	4267614	ArgumentList	ATTR_TREQ_INVALID_REQUEST		4267369	1					
ANR	4267615	Argument	ATTR_TREQ_INVALID_REQUEST		4267369	0					
ANR	4267616	Identifier	ATTR_TREQ_INVALID_REQUEST		4267369	0					
ANR	4267617	Argument	FALSE		4267369	1					
ANR	4267618	Identifier	FALSE		4267369	0					
ANR	4267619	BreakStatement	break ;	449:3:12967:12972	4267369	2	True				
ANR	4267620	Label	default :	451:2:12977:12984	4267369	3	True				
ANR	4267621	Identifier	default		4267369	0					
ANR	4267622	Statement	dprintf	452:3:12989:12995	4267369	4	True				
ANR	4267623	Statement	(	452:10:12996:12996	4267369	5	True				
ANR	4267624	Statement	D_ALWAYS	452:11:12997:13004	4267369	6	True				
ANR	4267625	Statement	","	452:19:13005:13005	4267369	7	True				
ANR	4267626	Statement	"""Transfer Request uses an unsupported file """	452:21:13007:13050	4267369	8	True				
ANR	4267627	Statement	"""transfer protocol. Rejecting it.\\n"""	453:4:13056:13091	4267369	9	True				
ANR	4267628	Statement	)	453:40:13092:13092	4267369	10	True				
ANR	4267629	ExpressionStatement		453:41:13093:13093	4267369	11	True				
ANR	4267630	ExpressionStatement	"respad . Assign ( ATTR_TREQ_INVALID_REQUEST , TRUE )"	456:3:13150:13196	4267369	12	True				
ANR	4267631	CallExpression	"respad . Assign ( ATTR_TREQ_INVALID_REQUEST , TRUE )"		4267369	0					
ANR	4267632	Callee	respad . Assign		4267369	0					
ANR	4267633	MemberAccess	respad . Assign		4267369	0					
ANR	4267634	Identifier	respad		4267369	0					
ANR	4267635	Identifier	Assign		4267369	1					
ANR	4267636	ArgumentList	ATTR_TREQ_INVALID_REQUEST		4267369	1					
ANR	4267637	Argument	ATTR_TREQ_INVALID_REQUEST		4267369	0					
ANR	4267638	Identifier	ATTR_TREQ_INVALID_REQUEST		4267369	0					
ANR	4267639	Argument	TRUE		4267369	1					
ANR	4267640	Identifier	TRUE		4267369	0					
ANR	4267641	Statement	respad	457:3:13201:13206	4267369	13	True				
ANR	4267642	Statement	.	457:9:13207:13207	4267369	14	True				
ANR	4267643	Statement	Assign	457:10:13208:13213	4267369	15	True				
ANR	4267644	Statement	(	457:16:13214:13214	4267369	16	True				
ANR	4267645	Statement	ATTR_TREQ_INVALID_REASON	457:17:13215:13238	4267369	17	True				
ANR	4267646	Statement	","	457:41:13239:13239	4267369	18	True				
ANR	4267647	Statement	"""Transferd doesn't support client required file transfer """	458:4:13246:13303	4267369	19	True				
ANR	4267648	Statement	"""protocol."""	459:4:13309:13319	4267369	20	True				
ANR	4267649	Statement	)	459:15:13320:13320	4267369	21	True				
ANR	4267650	ExpressionStatement		459:16:13321:13321	4267369	22	True				
ANR	4267651	ExpressionStatement	respad . put ( * sock )	462:3:13382:13399	4267369	23	True				
ANR	4267652	CallExpression	respad . put ( * sock )		4267369	0					
ANR	4267653	Callee	respad . put		4267369	0					
ANR	4267654	MemberAccess	respad . put		4267369	0					
ANR	4267655	Identifier	respad		4267369	0					
ANR	4267656	Identifier	put		4267369	1					
ANR	4267657	ArgumentList	* sock		4267369	1					
ANR	4267658	Argument	* sock		4267369	0					
ANR	4267659	UnaryOperationExpression	* sock		4267369	0					
ANR	4267660	UnaryOperator	*		4267369	0					
ANR	4267661	Identifier	sock		4267369	1					
ANR	4267662	ExpressionStatement	sock -> end_of_message ( )	463:3:13404:13426	4267369	24	True				
ANR	4267663	CallExpression	sock -> end_of_message ( )		4267369	0					
ANR	4267664	Callee	sock -> end_of_message		4267369	0					
ANR	4267665	PtrMemberAccess	sock -> end_of_message		4267369	0					
ANR	4267666	Identifier	sock		4267369	0					
ANR	4267667	Identifier	end_of_message		4267369	1					
ANR	4267668	ArgumentList			4267369	1					
ANR	4267669	Statement	delete	464:3:13431:13436	4267369	25	True				
ANR	4267670	ExpressionStatement	treq	464:10:13438:13442	4267369	26	True				
ANR	4267671	Identifier	treq		4267369	0					
ANR	4267672	ReturnStatement	return KEEP_STREAM ;	467:3:13495:13513	4267369	27	True				
ANR	4267673	Identifier	KEEP_STREAM		4267369	0					
ANR	4267674	BreakStatement	break ;	468:3:13518:13523	4267369	28	True				
ANR	4267675	ExpressionStatement	cap = gen_capability ( )	476:1:13792:13814	4267369	25	True				
ANR	4267676	AssignmentExpression	cap = gen_capability ( )		4267369	0		=			
ANR	4267677	Identifier	cap		4267369	0					
ANR	4267678	CallExpression	gen_capability ( )		4267369	1					
ANR	4267679	Callee	gen_capability		4267369	0					
ANR	4267680	Identifier	gen_capability		4267369	0					
ANR	4267681	ArgumentList			4267369	1					
ANR	4267682	ExpressionStatement	treq -> set_capability ( cap )	477:1:13817:13842	4267369	26	True				
ANR	4267683	CallExpression	treq -> set_capability ( cap )		4267369	0					
ANR	4267684	Callee	treq -> set_capability		4267369	0					
ANR	4267685	PtrMemberAccess	treq -> set_capability		4267369	0					
ANR	4267686	Identifier	treq		4267369	0					
ANR	4267687	Identifier	set_capability		4267369	1					
ANR	4267688	ArgumentList	cap		4267369	1					
ANR	4267689	Argument	cap		4267369	0					
ANR	4267690	Identifier	cap		4267369	0					
ANR	4267691	ExpressionStatement	"respad . Assign ( ATTR_TREQ_CAPABILITY , cap )"	479:1:13846:13886	4267369	27	True				
ANR	4267692	CallExpression	"respad . Assign ( ATTR_TREQ_CAPABILITY , cap )"		4267369	0					
ANR	4267693	Callee	respad . Assign		4267369	0					
ANR	4267694	MemberAccess	respad . Assign		4267369	0					
ANR	4267695	Identifier	respad		4267369	0					
ANR	4267696	Identifier	Assign		4267369	1					
ANR	4267697	ArgumentList	ATTR_TREQ_CAPABILITY		4267369	1					
ANR	4267698	Argument	ATTR_TREQ_CAPABILITY		4267369	0					
ANR	4267699	Identifier	ATTR_TREQ_CAPABILITY		4267369	0					
ANR	4267700	Argument	cap		4267369	1					
ANR	4267701	Identifier	cap		4267369	0					
ANR	4267702	ExpressionStatement	"dprintf ( D_ALWAYS , ""Assigned capability to treq: %s.\\n"" , cap . Value ( ) )"	481:1:13890:13958	4267369	28	True				
ANR	4267703	CallExpression	"dprintf ( D_ALWAYS , ""Assigned capability to treq: %s.\\n"" , cap . Value ( ) )"		4267369	0					
ANR	4267704	Callee	dprintf		4267369	0					
ANR	4267705	Identifier	dprintf		4267369	0					
ANR	4267706	ArgumentList	D_ALWAYS		4267369	1					
ANR	4267707	Argument	D_ALWAYS		4267369	0					
ANR	4267708	Identifier	D_ALWAYS		4267369	0					
ANR	4267709	Argument	"""Assigned capability to treq: %s.\\n"""		4267369	1					
ANR	4267710	PrimaryExpression	"""Assigned capability to treq: %s.\\n"""		4267369	0					
ANR	4267711	Argument	cap . Value ( )		4267369	2					
ANR	4267712	CallExpression	cap . Value ( )		4267369	0					
ANR	4267713	Callee	cap . Value		4267369	0					
ANR	4267714	MemberAccess	cap . Value		4267369	0					
ANR	4267715	Identifier	cap		4267369	0					
ANR	4267716	Identifier	Value		4267369	1					
ANR	4267717	ArgumentList			4267369	1					
ANR	4267718	ExpressionStatement	respad . put ( * sock )	493:1:14162:14179	4267369	29	True				
ANR	4267719	CallExpression	respad . put ( * sock )		4267369	0					
ANR	4267720	Callee	respad . put		4267369	0					
ANR	4267721	MemberAccess	respad . put		4267369	0					
ANR	4267722	Identifier	respad		4267369	0					
ANR	4267723	Identifier	put		4267369	1					
ANR	4267724	ArgumentList	* sock		4267369	1					
ANR	4267725	Argument	* sock		4267369	0					
ANR	4267726	UnaryOperationExpression	* sock		4267369	0					
ANR	4267727	UnaryOperator	*		4267369	0					
ANR	4267728	Identifier	sock		4267369	1					
ANR	4267729	ExpressionStatement	sock -> end_of_message ( )	494:1:14182:14204	4267369	30	True				
ANR	4267730	CallExpression	sock -> end_of_message ( )		4267369	0					
ANR	4267731	Callee	sock -> end_of_message		4267369	0					
ANR	4267732	PtrMemberAccess	sock -> end_of_message		4267369	0					
ANR	4267733	Identifier	sock		4267369	0					
ANR	4267734	Identifier	end_of_message		4267369	1					
ANR	4267735	ArgumentList			4267369	1					
ANR	4267736	ExpressionStatement	"dprintf ( D_ALWAYS , ""Reported capability back to schedd.\\n"" )"	496:1:14208:14266	4267369	31	True				
ANR	4267737	CallExpression	"dprintf ( D_ALWAYS , ""Reported capability back to schedd.\\n"" )"		4267369	0					
ANR	4267738	Callee	dprintf		4267369	0					
ANR	4267739	Identifier	dprintf		4267369	0					
ANR	4267740	ArgumentList	D_ALWAYS		4267369	1					
ANR	4267741	Argument	D_ALWAYS		4267369	0					
ANR	4267742	Identifier	D_ALWAYS		4267369	0					
ANR	4267743	Argument	"""Reported capability back to schedd.\\n"""		4267369	1					
ANR	4267744	PrimaryExpression	"""Reported capability back to schedd.\\n"""		4267369	0					
ANR	4267745	ExpressionStatement	"m_treqs . insert ( cap , treq )"	501:1:14443:14468	4267369	32	True				
ANR	4267746	CallExpression	"m_treqs . insert ( cap , treq )"		4267369	0					
ANR	4267747	Callee	m_treqs . insert		4267369	0					
ANR	4267748	MemberAccess	m_treqs . insert		4267369	0					
ANR	4267749	Identifier	m_treqs		4267369	0					
ANR	4267750	Identifier	insert		4267369	1					
ANR	4267751	ArgumentList	cap		4267369	1					
ANR	4267752	Argument	cap		4267369	0					
ANR	4267753	Identifier	cap		4267369	0					
ANR	4267754	Argument	treq		4267369	1					
ANR	4267755	Identifier	treq		4267369	0					
ANR	4267756	ExpressionStatement	sock -> decode ( )	504:1:14508:14522	4267369	33	True				
ANR	4267757	CallExpression	sock -> decode ( )		4267369	0					
ANR	4267758	Callee	sock -> decode		4267369	0					
ANR	4267759	PtrMemberAccess	sock -> decode		4267369	0					
ANR	4267760	Identifier	sock		4267369	0					
ANR	4267761	Identifier	decode		4267369	1					
ANR	4267762	ArgumentList			4267369	1					
ANR	4267763	ExpressionStatement	"dprintf ( D_ALWAYS , ""Waiting for another transfer request from schedd.\\n"" )"	506:1:14526:14598	4267369	34	True				
ANR	4267764	CallExpression	"dprintf ( D_ALWAYS , ""Waiting for another transfer request from schedd.\\n"" )"		4267369	0					
ANR	4267765	Callee	dprintf		4267369	0					
ANR	4267766	Identifier	dprintf		4267369	0					
ANR	4267767	ArgumentList	D_ALWAYS		4267369	1					
ANR	4267768	Argument	D_ALWAYS		4267369	0					
ANR	4267769	Identifier	D_ALWAYS		4267369	0					
ANR	4267770	Argument	"""Waiting for another transfer request from schedd.\\n"""		4267369	1					
ANR	4267771	PrimaryExpression	"""Waiting for another transfer request from schedd.\\n"""		4267369	0					
ANR	4267772	Statement	dprintf	508:1:14602:14608	4267369	35	True				
ANR	4267773	Statement	(	508:8:14609:14609	4267369	36	True				
ANR	4267774	Statement	D_ALWAYS	508:9:14610:14617	4267369	37	True				
ANR	4267775	Statement	","	508:17:14618:14618	4267369	38	True				
ANR	4267776	Statement	"""Leaving """	509:2:14622:14631	4267369	39	True				
ANR	4267777	Statement	"""TransferD::accept_transfer_request_encapsulation_old_classads()\\n"""	510:2:14635:14701	4267369	40	True				
ANR	4267778	Statement	)	510:69:14702:14702	4267369	41	True				
ANR	4267779	ExpressionStatement		510:70:14703:14703	4267369	42	True				
ANR	4267780	ReturnStatement	return KEEP_STREAM ;	512:1:14707:14725	4267369	43	True				
ANR	4267781	Identifier	KEEP_STREAM		4267369	0					
ANR	4267782	ReturnType	int		4267369	1					
ANR	4267783	Identifier	TransferD :: accept_transfer_request_encapsulation_old_classads		4267369	2					
ANR	4267784	ParameterList	Stream * sock		4267369	3					
ANR	4267785	Parameter	Stream * sock	384:62:11079:11090	4267369	0	True				
ANR	4267786	ParameterType	Stream *		4267369	0					
ANR	4267787	Identifier	sock		4267369	1					
ANR	4267788	CFGEntryNode	ENTRY		4267369		True				
ANR	4267789	CFGExitNode	EXIT		4267369		True				
ANR	4267790	Symbol	ad -> initFromStream		4267369						
ANR	4267791	Symbol	NULL		4267369						
ANR	4267792	Symbol	ad		4267369						
ANR	4267793	Symbol	* treq		4267369						
ANR	4267794	Symbol	D_ALWAYS		4267369						
ANR	4267795	Symbol	i		4267369						
ANR	4267796	Symbol	TRUE		4267369						
ANR	4267797	Symbol	* ad		4267369						
ANR	4267798	Symbol	gen_capability		4267369						
ANR	4267799	Symbol	m_treqs		4267369						
ANR	4267800	Symbol	KEEP_STREAM		4267369						
ANR	4267801	Symbol	cap . Value		4267369						
ANR	4267802	Symbol	sock		4267369						
ANR	4267803	Symbol	cap		4267369						
ANR	4267804	Symbol	treq -> get_xfer_protocol		4267369						
ANR	4267805	Symbol	ATTR_TREQ_CAPABILITY		4267369						
ANR	4267806	Symbol	treq -> get_num_transfers		4267369						
ANR	4267807	Symbol	ATTR_TREQ_INVALID_REQUEST		4267369						
ANR	4267808	Symbol	FALSE		4267369						
ANR	4267809	Symbol	treq		4267369						
ANR	4267810	Symbol	respad		4267369						
ANR	4267811	Symbol	* sock		4267369						
ANR	4267812	Function	TransferD :: register_to_schedd	517:0:14870:16418							
ANR	4267813	FunctionDef	TransferD :: register_to_schedd (ReliSock * * regsock_ptr)		4267812	0					
ANR	4267814	CompoundStatement		519:0:14939:16418	4267812	0					
ANR	4267815	IdentifierDeclStatement	CondorError errstack ;	520:1:14942:14962	4267812	0	True				
ANR	4267816	IdentifierDecl	errstack		4267812	0					
ANR	4267817	IdentifierDeclType	CondorError		4267812	0					
ANR	4267818	Identifier	errstack		4267812	1					
ANR	4267819	IdentifierDeclStatement	MyString sname ;	521:1:14965:14979	4267812	1	True				
ANR	4267820	IdentifierDecl	sname		4267812	0					
ANR	4267821	IdentifierDeclType	MyString		4267812	0					
ANR	4267822	Identifier	sname		4267812	1					
ANR	4267823	IdentifierDeclStatement	MyString id ;	522:1:14982:14993	4267812	2	True				
ANR	4267824	IdentifierDecl	id		4267812	0					
ANR	4267825	IdentifierDeclType	MyString		4267812	0					
ANR	4267826	Identifier	id		4267812	1					
ANR	4267827	IdentifierDeclStatement	MyString sinful ;	523:1:14996:15011	4267812	3	True				
ANR	4267828	IdentifierDecl	sinful		4267812	0					
ANR	4267829	IdentifierDeclType	MyString		4267812	0					
ANR	4267830	Identifier	sinful		4267812	1					
ANR	4267831	IdentifierDeclStatement	bool rval ;	524:1:15014:15023	4267812	4	True				
ANR	4267832	IdentifierDecl	rval		4267812	0					
ANR	4267833	IdentifierDeclType	bool		4267812	0					
ANR	4267834	Identifier	rval		4267812	1					
ANR	4267835	IfStatement	if ( * regsock_ptr != NULL )		4267812	5					
ANR	4267836	Condition	* regsock_ptr != NULL	526:5:15032:15051	4267812	0	True				
ANR	4267837	EqualityExpression	* regsock_ptr != NULL		4267812	0		!=			
ANR	4267838	UnaryOperationExpression	* regsock_ptr		4267812	0					
ANR	4267839	UnaryOperator	*		4267812	0					
ANR	4267840	Identifier	regsock_ptr		4267812	1					
ANR	4267841	Identifier	NULL		4267812	1					
ANR	4267842	CompoundStatement		8:27:114:114	4267812	1					
ANR	4267843	ExpressionStatement	* regsock_ptr = NULL	527:2:15058:15077	4267812	0	True				
ANR	4267844	AssignmentExpression	* regsock_ptr = NULL		4267812	0		=			
ANR	4267845	UnaryOperationExpression	* regsock_ptr		4267812	0					
ANR	4267846	UnaryOperator	*		4267812	0					
ANR	4267847	Identifier	regsock_ptr		4267812	1					
ANR	4267848	Identifier	NULL		4267812	1					
ANR	4267849	ExpressionStatement	sname = m_features . get_schedd_sinful ( )	530:1:15084:15122	4267812	6	True				
ANR	4267850	AssignmentExpression	sname = m_features . get_schedd_sinful ( )		4267812	0		=			
ANR	4267851	Identifier	sname		4267812	0					
ANR	4267852	CallExpression	m_features . get_schedd_sinful ( )		4267812	1					
ANR	4267853	Callee	m_features . get_schedd_sinful		4267812	0					
ANR	4267854	MemberAccess	m_features . get_schedd_sinful		4267812	0					
ANR	4267855	Identifier	m_features		4267812	0					
ANR	4267856	Identifier	get_schedd_sinful		4267812	1					
ANR	4267857	ArgumentList			4267812	1					
ANR	4267858	ExpressionStatement	id = m_features . get_id ( )	531:1:15125:15149	4267812	7	True				
ANR	4267859	AssignmentExpression	id = m_features . get_id ( )		4267812	0		=			
ANR	4267860	Identifier	id		4267812	0					
ANR	4267861	CallExpression	m_features . get_id ( )		4267812	1					
ANR	4267862	Callee	m_features . get_id		4267812	0					
ANR	4267863	MemberAccess	m_features . get_id		4267812	0					
ANR	4267864	Identifier	m_features		4267812	0					
ANR	4267865	Identifier	get_id		4267812	1					
ANR	4267866	ArgumentList			4267812	1					
ANR	4267867	IfStatement	"if ( sname == ""N/A"" )"		4267812	8					
ANR	4267868	Condition	"sname == ""N/A"""	533:5:15157:15170	4267812	0	True				
ANR	4267869	EqualityExpression	"sname == ""N/A"""		4267812	0		==			
ANR	4267870	Identifier	sname		4267812	0					
ANR	4267871	PrimaryExpression	"""N/A"""		4267812	1					
ANR	4267872	CompoundStatement		15:21:233:233	4267812	1					
ANR	4267873	ExpressionStatement	"dprintf ( D_ALWAYS , ""No schedd specified to which to register.\\n"" )"	535:2:15224:15288	4267812	0	True				
ANR	4267874	CallExpression	"dprintf ( D_ALWAYS , ""No schedd specified to which to register.\\n"" )"		4267812	0					
ANR	4267875	Callee	dprintf		4267812	0					
ANR	4267876	Identifier	dprintf		4267812	0					
ANR	4267877	ArgumentList	D_ALWAYS		4267812	1					
ANR	4267878	Argument	D_ALWAYS		4267812	0					
ANR	4267879	Identifier	D_ALWAYS		4267812	0					
ANR	4267880	Argument	"""No schedd specified to which to register.\\n"""		4267812	1					
ANR	4267881	PrimaryExpression	"""No schedd specified to which to register.\\n"""		4267812	0					
ANR	4267882	ReturnStatement	return REG_RESULT_NO_SCHEDD ;	536:2:15292:15319	4267812	1	True				
ANR	4267883	Identifier	REG_RESULT_NO_SCHEDD		4267812	0					
ANR	4267884	ExpressionStatement	sinful = daemonCore -> InfoCommandSinfulString ( - 1 )	540:1:15357:15405	4267812	9	True				
ANR	4267885	AssignmentExpression	sinful = daemonCore -> InfoCommandSinfulString ( - 1 )		4267812	0		=			
ANR	4267886	Identifier	sinful		4267812	0					
ANR	4267887	CallExpression	daemonCore -> InfoCommandSinfulString ( - 1 )		4267812	1					
ANR	4267888	Callee	daemonCore -> InfoCommandSinfulString		4267812	0					
ANR	4267889	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		4267812	0					
ANR	4267890	Identifier	daemonCore		4267812	0					
ANR	4267891	Identifier	InfoCommandSinfulString		4267812	1					
ANR	4267892	ArgumentList	- 1		4267812	1					
ANR	4267893	Argument	- 1		4267812	0					
ANR	4267894	UnaryOperationExpression	- 1		4267812	0					
ANR	4267895	UnaryOperator	-		4267812	0					
ANR	4267896	PrimaryExpression	1		4267812	1					
ANR	4267897	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Registering myself(%s) to schedd(%s)\\n"" , sinful . Value ( ) , sname . Value ( ) )"	542:1:15409:15504	4267812	10	True				
ANR	4267898	CallExpression	"dprintf ( D_FULLDEBUG , ""Registering myself(%s) to schedd(%s)\\n"" , sinful . Value ( ) , sname . Value ( ) )"		4267812	0					
ANR	4267899	Callee	dprintf		4267812	0					
ANR	4267900	Identifier	dprintf		4267812	0					
ANR	4267901	ArgumentList	D_FULLDEBUG		4267812	1					
ANR	4267902	Argument	D_FULLDEBUG		4267812	0					
ANR	4267903	Identifier	D_FULLDEBUG		4267812	0					
ANR	4267904	Argument	"""Registering myself(%s) to schedd(%s)\\n"""		4267812	1					
ANR	4267905	PrimaryExpression	"""Registering myself(%s) to schedd(%s)\\n"""		4267812	0					
ANR	4267906	Argument	sinful . Value ( )		4267812	2					
ANR	4267907	CallExpression	sinful . Value ( )		4267812	0					
ANR	4267908	Callee	sinful . Value		4267812	0					
ANR	4267909	MemberAccess	sinful . Value		4267812	0					
ANR	4267910	Identifier	sinful		4267812	0					
ANR	4267911	Identifier	Value		4267812	1					
ANR	4267912	ArgumentList			4267812	1					
ANR	4267913	Argument	sname . Value ( )		4267812	3					
ANR	4267914	CallExpression	sname . Value ( )		4267812	0					
ANR	4267915	Callee	sname . Value		4267812	0					
ANR	4267916	MemberAccess	sname . Value		4267812	0					
ANR	4267917	Identifier	sname		4267812	0					
ANR	4267918	Identifier	Value		4267812	1					
ANR	4267919	ArgumentList			4267812	1					
ANR	4267920	IdentifierDeclStatement	"DCSchedd schedd ( sname . Value ( ) , NULL ) ;"	546:1:15535:15571	4267812	11	True				
ANR	4267921	IdentifierDecl	"schedd ( sname . Value ( ) , NULL )"		4267812	0					
ANR	4267922	IdentifierDeclType	DCSchedd		4267812	0					
ANR	4267923	Identifier	schedd		4267812	1					
ANR	4267924	Expression	"sname . Value ( ) , NULL"		4267812	2					
ANR	4267925	CallExpression	sname . Value ( )		4267812	0					
ANR	4267926	Callee	sname . Value		4267812	0					
ANR	4267927	MemberAccess	sname . Value		4267812	0					
ANR	4267928	Identifier	sname		4267812	0					
ANR	4267929	Identifier	Value		4267812	1					
ANR	4267930	ArgumentList			4267812	1					
ANR	4267931	Identifier	NULL		4267812	1					
ANR	4267932	ExpressionStatement	"rval = schedd . register_transferd ( sinful , id , 20 * 3 , regsock_ptr , & errstack )"	549:1:15629:15703	4267812	12	True				
ANR	4267933	AssignmentExpression	"rval = schedd . register_transferd ( sinful , id , 20 * 3 , regsock_ptr , & errstack )"		4267812	0		=			
ANR	4267934	Identifier	rval		4267812	0					
ANR	4267935	CallExpression	"schedd . register_transferd ( sinful , id , 20 * 3 , regsock_ptr , & errstack )"		4267812	1					
ANR	4267936	Callee	schedd . register_transferd		4267812	0					
ANR	4267937	MemberAccess	schedd . register_transferd		4267812	0					
ANR	4267938	Identifier	schedd		4267812	0					
ANR	4267939	Identifier	register_transferd		4267812	1					
ANR	4267940	ArgumentList	sinful		4267812	1					
ANR	4267941	Argument	sinful		4267812	0					
ANR	4267942	Identifier	sinful		4267812	0					
ANR	4267943	Argument	id		4267812	1					
ANR	4267944	Identifier	id		4267812	0					
ANR	4267945	Argument	20 * 3		4267812	2					
ANR	4267946	MultiplicativeExpression	20 * 3		4267812	0		*			
ANR	4267947	PrimaryExpression	20		4267812	0					
ANR	4267948	PrimaryExpression	3		4267812	1					
ANR	4267949	Argument	regsock_ptr		4267812	3					
ANR	4267950	Identifier	regsock_ptr		4267812	0					
ANR	4267951	Argument	& errstack		4267812	4					
ANR	4267952	UnaryOperationExpression	& errstack		4267812	0					
ANR	4267953	UnaryOperator	&		4267812	0					
ANR	4267954	Identifier	errstack		4267812	1					
ANR	4267955	IfStatement	if ( rval == false )		4267812	13					
ANR	4267956	Condition	rval == false	551:5:15711:15723	4267812	0	True				
ANR	4267957	EqualityExpression	rval == false		4267812	0		==			
ANR	4267958	Identifier	rval		4267812	0					
ANR	4267959	Identifier	false		4267812	1					
ANR	4267960	CompoundStatement		33:20:786:786	4267812	1					
ANR	4267961	Statement	dprintf	553:2:15745:15751	4267812	0	True				
ANR	4267962	Statement	(	553:9:15752:15752	4267812	1	True				
ANR	4267963	Statement	D_ALWAYS	553:10:15753:15760	4267812	2	True				
ANR	4267964	Statement	","	553:18:15761:15761	4267812	3	True				
ANR	4267965	Statement	"""TransferRequest::register_to_schedd(): Failed to """	553:20:15763:15813	4267812	4	True				
ANR	4267966	Statement	"""register. Schedd gave reason '%s'\\n"""	554:3:15818:15854	4267812	5	True				
ANR	4267967	Statement	","	554:40:15855:15855	4267812	6	True				
ANR	4267968	Statement	errstack	554:42:15857:15864	4267812	7	True				
ANR	4267969	Statement	.	554:50:15865:15865	4267812	8	True				
ANR	4267970	Statement	getFullText	554:51:15866:15876	4267812	9	True				
ANR	4267971	Statement	(	554:62:15877:15877	4267812	10	True				
ANR	4267972	Statement	)	554:63:15878:15878	4267812	11	True				
ANR	4267973	Statement	)	554:64:15879:15879	4267812	12	True				
ANR	4267974	ExpressionStatement		554:65:15880:15880	4267812	13	True				
ANR	4267975	ReturnStatement	return REG_RESULT_FAILED ;	555:2:15884:15908	4267812	14	True				
ANR	4267976	Identifier	REG_RESULT_FAILED		4267812	0					
ANR	4267977	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Succesfully registered, awaiting treq channel message....\\n"" )"	568:1:16301:16387	4267812	14	True				
ANR	4267978	CallExpression	"dprintf ( D_FULLDEBUG , ""Succesfully registered, awaiting treq channel message....\\n"" )"		4267812	0					
ANR	4267979	Callee	dprintf		4267812	0					
ANR	4267980	Identifier	dprintf		4267812	0					
ANR	4267981	ArgumentList	D_FULLDEBUG		4267812	1					
ANR	4267982	Argument	D_FULLDEBUG		4267812	0					
ANR	4267983	Identifier	D_FULLDEBUG		4267812	0					
ANR	4267984	Argument	"""Succesfully registered, awaiting treq channel message....\\n"""		4267812	1					
ANR	4267985	PrimaryExpression	"""Succesfully registered, awaiting treq channel message....\\n"""		4267812	0					
ANR	4267986	ReturnStatement	return REG_RESULT_SUCCESS ;	571:1:16391:16416	4267812	15	True				
ANR	4267987	Identifier	REG_RESULT_SUCCESS		4267812	0					
ANR	4267988	ReturnType	RegisterResult		4267812	1					
ANR	4267989	Identifier	TransferD :: register_to_schedd		4267812	2					
ANR	4267990	ParameterList	ReliSock * * regsock_ptr		4267812	3					
ANR	4267991	Parameter	ReliSock * * regsock_ptr	518:30:14915:14936	4267812	0	True				
ANR	4267992	ParameterType	ReliSock * *		4267812	0					
ANR	4267993	Identifier	regsock_ptr		4267812	1					
ANR	4267994	CFGEntryNode	ENTRY		4267812		True				
ANR	4267995	CFGExitNode	EXIT		4267812		True				
ANR	4267996	Symbol	schedd . register_transferd		4267812						
ANR	4267997	Symbol	m_features . get_schedd_sinful		4267812						
ANR	4267998	Symbol	REG_RESULT_FAILED		4267812						
ANR	4267999	Symbol	m_features . get_id		4267812						
ANR	4268000	Symbol	regsock_ptr		4267812						
ANR	4268001	Symbol	daemonCore		4267812						
ANR	4268002	Symbol	m_features		4267812						
ANR	4268003	Symbol	* regsock_ptr		4267812						
ANR	4268004	Symbol	& errstack		4267812						
ANR	4268005	Symbol	rval		4267812						
ANR	4268006	Symbol	id		4267812						
ANR	4268007	Symbol	sname . Value		4267812						
ANR	4268008	Symbol	sinful		4267812						
ANR	4268009	Symbol	REG_RESULT_NO_SCHEDD		4267812						
ANR	4268010	Symbol	daemonCore -> InfoCommandSinfulString		4267812						
ANR	4268011	Symbol	NULL		4267812						
ANR	4268012	Symbol	D_ALWAYS		4267812						
ANR	4268013	Symbol	sinful . Value		4267812						
ANR	4268014	Symbol	false		4267812						
ANR	4268015	Symbol	D_FULLDEBUG		4267812						
ANR	4268016	Symbol	schedd		4267812						
ANR	4268017	Symbol	errstack		4267812						
ANR	4268018	Symbol	REG_RESULT_SUCCESS		4267812						
ANR	4268019	Symbol	sname		4267812						
ANR	4268020	Symbol	* daemonCore		4267812						
ANR	4268021	Function	TransferD :: register_handlers	574:0:16421:17823							
ANR	4268022	FunctionDef	TransferD :: register_handlers ()		4268021	0					
ANR	4268023	CompoundStatement		576:0:16461:17823	4268021	0					
ANR	4268024	ExpressionStatement	"daemonCore -> Register_Command ( DUMP_STATE , ""DUMP_STATE"" , ( CommandHandlercpp ) & TransferD :: dump_state_handler , ""dump_state_handler"" , this , READ )"	578:1:16487:16635	4268021	0	True				
ANR	4268025	CallExpression	"daemonCore -> Register_Command ( DUMP_STATE , ""DUMP_STATE"" , ( CommandHandlercpp ) & TransferD :: dump_state_handler , ""dump_state_handler"" , this , READ )"		4268021	0					
ANR	4268026	Callee	daemonCore -> Register_Command		4268021	0					
ANR	4268027	PtrMemberAccess	daemonCore -> Register_Command		4268021	0					
ANR	4268028	Identifier	daemonCore		4268021	0					
ANR	4268029	Identifier	Register_Command		4268021	1					
ANR	4268030	ArgumentList	DUMP_STATE		4268021	1					
ANR	4268031	Argument	DUMP_STATE		4268021	0					
ANR	4268032	Identifier	DUMP_STATE		4268021	0					
ANR	4268033	Argument	"""DUMP_STATE"""		4268021	1					
ANR	4268034	PrimaryExpression	"""DUMP_STATE"""		4268021	0					
ANR	4268035	Argument	( CommandHandlercpp ) & TransferD :: dump_state_handler		4268021	2					
ANR	4268036	CastExpression	( CommandHandlercpp ) & TransferD :: dump_state_handler		4268021	0					
ANR	4268037	CastTarget	CommandHandlercpp		4268021	0					
ANR	4268038	UnaryOperationExpression	& TransferD :: dump_state_handler		4268021	1					
ANR	4268039	UnaryOperator	&		4268021	0					
ANR	4268040	Identifier	TransferD :: dump_state_handler		4268021	1					
ANR	4268041	Argument	"""dump_state_handler"""		4268021	3					
ANR	4268042	PrimaryExpression	"""dump_state_handler"""		4268021	0					
ANR	4268043	Argument	this		4268021	4					
ANR	4268044	Identifier	this		4268021	0					
ANR	4268045	Argument	READ		4268021	5					
ANR	4268046	Identifier	READ		4268021	0					
ANR	4268047	ExpressionStatement	"daemonCore -> Register_Command ( TRANSFERD_CONTROL_CHANNEL , ""TRANSFERD_CONTROL_CHANNEL"" , ( CommandHandlercpp ) & TransferD :: setup_transfer_request_handler , ""setup_transfer_request_handler"" , this , WRITE )"	586:1:16829:17032	4268021	1	True				
ANR	4268048	CallExpression	"daemonCore -> Register_Command ( TRANSFERD_CONTROL_CHANNEL , ""TRANSFERD_CONTROL_CHANNEL"" , ( CommandHandlercpp ) & TransferD :: setup_transfer_request_handler , ""setup_transfer_request_handler"" , this , WRITE )"		4268021	0					
ANR	4268049	Callee	daemonCore -> Register_Command		4268021	0					
ANR	4268050	PtrMemberAccess	daemonCore -> Register_Command		4268021	0					
ANR	4268051	Identifier	daemonCore		4268021	0					
ANR	4268052	Identifier	Register_Command		4268021	1					
ANR	4268053	ArgumentList	TRANSFERD_CONTROL_CHANNEL		4268021	1					
ANR	4268054	Argument	TRANSFERD_CONTROL_CHANNEL		4268021	0					
ANR	4268055	Identifier	TRANSFERD_CONTROL_CHANNEL		4268021	0					
ANR	4268056	Argument	"""TRANSFERD_CONTROL_CHANNEL"""		4268021	1					
ANR	4268057	PrimaryExpression	"""TRANSFERD_CONTROL_CHANNEL"""		4268021	0					
ANR	4268058	Argument	( CommandHandlercpp ) & TransferD :: setup_transfer_request_handler		4268021	2					
ANR	4268059	CastExpression	( CommandHandlercpp ) & TransferD :: setup_transfer_request_handler		4268021	0					
ANR	4268060	CastTarget	CommandHandlercpp		4268021	0					
ANR	4268061	UnaryOperationExpression	& TransferD :: setup_transfer_request_handler		4268021	1					
ANR	4268062	UnaryOperator	&		4268021	0					
ANR	4268063	Identifier	TransferD :: setup_transfer_request_handler		4268021	1					
ANR	4268064	Argument	"""setup_transfer_request_handler"""		4268021	3					
ANR	4268065	PrimaryExpression	"""setup_transfer_request_handler"""		4268021	0					
ANR	4268066	Argument	this		4268021	4					
ANR	4268067	Identifier	this		4268021	0					
ANR	4268068	Argument	WRITE		4268021	5					
ANR	4268069	Identifier	WRITE		4268021	0					
ANR	4268070	ExpressionStatement	"daemonCore -> Register_Command ( TRANSFERD_WRITE_FILES , ""TRANSFERD_WRITE_FILES"" , ( CommandHandlercpp ) & TransferD :: write_files_handler , ""write_files_handler"" , this , WRITE )"	593:1:17153:17326	4268021	2	True				
ANR	4268071	CallExpression	"daemonCore -> Register_Command ( TRANSFERD_WRITE_FILES , ""TRANSFERD_WRITE_FILES"" , ( CommandHandlercpp ) & TransferD :: write_files_handler , ""write_files_handler"" , this , WRITE )"		4268021	0					
ANR	4268072	Callee	daemonCore -> Register_Command		4268021	0					
ANR	4268073	PtrMemberAccess	daemonCore -> Register_Command		4268021	0					
ANR	4268074	Identifier	daemonCore		4268021	0					
ANR	4268075	Identifier	Register_Command		4268021	1					
ANR	4268076	ArgumentList	TRANSFERD_WRITE_FILES		4268021	1					
ANR	4268077	Argument	TRANSFERD_WRITE_FILES		4268021	0					
ANR	4268078	Identifier	TRANSFERD_WRITE_FILES		4268021	0					
ANR	4268079	Argument	"""TRANSFERD_WRITE_FILES"""		4268021	1					
ANR	4268080	PrimaryExpression	"""TRANSFERD_WRITE_FILES"""		4268021	0					
ANR	4268081	Argument	( CommandHandlercpp ) & TransferD :: write_files_handler		4268021	2					
ANR	4268082	CastExpression	( CommandHandlercpp ) & TransferD :: write_files_handler		4268021	0					
ANR	4268083	CastTarget	CommandHandlercpp		4268021	0					
ANR	4268084	UnaryOperationExpression	& TransferD :: write_files_handler		4268021	1					
ANR	4268085	UnaryOperator	&		4268021	0					
ANR	4268086	Identifier	TransferD :: write_files_handler		4268021	1					
ANR	4268087	Argument	"""write_files_handler"""		4268021	3					
ANR	4268088	PrimaryExpression	"""write_files_handler"""		4268021	0					
ANR	4268089	Argument	this		4268021	4					
ANR	4268090	Identifier	this		4268021	0					
ANR	4268091	Argument	WRITE		4268021	5					
ANR	4268092	Identifier	WRITE		4268021	0					
ANR	4268093	ExpressionStatement	"daemonCore -> Register_Command ( TRANSFERD_READ_FILES , ""TRANSFERD_READ_FILES"" , ( CommandHandlercpp ) & TransferD :: read_files_handler , ""read_files_handler"" , this , READ )"	600:1:17446:17614	4268021	3	True				
ANR	4268094	CallExpression	"daemonCore -> Register_Command ( TRANSFERD_READ_FILES , ""TRANSFERD_READ_FILES"" , ( CommandHandlercpp ) & TransferD :: read_files_handler , ""read_files_handler"" , this , READ )"		4268021	0					
ANR	4268095	Callee	daemonCore -> Register_Command		4268021	0					
ANR	4268096	PtrMemberAccess	daemonCore -> Register_Command		4268021	0					
ANR	4268097	Identifier	daemonCore		4268021	0					
ANR	4268098	Identifier	Register_Command		4268021	1					
ANR	4268099	ArgumentList	TRANSFERD_READ_FILES		4268021	1					
ANR	4268100	Argument	TRANSFERD_READ_FILES		4268021	0					
ANR	4268101	Identifier	TRANSFERD_READ_FILES		4268021	0					
ANR	4268102	Argument	"""TRANSFERD_READ_FILES"""		4268021	1					
ANR	4268103	PrimaryExpression	"""TRANSFERD_READ_FILES"""		4268021	0					
ANR	4268104	Argument	( CommandHandlercpp ) & TransferD :: read_files_handler		4268021	2					
ANR	4268105	CastExpression	( CommandHandlercpp ) & TransferD :: read_files_handler		4268021	0					
ANR	4268106	CastTarget	CommandHandlercpp		4268021	0					
ANR	4268107	UnaryOperationExpression	& TransferD :: read_files_handler		4268021	1					
ANR	4268108	UnaryOperator	&		4268021	0					
ANR	4268109	Identifier	TransferD :: read_files_handler		4268021	1					
ANR	4268110	Argument	"""read_files_handler"""		4268021	3					
ANR	4268111	PrimaryExpression	"""read_files_handler"""		4268021	0					
ANR	4268112	Argument	this		4268021	4					
ANR	4268113	Identifier	this		4268021	0					
ANR	4268114	Argument	READ		4268021	5					
ANR	4268115	Identifier	READ		4268021	0					
ANR	4268116	ExpressionStatement	"daemonCore -> Register_Reaper ( ""Reaper"" , ( ReaperHandlercpp ) & TransferD :: reaper_handler , ""Reaper"" , this )"	607:1:17719:17821	4268021	4	True				
ANR	4268117	CallExpression	"daemonCore -> Register_Reaper ( ""Reaper"" , ( ReaperHandlercpp ) & TransferD :: reaper_handler , ""Reaper"" , this )"		4268021	0					
ANR	4268118	Callee	daemonCore -> Register_Reaper		4268021	0					
ANR	4268119	PtrMemberAccess	daemonCore -> Register_Reaper		4268021	0					
ANR	4268120	Identifier	daemonCore		4268021	0					
ANR	4268121	Identifier	Register_Reaper		4268021	1					
ANR	4268122	ArgumentList	"""Reaper"""		4268021	1					
ANR	4268123	Argument	"""Reaper"""		4268021	0					
ANR	4268124	PrimaryExpression	"""Reaper"""		4268021	0					
ANR	4268125	Argument	( ReaperHandlercpp ) & TransferD :: reaper_handler		4268021	1					
ANR	4268126	CastExpression	( ReaperHandlercpp ) & TransferD :: reaper_handler		4268021	0					
ANR	4268127	CastTarget	ReaperHandlercpp		4268021	0					
ANR	4268128	UnaryOperationExpression	& TransferD :: reaper_handler		4268021	1					
ANR	4268129	UnaryOperator	&		4268021	0					
ANR	4268130	Identifier	TransferD :: reaper_handler		4268021	1					
ANR	4268131	Argument	"""Reaper"""		4268021	2					
ANR	4268132	PrimaryExpression	"""Reaper"""		4268021	0					
ANR	4268133	Argument	this		4268021	3					
ANR	4268134	Identifier	this		4268021	0					
ANR	4268135	ReturnType	void		4268021	1					
ANR	4268136	Identifier	TransferD :: register_handlers		4268021	2					
ANR	4268137	ParameterList			4268021	3					
ANR	4268138	CFGEntryNode	ENTRY		4268021		True				
ANR	4268139	CFGExitNode	EXIT		4268021		True				
ANR	4268140	Symbol	TRANSFERD_READ_FILES		4268021						
ANR	4268141	Symbol	this		4268021						
ANR	4268142	Symbol	& TransferD :: read_files_handler		4268021						
ANR	4268143	Symbol	& TransferD :: dump_state_handler		4268021						
ANR	4268144	Symbol	WRITE		4268021						
ANR	4268145	Symbol	READ		4268021						
ANR	4268146	Symbol	& TransferD :: setup_transfer_request_handler		4268021						
ANR	4268147	Symbol	TRANSFERD_WRITE_FILES		4268021						
ANR	4268148	Symbol	daemonCore		4268021						
ANR	4268149	Symbol	& TransferD :: write_files_handler		4268021						
ANR	4268150	Symbol	DUMP_STATE		4268021						
ANR	4268151	Symbol	& TransferD :: reaper_handler		4268021						
ANR	4268152	Symbol	TRANSFERD_CONTROL_CHANNEL		4268021						
ANR	4268153	Function	TransferD :: register_timers	611:0:17826:18312							
ANR	4268154	FunctionDef	TransferD :: register_timers ()		4268153	0					
ANR	4268155	CompoundStatement		613:0:17864:18312	4268153	0					
ANR	4268156	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , 20 , ( TimerHandlercpp ) & TransferD :: exit_due_to_inactivity_timer , ""TransferD::exit_due_to_inactivity_timer"" , this )"	620:1:18163:18310	4268153	0	True				
ANR	4268157	CallExpression	"daemonCore -> Register_Timer ( 0 , 20 , ( TimerHandlercpp ) & TransferD :: exit_due_to_inactivity_timer , ""TransferD::exit_due_to_inactivity_timer"" , this )"		4268153	0					
ANR	4268158	Callee	daemonCore -> Register_Timer		4268153	0					
ANR	4268159	PtrMemberAccess	daemonCore -> Register_Timer		4268153	0					
ANR	4268160	Identifier	daemonCore		4268153	0					
ANR	4268161	Identifier	Register_Timer		4268153	1					
ANR	4268162	ArgumentList	0		4268153	1					
ANR	4268163	Argument	0		4268153	0					
ANR	4268164	PrimaryExpression	0		4268153	0					
ANR	4268165	Argument	20		4268153	1					
ANR	4268166	PrimaryExpression	20		4268153	0					
ANR	4268167	Argument	( TimerHandlercpp ) & TransferD :: exit_due_to_inactivity_timer		4268153	2					
ANR	4268168	CastExpression	( TimerHandlercpp ) & TransferD :: exit_due_to_inactivity_timer		4268153	0					
ANR	4268169	CastTarget	TimerHandlercpp		4268153	0					
ANR	4268170	UnaryOperationExpression	& TransferD :: exit_due_to_inactivity_timer		4268153	1					
ANR	4268171	UnaryOperator	&		4268153	0					
ANR	4268172	Identifier	TransferD :: exit_due_to_inactivity_timer		4268153	1					
ANR	4268173	Argument	"""TransferD::exit_due_to_inactivity_timer"""		4268153	3					
ANR	4268174	PrimaryExpression	"""TransferD::exit_due_to_inactivity_timer"""		4268153	0					
ANR	4268175	Argument	this		4268153	4					
ANR	4268176	Identifier	this		4268153	0					
ANR	4268177	ReturnType	void		4268153	1					
ANR	4268178	Identifier	TransferD :: register_timers		4268153	2					
ANR	4268179	ParameterList			4268153	3					
ANR	4268180	CFGEntryNode	ENTRY		4268153		True				
ANR	4268181	CFGExitNode	EXIT		4268153		True				
ANR	4268182	Symbol	& TransferD :: exit_due_to_inactivity_timer		4268153						
ANR	4268183	Symbol	daemonCore		4268153						
ANR	4268184	Symbol	this		4268153						
ANR	4268185	Function	usage	626:0:18316:18767							
ANR	4268186	FunctionDef	usage ()		4268185	0					
ANR	4268187	CompoundStatement		627:0:18333:18767	4268185	0					
ANR	4268188	Statement	dprintf	628:1:18336:18342	4268185	0	True				
ANR	4268189	Statement	(	628:8:18343:18343	4268185	1	True				
ANR	4268190	Statement	D_ALWAYS	628:9:18344:18351	4268185	2	True				
ANR	4268191	Statement	","	628:17:18352:18352	4268185	3	True				
ANR	4268192	Statement	"""Usage info:\\n"""	629:2:18357:18371	4268185	4	True				
ANR	4268193	Statement	"""--schedd <sinful>: Address of the schedd the transferd will contact\\n"""	630:2:18375:18445	4268185	5	True				
ANR	4268194	Statement	"""--stdin:           Accept a transfer request on stdin\\n"""	631:2:18449:18505	4268185	6	True				
ANR	4268195	Statement	"""--id <ascii>:      Used by the schedd to pair transferds to requests\\n"""	632:2:18509:18580	4268185	7	True				
ANR	4268196	Statement	"""--shadow <upload|download>:\\n"""	633:2:18584:18614	4268185	8	True				
ANR	4268197	Statement	"""                   Used with --stdin, transferd connects to shadow.\\n"""	634:2:18618:18688	4268185	9	True				
ANR	4268198	Statement	"""                   This is demo mode with the starter.\\n"""	635:2:18692:18749	4268185	10	True				
ANR	4268199	Statement	)	635:60:18750:18750	4268185	11	True				
ANR	4268200	ExpressionStatement		635:61:18751:18751	4268185	12	True				
ANR	4268201	ExpressionStatement	DC_Exit ( 0 )	637:1:18755:18765	4268185	13	True				
ANR	4268202	CallExpression	DC_Exit ( 0 )		4268185	0					
ANR	4268203	Callee	DC_Exit		4268185	0					
ANR	4268204	Identifier	DC_Exit		4268185	0					
ANR	4268205	ArgumentList	0		4268185	1					
ANR	4268206	Argument	0		4268185	0					
ANR	4268207	PrimaryExpression	0		4268185	0					
ANR	4268208	ReturnType	void		4268185	1					
ANR	4268209	Identifier	usage		4268185	2					
ANR	4268210	ParameterList			4268185	3					
ANR	4268211	CFGEntryNode	ENTRY		4268185		True				
ANR	4268212	CFGExitNode	EXIT		4268185		True				
