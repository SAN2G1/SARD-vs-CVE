command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1266846	File	data/converged/CVE-2011-4930_htcondor/dprintf.cpp								
ANR	1266847	DeclStmt									
ANR	1266848	Decl							FILE	"FILE * ( int debug_flags , const char * mode , int force_lock )"	debug_lock
ANR	1266849	DeclStmt									
ANR	1266850	Decl							void	void ( int debug_flags )	debug_unlock
ANR	1266851	DeclStmt									
ANR	1266852	Decl							FILE	"FILE * ( struct DebugFileInfo * it , const char * mode , int force_lock , bool dont_panic )"	debug_lock_it
ANR	1266853	DeclStmt									
ANR	1266854	Decl							void	void ( struct DebugFileInfo * it )	debug_unlock_it
ANR	1266855	DeclStmt									
ANR	1266856	Decl							FILE	"FILE * ( struct DebugFileInfo * it , const char flags [ ] , bool dont_panic )"	open_debug_file
ANR	1266857	DeclStmt									
ANR	1266858	Decl							void	void ( struct DebugFileInfo * it )	debug_close_file
ANR	1266859	DeclStmt									
ANR	1266860	Decl							void	void ( void )	debug_close_all_files
ANR	1266861	DeclStmt									
ANR	1266862	Decl							void	void ( void )	debug_open_lock
ANR	1266863	DeclStmt									
ANR	1266864	Decl							void	void ( void )	debug_close_lock
ANR	1266865	DeclStmt									
ANR	1266866	Decl							FILE	"FILE * ( struct DebugFileInfo * it , bool dont_panic )"	preserve_log_file
ANR	1266867	DeclStmt									
ANR	1266868	Decl							void	"void ( int error_code , const char * msg )"	_condor_dprintf_exit
ANR	1266869	DeclStmt									
ANR	1266870	Decl							void	void ( const char * strflags )	_condor_set_debug_flags
ANR	1266871	DeclStmt									
ANR	1266872	Decl							void	"void ( int flags , const char * fmt , va_list args )"	_condor_save_dprintf_line
ANR	1266873	DeclStmt									
ANR	1266874	Decl							void	void ( void )	_condor_dprintf_saved_lines
ANR	1266875	ClassDef	saved_dprintf	72:0:2921:2998							
ANR	1266876	DeclStmt									
ANR	1266877	Decl							int	int	level
ANR	1266878	DeclStmt									
ANR	1266879	Decl							char	char *	line
ANR	1266880	DeclStmt									
ANR	1266881	Decl							struct saved_dprintf	struct saved_dprintf *	next
ANR	1266882	DeclStmt									
ANR	1266883	Decl							struct saved_dprintf	struct saved_dprintf *	saved_list
ANR	1266884	DeclStmt									
ANR	1266885	Decl							struct saved_dprintf	struct saved_dprintf *	saved_list_tail
ANR	1266886	DeclStmt									
ANR	1266887	Decl							extern DLL_IMPORT_MAGIC int	extern DLL_IMPORT_MAGIC int	errno
ANR	1266888	DeclStmt									
ANR	1266889	Decl							extern int	extern int	DebugFlags
ANR	1266890	DeclStmt									
ANR	1266891	Decl							extern param_functions	extern param_functions *	dprintf_param_funcs
ANR	1266892	DeclStmt									
ANR	1266893	Decl							extern int	extern int	_condor_dprintf_works
ANR	1266894	DeclStmt									
ANR	1266895	Decl							int	int	DebugShouldLockToAppend
ANR	1266896	DeclStmt									
ANR	1266897	Decl							int	int	DebugIsLocked
ANR	1266898	DeclStmt									
ANR	1266899	Decl							int	int	DebugLockDelay
ANR	1266900	DeclStmt									
ANR	1266901	Decl							time_t	time_t	DebugLockDelayPeriodStarted
ANR	1266902	DeclStmt									
ANR	1266903	Decl							std :: vector < DebugFileInfo >	std :: vector < DebugFileInfo > *	DebugLogs
ANR	1266904	DeclStmt									
ANR	1266905	Decl							time_t	time_t	DebugLastMod
ANR	1266906	DeclStmt									
ANR	1266907	Decl							int	int	DebugUseTimestamps
ANR	1266908	DeclStmt									
ANR	1266909	Decl							int	int	DebugContinueOnOpenFailure
ANR	1266910	DeclStmt									
ANR	1266911	Decl							char	char *	DebugLock
ANR	1266912	DeclStmt									
ANR	1266913	Decl							"int ( * ) ( char * * buf , int * bufpos , int * buflen )"	"int ( * ) ( char * * buf , int * bufpos , int * buflen )"	DebugId
ANR	1266914	DeclStmt									
ANR	1266915	Decl							int	int ( int mode )	SetSyscalls
ANR	1266916	DeclStmt									
ANR	1266917	Decl							int	int	LockFd
ANR	1266918	DeclStmt									
ANR	1266919	Decl							int	int	log_keep_open
ANR	1266920	DeclStmt									
ANR	1266921	Decl							int	int	DprintfBroken
ANR	1266922	DeclStmt									
ANR	1266923	Decl							int	int	DebugUnlockBroken
ANR	1266924	DeclStmt									
ANR	1266925	Decl							pthread_mutex_t	pthread_mutex_t	_condor_dprintf_critsec
ANR	1266926	DeclStmt									
ANR	1266927	Decl							CRITICAL_SECTION	CRITICAL_SECTION *	_condor_dprintf_critsec
ANR	1266928	DeclStmt									
ANR	1266929	Decl							int	"int ( int fd , LOCK_TYPE type , int do_block )"	lock_or_mutex_file
ANR	1266930	DeclStmt									
ANR	1266931	Decl							extern int	"extern int ( const char * format , va_list args )"	vprintf_length
ANR	1266932	DeclStmt									
ANR	1266933	Decl							HANDLE	HANDLE	debug_win32_mutex
ANR	1266934	DeclStmt									
ANR	1266935	Decl							int	int	use_kernel_mutex
ANR	1266936	DeclStmt									
ANR	1266937	Decl							int	int	dprintf_count
ANR	1266938	DeclStmt									
ANR	1266939	Decl							int	int	InDBX
ANR	1266940	Function	DebugFileInfo :: DebugFileInfo	172:0:6075:6346							
ANR	1266941	FunctionDef	DebugFileInfo :: DebugFileInfo (const DebugFileInfo & debugFileInfo)		1266940	0					
ANR	1266942	CompoundStatement		173:0:6140:6346	1266940	0					
ANR	1266943	ExpressionStatement	this -> debugFlags = debugFileInfo . debugFlags	174:1:6143:6186	1266940	0	True				
ANR	1266944	AssignmentExpression	this -> debugFlags = debugFileInfo . debugFlags		1266940	0		=			
ANR	1266945	PtrMemberAccess	this -> debugFlags		1266940	0					
ANR	1266946	Identifier	this		1266940	0					
ANR	1266947	Identifier	debugFlags		1266940	1					
ANR	1266948	MemberAccess	debugFileInfo . debugFlags		1266940	1					
ANR	1266949	Identifier	debugFileInfo		1266940	0					
ANR	1266950	Identifier	debugFlags		1266940	1					
ANR	1266951	ExpressionStatement	this -> logPath = std :: string ( debugFileInfo . logPath )	175:1:6189:6239	1266940	1	True				
ANR	1266952	AssignmentExpression	this -> logPath = std :: string ( debugFileInfo . logPath )		1266940	0		=			
ANR	1266953	PtrMemberAccess	this -> logPath		1266940	0					
ANR	1266954	Identifier	this		1266940	0					
ANR	1266955	Identifier	logPath		1266940	1					
ANR	1266956	CallExpression	std :: string ( debugFileInfo . logPath )		1266940	1					
ANR	1266957	Callee	std :: string		1266940	0					
ANR	1266958	Identifier	std :: string		1266940	0					
ANR	1266959	ArgumentList	debugFileInfo . logPath		1266940	1					
ANR	1266960	Argument	debugFileInfo . logPath		1266940	0					
ANR	1266961	MemberAccess	debugFileInfo . logPath		1266940	0					
ANR	1266962	Identifier	debugFileInfo		1266940	0					
ANR	1266963	Identifier	logPath		1266940	1					
ANR	1266964	ExpressionStatement	this -> maxLog = debugFileInfo . maxLog	176:1:6242:6277	1266940	2	True				
ANR	1266965	AssignmentExpression	this -> maxLog = debugFileInfo . maxLog		1266940	0		=			
ANR	1266966	PtrMemberAccess	this -> maxLog		1266940	0					
ANR	1266967	Identifier	this		1266940	0					
ANR	1266968	Identifier	maxLog		1266940	1					
ANR	1266969	MemberAccess	debugFileInfo . maxLog		1266940	1					
ANR	1266970	Identifier	debugFileInfo		1266940	0					
ANR	1266971	Identifier	maxLog		1266940	1					
ANR	1266972	ExpressionStatement	this -> maxLogNum = debugFileInfo . maxLogNum	177:1:6280:6321	1266940	3	True				
ANR	1266973	AssignmentExpression	this -> maxLogNum = debugFileInfo . maxLogNum		1266940	0		=			
ANR	1266974	PtrMemberAccess	this -> maxLogNum		1266940	0					
ANR	1266975	Identifier	this		1266940	0					
ANR	1266976	Identifier	maxLogNum		1266940	1					
ANR	1266977	MemberAccess	debugFileInfo . maxLogNum		1266940	1					
ANR	1266978	Identifier	debugFileInfo		1266940	0					
ANR	1266979	Identifier	maxLogNum		1266940	1					
ANR	1266980	ExpressionStatement	this -> debugFP = NULL	178:1:6324:6344	1266940	4	True				
ANR	1266981	AssignmentExpression	this -> debugFP = NULL		1266940	0		=			
ANR	1266982	PtrMemberAccess	this -> debugFP		1266940	0					
ANR	1266983	Identifier	this		1266940	0					
ANR	1266984	Identifier	debugFP		1266940	1					
ANR	1266985	Identifier	NULL		1266940	1					
ANR	1266986	Identifier	DebugFileInfo :: DebugFileInfo		1266940	1					
ANR	1266987	ParameterList	const DebugFileInfo & debugFileInfo		1266940	2					
ANR	1266988	Parameter	const DebugFileInfo & debugFileInfo	172:29:6104:6137	1266940	0	True				
ANR	1266989	ParameterType	const DebugFileInfo &		1266940	0					
ANR	1266990	Identifier	debugFileInfo		1266940	1					
ANR	1266991	CFGEntryNode	ENTRY		1266940		True				
ANR	1266992	CFGExitNode	EXIT		1266940		True				
ANR	1266993	Symbol	debugFileInfo . maxLog		1266940						
ANR	1266994	Symbol	debugFileInfo . debugFlags		1266940						
ANR	1266995	Symbol	debugFileInfo . logPath		1266940						
ANR	1266996	Symbol	NULL		1266940						
ANR	1266997	Symbol	this		1266940						
ANR	1266998	Symbol	this -> debugFlags		1266940						
ANR	1266999	Symbol	this -> maxLog		1266940						
ANR	1267000	Symbol	debugFileInfo . maxLogNum		1266940						
ANR	1267001	Symbol	* this		1266940						
ANR	1267002	Symbol	std :: string		1266940						
ANR	1267003	Symbol	debugFileInfo		1266940						
ANR	1267004	Symbol	this -> logPath		1266940						
ANR	1267005	Symbol	this -> maxLogNum		1266940						
ANR	1267006	Symbol	this -> debugFP		1266940						
ANR	1267007	Function	DebugFileInfo :: ~DebugFileInfo	181:0:6349:6439							
ANR	1267008	FunctionDef	DebugFileInfo :: ~DebugFileInfo ()		1267007	0					
ANR	1267009	CompoundStatement		182:0:6381:6439	1267007	0					
ANR	1267010	IfStatement	if ( debugFP )		1267007	0					
ANR	1267011	Condition	debugFP	183:4:6387:6393	1267007	0	True				
ANR	1267012	Identifier	debugFP		1267007	0					
ANR	1267013	CompoundStatement		3:1:15:15	1267007	1					
ANR	1267014	ExpressionStatement	fclose ( debugFP )	185:2:6401:6416	1267007	0	True				
ANR	1267015	CallExpression	fclose ( debugFP )		1267007	0					
ANR	1267016	Callee	fclose		1267007	0					
ANR	1267017	Identifier	fclose		1267007	0					
ANR	1267018	ArgumentList	debugFP		1267007	1					
ANR	1267019	Argument	debugFP		1267007	0					
ANR	1267020	Identifier	debugFP		1267007	0					
ANR	1267021	ExpressionStatement	debugFP = NULL	186:2:6420:6434	1267007	1	True				
ANR	1267022	AssignmentExpression	debugFP = NULL		1267007	0		=			
ANR	1267023	Identifier	debugFP		1267007	0					
ANR	1267024	Identifier	NULL		1267007	1					
ANR	1267025	Identifier	DebugFileInfo :: ~DebugFileInfo		1267007	1					
ANR	1267026	ParameterList			1267007	2					
ANR	1267027	CFGEntryNode	ENTRY		1267007		True				
ANR	1267028	CFGExitNode	EXIT		1267007		True				
ANR	1267029	Symbol	NULL		1267007						
ANR	1267030	Symbol	debugFP		1267007						
ANR	1267031	Function	DebugFileInfo :: MatchesFlags	190:0:6442:6623							
ANR	1267032	FunctionDef	DebugFileInfo :: MatchesFlags (int flags)		1267031	0					
ANR	1267033	CompoundStatement		191:0:6492:6623	1267031	0					
ANR	1267034	IfStatement	if ( ! flags )		1267031	0					
ANR	1267035	Condition	! flags	192:6:6500:6506	1267031	0	True				
ANR	1267036	UnaryOperationExpression	! flags		1267031	0					
ANR	1267037	UnaryOperator	!		1267031	0					
ANR	1267038	Identifier	flags		1267031	1					
ANR	1267039	ReturnStatement	return true ;	192:15:6509:6520	1267031	1	True				
ANR	1267040	Identifier	true		1267031	0					
ANR	1267041	IfStatement	if ( ! this -> debugFlags )		1267031	1					
ANR	1267042	Condition	! this -> debugFlags	193:6:6528:6545	1267031	0	True				
ANR	1267043	UnaryOperationExpression	! this -> debugFlags		1267031	0					
ANR	1267044	UnaryOperator	!		1267031	0					
ANR	1267045	PtrMemberAccess	this -> debugFlags		1267031	1					
ANR	1267046	Identifier	this		1267031	0					
ANR	1267047	Identifier	debugFlags		1267031	1					
ANR	1267048	ReturnStatement	return ( DebugFlags & flags ) != 0 ;	193:26:6548:6580	1267031	1	True				
ANR	1267049	EqualityExpression	( DebugFlags & flags ) != 0		1267031	0		!=			
ANR	1267050	BitAndExpression	DebugFlags & flags		1267031	0		&			
ANR	1267051	Identifier	DebugFlags		1267031	0					
ANR	1267052	Identifier	flags		1267031	1					
ANR	1267053	PrimaryExpression	0		1267031	1					
ANR	1267054	ReturnStatement	return ( this -> debugFlags & flags ) != 0 ;	194:1:6583:6621	1267031	2	True				
ANR	1267055	EqualityExpression	( this -> debugFlags & flags ) != 0		1267031	0		!=			
ANR	1267056	BitAndExpression	this -> debugFlags & flags		1267031	0		&			
ANR	1267057	PtrMemberAccess	this -> debugFlags		1267031	0					
ANR	1267058	Identifier	this		1267031	0					
ANR	1267059	Identifier	debugFlags		1267031	1					
ANR	1267060	Identifier	flags		1267031	1					
ANR	1267061	PrimaryExpression	0		1267031	1					
ANR	1267062	ReturnType	bool		1267031	1					
ANR	1267063	Identifier	DebugFileInfo :: MatchesFlags		1267031	2					
ANR	1267064	ParameterList	int flags		1267031	3					
ANR	1267065	Parameter	int flags	190:33:6475:6483	1267031	0	True				
ANR	1267066	ParameterType	int		1267031	0					
ANR	1267067	Identifier	flags		1267031	1					
ANR	1267068	CFGEntryNode	ENTRY		1267031		True				
ANR	1267069	CFGExitNode	EXIT		1267031		True				
ANR	1267070	Symbol	* this		1267031						
ANR	1267071	Symbol	flags		1267031						
ANR	1267072	Symbol	true		1267031						
ANR	1267073	Symbol	this		1267031						
ANR	1267074	Symbol	this -> debugFlags		1267031						
ANR	1267075	Symbol	DebugFlags		1267031						
ANR	1267076	Function	formatTimeHeader	197:0:6626:7164							
ANR	1267077	FunctionDef	formatTimeHeader (struct tm * tm)		1267076	0					
ANR	1267078	CompoundStatement		197:45:6671:7164	1267076	0					
ANR	1267079	Statement	static	198:1:6674:6679	1267076	0	True				
ANR	1267080	IdentifierDeclStatement	char timebuf [ 80 ] ;	198:8:6681:6697	1267076	1	True				
ANR	1267081	IdentifierDecl	timebuf [ 80 ]		1267076	0					
ANR	1267082	IdentifierDeclType	char [ 80 ]		1267076	0					
ANR	1267083	Identifier	timebuf		1267076	1					
ANR	1267084	PrimaryExpression	80		1267076	2					
ANR	1267085	Statement	static	199:1:6700:6705	1267076	2	True				
ANR	1267086	IdentifierDeclStatement	char * timeFormat = 0 ;	199:8:6707:6727	1267076	3	True				
ANR	1267087	IdentifierDecl	* timeFormat = 0		1267076	0					
ANR	1267088	IdentifierDeclType	char *		1267076	0					
ANR	1267089	Identifier	timeFormat		1267076	1					
ANR	1267090	AssignmentExpression	* timeFormat = 0		1267076	2		=			
ANR	1267091	Identifier	timeFormat		1267076	0					
ANR	1267092	PrimaryExpression	0		1267076	1					
ANR	1267093	Statement	static	200:1:6730:6735	1267076	4	True				
ANR	1267094	IdentifierDeclStatement	int firstTime = 1 ;	200:8:6737:6754	1267076	5	True				
ANR	1267095	IdentifierDecl	firstTime = 1		1267076	0					
ANR	1267096	IdentifierDeclType	int		1267076	0					
ANR	1267097	Identifier	firstTime		1267076	1					
ANR	1267098	AssignmentExpression	firstTime = 1		1267076	2		=			
ANR	1267099	Identifier	firstTime		1267076	0					
ANR	1267100	PrimaryExpression	1		1267076	1					
ANR	1267101	IfStatement	if ( firstTime )		1267076	6					
ANR	1267102	Condition	firstTime	202:5:6762:6770	1267076	0	True				
ANR	1267103	Identifier	firstTime		1267076	0					
ANR	1267104	CompoundStatement		6:16:101:101	1267076	1					
ANR	1267105	ExpressionStatement	firstTime = 0	203:2:6777:6790	1267076	0	True				
ANR	1267106	AssignmentExpression	firstTime = 0		1267076	0		=			
ANR	1267107	Identifier	firstTime		1267076	0					
ANR	1267108	PrimaryExpression	0		1267076	1					
ANR	1267109	ExpressionStatement	"timeFormat = dprintf_param_funcs -> param ( ""DEBUG_TIME_FORMAT"" )"	204:2:6794:6856	1267076	1	True				
ANR	1267110	AssignmentExpression	"timeFormat = dprintf_param_funcs -> param ( ""DEBUG_TIME_FORMAT"" )"		1267076	0		=			
ANR	1267111	Identifier	timeFormat		1267076	0					
ANR	1267112	CallExpression	"dprintf_param_funcs -> param ( ""DEBUG_TIME_FORMAT"" )"		1267076	1					
ANR	1267113	Callee	dprintf_param_funcs -> param		1267076	0					
ANR	1267114	PtrMemberAccess	dprintf_param_funcs -> param		1267076	0					
ANR	1267115	Identifier	dprintf_param_funcs		1267076	0					
ANR	1267116	Identifier	param		1267076	1					
ANR	1267117	ArgumentList	"""DEBUG_TIME_FORMAT"""		1267076	1					
ANR	1267118	Argument	"""DEBUG_TIME_FORMAT"""		1267076	0					
ANR	1267119	PrimaryExpression	"""DEBUG_TIME_FORMAT"""		1267076	0					
ANR	1267120	IfStatement	if ( ! timeFormat )		1267076	2					
ANR	1267121	Condition	! timeFormat	205:6:6864:6874	1267076	0	True				
ANR	1267122	UnaryOperationExpression	! timeFormat		1267076	0					
ANR	1267123	UnaryOperator	!		1267076	0					
ANR	1267124	Identifier	timeFormat		1267076	1					
ANR	1267125	CompoundStatement		9:19:205:205	1267076	1					
ANR	1267126	ExpressionStatement	"timeFormat = strdup ( ""%m/%d/%y %H:%M:%S "" )"	206:3:6882:6923	1267076	0	True				
ANR	1267127	AssignmentExpression	"timeFormat = strdup ( ""%m/%d/%y %H:%M:%S "" )"		1267076	0		=			
ANR	1267128	Identifier	timeFormat		1267076	0					
ANR	1267129	CallExpression	"strdup ( ""%m/%d/%y %H:%M:%S "" )"		1267076	1					
ANR	1267130	Callee	strdup		1267076	0					
ANR	1267131	Identifier	strdup		1267076	0					
ANR	1267132	ArgumentList	"""%m/%d/%y %H:%M:%S """		1267076	1					
ANR	1267133	Argument	"""%m/%d/%y %H:%M:%S """		1267076	0					
ANR	1267134	PrimaryExpression	"""%m/%d/%y %H:%M:%S """		1267076	0					
ANR	1267135	ElseStatement	else		1267076	0					
ANR	1267136	CompoundStatement		13:3:295:302	1267076	0					
ANR	1267137	IdentifierDeclStatement	char * p ;	209:3:6967:6974	1267076	0	True				
ANR	1267138	IdentifierDecl	* p		1267076	0					
ANR	1267139	IdentifierDeclType	char *		1267076	0					
ANR	1267140	Identifier	p		1267076	1					
ANR	1267141	IfStatement	"if ( * timeFormat == '""' )"		1267076	1					
ANR	1267142	Condition	"* timeFormat == '""'"	210:7:6983:7000	1267076	0	True				
ANR	1267143	EqualityExpression	"* timeFormat == '""'"		1267076	0		==			
ANR	1267144	UnaryOperationExpression	* timeFormat		1267076	0					
ANR	1267145	UnaryOperator	*		1267076	0					
ANR	1267146	Identifier	timeFormat		1267076	1					
ANR	1267147	PrimaryExpression	"'""'"		1267076	1					
ANR	1267148	CompoundStatement		14:27:331:331	1267076	1					
ANR	1267149	ExpressionStatement	timeFormat ++	211:4:7009:7021	1267076	0	True				
ANR	1267150	PostIncDecOperationExpression	timeFormat ++		1267076	0					
ANR	1267151	Identifier	timeFormat		1267076	0					
ANR	1267152	IncDec	++		1267076	1					
ANR	1267153	ExpressionStatement	p = timeFormat	213:3:7031:7045	1267076	2	True				
ANR	1267154	AssignmentExpression	p = timeFormat		1267076	0		=			
ANR	1267155	Identifier	p		1267076	0					
ANR	1267156	Identifier	timeFormat		1267076	1					
ANR	1267157	WhileStatement	while ( * p ++ )		1267076	3					
ANR	1267158	Condition	* p ++	214:10:7057:7060	1267076	0	True				
ANR	1267159	UnaryOperationExpression	* p ++		1267076	0					
ANR	1267160	UnaryOperator	*		1267076	0					
ANR	1267161	PostIncDecOperationExpression	p ++		1267076	1					
ANR	1267162	Identifier	p		1267076	0					
ANR	1267163	IncDec	++		1267076	1					
ANR	1267164	CompoundStatement		18:16:391:391	1267076	1					
ANR	1267165	IfStatement	"if ( * p == '""' )"		1267076	0					
ANR	1267166	Condition	"* p == '""'"	215:8:7073:7081	1267076	0	True				
ANR	1267167	EqualityExpression	"* p == '""'"		1267076	0		==			
ANR	1267168	UnaryOperationExpression	* p		1267076	0					
ANR	1267169	UnaryOperator	*		1267076	0					
ANR	1267170	Identifier	p		1267076	1					
ANR	1267171	PrimaryExpression	"'""'"		1267076	1					
ANR	1267172	ExpressionStatement	* p = '\\0'	215:19:7084:7093	1267076	1	True				
ANR	1267173	AssignmentExpression	* p = '\\0'		1267076	0		=			
ANR	1267174	UnaryOperationExpression	* p		1267076	0					
ANR	1267175	UnaryOperator	*		1267076	0					
ANR	1267176	Identifier	p		1267076	1					
ANR	1267177	PrimaryExpression	'\\0'		1267076	1					
ANR	1267178	ExpressionStatement	"strftime ( timebuf , 80 , timeFormat , tm )"	219:1:7108:7145	1267076	7	True				
ANR	1267179	CallExpression	"strftime ( timebuf , 80 , timeFormat , tm )"		1267076	0					
ANR	1267180	Callee	strftime		1267076	0					
ANR	1267181	Identifier	strftime		1267076	0					
ANR	1267182	ArgumentList	timebuf		1267076	1					
ANR	1267183	Argument	timebuf		1267076	0					
ANR	1267184	Identifier	timebuf		1267076	0					
ANR	1267185	Argument	80		1267076	1					
ANR	1267186	PrimaryExpression	80		1267076	0					
ANR	1267187	Argument	timeFormat		1267076	2					
ANR	1267188	Identifier	timeFormat		1267076	0					
ANR	1267189	Argument	tm		1267076	3					
ANR	1267190	Identifier	tm		1267076	0					
ANR	1267191	ReturnStatement	return timebuf ;	220:1:7148:7162	1267076	8	True				
ANR	1267192	Identifier	timebuf		1267076	0					
ANR	1267193	ReturnType	static char *		1267076	1					
ANR	1267194	Identifier	formatTimeHeader		1267076	2					
ANR	1267195	ParameterList	struct tm * tm		1267076	3					
ANR	1267196	Parameter	struct tm * tm	197:30:6656:6668	1267076	0	True				
ANR	1267197	ParameterType	struct tm *		1267076	0					
ANR	1267198	Identifier	tm		1267076	1					
ANR	1267199	CFGEntryNode	ENTRY		1267076		True				
ANR	1267200	CFGExitNode	EXIT		1267076		True				
ANR	1267201	Symbol	firstTime		1267076						
ANR	1267202	Symbol	p		1267076						
ANR	1267203	Symbol	* timeFormat		1267076						
ANR	1267204	Symbol	timeFormat		1267076						
ANR	1267205	Symbol	* p ++		1267076						
ANR	1267206	Symbol	tm		1267076						
ANR	1267207	Symbol	timebuf		1267076						
ANR	1267208	Symbol	dprintf_param_funcs -> param		1267076						
ANR	1267209	Symbol	* p		1267076						
ANR	1267210	Symbol	strdup		1267076						
ANR	1267211	Symbol	dprintf_param_funcs		1267076						
ANR	1267212	Symbol	* dprintf_param_funcs		1267076						
ANR	1267213	Function	_condor_dfprintf_va	238:0:7866:10917							
ANR	1267214	FunctionDef	"_condor_dfprintf_va (int flags , int mask_flags , time_t clock_now , struct tm * tm , FILE * fp , const char * fmt , va_list args)"		1267213	0					
ANR	1267215	CompoundStatement		240:0:8001:10917	1267213	0					
ANR	1267216	Statement	static	242:1:8059:8064	1267213	0	True				
ANR	1267217	IdentifierDeclStatement	char * buf = NULL ;	242:8:8066:8082	1267213	1	True				
ANR	1267218	IdentifierDecl	* buf = NULL		1267213	0					
ANR	1267219	IdentifierDeclType	char *		1267213	0					
ANR	1267220	Identifier	buf		1267213	1					
ANR	1267221	AssignmentExpression	* buf = NULL		1267213	2		=			
ANR	1267222	Identifier	NULL		1267213	0					
ANR	1267223	Identifier	NULL		1267213	1					
ANR	1267224	Statement	static	243:1:8085:8090	1267213	2	True				
ANR	1267225	IdentifierDeclStatement	int buflen = 0 ;	243:8:8092:8106	1267213	3	True				
ANR	1267226	IdentifierDecl	buflen = 0		1267213	0					
ANR	1267227	IdentifierDeclType	int		1267213	0					
ANR	1267228	Identifier	buflen		1267213	1					
ANR	1267229	AssignmentExpression	buflen = 0		1267213	2		=			
ANR	1267230	Identifier	buflen		1267213	0					
ANR	1267231	PrimaryExpression	0		1267213	1					
ANR	1267232	IdentifierDeclStatement	int bufpos = 0 ;	245:1:8110:8124	1267213	4	True				
ANR	1267233	IdentifierDecl	bufpos = 0		1267213	0					
ANR	1267234	IdentifierDeclType	int		1267213	0					
ANR	1267235	Identifier	bufpos		1267213	1					
ANR	1267236	AssignmentExpression	bufpos = 0		1267213	2		=			
ANR	1267237	Identifier	bufpos		1267213	0					
ANR	1267238	PrimaryExpression	0		1267213	1					
ANR	1267239	IdentifierDeclStatement	int rc = 0 ;	246:1:8127:8137	1267213	5	True				
ANR	1267240	IdentifierDecl	rc = 0		1267213	0					
ANR	1267241	IdentifierDeclType	int		1267213	0					
ANR	1267242	Identifier	rc		1267213	1					
ANR	1267243	AssignmentExpression	rc = 0		1267213	2		=			
ANR	1267244	Identifier	rc		1267213	0					
ANR	1267245	PrimaryExpression	0		1267213	1					
ANR	1267246	IdentifierDeclStatement	int sprintf_errno = 0 ;	247:1:8140:8161	1267213	6	True				
ANR	1267247	IdentifierDecl	sprintf_errno = 0		1267213	0					
ANR	1267248	IdentifierDeclType	int		1267213	0					
ANR	1267249	Identifier	sprintf_errno		1267213	1					
ANR	1267250	AssignmentExpression	sprintf_errno = 0		1267213	2		=			
ANR	1267251	Identifier	sprintf_errno		1267213	0					
ANR	1267252	PrimaryExpression	0		1267213	1					
ANR	1267253	IdentifierDeclStatement	int my_pid ;	248:1:8164:8174	1267213	7	True				
ANR	1267254	IdentifierDecl	my_pid		1267213	0					
ANR	1267255	IdentifierDeclType	int		1267213	0					
ANR	1267256	Identifier	my_pid		1267213	1					
ANR	1267257	IdentifierDeclStatement	int my_tid ;	249:1:8177:8187	1267213	8	True				
ANR	1267258	IdentifierDecl	my_tid		1267213	0					
ANR	1267259	IdentifierDeclType	int		1267213	0					
ANR	1267260	Identifier	my_tid		1267213	1					
ANR	1267261	IdentifierDeclStatement	int start_pos ;	250:1:8190:8203	1267213	9	True				
ANR	1267262	IdentifierDecl	start_pos		1267213	0					
ANR	1267263	IdentifierDeclType	int		1267213	0					
ANR	1267264	Identifier	start_pos		1267213	1					
ANR	1267265	IdentifierDeclStatement	FILE * local_fp ;	251:1:8206:8220	1267213	10	True				
ANR	1267266	IdentifierDecl	* local_fp		1267213	0					
ANR	1267267	IdentifierDeclType	FILE *		1267213	0					
ANR	1267268	Identifier	local_fp		1267213	1					
ANR	1267269	IdentifierDeclStatement	int fopen_rc = 1 ;	252:1:8223:8239	1267213	11	True				
ANR	1267270	IdentifierDecl	fopen_rc = 1		1267213	0					
ANR	1267271	IdentifierDeclType	int		1267213	0					
ANR	1267272	Identifier	fopen_rc		1267213	1					
ANR	1267273	AssignmentExpression	fopen_rc = 1		1267213	2		=			
ANR	1267274	Identifier	fopen_rc		1267213	0					
ANR	1267275	PrimaryExpression	1		1267213	1					
ANR	1267276	IfStatement	if ( ( ( mask_flags | flags ) & D_NOHEADER ) == 0 )		1267213	12					
ANR	1267277	Condition	( ( mask_flags | flags ) & D_NOHEADER ) == 0	255:5:8309:8346	1267213	0	True				
ANR	1267278	EqualityExpression	( ( mask_flags | flags ) & D_NOHEADER ) == 0		1267213	0		==			
ANR	1267279	BitAndExpression	( mask_flags | flags ) & D_NOHEADER		1267213	0		&			
ANR	1267280	InclusiveOrExpression	mask_flags | flags		1267213	0		|			
ANR	1267281	Identifier	mask_flags		1267213	0					
ANR	1267282	Identifier	flags		1267213	1					
ANR	1267283	Identifier	D_NOHEADER		1267213	1					
ANR	1267284	PrimaryExpression	0		1267213	1					
ANR	1267285	CompoundStatement		16:46:348:348	1267213	1					
ANR	1267286	IfStatement	if ( DebugUseTimestamps )		1267213	0					
ANR	1267287	Condition	DebugUseTimestamps	256:7:8359:8376	1267213	0	True				
ANR	1267288	Identifier	DebugUseTimestamps		1267213	0					
ANR	1267289	CompoundStatement		17:28:378:378	1267213	1					
ANR	1267290	ExpressionStatement	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""(%d) "" , ( int ) clock_now )"	261:3:8599:8670	1267213	0	True				
ANR	1267291	AssignmentExpression	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""(%d) "" , ( int ) clock_now )"		1267213	0		=			
ANR	1267292	Identifier	rc		1267213	0					
ANR	1267293	CallExpression	"sprintf_realloc ( & buf , & bufpos , & buflen , ""(%d) "" , ( int ) clock_now )"		1267213	1					
ANR	1267294	Callee	sprintf_realloc		1267213	0					
ANR	1267295	Identifier	sprintf_realloc		1267213	0					
ANR	1267296	ArgumentList	& buf		1267213	1					
ANR	1267297	Argument	& buf		1267213	0					
ANR	1267298	UnaryOperationExpression	& buf		1267213	0					
ANR	1267299	UnaryOperator	&		1267213	0					
ANR	1267300	Identifier	buf		1267213	1					
ANR	1267301	Argument	& bufpos		1267213	1					
ANR	1267302	UnaryOperationExpression	& bufpos		1267213	0					
ANR	1267303	UnaryOperator	&		1267213	0					
ANR	1267304	Identifier	bufpos		1267213	1					
ANR	1267305	Argument	& buflen		1267213	2					
ANR	1267306	UnaryOperationExpression	& buflen		1267213	0					
ANR	1267307	UnaryOperator	&		1267213	0					
ANR	1267308	Identifier	buflen		1267213	1					
ANR	1267309	Argument	"""(%d) """		1267213	3					
ANR	1267310	PrimaryExpression	"""(%d) """		1267213	0					
ANR	1267311	Argument	( int ) clock_now		1267213	4					
ANR	1267312	CastExpression	( int ) clock_now		1267213	0					
ANR	1267313	CastTarget	int		1267213	0					
ANR	1267314	Identifier	clock_now		1267213	1					
ANR	1267315	IfStatement	if ( rc < 0 )		1267213	1					
ANR	1267316	Condition	rc < 0	262:7:8679:8684	1267213	0	True				
ANR	1267317	RelationalExpression	rc < 0		1267213	0		<			
ANR	1267318	Identifier	rc		1267213	0					
ANR	1267319	PrimaryExpression	0		1267213	1					
ANR	1267320	CompoundStatement		23:16:686:686	1267213	1					
ANR	1267321	ExpressionStatement	sprintf_errno = errno	263:4:8694:8715	1267213	0	True				
ANR	1267322	AssignmentExpression	sprintf_errno = errno		1267213	0		=			
ANR	1267323	Identifier	sprintf_errno		1267213	0					
ANR	1267324	Identifier	errno		1267213	1					
ANR	1267325	ElseStatement	else		1267213	0					
ANR	1267326	CompoundStatement		26:9:729:729	1267213	0					
ANR	1267327	ExpressionStatement	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""%s"" , formatTimeHeader ( tm ) )"	266:3:8736:8809	1267213	0	True				
ANR	1267328	AssignmentExpression	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""%s"" , formatTimeHeader ( tm ) )"		1267213	0		=			
ANR	1267329	Identifier	rc		1267213	0					
ANR	1267330	CallExpression	"sprintf_realloc ( & buf , & bufpos , & buflen , ""%s"" , formatTimeHeader ( tm ) )"		1267213	1					
ANR	1267331	Callee	sprintf_realloc		1267213	0					
ANR	1267332	Identifier	sprintf_realloc		1267213	0					
ANR	1267333	ArgumentList	& buf		1267213	1					
ANR	1267334	Argument	& buf		1267213	0					
ANR	1267335	UnaryOperationExpression	& buf		1267213	0					
ANR	1267336	UnaryOperator	&		1267213	0					
ANR	1267337	Identifier	buf		1267213	1					
ANR	1267338	Argument	& bufpos		1267213	1					
ANR	1267339	UnaryOperationExpression	& bufpos		1267213	0					
ANR	1267340	UnaryOperator	&		1267213	0					
ANR	1267341	Identifier	bufpos		1267213	1					
ANR	1267342	Argument	& buflen		1267213	2					
ANR	1267343	UnaryOperationExpression	& buflen		1267213	0					
ANR	1267344	UnaryOperator	&		1267213	0					
ANR	1267345	Identifier	buflen		1267213	1					
ANR	1267346	Argument	"""%s"""		1267213	3					
ANR	1267347	PrimaryExpression	"""%s"""		1267213	0					
ANR	1267348	Argument	formatTimeHeader ( tm )		1267213	4					
ANR	1267349	CallExpression	formatTimeHeader ( tm )		1267213	0					
ANR	1267350	Callee	formatTimeHeader		1267213	0					
ANR	1267351	Identifier	formatTimeHeader		1267213	0					
ANR	1267352	ArgumentList	tm		1267213	1					
ANR	1267353	Argument	tm		1267213	0					
ANR	1267354	Identifier	tm		1267213	0					
ANR	1267355	IfStatement	if ( rc < 0 )		1267213	1					
ANR	1267356	Condition	rc < 0	267:7:8818:8823	1267213	0	True				
ANR	1267357	RelationalExpression	rc < 0		1267213	0		<			
ANR	1267358	Identifier	rc		1267213	0					
ANR	1267359	PrimaryExpression	0		1267213	1					
ANR	1267360	CompoundStatement		28:16:825:825	1267213	1					
ANR	1267361	ExpressionStatement	sprintf_errno = errno	268:4:8833:8854	1267213	0	True				
ANR	1267362	AssignmentExpression	sprintf_errno = errno		1267213	0		=			
ANR	1267363	Identifier	sprintf_errno		1267213	0					
ANR	1267364	Identifier	errno		1267213	1					
ANR	1267365	IfStatement	if ( ( mask_flags | flags ) & D_FDS )		1267213	1					
ANR	1267366	Condition	( mask_flags | flags ) & D_FDS	272:7:8873:8898	1267213	0	True				
ANR	1267367	BitAndExpression	( mask_flags | flags ) & D_FDS		1267213	0		&			
ANR	1267368	InclusiveOrExpression	mask_flags | flags		1267213	0		|			
ANR	1267369	Identifier	mask_flags		1267213	0					
ANR	1267370	Identifier	flags		1267213	1					
ANR	1267371	Identifier	D_FDS		1267213	1					
ANR	1267372	CompoundStatement		33:36:900:900	1267213	1					
ANR	1267373	IfStatement	"if ( ( local_fp = safe_fopen_wrapper_follow ( NULL_FILE , ""rN"" , 0644 ) ) == NULL )"		1267213	0					
ANR	1267374	Condition	"( local_fp = safe_fopen_wrapper_follow ( NULL_FILE , ""rN"" , 0644 ) ) == NULL"	275:7:9025:9089	1267213	0	True				
ANR	1267375	EqualityExpression	"( local_fp = safe_fopen_wrapper_follow ( NULL_FILE , ""rN"" , 0644 ) ) == NULL"		1267213	0		==			
ANR	1267376	AssignmentExpression	"local_fp = safe_fopen_wrapper_follow ( NULL_FILE , ""rN"" , 0644 )"		1267213	0		=			
ANR	1267377	Identifier	local_fp		1267213	0					
ANR	1267378	CallExpression	"safe_fopen_wrapper_follow ( NULL_FILE , ""rN"" , 0644 )"		1267213	1					
ANR	1267379	Callee	safe_fopen_wrapper_follow		1267213	0					
ANR	1267380	Identifier	safe_fopen_wrapper_follow		1267213	0					
ANR	1267381	ArgumentList	NULL_FILE		1267213	1					
ANR	1267382	Argument	NULL_FILE		1267213	0					
ANR	1267383	Identifier	NULL_FILE		1267213	0					
ANR	1267384	Argument	"""rN"""		1267213	1					
ANR	1267385	PrimaryExpression	"""rN"""		1267213	0					
ANR	1267386	Argument	0644		1267213	2					
ANR	1267387	PrimaryExpression	0644		1267213	0					
ANR	1267388	Identifier	NULL		1267213	1					
ANR	1267389	CompoundStatement		37:3:1094:1094	1267213	1					
ANR	1267390	ExpressionStatement	local_fp = fp	277:4:9102:9115	1267213	0	True				
ANR	1267391	AssignmentExpression	local_fp = fp		1267213	0		=			
ANR	1267392	Identifier	local_fp		1267213	0					
ANR	1267393	Identifier	fp		1267213	1					
ANR	1267394	ExpressionStatement	fopen_rc = 0	278:4:9121:9133	1267213	1	True				
ANR	1267395	AssignmentExpression	fopen_rc = 0		1267213	0		=			
ANR	1267396	Identifier	fopen_rc		1267213	0					
ANR	1267397	PrimaryExpression	0		1267213	1					
ANR	1267398	ExpressionStatement	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""(fd:%d) "" , fileno ( local_fp ) )"	280:3:9143:9219	1267213	1	True				
ANR	1267399	AssignmentExpression	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""(fd:%d) "" , fileno ( local_fp ) )"		1267213	0		=			
ANR	1267400	Identifier	rc		1267213	0					
ANR	1267401	CallExpression	"sprintf_realloc ( & buf , & bufpos , & buflen , ""(fd:%d) "" , fileno ( local_fp ) )"		1267213	1					
ANR	1267402	Callee	sprintf_realloc		1267213	0					
ANR	1267403	Identifier	sprintf_realloc		1267213	0					
ANR	1267404	ArgumentList	& buf		1267213	1					
ANR	1267405	Argument	& buf		1267213	0					
ANR	1267406	UnaryOperationExpression	& buf		1267213	0					
ANR	1267407	UnaryOperator	&		1267213	0					
ANR	1267408	Identifier	buf		1267213	1					
ANR	1267409	Argument	& bufpos		1267213	1					
ANR	1267410	UnaryOperationExpression	& bufpos		1267213	0					
ANR	1267411	UnaryOperator	&		1267213	0					
ANR	1267412	Identifier	bufpos		1267213	1					
ANR	1267413	Argument	& buflen		1267213	2					
ANR	1267414	UnaryOperationExpression	& buflen		1267213	0					
ANR	1267415	UnaryOperator	&		1267213	0					
ANR	1267416	Identifier	buflen		1267213	1					
ANR	1267417	Argument	"""(fd:%d) """		1267213	3					
ANR	1267418	PrimaryExpression	"""(fd:%d) """		1267213	0					
ANR	1267419	Argument	fileno ( local_fp )		1267213	4					
ANR	1267420	CallExpression	fileno ( local_fp )		1267213	0					
ANR	1267421	Callee	fileno		1267213	0					
ANR	1267422	Identifier	fileno		1267213	0					
ANR	1267423	ArgumentList	local_fp		1267213	1					
ANR	1267424	Argument	local_fp		1267213	0					
ANR	1267425	Identifier	local_fp		1267213	0					
ANR	1267426	IfStatement	if ( rc < 0 )		1267213	2					
ANR	1267427	Condition	rc < 0	281:7:9228:9233	1267213	0	True				
ANR	1267428	RelationalExpression	rc < 0		1267213	0		<			
ANR	1267429	Identifier	rc		1267213	0					
ANR	1267430	PrimaryExpression	0		1267213	1					
ANR	1267431	CompoundStatement		42:16:1235:1235	1267213	1					
ANR	1267432	ExpressionStatement	sprintf_errno = errno	282:4:9243:9264	1267213	0	True				
ANR	1267433	AssignmentExpression	sprintf_errno = errno		1267213	0		=			
ANR	1267434	Identifier	sprintf_errno		1267213	0					
ANR	1267435	Identifier	errno		1267213	1					
ANR	1267436	IfStatement	if ( fopen_rc )		1267213	3					
ANR	1267437	Condition	fopen_rc	284:6:9277:9284	1267213	0	True				
ANR	1267438	Identifier	fopen_rc		1267213	0					
ANR	1267439	CompoundStatement		46:3:1288:1288	1267213	1					
ANR	1267440	ExpressionStatement	"fopen_rc = fclose_wrapper ( local_fp , FCLOSE_RETRY_MAX )"	286:4:9296:9349	1267213	0	True				
ANR	1267441	AssignmentExpression	"fopen_rc = fclose_wrapper ( local_fp , FCLOSE_RETRY_MAX )"		1267213	0		=			
ANR	1267442	Identifier	fopen_rc		1267213	0					
ANR	1267443	CallExpression	"fclose_wrapper ( local_fp , FCLOSE_RETRY_MAX )"		1267213	1					
ANR	1267444	Callee	fclose_wrapper		1267213	0					
ANR	1267445	Identifier	fclose_wrapper		1267213	0					
ANR	1267446	ArgumentList	local_fp		1267213	1					
ANR	1267447	Argument	local_fp		1267213	0					
ANR	1267448	Identifier	local_fp		1267213	0					
ANR	1267449	Argument	FCLOSE_RETRY_MAX		1267213	1					
ANR	1267450	Identifier	FCLOSE_RETRY_MAX		1267213	0					
ANR	1267451	IfStatement	if ( ( mask_flags | flags ) & D_PID )		1267213	2					
ANR	1267452	Condition	( mask_flags | flags ) & D_PID	290:6:9367:9392	1267213	0	True				
ANR	1267453	BitAndExpression	( mask_flags | flags ) & D_PID		1267213	0		&			
ANR	1267454	InclusiveOrExpression	mask_flags | flags		1267213	0		|			
ANR	1267455	Identifier	mask_flags		1267213	0					
ANR	1267456	Identifier	flags		1267213	1					
ANR	1267457	Identifier	D_PID		1267213	1					
ANR	1267458	CompoundStatement		51:35:1394:1394	1267213	1					
ANR	1267459	ExpressionStatement	my_pid = ( int ) GetCurrentProcessId ( )	292:3:9414:9450	1267213	0	True				
ANR	1267460	AssignmentExpression	my_pid = ( int ) GetCurrentProcessId ( )		1267213	0		=			
ANR	1267461	Identifier	my_pid		1267213	0					
ANR	1267462	CastExpression	( int ) GetCurrentProcessId ( )		1267213	1					
ANR	1267463	CastTarget	int		1267213	0					
ANR	1267464	CallExpression	GetCurrentProcessId ( )		1267213	1					
ANR	1267465	Callee	GetCurrentProcessId		1267213	0					
ANR	1267466	Identifier	GetCurrentProcessId		1267213	0					
ANR	1267467	ArgumentList			1267213	1					
ANR	1267468	ExpressionStatement	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""(pid:%d) "" , my_pid )"	296:3:9496:9563	1267213	1	True				
ANR	1267469	AssignmentExpression	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""(pid:%d) "" , my_pid )"		1267213	0		=			
ANR	1267470	Identifier	rc		1267213	0					
ANR	1267471	CallExpression	"sprintf_realloc ( & buf , & bufpos , & buflen , ""(pid:%d) "" , my_pid )"		1267213	1					
ANR	1267472	Callee	sprintf_realloc		1267213	0					
ANR	1267473	Identifier	sprintf_realloc		1267213	0					
ANR	1267474	ArgumentList	& buf		1267213	1					
ANR	1267475	Argument	& buf		1267213	0					
ANR	1267476	UnaryOperationExpression	& buf		1267213	0					
ANR	1267477	UnaryOperator	&		1267213	0					
ANR	1267478	Identifier	buf		1267213	1					
ANR	1267479	Argument	& bufpos		1267213	1					
ANR	1267480	UnaryOperationExpression	& bufpos		1267213	0					
ANR	1267481	UnaryOperator	&		1267213	0					
ANR	1267482	Identifier	bufpos		1267213	1					
ANR	1267483	Argument	& buflen		1267213	2					
ANR	1267484	UnaryOperationExpression	& buflen		1267213	0					
ANR	1267485	UnaryOperator	&		1267213	0					
ANR	1267486	Identifier	buflen		1267213	1					
ANR	1267487	Argument	"""(pid:%d) """		1267213	3					
ANR	1267488	PrimaryExpression	"""(pid:%d) """		1267213	0					
ANR	1267489	Argument	my_pid		1267213	4					
ANR	1267490	Identifier	my_pid		1267213	0					
ANR	1267491	IfStatement	if ( rc < 0 )		1267213	2					
ANR	1267492	Condition	rc < 0	297:7:9572:9577	1267213	0	True				
ANR	1267493	RelationalExpression	rc < 0		1267213	0		<			
ANR	1267494	Identifier	rc		1267213	0					
ANR	1267495	PrimaryExpression	0		1267213	1					
ANR	1267496	CompoundStatement		58:16:1579:1579	1267213	1					
ANR	1267497	ExpressionStatement	sprintf_errno = errno	298:4:9587:9608	1267213	0	True				
ANR	1267498	AssignmentExpression	sprintf_errno = errno		1267213	0		=			
ANR	1267499	Identifier	sprintf_errno		1267213	0					
ANR	1267500	Identifier	errno		1267213	1					
ANR	1267501	ExpressionStatement	my_tid = CondorThreads_gettid ( )	303:2:9685:9716	1267213	3	True				
ANR	1267502	AssignmentExpression	my_tid = CondorThreads_gettid ( )		1267213	0		=			
ANR	1267503	Identifier	my_tid		1267213	0					
ANR	1267504	CallExpression	CondorThreads_gettid ( )		1267213	1					
ANR	1267505	Callee	CondorThreads_gettid		1267213	0					
ANR	1267506	Identifier	CondorThreads_gettid		1267213	0					
ANR	1267507	ArgumentList			1267213	1					
ANR	1267508	IfStatement	if ( my_tid > 0 )		1267213	4					
ANR	1267509	Condition	my_tid > 0	304:7:9725:9734	1267213	0	True				
ANR	1267510	RelationalExpression	my_tid > 0		1267213	0		>			
ANR	1267511	Identifier	my_tid		1267213	0					
ANR	1267512	PrimaryExpression	0		1267213	1					
ANR	1267513	CompoundStatement		65:20:1736:1736	1267213	1					
ANR	1267514	ExpressionStatement	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""(tid:%d) "" , my_tid )"	305:3:9743:9810	1267213	0	True				
ANR	1267515	AssignmentExpression	"rc = sprintf_realloc ( & buf , & bufpos , & buflen , ""(tid:%d) "" , my_tid )"		1267213	0		=			
ANR	1267516	Identifier	rc		1267213	0					
ANR	1267517	CallExpression	"sprintf_realloc ( & buf , & bufpos , & buflen , ""(tid:%d) "" , my_tid )"		1267213	1					
ANR	1267518	Callee	sprintf_realloc		1267213	0					
ANR	1267519	Identifier	sprintf_realloc		1267213	0					
ANR	1267520	ArgumentList	& buf		1267213	1					
ANR	1267521	Argument	& buf		1267213	0					
ANR	1267522	UnaryOperationExpression	& buf		1267213	0					
ANR	1267523	UnaryOperator	&		1267213	0					
ANR	1267524	Identifier	buf		1267213	1					
ANR	1267525	Argument	& bufpos		1267213	1					
ANR	1267526	UnaryOperationExpression	& bufpos		1267213	0					
ANR	1267527	UnaryOperator	&		1267213	0					
ANR	1267528	Identifier	bufpos		1267213	1					
ANR	1267529	Argument	& buflen		1267213	2					
ANR	1267530	UnaryOperationExpression	& buflen		1267213	0					
ANR	1267531	UnaryOperator	&		1267213	0					
ANR	1267532	Identifier	buflen		1267213	1					
ANR	1267533	Argument	"""(tid:%d) """		1267213	3					
ANR	1267534	PrimaryExpression	"""(tid:%d) """		1267213	0					
ANR	1267535	Argument	my_tid		1267213	4					
ANR	1267536	Identifier	my_tid		1267213	0					
ANR	1267537	IfStatement	if ( rc < 0 )		1267213	1					
ANR	1267538	Condition	rc < 0	306:7:9819:9824	1267213	0	True				
ANR	1267539	RelationalExpression	rc < 0		1267213	0		<			
ANR	1267540	Identifier	rc		1267213	0					
ANR	1267541	PrimaryExpression	0		1267213	1					
ANR	1267542	CompoundStatement		67:16:1826:1826	1267213	1					
ANR	1267543	ExpressionStatement	sprintf_errno = errno	307:4:9834:9855	1267213	0	True				
ANR	1267544	AssignmentExpression	sprintf_errno = errno		1267213	0		=			
ANR	1267545	Identifier	sprintf_errno		1267213	0					
ANR	1267546	Identifier	errno		1267213	1					
ANR	1267547	IfStatement	if ( DebugId )		1267213	5					
ANR	1267548	Condition	DebugId	311:6:9873:9879	1267213	0	True				
ANR	1267549	Identifier	DebugId		1267213	0					
ANR	1267550	CompoundStatement		72:16:1881:1881	1267213	1					
ANR	1267551	ExpressionStatement	"rc = ( * DebugId ) ( & buf , & bufpos , & buflen )"	312:3:9888:9929	1267213	0	True				
ANR	1267552	AssignmentExpression	"rc = ( * DebugId ) ( & buf , & bufpos , & buflen )"		1267213	0		=			
ANR	1267553	Identifier	rc		1267213	0					
ANR	1267554	CallExpression	"( * DebugId ) ( & buf , & bufpos , & buflen )"		1267213	1					
ANR	1267555	Callee	* DebugId		1267213	0					
ANR	1267556	UnaryOperationExpression	* DebugId		1267213	0					
ANR	1267557	UnaryOperator	*		1267213	0					
ANR	1267558	Identifier	DebugId		1267213	1					
ANR	1267559	ArgumentList	& buf		1267213	1					
ANR	1267560	Argument	& buf		1267213	0					
ANR	1267561	UnaryOperationExpression	& buf		1267213	0					
ANR	1267562	UnaryOperator	&		1267213	0					
ANR	1267563	Identifier	buf		1267213	1					
ANR	1267564	Argument	& bufpos		1267213	1					
ANR	1267565	UnaryOperationExpression	& bufpos		1267213	0					
ANR	1267566	UnaryOperator	&		1267213	0					
ANR	1267567	Identifier	bufpos		1267213	1					
ANR	1267568	Argument	& buflen		1267213	2					
ANR	1267569	UnaryOperationExpression	& buflen		1267213	0					
ANR	1267570	UnaryOperator	&		1267213	0					
ANR	1267571	Identifier	buflen		1267213	1					
ANR	1267572	IfStatement	if ( rc < 0 )		1267213	1					
ANR	1267573	Condition	rc < 0	313:7:9938:9943	1267213	0	True				
ANR	1267574	RelationalExpression	rc < 0		1267213	0		<			
ANR	1267575	Identifier	rc		1267213	0					
ANR	1267576	PrimaryExpression	0		1267213	1					
ANR	1267577	CompoundStatement		74:16:1945:1945	1267213	1					
ANR	1267578	ExpressionStatement	sprintf_errno = errno	314:4:9953:9974	1267213	0	True				
ANR	1267579	AssignmentExpression	sprintf_errno = errno		1267213	0		=			
ANR	1267580	Identifier	sprintf_errno		1267213	0					
ANR	1267581	Identifier	errno		1267213	1					
ANR	1267582	IfStatement	if ( sprintf_errno != 0 )		1267213	13					
ANR	1267583	Condition	sprintf_errno != 0	319:5:9994:10011	1267213	0	True				
ANR	1267584	EqualityExpression	sprintf_errno != 0		1267213	0		!=			
ANR	1267585	Identifier	sprintf_errno		1267213	0					
ANR	1267586	PrimaryExpression	0		1267213	1					
ANR	1267587	CompoundStatement		80:26:2013:2013	1267213	1					
ANR	1267588	ExpressionStatement	"_condor_dprintf_exit ( sprintf_errno , ""Error writing to debug header\\n"" )"	320:2:10019:10089	1267213	0	True				
ANR	1267589	CallExpression	"_condor_dprintf_exit ( sprintf_errno , ""Error writing to debug header\\n"" )"		1267213	0					
ANR	1267590	Callee	_condor_dprintf_exit		1267213	0					
ANR	1267591	Identifier	_condor_dprintf_exit		1267213	0					
ANR	1267592	ArgumentList	sprintf_errno		1267213	1					
ANR	1267593	Argument	sprintf_errno		1267213	0					
ANR	1267594	Identifier	sprintf_errno		1267213	0					
ANR	1267595	Argument	"""Error writing to debug header\\n"""		1267213	1					
ANR	1267596	PrimaryExpression	"""Error writing to debug header\\n"""		1267213	0					
ANR	1267597	ExpressionStatement	"rc = vsprintf_realloc ( & buf , & bufpos , & buflen , fmt , args )"	323:1:10097:10155	1267213	14	True				
ANR	1267598	AssignmentExpression	"rc = vsprintf_realloc ( & buf , & bufpos , & buflen , fmt , args )"		1267213	0		=			
ANR	1267599	Identifier	rc		1267213	0					
ANR	1267600	CallExpression	"vsprintf_realloc ( & buf , & bufpos , & buflen , fmt , args )"		1267213	1					
ANR	1267601	Callee	vsprintf_realloc		1267213	0					
ANR	1267602	Identifier	vsprintf_realloc		1267213	0					
ANR	1267603	ArgumentList	& buf		1267213	1					
ANR	1267604	Argument	& buf		1267213	0					
ANR	1267605	UnaryOperationExpression	& buf		1267213	0					
ANR	1267606	UnaryOperator	&		1267213	0					
ANR	1267607	Identifier	buf		1267213	1					
ANR	1267608	Argument	& bufpos		1267213	1					
ANR	1267609	UnaryOperationExpression	& bufpos		1267213	0					
ANR	1267610	UnaryOperator	&		1267213	0					
ANR	1267611	Identifier	bufpos		1267213	1					
ANR	1267612	Argument	& buflen		1267213	2					
ANR	1267613	UnaryOperationExpression	& buflen		1267213	0					
ANR	1267614	UnaryOperator	&		1267213	0					
ANR	1267615	Identifier	buflen		1267213	1					
ANR	1267616	Argument	fmt		1267213	3					
ANR	1267617	Identifier	fmt		1267213	0					
ANR	1267618	Argument	args		1267213	4					
ANR	1267619	Identifier	args		1267213	0					
ANR	1267620	IfStatement	if ( rc < 0 )		1267213	15					
ANR	1267621	Condition	rc < 0	326:5:10199:10204	1267213	0	True				
ANR	1267622	RelationalExpression	rc < 0		1267213	0		<			
ANR	1267623	Identifier	rc		1267213	0					
ANR	1267624	PrimaryExpression	0		1267213	1					
ANR	1267625	CompoundStatement		87:13:2205:2205	1267213	1					
ANR	1267626	ExpressionStatement	"_condor_dprintf_exit ( errno , ""Error writing to debug buffer\\n"" )"	327:2:10211:10273	1267213	0	True				
ANR	1267627	CallExpression	"_condor_dprintf_exit ( errno , ""Error writing to debug buffer\\n"" )"		1267213	0					
ANR	1267628	Callee	_condor_dprintf_exit		1267213	0					
ANR	1267629	Identifier	_condor_dprintf_exit		1267213	0					
ANR	1267630	ArgumentList	errno		1267213	1					
ANR	1267631	Argument	errno		1267213	0					
ANR	1267632	Identifier	errno		1267213	0					
ANR	1267633	Argument	"""Error writing to debug buffer\\n"""		1267213	1					
ANR	1267634	PrimaryExpression	"""Error writing to debug buffer\\n"""		1267213	0					
ANR	1267635	ExpressionStatement	start_pos = 0	337:1:10662:10675	1267213	16	True				
ANR	1267636	AssignmentExpression	start_pos = 0		1267213	0		=			
ANR	1267637	Identifier	start_pos		1267213	0					
ANR	1267638	PrimaryExpression	0		1267213	1					
ANR	1267639	WhileStatement	while ( start_pos < bufpos )		1267213	17					
ANR	1267640	Condition	start_pos < bufpos	338:8:10685:10700	1267213	0	True				
ANR	1267641	RelationalExpression	start_pos < bufpos		1267213	0		<			
ANR	1267642	Identifier	start_pos		1267213	0					
ANR	1267643	Identifier	bufpos		1267213	1					
ANR	1267644	CompoundStatement		99:27:2702:2702	1267213	1					
ANR	1267645	ExpressionStatement	"rc = write ( fileno ( fp ) , buf + start_pos , bufpos - start_pos )"	339:2:10708:10775	1267213	0	True				
ANR	1267646	AssignmentExpression	"rc = write ( fileno ( fp ) , buf + start_pos , bufpos - start_pos )"		1267213	0		=			
ANR	1267647	Identifier	rc		1267213	0					
ANR	1267648	CallExpression	"write ( fileno ( fp ) , buf + start_pos , bufpos - start_pos )"		1267213	1					
ANR	1267649	Callee	write		1267213	0					
ANR	1267650	Identifier	write		1267213	0					
ANR	1267651	ArgumentList	fileno ( fp )		1267213	1					
ANR	1267652	Argument	fileno ( fp )		1267213	0					
ANR	1267653	CallExpression	fileno ( fp )		1267213	0					
ANR	1267654	Callee	fileno		1267213	0					
ANR	1267655	Identifier	fileno		1267213	0					
ANR	1267656	ArgumentList	fp		1267213	1					
ANR	1267657	Argument	fp		1267213	0					
ANR	1267658	Identifier	fp		1267213	0					
ANR	1267659	Argument	buf + start_pos		1267213	1					
ANR	1267660	AdditiveExpression	buf + start_pos		1267213	0		+			
ANR	1267661	Identifier	buf		1267213	0					
ANR	1267662	Identifier	start_pos		1267213	1					
ANR	1267663	Argument	bufpos - start_pos		1267213	2					
ANR	1267664	AdditiveExpression	bufpos - start_pos		1267213	0		-			
ANR	1267665	Identifier	bufpos		1267213	0					
ANR	1267666	Identifier	start_pos		1267213	1					
ANR	1267667	IfStatement	if ( rc > 0 )		1267213	1					
ANR	1267668	Condition	rc > 0	342:6:10783:10788	1267213	0	True				
ANR	1267669	RelationalExpression	rc > 0		1267213	0		>			
ANR	1267670	Identifier	rc		1267213	0					
ANR	1267671	PrimaryExpression	0		1267213	1					
ANR	1267672	CompoundStatement		103:15:2790:2790	1267213	1					
ANR	1267673	ExpressionStatement	start_pos += rc	343:3:10797:10812	1267213	0	True				
ANR	1267674	AssignmentExpression	start_pos += rc		1267213	0		+=			
ANR	1267675	Identifier	start_pos		1267213	0					
ANR	1267676	Identifier	rc		1267213	1					
ANR	1267677	ElseStatement	else		1267213	0					
ANR	1267678	IfStatement	if ( errno != EINTR )		1267213	0					
ANR	1267679	Condition	errno != EINTR	345:11:10829:10842	1267213	0	True				
ANR	1267680	EqualityExpression	errno != EINTR		1267213	0		!=			
ANR	1267681	Identifier	errno		1267213	0					
ANR	1267682	Identifier	EINTR		1267213	1					
ANR	1267683	CompoundStatement		106:28:2844:2844	1267213	1					
ANR	1267684	ExpressionStatement	"_condor_dprintf_exit ( errno , ""Error writing debug log\\n"" )"	346:3:10851:10907	1267213	0	True				
ANR	1267685	CallExpression	"_condor_dprintf_exit ( errno , ""Error writing debug log\\n"" )"		1267213	0					
ANR	1267686	Callee	_condor_dprintf_exit		1267213	0					
ANR	1267687	Identifier	_condor_dprintf_exit		1267213	0					
ANR	1267688	ArgumentList	errno		1267213	1					
ANR	1267689	Argument	errno		1267213	0					
ANR	1267690	Identifier	errno		1267213	0					
ANR	1267691	Argument	"""Error writing debug log\\n"""		1267213	1					
ANR	1267692	PrimaryExpression	"""Error writing debug log\\n"""		1267213	0					
ANR	1267693	ReturnType	static void		1267213	1					
ANR	1267694	Identifier	_condor_dfprintf_va		1267213	2					
ANR	1267695	ParameterList	"int flags , int mask_flags , time_t clock_now , struct tm * tm , FILE * fp , const char * fmt , va_list args"		1267213	3					
ANR	1267696	Parameter	int flags	239:21:7899:7907	1267213	0	True				
ANR	1267697	ParameterType	int		1267213	0					
ANR	1267698	Identifier	flags		1267213	1					
ANR	1267699	Parameter	int mask_flags	239:32:7910:7923	1267213	1	True				
ANR	1267700	ParameterType	int		1267213	0					
ANR	1267701	Identifier	mask_flags		1267213	1					
ANR	1267702	Parameter	time_t clock_now	239:48:7926:7941	1267213	2	True				
ANR	1267703	ParameterType	time_t		1267213	0					
ANR	1267704	Identifier	clock_now		1267213	1					
ANR	1267705	Parameter	struct tm * tm	239:66:7944:7956	1267213	3	True				
ANR	1267706	ParameterType	struct tm *		1267213	0					
ANR	1267707	Identifier	tm		1267213	1					
ANR	1267708	Parameter	FILE * fp	239:81:7959:7966	1267213	4	True				
ANR	1267709	ParameterType	FILE *		1267213	0					
ANR	1267710	Identifier	fp		1267213	1					
ANR	1267711	Parameter	const char * fmt	239:91:7969:7983	1267213	5	True				
ANR	1267712	ParameterType	const char *		1267213	0					
ANR	1267713	Identifier	fmt		1267213	1					
ANR	1267714	Parameter	va_list args	239:108:7986:7997	1267213	6	True				
ANR	1267715	ParameterType	va_list		1267213	0					
ANR	1267716	Identifier	args		1267213	1					
ANR	1267717	CFGEntryNode	ENTRY		1267213		True				
ANR	1267718	CFGExitNode	EXIT		1267213		True				
ANR	1267719	Symbol	* DebugId		1267213						
ANR	1267720	Symbol	EINTR		1267213						
ANR	1267721	Symbol	DebugUseTimestamps		1267213						
ANR	1267722	Symbol	flags		1267213						
ANR	1267723	Symbol	fp		1267213						
ANR	1267724	Symbol	fmt		1267213						
ANR	1267725	Symbol	fopen_rc		1267213						
ANR	1267726	Symbol	CondorThreads_gettid		1267213						
ANR	1267727	Symbol	local_fp		1267213						
ANR	1267728	Symbol	buflen		1267213						
ANR	1267729	Symbol	bufpos		1267213						
ANR	1267730	Symbol	D_PID		1267213						
ANR	1267731	Symbol	FCLOSE_RETRY_MAX		1267213						
ANR	1267732	Symbol	safe_fopen_wrapper_follow		1267213						
ANR	1267733	Symbol	write		1267213						
ANR	1267734	Symbol	& buf		1267213						
ANR	1267735	Symbol	errno		1267213						
ANR	1267736	Symbol	NULL		1267213						
ANR	1267737	Symbol	formatTimeHeader		1267213						
ANR	1267738	Symbol	my_tid		1267213						
ANR	1267739	Symbol	sprintf_errno		1267213						
ANR	1267740	Symbol	GetCurrentProcessId		1267213						
ANR	1267741	Symbol	clock_now		1267213						
ANR	1267742	Symbol	start_pos		1267213						
ANR	1267743	Symbol	fclose_wrapper		1267213						
ANR	1267744	Symbol	vsprintf_realloc		1267213						
ANR	1267745	Symbol	my_pid		1267213						
ANR	1267746	Symbol	args		1267213						
ANR	1267747	Symbol	D_FDS		1267213						
ANR	1267748	Symbol	rc		1267213						
ANR	1267749	Symbol	buf		1267213						
ANR	1267750	Symbol	DebugId		1267213						
ANR	1267751	Symbol	& buflen		1267213						
ANR	1267752	Symbol	& bufpos		1267213						
ANR	1267753	Symbol	mask_flags		1267213						
ANR	1267754	Symbol	fileno		1267213						
ANR	1267755	Symbol	sprintf_realloc		1267213						
ANR	1267756	Symbol	NULL_FILE		1267213						
ANR	1267757	Symbol	tm		1267213						
ANR	1267758	Symbol	D_NOHEADER		1267213						
ANR	1267759	Function	_condor_dfprintf	355:0:11064:11483							
ANR	1267760	FunctionDef	"_condor_dfprintf (FILE * fp , const char * fmt)"		1267759	0					
ANR	1267761	CompoundStatement		357:0:11127:11483	1267759	0					
ANR	1267762	IdentifierDeclStatement	struct tm * tm = 0 ;	358:1:11130:11145	1267759	0	True				
ANR	1267763	IdentifierDecl	* tm = 0		1267759	0					
ANR	1267764	IdentifierDeclType	struct tm *		1267759	0					
ANR	1267765	Identifier	tm		1267759	1					
ANR	1267766	AssignmentExpression	* tm = 0		1267759	2		=			
ANR	1267767	Identifier	tm		1267759	0					
ANR	1267768	PrimaryExpression	0		1267759	1					
ANR	1267769	IdentifierDeclStatement	time_t clock_now ;	359:1:11148:11164	1267759	1	True				
ANR	1267770	IdentifierDecl	clock_now		1267759	0					
ANR	1267771	IdentifierDeclType	time_t		1267759	0					
ANR	1267772	Identifier	clock_now		1267759	1					
ANR	1267773	IdentifierDeclStatement	va_list args ;	360:4:11170:11182	1267759	2	True				
ANR	1267774	IdentifierDecl	args		1267759	0					
ANR	1267775	IdentifierDeclType	va_list		1267759	0					
ANR	1267776	Identifier	args		1267759	1					
ANR	1267777	ExpressionStatement	"memset ( ( void * ) & clock_now , 0 , sizeof ( time_t ) )"	362:1:11186:11228	1267759	3	True				
ANR	1267778	CallExpression	"memset ( ( void * ) & clock_now , 0 , sizeof ( time_t ) )"		1267759	0					
ANR	1267779	Callee	memset		1267759	0					
ANR	1267780	Identifier	memset		1267759	0					
ANR	1267781	ArgumentList	( void * ) & clock_now		1267759	1					
ANR	1267782	Argument	( void * ) & clock_now		1267759	0					
ANR	1267783	CastExpression	( void * ) & clock_now		1267759	0					
ANR	1267784	CastTarget	void *		1267759	0					
ANR	1267785	UnaryOperationExpression	& clock_now		1267759	1					
ANR	1267786	UnaryOperator	&		1267759	0					
ANR	1267787	Identifier	clock_now		1267759	1					
ANR	1267788	Argument	0		1267759	1					
ANR	1267789	PrimaryExpression	0		1267759	0					
ANR	1267790	Argument	sizeof ( time_t )		1267759	2					
ANR	1267791	SizeofExpression	sizeof ( time_t )		1267759	0					
ANR	1267792	Sizeof	sizeof		1267759	0					
ANR	1267793	SizeofOperand	time_t		1267759	1					
ANR	1267794	ExpressionStatement	( void ) time ( & clock_now )	363:1:11265:11290	1267759	4	True				
ANR	1267795	CastExpression	( void ) time ( & clock_now )		1267759	0					
ANR	1267796	CastTarget	void		1267759	0					
ANR	1267797	CallExpression	time ( & clock_now )		1267759	1					
ANR	1267798	Callee	time		1267759	0					
ANR	1267799	Identifier	time		1267759	0					
ANR	1267800	ArgumentList	& clock_now		1267759	1					
ANR	1267801	Argument	& clock_now		1267759	0					
ANR	1267802	UnaryOperationExpression	& clock_now		1267759	0					
ANR	1267803	UnaryOperator	&		1267759	0					
ANR	1267804	Identifier	clock_now		1267759	1					
ANR	1267805	IfStatement	if ( ! DebugUseTimestamps )		1267759	5					
ANR	1267806	Condition	! DebugUseTimestamps	364:6:11298:11317	1267759	0	True				
ANR	1267807	UnaryOperationExpression	! DebugUseTimestamps		1267759	0					
ANR	1267808	UnaryOperator	!		1267759	0					
ANR	1267809	Identifier	DebugUseTimestamps		1267759	1					
ANR	1267810	CompoundStatement		8:29:193:193	1267759	1					
ANR	1267811	ExpressionStatement	tm = localtime ( & clock_now )	365:2:11325:11353	1267759	0	True				
ANR	1267812	AssignmentExpression	tm = localtime ( & clock_now )		1267759	0		=			
ANR	1267813	Identifier	tm		1267759	0					
ANR	1267814	CallExpression	localtime ( & clock_now )		1267759	1					
ANR	1267815	Callee	localtime		1267759	0					
ANR	1267816	Identifier	localtime		1267759	0					
ANR	1267817	ArgumentList	& clock_now		1267759	1					
ANR	1267818	Argument	& clock_now		1267759	0					
ANR	1267819	UnaryOperationExpression	& clock_now		1267759	0					
ANR	1267820	UnaryOperator	&		1267759	0					
ANR	1267821	Identifier	clock_now		1267759	1					
ANR	1267822	ExpressionStatement	"va_start ( args , fmt )"	368:4:11363:11384	1267759	6	True				
ANR	1267823	CallExpression	"va_start ( args , fmt )"		1267759	0					
ANR	1267824	Callee	va_start		1267759	0					
ANR	1267825	Identifier	va_start		1267759	0					
ANR	1267826	ArgumentList	args		1267759	1					
ANR	1267827	Argument	args		1267759	0					
ANR	1267828	Identifier	args		1267759	0					
ANR	1267829	Argument	fmt		1267759	1					
ANR	1267830	Identifier	fmt		1267759	0					
ANR	1267831	ExpressionStatement	"_condor_dfprintf_va ( D_ALWAYS , D_ALWAYS | DebugFlags , clock_now , tm , fp , fmt , args )"	369:1:11387:11461	1267759	7	True				
ANR	1267832	CallExpression	"_condor_dfprintf_va ( D_ALWAYS , D_ALWAYS | DebugFlags , clock_now , tm , fp , fmt , args )"		1267759	0					
ANR	1267833	Callee	_condor_dfprintf_va		1267759	0					
ANR	1267834	Identifier	_condor_dfprintf_va		1267759	0					
ANR	1267835	ArgumentList	D_ALWAYS		1267759	1					
ANR	1267836	Argument	D_ALWAYS		1267759	0					
ANR	1267837	Identifier	D_ALWAYS		1267759	0					
ANR	1267838	Argument	D_ALWAYS | DebugFlags		1267759	1					
ANR	1267839	InclusiveOrExpression	D_ALWAYS | DebugFlags		1267759	0		|			
ANR	1267840	Identifier	D_ALWAYS		1267759	0					
ANR	1267841	Identifier	DebugFlags		1267759	1					
ANR	1267842	Argument	clock_now		1267759	2					
ANR	1267843	Identifier	clock_now		1267759	0					
ANR	1267844	Argument	tm		1267759	3					
ANR	1267845	Identifier	tm		1267759	0					
ANR	1267846	Argument	fp		1267759	4					
ANR	1267847	Identifier	fp		1267759	0					
ANR	1267848	Argument	fmt		1267759	5					
ANR	1267849	Identifier	fmt		1267759	0					
ANR	1267850	Argument	args		1267759	6					
ANR	1267851	Identifier	args		1267759	0					
ANR	1267852	ExpressionStatement	va_end ( args )	370:4:11467:11481	1267759	8	True				
ANR	1267853	CallExpression	va_end ( args )		1267759	0					
ANR	1267854	Callee	va_end		1267759	0					
ANR	1267855	Identifier	va_end		1267759	0					
ANR	1267856	ArgumentList	args		1267759	1					
ANR	1267857	Argument	args		1267759	0					
ANR	1267858	Identifier	args		1267759	0					
ANR	1267859	ReturnType	static void		1267759	1					
ANR	1267860	Identifier	_condor_dfprintf		1267759	2					
ANR	1267861	ParameterList	"FILE * fp , const char * fmt"		1267759	3					
ANR	1267862	Parameter	FILE * fp	356:18:11094:11101	1267759	0	True				
ANR	1267863	ParameterType	FILE *		1267759	0					
ANR	1267864	Identifier	fp		1267759	1					
ANR	1267865	Parameter	const char * fmt	356:28:11104:11118	1267759	1	True				
ANR	1267866	ParameterType	const char *		1267759	0					
ANR	1267867	Identifier	fmt		1267759	1					
ANR	1267868	CFGEntryNode	ENTRY		1267759		True				
ANR	1267869	CFGExitNode	EXIT		1267759		True				
ANR	1267870	Symbol	args		1267759						
ANR	1267871	Symbol	localtime		1267759						
ANR	1267872	Symbol	& clock_now		1267759						
ANR	1267873	Symbol	DebugUseTimestamps		1267759						
ANR	1267874	Symbol	D_ALWAYS		1267759						
ANR	1267875	Symbol	tm		1267759						
ANR	1267876	Symbol	fp		1267759						
ANR	1267877	Symbol	DebugFlags		1267759						
ANR	1267878	Symbol	fmt		1267759						
ANR	1267879	Symbol	clock_now		1267759						
ANR	1267880	Function	dprintf_getCount	373:0:11486:11541							
ANR	1267881	FunctionDef	dprintf_getCount ()		1267880	0					
ANR	1267882	CompoundStatement		374:0:11513:11541	1267880	0					
ANR	1267883	ReturnStatement	return dprintf_count ;	375:4:11519:11539	1267880	0	True				
ANR	1267884	Identifier	dprintf_count		1267880	0					
ANR	1267885	ReturnType	int		1267880	1					
ANR	1267886	Identifier	dprintf_getCount		1267880	2					
ANR	1267887	ParameterList			1267880	3					
ANR	1267888	CFGEntryNode	ENTRY		1267880		True				
ANR	1267889	CFGExitNode	EXIT		1267880		True				
ANR	1267890	Symbol	dprintf_count		1267880						
ANR	1267891	DeclStmt									
ANR	1267892	Decl							struct tm	struct tm * ( )	localtime
ANR	1267893	Function	_condor_dprintf_va	387:0:11701:17762							
ANR	1267894	FunctionDef	"_condor_dprintf_va (int flags , const char * fmt , va_list args)"		1267893	0					
ANR	1267895	CompoundStatement		389:0:11769:17762	1267893	0					
ANR	1267896	IdentifierDeclStatement	struct tm * tm = 0 ;	390:1:11772:11787	1267893	0	True				
ANR	1267897	IdentifierDecl	* tm = 0		1267893	0					
ANR	1267898	IdentifierDeclType	struct tm *		1267893	0					
ANR	1267899	Identifier	tm		1267893	1					
ANR	1267900	AssignmentExpression	* tm = 0		1267893	2		=			
ANR	1267901	Identifier	tm		1267893	0					
ANR	1267902	PrimaryExpression	0		1267893	1					
ANR	1267903	IdentifierDeclStatement	time_t clock_now ;	391:1:11790:11806	1267893	1	True				
ANR	1267904	IdentifierDecl	clock_now		1267893	0					
ANR	1267905	IdentifierDeclType	time_t		1267893	0					
ANR	1267906	Identifier	clock_now		1267893	1					
ANR	1267907	IdentifierDeclStatement	"sigset_t mask , omask ;"	393:1:11829:11849	1267893	2	True				
ANR	1267908	IdentifierDecl	mask		1267893	0					
ANR	1267909	IdentifierDeclType	sigset_t		1267893	0					
ANR	1267910	Identifier	mask		1267893	1					
ANR	1267911	IdentifierDecl	omask		1267893	1					
ANR	1267912	IdentifierDeclType	sigset_t		1267893	0					
ANR	1267913	Identifier	omask		1267893	1					
ANR	1267914	IdentifierDeclStatement	mode_t old_umask ;	394:1:11852:11869	1267893	3	True				
ANR	1267915	IdentifierDecl	old_umask		1267893	0					
ANR	1267916	IdentifierDeclType	mode_t		1267893	0					
ANR	1267917	Identifier	old_umask		1267893	1					
ANR	1267918	IdentifierDeclStatement	int saved_errno ;	396:1:11879:11894	1267893	4	True				
ANR	1267919	IdentifierDecl	saved_errno		1267893	0					
ANR	1267920	IdentifierDeclType	int		1267893	0					
ANR	1267921	Identifier	saved_errno		1267893	1					
ANR	1267922	IdentifierDeclStatement	priv_state priv ;	397:1:11897:11912	1267893	5	True				
ANR	1267923	IdentifierDecl	priv		1267893	0					
ANR	1267924	IdentifierDeclType	priv_state		1267893	0					
ANR	1267925	Identifier	priv		1267893	1					
ANR	1267926	IdentifierDeclStatement	FILE * debug_file_ptr = NULL ;	398:1:11915:11942	1267893	6	True				
ANR	1267927	IdentifierDecl	* debug_file_ptr = NULL		1267893	0					
ANR	1267928	IdentifierDeclType	FILE *		1267893	0					
ANR	1267929	Identifier	debug_file_ptr		1267893	1					
ANR	1267930	AssignmentExpression	* debug_file_ptr = NULL		1267893	2		=			
ANR	1267931	Identifier	NULL		1267893	0					
ANR	1267932	Identifier	NULL		1267893	1					
ANR	1267933	IdentifierDeclStatement	std :: vector < DebugFileInfo > :: iterator it ;	399:1:11945:11984	1267893	7	True				
ANR	1267934	IdentifierDecl	it		1267893	0					
ANR	1267935	IdentifierDeclType	std :: vector < DebugFileInfo > :: iterator		1267893	0					
ANR	1267936	Identifier	it		1267893	1					
ANR	1267937	IfStatement	if ( DprintfBroken )		1267893	8					
ANR	1267938	Condition	DprintfBroken	407:5:12288:12300	1267893	0	True				
ANR	1267939	Identifier	DprintfBroken		1267893	0					
ANR	1267940	ReturnStatement	return ;	407:21:12304:12310	1267893	1	True				
ANR	1267941	IfStatement	if ( ! _condor_dprintf_works )		1267893	9					
ANR	1267942	Condition	! _condor_dprintf_works	416:5:12620:12642	1267893	0	True				
ANR	1267943	UnaryOperationExpression	! _condor_dprintf_works		1267893	0					
ANR	1267944	UnaryOperator	!		1267893	0					
ANR	1267945	Identifier	_condor_dprintf_works		1267893	1					
ANR	1267946	CompoundStatement		28:31:876:876	1267893	1					
ANR	1267947	ExpressionStatement	"_condor_save_dprintf_line ( flags , fmt , args )"	417:2:12650:12695	1267893	0	True				
ANR	1267948	CallExpression	"_condor_save_dprintf_line ( flags , fmt , args )"		1267893	0					
ANR	1267949	Callee	_condor_save_dprintf_line		1267893	0					
ANR	1267950	Identifier	_condor_save_dprintf_line		1267893	0					
ANR	1267951	ArgumentList	flags		1267893	1					
ANR	1267952	Argument	flags		1267893	0					
ANR	1267953	Identifier	flags		1267893	0					
ANR	1267954	Argument	fmt		1267893	1					
ANR	1267955	Identifier	fmt		1267893	0					
ANR	1267956	Argument	args		1267893	2					
ANR	1267957	Identifier	args		1267893	0					
ANR	1267958	ReturnStatement	return ;	418:2:12699:12705	1267893	1	True				
ANR	1267959	IfStatement	if ( ! ( flags & DebugFlags ) )		1267893	10					
ANR	1267960	Condition	! ( flags & DebugFlags )	422:5:12776:12794	1267893	0	True				
ANR	1267961	UnaryOperationExpression	! ( flags & DebugFlags )		1267893	0					
ANR	1267962	UnaryOperator	!		1267893	0					
ANR	1267963	BitAndExpression	flags & DebugFlags		1267893	1		&			
ANR	1267964	Identifier	flags		1267893	0					
ANR	1267965	Identifier	DebugFlags		1267893	1					
ANR	1267966	CompoundStatement		34:27:1028:1028	1267893	1					
ANR	1267967	ReturnStatement	return ;	423:2:12802:12808	1267893	0	True				
ANR	1267968	ExpressionStatement	sigfillset ( & mask )	431:1:13022:13041	1267893	11	True				
ANR	1267969	CallExpression	sigfillset ( & mask )		1267893	0					
ANR	1267970	Callee	sigfillset		1267893	0					
ANR	1267971	Identifier	sigfillset		1267893	0					
ANR	1267972	ArgumentList	& mask		1267893	1					
ANR	1267973	Argument	& mask		1267893	0					
ANR	1267974	UnaryOperationExpression	& mask		1267893	0					
ANR	1267975	UnaryOperator	&		1267893	0					
ANR	1267976	Identifier	mask		1267893	1					
ANR	1267977	ExpressionStatement	"sigdelset ( & mask , SIGABRT )"	432:1:13044:13071	1267893	12	True				
ANR	1267978	CallExpression	"sigdelset ( & mask , SIGABRT )"		1267893	0					
ANR	1267979	Callee	sigdelset		1267893	0					
ANR	1267980	Identifier	sigdelset		1267893	0					
ANR	1267981	ArgumentList	& mask		1267893	1					
ANR	1267982	Argument	& mask		1267893	0					
ANR	1267983	UnaryOperationExpression	& mask		1267893	0					
ANR	1267984	UnaryOperator	&		1267893	0					
ANR	1267985	Identifier	mask		1267893	1					
ANR	1267986	Argument	SIGABRT		1267893	1					
ANR	1267987	Identifier	SIGABRT		1267893	0					
ANR	1267988	ExpressionStatement	"sigdelset ( & mask , SIGBUS )"	433:1:13074:13100	1267893	13	True				
ANR	1267989	CallExpression	"sigdelset ( & mask , SIGBUS )"		1267893	0					
ANR	1267990	Callee	sigdelset		1267893	0					
ANR	1267991	Identifier	sigdelset		1267893	0					
ANR	1267992	ArgumentList	& mask		1267893	1					
ANR	1267993	Argument	& mask		1267893	0					
ANR	1267994	UnaryOperationExpression	& mask		1267893	0					
ANR	1267995	UnaryOperator	&		1267893	0					
ANR	1267996	Identifier	mask		1267893	1					
ANR	1267997	Argument	SIGBUS		1267893	1					
ANR	1267998	Identifier	SIGBUS		1267893	0					
ANR	1267999	ExpressionStatement	"sigdelset ( & mask , SIGFPE )"	434:1:13103:13129	1267893	14	True				
ANR	1268000	CallExpression	"sigdelset ( & mask , SIGFPE )"		1267893	0					
ANR	1268001	Callee	sigdelset		1267893	0					
ANR	1268002	Identifier	sigdelset		1267893	0					
ANR	1268003	ArgumentList	& mask		1267893	1					
ANR	1268004	Argument	& mask		1267893	0					
ANR	1268005	UnaryOperationExpression	& mask		1267893	0					
ANR	1268006	UnaryOperator	&		1267893	0					
ANR	1268007	Identifier	mask		1267893	1					
ANR	1268008	Argument	SIGFPE		1267893	1					
ANR	1268009	Identifier	SIGFPE		1267893	0					
ANR	1268010	ExpressionStatement	"sigdelset ( & mask , SIGILL )"	435:1:13132:13158	1267893	15	True				
ANR	1268011	CallExpression	"sigdelset ( & mask , SIGILL )"		1267893	0					
ANR	1268012	Callee	sigdelset		1267893	0					
ANR	1268013	Identifier	sigdelset		1267893	0					
ANR	1268014	ArgumentList	& mask		1267893	1					
ANR	1268015	Argument	& mask		1267893	0					
ANR	1268016	UnaryOperationExpression	& mask		1267893	0					
ANR	1268017	UnaryOperator	&		1267893	0					
ANR	1268018	Identifier	mask		1267893	1					
ANR	1268019	Argument	SIGILL		1267893	1					
ANR	1268020	Identifier	SIGILL		1267893	0					
ANR	1268021	ExpressionStatement	"sigdelset ( & mask , SIGSEGV )"	436:1:13161:13188	1267893	16	True				
ANR	1268022	CallExpression	"sigdelset ( & mask , SIGSEGV )"		1267893	0					
ANR	1268023	Callee	sigdelset		1267893	0					
ANR	1268024	Identifier	sigdelset		1267893	0					
ANR	1268025	ArgumentList	& mask		1267893	1					
ANR	1268026	Argument	& mask		1267893	0					
ANR	1268027	UnaryOperationExpression	& mask		1267893	0					
ANR	1268028	UnaryOperator	&		1267893	0					
ANR	1268029	Identifier	mask		1267893	1					
ANR	1268030	Argument	SIGSEGV		1267893	1					
ANR	1268031	Identifier	SIGSEGV		1267893	0					
ANR	1268032	ExpressionStatement	"sigdelset ( & mask , SIGTRAP )"	437:1:13191:13218	1267893	17	True				
ANR	1268033	CallExpression	"sigdelset ( & mask , SIGTRAP )"		1267893	0					
ANR	1268034	Callee	sigdelset		1267893	0					
ANR	1268035	Identifier	sigdelset		1267893	0					
ANR	1268036	ArgumentList	& mask		1267893	1					
ANR	1268037	Argument	& mask		1267893	0					
ANR	1268038	UnaryOperationExpression	& mask		1267893	0					
ANR	1268039	UnaryOperator	&		1267893	0					
ANR	1268040	Identifier	mask		1267893	1					
ANR	1268041	Argument	SIGTRAP		1267893	1					
ANR	1268042	Identifier	SIGTRAP		1267893	0					
ANR	1268043	ExpressionStatement	"sigprocmask ( SIG_BLOCK , & mask , & omask )"	438:1:13221:13260	1267893	18	True				
ANR	1268044	CallExpression	"sigprocmask ( SIG_BLOCK , & mask , & omask )"		1267893	0					
ANR	1268045	Callee	sigprocmask		1267893	0					
ANR	1268046	Identifier	sigprocmask		1267893	0					
ANR	1268047	ArgumentList	SIG_BLOCK		1267893	1					
ANR	1268048	Argument	SIG_BLOCK		1267893	0					
ANR	1268049	Identifier	SIG_BLOCK		1267893	0					
ANR	1268050	Argument	& mask		1267893	1					
ANR	1268051	UnaryOperationExpression	& mask		1267893	0					
ANR	1268052	UnaryOperator	&		1267893	0					
ANR	1268053	Identifier	mask		1267893	1					
ANR	1268054	Argument	& omask		1267893	2					
ANR	1268055	UnaryOperationExpression	& omask		1267893	0					
ANR	1268056	UnaryOperator	&		1267893	0					
ANR	1268057	Identifier	omask		1267893	1					
ANR	1268058	ExpressionStatement	old_umask = umask ( 022 )	443:1:13425:13449	1267893	19	True				
ANR	1268059	AssignmentExpression	old_umask = umask ( 022 )		1267893	0		=			
ANR	1268060	Identifier	old_umask		1267893	0					
ANR	1268061	CallExpression	umask ( 022 )		1267893	1					
ANR	1268062	Callee	umask		1267893	0					
ANR	1268063	Identifier	umask		1267893	0					
ANR	1268064	ArgumentList	022		1267893	1					
ANR	1268065	Argument	022		1267893	0					
ANR	1268066	PrimaryExpression	022		1267893	0					
ANR	1268067	IfStatement	if ( _condor_dprintf_critsec == NULL )		1267893	20					
ANR	1268068	Condition	_condor_dprintf_critsec == NULL	452:6:13704:13734	1267893	0	True				
ANR	1268069	EqualityExpression	_condor_dprintf_critsec == NULL		1267893	0		==			
ANR	1268070	Identifier	_condor_dprintf_critsec		1267893	0					
ANR	1268071	Identifier	NULL		1267893	1					
ANR	1268072	CompoundStatement		64:40:1968:1968	1267893	1					
ANR	1268073	ExpressionStatement	_condor_dprintf_critsec = ( CRITICAL_SECTION * ) malloc ( sizeof ( CRITICAL_SECTION ) )	453:2:13742:13824	1267893	0	True				
ANR	1268074	AssignmentExpression	_condor_dprintf_critsec = ( CRITICAL_SECTION * ) malloc ( sizeof ( CRITICAL_SECTION ) )		1267893	0		=			
ANR	1268075	Identifier	_condor_dprintf_critsec		1267893	0					
ANR	1268076	CastExpression	( CRITICAL_SECTION * ) malloc ( sizeof ( CRITICAL_SECTION ) )		1267893	1					
ANR	1268077	CastTarget	CRITICAL_SECTION *		1267893	0					
ANR	1268078	CallExpression	malloc ( sizeof ( CRITICAL_SECTION ) )		1267893	1					
ANR	1268079	Callee	malloc		1267893	0					
ANR	1268080	Identifier	malloc		1267893	0					
ANR	1268081	ArgumentList	sizeof ( CRITICAL_SECTION )		1267893	1					
ANR	1268082	Argument	sizeof ( CRITICAL_SECTION )		1267893	0					
ANR	1268083	SizeofExpression	sizeof ( CRITICAL_SECTION )		1267893	0					
ANR	1268084	Sizeof	sizeof		1267893	0					
ANR	1268085	SizeofOperand	CRITICAL_SECTION		1267893	1					
ANR	1268086	ExpressionStatement	InitializeCriticalSection ( _condor_dprintf_critsec )	455:2:13828:13878	1267893	1	True				
ANR	1268087	CallExpression	InitializeCriticalSection ( _condor_dprintf_critsec )		1267893	0					
ANR	1268088	Callee	InitializeCriticalSection		1267893	0					
ANR	1268089	Identifier	InitializeCriticalSection		1267893	0					
ANR	1268090	ArgumentList	_condor_dprintf_critsec		1267893	1					
ANR	1268091	Argument	_condor_dprintf_critsec		1267893	0					
ANR	1268092	Identifier	_condor_dprintf_critsec		1267893	0					
ANR	1268093	ExpressionStatement	EnterCriticalSection ( _condor_dprintf_critsec )	457:1:13884:13929	1267893	21	True				
ANR	1268094	CallExpression	EnterCriticalSection ( _condor_dprintf_critsec )		1267893	0					
ANR	1268095	Callee	EnterCriticalSection		1267893	0					
ANR	1268096	Identifier	EnterCriticalSection		1267893	0					
ANR	1268097	ArgumentList	_condor_dprintf_critsec		1267893	1					
ANR	1268098	Argument	_condor_dprintf_critsec		1267893	0					
ANR	1268099	Identifier	_condor_dprintf_critsec		1267893	0					
ANR	1268100	ExpressionStatement	saved_errno = errno	468:1:14275:14294	1267893	22	True				
ANR	1268101	AssignmentExpression	saved_errno = errno		1267893	0		=			
ANR	1268102	Identifier	saved_errno		1267893	0					
ANR	1268103	Identifier	errno		1267893	1					
ANR	1268104	IfStatement	if ( get_priv ( ) == PRIV_USER_FINAL )		1267893	23					
ANR	1268105	Condition	get_priv ( ) == PRIV_USER_FINAL	479:5:14693:14721	1267893	0	True				
ANR	1268106	EqualityExpression	get_priv ( ) == PRIV_USER_FINAL		1267893	0		==			
ANR	1268107	CallExpression	get_priv ( )		1267893	0					
ANR	1268108	Callee	get_priv		1267893	0					
ANR	1268109	Identifier	get_priv		1267893	0					
ANR	1268110	ArgumentList			1267893	1					
ANR	1268111	Identifier	PRIV_USER_FINAL		1267893	1					
ANR	1268112	CompoundStatement		91:36:2954:2954	1267893	1					
ANR	1268113	GotoStatement	goto cleanup ;	482:2:14838:14850	1267893	0	True				
ANR	1268114	Identifier	cleanup		1267893	0					
ANR	1268115	CompoundStatement		98:9:3098:3126	1267893	24					
ANR	1268116	Statement	static	486:2:14861:14866	1267893	0	True				
ANR	1268117	IdentifierDeclStatement	int in_nonreentrant_part = 0 ;	486:9:14868:14896	1267893	1	True				
ANR	1268118	IdentifierDecl	in_nonreentrant_part = 0		1267893	0					
ANR	1268119	IdentifierDeclType	int		1267893	0					
ANR	1268120	Identifier	in_nonreentrant_part		1267893	1					
ANR	1268121	AssignmentExpression	in_nonreentrant_part = 0		1267893	2		=			
ANR	1268122	Identifier	in_nonreentrant_part		1267893	0					
ANR	1268123	PrimaryExpression	0		1267893	1					
ANR	1268124	IfStatement	if ( in_nonreentrant_part )		1267893	2					
ANR	1268125	Condition	in_nonreentrant_part	487:6:14904:14923	1267893	0	True				
ANR	1268126	Identifier	in_nonreentrant_part		1267893	0					
ANR	1268127	CompoundStatement		99:29:3157:3157	1267893	1					
ANR	1268128	GotoStatement	goto cleanup ;	494:3:15207:15219	1267893	0	True				
ANR	1268129	Identifier	cleanup		1267893	0					
ANR	1268130	ExpressionStatement	in_nonreentrant_part = 1	496:2:15227:15251	1267893	3	True				
ANR	1268131	AssignmentExpression	in_nonreentrant_part = 1		1267893	0		=			
ANR	1268132	Identifier	in_nonreentrant_part		1267893	0					
ANR	1268133	PrimaryExpression	1		1267893	1					
ANR	1268134	ExpressionStatement	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"	499:2:15313:15365	1267893	4	True				
ANR	1268135	AssignmentExpression	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1267893	0		=			
ANR	1268136	Identifier	priv		1267893	0					
ANR	1268137	CallExpression	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1267893	1					
ANR	1268138	Callee	_set_priv		1267893	0					
ANR	1268139	Identifier	_set_priv		1267893	0					
ANR	1268140	ArgumentList	PRIV_CONDOR		1267893	1					
ANR	1268141	Argument	PRIV_CONDOR		1267893	0					
ANR	1268142	Identifier	PRIV_CONDOR		1267893	0					
ANR	1268143	Argument	__FILE__		1267893	1					
ANR	1268144	Identifier	__FILE__		1267893	0					
ANR	1268145	Argument	__LINE__		1267893	2					
ANR	1268146	Identifier	__LINE__		1267893	0					
ANR	1268147	Argument	0		1267893	3					
ANR	1268148	PrimaryExpression	0		1267893	0					
ANR	1268149	ExpressionStatement	"memset ( ( void * ) & clock_now , 0 , sizeof ( time_t ) )"	503:2:15460:15502	1267893	5	True				
ANR	1268150	CallExpression	"memset ( ( void * ) & clock_now , 0 , sizeof ( time_t ) )"		1267893	0					
ANR	1268151	Callee	memset		1267893	0					
ANR	1268152	Identifier	memset		1267893	0					
ANR	1268153	ArgumentList	( void * ) & clock_now		1267893	1					
ANR	1268154	Argument	( void * ) & clock_now		1267893	0					
ANR	1268155	CastExpression	( void * ) & clock_now		1267893	0					
ANR	1268156	CastTarget	void *		1267893	0					
ANR	1268157	UnaryOperationExpression	& clock_now		1267893	1					
ANR	1268158	UnaryOperator	&		1267893	0					
ANR	1268159	Identifier	clock_now		1267893	1					
ANR	1268160	Argument	0		1267893	1					
ANR	1268161	PrimaryExpression	0		1267893	0					
ANR	1268162	Argument	sizeof ( time_t )		1267893	2					
ANR	1268163	SizeofExpression	sizeof ( time_t )		1267893	0					
ANR	1268164	Sizeof	sizeof		1267893	0					
ANR	1268165	SizeofOperand	time_t		1267893	1					
ANR	1268166	ExpressionStatement	( void ) time ( & clock_now )	504:2:15540:15565	1267893	6	True				
ANR	1268167	CastExpression	( void ) time ( & clock_now )		1267893	0					
ANR	1268168	CastTarget	void		1267893	0					
ANR	1268169	CallExpression	time ( & clock_now )		1267893	1					
ANR	1268170	Callee	time		1267893	0					
ANR	1268171	Identifier	time		1267893	0					
ANR	1268172	ArgumentList	& clock_now		1267893	1					
ANR	1268173	Argument	& clock_now		1267893	0					
ANR	1268174	UnaryOperationExpression	& clock_now		1267893	0					
ANR	1268175	UnaryOperator	&		1267893	0					
ANR	1268176	Identifier	clock_now		1267893	1					
ANR	1268177	IfStatement	if ( ! DebugUseTimestamps )		1267893	7					
ANR	1268178	Condition	! DebugUseTimestamps	505:7:15574:15593	1267893	0	True				
ANR	1268179	UnaryOperationExpression	! DebugUseTimestamps		1267893	0					
ANR	1268180	UnaryOperator	!		1267893	0					
ANR	1268181	Identifier	DebugUseTimestamps		1267893	1					
ANR	1268182	CompoundStatement		117:30:3827:3827	1267893	1					
ANR	1268183	ExpressionStatement	tm = localtime ( & clock_now )	506:3:15602:15630	1267893	0	True				
ANR	1268184	AssignmentExpression	tm = localtime ( & clock_now )		1267893	0		=			
ANR	1268185	Identifier	tm		1267893	0					
ANR	1268186	CallExpression	localtime ( & clock_now )		1267893	1					
ANR	1268187	Callee	localtime		1267893	0					
ANR	1268188	Identifier	localtime		1267893	0					
ANR	1268189	ArgumentList	& clock_now		1267893	1					
ANR	1268190	Argument	& clock_now		1267893	0					
ANR	1268191	UnaryOperationExpression	& clock_now		1267893	0					
ANR	1268192	UnaryOperator	&		1267893	0					
ANR	1268193	Identifier	clock_now		1267893	1					
ANR	1268194	IfStatement	if ( ! DebugLogs -> size ( ) )		1267893	8					
ANR	1268195	Condition	! DebugLogs -> size ( )	511:5:15750:15767	1267893	0	True				
ANR	1268196	UnaryOperationExpression	! DebugLogs -> size ( )		1267893	0					
ANR	1268197	UnaryOperator	!		1267893	0					
ANR	1268198	CallExpression	DebugLogs -> size ( )		1267893	1					
ANR	1268199	Callee	DebugLogs -> size		1267893	0					
ANR	1268200	PtrMemberAccess	DebugLogs -> size		1267893	0					
ANR	1268201	Identifier	DebugLogs		1267893	0					
ANR	1268202	Identifier	size		1267893	1					
ANR	1268203	ArgumentList			1267893	1					
ANR	1268204	CompoundStatement		127:3:4050:4066	1267893	1					
ANR	1268205	ExpressionStatement	debug_file_ptr = stderr	513:3:15777:15800	1267893	0	True				
ANR	1268206	AssignmentExpression	debug_file_ptr = stderr		1267893	0		=			
ANR	1268207	Identifier	debug_file_ptr		1267893	0					
ANR	1268208	Identifier	stderr		1267893	1					
ANR	1268209	IdentifierDeclStatement	va_list copyargs ;	515:3:15820:15836	1267893	1	True				
ANR	1268210	IdentifierDecl	copyargs		1267893	0					
ANR	1268211	IdentifierDeclType	va_list		1267893	0					
ANR	1268212	Identifier	copyargs		1267893	1					
ANR	1268213	ExpressionStatement	"va_copy ( copyargs , args )"	516:3:15841:15864	1267893	2	True				
ANR	1268214	CallExpression	"va_copy ( copyargs , args )"		1267893	0					
ANR	1268215	Callee	va_copy		1267893	0					
ANR	1268216	Identifier	va_copy		1267893	0					
ANR	1268217	ArgumentList	copyargs		1267893	1					
ANR	1268218	Argument	copyargs		1267893	0					
ANR	1268219	Identifier	copyargs		1267893	0					
ANR	1268220	Argument	args		1267893	1					
ANR	1268221	Identifier	args		1267893	0					
ANR	1268222	ExpressionStatement	"_condor_dfprintf_va ( flags , DebugFlags , clock_now , tm , debug_file_ptr , fmt , copyargs )"	517:3:15869:15947	1267893	3	True				
ANR	1268223	CallExpression	"_condor_dfprintf_va ( flags , DebugFlags , clock_now , tm , debug_file_ptr , fmt , copyargs )"		1267893	0					
ANR	1268224	Callee	_condor_dfprintf_va		1267893	0					
ANR	1268225	Identifier	_condor_dfprintf_va		1267893	0					
ANR	1268226	ArgumentList	flags		1267893	1					
ANR	1268227	Argument	flags		1267893	0					
ANR	1268228	Identifier	flags		1267893	0					
ANR	1268229	Argument	DebugFlags		1267893	1					
ANR	1268230	Identifier	DebugFlags		1267893	0					
ANR	1268231	Argument	clock_now		1267893	2					
ANR	1268232	Identifier	clock_now		1267893	0					
ANR	1268233	Argument	tm		1267893	3					
ANR	1268234	Identifier	tm		1267893	0					
ANR	1268235	Argument	debug_file_ptr		1267893	4					
ANR	1268236	Identifier	debug_file_ptr		1267893	0					
ANR	1268237	Argument	fmt		1267893	5					
ANR	1268238	Identifier	fmt		1267893	0					
ANR	1268239	Argument	copyargs		1267893	6					
ANR	1268240	Identifier	copyargs		1267893	0					
ANR	1268241	ExpressionStatement	va_end ( copyargs )	518:3:15952:15968	1267893	4	True				
ANR	1268242	CallExpression	va_end ( copyargs )		1267893	0					
ANR	1268243	Callee	va_end		1267893	0					
ANR	1268244	Identifier	va_end		1267893	0					
ANR	1268245	ArgumentList	copyargs		1267893	1					
ANR	1268246	Argument	copyargs		1267893	0					
ANR	1268247	Identifier	copyargs		1267893	0					
ANR	1268248	ForStatement	for ( it = DebugLogs -> begin ( ) ; it < DebugLogs -> end ( ) ; it ++ )		1267893	9					
ANR	1268249	ForInit	it = DebugLogs -> begin ( ) ;	523:6:16072:16095	1267893	0	True				
ANR	1268250	AssignmentExpression	it = DebugLogs -> begin ( )		1267893	0		=			
ANR	1268251	Identifier	it		1267893	0					
ANR	1268252	CallExpression	DebugLogs -> begin ( )		1267893	1					
ANR	1268253	Callee	DebugLogs -> begin		1267893	0					
ANR	1268254	PtrMemberAccess	DebugLogs -> begin		1267893	0					
ANR	1268255	Identifier	DebugLogs		1267893	0					
ANR	1268256	Identifier	begin		1267893	1					
ANR	1268257	ArgumentList			1267893	1					
ANR	1268258	Condition	it < DebugLogs -> end ( )	523:31:16097:16117	1267893	1	True				
ANR	1268259	RelationalExpression	it < DebugLogs -> end ( )		1267893	0		<			
ANR	1268260	Identifier	it		1267893	0					
ANR	1268261	CallExpression	DebugLogs -> end ( )		1267893	1					
ANR	1268262	Callee	DebugLogs -> end		1267893	0					
ANR	1268263	PtrMemberAccess	DebugLogs -> end		1267893	0					
ANR	1268264	Identifier	DebugLogs		1267893	0					
ANR	1268265	Identifier	end		1267893	1					
ANR	1268266	ArgumentList			1267893	1					
ANR	1268267	PostIncDecOperationExpression	it ++	523:54:16120:16123	1267893	2	True				
ANR	1268268	Identifier	it		1267893	0					
ANR	1268269	IncDec	++		1267893	1					
ANR	1268270	CompoundStatement		148:3:4780:4845	1267893	3					
ANR	1268271	IdentifierDeclStatement	int debugFlags = ( * it ) . debugFlags ;	525:3:16133:16166	1267893	0	True				
ANR	1268272	IdentifierDecl	debugFlags = ( * it ) . debugFlags		1267893	0					
ANR	1268273	IdentifierDeclType	int		1267893	0					
ANR	1268274	Identifier	debugFlags		1267893	1					
ANR	1268275	AssignmentExpression	debugFlags = ( * it ) . debugFlags		1267893	2		=			
ANR	1268276	Identifier	debugFlags		1267893	0					
ANR	1268277	MemberAccess	( * it ) . debugFlags		1267893	1					
ANR	1268278	UnaryOperationExpression	* it		1267893	0					
ANR	1268279	UnaryOperator	*		1267893	0					
ANR	1268280	Identifier	it		1267893	1					
ANR	1268281	Identifier	debugFlags		1267893	1					
ANR	1268282	IfStatement	if ( debugFlags && ! ( debugFlags & flags ) )		1267893	1					
ANR	1268283	Condition	debugFlags && ! ( debugFlags & flags )	531:7:16399:16433	1267893	0	True				
ANR	1268284	AndExpression	debugFlags && ! ( debugFlags & flags )		1267893	0		&&			
ANR	1268285	Identifier	debugFlags		1267893	0					
ANR	1268286	UnaryOperationExpression	! ( debugFlags & flags )		1267893	1					
ANR	1268287	UnaryOperator	!		1267893	0					
ANR	1268288	BitAndExpression	debugFlags & flags		1267893	1		&			
ANR	1268289	Identifier	debugFlags		1267893	0					
ANR	1268290	Identifier	flags		1267893	1					
ANR	1268291	ContinueStatement	continue ;	532:4:16440:16448	1267893	1	True				
ANR	1268292	IdentifierDeclStatement	bool dont_panic = ( debugFlags != 0 ) || DebugContinueOnOpenFailure ;	536:3:16550:16615	1267893	2	True				
ANR	1268293	IdentifierDecl	dont_panic = ( debugFlags != 0 ) || DebugContinueOnOpenFailure		1267893	0					
ANR	1268294	IdentifierDeclType	bool		1267893	0					
ANR	1268295	Identifier	dont_panic		1267893	1					
ANR	1268296	AssignmentExpression	dont_panic = ( debugFlags != 0 ) || DebugContinueOnOpenFailure		1267893	2		=			
ANR	1268297	Identifier	dont_panic		1267893	0					
ANR	1268298	OrExpression	( debugFlags != 0 ) || DebugContinueOnOpenFailure		1267893	1		||			
ANR	1268299	EqualityExpression	debugFlags != 0		1267893	0		!=			
ANR	1268300	Identifier	debugFlags		1267893	0					
ANR	1268301	PrimaryExpression	0		1267893	1					
ANR	1268302	Identifier	DebugContinueOnOpenFailure		1267893	1					
ANR	1268303	ExpressionStatement	"debug_file_ptr = debug_lock_it ( & ( * it ) , NULL , 0 , dont_panic )"	539:3:16657:16716	1267893	3	True				
ANR	1268304	AssignmentExpression	"debug_file_ptr = debug_lock_it ( & ( * it ) , NULL , 0 , dont_panic )"		1267893	0		=			
ANR	1268305	Identifier	debug_file_ptr		1267893	0					
ANR	1268306	CallExpression	"debug_lock_it ( & ( * it ) , NULL , 0 , dont_panic )"		1267893	1					
ANR	1268307	Callee	debug_lock_it		1267893	0					
ANR	1268308	Identifier	debug_lock_it		1267893	0					
ANR	1268309	ArgumentList	& ( * it )		1267893	1					
ANR	1268310	Argument	& ( * it )		1267893	0					
ANR	1268311	UnaryOperationExpression	& ( * it )		1267893	0					
ANR	1268312	UnaryOperator	&		1267893	0					
ANR	1268313	UnaryOperationExpression	* it		1267893	1					
ANR	1268314	UnaryOperator	*		1267893	0					
ANR	1268315	Identifier	it		1267893	1					
ANR	1268316	Argument	NULL		1267893	1					
ANR	1268317	Identifier	NULL		1267893	0					
ANR	1268318	Argument	0		1267893	2					
ANR	1268319	PrimaryExpression	0		1267893	0					
ANR	1268320	Argument	dont_panic		1267893	3					
ANR	1268321	Identifier	dont_panic		1267893	0					
ANR	1268322	IfStatement	if ( debug_file_ptr )		1267893	4					
ANR	1268323	Condition	debug_file_ptr	540:7:16725:16738	1267893	0	True				
ANR	1268324	Identifier	debug_file_ptr		1267893	0					
ANR	1268325	CompoundStatement		154:4:4992:5008	1267893	1					
ANR	1268326	IdentifierDeclStatement	va_list copyargs ;	542:4:16762:16778	1267893	0	True				
ANR	1268327	IdentifierDecl	copyargs		1267893	0					
ANR	1268328	IdentifierDeclType	va_list		1267893	0					
ANR	1268329	Identifier	copyargs		1267893	1					
ANR	1268330	ExpressionStatement	"va_copy ( copyargs , args )"	543:4:16784:16807	1267893	1	True				
ANR	1268331	CallExpression	"va_copy ( copyargs , args )"		1267893	0					
ANR	1268332	Callee	va_copy		1267893	0					
ANR	1268333	Identifier	va_copy		1267893	0					
ANR	1268334	ArgumentList	copyargs		1267893	1					
ANR	1268335	Argument	copyargs		1267893	0					
ANR	1268336	Identifier	copyargs		1267893	0					
ANR	1268337	Argument	args		1267893	1					
ANR	1268338	Identifier	args		1267893	0					
ANR	1268339	ExpressionStatement	"_condor_dfprintf_va ( flags , DebugFlags , clock_now , tm , debug_file_ptr , fmt , copyargs )"	544:4:16813:16891	1267893	2	True				
ANR	1268340	CallExpression	"_condor_dfprintf_va ( flags , DebugFlags , clock_now , tm , debug_file_ptr , fmt , copyargs )"		1267893	0					
ANR	1268341	Callee	_condor_dfprintf_va		1267893	0					
ANR	1268342	Identifier	_condor_dfprintf_va		1267893	0					
ANR	1268343	ArgumentList	flags		1267893	1					
ANR	1268344	Argument	flags		1267893	0					
ANR	1268345	Identifier	flags		1267893	0					
ANR	1268346	Argument	DebugFlags		1267893	1					
ANR	1268347	Identifier	DebugFlags		1267893	0					
ANR	1268348	Argument	clock_now		1267893	2					
ANR	1268349	Identifier	clock_now		1267893	0					
ANR	1268350	Argument	tm		1267893	3					
ANR	1268351	Identifier	tm		1267893	0					
ANR	1268352	Argument	debug_file_ptr		1267893	4					
ANR	1268353	Identifier	debug_file_ptr		1267893	0					
ANR	1268354	Argument	fmt		1267893	5					
ANR	1268355	Identifier	fmt		1267893	0					
ANR	1268356	Argument	copyargs		1267893	6					
ANR	1268357	Identifier	copyargs		1267893	0					
ANR	1268358	ExpressionStatement	va_end ( copyargs )	545:4:16897:16913	1267893	3	True				
ANR	1268359	CallExpression	va_end ( copyargs )		1267893	0					
ANR	1268360	Callee	va_end		1267893	0					
ANR	1268361	Identifier	va_end		1267893	0					
ANR	1268362	ArgumentList	copyargs		1267893	1					
ANR	1268363	Argument	copyargs		1267893	0					
ANR	1268364	Identifier	copyargs		1267893	0					
ANR	1268365	ExpressionStatement	debug_unlock_it ( & ( * it ) )	551:3:17017:17040	1267893	5	True				
ANR	1268366	CallExpression	debug_unlock_it ( & ( * it ) )		1267893	0					
ANR	1268367	Callee	debug_unlock_it		1267893	0					
ANR	1268368	Identifier	debug_unlock_it		1267893	0					
ANR	1268369	ArgumentList	& ( * it )		1267893	1					
ANR	1268370	Argument	& ( * it )		1267893	0					
ANR	1268371	UnaryOperationExpression	& ( * it )		1267893	0					
ANR	1268372	UnaryOperator	&		1267893	0					
ANR	1268373	UnaryOperationExpression	* it		1267893	1					
ANR	1268374	UnaryOperator	*		1267893	0					
ANR	1268375	Identifier	it		1267893	1					
ANR	1268376	ExpressionStatement	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"	555:2:17077:17115	1267893	10	True				
ANR	1268377	CallExpression	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"		1267893	0					
ANR	1268378	Callee	_set_priv		1267893	0					
ANR	1268379	Identifier	_set_priv		1267893	0					
ANR	1268380	ArgumentList	priv		1267893	1					
ANR	1268381	Argument	priv		1267893	0					
ANR	1268382	Identifier	priv		1267893	0					
ANR	1268383	Argument	__FILE__		1267893	1					
ANR	1268384	Identifier	__FILE__		1267893	0					
ANR	1268385	Argument	__LINE__		1267893	2					
ANR	1268386	Identifier	__LINE__		1267893	0					
ANR	1268387	Argument	0		1267893	3					
ANR	1268388	PrimaryExpression	0		1267893	0					
ANR	1268389	ExpressionStatement	dprintf_count += 1	557:8:17126:17144	1267893	11	True				
ANR	1268390	AssignmentExpression	dprintf_count += 1		1267893	0		+=			
ANR	1268391	Identifier	dprintf_count		1267893	0					
ANR	1268392	PrimaryExpression	1		1267893	1					
ANR	1268393	ExpressionStatement	in_nonreentrant_part = 0	559:2:17149:17173	1267893	12	True				
ANR	1268394	AssignmentExpression	in_nonreentrant_part = 0		1267893	0		=			
ANR	1268395	Identifier	in_nonreentrant_part		1267893	0					
ANR	1268396	PrimaryExpression	0		1267893	1					
ANR	1268397	Label	cleanup :	562:1:17180:17187	1267893	25	True				
ANR	1268398	Identifier	cleanup		1267893	0					
ANR	1268399	ExpressionStatement	errno = saved_errno	564:1:17191:17210	1267893	26	True				
ANR	1268400	AssignmentExpression	errno = saved_errno		1267893	0		=			
ANR	1268401	Identifier	errno		1267893	0					
ANR	1268402	Identifier	saved_errno		1267893	1					
ANR	1268403	ExpressionStatement	( void ) umask ( old_umask )	568:1:17287:17311	1267893	27	True				
ANR	1268404	CastExpression	( void ) umask ( old_umask )		1267893	0					
ANR	1268405	CastTarget	void		1267893	0					
ANR	1268406	CallExpression	umask ( old_umask )		1267893	1					
ANR	1268407	Callee	umask		1267893	0					
ANR	1268408	Identifier	umask		1267893	0					
ANR	1268409	ArgumentList	old_umask		1267893	1					
ANR	1268410	Argument	old_umask		1267893	0					
ANR	1268411	Identifier	old_umask		1267893	0					
ANR	1268412	ExpressionStatement	LeaveCriticalSection ( _condor_dprintf_critsec )	573:1:17406:17451	1267893	28	True				
ANR	1268413	CallExpression	LeaveCriticalSection ( _condor_dprintf_critsec )		1267893	0					
ANR	1268414	Callee	LeaveCriticalSection		1267893	0					
ANR	1268415	Identifier	LeaveCriticalSection		1267893	0					
ANR	1268416	ArgumentList	_condor_dprintf_critsec		1267893	1					
ANR	1268417	Argument	_condor_dprintf_critsec		1267893	0					
ANR	1268418	Identifier	_condor_dprintf_critsec		1267893	0					
ANR	1268419	ExpressionStatement	"( void ) sigprocmask ( SIG_SETMASK , & omask , 0 )"	582:1:17709:17753	1267893	29	True				
ANR	1268420	CastExpression	"( void ) sigprocmask ( SIG_SETMASK , & omask , 0 )"		1267893	0					
ANR	1268421	CastTarget	void		1267893	0					
ANR	1268422	CallExpression	"sigprocmask ( SIG_SETMASK , & omask , 0 )"		1267893	1					
ANR	1268423	Callee	sigprocmask		1267893	0					
ANR	1268424	Identifier	sigprocmask		1267893	0					
ANR	1268425	ArgumentList	SIG_SETMASK		1267893	1					
ANR	1268426	Argument	SIG_SETMASK		1267893	0					
ANR	1268427	Identifier	SIG_SETMASK		1267893	0					
ANR	1268428	Argument	& omask		1267893	1					
ANR	1268429	UnaryOperationExpression	& omask		1267893	0					
ANR	1268430	UnaryOperator	&		1267893	0					
ANR	1268431	Identifier	omask		1267893	1					
ANR	1268432	Argument	0		1267893	2					
ANR	1268433	PrimaryExpression	0		1267893	0					
ANR	1268434	ReturnType	void		1267893	1					
ANR	1268435	Identifier	_condor_dprintf_va		1267893	2					
ANR	1268436	ParameterList	"int flags , const char * fmt , va_list args"		1267893	3					
ANR	1268437	Parameter	int flags	388:20:11726:11734	1267893	0	True				
ANR	1268438	ParameterType	int		1267893	0					
ANR	1268439	Identifier	flags		1267893	1					
ANR	1268440	Parameter	const char * fmt	388:31:11737:11751	1267893	1	True				
ANR	1268441	ParameterType	const char *		1267893	0					
ANR	1268442	Identifier	fmt		1267893	1					
ANR	1268443	Parameter	va_list args	388:48:11754:11765	1267893	2	True				
ANR	1268444	ParameterType	va_list		1267893	0					
ANR	1268445	Identifier	args		1267893	1					
ANR	1268446	CFGEntryNode	ENTRY		1267893		True				
ANR	1268447	CFGExitNode	EXIT		1267893		True				
ANR	1268448	Symbol	localtime		1267893						
ANR	1268449	Symbol	_set_priv		1267893						
ANR	1268450	Symbol	DebugContinueOnOpenFailure		1267893						
ANR	1268451	Symbol	fmt		1267893						
ANR	1268452	Symbol	copyargs		1267893						
ANR	1268453	Symbol	DprintfBroken		1267893						
ANR	1268454	Symbol	old_umask		1267893						
ANR	1268455	Symbol	omask		1267893						
ANR	1268456	Symbol	SIGTRAP		1267893						
ANR	1268457	Symbol	debugFlags		1267893						
ANR	1268458	Symbol	priv		1267893						
ANR	1268459	Symbol	DebugLogs		1267893						
ANR	1268460	Symbol	DebugLogs -> size		1267893						
ANR	1268461	Symbol	SIGFPE		1267893						
ANR	1268462	Symbol	errno		1267893						
ANR	1268463	Symbol	NULL		1267893						
ANR	1268464	Symbol	__FILE__		1267893						
ANR	1268465	Symbol	DebugFlags		1267893						
ANR	1268466	Symbol	it		1267893						
ANR	1268467	Symbol	stderr		1267893						
ANR	1268468	Symbol	dont_panic		1267893						
ANR	1268469	Symbol	( * it ) . debugFlags		1267893						
ANR	1268470	Symbol	SIGSEGV		1267893						
ANR	1268471	Symbol	get_priv		1267893						
ANR	1268472	Symbol	in_nonreentrant_part		1267893						
ANR	1268473	Symbol	DebugLogs -> end		1267893						
ANR	1268474	Symbol	dprintf_count		1267893						
ANR	1268475	Symbol	& clock_now		1267893						
ANR	1268476	Symbol	umask		1267893						
ANR	1268477	Symbol	SIGBUS		1267893						
ANR	1268478	Symbol	DebugUseTimestamps		1267893						
ANR	1268479	Symbol	flags		1267893						
ANR	1268480	Symbol	_condor_dprintf_works		1267893						
ANR	1268481	Symbol	PRIV_USER_FINAL		1267893						
ANR	1268482	Symbol	* DebugLogs		1267893						
ANR	1268483	Symbol	mask		1267893						
ANR	1268484	Symbol	malloc		1267893						
ANR	1268485	Symbol	& mask		1267893						
ANR	1268486	Symbol	SIG_SETMASK		1267893						
ANR	1268487	Symbol	_condor_dprintf_critsec		1267893						
ANR	1268488	Symbol	SIGABRT		1267893						
ANR	1268489	Symbol	clock_now		1267893						
ANR	1268490	Symbol	saved_errno		1267893						
ANR	1268491	Symbol	debug_file_ptr		1267893						
ANR	1268492	Symbol	__LINE__		1267893						
ANR	1268493	Symbol	args		1267893						
ANR	1268494	Symbol	SIGILL		1267893						
ANR	1268495	Symbol	* it		1267893						
ANR	1268496	Symbol	& omask		1267893						
ANR	1268497	Symbol	tm		1267893						
ANR	1268498	Symbol	debug_lock_it		1267893						
ANR	1268499	Symbol	DebugLogs -> begin		1267893						
ANR	1268500	Symbol	PRIV_CONDOR		1267893						
ANR	1268501	Symbol	SIG_BLOCK		1267893						
ANR	1268502	Function	_condor_open_lock_file	586:0:17765:19735							
ANR	1268503	FunctionDef	"_condor_open_lock_file (const char * filename , int flags , mode_t perm)"		1268502	0					
ANR	1268504	CompoundStatement		588:0:17837:19735	1268502	0					
ANR	1268505	IdentifierDeclStatement	int retry = 0 ;	589:1:17840:17853	1268502	0	True				
ANR	1268506	IdentifierDecl	retry = 0		1268502	0					
ANR	1268507	IdentifierDeclType	int		1268502	0					
ANR	1268508	Identifier	retry		1268502	1					
ANR	1268509	AssignmentExpression	retry = 0		1268502	2		=			
ANR	1268510	Identifier	retry		1268502	0					
ANR	1268511	PrimaryExpression	0		1268502	1					
ANR	1268512	IdentifierDeclStatement	int save_errno = 0 ;	590:1:17856:17874	1268502	1	True				
ANR	1268513	IdentifierDecl	save_errno = 0		1268502	0					
ANR	1268514	IdentifierDeclType	int		1268502	0					
ANR	1268515	Identifier	save_errno		1268502	1					
ANR	1268516	AssignmentExpression	save_errno = 0		1268502	2		=			
ANR	1268517	Identifier	save_errno		1268502	0					
ANR	1268518	PrimaryExpression	0		1268502	1					
ANR	1268519	IdentifierDeclStatement	priv_state priv ;	591:1:17877:17892	1268502	2	True				
ANR	1268520	IdentifierDecl	priv		1268502	0					
ANR	1268521	IdentifierDeclType	priv_state		1268502	0					
ANR	1268522	Identifier	priv		1268502	1					
ANR	1268523	IdentifierDeclStatement	char * dirpath = NULL ;	592:1:17895:17916	1268502	3	True				
ANR	1268524	IdentifierDecl	* dirpath = NULL		1268502	0					
ANR	1268525	IdentifierDeclType	char *		1268502	0					
ANR	1268526	Identifier	dirpath		1268502	1					
ANR	1268527	AssignmentExpression	* dirpath = NULL		1268502	2		=			
ANR	1268528	Identifier	NULL		1268502	0					
ANR	1268529	Identifier	NULL		1268502	1					
ANR	1268530	IdentifierDeclStatement	int lock_fd ;	593:1:17919:17930	1268502	4	True				
ANR	1268531	IdentifierDecl	lock_fd		1268502	0					
ANR	1268532	IdentifierDeclType	int		1268502	0					
ANR	1268533	Identifier	lock_fd		1268502	1					
ANR	1268534	IfStatement	if ( ! filename )		1268502	5					
ANR	1268535	Condition	! filename	595:5:17938:17946	1268502	0	True				
ANR	1268536	UnaryOperationExpression	! filename		1268502	0					
ANR	1268537	UnaryOperator	!		1268502	0					
ANR	1268538	Identifier	filename		1268502	1					
ANR	1268539	CompoundStatement		8:17:112:112	1268502	1					
ANR	1268540	ReturnStatement	return - 1 ;	596:2:17954:17963	1268502	0	True				
ANR	1268541	UnaryOperationExpression	- 1		1268502	0					
ANR	1268542	UnaryOperator	-		1268502	0					
ANR	1268543	PrimaryExpression	1		1268502	1					
ANR	1268544	ExpressionStatement	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"	599:1:17970:18022	1268502	6	True				
ANR	1268545	AssignmentExpression	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1268502	0		=			
ANR	1268546	Identifier	priv		1268502	0					
ANR	1268547	CallExpression	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1268502	1					
ANR	1268548	Callee	_set_priv		1268502	0					
ANR	1268549	Identifier	_set_priv		1268502	0					
ANR	1268550	ArgumentList	PRIV_CONDOR		1268502	1					
ANR	1268551	Argument	PRIV_CONDOR		1268502	0					
ANR	1268552	Identifier	PRIV_CONDOR		1268502	0					
ANR	1268553	Argument	__FILE__		1268502	1					
ANR	1268554	Identifier	__FILE__		1268502	0					
ANR	1268555	Argument	__LINE__		1268502	2					
ANR	1268556	Identifier	__LINE__		1268502	0					
ANR	1268557	Argument	0		1268502	3					
ANR	1268558	PrimaryExpression	0		1268502	0					
ANR	1268559	ExpressionStatement	"lock_fd = safe_open_wrapper_follow ( filename , flags , perm )"	600:1:18025:18080	1268502	7	True				
ANR	1268560	AssignmentExpression	"lock_fd = safe_open_wrapper_follow ( filename , flags , perm )"		1268502	0		=			
ANR	1268561	Identifier	lock_fd		1268502	0					
ANR	1268562	CallExpression	"safe_open_wrapper_follow ( filename , flags , perm )"		1268502	1					
ANR	1268563	Callee	safe_open_wrapper_follow		1268502	0					
ANR	1268564	Identifier	safe_open_wrapper_follow		1268502	0					
ANR	1268565	ArgumentList	filename		1268502	1					
ANR	1268566	Argument	filename		1268502	0					
ANR	1268567	Identifier	filename		1268502	0					
ANR	1268568	Argument	flags		1268502	1					
ANR	1268569	Identifier	flags		1268502	0					
ANR	1268570	Argument	perm		1268502	2					
ANR	1268571	Identifier	perm		1268502	0					
ANR	1268572	IfStatement	if ( lock_fd < 0 )		1268502	8					
ANR	1268573	Condition	lock_fd < 0	601:5:18087:18097	1268502	0	True				
ANR	1268574	RelationalExpression	lock_fd < 0		1268502	0		<			
ANR	1268575	Identifier	lock_fd		1268502	0					
ANR	1268576	PrimaryExpression	0		1268502	1					
ANR	1268577	CompoundStatement		14:19:263:263	1268502	1					
ANR	1268578	ExpressionStatement	save_errno = errno	602:2:18105:18123	1268502	0	True				
ANR	1268579	AssignmentExpression	save_errno = errno		1268502	0		=			
ANR	1268580	Identifier	save_errno		1268502	0					
ANR	1268581	Identifier	errno		1268502	1					
ANR	1268582	IfStatement	if ( save_errno == ENOENT )		1268502	1					
ANR	1268583	Condition	save_errno == ENOENT	603:6:18131:18150	1268502	0	True				
ANR	1268584	EqualityExpression	save_errno == ENOENT		1268502	0		==			
ANR	1268585	Identifier	save_errno		1268502	0					
ANR	1268586	Identifier	ENOENT		1268502	1					
ANR	1268587	CompoundStatement		16:29:316:316	1268502	1					
ANR	1268588	ExpressionStatement	dirpath = condor_dirname ( filename )	610:3:18351:18387	1268502	0	True				
ANR	1268589	AssignmentExpression	dirpath = condor_dirname ( filename )		1268502	0		=			
ANR	1268590	Identifier	dirpath		1268502	0					
ANR	1268591	CallExpression	condor_dirname ( filename )		1268502	1					
ANR	1268592	Callee	condor_dirname		1268502	0					
ANR	1268593	Identifier	condor_dirname		1268502	0					
ANR	1268594	ArgumentList	filename		1268502	1					
ANR	1268595	Argument	filename		1268502	0					
ANR	1268596	Identifier	filename		1268502	0					
ANR	1268597	ExpressionStatement	errno = 0	611:3:18392:18401	1268502	1	True				
ANR	1268598	AssignmentExpression	errno = 0		1268502	0		=			
ANR	1268599	Identifier	errno		1268502	0					
ANR	1268600	PrimaryExpression	0		1268502	1					
ANR	1268601	IfStatement	"if ( mkdir ( dirpath , 0777 ) < 0 )"		1268502	2					
ANR	1268602	Condition	"mkdir ( dirpath , 0777 ) < 0"	612:7:18410:18433	1268502	0	True				
ANR	1268603	RelationalExpression	"mkdir ( dirpath , 0777 ) < 0"		1268502	0		<			
ANR	1268604	CallExpression	"mkdir ( dirpath , 0777 )"		1268502	0					
ANR	1268605	Callee	mkdir		1268502	0					
ANR	1268606	Identifier	mkdir		1268502	0					
ANR	1268607	ArgumentList	dirpath		1268502	1					
ANR	1268608	Argument	dirpath		1268502	0					
ANR	1268609	Identifier	dirpath		1268502	0					
ANR	1268610	Argument	0777		1268502	1					
ANR	1268611	PrimaryExpression	0777		1268502	0					
ANR	1268612	PrimaryExpression	0		1268502	1					
ANR	1268613	CompoundStatement		25:34:599:599	1268502	1					
ANR	1268614	IfStatement	if ( errno == EACCES )		1268502	0					
ANR	1268615	Condition	errno == EACCES	613:8:18447:18461	1268502	0	True				
ANR	1268616	EqualityExpression	errno == EACCES		1268502	0		==			
ANR	1268617	Identifier	errno		1268502	0					
ANR	1268618	Identifier	EACCES		1268502	1					
ANR	1268619	CompoundStatement		26:26:627:627	1268502	1					
ANR	1268620	ExpressionStatement	"_set_priv ( PRIV_ROOT , __FILE__ , __LINE__ , 0 )"	615:5:18497:18540	1268502	0	True				
ANR	1268621	CallExpression	"_set_priv ( PRIV_ROOT , __FILE__ , __LINE__ , 0 )"		1268502	0					
ANR	1268622	Callee	_set_priv		1268502	0					
ANR	1268623	Identifier	_set_priv		1268502	0					
ANR	1268624	ArgumentList	PRIV_ROOT		1268502	1					
ANR	1268625	Argument	PRIV_ROOT		1268502	0					
ANR	1268626	Identifier	PRIV_ROOT		1268502	0					
ANR	1268627	Argument	__FILE__		1268502	1					
ANR	1268628	Identifier	__FILE__		1268502	0					
ANR	1268629	Argument	__LINE__		1268502	2					
ANR	1268630	Identifier	__LINE__		1268502	0					
ANR	1268631	Argument	0		1268502	3					
ANR	1268632	PrimaryExpression	0		1268502	0					
ANR	1268633	IfStatement	"if ( mkdir ( dirpath , 0777 ) < 0 )"		1268502	1					
ANR	1268634	Condition	"mkdir ( dirpath , 0777 ) < 0"	616:9:18551:18574	1268502	0	True				
ANR	1268635	RelationalExpression	"mkdir ( dirpath , 0777 ) < 0"		1268502	0		<			
ANR	1268636	CallExpression	"mkdir ( dirpath , 0777 )"		1268502	0					
ANR	1268637	Callee	mkdir		1268502	0					
ANR	1268638	Identifier	mkdir		1268502	0					
ANR	1268639	ArgumentList	dirpath		1268502	1					
ANR	1268640	Argument	dirpath		1268502	0					
ANR	1268641	Identifier	dirpath		1268502	0					
ANR	1268642	Argument	0777		1268502	1					
ANR	1268643	PrimaryExpression	0777		1268502	0					
ANR	1268644	PrimaryExpression	0		1268502	1					
ANR	1268645	CompoundStatement		29:36:740:740	1268502	1					
ANR	1268646	Statement	fprintf	618:6:18623:18629	1268502	0	True				
ANR	1268647	Statement	(	618:13:18630:18630	1268502	1	True				
ANR	1268648	Statement	stderr	618:15:18632:18637	1268502	2	True				
ANR	1268649	Statement	","	618:21:18638:18638	1268502	3	True				
ANR	1268650	Statement	"""Can't create lock directory \\""%s\\"", """	618:23:18640:18677	1268502	4	True				
ANR	1268651	Statement	"""errno: %d (%s)\\n"""	619:9:18688:18705	1268502	5	True				
ANR	1268652	Statement	","	619:27:18706:18706	1268502	6	True				
ANR	1268653	Statement	dirpath	619:29:18708:18714	1268502	7	True				
ANR	1268654	Statement	","	619:36:18715:18715	1268502	8	True				
ANR	1268655	Statement	errno	619:38:18717:18721	1268502	9	True				
ANR	1268656	Statement	","	619:43:18722:18722	1268502	10	True				
ANR	1268657	Statement	strerror	620:9:18734:18741	1268502	11	True				
ANR	1268658	Statement	(	620:17:18742:18742	1268502	12	True				
ANR	1268659	Statement	errno	620:18:18743:18747	1268502	13	True				
ANR	1268660	Statement	)	620:23:18748:18748	1268502	14	True				
ANR	1268661	Statement	)	620:25:18750:18750	1268502	15	True				
ANR	1268662	ExpressionStatement		620:26:18751:18751	1268502	16	True				
ANR	1268663	ElseStatement	else		1268502	0					
ANR	1268664	CompoundStatement		34:12:927:927	1268502	0					
ANR	1268665	ExpressionStatement	"chown ( dirpath , get_condor_uid ( ) , get_condor_gid ( ) )"	626:6:18917:18979	1268502	0	True				
ANR	1268666	CallExpression	"chown ( dirpath , get_condor_uid ( ) , get_condor_gid ( ) )"		1268502	0					
ANR	1268667	Callee	chown		1268502	0					
ANR	1268668	Identifier	chown		1268502	0					
ANR	1268669	ArgumentList	dirpath		1268502	1					
ANR	1268670	Argument	dirpath		1268502	0					
ANR	1268671	Identifier	dirpath		1268502	0					
ANR	1268672	Argument	get_condor_uid ( )		1268502	1					
ANR	1268673	CallExpression	get_condor_uid ( )		1268502	0					
ANR	1268674	Callee	get_condor_uid		1268502	0					
ANR	1268675	Identifier	get_condor_uid		1268502	0					
ANR	1268676	ArgumentList			1268502	1					
ANR	1268677	Argument	get_condor_gid ( )		1268502	2					
ANR	1268678	CallExpression	get_condor_gid ( )		1268502	0					
ANR	1268679	Callee	get_condor_gid		1268502	0					
ANR	1268680	Identifier	get_condor_gid		1268502	0					
ANR	1268681	ArgumentList			1268502	1					
ANR	1268682	ExpressionStatement	retry = 1	629:6:18994:19003	1268502	1	True				
ANR	1268683	AssignmentExpression	retry = 1		1268502	0		=			
ANR	1268684	Identifier	retry		1268502	0					
ANR	1268685	PrimaryExpression	1		1268502	1					
ANR	1268686	ExpressionStatement	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"	631:5:19017:19062	1268502	2	True				
ANR	1268687	CallExpression	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1268502	0					
ANR	1268688	Callee	_set_priv		1268502	0					
ANR	1268689	Identifier	_set_priv		1268502	0					
ANR	1268690	ArgumentList	PRIV_CONDOR		1268502	1					
ANR	1268691	Argument	PRIV_CONDOR		1268502	0					
ANR	1268692	Identifier	PRIV_CONDOR		1268502	0					
ANR	1268693	Argument	__FILE__		1268502	1					
ANR	1268694	Identifier	__FILE__		1268502	0					
ANR	1268695	Argument	__LINE__		1268502	2					
ANR	1268696	Identifier	__LINE__		1268502	0					
ANR	1268697	Argument	0		1268502	3					
ANR	1268698	PrimaryExpression	0		1268502	0					
ANR	1268699	ElseStatement	else		1268502	0					
ANR	1268700	CompoundStatement		45:11:1237:1237	1268502	0					
ANR	1268701	Statement	fprintf	634:5:19133:19139	1268502	0	True				
ANR	1268702	Statement	(	634:12:19140:19140	1268502	1	True				
ANR	1268703	Statement	stderr	634:14:19142:19147	1268502	2	True				
ANR	1268704	Statement	","	634:20:19148:19148	1268502	3	True				
ANR	1268705	Statement	"""Can't create lock directory: \\""%s\\"""""	634:22:19150:19186	1268502	4	True				
ANR	1268706	Statement	"""errno: %d (%s)\\n"""	635:8:19196:19213	1268502	5	True				
ANR	1268707	Statement	","	635:26:19214:19214	1268502	6	True				
ANR	1268708	Statement	dirpath	635:28:19216:19222	1268502	7	True				
ANR	1268709	Statement	","	635:35:19223:19223	1268502	8	True				
ANR	1268710	Statement	errno	635:37:19225:19229	1268502	9	True				
ANR	1268711	Statement	","	635:42:19230:19230	1268502	10	True				
ANR	1268712	Statement	strerror	636:8:19241:19248	1268502	11	True				
ANR	1268713	Statement	(	636:16:19249:19249	1268502	12	True				
ANR	1268714	Statement	errno	636:17:19250:19254	1268502	13	True				
ANR	1268715	Statement	)	636:22:19255:19255	1268502	14	True				
ANR	1268716	Statement	)	636:24:19257:19257	1268502	15	True				
ANR	1268717	ExpressionStatement		636:25:19258:19258	1268502	16	True				
ANR	1268718	ElseStatement	else		1268502	0					
ANR	1268719	CompoundStatement		51:10:1445:1445	1268502	0					
ANR	1268720	ExpressionStatement	retry = 1	641:4:19382:19391	1268502	0	True				
ANR	1268721	AssignmentExpression	retry = 1		1268502	0		=			
ANR	1268722	Identifier	retry		1268502	0					
ANR	1268723	PrimaryExpression	1		1268502	1					
ANR	1268724	ExpressionStatement	free ( dirpath )	645:3:19473:19488	1268502	3	True				
ANR	1268725	CallExpression	free ( dirpath )		1268502	0					
ANR	1268726	Callee	free		1268502	0					
ANR	1268727	Identifier	free		1268502	0					
ANR	1268728	ArgumentList	dirpath		1268502	1					
ANR	1268729	Argument	dirpath		1268502	0					
ANR	1268730	Identifier	dirpath		1268502	0					
ANR	1268731	IfStatement	if ( retry )		1268502	2					
ANR	1268732	Condition	retry	647:6:19500:19504	1268502	0	True				
ANR	1268733	Identifier	retry		1268502	0					
ANR	1268734	CompoundStatement		60:14:1670:1670	1268502	1					
ANR	1268735	ExpressionStatement	"lock_fd = safe_open_wrapper_follow ( filename , flags , perm )"	648:3:19513:19568	1268502	0	True				
ANR	1268736	AssignmentExpression	"lock_fd = safe_open_wrapper_follow ( filename , flags , perm )"		1268502	0		=			
ANR	1268737	Identifier	lock_fd		1268502	0					
ANR	1268738	CallExpression	"safe_open_wrapper_follow ( filename , flags , perm )"		1268502	1					
ANR	1268739	Callee	safe_open_wrapper_follow		1268502	0					
ANR	1268740	Identifier	safe_open_wrapper_follow		1268502	0					
ANR	1268741	ArgumentList	filename		1268502	1					
ANR	1268742	Argument	filename		1268502	0					
ANR	1268743	Identifier	filename		1268502	0					
ANR	1268744	Argument	flags		1268502	1					
ANR	1268745	Identifier	flags		1268502	0					
ANR	1268746	Argument	perm		1268502	2					
ANR	1268747	Identifier	perm		1268502	0					
ANR	1268748	IfStatement	if ( lock_fd < 0 )		1268502	1					
ANR	1268749	Condition	lock_fd < 0	649:7:19577:19587	1268502	0	True				
ANR	1268750	RelationalExpression	lock_fd < 0		1268502	0		<			
ANR	1268751	Identifier	lock_fd		1268502	0					
ANR	1268752	PrimaryExpression	0		1268502	1					
ANR	1268753	CompoundStatement		62:21:1753:1753	1268502	1					
ANR	1268754	ExpressionStatement	save_errno = errno	650:4:19597:19615	1268502	0	True				
ANR	1268755	AssignmentExpression	save_errno = errno		1268502	0		=			
ANR	1268756	Identifier	save_errno		1268502	0					
ANR	1268757	Identifier	errno		1268502	1					
ANR	1268758	ExpressionStatement	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"	655:1:19631:19669	1268502	9	True				
ANR	1268759	CallExpression	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"		1268502	0					
ANR	1268760	Callee	_set_priv		1268502	0					
ANR	1268761	Identifier	_set_priv		1268502	0					
ANR	1268762	ArgumentList	priv		1268502	1					
ANR	1268763	Argument	priv		1268502	0					
ANR	1268764	Identifier	priv		1268502	0					
ANR	1268765	Argument	__FILE__		1268502	1					
ANR	1268766	Identifier	__FILE__		1268502	0					
ANR	1268767	Argument	__LINE__		1268502	2					
ANR	1268768	Identifier	__LINE__		1268502	0					
ANR	1268769	Argument	0		1268502	3					
ANR	1268770	PrimaryExpression	0		1268502	0					
ANR	1268771	IfStatement	if ( lock_fd < 0 )		1268502	10					
ANR	1268772	Condition	lock_fd < 0	657:5:19677:19687	1268502	0	True				
ANR	1268773	RelationalExpression	lock_fd < 0		1268502	0		<			
ANR	1268774	Identifier	lock_fd		1268502	0					
ANR	1268775	PrimaryExpression	0		1268502	1					
ANR	1268776	CompoundStatement		70:19:1853:1853	1268502	1					
ANR	1268777	ExpressionStatement	errno = save_errno	658:2:19695:19713	1268502	0	True				
ANR	1268778	AssignmentExpression	errno = save_errno		1268502	0		=			
ANR	1268779	Identifier	errno		1268502	0					
ANR	1268780	Identifier	save_errno		1268502	1					
ANR	1268781	ReturnStatement	return lock_fd ;	660:1:19719:19733	1268502	11	True				
ANR	1268782	Identifier	lock_fd		1268502	0					
ANR	1268783	ReturnType	int		1268502	1					
ANR	1268784	Identifier	_condor_open_lock_file		1268502	2					
ANR	1268785	ParameterList	"const char * filename , int flags , mode_t perm"		1268502	3					
ANR	1268786	Parameter	const char * filename	587:23:17792:17811	1268502	0	True				
ANR	1268787	ParameterType	const char *		1268502	0					
ANR	1268788	Identifier	filename		1268502	1					
ANR	1268789	Parameter	int flags	587:44:17813:17821	1268502	1	True				
ANR	1268790	ParameterType	int		1268502	0					
ANR	1268791	Identifier	flags		1268502	1					
ANR	1268792	Parameter	mode_t perm	587:55:17824:17834	1268502	2	True				
ANR	1268793	ParameterType	mode_t		1268502	0					
ANR	1268794	Identifier	perm		1268502	1					
ANR	1268795	CFGEntryNode	ENTRY		1268502		True				
ANR	1268796	CFGExitNode	EXIT		1268502		True				
ANR	1268797	Symbol	lock_fd		1268502						
ANR	1268798	Symbol	errno		1268502						
ANR	1268799	Symbol	NULL		1268502						
ANR	1268800	Symbol	safe_open_wrapper_follow		1268502						
ANR	1268801	Symbol	perm		1268502						
ANR	1268802	Symbol	dirpath		1268502						
ANR	1268803	Symbol	__FILE__		1268502						
ANR	1268804	Symbol	flags		1268502						
ANR	1268805	Symbol	_set_priv		1268502						
ANR	1268806	Symbol	condor_dirname		1268502						
ANR	1268807	Symbol	save_errno		1268502						
ANR	1268808	Symbol	ENOENT		1268502						
ANR	1268809	Symbol	__LINE__		1268502						
ANR	1268810	Symbol	filename		1268502						
ANR	1268811	Symbol	get_condor_uid		1268502						
ANR	1268812	Symbol	PRIV_ROOT		1268502						
ANR	1268813	Symbol	get_condor_gid		1268502						
ANR	1268814	Symbol	priv		1268502						
ANR	1268815	Symbol	EACCES		1268502						
ANR	1268816	Symbol	PRIV_CONDOR		1268502						
ANR	1268817	Symbol	mkdir		1268502						
ANR	1268818	Symbol	retry		1268502						
ANR	1268819	Function	debug_open_lock	667:0:19861:21738							
ANR	1268820	FunctionDef	debug_open_lock ()		1268819	0					
ANR	1268821	CompoundStatement		669:0:19895:21738	1268819	0					
ANR	1268822	IdentifierDeclStatement	int save_errno ;	670:1:19898:19912	1268819	0	True				
ANR	1268823	IdentifierDecl	save_errno		1268819	0					
ANR	1268824	IdentifierDeclType	int		1268819	0					
ANR	1268825	Identifier	save_errno		1268819	1					
ANR	1268826	IdentifierDeclStatement	char msg_buf [ DPRINTF_ERR_MAX ] ;	671:1:19915:19944	1268819	1	True				
ANR	1268827	IdentifierDecl	msg_buf [ DPRINTF_ERR_MAX ]		1268819	0					
ANR	1268828	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1268819	0					
ANR	1268829	Identifier	msg_buf		1268819	1					
ANR	1268830	Identifier	DPRINTF_ERR_MAX		1268819	2					
ANR	1268831	IdentifierDeclStatement	struct stat fstatus ;	672:1:19947:19966	1268819	2	True				
ANR	1268832	IdentifierDecl	fstatus		1268819	0					
ANR	1268833	IdentifierDeclType	struct stat		1268819	0					
ANR	1268834	Identifier	fstatus		1268819	1					
ANR	1268835	IdentifierDeclStatement	"time_t start_time , end_time ;"	673:1:19969:19995	1268819	3	True				
ANR	1268836	IdentifierDecl	start_time		1268819	0					
ANR	1268837	IdentifierDeclType	time_t		1268819	0					
ANR	1268838	Identifier	start_time		1268819	1					
ANR	1268839	IdentifierDecl	end_time		1268819	1					
ANR	1268840	IdentifierDeclType	time_t		1268819	0					
ANR	1268841	Identifier	end_time		1268819	1					
ANR	1268842	IfStatement	if ( use_kernel_mutex == - 1 )		1268819	4					
ANR	1268843	Condition	use_kernel_mutex == - 1	675:6:20004:20025	1268819	0	True				
ANR	1268844	EqualityExpression	use_kernel_mutex == - 1		1268819	0		==			
ANR	1268845	Identifier	use_kernel_mutex		1268819	0					
ANR	1268846	UnaryOperationExpression	- 1		1268819	1					
ANR	1268847	UnaryOperator	-		1268819	0					
ANR	1268848	PrimaryExpression	1		1268819	1					
ANR	1268849	CompoundStatement		7:31:133:133	1268819	1					
ANR	1268850	ExpressionStatement	"use_kernel_mutex = dprintf_param_funcs -> param_boolean_int ( ""FILE_LOCK_VIA_MUTEX"" , TRUE )"	678:2:20083:20169	1268819	0	True				
ANR	1268851	AssignmentExpression	"use_kernel_mutex = dprintf_param_funcs -> param_boolean_int ( ""FILE_LOCK_VIA_MUTEX"" , TRUE )"		1268819	0		=			
ANR	1268852	Identifier	use_kernel_mutex		1268819	0					
ANR	1268853	CallExpression	"dprintf_param_funcs -> param_boolean_int ( ""FILE_LOCK_VIA_MUTEX"" , TRUE )"		1268819	1					
ANR	1268854	Callee	dprintf_param_funcs -> param_boolean_int		1268819	0					
ANR	1268855	PtrMemberAccess	dprintf_param_funcs -> param_boolean_int		1268819	0					
ANR	1268856	Identifier	dprintf_param_funcs		1268819	0					
ANR	1268857	Identifier	param_boolean_int		1268819	1					
ANR	1268858	ArgumentList	"""FILE_LOCK_VIA_MUTEX"""		1268819	1					
ANR	1268859	Argument	"""FILE_LOCK_VIA_MUTEX"""		1268819	0					
ANR	1268860	PrimaryExpression	"""FILE_LOCK_VIA_MUTEX"""		1268819	0					
ANR	1268861	Argument	TRUE		1268819	1					
ANR	1268862	Identifier	TRUE		1268819	0					
ANR	1268863	IfStatement	if ( DebugLock )		1268819	5					
ANR	1268864	Condition	DebugLock	690:5:20552:20560	1268819	0	True				
ANR	1268865	Identifier	DebugLock		1268819	0					
ANR	1268866	CompoundStatement		22:17:668:668	1268819	1					
ANR	1268867	IfStatement	if ( use_kernel_mutex == FALSE )		1268819	0					
ANR	1268868	Condition	use_kernel_mutex == FALSE	691:6:20572:20596	1268819	0	True				
ANR	1268869	EqualityExpression	use_kernel_mutex == FALSE		1268819	0		==			
ANR	1268870	Identifier	use_kernel_mutex		1268819	0					
ANR	1268871	Identifier	FALSE		1268819	1					
ANR	1268872	CompoundStatement		23:33:703:703	1268819	1					
ANR	1268873	IfStatement	if ( LockFd > 0 )		1268819	0					
ANR	1268874	Condition	LockFd > 0	692:7:20608:20617	1268819	0	True				
ANR	1268875	RelationalExpression	LockFd > 0		1268819	0		>			
ANR	1268876	Identifier	LockFd		1268819	0					
ANR	1268877	PrimaryExpression	0		1268819	1					
ANR	1268878	CompoundStatement		24:20:725:725	1268819	1					
ANR	1268879	ExpressionStatement	"fstat ( LockFd , & fstatus )"	693:4:20627:20650	1268819	0	True				
ANR	1268880	CallExpression	"fstat ( LockFd , & fstatus )"		1268819	0					
ANR	1268881	Callee	fstat		1268819	0					
ANR	1268882	Identifier	fstat		1268819	0					
ANR	1268883	ArgumentList	LockFd		1268819	1					
ANR	1268884	Argument	LockFd		1268819	0					
ANR	1268885	Identifier	LockFd		1268819	0					
ANR	1268886	Argument	& fstatus		1268819	1					
ANR	1268887	UnaryOperationExpression	& fstatus		1268819	0					
ANR	1268888	UnaryOperator	&		1268819	0					
ANR	1268889	Identifier	fstatus		1268819	1					
ANR	1268890	IfStatement	if ( fstatus . st_nlink == 0 )		1268819	1					
ANR	1268891	Condition	fstatus . st_nlink == 0	694:8:20660:20680	1268819	0	True				
ANR	1268892	EqualityExpression	fstatus . st_nlink == 0		1268819	0		==			
ANR	1268893	MemberAccess	fstatus . st_nlink		1268819	0					
ANR	1268894	Identifier	fstatus		1268819	0					
ANR	1268895	Identifier	st_nlink		1268819	1					
ANR	1268896	PrimaryExpression	0		1268819	1					
ANR	1268897	CompoundStatement		26:30:786:786	1268819	1					
ANR	1268898	ExpressionStatement	close ( LockFd )	695:5:20689:20702	1268819	0	True				
ANR	1268899	CallExpression	close ( LockFd )		1268819	0					
ANR	1268900	Callee	close		1268819	0					
ANR	1268901	Identifier	close		1268819	0					
ANR	1268902	ArgumentList	LockFd		1268819	1					
ANR	1268903	Argument	LockFd		1268819	0					
ANR	1268904	Identifier	LockFd		1268819	0					
ANR	1268905	ExpressionStatement	LockFd = - 1	696:5:20709:20720	1268819	1	True				
ANR	1268906	AssignmentExpression	LockFd = - 1		1268819	0		=			
ANR	1268907	Identifier	LockFd		1268819	0					
ANR	1268908	UnaryOperationExpression	- 1		1268819	1					
ANR	1268909	UnaryOperator	-		1268819	0					
ANR	1268910	PrimaryExpression	1		1268819	1					
ANR	1268911	IfStatement	if ( LockFd < 0 )		1268819	1					
ANR	1268912	Condition	LockFd < 0	699:7:20741:20750	1268819	0	True				
ANR	1268913	RelationalExpression	LockFd < 0		1268819	0		<			
ANR	1268914	Identifier	LockFd		1268819	0					
ANR	1268915	PrimaryExpression	0		1268819	1					
ANR	1268916	CompoundStatement		31:19:857:857	1268819	1					
ANR	1268917	ExpressionStatement	"LockFd = _condor_open_lock_file ( DebugLock , O_CREAT | O_WRONLY , 0660 )"	700:4:20759:20823	1268819	0	True				
ANR	1268918	AssignmentExpression	"LockFd = _condor_open_lock_file ( DebugLock , O_CREAT | O_WRONLY , 0660 )"		1268819	0		=			
ANR	1268919	Identifier	LockFd		1268819	0					
ANR	1268920	CallExpression	"_condor_open_lock_file ( DebugLock , O_CREAT | O_WRONLY , 0660 )"		1268819	1					
ANR	1268921	Callee	_condor_open_lock_file		1268819	0					
ANR	1268922	Identifier	_condor_open_lock_file		1268819	0					
ANR	1268923	ArgumentList	DebugLock		1268819	1					
ANR	1268924	Argument	DebugLock		1268819	0					
ANR	1268925	Identifier	DebugLock		1268819	0					
ANR	1268926	Argument	O_CREAT | O_WRONLY		1268819	1					
ANR	1268927	InclusiveOrExpression	O_CREAT | O_WRONLY		1268819	0		|			
ANR	1268928	Identifier	O_CREAT		1268819	0					
ANR	1268929	Identifier	O_WRONLY		1268819	1					
ANR	1268930	Argument	0660		1268819	2					
ANR	1268931	PrimaryExpression	0660		1268819	0					
ANR	1268932	IfStatement	if ( LockFd < 0 )		1268819	1					
ANR	1268933	Condition	LockFd < 0	701:8:20833:20842	1268819	0	True				
ANR	1268934	RelationalExpression	LockFd < 0		1268819	0		<			
ANR	1268935	Identifier	LockFd		1268819	0					
ANR	1268936	PrimaryExpression	0		1268819	1					
ANR	1268937	CompoundStatement		33:21:950:950	1268819	1					
ANR	1268938	ExpressionStatement	save_errno = errno	702:5:20853:20871	1268819	0	True				
ANR	1268939	AssignmentExpression	save_errno = errno		1268819	0		=			
ANR	1268940	Identifier	save_errno		1268819	0					
ANR	1268941	Identifier	errno		1268819	1					
ANR	1268942	ExpressionStatement	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't open \\""%s\\""\\n"" , DebugLock )"	703:5:20878:20948	1268819	1	True				
ANR	1268943	CallExpression	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't open \\""%s\\""\\n"" , DebugLock )"		1268819	0					
ANR	1268944	Callee	snprintf		1268819	0					
ANR	1268945	Identifier	snprintf		1268819	0					
ANR	1268946	ArgumentList	msg_buf		1268819	1					
ANR	1268947	Argument	msg_buf		1268819	0					
ANR	1268948	Identifier	msg_buf		1268819	0					
ANR	1268949	Argument	sizeof ( msg_buf )		1268819	1					
ANR	1268950	SizeofExpression	sizeof ( msg_buf )		1268819	0					
ANR	1268951	Sizeof	sizeof		1268819	0					
ANR	1268952	SizeofOperand	msg_buf		1268819	1					
ANR	1268953	Argument	"""Can't open \\""%s\\""\\n"""		1268819	2					
ANR	1268954	PrimaryExpression	"""Can't open \\""%s\\""\\n"""		1268819	0					
ANR	1268955	Argument	DebugLock		1268819	3					
ANR	1268956	Identifier	DebugLock		1268819	0					
ANR	1268957	ExpressionStatement	"_condor_dprintf_exit ( save_errno , msg_buf )"	704:5:20955:20998	1268819	2	True				
ANR	1268958	CallExpression	"_condor_dprintf_exit ( save_errno , msg_buf )"		1268819	0					
ANR	1268959	Callee	_condor_dprintf_exit		1268819	0					
ANR	1268960	Identifier	_condor_dprintf_exit		1268819	0					
ANR	1268961	ArgumentList	save_errno		1268819	1					
ANR	1268962	Argument	save_errno		1268819	0					
ANR	1268963	Identifier	save_errno		1268819	0					
ANR	1268964	Argument	msg_buf		1268819	1					
ANR	1268965	Identifier	msg_buf		1268819	0					
ANR	1268966	ExpressionStatement	start_time = time ( NULL )	709:2:21020:21043	1268819	1	True				
ANR	1268967	AssignmentExpression	start_time = time ( NULL )		1268819	0		=			
ANR	1268968	Identifier	start_time		1268819	0					
ANR	1268969	CallExpression	time ( NULL )		1268819	1					
ANR	1268970	Callee	time		1268819	0					
ANR	1268971	Identifier	time		1268819	0					
ANR	1268972	ArgumentList	NULL		1268819	1					
ANR	1268973	Argument	NULL		1268819	0					
ANR	1268974	Identifier	NULL		1268819	0					
ANR	1268975	IfStatement	if ( DebugLockDelayPeriodStarted == 0 )		1268819	2					
ANR	1268976	Condition	DebugLockDelayPeriodStarted == 0	710:6:21051:21082	1268819	0	True				
ANR	1268977	EqualityExpression	DebugLockDelayPeriodStarted == 0		1268819	0		==			
ANR	1268978	Identifier	DebugLockDelayPeriodStarted		1268819	0					
ANR	1268979	PrimaryExpression	0		1268819	1					
ANR	1268980	CompoundStatement		42:41:1190:1190	1268819	1					
ANR	1268981	ExpressionStatement	DebugLockDelayPeriodStarted = start_time	711:3:21091:21131	1268819	0	True				
ANR	1268982	AssignmentExpression	DebugLockDelayPeriodStarted = start_time		1268819	0		=			
ANR	1268983	Identifier	DebugLockDelayPeriodStarted		1268819	0					
ANR	1268984	Identifier	start_time		1268819	1					
ANR	1268985	ExpressionStatement	errno = 0	714:2:21140:21149	1268819	3	True				
ANR	1268986	AssignmentExpression	errno = 0		1268819	0		=			
ANR	1268987	Identifier	errno		1268819	0					
ANR	1268988	PrimaryExpression	0		1268819	1					
ANR	1268989	IfStatement	"if ( lock_or_mutex_file ( LockFd , WRITE_LOCK , TRUE ) < 0 )"		1268819	4					
ANR	1268990	Condition	"lock_or_mutex_file ( LockFd , WRITE_LOCK , TRUE ) < 0"	716:6:21170:21215	1268819	0	True				
ANR	1268991	RelationalExpression	"lock_or_mutex_file ( LockFd , WRITE_LOCK , TRUE ) < 0"		1268819	0		<			
ANR	1268992	CallExpression	"lock_or_mutex_file ( LockFd , WRITE_LOCK , TRUE )"		1268819	0					
ANR	1268993	Callee	lock_or_mutex_file		1268819	0					
ANR	1268994	Identifier	lock_or_mutex_file		1268819	0					
ANR	1268995	ArgumentList	LockFd		1268819	1					
ANR	1268996	Argument	LockFd		1268819	0					
ANR	1268997	Identifier	LockFd		1268819	0					
ANR	1268998	Argument	WRITE_LOCK		1268819	1					
ANR	1268999	Identifier	WRITE_LOCK		1268819	0					
ANR	1269000	Argument	TRUE		1268819	2					
ANR	1269001	Identifier	TRUE		1268819	0					
ANR	1269002	PrimaryExpression	0		1268819	1					
ANR	1269003	CompoundStatement		52:2:1390:1390	1268819	1					
ANR	1269004	ExpressionStatement	save_errno = errno	721:3:21291:21309	1268819	0	True				
ANR	1269005	AssignmentExpression	save_errno = errno		1268819	0		=			
ANR	1269006	Identifier	save_errno		1268819	0					
ANR	1269007	Identifier	errno		1268819	1					
ANR	1269008	Statement	snprintf	722:3:21314:21321	1268819	1	True				
ANR	1269009	Statement	(	722:11:21322:21322	1268819	2	True				
ANR	1269010	Statement	msg_buf	722:13:21324:21330	1268819	3	True				
ANR	1269011	Statement	","	722:20:21331:21331	1268819	4	True				
ANR	1269012	Statement	sizeof	722:22:21333:21338	1268819	5	True				
ANR	1269013	Statement	(	722:28:21339:21339	1268819	6	True				
ANR	1269014	Statement	msg_buf	722:29:21340:21346	1268819	7	True				
ANR	1269015	Statement	)	722:36:21347:21347	1268819	8	True				
ANR	1269016	Statement	","	722:37:21348:21348	1268819	9	True				
ANR	1269017	Statement	"""Can't get exclusive lock on \\""%s\\"", """	722:39:21350:21387	1268819	10	True				
ANR	1269018	Statement	"""LockFd: %d\\n"""	723:6:21395:21408	1268819	11	True				
ANR	1269019	Statement	","	723:20:21409:21409	1268819	12	True				
ANR	1269020	Statement	DebugLock	723:22:21411:21419	1268819	13	True				
ANR	1269021	Statement	","	723:31:21420:21420	1268819	14	True				
ANR	1269022	Statement	LockFd	723:33:21422:21427	1268819	15	True				
ANR	1269023	Statement	)	723:40:21429:21429	1268819	16	True				
ANR	1269024	ExpressionStatement		723:41:21430:21430	1268819	17	True				
ANR	1269025	ExpressionStatement	"_condor_dprintf_exit ( save_errno , msg_buf )"	724:3:21435:21478	1268819	18	True				
ANR	1269026	CallExpression	"_condor_dprintf_exit ( save_errno , msg_buf )"		1268819	0					
ANR	1269027	Callee	_condor_dprintf_exit		1268819	0					
ANR	1269028	Identifier	_condor_dprintf_exit		1268819	0					
ANR	1269029	ArgumentList	save_errno		1268819	1					
ANR	1269030	Argument	save_errno		1268819	0					
ANR	1269031	Identifier	save_errno		1268819	0					
ANR	1269032	Argument	msg_buf		1268819	1					
ANR	1269033	Identifier	msg_buf		1268819	0					
ANR	1269034	ExpressionStatement	DebugIsLocked = 1	727:2:21487:21504	1268819	5	True				
ANR	1269035	AssignmentExpression	DebugIsLocked = 1		1268819	0		=			
ANR	1269036	Identifier	DebugIsLocked		1268819	0					
ANR	1269037	PrimaryExpression	1		1268819	1					
ANR	1269038	ExpressionStatement	end_time = time ( NULL )	732:2:21632:21653	1268819	6	True				
ANR	1269039	AssignmentExpression	end_time = time ( NULL )		1268819	0		=			
ANR	1269040	Identifier	end_time		1268819	0					
ANR	1269041	CallExpression	time ( NULL )		1268819	1					
ANR	1269042	Callee	time		1268819	0					
ANR	1269043	Identifier	time		1268819	0					
ANR	1269044	ArgumentList	NULL		1268819	1					
ANR	1269045	Argument	NULL		1268819	0					
ANR	1269046	Identifier	NULL		1268819	0					
ANR	1269047	IfStatement	if ( end_time - start_time > 1 )		1268819	7					
ANR	1269048	Condition	end_time - start_time > 1	733:6:21661:21683	1268819	0	True				
ANR	1269049	RelationalExpression	end_time - start_time > 1		1268819	0		>			
ANR	1269050	AdditiveExpression	end_time - start_time		1268819	0		-			
ANR	1269051	Identifier	end_time		1268819	0					
ANR	1269052	Identifier	start_time		1268819	1					
ANR	1269053	PrimaryExpression	1		1268819	1					
ANR	1269054	CompoundStatement		65:32:1791:1791	1268819	1					
ANR	1269055	ExpressionStatement	DebugLockDelay += end_time - start_time	734:3:21692:21729	1268819	0	True				
ANR	1269056	AssignmentExpression	DebugLockDelay += end_time - start_time		1268819	0		+=			
ANR	1269057	Identifier	DebugLockDelay		1268819	0					
ANR	1269058	AdditiveExpression	end_time - start_time		1268819	1		-			
ANR	1269059	Identifier	end_time		1268819	0					
ANR	1269060	Identifier	start_time		1268819	1					
ANR	1269061	ReturnType	static void		1268819	1					
ANR	1269062	Identifier	debug_open_lock		1268819	2					
ANR	1269063	ParameterList			1268819	3					
ANR	1269064	CFGEntryNode	ENTRY		1268819		True				
ANR	1269065	CFGExitNode	EXIT		1268819		True				
ANR	1269066	Symbol	DebugIsLocked		1268819						
ANR	1269067	Symbol	dprintf_param_funcs -> param_boolean_int		1268819						
ANR	1269068	Symbol	fstatus . st_nlink		1268819						
ANR	1269069	Symbol	_condor_open_lock_file		1268819						
ANR	1269070	Symbol	O_CREAT		1268819						
ANR	1269071	Symbol	lock_or_mutex_file		1268819						
ANR	1269072	Symbol	save_errno		1268819						
ANR	1269073	Symbol	use_kernel_mutex		1268819						
ANR	1269074	Symbol	& fstatus		1268819						
ANR	1269075	Symbol	DebugLockDelay		1268819						
ANR	1269076	Symbol	DebugLockDelayPeriodStarted		1268819						
ANR	1269077	Symbol	fstatus		1268819						
ANR	1269078	Symbol	LockFd		1268819						
ANR	1269079	Symbol	WRITE_LOCK		1268819						
ANR	1269080	Symbol	dprintf_param_funcs		1268819						
ANR	1269081	Symbol	errno		1268819						
ANR	1269082	Symbol	DebugLock		1268819						
ANR	1269083	Symbol	NULL		1268819						
ANR	1269084	Symbol	end_time		1268819						
ANR	1269085	Symbol	msg_buf		1268819						
ANR	1269086	Symbol	TRUE		1268819						
ANR	1269087	Symbol	start_time		1268819						
ANR	1269088	Symbol	FALSE		1268819						
ANR	1269089	Symbol	time		1268819						
ANR	1269090	Symbol	O_WRONLY		1268819						
ANR	1269091	Symbol	* dprintf_param_funcs		1268819						
ANR	1269092	Function	dprintf_reset_lock_delay	739:0:21741:21834							
ANR	1269093	FunctionDef	dprintf_reset_lock_delay ()		1269092	0					
ANR	1269094	CompoundStatement		739:36:21777:21834	1269092	0					
ANR	1269095	ExpressionStatement	DebugLockDelay = 0	740:1:21780:21798	1269092	0	True				
ANR	1269096	AssignmentExpression	DebugLockDelay = 0		1269092	0		=			
ANR	1269097	Identifier	DebugLockDelay		1269092	0					
ANR	1269098	PrimaryExpression	0		1269092	1					
ANR	1269099	ExpressionStatement	DebugLockDelayPeriodStarted = 0	741:1:21801:21832	1269092	1	True				
ANR	1269100	AssignmentExpression	DebugLockDelayPeriodStarted = 0		1269092	0		=			
ANR	1269101	Identifier	DebugLockDelayPeriodStarted		1269092	0					
ANR	1269102	PrimaryExpression	0		1269092	1					
ANR	1269103	ReturnType	void		1269092	1					
ANR	1269104	Identifier	dprintf_reset_lock_delay		1269092	2					
ANR	1269105	ParameterList			1269092	3					
ANR	1269106	CFGEntryNode	ENTRY		1269092		True				
ANR	1269107	CFGExitNode	EXIT		1269092		True				
ANR	1269108	Symbol	DebugLockDelayPeriodStarted		1269092						
ANR	1269109	Symbol	DebugLockDelay		1269092						
ANR	1269110	Function	dprintf_get_lock_delay	744:0:21837:22032							
ANR	1269111	FunctionDef	dprintf_get_lock_delay ()		1269110	0					
ANR	1269112	CompoundStatement		744:36:21873:22032	1269110	0					
ANR	1269113	IdentifierDeclStatement	time_t now = time ( NULL ) ;	745:1:21876:21899	1269110	0	True				
ANR	1269114	IdentifierDecl	now = time ( NULL )		1269110	0					
ANR	1269115	IdentifierDeclType	time_t		1269110	0					
ANR	1269116	Identifier	now		1269110	1					
ANR	1269117	AssignmentExpression	now = time ( NULL )		1269110	2		=			
ANR	1269118	Identifier	now		1269110	0					
ANR	1269119	CallExpression	time ( NULL )		1269110	1					
ANR	1269120	Callee	time		1269110	0					
ANR	1269121	Identifier	time		1269110	0					
ANR	1269122	ArgumentList	NULL		1269110	1					
ANR	1269123	Argument	NULL		1269110	0					
ANR	1269124	Identifier	NULL		1269110	0					
ANR	1269125	IfStatement	if ( now - DebugLockDelayPeriodStarted <= 0 )		1269110	1					
ANR	1269126	Condition	now - DebugLockDelayPeriodStarted <= 0	746:5:21906:21943	1269110	0	True				
ANR	1269127	RelationalExpression	now - DebugLockDelayPeriodStarted <= 0		1269110	0		<=			
ANR	1269128	AdditiveExpression	now - DebugLockDelayPeriodStarted		1269110	0		-			
ANR	1269129	Identifier	now		1269110	0					
ANR	1269130	Identifier	DebugLockDelayPeriodStarted		1269110	1					
ANR	1269131	PrimaryExpression	0		1269110	1					
ANR	1269132	CompoundStatement		3:46:73:73	1269110	1					
ANR	1269133	ReturnStatement	return 0 ;	747:2:21951:21959	1269110	0	True				
ANR	1269134	PrimaryExpression	0		1269110	0					
ANR	1269135	ReturnStatement	return ( ( double ) DebugLockDelay ) / ( now - DebugLockDelayPeriodStarted ) ;	749:1:21965:22030	1269110	2	True				
ANR	1269136	MultiplicativeExpression	( ( double ) DebugLockDelay ) / ( now - DebugLockDelayPeriodStarted )		1269110	0		/			
ANR	1269137	CastExpression	( double ) DebugLockDelay		1269110	0					
ANR	1269138	CastTarget	double		1269110	0					
ANR	1269139	Identifier	DebugLockDelay		1269110	1					
ANR	1269140	AdditiveExpression	now - DebugLockDelayPeriodStarted		1269110	1		-			
ANR	1269141	Identifier	now		1269110	0					
ANR	1269142	Identifier	DebugLockDelayPeriodStarted		1269110	1					
ANR	1269143	ReturnType	double		1269110	1					
ANR	1269144	Identifier	dprintf_get_lock_delay		1269110	2					
ANR	1269145	ParameterList			1269110	3					
ANR	1269146	CFGEntryNode	ENTRY		1269110		True				
ANR	1269147	CFGExitNode	EXIT		1269110		True				
ANR	1269148	Symbol	DebugLockDelayPeriodStarted		1269110						
ANR	1269149	Symbol	NULL		1269110						
ANR	1269150	Symbol	now		1269110						
ANR	1269151	Symbol	DebugLockDelay		1269110						
ANR	1269152	Symbol	time		1269110						
ANR	1269153	Function	debug_lock	752:0:22035:22718							
ANR	1269154	FunctionDef	"debug_lock (int debug_flags , const char * mode , int force_lock)"		1269153	0					
ANR	1269155	CompoundStatement		754:0:22104:22718	1269153	0					
ANR	1269156	IdentifierDeclStatement	std :: vector < DebugFileInfo > :: iterator it ;	755:1:22107:22146	1269153	0	True				
ANR	1269157	IdentifierDecl	it		1269153	0					
ANR	1269158	IdentifierDeclType	std :: vector < DebugFileInfo > :: iterator		1269153	0					
ANR	1269159	Identifier	it		1269153	1					
ANR	1269160	ForStatement	for ( it = DebugLogs -> begin ( ) ; it < DebugLogs -> end ( ) ; it ++ )		1269153	1					
ANR	1269161	ForInit	it = DebugLogs -> begin ( ) ;	757:5:22154:22177	1269153	0	True				
ANR	1269162	AssignmentExpression	it = DebugLogs -> begin ( )		1269153	0		=			
ANR	1269163	Identifier	it		1269153	0					
ANR	1269164	CallExpression	DebugLogs -> begin ( )		1269153	1					
ANR	1269165	Callee	DebugLogs -> begin		1269153	0					
ANR	1269166	PtrMemberAccess	DebugLogs -> begin		1269153	0					
ANR	1269167	Identifier	DebugLogs		1269153	0					
ANR	1269168	Identifier	begin		1269153	1					
ANR	1269169	ArgumentList			1269153	1					
ANR	1269170	Condition	it < DebugLogs -> end ( )	757:30:22179:22199	1269153	1	True				
ANR	1269171	RelationalExpression	it < DebugLogs -> end ( )		1269153	0		<			
ANR	1269172	Identifier	it		1269153	0					
ANR	1269173	CallExpression	DebugLogs -> end ( )		1269153	1					
ANR	1269174	Callee	DebugLogs -> end		1269153	0					
ANR	1269175	PtrMemberAccess	DebugLogs -> end		1269153	0					
ANR	1269176	Identifier	DebugLogs		1269153	0					
ANR	1269177	Identifier	end		1269153	1					
ANR	1269178	ArgumentList			1269153	1					
ANR	1269179	PostIncDecOperationExpression	it ++	757:53:22202:22205	1269153	2	True				
ANR	1269180	Identifier	it		1269153	0					
ANR	1269181	IncDec	++		1269153	1					
ANR	1269182	CompoundStatement		16:2:459:528	1269153	3					
ANR	1269183	IfStatement	if ( it -> debugFlags != debug_flags )		1269153	0					
ANR	1269184	Condition	it -> debugFlags != debug_flags	764:5:22423:22451	1269153	0	True				
ANR	1269185	EqualityExpression	it -> debugFlags != debug_flags		1269153	0		!=			
ANR	1269186	PtrMemberAccess	it -> debugFlags		1269153	0					
ANR	1269187	Identifier	it		1269153	0					
ANR	1269188	Identifier	debugFlags		1269153	1					
ANR	1269189	Identifier	debug_flags		1269153	1					
ANR	1269190	ContinueStatement	continue ;	765:3:22457:22465	1269153	1	True				
ANR	1269191	IdentifierDeclStatement	bool dont_panic = ( it -> debugFlags != 0 ) || DebugContinueOnOpenFailure ;	769:2:22564:22633	1269153	1	True				
ANR	1269192	IdentifierDecl	dont_panic = ( it -> debugFlags != 0 ) || DebugContinueOnOpenFailure		1269153	0					
ANR	1269193	IdentifierDeclType	bool		1269153	0					
ANR	1269194	Identifier	dont_panic		1269153	1					
ANR	1269195	AssignmentExpression	dont_panic = ( it -> debugFlags != 0 ) || DebugContinueOnOpenFailure		1269153	2		=			
ANR	1269196	Identifier	dont_panic		1269153	0					
ANR	1269197	OrExpression	( it -> debugFlags != 0 ) || DebugContinueOnOpenFailure		1269153	1		||			
ANR	1269198	EqualityExpression	it -> debugFlags != 0		1269153	0		!=			
ANR	1269199	PtrMemberAccess	it -> debugFlags		1269153	0					
ANR	1269200	Identifier	it		1269153	0					
ANR	1269201	Identifier	debugFlags		1269153	1					
ANR	1269202	PrimaryExpression	0		1269153	1					
ANR	1269203	Identifier	DebugContinueOnOpenFailure		1269153	1					
ANR	1269204	ReturnStatement	"return debug_lock_it ( & ( * it ) , mode , force_lock , dont_panic ) ;"	771:2:22638:22696	1269153	2	True				
ANR	1269205	CallExpression	"debug_lock_it ( & ( * it ) , mode , force_lock , dont_panic )"		1269153	0					
ANR	1269206	Callee	debug_lock_it		1269153	0					
ANR	1269207	Identifier	debug_lock_it		1269153	0					
ANR	1269208	ArgumentList	& ( * it )		1269153	1					
ANR	1269209	Argument	& ( * it )		1269153	0					
ANR	1269210	UnaryOperationExpression	& ( * it )		1269153	0					
ANR	1269211	UnaryOperator	&		1269153	0					
ANR	1269212	UnaryOperationExpression	* it		1269153	1					
ANR	1269213	UnaryOperator	*		1269153	0					
ANR	1269214	Identifier	it		1269153	1					
ANR	1269215	Argument	mode		1269153	1					
ANR	1269216	Identifier	mode		1269153	0					
ANR	1269217	Argument	force_lock		1269153	2					
ANR	1269218	Identifier	force_lock		1269153	0					
ANR	1269219	Argument	dont_panic		1269153	3					
ANR	1269220	Identifier	dont_panic		1269153	0					
ANR	1269221	ReturnStatement	return stderr ;	774:1:22703:22716	1269153	2	True				
ANR	1269222	Identifier	stderr		1269153	0					
ANR	1269223	ReturnType	FILE *		1269153	1					
ANR	1269224	Identifier	debug_lock		1269153	2					
ANR	1269225	ParameterList	"int debug_flags , const char * mode , int force_lock"		1269153	3					
ANR	1269226	Parameter	int debug_flags	753:11:22053:22067	1269153	0	True				
ANR	1269227	ParameterType	int		1269153	0					
ANR	1269228	Identifier	debug_flags		1269153	1					
ANR	1269229	Parameter	const char * mode	753:28:22070:22085	1269153	1	True				
ANR	1269230	ParameterType	const char *		1269153	0					
ANR	1269231	Identifier	mode		1269153	1					
ANR	1269232	Parameter	int force_lock	753:46:22088:22101	1269153	2	True				
ANR	1269233	ParameterType	int		1269153	0					
ANR	1269234	Identifier	force_lock		1269153	1					
ANR	1269235	CFGEntryNode	ENTRY		1269153		True				
ANR	1269236	CFGExitNode	EXIT		1269153		True				
ANR	1269237	Symbol	DebugLogs -> end		1269153						
ANR	1269238	Symbol	debug_flags		1269153						
ANR	1269239	Symbol	it -> debugFlags		1269153						
ANR	1269240	Symbol	DebugContinueOnOpenFailure		1269153						
ANR	1269241	Symbol	it		1269153						
ANR	1269242	Symbol	stderr		1269153						
ANR	1269243	Symbol	dont_panic		1269153						
ANR	1269244	Symbol	mode		1269153						
ANR	1269245	Symbol	* it		1269153						
ANR	1269246	Symbol	debug_lock_it		1269153						
ANR	1269247	Symbol	force_lock		1269153						
ANR	1269248	Symbol	DebugLogs -> begin		1269153						
ANR	1269249	Symbol	* DebugLogs		1269153						
ANR	1269250	Symbol	DebugLogs		1269153						
ANR	1269251	Function	debug_lock_it	777:0:22721:25704							
ANR	1269252	FunctionDef	"debug_lock_it (struct DebugFileInfo * it , const char * mode , int force_lock , bool dont_panic)"		1269251	0					
ANR	1269253	CompoundStatement		779:0:22826:25704	1269251	0					
ANR	1269254	IdentifierDeclStatement	off_t length = 0 ;	780:1:22829:22846	1269251	0	True				
ANR	1269255	IdentifierDecl	length = 0		1269251	0					
ANR	1269256	IdentifierDeclType	off_t		1269251	0					
ANR	1269257	Identifier	length		1269251	1					
ANR	1269258	AssignmentExpression	length = 0		1269251	2		=			
ANR	1269259	Identifier	length		1269251	0					
ANR	1269260	PrimaryExpression	0		1269251	1					
ANR	1269261	IdentifierDeclStatement	priv_state priv ;	781:1:22897:22912	1269251	1	True				
ANR	1269262	IdentifierDecl	priv		1269251	0					
ANR	1269263	IdentifierDeclType	priv_state		1269251	0					
ANR	1269264	Identifier	priv		1269251	1					
ANR	1269265	IdentifierDeclStatement	int save_errno ;	782:1:22915:22929	1269251	2	True				
ANR	1269266	IdentifierDecl	save_errno		1269251	0					
ANR	1269267	IdentifierDeclType	int		1269251	0					
ANR	1269268	Identifier	save_errno		1269251	1					
ANR	1269269	IdentifierDeclStatement	char msg_buf [ DPRINTF_ERR_MAX ] ;	783:1:22932:22961	1269251	3	True				
ANR	1269270	IdentifierDecl	msg_buf [ DPRINTF_ERR_MAX ]		1269251	0					
ANR	1269271	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1269251	0					
ANR	1269272	Identifier	msg_buf		1269251	1					
ANR	1269273	Identifier	DPRINTF_ERR_MAX		1269251	2					
ANR	1269274	IdentifierDeclStatement	int locked = 0 ;	784:1:22964:22978	1269251	4	True				
ANR	1269275	IdentifierDecl	locked = 0		1269251	0					
ANR	1269276	IdentifierDeclType	int		1269251	0					
ANR	1269277	Identifier	locked		1269251	1					
ANR	1269278	AssignmentExpression	locked = 0		1269251	2		=			
ANR	1269279	Identifier	locked		1269251	0					
ANR	1269280	PrimaryExpression	0		1269251	1					
ANR	1269281	IdentifierDeclStatement	FILE * debug_file_ptr = it -> debugFP ;	785:1:22981:23015	1269251	5	True				
ANR	1269282	IdentifierDecl	* debug_file_ptr = it -> debugFP		1269251	0					
ANR	1269283	IdentifierDeclType	FILE *		1269251	0					
ANR	1269284	Identifier	debug_file_ptr		1269251	1					
ANR	1269285	AssignmentExpression	* debug_file_ptr = it -> debugFP		1269251	2		=			
ANR	1269286	Identifier	debug_file_ptr		1269251	0					
ANR	1269287	PtrMemberAccess	it -> debugFP		1269251	1					
ANR	1269288	Identifier	it		1269251	0					
ANR	1269289	Identifier	debugFP		1269251	1					
ANR	1269290	IfStatement	if ( mode == NULL )		1269251	6					
ANR	1269291	Condition	mode == NULL	787:6:23024:23035	1269251	0	True				
ANR	1269292	EqualityExpression	mode == NULL		1269251	0		==			
ANR	1269293	Identifier	mode		1269251	0					
ANR	1269294	Identifier	NULL		1269251	1					
ANR	1269295	CompoundStatement		9:21:212:212	1269251	1					
ANR	1269296	ExpressionStatement	"mode = ""aN"""	788:2:23043:23054	1269251	0	True				
ANR	1269297	AssignmentExpression	"mode = ""aN"""		1269251	0		=			
ANR	1269298	Identifier	mode		1269251	0					
ANR	1269299	PrimaryExpression	"""aN"""		1269251	1					
ANR	1269300	ExpressionStatement	errno = 0	791:1:23061:23070	1269251	7	True				
ANR	1269301	AssignmentExpression	errno = 0		1269251	0		=			
ANR	1269302	Identifier	errno		1269251	0					
ANR	1269303	PrimaryExpression	0		1269251	1					
ANR	1269304	ExpressionStatement	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"	793:1:23074:23126	1269251	8	True				
ANR	1269305	AssignmentExpression	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1269251	0		=			
ANR	1269306	Identifier	priv		1269251	0					
ANR	1269307	CallExpression	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1269251	1					
ANR	1269308	Callee	_set_priv		1269251	0					
ANR	1269309	Identifier	_set_priv		1269251	0					
ANR	1269310	ArgumentList	PRIV_CONDOR		1269251	1					
ANR	1269311	Argument	PRIV_CONDOR		1269251	0					
ANR	1269312	Identifier	PRIV_CONDOR		1269251	0					
ANR	1269313	Argument	__FILE__		1269251	1					
ANR	1269314	Identifier	__FILE__		1269251	0					
ANR	1269315	Argument	__LINE__		1269251	2					
ANR	1269316	Identifier	__LINE__		1269251	0					
ANR	1269317	Argument	0		1269251	3					
ANR	1269318	PrimaryExpression	0		1269251	0					
ANR	1269319	IfStatement	if ( debug_file_ptr )		1269251	9					
ANR	1269320	Condition	debug_file_ptr	795:4:23133:23146	1269251	0	True				
ANR	1269321	Identifier	debug_file_ptr		1269251	0					
ANR	1269322	CompoundStatement		18:1:323:323	1269251	1					
ANR	1269323	IfStatement	if ( DebugShouldLockToAppend || force_lock )		1269251	0					
ANR	1269324	Condition	DebugShouldLockToAppend || force_lock	800:6:23311:23347	1269251	0	True				
ANR	1269325	OrExpression	DebugShouldLockToAppend || force_lock		1269251	0		||			
ANR	1269326	Identifier	DebugShouldLockToAppend		1269251	0					
ANR	1269327	Identifier	force_lock		1269251	1					
ANR	1269328	ExpressionStatement	locked = 1	801:3:23354:23364	1269251	1	True				
ANR	1269329	AssignmentExpression	locked = 1		1269251	0		=			
ANR	1269330	Identifier	locked		1269251	0					
ANR	1269331	PrimaryExpression	1		1269251	1					
ANR	1269332	ElseStatement	else		1269251	0					
ANR	1269333	CompoundStatement		26:1:549:549	1269251	0					
ANR	1269334	IfStatement	if ( DebugShouldLockToAppend || force_lock )		1269251	0					
ANR	1269335	Condition	DebugShouldLockToAppend || force_lock	805:6:23384:23420	1269251	0	True				
ANR	1269336	OrExpression	DebugShouldLockToAppend || force_lock		1269251	0		||			
ANR	1269337	Identifier	DebugShouldLockToAppend		1269251	0					
ANR	1269338	Identifier	force_lock		1269251	1					
ANR	1269339	CompoundStatement		27:46:597:597	1269251	1					
ANR	1269340	ExpressionStatement	debug_open_lock ( )	806:3:23429:23446	1269251	0	True				
ANR	1269341	CallExpression	debug_open_lock ( )		1269251	0					
ANR	1269342	Callee	debug_open_lock		1269251	0					
ANR	1269343	Identifier	debug_open_lock		1269251	0					
ANR	1269344	ArgumentList			1269251	1					
ANR	1269345	ExpressionStatement	locked = 1	807:3:23451:23461	1269251	1	True				
ANR	1269346	AssignmentExpression	locked = 1		1269251	0		=			
ANR	1269347	Identifier	locked		1269251	0					
ANR	1269348	PrimaryExpression	1		1269251	1					
ANR	1269349	ExpressionStatement	"debug_file_ptr = open_debug_file ( it , mode , dont_panic )"	813:2:23621:23675	1269251	1	True				
ANR	1269350	AssignmentExpression	"debug_file_ptr = open_debug_file ( it , mode , dont_panic )"		1269251	0		=			
ANR	1269351	Identifier	debug_file_ptr		1269251	0					
ANR	1269352	CallExpression	"open_debug_file ( it , mode , dont_panic )"		1269251	1					
ANR	1269353	Callee	open_debug_file		1269251	0					
ANR	1269354	Identifier	open_debug_file		1269251	0					
ANR	1269355	ArgumentList	it		1269251	1					
ANR	1269356	Argument	it		1269251	0					
ANR	1269357	Identifier	it		1269251	0					
ANR	1269358	Argument	mode		1269251	1					
ANR	1269359	Identifier	mode		1269251	0					
ANR	1269360	Argument	dont_panic		1269251	2					
ANR	1269361	Identifier	dont_panic		1269251	0					
ANR	1269362	IfStatement	if ( debug_file_ptr == NULL )		1269251	2					
ANR	1269363	Condition	debug_file_ptr == NULL	815:6:23684:23705	1269251	0	True				
ANR	1269364	EqualityExpression	debug_file_ptr == NULL		1269251	0		==			
ANR	1269365	Identifier	debug_file_ptr		1269251	0					
ANR	1269366	Identifier	NULL		1269251	1					
ANR	1269367	CompoundStatement		37:31:882:882	1269251	1					
ANR	1269368	ExpressionStatement	save_errno = errno	817:3:23718:23736	1269251	0	True				
ANR	1269369	AssignmentExpression	save_errno = errno		1269251	0		=			
ANR	1269370	Identifier	save_errno		1269251	0					
ANR	1269371	Identifier	errno		1269251	1					
ANR	1269372	IfStatement	if ( dont_panic )		1269251	1					
ANR	1269373	Condition	dont_panic	818:7:23745:23754	1269251	0	True				
ANR	1269374	Identifier	dont_panic		1269251	0					
ANR	1269375	CompoundStatement		40:19:930:930	1269251	1					
ANR	1269376	ExpressionStatement	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"	819:4:23763:23801	1269251	0	True				
ANR	1269377	CallExpression	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"		1269251	0					
ANR	1269378	Callee	_set_priv		1269251	0					
ANR	1269379	Identifier	_set_priv		1269251	0					
ANR	1269380	ArgumentList	priv		1269251	1					
ANR	1269381	Argument	priv		1269251	0					
ANR	1269382	Identifier	priv		1269251	0					
ANR	1269383	Argument	__FILE__		1269251	1					
ANR	1269384	Identifier	__FILE__		1269251	0					
ANR	1269385	Argument	__LINE__		1269251	2					
ANR	1269386	Identifier	__LINE__		1269251	0					
ANR	1269387	Argument	0		1269251	3					
ANR	1269388	PrimaryExpression	0		1269251	0					
ANR	1269389	ReturnStatement	return NULL ;	820:4:23807:23818	1269251	1	True				
ANR	1269390	Identifier	NULL		1269251	0					
ANR	1269391	IfStatement	if ( DebugContinueOnOpenFailure )		1269251	2					
ANR	1269392	Condition	DebugContinueOnOpenFailure	823:7:23845:23870	1269251	0	True				
ANR	1269393	Identifier	DebugContinueOnOpenFailure		1269251	0					
ANR	1269394	CompoundStatement		45:35:1046:1046	1269251	1					
ANR	1269395	ExpressionStatement	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"	824:4:23879:23917	1269251	0	True				
ANR	1269396	CallExpression	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"		1269251	0					
ANR	1269397	Callee	_set_priv		1269251	0					
ANR	1269398	Identifier	_set_priv		1269251	0					
ANR	1269399	ArgumentList	priv		1269251	1					
ANR	1269400	Argument	priv		1269251	0					
ANR	1269401	Identifier	priv		1269251	0					
ANR	1269402	Argument	__FILE__		1269251	1					
ANR	1269403	Identifier	__FILE__		1269251	0					
ANR	1269404	Argument	__LINE__		1269251	2					
ANR	1269405	Identifier	__LINE__		1269251	0					
ANR	1269406	Argument	0		1269251	3					
ANR	1269407	PrimaryExpression	0		1269251	0					
ANR	1269408	ReturnStatement	return NULL ;	825:4:23923:23934	1269251	1	True				
ANR	1269409	Identifier	NULL		1269251	0					
ANR	1269410	ExpressionStatement	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Could not open DebugFile \\""%s\\""\\n"" , it -> logPath . c_str ( ) )"	832:3:24033:24132	1269251	3	True				
ANR	1269411	CallExpression	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Could not open DebugFile \\""%s\\""\\n"" , it -> logPath . c_str ( ) )"		1269251	0					
ANR	1269412	Callee	snprintf		1269251	0					
ANR	1269413	Identifier	snprintf		1269251	0					
ANR	1269414	ArgumentList	msg_buf		1269251	1					
ANR	1269415	Argument	msg_buf		1269251	0					
ANR	1269416	Identifier	msg_buf		1269251	0					
ANR	1269417	Argument	sizeof ( msg_buf )		1269251	1					
ANR	1269418	SizeofExpression	sizeof ( msg_buf )		1269251	0					
ANR	1269419	Sizeof	sizeof		1269251	0					
ANR	1269420	SizeofOperand	msg_buf		1269251	1					
ANR	1269421	Argument	"""Could not open DebugFile \\""%s\\""\\n"""		1269251	2					
ANR	1269422	PrimaryExpression	"""Could not open DebugFile \\""%s\\""\\n"""		1269251	0					
ANR	1269423	Argument	it -> logPath . c_str ( )		1269251	3					
ANR	1269424	CallExpression	it -> logPath . c_str ( )		1269251	0					
ANR	1269425	Callee	it -> logPath . c_str		1269251	0					
ANR	1269426	MemberAccess	it -> logPath . c_str		1269251	0					
ANR	1269427	PtrMemberAccess	it -> logPath		1269251	0					
ANR	1269428	Identifier	it		1269251	0					
ANR	1269429	Identifier	logPath		1269251	1					
ANR	1269430	Identifier	c_str		1269251	1					
ANR	1269431	ArgumentList			1269251	1					
ANR	1269432	ExpressionStatement	"_condor_dprintf_exit ( save_errno , msg_buf )"	834:3:24137:24180	1269251	4	True				
ANR	1269433	CallExpression	"_condor_dprintf_exit ( save_errno , msg_buf )"		1269251	0					
ANR	1269434	Callee	_condor_dprintf_exit		1269251	0					
ANR	1269435	Identifier	_condor_dprintf_exit		1269251	0					
ANR	1269436	ArgumentList	save_errno		1269251	1					
ANR	1269437	Argument	save_errno		1269251	0					
ANR	1269438	Identifier	save_errno		1269251	0					
ANR	1269439	Argument	msg_buf		1269251	1					
ANR	1269440	Identifier	msg_buf		1269251	0					
ANR	1269441	IfStatement	"if ( ( length = lseek ( fileno ( debug_file_ptr ) , 0 , SEEK_END ) ) < 0 )"		1269251	10					
ANR	1269442	Condition	"( length = lseek ( fileno ( debug_file_ptr ) , 0 , SEEK_END ) ) < 0"	838:5:24195:24249	1269251	0	True				
ANR	1269443	RelationalExpression	"( length = lseek ( fileno ( debug_file_ptr ) , 0 , SEEK_END ) ) < 0"		1269251	0		<			
ANR	1269444	AssignmentExpression	"length = lseek ( fileno ( debug_file_ptr ) , 0 , SEEK_END )"		1269251	0		=			
ANR	1269445	Identifier	length		1269251	0					
ANR	1269446	CallExpression	"lseek ( fileno ( debug_file_ptr ) , 0 , SEEK_END )"		1269251	1					
ANR	1269447	Callee	lseek		1269251	0					
ANR	1269448	Identifier	lseek		1269251	0					
ANR	1269449	ArgumentList	fileno ( debug_file_ptr )		1269251	1					
ANR	1269450	Argument	fileno ( debug_file_ptr )		1269251	0					
ANR	1269451	CallExpression	fileno ( debug_file_ptr )		1269251	0					
ANR	1269452	Callee	fileno		1269251	0					
ANR	1269453	Identifier	fileno		1269251	0					
ANR	1269454	ArgumentList	debug_file_ptr		1269251	1					
ANR	1269455	Argument	debug_file_ptr		1269251	0					
ANR	1269456	Identifier	debug_file_ptr		1269251	0					
ANR	1269457	Argument	0		1269251	1					
ANR	1269458	PrimaryExpression	0		1269251	0					
ANR	1269459	Argument	SEEK_END		1269251	2					
ANR	1269460	Identifier	SEEK_END		1269251	0					
ANR	1269461	PrimaryExpression	0		1269251	1					
ANR	1269462	CompoundStatement		60:63:1426:1426	1269251	1					
ANR	1269463	IfStatement	if ( dont_panic )		1269251	0					
ANR	1269464	Condition	dont_panic	839:6:24261:24270	1269251	0	True				
ANR	1269465	Identifier	dont_panic		1269251	0					
ANR	1269466	CompoundStatement		61:18:1446:1446	1269251	1					
ANR	1269467	IfStatement	if ( locked )		1269251	0					
ANR	1269468	Condition	locked	840:6:24281:24286	1269251	0	True				
ANR	1269469	Identifier	locked		1269251	0					
ANR	1269470	ExpressionStatement	debug_close_lock ( )	840:14:24289:24307	1269251	1	True				
ANR	1269471	CallExpression	debug_close_lock ( )		1269251	0					
ANR	1269472	Callee	debug_close_lock		1269251	0					
ANR	1269473	Identifier	debug_close_lock		1269251	0					
ANR	1269474	ArgumentList			1269251	1					
ANR	1269475	ExpressionStatement	debug_close_file ( it )	841:3:24312:24332	1269251	1	True				
ANR	1269476	CallExpression	debug_close_file ( it )		1269251	0					
ANR	1269477	Callee	debug_close_file		1269251	0					
ANR	1269478	Identifier	debug_close_file		1269251	0					
ANR	1269479	ArgumentList	it		1269251	1					
ANR	1269480	Argument	it		1269251	0					
ANR	1269481	Identifier	it		1269251	0					
ANR	1269482	ReturnStatement	return NULL ;	843:3:24338:24349	1269251	2	True				
ANR	1269483	Identifier	NULL		1269251	0					
ANR	1269484	ExpressionStatement	save_errno = errno	845:2:24357:24375	1269251	1	True				
ANR	1269485	AssignmentExpression	save_errno = errno		1269251	0		=			
ANR	1269486	Identifier	save_errno		1269251	0					
ANR	1269487	Identifier	errno		1269251	1					
ANR	1269488	ExpressionStatement	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't seek to end of DebugFP file\\n"" )"	846:2:24379:24454	1269251	2	True				
ANR	1269489	CallExpression	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't seek to end of DebugFP file\\n"" )"		1269251	0					
ANR	1269490	Callee	snprintf		1269251	0					
ANR	1269491	Identifier	snprintf		1269251	0					
ANR	1269492	ArgumentList	msg_buf		1269251	1					
ANR	1269493	Argument	msg_buf		1269251	0					
ANR	1269494	Identifier	msg_buf		1269251	0					
ANR	1269495	Argument	sizeof ( msg_buf )		1269251	1					
ANR	1269496	SizeofExpression	sizeof ( msg_buf )		1269251	0					
ANR	1269497	Sizeof	sizeof		1269251	0					
ANR	1269498	SizeofOperand	msg_buf		1269251	1					
ANR	1269499	Argument	"""Can't seek to end of DebugFP file\\n"""		1269251	2					
ANR	1269500	PrimaryExpression	"""Can't seek to end of DebugFP file\\n"""		1269251	0					
ANR	1269501	ExpressionStatement	"_condor_dprintf_exit ( save_errno , msg_buf )"	847:2:24458:24501	1269251	3	True				
ANR	1269502	CallExpression	"_condor_dprintf_exit ( save_errno , msg_buf )"		1269251	0					
ANR	1269503	Callee	_condor_dprintf_exit		1269251	0					
ANR	1269504	Identifier	_condor_dprintf_exit		1269251	0					
ANR	1269505	ArgumentList	save_errno		1269251	1					
ANR	1269506	Argument	save_errno		1269251	0					
ANR	1269507	Identifier	save_errno		1269251	0					
ANR	1269508	Argument	msg_buf		1269251	1					
ANR	1269509	Identifier	msg_buf		1269251	0					
ANR	1269510	IfStatement	if ( it -> maxLog && length > it -> maxLog )		1269251	11					
ANR	1269511	Condition	it -> maxLog && length > it -> maxLog	850:5:24512:24544	1269251	0	True				
ANR	1269512	AndExpression	it -> maxLog && length > it -> maxLog		1269251	0		&&			
ANR	1269513	PtrMemberAccess	it -> maxLog		1269251	0					
ANR	1269514	Identifier	it		1269251	0					
ANR	1269515	Identifier	maxLog		1269251	1					
ANR	1269516	RelationalExpression	length > it -> maxLog		1269251	1		>			
ANR	1269517	Identifier	length		1269251	0					
ANR	1269518	PtrMemberAccess	it -> maxLog		1269251	1					
ANR	1269519	Identifier	it		1269251	0					
ANR	1269520	Identifier	maxLog		1269251	1					
ANR	1269521	CompoundStatement		72:41:1721:1721	1269251	1					
ANR	1269522	IfStatement	if ( ! locked )		1269251	0					
ANR	1269523	Condition	! locked	851:6:24556:24562	1269251	0	True				
ANR	1269524	UnaryOperationExpression	! locked		1269251	0					
ANR	1269525	UnaryOperator	!		1269251	0					
ANR	1269526	Identifier	locked		1269251	1					
ANR	1269527	CompoundStatement		73:16:1739:1739	1269251	1					
ANR	1269528	IfStatement	if ( debug_file_ptr )		1269251	0					
ANR	1269529	Condition	debug_file_ptr	857:7:24673:24686	1269251	0	True				
ANR	1269530	Identifier	debug_file_ptr		1269251	0					
ANR	1269531	CompoundStatement		80:4:1868:1905	1269251	1					
ANR	1269532	IdentifierDeclStatement	int result = fflush ( debug_file_ptr ) ;	858:4:24695:24732	1269251	0	True				
ANR	1269533	IdentifierDecl	result = fflush ( debug_file_ptr )		1269251	0					
ANR	1269534	IdentifierDeclType	int		1269251	0					
ANR	1269535	Identifier	result		1269251	1					
ANR	1269536	AssignmentExpression	result = fflush ( debug_file_ptr )		1269251	2		=			
ANR	1269537	Identifier	result		1269251	0					
ANR	1269538	CallExpression	fflush ( debug_file_ptr )		1269251	1					
ANR	1269539	Callee	fflush		1269251	0					
ANR	1269540	Identifier	fflush		1269251	0					
ANR	1269541	ArgumentList	debug_file_ptr		1269251	1					
ANR	1269542	Argument	debug_file_ptr		1269251	0					
ANR	1269543	Identifier	debug_file_ptr		1269251	0					
ANR	1269544	IfStatement	if ( result < 0 )		1269251	1					
ANR	1269545	Condition	result < 0	859:8:24742:24751	1269251	0	True				
ANR	1269546	RelationalExpression	result < 0		1269251	0		<			
ANR	1269547	Identifier	result		1269251	0					
ANR	1269548	PrimaryExpression	0		1269251	1					
ANR	1269549	CompoundStatement		81:20:1927:1927	1269251	1					
ANR	1269550	ExpressionStatement	DebugUnlockBroken = 1	860:5:24761:24782	1269251	0	True				
ANR	1269551	AssignmentExpression	DebugUnlockBroken = 1		1269251	0		=			
ANR	1269552	Identifier	DebugUnlockBroken		1269251	0					
ANR	1269553	PrimaryExpression	1		1269251	1					
ANR	1269554	ExpressionStatement	"_condor_dprintf_exit ( errno , ""Can't fflush debug log file\\n"" )"	861:5:24789:24849	1269251	1	True				
ANR	1269555	CallExpression	"_condor_dprintf_exit ( errno , ""Can't fflush debug log file\\n"" )"		1269251	0					
ANR	1269556	Callee	_condor_dprintf_exit		1269251	0					
ANR	1269557	Identifier	_condor_dprintf_exit		1269251	0					
ANR	1269558	ArgumentList	errno		1269251	1					
ANR	1269559	Argument	errno		1269251	0					
ANR	1269560	Identifier	errno		1269251	0					
ANR	1269561	Argument	"""Can't fflush debug log file\\n"""		1269251	1					
ANR	1269562	PrimaryExpression	"""Can't fflush debug log file\\n"""		1269251	0					
ANR	1269563	IfStatement	if ( DebugLock )		1269251	1					
ANR	1269564	Condition	DebugLock	871:6:25093:25101	1269251	0	True				
ANR	1269565	Identifier	DebugLock		1269251	0					
ANR	1269566	CompoundStatement		94:3:2280:2280	1269251	1					
ANR	1269567	ExpressionStatement	debug_close_lock ( )	873:4:25113:25131	1269251	0	True				
ANR	1269568	CallExpression	debug_close_lock ( )		1269251	0					
ANR	1269569	Callee	debug_close_lock		1269251	0					
ANR	1269570	Identifier	debug_close_lock		1269251	0					
ANR	1269571	ArgumentList			1269251	1					
ANR	1269572	ExpressionStatement	debug_close_file ( it )	874:4:25137:25157	1269251	1	True				
ANR	1269573	CallExpression	debug_close_file ( it )		1269251	0					
ANR	1269574	Callee	debug_close_file		1269251	0					
ANR	1269575	Identifier	debug_close_file		1269251	0					
ANR	1269576	ArgumentList	it		1269251	1					
ANR	1269577	Argument	it		1269251	0					
ANR	1269578	Identifier	it		1269251	0					
ANR	1269579	ExpressionStatement	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"	875:4:25163:25201	1269251	2	True				
ANR	1269580	CallExpression	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"		1269251	0					
ANR	1269581	Callee	_set_priv		1269251	0					
ANR	1269582	Identifier	_set_priv		1269251	0					
ANR	1269583	ArgumentList	priv		1269251	1					
ANR	1269584	Argument	priv		1269251	0					
ANR	1269585	Identifier	priv		1269251	0					
ANR	1269586	Argument	__FILE__		1269251	1					
ANR	1269587	Identifier	__FILE__		1269251	0					
ANR	1269588	Argument	__LINE__		1269251	2					
ANR	1269589	Identifier	__LINE__		1269251	0					
ANR	1269590	Argument	0		1269251	3					
ANR	1269591	PrimaryExpression	0		1269251	0					
ANR	1269592	ReturnStatement	"return debug_lock_it ( it , mode , 1 , dont_panic ) ;"	876:4:25207:25252	1269251	3	True				
ANR	1269593	CallExpression	"debug_lock_it ( it , mode , 1 , dont_panic )"		1269251	0					
ANR	1269594	Callee	debug_lock_it		1269251	0					
ANR	1269595	Identifier	debug_lock_it		1269251	0					
ANR	1269596	ArgumentList	it		1269251	1					
ANR	1269597	Argument	it		1269251	0					
ANR	1269598	Identifier	it		1269251	0					
ANR	1269599	Argument	mode		1269251	1					
ANR	1269600	Identifier	mode		1269251	0					
ANR	1269601	Argument	1		1269251	2					
ANR	1269602	PrimaryExpression	1		1269251	0					
ANR	1269603	Argument	dont_panic		1269251	3					
ANR	1269604	Identifier	dont_panic		1269251	0					
ANR	1269605	ExpressionStatement	"_condor_dfprintf ( debug_file_ptr , ""MaxLog = %lld, length = %lld\\n"" , ( long long ) it -> maxLog , ( long long ) length )"	884:2:25467:25575	1269251	1	True				
ANR	1269606	CallExpression	"_condor_dfprintf ( debug_file_ptr , ""MaxLog = %lld, length = %lld\\n"" , ( long long ) it -> maxLog , ( long long ) length )"		1269251	0					
ANR	1269607	Callee	_condor_dfprintf		1269251	0					
ANR	1269608	Identifier	_condor_dfprintf		1269251	0					
ANR	1269609	ArgumentList	debug_file_ptr		1269251	1					
ANR	1269610	Argument	debug_file_ptr		1269251	0					
ANR	1269611	Identifier	debug_file_ptr		1269251	0					
ANR	1269612	Argument	"""MaxLog = %lld, length = %lld\\n"""		1269251	1					
ANR	1269613	PrimaryExpression	"""MaxLog = %lld, length = %lld\\n"""		1269251	0					
ANR	1269614	Argument	( long long ) it -> maxLog		1269251	2					
ANR	1269615	CastExpression	( long long ) it -> maxLog		1269251	0					
ANR	1269616	CastTarget	long long		1269251	0					
ANR	1269617	PtrMemberAccess	it -> maxLog		1269251	1					
ANR	1269618	Identifier	it		1269251	0					
ANR	1269619	Identifier	maxLog		1269251	1					
ANR	1269620	Argument	( long long ) length		1269251	3					
ANR	1269621	CastExpression	( long long ) length		1269251	0					
ANR	1269622	CastTarget	long long		1269251	0					
ANR	1269623	Identifier	length		1269251	1					
ANR	1269624	ExpressionStatement	"debug_file_ptr = preserve_log_file ( it , dont_panic )"	886:2:25582:25632	1269251	2	True				
ANR	1269625	AssignmentExpression	"debug_file_ptr = preserve_log_file ( it , dont_panic )"		1269251	0		=			
ANR	1269626	Identifier	debug_file_ptr		1269251	0					
ANR	1269627	CallExpression	"preserve_log_file ( it , dont_panic )"		1269251	1					
ANR	1269628	Callee	preserve_log_file		1269251	0					
ANR	1269629	Identifier	preserve_log_file		1269251	0					
ANR	1269630	ArgumentList	it		1269251	1					
ANR	1269631	Argument	it		1269251	0					
ANR	1269632	Identifier	it		1269251	0					
ANR	1269633	Argument	dont_panic		1269251	1					
ANR	1269634	Identifier	dont_panic		1269251	0					
ANR	1269635	ExpressionStatement	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"	889:1:25639:25677	1269251	12	True				
ANR	1269636	CallExpression	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"		1269251	0					
ANR	1269637	Callee	_set_priv		1269251	0					
ANR	1269638	Identifier	_set_priv		1269251	0					
ANR	1269639	ArgumentList	priv		1269251	1					
ANR	1269640	Argument	priv		1269251	0					
ANR	1269641	Identifier	priv		1269251	0					
ANR	1269642	Argument	__FILE__		1269251	1					
ANR	1269643	Identifier	__FILE__		1269251	0					
ANR	1269644	Argument	__LINE__		1269251	2					
ANR	1269645	Identifier	__LINE__		1269251	0					
ANR	1269646	Argument	0		1269251	3					
ANR	1269647	PrimaryExpression	0		1269251	0					
ANR	1269648	ReturnStatement	return debug_file_ptr ;	891:1:25681:25702	1269251	13	True				
ANR	1269649	Identifier	debug_file_ptr		1269251	0					
ANR	1269650	ReturnType	static FILE *		1269251	1					
ANR	1269651	Identifier	debug_lock_it		1269251	2					
ANR	1269652	ParameterList	"struct DebugFileInfo * it , const char * mode , int force_lock , bool dont_panic"		1269251	3					
ANR	1269653	Parameter	struct DebugFileInfo * it	778:14:22749:22772	1269251	0	True				
ANR	1269654	ParameterType	struct DebugFileInfo *		1269251	0					
ANR	1269655	Identifier	it		1269251	1					
ANR	1269656	Parameter	const char * mode	778:40:22775:22790	1269251	1	True				
ANR	1269657	ParameterType	const char *		1269251	0					
ANR	1269658	Identifier	mode		1269251	1					
ANR	1269659	Parameter	int force_lock	778:58:22793:22806	1269251	2	True				
ANR	1269660	ParameterType	int		1269251	0					
ANR	1269661	Identifier	force_lock		1269251	1					
ANR	1269662	Parameter	bool dont_panic	778:74:22809:22823	1269251	3	True				
ANR	1269663	ParameterType	bool		1269251	0					
ANR	1269664	Identifier	dont_panic		1269251	1					
ANR	1269665	CFGEntryNode	ENTRY		1269251		True				
ANR	1269666	CFGExitNode	EXIT		1269251		True				
ANR	1269667	Symbol	fflush		1269251						
ANR	1269668	Symbol	lseek		1269251						
ANR	1269669	Symbol	_set_priv		1269251						
ANR	1269670	Symbol	DebugContinueOnOpenFailure		1269251						
ANR	1269671	Symbol	it -> maxLog		1269251						
ANR	1269672	Symbol	save_errno		1269251						
ANR	1269673	Symbol	mode		1269251						
ANR	1269674	Symbol	result		1269251						
ANR	1269675	Symbol	DebugShouldLockToAppend		1269251						
ANR	1269676	Symbol	priv		1269251						
ANR	1269677	Symbol	it -> debugFP		1269251						
ANR	1269678	Symbol	locked		1269251						
ANR	1269679	Symbol	DebugUnlockBroken		1269251						
ANR	1269680	Symbol	errno		1269251						
ANR	1269681	Symbol	NULL		1269251						
ANR	1269682	Symbol	DebugLock		1269251						
ANR	1269683	Symbol	preserve_log_file		1269251						
ANR	1269684	Symbol	it -> logPath . c_str		1269251						
ANR	1269685	Symbol	__FILE__		1269251						
ANR	1269686	Symbol	open_debug_file		1269251						
ANR	1269687	Symbol	length		1269251						
ANR	1269688	Symbol	msg_buf		1269251						
ANR	1269689	Symbol	it		1269251						
ANR	1269690	Symbol	dont_panic		1269251						
ANR	1269691	Symbol	debug_file_ptr		1269251						
ANR	1269692	Symbol	__LINE__		1269251						
ANR	1269693	Symbol	SEEK_END		1269251						
ANR	1269694	Symbol	* it		1269251						
ANR	1269695	Symbol	fileno		1269251						
ANR	1269696	Symbol	debug_lock_it		1269251						
ANR	1269697	Symbol	force_lock		1269251						
ANR	1269698	Symbol	PRIV_CONDOR		1269251						
ANR	1269699	Symbol	it -> logPath		1269251						
ANR	1269700	Function	debug_close_lock	894:0:25707:26222							
ANR	1269701	FunctionDef	debug_close_lock ()		1269700	0					
ANR	1269702	CompoundStatement		896:0:25743:26222	1269700	0					
ANR	1269703	IdentifierDeclStatement	int flock_errno ;	897:1:25746:25761	1269700	0	True				
ANR	1269704	IdentifierDecl	flock_errno		1269700	0					
ANR	1269705	IdentifierDeclType	int		1269700	0					
ANR	1269706	Identifier	flock_errno		1269700	1					
ANR	1269707	IdentifierDeclStatement	char msg_buf [ DPRINTF_ERR_MAX ] ;	898:1:25764:25793	1269700	1	True				
ANR	1269708	IdentifierDecl	msg_buf [ DPRINTF_ERR_MAX ]		1269700	0					
ANR	1269709	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1269700	0					
ANR	1269710	Identifier	msg_buf		1269700	1					
ANR	1269711	Identifier	DPRINTF_ERR_MAX		1269700	2					
ANR	1269712	IfStatement	if ( DebugUnlockBroken )		1269700	2					
ANR	1269713	Condition	DebugUnlockBroken	899:4:25799:25815	1269700	0	True				
ANR	1269714	Identifier	DebugUnlockBroken		1269700	0					
ANR	1269715	ReturnStatement	return ;	900:2:25820:25826	1269700	1	True				
ANR	1269716	IfStatement	if ( DebugIsLocked )		1269700	3					
ANR	1269717	Condition	DebugIsLocked	902:4:25833:25845	1269700	0	True				
ANR	1269718	Identifier	DebugIsLocked		1269700	0					
ANR	1269719	CompoundStatement		8:1:105:105	1269700	1					
ANR	1269720	ExpressionStatement	errno = 0	904:2:25853:25862	1269700	0	True				
ANR	1269721	AssignmentExpression	errno = 0		1269700	0		=			
ANR	1269722	Identifier	errno		1269700	0					
ANR	1269723	PrimaryExpression	0		1269700	1					
ANR	1269724	IfStatement	"if ( lock_or_mutex_file ( LockFd , UN_LOCK , TRUE ) < 0 )"		1269700	1					
ANR	1269725	Condition	"lock_or_mutex_file ( LockFd , UN_LOCK , TRUE ) < 0"	906:7:25884:25926	1269700	0	True				
ANR	1269726	RelationalExpression	"lock_or_mutex_file ( LockFd , UN_LOCK , TRUE ) < 0"		1269700	0		<			
ANR	1269727	CallExpression	"lock_or_mutex_file ( LockFd , UN_LOCK , TRUE )"		1269700	0					
ANR	1269728	Callee	lock_or_mutex_file		1269700	0					
ANR	1269729	Identifier	lock_or_mutex_file		1269700	0					
ANR	1269730	ArgumentList	LockFd		1269700	1					
ANR	1269731	Argument	LockFd		1269700	0					
ANR	1269732	Identifier	LockFd		1269700	0					
ANR	1269733	Argument	UN_LOCK		1269700	1					
ANR	1269734	Identifier	UN_LOCK		1269700	0					
ANR	1269735	Argument	TRUE		1269700	2					
ANR	1269736	Identifier	TRUE		1269700	0					
ANR	1269737	PrimaryExpression	0		1269700	1					
ANR	1269738	CompoundStatement		15:2:250:250	1269700	1					
ANR	1269739	ExpressionStatement	flock_errno = errno	911:3:25999:26018	1269700	0	True				
ANR	1269740	AssignmentExpression	flock_errno = errno		1269700	0		=			
ANR	1269741	Identifier	flock_errno		1269700	0					
ANR	1269742	Identifier	errno		1269700	1					
ANR	1269743	ExpressionStatement	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't release exclusive lock on \\""%s\\"", LockFd=%d\\n"" , DebugLock , LockFd )"	912:3:26023:26138	1269700	1	True				
ANR	1269744	CallExpression	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't release exclusive lock on \\""%s\\"", LockFd=%d\\n"" , DebugLock , LockFd )"		1269700	0					
ANR	1269745	Callee	snprintf		1269700	0					
ANR	1269746	Identifier	snprintf		1269700	0					
ANR	1269747	ArgumentList	msg_buf		1269700	1					
ANR	1269748	Argument	msg_buf		1269700	0					
ANR	1269749	Identifier	msg_buf		1269700	0					
ANR	1269750	Argument	sizeof ( msg_buf )		1269700	1					
ANR	1269751	SizeofExpression	sizeof ( msg_buf )		1269700	0					
ANR	1269752	Sizeof	sizeof		1269700	0					
ANR	1269753	SizeofOperand	msg_buf		1269700	1					
ANR	1269754	Argument	"""Can't release exclusive lock on \\""%s\\"", LockFd=%d\\n"""		1269700	2					
ANR	1269755	PrimaryExpression	"""Can't release exclusive lock on \\""%s\\"", LockFd=%d\\n"""		1269700	0					
ANR	1269756	Argument	DebugLock		1269700	3					
ANR	1269757	Identifier	DebugLock		1269700	0					
ANR	1269758	Argument	LockFd		1269700	4					
ANR	1269759	Identifier	LockFd		1269700	0					
ANR	1269760	ExpressionStatement	DebugUnlockBroken = 1	914:3:26143:26164	1269700	2	True				
ANR	1269761	AssignmentExpression	DebugUnlockBroken = 1		1269700	0		=			
ANR	1269762	Identifier	DebugUnlockBroken		1269700	0					
ANR	1269763	PrimaryExpression	1		1269700	1					
ANR	1269764	ExpressionStatement	"_condor_dprintf_exit ( flock_errno , msg_buf )"	915:3:26169:26213	1269700	3	True				
ANR	1269765	CallExpression	"_condor_dprintf_exit ( flock_errno , msg_buf )"		1269700	0					
ANR	1269766	Callee	_condor_dprintf_exit		1269700	0					
ANR	1269767	Identifier	_condor_dprintf_exit		1269700	0					
ANR	1269768	ArgumentList	flock_errno		1269700	1					
ANR	1269769	Argument	flock_errno		1269700	0					
ANR	1269770	Identifier	flock_errno		1269700	0					
ANR	1269771	Argument	msg_buf		1269700	1					
ANR	1269772	Identifier	msg_buf		1269700	0					
ANR	1269773	ReturnType	static void		1269700	1					
ANR	1269774	Identifier	debug_close_lock		1269700	2					
ANR	1269775	ParameterList			1269700	3					
ANR	1269776	CFGEntryNode	ENTRY		1269700		True				
ANR	1269777	CFGExitNode	EXIT		1269700		True				
ANR	1269778	Symbol	DebugIsLocked		1269700						
ANR	1269779	Symbol	errno		1269700						
ANR	1269780	Symbol	LockFd		1269700						
ANR	1269781	Symbol	DebugLock		1269700						
ANR	1269782	Symbol	lock_or_mutex_file		1269700						
ANR	1269783	Symbol	msg_buf		1269700						
ANR	1269784	Symbol	TRUE		1269700						
ANR	1269785	Symbol	UN_LOCK		1269700						
ANR	1269786	Symbol	DebugUnlockBroken		1269700						
ANR	1269787	Symbol	flock_errno		1269700						
ANR	1269788	Function	debug_close_file	920:0:26225:26602							
ANR	1269789	FunctionDef	debug_close_file (struct DebugFileInfo * it)		1269788	0					
ANR	1269790	CompoundStatement		922:0:26281:26602	1269788	0					
ANR	1269791	IdentifierDeclStatement	FILE * debug_file_ptr = ( * it ) . debugFP ;	923:1:26284:26320	1269788	0	True				
ANR	1269792	IdentifierDecl	* debug_file_ptr = ( * it ) . debugFP		1269788	0					
ANR	1269793	IdentifierDeclType	FILE *		1269788	0					
ANR	1269794	Identifier	debug_file_ptr		1269788	1					
ANR	1269795	AssignmentExpression	* debug_file_ptr = ( * it ) . debugFP		1269788	2		=			
ANR	1269796	Identifier	debug_file_ptr		1269788	0					
ANR	1269797	MemberAccess	( * it ) . debugFP		1269788	1					
ANR	1269798	UnaryOperationExpression	* it		1269788	0					
ANR	1269799	UnaryOperator	*		1269788	0					
ANR	1269800	Identifier	it		1269788	1					
ANR	1269801	Identifier	debugFP		1269788	1					
ANR	1269802	IfStatement	if ( debug_file_ptr )		1269788	1					
ANR	1269803	Condition	debug_file_ptr	925:5:26328:26341	1269788	0	True				
ANR	1269804	Identifier	debug_file_ptr		1269788	0					
ANR	1269805	CompoundStatement		4:22:63:63	1269788	1					
ANR	1269806	IfStatement	if ( debug_file_ptr )		1269788	0					
ANR	1269807	Condition	debug_file_ptr	926:6:26353:26366	1269788	0	True				
ANR	1269808	Identifier	debug_file_ptr		1269788	0					
ANR	1269809	CompoundStatement		6:3:92:161	1269788	1					
ANR	1269810	IdentifierDeclStatement	"int close_result = fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX ) ;"	927:3:26374:26443	1269788	0	True				
ANR	1269811	IdentifierDecl	"close_result = fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX )"		1269788	0					
ANR	1269812	IdentifierDeclType	int		1269788	0					
ANR	1269813	Identifier	close_result		1269788	1					
ANR	1269814	AssignmentExpression	"close_result = fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX )"		1269788	2		=			
ANR	1269815	Identifier	close_result		1269788	0					
ANR	1269816	CallExpression	"fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX )"		1269788	1					
ANR	1269817	Callee	fclose_wrapper		1269788	0					
ANR	1269818	Identifier	fclose_wrapper		1269788	0					
ANR	1269819	ArgumentList	debug_file_ptr		1269788	1					
ANR	1269820	Argument	debug_file_ptr		1269788	0					
ANR	1269821	Identifier	debug_file_ptr		1269788	0					
ANR	1269822	Argument	FCLOSE_RETRY_MAX		1269788	1					
ANR	1269823	Identifier	FCLOSE_RETRY_MAX		1269788	0					
ANR	1269824	IfStatement	if ( close_result < 0 )		1269788	1					
ANR	1269825	Condition	close_result < 0	928:7:26452:26467	1269788	0	True				
ANR	1269826	RelationalExpression	close_result < 0		1269788	0		<			
ANR	1269827	Identifier	close_result		1269788	0					
ANR	1269828	PrimaryExpression	0		1269788	1					
ANR	1269829	CompoundStatement		7:25:188:188	1269788	1					
ANR	1269830	ExpressionStatement	DebugUnlockBroken = 1	929:4:26476:26497	1269788	0	True				
ANR	1269831	AssignmentExpression	DebugUnlockBroken = 1		1269788	0		=			
ANR	1269832	Identifier	DebugUnlockBroken		1269788	0					
ANR	1269833	PrimaryExpression	1		1269788	1					
ANR	1269834	ExpressionStatement	"_condor_dprintf_exit ( errno , ""Can't fclose debug log file\\n"" )"	930:4:26503:26563	1269788	1	True				
ANR	1269835	CallExpression	"_condor_dprintf_exit ( errno , ""Can't fclose debug log file\\n"" )"		1269788	0					
ANR	1269836	Callee	_condor_dprintf_exit		1269788	0					
ANR	1269837	Identifier	_condor_dprintf_exit		1269788	0					
ANR	1269838	ArgumentList	errno		1269788	1					
ANR	1269839	Argument	errno		1269788	0					
ANR	1269840	Identifier	errno		1269788	0					
ANR	1269841	Argument	"""Can't fclose debug log file\\n"""		1269788	1					
ANR	1269842	PrimaryExpression	"""Can't fclose debug log file\\n"""		1269788	0					
ANR	1269843	ExpressionStatement	( * it ) . debugFP = NULL	932:3:26573:26593	1269788	2	True				
ANR	1269844	AssignmentExpression	( * it ) . debugFP = NULL		1269788	0		=			
ANR	1269845	MemberAccess	( * it ) . debugFP		1269788	0					
ANR	1269846	UnaryOperationExpression	* it		1269788	0					
ANR	1269847	UnaryOperator	*		1269788	0					
ANR	1269848	Identifier	it		1269788	1					
ANR	1269849	Identifier	debugFP		1269788	1					
ANR	1269850	Identifier	NULL		1269788	1					
ANR	1269851	ReturnType	static void		1269788	1					
ANR	1269852	Identifier	debug_close_file		1269788	2					
ANR	1269853	ParameterList	struct DebugFileInfo * it		1269788	3					
ANR	1269854	Parameter	struct DebugFileInfo * it	921:17:26255:26278	1269788	0	True				
ANR	1269855	ParameterType	struct DebugFileInfo *		1269788	0					
ANR	1269856	Identifier	it		1269788	1					
ANR	1269857	CFGEntryNode	ENTRY		1269788		True				
ANR	1269858	CFGExitNode	EXIT		1269788		True				
ANR	1269859	Symbol	* it		1269788						
ANR	1269860	Symbol	errno		1269788						
ANR	1269861	Symbol	NULL		1269788						
ANR	1269862	Symbol	it		1269788						
ANR	1269863	Symbol	close_result		1269788						
ANR	1269864	Symbol	FCLOSE_RETRY_MAX		1269788						
ANR	1269865	Symbol	debug_file_ptr		1269788						
ANR	1269866	Symbol	fclose_wrapper		1269788						
ANR	1269867	Symbol	DebugUnlockBroken		1269788						
ANR	1269868	Symbol	( * it ) . debugFP		1269788						
ANR	1269869	Function	debug_close_all_files	937:0:26605:27069							
ANR	1269870	FunctionDef	debug_close_all_files ()		1269869	0					
ANR	1269871	CompoundStatement		939:0:26642:27069	1269869	0					
ANR	1269872	IdentifierDeclStatement	FILE * debug_file_ptr = NULL ;	940:1:26645:26672	1269869	0	True				
ANR	1269873	IdentifierDecl	* debug_file_ptr = NULL		1269869	0					
ANR	1269874	IdentifierDeclType	FILE *		1269869	0					
ANR	1269875	Identifier	debug_file_ptr		1269869	1					
ANR	1269876	AssignmentExpression	* debug_file_ptr = NULL		1269869	2		=			
ANR	1269877	Identifier	NULL		1269869	0					
ANR	1269878	Identifier	NULL		1269869	1					
ANR	1269879	IdentifierDeclStatement	std :: vector < DebugFileInfo > :: iterator it ;	941:1:26675:26714	1269869	1	True				
ANR	1269880	IdentifierDecl	it		1269869	0					
ANR	1269881	IdentifierDeclType	std :: vector < DebugFileInfo > :: iterator		1269869	0					
ANR	1269882	Identifier	it		1269869	1					
ANR	1269883	ForStatement	for ( it = DebugLogs -> begin ( ) ; it < DebugLogs -> end ( ) ; it ++ )		1269869	2					
ANR	1269884	ForInit	it = DebugLogs -> begin ( ) ;	943:5:26722:26745	1269869	0	True				
ANR	1269885	AssignmentExpression	it = DebugLogs -> begin ( )		1269869	0		=			
ANR	1269886	Identifier	it		1269869	0					
ANR	1269887	CallExpression	DebugLogs -> begin ( )		1269869	1					
ANR	1269888	Callee	DebugLogs -> begin		1269869	0					
ANR	1269889	PtrMemberAccess	DebugLogs -> begin		1269869	0					
ANR	1269890	Identifier	DebugLogs		1269869	0					
ANR	1269891	Identifier	begin		1269869	1					
ANR	1269892	ArgumentList			1269869	1					
ANR	1269893	Condition	it < DebugLogs -> end ( )	943:30:26747:26767	1269869	1	True				
ANR	1269894	RelationalExpression	it < DebugLogs -> end ( )		1269869	0		<			
ANR	1269895	Identifier	it		1269869	0					
ANR	1269896	CallExpression	DebugLogs -> end ( )		1269869	1					
ANR	1269897	Callee	DebugLogs -> end		1269869	0					
ANR	1269898	PtrMemberAccess	DebugLogs -> end		1269869	0					
ANR	1269899	Identifier	DebugLogs		1269869	0					
ANR	1269900	Identifier	end		1269869	1					
ANR	1269901	ArgumentList			1269869	1					
ANR	1269902	PostIncDecOperationExpression	it ++	943:53:26770:26773	1269869	2	True				
ANR	1269903	Identifier	it		1269869	0					
ANR	1269904	IncDec	++		1269869	1					
ANR	1269905	CompoundStatement		10:2:207:276	1269869	3					
ANR	1269906	ExpressionStatement	debug_file_ptr = ( * it ) . debugFP	945:2:26781:26811	1269869	0	True				
ANR	1269907	AssignmentExpression	debug_file_ptr = ( * it ) . debugFP		1269869	0		=			
ANR	1269908	Identifier	debug_file_ptr		1269869	0					
ANR	1269909	MemberAccess	( * it ) . debugFP		1269869	1					
ANR	1269910	UnaryOperationExpression	* it		1269869	0					
ANR	1269911	UnaryOperator	*		1269869	0					
ANR	1269912	Identifier	it		1269869	1					
ANR	1269913	Identifier	debugFP		1269869	1					
ANR	1269914	IfStatement	if ( ! debug_file_ptr )		1269869	1					
ANR	1269915	Condition	! debug_file_ptr	946:5:26818:26832	1269869	0	True				
ANR	1269916	UnaryOperationExpression	! debug_file_ptr		1269869	0					
ANR	1269917	UnaryOperator	!		1269869	0					
ANR	1269918	Identifier	debug_file_ptr		1269869	1					
ANR	1269919	ContinueStatement	continue ;	947:3:26838:26846	1269869	1	True				
ANR	1269920	IdentifierDeclStatement	"int close_result = fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX ) ;"	948:2:26850:26919	1269869	2	True				
ANR	1269921	IdentifierDecl	"close_result = fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX )"		1269869	0					
ANR	1269922	IdentifierDeclType	int		1269869	0					
ANR	1269923	Identifier	close_result		1269869	1					
ANR	1269924	AssignmentExpression	"close_result = fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX )"		1269869	2		=			
ANR	1269925	Identifier	close_result		1269869	0					
ANR	1269926	CallExpression	"fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX )"		1269869	1					
ANR	1269927	Callee	fclose_wrapper		1269869	0					
ANR	1269928	Identifier	fclose_wrapper		1269869	0					
ANR	1269929	ArgumentList	debug_file_ptr		1269869	1					
ANR	1269930	Argument	debug_file_ptr		1269869	0					
ANR	1269931	Identifier	debug_file_ptr		1269869	0					
ANR	1269932	Argument	FCLOSE_RETRY_MAX		1269869	1					
ANR	1269933	Identifier	FCLOSE_RETRY_MAX		1269869	0					
ANR	1269934	IfStatement	if ( close_result < 0 )		1269869	3					
ANR	1269935	Condition	close_result < 0	949:6:26927:26942	1269869	0	True				
ANR	1269936	RelationalExpression	close_result < 0		1269869	0		<			
ANR	1269937	Identifier	close_result		1269869	0					
ANR	1269938	PrimaryExpression	0		1269869	1					
ANR	1269939	CompoundStatement		11:24:302:302	1269869	1					
ANR	1269940	ExpressionStatement	DebugUnlockBroken = 1	950:3:26950:26971	1269869	0	True				
ANR	1269941	AssignmentExpression	DebugUnlockBroken = 1		1269869	0		=			
ANR	1269942	Identifier	DebugUnlockBroken		1269869	0					
ANR	1269943	PrimaryExpression	1		1269869	1					
ANR	1269944	ExpressionStatement	"_condor_dprintf_exit ( errno , ""Can't fclose debug log file\\n"" )"	951:3:26976:27036	1269869	1	True				
ANR	1269945	CallExpression	"_condor_dprintf_exit ( errno , ""Can't fclose debug log file\\n"" )"		1269869	0					
ANR	1269946	Callee	_condor_dprintf_exit		1269869	0					
ANR	1269947	Identifier	_condor_dprintf_exit		1269869	0					
ANR	1269948	ArgumentList	errno		1269869	1					
ANR	1269949	Argument	errno		1269869	0					
ANR	1269950	Identifier	errno		1269869	0					
ANR	1269951	Argument	"""Can't fclose debug log file\\n"""		1269869	1					
ANR	1269952	PrimaryExpression	"""Can't fclose debug log file\\n"""		1269869	0					
ANR	1269953	ExpressionStatement	( * it ) . debugFP = NULL	953:2:27044:27064	1269869	4	True				
ANR	1269954	AssignmentExpression	( * it ) . debugFP = NULL		1269869	0		=			
ANR	1269955	MemberAccess	( * it ) . debugFP		1269869	0					
ANR	1269956	UnaryOperationExpression	* it		1269869	0					
ANR	1269957	UnaryOperator	*		1269869	0					
ANR	1269958	Identifier	it		1269869	1					
ANR	1269959	Identifier	debugFP		1269869	1					
ANR	1269960	Identifier	NULL		1269869	1					
ANR	1269961	ReturnType	static void		1269869	1					
ANR	1269962	Identifier	debug_close_all_files		1269869	2					
ANR	1269963	ParameterList			1269869	3					
ANR	1269964	CFGEntryNode	ENTRY		1269869		True				
ANR	1269965	CFGExitNode	EXIT		1269869		True				
ANR	1269966	Symbol	DebugLogs -> end		1269869						
ANR	1269967	Symbol	errno		1269869						
ANR	1269968	Symbol	NULL		1269869						
ANR	1269969	Symbol	it		1269869						
ANR	1269970	Symbol	debug_file_ptr		1269869						
ANR	1269971	Symbol	fclose_wrapper		1269869						
ANR	1269972	Symbol	* it		1269869						
ANR	1269973	Symbol	DebugLogs -> begin		1269869						
ANR	1269974	Symbol	close_result		1269869						
ANR	1269975	Symbol	FCLOSE_RETRY_MAX		1269869						
ANR	1269976	Symbol	* DebugLogs		1269869						
ANR	1269977	Symbol	DebugUnlockBroken		1269869						
ANR	1269978	Symbol	DebugLogs		1269869						
ANR	1269979	Symbol	( * it ) . debugFP		1269869						
ANR	1269980	Function	debug_unlock	957:0:27072:27508							
ANR	1269981	FunctionDef	debug_unlock (int debug_flags)		1269980	0					
ANR	1269982	CompoundStatement		959:0:27107:27508	1269980	0					
ANR	1269983	IdentifierDeclStatement	std :: vector < DebugFileInfo > :: iterator it ;	960:1:27110:27149	1269980	0	True				
ANR	1269984	IdentifierDecl	it		1269980	0					
ANR	1269985	IdentifierDeclType	std :: vector < DebugFileInfo > :: iterator		1269980	0					
ANR	1269986	Identifier	it		1269980	1					
ANR	1269987	ForStatement	for ( it = DebugLogs -> begin ( ) ; it < DebugLogs -> end ( ) ; it ++ )		1269980	1					
ANR	1269988	ForInit	it = DebugLogs -> begin ( ) ;	961:5:27156:27179	1269980	0	True				
ANR	1269989	AssignmentExpression	it = DebugLogs -> begin ( )		1269980	0		=			
ANR	1269990	Identifier	it		1269980	0					
ANR	1269991	CallExpression	DebugLogs -> begin ( )		1269980	1					
ANR	1269992	Callee	DebugLogs -> begin		1269980	0					
ANR	1269993	PtrMemberAccess	DebugLogs -> begin		1269980	0					
ANR	1269994	Identifier	DebugLogs		1269980	0					
ANR	1269995	Identifier	begin		1269980	1					
ANR	1269996	ArgumentList			1269980	1					
ANR	1269997	Condition	it < DebugLogs -> end ( )	961:30:27181:27201	1269980	1	True				
ANR	1269998	RelationalExpression	it < DebugLogs -> end ( )		1269980	0		<			
ANR	1269999	Identifier	it		1269980	0					
ANR	1270000	CallExpression	DebugLogs -> end ( )		1269980	1					
ANR	1270001	Callee	DebugLogs -> end		1269980	0					
ANR	1270002	PtrMemberAccess	DebugLogs -> end		1269980	0					
ANR	1270003	Identifier	DebugLogs		1269980	0					
ANR	1270004	Identifier	end		1269980	1					
ANR	1270005	ArgumentList			1269980	1					
ANR	1270006	PostIncDecOperationExpression	it ++	961:53:27204:27207	1269980	2	True				
ANR	1270007	Identifier	it		1269980	0					
ANR	1270008	IncDec	++		1269980	1					
ANR	1270009	CompoundStatement		4:1:103:103	1269980	3					
ANR	1270010	IfStatement	if ( it -> debugFlags != debug_flags )		1269980	0					
ANR	1270011	Condition	it -> debugFlags != debug_flags	968:5:27425:27453	1269980	0	True				
ANR	1270012	EqualityExpression	it -> debugFlags != debug_flags		1269980	0		!=			
ANR	1270013	PtrMemberAccess	it -> debugFlags		1269980	0					
ANR	1270014	Identifier	it		1269980	0					
ANR	1270015	Identifier	debugFlags		1269980	1					
ANR	1270016	Identifier	debug_flags		1269980	1					
ANR	1270017	ContinueStatement	continue ;	969:3:27459:27467	1269980	1	True				
ANR	1270018	ExpressionStatement	debug_unlock_it ( & ( * it ) )	970:2:27471:27494	1269980	1	True				
ANR	1270019	CallExpression	debug_unlock_it ( & ( * it ) )		1269980	0					
ANR	1270020	Callee	debug_unlock_it		1269980	0					
ANR	1270021	Identifier	debug_unlock_it		1269980	0					
ANR	1270022	ArgumentList	& ( * it )		1269980	1					
ANR	1270023	Argument	& ( * it )		1269980	0					
ANR	1270024	UnaryOperationExpression	& ( * it )		1269980	0					
ANR	1270025	UnaryOperator	&		1269980	0					
ANR	1270026	UnaryOperationExpression	* it		1269980	1					
ANR	1270027	UnaryOperator	*		1269980	0					
ANR	1270028	Identifier	it		1269980	1					
ANR	1270029	BreakStatement	break ;	971:2:27498:27503	1269980	2	True				
ANR	1270030	ReturnType	void		1269980	1					
ANR	1270031	Identifier	debug_unlock		1269980	2					
ANR	1270032	ParameterList	int debug_flags		1269980	3					
ANR	1270033	Parameter	int debug_flags	958:13:27090:27104	1269980	0	True				
ANR	1270034	ParameterType	int		1269980	0					
ANR	1270035	Identifier	debug_flags		1269980	1					
ANR	1270036	CFGEntryNode	ENTRY		1269980		True				
ANR	1270037	CFGExitNode	EXIT		1269980		True				
ANR	1270038	Symbol	DebugLogs -> end		1269980						
ANR	1270039	Symbol	debug_flags		1269980						
ANR	1270040	Symbol	* it		1269980						
ANR	1270041	Symbol	it -> debugFlags		1269980						
ANR	1270042	Symbol	DebugLogs -> begin		1269980						
ANR	1270043	Symbol	it		1269980						
ANR	1270044	Symbol	* DebugLogs		1269980						
ANR	1270045	Symbol	DebugLogs		1269980						
ANR	1270046	Function	debug_unlock_it	975:0:27511:28039							
ANR	1270047	FunctionDef	debug_unlock_it (struct DebugFileInfo * it)		1270046	0					
ANR	1270048	CompoundStatement		977:0:27565:28039	1270046	0					
ANR	1270049	IdentifierDeclStatement	priv_state priv ;	978:1:27568:27583	1270046	0	True				
ANR	1270050	IdentifierDecl	priv		1270046	0					
ANR	1270051	IdentifierDeclType	priv_state		1270046	0					
ANR	1270052	Identifier	priv		1270046	1					
ANR	1270053	IdentifierDeclStatement	int result = 0 ;	979:1:27586:27600	1270046	1	True				
ANR	1270054	IdentifierDecl	result = 0		1270046	0					
ANR	1270055	IdentifierDeclType	int		1270046	0					
ANR	1270056	Identifier	result		1270046	1					
ANR	1270057	AssignmentExpression	result = 0		1270046	2		=			
ANR	1270058	Identifier	result		1270046	0					
ANR	1270059	PrimaryExpression	0		1270046	1					
ANR	1270060	IdentifierDeclStatement	FILE * debug_file_ptr = ( * it ) . debugFP ;	981:1:27604:27640	1270046	2	True				
ANR	1270061	IdentifierDecl	* debug_file_ptr = ( * it ) . debugFP		1270046	0					
ANR	1270062	IdentifierDeclType	FILE *		1270046	0					
ANR	1270063	Identifier	debug_file_ptr		1270046	1					
ANR	1270064	AssignmentExpression	* debug_file_ptr = ( * it ) . debugFP		1270046	2		=			
ANR	1270065	Identifier	debug_file_ptr		1270046	0					
ANR	1270066	MemberAccess	( * it ) . debugFP		1270046	1					
ANR	1270067	UnaryOperationExpression	* it		1270046	0					
ANR	1270068	UnaryOperator	*		1270046	0					
ANR	1270069	Identifier	it		1270046	1					
ANR	1270070	Identifier	debugFP		1270046	1					
ANR	1270071	IfStatement	if ( log_keep_open )		1270046	3					
ANR	1270072	Condition	log_keep_open	983:4:27647:27659	1270046	0	True				
ANR	1270073	Identifier	log_keep_open		1270046	0					
ANR	1270074	ReturnStatement	return ;	984:2:27664:27670	1270046	1	True				
ANR	1270075	IfStatement	if ( DebugUnlockBroken )		1270046	4					
ANR	1270076	Condition	DebugUnlockBroken	986:5:27678:27694	1270046	0	True				
ANR	1270077	Identifier	DebugUnlockBroken		1270046	0					
ANR	1270078	CompoundStatement		10:25:132:132	1270046	1					
ANR	1270079	ReturnStatement	return ;	987:2:27702:27708	1270046	0	True				
ANR	1270080	ExpressionStatement	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"	990:1:27715:27767	1270046	5	True				
ANR	1270081	AssignmentExpression	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1270046	0		=			
ANR	1270082	Identifier	priv		1270046	0					
ANR	1270083	CallExpression	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1270046	1					
ANR	1270084	Callee	_set_priv		1270046	0					
ANR	1270085	Identifier	_set_priv		1270046	0					
ANR	1270086	ArgumentList	PRIV_CONDOR		1270046	1					
ANR	1270087	Argument	PRIV_CONDOR		1270046	0					
ANR	1270088	Identifier	PRIV_CONDOR		1270046	0					
ANR	1270089	Argument	__FILE__		1270046	1					
ANR	1270090	Identifier	__FILE__		1270046	0					
ANR	1270091	Argument	__LINE__		1270046	2					
ANR	1270092	Identifier	__LINE__		1270046	0					
ANR	1270093	Argument	0		1270046	3					
ANR	1270094	PrimaryExpression	0		1270046	0					
ANR	1270095	IfStatement	if ( debug_file_ptr )		1270046	6					
ANR	1270096	Condition	debug_file_ptr	992:5:27775:27788	1270046	0	True				
ANR	1270097	Identifier	debug_file_ptr		1270046	0					
ANR	1270098	CompoundStatement		16:21:225:225	1270046	1					
ANR	1270099	ExpressionStatement	result = fflush ( debug_file_ptr )	993:2:27795:27828	1270046	0	True				
ANR	1270100	AssignmentExpression	result = fflush ( debug_file_ptr )		1270046	0		=			
ANR	1270101	Identifier	result		1270046	0					
ANR	1270102	CallExpression	fflush ( debug_file_ptr )		1270046	1					
ANR	1270103	Callee	fflush		1270046	0					
ANR	1270104	Identifier	fflush		1270046	0					
ANR	1270105	ArgumentList	debug_file_ptr		1270046	1					
ANR	1270106	Argument	debug_file_ptr		1270046	0					
ANR	1270107	Identifier	debug_file_ptr		1270046	0					
ANR	1270108	IfStatement	if ( result < 0 )		1270046	1					
ANR	1270109	Condition	result < 0	994:6:27836:27845	1270046	0	True				
ANR	1270110	RelationalExpression	result < 0		1270046	0		<			
ANR	1270111	Identifier	result		1270046	0					
ANR	1270112	PrimaryExpression	0		1270046	1					
ANR	1270113	CompoundStatement		18:18:282:282	1270046	1					
ANR	1270114	ExpressionStatement	DebugUnlockBroken = 1	995:4:27854:27875	1270046	0	True				
ANR	1270115	AssignmentExpression	DebugUnlockBroken = 1		1270046	0		=			
ANR	1270116	Identifier	DebugUnlockBroken		1270046	0					
ANR	1270117	PrimaryExpression	1		1270046	1					
ANR	1270118	ExpressionStatement	"_condor_dprintf_exit ( errno , ""Can't fflush debug log file\\n"" )"	996:4:27881:27941	1270046	1	True				
ANR	1270119	CallExpression	"_condor_dprintf_exit ( errno , ""Can't fflush debug log file\\n"" )"		1270046	0					
ANR	1270120	Callee	_condor_dprintf_exit		1270046	0					
ANR	1270121	Identifier	_condor_dprintf_exit		1270046	0					
ANR	1270122	ArgumentList	errno		1270046	1					
ANR	1270123	Argument	errno		1270046	0					
ANR	1270124	Identifier	errno		1270046	0					
ANR	1270125	Argument	"""Can't fflush debug log file\\n"""		1270046	1					
ANR	1270126	PrimaryExpression	"""Can't fflush debug log file\\n"""		1270046	0					
ANR	1270127	ExpressionStatement	debug_close_lock ( )	999:2:27950:27968	1270046	2	True				
ANR	1270128	CallExpression	debug_close_lock ( )		1270046	0					
ANR	1270129	Callee	debug_close_lock		1270046	0					
ANR	1270130	Identifier	debug_close_lock		1270046	0					
ANR	1270131	ArgumentList			1270046	1					
ANR	1270132	ExpressionStatement	debug_close_file ( it )	1000:2:27972:27992	1270046	3	True				
ANR	1270133	CallExpression	debug_close_file ( it )		1270046	0					
ANR	1270134	Callee	debug_close_file		1270046	0					
ANR	1270135	Identifier	debug_close_file		1270046	0					
ANR	1270136	ArgumentList	it		1270046	1					
ANR	1270137	Argument	it		1270046	0					
ANR	1270138	Identifier	it		1270046	0					
ANR	1270139	ExpressionStatement	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"	1003:1:27999:28037	1270046	7	True				
ANR	1270140	CallExpression	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"		1270046	0					
ANR	1270141	Callee	_set_priv		1270046	0					
ANR	1270142	Identifier	_set_priv		1270046	0					
ANR	1270143	ArgumentList	priv		1270046	1					
ANR	1270144	Argument	priv		1270046	0					
ANR	1270145	Identifier	priv		1270046	0					
ANR	1270146	Argument	__FILE__		1270046	1					
ANR	1270147	Identifier	__FILE__		1270046	0					
ANR	1270148	Argument	__LINE__		1270046	2					
ANR	1270149	Identifier	__LINE__		1270046	0					
ANR	1270150	Argument	0		1270046	3					
ANR	1270151	PrimaryExpression	0		1270046	0					
ANR	1270152	ReturnType	static void		1270046	1					
ANR	1270153	Identifier	debug_unlock_it		1270046	2					
ANR	1270154	ParameterList	struct DebugFileInfo * it		1270046	3					
ANR	1270155	Parameter	struct DebugFileInfo * it	976:16:27539:27562	1270046	0	True				
ANR	1270156	ParameterType	struct DebugFileInfo *		1270046	0					
ANR	1270157	Identifier	it		1270046	1					
ANR	1270158	CFGEntryNode	ENTRY		1270046		True				
ANR	1270159	CFGExitNode	EXIT		1270046		True				
ANR	1270160	Symbol	fflush		1270046						
ANR	1270161	Symbol	errno		1270046						
ANR	1270162	Symbol	__FILE__		1270046						
ANR	1270163	Symbol	_set_priv		1270046						
ANR	1270164	Symbol	it		1270046						
ANR	1270165	Symbol	debug_file_ptr		1270046						
ANR	1270166	Symbol	__LINE__		1270046						
ANR	1270167	Symbol	log_keep_open		1270046						
ANR	1270168	Symbol	result		1270046						
ANR	1270169	Symbol	* it		1270046						
ANR	1270170	Symbol	priv		1270046						
ANR	1270171	Symbol	PRIV_CONDOR		1270046						
ANR	1270172	Symbol	DebugUnlockBroken		1270046						
ANR	1270173	Symbol	( * it ) . debugFP		1270046						
ANR	1270174	Function	preserve_log_file	1010:0:28114:31918							
ANR	1270175	FunctionDef	"preserve_log_file (struct DebugFileInfo * it , bool dont_panic)"		1270174	0					
ANR	1270176	CompoundStatement		1012:0:28189:31918	1270174	0					
ANR	1270177	IdentifierDeclStatement	char old [ MAXPATHLEN + 4 ] ;	1013:1:28192:28217	1270174	0	True				
ANR	1270178	IdentifierDecl	old [ MAXPATHLEN + 4 ]		1270174	0					
ANR	1270179	IdentifierDeclType	char [ MAXPATHLEN + 4 ]		1270174	0					
ANR	1270180	Identifier	old		1270174	1					
ANR	1270181	AdditiveExpression	MAXPATHLEN + 4		1270174	2		+			
ANR	1270182	Identifier	MAXPATHLEN		1270174	0					
ANR	1270183	PrimaryExpression	4		1270174	1					
ANR	1270184	IdentifierDeclStatement	priv_state priv ;	1014:1:28220:28235	1270174	1	True				
ANR	1270185	IdentifierDecl	priv		1270174	0					
ANR	1270186	IdentifierDeclType	priv_state		1270174	0					
ANR	1270187	Identifier	priv		1270174	1					
ANR	1270188	IdentifierDeclStatement	int still_in_old_file = FALSE ;	1015:1:28238:28269	1270174	2	True				
ANR	1270189	IdentifierDecl	still_in_old_file = FALSE		1270174	0					
ANR	1270190	IdentifierDeclType	int		1270174	0					
ANR	1270191	Identifier	still_in_old_file		1270174	1					
ANR	1270192	AssignmentExpression	still_in_old_file = FALSE		1270174	2		=			
ANR	1270193	Identifier	FALSE		1270174	0					
ANR	1270194	Identifier	FALSE		1270174	1					
ANR	1270195	IdentifierDeclStatement	int failed_to_rotate = FALSE ;	1016:1:28272:28302	1270174	3	True				
ANR	1270196	IdentifierDecl	failed_to_rotate = FALSE		1270174	0					
ANR	1270197	IdentifierDeclType	int		1270174	0					
ANR	1270198	Identifier	failed_to_rotate		1270174	1					
ANR	1270199	AssignmentExpression	failed_to_rotate = FALSE		1270174	2		=			
ANR	1270200	Identifier	FALSE		1270174	0					
ANR	1270201	Identifier	FALSE		1270174	1					
ANR	1270202	IdentifierDeclStatement	int save_errno ;	1017:1:28305:28321	1270174	4	True				
ANR	1270203	IdentifierDecl	save_errno		1270174	0					
ANR	1270204	IdentifierDeclType	int		1270174	0					
ANR	1270205	Identifier	save_errno		1270174	1					
ANR	1270206	IdentifierDeclStatement	int rename_failed = 0 ;	1018:1:28324:28353	1270174	5	True				
ANR	1270207	IdentifierDecl	rename_failed = 0		1270174	0					
ANR	1270208	IdentifierDeclType	int		1270174	0					
ANR	1270209	Identifier	rename_failed		1270174	1					
ANR	1270210	AssignmentExpression	rename_failed = 0		1270174	2		=			
ANR	1270211	Identifier	rename_failed		1270174	0					
ANR	1270212	PrimaryExpression	0		1270174	1					
ANR	1270213	IdentifierDeclStatement	const char * timestamp ;	1019:1:28356:28377	1270174	6	True				
ANR	1270214	IdentifierDecl	* timestamp		1270174	0					
ANR	1270215	IdentifierDeclType	const char *		1270174	0					
ANR	1270216	Identifier	timestamp		1270174	1					
ANR	1270217	IdentifierDeclStatement	int result ;	1020:1:28380:28392	1270174	7	True				
ANR	1270218	IdentifierDecl	result		1270174	0					
ANR	1270219	IdentifierDeclType	int		1270174	0					
ANR	1270220	Identifier	result		1270174	1					
ANR	1270221	IdentifierDeclStatement	int file_there = 0 ;	1021:1:28395:28415	1270174	8	True				
ANR	1270222	IdentifierDecl	file_there = 0		1270174	0					
ANR	1270223	IdentifierDeclType	int		1270174	0					
ANR	1270224	Identifier	file_there		1270174	1					
ANR	1270225	AssignmentExpression	file_there = 0		1270174	2		=			
ANR	1270226	Identifier	file_there		1270174	0					
ANR	1270227	PrimaryExpression	0		1270174	1					
ANR	1270228	IdentifierDeclStatement	FILE * debug_file_ptr = ( * it ) . debugFP ;	1022:1:28418:28455	1270174	9	True				
ANR	1270229	IdentifierDecl	* debug_file_ptr = ( * it ) . debugFP		1270174	0					
ANR	1270230	IdentifierDeclType	FILE *		1270174	0					
ANR	1270231	Identifier	debug_file_ptr		1270174	1					
ANR	1270232	AssignmentExpression	* debug_file_ptr = ( * it ) . debugFP		1270174	2		=			
ANR	1270233	Identifier	debug_file_ptr		1270174	0					
ANR	1270234	MemberAccess	( * it ) . debugFP		1270174	1					
ANR	1270235	UnaryOperationExpression	* it		1270174	0					
ANR	1270236	UnaryOperator	*		1270174	0					
ANR	1270237	Identifier	it		1270174	1					
ANR	1270238	Identifier	debugFP		1270174	1					
ANR	1270239	IdentifierDeclStatement	std :: string filePath = ( * it ) . logPath ;	1023:1:28458:28495	1270174	10	True				
ANR	1270240	IdentifierDecl	filePath = ( * it ) . logPath		1270174	0					
ANR	1270241	IdentifierDeclType	std :: string		1270174	0					
ANR	1270242	Identifier	filePath		1270174	1					
ANR	1270243	AssignmentExpression	filePath = ( * it ) . logPath		1270174	2		=			
ANR	1270244	Identifier	filePath		1270174	0					
ANR	1270245	MemberAccess	( * it ) . logPath		1270174	1					
ANR	1270246	UnaryOperationExpression	* it		1270174	0					
ANR	1270247	UnaryOperator	*		1270174	0					
ANR	1270248	Identifier	it		1270174	1					
ANR	1270249	Identifier	logPath		1270174	1					
ANR	1270250	IdentifierDeclStatement	struct stat buf ;	1025:1:28512:28527	1270174	11	True				
ANR	1270251	IdentifierDecl	buf		1270174	0					
ANR	1270252	IdentifierDeclType	struct stat		1270174	0					
ANR	1270253	Identifier	buf		1270174	1					
ANR	1270254	IdentifierDeclStatement	char msg_buf [ DPRINTF_ERR_MAX ] ;	1027:1:28537:28566	1270174	12	True				
ANR	1270255	IdentifierDecl	msg_buf [ DPRINTF_ERR_MAX ]		1270174	0					
ANR	1270256	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1270174	0					
ANR	1270257	Identifier	msg_buf		1270174	1					
ANR	1270258	Identifier	DPRINTF_ERR_MAX		1270174	2					
ANR	1270259	ExpressionStatement	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"	1030:1:28571:28623	1270174	13	True				
ANR	1270260	AssignmentExpression	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1270174	0		=			
ANR	1270261	Identifier	priv		1270174	0					
ANR	1270262	CallExpression	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1270174	1					
ANR	1270263	Callee	_set_priv		1270174	0					
ANR	1270264	Identifier	_set_priv		1270174	0					
ANR	1270265	ArgumentList	PRIV_CONDOR		1270174	1					
ANR	1270266	Argument	PRIV_CONDOR		1270174	0					
ANR	1270267	Identifier	PRIV_CONDOR		1270174	0					
ANR	1270268	Argument	__FILE__		1270174	1					
ANR	1270269	Identifier	__FILE__		1270174	0					
ANR	1270270	Argument	__LINE__		1270174	2					
ANR	1270271	Identifier	__LINE__		1270174	0					
ANR	1270272	Argument	0		1270174	3					
ANR	1270273	PrimaryExpression	0		1270174	0					
ANR	1270274	ExpressionStatement	( void ) setBaseName ( filePath . c_str ( ) )	1031:1:28626:28661	1270174	14	True				
ANR	1270275	CastExpression	( void ) setBaseName ( filePath . c_str ( ) )		1270174	0					
ANR	1270276	CastTarget	void		1270174	0					
ANR	1270277	CallExpression	setBaseName ( filePath . c_str ( ) )		1270174	1					
ANR	1270278	Callee	setBaseName		1270174	0					
ANR	1270279	Identifier	setBaseName		1270174	0					
ANR	1270280	ArgumentList	filePath . c_str ( )		1270174	1					
ANR	1270281	Argument	filePath . c_str ( )		1270174	0					
ANR	1270282	CallExpression	filePath . c_str ( )		1270174	0					
ANR	1270283	Callee	filePath . c_str		1270174	0					
ANR	1270284	MemberAccess	filePath . c_str		1270174	0					
ANR	1270285	Identifier	filePath		1270174	0					
ANR	1270286	Identifier	c_str		1270174	1					
ANR	1270287	ArgumentList			1270174	1					
ANR	1270288	ExpressionStatement	"timestamp = createRotateFilename ( NULL , it -> maxLogNum )"	1032:1:28664:28717	1270174	15	True				
ANR	1270289	AssignmentExpression	"timestamp = createRotateFilename ( NULL , it -> maxLogNum )"		1270174	0		=			
ANR	1270290	Identifier	timestamp		1270174	0					
ANR	1270291	CallExpression	"createRotateFilename ( NULL , it -> maxLogNum )"		1270174	1					
ANR	1270292	Callee	createRotateFilename		1270174	0					
ANR	1270293	Identifier	createRotateFilename		1270174	0					
ANR	1270294	ArgumentList	NULL		1270174	1					
ANR	1270295	Argument	NULL		1270174	0					
ANR	1270296	Identifier	NULL		1270174	0					
ANR	1270297	Argument	it -> maxLogNum		1270174	1					
ANR	1270298	PtrMemberAccess	it -> maxLogNum		1270174	0					
ANR	1270299	Identifier	it		1270174	0					
ANR	1270300	Identifier	maxLogNum		1270174	1					
ANR	1270301	ExpressionStatement	"( void ) sprintf ( old , ""%s.%s"" , filePath . c_str ( ) , timestamp )"	1033:1:28720:28778	1270174	16	True				
ANR	1270302	CastExpression	"( void ) sprintf ( old , ""%s.%s"" , filePath . c_str ( ) , timestamp )"		1270174	0					
ANR	1270303	CastTarget	void		1270174	0					
ANR	1270304	CallExpression	"sprintf ( old , ""%s.%s"" , filePath . c_str ( ) , timestamp )"		1270174	1					
ANR	1270305	Callee	sprintf		1270174	0					
ANR	1270306	Identifier	sprintf		1270174	0					
ANR	1270307	ArgumentList	old		1270174	1					
ANR	1270308	Argument	old		1270174	0					
ANR	1270309	Identifier	old		1270174	0					
ANR	1270310	Argument	"""%s.%s"""		1270174	1					
ANR	1270311	PrimaryExpression	"""%s.%s"""		1270174	0					
ANR	1270312	Argument	filePath . c_str ( )		1270174	2					
ANR	1270313	CallExpression	filePath . c_str ( )		1270174	0					
ANR	1270314	Callee	filePath . c_str		1270174	0					
ANR	1270315	MemberAccess	filePath . c_str		1270174	0					
ANR	1270316	Identifier	filePath		1270174	0					
ANR	1270317	Identifier	c_str		1270174	1					
ANR	1270318	ArgumentList			1270174	1					
ANR	1270319	Argument	timestamp		1270174	3					
ANR	1270320	Identifier	timestamp		1270174	0					
ANR	1270321	ExpressionStatement	"_condor_dfprintf ( debug_file_ptr , ""Saving log file to \\""%s\\""\\n"" , old )"	1034:1:28781:28851	1270174	17	True				
ANR	1270322	CallExpression	"_condor_dfprintf ( debug_file_ptr , ""Saving log file to \\""%s\\""\\n"" , old )"		1270174	0					
ANR	1270323	Callee	_condor_dfprintf		1270174	0					
ANR	1270324	Identifier	_condor_dfprintf		1270174	0					
ANR	1270325	ArgumentList	debug_file_ptr		1270174	1					
ANR	1270326	Argument	debug_file_ptr		1270174	0					
ANR	1270327	Identifier	debug_file_ptr		1270174	0					
ANR	1270328	Argument	"""Saving log file to \\""%s\\""\\n"""		1270174	1					
ANR	1270329	PrimaryExpression	"""Saving log file to \\""%s\\""\\n"""		1270174	0					
ANR	1270330	Argument	old		1270174	2					
ANR	1270331	Identifier	old		1270174	0					
ANR	1270332	ExpressionStatement	( void ) fflush ( debug_file_ptr )	1035:1:28854:28884	1270174	18	True				
ANR	1270333	CastExpression	( void ) fflush ( debug_file_ptr )		1270174	0					
ANR	1270334	CastTarget	void		1270174	0					
ANR	1270335	CallExpression	fflush ( debug_file_ptr )		1270174	1					
ANR	1270336	Callee	fflush		1270174	0					
ANR	1270337	Identifier	fflush		1270174	0					
ANR	1270338	ArgumentList	debug_file_ptr		1270174	1					
ANR	1270339	Argument	debug_file_ptr		1270174	0					
ANR	1270340	Identifier	debug_file_ptr		1270174	0					
ANR	1270341	ExpressionStatement	"fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX )"	1037:1:28888:28938	1270174	19	True				
ANR	1270342	CallExpression	"fclose_wrapper ( debug_file_ptr , FCLOSE_RETRY_MAX )"		1270174	0					
ANR	1270343	Callee	fclose_wrapper		1270174	0					
ANR	1270344	Identifier	fclose_wrapper		1270174	0					
ANR	1270345	ArgumentList	debug_file_ptr		1270174	1					
ANR	1270346	Argument	debug_file_ptr		1270174	0					
ANR	1270347	Identifier	debug_file_ptr		1270174	0					
ANR	1270348	Argument	FCLOSE_RETRY_MAX		1270174	1					
ANR	1270349	Identifier	FCLOSE_RETRY_MAX		1270174	0					
ANR	1270350	ExpressionStatement	debug_file_ptr = NULL	1038:1:28941:28962	1270174	20	True				
ANR	1270351	AssignmentExpression	debug_file_ptr = NULL		1270174	0		=			
ANR	1270352	Identifier	debug_file_ptr		1270174	0					
ANR	1270353	Identifier	NULL		1270174	1					
ANR	1270354	ExpressionStatement	( * it ) . debugFP = debug_file_ptr	1039:1:28965:28995	1270174	21	True				
ANR	1270355	AssignmentExpression	( * it ) . debugFP = debug_file_ptr		1270174	0		=			
ANR	1270356	MemberAccess	( * it ) . debugFP		1270174	0					
ANR	1270357	UnaryOperationExpression	* it		1270174	0					
ANR	1270358	UnaryOperator	*		1270174	0					
ANR	1270359	Identifier	it		1270174	1					
ANR	1270360	Identifier	debugFP		1270174	1					
ANR	1270361	Identifier	debug_file_ptr		1270174	1					
ANR	1270362	ExpressionStatement	"result = rotateTimestamp ( timestamp , it -> maxLogNum )"	1041:1:28999:29049	1270174	22	True				
ANR	1270363	AssignmentExpression	"result = rotateTimestamp ( timestamp , it -> maxLogNum )"		1270174	0		=			
ANR	1270364	Identifier	result		1270174	0					
ANR	1270365	CallExpression	"rotateTimestamp ( timestamp , it -> maxLogNum )"		1270174	1					
ANR	1270366	Callee	rotateTimestamp		1270174	0					
ANR	1270367	Identifier	rotateTimestamp		1270174	0					
ANR	1270368	ArgumentList	timestamp		1270174	1					
ANR	1270369	Argument	timestamp		1270174	0					
ANR	1270370	Identifier	timestamp		1270174	0					
ANR	1270371	Argument	it -> maxLogNum		1270174	1					
ANR	1270372	PtrMemberAccess	it -> maxLogNum		1270174	0					
ANR	1270373	Identifier	it		1270174	0					
ANR	1270374	Identifier	maxLogNum		1270174	1					
ANR	1270375	IfStatement	if ( result < 0 )		1270174	23					
ANR	1270376	Condition	result < 0	1044:5:29076:29085	1270174	0	True				
ANR	1270377	RelationalExpression	result < 0		1270174	0		<			
ANR	1270378	Identifier	result		1270174	0					
ANR	1270379	PrimaryExpression	0		1270174	1					
ANR	1270380	CompoundStatement		33:17:898:898	1270174	1					
ANR	1270381	ExpressionStatement	failed_to_rotate = TRUE	1045:2:29122:29145	1270174	0	True				
ANR	1270382	AssignmentExpression	failed_to_rotate = TRUE		1270174	0		=			
ANR	1270383	Identifier	failed_to_rotate		1270174	0					
ANR	1270384	Identifier	TRUE		1270174	1					
ANR	1270385	ExpressionStatement	"debug_file_ptr = open_debug_file ( it , ""wN"" , dont_panic )"	1046:2:29149:29203	1270174	1	True				
ANR	1270386	AssignmentExpression	"debug_file_ptr = open_debug_file ( it , ""wN"" , dont_panic )"		1270174	0		=			
ANR	1270387	Identifier	debug_file_ptr		1270174	0					
ANR	1270388	CallExpression	"open_debug_file ( it , ""wN"" , dont_panic )"		1270174	1					
ANR	1270389	Callee	open_debug_file		1270174	0					
ANR	1270390	Identifier	open_debug_file		1270174	0					
ANR	1270391	ArgumentList	it		1270174	1					
ANR	1270392	Argument	it		1270174	0					
ANR	1270393	Identifier	it		1270174	0					
ANR	1270394	Argument	"""wN"""		1270174	1					
ANR	1270395	PrimaryExpression	"""wN"""		1270174	0					
ANR	1270396	Argument	dont_panic		1270174	2					
ANR	1270397	Identifier	dont_panic		1270174	0					
ANR	1270398	IfStatement	if ( debug_file_ptr == NULL )		1270174	2					
ANR	1270399	Condition	debug_file_ptr == NULL	1047:7:29212:29234	1270174	0	True				
ANR	1270400	EqualityExpression	debug_file_ptr == NULL		1270174	0		==			
ANR	1270401	Identifier	debug_file_ptr		1270174	0					
ANR	1270402	Identifier	NULL		1270174	1					
ANR	1270403	CompoundStatement		36:33:1048:1048	1270174	1					
ANR	1270404	ExpressionStatement	still_in_old_file = TRUE	1048:3:29243:29267	1270174	0	True				
ANR	1270405	AssignmentExpression	still_in_old_file = TRUE		1270174	0		=			
ANR	1270406	Identifier	still_in_old_file		1270174	0					
ANR	1270407	Identifier	TRUE		1270174	1					
ANR	1270408	IfStatement	if ( debug_file_ptr == NULL )		1270174	24					
ANR	1270409	Condition	debug_file_ptr == NULL	1098:5:30725:30746	1270174	0	True				
ANR	1270410	EqualityExpression	debug_file_ptr == NULL		1270174	0		==			
ANR	1270411	Identifier	debug_file_ptr		1270174	0					
ANR	1270412	Identifier	NULL		1270174	1					
ANR	1270413	CompoundStatement		87:29:2559:2559	1270174	1					
ANR	1270414	ExpressionStatement	"debug_file_ptr = open_debug_file ( it , ""aN"" , dont_panic )"	1099:2:30753:30807	1270174	0	True				
ANR	1270415	AssignmentExpression	"debug_file_ptr = open_debug_file ( it , ""aN"" , dont_panic )"		1270174	0		=			
ANR	1270416	Identifier	debug_file_ptr		1270174	0					
ANR	1270417	CallExpression	"open_debug_file ( it , ""aN"" , dont_panic )"		1270174	1					
ANR	1270418	Callee	open_debug_file		1270174	0					
ANR	1270419	Identifier	open_debug_file		1270174	0					
ANR	1270420	ArgumentList	it		1270174	1					
ANR	1270421	Argument	it		1270174	0					
ANR	1270422	Identifier	it		1270174	0					
ANR	1270423	Argument	"""aN"""		1270174	1					
ANR	1270424	PrimaryExpression	"""aN"""		1270174	0					
ANR	1270425	Argument	dont_panic		1270174	2					
ANR	1270426	Identifier	dont_panic		1270174	0					
ANR	1270427	IfStatement	if ( debug_file_ptr == NULL )		1270174	25					
ANR	1270428	Condition	debug_file_ptr == NULL	1102:5:30818:30839	1270174	0	True				
ANR	1270429	EqualityExpression	debug_file_ptr == NULL		1270174	0		==			
ANR	1270430	Identifier	debug_file_ptr		1270174	0					
ANR	1270431	Identifier	NULL		1270174	1					
ANR	1270432	CompoundStatement		91:30:2653:2653	1270174	1					
ANR	1270433	ExpressionStatement	debug_file_ptr = stderr	1103:2:30847:30870	1270174	0	True				
ANR	1270434	AssignmentExpression	debug_file_ptr = stderr		1270174	0		=			
ANR	1270435	Identifier	debug_file_ptr		1270174	0					
ANR	1270436	Identifier	stderr		1270174	1					
ANR	1270437	ExpressionStatement	save_errno = errno	1105:2:30875:30893	1270174	1	True				
ANR	1270438	AssignmentExpression	save_errno = errno		1270174	0		=			
ANR	1270439	Identifier	save_errno		1270174	0					
ANR	1270440	Identifier	errno		1270174	1					
ANR	1270441	ExpressionStatement	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't open file for debug level %d\\n"" , it -> debugFlags )"	1106:2:30897:30994	1270174	2	True				
ANR	1270442	CallExpression	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't open file for debug level %d\\n"" , it -> debugFlags )"		1270174	0					
ANR	1270443	Callee	snprintf		1270174	0					
ANR	1270444	Identifier	snprintf		1270174	0					
ANR	1270445	ArgumentList	msg_buf		1270174	1					
ANR	1270446	Argument	msg_buf		1270174	0					
ANR	1270447	Identifier	msg_buf		1270174	0					
ANR	1270448	Argument	sizeof ( msg_buf )		1270174	1					
ANR	1270449	SizeofExpression	sizeof ( msg_buf )		1270174	0					
ANR	1270450	Sizeof	sizeof		1270174	0					
ANR	1270451	SizeofOperand	msg_buf		1270174	1					
ANR	1270452	Argument	"""Can't open file for debug level %d\\n"""		1270174	2					
ANR	1270453	PrimaryExpression	"""Can't open file for debug level %d\\n"""		1270174	0					
ANR	1270454	Argument	it -> debugFlags		1270174	3					
ANR	1270455	PtrMemberAccess	it -> debugFlags		1270174	0					
ANR	1270456	Identifier	it		1270174	0					
ANR	1270457	Identifier	debugFlags		1270174	1					
ANR	1270458	ExpressionStatement	"_condor_dprintf_exit ( save_errno , msg_buf )"	1108:2:30999:31042	1270174	3	True				
ANR	1270459	CallExpression	"_condor_dprintf_exit ( save_errno , msg_buf )"		1270174	0					
ANR	1270460	Callee	_condor_dprintf_exit		1270174	0					
ANR	1270461	Identifier	_condor_dprintf_exit		1270174	0					
ANR	1270462	ArgumentList	save_errno		1270174	1					
ANR	1270463	Argument	save_errno		1270174	0					
ANR	1270464	Identifier	save_errno		1270174	0					
ANR	1270465	Argument	msg_buf		1270174	1					
ANR	1270466	Identifier	msg_buf		1270174	0					
ANR	1270467	IfStatement	if ( ! still_in_old_file )		1270174	26					
ANR	1270468	Condition	! still_in_old_file	1111:6:31054:31071	1270174	0	True				
ANR	1270469	UnaryOperationExpression	! still_in_old_file		1270174	0					
ANR	1270470	UnaryOperator	!		1270174	0					
ANR	1270471	Identifier	still_in_old_file		1270174	1					
ANR	1270472	CompoundStatement		100:27:2885:2885	1270174	1					
ANR	1270473	ExpressionStatement	"_condor_dfprintf ( debug_file_ptr , ""Now in new log file %s\\n"" , it -> logPath . c_str ( ) )"	1112:2:31079:31161	1270174	0	True				
ANR	1270474	CallExpression	"_condor_dfprintf ( debug_file_ptr , ""Now in new log file %s\\n"" , it -> logPath . c_str ( ) )"		1270174	0					
ANR	1270475	Callee	_condor_dfprintf		1270174	0					
ANR	1270476	Identifier	_condor_dfprintf		1270174	0					
ANR	1270477	ArgumentList	debug_file_ptr		1270174	1					
ANR	1270478	Argument	debug_file_ptr		1270174	0					
ANR	1270479	Identifier	debug_file_ptr		1270174	0					
ANR	1270480	Argument	"""Now in new log file %s\\n"""		1270174	1					
ANR	1270481	PrimaryExpression	"""Now in new log file %s\\n"""		1270174	0					
ANR	1270482	Argument	it -> logPath . c_str ( )		1270174	2					
ANR	1270483	CallExpression	it -> logPath . c_str ( )		1270174	0					
ANR	1270484	Callee	it -> logPath . c_str		1270174	0					
ANR	1270485	MemberAccess	it -> logPath . c_str		1270174	0					
ANR	1270486	PtrMemberAccess	it -> logPath		1270174	0					
ANR	1270487	Identifier	it		1270174	0					
ANR	1270488	Identifier	logPath		1270174	1					
ANR	1270489	Identifier	c_str		1270174	1					
ANR	1270490	ArgumentList			1270174	1					
ANR	1270491	IfStatement	if ( file_there > 0 )		1270174	27					
ANR	1270492	Condition	file_there > 0	1117:5:31323:31336	1270174	0	True				
ANR	1270493	RelationalExpression	file_there > 0		1270174	0		>			
ANR	1270494	Identifier	file_there		1270174	0					
ANR	1270495	PrimaryExpression	0		1270174	1					
ANR	1270496	CompoundStatement		106:21:3149:3149	1270174	1					
ANR	1270497	ExpressionStatement	"_condor_dfprintf ( debug_file_ptr , ""WARNING: %s"" , msg_buf )"	1118:2:31343:31399	1270174	0	True				
ANR	1270498	CallExpression	"_condor_dfprintf ( debug_file_ptr , ""WARNING: %s"" , msg_buf )"		1270174	0					
ANR	1270499	Callee	_condor_dfprintf		1270174	0					
ANR	1270500	Identifier	_condor_dfprintf		1270174	0					
ANR	1270501	ArgumentList	debug_file_ptr		1270174	1					
ANR	1270502	Argument	debug_file_ptr		1270174	0					
ANR	1270503	Identifier	debug_file_ptr		1270174	0					
ANR	1270504	Argument	"""WARNING: %s"""		1270174	1					
ANR	1270505	PrimaryExpression	"""WARNING: %s"""		1270174	0					
ANR	1270506	Argument	msg_buf		1270174	2					
ANR	1270507	Identifier	msg_buf		1270174	0					
ANR	1270508	IfStatement	if ( failed_to_rotate || rename_failed )		1270174	28					
ANR	1270509	Condition	failed_to_rotate || rename_failed	1121:6:31411:31443	1270174	0	True				
ANR	1270510	OrExpression	failed_to_rotate || rename_failed		1270174	0		||			
ANR	1270511	Identifier	failed_to_rotate		1270174	0					
ANR	1270512	Identifier	rename_failed		1270174	1					
ANR	1270513	CompoundStatement		110:42:3257:3257	1270174	1					
ANR	1270514	ExpressionStatement	"_condor_dfprintf ( debug_file_ptr , ""WARNING: Failed to rotate log into file %s!\\n"" , old )"	1122:2:31451:31535	1270174	0	True				
ANR	1270515	CallExpression	"_condor_dfprintf ( debug_file_ptr , ""WARNING: Failed to rotate log into file %s!\\n"" , old )"		1270174	0					
ANR	1270516	Callee	_condor_dfprintf		1270174	0					
ANR	1270517	Identifier	_condor_dfprintf		1270174	0					
ANR	1270518	ArgumentList	debug_file_ptr		1270174	1					
ANR	1270519	Argument	debug_file_ptr		1270174	0					
ANR	1270520	Identifier	debug_file_ptr		1270174	0					
ANR	1270521	Argument	"""WARNING: Failed to rotate log into file %s!\\n"""		1270174	1					
ANR	1270522	PrimaryExpression	"""WARNING: Failed to rotate log into file %s!\\n"""		1270174	0					
ANR	1270523	Argument	old		1270174	2					
ANR	1270524	Identifier	old		1270174	0					
ANR	1270525	IfStatement	if ( rename_failed )		1270174	1					
ANR	1270526	Condition	rename_failed	1123:6:31543:31555	1270174	0	True				
ANR	1270527	Identifier	rename_failed		1270174	0					
ANR	1270528	CompoundStatement		112:22:3369:3369	1270174	1					
ANR	1270529	ExpressionStatement	"_condor_dfprintf ( debug_file_ptr , ""Likely cause is that another Condor process rotated the file at the same time.\\n"" )"	1124:3:31564:31679	1270174	0	True				
ANR	1270530	CallExpression	"_condor_dfprintf ( debug_file_ptr , ""Likely cause is that another Condor process rotated the file at the same time.\\n"" )"		1270174	0					
ANR	1270531	Callee	_condor_dfprintf		1270174	0					
ANR	1270532	Identifier	_condor_dfprintf		1270174	0					
ANR	1270533	ArgumentList	debug_file_ptr		1270174	1					
ANR	1270534	Argument	debug_file_ptr		1270174	0					
ANR	1270535	Identifier	debug_file_ptr		1270174	0					
ANR	1270536	Argument	"""Likely cause is that another Condor process rotated the file at the same time.\\n"""		1270174	1					
ANR	1270537	PrimaryExpression	"""Likely cause is that another Condor process rotated the file at the same time.\\n"""		1270174	0					
ANR	1270538	ElseStatement	else		1270174	0					
ANR	1270539	CompoundStatement		115:7:3502:3502	1270174	0					
ANR	1270540	ExpressionStatement	"_condor_dfprintf ( debug_file_ptr , ""       Perhaps someone is keeping log files open???"" )"	1127:3:31697:31783	1270174	0	True				
ANR	1270541	CallExpression	"_condor_dfprintf ( debug_file_ptr , ""       Perhaps someone is keeping log files open???"" )"		1270174	0					
ANR	1270542	Callee	_condor_dfprintf		1270174	0					
ANR	1270543	Identifier	_condor_dfprintf		1270174	0					
ANR	1270544	ArgumentList	debug_file_ptr		1270174	1					
ANR	1270545	Argument	debug_file_ptr		1270174	0					
ANR	1270546	Identifier	debug_file_ptr		1270174	0					
ANR	1270547	Argument	"""       Perhaps someone is keeping log files open???"""		1270174	1					
ANR	1270548	PrimaryExpression	"""       Perhaps someone is keeping log files open???"""		1270174	0					
ANR	1270549	ExpressionStatement	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"	1131:1:31795:31833	1270174	29	True				
ANR	1270550	CallExpression	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"		1270174	0					
ANR	1270551	Callee	_set_priv		1270174	0					
ANR	1270552	Identifier	_set_priv		1270174	0					
ANR	1270553	ArgumentList	priv		1270174	1					
ANR	1270554	Argument	priv		1270174	0					
ANR	1270555	Identifier	priv		1270174	0					
ANR	1270556	Argument	__FILE__		1270174	1					
ANR	1270557	Identifier	__FILE__		1270174	0					
ANR	1270558	Argument	__LINE__		1270174	2					
ANR	1270559	Identifier	__LINE__		1270174	0					
ANR	1270560	Argument	0		1270174	3					
ANR	1270561	PrimaryExpression	0		1270174	0					
ANR	1270562	ExpressionStatement	cleanUp ( it -> maxLogNum )	1132:1:31836:31858	1270174	30	True				
ANR	1270563	CallExpression	cleanUp ( it -> maxLogNum )		1270174	0					
ANR	1270564	Callee	cleanUp		1270174	0					
ANR	1270565	Identifier	cleanUp		1270174	0					
ANR	1270566	ArgumentList	it -> maxLogNum		1270174	1					
ANR	1270567	Argument	it -> maxLogNum		1270174	0					
ANR	1270568	PtrMemberAccess	it -> maxLogNum		1270174	0					
ANR	1270569	Identifier	it		1270174	0					
ANR	1270570	Identifier	maxLogNum		1270174	1					
ANR	1270571	ExpressionStatement	( * it ) . debugFP = debug_file_ptr	1133:1:31861:31891	1270174	31	True				
ANR	1270572	AssignmentExpression	( * it ) . debugFP = debug_file_ptr		1270174	0		=			
ANR	1270573	MemberAccess	( * it ) . debugFP		1270174	0					
ANR	1270574	UnaryOperationExpression	* it		1270174	0					
ANR	1270575	UnaryOperator	*		1270174	0					
ANR	1270576	Identifier	it		1270174	1					
ANR	1270577	Identifier	debugFP		1270174	1					
ANR	1270578	Identifier	debug_file_ptr		1270174	1					
ANR	1270579	ReturnStatement	return debug_file_ptr ;	1135:1:31895:31916	1270174	32	True				
ANR	1270580	Identifier	debug_file_ptr		1270174	0					
ANR	1270581	ReturnType	static FILE *		1270174	1					
ANR	1270582	Identifier	preserve_log_file		1270174	2					
ANR	1270583	ParameterList	"struct DebugFileInfo * it , bool dont_panic"		1270174	3					
ANR	1270584	Parameter	struct DebugFileInfo * it	1011:18:28146:28169	1270174	0	True				
ANR	1270585	ParameterType	struct DebugFileInfo *		1270174	0					
ANR	1270586	Identifier	it		1270174	1					
ANR	1270587	Parameter	bool dont_panic	1011:44:28172:28186	1270174	1	True				
ANR	1270588	ParameterType	bool		1270174	0					
ANR	1270589	Identifier	dont_panic		1270174	1					
ANR	1270590	CFGEntryNode	ENTRY		1270174		True				
ANR	1270591	CFGExitNode	EXIT		1270174		True				
ANR	1270592	Symbol	failed_to_rotate		1270174						
ANR	1270593	Symbol	it -> debugFlags		1270174						
ANR	1270594	Symbol	_set_priv		1270174						
ANR	1270595	Symbol	save_errno		1270174						
ANR	1270596	Symbol	it -> maxLogNum		1270174						
ANR	1270597	Symbol	result		1270174						
ANR	1270598	Symbol	( * it ) . logPath		1270174						
ANR	1270599	Symbol	rename_failed		1270174						
ANR	1270600	Symbol	filePath . c_str		1270174						
ANR	1270601	Symbol	priv		1270174						
ANR	1270602	Symbol	FCLOSE_RETRY_MAX		1270174						
ANR	1270603	Symbol	timestamp		1270174						
ANR	1270604	Symbol	rotateTimestamp		1270174						
ANR	1270605	Symbol	errno		1270174						
ANR	1270606	Symbol	NULL		1270174						
ANR	1270607	Symbol	old		1270174						
ANR	1270608	Symbol	it -> logPath . c_str		1270174						
ANR	1270609	Symbol	filePath		1270174						
ANR	1270610	Symbol	__FILE__		1270174						
ANR	1270611	Symbol	open_debug_file		1270174						
ANR	1270612	Symbol	msg_buf		1270174						
ANR	1270613	Symbol	TRUE		1270174						
ANR	1270614	Symbol	still_in_old_file		1270174						
ANR	1270615	Symbol	it		1270174						
ANR	1270616	Symbol	stderr		1270174						
ANR	1270617	Symbol	dont_panic		1270174						
ANR	1270618	Symbol	debug_file_ptr		1270174						
ANR	1270619	Symbol	__LINE__		1270174						
ANR	1270620	Symbol	* it		1270174						
ANR	1270621	Symbol	buf		1270174						
ANR	1270622	Symbol	file_there		1270174						
ANR	1270623	Symbol	FALSE		1270174						
ANR	1270624	Symbol	PRIV_CONDOR		1270174						
ANR	1270625	Symbol	( * it ) . debugFP		1270174						
ANR	1270626	Symbol	createRotateFilename		1270174						
ANR	1270627	Symbol	it -> logPath		1270174						
ANR	1270628	Function	_condor_fd_panic	1144:0:32051:33216							
ANR	1270629	FunctionDef	"_condor_fd_panic (int line , const char * file)"		1270628	0					
ANR	1270630	CompoundStatement		1146:0:32103:33216	1270628	0					
ANR	1270631	IdentifierDeclStatement	int i ;	1147:1:32106:32111	1270628	0	True				
ANR	1270632	IdentifierDecl	i		1270628	0					
ANR	1270633	IdentifierDeclType	int		1270628	0					
ANR	1270634	Identifier	i		1270628	1					
ANR	1270635	IdentifierDeclStatement	char msg_buf [ DPRINTF_ERR_MAX ] ;	1148:1:32114:32143	1270628	1	True				
ANR	1270636	IdentifierDecl	msg_buf [ DPRINTF_ERR_MAX ]		1270628	0					
ANR	1270637	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1270628	0					
ANR	1270638	Identifier	msg_buf		1270628	1					
ANR	1270639	Identifier	DPRINTF_ERR_MAX		1270628	2					
ANR	1270640	IdentifierDeclStatement	char panic_msg [ DPRINTF_ERR_MAX ] ;	1149:1:32146:32177	1270628	2	True				
ANR	1270641	IdentifierDecl	panic_msg [ DPRINTF_ERR_MAX ]		1270628	0					
ANR	1270642	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1270628	0					
ANR	1270643	Identifier	panic_msg		1270628	1					
ANR	1270644	Identifier	DPRINTF_ERR_MAX		1270628	2					
ANR	1270645	IdentifierDeclStatement	int save_errno ;	1150:1:32180:32194	1270628	3	True				
ANR	1270646	IdentifierDecl	save_errno		1270628	0					
ANR	1270647	IdentifierDeclType	int		1270628	0					
ANR	1270648	Identifier	save_errno		1270628	1					
ANR	1270649	IdentifierDeclStatement	std :: vector < DebugFileInfo > :: iterator it ;	1151:1:32197:32236	1270628	4	True				
ANR	1270650	IdentifierDecl	it		1270628	0					
ANR	1270651	IdentifierDeclType	std :: vector < DebugFileInfo > :: iterator		1270628	0					
ANR	1270652	Identifier	it		1270628	1					
ANR	1270653	IdentifierDeclStatement	std :: string filePath ;	1152:1:32239:32259	1270628	5	True				
ANR	1270654	IdentifierDecl	filePath		1270628	0					
ANR	1270655	IdentifierDeclType	std :: string		1270628	0					
ANR	1270656	Identifier	filePath		1270628	1					
ANR	1270657	IdentifierDeclStatement	bool fileExists = false ;	1153:1:32262:32285	1270628	6	True				
ANR	1270658	IdentifierDecl	fileExists = false		1270628	0					
ANR	1270659	IdentifierDeclType	bool		1270628	0					
ANR	1270660	Identifier	fileExists		1270628	1					
ANR	1270661	AssignmentExpression	fileExists = false		1270628	2		=			
ANR	1270662	Identifier	false		1270628	0					
ANR	1270663	Identifier	false		1270628	1					
ANR	1270664	IdentifierDeclStatement	FILE * debug_file_ptr = 0 ;	1154:1:32288:32310	1270628	7	True				
ANR	1270665	IdentifierDecl	* debug_file_ptr = 0		1270628	0					
ANR	1270666	IdentifierDeclType	FILE *		1270628	0					
ANR	1270667	Identifier	debug_file_ptr		1270628	1					
ANR	1270668	AssignmentExpression	* debug_file_ptr = 0		1270628	2		=			
ANR	1270669	Identifier	debug_file_ptr		1270628	0					
ANR	1270670	PrimaryExpression	0		1270628	1					
ANR	1270671	ExpressionStatement	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"	1156:1:32314:32359	1270628	8	True				
ANR	1270672	CallExpression	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1270628	0					
ANR	1270673	Callee	_set_priv		1270628	0					
ANR	1270674	Identifier	_set_priv		1270628	0					
ANR	1270675	ArgumentList	PRIV_CONDOR		1270628	1					
ANR	1270676	Argument	PRIV_CONDOR		1270628	0					
ANR	1270677	Identifier	PRIV_CONDOR		1270628	0					
ANR	1270678	Argument	__FILE__		1270628	1					
ANR	1270679	Identifier	__FILE__		1270628	0					
ANR	1270680	Argument	__LINE__		1270628	2					
ANR	1270681	Identifier	__LINE__		1270628	0					
ANR	1270682	Argument	0		1270628	3					
ANR	1270683	PrimaryExpression	0		1270628	0					
ANR	1270684	ExpressionStatement	"snprintf ( panic_msg , sizeof ( panic_msg ) , ""**** PANIC -- OUT OF FILE DESCRIPTORS at line %d in %s"" , line , file )"	1158:1:32363:32481	1270628	9	True				
ANR	1270685	CallExpression	"snprintf ( panic_msg , sizeof ( panic_msg ) , ""**** PANIC -- OUT OF FILE DESCRIPTORS at line %d in %s"" , line , file )"		1270628	0					
ANR	1270686	Callee	snprintf		1270628	0					
ANR	1270687	Identifier	snprintf		1270628	0					
ANR	1270688	ArgumentList	panic_msg		1270628	1					
ANR	1270689	Argument	panic_msg		1270628	0					
ANR	1270690	Identifier	panic_msg		1270628	0					
ANR	1270691	Argument	sizeof ( panic_msg )		1270628	1					
ANR	1270692	SizeofExpression	sizeof ( panic_msg )		1270628	0					
ANR	1270693	Sizeof	sizeof		1270628	0					
ANR	1270694	SizeofOperand	panic_msg		1270628	1					
ANR	1270695	Argument	"""**** PANIC -- OUT OF FILE DESCRIPTORS at line %d in %s"""		1270628	2					
ANR	1270696	PrimaryExpression	"""**** PANIC -- OUT OF FILE DESCRIPTORS at line %d in %s"""		1270628	0					
ANR	1270697	Argument	line		1270628	3					
ANR	1270698	Identifier	line		1270628	0					
ANR	1270699	Argument	file		1270628	4					
ANR	1270700	Identifier	file		1270628	0					
ANR	1270701	ForStatement	for ( i = 0 ; i < 50 ; i ++ )		1270628	10					
ANR	1270702	ForInit	i = 0 ;	1163:7:32553:32557	1270628	0	True				
ANR	1270703	AssignmentExpression	i = 0		1270628	0		=			
ANR	1270704	Identifier	i		1270628	0					
ANR	1270705	PrimaryExpression	0		1270628	1					
ANR	1270706	Condition	i < 50	1163:13:32559:32562	1270628	1	True				
ANR	1270707	RelationalExpression	i < 50		1270628	0		<			
ANR	1270708	Identifier	i		1270628	0					
ANR	1270709	PrimaryExpression	50		1270628	1					
ANR	1270710	PostIncDecOperationExpression	i ++	1163:20:32566:32568	1270628	2	True				
ANR	1270711	Identifier	i		1270628	0					
ANR	1270712	IncDec	++		1270628	1					
ANR	1270713	CompoundStatement		18:26:468:468	1270628	3					
ANR	1270714	ExpressionStatement	( void ) close ( i )	1164:2:32576:32592	1270628	0	True				
ANR	1270715	CastExpression	( void ) close ( i )		1270628	0					
ANR	1270716	CastTarget	void		1270628	0					
ANR	1270717	CallExpression	close ( i )		1270628	1					
ANR	1270718	Callee	close		1270628	0					
ANR	1270719	Identifier	close		1270628	0					
ANR	1270720	ArgumentList	i		1270628	1					
ANR	1270721	Argument	i		1270628	0					
ANR	1270722	Identifier	i		1270628	0					
ANR	1270723	ForStatement	for ( it = DebugLogs -> begin ( ) ; it < DebugLogs -> end ( ) ; it ++ )		1270628	11					
ANR	1270724	ForInit	it = DebugLogs -> begin ( ) ;	1167:5:32603:32626	1270628	0	True				
ANR	1270725	AssignmentExpression	it = DebugLogs -> begin ( )		1270628	0		=			
ANR	1270726	Identifier	it		1270628	0					
ANR	1270727	CallExpression	DebugLogs -> begin ( )		1270628	1					
ANR	1270728	Callee	DebugLogs -> begin		1270628	0					
ANR	1270729	PtrMemberAccess	DebugLogs -> begin		1270628	0					
ANR	1270730	Identifier	DebugLogs		1270628	0					
ANR	1270731	Identifier	begin		1270628	1					
ANR	1270732	ArgumentList			1270628	1					
ANR	1270733	Condition	it < DebugLogs -> end ( )	1167:30:32628:32648	1270628	1	True				
ANR	1270734	RelationalExpression	it < DebugLogs -> end ( )		1270628	0		<			
ANR	1270735	Identifier	it		1270628	0					
ANR	1270736	CallExpression	DebugLogs -> end ( )		1270628	1					
ANR	1270737	Callee	DebugLogs -> end		1270628	0					
ANR	1270738	PtrMemberAccess	DebugLogs -> end		1270628	0					
ANR	1270739	Identifier	DebugLogs		1270628	0					
ANR	1270740	Identifier	end		1270628	1					
ANR	1270741	ArgumentList			1270628	1					
ANR	1270742	PostIncDecOperationExpression	it ++	1167:53:32651:32654	1270628	2	True				
ANR	1270743	Identifier	it		1270628	0					
ANR	1270744	IncDec	++		1270628	1					
ANR	1270745	CompoundStatement		23:1:554:554	1270628	3					
ANR	1270746	ExpressionStatement	filePath = ( * it ) . logPath	1169:2:32662:32686	1270628	0	True				
ANR	1270747	AssignmentExpression	filePath = ( * it ) . logPath		1270628	0		=			
ANR	1270748	Identifier	filePath		1270628	0					
ANR	1270749	MemberAccess	( * it ) . logPath		1270628	1					
ANR	1270750	UnaryOperationExpression	* it		1270628	0					
ANR	1270751	UnaryOperator	*		1270628	0					
ANR	1270752	Identifier	it		1270628	1					
ANR	1270753	Identifier	logPath		1270628	1					
ANR	1270754	ExpressionStatement	fileExists = true	1170:2:32690:32707	1270628	1	True				
ANR	1270755	AssignmentExpression	fileExists = true		1270628	0		=			
ANR	1270756	Identifier	fileExists		1270628	0					
ANR	1270757	Identifier	true		1270628	1					
ANR	1270758	BreakStatement	break ;	1171:2:32711:32716	1270628	2	True				
ANR	1270759	IfStatement	if ( fileExists )		1270628	12					
ANR	1270760	Condition	fileExists	1173:5:32726:32735	1270628	0	True				
ANR	1270761	Identifier	fileExists		1270628	0					
ANR	1270762	CompoundStatement		28:18:635:635	1270628	1					
ANR	1270763	ExpressionStatement	"debug_file_ptr = safe_fopen_wrapper_follow ( filePath . c_str ( ) , ""a"" , 0644 )"	1174:2:32743:32814	1270628	0	True				
ANR	1270764	AssignmentExpression	"debug_file_ptr = safe_fopen_wrapper_follow ( filePath . c_str ( ) , ""a"" , 0644 )"		1270628	0		=			
ANR	1270765	Identifier	debug_file_ptr		1270628	0					
ANR	1270766	CallExpression	"safe_fopen_wrapper_follow ( filePath . c_str ( ) , ""a"" , 0644 )"		1270628	1					
ANR	1270767	Callee	safe_fopen_wrapper_follow		1270628	0					
ANR	1270768	Identifier	safe_fopen_wrapper_follow		1270628	0					
ANR	1270769	ArgumentList	filePath . c_str ( )		1270628	1					
ANR	1270770	Argument	filePath . c_str ( )		1270628	0					
ANR	1270771	CallExpression	filePath . c_str ( )		1270628	0					
ANR	1270772	Callee	filePath . c_str		1270628	0					
ANR	1270773	MemberAccess	filePath . c_str		1270628	0					
ANR	1270774	Identifier	filePath		1270628	0					
ANR	1270775	Identifier	c_str		1270628	1					
ANR	1270776	ArgumentList			1270628	1					
ANR	1270777	Argument	"""a"""		1270628	1					
ANR	1270778	PrimaryExpression	"""a"""		1270628	0					
ANR	1270779	Argument	0644		1270628	2					
ANR	1270780	PrimaryExpression	0644		1270628	0					
ANR	1270781	IfStatement	if ( ! debug_file_ptr )		1270628	13					
ANR	1270782	Condition	! debug_file_ptr	1177:5:32825:32839	1270628	0	True				
ANR	1270783	UnaryOperationExpression	! debug_file_ptr		1270628	0					
ANR	1270784	UnaryOperator	!		1270628	0					
ANR	1270785	Identifier	debug_file_ptr		1270628	1					
ANR	1270786	CompoundStatement		32:23:739:739	1270628	1					
ANR	1270787	ExpressionStatement	save_errno = errno	1178:2:32847:32865	1270628	0	True				
ANR	1270788	AssignmentExpression	save_errno = errno		1270628	0		=			
ANR	1270789	Identifier	save_errno		1270628	0					
ANR	1270790	Identifier	errno		1270628	1					
ANR	1270791	ExpressionStatement	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't open \\""%s\\""\\n%s\\n"" , filePath . c_str ( ) , panic_msg )"	1179:2:32869:32966	1270628	1	True				
ANR	1270792	CallExpression	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't open \\""%s\\""\\n%s\\n"" , filePath . c_str ( ) , panic_msg )"		1270628	0					
ANR	1270793	Callee	snprintf		1270628	0					
ANR	1270794	Identifier	snprintf		1270628	0					
ANR	1270795	ArgumentList	msg_buf		1270628	1					
ANR	1270796	Argument	msg_buf		1270628	0					
ANR	1270797	Identifier	msg_buf		1270628	0					
ANR	1270798	Argument	sizeof ( msg_buf )		1270628	1					
ANR	1270799	SizeofExpression	sizeof ( msg_buf )		1270628	0					
ANR	1270800	Sizeof	sizeof		1270628	0					
ANR	1270801	SizeofOperand	msg_buf		1270628	1					
ANR	1270802	Argument	"""Can't open \\""%s\\""\\n%s\\n"""		1270628	2					
ANR	1270803	PrimaryExpression	"""Can't open \\""%s\\""\\n%s\\n"""		1270628	0					
ANR	1270804	Argument	filePath . c_str ( )		1270628	3					
ANR	1270805	CallExpression	filePath . c_str ( )		1270628	0					
ANR	1270806	Callee	filePath . c_str		1270628	0					
ANR	1270807	MemberAccess	filePath . c_str		1270628	0					
ANR	1270808	Identifier	filePath		1270628	0					
ANR	1270809	Identifier	c_str		1270628	1					
ANR	1270810	ArgumentList			1270628	1					
ANR	1270811	Argument	panic_msg		1270628	4					
ANR	1270812	Identifier	panic_msg		1270628	0					
ANR	1270813	ExpressionStatement	"_condor_dprintf_exit ( save_errno , msg_buf )"	1181:2:32971:33014	1270628	2	True				
ANR	1270814	CallExpression	"_condor_dprintf_exit ( save_errno , msg_buf )"		1270628	0					
ANR	1270815	Callee	_condor_dprintf_exit		1270628	0					
ANR	1270816	Identifier	_condor_dprintf_exit		1270628	0					
ANR	1270817	ArgumentList	save_errno		1270628	1					
ANR	1270818	Argument	save_errno		1270628	0					
ANR	1270819	Identifier	save_errno		1270628	0					
ANR	1270820	Argument	msg_buf		1270628	1					
ANR	1270821	Identifier	msg_buf		1270628	0					
ANR	1270822	ExpressionStatement	"( void ) lseek ( fileno ( debug_file_ptr ) , 0 , SEEK_END )"	1184:1:33044:33094	1270628	14	True				
ANR	1270823	CastExpression	"( void ) lseek ( fileno ( debug_file_ptr ) , 0 , SEEK_END )"		1270628	0					
ANR	1270824	CastTarget	void		1270628	0					
ANR	1270825	CallExpression	"lseek ( fileno ( debug_file_ptr ) , 0 , SEEK_END )"		1270628	1					
ANR	1270826	Callee	lseek		1270628	0					
ANR	1270827	Identifier	lseek		1270628	0					
ANR	1270828	ArgumentList	fileno ( debug_file_ptr )		1270628	1					
ANR	1270829	Argument	fileno ( debug_file_ptr )		1270628	0					
ANR	1270830	CallExpression	fileno ( debug_file_ptr )		1270628	0					
ANR	1270831	Callee	fileno		1270628	0					
ANR	1270832	Identifier	fileno		1270628	0					
ANR	1270833	ArgumentList	debug_file_ptr		1270628	1					
ANR	1270834	Argument	debug_file_ptr		1270628	0					
ANR	1270835	Identifier	debug_file_ptr		1270628	0					
ANR	1270836	Argument	0		1270628	1					
ANR	1270837	PrimaryExpression	0		1270628	0					
ANR	1270838	Argument	SEEK_END		1270628	2					
ANR	1270839	Identifier	SEEK_END		1270628	0					
ANR	1270840	ExpressionStatement	"fprintf ( debug_file_ptr , ""%s\\n"" , panic_msg )"	1185:1:33097:33141	1270628	15	True				
ANR	1270841	CallExpression	"fprintf ( debug_file_ptr , ""%s\\n"" , panic_msg )"		1270628	0					
ANR	1270842	Callee	fprintf		1270628	0					
ANR	1270843	Identifier	fprintf		1270628	0					
ANR	1270844	ArgumentList	debug_file_ptr		1270628	1					
ANR	1270845	Argument	debug_file_ptr		1270628	0					
ANR	1270846	Identifier	debug_file_ptr		1270628	0					
ANR	1270847	Argument	"""%s\\n"""		1270628	1					
ANR	1270848	PrimaryExpression	"""%s\\n"""		1270628	0					
ANR	1270849	Argument	panic_msg		1270628	2					
ANR	1270850	Identifier	panic_msg		1270628	0					
ANR	1270851	ExpressionStatement	( void ) fflush ( debug_file_ptr )	1186:1:33144:33174	1270628	16	True				
ANR	1270852	CastExpression	( void ) fflush ( debug_file_ptr )		1270628	0					
ANR	1270853	CastTarget	void		1270628	0					
ANR	1270854	CallExpression	fflush ( debug_file_ptr )		1270628	1					
ANR	1270855	Callee	fflush		1270628	0					
ANR	1270856	Identifier	fflush		1270628	0					
ANR	1270857	ArgumentList	debug_file_ptr		1270628	1					
ANR	1270858	Argument	debug_file_ptr		1270628	0					
ANR	1270859	Identifier	debug_file_ptr		1270628	0					
ANR	1270860	ExpressionStatement	"_condor_dprintf_exit ( 0 , panic_msg )"	1188:1:33178:33214	1270628	17	True				
ANR	1270861	CallExpression	"_condor_dprintf_exit ( 0 , panic_msg )"		1270628	0					
ANR	1270862	Callee	_condor_dprintf_exit		1270628	0					
ANR	1270863	Identifier	_condor_dprintf_exit		1270628	0					
ANR	1270864	ArgumentList	0		1270628	1					
ANR	1270865	Argument	0		1270628	0					
ANR	1270866	PrimaryExpression	0		1270628	0					
ANR	1270867	Argument	panic_msg		1270628	1					
ANR	1270868	Identifier	panic_msg		1270628	0					
ANR	1270869	ReturnType	void		1270628	1					
ANR	1270870	Identifier	_condor_fd_panic		1270628	2					
ANR	1270871	ParameterList	"int line , const char * file"		1270628	3					
ANR	1270872	Parameter	int line	1145:18:32074:32081	1270628	0	True				
ANR	1270873	ParameterType	int		1270628	0					
ANR	1270874	Identifier	line		1270628	1					
ANR	1270875	Parameter	const char * file	1145:28:32084:32099	1270628	1	True				
ANR	1270876	ParameterType	const char *		1270628	0					
ANR	1270877	Identifier	file		1270628	1					
ANR	1270878	CFGEntryNode	ENTRY		1270628		True				
ANR	1270879	CFGExitNode	EXIT		1270628		True				
ANR	1270880	Symbol	DebugLogs -> end		1270628						
ANR	1270881	Symbol	panic_msg		1270628						
ANR	1270882	Symbol	line		1270628						
ANR	1270883	Symbol	save_errno		1270628						
ANR	1270884	Symbol	fileExists		1270628						
ANR	1270885	Symbol	file		1270628						
ANR	1270886	Symbol	( * it ) . logPath		1270628						
ANR	1270887	Symbol	filePath . c_str		1270628						
ANR	1270888	Symbol	* DebugLogs		1270628						
ANR	1270889	Symbol	safe_fopen_wrapper_follow		1270628						
ANR	1270890	Symbol	DebugLogs		1270628						
ANR	1270891	Symbol	errno		1270628						
ANR	1270892	Symbol	filePath		1270628						
ANR	1270893	Symbol	__FILE__		1270628						
ANR	1270894	Symbol	false		1270628						
ANR	1270895	Symbol	i		1270628						
ANR	1270896	Symbol	msg_buf		1270628						
ANR	1270897	Symbol	it		1270628						
ANR	1270898	Symbol	debug_file_ptr		1270628						
ANR	1270899	Symbol	__LINE__		1270628						
ANR	1270900	Symbol	SEEK_END		1270628						
ANR	1270901	Symbol	* it		1270628						
ANR	1270902	Symbol	fileno		1270628						
ANR	1270903	Symbol	true		1270628						
ANR	1270904	Symbol	DebugLogs -> begin		1270628						
ANR	1270905	Symbol	PRIV_CONDOR		1270628						
ANR	1270906	Function	tzset	1194:0:33242:33255							
ANR	1270907	FunctionDef	tzset ()		1270906	0					
ANR	1270908	CompoundStatement		1194:12:33254:33255	1270906	0					
ANR	1270909	ReturnType	void		1270906	1					
ANR	1270910	Identifier	tzset		1270906	2					
ANR	1270911	ParameterList			1270906	3					
ANR	1270912	CFGEntryNode	ENTRY		1270906		True				
ANR	1270913	CFGExitNode	EXIT		1270906		True				
ANR	1270914	DeclStmt									
ANR	1270915	Decl							extern char	extern char * *	environ
ANR	1270916	DeclStmt									
ANR	1270917	Decl							char	char *	name
ANR	1270918	DeclStmt									
ANR	1270919	Decl							char	char * *	envp
ANR	1270920	DeclStmt									
ANR	1270921	Decl							char	char *	p1
ANR	1270922	Decl							char	char *	p2
ANR	1270923	DeclStmt									
ANR	1270924	Decl							char	char *	name
ANR	1270925	Function	sigset	1221:0:33590:33599							
ANR	1270926	FunctionDef	sigset ()		1270925	0					
ANR	1270927	CompoundStatement		1221:8:33598:33599	1270925	0					
ANR	1270928	Identifier	sigset		1270925	1					
ANR	1270929	ParameterList			1270925	2					
ANR	1270930	CFGEntryNode	ENTRY		1270925		True				
ANR	1270931	CFGExitNode	EXIT		1270925		True				
ANR	1270932	Function	open_debug_file	1224:0:33609:34639							
ANR	1270933	FunctionDef	"open_debug_file (struct DebugFileInfo * it , const char flags [ ] , bool dont_panic)"		1270932	0					
ANR	1270934	CompoundStatement		1226:0:33702:34639	1270932	0					
ANR	1270935	IdentifierDeclStatement	FILE * fp ;	1227:1:33705:33714	1270932	0	True				
ANR	1270936	IdentifierDecl	* fp		1270932	0					
ANR	1270937	IdentifierDeclType	FILE *		1270932	0					
ANR	1270938	Identifier	fp		1270932	1					
ANR	1270939	IdentifierDeclStatement	priv_state priv ;	1228:1:33717:33732	1270932	1	True				
ANR	1270940	IdentifierDecl	priv		1270932	0					
ANR	1270941	IdentifierDeclType	priv_state		1270932	0					
ANR	1270942	Identifier	priv		1270932	1					
ANR	1270943	IdentifierDeclStatement	char msg_buf [ DPRINTF_ERR_MAX ] ;	1229:1:33735:33764	1270932	2	True				
ANR	1270944	IdentifierDecl	msg_buf [ DPRINTF_ERR_MAX ]		1270932	0					
ANR	1270945	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1270932	0					
ANR	1270946	Identifier	msg_buf		1270932	1					
ANR	1270947	Identifier	DPRINTF_ERR_MAX		1270932	2					
ANR	1270948	IdentifierDeclStatement	int save_errno ;	1230:1:33767:33781	1270932	3	True				
ANR	1270949	IdentifierDecl	save_errno		1270932	0					
ANR	1270950	IdentifierDeclType	int		1270932	0					
ANR	1270951	Identifier	save_errno		1270932	1					
ANR	1270952	IdentifierDeclStatement	std :: string filePath = ( * it ) . logPath ;	1231:1:33784:33820	1270932	4	True				
ANR	1270953	IdentifierDecl	filePath = ( * it ) . logPath		1270932	0					
ANR	1270954	IdentifierDeclType	std :: string		1270932	0					
ANR	1270955	Identifier	filePath		1270932	1					
ANR	1270956	AssignmentExpression	filePath = ( * it ) . logPath		1270932	2		=			
ANR	1270957	Identifier	filePath		1270932	0					
ANR	1270958	MemberAccess	( * it ) . logPath		1270932	1					
ANR	1270959	UnaryOperationExpression	* it		1270932	0					
ANR	1270960	UnaryOperator	*		1270932	0					
ANR	1270961	Identifier	it		1270932	1					
ANR	1270962	Identifier	logPath		1270932	1					
ANR	1270963	ExpressionStatement	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"	1233:1:33824:33876	1270932	5	True				
ANR	1270964	AssignmentExpression	"priv = _set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1270932	0		=			
ANR	1270965	Identifier	priv		1270932	0					
ANR	1270966	CallExpression	"_set_priv ( PRIV_CONDOR , __FILE__ , __LINE__ , 0 )"		1270932	1					
ANR	1270967	Callee	_set_priv		1270932	0					
ANR	1270968	Identifier	_set_priv		1270932	0					
ANR	1270969	ArgumentList	PRIV_CONDOR		1270932	1					
ANR	1270970	Argument	PRIV_CONDOR		1270932	0					
ANR	1270971	Identifier	PRIV_CONDOR		1270932	0					
ANR	1270972	Argument	__FILE__		1270932	1					
ANR	1270973	Identifier	__FILE__		1270932	0					
ANR	1270974	Argument	__LINE__		1270932	2					
ANR	1270975	Identifier	__LINE__		1270932	0					
ANR	1270976	Argument	0		1270932	3					
ANR	1270977	PrimaryExpression	0		1270932	0					
ANR	1270978	ExpressionStatement	errno = 0	1238:1:33993:34002	1270932	6	True				
ANR	1270979	AssignmentExpression	errno = 0		1270932	0		=			
ANR	1270980	Identifier	errno		1270932	0					
ANR	1270981	PrimaryExpression	0		1270932	1					
ANR	1270982	IfStatement	"if ( ( fp = safe_fopen_wrapper_follow ( filePath . c_str ( ) , flags , 0644 ) ) == NULL )"		1270932	7					
ANR	1270983	Condition	"( fp = safe_fopen_wrapper_follow ( filePath . c_str ( ) , flags , 0644 ) ) == NULL"	1239:5:34009:34075	1270932	0	True				
ANR	1270984	EqualityExpression	"( fp = safe_fopen_wrapper_follow ( filePath . c_str ( ) , flags , 0644 ) ) == NULL"		1270932	0		==			
ANR	1270985	AssignmentExpression	"fp = safe_fopen_wrapper_follow ( filePath . c_str ( ) , flags , 0644 )"		1270932	0		=			
ANR	1270986	Identifier	fp		1270932	0					
ANR	1270987	CallExpression	"safe_fopen_wrapper_follow ( filePath . c_str ( ) , flags , 0644 )"		1270932	1					
ANR	1270988	Callee	safe_fopen_wrapper_follow		1270932	0					
ANR	1270989	Identifier	safe_fopen_wrapper_follow		1270932	0					
ANR	1270990	ArgumentList	filePath . c_str ( )		1270932	1					
ANR	1270991	Argument	filePath . c_str ( )		1270932	0					
ANR	1270992	CallExpression	filePath . c_str ( )		1270932	0					
ANR	1270993	Callee	filePath . c_str		1270932	0					
ANR	1270994	MemberAccess	filePath . c_str		1270932	0					
ANR	1270995	Identifier	filePath		1270932	0					
ANR	1270996	Identifier	c_str		1270932	1					
ANR	1270997	ArgumentList			1270932	1					
ANR	1270998	Argument	flags		1270932	1					
ANR	1270999	Identifier	flags		1270932	0					
ANR	1271000	Argument	0644		1270932	2					
ANR	1271001	PrimaryExpression	0644		1270932	0					
ANR	1271002	Identifier	NULL		1270932	1					
ANR	1271003	CompoundStatement		14:75:376:376	1270932	1					
ANR	1271004	ExpressionStatement	save_errno = errno	1240:2:34083:34101	1270932	0	True				
ANR	1271005	AssignmentExpression	save_errno = errno		1270932	0		=			
ANR	1271006	Identifier	save_errno		1270932	0					
ANR	1271007	Identifier	errno		1270932	1					
ANR	1271008	IfStatement	if ( errno == EMFILE )		1270932	1					
ANR	1271009	Condition	errno == EMFILE	1242:6:34129:34143	1270932	0	True				
ANR	1271010	EqualityExpression	errno == EMFILE		1270932	0		==			
ANR	1271011	Identifier	errno		1270932	0					
ANR	1271012	Identifier	EMFILE		1270932	1					
ANR	1271013	CompoundStatement		17:24:444:444	1270932	1					
ANR	1271014	ExpressionStatement	"_condor_fd_panic ( __LINE__ , __FILE__ )"	1243:3:34152:34190	1270932	0	True				
ANR	1271015	CallExpression	"_condor_fd_panic ( __LINE__ , __FILE__ )"		1270932	0					
ANR	1271016	Callee	_condor_fd_panic		1270932	0					
ANR	1271017	Identifier	_condor_fd_panic		1270932	0					
ANR	1271018	ArgumentList	__LINE__		1270932	1					
ANR	1271019	Argument	__LINE__		1270932	0					
ANR	1271020	Identifier	__LINE__		1270932	0					
ANR	1271021	Argument	__FILE__		1270932	1					
ANR	1271022	Identifier	__FILE__		1270932	0					
ANR	1271023	IfStatement	if ( fp == NULL )		1270932	2					
ANR	1271024	Condition	fp == NULL	1246:6:34209:34218	1270932	0	True				
ANR	1271025	EqualityExpression	fp == NULL		1270932	0		==			
ANR	1271026	Identifier	fp		1270932	0					
ANR	1271027	Identifier	NULL		1270932	1					
ANR	1271028	CompoundStatement		21:18:518:518	1270932	1					
ANR	1271029	ExpressionStatement	fp = stderr	1247:3:34226:34237	1270932	0	True				
ANR	1271030	AssignmentExpression	fp = stderr		1270932	0		=			
ANR	1271031	Identifier	fp		1270932	0					
ANR	1271032	Identifier	stderr		1270932	1					
ANR	1271033	ExpressionStatement	"_condor_dfprintf ( fp , ""Can't open \\""%s\\""\\n"" , filePath . c_str ( ) )"	1249:2:34245:34308	1270932	3	True				
ANR	1271034	CallExpression	"_condor_dfprintf ( fp , ""Can't open \\""%s\\""\\n"" , filePath . c_str ( ) )"		1270932	0					
ANR	1271035	Callee	_condor_dfprintf		1270932	0					
ANR	1271036	Identifier	_condor_dfprintf		1270932	0					
ANR	1271037	ArgumentList	fp		1270932	1					
ANR	1271038	Argument	fp		1270932	0					
ANR	1271039	Identifier	fp		1270932	0					
ANR	1271040	Argument	"""Can't open \\""%s\\""\\n"""		1270932	1					
ANR	1271041	PrimaryExpression	"""Can't open \\""%s\\""\\n"""		1270932	0					
ANR	1271042	Argument	filePath . c_str ( )		1270932	2					
ANR	1271043	CallExpression	filePath . c_str ( )		1270932	0					
ANR	1271044	Callee	filePath . c_str		1270932	0					
ANR	1271045	MemberAccess	filePath . c_str		1270932	0					
ANR	1271046	Identifier	filePath		1270932	0					
ANR	1271047	Identifier	c_str		1270932	1					
ANR	1271048	ArgumentList			1270932	1					
ANR	1271049	IfStatement	if ( ! dont_panic )		1270932	4					
ANR	1271050	Condition	! dont_panic	1250:6:34316:34327	1270932	0	True				
ANR	1271051	UnaryOperationExpression	! dont_panic		1270932	0					
ANR	1271052	UnaryOperator	!		1270932	0					
ANR	1271053	Identifier	dont_panic		1270932	1					
ANR	1271054	CompoundStatement		25:21:628:628	1270932	1					
ANR	1271055	ExpressionStatement	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't open \\""%s\\""\\n"" , filePath . c_str ( ) )"	1251:3:34336:34419	1270932	0	True				
ANR	1271056	CallExpression	"snprintf ( msg_buf , sizeof ( msg_buf ) , ""Can't open \\""%s\\""\\n"" , filePath . c_str ( ) )"		1270932	0					
ANR	1271057	Callee	snprintf		1270932	0					
ANR	1271058	Identifier	snprintf		1270932	0					
ANR	1271059	ArgumentList	msg_buf		1270932	1					
ANR	1271060	Argument	msg_buf		1270932	0					
ANR	1271061	Identifier	msg_buf		1270932	0					
ANR	1271062	Argument	sizeof ( msg_buf )		1270932	1					
ANR	1271063	SizeofExpression	sizeof ( msg_buf )		1270932	0					
ANR	1271064	Sizeof	sizeof		1270932	0					
ANR	1271065	SizeofOperand	msg_buf		1270932	1					
ANR	1271066	Argument	"""Can't open \\""%s\\""\\n"""		1270932	2					
ANR	1271067	PrimaryExpression	"""Can't open \\""%s\\""\\n"""		1270932	0					
ANR	1271068	Argument	filePath . c_str ( )		1270932	3					
ANR	1271069	CallExpression	filePath . c_str ( )		1270932	0					
ANR	1271070	Callee	filePath . c_str		1270932	0					
ANR	1271071	MemberAccess	filePath . c_str		1270932	0					
ANR	1271072	Identifier	filePath		1270932	0					
ANR	1271073	Identifier	c_str		1270932	1					
ANR	1271074	ArgumentList			1270932	1					
ANR	1271075	IfStatement	if ( ! DebugContinueOnOpenFailure )		1270932	1					
ANR	1271076	Condition	! DebugContinueOnOpenFailure	1254:8:34430:34457	1270932	0	True				
ANR	1271077	UnaryOperationExpression	! DebugContinueOnOpenFailure		1270932	0					
ANR	1271078	UnaryOperator	!		1270932	0					
ANR	1271079	Identifier	DebugContinueOnOpenFailure		1270932	1					
ANR	1271080	CompoundStatement		29:38:757:757	1270932	1					
ANR	1271081	ExpressionStatement	"_condor_dprintf_exit ( save_errno , msg_buf )"	1255:7:34469:34512	1270932	0	True				
ANR	1271082	CallExpression	"_condor_dprintf_exit ( save_errno , msg_buf )"		1270932	0					
ANR	1271083	Callee	_condor_dprintf_exit		1270932	0					
ANR	1271084	Identifier	_condor_dprintf_exit		1270932	0					
ANR	1271085	ArgumentList	save_errno		1270932	1					
ANR	1271086	Argument	save_errno		1270932	0					
ANR	1271087	Identifier	save_errno		1270932	0					
ANR	1271088	Argument	msg_buf		1270932	1					
ANR	1271089	Identifier	msg_buf		1270932	0					
ANR	1271090	ExpressionStatement	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"	1261:1:34567:34605	1270932	8	True				
ANR	1271091	CallExpression	"_set_priv ( priv , __FILE__ , __LINE__ , 0 )"		1270932	0					
ANR	1271092	Callee	_set_priv		1270932	0					
ANR	1271093	Identifier	_set_priv		1270932	0					
ANR	1271094	ArgumentList	priv		1270932	1					
ANR	1271095	Argument	priv		1270932	0					
ANR	1271096	Identifier	priv		1270932	0					
ANR	1271097	Argument	__FILE__		1270932	1					
ANR	1271098	Identifier	__FILE__		1270932	0					
ANR	1271099	Argument	__LINE__		1270932	2					
ANR	1271100	Identifier	__LINE__		1270932	0					
ANR	1271101	Argument	0		1270932	3					
ANR	1271102	PrimaryExpression	0		1270932	0					
ANR	1271103	ExpressionStatement	it -> debugFP = fp	1262:1:34608:34624	1270932	9	True				
ANR	1271104	AssignmentExpression	it -> debugFP = fp		1270932	0		=			
ANR	1271105	PtrMemberAccess	it -> debugFP		1270932	0					
ANR	1271106	Identifier	it		1270932	0					
ANR	1271107	Identifier	debugFP		1270932	1					
ANR	1271108	Identifier	fp		1270932	1					
ANR	1271109	ReturnStatement	return fp ;	1264:1:34628:34637	1270932	10	True				
ANR	1271110	Identifier	fp		1270932	0					
ANR	1271111	ReturnType	static FILE *		1270932	1					
ANR	1271112	Identifier	open_debug_file		1270932	2					
ANR	1271113	ParameterList	"struct DebugFileInfo * it , const char flags [ ] , bool dont_panic"		1270932	3					
ANR	1271114	Parameter	struct DebugFileInfo * it	1225:16:33639:33662	1270932	0	True				
ANR	1271115	ParameterType	struct DebugFileInfo *		1270932	0					
ANR	1271116	Identifier	it		1270932	1					
ANR	1271117	Parameter	const char flags [ ]	1225:42:33665:33682	1270932	1	True				
ANR	1271118	ParameterType	const char [ ]		1270932	0					
ANR	1271119	Identifier	flags		1270932	1					
ANR	1271120	Parameter	bool dont_panic	1225:62:33685:33699	1270932	2	True				
ANR	1271121	ParameterType	bool		1270932	0					
ANR	1271122	Identifier	dont_panic		1270932	1					
ANR	1271123	CFGEntryNode	ENTRY		1270932		True				
ANR	1271124	CFGExitNode	EXIT		1270932		True				
ANR	1271125	Symbol	errno		1270932						
ANR	1271126	Symbol	NULL		1270932						
ANR	1271127	Symbol	filePath		1270932						
ANR	1271128	Symbol	__FILE__		1270932						
ANR	1271129	Symbol	flags		1270932						
ANR	1271130	Symbol	_set_priv		1270932						
ANR	1271131	Symbol	DebugContinueOnOpenFailure		1270932						
ANR	1271132	Symbol	msg_buf		1270932						
ANR	1271133	Symbol	save_errno		1270932						
ANR	1271134	Symbol	fp		1270932						
ANR	1271135	Symbol	it		1270932						
ANR	1271136	Symbol	stderr		1270932						
ANR	1271137	Symbol	dont_panic		1270932						
ANR	1271138	Symbol	__LINE__		1270932						
ANR	1271139	Symbol	* it		1270932						
ANR	1271140	Symbol	( * it ) . logPath		1270932						
ANR	1271141	Symbol	EMFILE		1270932						
ANR	1271142	Symbol	filePath . c_str		1270932						
ANR	1271143	Symbol	priv		1270932						
ANR	1271144	Symbol	it -> debugFP		1270932						
ANR	1271145	Symbol	PRIV_CONDOR		1270932						
ANR	1271146	Symbol	safe_fopen_wrapper_follow		1270932						
ANR	1271147	Function	debug_check_it	1267:0:34642:34978							
ANR	1271148	FunctionDef	"debug_check_it (struct DebugFileInfo & it , bool fTruncate , bool dont_panic)"		1271147	0					
ANR	1271149	CompoundStatement		1268:0:34721:34978	1271147	0					
ANR	1271150	IdentifierDeclStatement	FILE * debug_file_fp ;	1269:1:34724:34743	1271147	0	True				
ANR	1271151	IdentifierDecl	* debug_file_fp		1271147	0					
ANR	1271152	IdentifierDeclType	FILE *		1271147	0					
ANR	1271153	Identifier	debug_file_fp		1271147	1					
ANR	1271154	IfStatement	if ( fTruncate )		1271147	1					
ANR	1271155	Condition	fTruncate	1271:5:34751:34759	1271147	0	True				
ANR	1271156	Identifier	fTruncate		1271147	0					
ANR	1271157	CompoundStatement		4:17:41:41	1271147	1					
ANR	1271158	ExpressionStatement	"debug_file_fp = debug_lock_it ( & it , ""wN"" , 0 , dont_panic )"	1272:2:34767:34822	1271147	0	True				
ANR	1271159	AssignmentExpression	"debug_file_fp = debug_lock_it ( & it , ""wN"" , 0 , dont_panic )"		1271147	0		=			
ANR	1271160	Identifier	debug_file_fp		1271147	0					
ANR	1271161	CallExpression	"debug_lock_it ( & it , ""wN"" , 0 , dont_panic )"		1271147	1					
ANR	1271162	Callee	debug_lock_it		1271147	0					
ANR	1271163	Identifier	debug_lock_it		1271147	0					
ANR	1271164	ArgumentList	& it		1271147	1					
ANR	1271165	Argument	& it		1271147	0					
ANR	1271166	UnaryOperationExpression	& it		1271147	0					
ANR	1271167	UnaryOperator	&		1271147	0					
ANR	1271168	Identifier	it		1271147	1					
ANR	1271169	Argument	"""wN"""		1271147	1					
ANR	1271170	PrimaryExpression	"""wN"""		1271147	0					
ANR	1271171	Argument	0		1271147	2					
ANR	1271172	PrimaryExpression	0		1271147	0					
ANR	1271173	Argument	dont_panic		1271147	3					
ANR	1271174	Identifier	dont_panic		1271147	0					
ANR	1271175	ElseStatement	else		1271147	0					
ANR	1271176	CompoundStatement		6:8:110:110	1271147	0					
ANR	1271177	ExpressionStatement	"debug_file_fp = debug_lock_it ( & it , ""aN"" , 0 , dont_panic )"	1274:2:34836:34891	1271147	0	True				
ANR	1271178	AssignmentExpression	"debug_file_fp = debug_lock_it ( & it , ""aN"" , 0 , dont_panic )"		1271147	0		=			
ANR	1271179	Identifier	debug_file_fp		1271147	0					
ANR	1271180	CallExpression	"debug_lock_it ( & it , ""aN"" , 0 , dont_panic )"		1271147	1					
ANR	1271181	Callee	debug_lock_it		1271147	0					
ANR	1271182	Identifier	debug_lock_it		1271147	0					
ANR	1271183	ArgumentList	& it		1271147	1					
ANR	1271184	Argument	& it		1271147	0					
ANR	1271185	UnaryOperationExpression	& it		1271147	0					
ANR	1271186	UnaryOperator	&		1271147	0					
ANR	1271187	Identifier	it		1271147	1					
ANR	1271188	Argument	"""aN"""		1271147	1					
ANR	1271189	PrimaryExpression	"""aN"""		1271147	0					
ANR	1271190	Argument	0		1271147	2					
ANR	1271191	PrimaryExpression	0		1271147	0					
ANR	1271192	Argument	dont_panic		1271147	3					
ANR	1271193	Identifier	dont_panic		1271147	0					
ANR	1271194	IfStatement	if ( debug_file_fp )		1271147	2					
ANR	1271195	Condition	debug_file_fp	1277:5:34902:34914	1271147	0	True				
ANR	1271196	Identifier	debug_file_fp		1271147	0					
ANR	1271197	ExpressionStatement	( void ) debug_unlock_it ( & it )	1277:20:34917:34943	1271147	1	True				
ANR	1271198	CastExpression	( void ) debug_unlock_it ( & it )		1271147	0					
ANR	1271199	CastTarget	void		1271147	0					
ANR	1271200	CallExpression	debug_unlock_it ( & it )		1271147	1					
ANR	1271201	Callee	debug_unlock_it		1271147	0					
ANR	1271202	Identifier	debug_unlock_it		1271147	0					
ANR	1271203	ArgumentList	& it		1271147	1					
ANR	1271204	Argument	& it		1271147	0					
ANR	1271205	UnaryOperationExpression	& it		1271147	0					
ANR	1271206	UnaryOperator	&		1271147	0					
ANR	1271207	Identifier	it		1271147	1					
ANR	1271208	ReturnStatement	return ( debug_file_fp != NULL ) ;	1278:1:34946:34976	1271147	3	True				
ANR	1271209	EqualityExpression	debug_file_fp != NULL		1271147	0		!=			
ANR	1271210	Identifier	debug_file_fp		1271147	0					
ANR	1271211	Identifier	NULL		1271147	1					
ANR	1271212	ReturnType	bool		1271147	1					
ANR	1271213	Identifier	debug_check_it		1271147	2					
ANR	1271214	ParameterList	"struct DebugFileInfo & it , bool fTruncate , bool dont_panic"		1271147	3					
ANR	1271215	Parameter	struct DebugFileInfo & it	1267:20:34662:34685	1271147	0	True				
ANR	1271216	ParameterType	struct DebugFileInfo &		1271147	0					
ANR	1271217	Identifier	it		1271147	1					
ANR	1271218	Parameter	bool fTruncate	1267:46:34688:34701	1271147	1	True				
ANR	1271219	ParameterType	bool		1271147	0					
ANR	1271220	Identifier	fTruncate		1271147	1					
ANR	1271221	Parameter	bool dont_panic	1267:62:34704:34718	1271147	2	True				
ANR	1271222	ParameterType	bool		1271147	0					
ANR	1271223	Identifier	dont_panic		1271147	1					
ANR	1271224	CFGEntryNode	ENTRY		1271147		True				
ANR	1271225	CFGExitNode	EXIT		1271147		True				
ANR	1271226	Symbol	debug_file_fp		1271147						
ANR	1271227	Symbol	NULL		1271147						
ANR	1271228	Symbol	& it		1271147						
ANR	1271229	Symbol	debug_lock_it		1271147						
ANR	1271230	Symbol	it		1271147						
ANR	1271231	Symbol	fTruncate		1271147						
ANR	1271232	Symbol	dont_panic		1271147						
ANR	1271233	Function	_condor_dprintf_exit	1282:0:35040:37699							
ANR	1271234	FunctionDef	"_condor_dprintf_exit (int error_code , const char * msg)"		1271233	0					
ANR	1271235	CompoundStatement		1284:0:35101:37699	1271233	0					
ANR	1271236	IdentifierDeclStatement	char * tmp ;	1285:1:35104:35113	1271233	0	True				
ANR	1271237	IdentifierDecl	* tmp		1271233	0					
ANR	1271238	IdentifierDeclType	char *		1271233	0					
ANR	1271239	Identifier	tmp		1271233	1					
ANR	1271240	IdentifierDeclStatement	FILE * fail_fp ;	1286:1:35116:35129	1271233	1	True				
ANR	1271241	IdentifierDecl	* fail_fp		1271233	0					
ANR	1271242	IdentifierDeclType	FILE *		1271233	0					
ANR	1271243	Identifier	fail_fp		1271233	1					
ANR	1271244	IdentifierDeclStatement	char buf [ DPRINTF_ERR_MAX ] ;	1287:1:35132:35157	1271233	2	True				
ANR	1271245	IdentifierDecl	buf [ DPRINTF_ERR_MAX ]		1271233	0					
ANR	1271246	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1271233	0					
ANR	1271247	Identifier	buf		1271233	1					
ANR	1271248	Identifier	DPRINTF_ERR_MAX		1271233	2					
ANR	1271249	IdentifierDeclStatement	char header [ DPRINTF_ERR_MAX ] ;	1288:1:35160:35188	1271233	3	True				
ANR	1271250	IdentifierDecl	header [ DPRINTF_ERR_MAX ]		1271233	0					
ANR	1271251	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1271233	0					
ANR	1271252	Identifier	header		1271233	1					
ANR	1271253	Identifier	DPRINTF_ERR_MAX		1271233	2					
ANR	1271254	IdentifierDeclStatement	char tail [ DPRINTF_ERR_MAX ] ;	1289:1:35191:35217	1271233	4	True				
ANR	1271255	IdentifierDecl	tail [ DPRINTF_ERR_MAX ]		1271233	0					
ANR	1271256	IdentifierDeclType	char [ DPRINTF_ERR_MAX ]		1271233	0					
ANR	1271257	Identifier	tail		1271233	1					
ANR	1271258	Identifier	DPRINTF_ERR_MAX		1271233	2					
ANR	1271259	IdentifierDeclStatement	int wrote_warning = FALSE ;	1290:1:35220:35245	1271233	5	True				
ANR	1271260	IdentifierDecl	wrote_warning = FALSE		1271233	0					
ANR	1271261	IdentifierDeclType	int		1271233	0					
ANR	1271262	Identifier	wrote_warning		1271233	1					
ANR	1271263	AssignmentExpression	wrote_warning = FALSE		1271233	2		=			
ANR	1271264	Identifier	FALSE		1271233	0					
ANR	1271265	Identifier	FALSE		1271233	1					
ANR	1271266	IdentifierDeclStatement	struct tm * tm ;	1291:1:35248:35261	1271233	6	True				
ANR	1271267	IdentifierDecl	* tm		1271233	0					
ANR	1271268	IdentifierDeclType	struct tm *		1271233	0					
ANR	1271269	Identifier	tm		1271233	1					
ANR	1271270	IdentifierDeclStatement	time_t clock_now ;	1292:1:35264:35280	1271233	7	True				
ANR	1271271	IdentifierDecl	clock_now		1271233	0					
ANR	1271272	IdentifierDeclType	time_t		1271233	0					
ANR	1271273	Identifier	clock_now		1271233	1					
ANR	1271274	IdentifierDeclStatement	std :: vector < DebugFileInfo > :: iterator it ;	1293:1:35283:35322	1271233	8	True				
ANR	1271275	IdentifierDecl	it		1271233	0					
ANR	1271276	IdentifierDeclType	std :: vector < DebugFileInfo > :: iterator		1271233	0					
ANR	1271277	Identifier	it		1271233	1					
ANR	1271278	IfStatement	if ( ! DprintfBroken )		1271233	9					
ANR	1271279	Condition	! DprintfBroken	1302:5:35679:35692	1271233	0	True				
ANR	1271280	UnaryOperationExpression	! DprintfBroken		1271233	0					
ANR	1271281	UnaryOperator	!		1271233	0					
ANR	1271282	Identifier	DprintfBroken		1271233	1					
ANR	1271283	CompoundStatement		19:22:594:594	1271233	1					
ANR	1271284	ExpressionStatement	( void ) time ( & clock_now )	1303:2:35700:35724	1271233	0	True				
ANR	1271285	CastExpression	( void ) time ( & clock_now )		1271233	0					
ANR	1271286	CastTarget	void		1271233	0					
ANR	1271287	CallExpression	time ( & clock_now )		1271233	1					
ANR	1271288	Callee	time		1271233	0					
ANR	1271289	Identifier	time		1271233	0					
ANR	1271290	ArgumentList	& clock_now		1271233	1					
ANR	1271291	Argument	& clock_now		1271233	0					
ANR	1271292	UnaryOperationExpression	& clock_now		1271233	0					
ANR	1271293	UnaryOperator	&		1271233	0					
ANR	1271294	Identifier	clock_now		1271233	1					
ANR	1271295	IfStatement	if ( DebugUseTimestamps )		1271233	1					
ANR	1271296	Condition	DebugUseTimestamps	1305:7:35734:35751	1271233	0	True				
ANR	1271297	Identifier	DebugUseTimestamps		1271233	0					
ANR	1271298	CompoundStatement		22:28:653:653	1271233	1					
ANR	1271299	ExpressionStatement	"snprintf ( header , sizeof ( header ) , ""(%d) "" , ( int ) clock_now )"	1310:3:35972:36031	1271233	0	True				
ANR	1271300	CallExpression	"snprintf ( header , sizeof ( header ) , ""(%d) "" , ( int ) clock_now )"		1271233	0					
ANR	1271301	Callee	snprintf		1271233	0					
ANR	1271302	Identifier	snprintf		1271233	0					
ANR	1271303	ArgumentList	header		1271233	1					
ANR	1271304	Argument	header		1271233	0					
ANR	1271305	Identifier	header		1271233	0					
ANR	1271306	Argument	sizeof ( header )		1271233	1					
ANR	1271307	SizeofExpression	sizeof ( header )		1271233	0					
ANR	1271308	Sizeof	sizeof		1271233	0					
ANR	1271309	SizeofOperand	header		1271233	1					
ANR	1271310	Argument	"""(%d) """		1271233	2					
ANR	1271311	PrimaryExpression	"""(%d) """		1271233	0					
ANR	1271312	Argument	( int ) clock_now		1271233	3					
ANR	1271313	CastExpression	( int ) clock_now		1271233	0					
ANR	1271314	CastTarget	int		1271233	0					
ANR	1271315	Identifier	clock_now		1271233	1					
ANR	1271316	ElseStatement	else		1271233	0					
ANR	1271317	CompoundStatement		28:9:940:940	1271233	0					
ANR	1271318	ExpressionStatement	tm = localtime ( & clock_now )	1312:3:36047:36075	1271233	0	True				
ANR	1271319	AssignmentExpression	tm = localtime ( & clock_now )		1271233	0		=			
ANR	1271320	Identifier	tm		1271233	0					
ANR	1271321	CallExpression	localtime ( & clock_now )		1271233	1					
ANR	1271322	Callee	localtime		1271233	0					
ANR	1271323	Identifier	localtime		1271233	0					
ANR	1271324	ArgumentList	& clock_now		1271233	1					
ANR	1271325	Argument	& clock_now		1271233	0					
ANR	1271326	UnaryOperationExpression	& clock_now		1271233	0					
ANR	1271327	UnaryOperator	&		1271233	0					
ANR	1271328	Identifier	clock_now		1271233	1					
ANR	1271329	ExpressionStatement	"snprintf ( header , sizeof ( header ) , ""%d/%d %02d:%02d:%02d "" , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec )"	1313:3:36080:36220	1271233	1	True				
ANR	1271330	CallExpression	"snprintf ( header , sizeof ( header ) , ""%d/%d %02d:%02d:%02d "" , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec )"		1271233	0					
ANR	1271331	Callee	snprintf		1271233	0					
ANR	1271332	Identifier	snprintf		1271233	0					
ANR	1271333	ArgumentList	header		1271233	1					
ANR	1271334	Argument	header		1271233	0					
ANR	1271335	Identifier	header		1271233	0					
ANR	1271336	Argument	sizeof ( header )		1271233	1					
ANR	1271337	SizeofExpression	sizeof ( header )		1271233	0					
ANR	1271338	Sizeof	sizeof		1271233	0					
ANR	1271339	SizeofOperand	header		1271233	1					
ANR	1271340	Argument	"""%d/%d %02d:%02d:%02d """		1271233	2					
ANR	1271341	PrimaryExpression	"""%d/%d %02d:%02d:%02d """		1271233	0					
ANR	1271342	Argument	tm -> tm_mon + 1		1271233	3					
ANR	1271343	AdditiveExpression	tm -> tm_mon + 1		1271233	0		+			
ANR	1271344	PtrMemberAccess	tm -> tm_mon		1271233	0					
ANR	1271345	Identifier	tm		1271233	0					
ANR	1271346	Identifier	tm_mon		1271233	1					
ANR	1271347	PrimaryExpression	1		1271233	1					
ANR	1271348	Argument	tm -> tm_mday		1271233	4					
ANR	1271349	PtrMemberAccess	tm -> tm_mday		1271233	0					
ANR	1271350	Identifier	tm		1271233	0					
ANR	1271351	Identifier	tm_mday		1271233	1					
ANR	1271352	Argument	tm -> tm_hour		1271233	5					
ANR	1271353	PtrMemberAccess	tm -> tm_hour		1271233	0					
ANR	1271354	Identifier	tm		1271233	0					
ANR	1271355	Identifier	tm_hour		1271233	1					
ANR	1271356	Argument	tm -> tm_min		1271233	6					
ANR	1271357	PtrMemberAccess	tm -> tm_min		1271233	0					
ANR	1271358	Identifier	tm		1271233	0					
ANR	1271359	Identifier	tm_min		1271233	1					
ANR	1271360	Argument	tm -> tm_sec		1271233	7					
ANR	1271361	PtrMemberAccess	tm -> tm_sec		1271233	0					
ANR	1271362	Identifier	tm		1271233	0					
ANR	1271363	Identifier	tm_sec		1271233	1					
ANR	1271364	ExpressionStatement	"snprintf ( header , sizeof ( header ) , ""dprintf() had a fatal error in pid %d\\n"" , ( int ) getpid ( ) )"	1317:2:36228:36320	1271233	2	True				
ANR	1271365	CallExpression	"snprintf ( header , sizeof ( header ) , ""dprintf() had a fatal error in pid %d\\n"" , ( int ) getpid ( ) )"		1271233	0					
ANR	1271366	Callee	snprintf		1271233	0					
ANR	1271367	Identifier	snprintf		1271233	0					
ANR	1271368	ArgumentList	header		1271233	1					
ANR	1271369	Argument	header		1271233	0					
ANR	1271370	Identifier	header		1271233	0					
ANR	1271371	Argument	sizeof ( header )		1271233	1					
ANR	1271372	SizeofExpression	sizeof ( header )		1271233	0					
ANR	1271373	Sizeof	sizeof		1271233	0					
ANR	1271374	SizeofOperand	header		1271233	1					
ANR	1271375	Argument	"""dprintf() had a fatal error in pid %d\\n"""		1271233	2					
ANR	1271376	PrimaryExpression	"""dprintf() had a fatal error in pid %d\\n"""		1271233	0					
ANR	1271377	Argument	( int ) getpid ( )		1271233	3					
ANR	1271378	CastExpression	( int ) getpid ( )		1271233	0					
ANR	1271379	CastTarget	int		1271233	0					
ANR	1271380	CallExpression	getpid ( )		1271233	1					
ANR	1271381	Callee	getpid		1271233	0					
ANR	1271382	Identifier	getpid		1271233	0					
ANR	1271383	ArgumentList			1271233	1					
ANR	1271384	ExpressionStatement	tail [ 0 ] = '\\0'	1318:2:36324:36338	1271233	3	True				
ANR	1271385	AssignmentExpression	tail [ 0 ] = '\\0'		1271233	0		=			
ANR	1271386	ArrayIndexing	tail [ 0 ]		1271233	0					
ANR	1271387	Identifier	tail		1271233	0					
ANR	1271388	PrimaryExpression	0		1271233	1					
ANR	1271389	PrimaryExpression	'\\0'		1271233	1					
ANR	1271390	IfStatement	if ( error_code )		1271233	4					
ANR	1271391	Condition	error_code	1319:6:36346:36355	1271233	0	True				
ANR	1271392	Identifier	error_code		1271233	0					
ANR	1271393	CompoundStatement		36:19:1257:1257	1271233	1					
ANR	1271394	ExpressionStatement	"sprintf ( tail , ""errno: %d (%s)\\n"" , error_code , strerror ( error_code ) )"	1320:3:36364:36439	1271233	0	True				
ANR	1271395	CallExpression	"sprintf ( tail , ""errno: %d (%s)\\n"" , error_code , strerror ( error_code ) )"		1271233	0					
ANR	1271396	Callee	sprintf		1271233	0					
ANR	1271397	Identifier	sprintf		1271233	0					
ANR	1271398	ArgumentList	tail		1271233	1					
ANR	1271399	Argument	tail		1271233	0					
ANR	1271400	Identifier	tail		1271233	0					
ANR	1271401	Argument	"""errno: %d (%s)\\n"""		1271233	1					
ANR	1271402	PrimaryExpression	"""errno: %d (%s)\\n"""		1271233	0					
ANR	1271403	Argument	error_code		1271233	2					
ANR	1271404	Identifier	error_code		1271233	0					
ANR	1271405	Argument	strerror ( error_code )		1271233	3					
ANR	1271406	CallExpression	strerror ( error_code )		1271233	0					
ANR	1271407	Callee	strerror		1271233	0					
ANR	1271408	Identifier	strerror		1271233	0					
ANR	1271409	ArgumentList	error_code		1271233	1					
ANR	1271410	Argument	error_code		1271233	0					
ANR	1271411	Identifier	error_code		1271233	0					
ANR	1271412	ExpressionStatement	"sprintf ( buf , ""euid: %d, ruid: %d\\n"" , ( int ) geteuid ( ) , ( int ) getuid ( ) )"	1324:2:36464:36538	1271233	5	True				
ANR	1271413	CallExpression	"sprintf ( buf , ""euid: %d, ruid: %d\\n"" , ( int ) geteuid ( ) , ( int ) getuid ( ) )"		1271233	0					
ANR	1271414	Callee	sprintf		1271233	0					
ANR	1271415	Identifier	sprintf		1271233	0					
ANR	1271416	ArgumentList	buf		1271233	1					
ANR	1271417	Argument	buf		1271233	0					
ANR	1271418	Identifier	buf		1271233	0					
ANR	1271419	Argument	"""euid: %d, ruid: %d\\n"""		1271233	1					
ANR	1271420	PrimaryExpression	"""euid: %d, ruid: %d\\n"""		1271233	0					
ANR	1271421	Argument	( int ) geteuid ( )		1271233	2					
ANR	1271422	CastExpression	( int ) geteuid ( )		1271233	0					
ANR	1271423	CastTarget	int		1271233	0					
ANR	1271424	CallExpression	geteuid ( )		1271233	1					
ANR	1271425	Callee	geteuid		1271233	0					
ANR	1271426	Identifier	geteuid		1271233	0					
ANR	1271427	ArgumentList			1271233	1					
ANR	1271428	Argument	( int ) getuid ( )		1271233	3					
ANR	1271429	CastExpression	( int ) getuid ( )		1271233	0					
ANR	1271430	CastTarget	int		1271233	0					
ANR	1271431	CallExpression	getuid ( )		1271233	1					
ANR	1271432	Callee	getuid		1271233	0					
ANR	1271433	Identifier	getuid		1271233	0					
ANR	1271434	ArgumentList			1271233	1					
ANR	1271435	ExpressionStatement	"strcat ( tail , buf )"	1326:2:36542:36561	1271233	6	True				
ANR	1271436	CallExpression	"strcat ( tail , buf )"		1271233	0					
ANR	1271437	Callee	strcat		1271233	0					
ANR	1271438	Identifier	strcat		1271233	0					
ANR	1271439	ArgumentList	tail		1271233	1					
ANR	1271440	Argument	tail		1271233	0					
ANR	1271441	Identifier	tail		1271233	0					
ANR	1271442	Argument	buf		1271233	1					
ANR	1271443	Identifier	buf		1271233	0					
ANR	1271444	ExpressionStatement	"tmp = dprintf_param_funcs -> param ( ""LOG"" )"	1329:2:36573:36614	1271233	7	True				
ANR	1271445	AssignmentExpression	"tmp = dprintf_param_funcs -> param ( ""LOG"" )"		1271233	0		=			
ANR	1271446	Identifier	tmp		1271233	0					
ANR	1271447	CallExpression	"dprintf_param_funcs -> param ( ""LOG"" )"		1271233	1					
ANR	1271448	Callee	dprintf_param_funcs -> param		1271233	0					
ANR	1271449	PtrMemberAccess	dprintf_param_funcs -> param		1271233	0					
ANR	1271450	Identifier	dprintf_param_funcs		1271233	0					
ANR	1271451	Identifier	param		1271233	1					
ANR	1271452	ArgumentList	"""LOG"""		1271233	1					
ANR	1271453	Argument	"""LOG"""		1271233	0					
ANR	1271454	PrimaryExpression	"""LOG"""		1271233	0					
ANR	1271455	IfStatement	if ( tmp )		1271233	8					
ANR	1271456	Condition	tmp	1330:6:36622:36624	1271233	0	True				
ANR	1271457	Identifier	tmp		1271233	0					
ANR	1271458	CompoundStatement		47:12:1526:1526	1271233	1					
ANR	1271459	ExpressionStatement	"snprintf ( buf , sizeof ( buf ) , ""%s/dprintf_failure.%s"" , tmp , get_mySubSystemName ( ) )"	1331:3:36633:36721	1271233	0	True				
ANR	1271460	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""%s/dprintf_failure.%s"" , tmp , get_mySubSystemName ( ) )"		1271233	0					
ANR	1271461	Callee	snprintf		1271233	0					
ANR	1271462	Identifier	snprintf		1271233	0					
ANR	1271463	ArgumentList	buf		1271233	1					
ANR	1271464	Argument	buf		1271233	0					
ANR	1271465	Identifier	buf		1271233	0					
ANR	1271466	Argument	sizeof ( buf )		1271233	1					
ANR	1271467	SizeofExpression	sizeof ( buf )		1271233	0					
ANR	1271468	Sizeof	sizeof		1271233	0					
ANR	1271469	SizeofOperand	buf		1271233	1					
ANR	1271470	Argument	"""%s/dprintf_failure.%s"""		1271233	2					
ANR	1271471	PrimaryExpression	"""%s/dprintf_failure.%s"""		1271233	0					
ANR	1271472	Argument	tmp		1271233	3					
ANR	1271473	Identifier	tmp		1271233	0					
ANR	1271474	Argument	get_mySubSystemName ( )		1271233	4					
ANR	1271475	CallExpression	get_mySubSystemName ( )		1271233	0					
ANR	1271476	Callee	get_mySubSystemName		1271233	0					
ANR	1271477	Identifier	get_mySubSystemName		1271233	0					
ANR	1271478	ArgumentList			1271233	1					
ANR	1271479	ExpressionStatement	"fail_fp = safe_fopen_wrapper_follow ( buf , ""wN"" , 0644 )"	1333:3:36726:36779	1271233	1	True				
ANR	1271480	AssignmentExpression	"fail_fp = safe_fopen_wrapper_follow ( buf , ""wN"" , 0644 )"		1271233	0		=			
ANR	1271481	Identifier	fail_fp		1271233	0					
ANR	1271482	CallExpression	"safe_fopen_wrapper_follow ( buf , ""wN"" , 0644 )"		1271233	1					
ANR	1271483	Callee	safe_fopen_wrapper_follow		1271233	0					
ANR	1271484	Identifier	safe_fopen_wrapper_follow		1271233	0					
ANR	1271485	ArgumentList	buf		1271233	1					
ANR	1271486	Argument	buf		1271233	0					
ANR	1271487	Identifier	buf		1271233	0					
ANR	1271488	Argument	"""wN"""		1271233	1					
ANR	1271489	PrimaryExpression	"""wN"""		1271233	0					
ANR	1271490	Argument	0644		1271233	2					
ANR	1271491	PrimaryExpression	0644		1271233	0					
ANR	1271492	IfStatement	if ( fail_fp )		1271233	2					
ANR	1271493	Condition	fail_fp	1334:7:36788:36794	1271233	0	True				
ANR	1271494	Identifier	fail_fp		1271233	0					
ANR	1271495	CompoundStatement		51:17:1696:1696	1271233	1					
ANR	1271496	ExpressionStatement	"fprintf ( fail_fp , ""%s"" , header )"	1335:4:36804:36836	1271233	0	True				
ANR	1271497	CallExpression	"fprintf ( fail_fp , ""%s"" , header )"		1271233	0					
ANR	1271498	Callee	fprintf		1271233	0					
ANR	1271499	Identifier	fprintf		1271233	0					
ANR	1271500	ArgumentList	fail_fp		1271233	1					
ANR	1271501	Argument	fail_fp		1271233	0					
ANR	1271502	Identifier	fail_fp		1271233	0					
ANR	1271503	Argument	"""%s"""		1271233	1					
ANR	1271504	PrimaryExpression	"""%s"""		1271233	0					
ANR	1271505	Argument	header		1271233	2					
ANR	1271506	Identifier	header		1271233	0					
ANR	1271507	ExpressionStatement	"fprintf ( fail_fp , ""%s"" , msg )"	1336:4:36842:36871	1271233	1	True				
ANR	1271508	CallExpression	"fprintf ( fail_fp , ""%s"" , msg )"		1271233	0					
ANR	1271509	Callee	fprintf		1271233	0					
ANR	1271510	Identifier	fprintf		1271233	0					
ANR	1271511	ArgumentList	fail_fp		1271233	1					
ANR	1271512	Argument	fail_fp		1271233	0					
ANR	1271513	Identifier	fail_fp		1271233	0					
ANR	1271514	Argument	"""%s"""		1271233	1					
ANR	1271515	PrimaryExpression	"""%s"""		1271233	0					
ANR	1271516	Argument	msg		1271233	2					
ANR	1271517	Identifier	msg		1271233	0					
ANR	1271518	IfStatement	if ( tail [ 0 ] )		1271233	2					
ANR	1271519	Condition	tail [ 0 ]	1337:8:36881:36887	1271233	0	True				
ANR	1271520	ArrayIndexing	tail [ 0 ]		1271233	0					
ANR	1271521	Identifier	tail		1271233	0					
ANR	1271522	PrimaryExpression	0		1271233	1					
ANR	1271523	CompoundStatement		54:18:1789:1789	1271233	1					
ANR	1271524	ExpressionStatement	"fprintf ( fail_fp , ""%s"" , tail )"	1338:5:36898:36928	1271233	0	True				
ANR	1271525	CallExpression	"fprintf ( fail_fp , ""%s"" , tail )"		1271233	0					
ANR	1271526	Callee	fprintf		1271233	0					
ANR	1271527	Identifier	fprintf		1271233	0					
ANR	1271528	ArgumentList	fail_fp		1271233	1					
ANR	1271529	Argument	fail_fp		1271233	0					
ANR	1271530	Identifier	fail_fp		1271233	0					
ANR	1271531	Argument	"""%s"""		1271233	1					
ANR	1271532	PrimaryExpression	"""%s"""		1271233	0					
ANR	1271533	Argument	tail		1271233	2					
ANR	1271534	Identifier	tail		1271233	0					
ANR	1271535	ExpressionStatement	"fclose_wrapper ( fail_fp , FCLOSE_RETRY_MAX )"	1340:4:36940:36983	1271233	3	True				
ANR	1271536	CallExpression	"fclose_wrapper ( fail_fp , FCLOSE_RETRY_MAX )"		1271233	0					
ANR	1271537	Callee	fclose_wrapper		1271233	0					
ANR	1271538	Identifier	fclose_wrapper		1271233	0					
ANR	1271539	ArgumentList	fail_fp		1271233	1					
ANR	1271540	Argument	fail_fp		1271233	0					
ANR	1271541	Identifier	fail_fp		1271233	0					
ANR	1271542	Argument	FCLOSE_RETRY_MAX		1271233	1					
ANR	1271543	Identifier	FCLOSE_RETRY_MAX		1271233	0					
ANR	1271544	ExpressionStatement	wrote_warning = TRUE	1341:4:36989:37009	1271233	4	True				
ANR	1271545	AssignmentExpression	wrote_warning = TRUE		1271233	0		=			
ANR	1271546	Identifier	wrote_warning		1271233	0					
ANR	1271547	Identifier	TRUE		1271233	1					
ANR	1271548	ExpressionStatement	free ( tmp )	1343:3:37020:37031	1271233	3	True				
ANR	1271549	CallExpression	free ( tmp )		1271233	0					
ANR	1271550	Callee	free		1271233	0					
ANR	1271551	Identifier	free		1271233	0					
ANR	1271552	ArgumentList	tmp		1271233	1					
ANR	1271553	Argument	tmp		1271233	0					
ANR	1271554	Identifier	tmp		1271233	0					
ANR	1271555	IfStatement	if ( ! wrote_warning )		1271233	9					
ANR	1271556	Condition	! wrote_warning	1345:6:37043:37057	1271233	0	True				
ANR	1271557	UnaryOperationExpression	! wrote_warning		1271233	0					
ANR	1271558	UnaryOperator	!		1271233	0					
ANR	1271559	Identifier	wrote_warning		1271233	1					
ANR	1271560	CompoundStatement		62:24:1959:1959	1271233	1					
ANR	1271561	ExpressionStatement	"fprintf ( stderr , ""%s"" , header )"	1346:3:37066:37097	1271233	0	True				
ANR	1271562	CallExpression	"fprintf ( stderr , ""%s"" , header )"		1271233	0					
ANR	1271563	Callee	fprintf		1271233	0					
ANR	1271564	Identifier	fprintf		1271233	0					
ANR	1271565	ArgumentList	stderr		1271233	1					
ANR	1271566	Argument	stderr		1271233	0					
ANR	1271567	Identifier	stderr		1271233	0					
ANR	1271568	Argument	"""%s"""		1271233	1					
ANR	1271569	PrimaryExpression	"""%s"""		1271233	0					
ANR	1271570	Argument	header		1271233	2					
ANR	1271571	Identifier	header		1271233	0					
ANR	1271572	ExpressionStatement	"fprintf ( stderr , ""%s"" , msg )"	1347:3:37102:37130	1271233	1	True				
ANR	1271573	CallExpression	"fprintf ( stderr , ""%s"" , msg )"		1271233	0					
ANR	1271574	Callee	fprintf		1271233	0					
ANR	1271575	Identifier	fprintf		1271233	0					
ANR	1271576	ArgumentList	stderr		1271233	1					
ANR	1271577	Argument	stderr		1271233	0					
ANR	1271578	Identifier	stderr		1271233	0					
ANR	1271579	Argument	"""%s"""		1271233	1					
ANR	1271580	PrimaryExpression	"""%s"""		1271233	0					
ANR	1271581	Argument	msg		1271233	2					
ANR	1271582	Identifier	msg		1271233	0					
ANR	1271583	IfStatement	if ( tail [ 0 ] )		1271233	2					
ANR	1271584	Condition	tail [ 0 ]	1348:7:37139:37145	1271233	0	True				
ANR	1271585	ArrayIndexing	tail [ 0 ]		1271233	0					
ANR	1271586	Identifier	tail		1271233	0					
ANR	1271587	PrimaryExpression	0		1271233	1					
ANR	1271588	CompoundStatement		65:17:2047:2047	1271233	1					
ANR	1271589	ExpressionStatement	"fprintf ( stderr , ""%s"" , tail )"	1349:4:37155:37184	1271233	0	True				
ANR	1271590	CallExpression	"fprintf ( stderr , ""%s"" , tail )"		1271233	0					
ANR	1271591	Callee	fprintf		1271233	0					
ANR	1271592	Identifier	fprintf		1271233	0					
ANR	1271593	ArgumentList	stderr		1271233	1					
ANR	1271594	Argument	stderr		1271233	0					
ANR	1271595	Identifier	stderr		1271233	0					
ANR	1271596	Argument	"""%s"""		1271233	1					
ANR	1271597	PrimaryExpression	"""%s"""		1271233	0					
ANR	1271598	Argument	tail		1271233	2					
ANR	1271599	Identifier	tail		1271233	0					
ANR	1271600	ExpressionStatement	DprintfBroken = 1	1355:2:37299:37316	1271233	10	True				
ANR	1271601	AssignmentExpression	DprintfBroken = 1		1271233	0		=			
ANR	1271602	Identifier	DprintfBroken		1271233	0					
ANR	1271603	PrimaryExpression	1		1271233	1					
ANR	1271604	ExpressionStatement	debug_close_lock ( )	1358:2:37380:37398	1271233	11	True				
ANR	1271605	CallExpression	debug_close_lock ( )		1271233	0					
ANR	1271606	Callee	debug_close_lock		1271233	0					
ANR	1271607	Identifier	debug_close_lock		1271233	0					
ANR	1271608	ArgumentList			1271233	1					
ANR	1271609	ExpressionStatement	debug_close_all_files ( )	1359:2:37402:37425	1271233	12	True				
ANR	1271610	CallExpression	debug_close_all_files ( )		1271233	0					
ANR	1271611	Callee	debug_close_all_files		1271233	0					
ANR	1271612	Identifier	debug_close_all_files		1271233	0					
ANR	1271613	ArgumentList			1271233	1					
ANR	1271614	IfStatement	if ( _EXCEPT_Cleanup )		1271233	10					
ANR	1271615	Condition	_EXCEPT_Cleanup	1364:5:37536:37550	1271233	0	True				
ANR	1271616	Identifier	_EXCEPT_Cleanup		1271233	0					
ANR	1271617	CompoundStatement		81:23:2452:2452	1271233	1					
ANR	1271618	ExpressionStatement	"( * _EXCEPT_Cleanup ) ( __LINE__ , errno , ""dprintf hit fatal errors\\n"" )"	1365:2:37558:37625	1271233	0	True				
ANR	1271619	CallExpression	"( * _EXCEPT_Cleanup ) ( __LINE__ , errno , ""dprintf hit fatal errors\\n"" )"		1271233	0					
ANR	1271620	Callee	* _EXCEPT_Cleanup		1271233	0					
ANR	1271621	UnaryOperationExpression	* _EXCEPT_Cleanup		1271233	0					
ANR	1271622	UnaryOperator	*		1271233	0					
ANR	1271623	Identifier	_EXCEPT_Cleanup		1271233	1					
ANR	1271624	ArgumentList	__LINE__		1271233	1					
ANR	1271625	Argument	__LINE__		1271233	0					
ANR	1271626	Identifier	__LINE__		1271233	0					
ANR	1271627	Argument	errno		1271233	1					
ANR	1271628	Identifier	errno		1271233	0					
ANR	1271629	Argument	"""dprintf hit fatal errors\\n"""		1271233	2					
ANR	1271630	PrimaryExpression	"""dprintf hit fatal errors\\n"""		1271233	0					
ANR	1271631	ExpressionStatement	fflush ( stderr )	1369:1:37658:37673	1271233	11	True				
ANR	1271632	CallExpression	fflush ( stderr )		1271233	0					
ANR	1271633	Callee	fflush		1271233	0					
ANR	1271634	Identifier	fflush		1271233	0					
ANR	1271635	ArgumentList	stderr		1271233	1					
ANR	1271636	Argument	stderr		1271233	0					
ANR	1271637	Identifier	stderr		1271233	0					
ANR	1271638	ExpressionStatement	exit ( DPRINTF_ERROR )	1371:1:37677:37696	1271233	12	True				
ANR	1271639	CallExpression	exit ( DPRINTF_ERROR )		1271233	0					
ANR	1271640	Callee	exit		1271233	0					
ANR	1271641	Identifier	exit		1271233	0					
ANR	1271642	ArgumentList	DPRINTF_ERROR		1271233	1					
ANR	1271643	Argument	DPRINTF_ERROR		1271233	0					
ANR	1271644	Identifier	DPRINTF_ERROR		1271233	0					
ANR	1271645	ReturnType	void		1271233	1					
ANR	1271646	Identifier	_condor_dprintf_exit		1271233	2					
ANR	1271647	ParameterList	"int error_code , const char * msg"		1271233	3					
ANR	1271648	Parameter	int error_code	1283:22:35067:35080	1271233	0	True				
ANR	1271649	ParameterType	int		1271233	0					
ANR	1271650	Identifier	error_code		1271233	1					
ANR	1271651	Parameter	const char * msg	1283:38:35083:35097	1271233	1	True				
ANR	1271652	ParameterType	const char *		1271233	0					
ANR	1271653	Identifier	msg		1271233	1					
ANR	1271654	CFGEntryNode	ENTRY		1271233		True				
ANR	1271655	CFGExitNode	EXIT		1271233		True				
ANR	1271656	Symbol	msg		1271233						
ANR	1271657	Symbol	localtime		1271233						
ANR	1271658	Symbol	& clock_now		1271233						
ANR	1271659	Symbol	DPRINTF_ERROR		1271233						
ANR	1271660	Symbol	DebugUseTimestamps		1271233						
ANR	1271661	Symbol	wrote_warning		1271233						
ANR	1271662	Symbol	get_mySubSystemName		1271233						
ANR	1271663	Symbol	DprintfBroken		1271233						
ANR	1271664	Symbol	tmp		1271233						
ANR	1271665	Symbol	tm -> tm_mday		1271233						
ANR	1271666	Symbol	dprintf_param_funcs -> param		1271233						
ANR	1271667	Symbol	dprintf_param_funcs		1271233						
ANR	1271668	Symbol	FCLOSE_RETRY_MAX		1271233						
ANR	1271669	Symbol	_EXCEPT_Cleanup		1271233						
ANR	1271670	Symbol	safe_fopen_wrapper_follow		1271233						
ANR	1271671	Symbol	* tail		1271233						
ANR	1271672	Symbol	errno		1271233						
ANR	1271673	Symbol	tail		1271233						
ANR	1271674	Symbol	TRUE		1271233						
ANR	1271675	Symbol	it		1271233						
ANR	1271676	Symbol	clock_now		1271233						
ANR	1271677	Symbol	geteuid		1271233						
ANR	1271678	Symbol	stderr		1271233						
ANR	1271679	Symbol	tm -> tm_mon		1271233						
ANR	1271680	Symbol	__LINE__		1271233						
ANR	1271681	Symbol	fail_fp		1271233						
ANR	1271682	Symbol	strerror		1271233						
ANR	1271683	Symbol	buf		1271233						
ANR	1271684	Symbol	getuid		1271233						
ANR	1271685	Symbol	tm -> tm_min		1271233						
ANR	1271686	Symbol	tm -> tm_sec		1271233						
ANR	1271687	Symbol	header		1271233						
ANR	1271688	Symbol	tm		1271233						
ANR	1271689	Symbol	error_code		1271233						
ANR	1271690	Symbol	FALSE		1271233						
ANR	1271691	Symbol	tm -> tm_hour		1271233						
ANR	1271692	Symbol	* tm		1271233						
ANR	1271693	Symbol	getpid		1271233						
ANR	1271694	Symbol	* dprintf_param_funcs		1271233						
ANR	1271695	Function	set_debug_flags	1381:0:37961:38046							
ANR	1271696	FunctionDef	set_debug_flags (const char * strflags)		1271695	0					
ANR	1271697	CompoundStatement		1383:0:38006:38046	1271695	0					
ANR	1271698	ExpressionStatement	_condor_set_debug_flags ( strflags )	1384:1:38009:38044	1271695	0	True				
ANR	1271699	CallExpression	_condor_set_debug_flags ( strflags )		1271695	0					
ANR	1271700	Callee	_condor_set_debug_flags		1271695	0					
ANR	1271701	Identifier	_condor_set_debug_flags		1271695	0					
ANR	1271702	ArgumentList	strflags		1271695	1					
ANR	1271703	Argument	strflags		1271695	0					
ANR	1271704	Identifier	strflags		1271695	0					
ANR	1271705	ReturnType	void		1271695	1					
ANR	1271706	Identifier	set_debug_flags		1271695	2					
ANR	1271707	ParameterList	const char * strflags		1271695	3					
ANR	1271708	Parameter	const char * strflags	1382:17:37983:38002	1271695	0	True				
ANR	1271709	ParameterType	const char *		1271695	0					
ANR	1271710	Identifier	strflags		1271695	1					
ANR	1271711	CFGEntryNode	ENTRY		1271695		True				
ANR	1271712	CFGExitNode	EXIT		1271695		True				
ANR	1271713	Symbol	strflags		1271695						
ANR	1271714	Function	dprintf_last_modification	1388:0:38050:38109							
ANR	1271715	FunctionDef	dprintf_last_modification ()		1271714	0					
ANR	1271716	CompoundStatement		1390:0:38085:38109	1271714	0					
ANR	1271717	ReturnStatement	return DebugLastMod ;	1391:1:38088:38107	1271714	0	True				
ANR	1271718	Identifier	DebugLastMod		1271714	0					
ANR	1271719	ReturnType	time_t		1271714	1					
ANR	1271720	Identifier	dprintf_last_modification		1271714	2					
ANR	1271721	ParameterList			1271714	3					
ANR	1271722	CFGEntryNode	ENTRY		1271714		True				
ANR	1271723	CFGExitNode	EXIT		1271714		True				
ANR	1271724	Symbol	DebugLastMod		1271714						
ANR	1271725	Function	dprintf_touch_log	1394:0:38112:38541							
ANR	1271726	FunctionDef	dprintf_touch_log ()		1271725	0					
ANR	1271727	CompoundStatement		1396:0:38137:38541	1271725	0					
ANR	1271728	IdentifierDeclStatement	std :: vector < DebugFileInfo > :: iterator it ;	1397:1:38140:38179	1271725	0	True				
ANR	1271729	IdentifierDecl	it		1271725	0					
ANR	1271730	IdentifierDeclType	std :: vector < DebugFileInfo > :: iterator		1271725	0					
ANR	1271731	Identifier	it		1271725	1					
ANR	1271732	IfStatement	if ( _condor_dprintf_works )		1271725	1					
ANR	1271733	Condition	_condor_dprintf_works	1398:6:38187:38207	1271725	0	True				
ANR	1271734	Identifier	_condor_dprintf_works		1271725	0					
ANR	1271735	CompoundStatement		3:30:73:73	1271725	1					
ANR	1271736	IfStatement	if ( ! DebugLogs -> empty ( ) )		1271725	0					
ANR	1271737	Condition	! DebugLogs -> empty ( )	1399:6:38219:38237	1271725	0	True				
ANR	1271738	UnaryOperationExpression	! DebugLogs -> empty ( )		1271725	0					
ANR	1271739	UnaryOperator	!		1271725	0					
ANR	1271740	CallExpression	DebugLogs -> empty ( )		1271725	1					
ANR	1271741	Callee	DebugLogs -> empty		1271725	0					
ANR	1271742	PtrMemberAccess	DebugLogs -> empty		1271725	0					
ANR	1271743	Identifier	DebugLogs		1271725	0					
ANR	1271744	Identifier	empty		1271725	1					
ANR	1271745	ArgumentList			1271725	1					
ANR	1271746	CompoundStatement		4:27:102:102	1271725	1					
ANR	1271747	ExpressionStatement	it = DebugLogs -> begin ( )	1400:3:38245:38268	1271725	0	True				
ANR	1271748	AssignmentExpression	it = DebugLogs -> begin ( )		1271725	0		=			
ANR	1271749	Identifier	it		1271725	0					
ANR	1271750	CallExpression	DebugLogs -> begin ( )		1271725	1					
ANR	1271751	Callee	DebugLogs -> begin		1271725	0					
ANR	1271752	PtrMemberAccess	DebugLogs -> begin		1271725	0					
ANR	1271753	Identifier	DebugLogs		1271725	0					
ANR	1271754	Identifier	begin		1271725	1					
ANR	1271755	ArgumentList			1271725	1					
ANR	1271756	ExpressionStatement	"utime ( it -> logPath . c_str ( ) , NULL )"	1402:3:38286:38320	1271725	1	True				
ANR	1271757	CallExpression	"utime ( it -> logPath . c_str ( ) , NULL )"		1271725	0					
ANR	1271758	Callee	utime		1271725	0					
ANR	1271759	Identifier	utime		1271725	0					
ANR	1271760	ArgumentList	it -> logPath . c_str ( )		1271725	1					
ANR	1271761	Argument	it -> logPath . c_str ( )		1271725	0					
ANR	1271762	CallExpression	it -> logPath . c_str ( )		1271725	0					
ANR	1271763	Callee	it -> logPath . c_str		1271725	0					
ANR	1271764	MemberAccess	it -> logPath . c_str		1271725	0					
ANR	1271765	PtrMemberAccess	it -> logPath		1271725	0					
ANR	1271766	Identifier	it		1271725	0					
ANR	1271767	Identifier	logPath		1271725	1					
ANR	1271768	Identifier	c_str		1271725	1					
ANR	1271769	ArgumentList			1271725	1					
ANR	1271770	Argument	NULL		1271725	1					
ANR	1271771	Identifier	NULL		1271725	0					
ANR	1271772	ReturnType	void		1271725	1					
ANR	1271773	Identifier	dprintf_touch_log		1271725	2					
ANR	1271774	ParameterList			1271725	3					
ANR	1271775	CFGEntryNode	ENTRY		1271725		True				
ANR	1271776	CFGExitNode	EXIT		1271725		True				
ANR	1271777	Symbol	* it		1271725						
ANR	1271778	Symbol	NULL		1271725						
ANR	1271779	Symbol	it -> logPath . c_str		1271725						
ANR	1271780	Symbol	_condor_dprintf_works		1271725						
ANR	1271781	Symbol	DebugLogs -> begin		1271725						
ANR	1271782	Symbol	it		1271725						
ANR	1271783	Symbol	DebugLogs -> empty		1271725						
ANR	1271784	Symbol	* DebugLogs		1271725						
ANR	1271785	Symbol	DebugLogs		1271725						
ANR	1271786	Symbol	it -> logPath		1271725						
ANR	1271787	DeclStmt									
ANR	1271788	Decl							BOOLEAN	BOOLEAN ( int value )	dprintf_retry_errno
ANR	1271789	Function	dprintf_retry_errno	1416:0:38587:38695							
ANR	1271790	FunctionDef	dprintf_retry_errno (int value)		1271789	0					
ANR	1271791	CompoundStatement		1417:0:38628:38695	1271789	0					
ANR	1271792	ReturnStatement	return FALSE ;	1419:1:38644:38656	1271789	0	True				
ANR	1271793	Identifier	FALSE		1271789	0					
ANR	1271794	ReturnType	BOOLEAN		1271789	1					
ANR	1271795	Identifier	dprintf_retry_errno		1271789	2					
ANR	1271796	ParameterList	int value		1271789	3					
ANR	1271797	Parameter	int value	1416:29:38616:38624	1271789	0	True				
ANR	1271798	ParameterType	int		1271789	0					
ANR	1271799	Identifier	value		1271789	1					
ANR	1271800	CFGEntryNode	ENTRY		1271789		True				
ANR	1271801	CFGExitNode	EXIT		1271789		True				
ANR	1271802	Symbol	FALSE		1271789						
ANR	1271803	Symbol	value		1271789						
ANR	1271804	Function	fclose_wrapper	1432:0:39093:39616							
ANR	1271805	FunctionDef	"fclose_wrapper (FILE * stream , int maxRetries)"		1271804	0					
ANR	1271806	CompoundStatement		1434:0:39144:39616	1271804	0					
ANR	1271807	IdentifierDeclStatement	int result = 0 ;	1436:1:39148:39163	1271804	0	True				
ANR	1271808	IdentifierDecl	result = 0		1271804	0					
ANR	1271809	IdentifierDeclType	int		1271804	0					
ANR	1271810	Identifier	result		1271804	1					
ANR	1271811	AssignmentExpression	result = 0		1271804	2		=			
ANR	1271812	Identifier	result		1271804	0					
ANR	1271813	PrimaryExpression	0		1271804	1					
ANR	1271814	IdentifierDeclStatement	int retryCount = 0 ;	1438:1:39167:39186	1271804	1	True				
ANR	1271815	IdentifierDecl	retryCount = 0		1271804	0					
ANR	1271816	IdentifierDeclType	int		1271804	0					
ANR	1271817	Identifier	retryCount		1271804	1					
ANR	1271818	AssignmentExpression	retryCount = 0		1271804	2		=			
ANR	1271819	Identifier	retryCount		1271804	0					
ANR	1271820	PrimaryExpression	0		1271804	1					
ANR	1271821	IdentifierDeclStatement	BOOLEAN done = FALSE ;	1439:1:39189:39209	1271804	2	True				
ANR	1271822	IdentifierDecl	done = FALSE		1271804	0					
ANR	1271823	IdentifierDeclType	BOOLEAN		1271804	0					
ANR	1271824	Identifier	done		1271804	1					
ANR	1271825	AssignmentExpression	done = FALSE		1271804	2		=			
ANR	1271826	Identifier	FALSE		1271804	0					
ANR	1271827	Identifier	FALSE		1271804	1					
ANR	1271828	ExpressionStatement	ASSERT ( maxRetries >= 0 )	1441:1:39213:39238	1271804	3	True				
ANR	1271829	CallExpression	ASSERT ( maxRetries >= 0 )		1271804	0					
ANR	1271830	Callee	ASSERT		1271804	0					
ANR	1271831	Identifier	ASSERT		1271804	0					
ANR	1271832	ArgumentList	maxRetries >= 0		1271804	1					
ANR	1271833	Argument	maxRetries >= 0		1271804	0					
ANR	1271834	RelationalExpression	maxRetries >= 0		1271804	0		>=			
ANR	1271835	Identifier	maxRetries		1271804	0					
ANR	1271836	PrimaryExpression	0		1271804	1					
ANR	1271837	WhileStatement	while ( ! done )		1271804	4					
ANR	1271838	Condition	! done	1442:9:39249:39253	1271804	0	True				
ANR	1271839	UnaryOperationExpression	! done		1271804	0					
ANR	1271840	UnaryOperator	!		1271804	0					
ANR	1271841	Identifier	done		1271804	1					
ANR	1271842	CompoundStatement		9:17:112:112	1271804	1					
ANR	1271843	IfStatement	if ( ( result = fclose ( stream ) ) != 0 )		1271804	0					
ANR	1271844	Condition	( result = fclose ( stream ) ) != 0	1443:7:39266:39299	1271804	0	True				
ANR	1271845	EqualityExpression	( result = fclose ( stream ) ) != 0		1271804	0		!=			
ANR	1271846	AssignmentExpression	result = fclose ( stream )		1271804	0		=			
ANR	1271847	Identifier	result		1271804	0					
ANR	1271848	CallExpression	fclose ( stream )		1271804	1					
ANR	1271849	Callee	fclose		1271804	0					
ANR	1271850	Identifier	fclose		1271804	0					
ANR	1271851	ArgumentList	stream		1271804	1					
ANR	1271852	Argument	stream		1271804	0					
ANR	1271853	Identifier	stream		1271804	0					
ANR	1271854	PrimaryExpression	0		1271804	1					
ANR	1271855	CompoundStatement		10:44:158:158	1271804	1					
ANR	1271856	IfStatement	if ( dprintf_retry_errno ( errno ) && retryCount < maxRetries )		1271804	0					
ANR	1271857	Condition	dprintf_retry_errno ( errno ) && retryCount < maxRetries	1444:8:39313:39367	1271804	0	True				
ANR	1271858	AndExpression	dprintf_retry_errno ( errno ) && retryCount < maxRetries		1271804	0		&&			
ANR	1271859	CallExpression	dprintf_retry_errno ( errno )		1271804	0					
ANR	1271860	Callee	dprintf_retry_errno		1271804	0					
ANR	1271861	Identifier	dprintf_retry_errno		1271804	0					
ANR	1271862	ArgumentList	errno		1271804	1					
ANR	1271863	Argument	errno		1271804	0					
ANR	1271864	Identifier	errno		1271804	0					
ANR	1271865	RelationalExpression	retryCount < maxRetries		1271804	1		<			
ANR	1271866	Identifier	retryCount		1271804	0					
ANR	1271867	Identifier	maxRetries		1271804	1					
ANR	1271868	CompoundStatement		11:66:226:226	1271804	1					
ANR	1271869	ExpressionStatement	retryCount ++	1445:4:39377:39389	1271804	0	True				
ANR	1271870	PostIncDecOperationExpression	retryCount ++		1271804	0					
ANR	1271871	Identifier	retryCount		1271804	0					
ANR	1271872	IncDec	++		1271804	1					
ANR	1271873	ElseStatement	else		1271804	0					
ANR	1271874	CompoundStatement		13:10:256:256	1271804	0					
ANR	1271875	Statement	fprintf	1447:4:39407:39413	1271804	0	True				
ANR	1271876	Statement	(	1447:11:39414:39414	1271804	1	True				
ANR	1271877	Statement	stderr	1447:13:39416:39421	1271804	2	True				
ANR	1271878	Statement	","	1447:19:39422:39422	1271804	3	True				
ANR	1271879	Statement	"""fclose_wrapper() failed after %d retries; """	1447:21:39424:39467	1271804	4	True				
ANR	1271880	Statement	"""errno: %d (%s)\\n"""	1448:7:39476:39493	1271804	5	True				
ANR	1271881	Statement	","	1448:25:39494:39494	1271804	6	True				
ANR	1271882	Statement	retryCount	1449:7:39503:39512	1271804	7	True				
ANR	1271883	Statement	","	1449:17:39513:39513	1271804	8	True				
ANR	1271884	Statement	errno	1449:19:39515:39519	1271804	9	True				
ANR	1271885	Statement	","	1449:24:39520:39520	1271804	10	True				
ANR	1271886	Statement	strerror	1449:26:39522:39529	1271804	11	True				
ANR	1271887	Statement	(	1449:34:39530:39530	1271804	12	True				
ANR	1271888	Statement	errno	1449:36:39532:39536	1271804	13	True				
ANR	1271889	Statement	)	1449:42:39538:39538	1271804	14	True				
ANR	1271890	Statement	)	1449:44:39540:39540	1271804	15	True				
ANR	1271891	ExpressionStatement		1449:45:39541:39541	1271804	16	True				
ANR	1271892	ExpressionStatement	done = TRUE	1450:4:39547:39558	1271804	17	True				
ANR	1271893	AssignmentExpression	done = TRUE		1271804	0		=			
ANR	1271894	Identifier	done		1271804	0					
ANR	1271895	Identifier	TRUE		1271804	1					
ANR	1271896	ElseStatement	else		1271804	0					
ANR	1271897	CompoundStatement		19:9:429:429	1271804	0					
ANR	1271898	ExpressionStatement	done = TRUE	1453:3:39579:39590	1271804	0	True				
ANR	1271899	AssignmentExpression	done = TRUE		1271804	0		=			
ANR	1271900	Identifier	done		1271804	0					
ANR	1271901	Identifier	TRUE		1271804	1					
ANR	1271902	ReturnStatement	return result ;	1457:1:39601:39614	1271804	5	True				
ANR	1271903	Identifier	result		1271804	0					
ANR	1271904	ReturnType	int		1271804	1					
ANR	1271905	Identifier	fclose_wrapper		1271804	2					
ANR	1271906	ParameterList	"FILE * stream , int maxRetries"		1271804	3					
ANR	1271907	Parameter	FILE * stream	1433:16:39113:39124	1271804	0	True				
ANR	1271908	ParameterType	FILE *		1271804	0					
ANR	1271909	Identifier	stream		1271804	1					
ANR	1271910	Parameter	int maxRetries	1433:30:39127:39140	1271804	1	True				
ANR	1271911	ParameterType	int		1271804	0					
ANR	1271912	Identifier	maxRetries		1271804	1					
ANR	1271913	CFGEntryNode	ENTRY		1271804		True				
ANR	1271914	CFGExitNode	EXIT		1271804		True				
ANR	1271915	Symbol	result		1271804						
ANR	1271916	Symbol	maxRetries		1271804						
ANR	1271917	Symbol	errno		1271804						
ANR	1271918	Symbol	dprintf_retry_errno		1271804						
ANR	1271919	Symbol	stream		1271804						
ANR	1271920	Symbol	retryCount		1271804						
ANR	1271921	Symbol	fclose		1271804						
ANR	1271922	Symbol	TRUE		1271804						
ANR	1271923	Symbol	FALSE		1271804						
ANR	1271924	Symbol	done		1271804						
ANR	1271925	DeclStmt									
ANR	1271926	Decl							int	"int ( int * argc , char * argv [ ] , char * line )"	_condor_mkargv
ANR	1271927	Function	mkargv	1464:0:39770:39867							
ANR	1271928	FunctionDef	"mkargv (int * argc , char * argv [ ] , char * line)"		1271927	0					
ANR	1271929	CompoundStatement		1466:0:39820:39867	1271927	0					
ANR	1271930	ReturnStatement	"return ( _condor_mkargv ( argc , argv , line ) ) ;"	1467:1:39823:39865	1271927	0	True				
ANR	1271931	CallExpression	"_condor_mkargv ( argc , argv , line )"		1271927	0					
ANR	1271932	Callee	_condor_mkargv		1271927	0					
ANR	1271933	Identifier	_condor_mkargv		1271927	0					
ANR	1271934	ArgumentList	argc		1271927	1					
ANR	1271935	Argument	argc		1271927	0					
ANR	1271936	Identifier	argc		1271927	0					
ANR	1271937	Argument	argv		1271927	1					
ANR	1271938	Identifier	argv		1271927	0					
ANR	1271939	Argument	line		1271927	2					
ANR	1271940	Identifier	line		1271927	0					
ANR	1271941	ReturnType	int		1271927	1					
ANR	1271942	Identifier	mkargv		1271927	2					
ANR	1271943	ParameterList	"int * argc , char * argv [ ] , char * line"		1271927	3					
ANR	1271944	Parameter	int * argc	1465:8:39782:39790	1271927	0	True				
ANR	1271945	ParameterType	int *		1271927	0					
ANR	1271946	Identifier	argc		1271927	1					
ANR	1271947	Parameter	char * argv [ ]	1465:19:39793:39804	1271927	1	True				
ANR	1271948	ParameterType	char * [ ]		1271927	0					
ANR	1271949	Identifier	argv		1271927	1					
ANR	1271950	Parameter	char * line	1465:33:39807:39816	1271927	2	True				
ANR	1271951	ParameterType	char *		1271927	0					
ANR	1271952	Identifier	line		1271927	1					
ANR	1271953	CFGEntryNode	ENTRY		1271927		True				
ANR	1271954	CFGExitNode	EXIT		1271927		True				
ANR	1271955	Symbol	argc		1271927						
ANR	1271956	Symbol	_condor_mkargv		1271927						
ANR	1271957	Symbol	line		1271927						
ANR	1271958	Symbol	argv		1271927						
ANR	1271959	Function	_condor_save_dprintf_line	1470:0:39870:40708							
ANR	1271960	FunctionDef	"_condor_save_dprintf_line (int flags , const char * fmt , va_list args)"		1271959	0					
ANR	1271961	CompoundStatement		1472:0:39952:40708	1271959	0					
ANR	1271962	IdentifierDeclStatement	char * buf ;	1473:1:39955:39964	1271959	0	True				
ANR	1271963	IdentifierDecl	* buf		1271959	0					
ANR	1271964	IdentifierDeclType	char *		1271959	0					
ANR	1271965	Identifier	buf		1271959	1					
ANR	1271966	IdentifierDeclStatement	struct saved_dprintf * new_node ;	1474:1:39967:39997	1271959	1	True				
ANR	1271967	IdentifierDecl	* new_node		1271959	0					
ANR	1271968	IdentifierDeclType	struct saved_dprintf *		1271959	0					
ANR	1271969	Identifier	new_node		1271959	1					
ANR	1271970	IdentifierDeclStatement	int len ;	1475:1:40000:40007	1271959	2	True				
ANR	1271971	IdentifierDecl	len		1271959	0					
ANR	1271972	IdentifierDeclType	int		1271959	0					
ANR	1271973	Identifier	len		1271959	1					
ANR	1271974	ExpressionStatement	"len = vprintf_length ( fmt , args ) + 1"	1478:1:40073:40108	1271959	3	True				
ANR	1271975	AssignmentExpression	"len = vprintf_length ( fmt , args ) + 1"		1271959	0		=			
ANR	1271976	Identifier	len		1271959	0					
ANR	1271977	AdditiveExpression	"vprintf_length ( fmt , args ) + 1"		1271959	1		+			
ANR	1271978	CallExpression	"vprintf_length ( fmt , args )"		1271959	0					
ANR	1271979	Callee	vprintf_length		1271959	0					
ANR	1271980	Identifier	vprintf_length		1271959	0					
ANR	1271981	ArgumentList	fmt		1271959	1					
ANR	1271982	Argument	fmt		1271959	0					
ANR	1271983	Identifier	fmt		1271959	0					
ANR	1271984	Argument	args		1271959	1					
ANR	1271985	Identifier	args		1271959	0					
ANR	1271986	PrimaryExpression	1		1271959	1					
ANR	1271987	IfStatement	if ( len <= 0 )		1271959	4					
ANR	1271988	Condition	len <= 0	1479:5:40151:40158	1271959	0	True				
ANR	1271989	RelationalExpression	len <= 0		1271959	0		<=			
ANR	1271990	Identifier	len		1271959	0					
ANR	1271991	PrimaryExpression	0		1271959	1					
ANR	1271992	CompoundStatement		8:16:209:209	1271959	1					
ANR	1271993	ReturnStatement	return ;	1480:2:40167:40173	1271959	0	True				
ANR	1271994	ExpressionStatement	buf = ( char * ) malloc ( sizeof ( char ) * ( len + 1 ) )	1483:1:40231:40279	1271959	5	True				
ANR	1271995	AssignmentExpression	buf = ( char * ) malloc ( sizeof ( char ) * ( len + 1 ) )		1271959	0		=			
ANR	1271996	Identifier	buf		1271959	0					
ANR	1271997	CastExpression	( char * ) malloc ( sizeof ( char ) * ( len + 1 ) )		1271959	1					
ANR	1271998	CastTarget	char *		1271959	0					
ANR	1271999	CallExpression	malloc ( sizeof ( char ) * ( len + 1 ) )		1271959	1					
ANR	1272000	Callee	malloc		1271959	0					
ANR	1272001	Identifier	malloc		1271959	0					
ANR	1272002	ArgumentList	sizeof ( char ) * ( len + 1 )		1271959	1					
ANR	1272003	Argument	sizeof ( char ) * ( len + 1 )		1271959	0					
ANR	1272004	MultiplicativeExpression	sizeof ( char ) * ( len + 1 )		1271959	0		*			
ANR	1272005	SizeofExpression	sizeof ( char )		1271959	0					
ANR	1272006	Sizeof	sizeof		1271959	0					
ANR	1272007	SizeofOperand	char		1271959	1					
ANR	1272008	AdditiveExpression	len + 1		1271959	1		+			
ANR	1272009	Identifier	len		1271959	0					
ANR	1272010	PrimaryExpression	1		1271959	1					
ANR	1272011	IfStatement	if ( ! buf )		1271959	6					
ANR	1272012	Condition	! buf	1484:5:40286:40290	1271959	0	True				
ANR	1272013	UnaryOperationExpression	! buf		1271959	0					
ANR	1272014	UnaryOperator	!		1271959	0					
ANR	1272015	Identifier	buf		1271959	1					
ANR	1272016	CompoundStatement		13:13:341:341	1271959	1					
ANR	1272017	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	1485:2:40298:40324	1271959	0	True				
ANR	1272018	CallExpression	"EXCEPT ( ""Out of memory!"" )"		1271959	0					
ANR	1272019	Callee	EXCEPT		1271959	0					
ANR	1272020	Identifier	EXCEPT		1271959	0					
ANR	1272021	ArgumentList	"""Out of memory!"""		1271959	1					
ANR	1272022	Argument	"""Out of memory!"""		1271959	0					
ANR	1272023	PrimaryExpression	"""Out of memory!"""		1271959	0					
ANR	1272024	ExpressionStatement	"vsnprintf ( buf , len , fmt , args )"	1487:1:40330:40362	1271959	7	True				
ANR	1272025	CallExpression	"vsnprintf ( buf , len , fmt , args )"		1271959	0					
ANR	1272026	Callee	vsnprintf		1271959	0					
ANR	1272027	Identifier	vsnprintf		1271959	0					
ANR	1272028	ArgumentList	buf		1271959	1					
ANR	1272029	Argument	buf		1271959	0					
ANR	1272030	Identifier	buf		1271959	0					
ANR	1272031	Argument	len		1271959	1					
ANR	1272032	Identifier	len		1271959	0					
ANR	1272033	Argument	fmt		1271959	2					
ANR	1272034	Identifier	fmt		1271959	0					
ANR	1272035	Argument	args		1271959	3					
ANR	1272036	Identifier	args		1271959	0					
ANR	1272037	ExpressionStatement	new_node = ( struct saved_dprintf * ) malloc ( sizeof ( struct saved_dprintf ) )	1490:1:40429:40502	1271959	8	True				
ANR	1272038	AssignmentExpression	new_node = ( struct saved_dprintf * ) malloc ( sizeof ( struct saved_dprintf ) )		1271959	0		=			
ANR	1272039	Identifier	new_node		1271959	0					
ANR	1272040	CastExpression	( struct saved_dprintf * ) malloc ( sizeof ( struct saved_dprintf ) )		1271959	1					
ANR	1272041	CastTarget	struct saved_dprintf *		1271959	0					
ANR	1272042	CallExpression	malloc ( sizeof ( struct saved_dprintf ) )		1271959	1					
ANR	1272043	Callee	malloc		1271959	0					
ANR	1272044	Identifier	malloc		1271959	0					
ANR	1272045	ArgumentList	sizeof ( struct saved_dprintf )		1271959	1					
ANR	1272046	Argument	sizeof ( struct saved_dprintf )		1271959	0					
ANR	1272047	SizeofExpression	sizeof ( struct saved_dprintf )		1271959	0					
ANR	1272048	Sizeof	sizeof		1271959	0					
ANR	1272049	SizeofOperand	struct saved_dprintf		1271959	1					
ANR	1272050	IfStatement	if ( saved_list == NULL )		1271959	9					
ANR	1272051	Condition	saved_list == NULL	1491:5:40509:40526	1271959	0	True				
ANR	1272052	EqualityExpression	saved_list == NULL		1271959	0		==			
ANR	1272053	Identifier	saved_list		1271959	0					
ANR	1272054	Identifier	NULL		1271959	1					
ANR	1272055	CompoundStatement		20:26:577:577	1271959	1					
ANR	1272056	ExpressionStatement	saved_list = new_node	1492:2:40534:40555	1271959	0	True				
ANR	1272057	AssignmentExpression	saved_list = new_node		1271959	0		=			
ANR	1272058	Identifier	saved_list		1271959	0					
ANR	1272059	Identifier	new_node		1271959	1					
ANR	1272060	ElseStatement	else		1271959	0					
ANR	1272061	CompoundStatement		22:8:612:612	1271959	0					
ANR	1272062	ExpressionStatement	saved_list_tail -> next = new_node	1494:2:40569:40601	1271959	0	True				
ANR	1272063	AssignmentExpression	saved_list_tail -> next = new_node		1271959	0		=			
ANR	1272064	PtrMemberAccess	saved_list_tail -> next		1271959	0					
ANR	1272065	Identifier	saved_list_tail		1271959	0					
ANR	1272066	Identifier	next		1271959	1					
ANR	1272067	Identifier	new_node		1271959	1					
ANR	1272068	ExpressionStatement	saved_list_tail = new_node	1496:1:40607:40633	1271959	10	True				
ANR	1272069	AssignmentExpression	saved_list_tail = new_node		1271959	0		=			
ANR	1272070	Identifier	saved_list_tail		1271959	0					
ANR	1272071	Identifier	new_node		1271959	1					
ANR	1272072	ExpressionStatement	new_node -> next = NULL	1497:1:40636:40657	1271959	11	True				
ANR	1272073	AssignmentExpression	new_node -> next = NULL		1271959	0		=			
ANR	1272074	PtrMemberAccess	new_node -> next		1271959	0					
ANR	1272075	Identifier	new_node		1271959	0					
ANR	1272076	Identifier	next		1271959	1					
ANR	1272077	Identifier	NULL		1271959	1					
ANR	1272078	ExpressionStatement	new_node -> level = flags	1498:1:40660:40683	1271959	12	True				
ANR	1272079	AssignmentExpression	new_node -> level = flags		1271959	0		=			
ANR	1272080	PtrMemberAccess	new_node -> level		1271959	0					
ANR	1272081	Identifier	new_node		1271959	0					
ANR	1272082	Identifier	level		1271959	1					
ANR	1272083	Identifier	flags		1271959	1					
ANR	1272084	ExpressionStatement	new_node -> line = buf	1499:1:40686:40706	1271959	13	True				
ANR	1272085	AssignmentExpression	new_node -> line = buf		1271959	0		=			
ANR	1272086	PtrMemberAccess	new_node -> line		1271959	0					
ANR	1272087	Identifier	new_node		1271959	0					
ANR	1272088	Identifier	line		1271959	1					
ANR	1272089	Identifier	buf		1271959	1					
ANR	1272090	ReturnType	static void		1271959	1					
ANR	1272091	Identifier	_condor_save_dprintf_line		1271959	2					
ANR	1272092	ParameterList	"int flags , const char * fmt , va_list args"		1271959	3					
ANR	1272093	Parameter	int flags	1471:27:39909:39917	1271959	0	True				
ANR	1272094	ParameterType	int		1271959	0					
ANR	1272095	Identifier	flags		1271959	1					
ANR	1272096	Parameter	const char * fmt	1471:38:39920:39934	1271959	1	True				
ANR	1272097	ParameterType	const char *		1271959	0					
ANR	1272098	Identifier	fmt		1271959	1					
ANR	1272099	Parameter	va_list args	1471:55:39937:39948	1271959	2	True				
ANR	1272100	ParameterType	va_list		1271959	0					
ANR	1272101	Identifier	args		1271959	1					
ANR	1272102	CFGEntryNode	ENTRY		1271959		True				
ANR	1272103	CFGExitNode	EXIT		1271959		True				
ANR	1272104	Symbol	malloc		1271959						
ANR	1272105	Symbol	new_node -> line		1271959						
ANR	1272106	Symbol	NULL		1271959						
ANR	1272107	Symbol	new_node -> next		1271959						
ANR	1272108	Symbol	* new_node		1271959						
ANR	1272109	Symbol	flags		1271959						
ANR	1272110	Symbol	saved_list_tail -> next		1271959						
ANR	1272111	Symbol	vprintf_length		1271959						
ANR	1272112	Symbol	saved_list		1271959						
ANR	1272113	Symbol	fmt		1271959						
ANR	1272114	Symbol	new_node -> level		1271959						
ANR	1272115	Symbol	saved_list_tail		1271959						
ANR	1272116	Symbol	args		1271959						
ANR	1272117	Symbol	buf		1271959						
ANR	1272118	Symbol	* saved_list_tail		1271959						
ANR	1272119	Symbol	new_node		1271959						
ANR	1272120	Symbol	len		1271959						
ANR	1272121	Function	_condor_dprintf_saved_lines	1503:0:40712:41825							
ANR	1272122	FunctionDef	_condor_dprintf_saved_lines ()		1272121	0					
ANR	1272123	CompoundStatement		1505:0:40753:41825	1272121	0					
ANR	1272124	IdentifierDeclStatement	struct saved_dprintf * node ;	1506:1:40756:40782	1272121	0	True				
ANR	1272125	IdentifierDecl	* node		1272121	0					
ANR	1272126	IdentifierDeclType	struct saved_dprintf *		1272121	0					
ANR	1272127	Identifier	node		1272121	1					
ANR	1272128	IdentifierDeclStatement	struct saved_dprintf * next ;	1507:1:40785:40811	1272121	1	True				
ANR	1272129	IdentifierDecl	* next		1272121	0					
ANR	1272130	IdentifierDeclType	struct saved_dprintf *		1272121	0					
ANR	1272131	Identifier	next		1272121	1					
ANR	1272132	IfStatement	if ( ! saved_list )		1272121	2					
ANR	1272133	Condition	! saved_list	1509:5:40819:40830	1272121	0	True				
ANR	1272134	UnaryOperationExpression	! saved_list		1272121	0					
ANR	1272135	UnaryOperator	!		1272121	0					
ANR	1272136	Identifier	saved_list		1272121	1					
ANR	1272137	CompoundStatement		5:20:80:80	1272121	1					
ANR	1272138	ReturnStatement	return ;	1510:2:40838:40844	1272121	0	True				
ANR	1272139	ExpressionStatement	node = saved_list	1513:1:40851:40868	1272121	3	True				
ANR	1272140	AssignmentExpression	node = saved_list		1272121	0		=			
ANR	1272141	Identifier	node		1272121	0					
ANR	1272142	Identifier	saved_list		1272121	1					
ANR	1272143	WhileStatement	while ( node )		1272121	4					
ANR	1272144	Condition	node	1514:8:40878:40881	1272121	0	True				
ANR	1272145	Identifier	node		1272121	0					
ANR	1272146	CompoundStatement		10:15:131:131	1272121	1					
ANR	1272147	ExpressionStatement	"dprintf ( node -> level , ""%s"" , node -> line )"	1527:2:41486:41526	1272121	0	True				
ANR	1272148	CallExpression	"dprintf ( node -> level , ""%s"" , node -> line )"		1272121	0					
ANR	1272149	Callee	dprintf		1272121	0					
ANR	1272150	Identifier	dprintf		1272121	0					
ANR	1272151	ArgumentList	node -> level		1272121	1					
ANR	1272152	Argument	node -> level		1272121	0					
ANR	1272153	PtrMemberAccess	node -> level		1272121	0					
ANR	1272154	Identifier	node		1272121	0					
ANR	1272155	Identifier	level		1272121	1					
ANR	1272156	Argument	"""%s"""		1272121	1					
ANR	1272157	PrimaryExpression	"""%s"""		1272121	0					
ANR	1272158	Argument	node -> line		1272121	2					
ANR	1272159	PtrMemberAccess	node -> line		1272121	0					
ANR	1272160	Identifier	node		1272121	0					
ANR	1272161	Identifier	line		1272121	1					
ANR	1272162	ExpressionStatement	next = node -> next	1530:2:41580:41597	1272121	1	True				
ANR	1272163	AssignmentExpression	next = node -> next		1272121	0		=			
ANR	1272164	Identifier	next		1272121	0					
ANR	1272165	PtrMemberAccess	node -> next		1272121	1					
ANR	1272166	Identifier	node		1272121	0					
ANR	1272167	Identifier	next		1272121	1					
ANR	1272168	ExpressionStatement	free ( node -> line )	1533:2:41644:41662	1272121	2	True				
ANR	1272169	CallExpression	free ( node -> line )		1272121	0					
ANR	1272170	Callee	free		1272121	0					
ANR	1272171	Identifier	free		1272121	0					
ANR	1272172	ArgumentList	node -> line		1272121	1					
ANR	1272173	Argument	node -> line		1272121	0					
ANR	1272174	PtrMemberAccess	node -> line		1272121	0					
ANR	1272175	Identifier	node		1272121	0					
ANR	1272176	Identifier	line		1272121	1					
ANR	1272177	ExpressionStatement	free ( node )	1534:2:41666:41678	1272121	3	True				
ANR	1272178	CallExpression	free ( node )		1272121	0					
ANR	1272179	Callee	free		1272121	0					
ANR	1272180	Identifier	free		1272121	0					
ANR	1272181	ArgumentList	node		1272121	1					
ANR	1272182	Argument	node		1272121	0					
ANR	1272183	Identifier	node		1272121	0					
ANR	1272184	ExpressionStatement	node = next	1536:2:41683:41694	1272121	4	True				
ANR	1272185	AssignmentExpression	node = next		1272121	0		=			
ANR	1272186	Identifier	node		1272121	0					
ANR	1272187	Identifier	next		1272121	1					
ANR	1272188	ExpressionStatement	saved_list = NULL	1541:1:41806:41823	1272121	5	True				
ANR	1272189	AssignmentExpression	saved_list = NULL		1272121	0		=			
ANR	1272190	Identifier	saved_list		1272121	0					
ANR	1272191	Identifier	NULL		1272121	1					
ANR	1272192	ReturnType	void		1272121	1					
ANR	1272193	Identifier	_condor_dprintf_saved_lines		1272121	2					
ANR	1272194	ParameterList			1272121	3					
ANR	1272195	CFGEntryNode	ENTRY		1272121		True				
ANR	1272196	CFGExitNode	EXIT		1272121		True				
ANR	1272197	Symbol	next		1272121						
ANR	1272198	Symbol	node		1272121						
ANR	1272199	Symbol	NULL		1272121						
ANR	1272200	Symbol	node -> level		1272121						
ANR	1272201	Symbol	* node		1272121						
ANR	1272202	Symbol	saved_list		1272121						
ANR	1272203	Symbol	node -> line		1272121						
ANR	1272204	Symbol	node -> next		1272121						
ANR	1272205	Function	lock_or_mutex_file	1545:0:41841:44708							
ANR	1272206	FunctionDef	"lock_or_mutex_file (int fd , LOCK_TYPE type , int do_block)"		1272205	0					
ANR	1272207	CompoundStatement		1547:0:41910:44708	1272205	0					
ANR	1272208	IdentifierDeclStatement	int result = - 1 ;	1548:1:41913:41928	1272205	0	True				
ANR	1272209	IdentifierDecl	result = - 1		1272205	0					
ANR	1272210	IdentifierDeclType	int		1272205	0					
ANR	1272211	Identifier	result		1272205	1					
ANR	1272212	AssignmentExpression	result = - 1		1272205	2		=			
ANR	1272213	Identifier	result		1272205	0					
ANR	1272214	UnaryOperationExpression	- 1		1272205	1					
ANR	1272215	UnaryOperator	-		1272205	0					
ANR	1272216	PrimaryExpression	1		1272205	1					
ANR	1272217	IdentifierDeclStatement	char * filename = NULL ;	1549:1:41931:41953	1272205	1	True				
ANR	1272218	IdentifierDecl	* filename = NULL		1272205	0					
ANR	1272219	IdentifierDeclType	char *		1272205	0					
ANR	1272220	Identifier	filename		1272205	1					
ANR	1272221	AssignmentExpression	* filename = NULL		1272205	2		=			
ANR	1272222	Identifier	NULL		1272205	0					
ANR	1272223	Identifier	NULL		1272205	1					
ANR	1272224	IdentifierDeclStatement	int filename_len ;	1550:1:41956:41972	1272205	2	True				
ANR	1272225	IdentifierDecl	filename_len		1272205	0					
ANR	1272226	IdentifierDeclType	int		1272205	0					
ANR	1272227	Identifier	filename_len		1272205	1					
ANR	1272228	IdentifierDeclStatement	char * ptr = NULL ;	1551:1:41975:41991	1272205	3	True				
ANR	1272229	IdentifierDecl	* ptr = NULL		1272205	0					
ANR	1272230	IdentifierDeclType	char *		1272205	0					
ANR	1272231	Identifier	ptr		1272205	1					
ANR	1272232	AssignmentExpression	* ptr = NULL		1272205	2		=			
ANR	1272233	Identifier	NULL		1272205	0					
ANR	1272234	Identifier	NULL		1272205	1					
ANR	1272235	IdentifierDeclStatement	char mutex_name [ MAX_PATH ] ;	1552:1:41994:42019	1272205	4	True				
ANR	1272236	IdentifierDecl	mutex_name [ MAX_PATH ]		1272205	0					
ANR	1272237	IdentifierDeclType	char [ MAX_PATH ]		1272205	0					
ANR	1272238	Identifier	mutex_name		1272205	1					
ANR	1272239	Identifier	MAX_PATH		1272205	2					
ANR	1272240	IfStatement	"if ( strcasecmp ( DebugLock , ""NUL"" ) == 0 )"		1272205	5					
ANR	1272241	Condition	"strcasecmp ( DebugLock , ""NUL"" ) == 0"	1555:5:42087:42119	1272205	0	True				
ANR	1272242	EqualityExpression	"strcasecmp ( DebugLock , ""NUL"" ) == 0"		1272205	0		==			
ANR	1272243	CallExpression	"strcasecmp ( DebugLock , ""NUL"" )"		1272205	0					
ANR	1272244	Callee	strcasecmp		1272205	0					
ANR	1272245	Identifier	strcasecmp		1272205	0					
ANR	1272246	ArgumentList	DebugLock		1272205	1					
ANR	1272247	Argument	DebugLock		1272205	0					
ANR	1272248	Identifier	DebugLock		1272205	0					
ANR	1272249	Argument	"""NUL"""		1272205	1					
ANR	1272250	PrimaryExpression	"""NUL"""		1272205	0					
ANR	1272251	PrimaryExpression	0		1272205	1					
ANR	1272252	CompoundStatement		9:40:211:211	1272205	1					
ANR	1272253	ReturnStatement	return 0 ;	1556:2:42126:42134	1272205	0	True				
ANR	1272254	PrimaryExpression	0		1272205	0					
ANR	1272255	IfStatement	if ( use_kernel_mutex == FALSE )		1272205	6					
ANR	1272256	Condition	use_kernel_mutex == FALSE	1559:6:42146:42170	1272205	0	True				
ANR	1272257	EqualityExpression	use_kernel_mutex == FALSE		1272205	0		==			
ANR	1272258	Identifier	use_kernel_mutex		1272205	0					
ANR	1272259	Identifier	FALSE		1272205	1					
ANR	1272260	CompoundStatement		13:34:263:263	1272205	1					
ANR	1272261	ReturnStatement	"return lock_file_plain ( fd , type , do_block ) ;"	1561:2:42206:42246	1272205	0	True				
ANR	1272262	CallExpression	"lock_file_plain ( fd , type , do_block )"		1272205	0					
ANR	1272263	Callee	lock_file_plain		1272205	0					
ANR	1272264	Identifier	lock_file_plain		1272205	0					
ANR	1272265	ArgumentList	fd		1272205	1					
ANR	1272266	Argument	fd		1272205	0					
ANR	1272267	Identifier	fd		1272205	0					
ANR	1272268	Argument	type		1272205	1					
ANR	1272269	Identifier	type		1272205	0					
ANR	1272270	Argument	do_block		1272205	2					
ANR	1272271	Identifier	do_block		1272205	0					
ANR	1272272	IfStatement	if ( debug_win32_mutex == NULL && DebugLock )		1272205	7					
ANR	1272273	Condition	debug_win32_mutex == NULL && DebugLock	1574:6:42687:42724	1272205	0	True				
ANR	1272274	AndExpression	debug_win32_mutex == NULL && DebugLock		1272205	0		&&			
ANR	1272275	EqualityExpression	debug_win32_mutex == NULL		1272205	0		==			
ANR	1272276	Identifier	debug_win32_mutex		1272205	0					
ANR	1272277	Identifier	NULL		1272205	1					
ANR	1272278	Identifier	DebugLock		1272205	1					
ANR	1272279	CompoundStatement		31:2:916:951	1272205	1					
ANR	1272280	IdentifierDeclStatement	char * filename = strdup ( DebugLock ) ;	1577:2:42827:42862	1272205	0	True				
ANR	1272281	IdentifierDecl	* filename = strdup ( DebugLock )		1272205	0					
ANR	1272282	IdentifierDeclType	char *		1272205	0					
ANR	1272283	Identifier	filename		1272205	1					
ANR	1272284	AssignmentExpression	* filename = strdup ( DebugLock )		1272205	2		=			
ANR	1272285	Identifier	filename		1272205	0					
ANR	1272286	CallExpression	strdup ( DebugLock )		1272205	1					
ANR	1272287	Callee	strdup		1272205	0					
ANR	1272288	Identifier	strdup		1272205	0					
ANR	1272289	ArgumentList	DebugLock		1272205	1					
ANR	1272290	Argument	DebugLock		1272205	0					
ANR	1272291	Identifier	DebugLock		1272205	0					
ANR	1272292	ExpressionStatement	filename_len = strlen ( filename )	1578:2:42866:42897	1272205	1	True				
ANR	1272293	AssignmentExpression	filename_len = strlen ( filename )		1272205	0		=			
ANR	1272294	Identifier	filename_len		1272205	0					
ANR	1272295	CallExpression	strlen ( filename )		1272205	1					
ANR	1272296	Callee	strlen		1272205	0					
ANR	1272297	Identifier	strlen		1272205	0					
ANR	1272298	ArgumentList	filename		1272205	1					
ANR	1272299	Argument	filename		1272205	0					
ANR	1272300	Identifier	filename		1272205	0					
ANR	1272301	ExpressionStatement	"ptr = strchr ( filename , '\\\\' )"	1581:2:42989:43016	1272205	2	True				
ANR	1272302	AssignmentExpression	"ptr = strchr ( filename , '\\\\' )"		1272205	0		=			
ANR	1272303	Identifier	ptr		1272205	0					
ANR	1272304	CallExpression	"strchr ( filename , '\\\\' )"		1272205	1					
ANR	1272305	Callee	strchr		1272205	0					
ANR	1272306	Identifier	strchr		1272205	0					
ANR	1272307	ArgumentList	filename		1272205	1					
ANR	1272308	Argument	filename		1272205	0					
ANR	1272309	Identifier	filename		1272205	0					
ANR	1272310	Argument	'\\\\'		1272205	1					
ANR	1272311	PrimaryExpression	'\\\\'		1272205	0					
ANR	1272312	WhileStatement	while ( ptr )		1272205	3					
ANR	1272313	Condition	ptr	1582:10:43028:43030	1272205	0	True				
ANR	1272314	Identifier	ptr		1272205	0					
ANR	1272315	CompoundStatement		36:16:1123:1123	1272205	1					
ANR	1272316	ExpressionStatement	* ptr = '/'	1583:3:43039:43049	1272205	0	True				
ANR	1272317	AssignmentExpression	* ptr = '/'		1272205	0		=			
ANR	1272318	UnaryOperationExpression	* ptr		1272205	0					
ANR	1272319	UnaryOperator	*		1272205	0					
ANR	1272320	Identifier	ptr		1272205	1					
ANR	1272321	PrimaryExpression	'/'		1272205	1					
ANR	1272322	ExpressionStatement	"ptr = strchr ( filename , '\\\\' )"	1584:3:43054:43081	1272205	1	True				
ANR	1272323	AssignmentExpression	"ptr = strchr ( filename , '\\\\' )"		1272205	0		=			
ANR	1272324	Identifier	ptr		1272205	0					
ANR	1272325	CallExpression	"strchr ( filename , '\\\\' )"		1272205	1					
ANR	1272326	Callee	strchr		1272205	0					
ANR	1272327	Identifier	strchr		1272205	0					
ANR	1272328	ArgumentList	filename		1272205	1					
ANR	1272329	Argument	filename		1272205	0					
ANR	1272330	Identifier	filename		1272205	0					
ANR	1272331	Argument	'\\\\'		1272205	1					
ANR	1272332	PrimaryExpression	'\\\\'		1272205	0					
ANR	1272333	ExpressionStatement	strlwr ( filename )	1588:2:43204:43220	1272205	4	True				
ANR	1272334	CallExpression	strlwr ( filename )		1272205	0					
ANR	1272335	Callee	strlwr		1272205	0					
ANR	1272336	Identifier	strlwr		1272205	0					
ANR	1272337	ArgumentList	filename		1272205	1					
ANR	1272338	Argument	filename		1272205	0					
ANR	1272339	Identifier	filename		1272205	0					
ANR	1272340	ExpressionStatement	"snprintf ( mutex_name , MAX_PATH , ""Global\\\\%s"" , filename )"	1591:2:43340:43391	1272205	5	True				
ANR	1272341	CallExpression	"snprintf ( mutex_name , MAX_PATH , ""Global\\\\%s"" , filename )"		1272205	0					
ANR	1272342	Callee	snprintf		1272205	0					
ANR	1272343	Identifier	snprintf		1272205	0					
ANR	1272344	ArgumentList	mutex_name		1272205	1					
ANR	1272345	Argument	mutex_name		1272205	0					
ANR	1272346	Identifier	mutex_name		1272205	0					
ANR	1272347	Argument	MAX_PATH		1272205	1					
ANR	1272348	Identifier	MAX_PATH		1272205	0					
ANR	1272349	Argument	"""Global\\\\%s"""		1272205	2					
ANR	1272350	PrimaryExpression	"""Global\\\\%s"""		1272205	0					
ANR	1272351	Argument	filename		1272205	3					
ANR	1272352	Identifier	filename		1272205	0					
ANR	1272353	ExpressionStatement	free ( filename )	1592:2:43395:43409	1272205	6	True				
ANR	1272354	CallExpression	free ( filename )		1272205	0					
ANR	1272355	Callee	free		1272205	0					
ANR	1272356	Identifier	free		1272205	0					
ANR	1272357	ArgumentList	filename		1272205	1					
ANR	1272358	Argument	filename		1272205	0					
ANR	1272359	Identifier	filename		1272205	0					
ANR	1272360	ExpressionStatement	filename = NULL	1593:2:43413:43428	1272205	7	True				
ANR	1272361	AssignmentExpression	filename = NULL		1272205	0		=			
ANR	1272362	Identifier	filename		1272205	0					
ANR	1272363	Identifier	NULL		1272205	1					
ANR	1272364	ExpressionStatement	"debug_win32_mutex = CreateMutex ( 0 , FALSE , mutex_name )"	1604:2:44043:44094	1272205	8	True				
ANR	1272365	AssignmentExpression	"debug_win32_mutex = CreateMutex ( 0 , FALSE , mutex_name )"		1272205	0		=			
ANR	1272366	Identifier	debug_win32_mutex		1272205	0					
ANR	1272367	CallExpression	"CreateMutex ( 0 , FALSE , mutex_name )"		1272205	1					
ANR	1272368	Callee	CreateMutex		1272205	0					
ANR	1272369	Identifier	CreateMutex		1272205	0					
ANR	1272370	ArgumentList	0		1272205	1					
ANR	1272371	Argument	0		1272205	0					
ANR	1272372	PrimaryExpression	0		1272205	0					
ANR	1272373	Argument	FALSE		1272205	1					
ANR	1272374	Identifier	FALSE		1272205	0					
ANR	1272375	Argument	mutex_name		1272205	2					
ANR	1272376	Identifier	mutex_name		1272205	0					
ANR	1272377	IfStatement	if ( debug_win32_mutex )		1272205	8					
ANR	1272378	Condition	debug_win32_mutex	1608:6:44166:44182	1272205	0	True				
ANR	1272379	Identifier	debug_win32_mutex		1272205	0					
ANR	1272380	CompoundStatement		62:26:2275:2275	1272205	1					
ANR	1272381	IfStatement	if ( type == UN_LOCK )		1272205	0					
ANR	1272382	Condition	type == UN_LOCK	1609:7:44195:44209	1272205	0	True				
ANR	1272383	EqualityExpression	type == UN_LOCK		1272205	0		==			
ANR	1272384	Identifier	type		1272205	0					
ANR	1272385	Identifier	UN_LOCK		1272205	1					
ANR	1272386	CompoundStatement		63:25:2302:2302	1272205	1					
ANR	1272387	ExpressionStatement	ReleaseMutex ( debug_win32_mutex )	1611:3:44239:44270	1272205	0	True				
ANR	1272388	CallExpression	ReleaseMutex ( debug_win32_mutex )		1272205	0					
ANR	1272389	Callee	ReleaseMutex		1272205	0					
ANR	1272390	Identifier	ReleaseMutex		1272205	0					
ANR	1272391	ArgumentList	debug_win32_mutex		1272205	1					
ANR	1272392	Argument	debug_win32_mutex		1272205	0					
ANR	1272393	Identifier	debug_win32_mutex		1272205	0					
ANR	1272394	ExpressionStatement	result = 0	1612:3:44275:44285	1272205	1	True				
ANR	1272395	AssignmentExpression	result = 0		1272205	0		=			
ANR	1272396	Identifier	result		1272205	0					
ANR	1272397	PrimaryExpression	0		1272205	1					
ANR	1272398	ElseStatement	else		1272205	0					
ANR	1272399	CompoundStatement		67:9:2404:2404	1272205	0					
ANR	1272400	ExpressionStatement	"result = WaitForSingleObject ( debug_win32_mutex , do_block ? INFINITE : 10 * 1000 )"	1616:3:44400:44485	1272205	0	True				
ANR	1272401	AssignmentExpression	"result = WaitForSingleObject ( debug_win32_mutex , do_block ? INFINITE : 10 * 1000 )"		1272205	0		=			
ANR	1272402	Identifier	result		1272205	0					
ANR	1272403	CallExpression	"WaitForSingleObject ( debug_win32_mutex , do_block ? INFINITE : 10 * 1000 )"		1272205	1					
ANR	1272404	Callee	WaitForSingleObject		1272205	0					
ANR	1272405	Identifier	WaitForSingleObject		1272205	0					
ANR	1272406	ArgumentList	debug_win32_mutex		1272205	1					
ANR	1272407	Argument	debug_win32_mutex		1272205	0					
ANR	1272408	Identifier	debug_win32_mutex		1272205	0					
ANR	1272409	Argument	do_block ? INFINITE : 10 * 1000		1272205	1					
ANR	1272410	ConditionalExpression	do_block ? INFINITE : 10 * 1000		1272205	0					
ANR	1272411	Condition	do_block		1272205	0					
ANR	1272412	Identifier	do_block		1272205	0					
ANR	1272413	Identifier	INFINITE		1272205	1					
ANR	1272414	MultiplicativeExpression	10 * 1000		1272205	2		*			
ANR	1272415	PrimaryExpression	10		1272205	0					
ANR	1272416	PrimaryExpression	1000		1272205	1					
ANR	1272417	IfStatement	if ( result == WAIT_OBJECT_0 || result == WAIT_ABANDONED )		1272205	1					
ANR	1272418	Condition	result == WAIT_OBJECT_0 || result == WAIT_ABANDONED	1619:8:44581:44627	1272205	0	True				
ANR	1272419	OrExpression	result == WAIT_OBJECT_0 || result == WAIT_ABANDONED		1272205	0		||			
ANR	1272420	EqualityExpression	result == WAIT_OBJECT_0		1272205	0		==			
ANR	1272421	Identifier	result		1272205	0					
ANR	1272422	Identifier	WAIT_OBJECT_0		1272205	1					
ANR	1272423	EqualityExpression	result == WAIT_ABANDONED		1272205	1		==			
ANR	1272424	Identifier	result		1272205	0					
ANR	1272425	Identifier	WAIT_ABANDONED		1272205	1					
ANR	1272426	CompoundStatement		73:58:2720:2720	1272205	1					
ANR	1272427	ExpressionStatement	result = 0	1620:4:44637:44647	1272205	0	True				
ANR	1272428	AssignmentExpression	result = 0		1272205	0		=			
ANR	1272429	Identifier	result		1272205	0					
ANR	1272430	PrimaryExpression	0		1272205	1					
ANR	1272431	ElseStatement	else		1272205	0					
ANR	1272432	CompoundStatement		75:10:2748:2748	1272205	0					
ANR	1272433	ExpressionStatement	result = - 1	1622:4:44665:44676	1272205	0	True				
ANR	1272434	AssignmentExpression	result = - 1		1272205	0		=			
ANR	1272435	Identifier	result		1272205	0					
ANR	1272436	UnaryOperationExpression	- 1		1272205	1					
ANR	1272437	UnaryOperator	-		1272205	0					
ANR	1272438	PrimaryExpression	1		1272205	1					
ANR	1272439	ReturnStatement	return result ;	1628:1:44693:44706	1272205	9	True				
ANR	1272440	Identifier	result		1272205	0					
ANR	1272441	ReturnType	static int		1272205	1					
ANR	1272442	Identifier	lock_or_mutex_file		1272205	2					
ANR	1272443	ParameterList	"int fd , LOCK_TYPE type , int do_block"		1272205	3					
ANR	1272444	Parameter	int fd	1546:19:41872:41877	1272205	0	True				
ANR	1272445	ParameterType	int		1272205	0					
ANR	1272446	Identifier	fd		1272205	1					
ANR	1272447	Parameter	LOCK_TYPE type	1546:27:41880:41893	1272205	1	True				
ANR	1272448	ParameterType	LOCK_TYPE		1272205	0					
ANR	1272449	Identifier	type		1272205	1					
ANR	1272450	Parameter	int do_block	1546:43:41896:41907	1272205	2	True				
ANR	1272451	ParameterType	int		1272205	0					
ANR	1272452	Identifier	do_block		1272205	1					
ANR	1272453	CFGEntryNode	ENTRY		1272205		True				
ANR	1272454	CFGExitNode	EXIT		1272205		True				
ANR	1272455	Symbol	CreateMutex		1272205						
ANR	1272456	Symbol	use_kernel_mutex		1272205						
ANR	1272457	Symbol	strchr		1272205						
ANR	1272458	Symbol	type		1272205						
ANR	1272459	Symbol	result		1272205						
ANR	1272460	Symbol	WaitForSingleObject		1272205						
ANR	1272461	Symbol	strlen		1272205						
ANR	1272462	Symbol	WAIT_ABANDONED		1272205						
ANR	1272463	Symbol	mutex_name		1272205						
ANR	1272464	Symbol	filename_len		1272205						
ANR	1272465	Symbol	* ptr		1272205						
ANR	1272466	Symbol	WAIT_OBJECT_0		1272205						
ANR	1272467	Symbol	strcasecmp		1272205						
ANR	1272468	Symbol	NULL		1272205						
ANR	1272469	Symbol	DebugLock		1272205						
ANR	1272470	Symbol	do_block		1272205						
ANR	1272471	Symbol	debug_win32_mutex		1272205						
ANR	1272472	Symbol	INFINITE		1272205						
ANR	1272473	Symbol	ptr		1272205						
ANR	1272474	Symbol	filename		1272205						
ANR	1272475	Symbol	FALSE		1272205						
ANR	1272476	Symbol	MAX_PATH		1272205						
ANR	1272477	Symbol	strdup		1272205						
ANR	1272478	Symbol	UN_LOCK		1272205						
ANR	1272479	Symbol	lock_file_plain		1272205						
ANR	1272480	Symbol	fd		1272205						
ANR	1272481	DeclStmt									
ANR	1272482	Decl							int	int	ParentLockFd
ANR	1272483	Function	dprintf_before_shared_mem_clone	1635:0:44776:44841							
ANR	1272484	FunctionDef	dprintf_before_shared_mem_clone ()		1272483	0					
ANR	1272485	CompoundStatement		1636:34:44815:44841	1272483	0					
ANR	1272486	ExpressionStatement	ParentLockFd = LockFd	1637:1:44818:44839	1272483	0	True				
ANR	1272487	AssignmentExpression	ParentLockFd = LockFd		1272483	0		=			
ANR	1272488	Identifier	ParentLockFd		1272483	0					
ANR	1272489	Identifier	LockFd		1272483	1					
ANR	1272490	ReturnType	void		1272483	1					
ANR	1272491	Identifier	dprintf_before_shared_mem_clone		1272483	2					
ANR	1272492	ParameterList			1272483	3					
ANR	1272493	CFGEntryNode	ENTRY		1272483		True				
ANR	1272494	CFGExitNode	EXIT		1272483		True				
ANR	1272495	Symbol	LockFd		1272483						
ANR	1272496	Symbol	ParentLockFd		1272483						
ANR	1272497	Function	dprintf_after_shared_mem_clone	1640:0:44844:44908							
ANR	1272498	FunctionDef	dprintf_after_shared_mem_clone ()		1272497	0					
ANR	1272499	CompoundStatement		1641:33:44882:44908	1272497	0					
ANR	1272500	ExpressionStatement	LockFd = ParentLockFd	1642:1:44885:44906	1272497	0	True				
ANR	1272501	AssignmentExpression	LockFd = ParentLockFd		1272497	0		=			
ANR	1272502	Identifier	LockFd		1272497	0					
ANR	1272503	Identifier	ParentLockFd		1272497	1					
ANR	1272504	ReturnType	void		1272497	1					
ANR	1272505	Identifier	dprintf_after_shared_mem_clone		1272497	2					
ANR	1272506	ParameterList			1272497	3					
ANR	1272507	CFGEntryNode	ENTRY		1272497		True				
ANR	1272508	CFGExitNode	EXIT		1272497		True				
ANR	1272509	Symbol	LockFd		1272497						
ANR	1272510	Symbol	ParentLockFd		1272497						
ANR	1272511	Function	dprintf_init_fork_child	1645:0:44911:45003							
ANR	1272512	FunctionDef	dprintf_init_fork_child ()		1272511	0					
ANR	1272513	CompoundStatement		1646:27:44943:45003	1272511	0					
ANR	1272514	IfStatement	if ( LockFd >= 0 )		1272511	0					
ANR	1272515	Condition	LockFd >= 0	1647:5:44950:44960	1272511	0	True				
ANR	1272516	RelationalExpression	LockFd >= 0		1272511	0		>=			
ANR	1272517	Identifier	LockFd		1272511	0					
ANR	1272518	PrimaryExpression	0		1272511	1					
ANR	1272519	CompoundStatement		2:19:20:20	1272511	1					
ANR	1272520	ExpressionStatement	close ( LockFd )	1648:2:44968:44983	1272511	0	True				
ANR	1272521	CallExpression	close ( LockFd )		1272511	0					
ANR	1272522	Callee	close		1272511	0					
ANR	1272523	Identifier	close		1272511	0					
ANR	1272524	ArgumentList	LockFd		1272511	1					
ANR	1272525	Argument	LockFd		1272511	0					
ANR	1272526	Identifier	LockFd		1272511	0					
ANR	1272527	ExpressionStatement	LockFd = - 1	1649:2:44987:44998	1272511	1	True				
ANR	1272528	AssignmentExpression	LockFd = - 1		1272511	0		=			
ANR	1272529	Identifier	LockFd		1272511	0					
ANR	1272530	UnaryOperationExpression	- 1		1272511	1					
ANR	1272531	UnaryOperator	-		1272511	0					
ANR	1272532	PrimaryExpression	1		1272511	1					
ANR	1272533	ReturnType	void		1272511	1					
ANR	1272534	Identifier	dprintf_init_fork_child		1272511	2					
ANR	1272535	ParameterList			1272511	3					
ANR	1272536	CFGEntryNode	ENTRY		1272511		True				
ANR	1272537	CFGExitNode	EXIT		1272511		True				
ANR	1272538	Symbol	LockFd		1272511						
ANR	1272539	Function	dprintf_wrapup_fork_child	1653:0:45006:45260							
ANR	1272540	FunctionDef	dprintf_wrapup_fork_child ()		1272539	0					
ANR	1272541	CompoundStatement		1654:29:45040:45260	1272539	0					
ANR	1272542	IfStatement	if ( LockFd >= 0 )		1272539	0					
ANR	1272543	Condition	LockFd >= 0	1659:5:45207:45217	1272539	0	True				
ANR	1272544	RelationalExpression	LockFd >= 0		1272539	0		>=			
ANR	1272545	Identifier	LockFd		1272539	0					
ANR	1272546	PrimaryExpression	0		1272539	1					
ANR	1272547	CompoundStatement		6:19:180:180	1272539	1					
ANR	1272548	ExpressionStatement	close ( LockFd )	1660:2:45225:45240	1272539	0	True				
ANR	1272549	CallExpression	close ( LockFd )		1272539	0					
ANR	1272550	Callee	close		1272539	0					
ANR	1272551	Identifier	close		1272539	0					
ANR	1272552	ArgumentList	LockFd		1272539	1					
ANR	1272553	Argument	LockFd		1272539	0					
ANR	1272554	Identifier	LockFd		1272539	0					
ANR	1272555	ExpressionStatement	LockFd = - 1	1661:2:45244:45255	1272539	1	True				
ANR	1272556	AssignmentExpression	LockFd = - 1		1272539	0		=			
ANR	1272557	Identifier	LockFd		1272539	0					
ANR	1272558	UnaryOperationExpression	- 1		1272539	1					
ANR	1272559	UnaryOperator	-		1272539	0					
ANR	1272560	PrimaryExpression	1		1272539	1					
ANR	1272561	ReturnType	void		1272539	1					
ANR	1272562	Identifier	dprintf_wrapup_fork_child		1272539	2					
ANR	1272563	ParameterList			1272539	3					
ANR	1272564	CFGEntryNode	ENTRY		1272539		True				
ANR	1272565	CFGExitNode	EXIT		1272539		True				
ANR	1272566	Symbol	LockFd		1272539						
ANR	1272567	Function	safe_async_simple_fwrite_fd	1667:0:45283:46148							
ANR	1272568	FunctionDef	"safe_async_simple_fwrite_fd (int fd , char const * msg , unsigned int * args , unsigned int num_args)"		1272567	0					
ANR	1272569	CompoundStatement		1669:0:45388:46148	1272567	0					
ANR	1272570	IdentifierDeclStatement	unsigned int arg_index ;	1670:1:45391:45413	1272567	0	True				
ANR	1272571	IdentifierDecl	arg_index		1272567	0					
ANR	1272572	IdentifierDeclType	unsigned int		1272567	0					
ANR	1272573	Identifier	arg_index		1272567	1					
ANR	1272574	IdentifierDeclStatement	"unsigned int digit , arg ;"	1671:1:45416:45438	1272567	1	True				
ANR	1272575	IdentifierDecl	digit		1272567	0					
ANR	1272576	IdentifierDeclType	unsigned int		1272567	0					
ANR	1272577	Identifier	digit		1272567	1					
ANR	1272578	IdentifierDecl	arg		1272567	1					
ANR	1272579	IdentifierDeclType	unsigned int		1272567	0					
ANR	1272580	Identifier	arg		1272567	1					
ANR	1272581	IdentifierDeclStatement	char intbuf [ 50 ] ;	1672:1:45441:45456	1272567	2	True				
ANR	1272582	IdentifierDecl	intbuf [ 50 ]		1272567	0					
ANR	1272583	IdentifierDeclType	char [ 50 ]		1272567	0					
ANR	1272584	Identifier	intbuf		1272567	1					
ANR	1272585	PrimaryExpression	50		1272567	2					
ANR	1272586	IdentifierDeclStatement	char * intbuf_pos ;	1673:1:45459:45475	1272567	3	True				
ANR	1272587	IdentifierDecl	* intbuf_pos		1272567	0					
ANR	1272588	IdentifierDeclType	char *		1272567	0					
ANR	1272589	Identifier	intbuf_pos		1272567	1					
ANR	1272590	ForStatement	for ( ; * msg ; msg ++ )		1272567	4					
ANR	1272591	Condition	* msg	1675:6:45484:45487	1272567	0	True				
ANR	1272592	UnaryOperationExpression	* msg		1272567	0					
ANR	1272593	UnaryOperator	*		1272567	0					
ANR	1272594	Identifier	msg		1272567	1					
ANR	1272595	PostIncDecOperationExpression	msg ++	1675:11:45489:45493	1272567	1	True				
ANR	1272596	Identifier	msg		1272567	0					
ANR	1272597	IncDec	++		1272567	1					
ANR	1272598	CompoundStatement		7:18:107:107	1272567	2					
ANR	1272599	IfStatement	if ( * msg != '%' )		1272567	0					
ANR	1272600	Condition	* msg != '%'	1676:6:45504:45514	1272567	0	True				
ANR	1272601	EqualityExpression	* msg != '%'		1272567	0		!=			
ANR	1272602	UnaryOperationExpression	* msg		1272567	0					
ANR	1272603	UnaryOperator	*		1272567	0					
ANR	1272604	Identifier	msg		1272567	1					
ANR	1272605	PrimaryExpression	'%'		1272567	1					
ANR	1272606	CompoundStatement		8:20:129:129	1272567	1					
ANR	1272607	ExpressionStatement	"write ( fd , msg , 1 )"	1677:3:45523:45538	1272567	0	True				
ANR	1272608	CallExpression	"write ( fd , msg , 1 )"		1272567	0					
ANR	1272609	Callee	write		1272567	0					
ANR	1272610	Identifier	write		1272567	0					
ANR	1272611	ArgumentList	fd		1272567	1					
ANR	1272612	Argument	fd		1272567	0					
ANR	1272613	Identifier	fd		1272567	0					
ANR	1272614	Argument	msg		1272567	1					
ANR	1272615	Identifier	msg		1272567	0					
ANR	1272616	Argument	1		1272567	2					
ANR	1272617	PrimaryExpression	1		1272567	0					
ANR	1272618	ElseStatement	else		1272567	0					
ANR	1272619	CompoundStatement		11:7:162:162	1272567	0					
ANR	1272620	ExpressionStatement	arg_index = * ( ++ msg ) - '0'	1681:3:45619:45643	1272567	0	True				
ANR	1272621	AssignmentExpression	arg_index = * ( ++ msg ) - '0'		1272567	0		=			
ANR	1272622	Identifier	arg_index		1272567	0					
ANR	1272623	AdditiveExpression	* ( ++ msg ) - '0'		1272567	1		-			
ANR	1272624	UnaryOperationExpression	* ( ++ msg )		1272567	0					
ANR	1272625	UnaryOperator	*		1272567	0					
ANR	1272626	UnaryExpression	++ msg		1272567	1					
ANR	1272627	IncDec	++		1272567	0					
ANR	1272628	Identifier	msg		1272567	1					
ANR	1272629	PrimaryExpression	'0'		1272567	1					
ANR	1272630	IfStatement	if ( arg_index >= num_args || ! * msg )		1272567	1					
ANR	1272631	Condition	arg_index >= num_args || ! * msg	1682:7:45652:45681	1272567	0	True				
ANR	1272632	OrExpression	arg_index >= num_args || ! * msg		1272567	0		||			
ANR	1272633	RelationalExpression	arg_index >= num_args		1272567	0		>=			
ANR	1272634	Identifier	arg_index		1272567	0					
ANR	1272635	Identifier	num_args		1272567	1					
ANR	1272636	UnaryOperationExpression	! * msg		1272567	1					
ANR	1272637	UnaryOperator	!		1272567	0					
ANR	1272638	UnaryOperationExpression	* msg		1272567	1					
ANR	1272639	UnaryOperator	*		1272567	0					
ANR	1272640	Identifier	msg		1272567	1					
ANR	1272641	CompoundStatement		14:40:296:296	1272567	1					
ANR	1272642	ExpressionStatement	"write ( fd , "" INVALID! "" , 10 )"	1683:4:45691:45716	1272567	0	True				
ANR	1272643	CallExpression	"write ( fd , "" INVALID! "" , 10 )"		1272567	0					
ANR	1272644	Callee	write		1272567	0					
ANR	1272645	Identifier	write		1272567	0					
ANR	1272646	ArgumentList	fd		1272567	1					
ANR	1272647	Argument	fd		1272567	0					
ANR	1272648	Identifier	fd		1272567	0					
ANR	1272649	Argument	""" INVALID! """		1272567	1					
ANR	1272650	PrimaryExpression	""" INVALID! """		1272567	0					
ANR	1272651	Argument	10		1272567	2					
ANR	1272652	PrimaryExpression	10		1272567	0					
ANR	1272653	BreakStatement	break ;	1684:4:45722:45727	1272567	1	True				
ANR	1272654	ExpressionStatement	arg = args [ arg_index ]	1686:3:45737:45758	1272567	2	True				
ANR	1272655	AssignmentExpression	arg = args [ arg_index ]		1272567	0		=			
ANR	1272656	Identifier	arg		1272567	0					
ANR	1272657	ArrayIndexing	args [ arg_index ]		1272567	1					
ANR	1272658	Identifier	args		1272567	0					
ANR	1272659	Identifier	arg_index		1272567	1					
ANR	1272660	ExpressionStatement	intbuf_pos = intbuf	1687:3:45763:45780	1272567	3	True				
ANR	1272661	AssignmentExpression	intbuf_pos = intbuf		1272567	0		=			
ANR	1272662	Identifier	intbuf_pos		1272567	0					
ANR	1272663	Identifier	intbuf		1272567	1					
ANR	1272664	DoStatement	do		1272567	4					
ANR	1272665	CompoundStatement		20:6:399:399	1272567	0					
ANR	1272666	ExpressionStatement	digit = arg % 10	1689:4:45794:45810	1272567	0	True				
ANR	1272667	AssignmentExpression	digit = arg % 10		1272567	0		=			
ANR	1272668	Identifier	digit		1272567	0					
ANR	1272669	MultiplicativeExpression	arg % 10		1272567	1		%			
ANR	1272670	Identifier	arg		1272567	0					
ANR	1272671	PrimaryExpression	10		1272567	1					
ANR	1272672	ExpressionStatement	* ( intbuf_pos ++ ) = digit + '0'	1690:4:45816:45845	1272567	1	True				
ANR	1272673	AssignmentExpression	* ( intbuf_pos ++ ) = digit + '0'		1272567	0		=			
ANR	1272674	UnaryOperationExpression	* ( intbuf_pos ++ )		1272567	0					
ANR	1272675	UnaryOperator	*		1272567	0					
ANR	1272676	PostIncDecOperationExpression	intbuf_pos ++		1272567	1					
ANR	1272677	Identifier	intbuf_pos		1272567	0					
ANR	1272678	IncDec	++		1272567	1					
ANR	1272679	AdditiveExpression	digit + '0'		1272567	1		+			
ANR	1272680	Identifier	digit		1272567	0					
ANR	1272681	PrimaryExpression	'0'		1272567	1					
ANR	1272682	ExpressionStatement	arg /= 10	1691:4:45851:45860	1272567	2	True				
ANR	1272683	AssignmentExpression	arg /= 10		1272567	0		/=			
ANR	1272684	Identifier	arg		1272567	0					
ANR	1272685	PrimaryExpression	10		1272567	1					
ANR	1272686	Condition	arg	1692:12:45924:45926	1272567	1	True				
ANR	1272687	Identifier	arg		1272567	0					
ANR	1272688	WhileStatement	while ( intbuf_pos -- > intbuf )		1272567	5					
ANR	1272689	Condition	intbuf_pos -- > intbuf	1696:10:46082:46102	1272567	0	True				
ANR	1272690	RelationalExpression	intbuf_pos -- > intbuf		1272567	0		>			
ANR	1272691	PostIncDecOperationExpression	intbuf_pos --		1272567	0					
ANR	1272692	Identifier	intbuf_pos		1272567	0					
ANR	1272693	IncDec	--		1272567	1					
ANR	1272694	Identifier	intbuf		1272567	1					
ANR	1272695	CompoundStatement		28:34:717:717	1272567	1					
ANR	1272696	ExpressionStatement	"write ( fd , intbuf_pos , 1 )"	1697:4:46112:46134	1272567	0	True				
ANR	1272697	CallExpression	"write ( fd , intbuf_pos , 1 )"		1272567	0					
ANR	1272698	Callee	write		1272567	0					
ANR	1272699	Identifier	write		1272567	0					
ANR	1272700	ArgumentList	fd		1272567	1					
ANR	1272701	Argument	fd		1272567	0					
ANR	1272702	Identifier	fd		1272567	0					
ANR	1272703	Argument	intbuf_pos		1272567	1					
ANR	1272704	Identifier	intbuf_pos		1272567	0					
ANR	1272705	Argument	1		1272567	2					
ANR	1272706	PrimaryExpression	1		1272567	0					
ANR	1272707	ReturnType	static void		1272567	1					
ANR	1272708	Identifier	safe_async_simple_fwrite_fd		1272567	2					
ANR	1272709	ParameterList	"int fd , char const * msg , unsigned int * args , unsigned int num_args"		1272567	3					
ANR	1272710	Parameter	int fd	1668:28:45323:45328	1272567	0	True				
ANR	1272711	ParameterType	int		1272567	0					
ANR	1272712	Identifier	fd		1272567	1					
ANR	1272713	Parameter	char const * msg	1668:35:45330:45344	1272567	1	True				
ANR	1272714	ParameterType	char const *		1272567	0					
ANR	1272715	Identifier	msg		1272567	1					
ANR	1272716	Parameter	unsigned int * args	1668:51:45346:45363	1272567	2	True				
ANR	1272717	ParameterType	unsigned int *		1272567	0					
ANR	1272718	Identifier	args		1272567	1					
ANR	1272719	Parameter	unsigned int num_args	1668:70:45365:45385	1272567	3	True				
ANR	1272720	ParameterType	unsigned int		1272567	0					
ANR	1272721	Identifier	num_args		1272567	1					
ANR	1272722	CFGEntryNode	ENTRY		1272567		True				
ANR	1272723	CFGExitNode	EXIT		1272567		True				
ANR	1272724	Symbol	msg		1272567						
ANR	1272725	Symbol	arg_index		1272567						
ANR	1272726	Symbol	* ( ++ msg )		1272567						
ANR	1272727	Symbol	* msg		1272567						
ANR	1272728	Symbol	* args		1272567						
ANR	1272729	Symbol	args		1272567						
ANR	1272730	Symbol	* arg_index		1272567						
ANR	1272731	Symbol	num_args		1272567						
ANR	1272732	Symbol	intbuf		1272567						
ANR	1272733	Symbol	arg		1272567						
ANR	1272734	Symbol	* ( intbuf_pos ++ )		1272567						
ANR	1272735	Symbol	intbuf_pos		1272567						
ANR	1272736	Symbol	fd		1272567						
ANR	1272737	Symbol	digit		1272567						
ANR	1272738	Function	dprintf_dump_stack	1703:0:46151:48200							
ANR	1272739	FunctionDef	dprintf_dump_stack ()		1272738	0					
ANR	1272740	CompoundStatement		1704:25:46181:48200	1272738	0					
ANR	1272741	IdentifierDeclStatement	priv_state orig_priv_state ;	1705:1:46184:46210	1272738	0	True				
ANR	1272742	IdentifierDecl	orig_priv_state		1272738	0					
ANR	1272743	IdentifierDeclType	priv_state		1272738	0					
ANR	1272744	Identifier	orig_priv_state		1272738	1					
ANR	1272745	IdentifierDeclStatement	int orig_euid ;	1706:1:46213:46226	1272738	1	True				
ANR	1272746	IdentifierDecl	orig_euid		1272738	0					
ANR	1272747	IdentifierDeclType	int		1272738	0					
ANR	1272748	Identifier	orig_euid		1272738	1					
ANR	1272749	IdentifierDeclStatement	int orig_egid ;	1707:1:46229:46242	1272738	2	True				
ANR	1272750	IdentifierDecl	orig_egid		1272738	0					
ANR	1272751	IdentifierDeclType	int		1272738	0					
ANR	1272752	Identifier	orig_egid		1272738	1					
ANR	1272753	IdentifierDeclStatement	int fd ;	1708:1:46245:46251	1272738	3	True				
ANR	1272754	IdentifierDecl	fd		1272738	0					
ANR	1272755	IdentifierDeclType	int		1272738	0					
ANR	1272756	Identifier	fd		1272738	1					
ANR	1272757	IdentifierDeclStatement	void * trace [ 50 ] ;	1709:1:46254:46269	1272738	4	True				
ANR	1272758	IdentifierDecl	* trace [ 50 ]		1272738	0					
ANR	1272759	IdentifierDeclType	void * [ 50 ]		1272738	0					
ANR	1272760	Identifier	trace		1272738	1					
ANR	1272761	PrimaryExpression	50		1272738	2					
ANR	1272762	IdentifierDeclStatement	int trace_size ;	1710:1:46272:46286	1272738	5	True				
ANR	1272763	IdentifierDecl	trace_size		1272738	0					
ANR	1272764	IdentifierDeclType	int		1272738	0					
ANR	1272765	Identifier	trace_size		1272738	1					
ANR	1272766	IdentifierDeclStatement	unsigned int args [ 3 ] ;	1711:1:46289:46309	1272738	6	True				
ANR	1272767	IdentifierDecl	args [ 3 ]		1272738	0					
ANR	1272768	IdentifierDeclType	unsigned int [ 3 ]		1272738	0					
ANR	1272769	Identifier	args		1272738	1					
ANR	1272770	PrimaryExpression	3		1272738	2					
ANR	1272771	IfStatement	if ( DprintfBroken || ! _condor_dprintf_works || DebugLogs -> empty ( ) )		1272738	7					
ANR	1272772	Condition	DprintfBroken || ! _condor_dprintf_works || DebugLogs -> empty ( )	1718:5:46558:46618	1272738	0	True				
ANR	1272773	OrExpression	DprintfBroken || ! _condor_dprintf_works || DebugLogs -> empty ( )		1272738	0		||			
ANR	1272774	Identifier	DprintfBroken		1272738	0					
ANR	1272775	OrExpression	! _condor_dprintf_works || DebugLogs -> empty ( )		1272738	1		||			
ANR	1272776	UnaryOperationExpression	! _condor_dprintf_works		1272738	0					
ANR	1272777	UnaryOperator	!		1272738	0					
ANR	1272778	Identifier	_condor_dprintf_works		1272738	1					
ANR	1272779	CallExpression	DebugLogs -> empty ( )		1272738	1					
ANR	1272780	Callee	DebugLogs -> empty		1272738	0					
ANR	1272781	PtrMemberAccess	DebugLogs -> empty		1272738	0					
ANR	1272782	Identifier	DebugLogs		1272738	0					
ANR	1272783	Identifier	empty		1272738	1					
ANR	1272784	ArgumentList			1272738	1					
ANR	1272785	CompoundStatement		15:68:439:439	1272738	1					
ANR	1272786	ExpressionStatement	fd = 2	1725:2:46951:46957	1272738	0	True				
ANR	1272787	AssignmentExpression	fd = 2		1272738	0		=			
ANR	1272788	Identifier	fd		1272738	0					
ANR	1272789	PrimaryExpression	2		1272738	1					
ANR	1272790	ElseStatement	else		1272738	0					
ANR	1272791	CompoundStatement		24:6:786:786	1272738	0					
ANR	1272792	ExpressionStatement	orig_euid = geteuid ( )	1731:2:47137:47158	1272738	0	True				
ANR	1272793	AssignmentExpression	orig_euid = geteuid ( )		1272738	0		=			
ANR	1272794	Identifier	orig_euid		1272738	0					
ANR	1272795	CallExpression	geteuid ( )		1272738	1					
ANR	1272796	Callee	geteuid		1272738	0					
ANR	1272797	Identifier	geteuid		1272738	0					
ANR	1272798	ArgumentList			1272738	1					
ANR	1272799	ExpressionStatement	orig_egid = getegid ( )	1732:2:47162:47183	1272738	1	True				
ANR	1272800	AssignmentExpression	orig_egid = getegid ( )		1272738	0		=			
ANR	1272801	Identifier	orig_egid		1272738	0					
ANR	1272802	CallExpression	getegid ( )		1272738	1					
ANR	1272803	Callee	getegid		1272738	0					
ANR	1272804	Identifier	getegid		1272738	0					
ANR	1272805	ArgumentList			1272738	1					
ANR	1272806	ExpressionStatement	orig_priv_state = get_priv_state ( )	1733:2:47187:47221	1272738	2	True				
ANR	1272807	AssignmentExpression	orig_priv_state = get_priv_state ( )		1272738	0		=			
ANR	1272808	Identifier	orig_priv_state		1272738	0					
ANR	1272809	CallExpression	get_priv_state ( )		1272738	1					
ANR	1272810	Callee	get_priv_state		1272738	0					
ANR	1272811	Identifier	get_priv_state		1272738	0					
ANR	1272812	ArgumentList			1272738	1					
ANR	1272813	IfStatement	if ( orig_priv_state != PRIV_CONDOR )		1272738	3					
ANR	1272814	Condition	orig_priv_state != PRIV_CONDOR	1734:6:47229:47258	1272738	0	True				
ANR	1272815	EqualityExpression	orig_priv_state != PRIV_CONDOR		1272738	0		!=			
ANR	1272816	Identifier	orig_priv_state		1272738	0					
ANR	1272817	Identifier	PRIV_CONDOR		1272738	1					
ANR	1272818	CompoundStatement		31:39:1080:1080	1272738	1					
ANR	1272819	ExpressionStatement	setegid ( getgid ( ) )	1739:3:47474:47491	1272738	0	True				
ANR	1272820	CallExpression	setegid ( getgid ( ) )		1272738	0					
ANR	1272821	Callee	setegid		1272738	0					
ANR	1272822	Identifier	setegid		1272738	0					
ANR	1272823	ArgumentList	getgid ( )		1272738	1					
ANR	1272824	Argument	getgid ( )		1272738	0					
ANR	1272825	CallExpression	getgid ( )		1272738	0					
ANR	1272826	Callee	getgid		1272738	0					
ANR	1272827	Identifier	getgid		1272738	0					
ANR	1272828	ArgumentList			1272738	1					
ANR	1272829	ExpressionStatement	seteuid ( getuid ( ) )	1740:3:47496:47513	1272738	1	True				
ANR	1272830	CallExpression	seteuid ( getuid ( ) )		1272738	0					
ANR	1272831	Callee	seteuid		1272738	0					
ANR	1272832	Identifier	seteuid		1272738	0					
ANR	1272833	ArgumentList	getuid ( )		1272738	1					
ANR	1272834	Argument	getuid ( )		1272738	0					
ANR	1272835	CallExpression	getuid ( )		1272738	0					
ANR	1272836	Callee	getuid		1272738	0					
ANR	1272837	Identifier	getuid		1272738	0					
ANR	1272838	ArgumentList			1272738	1					
ANR	1272839	ExpressionStatement	"fd = safe_open_wrapper_follow ( DebugLogs -> begin ( ) -> logPath . c_str ( ) , O_APPEND | O_WRONLY | O_CREAT , 0644 )"	1743:2:47522:47619	1272738	4	True				
ANR	1272840	AssignmentExpression	"fd = safe_open_wrapper_follow ( DebugLogs -> begin ( ) -> logPath . c_str ( ) , O_APPEND | O_WRONLY | O_CREAT , 0644 )"		1272738	0		=			
ANR	1272841	Identifier	fd		1272738	0					
ANR	1272842	CallExpression	"safe_open_wrapper_follow ( DebugLogs -> begin ( ) -> logPath . c_str ( ) , O_APPEND | O_WRONLY | O_CREAT , 0644 )"		1272738	1					
ANR	1272843	Callee	safe_open_wrapper_follow		1272738	0					
ANR	1272844	Identifier	safe_open_wrapper_follow		1272738	0					
ANR	1272845	ArgumentList	DebugLogs -> begin ( ) -> logPath . c_str ( )		1272738	1					
ANR	1272846	Argument	DebugLogs -> begin ( ) -> logPath . c_str ( )		1272738	0					
ANR	1272847	CallExpression	DebugLogs -> begin ( ) -> logPath . c_str ( )		1272738	0					
ANR	1272848	Callee	DebugLogs -> begin ( ) -> logPath . c_str		1272738	0					
ANR	1272849	MemberAccess	DebugLogs -> begin ( ) -> logPath . c_str		1272738	0					
ANR	1272850	PtrMemberAccess	DebugLogs -> begin ( ) -> logPath		1272738	0					
ANR	1272851	CallExpression	DebugLogs -> begin ( )		1272738	0					
ANR	1272852	Callee	DebugLogs -> begin		1272738	0					
ANR	1272853	PtrMemberAccess	DebugLogs -> begin		1272738	0					
ANR	1272854	Identifier	DebugLogs		1272738	0					
ANR	1272855	Identifier	begin		1272738	1					
ANR	1272856	ArgumentList			1272738	1					
ANR	1272857	Identifier	logPath		1272738	1					
ANR	1272858	Identifier	c_str		1272738	1					
ANR	1272859	ArgumentList			1272738	1					
ANR	1272860	Argument	O_APPEND | O_WRONLY | O_CREAT		1272738	1					
ANR	1272861	InclusiveOrExpression	O_APPEND | O_WRONLY | O_CREAT		1272738	0		|			
ANR	1272862	Identifier	O_APPEND		1272738	0					
ANR	1272863	InclusiveOrExpression	O_WRONLY | O_CREAT		1272738	1		|			
ANR	1272864	Identifier	O_WRONLY		1272738	0					
ANR	1272865	Identifier	O_CREAT		1272738	1					
ANR	1272866	Argument	0644		1272738	2					
ANR	1272867	PrimaryExpression	0644		1272738	0					
ANR	1272868	IfStatement	if ( orig_priv_state != PRIV_CONDOR )		1272738	5					
ANR	1272869	Condition	orig_priv_state != PRIV_CONDOR	1745:6:47628:47657	1272738	0	True				
ANR	1272870	EqualityExpression	orig_priv_state != PRIV_CONDOR		1272738	0		!=			
ANR	1272871	Identifier	orig_priv_state		1272738	0					
ANR	1272872	Identifier	PRIV_CONDOR		1272738	1					
ANR	1272873	CompoundStatement		42:39:1479:1479	1272738	1					
ANR	1272874	ExpressionStatement	setegid ( orig_egid )	1746:3:47666:47684	1272738	0	True				
ANR	1272875	CallExpression	setegid ( orig_egid )		1272738	0					
ANR	1272876	Callee	setegid		1272738	0					
ANR	1272877	Identifier	setegid		1272738	0					
ANR	1272878	ArgumentList	orig_egid		1272738	1					
ANR	1272879	Argument	orig_egid		1272738	0					
ANR	1272880	Identifier	orig_egid		1272738	0					
ANR	1272881	ExpressionStatement	seteuid ( orig_euid )	1747:3:47689:47707	1272738	1	True				
ANR	1272882	CallExpression	seteuid ( orig_euid )		1272738	0					
ANR	1272883	Callee	seteuid		1272738	0					
ANR	1272884	Identifier	seteuid		1272738	0					
ANR	1272885	ArgumentList	orig_euid		1272738	1					
ANR	1272886	Argument	orig_euid		1272738	0					
ANR	1272887	Identifier	orig_euid		1272738	0					
ANR	1272888	IfStatement	if ( fd == - 1 )		1272738	6					
ANR	1272889	Condition	fd == - 1	1750:6:47720:47725	1272738	0	True				
ANR	1272890	EqualityExpression	fd == - 1		1272738	0		==			
ANR	1272891	Identifier	fd		1272738	0					
ANR	1272892	UnaryOperationExpression	- 1		1272738	1					
ANR	1272893	UnaryOperator	-		1272738	0					
ANR	1272894	PrimaryExpression	1		1272738	1					
ANR	1272895	CompoundStatement		47:15:1547:1547	1272738	1					
ANR	1272896	ExpressionStatement	fd = 2	1751:3:47734:47738	1272738	0	True				
ANR	1272897	AssignmentExpression	fd = 2		1272738	0		=			
ANR	1272898	Identifier	fd		1272738	0					
ANR	1272899	PrimaryExpression	2		1272738	1					
ANR	1272900	ExpressionStatement	"trace_size = backtrace ( trace , 50 )"	1755:1:47749:47781	1272738	8	True				
ANR	1272901	AssignmentExpression	"trace_size = backtrace ( trace , 50 )"		1272738	0		=			
ANR	1272902	Identifier	trace_size		1272738	0					
ANR	1272903	CallExpression	"backtrace ( trace , 50 )"		1272738	1					
ANR	1272904	Callee	backtrace		1272738	0					
ANR	1272905	Identifier	backtrace		1272738	0					
ANR	1272906	ArgumentList	trace		1272738	1					
ANR	1272907	Argument	trace		1272738	0					
ANR	1272908	Identifier	trace		1272738	0					
ANR	1272909	Argument	50		1272738	1					
ANR	1272910	PrimaryExpression	50		1272738	0					
ANR	1272911	ExpressionStatement	args [ 0 ] = ( unsigned int ) getpid ( )	1759:1:47917:47949	1272738	9	True				
ANR	1272912	AssignmentExpression	args [ 0 ] = ( unsigned int ) getpid ( )		1272738	0		=			
ANR	1272913	ArrayIndexing	args [ 0 ]		1272738	0					
ANR	1272914	Identifier	args		1272738	0					
ANR	1272915	PrimaryExpression	0		1272738	1					
ANR	1272916	CastExpression	( unsigned int ) getpid ( )		1272738	1					
ANR	1272917	CastTarget	unsigned int		1272738	0					
ANR	1272918	CallExpression	getpid ( )		1272738	1					
ANR	1272919	Callee	getpid		1272738	0					
ANR	1272920	Identifier	getpid		1272738	0					
ANR	1272921	ArgumentList			1272738	1					
ANR	1272922	ExpressionStatement	args [ 1 ] = ( unsigned int ) time ( NULL )	1760:1:47952:47986	1272738	10	True				
ANR	1272923	AssignmentExpression	args [ 1 ] = ( unsigned int ) time ( NULL )		1272738	0		=			
ANR	1272924	ArrayIndexing	args [ 1 ]		1272738	0					
ANR	1272925	Identifier	args		1272738	0					
ANR	1272926	PrimaryExpression	1		1272738	1					
ANR	1272927	CastExpression	( unsigned int ) time ( NULL )		1272738	1					
ANR	1272928	CastTarget	unsigned int		1272738	0					
ANR	1272929	CallExpression	time ( NULL )		1272738	1					
ANR	1272930	Callee	time		1272738	0					
ANR	1272931	Identifier	time		1272738	0					
ANR	1272932	ArgumentList	NULL		1272738	1					
ANR	1272933	Argument	NULL		1272738	0					
ANR	1272934	Identifier	NULL		1272738	0					
ANR	1272935	ExpressionStatement	args [ 2 ] = ( unsigned int ) trace_size	1761:1:47989:48023	1272738	11	True				
ANR	1272936	AssignmentExpression	args [ 2 ] = ( unsigned int ) trace_size		1272738	0		=			
ANR	1272937	ArrayIndexing	args [ 2 ]		1272738	0					
ANR	1272938	Identifier	args		1272738	0					
ANR	1272939	PrimaryExpression	2		1272738	1					
ANR	1272940	CastExpression	( unsigned int ) trace_size		1272738	1					
ANR	1272941	CastTarget	unsigned int		1272738	0					
ANR	1272942	Identifier	trace_size		1272738	1					
ANR	1272943	ExpressionStatement	"safe_async_simple_fwrite_fd ( fd , ""Stack dump for process %0 at timestamp %1 (%2 frames)\\n"" , args , 3 )"	1762:1:48026:48122	1272738	12	True				
ANR	1272944	CallExpression	"safe_async_simple_fwrite_fd ( fd , ""Stack dump for process %0 at timestamp %1 (%2 frames)\\n"" , args , 3 )"		1272738	0					
ANR	1272945	Callee	safe_async_simple_fwrite_fd		1272738	0					
ANR	1272946	Identifier	safe_async_simple_fwrite_fd		1272738	0					
ANR	1272947	ArgumentList	fd		1272738	1					
ANR	1272948	Argument	fd		1272738	0					
ANR	1272949	Identifier	fd		1272738	0					
ANR	1272950	Argument	"""Stack dump for process %0 at timestamp %1 (%2 frames)\\n"""		1272738	1					
ANR	1272951	PrimaryExpression	"""Stack dump for process %0 at timestamp %1 (%2 frames)\\n"""		1272738	0					
ANR	1272952	Argument	args		1272738	2					
ANR	1272953	Identifier	args		1272738	0					
ANR	1272954	Argument	3		1272738	3					
ANR	1272955	PrimaryExpression	3		1272738	0					
ANR	1272956	ExpressionStatement	"backtrace_symbols_fd ( trace , trace_size , fd )"	1764:1:48126:48167	1272738	13	True				
ANR	1272957	CallExpression	"backtrace_symbols_fd ( trace , trace_size , fd )"		1272738	0					
ANR	1272958	Callee	backtrace_symbols_fd		1272738	0					
ANR	1272959	Identifier	backtrace_symbols_fd		1272738	0					
ANR	1272960	ArgumentList	trace		1272738	1					
ANR	1272961	Argument	trace		1272738	0					
ANR	1272962	Identifier	trace		1272738	0					
ANR	1272963	Argument	trace_size		1272738	1					
ANR	1272964	Identifier	trace_size		1272738	0					
ANR	1272965	Argument	fd		1272738	2					
ANR	1272966	Identifier	fd		1272738	0					
ANR	1272967	IfStatement	if ( fd != 2 )		1272738	14					
ANR	1272968	Condition	fd != 2	1766:5:48175:48179	1272738	0	True				
ANR	1272969	EqualityExpression	fd != 2		1272738	0		!=			
ANR	1272970	Identifier	fd		1272738	0					
ANR	1272971	PrimaryExpression	2		1272738	1					
ANR	1272972	CompoundStatement		63:12:2000:2000	1272738	1					
ANR	1272973	ExpressionStatement	close ( fd )	1767:2:48186:48195	1272738	0	True				
ANR	1272974	CallExpression	close ( fd )		1272738	0					
ANR	1272975	Callee	close		1272738	0					
ANR	1272976	Identifier	close		1272738	0					
ANR	1272977	ArgumentList	fd		1272738	1					
ANR	1272978	Argument	fd		1272738	0					
ANR	1272979	Identifier	fd		1272738	0					
ANR	1272980	ReturnType	void		1272738	1					
ANR	1272981	Identifier	dprintf_dump_stack		1272738	2					
ANR	1272982	ParameterList			1272738	3					
ANR	1272983	CFGEntryNode	ENTRY		1272738		True				
ANR	1272984	CFGExitNode	EXIT		1272738		True				
ANR	1272985	Symbol	safe_open_wrapper_follow		1272738						
ANR	1272986	Symbol	orig_euid		1272738						
ANR	1272987	Symbol	backtrace		1272738						
ANR	1272988	Symbol	orig_priv_state		1272738						
ANR	1272989	Symbol	O_CREAT		1272738						
ANR	1272990	Symbol	_condor_dprintf_works		1272738						
ANR	1272991	Symbol	DebugLogs -> begin ( ) -> logPath		1272738						
ANR	1272992	Symbol	get_priv_state		1272738						
ANR	1272993	Symbol	* args		1272738						
ANR	1272994	Symbol	DprintfBroken		1272738						
ANR	1272995	Symbol	trace		1272738						
ANR	1272996	Symbol	* * DebugLogs		1272738						
ANR	1272997	Symbol	* DebugLogs		1272738						
ANR	1272998	Symbol	trace_size		1272738						
ANR	1272999	Symbol	getegid		1272738						
ANR	1273000	Symbol	DebugLogs		1272738						
ANR	1273001	Symbol	NULL		1272738						
ANR	1273002	Symbol	getgid		1272738						
ANR	1273003	Symbol	DebugLogs -> empty		1272738						
ANR	1273004	Symbol	geteuid		1272738						
ANR	1273005	Symbol	O_APPEND		1272738						
ANR	1273006	Symbol	args		1272738						
ANR	1273007	Symbol	DebugLogs -> begin ( ) -> logPath . c_str		1272738						
ANR	1273008	Symbol	getuid		1272738						
ANR	1273009	Symbol	* DebugLogs -> begin		1272738						
ANR	1273010	Symbol	orig_egid		1272738						
ANR	1273011	Symbol	DebugLogs -> begin		1272738						
ANR	1273012	Symbol	time		1272738						
ANR	1273013	Symbol	PRIV_CONDOR		1272738						
ANR	1273014	Symbol	O_WRONLY		1272738						
ANR	1273015	Symbol	getpid		1272738						
ANR	1273016	Symbol	fd		1272738						
ANR	1273017	Function	debug_open_fds	1774:0:48218:48529							
ANR	1273018	FunctionDef	"debug_open_fds (std :: map < int , bool > & open_fds)"		1273017	0					
ANR	1273019	CompoundStatement		1775:0:48268:48529	1273017	0					
ANR	1273020	IdentifierDeclStatement	bool found = false ;	1776:1:48271:48289	1273017	0	True				
ANR	1273021	IdentifierDecl	found = false		1273017	0					
ANR	1273022	IdentifierDeclType	bool		1273017	0					
ANR	1273023	Identifier	found		1273017	1					
ANR	1273024	AssignmentExpression	found = false		1273017	2		=			
ANR	1273025	Identifier	false		1273017	0					
ANR	1273026	Identifier	false		1273017	1					
ANR	1273027	IdentifierDeclStatement	std :: vector < DebugFileInfo > :: iterator it ;	1777:1:48292:48331	1273017	1	True				
ANR	1273028	IdentifierDecl	it		1273017	0					
ANR	1273029	IdentifierDeclType	std :: vector < DebugFileInfo > :: iterator		1273017	0					
ANR	1273030	Identifier	it		1273017	1					
ANR	1273031	ForStatement	for ( it = DebugLogs -> begin ( ) ; it < DebugLogs -> end ( ) ; it ++ )		1273017	2					
ANR	1273032	ForInit	it = DebugLogs -> begin ( ) ;	1779:5:48339:48362	1273017	0	True				
ANR	1273033	AssignmentExpression	it = DebugLogs -> begin ( )		1273017	0		=			
ANR	1273034	Identifier	it		1273017	0					
ANR	1273035	CallExpression	DebugLogs -> begin ( )		1273017	1					
ANR	1273036	Callee	DebugLogs -> begin		1273017	0					
ANR	1273037	PtrMemberAccess	DebugLogs -> begin		1273017	0					
ANR	1273038	Identifier	DebugLogs		1273017	0					
ANR	1273039	Identifier	begin		1273017	1					
ANR	1273040	ArgumentList			1273017	1					
ANR	1273041	Condition	it < DebugLogs -> end ( )	1779:30:48364:48384	1273017	1	True				
ANR	1273042	RelationalExpression	it < DebugLogs -> end ( )		1273017	0		<			
ANR	1273043	Identifier	it		1273017	0					
ANR	1273044	CallExpression	DebugLogs -> end ( )		1273017	1					
ANR	1273045	Callee	DebugLogs -> end		1273017	0					
ANR	1273046	PtrMemberAccess	DebugLogs -> end		1273017	0					
ANR	1273047	Identifier	DebugLogs		1273017	0					
ANR	1273048	Identifier	end		1273017	1					
ANR	1273049	ArgumentList			1273017	1					
ANR	1273050	PostIncDecOperationExpression	it ++	1779:53:48387:48390	1273017	2	True				
ANR	1273051	Identifier	it		1273017	0					
ANR	1273052	IncDec	++		1273017	1					
ANR	1273053	CompoundStatement		6:1:125:125	1273017	3					
ANR	1273054	IfStatement	if ( ! it -> debugFP )		1273017	0					
ANR	1273055	Condition	! it -> debugFP	1781:5:48401:48412	1273017	0	True				
ANR	1273056	UnaryOperationExpression	! it -> debugFP		1273017	0					
ANR	1273057	UnaryOperator	!		1273017	0					
ANR	1273058	PtrMemberAccess	it -> debugFP		1273017	1					
ANR	1273059	Identifier	it		1273017	0					
ANR	1273060	Identifier	debugFP		1273017	1					
ANR	1273061	ContinueStatement	continue ;	1782:3:48418:48426	1273017	1	True				
ANR	1273062	ExpressionStatement	"open_fds . insert ( std :: pair < int , bool > ( fileno ( it -> debugFP ) , true ) )"	1783:2:48430:48492	1273017	1	True				
ANR	1273063	CallExpression	"open_fds . insert ( std :: pair < int , bool > ( fileno ( it -> debugFP ) , true ) )"		1273017	0					
ANR	1273064	Callee	open_fds . insert		1273017	0					
ANR	1273065	MemberAccess	open_fds . insert		1273017	0					
ANR	1273066	Identifier	open_fds		1273017	0					
ANR	1273067	Identifier	insert		1273017	1					
ANR	1273068	ArgumentList	std :: pair < int		1273017	1					
ANR	1273069	Argument	std :: pair < int		1273017	0					
ANR	1273070	RelationalExpression	std :: pair < int		1273017	0		<			
ANR	1273071	Identifier	std :: pair		1273017	0					
ANR	1273072	Identifier	int		1273017	1					
ANR	1273073	Argument	"bool > ( fileno ( it -> debugFP ) , true )"		1273017	1					
ANR	1273074	RelationalExpression	"bool > ( fileno ( it -> debugFP ) , true )"		1273017	0		>			
ANR	1273075	Identifier	bool		1273017	0					
ANR	1273076	Expression	"fileno ( it -> debugFP ) , true"		1273017	1					
ANR	1273077	CallExpression	fileno ( it -> debugFP )		1273017	0					
ANR	1273078	Callee	fileno		1273017	0					
ANR	1273079	Identifier	fileno		1273017	0					
ANR	1273080	ArgumentList	it -> debugFP		1273017	1					
ANR	1273081	Argument	it -> debugFP		1273017	0					
ANR	1273082	PtrMemberAccess	it -> debugFP		1273017	0					
ANR	1273083	Identifier	it		1273017	0					
ANR	1273084	Identifier	debugFP		1273017	1					
ANR	1273085	Identifier	true		1273017	1					
ANR	1273086	ExpressionStatement	found = true	1784:2:48496:48508	1273017	2	True				
ANR	1273087	AssignmentExpression	found = true		1273017	0		=			
ANR	1273088	Identifier	found		1273017	0					
ANR	1273089	Identifier	true		1273017	1					
ANR	1273090	ReturnStatement	return found ;	1787:1:48515:48527	1273017	3	True				
ANR	1273091	Identifier	found		1273017	0					
ANR	1273092	ReturnType	bool		1273017	1					
ANR	1273093	Identifier	debug_open_fds		1273017	2					
ANR	1273094	ParameterList	"std :: map < int , bool > & open_fds"		1273017	3					
ANR	1273095	Parameter	"std :: map < int , bool > & open_fds"	1774:20:48238:48265	1273017	0	True				
ANR	1273096	ParameterType	"std :: map < int , bool > &"		1273017	0					
ANR	1273097	Identifier	open_fds		1273017	1					
ANR	1273098	CFGEntryNode	ENTRY		1273017		True				
ANR	1273099	CFGExitNode	EXIT		1273017		True				
ANR	1273100	Symbol	DebugLogs -> end		1273017						
ANR	1273101	Symbol	std :: pair		1273017						
ANR	1273102	Symbol	bool		1273017						
ANR	1273103	Symbol	false		1273017						
ANR	1273104	Symbol	it		1273017						
ANR	1273105	Symbol	int		1273017						
ANR	1273106	Symbol	open_fds		1273017						
ANR	1273107	Symbol	* it		1273017						
ANR	1273108	Symbol	found		1273017						
ANR	1273109	Symbol	fileno		1273017						
ANR	1273110	Symbol	true		1273017						
ANR	1273111	Symbol	DebugLogs -> begin		1273017						
ANR	1273112	Symbol	it -> debugFP		1273017						
ANR	1273113	Symbol	* DebugLogs		1273017						
ANR	1273114	Symbol	DebugLogs		1273017						
ANR	1273115	Function	dprintf_dump_stack	1791:0:48561:48641							
ANR	1273116	FunctionDef	dprintf_dump_stack ()		1273115	0					
ANR	1273117	CompoundStatement		1792:25:48591:48641	1273115	0					
ANR	1273118	ReturnType	void		1273115	1					
ANR	1273119	Identifier	dprintf_dump_stack		1273115	2					
ANR	1273120	ParameterList			1273115	3					
ANR	1273121	CFGEntryNode	ENTRY		1273115		True				
ANR	1273122	CFGExitNode	EXIT		1273115		True				
