command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2346709	File	data/converged/CVE-2011-4930_htcondor/simple_arg.cpp								
ANR	2346710	Function	SimpleArg :: SimpleArg	27:0:942:1741							
ANR	2346711	FunctionDef	"SimpleArg :: SimpleArg (const char * * argv , int argc , int index)"		2346710	0					
ANR	2346712	CompoundStatement		28:0:1005:1741	2346710	0					
ANR	2346713	ExpressionStatement	m_index = index	29:1:1008:1023	2346710	0	True				
ANR	2346714	AssignmentExpression	m_index = index		2346710	0		=			
ANR	2346715	Identifier	m_index		2346710	0					
ANR	2346716	Identifier	index		2346710	1					
ANR	2346717	ExpressionStatement	ASSERT ( index < argc )	30:1:1026:1048	2346710	1	True				
ANR	2346718	CallExpression	ASSERT ( index < argc )		2346710	0					
ANR	2346719	Callee	ASSERT		2346710	0					
ANR	2346720	Identifier	ASSERT		2346710	0					
ANR	2346721	ArgumentList	index < argc		2346710	1					
ANR	2346722	Argument	index < argc		2346710	0					
ANR	2346723	RelationalExpression	index < argc		2346710	0		<			
ANR	2346724	Identifier	index		2346710	0					
ANR	2346725	Identifier	argc		2346710	1					
ANR	2346726	ExpressionStatement	m_argv = argv	32:1:1052:1065	2346710	2	True				
ANR	2346727	AssignmentExpression	m_argv = argv		2346710	0		=			
ANR	2346728	Identifier	m_argv		2346710	0					
ANR	2346729	Identifier	argv		2346710	1					
ANR	2346730	ExpressionStatement	m_argc = argc	33:1:1068:1081	2346710	3	True				
ANR	2346731	AssignmentExpression	m_argc = argc		2346710	0		=			
ANR	2346732	Identifier	m_argc		2346710	0					
ANR	2346733	Identifier	argc		2346710	1					
ANR	2346734	ExpressionStatement	m_arg = argv [ index ]	34:1:1084:1103	2346710	4	True				
ANR	2346735	AssignmentExpression	m_arg = argv [ index ]		2346710	0		=			
ANR	2346736	Identifier	m_arg		2346710	0					
ANR	2346737	ArrayIndexing	argv [ index ]		2346710	1					
ANR	2346738	Identifier	argv		2346710	0					
ANR	2346739	Identifier	index		2346710	1					
ANR	2346740	ExpressionStatement	m_short = '\\0'	35:1:1106:1120	2346710	5	True				
ANR	2346741	AssignmentExpression	m_short = '\\0'		2346710	0		=			
ANR	2346742	Identifier	m_short		2346710	0					
ANR	2346743	PrimaryExpression	'\\0'		2346710	1					
ANR	2346744	ExpressionStatement	"m_long = """""	36:1:1123:1134	2346710	6	True				
ANR	2346745	AssignmentExpression	"m_long = """""		2346710	0		=			
ANR	2346746	Identifier	m_long		2346710	0					
ANR	2346747	PrimaryExpression	""""""		2346710	1					
ANR	2346748	ExpressionStatement	m_error = false	37:1:1137:1152	2346710	7	True				
ANR	2346749	AssignmentExpression	m_error = false		2346710	0		=			
ANR	2346750	Identifier	m_error		2346710	0					
ANR	2346751	Identifier	false		2346710	1					
ANR	2346752	ExpressionStatement	m_is_opt = false	38:1:1155:1171	2346710	8	True				
ANR	2346753	AssignmentExpression	m_is_opt = false		2346710	0		=			
ANR	2346754	Identifier	m_is_opt		2346710	0					
ANR	2346755	Identifier	false		2346710	1					
ANR	2346756	ExpressionStatement	m_fixed = NULL	39:1:1174:1188	2346710	9	True				
ANR	2346757	AssignmentExpression	m_fixed = NULL		2346710	0		=			
ANR	2346758	Identifier	m_fixed		2346710	0					
ANR	2346759	Identifier	NULL		2346710	1					
ANR	2346760	IfStatement	if ( m_arg [ 0 ] == '-' )		2346710	10					
ANR	2346761	Condition	m_arg [ 0 ] == '-'	42:6:1250:1264	2346710	0	True				
ANR	2346762	EqualityExpression	m_arg [ 0 ] == '-'		2346710	0		==			
ANR	2346763	ArrayIndexing	m_arg [ 0 ]		2346710	0					
ANR	2346764	Identifier	m_arg		2346710	0					
ANR	2346765	PrimaryExpression	0		2346710	1					
ANR	2346766	PrimaryExpression	'-'		2346710	1					
ANR	2346767	CompoundStatement		15:24:262:262	2346710	1					
ANR	2346768	ExpressionStatement	m_is_opt = true	43:2:1272:1287	2346710	0	True				
ANR	2346769	AssignmentExpression	m_is_opt = true		2346710	0		=			
ANR	2346770	Identifier	m_is_opt		2346710	0					
ANR	2346771	Identifier	true		2346710	1					
ANR	2346772	ExpressionStatement	m_index ++	44:2:1291:1300	2346710	1	True				
ANR	2346773	PostIncDecOperationExpression	m_index ++		2346710	0					
ANR	2346774	Identifier	m_index		2346710	0					
ANR	2346775	IncDec	++		2346710	1					
ANR	2346776	IfStatement	if ( m_arg [ 1 ] == '-' )		2346710	2					
ANR	2346777	Condition	m_arg [ 1 ] == '-'	46:7:1310:1324	2346710	0	True				
ANR	2346778	EqualityExpression	m_arg [ 1 ] == '-'		2346710	0		==			
ANR	2346779	ArrayIndexing	m_arg [ 1 ]		2346710	0					
ANR	2346780	Identifier	m_arg		2346710	0					
ANR	2346781	PrimaryExpression	1		2346710	1					
ANR	2346782	PrimaryExpression	'-'		2346710	1					
ANR	2346783	CompoundStatement		19:24:321:321	2346710	1					
ANR	2346784	ExpressionStatement	m_long = & m_arg [ 2 ]	47:3:1332:1350	2346710	0	True				
ANR	2346785	AssignmentExpression	m_long = & m_arg [ 2 ]		2346710	0		=			
ANR	2346786	Identifier	m_long		2346710	0					
ANR	2346787	UnaryOperationExpression	& m_arg [ 2 ]		2346710	1					
ANR	2346788	UnaryOperator	&		2346710	0					
ANR	2346789	ArrayIndexing	m_arg [ 2 ]		2346710	1					
ANR	2346790	Identifier	m_arg		2346710	0					
ANR	2346791	PrimaryExpression	2		2346710	1					
ANR	2346792	ElseStatement	else		2346710	0					
ANR	2346793	IfStatement	if ( strlen ( m_arg ) == 2 )		2346710	0					
ANR	2346794	Condition	strlen ( m_arg ) == 2	49:12:1368:1385	2346710	0	True				
ANR	2346795	EqualityExpression	strlen ( m_arg ) == 2		2346710	0		==			
ANR	2346796	CallExpression	strlen ( m_arg )		2346710	0					
ANR	2346797	Callee	strlen		2346710	0					
ANR	2346798	Identifier	strlen		2346710	0					
ANR	2346799	ArgumentList	m_arg		2346710	1					
ANR	2346800	Argument	m_arg		2346710	0					
ANR	2346801	Identifier	m_arg		2346710	0					
ANR	2346802	PrimaryExpression	2		2346710	1					
ANR	2346803	CompoundStatement		22:32:382:382	2346710	1					
ANR	2346804	ExpressionStatement	m_short = m_arg [ 1 ]	50:3:1393:1411	2346710	0	True				
ANR	2346805	AssignmentExpression	m_short = m_arg [ 1 ]		2346710	0		=			
ANR	2346806	Identifier	m_short		2346710	0					
ANR	2346807	ArrayIndexing	m_arg [ 1 ]		2346710	1					
ANR	2346808	Identifier	m_arg		2346710	0					
ANR	2346809	PrimaryExpression	1		2346710	1					
ANR	2346810	ElseStatement	else		2346710	0					
ANR	2346811	CompoundStatement		25:7:418:418	2346710	0					
ANR	2346812	ExpressionStatement	m_error = true	53:3:1429:1443	2346710	0	True				
ANR	2346813	AssignmentExpression	m_error = true		2346710	0		=			
ANR	2346814	Identifier	m_error		2346710	0					
ANR	2346815	Identifier	true		2346710	1					
ANR	2346816	IfStatement	if ( index + 1 < argc )		2346710	3					
ANR	2346817	Condition	index + 1 < argc	58:7:1526:1539	2346710	0	True				
ANR	2346818	RelationalExpression	index + 1 < argc		2346710	0		<			
ANR	2346819	AdditiveExpression	index + 1		2346710	0		+			
ANR	2346820	Identifier	index		2346710	0					
ANR	2346821	PrimaryExpression	1		2346710	1					
ANR	2346822	Identifier	argc		2346710	1					
ANR	2346823	CompoundStatement		31:24:537:537	2346710	1					
ANR	2346824	ExpressionStatement	m_opt = argv [ index + 1 ]	59:3:1548:1569	2346710	0	True				
ANR	2346825	AssignmentExpression	m_opt = argv [ index + 1 ]		2346710	0		=			
ANR	2346826	Identifier	m_opt		2346710	0					
ANR	2346827	ArrayIndexing	argv [ index + 1 ]		2346710	1					
ANR	2346828	Identifier	argv		2346710	0					
ANR	2346829	AdditiveExpression	index + 1		2346710	1		+			
ANR	2346830	Identifier	index		2346710	0					
ANR	2346831	PrimaryExpression	1		2346710	1					
ANR	2346832	ElseStatement	else		2346710	0					
ANR	2346833	CompoundStatement		34:7:576:576	2346710	0					
ANR	2346834	ExpressionStatement	m_opt = NULL	62:3:1587:1599	2346710	0	True				
ANR	2346835	AssignmentExpression	m_opt = NULL		2346710	0		=			
ANR	2346836	Identifier	m_opt		2346710	0					
ANR	2346837	Identifier	NULL		2346710	1					
ANR	2346838	ElseStatement	else		2346710	0					
ANR	2346839	CompoundStatement		41:6:637:637	2346710	0					
ANR	2346840	ExpressionStatement	m_is_opt = false	70:2:1684:1700	2346710	0	True				
ANR	2346841	AssignmentExpression	m_is_opt = false		2346710	0		=			
ANR	2346842	Identifier	m_is_opt		2346710	0					
ANR	2346843	Identifier	false		2346710	1					
ANR	2346844	ExpressionStatement	m_opt = m_arg	71:2:1704:1717	2346710	1	True				
ANR	2346845	AssignmentExpression	m_opt = m_arg		2346710	0		=			
ANR	2346846	Identifier	m_opt		2346710	0					
ANR	2346847	Identifier	m_arg		2346710	1					
ANR	2346848	ExpressionStatement	m_fixed = m_arg	72:2:1721:1736	2346710	2	True				
ANR	2346849	AssignmentExpression	m_fixed = m_arg		2346710	0		=			
ANR	2346850	Identifier	m_fixed		2346710	0					
ANR	2346851	Identifier	m_arg		2346710	1					
ANR	2346852	Identifier	SimpleArg :: SimpleArg		2346710	1					
ANR	2346853	ParameterList	"const char * * argv , int argc , int index"		2346710	2					
ANR	2346854	Parameter	const char * * argv	27:22:964:980	2346710	0	True				
ANR	2346855	ParameterType	const char * *		2346710	0					
ANR	2346856	Identifier	argv		2346710	1					
ANR	2346857	Parameter	int argc	27:41:983:990	2346710	1	True				
ANR	2346858	ParameterType	int		2346710	0					
ANR	2346859	Identifier	argc		2346710	1					
ANR	2346860	Parameter	int index	27:51:993:1001	2346710	2	True				
ANR	2346861	ParameterType	int		2346710	0					
ANR	2346862	Identifier	index		2346710	1					
ANR	2346863	CFGEntryNode	ENTRY		2346710		True				
ANR	2346864	CFGExitNode	EXIT		2346710		True				
ANR	2346865	Symbol	argc		2346710						
ANR	2346866	Symbol	m_short		2346710						
ANR	2346867	Symbol	m_long		2346710						
ANR	2346868	Symbol	NULL		2346710						
ANR	2346869	Symbol	* m_arg		2346710						
ANR	2346870	Symbol	* index		2346710						
ANR	2346871	Symbol	m_arg		2346710						
ANR	2346872	Symbol	false		2346710						
ANR	2346873	Symbol	index		2346710						
ANR	2346874	Symbol	* argv		2346710						
ANR	2346875	Symbol	argv		2346710						
ANR	2346876	Symbol	m_opt		2346710						
ANR	2346877	Symbol	m_is_opt		2346710						
ANR	2346878	Symbol	m_fixed		2346710						
ANR	2346879	Symbol	strlen		2346710						
ANR	2346880	Symbol	m_argc		2346710						
ANR	2346881	Symbol	true		2346710						
ANR	2346882	Symbol	m_argv		2346710						
ANR	2346883	Symbol	m_index		2346710						
ANR	2346884	Symbol	m_error		2346710						
ANR	2346885	Function	SimpleArg :: Next	76:0:1744:1863							
ANR	2346886	FunctionDef	SimpleArg :: Next ()		2346885	0					
ANR	2346887	CompoundStatement		78:0:1773:1863	2346885	0					
ANR	2346888	IfStatement	if ( m_index + 1 < m_argc )		2346885	0					
ANR	2346889	Condition	m_index + 1 < m_argc	79:6:1781:1798	2346885	0	True				
ANR	2346890	RelationalExpression	m_index + 1 < m_argc		2346885	0		<			
ANR	2346891	AdditiveExpression	m_index + 1		2346885	0		+			
ANR	2346892	Identifier	m_index		2346885	0					
ANR	2346893	PrimaryExpression	1		2346885	1					
ANR	2346894	Identifier	m_argc		2346885	1					
ANR	2346895	CompoundStatement		2:27:28:28	2346885	1					
ANR	2346896	ExpressionStatement	m_opt = m_argv [ m_index + 1 ]	80:2:1806:1831	2346885	0	True				
ANR	2346897	AssignmentExpression	m_opt = m_argv [ m_index + 1 ]		2346885	0		=			
ANR	2346898	Identifier	m_opt		2346885	0					
ANR	2346899	ArrayIndexing	m_argv [ m_index + 1 ]		2346885	1					
ANR	2346900	Identifier	m_argv		2346885	0					
ANR	2346901	AdditiveExpression	m_index + 1		2346885	1		+			
ANR	2346902	Identifier	m_index		2346885	0					
ANR	2346903	PrimaryExpression	1		2346885	1					
ANR	2346904	ElseStatement	else		2346885	0					
ANR	2346905	CompoundStatement		5:6:68:68	2346885	0					
ANR	2346906	ExpressionStatement	m_opt = NULL	83:2:1846:1858	2346885	0	True				
ANR	2346907	AssignmentExpression	m_opt = NULL		2346885	0		=			
ANR	2346908	Identifier	m_opt		2346885	0					
ANR	2346909	Identifier	NULL		2346885	1					
ANR	2346910	ReturnType	void		2346885	1					
ANR	2346911	Identifier	SimpleArg :: Next		2346885	2					
ANR	2346912	ParameterList			2346885	3					
ANR	2346913	CFGEntryNode	ENTRY		2346885		True				
ANR	2346914	CFGExitNode	EXIT		2346885		True				
ANR	2346915	Symbol	NULL		2346885						
ANR	2346916	Symbol	* m_index		2346885						
ANR	2346917	Symbol	m_argc		2346885						
ANR	2346918	Symbol	* m_argv		2346885						
ANR	2346919	Symbol	m_argv		2346885						
ANR	2346920	Symbol	m_opt		2346885						
ANR	2346921	Symbol	m_index		2346885						
ANR	2346922	Function	SimpleArg :: Match	87:0:1866:1996							
ANR	2346923	FunctionDef	SimpleArg :: Match (const char short_arg)		2346922	0					
ANR	2346924	CompoundStatement		89:0:1918:1996	2346922	0					
ANR	2346925	IfStatement	if ( m_short == short_arg )		2346922	0					
ANR	2346926	Condition	m_short == short_arg	90:6:1926:1945	2346922	0	True				
ANR	2346927	EqualityExpression	m_short == short_arg		2346922	0		==			
ANR	2346928	Identifier	m_short		2346922	0					
ANR	2346929	Identifier	short_arg		2346922	1					
ANR	2346930	CompoundStatement		2:29:30:30	2346922	1					
ANR	2346931	ReturnStatement	return true ;	91:2:1953:1964	2346922	0	True				
ANR	2346932	Identifier	true		2346922	0					
ANR	2346933	ElseStatement	else		2346922	0					
ANR	2346934	CompoundStatement		5:6:56:56	2346922	0					
ANR	2346935	ReturnStatement	return false ;	94:2:1979:1991	2346922	0	True				
ANR	2346936	Identifier	false		2346922	0					
ANR	2346937	ReturnType	bool		2346922	1					
ANR	2346938	Identifier	SimpleArg :: Match		2346922	2					
ANR	2346939	ParameterList	const char short_arg		2346922	3					
ANR	2346940	Parameter	const char short_arg	88:18:1889:1908	2346922	0	True				
ANR	2346941	ParameterType	const char		2346922	0					
ANR	2346942	Identifier	short_arg		2346922	1					
ANR	2346943	CFGEntryNode	ENTRY		2346922		True				
ANR	2346944	CFGExitNode	EXIT		2346922		True				
ANR	2346945	Symbol	short_arg		2346922						
ANR	2346946	Symbol	m_short		2346922						
ANR	2346947	Symbol	true		2346922						
ANR	2346948	Symbol	false		2346922						
ANR	2346949	Function	SimpleArg :: Match	98:0:1999:2163							
ANR	2346950	FunctionDef	SimpleArg :: Match (const char * long_arg)		2346949	0					
ANR	2346951	CompoundStatement		100:0:2051:2163	2346949	0					
ANR	2346952	IfStatement	"if ( m_long && long_arg && ( ! strcmp ( m_long , long_arg ) ) )"		2346949	0					
ANR	2346953	Condition	"m_long && long_arg && ( ! strcmp ( m_long , long_arg ) )"	101:6:2059:2111	2346949	0	True				
ANR	2346954	AndExpression	"m_long && long_arg && ( ! strcmp ( m_long , long_arg ) )"		2346949	0		&&			
ANR	2346955	Identifier	m_long		2346949	0					
ANR	2346956	AndExpression	"long_arg && ( ! strcmp ( m_long , long_arg ) )"		2346949	1		&&			
ANR	2346957	Identifier	long_arg		2346949	0					
ANR	2346958	UnaryOperationExpression	"! strcmp ( m_long , long_arg )"		2346949	1					
ANR	2346959	UnaryOperator	!		2346949	0					
ANR	2346960	CallExpression	"strcmp ( m_long , long_arg )"		2346949	1					
ANR	2346961	Callee	strcmp		2346949	0					
ANR	2346962	Identifier	strcmp		2346949	0					
ANR	2346963	ArgumentList	m_long		2346949	1					
ANR	2346964	Argument	m_long		2346949	0					
ANR	2346965	Identifier	m_long		2346949	0					
ANR	2346966	Argument	long_arg		2346949	1					
ANR	2346967	Identifier	long_arg		2346949	0					
ANR	2346968	CompoundStatement		2:63:64:64	2346949	1					
ANR	2346969	ReturnStatement	return true ;	102:2:2120:2131	2346949	0	True				
ANR	2346970	Identifier	true		2346949	0					
ANR	2346971	ElseStatement	else		2346949	0					
ANR	2346972	CompoundStatement		5:6:90:90	2346949	0					
ANR	2346973	ReturnStatement	return false ;	105:2:2146:2158	2346949	0	True				
ANR	2346974	Identifier	false		2346949	0					
ANR	2346975	ReturnType	bool		2346949	1					
ANR	2346976	Identifier	SimpleArg :: Match		2346949	2					
ANR	2346977	ParameterList	const char * long_arg		2346949	3					
ANR	2346978	Parameter	const char * long_arg	99:18:2022:2041	2346949	0	True				
ANR	2346979	ParameterType	const char *		2346949	0					
ANR	2346980	Identifier	long_arg		2346949	1					
ANR	2346981	CFGEntryNode	ENTRY		2346949		True				
ANR	2346982	CFGExitNode	EXIT		2346949		True				
ANR	2346983	Symbol	strcmp		2346949						
ANR	2346984	Symbol	m_long		2346949						
ANR	2346985	Symbol	true		2346949						
ANR	2346986	Symbol	false		2346949						
ANR	2346987	Symbol	long_arg		2346949						
ANR	2346988	Function	SimpleArg :: Match	109:0:2166:2367							
ANR	2346989	FunctionDef	"SimpleArg :: Match (const char short_arg , const char * long_arg)"		2346988	0					
ANR	2346990	CompoundStatement		111:0:2240:2367	2346988	0					
ANR	2346991	IfStatement	if ( Match ( short_arg ) )		2346988	0					
ANR	2346992	Condition	Match ( short_arg )	112:6:2248:2265	2346988	0	True				
ANR	2346993	CallExpression	Match ( short_arg )		2346988	0					
ANR	2346994	Callee	Match		2346988	0					
ANR	2346995	Identifier	Match		2346988	0					
ANR	2346996	ArgumentList	short_arg		2346988	1					
ANR	2346997	Argument	short_arg		2346988	0					
ANR	2346998	Identifier	short_arg		2346988	0					
ANR	2346999	CompoundStatement		2:27:28:28	2346988	1					
ANR	2347000	ReturnStatement	return true ;	113:2:2273:2284	2346988	0	True				
ANR	2347001	Identifier	true		2346988	0					
ANR	2347002	ElseStatement	else		2346988	0					
ANR	2347003	IfStatement	if ( Match ( long_arg ) )		2346988	0					
ANR	2347004	Condition	Match ( long_arg )	115:11:2300:2316	2346988	0	True				
ANR	2347005	CallExpression	Match ( long_arg )		2346988	0					
ANR	2347006	Callee	Match		2346988	0					
ANR	2347007	Identifier	Match		2346988	0					
ANR	2347008	ArgumentList	long_arg		2346988	1					
ANR	2347009	Argument	long_arg		2346988	0					
ANR	2347010	Identifier	long_arg		2346988	0					
ANR	2347011	CompoundStatement		5:31:79:79	2346988	1					
ANR	2347012	ReturnStatement	return true ;	116:2:2324:2335	2346988	0	True				
ANR	2347013	Identifier	true		2346988	0					
ANR	2347014	ElseStatement	else		2346988	0					
ANR	2347015	CompoundStatement		8:6:105:105	2346988	0					
ANR	2347016	ReturnStatement	return false ;	119:2:2350:2362	2346988	0	True				
ANR	2347017	Identifier	false		2346988	0					
ANR	2347018	ReturnType	bool		2346988	1					
ANR	2347019	Identifier	SimpleArg :: Match		2346988	2					
ANR	2347020	ParameterList	"const char short_arg , const char * long_arg"		2346988	3					
ANR	2347021	Parameter	const char short_arg	110:18:2189:2208	2346988	0	True				
ANR	2347022	ParameterType	const char		2346988	0					
ANR	2347023	Identifier	short_arg		2346988	1					
ANR	2347024	Parameter	const char * long_arg	110:40:2211:2230	2346988	1	True				
ANR	2347025	ParameterType	const char *		2346988	0					
ANR	2347026	Identifier	long_arg		2346988	1					
ANR	2347027	CFGEntryNode	ENTRY		2346988		True				
ANR	2347028	CFGExitNode	EXIT		2346988		True				
ANR	2347029	Symbol	short_arg		2346988						
ANR	2347030	Symbol	true		2346988						
ANR	2347031	Symbol	false		2346988						
ANR	2347032	Symbol	long_arg		2346988						
ANR	2347033	Symbol	Match		2346988						
ANR	2347034	Function	SimpleArg :: fixedMatch	123:0:2370:2535							
ANR	2347035	FunctionDef	"SimpleArg :: fixedMatch (const char * arg , bool consume)"		2347034	0					
ANR	2347036	CompoundStatement		125:0:2430:2535	2347034	0					
ANR	2347037	IdentifierDeclStatement	"bool match = ( ! strcmp ( m_arg , arg ) ) ;"	126:1:2433:2471	2347034	0	True				
ANR	2347038	IdentifierDecl	"match = ( ! strcmp ( m_arg , arg ) )"		2347034	0					
ANR	2347039	IdentifierDeclType	bool		2347034	0					
ANR	2347040	Identifier	match		2347034	1					
ANR	2347041	AssignmentExpression	"match = ( ! strcmp ( m_arg , arg ) )"		2347034	2		=			
ANR	2347042	Identifier	match		2347034	0					
ANR	2347043	UnaryOperationExpression	"! strcmp ( m_arg , arg )"		2347034	1					
ANR	2347044	UnaryOperator	!		2347034	0					
ANR	2347045	CallExpression	"strcmp ( m_arg , arg )"		2347034	1					
ANR	2347046	Callee	strcmp		2347034	0					
ANR	2347047	Identifier	strcmp		2347034	0					
ANR	2347048	ArgumentList	m_arg		2347034	1					
ANR	2347049	Argument	m_arg		2347034	0					
ANR	2347050	Identifier	m_arg		2347034	0					
ANR	2347051	Argument	arg		2347034	1					
ANR	2347052	Identifier	arg		2347034	0					
ANR	2347053	IfStatement	if ( match && consume )		2347034	1					
ANR	2347054	Condition	match && consume	127:6:2479:2494	2347034	0	True				
ANR	2347055	AndExpression	match && consume		2347034	0		&&			
ANR	2347056	Identifier	match		2347034	0					
ANR	2347057	Identifier	consume		2347034	1					
ANR	2347058	CompoundStatement		3:25:67:67	2347034	1					
ANR	2347059	ExpressionStatement	ConsumeOpt ( )	128:2:2502:2515	2347034	0	True				
ANR	2347060	CallExpression	ConsumeOpt ( )		2347034	0					
ANR	2347061	Callee	ConsumeOpt		2347034	0					
ANR	2347062	Identifier	ConsumeOpt		2347034	0					
ANR	2347063	ArgumentList			2347034	1					
ANR	2347064	ReturnStatement	return match ;	130:1:2521:2533	2347034	2	True				
ANR	2347065	Identifier	match		2347034	0					
ANR	2347066	ReturnType	bool		2347034	1					
ANR	2347067	Identifier	SimpleArg :: fixedMatch		2347034	2					
ANR	2347068	ParameterList	"const char * arg , bool consume"		2347034	3					
ANR	2347069	Parameter	const char * arg	124:23:2398:2412	2347034	0	True				
ANR	2347070	ParameterType	const char *		2347034	0					
ANR	2347071	Identifier	arg		2347034	1					
ANR	2347072	Parameter	bool consume	124:40:2415:2426	2347034	1	True				
ANR	2347073	ParameterType	bool		2347034	0					
ANR	2347074	Identifier	consume		2347034	1					
ANR	2347075	CFGEntryNode	ENTRY		2347034		True				
ANR	2347076	CFGExitNode	EXIT		2347034		True				
ANR	2347077	Symbol	strcmp		2347034						
ANR	2347078	Symbol	arg		2347034						
ANR	2347079	Symbol	m_arg		2347034						
ANR	2347080	Symbol	match		2347034						
ANR	2347081	Symbol	consume		2347034						
ANR	2347082	Function	SimpleArg :: ConsumeOpt	133:0:2538:2644							
ANR	2347083	FunctionDef	SimpleArg :: ConsumeOpt (bool consume)		2347082	0					
ANR	2347084	CompoundStatement		135:0:2580:2644	2347082	0					
ANR	2347085	IfStatement	if ( consume )		2347082	0					
ANR	2347086	Condition	consume	136:6:2588:2594	2347082	0	True				
ANR	2347087	Identifier	consume		2347082	0					
ANR	2347088	CompoundStatement		2:16:17:17	2347082	1					
ANR	2347089	ExpressionStatement	Next ( )	137:2:2602:2609	2347082	0	True				
ANR	2347090	CallExpression	Next ( )		2347082	0					
ANR	2347091	Callee	Next		2347082	0					
ANR	2347092	Identifier	Next		2347082	0					
ANR	2347093	ArgumentList			2347082	1					
ANR	2347094	ExpressionStatement	m_index ++	138:2:2613:2622	2347082	1	True				
ANR	2347095	PostIncDecOperationExpression	m_index ++		2347082	0					
ANR	2347096	Identifier	m_index		2347082	0					
ANR	2347097	IncDec	++		2347082	1					
ANR	2347098	ReturnStatement	return m_index ;	140:1:2628:2642	2347082	1	True				
ANR	2347099	Identifier	m_index		2347082	0					
ANR	2347100	ReturnType	int		2347082	1					
ANR	2347101	Identifier	SimpleArg :: ConsumeOpt		2347082	2					
ANR	2347102	ParameterList	bool consume		2347082	3					
ANR	2347103	Parameter	bool consume	134:23:2565:2576	2347082	0	True				
ANR	2347104	ParameterType	bool		2347082	0					
ANR	2347105	Identifier	consume		2347082	1					
ANR	2347106	CFGEntryNode	ENTRY		2347082		True				
ANR	2347107	CFGExitNode	EXIT		2347082		True				
ANR	2347108	Symbol	consume		2347082						
ANR	2347109	Symbol	m_index		2347082						
ANR	2347110	Function	SimpleArg :: getOpt	144:0:2675:2827							
ANR	2347111	FunctionDef	"SimpleArg :: getOpt (const char * & opt , bool consume)"		2347110	0					
ANR	2347112	CompoundStatement		146:0:2732:2827	2347110	0					
ANR	2347113	IfStatement	if ( ! isOptStr ( ) )		2347110	0					
ANR	2347114	Condition	! isOptStr ( )	147:6:2740:2750	2347110	0	True				
ANR	2347115	UnaryOperationExpression	! isOptStr ( )		2347110	0					
ANR	2347116	UnaryOperator	!		2347110	0					
ANR	2347117	CallExpression	isOptStr ( )		2347110	1					
ANR	2347118	Callee	isOptStr		2347110	0					
ANR	2347119	Identifier	isOptStr		2347110	0					
ANR	2347120	ArgumentList			2347110	1					
ANR	2347121	CompoundStatement		2:20:21:21	2347110	1					
ANR	2347122	ReturnStatement	return false ;	148:2:2758:2770	2347110	0	True				
ANR	2347123	Identifier	false		2347110	0					
ANR	2347124	ExpressionStatement	opt = m_opt	150:1:2776:2787	2347110	1	True				
ANR	2347125	AssignmentExpression	opt = m_opt		2347110	0		=			
ANR	2347126	Identifier	opt		2347110	0					
ANR	2347127	Identifier	m_opt		2347110	1					
ANR	2347128	ExpressionStatement	ConsumeOpt ( consume )	151:1:2790:2811	2347110	2	True				
ANR	2347129	CallExpression	ConsumeOpt ( consume )		2347110	0					
ANR	2347130	Callee	ConsumeOpt		2347110	0					
ANR	2347131	Identifier	ConsumeOpt		2347110	0					
ANR	2347132	ArgumentList	consume		2347110	1					
ANR	2347133	Argument	consume		2347110	0					
ANR	2347134	Identifier	consume		2347110	0					
ANR	2347135	ReturnStatement	return true ;	152:1:2814:2825	2347110	3	True				
ANR	2347136	Identifier	true		2347110	0					
ANR	2347137	ReturnType	bool		2347110	1					
ANR	2347138	Identifier	SimpleArg :: getOpt		2347110	2					
ANR	2347139	ParameterList	"const char * & opt , bool consume"		2347110	3					
ANR	2347140	Parameter	const char * & opt	145:19:2699:2714	2347110	0	True				
ANR	2347141	ParameterType	const char * &		2347110	0					
ANR	2347142	Identifier	opt		2347110	1					
ANR	2347143	Parameter	bool consume	145:37:2717:2728	2347110	1	True				
ANR	2347144	ParameterType	bool		2347110	0					
ANR	2347145	Identifier	consume		2347110	1					
ANR	2347146	CFGEntryNode	ENTRY		2347110		True				
ANR	2347147	CFGExitNode	EXIT		2347110		True				
ANR	2347148	Symbol	opt		2347110						
ANR	2347149	Symbol	false		2347110						
ANR	2347150	Symbol	true		2347110						
ANR	2347151	Symbol	consume		2347110						
ANR	2347152	Symbol	m_opt		2347110						
ANR	2347153	Symbol	isOptStr		2347110						
ANR	2347154	Function	SimpleArg :: isOptInt	156:0:2859:3012							
ANR	2347155	FunctionDef	SimpleArg :: isOptInt ()		2347154	0					
ANR	2347156	CompoundStatement		158:0:2898:3012	2347154	0					
ANR	2347157	IfStatement	if ( ! m_opt )		2347154	0					
ANR	2347158	Condition	! m_opt	159:6:2906:2911	2347154	0	True				
ANR	2347159	UnaryOperationExpression	! m_opt		2347154	0					
ANR	2347160	UnaryOperator	!		2347154	0					
ANR	2347161	Identifier	m_opt		2347154	1					
ANR	2347162	CompoundStatement		2:15:16:16	2347154	1					
ANR	2347163	ReturnStatement	return false ;	160:2:2919:2931	2347154	0	True				
ANR	2347164	Identifier	false		2347154	0					
ANR	2347165	ReturnStatement	return ( isdigit ( * m_opt ) || ( ( * m_opt == '-' ) && isdigit ( * ( m_opt + 1 ) ) ) ) ;	162:1:2937:3010	2347154	1	True				
ANR	2347166	OrExpression	isdigit ( * m_opt ) || ( ( * m_opt == '-' ) && isdigit ( * ( m_opt + 1 ) ) )		2347154	0		||			
ANR	2347167	CallExpression	isdigit ( * m_opt )		2347154	0					
ANR	2347168	Callee	isdigit		2347154	0					
ANR	2347169	Identifier	isdigit		2347154	0					
ANR	2347170	ArgumentList	* m_opt		2347154	1					
ANR	2347171	Argument	* m_opt		2347154	0					
ANR	2347172	UnaryOperationExpression	* m_opt		2347154	0					
ANR	2347173	UnaryOperator	*		2347154	0					
ANR	2347174	Identifier	m_opt		2347154	1					
ANR	2347175	AndExpression	( * m_opt == '-' ) && isdigit ( * ( m_opt + 1 ) )		2347154	1		&&			
ANR	2347176	EqualityExpression	* m_opt == '-'		2347154	0		==			
ANR	2347177	UnaryOperationExpression	* m_opt		2347154	0					
ANR	2347178	UnaryOperator	*		2347154	0					
ANR	2347179	Identifier	m_opt		2347154	1					
ANR	2347180	PrimaryExpression	'-'		2347154	1					
ANR	2347181	CallExpression	isdigit ( * ( m_opt + 1 ) )		2347154	1					
ANR	2347182	Callee	isdigit		2347154	0					
ANR	2347183	Identifier	isdigit		2347154	0					
ANR	2347184	ArgumentList	* ( m_opt + 1 )		2347154	1					
ANR	2347185	Argument	* ( m_opt + 1 )		2347154	0					
ANR	2347186	UnaryOperationExpression	* ( m_opt + 1 )		2347154	0					
ANR	2347187	UnaryOperator	*		2347154	0					
ANR	2347188	AdditiveExpression	m_opt + 1		2347154	1		+			
ANR	2347189	Identifier	m_opt		2347154	0					
ANR	2347190	PrimaryExpression	1		2347154	1					
ANR	2347191	ReturnType	bool		2347154	1					
ANR	2347192	Identifier	SimpleArg :: isOptInt		2347154	2					
ANR	2347193	ParameterList			2347154	3					
ANR	2347194	CFGEntryNode	ENTRY		2347154		True				
ANR	2347195	CFGExitNode	EXIT		2347154		True				
ANR	2347196	Symbol	* m_opt		2347154						
ANR	2347197	Symbol	false		2347154						
ANR	2347198	Symbol	* ( m_opt + 1 )		2347154						
ANR	2347199	Symbol	m_opt		2347154						
ANR	2347200	Symbol	isdigit		2347154						
ANR	2347201	Function	SimpleArg :: getOpt	164:0:3014:3166							
ANR	2347202	FunctionDef	"SimpleArg :: getOpt (int & opt , bool consume)"		2347201	0					
ANR	2347203	CompoundStatement		166:0:3063:3166	2347201	0					
ANR	2347204	IfStatement	if ( ! isOptInt ( ) )		2347201	0					
ANR	2347205	Condition	! isOptInt ( )	167:6:3071:3081	2347201	0	True				
ANR	2347206	UnaryOperationExpression	! isOptInt ( )		2347201	0					
ANR	2347207	UnaryOperator	!		2347201	0					
ANR	2347208	CallExpression	isOptInt ( )		2347201	1					
ANR	2347209	Callee	isOptInt		2347201	0					
ANR	2347210	Identifier	isOptInt		2347201	0					
ANR	2347211	ArgumentList			2347201	1					
ANR	2347212	CompoundStatement		2:20:21:21	2347201	1					
ANR	2347213	ReturnStatement	return false ;	168:2:3089:3101	2347201	0	True				
ANR	2347214	Identifier	false		2347201	0					
ANR	2347215	ExpressionStatement	opt = atoi ( m_opt )	170:1:3107:3126	2347201	1	True				
ANR	2347216	AssignmentExpression	opt = atoi ( m_opt )		2347201	0		=			
ANR	2347217	Identifier	opt		2347201	0					
ANR	2347218	CallExpression	atoi ( m_opt )		2347201	1					
ANR	2347219	Callee	atoi		2347201	0					
ANR	2347220	Identifier	atoi		2347201	0					
ANR	2347221	ArgumentList	m_opt		2347201	1					
ANR	2347222	Argument	m_opt		2347201	0					
ANR	2347223	Identifier	m_opt		2347201	0					
ANR	2347224	ExpressionStatement	ConsumeOpt ( consume )	171:1:3129:3150	2347201	2	True				
ANR	2347225	CallExpression	ConsumeOpt ( consume )		2347201	0					
ANR	2347226	Callee	ConsumeOpt		2347201	0					
ANR	2347227	Identifier	ConsumeOpt		2347201	0					
ANR	2347228	ArgumentList	consume		2347201	1					
ANR	2347229	Argument	consume		2347201	0					
ANR	2347230	Identifier	consume		2347201	0					
ANR	2347231	ReturnStatement	return true ;	172:1:3153:3164	2347201	3	True				
ANR	2347232	Identifier	true		2347201	0					
ANR	2347233	ReturnType	bool		2347201	1					
ANR	2347234	Identifier	SimpleArg :: getOpt		2347201	2					
ANR	2347235	ParameterList	"int & opt , bool consume"		2347201	3					
ANR	2347236	Parameter	int & opt	165:19:3038:3045	2347201	0	True				
ANR	2347237	ParameterType	int &		2347201	0					
ANR	2347238	Identifier	opt		2347201	1					
ANR	2347239	Parameter	bool consume	165:29:3048:3059	2347201	1	True				
ANR	2347240	ParameterType	bool		2347201	0					
ANR	2347241	Identifier	consume		2347201	1					
ANR	2347242	CFGEntryNode	ENTRY		2347201		True				
ANR	2347243	CFGExitNode	EXIT		2347201		True				
ANR	2347244	Symbol	atoi		2347201						
ANR	2347245	Symbol	isOptInt		2347201						
ANR	2347246	Symbol	opt		2347201						
ANR	2347247	Symbol	false		2347201						
ANR	2347248	Symbol	true		2347201						
ANR	2347249	Symbol	consume		2347201						
ANR	2347250	Symbol	m_opt		2347201						
ANR	2347251	Function	SimpleArg :: isOptLong	176:0:3203:3266							
ANR	2347252	FunctionDef	SimpleArg :: isOptLong ()		2347251	0					
ANR	2347253	CompoundStatement		178:0:3243:3266	2347251	0					
ANR	2347254	ReturnStatement	return isOptInt ( ) ;	179:1:3246:3264	2347251	0	True				
ANR	2347255	CallExpression	isOptInt ( )		2347251	0					
ANR	2347256	Callee	isOptInt		2347251	0					
ANR	2347257	Identifier	isOptInt		2347251	0					
ANR	2347258	ArgumentList			2347251	1					
ANR	2347259	ReturnType	bool		2347251	1					
ANR	2347260	Identifier	SimpleArg :: isOptLong		2347251	2					
ANR	2347261	ParameterList			2347251	3					
ANR	2347262	CFGEntryNode	ENTRY		2347251		True				
ANR	2347263	CFGExitNode	EXIT		2347251		True				
ANR	2347264	Symbol	isOptInt		2347251						
ANR	2347265	Function	SimpleArg :: getOpt	181:0:3268:3422							
ANR	2347266	FunctionDef	"SimpleArg :: getOpt (long & opt , bool consume)"		2347265	0					
ANR	2347267	CompoundStatement		183:0:3318:3422	2347265	0					
ANR	2347268	IfStatement	if ( ! isOptLong ( ) )		2347265	0					
ANR	2347269	Condition	! isOptLong ( )	184:6:3326:3337	2347265	0	True				
ANR	2347270	UnaryOperationExpression	! isOptLong ( )		2347265	0					
ANR	2347271	UnaryOperator	!		2347265	0					
ANR	2347272	CallExpression	isOptLong ( )		2347265	1					
ANR	2347273	Callee	isOptLong		2347265	0					
ANR	2347274	Identifier	isOptLong		2347265	0					
ANR	2347275	ArgumentList			2347265	1					
ANR	2347276	CompoundStatement		2:21:22:22	2347265	1					
ANR	2347277	ReturnStatement	return false ;	185:2:3345:3357	2347265	0	True				
ANR	2347278	Identifier	false		2347265	0					
ANR	2347279	ExpressionStatement	opt = atol ( m_opt )	187:1:3363:3382	2347265	1	True				
ANR	2347280	AssignmentExpression	opt = atol ( m_opt )		2347265	0		=			
ANR	2347281	Identifier	opt		2347265	0					
ANR	2347282	CallExpression	atol ( m_opt )		2347265	1					
ANR	2347283	Callee	atol		2347265	0					
ANR	2347284	Identifier	atol		2347265	0					
ANR	2347285	ArgumentList	m_opt		2347265	1					
ANR	2347286	Argument	m_opt		2347265	0					
ANR	2347287	Identifier	m_opt		2347265	0					
ANR	2347288	ExpressionStatement	ConsumeOpt ( consume )	188:1:3385:3406	2347265	2	True				
ANR	2347289	CallExpression	ConsumeOpt ( consume )		2347265	0					
ANR	2347290	Callee	ConsumeOpt		2347265	0					
ANR	2347291	Identifier	ConsumeOpt		2347265	0					
ANR	2347292	ArgumentList	consume		2347265	1					
ANR	2347293	Argument	consume		2347265	0					
ANR	2347294	Identifier	consume		2347265	0					
ANR	2347295	ReturnStatement	return true ;	189:1:3409:3420	2347265	3	True				
ANR	2347296	Identifier	true		2347265	0					
ANR	2347297	ReturnType	bool		2347265	1					
ANR	2347298	Identifier	SimpleArg :: getOpt		2347265	2					
ANR	2347299	ParameterList	"long & opt , bool consume"		2347265	3					
ANR	2347300	Parameter	long & opt	182:19:3292:3300	2347265	0	True				
ANR	2347301	ParameterType	long &		2347265	0					
ANR	2347302	Identifier	opt		2347265	1					
ANR	2347303	Parameter	bool consume	182:30:3303:3314	2347265	1	True				
ANR	2347304	ParameterType	bool		2347265	0					
ANR	2347305	Identifier	consume		2347265	1					
ANR	2347306	CFGEntryNode	ENTRY		2347265		True				
ANR	2347307	CFGExitNode	EXIT		2347265		True				
ANR	2347308	Symbol	opt		2347265						
ANR	2347309	Symbol	false		2347265						
ANR	2347310	Symbol	true		2347265						
ANR	2347311	Symbol	consume		2347265						
ANR	2347312	Symbol	m_opt		2347265						
ANR	2347313	Symbol	atol		2347265						
ANR	2347314	Symbol	isOptLong		2347265						
ANR	2347315	Function	SimpleArg :: getOpt	193:0:3453:3611							
ANR	2347316	FunctionDef	"SimpleArg :: getOpt (double & opt , bool consume)"		2347315	0					
ANR	2347317	CompoundStatement		195:0:3505:3611	2347315	0					
ANR	2347318	IfStatement	if ( ! isOptDouble ( ) )		2347315	0					
ANR	2347319	Condition	! isOptDouble ( )	196:6:3513:3526	2347315	0	True				
ANR	2347320	UnaryOperationExpression	! isOptDouble ( )		2347315	0					
ANR	2347321	UnaryOperator	!		2347315	0					
ANR	2347322	CallExpression	isOptDouble ( )		2347315	1					
ANR	2347323	Callee	isOptDouble		2347315	0					
ANR	2347324	Identifier	isOptDouble		2347315	0					
ANR	2347325	ArgumentList			2347315	1					
ANR	2347326	CompoundStatement		2:23:24:24	2347315	1					
ANR	2347327	ReturnStatement	return false ;	197:2:3534:3546	2347315	0	True				
ANR	2347328	Identifier	false		2347315	0					
ANR	2347329	ExpressionStatement	opt = atof ( m_opt )	199:1:3552:3571	2347315	1	True				
ANR	2347330	AssignmentExpression	opt = atof ( m_opt )		2347315	0		=			
ANR	2347331	Identifier	opt		2347315	0					
ANR	2347332	CallExpression	atof ( m_opt )		2347315	1					
ANR	2347333	Callee	atof		2347315	0					
ANR	2347334	Identifier	atof		2347315	0					
ANR	2347335	ArgumentList	m_opt		2347315	1					
ANR	2347336	Argument	m_opt		2347315	0					
ANR	2347337	Identifier	m_opt		2347315	0					
ANR	2347338	ExpressionStatement	ConsumeOpt ( consume )	200:1:3574:3595	2347315	2	True				
ANR	2347339	CallExpression	ConsumeOpt ( consume )		2347315	0					
ANR	2347340	Callee	ConsumeOpt		2347315	0					
ANR	2347341	Identifier	ConsumeOpt		2347315	0					
ANR	2347342	ArgumentList	consume		2347315	1					
ANR	2347343	Argument	consume		2347315	0					
ANR	2347344	Identifier	consume		2347315	0					
ANR	2347345	ReturnStatement	return true ;	201:1:3598:3609	2347315	3	True				
ANR	2347346	Identifier	true		2347315	0					
ANR	2347347	ReturnType	bool		2347315	1					
ANR	2347348	Identifier	SimpleArg :: getOpt		2347315	2					
ANR	2347349	ParameterList	"double & opt , bool consume"		2347315	3					
ANR	2347350	Parameter	double & opt	194:19:3477:3487	2347315	0	True				
ANR	2347351	ParameterType	double &		2347315	0					
ANR	2347352	Identifier	opt		2347315	1					
ANR	2347353	Parameter	bool consume	194:32:3490:3501	2347315	1	True				
ANR	2347354	ParameterType	bool		2347315	0					
ANR	2347355	Identifier	consume		2347315	1					
ANR	2347356	CFGEntryNode	ENTRY		2347315		True				
ANR	2347357	CFGExitNode	EXIT		2347315		True				
ANR	2347358	Symbol	opt		2347315						
ANR	2347359	Symbol	isOptDouble		2347315						
ANR	2347360	Symbol	atof		2347315						
ANR	2347361	Symbol	false		2347315						
ANR	2347362	Symbol	true		2347315						
ANR	2347363	Symbol	consume		2347315						
ANR	2347364	Symbol	m_opt		2347315						
ANR	2347365	Function	SimpleArg :: isOptBool	205:0:3643:3761							
ANR	2347366	FunctionDef	SimpleArg :: isOptBool ()		2347365	0					
ANR	2347367	CompoundStatement		207:0:3683:3761	2347365	0					
ANR	2347368	IdentifierDeclStatement	int c = toupper ( * m_opt ) ;	208:1:3686:3709	2347365	0	True				
ANR	2347369	IdentifierDecl	c = toupper ( * m_opt )		2347365	0					
ANR	2347370	IdentifierDeclType	int		2347365	0					
ANR	2347371	Identifier	c		2347365	1					
ANR	2347372	AssignmentExpression	c = toupper ( * m_opt )		2347365	2		=			
ANR	2347373	Identifier	c		2347365	0					
ANR	2347374	CallExpression	toupper ( * m_opt )		2347365	1					
ANR	2347375	Callee	toupper		2347365	0					
ANR	2347376	Identifier	toupper		2347365	0					
ANR	2347377	ArgumentList	* m_opt		2347365	1					
ANR	2347378	Argument	* m_opt		2347365	0					
ANR	2347379	UnaryOperationExpression	* m_opt		2347365	0					
ANR	2347380	UnaryOperator	*		2347365	0					
ANR	2347381	Identifier	m_opt		2347365	1					
ANR	2347382	ReturnStatement	return ( c == 'T' || c == 'F' || c == 'Y' || c == 'N' ) ;	209:1:3712:3759	2347365	1	True				
ANR	2347383	OrExpression	c == 'T' || c == 'F' || c == 'Y' || c == 'N'		2347365	0		||			
ANR	2347384	EqualityExpression	c == 'T'		2347365	0		==			
ANR	2347385	Identifier	c		2347365	0					
ANR	2347386	PrimaryExpression	'T'		2347365	1					
ANR	2347387	OrExpression	c == 'F' || c == 'Y' || c == 'N'		2347365	1		||			
ANR	2347388	EqualityExpression	c == 'F'		2347365	0		==			
ANR	2347389	Identifier	c		2347365	0					
ANR	2347390	PrimaryExpression	'F'		2347365	1					
ANR	2347391	OrExpression	c == 'Y' || c == 'N'		2347365	1		||			
ANR	2347392	EqualityExpression	c == 'Y'		2347365	0		==			
ANR	2347393	Identifier	c		2347365	0					
ANR	2347394	PrimaryExpression	'Y'		2347365	1					
ANR	2347395	EqualityExpression	c == 'N'		2347365	1		==			
ANR	2347396	Identifier	c		2347365	0					
ANR	2347397	PrimaryExpression	'N'		2347365	1					
ANR	2347398	ReturnType	bool		2347365	1					
ANR	2347399	Identifier	SimpleArg :: isOptBool		2347365	2					
ANR	2347400	ParameterList			2347365	3					
ANR	2347401	CFGEntryNode	ENTRY		2347365		True				
ANR	2347402	CFGExitNode	EXIT		2347365		True				
ANR	2347403	Symbol	c		2347365						
ANR	2347404	Symbol	toupper		2347365						
ANR	2347405	Symbol	* m_opt		2347365						
ANR	2347406	Symbol	m_opt		2347365						
ANR	2347407	Function	SimpleArg :: getOpt	211:0:3764:3951							
ANR	2347408	FunctionDef	"SimpleArg :: getOpt (bool & opt , bool consume)"		2347407	0					
ANR	2347409	CompoundStatement		213:0:3814:3951	2347407	0					
ANR	2347410	IfStatement	if ( ! isOptBool ( ) )		2347407	0					
ANR	2347411	Condition	! isOptBool ( )	214:6:3822:3833	2347407	0	True				
ANR	2347412	UnaryOperationExpression	! isOptBool ( )		2347407	0					
ANR	2347413	UnaryOperator	!		2347407	0					
ANR	2347414	CallExpression	isOptBool ( )		2347407	1					
ANR	2347415	Callee	isOptBool		2347407	0					
ANR	2347416	Identifier	isOptBool		2347407	0					
ANR	2347417	ArgumentList			2347407	1					
ANR	2347418	CompoundStatement		2:21:22:22	2347407	1					
ANR	2347419	ReturnStatement	return false ;	215:2:3841:3853	2347407	0	True				
ANR	2347420	Identifier	false		2347407	0					
ANR	2347421	IdentifierDeclStatement	int c = toupper ( * m_opt ) ;	217:1:3859:3882	2347407	1	True				
ANR	2347422	IdentifierDecl	c = toupper ( * m_opt )		2347407	0					
ANR	2347423	IdentifierDeclType	int		2347407	0					
ANR	2347424	Identifier	c		2347407	1					
ANR	2347425	AssignmentExpression	c = toupper ( * m_opt )		2347407	2		=			
ANR	2347426	Identifier	c		2347407	0					
ANR	2347427	CallExpression	toupper ( * m_opt )		2347407	1					
ANR	2347428	Callee	toupper		2347407	0					
ANR	2347429	Identifier	toupper		2347407	0					
ANR	2347430	ArgumentList	* m_opt		2347407	1					
ANR	2347431	Argument	* m_opt		2347407	0					
ANR	2347432	UnaryOperationExpression	* m_opt		2347407	0					
ANR	2347433	UnaryOperator	*		2347407	0					
ANR	2347434	Identifier	m_opt		2347407	1					
ANR	2347435	ExpressionStatement	opt = ( c == 'T' || c == 'Y' )	218:1:3885:3911	2347407	2	True				
ANR	2347436	AssignmentExpression	opt = ( c == 'T' || c == 'Y' )		2347407	0		=			
ANR	2347437	Identifier	opt		2347407	0					
ANR	2347438	OrExpression	c == 'T' || c == 'Y'		2347407	1		||			
ANR	2347439	EqualityExpression	c == 'T'		2347407	0		==			
ANR	2347440	Identifier	c		2347407	0					
ANR	2347441	PrimaryExpression	'T'		2347407	1					
ANR	2347442	EqualityExpression	c == 'Y'		2347407	1		==			
ANR	2347443	Identifier	c		2347407	0					
ANR	2347444	PrimaryExpression	'Y'		2347407	1					
ANR	2347445	ExpressionStatement	ConsumeOpt ( consume )	219:1:3914:3935	2347407	3	True				
ANR	2347446	CallExpression	ConsumeOpt ( consume )		2347407	0					
ANR	2347447	Callee	ConsumeOpt		2347407	0					
ANR	2347448	Identifier	ConsumeOpt		2347407	0					
ANR	2347449	ArgumentList	consume		2347407	1					
ANR	2347450	Argument	consume		2347407	0					
ANR	2347451	Identifier	consume		2347407	0					
ANR	2347452	ReturnStatement	return true ;	220:1:3938:3949	2347407	4	True				
ANR	2347453	Identifier	true		2347407	0					
ANR	2347454	ReturnType	bool		2347407	1					
ANR	2347455	Identifier	SimpleArg :: getOpt		2347407	2					
ANR	2347456	ParameterList	"bool & opt , bool consume"		2347407	3					
ANR	2347457	Parameter	bool & opt	212:19:3788:3796	2347407	0	True				
ANR	2347458	ParameterType	bool &		2347407	0					
ANR	2347459	Identifier	opt		2347407	1					
ANR	2347460	Parameter	bool consume	212:30:3799:3810	2347407	1	True				
ANR	2347461	ParameterType	bool		2347407	0					
ANR	2347462	Identifier	consume		2347407	1					
ANR	2347463	CFGEntryNode	ENTRY		2347407		True				
ANR	2347464	CFGExitNode	EXIT		2347407		True				
ANR	2347465	Symbol	opt		2347407						
ANR	2347466	Symbol	c		2347407						
ANR	2347467	Symbol	isOptBool		2347407						
ANR	2347468	Symbol	toupper		2347407						
ANR	2347469	Symbol	* m_opt		2347407						
ANR	2347470	Symbol	false		2347407						
ANR	2347471	Symbol	true		2347407						
ANR	2347472	Symbol	consume		2347407						
ANR	2347473	Symbol	m_opt		2347407						
