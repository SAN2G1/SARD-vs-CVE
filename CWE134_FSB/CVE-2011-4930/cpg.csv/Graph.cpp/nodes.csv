command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	199111	File	data/converged/CVE-2011-4930_htcondor/Graph.cpp								
ANR	199112	Function	Graph :: Graph	40:0:809:830							
ANR	199113	FunctionDef	Graph :: Graph ()		199112	0					
ANR	199114	CompoundStatement		41:0:828:830	199112	0					
ANR	199115	Identifier	Graph :: Graph		199112	1					
ANR	199116	ParameterList			199112	2					
ANR	199117	CFGEntryNode	ENTRY		199112		True				
ANR	199118	CFGExitNode	EXIT		199112		True				
ANR	199119	Function	Graph :: ~Graph	59:0:1029:1259							
ANR	199120	FunctionDef	Graph :: ~Graph ()		199119	0					
ANR	199121	CompoundStatement		60:0:1049:1259	199119	0					
ANR	199122	ForStatement	for ( int i = 0 ; i < nodeToLabelString . getNumElem ( ) ; i ++ )		199119	0					
ANR	199123	ForInit	int i = 0 ;	61:6:1057:1064	199119	0	True				
ANR	199124	IdentifierDeclStatement	int i = 0 ;		199119	0					
ANR	199125	IdentifierDecl	i = 0		199119	0					
ANR	199126	IdentifierDeclType	int		199119	0					
ANR	199127	Identifier	i		199119	1					
ANR	199128	AssignmentExpression	i = 0		199119	2		=			
ANR	199129	Identifier	i		199119	0					
ANR	199130	PrimaryExpression	0		199119	1					
ANR	199131	Condition	i < nodeToLabelString . getNumElem ( )	61:15:1066:1097	199119	1	True				
ANR	199132	RelationalExpression	i < nodeToLabelString . getNumElem ( )		199119	0		<			
ANR	199133	Identifier	i		199119	0					
ANR	199134	CallExpression	nodeToLabelString . getNumElem ( )		199119	1					
ANR	199135	Callee	nodeToLabelString . getNumElem		199119	0					
ANR	199136	MemberAccess	nodeToLabelString . getNumElem		199119	0					
ANR	199137	Identifier	nodeToLabelString		199119	0					
ANR	199138	Identifier	getNumElem		199119	1					
ANR	199139	ArgumentList			199119	1					
ANR	199140	PostIncDecOperationExpression	i ++	61:49:1100:1102	199119	2	True				
ANR	199141	Identifier	i		199119	0					
ANR	199142	IncDec	++		199119	1					
ANR	199143	CompoundStatement		2:55:56:56	199119	3					
ANR	199144	IfStatement	if ( NULL != nodeToLabelString . getElem ( i ) )		199119	0					
ANR	199145	Condition	NULL != nodeToLabelString . getElem ( i )	62:6:1114:1147	199119	0	True				
ANR	199146	EqualityExpression	NULL != nodeToLabelString . getElem ( i )		199119	0		!=			
ANR	199147	Identifier	NULL		199119	0					
ANR	199148	CallExpression	nodeToLabelString . getElem ( i )		199119	1					
ANR	199149	Callee	nodeToLabelString . getElem		199119	0					
ANR	199150	MemberAccess	nodeToLabelString . getElem		199119	0					
ANR	199151	Identifier	nodeToLabelString		199119	0					
ANR	199152	Identifier	getElem		199119	1					
ANR	199153	ArgumentList	i		199119	1					
ANR	199154	Argument	i		199119	0					
ANR	199155	Identifier	i		199119	0					
ANR	199156	Statement	delete	63:3:1154:1159	199119	1	True				
ANR	199157	ExpressionStatement	nodeToLabelString . getElem ( i )	63:10:1161:1189	199119	1	True				
ANR	199158	CallExpression	nodeToLabelString . getElem ( i )		199119	0					
ANR	199159	Callee	nodeToLabelString . getElem		199119	0					
ANR	199160	MemberAccess	nodeToLabelString . getElem		199119	0					
ANR	199161	Identifier	nodeToLabelString		199119	0					
ANR	199162	Identifier	getElem		199119	1					
ANR	199163	ArgumentList	i		199119	1					
ANR	199164	Argument	i		199119	0					
ANR	199165	Identifier	i		199119	0					
ANR	199166	ExpressionStatement		64:2:1257:1257	199119	1	True				
ANR	199167	Identifier	Graph :: ~Graph		199119	1					
ANR	199168	ParameterList			199119	2					
ANR	199169	CFGEntryNode	ENTRY		199119		True				
ANR	199170	CFGExitNode	EXIT		199119		True				
ANR	199171	Symbol	nodeToLabelString . getElem		199119						
ANR	199172	Symbol	NULL		199119						
ANR	199173	Symbol	i		199119						
ANR	199174	Symbol	nodeToLabelString . getNumElem		199119						
ANR	199175	Symbol	nodeToLabelString		199119						
ANR	199176	Function	Graph :: addNode	83:0:1526:1734							
ANR	199177	FunctionDef	Graph :: addNode ()		199176	0					
ANR	199178	CompoundStatement		84:0:1551:1734	199176	0					
ANR	199179	ExpressionStatement	arcTable . appendRow ( )	85:1:1554:1574	199176	0	True				
ANR	199180	CallExpression	arcTable . appendRow ( )		199176	0					
ANR	199181	Callee	arcTable . appendRow		199176	0					
ANR	199182	MemberAccess	arcTable . appendRow		199176	0					
ANR	199183	Identifier	arcTable		199176	0					
ANR	199184	Identifier	appendRow		199176	1					
ANR	199185	ArgumentList			199176	1					
ANR	199186	ExpressionStatement	nodeToLabelInt . append ( - 1 )	86:1:1577:1602	199176	1	True				
ANR	199187	CallExpression	nodeToLabelInt . append ( - 1 )		199176	0					
ANR	199188	Callee	nodeToLabelInt . append		199176	0					
ANR	199189	MemberAccess	nodeToLabelInt . append		199176	0					
ANR	199190	Identifier	nodeToLabelInt		199176	0					
ANR	199191	Identifier	append		199176	1					
ANR	199192	ArgumentList	- 1		199176	1					
ANR	199193	Argument	- 1		199176	0					
ANR	199194	UnaryOperationExpression	- 1		199176	0					
ANR	199195	UnaryOperator	-		199176	0					
ANR	199196	PrimaryExpression	1		199176	1					
ANR	199197	ExpressionStatement	nodeToLabelString . append ( NULL )	87:1:1637:1667	199176	2	True				
ANR	199198	CallExpression	nodeToLabelString . append ( NULL )		199176	0					
ANR	199199	Callee	nodeToLabelString . append		199176	0					
ANR	199200	MemberAccess	nodeToLabelString . append		199176	0					
ANR	199201	Identifier	nodeToLabelString		199176	0					
ANR	199202	Identifier	append		199176	1					
ANR	199203	ArgumentList	NULL		199176	1					
ANR	199204	Argument	NULL		199176	0					
ANR	199205	Identifier	NULL		199176	0					
ANR	199206	ReturnStatement	return arcTable . getNumRow ( ) - 1 ;	88:1:1703:1732	199176	3	True				
ANR	199207	AdditiveExpression	arcTable . getNumRow ( ) - 1		199176	0		-			
ANR	199208	CallExpression	arcTable . getNumRow ( )		199176	0					
ANR	199209	Callee	arcTable . getNumRow		199176	0					
ANR	199210	MemberAccess	arcTable . getNumRow		199176	0					
ANR	199211	Identifier	arcTable		199176	0					
ANR	199212	Identifier	getNumRow		199176	1					
ANR	199213	ArgumentList			199176	1					
ANR	199214	PrimaryExpression	1		199176	1					
ANR	199215	ReturnType	int		199176	1					
ANR	199216	Identifier	Graph :: addNode		199176	2					
ANR	199217	ParameterList			199176	3					
ANR	199218	CFGEntryNode	ENTRY		199176		True				
ANR	199219	CFGExitNode	EXIT		199176		True				
ANR	199220	Symbol	NULL		199176						
ANR	199221	Symbol	arcTable		199176						
ANR	199222	Symbol	nodeToLabelInt		199176						
ANR	199223	Symbol	nodeToLabelString		199176						
ANR	199224	Symbol	arcTable . getNumRow		199176						
ANR	199225	Function	Graph :: addArc	109:0:2090:2372							
ANR	199226	FunctionDef	"Graph :: addArc (int nodeSrc , int nodeDst)"		199225	0					
ANR	199227	CompoundStatement		110:0:2135:2372	199225	0					
ANR	199228	IfStatement	if ( nodeSrc < 0 || nodeSrc >= arcTable . getNumRow ( ) )		199225	0					
ANR	199229	Condition	nodeSrc < 0 || nodeSrc >= arcTable . getNumRow ( )	111:5:2142:2183	199225	0	True				
ANR	199230	OrExpression	nodeSrc < 0 || nodeSrc >= arcTable . getNumRow ( )		199225	0		||			
ANR	199231	RelationalExpression	nodeSrc < 0		199225	0		<			
ANR	199232	Identifier	nodeSrc		199225	0					
ANR	199233	PrimaryExpression	0		199225	1					
ANR	199234	RelationalExpression	nodeSrc >= arcTable . getNumRow ( )		199225	1		>=			
ANR	199235	Identifier	nodeSrc		199225	0					
ANR	199236	CallExpression	arcTable . getNumRow ( )		199225	1					
ANR	199237	Callee	arcTable . getNumRow		199225	0					
ANR	199238	MemberAccess	arcTable . getNumRow		199225	0					
ANR	199239	Identifier	arcTable		199225	0					
ANR	199240	Identifier	getNumRow		199225	1					
ANR	199241	ArgumentList			199225	1					
ANR	199242	ThrowStatement	"throw ""Graph::appendArc, nodeSrc out of range"" ;"	112:2:2189:2235	199225	1	True				
ANR	199243	PrimaryExpression	"""Graph::appendArc, nodeSrc out of range"""		199225	0					
ANR	199244	IfStatement	if ( nodeDst < 0 || nodeDst >= arcTable . getNumRow ( ) )		199225	1					
ANR	199245	Condition	nodeDst < 0 || nodeDst >= arcTable . getNumRow ( )	113:5:2242:2283	199225	0	True				
ANR	199246	OrExpression	nodeDst < 0 || nodeDst >= arcTable . getNumRow ( )		199225	0		||			
ANR	199247	RelationalExpression	nodeDst < 0		199225	0		<			
ANR	199248	Identifier	nodeDst		199225	0					
ANR	199249	PrimaryExpression	0		199225	1					
ANR	199250	RelationalExpression	nodeDst >= arcTable . getNumRow ( )		199225	1		>=			
ANR	199251	Identifier	nodeDst		199225	0					
ANR	199252	CallExpression	arcTable . getNumRow ( )		199225	1					
ANR	199253	Callee	arcTable . getNumRow		199225	0					
ANR	199254	MemberAccess	arcTable . getNumRow		199225	0					
ANR	199255	Identifier	arcTable		199225	0					
ANR	199256	Identifier	getNumRow		199225	1					
ANR	199257	ArgumentList			199225	1					
ANR	199258	ThrowStatement	"throw ""Graph::appendArc, nodeDst out of range"" ;"	114:2:2289:2335	199225	1	True				
ANR	199259	PrimaryExpression	"""Graph::appendArc, nodeDst out of range"""		199225	0					
ANR	199260	ExpressionStatement	"arcTable . append ( nodeSrc , nodeDst )"	115:1:2338:2370	199225	2	True				
ANR	199261	CallExpression	"arcTable . append ( nodeSrc , nodeDst )"		199225	0					
ANR	199262	Callee	arcTable . append		199225	0					
ANR	199263	MemberAccess	arcTable . append		199225	0					
ANR	199264	Identifier	arcTable		199225	0					
ANR	199265	Identifier	append		199225	1					
ANR	199266	ArgumentList	nodeSrc		199225	1					
ANR	199267	Argument	nodeSrc		199225	0					
ANR	199268	Identifier	nodeSrc		199225	0					
ANR	199269	Argument	nodeDst		199225	1					
ANR	199270	Identifier	nodeDst		199225	0					
ANR	199271	ReturnType	void		199225	1					
ANR	199272	Identifier	Graph :: addArc		199225	2					
ANR	199273	ParameterList	"int nodeSrc , int nodeDst"		199225	3					
ANR	199274	Parameter	int nodeSrc	109:19:2109:2119	199225	0	True				
ANR	199275	ParameterType	int		199225	0					
ANR	199276	Identifier	nodeSrc		199225	1					
ANR	199277	Parameter	int nodeDst	109:32:2122:2132	199225	1	True				
ANR	199278	ParameterType	int		199225	0					
ANR	199279	Identifier	nodeDst		199225	1					
ANR	199280	CFGEntryNode	ENTRY		199225		True				
ANR	199281	CFGExitNode	EXIT		199225		True				
ANR	199282	CFGExceptionNode	EXCEPTION		199225		True				
ANR	199283	CFGExceptionNode	EXCEPTION		199225		True				
ANR	199284	CFGExceptionNode	EXCEPTION		199225		True				
ANR	199285	Symbol	nodeDst		199225						
ANR	199286	Symbol	nodeSrc		199225						
ANR	199287	Symbol	arcTable		199225						
ANR	199288	Symbol	arcTable . getNumRow		199225						
ANR	199289	Function	Graph :: addArcNoDuplicates	137:0:2835:3335							
ANR	199290	FunctionDef	"Graph :: addArcNoDuplicates (int nodeSrc , int nodeDst)"		199289	0					
ANR	199291	CompoundStatement		138:0:2892:3335	199289	0					
ANR	199292	IfStatement	if ( nodeSrc < 0 || nodeSrc >= arcTable . getNumRow ( ) )		199289	0					
ANR	199293	Condition	nodeSrc < 0 || nodeSrc >= arcTable . getNumRow ( )	139:5:2899:2940	199289	0	True				
ANR	199294	OrExpression	nodeSrc < 0 || nodeSrc >= arcTable . getNumRow ( )		199289	0		||			
ANR	199295	RelationalExpression	nodeSrc < 0		199289	0		<			
ANR	199296	Identifier	nodeSrc		199289	0					
ANR	199297	PrimaryExpression	0		199289	1					
ANR	199298	RelationalExpression	nodeSrc >= arcTable . getNumRow ( )		199289	1		>=			
ANR	199299	Identifier	nodeSrc		199289	0					
ANR	199300	CallExpression	arcTable . getNumRow ( )		199289	1					
ANR	199301	Callee	arcTable . getNumRow		199289	0					
ANR	199302	MemberAccess	arcTable . getNumRow		199289	0					
ANR	199303	Identifier	arcTable		199289	0					
ANR	199304	Identifier	getNumRow		199289	1					
ANR	199305	ArgumentList			199289	1					
ANR	199306	ThrowStatement	"throw ""Graph::appendArc, nodeSrc out of range"" ;"	140:2:2946:2992	199289	1	True				
ANR	199307	PrimaryExpression	"""Graph::appendArc, nodeSrc out of range"""		199289	0					
ANR	199308	IfStatement	if ( nodeDst < 0 || nodeDst >= arcTable . getNumRow ( ) )		199289	1					
ANR	199309	Condition	nodeDst < 0 || nodeDst >= arcTable . getNumRow ( )	141:5:2999:3040	199289	0	True				
ANR	199310	OrExpression	nodeDst < 0 || nodeDst >= arcTable . getNumRow ( )		199289	0		||			
ANR	199311	RelationalExpression	nodeDst < 0		199289	0		<			
ANR	199312	Identifier	nodeDst		199289	0					
ANR	199313	PrimaryExpression	0		199289	1					
ANR	199314	RelationalExpression	nodeDst >= arcTable . getNumRow ( )		199289	1		>=			
ANR	199315	Identifier	nodeDst		199289	0					
ANR	199316	CallExpression	arcTable . getNumRow ( )		199289	1					
ANR	199317	Callee	arcTable . getNumRow		199289	0					
ANR	199318	MemberAccess	arcTable . getNumRow		199289	0					
ANR	199319	Identifier	arcTable		199289	0					
ANR	199320	Identifier	getNumRow		199289	1					
ANR	199321	ArgumentList			199289	1					
ANR	199322	ThrowStatement	"throw ""Graph::appendArc, nodeDst out of range"" ;"	142:2:3046:3092	199289	1	True				
ANR	199323	PrimaryExpression	"""Graph::appendArc, nodeDst out of range"""		199289	0					
ANR	199324	ForStatement	for ( int i = 0 ; i < getNumArcs ( nodeSrc ) ; i ++ )		199289	2					
ANR	199325	ForInit	int i = 0 ;	145:6:3138:3145	199289	0	True				
ANR	199326	IdentifierDeclStatement	int i = 0 ;		199289	0					
ANR	199327	IdentifierDecl	i = 0		199289	0					
ANR	199328	IdentifierDeclType	int		199289	0					
ANR	199329	Identifier	i		199289	1					
ANR	199330	AssignmentExpression	i = 0		199289	2		=			
ANR	199331	Identifier	i		199289	0					
ANR	199332	PrimaryExpression	0		199289	1					
ANR	199333	Condition	i < getNumArcs ( nodeSrc )	145:15:3147:3167	199289	1	True				
ANR	199334	RelationalExpression	i < getNumArcs ( nodeSrc )		199289	0		<			
ANR	199335	Identifier	i		199289	0					
ANR	199336	CallExpression	getNumArcs ( nodeSrc )		199289	1					
ANR	199337	Callee	getNumArcs		199289	0					
ANR	199338	Identifier	getNumArcs		199289	0					
ANR	199339	ArgumentList	nodeSrc		199289	1					
ANR	199340	Argument	nodeSrc		199289	0					
ANR	199341	Identifier	nodeSrc		199289	0					
ANR	199342	PostIncDecOperationExpression	i ++	145:38:3170:3172	199289	2	True				
ANR	199343	Identifier	i		199289	0					
ANR	199344	IncDec	++		199289	1					
ANR	199345	CompoundStatement		8:44:283:283	199289	3					
ANR	199346	IfStatement	"if ( getArc ( nodeSrc , i ) == nodeDst )"		199289	0					
ANR	199347	Condition	"getArc ( nodeSrc , i ) == nodeDst"	146:6:3184:3209	199289	0	True				
ANR	199348	EqualityExpression	"getArc ( nodeSrc , i ) == nodeDst"		199289	0		==			
ANR	199349	CallExpression	"getArc ( nodeSrc , i )"		199289	0					
ANR	199350	Callee	getArc		199289	0					
ANR	199351	Identifier	getArc		199289	0					
ANR	199352	ArgumentList	nodeSrc		199289	1					
ANR	199353	Argument	nodeSrc		199289	0					
ANR	199354	Identifier	nodeSrc		199289	0					
ANR	199355	Argument	i		199289	1					
ANR	199356	Identifier	i		199289	0					
ANR	199357	Identifier	nodeDst		199289	1					
ANR	199358	ReturnStatement	return false ;	147:3:3216:3228	199289	1	True				
ANR	199359	Identifier	false		199289	0					
ANR	199360	ExpressionStatement		148:2:3232:3232	199289	3	True				
ANR	199361	ExpressionStatement	"arcTable . append ( nodeSrc , nodeDst )"	152:1:3286:3318	199289	4	True				
ANR	199362	CallExpression	"arcTable . append ( nodeSrc , nodeDst )"		199289	0					
ANR	199363	Callee	arcTable . append		199289	0					
ANR	199364	MemberAccess	arcTable . append		199289	0					
ANR	199365	Identifier	arcTable		199289	0					
ANR	199366	Identifier	append		199289	1					
ANR	199367	ArgumentList	nodeSrc		199289	1					
ANR	199368	Argument	nodeSrc		199289	0					
ANR	199369	Identifier	nodeSrc		199289	0					
ANR	199370	Argument	nodeDst		199289	1					
ANR	199371	Identifier	nodeDst		199289	0					
ANR	199372	ReturnStatement	return true ;	154:1:3322:3333	199289	5	True				
ANR	199373	Identifier	true		199289	0					
ANR	199374	ReturnType	bool		199289	1					
ANR	199375	Identifier	Graph :: addArcNoDuplicates		199289	2					
ANR	199376	ParameterList	"int nodeSrc , int nodeDst"		199289	3					
ANR	199377	Parameter	int nodeSrc	137:31:2866:2876	199289	0	True				
ANR	199378	ParameterType	int		199289	0					
ANR	199379	Identifier	nodeSrc		199289	1					
ANR	199380	Parameter	int nodeDst	137:44:2879:2889	199289	1	True				
ANR	199381	ParameterType	int		199289	0					
ANR	199382	Identifier	nodeDst		199289	1					
ANR	199383	CFGEntryNode	ENTRY		199289		True				
ANR	199384	CFGExitNode	EXIT		199289		True				
ANR	199385	CFGExceptionNode	EXCEPTION		199289		True				
ANR	199386	CFGExceptionNode	EXCEPTION		199289		True				
ANR	199387	CFGExceptionNode	EXCEPTION		199289		True				
ANR	199388	Symbol	getNumArcs		199289						
ANR	199389	Symbol	nodeDst		199289						
ANR	199390	Symbol	getArc		199289						
ANR	199391	Symbol	nodeSrc		199289						
ANR	199392	Symbol	false		199289						
ANR	199393	Symbol	true		199289						
ANR	199394	Symbol	arcTable		199289						
ANR	199395	Symbol	i		199289						
ANR	199396	Symbol	arcTable . getNumRow		199289						
ANR	199397	Function	Graph :: deappendArc	171:0:3524:3592							
ANR	199398	FunctionDef	Graph :: deappendArc (int node)		199397	0					
ANR	199399	CompoundStatement		172:0:3557:3592	199397	0					
ANR	199400	ReturnStatement	return arcTable . deappend ( node ) ;	173:1:3560:3590	199397	0	True				
ANR	199401	CallExpression	arcTable . deappend ( node )		199397	0					
ANR	199402	Callee	arcTable . deappend		199397	0					
ANR	199403	MemberAccess	arcTable . deappend		199397	0					
ANR	199404	Identifier	arcTable		199397	0					
ANR	199405	Identifier	deappend		199397	1					
ANR	199406	ArgumentList	node		199397	1					
ANR	199407	Argument	node		199397	0					
ANR	199408	Identifier	node		199397	0					
ANR	199409	ReturnType	int		199397	1					
ANR	199410	Identifier	Graph :: deappendArc		199397	2					
ANR	199411	ParameterList	int node		199397	3					
ANR	199412	Parameter	int node	171:23:3547:3554	199397	0	True				
ANR	199413	ParameterType	int		199397	0					
ANR	199414	Identifier	node		199397	1					
ANR	199415	CFGEntryNode	ENTRY		199397		True				
ANR	199416	CFGExitNode	EXIT		199397		True				
ANR	199417	Symbol	arcTable . deappend		199397						
ANR	199418	Symbol	node		199397						
ANR	199419	Symbol	arcTable		199397						
ANR	199420	Function	Graph :: getNumNodes	190:0:3766:3833							
ANR	199421	FunctionDef	Graph :: getNumNodes ()		199420	0					
ANR	199422	CompoundStatement		191:0:3801:3833	199420	0					
ANR	199423	ReturnStatement	return arcTable . getNumRow ( ) ;	192:1:3804:3831	199420	0	True				
ANR	199424	CallExpression	arcTable . getNumRow ( )		199420	0					
ANR	199425	Callee	arcTable . getNumRow		199420	0					
ANR	199426	MemberAccess	arcTable . getNumRow		199420	0					
ANR	199427	Identifier	arcTable		199420	0					
ANR	199428	Identifier	getNumRow		199420	1					
ANR	199429	ArgumentList			199420	1					
ANR	199430	ReturnType	int		199420	1					
ANR	199431	Identifier	Graph :: getNumNodes		199420	2					
ANR	199432	ParameterList			199420	3					
ANR	199433	CFGEntryNode	ENTRY		199420		True				
ANR	199434	CFGExitNode	EXIT		199420		True				
ANR	199435	Symbol	arcTable		199420						
ANR	199436	Symbol	arcTable . getNumRow		199420						
ANR	199437	Function	Graph :: getNumArcs	209:0:4034:4109							
ANR	199438	FunctionDef	Graph :: getNumArcs (int node)		199437	0					
ANR	199439	CompoundStatement		210:0:4072:4109	199437	0					
ANR	199440	ReturnStatement	return arcTable . getNumElem ( node ) ;	211:1:4075:4107	199437	0	True				
ANR	199441	CallExpression	arcTable . getNumElem ( node )		199437	0					
ANR	199442	Callee	arcTable . getNumElem		199437	0					
ANR	199443	MemberAccess	arcTable . getNumElem		199437	0					
ANR	199444	Identifier	arcTable		199437	0					
ANR	199445	Identifier	getNumElem		199437	1					
ANR	199446	ArgumentList	node		199437	1					
ANR	199447	Argument	node		199437	0					
ANR	199448	Identifier	node		199437	0					
ANR	199449	ReturnType	int		199437	1					
ANR	199450	Identifier	Graph :: getNumArcs		199437	2					
ANR	199451	ParameterList	int node		199437	3					
ANR	199452	Parameter	int node	209:22:4056:4063	199437	0	True				
ANR	199453	ParameterType	int		199437	0					
ANR	199454	Identifier	node		199437	1					
ANR	199455	CFGEntryNode	ENTRY		199437		True				
ANR	199456	CFGExitNode	EXIT		199437		True				
ANR	199457	Symbol	node		199437						
ANR	199458	Symbol	arcTable . getNumElem		199437						
ANR	199459	Symbol	arcTable		199437						
ANR	199460	Function	Graph :: getArc	229:0:4363:4444							
ANR	199461	FunctionDef	"Graph :: getArc (int node , int loc)"		199460	0					
ANR	199462	CompoundStatement		230:0:4406:4444	199460	0					
ANR	199463	ReturnStatement	"return arcTable . getElem ( node , loc ) ;"	231:1:4409:4442	199460	0	True				
ANR	199464	CallExpression	"arcTable . getElem ( node , loc )"		199460	0					
ANR	199465	Callee	arcTable . getElem		199460	0					
ANR	199466	MemberAccess	arcTable . getElem		199460	0					
ANR	199467	Identifier	arcTable		199460	0					
ANR	199468	Identifier	getElem		199460	1					
ANR	199469	ArgumentList	node		199460	1					
ANR	199470	Argument	node		199460	0					
ANR	199471	Identifier	node		199460	0					
ANR	199472	Argument	loc		199460	1					
ANR	199473	Identifier	loc		199460	0					
ANR	199474	ReturnType	int		199460	1					
ANR	199475	Identifier	Graph :: getArc		199460	2					
ANR	199476	ParameterList	"int node , int loc"		199460	3					
ANR	199477	Parameter	int node	229:18:4381:4388	199460	0	True				
ANR	199478	ParameterType	int		199460	0					
ANR	199479	Identifier	node		199460	1					
ANR	199480	Parameter	int loc	229:28:4391:4397	199460	1	True				
ANR	199481	ParameterType	int		199460	0					
ANR	199482	Identifier	loc		199460	1					
ANR	199483	CFGEntryNode	ENTRY		199460		True				
ANR	199484	CFGExitNode	EXIT		199460		True				
ANR	199485	Symbol	node		199460						
ANR	199486	Symbol	loc		199460						
ANR	199487	Symbol	arcTable		199460						
ANR	199488	Symbol	arcTable . getElem		199460						
ANR	199489	Function	Graph :: setLabelString	252:0:4872:5465							
ANR	199490	FunctionDef	"Graph :: setLabelString (int node , const char * labelString)"		199489	0					
ANR	199491	CompoundStatement		253:0:4934:5465	199489	0					
ANR	199492	IfStatement	if ( NULL == labelString )		199489	0					
ANR	199493	Condition	NULL == labelString	255:5:4966:4982	199489	0	True				
ANR	199494	EqualityExpression	NULL == labelString		199489	0		==			
ANR	199495	Identifier	NULL		199489	0					
ANR	199496	Identifier	labelString		199489	1					
ANR	199497	ThrowStatement	"throw ""Graph::setLabelString, labelString is NULL"" ;"	256:2:4988:5038	199489	1	True				
ANR	199498	PrimaryExpression	"""Graph::setLabelString, labelString is NULL"""		199489	0					
ANR	199499	IfStatement	if ( - 1 != getNode ( labelString ) )		199489	1					
ANR	199500	Condition	- 1 != getNode ( labelString )	259:5:5072:5095	199489	0	True				
ANR	199501	EqualityExpression	- 1 != getNode ( labelString )		199489	0		!=			
ANR	199502	UnaryOperationExpression	- 1		199489	0					
ANR	199503	UnaryOperator	-		199489	0					
ANR	199504	PrimaryExpression	1		199489	1					
ANR	199505	CallExpression	getNode ( labelString )		199489	1					
ANR	199506	Callee	getNode		199489	0					
ANR	199507	Identifier	getNode		199489	0					
ANR	199508	ArgumentList	labelString		199489	1					
ANR	199509	Argument	labelString		199489	0					
ANR	199510	Identifier	labelString		199489	0					
ANR	199511	ThrowStatement	"throw ""Graph::setLabelString, labelString already exists"" ;"	260:2:5101:5158	199489	1	True				
ANR	199512	PrimaryExpression	"""Graph::setLabelString, labelString already exists"""		199489	0					
ANR	199513	ExpressionStatement		260:60:5159:5159	199489	2	True				
ANR	199514	IdentifierDeclStatement	char * str = strdup ( labelString ) ;	263:1:5188:5220	199489	3	True				
ANR	199515	IdentifierDecl	* str = strdup ( labelString )		199489	0					
ANR	199516	IdentifierDeclType	char *		199489	0					
ANR	199517	Identifier	str		199489	1					
ANR	199518	AssignmentExpression	* str = strdup ( labelString )		199489	2		=			
ANR	199519	Identifier	str		199489	0					
ANR	199520	CallExpression	strdup ( labelString )		199489	1					
ANR	199521	Callee	strdup		199489	0					
ANR	199522	Identifier	strdup		199489	0					
ANR	199523	ArgumentList	labelString		199489	1					
ANR	199524	Argument	labelString		199489	0					
ANR	199525	Identifier	labelString		199489	0					
ANR	199526	IfStatement	if ( NULL == str )		199489	4					
ANR	199527	Condition	NULL == str	264:5:5291:5299	199489	0	True				
ANR	199528	EqualityExpression	NULL == str		199489	0		==			
ANR	199529	Identifier	NULL		199489	0					
ANR	199530	Identifier	str		199489	1					
ANR	199531	ThrowStatement	"throw ""Graph::setLabelString, str is NULL"" ;"	265:2:5305:5347	199489	1	True				
ANR	199532	PrimaryExpression	"""Graph::setLabelString, str is NULL"""		199489	0					
ANR	199533	ExpressionStatement	"nodeToLabelString . putElem ( str , node )"	268:1:5375:5410	199489	5	True				
ANR	199534	CallExpression	"nodeToLabelString . putElem ( str , node )"		199489	0					
ANR	199535	Callee	nodeToLabelString . putElem		199489	0					
ANR	199536	MemberAccess	nodeToLabelString . putElem		199489	0					
ANR	199537	Identifier	nodeToLabelString		199489	0					
ANR	199538	Identifier	putElem		199489	1					
ANR	199539	ArgumentList	str		199489	1					
ANR	199540	Argument	str		199489	0					
ANR	199541	Identifier	str		199489	0					
ANR	199542	Argument	node		199489	1					
ANR	199543	Identifier	node		199489	0					
ANR	199544	ExpressionStatement	"labelStringToNode . add ( str , node )"	269:1:5413:5444	199489	6	True				
ANR	199545	CallExpression	"labelStringToNode . add ( str , node )"		199489	0					
ANR	199546	Callee	labelStringToNode . add		199489	0					
ANR	199547	MemberAccess	labelStringToNode . add		199489	0					
ANR	199548	Identifier	labelStringToNode		199489	0					
ANR	199549	Identifier	add		199489	1					
ANR	199550	ArgumentList	str		199489	1					
ANR	199551	Argument	str		199489	0					
ANR	199552	Identifier	str		199489	0					
ANR	199553	Argument	node		199489	1					
ANR	199554	Identifier	node		199489	0					
ANR	199555	ReturnType	void		199489	1					
ANR	199556	Identifier	Graph :: setLabelString		199489	2					
ANR	199557	ParameterList	"int node , const char * labelString"		199489	3					
ANR	199558	Parameter	int node	252:27:4899:4906	199489	0	True				
ANR	199559	ParameterType	int		199489	0					
ANR	199560	Identifier	node		199489	1					
ANR	199561	Parameter	const char * labelString	252:37:4909:4931	199489	1	True				
ANR	199562	ParameterType	const char *		199489	0					
ANR	199563	Identifier	labelString		199489	1					
ANR	199564	CFGEntryNode	ENTRY		199489		True				
ANR	199565	CFGExitNode	EXIT		199489		True				
ANR	199566	CFGExceptionNode	EXCEPTION		199489		True				
ANR	199567	CFGExceptionNode	EXCEPTION		199489		True				
ANR	199568	CFGExceptionNode	EXCEPTION		199489		True				
ANR	199569	CFGExceptionNode	EXCEPTION		199489		True				
ANR	199570	CFGExceptionNode	EXCEPTION		199489		True				
ANR	199571	Symbol	str		199489						
ANR	199572	Symbol	node		199489						
ANR	199573	Symbol	NULL		199489						
ANR	199574	Symbol	labelString		199489						
ANR	199575	Symbol	getNode		199489						
ANR	199576	Symbol	strdup		199489						
ANR	199577	Symbol	nodeToLabelString		199489						
ANR	199578	Symbol	labelStringToNode		199489						
ANR	199579	Function	Graph :: setLabelInt	290:0:5896:6245							
ANR	199580	FunctionDef	"Graph :: setLabelInt (int node , int labelInt)"		199579	0					
ANR	199581	CompoundStatement		291:0:5944:6245	199579	0					
ANR	199582	IfStatement	if ( labelInt < 0 )		199579	0					
ANR	199583	Condition	labelInt < 0	293:5:5980:5989	199579	0	True				
ANR	199584	RelationalExpression	labelInt < 0		199579	0		<			
ANR	199585	Identifier	labelInt		199579	0					
ANR	199586	PrimaryExpression	0		199579	1					
ANR	199587	ThrowStatement	"throw ""Graph::setLabelInt, labelInt must be at least 0"" ;"	294:2:5995:6050	199579	1	True				
ANR	199588	PrimaryExpression	"""Graph::setLabelInt, labelInt must be at least 0"""		199579	0					
ANR	199589	IfStatement	if ( - 1 != getNode ( labelInt ) )		199579	1					
ANR	199590	Condition	- 1 != getNode ( labelInt )	297:5:6084:6106	199579	0	True				
ANR	199591	EqualityExpression	- 1 != getNode ( labelInt )		199579	0		!=			
ANR	199592	UnaryOperationExpression	- 1		199579	0					
ANR	199593	UnaryOperator	-		199579	0					
ANR	199594	PrimaryExpression	1		199579	1					
ANR	199595	CallExpression	getNode ( labelInt )		199579	1					
ANR	199596	Callee	getNode		199579	0					
ANR	199597	Identifier	getNode		199579	0					
ANR	199598	ArgumentList	labelInt		199579	1					
ANR	199599	Argument	labelInt		199579	0					
ANR	199600	Identifier	labelInt		199579	0					
ANR	199601	ThrowStatement	"throw ""Graph::setLabelInt, labelInt already exists"" ;"	298:2:6112:6163	199579	1	True				
ANR	199602	PrimaryExpression	"""Graph::setLabelInt, labelInt already exists"""		199579	0					
ANR	199603	ExpressionStatement	"nodeToLabelInt . putElem ( labelInt , node )"	300:1:6167:6204	199579	2	True				
ANR	199604	CallExpression	"nodeToLabelInt . putElem ( labelInt , node )"		199579	0					
ANR	199605	Callee	nodeToLabelInt . putElem		199579	0					
ANR	199606	MemberAccess	nodeToLabelInt . putElem		199579	0					
ANR	199607	Identifier	nodeToLabelInt		199579	0					
ANR	199608	Identifier	putElem		199579	1					
ANR	199609	ArgumentList	labelInt		199579	1					
ANR	199610	Argument	labelInt		199579	0					
ANR	199611	Identifier	labelInt		199579	0					
ANR	199612	Argument	node		199579	1					
ANR	199613	Identifier	node		199579	0					
ANR	199614	ExpressionStatement	"labelIntToNode . insert ( labelInt , node )"	301:1:6207:6243	199579	3	True				
ANR	199615	CallExpression	"labelIntToNode . insert ( labelInt , node )"		199579	0					
ANR	199616	Callee	labelIntToNode . insert		199579	0					
ANR	199617	MemberAccess	labelIntToNode . insert		199579	0					
ANR	199618	Identifier	labelIntToNode		199579	0					
ANR	199619	Identifier	insert		199579	1					
ANR	199620	ArgumentList	labelInt		199579	1					
ANR	199621	Argument	labelInt		199579	0					
ANR	199622	Identifier	labelInt		199579	0					
ANR	199623	Argument	node		199579	1					
ANR	199624	Identifier	node		199579	0					
ANR	199625	ReturnType	void		199579	1					
ANR	199626	Identifier	Graph :: setLabelInt		199579	2					
ANR	199627	ParameterList	"int node , int labelInt"		199579	3					
ANR	199628	Parameter	int node	290:24:5920:5927	199579	0	True				
ANR	199629	ParameterType	int		199579	0					
ANR	199630	Identifier	node		199579	1					
ANR	199631	Parameter	int labelInt	290:34:5930:5941	199579	1	True				
ANR	199632	ParameterType	int		199579	0					
ANR	199633	Identifier	labelInt		199579	1					
ANR	199634	CFGEntryNode	ENTRY		199579		True				
ANR	199635	CFGExitNode	EXIT		199579		True				
ANR	199636	CFGExceptionNode	EXCEPTION		199579		True				
ANR	199637	CFGExceptionNode	EXCEPTION		199579		True				
ANR	199638	CFGExceptionNode	EXCEPTION		199579		True				
ANR	199639	Symbol	node		199579						
ANR	199640	Symbol	labelIntToNode		199579						
ANR	199641	Symbol	getNode		199579						
ANR	199642	Symbol	nodeToLabelInt		199579						
ANR	199643	Symbol	labelInt		199579						
ANR	199644	Function	Graph :: getLabelString	321:0:6609:6702							
ANR	199645	FunctionDef	Graph :: getLabelString (int node)		199644	0					
ANR	199646	CompoundStatement		322:0:6659:6702	199644	0					
ANR	199647	ReturnStatement	return nodeToLabelString . getElem ( node ) ;	323:1:6662:6700	199644	0	True				
ANR	199648	CallExpression	nodeToLabelString . getElem ( node )		199644	0					
ANR	199649	Callee	nodeToLabelString . getElem		199644	0					
ANR	199650	MemberAccess	nodeToLabelString . getElem		199644	0					
ANR	199651	Identifier	nodeToLabelString		199644	0					
ANR	199652	Identifier	getElem		199644	1					
ANR	199653	ArgumentList	node		199644	1					
ANR	199654	Argument	node		199644	0					
ANR	199655	Identifier	node		199644	0					
ANR	199656	ReturnType	const char *		199644	1					
ANR	199657	Identifier	Graph :: getLabelString		199644	2					
ANR	199658	ParameterList	int node		199644	3					
ANR	199659	Parameter	int node	321:34:6643:6650	199644	0	True				
ANR	199660	ParameterType	int		199644	0					
ANR	199661	Identifier	node		199644	1					
ANR	199662	CFGEntryNode	ENTRY		199644		True				
ANR	199663	CFGExitNode	EXIT		199644		True				
ANR	199664	Symbol	node		199644						
ANR	199665	Symbol	nodeToLabelString . getElem		199644						
ANR	199666	Symbol	nodeToLabelString		199644						
ANR	199667	Function	Graph :: getLabelInt	342:0:6998:7077							
ANR	199668	FunctionDef	Graph :: getLabelInt (int node)		199667	0					
ANR	199669	CompoundStatement		343:0:7037:7077	199667	0					
ANR	199670	ReturnStatement	return nodeToLabelInt . getElem ( node ) ;	344:1:7040:7075	199667	0	True				
ANR	199671	CallExpression	nodeToLabelInt . getElem ( node )		199667	0					
ANR	199672	Callee	nodeToLabelInt . getElem		199667	0					
ANR	199673	MemberAccess	nodeToLabelInt . getElem		199667	0					
ANR	199674	Identifier	nodeToLabelInt		199667	0					
ANR	199675	Identifier	getElem		199667	1					
ANR	199676	ArgumentList	node		199667	1					
ANR	199677	Argument	node		199667	0					
ANR	199678	Identifier	node		199667	0					
ANR	199679	ReturnType	int		199667	1					
ANR	199680	Identifier	Graph :: getLabelInt		199667	2					
ANR	199681	ParameterList	int node		199667	3					
ANR	199682	Parameter	int node	342:23:7021:7028	199667	0	True				
ANR	199683	ParameterType	int		199667	0					
ANR	199684	Identifier	node		199667	1					
ANR	199685	CFGEntryNode	ENTRY		199667		True				
ANR	199686	CFGExitNode	EXIT		199667		True				
ANR	199687	Symbol	node		199667						
ANR	199688	Symbol	nodeToLabelInt		199667						
ANR	199689	Symbol	nodeToLabelInt . getElem		199667						
ANR	199690	Function	Graph :: getNode	363:0:7393:7490							
ANR	199691	FunctionDef	Graph :: getNode (const char * labelString)		199690	0					
ANR	199692	CompoundStatement		364:0:7443:7490	199690	0					
ANR	199693	ReturnStatement	return labelStringToNode . find ( labelString ) ;	365:1:7446:7488	199690	0	True				
ANR	199694	CallExpression	labelStringToNode . find ( labelString )		199690	0					
ANR	199695	Callee	labelStringToNode . find		199690	0					
ANR	199696	MemberAccess	labelStringToNode . find		199690	0					
ANR	199697	Identifier	labelStringToNode		199690	0					
ANR	199698	Identifier	find		199690	1					
ANR	199699	ArgumentList	labelString		199690	1					
ANR	199700	Argument	labelString		199690	0					
ANR	199701	Identifier	labelString		199690	0					
ANR	199702	ReturnType	int		199690	1					
ANR	199703	Identifier	Graph :: getNode		199690	2					
ANR	199704	ParameterList	const char * labelString		199690	3					
ANR	199705	Parameter	const char * labelString	363:19:7412:7434	199690	0	True				
ANR	199706	ParameterType	const char *		199690	0					
ANR	199707	Identifier	labelString		199690	1					
ANR	199708	CFGEntryNode	ENTRY		199690		True				
ANR	199709	CFGExitNode	EXIT		199690		True				
ANR	199710	Symbol	labelString		199690						
ANR	199711	Symbol	labelStringToNode . find		199690						
ANR	199712	Symbol	labelStringToNode		199690						
ANR	199713	Function	Graph :: getNode	384:0:7778:7946							
ANR	199714	FunctionDef	Graph :: getNode (int labelInt)		199713	0					
ANR	199715	CompoundStatement		385:0:7817:7946	199713	0					
ANR	199716	IdentifierDeclStatement	unsigned long val ;	386:1:7820:7837	199713	0	True				
ANR	199717	IdentifierDecl	val		199713	0					
ANR	199718	IdentifierDeclType	unsigned long		199713	0					
ANR	199719	Identifier	val		199713	1					
ANR	199720	IfStatement	if ( ! labelIntToNode . exists ( labelInt ) )		199713	1					
ANR	199721	Condition	! labelIntToNode . exists ( labelInt )	388:5:7845:7877	199713	0	True				
ANR	199722	UnaryOperationExpression	! labelIntToNode . exists ( labelInt )		199713	0					
ANR	199723	UnaryOperator	!		199713	0					
ANR	199724	CallExpression	labelIntToNode . exists ( labelInt )		199713	1					
ANR	199725	Callee	labelIntToNode . exists		199713	0					
ANR	199726	MemberAccess	labelIntToNode . exists		199713	0					
ANR	199727	Identifier	labelIntToNode		199713	0					
ANR	199728	Identifier	exists		199713	1					
ANR	199729	ArgumentList	labelInt		199713	1					
ANR	199730	Argument	labelInt		199713	0					
ANR	199731	Identifier	labelInt		199713	0					
ANR	199732	ReturnStatement	return - 1 ;	389:2:7883:7892	199713	1	True				
ANR	199733	UnaryOperationExpression	- 1		199713	0					
ANR	199734	UnaryOperator	-		199713	0					
ANR	199735	PrimaryExpression	1		199713	1					
ANR	199736	ExpressionStatement	val = labelIntToNode . findVal ( labelInt )	390:1:7895:7931	199713	2	True				
ANR	199737	AssignmentExpression	val = labelIntToNode . findVal ( labelInt )		199713	0		=			
ANR	199738	Identifier	val		199713	0					
ANR	199739	CallExpression	labelIntToNode . findVal ( labelInt )		199713	1					
ANR	199740	Callee	labelIntToNode . findVal		199713	0					
ANR	199741	MemberAccess	labelIntToNode . findVal		199713	0					
ANR	199742	Identifier	labelIntToNode		199713	0					
ANR	199743	Identifier	findVal		199713	1					
ANR	199744	ArgumentList	labelInt		199713	1					
ANR	199745	Argument	labelInt		199713	0					
ANR	199746	Identifier	labelInt		199713	0					
ANR	199747	ReturnStatement	return val ;	391:1:7934:7944	199713	3	True				
ANR	199748	Identifier	val		199713	0					
ANR	199749	ReturnType	int		199713	1					
ANR	199750	Identifier	Graph :: getNode		199713	2					
ANR	199751	ParameterList	int labelInt		199713	3					
ANR	199752	Parameter	int labelInt	384:19:7797:7808	199713	0	True				
ANR	199753	ParameterType	int		199713	0					
ANR	199754	Identifier	labelInt		199713	1					
ANR	199755	CFGEntryNode	ENTRY		199713		True				
ANR	199756	CFGExitNode	EXIT		199713		True				
ANR	199757	Symbol	val		199713						
ANR	199758	Symbol	labelIntToNode		199713						
ANR	199759	Symbol	labelIntToNode . findVal		199713						
ANR	199760	Symbol	labelIntToNode . exists		199713						
ANR	199761	Symbol	labelInt		199713						
ANR	199762	Function	Graph :: isDag	410:0:8177:8712							
ANR	199763	FunctionDef	Graph :: isDag ()		199762	0					
ANR	199764	CompoundStatement		411:0:8207:8712	199762	0					
ANR	199765	IdentifierDeclStatement	int i ;	412:1:8210:8215	199762	0	True				
ANR	199766	IdentifierDecl	i		199762	0					
ANR	199767	IdentifierDeclType	int		199762	0					
ANR	199768	Identifier	i		199762	1					
ANR	199769	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	414:1:8219:8247	199762	1	True				
ANR	199770	IdentifierDecl	numNodes = getNumNodes ( )		199762	0					
ANR	199771	IdentifierDeclType	int		199762	0					
ANR	199772	Identifier	numNodes		199762	1					
ANR	199773	AssignmentExpression	numNodes = getNumNodes ( )		199762	2		=			
ANR	199774	Identifier	numNodes		199762	0					
ANR	199775	CallExpression	getNumNodes ( )		199762	1					
ANR	199776	Callee	getNumNodes		199762	0					
ANR	199777	Identifier	getNumNodes		199762	0					
ANR	199778	ArgumentList			199762	1					
ANR	199779	IdentifierDeclStatement	int * colorTable = new int [ numNodes ] ;	417:1:8274:8310	199762	2	True				
ANR	199780	IdentifierDecl	* colorTable = new int [ numNodes ]		199762	0					
ANR	199781	IdentifierDeclType	int *		199762	0					
ANR	199782	Identifier	colorTable		199762	1					
ANR	199783	AssignmentExpression	* colorTable = new int [ numNodes ]		199762	2		=			
ANR	199784	Identifier	numNodes		199762	0					
ANR	199785	Identifier	numNodes		199762	1					
ANR	199786	IfStatement	if ( NULL == colorTable )		199762	3					
ANR	199787	Condition	NULL == colorTable	418:5:8317:8332	199762	0	True				
ANR	199788	EqualityExpression	NULL == colorTable		199762	0		==			
ANR	199789	Identifier	NULL		199762	0					
ANR	199790	Identifier	colorTable		199762	1					
ANR	199791	ThrowStatement	"throw ""Graph::isDag, colorTable is NULL"" ;"	419:2:8338:8378	199762	1	True				
ANR	199792	PrimaryExpression	"""Graph::isDag, colorTable is NULL"""		199762	0					
ANR	199793	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		199762	4					
ANR	199794	ForInit	i = 0 ;	420:6:8386:8389	199762	0	True				
ANR	199795	AssignmentExpression	i = 0		199762	0		=			
ANR	199796	Identifier	i		199762	0					
ANR	199797	PrimaryExpression	0		199762	1					
ANR	199798	Condition	i < numNodes	420:11:8391:8400	199762	1	True				
ANR	199799	RelationalExpression	i < numNodes		199762	0		<			
ANR	199800	Identifier	i		199762	0					
ANR	199801	Identifier	numNodes		199762	1					
ANR	199802	PostIncDecOperationExpression	i ++	420:23:8403:8405	199762	2	True				
ANR	199803	Identifier	i		199762	0					
ANR	199804	IncDec	++		199762	1					
ANR	199805	ExpressionStatement	colorTable [ i ] = 0	421:2:8411:8428	199762	3	True				
ANR	199806	AssignmentExpression	colorTable [ i ] = 0		199762	0		=			
ANR	199807	ArrayIndexing	colorTable [ i ]		199762	0					
ANR	199808	Identifier	colorTable		199762	0					
ANR	199809	Identifier	i		199762	1					
ANR	199810	PrimaryExpression	0		199762	1					
ANR	199811	IdentifierDeclStatement	bool hasBackEdge = false ;	424:1:8487:8511	199762	5	True				
ANR	199812	IdentifierDecl	hasBackEdge = false		199762	0					
ANR	199813	IdentifierDeclType	bool		199762	0					
ANR	199814	Identifier	hasBackEdge		199762	1					
ANR	199815	AssignmentExpression	hasBackEdge = false		199762	2		=			
ANR	199816	Identifier	false		199762	0					
ANR	199817	Identifier	false		199762	1					
ANR	199818	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		199762	6					
ANR	199819	ForInit	i = 0 ;	425:6:8519:8522	199762	0	True				
ANR	199820	AssignmentExpression	i = 0		199762	0		=			
ANR	199821	Identifier	i		199762	0					
ANR	199822	PrimaryExpression	0		199762	1					
ANR	199823	Condition	i < numNodes	425:11:8524:8533	199762	1	True				
ANR	199824	RelationalExpression	i < numNodes		199762	0		<			
ANR	199825	Identifier	i		199762	0					
ANR	199826	Identifier	numNodes		199762	1					
ANR	199827	PostIncDecOperationExpression	i ++	425:23:8536:8538	199762	2	True				
ANR	199828	Identifier	i		199762	0					
ANR	199829	IncDec	++		199762	1					
ANR	199830	IfStatement	if ( 0 == colorTable [ i ] )		199762	3					
ANR	199831	Condition	0 == colorTable [ i ]	426:6:8548:8565	199762	0	True				
ANR	199832	EqualityExpression	0 == colorTable [ i ]		199762	0		==			
ANR	199833	PrimaryExpression	0		199762	0					
ANR	199834	ArrayIndexing	colorTable [ i ]		199762	1					
ANR	199835	Identifier	colorTable		199762	0					
ANR	199836	Identifier	i		199762	1					
ANR	199837	ExpressionStatement	"DFS_visit ( i , colorTable , hasBackEdge )"	427:3:8587:8622	199762	1	True				
ANR	199838	CallExpression	"DFS_visit ( i , colorTable , hasBackEdge )"		199762	0					
ANR	199839	Callee	DFS_visit		199762	0					
ANR	199840	Identifier	DFS_visit		199762	0					
ANR	199841	ArgumentList	i		199762	1					
ANR	199842	Argument	i		199762	0					
ANR	199843	Identifier	i		199762	0					
ANR	199844	Argument	colorTable		199762	1					
ANR	199845	Identifier	colorTable		199762	0					
ANR	199846	Argument	hasBackEdge		199762	2					
ANR	199847	Identifier	hasBackEdge		199762	0					
ANR	199848	Statement	delete	429:1:8667:8672	199762	7	True				
ANR	199849	Statement	[	429:7:8673:8673	199762	8	True				
ANR	199850	Statement	]	429:8:8674:8674	199762	9	True				
ANR	199851	ExpressionStatement	colorTable	429:10:8676:8686	199762	10	True				
ANR	199852	Identifier	colorTable		199762	0					
ANR	199853	ReturnStatement	return ! hasBackEdge ;	431:1:8690:8710	199762	11	True				
ANR	199854	UnaryOperationExpression	! hasBackEdge		199762	0					
ANR	199855	UnaryOperator	!		199762	0					
ANR	199856	Identifier	hasBackEdge		199762	1					
ANR	199857	ReturnType	bool		199762	1					
ANR	199858	Identifier	Graph :: isDag		199762	2					
ANR	199859	ParameterList			199762	3					
ANR	199860	CFGEntryNode	ENTRY		199762		True				
ANR	199861	CFGExitNode	EXIT		199762		True				
ANR	199862	CFGExceptionNode	EXCEPTION		199762		True				
ANR	199863	Symbol	colorTable		199762						
ANR	199864	Symbol	getNumNodes		199762						
ANR	199865	Symbol	numNodes		199762						
ANR	199866	Symbol	NULL		199762						
ANR	199867	Symbol	* i		199762						
ANR	199868	Symbol	hasBackEdge		199762						
ANR	199869	Symbol	* colorTable		199762						
ANR	199870	Symbol	false		199762						
ANR	199871	Symbol	i		199762						
ANR	199872	Function	Graph :: DFS_visit	450:0:9074:9604							
ANR	199873	FunctionDef	"Graph :: DFS_visit (int u , int * colorTable , bool & hasBackEdge)"		199872	0					
ANR	199874	CompoundStatement		451:0:9145:9604	199872	0					
ANR	199875	IfStatement	if ( NULL == colorTable )		199872	0					
ANR	199876	Condition	NULL == colorTable	452:5:9152:9167	199872	0	True				
ANR	199877	EqualityExpression	NULL == colorTable		199872	0		==			
ANR	199878	Identifier	NULL		199872	0					
ANR	199879	Identifier	colorTable		199872	1					
ANR	199880	ThrowStatement	"throw ""Graph::DFS_visit, colorTable is NULL"" ;"	453:2:9173:9217	199872	1	True				
ANR	199881	PrimaryExpression	"""Graph::DFS_visit, colorTable is NULL"""		199872	0					
ANR	199882	ExpressionStatement	colorTable [ u ] = 1	455:1:9221:9238	199872	1	True				
ANR	199883	AssignmentExpression	colorTable [ u ] = 1		199872	0		=			
ANR	199884	ArrayIndexing	colorTable [ u ]		199872	0					
ANR	199885	Identifier	colorTable		199872	0					
ANR	199886	Identifier	u		199872	1					
ANR	199887	PrimaryExpression	1		199872	1					
ANR	199888	IdentifierDeclStatement	int numArcs = getNumArcs ( u ) ;	456:1:9259:9286	199872	2	True				
ANR	199889	IdentifierDecl	numArcs = getNumArcs ( u )		199872	0					
ANR	199890	IdentifierDeclType	int		199872	0					
ANR	199891	Identifier	numArcs		199872	1					
ANR	199892	AssignmentExpression	numArcs = getNumArcs ( u )		199872	2		=			
ANR	199893	Identifier	numArcs		199872	0					
ANR	199894	CallExpression	getNumArcs ( u )		199872	1					
ANR	199895	Callee	getNumArcs		199872	0					
ANR	199896	Identifier	getNumArcs		199872	0					
ANR	199897	ArgumentList	u		199872	1					
ANR	199898	Argument	u		199872	0					
ANR	199899	Identifier	u		199872	0					
ANR	199900	ForStatement	for ( int i = 0 ; i < numArcs ; i ++ )		199872	3					
ANR	199901	ForInit	int i = 0 ;	457:6:9294:9301	199872	0	True				
ANR	199902	IdentifierDeclStatement	int i = 0 ;		199872	0					
ANR	199903	IdentifierDecl	i = 0		199872	0					
ANR	199904	IdentifierDeclType	int		199872	0					
ANR	199905	Identifier	i		199872	1					
ANR	199906	AssignmentExpression	i = 0		199872	2		=			
ANR	199907	Identifier	i		199872	0					
ANR	199908	PrimaryExpression	0		199872	1					
ANR	199909	Condition	i < numArcs	457:15:9303:9311	199872	1	True				
ANR	199910	RelationalExpression	i < numArcs		199872	0		<			
ANR	199911	Identifier	i		199872	0					
ANR	199912	Identifier	numArcs		199872	1					
ANR	199913	PostIncDecOperationExpression	i ++	457:26:9314:9316	199872	2	True				
ANR	199914	Identifier	i		199872	0					
ANR	199915	IncDec	++		199872	1					
ANR	199916	CompoundStatement		8:2:178:201	199872	3					
ANR	199917	IdentifierDeclStatement	"int child = getArc ( u , i ) ;"	458:2:9324:9347	199872	0	True				
ANR	199918	IdentifierDecl	"child = getArc ( u , i )"		199872	0					
ANR	199919	IdentifierDeclType	int		199872	0					
ANR	199920	Identifier	child		199872	1					
ANR	199921	AssignmentExpression	"child = getArc ( u , i )"		199872	2		=			
ANR	199922	Identifier	child		199872	0					
ANR	199923	CallExpression	"getArc ( u , i )"		199872	1					
ANR	199924	Callee	getArc		199872	0					
ANR	199925	Identifier	getArc		199872	0					
ANR	199926	ArgumentList	u		199872	1					
ANR	199927	Argument	u		199872	0					
ANR	199928	Identifier	u		199872	0					
ANR	199929	Argument	i		199872	1					
ANR	199930	Identifier	i		199872	0					
ANR	199931	IfStatement	if ( 1 == colorTable [ child ] )		199872	1					
ANR	199932	Condition	1 == colorTable [ child ]	459:6:9355:9376	199872	0	True				
ANR	199933	EqualityExpression	1 == colorTable [ child ]		199872	0		==			
ANR	199934	PrimaryExpression	1		199872	0					
ANR	199935	ArrayIndexing	colorTable [ child ]		199872	1					
ANR	199936	Identifier	colorTable		199872	0					
ANR	199937	Identifier	child		199872	1					
ANR	199938	ExpressionStatement	hasBackEdge = true	460:3:9445:9463	199872	1	True				
ANR	199939	AssignmentExpression	hasBackEdge = true		199872	0		=			
ANR	199940	Identifier	hasBackEdge		199872	0					
ANR	199941	Identifier	true		199872	1					
ANR	199942	IfStatement	if ( 0 == colorTable [ child ] )		199872	2					
ANR	199943	Condition	0 == colorTable [ child ]	461:6:9471:9492	199872	0	True				
ANR	199944	EqualityExpression	0 == colorTable [ child ]		199872	0		==			
ANR	199945	PrimaryExpression	0		199872	0					
ANR	199946	ArrayIndexing	colorTable [ child ]		199872	1					
ANR	199947	Identifier	colorTable		199872	0					
ANR	199948	Identifier	child		199872	1					
ANR	199949	ExpressionStatement	"DFS_visit ( child , colorTable , hasBackEdge )"	462:3:9520:9559	199872	1	True				
ANR	199950	CallExpression	"DFS_visit ( child , colorTable , hasBackEdge )"		199872	0					
ANR	199951	Callee	DFS_visit		199872	0					
ANR	199952	Identifier	DFS_visit		199872	0					
ANR	199953	ArgumentList	child		199872	1					
ANR	199954	Argument	child		199872	0					
ANR	199955	Identifier	child		199872	0					
ANR	199956	Argument	colorTable		199872	1					
ANR	199957	Identifier	colorTable		199872	0					
ANR	199958	Argument	hasBackEdge		199872	2					
ANR	199959	Identifier	hasBackEdge		199872	0					
ANR	199960	ExpressionStatement		463:2:9563:9563	199872	4	True				
ANR	199961	ExpressionStatement	colorTable [ u ] = 2	464:1:9566:9583	199872	5	True				
ANR	199962	AssignmentExpression	colorTable [ u ] = 2		199872	0		=			
ANR	199963	ArrayIndexing	colorTable [ u ]		199872	0					
ANR	199964	Identifier	colorTable		199872	0					
ANR	199965	Identifier	u		199872	1					
ANR	199966	PrimaryExpression	2		199872	1					
ANR	199967	ReturnType	void		199872	1					
ANR	199968	Identifier	Graph :: DFS_visit		199872	2					
ANR	199969	ParameterList	"int u , int * colorTable , bool & hasBackEdge"		199872	3					
ANR	199970	Parameter	int u	450:22:9096:9100	199872	0	True				
ANR	199971	ParameterType	int		199872	0					
ANR	199972	Identifier	u		199872	1					
ANR	199973	Parameter	int * colorTable	450:29:9103:9117	199872	1	True				
ANR	199974	ParameterType	int *		199872	0					
ANR	199975	Identifier	colorTable		199872	1					
ANR	199976	Parameter	bool & hasBackEdge	450:46:9120:9136	199872	2	True				
ANR	199977	ParameterType	bool &		199872	0					
ANR	199978	Identifier	hasBackEdge		199872	1					
ANR	199979	CFGEntryNode	ENTRY		199872		True				
ANR	199980	CFGExitNode	EXIT		199872		True				
ANR	199981	CFGExceptionNode	EXCEPTION		199872		True				
ANR	199982	Symbol	* child		199872						
ANR	199983	Symbol	NULL		199872						
ANR	199984	Symbol	hasBackEdge		199872						
ANR	199985	Symbol	i		199872						
ANR	199986	Symbol	colorTable		199872						
ANR	199987	Symbol	getNumArcs		199872						
ANR	199988	Symbol	numArcs		199872						
ANR	199989	Symbol	getArc		199872						
ANR	199990	Symbol	u		199872						
ANR	199991	Symbol	* colorTable		199872						
ANR	199992	Symbol	true		199872						
ANR	199993	Symbol	* u		199872						
ANR	199994	Symbol	child		199872						
ANR	199995	Function	Graph :: saveAsDot	483:0:9890:10806							
ANR	199996	FunctionDef	Graph :: saveAsDot (FILE * stream)		199995	0					
ANR	199997	CompoundStatement		484:0:9932:10806	199995	0					
ANR	199998	IfStatement	if ( NULL == stream )		199995	0					
ANR	199999	Condition	NULL == stream	485:5:9939:9950	199995	0	True				
ANR	200000	EqualityExpression	NULL == stream		199995	0		==			
ANR	200001	Identifier	NULL		199995	0					
ANR	200002	Identifier	stream		199995	1					
ANR	200003	ThrowStatement	"throw ""Graph::saveAsDot, stream is NULL"" ;"	486:2:9956:9996	199995	1	True				
ANR	200004	PrimaryExpression	"""Graph::saveAsDot, stream is NULL"""		199995	0					
ANR	200005	ExpressionStatement	"fprintf ( stream , ""digraph G {\\n"" )"	488:1:10000:10033	199995	1	True				
ANR	200006	CallExpression	"fprintf ( stream , ""digraph G {\\n"" )"		199995	0					
ANR	200007	Callee	fprintf		199995	0					
ANR	200008	Identifier	fprintf		199995	0					
ANR	200009	ArgumentList	stream		199995	1					
ANR	200010	Argument	stream		199995	0					
ANR	200011	Identifier	stream		199995	0					
ANR	200012	Argument	"""digraph G {\\n"""		199995	1					
ANR	200013	PrimaryExpression	"""digraph G {\\n"""		199995	0					
ANR	200014	ExpressionStatement	"fprintf ( stream , ""rankdir=BT;\\n"" )"	489:1:10036:10069	199995	2	True				
ANR	200015	CallExpression	"fprintf ( stream , ""rankdir=BT;\\n"" )"		199995	0					
ANR	200016	Callee	fprintf		199995	0					
ANR	200017	Identifier	fprintf		199995	0					
ANR	200018	ArgumentList	stream		199995	1					
ANR	200019	Argument	stream		199995	0					
ANR	200020	Identifier	stream		199995	0					
ANR	200021	Argument	"""rankdir=BT;\\n"""		199995	1					
ANR	200022	PrimaryExpression	"""rankdir=BT;\\n"""		199995	0					
ANR	200023	ExpressionStatement	"fprintf ( stream , ""size=\\""7.5,10\\"";\\n"" )"	490:1:10072:10110	199995	3	True				
ANR	200024	CallExpression	"fprintf ( stream , ""size=\\""7.5,10\\"";\\n"" )"		199995	0					
ANR	200025	Callee	fprintf		199995	0					
ANR	200026	Identifier	fprintf		199995	0					
ANR	200027	ArgumentList	stream		199995	1					
ANR	200028	Argument	stream		199995	0					
ANR	200029	Identifier	stream		199995	0					
ANR	200030	Argument	"""size=\\""7.5,10\\"";\\n"""		199995	1					
ANR	200031	PrimaryExpression	"""size=\\""7.5,10\\"";\\n"""		199995	0					
ANR	200032	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	493:1:10138:10166	199995	4	True				
ANR	200033	IdentifierDecl	numNodes = getNumNodes ( )		199995	0					
ANR	200034	IdentifierDeclType	int		199995	0					
ANR	200035	Identifier	numNodes		199995	1					
ANR	200036	AssignmentExpression	numNodes = getNumNodes ( )		199995	2		=			
ANR	200037	Identifier	numNodes		199995	0					
ANR	200038	CallExpression	getNumNodes ( )		199995	1					
ANR	200039	Callee	getNumNodes		199995	0					
ANR	200040	Identifier	getNumNodes		199995	0					
ANR	200041	ArgumentList			199995	1					
ANR	200042	ForStatement	for ( int i = 0 ; i < numNodes ; i ++ )		199995	5					
ANR	200043	ForInit	int i = 0 ;	494:6:10174:10181	199995	0	True				
ANR	200044	IdentifierDeclStatement	int i = 0 ;		199995	0					
ANR	200045	IdentifierDecl	i = 0		199995	0					
ANR	200046	IdentifierDeclType	int		199995	0					
ANR	200047	Identifier	i		199995	1					
ANR	200048	AssignmentExpression	i = 0		199995	2		=			
ANR	200049	Identifier	i		199995	0					
ANR	200050	PrimaryExpression	0		199995	1					
ANR	200051	Condition	i < numNodes	494:15:10183:10192	199995	1	True				
ANR	200052	RelationalExpression	i < numNodes		199995	0		<			
ANR	200053	Identifier	i		199995	0					
ANR	200054	Identifier	numNodes		199995	1					
ANR	200055	PostIncDecOperationExpression	i ++	494:27:10195:10197	199995	2	True				
ANR	200056	Identifier	i		199995	0					
ANR	200057	IncDec	++		199995	1					
ANR	200058	CompoundStatement		13:2:308:335	199995	3					
ANR	200059	ExpressionStatement	"fprintf ( stream , ""%d -> { "" , i )"	495:2:10205:10237	199995	0	True				
ANR	200060	CallExpression	"fprintf ( stream , ""%d -> { "" , i )"		199995	0					
ANR	200061	Callee	fprintf		199995	0					
ANR	200062	Identifier	fprintf		199995	0					
ANR	200063	ArgumentList	stream		199995	1					
ANR	200064	Argument	stream		199995	0					
ANR	200065	Identifier	stream		199995	0					
ANR	200066	Argument	"""%d -> { """		199995	1					
ANR	200067	PrimaryExpression	"""%d -> { """		199995	0					
ANR	200068	Argument	i		199995	2					
ANR	200069	Identifier	i		199995	0					
ANR	200070	IdentifierDeclStatement	int numArcs = getNumArcs ( i ) ;	496:2:10241:10268	199995	1	True				
ANR	200071	IdentifierDecl	numArcs = getNumArcs ( i )		199995	0					
ANR	200072	IdentifierDeclType	int		199995	0					
ANR	200073	Identifier	numArcs		199995	1					
ANR	200074	AssignmentExpression	numArcs = getNumArcs ( i )		199995	2		=			
ANR	200075	Identifier	numArcs		199995	0					
ANR	200076	CallExpression	getNumArcs ( i )		199995	1					
ANR	200077	Callee	getNumArcs		199995	0					
ANR	200078	Identifier	getNumArcs		199995	0					
ANR	200079	ArgumentList	i		199995	1					
ANR	200080	Argument	i		199995	0					
ANR	200081	Identifier	i		199995	0					
ANR	200082	ForStatement	for ( int j = 0 ; j < numArcs ; j ++ )		199995	2					
ANR	200083	ForInit	int j = 0 ;	497:7:10277:10284	199995	0	True				
ANR	200084	IdentifierDeclStatement	int j = 0 ;		199995	0					
ANR	200085	IdentifierDecl	j = 0		199995	0					
ANR	200086	IdentifierDeclType	int		199995	0					
ANR	200087	Identifier	j		199995	1					
ANR	200088	AssignmentExpression	j = 0		199995	2		=			
ANR	200089	Identifier	j		199995	0					
ANR	200090	PrimaryExpression	0		199995	1					
ANR	200091	Condition	j < numArcs	497:16:10286:10294	199995	1	True				
ANR	200092	RelationalExpression	j < numArcs		199995	0		<			
ANR	200093	Identifier	j		199995	0					
ANR	200094	Identifier	numArcs		199995	1					
ANR	200095	PostIncDecOperationExpression	j ++	497:27:10297:10299	199995	2	True				
ANR	200096	Identifier	j		199995	0					
ANR	200097	IncDec	++		199995	1					
ANR	200098	ExpressionStatement	"fprintf ( stream , ""%d ; "" , getArc ( i , j ) )"	498:3:10306:10345	199995	3	True				
ANR	200099	CallExpression	"fprintf ( stream , ""%d ; "" , getArc ( i , j ) )"		199995	0					
ANR	200100	Callee	fprintf		199995	0					
ANR	200101	Identifier	fprintf		199995	0					
ANR	200102	ArgumentList	stream		199995	1					
ANR	200103	Argument	stream		199995	0					
ANR	200104	Identifier	stream		199995	0					
ANR	200105	Argument	"""%d ; """		199995	1					
ANR	200106	PrimaryExpression	"""%d ; """		199995	0					
ANR	200107	Argument	"getArc ( i , j )"		199995	2					
ANR	200108	CallExpression	"getArc ( i , j )"		199995	0					
ANR	200109	Callee	getArc		199995	0					
ANR	200110	Identifier	getArc		199995	0					
ANR	200111	ArgumentList	i		199995	1					
ANR	200112	Argument	i		199995	0					
ANR	200113	Identifier	i		199995	0					
ANR	200114	Argument	j		199995	1					
ANR	200115	Identifier	j		199995	0					
ANR	200116	ExpressionStatement	"fprintf ( stream , ""}; \\n"" )"	499:2:10349:10375	199995	3	True				
ANR	200117	CallExpression	"fprintf ( stream , ""}; \\n"" )"		199995	0					
ANR	200118	Callee	fprintf		199995	0					
ANR	200119	Identifier	fprintf		199995	0					
ANR	200120	ArgumentList	stream		199995	1					
ANR	200121	Argument	stream		199995	0					
ANR	200122	Identifier	stream		199995	0					
ANR	200123	Argument	"""}; \\n"""		199995	1					
ANR	200124	PrimaryExpression	"""}; \\n"""		199995	0					
ANR	200125	ExpressionStatement		500:2:10379:10379	199995	6	True				
ANR	200126	ForStatement	for ( int i = 0 ; i < numNodes ; i ++ )		199995	7					
ANR	200127	ForInit	int i = 0 ;	503:6:10413:10420	199995	0	True				
ANR	200128	IdentifierDeclStatement	int i = 0 ;		199995	0					
ANR	200129	IdentifierDecl	i = 0		199995	0					
ANR	200130	IdentifierDeclType	int		199995	0					
ANR	200131	Identifier	i		199995	1					
ANR	200132	AssignmentExpression	i = 0		199995	2		=			
ANR	200133	Identifier	i		199995	0					
ANR	200134	PrimaryExpression	0		199995	1					
ANR	200135	Condition	i < numNodes	503:15:10422:10431	199995	1	True				
ANR	200136	RelationalExpression	i < numNodes		199995	0		<			
ANR	200137	Identifier	i		199995	0					
ANR	200138	Identifier	numNodes		199995	1					
ANR	200139	PostIncDecOperationExpression	i ++	503:27:10434:10436	199995	2	True				
ANR	200140	Identifier	i		199995	0					
ANR	200141	IncDec	++		199995	1					
ANR	200142	CompoundStatement		22:2:544:587	199995	3					
ANR	200143	IdentifierDeclStatement	int labelInt = getLabelInt ( i ) ;	504:2:10444:10473	199995	0	True				
ANR	200144	IdentifierDecl	labelInt = getLabelInt ( i )		199995	0					
ANR	200145	IdentifierDeclType	int		199995	0					
ANR	200146	Identifier	labelInt		199995	1					
ANR	200147	AssignmentExpression	labelInt = getLabelInt ( i )		199995	2		=			
ANR	200148	Identifier	labelInt		199995	0					
ANR	200149	CallExpression	getLabelInt ( i )		199995	1					
ANR	200150	Callee	getLabelInt		199995	0					
ANR	200151	Identifier	getLabelInt		199995	0					
ANR	200152	ArgumentList	i		199995	1					
ANR	200153	Argument	i		199995	0					
ANR	200154	Identifier	i		199995	0					
ANR	200155	IdentifierDeclStatement	const char * labelString = getLabelString ( i ) ;	505:2:10477:10520	199995	1	True				
ANR	200156	IdentifierDecl	* labelString = getLabelString ( i )		199995	0					
ANR	200157	IdentifierDeclType	const char *		199995	0					
ANR	200158	Identifier	labelString		199995	1					
ANR	200159	AssignmentExpression	* labelString = getLabelString ( i )		199995	2		=			
ANR	200160	Identifier	labelString		199995	0					
ANR	200161	CallExpression	getLabelString ( i )		199995	1					
ANR	200162	Callee	getLabelString		199995	0					
ANR	200163	Identifier	getLabelString		199995	0					
ANR	200164	ArgumentList	i		199995	1					
ANR	200165	Argument	i		199995	0					
ANR	200166	Identifier	i		199995	0					
ANR	200167	IfStatement	if ( NULL != labelString )		199995	2					
ANR	200168	Condition	NULL != labelString	506:6:10528:10544	199995	0	True				
ANR	200169	EqualityExpression	NULL != labelString		199995	0		!=			
ANR	200170	Identifier	NULL		199995	0					
ANR	200171	Identifier	labelString		199995	1					
ANR	200172	CompoundStatement		23:26:615:615	199995	1					
ANR	200173	ExpressionStatement	"fprintf ( stream , ""%d [label=\\""%d\\\\n%s\\""];\\n"" , i , i , labelString )"	507:3:10553:10618	199995	0	True				
ANR	200174	CallExpression	"fprintf ( stream , ""%d [label=\\""%d\\\\n%s\\""];\\n"" , i , i , labelString )"		199995	0					
ANR	200175	Callee	fprintf		199995	0					
ANR	200176	Identifier	fprintf		199995	0					
ANR	200177	ArgumentList	stream		199995	1					
ANR	200178	Argument	stream		199995	0					
ANR	200179	Identifier	stream		199995	0					
ANR	200180	Argument	"""%d [label=\\""%d\\\\n%s\\""];\\n"""		199995	1					
ANR	200181	PrimaryExpression	"""%d [label=\\""%d\\\\n%s\\""];\\n"""		199995	0					
ANR	200182	Argument	i		199995	2					
ANR	200183	Identifier	i		199995	0					
ANR	200184	Argument	i		199995	3					
ANR	200185	Identifier	i		199995	0					
ANR	200186	Argument	labelString		199995	4					
ANR	200187	Identifier	labelString		199995	0					
ANR	200188	ElseStatement	else		199995	0					
ANR	200189	IfStatement	if ( - 1 != labelInt )		199995	0					
ANR	200190	Condition	- 1 != labelInt	509:6:10636:10647	199995	0	True				
ANR	200191	EqualityExpression	- 1 != labelInt		199995	0		!=			
ANR	200192	UnaryOperationExpression	- 1		199995	0					
ANR	200193	UnaryOperator	-		199995	0					
ANR	200194	PrimaryExpression	1		199995	1					
ANR	200195	Identifier	labelInt		199995	1					
ANR	200196	CompoundStatement		26:21:718:718	199995	1					
ANR	200197	ExpressionStatement	"fprintf ( stream , ""%d [label=\\""%d\\""];\\n"" , i , labelInt )"	510:3:10656:10710	199995	0	True				
ANR	200198	CallExpression	"fprintf ( stream , ""%d [label=\\""%d\\""];\\n"" , i , labelInt )"		199995	0					
ANR	200199	Callee	fprintf		199995	0					
ANR	200200	Identifier	fprintf		199995	0					
ANR	200201	ArgumentList	stream		199995	1					
ANR	200202	Argument	stream		199995	0					
ANR	200203	Identifier	stream		199995	0					
ANR	200204	Argument	"""%d [label=\\""%d\\""];\\n"""		199995	1					
ANR	200205	PrimaryExpression	"""%d [label=\\""%d\\""];\\n"""		199995	0					
ANR	200206	Argument	i		199995	2					
ANR	200207	Identifier	i		199995	0					
ANR	200208	Argument	labelInt		199995	3					
ANR	200209	Identifier	labelInt		199995	0					
ANR	200210	ExpressionStatement		511:3:10715:10715	199995	3	True				
ANR	200211	ExpressionStatement		513:2:10776:10776	199995	8	True				
ANR	200212	ExpressionStatement	"fprintf ( stream , ""}\\n"" )"	516:1:10781:10804	199995	9	True				
ANR	200213	CallExpression	"fprintf ( stream , ""}\\n"" )"		199995	0					
ANR	200214	Callee	fprintf		199995	0					
ANR	200215	Identifier	fprintf		199995	0					
ANR	200216	ArgumentList	stream		199995	1					
ANR	200217	Argument	stream		199995	0					
ANR	200218	Identifier	stream		199995	0					
ANR	200219	Argument	"""}\\n"""		199995	1					
ANR	200220	PrimaryExpression	"""}\\n"""		199995	0					
ANR	200221	ReturnType	void		199995	1					
ANR	200222	Identifier	Graph :: saveAsDot		199995	2					
ANR	200223	ParameterList	FILE * stream		199995	3					
ANR	200224	Parameter	FILE * stream	483:22:9912:9923	199995	0	True				
ANR	200225	ParameterType	FILE *		199995	0					
ANR	200226	Identifier	stream		199995	1					
ANR	200227	CFGEntryNode	ENTRY		199995		True				
ANR	200228	CFGExitNode	EXIT		199995		True				
ANR	200229	CFGExceptionNode	EXCEPTION		199995		True				
ANR	200230	Symbol	NULL		199995						
ANR	200231	Symbol	getLabelInt		199995						
ANR	200232	Symbol	getLabelString		199995						
ANR	200233	Symbol	i		199995						
ANR	200234	Symbol	j		199995						
ANR	200235	Symbol	labelInt		199995						
ANR	200236	Symbol	getNumArcs		199995						
ANR	200237	Symbol	numNodes		199995						
ANR	200238	Symbol	getNumNodes		199995						
ANR	200239	Symbol	numArcs		199995						
ANR	200240	Symbol	getArc		199995						
ANR	200241	Symbol	stream		199995						
ANR	200242	Symbol	labelString		199995						
ANR	200243	Function	Graph :: printLabels	535:0:11098:11355							
ANR	200244	FunctionDef	"Graph :: printLabels (FILE * stream , int node)"		200243	0					
ANR	200245	CompoundStatement		536:0:11152:11355	200243	0					
ANR	200246	ExpressionStatement	"fprintf ( stream , ""il %d, "" , nodeToLabelInt . getElem ( node ) )"	537:1:11155:11211	200243	0	True				
ANR	200247	CallExpression	"fprintf ( stream , ""il %d, "" , nodeToLabelInt . getElem ( node ) )"		200243	0					
ANR	200248	Callee	fprintf		200243	0					
ANR	200249	Identifier	fprintf		200243	0					
ANR	200250	ArgumentList	stream		200243	1					
ANR	200251	Argument	stream		200243	0					
ANR	200252	Identifier	stream		200243	0					
ANR	200253	Argument	"""il %d, """		200243	1					
ANR	200254	PrimaryExpression	"""il %d, """		200243	0					
ANR	200255	Argument	nodeToLabelInt . getElem ( node )		200243	2					
ANR	200256	CallExpression	nodeToLabelInt . getElem ( node )		200243	0					
ANR	200257	Callee	nodeToLabelInt . getElem		200243	0					
ANR	200258	MemberAccess	nodeToLabelInt . getElem		200243	0					
ANR	200259	Identifier	nodeToLabelInt		200243	0					
ANR	200260	Identifier	getElem		200243	1					
ANR	200261	ArgumentList	node		200243	1					
ANR	200262	Argument	node		200243	0					
ANR	200263	Identifier	node		200243	0					
ANR	200264	IfStatement	if ( NULL == nodeToLabelString . getElem ( node ) )		200243	1					
ANR	200265	Condition	NULL == nodeToLabelString . getElem ( node )	538:5:11218:11254	200243	0	True				
ANR	200266	EqualityExpression	NULL == nodeToLabelString . getElem ( node )		200243	0		==			
ANR	200267	Identifier	NULL		200243	0					
ANR	200268	CallExpression	nodeToLabelString . getElem ( node )		200243	1					
ANR	200269	Callee	nodeToLabelString . getElem		200243	0					
ANR	200270	MemberAccess	nodeToLabelString . getElem		200243	0					
ANR	200271	Identifier	nodeToLabelString		200243	0					
ANR	200272	Identifier	getElem		200243	1					
ANR	200273	ArgumentList	node		200243	1					
ANR	200274	Argument	node		200243	0					
ANR	200275	Identifier	node		200243	0					
ANR	200276	ExpressionStatement	"fprintf ( stream , ""sl NULL "" )"	539:2:11260:11286	200243	1	True				
ANR	200277	CallExpression	"fprintf ( stream , ""sl NULL "" )"		200243	0					
ANR	200278	Callee	fprintf		200243	0					
ANR	200279	Identifier	fprintf		200243	0					
ANR	200280	ArgumentList	stream		200243	1					
ANR	200281	Argument	stream		200243	0					
ANR	200282	Identifier	stream		200243	0					
ANR	200283	Argument	"""sl NULL """		200243	1					
ANR	200284	PrimaryExpression	"""sl NULL """		200243	0					
ANR	200285	ElseStatement	else		200243	0					
ANR	200286	ExpressionStatement	"fprintf ( stream , ""sl %s "" , nodeToLabelString . getElem ( node ) )"	541:2:11296:11353	200243	0	True				
ANR	200287	CallExpression	"fprintf ( stream , ""sl %s "" , nodeToLabelString . getElem ( node ) )"		200243	0					
ANR	200288	Callee	fprintf		200243	0					
ANR	200289	Identifier	fprintf		200243	0					
ANR	200290	ArgumentList	stream		200243	1					
ANR	200291	Argument	stream		200243	0					
ANR	200292	Identifier	stream		200243	0					
ANR	200293	Argument	"""sl %s """		200243	1					
ANR	200294	PrimaryExpression	"""sl %s """		200243	0					
ANR	200295	Argument	nodeToLabelString . getElem ( node )		200243	2					
ANR	200296	CallExpression	nodeToLabelString . getElem ( node )		200243	0					
ANR	200297	Callee	nodeToLabelString . getElem		200243	0					
ANR	200298	MemberAccess	nodeToLabelString . getElem		200243	0					
ANR	200299	Identifier	nodeToLabelString		200243	0					
ANR	200300	Identifier	getElem		200243	1					
ANR	200301	ArgumentList	node		200243	1					
ANR	200302	Argument	node		200243	0					
ANR	200303	Identifier	node		200243	0					
ANR	200304	ReturnType	void		200243	1					
ANR	200305	Identifier	Graph :: printLabels		200243	2					
ANR	200306	ParameterList	"FILE * stream , int node"		200243	3					
ANR	200307	Parameter	FILE * stream	535:24:11122:11133	200243	0	True				
ANR	200308	ParameterType	FILE *		200243	0					
ANR	200309	Identifier	stream		200243	1					
ANR	200310	Parameter	int node	535:38:11136:11143	200243	1	True				
ANR	200311	ParameterType	int		200243	0					
ANR	200312	Identifier	node		200243	1					
ANR	200313	CFGEntryNode	ENTRY		200243		True				
ANR	200314	CFGExitNode	EXIT		200243		True				
ANR	200315	Symbol	node		200243						
ANR	200316	Symbol	nodeToLabelString . getElem		200243						
ANR	200317	Symbol	NULL		200243						
ANR	200318	Symbol	stream		200243						
ANR	200319	Symbol	nodeToLabelInt		200243						
ANR	200320	Symbol	nodeToLabelString		200243						
ANR	200321	Symbol	nodeToLabelInt . getElem		200243						
ANR	200322	Function	Graph :: saveAsText	560:0:11642:12118							
ANR	200323	FunctionDef	Graph :: saveAsText (FILE * stream)		200322	0					
ANR	200324	CompoundStatement		561:0:11685:12118	200322	0					
ANR	200325	IfStatement	if ( NULL == stream )		200322	0					
ANR	200326	Condition	NULL == stream	562:5:11692:11703	200322	0	True				
ANR	200327	EqualityExpression	NULL == stream		200322	0		==			
ANR	200328	Identifier	NULL		200322	0					
ANR	200329	Identifier	stream		200322	1					
ANR	200330	ThrowStatement	"throw ""Graph::saveAsText, stream is NULL"" ;"	563:2:11709:11750	200322	1	True				
ANR	200331	PrimaryExpression	"""Graph::saveAsText, stream is NULL"""		200322	0					
ANR	200332	IfStatement	if ( 0 == arcTable . getNumRow ( ) )		200322	1					
ANR	200333	Condition	0 == arcTable . getNumRow ( )	565:5:11758:11780	200322	0	True				
ANR	200334	EqualityExpression	0 == arcTable . getNumRow ( )		200322	0		==			
ANR	200335	PrimaryExpression	0		200322	0					
ANR	200336	CallExpression	arcTable . getNumRow ( )		200322	1					
ANR	200337	Callee	arcTable . getNumRow		200322	0					
ANR	200338	MemberAccess	arcTable . getNumRow		200322	0					
ANR	200339	Identifier	arcTable		200322	0					
ANR	200340	Identifier	getNumRow		200322	1					
ANR	200341	ArgumentList			200322	1					
ANR	200342	CompoundStatement		5:31:98:98	200322	1					
ANR	200343	ExpressionStatement	"fprintf ( stream , ""empty graph\\n"" )"	566:2:11788:11820	200322	0	True				
ANR	200344	CallExpression	"fprintf ( stream , ""empty graph\\n"" )"		200322	0					
ANR	200345	Callee	fprintf		200322	0					
ANR	200346	Identifier	fprintf		200322	0					
ANR	200347	ArgumentList	stream		200322	1					
ANR	200348	Argument	stream		200322	0					
ANR	200349	Identifier	stream		200322	0					
ANR	200350	Argument	"""empty graph\\n"""		200322	1					
ANR	200351	PrimaryExpression	"""empty graph\\n"""		200322	0					
ANR	200352	ReturnStatement	return ;	567:2:11824:11830	200322	1	True				
ANR	200353	ExpressionStatement		568:2:11834:11834	200322	2	True				
ANR	200354	ForStatement	for ( int node = 0 ; node < arcTable . getNumRow ( ) ; node ++ )		200322	3					
ANR	200355	ForInit	int node = 0 ;	569:6:11842:11852	200322	0	True				
ANR	200356	IdentifierDeclStatement	int node = 0 ;		200322	0					
ANR	200357	IdentifierDecl	node = 0		200322	0					
ANR	200358	IdentifierDeclType	int		200322	0					
ANR	200359	Identifier	node		200322	1					
ANR	200360	AssignmentExpression	node = 0		200322	2		=			
ANR	200361	Identifier	node		200322	0					
ANR	200362	PrimaryExpression	0		200322	1					
ANR	200363	Condition	node < arcTable . getNumRow ( )	569:18:11854:11878	200322	1	True				
ANR	200364	RelationalExpression	node < arcTable . getNumRow ( )		200322	0		<			
ANR	200365	Identifier	node		200322	0					
ANR	200366	CallExpression	arcTable . getNumRow ( )		200322	1					
ANR	200367	Callee	arcTable . getNumRow		200322	0					
ANR	200368	MemberAccess	arcTable . getNumRow		200322	0					
ANR	200369	Identifier	arcTable		200322	0					
ANR	200370	Identifier	getNumRow		200322	1					
ANR	200371	ArgumentList			200322	1					
ANR	200372	PostIncDecOperationExpression	node ++	569:45:11881:11886	200322	2	True				
ANR	200373	Identifier	node		200322	0					
ANR	200374	IncDec	++		200322	1					
ANR	200375	CompoundStatement		9:54:204:204	200322	3					
ANR	200376	ExpressionStatement	"fprintf ( stream , ""node %d, "" , node )"	570:2:11894:11928	200322	0	True				
ANR	200377	CallExpression	"fprintf ( stream , ""node %d, "" , node )"		200322	0					
ANR	200378	Callee	fprintf		200322	0					
ANR	200379	Identifier	fprintf		200322	0					
ANR	200380	ArgumentList	stream		200322	1					
ANR	200381	Argument	stream		200322	0					
ANR	200382	Identifier	stream		200322	0					
ANR	200383	Argument	"""node %d, """		200322	1					
ANR	200384	PrimaryExpression	"""node %d, """		200322	0					
ANR	200385	Argument	node		200322	2					
ANR	200386	Identifier	node		200322	0					
ANR	200387	ExpressionStatement	"printLabels ( stream , node )"	571:2:11932:11956	200322	1	True				
ANR	200388	CallExpression	"printLabels ( stream , node )"		200322	0					
ANR	200389	Callee	printLabels		200322	0					
ANR	200390	Identifier	printLabels		200322	0					
ANR	200391	ArgumentList	stream		200322	1					
ANR	200392	Argument	stream		200322	0					
ANR	200393	Identifier	stream		200322	0					
ANR	200394	Argument	node		200322	1					
ANR	200395	Identifier	node		200322	0					
ANR	200396	ExpressionStatement	"fprintf ( stream , "" --> "" )"	572:2:11960:11983	200322	2	True				
ANR	200397	CallExpression	"fprintf ( stream , "" --> "" )"		200322	0					
ANR	200398	Callee	fprintf		200322	0					
ANR	200399	Identifier	fprintf		200322	0					
ANR	200400	ArgumentList	stream		200322	1					
ANR	200401	Argument	stream		200322	0					
ANR	200402	Identifier	stream		200322	0					
ANR	200403	Argument	""" --> """		200322	1					
ANR	200404	PrimaryExpression	""" --> """		200322	0					
ANR	200405	ForStatement	for ( int i = 0 ; i < arcTable . getNumElem ( node ) ; i ++ )		200322	3					
ANR	200406	ForInit	int i = 0 ;	573:7:11992:11999	200322	0	True				
ANR	200407	IdentifierDeclStatement	int i = 0 ;		200322	0					
ANR	200408	IdentifierDecl	i = 0		200322	0					
ANR	200409	IdentifierDeclType	int		200322	0					
ANR	200410	Identifier	i		200322	1					
ANR	200411	AssignmentExpression	i = 0		200322	2		=			
ANR	200412	Identifier	i		200322	0					
ANR	200413	PrimaryExpression	0		200322	1					
ANR	200414	Condition	i < arcTable . getNumElem ( node )	573:16:12001:12027	200322	1	True				
ANR	200415	RelationalExpression	i < arcTable . getNumElem ( node )		200322	0		<			
ANR	200416	Identifier	i		200322	0					
ANR	200417	CallExpression	arcTable . getNumElem ( node )		200322	1					
ANR	200418	Callee	arcTable . getNumElem		200322	0					
ANR	200419	MemberAccess	arcTable . getNumElem		200322	0					
ANR	200420	Identifier	arcTable		200322	0					
ANR	200421	Identifier	getNumElem		200322	1					
ANR	200422	ArgumentList	node		200322	1					
ANR	200423	Argument	node		200322	0					
ANR	200424	Identifier	node		200322	0					
ANR	200425	PostIncDecOperationExpression	i ++	573:45:12030:12032	200322	2	True				
ANR	200426	Identifier	i		200322	0					
ANR	200427	IncDec	++		200322	1					
ANR	200428	ExpressionStatement	"fprintf ( stream , ""%d, "" , arcTable . getElem ( node , i ) )"	574:3:12039:12088	200322	3	True				
ANR	200429	CallExpression	"fprintf ( stream , ""%d, "" , arcTable . getElem ( node , i ) )"		200322	0					
ANR	200430	Callee	fprintf		200322	0					
ANR	200431	Identifier	fprintf		200322	0					
ANR	200432	ArgumentList	stream		200322	1					
ANR	200433	Argument	stream		200322	0					
ANR	200434	Identifier	stream		200322	0					
ANR	200435	Argument	"""%d, """		200322	1					
ANR	200436	PrimaryExpression	"""%d, """		200322	0					
ANR	200437	Argument	"arcTable . getElem ( node , i )"		200322	2					
ANR	200438	CallExpression	"arcTable . getElem ( node , i )"		200322	0					
ANR	200439	Callee	arcTable . getElem		200322	0					
ANR	200440	MemberAccess	arcTable . getElem		200322	0					
ANR	200441	Identifier	arcTable		200322	0					
ANR	200442	Identifier	getElem		200322	1					
ANR	200443	ArgumentList	node		200322	1					
ANR	200444	Argument	node		200322	0					
ANR	200445	Identifier	node		200322	0					
ANR	200446	Argument	i		200322	1					
ANR	200447	Identifier	i		200322	0					
ANR	200448	ExpressionStatement	"fprintf ( stream , ""\\n"" )"	575:2:12092:12112	200322	4	True				
ANR	200449	CallExpression	"fprintf ( stream , ""\\n"" )"		200322	0					
ANR	200450	Callee	fprintf		200322	0					
ANR	200451	Identifier	fprintf		200322	0					
ANR	200452	ArgumentList	stream		200322	1					
ANR	200453	Argument	stream		200322	0					
ANR	200454	Identifier	stream		200322	0					
ANR	200455	Argument	"""\\n"""		200322	1					
ANR	200456	PrimaryExpression	"""\\n"""		200322	0					
ANR	200457	ExpressionStatement		576:2:12116:12116	200322	4	True				
ANR	200458	ReturnType	void		200322	1					
ANR	200459	Identifier	Graph :: saveAsText		200322	2					
ANR	200460	ParameterList	FILE * stream		200322	3					
ANR	200461	Parameter	FILE * stream	560:23:11665:11676	200322	0	True				
ANR	200462	ParameterType	FILE *		200322	0					
ANR	200463	Identifier	stream		200322	1					
ANR	200464	CFGEntryNode	ENTRY		200322		True				
ANR	200465	CFGExitNode	EXIT		200322		True				
ANR	200466	CFGExceptionNode	EXCEPTION		200322		True				
ANR	200467	Symbol	node		200322						
ANR	200468	Symbol	NULL		200322						
ANR	200469	Symbol	stream		200322						
ANR	200470	Symbol	arcTable . getNumElem		200322						
ANR	200471	Symbol	arcTable		200322						
ANR	200472	Symbol	i		200322						
ANR	200473	Symbol	arcTable . getNumRow		200322						
ANR	200474	Symbol	arcTable . getElem		200322						
ANR	200475	Function	Graph :: printAsDot	593:0:12292:12349							
ANR	200476	FunctionDef	Graph :: printAsDot ()		200475	0					
ANR	200477	CompoundStatement		594:0:12327:12349	200475	0					
ANR	200478	ExpressionStatement	saveAsDot ( stdout )	595:1:12330:12347	200475	0	True				
ANR	200479	CallExpression	saveAsDot ( stdout )		200475	0					
ANR	200480	Callee	saveAsDot		200475	0					
ANR	200481	Identifier	saveAsDot		200475	0					
ANR	200482	ArgumentList	stdout		200475	1					
ANR	200483	Argument	stdout		200475	0					
ANR	200484	Identifier	stdout		200475	0					
ANR	200485	ReturnType	void		200475	1					
ANR	200486	Identifier	Graph :: printAsDot		200475	2					
ANR	200487	ParameterList			200475	3					
ANR	200488	CFGEntryNode	ENTRY		200475		True				
ANR	200489	CFGExitNode	EXIT		200475		True				
ANR	200490	Symbol	stdout		200475						
ANR	200491	Function	Graph :: printAsText	612:0:12528:12587							
ANR	200492	FunctionDef	Graph :: printAsText ()		200491	0					
ANR	200493	CompoundStatement		613:0:12564:12587	200491	0					
ANR	200494	ExpressionStatement	saveAsText ( stdout )	614:1:12567:12585	200491	0	True				
ANR	200495	CallExpression	saveAsText ( stdout )		200491	0					
ANR	200496	Callee	saveAsText		200491	0					
ANR	200497	Identifier	saveAsText		200491	0					
ANR	200498	ArgumentList	stdout		200491	1					
ANR	200499	Argument	stdout		200491	0					
ANR	200500	Identifier	stdout		200491	0					
ANR	200501	ReturnType	void		200491	1					
ANR	200502	Identifier	Graph :: printAsText		200491	2					
ANR	200503	ParameterList			200491	3					
ANR	200504	CFGEntryNode	ENTRY		200491		True				
ANR	200505	CFGExitNode	EXIT		200491		True				
ANR	200506	Symbol	stdout		200491						
ANR	200507	Function	Graph :: saveAsDot	632:0:12855:13126							
ANR	200508	FunctionDef	Graph :: saveAsDot (const char * fileName)		200507	0					
ANR	200509	CompoundStatement		633:0:12905:13126	200507	0					
ANR	200510	IfStatement	if ( NULL == fileName )		200507	0					
ANR	200511	Condition	NULL == fileName	634:5:12912:12925	200507	0	True				
ANR	200512	EqualityExpression	NULL == fileName		200507	0		==			
ANR	200513	Identifier	NULL		200507	0					
ANR	200514	Identifier	fileName		200507	1					
ANR	200515	ThrowStatement	"throw ""Graph::saveAsDot, fileName is NULL"" ;"	635:2:12931:12973	200507	1	True				
ANR	200516	PrimaryExpression	"""Graph::saveAsDot, fileName is NULL"""		200507	0					
ANR	200517	IdentifierDeclStatement	FILE * stream ;	637:1:12977:12989	200507	1	True				
ANR	200518	IdentifierDecl	* stream		200507	0					
ANR	200519	IdentifierDeclType	FILE *		200507	0					
ANR	200520	Identifier	stream		200507	1					
ANR	200521	ExpressionStatement	"stream = fopen ( fileName , ""wt"" )"	638:1:12992:13021	200507	2	True				
ANR	200522	AssignmentExpression	"stream = fopen ( fileName , ""wt"" )"		200507	0		=			
ANR	200523	Identifier	stream		200507	0					
ANR	200524	CallExpression	"fopen ( fileName , ""wt"" )"		200507	1					
ANR	200525	Callee	fopen		200507	0					
ANR	200526	Identifier	fopen		200507	0					
ANR	200527	ArgumentList	fileName		200507	1					
ANR	200528	Argument	fileName		200507	0					
ANR	200529	Identifier	fileName		200507	0					
ANR	200530	Argument	"""wt"""		200507	1					
ANR	200531	PrimaryExpression	"""wt"""		200507	0					
ANR	200532	IfStatement	if ( NULL == stream )		200507	3					
ANR	200533	Condition	NULL == stream	639:5:13028:13039	200507	0	True				
ANR	200534	EqualityExpression	NULL == stream		200507	0		==			
ANR	200535	Identifier	NULL		200507	0					
ANR	200536	Identifier	stream		200507	1					
ANR	200537	ThrowStatement	"throw ""Graph::saveAsDot, stream is NULL"" ;"	640:2:13045:13085	200507	1	True				
ANR	200538	PrimaryExpression	"""Graph::saveAsDot, stream is NULL"""		200507	0					
ANR	200539	ExpressionStatement	saveAsDot ( stream )	642:1:13089:13106	200507	4	True				
ANR	200540	CallExpression	saveAsDot ( stream )		200507	0					
ANR	200541	Callee	saveAsDot		200507	0					
ANR	200542	Identifier	saveAsDot		200507	0					
ANR	200543	ArgumentList	stream		200507	1					
ANR	200544	Argument	stream		200507	0					
ANR	200545	Identifier	stream		200507	0					
ANR	200546	ExpressionStatement	fclose ( stream )	644:1:13110:13124	200507	5	True				
ANR	200547	CallExpression	fclose ( stream )		200507	0					
ANR	200548	Callee	fclose		200507	0					
ANR	200549	Identifier	fclose		200507	0					
ANR	200550	ArgumentList	stream		200507	1					
ANR	200551	Argument	stream		200507	0					
ANR	200552	Identifier	stream		200507	0					
ANR	200553	ReturnType	void		200507	1					
ANR	200554	Identifier	Graph :: saveAsDot		200507	2					
ANR	200555	ParameterList	const char * fileName		200507	3					
ANR	200556	Parameter	const char * fileName	632:22:12877:12896	200507	0	True				
ANR	200557	ParameterType	const char *		200507	0					
ANR	200558	Identifier	fileName		200507	1					
ANR	200559	CFGEntryNode	ENTRY		200507		True				
ANR	200560	CFGExitNode	EXIT		200507		True				
ANR	200561	CFGExceptionNode	EXCEPTION		200507		True				
ANR	200562	CFGExceptionNode	EXCEPTION		200507		True				
ANR	200563	CFGExceptionNode	EXCEPTION		200507		True				
ANR	200564	Symbol	fopen		200507						
ANR	200565	Symbol	fileName		200507						
ANR	200566	Symbol	NULL		200507						
ANR	200567	Symbol	stream		200507						
ANR	200568	Function	Graph :: saveAsText	662:0:13394:13669							
ANR	200569	FunctionDef	Graph :: saveAsText (const char * fileName)		200568	0					
ANR	200570	CompoundStatement		663:0:13445:13669	200568	0					
ANR	200571	IfStatement	if ( NULL == fileName )		200568	0					
ANR	200572	Condition	NULL == fileName	664:5:13452:13465	200568	0	True				
ANR	200573	EqualityExpression	NULL == fileName		200568	0		==			
ANR	200574	Identifier	NULL		200568	0					
ANR	200575	Identifier	fileName		200568	1					
ANR	200576	ThrowStatement	"throw ""Graph::saveAsText, fileName is NULL"" ;"	665:2:13471:13514	200568	1	True				
ANR	200577	PrimaryExpression	"""Graph::saveAsText, fileName is NULL"""		200568	0					
ANR	200578	IdentifierDeclStatement	FILE * stream ;	667:1:13518:13530	200568	1	True				
ANR	200579	IdentifierDecl	* stream		200568	0					
ANR	200580	IdentifierDeclType	FILE *		200568	0					
ANR	200581	Identifier	stream		200568	1					
ANR	200582	ExpressionStatement	"stream = fopen ( fileName , ""wt"" )"	668:1:13533:13562	200568	2	True				
ANR	200583	AssignmentExpression	"stream = fopen ( fileName , ""wt"" )"		200568	0		=			
ANR	200584	Identifier	stream		200568	0					
ANR	200585	CallExpression	"fopen ( fileName , ""wt"" )"		200568	1					
ANR	200586	Callee	fopen		200568	0					
ANR	200587	Identifier	fopen		200568	0					
ANR	200588	ArgumentList	fileName		200568	1					
ANR	200589	Argument	fileName		200568	0					
ANR	200590	Identifier	fileName		200568	0					
ANR	200591	Argument	"""wt"""		200568	1					
ANR	200592	PrimaryExpression	"""wt"""		200568	0					
ANR	200593	IfStatement	if ( NULL == stream )		200568	3					
ANR	200594	Condition	NULL == stream	669:5:13569:13580	200568	0	True				
ANR	200595	EqualityExpression	NULL == stream		200568	0		==			
ANR	200596	Identifier	NULL		200568	0					
ANR	200597	Identifier	stream		200568	1					
ANR	200598	ThrowStatement	"throw ""Graph::saveAsText, stream is NULL"" ;"	670:2:13586:13627	200568	1	True				
ANR	200599	PrimaryExpression	"""Graph::saveAsText, stream is NULL"""		200568	0					
ANR	200600	ExpressionStatement	saveAsText ( stream )	672:1:13631:13649	200568	4	True				
ANR	200601	CallExpression	saveAsText ( stream )		200568	0					
ANR	200602	Callee	saveAsText		200568	0					
ANR	200603	Identifier	saveAsText		200568	0					
ANR	200604	ArgumentList	stream		200568	1					
ANR	200605	Argument	stream		200568	0					
ANR	200606	Identifier	stream		200568	0					
ANR	200607	ExpressionStatement	fclose ( stream )	674:1:13653:13667	200568	5	True				
ANR	200608	CallExpression	fclose ( stream )		200568	0					
ANR	200609	Callee	fclose		200568	0					
ANR	200610	Identifier	fclose		200568	0					
ANR	200611	ArgumentList	stream		200568	1					
ANR	200612	Argument	stream		200568	0					
ANR	200613	Identifier	stream		200568	0					
ANR	200614	ReturnType	void		200568	1					
ANR	200615	Identifier	Graph :: saveAsText		200568	2					
ANR	200616	ParameterList	const char * fileName		200568	3					
ANR	200617	Parameter	const char * fileName	662:23:13417:13436	200568	0	True				
ANR	200618	ParameterType	const char *		200568	0					
ANR	200619	Identifier	fileName		200568	1					
ANR	200620	CFGEntryNode	ENTRY		200568		True				
ANR	200621	CFGExitNode	EXIT		200568		True				
ANR	200622	CFGExceptionNode	EXCEPTION		200568		True				
ANR	200623	CFGExceptionNode	EXCEPTION		200568		True				
ANR	200624	CFGExceptionNode	EXCEPTION		200568		True				
ANR	200625	Symbol	fopen		200568						
ANR	200626	Symbol	fileName		200568						
ANR	200627	Symbol	NULL		200568						
ANR	200628	Symbol	stream		200568						
ANR	200629	Function	Graph :: reverseArcs	691:0:13832:14508							
ANR	200630	FunctionDef	Graph :: reverseArcs ()		200629	0					
ANR	200631	CompoundStatement		692:0:13862:14508	200629	0					
ANR	200632	IdentifierDeclStatement	"int i , j ;"	693:1:13865:13872	200629	0	True				
ANR	200633	IdentifierDecl	i		200629	0					
ANR	200634	IdentifierDeclType	int		200629	0					
ANR	200635	Identifier	i		200629	1					
ANR	200636	IdentifierDecl	j		200629	1					
ANR	200637	IdentifierDeclType	int		200629	0					
ANR	200638	Identifier	j		200629	1					
ANR	200639	IdentifierDeclStatement	Resizable2DArray < int > revArcTable ;	696:1:13923:13956	200629	1	True				
ANR	200640	IdentifierDecl	revArcTable		200629	0					
ANR	200641	IdentifierDeclType	Resizable2DArray < int >		200629	0					
ANR	200642	Identifier	revArcTable		200629	1					
ANR	200643	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	697:1:13959:13985	200629	2	True				
ANR	200644	IdentifierDecl	numNodes = getNumNodes ( )		200629	0					
ANR	200645	IdentifierDeclType	int		200629	0					
ANR	200646	Identifier	numNodes		200629	1					
ANR	200647	AssignmentExpression	numNodes = getNumNodes ( )		200629	2		=			
ANR	200648	Identifier	numNodes		200629	0					
ANR	200649	CallExpression	getNumNodes ( )		200629	1					
ANR	200650	Callee	getNumNodes		200629	0					
ANR	200651	Identifier	getNumNodes		200629	0					
ANR	200652	ArgumentList			200629	1					
ANR	200653	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		200629	3					
ANR	200654	ForInit	i = 0 ;	698:6:13993:13996	200629	0	True				
ANR	200655	AssignmentExpression	i = 0		200629	0		=			
ANR	200656	Identifier	i		200629	0					
ANR	200657	PrimaryExpression	0		200629	1					
ANR	200658	Condition	i < numNodes	698:11:13998:14007	200629	1	True				
ANR	200659	RelationalExpression	i < numNodes		200629	0		<			
ANR	200660	Identifier	i		200629	0					
ANR	200661	Identifier	numNodes		200629	1					
ANR	200662	PostIncDecOperationExpression	i ++	698:23:14010:14012	200629	2	True				
ANR	200663	Identifier	i		200629	0					
ANR	200664	IncDec	++		200629	1					
ANR	200665	ExpressionStatement	revArcTable . appendRow ( )	699:2:14018:14041	200629	3	True				
ANR	200666	CallExpression	revArcTable . appendRow ( )		200629	0					
ANR	200667	Callee	revArcTable . appendRow		200629	0					
ANR	200668	MemberAccess	revArcTable . appendRow		200629	0					
ANR	200669	Identifier	revArcTable		200629	0					
ANR	200670	Identifier	appendRow		200629	1					
ANR	200671	ArgumentList			200629	1					
ANR	200672	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		200629	4					
ANR	200673	ForInit	i = 0 ;	702:6:14090:14093	200629	0	True				
ANR	200674	AssignmentExpression	i = 0		200629	0		=			
ANR	200675	Identifier	i		200629	0					
ANR	200676	PrimaryExpression	0		200629	1					
ANR	200677	Condition	i < numNodes	702:11:14095:14104	200629	1	True				
ANR	200678	RelationalExpression	i < numNodes		200629	0		<			
ANR	200679	Identifier	i		200629	0					
ANR	200680	Identifier	numNodes		200629	1					
ANR	200681	PostIncDecOperationExpression	i ++	702:23:14107:14109	200629	2	True				
ANR	200682	Identifier	i		200629	0					
ANR	200683	IncDec	++		200629	1					
ANR	200684	CompoundStatement		12:2:254:281	200629	3					
ANR	200685	IdentifierDeclStatement	int numArcs = getNumArcs ( i ) ;	703:2:14117:14144	200629	0	True				
ANR	200686	IdentifierDecl	numArcs = getNumArcs ( i )		200629	0					
ANR	200687	IdentifierDeclType	int		200629	0					
ANR	200688	Identifier	numArcs		200629	1					
ANR	200689	AssignmentExpression	numArcs = getNumArcs ( i )		200629	2		=			
ANR	200690	Identifier	numArcs		200629	0					
ANR	200691	CallExpression	getNumArcs ( i )		200629	1					
ANR	200692	Callee	getNumArcs		200629	0					
ANR	200693	Identifier	getNumArcs		200629	0					
ANR	200694	ArgumentList	i		200629	1					
ANR	200695	Argument	i		200629	0					
ANR	200696	Identifier	i		200629	0					
ANR	200697	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		200629	1					
ANR	200698	ForInit	j = 0 ;	704:7:14153:14156	200629	0	True				
ANR	200699	AssignmentExpression	j = 0		200629	0		=			
ANR	200700	Identifier	j		200629	0					
ANR	200701	PrimaryExpression	0		200629	1					
ANR	200702	Condition	j < numArcs	704:12:14158:14166	200629	1	True				
ANR	200703	RelationalExpression	j < numArcs		200629	0		<			
ANR	200704	Identifier	j		200629	0					
ANR	200705	Identifier	numArcs		200629	1					
ANR	200706	PostIncDecOperationExpression	j ++	704:23:14169:14171	200629	2	True				
ANR	200707	Identifier	j		200629	0					
ANR	200708	IncDec	++		200629	1					
ANR	200709	CompoundStatement		14:3:317:340	200629	3					
ANR	200710	IdentifierDeclStatement	"int child = getArc ( i , j ) ;"	705:3:14180:14203	200629	0	True				
ANR	200711	IdentifierDecl	"child = getArc ( i , j )"		200629	0					
ANR	200712	IdentifierDeclType	int		200629	0					
ANR	200713	Identifier	child		200629	1					
ANR	200714	AssignmentExpression	"child = getArc ( i , j )"		200629	2		=			
ANR	200715	Identifier	child		200629	0					
ANR	200716	CallExpression	"getArc ( i , j )"		200629	1					
ANR	200717	Callee	getArc		200629	0					
ANR	200718	Identifier	getArc		200629	0					
ANR	200719	ArgumentList	i		200629	1					
ANR	200720	Argument	i		200629	0					
ANR	200721	Identifier	i		200629	0					
ANR	200722	Argument	j		200629	1					
ANR	200723	Identifier	j		200629	0					
ANR	200724	ExpressionStatement	"revArcTable . append ( child , i )"	706:3:14208:14235	200629	1	True				
ANR	200725	CallExpression	"revArcTable . append ( child , i )"		200629	0					
ANR	200726	Callee	revArcTable . append		200629	0					
ANR	200727	MemberAccess	revArcTable . append		200629	0					
ANR	200728	Identifier	revArcTable		200629	0					
ANR	200729	Identifier	append		200629	1					
ANR	200730	ArgumentList	child		200629	1					
ANR	200731	Argument	child		200629	0					
ANR	200732	Identifier	child		200629	0					
ANR	200733	Argument	i		200629	1					
ANR	200734	Identifier	i		200629	0					
ANR	200735	ExpressionStatement		707:3:14240:14240	200629	2	True				
ANR	200736	ExpressionStatement		708:2:14244:14244	200629	5	True				
ANR	200737	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		200629	6					
ANR	200738	ForInit	i = 0 ;	711:6:14308:14311	200629	0	True				
ANR	200739	AssignmentExpression	i = 0		200629	0		=			
ANR	200740	Identifier	i		200629	0					
ANR	200741	PrimaryExpression	0		200629	1					
ANR	200742	Condition	i < numNodes	711:11:14313:14322	200629	1	True				
ANR	200743	RelationalExpression	i < numNodes		200629	0		<			
ANR	200744	Identifier	i		200629	0					
ANR	200745	Identifier	numNodes		200629	1					
ANR	200746	PostIncDecOperationExpression	i ++	711:23:14325:14327	200629	2	True				
ANR	200747	Identifier	i		200629	0					
ANR	200748	IncDec	++		200629	1					
ANR	200749	CompoundStatement		22:2:496:533	200629	3					
ANR	200750	ExpressionStatement	arcTable . resetRow ( i )	712:2:14335:14355	200629	0	True				
ANR	200751	CallExpression	arcTable . resetRow ( i )		200629	0					
ANR	200752	Callee	arcTable . resetRow		200629	0					
ANR	200753	MemberAccess	arcTable . resetRow		200629	0					
ANR	200754	Identifier	arcTable		200629	0					
ANR	200755	Identifier	resetRow		200629	1					
ANR	200756	ArgumentList	i		200629	1					
ANR	200757	Argument	i		200629	0					
ANR	200758	Identifier	i		200629	0					
ANR	200759	IdentifierDeclStatement	int numArcs = revArcTable . getNumElem ( i ) ;	713:2:14359:14396	200629	1	True				
ANR	200760	IdentifierDecl	numArcs = revArcTable . getNumElem ( i )		200629	0					
ANR	200761	IdentifierDeclType	int		200629	0					
ANR	200762	Identifier	numArcs		200629	1					
ANR	200763	AssignmentExpression	numArcs = revArcTable . getNumElem ( i )		200629	2		=			
ANR	200764	Identifier	numArcs		200629	0					
ANR	200765	CallExpression	revArcTable . getNumElem ( i )		200629	1					
ANR	200766	Callee	revArcTable . getNumElem		200629	0					
ANR	200767	MemberAccess	revArcTable . getNumElem		200629	0					
ANR	200768	Identifier	revArcTable		200629	0					
ANR	200769	Identifier	getNumElem		200629	1					
ANR	200770	ArgumentList	i		200629	1					
ANR	200771	Argument	i		200629	0					
ANR	200772	Identifier	i		200629	0					
ANR	200773	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		200629	2					
ANR	200774	ForInit	j = 0 ;	714:7:14405:14408	200629	0	True				
ANR	200775	AssignmentExpression	j = 0		200629	0		=			
ANR	200776	Identifier	j		200629	0					
ANR	200777	PrimaryExpression	0		200629	1					
ANR	200778	Condition	j < numArcs	714:12:14410:14418	200629	1	True				
ANR	200779	RelationalExpression	j < numArcs		200629	0		<			
ANR	200780	Identifier	j		200629	0					
ANR	200781	Identifier	numArcs		200629	1					
ANR	200782	PostIncDecOperationExpression	j ++	714:23:14421:14423	200629	2	True				
ANR	200783	Identifier	j		200629	0					
ANR	200784	IncDec	++		200629	1					
ANR	200785	CompoundStatement		24:3:569:605	200629	3					
ANR	200786	IdentifierDeclStatement	"int child = revArcTable . getElem ( i , j ) ;"	715:3:14432:14468	200629	0	True				
ANR	200787	IdentifierDecl	"child = revArcTable . getElem ( i , j )"		200629	0					
ANR	200788	IdentifierDeclType	int		200629	0					
ANR	200789	Identifier	child		200629	1					
ANR	200790	AssignmentExpression	"child = revArcTable . getElem ( i , j )"		200629	2		=			
ANR	200791	Identifier	child		200629	0					
ANR	200792	CallExpression	"revArcTable . getElem ( i , j )"		200629	1					
ANR	200793	Callee	revArcTable . getElem		200629	0					
ANR	200794	MemberAccess	revArcTable . getElem		200629	0					
ANR	200795	Identifier	revArcTable		200629	0					
ANR	200796	Identifier	getElem		200629	1					
ANR	200797	ArgumentList	i		200629	1					
ANR	200798	Argument	i		200629	0					
ANR	200799	Identifier	i		200629	0					
ANR	200800	Argument	j		200629	1					
ANR	200801	Identifier	j		200629	0					
ANR	200802	ExpressionStatement	"arcTable . append ( i , child )"	716:3:14473:14497	200629	1	True				
ANR	200803	CallExpression	"arcTable . append ( i , child )"		200629	0					
ANR	200804	Callee	arcTable . append		200629	0					
ANR	200805	MemberAccess	arcTable . append		200629	0					
ANR	200806	Identifier	arcTable		200629	0					
ANR	200807	Identifier	append		200629	1					
ANR	200808	ArgumentList	i		200629	1					
ANR	200809	Argument	i		200629	0					
ANR	200810	Identifier	i		200629	0					
ANR	200811	Argument	child		200629	1					
ANR	200812	Identifier	child		200629	0					
ANR	200813	ExpressionStatement		717:3:14502:14502	200629	3	True				
ANR	200814	ExpressionStatement		718:2:14506:14506	200629	7	True				
ANR	200815	ReturnType	void		200629	1					
ANR	200816	Identifier	Graph :: reverseArcs		200629	2					
ANR	200817	ParameterList			200629	3					
ANR	200818	CFGEntryNode	ENTRY		200629		True				
ANR	200819	CFGExitNode	EXIT		200629		True				
ANR	200820	Symbol	getNumArcs		200629						
ANR	200821	Symbol	revArcTable . getElem		200629						
ANR	200822	Symbol	getNumNodes		200629						
ANR	200823	Symbol	numNodes		200629						
ANR	200824	Symbol	revArcTable		200629						
ANR	200825	Symbol	numArcs		200629						
ANR	200826	Symbol	getArc		200629						
ANR	200827	Symbol	i		200629						
ANR	200828	Symbol	arcTable		200629						
ANR	200829	Symbol	revArcTable . getNumElem		200629						
ANR	200830	Symbol	j		200629						
ANR	200831	Symbol	child		200629						
ANR	200832	Function	Graph :: closeTransitively	738:0:14846:16057							
ANR	200833	FunctionDef	Graph :: closeTransitively ()		200832	0					
ANR	200834	CompoundStatement		739:0:14882:16057	200832	0					
ANR	200835	IdentifierDeclStatement	"int i , j , v ;"	740:1:14885:14894	200832	0	True				
ANR	200836	IdentifierDecl	i		200832	0					
ANR	200837	IdentifierDeclType	int		200832	0					
ANR	200838	Identifier	i		200832	1					
ANR	200839	IdentifierDecl	j		200832	1					
ANR	200840	IdentifierDeclType	int		200832	0					
ANR	200841	Identifier	j		200832	1					
ANR	200842	IdentifierDecl	v		200832	2					
ANR	200843	IdentifierDeclType	int		200832	0					
ANR	200844	Identifier	v		200832	1					
ANR	200845	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	743:1:14921:14947	200832	1	True				
ANR	200846	IdentifierDecl	numNodes = getNumNodes ( )		200832	0					
ANR	200847	IdentifierDeclType	int		200832	0					
ANR	200848	Identifier	numNodes		200832	1					
ANR	200849	AssignmentExpression	numNodes = getNumNodes ( )		200832	2		=			
ANR	200850	Identifier	numNodes		200832	0					
ANR	200851	CallExpression	getNumNodes ( )		200832	1					
ANR	200852	Callee	getNumNodes		200832	0					
ANR	200853	Identifier	getNumNodes		200832	0					
ANR	200854	ArgumentList			200832	1					
ANR	200855	IdentifierDeclStatement	int * colorTable = new int [ numNodes ] ;	744:1:14950:14986	200832	2	True				
ANR	200856	IdentifierDecl	* colorTable = new int [ numNodes ]		200832	0					
ANR	200857	IdentifierDeclType	int *		200832	0					
ANR	200858	Identifier	colorTable		200832	1					
ANR	200859	AssignmentExpression	* colorTable = new int [ numNodes ]		200832	2		=			
ANR	200860	Identifier	numNodes		200832	0					
ANR	200861	Identifier	numNodes		200832	1					
ANR	200862	IfStatement	if ( NULL == colorTable )		200832	3					
ANR	200863	Condition	NULL == colorTable	745:5:14993:15008	200832	0	True				
ANR	200864	EqualityExpression	NULL == colorTable		200832	0		==			
ANR	200865	Identifier	NULL		200832	0					
ANR	200866	Identifier	colorTable		200832	1					
ANR	200867	ThrowStatement	"throw ""Graph::closeTransitively, colorTable is NULL"" ;"	746:2:15014:15066	200832	1	True				
ANR	200868	PrimaryExpression	"""Graph::closeTransitively, colorTable is NULL"""		200832	0					
ANR	200869	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		200832	4					
ANR	200870	ForInit	i = 0 ;	747:6:15074:15077	200832	0	True				
ANR	200871	AssignmentExpression	i = 0		200832	0		=			
ANR	200872	Identifier	i		200832	0					
ANR	200873	PrimaryExpression	0		200832	1					
ANR	200874	Condition	i < numNodes	747:11:15079:15088	200832	1	True				
ANR	200875	RelationalExpression	i < numNodes		200832	0		<			
ANR	200876	Identifier	i		200832	0					
ANR	200877	Identifier	numNodes		200832	1					
ANR	200878	PostIncDecOperationExpression	i ++	747:23:15091:15093	200832	2	True				
ANR	200879	Identifier	i		200832	0					
ANR	200880	IncDec	++		200832	1					
ANR	200881	ExpressionStatement	colorTable [ i ] = - 1	748:2:15099:15117	200832	3	True				
ANR	200882	AssignmentExpression	colorTable [ i ] = - 1		200832	0		=			
ANR	200883	ArrayIndexing	colorTable [ i ]		200832	0					
ANR	200884	Identifier	colorTable		200832	0					
ANR	200885	Identifier	i		200832	1					
ANR	200886	UnaryOperationExpression	- 1		200832	1					
ANR	200887	UnaryOperator	-		200832	0					
ANR	200888	PrimaryExpression	1		200832	1					
ANR	200889	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		200832	5					
ANR	200890	ForInit	i = 0 ;	750:6:15126:15129	200832	0	True				
ANR	200891	AssignmentExpression	i = 0		200832	0		=			
ANR	200892	Identifier	i		200832	0					
ANR	200893	PrimaryExpression	0		200832	1					
ANR	200894	Condition	i < numNodes	750:11:15131:15140	200832	1	True				
ANR	200895	RelationalExpression	i < numNodes		200832	0		<			
ANR	200896	Identifier	i		200832	0					
ANR	200897	Identifier	numNodes		200832	1					
ANR	200898	PostIncDecOperationExpression	i ++	750:23:15143:15145	200832	2	True				
ANR	200899	Identifier	i		200832	0					
ANR	200900	IncDec	++		200832	1					
ANR	200901	CompoundStatement		24:2:573:588	200832	3					
ANR	200902	IdentifierDeclStatement	int numArcs = getNumArcs ( i ) ;	755:2:15248:15275	200832	0	True				
ANR	200903	IdentifierDecl	numArcs = getNumArcs ( i )		200832	0					
ANR	200904	IdentifierDeclType	int		200832	0					
ANR	200905	Identifier	numArcs		200832	1					
ANR	200906	AssignmentExpression	numArcs = getNumArcs ( i )		200832	2		=			
ANR	200907	Identifier	numArcs		200832	0					
ANR	200908	CallExpression	getNumArcs ( i )		200832	1					
ANR	200909	Callee	getNumArcs		200832	0					
ANR	200910	Identifier	getNumArcs		200832	0					
ANR	200911	ArgumentList	i		200832	1					
ANR	200912	Argument	i		200832	0					
ANR	200913	Identifier	i		200832	0					
ANR	200914	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		200832	1					
ANR	200915	ForInit	j = 0 ;	756:6:15283:15286	200832	0	True				
ANR	200916	AssignmentExpression	j = 0		200832	0		=			
ANR	200917	Identifier	j		200832	0					
ANR	200918	PrimaryExpression	0		200832	1					
ANR	200919	Condition	j < numArcs	756:11:15288:15296	200832	1	True				
ANR	200920	RelationalExpression	j < numArcs		200832	0		<			
ANR	200921	Identifier	j		200832	0					
ANR	200922	Identifier	numArcs		200832	1					
ANR	200923	PostIncDecOperationExpression	j ++	756:22:15299:15301	200832	2	True				
ANR	200924	Identifier	j		200832	0					
ANR	200925	IncDec	++		200832	1					
ANR	200926	CompoundStatement		19:3:427:450	200832	3					
ANR	200927	IdentifierDeclStatement	"int child = getArc ( i , j ) ;"	757:3:15310:15333	200832	0	True				
ANR	200928	IdentifierDecl	"child = getArc ( i , j )"		200832	0					
ANR	200929	IdentifierDeclType	int		200832	0					
ANR	200930	Identifier	child		200832	1					
ANR	200931	AssignmentExpression	"child = getArc ( i , j )"		200832	2		=			
ANR	200932	Identifier	child		200832	0					
ANR	200933	CallExpression	"getArc ( i , j )"		200832	1					
ANR	200934	Callee	getArc		200832	0					
ANR	200935	Identifier	getArc		200832	0					
ANR	200936	ArgumentList	i		200832	1					
ANR	200937	Argument	i		200832	0					
ANR	200938	Identifier	i		200832	0					
ANR	200939	Argument	j		200832	1					
ANR	200940	Identifier	j		200832	0					
ANR	200941	ExpressionStatement	colorTable [ child ] = i	758:3:15338:15359	200832	1	True				
ANR	200942	AssignmentExpression	colorTable [ child ] = i		200832	0		=			
ANR	200943	ArrayIndexing	colorTable [ child ]		200832	0					
ANR	200944	Identifier	colorTable		200832	0					
ANR	200945	Identifier	child		200832	1					
ANR	200946	Identifier	i		200832	1					
ANR	200947	ExpressionStatement		759:3:15402:15402	200832	2	True				
ANR	200948	IdentifierDeclStatement	int current = 0 ;	762:2:15456:15471	200832	3	True				
ANR	200949	IdentifierDecl	current = 0		200832	0					
ANR	200950	IdentifierDeclType	int		200832	0					
ANR	200951	Identifier	current		200832	1					
ANR	200952	AssignmentExpression	current = 0		200832	2		=			
ANR	200953	Identifier	current		200832	0					
ANR	200954	PrimaryExpression	0		200832	1					
ANR	200955	WhileStatement	while ( current < getNumArcs ( i ) )		200832	4					
ANR	200956	Condition	current < getNumArcs ( i )	763:9:15482:15504	200832	0	True				
ANR	200957	RelationalExpression	current < getNumArcs ( i )		200832	0		<			
ANR	200958	Identifier	current		200832	0					
ANR	200959	CallExpression	getNumArcs ( i )		200832	1					
ANR	200960	Callee	getNumArcs		200832	0					
ANR	200961	Identifier	getNumArcs		200832	0					
ANR	200962	ArgumentList	i		200832	1					
ANR	200963	Argument	i		200832	0					
ANR	200964	Identifier	i		200832	0					
ANR	200965	CompoundStatement		31:3:805:832	200832	1					
ANR	200966	ExpressionStatement	"v = getArc ( i , current )"	766:3:15595:15616	200832	0	True				
ANR	200967	AssignmentExpression	"v = getArc ( i , current )"		200832	0		=			
ANR	200968	Identifier	v		200832	0					
ANR	200969	CallExpression	"getArc ( i , current )"		200832	1					
ANR	200970	Callee	getArc		200832	0					
ANR	200971	Identifier	getArc		200832	0					
ANR	200972	ArgumentList	i		200832	1					
ANR	200973	Argument	i		200832	0					
ANR	200974	Identifier	i		200832	0					
ANR	200975	Argument	current		200832	1					
ANR	200976	Identifier	current		200832	0					
ANR	200977	IdentifierDeclStatement	int numArcs = getNumArcs ( v ) ;	769:3:15688:15715	200832	1	True				
ANR	200978	IdentifierDecl	numArcs = getNumArcs ( v )		200832	0					
ANR	200979	IdentifierDeclType	int		200832	0					
ANR	200980	Identifier	numArcs		200832	1					
ANR	200981	AssignmentExpression	numArcs = getNumArcs ( v )		200832	2		=			
ANR	200982	Identifier	numArcs		200832	0					
ANR	200983	CallExpression	getNumArcs ( v )		200832	1					
ANR	200984	Callee	getNumArcs		200832	0					
ANR	200985	Identifier	getNumArcs		200832	0					
ANR	200986	ArgumentList	v		200832	1					
ANR	200987	Argument	v		200832	0					
ANR	200988	Identifier	v		200832	0					
ANR	200989	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		200832	2					
ANR	200990	ForInit	j = 0 ;	770:7:15724:15727	200832	0	True				
ANR	200991	AssignmentExpression	j = 0		200832	0		=			
ANR	200992	Identifier	j		200832	0					
ANR	200993	PrimaryExpression	0		200832	1					
ANR	200994	Condition	j < numArcs	770:12:15729:15737	200832	1	True				
ANR	200995	RelationalExpression	j < numArcs		200832	0		<			
ANR	200996	Identifier	j		200832	0					
ANR	200997	Identifier	numArcs		200832	1					
ANR	200998	PostIncDecOperationExpression	j ++	770:23:15740:15742	200832	2	True				
ANR	200999	Identifier	j		200832	0					
ANR	201000	IncDec	++		200832	1					
ANR	201001	CompoundStatement		33:4:869:892	200832	3					
ANR	201002	IdentifierDeclStatement	"int child = getArc ( v , j ) ;"	771:4:15752:15775	200832	0	True				
ANR	201003	IdentifierDecl	"child = getArc ( v , j )"		200832	0					
ANR	201004	IdentifierDeclType	int		200832	0					
ANR	201005	Identifier	child		200832	1					
ANR	201006	AssignmentExpression	"child = getArc ( v , j )"		200832	2		=			
ANR	201007	Identifier	child		200832	0					
ANR	201008	CallExpression	"getArc ( v , j )"		200832	1					
ANR	201009	Callee	getArc		200832	0					
ANR	201010	Identifier	getArc		200832	0					
ANR	201011	ArgumentList	v		200832	1					
ANR	201012	Argument	v		200832	0					
ANR	201013	Identifier	v		200832	0					
ANR	201014	Argument	j		200832	1					
ANR	201015	Identifier	j		200832	0					
ANR	201016	IfStatement	if ( colorTable [ child ] < i )		200832	1					
ANR	201017	Condition	colorTable [ child ] < i	772:8:15785:15805	200832	0	True				
ANR	201018	RelationalExpression	colorTable [ child ] < i		200832	0		<			
ANR	201019	ArrayIndexing	colorTable [ child ]		200832	0					
ANR	201020	Identifier	colorTable		200832	0					
ANR	201021	Identifier	child		200832	1					
ANR	201022	Identifier	i		200832	1					
ANR	201023	CompoundStatement		34:32:926:926	200832	1					
ANR	201024	ExpressionStatement	"addArc ( i , child )"	773:5:15816:15831	200832	0	True				
ANR	201025	CallExpression	"addArc ( i , child )"		200832	0					
ANR	201026	Callee	addArc		200832	0					
ANR	201027	Identifier	addArc		200832	0					
ANR	201028	ArgumentList	i		200832	1					
ANR	201029	Argument	i		200832	0					
ANR	201030	Identifier	i		200832	0					
ANR	201031	Argument	child		200832	1					
ANR	201032	Identifier	child		200832	0					
ANR	201033	ExpressionStatement	colorTable [ child ] = i	774:5:15880:15901	200832	1	True				
ANR	201034	AssignmentExpression	colorTable [ child ] = i		200832	0		=			
ANR	201035	ArrayIndexing	colorTable [ child ]		200832	0					
ANR	201036	Identifier	colorTable		200832	0					
ANR	201037	Identifier	child		200832	1					
ANR	201038	Identifier	i		200832	1					
ANR	201039	ExpressionStatement		775:5:15946:15946	200832	2	True				
ANR	201040	ExpressionStatement		776:4:15952:15952	200832	3	True				
ANR	201041	ExpressionStatement	current ++	779:3:16014:16023	200832	4	True				
ANR	201042	PostIncDecOperationExpression	current ++		200832	0					
ANR	201043	Identifier	current		200832	0					
ANR	201044	IncDec	++		200832	1					
ANR	201045	ExpressionStatement		780:3:16028:16028	200832	5	True				
ANR	201046	ExpressionStatement		781:2:16032:16032	200832	6	True				
ANR	201047	Statement	delete	783:1:16036:16041	200832	7	True				
ANR	201048	Statement	[	783:7:16042:16042	200832	8	True				
ANR	201049	Statement	]	783:8:16043:16043	200832	9	True				
ANR	201050	ExpressionStatement	colorTable	783:10:16045:16055	200832	10	True				
ANR	201051	Identifier	colorTable		200832	0					
ANR	201052	ReturnType	void		200832	1					
ANR	201053	Identifier	Graph :: closeTransitively		200832	2					
ANR	201054	ParameterList			200832	3					
ANR	201055	CFGEntryNode	ENTRY		200832		True				
ANR	201056	CFGExitNode	EXIT		200832		True				
ANR	201057	CFGExceptionNode	EXCEPTION		200832		True				
ANR	201058	Symbol	* child		200832						
ANR	201059	Symbol	NULL		200832						
ANR	201060	Symbol	i		200832						
ANR	201061	Symbol	j		200832						
ANR	201062	Symbol	colorTable		200832						
ANR	201063	Symbol	getNumArcs		200832						
ANR	201064	Symbol	numNodes		200832						
ANR	201065	Symbol	getNumNodes		200832						
ANR	201066	Symbol	current		200832						
ANR	201067	Symbol	* i		200832						
ANR	201068	Symbol	numArcs		200832						
ANR	201069	Symbol	getArc		200832						
ANR	201070	Symbol	v		200832						
ANR	201071	Symbol	* colorTable		200832						
ANR	201072	Symbol	child		200832						
ANR	201073	Function	Graph :: square	805:0:16529:17768							
ANR	201074	FunctionDef	Graph :: square ()		201073	0					
ANR	201075	CompoundStatement		806:0:16554:17768	201073	0					
ANR	201076	IdentifierDeclStatement	"int i , j , k , u , v , w ;"	807:1:16557:16572	201073	0	True				
ANR	201077	IdentifierDecl	i		201073	0					
ANR	201078	IdentifierDeclType	int		201073	0					
ANR	201079	Identifier	i		201073	1					
ANR	201080	IdentifierDecl	j		201073	1					
ANR	201081	IdentifierDeclType	int		201073	0					
ANR	201082	Identifier	j		201073	1					
ANR	201083	IdentifierDecl	k		201073	2					
ANR	201084	IdentifierDeclType	int		201073	0					
ANR	201085	Identifier	k		201073	1					
ANR	201086	IdentifierDecl	u		201073	3					
ANR	201087	IdentifierDeclType	int		201073	0					
ANR	201088	Identifier	u		201073	1					
ANR	201089	IdentifierDecl	v		201073	4					
ANR	201090	IdentifierDeclType	int		201073	0					
ANR	201091	Identifier	v		201073	1					
ANR	201092	IdentifierDecl	w		201073	5					
ANR	201093	IdentifierDeclType	int		201073	0					
ANR	201094	Identifier	w		201073	1					
ANR	201095	IdentifierDeclStatement	Resizable2DArray < int > twoHopArcTable ;	810:1:16622:16658	201073	1	True				
ANR	201096	IdentifierDecl	twoHopArcTable		201073	0					
ANR	201097	IdentifierDeclType	Resizable2DArray < int >		201073	0					
ANR	201098	Identifier	twoHopArcTable		201073	1					
ANR	201099	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	811:1:16661:16687	201073	2	True				
ANR	201100	IdentifierDecl	numNodes = getNumNodes ( )		201073	0					
ANR	201101	IdentifierDeclType	int		201073	0					
ANR	201102	Identifier	numNodes		201073	1					
ANR	201103	AssignmentExpression	numNodes = getNumNodes ( )		201073	2		=			
ANR	201104	Identifier	numNodes		201073	0					
ANR	201105	CallExpression	getNumNodes ( )		201073	1					
ANR	201106	Callee	getNumNodes		201073	0					
ANR	201107	Identifier	getNumNodes		201073	0					
ANR	201108	ArgumentList			201073	1					
ANR	201109	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		201073	3					
ANR	201110	ForInit	i = 0 ;	812:6:16695:16698	201073	0	True				
ANR	201111	AssignmentExpression	i = 0		201073	0		=			
ANR	201112	Identifier	i		201073	0					
ANR	201113	PrimaryExpression	0		201073	1					
ANR	201114	Condition	i < numNodes	812:11:16700:16709	201073	1	True				
ANR	201115	RelationalExpression	i < numNodes		201073	0		<			
ANR	201116	Identifier	i		201073	0					
ANR	201117	Identifier	numNodes		201073	1					
ANR	201118	PostIncDecOperationExpression	i ++	812:23:16712:16714	201073	2	True				
ANR	201119	Identifier	i		201073	0					
ANR	201120	IncDec	++		201073	1					
ANR	201121	ExpressionStatement	twoHopArcTable . appendRow ( )	813:2:16720:16746	201073	3	True				
ANR	201122	CallExpression	twoHopArcTable . appendRow ( )		201073	0					
ANR	201123	Callee	twoHopArcTable . appendRow		201073	0					
ANR	201124	MemberAccess	twoHopArcTable . appendRow		201073	0					
ANR	201125	Identifier	twoHopArcTable		201073	0					
ANR	201126	Identifier	appendRow		201073	1					
ANR	201127	ArgumentList			201073	1					
ANR	201128	IdentifierDeclStatement	int * colorTable ;	816:1:16773:16788	201073	4	True				
ANR	201129	IdentifierDecl	* colorTable		201073	0					
ANR	201130	IdentifierDeclType	int *		201073	0					
ANR	201131	Identifier	colorTable		201073	1					
ANR	201132	ExpressionStatement	colorTable = new int [ numNodes ]	817:1:16791:16821	201073	5	True				
ANR	201133	AssignmentExpression	colorTable = new int [ numNodes ]		201073	0		=			
ANR	201134	Identifier	colorTable		201073	0					
ANR	201135	Identifier	numNodes		201073	1					
ANR	201136	IfStatement	if ( NULL == colorTable )		201073	6					
ANR	201137	Condition	NULL == colorTable	818:5:16828:16843	201073	0	True				
ANR	201138	EqualityExpression	NULL == colorTable		201073	0		==			
ANR	201139	Identifier	NULL		201073	0					
ANR	201140	Identifier	colorTable		201073	1					
ANR	201141	ThrowStatement	"throw ""Graph::makeSquareGraph(void), colorTable is NULL"" ;"	819:2:16849:16905	201073	1	True				
ANR	201142	PrimaryExpression	"""Graph::makeSquareGraph(void), colorTable is NULL"""		201073	0					
ANR	201143	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		201073	7					
ANR	201144	ForInit	i = 0 ;	820:6:16913:16916	201073	0	True				
ANR	201145	AssignmentExpression	i = 0		201073	0		=			
ANR	201146	Identifier	i		201073	0					
ANR	201147	PrimaryExpression	0		201073	1					
ANR	201148	Condition	i < numNodes	820:11:16918:16927	201073	1	True				
ANR	201149	RelationalExpression	i < numNodes		201073	0		<			
ANR	201150	Identifier	i		201073	0					
ANR	201151	Identifier	numNodes		201073	1					
ANR	201152	PostIncDecOperationExpression	i ++	820:23:16930:16932	201073	2	True				
ANR	201153	Identifier	i		201073	0					
ANR	201154	IncDec	++		201073	1					
ANR	201155	ExpressionStatement	colorTable [ i ] = - 1	821:2:16938:16956	201073	3	True				
ANR	201156	AssignmentExpression	colorTable [ i ] = - 1		201073	0		=			
ANR	201157	ArrayIndexing	colorTable [ i ]		201073	0					
ANR	201158	Identifier	colorTable		201073	0					
ANR	201159	Identifier	i		201073	1					
ANR	201160	UnaryOperationExpression	- 1		201073	1					
ANR	201161	UnaryOperator	-		201073	0					
ANR	201162	PrimaryExpression	1		201073	1					
ANR	201163	ForStatement	for ( u = 0 ; u < numNodes ; u ++ )		201073	8					
ANR	201164	ForInit	u = 0 ;	823:6:16965:16968	201073	0	True				
ANR	201165	AssignmentExpression	u = 0		201073	0		=			
ANR	201166	Identifier	u		201073	0					
ANR	201167	PrimaryExpression	0		201073	1					
ANR	201168	Condition	u < numNodes	823:11:16970:16979	201073	1	True				
ANR	201169	RelationalExpression	u < numNodes		201073	0		<			
ANR	201170	Identifier	u		201073	0					
ANR	201171	Identifier	numNodes		201073	1					
ANR	201172	PostIncDecOperationExpression	u ++	823:23:16982:16984	201073	2	True				
ANR	201173	Identifier	u		201073	0					
ANR	201174	IncDec	++		201073	1					
ANR	201175	CompoundStatement		23:2:536:564	201073	3					
ANR	201176	IdentifierDeclStatement	int numArcsU = getNumArcs ( u ) ;	828:2:17091:17119	201073	0	True				
ANR	201177	IdentifierDecl	numArcsU = getNumArcs ( u )		201073	0					
ANR	201178	IdentifierDeclType	int		201073	0					
ANR	201179	Identifier	numArcsU		201073	1					
ANR	201180	AssignmentExpression	numArcsU = getNumArcs ( u )		201073	2		=			
ANR	201181	Identifier	numArcsU		201073	0					
ANR	201182	CallExpression	getNumArcs ( u )		201073	1					
ANR	201183	Callee	getNumArcs		201073	0					
ANR	201184	Identifier	getNumArcs		201073	0					
ANR	201185	ArgumentList	u		201073	1					
ANR	201186	Argument	u		201073	0					
ANR	201187	Identifier	u		201073	0					
ANR	201188	ForStatement	for ( j = 0 ; j < numArcsU ; j ++ )		201073	1					
ANR	201189	ForInit	j = 0 ;	829:6:17127:17130	201073	0	True				
ANR	201190	AssignmentExpression	j = 0		201073	0		=			
ANR	201191	Identifier	j		201073	0					
ANR	201192	PrimaryExpression	0		201073	1					
ANR	201193	Condition	j < numArcsU	829:11:17132:17141	201073	1	True				
ANR	201194	RelationalExpression	j < numArcsU		201073	0		<			
ANR	201195	Identifier	j		201073	0					
ANR	201196	Identifier	numArcsU		201073	1					
ANR	201197	PostIncDecOperationExpression	j ++	829:23:17144:17146	201073	2	True				
ANR	201198	Identifier	j		201073	0					
ANR	201199	IncDec	++		201073	1					
ANR	201200	CompoundStatement		30:3:689:717	201073	3					
ANR	201201	ExpressionStatement	"v = getArc ( u , j )"	832:3:17186:17201	201073	0	True				
ANR	201202	AssignmentExpression	"v = getArc ( u , j )"		201073	0		=			
ANR	201203	Identifier	v		201073	0					
ANR	201204	CallExpression	"getArc ( u , j )"		201073	1					
ANR	201205	Callee	getArc		201073	0					
ANR	201206	Identifier	getArc		201073	0					
ANR	201207	ArgumentList	u		201073	1					
ANR	201208	Argument	u		201073	0					
ANR	201209	Identifier	u		201073	0					
ANR	201210	Argument	j		201073	1					
ANR	201211	Identifier	j		201073	0					
ANR	201212	IdentifierDeclStatement	int numArcsV = getNumArcs ( v ) ;	835:3:17244:17272	201073	1	True				
ANR	201213	IdentifierDecl	numArcsV = getNumArcs ( v )		201073	0					
ANR	201214	IdentifierDeclType	int		201073	0					
ANR	201215	Identifier	numArcsV		201073	1					
ANR	201216	AssignmentExpression	numArcsV = getNumArcs ( v )		201073	2		=			
ANR	201217	Identifier	numArcsV		201073	0					
ANR	201218	CallExpression	getNumArcs ( v )		201073	1					
ANR	201219	Callee	getNumArcs		201073	0					
ANR	201220	Identifier	getNumArcs		201073	0					
ANR	201221	ArgumentList	v		201073	1					
ANR	201222	Argument	v		201073	0					
ANR	201223	Identifier	v		201073	0					
ANR	201224	ForStatement	for ( k = 0 ; k < numArcsV ; k ++ )		201073	2					
ANR	201225	ForInit	k = 0 ;	836:7:17281:17284	201073	0	True				
ANR	201226	AssignmentExpression	k = 0		201073	0		=			
ANR	201227	Identifier	k		201073	0					
ANR	201228	PrimaryExpression	0		201073	1					
ANR	201229	Condition	k < numArcsV	836:12:17286:17295	201073	1	True				
ANR	201230	RelationalExpression	k < numArcsV		201073	0		<			
ANR	201231	Identifier	k		201073	0					
ANR	201232	Identifier	numArcsV		201073	1					
ANR	201233	PostIncDecOperationExpression	k ++	836:24:17298:17300	201073	2	True				
ANR	201234	Identifier	k		201073	0					
ANR	201235	IncDec	++		201073	1					
ANR	201236	CompoundStatement		31:30:749:749	201073	3					
ANR	201237	ExpressionStatement	"w = getArc ( v , k )"	837:4:17310:17325	201073	0	True				
ANR	201238	AssignmentExpression	"w = getArc ( v , k )"		201073	0		=			
ANR	201239	Identifier	w		201073	0					
ANR	201240	CallExpression	"getArc ( v , k )"		201073	1					
ANR	201241	Callee	getArc		201073	0					
ANR	201242	Identifier	getArc		201073	0					
ANR	201243	ArgumentList	v		201073	1					
ANR	201244	Argument	v		201073	0					
ANR	201245	Identifier	v		201073	0					
ANR	201246	Argument	k		201073	1					
ANR	201247	Identifier	k		201073	0					
ANR	201248	IfStatement	if ( colorTable [ w ] < u )		201073	1					
ANR	201249	Condition	colorTable [ w ] < u	838:8:17335:17351	201073	0	True				
ANR	201250	RelationalExpression	colorTable [ w ] < u		201073	0		<			
ANR	201251	ArrayIndexing	colorTable [ w ]		201073	0					
ANR	201252	Identifier	colorTable		201073	0					
ANR	201253	Identifier	w		201073	1					
ANR	201254	Identifier	u		201073	1					
ANR	201255	CompoundStatement		33:28:800:800	201073	1					
ANR	201256	ExpressionStatement	"twoHopArcTable . append ( u , w )"	839:5:17362:17388	201073	0	True				
ANR	201257	CallExpression	"twoHopArcTable . append ( u , w )"		201073	0					
ANR	201258	Callee	twoHopArcTable . append		201073	0					
ANR	201259	MemberAccess	twoHopArcTable . append		201073	0					
ANR	201260	Identifier	twoHopArcTable		201073	0					
ANR	201261	Identifier	append		201073	1					
ANR	201262	ArgumentList	u		201073	1					
ANR	201263	Argument	u		201073	0					
ANR	201264	Identifier	u		201073	0					
ANR	201265	Argument	w		201073	1					
ANR	201266	Identifier	w		201073	0					
ANR	201267	ExpressionStatement	colorTable [ w ] = u	840:5:17436:17453	201073	1	True				
ANR	201268	AssignmentExpression	colorTable [ w ] = u		201073	0		=			
ANR	201269	ArrayIndexing	colorTable [ w ]		201073	0					
ANR	201270	Identifier	colorTable		201073	0					
ANR	201271	Identifier	w		201073	1					
ANR	201272	Identifier	u		201073	1					
ANR	201273	ExpressionStatement		841:5:17460:17460	201073	2	True				
ANR	201274	ExpressionStatement		842:4:17466:17466	201073	3	True				
ANR	201275	ExpressionStatement		843:3:17471:17471	201073	2	True				
ANR	201276	ExpressionStatement		844:2:17475:17475	201073	9	True				
ANR	201277	Statement	delete	846:1:17479:17484	201073	10	True				
ANR	201278	Statement	[	846:7:17485:17485	201073	11	True				
ANR	201279	Statement	]	846:8:17486:17486	201073	12	True				
ANR	201280	ExpressionStatement	colorTable	846:10:17488:17498	201073	13	True				
ANR	201281	Identifier	colorTable		201073	0					
ANR	201282	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		201073	14					
ANR	201283	ForInit	i = 0 ;	849:6:17562:17565	201073	0	True				
ANR	201284	AssignmentExpression	i = 0		201073	0		=			
ANR	201285	Identifier	i		201073	0					
ANR	201286	PrimaryExpression	0		201073	1					
ANR	201287	Condition	i < numNodes	849:11:17567:17576	201073	1	True				
ANR	201288	RelationalExpression	i < numNodes		201073	0		<			
ANR	201289	Identifier	i		201073	0					
ANR	201290	Identifier	numNodes		201073	1					
ANR	201291	PostIncDecOperationExpression	i ++	849:23:17579:17581	201073	2	True				
ANR	201292	Identifier	i		201073	0					
ANR	201293	IncDec	++		201073	1					
ANR	201294	CompoundStatement		46:2:1058:1098	201073	3					
ANR	201295	ExpressionStatement	arcTable . resetRow ( i )	850:2:17589:17609	201073	0	True				
ANR	201296	CallExpression	arcTable . resetRow ( i )		201073	0					
ANR	201297	Callee	arcTable . resetRow		201073	0					
ANR	201298	MemberAccess	arcTable . resetRow		201073	0					
ANR	201299	Identifier	arcTable		201073	0					
ANR	201300	Identifier	resetRow		201073	1					
ANR	201301	ArgumentList	i		201073	1					
ANR	201302	Argument	i		201073	0					
ANR	201303	Identifier	i		201073	0					
ANR	201304	IdentifierDeclStatement	int numArcs = twoHopArcTable . getNumElem ( i ) ;	851:2:17613:17653	201073	1	True				
ANR	201305	IdentifierDecl	numArcs = twoHopArcTable . getNumElem ( i )		201073	0					
ANR	201306	IdentifierDeclType	int		201073	0					
ANR	201307	Identifier	numArcs		201073	1					
ANR	201308	AssignmentExpression	numArcs = twoHopArcTable . getNumElem ( i )		201073	2		=			
ANR	201309	Identifier	numArcs		201073	0					
ANR	201310	CallExpression	twoHopArcTable . getNumElem ( i )		201073	1					
ANR	201311	Callee	twoHopArcTable . getNumElem		201073	0					
ANR	201312	MemberAccess	twoHopArcTable . getNumElem		201073	0					
ANR	201313	Identifier	twoHopArcTable		201073	0					
ANR	201314	Identifier	getNumElem		201073	1					
ANR	201315	ArgumentList	i		201073	1					
ANR	201316	Argument	i		201073	0					
ANR	201317	Identifier	i		201073	0					
ANR	201318	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		201073	2					
ANR	201319	ForInit	j = 0 ;	852:7:17662:17665	201073	0	True				
ANR	201320	AssignmentExpression	j = 0		201073	0		=			
ANR	201321	Identifier	j		201073	0					
ANR	201322	PrimaryExpression	0		201073	1					
ANR	201323	Condition	j < numArcs	852:12:17667:17675	201073	1	True				
ANR	201324	RelationalExpression	j < numArcs		201073	0		<			
ANR	201325	Identifier	j		201073	0					
ANR	201326	Identifier	numArcs		201073	1					
ANR	201327	PostIncDecOperationExpression	j ++	852:23:17678:17680	201073	2	True				
ANR	201328	Identifier	j		201073	0					
ANR	201329	IncDec	++		201073	1					
ANR	201330	CompoundStatement		48:3:1134:1173	201073	3					
ANR	201331	IdentifierDeclStatement	"int child = twoHopArcTable . getElem ( i , j ) ;"	853:3:17689:17728	201073	0	True				
ANR	201332	IdentifierDecl	"child = twoHopArcTable . getElem ( i , j )"		201073	0					
ANR	201333	IdentifierDeclType	int		201073	0					
ANR	201334	Identifier	child		201073	1					
ANR	201335	AssignmentExpression	"child = twoHopArcTable . getElem ( i , j )"		201073	2		=			
ANR	201336	Identifier	child		201073	0					
ANR	201337	CallExpression	"twoHopArcTable . getElem ( i , j )"		201073	1					
ANR	201338	Callee	twoHopArcTable . getElem		201073	0					
ANR	201339	MemberAccess	twoHopArcTable . getElem		201073	0					
ANR	201340	Identifier	twoHopArcTable		201073	0					
ANR	201341	Identifier	getElem		201073	1					
ANR	201342	ArgumentList	i		201073	1					
ANR	201343	Argument	i		201073	0					
ANR	201344	Identifier	i		201073	0					
ANR	201345	Argument	j		201073	1					
ANR	201346	Identifier	j		201073	0					
ANR	201347	ExpressionStatement	"arcTable . append ( i , child )"	854:3:17733:17757	201073	1	True				
ANR	201348	CallExpression	"arcTable . append ( i , child )"		201073	0					
ANR	201349	Callee	arcTable . append		201073	0					
ANR	201350	MemberAccess	arcTable . append		201073	0					
ANR	201351	Identifier	arcTable		201073	0					
ANR	201352	Identifier	append		201073	1					
ANR	201353	ArgumentList	i		201073	1					
ANR	201354	Argument	i		201073	0					
ANR	201355	Identifier	i		201073	0					
ANR	201356	Argument	child		201073	1					
ANR	201357	Identifier	child		201073	0					
ANR	201358	ExpressionStatement		855:3:17762:17762	201073	3	True				
ANR	201359	ExpressionStatement		856:2:17766:17766	201073	15	True				
ANR	201360	ReturnType	void		201073	1					
ANR	201361	Identifier	Graph :: square		201073	2					
ANR	201362	ParameterList			201073	3					
ANR	201363	CFGEntryNode	ENTRY		201073		True				
ANR	201364	CFGExitNode	EXIT		201073		True				
ANR	201365	CFGExceptionNode	EXCEPTION		201073		True				
ANR	201366	Symbol	twoHopArcTable		201073						
ANR	201367	Symbol	* w		201073						
ANR	201368	Symbol	twoHopArcTable . getNumElem		201073						
ANR	201369	Symbol	twoHopArcTable . getElem		201073						
ANR	201370	Symbol	NULL		201073						
ANR	201371	Symbol	i		201073						
ANR	201372	Symbol	arcTable		201073						
ANR	201373	Symbol	j		201073						
ANR	201374	Symbol	k		201073						
ANR	201375	Symbol	numArcsV		201073						
ANR	201376	Symbol	numArcsU		201073						
ANR	201377	Symbol	colorTable		201073						
ANR	201378	Symbol	getNumArcs		201073						
ANR	201379	Symbol	numNodes		201073						
ANR	201380	Symbol	getNumNodes		201073						
ANR	201381	Symbol	* i		201073						
ANR	201382	Symbol	getArc		201073						
ANR	201383	Symbol	numArcs		201073						
ANR	201384	Symbol	u		201073						
ANR	201385	Symbol	v		201073						
ANR	201386	Symbol	w		201073						
ANR	201387	Symbol	* colorTable		201073						
ANR	201388	Symbol	child		201073						
ANR	201389	Function	Graph :: initializeWith	875:0:18049:18445							
ANR	201390	FunctionDef	Graph :: initializeWith (const Graph & g)		201389	0					
ANR	201391	CompoundStatement		876:0:18092:18445	201389	0					
ANR	201392	IfStatement	if ( 0 != getNumNodes ( ) )		201389	0					
ANR	201393	Condition	0 != getNumNodes ( )	877:5:18099:18114	201389	0	True				
ANR	201394	EqualityExpression	0 != getNumNodes ( )		201389	0		!=			
ANR	201395	PrimaryExpression	0		201389	0					
ANR	201396	CallExpression	getNumNodes ( )		201389	1					
ANR	201397	Callee	getNumNodes		201389	0					
ANR	201398	Identifier	getNumNodes		201389	0					
ANR	201399	ArgumentList			201389	1					
ANR	201400	ThrowStatement	"throw ""Graph::absorbTopology, getNumNodes is not zero"" ;"	878:2:18120:18174	201389	1	True				
ANR	201401	PrimaryExpression	"""Graph::absorbTopology, getNumNodes is not zero"""		201389	0					
ANR	201402	IdentifierDeclStatement	int numNodes = g . getNumNodes ( ) ;	881:1:18193:18221	201389	1	True				
ANR	201403	IdentifierDecl	numNodes = g . getNumNodes ( )		201389	0					
ANR	201404	IdentifierDeclType	int		201389	0					
ANR	201405	Identifier	numNodes		201389	1					
ANR	201406	AssignmentExpression	numNodes = g . getNumNodes ( )		201389	2		=			
ANR	201407	Identifier	numNodes		201389	0					
ANR	201408	CallExpression	g . getNumNodes ( )		201389	1					
ANR	201409	Callee	g . getNumNodes		201389	0					
ANR	201410	MemberAccess	g . getNumNodes		201389	0					
ANR	201411	Identifier	g		201389	0					
ANR	201412	Identifier	getNumNodes		201389	1					
ANR	201413	ArgumentList			201389	1					
ANR	201414	ForStatement	for ( int i = 0 ; i < numNodes ; i ++ )		201389	2					
ANR	201415	ForInit	int i = 0 ;	882:6:18229:18236	201389	0	True				
ANR	201416	IdentifierDeclStatement	int i = 0 ;		201389	0					
ANR	201417	IdentifierDecl	i = 0		201389	0					
ANR	201418	IdentifierDeclType	int		201389	0					
ANR	201419	Identifier	i		201389	1					
ANR	201420	AssignmentExpression	i = 0		201389	2		=			
ANR	201421	Identifier	i		201389	0					
ANR	201422	PrimaryExpression	0		201389	1					
ANR	201423	Condition	i < numNodes	882:15:18238:18247	201389	1	True				
ANR	201424	RelationalExpression	i < numNodes		201389	0		<			
ANR	201425	Identifier	i		201389	0					
ANR	201426	Identifier	numNodes		201389	1					
ANR	201427	PostIncDecOperationExpression	i ++	882:27:18250:18252	201389	2	True				
ANR	201428	Identifier	i		201389	0					
ANR	201429	IncDec	++		201389	1					
ANR	201430	ExpressionStatement	addNode ( )	883:2:18258:18267	201389	3	True				
ANR	201431	CallExpression	addNode ( )		201389	0					
ANR	201432	Callee	addNode		201389	0					
ANR	201433	Identifier	addNode		201389	0					
ANR	201434	ArgumentList			201389	1					
ANR	201435	ForStatement	for ( int i = 0 ; i < numNodes ; i ++ )		201389	3					
ANR	201436	ForInit	int i = 0 ;	886:6:18290:18297	201389	0	True				
ANR	201437	IdentifierDeclStatement	int i = 0 ;		201389	0					
ANR	201438	IdentifierDecl	i = 0		201389	0					
ANR	201439	IdentifierDeclType	int		201389	0					
ANR	201440	Identifier	i		201389	1					
ANR	201441	AssignmentExpression	i = 0		201389	2		=			
ANR	201442	Identifier	i		201389	0					
ANR	201443	PrimaryExpression	0		201389	1					
ANR	201444	Condition	i < numNodes	886:15:18299:18308	201389	1	True				
ANR	201445	RelationalExpression	i < numNodes		201389	0		<			
ANR	201446	Identifier	i		201389	0					
ANR	201447	Identifier	numNodes		201389	1					
ANR	201448	PostIncDecOperationExpression	i ++	886:27:18311:18313	201389	2	True				
ANR	201449	Identifier	i		201389	0					
ANR	201450	IncDec	++		201389	1					
ANR	201451	CompoundStatement		12:2:228:255	201389	3					
ANR	201452	IdentifierDeclStatement	int numArcs = g . getNumArcs ( i ) ;	887:2:18321:18348	201389	0	True				
ANR	201453	IdentifierDecl	numArcs = g . getNumArcs ( i )		201389	0					
ANR	201454	IdentifierDeclType	int		201389	0					
ANR	201455	Identifier	numArcs		201389	1					
ANR	201456	AssignmentExpression	numArcs = g . getNumArcs ( i )		201389	2		=			
ANR	201457	Identifier	numArcs		201389	0					
ANR	201458	CallExpression	g . getNumArcs ( i )		201389	1					
ANR	201459	Callee	g . getNumArcs		201389	0					
ANR	201460	MemberAccess	g . getNumArcs		201389	0					
ANR	201461	Identifier	g		201389	0					
ANR	201462	Identifier	getNumArcs		201389	1					
ANR	201463	ArgumentList	i		201389	1					
ANR	201464	Argument	i		201389	0					
ANR	201465	Identifier	i		201389	0					
ANR	201466	ForStatement	for ( int j = 0 ; j < numArcs ; j ++ )		201389	1					
ANR	201467	ForInit	int j = 0 ;	888:7:18357:18364	201389	0	True				
ANR	201468	IdentifierDeclStatement	int j = 0 ;		201389	0					
ANR	201469	IdentifierDecl	j = 0		201389	0					
ANR	201470	IdentifierDeclType	int		201389	0					
ANR	201471	Identifier	j		201389	1					
ANR	201472	AssignmentExpression	j = 0		201389	2		=			
ANR	201473	Identifier	j		201389	0					
ANR	201474	PrimaryExpression	0		201389	1					
ANR	201475	Condition	j < numArcs	888:16:18366:18374	201389	1	True				
ANR	201476	RelationalExpression	j < numArcs		201389	0		<			
ANR	201477	Identifier	j		201389	0					
ANR	201478	Identifier	numArcs		201389	1					
ANR	201479	PostIncDecOperationExpression	j ++	888:27:18377:18379	201389	2	True				
ANR	201480	Identifier	j		201389	0					
ANR	201481	IncDec	++		201389	1					
ANR	201482	CompoundStatement		14:3:295:320	201389	3					
ANR	201483	IdentifierDeclStatement	"int child = g . getArc ( i , j ) ;"	889:3:18388:18413	201389	0	True				
ANR	201484	IdentifierDecl	"child = g . getArc ( i , j )"		201389	0					
ANR	201485	IdentifierDeclType	int		201389	0					
ANR	201486	Identifier	child		201389	1					
ANR	201487	AssignmentExpression	"child = g . getArc ( i , j )"		201389	2		=			
ANR	201488	Identifier	child		201389	0					
ANR	201489	CallExpression	"g . getArc ( i , j )"		201389	1					
ANR	201490	Callee	g . getArc		201389	0					
ANR	201491	MemberAccess	g . getArc		201389	0					
ANR	201492	Identifier	g		201389	0					
ANR	201493	Identifier	getArc		201389	1					
ANR	201494	ArgumentList	i		201389	1					
ANR	201495	Argument	i		201389	0					
ANR	201496	Identifier	i		201389	0					
ANR	201497	Argument	j		201389	1					
ANR	201498	Identifier	j		201389	0					
ANR	201499	ExpressionStatement	"addArc ( i , child )"	890:3:18418:18433	201389	1	True				
ANR	201500	CallExpression	"addArc ( i , child )"		201389	0					
ANR	201501	Callee	addArc		201389	0					
ANR	201502	Identifier	addArc		201389	0					
ANR	201503	ArgumentList	i		201389	1					
ANR	201504	Argument	i		201389	0					
ANR	201505	Identifier	i		201389	0					
ANR	201506	Argument	child		201389	1					
ANR	201507	Identifier	child		201389	0					
ANR	201508	ExpressionStatement		891:3:18438:18438	201389	2	True				
ANR	201509	ExpressionStatement		892:2:18442:18442	201389	4	True				
ANR	201510	ReturnType	void		201389	1					
ANR	201511	Identifier	Graph :: initializeWith		201389	2					
ANR	201512	ParameterList	const Graph & g		201389	3					
ANR	201513	Parameter	const Graph & g	875:27:18076:18089	201389	0	True				
ANR	201514	ParameterType	const Graph &		201389	0					
ANR	201515	Identifier	g		201389	1					
ANR	201516	CFGEntryNode	ENTRY		201389		True				
ANR	201517	CFGExitNode	EXIT		201389		True				
ANR	201518	CFGExceptionNode	EXCEPTION		201389		True				
ANR	201519	Symbol	getNumNodes		201389						
ANR	201520	Symbol	numNodes		201389						
ANR	201521	Symbol	g . getNumNodes		201389						
ANR	201522	Symbol	g . getNumArcs		201389						
ANR	201523	Symbol	numArcs		201389						
ANR	201524	Symbol	g		201389						
ANR	201525	Symbol	g . getArc		201389						
ANR	201526	Symbol	i		201389						
ANR	201527	Symbol	j		201389						
ANR	201528	Symbol	child		201389						
ANR	201529	Function	Graph_test	910:0:18587:20599							
ANR	201530	FunctionDef	Graph_test ()		201529	0					
ANR	201531	CompoundStatement		911:0:18609:20599	201529	0					
ANR	201532	ExpressionStatement	"printf ( ""[[[ BEGIN testing Graph\\n"" )"	912:1:18612:18647	201529	0	True				
ANR	201533	CallExpression	"printf ( ""[[[ BEGIN testing Graph\\n"" )"		201529	0					
ANR	201534	Callee	printf		201529	0					
ANR	201535	Identifier	printf		201529	0					
ANR	201536	ArgumentList	"""[[[ BEGIN testing Graph\\n"""		201529	1					
ANR	201537	Argument	"""[[[ BEGIN testing Graph\\n"""		201529	0					
ANR	201538	PrimaryExpression	"""[[[ BEGIN testing Graph\\n"""		201529	0					
ANR	201539	IdentifierDeclStatement	Graph g ;	914:1:18651:18658	201529	1	True				
ANR	201540	IdentifierDecl	g		201529	0					
ANR	201541	IdentifierDeclType	Graph		201529	0					
ANR	201542	Identifier	g		201529	1					
ANR	201543	ExpressionStatement	g . printAsText ( )	916:1:18662:18677	201529	2	True				
ANR	201544	CallExpression	g . printAsText ( )		201529	0					
ANR	201545	Callee	g . printAsText		201529	0					
ANR	201546	MemberAccess	g . printAsText		201529	0					
ANR	201547	Identifier	g		201529	0					
ANR	201548	Identifier	printAsText		201529	1					
ANR	201549	ArgumentList			201529	1					
ANR	201550	IfStatement	if ( 0 != g . addNode ( ) )		201529	3					
ANR	201551	Condition	0 != g . addNode ( )	917:5:18694:18707	201529	0	True				
ANR	201552	EqualityExpression	0 != g . addNode ( )		201529	0		!=			
ANR	201553	PrimaryExpression	0		201529	0					
ANR	201554	CallExpression	g . addNode ( )		201529	1					
ANR	201555	Callee	g . addNode		201529	0					
ANR	201556	MemberAccess	g . addNode		201529	0					
ANR	201557	Identifier	g		201529	0					
ANR	201558	Identifier	addNode		201529	1					
ANR	201559	ArgumentList			201529	1					
ANR	201560	ThrowStatement	"throw ""Graph_test, 1"" ;"	918:2:18740:18761	201529	1	True				
ANR	201561	PrimaryExpression	"""Graph_test, 1"""		201529	0					
ANR	201562	ExpressionStatement	g . printAsText ( )	919:1:18764:18779	201529	4	True				
ANR	201563	CallExpression	g . printAsText ( )		201529	0					
ANR	201564	Callee	g . printAsText		201529	0					
ANR	201565	MemberAccess	g . printAsText		201529	0					
ANR	201566	Identifier	g		201529	0					
ANR	201567	Identifier	printAsText		201529	1					
ANR	201568	ArgumentList			201529	1					
ANR	201569	IfStatement	if ( 1 != g . addNode ( ) )		201529	5					
ANR	201570	Condition	1 != g . addNode ( )	920:5:18786:18799	201529	0	True				
ANR	201571	EqualityExpression	1 != g . addNode ( )		201529	0		!=			
ANR	201572	PrimaryExpression	1		201529	0					
ANR	201573	CallExpression	g . addNode ( )		201529	1					
ANR	201574	Callee	g . addNode		201529	0					
ANR	201575	MemberAccess	g . addNode		201529	0					
ANR	201576	Identifier	g		201529	0					
ANR	201577	Identifier	addNode		201529	1					
ANR	201578	ArgumentList			201529	1					
ANR	201579	ThrowStatement	"throw ""Graph_test, 2"" ;"	921:2:18805:18826	201529	1	True				
ANR	201580	PrimaryExpression	"""Graph_test, 2"""		201529	0					
ANR	201581	ExpressionStatement	"g . addArc ( 0 , 1 )"	922:1:18829:18842	201529	6	True				
ANR	201582	CallExpression	"g . addArc ( 0 , 1 )"		201529	0					
ANR	201583	Callee	g . addArc		201529	0					
ANR	201584	MemberAccess	g . addArc		201529	0					
ANR	201585	Identifier	g		201529	0					
ANR	201586	Identifier	addArc		201529	1					
ANR	201587	ArgumentList	0		201529	1					
ANR	201588	Argument	0		201529	0					
ANR	201589	PrimaryExpression	0		201529	0					
ANR	201590	Argument	1		201529	1					
ANR	201591	PrimaryExpression	1		201529	0					
ANR	201592	ExpressionStatement	g . printAsText ( )	923:1:18845:18860	201529	7	True				
ANR	201593	CallExpression	g . printAsText ( )		201529	0					
ANR	201594	Callee	g . printAsText		201529	0					
ANR	201595	MemberAccess	g . printAsText		201529	0					
ANR	201596	Identifier	g		201529	0					
ANR	201597	Identifier	printAsText		201529	1					
ANR	201598	ArgumentList			201529	1					
ANR	201599	TryStatement	try		201529	8					
ANR	201600	CompoundStatement		15:4:280:280	201529	0					
ANR	201601	ExpressionStatement	"g . addArc ( 2 , 0 )"		201529	0					
ANR	201602	CallExpression	"g . addArc ( 2 , 0 )"		201529	0					
ANR	201603	Callee	g . addArc		201529	0					
ANR	201604	MemberAccess	g . addArc		201529	0					
ANR	201605	Identifier	g		201529	0					
ANR	201606	Identifier	addArc		201529	1					
ANR	201607	ArgumentList	2		201529	1					
ANR	201608	Argument	2		201529	0					
ANR	201609	PrimaryExpression	2		201529	0					
ANR	201610	Argument	0		201529	1					
ANR	201611	PrimaryExpression	0		201529	0					
ANR	201612	CatchList			201529	1					
ANR	201613	CatchStatement	catch ( char * s )		201529	0					
ANR	201614	Identifier	s		201529	0					
ANR	201615	CompoundStatement		17:19:318:318	201529	1					
ANR	201616	ExpressionStatement	alert ( s )	928:2:18932:18940	201529	0	True				
ANR	201617	CallExpression	alert ( s )		201529	0					
ANR	201618	Callee	alert		201529	0					
ANR	201619	Identifier	alert		201529	0					
ANR	201620	ArgumentList	s		201529	1					
ANR	201621	Argument	s		201529	0					
ANR	201622	Identifier	s		201529	0					
ANR	201623	ExpressionStatement		929:2:18944:18944	201529	9	True				
ANR	201624	TryStatement	try		201529	10					
ANR	201625	CompoundStatement		20:4:340:340	201529	0					
ANR	201626	ExpressionStatement	"g . addArc ( 1 , 2 )"		201529	0					
ANR	201627	CallExpression	"g . addArc ( 1 , 2 )"		201529	0					
ANR	201628	Callee	g . addArc		201529	0					
ANR	201629	MemberAccess	g . addArc		201529	0					
ANR	201630	Identifier	g		201529	0					
ANR	201631	Identifier	addArc		201529	1					
ANR	201632	ArgumentList	1		201529	1					
ANR	201633	Argument	1		201529	0					
ANR	201634	PrimaryExpression	1		201529	0					
ANR	201635	Argument	2		201529	1					
ANR	201636	PrimaryExpression	2		201529	0					
ANR	201637	CatchList			201529	1					
ANR	201638	CatchStatement	catch ( char * s )		201529	0					
ANR	201639	Identifier	s		201529	0					
ANR	201640	CompoundStatement		22:19:378:378	201529	1					
ANR	201641	ExpressionStatement	alert ( s )	933:2:18992:19000	201529	0	True				
ANR	201642	CallExpression	alert ( s )		201529	0					
ANR	201643	Callee	alert		201529	0					
ANR	201644	Identifier	alert		201529	0					
ANR	201645	ArgumentList	s		201529	1					
ANR	201646	Argument	s		201529	0					
ANR	201647	Identifier	s		201529	0					
ANR	201648	ExpressionStatement		934:2:19004:19004	201529	11	True				
ANR	201649	IfStatement	if ( 2 != g . getNumNodes ( ) )		201529	12					
ANR	201650	Condition	2 != g . getNumNodes ( )	936:5:19012:19029	201529	0	True				
ANR	201651	EqualityExpression	2 != g . getNumNodes ( )		201529	0		!=			
ANR	201652	PrimaryExpression	2		201529	0					
ANR	201653	CallExpression	g . getNumNodes ( )		201529	1					
ANR	201654	Callee	g . getNumNodes		201529	0					
ANR	201655	MemberAccess	g . getNumNodes		201529	0					
ANR	201656	Identifier	g		201529	0					
ANR	201657	Identifier	getNumNodes		201529	1					
ANR	201658	ArgumentList			201529	1					
ANR	201659	ThrowStatement	"throw ""Graph_test, 3"" ;"	937:2:19035:19056	201529	1	True				
ANR	201660	PrimaryExpression	"""Graph_test, 3"""		201529	0					
ANR	201661	IfStatement	if ( 1 != g . getNumArcs ( 0 ) )		201529	13					
ANR	201662	Condition	1 != g . getNumArcs ( 0 )	938:5:19063:19080	201529	0	True				
ANR	201663	EqualityExpression	1 != g . getNumArcs ( 0 )		201529	0		!=			
ANR	201664	PrimaryExpression	1		201529	0					
ANR	201665	CallExpression	g . getNumArcs ( 0 )		201529	1					
ANR	201666	Callee	g . getNumArcs		201529	0					
ANR	201667	MemberAccess	g . getNumArcs		201529	0					
ANR	201668	Identifier	g		201529	0					
ANR	201669	Identifier	getNumArcs		201529	1					
ANR	201670	ArgumentList	0		201529	1					
ANR	201671	Argument	0		201529	0					
ANR	201672	PrimaryExpression	0		201529	0					
ANR	201673	ThrowStatement	"throw ""Graph_test, 4"" ;"	939:2:19086:19107	201529	1	True				
ANR	201674	PrimaryExpression	"""Graph_test, 4"""		201529	0					
ANR	201675	IfStatement	if ( 0 != g . getNumArcs ( 1 ) )		201529	14					
ANR	201676	Condition	0 != g . getNumArcs ( 1 )	940:5:19114:19131	201529	0	True				
ANR	201677	EqualityExpression	0 != g . getNumArcs ( 1 )		201529	0		!=			
ANR	201678	PrimaryExpression	0		201529	0					
ANR	201679	CallExpression	g . getNumArcs ( 1 )		201529	1					
ANR	201680	Callee	g . getNumArcs		201529	0					
ANR	201681	MemberAccess	g . getNumArcs		201529	0					
ANR	201682	Identifier	g		201529	0					
ANR	201683	Identifier	getNumArcs		201529	1					
ANR	201684	ArgumentList	1		201529	1					
ANR	201685	Argument	1		201529	0					
ANR	201686	PrimaryExpression	1		201529	0					
ANR	201687	ThrowStatement	"throw ""Graph_test, 5"" ;"	941:2:19137:19158	201529	1	True				
ANR	201688	PrimaryExpression	"""Graph_test, 5"""		201529	0					
ANR	201689	IfStatement	"if ( 1 != g . getArc ( 0 , 0 ) )"		201529	15					
ANR	201690	Condition	"1 != g . getArc ( 0 , 0 )"	943:5:19166:19181	201529	0	True				
ANR	201691	EqualityExpression	"1 != g . getArc ( 0 , 0 )"		201529	0		!=			
ANR	201692	PrimaryExpression	1		201529	0					
ANR	201693	CallExpression	"g . getArc ( 0 , 0 )"		201529	1					
ANR	201694	Callee	g . getArc		201529	0					
ANR	201695	MemberAccess	g . getArc		201529	0					
ANR	201696	Identifier	g		201529	0					
ANR	201697	Identifier	getArc		201529	1					
ANR	201698	ArgumentList	0		201529	1					
ANR	201699	Argument	0		201529	0					
ANR	201700	PrimaryExpression	0		201529	0					
ANR	201701	Argument	0		201529	1					
ANR	201702	PrimaryExpression	0		201529	0					
ANR	201703	ThrowStatement	"throw ""Graph_test, 6"" ;"	944:2:19187:19208	201529	1	True				
ANR	201704	PrimaryExpression	"""Graph_test, 6"""		201529	0					
ANR	201705	ExpressionStatement	"g . setLabelInt ( 0 , 10 )"	946:1:19212:19231	201529	16	True				
ANR	201706	CallExpression	"g . setLabelInt ( 0 , 10 )"		201529	0					
ANR	201707	Callee	g . setLabelInt		201529	0					
ANR	201708	MemberAccess	g . setLabelInt		201529	0					
ANR	201709	Identifier	g		201529	0					
ANR	201710	Identifier	setLabelInt		201529	1					
ANR	201711	ArgumentList	0		201529	1					
ANR	201712	Argument	0		201529	0					
ANR	201713	PrimaryExpression	0		201529	0					
ANR	201714	Argument	10		201529	1					
ANR	201715	PrimaryExpression	10		201529	0					
ANR	201716	ExpressionStatement	"g . setLabelString ( 1 , ""one"" )"	947:1:19234:19259	201529	17	True				
ANR	201717	CallExpression	"g . setLabelString ( 1 , ""one"" )"		201529	0					
ANR	201718	Callee	g . setLabelString		201529	0					
ANR	201719	MemberAccess	g . setLabelString		201529	0					
ANR	201720	Identifier	g		201529	0					
ANR	201721	Identifier	setLabelString		201529	1					
ANR	201722	ArgumentList	1		201529	1					
ANR	201723	Argument	1		201529	0					
ANR	201724	PrimaryExpression	1		201529	0					
ANR	201725	Argument	"""one"""		201529	1					
ANR	201726	PrimaryExpression	"""one"""		201529	0					
ANR	201727	ExpressionStatement	g . printAsText ( )	948:1:19262:19277	201529	18	True				
ANR	201728	CallExpression	g . printAsText ( )		201529	0					
ANR	201729	Callee	g . printAsText		201529	0					
ANR	201730	MemberAccess	g . printAsText		201529	0					
ANR	201731	Identifier	g		201529	0					
ANR	201732	Identifier	printAsText		201529	1					
ANR	201733	ArgumentList			201529	1					
ANR	201734	TryStatement	try		201529	19					
ANR	201735	CompoundStatement		41:5:719:719	201529	0					
ANR	201736	ExpressionStatement	"g . setLabelInt ( 1 , 10 )"		201529	0					
ANR	201737	CallExpression	"g . setLabelInt ( 1 , 10 )"		201529	0					
ANR	201738	Callee	g . setLabelInt		201529	0					
ANR	201739	MemberAccess	g . setLabelInt		201529	0					
ANR	201740	Identifier	g		201529	0					
ANR	201741	Identifier	setLabelInt		201529	1					
ANR	201742	ArgumentList	1		201529	1					
ANR	201743	Argument	1		201529	0					
ANR	201744	PrimaryExpression	1		201529	0					
ANR	201745	Argument	10		201529	1					
ANR	201746	PrimaryExpression	10		201529	0					
ANR	201747	CatchList			201529	1					
ANR	201748	CatchStatement	catch ( char * s )		201529	0					
ANR	201749	Identifier	s		201529	0					
ANR	201750	CompoundStatement		43:18:763:763	201529	1					
ANR	201751	ExpressionStatement	alert ( s )	954:2:19377:19385	201529	0	True				
ANR	201752	CallExpression	alert ( s )		201529	0					
ANR	201753	Callee	alert		201529	0					
ANR	201754	Identifier	alert		201529	0					
ANR	201755	ArgumentList	s		201529	1					
ANR	201756	Argument	s		201529	0					
ANR	201757	Identifier	s		201529	0					
ANR	201758	ExpressionStatement		955:2:19389:19389	201529	20	True				
ANR	201759	TryStatement	try		201529	21					
ANR	201760	CompoundStatement		46:5:786:786	201529	0					
ANR	201761	ExpressionStatement	"g . setLabelString ( 0 , ""one"" )"		201529	0					
ANR	201762	CallExpression	"g . setLabelString ( 0 , ""one"" )"		201529	0					
ANR	201763	Callee	g . setLabelString		201529	0					
ANR	201764	MemberAccess	g . setLabelString		201529	0					
ANR	201765	Identifier	g		201529	0					
ANR	201766	Identifier	setLabelString		201529	1					
ANR	201767	ArgumentList	0		201529	1					
ANR	201768	Argument	0		201529	0					
ANR	201769	PrimaryExpression	0		201529	0					
ANR	201770	Argument	"""one"""		201529	1					
ANR	201771	PrimaryExpression	"""one"""		201529	0					
ANR	201772	CatchList			201529	1					
ANR	201773	CatchStatement	catch ( char * s )		201529	0					
ANR	201774	Identifier	s		201529	0					
ANR	201775	CompoundStatement		48:18:835:835	201529	1					
ANR	201776	ExpressionStatement	alert ( s )	959:2:19449:19457	201529	0	True				
ANR	201777	CallExpression	alert ( s )		201529	0					
ANR	201778	Callee	alert		201529	0					
ANR	201779	Identifier	alert		201529	0					
ANR	201780	ArgumentList	s		201529	1					
ANR	201781	Argument	s		201529	0					
ANR	201782	Identifier	s		201529	0					
ANR	201783	ExpressionStatement		960:2:19461:19461	201529	22	True				
ANR	201784	IfStatement	if ( 10 != g . getLabelInt ( 0 ) )		201529	23					
ANR	201785	Condition	10 != g . getLabelInt ( 0 )	962:5:19469:19488	201529	0	True				
ANR	201786	EqualityExpression	10 != g . getLabelInt ( 0 )		201529	0		!=			
ANR	201787	PrimaryExpression	10		201529	0					
ANR	201788	CallExpression	g . getLabelInt ( 0 )		201529	1					
ANR	201789	Callee	g . getLabelInt		201529	0					
ANR	201790	MemberAccess	g . getLabelInt		201529	0					
ANR	201791	Identifier	g		201529	0					
ANR	201792	Identifier	getLabelInt		201529	1					
ANR	201793	ArgumentList	0		201529	1					
ANR	201794	Argument	0		201529	0					
ANR	201795	PrimaryExpression	0		201529	0					
ANR	201796	ThrowStatement	"throw ""Graph_test, 7"" ;"	963:2:19494:19515	201529	1	True				
ANR	201797	PrimaryExpression	"""Graph_test, 7"""		201529	0					
ANR	201798	IfStatement	"if ( 0 != strcmp ( g . getLabelString ( 1 ) , ""one"" ) )"		201529	24					
ANR	201799	Condition	"0 != strcmp ( g . getLabelString ( 1 ) , ""one"" )"	964:5:19522:19559	201529	0	True				
ANR	201800	EqualityExpression	"0 != strcmp ( g . getLabelString ( 1 ) , ""one"" )"		201529	0		!=			
ANR	201801	PrimaryExpression	0		201529	0					
ANR	201802	CallExpression	"strcmp ( g . getLabelString ( 1 ) , ""one"" )"		201529	1					
ANR	201803	Callee	strcmp		201529	0					
ANR	201804	Identifier	strcmp		201529	0					
ANR	201805	ArgumentList	g . getLabelString ( 1 )		201529	1					
ANR	201806	Argument	g . getLabelString ( 1 )		201529	0					
ANR	201807	CallExpression	g . getLabelString ( 1 )		201529	0					
ANR	201808	Callee	g . getLabelString		201529	0					
ANR	201809	MemberAccess	g . getLabelString		201529	0					
ANR	201810	Identifier	g		201529	0					
ANR	201811	Identifier	getLabelString		201529	1					
ANR	201812	ArgumentList	1		201529	1					
ANR	201813	Argument	1		201529	0					
ANR	201814	PrimaryExpression	1		201529	0					
ANR	201815	Argument	"""one"""		201529	1					
ANR	201816	PrimaryExpression	"""one"""		201529	0					
ANR	201817	ThrowStatement	"throw ""Graph_test, 8"" ;"	965:2:19565:19586	201529	1	True				
ANR	201818	PrimaryExpression	"""Graph_test, 8"""		201529	0					
ANR	201819	IfStatement	if ( 0 != g . getNode ( 10 ) )		201529	25					
ANR	201820	Condition	0 != g . getNode ( 10 )	966:5:19593:19608	201529	0	True				
ANR	201821	EqualityExpression	0 != g . getNode ( 10 )		201529	0		!=			
ANR	201822	PrimaryExpression	0		201529	0					
ANR	201823	CallExpression	g . getNode ( 10 )		201529	1					
ANR	201824	Callee	g . getNode		201529	0					
ANR	201825	MemberAccess	g . getNode		201529	0					
ANR	201826	Identifier	g		201529	0					
ANR	201827	Identifier	getNode		201529	1					
ANR	201828	ArgumentList	10		201529	1					
ANR	201829	Argument	10		201529	0					
ANR	201830	PrimaryExpression	10		201529	0					
ANR	201831	ThrowStatement	"throw ""Graph_test, 9"" ;"	967:2:19614:19635	201529	1	True				
ANR	201832	PrimaryExpression	"""Graph_test, 9"""		201529	0					
ANR	201833	IfStatement	if ( - 1 != g . getNode ( 100 ) )		201529	26					
ANR	201834	Condition	- 1 != g . getNode ( 100 )	968:5:19642:19659	201529	0	True				
ANR	201835	EqualityExpression	- 1 != g . getNode ( 100 )		201529	0		!=			
ANR	201836	UnaryOperationExpression	- 1		201529	0					
ANR	201837	UnaryOperator	-		201529	0					
ANR	201838	PrimaryExpression	1		201529	1					
ANR	201839	CallExpression	g . getNode ( 100 )		201529	1					
ANR	201840	Callee	g . getNode		201529	0					
ANR	201841	MemberAccess	g . getNode		201529	0					
ANR	201842	Identifier	g		201529	0					
ANR	201843	Identifier	getNode		201529	1					
ANR	201844	ArgumentList	100		201529	1					
ANR	201845	Argument	100		201529	0					
ANR	201846	PrimaryExpression	100		201529	0					
ANR	201847	ThrowStatement	"throw ""Graph_test, 10"" ;"	969:2:19665:19687	201529	1	True				
ANR	201848	PrimaryExpression	"""Graph_test, 10"""		201529	0					
ANR	201849	IfStatement	"if ( 1 != g . getNode ( ""one"" ) )"		201529	27					
ANR	201850	Condition	"1 != g . getNode ( ""one"" )"	970:5:19694:19712	201529	0	True				
ANR	201851	EqualityExpression	"1 != g . getNode ( ""one"" )"		201529	0		!=			
ANR	201852	PrimaryExpression	1		201529	0					
ANR	201853	CallExpression	"g . getNode ( ""one"" )"		201529	1					
ANR	201854	Callee	g . getNode		201529	0					
ANR	201855	MemberAccess	g . getNode		201529	0					
ANR	201856	Identifier	g		201529	0					
ANR	201857	Identifier	getNode		201529	1					
ANR	201858	ArgumentList	"""one"""		201529	1					
ANR	201859	Argument	"""one"""		201529	0					
ANR	201860	PrimaryExpression	"""one"""		201529	0					
ANR	201861	ThrowStatement	"throw ""Graph_test, 11"" ;"	971:2:19718:19740	201529	1	True				
ANR	201862	PrimaryExpression	"""Graph_test, 11"""		201529	0					
ANR	201863	IfStatement	"if ( - 1 != g . getNode ( ""two"" ) )"		201529	28					
ANR	201864	Condition	"- 1 != g . getNode ( ""two"" )"	972:5:19747:19766	201529	0	True				
ANR	201865	EqualityExpression	"- 1 != g . getNode ( ""two"" )"		201529	0		!=			
ANR	201866	UnaryOperationExpression	- 1		201529	0					
ANR	201867	UnaryOperator	-		201529	0					
ANR	201868	PrimaryExpression	1		201529	1					
ANR	201869	CallExpression	"g . getNode ( ""two"" )"		201529	1					
ANR	201870	Callee	g . getNode		201529	0					
ANR	201871	MemberAccess	g . getNode		201529	0					
ANR	201872	Identifier	g		201529	0					
ANR	201873	Identifier	getNode		201529	1					
ANR	201874	ArgumentList	"""two"""		201529	1					
ANR	201875	Argument	"""two"""		201529	0					
ANR	201876	PrimaryExpression	"""two"""		201529	0					
ANR	201877	ThrowStatement	"throw ""Graph_test, 12"" ;"	973:2:19790:19812	201529	1	True				
ANR	201878	PrimaryExpression	"""Graph_test, 12"""		201529	0					
ANR	201879	IfStatement	if ( true != g . isDag ( ) )		201529	29					
ANR	201880	Condition	true != g . isDag ( )	975:5:19820:19834	201529	0	True				
ANR	201881	EqualityExpression	true != g . isDag ( )		201529	0		!=			
ANR	201882	Identifier	true		201529	0					
ANR	201883	CallExpression	g . isDag ( )		201529	1					
ANR	201884	Callee	g . isDag		201529	0					
ANR	201885	MemberAccess	g . isDag		201529	0					
ANR	201886	Identifier	g		201529	0					
ANR	201887	Identifier	isDag		201529	1					
ANR	201888	ArgumentList			201529	1					
ANR	201889	ThrowStatement	"throw ""Graph_test, 13"" ;"	976:2:19840:19862	201529	1	True				
ANR	201890	PrimaryExpression	"""Graph_test, 13"""		201529	0					
ANR	201891	IfStatement	if ( 2 != g . addNode ( ) )		201529	30					
ANR	201892	Condition	2 != g . addNode ( )	977:5:19869:19882	201529	0	True				
ANR	201893	EqualityExpression	2 != g . addNode ( )		201529	0		!=			
ANR	201894	PrimaryExpression	2		201529	0					
ANR	201895	CallExpression	g . addNode ( )		201529	1					
ANR	201896	Callee	g . addNode		201529	0					
ANR	201897	MemberAccess	g . addNode		201529	0					
ANR	201898	Identifier	g		201529	0					
ANR	201899	Identifier	addNode		201529	1					
ANR	201900	ArgumentList			201529	1					
ANR	201901	ThrowStatement	"throw ""Graph_test, 14"" ;"	978:2:19888:19910	201529	1	True				
ANR	201902	PrimaryExpression	"""Graph_test, 14"""		201529	0					
ANR	201903	ExpressionStatement	"g . addArc ( 1 , 2 )"	979:1:19913:19926	201529	31	True				
ANR	201904	CallExpression	"g . addArc ( 1 , 2 )"		201529	0					
ANR	201905	Callee	g . addArc		201529	0					
ANR	201906	MemberAccess	g . addArc		201529	0					
ANR	201907	Identifier	g		201529	0					
ANR	201908	Identifier	addArc		201529	1					
ANR	201909	ArgumentList	1		201529	1					
ANR	201910	Argument	1		201529	0					
ANR	201911	PrimaryExpression	1		201529	0					
ANR	201912	Argument	2		201529	1					
ANR	201913	PrimaryExpression	2		201529	0					
ANR	201914	IfStatement	if ( true != g . isDag ( ) )		201529	32					
ANR	201915	Condition	true != g . isDag ( )	980:5:19933:19947	201529	0	True				
ANR	201916	EqualityExpression	true != g . isDag ( )		201529	0		!=			
ANR	201917	Identifier	true		201529	0					
ANR	201918	CallExpression	g . isDag ( )		201529	1					
ANR	201919	Callee	g . isDag		201529	0					
ANR	201920	MemberAccess	g . isDag		201529	0					
ANR	201921	Identifier	g		201529	0					
ANR	201922	Identifier	isDag		201529	1					
ANR	201923	ArgumentList			201529	1					
ANR	201924	ThrowStatement	"throw ""Graph_test, 15"" ;"	981:2:19953:19975	201529	1	True				
ANR	201925	PrimaryExpression	"""Graph_test, 15"""		201529	0					
ANR	201926	ExpressionStatement	"g . addArc ( 2 , 0 )"	982:1:19978:19991	201529	33	True				
ANR	201927	CallExpression	"g . addArc ( 2 , 0 )"		201529	0					
ANR	201928	Callee	g . addArc		201529	0					
ANR	201929	MemberAccess	g . addArc		201529	0					
ANR	201930	Identifier	g		201529	0					
ANR	201931	Identifier	addArc		201529	1					
ANR	201932	ArgumentList	2		201529	1					
ANR	201933	Argument	2		201529	0					
ANR	201934	PrimaryExpression	2		201529	0					
ANR	201935	Argument	0		201529	1					
ANR	201936	PrimaryExpression	0		201529	0					
ANR	201937	IfStatement	if ( false != g . isDag ( ) )		201529	34					
ANR	201938	Condition	false != g . isDag ( )	983:5:19998:20013	201529	0	True				
ANR	201939	EqualityExpression	false != g . isDag ( )		201529	0		!=			
ANR	201940	Identifier	false		201529	0					
ANR	201941	CallExpression	g . isDag ( )		201529	1					
ANR	201942	Callee	g . isDag		201529	0					
ANR	201943	MemberAccess	g . isDag		201529	0					
ANR	201944	Identifier	g		201529	0					
ANR	201945	Identifier	isDag		201529	1					
ANR	201946	ArgumentList			201529	1					
ANR	201947	ThrowStatement	"throw ""Graph_test, 16"" ;"	984:2:20019:20041	201529	1	True				
ANR	201948	PrimaryExpression	"""Graph_test, 16"""		201529	0					
ANR	201949	ExpressionStatement	"g . saveAsDot ( ""g.dot"" )"	985:1:20044:20064	201529	35	True				
ANR	201950	CallExpression	"g . saveAsDot ( ""g.dot"" )"		201529	0					
ANR	201951	Callee	g . saveAsDot		201529	0					
ANR	201952	MemberAccess	g . saveAsDot		201529	0					
ANR	201953	Identifier	g		201529	0					
ANR	201954	Identifier	saveAsDot		201529	1					
ANR	201955	ArgumentList	"""g.dot"""		201529	1					
ANR	201956	Argument	"""g.dot"""		201529	0					
ANR	201957	PrimaryExpression	"""g.dot"""		201529	0					
ANR	201958	ExpressionStatement	"g . saveAsText ( ""g.txt"" )"	986:1:20093:20114	201529	36	True				
ANR	201959	CallExpression	"g . saveAsText ( ""g.txt"" )"		201529	0					
ANR	201960	Callee	g . saveAsText		201529	0					
ANR	201961	MemberAccess	g . saveAsText		201529	0					
ANR	201962	Identifier	g		201529	0					
ANR	201963	Identifier	saveAsText		201529	1					
ANR	201964	ArgumentList	"""g.txt"""		201529	1					
ANR	201965	Argument	"""g.txt"""		201529	0					
ANR	201966	PrimaryExpression	"""g.txt"""		201529	0					
ANR	201967	ExpressionStatement	g . printAsText ( )	987:1:20143:20158	201529	37	True				
ANR	201968	CallExpression	g . printAsText ( )		201529	0					
ANR	201969	Callee	g . printAsText		201529	0					
ANR	201970	MemberAccess	g . printAsText		201529	0					
ANR	201971	Identifier	g		201529	0					
ANR	201972	Identifier	printAsText		201529	1					
ANR	201973	ArgumentList			201529	1					
ANR	201974	ExpressionStatement	g . reverseArcs ( )	988:1:20161:20176	201529	38	True				
ANR	201975	CallExpression	g . reverseArcs ( )		201529	0					
ANR	201976	Callee	g . reverseArcs		201529	0					
ANR	201977	MemberAccess	g . reverseArcs		201529	0					
ANR	201978	Identifier	g		201529	0					
ANR	201979	Identifier	reverseArcs		201529	1					
ANR	201980	ArgumentList			201529	1					
ANR	201981	ExpressionStatement	g . printAsText ( )	989:1:20179:20194	201529	39	True				
ANR	201982	CallExpression	g . printAsText ( )		201529	0					
ANR	201983	Callee	g . printAsText		201529	0					
ANR	201984	MemberAccess	g . printAsText		201529	0					
ANR	201985	Identifier	g		201529	0					
ANR	201986	Identifier	printAsText		201529	1					
ANR	201987	ArgumentList			201529	1					
ANR	201988	ExpressionStatement	g . square ( )	991:1:20198:20208	201529	40	True				
ANR	201989	CallExpression	g . square ( )		201529	0					
ANR	201990	Callee	g . square		201529	0					
ANR	201991	MemberAccess	g . square		201529	0					
ANR	201992	Identifier	g		201529	0					
ANR	201993	Identifier	square		201529	1					
ANR	201994	ArgumentList			201529	1					
ANR	201995	ExpressionStatement	g . printAsText ( )	992:1:20211:20226	201529	41	True				
ANR	201996	CallExpression	g . printAsText ( )		201529	0					
ANR	201997	Callee	g . printAsText		201529	0					
ANR	201998	MemberAccess	g . printAsText		201529	0					
ANR	201999	Identifier	g		201529	0					
ANR	202000	Identifier	printAsText		201529	1					
ANR	202001	ArgumentList			201529	1					
ANR	202002	IdentifierDeclStatement	Graph h ;	994:1:20230:20237	201529	42	True				
ANR	202003	IdentifierDecl	h		201529	0					
ANR	202004	IdentifierDeclType	Graph		201529	0					
ANR	202005	Identifier	h		201529	1					
ANR	202006	ExpressionStatement	h . printAsText ( )	995:1:20240:20255	201529	43	True				
ANR	202007	CallExpression	h . printAsText ( )		201529	0					
ANR	202008	Callee	h . printAsText		201529	0					
ANR	202009	MemberAccess	h . printAsText		201529	0					
ANR	202010	Identifier	h		201529	0					
ANR	202011	Identifier	printAsText		201529	1					
ANR	202012	ArgumentList			201529	1					
ANR	202013	ExpressionStatement	h . initializeWith ( g )	996:1:20258:20277	201529	44	True				
ANR	202014	CallExpression	h . initializeWith ( g )		201529	0					
ANR	202015	Callee	h . initializeWith		201529	0					
ANR	202016	MemberAccess	h . initializeWith		201529	0					
ANR	202017	Identifier	h		201529	0					
ANR	202018	Identifier	initializeWith		201529	1					
ANR	202019	ArgumentList	g		201529	1					
ANR	202020	Argument	g		201529	0					
ANR	202021	Identifier	g		201529	0					
ANR	202022	ExpressionStatement	h . printAsText ( )	997:1:20280:20295	201529	45	True				
ANR	202023	CallExpression	h . printAsText ( )		201529	0					
ANR	202024	Callee	h . printAsText		201529	0					
ANR	202025	MemberAccess	h . printAsText		201529	0					
ANR	202026	Identifier	h		201529	0					
ANR	202027	Identifier	printAsText		201529	1					
ANR	202028	ArgumentList			201529	1					
ANR	202029	IfStatement	"if ( true != g . addArcNoDuplicates ( 1 , 0 ) )"		201529	46					
ANR	202030	Condition	"true != g . addArcNoDuplicates ( 1 , 0 )"	999:5:20303:20333	201529	0	True				
ANR	202031	EqualityExpression	"true != g . addArcNoDuplicates ( 1 , 0 )"		201529	0		!=			
ANR	202032	Identifier	true		201529	0					
ANR	202033	CallExpression	"g . addArcNoDuplicates ( 1 , 0 )"		201529	1					
ANR	202034	Callee	g . addArcNoDuplicates		201529	0					
ANR	202035	MemberAccess	g . addArcNoDuplicates		201529	0					
ANR	202036	Identifier	g		201529	0					
ANR	202037	Identifier	addArcNoDuplicates		201529	1					
ANR	202038	ArgumentList	1		201529	1					
ANR	202039	Argument	1		201529	0					
ANR	202040	PrimaryExpression	1		201529	0					
ANR	202041	Argument	0		201529	1					
ANR	202042	PrimaryExpression	0		201529	0					
ANR	202043	ThrowStatement	"throw ""Graph_test, 17"" ;"	1000:2:20339:20361	201529	1	True				
ANR	202044	PrimaryExpression	"""Graph_test, 17"""		201529	0					
ANR	202045	ExpressionStatement	g . printAsText ( )	1001:1:20364:20379	201529	47	True				
ANR	202046	CallExpression	g . printAsText ( )		201529	0					
ANR	202047	Callee	g . printAsText		201529	0					
ANR	202048	MemberAccess	g . printAsText		201529	0					
ANR	202049	Identifier	g		201529	0					
ANR	202050	Identifier	printAsText		201529	1					
ANR	202051	ArgumentList			201529	1					
ANR	202052	ExpressionStatement	g . closeTransitively ( )	1003:1:20383:20404	201529	48	True				
ANR	202053	CallExpression	g . closeTransitively ( )		201529	0					
ANR	202054	Callee	g . closeTransitively		201529	0					
ANR	202055	MemberAccess	g . closeTransitively		201529	0					
ANR	202056	Identifier	g		201529	0					
ANR	202057	Identifier	closeTransitively		201529	1					
ANR	202058	ArgumentList			201529	1					
ANR	202059	ExpressionStatement	g . printAsText ( )	1004:1:20407:20422	201529	49	True				
ANR	202060	CallExpression	g . printAsText ( )		201529	0					
ANR	202061	Callee	g . printAsText		201529	0					
ANR	202062	MemberAccess	g . printAsText		201529	0					
ANR	202063	Identifier	g		201529	0					
ANR	202064	Identifier	printAsText		201529	1					
ANR	202065	ArgumentList			201529	1					
ANR	202066	IfStatement	"if ( false != g . addArcNoDuplicates ( 1 , 2 ) )"		201529	50					
ANR	202067	Condition	"false != g . addArcNoDuplicates ( 1 , 2 )"	1005:5:20429:20460	201529	0	True				
ANR	202068	EqualityExpression	"false != g . addArcNoDuplicates ( 1 , 2 )"		201529	0		!=			
ANR	202069	Identifier	false		201529	0					
ANR	202070	CallExpression	"g . addArcNoDuplicates ( 1 , 2 )"		201529	1					
ANR	202071	Callee	g . addArcNoDuplicates		201529	0					
ANR	202072	MemberAccess	g . addArcNoDuplicates		201529	0					
ANR	202073	Identifier	g		201529	0					
ANR	202074	Identifier	addArcNoDuplicates		201529	1					
ANR	202075	ArgumentList	1		201529	1					
ANR	202076	Argument	1		201529	0					
ANR	202077	PrimaryExpression	1		201529	0					
ANR	202078	Argument	2		201529	1					
ANR	202079	PrimaryExpression	2		201529	0					
ANR	202080	ThrowStatement	"throw ""Graph_test, 18"" ;"	1006:2:20466:20488	201529	1	True				
ANR	202081	PrimaryExpression	"""Graph_test, 18"""		201529	0					
ANR	202082	IfStatement	if ( 1 != g . deappendArc ( 1 ) )		201529	51					
ANR	202083	Condition	1 != g . deappendArc ( 1 )	1008:5:20496:20514	201529	0	True				
ANR	202084	EqualityExpression	1 != g . deappendArc ( 1 )		201529	0		!=			
ANR	202085	PrimaryExpression	1		201529	0					
ANR	202086	CallExpression	g . deappendArc ( 1 )		201529	1					
ANR	202087	Callee	g . deappendArc		201529	0					
ANR	202088	MemberAccess	g . deappendArc		201529	0					
ANR	202089	Identifier	g		201529	0					
ANR	202090	Identifier	deappendArc		201529	1					
ANR	202091	ArgumentList	1		201529	1					
ANR	202092	Argument	1		201529	0					
ANR	202093	PrimaryExpression	1		201529	0					
ANR	202094	ThrowStatement	"throw ""Graph_test, 19"" ;"	1009:2:20520:20542	201529	1	True				
ANR	202095	PrimaryExpression	"""Graph_test, 19"""		201529	0					
ANR	202096	ExpressionStatement	g . printAsText ( )	1010:1:20545:20560	201529	52	True				
ANR	202097	CallExpression	g . printAsText ( )		201529	0					
ANR	202098	Callee	g . printAsText		201529	0					
ANR	202099	MemberAccess	g . printAsText		201529	0					
ANR	202100	Identifier	g		201529	0					
ANR	202101	Identifier	printAsText		201529	1					
ANR	202102	ArgumentList			201529	1					
ANR	202103	ExpressionStatement	"printf ( ""]]] END testing Graph\\n"" )"	1012:1:20564:20597	201529	53	True				
ANR	202104	CallExpression	"printf ( ""]]] END testing Graph\\n"" )"		201529	0					
ANR	202105	Callee	printf		201529	0					
ANR	202106	Identifier	printf		201529	0					
ANR	202107	ArgumentList	"""]]] END testing Graph\\n"""		201529	1					
ANR	202108	Argument	"""]]] END testing Graph\\n"""		201529	0					
ANR	202109	PrimaryExpression	"""]]] END testing Graph\\n"""		201529	0					
ANR	202110	ReturnType	void		201529	1					
ANR	202111	Identifier	Graph_test		201529	2					
ANR	202112	ParameterList			201529	3					
ANR	202113	CFGEntryNode	ENTRY		201529		True				
ANR	202114	CFGExitNode	EXIT		201529		True				
ANR	202115	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202116	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202117	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202118	CFGErrorNode	ERROR		201529		True				
ANR	202119	CFGErrorNode	ERROR		201529		True				
ANR	202120	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202121	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202122	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202123	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202124	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202125	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202126	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202127	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202128	CFGErrorNode	ERROR		201529		True				
ANR	202129	CFGErrorNode	ERROR		201529		True				
ANR	202130	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202131	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202132	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202133	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202134	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202135	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202136	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202137	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202138	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202139	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202140	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202141	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202142	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202143	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202144	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202145	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202146	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202147	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202148	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202149	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202150	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202151	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202152	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202153	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202154	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202155	CFGExceptionNode	EXCEPTION		201529		True				
ANR	202156	Symbol	strcmp		201529						
ANR	202157	Symbol	g . getLabelString		201529						
ANR	202158	Symbol	g . getNumNodes		201529						
ANR	202159	Symbol	g . getNumArcs		201529						
ANR	202160	Symbol	g		201529						
ANR	202161	Symbol	g . getArc		201529						
ANR	202162	Symbol	false		201529						
ANR	202163	Symbol	h		201529						
ANR	202164	Symbol	g . getNode		201529						
ANR	202165	Symbol	g . isDag		201529						
ANR	202166	Symbol	g . addNode		201529						
ANR	202167	Symbol	g . getLabelInt		201529						
ANR	202168	Symbol	g . addArcNoDuplicates		201529						
ANR	202169	Symbol	true		201529						
ANR	202170	Symbol	g . deappendArc		201529						
