command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4804050	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_killfamily.cpp								
ANR	4804051	DeclStmt									
ANR	4804052	Decl							extern dynuser	extern dynuser *	myDynuser
ANR	4804053	Function	KillFamily :: KillFamily	30:0:971:1517							
ANR	4804054	FunctionDef	"KillFamily :: KillFamily (pid_t pid , priv_state priv , int test_only)"		4804053	0					
ANR	4804055	CompoundStatement		31:0:1039:1517	4804053	0					
ANR	4804056	ExpressionStatement	daddy_pid = pid	32:1:1042:1057	4804053	0	True				
ANR	4804057	AssignmentExpression	daddy_pid = pid		4804053	0		=			
ANR	4804058	Identifier	daddy_pid		4804053	0					
ANR	4804059	Identifier	pid		4804053	1					
ANR	4804060	ExpressionStatement	old_pids = NULL	33:1:1060:1075	4804053	1	True				
ANR	4804061	AssignmentExpression	old_pids = NULL		4804053	0		=			
ANR	4804062	Identifier	old_pids		4804053	0					
ANR	4804063	Identifier	NULL		4804053	1					
ANR	4804064	ExpressionStatement	mypriv = priv	34:1:1078:1091	4804053	2	True				
ANR	4804065	AssignmentExpression	mypriv = priv		4804053	0		=			
ANR	4804066	Identifier	mypriv		4804053	0					
ANR	4804067	Identifier	priv		4804053	1					
ANR	4804068	ExpressionStatement	test_only_flag = test_only	35:1:1094:1120	4804053	3	True				
ANR	4804069	AssignmentExpression	test_only_flag = test_only		4804053	0		=			
ANR	4804070	Identifier	test_only_flag		4804053	0					
ANR	4804071	Identifier	test_only		4804053	1					
ANR	4804072	ExpressionStatement	family_size = 0	36:1:1123:1138	4804053	4	True				
ANR	4804073	AssignmentExpression	family_size = 0		4804053	0		=			
ANR	4804074	Identifier	family_size		4804053	0					
ANR	4804075	PrimaryExpression	0		4804053	1					
ANR	4804076	ExpressionStatement	exited_cpu_user_time = 0	37:1:1141:1165	4804053	5	True				
ANR	4804077	AssignmentExpression	exited_cpu_user_time = 0		4804053	0		=			
ANR	4804078	Identifier	exited_cpu_user_time		4804053	0					
ANR	4804079	PrimaryExpression	0		4804053	1					
ANR	4804080	ExpressionStatement	exited_cpu_sys_time = 0	38:1:1168:1191	4804053	6	True				
ANR	4804081	AssignmentExpression	exited_cpu_sys_time = 0		4804053	0		=			
ANR	4804082	Identifier	exited_cpu_sys_time		4804053	0					
ANR	4804083	PrimaryExpression	0		4804053	1					
ANR	4804084	ExpressionStatement	max_image_size = 0	39:1:1194:1212	4804053	7	True				
ANR	4804085	AssignmentExpression	max_image_size = 0		4804053	0		=			
ANR	4804086	Identifier	max_image_size		4804053	0					
ANR	4804087	PrimaryExpression	0		4804053	1					
ANR	4804088	ExpressionStatement	alive_cpu_sys_time = 0	41:1:1216:1238	4804053	8	True				
ANR	4804089	AssignmentExpression	alive_cpu_sys_time = 0		4804053	0		=			
ANR	4804090	Identifier	alive_cpu_sys_time		4804053	0					
ANR	4804091	PrimaryExpression	0		4804053	1					
ANR	4804092	ExpressionStatement	alive_cpu_user_time = 0	42:1:1241:1264	4804053	9	True				
ANR	4804093	AssignmentExpression	alive_cpu_user_time = 0		4804053	0		=			
ANR	4804094	Identifier	alive_cpu_user_time		4804053	0					
ANR	4804095	PrimaryExpression	0		4804053	1					
ANR	4804096	ExpressionStatement	pidenvid_init ( & m_penvid )	44:1:1268:1292	4804053	10	True				
ANR	4804097	CallExpression	pidenvid_init ( & m_penvid )		4804053	0					
ANR	4804098	Callee	pidenvid_init		4804053	0					
ANR	4804099	Identifier	pidenvid_init		4804053	0					
ANR	4804100	ArgumentList	& m_penvid		4804053	1					
ANR	4804101	Argument	& m_penvid		4804053	0					
ANR	4804102	UnaryOperationExpression	& m_penvid		4804053	0					
ANR	4804103	UnaryOperator	&		4804053	0					
ANR	4804104	Identifier	m_penvid		4804053	1					
ANR	4804105	ExpressionStatement	searchLogin = NULL	45:1:1295:1313	4804053	11	True				
ANR	4804106	AssignmentExpression	searchLogin = NULL		4804053	0		=			
ANR	4804107	Identifier	searchLogin		4804053	0					
ANR	4804108	Identifier	NULL		4804053	1					
ANR	4804109	ExpressionStatement	mypriv = PRIV_ROOT	49:1:1400:1418	4804053	12	True				
ANR	4804110	AssignmentExpression	mypriv = PRIV_ROOT		4804053	0		=			
ANR	4804111	Identifier	mypriv		4804053	0					
ANR	4804112	Identifier	PRIV_ROOT		4804053	1					
ANR	4804113	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Created new KillFamily w/ pid %d as parent\\n"" , daddy_pid )"	52:1:1429:1515	4804053	13	True				
ANR	4804114	CallExpression	"dprintf ( D_PROCFAMILY , ""Created new KillFamily w/ pid %d as parent\\n"" , daddy_pid )"		4804053	0					
ANR	4804115	Callee	dprintf		4804053	0					
ANR	4804116	Identifier	dprintf		4804053	0					
ANR	4804117	ArgumentList	D_PROCFAMILY		4804053	1					
ANR	4804118	Argument	D_PROCFAMILY		4804053	0					
ANR	4804119	Identifier	D_PROCFAMILY		4804053	0					
ANR	4804120	Argument	"""Created new KillFamily w/ pid %d as parent\\n"""		4804053	1					
ANR	4804121	PrimaryExpression	"""Created new KillFamily w/ pid %d as parent\\n"""		4804053	0					
ANR	4804122	Argument	daddy_pid		4804053	2					
ANR	4804123	Identifier	daddy_pid		4804053	0					
ANR	4804124	Identifier	KillFamily :: KillFamily		4804053	1					
ANR	4804125	ParameterList	"pid_t pid , priv_state priv , int test_only"		4804053	2					
ANR	4804126	Parameter	pid_t pid	30:24:995:1003	4804053	0	True				
ANR	4804127	ParameterType	pid_t		4804053	0					
ANR	4804128	Identifier	pid		4804053	1					
ANR	4804129	Parameter	priv_state priv	30:35:1006:1020	4804053	1	True				
ANR	4804130	ParameterType	priv_state		4804053	0					
ANR	4804131	Identifier	priv		4804053	1					
ANR	4804132	Parameter	int test_only	30:52:1023:1035	4804053	2	True				
ANR	4804133	ParameterType	int		4804053	0					
ANR	4804134	Identifier	test_only		4804053	1					
ANR	4804135	CFGEntryNode	ENTRY		4804053		True				
ANR	4804136	CFGExitNode	EXIT		4804053		True				
ANR	4804137	Symbol	test_only_flag		4804053						
ANR	4804138	Symbol	family_size		4804053						
ANR	4804139	Symbol	& m_penvid		4804053						
ANR	4804140	Symbol	NULL		4804053						
ANR	4804141	Symbol	D_PROCFAMILY		4804053						
ANR	4804142	Symbol	mypriv		4804053						
ANR	4804143	Symbol	exited_cpu_sys_time		4804053						
ANR	4804144	Symbol	pid		4804053						
ANR	4804145	Symbol	searchLogin		4804053						
ANR	4804146	Symbol	alive_cpu_sys_time		4804053						
ANR	4804147	Symbol	alive_cpu_user_time		4804053						
ANR	4804148	Symbol	exited_cpu_user_time		4804053						
ANR	4804149	Symbol	old_pids		4804053						
ANR	4804150	Symbol	max_image_size		4804053						
ANR	4804151	Symbol	PRIV_ROOT		4804053						
ANR	4804152	Symbol	priv		4804053						
ANR	4804153	Symbol	test_only		4804053						
ANR	4804154	Symbol	daddy_pid		4804053						
ANR	4804155	Function	KillFamily :: ~KillFamily	57:0:1521:1721							
ANR	4804156	FunctionDef	KillFamily :: ~KillFamily ()		4804155	0					
ANR	4804157	CompoundStatement		58:0:1547:1721	4804155	0					
ANR	4804158	IfStatement	if ( old_pids )		4804155	0					
ANR	4804159	Condition	old_pids	59:6:1555:1562	4804155	0	True				
ANR	4804160	Identifier	old_pids		4804155	0					
ANR	4804161	CompoundStatement		2:17:18:18	4804155	1					
ANR	4804162	Statement	delete	60:2:1570:1575	4804155	0	True				
ANR	4804163	ExpressionStatement	old_pids	60:9:1577:1585	4804155	1	True				
ANR	4804164	Identifier	old_pids		4804155	0					
ANR	4804165	IfStatement	if ( searchLogin )		4804155	1					
ANR	4804166	Condition	searchLogin	62:6:1596:1606	4804155	0	True				
ANR	4804167	Identifier	searchLogin		4804155	0					
ANR	4804168	CompoundStatement		5:20:62:62	4804155	1					
ANR	4804169	ExpressionStatement	free ( searchLogin )	63:2:1614:1631	4804155	0	True				
ANR	4804170	CallExpression	free ( searchLogin )		4804155	0					
ANR	4804171	Callee	free		4804155	0					
ANR	4804172	Identifier	free		4804155	0					
ANR	4804173	ArgumentList	searchLogin		4804155	1					
ANR	4804174	Argument	searchLogin		4804155	0					
ANR	4804175	Identifier	searchLogin		4804155	0					
ANR	4804176	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Deleted KillFamily w/ pid %d as parent\\n"" , daddy_pid )"	65:1:1637:1719	4804155	2	True				
ANR	4804177	CallExpression	"dprintf ( D_PROCFAMILY , ""Deleted KillFamily w/ pid %d as parent\\n"" , daddy_pid )"		4804155	0					
ANR	4804178	Callee	dprintf		4804155	0					
ANR	4804179	Identifier	dprintf		4804155	0					
ANR	4804180	ArgumentList	D_PROCFAMILY		4804155	1					
ANR	4804181	Argument	D_PROCFAMILY		4804155	0					
ANR	4804182	Identifier	D_PROCFAMILY		4804155	0					
ANR	4804183	Argument	"""Deleted KillFamily w/ pid %d as parent\\n"""		4804155	1					
ANR	4804184	PrimaryExpression	"""Deleted KillFamily w/ pid %d as parent\\n"""		4804155	0					
ANR	4804185	Argument	daddy_pid		4804155	2					
ANR	4804186	Identifier	daddy_pid		4804155	0					
ANR	4804187	Identifier	KillFamily :: ~KillFamily		4804155	1					
ANR	4804188	ParameterList			4804155	2					
ANR	4804189	CFGEntryNode	ENTRY		4804155		True				
ANR	4804190	CFGExitNode	EXIT		4804155		True				
ANR	4804191	Symbol	D_PROCFAMILY		4804155						
ANR	4804192	Symbol	old_pids		4804155						
ANR	4804193	Symbol	searchLogin		4804155						
ANR	4804194	Symbol	daddy_pid		4804155						
ANR	4804195	Function	KillFamily :: setFamilyEnvironmentID	69:0:1724:1848							
ANR	4804196	FunctionDef	KillFamily :: setFamilyEnvironmentID (PidEnvID * penvid)		4804195	0					
ANR	4804197	CompoundStatement		71:0:1784:1848	4804195	0					
ANR	4804198	IfStatement	if ( penvid != NULL )		4804195	0					
ANR	4804199	Condition	penvid != NULL	72:5:1791:1804	4804195	0	True				
ANR	4804200	EqualityExpression	penvid != NULL		4804195	0		!=			
ANR	4804201	Identifier	penvid		4804195	0					
ANR	4804202	Identifier	NULL		4804195	1					
ANR	4804203	CompoundStatement		2:21:22:22	4804195	1					
ANR	4804204	ExpressionStatement	"pidenvid_copy ( & m_penvid , penvid )"	73:2:1811:1843	4804195	0	True				
ANR	4804205	CallExpression	"pidenvid_copy ( & m_penvid , penvid )"		4804195	0					
ANR	4804206	Callee	pidenvid_copy		4804195	0					
ANR	4804207	Identifier	pidenvid_copy		4804195	0					
ANR	4804208	ArgumentList	& m_penvid		4804195	1					
ANR	4804209	Argument	& m_penvid		4804195	0					
ANR	4804210	UnaryOperationExpression	& m_penvid		4804195	0					
ANR	4804211	UnaryOperator	&		4804195	0					
ANR	4804212	Identifier	m_penvid		4804195	1					
ANR	4804213	Argument	penvid		4804195	1					
ANR	4804214	Identifier	penvid		4804195	0					
ANR	4804215	ReturnType	void		4804195	1					
ANR	4804216	Identifier	KillFamily :: setFamilyEnvironmentID		4804195	2					
ANR	4804217	ParameterList	PidEnvID * penvid		4804195	3					
ANR	4804218	Parameter	PidEnvID * penvid	70:36:1765:1780	4804195	0	True				
ANR	4804219	ParameterType	PidEnvID *		4804195	0					
ANR	4804220	Identifier	penvid		4804195	1					
ANR	4804221	CFGEntryNode	ENTRY		4804195		True				
ANR	4804222	CFGExitNode	EXIT		4804195		True				
ANR	4804223	Symbol	& m_penvid		4804195						
ANR	4804224	Symbol	NULL		4804195						
ANR	4804225	Symbol	penvid		4804195						
ANR	4804226	Function	KillFamily :: setFamilyLogin	77:0:1851:1999							
ANR	4804227	FunctionDef	KillFamily :: setFamilyLogin (const char * login)		4804226	0					
ANR	4804228	CompoundStatement		79:0:1904:1999	4804226	0					
ANR	4804229	IfStatement	if ( login )		4804226	0					
ANR	4804230	Condition	login	80:6:1912:1916	4804226	0	True				
ANR	4804231	Identifier	login		4804226	0					
ANR	4804232	CompoundStatement		2:14:15:15	4804226	1					
ANR	4804233	IfStatement	if ( searchLogin )		4804226	0					
ANR	4804234	Condition	searchLogin	81:7:1929:1939	4804226	0	True				
ANR	4804235	Identifier	searchLogin		4804226	0					
ANR	4804236	ExpressionStatement	free ( searchLogin )	82:3:1946:1963	4804226	1	True				
ANR	4804237	CallExpression	free ( searchLogin )		4804226	0					
ANR	4804238	Callee	free		4804226	0					
ANR	4804239	Identifier	free		4804226	0					
ANR	4804240	ArgumentList	searchLogin		4804226	1					
ANR	4804241	Argument	searchLogin		4804226	0					
ANR	4804242	Identifier	searchLogin		4804226	0					
ANR	4804243	ExpressionStatement	searchLogin = strdup ( login )	83:2:1967:1994	4804226	1	True				
ANR	4804244	AssignmentExpression	searchLogin = strdup ( login )		4804226	0		=			
ANR	4804245	Identifier	searchLogin		4804226	0					
ANR	4804246	CallExpression	strdup ( login )		4804226	1					
ANR	4804247	Callee	strdup		4804226	0					
ANR	4804248	Identifier	strdup		4804226	0					
ANR	4804249	ArgumentList	login		4804226	1					
ANR	4804250	Argument	login		4804226	0					
ANR	4804251	Identifier	login		4804226	0					
ANR	4804252	ReturnType	void		4804226	1					
ANR	4804253	Identifier	KillFamily :: setFamilyLogin		4804226	2					
ANR	4804254	ParameterList	const char * login		4804226	3					
ANR	4804255	Parameter	const char * login	78:28:1884:1900	4804226	0	True				
ANR	4804256	ParameterType	const char *		4804226	0					
ANR	4804257	Identifier	login		4804226	1					
ANR	4804258	CFGEntryNode	ENTRY		4804226		True				
ANR	4804259	CFGExitNode	EXIT		4804226		True				
ANR	4804260	Symbol	strdup		4804226						
ANR	4804261	Symbol	login		4804226						
ANR	4804262	Symbol	searchLogin		4804226						
ANR	4804263	Function	KillFamily :: hardkill	87:0:2002:2137							
ANR	4804264	FunctionDef	KillFamily :: hardkill ()		4804263	0					
ANR	4804265	CompoundStatement		89:0:2030:2137	4804263	0					
ANR	4804266	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::hardkill\\n"" )"	90:1:2033:2088	4804263	0	True				
ANR	4804267	CallExpression	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::hardkill\\n"" )"		4804263	0					
ANR	4804268	Callee	dprintf		4804263	0					
ANR	4804269	Identifier	dprintf		4804263	0					
ANR	4804270	ArgumentList	D_PROCFAMILY		4804263	1					
ANR	4804271	Argument	D_PROCFAMILY		4804263	0					
ANR	4804272	Identifier	D_PROCFAMILY		4804263	0					
ANR	4804273	Argument	"""Entering KillFamily::hardkill\\n"""		4804263	1					
ANR	4804274	PrimaryExpression	"""Entering KillFamily::hardkill\\n"""		4804263	0					
ANR	4804275	ExpressionStatement	takesnapshot ( )	91:1:2091:2105	4804263	1	True				
ANR	4804276	CallExpression	takesnapshot ( )		4804263	0					
ANR	4804277	Callee	takesnapshot		4804263	0					
ANR	4804278	Identifier	takesnapshot		4804263	0					
ANR	4804279	ArgumentList			4804263	1					
ANR	4804280	ExpressionStatement	"spree ( SIGKILL , INFANTICIDE )"	92:1:2108:2135	4804263	2	True				
ANR	4804281	CallExpression	"spree ( SIGKILL , INFANTICIDE )"		4804263	0					
ANR	4804282	Callee	spree		4804263	0					
ANR	4804283	Identifier	spree		4804263	0					
ANR	4804284	ArgumentList	SIGKILL		4804263	1					
ANR	4804285	Argument	SIGKILL		4804263	0					
ANR	4804286	Identifier	SIGKILL		4804263	0					
ANR	4804287	Argument	INFANTICIDE		4804263	1					
ANR	4804288	Identifier	INFANTICIDE		4804263	0					
ANR	4804289	ReturnType	void		4804263	1					
ANR	4804290	Identifier	KillFamily :: hardkill		4804263	2					
ANR	4804291	ParameterList			4804263	3					
ANR	4804292	CFGEntryNode	ENTRY		4804263		True				
ANR	4804293	CFGExitNode	EXIT		4804263		True				
ANR	4804294	Symbol	INFANTICIDE		4804263						
ANR	4804295	Symbol	D_PROCFAMILY		4804263						
ANR	4804296	Symbol	SIGKILL		4804263						
ANR	4804297	Function	KillFamily :: suspend	95:0:2140:2271							
ANR	4804298	FunctionDef	KillFamily :: suspend ()		4804297	0					
ANR	4804299	CompoundStatement		97:0:2167:2271	4804297	0					
ANR	4804300	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::suspend\\n"" )"	98:1:2170:2224	4804297	0	True				
ANR	4804301	CallExpression	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::suspend\\n"" )"		4804297	0					
ANR	4804302	Callee	dprintf		4804297	0					
ANR	4804303	Identifier	dprintf		4804297	0					
ANR	4804304	ArgumentList	D_PROCFAMILY		4804297	1					
ANR	4804305	Argument	D_PROCFAMILY		4804297	0					
ANR	4804306	Identifier	D_PROCFAMILY		4804297	0					
ANR	4804307	Argument	"""Entering KillFamily::suspend\\n"""		4804297	1					
ANR	4804308	PrimaryExpression	"""Entering KillFamily::suspend\\n"""		4804297	0					
ANR	4804309	ExpressionStatement	takesnapshot ( )	99:1:2227:2241	4804297	1	True				
ANR	4804310	CallExpression	takesnapshot ( )		4804297	0					
ANR	4804311	Callee	takesnapshot		4804297	0					
ANR	4804312	Identifier	takesnapshot		4804297	0					
ANR	4804313	ArgumentList			4804297	1					
ANR	4804314	ExpressionStatement	"spree ( SIGSTOP , PATRICIDE )"	100:1:2244:2269	4804297	2	True				
ANR	4804315	CallExpression	"spree ( SIGSTOP , PATRICIDE )"		4804297	0					
ANR	4804316	Callee	spree		4804297	0					
ANR	4804317	Identifier	spree		4804297	0					
ANR	4804318	ArgumentList	SIGSTOP		4804297	1					
ANR	4804319	Argument	SIGSTOP		4804297	0					
ANR	4804320	Identifier	SIGSTOP		4804297	0					
ANR	4804321	Argument	PATRICIDE		4804297	1					
ANR	4804322	Identifier	PATRICIDE		4804297	0					
ANR	4804323	ReturnType	void		4804297	1					
ANR	4804324	Identifier	KillFamily :: suspend		4804297	2					
ANR	4804325	ParameterList			4804297	3					
ANR	4804326	CFGEntryNode	ENTRY		4804297		True				
ANR	4804327	CFGExitNode	EXIT		4804297		True				
ANR	4804328	Symbol	D_PROCFAMILY		4804297						
ANR	4804329	Symbol	SIGSTOP		4804297						
ANR	4804330	Symbol	PATRICIDE		4804297						
ANR	4804331	Function	KillFamily :: resume	103:0:2274:2492							
ANR	4804332	FunctionDef	KillFamily :: resume ()		4804331	0					
ANR	4804333	CompoundStatement		105:0:2300:2492	4804331	0					
ANR	4804334	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::resume\\n"" )"	108:1:2407:2460	4804331	0	True				
ANR	4804335	CallExpression	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::resume\\n"" )"		4804331	0					
ANR	4804336	Callee	dprintf		4804331	0					
ANR	4804337	Identifier	dprintf		4804331	0					
ANR	4804338	ArgumentList	D_PROCFAMILY		4804331	1					
ANR	4804339	Argument	D_PROCFAMILY		4804331	0					
ANR	4804340	Identifier	D_PROCFAMILY		4804331	0					
ANR	4804341	Argument	"""Entering KillFamily::resume\\n"""		4804331	1					
ANR	4804342	PrimaryExpression	"""Entering KillFamily::resume\\n"""		4804331	0					
ANR	4804343	ExpressionStatement	"spree ( SIGCONT , INFANTICIDE )"	109:1:2463:2490	4804331	1	True				
ANR	4804344	CallExpression	"spree ( SIGCONT , INFANTICIDE )"		4804331	0					
ANR	4804345	Callee	spree		4804331	0					
ANR	4804346	Identifier	spree		4804331	0					
ANR	4804347	ArgumentList	SIGCONT		4804331	1					
ANR	4804348	Argument	SIGCONT		4804331	0					
ANR	4804349	Identifier	SIGCONT		4804331	0					
ANR	4804350	Argument	INFANTICIDE		4804331	1					
ANR	4804351	Identifier	INFANTICIDE		4804331	0					
ANR	4804352	ReturnType	void		4804331	1					
ANR	4804353	Identifier	KillFamily :: resume		4804331	2					
ANR	4804354	ParameterList			4804331	3					
ANR	4804355	CFGEntryNode	ENTRY		4804331		True				
ANR	4804356	CFGExitNode	EXIT		4804331		True				
ANR	4804357	Symbol	INFANTICIDE		4804331						
ANR	4804358	Symbol	D_PROCFAMILY		4804331						
ANR	4804359	Symbol	SIGCONT		4804331						
ANR	4804360	Function	KillFamily :: softkill	112:0:2495:2676							
ANR	4804361	FunctionDef	KillFamily :: softkill (int sig)		4804360	0					
ANR	4804362	CompoundStatement		114:0:2532:2676	4804360	0					
ANR	4804363	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::softkill sig=%d\\n"" , sig )"	115:1:2535:2601	4804360	0	True				
ANR	4804364	CallExpression	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::softkill sig=%d\\n"" , sig )"		4804360	0					
ANR	4804365	Callee	dprintf		4804360	0					
ANR	4804366	Identifier	dprintf		4804360	0					
ANR	4804367	ArgumentList	D_PROCFAMILY		4804360	1					
ANR	4804368	Argument	D_PROCFAMILY		4804360	0					
ANR	4804369	Identifier	D_PROCFAMILY		4804360	0					
ANR	4804370	Argument	"""Entering KillFamily::softkill sig=%d\\n"""		4804360	1					
ANR	4804371	PrimaryExpression	"""Entering KillFamily::softkill sig=%d\\n"""		4804360	0					
ANR	4804372	Argument	sig		4804360	2					
ANR	4804373	Identifier	sig		4804360	0					
ANR	4804374	ExpressionStatement	takesnapshot ( )	116:1:2604:2618	4804360	1	True				
ANR	4804375	CallExpression	takesnapshot ( )		4804360	0					
ANR	4804376	Callee	takesnapshot		4804360	0					
ANR	4804377	Identifier	takesnapshot		4804360	0					
ANR	4804378	ArgumentList			4804360	1					
ANR	4804379	ExpressionStatement	"spree ( SIGCONT , INFANTICIDE )"	117:1:2621:2648	4804360	2	True				
ANR	4804380	CallExpression	"spree ( SIGCONT , INFANTICIDE )"		4804360	0					
ANR	4804381	Callee	spree		4804360	0					
ANR	4804382	Identifier	spree		4804360	0					
ANR	4804383	ArgumentList	SIGCONT		4804360	1					
ANR	4804384	Argument	SIGCONT		4804360	0					
ANR	4804385	Identifier	SIGCONT		4804360	0					
ANR	4804386	Argument	INFANTICIDE		4804360	1					
ANR	4804387	Identifier	INFANTICIDE		4804360	0					
ANR	4804388	ExpressionStatement	"spree ( sig , INFANTICIDE )"	118:1:2651:2674	4804360	3	True				
ANR	4804389	CallExpression	"spree ( sig , INFANTICIDE )"		4804360	0					
ANR	4804390	Callee	spree		4804360	0					
ANR	4804391	Identifier	spree		4804360	0					
ANR	4804392	ArgumentList	sig		4804360	1					
ANR	4804393	Argument	sig		4804360	0					
ANR	4804394	Identifier	sig		4804360	0					
ANR	4804395	Argument	INFANTICIDE		4804360	1					
ANR	4804396	Identifier	INFANTICIDE		4804360	0					
ANR	4804397	ReturnType	void		4804360	1					
ANR	4804398	Identifier	KillFamily :: softkill		4804360	2					
ANR	4804399	ParameterList	int sig		4804360	3					
ANR	4804400	Parameter	int sig	113:22:2522:2528	4804360	0	True				
ANR	4804401	ParameterType	int		4804360	0					
ANR	4804402	Identifier	sig		4804360	1					
ANR	4804403	CFGEntryNode	ENTRY		4804360		True				
ANR	4804404	CFGExitNode	EXIT		4804360		True				
ANR	4804405	Symbol	sig		4804360						
ANR	4804406	Symbol	INFANTICIDE		4804360						
ANR	4804407	Symbol	D_PROCFAMILY		4804360						
ANR	4804408	Symbol	SIGCONT		4804360						
ANR	4804409	Function	KillFamily :: get_cpu_usage	121:0:2679:2875							
ANR	4804410	FunctionDef	"KillFamily :: get_cpu_usage (long & sys_time , long & user_time)"		4804409	0					
ANR	4804411	CompoundStatement		123:0:2745:2875	4804409	0					
ANR	4804412	ExpressionStatement	takesnapshot ( )	124:1:2748:2762	4804409	0	True				
ANR	4804413	CallExpression	takesnapshot ( )		4804409	0					
ANR	4804414	Callee	takesnapshot		4804409	0					
ANR	4804415	Identifier	takesnapshot		4804409	0					
ANR	4804416	ArgumentList			4804409	1					
ANR	4804417	ExpressionStatement	sys_time = exited_cpu_sys_time + alive_cpu_sys_time	125:1:2765:2816	4804409	1	True				
ANR	4804418	AssignmentExpression	sys_time = exited_cpu_sys_time + alive_cpu_sys_time		4804409	0		=			
ANR	4804419	Identifier	sys_time		4804409	0					
ANR	4804420	AdditiveExpression	exited_cpu_sys_time + alive_cpu_sys_time		4804409	1		+			
ANR	4804421	Identifier	exited_cpu_sys_time		4804409	0					
ANR	4804422	Identifier	alive_cpu_sys_time		4804409	1					
ANR	4804423	ExpressionStatement	user_time = exited_cpu_user_time + alive_cpu_user_time	126:1:2819:2873	4804409	2	True				
ANR	4804424	AssignmentExpression	user_time = exited_cpu_user_time + alive_cpu_user_time		4804409	0		=			
ANR	4804425	Identifier	user_time		4804409	0					
ANR	4804426	AdditiveExpression	exited_cpu_user_time + alive_cpu_user_time		4804409	1		+			
ANR	4804427	Identifier	exited_cpu_user_time		4804409	0					
ANR	4804428	Identifier	alive_cpu_user_time		4804409	1					
ANR	4804429	ReturnType	void		4804409	1					
ANR	4804430	Identifier	KillFamily :: get_cpu_usage		4804409	2					
ANR	4804431	ParameterList	"long & sys_time , long & user_time"		4804409	3					
ANR	4804432	Parameter	long & sys_time	122:26:2710:2724	4804409	0	True				
ANR	4804433	ParameterType	long &		4804409	0					
ANR	4804434	Identifier	sys_time		4804409	1					
ANR	4804435	Parameter	long & user_time	122:43:2727:2742	4804409	1	True				
ANR	4804436	ParameterType	long &		4804409	0					
ANR	4804437	Identifier	user_time		4804409	1					
ANR	4804438	CFGEntryNode	ENTRY		4804409		True				
ANR	4804439	CFGExitNode	EXIT		4804409		True				
ANR	4804440	Symbol	alive_cpu_user_time		4804409						
ANR	4804441	Symbol	exited_cpu_user_time		4804409						
ANR	4804442	Symbol	sys_time		4804409						
ANR	4804443	Symbol	exited_cpu_sys_time		4804409						
ANR	4804444	Symbol	user_time		4804409						
ANR	4804445	Symbol	alive_cpu_sys_time		4804409						
ANR	4804446	Function	KillFamily :: get_max_imagesize	129:0:2878:2972							
ANR	4804447	FunctionDef	KillFamily :: get_max_imagesize (unsigned long & max_image)		4804446	0					
ANR	4804448	CompoundStatement		131:0:2941:2972	4804446	0					
ANR	4804449	ExpressionStatement	max_image = max_image_size	132:1:2944:2970	4804446	0	True				
ANR	4804450	AssignmentExpression	max_image = max_image_size		4804446	0		=			
ANR	4804451	Identifier	max_image		4804446	0					
ANR	4804452	Identifier	max_image_size		4804446	1					
ANR	4804453	ReturnType	void		4804446	1					
ANR	4804454	Identifier	KillFamily :: get_max_imagesize		4804446	2					
ANR	4804455	ParameterList	unsigned long & max_image		4804446	3					
ANR	4804456	Parameter	unsigned long & max_image	130:30:2913:2937	4804446	0	True				
ANR	4804457	ParameterType	unsigned long &		4804446	0					
ANR	4804458	Identifier	max_image		4804446	1					
ANR	4804459	CFGEntryNode	ENTRY		4804446		True				
ANR	4804460	CFGExitNode	EXIT		4804446		True				
ANR	4804461	Symbol	max_image		4804446						
ANR	4804462	Symbol	max_image_size		4804446						
ANR	4804463	Function	KillFamily :: safe_kill	135:0:2975:4789							
ANR	4804464	FunctionDef	"KillFamily :: safe_kill (a_pid * pid , int sig)"		4804463	0					
ANR	4804465	CompoundStatement		137:0:3023:4789	4804463	0					
ANR	4804466	IdentifierDeclStatement	priv_state priv ;	138:1:3026:3041	4804463	0	True				
ANR	4804467	IdentifierDecl	priv		4804463	0					
ANR	4804468	IdentifierDeclType	priv_state		4804463	0					
ANR	4804469	Identifier	priv		4804463	1					
ANR	4804470	IdentifierDeclStatement	pid_t inpid ;	139:1:3044:3055	4804463	1	True				
ANR	4804471	IdentifierDecl	inpid		4804463	0					
ANR	4804472	IdentifierDeclType	pid_t		4804463	0					
ANR	4804473	Identifier	inpid		4804463	1					
ANR	4804474	ExpressionStatement	inpid = pid -> pid	141:1:3059:3075	4804463	2	True				
ANR	4804475	AssignmentExpression	inpid = pid -> pid		4804463	0		=			
ANR	4804476	Identifier	inpid		4804463	0					
ANR	4804477	PtrMemberAccess	pid -> pid		4804463	1					
ANR	4804478	Identifier	pid		4804463	0					
ANR	4804479	Identifier	pid		4804463	1					
ANR	4804480	IfStatement	if ( inpid < 2 || daddy_pid < 2 )		4804463	3					
ANR	4804481	Condition	inpid < 2 || daddy_pid < 2	144:6:3131:3156	4804463	0	True				
ANR	4804482	OrExpression	inpid < 2 || daddy_pid < 2		4804463	0		||			
ANR	4804483	RelationalExpression	inpid < 2		4804463	0		<			
ANR	4804484	Identifier	inpid		4804463	0					
ANR	4804485	PrimaryExpression	2		4804463	1					
ANR	4804486	RelationalExpression	daddy_pid < 2		4804463	1		<			
ANR	4804487	Identifier	daddy_pid		4804463	0					
ANR	4804488	PrimaryExpression	2		4804463	1					
ANR	4804489	CompoundStatement		8:35:136:136	4804463	1					
ANR	4804490	IfStatement	if ( test_only_flag )		4804463	0					
ANR	4804491	Condition	test_only_flag	145:7:3169:3182	4804463	0	True				
ANR	4804492	Identifier	test_only_flag		4804463	0					
ANR	4804493	CompoundStatement		9:24:162:162	4804463	1					
ANR	4804494	ExpressionStatement	"printf ( ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"	146:3:3191:3260	4804463	0	True				
ANR	4804495	CallExpression	"printf ( ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"		4804463	0					
ANR	4804496	Callee	printf		4804463	0					
ANR	4804497	Identifier	printf		4804463	0					
ANR	4804498	ArgumentList	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		4804463	1					
ANR	4804499	Argument	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		4804463	0					
ANR	4804500	PrimaryExpression	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		4804463	0					
ANR	4804501	Argument	inpid		4804463	1					
ANR	4804502	Identifier	inpid		4804463	0					
ANR	4804503	ElseStatement	else		4804463	0					
ANR	4804504	CompoundStatement		12:10:248:248	4804463	0					
ANR	4804505	ExpressionStatement	"dprintf ( D_ALWAYS , ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"	149:3:3277:3356	4804463	0	True				
ANR	4804506	CallExpression	"dprintf ( D_ALWAYS , ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"		4804463	0					
ANR	4804507	Callee	dprintf		4804463	0					
ANR	4804508	Identifier	dprintf		4804463	0					
ANR	4804509	ArgumentList	D_ALWAYS		4804463	1					
ANR	4804510	Argument	D_ALWAYS		4804463	0					
ANR	4804511	Identifier	D_ALWAYS		4804463	0					
ANR	4804512	Argument	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		4804463	1					
ANR	4804513	PrimaryExpression	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		4804463	0					
ANR	4804514	Argument	inpid		4804463	2					
ANR	4804515	Identifier	inpid		4804463	0					
ANR	4804516	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"	151:3:3361:3444	4804463	1	True				
ANR	4804517	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"		4804463	0					
ANR	4804518	Callee	dprintf		4804463	0					
ANR	4804519	Identifier	dprintf		4804463	0					
ANR	4804520	ArgumentList	D_PROCFAMILY		4804463	1					
ANR	4804521	Argument	D_PROCFAMILY		4804463	0					
ANR	4804522	Identifier	D_PROCFAMILY		4804463	0					
ANR	4804523	Argument	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		4804463	1					
ANR	4804524	PrimaryExpression	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		4804463	0					
ANR	4804525	Argument	inpid		4804463	2					
ANR	4804526	Identifier	inpid		4804463	0					
ANR	4804527	ReturnStatement	return ;	155:2:3454:3460	4804463	1	True				
ANR	4804528	ExpressionStatement	priv = set_priv ( mypriv )	158:1:3467:3490	4804463	4	True				
ANR	4804529	AssignmentExpression	priv = set_priv ( mypriv )		4804463	0		=			
ANR	4804530	Identifier	priv		4804463	0					
ANR	4804531	CallExpression	set_priv ( mypriv )		4804463	1					
ANR	4804532	Callee	set_priv		4804463	0					
ANR	4804533	Identifier	set_priv		4804463	0					
ANR	4804534	ArgumentList	mypriv		4804463	1					
ANR	4804535	Argument	mypriv		4804463	0					
ANR	4804536	Identifier	mypriv		4804463	0					
ANR	4804537	IfStatement	if ( test_only_flag )		4804463	5					
ANR	4804538	Condition	test_only_flag	160:6:3499:3512	4804463	0	True				
ANR	4804539	Identifier	test_only_flag		4804463	0					
ANR	4804540	CompoundStatement		24:23:492:492	4804463	1					
ANR	4804541	ExpressionStatement	"printf ( ""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"" , inpid , sig )"	161:2:3520:3606	4804463	0	True				
ANR	4804542	CallExpression	"printf ( ""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"" , inpid , sig )"		4804463	0					
ANR	4804543	Callee	printf		4804463	0					
ANR	4804544	Identifier	printf		4804463	0					
ANR	4804545	ArgumentList	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		4804463	1					
ANR	4804546	Argument	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		4804463	0					
ANR	4804547	PrimaryExpression	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		4804463	0					
ANR	4804548	Argument	inpid		4804463	1					
ANR	4804549	Identifier	inpid		4804463	0					
ANR	4804550	Argument	sig		4804463	2					
ANR	4804551	Identifier	sig		4804463	0					
ANR	4804552	ElseStatement	else		4804463	0					
ANR	4804553	CompoundStatement		28:8:592:592	4804463	0					
ANR	4804554	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"" , inpid , sig )"	165:2:3620:3720	4804463	0	True				
ANR	4804555	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"" , inpid , sig )"		4804463	0					
ANR	4804556	Callee	dprintf		4804463	0					
ANR	4804557	Identifier	dprintf		4804463	0					
ANR	4804558	ArgumentList	D_PROCFAMILY		4804463	1					
ANR	4804559	Argument	D_PROCFAMILY		4804463	0					
ANR	4804560	Identifier	D_PROCFAMILY		4804463	0					
ANR	4804561	Argument	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		4804463	1					
ANR	4804562	PrimaryExpression	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		4804463	0					
ANR	4804563	Argument	inpid		4804463	2					
ANR	4804564	Identifier	inpid		4804463	0					
ANR	4804565	Argument	sig		4804463	3					
ANR	4804566	Identifier	sig		4804463	0					
ANR	4804567	IfStatement	if ( ! test_only_flag )		4804463	6					
ANR	4804568	Condition	! test_only_flag	170:6:3732:3746	4804463	0	True				
ANR	4804569	UnaryOperationExpression	! test_only_flag		4804463	0					
ANR	4804570	UnaryOperator	!		4804463	0					
ANR	4804571	Identifier	test_only_flag		4804463	1					
ANR	4804572	CompoundStatement		40:2:772:782	4804463	1					
ANR	4804573	IdentifierDeclStatement	HANDLE pHnd ;	174:2:3769:3780	4804463	0	True				
ANR	4804574	IdentifierDecl	pHnd		4804463	0					
ANR	4804575	IdentifierDeclType	HANDLE		4804463	0					
ANR	4804576	Identifier	pHnd		4804463	1					
ANR	4804577	IdentifierDeclStatement	piPTR pi ;	175:2:3784:3792	4804463	1	True				
ANR	4804578	IdentifierDecl	pi		4804463	0					
ANR	4804579	IdentifierDeclType	piPTR		4804463	0					
ANR	4804580	Identifier	pi		4804463	1					
ANR	4804581	IdentifierDeclStatement	int status ;	176:2:3796:3806	4804463	2	True				
ANR	4804582	IdentifierDecl	status		4804463	0					
ANR	4804583	IdentifierDeclType	int		4804463	0					
ANR	4804584	Identifier	status		4804463	1					
ANR	4804585	ExpressionStatement	pi = NULL	178:2:3811:3820	4804463	3	True				
ANR	4804586	AssignmentExpression	pi = NULL		4804463	0		=			
ANR	4804587	Identifier	pi		4804463	0					
ANR	4804588	Identifier	NULL		4804463	1					
ANR	4804589	ExpressionStatement	"pHnd = OpenProcess ( PROCESS_QUERY_INFORMATION , FALSE , inpid )"	180:2:3825:3884	4804463	4	True				
ANR	4804590	AssignmentExpression	"pHnd = OpenProcess ( PROCESS_QUERY_INFORMATION , FALSE , inpid )"		4804463	0		=			
ANR	4804591	Identifier	pHnd		4804463	0					
ANR	4804592	CallExpression	"OpenProcess ( PROCESS_QUERY_INFORMATION , FALSE , inpid )"		4804463	1					
ANR	4804593	Callee	OpenProcess		4804463	0					
ANR	4804594	Identifier	OpenProcess		4804463	0					
ANR	4804595	ArgumentList	PROCESS_QUERY_INFORMATION		4804463	1					
ANR	4804596	Argument	PROCESS_QUERY_INFORMATION		4804463	0					
ANR	4804597	Identifier	PROCESS_QUERY_INFORMATION		4804463	0					
ANR	4804598	Argument	FALSE		4804463	1					
ANR	4804599	Identifier	FALSE		4804463	0					
ANR	4804600	Argument	inpid		4804463	2					
ANR	4804601	Identifier	inpid		4804463	0					
ANR	4804602	IfStatement	if ( pHnd == NULL )		4804463	5					
ANR	4804603	Condition	pHnd == NULL	182:7:3894:3905	4804463	0	True				
ANR	4804604	EqualityExpression	pHnd == NULL		4804463	0		==			
ANR	4804605	Identifier	pHnd		4804463	0					
ANR	4804606	Identifier	NULL		4804463	1					
ANR	4804607	CompoundStatement		46:22:885:885	4804463	1					
ANR	4804608	Statement	dprintf	183:3:3914:3920	4804463	0	True				
ANR	4804609	Statement	(	183:10:3921:3921	4804463	1	True				
ANR	4804610	Statement	D_ALWAYS	183:11:3922:3929	4804463	2	True				
ANR	4804611	Statement	","	183:19:3930:3930	4804463	3	True				
ANR	4804612	Statement	"""Procfamily: ERROR: Could not open pid %d """	183:21:3932:3974	4804463	4	True				
ANR	4804613	Statement	"""(err=%d). Maybe it exited already?\\n"""	184:4:3980:4017	4804463	5	True				
ANR	4804614	Statement	","	184:42:4018:4018	4804463	6	True				
ANR	4804615	Statement	inpid	184:44:4020:4024	4804463	7	True				
ANR	4804616	Statement	","	184:49:4025:4025	4804463	8	True				
ANR	4804617	Statement	GetLastError	184:51:4027:4038	4804463	9	True				
ANR	4804618	Statement	(	184:63:4039:4039	4804463	10	True				
ANR	4804619	Statement	)	184:64:4040:4040	4804463	11	True				
ANR	4804620	Statement	)	184:65:4041:4041	4804463	12	True				
ANR	4804621	ExpressionStatement		184:66:4042:4042	4804463	13	True				
ANR	4804622	IfStatement	"if ( ProcAPI :: getProcInfo ( inpid , pi , status ) == PROCAPI_SUCCESS )"		4804463	6					
ANR	4804623	Condition	"ProcAPI :: getProcInfo ( inpid , pi , status ) == PROCAPI_SUCCESS"	187:7:4056:4113	4804463	0	True				
ANR	4804624	EqualityExpression	"ProcAPI :: getProcInfo ( inpid , pi , status ) == PROCAPI_SUCCESS"		4804463	0		==			
ANR	4804625	CallExpression	"ProcAPI :: getProcInfo ( inpid , pi , status )"		4804463	0					
ANR	4804626	Callee	ProcAPI :: getProcInfo		4804463	0					
ANR	4804627	Identifier	ProcAPI :: getProcInfo		4804463	0					
ANR	4804628	ArgumentList	inpid		4804463	1					
ANR	4804629	Argument	inpid		4804463	0					
ANR	4804630	Identifier	inpid		4804463	0					
ANR	4804631	Argument	pi		4804463	1					
ANR	4804632	Identifier	pi		4804463	0					
ANR	4804633	Argument	status		4804463	2					
ANR	4804634	Identifier	status		4804463	0					
ANR	4804635	Identifier	PROCAPI_SUCCESS		4804463	1					
ANR	4804636	CompoundStatement		51:68:1093:1093	4804463	1					
ANR	4804637	IfStatement	"if ( daemonCore -> Send_Signal ( inpid , sig ) == FALSE )"		4804463	0					
ANR	4804638	Condition	"daemonCore -> Send_Signal ( inpid , sig ) == FALSE"	189:8:4128:4170	4804463	0	True				
ANR	4804639	EqualityExpression	"daemonCore -> Send_Signal ( inpid , sig ) == FALSE"		4804463	0		==			
ANR	4804640	CallExpression	"daemonCore -> Send_Signal ( inpid , sig )"		4804463	0					
ANR	4804641	Callee	daemonCore -> Send_Signal		4804463	0					
ANR	4804642	PtrMemberAccess	daemonCore -> Send_Signal		4804463	0					
ANR	4804643	Identifier	daemonCore		4804463	0					
ANR	4804644	Identifier	Send_Signal		4804463	1					
ANR	4804645	ArgumentList	inpid		4804463	1					
ANR	4804646	Argument	inpid		4804463	0					
ANR	4804647	Identifier	inpid		4804463	0					
ANR	4804648	Argument	sig		4804463	1					
ANR	4804649	Identifier	sig		4804463	0					
ANR	4804650	Identifier	FALSE		4804463	1					
ANR	4804651	CompoundStatement		53:54:1150:1150	4804463	1					
ANR	4804652	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: Send_Signal(%d,%d) failed\\n"" , inpid , sig )"	190:4:4180:4276	4804463	0	True				
ANR	4804653	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: Send_Signal(%d,%d) failed\\n"" , inpid , sig )"		4804463	0					
ANR	4804654	Callee	dprintf		4804463	0					
ANR	4804655	Identifier	dprintf		4804463	0					
ANR	4804656	ArgumentList	D_PROCFAMILY		4804463	1					
ANR	4804657	Argument	D_PROCFAMILY		4804463	0					
ANR	4804658	Identifier	D_PROCFAMILY		4804463	0					
ANR	4804659	Argument	"""KillFamily::safe_kill: Send_Signal(%d,%d) failed\\n"""		4804463	1					
ANR	4804660	PrimaryExpression	"""KillFamily::safe_kill: Send_Signal(%d,%d) failed\\n"""		4804463	0					
ANR	4804661	Argument	inpid		4804463	2					
ANR	4804662	Identifier	inpid		4804463	0					
ANR	4804663	Argument	sig		4804463	3					
ANR	4804664	Identifier	sig		4804463	0					
ANR	4804665	ElseStatement	else		4804463	0					
ANR	4804666	CompoundStatement		59:9:1269:1269	4804463	0					
ANR	4804667	Statement	dprintf	200:3:4396:4402	4804463	0	True				
ANR	4804668	Statement	(	200:10:4403:4403	4804463	1	True				
ANR	4804669	Statement	D_PROCFAMILY	200:11:4404:4415	4804463	2	True				
ANR	4804670	Statement	","	200:23:4416:4416	4804463	3	True				
ANR	4804671	Statement	"""Procfamily: getProcInfo() failed to """	200:25:4418:4455	4804463	4	True				
ANR	4804672	Statement	"""get info for pid %d, so it is presumed dead.\\n"""	201:5:4462:4509	4804463	5	True				
ANR	4804673	Statement	","	201:53:4510:4510	4804463	6	True				
ANR	4804674	Statement	inpid	201:55:4512:4516	4804463	7	True				
ANR	4804675	Statement	)	201:60:4517:4517	4804463	8	True				
ANR	4804676	ExpressionStatement		201:61:4518:4518	4804463	9	True				
ANR	4804677	IfStatement	if ( pi )		4804463	7					
ANR	4804678	Condition	pi	204:7:4532:4533	4804463	0	True				
ANR	4804679	Identifier	pi		4804463	0					
ANR	4804680	CompoundStatement		68:12:1513:1513	4804463	1					
ANR	4804681	Statement	delete	205:3:4542:4547	4804463	0	True				
ANR	4804682	ExpressionStatement	pi	205:10:4549:4551	4804463	1	True				
ANR	4804683	Identifier	pi		4804463	0					
ANR	4804684	IfStatement	if ( pHnd )		4804463	8					
ANR	4804685	Condition	pHnd	208:7:4565:4568	4804463	0	True				
ANR	4804686	Identifier	pHnd		4804463	0					
ANR	4804687	CompoundStatement		72:13:1547:1547	4804463	1					
ANR	4804688	ExpressionStatement	CloseHandle ( pHnd )	209:6:4579:4596	4804463	0	True				
ANR	4804689	CallExpression	CloseHandle ( pHnd )		4804463	0					
ANR	4804690	Callee	CloseHandle		4804463	0					
ANR	4804691	Identifier	CloseHandle		4804463	0					
ANR	4804692	ArgumentList	pHnd		4804463	1					
ANR	4804693	Argument	pHnd		4804463	0					
ANR	4804694	Identifier	pHnd		4804463	0					
ANR	4804695	ExpressionStatement	set_priv ( priv )	221:1:4773:4787	4804463	7	True				
ANR	4804696	CallExpression	set_priv ( priv )		4804463	0					
ANR	4804697	Callee	set_priv		4804463	0					
ANR	4804698	Identifier	set_priv		4804463	0					
ANR	4804699	ArgumentList	priv		4804463	1					
ANR	4804700	Argument	priv		4804463	0					
ANR	4804701	Identifier	priv		4804463	0					
ANR	4804702	ReturnType	void		4804463	1					
ANR	4804703	Identifier	KillFamily :: safe_kill		4804463	2					
ANR	4804704	ParameterList	"a_pid * pid , int sig"		4804463	3					
ANR	4804705	Parameter	a_pid * pid	136:22:3002:3011	4804463	0	True				
ANR	4804706	ParameterType	a_pid *		4804463	0					
ANR	4804707	Identifier	pid		4804463	1					
ANR	4804708	Parameter	int sig	136:34:3014:3020	4804463	1	True				
ANR	4804709	ParameterType	int		4804463	0					
ANR	4804710	Identifier	sig		4804463	1					
ANR	4804711	CFGEntryNode	ENTRY		4804463		True				
ANR	4804712	CFGExitNode	EXIT		4804463		True				
ANR	4804713	Symbol	test_only_flag		4804463						
ANR	4804714	Symbol	pid -> pid		4804463						
ANR	4804715	Symbol	D_PROCFAMILY		4804463						
ANR	4804716	Symbol	NULL		4804463						
ANR	4804717	Symbol	mypriv		4804463						
ANR	4804718	Symbol	D_ALWAYS		4804463						
ANR	4804719	Symbol	PROCAPI_SUCCESS		4804463						
ANR	4804720	Symbol	pid		4804463						
ANR	4804721	Symbol	sig		4804463						
ANR	4804722	Symbol	set_priv		4804463						
ANR	4804723	Symbol	ProcAPI :: getProcInfo		4804463						
ANR	4804724	Symbol	daemonCore -> Send_Signal		4804463						
ANR	4804725	Symbol	* pid		4804463						
ANR	4804726	Symbol	* daemonCore		4804463						
ANR	4804727	Symbol	daemonCore		4804463						
ANR	4804728	Symbol	pi		4804463						
ANR	4804729	Symbol	pHnd		4804463						
ANR	4804730	Symbol	FALSE		4804463						
ANR	4804731	Symbol	priv		4804463						
ANR	4804732	Symbol	PROCESS_QUERY_INFORMATION		4804463						
ANR	4804733	Symbol	inpid		4804463						
ANR	4804734	Symbol	OpenProcess		4804463						
ANR	4804735	Symbol	daddy_pid		4804463						
ANR	4804736	Symbol	status		4804463						
ANR	4804737	Function	KillFamily :: spree	225:0:4793:5291							
ANR	4804738	FunctionDef	"KillFamily :: spree (int sig , KILLFAMILY_DIRECTION direction)"		4804737	0					
ANR	4804739	CompoundStatement		227:0:4856:5291	4804737	0					
ANR	4804740	IdentifierDeclStatement	int start = 0 ;	228:1:4859:4872	4804737	0	True				
ANR	4804741	IdentifierDecl	start = 0		4804737	0					
ANR	4804742	IdentifierDeclType	int		4804737	0					
ANR	4804743	Identifier	start		4804737	1					
ANR	4804744	AssignmentExpression	start = 0		4804737	2		=			
ANR	4804745	Identifier	start		4804737	0					
ANR	4804746	PrimaryExpression	0		4804737	1					
ANR	4804747	IdentifierDeclStatement	int i = - 1 ;	229:1:4875:4885	4804737	1	True				
ANR	4804748	IdentifierDecl	i = - 1		4804737	0					
ANR	4804749	IdentifierDeclType	int		4804737	0					
ANR	4804750	Identifier	i		4804737	1					
ANR	4804751	AssignmentExpression	i = - 1		4804737	2		=			
ANR	4804752	Identifier	i		4804737	0					
ANR	4804753	UnaryOperationExpression	- 1		4804737	1					
ANR	4804754	UnaryOperator	-		4804737	0					
ANR	4804755	PrimaryExpression	1		4804737	1					
ANR	4804756	IdentifierDeclStatement	int j ;	230:1:4888:4893	4804737	2	True				
ANR	4804757	IdentifierDecl	j		4804737	0					
ANR	4804758	IdentifierDeclType	int		4804737	0					
ANR	4804759	Identifier	j		4804737	1					
ANR	4804760	DoStatement	do		4804737	3					
ANR	4804761	CompoundStatement		6:4:43:43	4804737	0					
ANR	4804762	ExpressionStatement	i ++	233:2:4904:4907	4804737	0	True				
ANR	4804763	PostIncDecOperationExpression	i ++		4804737	0					
ANR	4804764	Identifier	i		4804737	0					
ANR	4804765	IncDec	++		4804737	1					
ANR	4804766	IfStatement	if ( ( * old_pids ) [ i ] . ppid == 1 || ( * old_pids ) [ i ] . pid == 0 )		4804737	1					
ANR	4804767	Condition	( * old_pids ) [ i ] . ppid == 1 || ( * old_pids ) [ i ] . pid == 0	234:7:4916:4966	4804737	0	True				
ANR	4804768	OrExpression	( * old_pids ) [ i ] . ppid == 1 || ( * old_pids ) [ i ] . pid == 0		4804737	0		||			
ANR	4804769	EqualityExpression	( * old_pids ) [ i ] . ppid == 1		4804737	0		==			
ANR	4804770	MemberAccess	( * old_pids ) [ i ] . ppid		4804737	0					
ANR	4804771	ArrayIndexing	( * old_pids ) [ i ]		4804737	0					
ANR	4804772	UnaryOperationExpression	* old_pids		4804737	0					
ANR	4804773	UnaryOperator	*		4804737	0					
ANR	4804774	Identifier	old_pids		4804737	1					
ANR	4804775	Identifier	i		4804737	1					
ANR	4804776	Identifier	ppid		4804737	1					
ANR	4804777	PrimaryExpression	1		4804737	1					
ANR	4804778	EqualityExpression	( * old_pids ) [ i ] . pid == 0		4804737	1		==			
ANR	4804779	MemberAccess	( * old_pids ) [ i ] . pid		4804737	0					
ANR	4804780	ArrayIndexing	( * old_pids ) [ i ]		4804737	0					
ANR	4804781	UnaryOperationExpression	* old_pids		4804737	0					
ANR	4804782	UnaryOperator	*		4804737	0					
ANR	4804783	Identifier	old_pids		4804737	1					
ANR	4804784	Identifier	i		4804737	1					
ANR	4804785	Identifier	pid		4804737	1					
ANR	4804786	PrimaryExpression	0		4804737	1					
ANR	4804787	CompoundStatement		8:61:113:113	4804737	1					
ANR	4804788	IfStatement	if ( direction == PATRICIDE )		4804737	0					
ANR	4804789	Condition	direction == PATRICIDE	235:8:4980:5001	4804737	0	True				
ANR	4804790	EqualityExpression	direction == PATRICIDE		4804737	0		==			
ANR	4804791	Identifier	direction		4804737	0					
ANR	4804792	Identifier	PATRICIDE		4804737	1					
ANR	4804793	CompoundStatement		9:33:148:148	4804737	1					
ANR	4804794	ForStatement	for ( j = start ; j < i ; j ++ )		4804737	0					
ANR	4804795	ForInit	j = start ;	237:9:5051:5058	4804737	0	True				
ANR	4804796	AssignmentExpression	j = start		4804737	0		=			
ANR	4804797	Identifier	j		4804737	0					
ANR	4804798	Identifier	start		4804737	1					
ANR	4804799	Condition	j < i	237:17:5059:5061	4804737	1	True				
ANR	4804800	RelationalExpression	j < i		4804737	0		<			
ANR	4804801	Identifier	j		4804737	0					
ANR	4804802	Identifier	i		4804737	1					
ANR	4804803	PostIncDecOperationExpression	j ++	237:21:5063:5065	4804737	2	True				
ANR	4804804	Identifier	j		4804737	0					
ANR	4804805	IncDec	++		4804737	1					
ANR	4804806	CompoundStatement		11:26:211:211	4804737	3					
ANR	4804807	ExpressionStatement	"safe_kill ( & ( * old_pids ) [ j ] , sig )"	238:5:5075:5106	4804737	0	True				
ANR	4804808	CallExpression	"safe_kill ( & ( * old_pids ) [ j ] , sig )"		4804737	0					
ANR	4804809	Callee	safe_kill		4804737	0					
ANR	4804810	Identifier	safe_kill		4804737	0					
ANR	4804811	ArgumentList	& ( * old_pids ) [ j ]		4804737	1					
ANR	4804812	Argument	& ( * old_pids ) [ j ]		4804737	0					
ANR	4804813	UnaryOperationExpression	& ( * old_pids ) [ j ]		4804737	0					
ANR	4804814	UnaryOperator	&		4804737	0					
ANR	4804815	ArrayIndexing	( * old_pids ) [ j ]		4804737	1					
ANR	4804816	UnaryOperationExpression	* old_pids		4804737	0					
ANR	4804817	UnaryOperator	*		4804737	0					
ANR	4804818	Identifier	old_pids		4804737	1					
ANR	4804819	Identifier	j		4804737	1					
ANR	4804820	Argument	sig		4804737	1					
ANR	4804821	Identifier	sig		4804737	0					
ANR	4804822	ElseStatement	else		4804737	0					
ANR	4804823	CompoundStatement		14:10:267:267	4804737	0					
ANR	4804824	ForStatement	for ( j = i - 1 ; j >= start ; j -- )		4804737	0					
ANR	4804825	ForInit	j = i - 1 ;	242:9:5169:5174	4804737	0	True				
ANR	4804826	AssignmentExpression	j = i - 1		4804737	0		=			
ANR	4804827	Identifier	j		4804737	0					
ANR	4804828	AdditiveExpression	i - 1		4804737	1		-			
ANR	4804829	Identifier	i		4804737	0					
ANR	4804830	PrimaryExpression	1		4804737	1					
ANR	4804831	Condition	j >= start	242:15:5175:5182	4804737	1	True				
ANR	4804832	RelationalExpression	j >= start		4804737	0		>=			
ANR	4804833	Identifier	j		4804737	0					
ANR	4804834	Identifier	start		4804737	1					
ANR	4804835	PostIncDecOperationExpression	j --	242:24:5184:5186	4804737	2	True				
ANR	4804836	Identifier	j		4804737	0					
ANR	4804837	IncDec	--		4804737	1					
ANR	4804838	CompoundStatement		16:29:332:332	4804737	3					
ANR	4804839	ExpressionStatement	"safe_kill ( & ( * old_pids ) [ j ] , sig )"	243:5:5196:5227	4804737	0	True				
ANR	4804840	CallExpression	"safe_kill ( & ( * old_pids ) [ j ] , sig )"		4804737	0					
ANR	4804841	Callee	safe_kill		4804737	0					
ANR	4804842	Identifier	safe_kill		4804737	0					
ANR	4804843	ArgumentList	& ( * old_pids ) [ j ]		4804737	1					
ANR	4804844	Argument	& ( * old_pids ) [ j ]		4804737	0					
ANR	4804845	UnaryOperationExpression	& ( * old_pids ) [ j ]		4804737	0					
ANR	4804846	UnaryOperator	&		4804737	0					
ANR	4804847	ArrayIndexing	( * old_pids ) [ j ]		4804737	1					
ANR	4804848	UnaryOperationExpression	* old_pids		4804737	0					
ANR	4804849	UnaryOperator	*		4804737	0					
ANR	4804850	Identifier	old_pids		4804737	1					
ANR	4804851	Identifier	j		4804737	1					
ANR	4804852	Argument	sig		4804737	1					
ANR	4804853	Identifier	sig		4804737	0					
ANR	4804854	ExpressionStatement	start = i	246:3:5243:5252	4804737	1	True				
ANR	4804855	AssignmentExpression	start = i		4804737	0		=			
ANR	4804856	Identifier	start		4804737	0					
ANR	4804857	Identifier	i		4804737	1					
ANR	4804858	Condition	( * old_pids ) [ i ] . pid	248:11:5269:5286	4804737	1	True				
ANR	4804859	MemberAccess	( * old_pids ) [ i ] . pid		4804737	0					
ANR	4804860	ArrayIndexing	( * old_pids ) [ i ]		4804737	0					
ANR	4804861	UnaryOperationExpression	* old_pids		4804737	0					
ANR	4804862	UnaryOperator	*		4804737	0					
ANR	4804863	Identifier	old_pids		4804737	1					
ANR	4804864	Identifier	i		4804737	1					
ANR	4804865	Identifier	pid		4804737	1					
ANR	4804866	ReturnType	void		4804737	1					
ANR	4804867	Identifier	KillFamily :: spree		4804737	2					
ANR	4804868	ParameterList	"int sig , KILLFAMILY_DIRECTION direction"		4804737	3					
ANR	4804869	Parameter	int sig	226:18:4816:4822	4804737	0	True				
ANR	4804870	ParameterType	int		4804737	0					
ANR	4804871	Identifier	sig		4804737	1					
ANR	4804872	Parameter	KILLFAMILY_DIRECTION direction	226:26:4824:4853	4804737	1	True				
ANR	4804873	ParameterType	KILLFAMILY_DIRECTION		4804737	0					
ANR	4804874	Identifier	direction		4804737	1					
ANR	4804875	CFGEntryNode	ENTRY		4804737		True				
ANR	4804876	CFGExitNode	EXIT		4804737		True				
ANR	4804877	Symbol	sig		4804737						
ANR	4804878	Symbol	* * old_pids		4804737						
ANR	4804879	Symbol	( * old_pids ) [ i ] . ppid		4804737						
ANR	4804880	Symbol	* i		4804737						
ANR	4804881	Symbol	( * old_pids ) [ i ] . pid		4804737						
ANR	4804882	Symbol	* old_pids		4804737						
ANR	4804883	Symbol	old_pids		4804737						
ANR	4804884	Symbol	start		4804737						
ANR	4804885	Symbol	i		4804737						
ANR	4804886	Symbol	j		4804737						
ANR	4804887	Symbol	PATRICIDE		4804737						
ANR	4804888	Symbol	direction		4804737						
ANR	4804889	Function	KillFamily :: takesnapshot	251:0:5294:13025							
ANR	4804890	FunctionDef	KillFamily :: takesnapshot ()		4804889	0					
ANR	4804891	CompoundStatement		253:0:5326:13025	4804889	0					
ANR	4804892	IdentifierDeclStatement	ExtArray < a_pid > * new_pids ;	254:1:5329:5354	4804889	0	True				
ANR	4804893	IdentifierDecl	* new_pids		4804889	0					
ANR	4804894	IdentifierDeclType	ExtArray < a_pid > *		4804889	0					
ANR	4804895	Identifier	new_pids		4804889	1					
ANR	4804896	IdentifierDeclStatement	struct procInfo * pinfo = NULL ;	255:1:5357:5386	4804889	1	True				
ANR	4804897	IdentifierDecl	* pinfo = NULL		4804889	0					
ANR	4804898	IdentifierDeclType	struct procInfo *		4804889	0					
ANR	4804899	Identifier	pinfo		4804889	1					
ANR	4804900	AssignmentExpression	* pinfo = NULL		4804889	2		=			
ANR	4804901	Identifier	NULL		4804889	0					
ANR	4804902	Identifier	NULL		4804889	1					
ANR	4804903	IdentifierDeclStatement	"int i , j , newpidindex ;"	256:1:5389:5408	4804889	2	True				
ANR	4804904	IdentifierDecl	i		4804889	0					
ANR	4804905	IdentifierDeclType	int		4804889	0					
ANR	4804906	Identifier	i		4804889	1					
ANR	4804907	IdentifierDecl	j		4804889	1					
ANR	4804908	IdentifierDeclType	int		4804889	0					
ANR	4804909	Identifier	j		4804889	1					
ANR	4804910	IdentifierDecl	newpidindex		4804889	2					
ANR	4804911	IdentifierDeclType	int		4804889	0					
ANR	4804912	Identifier	newpidindex		4804889	1					
ANR	4804913	IdentifierDeclStatement	pid_t currpid ;	257:1:5411:5424	4804889	3	True				
ANR	4804914	IdentifierDecl	currpid		4804889	0					
ANR	4804915	IdentifierDeclType	pid_t		4804889	0					
ANR	4804916	Identifier	currpid		4804889	1					
ANR	4804917	IdentifierDeclStatement	priv_state priv ;	258:1:5427:5442	4804889	4	True				
ANR	4804918	IdentifierDecl	priv		4804889	0					
ANR	4804919	IdentifierDeclType	priv_state		4804889	0					
ANR	4804920	Identifier	priv		4804889	1					
ANR	4804921	IdentifierDeclStatement	bool currpid_exited ;	259:1:5445:5464	4804889	5	True				
ANR	4804922	IdentifierDecl	currpid_exited		4804889	0					
ANR	4804923	IdentifierDeclType	bool		4804889	0					
ANR	4804924	Identifier	currpid_exited		4804889	1					
ANR	4804925	IdentifierDeclStatement	bool found_it ;	260:1:5467:5480	4804889	6	True				
ANR	4804926	IdentifierDecl	found_it		4804889	0					
ANR	4804927	IdentifierDeclType	bool		4804889	0					
ANR	4804928	Identifier	found_it		4804889	1					
ANR	4804929	IdentifierDeclStatement	int ret_val ;	261:1:5483:5494	4804889	7	True				
ANR	4804930	IdentifierDecl	ret_val		4804889	0					
ANR	4804931	IdentifierDeclType	int		4804889	0					
ANR	4804932	Identifier	ret_val		4804889	1					
ANR	4804933	IdentifierDeclStatement	int fam_status ;	262:1:5497:5511	4804889	8	True				
ANR	4804934	IdentifierDecl	fam_status		4804889	0					
ANR	4804935	IdentifierDeclType	int		4804889	0					
ANR	4804936	Identifier	fam_status		4804889	1					
ANR	4804937	IdentifierDeclStatement	int info_status ;	263:1:5514:5529	4804889	9	True				
ANR	4804938	IdentifierDecl	info_status		4804889	0					
ANR	4804939	IdentifierDeclType	int		4804889	0					
ANR	4804940	Identifier	info_status		4804889	1					
ANR	4804941	IdentifierDeclStatement	int ignore_status ;	264:1:5532:5549	4804889	10	True				
ANR	4804942	IdentifierDecl	ignore_status		4804889	0					
ANR	4804943	IdentifierDeclType	int		4804889	0					
ANR	4804944	Identifier	ignore_status		4804889	1					
ANR	4804945	IdentifierDeclStatement	ExtArray < pid_t > pidfamily ;	266:1:5553:5578	4804889	11	True				
ANR	4804946	IdentifierDecl	pidfamily		4804889	0					
ANR	4804947	IdentifierDeclType	ExtArray < pid_t >		4804889	0					
ANR	4804948	Identifier	pidfamily		4804889	1					
ANR	4804949	Statement	new_pids	268:1:5582:5589	4804889	12	True				
ANR	4804950	Statement	=	268:10:5591:5591	4804889	13	True				
ANR	4804951	Statement	new	268:12:5593:5595	4804889	14	True				
ANR	4804952	Statement	ExtArray	268:16:5597:5604	4804889	15	True				
ANR	4804953	Statement	<	268:24:5605:5605	4804889	16	True				
ANR	4804954	Statement	a_pid	268:25:5606:5610	4804889	17	True				
ANR	4804955	Statement	>	268:30:5611:5611	4804889	18	True				
ANR	4804956	ExpressionStatement		268:31:5612:5612	4804889	19	True				
ANR	4804957	ExpressionStatement	newpidindex = 0	269:1:5615:5630	4804889	20	True				
ANR	4804958	AssignmentExpression	newpidindex = 0		4804889	0		=			
ANR	4804959	Identifier	newpidindex		4804889	0					
ANR	4804960	PrimaryExpression	0		4804889	1					
ANR	4804961	ExpressionStatement	priv = set_root_priv ( )	279:1:6213:6235	4804889	21	True				
ANR	4804962	AssignmentExpression	priv = set_root_priv ( )		4804889	0		=			
ANR	4804963	Identifier	priv		4804889	0					
ANR	4804964	CallExpression	set_root_priv ( )		4804889	1					
ANR	4804965	Callee	set_root_priv		4804889	0					
ANR	4804966	Identifier	set_root_priv		4804889	0					
ANR	4804967	ArgumentList			4804889	1					
ANR	4804968	IfStatement	if ( searchLogin )		4804889	22					
ANR	4804969	Condition	searchLogin	282:6:6291:6301	4804889	0	True				
ANR	4804970	Identifier	searchLogin		4804889	0					
ANR	4804971	CompoundStatement		30:20:978:978	4804889	1					
ANR	4804972	ExpressionStatement	"ret_val = ProcAPI :: getPidFamilyByLogin ( searchLogin , pidfamily )"	283:2:6309:6370	4804889	0	True				
ANR	4804973	AssignmentExpression	"ret_val = ProcAPI :: getPidFamilyByLogin ( searchLogin , pidfamily )"		4804889	0		=			
ANR	4804974	Identifier	ret_val		4804889	0					
ANR	4804975	CallExpression	"ProcAPI :: getPidFamilyByLogin ( searchLogin , pidfamily )"		4804889	1					
ANR	4804976	Callee	ProcAPI :: getPidFamilyByLogin		4804889	0					
ANR	4804977	Identifier	ProcAPI :: getPidFamilyByLogin		4804889	0					
ANR	4804978	ArgumentList	searchLogin		4804889	1					
ANR	4804979	Argument	searchLogin		4804889	0					
ANR	4804980	Identifier	searchLogin		4804889	0					
ANR	4804981	Argument	pidfamily		4804889	1					
ANR	4804982	Identifier	pidfamily		4804889	0					
ANR	4804983	ElseStatement	else		4804889	0					
ANR	4804984	CompoundStatement		32:8:1053:1053	4804889	0					
ANR	4804985	ExpressionStatement	"ret_val = ProcAPI :: getPidFamily ( daddy_pid , & m_penvid , pidfamily , fam_status )"	285:2:6384:6457	4804889	0	True				
ANR	4804986	AssignmentExpression	"ret_val = ProcAPI :: getPidFamily ( daddy_pid , & m_penvid , pidfamily , fam_status )"		4804889	0		=			
ANR	4804987	Identifier	ret_val		4804889	0					
ANR	4804988	CallExpression	"ProcAPI :: getPidFamily ( daddy_pid , & m_penvid , pidfamily , fam_status )"		4804889	1					
ANR	4804989	Callee	ProcAPI :: getPidFamily		4804889	0					
ANR	4804990	Identifier	ProcAPI :: getPidFamily		4804889	0					
ANR	4804991	ArgumentList	daddy_pid		4804889	1					
ANR	4804992	Argument	daddy_pid		4804889	0					
ANR	4804993	Identifier	daddy_pid		4804889	0					
ANR	4804994	Argument	& m_penvid		4804889	1					
ANR	4804995	UnaryOperationExpression	& m_penvid		4804889	0					
ANR	4804996	UnaryOperator	&		4804889	0					
ANR	4804997	Identifier	m_penvid		4804889	1					
ANR	4804998	Argument	pidfamily		4804889	2					
ANR	4804999	Identifier	pidfamily		4804889	0					
ANR	4805000	Argument	fam_status		4804889	3					
ANR	4805001	Identifier	fam_status		4804889	0					
ANR	4805002	IfStatement	if ( ret_val == PROCAPI_FAILURE )		4804889	23					
ANR	4805003	Condition	ret_val == PROCAPI_FAILURE	288:6:6469:6494	4804889	0	True				
ANR	4805004	EqualityExpression	ret_val == PROCAPI_FAILURE		4804889	0		==			
ANR	4805005	Identifier	ret_val		4804889	0					
ANR	4805006	Identifier	PROCAPI_FAILURE		4804889	1					
ANR	4805007	CompoundStatement		36:35:1171:1171	4804889	1					
ANR	4805008	Statement	dprintf	290:2:6570:6576	4804889	0	True				
ANR	4805009	Statement	(	290:9:6577:6577	4804889	1	True				
ANR	4805010	Statement	D_PROCFAMILY	290:11:6579:6590	4804889	2	True				
ANR	4805011	Statement	","	290:23:6591:6591	4804889	3	True				
ANR	4805012	Statement	"""KillFamily::takesnapshot: getPidFamily(%d) failed. """	291:5:6598:6650	4804889	4	True				
ANR	4805013	Statement	"""Could not find the pid or any family members.\\n"""	292:5:6657:6705	4804889	5	True				
ANR	4805014	Statement	","	292:54:6706:6706	4804889	6	True				
ANR	4805015	Statement	daddy_pid	293:5:6713:6721	4804889	7	True				
ANR	4805016	Statement	)	293:15:6723:6723	4804889	8	True				
ANR	4805017	ExpressionStatement		293:16:6724:6724	4804889	9	True				
ANR	4805018	ExpressionStatement	pidfamily [ 0 ] = 0	294:2:6728:6744	4804889	10	True				
ANR	4805019	AssignmentExpression	pidfamily [ 0 ] = 0		4804889	0		=			
ANR	4805020	ArrayIndexing	pidfamily [ 0 ]		4804889	0					
ANR	4805021	Identifier	pidfamily		4804889	0					
ANR	4805022	PrimaryExpression	0		4804889	1					
ANR	4805023	PrimaryExpression	0		4804889	1					
ANR	4805024	IfStatement	if ( old_pids )		4804889	24					
ANR	4805025	Condition	old_pids	303:6:7034:7041	4804889	0	True				
ANR	4805026	Identifier	old_pids		4804889	0					
ANR	4805027	CompoundStatement		51:17:1718:1718	4804889	1					
ANR	4805028	ForStatement	for ( i = 0 ; ( * old_pids ) [ i ] . pid ; i ++ )		4804889	0					
ANR	4805029	ForInit	i = 0 ;	306:7:7083:7086	4804889	0	True				
ANR	4805030	AssignmentExpression	i = 0		4804889	0		=			
ANR	4805031	Identifier	i		4804889	0					
ANR	4805032	PrimaryExpression	0		4804889	1					
ANR	4805033	Condition	( * old_pids ) [ i ] . pid	306:11:7087:7104	4804889	1	True				
ANR	4805034	MemberAccess	( * old_pids ) [ i ] . pid		4804889	0					
ANR	4805035	ArrayIndexing	( * old_pids ) [ i ]		4804889	0					
ANR	4805036	UnaryOperationExpression	* old_pids		4804889	0					
ANR	4805037	UnaryOperator	*		4804889	0					
ANR	4805038	Identifier	old_pids		4804889	1					
ANR	4805039	Identifier	i		4804889	1					
ANR	4805040	Identifier	pid		4804889	1					
ANR	4805041	PostIncDecOperationExpression	i ++	306:30:7106:7108	4804889	2	True				
ANR	4805042	Identifier	i		4804889	0					
ANR	4805043	IncDec	++		4804889	1					
ANR	4805044	CompoundStatement		54:35:1784:1784	4804889	3					
ANR	4805045	ExpressionStatement	currpid = ( * old_pids ) [ i ] . pid	308:3:7117:7145	4804889	0	True				
ANR	4805046	AssignmentExpression	currpid = ( * old_pids ) [ i ] . pid		4804889	0		=			
ANR	4805047	Identifier	currpid		4804889	0					
ANR	4805048	MemberAccess	( * old_pids ) [ i ] . pid		4804889	1					
ANR	4805049	ArrayIndexing	( * old_pids ) [ i ]		4804889	0					
ANR	4805050	UnaryOperationExpression	* old_pids		4804889	0					
ANR	4805051	UnaryOperator	*		4804889	0					
ANR	4805052	Identifier	old_pids		4804889	1					
ANR	4805053	Identifier	i		4804889	1					
ANR	4805054	Identifier	pid		4804889	1					
ANR	4805055	ExpressionStatement	currpid_exited = true	311:3:7212:7233	4804889	1	True				
ANR	4805056	AssignmentExpression	currpid_exited = true		4804889	0		=			
ANR	4805057	Identifier	currpid_exited		4804889	0					
ANR	4805058	Identifier	true		4804889	1					
ANR	4805059	ExpressionStatement	found_it = false	312:3:7238:7254	4804889	2	True				
ANR	4805060	AssignmentExpression	found_it = false		4804889	0		=			
ANR	4805061	Identifier	found_it		4804889	0					
ANR	4805062	Identifier	false		4804889	1					
ANR	4805063	ForStatement	for ( j = 0 ; ; j ++ )		4804889	3					
ANR	4805064	ForInit	j = 0 ;	315:8:7309:7313	4804889	0	True				
ANR	4805065	AssignmentExpression	j = 0		4804889	0		=			
ANR	4805066	Identifier	j		4804889	0					
ANR	4805067	PrimaryExpression	0		4804889	1					
ANR	4805068	PostIncDecOperationExpression	j ++	315:15:7316:7318	4804889	1	True				
ANR	4805069	Identifier	j		4804889	0					
ANR	4805070	IncDec	++		4804889	1					
ANR	4805071	CompoundStatement		63:21:1995:1995	4804889	2					
ANR	4805072	IfStatement	if ( pidfamily [ j ] == currpid )		4804889	0					
ANR	4805073	Condition	pidfamily [ j ] == currpid	316:8:7332:7354	4804889	0	True				
ANR	4805074	EqualityExpression	pidfamily [ j ] == currpid		4804889	0		==			
ANR	4805075	ArrayIndexing	pidfamily [ j ]		4804889	0					
ANR	4805076	Identifier	pidfamily		4804889	0					
ANR	4805077	Identifier	j		4804889	1					
ANR	4805078	Identifier	currpid		4804889	1					
ANR	4805079	CompoundStatement		64:34:2031:2031	4804889	1					
ANR	4805080	ExpressionStatement	currpid_exited = false	318:5:7413:7435	4804889	0	True				
ANR	4805081	AssignmentExpression	currpid_exited = false		4804889	0		=			
ANR	4805082	Identifier	currpid_exited		4804889	0					
ANR	4805083	Identifier	false		4804889	1					
ANR	4805084	ExpressionStatement	found_it = true	319:5:7442:7457	4804889	1	True				
ANR	4805085	AssignmentExpression	found_it = true		4804889	0		=			
ANR	4805086	Identifier	found_it		4804889	0					
ANR	4805087	Identifier	true		4804889	1					
ANR	4805088	BreakStatement	break ;	322:5:7565:7570	4804889	2	True				
ANR	4805089	IfStatement	if ( pidfamily [ j ] == 0 )		4804889	1					
ANR	4805090	Condition	pidfamily [ j ] == 0	324:8:7586:7602	4804889	0	True				
ANR	4805091	EqualityExpression	pidfamily [ j ] == 0		4804889	0		==			
ANR	4805092	ArrayIndexing	pidfamily [ j ]		4804889	0					
ANR	4805093	Identifier	pidfamily		4804889	0					
ANR	4805094	Identifier	j		4804889	1					
ANR	4805095	PrimaryExpression	0		4804889	1					
ANR	4805096	CompoundStatement		72:28:2279:2279	4804889	1					
ANR	4805097	ExpressionStatement	found_it = false	327:5:7673:7689	4804889	0	True				
ANR	4805098	AssignmentExpression	found_it = false		4804889	0		=			
ANR	4805099	Identifier	found_it		4804889	0					
ANR	4805100	Identifier	false		4804889	1					
ANR	4805101	IfStatement	"if ( ProcAPI :: getProcInfo ( currpid , pinfo , info_status ) == PROCAPI_SUCCESS )"		4804889	1					
ANR	4805102	Condition	"ProcAPI :: getProcInfo ( currpid , pinfo , info_status ) == PROCAPI_SUCCESS"	338:10:8104:8176	4804889	0	True				
ANR	4805103	EqualityExpression	"ProcAPI :: getProcInfo ( currpid , pinfo , info_status ) == PROCAPI_SUCCESS"		4804889	0		==			
ANR	4805104	CallExpression	"ProcAPI :: getProcInfo ( currpid , pinfo , info_status )"		4804889	0					
ANR	4805105	Callee	ProcAPI :: getProcInfo		4804889	0					
ANR	4805106	Identifier	ProcAPI :: getProcInfo		4804889	0					
ANR	4805107	ArgumentList	currpid		4804889	1					
ANR	4805108	Argument	currpid		4804889	0					
ANR	4805109	Identifier	currpid		4804889	0					
ANR	4805110	Argument	pinfo		4804889	1					
ANR	4805111	Identifier	pinfo		4804889	0					
ANR	4805112	Argument	info_status		4804889	2					
ANR	4805113	Identifier	info_status		4804889	0					
ANR	4805114	Identifier	PROCAPI_SUCCESS		4804889	1					
ANR	4805115	CompoundStatement		88:5:2858:2858	4804889	1					
ANR	4805116	IfStatement	if ( pinfo -> birthday == ( * old_pids ) [ i ] . birthday )		4804889	0					
ANR	4805117	Condition	pinfo -> birthday == ( * old_pids ) [ i ] . birthday	342:11:8225:8266	4804889	0	True				
ANR	4805118	EqualityExpression	pinfo -> birthday == ( * old_pids ) [ i ] . birthday		4804889	0		==			
ANR	4805119	PtrMemberAccess	pinfo -> birthday		4804889	0					
ANR	4805120	Identifier	pinfo		4804889	0					
ANR	4805121	Identifier	birthday		4804889	1					
ANR	4805122	MemberAccess	( * old_pids ) [ i ] . birthday		4804889	1					
ANR	4805123	ArrayIndexing	( * old_pids ) [ i ]		4804889	0					
ANR	4805124	UnaryOperationExpression	* old_pids		4804889	0					
ANR	4805125	UnaryOperator	*		4804889	0					
ANR	4805126	Identifier	old_pids		4804889	1					
ANR	4805127	Identifier	i		4804889	1					
ANR	4805128	Identifier	birthday		4804889	1					
ANR	4805129	CompoundStatement		90:56:2943:2943	4804889	1					
ANR	4805130	ExpressionStatement	pidfamily [ j ] = currpid	346:7:8378:8400	4804889	0	True				
ANR	4805131	AssignmentExpression	pidfamily [ j ] = currpid		4804889	0		=			
ANR	4805132	ArrayIndexing	pidfamily [ j ]		4804889	0					
ANR	4805133	Identifier	pidfamily		4804889	0					
ANR	4805134	Identifier	j		4804889	1					
ANR	4805135	Identifier	currpid		4804889	1					
ANR	4805136	ExpressionStatement	j ++	347:7:8409:8412	4804889	1	True				
ANR	4805137	PostIncDecOperationExpression	j ++		4804889	0					
ANR	4805138	Identifier	j		4804889	0					
ANR	4805139	IncDec	++		4804889	1					
ANR	4805140	IfStatement	if ( ! searchLogin )		4804889	2					
ANR	4805141	Condition	! searchLogin	351:12:8519:8530	4804889	0	True				
ANR	4805142	UnaryOperationExpression	! searchLogin		4804889	0					
ANR	4805143	UnaryOperator	!		4804889	0					
ANR	4805144	Identifier	searchLogin		4804889	1					
ANR	4805145	CompoundStatement		100:8:3217:3248	4804889	1					
ANR	4805146	IdentifierDeclStatement	ExtArray < pid_t > detached_family ;	352:8:8544:8575	4804889	0	True				
ANR	4805147	IdentifierDecl	detached_family		4804889	0					
ANR	4805148	IdentifierDeclType	ExtArray < pid_t >		4804889	0					
ANR	4805149	Identifier	detached_family		4804889	1					
ANR	4805150	ExpressionStatement	detached_family [ 0 ] = 0	353:8:8585:8607	4804889	1	True				
ANR	4805151	AssignmentExpression	detached_family [ 0 ] = 0		4804889	0		=			
ANR	4805152	ArrayIndexing	detached_family [ 0 ]		4804889	0					
ANR	4805153	Identifier	detached_family		4804889	0					
ANR	4805154	PrimaryExpression	0		4804889	1					
ANR	4805155	PrimaryExpression	0		4804889	1					
ANR	4805156	IfStatement	"if ( ProcAPI :: getPidFamily ( currpid , & m_penvid , detached_family , ignore_status ) != PROCAPI_FAILURE )"		4804889	2					
ANR	4805157	Condition	"ProcAPI :: getPidFamily ( currpid , & m_penvid , detached_family , ignore_status ) != PROCAPI_FAILURE"	354:12:8621:8709	4804889	0	True				
ANR	4805158	EqualityExpression	"ProcAPI :: getPidFamily ( currpid , & m_penvid , detached_family , ignore_status ) != PROCAPI_FAILURE"		4804889	0		!=			
ANR	4805159	CallExpression	"ProcAPI :: getPidFamily ( currpid , & m_penvid , detached_family , ignore_status )"		4804889	0					
ANR	4805160	Callee	ProcAPI :: getPidFamily		4804889	0					
ANR	4805161	Identifier	ProcAPI :: getPidFamily		4804889	0					
ANR	4805162	ArgumentList	currpid		4804889	1					
ANR	4805163	Argument	currpid		4804889	0					
ANR	4805164	Identifier	currpid		4804889	0					
ANR	4805165	Argument	& m_penvid		4804889	1					
ANR	4805166	UnaryOperationExpression	& m_penvid		4804889	0					
ANR	4805167	UnaryOperator	&		4804889	0					
ANR	4805168	Identifier	m_penvid		4804889	1					
ANR	4805169	Argument	detached_family		4804889	2					
ANR	4805170	Identifier	detached_family		4804889	0					
ANR	4805171	Argument	ignore_status		4804889	3					
ANR	4805172	Identifier	ignore_status		4804889	0					
ANR	4805173	Identifier	PROCAPI_FAILURE		4804889	1					
ANR	4805174	CompoundStatement		102:103:3385:3385	4804889	1					
ANR	4805175	ForStatement	for ( int k = 0 ; detached_family [ k ] != 0 ; k ++ )		4804889	0					
ANR	4805176	ForInit	int k = 0 ;	355:14:8728:8737	4804889	0	True				
ANR	4805177	IdentifierDeclStatement	int k = 0 ;		4804889	0					
ANR	4805178	IdentifierDecl	k = 0		4804889	0					
ANR	4805179	IdentifierDeclType	int		4804889	0					
ANR	4805180	Identifier	k		4804889	1					
ANR	4805181	AssignmentExpression	k = 0		4804889	2		=			
ANR	4805182	Identifier	k		4804889	0					
ANR	4805183	PrimaryExpression	0		4804889	1					
ANR	4805184	Condition	detached_family [ k ] != 0	355:25:8739:8761	4804889	1	True				
ANR	4805185	EqualityExpression	detached_family [ k ] != 0		4804889	0		!=			
ANR	4805186	ArrayIndexing	detached_family [ k ]		4804889	0					
ANR	4805187	Identifier	detached_family		4804889	0					
ANR	4805188	Identifier	k		4804889	1					
ANR	4805189	PrimaryExpression	0		4804889	1					
ANR	4805190	PostIncDecOperationExpression	k ++	355:50:8764:8766	4804889	2	True				
ANR	4805191	Identifier	k		4804889	0					
ANR	4805192	IncDec	++		4804889	1					
ANR	4805193	CompoundStatement		103:55:3442:3442	4804889	3					
ANR	4805194	IfStatement	if ( detached_family [ k ] != currpid )		4804889	0					
ANR	4805195	Condition	detached_family [ k ] != currpid	356:14:8785:8813	4804889	0	True				
ANR	4805196	EqualityExpression	detached_family [ k ] != currpid		4804889	0		!=			
ANR	4805197	ArrayIndexing	detached_family [ k ]		4804889	0					
ANR	4805198	Identifier	detached_family		4804889	0					
ANR	4805199	Identifier	k		4804889	1					
ANR	4805200	Identifier	currpid		4804889	1					
ANR	4805201	CompoundStatement		104:45:3489:3489	4804889	1					
ANR	4805202	ExpressionStatement	pidfamily [ j ] = detached_family [ k ]	357:11:8829:8862	4804889	0	True				
ANR	4805203	AssignmentExpression	pidfamily [ j ] = detached_family [ k ]		4804889	0		=			
ANR	4805204	ArrayIndexing	pidfamily [ j ]		4804889	0					
ANR	4805205	Identifier	pidfamily		4804889	0					
ANR	4805206	Identifier	j		4804889	1					
ANR	4805207	ArrayIndexing	detached_family [ k ]		4804889	1					
ANR	4805208	Identifier	detached_family		4804889	0					
ANR	4805209	Identifier	k		4804889	1					
ANR	4805210	ExpressionStatement	j ++	358:11:8875:8878	4804889	1	True				
ANR	4805211	PostIncDecOperationExpression	j ++		4804889	0					
ANR	4805212	Identifier	j		4804889	0					
ANR	4805213	IncDec	++		4804889	1					
ANR	4805214	ExpressionStatement	currpid_exited = false	363:9:8986:9008	4804889	1	True				
ANR	4805215	AssignmentExpression	currpid_exited = false		4804889	0		=			
ANR	4805216	Identifier	currpid_exited		4804889	0					
ANR	4805217	Identifier	false		4804889	1					
ANR	4805218	ElseStatement	else		4804889	0					
ANR	4805219	CompoundStatement		112:15:3698:3698	4804889	0					
ANR	4805220	ExpressionStatement	currpid_exited = true	367:9:9127:9148	4804889	0	True				
ANR	4805221	AssignmentExpression	currpid_exited = true		4804889	0		=			
ANR	4805222	Identifier	currpid_exited		4804889	0					
ANR	4805223	Identifier	true		4804889	1					
ANR	4805224	ElseStatement	else		4804889	0					
ANR	4805225	CompoundStatement		117:14:3847:3847	4804889	0					
ANR	4805226	ExpressionStatement	currpid_exited = false	372:8:9280:9302	4804889	0	True				
ANR	4805227	AssignmentExpression	currpid_exited = false		4804889	0		=			
ANR	4805228	Identifier	currpid_exited		4804889	0					
ANR	4805229	Identifier	false		4804889	1					
ANR	4805230	ExpressionStatement	pidfamily [ j ] = 0	374:7:9320:9336	4804889	3	True				
ANR	4805231	AssignmentExpression	pidfamily [ j ] = 0		4804889	0		=			
ANR	4805232	ArrayIndexing	pidfamily [ j ]		4804889	0					
ANR	4805233	Identifier	pidfamily		4804889	0					
ANR	4805234	Identifier	j		4804889	1					
ANR	4805235	PrimaryExpression	0		4804889	1					
ANR	4805236	BreakStatement	break ;	379:5:9420:9425	4804889	2	True				
ANR	4805237	IfStatement	if ( found_it )		4804889	4					
ANR	4805238	Condition	found_it	396:8:10257:10264	4804889	0	True				
ANR	4805239	Identifier	found_it		4804889	0					
ANR	4805240	CompoundStatement		144:19:4941:4941	4804889	1					
ANR	4805241	IfStatement	"if ( ProcAPI :: getProcInfo ( currpid , pinfo , ignore_status ) == PROCAPI_SUCCESS )"		4804889	0					
ANR	4805242	Condition	"ProcAPI :: getProcInfo ( currpid , pinfo , ignore_status ) == PROCAPI_SUCCESS"	397:9:10279:10352	4804889	0	True				
ANR	4805243	EqualityExpression	"ProcAPI :: getProcInfo ( currpid , pinfo , ignore_status ) == PROCAPI_SUCCESS"		4804889	0		==			
ANR	4805244	CallExpression	"ProcAPI :: getProcInfo ( currpid , pinfo , ignore_status )"		4804889	0					
ANR	4805245	Callee	ProcAPI :: getProcInfo		4804889	0					
ANR	4805246	Identifier	ProcAPI :: getProcInfo		4804889	0					
ANR	4805247	ArgumentList	currpid		4804889	1					
ANR	4805248	Argument	currpid		4804889	0					
ANR	4805249	Identifier	currpid		4804889	0					
ANR	4805250	Argument	pinfo		4804889	1					
ANR	4805251	Identifier	pinfo		4804889	0					
ANR	4805252	Argument	ignore_status		4804889	2					
ANR	4805253	Identifier	ignore_status		4804889	0					
ANR	4805254	Identifier	PROCAPI_SUCCESS		4804889	1					
ANR	4805255	CompoundStatement		147:3:5032:5032	4804889	1					
ANR	4805256	IfStatement	if ( pinfo -> birthday != ( * old_pids ) [ i ] . birthday )		4804889	0					
ANR	4805257	Condition	pinfo -> birthday != ( * old_pids ) [ i ] . birthday	400:10:10371:10412	4804889	0	True				
ANR	4805258	EqualityExpression	pinfo -> birthday != ( * old_pids ) [ i ] . birthday		4804889	0		!=			
ANR	4805259	PtrMemberAccess	pinfo -> birthday		4804889	0					
ANR	4805260	Identifier	pinfo		4804889	0					
ANR	4805261	Identifier	birthday		4804889	1					
ANR	4805262	MemberAccess	( * old_pids ) [ i ] . birthday		4804889	1					
ANR	4805263	ArrayIndexing	( * old_pids ) [ i ]		4804889	0					
ANR	4805264	UnaryOperationExpression	* old_pids		4804889	0					
ANR	4805265	UnaryOperator	*		4804889	0					
ANR	4805266	Identifier	old_pids		4804889	1					
ANR	4805267	Identifier	i		4804889	1					
ANR	4805268	Identifier	birthday		4804889	1					
ANR	4805269	CompoundStatement		148:55:5089:5089	4804889	1					
ANR	4805270	ExpressionStatement	currpid_exited = true	404:6:10563:10584	4804889	0	True				
ANR	4805271	AssignmentExpression	currpid_exited = true		4804889	0		=			
ANR	4805272	Identifier	currpid_exited		4804889	0					
ANR	4805273	Identifier	true		4804889	1					
ANR	4805274	IfStatement	if ( currpid_exited )		4804889	5					
ANR	4805275	Condition	currpid_exited	416:8:10930:10943	4804889	0	True				
ANR	4805276	Identifier	currpid_exited		4804889	0					
ANR	4805277	CompoundStatement		164:24:5619:5619	4804889	1					
ANR	4805278	ExpressionStatement	exited_cpu_sys_time += ( * old_pids ) [ i ] . cpu_sys_time	418:4:11013:11063	4804889	0	True				
ANR	4805279	AssignmentExpression	exited_cpu_sys_time += ( * old_pids ) [ i ] . cpu_sys_time		4804889	0		+=			
ANR	4805280	Identifier	exited_cpu_sys_time		4804889	0					
ANR	4805281	MemberAccess	( * old_pids ) [ i ] . cpu_sys_time		4804889	1					
ANR	4805282	ArrayIndexing	( * old_pids ) [ i ]		4804889	0					
ANR	4805283	UnaryOperationExpression	* old_pids		4804889	0					
ANR	4805284	UnaryOperator	*		4804889	0					
ANR	4805285	Identifier	old_pids		4804889	1					
ANR	4805286	Identifier	i		4804889	1					
ANR	4805287	Identifier	cpu_sys_time		4804889	1					
ANR	4805288	ExpressionStatement	exited_cpu_user_time += ( * old_pids ) [ i ] . cpu_user_time	419:4:11069:11121	4804889	1	True				
ANR	4805289	AssignmentExpression	exited_cpu_user_time += ( * old_pids ) [ i ] . cpu_user_time		4804889	0		+=			
ANR	4805290	Identifier	exited_cpu_user_time		4804889	0					
ANR	4805291	MemberAccess	( * old_pids ) [ i ] . cpu_user_time		4804889	1					
ANR	4805292	ArrayIndexing	( * old_pids ) [ i ]		4804889	0					
ANR	4805293	UnaryOperationExpression	* old_pids		4804889	0					
ANR	4805294	UnaryOperator	*		4804889	0					
ANR	4805295	Identifier	old_pids		4804889	1					
ANR	4805296	Identifier	i		4804889	1					
ANR	4805297	Identifier	cpu_user_time		4804889	1					
ANR	4805298	ExpressionStatement	alive_cpu_sys_time = 0	429:1:11348:11370	4804889	25	True				
ANR	4805299	AssignmentExpression	alive_cpu_sys_time = 0		4804889	0		=			
ANR	4805300	Identifier	alive_cpu_sys_time		4804889	0					
ANR	4805301	PrimaryExpression	0		4804889	1					
ANR	4805302	ExpressionStatement	alive_cpu_user_time = 0	430:1:11373:11396	4804889	26	True				
ANR	4805303	AssignmentExpression	alive_cpu_user_time = 0		4804889	0		=			
ANR	4805304	Identifier	alive_cpu_user_time		4804889	0					
ANR	4805305	PrimaryExpression	0		4804889	1					
ANR	4805306	IdentifierDeclStatement	unsigned long curr_image_size = 0 ;	431:1:11399:11432	4804889	27	True				
ANR	4805307	IdentifierDecl	curr_image_size = 0		4804889	0					
ANR	4805308	IdentifierDeclType	unsigned long		4804889	0					
ANR	4805309	Identifier	curr_image_size		4804889	1					
ANR	4805310	AssignmentExpression	curr_image_size = 0		4804889	2		=			
ANR	4805311	Identifier	curr_image_size		4804889	0					
ANR	4805312	PrimaryExpression	0		4804889	1					
ANR	4805313	ForStatement	for ( j = 0 ; pidfamily [ j ] ; j ++ )		4804889	28					
ANR	4805314	ForInit	j = 0 ;	432:7:11441:11444	4804889	0	True				
ANR	4805315	AssignmentExpression	j = 0		4804889	0		=			
ANR	4805316	Identifier	j		4804889	0					
ANR	4805317	PrimaryExpression	0		4804889	1					
ANR	4805318	Condition	pidfamily [ j ]	432:12:11446:11457	4804889	1	True				
ANR	4805319	ArrayIndexing	pidfamily [ j ]		4804889	0					
ANR	4805320	Identifier	pidfamily		4804889	0					
ANR	4805321	Identifier	j		4804889	1					
ANR	4805322	PostIncDecOperationExpression	j ++	432:26:11460:11462	4804889	2	True				
ANR	4805323	Identifier	j		4804889	0					
ANR	4805324	IncDec	++		4804889	1					
ANR	4805325	CompoundStatement		180:32:6139:6139	4804889	3					
ANR	4805326	IfStatement	"if ( ProcAPI :: getProcInfo ( pidfamily [ j ] , pinfo , ignore_status ) == PROCAPI_SUCCESS )"		4804889	0					
ANR	4805327	Condition	"ProcAPI :: getProcInfo ( pidfamily [ j ] , pinfo , ignore_status ) == PROCAPI_SUCCESS"	433:7:11475:11551	4804889	0	True				
ANR	4805328	EqualityExpression	"ProcAPI :: getProcInfo ( pidfamily [ j ] , pinfo , ignore_status ) == PROCAPI_SUCCESS"		4804889	0		==			
ANR	4805329	CallExpression	"ProcAPI :: getProcInfo ( pidfamily [ j ] , pinfo , ignore_status )"		4804889	0					
ANR	4805330	Callee	ProcAPI :: getProcInfo		4804889	0					
ANR	4805331	Identifier	ProcAPI :: getProcInfo		4804889	0					
ANR	4805332	ArgumentList	pidfamily [ j ]		4804889	1					
ANR	4805333	Argument	pidfamily [ j ]		4804889	0					
ANR	4805334	ArrayIndexing	pidfamily [ j ]		4804889	0					
ANR	4805335	Identifier	pidfamily		4804889	0					
ANR	4805336	Identifier	j		4804889	1					
ANR	4805337	Argument	pinfo		4804889	1					
ANR	4805338	Identifier	pinfo		4804889	0					
ANR	4805339	Argument	ignore_status		4804889	2					
ANR	4805340	Identifier	ignore_status		4804889	0					
ANR	4805341	Identifier	PROCAPI_SUCCESS		4804889	1					
ANR	4805342	CompoundStatement		183:2:6230:6230	4804889	1					
ANR	4805343	ExpressionStatement	( * new_pids ) [ newpidindex ] . pid = pinfo -> pid	436:3:11562:11603	4804889	0	True				
ANR	4805344	AssignmentExpression	( * new_pids ) [ newpidindex ] . pid = pinfo -> pid		4804889	0		=			
ANR	4805345	MemberAccess	( * new_pids ) [ newpidindex ] . pid		4804889	0					
ANR	4805346	ArrayIndexing	( * new_pids ) [ newpidindex ]		4804889	0					
ANR	4805347	UnaryOperationExpression	* new_pids		4804889	0					
ANR	4805348	UnaryOperator	*		4804889	0					
ANR	4805349	Identifier	new_pids		4804889	1					
ANR	4805350	Identifier	newpidindex		4804889	1					
ANR	4805351	Identifier	pid		4804889	1					
ANR	4805352	PtrMemberAccess	pinfo -> pid		4804889	1					
ANR	4805353	Identifier	pinfo		4804889	0					
ANR	4805354	Identifier	pid		4804889	1					
ANR	4805355	ExpressionStatement	( * new_pids ) [ newpidindex ] . ppid = pinfo -> ppid	437:3:11608:11651	4804889	1	True				
ANR	4805356	AssignmentExpression	( * new_pids ) [ newpidindex ] . ppid = pinfo -> ppid		4804889	0		=			
ANR	4805357	MemberAccess	( * new_pids ) [ newpidindex ] . ppid		4804889	0					
ANR	4805358	ArrayIndexing	( * new_pids ) [ newpidindex ]		4804889	0					
ANR	4805359	UnaryOperationExpression	* new_pids		4804889	0					
ANR	4805360	UnaryOperator	*		4804889	0					
ANR	4805361	Identifier	new_pids		4804889	1					
ANR	4805362	Identifier	newpidindex		4804889	1					
ANR	4805363	Identifier	ppid		4804889	1					
ANR	4805364	PtrMemberAccess	pinfo -> ppid		4804889	1					
ANR	4805365	Identifier	pinfo		4804889	0					
ANR	4805366	Identifier	ppid		4804889	1					
ANR	4805367	ExpressionStatement	( * new_pids ) [ newpidindex ] . birthday = pinfo -> birthday	438:3:11656:11707	4804889	2	True				
ANR	4805368	AssignmentExpression	( * new_pids ) [ newpidindex ] . birthday = pinfo -> birthday		4804889	0		=			
ANR	4805369	MemberAccess	( * new_pids ) [ newpidindex ] . birthday		4804889	0					
ANR	4805370	ArrayIndexing	( * new_pids ) [ newpidindex ]		4804889	0					
ANR	4805371	UnaryOperationExpression	* new_pids		4804889	0					
ANR	4805372	UnaryOperator	*		4804889	0					
ANR	4805373	Identifier	new_pids		4804889	1					
ANR	4805374	Identifier	newpidindex		4804889	1					
ANR	4805375	Identifier	birthday		4804889	1					
ANR	4805376	PtrMemberAccess	pinfo -> birthday		4804889	1					
ANR	4805377	Identifier	pinfo		4804889	0					
ANR	4805378	Identifier	birthday		4804889	1					
ANR	4805379	ExpressionStatement	( * new_pids ) [ newpidindex ] . cpu_sys_time = pinfo -> sys_time	439:3:11712:11767	4804889	3	True				
ANR	4805380	AssignmentExpression	( * new_pids ) [ newpidindex ] . cpu_sys_time = pinfo -> sys_time		4804889	0		=			
ANR	4805381	MemberAccess	( * new_pids ) [ newpidindex ] . cpu_sys_time		4804889	0					
ANR	4805382	ArrayIndexing	( * new_pids ) [ newpidindex ]		4804889	0					
ANR	4805383	UnaryOperationExpression	* new_pids		4804889	0					
ANR	4805384	UnaryOperator	*		4804889	0					
ANR	4805385	Identifier	new_pids		4804889	1					
ANR	4805386	Identifier	newpidindex		4804889	1					
ANR	4805387	Identifier	cpu_sys_time		4804889	1					
ANR	4805388	PtrMemberAccess	pinfo -> sys_time		4804889	1					
ANR	4805389	Identifier	pinfo		4804889	0					
ANR	4805390	Identifier	sys_time		4804889	1					
ANR	4805391	ExpressionStatement	( * new_pids ) [ newpidindex ] . cpu_user_time = pinfo -> user_time	440:3:11772:11829	4804889	4	True				
ANR	4805392	AssignmentExpression	( * new_pids ) [ newpidindex ] . cpu_user_time = pinfo -> user_time		4804889	0		=			
ANR	4805393	MemberAccess	( * new_pids ) [ newpidindex ] . cpu_user_time		4804889	0					
ANR	4805394	ArrayIndexing	( * new_pids ) [ newpidindex ]		4804889	0					
ANR	4805395	UnaryOperationExpression	* new_pids		4804889	0					
ANR	4805396	UnaryOperator	*		4804889	0					
ANR	4805397	Identifier	new_pids		4804889	1					
ANR	4805398	Identifier	newpidindex		4804889	1					
ANR	4805399	Identifier	cpu_user_time		4804889	1					
ANR	4805400	PtrMemberAccess	pinfo -> user_time		4804889	1					
ANR	4805401	Identifier	pinfo		4804889	0					
ANR	4805402	Identifier	user_time		4804889	1					
ANR	4805403	ExpressionStatement	alive_cpu_sys_time += pinfo -> sys_time	441:3:11834:11871	4804889	5	True				
ANR	4805404	AssignmentExpression	alive_cpu_sys_time += pinfo -> sys_time		4804889	0		+=			
ANR	4805405	Identifier	alive_cpu_sys_time		4804889	0					
ANR	4805406	PtrMemberAccess	pinfo -> sys_time		4804889	1					
ANR	4805407	Identifier	pinfo		4804889	0					
ANR	4805408	Identifier	sys_time		4804889	1					
ANR	4805409	ExpressionStatement	alive_cpu_user_time += pinfo -> user_time	442:3:11876:11915	4804889	6	True				
ANR	4805410	AssignmentExpression	alive_cpu_user_time += pinfo -> user_time		4804889	0		+=			
ANR	4805411	Identifier	alive_cpu_user_time		4804889	0					
ANR	4805412	PtrMemberAccess	pinfo -> user_time		4804889	1					
ANR	4805413	Identifier	pinfo		4804889	0					
ANR	4805414	Identifier	user_time		4804889	1					
ANR	4805415	ExpressionStatement	curr_image_size += pinfo -> rssize	450:3:12277:12309	4804889	7	True				
ANR	4805416	AssignmentExpression	curr_image_size += pinfo -> rssize		4804889	0		+=			
ANR	4805417	Identifier	curr_image_size		4804889	0					
ANR	4805418	PtrMemberAccess	pinfo -> rssize		4804889	1					
ANR	4805419	Identifier	pinfo		4804889	0					
ANR	4805420	Identifier	rssize		4804889	1					
ANR	4805421	ExpressionStatement	newpidindex ++	454:3:12365:12378	4804889	8	True				
ANR	4805422	PostIncDecOperationExpression	newpidindex ++		4804889	0					
ANR	4805423	Identifier	newpidindex		4804889	0					
ANR	4805424	IncDec	++		4804889	1					
ANR	4805425	IfStatement	if ( curr_image_size > max_image_size )		4804889	29					
ANR	4805426	Condition	curr_image_size > max_image_size	457:6:12393:12424	4804889	0	True				
ANR	4805427	RelationalExpression	curr_image_size > max_image_size		4804889	0		>			
ANR	4805428	Identifier	curr_image_size		4804889	0					
ANR	4805429	Identifier	max_image_size		4804889	1					
ANR	4805430	CompoundStatement		205:41:7101:7101	4804889	1					
ANR	4805431	ExpressionStatement	max_image_size = curr_image_size	458:2:12432:12464	4804889	0	True				
ANR	4805432	AssignmentExpression	max_image_size = curr_image_size		4804889	0		=			
ANR	4805433	Identifier	max_image_size		4804889	0					
ANR	4805434	Identifier	curr_image_size		4804889	1					
ANR	4805435	IfStatement	if ( old_pids )		4804889	30					
ANR	4805436	Condition	old_pids	463:6:12599:12606	4804889	0	True				
ANR	4805437	Identifier	old_pids		4804889	0					
ANR	4805438	CompoundStatement		211:17:7283:7283	4804889	1					
ANR	4805439	Statement	delete	464:2:12614:12619	4804889	0	True				
ANR	4805440	ExpressionStatement	old_pids	464:9:12621:12629	4804889	1	True				
ANR	4805441	Identifier	old_pids		4804889	0					
ANR	4805442	ExpressionStatement	old_pids = new_pids	466:1:12635:12654	4804889	31	True				
ANR	4805443	AssignmentExpression	old_pids = new_pids		4804889	0		=			
ANR	4805444	Identifier	old_pids		4804889	0					
ANR	4805445	Identifier	new_pids		4804889	1					
ANR	4805446	ExpressionStatement	family_size = newpidindex	470:1:12762:12787	4804889	32	True				
ANR	4805447	AssignmentExpression	family_size = newpidindex		4804889	0		=			
ANR	4805448	Identifier	family_size		4804889	0					
ANR	4805449	Identifier	newpidindex		4804889	1					
ANR	4805450	IfStatement	if ( pinfo )		4804889	33					
ANR	4805451	Condition	pinfo	473:6:12840:12844	4804889	0	True				
ANR	4805452	Identifier	pinfo		4804889	0					
ANR	4805453	CompoundStatement		221:14:7521:7521	4804889	1					
ANR	4805454	Statement	delete	474:2:12852:12857	4804889	0	True				
ANR	4805455	ExpressionStatement	pinfo	474:9:12859:12864	4804889	1	True				
ANR	4805456	Identifier	pinfo		4804889	0					
ANR	4805457	IfStatement	if ( ( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG ) )		4804889	34					
ANR	4805458	Condition	( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG )	477:5:12875:12931	4804889	0	True				
ANR	4805459	AndExpression	( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG )		4804889	0		&&			
ANR	4805460	BitAndExpression	DebugFlags & D_PROCFAMILY		4804889	0		&			
ANR	4805461	Identifier	DebugFlags		4804889	0					
ANR	4805462	Identifier	D_PROCFAMILY		4804889	1					
ANR	4805463	BitAndExpression	DebugFlags & D_FULLDEBUG		4804889	1		&			
ANR	4805464	Identifier	DebugFlags		4804889	0					
ANR	4805465	Identifier	D_FULLDEBUG		4804889	1					
ANR	4805466	CompoundStatement		225:65:7608:7608	4804889	1					
ANR	4805467	ExpressionStatement	display ( )	478:2:12939:12948	4804889	0	True				
ANR	4805468	CallExpression	display ( )		4804889	0					
ANR	4805469	Callee	display		4804889	0					
ANR	4805470	Identifier	display		4804889	0					
ANR	4805471	ArgumentList			4804889	1					
ANR	4805472	ExpressionStatement	set_priv ( priv )	482:1:13009:13023	4804889	35	True				
ANR	4805473	CallExpression	set_priv ( priv )		4804889	0					
ANR	4805474	Callee	set_priv		4804889	0					
ANR	4805475	Identifier	set_priv		4804889	0					
ANR	4805476	ArgumentList	priv		4804889	1					
ANR	4805477	Argument	priv		4804889	0					
ANR	4805478	Identifier	priv		4804889	0					
ANR	4805479	ReturnType	void		4804889	1					
ANR	4805480	Identifier	KillFamily :: takesnapshot		4804889	2					
ANR	4805481	ParameterList			4804889	3					
ANR	4805482	CFGEntryNode	ENTRY		4804889		True				
ANR	4805483	CFGExitNode	EXIT		4804889		True				
ANR	4805484	InfiniteForNode	true		4804889		True				
ANR	4805485	Symbol	family_size		4804889						
ANR	4805486	Symbol	& m_penvid		4804889						
ANR	4805487	Symbol	* newpidindex		4804889						
ANR	4805488	Symbol	( * old_pids ) [ i ] . cpu_user_time		4804889						
ANR	4805489	Symbol	* new_pids		4804889						
ANR	4805490	Symbol	alive_cpu_sys_time		4804889						
ANR	4805491	Symbol	pinfo -> sys_time		4804889						
ANR	4805492	Symbol	new_pids		4804889						
ANR	4805493	Symbol	( * old_pids ) [ i ] . cpu_sys_time		4804889						
ANR	4805494	Symbol	( * new_pids ) [ newpidindex ] . ppid		4804889						
ANR	4805495	Symbol	* pinfo		4804889						
ANR	4805496	Symbol	exited_cpu_user_time		4804889						
ANR	4805497	Symbol	( * new_pids ) [ newpidindex ] . cpu_sys_time		4804889						
ANR	4805498	Symbol	* detached_family		4804889						
ANR	4805499	Symbol	curr_image_size		4804889						
ANR	4805500	Symbol	max_image_size		4804889						
ANR	4805501	Symbol	priv		4804889						
ANR	4805502	Symbol	pinfo -> birthday		4804889						
ANR	4805503	Symbol	ignore_status		4804889						
ANR	4805504	Symbol	* * new_pids		4804889						
ANR	4805505	Symbol	NULL		4804889						
ANR	4805506	Symbol	info_status		4804889						
ANR	4805507	Symbol	PROCAPI_FAILURE		4804889						
ANR	4805508	Symbol	PROCAPI_SUCCESS		4804889						
ANR	4805509	Symbol	D_FULLDEBUG		4804889						
ANR	4805510	Symbol	DebugFlags		4804889						
ANR	4805511	Symbol	alive_cpu_user_time		4804889						
ANR	4805512	Symbol	currpid		4804889						
ANR	4805513	Symbol	ProcAPI :: getProcInfo		4804889						
ANR	4805514	Symbol	( * old_pids ) [ i ] . pid		4804889						
ANR	4805515	Symbol	old_pids		4804889						
ANR	4805516	Symbol	true		4804889						
ANR	4805517	Symbol	* pidfamily		4804889						
ANR	4805518	Symbol	pinfo -> rssize		4804889						
ANR	4805519	Symbol	D_PROCFAMILY		4804889						
ANR	4805520	Symbol	pinfo		4804889						
ANR	4805521	Symbol	( * new_pids ) [ newpidindex ] . pid		4804889						
ANR	4805522	Symbol	newpidindex		4804889						
ANR	4805523	Symbol	pinfo -> pid		4804889						
ANR	4805524	Symbol	daddy_pid		4804889						
ANR	4805525	Symbol	* * old_pids		4804889						
ANR	4805526	Symbol	found_it		4804889						
ANR	4805527	Symbol	ProcAPI :: getPidFamilyByLogin		4804889						
ANR	4805528	Symbol	* old_pids		4804889						
ANR	4805529	Symbol	false		4804889						
ANR	4805530	Symbol	exited_cpu_sys_time		4804889						
ANR	4805531	Symbol	i		4804889						
ANR	4805532	Symbol	j		4804889						
ANR	4805533	Symbol	set_root_priv		4804889						
ANR	4805534	Symbol	ProcAPI :: getPidFamily		4804889						
ANR	4805535	Symbol	k		4804889						
ANR	4805536	Symbol	ret_val		4804889						
ANR	4805537	Symbol	searchLogin		4804889						
ANR	4805538	Symbol	( * old_pids ) [ i ] . birthday		4804889						
ANR	4805539	Symbol	pinfo -> ppid		4804889						
ANR	4805540	Symbol	( * new_pids ) [ newpidindex ] . birthday		4804889						
ANR	4805541	Symbol	( * new_pids ) [ newpidindex ] . cpu_user_time		4804889						
ANR	4805542	Symbol	fam_status		4804889						
ANR	4805543	Symbol	* i		4804889						
ANR	4805544	Symbol	* j		4804889						
ANR	4805545	Symbol	* k		4804889						
ANR	4805546	Symbol	detached_family		4804889						
ANR	4805547	Symbol	pinfo -> user_time		4804889						
ANR	4805548	Symbol	currpid_exited		4804889						
ANR	4805549	Symbol	pidfamily		4804889						
ANR	4805550	Function	KillFamily :: currentfamily	486:0:13029:13829							
ANR	4805551	FunctionDef	KillFamily :: currentfamily (pid_t * & ptr)		4805550	0					
ANR	4805552	CompoundStatement		488:0:13076:13829	4805550	0					
ANR	4805553	IdentifierDeclStatement	pid_t * tmp ;	489:1:13079:13089	4805550	0	True				
ANR	4805554	IdentifierDecl	* tmp		4805550	0					
ANR	4805555	IdentifierDeclType	pid_t *		4805550	0					
ANR	4805556	Identifier	tmp		4805550	1					
ANR	4805557	IdentifierDeclStatement	int i ;	490:1:13092:13097	4805550	1	True				
ANR	4805558	IdentifierDecl	i		4805550	0					
ANR	4805559	IdentifierDeclType	int		4805550	0					
ANR	4805560	Identifier	i		4805550	1					
ANR	4805561	IfStatement	if ( family_size <= 0 )		4805550	2					
ANR	4805562	Condition	family_size <= 0	492:5:13105:13120	4805550	0	True				
ANR	4805563	RelationalExpression	family_size <= 0		4805550	0		<=			
ANR	4805564	Identifier	family_size		4805550	0					
ANR	4805565	PrimaryExpression	0		4805550	1					
ANR	4805566	CompoundStatement		5:24:47:47	4805550	1					
ANR	4805567	ExpressionStatement	"dprintf ( D_ALWAYS , ""KillFamily::currentfamily: WARNING: family_size is non-positive (%d)\\n"" , family_size )"	500:2:13507:13617	4805550	0	True				
ANR	4805568	CallExpression	"dprintf ( D_ALWAYS , ""KillFamily::currentfamily: WARNING: family_size is non-positive (%d)\\n"" , family_size )"		4805550	0					
ANR	4805569	Callee	dprintf		4805550	0					
ANR	4805570	Identifier	dprintf		4805550	0					
ANR	4805571	ArgumentList	D_ALWAYS		4805550	1					
ANR	4805572	Argument	D_ALWAYS		4805550	0					
ANR	4805573	Identifier	D_ALWAYS		4805550	0					
ANR	4805574	Argument	"""KillFamily::currentfamily: WARNING: family_size is non-positive (%d)\\n"""		4805550	1					
ANR	4805575	PrimaryExpression	"""KillFamily::currentfamily: WARNING: family_size is non-positive (%d)\\n"""		4805550	0					
ANR	4805576	Argument	family_size		4805550	2					
ANR	4805577	Identifier	family_size		4805550	0					
ANR	4805578	ExpressionStatement	ptr = NULL	502:2:13621:13631	4805550	1	True				
ANR	4805579	AssignmentExpression	ptr = NULL		4805550	0		=			
ANR	4805580	Identifier	ptr		4805550	0					
ANR	4805581	Identifier	NULL		4805550	1					
ANR	4805582	ReturnStatement	return 0 ;	503:2:13635:13643	4805550	2	True				
ANR	4805583	PrimaryExpression	0		4805550	0					
ANR	4805584	ExpressionStatement	tmp = new pid_t [ family_size ]	505:1:13649:13679	4805550	3	True				
ANR	4805585	AssignmentExpression	tmp = new pid_t [ family_size ]		4805550	0		=			
ANR	4805586	Identifier	tmp		4805550	0					
ANR	4805587	Identifier	family_size		4805550	1					
ANR	4805588	IfStatement	if ( ! tmp )		4805550	4					
ANR	4805589	Condition	! tmp	506:5:13686:13689	4805550	0	True				
ANR	4805590	UnaryOperationExpression	! tmp		4805550	0					
ANR	4805591	UnaryOperator	!		4805550	0					
ANR	4805592	Identifier	tmp		4805550	1					
ANR	4805593	CompoundStatement		19:12:616:616	4805550	1					
ANR	4805594	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	507:2:13697:13723	4805550	0	True				
ANR	4805595	CallExpression	"EXCEPT ( ""Out of memory!"" )"		4805550	0					
ANR	4805596	Callee	EXCEPT		4805550	0					
ANR	4805597	Identifier	EXCEPT		4805550	0					
ANR	4805598	ArgumentList	"""Out of memory!"""		4805550	1					
ANR	4805599	Argument	"""Out of memory!"""		4805550	0					
ANR	4805600	PrimaryExpression	"""Out of memory!"""		4805550	0					
ANR	4805601	ForStatement	for ( i = 0 ; i < family_size ; i ++ )		4805550	5					
ANR	4805602	ForInit	i = 0 ;	509:6:13734:13737	4805550	0	True				
ANR	4805603	AssignmentExpression	i = 0		4805550	0		=			
ANR	4805604	Identifier	i		4805550	0					
ANR	4805605	PrimaryExpression	0		4805550	1					
ANR	4805606	Condition	i < family_size	509:11:13739:13751	4805550	1	True				
ANR	4805607	RelationalExpression	i < family_size		4805550	0		<			
ANR	4805608	Identifier	i		4805550	0					
ANR	4805609	Identifier	family_size		4805550	1					
ANR	4805610	PostIncDecOperationExpression	i ++	509:26:13754:13756	4805550	2	True				
ANR	4805611	Identifier	i		4805550	0					
ANR	4805612	IncDec	++		4805550	1					
ANR	4805613	CompoundStatement		22:32:683:683	4805550	3					
ANR	4805614	ExpressionStatement	tmp [ i ] = ( * old_pids ) [ i ] . pid	510:2:13764:13791	4805550	0	True				
ANR	4805615	AssignmentExpression	tmp [ i ] = ( * old_pids ) [ i ] . pid		4805550	0		=			
ANR	4805616	ArrayIndexing	tmp [ i ]		4805550	0					
ANR	4805617	Identifier	tmp		4805550	0					
ANR	4805618	Identifier	i		4805550	1					
ANR	4805619	MemberAccess	( * old_pids ) [ i ] . pid		4805550	1					
ANR	4805620	ArrayIndexing	( * old_pids ) [ i ]		4805550	0					
ANR	4805621	UnaryOperationExpression	* old_pids		4805550	0					
ANR	4805622	UnaryOperator	*		4805550	0					
ANR	4805623	Identifier	old_pids		4805550	1					
ANR	4805624	Identifier	i		4805550	1					
ANR	4805625	Identifier	pid		4805550	1					
ANR	4805626	ExpressionStatement	ptr = tmp	512:1:13797:13806	4805550	6	True				
ANR	4805627	AssignmentExpression	ptr = tmp		4805550	0		=			
ANR	4805628	Identifier	ptr		4805550	0					
ANR	4805629	Identifier	tmp		4805550	1					
ANR	4805630	ReturnStatement	return family_size ;	513:1:13809:13827	4805550	7	True				
ANR	4805631	Identifier	family_size		4805550	0					
ANR	4805632	ReturnType	int		4805550	1					
ANR	4805633	Identifier	KillFamily :: currentfamily		4805550	2					
ANR	4805634	ParameterList	pid_t * & ptr		4805550	3					
ANR	4805635	Parameter	pid_t * & ptr	487:27:13060:13071	4805550	0	True				
ANR	4805636	ParameterType	pid_t * &		4805550	0					
ANR	4805637	Identifier	ptr		4805550	1					
ANR	4805638	CFGEntryNode	ENTRY		4805550		True				
ANR	4805639	CFGExitNode	EXIT		4805550		True				
ANR	4805640	Symbol	family_size		4805550						
ANR	4805641	Symbol	* tmp		4805550						
ANR	4805642	Symbol	* * old_pids		4805550						
ANR	4805643	Symbol	NULL		4805550						
ANR	4805644	Symbol	* i		4805550						
ANR	4805645	Symbol	( * old_pids ) [ i ] . pid		4805550						
ANR	4805646	Symbol	tmp		4805550						
ANR	4805647	Symbol	old_pids		4805550						
ANR	4805648	Symbol	* old_pids		4805550						
ANR	4805649	Symbol	D_ALWAYS		4805550						
ANR	4805650	Symbol	i		4805550						
ANR	4805651	Symbol	ptr		4805550						
ANR	4805652	Function	KillFamily :: display	517:0:13833:14253							
ANR	4805653	FunctionDef	KillFamily :: display ()		4805652	0					
ANR	4805654	CompoundStatement		519:0:13860:14253	4805652	0					
ANR	4805655	IdentifierDeclStatement	int i ;	520:1:13863:13868	4805652	0	True				
ANR	4805656	IdentifierDecl	i		4805652	0					
ANR	4805657	IdentifierDeclType	int		4805652	0					
ANR	4805658	Identifier	i		4805652	1					
ANR	4805659	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily: parent: %d family:"" , daddy_pid )"	521:1:13871:13939	4805652	1	True				
ANR	4805660	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily: parent: %d family:"" , daddy_pid )"		4805652	0					
ANR	4805661	Callee	dprintf		4805652	0					
ANR	4805662	Identifier	dprintf		4805652	0					
ANR	4805663	ArgumentList	D_PROCFAMILY		4805652	1					
ANR	4805664	Argument	D_PROCFAMILY		4805652	0					
ANR	4805665	Identifier	D_PROCFAMILY		4805652	0					
ANR	4805666	Argument	"""KillFamily: parent: %d family:"""		4805652	1					
ANR	4805667	PrimaryExpression	"""KillFamily: parent: %d family:"""		4805652	0					
ANR	4805668	Argument	daddy_pid		4805652	2					
ANR	4805669	Identifier	daddy_pid		4805652	0					
ANR	4805670	ForStatement	for ( i = 0 ; i < family_size ; i ++ )		4805652	2					
ANR	4805671	ForInit	i = 0 ;	522:6:13947:13950	4805652	0	True				
ANR	4805672	AssignmentExpression	i = 0		4805652	0		=			
ANR	4805673	Identifier	i		4805652	0					
ANR	4805674	PrimaryExpression	0		4805652	1					
ANR	4805675	Condition	i < family_size	522:11:13952:13964	4805652	1	True				
ANR	4805676	RelationalExpression	i < family_size		4805652	0		<			
ANR	4805677	Identifier	i		4805652	0					
ANR	4805678	Identifier	family_size		4805652	1					
ANR	4805679	PostIncDecOperationExpression	i ++	522:26:13967:13969	4805652	2	True				
ANR	4805680	Identifier	i		4805652	0					
ANR	4805681	IncDec	++		4805652	1					
ANR	4805682	CompoundStatement		4:32:112:112	4805652	3					
ANR	4805683	ExpressionStatement	"dprintf ( D_PROCFAMILY | D_NOHEADER , "" %d"" , ( * old_pids ) [ i ] . pid )"	523:2:13977:14040	4805652	0	True				
ANR	4805684	CallExpression	"dprintf ( D_PROCFAMILY | D_NOHEADER , "" %d"" , ( * old_pids ) [ i ] . pid )"		4805652	0					
ANR	4805685	Callee	dprintf		4805652	0					
ANR	4805686	Identifier	dprintf		4805652	0					
ANR	4805687	ArgumentList	D_PROCFAMILY | D_NOHEADER		4805652	1					
ANR	4805688	Argument	D_PROCFAMILY | D_NOHEADER		4805652	0					
ANR	4805689	InclusiveOrExpression	D_PROCFAMILY | D_NOHEADER		4805652	0		|			
ANR	4805690	Identifier	D_PROCFAMILY		4805652	0					
ANR	4805691	Identifier	D_NOHEADER		4805652	1					
ANR	4805692	Argument	""" %d"""		4805652	1					
ANR	4805693	PrimaryExpression	""" %d"""		4805652	0					
ANR	4805694	Argument	( * old_pids ) [ i ] . pid		4805652	2					
ANR	4805695	MemberAccess	( * old_pids ) [ i ] . pid		4805652	0					
ANR	4805696	ArrayIndexing	( * old_pids ) [ i ]		4805652	0					
ANR	4805697	UnaryOperationExpression	* old_pids		4805652	0					
ANR	4805698	UnaryOperator	*		4805652	0					
ANR	4805699	Identifier	old_pids		4805652	1					
ANR	4805700	Identifier	i		4805652	1					
ANR	4805701	Identifier	pid		4805652	1					
ANR	4805702	ExpressionStatement	"dprintf ( D_PROCFAMILY | D_NOHEADER , ""\\n"" )"	525:1:14046:14088	4805652	3	True				
ANR	4805703	CallExpression	"dprintf ( D_PROCFAMILY | D_NOHEADER , ""\\n"" )"		4805652	0					
ANR	4805704	Callee	dprintf		4805652	0					
ANR	4805705	Identifier	dprintf		4805652	0					
ANR	4805706	ArgumentList	D_PROCFAMILY | D_NOHEADER		4805652	1					
ANR	4805707	Argument	D_PROCFAMILY | D_NOHEADER		4805652	0					
ANR	4805708	InclusiveOrExpression	D_PROCFAMILY | D_NOHEADER		4805652	0		|			
ANR	4805709	Identifier	D_PROCFAMILY		4805652	0					
ANR	4805710	Identifier	D_NOHEADER		4805652	1					
ANR	4805711	Argument	"""\\n"""		4805652	1					
ANR	4805712	PrimaryExpression	"""\\n"""		4805652	0					
ANR	4805713	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily: alive_cpu_user = %ld, exited_cpu = %ld, max_image = %luk\\n"" , alive_cpu_user_time , exited_cpu_user_time , max_image_size )"	527:1:14092:14251	4805652	4	True				
ANR	4805714	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily: alive_cpu_user = %ld, exited_cpu = %ld, max_image = %luk\\n"" , alive_cpu_user_time , exited_cpu_user_time , max_image_size )"		4805652	0					
ANR	4805715	Callee	dprintf		4805652	0					
ANR	4805716	Identifier	dprintf		4805652	0					
ANR	4805717	ArgumentList	D_PROCFAMILY		4805652	1					
ANR	4805718	Argument	D_PROCFAMILY		4805652	0					
ANR	4805719	Identifier	D_PROCFAMILY		4805652	0					
ANR	4805720	Argument	"""KillFamily: alive_cpu_user = %ld, exited_cpu = %ld, max_image = %luk\\n"""		4805652	1					
ANR	4805721	PrimaryExpression	"""KillFamily: alive_cpu_user = %ld, exited_cpu = %ld, max_image = %luk\\n"""		4805652	0					
ANR	4805722	Argument	alive_cpu_user_time		4805652	2					
ANR	4805723	Identifier	alive_cpu_user_time		4805652	0					
ANR	4805724	Argument	exited_cpu_user_time		4805652	3					
ANR	4805725	Identifier	exited_cpu_user_time		4805652	0					
ANR	4805726	Argument	max_image_size		4805652	4					
ANR	4805727	Identifier	max_image_size		4805652	0					
ANR	4805728	ReturnType	void		4805652	1					
ANR	4805729	Identifier	KillFamily :: display		4805652	2					
ANR	4805730	ParameterList			4805652	3					
ANR	4805731	CFGEntryNode	ENTRY		4805652		True				
ANR	4805732	CFGExitNode	EXIT		4805652		True				
ANR	4805733	Symbol	family_size		4805652						
ANR	4805734	Symbol	* * old_pids		4805652						
ANR	4805735	Symbol	D_PROCFAMILY		4805652						
ANR	4805736	Symbol	* old_pids		4805652						
ANR	4805737	Symbol	i		4805652						
ANR	4805738	Symbol	alive_cpu_user_time		4805652						
ANR	4805739	Symbol	* i		4805652						
ANR	4805740	Symbol	exited_cpu_user_time		4805652						
ANR	4805741	Symbol	( * old_pids ) [ i ] . pid		4805652						
ANR	4805742	Symbol	old_pids		4805652						
ANR	4805743	Symbol	max_image_size		4805652						
ANR	4805744	Symbol	D_NOHEADER		4805652						
ANR	4805745	Symbol	daddy_pid		4805652						
