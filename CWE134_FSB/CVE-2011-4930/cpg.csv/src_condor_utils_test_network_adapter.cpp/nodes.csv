command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4950932	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_test_network_adapter.cpp								
ANR	4950933	DeclStmt									
ANR	4950934	Decl							const char	const char *	VERSION
ANR	4950935	ClassDef	Options	32:0:1057:1170							
ANR	4950936	DeclStmt									
ANR	4950937	Decl							int	int	m_verbosity
ANR	4950938	DeclStmt									
ANR	4950939	Decl							const char	const char *	m_if_name
ANR	4950940	DeclStmt									
ANR	4950941	Decl							const char	const char *	m_address
ANR	4950942	DeclStmt									
ANR	4950943	Decl							bool	bool	m_is_primary
ANR	4950944	DeclStmt									
ANR	4950945	Decl							bool	"bool ( int argc , const char * * argv , Options & opts )"	CheckArgs
ANR	4950946	Function	main	44:0:1235:3116							
ANR	4950947	FunctionDef	"main (int argc , const char * * argv)"		4950946	0					
ANR	4950948	CompoundStatement		46:0:1273:3116	4950946	0					
ANR	4950949	ExpressionStatement	DebugFlags = D_ALWAYS	47:1:1276:1297	4950946	0	True				
ANR	4950950	AssignmentExpression	DebugFlags = D_ALWAYS		4950946	0		=			
ANR	4950951	Identifier	DebugFlags		4950946	0					
ANR	4950952	Identifier	D_ALWAYS		4950946	1					
ANR	4950953	ExpressionStatement	"myDistro -> Init ( argc , argv )"	50:1:1342:1370	4950946	1	True				
ANR	4950954	CallExpression	"myDistro -> Init ( argc , argv )"		4950946	0					
ANR	4950955	Callee	myDistro -> Init		4950946	0					
ANR	4950956	PtrMemberAccess	myDistro -> Init		4950946	0					
ANR	4950957	Identifier	myDistro		4950946	0					
ANR	4950958	Identifier	Init		4950946	1					
ANR	4950959	ArgumentList	argc		4950946	1					
ANR	4950960	Argument	argc		4950946	0					
ANR	4950961	Identifier	argc		4950946	0					
ANR	4950962	Argument	argv		4950946	1					
ANR	4950963	Identifier	argv		4950946	0					
ANR	4950964	ExpressionStatement	config ( )	51:1:1373:1381	4950946	2	True				
ANR	4950965	CallExpression	config ( )		4950946	0					
ANR	4950966	Callee	config		4950946	0					
ANR	4950967	Identifier	config		4950946	0					
ANR	4950968	ArgumentList			4950946	1					
ANR	4950969	ExpressionStatement	Termlog = true	54:1:1418:1432	4950946	3	True				
ANR	4950970	AssignmentExpression	Termlog = true		4950946	0		=			
ANR	4950971	Identifier	Termlog		4950946	0					
ANR	4950972	Identifier	true		4950946	1					
ANR	4950973	ExpressionStatement	"dprintf_config ( ""TEST_HIBERNATION"" , get_param_functions ( ) )"	55:1:1435:1492	4950946	4	True				
ANR	4950974	CallExpression	"dprintf_config ( ""TEST_HIBERNATION"" , get_param_functions ( ) )"		4950946	0					
ANR	4950975	Callee	dprintf_config		4950946	0					
ANR	4950976	Identifier	dprintf_config		4950946	0					
ANR	4950977	ArgumentList	"""TEST_HIBERNATION"""		4950946	1					
ANR	4950978	Argument	"""TEST_HIBERNATION"""		4950946	0					
ANR	4950979	PrimaryExpression	"""TEST_HIBERNATION"""		4950946	0					
ANR	4950980	Argument	get_param_functions ( )		4950946	1					
ANR	4950981	CallExpression	get_param_functions ( )		4950946	0					
ANR	4950982	Callee	get_param_functions		4950946	0					
ANR	4950983	Identifier	get_param_functions		4950946	0					
ANR	4950984	ArgumentList			4950946	1					
ANR	4950985	IdentifierDeclStatement	const char * tmp ;	57:1:1496:1511	4950946	5	True				
ANR	4950986	IdentifierDecl	* tmp		4950946	0					
ANR	4950987	IdentifierDeclType	const char *		4950946	0					
ANR	4950988	Identifier	tmp		4950946	1					
ANR	4950989	IdentifierDeclStatement	int result = 0 ;	58:1:1514:1531	4950946	6	True				
ANR	4950990	IdentifierDecl	result = 0		4950946	0					
ANR	4950991	IdentifierDeclType	int		4950946	0					
ANR	4950992	Identifier	result		4950946	1					
ANR	4950993	AssignmentExpression	result = 0		4950946	2		=			
ANR	4950994	Identifier	result		4950946	0					
ANR	4950995	PrimaryExpression	0		4950946	1					
ANR	4950996	IdentifierDeclStatement	Options opts ;	59:1:1534:1548	4950946	7	True				
ANR	4950997	IdentifierDecl	opts		4950946	0					
ANR	4950998	IdentifierDeclType	Options		4950946	0					
ANR	4950999	Identifier	opts		4950946	1					
ANR	4951000	IfStatement	"if ( CheckArgs ( argc , argv , opts ) )"		4950946	8					
ANR	4951001	Condition	"CheckArgs ( argc , argv , opts )"	61:6:1557:1583	4950946	0	True				
ANR	4951002	CallExpression	"CheckArgs ( argc , argv , opts )"		4950946	0					
ANR	4951003	Callee	CheckArgs		4950946	0					
ANR	4951004	Identifier	CheckArgs		4950946	0					
ANR	4951005	ArgumentList	argc		4950946	1					
ANR	4951006	Argument	argc		4950946	0					
ANR	4951007	Identifier	argc		4950946	0					
ANR	4951008	Argument	argv		4950946	1					
ANR	4951009	Identifier	argv		4950946	0					
ANR	4951010	Argument	opts		4950946	2					
ANR	4951011	Identifier	opts		4950946	0					
ANR	4951012	CompoundStatement		16:36:313:313	4950946	1					
ANR	4951013	ExpressionStatement	exit ( 1 )	62:2:1591:1600	4950946	0	True				
ANR	4951014	CallExpression	exit ( 1 )		4950946	0					
ANR	4951015	Callee	exit		4950946	0					
ANR	4951016	Identifier	exit		4950946	0					
ANR	4951017	ArgumentList	1		4950946	1					
ANR	4951018	Argument	1		4950946	0					
ANR	4951019	PrimaryExpression	1		4950946	0					
ANR	4951020	IdentifierDeclStatement	NetworkAdapterBase * net = NULL ;	65:1:1607:1637	4950946	9	True				
ANR	4951021	IdentifierDecl	* net = NULL		4950946	0					
ANR	4951022	IdentifierDeclType	NetworkAdapterBase *		4950946	0					
ANR	4951023	Identifier	net		4950946	1					
ANR	4951024	AssignmentExpression	* net = NULL		4950946	2		=			
ANR	4951025	Identifier	NULL		4950946	0					
ANR	4951026	Identifier	NULL		4950946	1					
ANR	4951027	IfStatement	if ( opts . m_if_name )		4950946	10					
ANR	4951028	Condition	opts . m_if_name	67:6:1646:1659	4950946	0	True				
ANR	4951029	MemberAccess	opts . m_if_name		4950946	0					
ANR	4951030	Identifier	opts		4950946	0					
ANR	4951031	Identifier	m_if_name		4950946	1					
ANR	4951032	CompoundStatement		22:23:389:389	4950946	1					
ANR	4951033	ExpressionStatement	"printf ( ""Creating network adapter object for name %s\\n"" , opts . m_if_name )"	68:2:1667:1744	4950946	0	True				
ANR	4951034	CallExpression	"printf ( ""Creating network adapter object for name %s\\n"" , opts . m_if_name )"		4950946	0					
ANR	4951035	Callee	printf		4950946	0					
ANR	4951036	Identifier	printf		4950946	0					
ANR	4951037	ArgumentList	"""Creating network adapter object for name %s\\n"""		4950946	1					
ANR	4951038	Argument	"""Creating network adapter object for name %s\\n"""		4950946	0					
ANR	4951039	PrimaryExpression	"""Creating network adapter object for name %s\\n"""		4950946	0					
ANR	4951040	Argument	opts . m_if_name		4950946	1					
ANR	4951041	MemberAccess	opts . m_if_name		4950946	0					
ANR	4951042	Identifier	opts		4950946	0					
ANR	4951043	Identifier	m_if_name		4950946	1					
ANR	4951044	ExpressionStatement	net = NetworkAdapterBase :: createNetworkAdapter ( opts . m_if_name )	70:2:1748:1812	4950946	1	True				
ANR	4951045	AssignmentExpression	net = NetworkAdapterBase :: createNetworkAdapter ( opts . m_if_name )		4950946	0		=			
ANR	4951046	Identifier	net		4950946	0					
ANR	4951047	CallExpression	NetworkAdapterBase :: createNetworkAdapter ( opts . m_if_name )		4950946	1					
ANR	4951048	Callee	NetworkAdapterBase :: createNetworkAdapter		4950946	0					
ANR	4951049	Identifier	NetworkAdapterBase :: createNetworkAdapter		4950946	0					
ANR	4951050	ArgumentList	opts . m_if_name		4950946	1					
ANR	4951051	Argument	opts . m_if_name		4950946	0					
ANR	4951052	MemberAccess	opts . m_if_name		4950946	0					
ANR	4951053	Identifier	opts		4950946	0					
ANR	4951054	Identifier	m_if_name		4950946	1					
ANR	4951055	ElseStatement	else		4950946	0					
ANR	4951056	CompoundStatement		28:2:553:568	4950946	0					
ANR	4951057	IdentifierDeclStatement	MyString sinful ;	73:2:1827:1842	4950946	0	True				
ANR	4951058	IdentifierDecl	sinful		4950946	0					
ANR	4951059	IdentifierDeclType	MyString		4950946	0					
ANR	4951060	Identifier	sinful		4950946	1					
ANR	4951061	ExpressionStatement	"sinful . sprintf ( ""<%s:1234>"" , opts . m_address )"	74:2:1846:1891	4950946	1	True				
ANR	4951062	CallExpression	"sinful . sprintf ( ""<%s:1234>"" , opts . m_address )"		4950946	0					
ANR	4951063	Callee	sinful . sprintf		4950946	0					
ANR	4951064	MemberAccess	sinful . sprintf		4950946	0					
ANR	4951065	Identifier	sinful		4950946	0					
ANR	4951066	Identifier	sprintf		4950946	1					
ANR	4951067	ArgumentList	"""<%s:1234>"""		4950946	1					
ANR	4951068	Argument	"""<%s:1234>"""		4950946	0					
ANR	4951069	PrimaryExpression	"""<%s:1234>"""		4950946	0					
ANR	4951070	Argument	opts . m_address		4950946	1					
ANR	4951071	MemberAccess	opts . m_address		4950946	0					
ANR	4951072	Identifier	opts		4950946	0					
ANR	4951073	Identifier	m_address		4950946	1					
ANR	4951074	ExpressionStatement	"printf ( ""Creating network adapter object for %s\\n"" , sinful . Value ( ) )"	75:2:1895:1963	4950946	2	True				
ANR	4951075	CallExpression	"printf ( ""Creating network adapter object for %s\\n"" , sinful . Value ( ) )"		4950946	0					
ANR	4951076	Callee	printf		4950946	0					
ANR	4951077	Identifier	printf		4950946	0					
ANR	4951078	ArgumentList	"""Creating network adapter object for %s\\n"""		4950946	1					
ANR	4951079	Argument	"""Creating network adapter object for %s\\n"""		4950946	0					
ANR	4951080	PrimaryExpression	"""Creating network adapter object for %s\\n"""		4950946	0					
ANR	4951081	Argument	sinful . Value ( )		4950946	1					
ANR	4951082	CallExpression	sinful . Value ( )		4950946	0					
ANR	4951083	Callee	sinful . Value		4950946	0					
ANR	4951084	MemberAccess	sinful . Value		4950946	0					
ANR	4951085	Identifier	sinful		4950946	0					
ANR	4951086	Identifier	Value		4950946	1					
ANR	4951087	ArgumentList			4950946	1					
ANR	4951088	ExpressionStatement	net = NetworkAdapterBase :: createNetworkAdapter ( sinful . Value ( ) )	76:2:1967:2031	4950946	3	True				
ANR	4951089	AssignmentExpression	net = NetworkAdapterBase :: createNetworkAdapter ( sinful . Value ( ) )		4950946	0		=			
ANR	4951090	Identifier	net		4950946	0					
ANR	4951091	CallExpression	NetworkAdapterBase :: createNetworkAdapter ( sinful . Value ( ) )		4950946	1					
ANR	4951092	Callee	NetworkAdapterBase :: createNetworkAdapter		4950946	0					
ANR	4951093	Identifier	NetworkAdapterBase :: createNetworkAdapter		4950946	0					
ANR	4951094	ArgumentList	sinful . Value ( )		4950946	1					
ANR	4951095	Argument	sinful . Value ( )		4950946	0					
ANR	4951096	CallExpression	sinful . Value ( )		4950946	0					
ANR	4951097	Callee	sinful . Value		4950946	0					
ANR	4951098	MemberAccess	sinful . Value		4950946	0					
ANR	4951099	Identifier	sinful		4950946	0					
ANR	4951100	Identifier	Value		4950946	1					
ANR	4951101	ArgumentList			4950946	1					
ANR	4951102	IfStatement	if ( ! net )		4950946	11					
ANR	4951103	Condition	! net	78:6:2042:2045	4950946	0	True				
ANR	4951104	UnaryOperationExpression	! net		4950946	0					
ANR	4951105	UnaryOperator	!		4950946	0					
ANR	4951106	Identifier	net		4950946	1					
ANR	4951107	CompoundStatement		33:13:775:775	4950946	1					
ANR	4951108	ExpressionStatement	"printf ( ""Error creating adapter\\n"" )"	79:2:2053:2089	4950946	0	True				
ANR	4951109	CallExpression	"printf ( ""Error creating adapter\\n"" )"		4950946	0					
ANR	4951110	Callee	printf		4950946	0					
ANR	4951111	Identifier	printf		4950946	0					
ANR	4951112	ArgumentList	"""Error creating adapter\\n"""		4950946	1					
ANR	4951113	Argument	"""Error creating adapter\\n"""		4950946	0					
ANR	4951114	PrimaryExpression	"""Error creating adapter\\n"""		4950946	0					
ANR	4951115	ExpressionStatement	exit ( 1 )	80:2:2093:2100	4950946	1	True				
ANR	4951116	CallExpression	exit ( 1 )		4950946	0					
ANR	4951117	Callee	exit		4950946	0					
ANR	4951118	Identifier	exit		4950946	0					
ANR	4951119	ArgumentList	1		4950946	1					
ANR	4951120	Argument	1		4950946	0					
ANR	4951121	PrimaryExpression	1		4950946	0					
ANR	4951122	IfStatement	if ( ! net -> getInitStatus ( ) )		4950946	12					
ANR	4951123	Condition	! net -> getInitStatus ( )	84:6:2130:2150	4950946	0	True				
ANR	4951124	UnaryOperationExpression	! net -> getInitStatus ( )		4950946	0					
ANR	4951125	UnaryOperator	!		4950946	0					
ANR	4951126	CallExpression	net -> getInitStatus ( )		4950946	1					
ANR	4951127	Callee	net -> getInitStatus		4950946	0					
ANR	4951128	PtrMemberAccess	net -> getInitStatus		4950946	0					
ANR	4951129	Identifier	net		4950946	0					
ANR	4951130	Identifier	getInitStatus		4950946	1					
ANR	4951131	ArgumentList			4950946	1					
ANR	4951132	CompoundStatement		39:30:880:880	4950946	1					
ANR	4951133	ExpressionStatement	"printf ( ""Initialization of adaptor with address %s failed\\n"" , opts . m_address )"	85:2:2158:2240	4950946	0	True				
ANR	4951134	CallExpression	"printf ( ""Initialization of adaptor with address %s failed\\n"" , opts . m_address )"		4950946	0					
ANR	4951135	Callee	printf		4950946	0					
ANR	4951136	Identifier	printf		4950946	0					
ANR	4951137	ArgumentList	"""Initialization of adaptor with address %s failed\\n"""		4950946	1					
ANR	4951138	Argument	"""Initialization of adaptor with address %s failed\\n"""		4950946	0					
ANR	4951139	PrimaryExpression	"""Initialization of adaptor with address %s failed\\n"""		4950946	0					
ANR	4951140	Argument	opts . m_address		4950946	1					
ANR	4951141	MemberAccess	opts . m_address		4950946	0					
ANR	4951142	Identifier	opts		4950946	0					
ANR	4951143	Identifier	m_address		4950946	1					
ANR	4951144	ExpressionStatement	exit ( 1 )	87:2:2244:2251	4950946	1	True				
ANR	4951145	CallExpression	exit ( 1 )		4950946	0					
ANR	4951146	Callee	exit		4950946	0					
ANR	4951147	Identifier	exit		4950946	0					
ANR	4951148	ArgumentList	1		4950946	1					
ANR	4951149	Argument	1		4950946	0					
ANR	4951150	PrimaryExpression	1		4950946	0					
ANR	4951151	IfStatement	if ( ! net -> exists ( ) )		4950946	13					
ANR	4951152	Condition	! net -> exists ( )	91:6:2297:2310	4950946	0	True				
ANR	4951153	UnaryOperationExpression	! net -> exists ( )		4950946	0					
ANR	4951154	UnaryOperator	!		4950946	0					
ANR	4951155	CallExpression	net -> exists ( )		4950946	1					
ANR	4951156	Callee	net -> exists		4950946	0					
ANR	4951157	PtrMemberAccess	net -> exists		4950946	0					
ANR	4951158	Identifier	net		4950946	0					
ANR	4951159	Identifier	exists		4950946	1					
ANR	4951160	ArgumentList			4950946	1					
ANR	4951161	CompoundStatement		46:23:1040:1040	4950946	1					
ANR	4951162	ExpressionStatement	"printf ( ""Adaptor with address %s not found\\n"" , opts . m_address )"	92:2:2318:2385	4950946	0	True				
ANR	4951163	CallExpression	"printf ( ""Adaptor with address %s not found\\n"" , opts . m_address )"		4950946	0					
ANR	4951164	Callee	printf		4950946	0					
ANR	4951165	Identifier	printf		4950946	0					
ANR	4951166	ArgumentList	"""Adaptor with address %s not found\\n"""		4950946	1					
ANR	4951167	Argument	"""Adaptor with address %s not found\\n"""		4950946	0					
ANR	4951168	PrimaryExpression	"""Adaptor with address %s not found\\n"""		4950946	0					
ANR	4951169	Argument	opts . m_address		4950946	1					
ANR	4951170	MemberAccess	opts . m_address		4950946	0					
ANR	4951171	Identifier	opts		4950946	0					
ANR	4951172	Identifier	m_address		4950946	1					
ANR	4951173	ExpressionStatement	exit ( 1 )	94:2:2389:2396	4950946	1	True				
ANR	4951174	CallExpression	exit ( 1 )		4950946	0					
ANR	4951175	Callee	exit		4950946	0					
ANR	4951176	Identifier	exit		4950946	0					
ANR	4951177	ArgumentList	1		4950946	1					
ANR	4951178	Argument	1		4950946	0					
ANR	4951179	PrimaryExpression	1		4950946	0					
ANR	4951180	ExpressionStatement	tmp = net -> hardwareAddress ( )	98:1:2440:2468	4950946	14	True				
ANR	4951181	AssignmentExpression	tmp = net -> hardwareAddress ( )		4950946	0		=			
ANR	4951182	Identifier	tmp		4950946	0					
ANR	4951183	CallExpression	net -> hardwareAddress ( )		4950946	1					
ANR	4951184	Callee	net -> hardwareAddress		4950946	0					
ANR	4951185	PtrMemberAccess	net -> hardwareAddress		4950946	0					
ANR	4951186	Identifier	net		4950946	0					
ANR	4951187	Identifier	hardwareAddress		4950946	1					
ANR	4951188	ArgumentList			4950946	1					
ANR	4951189	IfStatement	if ( ! tmp || ! strlen ( tmp ) )		4950946	15					
ANR	4951190	Condition	! tmp || ! strlen ( tmp )	99:6:2476:2495	4950946	0	True				
ANR	4951191	OrExpression	! tmp || ! strlen ( tmp )		4950946	0		||			
ANR	4951192	UnaryOperationExpression	! tmp		4950946	0					
ANR	4951193	UnaryOperator	!		4950946	0					
ANR	4951194	Identifier	tmp		4950946	1					
ANR	4951195	UnaryOperationExpression	! strlen ( tmp )		4950946	1					
ANR	4951196	UnaryOperator	!		4950946	0					
ANR	4951197	CallExpression	strlen ( tmp )		4950946	1					
ANR	4951198	Callee	strlen		4950946	0					
ANR	4951199	Identifier	strlen		4950946	0					
ANR	4951200	ArgumentList	tmp		4950946	1					
ANR	4951201	Argument	tmp		4950946	0					
ANR	4951202	Identifier	tmp		4950946	0					
ANR	4951203	ExpressionStatement	"tmp = ""<NONE>"""	99:29:2499:2513	4950946	1	True				
ANR	4951204	AssignmentExpression	"tmp = ""<NONE>"""		4950946	0		=			
ANR	4951205	Identifier	tmp		4950946	0					
ANR	4951206	PrimaryExpression	"""<NONE>"""		4950946	1					
ANR	4951207	ExpressionStatement	"printf ( ""hardware address: %s\\n"" , tmp )"	100:1:2516:2555	4950946	16	True				
ANR	4951208	CallExpression	"printf ( ""hardware address: %s\\n"" , tmp )"		4950946	0					
ANR	4951209	Callee	printf		4950946	0					
ANR	4951210	Identifier	printf		4950946	0					
ANR	4951211	ArgumentList	"""hardware address: %s\\n"""		4950946	1					
ANR	4951212	Argument	"""hardware address: %s\\n"""		4950946	0					
ANR	4951213	PrimaryExpression	"""hardware address: %s\\n"""		4950946	0					
ANR	4951214	Argument	tmp		4950946	1					
ANR	4951215	Identifier	tmp		4950946	0					
ANR	4951216	ExpressionStatement	tmp = net -> subnetMask ( )	102:1:2559:2582	4950946	17	True				
ANR	4951217	AssignmentExpression	tmp = net -> subnetMask ( )		4950946	0		=			
ANR	4951218	Identifier	tmp		4950946	0					
ANR	4951219	CallExpression	net -> subnetMask ( )		4950946	1					
ANR	4951220	Callee	net -> subnetMask		4950946	0					
ANR	4951221	PtrMemberAccess	net -> subnetMask		4950946	0					
ANR	4951222	Identifier	net		4950946	0					
ANR	4951223	Identifier	subnetMask		4950946	1					
ANR	4951224	ArgumentList			4950946	1					
ANR	4951225	IfStatement	if ( ! tmp || ! strlen ( tmp ) )		4950946	18					
ANR	4951226	Condition	! tmp || ! strlen ( tmp )	103:6:2590:2609	4950946	0	True				
ANR	4951227	OrExpression	! tmp || ! strlen ( tmp )		4950946	0		||			
ANR	4951228	UnaryOperationExpression	! tmp		4950946	0					
ANR	4951229	UnaryOperator	!		4950946	0					
ANR	4951230	Identifier	tmp		4950946	1					
ANR	4951231	UnaryOperationExpression	! strlen ( tmp )		4950946	1					
ANR	4951232	UnaryOperator	!		4950946	0					
ANR	4951233	CallExpression	strlen ( tmp )		4950946	1					
ANR	4951234	Callee	strlen		4950946	0					
ANR	4951235	Identifier	strlen		4950946	0					
ANR	4951236	ArgumentList	tmp		4950946	1					
ANR	4951237	Argument	tmp		4950946	0					
ANR	4951238	Identifier	tmp		4950946	0					
ANR	4951239	ExpressionStatement	"tmp = ""<NONE>"""	103:29:2613:2627	4950946	1	True				
ANR	4951240	AssignmentExpression	"tmp = ""<NONE>"""		4950946	0		=			
ANR	4951241	Identifier	tmp		4950946	0					
ANR	4951242	PrimaryExpression	"""<NONE>"""		4950946	1					
ANR	4951243	ExpressionStatement	"printf ( ""subnet: %s\\n"" , tmp )"	104:1:2630:2659	4950946	19	True				
ANR	4951244	CallExpression	"printf ( ""subnet: %s\\n"" , tmp )"		4950946	0					
ANR	4951245	Callee	printf		4950946	0					
ANR	4951246	Identifier	printf		4950946	0					
ANR	4951247	ArgumentList	"""subnet: %s\\n"""		4950946	1					
ANR	4951248	Argument	"""subnet: %s\\n"""		4950946	0					
ANR	4951249	PrimaryExpression	"""subnet: %s\\n"""		4950946	0					
ANR	4951250	Argument	tmp		4950946	1					
ANR	4951251	Identifier	tmp		4950946	0					
ANR	4951252	ExpressionStatement	"printf ( ""wakable: %s\\n"" , net -> isWakeable ( ) ? ""YES"" : ""NO"" )"	106:1:2663:2722	4950946	20	True				
ANR	4951253	CallExpression	"printf ( ""wakable: %s\\n"" , net -> isWakeable ( ) ? ""YES"" : ""NO"" )"		4950946	0					
ANR	4951254	Callee	printf		4950946	0					
ANR	4951255	Identifier	printf		4950946	0					
ANR	4951256	ArgumentList	"""wakable: %s\\n"""		4950946	1					
ANR	4951257	Argument	"""wakable: %s\\n"""		4950946	0					
ANR	4951258	PrimaryExpression	"""wakable: %s\\n"""		4950946	0					
ANR	4951259	Argument	"net -> isWakeable ( ) ? ""YES"" : ""NO"""		4950946	1					
ANR	4951260	ConditionalExpression	"net -> isWakeable ( ) ? ""YES"" : ""NO"""		4950946	0					
ANR	4951261	Condition	net -> isWakeable ( )		4950946	0					
ANR	4951262	CallExpression	net -> isWakeable ( )		4950946	0					
ANR	4951263	Callee	net -> isWakeable		4950946	0					
ANR	4951264	PtrMemberAccess	net -> isWakeable		4950946	0					
ANR	4951265	Identifier	net		4950946	0					
ANR	4951266	Identifier	isWakeable		4950946	1					
ANR	4951267	ArgumentList			4950946	1					
ANR	4951268	PrimaryExpression	"""YES"""		4950946	1					
ANR	4951269	PrimaryExpression	"""NO"""		4950946	2					
ANR	4951270	IdentifierDeclStatement	MyString tmpstr ;	108:1:2726:2741	4950946	21	True				
ANR	4951271	IdentifierDecl	tmpstr		4950946	0					
ANR	4951272	IdentifierDeclType	MyString		4950946	0					
ANR	4951273	Identifier	tmpstr		4950946	1					
ANR	4951274	ExpressionStatement	net -> wakeSupportedString ( tmpstr )	109:1:2744:2778	4950946	22	True				
ANR	4951275	CallExpression	net -> wakeSupportedString ( tmpstr )		4950946	0					
ANR	4951276	Callee	net -> wakeSupportedString		4950946	0					
ANR	4951277	PtrMemberAccess	net -> wakeSupportedString		4950946	0					
ANR	4951278	Identifier	net		4950946	0					
ANR	4951279	Identifier	wakeSupportedString		4950946	1					
ANR	4951280	ArgumentList	tmpstr		4950946	1					
ANR	4951281	Argument	tmpstr		4950946	0					
ANR	4951282	Identifier	tmpstr		4950946	0					
ANR	4951283	ExpressionStatement	"printf ( ""wake support flags: %s\\n"" , tmpstr . Value ( ) )"	110:1:2781:2833	4950946	23	True				
ANR	4951284	CallExpression	"printf ( ""wake support flags: %s\\n"" , tmpstr . Value ( ) )"		4950946	0					
ANR	4951285	Callee	printf		4950946	0					
ANR	4951286	Identifier	printf		4950946	0					
ANR	4951287	ArgumentList	"""wake support flags: %s\\n"""		4950946	1					
ANR	4951288	Argument	"""wake support flags: %s\\n"""		4950946	0					
ANR	4951289	PrimaryExpression	"""wake support flags: %s\\n"""		4950946	0					
ANR	4951290	Argument	tmpstr . Value ( )		4950946	1					
ANR	4951291	CallExpression	tmpstr . Value ( )		4950946	0					
ANR	4951292	Callee	tmpstr . Value		4950946	0					
ANR	4951293	MemberAccess	tmpstr . Value		4950946	0					
ANR	4951294	Identifier	tmpstr		4950946	0					
ANR	4951295	Identifier	Value		4950946	1					
ANR	4951296	ArgumentList			4950946	1					
ANR	4951297	ExpressionStatement	net -> wakeEnabledString ( tmpstr )	112:1:2837:2869	4950946	24	True				
ANR	4951298	CallExpression	net -> wakeEnabledString ( tmpstr )		4950946	0					
ANR	4951299	Callee	net -> wakeEnabledString		4950946	0					
ANR	4951300	PtrMemberAccess	net -> wakeEnabledString		4950946	0					
ANR	4951301	Identifier	net		4950946	0					
ANR	4951302	Identifier	wakeEnabledString		4950946	1					
ANR	4951303	ArgumentList	tmpstr		4950946	1					
ANR	4951304	Argument	tmpstr		4950946	0					
ANR	4951305	Identifier	tmpstr		4950946	0					
ANR	4951306	ExpressionStatement	"printf ( ""wake enable flags: %s\\n"" , tmpstr . Value ( ) )"	113:1:2872:2923	4950946	25	True				
ANR	4951307	CallExpression	"printf ( ""wake enable flags: %s\\n"" , tmpstr . Value ( ) )"		4950946	0					
ANR	4951308	Callee	printf		4950946	0					
ANR	4951309	Identifier	printf		4950946	0					
ANR	4951310	ArgumentList	"""wake enable flags: %s\\n"""		4950946	1					
ANR	4951311	Argument	"""wake enable flags: %s\\n"""		4950946	0					
ANR	4951312	PrimaryExpression	"""wake enable flags: %s\\n"""		4950946	0					
ANR	4951313	Argument	tmpstr . Value ( )		4950946	1					
ANR	4951314	CallExpression	tmpstr . Value ( )		4950946	0					
ANR	4951315	Callee	tmpstr . Value		4950946	0					
ANR	4951316	MemberAccess	tmpstr . Value		4950946	0					
ANR	4951317	Identifier	tmpstr		4950946	0					
ANR	4951318	Identifier	Value		4950946	1					
ANR	4951319	ArgumentList			4950946	1					
ANR	4951320	IdentifierDeclStatement	ClassAd ad ;	115:1:2927:2937	4950946	26	True				
ANR	4951321	IdentifierDecl	ad		4950946	0					
ANR	4951322	IdentifierDeclType	ClassAd		4950946	0					
ANR	4951323	Identifier	ad		4950946	1					
ANR	4951324	ExpressionStatement	net -> publish ( ad )	116:1:2940:2958	4950946	27	True				
ANR	4951325	CallExpression	net -> publish ( ad )		4950946	0					
ANR	4951326	Callee	net -> publish		4950946	0					
ANR	4951327	PtrMemberAccess	net -> publish		4950946	0					
ANR	4951328	Identifier	net		4950946	0					
ANR	4951329	Identifier	publish		4950946	1					
ANR	4951330	ArgumentList	ad		4950946	1					
ANR	4951331	Argument	ad		4950946	0					
ANR	4951332	Identifier	ad		4950946	0					
ANR	4951333	ExpressionStatement	ad . fPrint ( stdout )	117:1:2961:2980	4950946	28	True				
ANR	4951334	CallExpression	ad . fPrint ( stdout )		4950946	0					
ANR	4951335	Callee	ad . fPrint		4950946	0					
ANR	4951336	MemberAccess	ad . fPrint		4950946	0					
ANR	4951337	Identifier	ad		4950946	0					
ANR	4951338	Identifier	fPrint		4950946	1					
ANR	4951339	ArgumentList	stdout		4950946	1					
ANR	4951340	Argument	stdout		4950946	0					
ANR	4951341	Identifier	stdout		4950946	0					
ANR	4951342	Statement	delete	119:1:2984:2989	4950946	29	True				
ANR	4951343	ExpressionStatement	net	119:8:2991:2994	4950946	30	True				
ANR	4951344	Identifier	net		4950946	0					
ANR	4951345	IfStatement	if ( result != 0 && opts . m_verbosity >= 1 )		4950946	31					
ANR	4951346	Condition	result != 0 && opts . m_verbosity >= 1	121:6:3003:3038	4950946	0	True				
ANR	4951347	AndExpression	result != 0 && opts . m_verbosity >= 1		4950946	0		&&			
ANR	4951348	EqualityExpression	result != 0		4950946	0		!=			
ANR	4951349	Identifier	result		4950946	0					
ANR	4951350	PrimaryExpression	0		4950946	1					
ANR	4951351	RelationalExpression	opts . m_verbosity >= 1		4950946	1		>=			
ANR	4951352	MemberAccess	opts . m_verbosity		4950946	0					
ANR	4951353	Identifier	opts		4950946	0					
ANR	4951354	Identifier	m_verbosity		4950946	1					
ANR	4951355	PrimaryExpression	1		4950946	1					
ANR	4951356	CompoundStatement		76:45:1768:1768	4950946	1					
ANR	4951357	ExpressionStatement	"fprintf ( stderr , ""test_network_adapter FAILED\\n"" )"	122:2:3046:3094	4950946	0	True				
ANR	4951358	CallExpression	"fprintf ( stderr , ""test_network_adapter FAILED\\n"" )"		4950946	0					
ANR	4951359	Callee	fprintf		4950946	0					
ANR	4951360	Identifier	fprintf		4950946	0					
ANR	4951361	ArgumentList	stderr		4950946	1					
ANR	4951362	Argument	stderr		4950946	0					
ANR	4951363	Identifier	stderr		4950946	0					
ANR	4951364	Argument	"""test_network_adapter FAILED\\n"""		4950946	1					
ANR	4951365	PrimaryExpression	"""test_network_adapter FAILED\\n"""		4950946	0					
ANR	4951366	ReturnStatement	return result ;	125:1:3101:3114	4950946	32	True				
ANR	4951367	Identifier	result		4950946	0					
ANR	4951368	ReturnType	int		4950946	1					
ANR	4951369	Identifier	main		4950946	2					
ANR	4951370	ParameterList	"int argc , const char * * argv"		4950946	3					
ANR	4951371	Parameter	int argc	45:5:1244:1251	4950946	0	True				
ANR	4951372	ParameterType	int		4950946	0					
ANR	4951373	Identifier	argc		4950946	1					
ANR	4951374	Parameter	const char * * argv	45:15:1254:1270	4950946	1	True				
ANR	4951375	ParameterType	const char * *		4950946	0					
ANR	4951376	Identifier	argv		4950946	1					
ANR	4951377	CFGEntryNode	ENTRY		4950946		True				
ANR	4951378	CFGExitNode	EXIT		4950946		True				
ANR	4951379	Symbol	net -> hardwareAddress		4950946						
ANR	4951380	Symbol	stdout		4950946						
ANR	4951381	Symbol	* net		4950946						
ANR	4951382	Symbol	net -> exists		4950946						
ANR	4951383	Symbol	argv		4950946						
ANR	4951384	Symbol	opts . m_verbosity		4950946						
ANR	4951385	Symbol	CheckArgs		4950946						
ANR	4951386	Symbol	net -> getInitStatus		4950946						
ANR	4951387	Symbol	result		4950946						
ANR	4951388	Symbol	strlen		4950946						
ANR	4951389	Symbol	net -> isWakeable		4950946						
ANR	4951390	Symbol	opts		4950946						
ANR	4951391	Symbol	myDistro		4950946						
ANR	4951392	Symbol	tmp		4950946						
ANR	4951393	Symbol	opts . m_if_name		4950946						
ANR	4951394	Symbol	net		4950946						
ANR	4951395	Symbol	tmpstr		4950946						
ANR	4951396	Symbol	sinful		4950946						
ANR	4951397	Symbol	argc		4950946						
ANR	4951398	Symbol	NULL		4950946						
ANR	4951399	Symbol	ad		4950946						
ANR	4951400	Symbol	Termlog		4950946						
ANR	4951401	Symbol	get_param_functions		4950946						
ANR	4951402	Symbol	D_ALWAYS		4950946						
ANR	4951403	Symbol	sinful . Value		4950946						
ANR	4951404	Symbol	DebugFlags		4950946						
ANR	4951405	Symbol	net -> subnetMask		4950946						
ANR	4951406	Symbol	stderr		4950946						
ANR	4951407	Symbol	opts . m_address		4950946						
ANR	4951408	Symbol	true		4950946						
ANR	4951409	Symbol	NetworkAdapterBase :: createNetworkAdapter		4950946						
ANR	4951410	Symbol	tmpstr . Value		4950946						
ANR	4951411	Function	CheckArgs	128:0:3119:5134							
ANR	4951412	FunctionDef	"CheckArgs (int argc , const char * * argv , Options & opts)"		4951411	0					
ANR	4951413	CompoundStatement		130:0:3178:5134	4951411	0					
ANR	4951414	Statement	const	131:1:3181:3185	4951411	0	True				
ANR	4951415	Statement	char	131:7:3187:3190	4951411	1	True				
ANR	4951416	Statement	*	131:12:3192:3192	4951411	2	True				
ANR	4951417	Statement	usage	131:14:3194:3198	4951411	3	True				
ANR	4951418	Statement	=	131:20:3200:3200	4951411	4	True				
ANR	4951419	Statement	"""Usage: test_network_adapter [options] <IP address|IF name>\\n"""	132:2:3204:3265	4951411	5	True				
ANR	4951420	Statement	"""  -d <level>: debug level (e.g., D_FULLDEBUG)\\n"""	133:2:3269:3317	4951411	6	True				
ANR	4951421	Statement	"""  --debug <level>: debug level (e.g., D_FULLDEBUG)\\n"""	134:2:3321:3374	4951411	7	True				
ANR	4951422	Statement	"""  --usage|--help|-h: print this message and exit\\n"""	135:2:3378:3429	4951411	8	True				
ANR	4951423	Statement	"""  -v: Increase verbosity level by 1\\n"""	136:2:3433:3471	4951411	9	True				
ANR	4951424	Statement	"""  --verbosity <number>: set verbosity level (default is 1)\\n"""	137:2:3475:3536	4951411	10	True				
ANR	4951425	ExpressionStatement	"""  --version: print the version number and compile date\\n"""	138:2:3540:3598	4951411	11	True				
ANR	4951426	PrimaryExpression	"""  --version: print the version number and compile date\\n"""		4951411	0					
ANR	4951427	ExpressionStatement	opts . m_verbosity = 1	140:1:3602:3622	4951411	12	True				
ANR	4951428	AssignmentExpression	opts . m_verbosity = 1		4951411	0		=			
ANR	4951429	MemberAccess	opts . m_verbosity		4951411	0					
ANR	4951430	Identifier	opts		4951411	0					
ANR	4951431	Identifier	m_verbosity		4951411	1					
ANR	4951432	PrimaryExpression	1		4951411	1					
ANR	4951433	ExpressionStatement	opts . m_if_name = NULL	142:1:3626:3647	4951411	13	True				
ANR	4951434	AssignmentExpression	opts . m_if_name = NULL		4951411	0		=			
ANR	4951435	MemberAccess	opts . m_if_name		4951411	0					
ANR	4951436	Identifier	opts		4951411	0					
ANR	4951437	Identifier	m_if_name		4951411	1					
ANR	4951438	Identifier	NULL		4951411	1					
ANR	4951439	ExpressionStatement	"opts . m_address = ""127.0.0.1"""	143:1:3650:3678	4951411	14	True				
ANR	4951440	AssignmentExpression	"opts . m_address = ""127.0.0.1"""		4951411	0		=			
ANR	4951441	MemberAccess	opts . m_address		4951411	0					
ANR	4951442	Identifier	opts		4951411	0					
ANR	4951443	Identifier	m_address		4951411	1					
ANR	4951444	PrimaryExpression	"""127.0.0.1"""		4951411	1					
ANR	4951445	ExpressionStatement	opts . m_is_primary = false	144:1:3681:3706	4951411	15	True				
ANR	4951446	AssignmentExpression	opts . m_is_primary = false		4951411	0		=			
ANR	4951447	MemberAccess	opts . m_is_primary		4951411	0					
ANR	4951448	Identifier	opts		4951411	0					
ANR	4951449	Identifier	m_is_primary		4951411	1					
ANR	4951450	Identifier	false		4951411	1					
ANR	4951451	IdentifierDeclStatement	int optno = 0 ;	147:1:3711:3725	4951411	16	True				
ANR	4951452	IdentifierDecl	optno = 0		4951411	0					
ANR	4951453	IdentifierDeclType	int		4951411	0					
ANR	4951454	Identifier	optno		4951411	1					
ANR	4951455	AssignmentExpression	optno = 0		4951411	2		=			
ANR	4951456	Identifier	optno		4951411	0					
ANR	4951457	PrimaryExpression	0		4951411	1					
ANR	4951458	ForStatement	for ( int index = 1 ; index < argc ; ++ index )		4951411	17					
ANR	4951459	ForInit	int index = 1 ;	148:7:3734:3747	4951411	0	True				
ANR	4951460	IdentifierDeclStatement	int index = 1 ;		4951411	0					
ANR	4951461	IdentifierDecl	index = 1		4951411	0					
ANR	4951462	IdentifierDeclType	int		4951411	0					
ANR	4951463	Identifier	index		4951411	1					
ANR	4951464	AssignmentExpression	index = 1		4951411	2		=			
ANR	4951465	Identifier	index		4951411	0					
ANR	4951466	PrimaryExpression	1		4951411	1					
ANR	4951467	Condition	index < argc	148:22:3749:3760	4951411	1	True				
ANR	4951468	RelationalExpression	index < argc		4951411	0		<			
ANR	4951469	Identifier	index		4951411	0					
ANR	4951470	Identifier	argc		4951411	1					
ANR	4951471	UnaryExpression	++ index	148:36:3763:3769	4951411	2	True				
ANR	4951472	IncDec	++		4951411	0					
ANR	4951473	Identifier	index		4951411	1					
ANR	4951474	CompoundStatement		20:2:598:632	4951411	3					
ANR	4951475	IdentifierDeclStatement	"SimpleArg arg ( argv , argc , index ) ;"	149:2:3777:3811	4951411	0	True				
ANR	4951476	IdentifierDecl	"arg ( argv , argc , index )"		4951411	0					
ANR	4951477	IdentifierDeclType	SimpleArg		4951411	0					
ANR	4951478	Identifier	arg		4951411	1					
ANR	4951479	Expression	"argv , argc , index"		4951411	2					
ANR	4951480	Identifier	argv		4951411	0					
ANR	4951481	Expression	"argc , index"		4951411	1					
ANR	4951482	Identifier	argc		4951411	0					
ANR	4951483	Identifier	index		4951411	1					
ANR	4951484	IfStatement	if ( arg . Error ( ) )		4951411	1					
ANR	4951485	Condition	arg . Error ( )	151:7:3821:3831	4951411	0	True				
ANR	4951486	CallExpression	arg . Error ( )		4951411	0					
ANR	4951487	Callee	arg . Error		4951411	0					
ANR	4951488	MemberAccess	arg . Error		4951411	0					
ANR	4951489	Identifier	arg		4951411	0					
ANR	4951490	Identifier	Error		4951411	1					
ANR	4951491	ArgumentList			4951411	1					
ANR	4951492	CompoundStatement		22:21:656:656	4951411	1					
ANR	4951493	ExpressionStatement	"printf ( ""%s"" , usage )"	152:3:3840:3859	4951411	0	True				
ANR	4951494	CallExpression	"printf ( ""%s"" , usage )"		4951411	0					
ANR	4951495	Callee	printf		4951411	0					
ANR	4951496	Identifier	printf		4951411	0					
ANR	4951497	ArgumentList	"""%s"""		4951411	1					
ANR	4951498	Argument	"""%s"""		4951411	0					
ANR	4951499	PrimaryExpression	"""%s"""		4951411	0					
ANR	4951500	Argument	usage		4951411	1					
ANR	4951501	Identifier	usage		4951411	0					
ANR	4951502	ReturnStatement	return true ;	153:3:3864:3875	4951411	1	True				
ANR	4951503	Identifier	true		4951411	0					
ANR	4951504	IfStatement	"if ( arg . Match ( 'd' , ""debug"" ) )"		4951411	2					
ANR	4951505	Condition	"arg . Match ( 'd' , ""debug"" )"	156:7:3889:3912	4951411	0	True				
ANR	4951506	CallExpression	"arg . Match ( 'd' , ""debug"" )"		4951411	0					
ANR	4951507	Callee	arg . Match		4951411	0					
ANR	4951508	MemberAccess	arg . Match		4951411	0					
ANR	4951509	Identifier	arg		4951411	0					
ANR	4951510	Identifier	Match		4951411	1					
ANR	4951511	ArgumentList	'd'		4951411	1					
ANR	4951512	Argument	'd'		4951411	0					
ANR	4951513	PrimaryExpression	'd'		4951411	0					
ANR	4951514	Argument	"""debug"""		4951411	1					
ANR	4951515	PrimaryExpression	"""debug"""		4951411	0					
ANR	4951516	CompoundStatement		27:34:737:737	4951411	1					
ANR	4951517	IfStatement	if ( arg . hasOpt ( ) )		4951411	0					
ANR	4951518	Condition	arg . hasOpt ( )	157:8:3926:3937	4951411	0	True				
ANR	4951519	CallExpression	arg . hasOpt ( )		4951411	0					
ANR	4951520	Callee	arg . hasOpt		4951411	0					
ANR	4951521	MemberAccess	arg . hasOpt		4951411	0					
ANR	4951522	Identifier	arg		4951411	0					
ANR	4951523	Identifier	hasOpt		4951411	1					
ANR	4951524	ArgumentList			4951411	1					
ANR	4951525	CompoundStatement		28:23:762:762	4951411	1					
ANR	4951526	ExpressionStatement	set_debug_flags ( arg . getOpt ( ) )	158:4:3947:3978	4951411	0	True				
ANR	4951527	CallExpression	set_debug_flags ( arg . getOpt ( ) )		4951411	0					
ANR	4951528	Callee	set_debug_flags		4951411	0					
ANR	4951529	Identifier	set_debug_flags		4951411	0					
ANR	4951530	ArgumentList	arg . getOpt ( )		4951411	1					
ANR	4951531	Argument	arg . getOpt ( )		4951411	0					
ANR	4951532	CallExpression	arg . getOpt ( )		4951411	0					
ANR	4951533	Callee	arg . getOpt		4951411	0					
ANR	4951534	MemberAccess	arg . getOpt		4951411	0					
ANR	4951535	Identifier	arg		4951411	0					
ANR	4951536	Identifier	getOpt		4951411	1					
ANR	4951537	ArgumentList			4951411	1					
ANR	4951538	ExpressionStatement	index = arg . ConsumeOpt ( )	159:4:3984:4009	4951411	1	True				
ANR	4951539	AssignmentExpression	index = arg . ConsumeOpt ( )		4951411	0		=			
ANR	4951540	Identifier	index		4951411	0					
ANR	4951541	CallExpression	arg . ConsumeOpt ( )		4951411	1					
ANR	4951542	Callee	arg . ConsumeOpt		4951411	0					
ANR	4951543	MemberAccess	arg . ConsumeOpt		4951411	0					
ANR	4951544	Identifier	arg		4951411	0					
ANR	4951545	Identifier	ConsumeOpt		4951411	1					
ANR	4951546	ArgumentList			4951411	1					
ANR	4951547	ElseStatement	else		4951411	0					
ANR	4951548	CompoundStatement		31:10:842:842	4951411	0					
ANR	4951549	ExpressionStatement	"fprintf ( stderr , ""Value needed for %s argument\\n"" , arg . Arg ( ) )"	161:4:4027:4088	4951411	0	True				
ANR	4951550	CallExpression	"fprintf ( stderr , ""Value needed for %s argument\\n"" , arg . Arg ( ) )"		4951411	0					
ANR	4951551	Callee	fprintf		4951411	0					
ANR	4951552	Identifier	fprintf		4951411	0					
ANR	4951553	ArgumentList	stderr		4951411	1					
ANR	4951554	Argument	stderr		4951411	0					
ANR	4951555	Identifier	stderr		4951411	0					
ANR	4951556	Argument	"""Value needed for %s argument\\n"""		4951411	1					
ANR	4951557	PrimaryExpression	"""Value needed for %s argument\\n"""		4951411	0					
ANR	4951558	Argument	arg . Arg ( )		4951411	2					
ANR	4951559	CallExpression	arg . Arg ( )		4951411	0					
ANR	4951560	Callee	arg . Arg		4951411	0					
ANR	4951561	MemberAccess	arg . Arg		4951411	0					
ANR	4951562	Identifier	arg		4951411	0					
ANR	4951563	Identifier	Arg		4951411	1					
ANR	4951564	ArgumentList			4951411	1					
ANR	4951565	ExpressionStatement	"printf ( ""%s"" , usage )"	162:4:4094:4113	4951411	1	True				
ANR	4951566	CallExpression	"printf ( ""%s"" , usage )"		4951411	0					
ANR	4951567	Callee	printf		4951411	0					
ANR	4951568	Identifier	printf		4951411	0					
ANR	4951569	ArgumentList	"""%s"""		4951411	1					
ANR	4951570	Argument	"""%s"""		4951411	0					
ANR	4951571	PrimaryExpression	"""%s"""		4951411	0					
ANR	4951572	Argument	usage		4951411	1					
ANR	4951573	Identifier	usage		4951411	0					
ANR	4951574	ReturnStatement	return true ;	163:4:4119:4130	4951411	2	True				
ANR	4951575	Identifier	true		4951411	0					
ANR	4951576	ElseStatement	else		4951411	0					
ANR	4951577	IfStatement	"if ( ( arg . Match ( ""usage"" ) ) || ( arg . Match ( 'h' ) ) || ( arg . Match ( ""help"" ) ) )"		4951411	0					
ANR	4951578	Condition	"( arg . Match ( ""usage"" ) ) || ( arg . Match ( 'h' ) ) || ( arg . Match ( ""help"" ) )"	166:14:4152:4233	4951411	0	True				
ANR	4951579	OrExpression	"( arg . Match ( ""usage"" ) ) || ( arg . Match ( 'h' ) ) || ( arg . Match ( ""help"" ) )"		4951411	0		||			
ANR	4951580	CallExpression	"arg . Match ( ""usage"" )"		4951411	0					
ANR	4951581	Callee	arg . Match		4951411	0					
ANR	4951582	MemberAccess	arg . Match		4951411	0					
ANR	4951583	Identifier	arg		4951411	0					
ANR	4951584	Identifier	Match		4951411	1					
ANR	4951585	ArgumentList	"""usage"""		4951411	1					
ANR	4951586	Argument	"""usage"""		4951411	0					
ANR	4951587	PrimaryExpression	"""usage"""		4951411	0					
ANR	4951588	OrExpression	"( arg . Match ( 'h' ) ) || ( arg . Match ( ""help"" ) )"		4951411	1		||			
ANR	4951589	CallExpression	arg . Match ( 'h' )		4951411	0					
ANR	4951590	Callee	arg . Match		4951411	0					
ANR	4951591	MemberAccess	arg . Match		4951411	0					
ANR	4951592	Identifier	arg		4951411	0					
ANR	4951593	Identifier	Match		4951411	1					
ANR	4951594	ArgumentList	'h'		4951411	1					
ANR	4951595	Argument	'h'		4951411	0					
ANR	4951596	PrimaryExpression	'h'		4951411	0					
ANR	4951597	CallExpression	"arg . Match ( ""help"" )"		4951411	1					
ANR	4951598	Callee	arg . Match		4951411	0					
ANR	4951599	MemberAccess	arg . Match		4951411	0					
ANR	4951600	Identifier	arg		4951411	0					
ANR	4951601	Identifier	Match		4951411	1					
ANR	4951602	ArgumentList	"""help"""		4951411	1					
ANR	4951603	Argument	"""help"""		4951411	0					
ANR	4951604	PrimaryExpression	"""help"""		4951411	0					
ANR	4951605	CompoundStatement		39:30:1059:1059	4951411	1					
ANR	4951606	ExpressionStatement	"printf ( ""%s"" , usage )"	169:3:4243:4262	4951411	0	True				
ANR	4951607	CallExpression	"printf ( ""%s"" , usage )"		4951411	0					
ANR	4951608	Callee	printf		4951411	0					
ANR	4951609	Identifier	printf		4951411	0					
ANR	4951610	ArgumentList	"""%s"""		4951411	1					
ANR	4951611	Argument	"""%s"""		4951411	0					
ANR	4951612	PrimaryExpression	"""%s"""		4951411	0					
ANR	4951613	Argument	usage		4951411	1					
ANR	4951614	Identifier	usage		4951411	0					
ANR	4951615	ReturnStatement	return true ;	170:3:4267:4278	4951411	1	True				
ANR	4951616	Identifier	true		4951411	0					
ANR	4951617	ElseStatement	else		4951411	0					
ANR	4951618	IfStatement	if ( arg . Match ( 'v' ) )		4951411	0					
ANR	4951619	Condition	arg . Match ( 'v' )	172:14:4295:4308	4951411	0	True				
ANR	4951620	CallExpression	arg . Match ( 'v' )		4951411	0					
ANR	4951621	Callee	arg . Match		4951411	0					
ANR	4951622	MemberAccess	arg . Match		4951411	0					
ANR	4951623	Identifier	arg		4951411	0					
ANR	4951624	Identifier	Match		4951411	1					
ANR	4951625	ArgumentList	'v'		4951411	1					
ANR	4951626	Argument	'v'		4951411	0					
ANR	4951627	PrimaryExpression	'v'		4951411	0					
ANR	4951628	CompoundStatement		43:31:1133:1133	4951411	1					
ANR	4951629	ExpressionStatement	opts . m_verbosity ++	173:3:4317:4335	4951411	0	True				
ANR	4951630	PostIncDecOperationExpression	opts . m_verbosity ++		4951411	0					
ANR	4951631	MemberAccess	opts . m_verbosity		4951411	0					
ANR	4951632	Identifier	opts		4951411	0					
ANR	4951633	Identifier	m_verbosity		4951411	1					
ANR	4951634	IncDec	++		4951411	1					
ANR	4951635	ElseStatement	else		4951411	0					
ANR	4951636	IfStatement	"if ( arg . Match ( ""verbosity"" ) )"		4951411	0					
ANR	4951637	Condition	"arg . Match ( ""verbosity"" )"	175:14:4352:4373	4951411	0	True				
ANR	4951638	CallExpression	"arg . Match ( ""verbosity"" )"		4951411	0					
ANR	4951639	Callee	arg . Match		4951411	0					
ANR	4951640	MemberAccess	arg . Match		4951411	0					
ANR	4951641	Identifier	arg		4951411	0					
ANR	4951642	Identifier	Match		4951411	1					
ANR	4951643	ArgumentList	"""verbosity"""		4951411	1					
ANR	4951644	Argument	"""verbosity"""		4951411	0					
ANR	4951645	PrimaryExpression	"""verbosity"""		4951411	0					
ANR	4951646	CompoundStatement		46:39:1198:1198	4951411	1					
ANR	4951647	IfStatement	if ( arg . getOpt ( opts . m_verbosity ) )		4951411	0					
ANR	4951648	Condition	arg . getOpt ( opts . m_verbosity )	176:8:4387:4414	4951411	0	True				
ANR	4951649	CallExpression	arg . getOpt ( opts . m_verbosity )		4951411	0					
ANR	4951650	Callee	arg . getOpt		4951411	0					
ANR	4951651	MemberAccess	arg . getOpt		4951411	0					
ANR	4951652	Identifier	arg		4951411	0					
ANR	4951653	Identifier	getOpt		4951411	1					
ANR	4951654	ArgumentList	opts . m_verbosity		4951411	1					
ANR	4951655	Argument	opts . m_verbosity		4951411	0					
ANR	4951656	MemberAccess	opts . m_verbosity		4951411	0					
ANR	4951657	Identifier	opts		4951411	0					
ANR	4951658	Identifier	m_verbosity		4951411	1					
ANR	4951659	CompoundStatement		47:39:1239:1239	4951411	1					
ANR	4951660	ExpressionStatement	"fprintf ( stderr , ""Value needed for %s argument\\n"" , arg . Arg ( ) )"	177:4:4424:4485	4951411	0	True				
ANR	4951661	CallExpression	"fprintf ( stderr , ""Value needed for %s argument\\n"" , arg . Arg ( ) )"		4951411	0					
ANR	4951662	Callee	fprintf		4951411	0					
ANR	4951663	Identifier	fprintf		4951411	0					
ANR	4951664	ArgumentList	stderr		4951411	1					
ANR	4951665	Argument	stderr		4951411	0					
ANR	4951666	Identifier	stderr		4951411	0					
ANR	4951667	Argument	"""Value needed for %s argument\\n"""		4951411	1					
ANR	4951668	PrimaryExpression	"""Value needed for %s argument\\n"""		4951411	0					
ANR	4951669	Argument	arg . Arg ( )		4951411	2					
ANR	4951670	CallExpression	arg . Arg ( )		4951411	0					
ANR	4951671	Callee	arg . Arg		4951411	0					
ANR	4951672	MemberAccess	arg . Arg		4951411	0					
ANR	4951673	Identifier	arg		4951411	0					
ANR	4951674	Identifier	Arg		4951411	1					
ANR	4951675	ArgumentList			4951411	1					
ANR	4951676	ExpressionStatement	"printf ( ""%s"" , usage )"	178:4:4491:4510	4951411	1	True				
ANR	4951677	CallExpression	"printf ( ""%s"" , usage )"		4951411	0					
ANR	4951678	Callee	printf		4951411	0					
ANR	4951679	Identifier	printf		4951411	0					
ANR	4951680	ArgumentList	"""%s"""		4951411	1					
ANR	4951681	Argument	"""%s"""		4951411	0					
ANR	4951682	PrimaryExpression	"""%s"""		4951411	0					
ANR	4951683	Argument	usage		4951411	1					
ANR	4951684	Identifier	usage		4951411	0					
ANR	4951685	ReturnStatement	return true ;	179:4:4516:4527	4951411	2	True				
ANR	4951686	Identifier	true		4951411	0					
ANR	4951687	ElseStatement	else		4951411	0					
ANR	4951688	IfStatement	"if ( arg . Match ( ""version"" ) )"		4951411	0					
ANR	4951689	Condition	"arg . Match ( ""version"" )"	182:14:4549:4568	4951411	0	True				
ANR	4951690	CallExpression	"arg . Match ( ""version"" )"		4951411	0					
ANR	4951691	Callee	arg . Match		4951411	0					
ANR	4951692	MemberAccess	arg . Match		4951411	0					
ANR	4951693	Identifier	arg		4951411	0					
ANR	4951694	Identifier	Match		4951411	1					
ANR	4951695	ArgumentList	"""version"""		4951411	1					
ANR	4951696	Argument	"""version"""		4951411	0					
ANR	4951697	PrimaryExpression	"""version"""		4951411	0					
ANR	4951698	CompoundStatement		53:37:1393:1393	4951411	1					
ANR	4951699	ExpressionStatement	"printf ( ""test_log_reader: %s, %s\\n"" , VERSION , __DATE__ )"	183:3:4577:4631	4951411	0	True				
ANR	4951700	CallExpression	"printf ( ""test_log_reader: %s, %s\\n"" , VERSION , __DATE__ )"		4951411	0					
ANR	4951701	Callee	printf		4951411	0					
ANR	4951702	Identifier	printf		4951411	0					
ANR	4951703	ArgumentList	"""test_log_reader: %s, %s\\n"""		4951411	1					
ANR	4951704	Argument	"""test_log_reader: %s, %s\\n"""		4951411	0					
ANR	4951705	PrimaryExpression	"""test_log_reader: %s, %s\\n"""		4951411	0					
ANR	4951706	Argument	VERSION		4951411	1					
ANR	4951707	Identifier	VERSION		4951411	0					
ANR	4951708	Argument	__DATE__		4951411	2					
ANR	4951709	Identifier	__DATE__		4951411	0					
ANR	4951710	ReturnStatement	return true ;	184:3:4636:4647	4951411	1	True				
ANR	4951711	Identifier	true		4951411	0					
ANR	4951712	ElseStatement	else		4951411	0					
ANR	4951713	IfStatement	if ( ! arg . ArgIsOpt ( ) && ( optno == 0 ) && arg . isOptInt ( ) )		4951411	0					
ANR	4951714	Condition	! arg . ArgIsOpt ( ) && ( optno == 0 ) && arg . isOptInt ( )	186:14:4664:4716	4951411	0	True				
ANR	4951715	AndExpression	! arg . ArgIsOpt ( ) && ( optno == 0 ) && arg . isOptInt ( )		4951411	0		&&			
ANR	4951716	UnaryOperationExpression	! arg . ArgIsOpt ( )		4951411	0					
ANR	4951717	UnaryOperator	!		4951411	0					
ANR	4951718	CallExpression	arg . ArgIsOpt ( )		4951411	1					
ANR	4951719	Callee	arg . ArgIsOpt		4951411	0					
ANR	4951720	MemberAccess	arg . ArgIsOpt		4951411	0					
ANR	4951721	Identifier	arg		4951411	0					
ANR	4951722	Identifier	ArgIsOpt		4951411	1					
ANR	4951723	ArgumentList			4951411	1					
ANR	4951724	AndExpression	( optno == 0 ) && arg . isOptInt ( )		4951411	1		&&			
ANR	4951725	EqualityExpression	optno == 0		4951411	0		==			
ANR	4951726	Identifier	optno		4951411	0					
ANR	4951727	PrimaryExpression	0		4951411	1					
ANR	4951728	CallExpression	arg . isOptInt ( )		4951411	1					
ANR	4951729	Callee	arg . isOptInt		4951411	0					
ANR	4951730	MemberAccess	arg . isOptInt		4951411	0					
ANR	4951731	Identifier	arg		4951411	0					
ANR	4951732	Identifier	isOptInt		4951411	1					
ANR	4951733	ArgumentList			4951411	1					
ANR	4951734	CompoundStatement		57:70:1541:1541	4951411	1					
ANR	4951735	ExpressionStatement	opts . m_address = arg . getOpt ( )	187:3:4725:4754	4951411	0	True				
ANR	4951736	AssignmentExpression	opts . m_address = arg . getOpt ( )		4951411	0		=			
ANR	4951737	MemberAccess	opts . m_address		4951411	0					
ANR	4951738	Identifier	opts		4951411	0					
ANR	4951739	Identifier	m_address		4951411	1					
ANR	4951740	CallExpression	arg . getOpt ( )		4951411	1					
ANR	4951741	Callee	arg . getOpt		4951411	0					
ANR	4951742	MemberAccess	arg . getOpt		4951411	0					
ANR	4951743	Identifier	arg		4951411	0					
ANR	4951744	Identifier	getOpt		4951411	1					
ANR	4951745	ArgumentList			4951411	1					
ANR	4951746	ExpressionStatement	optno ++	188:3:4759:4766	4951411	1	True				
ANR	4951747	PostIncDecOperationExpression	optno ++		4951411	0					
ANR	4951748	Identifier	optno		4951411	0					
ANR	4951749	IncDec	++		4951411	1					
ANR	4951750	ElseStatement	else		4951411	0					
ANR	4951751	IfStatement	if ( ! arg . ArgIsOpt ( ) && ( optno == 0 ) )		4951411	0					
ANR	4951752	Condition	! arg . ArgIsOpt ( ) && ( optno == 0 )	190:14:4783:4815	4951411	0	True				
ANR	4951753	AndExpression	! arg . ArgIsOpt ( ) && ( optno == 0 )		4951411	0		&&			
ANR	4951754	UnaryOperationExpression	! arg . ArgIsOpt ( )		4951411	0					
ANR	4951755	UnaryOperator	!		4951411	0					
ANR	4951756	CallExpression	arg . ArgIsOpt ( )		4951411	1					
ANR	4951757	Callee	arg . ArgIsOpt		4951411	0					
ANR	4951758	MemberAccess	arg . ArgIsOpt		4951411	0					
ANR	4951759	Identifier	arg		4951411	0					
ANR	4951760	Identifier	ArgIsOpt		4951411	1					
ANR	4951761	ArgumentList			4951411	1					
ANR	4951762	EqualityExpression	optno == 0		4951411	1		==			
ANR	4951763	Identifier	optno		4951411	0					
ANR	4951764	PrimaryExpression	0		4951411	1					
ANR	4951765	CompoundStatement		61:50:1640:1640	4951411	1					
ANR	4951766	ExpressionStatement	opts . m_if_name = arg . getOpt ( )	191:3:4824:4853	4951411	0	True				
ANR	4951767	AssignmentExpression	opts . m_if_name = arg . getOpt ( )		4951411	0		=			
ANR	4951768	MemberAccess	opts . m_if_name		4951411	0					
ANR	4951769	Identifier	opts		4951411	0					
ANR	4951770	Identifier	m_if_name		4951411	1					
ANR	4951771	CallExpression	arg . getOpt ( )		4951411	1					
ANR	4951772	Callee	arg . getOpt		4951411	0					
ANR	4951773	MemberAccess	arg . getOpt		4951411	0					
ANR	4951774	Identifier	arg		4951411	0					
ANR	4951775	Identifier	getOpt		4951411	1					
ANR	4951776	ArgumentList			4951411	1					
ANR	4951777	ExpressionStatement	optno ++	192:3:4858:4865	4951411	1	True				
ANR	4951778	PostIncDecOperationExpression	optno ++		4951411	0					
ANR	4951779	Identifier	optno		4951411	0					
ANR	4951780	IncDec	++		4951411	1					
ANR	4951781	ElseStatement	else		4951411	0					
ANR	4951782	IfStatement	if ( ! arg . ArgIsOpt ( ) && ( optno == 1 ) && arg . isOptBool ( ) )		4951411	0					
ANR	4951783	Condition	! arg . ArgIsOpt ( ) && ( optno == 1 ) && arg . isOptBool ( )	194:14:4882:4935	4951411	0	True				
ANR	4951784	AndExpression	! arg . ArgIsOpt ( ) && ( optno == 1 ) && arg . isOptBool ( )		4951411	0		&&			
ANR	4951785	UnaryOperationExpression	! arg . ArgIsOpt ( )		4951411	0					
ANR	4951786	UnaryOperator	!		4951411	0					
ANR	4951787	CallExpression	arg . ArgIsOpt ( )		4951411	1					
ANR	4951788	Callee	arg . ArgIsOpt		4951411	0					
ANR	4951789	MemberAccess	arg . ArgIsOpt		4951411	0					
ANR	4951790	Identifier	arg		4951411	0					
ANR	4951791	Identifier	ArgIsOpt		4951411	1					
ANR	4951792	ArgumentList			4951411	1					
ANR	4951793	AndExpression	( optno == 1 ) && arg . isOptBool ( )		4951411	1		&&			
ANR	4951794	EqualityExpression	optno == 1		4951411	0		==			
ANR	4951795	Identifier	optno		4951411	0					
ANR	4951796	PrimaryExpression	1		4951411	1					
ANR	4951797	CallExpression	arg . isOptBool ( )		4951411	1					
ANR	4951798	Callee	arg . isOptBool		4951411	0					
ANR	4951799	MemberAccess	arg . isOptBool		4951411	0					
ANR	4951800	Identifier	arg		4951411	0					
ANR	4951801	Identifier	isOptBool		4951411	1					
ANR	4951802	ArgumentList			4951411	1					
ANR	4951803	CompoundStatement		65:71:1760:1760	4951411	1					
ANR	4951804	ExpressionStatement	"arg . getOpt ( opts . m_is_primary , false )"	195:3:4944:4980	4951411	0	True				
ANR	4951805	CallExpression	"arg . getOpt ( opts . m_is_primary , false )"		4951411	0					
ANR	4951806	Callee	arg . getOpt		4951411	0					
ANR	4951807	MemberAccess	arg . getOpt		4951411	0					
ANR	4951808	Identifier	arg		4951411	0					
ANR	4951809	Identifier	getOpt		4951411	1					
ANR	4951810	ArgumentList	opts . m_is_primary		4951411	1					
ANR	4951811	Argument	opts . m_is_primary		4951411	0					
ANR	4951812	MemberAccess	opts . m_is_primary		4951411	0					
ANR	4951813	Identifier	opts		4951411	0					
ANR	4951814	Identifier	m_is_primary		4951411	1					
ANR	4951815	Argument	false		4951411	1					
ANR	4951816	Identifier	false		4951411	0					
ANR	4951817	ExpressionStatement	optno ++	196:3:4985:4992	4951411	1	True				
ANR	4951818	PostIncDecOperationExpression	optno ++		4951411	0					
ANR	4951819	Identifier	optno		4951411	0					
ANR	4951820	IncDec	++		4951411	1					
ANR	4951821	ElseStatement	else		4951411	0					
ANR	4951822	CompoundStatement		69:9:1825:1825	4951411	0					
ANR	4951823	ExpressionStatement	"fprintf ( stderr , ""Unrecognized argument: <%s>\\n"" , arg . Arg ( ) )"	199:3:5009:5069	4951411	0	True				
ANR	4951824	CallExpression	"fprintf ( stderr , ""Unrecognized argument: <%s>\\n"" , arg . Arg ( ) )"		4951411	0					
ANR	4951825	Callee	fprintf		4951411	0					
ANR	4951826	Identifier	fprintf		4951411	0					
ANR	4951827	ArgumentList	stderr		4951411	1					
ANR	4951828	Argument	stderr		4951411	0					
ANR	4951829	Identifier	stderr		4951411	0					
ANR	4951830	Argument	"""Unrecognized argument: <%s>\\n"""		4951411	1					
ANR	4951831	PrimaryExpression	"""Unrecognized argument: <%s>\\n"""		4951411	0					
ANR	4951832	Argument	arg . Arg ( )		4951411	2					
ANR	4951833	CallExpression	arg . Arg ( )		4951411	0					
ANR	4951834	Callee	arg . Arg		4951411	0					
ANR	4951835	MemberAccess	arg . Arg		4951411	0					
ANR	4951836	Identifier	arg		4951411	0					
ANR	4951837	Identifier	Arg		4951411	1					
ANR	4951838	ArgumentList			4951411	1					
ANR	4951839	ExpressionStatement	"printf ( ""%s"" , usage )"	200:3:5074:5093	4951411	1	True				
ANR	4951840	CallExpression	"printf ( ""%s"" , usage )"		4951411	0					
ANR	4951841	Callee	printf		4951411	0					
ANR	4951842	Identifier	printf		4951411	0					
ANR	4951843	ArgumentList	"""%s"""		4951411	1					
ANR	4951844	Argument	"""%s"""		4951411	0					
ANR	4951845	PrimaryExpression	"""%s"""		4951411	0					
ANR	4951846	Argument	usage		4951411	1					
ANR	4951847	Identifier	usage		4951411	0					
ANR	4951848	ReturnStatement	return true ;	201:3:5098:5109	4951411	2	True				
ANR	4951849	Identifier	true		4951411	0					
ANR	4951850	ReturnStatement	return false ;	205:1:5120:5132	4951411	18	True				
ANR	4951851	Identifier	false		4951411	0					
ANR	4951852	ReturnType	bool		4951411	1					
ANR	4951853	Identifier	CheckArgs		4951411	2					
ANR	4951854	ParameterList	"int argc , const char * * argv , Options & opts"		4951411	3					
ANR	4951855	Parameter	int argc	129:10:3134:3141	4951411	0	True				
ANR	4951856	ParameterType	int		4951411	0					
ANR	4951857	Identifier	argc		4951411	1					
ANR	4951858	Parameter	const char * * argv	129:20:3144:3160	4951411	1	True				
ANR	4951859	ParameterType	const char * *		4951411	0					
ANR	4951860	Identifier	argv		4951411	1					
ANR	4951861	Parameter	Options & opts	129:39:3163:3175	4951411	2	True				
ANR	4951862	ParameterType	Options &		4951411	0					
ANR	4951863	Identifier	opts		4951411	1					
ANR	4951864	CFGEntryNode	ENTRY		4951411		True				
ANR	4951865	CFGExitNode	EXIT		4951411		True				
ANR	4951866	Symbol	arg . Match		4951411						
ANR	4951867	Symbol	usage		4951411						
ANR	4951868	Symbol	arg . isOptBool		4951411						
ANR	4951869	Symbol	argv		4951411						
ANR	4951870	Symbol	opts . m_verbosity		4951411						
ANR	4951871	Symbol	opts		4951411						
ANR	4951872	Symbol	arg		4951411						
ANR	4951873	Symbol	opts . m_if_name		4951411						
ANR	4951874	Symbol	argc		4951411						
ANR	4951875	Symbol	NULL		4951411						
ANR	4951876	Symbol	optno		4951411						
ANR	4951877	Symbol	false		4951411						
ANR	4951878	Symbol	index		4951411						
ANR	4951879	Symbol	arg . Error		4951411						
ANR	4951880	Symbol	__DATE__		4951411						
ANR	4951881	Symbol	arg . isOptInt		4951411						
ANR	4951882	Symbol	stderr		4951411						
ANR	4951883	Symbol	arg . ArgIsOpt		4951411						
ANR	4951884	Symbol	opts . m_address		4951411						
ANR	4951885	Symbol	arg . ConsumeOpt		4951411						
ANR	4951886	Symbol	arg . Arg		4951411						
ANR	4951887	Symbol	arg . hasOpt		4951411						
ANR	4951888	Symbol	opts . m_is_primary		4951411						
ANR	4951889	Symbol	true		4951411						
ANR	4951890	Symbol	VERSION		4951411						
ANR	4951891	Symbol	arg . getOpt		4951411						
