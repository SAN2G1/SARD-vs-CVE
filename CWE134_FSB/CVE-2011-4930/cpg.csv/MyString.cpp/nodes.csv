command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	244065	File	data/converged/CVE-2011-4930_htcondor/MyString.cpp								
ANR	244066	Function	MyString :: MyString	35:0:1174:1219							
ANR	244067	FunctionDef	MyString :: MyString ()		244066	0					
ANR	244068	CompoundStatement		36:0:1196:1219	244066	0					
ANR	244069	ExpressionStatement	init ( )	37:1:1199:1205	244066	0	True				
ANR	244070	CallExpression	init ( )		244066	0					
ANR	244071	Callee	init		244066	0					
ANR	244072	Identifier	init		244066	0					
ANR	244073	ArgumentList			244066	1					
ANR	244074	ReturnStatement	return ;	38:4:1211:1217	244066	1	True				
ANR	244075	Identifier	MyString :: MyString		244066	1					
ANR	244076	ParameterList			244066	2					
ANR	244077	CFGEntryNode	ENTRY		244066		True				
ANR	244078	CFGExitNode	EXIT		244066		True				
ANR	244079	Function	MyString :: MyString	41:0:1224:1275							
ANR	244080	FunctionDef	MyString :: MyString (int i)		244079	0					
ANR	244081	CompoundStatement		42:0:1251:1275	244079	0					
ANR	244082	ExpressionStatement	init ( )	43:1:1254:1260	244079	0	True				
ANR	244083	CallExpression	init ( )		244079	0					
ANR	244084	Callee	init		244079	0					
ANR	244085	Identifier	init		244079	0					
ANR	244086	ArgumentList			244079	1					
ANR	244087	ExpressionStatement	* this += i	44:1:1263:1273	244079	1	True				
ANR	244088	AssignmentExpression	* this += i		244079	0		+=			
ANR	244089	UnaryOperationExpression	* this		244079	0					
ANR	244090	UnaryOperator	*		244079	0					
ANR	244091	Identifier	this		244079	1					
ANR	244092	Identifier	i		244079	1					
ANR	244093	Identifier	MyString :: MyString		244079	1					
ANR	244094	ParameterList	int i		244079	2					
ANR	244095	Parameter	int i	41:19:1243:1247	244079	0	True				
ANR	244096	ParameterType	int		244079	0					
ANR	244097	Identifier	i		244079	1					
ANR	244098	CFGEntryNode	ENTRY		244079		True				
ANR	244099	CFGExitNode	EXIT		244079		True				
ANR	244100	Symbol	* this		244079						
ANR	244101	Symbol	this		244079						
ANR	244102	Symbol	i		244079						
ANR	244103	Function	MyString :: MyString	47:0:1279:1367							
ANR	244104	FunctionDef	MyString :: MyString (const char * S)		244103	0					
ANR	244105	CompoundStatement		48:0:1314:1367	244103	0					
ANR	244106	ExpressionStatement	init ( )	49:1:1317:1323	244103	0	True				
ANR	244107	CallExpression	init ( )		244103	0					
ANR	244108	Callee	init		244103	0					
ANR	244109	Identifier	init		244103	0					
ANR	244110	ArgumentList			244103	1					
ANR	244111	ExpressionStatement	* this = S	50:4:1329:1336	244103	1	True				
ANR	244112	AssignmentExpression	* this = S		244103	0		=			
ANR	244113	UnaryOperationExpression	* this		244103	0					
ANR	244114	UnaryOperator	*		244103	0					
ANR	244115	Identifier	this		244103	1					
ANR	244116	Identifier	S		244103	1					
ANR	244117	Identifier	MyString :: MyString		244103	1					
ANR	244118	ParameterList	const char * S		244103	2					
ANR	244119	Parameter	const char * S	47:19:1298:1310	244103	0	True				
ANR	244120	ParameterType	const char *		244103	0					
ANR	244121	Identifier	S		244103	1					
ANR	244122	CFGEntryNode	ENTRY		244103		True				
ANR	244123	CFGExitNode	EXIT		244103		True				
ANR	244124	Symbol	* this		244103						
ANR	244125	Symbol	S		244103						
ANR	244126	Symbol	this		244103						
ANR	244127	Function	MyString :: MyString	53:0:1371:1466							
ANR	244128	FunctionDef	MyString :: MyString (const std :: string & S)		244127	0					
ANR	244129	CompoundStatement		54:0:1413:1466	244127	0					
ANR	244130	ExpressionStatement	init ( )	55:1:1416:1422	244127	0	True				
ANR	244131	CallExpression	init ( )		244127	0					
ANR	244132	Callee	init		244127	0					
ANR	244133	Identifier	init		244127	0					
ANR	244134	ArgumentList			244127	1					
ANR	244135	ExpressionStatement	* this = S	56:4:1428:1435	244127	1	True				
ANR	244136	AssignmentExpression	* this = S		244127	0		=			
ANR	244137	UnaryOperationExpression	* this		244127	0					
ANR	244138	UnaryOperator	*		244127	0					
ANR	244139	Identifier	this		244127	1					
ANR	244140	Identifier	S		244127	1					
ANR	244141	Identifier	MyString :: MyString		244127	1					
ANR	244142	ParameterList	const std :: string & S		244127	2					
ANR	244143	Parameter	const std :: string & S	53:19:1390:1409	244127	0	True				
ANR	244144	ParameterType	const std :: string &		244127	0					
ANR	244145	Identifier	S		244127	1					
ANR	244146	CFGEntryNode	ENTRY		244127		True				
ANR	244147	CFGExitNode	EXIT		244127		True				
ANR	244148	Symbol	* this		244127						
ANR	244149	Symbol	S		244127						
ANR	244150	Symbol	this		244127						
ANR	244151	Function	MyString :: MyString	59:0:1469:1561							
ANR	244152	FunctionDef	MyString :: MyString (const MyString & S)		244151	0					
ANR	244153	CompoundStatement		60:0:1508:1561	244151	0					
ANR	244154	ExpressionStatement	init ( )	61:1:1511:1517	244151	0	True				
ANR	244155	CallExpression	init ( )		244151	0					
ANR	244156	Callee	init		244151	0					
ANR	244157	Identifier	init		244151	0					
ANR	244158	ArgumentList			244151	1					
ANR	244159	ExpressionStatement	* this = S	62:4:1523:1530	244151	1	True				
ANR	244160	AssignmentExpression	* this = S		244151	0		=			
ANR	244161	UnaryOperationExpression	* this		244151	0					
ANR	244162	UnaryOperator	*		244151	0					
ANR	244163	Identifier	this		244151	1					
ANR	244164	Identifier	S		244151	1					
ANR	244165	Identifier	MyString :: MyString		244151	1					
ANR	244166	ParameterList	const MyString & S		244151	2					
ANR	244167	Parameter	const MyString & S	59:19:1488:1504	244151	0	True				
ANR	244168	ParameterType	const MyString &		244151	0					
ANR	244169	Identifier	S		244151	1					
ANR	244170	CFGEntryNode	ENTRY		244151		True				
ANR	244171	CFGExitNode	EXIT		244151		True				
ANR	244172	Symbol	* this		244151						
ANR	244173	Symbol	S		244151						
ANR	244174	Symbol	this		244151						
ANR	244175	Function	MyString :: ~MyString	65:0:1564:1712							
ANR	244176	FunctionDef	MyString :: ~MyString ()		244175	0					
ANR	244177	CompoundStatement		66:0:1587:1712	244175	0					
ANR	244178	IfStatement	if ( Data )		244175	0					
ANR	244179	Condition	Data	67:8:1597:1600	244175	0	True				
ANR	244180	Identifier	Data		244175	0					
ANR	244181	CompoundStatement		2:14:15:15	244175	1					
ANR	244182	Statement	delete	68:2:1607:1612	244175	0	True				
ANR	244183	Statement	[	68:8:1613:1613	244175	1	True				
ANR	244184	Statement	]	68:9:1614:1614	244175	2	True				
ANR	244185	ExpressionStatement	Data	68:11:1616:1620	244175	3	True				
ANR	244186	Identifier	Data		244175	0					
ANR	244187	Statement	delete	70:1:1626:1631	244175	1	True				
ANR	244188	Statement	[	70:8:1633:1633	244175	2	True				
ANR	244189	Statement	]	70:9:1634:1634	244175	3	True				
ANR	244190	ExpressionStatement	tokenBuf	70:11:1636:1644	244175	4	True				
ANR	244191	Identifier	tokenBuf		244175	0					
ANR	244192	ExpressionStatement	init ( )	71:1:1647:1653	244175	5	True				
ANR	244193	CallExpression	init ( )		244175	0					
ANR	244194	Callee	init		244175	0					
ANR	244195	Identifier	init		244175	0					
ANR	244196	ArgumentList			244175	1					
ANR	244197	Identifier	MyString :: ~MyString		244175	1					
ANR	244198	ParameterList			244175	2					
ANR	244199	CFGEntryNode	ENTRY		244175		True				
ANR	244200	CFGExitNode	EXIT		244175		True				
ANR	244201	Symbol	Data		244175						
ANR	244202	Function	std :: string	75:19:1735:1800							
ANR	244203	FunctionDef	std :: string ()		244202	0					
ANR	244204	CompoundStatement		76:0:1749:1800	244202	0					
ANR	244205	IdentifierDeclStatement	std :: string r = this -> Value ( ) ;	77:4:1755:1784	244202	0	True				
ANR	244206	IdentifierDecl	r = this -> Value ( )		244202	0					
ANR	244207	IdentifierDeclType	std :: string		244202	0					
ANR	244208	Identifier	r		244202	1					
ANR	244209	AssignmentExpression	r = this -> Value ( )		244202	2		=			
ANR	244210	Identifier	r		244202	0					
ANR	244211	CallExpression	this -> Value ( )		244202	1					
ANR	244212	Callee	this -> Value		244202	0					
ANR	244213	PtrMemberAccess	this -> Value		244202	0					
ANR	244214	Identifier	this		244202	0					
ANR	244215	Identifier	Value		244202	1					
ANR	244216	ArgumentList			244202	1					
ANR	244217	ReturnStatement	return r ;	78:4:1790:1798	244202	1	True				
ANR	244218	Identifier	r		244202	0					
ANR	244219	Identifier	std :: string		244202	1					
ANR	244220	ParameterList			244202	2					
ANR	244221	CFGEntryNode	ENTRY		244202		True				
ANR	244222	CFGExitNode	EXIT		244202		True				
ANR	244223	Symbol	* this		244202						
ANR	244224	Symbol	r		244202						
ANR	244225	Symbol	this		244202						
ANR	244226	Symbol	this -> Value		244202						
ANR	244227	Function	operator [ ]	88:10:2015:2110							
ANR	244228	FunctionDef	operator [ ] (int pos)		244227	0					
ANR	244229	CompoundStatement		89:0:2042:2110	244227	0					
ANR	244230	IfStatement	if ( pos >= Len || pos < 0 )		244227	0					
ANR	244231	Condition	pos >= Len || pos < 0	90:8:2052:2072	244227	0	True				
ANR	244232	OrExpression	pos >= Len || pos < 0		244227	0		||			
ANR	244233	RelationalExpression	pos >= Len		244227	0		>=			
ANR	244234	Identifier	pos		244227	0					
ANR	244235	Identifier	Len		244227	1					
ANR	244236	RelationalExpression	pos < 0		244227	1		<			
ANR	244237	Identifier	pos		244227	0					
ANR	244238	PrimaryExpression	0		244227	1					
ANR	244239	ReturnStatement	return '\\0' ;	90:31:2075:2086	244227	1	True				
ANR	244240	PrimaryExpression	'\\0'		244227	0					
ANR	244241	ReturnStatement	return Data [ pos ] ;	91:4:2092:2108	244227	1	True				
ANR	244242	ArrayIndexing	Data [ pos ]		244227	0					
ANR	244243	Identifier	Data		244227	0					
ANR	244244	Identifier	pos		244227	1					
ANR	244245	Identifier	operator [ ]		244227	1					
ANR	244246	ParameterList	int pos		244227	2					
ANR	244247	Parameter	int pos	88:21:2026:2032	244227	0	True				
ANR	244248	ParameterType	int		244227	0					
ANR	244249	Identifier	pos		244227	1					
ANR	244250	CFGEntryNode	ENTRY		244227		True				
ANR	244251	CFGExitNode	EXIT		244227		True				
ANR	244252	Symbol	Len		244227						
ANR	244253	Symbol	pos		244227						
ANR	244254	Symbol	Data		244227						
ANR	244255	Symbol	* pos		244227						
ANR	244256	Symbol	* Data		244227						
ANR	244257	Function	operator [ ]	95:10:2135:2242							
ANR	244258	FunctionDef	operator [ ] (int pos)		244257	0					
ANR	244259	CompoundStatement		96:0:2155:2242	244257	0					
ANR	244260	IfStatement	if ( pos >= Len || pos < 0 )		244257	0					
ANR	244261	Condition	pos >= Len || pos < 0	97:5:2162:2182	244257	0	True				
ANR	244262	OrExpression	pos >= Len || pos < 0		244257	0		||			
ANR	244263	RelationalExpression	pos >= Len		244257	0		>=			
ANR	244264	Identifier	pos		244257	0					
ANR	244265	Identifier	Len		244257	1					
ANR	244266	RelationalExpression	pos < 0		244257	1		<			
ANR	244267	Identifier	pos		244257	0					
ANR	244268	PrimaryExpression	0		244257	1					
ANR	244269	CompoundStatement		2:28:29:29	244257	1					
ANR	244270	ExpressionStatement	dummy = '\\0'	98:2:2189:2201	244257	0	True				
ANR	244271	AssignmentExpression	dummy = '\\0'		244257	0		=			
ANR	244272	Identifier	dummy		244257	0					
ANR	244273	PrimaryExpression	'\\0'		244257	1					
ANR	244274	ReturnStatement	return dummy ;	99:2:2205:2217	244257	1	True				
ANR	244275	Identifier	dummy		244257	0					
ANR	244276	ReturnStatement	return Data [ pos ] ;	101:1:2224:2240	244257	1	True				
ANR	244277	ArrayIndexing	Data [ pos ]		244257	0					
ANR	244278	Identifier	Data		244257	0					
ANR	244279	Identifier	pos		244257	1					
ANR	244280	Identifier	operator [ ]		244257	1					
ANR	244281	ParameterList	int pos		244257	2					
ANR	244282	Parameter	int pos	95:21:2146:2152	244257	0	True				
ANR	244283	ParameterType	int		244257	0					
ANR	244284	Identifier	pos		244257	1					
ANR	244285	CFGEntryNode	ENTRY		244257		True				
ANR	244286	CFGExitNode	EXIT		244257		True				
ANR	244287	Symbol	dummy		244257						
ANR	244288	Symbol	Len		244257						
ANR	244289	Symbol	pos		244257						
ANR	244290	Symbol	Data		244257						
ANR	244291	Symbol	* Data		244257						
ANR	244292	Symbol	* pos		244257						
ANR	244293	Function	MyString :: setChar	104:0:2245:2412							
ANR	244294	FunctionDef	"MyString :: setChar (int pos , char value)"		244293	0					
ANR	244295	CompoundStatement		106:0:2289:2412	244293	0					
ANR	244296	IfStatement	if ( pos >= 0 && pos < Len )		244293	0					
ANR	244297	Condition	pos >= 0 && pos < Len	107:6:2297:2317	244293	0	True				
ANR	244298	AndExpression	pos >= 0 && pos < Len		244293	0		&&			
ANR	244299	RelationalExpression	pos >= 0		244293	0		>=			
ANR	244300	Identifier	pos		244293	0					
ANR	244301	PrimaryExpression	0		244293	1					
ANR	244302	RelationalExpression	pos < Len		244293	1		<			
ANR	244303	Identifier	pos		244293	0					
ANR	244304	Identifier	Len		244293	1					
ANR	244305	CompoundStatement		2:30:31:31	244293	1					
ANR	244306	ExpressionStatement	Data [ pos ] = value	108:2:2325:2342	244293	0	True				
ANR	244307	AssignmentExpression	Data [ pos ] = value		244293	0		=			
ANR	244308	ArrayIndexing	Data [ pos ]		244293	0					
ANR	244309	Identifier	Data		244293	0					
ANR	244310	Identifier	pos		244293	1					
ANR	244311	Identifier	value		244293	1					
ANR	244312	IfStatement	if ( value == '\\0' )		244293	1					
ANR	244313	Condition	value == '\\0'	109:7:2351:2363	244293	0	True				
ANR	244314	EqualityExpression	value == '\\0'		244293	0		==			
ANR	244315	Identifier	value		244293	0					
ANR	244316	PrimaryExpression	'\\0'		244293	1					
ANR	244317	CompoundStatement		4:23:77:77	244293	1					
ANR	244318	ExpressionStatement	Len = pos	110:3:2372:2381	244293	0	True				
ANR	244319	AssignmentExpression	Len = pos		244293	0		=			
ANR	244320	Identifier	Len		244293	0					
ANR	244321	Identifier	pos		244293	1					
ANR	244322	ElseStatement	else		244293	0					
ANR	244323	CompoundStatement		7:8:105:105	244293	0					
ANR	244324	ReturnType	void		244293	1					
ANR	244325	Identifier	MyString :: setChar		244293	2					
ANR	244326	ParameterList	"int pos , char value"		244293	3					
ANR	244327	Parameter	int pos	105:18:2268:2274	244293	0	True				
ANR	244328	ParameterType	int		244293	0					
ANR	244329	Identifier	pos		244293	1					
ANR	244330	Parameter	char value	105:27:2277:2286	244293	1	True				
ANR	244331	ParameterType	char		244293	0					
ANR	244332	Identifier	value		244293	1					
ANR	244333	CFGEntryNode	ENTRY		244293		True				
ANR	244334	CFGExitNode	EXIT		244293		True				
ANR	244335	Symbol	Len		244293						
ANR	244336	Symbol	pos		244293						
ANR	244337	Symbol	Data		244293						
ANR	244338	Symbol	value		244293						
ANR	244339	Symbol	* Data		244293						
ANR	244340	Symbol	* pos		244293						
ANR	244341	Function	operator =	124:0:2611:2692							
ANR	244342	FunctionDef	operator = (const MyString & S)		244341	0					
ANR	244343	CompoundStatement		125:0:2641:2692	244341	0					
ANR	244344	ExpressionStatement	"assign_str ( S . Value ( ) , S . Len )"	126:1:2644:2672	244341	0	True				
ANR	244345	CallExpression	"assign_str ( S . Value ( ) , S . Len )"		244341	0					
ANR	244346	Callee	assign_str		244341	0					
ANR	244347	Identifier	assign_str		244341	0					
ANR	244348	ArgumentList	S . Value ( )		244341	1					
ANR	244349	Argument	S . Value ( )		244341	0					
ANR	244350	CallExpression	S . Value ( )		244341	0					
ANR	244351	Callee	S . Value		244341	0					
ANR	244352	MemberAccess	S . Value		244341	0					
ANR	244353	Identifier	S		244341	0					
ANR	244354	Identifier	Value		244341	1					
ANR	244355	ArgumentList			244341	1					
ANR	244356	Argument	S . Len		244341	1					
ANR	244357	MemberAccess	S . Len		244341	0					
ANR	244358	Identifier	S		244341	0					
ANR	244359	Identifier	Len		244341	1					
ANR	244360	ReturnStatement	return * this ;	127:4:2678:2690	244341	1	True				
ANR	244361	UnaryOperationExpression	* this		244341	0					
ANR	244362	UnaryOperator	*		244341	0					
ANR	244363	Identifier	this		244341	1					
ANR	244364	Identifier	operator =		244341	1					
ANR	244365	ParameterList	const MyString & S		244341	2					
ANR	244366	Parameter	const MyString & S	124:10:2621:2637	244341	0	True				
ANR	244367	ParameterType	const MyString &		244341	0					
ANR	244368	Identifier	S		244341	1					
ANR	244369	CFGEntryNode	ENTRY		244341		True				
ANR	244370	CFGExitNode	EXIT		244341		True				
ANR	244371	Symbol	* this		244341						
ANR	244372	Symbol	S		244341						
ANR	244373	Symbol	this		244341						
ANR	244374	Symbol	S . Value		244341						
ANR	244375	Symbol	S . Len		244341						
ANR	244376	Function	operator =	131:0:2716:2805							
ANR	244377	FunctionDef	operator = (const std :: string & S)		244376	0					
ANR	244378	CompoundStatement		132:0:2749:2805	244376	0					
ANR	244379	ExpressionStatement	"assign_str ( S . c_str ( ) , S . length ( ) )"	133:1:2752:2785	244376	0	True				
ANR	244380	CallExpression	"assign_str ( S . c_str ( ) , S . length ( ) )"		244376	0					
ANR	244381	Callee	assign_str		244376	0					
ANR	244382	Identifier	assign_str		244376	0					
ANR	244383	ArgumentList	S . c_str ( )		244376	1					
ANR	244384	Argument	S . c_str ( )		244376	0					
ANR	244385	CallExpression	S . c_str ( )		244376	0					
ANR	244386	Callee	S . c_str		244376	0					
ANR	244387	MemberAccess	S . c_str		244376	0					
ANR	244388	Identifier	S		244376	0					
ANR	244389	Identifier	c_str		244376	1					
ANR	244390	ArgumentList			244376	1					
ANR	244391	Argument	S . length ( )		244376	1					
ANR	244392	CallExpression	S . length ( )		244376	0					
ANR	244393	Callee	S . length		244376	0					
ANR	244394	MemberAccess	S . length		244376	0					
ANR	244395	Identifier	S		244376	0					
ANR	244396	Identifier	length		244376	1					
ANR	244397	ArgumentList			244376	1					
ANR	244398	ReturnStatement	return * this ;	134:4:2791:2803	244376	1	True				
ANR	244399	UnaryOperationExpression	* this		244376	0					
ANR	244400	UnaryOperator	*		244376	0					
ANR	244401	Identifier	this		244376	1					
ANR	244402	Identifier	operator =		244376	1					
ANR	244403	ParameterList	const std :: string & S		244376	2					
ANR	244404	Parameter	const std :: string & S	131:10:2726:2745	244376	0	True				
ANR	244405	ParameterType	const std :: string &		244376	0					
ANR	244406	Identifier	S		244376	1					
ANR	244407	CFGEntryNode	ENTRY		244376		True				
ANR	244408	CFGExitNode	EXIT		244376		True				
ANR	244409	Symbol	* this		244376						
ANR	244410	Symbol	S		244376						
ANR	244411	Symbol	this		244376						
ANR	244412	Symbol	S . c_str		244376						
ANR	244413	Symbol	S . length		244376						
ANR	244414	Function	operator =	138:10:2829:2932							
ANR	244415	FunctionDef	operator = (const char * s)		244414	0					
ANR	244416	CompoundStatement		139:0:2857:2932	244414	0					
ANR	244417	IdentifierDeclStatement	int s_len = s ? strlen ( s ) : 0 ;	140:1:2860:2889	244414	0	True				
ANR	244418	IdentifierDecl	s_len = s ? strlen ( s ) : 0		244414	0					
ANR	244419	IdentifierDeclType	int		244414	0					
ANR	244420	Identifier	s_len		244414	1					
ANR	244421	AssignmentExpression	s_len = s ? strlen ( s ) : 0		244414	2		=			
ANR	244422	Identifier	s_len		244414	0					
ANR	244423	ConditionalExpression	s ? strlen ( s ) : 0		244414	1					
ANR	244424	Condition	s		244414	0					
ANR	244425	Identifier	s		244414	0					
ANR	244426	CallExpression	strlen ( s )		244414	1					
ANR	244427	Callee	strlen		244414	0					
ANR	244428	Identifier	strlen		244414	0					
ANR	244429	ArgumentList	s		244414	1					
ANR	244430	Argument	s		244414	0					
ANR	244431	Identifier	s		244414	0					
ANR	244432	PrimaryExpression	0		244414	2					
ANR	244433	ExpressionStatement	"assign_str ( s , s_len )"	141:1:2892:2912	244414	1	True				
ANR	244434	CallExpression	"assign_str ( s , s_len )"		244414	0					
ANR	244435	Callee	assign_str		244414	0					
ANR	244436	Identifier	assign_str		244414	0					
ANR	244437	ArgumentList	s		244414	1					
ANR	244438	Argument	s		244414	0					
ANR	244439	Identifier	s		244414	0					
ANR	244440	Argument	s_len		244414	1					
ANR	244441	Identifier	s_len		244414	0					
ANR	244442	ReturnStatement	return * this ;	142:4:2918:2930	244414	2	True				
ANR	244443	UnaryOperationExpression	* this		244414	0					
ANR	244444	UnaryOperator	*		244414	0					
ANR	244445	Identifier	this		244414	1					
ANR	244446	Identifier	operator =		244414	1					
ANR	244447	ParameterList	const char * s		244414	2					
ANR	244448	Parameter	const char * s	138:21:2840:2852	244414	0	True				
ANR	244449	ParameterType	const char *		244414	0					
ANR	244450	Identifier	s		244414	1					
ANR	244451	CFGEntryNode	ENTRY		244414		True				
ANR	244452	CFGExitNode	EXIT		244414		True				
ANR	244453	Symbol	* this		244414						
ANR	244454	Symbol	strlen		244414						
ANR	244455	Symbol	s		244414						
ANR	244456	Symbol	s_len		244414						
ANR	244457	Symbol	this		244414						
ANR	244458	Function	MyString :: assign_str	145:0:2935:3237							
ANR	244459	FunctionDef	"MyString :: assign_str (const char * s , int s_len)"		244458	0					
ANR	244460	CompoundStatement		147:0:2990:3237	244458	0					
ANR	244461	IfStatement	if ( s_len < 1 )		244458	0					
ANR	244462	Condition	s_len < 1	148:5:2997:3005	244458	0	True				
ANR	244463	RelationalExpression	s_len < 1		244458	0		<			
ANR	244464	Identifier	s_len		244458	0					
ANR	244465	PrimaryExpression	1		244458	1					
ANR	244466	CompoundStatement		2:17:18:18	244458	1					
ANR	244467	IfStatement	if ( Data )		244458	0					
ANR	244468	Condition	Data	149:6:3017:3020	244458	0	True				
ANR	244469	Identifier	Data		244458	0					
ANR	244470	CompoundStatement		3:13:33:33	244458	1					
ANR	244471	ExpressionStatement	Data [ 0 ] = '\\0'	150:3:3029:3043	244458	0	True				
ANR	244472	AssignmentExpression	Data [ 0 ] = '\\0'		244458	0		=			
ANR	244473	ArrayIndexing	Data [ 0 ]		244458	0					
ANR	244474	Identifier	Data		244458	0					
ANR	244475	PrimaryExpression	0		244458	1					
ANR	244476	PrimaryExpression	'\\0'		244458	1					
ANR	244477	ExpressionStatement	Len = 0	151:3:3048:3055	244458	1	True				
ANR	244478	AssignmentExpression	Len = 0		244458	0		=			
ANR	244479	Identifier	Len		244458	0					
ANR	244480	PrimaryExpression	0		244458	1					
ANR	244481	ElseStatement	else		244458	0					
ANR	244482	CompoundStatement		7:8:78:78	244458	0					
ANR	244483	IfStatement	if ( s_len > capacity )		244458	0					
ANR	244484	Condition	s_len > capacity	154:9:3080:3095	244458	0	True				
ANR	244485	RelationalExpression	s_len > capacity		244458	0		>			
ANR	244486	Identifier	s_len		244458	0					
ANR	244487	Identifier	capacity		244458	1					
ANR	244488	CompoundStatement		8:28:108:108	244458	1					
ANR	244489	IfStatement	if ( Data )		244458	0					
ANR	244490	Condition	Data	155:7:3108:3111	244458	0	True				
ANR	244491	Identifier	Data		244458	0					
ANR	244492	CompoundStatement		9:14:124:124	244458	1					
ANR	244493	Statement	delete	156:4:3121:3126	244458	0	True				
ANR	244494	Statement	[	156:10:3127:3127	244458	1	True				
ANR	244495	Statement	]	156:11:3128:3128	244458	2	True				
ANR	244496	ExpressionStatement	Data	156:13:3130:3134	244458	3	True				
ANR	244497	Identifier	Data		244458	0					
ANR	244498	ExpressionStatement	capacity = s_len	158:3:3144:3160	244458	1	True				
ANR	244499	AssignmentExpression	capacity = s_len		244458	0		=			
ANR	244500	Identifier	capacity		244458	0					
ANR	244501	Identifier	s_len		244458	1					
ANR	244502	ExpressionStatement	Data = new char [ capacity + 1 ]	159:3:3165:3192	244458	2	True				
ANR	244503	AssignmentExpression	Data = new char [ capacity + 1 ]		244458	0		=			
ANR	244504	Identifier	Data		244458	0					
ANR	244505	AdditiveExpression	capacity + 1		244458	1		+			
ANR	244506	Identifier	capacity		244458	0					
ANR	244507	PrimaryExpression	1		244458	1					
ANR	244508	ExpressionStatement	"strcpy ( Data , s )"	161:2:3200:3217	244458	1	True				
ANR	244509	CallExpression	"strcpy ( Data , s )"		244458	0					
ANR	244510	Callee	strcpy		244458	0					
ANR	244511	Identifier	strcpy		244458	0					
ANR	244512	ArgumentList	Data		244458	1					
ANR	244513	Argument	Data		244458	0					
ANR	244514	Identifier	Data		244458	0					
ANR	244515	Argument	s		244458	1					
ANR	244516	Identifier	s		244458	0					
ANR	244517	ExpressionStatement	Len = s_len	162:2:3221:3232	244458	2	True				
ANR	244518	AssignmentExpression	Len = s_len		244458	0		=			
ANR	244519	Identifier	Len		244458	0					
ANR	244520	Identifier	s_len		244458	1					
ANR	244521	ReturnType	void		244458	1					
ANR	244522	Identifier	MyString :: assign_str		244458	2					
ANR	244523	ParameterList	"const char * s , int s_len"		244458	3					
ANR	244524	Parameter	const char * s	146:22:2962:2974	244458	0	True				
ANR	244525	ParameterType	const char *		244458	0					
ANR	244526	Identifier	s		244458	1					
ANR	244527	Parameter	int s_len	146:37:2977:2985	244458	1	True				
ANR	244528	ParameterType	int		244458	0					
ANR	244529	Identifier	s_len		244458	1					
ANR	244530	CFGEntryNode	ENTRY		244458		True				
ANR	244531	CFGExitNode	EXIT		244458		True				
ANR	244532	Symbol	s		244458						
ANR	244533	Symbol	Len		244458						
ANR	244534	Symbol	s_len		244458						
ANR	244535	Symbol	Data		244458						
ANR	244536	Symbol	* Data		244458						
ANR	244537	Symbol	capacity		244458						
ANR	244538	Function	MyString :: reserve	172:0:3412:4028							
ANR	244539	FunctionDef	MyString :: reserve (const int sz)		244538	0					
ANR	244540	CompoundStatement		174:0:3453:4028	244538	0					
ANR	244541	IfStatement	if ( sz < 0 )		244538	0					
ANR	244542	Condition	sz < 0	175:5:3460:3465	244538	0	True				
ANR	244543	RelationalExpression	sz < 0		244538	0		<			
ANR	244544	Identifier	sz		244538	0					
ANR	244545	PrimaryExpression	0		244538	1					
ANR	244546	CompoundStatement		2:13:14:14	244538	1					
ANR	244547	ReturnStatement	return false ;	176:2:3472:3484	244538	0	True				
ANR	244548	Identifier	false		244538	0					
ANR	244549	IdentifierDeclStatement	char * buf = new char [ sz + 1 ] ;	178:4:3493:3521	244538	1	True				
ANR	244550	IdentifierDecl	* buf = new char [ sz + 1 ]		244538	0					
ANR	244551	IdentifierDeclType	char *		244538	0					
ANR	244552	Identifier	buf		244538	1					
ANR	244553	AssignmentExpression	* buf = new char [ sz + 1 ]		244538	2		=			
ANR	244554	Identifier	buf		244538	0					
ANR	244555	AdditiveExpression	sz + 1		244538	1		+			
ANR	244556	Identifier	sz		244538	0					
ANR	244557	PrimaryExpression	1		244538	1					
ANR	244558	IfStatement	if ( ! buf )		244538	2					
ANR	244559	Condition	! buf	179:8:3531:3534	244538	0	True				
ANR	244560	UnaryOperationExpression	! buf		244538	0					
ANR	244561	UnaryOperator	!		244538	0					
ANR	244562	Identifier	buf		244538	1					
ANR	244563	CompoundStatement		6:14:83:83	244538	1					
ANR	244564	ReturnStatement	return false ;	180:2:3541:3553	244538	0	True				
ANR	244565	Identifier	false		244538	0					
ANR	244566	ExpressionStatement	buf [ 0 ] = '\\0'	182:4:3562:3575	244538	3	True				
ANR	244567	AssignmentExpression	buf [ 0 ] = '\\0'		244538	0		=			
ANR	244568	ArrayIndexing	buf [ 0 ]		244538	0					
ANR	244569	Identifier	buf		244538	0					
ANR	244570	PrimaryExpression	0		244538	1					
ANR	244571	PrimaryExpression	'\\0'		244538	1					
ANR	244572	IfStatement	if ( Data )		244538	4					
ANR	244573	Condition	Data	183:8:3585:3588	244538	0	True				
ANR	244574	Identifier	Data		244538	0					
ANR	244575	CompoundStatement		12:3:203:228	244538	1					
ANR	244576	IdentifierDeclStatement	"int newlen = MIN ( sz , Len ) ;"	185:3:3657:3682	244538	0	True				
ANR	244577	IdentifierDecl	"newlen = MIN ( sz , Len )"		244538	0					
ANR	244578	IdentifierDeclType	int		244538	0					
ANR	244579	Identifier	newlen		244538	1					
ANR	244580	AssignmentExpression	"newlen = MIN ( sz , Len )"		244538	2		=			
ANR	244581	Identifier	newlen		244538	0					
ANR	244582	CallExpression	"MIN ( sz , Len )"		244538	1					
ANR	244583	Callee	MIN		244538	0					
ANR	244584	Identifier	MIN		244538	0					
ANR	244585	ArgumentList	sz		244538	1					
ANR	244586	Argument	sz		244538	0					
ANR	244587	Identifier	sz		244538	0					
ANR	244588	Argument	Len		244538	1					
ANR	244589	Identifier	Len		244538	0					
ANR	244590	ExpressionStatement	"strncpy ( buf , Data , newlen )"	187:6:3749:3777	244538	1	True				
ANR	244591	CallExpression	"strncpy ( buf , Data , newlen )"		244538	0					
ANR	244592	Callee	strncpy		244538	0					
ANR	244593	Identifier	strncpy		244538	0					
ANR	244594	ArgumentList	buf		244538	1					
ANR	244595	Argument	buf		244538	0					
ANR	244596	Identifier	buf		244538	0					
ANR	244597	Argument	Data		244538	1					
ANR	244598	Identifier	Data		244538	0					
ANR	244599	Argument	newlen		244538	2					
ANR	244600	Identifier	newlen		244538	0					
ANR	244601	ExpressionStatement	buf [ newlen ] = '\\0'	189:3:3852:3870	244538	2	True				
ANR	244602	AssignmentExpression	buf [ newlen ] = '\\0'		244538	0		=			
ANR	244603	ArrayIndexing	buf [ newlen ]		244538	0					
ANR	244604	Identifier	buf		244538	0					
ANR	244605	Identifier	newlen		244538	1					
ANR	244606	PrimaryExpression	'\\0'		244538	1					
ANR	244607	Statement	delete	190:6:3879:3884	244538	3	True				
ANR	244608	Statement	[	190:13:3886:3886	244538	4	True				
ANR	244609	Statement	]	190:14:3887:3887	244538	5	True				
ANR	244610	ExpressionStatement	Data	190:16:3889:3893	244538	6	True				
ANR	244611	Identifier	Data		244538	0					
ANR	244612	ExpressionStatement	Len = newlen	191:3:3898:3910	244538	7	True				
ANR	244613	AssignmentExpression	Len = newlen		244538	0		=			
ANR	244614	Identifier	Len		244538	0					
ANR	244615	Identifier	newlen		244538	1					
ANR	244616	ExpressionStatement	capacity = sz	194:4:3980:3993	244538	5	True				
ANR	244617	AssignmentExpression	capacity = sz		244538	0		=			
ANR	244618	Identifier	capacity		244538	0					
ANR	244619	Identifier	sz		244538	1					
ANR	244620	ExpressionStatement	Data = buf	195:4:3999:4009	244538	6	True				
ANR	244621	AssignmentExpression	Data = buf		244538	0		=			
ANR	244622	Identifier	Data		244538	0					
ANR	244623	Identifier	buf		244538	1					
ANR	244624	ReturnStatement	return true ;	196:4:4015:4026	244538	7	True				
ANR	244625	Identifier	true		244538	0					
ANR	244626	ReturnType	bool		244538	1					
ANR	244627	Identifier	MyString :: reserve		244538	2					
ANR	244628	ParameterList	const int sz		244538	3					
ANR	244629	Parameter	const int sz	173:19:3437:3448	244538	0	True				
ANR	244630	ParameterType	const int		244538	0					
ANR	244631	Identifier	sz		244538	1					
ANR	244632	CFGEntryNode	ENTRY		244538		True				
ANR	244633	CFGExitNode	EXIT		244538		True				
ANR	244634	Symbol	buf		244538						
ANR	244635	Symbol	* buf		244538						
ANR	244636	Symbol	MIN		244538						
ANR	244637	Symbol	Len		244538						
ANR	244638	Symbol	sz		244538						
ANR	244639	Symbol	false		244538						
ANR	244640	Symbol	true		244538						
ANR	244641	Symbol	newlen		244538						
ANR	244642	Symbol	Data		244538						
ANR	244643	Symbol	* newlen		244538						
ANR	244644	Symbol	capacity		244538						
ANR	244645	Function	MyString :: reserve_at_least	209:0:4628:4948							
ANR	244646	FunctionDef	MyString :: reserve_at_least (const int sz)		244645	0					
ANR	244647	CompoundStatement		211:0:4676:4948	244645	0					
ANR	244648	IdentifierDeclStatement	int twice_as_much ;	212:1:4679:4696	244645	0	True				
ANR	244649	IdentifierDecl	twice_as_much		244645	0					
ANR	244650	IdentifierDeclType	int		244645	0					
ANR	244651	Identifier	twice_as_much		244645	1					
ANR	244652	IdentifierDeclStatement	bool success ;	213:1:4699:4711	244645	1	True				
ANR	244653	IdentifierDecl	success		244645	0					
ANR	244654	IdentifierDeclType	bool		244645	0					
ANR	244655	Identifier	success		244645	1					
ANR	244656	ExpressionStatement	twice_as_much = 2 * capacity	215:1:4715:4743	244645	2	True				
ANR	244657	AssignmentExpression	twice_as_much = 2 * capacity		244645	0		=			
ANR	244658	Identifier	twice_as_much		244645	0					
ANR	244659	MultiplicativeExpression	2 * capacity		244645	1		*			
ANR	244660	PrimaryExpression	2		244645	0					
ANR	244661	Identifier	capacity		244645	1					
ANR	244662	IfStatement	if ( twice_as_much > sz )		244645	3					
ANR	244663	Condition	twice_as_much > sz	216:5:4750:4767	244645	0	True				
ANR	244664	RelationalExpression	twice_as_much > sz		244645	0		>			
ANR	244665	Identifier	twice_as_much		244645	0					
ANR	244666	Identifier	sz		244645	1					
ANR	244667	CompoundStatement		6:25:93:93	244645	1					
ANR	244668	ExpressionStatement	success = reserve ( twice_as_much )	217:2:4774:4806	244645	0	True				
ANR	244669	AssignmentExpression	success = reserve ( twice_as_much )		244645	0		=			
ANR	244670	Identifier	success		244645	0					
ANR	244671	CallExpression	reserve ( twice_as_much )		244645	1					
ANR	244672	Callee	reserve		244645	0					
ANR	244673	Identifier	reserve		244645	0					
ANR	244674	ArgumentList	twice_as_much		244645	1					
ANR	244675	Argument	twice_as_much		244645	0					
ANR	244676	Identifier	twice_as_much		244645	0					
ANR	244677	IfStatement	if ( ! success )		244645	1					
ANR	244678	Condition	! success	218:6:4814:4821	244645	0	True				
ANR	244679	UnaryOperationExpression	! success		244645	0					
ANR	244680	UnaryOperator	!		244645	0					
ANR	244681	Identifier	success		244645	1					
ANR	244682	CompoundStatement		8:16:147:147	244645	1					
ANR	244683	ExpressionStatement	success = reserve ( sz )	219:3:4866:4887	244645	0	True				
ANR	244684	AssignmentExpression	success = reserve ( sz )		244645	0		=			
ANR	244685	Identifier	success		244645	0					
ANR	244686	CallExpression	reserve ( sz )		244645	1					
ANR	244687	Callee	reserve		244645	0					
ANR	244688	Identifier	reserve		244645	0					
ANR	244689	ArgumentList	sz		244645	1					
ANR	244690	Argument	sz		244645	0					
ANR	244691	Identifier	sz		244645	0					
ANR	244692	ElseStatement	else		244645	0					
ANR	244693	CompoundStatement		11:8:224:224	244645	0					
ANR	244694	ExpressionStatement	success = reserve ( sz )	222:2:4905:4926	244645	0	True				
ANR	244695	AssignmentExpression	success = reserve ( sz )		244645	0		=			
ANR	244696	Identifier	success		244645	0					
ANR	244697	CallExpression	reserve ( sz )		244645	1					
ANR	244698	Callee	reserve		244645	0					
ANR	244699	Identifier	reserve		244645	0					
ANR	244700	ArgumentList	sz		244645	1					
ANR	244701	Argument	sz		244645	0					
ANR	244702	Identifier	sz		244645	0					
ANR	244703	ReturnStatement	return success ;	224:1:4932:4946	244645	4	True				
ANR	244704	Identifier	success		244645	0					
ANR	244705	ReturnType	bool		244645	1					
ANR	244706	Identifier	MyString :: reserve_at_least		244645	2					
ANR	244707	ParameterList	const int sz		244645	3					
ANR	244708	Parameter	const int sz	210:27:4661:4672	244645	0	True				
ANR	244709	ParameterType	const int		244645	0					
ANR	244710	Identifier	sz		244645	1					
ANR	244711	CFGEntryNode	ENTRY		244645		True				
ANR	244712	CFGExitNode	EXIT		244645		True				
ANR	244713	Symbol	success		244645						
ANR	244714	Symbol	sz		244645						
ANR	244715	Symbol	reserve		244645						
ANR	244716	Symbol	twice_as_much		244645						
ANR	244717	Symbol	capacity		244645						
ANR	244718	Function	operator +=	234:10:5148:5237							
ANR	244719	FunctionDef	operator += (const MyString & S)		244718	0					
ANR	244720	CompoundStatement		235:0:5179:5237	244718	0					
ANR	244721	ExpressionStatement	"append_str ( S . Value ( ) , S . Len )"	237:4:5187:5217	244718	0	True				
ANR	244722	CallExpression	"append_str ( S . Value ( ) , S . Len )"		244718	0					
ANR	244723	Callee	append_str		244718	0					
ANR	244724	Identifier	append_str		244718	0					
ANR	244725	ArgumentList	S . Value ( )		244718	1					
ANR	244726	Argument	S . Value ( )		244718	0					
ANR	244727	CallExpression	S . Value ( )		244718	0					
ANR	244728	Callee	S . Value		244718	0					
ANR	244729	MemberAccess	S . Value		244718	0					
ANR	244730	Identifier	S		244718	0					
ANR	244731	Identifier	Value		244718	1					
ANR	244732	ArgumentList			244718	1					
ANR	244733	Argument	S . Len		244718	1					
ANR	244734	MemberAccess	S . Len		244718	0					
ANR	244735	Identifier	S		244718	0					
ANR	244736	Identifier	Len		244718	1					
ANR	244737	ReturnStatement	return * this ;	238:4:5223:5235	244718	1	True				
ANR	244738	UnaryOperationExpression	* this		244718	0					
ANR	244739	UnaryOperator	*		244718	0					
ANR	244740	Identifier	this		244718	1					
ANR	244741	Identifier	operator +=		244718	1					
ANR	244742	ParameterList	const MyString & S		244718	2					
ANR	244743	Parameter	const MyString & S	234:21:5159:5175	244718	0	True				
ANR	244744	ParameterType	const MyString &		244718	0					
ANR	244745	Identifier	S		244718	1					
ANR	244746	CFGEntryNode	ENTRY		244718		True				
ANR	244747	CFGExitNode	EXIT		244718		True				
ANR	244748	Symbol	* this		244718						
ANR	244749	Symbol	S		244718						
ANR	244750	Symbol	this		244718						
ANR	244751	Symbol	S . Value		244718						
ANR	244752	Symbol	S . Len		244718						
ANR	244753	Function	operator +=	242:10:5261:5358							
ANR	244754	FunctionDef	operator += (const std :: string & S)		244753	0					
ANR	244755	CompoundStatement		243:0:5295:5358	244753	0					
ANR	244756	ExpressionStatement	"append_str ( S . c_str ( ) , S . length ( ) )"	245:4:5303:5338	244753	0	True				
ANR	244757	CallExpression	"append_str ( S . c_str ( ) , S . length ( ) )"		244753	0					
ANR	244758	Callee	append_str		244753	0					
ANR	244759	Identifier	append_str		244753	0					
ANR	244760	ArgumentList	S . c_str ( )		244753	1					
ANR	244761	Argument	S . c_str ( )		244753	0					
ANR	244762	CallExpression	S . c_str ( )		244753	0					
ANR	244763	Callee	S . c_str		244753	0					
ANR	244764	MemberAccess	S . c_str		244753	0					
ANR	244765	Identifier	S		244753	0					
ANR	244766	Identifier	c_str		244753	1					
ANR	244767	ArgumentList			244753	1					
ANR	244768	Argument	S . length ( )		244753	1					
ANR	244769	CallExpression	S . length ( )		244753	0					
ANR	244770	Callee	S . length		244753	0					
ANR	244771	MemberAccess	S . length		244753	0					
ANR	244772	Identifier	S		244753	0					
ANR	244773	Identifier	length		244753	1					
ANR	244774	ArgumentList			244753	1					
ANR	244775	ReturnStatement	return * this ;	246:4:5344:5356	244753	1	True				
ANR	244776	UnaryOperationExpression	* this		244753	0					
ANR	244777	UnaryOperator	*		244753	0					
ANR	244778	Identifier	this		244753	1					
ANR	244779	Identifier	operator +=		244753	1					
ANR	244780	ParameterList	const std :: string & S		244753	2					
ANR	244781	Parameter	const std :: string & S	242:21:5272:5291	244753	0	True				
ANR	244782	ParameterType	const std :: string &		244753	0					
ANR	244783	Identifier	S		244753	1					
ANR	244784	CFGEntryNode	ENTRY		244753		True				
ANR	244785	CFGExitNode	EXIT		244753		True				
ANR	244786	Symbol	* this		244753						
ANR	244787	Symbol	S		244753						
ANR	244788	Symbol	this		244753						
ANR	244789	Symbol	S . c_str		244753						
ANR	244790	Symbol	S . length		244753						
ANR	244791	Function	operator +=	251:10:5383:5512							
ANR	244792	FunctionDef	operator += (const char * s)		244791	0					
ANR	244793	CompoundStatement		252:0:5410:5512	244791	0					
ANR	244794	IfStatement	if ( ! s || * s == '\\0' )		244791	0					
ANR	244795	Condition	! s || * s == '\\0'	253:8:5420:5435	244791	0	True				
ANR	244796	OrExpression	! s || * s == '\\0'		244791	0		||			
ANR	244797	UnaryOperationExpression	! s		244791	0					
ANR	244798	UnaryOperator	!		244791	0					
ANR	244799	Identifier	s		244791	1					
ANR	244800	EqualityExpression	* s == '\\0'		244791	1		==			
ANR	244801	UnaryOperationExpression	* s		244791	0					
ANR	244802	UnaryOperator	*		244791	0					
ANR	244803	Identifier	s		244791	1					
ANR	244804	PrimaryExpression	'\\0'		244791	1					
ANR	244805	CompoundStatement		2:27:28:28	244791	1					
ANR	244806	ReturnStatement	return * this ;	254:2:5443:5455	244791	0	True				
ANR	244807	UnaryOperationExpression	* this		244791	0					
ANR	244808	UnaryOperator	*		244791	0					
ANR	244809	Identifier	this		244791	1					
ANR	244810	ExpressionStatement	"append_str ( s , strlen ( s ) )"	256:4:5464:5492	244791	1	True				
ANR	244811	CallExpression	"append_str ( s , strlen ( s ) )"		244791	0					
ANR	244812	Callee	append_str		244791	0					
ANR	244813	Identifier	append_str		244791	0					
ANR	244814	ArgumentList	s		244791	1					
ANR	244815	Argument	s		244791	0					
ANR	244816	Identifier	s		244791	0					
ANR	244817	Argument	strlen ( s )		244791	1					
ANR	244818	CallExpression	strlen ( s )		244791	0					
ANR	244819	Callee	strlen		244791	0					
ANR	244820	Identifier	strlen		244791	0					
ANR	244821	ArgumentList	s		244791	1					
ANR	244822	Argument	s		244791	0					
ANR	244823	Identifier	s		244791	0					
ANR	244824	ReturnStatement	return * this ;	257:4:5498:5510	244791	2	True				
ANR	244825	UnaryOperationExpression	* this		244791	0					
ANR	244826	UnaryOperator	*		244791	0					
ANR	244827	Identifier	this		244791	1					
ANR	244828	Identifier	operator +=		244791	1					
ANR	244829	ParameterList	const char * s		244791	2					
ANR	244830	Parameter	const char * s	251:21:5394:5406	244791	0	True				
ANR	244831	ParameterType	const char *		244791	0					
ANR	244832	Identifier	s		244791	1					
ANR	244833	CFGEntryNode	ENTRY		244791		True				
ANR	244834	CFGExitNode	EXIT		244791		True				
ANR	244835	Symbol	* this		244791						
ANR	244836	Symbol	strlen		244791						
ANR	244837	Symbol	s		244791						
ANR	244838	Symbol	this		244791						
ANR	244839	Symbol	* s		244791						
ANR	244840	Function	MyString :: append_str	260:0:5515:5918							
ANR	244841	FunctionDef	"MyString :: append_str (const char * s , int s_len)"		244840	0					
ANR	244842	CompoundStatement		262:0:5569:5918	244840	0					
ANR	244843	IdentifierDeclStatement	char * pCopy = 0 ;	263:1:5572:5586	244840	0	True				
ANR	244844	IdentifierDecl	* pCopy = 0		244840	0					
ANR	244845	IdentifierDeclType	char *		244840	0					
ANR	244846	Identifier	pCopy		244840	1					
ANR	244847	AssignmentExpression	* pCopy = 0		244840	2		=			
ANR	244848	Identifier	pCopy		244840	0					
ANR	244849	PrimaryExpression	0		244840	1					
ANR	244850	IfStatement	if ( s == Data )		244840	1					
ANR	244851	Condition	s == Data	265:5:5594:5602	244840	0	True				
ANR	244852	EqualityExpression	s == Data		244840	0		==			
ANR	244853	Identifier	s		244840	0					
ANR	244854	Identifier	Data		244840	1					
ANR	244855	CompoundStatement		5:1:36:36	244840	1					
ANR	244856	ExpressionStatement	pCopy = ( char * ) new char [ s_len + 1 ]	267:2:5610:5644	244840	0	True				
ANR	244857	AssignmentExpression	pCopy = ( char * ) new char [ s_len + 1 ]		244840	0		=			
ANR	244858	Identifier	pCopy		244840	0					
ANR	244859	CastExpression	( char * ) new char [ s_len + 1 ]		244840	1					
ANR	244860	CastTarget	char *		244840	0					
ANR	244861	AdditiveExpression	s_len + 1		244840	1		+			
ANR	244862	Identifier	s_len		244840	0					
ANR	244863	PrimaryExpression	1		244840	1					
ANR	244864	ExpressionStatement	"strcpy ( pCopy , s )"	268:2:5648:5663	244840	1	True				
ANR	244865	CallExpression	"strcpy ( pCopy , s )"		244840	0					
ANR	244866	Callee	strcpy		244840	0					
ANR	244867	Identifier	strcpy		244840	0					
ANR	244868	ArgumentList	pCopy		244840	1					
ANR	244869	Argument	pCopy		244840	0					
ANR	244870	Identifier	pCopy		244840	0					
ANR	244871	Argument	s		244840	1					
ANR	244872	Identifier	s		244840	0					
ANR	244873	IfStatement	if ( s_len + Len > capacity || ! Data )		244840	2					
ANR	244874	Condition	s_len + Len > capacity || ! Data	271:8:5678:5708	244840	0	True				
ANR	244875	OrExpression	s_len + Len > capacity || ! Data		244840	0		||			
ANR	244876	RelationalExpression	s_len + Len > capacity		244840	0		>			
ANR	244877	AdditiveExpression	s_len + Len		244840	0		+			
ANR	244878	Identifier	s_len		244840	0					
ANR	244879	Identifier	Len		244840	1					
ANR	244880	Identifier	capacity		244840	1					
ANR	244881	UnaryOperationExpression	! Data		244840	1					
ANR	244882	UnaryOperator	!		244840	0					
ANR	244883	Identifier	Data		244840	1					
ANR	244884	CompoundStatement		11:4:146:146	244840	1					
ANR	244885	ExpressionStatement	reserve_at_least ( Len + s_len )	273:2:5720:5751	244840	0	True				
ANR	244886	CallExpression	reserve_at_least ( Len + s_len )		244840	0					
ANR	244887	Callee	reserve_at_least		244840	0					
ANR	244888	Identifier	reserve_at_least		244840	0					
ANR	244889	ArgumentList	Len + s_len		244840	1					
ANR	244890	Argument	Len + s_len		244840	0					
ANR	244891	AdditiveExpression	Len + s_len		244840	0		+			
ANR	244892	Identifier	Len		244840	0					
ANR	244893	Identifier	s_len		244840	1					
ANR	244894	IfStatement	if ( pCopy )		244840	3					
ANR	244895	Condition	pCopy	276:5:5765:5769	244840	0	True				
ANR	244896	Identifier	pCopy		244840	0					
ANR	244897	CompoundStatement		16:1:203:203	244840	1					
ANR	244898	ExpressionStatement	"strcpy ( Data + Len , pCopy )"	278:2:5777:5803	244840	0	True				
ANR	244899	CallExpression	"strcpy ( Data + Len , pCopy )"		244840	0					
ANR	244900	Callee	strcpy		244840	0					
ANR	244901	Identifier	strcpy		244840	0					
ANR	244902	ArgumentList	Data + Len		244840	1					
ANR	244903	Argument	Data + Len		244840	0					
ANR	244904	AdditiveExpression	Data + Len		244840	0		+			
ANR	244905	Identifier	Data		244840	0					
ANR	244906	Identifier	Len		244840	1					
ANR	244907	Argument	pCopy		244840	1					
ANR	244908	Identifier	pCopy		244840	0					
ANR	244909	Statement	delete	279:2:5849:5854	244840	1	True				
ANR	244910	Statement	[	279:9:5856:5856	244840	2	True				
ANR	244911	Statement	]	279:10:5857:5857	244840	3	True				
ANR	244912	ExpressionStatement	pCopy	279:12:5859:5864	244840	4	True				
ANR	244913	Identifier	pCopy		244840	0					
ANR	244914	ElseStatement	else		244840	0					
ANR	244915	ExpressionStatement	"strcpy ( Data + Len , s )"	282:2:5878:5900	244840	0	True				
ANR	244916	CallExpression	"strcpy ( Data + Len , s )"		244840	0					
ANR	244917	Callee	strcpy		244840	0					
ANR	244918	Identifier	strcpy		244840	0					
ANR	244919	ArgumentList	Data + Len		244840	1					
ANR	244920	Argument	Data + Len		244840	0					
ANR	244921	AdditiveExpression	Data + Len		244840	0		+			
ANR	244922	Identifier	Data		244840	0					
ANR	244923	Identifier	Len		244840	1					
ANR	244924	Argument	s		244840	1					
ANR	244925	Identifier	s		244840	0					
ANR	244926	ExpressionStatement	Len += s_len	284:1:5904:5916	244840	4	True				
ANR	244927	AssignmentExpression	Len += s_len		244840	0		+=			
ANR	244928	Identifier	Len		244840	0					
ANR	244929	Identifier	s_len		244840	1					
ANR	244930	ReturnType	void		244840	1					
ANR	244931	Identifier	MyString :: append_str		244840	2					
ANR	244932	ParameterList	"const char * s , int s_len"		244840	3					
ANR	244933	Parameter	const char * s	261:22:5542:5554	244840	0	True				
ANR	244934	ParameterType	const char *		244840	0					
ANR	244935	Identifier	s		244840	1					
ANR	244936	Parameter	int s_len	261:37:5557:5565	244840	1	True				
ANR	244937	ParameterType	int		244840	0					
ANR	244938	Identifier	s_len		244840	1					
ANR	244939	CFGEntryNode	ENTRY		244840		True				
ANR	244940	CFGExitNode	EXIT		244840		True				
ANR	244941	Symbol	s		244840						
ANR	244942	Symbol	Len		244840						
ANR	244943	Symbol	s_len		244840						
ANR	244944	Symbol	Data		244840						
ANR	244945	Symbol	pCopy		244840						
ANR	244946	Symbol	capacity		244840						
ANR	244947	Function	MyString :: append_to_list	287:0:5921:6100							
ANR	244948	FunctionDef	"MyString :: append_to_list (char const * str , char const * delim)"		244947	0					
ANR	244949	CompoundStatement		288:72:5998:6100	244947	0					
ANR	244950	IfStatement	if ( str == NULL || str [ 0 ] == 0 )		244947	0					
ANR	244951	Condition	str == NULL || str [ 0 ] == 0	289:4:6004:6029	244947	0	True				
ANR	244952	OrExpression	str == NULL || str [ 0 ] == 0		244947	0		||			
ANR	244953	EqualityExpression	str == NULL		244947	0		==			
ANR	244954	Identifier	str		244947	0					
ANR	244955	Identifier	NULL		244947	1					
ANR	244956	EqualityExpression	str [ 0 ] == 0		244947	1		==			
ANR	244957	ArrayIndexing	str [ 0 ]		244947	0					
ANR	244958	Identifier	str		244947	0					
ANR	244959	PrimaryExpression	0		244947	1					
ANR	244960	PrimaryExpression	0		244947	1					
ANR	244961	CompoundStatement		2:32:33:33	244947	1					
ANR	244962	ReturnStatement	return ;	290:2:6036:6042	244947	0	True				
ANR	244963	IfStatement	if ( Len )		244947	1					
ANR	244964	Condition	Len	292:5:6052:6054	244947	0	True				
ANR	244965	Identifier	Len		244947	0					
ANR	244966	CompoundStatement		5:11:59:59	244947	1					
ANR	244967	ExpressionStatement	( * this ) += delim	293:2:6062:6078	244947	0	True				
ANR	244968	AssignmentExpression	( * this ) += delim		244947	0		+=			
ANR	244969	UnaryOperationExpression	* this		244947	0					
ANR	244970	UnaryOperator	*		244947	0					
ANR	244971	Identifier	this		244947	1					
ANR	244972	Identifier	delim		244947	1					
ANR	244973	ExpressionStatement	( * this ) += str	295:1:6084:6098	244947	2	True				
ANR	244974	AssignmentExpression	( * this ) += str		244947	0		+=			
ANR	244975	UnaryOperationExpression	* this		244947	0					
ANR	244976	UnaryOperator	*		244947	0					
ANR	244977	Identifier	this		244947	1					
ANR	244978	Identifier	str		244947	1					
ANR	244979	ReturnType	void		244947	1					
ANR	244980	Identifier	MyString :: append_to_list		244947	2					
ANR	244981	ParameterList	"char const * str , char const * delim"		244947	3					
ANR	244982	Parameter	char const * str	288:25:5951:5965	244947	0	True				
ANR	244983	ParameterType	char const *		244947	0					
ANR	244984	Identifier	str		244947	1					
ANR	244985	Parameter	char const * delim	288:41:5967:5983	244947	1	True				
ANR	244986	ParameterType	char const *		244947	0					
ANR	244987	Identifier	delim		244947	1					
ANR	244988	CFGEntryNode	ENTRY		244947		True				
ANR	244989	CFGExitNode	EXIT		244947		True				
ANR	244990	Symbol	str		244947						
ANR	244991	Symbol	* this		244947						
ANR	244992	Symbol	NULL		244947						
ANR	244993	Symbol	Len		244947						
ANR	244994	Symbol	this		244947						
ANR	244995	Symbol	* str		244947						
ANR	244996	Symbol	delim		244947						
ANR	244997	Function	MyString :: append_to_list	298:0:6103:6221							
ANR	244998	FunctionDef	"MyString :: append_to_list (MyString const & str , char const * delim)"		244997	0					
ANR	244999	CompoundStatement		299:75:6183:6221	244997	0					
ANR	245000	ExpressionStatement	"append_to_list ( str . Value ( ) , delim )"	300:1:6186:6219	244997	0	True				
ANR	245001	CallExpression	"append_to_list ( str . Value ( ) , delim )"		244997	0					
ANR	245002	Callee	append_to_list		244997	0					
ANR	245003	Identifier	append_to_list		244997	0					
ANR	245004	ArgumentList	str . Value ( )		244997	1					
ANR	245005	Argument	str . Value ( )		244997	0					
ANR	245006	CallExpression	str . Value ( )		244997	0					
ANR	245007	Callee	str . Value		244997	0					
ANR	245008	MemberAccess	str . Value		244997	0					
ANR	245009	Identifier	str		244997	0					
ANR	245010	Identifier	Value		244997	1					
ANR	245011	ArgumentList			244997	1					
ANR	245012	Argument	delim		244997	1					
ANR	245013	Identifier	delim		244997	0					
ANR	245014	ReturnType	void		244997	1					
ANR	245015	Identifier	MyString :: append_to_list		244997	2					
ANR	245016	ParameterList	"MyString const & str , char const * delim"		244997	3					
ANR	245017	Parameter	MyString const & str	299:25:6133:6151	244997	0	True				
ANR	245018	ParameterType	MyString const &		244997	0					
ANR	245019	Identifier	str		244997	1					
ANR	245020	Parameter	char const * delim	299:45:6153:6169	244997	1	True				
ANR	245021	ParameterType	char const *		244997	0					
ANR	245022	Identifier	delim		244997	1					
ANR	245023	CFGEntryNode	ENTRY		244997		True				
ANR	245024	CFGExitNode	EXIT		244997		True				
ANR	245025	Symbol	str		244997						
ANR	245026	Symbol	str . Value		244997						
ANR	245027	Symbol	delim		244997						
ANR	245028	Function	operator +=	304:10:6245:6420							
ANR	245029	FunctionDef	operator += (const char c)		245028	0					
ANR	245030	CompoundStatement		305:0:6271:6420	245028	0					
ANR	245031	IfStatement	if ( Len + 1 > capacity || ! Data )		245028	0					
ANR	245032	Condition	Len + 1 > capacity || ! Data	306:8:6281:6307	245028	0	True				
ANR	245033	OrExpression	Len + 1 > capacity || ! Data		245028	0		||			
ANR	245034	RelationalExpression	Len + 1 > capacity		245028	0		>			
ANR	245035	AdditiveExpression	Len + 1		245028	0		+			
ANR	245036	Identifier	Len		245028	0					
ANR	245037	PrimaryExpression	1		245028	1					
ANR	245038	Identifier	capacity		245028	1					
ANR	245039	UnaryOperationExpression	! Data		245028	1					
ANR	245040	UnaryOperator	!		245028	0					
ANR	245041	Identifier	Data		245028	1					
ANR	245042	CompoundStatement		2:38:39:39	245028	1					
ANR	245043	ExpressionStatement	reserve_at_least ( Len + 1 )	307:7:6320:6347	245028	0	True				
ANR	245044	CallExpression	reserve_at_least ( Len + 1 )		245028	0					
ANR	245045	Callee	reserve_at_least		245028	0					
ANR	245046	Identifier	reserve_at_least		245028	0					
ANR	245047	ArgumentList	Len + 1		245028	1					
ANR	245048	Argument	Len + 1		245028	0					
ANR	245049	AdditiveExpression	Len + 1		245028	0		+			
ANR	245050	Identifier	Len		245028	0					
ANR	245051	PrimaryExpression	1		245028	1					
ANR	245052	ExpressionStatement	Data [ Len ] = c	309:1:6356:6369	245028	1	True				
ANR	245053	AssignmentExpression	Data [ Len ] = c		245028	0		=			
ANR	245054	ArrayIndexing	Data [ Len ]		245028	0					
ANR	245055	Identifier	Data		245028	0					
ANR	245056	Identifier	Len		245028	1					
ANR	245057	Identifier	c		245028	1					
ANR	245058	ExpressionStatement	Data [ Len + 1 ] = '\\0'	310:1:6372:6390	245028	2	True				
ANR	245059	AssignmentExpression	Data [ Len + 1 ] = '\\0'		245028	0		=			
ANR	245060	ArrayIndexing	Data [ Len + 1 ]		245028	0					
ANR	245061	Identifier	Data		245028	0					
ANR	245062	AdditiveExpression	Len + 1		245028	1		+			
ANR	245063	Identifier	Len		245028	0					
ANR	245064	PrimaryExpression	1		245028	1					
ANR	245065	PrimaryExpression	'\\0'		245028	1					
ANR	245066	ExpressionStatement	Len ++	311:1:6393:6398	245028	3	True				
ANR	245067	PostIncDecOperationExpression	Len ++		245028	0					
ANR	245068	Identifier	Len		245028	0					
ANR	245069	IncDec	++		245028	1					
ANR	245070	ReturnStatement	return * this ;	312:4:6404:6416	245028	4	True				
ANR	245071	UnaryOperationExpression	* this		245028	0					
ANR	245072	UnaryOperator	*		245028	0					
ANR	245073	Identifier	this		245028	1					
ANR	245074	Identifier	operator +=		245028	1					
ANR	245075	ParameterList	const char c		245028	2					
ANR	245076	Parameter	const char c	304:21:6256:6267	245028	0	True				
ANR	245077	ParameterType	const char		245028	0					
ANR	245078	Identifier	c		245028	1					
ANR	245079	CFGEntryNode	ENTRY		245028		True				
ANR	245080	CFGExitNode	EXIT		245028		True				
ANR	245081	Symbol	* Len		245028						
ANR	245082	Symbol	* this		245028						
ANR	245083	Symbol	c		245028						
ANR	245084	Symbol	Len		245028						
ANR	245085	Symbol	this		245028						
ANR	245086	Symbol	Data		245028						
ANR	245087	Symbol	* Data		245028						
ANR	245088	Symbol	capacity		245028						
ANR	245089	Function	operator +	315:0:6423:6533							
ANR	245090	FunctionDef	"operator + (const MyString & S1 , const MyString & S2)"		245089	0					
ANR	245091	CompoundStatement		316:0:6483:6533	245089	0					
ANR	245092	IdentifierDeclStatement	MyString S = S1 ;	317:4:6489:6504	245089	0	True				
ANR	245093	IdentifierDecl	S = S1		245089	0					
ANR	245094	IdentifierDeclType	MyString		245089	0					
ANR	245095	Identifier	S		245089	1					
ANR	245096	AssignmentExpression	S = S1		245089	2		=			
ANR	245097	Identifier	S1		245089	0					
ANR	245098	Identifier	S1		245089	1					
ANR	245099	ExpressionStatement	S += S2	318:4:6510:6517	245089	1	True				
ANR	245100	AssignmentExpression	S += S2		245089	0		+=			
ANR	245101	Identifier	S		245089	0					
ANR	245102	Identifier	S2		245089	1					
ANR	245103	ReturnStatement	return S ;	319:4:6523:6531	245089	2	True				
ANR	245104	Identifier	S		245089	0					
ANR	245105	ReturnType	MyString		245089	1					
ANR	245106	Identifier	operator +		245089	2					
ANR	245107	ParameterList	"const MyString & S1 , const MyString & S2"		245089	3					
ANR	245108	Parameter	const MyString & S1	315:19:6442:6459	245089	0	True				
ANR	245109	ParameterType	const MyString &		245089	0					
ANR	245110	Identifier	S1		245089	1					
ANR	245111	Parameter	const MyString & S2	315:39:6462:6479	245089	1	True				
ANR	245112	ParameterType	const MyString &		245089	0					
ANR	245113	Identifier	S2		245089	1					
ANR	245114	CFGEntryNode	ENTRY		245089		True				
ANR	245115	CFGExitNode	EXIT		245089		True				
ANR	245116	Symbol	S		245089						
ANR	245117	Symbol	S1		245089						
ANR	245118	Symbol	S2		245089						
ANR	245119	Function	operator +=	324:10:6558:6761							
ANR	245120	FunctionDef	operator += (int i)		245119	0					
ANR	245121	CompoundStatement		325:0:6578:6761	245119	0					
ANR	245122	IdentifierDeclStatement	const int bufLen = 64 ;	326:1:6581:6602	245119	0	True				
ANR	245123	IdentifierDecl	bufLen = 64		245119	0					
ANR	245124	IdentifierDeclType	const int		245119	0					
ANR	245125	Identifier	bufLen		245119	1					
ANR	245126	AssignmentExpression	bufLen = 64		245119	2		=			
ANR	245127	Identifier	bufLen		245119	0					
ANR	245128	PrimaryExpression	64		245119	1					
ANR	245129	IdentifierDeclStatement	char tmp [ bufLen ] ;	327:1:6605:6621	245119	1	True				
ANR	245130	IdentifierDecl	tmp [ bufLen ]		245119	0					
ANR	245131	IdentifierDeclType	char [ bufLen ]		245119	0					
ANR	245132	Identifier	tmp		245119	1					
ANR	245133	Identifier	bufLen		245119	2					
ANR	245134	Statement	::	328:1:6624:6625	245119	2	True				
ANR	245135	ExpressionStatement	"snprintf ( tmp , bufLen , ""%d"" , i )"	328:3:6626:6658	245119	3	True				
ANR	245136	CallExpression	"snprintf ( tmp , bufLen , ""%d"" , i )"		245119	0					
ANR	245137	Callee	snprintf		245119	0					
ANR	245138	Identifier	snprintf		245119	0					
ANR	245139	ArgumentList	tmp		245119	1					
ANR	245140	Argument	tmp		245119	0					
ANR	245141	Identifier	tmp		245119	0					
ANR	245142	Argument	bufLen		245119	1					
ANR	245143	Identifier	bufLen		245119	0					
ANR	245144	Argument	"""%d"""		245119	2					
ANR	245145	PrimaryExpression	"""%d"""		245119	0					
ANR	245146	Argument	i		245119	3					
ANR	245147	Identifier	i		245119	0					
ANR	245148	IdentifierDeclStatement	int s_len = strlen ( tmp ) ;	329:4:6664:6689	245119	4	True				
ANR	245149	IdentifierDecl	s_len = strlen ( tmp )		245119	0					
ANR	245150	IdentifierDeclType	int		245119	0					
ANR	245151	Identifier	s_len		245119	1					
ANR	245152	AssignmentExpression	s_len = strlen ( tmp )		245119	2		=			
ANR	245153	Identifier	s_len		245119	0					
ANR	245154	CallExpression	strlen ( tmp )		245119	1					
ANR	245155	Callee	strlen		245119	0					
ANR	245156	Identifier	strlen		245119	0					
ANR	245157	ArgumentList	tmp		245119	1					
ANR	245158	Argument	tmp		245119	0					
ANR	245159	Identifier	tmp		245119	0					
ANR	245160	ExpressionStatement	ASSERT ( s_len < bufLen )	330:1:6692:6714	245119	5	True				
ANR	245161	CallExpression	ASSERT ( s_len < bufLen )		245119	0					
ANR	245162	Callee	ASSERT		245119	0					
ANR	245163	Identifier	ASSERT		245119	0					
ANR	245164	ArgumentList	s_len < bufLen		245119	1					
ANR	245165	Argument	s_len < bufLen		245119	0					
ANR	245166	RelationalExpression	s_len < bufLen		245119	0		<			
ANR	245167	Identifier	s_len		245119	0					
ANR	245168	Identifier	bufLen		245119	1					
ANR	245169	ExpressionStatement	"append_str ( tmp , s_len )"	331:1:6717:6741	245119	6	True				
ANR	245170	CallExpression	"append_str ( tmp , s_len )"		245119	0					
ANR	245171	Callee	append_str		245119	0					
ANR	245172	Identifier	append_str		245119	0					
ANR	245173	ArgumentList	tmp		245119	1					
ANR	245174	Argument	tmp		245119	0					
ANR	245175	Identifier	tmp		245119	0					
ANR	245176	Argument	s_len		245119	1					
ANR	245177	Identifier	s_len		245119	0					
ANR	245178	ReturnStatement	return * this ;	332:4:6747:6759	245119	7	True				
ANR	245179	UnaryOperationExpression	* this		245119	0					
ANR	245180	UnaryOperator	*		245119	0					
ANR	245181	Identifier	this		245119	1					
ANR	245182	Identifier	operator +=		245119	1					
ANR	245183	ParameterList	int i		245119	2					
ANR	245184	Parameter	int i	324:22:6570:6574	245119	0	True				
ANR	245185	ParameterType	int		245119	0					
ANR	245186	Identifier	i		245119	1					
ANR	245187	CFGEntryNode	ENTRY		245119		True				
ANR	245188	CFGExitNode	EXIT		245119		True				
ANR	245189	Symbol	* this		245119						
ANR	245190	Symbol	strlen		245119						
ANR	245191	Symbol	tmp		245119						
ANR	245192	Symbol	s_len		245119						
ANR	245193	Symbol	this		245119						
ANR	245194	Symbol	i		245119						
ANR	245195	Symbol	bufLen		245119						
ANR	245196	Function	operator +=	337:10:6786:6994							
ANR	245197	FunctionDef	operator += (unsigned int ui)		245196	0					
ANR	245198	CompoundStatement		338:0:6816:6994	245196	0					
ANR	245199	IdentifierDeclStatement	const int bufLen = 64 ;	339:1:6819:6840	245196	0	True				
ANR	245200	IdentifierDecl	bufLen = 64		245196	0					
ANR	245201	IdentifierDeclType	const int		245196	0					
ANR	245202	Identifier	bufLen		245196	1					
ANR	245203	AssignmentExpression	bufLen = 64		245196	2		=			
ANR	245204	Identifier	bufLen		245196	0					
ANR	245205	PrimaryExpression	64		245196	1					
ANR	245206	IdentifierDeclStatement	char tmp [ bufLen ] ;	340:1:6843:6859	245196	1	True				
ANR	245207	IdentifierDecl	tmp [ bufLen ]		245196	0					
ANR	245208	IdentifierDeclType	char [ bufLen ]		245196	0					
ANR	245209	Identifier	tmp		245196	1					
ANR	245210	Identifier	bufLen		245196	2					
ANR	245211	Statement	::	341:1:6862:6863	245196	2	True				
ANR	245212	ExpressionStatement	"snprintf ( tmp , bufLen , ""%u"" , ui )"	341:3:6864:6897	245196	3	True				
ANR	245213	CallExpression	"snprintf ( tmp , bufLen , ""%u"" , ui )"		245196	0					
ANR	245214	Callee	snprintf		245196	0					
ANR	245215	Identifier	snprintf		245196	0					
ANR	245216	ArgumentList	tmp		245196	1					
ANR	245217	Argument	tmp		245196	0					
ANR	245218	Identifier	tmp		245196	0					
ANR	245219	Argument	bufLen		245196	1					
ANR	245220	Identifier	bufLen		245196	0					
ANR	245221	Argument	"""%u"""		245196	2					
ANR	245222	PrimaryExpression	"""%u"""		245196	0					
ANR	245223	Argument	ui		245196	3					
ANR	245224	Identifier	ui		245196	0					
ANR	245225	IdentifierDeclStatement	int s_len = strlen ( tmp ) ;	342:1:6900:6925	245196	4	True				
ANR	245226	IdentifierDecl	s_len = strlen ( tmp )		245196	0					
ANR	245227	IdentifierDeclType	int		245196	0					
ANR	245228	Identifier	s_len		245196	1					
ANR	245229	AssignmentExpression	s_len = strlen ( tmp )		245196	2		=			
ANR	245230	Identifier	s_len		245196	0					
ANR	245231	CallExpression	strlen ( tmp )		245196	1					
ANR	245232	Callee	strlen		245196	0					
ANR	245233	Identifier	strlen		245196	0					
ANR	245234	ArgumentList	tmp		245196	1					
ANR	245235	Argument	tmp		245196	0					
ANR	245236	Identifier	tmp		245196	0					
ANR	245237	ExpressionStatement	ASSERT ( s_len < bufLen )	343:1:6928:6950	245196	5	True				
ANR	245238	CallExpression	ASSERT ( s_len < bufLen )		245196	0					
ANR	245239	Callee	ASSERT		245196	0					
ANR	245240	Identifier	ASSERT		245196	0					
ANR	245241	ArgumentList	s_len < bufLen		245196	1					
ANR	245242	Argument	s_len < bufLen		245196	0					
ANR	245243	RelationalExpression	s_len < bufLen		245196	0		<			
ANR	245244	Identifier	s_len		245196	0					
ANR	245245	Identifier	bufLen		245196	1					
ANR	245246	ExpressionStatement	"append_str ( tmp , s_len )"	344:1:6953:6977	245196	6	True				
ANR	245247	CallExpression	"append_str ( tmp , s_len )"		245196	0					
ANR	245248	Callee	append_str		245196	0					
ANR	245249	Identifier	append_str		245196	0					
ANR	245250	ArgumentList	tmp		245196	1					
ANR	245251	Argument	tmp		245196	0					
ANR	245252	Identifier	tmp		245196	0					
ANR	245253	Argument	s_len		245196	1					
ANR	245254	Identifier	s_len		245196	0					
ANR	245255	ReturnStatement	return * this ;	345:1:6980:6992	245196	7	True				
ANR	245256	UnaryOperationExpression	* this		245196	0					
ANR	245257	UnaryOperator	*		245196	0					
ANR	245258	Identifier	this		245196	1					
ANR	245259	Identifier	operator +=		245196	1					
ANR	245260	ParameterList	unsigned int ui		245196	2					
ANR	245261	Parameter	unsigned int ui	337:22:6798:6812	245196	0	True				
ANR	245262	ParameterType	unsigned int		245196	0					
ANR	245263	Identifier	ui		245196	1					
ANR	245264	CFGEntryNode	ENTRY		245196		True				
ANR	245265	CFGExitNode	EXIT		245196		True				
ANR	245266	Symbol	* this		245196						
ANR	245267	Symbol	strlen		245196						
ANR	245268	Symbol	ui		245196						
ANR	245269	Symbol	tmp		245196						
ANR	245270	Symbol	s_len		245196						
ANR	245271	Symbol	this		245196						
ANR	245272	Symbol	bufLen		245196						
ANR	245273	Function	operator +=	350:10:7019:7218							
ANR	245274	FunctionDef	operator += (long l)		245273	0					
ANR	245275	CompoundStatement		351:0:7040:7218	245273	0					
ANR	245276	IdentifierDeclStatement	const int bufLen = 64 ;	352:1:7043:7064	245273	0	True				
ANR	245277	IdentifierDecl	bufLen = 64		245273	0					
ANR	245278	IdentifierDeclType	const int		245273	0					
ANR	245279	Identifier	bufLen		245273	1					
ANR	245280	AssignmentExpression	bufLen = 64		245273	2		=			
ANR	245281	Identifier	bufLen		245273	0					
ANR	245282	PrimaryExpression	64		245273	1					
ANR	245283	IdentifierDeclStatement	char tmp [ bufLen ] ;	353:1:7067:7083	245273	1	True				
ANR	245284	IdentifierDecl	tmp [ bufLen ]		245273	0					
ANR	245285	IdentifierDeclType	char [ bufLen ]		245273	0					
ANR	245286	Identifier	tmp		245273	1					
ANR	245287	Identifier	bufLen		245273	2					
ANR	245288	Statement	::	354:1:7086:7087	245273	2	True				
ANR	245289	ExpressionStatement	"snprintf ( tmp , bufLen , ""%ld"" , l )"	354:3:7088:7121	245273	3	True				
ANR	245290	CallExpression	"snprintf ( tmp , bufLen , ""%ld"" , l )"		245273	0					
ANR	245291	Callee	snprintf		245273	0					
ANR	245292	Identifier	snprintf		245273	0					
ANR	245293	ArgumentList	tmp		245273	1					
ANR	245294	Argument	tmp		245273	0					
ANR	245295	Identifier	tmp		245273	0					
ANR	245296	Argument	bufLen		245273	1					
ANR	245297	Identifier	bufLen		245273	0					
ANR	245298	Argument	"""%ld"""		245273	2					
ANR	245299	PrimaryExpression	"""%ld"""		245273	0					
ANR	245300	Argument	l		245273	3					
ANR	245301	Identifier	l		245273	0					
ANR	245302	IdentifierDeclStatement	int s_len = strlen ( tmp ) ;	355:1:7124:7149	245273	4	True				
ANR	245303	IdentifierDecl	s_len = strlen ( tmp )		245273	0					
ANR	245304	IdentifierDeclType	int		245273	0					
ANR	245305	Identifier	s_len		245273	1					
ANR	245306	AssignmentExpression	s_len = strlen ( tmp )		245273	2		=			
ANR	245307	Identifier	s_len		245273	0					
ANR	245308	CallExpression	strlen ( tmp )		245273	1					
ANR	245309	Callee	strlen		245273	0					
ANR	245310	Identifier	strlen		245273	0					
ANR	245311	ArgumentList	tmp		245273	1					
ANR	245312	Argument	tmp		245273	0					
ANR	245313	Identifier	tmp		245273	0					
ANR	245314	ExpressionStatement	ASSERT ( s_len < bufLen )	356:1:7152:7174	245273	5	True				
ANR	245315	CallExpression	ASSERT ( s_len < bufLen )		245273	0					
ANR	245316	Callee	ASSERT		245273	0					
ANR	245317	Identifier	ASSERT		245273	0					
ANR	245318	ArgumentList	s_len < bufLen		245273	1					
ANR	245319	Argument	s_len < bufLen		245273	0					
ANR	245320	RelationalExpression	s_len < bufLen		245273	0		<			
ANR	245321	Identifier	s_len		245273	0					
ANR	245322	Identifier	bufLen		245273	1					
ANR	245323	ExpressionStatement	"append_str ( tmp , s_len )"	357:1:7177:7201	245273	6	True				
ANR	245324	CallExpression	"append_str ( tmp , s_len )"		245273	0					
ANR	245325	Callee	append_str		245273	0					
ANR	245326	Identifier	append_str		245273	0					
ANR	245327	ArgumentList	tmp		245273	1					
ANR	245328	Argument	tmp		245273	0					
ANR	245329	Identifier	tmp		245273	0					
ANR	245330	Argument	s_len		245273	1					
ANR	245331	Identifier	s_len		245273	0					
ANR	245332	ReturnStatement	return * this ;	358:1:7204:7216	245273	7	True				
ANR	245333	UnaryOperationExpression	* this		245273	0					
ANR	245334	UnaryOperator	*		245273	0					
ANR	245335	Identifier	this		245273	1					
ANR	245336	Identifier	operator +=		245273	1					
ANR	245337	ParameterList	long l		245273	2					
ANR	245338	Parameter	long l	350:22:7031:7036	245273	0	True				
ANR	245339	ParameterType	long		245273	0					
ANR	245340	Identifier	l		245273	1					
ANR	245341	CFGEntryNode	ENTRY		245273		True				
ANR	245342	CFGExitNode	EXIT		245273		True				
ANR	245343	Symbol	* this		245273						
ANR	245344	Symbol	strlen		245273						
ANR	245345	Symbol	tmp		245273						
ANR	245346	Symbol	s_len		245273						
ANR	245347	Symbol	this		245273						
ANR	245348	Symbol	bufLen		245273						
ANR	245349	Symbol	l		245273						
ANR	245350	Function	operator +=	363:10:7243:7450							
ANR	245351	FunctionDef	operator += (double d)		245350	0					
ANR	245352	CompoundStatement		364:0:7266:7450	245350	0					
ANR	245353	IdentifierDeclStatement	const int bufLen = 128 ;	365:1:7269:7291	245350	0	True				
ANR	245354	IdentifierDecl	bufLen = 128		245350	0					
ANR	245355	IdentifierDeclType	const int		245350	0					
ANR	245356	Identifier	bufLen		245350	1					
ANR	245357	AssignmentExpression	bufLen = 128		245350	2		=			
ANR	245358	Identifier	bufLen		245350	0					
ANR	245359	PrimaryExpression	128		245350	1					
ANR	245360	IdentifierDeclStatement	char tmp [ bufLen ] ;	366:1:7294:7310	245350	1	True				
ANR	245361	IdentifierDecl	tmp [ bufLen ]		245350	0					
ANR	245362	IdentifierDeclType	char [ bufLen ]		245350	0					
ANR	245363	Identifier	tmp		245350	1					
ANR	245364	Identifier	bufLen		245350	2					
ANR	245365	Statement	::	367:1:7313:7314	245350	2	True				
ANR	245366	ExpressionStatement	"snprintf ( tmp , bufLen , ""%f"" , d )"	367:3:7315:7347	245350	3	True				
ANR	245367	CallExpression	"snprintf ( tmp , bufLen , ""%f"" , d )"		245350	0					
ANR	245368	Callee	snprintf		245350	0					
ANR	245369	Identifier	snprintf		245350	0					
ANR	245370	ArgumentList	tmp		245350	1					
ANR	245371	Argument	tmp		245350	0					
ANR	245372	Identifier	tmp		245350	0					
ANR	245373	Argument	bufLen		245350	1					
ANR	245374	Identifier	bufLen		245350	0					
ANR	245375	Argument	"""%f"""		245350	2					
ANR	245376	PrimaryExpression	"""%f"""		245350	0					
ANR	245377	Argument	d		245350	3					
ANR	245378	Identifier	d		245350	0					
ANR	245379	IdentifierDeclStatement	int s_len = strlen ( tmp ) ;	368:4:7353:7378	245350	4	True				
ANR	245380	IdentifierDecl	s_len = strlen ( tmp )		245350	0					
ANR	245381	IdentifierDeclType	int		245350	0					
ANR	245382	Identifier	s_len		245350	1					
ANR	245383	AssignmentExpression	s_len = strlen ( tmp )		245350	2		=			
ANR	245384	Identifier	s_len		245350	0					
ANR	245385	CallExpression	strlen ( tmp )		245350	1					
ANR	245386	Callee	strlen		245350	0					
ANR	245387	Identifier	strlen		245350	0					
ANR	245388	ArgumentList	tmp		245350	1					
ANR	245389	Argument	tmp		245350	0					
ANR	245390	Identifier	tmp		245350	0					
ANR	245391	ExpressionStatement	ASSERT ( s_len < bufLen )	369:1:7381:7403	245350	5	True				
ANR	245392	CallExpression	ASSERT ( s_len < bufLen )		245350	0					
ANR	245393	Callee	ASSERT		245350	0					
ANR	245394	Identifier	ASSERT		245350	0					
ANR	245395	ArgumentList	s_len < bufLen		245350	1					
ANR	245396	Argument	s_len < bufLen		245350	0					
ANR	245397	RelationalExpression	s_len < bufLen		245350	0		<			
ANR	245398	Identifier	s_len		245350	0					
ANR	245399	Identifier	bufLen		245350	1					
ANR	245400	ExpressionStatement	"append_str ( tmp , s_len )"	370:1:7406:7430	245350	6	True				
ANR	245401	CallExpression	"append_str ( tmp , s_len )"		245350	0					
ANR	245402	Callee	append_str		245350	0					
ANR	245403	Identifier	append_str		245350	0					
ANR	245404	ArgumentList	tmp		245350	1					
ANR	245405	Argument	tmp		245350	0					
ANR	245406	Identifier	tmp		245350	0					
ANR	245407	Argument	s_len		245350	1					
ANR	245408	Identifier	s_len		245350	0					
ANR	245409	ReturnStatement	return * this ;	371:4:7436:7448	245350	7	True				
ANR	245410	UnaryOperationExpression	* this		245350	0					
ANR	245411	UnaryOperator	*		245350	0					
ANR	245412	Identifier	this		245350	1					
ANR	245413	Identifier	operator +=		245350	1					
ANR	245414	ParameterList	double d		245350	2					
ANR	245415	Parameter	double d	363:22:7255:7262	245350	0	True				
ANR	245416	ParameterType	double		245350	0					
ANR	245417	Identifier	d		245350	1					
ANR	245418	CFGEntryNode	ENTRY		245350		True				
ANR	245419	CFGExitNode	EXIT		245350		True				
ANR	245420	Symbol	* this		245350						
ANR	245421	Symbol	strlen		245350						
ANR	245422	Symbol	d		245350						
ANR	245423	Symbol	tmp		245350						
ANR	245424	Symbol	s_len		245350						
ANR	245425	Symbol	this		245350						
ANR	245426	Symbol	bufLen		245350						
ANR	245427	Function	MyString :: Substr	381:0:7632:8010							
ANR	245428	FunctionDef	"MyString :: Substr (int pos1 , int pos2)"		245427	0					
ANR	245429	CompoundStatement		383:0:7686:8010	245427	0					
ANR	245430	IdentifierDeclStatement	MyString S ;	384:4:7692:7702	245427	0	True				
ANR	245431	IdentifierDecl	S		245427	0					
ANR	245432	IdentifierDeclType	MyString		245427	0					
ANR	245433	Identifier	S		245427	1					
ANR	245434	IfStatement	if ( Len <= 0 )		245427	1					
ANR	245435	Condition	Len <= 0	386:5:7710:7717	245427	0	True				
ANR	245436	RelationalExpression	Len <= 0		245427	0		<=			
ANR	245437	Identifier	Len		245427	0					
ANR	245438	PrimaryExpression	0		245427	1					
ANR	245439	CompoundStatement		4:15:33:33	245427	1					
ANR	245440	ReturnStatement	return S ;	387:5:7727:7735	245427	0	True				
ANR	245441	Identifier	S		245427	0					
ANR	245442	IfStatement	if ( pos2 >= Len )		245427	2					
ANR	245443	Condition	pos2 >= Len	390:8:7749:7759	245427	0	True				
ANR	245444	RelationalExpression	pos2 >= Len		245427	0		>=			
ANR	245445	Identifier	pos2		245427	0					
ANR	245446	Identifier	Len		245427	1					
ANR	245447	CompoundStatement		8:21:75:75	245427	1					
ANR	245448	ExpressionStatement	pos2 = Len - 1	391:2:7766:7780	245427	0	True				
ANR	245449	AssignmentExpression	pos2 = Len - 1		245427	0		=			
ANR	245450	Identifier	pos2		245427	0					
ANR	245451	AdditiveExpression	Len - 1		245427	1		-			
ANR	245452	Identifier	Len		245427	0					
ANR	245453	PrimaryExpression	1		245427	1					
ANR	245454	IfStatement	if ( pos1 < 0 )		245427	3					
ANR	245455	Condition	pos1 < 0	393:8:7793:7800	245427	0	True				
ANR	245456	RelationalExpression	pos1 < 0		245427	0		<			
ANR	245457	Identifier	pos1		245427	0					
ANR	245458	PrimaryExpression	0		245427	1					
ANR	245459	CompoundStatement		11:18:116:116	245427	1					
ANR	245460	ExpressionStatement	pos1 = 0	394:2:7807:7813	245427	0	True				
ANR	245461	AssignmentExpression	pos1 = 0		245427	0		=			
ANR	245462	Identifier	pos1		245427	0					
ANR	245463	PrimaryExpression	0		245427	1					
ANR	245464	IfStatement	if ( pos1 > pos2 )		245427	4					
ANR	245465	Condition	pos1 > pos2	396:8:7826:7836	245427	0	True				
ANR	245466	RelationalExpression	pos1 > pos2		245427	0		>			
ANR	245467	Identifier	pos1		245427	0					
ANR	245468	Identifier	pos2		245427	1					
ANR	245469	CompoundStatement		14:21:152:152	245427	1					
ANR	245470	ReturnStatement	return S ;	397:2:7843:7851	245427	0	True				
ANR	245471	Identifier	S		245427	0					
ANR	245472	IdentifierDeclStatement	int len = pos2 - pos1 + 1 ;	399:4:7860:7881	245427	5	True				
ANR	245473	IdentifierDecl	len = pos2 - pos1 + 1		245427	0					
ANR	245474	IdentifierDeclType	int		245427	0					
ANR	245475	Identifier	len		245427	1					
ANR	245476	AssignmentExpression	len = pos2 - pos1 + 1		245427	2		=			
ANR	245477	Identifier	len		245427	0					
ANR	245478	AdditiveExpression	pos2 - pos1 + 1		245427	1		-			
ANR	245479	Identifier	pos2		245427	0					
ANR	245480	AdditiveExpression	pos1 + 1		245427	1		+			
ANR	245481	Identifier	pos1		245427	0					
ANR	245482	PrimaryExpression	1		245427	1					
ANR	245483	IdentifierDeclStatement	char * tmp = new char [ len + 1 ] ;	400:4:7887:7914	245427	6	True				
ANR	245484	IdentifierDecl	* tmp = new char [ len + 1 ]		245427	0					
ANR	245485	IdentifierDeclType	char *		245427	0					
ANR	245486	Identifier	tmp		245427	1					
ANR	245487	AssignmentExpression	* tmp = new char [ len + 1 ]		245427	2		=			
ANR	245488	Identifier	tmp		245427	0					
ANR	245489	AdditiveExpression	len + 1		245427	1		+			
ANR	245490	Identifier	len		245427	0					
ANR	245491	PrimaryExpression	1		245427	1					
ANR	245492	ExpressionStatement	"strncpy ( tmp , Data + pos1 , len )"	401:4:7920:7946	245427	7	True				
ANR	245493	CallExpression	"strncpy ( tmp , Data + pos1 , len )"		245427	0					
ANR	245494	Callee	strncpy		245427	0					
ANR	245495	Identifier	strncpy		245427	0					
ANR	245496	ArgumentList	tmp		245427	1					
ANR	245497	Argument	tmp		245427	0					
ANR	245498	Identifier	tmp		245427	0					
ANR	245499	Argument	Data + pos1		245427	1					
ANR	245500	AdditiveExpression	Data + pos1		245427	0		+			
ANR	245501	Identifier	Data		245427	0					
ANR	245502	Identifier	pos1		245427	1					
ANR	245503	Argument	len		245427	2					
ANR	245504	Identifier	len		245427	0					
ANR	245505	ExpressionStatement	tmp [ len ] = '\\0'	402:4:7952:7965	245427	8	True				
ANR	245506	AssignmentExpression	tmp [ len ] = '\\0'		245427	0		=			
ANR	245507	ArrayIndexing	tmp [ len ]		245427	0					
ANR	245508	Identifier	tmp		245427	0					
ANR	245509	Identifier	len		245427	1					
ANR	245510	PrimaryExpression	'\\0'		245427	1					
ANR	245511	ExpressionStatement	S = tmp	403:4:7971:7976	245427	9	True				
ANR	245512	AssignmentExpression	S = tmp		245427	0		=			
ANR	245513	Identifier	S		245427	0					
ANR	245514	Identifier	tmp		245427	1					
ANR	245515	Statement	delete	404:4:7982:7987	245427	10	True				
ANR	245516	Statement	[	404:10:7988:7988	245427	11	True				
ANR	245517	Statement	]	404:11:7989:7989	245427	12	True				
ANR	245518	ExpressionStatement	tmp	404:13:7991:7994	245427	13	True				
ANR	245519	Identifier	tmp		245427	0					
ANR	245520	ReturnStatement	return S ;	405:4:8000:8008	245427	14	True				
ANR	245521	Identifier	S		245427	0					
ANR	245522	ReturnType	MyString		245427	1					
ANR	245523	Identifier	MyString :: Substr		245427	2					
ANR	245524	ParameterList	"int pos1 , int pos2"		245427	3					
ANR	245525	Parameter	int pos1	382:17:7659:7666	245427	0	True				
ANR	245526	ParameterType	int		245427	0					
ANR	245527	Identifier	pos1		245427	1					
ANR	245528	Parameter	int pos2	382:27:7669:7676	245427	1	True				
ANR	245529	ParameterType	int		245427	0					
ANR	245530	Identifier	pos2		245427	1					
ANR	245531	CFGEntryNode	ENTRY		245427		True				
ANR	245532	CFGExitNode	EXIT		245427		True				
ANR	245533	Symbol	* tmp		245427						
ANR	245534	Symbol	S		245427						
ANR	245535	Symbol	Len		245427						
ANR	245536	Symbol	len		245427						
ANR	245537	Symbol	tmp		245427						
ANR	245538	Symbol	pos1		245427						
ANR	245539	Symbol	pos2		245427						
ANR	245540	Symbol	Data		245427						
ANR	245541	Symbol	* len		245427						
ANR	245542	Function	MyString :: EscapeChars	412:0:8158:8829							
ANR	245543	FunctionDef	"MyString :: EscapeChars (const MyString & Q , const char escape)"		245542	0					
ANR	245544	CompoundStatement		414:0:8235:8829	245542	0					
ANR	245545	IdentifierDeclStatement	MyString S ;	420:1:8456:8466	245542	0	True				
ANR	245546	IdentifierDecl	S		245542	0					
ANR	245547	IdentifierDeclType	MyString		245542	0					
ANR	245548	Identifier	S		245542	1					
ANR	245549	ExpressionStatement	S . reserve ( Len )	421:1:8469:8483	245542	1	True				
ANR	245550	CallExpression	S . reserve ( Len )		245542	0					
ANR	245551	Callee	S . reserve		245542	0					
ANR	245552	MemberAccess	S . reserve		245542	0					
ANR	245553	Identifier	S		245542	0					
ANR	245554	Identifier	reserve		245542	1					
ANR	245555	ArgumentList	Len		245542	1					
ANR	245556	Argument	Len		245542	0					
ANR	245557	Identifier	Len		245542	0					
ANR	245558	ForStatement	for ( int i = 0 ; i < Len ; i ++ )		245542	2					
ANR	245559	ForInit	int i = 0 ;	424:6:8533:8542	245542	0	True				
ANR	245560	IdentifierDeclStatement	int i = 0 ;		245542	0					
ANR	245561	IdentifierDecl	i = 0		245542	0					
ANR	245562	IdentifierDeclType	int		245542	0					
ANR	245563	Identifier	i		245542	1					
ANR	245564	AssignmentExpression	i = 0		245542	2		=			
ANR	245565	Identifier	i		245542	0					
ANR	245566	PrimaryExpression	0		245542	1					
ANR	245567	Condition	i < Len	424:17:8544:8550	245542	1	True				
ANR	245568	RelationalExpression	i < Len		245542	0		<			
ANR	245569	Identifier	i		245542	0					
ANR	245570	Identifier	Len		245542	1					
ANR	245571	PostIncDecOperationExpression	i ++	424:26:8553:8555	245542	2	True				
ANR	245572	Identifier	i		245542	0					
ANR	245573	IncDec	++		245542	1					
ANR	245574	CompoundStatement		11:31:322:322	245542	3					
ANR	245575	IfStatement	if ( Q . FindChar ( Data [ i ] ) >= 0 )		245542	0					
ANR	245576	Condition	Q . FindChar ( Data [ i ] ) >= 0	428:6:8661:8684	245542	0	True				
ANR	245577	RelationalExpression	Q . FindChar ( Data [ i ] ) >= 0		245542	0		>=			
ANR	245578	CallExpression	Q . FindChar ( Data [ i ] )		245542	0					
ANR	245579	Callee	Q . FindChar		245542	0					
ANR	245580	MemberAccess	Q . FindChar		245542	0					
ANR	245581	Identifier	Q		245542	0					
ANR	245582	Identifier	FindChar		245542	1					
ANR	245583	ArgumentList	Data [ i ]		245542	1					
ANR	245584	Argument	Data [ i ]		245542	0					
ANR	245585	ArrayIndexing	Data [ i ]		245542	0					
ANR	245586	Identifier	Data		245542	0					
ANR	245587	Identifier	i		245542	1					
ANR	245588	PrimaryExpression	0		245542	1					
ANR	245589	CompoundStatement		15:32:451:451	245542	1					
ANR	245590	ExpressionStatement	S += escape	430:3:8728:8739	245542	0	True				
ANR	245591	AssignmentExpression	S += escape		245542	0		+=			
ANR	245592	Identifier	S		245542	0					
ANR	245593	Identifier	escape		245542	1					
ANR	245594	ExpressionStatement	S += Data [ i ]	434:2:8785:8797	245542	1	True				
ANR	245595	AssignmentExpression	S += Data [ i ]		245542	0		+=			
ANR	245596	Identifier	S		245542	0					
ANR	245597	ArrayIndexing	Data [ i ]		245542	1					
ANR	245598	Identifier	Data		245542	0					
ANR	245599	Identifier	i		245542	1					
ANR	245600	ReturnStatement	return S ;	438:1:8819:8827	245542	3	True				
ANR	245601	Identifier	S		245542	0					
ANR	245602	ReturnType	MyString		245542	1					
ANR	245603	Identifier	MyString :: EscapeChars		245542	2					
ANR	245604	ParameterList	"const MyString & Q , const char escape"		245542	3					
ANR	245605	Parameter	const MyString & Q	413:22:8190:8206	245542	0	True				
ANR	245606	ParameterType	const MyString &		245542	0					
ANR	245607	Identifier	Q		245542	1					
ANR	245608	Parameter	const char escape	413:41:8209:8225	245542	1	True				
ANR	245609	ParameterType	const char		245542	0					
ANR	245610	Identifier	escape		245542	1					
ANR	245611	CFGEntryNode	ENTRY		245542		True				
ANR	245612	CFGExitNode	EXIT		245542		True				
ANR	245613	Symbol	Q		245542						
ANR	245614	Symbol	Q . FindChar		245542						
ANR	245615	Symbol	S		245542						
ANR	245616	Symbol	* i		245542						
ANR	245617	Symbol	Len		245542						
ANR	245618	Symbol	i		245542						
ANR	245619	Symbol	Data		245542						
ANR	245620	Symbol	escape		245542						
ANR	245621	Symbol	* Data		245542						
ANR	245622	Function	MyString :: FindChar	441:0:8832:9057							
ANR	245623	FunctionDef	"MyString :: FindChar (int Char , int FirstPos)"		245622	0					
ANR	245624	CompoundStatement		443:0:8887:9057	245622	0					
ANR	245625	IfStatement	if ( ! Data || FirstPos >= Len || FirstPos < 0 )		245622	0					
ANR	245626	Condition	! Data || FirstPos >= Len || FirstPos < 0	444:8:8897:8936	245622	0	True				
ANR	245627	OrExpression	! Data || FirstPos >= Len || FirstPos < 0		245622	0		||			
ANR	245628	UnaryOperationExpression	! Data		245622	0					
ANR	245629	UnaryOperator	!		245622	0					
ANR	245630	Identifier	Data		245622	1					
ANR	245631	OrExpression	FirstPos >= Len || FirstPos < 0		245622	1		||			
ANR	245632	RelationalExpression	FirstPos >= Len		245622	0		>=			
ANR	245633	Identifier	FirstPos		245622	0					
ANR	245634	Identifier	Len		245622	1					
ANR	245635	RelationalExpression	FirstPos < 0		245622	1		<			
ANR	245636	Identifier	FirstPos		245622	0					
ANR	245637	PrimaryExpression	0		245622	1					
ANR	245638	CompoundStatement		2:50:51:51	245622	1					
ANR	245639	ReturnStatement	return - 1 ;	445:2:8943:8952	245622	0	True				
ANR	245640	UnaryOperationExpression	- 1		245622	0					
ANR	245641	UnaryOperator	-		245622	0					
ANR	245642	PrimaryExpression	1		245622	1					
ANR	245643	IdentifierDeclStatement	"char * tmp = strchr ( Data + FirstPos , Char ) ;"	447:4:8961:9002	245622	1	True				
ANR	245644	IdentifierDecl	"* tmp = strchr ( Data + FirstPos , Char )"		245622	0					
ANR	245645	IdentifierDeclType	char *		245622	0					
ANR	245646	Identifier	tmp		245622	1					
ANR	245647	AssignmentExpression	"* tmp = strchr ( Data + FirstPos , Char )"		245622	2		=			
ANR	245648	Identifier	tmp		245622	0					
ANR	245649	CallExpression	"strchr ( Data + FirstPos , Char )"		245622	1					
ANR	245650	Callee	strchr		245622	0					
ANR	245651	Identifier	strchr		245622	0					
ANR	245652	ArgumentList	Data + FirstPos		245622	1					
ANR	245653	Argument	Data + FirstPos		245622	0					
ANR	245654	AdditiveExpression	Data + FirstPos		245622	0		+			
ANR	245655	Identifier	Data		245622	0					
ANR	245656	Identifier	FirstPos		245622	1					
ANR	245657	Argument	Char		245622	1					
ANR	245658	Identifier	Char		245622	0					
ANR	245659	IfStatement	if ( ! tmp )		245622	2					
ANR	245660	Condition	! tmp	448:8:9012:9015	245622	0	True				
ANR	245661	UnaryOperationExpression	! tmp		245622	0					
ANR	245662	UnaryOperator	!		245622	0					
ANR	245663	Identifier	tmp		245622	1					
ANR	245664	CompoundStatement		6:14:130:130	245622	1					
ANR	245665	ReturnStatement	return - 1 ;	449:2:9022:9031	245622	0	True				
ANR	245666	UnaryOperationExpression	- 1		245622	0					
ANR	245667	UnaryOperator	-		245622	0					
ANR	245668	PrimaryExpression	1		245622	1					
ANR	245669	ReturnStatement	return tmp - Data ;	451:4:9040:9055	245622	3	True				
ANR	245670	AdditiveExpression	tmp - Data		245622	0		-			
ANR	245671	Identifier	tmp		245622	0					
ANR	245672	Identifier	Data		245622	1					
ANR	245673	ReturnType	int		245622	1					
ANR	245674	Identifier	MyString :: FindChar		245622	2					
ANR	245675	ParameterList	"int Char , int FirstPos"		245622	3					
ANR	245676	Parameter	int Char	442:19:8856:8863	245622	0	True				
ANR	245677	ParameterType	int		245622	0					
ANR	245678	Identifier	Char		245622	1					
ANR	245679	Parameter	int FirstPos	442:29:8866:8877	245622	1	True				
ANR	245680	ParameterType	int		245622	0					
ANR	245681	Identifier	FirstPos		245622	1					
ANR	245682	CFGEntryNode	ENTRY		245622		True				
ANR	245683	CFGExitNode	EXIT		245622		True				
ANR	245684	Symbol	Len		245622						
ANR	245685	Symbol	Char		245622						
ANR	245686	Symbol	tmp		245622						
ANR	245687	Symbol	FirstPos		245622						
ANR	245688	Symbol	strchr		245622						
ANR	245689	Symbol	Data		245622						
ANR	245690	Function	MyString :: Hash	454:0:9060:9239							
ANR	245691	FunctionDef	MyString :: Hash ()		245690	0					
ANR	245692	CompoundStatement		456:0:9098:9239	245690	0					
ANR	245693	IdentifierDeclStatement	int i ;	457:1:9101:9106	245690	0	True				
ANR	245694	IdentifierDecl	i		245690	0					
ANR	245695	IdentifierDeclType	int		245690	0					
ANR	245696	Identifier	i		245690	1					
ANR	245697	IdentifierDeclStatement	unsigned int result = 0 ;	458:1:9109:9132	245690	1	True				
ANR	245698	IdentifierDecl	result = 0		245690	0					
ANR	245699	IdentifierDeclType	unsigned int		245690	0					
ANR	245700	Identifier	result		245690	1					
ANR	245701	AssignmentExpression	result = 0		245690	2		=			
ANR	245702	Identifier	result		245690	0					
ANR	245703	PrimaryExpression	0		245690	1					
ANR	245704	ForStatement	for ( i = 0 ; i < Len ; i ++ )		245690	2					
ANR	245705	ForInit	i = 0 ;	459:5:9139:9144	245690	0	True				
ANR	245706	AssignmentExpression	i = 0		245690	0		=			
ANR	245707	Identifier	i		245690	0					
ANR	245708	PrimaryExpression	0		245690	1					
ANR	245709	Condition	i < Len	459:12:9146:9152	245690	1	True				
ANR	245710	RelationalExpression	i < Len		245690	0		<			
ANR	245711	Identifier	i		245690	0					
ANR	245712	Identifier	Len		245690	1					
ANR	245713	PostIncDecOperationExpression	i ++	459:21:9155:9157	245690	2	True				
ANR	245714	Identifier	i		245690	0					
ANR	245715	IncDec	++		245690	1					
ANR	245716	CompoundStatement		4:26:61:61	245690	3					
ANR	245717	ExpressionStatement	result = ( result << 5 ) + result + ( unsigned char ) Data [ i ]	460:2:9164:9218	245690	0	True				
ANR	245718	AssignmentExpression	result = ( result << 5 ) + result + ( unsigned char ) Data [ i ]		245690	0		=			
ANR	245719	Identifier	result		245690	0					
ANR	245720	AdditiveExpression	( result << 5 ) + result + ( unsigned char ) Data [ i ]		245690	1		+			
ANR	245721	ShiftExpression	result << 5		245690	0		<<			
ANR	245722	Identifier	result		245690	0					
ANR	245723	PrimaryExpression	5		245690	1					
ANR	245724	AdditiveExpression	result + ( unsigned char ) Data [ i ]		245690	1		+			
ANR	245725	Identifier	result		245690	0					
ANR	245726	CastExpression	( unsigned char ) Data [ i ]		245690	1					
ANR	245727	CastTarget	unsigned char		245690	0					
ANR	245728	ArrayIndexing	Data [ i ]		245690	1					
ANR	245729	Identifier	Data		245690	0					
ANR	245730	Identifier	i		245690	1					
ANR	245731	ReturnStatement	return result ;	462:1:9224:9237	245690	3	True				
ANR	245732	Identifier	result		245690	0					
ANR	245733	ReturnType	unsigned int		245690	1					
ANR	245734	Identifier	MyString :: Hash		245690	2					
ANR	245735	ParameterList			245690	3					
ANR	245736	CFGEntryNode	ENTRY		245690		True				
ANR	245737	CFGExitNode	EXIT		245690		True				
ANR	245738	Symbol	result		245690						
ANR	245739	Symbol	* i		245690						
ANR	245740	Symbol	Len		245690						
ANR	245741	Symbol	i		245690						
ANR	245742	Symbol	Data		245690						
ANR	245743	Symbol	* Data		245690						
ANR	245744	Function	MyString :: find	466:0:9312:9987							
ANR	245745	FunctionDef	"MyString :: find (const char * pszToFind , int iStartPos)"		245744	0					
ANR	245746	CompoundStatement		468:0:9376:9987	245744	0					
ANR	245747	ExpressionStatement	ASSERT ( pszToFind != NULL )	469:1:9380:9405	245744	0	True				
ANR	245748	CallExpression	ASSERT ( pszToFind != NULL )		245744	0					
ANR	245749	Callee	ASSERT		245744	0					
ANR	245750	Identifier	ASSERT		245744	0					
ANR	245751	ArgumentList	pszToFind != NULL		245744	1					
ANR	245752	Argument	pszToFind != NULL		245744	0					
ANR	245753	EqualityExpression	pszToFind != NULL		245744	0		!=			
ANR	245754	Identifier	pszToFind		245744	0					
ANR	245755	Identifier	NULL		245744	1					
ANR	245756	IfStatement	if ( pszToFind [ 0 ] == '\\0' )		245744	1					
ANR	245757	Condition	pszToFind [ 0 ] == '\\0'	471:5:9413:9432	245744	0	True				
ANR	245758	EqualityExpression	pszToFind [ 0 ] == '\\0'		245744	0		==			
ANR	245759	ArrayIndexing	pszToFind [ 0 ]		245744	0					
ANR	245760	Identifier	pszToFind		245744	0					
ANR	245761	PrimaryExpression	0		245744	1					
ANR	245762	PrimaryExpression	'\\0'		245744	1					
ANR	245763	CompoundStatement		4:27:58:58	245744	1					
ANR	245764	ReturnStatement	return 0 ;	479:2:9783:9791	245744	0	True				
ANR	245765	PrimaryExpression	0		245744	0					
ANR	245766	IfStatement	if ( ! Data || iStartPos >= Len || iStartPos < 0 )		245744	2					
ANR	245767	Condition	! Data || iStartPos >= Len || iStartPos < 0	482:5:9802:9843	245744	0	True				
ANR	245768	OrExpression	! Data || iStartPos >= Len || iStartPos < 0		245744	0		||			
ANR	245769	UnaryOperationExpression	! Data		245744	0					
ANR	245770	UnaryOperator	!		245744	0					
ANR	245771	Identifier	Data		245744	1					
ANR	245772	OrExpression	iStartPos >= Len || iStartPos < 0		245744	1		||			
ANR	245773	RelationalExpression	iStartPos >= Len		245744	0		>=			
ANR	245774	Identifier	iStartPos		245744	0					
ANR	245775	Identifier	Len		245744	1					
ANR	245776	RelationalExpression	iStartPos < 0		245744	1		<			
ANR	245777	Identifier	iStartPos		245744	0					
ANR	245778	PrimaryExpression	0		245744	1					
ANR	245779	CompoundStatement		15:49:469:469	245744	1					
ANR	245780	ReturnStatement	return - 1 ;	483:2:9850:9859	245744	0	True				
ANR	245781	UnaryOperationExpression	- 1		245744	0					
ANR	245782	UnaryOperator	-		245744	0					
ANR	245783	PrimaryExpression	1		245744	1					
ANR	245784	IdentifierDeclStatement	"const char * pszFound = strstr ( Data + iStartPos , pszToFind ) ;"	486:1:9866:9924	245744	3	True				
ANR	245785	IdentifierDecl	"* pszFound = strstr ( Data + iStartPos , pszToFind )"		245744	0					
ANR	245786	IdentifierDeclType	const char *		245744	0					
ANR	245787	Identifier	pszFound		245744	1					
ANR	245788	AssignmentExpression	"* pszFound = strstr ( Data + iStartPos , pszToFind )"		245744	2		=			
ANR	245789	Identifier	pszFound		245744	0					
ANR	245790	CallExpression	"strstr ( Data + iStartPos , pszToFind )"		245744	1					
ANR	245791	Callee	strstr		245744	0					
ANR	245792	Identifier	strstr		245744	0					
ANR	245793	ArgumentList	Data + iStartPos		245744	1					
ANR	245794	Argument	Data + iStartPos		245744	0					
ANR	245795	AdditiveExpression	Data + iStartPos		245744	0		+			
ANR	245796	Identifier	Data		245744	0					
ANR	245797	Identifier	iStartPos		245744	1					
ANR	245798	Argument	pszToFind		245744	1					
ANR	245799	Identifier	pszToFind		245744	0					
ANR	245800	IfStatement	if ( ! pszFound )		245744	4					
ANR	245801	Condition	! pszFound	488:5:9932:9940	245744	0	True				
ANR	245802	UnaryOperationExpression	! pszFound		245744	0					
ANR	245803	UnaryOperator	!		245744	0					
ANR	245804	Identifier	pszFound		245744	1					
ANR	245805	CompoundStatement		21:16:566:566	245744	1					
ANR	245806	ReturnStatement	return - 1 ;	489:2:9947:9956	245744	0	True				
ANR	245807	UnaryOperationExpression	- 1		245744	0					
ANR	245808	UnaryOperator	-		245744	0					
ANR	245809	PrimaryExpression	1		245744	1					
ANR	245810	ReturnStatement	return pszFound - Data ;	492:1:9963:9985	245744	5	True				
ANR	245811	AdditiveExpression	pszFound - Data		245744	0		-			
ANR	245812	Identifier	pszFound		245744	0					
ANR	245813	Identifier	Data		245744	1					
ANR	245814	ReturnType	int		245744	1					
ANR	245815	Identifier	MyString :: find		245744	2					
ANR	245816	ParameterList	"const char * pszToFind , int iStartPos"		245744	3					
ANR	245817	Parameter	const char * pszToFind	467:15:9332:9352	245744	0	True				
ANR	245818	ParameterType	const char *		245744	0					
ANR	245819	Identifier	pszToFind		245744	1					
ANR	245820	Parameter	int iStartPos	467:38:9355:9367	245744	1	True				
ANR	245821	ParameterType	int		245744	0					
ANR	245822	Identifier	iStartPos		245744	1					
ANR	245823	CFGEntryNode	ENTRY		245744		True				
ANR	245824	CFGExitNode	EXIT		245744		True				
ANR	245825	Symbol	iStartPos		245744						
ANR	245826	Symbol	NULL		245744						
ANR	245827	Symbol	Len		245744						
ANR	245828	Symbol	pszFound		245744						
ANR	245829	Symbol	strstr		245744						
ANR	245830	Symbol	Data		245744						
ANR	245831	Symbol	* pszToFind		245744						
ANR	245832	Symbol	pszToFind		245744						
ANR	245833	Function	MyString :: replaceString	495:0:9992:11310							
ANR	245834	FunctionDef	"MyString :: replaceString (const char * pszToReplace , const char * pszReplaceWith , int iStartFromPos)"		245833	0					
ANR	245835	CompoundStatement		500:0:10102:11310	245833	0					
ANR	245836	IdentifierDeclStatement	SimpleList < int > listMatchesFound ;	501:1:10105:10137	245833	0	True				
ANR	245837	IdentifierDecl	listMatchesFound		245833	0					
ANR	245838	IdentifierDeclType	SimpleList < int >		245833	0					
ANR	245839	Identifier	listMatchesFound		245833	1					
ANR	245840	IdentifierDeclStatement	int iToReplaceLen = strlen ( pszToReplace ) ;	503:1:10145:10185	245833	1	True				
ANR	245841	IdentifierDecl	iToReplaceLen = strlen ( pszToReplace )		245833	0					
ANR	245842	IdentifierDeclType	int		245833	0					
ANR	245843	Identifier	iToReplaceLen		245833	1					
ANR	245844	AssignmentExpression	iToReplaceLen = strlen ( pszToReplace )		245833	2		=			
ANR	245845	Identifier	iToReplaceLen		245833	0					
ANR	245846	CallExpression	strlen ( pszToReplace )		245833	1					
ANR	245847	Callee	strlen		245833	0					
ANR	245848	Identifier	strlen		245833	0					
ANR	245849	ArgumentList	pszToReplace		245833	1					
ANR	245850	Argument	pszToReplace		245833	0					
ANR	245851	Identifier	pszToReplace		245833	0					
ANR	245852	IfStatement	if ( ! iToReplaceLen )		245833	2					
ANR	245853	Condition	! iToReplaceLen	504:5:10192:10205	245833	0	True				
ANR	245854	UnaryOperationExpression	! iToReplaceLen		245833	0					
ANR	245855	UnaryOperator	!		245833	0					
ANR	245856	Identifier	iToReplaceLen		245833	1					
ANR	245857	CompoundStatement		5:21:105:105	245833	1					
ANR	245858	ReturnStatement	return false ;	505:2:10212:10224	245833	0	True				
ANR	245859	Identifier	false		245833	0					
ANR	245860	IdentifierDeclStatement	int iWithLen = strlen ( pszReplaceWith ) ;	508:1:10232:10269	245833	3	True				
ANR	245861	IdentifierDecl	iWithLen = strlen ( pszReplaceWith )		245833	0					
ANR	245862	IdentifierDeclType	int		245833	0					
ANR	245863	Identifier	iWithLen		245833	1					
ANR	245864	AssignmentExpression	iWithLen = strlen ( pszReplaceWith )		245833	2		=			
ANR	245865	Identifier	iWithLen		245833	0					
ANR	245866	CallExpression	strlen ( pszReplaceWith )		245833	1					
ANR	245867	Callee	strlen		245833	0					
ANR	245868	Identifier	strlen		245833	0					
ANR	245869	ArgumentList	pszReplaceWith		245833	1					
ANR	245870	Argument	pszReplaceWith		245833	0					
ANR	245871	Identifier	pszReplaceWith		245833	0					
ANR	245872	WhileStatement	while ( iStartFromPos <= Len )		245833	4					
ANR	245873	Condition	iStartFromPos <= Len	509:8:10279:10298	245833	0	True				
ANR	245874	RelationalExpression	iStartFromPos <= Len		245833	0		<=			
ANR	245875	Identifier	iStartFromPos		245833	0					
ANR	245876	Identifier	Len		245833	1					
ANR	245877	CompoundStatement		10:29:197:197	245833	1					
ANR	245878	ExpressionStatement	"iStartFromPos = find ( pszToReplace , iStartFromPos )"	510:2:10304:10353	245833	0	True				
ANR	245879	AssignmentExpression	"iStartFromPos = find ( pszToReplace , iStartFromPos )"		245833	0		=			
ANR	245880	Identifier	iStartFromPos		245833	0					
ANR	245881	CallExpression	"find ( pszToReplace , iStartFromPos )"		245833	1					
ANR	245882	Callee	find		245833	0					
ANR	245883	Identifier	find		245833	0					
ANR	245884	ArgumentList	pszToReplace		245833	1					
ANR	245885	Argument	pszToReplace		245833	0					
ANR	245886	Identifier	pszToReplace		245833	0					
ANR	245887	Argument	iStartFromPos		245833	1					
ANR	245888	Identifier	iStartFromPos		245833	0					
ANR	245889	IfStatement	if ( iStartFromPos == - 1 )		245833	1					
ANR	245890	Condition	iStartFromPos == - 1	511:6:10361:10379	245833	0	True				
ANR	245891	EqualityExpression	iStartFromPos == - 1		245833	0		==			
ANR	245892	Identifier	iStartFromPos		245833	0					
ANR	245893	UnaryOperationExpression	- 1		245833	1					
ANR	245894	UnaryOperator	-		245833	0					
ANR	245895	PrimaryExpression	1		245833	1					
ANR	245896	BreakStatement	break ;	512:3:10385:10390	245833	1	True				
ANR	245897	ExpressionStatement	listMatchesFound . Append ( iStartFromPos )	513:2:10394:10432	245833	2	True				
ANR	245898	CallExpression	listMatchesFound . Append ( iStartFromPos )		245833	0					
ANR	245899	Callee	listMatchesFound . Append		245833	0					
ANR	245900	MemberAccess	listMatchesFound . Append		245833	0					
ANR	245901	Identifier	listMatchesFound		245833	0					
ANR	245902	Identifier	Append		245833	1					
ANR	245903	ArgumentList	iStartFromPos		245833	1					
ANR	245904	Argument	iStartFromPos		245833	0					
ANR	245905	Identifier	iStartFromPos		245833	0					
ANR	245906	ExpressionStatement	iStartFromPos += iToReplaceLen	514:2:10436:10466	245833	3	True				
ANR	245907	AssignmentExpression	iStartFromPos += iToReplaceLen		245833	0		+=			
ANR	245908	Identifier	iStartFromPos		245833	0					
ANR	245909	Identifier	iToReplaceLen		245833	1					
ANR	245910	IfStatement	if ( ! listMatchesFound . Number ( ) )		245833	5					
ANR	245911	Condition	! listMatchesFound . Number ( )	516:5:10476:10501	245833	0	True				
ANR	245912	UnaryOperationExpression	! listMatchesFound . Number ( )		245833	0					
ANR	245913	UnaryOperator	!		245833	0					
ANR	245914	CallExpression	listMatchesFound . Number ( )		245833	1					
ANR	245915	Callee	listMatchesFound . Number		245833	0					
ANR	245916	MemberAccess	listMatchesFound . Number		245833	0					
ANR	245917	Identifier	listMatchesFound		245833	0					
ANR	245918	Identifier	Number		245833	1					
ANR	245919	ArgumentList			245833	1					
ANR	245920	ReturnStatement	return false ;	517:2:10506:10518	245833	1	True				
ANR	245921	Identifier	false		245833	0					
ANR	245922	IdentifierDeclStatement	int iLenDifPerMatch = iWithLen - iToReplaceLen ;	519:1:10523:10569	245833	6	True				
ANR	245923	IdentifierDecl	iLenDifPerMatch = iWithLen - iToReplaceLen		245833	0					
ANR	245924	IdentifierDeclType	int		245833	0					
ANR	245925	Identifier	iLenDifPerMatch		245833	1					
ANR	245926	AssignmentExpression	iLenDifPerMatch = iWithLen - iToReplaceLen		245833	2		=			
ANR	245927	Identifier	iLenDifPerMatch		245833	0					
ANR	245928	AdditiveExpression	iWithLen - iToReplaceLen		245833	1		-			
ANR	245929	Identifier	iWithLen		245833	0					
ANR	245930	Identifier	iToReplaceLen		245833	1					
ANR	245931	IdentifierDeclStatement	int iNewLen = Len + iLenDifPerMatch * listMatchesFound . Number ( ) ;	520:1:10572:10635	245833	7	True				
ANR	245932	IdentifierDecl	iNewLen = Len + iLenDifPerMatch * listMatchesFound . Number ( )		245833	0					
ANR	245933	IdentifierDeclType	int		245833	0					
ANR	245934	Identifier	iNewLen		245833	1					
ANR	245935	AssignmentExpression	iNewLen = Len + iLenDifPerMatch * listMatchesFound . Number ( )		245833	2		=			
ANR	245936	Identifier	iNewLen		245833	0					
ANR	245937	AdditiveExpression	Len + iLenDifPerMatch * listMatchesFound . Number ( )		245833	1		+			
ANR	245938	Identifier	Len		245833	0					
ANR	245939	MultiplicativeExpression	iLenDifPerMatch * listMatchesFound . Number ( )		245833	1		*			
ANR	245940	Identifier	iLenDifPerMatch		245833	0					
ANR	245941	CallExpression	listMatchesFound . Number ( )		245833	1					
ANR	245942	Callee	listMatchesFound . Number		245833	0					
ANR	245943	MemberAccess	listMatchesFound . Number		245833	0					
ANR	245944	Identifier	listMatchesFound		245833	0					
ANR	245945	Identifier	Number		245833	1					
ANR	245946	ArgumentList			245833	1					
ANR	245947	IdentifierDeclStatement	char * pNewData = new char [ iNewLen + 1 ] ;	521:1:10638:10674	245833	8	True				
ANR	245948	IdentifierDecl	* pNewData = new char [ iNewLen + 1 ]		245833	0					
ANR	245949	IdentifierDeclType	char *		245833	0					
ANR	245950	Identifier	pNewData		245833	1					
ANR	245951	AssignmentExpression	* pNewData = new char [ iNewLen + 1 ]		245833	2		=			
ANR	245952	Identifier	pNewData		245833	0					
ANR	245953	AdditiveExpression	iNewLen + 1		245833	1		+			
ANR	245954	Identifier	iNewLen		245833	0					
ANR	245955	PrimaryExpression	1		245833	1					
ANR	245956	IdentifierDeclStatement	int iItemStartInData ;	523:1:10680:10700	245833	9	True				
ANR	245957	IdentifierDecl	iItemStartInData		245833	0					
ANR	245958	IdentifierDeclType	int		245833	0					
ANR	245959	Identifier	iItemStartInData		245833	1					
ANR	245960	IdentifierDeclStatement	int iPosInNewData = 0 ;	524:1:10703:10724	245833	10	True				
ANR	245961	IdentifierDecl	iPosInNewData = 0		245833	0					
ANR	245962	IdentifierDeclType	int		245833	0					
ANR	245963	Identifier	iPosInNewData		245833	1					
ANR	245964	AssignmentExpression	iPosInNewData = 0		245833	2		=			
ANR	245965	Identifier	iPosInNewData		245833	0					
ANR	245966	PrimaryExpression	0		245833	1					
ANR	245967	IdentifierDeclStatement	int iPreviousEnd = 0 ;	525:1:10727:10747	245833	11	True				
ANR	245968	IdentifierDecl	iPreviousEnd = 0		245833	0					
ANR	245969	IdentifierDeclType	int		245833	0					
ANR	245970	Identifier	iPreviousEnd		245833	1					
ANR	245971	AssignmentExpression	iPreviousEnd = 0		245833	2		=			
ANR	245972	Identifier	iPreviousEnd		245833	0					
ANR	245973	PrimaryExpression	0		245833	1					
ANR	245974	ExpressionStatement	listMatchesFound . Rewind ( )	526:1:10750:10775	245833	12	True				
ANR	245975	CallExpression	listMatchesFound . Rewind ( )		245833	0					
ANR	245976	Callee	listMatchesFound . Rewind		245833	0					
ANR	245977	MemberAccess	listMatchesFound . Rewind		245833	0					
ANR	245978	Identifier	listMatchesFound		245833	0					
ANR	245979	Identifier	Rewind		245833	1					
ANR	245980	ArgumentList			245833	1					
ANR	245981	WhileStatement	while ( listMatchesFound . Next ( iItemStartInData ) )		245833	13					
ANR	245982	Condition	listMatchesFound . Next ( iItemStartInData )	527:7:10784:10822	245833	0	True				
ANR	245983	CallExpression	listMatchesFound . Next ( iItemStartInData )		245833	0					
ANR	245984	Callee	listMatchesFound . Next		245833	0					
ANR	245985	MemberAccess	listMatchesFound . Next		245833	0					
ANR	245986	Identifier	listMatchesFound		245833	0					
ANR	245987	Identifier	Next		245833	1					
ANR	245988	ArgumentList	iItemStartInData		245833	1					
ANR	245989	Argument	iItemStartInData		245833	0					
ANR	245990	Identifier	iItemStartInData		245833	0					
ANR	245991	CompoundStatement		28:48:722:722	245833	1					
ANR	245992	ExpressionStatement	"memcpy ( pNewData + iPosInNewData , Data + iPreviousEnd , iItemStartInData - iPreviousEnd )"	528:2:10829:10929	245833	0	True				
ANR	245993	CallExpression	"memcpy ( pNewData + iPosInNewData , Data + iPreviousEnd , iItemStartInData - iPreviousEnd )"		245833	0					
ANR	245994	Callee	memcpy		245833	0					
ANR	245995	Identifier	memcpy		245833	0					
ANR	245996	ArgumentList	pNewData + iPosInNewData		245833	1					
ANR	245997	Argument	pNewData + iPosInNewData		245833	0					
ANR	245998	AdditiveExpression	pNewData + iPosInNewData		245833	0		+			
ANR	245999	Identifier	pNewData		245833	0					
ANR	246000	Identifier	iPosInNewData		245833	1					
ANR	246001	Argument	Data + iPreviousEnd		245833	1					
ANR	246002	AdditiveExpression	Data + iPreviousEnd		245833	0		+			
ANR	246003	Identifier	Data		245833	0					
ANR	246004	Identifier	iPreviousEnd		245833	1					
ANR	246005	Argument	iItemStartInData - iPreviousEnd		245833	2					
ANR	246006	AdditiveExpression	iItemStartInData - iPreviousEnd		245833	0		-			
ANR	246007	Identifier	iItemStartInData		245833	0					
ANR	246008	Identifier	iPreviousEnd		245833	1					
ANR	246009	ExpressionStatement	iPosInNewData += ( iItemStartInData - iPreviousEnd )	531:2:10933:10983	245833	1	True				
ANR	246010	AssignmentExpression	iPosInNewData += ( iItemStartInData - iPreviousEnd )		245833	0		+=			
ANR	246011	Identifier	iPosInNewData		245833	0					
ANR	246012	AdditiveExpression	iItemStartInData - iPreviousEnd		245833	1		-			
ANR	246013	Identifier	iItemStartInData		245833	0					
ANR	246014	Identifier	iPreviousEnd		245833	1					
ANR	246015	ExpressionStatement	"memcpy ( pNewData + iPosInNewData , pszReplaceWith , iWithLen )"	532:2:10987:11045	245833	2	True				
ANR	246016	CallExpression	"memcpy ( pNewData + iPosInNewData , pszReplaceWith , iWithLen )"		245833	0					
ANR	246017	Callee	memcpy		245833	0					
ANR	246018	Identifier	memcpy		245833	0					
ANR	246019	ArgumentList	pNewData + iPosInNewData		245833	1					
ANR	246020	Argument	pNewData + iPosInNewData		245833	0					
ANR	246021	AdditiveExpression	pNewData + iPosInNewData		245833	0		+			
ANR	246022	Identifier	pNewData		245833	0					
ANR	246023	Identifier	iPosInNewData		245833	1					
ANR	246024	Argument	pszReplaceWith		245833	1					
ANR	246025	Identifier	pszReplaceWith		245833	0					
ANR	246026	Argument	iWithLen		245833	2					
ANR	246027	Identifier	iWithLen		245833	0					
ANR	246028	ExpressionStatement	iPosInNewData += iWithLen	533:2:11049:11074	245833	3	True				
ANR	246029	AssignmentExpression	iPosInNewData += iWithLen		245833	0		+=			
ANR	246030	Identifier	iPosInNewData		245833	0					
ANR	246031	Identifier	iWithLen		245833	1					
ANR	246032	ExpressionStatement	iPreviousEnd = iItemStartInData + iToReplaceLen	534:2:11078:11125	245833	4	True				
ANR	246033	AssignmentExpression	iPreviousEnd = iItemStartInData + iToReplaceLen		245833	0		=			
ANR	246034	Identifier	iPreviousEnd		245833	0					
ANR	246035	AdditiveExpression	iItemStartInData + iToReplaceLen		245833	1		+			
ANR	246036	Identifier	iItemStartInData		245833	0					
ANR	246037	Identifier	iToReplaceLen		245833	1					
ANR	246038	ExpressionStatement	"memcpy ( pNewData + iPosInNewData , Data + iPreviousEnd , Len - iPreviousEnd + 1 )"	536:1:11131:11220	245833	14	True				
ANR	246039	CallExpression	"memcpy ( pNewData + iPosInNewData , Data + iPreviousEnd , Len - iPreviousEnd + 1 )"		245833	0					
ANR	246040	Callee	memcpy		245833	0					
ANR	246041	Identifier	memcpy		245833	0					
ANR	246042	ArgumentList	pNewData + iPosInNewData		245833	1					
ANR	246043	Argument	pNewData + iPosInNewData		245833	0					
ANR	246044	AdditiveExpression	pNewData + iPosInNewData		245833	0		+			
ANR	246045	Identifier	pNewData		245833	0					
ANR	246046	Identifier	iPosInNewData		245833	1					
ANR	246047	Argument	Data + iPreviousEnd		245833	1					
ANR	246048	AdditiveExpression	Data + iPreviousEnd		245833	0		+			
ANR	246049	Identifier	Data		245833	0					
ANR	246050	Identifier	iPreviousEnd		245833	1					
ANR	246051	Argument	Len - iPreviousEnd + 1		245833	2					
ANR	246052	AdditiveExpression	Len - iPreviousEnd + 1		245833	0		-			
ANR	246053	Identifier	Len		245833	0					
ANR	246054	AdditiveExpression	iPreviousEnd + 1		245833	1		+			
ANR	246055	Identifier	iPreviousEnd		245833	0					
ANR	246056	PrimaryExpression	1		245833	1					
ANR	246057	Statement	delete	539:1:11223:11228	245833	15	True				
ANR	246058	Statement	[	539:8:11230:11230	245833	16	True				
ANR	246059	Statement	]	539:9:11231:11231	245833	17	True				
ANR	246060	ExpressionStatement	Data	539:11:11233:11237	245833	18	True				
ANR	246061	Identifier	Data		245833	0					
ANR	246062	ExpressionStatement	Data = pNewData	540:1:11240:11255	245833	19	True				
ANR	246063	AssignmentExpression	Data = pNewData		245833	0		=			
ANR	246064	Identifier	Data		245833	0					
ANR	246065	Identifier	pNewData		245833	1					
ANR	246066	ExpressionStatement	capacity = iNewLen	541:1:11258:11276	245833	20	True				
ANR	246067	AssignmentExpression	capacity = iNewLen		245833	0		=			
ANR	246068	Identifier	capacity		245833	0					
ANR	246069	Identifier	iNewLen		245833	1					
ANR	246070	ExpressionStatement	Len = iNewLen	542:1:11279:11292	245833	21	True				
ANR	246071	AssignmentExpression	Len = iNewLen		245833	0		=			
ANR	246072	Identifier	Len		245833	0					
ANR	246073	Identifier	iNewLen		245833	1					
ANR	246074	ReturnStatement	return true ;	544:1:11297:11308	245833	22	True				
ANR	246075	Identifier	true		245833	0					
ANR	246076	ReturnType	bool		245833	1					
ANR	246077	Identifier	MyString :: replaceString		245833	2					
ANR	246078	ParameterList	"const char * pszToReplace , const char * pszReplaceWith , int iStartFromPos"		245833	3					
ANR	246079	Parameter	const char * pszToReplace	497:1:10024:10047	245833	0	True				
ANR	246080	ParameterType	const char *		245833	0					
ANR	246081	Identifier	pszToReplace		245833	1					
ANR	246082	Parameter	const char * pszReplaceWith	498:1:10052:10077	245833	1	True				
ANR	246083	ParameterType	const char *		245833	0					
ANR	246084	Identifier	pszReplaceWith		245833	1					
ANR	246085	Parameter	int iStartFromPos	499:1:10082:10098	245833	2	True				
ANR	246086	ParameterType	int		245833	0					
ANR	246087	Identifier	iStartFromPos		245833	1					
ANR	246088	CFGEntryNode	ENTRY		245833		True				
ANR	246089	CFGExitNode	EXIT		245833		True				
ANR	246090	Symbol	iPosInNewData		245833						
ANR	246091	Symbol	iToReplaceLen		245833						
ANR	246092	Symbol	pszToReplace		245833						
ANR	246093	Symbol	false		245833						
ANR	246094	Symbol	iStartFromPos		245833						
ANR	246095	Symbol	listMatchesFound . Next		245833						
ANR	246096	Symbol	pNewData		245833						
ANR	246097	Symbol	iPreviousEnd		245833						
ANR	246098	Symbol	Data		245833						
ANR	246099	Symbol	capacity		245833						
ANR	246100	Symbol	iNewLen		245833						
ANR	246101	Symbol	strlen		245833						
ANR	246102	Symbol	Len		245833						
ANR	246103	Symbol	listMatchesFound . Number		245833						
ANR	246104	Symbol	listMatchesFound		245833						
ANR	246105	Symbol	find		245833						
ANR	246106	Symbol	pszReplaceWith		245833						
ANR	246107	Symbol	true		245833						
ANR	246108	Symbol	iLenDifPerMatch		245833						
ANR	246109	Symbol	iItemStartInData		245833						
ANR	246110	Symbol	iWithLen		245833						
ANR	246111	Function	MyString :: vsprintf_cat	547:0:11313:12088							
ANR	246112	FunctionDef	"MyString :: vsprintf_cat (const char * format , va_list args)"		246111	0					
ANR	246113	CompoundStatement		549:0:11375:12088	246111	0					
ANR	246114	IdentifierDeclStatement	char * buffer = NULL ;	550:1:11378:11397	246111	0	True				
ANR	246115	IdentifierDecl	* buffer = NULL		246111	0					
ANR	246116	IdentifierDeclType	char *		246111	0					
ANR	246117	Identifier	buffer		246111	1					
ANR	246118	AssignmentExpression	* buffer = NULL		246111	2		=			
ANR	246119	Identifier	NULL		246111	0					
ANR	246120	Identifier	NULL		246111	1					
ANR	246121	IdentifierDeclStatement	int s_len ;	551:1:11400:11409	246111	1	True				
ANR	246122	IdentifierDecl	s_len		246111	0					
ANR	246123	IdentifierDeclType	int		246111	0					
ANR	246124	Identifier	s_len		246111	1					
ANR	246125	IfStatement	if ( ! format || * format == '\\0' )		246111	2					
ANR	246126	Condition	! format || * format == '\\0'	553:8:11420:11445	246111	0	True				
ANR	246127	OrExpression	! format || * format == '\\0'		246111	0		||			
ANR	246128	UnaryOperationExpression	! format		246111	0					
ANR	246129	UnaryOperator	!		246111	0					
ANR	246130	Identifier	format		246111	1					
ANR	246131	EqualityExpression	* format == '\\0'		246111	1		==			
ANR	246132	UnaryOperationExpression	* format		246111	0					
ANR	246133	UnaryOperator	*		246111	0					
ANR	246134	Identifier	format		246111	1					
ANR	246135	PrimaryExpression	'\\0'		246111	1					
ANR	246136	CompoundStatement		5:37:73:73	246111	1					
ANR	246137	ReturnStatement	return true ;	554:2:11453:11464	246111	0	True				
ANR	246138	Identifier	true		246111	0					
ANR	246139	ExpressionStatement	"s_len = vasprintf ( & buffer , format , args )"	557:1:11492:11532	246111	3	True				
ANR	246140	AssignmentExpression	"s_len = vasprintf ( & buffer , format , args )"		246111	0		=			
ANR	246141	Identifier	s_len		246111	0					
ANR	246142	CallExpression	"vasprintf ( & buffer , format , args )"		246111	1					
ANR	246143	Callee	vasprintf		246111	0					
ANR	246144	Identifier	vasprintf		246111	0					
ANR	246145	ArgumentList	& buffer		246111	1					
ANR	246146	Argument	& buffer		246111	0					
ANR	246147	UnaryOperationExpression	& buffer		246111	0					
ANR	246148	UnaryOperator	&		246111	0					
ANR	246149	Identifier	buffer		246111	1					
ANR	246150	Argument	format		246111	1					
ANR	246151	Identifier	format		246111	0					
ANR	246152	Argument	args		246111	2					
ANR	246153	Identifier	args		246111	0					
ANR	246154	IfStatement	if ( - 1 == s_len )		246111	4					
ANR	246155	Condition	- 1 == s_len	558:5:11539:11549	246111	0	True				
ANR	246156	EqualityExpression	- 1 == s_len		246111	0		==			
ANR	246157	UnaryOperationExpression	- 1		246111	0					
ANR	246158	UnaryOperator	-		246111	0					
ANR	246159	PrimaryExpression	1		246111	1					
ANR	246160	Identifier	s_len		246111	1					
ANR	246161	CompoundStatement		10:18:176:176	246111	1					
ANR	246162	ReturnStatement	return false ;	559:2:11596:11608	246111	0	True				
ANR	246163	Identifier	false		246111	0					
ANR	246164	IfStatement	if ( Len + s_len > capacity || ! Data )		246111	5					
ANR	246165	Condition	Len + s_len > capacity || ! Data	564:8:11675:11705	246111	0	True				
ANR	246166	OrExpression	Len + s_len > capacity || ! Data		246111	0		||			
ANR	246167	RelationalExpression	Len + s_len > capacity		246111	0		>			
ANR	246168	AdditiveExpression	Len + s_len		246111	0		+			
ANR	246169	Identifier	Len		246111	0					
ANR	246170	Identifier	s_len		246111	1					
ANR	246171	Identifier	capacity		246111	1					
ANR	246172	UnaryOperationExpression	! Data		246111	1					
ANR	246173	UnaryOperator	!		246111	0					
ANR	246174	Identifier	Data		246111	1					
ANR	246175	CompoundStatement		16:42:333:333	246111	1					
ANR	246176	IfStatement	if ( ! reserve_at_least ( Len + s_len ) )		246111	0					
ANR	246177	Condition	! reserve_at_least ( Len + s_len )	565:5:11716:11747	246111	0	True				
ANR	246178	UnaryOperationExpression	! reserve_at_least ( Len + s_len )		246111	0					
ANR	246179	UnaryOperator	!		246111	0					
ANR	246180	CallExpression	reserve_at_least ( Len + s_len )		246111	1					
ANR	246181	Callee	reserve_at_least		246111	0					
ANR	246182	Identifier	reserve_at_least		246111	0					
ANR	246183	ArgumentList	Len + s_len		246111	1					
ANR	246184	Argument	Len + s_len		246111	0					
ANR	246185	AdditiveExpression	Len + s_len		246111	0		+			
ANR	246186	Identifier	Len		246111	0					
ANR	246187	Identifier	s_len		246111	1					
ANR	246188	CompoundStatement		17:39:374:374	246111	1					
ANR	246189	ExpressionStatement	free ( buffer )	566:3:11755:11767	246111	0	True				
ANR	246190	CallExpression	free ( buffer )		246111	0					
ANR	246191	Callee	free		246111	0					
ANR	246192	Identifier	free		246111	0					
ANR	246193	ArgumentList	buffer		246111	1					
ANR	246194	Argument	buffer		246111	0					
ANR	246195	Identifier	buffer		246111	0					
ANR	246196	ReturnStatement	return false ;	567:3:11772:11784	246111	1	True				
ANR	246197	Identifier	false		246111	0					
ANR	246198	ExpressionStatement	"memcpy ( Data + Len , buffer , s_len + 1 )"	574:1:11950:11987	246111	6	True				
ANR	246199	CallExpression	"memcpy ( Data + Len , buffer , s_len + 1 )"		246111	0					
ANR	246200	Callee	memcpy		246111	0					
ANR	246201	Identifier	memcpy		246111	0					
ANR	246202	ArgumentList	Data + Len		246111	1					
ANR	246203	Argument	Data + Len		246111	0					
ANR	246204	AdditiveExpression	Data + Len		246111	0		+			
ANR	246205	Identifier	Data		246111	0					
ANR	246206	Identifier	Len		246111	1					
ANR	246207	Argument	buffer		246111	1					
ANR	246208	Identifier	buffer		246111	0					
ANR	246209	Argument	s_len + 1		246111	2					
ANR	246210	AdditiveExpression	s_len + 1		246111	0		+			
ANR	246211	Identifier	s_len		246111	0					
ANR	246212	PrimaryExpression	1		246111	1					
ANR	246213	ExpressionStatement	free ( buffer )	575:1:11990:12002	246111	7	True				
ANR	246214	CallExpression	free ( buffer )		246111	0					
ANR	246215	Callee	free		246111	0					
ANR	246216	Identifier	free		246111	0					
ANR	246217	ArgumentList	buffer		246111	1					
ANR	246218	Argument	buffer		246111	0					
ANR	246219	Identifier	buffer		246111	0					
ANR	246220	ExpressionStatement	Len += s_len	579:1:12057:12069	246111	8	True				
ANR	246221	AssignmentExpression	Len += s_len		246111	0		+=			
ANR	246222	Identifier	Len		246111	0					
ANR	246223	Identifier	s_len		246111	1					
ANR	246224	ReturnStatement	return true ;	580:4:12075:12086	246111	9	True				
ANR	246225	Identifier	true		246111	0					
ANR	246226	ReturnType	bool		246111	1					
ANR	246227	Identifier	MyString :: vsprintf_cat		246111	2					
ANR	246228	ParameterList	"const char * format , va_list args"		246111	3					
ANR	246229	Parameter	const char * format	548:23:11341:11358	246111	0	True				
ANR	246230	ParameterType	const char *		246111	0					
ANR	246231	Identifier	format		246111	1					
ANR	246232	Parameter	va_list args	548:42:11360:11371	246111	1	True				
ANR	246233	ParameterType	va_list		246111	0					
ANR	246234	Identifier	args		246111	1					
ANR	246235	CFGEntryNode	ENTRY		246111		True				
ANR	246236	CFGExitNode	EXIT		246111		True				
ANR	246237	Symbol	reserve_at_least		246111						
ANR	246238	Symbol	vasprintf		246111						
ANR	246239	Symbol	NULL		246111						
ANR	246240	Symbol	format		246111						
ANR	246241	Symbol	s_len		246111						
ANR	246242	Symbol	false		246111						
ANR	246243	Symbol	Data		246111						
ANR	246244	Symbol	capacity		246111						
ANR	246245	Symbol	args		246111						
ANR	246246	Symbol	Len		246111						
ANR	246247	Symbol	* format		246111						
ANR	246248	Symbol	& buffer		246111						
ANR	246249	Symbol	true		246111						
ANR	246250	Symbol	buffer		246111						
ANR	246251	Function	MyString :: sprintf_cat	583:0:12091:12281							
ANR	246252	FunctionDef	MyString :: sprintf_cat (const char * format)		246251	0					
ANR	246253	CompoundStatement		585:0:12143:12281	246251	0					
ANR	246254	IdentifierDeclStatement	bool succeeded ;	586:1:12146:12163	246251	0	True				
ANR	246255	IdentifierDecl	succeeded		246251	0					
ANR	246256	IdentifierDeclType	bool		246251	0					
ANR	246257	Identifier	succeeded		246251	1					
ANR	246258	IdentifierDeclStatement	va_list args ;	587:1:12166:12178	246251	1	True				
ANR	246259	IdentifierDecl	args		246251	0					
ANR	246260	IdentifierDeclType	va_list		246251	0					
ANR	246261	Identifier	args		246251	1					
ANR	246262	ExpressionStatement	"va_start ( args , format )"	589:1:12182:12204	246251	2	True				
ANR	246263	CallExpression	"va_start ( args , format )"		246251	0					
ANR	246264	Callee	va_start		246251	0					
ANR	246265	Identifier	va_start		246251	0					
ANR	246266	ArgumentList	args		246251	1					
ANR	246267	Argument	args		246251	0					
ANR	246268	Identifier	args		246251	0					
ANR	246269	Argument	format		246251	1					
ANR	246270	Identifier	format		246251	0					
ANR	246271	ExpressionStatement	"succeeded = vsprintf_cat ( format , args )"	590:1:12207:12244	246251	3	True				
ANR	246272	AssignmentExpression	"succeeded = vsprintf_cat ( format , args )"		246251	0		=			
ANR	246273	Identifier	succeeded		246251	0					
ANR	246274	CallExpression	"vsprintf_cat ( format , args )"		246251	1					
ANR	246275	Callee	vsprintf_cat		246251	0					
ANR	246276	Identifier	vsprintf_cat		246251	0					
ANR	246277	ArgumentList	format		246251	1					
ANR	246278	Argument	format		246251	0					
ANR	246279	Identifier	format		246251	0					
ANR	246280	Argument	args		246251	1					
ANR	246281	Identifier	args		246251	0					
ANR	246282	ExpressionStatement	va_end ( args )	591:1:12247:12259	246251	4	True				
ANR	246283	CallExpression	va_end ( args )		246251	0					
ANR	246284	Callee	va_end		246251	0					
ANR	246285	Identifier	va_end		246251	0					
ANR	246286	ArgumentList	args		246251	1					
ANR	246287	Argument	args		246251	0					
ANR	246288	Identifier	args		246251	0					
ANR	246289	ReturnStatement	return succeeded ;	593:1:12263:12279	246251	5	True				
ANR	246290	Identifier	succeeded		246251	0					
ANR	246291	ReturnType	bool		246251	1					
ANR	246292	Identifier	MyString :: sprintf_cat		246251	2					
ANR	246293	ParameterList	const char * format		246251	3					
ANR	246294	Parameter	const char * format	584:22:12119:12136	246251	0	True				
ANR	246295	ParameterType	const char *		246251	0					
ANR	246296	Identifier	format		246251	1					
ANR	246297	CFGEntryNode	ENTRY		246251		True				
ANR	246298	CFGExitNode	EXIT		246251		True				
ANR	246299	Symbol	args		246251						
ANR	246300	Symbol	vsprintf_cat		246251						
ANR	246301	Symbol	format		246251						
ANR	246302	Symbol	succeeded		246251						
ANR	246303	Function	MyString :: vsprintf	596:0:12284:12414							
ANR	246304	FunctionDef	"MyString :: vsprintf (const char * format , va_list args)"		246303	0					
ANR	246305	CompoundStatement		598:0:12341:12414	246303	0					
ANR	246306	ExpressionStatement	Len = 0	599:1:12344:12351	246303	0	True				
ANR	246307	AssignmentExpression	Len = 0		246303	0		=			
ANR	246308	Identifier	Len		246303	0					
ANR	246309	PrimaryExpression	0		246303	1					
ANR	246310	IfStatement	if ( Data )		246303	1					
ANR	246311	Condition	Data	600:4:12357:12360	246303	0	True				
ANR	246312	Identifier	Data		246303	0					
ANR	246313	ExpressionStatement	Data [ 0 ] = '\\0'	600:10:12363:12377	246303	1	True				
ANR	246314	AssignmentExpression	Data [ 0 ] = '\\0'		246303	0		=			
ANR	246315	ArrayIndexing	Data [ 0 ]		246303	0					
ANR	246316	Identifier	Data		246303	0					
ANR	246317	PrimaryExpression	0		246303	1					
ANR	246318	PrimaryExpression	'\\0'		246303	1					
ANR	246319	ReturnStatement	"return vsprintf_cat ( format , args ) ;"	601:1:12380:12412	246303	2	True				
ANR	246320	CallExpression	"vsprintf_cat ( format , args )"		246303	0					
ANR	246321	Callee	vsprintf_cat		246303	0					
ANR	246322	Identifier	vsprintf_cat		246303	0					
ANR	246323	ArgumentList	format		246303	1					
ANR	246324	Argument	format		246303	0					
ANR	246325	Identifier	format		246303	0					
ANR	246326	Argument	args		246303	1					
ANR	246327	Identifier	args		246303	0					
ANR	246328	ReturnType	bool		246303	1					
ANR	246329	Identifier	MyString :: vsprintf		246303	2					
ANR	246330	ParameterList	"const char * format , va_list args"		246303	3					
ANR	246331	Parameter	const char * format	597:19:12308:12325	246303	0	True				
ANR	246332	ParameterType	const char *		246303	0					
ANR	246333	Identifier	format		246303	1					
ANR	246334	Parameter	va_list args	597:38:12327:12338	246303	1	True				
ANR	246335	ParameterType	va_list		246303	0					
ANR	246336	Identifier	args		246303	1					
ANR	246337	CFGEntryNode	ENTRY		246303		True				
ANR	246338	CFGExitNode	EXIT		246303		True				
ANR	246339	Symbol	args		246303						
ANR	246340	Symbol	vsprintf_cat		246303						
ANR	246341	Symbol	Len		246303						
ANR	246342	Symbol	format		246303						
ANR	246343	Symbol	Data		246303						
ANR	246344	Symbol	* Data		246303						
ANR	246345	Function	MyString :: sprintf	604:0:12417:12599							
ANR	246346	FunctionDef	MyString :: sprintf (const char * format)		246345	0					
ANR	246347	CompoundStatement		606:0:12465:12599	246345	0					
ANR	246348	IdentifierDeclStatement	bool succeeded ;	607:1:12468:12485	246345	0	True				
ANR	246349	IdentifierDecl	succeeded		246345	0					
ANR	246350	IdentifierDeclType	bool		246345	0					
ANR	246351	Identifier	succeeded		246345	1					
ANR	246352	IdentifierDeclStatement	va_list args ;	608:1:12488:12500	246345	1	True				
ANR	246353	IdentifierDecl	args		246345	0					
ANR	246354	IdentifierDeclType	va_list		246345	0					
ANR	246355	Identifier	args		246345	1					
ANR	246356	ExpressionStatement	"va_start ( args , format )"	610:1:12504:12526	246345	2	True				
ANR	246357	CallExpression	"va_start ( args , format )"		246345	0					
ANR	246358	Callee	va_start		246345	0					
ANR	246359	Identifier	va_start		246345	0					
ANR	246360	ArgumentList	args		246345	1					
ANR	246361	Argument	args		246345	0					
ANR	246362	Identifier	args		246345	0					
ANR	246363	Argument	format		246345	1					
ANR	246364	Identifier	format		246345	0					
ANR	246365	ExpressionStatement	"succeeded = vsprintf ( format , args )"	611:1:12529:12562	246345	3	True				
ANR	246366	AssignmentExpression	"succeeded = vsprintf ( format , args )"		246345	0		=			
ANR	246367	Identifier	succeeded		246345	0					
ANR	246368	CallExpression	"vsprintf ( format , args )"		246345	1					
ANR	246369	Callee	vsprintf		246345	0					
ANR	246370	Identifier	vsprintf		246345	0					
ANR	246371	ArgumentList	format		246345	1					
ANR	246372	Argument	format		246345	0					
ANR	246373	Identifier	format		246345	0					
ANR	246374	Argument	args		246345	1					
ANR	246375	Identifier	args		246345	0					
ANR	246376	ExpressionStatement	va_end ( args )	612:1:12565:12577	246345	4	True				
ANR	246377	CallExpression	va_end ( args )		246345	0					
ANR	246378	Callee	va_end		246345	0					
ANR	246379	Identifier	va_end		246345	0					
ANR	246380	ArgumentList	args		246345	1					
ANR	246381	Argument	args		246345	0					
ANR	246382	Identifier	args		246345	0					
ANR	246383	ReturnStatement	return succeeded ;	614:1:12581:12597	246345	5	True				
ANR	246384	Identifier	succeeded		246345	0					
ANR	246385	ReturnType	bool		246345	1					
ANR	246386	Identifier	MyString :: sprintf		246345	2					
ANR	246387	ParameterList	const char * format		246345	3					
ANR	246388	Parameter	const char * format	605:18:12441:12458	246345	0	True				
ANR	246389	ParameterType	const char *		246345	0					
ANR	246390	Identifier	format		246345	1					
ANR	246391	CFGEntryNode	ENTRY		246345		True				
ANR	246392	CFGExitNode	EXIT		246345		True				
ANR	246393	Symbol	args		246345						
ANR	246394	Symbol	format		246345						
ANR	246395	Symbol	vsprintf		246345						
ANR	246396	Symbol	succeeded		246345						
ANR	246397	Function	MyString :: lower_case	618:0:12603:12688							
ANR	246398	FunctionDef	MyString :: lower_case ()		246397	0					
ANR	246399	CompoundStatement		620:0:12635:12688	246397	0					
ANR	246400	IfStatement	if ( Data != NULL )		246397	0					
ANR	246401	Condition	Data != NULL	621:5:12642:12653	246397	0	True				
ANR	246402	EqualityExpression	Data != NULL		246397	0		!=			
ANR	246403	Identifier	Data		246397	0					
ANR	246404	Identifier	NULL		246397	1					
ANR	246405	CompoundStatement		2:19:20:20	246397	1					
ANR	246406	Statement	::	622:2:12660:12661	246397	0	True				
ANR	246407	ExpressionStatement	strlwr ( Data )	622:4:12662:12674	246397	1	True				
ANR	246408	CallExpression	strlwr ( Data )		246397	0					
ANR	246409	Callee	strlwr		246397	0					
ANR	246410	Identifier	strlwr		246397	0					
ANR	246411	ArgumentList	Data		246397	1					
ANR	246412	Argument	Data		246397	0					
ANR	246413	Identifier	Data		246397	0					
ANR	246414	ReturnStatement	return ;	624:1:12680:12686	246397	1	True				
ANR	246415	ReturnType	void		246397	1					
ANR	246416	Identifier	MyString :: lower_case		246397	2					
ANR	246417	ParameterList			246397	3					
ANR	246418	CFGEntryNode	ENTRY		246397		True				
ANR	246419	CFGExitNode	EXIT		246397		True				
ANR	246420	Symbol	NULL		246397						
ANR	246421	Symbol	Data		246397						
ANR	246422	Function	MyString :: upper_case	627:0:12691:12776							
ANR	246423	FunctionDef	MyString :: upper_case ()		246422	0					
ANR	246424	CompoundStatement		629:0:12723:12776	246422	0					
ANR	246425	IfStatement	if ( Data != NULL )		246422	0					
ANR	246426	Condition	Data != NULL	630:5:12730:12741	246422	0	True				
ANR	246427	EqualityExpression	Data != NULL		246422	0		!=			
ANR	246428	Identifier	Data		246422	0					
ANR	246429	Identifier	NULL		246422	1					
ANR	246430	CompoundStatement		2:19:20:20	246422	1					
ANR	246431	Statement	::	631:2:12748:12749	246422	0	True				
ANR	246432	ExpressionStatement	strupr ( Data )	631:4:12750:12762	246422	1	True				
ANR	246433	CallExpression	strupr ( Data )		246422	0					
ANR	246434	Callee	strupr		246422	0					
ANR	246435	Identifier	strupr		246422	0					
ANR	246436	ArgumentList	Data		246422	1					
ANR	246437	Argument	Data		246422	0					
ANR	246438	Identifier	Data		246422	0					
ANR	246439	ReturnStatement	return ;	633:1:12768:12774	246422	1	True				
ANR	246440	ReturnType	void		246422	1					
ANR	246441	Identifier	MyString :: upper_case		246422	2					
ANR	246442	ParameterList			246422	3					
ANR	246443	CFGEntryNode	ENTRY		246422		True				
ANR	246444	CFGExitNode	EXIT		246422		True				
ANR	246445	Symbol	NULL		246422						
ANR	246446	Symbol	Data		246422						
ANR	246447	Function	MyString :: chomp	636:0:12779:13056							
ANR	246448	FunctionDef	MyString :: chomp ()		246447	0					
ANR	246449	CompoundStatement		638:0:12808:13056	246447	0					
ANR	246450	IdentifierDeclStatement	bool chomped = false ;	639:1:12811:12831	246447	0	True				
ANR	246451	IdentifierDecl	chomped = false		246447	0					
ANR	246452	IdentifierDeclType	bool		246447	0					
ANR	246453	Identifier	chomped		246447	1					
ANR	246454	AssignmentExpression	chomped = false		246447	2		=			
ANR	246455	Identifier	false		246447	0					
ANR	246456	Identifier	false		246447	1					
ANR	246457	IfStatement	if ( Len == 0 )		246447	1					
ANR	246458	Condition	Len == 0	640:5:12838:12845	246447	0	True				
ANR	246459	EqualityExpression	Len == 0		246447	0		==			
ANR	246460	Identifier	Len		246447	0					
ANR	246461	PrimaryExpression	0		246447	1					
ANR	246462	CompoundStatement		3:16:40:40	246447	1					
ANR	246463	ReturnStatement	return chomped ;	641:2:12853:12867	246447	0	True				
ANR	246464	Identifier	chomped		246447	0					
ANR	246465	IfStatement	if ( Data [ Len - 1 ] == '\\n' )		246447	2					
ANR	246466	Condition	Data [ Len - 1 ] == '\\n'	643:5:12877:12895	246447	0	True				
ANR	246467	EqualityExpression	Data [ Len - 1 ] == '\\n'		246447	0		==			
ANR	246468	ArrayIndexing	Data [ Len - 1 ]		246447	0					
ANR	246469	Identifier	Data		246447	0					
ANR	246470	AdditiveExpression	Len - 1		246447	1		-			
ANR	246471	Identifier	Len		246447	0					
ANR	246472	PrimaryExpression	1		246447	1					
ANR	246473	PrimaryExpression	'\\n'		246447	1					
ANR	246474	CompoundStatement		6:27:90:90	246447	1					
ANR	246475	ExpressionStatement	Data [ Len - 1 ] = '\\0'	644:2:12903:12921	246447	0	True				
ANR	246476	AssignmentExpression	Data [ Len - 1 ] = '\\0'		246447	0		=			
ANR	246477	ArrayIndexing	Data [ Len - 1 ]		246447	0					
ANR	246478	Identifier	Data		246447	0					
ANR	246479	AdditiveExpression	Len - 1		246447	1		-			
ANR	246480	Identifier	Len		246447	0					
ANR	246481	PrimaryExpression	1		246447	1					
ANR	246482	PrimaryExpression	'\\0'		246447	1					
ANR	246483	ExpressionStatement	Len --	645:2:12925:12930	246447	1	True				
ANR	246484	PostIncDecOperationExpression	Len --		246447	0					
ANR	246485	Identifier	Len		246447	0					
ANR	246486	IncDec	--		246447	1					
ANR	246487	ExpressionStatement	chomped = true	646:2:12934:12948	246447	2	True				
ANR	246488	AssignmentExpression	chomped = true		246447	0		=			
ANR	246489	Identifier	chomped		246447	0					
ANR	246490	Identifier	true		246447	1					
ANR	246491	IfStatement	if ( ( Len > 0 ) && ( Data [ Len - 1 ] == '\\r' ) )		246447	3					
ANR	246492	Condition	( Len > 0 ) && ( Data [ Len - 1 ] == '\\r' )	647:6:12956:12993	246447	0	True				
ANR	246493	AndExpression	( Len > 0 ) && ( Data [ Len - 1 ] == '\\r' )		246447	0		&&			
ANR	246494	RelationalExpression	Len > 0		246447	0		>			
ANR	246495	Identifier	Len		246447	0					
ANR	246496	PrimaryExpression	0		246447	1					
ANR	246497	EqualityExpression	Data [ Len - 1 ] == '\\r'		246447	1		==			
ANR	246498	ArrayIndexing	Data [ Len - 1 ]		246447	0					
ANR	246499	Identifier	Data		246447	0					
ANR	246500	AdditiveExpression	Len - 1		246447	1		-			
ANR	246501	Identifier	Len		246447	0					
ANR	246502	PrimaryExpression	1		246447	1					
ANR	246503	PrimaryExpression	'\\r'		246447	1					
ANR	246504	CompoundStatement		10:47:188:188	246447	1					
ANR	246505	ExpressionStatement	Data [ Len - 1 ] = '\\0'	648:3:13002:13020	246447	0	True				
ANR	246506	AssignmentExpression	Data [ Len - 1 ] = '\\0'		246447	0		=			
ANR	246507	ArrayIndexing	Data [ Len - 1 ]		246447	0					
ANR	246508	Identifier	Data		246447	0					
ANR	246509	AdditiveExpression	Len - 1		246447	1		-			
ANR	246510	Identifier	Len		246447	0					
ANR	246511	PrimaryExpression	1		246447	1					
ANR	246512	PrimaryExpression	'\\0'		246447	1					
ANR	246513	ExpressionStatement	Len --	649:3:13025:13030	246447	1	True				
ANR	246514	PostIncDecOperationExpression	Len --		246447	0					
ANR	246515	Identifier	Len		246447	0					
ANR	246516	IncDec	--		246447	1					
ANR	246517	ReturnStatement	return chomped ;	652:1:13040:13054	246447	3	True				
ANR	246518	Identifier	chomped		246447	0					
ANR	246519	ReturnType	bool		246447	1					
ANR	246520	Identifier	MyString :: chomp		246447	2					
ANR	246521	ParameterList			246447	3					
ANR	246522	CFGEntryNode	ENTRY		246447		True				
ANR	246523	CFGExitNode	EXIT		246447		True				
ANR	246524	Symbol	* Len		246447						
ANR	246525	Symbol	Len		246447						
ANR	246526	Symbol	false		246447						
ANR	246527	Symbol	true		246447						
ANR	246528	Symbol	Data		246447						
ANR	246529	Symbol	chomped		246447						
ANR	246530	Symbol	* Data		246447						
ANR	246531	Function	MyString :: trim	655:0:13059:13355							
ANR	246532	FunctionDef	MyString :: trim ()		246531	0					
ANR	246533	CompoundStatement		657:0:13087:13355	246531	0					
ANR	246534	IfStatement	if ( Len == 0 )		246531	0					
ANR	246535	Condition	Len == 0	658:5:13094:13101	246531	0	True				
ANR	246536	EqualityExpression	Len == 0		246531	0		==			
ANR	246537	Identifier	Len		246531	0					
ANR	246538	PrimaryExpression	0		246531	1					
ANR	246539	CompoundStatement		2:16:17:17	246531	1					
ANR	246540	ReturnStatement	return ;	659:2:13109:13115	246531	0	True				
ANR	246541	IdentifierDeclStatement	int begin = 0 ;	661:1:13121:13135	246531	1	True				
ANR	246542	IdentifierDecl	begin = 0		246531	0					
ANR	246543	IdentifierDeclType	int		246531	0					
ANR	246544	Identifier	begin		246531	1					
ANR	246545	AssignmentExpression	begin = 0		246531	2		=			
ANR	246546	Identifier	begin		246531	0					
ANR	246547	PrimaryExpression	0		246531	1					
ANR	246548	WhileStatement	while ( begin < Len && isspace ( Data [ begin ] ) )		246531	2					
ANR	246549	Condition	begin < Len && isspace ( Data [ begin ] )	662:9:13146:13180	246531	0	True				
ANR	246550	AndExpression	begin < Len && isspace ( Data [ begin ] )		246531	0		&&			
ANR	246551	RelationalExpression	begin < Len		246531	0		<			
ANR	246552	Identifier	begin		246531	0					
ANR	246553	Identifier	Len		246531	1					
ANR	246554	CallExpression	isspace ( Data [ begin ] )		246531	1					
ANR	246555	Callee	isspace		246531	0					
ANR	246556	Identifier	isspace		246531	0					
ANR	246557	ArgumentList	Data [ begin ]		246531	1					
ANR	246558	Argument	Data [ begin ]		246531	0					
ANR	246559	ArrayIndexing	Data [ begin ]		246531	0					
ANR	246560	Identifier	Data		246531	0					
ANR	246561	Identifier	begin		246531	1					
ANR	246562	CompoundStatement		6:47:96:96	246531	1					
ANR	246563	ExpressionStatement	++ begin	662:49:13186:13193	246531	0	True				
ANR	246564	UnaryExpression	++ begin		246531	0					
ANR	246565	IncDec	++		246531	0					
ANR	246566	Identifier	begin		246531	1					
ANR	246567	IdentifierDeclStatement	int end = Length ( ) - 1 ;	664:1:13199:13222	246531	3	True				
ANR	246568	IdentifierDecl	end = Length ( ) - 1		246531	0					
ANR	246569	IdentifierDeclType	int		246531	0					
ANR	246570	Identifier	end		246531	1					
ANR	246571	AssignmentExpression	end = Length ( ) - 1		246531	2		=			
ANR	246572	Identifier	end		246531	0					
ANR	246573	AdditiveExpression	Length ( ) - 1		246531	1		-			
ANR	246574	CallExpression	Length ( )		246531	0					
ANR	246575	Callee	Length		246531	0					
ANR	246576	Identifier	Length		246531	0					
ANR	246577	ArgumentList			246531	1					
ANR	246578	PrimaryExpression	1		246531	1					
ANR	246579	WhileStatement	while ( end >= 0 && isspace ( Data [ end ] ) )		246531	4					
ANR	246580	Condition	end >= 0 && isspace ( Data [ end ] )	665:9:13233:13262	246531	0	True				
ANR	246581	AndExpression	end >= 0 && isspace ( Data [ end ] )		246531	0		&&			
ANR	246582	RelationalExpression	end >= 0		246531	0		>=			
ANR	246583	Identifier	end		246531	0					
ANR	246584	PrimaryExpression	0		246531	1					
ANR	246585	CallExpression	isspace ( Data [ end ] )		246531	1					
ANR	246586	Callee	isspace		246531	0					
ANR	246587	Identifier	isspace		246531	0					
ANR	246588	ArgumentList	Data [ end ]		246531	1					
ANR	246589	Argument	Data [ end ]		246531	0					
ANR	246590	ArrayIndexing	Data [ end ]		246531	0					
ANR	246591	Identifier	Data		246531	0					
ANR	246592	Identifier	end		246531	1					
ANR	246593	CompoundStatement		9:42:178:178	246531	1					
ANR	246594	ExpressionStatement	-- end	665:44:13268:13273	246531	0	True				
ANR	246595	UnaryExpression	-- end		246531	0					
ANR	246596	IncDec	--		246531	0					
ANR	246597	Identifier	end		246531	1					
ANR	246598	IfStatement	if ( begin != 0 || end != Length ( ) - 1 )		246531	5					
ANR	246599	Condition	begin != 0 || end != Length ( ) - 1	667:6:13284:13316	246531	0	True				
ANR	246600	OrExpression	begin != 0 || end != Length ( ) - 1		246531	0		||			
ANR	246601	EqualityExpression	begin != 0		246531	0		!=			
ANR	246602	Identifier	begin		246531	0					
ANR	246603	PrimaryExpression	0		246531	1					
ANR	246604	EqualityExpression	end != Length ( ) - 1		246531	1		!=			
ANR	246605	Identifier	end		246531	0					
ANR	246606	AdditiveExpression	Length ( ) - 1		246531	1		-			
ANR	246607	CallExpression	Length ( )		246531	0					
ANR	246608	Callee	Length		246531	0					
ANR	246609	Identifier	Length		246531	0					
ANR	246610	ArgumentList			246531	1					
ANR	246611	PrimaryExpression	1		246531	1					
ANR	246612	CompoundStatement		11:42:232:232	246531	1					
ANR	246613	ExpressionStatement	"* this = Substr ( begin , end )"	668:2:13324:13350	246531	0	True				
ANR	246614	AssignmentExpression	"* this = Substr ( begin , end )"		246531	0		=			
ANR	246615	UnaryOperationExpression	* this		246531	0					
ANR	246616	UnaryOperator	*		246531	0					
ANR	246617	Identifier	this		246531	1					
ANR	246618	CallExpression	"Substr ( begin , end )"		246531	1					
ANR	246619	Callee	Substr		246531	0					
ANR	246620	Identifier	Substr		246531	0					
ANR	246621	ArgumentList	begin		246531	1					
ANR	246622	Argument	begin		246531	0					
ANR	246623	Identifier	begin		246531	0					
ANR	246624	Argument	end		246531	1					
ANR	246625	Identifier	end		246531	0					
ANR	246626	ReturnType	void		246531	1					
ANR	246627	Identifier	MyString :: trim		246531	2					
ANR	246628	ParameterList			246531	3					
ANR	246629	CFGEntryNode	ENTRY		246531		True				
ANR	246630	CFGExitNode	EXIT		246531		True				
ANR	246631	Symbol	* this		246531						
ANR	246632	Symbol	Substr		246531						
ANR	246633	Symbol	Len		246531						
ANR	246634	Symbol	Length		246531						
ANR	246635	Symbol	* begin		246531						
ANR	246636	Symbol	isspace		246531						
ANR	246637	Symbol	this		246531						
ANR	246638	Symbol	Data		246531						
ANR	246639	Symbol	end		246531						
ANR	246640	Symbol	* end		246531						
ANR	246641	Symbol	begin		246531						
ANR	246642	Symbol	* Data		246531						
ANR	246643	Function	MyString :: randomlyGenerate	673:0:13427:14097							
ANR	246644	FunctionDef	"MyString :: randomlyGenerate (const char * set , int len)"		246643	0					
ANR	246645	CompoundStatement		675:0:13485:14097	246643	0					
ANR	246646	IdentifierDeclStatement	int i ;	676:1:13488:13493	246643	0	True				
ANR	246647	IdentifierDecl	i		246643	0					
ANR	246648	IdentifierDeclType	int		246643	0					
ANR	246649	Identifier	i		246643	1					
ANR	246650	IdentifierDeclStatement	int idx ;	677:1:13496:13503	246643	1	True				
ANR	246651	IdentifierDecl	idx		246643	0					
ANR	246652	IdentifierDeclType	int		246643	0					
ANR	246653	Identifier	idx		246643	1					
ANR	246654	IdentifierDeclStatement	int set_len ;	678:1:13506:13517	246643	2	True				
ANR	246655	IdentifierDecl	set_len		246643	0					
ANR	246656	IdentifierDeclType	int		246643	0					
ANR	246657	Identifier	set_len		246643	1					
ANR	246658	IfStatement	if ( ! set || len <= 0 )		246643	3					
ANR	246659	Condition	! set || len <= 0	680:8:13528:13543	246643	0	True				
ANR	246660	OrExpression	! set || len <= 0		246643	0		||			
ANR	246661	UnaryOperationExpression	! set		246643	0					
ANR	246662	UnaryOperator	!		246643	0					
ANR	246663	Identifier	set		246643	1					
ANR	246664	RelationalExpression	len <= 0		246643	1		<=			
ANR	246665	Identifier	len		246643	0					
ANR	246666	PrimaryExpression	0		246643	1					
ANR	246667	CompoundStatement		6:26:60:60	246643	1					
ANR	246668	IfStatement	if ( Data )		246643	0					
ANR	246669	Condition	Data	683:6:13687:13690	246643	0	True				
ANR	246670	Identifier	Data		246643	0					
ANR	246671	CompoundStatement		9:12:207:207	246643	1					
ANR	246672	ExpressionStatement	Data [ 0 ] = '\\0'	684:3:13698:13712	246643	0	True				
ANR	246673	AssignmentExpression	Data [ 0 ] = '\\0'		246643	0		=			
ANR	246674	ArrayIndexing	Data [ 0 ]		246643	0					
ANR	246675	Identifier	Data		246643	0					
ANR	246676	PrimaryExpression	0		246643	1					
ANR	246677	PrimaryExpression	'\\0'		246643	1					
ANR	246678	ExpressionStatement	Len = 0	686:2:13720:13727	246643	1	True				
ANR	246679	AssignmentExpression	Len = 0		246643	0		=			
ANR	246680	Identifier	Len		246643	0					
ANR	246681	PrimaryExpression	0		246643	1					
ANR	246682	ReturnStatement	return ;	688:2:13758:13764	246643	2	True				
ANR	246683	IfStatement	if ( Data )		246643	4					
ANR	246684	Condition	Data	692:8:13824:13827	246643	0	True				
ANR	246685	Identifier	Data		246643	0					
ANR	246686	CompoundStatement		18:14:344:344	246643	1					
ANR	246687	Statement	delete	693:2:13834:13839	246643	0	True				
ANR	246688	Statement	[	693:8:13840:13840	246643	1	True				
ANR	246689	Statement	]	693:9:13841:13841	246643	2	True				
ANR	246690	ExpressionStatement	Data	693:11:13843:13847	246643	3	True				
ANR	246691	Identifier	Data		246643	0					
ANR	246692	ExpressionStatement	Data = new char [ len + 1 ]	696:1:13854:13876	246643	5	True				
ANR	246693	AssignmentExpression	Data = new char [ len + 1 ]		246643	0		=			
ANR	246694	Identifier	Data		246643	0					
ANR	246695	AdditiveExpression	len + 1		246643	1		+			
ANR	246696	Identifier	len		246643	0					
ANR	246697	PrimaryExpression	1		246643	1					
ANR	246698	ExpressionStatement	Data [ len ] = '\\0'	697:1:13880:13896	246643	6	True				
ANR	246699	AssignmentExpression	Data [ len ] = '\\0'		246643	0		=			
ANR	246700	ArrayIndexing	Data [ len ]		246643	0					
ANR	246701	Identifier	Data		246643	0					
ANR	246702	Identifier	len		246643	1					
ANR	246703	PrimaryExpression	'\\0'		246643	1					
ANR	246704	ExpressionStatement	Len = len	698:1:13899:13908	246643	7	True				
ANR	246705	AssignmentExpression	Len = len		246643	0		=			
ANR	246706	Identifier	Len		246643	0					
ANR	246707	Identifier	len		246643	1					
ANR	246708	ExpressionStatement	capacity = len	699:1:13911:13925	246643	8	True				
ANR	246709	AssignmentExpression	capacity = len		246643	0		=			
ANR	246710	Identifier	capacity		246643	0					
ANR	246711	Identifier	len		246643	1					
ANR	246712	ExpressionStatement	set_len = strlen ( set )	701:1:13929:13950	246643	9	True				
ANR	246713	AssignmentExpression	set_len = strlen ( set )		246643	0		=			
ANR	246714	Identifier	set_len		246643	0					
ANR	246715	CallExpression	strlen ( set )		246643	1					
ANR	246716	Callee	strlen		246643	0					
ANR	246717	Identifier	strlen		246643	0					
ANR	246718	ArgumentList	set		246643	1					
ANR	246719	Argument	set		246643	0					
ANR	246720	Identifier	set		246643	0					
ANR	246721	ForStatement	for ( i = 0 ; i < len ; i ++ )		246643	10					
ANR	246722	ForInit	i = 0 ;	704:6:14012:14017	246643	0	True				
ANR	246723	AssignmentExpression	i = 0		246643	0		=			
ANR	246724	Identifier	i		246643	0					
ANR	246725	PrimaryExpression	0		246643	1					
ANR	246726	Condition	i < len	704:13:14019:14025	246643	1	True				
ANR	246727	RelationalExpression	i < len		246643	0		<			
ANR	246728	Identifier	i		246643	0					
ANR	246729	Identifier	len		246643	1					
ANR	246730	PostIncDecOperationExpression	i ++	704:23:14029:14031	246643	2	True				
ANR	246731	Identifier	i		246643	0					
ANR	246732	IncDec	++		246643	1					
ANR	246733	CompoundStatement		30:28:548:548	246643	3					
ANR	246734	ExpressionStatement	idx = get_random_int ( ) % set_len	705:2:14038:14070	246643	0	True				
ANR	246735	AssignmentExpression	idx = get_random_int ( ) % set_len		246643	0		=			
ANR	246736	Identifier	idx		246643	0					
ANR	246737	MultiplicativeExpression	get_random_int ( ) % set_len		246643	1		%			
ANR	246738	CallExpression	get_random_int ( )		246643	0					
ANR	246739	Callee	get_random_int		246643	0					
ANR	246740	Identifier	get_random_int		246643	0					
ANR	246741	ArgumentList			246643	1					
ANR	246742	Identifier	set_len		246643	1					
ANR	246743	ExpressionStatement	Data [ i ] = set [ idx ]	706:2:14074:14092	246643	1	True				
ANR	246744	AssignmentExpression	Data [ i ] = set [ idx ]		246643	0		=			
ANR	246745	ArrayIndexing	Data [ i ]		246643	0					
ANR	246746	Identifier	Data		246643	0					
ANR	246747	Identifier	i		246643	1					
ANR	246748	ArrayIndexing	set [ idx ]		246643	1					
ANR	246749	Identifier	set		246643	0					
ANR	246750	Identifier	idx		246643	1					
ANR	246751	ReturnType	void		246643	1					
ANR	246752	Identifier	MyString :: randomlyGenerate		246643	2					
ANR	246753	ParameterList	"const char * set , int len"		246643	3					
ANR	246754	Parameter	const char * set	674:27:13459:13473	246643	0	True				
ANR	246755	ParameterType	const char *		246643	0					
ANR	246756	Identifier	set		246643	1					
ANR	246757	Parameter	int len	674:44:13476:13482	246643	1	True				
ANR	246758	ParameterType	int		246643	0					
ANR	246759	Identifier	len		246643	1					
ANR	246760	CFGEntryNode	ENTRY		246643		True				
ANR	246761	CFGExitNode	EXIT		246643		True				
ANR	246762	Symbol	set		246643						
ANR	246763	Symbol	get_random_int		246643						
ANR	246764	Symbol	i		246643						
ANR	246765	Symbol	Data		246643						
ANR	246766	Symbol	* set		246643						
ANR	246767	Symbol	set_len		246643						
ANR	246768	Symbol	* Data		246643						
ANR	246769	Symbol	capacity		246643						
ANR	246770	Symbol	strlen		246643						
ANR	246771	Symbol	* i		246643						
ANR	246772	Symbol	len		246643						
ANR	246773	Symbol	Len		246643						
ANR	246774	Symbol	* idx		246643						
ANR	246775	Symbol	idx		246643						
ANR	246776	Symbol	* len		246643						
ANR	246777	Function	MyString :: randomlyGenerateHex	710:0:14100:14190							
ANR	246778	FunctionDef	MyString :: randomlyGenerateHex (int len)		246777	0					
ANR	246779	CompoundStatement		712:0:14144:14190	246777	0					
ANR	246780	ExpressionStatement	"randomlyGenerate ( ""0123456789abcdef"" , len )"	713:1:14147:14188	246777	0	True				
ANR	246781	CallExpression	"randomlyGenerate ( ""0123456789abcdef"" , len )"		246777	0					
ANR	246782	Callee	randomlyGenerate		246777	0					
ANR	246783	Identifier	randomlyGenerate		246777	0					
ANR	246784	ArgumentList	"""0123456789abcdef"""		246777	1					
ANR	246785	Argument	"""0123456789abcdef"""		246777	0					
ANR	246786	PrimaryExpression	"""0123456789abcdef"""		246777	0					
ANR	246787	Argument	len		246777	1					
ANR	246788	Identifier	len		246777	0					
ANR	246789	ReturnType	void		246777	1					
ANR	246790	Identifier	MyString :: randomlyGenerateHex		246777	2					
ANR	246791	ParameterList	int len		246777	3					
ANR	246792	Parameter	int len	711:30:14135:14141	246777	0	True				
ANR	246793	ParameterType	int		246777	0					
ANR	246794	Identifier	len		246777	1					
ANR	246795	CFGEntryNode	ENTRY		246777		True				
ANR	246796	CFGExitNode	EXIT		246777		True				
ANR	246797	Symbol	len		246777						
ANR	246798	Function	MyString :: init	716:0:14193:14313							
ANR	246799	FunctionDef	MyString :: init ()		246798	0					
ANR	246800	CompoundStatement		718:0:14215:14313	246798	0					
ANR	246801	ExpressionStatement	Data = NULL	719:4:14221:14230	246798	0	True				
ANR	246802	AssignmentExpression	Data = NULL		246798	0		=			
ANR	246803	Identifier	Data		246798	0					
ANR	246804	Identifier	NULL		246798	1					
ANR	246805	ExpressionStatement	Len = 0	720:4:14236:14241	246798	1	True				
ANR	246806	AssignmentExpression	Len = 0		246798	0		=			
ANR	246807	Identifier	Len		246798	0					
ANR	246808	PrimaryExpression	0		246798	1					
ANR	246809	ExpressionStatement	capacity = 0	721:4:14247:14259	246798	2	True				
ANR	246810	AssignmentExpression	capacity = 0		246798	0		=			
ANR	246811	Identifier	capacity		246798	0					
ANR	246812	PrimaryExpression	0		246798	1					
ANR	246813	ExpressionStatement	tokenBuf = NULL	722:1:14262:14277	246798	3	True				
ANR	246814	AssignmentExpression	tokenBuf = NULL		246798	0		=			
ANR	246815	Identifier	tokenBuf		246798	0					
ANR	246816	Identifier	NULL		246798	1					
ANR	246817	ExpressionStatement	nextToken = NULL	723:1:14280:14296	246798	4	True				
ANR	246818	AssignmentExpression	nextToken = NULL		246798	0		=			
ANR	246819	Identifier	nextToken		246798	0					
ANR	246820	Identifier	NULL		246798	1					
ANR	246821	ExpressionStatement	dummy = '\\0'	724:1:14299:14311	246798	5	True				
ANR	246822	AssignmentExpression	dummy = '\\0'		246798	0		=			
ANR	246823	Identifier	dummy		246798	0					
ANR	246824	PrimaryExpression	'\\0'		246798	1					
ANR	246825	ReturnType	void		246798	1					
ANR	246826	Identifier	MyString :: init		246798	2					
ANR	246827	ParameterList			246798	3					
ANR	246828	CFGEntryNode	ENTRY		246798		True				
ANR	246829	CFGExitNode	EXIT		246798		True				
ANR	246830	Symbol	dummy		246798						
ANR	246831	Symbol	NULL		246798						
ANR	246832	Symbol	Len		246798						
ANR	246833	Symbol	nextToken		246798						
ANR	246834	Symbol	Data		246798						
ANR	246835	Symbol	tokenBuf		246798						
ANR	246836	Symbol	capacity		246798						
ANR	246837	Function	operator ==	733:0:14483:14770							
ANR	246838	FunctionDef	"operator == (const MyString & S1 , const MyString & S2)"		246837	0					
ANR	246839	CompoundStatement		734:0:14539:14770	246837	0					
ANR	246840	IfStatement	if ( ( ! S1 . Data || ! S1 . Len ) && ( ! S2 . Data || ! S2 . Len ) )		246837	0					
ANR	246841	Condition	( ! S1 . Data || ! S1 . Len ) && ( ! S2 . Data || ! S2 . Len )	735:8:14549:14594	246837	0	True				
ANR	246842	AndExpression	( ! S1 . Data || ! S1 . Len ) && ( ! S2 . Data || ! S2 . Len )		246837	0		&&			
ANR	246843	OrExpression	! S1 . Data || ! S1 . Len		246837	0		||			
ANR	246844	UnaryOperationExpression	! S1 . Data		246837	0					
ANR	246845	UnaryOperator	!		246837	0					
ANR	246846	MemberAccess	S1 . Data		246837	1					
ANR	246847	Identifier	S1		246837	0					
ANR	246848	Identifier	Data		246837	1					
ANR	246849	UnaryOperationExpression	! S1 . Len		246837	1					
ANR	246850	UnaryOperator	!		246837	0					
ANR	246851	MemberAccess	S1 . Len		246837	1					
ANR	246852	Identifier	S1		246837	0					
ANR	246853	Identifier	Len		246837	1					
ANR	246854	OrExpression	! S2 . Data || ! S2 . Len		246837	1		||			
ANR	246855	UnaryOperationExpression	! S2 . Data		246837	0					
ANR	246856	UnaryOperator	!		246837	0					
ANR	246857	MemberAccess	S2 . Data		246837	1					
ANR	246858	Identifier	S2		246837	0					
ANR	246859	Identifier	Data		246837	1					
ANR	246860	UnaryOperationExpression	! S2 . Len		246837	1					
ANR	246861	UnaryOperator	!		246837	0					
ANR	246862	MemberAccess	S2 . Len		246837	1					
ANR	246863	Identifier	S2		246837	0					
ANR	246864	Identifier	Len		246837	1					
ANR	246865	CompoundStatement		2:56:57:57	246837	1					
ANR	246866	ReturnStatement	return 1 ;	736:2:14601:14609	246837	0	True				
ANR	246867	PrimaryExpression	1		246837	0					
ANR	246868	IfStatement	if ( ! S1 . Data || ! S2 . Data )		246837	1					
ANR	246869	Condition	! S1 . Data || ! S2 . Data	738:8:14622:14641	246837	0	True				
ANR	246870	OrExpression	! S1 . Data || ! S2 . Data		246837	0		||			
ANR	246871	UnaryOperationExpression	! S1 . Data		246837	0					
ANR	246872	UnaryOperator	!		246837	0					
ANR	246873	MemberAccess	S1 . Data		246837	1					
ANR	246874	Identifier	S1		246837	0					
ANR	246875	Identifier	Data		246837	1					
ANR	246876	UnaryOperationExpression	! S2 . Data		246837	1					
ANR	246877	UnaryOperator	!		246837	0					
ANR	246878	MemberAccess	S2 . Data		246837	1					
ANR	246879	Identifier	S2		246837	0					
ANR	246880	Identifier	Data		246837	1					
ANR	246881	CompoundStatement		5:30:104:104	246837	1					
ANR	246882	ReturnStatement	return 0 ;	739:2:14648:14656	246837	0	True				
ANR	246883	PrimaryExpression	0		246837	0					
ANR	246884	IfStatement	if ( S1 . Len != S2 . Len )		246837	2					
ANR	246885	Condition	S1 . Len != S2 . Len	741:5:14666:14681	246837	0	True				
ANR	246886	EqualityExpression	S1 . Len != S2 . Len		246837	0		!=			
ANR	246887	MemberAccess	S1 . Len		246837	0					
ANR	246888	Identifier	S1		246837	0					
ANR	246889	Identifier	Len		246837	1					
ANR	246890	MemberAccess	S2 . Len		246837	1					
ANR	246891	Identifier	S2		246837	0					
ANR	246892	Identifier	Len		246837	1					
ANR	246893	CompoundStatement		8:23:144:144	246837	1					
ANR	246894	ReturnStatement	return 0 ;	742:2:14688:14696	246837	0	True				
ANR	246895	PrimaryExpression	0		246837	0					
ANR	246896	IfStatement	"if ( strcmp ( S1 . Data , S2 . Data ) == 0 )"		246837	3					
ANR	246897	Condition	"strcmp ( S1 . Data , S2 . Data ) == 0"	745:8:14710:14735	246837	0	True				
ANR	246898	EqualityExpression	"strcmp ( S1 . Data , S2 . Data ) == 0"		246837	0		==			
ANR	246899	CallExpression	"strcmp ( S1 . Data , S2 . Data )"		246837	0					
ANR	246900	Callee	strcmp		246837	0					
ANR	246901	Identifier	strcmp		246837	0					
ANR	246902	ArgumentList	S1 . Data		246837	1					
ANR	246903	Argument	S1 . Data		246837	0					
ANR	246904	MemberAccess	S1 . Data		246837	0					
ANR	246905	Identifier	S1		246837	0					
ANR	246906	Identifier	Data		246837	1					
ANR	246907	Argument	S2 . Data		246837	1					
ANR	246908	MemberAccess	S2 . Data		246837	0					
ANR	246909	Identifier	S2		246837	0					
ANR	246910	Identifier	Data		246837	1					
ANR	246911	PrimaryExpression	0		246837	1					
ANR	246912	CompoundStatement		12:36:198:198	246837	1					
ANR	246913	ReturnStatement	return 1 ;	746:2:14743:14751	246837	0	True				
ANR	246914	PrimaryExpression	1		246837	0					
ANR	246915	ReturnStatement	return 0 ;	748:4:14760:14768	246837	4	True				
ANR	246916	PrimaryExpression	0		246837	0					
ANR	246917	ReturnType	int		246837	1					
ANR	246918	Identifier	operator ==		246837	2					
ANR	246919	ParameterList	"const MyString & S1 , const MyString & S2"		246837	3					
ANR	246920	Parameter	const MyString & S1	733:15:14498:14515	246837	0	True				
ANR	246921	ParameterType	const MyString &		246837	0					
ANR	246922	Identifier	S1		246837	1					
ANR	246923	Parameter	const MyString & S2	733:35:14518:14535	246837	1	True				
ANR	246924	ParameterType	const MyString &		246837	0					
ANR	246925	Identifier	S2		246837	1					
ANR	246926	CFGEntryNode	ENTRY		246837		True				
ANR	246927	CFGExitNode	EXIT		246837		True				
ANR	246928	Symbol	strcmp		246837						
ANR	246929	Symbol	S1 . Len		246837						
ANR	246930	Symbol	S2 . Data		246837						
ANR	246931	Symbol	S1 . Data		246837						
ANR	246932	Symbol	S1		246837						
ANR	246933	Symbol	S2 . Len		246837						
ANR	246934	Symbol	S2		246837						
ANR	246935	Function	operator ==	751:0:14773:15010							
ANR	246936	FunctionDef	"operator == (const MyString & S1 , const char * S2)"		246935	0					
ANR	246937	CompoundStatement		752:0:14825:15010	246935	0					
ANR	246938	IfStatement	if ( ( ! S1 . Data || ! S1 . Length ( ) ) && ( ! S2 || ! strlen ( S2 ) ) )		246935	0					
ANR	246939	Condition	( ! S1 . Data || ! S1 . Length ( ) ) && ( ! S2 || ! strlen ( S2 ) )	753:8:14835:14884	246935	0	True				
ANR	246940	AndExpression	( ! S1 . Data || ! S1 . Length ( ) ) && ( ! S2 || ! strlen ( S2 ) )		246935	0		&&			
ANR	246941	OrExpression	! S1 . Data || ! S1 . Length ( )		246935	0		||			
ANR	246942	UnaryOperationExpression	! S1 . Data		246935	0					
ANR	246943	UnaryOperator	!		246935	0					
ANR	246944	MemberAccess	S1 . Data		246935	1					
ANR	246945	Identifier	S1		246935	0					
ANR	246946	Identifier	Data		246935	1					
ANR	246947	UnaryOperationExpression	! S1 . Length ( )		246935	1					
ANR	246948	UnaryOperator	!		246935	0					
ANR	246949	CallExpression	S1 . Length ( )		246935	1					
ANR	246950	Callee	S1 . Length		246935	0					
ANR	246951	MemberAccess	S1 . Length		246935	0					
ANR	246952	Identifier	S1		246935	0					
ANR	246953	Identifier	Length		246935	1					
ANR	246954	ArgumentList			246935	1					
ANR	246955	OrExpression	! S2 || ! strlen ( S2 )		246935	1		||			
ANR	246956	UnaryOperationExpression	! S2		246935	0					
ANR	246957	UnaryOperator	!		246935	0					
ANR	246958	Identifier	S2		246935	1					
ANR	246959	UnaryOperationExpression	! strlen ( S2 )		246935	1					
ANR	246960	UnaryOperator	!		246935	0					
ANR	246961	CallExpression	strlen ( S2 )		246935	1					
ANR	246962	Callee	strlen		246935	0					
ANR	246963	Identifier	strlen		246935	0					
ANR	246964	ArgumentList	S2		246935	1					
ANR	246965	Argument	S2		246935	0					
ANR	246966	Identifier	S2		246935	0					
ANR	246967	CompoundStatement		2:60:61:61	246935	1					
ANR	246968	ReturnStatement	return 1 ;	754:2:14891:14899	246935	0	True				
ANR	246969	PrimaryExpression	1		246935	0					
ANR	246970	IfStatement	if ( ! S1 . Data || ! S2 )		246935	1					
ANR	246971	Condition	! S1 . Data || ! S2	756:8:14912:14926	246935	0	True				
ANR	246972	OrExpression	! S1 . Data || ! S2		246935	0		||			
ANR	246973	UnaryOperationExpression	! S1 . Data		246935	0					
ANR	246974	UnaryOperator	!		246935	0					
ANR	246975	MemberAccess	S1 . Data		246935	1					
ANR	246976	Identifier	S1		246935	0					
ANR	246977	Identifier	Data		246935	1					
ANR	246978	UnaryOperationExpression	! S2		246935	1					
ANR	246979	UnaryOperator	!		246935	0					
ANR	246980	Identifier	S2		246935	1					
ANR	246981	CompoundStatement		5:25:103:103	246935	1					
ANR	246982	ReturnStatement	return 0 ;	757:2:14933:14941	246935	0	True				
ANR	246983	PrimaryExpression	0		246935	0					
ANR	246984	IfStatement	"if ( strcmp ( S1 . Data , S2 ) == 0 )"		246935	2					
ANR	246985	Condition	"strcmp ( S1 . Data , S2 ) == 0"	759:8:14954:14974	246935	0	True				
ANR	246986	EqualityExpression	"strcmp ( S1 . Data , S2 ) == 0"		246935	0		==			
ANR	246987	CallExpression	"strcmp ( S1 . Data , S2 )"		246935	0					
ANR	246988	Callee	strcmp		246935	0					
ANR	246989	Identifier	strcmp		246935	0					
ANR	246990	ArgumentList	S1 . Data		246935	1					
ANR	246991	Argument	S1 . Data		246935	0					
ANR	246992	MemberAccess	S1 . Data		246935	0					
ANR	246993	Identifier	S1		246935	0					
ANR	246994	Identifier	Data		246935	1					
ANR	246995	Argument	S2		246935	1					
ANR	246996	Identifier	S2		246935	0					
ANR	246997	PrimaryExpression	0		246935	1					
ANR	246998	CompoundStatement		8:31:151:151	246935	1					
ANR	246999	ReturnStatement	return 1 ;	760:2:14981:14989	246935	0	True				
ANR	247000	PrimaryExpression	1		246935	0					
ANR	247001	ReturnStatement	return 0 ;	762:4:14998:15006	246935	3	True				
ANR	247002	PrimaryExpression	0		246935	0					
ANR	247003	ReturnType	int		246935	1					
ANR	247004	Identifier	operator ==		246935	2					
ANR	247005	ParameterList	"const MyString & S1 , const char * S2"		246935	3					
ANR	247006	Parameter	const MyString & S1	751:15:14788:14805	246935	0	True				
ANR	247007	ParameterType	const MyString &		246935	0					
ANR	247008	Identifier	S1		246935	1					
ANR	247009	Parameter	const char * S2	751:35:14808:14821	246935	1	True				
ANR	247010	ParameterType	const char *		246935	0					
ANR	247011	Identifier	S2		246935	1					
ANR	247012	CFGEntryNode	ENTRY		246935		True				
ANR	247013	CFGExitNode	EXIT		246935		True				
ANR	247014	Symbol	strcmp		246935						
ANR	247015	Symbol	strlen		246935						
ANR	247016	Symbol	S1 . Length		246935						
ANR	247017	Symbol	S1 . Data		246935						
ANR	247018	Symbol	S1		246935						
ANR	247019	Symbol	S2		246935						
ANR	247020	Function	operator ==	765:0:15013:15250							
ANR	247021	FunctionDef	"operator == (const char * S1 , const MyString & S2)"		247020	0					
ANR	247022	CompoundStatement		766:0:15065:15250	247020	0					
ANR	247023	IfStatement	if ( ( ! S2 . Data || ! S2 . Length ( ) ) && ( ! S1 || ! strlen ( S1 ) ) )		247020	0					
ANR	247024	Condition	( ! S2 . Data || ! S2 . Length ( ) ) && ( ! S1 || ! strlen ( S1 ) )	767:8:15075:15124	247020	0	True				
ANR	247025	AndExpression	( ! S2 . Data || ! S2 . Length ( ) ) && ( ! S1 || ! strlen ( S1 ) )		247020	0		&&			
ANR	247026	OrExpression	! S2 . Data || ! S2 . Length ( )		247020	0		||			
ANR	247027	UnaryOperationExpression	! S2 . Data		247020	0					
ANR	247028	UnaryOperator	!		247020	0					
ANR	247029	MemberAccess	S2 . Data		247020	1					
ANR	247030	Identifier	S2		247020	0					
ANR	247031	Identifier	Data		247020	1					
ANR	247032	UnaryOperationExpression	! S2 . Length ( )		247020	1					
ANR	247033	UnaryOperator	!		247020	0					
ANR	247034	CallExpression	S2 . Length ( )		247020	1					
ANR	247035	Callee	S2 . Length		247020	0					
ANR	247036	MemberAccess	S2 . Length		247020	0					
ANR	247037	Identifier	S2		247020	0					
ANR	247038	Identifier	Length		247020	1					
ANR	247039	ArgumentList			247020	1					
ANR	247040	OrExpression	! S1 || ! strlen ( S1 )		247020	1		||			
ANR	247041	UnaryOperationExpression	! S1		247020	0					
ANR	247042	UnaryOperator	!		247020	0					
ANR	247043	Identifier	S1		247020	1					
ANR	247044	UnaryOperationExpression	! strlen ( S1 )		247020	1					
ANR	247045	UnaryOperator	!		247020	0					
ANR	247046	CallExpression	strlen ( S1 )		247020	1					
ANR	247047	Callee	strlen		247020	0					
ANR	247048	Identifier	strlen		247020	0					
ANR	247049	ArgumentList	S1		247020	1					
ANR	247050	Argument	S1		247020	0					
ANR	247051	Identifier	S1		247020	0					
ANR	247052	CompoundStatement		2:60:61:61	247020	1					
ANR	247053	ReturnStatement	return 1 ;	768:2:15131:15139	247020	0	True				
ANR	247054	PrimaryExpression	1		247020	0					
ANR	247055	IfStatement	if ( ! S2 . Data || ! S1 )		247020	1					
ANR	247056	Condition	! S2 . Data || ! S1	770:8:15152:15166	247020	0	True				
ANR	247057	OrExpression	! S2 . Data || ! S1		247020	0		||			
ANR	247058	UnaryOperationExpression	! S2 . Data		247020	0					
ANR	247059	UnaryOperator	!		247020	0					
ANR	247060	MemberAccess	S2 . Data		247020	1					
ANR	247061	Identifier	S2		247020	0					
ANR	247062	Identifier	Data		247020	1					
ANR	247063	UnaryOperationExpression	! S1		247020	1					
ANR	247064	UnaryOperator	!		247020	0					
ANR	247065	Identifier	S1		247020	1					
ANR	247066	CompoundStatement		5:25:103:103	247020	1					
ANR	247067	ReturnStatement	return 0 ;	771:2:15173:15181	247020	0	True				
ANR	247068	PrimaryExpression	0		247020	0					
ANR	247069	IfStatement	"if ( strcmp ( S2 . Data , S1 ) == 0 )"		247020	2					
ANR	247070	Condition	"strcmp ( S2 . Data , S1 ) == 0"	773:8:15194:15214	247020	0	True				
ANR	247071	EqualityExpression	"strcmp ( S2 . Data , S1 ) == 0"		247020	0		==			
ANR	247072	CallExpression	"strcmp ( S2 . Data , S1 )"		247020	0					
ANR	247073	Callee	strcmp		247020	0					
ANR	247074	Identifier	strcmp		247020	0					
ANR	247075	ArgumentList	S2 . Data		247020	1					
ANR	247076	Argument	S2 . Data		247020	0					
ANR	247077	MemberAccess	S2 . Data		247020	0					
ANR	247078	Identifier	S2		247020	0					
ANR	247079	Identifier	Data		247020	1					
ANR	247080	Argument	S1		247020	1					
ANR	247081	Identifier	S1		247020	0					
ANR	247082	PrimaryExpression	0		247020	1					
ANR	247083	CompoundStatement		8:31:151:151	247020	1					
ANR	247084	ReturnStatement	return 1 ;	774:2:15221:15229	247020	0	True				
ANR	247085	PrimaryExpression	1		247020	0					
ANR	247086	ReturnStatement	return 0 ;	776:4:15238:15246	247020	3	True				
ANR	247087	PrimaryExpression	0		247020	0					
ANR	247088	ReturnType	int		247020	1					
ANR	247089	Identifier	operator ==		247020	2					
ANR	247090	ParameterList	"const char * S1 , const MyString & S2"		247020	3					
ANR	247091	Parameter	const char * S1	765:15:15028:15041	247020	0	True				
ANR	247092	ParameterType	const char *		247020	0					
ANR	247093	Identifier	S1		247020	1					
ANR	247094	Parameter	const MyString & S2	765:31:15044:15061	247020	1	True				
ANR	247095	ParameterType	const MyString &		247020	0					
ANR	247096	Identifier	S2		247020	1					
ANR	247097	CFGEntryNode	ENTRY		247020		True				
ANR	247098	CFGExitNode	EXIT		247020		True				
ANR	247099	Symbol	strcmp		247020						
ANR	247100	Symbol	strlen		247020						
ANR	247101	Symbol	S2 . Length		247020						
ANR	247102	Symbol	S2 . Data		247020						
ANR	247103	Symbol	S1		247020						
ANR	247104	Symbol	S2		247020						
ANR	247105	Function	operator !=	779:0:15253:15341							
ANR	247106	FunctionDef	"operator != (const MyString & S1 , const MyString & S2)"		247105	0					
ANR	247107	CompoundStatement		780:0:15309:15341	247105	0					
ANR	247108	ReturnStatement	return ( ( S1 == S2 ) ? 0 : 1 ) ;	781:1:15313:15338	247105	0	True				
ANR	247109	ConditionalExpression	( S1 == S2 ) ? 0 : 1		247105	0					
ANR	247110	Condition	S1 == S2		247105	0					
ANR	247111	EqualityExpression	S1 == S2		247105	0		==			
ANR	247112	Identifier	S1		247105	0					
ANR	247113	Identifier	S2		247105	1					
ANR	247114	PrimaryExpression	0		247105	1					
ANR	247115	PrimaryExpression	1		247105	2					
ANR	247116	ReturnType	int		247105	1					
ANR	247117	Identifier	operator !=		247105	2					
ANR	247118	ParameterList	"const MyString & S1 , const MyString & S2"		247105	3					
ANR	247119	Parameter	const MyString & S1	779:15:15268:15285	247105	0	True				
ANR	247120	ParameterType	const MyString &		247105	0					
ANR	247121	Identifier	S1		247105	1					
ANR	247122	Parameter	const MyString & S2	779:35:15288:15305	247105	1	True				
ANR	247123	ParameterType	const MyString &		247105	0					
ANR	247124	Identifier	S2		247105	1					
ANR	247125	CFGEntryNode	ENTRY		247105		True				
ANR	247126	CFGExitNode	EXIT		247105		True				
ANR	247127	Symbol	S1		247105						
ANR	247128	Symbol	S2		247105						
ANR	247129	Function	operator !=	784:0:15344:15428							
ANR	247130	FunctionDef	"operator != (const MyString & S1 , const char * S2)"		247129	0					
ANR	247131	CompoundStatement		785:0:15396:15428	247129	0					
ANR	247132	ReturnStatement	return ( ( S1 == S2 ) ? 0 : 1 ) ;	786:1:15400:15425	247129	0	True				
ANR	247133	ConditionalExpression	( S1 == S2 ) ? 0 : 1		247129	0					
ANR	247134	Condition	S1 == S2		247129	0					
ANR	247135	EqualityExpression	S1 == S2		247129	0		==			
ANR	247136	Identifier	S1		247129	0					
ANR	247137	Identifier	S2		247129	1					
ANR	247138	PrimaryExpression	0		247129	1					
ANR	247139	PrimaryExpression	1		247129	2					
ANR	247140	ReturnType	int		247129	1					
ANR	247141	Identifier	operator !=		247129	2					
ANR	247142	ParameterList	"const MyString & S1 , const char * S2"		247129	3					
ANR	247143	Parameter	const MyString & S1	784:15:15359:15376	247129	0	True				
ANR	247144	ParameterType	const MyString &		247129	0					
ANR	247145	Identifier	S1		247129	1					
ANR	247146	Parameter	const char * S2	784:35:15379:15392	247129	1	True				
ANR	247147	ParameterType	const char *		247129	0					
ANR	247148	Identifier	S2		247129	1					
ANR	247149	CFGEntryNode	ENTRY		247129		True				
ANR	247150	CFGExitNode	EXIT		247129		True				
ANR	247151	Symbol	S1		247129						
ANR	247152	Symbol	S2		247129						
ANR	247153	Function	operator !=	789:0:15431:15515							
ANR	247154	FunctionDef	"operator != (const char * S1 , const MyString & S2)"		247153	0					
ANR	247155	CompoundStatement		790:0:15483:15515	247153	0					
ANR	247156	ReturnStatement	return ( ( S1 == S2 ) ? 0 : 1 ) ;	791:1:15487:15512	247153	0	True				
ANR	247157	ConditionalExpression	( S1 == S2 ) ? 0 : 1		247153	0					
ANR	247158	Condition	S1 == S2		247153	0					
ANR	247159	EqualityExpression	S1 == S2		247153	0		==			
ANR	247160	Identifier	S1		247153	0					
ANR	247161	Identifier	S2		247153	1					
ANR	247162	PrimaryExpression	0		247153	1					
ANR	247163	PrimaryExpression	1		247153	2					
ANR	247164	ReturnType	int		247153	1					
ANR	247165	Identifier	operator !=		247153	2					
ANR	247166	ParameterList	"const char * S1 , const MyString & S2"		247153	3					
ANR	247167	Parameter	const char * S1	789:15:15446:15459	247153	0	True				
ANR	247168	ParameterType	const char *		247153	0					
ANR	247169	Identifier	S1		247153	1					
ANR	247170	Parameter	const MyString & S2	789:31:15462:15479	247153	1	True				
ANR	247171	ParameterType	const MyString &		247153	0					
ANR	247172	Identifier	S2		247153	1					
ANR	247173	CFGEntryNode	ENTRY		247153		True				
ANR	247174	CFGExitNode	EXIT		247153		True				
ANR	247175	Symbol	S1		247153						
ANR	247176	Symbol	S2		247153						
ANR	247177	Function	operator <	794:0:15518:15751							
ANR	247178	FunctionDef	"operator < (const MyString & S1 , const MyString & S2)"		247177	0					
ANR	247179	CompoundStatement		795:0:15573:15751	247177	0					
ANR	247180	IfStatement	if ( ! S1 . Data && ! S2 . Data )		247177	0					
ANR	247181	Condition	! S1 . Data && ! S2 . Data	796:8:15583:15602	247177	0	True				
ANR	247182	AndExpression	! S1 . Data && ! S2 . Data		247177	0		&&			
ANR	247183	UnaryOperationExpression	! S1 . Data		247177	0					
ANR	247184	UnaryOperator	!		247177	0					
ANR	247185	MemberAccess	S1 . Data		247177	1					
ANR	247186	Identifier	S1		247177	0					
ANR	247187	Identifier	Data		247177	1					
ANR	247188	UnaryOperationExpression	! S2 . Data		247177	1					
ANR	247189	UnaryOperator	!		247177	0					
ANR	247190	MemberAccess	S2 . Data		247177	1					
ANR	247191	Identifier	S2		247177	0					
ANR	247192	Identifier	Data		247177	1					
ANR	247193	CompoundStatement		2:30:31:31	247177	1					
ANR	247194	ReturnStatement	return 0 ;	797:2:15609:15617	247177	0	True				
ANR	247195	PrimaryExpression	0		247177	0					
ANR	247196	IfStatement	if ( ! S1 . Data || ! S2 . Data )		247177	1					
ANR	247197	Condition	! S1 . Data || ! S2 . Data	799:8:15630:15649	247177	0	True				
ANR	247198	OrExpression	! S1 . Data || ! S2 . Data		247177	0		||			
ANR	247199	UnaryOperationExpression	! S1 . Data		247177	0					
ANR	247200	UnaryOperator	!		247177	0					
ANR	247201	MemberAccess	S1 . Data		247177	1					
ANR	247202	Identifier	S1		247177	0					
ANR	247203	Identifier	Data		247177	1					
ANR	247204	UnaryOperationExpression	! S2 . Data		247177	1					
ANR	247205	UnaryOperator	!		247177	0					
ANR	247206	MemberAccess	S2 . Data		247177	1					
ANR	247207	Identifier	S2		247177	0					
ANR	247208	Identifier	Data		247177	1					
ANR	247209	CompoundStatement		5:30:78:78	247177	1					
ANR	247210	ReturnStatement	return ( S1 . Data == NULL ) ;	800:2:15656:15678	247177	0	True				
ANR	247211	EqualityExpression	S1 . Data == NULL		247177	0		==			
ANR	247212	MemberAccess	S1 . Data		247177	0					
ANR	247213	Identifier	S1		247177	0					
ANR	247214	Identifier	Data		247177	1					
ANR	247215	Identifier	NULL		247177	1					
ANR	247216	IfStatement	"if ( strcmp ( S1 . Data , S2 . Data ) < 0 )"		247177	2					
ANR	247217	Condition	"strcmp ( S1 . Data , S2 . Data ) < 0"	802:8:15691:15717	247177	0	True				
ANR	247218	RelationalExpression	"strcmp ( S1 . Data , S2 . Data ) < 0"		247177	0		<			
ANR	247219	CallExpression	"strcmp ( S1 . Data , S2 . Data )"		247177	0					
ANR	247220	Callee	strcmp		247177	0					
ANR	247221	Identifier	strcmp		247177	0					
ANR	247222	ArgumentList	S1 . Data		247177	1					
ANR	247223	Argument	S1 . Data		247177	0					
ANR	247224	MemberAccess	S1 . Data		247177	0					
ANR	247225	Identifier	S1		247177	0					
ANR	247226	Identifier	Data		247177	1					
ANR	247227	Argument	S2 . Data		247177	1					
ANR	247228	MemberAccess	S2 . Data		247177	0					
ANR	247229	Identifier	S2		247177	0					
ANR	247230	Identifier	Data		247177	1					
ANR	247231	PrimaryExpression	0		247177	1					
ANR	247232	CompoundStatement		8:37:146:146	247177	1					
ANR	247233	ReturnStatement	return 1 ;	803:2:15724:15732	247177	0	True				
ANR	247234	PrimaryExpression	1		247177	0					
ANR	247235	ReturnStatement	return 0 ;	805:4:15741:15749	247177	3	True				
ANR	247236	PrimaryExpression	0		247177	0					
ANR	247237	ReturnType	int		247177	1					
ANR	247238	Identifier	operator <		247177	2					
ANR	247239	ParameterList	"const MyString & S1 , const MyString & S2"		247177	3					
ANR	247240	Parameter	const MyString & S1	794:14:15532:15549	247177	0	True				
ANR	247241	ParameterType	const MyString &		247177	0					
ANR	247242	Identifier	S1		247177	1					
ANR	247243	Parameter	const MyString & S2	794:34:15552:15569	247177	1	True				
ANR	247244	ParameterType	const MyString &		247177	0					
ANR	247245	Identifier	S2		247177	1					
ANR	247246	CFGEntryNode	ENTRY		247177		True				
ANR	247247	CFGExitNode	EXIT		247177		True				
ANR	247248	Symbol	strcmp		247177						
ANR	247249	Symbol	NULL		247177						
ANR	247250	Symbol	S2 . Data		247177						
ANR	247251	Symbol	S1 . Data		247177						
ANR	247252	Symbol	S1		247177						
ANR	247253	Symbol	S2		247177						
ANR	247254	Function	operator <=	808:0:15754:15848							
ANR	247255	FunctionDef	"operator <= (const MyString & S1 , const MyString & S2)"		247254	0					
ANR	247256	CompoundStatement		809:0:15810:15848	247254	0					
ANR	247257	ReturnStatement	return ( S1 < S2 ) ? 1 : ( S1 == S2 ) ;	810:1:15814:15845	247254	0	True				
ANR	247258	ConditionalExpression	( S1 < S2 ) ? 1 : ( S1 == S2 )		247254	0					
ANR	247259	Condition	S1 < S2		247254	0					
ANR	247260	RelationalExpression	S1 < S2		247254	0		<			
ANR	247261	Identifier	S1		247254	0					
ANR	247262	Identifier	S2		247254	1					
ANR	247263	PrimaryExpression	1		247254	1					
ANR	247264	EqualityExpression	S1 == S2		247254	2		==			
ANR	247265	Identifier	S1		247254	0					
ANR	247266	Identifier	S2		247254	1					
ANR	247267	ReturnType	int		247254	1					
ANR	247268	Identifier	operator <=		247254	2					
ANR	247269	ParameterList	"const MyString & S1 , const MyString & S2"		247254	3					
ANR	247270	Parameter	const MyString & S1	808:15:15769:15786	247254	0	True				
ANR	247271	ParameterType	const MyString &		247254	0					
ANR	247272	Identifier	S1		247254	1					
ANR	247273	Parameter	const MyString & S2	808:35:15789:15806	247254	1	True				
ANR	247274	ParameterType	const MyString &		247254	0					
ANR	247275	Identifier	S2		247254	1					
ANR	247276	CFGEntryNode	ENTRY		247254		True				
ANR	247277	CFGExitNode	EXIT		247254		True				
ANR	247278	Symbol	S1		247254						
ANR	247279	Symbol	S2		247254						
ANR	247280	Function	operator >	813:0:15851:15933							
ANR	247281	FunctionDef	"operator > (const MyString & S1 , const MyString & S2)"		247280	0					
ANR	247282	CompoundStatement		814:0:15906:15933	247280	0					
ANR	247283	ReturnStatement	return ( ! ( S1 <= S2 ) ) ;	815:1:15910:15930	247280	0	True				
ANR	247284	UnaryOperationExpression	! ( S1 <= S2 )		247280	0					
ANR	247285	UnaryOperator	!		247280	0					
ANR	247286	RelationalExpression	S1 <= S2		247280	1		<=			
ANR	247287	Identifier	S1		247280	0					
ANR	247288	Identifier	S2		247280	1					
ANR	247289	ReturnType	int		247280	1					
ANR	247290	Identifier	operator >		247280	2					
ANR	247291	ParameterList	"const MyString & S1 , const MyString & S2"		247280	3					
ANR	247292	Parameter	const MyString & S1	813:14:15865:15882	247280	0	True				
ANR	247293	ParameterType	const MyString &		247280	0					
ANR	247294	Identifier	S1		247280	1					
ANR	247295	Parameter	const MyString & S2	813:34:15885:15902	247280	1	True				
ANR	247296	ParameterType	const MyString &		247280	0					
ANR	247297	Identifier	S2		247280	1					
ANR	247298	CFGEntryNode	ENTRY		247280		True				
ANR	247299	CFGExitNode	EXIT		247280		True				
ANR	247300	Symbol	S1		247280						
ANR	247301	Symbol	S2		247280						
ANR	247302	Function	operator >=	818:0:15936:16016							
ANR	247303	FunctionDef	"operator >= (const MyString & S1 , const MyString & S2)"		247302	0					
ANR	247304	CompoundStatement		819:0:15992:16016	247302	0					
ANR	247305	ReturnStatement	return ( ! ( S1 < S2 ) ) ;	820:1:15996:16013	247302	0	True				
ANR	247306	UnaryOperationExpression	! ( S1 < S2 )		247302	0					
ANR	247307	UnaryOperator	!		247302	0					
ANR	247308	RelationalExpression	S1 < S2		247302	1		<			
ANR	247309	Identifier	S1		247302	0					
ANR	247310	Identifier	S2		247302	1					
ANR	247311	ReturnType	int		247302	1					
ANR	247312	Identifier	operator >=		247302	2					
ANR	247313	ParameterList	"const MyString & S1 , const MyString & S2"		247302	3					
ANR	247314	Parameter	const MyString & S1	818:15:15951:15968	247302	0	True				
ANR	247315	ParameterType	const MyString &		247302	0					
ANR	247316	Identifier	S1		247302	1					
ANR	247317	Parameter	const MyString & S2	818:35:15971:15988	247302	1	True				
ANR	247318	ParameterType	const MyString &		247302	0					
ANR	247319	Identifier	S2		247302	1					
ANR	247320	CFGEntryNode	ENTRY		247302		True				
ANR	247321	CFGExitNode	EXIT		247302		True				
ANR	247322	Symbol	S1		247302						
ANR	247323	Symbol	S2		247302						
ANR	247324	Function	MyString :: readLine	829:0:16177:16603							
ANR	247325	FunctionDef	"MyString :: readLine (FILE * fp , bool append)"		247324	0					
ANR	247326	CompoundStatement		831:0:16226:16603	247324	0					
ANR	247327	IdentifierDeclStatement	char buf [ 1024 ] ;	832:1:16229:16243	247324	0	True				
ANR	247328	IdentifierDecl	buf [ 1024 ]		247324	0					
ANR	247329	IdentifierDeclType	char [ 1024 ]		247324	0					
ANR	247330	Identifier	buf		247324	1					
ANR	247331	PrimaryExpression	1024		247324	2					
ANR	247332	IdentifierDeclStatement	bool first_time = true ;	833:1:16246:16268	247324	1	True				
ANR	247333	IdentifierDecl	first_time = true		247324	0					
ANR	247334	IdentifierDeclType	bool		247324	0					
ANR	247335	Identifier	first_time		247324	1					
ANR	247336	AssignmentExpression	first_time = true		247324	2		=			
ANR	247337	Identifier	true		247324	0					
ANR	247338	Identifier	true		247324	1					
ANR	247339	ExpressionStatement	ASSERT ( fp )	835:1:16272:16284	247324	2	True				
ANR	247340	CallExpression	ASSERT ( fp )		247324	0					
ANR	247341	Callee	ASSERT		247324	0					
ANR	247342	Identifier	ASSERT		247324	0					
ANR	247343	ArgumentList	fp		247324	1					
ANR	247344	Argument	fp		247324	0					
ANR	247345	Identifier	fp		247324	0					
ANR	247346	WhileStatement	while ( 1 )		247324	3					
ANR	247347	Condition	1	837:8:16295:16295	247324	0	True				
ANR	247348	PrimaryExpression	1		247324	0					
ANR	247349	CompoundStatement		7:12:72:72	247324	1					
ANR	247350	IfStatement	"if ( ! fgets ( buf , 1024 , fp ) )"		247324	0					
ANR	247351	Condition	"! fgets ( buf , 1024 , fp )"	838:6:16307:16328	247324	0	True				
ANR	247352	UnaryOperationExpression	"! fgets ( buf , 1024 , fp )"		247324	0					
ANR	247353	UnaryOperator	!		247324	0					
ANR	247354	CallExpression	"fgets ( buf , 1024 , fp )"		247324	1					
ANR	247355	Callee	fgets		247324	0					
ANR	247356	Identifier	fgets		247324	0					
ANR	247357	ArgumentList	buf		247324	1					
ANR	247358	Argument	buf		247324	0					
ANR	247359	Identifier	buf		247324	0					
ANR	247360	Argument	1024		247324	1					
ANR	247361	PrimaryExpression	1024		247324	0					
ANR	247362	Argument	fp		247324	2					
ANR	247363	Identifier	fp		247324	0					
ANR	247364	CompoundStatement		8:31:105:105	247324	1					
ANR	247365	IfStatement	if ( first_time )		247324	0					
ANR	247366	Condition	first_time	839:7:16341:16350	247324	0	True				
ANR	247367	Identifier	first_time		247324	0					
ANR	247368	CompoundStatement		9:20:127:127	247324	1					
ANR	247369	ReturnStatement	return false ;	840:4:16360:16372	247324	0	True				
ANR	247370	Identifier	false		247324	0					
ANR	247371	ReturnStatement	return true ;	842:3:16382:16393	247324	1	True				
ANR	247372	Identifier	true		247324	0					
ANR	247373	IfStatement	if ( first_time && ! append )		247324	1					
ANR	247374	Condition	first_time && ! append	844:6:16405:16425	247324	0	True				
ANR	247375	AndExpression	first_time && ! append		247324	0		&&			
ANR	247376	Identifier	first_time		247324	0					
ANR	247377	UnaryOperationExpression	! append		247324	1					
ANR	247378	UnaryOperator	!		247324	0					
ANR	247379	Identifier	append		247324	1					
ANR	247380	CompoundStatement		14:29:201:201	247324	1					
ANR	247381	ExpressionStatement	* this = buf	845:3:16433:16444	247324	0	True				
ANR	247382	AssignmentExpression	* this = buf		247324	0		=			
ANR	247383	UnaryOperationExpression	* this		247324	0					
ANR	247384	UnaryOperator	*		247324	0					
ANR	247385	Identifier	this		247324	1					
ANR	247386	Identifier	buf		247324	1					
ANR	247387	ExpressionStatement	first_time = false	846:3:16449:16467	247324	1	True				
ANR	247388	AssignmentExpression	first_time = false		247324	0		=			
ANR	247389	Identifier	first_time		247324	0					
ANR	247390	Identifier	false		247324	1					
ANR	247391	ElseStatement	else		247324	0					
ANR	247392	CompoundStatement		17:9:251:251	247324	0					
ANR	247393	ExpressionStatement	* this += buf	848:3:16483:16495	247324	0	True				
ANR	247394	AssignmentExpression	* this += buf		247324	0		+=			
ANR	247395	UnaryOperationExpression	* this		247324	0					
ANR	247396	UnaryOperator	*		247324	0					
ANR	247397	Identifier	this		247324	1					
ANR	247398	Identifier	buf		247324	1					
ANR	247399	IfStatement	if ( Len && Data [ Len - 1 ] == '\\n' )		247324	2					
ANR	247400	Condition	Len && Data [ Len - 1 ] == '\\n'	850:6:16507:16532	247324	0	True				
ANR	247401	AndExpression	Len && Data [ Len - 1 ] == '\\n'		247324	0		&&			
ANR	247402	Identifier	Len		247324	0					
ANR	247403	EqualityExpression	Data [ Len - 1 ] == '\\n'		247324	1		==			
ANR	247404	ArrayIndexing	Data [ Len - 1 ]		247324	0					
ANR	247405	Identifier	Data		247324	0					
ANR	247406	AdditiveExpression	Len - 1		247324	1		-			
ANR	247407	Identifier	Len		247324	0					
ANR	247408	PrimaryExpression	1		247324	1					
ANR	247409	PrimaryExpression	'\\n'		247324	1					
ANR	247410	CompoundStatement		20:35:309:309	247324	1					
ANR	247411	ReturnStatement	return true ;	852:3:16583:16594	247324	0	True				
ANR	247412	Identifier	true		247324	0					
ANR	247413	ReturnType	bool		247324	1					
ANR	247414	Identifier	MyString :: readLine		247324	2					
ANR	247415	ParameterList	"FILE * fp , bool append"		247324	3					
ANR	247416	Parameter	FILE * fp	830:20:16202:16209	247324	0	True				
ANR	247417	ParameterType	FILE *		247324	0					
ANR	247418	Identifier	fp		247324	1					
ANR	247419	Parameter	bool append	830:30:16212:16222	247324	1	True				
ANR	247420	ParameterType	bool		247324	0					
ANR	247421	Identifier	append		247324	1					
ANR	247422	CFGEntryNode	ENTRY		247324		True				
ANR	247423	CFGExitNode	EXIT		247324		True				
ANR	247424	Symbol	* Len		247324						
ANR	247425	Symbol	false		247324						
ANR	247426	Symbol	this		247324						
ANR	247427	Symbol	fp		247324						
ANR	247428	Symbol	Data		247324						
ANR	247429	Symbol	fgets		247324						
ANR	247430	Symbol	* Data		247324						
ANR	247431	Symbol	* this		247324						
ANR	247432	Symbol	buf		247324						
ANR	247433	Symbol	Len		247324						
ANR	247434	Symbol	first_time		247324						
ANR	247435	Symbol	true		247324						
ANR	247436	Symbol	append		247324						
ANR	247437	Function	MyString :: Tokenize	863:0:16769:16977							
ANR	247438	FunctionDef	MyString :: Tokenize ()		247437	0					
ANR	247439	CompoundStatement		865:0:16795:16977	247437	0					
ANR	247440	Statement	delete	866:1:16798:16803	247437	0	True				
ANR	247441	Statement	[	866:8:16805:16805	247437	1	True				
ANR	247442	Statement	]	866:9:16806:16806	247437	2	True				
ANR	247443	ExpressionStatement	tokenBuf	866:11:16808:16816	247437	3	True				
ANR	247444	Identifier	tokenBuf		247437	0					
ANR	247445	ExpressionStatement	tokenBuf = new char [ strlen ( Value ( ) ) + 1 ]	867:1:16819:16859	247437	4	True				
ANR	247446	AssignmentExpression	tokenBuf = new char [ strlen ( Value ( ) ) + 1 ]		247437	0		=			
ANR	247447	Identifier	tokenBuf		247437	0					
ANR	247448	AdditiveExpression	strlen ( Value ( ) ) + 1		247437	1		+			
ANR	247449	CallExpression	strlen ( Value ( ) )		247437	0					
ANR	247450	Callee	strlen		247437	0					
ANR	247451	Identifier	strlen		247437	0					
ANR	247452	ArgumentList	Value ( )		247437	1					
ANR	247453	Argument	Value ( )		247437	0					
ANR	247454	CallExpression	Value ( )		247437	0					
ANR	247455	Callee	Value		247437	0					
ANR	247456	Identifier	Value		247437	0					
ANR	247457	ArgumentList			247437	1					
ANR	247458	PrimaryExpression	1		247437	1					
ANR	247459	ExpressionStatement	"strcpy ( tokenBuf , Value ( ) )"	868:1:16862:16887	247437	5	True				
ANR	247460	CallExpression	"strcpy ( tokenBuf , Value ( ) )"		247437	0					
ANR	247461	Callee	strcpy		247437	0					
ANR	247462	Identifier	strcpy		247437	0					
ANR	247463	ArgumentList	tokenBuf		247437	1					
ANR	247464	Argument	tokenBuf		247437	0					
ANR	247465	Identifier	tokenBuf		247437	0					
ANR	247466	Argument	Value ( )		247437	1					
ANR	247467	CallExpression	Value ( )		247437	0					
ANR	247468	Callee	Value		247437	0					
ANR	247469	Identifier	Value		247437	0					
ANR	247470	ArgumentList			247437	1					
ANR	247471	IfStatement	if ( strlen ( tokenBuf ) > 0 )		247437	6					
ANR	247472	Condition	strlen ( tokenBuf ) > 0	869:6:16895:16914	247437	0	True				
ANR	247473	RelationalExpression	strlen ( tokenBuf ) > 0		247437	0		>			
ANR	247474	CallExpression	strlen ( tokenBuf )		247437	0					
ANR	247475	Callee	strlen		247437	0					
ANR	247476	Identifier	strlen		247437	0					
ANR	247477	ArgumentList	tokenBuf		247437	1					
ANR	247478	Argument	tokenBuf		247437	0					
ANR	247479	Identifier	tokenBuf		247437	0					
ANR	247480	PrimaryExpression	0		247437	1					
ANR	247481	CompoundStatement		5:29:122:122	247437	1					
ANR	247482	ExpressionStatement	nextToken = tokenBuf	870:2:16922:16942	247437	0	True				
ANR	247483	AssignmentExpression	nextToken = tokenBuf		247437	0		=			
ANR	247484	Identifier	nextToken		247437	0					
ANR	247485	Identifier	tokenBuf		247437	1					
ANR	247486	ElseStatement	else		247437	0					
ANR	247487	CompoundStatement		7:8:156:156	247437	0					
ANR	247488	ExpressionStatement	nextToken = NULL	872:2:16956:16972	247437	0	True				
ANR	247489	AssignmentExpression	nextToken = NULL		247437	0		=			
ANR	247490	Identifier	nextToken		247437	0					
ANR	247491	Identifier	NULL		247437	1					
ANR	247492	ReturnType	void		247437	1					
ANR	247493	Identifier	MyString :: Tokenize		247437	2					
ANR	247494	ParameterList			247437	3					
ANR	247495	CFGEntryNode	ENTRY		247437		True				
ANR	247496	CFGExitNode	EXIT		247437		True				
ANR	247497	Symbol	strlen		247437						
ANR	247498	Symbol	NULL		247437						
ANR	247499	Symbol	nextToken		247437						
ANR	247500	Symbol	Value		247437						
ANR	247501	Symbol	tokenBuf		247437						
ANR	247502	Function	MyString :: GetNextToken	876:0:16980:17497							
ANR	247503	FunctionDef	"MyString :: GetNextToken (const char * delim , bool skipBlankTokens)"		247502	0					
ANR	247504	CompoundStatement		878:0:17057:17497	247502	0					
ANR	247505	IdentifierDeclStatement	const char * result = nextToken ;	879:1:17060:17090	247502	0	True				
ANR	247506	IdentifierDecl	* result = nextToken		247502	0					
ANR	247507	IdentifierDeclType	const char *		247502	0					
ANR	247508	Identifier	result		247502	1					
ANR	247509	AssignmentExpression	* result = nextToken		247502	2		=			
ANR	247510	Identifier	nextToken		247502	0					
ANR	247511	Identifier	nextToken		247502	1					
ANR	247512	IfStatement	if ( ! delim || strlen ( delim ) == 0 )		247502	1					
ANR	247513	Condition	! delim || strlen ( delim ) == 0	881:6:17099:17126	247502	0	True				
ANR	247514	OrExpression	! delim || strlen ( delim ) == 0		247502	0		||			
ANR	247515	UnaryOperationExpression	! delim		247502	0					
ANR	247516	UnaryOperator	!		247502	0					
ANR	247517	Identifier	delim		247502	1					
ANR	247518	EqualityExpression	strlen ( delim ) == 0		247502	1		==			
ANR	247519	CallExpression	strlen ( delim )		247502	0					
ANR	247520	Callee	strlen		247502	0					
ANR	247521	Identifier	strlen		247502	0					
ANR	247522	ArgumentList	delim		247502	1					
ANR	247523	Argument	delim		247502	0					
ANR	247524	Identifier	delim		247502	0					
ANR	247525	PrimaryExpression	0		247502	1					
ANR	247526	ExpressionStatement	result = NULL	881:37:17130:17143	247502	1	True				
ANR	247527	AssignmentExpression	result = NULL		247502	0		=			
ANR	247528	Identifier	result		247502	0					
ANR	247529	Identifier	NULL		247502	1					
ANR	247530	IfStatement	if ( result != NULL )		247502	2					
ANR	247531	Condition	result != NULL	883:6:17152:17165	247502	0	True				
ANR	247532	EqualityExpression	result != NULL		247502	0		!=			
ANR	247533	Identifier	result		247502	0					
ANR	247534	Identifier	NULL		247502	1					
ANR	247535	CompoundStatement		6:23:111:111	247502	1					
ANR	247536	WhileStatement	"while ( * nextToken != '\\0' && index ( delim , * nextToken ) == NULL )"		247502	0					
ANR	247537	Condition	"* nextToken != '\\0' && index ( delim , * nextToken ) == NULL"	884:10:17181:17234	247502	0	True				
ANR	247538	AndExpression	"* nextToken != '\\0' && index ( delim , * nextToken ) == NULL"		247502	0		&&			
ANR	247539	EqualityExpression	* nextToken != '\\0'		247502	0		!=			
ANR	247540	UnaryOperationExpression	* nextToken		247502	0					
ANR	247541	UnaryOperator	*		247502	0					
ANR	247542	Identifier	nextToken		247502	1					
ANR	247543	PrimaryExpression	'\\0'		247502	1					
ANR	247544	EqualityExpression	"index ( delim , * nextToken ) == NULL"		247502	1		==			
ANR	247545	CallExpression	"index ( delim , * nextToken )"		247502	0					
ANR	247546	Callee	index		247502	0					
ANR	247547	Identifier	index		247502	0					
ANR	247548	ArgumentList	delim		247502	1					
ANR	247549	Argument	delim		247502	0					
ANR	247550	Identifier	delim		247502	0					
ANR	247551	Argument	* nextToken		247502	1					
ANR	247552	UnaryOperationExpression	* nextToken		247502	0					
ANR	247553	UnaryOperator	*		247502	0					
ANR	247554	Identifier	nextToken		247502	1					
ANR	247555	Identifier	NULL		247502	1					
ANR	247556	CompoundStatement		7:67:180:180	247502	1					
ANR	247557	ExpressionStatement	nextToken ++	885:3:17243:17254	247502	0	True				
ANR	247558	PostIncDecOperationExpression	nextToken ++		247502	0					
ANR	247559	Identifier	nextToken		247502	0					
ANR	247560	IncDec	++		247502	1					
ANR	247561	IfStatement	if ( * nextToken != '\\0' )		247502	1					
ANR	247562	Condition	* nextToken != '\\0'	888:7:17268:17285	247502	0	True				
ANR	247563	EqualityExpression	* nextToken != '\\0'		247502	0		!=			
ANR	247564	UnaryOperationExpression	* nextToken		247502	0					
ANR	247565	UnaryOperator	*		247502	0					
ANR	247566	Identifier	nextToken		247502	1					
ANR	247567	PrimaryExpression	'\\0'		247502	1					
ANR	247568	CompoundStatement		11:28:231:231	247502	1					
ANR	247569	ExpressionStatement	* nextToken = '\\0'	889:3:17294:17311	247502	0	True				
ANR	247570	AssignmentExpression	* nextToken = '\\0'		247502	0		=			
ANR	247571	UnaryOperationExpression	* nextToken		247502	0					
ANR	247572	UnaryOperator	*		247502	0					
ANR	247573	Identifier	nextToken		247502	1					
ANR	247574	PrimaryExpression	'\\0'		247502	1					
ANR	247575	ExpressionStatement	nextToken ++	890:3:17316:17327	247502	1	True				
ANR	247576	PostIncDecOperationExpression	nextToken ++		247502	0					
ANR	247577	Identifier	nextToken		247502	0					
ANR	247578	IncDec	++		247502	1					
ANR	247579	ElseStatement	else		247502	0					
ANR	247580	CompoundStatement		14:9:280:280	247502	0					
ANR	247581	ExpressionStatement	nextToken = NULL	892:3:17343:17359	247502	0	True				
ANR	247582	AssignmentExpression	nextToken = NULL		247502	0		=			
ANR	247583	Identifier	nextToken		247502	0					
ANR	247584	Identifier	NULL		247502	1					
ANR	247585	IfStatement	if ( skipBlankTokens && result && strlen ( result ) == 0 )		247502	3					
ANR	247586	Condition	skipBlankTokens && result && strlen ( result ) == 0	896:6:17375:17422	247502	0	True				
ANR	247587	AndExpression	skipBlankTokens && result && strlen ( result ) == 0		247502	0		&&			
ANR	247588	Identifier	skipBlankTokens		247502	0					
ANR	247589	AndExpression	result && strlen ( result ) == 0		247502	1		&&			
ANR	247590	Identifier	result		247502	0					
ANR	247591	EqualityExpression	strlen ( result ) == 0		247502	1		==			
ANR	247592	CallExpression	strlen ( result )		247502	0					
ANR	247593	Callee	strlen		247502	0					
ANR	247594	Identifier	strlen		247502	0					
ANR	247595	ArgumentList	result		247502	1					
ANR	247596	Argument	result		247502	0					
ANR	247597	Identifier	result		247502	0					
ANR	247598	PrimaryExpression	0		247502	1					
ANR	247599	CompoundStatement		19:57:368:368	247502	1					
ANR	247600	ExpressionStatement	"result = GetNextToken ( delim , skipBlankTokens )"	897:2:17430:17475	247502	0	True				
ANR	247601	AssignmentExpression	"result = GetNextToken ( delim , skipBlankTokens )"		247502	0		=			
ANR	247602	Identifier	result		247502	0					
ANR	247603	CallExpression	"GetNextToken ( delim , skipBlankTokens )"		247502	1					
ANR	247604	Callee	GetNextToken		247502	0					
ANR	247605	Identifier	GetNextToken		247502	0					
ANR	247606	ArgumentList	delim		247502	1					
ANR	247607	Argument	delim		247502	0					
ANR	247608	Identifier	delim		247502	0					
ANR	247609	Argument	skipBlankTokens		247502	1					
ANR	247610	Identifier	skipBlankTokens		247502	0					
ANR	247611	ReturnStatement	return result ;	900:1:17482:17495	247502	4	True				
ANR	247612	Identifier	result		247502	0					
ANR	247613	ReturnType	const char *		247502	1					
ANR	247614	Identifier	MyString :: GetNextToken		247502	2					
ANR	247615	ParameterList	"const char * delim , bool skipBlankTokens"		247502	3					
ANR	247616	Parameter	const char * delim	877:23:17016:17032	247502	0	True				
ANR	247617	ParameterType	const char *		247502	0					
ANR	247618	Identifier	delim		247502	1					
ANR	247619	Parameter	bool skipBlankTokens	877:42:17035:17054	247502	1	True				
ANR	247620	ParameterType	bool		247502	0					
ANR	247621	Identifier	skipBlankTokens		247502	1					
ANR	247622	CFGEntryNode	ENTRY		247502		True				
ANR	247623	CFGExitNode	EXIT		247502		True				
ANR	247624	Symbol	result		247502						
ANR	247625	Symbol	strlen		247502						
ANR	247626	Symbol	NULL		247502						
ANR	247627	Symbol	* nextToken		247502						
ANR	247628	Symbol	skipBlankTokens		247502						
ANR	247629	Symbol	nextToken		247502						
ANR	247630	Symbol	GetNextToken		247502						
ANR	247631	Symbol	index		247502						
ANR	247632	Symbol	delim		247502						
ANR	247633	Function	MyStringHash	910:0:17663:17734							
ANR	247634	FunctionDef	MyStringHash (const MyString & str)		247633	0					
ANR	247635	CompoundStatement		911:0:17712:17734	247633	0					
ANR	247636	ReturnStatement	return str . Hash ( ) ;	912:1:17715:17732	247633	0	True				
ANR	247637	CallExpression	str . Hash ( )		247633	0					
ANR	247638	Callee	str . Hash		247633	0					
ANR	247639	MemberAccess	str . Hash		247633	0					
ANR	247640	Identifier	str		247633	0					
ANR	247641	Identifier	Hash		247633	1					
ANR	247642	ArgumentList			247633	1					
ANR	247643	ReturnType	unsigned int		247633	1					
ANR	247644	Identifier	MyStringHash		247633	2					
ANR	247645	ParameterList	const MyString & str		247633	3					
ANR	247646	Parameter	const MyString & str	910:27:17690:17708	247633	0	True				
ANR	247647	ParameterType	const MyString &		247633	0					
ANR	247648	Identifier	str		247633	1					
ANR	247649	CFGEntryNode	ENTRY		247633		True				
ANR	247650	CFGExitNode	EXIT		247633		True				
ANR	247651	Symbol	str		247633						
ANR	247652	Symbol	str . Hash		247633						
