command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5266066	File	data/converged/CVE-2011-4930_htcondor/stream.cpp								
ANR	5266067	DeclStmt									
ANR	5266068	Decl							int	int	putcount
ANR	5266069	DeclStmt									
ANR	5266070	Decl							int	int	getcount
ANR	5266071	DeclStmt									
ANR	5266072	Decl							int	int	Stream :: timeout_multiplier
ANR	5266073	DeclStmt									
ANR	5266074	Decl							int	int	shipcount
ANR	5266075	Function	Stream :: Stream	58:0:1518:1981							
ANR	5266076	FunctionDef	Stream :: Stream (stream_code c)		5266075	0					
ANR	5266077	CompoundStatement		74:0:1979:1981	5266075	0					
ANR	5266078	Identifier	Stream :: Stream		5266075	1					
ANR	5266079	ParameterList	stream_code c		5266075	2					
ANR	5266080	Parameter	stream_code c	58:17:1535:1547	5266075	0	True				
ANR	5266081	ParameterType	stream_code		5266075	0					
ANR	5266082	Identifier	c		5266075	1					
ANR	5266083	CFGEntryNode	ENTRY		5266075		True				
ANR	5266084	CFGExitNode	EXIT		5266075		True				
ANR	5266085	Symbol	c		5266075						
ANR	5266086	Function	Stream :: ~Stream	85:0:2179:2331							
ANR	5266087	FunctionDef	Stream :: ~Stream ()		5266086	0					
ANR	5266088	CompoundStatement		86:0:2199:2331	5266086	0					
ANR	5266089	IfStatement	if ( decrypt_buf )		5266086	0					
ANR	5266090	Condition	decrypt_buf	87:5:2206:2216	5266086	0	True				
ANR	5266091	Identifier	decrypt_buf		5266086	0					
ANR	5266092	CompoundStatement		2:19:20:20	5266086	1					
ANR	5266093	ExpressionStatement	free ( decrypt_buf )	88:2:2224:2243	5266086	0	True				
ANR	5266094	CallExpression	free ( decrypt_buf )		5266086	0					
ANR	5266095	Callee	free		5266086	0					
ANR	5266096	Identifier	free		5266086	0					
ANR	5266097	ArgumentList	decrypt_buf		5266086	1					
ANR	5266098	Argument	decrypt_buf		5266086	0					
ANR	5266099	Identifier	decrypt_buf		5266086	0					
ANR	5266100	ExpressionStatement	free ( m_peer_description_str )	90:1:2249:2277	5266086	1	True				
ANR	5266101	CallExpression	free ( m_peer_description_str )		5266086	0					
ANR	5266102	Callee	free		5266086	0					
ANR	5266103	Identifier	free		5266086	0					
ANR	5266104	ArgumentList	m_peer_description_str		5266086	1					
ANR	5266105	Argument	m_peer_description_str		5266086	0					
ANR	5266106	Identifier	m_peer_description_str		5266086	0					
ANR	5266107	IfStatement	if ( m_peer_version )		5266086	2					
ANR	5266108	Condition	m_peer_version	91:5:2284:2297	5266086	0	True				
ANR	5266109	Identifier	m_peer_version		5266086	0					
ANR	5266110	CompoundStatement		6:22:101:101	5266086	1					
ANR	5266111	Statement	delete	92:2:2305:2310	5266086	0	True				
ANR	5266112	ExpressionStatement	m_peer_version	92:9:2312:2326	5266086	1	True				
ANR	5266113	Identifier	m_peer_version		5266086	0					
ANR	5266114	Identifier	Stream :: ~Stream		5266086	1					
ANR	5266115	ParameterList			5266086	2					
ANR	5266116	CFGEntryNode	ENTRY		5266086		True				
ANR	5266117	CFGExitNode	EXIT		5266086		True				
ANR	5266118	Symbol	m_peer_description_str		5266086						
ANR	5266119	Symbol	m_peer_version		5266086						
ANR	5266120	Symbol	decrypt_buf		5266086						
ANR	5266121	Function	Stream :: code	96:0:2334:2692							
ANR	5266122	FunctionDef	Stream :: code (char & c)		5266121	0					
ANR	5266123	CompoundStatement		98:0:2362:2692	5266121	0					
ANR	5266124	SwitchStatement	switch ( _coding )		5266121	0					
ANR	5266125	Condition	_coding	99:8:2372:2378	5266121	0	True				
ANR	5266126	Identifier	_coding		5266121	0					
ANR	5266127	CompoundStatement		2:16:17:17	5266121	1					
ANR	5266128	Label	case stream_encode :	100:2:2384:2402	5266121	0	True				
ANR	5266129	Identifier	stream_encode		5266121	0					
ANR	5266130	ReturnStatement	return put ( c ) ;	101:3:2407:2420	5266121	1	True				
ANR	5266131	CallExpression	put ( c )		5266121	0					
ANR	5266132	Callee	put		5266121	0					
ANR	5266133	Identifier	put		5266121	0					
ANR	5266134	ArgumentList	c		5266121	1					
ANR	5266135	Argument	c		5266121	0					
ANR	5266136	Identifier	c		5266121	0					
ANR	5266137	Label	case stream_decode :	102:2:2424:2442	5266121	2	True				
ANR	5266138	Identifier	stream_decode		5266121	0					
ANR	5266139	ReturnStatement	return get ( c ) ;	103:3:2447:2460	5266121	3	True				
ANR	5266140	CallExpression	get ( c )		5266121	0					
ANR	5266141	Callee	get		5266121	0					
ANR	5266142	Identifier	get		5266121	0					
ANR	5266143	ArgumentList	c		5266121	1					
ANR	5266144	Argument	c		5266121	0					
ANR	5266145	Identifier	c		5266121	0					
ANR	5266146	Label	case stream_unknown :	104:2:2464:2483	5266121	4	True				
ANR	5266147	Identifier	stream_unknown		5266121	0					
ANR	5266148	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(char &c) has unknown direction!"" )"	105:3:2488:2549	5266121	5	True				
ANR	5266149	CallExpression	"EXCEPT ( ""ERROR: Stream::code(char &c) has unknown direction!"" )"		5266121	0					
ANR	5266150	Callee	EXCEPT		5266121	0					
ANR	5266151	Identifier	EXCEPT		5266121	0					
ANR	5266152	ArgumentList	"""ERROR: Stream::code(char &c) has unknown direction!"""		5266121	1					
ANR	5266153	Argument	"""ERROR: Stream::code(char &c) has unknown direction!"""		5266121	0					
ANR	5266154	PrimaryExpression	"""ERROR: Stream::code(char &c) has unknown direction!"""		5266121	0					
ANR	5266155	BreakStatement	break ;	106:3:2554:2559	5266121	6	True				
ANR	5266156	Label	default :	107:2:2563:2570	5266121	7	True				
ANR	5266157	Identifier	default		5266121	0					
ANR	5266158	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(char &c)'s _coding is illegal!"" )"	108:3:2575:2635	5266121	8	True				
ANR	5266159	CallExpression	"EXCEPT ( ""ERROR: Stream::code(char &c)'s _coding is illegal!"" )"		5266121	0					
ANR	5266160	Callee	EXCEPT		5266121	0					
ANR	5266161	Identifier	EXCEPT		5266121	0					
ANR	5266162	ArgumentList	"""ERROR: Stream::code(char &c)'s _coding is illegal!"""		5266121	1					
ANR	5266163	Argument	"""ERROR: Stream::code(char &c)'s _coding is illegal!"""		5266121	0					
ANR	5266164	PrimaryExpression	"""ERROR: Stream::code(char &c)'s _coding is illegal!"""		5266121	0					
ANR	5266165	BreakStatement	break ;	109:3:2640:2645	5266121	9	True				
ANR	5266166	ReturnStatement	return FALSE ;	112:1:2652:2664	5266121	1	True				
ANR	5266167	Identifier	FALSE		5266121	0					
ANR	5266168	ReturnType	int		5266121	1					
ANR	5266169	Identifier	Stream :: code		5266121	2					
ANR	5266170	ParameterList	char & c		5266121	3					
ANR	5266171	Parameter	char & c	97:14:2353:2359	5266121	0	True				
ANR	5266172	ParameterType	char &		5266121	0					
ANR	5266173	Identifier	c		5266121	1					
ANR	5266174	CFGEntryNode	ENTRY		5266121		True				
ANR	5266175	CFGExitNode	EXIT		5266121		True				
ANR	5266176	Symbol	_coding		5266121						
ANR	5266177	Symbol	c		5266121						
ANR	5266178	Symbol	get		5266121						
ANR	5266179	Symbol	FALSE		5266121						
ANR	5266180	Symbol	put		5266121						
ANR	5266181	Function	Stream :: code	115:0:2695:3080							
ANR	5266182	FunctionDef	Stream :: code (unsigned char & c)		5266181	0					
ANR	5266183	CompoundStatement		117:0:2732:3080	5266181	0					
ANR	5266184	SwitchStatement	switch ( _coding )		5266181	0					
ANR	5266185	Condition	_coding	118:8:2742:2748	5266181	0	True				
ANR	5266186	Identifier	_coding		5266181	0					
ANR	5266187	CompoundStatement		2:16:17:17	5266181	1					
ANR	5266188	Label	case stream_encode :	119:2:2754:2772	5266181	0	True				
ANR	5266189	Identifier	stream_encode		5266181	0					
ANR	5266190	ReturnStatement	return put ( c ) ;	120:3:2777:2790	5266181	1	True				
ANR	5266191	CallExpression	put ( c )		5266181	0					
ANR	5266192	Callee	put		5266181	0					
ANR	5266193	Identifier	put		5266181	0					
ANR	5266194	ArgumentList	c		5266181	1					
ANR	5266195	Argument	c		5266181	0					
ANR	5266196	Identifier	c		5266181	0					
ANR	5266197	Label	case stream_decode :	121:2:2794:2812	5266181	2	True				
ANR	5266198	Identifier	stream_decode		5266181	0					
ANR	5266199	ReturnStatement	return get ( c ) ;	122:3:2817:2830	5266181	3	True				
ANR	5266200	CallExpression	get ( c )		5266181	0					
ANR	5266201	Callee	get		5266181	0					
ANR	5266202	Identifier	get		5266181	0					
ANR	5266203	ArgumentList	c		5266181	1					
ANR	5266204	Argument	c		5266181	0					
ANR	5266205	Identifier	c		5266181	0					
ANR	5266206	Label	case stream_unknown :	123:2:2834:2853	5266181	4	True				
ANR	5266207	Identifier	stream_unknown		5266181	0					
ANR	5266208	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(unsigned char &c) has unknown direction!"" )"	124:3:2858:2928	5266181	5	True				
ANR	5266209	CallExpression	"EXCEPT ( ""ERROR: Stream::code(unsigned char &c) has unknown direction!"" )"		5266181	0					
ANR	5266210	Callee	EXCEPT		5266181	0					
ANR	5266211	Identifier	EXCEPT		5266181	0					
ANR	5266212	ArgumentList	"""ERROR: Stream::code(unsigned char &c) has unknown direction!"""		5266181	1					
ANR	5266213	Argument	"""ERROR: Stream::code(unsigned char &c) has unknown direction!"""		5266181	0					
ANR	5266214	PrimaryExpression	"""ERROR: Stream::code(unsigned char &c) has unknown direction!"""		5266181	0					
ANR	5266215	BreakStatement	break ;	125:3:2933:2938	5266181	6	True				
ANR	5266216	Label	default :	126:2:2942:2949	5266181	7	True				
ANR	5266217	Identifier	default		5266181	0					
ANR	5266218	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(unsigned char &c)'s _coding is illegal!"" )"	127:3:2954:3023	5266181	8	True				
ANR	5266219	CallExpression	"EXCEPT ( ""ERROR: Stream::code(unsigned char &c)'s _coding is illegal!"" )"		5266181	0					
ANR	5266220	Callee	EXCEPT		5266181	0					
ANR	5266221	Identifier	EXCEPT		5266181	0					
ANR	5266222	ArgumentList	"""ERROR: Stream::code(unsigned char &c)'s _coding is illegal!"""		5266181	1					
ANR	5266223	Argument	"""ERROR: Stream::code(unsigned char &c)'s _coding is illegal!"""		5266181	0					
ANR	5266224	PrimaryExpression	"""ERROR: Stream::code(unsigned char &c)'s _coding is illegal!"""		5266181	0					
ANR	5266225	BreakStatement	break ;	128:3:3028:3033	5266181	9	True				
ANR	5266226	ReturnStatement	return FALSE ;	131:1:3040:3052	5266181	1	True				
ANR	5266227	Identifier	FALSE		5266181	0					
ANR	5266228	ReturnType	int		5266181	1					
ANR	5266229	Identifier	Stream :: code		5266181	2					
ANR	5266230	ParameterList	unsigned char & c		5266181	3					
ANR	5266231	Parameter	unsigned char & c	116:14:2714:2729	5266181	0	True				
ANR	5266232	ParameterType	unsigned char &		5266181	0					
ANR	5266233	Identifier	c		5266181	1					
ANR	5266234	CFGEntryNode	ENTRY		5266181		True				
ANR	5266235	CFGExitNode	EXIT		5266181		True				
ANR	5266236	Symbol	_coding		5266181						
ANR	5266237	Symbol	c		5266181						
ANR	5266238	Symbol	get		5266181						
ANR	5266239	Symbol	FALSE		5266181						
ANR	5266240	Symbol	put		5266181						
ANR	5266241	Function	Stream :: code	136:0:3085:3441							
ANR	5266242	FunctionDef	Stream :: code (int & i)		5266241	0					
ANR	5266243	CompoundStatement		138:0:3113:3441	5266241	0					
ANR	5266244	SwitchStatement	switch ( _coding )		5266241	0					
ANR	5266245	Condition	_coding	139:8:3123:3129	5266241	0	True				
ANR	5266246	Identifier	_coding		5266241	0					
ANR	5266247	CompoundStatement		2:16:17:17	5266241	1					
ANR	5266248	Label	case stream_encode :	140:2:3135:3153	5266241	0	True				
ANR	5266249	Identifier	stream_encode		5266241	0					
ANR	5266250	ReturnStatement	return put ( i ) ;	141:3:3158:3171	5266241	1	True				
ANR	5266251	CallExpression	put ( i )		5266241	0					
ANR	5266252	Callee	put		5266241	0					
ANR	5266253	Identifier	put		5266241	0					
ANR	5266254	ArgumentList	i		5266241	1					
ANR	5266255	Argument	i		5266241	0					
ANR	5266256	Identifier	i		5266241	0					
ANR	5266257	Label	case stream_decode :	142:2:3175:3193	5266241	2	True				
ANR	5266258	Identifier	stream_decode		5266241	0					
ANR	5266259	ReturnStatement	return get ( i ) ;	143:3:3198:3211	5266241	3	True				
ANR	5266260	CallExpression	get ( i )		5266241	0					
ANR	5266261	Callee	get		5266241	0					
ANR	5266262	Identifier	get		5266241	0					
ANR	5266263	ArgumentList	i		5266241	1					
ANR	5266264	Argument	i		5266241	0					
ANR	5266265	Identifier	i		5266241	0					
ANR	5266266	Label	case stream_unknown :	144:2:3215:3234	5266241	4	True				
ANR	5266267	Identifier	stream_unknown		5266241	0					
ANR	5266268	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(int &i) has unknown direction!"" )"	145:3:3239:3299	5266241	5	True				
ANR	5266269	CallExpression	"EXCEPT ( ""ERROR: Stream::code(int &i) has unknown direction!"" )"		5266241	0					
ANR	5266270	Callee	EXCEPT		5266241	0					
ANR	5266271	Identifier	EXCEPT		5266241	0					
ANR	5266272	ArgumentList	"""ERROR: Stream::code(int &i) has unknown direction!"""		5266241	1					
ANR	5266273	Argument	"""ERROR: Stream::code(int &i) has unknown direction!"""		5266241	0					
ANR	5266274	PrimaryExpression	"""ERROR: Stream::code(int &i) has unknown direction!"""		5266241	0					
ANR	5266275	BreakStatement	break ;	146:3:3304:3309	5266241	6	True				
ANR	5266276	Label	default :	147:2:3313:3320	5266241	7	True				
ANR	5266277	Identifier	default		5266241	0					
ANR	5266278	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(int &i)'s _coding is illegal!"" )"	148:3:3325:3384	5266241	8	True				
ANR	5266279	CallExpression	"EXCEPT ( ""ERROR: Stream::code(int &i)'s _coding is illegal!"" )"		5266241	0					
ANR	5266280	Callee	EXCEPT		5266241	0					
ANR	5266281	Identifier	EXCEPT		5266241	0					
ANR	5266282	ArgumentList	"""ERROR: Stream::code(int &i)'s _coding is illegal!"""		5266241	1					
ANR	5266283	Argument	"""ERROR: Stream::code(int &i)'s _coding is illegal!"""		5266241	0					
ANR	5266284	PrimaryExpression	"""ERROR: Stream::code(int &i)'s _coding is illegal!"""		5266241	0					
ANR	5266285	BreakStatement	break ;	149:3:3389:3394	5266241	9	True				
ANR	5266286	ReturnStatement	return FALSE ;	152:1:3401:3413	5266241	1	True				
ANR	5266287	Identifier	FALSE		5266241	0					
ANR	5266288	ReturnType	int		5266241	1					
ANR	5266289	Identifier	Stream :: code		5266241	2					
ANR	5266290	ParameterList	int & i		5266241	3					
ANR	5266291	Parameter	int & i	137:14:3104:3110	5266241	0	True				
ANR	5266292	ParameterType	int &		5266241	0					
ANR	5266293	Identifier	i		5266241	1					
ANR	5266294	CFGEntryNode	ENTRY		5266241		True				
ANR	5266295	CFGExitNode	EXIT		5266241		True				
ANR	5266296	Symbol	_coding		5266241						
ANR	5266297	Symbol	get		5266241						
ANR	5266298	Symbol	i		5266241						
ANR	5266299	Symbol	FALSE		5266241						
ANR	5266300	Symbol	put		5266241						
ANR	5266301	Function	Stream :: code	157:0:3446:3829							
ANR	5266302	FunctionDef	Stream :: code (unsigned int & i)		5266301	0					
ANR	5266303	CompoundStatement		159:0:3483:3829	5266301	0					
ANR	5266304	SwitchStatement	switch ( _coding )		5266301	0					
ANR	5266305	Condition	_coding	160:8:3493:3499	5266301	0	True				
ANR	5266306	Identifier	_coding		5266301	0					
ANR	5266307	CompoundStatement		2:16:17:17	5266301	1					
ANR	5266308	Label	case stream_encode :	161:2:3505:3523	5266301	0	True				
ANR	5266309	Identifier	stream_encode		5266301	0					
ANR	5266310	ReturnStatement	return put ( i ) ;	162:3:3528:3541	5266301	1	True				
ANR	5266311	CallExpression	put ( i )		5266301	0					
ANR	5266312	Callee	put		5266301	0					
ANR	5266313	Identifier	put		5266301	0					
ANR	5266314	ArgumentList	i		5266301	1					
ANR	5266315	Argument	i		5266301	0					
ANR	5266316	Identifier	i		5266301	0					
ANR	5266317	Label	case stream_decode :	163:2:3545:3563	5266301	2	True				
ANR	5266318	Identifier	stream_decode		5266301	0					
ANR	5266319	ReturnStatement	return get ( i ) ;	164:3:3568:3581	5266301	3	True				
ANR	5266320	CallExpression	get ( i )		5266301	0					
ANR	5266321	Callee	get		5266301	0					
ANR	5266322	Identifier	get		5266301	0					
ANR	5266323	ArgumentList	i		5266301	1					
ANR	5266324	Argument	i		5266301	0					
ANR	5266325	Identifier	i		5266301	0					
ANR	5266326	Label	case stream_unknown :	165:2:3585:3604	5266301	4	True				
ANR	5266327	Identifier	stream_unknown		5266301	0					
ANR	5266328	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(unsigned int &i) has unknown direction!"" )"	166:3:3609:3678	5266301	5	True				
ANR	5266329	CallExpression	"EXCEPT ( ""ERROR: Stream::code(unsigned int &i) has unknown direction!"" )"		5266301	0					
ANR	5266330	Callee	EXCEPT		5266301	0					
ANR	5266331	Identifier	EXCEPT		5266301	0					
ANR	5266332	ArgumentList	"""ERROR: Stream::code(unsigned int &i) has unknown direction!"""		5266301	1					
ANR	5266333	Argument	"""ERROR: Stream::code(unsigned int &i) has unknown direction!"""		5266301	0					
ANR	5266334	PrimaryExpression	"""ERROR: Stream::code(unsigned int &i) has unknown direction!"""		5266301	0					
ANR	5266335	BreakStatement	break ;	167:3:3683:3688	5266301	6	True				
ANR	5266336	Label	default :	168:2:3692:3699	5266301	7	True				
ANR	5266337	Identifier	default		5266301	0					
ANR	5266338	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(unsigned int &i)'s _coding is illegal!"" )"	169:3:3704:3772	5266301	8	True				
ANR	5266339	CallExpression	"EXCEPT ( ""ERROR: Stream::code(unsigned int &i)'s _coding is illegal!"" )"		5266301	0					
ANR	5266340	Callee	EXCEPT		5266301	0					
ANR	5266341	Identifier	EXCEPT		5266301	0					
ANR	5266342	ArgumentList	"""ERROR: Stream::code(unsigned int &i)'s _coding is illegal!"""		5266301	1					
ANR	5266343	Argument	"""ERROR: Stream::code(unsigned int &i)'s _coding is illegal!"""		5266301	0					
ANR	5266344	PrimaryExpression	"""ERROR: Stream::code(unsigned int &i)'s _coding is illegal!"""		5266301	0					
ANR	5266345	BreakStatement	break ;	170:3:3777:3782	5266301	9	True				
ANR	5266346	ReturnStatement	return FALSE ;	173:1:3789:3801	5266301	1	True				
ANR	5266347	Identifier	FALSE		5266301	0					
ANR	5266348	ReturnType	int		5266301	1					
ANR	5266349	Identifier	Stream :: code		5266301	2					
ANR	5266350	ParameterList	unsigned int & i		5266301	3					
ANR	5266351	Parameter	unsigned int & i	158:14:3465:3480	5266301	0	True				
ANR	5266352	ParameterType	unsigned int &		5266301	0					
ANR	5266353	Identifier	i		5266301	1					
ANR	5266354	CFGEntryNode	ENTRY		5266301		True				
ANR	5266355	CFGExitNode	EXIT		5266301		True				
ANR	5266356	Symbol	_coding		5266301						
ANR	5266357	Symbol	get		5266301						
ANR	5266358	Symbol	i		5266301						
ANR	5266359	Symbol	FALSE		5266301						
ANR	5266360	Symbol	put		5266301						
ANR	5266361	Function	Stream :: code	177:0:3833:4191							
ANR	5266362	FunctionDef	Stream :: code (long & l)		5266361	0					
ANR	5266363	CompoundStatement		179:0:3861:4191	5266361	0					
ANR	5266364	SwitchStatement	switch ( _coding )		5266361	0					
ANR	5266365	Condition	_coding	180:8:3871:3877	5266361	0	True				
ANR	5266366	Identifier	_coding		5266361	0					
ANR	5266367	CompoundStatement		2:16:17:17	5266361	1					
ANR	5266368	Label	case stream_encode :	181:2:3883:3901	5266361	0	True				
ANR	5266369	Identifier	stream_encode		5266361	0					
ANR	5266370	ReturnStatement	return put ( l ) ;	182:3:3906:3919	5266361	1	True				
ANR	5266371	CallExpression	put ( l )		5266361	0					
ANR	5266372	Callee	put		5266361	0					
ANR	5266373	Identifier	put		5266361	0					
ANR	5266374	ArgumentList	l		5266361	1					
ANR	5266375	Argument	l		5266361	0					
ANR	5266376	Identifier	l		5266361	0					
ANR	5266377	Label	case stream_decode :	183:2:3923:3941	5266361	2	True				
ANR	5266378	Identifier	stream_decode		5266361	0					
ANR	5266379	ReturnStatement	return get ( l ) ;	184:3:3946:3959	5266361	3	True				
ANR	5266380	CallExpression	get ( l )		5266361	0					
ANR	5266381	Callee	get		5266361	0					
ANR	5266382	Identifier	get		5266361	0					
ANR	5266383	ArgumentList	l		5266361	1					
ANR	5266384	Argument	l		5266361	0					
ANR	5266385	Identifier	l		5266361	0					
ANR	5266386	Label	case stream_unknown :	185:2:3963:3982	5266361	4	True				
ANR	5266387	Identifier	stream_unknown		5266361	0					
ANR	5266388	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(long &l) has unknown direction!"" )"	186:3:3987:4048	5266361	5	True				
ANR	5266389	CallExpression	"EXCEPT ( ""ERROR: Stream::code(long &l) has unknown direction!"" )"		5266361	0					
ANR	5266390	Callee	EXCEPT		5266361	0					
ANR	5266391	Identifier	EXCEPT		5266361	0					
ANR	5266392	ArgumentList	"""ERROR: Stream::code(long &l) has unknown direction!"""		5266361	1					
ANR	5266393	Argument	"""ERROR: Stream::code(long &l) has unknown direction!"""		5266361	0					
ANR	5266394	PrimaryExpression	"""ERROR: Stream::code(long &l) has unknown direction!"""		5266361	0					
ANR	5266395	BreakStatement	break ;	187:3:4053:4058	5266361	6	True				
ANR	5266396	Label	default :	188:2:4062:4069	5266361	7	True				
ANR	5266397	Identifier	default		5266361	0					
ANR	5266398	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(long &l)'s _coding is illegal!"" )"	189:3:4074:4134	5266361	8	True				
ANR	5266399	CallExpression	"EXCEPT ( ""ERROR: Stream::code(long &l)'s _coding is illegal!"" )"		5266361	0					
ANR	5266400	Callee	EXCEPT		5266361	0					
ANR	5266401	Identifier	EXCEPT		5266361	0					
ANR	5266402	ArgumentList	"""ERROR: Stream::code(long &l)'s _coding is illegal!"""		5266361	1					
ANR	5266403	Argument	"""ERROR: Stream::code(long &l)'s _coding is illegal!"""		5266361	0					
ANR	5266404	PrimaryExpression	"""ERROR: Stream::code(long &l)'s _coding is illegal!"""		5266361	0					
ANR	5266405	BreakStatement	break ;	190:3:4139:4144	5266361	9	True				
ANR	5266406	ReturnStatement	return FALSE ;	193:1:4151:4163	5266361	1	True				
ANR	5266407	Identifier	FALSE		5266361	0					
ANR	5266408	ReturnType	int		5266361	1					
ANR	5266409	Identifier	Stream :: code		5266361	2					
ANR	5266410	ParameterList	long & l		5266361	3					
ANR	5266411	Parameter	long & l	178:14:3852:3858	5266361	0	True				
ANR	5266412	ParameterType	long &		5266361	0					
ANR	5266413	Identifier	l		5266361	1					
ANR	5266414	CFGEntryNode	ENTRY		5266361		True				
ANR	5266415	CFGExitNode	EXIT		5266361		True				
ANR	5266416	Symbol	_coding		5266361						
ANR	5266417	Symbol	get		5266361						
ANR	5266418	Symbol	FALSE		5266361						
ANR	5266419	Symbol	l		5266361						
ANR	5266420	Symbol	put		5266361						
ANR	5266421	Function	Stream :: code	197:0:4195:4580							
ANR	5266422	FunctionDef	Stream :: code (unsigned long & l)		5266421	0					
ANR	5266423	CompoundStatement		199:0:4232:4580	5266421	0					
ANR	5266424	SwitchStatement	switch ( _coding )		5266421	0					
ANR	5266425	Condition	_coding	200:8:4242:4248	5266421	0	True				
ANR	5266426	Identifier	_coding		5266421	0					
ANR	5266427	CompoundStatement		2:16:17:17	5266421	1					
ANR	5266428	Label	case stream_encode :	201:2:4254:4272	5266421	0	True				
ANR	5266429	Identifier	stream_encode		5266421	0					
ANR	5266430	ReturnStatement	return put ( l ) ;	202:3:4277:4290	5266421	1	True				
ANR	5266431	CallExpression	put ( l )		5266421	0					
ANR	5266432	Callee	put		5266421	0					
ANR	5266433	Identifier	put		5266421	0					
ANR	5266434	ArgumentList	l		5266421	1					
ANR	5266435	Argument	l		5266421	0					
ANR	5266436	Identifier	l		5266421	0					
ANR	5266437	Label	case stream_decode :	203:2:4294:4312	5266421	2	True				
ANR	5266438	Identifier	stream_decode		5266421	0					
ANR	5266439	ReturnStatement	return get ( l ) ;	204:3:4317:4330	5266421	3	True				
ANR	5266440	CallExpression	get ( l )		5266421	0					
ANR	5266441	Callee	get		5266421	0					
ANR	5266442	Identifier	get		5266421	0					
ANR	5266443	ArgumentList	l		5266421	1					
ANR	5266444	Argument	l		5266421	0					
ANR	5266445	Identifier	l		5266421	0					
ANR	5266446	Label	case stream_unknown :	205:2:4334:4353	5266421	4	True				
ANR	5266447	Identifier	stream_unknown		5266421	0					
ANR	5266448	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(unsigned long &l) has unknown direction!"" )"	206:3:4358:4428	5266421	5	True				
ANR	5266449	CallExpression	"EXCEPT ( ""ERROR: Stream::code(unsigned long &l) has unknown direction!"" )"		5266421	0					
ANR	5266450	Callee	EXCEPT		5266421	0					
ANR	5266451	Identifier	EXCEPT		5266421	0					
ANR	5266452	ArgumentList	"""ERROR: Stream::code(unsigned long &l) has unknown direction!"""		5266421	1					
ANR	5266453	Argument	"""ERROR: Stream::code(unsigned long &l) has unknown direction!"""		5266421	0					
ANR	5266454	PrimaryExpression	"""ERROR: Stream::code(unsigned long &l) has unknown direction!"""		5266421	0					
ANR	5266455	BreakStatement	break ;	207:3:4433:4438	5266421	6	True				
ANR	5266456	Label	default :	208:2:4442:4449	5266421	7	True				
ANR	5266457	Identifier	default		5266421	0					
ANR	5266458	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(unsigned long &l)'s _coding is illegal!"" )"	209:3:4454:4523	5266421	8	True				
ANR	5266459	CallExpression	"EXCEPT ( ""ERROR: Stream::code(unsigned long &l)'s _coding is illegal!"" )"		5266421	0					
ANR	5266460	Callee	EXCEPT		5266421	0					
ANR	5266461	Identifier	EXCEPT		5266421	0					
ANR	5266462	ArgumentList	"""ERROR: Stream::code(unsigned long &l)'s _coding is illegal!"""		5266421	1					
ANR	5266463	Argument	"""ERROR: Stream::code(unsigned long &l)'s _coding is illegal!"""		5266421	0					
ANR	5266464	PrimaryExpression	"""ERROR: Stream::code(unsigned long &l)'s _coding is illegal!"""		5266421	0					
ANR	5266465	BreakStatement	break ;	210:3:4528:4533	5266421	9	True				
ANR	5266466	ReturnStatement	return FALSE ;	213:1:4540:4552	5266421	1	True				
ANR	5266467	Identifier	FALSE		5266421	0					
ANR	5266468	ReturnType	int		5266421	1					
ANR	5266469	Identifier	Stream :: code		5266421	2					
ANR	5266470	ParameterList	unsigned long & l		5266421	3					
ANR	5266471	Parameter	unsigned long & l	198:14:4214:4229	5266421	0	True				
ANR	5266472	ParameterType	unsigned long &		5266421	0					
ANR	5266473	Identifier	l		5266421	1					
ANR	5266474	CFGEntryNode	ENTRY		5266421		True				
ANR	5266475	CFGExitNode	EXIT		5266421		True				
ANR	5266476	Symbol	_coding		5266421						
ANR	5266477	Symbol	get		5266421						
ANR	5266478	Symbol	FALSE		5266421						
ANR	5266479	Symbol	l		5266421						
ANR	5266480	Symbol	put		5266421						
ANR	5266481	Function	Stream :: code	218:0:4626:4993							
ANR	5266482	FunctionDef	Stream :: code (int64_t & l)		5266481	0					
ANR	5266483	CompoundStatement		220:0:4657:4993	5266481	0					
ANR	5266484	SwitchStatement	switch ( _coding )		5266481	0					
ANR	5266485	Condition	_coding	221:8:4667:4673	5266481	0	True				
ANR	5266486	Identifier	_coding		5266481	0					
ANR	5266487	CompoundStatement		2:16:17:17	5266481	1					
ANR	5266488	Label	case stream_encode :	222:2:4679:4697	5266481	0	True				
ANR	5266489	Identifier	stream_encode		5266481	0					
ANR	5266490	ReturnStatement	return put ( l ) ;	223:3:4702:4715	5266481	1	True				
ANR	5266491	CallExpression	put ( l )		5266481	0					
ANR	5266492	Callee	put		5266481	0					
ANR	5266493	Identifier	put		5266481	0					
ANR	5266494	ArgumentList	l		5266481	1					
ANR	5266495	Argument	l		5266481	0					
ANR	5266496	Identifier	l		5266481	0					
ANR	5266497	Label	case stream_decode :	224:2:4719:4737	5266481	2	True				
ANR	5266498	Identifier	stream_decode		5266481	0					
ANR	5266499	ReturnStatement	return get ( l ) ;	225:3:4742:4755	5266481	3	True				
ANR	5266500	CallExpression	get ( l )		5266481	0					
ANR	5266501	Callee	get		5266481	0					
ANR	5266502	Identifier	get		5266481	0					
ANR	5266503	ArgumentList	l		5266481	1					
ANR	5266504	Argument	l		5266481	0					
ANR	5266505	Identifier	l		5266481	0					
ANR	5266506	Label	case stream_unknown :	226:2:4759:4778	5266481	4	True				
ANR	5266507	Identifier	stream_unknown		5266481	0					
ANR	5266508	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(int64_t &l) has unknown direction!"" )"	227:3:4783:4847	5266481	5	True				
ANR	5266509	CallExpression	"EXCEPT ( ""ERROR: Stream::code(int64_t &l) has unknown direction!"" )"		5266481	0					
ANR	5266510	Callee	EXCEPT		5266481	0					
ANR	5266511	Identifier	EXCEPT		5266481	0					
ANR	5266512	ArgumentList	"""ERROR: Stream::code(int64_t &l) has unknown direction!"""		5266481	1					
ANR	5266513	Argument	"""ERROR: Stream::code(int64_t &l) has unknown direction!"""		5266481	0					
ANR	5266514	PrimaryExpression	"""ERROR: Stream::code(int64_t &l) has unknown direction!"""		5266481	0					
ANR	5266515	BreakStatement	break ;	228:3:4852:4857	5266481	6	True				
ANR	5266516	Label	default :	229:2:4861:4868	5266481	7	True				
ANR	5266517	Identifier	default		5266481	0					
ANR	5266518	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(int64_t &l)'s _coding is illegal!"" )"	230:3:4873:4936	5266481	8	True				
ANR	5266519	CallExpression	"EXCEPT ( ""ERROR: Stream::code(int64_t &l)'s _coding is illegal!"" )"		5266481	0					
ANR	5266520	Callee	EXCEPT		5266481	0					
ANR	5266521	Identifier	EXCEPT		5266481	0					
ANR	5266522	ArgumentList	"""ERROR: Stream::code(int64_t &l)'s _coding is illegal!"""		5266481	1					
ANR	5266523	Argument	"""ERROR: Stream::code(int64_t &l)'s _coding is illegal!"""		5266481	0					
ANR	5266524	PrimaryExpression	"""ERROR: Stream::code(int64_t &l)'s _coding is illegal!"""		5266481	0					
ANR	5266525	BreakStatement	break ;	231:3:4941:4946	5266481	9	True				
ANR	5266526	ReturnStatement	return FALSE ;	234:1:4953:4965	5266481	1	True				
ANR	5266527	Identifier	FALSE		5266481	0					
ANR	5266528	ReturnType	int		5266481	1					
ANR	5266529	Identifier	Stream :: code		5266481	2					
ANR	5266530	ParameterList	int64_t & l		5266481	3					
ANR	5266531	Parameter	int64_t & l	219:14:4645:4654	5266481	0	True				
ANR	5266532	ParameterType	int64_t &		5266481	0					
ANR	5266533	Identifier	l		5266481	1					
ANR	5266534	CFGEntryNode	ENTRY		5266481		True				
ANR	5266535	CFGExitNode	EXIT		5266481		True				
ANR	5266536	Symbol	_coding		5266481						
ANR	5266537	Symbol	get		5266481						
ANR	5266538	Symbol	FALSE		5266481						
ANR	5266539	Symbol	l		5266481						
ANR	5266540	Symbol	put		5266481						
ANR	5266541	Function	Stream :: code	237:0:4996:5366							
ANR	5266542	FunctionDef	Stream :: code (uint64_t & l)		5266541	0					
ANR	5266543	CompoundStatement		239:0:5028:5366	5266541	0					
ANR	5266544	SwitchStatement	switch ( _coding )		5266541	0					
ANR	5266545	Condition	_coding	240:8:5038:5044	5266541	0	True				
ANR	5266546	Identifier	_coding		5266541	0					
ANR	5266547	CompoundStatement		2:16:17:17	5266541	1					
ANR	5266548	Label	case stream_encode :	241:2:5050:5068	5266541	0	True				
ANR	5266549	Identifier	stream_encode		5266541	0					
ANR	5266550	ReturnStatement	return put ( l ) ;	242:3:5073:5086	5266541	1	True				
ANR	5266551	CallExpression	put ( l )		5266541	0					
ANR	5266552	Callee	put		5266541	0					
ANR	5266553	Identifier	put		5266541	0					
ANR	5266554	ArgumentList	l		5266541	1					
ANR	5266555	Argument	l		5266541	0					
ANR	5266556	Identifier	l		5266541	0					
ANR	5266557	Label	case stream_decode :	243:2:5090:5108	5266541	2	True				
ANR	5266558	Identifier	stream_decode		5266541	0					
ANR	5266559	ReturnStatement	return get ( l ) ;	244:3:5113:5126	5266541	3	True				
ANR	5266560	CallExpression	get ( l )		5266541	0					
ANR	5266561	Callee	get		5266541	0					
ANR	5266562	Identifier	get		5266541	0					
ANR	5266563	ArgumentList	l		5266541	1					
ANR	5266564	Argument	l		5266541	0					
ANR	5266565	Identifier	l		5266541	0					
ANR	5266566	Label	case stream_unknown :	245:2:5130:5149	5266541	4	True				
ANR	5266567	Identifier	stream_unknown		5266541	0					
ANR	5266568	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(uint64_t &l) has unknown direction!"" )"	246:3:5154:5219	5266541	5	True				
ANR	5266569	CallExpression	"EXCEPT ( ""ERROR: Stream::code(uint64_t &l) has unknown direction!"" )"		5266541	0					
ANR	5266570	Callee	EXCEPT		5266541	0					
ANR	5266571	Identifier	EXCEPT		5266541	0					
ANR	5266572	ArgumentList	"""ERROR: Stream::code(uint64_t &l) has unknown direction!"""		5266541	1					
ANR	5266573	Argument	"""ERROR: Stream::code(uint64_t &l) has unknown direction!"""		5266541	0					
ANR	5266574	PrimaryExpression	"""ERROR: Stream::code(uint64_t &l) has unknown direction!"""		5266541	0					
ANR	5266575	BreakStatement	break ;	247:3:5224:5229	5266541	6	True				
ANR	5266576	Label	default :	248:2:5233:5240	5266541	7	True				
ANR	5266577	Identifier	default		5266541	0					
ANR	5266578	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(uint64_t &l)'s _coding is illegal!"" )"	249:3:5245:5309	5266541	8	True				
ANR	5266579	CallExpression	"EXCEPT ( ""ERROR: Stream::code(uint64_t &l)'s _coding is illegal!"" )"		5266541	0					
ANR	5266580	Callee	EXCEPT		5266541	0					
ANR	5266581	Identifier	EXCEPT		5266541	0					
ANR	5266582	ArgumentList	"""ERROR: Stream::code(uint64_t &l)'s _coding is illegal!"""		5266541	1					
ANR	5266583	Argument	"""ERROR: Stream::code(uint64_t &l)'s _coding is illegal!"""		5266541	0					
ANR	5266584	PrimaryExpression	"""ERROR: Stream::code(uint64_t &l)'s _coding is illegal!"""		5266541	0					
ANR	5266585	BreakStatement	break ;	250:3:5314:5319	5266541	9	True				
ANR	5266586	ReturnStatement	return FALSE ;	253:1:5326:5338	5266541	1	True				
ANR	5266587	Identifier	FALSE		5266541	0					
ANR	5266588	ReturnType	int		5266541	1					
ANR	5266589	Identifier	Stream :: code		5266541	2					
ANR	5266590	ParameterList	uint64_t & l		5266541	3					
ANR	5266591	Parameter	uint64_t & l	238:14:5015:5025	5266541	0	True				
ANR	5266592	ParameterType	uint64_t &		5266541	0					
ANR	5266593	Identifier	l		5266541	1					
ANR	5266594	CFGEntryNode	ENTRY		5266541		True				
ANR	5266595	CFGExitNode	EXIT		5266541		True				
ANR	5266596	Symbol	_coding		5266541						
ANR	5266597	Symbol	get		5266541						
ANR	5266598	Symbol	FALSE		5266541						
ANR	5266599	Symbol	l		5266541						
ANR	5266600	Symbol	put		5266541						
ANR	5266601	Function	Stream :: code	258:0:5377:5738							
ANR	5266602	FunctionDef	Stream :: code (short & s)		5266601	0					
ANR	5266603	CompoundStatement		260:0:5406:5738	5266601	0					
ANR	5266604	SwitchStatement	switch ( _coding )		5266601	0					
ANR	5266605	Condition	_coding	261:8:5416:5422	5266601	0	True				
ANR	5266606	Identifier	_coding		5266601	0					
ANR	5266607	CompoundStatement		2:16:17:17	5266601	1					
ANR	5266608	Label	case stream_encode :	262:2:5428:5446	5266601	0	True				
ANR	5266609	Identifier	stream_encode		5266601	0					
ANR	5266610	ReturnStatement	return put ( s ) ;	263:3:5451:5464	5266601	1	True				
ANR	5266611	CallExpression	put ( s )		5266601	0					
ANR	5266612	Callee	put		5266601	0					
ANR	5266613	Identifier	put		5266601	0					
ANR	5266614	ArgumentList	s		5266601	1					
ANR	5266615	Argument	s		5266601	0					
ANR	5266616	Identifier	s		5266601	0					
ANR	5266617	Label	case stream_decode :	264:2:5468:5486	5266601	2	True				
ANR	5266618	Identifier	stream_decode		5266601	0					
ANR	5266619	ReturnStatement	return get ( s ) ;	265:3:5491:5504	5266601	3	True				
ANR	5266620	CallExpression	get ( s )		5266601	0					
ANR	5266621	Callee	get		5266601	0					
ANR	5266622	Identifier	get		5266601	0					
ANR	5266623	ArgumentList	s		5266601	1					
ANR	5266624	Argument	s		5266601	0					
ANR	5266625	Identifier	s		5266601	0					
ANR	5266626	Label	case stream_unknown :	266:2:5508:5527	5266601	4	True				
ANR	5266627	Identifier	stream_unknown		5266601	0					
ANR	5266628	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(short &s) has unknown direction!"" )"	267:3:5532:5594	5266601	5	True				
ANR	5266629	CallExpression	"EXCEPT ( ""ERROR: Stream::code(short &s) has unknown direction!"" )"		5266601	0					
ANR	5266630	Callee	EXCEPT		5266601	0					
ANR	5266631	Identifier	EXCEPT		5266601	0					
ANR	5266632	ArgumentList	"""ERROR: Stream::code(short &s) has unknown direction!"""		5266601	1					
ANR	5266633	Argument	"""ERROR: Stream::code(short &s) has unknown direction!"""		5266601	0					
ANR	5266634	PrimaryExpression	"""ERROR: Stream::code(short &s) has unknown direction!"""		5266601	0					
ANR	5266635	BreakStatement	break ;	268:3:5599:5604	5266601	6	True				
ANR	5266636	Label	default :	269:2:5608:5615	5266601	7	True				
ANR	5266637	Identifier	default		5266601	0					
ANR	5266638	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(short &s)'s _coding is illegal!"" )"	270:3:5620:5681	5266601	8	True				
ANR	5266639	CallExpression	"EXCEPT ( ""ERROR: Stream::code(short &s)'s _coding is illegal!"" )"		5266601	0					
ANR	5266640	Callee	EXCEPT		5266601	0					
ANR	5266641	Identifier	EXCEPT		5266601	0					
ANR	5266642	ArgumentList	"""ERROR: Stream::code(short &s)'s _coding is illegal!"""		5266601	1					
ANR	5266643	Argument	"""ERROR: Stream::code(short &s)'s _coding is illegal!"""		5266601	0					
ANR	5266644	PrimaryExpression	"""ERROR: Stream::code(short &s)'s _coding is illegal!"""		5266601	0					
ANR	5266645	BreakStatement	break ;	271:3:5686:5691	5266601	9	True				
ANR	5266646	ReturnStatement	return FALSE ;	274:1:5698:5710	5266601	1	True				
ANR	5266647	Identifier	FALSE		5266601	0					
ANR	5266648	ReturnType	int		5266601	1					
ANR	5266649	Identifier	Stream :: code		5266601	2					
ANR	5266650	ParameterList	short & s		5266601	3					
ANR	5266651	Parameter	short & s	259:14:5396:5403	5266601	0	True				
ANR	5266652	ParameterType	short &		5266601	0					
ANR	5266653	Identifier	s		5266601	1					
ANR	5266654	CFGEntryNode	ENTRY		5266601		True				
ANR	5266655	CFGExitNode	EXIT		5266601		True				
ANR	5266656	Symbol	_coding		5266601						
ANR	5266657	Symbol	s		5266601						
ANR	5266658	Symbol	get		5266601						
ANR	5266659	Symbol	FALSE		5266601						
ANR	5266660	Symbol	put		5266601						
ANR	5266661	Function	Stream :: code	279:0:5743:6131							
ANR	5266662	FunctionDef	Stream :: code (unsigned short & s)		5266661	0					
ANR	5266663	CompoundStatement		281:0:5781:6131	5266661	0					
ANR	5266664	SwitchStatement	switch ( _coding )		5266661	0					
ANR	5266665	Condition	_coding	282:8:5791:5797	5266661	0	True				
ANR	5266666	Identifier	_coding		5266661	0					
ANR	5266667	CompoundStatement		2:16:17:17	5266661	1					
ANR	5266668	Label	case stream_encode :	283:2:5803:5821	5266661	0	True				
ANR	5266669	Identifier	stream_encode		5266661	0					
ANR	5266670	ReturnStatement	return put ( s ) ;	284:3:5826:5839	5266661	1	True				
ANR	5266671	CallExpression	put ( s )		5266661	0					
ANR	5266672	Callee	put		5266661	0					
ANR	5266673	Identifier	put		5266661	0					
ANR	5266674	ArgumentList	s		5266661	1					
ANR	5266675	Argument	s		5266661	0					
ANR	5266676	Identifier	s		5266661	0					
ANR	5266677	Label	case stream_decode :	285:2:5843:5861	5266661	2	True				
ANR	5266678	Identifier	stream_decode		5266661	0					
ANR	5266679	ReturnStatement	return get ( s ) ;	286:3:5866:5879	5266661	3	True				
ANR	5266680	CallExpression	get ( s )		5266661	0					
ANR	5266681	Callee	get		5266661	0					
ANR	5266682	Identifier	get		5266661	0					
ANR	5266683	ArgumentList	s		5266661	1					
ANR	5266684	Argument	s		5266661	0					
ANR	5266685	Identifier	s		5266661	0					
ANR	5266686	Label	case stream_unknown :	287:2:5883:5902	5266661	4	True				
ANR	5266687	Identifier	stream_unknown		5266661	0					
ANR	5266688	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(unsigned short &s) has unknown direction!"" )"	288:3:5907:5978	5266661	5	True				
ANR	5266689	CallExpression	"EXCEPT ( ""ERROR: Stream::code(unsigned short &s) has unknown direction!"" )"		5266661	0					
ANR	5266690	Callee	EXCEPT		5266661	0					
ANR	5266691	Identifier	EXCEPT		5266661	0					
ANR	5266692	ArgumentList	"""ERROR: Stream::code(unsigned short &s) has unknown direction!"""		5266661	1					
ANR	5266693	Argument	"""ERROR: Stream::code(unsigned short &s) has unknown direction!"""		5266661	0					
ANR	5266694	PrimaryExpression	"""ERROR: Stream::code(unsigned short &s) has unknown direction!"""		5266661	0					
ANR	5266695	BreakStatement	break ;	289:3:5983:5988	5266661	6	True				
ANR	5266696	Label	default :	290:2:5992:5999	5266661	7	True				
ANR	5266697	Identifier	default		5266661	0					
ANR	5266698	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(unsigned short &s)'s _coding is illegal!"" )"	291:3:6004:6074	5266661	8	True				
ANR	5266699	CallExpression	"EXCEPT ( ""ERROR: Stream::code(unsigned short &s)'s _coding is illegal!"" )"		5266661	0					
ANR	5266700	Callee	EXCEPT		5266661	0					
ANR	5266701	Identifier	EXCEPT		5266661	0					
ANR	5266702	ArgumentList	"""ERROR: Stream::code(unsigned short &s)'s _coding is illegal!"""		5266661	1					
ANR	5266703	Argument	"""ERROR: Stream::code(unsigned short &s)'s _coding is illegal!"""		5266661	0					
ANR	5266704	PrimaryExpression	"""ERROR: Stream::code(unsigned short &s)'s _coding is illegal!"""		5266661	0					
ANR	5266705	BreakStatement	break ;	292:3:6079:6084	5266661	9	True				
ANR	5266706	ReturnStatement	return FALSE ;	295:1:6091:6103	5266661	1	True				
ANR	5266707	Identifier	FALSE		5266661	0					
ANR	5266708	ReturnType	int		5266661	1					
ANR	5266709	Identifier	Stream :: code		5266661	2					
ANR	5266710	ParameterList	unsigned short & s		5266661	3					
ANR	5266711	Parameter	unsigned short & s	280:14:5762:5778	5266661	0	True				
ANR	5266712	ParameterType	unsigned short &		5266661	0					
ANR	5266713	Identifier	s		5266661	1					
ANR	5266714	CFGEntryNode	ENTRY		5266661		True				
ANR	5266715	CFGExitNode	EXIT		5266661		True				
ANR	5266716	Symbol	_coding		5266661						
ANR	5266717	Symbol	s		5266661						
ANR	5266718	Symbol	get		5266661						
ANR	5266719	Symbol	FALSE		5266661						
ANR	5266720	Symbol	put		5266661						
ANR	5266721	Function	Stream :: code	300:0:6136:6497							
ANR	5266722	FunctionDef	Stream :: code (float & f)		5266721	0					
ANR	5266723	CompoundStatement		302:0:6165:6497	5266721	0					
ANR	5266724	SwitchStatement	switch ( _coding )		5266721	0					
ANR	5266725	Condition	_coding	303:8:6175:6181	5266721	0	True				
ANR	5266726	Identifier	_coding		5266721	0					
ANR	5266727	CompoundStatement		2:16:17:17	5266721	1					
ANR	5266728	Label	case stream_encode :	304:2:6187:6205	5266721	0	True				
ANR	5266729	Identifier	stream_encode		5266721	0					
ANR	5266730	ReturnStatement	return put ( f ) ;	305:3:6210:6223	5266721	1	True				
ANR	5266731	CallExpression	put ( f )		5266721	0					
ANR	5266732	Callee	put		5266721	0					
ANR	5266733	Identifier	put		5266721	0					
ANR	5266734	ArgumentList	f		5266721	1					
ANR	5266735	Argument	f		5266721	0					
ANR	5266736	Identifier	f		5266721	0					
ANR	5266737	Label	case stream_decode :	306:2:6227:6245	5266721	2	True				
ANR	5266738	Identifier	stream_decode		5266721	0					
ANR	5266739	ReturnStatement	return get ( f ) ;	307:3:6250:6263	5266721	3	True				
ANR	5266740	CallExpression	get ( f )		5266721	0					
ANR	5266741	Callee	get		5266721	0					
ANR	5266742	Identifier	get		5266721	0					
ANR	5266743	ArgumentList	f		5266721	1					
ANR	5266744	Argument	f		5266721	0					
ANR	5266745	Identifier	f		5266721	0					
ANR	5266746	Label	case stream_unknown :	308:2:6267:6286	5266721	4	True				
ANR	5266747	Identifier	stream_unknown		5266721	0					
ANR	5266748	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(float &f) has unknown direction!"" )"	309:3:6291:6353	5266721	5	True				
ANR	5266749	CallExpression	"EXCEPT ( ""ERROR: Stream::code(float &f) has unknown direction!"" )"		5266721	0					
ANR	5266750	Callee	EXCEPT		5266721	0					
ANR	5266751	Identifier	EXCEPT		5266721	0					
ANR	5266752	ArgumentList	"""ERROR: Stream::code(float &f) has unknown direction!"""		5266721	1					
ANR	5266753	Argument	"""ERROR: Stream::code(float &f) has unknown direction!"""		5266721	0					
ANR	5266754	PrimaryExpression	"""ERROR: Stream::code(float &f) has unknown direction!"""		5266721	0					
ANR	5266755	BreakStatement	break ;	310:3:6358:6363	5266721	6	True				
ANR	5266756	Label	default :	311:2:6367:6374	5266721	7	True				
ANR	5266757	Identifier	default		5266721	0					
ANR	5266758	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(float &f)'s _coding is illegal!"" )"	312:3:6379:6440	5266721	8	True				
ANR	5266759	CallExpression	"EXCEPT ( ""ERROR: Stream::code(float &f)'s _coding is illegal!"" )"		5266721	0					
ANR	5266760	Callee	EXCEPT		5266721	0					
ANR	5266761	Identifier	EXCEPT		5266721	0					
ANR	5266762	ArgumentList	"""ERROR: Stream::code(float &f)'s _coding is illegal!"""		5266721	1					
ANR	5266763	Argument	"""ERROR: Stream::code(float &f)'s _coding is illegal!"""		5266721	0					
ANR	5266764	PrimaryExpression	"""ERROR: Stream::code(float &f)'s _coding is illegal!"""		5266721	0					
ANR	5266765	BreakStatement	break ;	313:3:6445:6450	5266721	9	True				
ANR	5266766	ReturnStatement	return FALSE ;	316:1:6457:6469	5266721	1	True				
ANR	5266767	Identifier	FALSE		5266721	0					
ANR	5266768	ReturnType	int		5266721	1					
ANR	5266769	Identifier	Stream :: code		5266721	2					
ANR	5266770	ParameterList	float & f		5266721	3					
ANR	5266771	Parameter	float & f	301:14:6155:6162	5266721	0	True				
ANR	5266772	ParameterType	float &		5266721	0					
ANR	5266773	Identifier	f		5266721	1					
ANR	5266774	CFGEntryNode	ENTRY		5266721		True				
ANR	5266775	CFGExitNode	EXIT		5266721		True				
ANR	5266776	Symbol	_coding		5266721						
ANR	5266777	Symbol	f		5266721						
ANR	5266778	Symbol	get		5266721						
ANR	5266779	Symbol	FALSE		5266721						
ANR	5266780	Symbol	put		5266721						
ANR	5266781	Function	Stream :: code	321:0:6502:6866							
ANR	5266782	FunctionDef	Stream :: code (double & d)		5266781	0					
ANR	5266783	CompoundStatement		323:0:6532:6866	5266781	0					
ANR	5266784	SwitchStatement	switch ( _coding )		5266781	0					
ANR	5266785	Condition	_coding	324:8:6542:6548	5266781	0	True				
ANR	5266786	Identifier	_coding		5266781	0					
ANR	5266787	CompoundStatement		2:16:17:17	5266781	1					
ANR	5266788	Label	case stream_encode :	325:2:6554:6572	5266781	0	True				
ANR	5266789	Identifier	stream_encode		5266781	0					
ANR	5266790	ReturnStatement	return put ( d ) ;	326:3:6577:6590	5266781	1	True				
ANR	5266791	CallExpression	put ( d )		5266781	0					
ANR	5266792	Callee	put		5266781	0					
ANR	5266793	Identifier	put		5266781	0					
ANR	5266794	ArgumentList	d		5266781	1					
ANR	5266795	Argument	d		5266781	0					
ANR	5266796	Identifier	d		5266781	0					
ANR	5266797	Label	case stream_decode :	327:2:6594:6612	5266781	2	True				
ANR	5266798	Identifier	stream_decode		5266781	0					
ANR	5266799	ReturnStatement	return get ( d ) ;	328:3:6617:6630	5266781	3	True				
ANR	5266800	CallExpression	get ( d )		5266781	0					
ANR	5266801	Callee	get		5266781	0					
ANR	5266802	Identifier	get		5266781	0					
ANR	5266803	ArgumentList	d		5266781	1					
ANR	5266804	Argument	d		5266781	0					
ANR	5266805	Identifier	d		5266781	0					
ANR	5266806	Label	case stream_unknown :	329:2:6634:6653	5266781	4	True				
ANR	5266807	Identifier	stream_unknown		5266781	0					
ANR	5266808	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(double &d) has unknown direction!"" )"	330:3:6658:6721	5266781	5	True				
ANR	5266809	CallExpression	"EXCEPT ( ""ERROR: Stream::code(double &d) has unknown direction!"" )"		5266781	0					
ANR	5266810	Callee	EXCEPT		5266781	0					
ANR	5266811	Identifier	EXCEPT		5266781	0					
ANR	5266812	ArgumentList	"""ERROR: Stream::code(double &d) has unknown direction!"""		5266781	1					
ANR	5266813	Argument	"""ERROR: Stream::code(double &d) has unknown direction!"""		5266781	0					
ANR	5266814	PrimaryExpression	"""ERROR: Stream::code(double &d) has unknown direction!"""		5266781	0					
ANR	5266815	BreakStatement	break ;	331:3:6726:6731	5266781	6	True				
ANR	5266816	Label	default :	332:2:6735:6742	5266781	7	True				
ANR	5266817	Identifier	default		5266781	0					
ANR	5266818	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(double &d)'s _coding is illegal!"" )"	333:3:6747:6809	5266781	8	True				
ANR	5266819	CallExpression	"EXCEPT ( ""ERROR: Stream::code(double &d)'s _coding is illegal!"" )"		5266781	0					
ANR	5266820	Callee	EXCEPT		5266781	0					
ANR	5266821	Identifier	EXCEPT		5266781	0					
ANR	5266822	ArgumentList	"""ERROR: Stream::code(double &d)'s _coding is illegal!"""		5266781	1					
ANR	5266823	Argument	"""ERROR: Stream::code(double &d)'s _coding is illegal!"""		5266781	0					
ANR	5266824	PrimaryExpression	"""ERROR: Stream::code(double &d)'s _coding is illegal!"""		5266781	0					
ANR	5266825	BreakStatement	break ;	334:3:6814:6819	5266781	9	True				
ANR	5266826	ReturnStatement	return FALSE ;	337:1:6826:6838	5266781	1	True				
ANR	5266827	Identifier	FALSE		5266781	0					
ANR	5266828	ReturnType	int		5266781	1					
ANR	5266829	Identifier	Stream :: code		5266781	2					
ANR	5266830	ParameterList	double & d		5266781	3					
ANR	5266831	Parameter	double & d	322:14:6521:6529	5266781	0	True				
ANR	5266832	ParameterType	double &		5266781	0					
ANR	5266833	Identifier	d		5266781	1					
ANR	5266834	CFGEntryNode	ENTRY		5266781		True				
ANR	5266835	CFGExitNode	EXIT		5266781		True				
ANR	5266836	Symbol	_coding		5266781						
ANR	5266837	Symbol	d		5266781						
ANR	5266838	Symbol	get		5266781						
ANR	5266839	Symbol	FALSE		5266781						
ANR	5266840	Symbol	put		5266781						
ANR	5266841	Function	Stream :: code	342:0:6871:7232							
ANR	5266842	FunctionDef	Stream :: code (char * & s)		5266841	0					
ANR	5266843	CompoundStatement		344:0:6900:7232	5266841	0					
ANR	5266844	SwitchStatement	switch ( _coding )		5266841	0					
ANR	5266845	Condition	_coding	345:8:6910:6916	5266841	0	True				
ANR	5266846	Identifier	_coding		5266841	0					
ANR	5266847	CompoundStatement		2:16:17:17	5266841	1					
ANR	5266848	Label	case stream_encode :	346:2:6922:6940	5266841	0	True				
ANR	5266849	Identifier	stream_encode		5266841	0					
ANR	5266850	ReturnStatement	return put ( s ) ;	347:3:6945:6958	5266841	1	True				
ANR	5266851	CallExpression	put ( s )		5266841	0					
ANR	5266852	Callee	put		5266841	0					
ANR	5266853	Identifier	put		5266841	0					
ANR	5266854	ArgumentList	s		5266841	1					
ANR	5266855	Argument	s		5266841	0					
ANR	5266856	Identifier	s		5266841	0					
ANR	5266857	Label	case stream_decode :	348:2:6962:6980	5266841	2	True				
ANR	5266858	Identifier	stream_decode		5266841	0					
ANR	5266859	ReturnStatement	return get ( s ) ;	349:3:6985:6998	5266841	3	True				
ANR	5266860	CallExpression	get ( s )		5266841	0					
ANR	5266861	Callee	get		5266841	0					
ANR	5266862	Identifier	get		5266841	0					
ANR	5266863	ArgumentList	s		5266841	1					
ANR	5266864	Argument	s		5266841	0					
ANR	5266865	Identifier	s		5266841	0					
ANR	5266866	Label	case stream_unknown :	350:2:7002:7021	5266841	4	True				
ANR	5266867	Identifier	stream_unknown		5266841	0					
ANR	5266868	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(char *&s) has unknown direction!"" )"	351:3:7026:7088	5266841	5	True				
ANR	5266869	CallExpression	"EXCEPT ( ""ERROR: Stream::code(char *&s) has unknown direction!"" )"		5266841	0					
ANR	5266870	Callee	EXCEPT		5266841	0					
ANR	5266871	Identifier	EXCEPT		5266841	0					
ANR	5266872	ArgumentList	"""ERROR: Stream::code(char *&s) has unknown direction!"""		5266841	1					
ANR	5266873	Argument	"""ERROR: Stream::code(char *&s) has unknown direction!"""		5266841	0					
ANR	5266874	PrimaryExpression	"""ERROR: Stream::code(char *&s) has unknown direction!"""		5266841	0					
ANR	5266875	BreakStatement	break ;	352:3:7093:7098	5266841	6	True				
ANR	5266876	Label	default :	353:2:7102:7109	5266841	7	True				
ANR	5266877	Identifier	default		5266841	0					
ANR	5266878	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(char *&s)'s _coding is illegal!"" )"	354:3:7114:7175	5266841	8	True				
ANR	5266879	CallExpression	"EXCEPT ( ""ERROR: Stream::code(char *&s)'s _coding is illegal!"" )"		5266841	0					
ANR	5266880	Callee	EXCEPT		5266841	0					
ANR	5266881	Identifier	EXCEPT		5266841	0					
ANR	5266882	ArgumentList	"""ERROR: Stream::code(char *&s)'s _coding is illegal!"""		5266841	1					
ANR	5266883	Argument	"""ERROR: Stream::code(char *&s)'s _coding is illegal!"""		5266841	0					
ANR	5266884	PrimaryExpression	"""ERROR: Stream::code(char *&s)'s _coding is illegal!"""		5266841	0					
ANR	5266885	BreakStatement	break ;	355:3:7180:7185	5266841	9	True				
ANR	5266886	ReturnStatement	return FALSE ;	358:1:7192:7204	5266841	1	True				
ANR	5266887	Identifier	FALSE		5266841	0					
ANR	5266888	ReturnType	int		5266841	1					
ANR	5266889	Identifier	Stream :: code		5266841	2					
ANR	5266890	ParameterList	char * & s		5266841	3					
ANR	5266891	Parameter	char * & s	343:14:6890:6897	5266841	0	True				
ANR	5266892	ParameterType	char * &		5266841	0					
ANR	5266893	Identifier	s		5266841	1					
ANR	5266894	CFGEntryNode	ENTRY		5266841		True				
ANR	5266895	CFGExitNode	EXIT		5266841		True				
ANR	5266896	Symbol	_coding		5266841						
ANR	5266897	Symbol	s		5266841						
ANR	5266898	Symbol	get		5266841						
ANR	5266899	Symbol	FALSE		5266841						
ANR	5266900	Symbol	put		5266841						
ANR	5266901	Function	Stream :: code	362:0:7236:7606							
ANR	5266902	FunctionDef	Stream :: code (MyString & s)		5266901	0					
ANR	5266903	CompoundStatement		364:0:7268:7606	5266901	0					
ANR	5266904	SwitchStatement	switch ( _coding )		5266901	0					
ANR	5266905	Condition	_coding	365:8:7278:7284	5266901	0	True				
ANR	5266906	Identifier	_coding		5266901	0					
ANR	5266907	CompoundStatement		2:16:17:17	5266901	1					
ANR	5266908	Label	case stream_encode :	366:2:7290:7308	5266901	0	True				
ANR	5266909	Identifier	stream_encode		5266901	0					
ANR	5266910	ReturnStatement	return put ( s ) ;	367:3:7313:7326	5266901	1	True				
ANR	5266911	CallExpression	put ( s )		5266901	0					
ANR	5266912	Callee	put		5266901	0					
ANR	5266913	Identifier	put		5266901	0					
ANR	5266914	ArgumentList	s		5266901	1					
ANR	5266915	Argument	s		5266901	0					
ANR	5266916	Identifier	s		5266901	0					
ANR	5266917	Label	case stream_decode :	368:2:7330:7348	5266901	2	True				
ANR	5266918	Identifier	stream_decode		5266901	0					
ANR	5266919	ReturnStatement	return get ( s ) ;	369:3:7353:7366	5266901	3	True				
ANR	5266920	CallExpression	get ( s )		5266901	0					
ANR	5266921	Callee	get		5266901	0					
ANR	5266922	Identifier	get		5266901	0					
ANR	5266923	ArgumentList	s		5266901	1					
ANR	5266924	Argument	s		5266901	0					
ANR	5266925	Identifier	s		5266901	0					
ANR	5266926	Label	case stream_unknown :	370:2:7370:7389	5266901	4	True				
ANR	5266927	Identifier	stream_unknown		5266901	0					
ANR	5266928	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(MyString &s) has unknown direction!"" )"	371:3:7394:7459	5266901	5	True				
ANR	5266929	CallExpression	"EXCEPT ( ""ERROR: Stream::code(MyString &s) has unknown direction!"" )"		5266901	0					
ANR	5266930	Callee	EXCEPT		5266901	0					
ANR	5266931	Identifier	EXCEPT		5266901	0					
ANR	5266932	ArgumentList	"""ERROR: Stream::code(MyString &s) has unknown direction!"""		5266901	1					
ANR	5266933	Argument	"""ERROR: Stream::code(MyString &s) has unknown direction!"""		5266901	0					
ANR	5266934	PrimaryExpression	"""ERROR: Stream::code(MyString &s) has unknown direction!"""		5266901	0					
ANR	5266935	BreakStatement	break ;	372:3:7464:7469	5266901	6	True				
ANR	5266936	Label	default :	373:2:7473:7480	5266901	7	True				
ANR	5266937	Identifier	default		5266901	0					
ANR	5266938	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(MyString &s)'s _coding is illegal!"" )"	374:3:7485:7549	5266901	8	True				
ANR	5266939	CallExpression	"EXCEPT ( ""ERROR: Stream::code(MyString &s)'s _coding is illegal!"" )"		5266901	0					
ANR	5266940	Callee	EXCEPT		5266901	0					
ANR	5266941	Identifier	EXCEPT		5266901	0					
ANR	5266942	ArgumentList	"""ERROR: Stream::code(MyString &s)'s _coding is illegal!"""		5266901	1					
ANR	5266943	Argument	"""ERROR: Stream::code(MyString &s)'s _coding is illegal!"""		5266901	0					
ANR	5266944	PrimaryExpression	"""ERROR: Stream::code(MyString &s)'s _coding is illegal!"""		5266901	0					
ANR	5266945	BreakStatement	break ;	375:3:7554:7559	5266901	9	True				
ANR	5266946	ReturnStatement	return FALSE ;	378:1:7566:7578	5266901	1	True				
ANR	5266947	Identifier	FALSE		5266901	0					
ANR	5266948	ReturnType	int		5266901	1					
ANR	5266949	Identifier	Stream :: code		5266901	2					
ANR	5266950	ParameterList	MyString & s		5266901	3					
ANR	5266951	Parameter	MyString & s	363:14:7255:7265	5266901	0	True				
ANR	5266952	ParameterType	MyString &		5266901	0					
ANR	5266953	Identifier	s		5266901	1					
ANR	5266954	CFGEntryNode	ENTRY		5266901		True				
ANR	5266955	CFGExitNode	EXIT		5266901		True				
ANR	5266956	Symbol	_coding		5266901						
ANR	5266957	Symbol	s		5266901						
ANR	5266958	Symbol	get		5266901						
ANR	5266959	Symbol	FALSE		5266901						
ANR	5266960	Symbol	put		5266901						
ANR	5266961	Function	Stream :: code	382:0:7610:7989							
ANR	5266962	FunctionDef	Stream :: code (std :: string & s)		5266961	0					
ANR	5266963	CompoundStatement		384:0:7645:7989	5266961	0					
ANR	5266964	SwitchStatement	switch ( _coding )		5266961	0					
ANR	5266965	Condition	_coding	385:8:7655:7661	5266961	0	True				
ANR	5266966	Identifier	_coding		5266961	0					
ANR	5266967	CompoundStatement		2:16:17:17	5266961	1					
ANR	5266968	Label	case stream_encode :	386:2:7667:7685	5266961	0	True				
ANR	5266969	Identifier	stream_encode		5266961	0					
ANR	5266970	ReturnStatement	return put ( s ) ;	387:3:7690:7703	5266961	1	True				
ANR	5266971	CallExpression	put ( s )		5266961	0					
ANR	5266972	Callee	put		5266961	0					
ANR	5266973	Identifier	put		5266961	0					
ANR	5266974	ArgumentList	s		5266961	1					
ANR	5266975	Argument	s		5266961	0					
ANR	5266976	Identifier	s		5266961	0					
ANR	5266977	Label	case stream_decode :	388:2:7707:7725	5266961	2	True				
ANR	5266978	Identifier	stream_decode		5266961	0					
ANR	5266979	ReturnStatement	return get ( s ) ;	389:3:7730:7743	5266961	3	True				
ANR	5266980	CallExpression	get ( s )		5266961	0					
ANR	5266981	Callee	get		5266961	0					
ANR	5266982	Identifier	get		5266961	0					
ANR	5266983	ArgumentList	s		5266961	1					
ANR	5266984	Argument	s		5266961	0					
ANR	5266985	Identifier	s		5266961	0					
ANR	5266986	Label	case stream_unknown :	390:2:7747:7766	5266961	4	True				
ANR	5266987	Identifier	stream_unknown		5266961	0					
ANR	5266988	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(std::string &s) has unknown direction!"" )"	391:3:7771:7839	5266961	5	True				
ANR	5266989	CallExpression	"EXCEPT ( ""ERROR: Stream::code(std::string &s) has unknown direction!"" )"		5266961	0					
ANR	5266990	Callee	EXCEPT		5266961	0					
ANR	5266991	Identifier	EXCEPT		5266961	0					
ANR	5266992	ArgumentList	"""ERROR: Stream::code(std::string &s) has unknown direction!"""		5266961	1					
ANR	5266993	Argument	"""ERROR: Stream::code(std::string &s) has unknown direction!"""		5266961	0					
ANR	5266994	PrimaryExpression	"""ERROR: Stream::code(std::string &s) has unknown direction!"""		5266961	0					
ANR	5266995	BreakStatement	break ;	392:3:7844:7849	5266961	6	True				
ANR	5266996	Label	default :	393:2:7853:7860	5266961	7	True				
ANR	5266997	Identifier	default		5266961	0					
ANR	5266998	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(std::string &s)'s _coding is illegal!"" )"	394:3:7865:7932	5266961	8	True				
ANR	5266999	CallExpression	"EXCEPT ( ""ERROR: Stream::code(std::string &s)'s _coding is illegal!"" )"		5266961	0					
ANR	5267000	Callee	EXCEPT		5266961	0					
ANR	5267001	Identifier	EXCEPT		5266961	0					
ANR	5267002	ArgumentList	"""ERROR: Stream::code(std::string &s)'s _coding is illegal!"""		5266961	1					
ANR	5267003	Argument	"""ERROR: Stream::code(std::string &s)'s _coding is illegal!"""		5266961	0					
ANR	5267004	PrimaryExpression	"""ERROR: Stream::code(std::string &s)'s _coding is illegal!"""		5266961	0					
ANR	5267005	BreakStatement	break ;	395:3:7937:7942	5266961	9	True				
ANR	5267006	ReturnStatement	return FALSE ;	398:1:7949:7961	5266961	1	True				
ANR	5267007	Identifier	FALSE		5266961	0					
ANR	5267008	ReturnType	int		5266961	1					
ANR	5267009	Identifier	Stream :: code		5266961	2					
ANR	5267010	ParameterList	std :: string & s		5266961	3					
ANR	5267011	Parameter	std :: string & s	383:14:7629:7642	5266961	0	True				
ANR	5267012	ParameterType	std :: string &		5266961	0					
ANR	5267013	Identifier	s		5266961	1					
ANR	5267014	CFGEntryNode	ENTRY		5266961		True				
ANR	5267015	CFGExitNode	EXIT		5266961		True				
ANR	5267016	Symbol	_coding		5266961						
ANR	5267017	Symbol	s		5266961						
ANR	5267018	Symbol	get		5266961						
ANR	5267019	Symbol	FALSE		5266961						
ANR	5267020	Symbol	put		5266961						
ANR	5267021	Function	Stream :: code	402:0:7993:8395							
ANR	5267022	FunctionDef	"Stream :: code (char * & s , int & len)"		5267021	0					
ANR	5267023	CompoundStatement		404:0:8033:8395	5267021	0					
ANR	5267024	SwitchStatement	switch ( _coding )		5267021	0					
ANR	5267025	Condition	_coding	405:8:8043:8049	5267021	0	True				
ANR	5267026	Identifier	_coding		5267021	0					
ANR	5267027	CompoundStatement		2:16:17:17	5267021	1					
ANR	5267028	Label	case stream_encode :	406:2:8055:8073	5267021	0	True				
ANR	5267029	Identifier	stream_encode		5267021	0					
ANR	5267030	ReturnStatement	"return put ( s , len ) ;"	407:3:8078:8096	5267021	1	True				
ANR	5267031	CallExpression	"put ( s , len )"		5267021	0					
ANR	5267032	Callee	put		5267021	0					
ANR	5267033	Identifier	put		5267021	0					
ANR	5267034	ArgumentList	s		5267021	1					
ANR	5267035	Argument	s		5267021	0					
ANR	5267036	Identifier	s		5267021	0					
ANR	5267037	Argument	len		5267021	1					
ANR	5267038	Identifier	len		5267021	0					
ANR	5267039	Label	case stream_decode :	408:2:8100:8118	5267021	2	True				
ANR	5267040	Identifier	stream_decode		5267021	0					
ANR	5267041	ReturnStatement	"return get ( s , len ) ;"	409:3:8123:8141	5267021	3	True				
ANR	5267042	CallExpression	"get ( s , len )"		5267021	0					
ANR	5267043	Callee	get		5267021	0					
ANR	5267044	Identifier	get		5267021	0					
ANR	5267045	ArgumentList	s		5267021	1					
ANR	5267046	Argument	s		5267021	0					
ANR	5267047	Identifier	s		5267021	0					
ANR	5267048	Argument	len		5267021	1					
ANR	5267049	Identifier	len		5267021	0					
ANR	5267050	Label	case stream_unknown :	410:2:8145:8164	5267021	4	True				
ANR	5267051	Identifier	stream_unknown		5267021	0					
ANR	5267052	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(char *&s, int &len) has unknown direction!"" )"	411:3:8169:8241	5267021	5	True				
ANR	5267053	CallExpression	"EXCEPT ( ""ERROR: Stream::code(char *&s, int &len) has unknown direction!"" )"		5267021	0					
ANR	5267054	Callee	EXCEPT		5267021	0					
ANR	5267055	Identifier	EXCEPT		5267021	0					
ANR	5267056	ArgumentList	"""ERROR: Stream::code(char *&s, int &len) has unknown direction!"""		5267021	1					
ANR	5267057	Argument	"""ERROR: Stream::code(char *&s, int &len) has unknown direction!"""		5267021	0					
ANR	5267058	PrimaryExpression	"""ERROR: Stream::code(char *&s, int &len) has unknown direction!"""		5267021	0					
ANR	5267059	BreakStatement	break ;	412:3:8246:8251	5267021	6	True				
ANR	5267060	Label	default :	413:2:8255:8262	5267021	7	True				
ANR	5267061	Identifier	default		5267021	0					
ANR	5267062	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(char *&s, int &len)'s _coding is illegal!"" )"	414:3:8267:8338	5267021	8	True				
ANR	5267063	CallExpression	"EXCEPT ( ""ERROR: Stream::code(char *&s, int &len)'s _coding is illegal!"" )"		5267021	0					
ANR	5267064	Callee	EXCEPT		5267021	0					
ANR	5267065	Identifier	EXCEPT		5267021	0					
ANR	5267066	ArgumentList	"""ERROR: Stream::code(char *&s, int &len)'s _coding is illegal!"""		5267021	1					
ANR	5267067	Argument	"""ERROR: Stream::code(char *&s, int &len)'s _coding is illegal!"""		5267021	0					
ANR	5267068	PrimaryExpression	"""ERROR: Stream::code(char *&s, int &len)'s _coding is illegal!"""		5267021	0					
ANR	5267069	BreakStatement	break ;	415:3:8343:8348	5267021	9	True				
ANR	5267070	ReturnStatement	return FALSE ;	418:1:8355:8367	5267021	1	True				
ANR	5267071	Identifier	FALSE		5267021	0					
ANR	5267072	ReturnType	int		5267021	1					
ANR	5267073	Identifier	Stream :: code		5267021	2					
ANR	5267074	ParameterList	"char * & s , int & len"		5267021	3					
ANR	5267075	Parameter	char * & s	403:14:8012:8019	5267021	0	True				
ANR	5267076	ParameterType	char * &		5267021	0					
ANR	5267077	Identifier	s		5267021	1					
ANR	5267078	Parameter	int & len	403:24:8022:8030	5267021	1	True				
ANR	5267079	ParameterType	int &		5267021	0					
ANR	5267080	Identifier	len		5267021	1					
ANR	5267081	CFGEntryNode	ENTRY		5267021		True				
ANR	5267082	CFGExitNode	EXIT		5267021		True				
ANR	5267083	Symbol	_coding		5267021						
ANR	5267084	Symbol	s		5267021						
ANR	5267085	Symbol	len		5267021						
ANR	5267086	Symbol	get		5267021						
ANR	5267087	Symbol	FALSE		5267021						
ANR	5267088	Symbol	put		5267021						
ANR	5267089	Function	Stream :: code_bytes_bool	422:0:8399:8522							
ANR	5267090	FunctionDef	"Stream :: code_bytes_bool (void * p , int l)"		5267089	0					
ANR	5267091	CompoundStatement		424:0:8444:8522	5267089	0					
ANR	5267092	IfStatement	"if ( code_bytes ( p , l ) < 0 )"		5267089	0					
ANR	5267093	Condition	"code_bytes ( p , l ) < 0"	425:5:8451:8472	5267089	0	True				
ANR	5267094	RelationalExpression	"code_bytes ( p , l ) < 0"		5267089	0		<			
ANR	5267095	CallExpression	"code_bytes ( p , l )"		5267089	0					
ANR	5267096	Callee	code_bytes		5267089	0					
ANR	5267097	Identifier	code_bytes		5267089	0					
ANR	5267098	ArgumentList	p		5267089	1					
ANR	5267099	Argument	p		5267089	0					
ANR	5267100	Identifier	p		5267089	0					
ANR	5267101	Argument	l		5267089	1					
ANR	5267102	Identifier	l		5267089	0					
ANR	5267103	PrimaryExpression	0		5267089	1					
ANR	5267104	CompoundStatement		2:30:31:31	5267089	1					
ANR	5267105	ReturnStatement	return FALSE ;	426:2:8480:8492	5267089	0	True				
ANR	5267106	Identifier	FALSE		5267089	0					
ANR	5267107	ElseStatement	else		5267089	0					
ANR	5267108	CompoundStatement		4:8:57:57	5267089	0					
ANR	5267109	ReturnStatement	return TRUE ;	428:2:8506:8517	5267089	0	True				
ANR	5267110	Identifier	TRUE		5267089	0					
ANR	5267111	ReturnType	int		5267089	1					
ANR	5267112	Identifier	Stream :: code_bytes_bool		5267089	2					
ANR	5267113	ParameterList	"void * p , int l"		5267089	3					
ANR	5267114	Parameter	void * p	423:24:8428:8434	5267089	0	True				
ANR	5267115	ParameterType	void *		5267089	0					
ANR	5267116	Identifier	p		5267089	1					
ANR	5267117	Parameter	int l	423:33:8437:8441	5267089	1	True				
ANR	5267118	ParameterType	int		5267089	0					
ANR	5267119	Identifier	l		5267089	1					
ANR	5267120	CFGEntryNode	ENTRY		5267089		True				
ANR	5267121	CFGExitNode	EXIT		5267089		True				
ANR	5267122	Symbol	p		5267089						
ANR	5267123	Symbol	TRUE		5267089						
ANR	5267124	Symbol	FALSE		5267089						
ANR	5267125	Symbol	l		5267089						
ANR	5267126	Symbol	code_bytes		5267089						
ANR	5267127	Function	Stream :: code_bytes	433:0:8526:8943							
ANR	5267128	FunctionDef	"Stream :: code_bytes (void * p , int l)"		5267127	0					
ANR	5267129	CompoundStatement		435:0:8566:8943	5267127	0					
ANR	5267130	SwitchStatement	switch ( _coding )		5267127	0					
ANR	5267131	Condition	_coding	436:8:8576:8582	5267127	0	True				
ANR	5267132	Identifier	_coding		5267127	0					
ANR	5267133	CompoundStatement		2:17:18:18	5267127	1					
ANR	5267134	Label	case stream_encode :	437:2:8589:8607	5267127	0	True				
ANR	5267135	Identifier	stream_encode		5267127	0					
ANR	5267136	ReturnStatement	"return put_bytes ( ( const void * ) p , l ) ;"	438:3:8612:8648	5267127	1	True				
ANR	5267137	CallExpression	"put_bytes ( ( const void * ) p , l )"		5267127	0					
ANR	5267138	Callee	put_bytes		5267127	0					
ANR	5267139	Identifier	put_bytes		5267127	0					
ANR	5267140	ArgumentList	( const void * ) p		5267127	1					
ANR	5267141	Argument	( const void * ) p		5267127	0					
ANR	5267142	CastExpression	( const void * ) p		5267127	0					
ANR	5267143	CastTarget	const void *		5267127	0					
ANR	5267144	Identifier	p		5267127	1					
ANR	5267145	Argument	l		5267127	1					
ANR	5267146	Identifier	l		5267127	0					
ANR	5267147	Label	case stream_decode :	439:2:8652:8670	5267127	2	True				
ANR	5267148	Identifier	stream_decode		5267127	0					
ANR	5267149	ReturnStatement	"return get_bytes ( p , l ) ;"	440:3:8675:8697	5267127	3	True				
ANR	5267150	CallExpression	"get_bytes ( p , l )"		5267127	0					
ANR	5267151	Callee	get_bytes		5267127	0					
ANR	5267152	Identifier	get_bytes		5267127	0					
ANR	5267153	ArgumentList	p		5267127	1					
ANR	5267154	Argument	p		5267127	0					
ANR	5267155	Identifier	p		5267127	0					
ANR	5267156	Argument	l		5267127	1					
ANR	5267157	Identifier	l		5267127	0					
ANR	5267158	Label	case stream_unknown :	441:2:8701:8720	5267127	4	True				
ANR	5267159	Identifier	stream_unknown		5267127	0					
ANR	5267160	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(void *p, int l) has unknown direction!"" )"	442:3:8725:8793	5267127	5	True				
ANR	5267161	CallExpression	"EXCEPT ( ""ERROR: Stream::code(void *p, int l) has unknown direction!"" )"		5267127	0					
ANR	5267162	Callee	EXCEPT		5267127	0					
ANR	5267163	Identifier	EXCEPT		5267127	0					
ANR	5267164	ArgumentList	"""ERROR: Stream::code(void *p, int l) has unknown direction!"""		5267127	1					
ANR	5267165	Argument	"""ERROR: Stream::code(void *p, int l) has unknown direction!"""		5267127	0					
ANR	5267166	PrimaryExpression	"""ERROR: Stream::code(void *p, int l) has unknown direction!"""		5267127	0					
ANR	5267167	BreakStatement	break ;	443:3:8798:8803	5267127	6	True				
ANR	5267168	Label	default :	444:2:8807:8814	5267127	7	True				
ANR	5267169	Identifier	default		5267127	0					
ANR	5267170	ExpressionStatement	"EXCEPT ( ""ERROR: Stream::code(void *p, int l)'s _coding is illegal!"" )"	445:3:8819:8886	5267127	8	True				
ANR	5267171	CallExpression	"EXCEPT ( ""ERROR: Stream::code(void *p, int l)'s _coding is illegal!"" )"		5267127	0					
ANR	5267172	Callee	EXCEPT		5267127	0					
ANR	5267173	Identifier	EXCEPT		5267127	0					
ANR	5267174	ArgumentList	"""ERROR: Stream::code(void *p, int l)'s _coding is illegal!"""		5267127	1					
ANR	5267175	Argument	"""ERROR: Stream::code(void *p, int l)'s _coding is illegal!"""		5267127	0					
ANR	5267176	PrimaryExpression	"""ERROR: Stream::code(void *p, int l)'s _coding is illegal!"""		5267127	0					
ANR	5267177	BreakStatement	break ;	446:3:8891:8896	5267127	9	True				
ANR	5267178	ReturnStatement	return FALSE ;	449:1:8903:8915	5267127	1	True				
ANR	5267179	Identifier	FALSE		5267127	0					
ANR	5267180	ReturnType	int		5267127	1					
ANR	5267181	Identifier	Stream :: code_bytes		5267127	2					
ANR	5267182	ParameterList	"void * p , int l"		5267127	3					
ANR	5267183	Parameter	void * p	434:19:8550:8556	5267127	0	True				
ANR	5267184	ParameterType	void *		5267127	0					
ANR	5267185	Identifier	p		5267127	1					
ANR	5267186	Parameter	int l	434:28:8559:8563	5267127	1	True				
ANR	5267187	ParameterType	int		5267127	0					
ANR	5267188	Identifier	l		5267127	1					
ANR	5267189	CFGEntryNode	ENTRY		5267127		True				
ANR	5267190	CFGExitNode	EXIT		5267127		True				
ANR	5267191	Symbol	p		5267127						
ANR	5267192	Symbol	_coding		5267127						
ANR	5267193	Symbol	FALSE		5267127						
ANR	5267194	Symbol	l		5267127						
ANR	5267195	Symbol	put_bytes		5267127						
ANR	5267196	Symbol	get_bytes		5267127						
ANR	5267197	Function	Stream :: code	458:0:9029:9142							
ANR	5267198	FunctionDef	Stream :: code (PROC_ID & id)		5267197	0					
ANR	5267199	CompoundStatement		460:0:9060:9142	5267197	0					
ANR	5267200	ExpressionStatement	STREAM_ASSERT ( code ( id . cluster ) )	461:1:9063:9094	5267197	0	True				
ANR	5267201	CallExpression	STREAM_ASSERT ( code ( id . cluster ) )		5267197	0					
ANR	5267202	Callee	STREAM_ASSERT		5267197	0					
ANR	5267203	Identifier	STREAM_ASSERT		5267197	0					
ANR	5267204	ArgumentList	code ( id . cluster )		5267197	1					
ANR	5267205	Argument	code ( id . cluster )		5267197	0					
ANR	5267206	CallExpression	code ( id . cluster )		5267197	0					
ANR	5267207	Callee	code		5267197	0					
ANR	5267208	Identifier	code		5267197	0					
ANR	5267209	ArgumentList	id . cluster		5267197	1					
ANR	5267210	Argument	id . cluster		5267197	0					
ANR	5267211	MemberAccess	id . cluster		5267197	0					
ANR	5267212	Identifier	id		5267197	0					
ANR	5267213	Identifier	cluster		5267197	1					
ANR	5267214	ExpressionStatement	STREAM_ASSERT ( code ( id . proc ) )	462:1:9097:9125	5267197	1	True				
ANR	5267215	CallExpression	STREAM_ASSERT ( code ( id . proc ) )		5267197	0					
ANR	5267216	Callee	STREAM_ASSERT		5267197	0					
ANR	5267217	Identifier	STREAM_ASSERT		5267197	0					
ANR	5267218	ArgumentList	code ( id . proc )		5267197	1					
ANR	5267219	Argument	code ( id . proc )		5267197	0					
ANR	5267220	CallExpression	code ( id . proc )		5267197	0					
ANR	5267221	Callee	code		5267197	0					
ANR	5267222	Identifier	code		5267197	0					
ANR	5267223	ArgumentList	id . proc		5267197	1					
ANR	5267224	Argument	id . proc		5267197	0					
ANR	5267225	MemberAccess	id . proc		5267197	0					
ANR	5267226	Identifier	id		5267197	0					
ANR	5267227	Identifier	proc		5267197	1					
ANR	5267228	ReturnStatement	return TRUE ;	464:1:9129:9140	5267197	2	True				
ANR	5267229	Identifier	TRUE		5267197	0					
ANR	5267230	ReturnType	int		5267197	1					
ANR	5267231	Identifier	Stream :: code		5267197	2					
ANR	5267232	ParameterList	PROC_ID & id		5267197	3					
ANR	5267233	Parameter	PROC_ID & id	459:13:9047:9057	5267197	0	True				
ANR	5267234	ParameterType	PROC_ID &		5267197	0					
ANR	5267235	Identifier	id		5267197	1					
ANR	5267236	CFGEntryNode	ENTRY		5267197		True				
ANR	5267237	CFGExitNode	EXIT		5267197		True				
ANR	5267238	Symbol	code		5267197						
ANR	5267239	Symbol	id . proc		5267197						
ANR	5267240	Symbol	TRUE		5267197						
ANR	5267241	Symbol	id		5267197						
ANR	5267242	Symbol	id . cluster		5267197						
ANR	5267243	Function	Stream :: code	467:0:9145:9964							
ANR	5267244	FunctionDef	Stream :: code (STARTUP_INFO & start)		5267243	0					
ANR	5267245	CompoundStatement		469:0:9184:9964	5267243	0					
ANR	5267246	ExpressionStatement	STREAM_ASSERT ( code ( start . version_num ) )	470:1:9187:9225	5267243	0	True				
ANR	5267247	CallExpression	STREAM_ASSERT ( code ( start . version_num ) )		5267243	0					
ANR	5267248	Callee	STREAM_ASSERT		5267243	0					
ANR	5267249	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267250	ArgumentList	code ( start . version_num )		5267243	1					
ANR	5267251	Argument	code ( start . version_num )		5267243	0					
ANR	5267252	CallExpression	code ( start . version_num )		5267243	0					
ANR	5267253	Callee	code		5267243	0					
ANR	5267254	Identifier	code		5267243	0					
ANR	5267255	ArgumentList	start . version_num		5267243	1					
ANR	5267256	Argument	start . version_num		5267243	0					
ANR	5267257	MemberAccess	start . version_num		5267243	0					
ANR	5267258	Identifier	start		5267243	0					
ANR	5267259	Identifier	version_num		5267243	1					
ANR	5267260	ExpressionStatement	STREAM_ASSERT ( code ( start . cluster ) )	471:1:9228:9262	5267243	1	True				
ANR	5267261	CallExpression	STREAM_ASSERT ( code ( start . cluster ) )		5267243	0					
ANR	5267262	Callee	STREAM_ASSERT		5267243	0					
ANR	5267263	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267264	ArgumentList	code ( start . cluster )		5267243	1					
ANR	5267265	Argument	code ( start . cluster )		5267243	0					
ANR	5267266	CallExpression	code ( start . cluster )		5267243	0					
ANR	5267267	Callee	code		5267243	0					
ANR	5267268	Identifier	code		5267243	0					
ANR	5267269	ArgumentList	start . cluster		5267243	1					
ANR	5267270	Argument	start . cluster		5267243	0					
ANR	5267271	MemberAccess	start . cluster		5267243	0					
ANR	5267272	Identifier	start		5267243	0					
ANR	5267273	Identifier	cluster		5267243	1					
ANR	5267274	ExpressionStatement	STREAM_ASSERT ( code ( start . proc ) )	472:1:9265:9296	5267243	2	True				
ANR	5267275	CallExpression	STREAM_ASSERT ( code ( start . proc ) )		5267243	0					
ANR	5267276	Callee	STREAM_ASSERT		5267243	0					
ANR	5267277	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267278	ArgumentList	code ( start . proc )		5267243	1					
ANR	5267279	Argument	code ( start . proc )		5267243	0					
ANR	5267280	CallExpression	code ( start . proc )		5267243	0					
ANR	5267281	Callee	code		5267243	0					
ANR	5267282	Identifier	code		5267243	0					
ANR	5267283	ArgumentList	start . proc		5267243	1					
ANR	5267284	Argument	start . proc		5267243	0					
ANR	5267285	MemberAccess	start . proc		5267243	0					
ANR	5267286	Identifier	start		5267243	0					
ANR	5267287	Identifier	proc		5267243	1					
ANR	5267288	ExpressionStatement	STREAM_ASSERT ( code ( start . job_class ) )	473:1:9299:9335	5267243	3	True				
ANR	5267289	CallExpression	STREAM_ASSERT ( code ( start . job_class ) )		5267243	0					
ANR	5267290	Callee	STREAM_ASSERT		5267243	0					
ANR	5267291	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267292	ArgumentList	code ( start . job_class )		5267243	1					
ANR	5267293	Argument	code ( start . job_class )		5267243	0					
ANR	5267294	CallExpression	code ( start . job_class )		5267243	0					
ANR	5267295	Callee	code		5267243	0					
ANR	5267296	Identifier	code		5267243	0					
ANR	5267297	ArgumentList	start . job_class		5267243	1					
ANR	5267298	Argument	start . job_class		5267243	0					
ANR	5267299	MemberAccess	start . job_class		5267243	0					
ANR	5267300	Identifier	start		5267243	0					
ANR	5267301	Identifier	job_class		5267243	1					
ANR	5267302	ExpressionStatement	STREAM_ASSERT ( code ( start . uid ) )	475:1:9394:9424	5267243	4	True				
ANR	5267303	CallExpression	STREAM_ASSERT ( code ( start . uid ) )		5267243	0					
ANR	5267304	Callee	STREAM_ASSERT		5267243	0					
ANR	5267305	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267306	ArgumentList	code ( start . uid )		5267243	1					
ANR	5267307	Argument	code ( start . uid )		5267243	0					
ANR	5267308	CallExpression	code ( start . uid )		5267243	0					
ANR	5267309	Callee	code		5267243	0					
ANR	5267310	Identifier	code		5267243	0					
ANR	5267311	ArgumentList	start . uid		5267243	1					
ANR	5267312	Argument	start . uid		5267243	0					
ANR	5267313	MemberAccess	start . uid		5267243	0					
ANR	5267314	Identifier	start		5267243	0					
ANR	5267315	Identifier	uid		5267243	1					
ANR	5267316	ExpressionStatement	STREAM_ASSERT ( code ( start . gid ) )	476:1:9427:9457	5267243	5	True				
ANR	5267317	CallExpression	STREAM_ASSERT ( code ( start . gid ) )		5267243	0					
ANR	5267318	Callee	STREAM_ASSERT		5267243	0					
ANR	5267319	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267320	ArgumentList	code ( start . gid )		5267243	1					
ANR	5267321	Argument	code ( start . gid )		5267243	0					
ANR	5267322	CallExpression	code ( start . gid )		5267243	0					
ANR	5267323	Callee	code		5267243	0					
ANR	5267324	Identifier	code		5267243	0					
ANR	5267325	ArgumentList	start . gid		5267243	1					
ANR	5267326	Argument	start . gid		5267243	0					
ANR	5267327	MemberAccess	start . gid		5267243	0					
ANR	5267328	Identifier	start		5267243	0					
ANR	5267329	Identifier	gid		5267243	1					
ANR	5267330	ExpressionStatement	STREAM_ASSERT ( code ( start . virt_pid ) )	477:1:9460:9495	5267243	6	True				
ANR	5267331	CallExpression	STREAM_ASSERT ( code ( start . virt_pid ) )		5267243	0					
ANR	5267332	Callee	STREAM_ASSERT		5267243	0					
ANR	5267333	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267334	ArgumentList	code ( start . virt_pid )		5267243	1					
ANR	5267335	Argument	code ( start . virt_pid )		5267243	0					
ANR	5267336	CallExpression	code ( start . virt_pid )		5267243	0					
ANR	5267337	Callee	code		5267243	0					
ANR	5267338	Identifier	code		5267243	0					
ANR	5267339	ArgumentList	start . virt_pid		5267243	1					
ANR	5267340	Argument	start . virt_pid		5267243	0					
ANR	5267341	MemberAccess	start . virt_pid		5267243	0					
ANR	5267342	Identifier	start		5267243	0					
ANR	5267343	Identifier	virt_pid		5267243	1					
ANR	5267344	IdentifierDeclStatement	condor_signal_t temp = ( condor_signal_t ) start . soft_kill_sig ;	478:1:9498:9557	5267243	7	True				
ANR	5267345	IdentifierDecl	temp = ( condor_signal_t ) start . soft_kill_sig		5267243	0					
ANR	5267346	IdentifierDeclType	condor_signal_t		5267243	0					
ANR	5267347	Identifier	temp		5267243	1					
ANR	5267348	AssignmentExpression	temp = ( condor_signal_t ) start . soft_kill_sig		5267243	2		=			
ANR	5267349	Identifier	temp		5267243	0					
ANR	5267350	CastExpression	( condor_signal_t ) start . soft_kill_sig		5267243	1					
ANR	5267351	CastTarget	condor_signal_t		5267243	0					
ANR	5267352	MemberAccess	start . soft_kill_sig		5267243	1					
ANR	5267353	Identifier	start		5267243	0					
ANR	5267354	Identifier	soft_kill_sig		5267243	1					
ANR	5267355	ExpressionStatement	STREAM_ASSERT ( code ( temp ) )	479:1:9560:9585	5267243	8	True				
ANR	5267356	CallExpression	STREAM_ASSERT ( code ( temp ) )		5267243	0					
ANR	5267357	Callee	STREAM_ASSERT		5267243	0					
ANR	5267358	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267359	ArgumentList	code ( temp )		5267243	1					
ANR	5267360	Argument	code ( temp )		5267243	0					
ANR	5267361	CallExpression	code ( temp )		5267243	0					
ANR	5267362	Callee	code		5267243	0					
ANR	5267363	Identifier	code		5267243	0					
ANR	5267364	ArgumentList	temp		5267243	1					
ANR	5267365	Argument	temp		5267243	0					
ANR	5267366	Identifier	temp		5267243	0					
ANR	5267367	ExpressionStatement	start . soft_kill_sig = ( int ) temp	480:1:9588:9619	5267243	9	True				
ANR	5267368	AssignmentExpression	start . soft_kill_sig = ( int ) temp		5267243	0		=			
ANR	5267369	MemberAccess	start . soft_kill_sig		5267243	0					
ANR	5267370	Identifier	start		5267243	0					
ANR	5267371	Identifier	soft_kill_sig		5267243	1					
ANR	5267372	CastExpression	( int ) temp		5267243	1					
ANR	5267373	CastTarget	int		5267243	0					
ANR	5267374	Identifier	temp		5267243	1					
ANR	5267375	ExpressionStatement	STREAM_ASSERT ( code ( start . cmd ) )	482:1:9629:9659	5267243	10	True				
ANR	5267376	CallExpression	STREAM_ASSERT ( code ( start . cmd ) )		5267243	0					
ANR	5267377	Callee	STREAM_ASSERT		5267243	0					
ANR	5267378	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267379	ArgumentList	code ( start . cmd )		5267243	1					
ANR	5267380	Argument	code ( start . cmd )		5267243	0					
ANR	5267381	CallExpression	code ( start . cmd )		5267243	0					
ANR	5267382	Callee	code		5267243	0					
ANR	5267383	Identifier	code		5267243	0					
ANR	5267384	ArgumentList	start . cmd		5267243	1					
ANR	5267385	Argument	start . cmd		5267243	0					
ANR	5267386	MemberAccess	start . cmd		5267243	0					
ANR	5267387	Identifier	start		5267243	0					
ANR	5267388	Identifier	cmd		5267243	1					
ANR	5267389	ExpressionStatement	STREAM_ASSERT ( code ( start . args_v1or2 ) )	483:1:9662:9699	5267243	11	True				
ANR	5267390	CallExpression	STREAM_ASSERT ( code ( start . args_v1or2 ) )		5267243	0					
ANR	5267391	Callee	STREAM_ASSERT		5267243	0					
ANR	5267392	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267393	ArgumentList	code ( start . args_v1or2 )		5267243	1					
ANR	5267394	Argument	code ( start . args_v1or2 )		5267243	0					
ANR	5267395	CallExpression	code ( start . args_v1or2 )		5267243	0					
ANR	5267396	Callee	code		5267243	0					
ANR	5267397	Identifier	code		5267243	0					
ANR	5267398	ArgumentList	start . args_v1or2		5267243	1					
ANR	5267399	Argument	start . args_v1or2		5267243	0					
ANR	5267400	MemberAccess	start . args_v1or2		5267243	0					
ANR	5267401	Identifier	start		5267243	0					
ANR	5267402	Identifier	args_v1or2		5267243	1					
ANR	5267403	ExpressionStatement	STREAM_ASSERT ( code ( start . env_v1or2 ) )	484:1:9702:9738	5267243	12	True				
ANR	5267404	CallExpression	STREAM_ASSERT ( code ( start . env_v1or2 ) )		5267243	0					
ANR	5267405	Callee	STREAM_ASSERT		5267243	0					
ANR	5267406	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267407	ArgumentList	code ( start . env_v1or2 )		5267243	1					
ANR	5267408	Argument	code ( start . env_v1or2 )		5267243	0					
ANR	5267409	CallExpression	code ( start . env_v1or2 )		5267243	0					
ANR	5267410	Callee	code		5267243	0					
ANR	5267411	Identifier	code		5267243	0					
ANR	5267412	ArgumentList	start . env_v1or2		5267243	1					
ANR	5267413	Argument	start . env_v1or2		5267243	0					
ANR	5267414	MemberAccess	start . env_v1or2		5267243	0					
ANR	5267415	Identifier	start		5267243	0					
ANR	5267416	Identifier	env_v1or2		5267243	1					
ANR	5267417	ExpressionStatement	STREAM_ASSERT ( code ( start . iwd ) )	485:1:9741:9771	5267243	13	True				
ANR	5267418	CallExpression	STREAM_ASSERT ( code ( start . iwd ) )		5267243	0					
ANR	5267419	Callee	STREAM_ASSERT		5267243	0					
ANR	5267420	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267421	ArgumentList	code ( start . iwd )		5267243	1					
ANR	5267422	Argument	code ( start . iwd )		5267243	0					
ANR	5267423	CallExpression	code ( start . iwd )		5267243	0					
ANR	5267424	Callee	code		5267243	0					
ANR	5267425	Identifier	code		5267243	0					
ANR	5267426	ArgumentList	start . iwd		5267243	1					
ANR	5267427	Argument	start . iwd		5267243	0					
ANR	5267428	MemberAccess	start . iwd		5267243	0					
ANR	5267429	Identifier	start		5267243	0					
ANR	5267430	Identifier	iwd		5267243	1					
ANR	5267431	ExpressionStatement	STREAM_ASSERT ( code ( start . ckpt_wanted ) )	486:1:9774:9812	5267243	14	True				
ANR	5267432	CallExpression	STREAM_ASSERT ( code ( start . ckpt_wanted ) )		5267243	0					
ANR	5267433	Callee	STREAM_ASSERT		5267243	0					
ANR	5267434	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267435	ArgumentList	code ( start . ckpt_wanted )		5267243	1					
ANR	5267436	Argument	code ( start . ckpt_wanted )		5267243	0					
ANR	5267437	CallExpression	code ( start . ckpt_wanted )		5267243	0					
ANR	5267438	Callee	code		5267243	0					
ANR	5267439	Identifier	code		5267243	0					
ANR	5267440	ArgumentList	start . ckpt_wanted		5267243	1					
ANR	5267441	Argument	start . ckpt_wanted		5267243	0					
ANR	5267442	MemberAccess	start . ckpt_wanted		5267243	0					
ANR	5267443	Identifier	start		5267243	0					
ANR	5267444	Identifier	ckpt_wanted		5267243	1					
ANR	5267445	ExpressionStatement	STREAM_ASSERT ( code ( start . is_restart ) )	487:1:9815:9852	5267243	15	True				
ANR	5267446	CallExpression	STREAM_ASSERT ( code ( start . is_restart ) )		5267243	0					
ANR	5267447	Callee	STREAM_ASSERT		5267243	0					
ANR	5267448	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267449	ArgumentList	code ( start . is_restart )		5267243	1					
ANR	5267450	Argument	code ( start . is_restart )		5267243	0					
ANR	5267451	CallExpression	code ( start . is_restart )		5267243	0					
ANR	5267452	Callee	code		5267243	0					
ANR	5267453	Identifier	code		5267243	0					
ANR	5267454	ArgumentList	start . is_restart		5267243	1					
ANR	5267455	Argument	start . is_restart		5267243	0					
ANR	5267456	MemberAccess	start . is_restart		5267243	0					
ANR	5267457	Identifier	start		5267243	0					
ANR	5267458	Identifier	is_restart		5267243	1					
ANR	5267459	ExpressionStatement	STREAM_ASSERT ( code ( start . coredump_limit_exists ) )	488:1:9855:9903	5267243	16	True				
ANR	5267460	CallExpression	STREAM_ASSERT ( code ( start . coredump_limit_exists ) )		5267243	0					
ANR	5267461	Callee	STREAM_ASSERT		5267243	0					
ANR	5267462	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267463	ArgumentList	code ( start . coredump_limit_exists )		5267243	1					
ANR	5267464	Argument	code ( start . coredump_limit_exists )		5267243	0					
ANR	5267465	CallExpression	code ( start . coredump_limit_exists )		5267243	0					
ANR	5267466	Callee	code		5267243	0					
ANR	5267467	Identifier	code		5267243	0					
ANR	5267468	ArgumentList	start . coredump_limit_exists		5267243	1					
ANR	5267469	Argument	start . coredump_limit_exists		5267243	0					
ANR	5267470	MemberAccess	start . coredump_limit_exists		5267243	0					
ANR	5267471	Identifier	start		5267243	0					
ANR	5267472	Identifier	coredump_limit_exists		5267243	1					
ANR	5267473	ExpressionStatement	STREAM_ASSERT ( code ( start . coredump_limit ) )	489:1:9906:9947	5267243	17	True				
ANR	5267474	CallExpression	STREAM_ASSERT ( code ( start . coredump_limit ) )		5267243	0					
ANR	5267475	Callee	STREAM_ASSERT		5267243	0					
ANR	5267476	Identifier	STREAM_ASSERT		5267243	0					
ANR	5267477	ArgumentList	code ( start . coredump_limit )		5267243	1					
ANR	5267478	Argument	code ( start . coredump_limit )		5267243	0					
ANR	5267479	CallExpression	code ( start . coredump_limit )		5267243	0					
ANR	5267480	Callee	code		5267243	0					
ANR	5267481	Identifier	code		5267243	0					
ANR	5267482	ArgumentList	start . coredump_limit		5267243	1					
ANR	5267483	Argument	start . coredump_limit		5267243	0					
ANR	5267484	MemberAccess	start . coredump_limit		5267243	0					
ANR	5267485	Identifier	start		5267243	0					
ANR	5267486	Identifier	coredump_limit		5267243	1					
ANR	5267487	ReturnStatement	return TRUE ;	491:1:9951:9962	5267243	18	True				
ANR	5267488	Identifier	TRUE		5267243	0					
ANR	5267489	ReturnType	int		5267243	1					
ANR	5267490	Identifier	Stream :: code		5267243	2					
ANR	5267491	ParameterList	STARTUP_INFO & start		5267243	3					
ANR	5267492	Parameter	STARTUP_INFO & start	468:13:9163:9181	5267243	0	True				
ANR	5267493	ParameterType	STARTUP_INFO &		5267243	0					
ANR	5267494	Identifier	start		5267243	1					
ANR	5267495	CFGEntryNode	ENTRY		5267243		True				
ANR	5267496	CFGExitNode	EXIT		5267243		True				
ANR	5267497	Symbol	start . coredump_limit_exists		5267243						
ANR	5267498	Symbol	start . args_v1or2		5267243						
ANR	5267499	Symbol	temp		5267243						
ANR	5267500	Symbol	code		5267243						
ANR	5267501	Symbol	start . job_class		5267243						
ANR	5267502	Symbol	start . soft_kill_sig		5267243						
ANR	5267503	Symbol	start . cluster		5267243						
ANR	5267504	Symbol	start . proc		5267243						
ANR	5267505	Symbol	start		5267243						
ANR	5267506	Symbol	start . env_v1or2		5267243						
ANR	5267507	Symbol	TRUE		5267243						
ANR	5267508	Symbol	start . virt_pid		5267243						
ANR	5267509	Symbol	start . gid		5267243						
ANR	5267510	Symbol	start . ckpt_wanted		5267243						
ANR	5267511	Symbol	start . cmd		5267243						
ANR	5267512	Symbol	start . coredump_limit		5267243						
ANR	5267513	Symbol	start . iwd		5267243						
ANR	5267514	Symbol	start . version_num		5267243						
ANR	5267515	Symbol	start . uid		5267243						
ANR	5267516	Symbol	start . is_restart		5267243						
ANR	5267517	Function	Stream :: code	494:0:9967:10074							
ANR	5267518	FunctionDef	Stream :: code (PORTS & p)		5267517	0					
ANR	5267519	CompoundStatement		496:0:9995:10074	5267517	0					
ANR	5267520	ExpressionStatement	STREAM_ASSERT ( code ( p . port1 ) )	497:1:9998:10026	5267517	0	True				
ANR	5267521	CallExpression	STREAM_ASSERT ( code ( p . port1 ) )		5267517	0					
ANR	5267522	Callee	STREAM_ASSERT		5267517	0					
ANR	5267523	Identifier	STREAM_ASSERT		5267517	0					
ANR	5267524	ArgumentList	code ( p . port1 )		5267517	1					
ANR	5267525	Argument	code ( p . port1 )		5267517	0					
ANR	5267526	CallExpression	code ( p . port1 )		5267517	0					
ANR	5267527	Callee	code		5267517	0					
ANR	5267528	Identifier	code		5267517	0					
ANR	5267529	ArgumentList	p . port1		5267517	1					
ANR	5267530	Argument	p . port1		5267517	0					
ANR	5267531	MemberAccess	p . port1		5267517	0					
ANR	5267532	Identifier	p		5267517	0					
ANR	5267533	Identifier	port1		5267517	1					
ANR	5267534	ExpressionStatement	STREAM_ASSERT ( code ( p . port2 ) )	498:1:10029:10057	5267517	1	True				
ANR	5267535	CallExpression	STREAM_ASSERT ( code ( p . port2 ) )		5267517	0					
ANR	5267536	Callee	STREAM_ASSERT		5267517	0					
ANR	5267537	Identifier	STREAM_ASSERT		5267517	0					
ANR	5267538	ArgumentList	code ( p . port2 )		5267517	1					
ANR	5267539	Argument	code ( p . port2 )		5267517	0					
ANR	5267540	CallExpression	code ( p . port2 )		5267517	0					
ANR	5267541	Callee	code		5267517	0					
ANR	5267542	Identifier	code		5267517	0					
ANR	5267543	ArgumentList	p . port2		5267517	1					
ANR	5267544	Argument	p . port2		5267517	0					
ANR	5267545	MemberAccess	p . port2		5267517	0					
ANR	5267546	Identifier	p		5267517	0					
ANR	5267547	Identifier	port2		5267517	1					
ANR	5267548	ReturnStatement	return TRUE ;	500:1:10061:10072	5267517	2	True				
ANR	5267549	Identifier	TRUE		5267517	0					
ANR	5267550	ReturnType	int		5267517	1					
ANR	5267551	Identifier	Stream :: code		5267517	2					
ANR	5267552	ParameterList	PORTS & p		5267517	3					
ANR	5267553	Parameter	PORTS & p	495:13:9985:9992	5267517	0	True				
ANR	5267554	ParameterType	PORTS &		5267517	0					
ANR	5267555	Identifier	p		5267517	1					
ANR	5267556	CFGEntryNode	ENTRY		5267517		True				
ANR	5267557	CFGExitNode	EXIT		5267517		True				
ANR	5267558	Symbol	p		5267517						
ANR	5267559	Symbol	p . port1		5267517						
ANR	5267560	Symbol	p . port2		5267517						
ANR	5267561	Symbol	code		5267517						
ANR	5267562	Symbol	TRUE		5267517						
ANR	5267563	Function	Stream :: code	503:0:10077:10618							
ANR	5267564	FunctionDef	Stream :: code (StartdRec & rec)		5267563	0					
ANR	5267565	CompoundStatement		505:0:10110:10618	5267563	0					
ANR	5267566	IfStatement	if ( ! code ( rec . version_num ) )		5267563	0					
ANR	5267567	Condition	! code ( rec . version_num )	506:5:10117:10138	5267563	0	True				
ANR	5267568	UnaryOperationExpression	! code ( rec . version_num )		5267563	0					
ANR	5267569	UnaryOperator	!		5267563	0					
ANR	5267570	CallExpression	code ( rec . version_num )		5267563	1					
ANR	5267571	Callee	code		5267563	0					
ANR	5267572	Identifier	code		5267563	0					
ANR	5267573	ArgumentList	rec . version_num		5267563	1					
ANR	5267574	Argument	rec . version_num		5267563	0					
ANR	5267575	MemberAccess	rec . version_num		5267563	0					
ANR	5267576	Identifier	rec		5267563	0					
ANR	5267577	Identifier	version_num		5267563	1					
ANR	5267578	ReturnStatement	return FALSE ;	506:30:10142:10154	5267563	1	True				
ANR	5267579	Identifier	FALSE		5267563	0					
ANR	5267580	IfStatement	if ( rec . version_num >= 0 )		5267563	1					
ANR	5267581	Condition	rec . version_num >= 0	508:5:10162:10180	5267563	0	True				
ANR	5267582	RelationalExpression	rec . version_num >= 0		5267563	0		>=			
ANR	5267583	MemberAccess	rec . version_num		5267563	0					
ANR	5267584	Identifier	rec		5267563	0					
ANR	5267585	Identifier	version_num		5267563	1					
ANR	5267586	PrimaryExpression	0		5267563	1					
ANR	5267587	CompoundStatement		5:1:74:74	5267563	1					
ANR	5267588	ExpressionStatement	rec . ports . port1 = rec . version_num	512:2:10283:10316	5267563	0	True				
ANR	5267589	AssignmentExpression	rec . ports . port1 = rec . version_num		5267563	0		=			
ANR	5267590	MemberAccess	rec . ports . port1		5267563	0					
ANR	5267591	MemberAccess	rec . ports		5267563	0					
ANR	5267592	Identifier	rec		5267563	0					
ANR	5267593	Identifier	ports		5267563	1					
ANR	5267594	Identifier	port1		5267563	1					
ANR	5267595	MemberAccess	rec . version_num		5267563	1					
ANR	5267596	Identifier	rec		5267563	0					
ANR	5267597	Identifier	version_num		5267563	1					
ANR	5267598	IfStatement	if ( ! code ( rec . ports . port2 ) )		5267563	1					
ANR	5267599	Condition	! code ( rec . ports . port2 )	513:7:10325:10346	5267563	0	True				
ANR	5267600	UnaryOperationExpression	! code ( rec . ports . port2 )		5267563	0					
ANR	5267601	UnaryOperator	!		5267563	0					
ANR	5267602	CallExpression	code ( rec . ports . port2 )		5267563	1					
ANR	5267603	Callee	code		5267563	0					
ANR	5267604	Identifier	code		5267563	0					
ANR	5267605	ArgumentList	rec . ports . port2		5267563	1					
ANR	5267606	Argument	rec . ports . port2		5267563	0					
ANR	5267607	MemberAccess	rec . ports . port2		5267563	0					
ANR	5267608	MemberAccess	rec . ports		5267563	0					
ANR	5267609	Identifier	rec		5267563	0					
ANR	5267610	Identifier	ports		5267563	1					
ANR	5267611	Identifier	port2		5267563	1					
ANR	5267612	ReturnStatement	return FALSE ;	513:32:10350:10362	5267563	1	True				
ANR	5267613	Identifier	FALSE		5267563	0					
ANR	5267614	ReturnStatement	return TRUE ;	514:2:10366:10377	5267563	2	True				
ANR	5267615	Identifier	TRUE		5267563	0					
ANR	5267616	IfStatement	if ( ! code ( rec . ports ) )		5267563	2					
ANR	5267617	Condition	! code ( rec . ports )	516:5:10387:10402	5267563	0	True				
ANR	5267618	UnaryOperationExpression	! code ( rec . ports )		5267563	0					
ANR	5267619	UnaryOperator	!		5267563	0					
ANR	5267620	CallExpression	code ( rec . ports )		5267563	1					
ANR	5267621	Callee	code		5267563	0					
ANR	5267622	Identifier	code		5267563	0					
ANR	5267623	ArgumentList	rec . ports		5267563	1					
ANR	5267624	Argument	rec . ports		5267563	0					
ANR	5267625	MemberAccess	rec . ports		5267563	0					
ANR	5267626	Identifier	rec		5267563	0					
ANR	5267627	Identifier	ports		5267563	1					
ANR	5267628	ReturnStatement	return FALSE ;	516:24:10406:10418	5267563	1	True				
ANR	5267629	Identifier	FALSE		5267563	0					
ANR	5267630	IfStatement	if ( ! code ( rec . ip_addr ) )		5267563	3					
ANR	5267631	Condition	! code ( rec . ip_addr )	517:5:10425:10442	5267563	0	True				
ANR	5267632	UnaryOperationExpression	! code ( rec . ip_addr )		5267563	0					
ANR	5267633	UnaryOperator	!		5267563	0					
ANR	5267634	CallExpression	code ( rec . ip_addr )		5267563	1					
ANR	5267635	Callee	code		5267563	0					
ANR	5267636	Identifier	code		5267563	0					
ANR	5267637	ArgumentList	rec . ip_addr		5267563	1					
ANR	5267638	Argument	rec . ip_addr		5267563	0					
ANR	5267639	MemberAccess	rec . ip_addr		5267563	0					
ANR	5267640	Identifier	rec		5267563	0					
ANR	5267641	Identifier	ip_addr		5267563	1					
ANR	5267642	ReturnStatement	return FALSE ;	517:26:10446:10458	5267563	1	True				
ANR	5267643	Identifier	FALSE		5267563	0					
ANR	5267644	IfStatement	if ( is_encode ( ) )		5267563	4					
ANR	5267645	Condition	is_encode ( )	519:5:10466:10476	5267563	0	True				
ANR	5267646	CallExpression	is_encode ( )		5267563	0					
ANR	5267647	Callee	is_encode		5267563	0					
ANR	5267648	Identifier	is_encode		5267563	0					
ANR	5267649	ArgumentList			5267563	1					
ANR	5267650	CompoundStatement		15:19:369:369	5267563	1					
ANR	5267651	IfStatement	if ( ! code ( rec . server_name ) )		5267563	0					
ANR	5267652	Condition	! code ( rec . server_name )	520:6:10488:10509	5267563	0	True				
ANR	5267653	UnaryOperationExpression	! code ( rec . server_name )		5267563	0					
ANR	5267654	UnaryOperator	!		5267563	0					
ANR	5267655	CallExpression	code ( rec . server_name )		5267563	1					
ANR	5267656	Callee	code		5267563	0					
ANR	5267657	Identifier	code		5267563	0					
ANR	5267658	ArgumentList	rec . server_name		5267563	1					
ANR	5267659	Argument	rec . server_name		5267563	0					
ANR	5267660	MemberAccess	rec . server_name		5267563	0					
ANR	5267661	Identifier	rec		5267563	0					
ANR	5267662	Identifier	server_name		5267563	1					
ANR	5267663	ReturnStatement	return FALSE ;	520:31:10513:10525	5267563	1	True				
ANR	5267664	Identifier	FALSE		5267563	0					
ANR	5267665	ElseStatement	else		5267563	0					
ANR	5267666	IfStatement	if ( is_decode ( ) )		5267563	0					
ANR	5267667	Condition	is_decode ( )	521:13:10540:10550	5267563	0	True				
ANR	5267668	CallExpression	is_decode ( )		5267563	0					
ANR	5267669	Callee	is_decode		5267563	0					
ANR	5267670	Identifier	is_decode		5267563	0					
ANR	5267671	ArgumentList			5267563	1					
ANR	5267672	CompoundStatement		17:27:443:443	5267563	1					
ANR	5267673	IfStatement	if ( ! code ( rec . server_name ) )		5267563	0					
ANR	5267674	Condition	! code ( rec . server_name )	522:6:10562:10583	5267563	0	True				
ANR	5267675	UnaryOperationExpression	! code ( rec . server_name )		5267563	0					
ANR	5267676	UnaryOperator	!		5267563	0					
ANR	5267677	CallExpression	code ( rec . server_name )		5267563	1					
ANR	5267678	Callee	code		5267563	0					
ANR	5267679	Identifier	code		5267563	0					
ANR	5267680	ArgumentList	rec . server_name		5267563	1					
ANR	5267681	Argument	rec . server_name		5267563	0					
ANR	5267682	MemberAccess	rec . server_name		5267563	0					
ANR	5267683	Identifier	rec		5267563	0					
ANR	5267684	Identifier	server_name		5267563	1					
ANR	5267685	ReturnStatement	return FALSE ;	522:31:10587:10599	5267563	1	True				
ANR	5267686	Identifier	FALSE		5267563	0					
ANR	5267687	ReturnStatement	return TRUE ;	524:1:10605:10616	5267563	5	True				
ANR	5267688	Identifier	TRUE		5267563	0					
ANR	5267689	ReturnType	int		5267563	1					
ANR	5267690	Identifier	Stream :: code		5267563	2					
ANR	5267691	ParameterList	StartdRec & rec		5267563	3					
ANR	5267692	Parameter	StartdRec & rec	504:13:10094:10107	5267563	0	True				
ANR	5267693	ParameterType	StartdRec &		5267563	0					
ANR	5267694	Identifier	rec		5267563	1					
ANR	5267695	CFGEntryNode	ENTRY		5267563		True				
ANR	5267696	CFGExitNode	EXIT		5267563		True				
ANR	5267697	Symbol	rec		5267563						
ANR	5267698	Symbol	rec . version_num		5267563						
ANR	5267699	Symbol	rec . ip_addr		5267563						
ANR	5267700	Symbol	code		5267563						
ANR	5267701	Symbol	rec . ports		5267563						
ANR	5267702	Symbol	is_encode		5267563						
ANR	5267703	Symbol	is_decode		5267563						
ANR	5267704	Symbol	TRUE		5267563						
ANR	5267705	Symbol	FALSE		5267563						
ANR	5267706	Symbol	rec . ports . port1		5267563						
ANR	5267707	Symbol	rec . ports . port2		5267563						
ANR	5267708	Symbol	rec . server_name		5267563						
ANR	5267709	Function	Stream :: code	528:0:10622:10908							
ANR	5267710	FunctionDef	Stream :: code (open_flags_t & flags)		5267709	0					
ANR	5267711	CompoundStatement		530:0:10661:10908	5267709	0					
ANR	5267712	IdentifierDeclStatement	"int real_flags , rval ;"	531:1:10664:10684	5267709	0	True				
ANR	5267713	IdentifierDecl	real_flags		5267709	0					
ANR	5267714	IdentifierDeclType	int		5267709	0					
ANR	5267715	Identifier	real_flags		5267709	1					
ANR	5267716	IdentifierDecl	rval		5267709	1					
ANR	5267717	IdentifierDeclType	int		5267709	0					
ANR	5267718	Identifier	rval		5267709	1					
ANR	5267719	IfStatement	if ( _coding == stream_encode )		5267709	1					
ANR	5267720	Condition	_coding == stream_encode	533:5:10692:10715	5267709	0	True				
ANR	5267721	EqualityExpression	_coding == stream_encode		5267709	0		==			
ANR	5267722	Identifier	_coding		5267709	0					
ANR	5267723	Identifier	stream_encode		5267709	1					
ANR	5267724	CompoundStatement		4:31:56:56	5267709	1					
ANR	5267725	ExpressionStatement	real_flags = open_flags_encode ( ( int ) flags )	534:2:10722:10764	5267709	0	True				
ANR	5267726	AssignmentExpression	real_flags = open_flags_encode ( ( int ) flags )		5267709	0		=			
ANR	5267727	Identifier	real_flags		5267709	0					
ANR	5267728	CallExpression	open_flags_encode ( ( int ) flags )		5267709	1					
ANR	5267729	Callee	open_flags_encode		5267709	0					
ANR	5267730	Identifier	open_flags_encode		5267709	0					
ANR	5267731	ArgumentList	( int ) flags		5267709	1					
ANR	5267732	Argument	( int ) flags		5267709	0					
ANR	5267733	CastExpression	( int ) flags		5267709	0					
ANR	5267734	CastTarget	int		5267709	0					
ANR	5267735	Identifier	flags		5267709	1					
ANR	5267736	ExpressionStatement	rval = code ( real_flags )	537:1:10771:10794	5267709	2	True				
ANR	5267737	AssignmentExpression	rval = code ( real_flags )		5267709	0		=			
ANR	5267738	Identifier	rval		5267709	0					
ANR	5267739	CallExpression	code ( real_flags )		5267709	1					
ANR	5267740	Callee	code		5267709	0					
ANR	5267741	Identifier	code		5267709	0					
ANR	5267742	ArgumentList	real_flags		5267709	1					
ANR	5267743	Argument	real_flags		5267709	0					
ANR	5267744	Identifier	real_flags		5267709	0					
ANR	5267745	IfStatement	if ( _coding == stream_decode )		5267709	3					
ANR	5267746	Condition	_coding == stream_decode	539:5:10802:10825	5267709	0	True				
ANR	5267747	EqualityExpression	_coding == stream_decode		5267709	0		==			
ANR	5267748	Identifier	_coding		5267709	0					
ANR	5267749	Identifier	stream_decode		5267709	1					
ANR	5267750	CompoundStatement		10:31:166:166	5267709	1					
ANR	5267751	ExpressionStatement	flags = ( open_flags_t ) open_flags_decode ( ( int ) real_flags )	540:2:10832:10888	5267709	0	True				
ANR	5267752	AssignmentExpression	flags = ( open_flags_t ) open_flags_decode ( ( int ) real_flags )		5267709	0		=			
ANR	5267753	Identifier	flags		5267709	0					
ANR	5267754	CastExpression	( open_flags_t ) open_flags_decode ( ( int ) real_flags )		5267709	1					
ANR	5267755	CastTarget	open_flags_t		5267709	0					
ANR	5267756	CallExpression	open_flags_decode ( ( int ) real_flags )		5267709	1					
ANR	5267757	Callee	open_flags_decode		5267709	0					
ANR	5267758	Identifier	open_flags_decode		5267709	0					
ANR	5267759	ArgumentList	( int ) real_flags		5267709	1					
ANR	5267760	Argument	( int ) real_flags		5267709	0					
ANR	5267761	CastExpression	( int ) real_flags		5267709	0					
ANR	5267762	CastTarget	int		5267709	0					
ANR	5267763	Identifier	real_flags		5267709	1					
ANR	5267764	ReturnStatement	return rval ;	543:1:10895:10906	5267709	4	True				
ANR	5267765	Identifier	rval		5267709	0					
ANR	5267766	ReturnType	int		5267709	1					
ANR	5267767	Identifier	Stream :: code		5267709	2					
ANR	5267768	ParameterList	open_flags_t & flags		5267709	3					
ANR	5267769	Parameter	open_flags_t & flags	529:13:10640:10658	5267709	0	True				
ANR	5267770	ParameterType	open_flags_t &		5267709	0					
ANR	5267771	Identifier	flags		5267709	1					
ANR	5267772	CFGEntryNode	ENTRY		5267709		True				
ANR	5267773	CFGExitNode	EXIT		5267709		True				
ANR	5267774	Symbol	open_flags_encode		5267709						
ANR	5267775	Symbol	stream_decode		5267709						
ANR	5267776	Symbol	_coding		5267709						
ANR	5267777	Symbol	code		5267709						
ANR	5267778	Symbol	real_flags		5267709						
ANR	5267779	Symbol	stream_encode		5267709						
ANR	5267780	Symbol	open_flags_decode		5267709						
ANR	5267781	Symbol	flags		5267709						
ANR	5267782	Symbol	rval		5267709						
ANR	5267783	Function	Stream :: code	546:0:10911:11223							
ANR	5267784	FunctionDef	Stream :: code (condor_errno_t & errno_num)		5267783	0					
ANR	5267785	CompoundStatement		548:0:10956:11223	5267783	0					
ANR	5267786	IdentifierDeclStatement	"int real_errno_num , rval ;"	549:1:10959:10983	5267783	0	True				
ANR	5267787	IdentifierDecl	real_errno_num		5267783	0					
ANR	5267788	IdentifierDeclType	int		5267783	0					
ANR	5267789	Identifier	real_errno_num		5267783	1					
ANR	5267790	IdentifierDecl	rval		5267783	1					
ANR	5267791	IdentifierDeclType	int		5267783	0					
ANR	5267792	Identifier	rval		5267783	1					
ANR	5267793	IfStatement	if ( _coding == stream_encode )		5267783	1					
ANR	5267794	Condition	_coding == stream_encode	551:5:10992:11015	5267783	0	True				
ANR	5267795	EqualityExpression	_coding == stream_encode		5267783	0		==			
ANR	5267796	Identifier	_coding		5267783	0					
ANR	5267797	Identifier	stream_encode		5267783	1					
ANR	5267798	CompoundStatement		4:31:61:61	5267783	1					
ANR	5267799	ExpressionStatement	real_errno_num = errno_num_encode ( ( int ) errno_num )	552:2:11022:11071	5267783	0	True				
ANR	5267800	AssignmentExpression	real_errno_num = errno_num_encode ( ( int ) errno_num )		5267783	0		=			
ANR	5267801	Identifier	real_errno_num		5267783	0					
ANR	5267802	CallExpression	errno_num_encode ( ( int ) errno_num )		5267783	1					
ANR	5267803	Callee	errno_num_encode		5267783	0					
ANR	5267804	Identifier	errno_num_encode		5267783	0					
ANR	5267805	ArgumentList	( int ) errno_num		5267783	1					
ANR	5267806	Argument	( int ) errno_num		5267783	0					
ANR	5267807	CastExpression	( int ) errno_num		5267783	0					
ANR	5267808	CastTarget	int		5267783	0					
ANR	5267809	Identifier	errno_num		5267783	1					
ANR	5267810	ExpressionStatement	rval = code ( real_errno_num )	555:1:11078:11105	5267783	2	True				
ANR	5267811	AssignmentExpression	rval = code ( real_errno_num )		5267783	0		=			
ANR	5267812	Identifier	rval		5267783	0					
ANR	5267813	CallExpression	code ( real_errno_num )		5267783	1					
ANR	5267814	Callee	code		5267783	0					
ANR	5267815	Identifier	code		5267783	0					
ANR	5267816	ArgumentList	real_errno_num		5267783	1					
ANR	5267817	Argument	real_errno_num		5267783	0					
ANR	5267818	Identifier	real_errno_num		5267783	0					
ANR	5267819	IfStatement	if ( _coding == stream_decode )		5267783	3					
ANR	5267820	Condition	_coding == stream_decode	557:5:11113:11136	5267783	0	True				
ANR	5267821	EqualityExpression	_coding == stream_decode		5267783	0		==			
ANR	5267822	Identifier	_coding		5267783	0					
ANR	5267823	Identifier	stream_decode		5267783	1					
ANR	5267824	CompoundStatement		10:31:182:182	5267783	1					
ANR	5267825	ExpressionStatement	errno_num = ( condor_errno_t ) errno_num_decode ( real_errno_num )	558:2:11143:11203	5267783	0	True				
ANR	5267826	AssignmentExpression	errno_num = ( condor_errno_t ) errno_num_decode ( real_errno_num )		5267783	0		=			
ANR	5267827	Identifier	errno_num		5267783	0					
ANR	5267828	CastExpression	( condor_errno_t ) errno_num_decode ( real_errno_num )		5267783	1					
ANR	5267829	CastTarget	condor_errno_t		5267783	0					
ANR	5267830	CallExpression	errno_num_decode ( real_errno_num )		5267783	1					
ANR	5267831	Callee	errno_num_decode		5267783	0					
ANR	5267832	Identifier	errno_num_decode		5267783	0					
ANR	5267833	ArgumentList	real_errno_num		5267783	1					
ANR	5267834	Argument	real_errno_num		5267783	0					
ANR	5267835	Identifier	real_errno_num		5267783	0					
ANR	5267836	ReturnStatement	return rval ;	561:1:11210:11221	5267783	4	True				
ANR	5267837	Identifier	rval		5267783	0					
ANR	5267838	ReturnType	int		5267783	1					
ANR	5267839	Identifier	Stream :: code		5267783	2					
ANR	5267840	ParameterList	condor_errno_t & errno_num		5267783	3					
ANR	5267841	Parameter	condor_errno_t & errno_num	547:13:10929:10953	5267783	0	True				
ANR	5267842	ParameterType	condor_errno_t &		5267783	0					
ANR	5267843	Identifier	errno_num		5267783	1					
ANR	5267844	CFGEntryNode	ENTRY		5267783		True				
ANR	5267845	CFGExitNode	EXIT		5267783		True				
ANR	5267846	Symbol	stream_decode		5267783						
ANR	5267847	Symbol	_coding		5267783						
ANR	5267848	Symbol	code		5267783						
ANR	5267849	Symbol	stream_encode		5267783						
ANR	5267850	Symbol	errno_num		5267783						
ANR	5267851	Symbol	real_errno_num		5267783						
ANR	5267852	Symbol	rval		5267783						
ANR	5267853	Symbol	errno_num_encode		5267783						
ANR	5267854	Symbol	errno_num_decode		5267783						
ANR	5267855	Function	Stream :: code	572:0:11270:11566							
ANR	5267856	FunctionDef	Stream :: code (condor_signal_t & sig_num)		5267855	0					
ANR	5267857	CompoundStatement		574:0:11314:11566	5267855	0					
ANR	5267858	IdentifierDeclStatement	"int real_sig_num , rval ;"	575:1:11317:11339	5267855	0	True				
ANR	5267859	IdentifierDecl	real_sig_num		5267855	0					
ANR	5267860	IdentifierDeclType	int		5267855	0					
ANR	5267861	Identifier	real_sig_num		5267855	1					
ANR	5267862	IdentifierDecl	rval		5267855	1					
ANR	5267863	IdentifierDeclType	int		5267855	0					
ANR	5267864	Identifier	rval		5267855	1					
ANR	5267865	IfStatement	if ( _coding == stream_encode )		5267855	1					
ANR	5267866	Condition	_coding == stream_encode	577:5:11348:11371	5267855	0	True				
ANR	5267867	EqualityExpression	_coding == stream_encode		5267855	0		==			
ANR	5267868	Identifier	_coding		5267855	0					
ANR	5267869	Identifier	stream_encode		5267855	1					
ANR	5267870	CompoundStatement		4:31:59:59	5267855	1					
ANR	5267871	ExpressionStatement	real_sig_num = sig_num_encode ( ( int ) sig_num )	578:2:11378:11421	5267855	0	True				
ANR	5267872	AssignmentExpression	real_sig_num = sig_num_encode ( ( int ) sig_num )		5267855	0		=			
ANR	5267873	Identifier	real_sig_num		5267855	0					
ANR	5267874	CallExpression	sig_num_encode ( ( int ) sig_num )		5267855	1					
ANR	5267875	Callee	sig_num_encode		5267855	0					
ANR	5267876	Identifier	sig_num_encode		5267855	0					
ANR	5267877	ArgumentList	( int ) sig_num		5267855	1					
ANR	5267878	Argument	( int ) sig_num		5267855	0					
ANR	5267879	CastExpression	( int ) sig_num		5267855	0					
ANR	5267880	CastTarget	int		5267855	0					
ANR	5267881	Identifier	sig_num		5267855	1					
ANR	5267882	ExpressionStatement	rval = code ( real_sig_num )	581:1:11428:11453	5267855	2	True				
ANR	5267883	AssignmentExpression	rval = code ( real_sig_num )		5267855	0		=			
ANR	5267884	Identifier	rval		5267855	0					
ANR	5267885	CallExpression	code ( real_sig_num )		5267855	1					
ANR	5267886	Callee	code		5267855	0					
ANR	5267887	Identifier	code		5267855	0					
ANR	5267888	ArgumentList	real_sig_num		5267855	1					
ANR	5267889	Argument	real_sig_num		5267855	0					
ANR	5267890	Identifier	real_sig_num		5267855	0					
ANR	5267891	IfStatement	if ( _coding == stream_decode )		5267855	3					
ANR	5267892	Condition	_coding == stream_decode	583:5:11461:11484	5267855	0	True				
ANR	5267893	EqualityExpression	_coding == stream_decode		5267855	0		==			
ANR	5267894	Identifier	_coding		5267855	0					
ANR	5267895	Identifier	stream_decode		5267855	1					
ANR	5267896	CompoundStatement		10:31:172:172	5267855	1					
ANR	5267897	ExpressionStatement	sig_num = ( condor_signal_t ) sig_num_decode ( real_sig_num )	584:2:11491:11546	5267855	0	True				
ANR	5267898	AssignmentExpression	sig_num = ( condor_signal_t ) sig_num_decode ( real_sig_num )		5267855	0		=			
ANR	5267899	Identifier	sig_num		5267855	0					
ANR	5267900	CastExpression	( condor_signal_t ) sig_num_decode ( real_sig_num )		5267855	1					
ANR	5267901	CastTarget	condor_signal_t		5267855	0					
ANR	5267902	CallExpression	sig_num_decode ( real_sig_num )		5267855	1					
ANR	5267903	Callee	sig_num_decode		5267855	0					
ANR	5267904	Identifier	sig_num_decode		5267855	0					
ANR	5267905	ArgumentList	real_sig_num		5267855	1					
ANR	5267906	Argument	real_sig_num		5267855	0					
ANR	5267907	Identifier	real_sig_num		5267855	0					
ANR	5267908	ReturnStatement	return rval ;	587:1:11553:11564	5267855	4	True				
ANR	5267909	Identifier	rval		5267855	0					
ANR	5267910	ReturnType	int		5267855	1					
ANR	5267911	Identifier	Stream :: code		5267855	2					
ANR	5267912	ParameterList	condor_signal_t & sig_num		5267855	3					
ANR	5267913	Parameter	condor_signal_t & sig_num	573:13:11288:11311	5267855	0	True				
ANR	5267914	ParameterType	condor_signal_t &		5267855	0					
ANR	5267915	Identifier	sig_num		5267855	1					
ANR	5267916	CFGEntryNode	ENTRY		5267855		True				
ANR	5267917	CFGExitNode	EXIT		5267855		True				
ANR	5267918	Symbol	stream_decode		5267855						
ANR	5267919	Symbol	_coding		5267855						
ANR	5267920	Symbol	code		5267855						
ANR	5267921	Symbol	stream_encode		5267855						
ANR	5267922	Symbol	sig_num		5267855						
ANR	5267923	Symbol	rval		5267855						
ANR	5267924	Symbol	sig_num_decode		5267855						
ANR	5267925	Symbol	real_sig_num		5267855						
ANR	5267926	Symbol	sig_num_encode		5267855						
ANR	5267927	Function	Stream :: code	591:0:11570:11838							
ANR	5267928	FunctionDef	Stream :: code (fcntl_cmd_t & cmd)		5267927	0					
ANR	5267929	CompoundStatement		593:0:11606:11838	5267927	0					
ANR	5267930	IdentifierDeclStatement	"int real_cmd , rval ;"	594:1:11609:11627	5267927	0	True				
ANR	5267931	IdentifierDecl	real_cmd		5267927	0					
ANR	5267932	IdentifierDeclType	int		5267927	0					
ANR	5267933	Identifier	real_cmd		5267927	1					
ANR	5267934	IdentifierDecl	rval		5267927	1					
ANR	5267935	IdentifierDeclType	int		5267927	0					
ANR	5267936	Identifier	rval		5267927	1					
ANR	5267937	IfStatement	if ( _coding == stream_encode )		5267927	1					
ANR	5267938	Condition	_coding == stream_encode	596:5:11635:11658	5267927	0	True				
ANR	5267939	EqualityExpression	_coding == stream_encode		5267927	0		==			
ANR	5267940	Identifier	_coding		5267927	0					
ANR	5267941	Identifier	stream_encode		5267927	1					
ANR	5267942	CompoundStatement		4:31:54:54	5267927	1					
ANR	5267943	ExpressionStatement	real_cmd = fcntl_cmd_encode ( ( int ) cmd )	597:2:11665:11702	5267927	0	True				
ANR	5267944	AssignmentExpression	real_cmd = fcntl_cmd_encode ( ( int ) cmd )		5267927	0		=			
ANR	5267945	Identifier	real_cmd		5267927	0					
ANR	5267946	CallExpression	fcntl_cmd_encode ( ( int ) cmd )		5267927	1					
ANR	5267947	Callee	fcntl_cmd_encode		5267927	0					
ANR	5267948	Identifier	fcntl_cmd_encode		5267927	0					
ANR	5267949	ArgumentList	( int ) cmd		5267927	1					
ANR	5267950	Argument	( int ) cmd		5267927	0					
ANR	5267951	CastExpression	( int ) cmd		5267927	0					
ANR	5267952	CastTarget	int		5267927	0					
ANR	5267953	Identifier	cmd		5267927	1					
ANR	5267954	ExpressionStatement	rval = code ( real_cmd )	600:1:11709:11730	5267927	2	True				
ANR	5267955	AssignmentExpression	rval = code ( real_cmd )		5267927	0		=			
ANR	5267956	Identifier	rval		5267927	0					
ANR	5267957	CallExpression	code ( real_cmd )		5267927	1					
ANR	5267958	Callee	code		5267927	0					
ANR	5267959	Identifier	code		5267927	0					
ANR	5267960	ArgumentList	real_cmd		5267927	1					
ANR	5267961	Argument	real_cmd		5267927	0					
ANR	5267962	Identifier	real_cmd		5267927	0					
ANR	5267963	IfStatement	if ( _coding == stream_decode )		5267927	3					
ANR	5267964	Condition	_coding == stream_decode	602:5:11738:11761	5267927	0	True				
ANR	5267965	EqualityExpression	_coding == stream_decode		5267927	0		==			
ANR	5267966	Identifier	_coding		5267927	0					
ANR	5267967	Identifier	stream_decode		5267927	1					
ANR	5267968	CompoundStatement		10:31:157:157	5267927	1					
ANR	5267969	ExpressionStatement	cmd = ( fcntl_cmd_t ) fcntl_cmd_decode ( ( int ) real_cmd )	603:2:11768:11818	5267927	0	True				
ANR	5267970	AssignmentExpression	cmd = ( fcntl_cmd_t ) fcntl_cmd_decode ( ( int ) real_cmd )		5267927	0		=			
ANR	5267971	Identifier	cmd		5267927	0					
ANR	5267972	CastExpression	( fcntl_cmd_t ) fcntl_cmd_decode ( ( int ) real_cmd )		5267927	1					
ANR	5267973	CastTarget	fcntl_cmd_t		5267927	0					
ANR	5267974	CallExpression	fcntl_cmd_decode ( ( int ) real_cmd )		5267927	1					
ANR	5267975	Callee	fcntl_cmd_decode		5267927	0					
ANR	5267976	Identifier	fcntl_cmd_decode		5267927	0					
ANR	5267977	ArgumentList	( int ) real_cmd		5267927	1					
ANR	5267978	Argument	( int ) real_cmd		5267927	0					
ANR	5267979	CastExpression	( int ) real_cmd		5267927	0					
ANR	5267980	CastTarget	int		5267927	0					
ANR	5267981	Identifier	real_cmd		5267927	1					
ANR	5267982	ReturnStatement	return rval ;	606:1:11825:11836	5267927	4	True				
ANR	5267983	Identifier	rval		5267927	0					
ANR	5267984	ReturnType	int		5267927	1					
ANR	5267985	Identifier	Stream :: code		5267927	2					
ANR	5267986	ParameterList	fcntl_cmd_t & cmd		5267927	3					
ANR	5267987	Parameter	fcntl_cmd_t & cmd	592:13:11588:11603	5267927	0	True				
ANR	5267988	ParameterType	fcntl_cmd_t &		5267927	0					
ANR	5267989	Identifier	cmd		5267927	1					
ANR	5267990	CFGEntryNode	ENTRY		5267927		True				
ANR	5267991	CFGExitNode	EXIT		5267927		True				
ANR	5267992	Symbol	stream_decode		5267927						
ANR	5267993	Symbol	_coding		5267927						
ANR	5267994	Symbol	code		5267927						
ANR	5267995	Symbol	stream_encode		5267927						
ANR	5267996	Symbol	fcntl_cmd_encode		5267927						
ANR	5267997	Symbol	real_cmd		5267927						
ANR	5267998	Symbol	rval		5267927						
ANR	5267999	Symbol	cmd		5267927						
ANR	5268000	Symbol	fcntl_cmd_decode		5267927						
ANR	5268001	Function	Stream :: code	609:0:11841:12451							
ANR	5268002	FunctionDef	Stream :: code (struct rusage & r)		5268001	0					
ANR	5268003	CompoundStatement		611:0:11877:12451	5268001	0					
ANR	5268004	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_utime ) )	612:1:11880:11911	5268001	0	True				
ANR	5268005	CallExpression	STREAM_ASSERT ( code ( r . ru_utime ) )		5268001	0					
ANR	5268006	Callee	STREAM_ASSERT		5268001	0					
ANR	5268007	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268008	ArgumentList	code ( r . ru_utime )		5268001	1					
ANR	5268009	Argument	code ( r . ru_utime )		5268001	0					
ANR	5268010	CallExpression	code ( r . ru_utime )		5268001	0					
ANR	5268011	Callee	code		5268001	0					
ANR	5268012	Identifier	code		5268001	0					
ANR	5268013	ArgumentList	r . ru_utime		5268001	1					
ANR	5268014	Argument	r . ru_utime		5268001	0					
ANR	5268015	MemberAccess	r . ru_utime		5268001	0					
ANR	5268016	Identifier	r		5268001	0					
ANR	5268017	Identifier	ru_utime		5268001	1					
ANR	5268018	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_stime ) )	613:1:11914:11945	5268001	1	True				
ANR	5268019	CallExpression	STREAM_ASSERT ( code ( r . ru_stime ) )		5268001	0					
ANR	5268020	Callee	STREAM_ASSERT		5268001	0					
ANR	5268021	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268022	ArgumentList	code ( r . ru_stime )		5268001	1					
ANR	5268023	Argument	code ( r . ru_stime )		5268001	0					
ANR	5268024	CallExpression	code ( r . ru_stime )		5268001	0					
ANR	5268025	Callee	code		5268001	0					
ANR	5268026	Identifier	code		5268001	0					
ANR	5268027	ArgumentList	r . ru_stime		5268001	1					
ANR	5268028	Argument	r . ru_stime		5268001	0					
ANR	5268029	MemberAccess	r . ru_stime		5268001	0					
ANR	5268030	Identifier	r		5268001	0					
ANR	5268031	Identifier	ru_stime		5268001	1					
ANR	5268032	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_maxrss ) )	614:1:11948:11980	5268001	2	True				
ANR	5268033	CallExpression	STREAM_ASSERT ( code ( r . ru_maxrss ) )		5268001	0					
ANR	5268034	Callee	STREAM_ASSERT		5268001	0					
ANR	5268035	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268036	ArgumentList	code ( r . ru_maxrss )		5268001	1					
ANR	5268037	Argument	code ( r . ru_maxrss )		5268001	0					
ANR	5268038	CallExpression	code ( r . ru_maxrss )		5268001	0					
ANR	5268039	Callee	code		5268001	0					
ANR	5268040	Identifier	code		5268001	0					
ANR	5268041	ArgumentList	r . ru_maxrss		5268001	1					
ANR	5268042	Argument	r . ru_maxrss		5268001	0					
ANR	5268043	MemberAccess	r . ru_maxrss		5268001	0					
ANR	5268044	Identifier	r		5268001	0					
ANR	5268045	Identifier	ru_maxrss		5268001	1					
ANR	5268046	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_ixrss ) )	615:1:11983:12014	5268001	3	True				
ANR	5268047	CallExpression	STREAM_ASSERT ( code ( r . ru_ixrss ) )		5268001	0					
ANR	5268048	Callee	STREAM_ASSERT		5268001	0					
ANR	5268049	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268050	ArgumentList	code ( r . ru_ixrss )		5268001	1					
ANR	5268051	Argument	code ( r . ru_ixrss )		5268001	0					
ANR	5268052	CallExpression	code ( r . ru_ixrss )		5268001	0					
ANR	5268053	Callee	code		5268001	0					
ANR	5268054	Identifier	code		5268001	0					
ANR	5268055	ArgumentList	r . ru_ixrss		5268001	1					
ANR	5268056	Argument	r . ru_ixrss		5268001	0					
ANR	5268057	MemberAccess	r . ru_ixrss		5268001	0					
ANR	5268058	Identifier	r		5268001	0					
ANR	5268059	Identifier	ru_ixrss		5268001	1					
ANR	5268060	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_idrss ) )	616:1:12017:12048	5268001	4	True				
ANR	5268061	CallExpression	STREAM_ASSERT ( code ( r . ru_idrss ) )		5268001	0					
ANR	5268062	Callee	STREAM_ASSERT		5268001	0					
ANR	5268063	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268064	ArgumentList	code ( r . ru_idrss )		5268001	1					
ANR	5268065	Argument	code ( r . ru_idrss )		5268001	0					
ANR	5268066	CallExpression	code ( r . ru_idrss )		5268001	0					
ANR	5268067	Callee	code		5268001	0					
ANR	5268068	Identifier	code		5268001	0					
ANR	5268069	ArgumentList	r . ru_idrss		5268001	1					
ANR	5268070	Argument	r . ru_idrss		5268001	0					
ANR	5268071	MemberAccess	r . ru_idrss		5268001	0					
ANR	5268072	Identifier	r		5268001	0					
ANR	5268073	Identifier	ru_idrss		5268001	1					
ANR	5268074	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_isrss ) )	617:1:12051:12082	5268001	5	True				
ANR	5268075	CallExpression	STREAM_ASSERT ( code ( r . ru_isrss ) )		5268001	0					
ANR	5268076	Callee	STREAM_ASSERT		5268001	0					
ANR	5268077	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268078	ArgumentList	code ( r . ru_isrss )		5268001	1					
ANR	5268079	Argument	code ( r . ru_isrss )		5268001	0					
ANR	5268080	CallExpression	code ( r . ru_isrss )		5268001	0					
ANR	5268081	Callee	code		5268001	0					
ANR	5268082	Identifier	code		5268001	0					
ANR	5268083	ArgumentList	r . ru_isrss		5268001	1					
ANR	5268084	Argument	r . ru_isrss		5268001	0					
ANR	5268085	MemberAccess	r . ru_isrss		5268001	0					
ANR	5268086	Identifier	r		5268001	0					
ANR	5268087	Identifier	ru_isrss		5268001	1					
ANR	5268088	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_minflt ) )	618:1:12085:12117	5268001	6	True				
ANR	5268089	CallExpression	STREAM_ASSERT ( code ( r . ru_minflt ) )		5268001	0					
ANR	5268090	Callee	STREAM_ASSERT		5268001	0					
ANR	5268091	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268092	ArgumentList	code ( r . ru_minflt )		5268001	1					
ANR	5268093	Argument	code ( r . ru_minflt )		5268001	0					
ANR	5268094	CallExpression	code ( r . ru_minflt )		5268001	0					
ANR	5268095	Callee	code		5268001	0					
ANR	5268096	Identifier	code		5268001	0					
ANR	5268097	ArgumentList	r . ru_minflt		5268001	1					
ANR	5268098	Argument	r . ru_minflt		5268001	0					
ANR	5268099	MemberAccess	r . ru_minflt		5268001	0					
ANR	5268100	Identifier	r		5268001	0					
ANR	5268101	Identifier	ru_minflt		5268001	1					
ANR	5268102	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_majflt ) )	619:1:12120:12152	5268001	7	True				
ANR	5268103	CallExpression	STREAM_ASSERT ( code ( r . ru_majflt ) )		5268001	0					
ANR	5268104	Callee	STREAM_ASSERT		5268001	0					
ANR	5268105	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268106	ArgumentList	code ( r . ru_majflt )		5268001	1					
ANR	5268107	Argument	code ( r . ru_majflt )		5268001	0					
ANR	5268108	CallExpression	code ( r . ru_majflt )		5268001	0					
ANR	5268109	Callee	code		5268001	0					
ANR	5268110	Identifier	code		5268001	0					
ANR	5268111	ArgumentList	r . ru_majflt		5268001	1					
ANR	5268112	Argument	r . ru_majflt		5268001	0					
ANR	5268113	MemberAccess	r . ru_majflt		5268001	0					
ANR	5268114	Identifier	r		5268001	0					
ANR	5268115	Identifier	ru_majflt		5268001	1					
ANR	5268116	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_nswap ) )	620:1:12155:12186	5268001	8	True				
ANR	5268117	CallExpression	STREAM_ASSERT ( code ( r . ru_nswap ) )		5268001	0					
ANR	5268118	Callee	STREAM_ASSERT		5268001	0					
ANR	5268119	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268120	ArgumentList	code ( r . ru_nswap )		5268001	1					
ANR	5268121	Argument	code ( r . ru_nswap )		5268001	0					
ANR	5268122	CallExpression	code ( r . ru_nswap )		5268001	0					
ANR	5268123	Callee	code		5268001	0					
ANR	5268124	Identifier	code		5268001	0					
ANR	5268125	ArgumentList	r . ru_nswap		5268001	1					
ANR	5268126	Argument	r . ru_nswap		5268001	0					
ANR	5268127	MemberAccess	r . ru_nswap		5268001	0					
ANR	5268128	Identifier	r		5268001	0					
ANR	5268129	Identifier	ru_nswap		5268001	1					
ANR	5268130	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_inblock ) )	621:1:12189:12222	5268001	9	True				
ANR	5268131	CallExpression	STREAM_ASSERT ( code ( r . ru_inblock ) )		5268001	0					
ANR	5268132	Callee	STREAM_ASSERT		5268001	0					
ANR	5268133	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268134	ArgumentList	code ( r . ru_inblock )		5268001	1					
ANR	5268135	Argument	code ( r . ru_inblock )		5268001	0					
ANR	5268136	CallExpression	code ( r . ru_inblock )		5268001	0					
ANR	5268137	Callee	code		5268001	0					
ANR	5268138	Identifier	code		5268001	0					
ANR	5268139	ArgumentList	r . ru_inblock		5268001	1					
ANR	5268140	Argument	r . ru_inblock		5268001	0					
ANR	5268141	MemberAccess	r . ru_inblock		5268001	0					
ANR	5268142	Identifier	r		5268001	0					
ANR	5268143	Identifier	ru_inblock		5268001	1					
ANR	5268144	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_oublock ) )	622:1:12225:12258	5268001	10	True				
ANR	5268145	CallExpression	STREAM_ASSERT ( code ( r . ru_oublock ) )		5268001	0					
ANR	5268146	Callee	STREAM_ASSERT		5268001	0					
ANR	5268147	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268148	ArgumentList	code ( r . ru_oublock )		5268001	1					
ANR	5268149	Argument	code ( r . ru_oublock )		5268001	0					
ANR	5268150	CallExpression	code ( r . ru_oublock )		5268001	0					
ANR	5268151	Callee	code		5268001	0					
ANR	5268152	Identifier	code		5268001	0					
ANR	5268153	ArgumentList	r . ru_oublock		5268001	1					
ANR	5268154	Argument	r . ru_oublock		5268001	0					
ANR	5268155	MemberAccess	r . ru_oublock		5268001	0					
ANR	5268156	Identifier	r		5268001	0					
ANR	5268157	Identifier	ru_oublock		5268001	1					
ANR	5268158	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_msgsnd ) )	623:1:12261:12293	5268001	11	True				
ANR	5268159	CallExpression	STREAM_ASSERT ( code ( r . ru_msgsnd ) )		5268001	0					
ANR	5268160	Callee	STREAM_ASSERT		5268001	0					
ANR	5268161	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268162	ArgumentList	code ( r . ru_msgsnd )		5268001	1					
ANR	5268163	Argument	code ( r . ru_msgsnd )		5268001	0					
ANR	5268164	CallExpression	code ( r . ru_msgsnd )		5268001	0					
ANR	5268165	Callee	code		5268001	0					
ANR	5268166	Identifier	code		5268001	0					
ANR	5268167	ArgumentList	r . ru_msgsnd		5268001	1					
ANR	5268168	Argument	r . ru_msgsnd		5268001	0					
ANR	5268169	MemberAccess	r . ru_msgsnd		5268001	0					
ANR	5268170	Identifier	r		5268001	0					
ANR	5268171	Identifier	ru_msgsnd		5268001	1					
ANR	5268172	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_msgrcv ) )	624:1:12296:12328	5268001	12	True				
ANR	5268173	CallExpression	STREAM_ASSERT ( code ( r . ru_msgrcv ) )		5268001	0					
ANR	5268174	Callee	STREAM_ASSERT		5268001	0					
ANR	5268175	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268176	ArgumentList	code ( r . ru_msgrcv )		5268001	1					
ANR	5268177	Argument	code ( r . ru_msgrcv )		5268001	0					
ANR	5268178	CallExpression	code ( r . ru_msgrcv )		5268001	0					
ANR	5268179	Callee	code		5268001	0					
ANR	5268180	Identifier	code		5268001	0					
ANR	5268181	ArgumentList	r . ru_msgrcv		5268001	1					
ANR	5268182	Argument	r . ru_msgrcv		5268001	0					
ANR	5268183	MemberAccess	r . ru_msgrcv		5268001	0					
ANR	5268184	Identifier	r		5268001	0					
ANR	5268185	Identifier	ru_msgrcv		5268001	1					
ANR	5268186	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_nsignals ) )	625:1:12331:12365	5268001	13	True				
ANR	5268187	CallExpression	STREAM_ASSERT ( code ( r . ru_nsignals ) )		5268001	0					
ANR	5268188	Callee	STREAM_ASSERT		5268001	0					
ANR	5268189	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268190	ArgumentList	code ( r . ru_nsignals )		5268001	1					
ANR	5268191	Argument	code ( r . ru_nsignals )		5268001	0					
ANR	5268192	CallExpression	code ( r . ru_nsignals )		5268001	0					
ANR	5268193	Callee	code		5268001	0					
ANR	5268194	Identifier	code		5268001	0					
ANR	5268195	ArgumentList	r . ru_nsignals		5268001	1					
ANR	5268196	Argument	r . ru_nsignals		5268001	0					
ANR	5268197	MemberAccess	r . ru_nsignals		5268001	0					
ANR	5268198	Identifier	r		5268001	0					
ANR	5268199	Identifier	ru_nsignals		5268001	1					
ANR	5268200	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_nvcsw ) )	626:1:12368:12399	5268001	14	True				
ANR	5268201	CallExpression	STREAM_ASSERT ( code ( r . ru_nvcsw ) )		5268001	0					
ANR	5268202	Callee	STREAM_ASSERT		5268001	0					
ANR	5268203	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268204	ArgumentList	code ( r . ru_nvcsw )		5268001	1					
ANR	5268205	Argument	code ( r . ru_nvcsw )		5268001	0					
ANR	5268206	CallExpression	code ( r . ru_nvcsw )		5268001	0					
ANR	5268207	Callee	code		5268001	0					
ANR	5268208	Identifier	code		5268001	0					
ANR	5268209	ArgumentList	r . ru_nvcsw		5268001	1					
ANR	5268210	Argument	r . ru_nvcsw		5268001	0					
ANR	5268211	MemberAccess	r . ru_nvcsw		5268001	0					
ANR	5268212	Identifier	r		5268001	0					
ANR	5268213	Identifier	ru_nvcsw		5268001	1					
ANR	5268214	ExpressionStatement	STREAM_ASSERT ( code ( r . ru_nivcsw ) )	627:1:12402:12434	5268001	15	True				
ANR	5268215	CallExpression	STREAM_ASSERT ( code ( r . ru_nivcsw ) )		5268001	0					
ANR	5268216	Callee	STREAM_ASSERT		5268001	0					
ANR	5268217	Identifier	STREAM_ASSERT		5268001	0					
ANR	5268218	ArgumentList	code ( r . ru_nivcsw )		5268001	1					
ANR	5268219	Argument	code ( r . ru_nivcsw )		5268001	0					
ANR	5268220	CallExpression	code ( r . ru_nivcsw )		5268001	0					
ANR	5268221	Callee	code		5268001	0					
ANR	5268222	Identifier	code		5268001	0					
ANR	5268223	ArgumentList	r . ru_nivcsw		5268001	1					
ANR	5268224	Argument	r . ru_nivcsw		5268001	0					
ANR	5268225	MemberAccess	r . ru_nivcsw		5268001	0					
ANR	5268226	Identifier	r		5268001	0					
ANR	5268227	Identifier	ru_nivcsw		5268001	1					
ANR	5268228	ReturnStatement	return TRUE ;	629:1:12438:12449	5268001	16	True				
ANR	5268229	Identifier	TRUE		5268001	0					
ANR	5268230	ReturnType	int		5268001	1					
ANR	5268231	Identifier	Stream :: code		5268001	2					
ANR	5268232	ParameterList	struct rusage & r		5268001	3					
ANR	5268233	Parameter	struct rusage & r	610:13:11859:11874	5268001	0	True				
ANR	5268234	ParameterType	struct rusage &		5268001	0					
ANR	5268235	Identifier	r		5268001	1					
ANR	5268236	CFGEntryNode	ENTRY		5268001		True				
ANR	5268237	CFGExitNode	EXIT		5268001		True				
ANR	5268238	Symbol	r . ru_inblock		5268001						
ANR	5268239	Symbol	code		5268001						
ANR	5268240	Symbol	r . ru_isrss		5268001						
ANR	5268241	Symbol	r . ru_oublock		5268001						
ANR	5268242	Symbol	r . ru_msgsnd		5268001						
ANR	5268243	Symbol	TRUE		5268001						
ANR	5268244	Symbol	r . ru_ixrss		5268001						
ANR	5268245	Symbol	r . ru_msgrcv		5268001						
ANR	5268246	Symbol	r . ru_nsignals		5268001						
ANR	5268247	Symbol	r . ru_nvcsw		5268001						
ANR	5268248	Symbol	r		5268001						
ANR	5268249	Symbol	r . ru_utime		5268001						
ANR	5268250	Symbol	r . ru_nivcsw		5268001						
ANR	5268251	Symbol	r . ru_nswap		5268001						
ANR	5268252	Symbol	r . ru_minflt		5268001						
ANR	5268253	Symbol	r . ru_majflt		5268001						
ANR	5268254	Symbol	r . ru_stime		5268001						
ANR	5268255	Symbol	r . ru_maxrss		5268001						
ANR	5268256	Symbol	r . ru_idrss		5268001						
ANR	5268257	Function	Stream :: code	632:0:12454:12939							
ANR	5268258	FunctionDef	Stream :: code (struct stat & s)		5268257	0					
ANR	5268259	CompoundStatement		634:0:12488:12939	5268257	0					
ANR	5268260	ExpressionStatement	STREAM_ASSERT ( code ( s . st_dev ) )	635:1:12491:12520	5268257	0	True				
ANR	5268261	CallExpression	STREAM_ASSERT ( code ( s . st_dev ) )		5268257	0					
ANR	5268262	Callee	STREAM_ASSERT		5268257	0					
ANR	5268263	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268264	ArgumentList	code ( s . st_dev )		5268257	1					
ANR	5268265	Argument	code ( s . st_dev )		5268257	0					
ANR	5268266	CallExpression	code ( s . st_dev )		5268257	0					
ANR	5268267	Callee	code		5268257	0					
ANR	5268268	Identifier	code		5268257	0					
ANR	5268269	ArgumentList	s . st_dev		5268257	1					
ANR	5268270	Argument	s . st_dev		5268257	0					
ANR	5268271	MemberAccess	s . st_dev		5268257	0					
ANR	5268272	Identifier	s		5268257	0					
ANR	5268273	Identifier	st_dev		5268257	1					
ANR	5268274	ExpressionStatement	STREAM_ASSERT ( code ( s . st_ino ) )	636:1:12523:12552	5268257	1	True				
ANR	5268275	CallExpression	STREAM_ASSERT ( code ( s . st_ino ) )		5268257	0					
ANR	5268276	Callee	STREAM_ASSERT		5268257	0					
ANR	5268277	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268278	ArgumentList	code ( s . st_ino )		5268257	1					
ANR	5268279	Argument	code ( s . st_ino )		5268257	0					
ANR	5268280	CallExpression	code ( s . st_ino )		5268257	0					
ANR	5268281	Callee	code		5268257	0					
ANR	5268282	Identifier	code		5268257	0					
ANR	5268283	ArgumentList	s . st_ino		5268257	1					
ANR	5268284	Argument	s . st_ino		5268257	0					
ANR	5268285	MemberAccess	s . st_ino		5268257	0					
ANR	5268286	Identifier	s		5268257	0					
ANR	5268287	Identifier	st_ino		5268257	1					
ANR	5268288	ExpressionStatement	STREAM_ASSERT ( code ( s . st_mode ) )	637:1:12555:12585	5268257	2	True				
ANR	5268289	CallExpression	STREAM_ASSERT ( code ( s . st_mode ) )		5268257	0					
ANR	5268290	Callee	STREAM_ASSERT		5268257	0					
ANR	5268291	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268292	ArgumentList	code ( s . st_mode )		5268257	1					
ANR	5268293	Argument	code ( s . st_mode )		5268257	0					
ANR	5268294	CallExpression	code ( s . st_mode )		5268257	0					
ANR	5268295	Callee	code		5268257	0					
ANR	5268296	Identifier	code		5268257	0					
ANR	5268297	ArgumentList	s . st_mode		5268257	1					
ANR	5268298	Argument	s . st_mode		5268257	0					
ANR	5268299	MemberAccess	s . st_mode		5268257	0					
ANR	5268300	Identifier	s		5268257	0					
ANR	5268301	Identifier	st_mode		5268257	1					
ANR	5268302	ExpressionStatement	STREAM_ASSERT ( code ( s . st_nlink ) )	638:1:12588:12619	5268257	3	True				
ANR	5268303	CallExpression	STREAM_ASSERT ( code ( s . st_nlink ) )		5268257	0					
ANR	5268304	Callee	STREAM_ASSERT		5268257	0					
ANR	5268305	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268306	ArgumentList	code ( s . st_nlink )		5268257	1					
ANR	5268307	Argument	code ( s . st_nlink )		5268257	0					
ANR	5268308	CallExpression	code ( s . st_nlink )		5268257	0					
ANR	5268309	Callee	code		5268257	0					
ANR	5268310	Identifier	code		5268257	0					
ANR	5268311	ArgumentList	s . st_nlink		5268257	1					
ANR	5268312	Argument	s . st_nlink		5268257	0					
ANR	5268313	MemberAccess	s . st_nlink		5268257	0					
ANR	5268314	Identifier	s		5268257	0					
ANR	5268315	Identifier	st_nlink		5268257	1					
ANR	5268316	ExpressionStatement	STREAM_ASSERT ( code ( s . st_uid ) )	639:1:12622:12651	5268257	4	True				
ANR	5268317	CallExpression	STREAM_ASSERT ( code ( s . st_uid ) )		5268257	0					
ANR	5268318	Callee	STREAM_ASSERT		5268257	0					
ANR	5268319	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268320	ArgumentList	code ( s . st_uid )		5268257	1					
ANR	5268321	Argument	code ( s . st_uid )		5268257	0					
ANR	5268322	CallExpression	code ( s . st_uid )		5268257	0					
ANR	5268323	Callee	code		5268257	0					
ANR	5268324	Identifier	code		5268257	0					
ANR	5268325	ArgumentList	s . st_uid		5268257	1					
ANR	5268326	Argument	s . st_uid		5268257	0					
ANR	5268327	MemberAccess	s . st_uid		5268257	0					
ANR	5268328	Identifier	s		5268257	0					
ANR	5268329	Identifier	st_uid		5268257	1					
ANR	5268330	ExpressionStatement	STREAM_ASSERT ( code ( s . st_gid ) )	640:1:12654:12683	5268257	5	True				
ANR	5268331	CallExpression	STREAM_ASSERT ( code ( s . st_gid ) )		5268257	0					
ANR	5268332	Callee	STREAM_ASSERT		5268257	0					
ANR	5268333	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268334	ArgumentList	code ( s . st_gid )		5268257	1					
ANR	5268335	Argument	code ( s . st_gid )		5268257	0					
ANR	5268336	CallExpression	code ( s . st_gid )		5268257	0					
ANR	5268337	Callee	code		5268257	0					
ANR	5268338	Identifier	code		5268257	0					
ANR	5268339	ArgumentList	s . st_gid		5268257	1					
ANR	5268340	Argument	s . st_gid		5268257	0					
ANR	5268341	MemberAccess	s . st_gid		5268257	0					
ANR	5268342	Identifier	s		5268257	0					
ANR	5268343	Identifier	st_gid		5268257	1					
ANR	5268344	ExpressionStatement	STREAM_ASSERT ( code ( s . st_rdev ) )	641:1:12686:12716	5268257	6	True				
ANR	5268345	CallExpression	STREAM_ASSERT ( code ( s . st_rdev ) )		5268257	0					
ANR	5268346	Callee	STREAM_ASSERT		5268257	0					
ANR	5268347	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268348	ArgumentList	code ( s . st_rdev )		5268257	1					
ANR	5268349	Argument	code ( s . st_rdev )		5268257	0					
ANR	5268350	CallExpression	code ( s . st_rdev )		5268257	0					
ANR	5268351	Callee	code		5268257	0					
ANR	5268352	Identifier	code		5268257	0					
ANR	5268353	ArgumentList	s . st_rdev		5268257	1					
ANR	5268354	Argument	s . st_rdev		5268257	0					
ANR	5268355	MemberAccess	s . st_rdev		5268257	0					
ANR	5268356	Identifier	s		5268257	0					
ANR	5268357	Identifier	st_rdev		5268257	1					
ANR	5268358	ExpressionStatement	STREAM_ASSERT ( code ( s . st_size ) )	642:1:12719:12749	5268257	7	True				
ANR	5268359	CallExpression	STREAM_ASSERT ( code ( s . st_size ) )		5268257	0					
ANR	5268360	Callee	STREAM_ASSERT		5268257	0					
ANR	5268361	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268362	ArgumentList	code ( s . st_size )		5268257	1					
ANR	5268363	Argument	code ( s . st_size )		5268257	0					
ANR	5268364	CallExpression	code ( s . st_size )		5268257	0					
ANR	5268365	Callee	code		5268257	0					
ANR	5268366	Identifier	code		5268257	0					
ANR	5268367	ArgumentList	s . st_size		5268257	1					
ANR	5268368	Argument	s . st_size		5268257	0					
ANR	5268369	MemberAccess	s . st_size		5268257	0					
ANR	5268370	Identifier	s		5268257	0					
ANR	5268371	Identifier	st_size		5268257	1					
ANR	5268372	ExpressionStatement	STREAM_ASSERT ( code ( s . st_atime ) )	643:1:12752:12783	5268257	8	True				
ANR	5268373	CallExpression	STREAM_ASSERT ( code ( s . st_atime ) )		5268257	0					
ANR	5268374	Callee	STREAM_ASSERT		5268257	0					
ANR	5268375	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268376	ArgumentList	code ( s . st_atime )		5268257	1					
ANR	5268377	Argument	code ( s . st_atime )		5268257	0					
ANR	5268378	CallExpression	code ( s . st_atime )		5268257	0					
ANR	5268379	Callee	code		5268257	0					
ANR	5268380	Identifier	code		5268257	0					
ANR	5268381	ArgumentList	s . st_atime		5268257	1					
ANR	5268382	Argument	s . st_atime		5268257	0					
ANR	5268383	MemberAccess	s . st_atime		5268257	0					
ANR	5268384	Identifier	s		5268257	0					
ANR	5268385	Identifier	st_atime		5268257	1					
ANR	5268386	ExpressionStatement	STREAM_ASSERT ( code ( s . st_mtime ) )	644:1:12786:12817	5268257	9	True				
ANR	5268387	CallExpression	STREAM_ASSERT ( code ( s . st_mtime ) )		5268257	0					
ANR	5268388	Callee	STREAM_ASSERT		5268257	0					
ANR	5268389	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268390	ArgumentList	code ( s . st_mtime )		5268257	1					
ANR	5268391	Argument	code ( s . st_mtime )		5268257	0					
ANR	5268392	CallExpression	code ( s . st_mtime )		5268257	0					
ANR	5268393	Callee	code		5268257	0					
ANR	5268394	Identifier	code		5268257	0					
ANR	5268395	ArgumentList	s . st_mtime		5268257	1					
ANR	5268396	Argument	s . st_mtime		5268257	0					
ANR	5268397	MemberAccess	s . st_mtime		5268257	0					
ANR	5268398	Identifier	s		5268257	0					
ANR	5268399	Identifier	st_mtime		5268257	1					
ANR	5268400	ExpressionStatement	STREAM_ASSERT ( code ( s . st_ctime ) )	645:1:12820:12851	5268257	10	True				
ANR	5268401	CallExpression	STREAM_ASSERT ( code ( s . st_ctime ) )		5268257	0					
ANR	5268402	Callee	STREAM_ASSERT		5268257	0					
ANR	5268403	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268404	ArgumentList	code ( s . st_ctime )		5268257	1					
ANR	5268405	Argument	code ( s . st_ctime )		5268257	0					
ANR	5268406	CallExpression	code ( s . st_ctime )		5268257	0					
ANR	5268407	Callee	code		5268257	0					
ANR	5268408	Identifier	code		5268257	0					
ANR	5268409	ArgumentList	s . st_ctime		5268257	1					
ANR	5268410	Argument	s . st_ctime		5268257	0					
ANR	5268411	MemberAccess	s . st_ctime		5268257	0					
ANR	5268412	Identifier	s		5268257	0					
ANR	5268413	Identifier	st_ctime		5268257	1					
ANR	5268414	ExpressionStatement	STREAM_ASSERT ( code ( s . st_blksize ) )	646:1:12854:12887	5268257	11	True				
ANR	5268415	CallExpression	STREAM_ASSERT ( code ( s . st_blksize ) )		5268257	0					
ANR	5268416	Callee	STREAM_ASSERT		5268257	0					
ANR	5268417	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268418	ArgumentList	code ( s . st_blksize )		5268257	1					
ANR	5268419	Argument	code ( s . st_blksize )		5268257	0					
ANR	5268420	CallExpression	code ( s . st_blksize )		5268257	0					
ANR	5268421	Callee	code		5268257	0					
ANR	5268422	Identifier	code		5268257	0					
ANR	5268423	ArgumentList	s . st_blksize		5268257	1					
ANR	5268424	Argument	s . st_blksize		5268257	0					
ANR	5268425	MemberAccess	s . st_blksize		5268257	0					
ANR	5268426	Identifier	s		5268257	0					
ANR	5268427	Identifier	st_blksize		5268257	1					
ANR	5268428	ExpressionStatement	STREAM_ASSERT ( code ( s . st_blocks ) )	647:1:12890:12922	5268257	12	True				
ANR	5268429	CallExpression	STREAM_ASSERT ( code ( s . st_blocks ) )		5268257	0					
ANR	5268430	Callee	STREAM_ASSERT		5268257	0					
ANR	5268431	Identifier	STREAM_ASSERT		5268257	0					
ANR	5268432	ArgumentList	code ( s . st_blocks )		5268257	1					
ANR	5268433	Argument	code ( s . st_blocks )		5268257	0					
ANR	5268434	CallExpression	code ( s . st_blocks )		5268257	0					
ANR	5268435	Callee	code		5268257	0					
ANR	5268436	Identifier	code		5268257	0					
ANR	5268437	ArgumentList	s . st_blocks		5268257	1					
ANR	5268438	Argument	s . st_blocks		5268257	0					
ANR	5268439	MemberAccess	s . st_blocks		5268257	0					
ANR	5268440	Identifier	s		5268257	0					
ANR	5268441	Identifier	st_blocks		5268257	1					
ANR	5268442	ReturnStatement	return TRUE ;	649:1:12926:12937	5268257	13	True				
ANR	5268443	Identifier	TRUE		5268257	0					
ANR	5268444	ReturnType	int		5268257	1					
ANR	5268445	Identifier	Stream :: code		5268257	2					
ANR	5268446	ParameterList	struct stat & s		5268257	3					
ANR	5268447	Parameter	struct stat & s	633:13:12472:12485	5268257	0	True				
ANR	5268448	ParameterType	struct stat &		5268257	0					
ANR	5268449	Identifier	s		5268257	1					
ANR	5268450	CFGEntryNode	ENTRY		5268257		True				
ANR	5268451	CFGExitNode	EXIT		5268257		True				
ANR	5268452	Symbol	s . st_dev		5268257						
ANR	5268453	Symbol	code		5268257						
ANR	5268454	Symbol	s . st_uid		5268257						
ANR	5268455	Symbol	s . st_rdev		5268257						
ANR	5268456	Symbol	s . st_atime		5268257						
ANR	5268457	Symbol	s . st_blocks		5268257						
ANR	5268458	Symbol	TRUE		5268257						
ANR	5268459	Symbol	s . st_mode		5268257						
ANR	5268460	Symbol	s . st_size		5268257						
ANR	5268461	Symbol	s . st_mtime		5268257						
ANR	5268462	Symbol	s . st_nlink		5268257						
ANR	5268463	Symbol	s . st_ctime		5268257						
ANR	5268464	Symbol	s		5268257						
ANR	5268465	Symbol	s . st_gid		5268257						
ANR	5268466	Symbol	s . st_blksize		5268257						
ANR	5268467	Symbol	s . st_ino		5268257						
ANR	5268468	Function	Stream :: code	653:0:12964:13451							
ANR	5268469	FunctionDef	Stream :: code (struct stat64 & s)		5268468	0					
ANR	5268470	CompoundStatement		655:0:13000:13451	5268468	0					
ANR	5268471	ExpressionStatement	STREAM_ASSERT ( code ( s . st_dev ) )	656:1:13003:13032	5268468	0	True				
ANR	5268472	CallExpression	STREAM_ASSERT ( code ( s . st_dev ) )		5268468	0					
ANR	5268473	Callee	STREAM_ASSERT		5268468	0					
ANR	5268474	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268475	ArgumentList	code ( s . st_dev )		5268468	1					
ANR	5268476	Argument	code ( s . st_dev )		5268468	0					
ANR	5268477	CallExpression	code ( s . st_dev )		5268468	0					
ANR	5268478	Callee	code		5268468	0					
ANR	5268479	Identifier	code		5268468	0					
ANR	5268480	ArgumentList	s . st_dev		5268468	1					
ANR	5268481	Argument	s . st_dev		5268468	0					
ANR	5268482	MemberAccess	s . st_dev		5268468	0					
ANR	5268483	Identifier	s		5268468	0					
ANR	5268484	Identifier	st_dev		5268468	1					
ANR	5268485	ExpressionStatement	STREAM_ASSERT ( code ( s . st_ino ) )	657:1:13035:13064	5268468	1	True				
ANR	5268486	CallExpression	STREAM_ASSERT ( code ( s . st_ino ) )		5268468	0					
ANR	5268487	Callee	STREAM_ASSERT		5268468	0					
ANR	5268488	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268489	ArgumentList	code ( s . st_ino )		5268468	1					
ANR	5268490	Argument	code ( s . st_ino )		5268468	0					
ANR	5268491	CallExpression	code ( s . st_ino )		5268468	0					
ANR	5268492	Callee	code		5268468	0					
ANR	5268493	Identifier	code		5268468	0					
ANR	5268494	ArgumentList	s . st_ino		5268468	1					
ANR	5268495	Argument	s . st_ino		5268468	0					
ANR	5268496	MemberAccess	s . st_ino		5268468	0					
ANR	5268497	Identifier	s		5268468	0					
ANR	5268498	Identifier	st_ino		5268468	1					
ANR	5268499	ExpressionStatement	STREAM_ASSERT ( code ( s . st_mode ) )	658:1:13067:13097	5268468	2	True				
ANR	5268500	CallExpression	STREAM_ASSERT ( code ( s . st_mode ) )		5268468	0					
ANR	5268501	Callee	STREAM_ASSERT		5268468	0					
ANR	5268502	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268503	ArgumentList	code ( s . st_mode )		5268468	1					
ANR	5268504	Argument	code ( s . st_mode )		5268468	0					
ANR	5268505	CallExpression	code ( s . st_mode )		5268468	0					
ANR	5268506	Callee	code		5268468	0					
ANR	5268507	Identifier	code		5268468	0					
ANR	5268508	ArgumentList	s . st_mode		5268468	1					
ANR	5268509	Argument	s . st_mode		5268468	0					
ANR	5268510	MemberAccess	s . st_mode		5268468	0					
ANR	5268511	Identifier	s		5268468	0					
ANR	5268512	Identifier	st_mode		5268468	1					
ANR	5268513	ExpressionStatement	STREAM_ASSERT ( code ( s . st_nlink ) )	659:1:13100:13131	5268468	3	True				
ANR	5268514	CallExpression	STREAM_ASSERT ( code ( s . st_nlink ) )		5268468	0					
ANR	5268515	Callee	STREAM_ASSERT		5268468	0					
ANR	5268516	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268517	ArgumentList	code ( s . st_nlink )		5268468	1					
ANR	5268518	Argument	code ( s . st_nlink )		5268468	0					
ANR	5268519	CallExpression	code ( s . st_nlink )		5268468	0					
ANR	5268520	Callee	code		5268468	0					
ANR	5268521	Identifier	code		5268468	0					
ANR	5268522	ArgumentList	s . st_nlink		5268468	1					
ANR	5268523	Argument	s . st_nlink		5268468	0					
ANR	5268524	MemberAccess	s . st_nlink		5268468	0					
ANR	5268525	Identifier	s		5268468	0					
ANR	5268526	Identifier	st_nlink		5268468	1					
ANR	5268527	ExpressionStatement	STREAM_ASSERT ( code ( s . st_uid ) )	660:1:13134:13163	5268468	4	True				
ANR	5268528	CallExpression	STREAM_ASSERT ( code ( s . st_uid ) )		5268468	0					
ANR	5268529	Callee	STREAM_ASSERT		5268468	0					
ANR	5268530	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268531	ArgumentList	code ( s . st_uid )		5268468	1					
ANR	5268532	Argument	code ( s . st_uid )		5268468	0					
ANR	5268533	CallExpression	code ( s . st_uid )		5268468	0					
ANR	5268534	Callee	code		5268468	0					
ANR	5268535	Identifier	code		5268468	0					
ANR	5268536	ArgumentList	s . st_uid		5268468	1					
ANR	5268537	Argument	s . st_uid		5268468	0					
ANR	5268538	MemberAccess	s . st_uid		5268468	0					
ANR	5268539	Identifier	s		5268468	0					
ANR	5268540	Identifier	st_uid		5268468	1					
ANR	5268541	ExpressionStatement	STREAM_ASSERT ( code ( s . st_gid ) )	661:1:13166:13195	5268468	5	True				
ANR	5268542	CallExpression	STREAM_ASSERT ( code ( s . st_gid ) )		5268468	0					
ANR	5268543	Callee	STREAM_ASSERT		5268468	0					
ANR	5268544	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268545	ArgumentList	code ( s . st_gid )		5268468	1					
ANR	5268546	Argument	code ( s . st_gid )		5268468	0					
ANR	5268547	CallExpression	code ( s . st_gid )		5268468	0					
ANR	5268548	Callee	code		5268468	0					
ANR	5268549	Identifier	code		5268468	0					
ANR	5268550	ArgumentList	s . st_gid		5268468	1					
ANR	5268551	Argument	s . st_gid		5268468	0					
ANR	5268552	MemberAccess	s . st_gid		5268468	0					
ANR	5268553	Identifier	s		5268468	0					
ANR	5268554	Identifier	st_gid		5268468	1					
ANR	5268555	ExpressionStatement	STREAM_ASSERT ( code ( s . st_rdev ) )	662:1:13198:13228	5268468	6	True				
ANR	5268556	CallExpression	STREAM_ASSERT ( code ( s . st_rdev ) )		5268468	0					
ANR	5268557	Callee	STREAM_ASSERT		5268468	0					
ANR	5268558	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268559	ArgumentList	code ( s . st_rdev )		5268468	1					
ANR	5268560	Argument	code ( s . st_rdev )		5268468	0					
ANR	5268561	CallExpression	code ( s . st_rdev )		5268468	0					
ANR	5268562	Callee	code		5268468	0					
ANR	5268563	Identifier	code		5268468	0					
ANR	5268564	ArgumentList	s . st_rdev		5268468	1					
ANR	5268565	Argument	s . st_rdev		5268468	0					
ANR	5268566	MemberAccess	s . st_rdev		5268468	0					
ANR	5268567	Identifier	s		5268468	0					
ANR	5268568	Identifier	st_rdev		5268468	1					
ANR	5268569	ExpressionStatement	STREAM_ASSERT ( code ( s . st_size ) )	663:1:13231:13261	5268468	7	True				
ANR	5268570	CallExpression	STREAM_ASSERT ( code ( s . st_size ) )		5268468	0					
ANR	5268571	Callee	STREAM_ASSERT		5268468	0					
ANR	5268572	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268573	ArgumentList	code ( s . st_size )		5268468	1					
ANR	5268574	Argument	code ( s . st_size )		5268468	0					
ANR	5268575	CallExpression	code ( s . st_size )		5268468	0					
ANR	5268576	Callee	code		5268468	0					
ANR	5268577	Identifier	code		5268468	0					
ANR	5268578	ArgumentList	s . st_size		5268468	1					
ANR	5268579	Argument	s . st_size		5268468	0					
ANR	5268580	MemberAccess	s . st_size		5268468	0					
ANR	5268581	Identifier	s		5268468	0					
ANR	5268582	Identifier	st_size		5268468	1					
ANR	5268583	ExpressionStatement	STREAM_ASSERT ( code ( s . st_atime ) )	664:1:13264:13295	5268468	8	True				
ANR	5268584	CallExpression	STREAM_ASSERT ( code ( s . st_atime ) )		5268468	0					
ANR	5268585	Callee	STREAM_ASSERT		5268468	0					
ANR	5268586	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268587	ArgumentList	code ( s . st_atime )		5268468	1					
ANR	5268588	Argument	code ( s . st_atime )		5268468	0					
ANR	5268589	CallExpression	code ( s . st_atime )		5268468	0					
ANR	5268590	Callee	code		5268468	0					
ANR	5268591	Identifier	code		5268468	0					
ANR	5268592	ArgumentList	s . st_atime		5268468	1					
ANR	5268593	Argument	s . st_atime		5268468	0					
ANR	5268594	MemberAccess	s . st_atime		5268468	0					
ANR	5268595	Identifier	s		5268468	0					
ANR	5268596	Identifier	st_atime		5268468	1					
ANR	5268597	ExpressionStatement	STREAM_ASSERT ( code ( s . st_mtime ) )	665:1:13298:13329	5268468	9	True				
ANR	5268598	CallExpression	STREAM_ASSERT ( code ( s . st_mtime ) )		5268468	0					
ANR	5268599	Callee	STREAM_ASSERT		5268468	0					
ANR	5268600	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268601	ArgumentList	code ( s . st_mtime )		5268468	1					
ANR	5268602	Argument	code ( s . st_mtime )		5268468	0					
ANR	5268603	CallExpression	code ( s . st_mtime )		5268468	0					
ANR	5268604	Callee	code		5268468	0					
ANR	5268605	Identifier	code		5268468	0					
ANR	5268606	ArgumentList	s . st_mtime		5268468	1					
ANR	5268607	Argument	s . st_mtime		5268468	0					
ANR	5268608	MemberAccess	s . st_mtime		5268468	0					
ANR	5268609	Identifier	s		5268468	0					
ANR	5268610	Identifier	st_mtime		5268468	1					
ANR	5268611	ExpressionStatement	STREAM_ASSERT ( code ( s . st_ctime ) )	666:1:13332:13363	5268468	10	True				
ANR	5268612	CallExpression	STREAM_ASSERT ( code ( s . st_ctime ) )		5268468	0					
ANR	5268613	Callee	STREAM_ASSERT		5268468	0					
ANR	5268614	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268615	ArgumentList	code ( s . st_ctime )		5268468	1					
ANR	5268616	Argument	code ( s . st_ctime )		5268468	0					
ANR	5268617	CallExpression	code ( s . st_ctime )		5268468	0					
ANR	5268618	Callee	code		5268468	0					
ANR	5268619	Identifier	code		5268468	0					
ANR	5268620	ArgumentList	s . st_ctime		5268468	1					
ANR	5268621	Argument	s . st_ctime		5268468	0					
ANR	5268622	MemberAccess	s . st_ctime		5268468	0					
ANR	5268623	Identifier	s		5268468	0					
ANR	5268624	Identifier	st_ctime		5268468	1					
ANR	5268625	ExpressionStatement	STREAM_ASSERT ( code ( s . st_blksize ) )	667:1:13366:13399	5268468	11	True				
ANR	5268626	CallExpression	STREAM_ASSERT ( code ( s . st_blksize ) )		5268468	0					
ANR	5268627	Callee	STREAM_ASSERT		5268468	0					
ANR	5268628	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268629	ArgumentList	code ( s . st_blksize )		5268468	1					
ANR	5268630	Argument	code ( s . st_blksize )		5268468	0					
ANR	5268631	CallExpression	code ( s . st_blksize )		5268468	0					
ANR	5268632	Callee	code		5268468	0					
ANR	5268633	Identifier	code		5268468	0					
ANR	5268634	ArgumentList	s . st_blksize		5268468	1					
ANR	5268635	Argument	s . st_blksize		5268468	0					
ANR	5268636	MemberAccess	s . st_blksize		5268468	0					
ANR	5268637	Identifier	s		5268468	0					
ANR	5268638	Identifier	st_blksize		5268468	1					
ANR	5268639	ExpressionStatement	STREAM_ASSERT ( code ( s . st_blocks ) )	668:1:13402:13434	5268468	12	True				
ANR	5268640	CallExpression	STREAM_ASSERT ( code ( s . st_blocks ) )		5268468	0					
ANR	5268641	Callee	STREAM_ASSERT		5268468	0					
ANR	5268642	Identifier	STREAM_ASSERT		5268468	0					
ANR	5268643	ArgumentList	code ( s . st_blocks )		5268468	1					
ANR	5268644	Argument	code ( s . st_blocks )		5268468	0					
ANR	5268645	CallExpression	code ( s . st_blocks )		5268468	0					
ANR	5268646	Callee	code		5268468	0					
ANR	5268647	Identifier	code		5268468	0					
ANR	5268648	ArgumentList	s . st_blocks		5268468	1					
ANR	5268649	Argument	s . st_blocks		5268468	0					
ANR	5268650	MemberAccess	s . st_blocks		5268468	0					
ANR	5268651	Identifier	s		5268468	0					
ANR	5268652	Identifier	st_blocks		5268468	1					
ANR	5268653	ReturnStatement	return TRUE ;	670:1:13438:13449	5268468	13	True				
ANR	5268654	Identifier	TRUE		5268468	0					
ANR	5268655	ReturnType	int		5268468	1					
ANR	5268656	Identifier	Stream :: code		5268468	2					
ANR	5268657	ParameterList	struct stat64 & s		5268468	3					
ANR	5268658	Parameter	struct stat64 & s	654:13:12982:12997	5268468	0	True				
ANR	5268659	ParameterType	struct stat64 &		5268468	0					
ANR	5268660	Identifier	s		5268468	1					
ANR	5268661	CFGEntryNode	ENTRY		5268468		True				
ANR	5268662	CFGExitNode	EXIT		5268468		True				
ANR	5268663	Symbol	code		5268468						
ANR	5268664	Symbol	s . st_dev		5268468						
ANR	5268665	Symbol	s . st_uid		5268468						
ANR	5268666	Symbol	s . st_rdev		5268468						
ANR	5268667	Symbol	s . st_atime		5268468						
ANR	5268668	Symbol	s . st_blocks		5268468						
ANR	5268669	Symbol	TRUE		5268468						
ANR	5268670	Symbol	s . st_mode		5268468						
ANR	5268671	Symbol	s . st_size		5268468						
ANR	5268672	Symbol	s . st_mtime		5268468						
ANR	5268673	Symbol	s . st_nlink		5268468						
ANR	5268674	Symbol	s . st_ctime		5268468						
ANR	5268675	Symbol	s		5268468						
ANR	5268676	Symbol	s . st_gid		5268468						
ANR	5268677	Symbol	s . st_blksize		5268468						
ANR	5268678	Symbol	s . st_ino		5268468						
ANR	5268679	Function	Stream :: code	673:0:13454:13580							
ANR	5268680	FunctionDef	Stream :: code (struct rlimit64 & rl)		5268679	0					
ANR	5268681	CompoundStatement		675:0:13493:13580	5268679	0					
ANR	5268682	ExpressionStatement	STREAM_ASSERT ( code ( rl . rlim_cur ) )	676:1:13496:13528	5268679	0	True				
ANR	5268683	CallExpression	STREAM_ASSERT ( code ( rl . rlim_cur ) )		5268679	0					
ANR	5268684	Callee	STREAM_ASSERT		5268679	0					
ANR	5268685	Identifier	STREAM_ASSERT		5268679	0					
ANR	5268686	ArgumentList	code ( rl . rlim_cur )		5268679	1					
ANR	5268687	Argument	code ( rl . rlim_cur )		5268679	0					
ANR	5268688	CallExpression	code ( rl . rlim_cur )		5268679	0					
ANR	5268689	Callee	code		5268679	0					
ANR	5268690	Identifier	code		5268679	0					
ANR	5268691	ArgumentList	rl . rlim_cur		5268679	1					
ANR	5268692	Argument	rl . rlim_cur		5268679	0					
ANR	5268693	MemberAccess	rl . rlim_cur		5268679	0					
ANR	5268694	Identifier	rl		5268679	0					
ANR	5268695	Identifier	rlim_cur		5268679	1					
ANR	5268696	ExpressionStatement	STREAM_ASSERT ( code ( rl . rlim_max ) )	677:1:13531:13563	5268679	1	True				
ANR	5268697	CallExpression	STREAM_ASSERT ( code ( rl . rlim_max ) )		5268679	0					
ANR	5268698	Callee	STREAM_ASSERT		5268679	0					
ANR	5268699	Identifier	STREAM_ASSERT		5268679	0					
ANR	5268700	ArgumentList	code ( rl . rlim_max )		5268679	1					
ANR	5268701	Argument	code ( rl . rlim_max )		5268679	0					
ANR	5268702	CallExpression	code ( rl . rlim_max )		5268679	0					
ANR	5268703	Callee	code		5268679	0					
ANR	5268704	Identifier	code		5268679	0					
ANR	5268705	ArgumentList	rl . rlim_max		5268679	1					
ANR	5268706	Argument	rl . rlim_max		5268679	0					
ANR	5268707	MemberAccess	rl . rlim_max		5268679	0					
ANR	5268708	Identifier	rl		5268679	0					
ANR	5268709	Identifier	rlim_max		5268679	1					
ANR	5268710	ReturnStatement	return TRUE ;	679:1:13567:13578	5268679	2	True				
ANR	5268711	Identifier	TRUE		5268679	0					
ANR	5268712	ReturnType	int		5268679	1					
ANR	5268713	Identifier	Stream :: code		5268679	2					
ANR	5268714	ParameterList	struct rlimit64 & rl		5268679	3					
ANR	5268715	Parameter	struct rlimit64 & rl	674:13:13472:13490	5268679	0	True				
ANR	5268716	ParameterType	struct rlimit64 &		5268679	0					
ANR	5268717	Identifier	rl		5268679	1					
ANR	5268718	CFGEntryNode	ENTRY		5268679		True				
ANR	5268719	CFGExitNode	EXIT		5268679		True				
ANR	5268720	Symbol	code		5268679						
ANR	5268721	Symbol	rl . rlim_cur		5268679						
ANR	5268722	Symbol	TRUE		5268679						
ANR	5268723	Symbol	rl		5268679						
ANR	5268724	Symbol	rl . rlim_max		5268679						
ANR	5268725	Function	Stream :: code	684:0:13615:14060							
ANR	5268726	FunctionDef	Stream :: code (struct statfs & s)		5268725	0					
ANR	5268727	CompoundStatement		686:0:13651:14060	5268725	0					
ANR	5268728	IfStatement	if ( _coding == stream_decode )		5268725	0					
ANR	5268729	Condition	_coding == stream_decode	687:5:13658:13681	5268725	0	True				
ANR	5268730	EqualityExpression	_coding == stream_decode		5268725	0		==			
ANR	5268731	Identifier	_coding		5268725	0					
ANR	5268732	Identifier	stream_decode		5268725	1					
ANR	5268733	CompoundStatement		3:1:33:33	5268725	1					
ANR	5268734	ExpressionStatement	"memset ( & s , 0 , sizeof ( struct statfs ) )"	690:2:13735:13771	5268725	0	True				
ANR	5268735	CallExpression	"memset ( & s , 0 , sizeof ( struct statfs ) )"		5268725	0					
ANR	5268736	Callee	memset		5268725	0					
ANR	5268737	Identifier	memset		5268725	0					
ANR	5268738	ArgumentList	& s		5268725	1					
ANR	5268739	Argument	& s		5268725	0					
ANR	5268740	UnaryOperationExpression	& s		5268725	0					
ANR	5268741	UnaryOperator	&		5268725	0					
ANR	5268742	Identifier	s		5268725	1					
ANR	5268743	Argument	0		5268725	1					
ANR	5268744	PrimaryExpression	0		5268725	0					
ANR	5268745	Argument	sizeof ( struct statfs )		5268725	2					
ANR	5268746	SizeofExpression	sizeof ( struct statfs )		5268725	0					
ANR	5268747	Sizeof	sizeof		5268725	0					
ANR	5268748	SizeofOperand	struct statfs		5268725	1					
ANR	5268749	ExpressionStatement	STREAM_ASSERT ( code ( s . f_bsize ) )	693:1:13778:13808	5268725	1	True				
ANR	5268750	CallExpression	STREAM_ASSERT ( code ( s . f_bsize ) )		5268725	0					
ANR	5268751	Callee	STREAM_ASSERT		5268725	0					
ANR	5268752	Identifier	STREAM_ASSERT		5268725	0					
ANR	5268753	ArgumentList	code ( s . f_bsize )		5268725	1					
ANR	5268754	Argument	code ( s . f_bsize )		5268725	0					
ANR	5268755	CallExpression	code ( s . f_bsize )		5268725	0					
ANR	5268756	Callee	code		5268725	0					
ANR	5268757	Identifier	code		5268725	0					
ANR	5268758	ArgumentList	s . f_bsize		5268725	1					
ANR	5268759	Argument	s . f_bsize		5268725	0					
ANR	5268760	MemberAccess	s . f_bsize		5268725	0					
ANR	5268761	Identifier	s		5268725	0					
ANR	5268762	Identifier	f_bsize		5268725	1					
ANR	5268763	ExpressionStatement	STREAM_ASSERT ( code ( s . f_blocks ) )	694:1:13811:13842	5268725	2	True				
ANR	5268764	CallExpression	STREAM_ASSERT ( code ( s . f_blocks ) )		5268725	0					
ANR	5268765	Callee	STREAM_ASSERT		5268725	0					
ANR	5268766	Identifier	STREAM_ASSERT		5268725	0					
ANR	5268767	ArgumentList	code ( s . f_blocks )		5268725	1					
ANR	5268768	Argument	code ( s . f_blocks )		5268725	0					
ANR	5268769	CallExpression	code ( s . f_blocks )		5268725	0					
ANR	5268770	Callee	code		5268725	0					
ANR	5268771	Identifier	code		5268725	0					
ANR	5268772	ArgumentList	s . f_blocks		5268725	1					
ANR	5268773	Argument	s . f_blocks		5268725	0					
ANR	5268774	MemberAccess	s . f_blocks		5268725	0					
ANR	5268775	Identifier	s		5268725	0					
ANR	5268776	Identifier	f_blocks		5268725	1					
ANR	5268777	ExpressionStatement	STREAM_ASSERT ( code ( s . f_bfree ) )	695:1:13845:13875	5268725	3	True				
ANR	5268778	CallExpression	STREAM_ASSERT ( code ( s . f_bfree ) )		5268725	0					
ANR	5268779	Callee	STREAM_ASSERT		5268725	0					
ANR	5268780	Identifier	STREAM_ASSERT		5268725	0					
ANR	5268781	ArgumentList	code ( s . f_bfree )		5268725	1					
ANR	5268782	Argument	code ( s . f_bfree )		5268725	0					
ANR	5268783	CallExpression	code ( s . f_bfree )		5268725	0					
ANR	5268784	Callee	code		5268725	0					
ANR	5268785	Identifier	code		5268725	0					
ANR	5268786	ArgumentList	s . f_bfree		5268725	1					
ANR	5268787	Argument	s . f_bfree		5268725	0					
ANR	5268788	MemberAccess	s . f_bfree		5268725	0					
ANR	5268789	Identifier	s		5268725	0					
ANR	5268790	Identifier	f_bfree		5268725	1					
ANR	5268791	ExpressionStatement	STREAM_ASSERT ( code ( s . f_files ) )	696:1:13878:13908	5268725	4	True				
ANR	5268792	CallExpression	STREAM_ASSERT ( code ( s . f_files ) )		5268725	0					
ANR	5268793	Callee	STREAM_ASSERT		5268725	0					
ANR	5268794	Identifier	STREAM_ASSERT		5268725	0					
ANR	5268795	ArgumentList	code ( s . f_files )		5268725	1					
ANR	5268796	Argument	code ( s . f_files )		5268725	0					
ANR	5268797	CallExpression	code ( s . f_files )		5268725	0					
ANR	5268798	Callee	code		5268725	0					
ANR	5268799	Identifier	code		5268725	0					
ANR	5268800	ArgumentList	s . f_files		5268725	1					
ANR	5268801	Argument	s . f_files		5268725	0					
ANR	5268802	MemberAccess	s . f_files		5268725	0					
ANR	5268803	Identifier	s		5268725	0					
ANR	5268804	Identifier	f_files		5268725	1					
ANR	5268805	ExpressionStatement	STREAM_ASSERT ( code ( s . f_ffree ) )	697:1:13911:13941	5268725	5	True				
ANR	5268806	CallExpression	STREAM_ASSERT ( code ( s . f_ffree ) )		5268725	0					
ANR	5268807	Callee	STREAM_ASSERT		5268725	0					
ANR	5268808	Identifier	STREAM_ASSERT		5268725	0					
ANR	5268809	ArgumentList	code ( s . f_ffree )		5268725	1					
ANR	5268810	Argument	code ( s . f_ffree )		5268725	0					
ANR	5268811	CallExpression	code ( s . f_ffree )		5268725	0					
ANR	5268812	Callee	code		5268725	0					
ANR	5268813	Identifier	code		5268725	0					
ANR	5268814	ArgumentList	s . f_ffree		5268725	1					
ANR	5268815	Argument	s . f_ffree		5268725	0					
ANR	5268816	MemberAccess	s . f_ffree		5268725	0					
ANR	5268817	Identifier	s		5268725	0					
ANR	5268818	Identifier	f_ffree		5268725	1					
ANR	5268819	ExpressionStatement	STREAM_ASSERT ( code ( s . f_bfree ) )	700:1:13966:13996	5268725	6	True				
ANR	5268820	CallExpression	STREAM_ASSERT ( code ( s . f_bfree ) )		5268725	0					
ANR	5268821	Callee	STREAM_ASSERT		5268725	0					
ANR	5268822	Identifier	STREAM_ASSERT		5268725	0					
ANR	5268823	ArgumentList	code ( s . f_bfree )		5268725	1					
ANR	5268824	Argument	code ( s . f_bfree )		5268725	0					
ANR	5268825	CallExpression	code ( s . f_bfree )		5268725	0					
ANR	5268826	Callee	code		5268725	0					
ANR	5268827	Identifier	code		5268725	0					
ANR	5268828	ArgumentList	s . f_bfree		5268725	1					
ANR	5268829	Argument	s . f_bfree		5268725	0					
ANR	5268830	MemberAccess	s . f_bfree		5268725	0					
ANR	5268831	Identifier	s		5268725	0					
ANR	5268832	Identifier	f_bfree		5268725	1					
ANR	5268833	ReturnStatement	return TRUE ;	705:1:14047:14058	5268725	7	True				
ANR	5268834	Identifier	TRUE		5268725	0					
ANR	5268835	ReturnType	int		5268725	1					
ANR	5268836	Identifier	Stream :: code		5268725	2					
ANR	5268837	ParameterList	struct statfs & s		5268725	3					
ANR	5268838	Parameter	struct statfs & s	685:13:13633:13648	5268725	0	True				
ANR	5268839	ParameterType	struct statfs &		5268725	0					
ANR	5268840	Identifier	s		5268725	1					
ANR	5268841	CFGEntryNode	ENTRY		5268725		True				
ANR	5268842	CFGExitNode	EXIT		5268725		True				
ANR	5268843	Symbol	stream_decode		5268725						
ANR	5268844	Symbol	_coding		5268725						
ANR	5268845	Symbol	s . f_blocks		5268725						
ANR	5268846	Symbol	s		5268725						
ANR	5268847	Symbol	code		5268725						
ANR	5268848	Symbol	s . f_bsize		5268725						
ANR	5268849	Symbol	& s		5268725						
ANR	5268850	Symbol	TRUE		5268725						
ANR	5268851	Symbol	s . f_ffree		5268725						
ANR	5268852	Symbol	s . f_files		5268725						
ANR	5268853	Symbol	s . f_bfree		5268725						
ANR	5268854	Function	Stream :: code	708:0:14063:14197							
ANR	5268855	FunctionDef	Stream :: code (struct timezone & tz)		5268854	0					
ANR	5268856	CompoundStatement		710:0:14102:14197	5268854	0					
ANR	5268857	ExpressionStatement	STREAM_ASSERT ( code ( tz . tz_minuteswest ) )	711:1:14105:14143	5268854	0	True				
ANR	5268858	CallExpression	STREAM_ASSERT ( code ( tz . tz_minuteswest ) )		5268854	0					
ANR	5268859	Callee	STREAM_ASSERT		5268854	0					
ANR	5268860	Identifier	STREAM_ASSERT		5268854	0					
ANR	5268861	ArgumentList	code ( tz . tz_minuteswest )		5268854	1					
ANR	5268862	Argument	code ( tz . tz_minuteswest )		5268854	0					
ANR	5268863	CallExpression	code ( tz . tz_minuteswest )		5268854	0					
ANR	5268864	Callee	code		5268854	0					
ANR	5268865	Identifier	code		5268854	0					
ANR	5268866	ArgumentList	tz . tz_minuteswest		5268854	1					
ANR	5268867	Argument	tz . tz_minuteswest		5268854	0					
ANR	5268868	MemberAccess	tz . tz_minuteswest		5268854	0					
ANR	5268869	Identifier	tz		5268854	0					
ANR	5268870	Identifier	tz_minuteswest		5268854	1					
ANR	5268871	ExpressionStatement	STREAM_ASSERT ( code ( tz . tz_dsttime ) )	712:1:14146:14180	5268854	1	True				
ANR	5268872	CallExpression	STREAM_ASSERT ( code ( tz . tz_dsttime ) )		5268854	0					
ANR	5268873	Callee	STREAM_ASSERT		5268854	0					
ANR	5268874	Identifier	STREAM_ASSERT		5268854	0					
ANR	5268875	ArgumentList	code ( tz . tz_dsttime )		5268854	1					
ANR	5268876	Argument	code ( tz . tz_dsttime )		5268854	0					
ANR	5268877	CallExpression	code ( tz . tz_dsttime )		5268854	0					
ANR	5268878	Callee	code		5268854	0					
ANR	5268879	Identifier	code		5268854	0					
ANR	5268880	ArgumentList	tz . tz_dsttime		5268854	1					
ANR	5268881	Argument	tz . tz_dsttime		5268854	0					
ANR	5268882	MemberAccess	tz . tz_dsttime		5268854	0					
ANR	5268883	Identifier	tz		5268854	0					
ANR	5268884	Identifier	tz_dsttime		5268854	1					
ANR	5268885	ReturnStatement	return TRUE ;	714:1:14184:14195	5268854	2	True				
ANR	5268886	Identifier	TRUE		5268854	0					
ANR	5268887	ReturnType	int		5268854	1					
ANR	5268888	Identifier	Stream :: code		5268854	2					
ANR	5268889	ParameterList	struct timezone & tz		5268854	3					
ANR	5268890	Parameter	struct timezone & tz	709:13:14081:14099	5268854	0	True				
ANR	5268891	ParameterType	struct timezone &		5268854	0					
ANR	5268892	Identifier	tz		5268854	1					
ANR	5268893	CFGEntryNode	ENTRY		5268854		True				
ANR	5268894	CFGExitNode	EXIT		5268854		True				
ANR	5268895	Symbol	code		5268854						
ANR	5268896	Symbol	tz		5268854						
ANR	5268897	Symbol	TRUE		5268854						
ANR	5268898	Symbol	tz . tz_minuteswest		5268854						
ANR	5268899	Symbol	tz . tz_dsttime		5268854						
ANR	5268900	Function	Stream :: code	717:0:14200:14322							
ANR	5268901	FunctionDef	Stream :: code (struct timeval & tv)		5268900	0					
ANR	5268902	CompoundStatement		719:0:14238:14322	5268900	0					
ANR	5268903	ExpressionStatement	STREAM_ASSERT ( code ( tv . tv_sec ) )	720:1:14241:14271	5268900	0	True				
ANR	5268904	CallExpression	STREAM_ASSERT ( code ( tv . tv_sec ) )		5268900	0					
ANR	5268905	Callee	STREAM_ASSERT		5268900	0					
ANR	5268906	Identifier	STREAM_ASSERT		5268900	0					
ANR	5268907	ArgumentList	code ( tv . tv_sec )		5268900	1					
ANR	5268908	Argument	code ( tv . tv_sec )		5268900	0					
ANR	5268909	CallExpression	code ( tv . tv_sec )		5268900	0					
ANR	5268910	Callee	code		5268900	0					
ANR	5268911	Identifier	code		5268900	0					
ANR	5268912	ArgumentList	tv . tv_sec		5268900	1					
ANR	5268913	Argument	tv . tv_sec		5268900	0					
ANR	5268914	MemberAccess	tv . tv_sec		5268900	0					
ANR	5268915	Identifier	tv		5268900	0					
ANR	5268916	Identifier	tv_sec		5268900	1					
ANR	5268917	ExpressionStatement	STREAM_ASSERT ( code ( tv . tv_usec ) )	721:1:14274:14305	5268900	1	True				
ANR	5268918	CallExpression	STREAM_ASSERT ( code ( tv . tv_usec ) )		5268900	0					
ANR	5268919	Callee	STREAM_ASSERT		5268900	0					
ANR	5268920	Identifier	STREAM_ASSERT		5268900	0					
ANR	5268921	ArgumentList	code ( tv . tv_usec )		5268900	1					
ANR	5268922	Argument	code ( tv . tv_usec )		5268900	0					
ANR	5268923	CallExpression	code ( tv . tv_usec )		5268900	0					
ANR	5268924	Callee	code		5268900	0					
ANR	5268925	Identifier	code		5268900	0					
ANR	5268926	ArgumentList	tv . tv_usec		5268900	1					
ANR	5268927	Argument	tv . tv_usec		5268900	0					
ANR	5268928	MemberAccess	tv . tv_usec		5268900	0					
ANR	5268929	Identifier	tv		5268900	0					
ANR	5268930	Identifier	tv_usec		5268900	1					
ANR	5268931	ReturnStatement	return TRUE ;	723:1:14309:14320	5268900	2	True				
ANR	5268932	Identifier	TRUE		5268900	0					
ANR	5268933	ReturnType	int		5268900	1					
ANR	5268934	Identifier	Stream :: code		5268900	2					
ANR	5268935	ParameterList	struct timeval & tv		5268900	3					
ANR	5268936	Parameter	struct timeval & tv	718:13:14218:14235	5268900	0	True				
ANR	5268937	ParameterType	struct timeval &		5268900	0					
ANR	5268938	Identifier	tv		5268900	1					
ANR	5268939	CFGEntryNode	ENTRY		5268900		True				
ANR	5268940	CFGExitNode	EXIT		5268900		True				
ANR	5268941	Symbol	tv . tv_sec		5268900						
ANR	5268942	Symbol	tv . tv_usec		5268900						
ANR	5268943	Symbol	tv		5268900						
ANR	5268944	Symbol	code		5268900						
ANR	5268945	Symbol	TRUE		5268900						
ANR	5268946	Function	Stream :: code	726:0:14326:14447							
ANR	5268947	FunctionDef	Stream :: code (struct utimbuf & ut)		5268946	0					
ANR	5268948	CompoundStatement		728:0:14363:14447	5268946	0					
ANR	5268949	ExpressionStatement	STREAM_ASSERT ( code ( ut . actime ) )	729:1:14366:14396	5268946	0	True				
ANR	5268950	CallExpression	STREAM_ASSERT ( code ( ut . actime ) )		5268946	0					
ANR	5268951	Callee	STREAM_ASSERT		5268946	0					
ANR	5268952	Identifier	STREAM_ASSERT		5268946	0					
ANR	5268953	ArgumentList	code ( ut . actime )		5268946	1					
ANR	5268954	Argument	code ( ut . actime )		5268946	0					
ANR	5268955	CallExpression	code ( ut . actime )		5268946	0					
ANR	5268956	Callee	code		5268946	0					
ANR	5268957	Identifier	code		5268946	0					
ANR	5268958	ArgumentList	ut . actime		5268946	1					
ANR	5268959	Argument	ut . actime		5268946	0					
ANR	5268960	MemberAccess	ut . actime		5268946	0					
ANR	5268961	Identifier	ut		5268946	0					
ANR	5268962	Identifier	actime		5268946	1					
ANR	5268963	ExpressionStatement	STREAM_ASSERT ( code ( ut . modtime ) )	730:1:14399:14430	5268946	1	True				
ANR	5268964	CallExpression	STREAM_ASSERT ( code ( ut . modtime ) )		5268946	0					
ANR	5268965	Callee	STREAM_ASSERT		5268946	0					
ANR	5268966	Identifier	STREAM_ASSERT		5268946	0					
ANR	5268967	ArgumentList	code ( ut . modtime )		5268946	1					
ANR	5268968	Argument	code ( ut . modtime )		5268946	0					
ANR	5268969	CallExpression	code ( ut . modtime )		5268946	0					
ANR	5268970	Callee	code		5268946	0					
ANR	5268971	Identifier	code		5268946	0					
ANR	5268972	ArgumentList	ut . modtime		5268946	1					
ANR	5268973	Argument	ut . modtime		5268946	0					
ANR	5268974	MemberAccess	ut . modtime		5268946	0					
ANR	5268975	Identifier	ut		5268946	0					
ANR	5268976	Identifier	modtime		5268946	1					
ANR	5268977	ReturnStatement	return TRUE ;	732:1:14434:14445	5268946	2	True				
ANR	5268978	Identifier	TRUE		5268946	0					
ANR	5268979	ReturnType	int		5268946	1					
ANR	5268980	Identifier	Stream :: code		5268946	2					
ANR	5268981	ParameterList	struct utimbuf & ut		5268946	3					
ANR	5268982	Parameter	struct utimbuf & ut	727:13:14343:14360	5268946	0	True				
ANR	5268983	ParameterType	struct utimbuf &		5268946	0					
ANR	5268984	Identifier	ut		5268946	1					
ANR	5268985	CFGEntryNode	ENTRY		5268946		True				
ANR	5268986	CFGExitNode	EXIT		5268946		True				
ANR	5268987	Symbol	code		5268946						
ANR	5268988	Symbol	ut . actime		5268946						
ANR	5268989	Symbol	ut . modtime		5268946						
ANR	5268990	Symbol	TRUE		5268946						
ANR	5268991	Symbol	ut		5268946						
ANR	5268992	Function	Stream :: code	735:0:14450:15570							
ANR	5268993	FunctionDef	Stream :: code (struct rlimit & rl)		5268992	0					
ANR	5268994	CompoundStatement		737:0:14487:15570	5268992	0					
ANR	5268995	ExpressionStatement	STREAM_ASSERT ( code ( rl . rlim_cur ) )	757:1:15486:15518	5268992	0	True				
ANR	5268996	CallExpression	STREAM_ASSERT ( code ( rl . rlim_cur ) )		5268992	0					
ANR	5268997	Callee	STREAM_ASSERT		5268992	0					
ANR	5268998	Identifier	STREAM_ASSERT		5268992	0					
ANR	5268999	ArgumentList	code ( rl . rlim_cur )		5268992	1					
ANR	5269000	Argument	code ( rl . rlim_cur )		5268992	0					
ANR	5269001	CallExpression	code ( rl . rlim_cur )		5268992	0					
ANR	5269002	Callee	code		5268992	0					
ANR	5269003	Identifier	code		5268992	0					
ANR	5269004	ArgumentList	rl . rlim_cur		5268992	1					
ANR	5269005	Argument	rl . rlim_cur		5268992	0					
ANR	5269006	MemberAccess	rl . rlim_cur		5268992	0					
ANR	5269007	Identifier	rl		5268992	0					
ANR	5269008	Identifier	rlim_cur		5268992	1					
ANR	5269009	ExpressionStatement	STREAM_ASSERT ( code ( rl . rlim_max ) )	758:1:15521:15553	5268992	1	True				
ANR	5269010	CallExpression	STREAM_ASSERT ( code ( rl . rlim_max ) )		5268992	0					
ANR	5269011	Callee	STREAM_ASSERT		5268992	0					
ANR	5269012	Identifier	STREAM_ASSERT		5268992	0					
ANR	5269013	ArgumentList	code ( rl . rlim_max )		5268992	1					
ANR	5269014	Argument	code ( rl . rlim_max )		5268992	0					
ANR	5269015	CallExpression	code ( rl . rlim_max )		5268992	0					
ANR	5269016	Callee	code		5268992	0					
ANR	5269017	Identifier	code		5268992	0					
ANR	5269018	ArgumentList	rl . rlim_max		5268992	1					
ANR	5269019	Argument	rl . rlim_max		5268992	0					
ANR	5269020	MemberAccess	rl . rlim_max		5268992	0					
ANR	5269021	Identifier	rl		5268992	0					
ANR	5269022	Identifier	rlim_max		5268992	1					
ANR	5269023	ReturnStatement	return TRUE ;	760:1:15557:15568	5268992	2	True				
ANR	5269024	Identifier	TRUE		5268992	0					
ANR	5269025	ReturnType	int		5268992	1					
ANR	5269026	Identifier	Stream :: code		5268992	2					
ANR	5269027	ParameterList	struct rlimit & rl		5268992	3					
ANR	5269028	Parameter	struct rlimit & rl	736:13:14468:14484	5268992	0	True				
ANR	5269029	ParameterType	struct rlimit &		5268992	0					
ANR	5269030	Identifier	rl		5268992	1					
ANR	5269031	CFGEntryNode	ENTRY		5268992		True				
ANR	5269032	CFGExitNode	EXIT		5268992		True				
ANR	5269033	Symbol	code		5268992						
ANR	5269034	Symbol	rl . rlim_cur		5268992						
ANR	5269035	Symbol	TRUE		5268992						
ANR	5269036	Symbol	rl		5268992						
ANR	5269037	Symbol	rl . rlim_max		5268992						
ANR	5269038	Function	Stream :: code_array	768:0:15806:16200							
ANR	5269039	FunctionDef	"Stream :: code_array (gid_t * & array , int & len)"		5269038	0					
ANR	5269040	CompoundStatement		770:0:15854:16200	5269038	0					
ANR	5269041	IdentifierDeclStatement	int i ;	771:1:15857:15862	5269038	0	True				
ANR	5269042	IdentifierDecl	i		5269038	0					
ANR	5269043	IdentifierDeclType	int		5269038	0					
ANR	5269044	Identifier	i		5269038	1					
ANR	5269045	IfStatement	if ( _coding == stream_encode )		5269038	1					
ANR	5269046	Condition	_coding == stream_encode	773:5:15870:15893	5269038	0	True				
ANR	5269047	EqualityExpression	_coding == stream_encode		5269038	0		==			
ANR	5269048	Identifier	_coding		5269038	0					
ANR	5269049	Identifier	stream_encode		5269038	1					
ANR	5269050	CompoundStatement		5:1:42:42	5269038	1					
ANR	5269051	IfStatement	if ( len > 0 && array == NULL )		5269038	0					
ANR	5269052	Condition	len > 0 && array == NULL	775:6:15905:15928	5269038	0	True				
ANR	5269053	AndExpression	len > 0 && array == NULL		5269038	0		&&			
ANR	5269054	RelationalExpression	len > 0		5269038	0		>			
ANR	5269055	Identifier	len		5269038	0					
ANR	5269056	PrimaryExpression	0		5269038	1					
ANR	5269057	EqualityExpression	array == NULL		5269038	1		==			
ANR	5269058	Identifier	array		5269038	0					
ANR	5269059	Identifier	NULL		5269038	1					
ANR	5269060	CompoundStatement		7:2:78:78	5269038	1					
ANR	5269061	ReturnStatement	return FALSE ;	777:3:15938:15950	5269038	0	True				
ANR	5269062	Identifier	FALSE		5269038	0					
ANR	5269063	ExpressionStatement	STREAM_ASSERT ( code ( len ) )	781:1:15961:15985	5269038	2	True				
ANR	5269064	CallExpression	STREAM_ASSERT ( code ( len ) )		5269038	0					
ANR	5269065	Callee	STREAM_ASSERT		5269038	0					
ANR	5269066	Identifier	STREAM_ASSERT		5269038	0					
ANR	5269067	ArgumentList	code ( len )		5269038	1					
ANR	5269068	Argument	code ( len )		5269038	0					
ANR	5269069	CallExpression	code ( len )		5269038	0					
ANR	5269070	Callee	code		5269038	0					
ANR	5269071	Identifier	code		5269038	0					
ANR	5269072	ArgumentList	len		5269038	1					
ANR	5269073	Argument	len		5269038	0					
ANR	5269074	Identifier	len		5269038	0					
ANR	5269075	IfStatement	if ( len > 0 )		5269038	3					
ANR	5269076	Condition	len > 0	783:5:15993:15999	5269038	0	True				
ANR	5269077	RelationalExpression	len > 0		5269038	0		>			
ANR	5269078	Identifier	len		5269038	0					
ANR	5269079	PrimaryExpression	0		5269038	1					
ANR	5269080	CompoundStatement		15:1:148:148	5269038	1					
ANR	5269081	IfStatement	if ( ! array )		5269038	0					
ANR	5269082	Condition	! array	785:6:16011:16016	5269038	0	True				
ANR	5269083	UnaryOperationExpression	! array		5269038	0					
ANR	5269084	UnaryOperator	!		5269038	0					
ANR	5269085	Identifier	array		5269038	1					
ANR	5269086	CompoundStatement		17:2:166:166	5269038	1					
ANR	5269087	ExpressionStatement	array = ( gid_t * ) malloc ( sizeof ( gid_t ) * len )	787:3:16026:16069	5269038	0	True				
ANR	5269088	AssignmentExpression	array = ( gid_t * ) malloc ( sizeof ( gid_t ) * len )		5269038	0		=			
ANR	5269089	Identifier	array		5269038	0					
ANR	5269090	CastExpression	( gid_t * ) malloc ( sizeof ( gid_t ) * len )		5269038	1					
ANR	5269091	CastTarget	gid_t *		5269038	0					
ANR	5269092	CallExpression	malloc ( sizeof ( gid_t ) * len )		5269038	1					
ANR	5269093	Callee	malloc		5269038	0					
ANR	5269094	Identifier	malloc		5269038	0					
ANR	5269095	ArgumentList	sizeof ( gid_t ) * len		5269038	1					
ANR	5269096	Argument	sizeof ( gid_t ) * len		5269038	0					
ANR	5269097	MultiplicativeExpression	sizeof ( gid_t ) * len		5269038	0		*			
ANR	5269098	SizeofExpression	sizeof ( gid_t )		5269038	0					
ANR	5269099	Sizeof	sizeof		5269038	0					
ANR	5269100	SizeofOperand	gid_t		5269038	1					
ANR	5269101	Identifier	len		5269038	1					
ANR	5269102	ForStatement	for ( i = 0 ; i < len ; i ++ )		5269038	1					
ANR	5269103	ForInit	i = 0 ;	791:7:16119:16124	5269038	0	True				
ANR	5269104	AssignmentExpression	i = 0		5269038	0		=			
ANR	5269105	Identifier	i		5269038	0					
ANR	5269106	PrimaryExpression	0		5269038	1					
ANR	5269107	Condition	i < len	791:14:16126:16132	5269038	1	True				
ANR	5269108	RelationalExpression	i < len		5269038	0		<			
ANR	5269109	Identifier	i		5269038	0					
ANR	5269110	Identifier	len		5269038	1					
ANR	5269111	PostIncDecOperationExpression	i ++	791:23:16135:16137	5269038	2	True				
ANR	5269112	Identifier	i		5269038	0					
ANR	5269113	IncDec	++		5269038	1					
ANR	5269114	CompoundStatement		23:2:287:287	5269038	3					
ANR	5269115	ExpressionStatement	STREAM_ASSERT ( code ( array [ i ] ) )	793:3:16147:16176	5269038	0	True				
ANR	5269116	CallExpression	STREAM_ASSERT ( code ( array [ i ] ) )		5269038	0					
ANR	5269117	Callee	STREAM_ASSERT		5269038	0					
ANR	5269118	Identifier	STREAM_ASSERT		5269038	0					
ANR	5269119	ArgumentList	code ( array [ i ] )		5269038	1					
ANR	5269120	Argument	code ( array [ i ] )		5269038	0					
ANR	5269121	CallExpression	code ( array [ i ] )		5269038	0					
ANR	5269122	Callee	code		5269038	0					
ANR	5269123	Identifier	code		5269038	0					
ANR	5269124	ArgumentList	array [ i ]		5269038	1					
ANR	5269125	Argument	array [ i ]		5269038	0					
ANR	5269126	ArrayIndexing	array [ i ]		5269038	0					
ANR	5269127	Identifier	array		5269038	0					
ANR	5269128	Identifier	i		5269038	1					
ANR	5269129	ReturnStatement	return TRUE ;	797:1:16187:16198	5269038	4	True				
ANR	5269130	Identifier	TRUE		5269038	0					
ANR	5269131	ReturnType	int		5269038	1					
ANR	5269132	Identifier	Stream :: code_array		5269038	2					
ANR	5269133	ParameterList	"gid_t * & array , int & len"		5269038	3					
ANR	5269134	Parameter	gid_t * & array	769:19:15829:15841	5269038	0	True				
ANR	5269135	ParameterType	gid_t * &		5269038	0					
ANR	5269136	Identifier	array		5269038	1					
ANR	5269137	Parameter	int & len	769:34:15844:15851	5269038	1	True				
ANR	5269138	ParameterType	int &		5269038	0					
ANR	5269139	Identifier	len		5269038	1					
ANR	5269140	CFGEntryNode	ENTRY		5269038		True				
ANR	5269141	CFGExitNode	EXIT		5269038		True				
ANR	5269142	Symbol	malloc		5269038						
ANR	5269143	Symbol	_coding		5269038						
ANR	5269144	Symbol	NULL		5269038						
ANR	5269145	Symbol	code		5269038						
ANR	5269146	Symbol	* i		5269038						
ANR	5269147	Symbol	len		5269038						
ANR	5269148	Symbol	array		5269038						
ANR	5269149	Symbol	stream_encode		5269038						
ANR	5269150	Symbol	i		5269038						
ANR	5269151	Symbol	TRUE		5269038						
ANR	5269152	Symbol	FALSE		5269038						
ANR	5269153	Symbol	* array		5269038						
ANR	5269154	Function	Stream :: code	803:0:16231:16722							
ANR	5269155	FunctionDef	Stream :: code (condor_mode_t & m)		5269154	0					
ANR	5269156	CompoundStatement		805:0:16266:16722	5269154	0					
ANR	5269157	IdentifierDeclStatement	"mode_t mask = 0 , y = 0 ;"	806:1:16269:16291	5269154	0	True				
ANR	5269158	IdentifierDecl	mask = 0		5269154	0					
ANR	5269159	IdentifierDeclType	mode_t		5269154	0					
ANR	5269160	Identifier	mask		5269154	1					
ANR	5269161	AssignmentExpression	mask = 0		5269154	2		=			
ANR	5269162	Identifier	mask		5269154	0					
ANR	5269163	PrimaryExpression	0		5269154	1					
ANR	5269164	IdentifierDecl	y = 0		5269154	1					
ANR	5269165	IdentifierDeclType	mode_t		5269154	0					
ANR	5269166	Identifier	y		5269154	1					
ANR	5269167	AssignmentExpression	y = 0		5269154	2		=			
ANR	5269168	Identifier	y		5269154	0					
ANR	5269169	PrimaryExpression	0		5269154	1					
ANR	5269170	ExpressionStatement	mask |= ( S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH )	808:1:16314:16405	5269154	1	True				
ANR	5269171	AssignmentExpression	mask |= ( S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH )		5269154	0		|=			
ANR	5269172	Identifier	mask		5269154	0					
ANR	5269173	InclusiveOrExpression	S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		5269154	1		|			
ANR	5269174	Identifier	S_IRUSR		5269154	0					
ANR	5269175	InclusiveOrExpression	S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		5269154	1		|			
ANR	5269176	Identifier	S_IWUSR		5269154	0					
ANR	5269177	InclusiveOrExpression	S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		5269154	1		|			
ANR	5269178	Identifier	S_IXUSR		5269154	0					
ANR	5269179	InclusiveOrExpression	S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		5269154	1		|			
ANR	5269180	Identifier	S_IRGRP		5269154	0					
ANR	5269181	InclusiveOrExpression	S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		5269154	1		|			
ANR	5269182	Identifier	S_IWGRP		5269154	0					
ANR	5269183	InclusiveOrExpression	S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		5269154	1		|			
ANR	5269184	Identifier	S_IXGRP		5269154	0					
ANR	5269185	InclusiveOrExpression	S_IROTH | S_IWOTH | S_IXOTH		5269154	1		|			
ANR	5269186	Identifier	S_IROTH		5269154	0					
ANR	5269187	InclusiveOrExpression	S_IWOTH | S_IXOTH		5269154	1		|			
ANR	5269188	Identifier	S_IWOTH		5269154	0					
ANR	5269189	Identifier	S_IXOTH		5269154	1					
ANR	5269190	IfStatement	if ( _coding == stream_encode )		5269154	2					
ANR	5269191	Condition	_coding == stream_encode	812:8:16416:16439	5269154	0	True				
ANR	5269192	EqualityExpression	_coding == stream_encode		5269154	0		==			
ANR	5269193	Identifier	_coding		5269154	0					
ANR	5269194	Identifier	stream_encode		5269154	1					
ANR	5269195	CompoundStatement		8:35:176:176	5269154	1					
ANR	5269196	ExpressionStatement	y = m & mask	813:2:16447:16459	5269154	0	True				
ANR	5269197	AssignmentExpression	y = m & mask		5269154	0		=			
ANR	5269198	Identifier	y		5269154	0					
ANR	5269199	BitAndExpression	m & mask		5269154	1		&			
ANR	5269200	Identifier	m		5269154	0					
ANR	5269201	Identifier	mask		5269154	1					
ANR	5269202	ExpressionStatement	STREAM_ASSERT ( code ( y ) )	821:2:16546:16568	5269154	3	True				
ANR	5269203	CallExpression	STREAM_ASSERT ( code ( y ) )		5269154	0					
ANR	5269204	Callee	STREAM_ASSERT		5269154	0					
ANR	5269205	Identifier	STREAM_ASSERT		5269154	0					
ANR	5269206	ArgumentList	code ( y )		5269154	1					
ANR	5269207	Argument	code ( y )		5269154	0					
ANR	5269208	CallExpression	code ( y )		5269154	0					
ANR	5269209	Callee	code		5269154	0					
ANR	5269210	Identifier	code		5269154	0					
ANR	5269211	ArgumentList	y		5269154	1					
ANR	5269212	Argument	y		5269154	0					
ANR	5269213	Identifier	y		5269154	0					
ANR	5269214	IfStatement	if ( _coding == stream_decode )		5269154	4					
ANR	5269215	Condition	_coding == stream_decode	823:8:16579:16602	5269154	0	True				
ANR	5269216	EqualityExpression	_coding == stream_decode		5269154	0		==			
ANR	5269217	Identifier	_coding		5269154	0					
ANR	5269218	Identifier	stream_decode		5269154	1					
ANR	5269219	CompoundStatement		19:35:339:339	5269154	1					
ANR	5269220	ExpressionStatement	m = ( condor_mode_t ) ( y & mask )	825:2:16630:16659	5269154	0	True				
ANR	5269221	AssignmentExpression	m = ( condor_mode_t ) ( y & mask )		5269154	0		=			
ANR	5269222	Identifier	m		5269154	0					
ANR	5269223	CastExpression	( condor_mode_t ) ( y & mask )		5269154	1					
ANR	5269224	CastTarget	condor_mode_t		5269154	0					
ANR	5269225	BitAndExpression	y & mask		5269154	1		&			
ANR	5269226	Identifier	y		5269154	0					
ANR	5269227	Identifier	mask		5269154	1					
ANR	5269228	ReturnStatement	return TRUE ;	831:1:16709:16720	5269154	5	True				
ANR	5269229	Identifier	TRUE		5269154	0					
ANR	5269230	ReturnType	int		5269154	1					
ANR	5269231	Identifier	Stream :: code		5269154	2					
ANR	5269232	ParameterList	condor_mode_t & m		5269154	3					
ANR	5269233	Parameter	condor_mode_t & m	804:13:16248:16263	5269154	0	True				
ANR	5269234	ParameterType	condor_mode_t &		5269154	0					
ANR	5269235	Identifier	m		5269154	1					
ANR	5269236	CFGEntryNode	ENTRY		5269154		True				
ANR	5269237	CFGExitNode	EXIT		5269154		True				
ANR	5269238	Symbol	stream_decode		5269154						
ANR	5269239	Symbol	S_IROTH		5269154						
ANR	5269240	Symbol	_coding		5269154						
ANR	5269241	Symbol	code		5269154						
ANR	5269242	Symbol	S_IWGRP		5269154						
ANR	5269243	Symbol	S_IXGRP		5269154						
ANR	5269244	Symbol	S_IWOTH		5269154						
ANR	5269245	Symbol	S_IXOTH		5269154						
ANR	5269246	Symbol	TRUE		5269154						
ANR	5269247	Symbol	m		5269154						
ANR	5269248	Symbol	S_IRUSR		5269154						
ANR	5269249	Symbol	S_IWUSR		5269154						
ANR	5269250	Symbol	stream_encode		5269154						
ANR	5269251	Symbol	S_IXUSR		5269154						
ANR	5269252	Symbol	y		5269154						
ANR	5269253	Symbol	S_IRGRP		5269154						
ANR	5269254	Symbol	mask		5269154						
ANR	5269255	Function	Stream :: put	840:0:16750:16996							
ANR	5269256	FunctionDef	Stream :: put (char c)		5269255	0					
ANR	5269257	CompoundStatement		842:0:16776:16996	5269255	0					
ANR	5269258	ExpressionStatement	getcount = 0	843:2:16780:16791	5269255	0	True				
ANR	5269259	AssignmentExpression	getcount = 0		5269255	0		=			
ANR	5269260	Identifier	getcount		5269255	0					
ANR	5269261	PrimaryExpression	0		5269255	1					
ANR	5269262	ExpressionStatement	"NETWORK_TRACE ( ""put char "" << c << "" c("" << ++ putcount << "") "" )"	844:2:16795:16857	5269255	1	True				
ANR	5269263	CallExpression	"NETWORK_TRACE ( ""put char "" << c << "" c("" << ++ putcount << "") "" )"		5269255	0					
ANR	5269264	Callee	NETWORK_TRACE		5269255	0					
ANR	5269265	Identifier	NETWORK_TRACE		5269255	0					
ANR	5269266	ArgumentList	"""put char "" << c << "" c("" << ++ putcount << "") """		5269255	1					
ANR	5269267	Argument	"""put char "" << c << "" c("" << ++ putcount << "") """		5269255	0					
ANR	5269268	ShiftExpression	"""put char "" << c << "" c("" << ++ putcount << "") """		5269255	0		<<			
ANR	5269269	PrimaryExpression	"""put char """		5269255	0					
ANR	5269270	ShiftExpression	"c << "" c("" << ++ putcount << "") """		5269255	1		<<			
ANR	5269271	Identifier	c		5269255	0					
ANR	5269272	ShiftExpression	""" c("" << ++ putcount << "") """		5269255	1		<<			
ANR	5269273	PrimaryExpression	""" c("""		5269255	0					
ANR	5269274	ShiftExpression	"++ putcount << "") """		5269255	1		<<			
ANR	5269275	UnaryExpression	++ putcount		5269255	0					
ANR	5269276	IncDec	++		5269255	0					
ANR	5269277	Identifier	putcount		5269255	1					
ANR	5269278	PrimaryExpression	""") """		5269255	1					
ANR	5269279	SwitchStatement	switch ( _code )		5269255	2					
ANR	5269280	Condition	_code	846:8:16868:16872	5269255	0	True				
ANR	5269281	Identifier	_code		5269255	0					
ANR	5269282	CompoundStatement		5:14:97:97	5269255	1					
ANR	5269283	Label	case internal :	847:2:16878:16891	5269255	0	True				
ANR	5269284	Identifier	internal		5269255	0					
ANR	5269285	Label	case external :	848:2:16895:16908	5269255	1	True				
ANR	5269286	Identifier	external		5269255	0					
ANR	5269287	Label	case ascii :	849:2:16912:16922	5269255	2	True				
ANR	5269288	Identifier	ascii		5269255	0					
ANR	5269289	IfStatement	"if ( put_bytes ( & c , 1 ) != 1 )"		5269255	3					
ANR	5269290	Condition	"put_bytes ( & c , 1 ) != 1"	850:7:16931:16951	5269255	0	True				
ANR	5269291	EqualityExpression	"put_bytes ( & c , 1 ) != 1"		5269255	0		!=			
ANR	5269292	CallExpression	"put_bytes ( & c , 1 )"		5269255	0					
ANR	5269293	Callee	put_bytes		5269255	0					
ANR	5269294	Identifier	put_bytes		5269255	0					
ANR	5269295	ArgumentList	& c		5269255	1					
ANR	5269296	Argument	& c		5269255	0					
ANR	5269297	UnaryOperationExpression	& c		5269255	0					
ANR	5269298	UnaryOperator	&		5269255	0					
ANR	5269299	Identifier	c		5269255	1					
ANR	5269300	Argument	1		5269255	1					
ANR	5269301	PrimaryExpression	1		5269255	0					
ANR	5269302	PrimaryExpression	1		5269255	1					
ANR	5269303	ReturnStatement	return FALSE ;	850:30:16954:16966	5269255	1	True				
ANR	5269304	Identifier	FALSE		5269255	0					
ANR	5269305	BreakStatement	break ;	851:3:16971:16976	5269255	4	True				
ANR	5269306	ReturnStatement	return TRUE ;	854:1:16983:16994	5269255	3	True				
ANR	5269307	Identifier	TRUE		5269255	0					
ANR	5269308	ReturnType	int		5269255	1					
ANR	5269309	Identifier	Stream :: put		5269255	2					
ANR	5269310	ParameterList	char c		5269255	3					
ANR	5269311	Parameter	char c	841:13:16768:16773	5269255	0	True				
ANR	5269312	ParameterType	char		5269255	0					
ANR	5269313	Identifier	c		5269255	1					
ANR	5269314	CFGEntryNode	ENTRY		5269255		True				
ANR	5269315	CFGExitNode	EXIT		5269255		True				
ANR	5269316	Symbol	c		5269255						
ANR	5269317	Symbol	_code		5269255						
ANR	5269318	Symbol	putcount		5269255						
ANR	5269319	Symbol	& c		5269255						
ANR	5269320	Symbol	TRUE		5269255						
ANR	5269321	Symbol	FALSE		5269255						
ANR	5269322	Symbol	put_bytes		5269255						
ANR	5269323	Symbol	getcount		5269255						
ANR	5269324	Function	Stream :: put	859:0:17001:17256							
ANR	5269325	FunctionDef	Stream :: put (unsigned char c)		5269324	0					
ANR	5269326	CompoundStatement		861:0:17036:17256	5269324	0					
ANR	5269327	ExpressionStatement	getcount = 0	862:2:17040:17051	5269324	0	True				
ANR	5269328	AssignmentExpression	getcount = 0		5269324	0		=			
ANR	5269329	Identifier	getcount		5269324	0					
ANR	5269330	PrimaryExpression	0		5269324	1					
ANR	5269331	ExpressionStatement	"NETWORK_TRACE ( ""put char "" << c << "" c("" << ++ putcount << "") "" )"	863:2:17055:17117	5269324	1	True				
ANR	5269332	CallExpression	"NETWORK_TRACE ( ""put char "" << c << "" c("" << ++ putcount << "") "" )"		5269324	0					
ANR	5269333	Callee	NETWORK_TRACE		5269324	0					
ANR	5269334	Identifier	NETWORK_TRACE		5269324	0					
ANR	5269335	ArgumentList	"""put char "" << c << "" c("" << ++ putcount << "") """		5269324	1					
ANR	5269336	Argument	"""put char "" << c << "" c("" << ++ putcount << "") """		5269324	0					
ANR	5269337	ShiftExpression	"""put char "" << c << "" c("" << ++ putcount << "") """		5269324	0		<<			
ANR	5269338	PrimaryExpression	"""put char """		5269324	0					
ANR	5269339	ShiftExpression	"c << "" c("" << ++ putcount << "") """		5269324	1		<<			
ANR	5269340	Identifier	c		5269324	0					
ANR	5269341	ShiftExpression	""" c("" << ++ putcount << "") """		5269324	1		<<			
ANR	5269342	PrimaryExpression	""" c("""		5269324	0					
ANR	5269343	ShiftExpression	"++ putcount << "") """		5269324	1		<<			
ANR	5269344	UnaryExpression	++ putcount		5269324	0					
ANR	5269345	IncDec	++		5269324	0					
ANR	5269346	Identifier	putcount		5269324	1					
ANR	5269347	PrimaryExpression	""") """		5269324	1					
ANR	5269348	SwitchStatement	switch ( _code )		5269324	2					
ANR	5269349	Condition	_code	865:8:17128:17132	5269324	0	True				
ANR	5269350	Identifier	_code		5269324	0					
ANR	5269351	CompoundStatement		5:14:97:97	5269324	1					
ANR	5269352	Label	case internal :	866:2:17138:17151	5269324	0	True				
ANR	5269353	Identifier	internal		5269324	0					
ANR	5269354	Label	case external :	867:2:17155:17168	5269324	1	True				
ANR	5269355	Identifier	external		5269324	0					
ANR	5269356	Label	case ascii :	868:2:17172:17182	5269324	2	True				
ANR	5269357	Identifier	ascii		5269324	0					
ANR	5269358	IfStatement	"if ( put_bytes ( & c , 1 ) != 1 )"		5269324	3					
ANR	5269359	Condition	"put_bytes ( & c , 1 ) != 1"	869:7:17191:17211	5269324	0	True				
ANR	5269360	EqualityExpression	"put_bytes ( & c , 1 ) != 1"		5269324	0		!=			
ANR	5269361	CallExpression	"put_bytes ( & c , 1 )"		5269324	0					
ANR	5269362	Callee	put_bytes		5269324	0					
ANR	5269363	Identifier	put_bytes		5269324	0					
ANR	5269364	ArgumentList	& c		5269324	1					
ANR	5269365	Argument	& c		5269324	0					
ANR	5269366	UnaryOperationExpression	& c		5269324	0					
ANR	5269367	UnaryOperator	&		5269324	0					
ANR	5269368	Identifier	c		5269324	1					
ANR	5269369	Argument	1		5269324	1					
ANR	5269370	PrimaryExpression	1		5269324	0					
ANR	5269371	PrimaryExpression	1		5269324	1					
ANR	5269372	ReturnStatement	return FALSE ;	869:30:17214:17226	5269324	1	True				
ANR	5269373	Identifier	FALSE		5269324	0					
ANR	5269374	BreakStatement	break ;	870:3:17231:17236	5269324	4	True				
ANR	5269375	ReturnStatement	return TRUE ;	873:1:17243:17254	5269324	3	True				
ANR	5269376	Identifier	TRUE		5269324	0					
ANR	5269377	ReturnType	int		5269324	1					
ANR	5269378	Identifier	Stream :: put		5269324	2					
ANR	5269379	ParameterList	unsigned char c		5269324	3					
ANR	5269380	Parameter	unsigned char c	860:13:17019:17033	5269324	0	True				
ANR	5269381	ParameterType	unsigned char		5269324	0					
ANR	5269382	Identifier	c		5269324	1					
ANR	5269383	CFGEntryNode	ENTRY		5269324		True				
ANR	5269384	CFGExitNode	EXIT		5269324		True				
ANR	5269385	Symbol	c		5269324						
ANR	5269386	Symbol	_code		5269324						
ANR	5269387	Symbol	putcount		5269324						
ANR	5269388	Symbol	& c		5269324						
ANR	5269389	Symbol	TRUE		5269324						
ANR	5269390	Symbol	FALSE		5269324						
ANR	5269391	Symbol	put_bytes		5269324						
ANR	5269392	Symbol	getcount		5269324						
ANR	5269393	Function	Stream :: put	878:0:17261:17886							
ANR	5269394	FunctionDef	Stream :: put (int i)		5269393	0					
ANR	5269395	CompoundStatement		880:0:17287:17886	5269393	0					
ANR	5269396	IdentifierDeclStatement	int tmp ;	881:1:17290:17298	5269393	0	True				
ANR	5269397	IdentifierDecl	tmp		5269393	0					
ANR	5269398	IdentifierDeclType	int		5269393	0					
ANR	5269399	Identifier	tmp		5269393	1					
ANR	5269400	IdentifierDeclStatement	char pad ;	882:1:17301:17309	5269393	1	True				
ANR	5269401	IdentifierDecl	pad		5269393	0					
ANR	5269402	IdentifierDeclType	char		5269393	0					
ANR	5269403	Identifier	pad		5269393	1					
ANR	5269404	ExpressionStatement	getcount = 0	883:2:17313:17324	5269393	2	True				
ANR	5269405	AssignmentExpression	getcount = 0		5269393	0		=			
ANR	5269406	Identifier	getcount		5269393	0					
ANR	5269407	PrimaryExpression	0		5269393	1					
ANR	5269408	ExpressionStatement	putcount += 4	884:2:17328:17340	5269393	3	True				
ANR	5269409	AssignmentExpression	putcount += 4		5269393	0		+=			
ANR	5269410	Identifier	putcount		5269393	0					
ANR	5269411	PrimaryExpression	4		5269393	1					
ANR	5269412	ExpressionStatement	"NETWORK_TRACE ( ""put int "" << i << "" c("" << putcount << "") "" )"	885:2:17344:17403	5269393	4	True				
ANR	5269413	CallExpression	"NETWORK_TRACE ( ""put int "" << i << "" c("" << putcount << "") "" )"		5269393	0					
ANR	5269414	Callee	NETWORK_TRACE		5269393	0					
ANR	5269415	Identifier	NETWORK_TRACE		5269393	0					
ANR	5269416	ArgumentList	"""put int "" << i << "" c("" << putcount << "") """		5269393	1					
ANR	5269417	Argument	"""put int "" << i << "" c("" << putcount << "") """		5269393	0					
ANR	5269418	ShiftExpression	"""put int "" << i << "" c("" << putcount << "") """		5269393	0		<<			
ANR	5269419	PrimaryExpression	"""put int """		5269393	0					
ANR	5269420	ShiftExpression	"i << "" c("" << putcount << "") """		5269393	1		<<			
ANR	5269421	Identifier	i		5269393	0					
ANR	5269422	ShiftExpression	""" c("" << putcount << "") """		5269393	1		<<			
ANR	5269423	PrimaryExpression	""" c("""		5269393	0					
ANR	5269424	ShiftExpression	"putcount << "") """		5269393	1		<<			
ANR	5269425	Identifier	putcount		5269393	0					
ANR	5269426	PrimaryExpression	""") """		5269393	1					
ANR	5269427	SwitchStatement	switch ( _code )		5269393	5					
ANR	5269428	Condition	_code	888:8:17460:17464	5269393	0	True				
ANR	5269429	Identifier	_code		5269393	0					
ANR	5269430	CompoundStatement		9:14:178:178	5269393	1					
ANR	5269431	Label	case internal :	889:2:17470:17483	5269393	0	True				
ANR	5269432	Identifier	internal		5269393	0					
ANR	5269433	IfStatement	"if ( put_bytes ( & i , sizeof ( int ) ) != sizeof ( int ) )"		5269393	1					
ANR	5269434	Condition	"put_bytes ( & i , sizeof ( int ) ) != sizeof ( int )"	890:7:17492:17532	5269393	0	True				
ANR	5269435	EqualityExpression	"put_bytes ( & i , sizeof ( int ) ) != sizeof ( int )"		5269393	0		!=			
ANR	5269436	CallExpression	"put_bytes ( & i , sizeof ( int ) )"		5269393	0					
ANR	5269437	Callee	put_bytes		5269393	0					
ANR	5269438	Identifier	put_bytes		5269393	0					
ANR	5269439	ArgumentList	& i		5269393	1					
ANR	5269440	Argument	& i		5269393	0					
ANR	5269441	UnaryOperationExpression	& i		5269393	0					
ANR	5269442	UnaryOperator	&		5269393	0					
ANR	5269443	Identifier	i		5269393	1					
ANR	5269444	Argument	sizeof ( int )		5269393	1					
ANR	5269445	SizeofExpression	sizeof ( int )		5269393	0					
ANR	5269446	Sizeof	sizeof		5269393	0					
ANR	5269447	SizeofOperand	int		5269393	1					
ANR	5269448	SizeofExpression	sizeof ( int )		5269393	1					
ANR	5269449	Sizeof	sizeof		5269393	0					
ANR	5269450	SizeofOperand	int		5269393	1					
ANR	5269451	ReturnStatement	return FALSE ;	890:50:17535:17547	5269393	1	True				
ANR	5269452	Identifier	FALSE		5269393	0					
ANR	5269453	BreakStatement	break ;	891:3:17552:17557	5269393	2	True				
ANR	5269454	Label	case external :	893:2:17562:17575	5269393	3	True				
ANR	5269455	Identifier	external		5269393	0					
ANR	5269456	CompoundStatement		14:17:289:289	5269393	4					
ANR	5269457	ExpressionStatement	tmp = htonl ( i )	894:3:17582:17596	5269393	0	True				
ANR	5269458	AssignmentExpression	tmp = htonl ( i )		5269393	0		=			
ANR	5269459	Identifier	tmp		5269393	0					
ANR	5269460	CallExpression	htonl ( i )		5269393	1					
ANR	5269461	Callee	htonl		5269393	0					
ANR	5269462	Identifier	htonl		5269393	0					
ANR	5269463	ArgumentList	i		5269393	1					
ANR	5269464	Argument	i		5269393	0					
ANR	5269465	Identifier	i		5269393	0					
ANR	5269466	ExpressionStatement	pad = ( i >= 0 ) ? 0 : 0xff	895:3:17601:17626	5269393	1	True				
ANR	5269467	AssignmentExpression	pad = ( i >= 0 ) ? 0 : 0xff		5269393	0		=			
ANR	5269468	Identifier	pad		5269393	0					
ANR	5269469	ConditionalExpression	( i >= 0 ) ? 0 : 0xff		5269393	1					
ANR	5269470	Condition	i >= 0		5269393	0					
ANR	5269471	RelationalExpression	i >= 0		5269393	0		>=			
ANR	5269472	Identifier	i		5269393	0					
ANR	5269473	PrimaryExpression	0		5269393	1					
ANR	5269474	PrimaryExpression	0		5269393	1					
ANR	5269475	PrimaryExpression	0xff		5269393	2					
ANR	5269476	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( int ) ; s ++ )		5269393	2					
ANR	5269477	ForInit	int s = 0 ;	896:8:17657:17664	5269393	0	True				
ANR	5269478	IdentifierDeclStatement	int s = 0 ;		5269393	0					
ANR	5269479	IdentifierDecl	s = 0		5269393	0					
ANR	5269480	IdentifierDeclType	int		5269393	0					
ANR	5269481	Identifier	s		5269393	1					
ANR	5269482	AssignmentExpression	s = 0		5269393	2		=			
ANR	5269483	Identifier	s		5269393	0					
ANR	5269484	PrimaryExpression	0		5269393	1					
ANR	5269485	Condition	s < INT_SIZE - ( int ) sizeof ( int )	896:17:17666:17694	5269393	1	True				
ANR	5269486	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( int )		5269393	0		<			
ANR	5269487	Identifier	s		5269393	0					
ANR	5269488	AdditiveExpression	INT_SIZE - ( int ) sizeof ( int )		5269393	1		-			
ANR	5269489	Identifier	INT_SIZE		5269393	0					
ANR	5269490	CastExpression	( int ) sizeof ( int )		5269393	1					
ANR	5269491	CastTarget	int		5269393	0					
ANR	5269492	SizeofExpression	sizeof ( int )		5269393	1					
ANR	5269493	Sizeof	sizeof		5269393	0					
ANR	5269494	SizeofOperand	int		5269393	1					
ANR	5269495	PostIncDecOperationExpression	s ++	896:48:17697:17699	5269393	2	True				
ANR	5269496	Identifier	s		5269393	0					
ANR	5269497	IncDec	++		5269393	1					
ANR	5269498	CompoundStatement		17:53:414:414	5269393	3					
ANR	5269499	IfStatement	"if ( put_bytes ( & pad , 1 ) != 1 )"		5269393	0					
ANR	5269500	Condition	"put_bytes ( & pad , 1 ) != 1"	897:8:17712:17734	5269393	0	True				
ANR	5269501	EqualityExpression	"put_bytes ( & pad , 1 ) != 1"		5269393	0		!=			
ANR	5269502	CallExpression	"put_bytes ( & pad , 1 )"		5269393	0					
ANR	5269503	Callee	put_bytes		5269393	0					
ANR	5269504	Identifier	put_bytes		5269393	0					
ANR	5269505	ArgumentList	& pad		5269393	1					
ANR	5269506	Argument	& pad		5269393	0					
ANR	5269507	UnaryOperationExpression	& pad		5269393	0					
ANR	5269508	UnaryOperator	&		5269393	0					
ANR	5269509	Identifier	pad		5269393	1					
ANR	5269510	Argument	1		5269393	1					
ANR	5269511	PrimaryExpression	1		5269393	0					
ANR	5269512	PrimaryExpression	1		5269393	1					
ANR	5269513	ReturnStatement	return FALSE ;	897:33:17737:17749	5269393	1	True				
ANR	5269514	Identifier	FALSE		5269393	0					
ANR	5269515	IfStatement	"if ( put_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int ) )"		5269393	3					
ANR	5269516	Condition	"put_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int )"	899:7:17763:17805	5269393	0	True				
ANR	5269517	EqualityExpression	"put_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int )"		5269393	0		!=			
ANR	5269518	CallExpression	"put_bytes ( & tmp , sizeof ( int ) )"		5269393	0					
ANR	5269519	Callee	put_bytes		5269393	0					
ANR	5269520	Identifier	put_bytes		5269393	0					
ANR	5269521	ArgumentList	& tmp		5269393	1					
ANR	5269522	Argument	& tmp		5269393	0					
ANR	5269523	UnaryOperationExpression	& tmp		5269393	0					
ANR	5269524	UnaryOperator	&		5269393	0					
ANR	5269525	Identifier	tmp		5269393	1					
ANR	5269526	Argument	sizeof ( int )		5269393	1					
ANR	5269527	SizeofExpression	sizeof ( int )		5269393	0					
ANR	5269528	Sizeof	sizeof		5269393	0					
ANR	5269529	SizeofOperand	int		5269393	1					
ANR	5269530	SizeofExpression	sizeof ( int )		5269393	1					
ANR	5269531	Sizeof	sizeof		5269393	0					
ANR	5269532	SizeofOperand	int		5269393	1					
ANR	5269533	ReturnStatement	return FALSE ;	899:52:17808:17820	5269393	1	True				
ANR	5269534	Identifier	FALSE		5269393	0					
ANR	5269535	BreakStatement	break ;	900:3:17825:17830	5269393	4	True				
ANR	5269536	Label	case ascii :	903:2:17839:17849	5269393	5	True				
ANR	5269537	Identifier	ascii		5269393	0					
ANR	5269538	ReturnStatement	return FALSE ;	904:3:17854:17866	5269393	6	True				
ANR	5269539	Identifier	FALSE		5269393	0					
ANR	5269540	ReturnStatement	return TRUE ;	907:1:17873:17884	5269393	6	True				
ANR	5269541	Identifier	TRUE		5269393	0					
ANR	5269542	ReturnType	int		5269393	1					
ANR	5269543	Identifier	Stream :: put		5269393	2					
ANR	5269544	ParameterList	int i		5269393	3					
ANR	5269545	Parameter	int i	879:13:17279:17284	5269393	0	True				
ANR	5269546	ParameterType	int		5269393	0					
ANR	5269547	Identifier	i		5269393	1					
ANR	5269548	CFGEntryNode	ENTRY		5269393		True				
ANR	5269549	CFGExitNode	EXIT		5269393		True				
ANR	5269550	Symbol	_code		5269393						
ANR	5269551	Symbol	INT_SIZE		5269393						
ANR	5269552	Symbol	i		5269393						
ANR	5269553	Symbol	TRUE		5269393						
ANR	5269554	Symbol	htonl		5269393						
ANR	5269555	Symbol	& i		5269393						
ANR	5269556	Symbol	pad		5269393						
ANR	5269557	Symbol	s		5269393						
ANR	5269558	Symbol	tmp		5269393						
ANR	5269559	Symbol	putcount		5269393						
ANR	5269560	Symbol	FALSE		5269393						
ANR	5269561	Symbol	& tmp		5269393						
ANR	5269562	Symbol	put_bytes		5269393						
ANR	5269563	Symbol	getcount		5269393						
ANR	5269564	Symbol	& pad		5269393						
ANR	5269565	Function	Stream :: put	912:0:17891:18452							
ANR	5269566	FunctionDef	Stream :: put (unsigned int i)		5269565	0					
ANR	5269567	CompoundStatement		914:0:17926:18452	5269565	0					
ANR	5269568	IdentifierDeclStatement	unsigned int tmp ;	915:1:17929:17946	5269565	0	True				
ANR	5269569	IdentifierDecl	tmp		5269565	0					
ANR	5269570	IdentifierDeclType	unsigned int		5269565	0					
ANR	5269571	Identifier	tmp		5269565	1					
ANR	5269572	IdentifierDeclStatement	char pad ;	916:1:17949:17960	5269565	1	True				
ANR	5269573	IdentifierDecl	pad		5269565	0					
ANR	5269574	IdentifierDeclType	char		5269565	0					
ANR	5269575	Identifier	pad		5269565	1					
ANR	5269576	ExpressionStatement	getcount = 0	917:2:17964:17975	5269565	2	True				
ANR	5269577	AssignmentExpression	getcount = 0		5269565	0		=			
ANR	5269578	Identifier	getcount		5269565	0					
ANR	5269579	PrimaryExpression	0		5269565	1					
ANR	5269580	ExpressionStatement	putcount += 4	918:2:17979:17991	5269565	3	True				
ANR	5269581	AssignmentExpression	putcount += 4		5269565	0		+=			
ANR	5269582	Identifier	putcount		5269565	0					
ANR	5269583	PrimaryExpression	4		5269565	1					
ANR	5269584	ExpressionStatement	"NETWORK_TRACE ( ""put int "" << i << "" c("" << putcount << "") "" )"	919:2:17995:18054	5269565	4	True				
ANR	5269585	CallExpression	"NETWORK_TRACE ( ""put int "" << i << "" c("" << putcount << "") "" )"		5269565	0					
ANR	5269586	Callee	NETWORK_TRACE		5269565	0					
ANR	5269587	Identifier	NETWORK_TRACE		5269565	0					
ANR	5269588	ArgumentList	"""put int "" << i << "" c("" << putcount << "") """		5269565	1					
ANR	5269589	Argument	"""put int "" << i << "" c("" << putcount << "") """		5269565	0					
ANR	5269590	ShiftExpression	"""put int "" << i << "" c("" << putcount << "") """		5269565	0		<<			
ANR	5269591	PrimaryExpression	"""put int """		5269565	0					
ANR	5269592	ShiftExpression	"i << "" c("" << putcount << "") """		5269565	1		<<			
ANR	5269593	Identifier	i		5269565	0					
ANR	5269594	ShiftExpression	""" c("" << putcount << "") """		5269565	1		<<			
ANR	5269595	PrimaryExpression	""" c("""		5269565	0					
ANR	5269596	ShiftExpression	"putcount << "") """		5269565	1		<<			
ANR	5269597	Identifier	putcount		5269565	0					
ANR	5269598	PrimaryExpression	""") """		5269565	1					
ANR	5269599	SwitchStatement	switch ( _code )		5269565	5					
ANR	5269600	Condition	_code	921:8:18065:18069	5269565	0	True				
ANR	5269601	Identifier	_code		5269565	0					
ANR	5269602	CompoundStatement		8:14:144:144	5269565	1					
ANR	5269603	Label	case internal :	922:2:18075:18088	5269565	0	True				
ANR	5269604	Identifier	internal		5269565	0					
ANR	5269605	IfStatement	"if ( put_bytes ( & i , sizeof ( int ) ) != sizeof ( int ) )"		5269565	1					
ANR	5269606	Condition	"put_bytes ( & i , sizeof ( int ) ) != sizeof ( int )"	923:7:18097:18137	5269565	0	True				
ANR	5269607	EqualityExpression	"put_bytes ( & i , sizeof ( int ) ) != sizeof ( int )"		5269565	0		!=			
ANR	5269608	CallExpression	"put_bytes ( & i , sizeof ( int ) )"		5269565	0					
ANR	5269609	Callee	put_bytes		5269565	0					
ANR	5269610	Identifier	put_bytes		5269565	0					
ANR	5269611	ArgumentList	& i		5269565	1					
ANR	5269612	Argument	& i		5269565	0					
ANR	5269613	UnaryOperationExpression	& i		5269565	0					
ANR	5269614	UnaryOperator	&		5269565	0					
ANR	5269615	Identifier	i		5269565	1					
ANR	5269616	Argument	sizeof ( int )		5269565	1					
ANR	5269617	SizeofExpression	sizeof ( int )		5269565	0					
ANR	5269618	Sizeof	sizeof		5269565	0					
ANR	5269619	SizeofOperand	int		5269565	1					
ANR	5269620	SizeofExpression	sizeof ( int )		5269565	1					
ANR	5269621	Sizeof	sizeof		5269565	0					
ANR	5269622	SizeofOperand	int		5269565	1					
ANR	5269623	ReturnStatement	return FALSE ;	923:50:18140:18152	5269565	1	True				
ANR	5269624	Identifier	FALSE		5269565	0					
ANR	5269625	BreakStatement	break ;	924:3:18157:18162	5269565	2	True				
ANR	5269626	Label	case external :	926:2:18167:18180	5269565	3	True				
ANR	5269627	Identifier	external		5269565	0					
ANR	5269628	CompoundStatement		13:17:255:255	5269565	4					
ANR	5269629	ExpressionStatement	tmp = htonl ( i )	927:3:18187:18201	5269565	0	True				
ANR	5269630	AssignmentExpression	tmp = htonl ( i )		5269565	0		=			
ANR	5269631	Identifier	tmp		5269565	0					
ANR	5269632	CallExpression	htonl ( i )		5269565	1					
ANR	5269633	Callee	htonl		5269565	0					
ANR	5269634	Identifier	htonl		5269565	0					
ANR	5269635	ArgumentList	i		5269565	1					
ANR	5269636	Argument	i		5269565	0					
ANR	5269637	Identifier	i		5269565	0					
ANR	5269638	ExpressionStatement	pad = 0	928:3:18206:18213	5269565	1	True				
ANR	5269639	AssignmentExpression	pad = 0		5269565	0		=			
ANR	5269640	Identifier	pad		5269565	0					
ANR	5269641	PrimaryExpression	0		5269565	1					
ANR	5269642	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( int ) ; s ++ )		5269565	2					
ANR	5269643	ForInit	int s = 0 ;	929:8:18223:18230	5269565	0	True				
ANR	5269644	IdentifierDeclStatement	int s = 0 ;		5269565	0					
ANR	5269645	IdentifierDecl	s = 0		5269565	0					
ANR	5269646	IdentifierDeclType	int		5269565	0					
ANR	5269647	Identifier	s		5269565	1					
ANR	5269648	AssignmentExpression	s = 0		5269565	2		=			
ANR	5269649	Identifier	s		5269565	0					
ANR	5269650	PrimaryExpression	0		5269565	1					
ANR	5269651	Condition	s < INT_SIZE - ( int ) sizeof ( int )	929:17:18232:18260	5269565	1	True				
ANR	5269652	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( int )		5269565	0		<			
ANR	5269653	Identifier	s		5269565	0					
ANR	5269654	AdditiveExpression	INT_SIZE - ( int ) sizeof ( int )		5269565	1		-			
ANR	5269655	Identifier	INT_SIZE		5269565	0					
ANR	5269656	CastExpression	( int ) sizeof ( int )		5269565	1					
ANR	5269657	CastTarget	int		5269565	0					
ANR	5269658	SizeofExpression	sizeof ( int )		5269565	1					
ANR	5269659	Sizeof	sizeof		5269565	0					
ANR	5269660	SizeofOperand	int		5269565	1					
ANR	5269661	PostIncDecOperationExpression	s ++	929:48:18263:18265	5269565	2	True				
ANR	5269662	Identifier	s		5269565	0					
ANR	5269663	IncDec	++		5269565	1					
ANR	5269664	CompoundStatement		16:53:341:341	5269565	3					
ANR	5269665	IfStatement	"if ( put_bytes ( & pad , 1 ) != 1 )"		5269565	0					
ANR	5269666	Condition	"put_bytes ( & pad , 1 ) != 1"	930:8:18278:18300	5269565	0	True				
ANR	5269667	EqualityExpression	"put_bytes ( & pad , 1 ) != 1"		5269565	0		!=			
ANR	5269668	CallExpression	"put_bytes ( & pad , 1 )"		5269565	0					
ANR	5269669	Callee	put_bytes		5269565	0					
ANR	5269670	Identifier	put_bytes		5269565	0					
ANR	5269671	ArgumentList	& pad		5269565	1					
ANR	5269672	Argument	& pad		5269565	0					
ANR	5269673	UnaryOperationExpression	& pad		5269565	0					
ANR	5269674	UnaryOperator	&		5269565	0					
ANR	5269675	Identifier	pad		5269565	1					
ANR	5269676	Argument	1		5269565	1					
ANR	5269677	PrimaryExpression	1		5269565	0					
ANR	5269678	PrimaryExpression	1		5269565	1					
ANR	5269679	ReturnStatement	return FALSE ;	930:33:18303:18315	5269565	1	True				
ANR	5269680	Identifier	FALSE		5269565	0					
ANR	5269681	IfStatement	"if ( put_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int ) )"		5269565	3					
ANR	5269682	Condition	"put_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int )"	932:7:18329:18371	5269565	0	True				
ANR	5269683	EqualityExpression	"put_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int )"		5269565	0		!=			
ANR	5269684	CallExpression	"put_bytes ( & tmp , sizeof ( int ) )"		5269565	0					
ANR	5269685	Callee	put_bytes		5269565	0					
ANR	5269686	Identifier	put_bytes		5269565	0					
ANR	5269687	ArgumentList	& tmp		5269565	1					
ANR	5269688	Argument	& tmp		5269565	0					
ANR	5269689	UnaryOperationExpression	& tmp		5269565	0					
ANR	5269690	UnaryOperator	&		5269565	0					
ANR	5269691	Identifier	tmp		5269565	1					
ANR	5269692	Argument	sizeof ( int )		5269565	1					
ANR	5269693	SizeofExpression	sizeof ( int )		5269565	0					
ANR	5269694	Sizeof	sizeof		5269565	0					
ANR	5269695	SizeofOperand	int		5269565	1					
ANR	5269696	SizeofExpression	sizeof ( int )		5269565	1					
ANR	5269697	Sizeof	sizeof		5269565	0					
ANR	5269698	SizeofOperand	int		5269565	1					
ANR	5269699	ReturnStatement	return FALSE ;	932:52:18374:18386	5269565	1	True				
ANR	5269700	Identifier	FALSE		5269565	0					
ANR	5269701	BreakStatement	break ;	933:3:18391:18396	5269565	4	True				
ANR	5269702	Label	case ascii :	936:2:18405:18415	5269565	5	True				
ANR	5269703	Identifier	ascii		5269565	0					
ANR	5269704	ReturnStatement	return FALSE ;	937:3:18420:18432	5269565	6	True				
ANR	5269705	Identifier	FALSE		5269565	0					
ANR	5269706	ReturnStatement	return TRUE ;	940:1:18439:18450	5269565	6	True				
ANR	5269707	Identifier	TRUE		5269565	0					
ANR	5269708	ReturnType	int		5269565	1					
ANR	5269709	Identifier	Stream :: put		5269565	2					
ANR	5269710	ParameterList	unsigned int i		5269565	3					
ANR	5269711	Parameter	unsigned int i	913:13:17909:17923	5269565	0	True				
ANR	5269712	ParameterType	unsigned int		5269565	0					
ANR	5269713	Identifier	i		5269565	1					
ANR	5269714	CFGEntryNode	ENTRY		5269565		True				
ANR	5269715	CFGExitNode	EXIT		5269565		True				
ANR	5269716	Symbol	_code		5269565						
ANR	5269717	Symbol	INT_SIZE		5269565						
ANR	5269718	Symbol	i		5269565						
ANR	5269719	Symbol	TRUE		5269565						
ANR	5269720	Symbol	htonl		5269565						
ANR	5269721	Symbol	& i		5269565						
ANR	5269722	Symbol	pad		5269565						
ANR	5269723	Symbol	s		5269565						
ANR	5269724	Symbol	tmp		5269565						
ANR	5269725	Symbol	putcount		5269565						
ANR	5269726	Symbol	FALSE		5269565						
ANR	5269727	Symbol	& tmp		5269565						
ANR	5269728	Symbol	put_bytes		5269565						
ANR	5269729	Symbol	getcount		5269565						
ANR	5269730	Symbol	& pad		5269565						
ANR	5269731	Function	hton_is_noop	944:0:18514:18575							
ANR	5269732	FunctionDef	hton_is_noop ()		5269731	0					
ANR	5269733	CompoundStatement		945:0:18541:18575	5269731	0					
ANR	5269734	ReturnStatement	return ( bool ) ( 1 == htons ( 1 ) ) ;	946:1:18544:18573	5269731	0	True				
ANR	5269735	CastExpression	( bool ) ( 1 == htons ( 1 ) )		5269731	0					
ANR	5269736	CastTarget	bool		5269731	0					
ANR	5269737	EqualityExpression	1 == htons ( 1 )		5269731	1		==			
ANR	5269738	PrimaryExpression	1		5269731	0					
ANR	5269739	CallExpression	htons ( 1 )		5269731	1					
ANR	5269740	Callee	htons		5269731	0					
ANR	5269741	Identifier	htons		5269731	0					
ANR	5269742	ArgumentList	1		5269731	1					
ANR	5269743	Argument	1		5269731	0					
ANR	5269744	PrimaryExpression	1		5269731	0					
ANR	5269745	ReturnType	static bool		5269731	1					
ANR	5269746	Identifier	hton_is_noop		5269731	2					
ANR	5269747	ParameterList			5269731	3					
ANR	5269748	CFGEntryNode	ENTRY		5269731		True				
ANR	5269749	CFGExitNode	EXIT		5269731		True				
ANR	5269750	Symbol	htons		5269731						
ANR	5269751	Function	htonL	950:0:18640:18893							
ANR	5269752	FunctionDef	htonL (unsigned long hostint)		5269751	0					
ANR	5269753	CompoundStatement		951:0:18690:18893	5269751	0					
ANR	5269754	IdentifierDeclStatement	unsigned long netint ;	952:1:18693:18713	5269751	0	True				
ANR	5269755	IdentifierDecl	netint		5269751	0					
ANR	5269756	IdentifierDeclType	unsigned long		5269751	0					
ANR	5269757	Identifier	netint		5269751	1					
ANR	5269758	IdentifierDeclStatement	char * hostp = ( char * ) & hostint ;	953:1:18716:18746	5269751	1	True				
ANR	5269759	IdentifierDecl	* hostp = ( char * ) & hostint		5269751	0					
ANR	5269760	IdentifierDeclType	char *		5269751	0					
ANR	5269761	Identifier	hostp		5269751	1					
ANR	5269762	AssignmentExpression	* hostp = ( char * ) & hostint		5269751	2		=			
ANR	5269763	Identifier	hostp		5269751	0					
ANR	5269764	CastExpression	( char * ) & hostint		5269751	1					
ANR	5269765	CastTarget	char *		5269751	0					
ANR	5269766	UnaryOperationExpression	& hostint		5269751	1					
ANR	5269767	UnaryOperator	&		5269751	0					
ANR	5269768	Identifier	hostint		5269751	1					
ANR	5269769	IdentifierDeclStatement	char * netp = ( char * ) & netint ;	954:1:18749:18777	5269751	2	True				
ANR	5269770	IdentifierDecl	* netp = ( char * ) & netint		5269751	0					
ANR	5269771	IdentifierDeclType	char *		5269751	0					
ANR	5269772	Identifier	netp		5269751	1					
ANR	5269773	AssignmentExpression	* netp = ( char * ) & netint		5269751	2		=			
ANR	5269774	Identifier	netp		5269751	0					
ANR	5269775	CastExpression	( char * ) & netint		5269751	1					
ANR	5269776	CastTarget	char *		5269751	0					
ANR	5269777	UnaryOperationExpression	& netint		5269751	1					
ANR	5269778	UnaryOperator	&		5269751	0					
ANR	5269779	Identifier	netint		5269751	1					
ANR	5269780	ForStatement	"for ( unsigned int i = 0 , j = sizeof ( long ) - 1 ; i < sizeof ( long ) ; i ++ , j -- )"		5269751	3					
ANR	5269781	ForInit	"unsigned int i = 0 , j = sizeof ( long ) - 1 ;"	956:6:18786:18820	5269751	0	True				
ANR	5269782	IdentifierDeclStatement	"unsigned int i = 0 , j = sizeof ( long ) - 1 ;"		5269751	0					
ANR	5269783	IdentifierDecl	i = 0		5269751	0					
ANR	5269784	IdentifierDeclType	unsigned int		5269751	0					
ANR	5269785	Identifier	i		5269751	1					
ANR	5269786	AssignmentExpression	i = 0		5269751	2		=			
ANR	5269787	Identifier	i		5269751	0					
ANR	5269788	PrimaryExpression	0		5269751	1					
ANR	5269789	IdentifierDecl	j = sizeof ( long ) - 1		5269751	1					
ANR	5269790	IdentifierDeclType	unsigned int		5269751	0					
ANR	5269791	Identifier	j		5269751	1					
ANR	5269792	AssignmentExpression	j = sizeof ( long ) - 1		5269751	2		=			
ANR	5269793	Identifier	j		5269751	0					
ANR	5269794	AdditiveExpression	sizeof ( long ) - 1		5269751	1		-			
ANR	5269795	SizeofExpression	sizeof ( long )		5269751	0					
ANR	5269796	Sizeof	sizeof		5269751	0					
ANR	5269797	SizeofOperand	long		5269751	1					
ANR	5269798	PrimaryExpression	1		5269751	1					
ANR	5269799	Condition	i < sizeof ( long )	956:42:18822:18837	5269751	1	True				
ANR	5269800	RelationalExpression	i < sizeof ( long )		5269751	0		<			
ANR	5269801	Identifier	i		5269751	0					
ANR	5269802	SizeofExpression	sizeof ( long )		5269751	1					
ANR	5269803	Sizeof	sizeof		5269751	0					
ANR	5269804	SizeofOperand	long		5269751	1					
ANR	5269805	Expression	"i ++ , j --"	956:60:18840:18847	5269751	2	True				
ANR	5269806	PostIncDecOperationExpression	i ++		5269751	0					
ANR	5269807	Identifier	i		5269751	0					
ANR	5269808	IncDec	++		5269751	1					
ANR	5269809	PostIncDecOperationExpression	j --		5269751	1					
ANR	5269810	Identifier	j		5269751	0					
ANR	5269811	IncDec	--		5269751	1					
ANR	5269812	CompoundStatement		6:70:159:159	5269751	3					
ANR	5269813	ExpressionStatement	netp [ i ] = hostp [ j ]	957:2:18854:18872	5269751	0	True				
ANR	5269814	AssignmentExpression	netp [ i ] = hostp [ j ]		5269751	0		=			
ANR	5269815	ArrayIndexing	netp [ i ]		5269751	0					
ANR	5269816	Identifier	netp		5269751	0					
ANR	5269817	Identifier	i		5269751	1					
ANR	5269818	ArrayIndexing	hostp [ j ]		5269751	1					
ANR	5269819	Identifier	hostp		5269751	0					
ANR	5269820	Identifier	j		5269751	1					
ANR	5269821	ReturnStatement	return netint ;	959:1:18878:18891	5269751	4	True				
ANR	5269822	Identifier	netint		5269751	0					
ANR	5269823	ReturnType	static unsigned long		5269751	1					
ANR	5269824	Identifier	htonL		5269751	2					
ANR	5269825	ParameterList	unsigned long hostint		5269751	3					
ANR	5269826	Parameter	unsigned long hostint	950:27:18667:18687	5269751	0	True				
ANR	5269827	ParameterType	unsigned long		5269751	0					
ANR	5269828	Identifier	hostint		5269751	1					
ANR	5269829	CFGEntryNode	ENTRY		5269751		True				
ANR	5269830	CFGExitNode	EXIT		5269751		True				
ANR	5269831	Symbol	netp		5269751						
ANR	5269832	Symbol	& netint		5269751						
ANR	5269833	Symbol	* i		5269751						
ANR	5269834	Symbol	* j		5269751						
ANR	5269835	Symbol	hostp		5269751						
ANR	5269836	Symbol	& hostint		5269751						
ANR	5269837	Symbol	netint		5269751						
ANR	5269838	Symbol	i		5269751						
ANR	5269839	Symbol	j		5269751						
ANR	5269840	Symbol	hostint		5269751						
ANR	5269841	Symbol	* netp		5269751						
ANR	5269842	Symbol	* hostp		5269751						
ANR	5269843	Function	ntohL	963:0:18958:19212							
ANR	5269844	FunctionDef	ntohL (unsigned long netint)		5269843	0					
ANR	5269845	CompoundStatement		964:0:19007:19212	5269843	0					
ANR	5269846	IdentifierDeclStatement	unsigned long hostint ;	965:1:19010:19031	5269843	0	True				
ANR	5269847	IdentifierDecl	hostint		5269843	0					
ANR	5269848	IdentifierDeclType	unsigned long		5269843	0					
ANR	5269849	Identifier	hostint		5269843	1					
ANR	5269850	IdentifierDeclStatement	char * hostp = ( char * ) & hostint ;	966:1:19034:19064	5269843	1	True				
ANR	5269851	IdentifierDecl	* hostp = ( char * ) & hostint		5269843	0					
ANR	5269852	IdentifierDeclType	char *		5269843	0					
ANR	5269853	Identifier	hostp		5269843	1					
ANR	5269854	AssignmentExpression	* hostp = ( char * ) & hostint		5269843	2		=			
ANR	5269855	Identifier	hostp		5269843	0					
ANR	5269856	CastExpression	( char * ) & hostint		5269843	1					
ANR	5269857	CastTarget	char *		5269843	0					
ANR	5269858	UnaryOperationExpression	& hostint		5269843	1					
ANR	5269859	UnaryOperator	&		5269843	0					
ANR	5269860	Identifier	hostint		5269843	1					
ANR	5269861	IdentifierDeclStatement	char * netp = ( char * ) & netint ;	967:1:19067:19095	5269843	2	True				
ANR	5269862	IdentifierDecl	* netp = ( char * ) & netint		5269843	0					
ANR	5269863	IdentifierDeclType	char *		5269843	0					
ANR	5269864	Identifier	netp		5269843	1					
ANR	5269865	AssignmentExpression	* netp = ( char * ) & netint		5269843	2		=			
ANR	5269866	Identifier	netp		5269843	0					
ANR	5269867	CastExpression	( char * ) & netint		5269843	1					
ANR	5269868	CastTarget	char *		5269843	0					
ANR	5269869	UnaryOperationExpression	& netint		5269843	1					
ANR	5269870	UnaryOperator	&		5269843	0					
ANR	5269871	Identifier	netint		5269843	1					
ANR	5269872	ForStatement	"for ( unsigned int i = 0 , j = sizeof ( long ) - 1 ; i < sizeof ( long ) ; i ++ , j -- )"		5269843	3					
ANR	5269873	ForInit	"unsigned int i = 0 , j = sizeof ( long ) - 1 ;"	969:6:19104:19138	5269843	0	True				
ANR	5269874	IdentifierDeclStatement	"unsigned int i = 0 , j = sizeof ( long ) - 1 ;"		5269843	0					
ANR	5269875	IdentifierDecl	i = 0		5269843	0					
ANR	5269876	IdentifierDeclType	unsigned int		5269843	0					
ANR	5269877	Identifier	i		5269843	1					
ANR	5269878	AssignmentExpression	i = 0		5269843	2		=			
ANR	5269879	Identifier	i		5269843	0					
ANR	5269880	PrimaryExpression	0		5269843	1					
ANR	5269881	IdentifierDecl	j = sizeof ( long ) - 1		5269843	1					
ANR	5269882	IdentifierDeclType	unsigned int		5269843	0					
ANR	5269883	Identifier	j		5269843	1					
ANR	5269884	AssignmentExpression	j = sizeof ( long ) - 1		5269843	2		=			
ANR	5269885	Identifier	j		5269843	0					
ANR	5269886	AdditiveExpression	sizeof ( long ) - 1		5269843	1		-			
ANR	5269887	SizeofExpression	sizeof ( long )		5269843	0					
ANR	5269888	Sizeof	sizeof		5269843	0					
ANR	5269889	SizeofOperand	long		5269843	1					
ANR	5269890	PrimaryExpression	1		5269843	1					
ANR	5269891	Condition	i < sizeof ( long )	969:42:19140:19155	5269843	1	True				
ANR	5269892	RelationalExpression	i < sizeof ( long )		5269843	0		<			
ANR	5269893	Identifier	i		5269843	0					
ANR	5269894	SizeofExpression	sizeof ( long )		5269843	1					
ANR	5269895	Sizeof	sizeof		5269843	0					
ANR	5269896	SizeofOperand	long		5269843	1					
ANR	5269897	Expression	"i ++ , j --"	969:60:19158:19165	5269843	2	True				
ANR	5269898	PostIncDecOperationExpression	i ++		5269843	0					
ANR	5269899	Identifier	i		5269843	0					
ANR	5269900	IncDec	++		5269843	1					
ANR	5269901	PostIncDecOperationExpression	j --		5269843	1					
ANR	5269902	Identifier	j		5269843	0					
ANR	5269903	IncDec	--		5269843	1					
ANR	5269904	CompoundStatement		6:70:160:160	5269843	3					
ANR	5269905	ExpressionStatement	hostp [ i ] = netp [ j ]	970:2:19172:19190	5269843	0	True				
ANR	5269906	AssignmentExpression	hostp [ i ] = netp [ j ]		5269843	0		=			
ANR	5269907	ArrayIndexing	hostp [ i ]		5269843	0					
ANR	5269908	Identifier	hostp		5269843	0					
ANR	5269909	Identifier	i		5269843	1					
ANR	5269910	ArrayIndexing	netp [ j ]		5269843	1					
ANR	5269911	Identifier	netp		5269843	0					
ANR	5269912	Identifier	j		5269843	1					
ANR	5269913	ReturnStatement	return hostint ;	972:1:19196:19210	5269843	4	True				
ANR	5269914	Identifier	hostint		5269843	0					
ANR	5269915	ReturnType	static unsigned long		5269843	1					
ANR	5269916	Identifier	ntohL		5269843	2					
ANR	5269917	ParameterList	unsigned long netint		5269843	3					
ANR	5269918	Parameter	unsigned long netint	963:27:18985:19004	5269843	0	True				
ANR	5269919	ParameterType	unsigned long		5269843	0					
ANR	5269920	Identifier	netint		5269843	1					
ANR	5269921	CFGEntryNode	ENTRY		5269843		True				
ANR	5269922	CFGExitNode	EXIT		5269843		True				
ANR	5269923	Symbol	netp		5269843						
ANR	5269924	Symbol	& netint		5269843						
ANR	5269925	Symbol	* i		5269843						
ANR	5269926	Symbol	* j		5269843						
ANR	5269927	Symbol	hostp		5269843						
ANR	5269928	Symbol	& hostint		5269843						
ANR	5269929	Symbol	netint		5269843						
ANR	5269930	Symbol	i		5269843						
ANR	5269931	Symbol	j		5269843						
ANR	5269932	Symbol	hostint		5269843						
ANR	5269933	Symbol	* netp		5269843						
ANR	5269934	Symbol	* hostp		5269843						
ANR	5269935	Function	Stream :: put	975:0:19215:19950							
ANR	5269936	FunctionDef	Stream :: put (long l)		5269935	0					
ANR	5269937	CompoundStatement		977:0:19241:19950	5269935	0					
ANR	5269938	IdentifierDeclStatement	char pad ;	978:1:19244:19252	5269935	0	True				
ANR	5269939	IdentifierDecl	pad		5269935	0					
ANR	5269940	IdentifierDeclType	char		5269935	0					
ANR	5269941	Identifier	pad		5269935	1					
ANR	5269942	ExpressionStatement	"NETWORK_TRACE ( ""put long "" << l )"	979:2:19256:19287	5269935	1	True				
ANR	5269943	CallExpression	"NETWORK_TRACE ( ""put long "" << l )"		5269935	0					
ANR	5269944	Callee	NETWORK_TRACE		5269935	0					
ANR	5269945	Identifier	NETWORK_TRACE		5269935	0					
ANR	5269946	ArgumentList	"""put long "" << l"		5269935	1					
ANR	5269947	Argument	"""put long "" << l"		5269935	0					
ANR	5269948	ShiftExpression	"""put long "" << l"		5269935	0		<<			
ANR	5269949	PrimaryExpression	"""put long """		5269935	0					
ANR	5269950	Identifier	l		5269935	1					
ANR	5269951	SwitchStatement	switch ( _code )		5269935	2					
ANR	5269952	Condition	_code	981:8:19298:19302	5269935	0	True				
ANR	5269953	Identifier	_code		5269935	0					
ANR	5269954	CompoundStatement		5:14:62:62	5269935	1					
ANR	5269955	Label	case internal :	982:2:19308:19321	5269935	0	True				
ANR	5269956	Identifier	internal		5269935	0					
ANR	5269957	IfStatement	"if ( put_bytes ( & l , sizeof ( long ) ) != sizeof ( long ) )"		5269935	1					
ANR	5269958	Condition	"put_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"	983:7:19330:19372	5269935	0	True				
ANR	5269959	EqualityExpression	"put_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"		5269935	0		!=			
ANR	5269960	CallExpression	"put_bytes ( & l , sizeof ( long ) )"		5269935	0					
ANR	5269961	Callee	put_bytes		5269935	0					
ANR	5269962	Identifier	put_bytes		5269935	0					
ANR	5269963	ArgumentList	& l		5269935	1					
ANR	5269964	Argument	& l		5269935	0					
ANR	5269965	UnaryOperationExpression	& l		5269935	0					
ANR	5269966	UnaryOperator	&		5269935	0					
ANR	5269967	Identifier	l		5269935	1					
ANR	5269968	Argument	sizeof ( long )		5269935	1					
ANR	5269969	SizeofExpression	sizeof ( long )		5269935	0					
ANR	5269970	Sizeof	sizeof		5269935	0					
ANR	5269971	SizeofOperand	long		5269935	1					
ANR	5269972	SizeofExpression	sizeof ( long )		5269935	1					
ANR	5269973	Sizeof	sizeof		5269935	0					
ANR	5269974	SizeofOperand	long		5269935	1					
ANR	5269975	ReturnStatement	return FALSE ;	983:52:19375:19387	5269935	1	True				
ANR	5269976	Identifier	FALSE		5269935	0					
ANR	5269977	BreakStatement	break ;	984:3:19392:19397	5269935	2	True				
ANR	5269978	Label	case external :	986:2:19402:19415	5269935	3	True				
ANR	5269979	Identifier	external		5269935	0					
ANR	5269980	IfStatement	if ( ( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE ) )		5269935	4					
ANR	5269981	Condition	( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE )	987:7:19424:19481	5269935	0	True				
ANR	5269982	OrExpression	( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE )		5269935	0		||			
ANR	5269983	EqualityExpression	sizeof ( int ) == sizeof ( long )		5269935	0		==			
ANR	5269984	SizeofExpression	sizeof ( int )		5269935	0					
ANR	5269985	Sizeof	sizeof		5269935	0					
ANR	5269986	SizeofOperand	int		5269935	1					
ANR	5269987	SizeofExpression	sizeof ( long )		5269935	1					
ANR	5269988	Sizeof	sizeof		5269935	0					
ANR	5269989	SizeofOperand	long		5269935	1					
ANR	5269990	RelationalExpression	sizeof ( long ) > INT_SIZE		5269935	1		>			
ANR	5269991	SizeofExpression	sizeof ( long )		5269935	0					
ANR	5269992	Sizeof	sizeof		5269935	0					
ANR	5269993	SizeofOperand	long		5269935	1					
ANR	5269994	Identifier	INT_SIZE		5269935	1					
ANR	5269995	CompoundStatement		11:67:242:242	5269935	1					
ANR	5269996	ReturnStatement	return put ( ( int ) l ) ;	988:4:19490:19508	5269935	0	True				
ANR	5269997	CallExpression	put ( ( int ) l )		5269935	0					
ANR	5269998	Callee	put		5269935	0					
ANR	5269999	Identifier	put		5269935	0					
ANR	5270000	ArgumentList	( int ) l		5269935	1					
ANR	5270001	Argument	( int ) l		5269935	0					
ANR	5270002	CastExpression	( int ) l		5269935	0					
ANR	5270003	CastTarget	int		5269935	0					
ANR	5270004	Identifier	l		5269935	1					
ANR	5270005	ElseStatement	else		5269935	0					
ANR	5270006	CompoundStatement		13:10:278:278	5269935	0					
ANR	5270007	IfStatement	if ( ! hton_is_noop ( ) )		5269935	0					
ANR	5270008	Condition	! hton_is_noop ( )	990:8:19530:19544	5269935	0	True				
ANR	5270009	UnaryOperationExpression	! hton_is_noop ( )		5269935	0					
ANR	5270010	UnaryOperator	!		5269935	0					
ANR	5270011	CallExpression	hton_is_noop ( )		5269935	1					
ANR	5270012	Callee	hton_is_noop		5269935	0					
ANR	5270013	Identifier	hton_is_noop		5269935	0					
ANR	5270014	ArgumentList			5269935	1					
ANR	5270015	CompoundStatement		14:25:305:305	5269935	1					
ANR	5270016	ExpressionStatement	l = htonL ( l )	991:5:19590:19602	5269935	0	True				
ANR	5270017	AssignmentExpression	l = htonL ( l )		5269935	0		=			
ANR	5270018	Identifier	l		5269935	0					
ANR	5270019	CallExpression	htonL ( l )		5269935	1					
ANR	5270020	Callee	htonL		5269935	0					
ANR	5270021	Identifier	htonL		5269935	0					
ANR	5270022	ArgumentList	l		5269935	1					
ANR	5270023	Argument	l		5269935	0					
ANR	5270024	Identifier	l		5269935	0					
ANR	5270025	IfStatement	if ( sizeof ( long ) < INT_SIZE )		5269935	1					
ANR	5270026	Condition	sizeof ( long ) < INT_SIZE	993:8:19618:19640	5269935	0	True				
ANR	5270027	RelationalExpression	sizeof ( long ) < INT_SIZE		5269935	0		<			
ANR	5270028	SizeofExpression	sizeof ( long )		5269935	0					
ANR	5270029	Sizeof	sizeof		5269935	0					
ANR	5270030	SizeofOperand	long		5269935	1					
ANR	5270031	Identifier	INT_SIZE		5269935	1					
ANR	5270032	CompoundStatement		17:33:401:401	5269935	1					
ANR	5270033	ExpressionStatement	pad = ( l >= 0 ) ? 0 : 0xff	994:5:19650:19675	5269935	0	True				
ANR	5270034	AssignmentExpression	pad = ( l >= 0 ) ? 0 : 0xff		5269935	0		=			
ANR	5270035	Identifier	pad		5269935	0					
ANR	5270036	ConditionalExpression	( l >= 0 ) ? 0 : 0xff		5269935	1					
ANR	5270037	Condition	l >= 0		5269935	0					
ANR	5270038	RelationalExpression	l >= 0		5269935	0		>=			
ANR	5270039	Identifier	l		5269935	0					
ANR	5270040	PrimaryExpression	0		5269935	1					
ANR	5270041	PrimaryExpression	0		5269935	1					
ANR	5270042	PrimaryExpression	0xff		5269935	2					
ANR	5270043	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( long ) ; s ++ )		5269935	1					
ANR	5270044	ForInit	int s = 0 ;	995:10:19708:19715	5269935	0	True				
ANR	5270045	IdentifierDeclStatement	int s = 0 ;		5269935	0					
ANR	5270046	IdentifierDecl	s = 0		5269935	0					
ANR	5270047	IdentifierDeclType	int		5269935	0					
ANR	5270048	Identifier	s		5269935	1					
ANR	5270049	AssignmentExpression	s = 0		5269935	2		=			
ANR	5270050	Identifier	s		5269935	0					
ANR	5270051	PrimaryExpression	0		5269935	1					
ANR	5270052	Condition	s < INT_SIZE - ( int ) sizeof ( long )	995:19:19717:19746	5269935	1	True				
ANR	5270053	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( long )		5269935	0		<			
ANR	5270054	Identifier	s		5269935	0					
ANR	5270055	AdditiveExpression	INT_SIZE - ( int ) sizeof ( long )		5269935	1		-			
ANR	5270056	Identifier	INT_SIZE		5269935	0					
ANR	5270057	CastExpression	( int ) sizeof ( long )		5269935	1					
ANR	5270058	CastTarget	int		5269935	0					
ANR	5270059	SizeofExpression	sizeof ( long )		5269935	1					
ANR	5270060	Sizeof	sizeof		5269935	0					
ANR	5270061	SizeofOperand	long		5269935	1					
ANR	5270062	PostIncDecOperationExpression	s ++	995:51:19749:19751	5269935	2	True				
ANR	5270063	Identifier	s		5269935	0					
ANR	5270064	IncDec	++		5269935	1					
ANR	5270065	CompoundStatement		19:56:512:512	5269935	3					
ANR	5270066	IfStatement	"if ( put_bytes ( & pad , 1 ) != 1 )"		5269935	0					
ANR	5270067	Condition	"put_bytes ( & pad , 1 ) != 1"	996:10:19766:19788	5269935	0	True				
ANR	5270068	EqualityExpression	"put_bytes ( & pad , 1 ) != 1"		5269935	0		!=			
ANR	5270069	CallExpression	"put_bytes ( & pad , 1 )"		5269935	0					
ANR	5270070	Callee	put_bytes		5269935	0					
ANR	5270071	Identifier	put_bytes		5269935	0					
ANR	5270072	ArgumentList	& pad		5269935	1					
ANR	5270073	Argument	& pad		5269935	0					
ANR	5270074	UnaryOperationExpression	& pad		5269935	0					
ANR	5270075	UnaryOperator	&		5269935	0					
ANR	5270076	Identifier	pad		5269935	1					
ANR	5270077	Argument	1		5269935	1					
ANR	5270078	PrimaryExpression	1		5269935	0					
ANR	5270079	PrimaryExpression	1		5269935	1					
ANR	5270080	ReturnStatement	return FALSE ;	996:35:19791:19803	5269935	1	True				
ANR	5270081	Identifier	FALSE		5269935	0					
ANR	5270082	IfStatement	"if ( put_bytes ( & l , sizeof ( long ) ) != sizeof ( long ) )"		5269935	2					
ANR	5270083	Condition	"put_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"	999:8:19826:19868	5269935	0	True				
ANR	5270084	EqualityExpression	"put_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"		5269935	0		!=			
ANR	5270085	CallExpression	"put_bytes ( & l , sizeof ( long ) )"		5269935	0					
ANR	5270086	Callee	put_bytes		5269935	0					
ANR	5270087	Identifier	put_bytes		5269935	0					
ANR	5270088	ArgumentList	& l		5269935	1					
ANR	5270089	Argument	& l		5269935	0					
ANR	5270090	UnaryOperationExpression	& l		5269935	0					
ANR	5270091	UnaryOperator	&		5269935	0					
ANR	5270092	Identifier	l		5269935	1					
ANR	5270093	Argument	sizeof ( long )		5269935	1					
ANR	5270094	SizeofExpression	sizeof ( long )		5269935	0					
ANR	5270095	Sizeof	sizeof		5269935	0					
ANR	5270096	SizeofOperand	long		5269935	1					
ANR	5270097	SizeofExpression	sizeof ( long )		5269935	1					
ANR	5270098	Sizeof	sizeof		5269935	0					
ANR	5270099	SizeofOperand	long		5269935	1					
ANR	5270100	ReturnStatement	return FALSE ;	999:53:19871:19883	5269935	1	True				
ANR	5270101	Identifier	FALSE		5269935	0					
ANR	5270102	BreakStatement	break ;	1001:3:19893:19898	5269935	5	True				
ANR	5270103	Label	case ascii :	1003:2:19903:19913	5269935	6	True				
ANR	5270104	Identifier	ascii		5269935	0					
ANR	5270105	ReturnStatement	return FALSE ;	1004:3:19918:19930	5269935	7	True				
ANR	5270106	Identifier	FALSE		5269935	0					
ANR	5270107	ReturnStatement	return TRUE ;	1007:1:19937:19948	5269935	3	True				
ANR	5270108	Identifier	TRUE		5269935	0					
ANR	5270109	ReturnType	int		5269935	1					
ANR	5270110	Identifier	Stream :: put		5269935	2					
ANR	5270111	ParameterList	long l		5269935	3					
ANR	5270112	Parameter	long l	976:13:19233:19238	5269935	0	True				
ANR	5270113	ParameterType	long		5269935	0					
ANR	5270114	Identifier	l		5269935	1					
ANR	5270115	CFGEntryNode	ENTRY		5269935		True				
ANR	5270116	CFGExitNode	EXIT		5269935		True				
ANR	5270117	Symbol	_code		5269935						
ANR	5270118	Symbol	INT_SIZE		5269935						
ANR	5270119	Symbol	TRUE		5269935						
ANR	5270120	Symbol	l		5269935						
ANR	5270121	Symbol	put		5269935						
ANR	5270122	Symbol	htonL		5269935						
ANR	5270123	Symbol	pad		5269935						
ANR	5270124	Symbol	& l		5269935						
ANR	5270125	Symbol	s		5269935						
ANR	5270126	Symbol	hton_is_noop		5269935						
ANR	5270127	Symbol	FALSE		5269935						
ANR	5270128	Symbol	put_bytes		5269935						
ANR	5270129	Symbol	& pad		5269935						
ANR	5270130	Function	Stream :: put	1012:0:19955:20669							
ANR	5270131	FunctionDef	Stream :: put (unsigned long l)		5270130	0					
ANR	5270132	CompoundStatement		1014:0:19990:20669	5270130	0					
ANR	5270133	IdentifierDeclStatement	char pad ;	1015:1:19993:20001	5270130	0	True				
ANR	5270134	IdentifierDecl	pad		5270130	0					
ANR	5270135	IdentifierDeclType	char		5270130	0					
ANR	5270136	Identifier	pad		5270130	1					
ANR	5270137	ExpressionStatement	"NETWORK_TRACE ( ""put long "" << l )"	1016:2:20005:20036	5270130	1	True				
ANR	5270138	CallExpression	"NETWORK_TRACE ( ""put long "" << l )"		5270130	0					
ANR	5270139	Callee	NETWORK_TRACE		5270130	0					
ANR	5270140	Identifier	NETWORK_TRACE		5270130	0					
ANR	5270141	ArgumentList	"""put long "" << l"		5270130	1					
ANR	5270142	Argument	"""put long "" << l"		5270130	0					
ANR	5270143	ShiftExpression	"""put long "" << l"		5270130	0		<<			
ANR	5270144	PrimaryExpression	"""put long """		5270130	0					
ANR	5270145	Identifier	l		5270130	1					
ANR	5270146	SwitchStatement	switch ( _code )		5270130	2					
ANR	5270147	Condition	_code	1018:8:20047:20051	5270130	0	True				
ANR	5270148	Identifier	_code		5270130	0					
ANR	5270149	CompoundStatement		5:14:62:62	5270130	1					
ANR	5270150	Label	case internal :	1019:2:20057:20070	5270130	0	True				
ANR	5270151	Identifier	internal		5270130	0					
ANR	5270152	IfStatement	"if ( put_bytes ( & l , sizeof ( long ) ) != sizeof ( long ) )"		5270130	1					
ANR	5270153	Condition	"put_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"	1020:7:20079:20121	5270130	0	True				
ANR	5270154	EqualityExpression	"put_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"		5270130	0		!=			
ANR	5270155	CallExpression	"put_bytes ( & l , sizeof ( long ) )"		5270130	0					
ANR	5270156	Callee	put_bytes		5270130	0					
ANR	5270157	Identifier	put_bytes		5270130	0					
ANR	5270158	ArgumentList	& l		5270130	1					
ANR	5270159	Argument	& l		5270130	0					
ANR	5270160	UnaryOperationExpression	& l		5270130	0					
ANR	5270161	UnaryOperator	&		5270130	0					
ANR	5270162	Identifier	l		5270130	1					
ANR	5270163	Argument	sizeof ( long )		5270130	1					
ANR	5270164	SizeofExpression	sizeof ( long )		5270130	0					
ANR	5270165	Sizeof	sizeof		5270130	0					
ANR	5270166	SizeofOperand	long		5270130	1					
ANR	5270167	SizeofExpression	sizeof ( long )		5270130	1					
ANR	5270168	Sizeof	sizeof		5270130	0					
ANR	5270169	SizeofOperand	long		5270130	1					
ANR	5270170	ReturnStatement	return FALSE ;	1020:52:20124:20136	5270130	1	True				
ANR	5270171	Identifier	FALSE		5270130	0					
ANR	5270172	BreakStatement	break ;	1021:3:20141:20146	5270130	2	True				
ANR	5270173	Label	case external :	1023:2:20151:20164	5270130	3	True				
ANR	5270174	Identifier	external		5270130	0					
ANR	5270175	IfStatement	if ( ( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE ) )		5270130	4					
ANR	5270176	Condition	( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE )	1024:7:20173:20230	5270130	0	True				
ANR	5270177	OrExpression	( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE )		5270130	0		||			
ANR	5270178	EqualityExpression	sizeof ( int ) == sizeof ( long )		5270130	0		==			
ANR	5270179	SizeofExpression	sizeof ( int )		5270130	0					
ANR	5270180	Sizeof	sizeof		5270130	0					
ANR	5270181	SizeofOperand	int		5270130	1					
ANR	5270182	SizeofExpression	sizeof ( long )		5270130	1					
ANR	5270183	Sizeof	sizeof		5270130	0					
ANR	5270184	SizeofOperand	long		5270130	1					
ANR	5270185	RelationalExpression	sizeof ( long ) > INT_SIZE		5270130	1		>			
ANR	5270186	SizeofExpression	sizeof ( long )		5270130	0					
ANR	5270187	Sizeof	sizeof		5270130	0					
ANR	5270188	SizeofOperand	long		5270130	1					
ANR	5270189	Identifier	INT_SIZE		5270130	1					
ANR	5270190	CompoundStatement		11:67:242:242	5270130	1					
ANR	5270191	ReturnStatement	return put ( ( unsigned int ) l ) ;	1025:4:20239:20266	5270130	0	True				
ANR	5270192	CallExpression	put ( ( unsigned int ) l )		5270130	0					
ANR	5270193	Callee	put		5270130	0					
ANR	5270194	Identifier	put		5270130	0					
ANR	5270195	ArgumentList	( unsigned int ) l		5270130	1					
ANR	5270196	Argument	( unsigned int ) l		5270130	0					
ANR	5270197	CastExpression	( unsigned int ) l		5270130	0					
ANR	5270198	CastTarget	unsigned int		5270130	0					
ANR	5270199	Identifier	l		5270130	1					
ANR	5270200	ElseStatement	else		5270130	0					
ANR	5270201	CompoundStatement		13:10:287:287	5270130	0					
ANR	5270202	IfStatement	if ( ! hton_is_noop ( ) )		5270130	0					
ANR	5270203	Condition	! hton_is_noop ( )	1027:8:20288:20302	5270130	0	True				
ANR	5270204	UnaryOperationExpression	! hton_is_noop ( )		5270130	0					
ANR	5270205	UnaryOperator	!		5270130	0					
ANR	5270206	CallExpression	hton_is_noop ( )		5270130	1					
ANR	5270207	Callee	hton_is_noop		5270130	0					
ANR	5270208	Identifier	hton_is_noop		5270130	0					
ANR	5270209	ArgumentList			5270130	1					
ANR	5270210	CompoundStatement		14:25:314:314	5270130	1					
ANR	5270211	ExpressionStatement	l = htonL ( l )	1028:5:20348:20360	5270130	0	True				
ANR	5270212	AssignmentExpression	l = htonL ( l )		5270130	0		=			
ANR	5270213	Identifier	l		5270130	0					
ANR	5270214	CallExpression	htonL ( l )		5270130	1					
ANR	5270215	Callee	htonL		5270130	0					
ANR	5270216	Identifier	htonL		5270130	0					
ANR	5270217	ArgumentList	l		5270130	1					
ANR	5270218	Argument	l		5270130	0					
ANR	5270219	Identifier	l		5270130	0					
ANR	5270220	IfStatement	if ( sizeof ( long ) < INT_SIZE )		5270130	1					
ANR	5270221	Condition	sizeof ( long ) < INT_SIZE	1030:8:20376:20398	5270130	0	True				
ANR	5270222	RelationalExpression	sizeof ( long ) < INT_SIZE		5270130	0		<			
ANR	5270223	SizeofExpression	sizeof ( long )		5270130	0					
ANR	5270224	Sizeof	sizeof		5270130	0					
ANR	5270225	SizeofOperand	long		5270130	1					
ANR	5270226	Identifier	INT_SIZE		5270130	1					
ANR	5270227	CompoundStatement		17:33:410:410	5270130	1					
ANR	5270228	ExpressionStatement	pad = 0	1031:5:20408:20415	5270130	0	True				
ANR	5270229	AssignmentExpression	pad = 0		5270130	0		=			
ANR	5270230	Identifier	pad		5270130	0					
ANR	5270231	PrimaryExpression	0		5270130	1					
ANR	5270232	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( long ) ; s ++ )		5270130	1					
ANR	5270233	ForInit	int s = 0 ;	1032:10:20427:20434	5270130	0	True				
ANR	5270234	IdentifierDeclStatement	int s = 0 ;		5270130	0					
ANR	5270235	IdentifierDecl	s = 0		5270130	0					
ANR	5270236	IdentifierDeclType	int		5270130	0					
ANR	5270237	Identifier	s		5270130	1					
ANR	5270238	AssignmentExpression	s = 0		5270130	2		=			
ANR	5270239	Identifier	s		5270130	0					
ANR	5270240	PrimaryExpression	0		5270130	1					
ANR	5270241	Condition	s < INT_SIZE - ( int ) sizeof ( long )	1032:19:20436:20465	5270130	1	True				
ANR	5270242	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( long )		5270130	0		<			
ANR	5270243	Identifier	s		5270130	0					
ANR	5270244	AdditiveExpression	INT_SIZE - ( int ) sizeof ( long )		5270130	1		-			
ANR	5270245	Identifier	INT_SIZE		5270130	0					
ANR	5270246	CastExpression	( int ) sizeof ( long )		5270130	1					
ANR	5270247	CastTarget	int		5270130	0					
ANR	5270248	SizeofExpression	sizeof ( long )		5270130	1					
ANR	5270249	Sizeof	sizeof		5270130	0					
ANR	5270250	SizeofOperand	long		5270130	1					
ANR	5270251	PostIncDecOperationExpression	s ++	1032:51:20468:20470	5270130	2	True				
ANR	5270252	Identifier	s		5270130	0					
ANR	5270253	IncDec	++		5270130	1					
ANR	5270254	CompoundStatement		19:56:482:482	5270130	3					
ANR	5270255	IfStatement	"if ( put_bytes ( & pad , 1 ) != 1 )"		5270130	0					
ANR	5270256	Condition	"put_bytes ( & pad , 1 ) != 1"	1033:10:20485:20507	5270130	0	True				
ANR	5270257	EqualityExpression	"put_bytes ( & pad , 1 ) != 1"		5270130	0		!=			
ANR	5270258	CallExpression	"put_bytes ( & pad , 1 )"		5270130	0					
ANR	5270259	Callee	put_bytes		5270130	0					
ANR	5270260	Identifier	put_bytes		5270130	0					
ANR	5270261	ArgumentList	& pad		5270130	1					
ANR	5270262	Argument	& pad		5270130	0					
ANR	5270263	UnaryOperationExpression	& pad		5270130	0					
ANR	5270264	UnaryOperator	&		5270130	0					
ANR	5270265	Identifier	pad		5270130	1					
ANR	5270266	Argument	1		5270130	1					
ANR	5270267	PrimaryExpression	1		5270130	0					
ANR	5270268	PrimaryExpression	1		5270130	1					
ANR	5270269	ReturnStatement	return FALSE ;	1033:35:20510:20522	5270130	1	True				
ANR	5270270	Identifier	FALSE		5270130	0					
ANR	5270271	IfStatement	"if ( put_bytes ( & l , sizeof ( long ) ) != sizeof ( long ) )"		5270130	2					
ANR	5270272	Condition	"put_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"	1036:8:20545:20587	5270130	0	True				
ANR	5270273	EqualityExpression	"put_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"		5270130	0		!=			
ANR	5270274	CallExpression	"put_bytes ( & l , sizeof ( long ) )"		5270130	0					
ANR	5270275	Callee	put_bytes		5270130	0					
ANR	5270276	Identifier	put_bytes		5270130	0					
ANR	5270277	ArgumentList	& l		5270130	1					
ANR	5270278	Argument	& l		5270130	0					
ANR	5270279	UnaryOperationExpression	& l		5270130	0					
ANR	5270280	UnaryOperator	&		5270130	0					
ANR	5270281	Identifier	l		5270130	1					
ANR	5270282	Argument	sizeof ( long )		5270130	1					
ANR	5270283	SizeofExpression	sizeof ( long )		5270130	0					
ANR	5270284	Sizeof	sizeof		5270130	0					
ANR	5270285	SizeofOperand	long		5270130	1					
ANR	5270286	SizeofExpression	sizeof ( long )		5270130	1					
ANR	5270287	Sizeof	sizeof		5270130	0					
ANR	5270288	SizeofOperand	long		5270130	1					
ANR	5270289	ReturnStatement	return FALSE ;	1036:53:20590:20602	5270130	1	True				
ANR	5270290	Identifier	FALSE		5270130	0					
ANR	5270291	BreakStatement	break ;	1038:3:20612:20617	5270130	5	True				
ANR	5270292	Label	case ascii :	1040:2:20622:20632	5270130	6	True				
ANR	5270293	Identifier	ascii		5270130	0					
ANR	5270294	ReturnStatement	return FALSE ;	1041:3:20637:20649	5270130	7	True				
ANR	5270295	Identifier	FALSE		5270130	0					
ANR	5270296	ReturnStatement	return TRUE ;	1044:1:20656:20667	5270130	3	True				
ANR	5270297	Identifier	TRUE		5270130	0					
ANR	5270298	ReturnType	int		5270130	1					
ANR	5270299	Identifier	Stream :: put		5270130	2					
ANR	5270300	ParameterList	unsigned long l		5270130	3					
ANR	5270301	Parameter	unsigned long l	1013:13:19973:19987	5270130	0	True				
ANR	5270302	ParameterType	unsigned long		5270130	0					
ANR	5270303	Identifier	l		5270130	1					
ANR	5270304	CFGEntryNode	ENTRY		5270130		True				
ANR	5270305	CFGExitNode	EXIT		5270130		True				
ANR	5270306	Symbol	_code		5270130						
ANR	5270307	Symbol	INT_SIZE		5270130						
ANR	5270308	Symbol	TRUE		5270130						
ANR	5270309	Symbol	l		5270130						
ANR	5270310	Symbol	put		5270130						
ANR	5270311	Symbol	htonL		5270130						
ANR	5270312	Symbol	pad		5270130						
ANR	5270313	Symbol	& l		5270130						
ANR	5270314	Symbol	s		5270130						
ANR	5270315	Symbol	hton_is_noop		5270130						
ANR	5270316	Symbol	FALSE		5270130						
ANR	5270317	Symbol	put_bytes		5270130						
ANR	5270318	Symbol	& pad		5270130						
ANR	5270319	Function	htonLL	1052:0:20806:21053							
ANR	5270320	FunctionDef	htonLL (uint64_t hostint)		5270319	0					
ANR	5270321	CompoundStatement		1053:0:20847:21053	5270319	0					
ANR	5270322	IdentifierDeclStatement	uint64_t netint ;	1054:1:20850:20865	5270319	0	True				
ANR	5270323	IdentifierDecl	netint		5270319	0					
ANR	5270324	IdentifierDeclType	uint64_t		5270319	0					
ANR	5270325	Identifier	netint		5270319	1					
ANR	5270326	IdentifierDeclStatement	char * hostp = ( char * ) & hostint ;	1055:1:20868:20898	5270319	1	True				
ANR	5270327	IdentifierDecl	* hostp = ( char * ) & hostint		5270319	0					
ANR	5270328	IdentifierDeclType	char *		5270319	0					
ANR	5270329	Identifier	hostp		5270319	1					
ANR	5270330	AssignmentExpression	* hostp = ( char * ) & hostint		5270319	2		=			
ANR	5270331	Identifier	hostp		5270319	0					
ANR	5270332	CastExpression	( char * ) & hostint		5270319	1					
ANR	5270333	CastTarget	char *		5270319	0					
ANR	5270334	UnaryOperationExpression	& hostint		5270319	1					
ANR	5270335	UnaryOperator	&		5270319	0					
ANR	5270336	Identifier	hostint		5270319	1					
ANR	5270337	IdentifierDeclStatement	char * netp = ( char * ) & netint ;	1056:1:20901:20929	5270319	2	True				
ANR	5270338	IdentifierDecl	* netp = ( char * ) & netint		5270319	0					
ANR	5270339	IdentifierDeclType	char *		5270319	0					
ANR	5270340	Identifier	netp		5270319	1					
ANR	5270341	AssignmentExpression	* netp = ( char * ) & netint		5270319	2		=			
ANR	5270342	Identifier	netp		5270319	0					
ANR	5270343	CastExpression	( char * ) & netint		5270319	1					
ANR	5270344	CastTarget	char *		5270319	0					
ANR	5270345	UnaryOperationExpression	& netint		5270319	1					
ANR	5270346	UnaryOperator	&		5270319	0					
ANR	5270347	Identifier	netint		5270319	1					
ANR	5270348	ForStatement	"for ( unsigned int i = 0 , j = sizeof ( uint64_t ) - 1 ; i < sizeof ( uint64_t ) ; i ++ , j -- )"		5270319	3					
ANR	5270349	ForInit	"unsigned int i = 0 , j = sizeof ( uint64_t ) - 1 ;"	1058:6:20938:20976	5270319	0	True				
ANR	5270350	IdentifierDeclStatement	"unsigned int i = 0 , j = sizeof ( uint64_t ) - 1 ;"		5270319	0					
ANR	5270351	IdentifierDecl	i = 0		5270319	0					
ANR	5270352	IdentifierDeclType	unsigned int		5270319	0					
ANR	5270353	Identifier	i		5270319	1					
ANR	5270354	AssignmentExpression	i = 0		5270319	2		=			
ANR	5270355	Identifier	i		5270319	0					
ANR	5270356	PrimaryExpression	0		5270319	1					
ANR	5270357	IdentifierDecl	j = sizeof ( uint64_t ) - 1		5270319	1					
ANR	5270358	IdentifierDeclType	unsigned int		5270319	0					
ANR	5270359	Identifier	j		5270319	1					
ANR	5270360	AssignmentExpression	j = sizeof ( uint64_t ) - 1		5270319	2		=			
ANR	5270361	Identifier	j		5270319	0					
ANR	5270362	AdditiveExpression	sizeof ( uint64_t ) - 1		5270319	1		-			
ANR	5270363	SizeofExpression	sizeof ( uint64_t )		5270319	0					
ANR	5270364	Sizeof	sizeof		5270319	0					
ANR	5270365	SizeofOperand	uint64_t		5270319	1					
ANR	5270366	PrimaryExpression	1		5270319	1					
ANR	5270367	Condition	i < sizeof ( uint64_t )	1058:46:20978:20997	5270319	1	True				
ANR	5270368	RelationalExpression	i < sizeof ( uint64_t )		5270319	0		<			
ANR	5270369	Identifier	i		5270319	0					
ANR	5270370	SizeofExpression	sizeof ( uint64_t )		5270319	1					
ANR	5270371	Sizeof	sizeof		5270319	0					
ANR	5270372	SizeofOperand	uint64_t		5270319	1					
ANR	5270373	Expression	"i ++ , j --"	1058:68:21000:21007	5270319	2	True				
ANR	5270374	PostIncDecOperationExpression	i ++		5270319	0					
ANR	5270375	Identifier	i		5270319	0					
ANR	5270376	IncDec	++		5270319	1					
ANR	5270377	PostIncDecOperationExpression	j --		5270319	1					
ANR	5270378	Identifier	j		5270319	0					
ANR	5270379	IncDec	--		5270319	1					
ANR	5270380	CompoundStatement		6:78:162:162	5270319	3					
ANR	5270381	ExpressionStatement	netp [ i ] = hostp [ j ]	1059:2:21014:21032	5270319	0	True				
ANR	5270382	AssignmentExpression	netp [ i ] = hostp [ j ]		5270319	0		=			
ANR	5270383	ArrayIndexing	netp [ i ]		5270319	0					
ANR	5270384	Identifier	netp		5270319	0					
ANR	5270385	Identifier	i		5270319	1					
ANR	5270386	ArrayIndexing	hostp [ j ]		5270319	1					
ANR	5270387	Identifier	hostp		5270319	0					
ANR	5270388	Identifier	j		5270319	1					
ANR	5270389	ReturnStatement	return netint ;	1061:1:21038:21051	5270319	4	True				
ANR	5270390	Identifier	netint		5270319	0					
ANR	5270391	ReturnType	static uint64_t		5270319	1					
ANR	5270392	Identifier	htonLL		5270319	2					
ANR	5270393	ParameterList	uint64_t hostint		5270319	3					
ANR	5270394	Parameter	uint64_t hostint	1052:23:20829:20844	5270319	0	True				
ANR	5270395	ParameterType	uint64_t		5270319	0					
ANR	5270396	Identifier	hostint		5270319	1					
ANR	5270397	CFGEntryNode	ENTRY		5270319		True				
ANR	5270398	CFGExitNode	EXIT		5270319		True				
ANR	5270399	Symbol	netp		5270319						
ANR	5270400	Symbol	& netint		5270319						
ANR	5270401	Symbol	* i		5270319						
ANR	5270402	Symbol	* j		5270319						
ANR	5270403	Symbol	hostp		5270319						
ANR	5270404	Symbol	& hostint		5270319						
ANR	5270405	Symbol	netint		5270319						
ANR	5270406	Symbol	i		5270319						
ANR	5270407	Symbol	j		5270319						
ANR	5270408	Symbol	hostint		5270319						
ANR	5270409	Symbol	* netp		5270319						
ANR	5270410	Symbol	* hostp		5270319						
ANR	5270411	Function	ntohLL	1066:0:21146:21394							
ANR	5270412	FunctionDef	ntohLL (uint64_t netint)		5270411	0					
ANR	5270413	CompoundStatement		1067:0:21186:21394	5270411	0					
ANR	5270414	IdentifierDeclStatement	uint64_t hostint ;	1068:1:21189:21205	5270411	0	True				
ANR	5270415	IdentifierDecl	hostint		5270411	0					
ANR	5270416	IdentifierDeclType	uint64_t		5270411	0					
ANR	5270417	Identifier	hostint		5270411	1					
ANR	5270418	IdentifierDeclStatement	char * hostp = ( char * ) & hostint ;	1069:1:21208:21238	5270411	1	True				
ANR	5270419	IdentifierDecl	* hostp = ( char * ) & hostint		5270411	0					
ANR	5270420	IdentifierDeclType	char *		5270411	0					
ANR	5270421	Identifier	hostp		5270411	1					
ANR	5270422	AssignmentExpression	* hostp = ( char * ) & hostint		5270411	2		=			
ANR	5270423	Identifier	hostp		5270411	0					
ANR	5270424	CastExpression	( char * ) & hostint		5270411	1					
ANR	5270425	CastTarget	char *		5270411	0					
ANR	5270426	UnaryOperationExpression	& hostint		5270411	1					
ANR	5270427	UnaryOperator	&		5270411	0					
ANR	5270428	Identifier	hostint		5270411	1					
ANR	5270429	IdentifierDeclStatement	char * netp = ( char * ) & netint ;	1070:1:21241:21269	5270411	2	True				
ANR	5270430	IdentifierDecl	* netp = ( char * ) & netint		5270411	0					
ANR	5270431	IdentifierDeclType	char *		5270411	0					
ANR	5270432	Identifier	netp		5270411	1					
ANR	5270433	AssignmentExpression	* netp = ( char * ) & netint		5270411	2		=			
ANR	5270434	Identifier	netp		5270411	0					
ANR	5270435	CastExpression	( char * ) & netint		5270411	1					
ANR	5270436	CastTarget	char *		5270411	0					
ANR	5270437	UnaryOperationExpression	& netint		5270411	1					
ANR	5270438	UnaryOperator	&		5270411	0					
ANR	5270439	Identifier	netint		5270411	1					
ANR	5270440	ForStatement	"for ( unsigned int i = 0 , j = sizeof ( uint64_t ) - 1 ; i < sizeof ( uint64_t ) ; i ++ , j -- )"		5270411	3					
ANR	5270441	ForInit	"unsigned int i = 0 , j = sizeof ( uint64_t ) - 1 ;"	1072:6:21278:21316	5270411	0	True				
ANR	5270442	IdentifierDeclStatement	"unsigned int i = 0 , j = sizeof ( uint64_t ) - 1 ;"		5270411	0					
ANR	5270443	IdentifierDecl	i = 0		5270411	0					
ANR	5270444	IdentifierDeclType	unsigned int		5270411	0					
ANR	5270445	Identifier	i		5270411	1					
ANR	5270446	AssignmentExpression	i = 0		5270411	2		=			
ANR	5270447	Identifier	i		5270411	0					
ANR	5270448	PrimaryExpression	0		5270411	1					
ANR	5270449	IdentifierDecl	j = sizeof ( uint64_t ) - 1		5270411	1					
ANR	5270450	IdentifierDeclType	unsigned int		5270411	0					
ANR	5270451	Identifier	j		5270411	1					
ANR	5270452	AssignmentExpression	j = sizeof ( uint64_t ) - 1		5270411	2		=			
ANR	5270453	Identifier	j		5270411	0					
ANR	5270454	AdditiveExpression	sizeof ( uint64_t ) - 1		5270411	1		-			
ANR	5270455	SizeofExpression	sizeof ( uint64_t )		5270411	0					
ANR	5270456	Sizeof	sizeof		5270411	0					
ANR	5270457	SizeofOperand	uint64_t		5270411	1					
ANR	5270458	PrimaryExpression	1		5270411	1					
ANR	5270459	Condition	i < sizeof ( uint64_t )	1072:46:21318:21337	5270411	1	True				
ANR	5270460	RelationalExpression	i < sizeof ( uint64_t )		5270411	0		<			
ANR	5270461	Identifier	i		5270411	0					
ANR	5270462	SizeofExpression	sizeof ( uint64_t )		5270411	1					
ANR	5270463	Sizeof	sizeof		5270411	0					
ANR	5270464	SizeofOperand	uint64_t		5270411	1					
ANR	5270465	Expression	"i ++ , j --"	1072:68:21340:21347	5270411	2	True				
ANR	5270466	PostIncDecOperationExpression	i ++		5270411	0					
ANR	5270467	Identifier	i		5270411	0					
ANR	5270468	IncDec	++		5270411	1					
ANR	5270469	PostIncDecOperationExpression	j --		5270411	1					
ANR	5270470	Identifier	j		5270411	0					
ANR	5270471	IncDec	--		5270411	1					
ANR	5270472	CompoundStatement		6:78:163:163	5270411	3					
ANR	5270473	ExpressionStatement	hostp [ i ] = netp [ j ]	1073:2:21354:21372	5270411	0	True				
ANR	5270474	AssignmentExpression	hostp [ i ] = netp [ j ]		5270411	0		=			
ANR	5270475	ArrayIndexing	hostp [ i ]		5270411	0					
ANR	5270476	Identifier	hostp		5270411	0					
ANR	5270477	Identifier	i		5270411	1					
ANR	5270478	ArrayIndexing	netp [ j ]		5270411	1					
ANR	5270479	Identifier	netp		5270411	0					
ANR	5270480	Identifier	j		5270411	1					
ANR	5270481	ReturnStatement	return hostint ;	1075:1:21378:21392	5270411	4	True				
ANR	5270482	Identifier	hostint		5270411	0					
ANR	5270483	ReturnType	static uint64_t		5270411	1					
ANR	5270484	Identifier	ntohLL		5270411	2					
ANR	5270485	ParameterList	uint64_t netint		5270411	3					
ANR	5270486	Parameter	uint64_t netint	1066:23:21169:21183	5270411	0	True				
ANR	5270487	ParameterType	uint64_t		5270411	0					
ANR	5270488	Identifier	netint		5270411	1					
ANR	5270489	CFGEntryNode	ENTRY		5270411		True				
ANR	5270490	CFGExitNode	EXIT		5270411		True				
ANR	5270491	Symbol	netp		5270411						
ANR	5270492	Symbol	& netint		5270411						
ANR	5270493	Symbol	* i		5270411						
ANR	5270494	Symbol	* j		5270411						
ANR	5270495	Symbol	hostp		5270411						
ANR	5270496	Symbol	& hostint		5270411						
ANR	5270497	Symbol	netint		5270411						
ANR	5270498	Symbol	i		5270411						
ANR	5270499	Symbol	j		5270411						
ANR	5270500	Symbol	hostint		5270411						
ANR	5270501	Symbol	* netp		5270411						
ANR	5270502	Symbol	* hostp		5270411						
ANR	5270503	Function	Stream :: put	1078:0:21397:22163							
ANR	5270504	FunctionDef	Stream :: put (int64_t l)		5270503	0					
ANR	5270505	CompoundStatement		1080:0:21426:22163	5270503	0					
ANR	5270506	IdentifierDeclStatement	char pad ;	1081:1:21429:21437	5270503	0	True				
ANR	5270507	IdentifierDecl	pad		5270503	0					
ANR	5270508	IdentifierDeclType	char		5270503	0					
ANR	5270509	Identifier	pad		5270503	1					
ANR	5270510	ExpressionStatement	"NETWORK_TRACE ( ""put int64_t"" << l )"	1082:2:21441:21474	5270503	1	True				
ANR	5270511	CallExpression	"NETWORK_TRACE ( ""put int64_t"" << l )"		5270503	0					
ANR	5270512	Callee	NETWORK_TRACE		5270503	0					
ANR	5270513	Identifier	NETWORK_TRACE		5270503	0					
ANR	5270514	ArgumentList	"""put int64_t"" << l"		5270503	1					
ANR	5270515	Argument	"""put int64_t"" << l"		5270503	0					
ANR	5270516	ShiftExpression	"""put int64_t"" << l"		5270503	0		<<			
ANR	5270517	PrimaryExpression	"""put int64_t"""		5270503	0					
ANR	5270518	Identifier	l		5270503	1					
ANR	5270519	SwitchStatement	switch ( _code )		5270503	2					
ANR	5270520	Condition	_code	1084:8:21485:21489	5270503	0	True				
ANR	5270521	Identifier	_code		5270503	0					
ANR	5270522	CompoundStatement		5:14:64:64	5270503	1					
ANR	5270523	Label	case internal :	1085:2:21495:21508	5270503	0	True				
ANR	5270524	Identifier	internal		5270503	0					
ANR	5270525	IfStatement	"if ( put_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t ) )"		5270503	1					
ANR	5270526	Condition	"put_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t )"	1086:7:21517:21565	5270503	0	True				
ANR	5270527	EqualityExpression	"put_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t )"		5270503	0		!=			
ANR	5270528	CallExpression	"put_bytes ( & l , sizeof ( int64_t ) )"		5270503	0					
ANR	5270529	Callee	put_bytes		5270503	0					
ANR	5270530	Identifier	put_bytes		5270503	0					
ANR	5270531	ArgumentList	& l		5270503	1					
ANR	5270532	Argument	& l		5270503	0					
ANR	5270533	UnaryOperationExpression	& l		5270503	0					
ANR	5270534	UnaryOperator	&		5270503	0					
ANR	5270535	Identifier	l		5270503	1					
ANR	5270536	Argument	sizeof ( int64_t )		5270503	1					
ANR	5270537	SizeofExpression	sizeof ( int64_t )		5270503	0					
ANR	5270538	Sizeof	sizeof		5270503	0					
ANR	5270539	SizeofOperand	int64_t		5270503	1					
ANR	5270540	SizeofExpression	sizeof ( int64_t )		5270503	1					
ANR	5270541	Sizeof	sizeof		5270503	0					
ANR	5270542	SizeofOperand	int64_t		5270503	1					
ANR	5270543	ReturnStatement	return FALSE ;	1086:58:21568:21580	5270503	1	True				
ANR	5270544	Identifier	FALSE		5270503	0					
ANR	5270545	BreakStatement	break ;	1087:3:21585:21590	5270503	2	True				
ANR	5270546	Label	case external :	1089:2:21595:21608	5270503	3	True				
ANR	5270547	Identifier	external		5270503	0					
ANR	5270548	IfStatement	if ( ( sizeof ( int ) == sizeof ( int64_t ) ) || ( sizeof ( int64_t ) > INT_SIZE ) )		5270503	4					
ANR	5270549	Condition	( sizeof ( int ) == sizeof ( int64_t ) ) || ( sizeof ( int64_t ) > INT_SIZE )	1090:7:21617:21680	5270503	0	True				
ANR	5270550	OrExpression	( sizeof ( int ) == sizeof ( int64_t ) ) || ( sizeof ( int64_t ) > INT_SIZE )		5270503	0		||			
ANR	5270551	EqualityExpression	sizeof ( int ) == sizeof ( int64_t )		5270503	0		==			
ANR	5270552	SizeofExpression	sizeof ( int )		5270503	0					
ANR	5270553	Sizeof	sizeof		5270503	0					
ANR	5270554	SizeofOperand	int		5270503	1					
ANR	5270555	SizeofExpression	sizeof ( int64_t )		5270503	1					
ANR	5270556	Sizeof	sizeof		5270503	0					
ANR	5270557	SizeofOperand	int64_t		5270503	1					
ANR	5270558	RelationalExpression	sizeof ( int64_t ) > INT_SIZE		5270503	1		>			
ANR	5270559	SizeofExpression	sizeof ( int64_t )		5270503	0					
ANR	5270560	Sizeof	sizeof		5270503	0					
ANR	5270561	SizeofOperand	int64_t		5270503	1					
ANR	5270562	Identifier	INT_SIZE		5270503	1					
ANR	5270563	CompoundStatement		11:73:256:256	5270503	1					
ANR	5270564	ReturnStatement	return put ( ( long ) l ) ;	1091:4:21689:21708	5270503	0	True				
ANR	5270565	CallExpression	put ( ( long ) l )		5270503	0					
ANR	5270566	Callee	put		5270503	0					
ANR	5270567	Identifier	put		5270503	0					
ANR	5270568	ArgumentList	( long ) l		5270503	1					
ANR	5270569	Argument	( long ) l		5270503	0					
ANR	5270570	CastExpression	( long ) l		5270503	0					
ANR	5270571	CastTarget	long		5270503	0					
ANR	5270572	Identifier	l		5270503	1					
ANR	5270573	ElseStatement	else		5270503	0					
ANR	5270574	CompoundStatement		13:10:293:293	5270503	0					
ANR	5270575	IfStatement	if ( ! hton_is_noop ( ) )		5270503	0					
ANR	5270576	Condition	! hton_is_noop ( )	1093:8:21730:21744	5270503	0	True				
ANR	5270577	UnaryOperationExpression	! hton_is_noop ( )		5270503	0					
ANR	5270578	UnaryOperator	!		5270503	0					
ANR	5270579	CallExpression	hton_is_noop ( )		5270503	1					
ANR	5270580	Callee	hton_is_noop		5270503	0					
ANR	5270581	Identifier	hton_is_noop		5270503	0					
ANR	5270582	ArgumentList			5270503	1					
ANR	5270583	CompoundStatement		14:25:320:320	5270503	1					
ANR	5270584	ExpressionStatement	l = htonLL ( l )	1094:5:21790:21803	5270503	0	True				
ANR	5270585	AssignmentExpression	l = htonLL ( l )		5270503	0		=			
ANR	5270586	Identifier	l		5270503	0					
ANR	5270587	CallExpression	htonLL ( l )		5270503	1					
ANR	5270588	Callee	htonLL		5270503	0					
ANR	5270589	Identifier	htonLL		5270503	0					
ANR	5270590	ArgumentList	l		5270503	1					
ANR	5270591	Argument	l		5270503	0					
ANR	5270592	Identifier	l		5270503	0					
ANR	5270593	IfStatement	if ( sizeof ( int64_t ) < INT_SIZE )		5270503	1					
ANR	5270594	Condition	sizeof ( int64_t ) < INT_SIZE	1096:8:21819:21844	5270503	0	True				
ANR	5270595	RelationalExpression	sizeof ( int64_t ) < INT_SIZE		5270503	0		<			
ANR	5270596	SizeofExpression	sizeof ( int64_t )		5270503	0					
ANR	5270597	Sizeof	sizeof		5270503	0					
ANR	5270598	SizeofOperand	int64_t		5270503	1					
ANR	5270599	Identifier	INT_SIZE		5270503	1					
ANR	5270600	CompoundStatement		17:36:420:420	5270503	1					
ANR	5270601	ExpressionStatement	pad = ( l >= 0 ) ? 0 : 0xff	1097:5:21854:21879	5270503	0	True				
ANR	5270602	AssignmentExpression	pad = ( l >= 0 ) ? 0 : 0xff		5270503	0		=			
ANR	5270603	Identifier	pad		5270503	0					
ANR	5270604	ConditionalExpression	( l >= 0 ) ? 0 : 0xff		5270503	1					
ANR	5270605	Condition	l >= 0		5270503	0					
ANR	5270606	RelationalExpression	l >= 0		5270503	0		>=			
ANR	5270607	Identifier	l		5270503	0					
ANR	5270608	PrimaryExpression	0		5270503	1					
ANR	5270609	PrimaryExpression	0		5270503	1					
ANR	5270610	PrimaryExpression	0xff		5270503	2					
ANR	5270611	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( int64_t ) ; s ++ )		5270503	1					
ANR	5270612	ForInit	int s = 0 ;	1098:10:21912:21919	5270503	0	True				
ANR	5270613	IdentifierDeclStatement	int s = 0 ;		5270503	0					
ANR	5270614	IdentifierDecl	s = 0		5270503	0					
ANR	5270615	IdentifierDeclType	int		5270503	0					
ANR	5270616	Identifier	s		5270503	1					
ANR	5270617	AssignmentExpression	s = 0		5270503	2		=			
ANR	5270618	Identifier	s		5270503	0					
ANR	5270619	PrimaryExpression	0		5270503	1					
ANR	5270620	Condition	s < INT_SIZE - ( int ) sizeof ( int64_t )	1098:19:21921:21953	5270503	1	True				
ANR	5270621	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( int64_t )		5270503	0		<			
ANR	5270622	Identifier	s		5270503	0					
ANR	5270623	AdditiveExpression	INT_SIZE - ( int ) sizeof ( int64_t )		5270503	1		-			
ANR	5270624	Identifier	INT_SIZE		5270503	0					
ANR	5270625	CastExpression	( int ) sizeof ( int64_t )		5270503	1					
ANR	5270626	CastTarget	int		5270503	0					
ANR	5270627	SizeofExpression	sizeof ( int64_t )		5270503	1					
ANR	5270628	Sizeof	sizeof		5270503	0					
ANR	5270629	SizeofOperand	int64_t		5270503	1					
ANR	5270630	PostIncDecOperationExpression	s ++	1098:54:21956:21958	5270503	2	True				
ANR	5270631	Identifier	s		5270503	0					
ANR	5270632	IncDec	++		5270503	1					
ANR	5270633	CompoundStatement		19:59:534:534	5270503	3					
ANR	5270634	IfStatement	"if ( put_bytes ( & pad , 1 ) != 1 )"		5270503	0					
ANR	5270635	Condition	"put_bytes ( & pad , 1 ) != 1"	1099:10:21973:21995	5270503	0	True				
ANR	5270636	EqualityExpression	"put_bytes ( & pad , 1 ) != 1"		5270503	0		!=			
ANR	5270637	CallExpression	"put_bytes ( & pad , 1 )"		5270503	0					
ANR	5270638	Callee	put_bytes		5270503	0					
ANR	5270639	Identifier	put_bytes		5270503	0					
ANR	5270640	ArgumentList	& pad		5270503	1					
ANR	5270641	Argument	& pad		5270503	0					
ANR	5270642	UnaryOperationExpression	& pad		5270503	0					
ANR	5270643	UnaryOperator	&		5270503	0					
ANR	5270644	Identifier	pad		5270503	1					
ANR	5270645	Argument	1		5270503	1					
ANR	5270646	PrimaryExpression	1		5270503	0					
ANR	5270647	PrimaryExpression	1		5270503	1					
ANR	5270648	ReturnStatement	return FALSE ;	1099:35:21998:22010	5270503	1	True				
ANR	5270649	Identifier	FALSE		5270503	0					
ANR	5270650	IfStatement	"if ( put_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t ) )"		5270503	2					
ANR	5270651	Condition	"put_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t )"	1102:8:22033:22081	5270503	0	True				
ANR	5270652	EqualityExpression	"put_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t )"		5270503	0		!=			
ANR	5270653	CallExpression	"put_bytes ( & l , sizeof ( int64_t ) )"		5270503	0					
ANR	5270654	Callee	put_bytes		5270503	0					
ANR	5270655	Identifier	put_bytes		5270503	0					
ANR	5270656	ArgumentList	& l		5270503	1					
ANR	5270657	Argument	& l		5270503	0					
ANR	5270658	UnaryOperationExpression	& l		5270503	0					
ANR	5270659	UnaryOperator	&		5270503	0					
ANR	5270660	Identifier	l		5270503	1					
ANR	5270661	Argument	sizeof ( int64_t )		5270503	1					
ANR	5270662	SizeofExpression	sizeof ( int64_t )		5270503	0					
ANR	5270663	Sizeof	sizeof		5270503	0					
ANR	5270664	SizeofOperand	int64_t		5270503	1					
ANR	5270665	SizeofExpression	sizeof ( int64_t )		5270503	1					
ANR	5270666	Sizeof	sizeof		5270503	0					
ANR	5270667	SizeofOperand	int64_t		5270503	1					
ANR	5270668	ReturnStatement	return FALSE ;	1102:59:22084:22096	5270503	1	True				
ANR	5270669	Identifier	FALSE		5270503	0					
ANR	5270670	BreakStatement	break ;	1104:3:22106:22111	5270503	5	True				
ANR	5270671	Label	case ascii :	1106:2:22116:22126	5270503	6	True				
ANR	5270672	Identifier	ascii		5270503	0					
ANR	5270673	ReturnStatement	return FALSE ;	1107:3:22131:22143	5270503	7	True				
ANR	5270674	Identifier	FALSE		5270503	0					
ANR	5270675	ReturnStatement	return TRUE ;	1110:1:22150:22161	5270503	3	True				
ANR	5270676	Identifier	TRUE		5270503	0					
ANR	5270677	ReturnType	int		5270503	1					
ANR	5270678	Identifier	Stream :: put		5270503	2					
ANR	5270679	ParameterList	int64_t l		5270503	3					
ANR	5270680	Parameter	int64_t l	1079:13:21415:21423	5270503	0	True				
ANR	5270681	ParameterType	int64_t		5270503	0					
ANR	5270682	Identifier	l		5270503	1					
ANR	5270683	CFGEntryNode	ENTRY		5270503		True				
ANR	5270684	CFGExitNode	EXIT		5270503		True				
ANR	5270685	Symbol	_code		5270503						
ANR	5270686	Symbol	INT_SIZE		5270503						
ANR	5270687	Symbol	htonLL		5270503						
ANR	5270688	Symbol	TRUE		5270503						
ANR	5270689	Symbol	l		5270503						
ANR	5270690	Symbol	put		5270503						
ANR	5270691	Symbol	pad		5270503						
ANR	5270692	Symbol	& l		5270503						
ANR	5270693	Symbol	s		5270503						
ANR	5270694	Symbol	hton_is_noop		5270503						
ANR	5270695	Symbol	FALSE		5270503						
ANR	5270696	Symbol	put_bytes		5270503						
ANR	5270697	Symbol	& pad		5270503						
ANR	5270698	Function	Stream :: put	1114:0:22167:22913							
ANR	5270699	FunctionDef	Stream :: put (uint64_t l)		5270698	0					
ANR	5270700	CompoundStatement		1116:0:22197:22913	5270698	0					
ANR	5270701	IdentifierDeclStatement	char pad ;	1117:1:22200:22208	5270698	0	True				
ANR	5270702	IdentifierDecl	pad		5270698	0					
ANR	5270703	IdentifierDeclType	char		5270698	0					
ANR	5270704	Identifier	pad		5270698	1					
ANR	5270705	ExpressionStatement	"NETWORK_TRACE ( ""put uint64_t"" << l )"	1118:2:22212:22246	5270698	1	True				
ANR	5270706	CallExpression	"NETWORK_TRACE ( ""put uint64_t"" << l )"		5270698	0					
ANR	5270707	Callee	NETWORK_TRACE		5270698	0					
ANR	5270708	Identifier	NETWORK_TRACE		5270698	0					
ANR	5270709	ArgumentList	"""put uint64_t"" << l"		5270698	1					
ANR	5270710	Argument	"""put uint64_t"" << l"		5270698	0					
ANR	5270711	ShiftExpression	"""put uint64_t"" << l"		5270698	0		<<			
ANR	5270712	PrimaryExpression	"""put uint64_t"""		5270698	0					
ANR	5270713	Identifier	l		5270698	1					
ANR	5270714	SwitchStatement	switch ( _code )		5270698	2					
ANR	5270715	Condition	_code	1120:8:22257:22261	5270698	0	True				
ANR	5270716	Identifier	_code		5270698	0					
ANR	5270717	CompoundStatement		5:14:65:65	5270698	1					
ANR	5270718	Label	case internal :	1121:2:22267:22280	5270698	0	True				
ANR	5270719	Identifier	internal		5270698	0					
ANR	5270720	IfStatement	"if ( put_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t ) )"		5270698	1					
ANR	5270721	Condition	"put_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t )"	1122:7:22289:22339	5270698	0	True				
ANR	5270722	EqualityExpression	"put_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t )"		5270698	0		!=			
ANR	5270723	CallExpression	"put_bytes ( & l , sizeof ( uint64_t ) )"		5270698	0					
ANR	5270724	Callee	put_bytes		5270698	0					
ANR	5270725	Identifier	put_bytes		5270698	0					
ANR	5270726	ArgumentList	& l		5270698	1					
ANR	5270727	Argument	& l		5270698	0					
ANR	5270728	UnaryOperationExpression	& l		5270698	0					
ANR	5270729	UnaryOperator	&		5270698	0					
ANR	5270730	Identifier	l		5270698	1					
ANR	5270731	Argument	sizeof ( uint64_t )		5270698	1					
ANR	5270732	SizeofExpression	sizeof ( uint64_t )		5270698	0					
ANR	5270733	Sizeof	sizeof		5270698	0					
ANR	5270734	SizeofOperand	uint64_t		5270698	1					
ANR	5270735	SizeofExpression	sizeof ( uint64_t )		5270698	1					
ANR	5270736	Sizeof	sizeof		5270698	0					
ANR	5270737	SizeofOperand	uint64_t		5270698	1					
ANR	5270738	ReturnStatement	return FALSE ;	1122:60:22342:22354	5270698	1	True				
ANR	5270739	Identifier	FALSE		5270698	0					
ANR	5270740	BreakStatement	break ;	1123:3:22359:22364	5270698	2	True				
ANR	5270741	Label	case external :	1125:2:22369:22382	5270698	3	True				
ANR	5270742	Identifier	external		5270698	0					
ANR	5270743	IfStatement	if ( ( sizeof ( int ) == sizeof ( uint64_t ) ) || ( sizeof ( uint64_t ) > INT_SIZE ) )		5270698	4					
ANR	5270744	Condition	( sizeof ( int ) == sizeof ( uint64_t ) ) || ( sizeof ( uint64_t ) > INT_SIZE )	1126:7:22391:22456	5270698	0	True				
ANR	5270745	OrExpression	( sizeof ( int ) == sizeof ( uint64_t ) ) || ( sizeof ( uint64_t ) > INT_SIZE )		5270698	0		||			
ANR	5270746	EqualityExpression	sizeof ( int ) == sizeof ( uint64_t )		5270698	0		==			
ANR	5270747	SizeofExpression	sizeof ( int )		5270698	0					
ANR	5270748	Sizeof	sizeof		5270698	0					
ANR	5270749	SizeofOperand	int		5270698	1					
ANR	5270750	SizeofExpression	sizeof ( uint64_t )		5270698	1					
ANR	5270751	Sizeof	sizeof		5270698	0					
ANR	5270752	SizeofOperand	uint64_t		5270698	1					
ANR	5270753	RelationalExpression	sizeof ( uint64_t ) > INT_SIZE		5270698	1		>			
ANR	5270754	SizeofExpression	sizeof ( uint64_t )		5270698	0					
ANR	5270755	Sizeof	sizeof		5270698	0					
ANR	5270756	SizeofOperand	uint64_t		5270698	1					
ANR	5270757	Identifier	INT_SIZE		5270698	1					
ANR	5270758	CompoundStatement		11:75:261:261	5270698	1					
ANR	5270759	ReturnStatement	return put ( ( unsigned long ) l ) ;	1127:4:22465:22493	5270698	0	True				
ANR	5270760	CallExpression	put ( ( unsigned long ) l )		5270698	0					
ANR	5270761	Callee	put		5270698	0					
ANR	5270762	Identifier	put		5270698	0					
ANR	5270763	ArgumentList	( unsigned long ) l		5270698	1					
ANR	5270764	Argument	( unsigned long ) l		5270698	0					
ANR	5270765	CastExpression	( unsigned long ) l		5270698	0					
ANR	5270766	CastTarget	unsigned long		5270698	0					
ANR	5270767	Identifier	l		5270698	1					
ANR	5270768	ElseStatement	else		5270698	0					
ANR	5270769	CompoundStatement		13:10:307:307	5270698	0					
ANR	5270770	IfStatement	if ( ! hton_is_noop ( ) )		5270698	0					
ANR	5270771	Condition	! hton_is_noop ( )	1129:8:22515:22529	5270698	0	True				
ANR	5270772	UnaryOperationExpression	! hton_is_noop ( )		5270698	0					
ANR	5270773	UnaryOperator	!		5270698	0					
ANR	5270774	CallExpression	hton_is_noop ( )		5270698	1					
ANR	5270775	Callee	hton_is_noop		5270698	0					
ANR	5270776	Identifier	hton_is_noop		5270698	0					
ANR	5270777	ArgumentList			5270698	1					
ANR	5270778	CompoundStatement		14:25:334:334	5270698	1					
ANR	5270779	ExpressionStatement	l = htonLL ( l )	1130:5:22575:22588	5270698	0	True				
ANR	5270780	AssignmentExpression	l = htonLL ( l )		5270698	0		=			
ANR	5270781	Identifier	l		5270698	0					
ANR	5270782	CallExpression	htonLL ( l )		5270698	1					
ANR	5270783	Callee	htonLL		5270698	0					
ANR	5270784	Identifier	htonLL		5270698	0					
ANR	5270785	ArgumentList	l		5270698	1					
ANR	5270786	Argument	l		5270698	0					
ANR	5270787	Identifier	l		5270698	0					
ANR	5270788	IfStatement	if ( sizeof ( uint64_t ) < INT_SIZE )		5270698	1					
ANR	5270789	Condition	sizeof ( uint64_t ) < INT_SIZE	1132:8:22604:22630	5270698	0	True				
ANR	5270790	RelationalExpression	sizeof ( uint64_t ) < INT_SIZE		5270698	0		<			
ANR	5270791	SizeofExpression	sizeof ( uint64_t )		5270698	0					
ANR	5270792	Sizeof	sizeof		5270698	0					
ANR	5270793	SizeofOperand	uint64_t		5270698	1					
ANR	5270794	Identifier	INT_SIZE		5270698	1					
ANR	5270795	CompoundStatement		17:37:435:435	5270698	1					
ANR	5270796	ExpressionStatement	pad = 0	1133:5:22640:22647	5270698	0	True				
ANR	5270797	AssignmentExpression	pad = 0		5270698	0		=			
ANR	5270798	Identifier	pad		5270698	0					
ANR	5270799	PrimaryExpression	0		5270698	1					
ANR	5270800	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( uint64_t ) ; s ++ )		5270698	1					
ANR	5270801	ForInit	int s = 0 ;	1134:10:22659:22666	5270698	0	True				
ANR	5270802	IdentifierDeclStatement	int s = 0 ;		5270698	0					
ANR	5270803	IdentifierDecl	s = 0		5270698	0					
ANR	5270804	IdentifierDeclType	int		5270698	0					
ANR	5270805	Identifier	s		5270698	1					
ANR	5270806	AssignmentExpression	s = 0		5270698	2		=			
ANR	5270807	Identifier	s		5270698	0					
ANR	5270808	PrimaryExpression	0		5270698	1					
ANR	5270809	Condition	s < INT_SIZE - ( int ) sizeof ( uint64_t )	1134:19:22668:22701	5270698	1	True				
ANR	5270810	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( uint64_t )		5270698	0		<			
ANR	5270811	Identifier	s		5270698	0					
ANR	5270812	AdditiveExpression	INT_SIZE - ( int ) sizeof ( uint64_t )		5270698	1		-			
ANR	5270813	Identifier	INT_SIZE		5270698	0					
ANR	5270814	CastExpression	( int ) sizeof ( uint64_t )		5270698	1					
ANR	5270815	CastTarget	int		5270698	0					
ANR	5270816	SizeofExpression	sizeof ( uint64_t )		5270698	1					
ANR	5270817	Sizeof	sizeof		5270698	0					
ANR	5270818	SizeofOperand	uint64_t		5270698	1					
ANR	5270819	PostIncDecOperationExpression	s ++	1134:55:22704:22706	5270698	2	True				
ANR	5270820	Identifier	s		5270698	0					
ANR	5270821	IncDec	++		5270698	1					
ANR	5270822	CompoundStatement		19:60:511:511	5270698	3					
ANR	5270823	IfStatement	"if ( put_bytes ( & pad , 1 ) != 1 )"		5270698	0					
ANR	5270824	Condition	"put_bytes ( & pad , 1 ) != 1"	1135:10:22721:22743	5270698	0	True				
ANR	5270825	EqualityExpression	"put_bytes ( & pad , 1 ) != 1"		5270698	0		!=			
ANR	5270826	CallExpression	"put_bytes ( & pad , 1 )"		5270698	0					
ANR	5270827	Callee	put_bytes		5270698	0					
ANR	5270828	Identifier	put_bytes		5270698	0					
ANR	5270829	ArgumentList	& pad		5270698	1					
ANR	5270830	Argument	& pad		5270698	0					
ANR	5270831	UnaryOperationExpression	& pad		5270698	0					
ANR	5270832	UnaryOperator	&		5270698	0					
ANR	5270833	Identifier	pad		5270698	1					
ANR	5270834	Argument	1		5270698	1					
ANR	5270835	PrimaryExpression	1		5270698	0					
ANR	5270836	PrimaryExpression	1		5270698	1					
ANR	5270837	ReturnStatement	return FALSE ;	1135:35:22746:22758	5270698	1	True				
ANR	5270838	Identifier	FALSE		5270698	0					
ANR	5270839	IfStatement	"if ( put_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t ) )"		5270698	2					
ANR	5270840	Condition	"put_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t )"	1138:8:22781:22831	5270698	0	True				
ANR	5270841	EqualityExpression	"put_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t )"		5270698	0		!=			
ANR	5270842	CallExpression	"put_bytes ( & l , sizeof ( uint64_t ) )"		5270698	0					
ANR	5270843	Callee	put_bytes		5270698	0					
ANR	5270844	Identifier	put_bytes		5270698	0					
ANR	5270845	ArgumentList	& l		5270698	1					
ANR	5270846	Argument	& l		5270698	0					
ANR	5270847	UnaryOperationExpression	& l		5270698	0					
ANR	5270848	UnaryOperator	&		5270698	0					
ANR	5270849	Identifier	l		5270698	1					
ANR	5270850	Argument	sizeof ( uint64_t )		5270698	1					
ANR	5270851	SizeofExpression	sizeof ( uint64_t )		5270698	0					
ANR	5270852	Sizeof	sizeof		5270698	0					
ANR	5270853	SizeofOperand	uint64_t		5270698	1					
ANR	5270854	SizeofExpression	sizeof ( uint64_t )		5270698	1					
ANR	5270855	Sizeof	sizeof		5270698	0					
ANR	5270856	SizeofOperand	uint64_t		5270698	1					
ANR	5270857	ReturnStatement	return FALSE ;	1138:61:22834:22846	5270698	1	True				
ANR	5270858	Identifier	FALSE		5270698	0					
ANR	5270859	BreakStatement	break ;	1140:3:22856:22861	5270698	5	True				
ANR	5270860	Label	case ascii :	1142:2:22866:22876	5270698	6	True				
ANR	5270861	Identifier	ascii		5270698	0					
ANR	5270862	ReturnStatement	return FALSE ;	1143:3:22881:22893	5270698	7	True				
ANR	5270863	Identifier	FALSE		5270698	0					
ANR	5270864	ReturnStatement	return TRUE ;	1146:1:22900:22911	5270698	3	True				
ANR	5270865	Identifier	TRUE		5270698	0					
ANR	5270866	ReturnType	int		5270698	1					
ANR	5270867	Identifier	Stream :: put		5270698	2					
ANR	5270868	ParameterList	uint64_t l		5270698	3					
ANR	5270869	Parameter	uint64_t l	1115:13:22185:22194	5270698	0	True				
ANR	5270870	ParameterType	uint64_t		5270698	0					
ANR	5270871	Identifier	l		5270698	1					
ANR	5270872	CFGEntryNode	ENTRY		5270698		True				
ANR	5270873	CFGExitNode	EXIT		5270698		True				
ANR	5270874	Symbol	_code		5270698						
ANR	5270875	Symbol	INT_SIZE		5270698						
ANR	5270876	Symbol	htonLL		5270698						
ANR	5270877	Symbol	TRUE		5270698						
ANR	5270878	Symbol	l		5270698						
ANR	5270879	Symbol	put		5270698						
ANR	5270880	Symbol	pad		5270698						
ANR	5270881	Symbol	& l		5270698						
ANR	5270882	Symbol	s		5270698						
ANR	5270883	Symbol	hton_is_noop		5270698						
ANR	5270884	Symbol	FALSE		5270698						
ANR	5270885	Symbol	put_bytes		5270698						
ANR	5270886	Symbol	& pad		5270698						
ANR	5270887	Function	Stream :: put	1151:0:22924:23192							
ANR	5270888	FunctionDef	Stream :: put (short s)		5270887	0					
ANR	5270889	CompoundStatement		1153:0:22951:23192	5270887	0					
ANR	5270890	ExpressionStatement	"NETWORK_TRACE ( ""put short "" << s )"	1154:2:22955:22987	5270887	0	True				
ANR	5270891	CallExpression	"NETWORK_TRACE ( ""put short "" << s )"		5270887	0					
ANR	5270892	Callee	NETWORK_TRACE		5270887	0					
ANR	5270893	Identifier	NETWORK_TRACE		5270887	0					
ANR	5270894	ArgumentList	"""put short "" << s"		5270887	1					
ANR	5270895	Argument	"""put short "" << s"		5270887	0					
ANR	5270896	ShiftExpression	"""put short "" << s"		5270887	0		<<			
ANR	5270897	PrimaryExpression	"""put short """		5270887	0					
ANR	5270898	Identifier	s		5270887	1					
ANR	5270899	SwitchStatement	switch ( _code )		5270887	1					
ANR	5270900	Condition	_code	1156:8:22998:23002	5270887	0	True				
ANR	5270901	Identifier	_code		5270887	0					
ANR	5270902	CompoundStatement		4:14:52:52	5270887	1					
ANR	5270903	Label	case internal :	1157:2:23008:23021	5270887	0	True				
ANR	5270904	Identifier	internal		5270887	0					
ANR	5270905	IfStatement	"if ( put_bytes ( & s , sizeof ( short ) ) != sizeof ( short ) )"		5270887	1					
ANR	5270906	Condition	"put_bytes ( & s , sizeof ( short ) ) != sizeof ( short )"	1158:7:23030:23074	5270887	0	True				
ANR	5270907	EqualityExpression	"put_bytes ( & s , sizeof ( short ) ) != sizeof ( short )"		5270887	0		!=			
ANR	5270908	CallExpression	"put_bytes ( & s , sizeof ( short ) )"		5270887	0					
ANR	5270909	Callee	put_bytes		5270887	0					
ANR	5270910	Identifier	put_bytes		5270887	0					
ANR	5270911	ArgumentList	& s		5270887	1					
ANR	5270912	Argument	& s		5270887	0					
ANR	5270913	UnaryOperationExpression	& s		5270887	0					
ANR	5270914	UnaryOperator	&		5270887	0					
ANR	5270915	Identifier	s		5270887	1					
ANR	5270916	Argument	sizeof ( short )		5270887	1					
ANR	5270917	SizeofExpression	sizeof ( short )		5270887	0					
ANR	5270918	Sizeof	sizeof		5270887	0					
ANR	5270919	SizeofOperand	short		5270887	1					
ANR	5270920	SizeofExpression	sizeof ( short )		5270887	1					
ANR	5270921	Sizeof	sizeof		5270887	0					
ANR	5270922	SizeofOperand	short		5270887	1					
ANR	5270923	ReturnStatement	return FALSE ;	1158:54:23077:23089	5270887	1	True				
ANR	5270924	Identifier	FALSE		5270887	0					
ANR	5270925	BreakStatement	break ;	1159:3:23094:23099	5270887	2	True				
ANR	5270926	Label	case external :	1161:2:23104:23117	5270887	3	True				
ANR	5270927	Identifier	external		5270887	0					
ANR	5270928	ReturnStatement	return put ( ( int ) s ) ;	1162:3:23122:23140	5270887	4	True				
ANR	5270929	CallExpression	put ( ( int ) s )		5270887	0					
ANR	5270930	Callee	put		5270887	0					
ANR	5270931	Identifier	put		5270887	0					
ANR	5270932	ArgumentList	( int ) s		5270887	1					
ANR	5270933	Argument	( int ) s		5270887	0					
ANR	5270934	CastExpression	( int ) s		5270887	0					
ANR	5270935	CastTarget	int		5270887	0					
ANR	5270936	Identifier	s		5270887	1					
ANR	5270937	Label	case ascii :	1164:2:23145:23155	5270887	5	True				
ANR	5270938	Identifier	ascii		5270887	0					
ANR	5270939	ReturnStatement	return FALSE ;	1165:3:23160:23172	5270887	6	True				
ANR	5270940	Identifier	FALSE		5270887	0					
ANR	5270941	ReturnStatement	return TRUE ;	1168:1:23179:23190	5270887	2	True				
ANR	5270942	Identifier	TRUE		5270887	0					
ANR	5270943	ReturnType	int		5270887	1					
ANR	5270944	Identifier	Stream :: put		5270887	2					
ANR	5270945	ParameterList	short s		5270887	3					
ANR	5270946	Parameter	short s	1152:13:22942:22948	5270887	0	True				
ANR	5270947	ParameterType	short		5270887	0					
ANR	5270948	Identifier	s		5270887	1					
ANR	5270949	CFGEntryNode	ENTRY		5270887		True				
ANR	5270950	CFGExitNode	EXIT		5270887		True				
ANR	5270951	Symbol	s		5270887						
ANR	5270952	Symbol	_code		5270887						
ANR	5270953	Symbol	& s		5270887						
ANR	5270954	Symbol	TRUE		5270887						
ANR	5270955	Symbol	FALSE		5270887						
ANR	5270956	Symbol	put_bytes		5270887						
ANR	5270957	Symbol	put		5270887						
ANR	5270958	Function	Stream :: put	1173:0:23197:23483							
ANR	5270959	FunctionDef	Stream :: put (unsigned short s)		5270958	0					
ANR	5270960	CompoundStatement		1175:0:23233:23483	5270958	0					
ANR	5270961	ExpressionStatement	"NETWORK_TRACE ( ""put short "" << s )"	1176:2:23237:23269	5270958	0	True				
ANR	5270962	CallExpression	"NETWORK_TRACE ( ""put short "" << s )"		5270958	0					
ANR	5270963	Callee	NETWORK_TRACE		5270958	0					
ANR	5270964	Identifier	NETWORK_TRACE		5270958	0					
ANR	5270965	ArgumentList	"""put short "" << s"		5270958	1					
ANR	5270966	Argument	"""put short "" << s"		5270958	0					
ANR	5270967	ShiftExpression	"""put short "" << s"		5270958	0		<<			
ANR	5270968	PrimaryExpression	"""put short """		5270958	0					
ANR	5270969	Identifier	s		5270958	1					
ANR	5270970	SwitchStatement	switch ( _code )		5270958	1					
ANR	5270971	Condition	_code	1178:8:23280:23284	5270958	0	True				
ANR	5270972	Identifier	_code		5270958	0					
ANR	5270973	CompoundStatement		4:14:52:52	5270958	1					
ANR	5270974	Label	case internal :	1179:2:23290:23303	5270958	0	True				
ANR	5270975	Identifier	internal		5270958	0					
ANR	5270976	IfStatement	"if ( put_bytes ( & s , sizeof ( short ) ) != sizeof ( short ) )"		5270958	1					
ANR	5270977	Condition	"put_bytes ( & s , sizeof ( short ) ) != sizeof ( short )"	1180:7:23312:23356	5270958	0	True				
ANR	5270978	EqualityExpression	"put_bytes ( & s , sizeof ( short ) ) != sizeof ( short )"		5270958	0		!=			
ANR	5270979	CallExpression	"put_bytes ( & s , sizeof ( short ) )"		5270958	0					
ANR	5270980	Callee	put_bytes		5270958	0					
ANR	5270981	Identifier	put_bytes		5270958	0					
ANR	5270982	ArgumentList	& s		5270958	1					
ANR	5270983	Argument	& s		5270958	0					
ANR	5270984	UnaryOperationExpression	& s		5270958	0					
ANR	5270985	UnaryOperator	&		5270958	0					
ANR	5270986	Identifier	s		5270958	1					
ANR	5270987	Argument	sizeof ( short )		5270958	1					
ANR	5270988	SizeofExpression	sizeof ( short )		5270958	0					
ANR	5270989	Sizeof	sizeof		5270958	0					
ANR	5270990	SizeofOperand	short		5270958	1					
ANR	5270991	SizeofExpression	sizeof ( short )		5270958	1					
ANR	5270992	Sizeof	sizeof		5270958	0					
ANR	5270993	SizeofOperand	short		5270958	1					
ANR	5270994	ReturnStatement	return FALSE ;	1180:54:23359:23371	5270958	1	True				
ANR	5270995	Identifier	FALSE		5270958	0					
ANR	5270996	BreakStatement	break ;	1181:3:23376:23381	5270958	2	True				
ANR	5270997	Label	case external :	1183:2:23386:23399	5270958	3	True				
ANR	5270998	Identifier	external		5270958	0					
ANR	5270999	ReturnStatement	return put ( ( unsigned int ) s ) ;	1184:3:23404:23431	5270958	4	True				
ANR	5271000	CallExpression	put ( ( unsigned int ) s )		5270958	0					
ANR	5271001	Callee	put		5270958	0					
ANR	5271002	Identifier	put		5270958	0					
ANR	5271003	ArgumentList	( unsigned int ) s		5270958	1					
ANR	5271004	Argument	( unsigned int ) s		5270958	0					
ANR	5271005	CastExpression	( unsigned int ) s		5270958	0					
ANR	5271006	CastTarget	unsigned int		5270958	0					
ANR	5271007	Identifier	s		5270958	1					
ANR	5271008	Label	case ascii :	1186:2:23436:23446	5270958	5	True				
ANR	5271009	Identifier	ascii		5270958	0					
ANR	5271010	ReturnStatement	return FALSE ;	1187:3:23451:23463	5270958	6	True				
ANR	5271011	Identifier	FALSE		5270958	0					
ANR	5271012	ReturnStatement	return TRUE ;	1190:1:23470:23481	5270958	2	True				
ANR	5271013	Identifier	TRUE		5270958	0					
ANR	5271014	ReturnType	int		5270958	1					
ANR	5271015	Identifier	Stream :: put		5270958	2					
ANR	5271016	ParameterList	unsigned short s		5270958	3					
ANR	5271017	Parameter	unsigned short s	1174:13:23215:23230	5270958	0	True				
ANR	5271018	ParameterType	unsigned short		5270958	0					
ANR	5271019	Identifier	s		5270958	1					
ANR	5271020	CFGEntryNode	ENTRY		5270958		True				
ANR	5271021	CFGExitNode	EXIT		5270958		True				
ANR	5271022	Symbol	s		5270958						
ANR	5271023	Symbol	_code		5270958						
ANR	5271024	Symbol	& s		5270958						
ANR	5271025	Symbol	TRUE		5270958						
ANR	5271026	Symbol	FALSE		5270958						
ANR	5271027	Symbol	put_bytes		5270958						
ANR	5271028	Symbol	put		5270958						
ANR	5271029	Function	Stream :: put	1195:0:23488:23759							
ANR	5271030	FunctionDef	Stream :: put (float f)		5271029	0					
ANR	5271031	CompoundStatement		1197:0:23515:23759	5271029	0					
ANR	5271032	ExpressionStatement	"NETWORK_TRACE ( ""put float "" << f )"	1198:2:23519:23551	5271029	0	True				
ANR	5271033	CallExpression	"NETWORK_TRACE ( ""put float "" << f )"		5271029	0					
ANR	5271034	Callee	NETWORK_TRACE		5271029	0					
ANR	5271035	Identifier	NETWORK_TRACE		5271029	0					
ANR	5271036	ArgumentList	"""put float "" << f"		5271029	1					
ANR	5271037	Argument	"""put float "" << f"		5271029	0					
ANR	5271038	ShiftExpression	"""put float "" << f"		5271029	0		<<			
ANR	5271039	PrimaryExpression	"""put float """		5271029	0					
ANR	5271040	Identifier	f		5271029	1					
ANR	5271041	SwitchStatement	switch ( _code )		5271029	1					
ANR	5271042	Condition	_code	1200:8:23562:23566	5271029	0	True				
ANR	5271043	Identifier	_code		5271029	0					
ANR	5271044	CompoundStatement		4:14:52:52	5271029	1					
ANR	5271045	Label	case internal :	1201:2:23572:23585	5271029	0	True				
ANR	5271046	Identifier	internal		5271029	0					
ANR	5271047	IfStatement	"if ( put_bytes ( & f , sizeof ( float ) ) != sizeof ( float ) )"		5271029	1					
ANR	5271048	Condition	"put_bytes ( & f , sizeof ( float ) ) != sizeof ( float )"	1202:7:23594:23638	5271029	0	True				
ANR	5271049	EqualityExpression	"put_bytes ( & f , sizeof ( float ) ) != sizeof ( float )"		5271029	0		!=			
ANR	5271050	CallExpression	"put_bytes ( & f , sizeof ( float ) )"		5271029	0					
ANR	5271051	Callee	put_bytes		5271029	0					
ANR	5271052	Identifier	put_bytes		5271029	0					
ANR	5271053	ArgumentList	& f		5271029	1					
ANR	5271054	Argument	& f		5271029	0					
ANR	5271055	UnaryOperationExpression	& f		5271029	0					
ANR	5271056	UnaryOperator	&		5271029	0					
ANR	5271057	Identifier	f		5271029	1					
ANR	5271058	Argument	sizeof ( float )		5271029	1					
ANR	5271059	SizeofExpression	sizeof ( float )		5271029	0					
ANR	5271060	Sizeof	sizeof		5271029	0					
ANR	5271061	SizeofOperand	float		5271029	1					
ANR	5271062	SizeofExpression	sizeof ( float )		5271029	1					
ANR	5271063	Sizeof	sizeof		5271029	0					
ANR	5271064	SizeofOperand	float		5271029	1					
ANR	5271065	ReturnStatement	return FALSE ;	1202:54:23641:23653	5271029	1	True				
ANR	5271066	Identifier	FALSE		5271029	0					
ANR	5271067	BreakStatement	break ;	1203:3:23658:23663	5271029	2	True				
ANR	5271068	Label	case external :	1205:2:23668:23681	5271029	3	True				
ANR	5271069	Identifier	external		5271029	0					
ANR	5271070	ReturnStatement	return put ( ( double ) f ) ;	1206:3:23686:23707	5271029	4	True				
ANR	5271071	CallExpression	put ( ( double ) f )		5271029	0					
ANR	5271072	Callee	put		5271029	0					
ANR	5271073	Identifier	put		5271029	0					
ANR	5271074	ArgumentList	( double ) f		5271029	1					
ANR	5271075	Argument	( double ) f		5271029	0					
ANR	5271076	CastExpression	( double ) f		5271029	0					
ANR	5271077	CastTarget	double		5271029	0					
ANR	5271078	Identifier	f		5271029	1					
ANR	5271079	Label	case ascii :	1208:2:23712:23722	5271029	5	True				
ANR	5271080	Identifier	ascii		5271029	0					
ANR	5271081	ReturnStatement	return FALSE ;	1209:3:23727:23739	5271029	6	True				
ANR	5271082	Identifier	FALSE		5271029	0					
ANR	5271083	ReturnStatement	return TRUE ;	1212:1:23746:23757	5271029	2	True				
ANR	5271084	Identifier	TRUE		5271029	0					
ANR	5271085	ReturnType	int		5271029	1					
ANR	5271086	Identifier	Stream :: put		5271029	2					
ANR	5271087	ParameterList	float f		5271029	3					
ANR	5271088	Parameter	float f	1196:13:23506:23512	5271029	0	True				
ANR	5271089	ParameterType	float		5271029	0					
ANR	5271090	Identifier	f		5271029	1					
ANR	5271091	CFGEntryNode	ENTRY		5271029		True				
ANR	5271092	CFGExitNode	EXIT		5271029		True				
ANR	5271093	Symbol	_code		5271029						
ANR	5271094	Symbol	f		5271029						
ANR	5271095	Symbol	TRUE		5271029						
ANR	5271096	Symbol	FALSE		5271029						
ANR	5271097	Symbol	put_bytes		5271029						
ANR	5271098	Symbol	& f		5271029						
ANR	5271099	Symbol	put		5271029						
ANR	5271100	Function	Stream :: put	1217:0:23764:24139							
ANR	5271101	FunctionDef	Stream :: put (double d)		5271100	0					
ANR	5271102	CompoundStatement		1219:0:23792:24139	5271100	0					
ANR	5271103	ExpressionStatement	"NETWORK_TRACE ( ""put double "" << d )"	1220:2:23796:23829	5271100	0	True				
ANR	5271104	CallExpression	"NETWORK_TRACE ( ""put double "" << d )"		5271100	0					
ANR	5271105	Callee	NETWORK_TRACE		5271100	0					
ANR	5271106	Identifier	NETWORK_TRACE		5271100	0					
ANR	5271107	ArgumentList	"""put double "" << d"		5271100	1					
ANR	5271108	Argument	"""put double "" << d"		5271100	0					
ANR	5271109	ShiftExpression	"""put double "" << d"		5271100	0		<<			
ANR	5271110	PrimaryExpression	"""put double """		5271100	0					
ANR	5271111	Identifier	d		5271100	1					
ANR	5271112	IdentifierDeclStatement	"int frac , exp ;"	1221:1:23832:23846	5271100	1	True				
ANR	5271113	IdentifierDecl	frac		5271100	0					
ANR	5271114	IdentifierDeclType	int		5271100	0					
ANR	5271115	Identifier	frac		5271100	1					
ANR	5271116	IdentifierDecl	exp		5271100	1					
ANR	5271117	IdentifierDeclType	int		5271100	0					
ANR	5271118	Identifier	exp		5271100	1					
ANR	5271119	SwitchStatement	switch ( _code )		5271100	2					
ANR	5271120	Condition	_code	1224:8:23858:23862	5271100	0	True				
ANR	5271121	Identifier	_code		5271100	0					
ANR	5271122	CompoundStatement		6:14:71:71	5271100	1					
ANR	5271123	Label	case internal :	1225:2:23868:23881	5271100	0	True				
ANR	5271124	Identifier	internal		5271100	0					
ANR	5271125	IfStatement	"if ( put_bytes ( & d , sizeof ( double ) ) != sizeof ( double ) )"		5271100	1					
ANR	5271126	Condition	"put_bytes ( & d , sizeof ( double ) ) != sizeof ( double )"	1226:7:23890:23936	5271100	0	True				
ANR	5271127	EqualityExpression	"put_bytes ( & d , sizeof ( double ) ) != sizeof ( double )"		5271100	0		!=			
ANR	5271128	CallExpression	"put_bytes ( & d , sizeof ( double ) )"		5271100	0					
ANR	5271129	Callee	put_bytes		5271100	0					
ANR	5271130	Identifier	put_bytes		5271100	0					
ANR	5271131	ArgumentList	& d		5271100	1					
ANR	5271132	Argument	& d		5271100	0					
ANR	5271133	UnaryOperationExpression	& d		5271100	0					
ANR	5271134	UnaryOperator	&		5271100	0					
ANR	5271135	Identifier	d		5271100	1					
ANR	5271136	Argument	sizeof ( double )		5271100	1					
ANR	5271137	SizeofExpression	sizeof ( double )		5271100	0					
ANR	5271138	Sizeof	sizeof		5271100	0					
ANR	5271139	SizeofOperand	double		5271100	1					
ANR	5271140	SizeofExpression	sizeof ( double )		5271100	1					
ANR	5271141	Sizeof	sizeof		5271100	0					
ANR	5271142	SizeofOperand	double		5271100	1					
ANR	5271143	ReturnStatement	return FALSE ;	1226:56:23939:23951	5271100	1	True				
ANR	5271144	Identifier	FALSE		5271100	0					
ANR	5271145	BreakStatement	break ;	1227:3:23956:23961	5271100	2	True				
ANR	5271146	Label	case external :	1229:2:23966:23979	5271100	3	True				
ANR	5271147	Identifier	external		5271100	0					
ANR	5271148	ExpressionStatement	"frac = ( int ) ( frexp ( d , & exp ) * ( double ) FRAC_CONST )"	1230:3:23984:24034	5271100	4	True				
ANR	5271149	AssignmentExpression	"frac = ( int ) ( frexp ( d , & exp ) * ( double ) FRAC_CONST )"		5271100	0		=			
ANR	5271150	Identifier	frac		5271100	0					
ANR	5271151	CastExpression	"( int ) ( frexp ( d , & exp ) * ( double ) FRAC_CONST )"		5271100	1					
ANR	5271152	CastTarget	int		5271100	0					
ANR	5271153	MultiplicativeExpression	"frexp ( d , & exp ) * ( double ) FRAC_CONST"		5271100	1		*			
ANR	5271154	CallExpression	"frexp ( d , & exp )"		5271100	0					
ANR	5271155	Callee	frexp		5271100	0					
ANR	5271156	Identifier	frexp		5271100	0					
ANR	5271157	ArgumentList	d		5271100	1					
ANR	5271158	Argument	d		5271100	0					
ANR	5271159	Identifier	d		5271100	0					
ANR	5271160	Argument	& exp		5271100	1					
ANR	5271161	UnaryOperationExpression	& exp		5271100	0					
ANR	5271162	UnaryOperator	&		5271100	0					
ANR	5271163	Identifier	exp		5271100	1					
ANR	5271164	CastExpression	( double ) FRAC_CONST		5271100	1					
ANR	5271165	CastTarget	double		5271100	0					
ANR	5271166	Identifier	FRAC_CONST		5271100	1					
ANR	5271167	IfStatement	if ( ! put ( frac ) )		5271100	5					
ANR	5271168	Condition	! put ( frac )	1231:7:24043:24052	5271100	0	True				
ANR	5271169	UnaryOperationExpression	! put ( frac )		5271100	0					
ANR	5271170	UnaryOperator	!		5271100	0					
ANR	5271171	CallExpression	put ( frac )		5271100	1					
ANR	5271172	Callee	put		5271100	0					
ANR	5271173	Identifier	put		5271100	0					
ANR	5271174	ArgumentList	frac		5271100	1					
ANR	5271175	Argument	frac		5271100	0					
ANR	5271176	Identifier	frac		5271100	0					
ANR	5271177	ReturnStatement	return FALSE ;	1231:19:24055:24067	5271100	1	True				
ANR	5271178	Identifier	FALSE		5271100	0					
ANR	5271179	ReturnStatement	return put ( exp ) ;	1232:3:24072:24087	5271100	6	True				
ANR	5271180	CallExpression	put ( exp )		5271100	0					
ANR	5271181	Callee	put		5271100	0					
ANR	5271182	Identifier	put		5271100	0					
ANR	5271183	ArgumentList	exp		5271100	1					
ANR	5271184	Argument	exp		5271100	0					
ANR	5271185	Identifier	exp		5271100	0					
ANR	5271186	Label	case ascii :	1234:2:24092:24102	5271100	7	True				
ANR	5271187	Identifier	ascii		5271100	0					
ANR	5271188	ReturnStatement	return FALSE ;	1235:3:24107:24119	5271100	8	True				
ANR	5271189	Identifier	FALSE		5271100	0					
ANR	5271190	ReturnStatement	return TRUE ;	1238:1:24126:24137	5271100	3	True				
ANR	5271191	Identifier	TRUE		5271100	0					
ANR	5271192	ReturnType	int		5271100	1					
ANR	5271193	Identifier	Stream :: put		5271100	2					
ANR	5271194	ParameterList	double d		5271100	3					
ANR	5271195	Parameter	double d	1218:13:23782:23789	5271100	0	True				
ANR	5271196	ParameterType	double		5271100	0					
ANR	5271197	Identifier	d		5271100	1					
ANR	5271198	CFGEntryNode	ENTRY		5271100		True				
ANR	5271199	CFGExitNode	EXIT		5271100		True				
ANR	5271200	Symbol	FRAC_CONST		5271100						
ANR	5271201	Symbol	frexp		5271100						
ANR	5271202	Symbol	d		5271100						
ANR	5271203	Symbol	& exp		5271100						
ANR	5271204	Symbol	_code		5271100						
ANR	5271205	Symbol	TRUE		5271100						
ANR	5271206	Symbol	& d		5271100						
ANR	5271207	Symbol	FALSE		5271100						
ANR	5271208	Symbol	exp		5271100						
ANR	5271209	Symbol	put_bytes		5271100						
ANR	5271210	Symbol	frac		5271100						
ANR	5271211	Symbol	put		5271100						
ANR	5271212	Function	Stream :: put	1243:0:24144:25056							
ANR	5271213	FunctionDef	Stream :: put (char const * s)		5271212	0					
ANR	5271214	CompoundStatement		1245:0:24177:25056	5271212	0					
ANR	5271215	IdentifierDeclStatement	int len ;	1246:1:24180:24188	5271212	0	True				
ANR	5271216	IdentifierDecl	len		5271212	0					
ANR	5271217	IdentifierDeclType	int		5271212	0					
ANR	5271218	Identifier	len		5271212	1					
ANR	5271219	ExpressionStatement	"NETWORK_TRACE ( ""put string "" << s )"	1248:2:24193:24226	5271212	1	True				
ANR	5271220	CallExpression	"NETWORK_TRACE ( ""put string "" << s )"		5271212	0					
ANR	5271221	Callee	NETWORK_TRACE		5271212	0					
ANR	5271222	Identifier	NETWORK_TRACE		5271212	0					
ANR	5271223	ArgumentList	"""put string "" << s"		5271212	1					
ANR	5271224	Argument	"""put string "" << s"		5271212	0					
ANR	5271225	ShiftExpression	"""put string "" << s"		5271212	0		<<			
ANR	5271226	PrimaryExpression	"""put string """		5271212	0					
ANR	5271227	Identifier	s		5271212	1					
ANR	5271228	SwitchStatement	switch ( _code )		5271212	2					
ANR	5271229	Condition	_code	1250:8:24237:24241	5271212	0	True				
ANR	5271230	Identifier	_code		5271212	0					
ANR	5271231	CompoundStatement		6:14:65:65	5271212	1					
ANR	5271232	Label	case internal :	1251:2:24247:24260	5271212	0	True				
ANR	5271233	Identifier	internal		5271212	0					
ANR	5271234	Label	case external :	1252:2:24264:24277	5271212	1	True				
ANR	5271235	Identifier	external		5271212	0					
ANR	5271236	IfStatement	if ( ! s )		5271212	2					
ANR	5271237	Condition	! s	1253:7:24286:24287	5271212	0	True				
ANR	5271238	UnaryOperationExpression	! s		5271212	0					
ANR	5271239	UnaryOperator	!		5271212	0					
ANR	5271240	Identifier	s		5271212	1					
ANR	5271241	CompoundStatement		9:10:111:111	5271212	1					
ANR	5271242	IfStatement	if ( get_encryption ( ) )		5271212	0					
ANR	5271243	Condition	get_encryption ( )	1254:32:24323:24338	5271212	0	True				
ANR	5271244	CallExpression	get_encryption ( )		5271212	0					
ANR	5271245	Callee	get_encryption		5271212	0					
ANR	5271246	Identifier	get_encryption		5271212	0					
ANR	5271247	ArgumentList			5271212	1					
ANR	5271248	CompoundStatement		10:50:163:163	5271212	1					
ANR	5271249	ExpressionStatement	len = 1	1255:32:24375:24382	5271212	0	True				
ANR	5271250	AssignmentExpression	len = 1		5271212	0		=			
ANR	5271251	Identifier	len		5271212	0					
ANR	5271252	PrimaryExpression	1		5271212	1					
ANR	5271253	IfStatement	if ( put ( len ) == FALSE )		5271212	1					
ANR	5271254	Condition	put ( len ) == FALSE	1256:36:24420:24436	5271212	0	True				
ANR	5271255	EqualityExpression	put ( len ) == FALSE		5271212	0		==			
ANR	5271256	CallExpression	put ( len )		5271212	0					
ANR	5271257	Callee	put		5271212	0					
ANR	5271258	Identifier	put		5271212	0					
ANR	5271259	ArgumentList	len		5271212	1					
ANR	5271260	Argument	len		5271212	0					
ANR	5271261	Identifier	len		5271212	0					
ANR	5271262	Identifier	FALSE		5271212	1					
ANR	5271263	CompoundStatement		12:55:261:261	5271212	1					
ANR	5271264	ReturnStatement	return FALSE ;	1257:36:24477:24489	5271212	0	True				
ANR	5271265	Identifier	FALSE		5271212	0					
ANR	5271266	IfStatement	"if ( put_bytes ( BIN_NULL_CHAR , 1 ) != 1 )"		5271212	1					
ANR	5271267	Condition	"put_bytes ( BIN_NULL_CHAR , 1 ) != 1"	1260:32:24587:24618	5271212	0	True				
ANR	5271268	EqualityExpression	"put_bytes ( BIN_NULL_CHAR , 1 ) != 1"		5271212	0		!=			
ANR	5271269	CallExpression	"put_bytes ( BIN_NULL_CHAR , 1 )"		5271212	0					
ANR	5271270	Callee	put_bytes		5271212	0					
ANR	5271271	Identifier	put_bytes		5271212	0					
ANR	5271272	ArgumentList	BIN_NULL_CHAR		5271212	1					
ANR	5271273	Argument	BIN_NULL_CHAR		5271212	0					
ANR	5271274	Identifier	BIN_NULL_CHAR		5271212	0					
ANR	5271275	Argument	1		5271212	1					
ANR	5271276	PrimaryExpression	1		5271212	0					
ANR	5271277	PrimaryExpression	1		5271212	1					
ANR	5271278	ReturnStatement	return FALSE ;	1260:66:24621:24633	5271212	1	True				
ANR	5271279	Identifier	FALSE		5271212	0					
ANR	5271280	ElseStatement	else		5271212	0					
ANR	5271281	CompoundStatement		18:7:469:469	5271212	0					
ANR	5271282	ExpressionStatement	len = strlen ( s ) + 1	1263:28:24677:24694	5271212	0	True				
ANR	5271283	AssignmentExpression	len = strlen ( s ) + 1		5271212	0		=			
ANR	5271284	Identifier	len		5271212	0					
ANR	5271285	AdditiveExpression	strlen ( s ) + 1		5271212	1		+			
ANR	5271286	CallExpression	strlen ( s )		5271212	0					
ANR	5271287	Callee	strlen		5271212	0					
ANR	5271288	Identifier	strlen		5271212	0					
ANR	5271289	ArgumentList	s		5271212	1					
ANR	5271290	Argument	s		5271212	0					
ANR	5271291	Identifier	s		5271212	0					
ANR	5271292	PrimaryExpression	1		5271212	1					
ANR	5271293	IfStatement	if ( get_encryption ( ) )		5271212	1					
ANR	5271294	Condition	get_encryption ( )	1264:32:24728:24743	5271212	0	True				
ANR	5271295	CallExpression	get_encryption ( )		5271212	0					
ANR	5271296	Callee	get_encryption		5271212	0					
ANR	5271297	Identifier	get_encryption		5271212	0					
ANR	5271298	ArgumentList			5271212	1					
ANR	5271299	CompoundStatement		20:50:568:568	5271212	1					
ANR	5271300	IfStatement	if ( put ( len ) == FALSE )		5271212	0					
ANR	5271301	Condition	put ( len ) == FALSE	1265:36:24784:24800	5271212	0	True				
ANR	5271302	EqualityExpression	put ( len ) == FALSE		5271212	0		==			
ANR	5271303	CallExpression	put ( len )		5271212	0					
ANR	5271304	Callee	put		5271212	0					
ANR	5271305	Identifier	put		5271212	0					
ANR	5271306	ArgumentList	len		5271212	1					
ANR	5271307	Argument	len		5271212	0					
ANR	5271308	Identifier	len		5271212	0					
ANR	5271309	Identifier	FALSE		5271212	1					
ANR	5271310	CompoundStatement		21:55:625:625	5271212	1					
ANR	5271311	ReturnStatement	return FALSE ;	1266:36:24841:24853	5271212	0	True				
ANR	5271312	Identifier	FALSE		5271212	0					
ANR	5271313	IfStatement	"if ( put_bytes ( s , len ) != len )"		5271212	2					
ANR	5271314	Condition	"put_bytes ( s , len ) != len"	1269:32:24951:24974	5271212	0	True				
ANR	5271315	EqualityExpression	"put_bytes ( s , len ) != len"		5271212	0		!=			
ANR	5271316	CallExpression	"put_bytes ( s , len )"		5271212	0					
ANR	5271317	Callee	put_bytes		5271212	0					
ANR	5271318	Identifier	put_bytes		5271212	0					
ANR	5271319	ArgumentList	s		5271212	1					
ANR	5271320	Argument	s		5271212	0					
ANR	5271321	Identifier	s		5271212	0					
ANR	5271322	Argument	len		5271212	1					
ANR	5271323	Identifier	len		5271212	0					
ANR	5271324	Identifier	len		5271212	1					
ANR	5271325	ReturnStatement	return FALSE ;	1269:58:24977:24989	5271212	1	True				
ANR	5271326	Identifier	FALSE		5271212	0					
ANR	5271327	BreakStatement	break ;	1271:3:24999:25004	5271212	3	True				
ANR	5271328	Label	case ascii :	1273:2:25009:25019	5271212	4	True				
ANR	5271329	Identifier	ascii		5271212	0					
ANR	5271330	ReturnStatement	return FALSE ;	1274:3:25024:25036	5271212	5	True				
ANR	5271331	Identifier	FALSE		5271212	0					
ANR	5271332	ReturnStatement	return TRUE ;	1277:1:25043:25054	5271212	3	True				
ANR	5271333	Identifier	TRUE		5271212	0					
ANR	5271334	ReturnType	int		5271212	1					
ANR	5271335	Identifier	Stream :: put		5271212	2					
ANR	5271336	ParameterList	char const * s		5271212	3					
ANR	5271337	Parameter	char const * s	1244:13:24162:24174	5271212	0	True				
ANR	5271338	ParameterType	char const *		5271212	0					
ANR	5271339	Identifier	s		5271212	1					
ANR	5271340	CFGEntryNode	ENTRY		5271212		True				
ANR	5271341	CFGExitNode	EXIT		5271212		True				
ANR	5271342	Symbol	strlen		5271212						
ANR	5271343	Symbol	s		5271212						
ANR	5271344	Symbol	len		5271212						
ANR	5271345	Symbol	_code		5271212						
ANR	5271346	Symbol	BIN_NULL_CHAR		5271212						
ANR	5271347	Symbol	TRUE		5271212						
ANR	5271348	Symbol	FALSE		5271212						
ANR	5271349	Symbol	put_bytes		5271212						
ANR	5271350	Symbol	get_encryption		5271212						
ANR	5271351	Symbol	put		5271212						
ANR	5271352	Function	Stream :: put	1280:0:25059:25124							
ANR	5271353	FunctionDef	Stream :: put (const MyString & s)		5271352	0					
ANR	5271354	CompoundStatement		1282:0:25096:25124	5271352	0					
ANR	5271355	ReturnStatement	return put ( s . Value ( ) ) ;	1283:1:25099:25122	5271352	0	True				
ANR	5271356	CallExpression	put ( s . Value ( ) )		5271352	0					
ANR	5271357	Callee	put		5271352	0					
ANR	5271358	Identifier	put		5271352	0					
ANR	5271359	ArgumentList	s . Value ( )		5271352	1					
ANR	5271360	Argument	s . Value ( )		5271352	0					
ANR	5271361	CallExpression	s . Value ( )		5271352	0					
ANR	5271362	Callee	s . Value		5271352	0					
ANR	5271363	MemberAccess	s . Value		5271352	0					
ANR	5271364	Identifier	s		5271352	0					
ANR	5271365	Identifier	Value		5271352	1					
ANR	5271366	ArgumentList			5271352	1					
ANR	5271367	ReturnType	int		5271352	1					
ANR	5271368	Identifier	Stream :: put		5271352	2					
ANR	5271369	ParameterList	const MyString & s		5271352	3					
ANR	5271370	Parameter	const MyString & s	1281:13:25077:25093	5271352	0	True				
ANR	5271371	ParameterType	const MyString &		5271352	0					
ANR	5271372	Identifier	s		5271352	1					
ANR	5271373	CFGEntryNode	ENTRY		5271352		True				
ANR	5271374	CFGExitNode	EXIT		5271352		True				
ANR	5271375	Symbol	s		5271352						
ANR	5271376	Symbol	s . Value		5271352						
ANR	5271377	Symbol	put		5271352						
ANR	5271378	Function	Stream :: put	1286:0:25127:25195							
ANR	5271379	FunctionDef	Stream :: put (const std :: string & s)		5271378	0					
ANR	5271380	CompoundStatement		1288:0:25167:25195	5271378	0					
ANR	5271381	ReturnStatement	return put ( s . c_str ( ) ) ;	1289:1:25170:25193	5271378	0	True				
ANR	5271382	CallExpression	put ( s . c_str ( ) )		5271378	0					
ANR	5271383	Callee	put		5271378	0					
ANR	5271384	Identifier	put		5271378	0					
ANR	5271385	ArgumentList	s . c_str ( )		5271378	1					
ANR	5271386	Argument	s . c_str ( )		5271378	0					
ANR	5271387	CallExpression	s . c_str ( )		5271378	0					
ANR	5271388	Callee	s . c_str		5271378	0					
ANR	5271389	MemberAccess	s . c_str		5271378	0					
ANR	5271390	Identifier	s		5271378	0					
ANR	5271391	Identifier	c_str		5271378	1					
ANR	5271392	ArgumentList			5271378	1					
ANR	5271393	ReturnType	int		5271378	1					
ANR	5271394	Identifier	Stream :: put		5271378	2					
ANR	5271395	ParameterList	const std :: string & s		5271378	3					
ANR	5271396	Parameter	const std :: string & s	1287:13:25145:25164	5271378	0	True				
ANR	5271397	ParameterType	const std :: string &		5271378	0					
ANR	5271398	Identifier	s		5271378	1					
ANR	5271399	CFGEntryNode	ENTRY		5271378		True				
ANR	5271400	CFGExitNode	EXIT		5271378		True				
ANR	5271401	Symbol	s		5271378						
ANR	5271402	Symbol	s . c_str		5271378						
ANR	5271403	Symbol	put		5271378						
ANR	5271404	Function	Stream :: put_secret	1292:0:25198:25353							
ANR	5271405	FunctionDef	Stream :: put_secret (char const * s)		5271404	0					
ANR	5271406	CompoundStatement		1294:0:25238:25353	5271404	0					
ANR	5271407	IdentifierDeclStatement	int retval ;	1295:1:25241:25251	5271404	0	True				
ANR	5271408	IdentifierDecl	retval		5271404	0					
ANR	5271409	IdentifierDeclType	int		5271404	0					
ANR	5271410	Identifier	retval		5271404	1					
ANR	5271411	ExpressionStatement	prepare_crypto_for_secret ( )	1297:1:25255:25282	5271404	1	True				
ANR	5271412	CallExpression	prepare_crypto_for_secret ( )		5271404	0					
ANR	5271413	Callee	prepare_crypto_for_secret		5271404	0					
ANR	5271414	Identifier	prepare_crypto_for_secret		5271404	0					
ANR	5271415	ArgumentList			5271404	1					
ANR	5271416	ExpressionStatement	retval = put ( s )	1299:1:25286:25301	5271404	2	True				
ANR	5271417	AssignmentExpression	retval = put ( s )		5271404	0		=			
ANR	5271418	Identifier	retval		5271404	0					
ANR	5271419	CallExpression	put ( s )		5271404	1					
ANR	5271420	Callee	put		5271404	0					
ANR	5271421	Identifier	put		5271404	0					
ANR	5271422	ArgumentList	s		5271404	1					
ANR	5271423	Argument	s		5271404	0					
ANR	5271424	Identifier	s		5271404	0					
ANR	5271425	ExpressionStatement	restore_crypto_after_secret ( )	1301:1:25305:25334	5271404	3	True				
ANR	5271426	CallExpression	restore_crypto_after_secret ( )		5271404	0					
ANR	5271427	Callee	restore_crypto_after_secret		5271404	0					
ANR	5271428	Identifier	restore_crypto_after_secret		5271404	0					
ANR	5271429	ArgumentList			5271404	1					
ANR	5271430	ReturnStatement	return retval ;	1303:1:25338:25351	5271404	4	True				
ANR	5271431	Identifier	retval		5271404	0					
ANR	5271432	ReturnType	int		5271404	1					
ANR	5271433	Identifier	Stream :: put_secret		5271404	2					
ANR	5271434	ParameterList	char const * s		5271404	3					
ANR	5271435	Parameter	char const * s	1293:20:25222:25234	5271404	0	True				
ANR	5271436	ParameterType	char const *		5271404	0					
ANR	5271437	Identifier	s		5271404	1					
ANR	5271438	CFGEntryNode	ENTRY		5271404		True				
ANR	5271439	CFGExitNode	EXIT		5271404		True				
ANR	5271440	Symbol	s		5271404						
ANR	5271441	Symbol	retval		5271404						
ANR	5271442	Symbol	put		5271404						
ANR	5271443	Function	Stream :: get_secret	1306:0:25356:25506							
ANR	5271444	FunctionDef	Stream :: get_secret (char * & s)		5271443	0					
ANR	5271445	CompoundStatement		1308:0:25391:25506	5271443	0					
ANR	5271446	IdentifierDeclStatement	int retval ;	1309:1:25394:25404	5271443	0	True				
ANR	5271447	IdentifierDecl	retval		5271443	0					
ANR	5271448	IdentifierDeclType	int		5271443	0					
ANR	5271449	Identifier	retval		5271443	1					
ANR	5271450	ExpressionStatement	prepare_crypto_for_secret ( )	1311:1:25408:25435	5271443	1	True				
ANR	5271451	CallExpression	prepare_crypto_for_secret ( )		5271443	0					
ANR	5271452	Callee	prepare_crypto_for_secret		5271443	0					
ANR	5271453	Identifier	prepare_crypto_for_secret		5271443	0					
ANR	5271454	ArgumentList			5271443	1					
ANR	5271455	ExpressionStatement	retval = get ( s )	1313:1:25439:25454	5271443	2	True				
ANR	5271456	AssignmentExpression	retval = get ( s )		5271443	0		=			
ANR	5271457	Identifier	retval		5271443	0					
ANR	5271458	CallExpression	get ( s )		5271443	1					
ANR	5271459	Callee	get		5271443	0					
ANR	5271460	Identifier	get		5271443	0					
ANR	5271461	ArgumentList	s		5271443	1					
ANR	5271462	Argument	s		5271443	0					
ANR	5271463	Identifier	s		5271443	0					
ANR	5271464	ExpressionStatement	restore_crypto_after_secret ( )	1315:1:25458:25487	5271443	3	True				
ANR	5271465	CallExpression	restore_crypto_after_secret ( )		5271443	0					
ANR	5271466	Callee	restore_crypto_after_secret		5271443	0					
ANR	5271467	Identifier	restore_crypto_after_secret		5271443	0					
ANR	5271468	ArgumentList			5271443	1					
ANR	5271469	ReturnStatement	return retval ;	1317:1:25491:25504	5271443	4	True				
ANR	5271470	Identifier	retval		5271443	0					
ANR	5271471	ReturnType	int		5271443	1					
ANR	5271472	Identifier	Stream :: get_secret		5271443	2					
ANR	5271473	ParameterList	char * & s		5271443	3					
ANR	5271474	Parameter	char * & s	1307:20:25380:25387	5271443	0	True				
ANR	5271475	ParameterType	char * &		5271443	0					
ANR	5271476	Identifier	s		5271443	1					
ANR	5271477	CFGEntryNode	ENTRY		5271443		True				
ANR	5271478	CFGExitNode	EXIT		5271443		True				
ANR	5271479	Symbol	s		5271443						
ANR	5271480	Symbol	get		5271443						
ANR	5271481	Symbol	retval		5271443						
ANR	5271482	Function	Stream :: put	1320:0:25509:26397							
ANR	5271483	FunctionDef	"Stream :: put (char const * s , int l)"		5271482	0					
ANR	5271484	CompoundStatement		1322:0:25550:26397	5271482	0					
ANR	5271485	ExpressionStatement	"NETWORK_TRACE ( ""put string \\"""" << s << ""\\"" and int "" << l )"	1323:4:25556:25615	5271482	0	True				
ANR	5271486	CallExpression	"NETWORK_TRACE ( ""put string \\"""" << s << ""\\"" and int "" << l )"		5271482	0					
ANR	5271487	Callee	NETWORK_TRACE		5271482	0					
ANR	5271488	Identifier	NETWORK_TRACE		5271482	0					
ANR	5271489	ArgumentList	"""put string \\"""" << s << ""\\"" and int "" << l"		5271482	1					
ANR	5271490	Argument	"""put string \\"""" << s << ""\\"" and int "" << l"		5271482	0					
ANR	5271491	ShiftExpression	"""put string \\"""" << s << ""\\"" and int "" << l"		5271482	0		<<			
ANR	5271492	PrimaryExpression	"""put string \\"""""		5271482	0					
ANR	5271493	ShiftExpression	"s << ""\\"" and int "" << l"		5271482	1		<<			
ANR	5271494	Identifier	s		5271482	0					
ANR	5271495	ShiftExpression	"""\\"" and int "" << l"		5271482	1		<<			
ANR	5271496	PrimaryExpression	"""\\"" and int """		5271482	0					
ANR	5271497	Identifier	l		5271482	1					
ANR	5271498	SwitchStatement	switch ( _code )		5271482	1					
ANR	5271499	Condition	_code	1325:8:25626:25630	5271482	0	True				
ANR	5271500	Identifier	_code		5271482	0					
ANR	5271501	CompoundStatement		4:14:81:81	5271482	1					
ANR	5271502	Label	case internal :	1326:2:25636:25649	5271482	0	True				
ANR	5271503	Identifier	internal		5271482	0					
ANR	5271504	Label	case external :	1327:2:25653:25666	5271482	1	True				
ANR	5271505	Identifier	external		5271482	0					
ANR	5271506	IfStatement	if ( ! s )		5271482	2					
ANR	5271507	Condition	! s	1328:7:25675:25676	5271482	0	True				
ANR	5271508	UnaryOperationExpression	! s		5271482	0					
ANR	5271509	UnaryOperator	!		5271482	0					
ANR	5271510	Identifier	s		5271482	1					
ANR	5271511	CompoundStatement		7:10:127:127	5271482	1					
ANR	5271512	IfStatement	if ( get_encryption ( ) )		5271482	0					
ANR	5271513	Condition	get_encryption ( )	1329:32:25712:25727	5271482	0	True				
ANR	5271514	CallExpression	get_encryption ( )		5271482	0					
ANR	5271515	Callee	get_encryption		5271482	0					
ANR	5271516	Identifier	get_encryption		5271482	0					
ANR	5271517	ArgumentList			5271482	1					
ANR	5271518	CompoundStatement		9:32:213:224	5271482	1					
ANR	5271519	IdentifierDeclStatement	int len = 1 ;	1330:32:25764:25775	5271482	0	True				
ANR	5271520	IdentifierDecl	len = 1		5271482	0					
ANR	5271521	IdentifierDeclType	int		5271482	0					
ANR	5271522	Identifier	len		5271482	1					
ANR	5271523	AssignmentExpression	len = 1		5271482	2		=			
ANR	5271524	Identifier	len		5271482	0					
ANR	5271525	PrimaryExpression	1		5271482	1					
ANR	5271526	IfStatement	if ( put ( len ) == FALSE )		5271482	1					
ANR	5271527	Condition	put ( len ) == FALSE	1331:36:25813:25829	5271482	0	True				
ANR	5271528	EqualityExpression	put ( len ) == FALSE		5271482	0		==			
ANR	5271529	CallExpression	put ( len )		5271482	0					
ANR	5271530	Callee	put		5271482	0					
ANR	5271531	Identifier	put		5271482	0					
ANR	5271532	ArgumentList	len		5271482	1					
ANR	5271533	Argument	len		5271482	0					
ANR	5271534	Identifier	len		5271482	0					
ANR	5271535	Identifier	FALSE		5271482	1					
ANR	5271536	CompoundStatement		10:55:281:281	5271482	1					
ANR	5271537	ReturnStatement	return FALSE ;	1332:36:25870:25882	5271482	0	True				
ANR	5271538	Identifier	FALSE		5271482	0					
ANR	5271539	IfStatement	"if ( put_bytes ( BIN_NULL_CHAR , 1 ) != 1 )"		5271482	1					
ANR	5271540	Condition	"put_bytes ( BIN_NULL_CHAR , 1 ) != 1"	1336:32:25981:26012	5271482	0	True				
ANR	5271541	EqualityExpression	"put_bytes ( BIN_NULL_CHAR , 1 ) != 1"		5271482	0		!=			
ANR	5271542	CallExpression	"put_bytes ( BIN_NULL_CHAR , 1 )"		5271482	0					
ANR	5271543	Callee	put_bytes		5271482	0					
ANR	5271544	Identifier	put_bytes		5271482	0					
ANR	5271545	ArgumentList	BIN_NULL_CHAR		5271482	1					
ANR	5271546	Argument	BIN_NULL_CHAR		5271482	0					
ANR	5271547	Identifier	BIN_NULL_CHAR		5271482	0					
ANR	5271548	Argument	1		5271482	1					
ANR	5271549	PrimaryExpression	1		5271482	0					
ANR	5271550	PrimaryExpression	1		5271482	1					
ANR	5271551	ReturnStatement	return FALSE ;	1336:66:26015:26027	5271482	1	True				
ANR	5271552	Identifier	FALSE		5271482	0					
ANR	5271553	ElseStatement	else		5271482	0					
ANR	5271554	CompoundStatement		17:7:490:490	5271482	0					
ANR	5271555	IfStatement	if ( get_encryption ( ) )		5271482	0					
ANR	5271556	Condition	get_encryption ( )	1339:32:26075:26090	5271482	0	True				
ANR	5271557	CallExpression	get_encryption ( )		5271482	0					
ANR	5271558	Callee	get_encryption		5271482	0					
ANR	5271559	Identifier	get_encryption		5271482	0					
ANR	5271560	ArgumentList			5271482	1					
ANR	5271561	CompoundStatement		18:50:542:542	5271482	1					
ANR	5271562	IfStatement	if ( put ( l ) == FALSE )		5271482	0					
ANR	5271563	Condition	put ( l ) == FALSE	1340:36:26131:26145	5271482	0	True				
ANR	5271564	EqualityExpression	put ( l ) == FALSE		5271482	0		==			
ANR	5271565	CallExpression	put ( l )		5271482	0					
ANR	5271566	Callee	put		5271482	0					
ANR	5271567	Identifier	put		5271482	0					
ANR	5271568	ArgumentList	l		5271482	1					
ANR	5271569	Argument	l		5271482	0					
ANR	5271570	Identifier	l		5271482	0					
ANR	5271571	Identifier	FALSE		5271482	1					
ANR	5271572	CompoundStatement		19:53:597:597	5271482	1					
ANR	5271573	ReturnStatement	return FALSE ;	1341:36:26186:26198	5271482	0	True				
ANR	5271574	Identifier	FALSE		5271482	0					
ANR	5271575	IfStatement	"if ( put_bytes ( s , l ) != l )"		5271482	1					
ANR	5271576	Condition	"put_bytes ( s , l ) != l"	1344:32:26296:26315	5271482	0	True				
ANR	5271577	EqualityExpression	"put_bytes ( s , l ) != l"		5271482	0		!=			
ANR	5271578	CallExpression	"put_bytes ( s , l )"		5271482	0					
ANR	5271579	Callee	put_bytes		5271482	0					
ANR	5271580	Identifier	put_bytes		5271482	0					
ANR	5271581	ArgumentList	s		5271482	1					
ANR	5271582	Argument	s		5271482	0					
ANR	5271583	Identifier	s		5271482	0					
ANR	5271584	Argument	l		5271482	1					
ANR	5271585	Identifier	l		5271482	0					
ANR	5271586	Identifier	l		5271482	1					
ANR	5271587	ReturnStatement	return FALSE ;	1344:54:26318:26330	5271482	1	True				
ANR	5271588	Identifier	FALSE		5271482	0					
ANR	5271589	BreakStatement	break ;	1346:3:26340:26345	5271482	3	True				
ANR	5271590	Label	case ascii :	1348:2:26350:26360	5271482	4	True				
ANR	5271591	Identifier	ascii		5271482	0					
ANR	5271592	ReturnStatement	return FALSE ;	1349:3:26365:26377	5271482	5	True				
ANR	5271593	Identifier	FALSE		5271482	0					
ANR	5271594	ReturnStatement	return TRUE ;	1352:1:26384:26395	5271482	2	True				
ANR	5271595	Identifier	TRUE		5271482	0					
ANR	5271596	ReturnType	int		5271482	1					
ANR	5271597	Identifier	Stream :: put		5271482	2					
ANR	5271598	ParameterList	"char const * s , int l"		5271482	3					
ANR	5271599	Parameter	char const * s	1321:13:25527:25539	5271482	0	True				
ANR	5271600	ParameterType	char const *		5271482	0					
ANR	5271601	Identifier	s		5271482	1					
ANR	5271602	Parameter	int l	1321:28:25542:25547	5271482	1	True				
ANR	5271603	ParameterType	int		5271482	0					
ANR	5271604	Identifier	l		5271482	1					
ANR	5271605	CFGEntryNode	ENTRY		5271482		True				
ANR	5271606	CFGExitNode	EXIT		5271482		True				
ANR	5271607	Symbol	s		5271482						
ANR	5271608	Symbol	len		5271482						
ANR	5271609	Symbol	_code		5271482						
ANR	5271610	Symbol	BIN_NULL_CHAR		5271482						
ANR	5271611	Symbol	TRUE		5271482						
ANR	5271612	Symbol	FALSE		5271482						
ANR	5271613	Symbol	l		5271482						
ANR	5271614	Symbol	put_bytes		5271482						
ANR	5271615	Symbol	get_encryption		5271482						
ANR	5271616	Symbol	put		5271482						
ANR	5271617	Function	Stream :: get	1365:0:26429:26779							
ANR	5271618	FunctionDef	Stream :: get (char & c)		5271617	0					
ANR	5271619	CompoundStatement		1367:0:26456:26779	5271617	0					
ANR	5271620	ExpressionStatement	putcount = 0	1368:3:26461:26472	5271617	0	True				
ANR	5271621	AssignmentExpression	putcount = 0		5271617	0		=			
ANR	5271622	Identifier	putcount		5271617	0					
ANR	5271623	PrimaryExpression	0		5271617	1					
ANR	5271624	SwitchStatement	switch ( _code )		5271617	1					
ANR	5271625	Condition	_code	1370:8:26483:26487	5271617	0	True				
ANR	5271626	Identifier	_code		5271617	0					
ANR	5271627	CompoundStatement		4:14:32:32	5271617	1					
ANR	5271628	Label	case internal :	1371:2:26493:26506	5271617	0	True				
ANR	5271629	Identifier	internal		5271617	0					
ANR	5271630	Label	case external :	1372:2:26510:26523	5271617	1	True				
ANR	5271631	Identifier	external		5271617	0					
ANR	5271632	Label	case ascii :	1373:2:26527:26537	5271617	2	True				
ANR	5271633	Identifier	ascii		5271617	0					
ANR	5271634	IfStatement	"if ( get_bytes ( & c , 1 ) != 1 )"		5271617	3					
ANR	5271635	Condition	"get_bytes ( & c , 1 ) != 1"	1374:7:26546:26566	5271617	0	True				
ANR	5271636	EqualityExpression	"get_bytes ( & c , 1 ) != 1"		5271617	0		!=			
ANR	5271637	CallExpression	"get_bytes ( & c , 1 )"		5271617	0					
ANR	5271638	Callee	get_bytes		5271617	0					
ANR	5271639	Identifier	get_bytes		5271617	0					
ANR	5271640	ArgumentList	& c		5271617	1					
ANR	5271641	Argument	& c		5271617	0					
ANR	5271642	UnaryOperationExpression	& c		5271617	0					
ANR	5271643	UnaryOperator	&		5271617	0					
ANR	5271644	Identifier	c		5271617	1					
ANR	5271645	Argument	1		5271617	1					
ANR	5271646	PrimaryExpression	1		5271617	0					
ANR	5271647	PrimaryExpression	1		5271617	1					
ANR	5271648	CompoundStatement		8:30:112:112	5271617	1					
ANR	5271649	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(char) failed\\n"" )"	1375:16:26587:26635	5271617	0	True				
ANR	5271650	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(char) failed\\n"" )"		5271617	0					
ANR	5271651	Callee	dprintf		5271617	0					
ANR	5271652	Identifier	dprintf		5271617	0					
ANR	5271653	ArgumentList	D_NETWORK		5271617	1					
ANR	5271654	Argument	D_NETWORK		5271617	0					
ANR	5271655	Identifier	D_NETWORK		5271617	0					
ANR	5271656	Argument	"""Stream::get(char) failed\\n"""		5271617	1					
ANR	5271657	PrimaryExpression	"""Stream::get(char) failed\\n"""		5271617	0					
ANR	5271658	ReturnStatement	return FALSE ;	1376:16:26653:26665	5271617	1	True				
ANR	5271659	Identifier	FALSE		5271617	0					
ANR	5271660	BreakStatement	break ;	1378:3:26684:26689	5271617	4	True				
ANR	5271661	ExpressionStatement	"NETWORK_TRACE ( ""get char "" << c << "" c("" << ++ getcount << "") "" )"	1380:3:26697:26759	5271617	2	True				
ANR	5271662	CallExpression	"NETWORK_TRACE ( ""get char "" << c << "" c("" << ++ getcount << "") "" )"		5271617	0					
ANR	5271663	Callee	NETWORK_TRACE		5271617	0					
ANR	5271664	Identifier	NETWORK_TRACE		5271617	0					
ANR	5271665	ArgumentList	"""get char "" << c << "" c("" << ++ getcount << "") """		5271617	1					
ANR	5271666	Argument	"""get char "" << c << "" c("" << ++ getcount << "") """		5271617	0					
ANR	5271667	ShiftExpression	"""get char "" << c << "" c("" << ++ getcount << "") """		5271617	0		<<			
ANR	5271668	PrimaryExpression	"""get char """		5271617	0					
ANR	5271669	ShiftExpression	"c << "" c("" << ++ getcount << "") """		5271617	1		<<			
ANR	5271670	Identifier	c		5271617	0					
ANR	5271671	ShiftExpression	""" c("" << ++ getcount << "") """		5271617	1		<<			
ANR	5271672	PrimaryExpression	""" c("""		5271617	0					
ANR	5271673	ShiftExpression	"++ getcount << "") """		5271617	1		<<			
ANR	5271674	UnaryExpression	++ getcount		5271617	0					
ANR	5271675	IncDec	++		5271617	0					
ANR	5271676	Identifier	getcount		5271617	1					
ANR	5271677	PrimaryExpression	""") """		5271617	1					
ANR	5271678	ReturnStatement	return TRUE ;	1381:1:26766:26777	5271617	3	True				
ANR	5271679	Identifier	TRUE		5271617	0					
ANR	5271680	ReturnType	int		5271617	1					
ANR	5271681	Identifier	Stream :: get		5271617	2					
ANR	5271682	ParameterList	char & c		5271617	3					
ANR	5271683	Parameter	char & c	1366:13:26447:26453	5271617	0	True				
ANR	5271684	ParameterType	char &		5271617	0					
ANR	5271685	Identifier	c		5271617	1					
ANR	5271686	CFGEntryNode	ENTRY		5271617		True				
ANR	5271687	CFGExitNode	EXIT		5271617		True				
ANR	5271688	Symbol	c		5271617						
ANR	5271689	Symbol	_code		5271617						
ANR	5271690	Symbol	putcount		5271617						
ANR	5271691	Symbol	& c		5271617						
ANR	5271692	Symbol	D_NETWORK		5271617						
ANR	5271693	Symbol	TRUE		5271617						
ANR	5271694	Symbol	FALSE		5271617						
ANR	5271695	Symbol	get_bytes		5271617						
ANR	5271696	Symbol	getcount		5271617						
ANR	5271697	Function	Stream :: get	1386:0:26784:27144							
ANR	5271698	FunctionDef	Stream :: get (unsigned char & c)		5271697	0					
ANR	5271699	CompoundStatement		1388:0:26820:27144	5271697	0					
ANR	5271700	ExpressionStatement	putcount = 0	1389:3:26825:26836	5271697	0	True				
ANR	5271701	AssignmentExpression	putcount = 0		5271697	0		=			
ANR	5271702	Identifier	putcount		5271697	0					
ANR	5271703	PrimaryExpression	0		5271697	1					
ANR	5271704	SwitchStatement	switch ( _code )		5271697	1					
ANR	5271705	Condition	_code	1391:8:26847:26851	5271697	0	True				
ANR	5271706	Identifier	_code		5271697	0					
ANR	5271707	CompoundStatement		4:14:32:32	5271697	1					
ANR	5271708	Label	case internal :	1392:2:26857:26870	5271697	0	True				
ANR	5271709	Identifier	internal		5271697	0					
ANR	5271710	Label	case external :	1393:2:26874:26887	5271697	1	True				
ANR	5271711	Identifier	external		5271697	0					
ANR	5271712	Label	case ascii :	1394:2:26891:26901	5271697	2	True				
ANR	5271713	Identifier	ascii		5271697	0					
ANR	5271714	IfStatement	"if ( get_bytes ( & c , 1 ) != 1 )"		5271697	3					
ANR	5271715	Condition	"get_bytes ( & c , 1 ) != 1"	1395:7:26910:26930	5271697	0	True				
ANR	5271716	EqualityExpression	"get_bytes ( & c , 1 ) != 1"		5271697	0		!=			
ANR	5271717	CallExpression	"get_bytes ( & c , 1 )"		5271697	0					
ANR	5271718	Callee	get_bytes		5271697	0					
ANR	5271719	Identifier	get_bytes		5271697	0					
ANR	5271720	ArgumentList	& c		5271697	1					
ANR	5271721	Argument	& c		5271697	0					
ANR	5271722	UnaryOperationExpression	& c		5271697	0					
ANR	5271723	UnaryOperator	&		5271697	0					
ANR	5271724	Identifier	c		5271697	1					
ANR	5271725	Argument	1		5271697	1					
ANR	5271726	PrimaryExpression	1		5271697	0					
ANR	5271727	PrimaryExpression	1		5271697	1					
ANR	5271728	CompoundStatement		8:30:112:112	5271697	1					
ANR	5271729	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(uchar) failed\\n"" )"	1396:16:26951:27000	5271697	0	True				
ANR	5271730	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(uchar) failed\\n"" )"		5271697	0					
ANR	5271731	Callee	dprintf		5271697	0					
ANR	5271732	Identifier	dprintf		5271697	0					
ANR	5271733	ArgumentList	D_NETWORK		5271697	1					
ANR	5271734	Argument	D_NETWORK		5271697	0					
ANR	5271735	Identifier	D_NETWORK		5271697	0					
ANR	5271736	Argument	"""Stream::get(uchar) failed\\n"""		5271697	1					
ANR	5271737	PrimaryExpression	"""Stream::get(uchar) failed\\n"""		5271697	0					
ANR	5271738	ReturnStatement	return FALSE ;	1397:16:27018:27030	5271697	1	True				
ANR	5271739	Identifier	FALSE		5271697	0					
ANR	5271740	BreakStatement	break ;	1399:3:27049:27054	5271697	4	True				
ANR	5271741	ExpressionStatement	"NETWORK_TRACE ( ""get char "" << c << "" c("" << ++ getcount << "") "" )"	1401:3:27062:27124	5271697	2	True				
ANR	5271742	CallExpression	"NETWORK_TRACE ( ""get char "" << c << "" c("" << ++ getcount << "") "" )"		5271697	0					
ANR	5271743	Callee	NETWORK_TRACE		5271697	0					
ANR	5271744	Identifier	NETWORK_TRACE		5271697	0					
ANR	5271745	ArgumentList	"""get char "" << c << "" c("" << ++ getcount << "") """		5271697	1					
ANR	5271746	Argument	"""get char "" << c << "" c("" << ++ getcount << "") """		5271697	0					
ANR	5271747	ShiftExpression	"""get char "" << c << "" c("" << ++ getcount << "") """		5271697	0		<<			
ANR	5271748	PrimaryExpression	"""get char """		5271697	0					
ANR	5271749	ShiftExpression	"c << "" c("" << ++ getcount << "") """		5271697	1		<<			
ANR	5271750	Identifier	c		5271697	0					
ANR	5271751	ShiftExpression	""" c("" << ++ getcount << "") """		5271697	1		<<			
ANR	5271752	PrimaryExpression	""" c("""		5271697	0					
ANR	5271753	ShiftExpression	"++ getcount << "") """		5271697	1		<<			
ANR	5271754	UnaryExpression	++ getcount		5271697	0					
ANR	5271755	IncDec	++		5271697	0					
ANR	5271756	Identifier	getcount		5271697	1					
ANR	5271757	PrimaryExpression	""") """		5271697	1					
ANR	5271758	ReturnStatement	return TRUE ;	1402:1:27131:27142	5271697	3	True				
ANR	5271759	Identifier	TRUE		5271697	0					
ANR	5271760	ReturnType	int		5271697	1					
ANR	5271761	Identifier	Stream :: get		5271697	2					
ANR	5271762	ParameterList	unsigned char & c		5271697	3					
ANR	5271763	Parameter	unsigned char & c	1387:13:26802:26817	5271697	0	True				
ANR	5271764	ParameterType	unsigned char &		5271697	0					
ANR	5271765	Identifier	c		5271697	1					
ANR	5271766	CFGEntryNode	ENTRY		5271697		True				
ANR	5271767	CFGExitNode	EXIT		5271697		True				
ANR	5271768	Symbol	c		5271697						
ANR	5271769	Symbol	_code		5271697						
ANR	5271770	Symbol	putcount		5271697						
ANR	5271771	Symbol	& c		5271697						
ANR	5271772	Symbol	D_NETWORK		5271697						
ANR	5271773	Symbol	TRUE		5271697						
ANR	5271774	Symbol	FALSE		5271697						
ANR	5271775	Symbol	get_bytes		5271697						
ANR	5271776	Symbol	getcount		5271697						
ANR	5271777	Function	Stream :: get	1407:0:27149:28393							
ANR	5271778	FunctionDef	Stream :: get (int & i)		5271777	0					
ANR	5271779	CompoundStatement		1409:0:27176:28393	5271777	0					
ANR	5271780	IdentifierDeclStatement	int tmp ;	1410:1:27179:27187	5271777	0	True				
ANR	5271781	IdentifierDecl	tmp		5271777	0					
ANR	5271782	IdentifierDeclType	int		5271777	0					
ANR	5271783	Identifier	tmp		5271777	1					
ANR	5271784	IdentifierDeclStatement	"char pad [ INT_SIZE - sizeof ( int ) ] , sign ;"	1411:1:27190:27226	5271777	1	True				
ANR	5271785	IdentifierDecl	pad [ INT_SIZE - sizeof ( int ) ]		5271777	0					
ANR	5271786	IdentifierDeclType	char [ INT_SIZE - sizeof ( int ) ]		5271777	0					
ANR	5271787	Identifier	pad		5271777	1					
ANR	5271788	AdditiveExpression	INT_SIZE - sizeof ( int )		5271777	2		-			
ANR	5271789	Identifier	INT_SIZE		5271777	0					
ANR	5271790	SizeofExpression	sizeof ( int )		5271777	1					
ANR	5271791	Sizeof	sizeof		5271777	0					
ANR	5271792	SizeofOperand	int		5271777	1					
ANR	5271793	IdentifierDecl	sign		5271777	1					
ANR	5271794	IdentifierDeclType	char		5271777	0					
ANR	5271795	Identifier	sign		5271777	1					
ANR	5271796	SwitchStatement	switch ( _code )		5271777	2					
ANR	5271797	Condition	_code	1413:8:27237:27241	5271777	0	True				
ANR	5271798	Identifier	_code		5271777	0					
ANR	5271799	CompoundStatement		5:14:66:66	5271777	1					
ANR	5271800	Label	case internal :	1414:2:27247:27260	5271777	0	True				
ANR	5271801	Identifier	internal		5271777	0					
ANR	5271802	IfStatement	"if ( get_bytes ( & i , sizeof ( int ) ) != sizeof ( int ) )"		5271777	1					
ANR	5271803	Condition	"get_bytes ( & i , sizeof ( int ) ) != sizeof ( int )"	1415:7:27269:27309	5271777	0	True				
ANR	5271804	EqualityExpression	"get_bytes ( & i , sizeof ( int ) ) != sizeof ( int )"		5271777	0		!=			
ANR	5271805	CallExpression	"get_bytes ( & i , sizeof ( int ) )"		5271777	0					
ANR	5271806	Callee	get_bytes		5271777	0					
ANR	5271807	Identifier	get_bytes		5271777	0					
ANR	5271808	ArgumentList	& i		5271777	1					
ANR	5271809	Argument	& i		5271777	0					
ANR	5271810	UnaryOperationExpression	& i		5271777	0					
ANR	5271811	UnaryOperator	&		5271777	0					
ANR	5271812	Identifier	i		5271777	1					
ANR	5271813	Argument	sizeof ( int )		5271777	1					
ANR	5271814	SizeofExpression	sizeof ( int )		5271777	0					
ANR	5271815	Sizeof	sizeof		5271777	0					
ANR	5271816	SizeofOperand	int		5271777	1					
ANR	5271817	SizeofExpression	sizeof ( int )		5271777	1					
ANR	5271818	Sizeof	sizeof		5271777	0					
ANR	5271819	SizeofOperand	int		5271777	1					
ANR	5271820	CompoundStatement		7:50:135:135	5271777	1					
ANR	5271821	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(int) from internal failed\\n"" )"	1416:16:27330:27391	5271777	0	True				
ANR	5271822	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(int) from internal failed\\n"" )"		5271777	0					
ANR	5271823	Callee	dprintf		5271777	0					
ANR	5271824	Identifier	dprintf		5271777	0					
ANR	5271825	ArgumentList	D_NETWORK		5271777	1					
ANR	5271826	Argument	D_NETWORK		5271777	0					
ANR	5271827	Identifier	D_NETWORK		5271777	0					
ANR	5271828	Argument	"""Stream::get(int) from internal failed\\n"""		5271777	1					
ANR	5271829	PrimaryExpression	"""Stream::get(int) from internal failed\\n"""		5271777	0					
ANR	5271830	ReturnStatement	return FALSE ;	1417:16:27409:27421	5271777	1	True				
ANR	5271831	Identifier	FALSE		5271777	0					
ANR	5271832	BreakStatement	break ;	1419:3:27440:27445	5271777	2	True				
ANR	5271833	Label	case external :	1421:2:27450:27463	5271777	3	True				
ANR	5271834	Identifier	external		5271777	0					
ANR	5271835	CompoundStatement		13:17:288:288	5271777	4					
ANR	5271836	IfStatement	if ( INT_SIZE > sizeof ( int ) )		5271777	0					
ANR	5271837	Condition	INT_SIZE > sizeof ( int )	1422:7:27474:27495	5271777	0	True				
ANR	5271838	RelationalExpression	INT_SIZE > sizeof ( int )		5271777	0		>			
ANR	5271839	Identifier	INT_SIZE		5271777	0					
ANR	5271840	SizeofExpression	sizeof ( int )		5271777	1					
ANR	5271841	Sizeof	sizeof		5271777	0					
ANR	5271842	SizeofOperand	int		5271777	1					
ANR	5271843	CompoundStatement		14:31:321:321	5271777	1					
ANR	5271844	IfStatement	"if ( get_bytes ( pad , INT_SIZE - sizeof ( int ) ) != INT_SIZE - sizeof ( int ) )"		5271777	0					
ANR	5271845	Condition	"get_bytes ( pad , INT_SIZE - sizeof ( int ) ) != INT_SIZE - sizeof ( int )"	1423:8:27530:27594	5271777	0	True				
ANR	5271846	EqualityExpression	"get_bytes ( pad , INT_SIZE - sizeof ( int ) ) != INT_SIZE - sizeof ( int )"		5271777	0		!=			
ANR	5271847	CallExpression	"get_bytes ( pad , INT_SIZE - sizeof ( int ) )"		5271777	0					
ANR	5271848	Callee	get_bytes		5271777	0					
ANR	5271849	Identifier	get_bytes		5271777	0					
ANR	5271850	ArgumentList	pad		5271777	1					
ANR	5271851	Argument	pad		5271777	0					
ANR	5271852	Identifier	pad		5271777	0					
ANR	5271853	Argument	INT_SIZE - sizeof ( int )		5271777	1					
ANR	5271854	AdditiveExpression	INT_SIZE - sizeof ( int )		5271777	0		-			
ANR	5271855	Identifier	INT_SIZE		5271777	0					
ANR	5271856	SizeofExpression	sizeof ( int )		5271777	1					
ANR	5271857	Sizeof	sizeof		5271777	0					
ANR	5271858	SizeofOperand	int		5271777	1					
ANR	5271859	AdditiveExpression	INT_SIZE - sizeof ( int )		5271777	1		-			
ANR	5271860	Identifier	INT_SIZE		5271777	0					
ANR	5271861	SizeofExpression	sizeof ( int )		5271777	1					
ANR	5271862	Sizeof	sizeof		5271777	0					
ANR	5271863	SizeofOperand	int		5271777	1					
ANR	5271864	CompoundStatement		16:30:420:420	5271777	1					
ANR	5271865	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(int) failed to read padding\\n"" )"	1425:20:27619:27682	5271777	0	True				
ANR	5271866	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(int) failed to read padding\\n"" )"		5271777	0					
ANR	5271867	Callee	dprintf		5271777	0					
ANR	5271868	Identifier	dprintf		5271777	0					
ANR	5271869	ArgumentList	D_NETWORK		5271777	1					
ANR	5271870	Argument	D_NETWORK		5271777	0					
ANR	5271871	Identifier	D_NETWORK		5271777	0					
ANR	5271872	Argument	"""Stream::get(int) failed to read padding\\n"""		5271777	1					
ANR	5271873	PrimaryExpression	"""Stream::get(int) failed to read padding\\n"""		5271777	0					
ANR	5271874	ReturnStatement	return FALSE ;	1426:5:27689:27701	5271777	1	True				
ANR	5271875	Identifier	FALSE		5271777	0					
ANR	5271876	IfStatement	"if ( get_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int ) )"		5271777	1					
ANR	5271877	Condition	"get_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int )"	1429:7:27721:27763	5271777	0	True				
ANR	5271878	EqualityExpression	"get_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int )"		5271777	0		!=			
ANR	5271879	CallExpression	"get_bytes ( & tmp , sizeof ( int ) )"		5271777	0					
ANR	5271880	Callee	get_bytes		5271777	0					
ANR	5271881	Identifier	get_bytes		5271777	0					
ANR	5271882	ArgumentList	& tmp		5271777	1					
ANR	5271883	Argument	& tmp		5271777	0					
ANR	5271884	UnaryOperationExpression	& tmp		5271777	0					
ANR	5271885	UnaryOperator	&		5271777	0					
ANR	5271886	Identifier	tmp		5271777	1					
ANR	5271887	Argument	sizeof ( int )		5271777	1					
ANR	5271888	SizeofExpression	sizeof ( int )		5271777	0					
ANR	5271889	Sizeof	sizeof		5271777	0					
ANR	5271890	SizeofOperand	int		5271777	1					
ANR	5271891	SizeofExpression	sizeof ( int )		5271777	1					
ANR	5271892	Sizeof	sizeof		5271777	0					
ANR	5271893	SizeofOperand	int		5271777	1					
ANR	5271894	CompoundStatement		21:52:589:589	5271777	1					
ANR	5271895	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(int) failed to read int\\n"" )"	1430:16:27784:27843	5271777	0	True				
ANR	5271896	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(int) failed to read int\\n"" )"		5271777	0					
ANR	5271897	Callee	dprintf		5271777	0					
ANR	5271898	Identifier	dprintf		5271777	0					
ANR	5271899	ArgumentList	D_NETWORK		5271777	1					
ANR	5271900	Argument	D_NETWORK		5271777	0					
ANR	5271901	Identifier	D_NETWORK		5271777	0					
ANR	5271902	Argument	"""Stream::get(int) failed to read int\\n"""		5271777	1					
ANR	5271903	PrimaryExpression	"""Stream::get(int) failed to read int\\n"""		5271777	0					
ANR	5271904	ReturnStatement	return FALSE ;	1431:16:27861:27873	5271777	1	True				
ANR	5271905	Identifier	FALSE		5271777	0					
ANR	5271906	ExpressionStatement	i = ntohl ( tmp )	1433:3:27892:27906	5271777	2	True				
ANR	5271907	AssignmentExpression	i = ntohl ( tmp )		5271777	0		=			
ANR	5271908	Identifier	i		5271777	0					
ANR	5271909	CallExpression	ntohl ( tmp )		5271777	1					
ANR	5271910	Callee	ntohl		5271777	0					
ANR	5271911	Identifier	ntohl		5271777	0					
ANR	5271912	ArgumentList	tmp		5271777	1					
ANR	5271913	Argument	tmp		5271777	0					
ANR	5271914	Identifier	tmp		5271777	0					
ANR	5271915	ExpressionStatement	sign = ( i >= 0 ) ? 0 : 0xff	1434:3:27911:27937	5271777	3	True				
ANR	5271916	AssignmentExpression	sign = ( i >= 0 ) ? 0 : 0xff		5271777	0		=			
ANR	5271917	Identifier	sign		5271777	0					
ANR	5271918	ConditionalExpression	( i >= 0 ) ? 0 : 0xff		5271777	1					
ANR	5271919	Condition	i >= 0		5271777	0					
ANR	5271920	RelationalExpression	i >= 0		5271777	0		>=			
ANR	5271921	Identifier	i		5271777	0					
ANR	5271922	PrimaryExpression	0		5271777	1					
ANR	5271923	PrimaryExpression	0		5271777	1					
ANR	5271924	PrimaryExpression	0xff		5271777	2					
ANR	5271925	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( int ) ; s ++ )		5271777	4					
ANR	5271926	ForInit	int s = 0 ;	1435:8:27947:27954	5271777	0	True				
ANR	5271927	IdentifierDeclStatement	int s = 0 ;		5271777	0					
ANR	5271928	IdentifierDecl	s = 0		5271777	0					
ANR	5271929	IdentifierDeclType	int		5271777	0					
ANR	5271930	Identifier	s		5271777	1					
ANR	5271931	AssignmentExpression	s = 0		5271777	2		=			
ANR	5271932	Identifier	s		5271777	0					
ANR	5271933	PrimaryExpression	0		5271777	1					
ANR	5271934	Condition	s < INT_SIZE - ( int ) sizeof ( int )	1435:17:27956:27984	5271777	1	True				
ANR	5271935	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( int )		5271777	0		<			
ANR	5271936	Identifier	s		5271777	0					
ANR	5271937	AdditiveExpression	INT_SIZE - ( int ) sizeof ( int )		5271777	1		-			
ANR	5271938	Identifier	INT_SIZE		5271777	0					
ANR	5271939	CastExpression	( int ) sizeof ( int )		5271777	1					
ANR	5271940	CastTarget	int		5271777	0					
ANR	5271941	SizeofExpression	sizeof ( int )		5271777	1					
ANR	5271942	Sizeof	sizeof		5271777	0					
ANR	5271943	SizeofOperand	int		5271777	1					
ANR	5271944	PostIncDecOperationExpression	s ++	1435:48:27987:27989	5271777	2	True				
ANR	5271945	Identifier	s		5271777	0					
ANR	5271946	IncDec	++		5271777	1					
ANR	5271947	CompoundStatement		27:53:815:815	5271777	3					
ANR	5271948	IfStatement	if ( pad [ s ] != sign )		5271777	0					
ANR	5271949	Condition	pad [ s ] != sign	1436:8:28020:28033	5271777	0	True				
ANR	5271950	EqualityExpression	pad [ s ] != sign		5271777	0		!=			
ANR	5271951	ArrayIndexing	pad [ s ]		5271777	0					
ANR	5271952	Identifier	pad		5271777	0					
ANR	5271953	Identifier	s		5271777	1					
ANR	5271954	Identifier	sign		5271777	1					
ANR	5271955	CompoundStatement		28:24:859:859	5271777	1					
ANR	5271956	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(int) incorrect pad received: %x\\n"" , pad [ s ] )"	1437:20:28058:28189	5271777	0	True				
ANR	5271957	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(int) incorrect pad received: %x\\n"" , pad [ s ] )"		5271777	0					
ANR	5271958	Callee	dprintf		5271777	0					
ANR	5271959	Identifier	dprintf		5271777	0					
ANR	5271960	ArgumentList	D_NETWORK		5271777	1					
ANR	5271961	Argument	D_NETWORK		5271777	0					
ANR	5271962	Identifier	D_NETWORK		5271777	0					
ANR	5271963	Argument	"""Stream::get(int) incorrect pad received: %x\\n"""		5271777	1					
ANR	5271964	PrimaryExpression	"""Stream::get(int) incorrect pad received: %x\\n"""		5271777	0					
ANR	5271965	Argument	pad [ s ]		5271777	2					
ANR	5271966	ArrayIndexing	pad [ s ]		5271777	0					
ANR	5271967	Identifier	pad		5271777	0					
ANR	5271968	Identifier	s		5271777	1					
ANR	5271969	ReturnStatement	return FALSE ;	1440:5:28196:28208	5271777	1	True				
ANR	5271970	Identifier	FALSE		5271777	0					
ANR	5271971	BreakStatement	break ;	1443:3:28236:28241	5271777	5	True				
ANR	5271972	Label	case ascii :	1446:2:28250:28260	5271777	5	True				
ANR	5271973	Identifier	ascii		5271777	0					
ANR	5271974	ReturnStatement	return FALSE ;	1447:3:28265:28277	5271777	6	True				
ANR	5271975	Identifier	FALSE		5271777	0					
ANR	5271976	ExpressionStatement	putcount = 0	1449:3:28285:28296	5271777	3	True				
ANR	5271977	AssignmentExpression	putcount = 0		5271777	0		=			
ANR	5271978	Identifier	putcount		5271777	0					
ANR	5271979	PrimaryExpression	0		5271777	1					
ANR	5271980	ExpressionStatement	getcount += 4	1450:3:28301:28314	5271777	4	True				
ANR	5271981	AssignmentExpression	getcount += 4		5271777	0		+=			
ANR	5271982	Identifier	getcount		5271777	0					
ANR	5271983	PrimaryExpression	4		5271777	1					
ANR	5271984	ExpressionStatement	"NETWORK_TRACE ( ""get int "" << i << "" c("" << getcount << "") "" )"	1451:3:28319:28377	5271777	5	True				
ANR	5271985	CallExpression	"NETWORK_TRACE ( ""get int "" << i << "" c("" << getcount << "") "" )"		5271777	0					
ANR	5271986	Callee	NETWORK_TRACE		5271777	0					
ANR	5271987	Identifier	NETWORK_TRACE		5271777	0					
ANR	5271988	ArgumentList	"""get int "" << i << "" c("" << getcount << "") """		5271777	1					
ANR	5271989	Argument	"""get int "" << i << "" c("" << getcount << "") """		5271777	0					
ANR	5271990	ShiftExpression	"""get int "" << i << "" c("" << getcount << "") """		5271777	0		<<			
ANR	5271991	PrimaryExpression	"""get int """		5271777	0					
ANR	5271992	ShiftExpression	"i << "" c("" << getcount << "") """		5271777	1		<<			
ANR	5271993	Identifier	i		5271777	0					
ANR	5271994	ShiftExpression	""" c("" << getcount << "") """		5271777	1		<<			
ANR	5271995	PrimaryExpression	""" c("""		5271777	0					
ANR	5271996	ShiftExpression	"getcount << "") """		5271777	1		<<			
ANR	5271997	Identifier	getcount		5271777	0					
ANR	5271998	PrimaryExpression	""") """		5271777	1					
ANR	5271999	ReturnStatement	return TRUE ;	1452:1:28380:28391	5271777	6	True				
ANR	5272000	Identifier	TRUE		5271777	0					
ANR	5272001	ReturnType	int		5271777	1					
ANR	5272002	Identifier	Stream :: get		5271777	2					
ANR	5272003	ParameterList	int & i		5271777	3					
ANR	5272004	Parameter	int & i	1408:13:27167:27173	5271777	0	True				
ANR	5272005	ParameterType	int &		5271777	0					
ANR	5272006	Identifier	i		5271777	1					
ANR	5272007	CFGEntryNode	ENTRY		5271777		True				
ANR	5272008	CFGExitNode	EXIT		5271777		True				
ANR	5272009	Symbol	_code		5271777						
ANR	5272010	Symbol	INT_SIZE		5271777						
ANR	5272011	Symbol	sign		5271777						
ANR	5272012	Symbol	i		5271777						
ANR	5272013	Symbol	ntohl		5271777						
ANR	5272014	Symbol	TRUE		5271777						
ANR	5272015	Symbol	get_bytes		5271777						
ANR	5272016	Symbol	& i		5271777						
ANR	5272017	Symbol	pad		5271777						
ANR	5272018	Symbol	s		5271777						
ANR	5272019	Symbol	tmp		5271777						
ANR	5272020	Symbol	putcount		5271777						
ANR	5272021	Symbol	D_NETWORK		5271777						
ANR	5272022	Symbol	FALSE		5271777						
ANR	5272023	Symbol	& tmp		5271777						
ANR	5272024	Symbol	* s		5271777						
ANR	5272025	Symbol	* pad		5271777						
ANR	5272026	Symbol	getcount		5271777						
ANR	5272027	Function	Stream :: get	1457:0:28398:29624							
ANR	5272028	FunctionDef	Stream :: get (unsigned int & i)		5272027	0					
ANR	5272029	CompoundStatement		1459:0:28433:29624	5272027	0					
ANR	5272030	IdentifierDeclStatement	unsigned int tmp ;	1460:1:28436:28452	5272027	0	True				
ANR	5272031	IdentifierDecl	tmp		5272027	0					
ANR	5272032	IdentifierDeclType	unsigned int		5272027	0					
ANR	5272033	Identifier	tmp		5272027	1					
ANR	5272034	IdentifierDeclStatement	char pad [ INT_SIZE - sizeof ( int ) ] ;	1461:1:28455:28487	5272027	1	True				
ANR	5272035	IdentifierDecl	pad [ INT_SIZE - sizeof ( int ) ]		5272027	0					
ANR	5272036	IdentifierDeclType	char [ INT_SIZE - sizeof ( int ) ]		5272027	0					
ANR	5272037	Identifier	pad		5272027	1					
ANR	5272038	AdditiveExpression	INT_SIZE - sizeof ( int )		5272027	2		-			
ANR	5272039	Identifier	INT_SIZE		5272027	0					
ANR	5272040	SizeofExpression	sizeof ( int )		5272027	1					
ANR	5272041	Sizeof	sizeof		5272027	0					
ANR	5272042	SizeofOperand	int		5272027	1					
ANR	5272043	SwitchStatement	switch ( _code )		5272027	2					
ANR	5272044	Condition	_code	1463:8:28498:28502	5272027	0	True				
ANR	5272045	Identifier	_code		5272027	0					
ANR	5272046	CompoundStatement		5:14:70:70	5272027	1					
ANR	5272047	Label	case internal :	1464:2:28508:28521	5272027	0	True				
ANR	5272048	Identifier	internal		5272027	0					
ANR	5272049	IfStatement	"if ( get_bytes ( & i , sizeof ( int ) ) != sizeof ( int ) )"		5272027	1					
ANR	5272050	Condition	"get_bytes ( & i , sizeof ( int ) ) != sizeof ( int )"	1465:7:28530:28570	5272027	0	True				
ANR	5272051	EqualityExpression	"get_bytes ( & i , sizeof ( int ) ) != sizeof ( int )"		5272027	0		!=			
ANR	5272052	CallExpression	"get_bytes ( & i , sizeof ( int ) )"		5272027	0					
ANR	5272053	Callee	get_bytes		5272027	0					
ANR	5272054	Identifier	get_bytes		5272027	0					
ANR	5272055	ArgumentList	& i		5272027	1					
ANR	5272056	Argument	& i		5272027	0					
ANR	5272057	UnaryOperationExpression	& i		5272027	0					
ANR	5272058	UnaryOperator	&		5272027	0					
ANR	5272059	Identifier	i		5272027	1					
ANR	5272060	Argument	sizeof ( int )		5272027	1					
ANR	5272061	SizeofExpression	sizeof ( int )		5272027	0					
ANR	5272062	Sizeof	sizeof		5272027	0					
ANR	5272063	SizeofOperand	int		5272027	1					
ANR	5272064	SizeofExpression	sizeof ( int )		5272027	1					
ANR	5272065	Sizeof	sizeof		5272027	0					
ANR	5272066	SizeofOperand	int		5272027	1					
ANR	5272067	CompoundStatement		7:50:139:139	5272027	1					
ANR	5272068	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(uint) from internal failed\\n"" )"	1466:16:28591:28653	5272027	0	True				
ANR	5272069	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(uint) from internal failed\\n"" )"		5272027	0					
ANR	5272070	Callee	dprintf		5272027	0					
ANR	5272071	Identifier	dprintf		5272027	0					
ANR	5272072	ArgumentList	D_NETWORK		5272027	1					
ANR	5272073	Argument	D_NETWORK		5272027	0					
ANR	5272074	Identifier	D_NETWORK		5272027	0					
ANR	5272075	Argument	"""Stream::get(uint) from internal failed\\n"""		5272027	1					
ANR	5272076	PrimaryExpression	"""Stream::get(uint) from internal failed\\n"""		5272027	0					
ANR	5272077	ReturnStatement	return FALSE ;	1467:16:28671:28683	5272027	1	True				
ANR	5272078	Identifier	FALSE		5272027	0					
ANR	5272079	BreakStatement	break ;	1469:3:28702:28707	5272027	2	True				
ANR	5272080	Label	case external :	1471:2:28712:28725	5272027	3	True				
ANR	5272081	Identifier	external		5272027	0					
ANR	5272082	CompoundStatement		13:17:293:293	5272027	4					
ANR	5272083	IfStatement	if ( INT_SIZE > sizeof ( int ) )		5272027	0					
ANR	5272084	Condition	INT_SIZE > sizeof ( int )	1472:7:28736:28757	5272027	0	True				
ANR	5272085	RelationalExpression	INT_SIZE > sizeof ( int )		5272027	0		>			
ANR	5272086	Identifier	INT_SIZE		5272027	0					
ANR	5272087	SizeofExpression	sizeof ( int )		5272027	1					
ANR	5272088	Sizeof	sizeof		5272027	0					
ANR	5272089	SizeofOperand	int		5272027	1					
ANR	5272090	CompoundStatement		14:31:326:326	5272027	1					
ANR	5272091	IfStatement	"if ( get_bytes ( pad , INT_SIZE - sizeof ( int ) ) != INT_SIZE - sizeof ( int ) )"		5272027	0					
ANR	5272092	Condition	"get_bytes ( pad , INT_SIZE - sizeof ( int ) ) != INT_SIZE - sizeof ( int )"	1473:8:28792:28856	5272027	0	True				
ANR	5272093	EqualityExpression	"get_bytes ( pad , INT_SIZE - sizeof ( int ) ) != INT_SIZE - sizeof ( int )"		5272027	0		!=			
ANR	5272094	CallExpression	"get_bytes ( pad , INT_SIZE - sizeof ( int ) )"		5272027	0					
ANR	5272095	Callee	get_bytes		5272027	0					
ANR	5272096	Identifier	get_bytes		5272027	0					
ANR	5272097	ArgumentList	pad		5272027	1					
ANR	5272098	Argument	pad		5272027	0					
ANR	5272099	Identifier	pad		5272027	0					
ANR	5272100	Argument	INT_SIZE - sizeof ( int )		5272027	1					
ANR	5272101	AdditiveExpression	INT_SIZE - sizeof ( int )		5272027	0		-			
ANR	5272102	Identifier	INT_SIZE		5272027	0					
ANR	5272103	SizeofExpression	sizeof ( int )		5272027	1					
ANR	5272104	Sizeof	sizeof		5272027	0					
ANR	5272105	SizeofOperand	int		5272027	1					
ANR	5272106	AdditiveExpression	INT_SIZE - sizeof ( int )		5272027	1		-			
ANR	5272107	Identifier	INT_SIZE		5272027	0					
ANR	5272108	SizeofExpression	sizeof ( int )		5272027	1					
ANR	5272109	Sizeof	sizeof		5272027	0					
ANR	5272110	SizeofOperand	int		5272027	1					
ANR	5272111	CompoundStatement		16:30:425:425	5272027	1					
ANR	5272112	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(uint) failed to read padding\\n"" )"	1475:20:28881:28945	5272027	0	True				
ANR	5272113	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(uint) failed to read padding\\n"" )"		5272027	0					
ANR	5272114	Callee	dprintf		5272027	0					
ANR	5272115	Identifier	dprintf		5272027	0					
ANR	5272116	ArgumentList	D_NETWORK		5272027	1					
ANR	5272117	Argument	D_NETWORK		5272027	0					
ANR	5272118	Identifier	D_NETWORK		5272027	0					
ANR	5272119	Argument	"""Stream::get(uint) failed to read padding\\n"""		5272027	1					
ANR	5272120	PrimaryExpression	"""Stream::get(uint) failed to read padding\\n"""		5272027	0					
ANR	5272121	ReturnStatement	return FALSE ;	1476:5:28952:28964	5272027	1	True				
ANR	5272122	Identifier	FALSE		5272027	0					
ANR	5272123	IfStatement	"if ( get_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int ) )"		5272027	1					
ANR	5272124	Condition	"get_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int )"	1479:7:28984:29026	5272027	0	True				
ANR	5272125	EqualityExpression	"get_bytes ( & tmp , sizeof ( int ) ) != sizeof ( int )"		5272027	0		!=			
ANR	5272126	CallExpression	"get_bytes ( & tmp , sizeof ( int ) )"		5272027	0					
ANR	5272127	Callee	get_bytes		5272027	0					
ANR	5272128	Identifier	get_bytes		5272027	0					
ANR	5272129	ArgumentList	& tmp		5272027	1					
ANR	5272130	Argument	& tmp		5272027	0					
ANR	5272131	UnaryOperationExpression	& tmp		5272027	0					
ANR	5272132	UnaryOperator	&		5272027	0					
ANR	5272133	Identifier	tmp		5272027	1					
ANR	5272134	Argument	sizeof ( int )		5272027	1					
ANR	5272135	SizeofExpression	sizeof ( int )		5272027	0					
ANR	5272136	Sizeof	sizeof		5272027	0					
ANR	5272137	SizeofOperand	int		5272027	1					
ANR	5272138	SizeofExpression	sizeof ( int )		5272027	1					
ANR	5272139	Sizeof	sizeof		5272027	0					
ANR	5272140	SizeofOperand	int		5272027	1					
ANR	5272141	CompoundStatement		21:52:595:595	5272027	1					
ANR	5272142	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(uint) failed to read int\\n"" )"	1480:16:29047:29107	5272027	0	True				
ANR	5272143	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(uint) failed to read int\\n"" )"		5272027	0					
ANR	5272144	Callee	dprintf		5272027	0					
ANR	5272145	Identifier	dprintf		5272027	0					
ANR	5272146	ArgumentList	D_NETWORK		5272027	1					
ANR	5272147	Argument	D_NETWORK		5272027	0					
ANR	5272148	Identifier	D_NETWORK		5272027	0					
ANR	5272149	Argument	"""Stream::get(uint) failed to read int\\n"""		5272027	1					
ANR	5272150	PrimaryExpression	"""Stream::get(uint) failed to read int\\n"""		5272027	0					
ANR	5272151	ReturnStatement	return FALSE ;	1481:16:29125:29137	5272027	1	True				
ANR	5272152	Identifier	FALSE		5272027	0					
ANR	5272153	ExpressionStatement	i = ntohl ( tmp )	1483:3:29156:29170	5272027	2	True				
ANR	5272154	AssignmentExpression	i = ntohl ( tmp )		5272027	0		=			
ANR	5272155	Identifier	i		5272027	0					
ANR	5272156	CallExpression	ntohl ( tmp )		5272027	1					
ANR	5272157	Callee	ntohl		5272027	0					
ANR	5272158	Identifier	ntohl		5272027	0					
ANR	5272159	ArgumentList	tmp		5272027	1					
ANR	5272160	Argument	tmp		5272027	0					
ANR	5272161	Identifier	tmp		5272027	0					
ANR	5272162	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( int ) ; s ++ )		5272027	3					
ANR	5272163	ForInit	int s = 0 ;	1484:8:29180:29187	5272027	0	True				
ANR	5272164	IdentifierDeclStatement	int s = 0 ;		5272027	0					
ANR	5272165	IdentifierDecl	s = 0		5272027	0					
ANR	5272166	IdentifierDeclType	int		5272027	0					
ANR	5272167	Identifier	s		5272027	1					
ANR	5272168	AssignmentExpression	s = 0		5272027	2		=			
ANR	5272169	Identifier	s		5272027	0					
ANR	5272170	PrimaryExpression	0		5272027	1					
ANR	5272171	Condition	s < INT_SIZE - ( int ) sizeof ( int )	1484:17:29189:29217	5272027	1	True				
ANR	5272172	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( int )		5272027	0		<			
ANR	5272173	Identifier	s		5272027	0					
ANR	5272174	AdditiveExpression	INT_SIZE - ( int ) sizeof ( int )		5272027	1		-			
ANR	5272175	Identifier	INT_SIZE		5272027	0					
ANR	5272176	CastExpression	( int ) sizeof ( int )		5272027	1					
ANR	5272177	CastTarget	int		5272027	0					
ANR	5272178	SizeofExpression	sizeof ( int )		5272027	1					
ANR	5272179	Sizeof	sizeof		5272027	0					
ANR	5272180	SizeofOperand	int		5272027	1					
ANR	5272181	PostIncDecOperationExpression	s ++	1484:48:29220:29222	5272027	2	True				
ANR	5272182	Identifier	s		5272027	0					
ANR	5272183	IncDec	++		5272027	1					
ANR	5272184	CompoundStatement		26:53:791:791	5272027	3					
ANR	5272185	IfStatement	if ( pad [ s ] != 0 )		5272027	0					
ANR	5272186	Condition	pad [ s ] != 0	1485:8:29253:29263	5272027	0	True				
ANR	5272187	EqualityExpression	pad [ s ] != 0		5272027	0		!=			
ANR	5272188	ArrayIndexing	pad [ s ]		5272027	0					
ANR	5272189	Identifier	pad		5272027	0					
ANR	5272190	Identifier	s		5272027	1					
ANR	5272191	PrimaryExpression	0		5272027	1					
ANR	5272192	CompoundStatement		27:21:832:832	5272027	1					
ANR	5272193	ExpressionStatement	"dprintf ( D_NETWORK , ""Stream::get(uint) incorrect pad received: %x\\n"" , pad [ s ] )"	1486:20:29288:29420	5272027	0	True				
ANR	5272194	CallExpression	"dprintf ( D_NETWORK , ""Stream::get(uint) incorrect pad received: %x\\n"" , pad [ s ] )"		5272027	0					
ANR	5272195	Callee	dprintf		5272027	0					
ANR	5272196	Identifier	dprintf		5272027	0					
ANR	5272197	ArgumentList	D_NETWORK		5272027	1					
ANR	5272198	Argument	D_NETWORK		5272027	0					
ANR	5272199	Identifier	D_NETWORK		5272027	0					
ANR	5272200	Argument	"""Stream::get(uint) incorrect pad received: %x\\n"""		5272027	1					
ANR	5272201	PrimaryExpression	"""Stream::get(uint) incorrect pad received: %x\\n"""		5272027	0					
ANR	5272202	Argument	pad [ s ]		5272027	2					
ANR	5272203	ArrayIndexing	pad [ s ]		5272027	0					
ANR	5272204	Identifier	pad		5272027	0					
ANR	5272205	Identifier	s		5272027	1					
ANR	5272206	ReturnStatement	return FALSE ;	1489:5:29427:29439	5272027	1	True				
ANR	5272207	Identifier	FALSE		5272027	0					
ANR	5272208	BreakStatement	break ;	1492:3:29467:29472	5272027	4	True				
ANR	5272209	Label	case ascii :	1495:2:29481:29491	5272027	5	True				
ANR	5272210	Identifier	ascii		5272027	0					
ANR	5272211	ReturnStatement	return FALSE ;	1496:3:29496:29508	5272027	6	True				
ANR	5272212	Identifier	FALSE		5272027	0					
ANR	5272213	ExpressionStatement	putcount = 0	1498:3:29516:29527	5272027	3	True				
ANR	5272214	AssignmentExpression	putcount = 0		5272027	0		=			
ANR	5272215	Identifier	putcount		5272027	0					
ANR	5272216	PrimaryExpression	0		5272027	1					
ANR	5272217	ExpressionStatement	getcount += 4	1499:3:29532:29545	5272027	4	True				
ANR	5272218	AssignmentExpression	getcount += 4		5272027	0		+=			
ANR	5272219	Identifier	getcount		5272027	0					
ANR	5272220	PrimaryExpression	4		5272027	1					
ANR	5272221	ExpressionStatement	"NETWORK_TRACE ( ""get int "" << i << "" c("" << getcount << "") "" )"	1500:3:29550:29608	5272027	5	True				
ANR	5272222	CallExpression	"NETWORK_TRACE ( ""get int "" << i << "" c("" << getcount << "") "" )"		5272027	0					
ANR	5272223	Callee	NETWORK_TRACE		5272027	0					
ANR	5272224	Identifier	NETWORK_TRACE		5272027	0					
ANR	5272225	ArgumentList	"""get int "" << i << "" c("" << getcount << "") """		5272027	1					
ANR	5272226	Argument	"""get int "" << i << "" c("" << getcount << "") """		5272027	0					
ANR	5272227	ShiftExpression	"""get int "" << i << "" c("" << getcount << "") """		5272027	0		<<			
ANR	5272228	PrimaryExpression	"""get int """		5272027	0					
ANR	5272229	ShiftExpression	"i << "" c("" << getcount << "") """		5272027	1		<<			
ANR	5272230	Identifier	i		5272027	0					
ANR	5272231	ShiftExpression	""" c("" << getcount << "") """		5272027	1		<<			
ANR	5272232	PrimaryExpression	""" c("""		5272027	0					
ANR	5272233	ShiftExpression	"getcount << "") """		5272027	1		<<			
ANR	5272234	Identifier	getcount		5272027	0					
ANR	5272235	PrimaryExpression	""") """		5272027	1					
ANR	5272236	ReturnStatement	return TRUE ;	1501:1:29611:29622	5272027	6	True				
ANR	5272237	Identifier	TRUE		5272027	0					
ANR	5272238	ReturnType	int		5272027	1					
ANR	5272239	Identifier	Stream :: get		5272027	2					
ANR	5272240	ParameterList	unsigned int & i		5272027	3					
ANR	5272241	Parameter	unsigned int & i	1458:13:28416:28430	5272027	0	True				
ANR	5272242	ParameterType	unsigned int &		5272027	0					
ANR	5272243	Identifier	i		5272027	1					
ANR	5272244	CFGEntryNode	ENTRY		5272027		True				
ANR	5272245	CFGExitNode	EXIT		5272027		True				
ANR	5272246	Symbol	_code		5272027						
ANR	5272247	Symbol	INT_SIZE		5272027						
ANR	5272248	Symbol	i		5272027						
ANR	5272249	Symbol	ntohl		5272027						
ANR	5272250	Symbol	TRUE		5272027						
ANR	5272251	Symbol	get_bytes		5272027						
ANR	5272252	Symbol	& i		5272027						
ANR	5272253	Symbol	pad		5272027						
ANR	5272254	Symbol	s		5272027						
ANR	5272255	Symbol	tmp		5272027						
ANR	5272256	Symbol	putcount		5272027						
ANR	5272257	Symbol	D_NETWORK		5272027						
ANR	5272258	Symbol	FALSE		5272027						
ANR	5272259	Symbol	& tmp		5272027						
ANR	5272260	Symbol	* pad		5272027						
ANR	5272261	Symbol	* s		5272027						
ANR	5272262	Symbol	getcount		5272027						
ANR	5272263	Function	Stream :: get	1506:0:29629:30541							
ANR	5272264	FunctionDef	Stream :: get (long & l)		5272263	0					
ANR	5272265	CompoundStatement		1508:0:29656:30541	5272263	0					
ANR	5272266	IdentifierDeclStatement	int i ;	1509:1:29659:29665	5272263	0	True				
ANR	5272267	IdentifierDecl	i		5272263	0					
ANR	5272268	IdentifierDeclType	int		5272263	0					
ANR	5272269	Identifier	i		5272263	1					
ANR	5272270	IdentifierDeclStatement	"char pad [ INT_SIZE - sizeof ( long ) ] , sign ;"	1510:1:29668:29705	5272263	1	True				
ANR	5272271	IdentifierDecl	pad [ INT_SIZE - sizeof ( long ) ]		5272263	0					
ANR	5272272	IdentifierDeclType	char [ INT_SIZE - sizeof ( long ) ]		5272263	0					
ANR	5272273	Identifier	pad		5272263	1					
ANR	5272274	AdditiveExpression	INT_SIZE - sizeof ( long )		5272263	2		-			
ANR	5272275	Identifier	INT_SIZE		5272263	0					
ANR	5272276	SizeofExpression	sizeof ( long )		5272263	1					
ANR	5272277	Sizeof	sizeof		5272263	0					
ANR	5272278	SizeofOperand	long		5272263	1					
ANR	5272279	IdentifierDecl	sign		5272263	1					
ANR	5272280	IdentifierDeclType	char		5272263	0					
ANR	5272281	Identifier	sign		5272263	1					
ANR	5272282	SwitchStatement	switch ( _code )		5272263	2					
ANR	5272283	Condition	_code	1512:8:29716:29720	5272263	0	True				
ANR	5272284	Identifier	_code		5272263	0					
ANR	5272285	CompoundStatement		5:14:65:65	5272263	1					
ANR	5272286	Label	case internal :	1513:2:29726:29739	5272263	0	True				
ANR	5272287	Identifier	internal		5272263	0					
ANR	5272288	IfStatement	"if ( get_bytes ( & l , sizeof ( long ) ) != sizeof ( long ) )"		5272263	1					
ANR	5272289	Condition	"get_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"	1514:7:29748:29790	5272263	0	True				
ANR	5272290	EqualityExpression	"get_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"		5272263	0		!=			
ANR	5272291	CallExpression	"get_bytes ( & l , sizeof ( long ) )"		5272263	0					
ANR	5272292	Callee	get_bytes		5272263	0					
ANR	5272293	Identifier	get_bytes		5272263	0					
ANR	5272294	ArgumentList	& l		5272263	1					
ANR	5272295	Argument	& l		5272263	0					
ANR	5272296	UnaryOperationExpression	& l		5272263	0					
ANR	5272297	UnaryOperator	&		5272263	0					
ANR	5272298	Identifier	l		5272263	1					
ANR	5272299	Argument	sizeof ( long )		5272263	1					
ANR	5272300	SizeofExpression	sizeof ( long )		5272263	0					
ANR	5272301	Sizeof	sizeof		5272263	0					
ANR	5272302	SizeofOperand	long		5272263	1					
ANR	5272303	SizeofExpression	sizeof ( long )		5272263	1					
ANR	5272304	Sizeof	sizeof		5272263	0					
ANR	5272305	SizeofOperand	long		5272263	1					
ANR	5272306	ReturnStatement	return FALSE ;	1514:52:29793:29805	5272263	1	True				
ANR	5272307	Identifier	FALSE		5272263	0					
ANR	5272308	BreakStatement	break ;	1515:3:29810:29815	5272263	2	True				
ANR	5272309	Label	case external :	1517:2:29820:29833	5272263	3	True				
ANR	5272310	Identifier	external		5272263	0					
ANR	5272311	IfStatement	if ( ( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE ) )		5272263	4					
ANR	5272312	Condition	( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE )	1518:7:29842:29899	5272263	0	True				
ANR	5272313	OrExpression	( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE )		5272263	0		||			
ANR	5272314	EqualityExpression	sizeof ( int ) == sizeof ( long )		5272263	0		==			
ANR	5272315	SizeofExpression	sizeof ( int )		5272263	0					
ANR	5272316	Sizeof	sizeof		5272263	0					
ANR	5272317	SizeofOperand	int		5272263	1					
ANR	5272318	SizeofExpression	sizeof ( long )		5272263	1					
ANR	5272319	Sizeof	sizeof		5272263	0					
ANR	5272320	SizeofOperand	long		5272263	1					
ANR	5272321	RelationalExpression	sizeof ( long ) > INT_SIZE		5272263	1		>			
ANR	5272322	SizeofExpression	sizeof ( long )		5272263	0					
ANR	5272323	Sizeof	sizeof		5272263	0					
ANR	5272324	SizeofOperand	long		5272263	1					
ANR	5272325	Identifier	INT_SIZE		5272263	1					
ANR	5272326	CompoundStatement		11:67:245:245	5272263	1					
ANR	5272327	IfStatement	if ( ! get ( i ) )		5272263	0					
ANR	5272328	Condition	! get ( i )	1519:8:29912:29918	5272263	0	True				
ANR	5272329	UnaryOperationExpression	! get ( i )		5272263	0					
ANR	5272330	UnaryOperator	!		5272263	0					
ANR	5272331	CallExpression	get ( i )		5272263	1					
ANR	5272332	Callee	get		5272263	0					
ANR	5272333	Identifier	get		5272263	0					
ANR	5272334	ArgumentList	i		5272263	1					
ANR	5272335	Argument	i		5272263	0					
ANR	5272336	Identifier	i		5272263	0					
ANR	5272337	ReturnStatement	return FALSE ;	1519:17:29921:29933	5272263	1	True				
ANR	5272338	Identifier	FALSE		5272263	0					
ANR	5272339	ExpressionStatement	l = ( long ) i	1520:4:29939:29951	5272263	1	True				
ANR	5272340	AssignmentExpression	l = ( long ) i		5272263	0		=			
ANR	5272341	Identifier	l		5272263	0					
ANR	5272342	CastExpression	( long ) i		5272263	1					
ANR	5272343	CastTarget	long		5272263	0					
ANR	5272344	Identifier	i		5272263	1					
ANR	5272345	ElseStatement	else		5272263	0					
ANR	5272346	CompoundStatement		14:10:306:306	5272263	0					
ANR	5272347	IfStatement	if ( sizeof ( long ) < INT_SIZE )		5272263	0					
ANR	5272348	Condition	sizeof ( long ) < INT_SIZE	1522:8:29973:29995	5272263	0	True				
ANR	5272349	RelationalExpression	sizeof ( long ) < INT_SIZE		5272263	0		<			
ANR	5272350	SizeofExpression	sizeof ( long )		5272263	0					
ANR	5272351	Sizeof	sizeof		5272263	0					
ANR	5272352	SizeofOperand	long		5272263	1					
ANR	5272353	Identifier	INT_SIZE		5272263	1					
ANR	5272354	CompoundStatement		15:33:341:341	5272263	1					
ANR	5272355	IfStatement	"if ( get_bytes ( pad , INT_SIZE - sizeof ( long ) ) != INT_SIZE - sizeof ( long ) )"		5272263	0					
ANR	5272356	Condition	"get_bytes ( pad , INT_SIZE - sizeof ( long ) ) != INT_SIZE - sizeof ( long )"	1523:9:30009:30076	5272263	0	True				
ANR	5272357	EqualityExpression	"get_bytes ( pad , INT_SIZE - sizeof ( long ) ) != INT_SIZE - sizeof ( long )"		5272263	0		!=			
ANR	5272358	CallExpression	"get_bytes ( pad , INT_SIZE - sizeof ( long ) )"		5272263	0					
ANR	5272359	Callee	get_bytes		5272263	0					
ANR	5272360	Identifier	get_bytes		5272263	0					
ANR	5272361	ArgumentList	pad		5272263	1					
ANR	5272362	Argument	pad		5272263	0					
ANR	5272363	Identifier	pad		5272263	0					
ANR	5272364	Argument	INT_SIZE - sizeof ( long )		5272263	1					
ANR	5272365	AdditiveExpression	INT_SIZE - sizeof ( long )		5272263	0		-			
ANR	5272366	Identifier	INT_SIZE		5272263	0					
ANR	5272367	SizeofExpression	sizeof ( long )		5272263	1					
ANR	5272368	Sizeof	sizeof		5272263	0					
ANR	5272369	SizeofOperand	long		5272263	1					
ANR	5272370	AdditiveExpression	INT_SIZE - sizeof ( long )		5272263	1		-			
ANR	5272371	Identifier	INT_SIZE		5272263	0					
ANR	5272372	SizeofExpression	sizeof ( long )		5272263	1					
ANR	5272373	Sizeof	sizeof		5272263	0					
ANR	5272374	SizeofOperand	long		5272263	1					
ANR	5272375	CompoundStatement		17:32:422:422	5272263	1					
ANR	5272376	ReturnStatement	return FALSE ;	1525:6:30087:30099	5272263	0	True				
ANR	5272377	Identifier	FALSE		5272263	0					
ANR	5272378	IfStatement	"if ( get_bytes ( & l , sizeof ( long ) ) != sizeof ( long ) )"		5272263	1					
ANR	5272379	Condition	"get_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"	1528:8:30122:30164	5272263	0	True				
ANR	5272380	EqualityExpression	"get_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"		5272263	0		!=			
ANR	5272381	CallExpression	"get_bytes ( & l , sizeof ( long ) )"		5272263	0					
ANR	5272382	Callee	get_bytes		5272263	0					
ANR	5272383	Identifier	get_bytes		5272263	0					
ANR	5272384	ArgumentList	& l		5272263	1					
ANR	5272385	Argument	& l		5272263	0					
ANR	5272386	UnaryOperationExpression	& l		5272263	0					
ANR	5272387	UnaryOperator	&		5272263	0					
ANR	5272388	Identifier	l		5272263	1					
ANR	5272389	Argument	sizeof ( long )		5272263	1					
ANR	5272390	SizeofExpression	sizeof ( long )		5272263	0					
ANR	5272391	Sizeof	sizeof		5272263	0					
ANR	5272392	SizeofOperand	long		5272263	1					
ANR	5272393	SizeofExpression	sizeof ( long )		5272263	1					
ANR	5272394	Sizeof	sizeof		5272263	0					
ANR	5272395	SizeofOperand	long		5272263	1					
ANR	5272396	ReturnStatement	return FALSE ;	1528:53:30167:30179	5272263	1	True				
ANR	5272397	Identifier	FALSE		5272263	0					
ANR	5272398	IfStatement	if ( ! hton_is_noop ( ) )		5272263	2					
ANR	5272399	Condition	! hton_is_noop ( )	1529:8:30189:30203	5272263	0	True				
ANR	5272400	UnaryOperationExpression	! hton_is_noop ( )		5272263	0					
ANR	5272401	UnaryOperator	!		5272263	0					
ANR	5272402	CallExpression	hton_is_noop ( )		5272263	1					
ANR	5272403	Callee	hton_is_noop		5272263	0					
ANR	5272404	Identifier	hton_is_noop		5272263	0					
ANR	5272405	ArgumentList			5272263	1					
ANR	5272406	CompoundStatement		22:25:549:549	5272263	1					
ANR	5272407	ExpressionStatement	l = ntohL ( l )	1530:5:30246:30258	5272263	0	True				
ANR	5272408	AssignmentExpression	l = ntohL ( l )		5272263	0		=			
ANR	5272409	Identifier	l		5272263	0					
ANR	5272410	CallExpression	ntohL ( l )		5272263	1					
ANR	5272411	Callee	ntohL		5272263	0					
ANR	5272412	Identifier	ntohL		5272263	0					
ANR	5272413	ArgumentList	l		5272263	1					
ANR	5272414	Argument	l		5272263	0					
ANR	5272415	Identifier	l		5272263	0					
ANR	5272416	ExpressionStatement	sign = ( l >= 0 ) ? 0 : 0xff	1532:4:30270:30296	5272263	3	True				
ANR	5272417	AssignmentExpression	sign = ( l >= 0 ) ? 0 : 0xff		5272263	0		=			
ANR	5272418	Identifier	sign		5272263	0					
ANR	5272419	ConditionalExpression	( l >= 0 ) ? 0 : 0xff		5272263	1					
ANR	5272420	Condition	l >= 0		5272263	0					
ANR	5272421	RelationalExpression	l >= 0		5272263	0		>=			
ANR	5272422	Identifier	l		5272263	0					
ANR	5272423	PrimaryExpression	0		5272263	1					
ANR	5272424	PrimaryExpression	0		5272263	1					
ANR	5272425	PrimaryExpression	0xff		5272263	2					
ANR	5272426	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( long ) ; s ++ )		5272263	4					
ANR	5272427	ForInit	int s = 0 ;	1533:9:30307:30314	5272263	0	True				
ANR	5272428	IdentifierDeclStatement	int s = 0 ;		5272263	0					
ANR	5272429	IdentifierDecl	s = 0		5272263	0					
ANR	5272430	IdentifierDeclType	int		5272263	0					
ANR	5272431	Identifier	s		5272263	1					
ANR	5272432	AssignmentExpression	s = 0		5272263	2		=			
ANR	5272433	Identifier	s		5272263	0					
ANR	5272434	PrimaryExpression	0		5272263	1					
ANR	5272435	Condition	s < INT_SIZE - ( int ) sizeof ( long )	1533:18:30316:30345	5272263	1	True				
ANR	5272436	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( long )		5272263	0		<			
ANR	5272437	Identifier	s		5272263	0					
ANR	5272438	AdditiveExpression	INT_SIZE - ( int ) sizeof ( long )		5272263	1		-			
ANR	5272439	Identifier	INT_SIZE		5272263	0					
ANR	5272440	CastExpression	( int ) sizeof ( long )		5272263	1					
ANR	5272441	CastTarget	int		5272263	0					
ANR	5272442	SizeofExpression	sizeof ( long )		5272263	1					
ANR	5272443	Sizeof	sizeof		5272263	0					
ANR	5272444	SizeofOperand	long		5272263	1					
ANR	5272445	PostIncDecOperationExpression	s ++	1533:50:30348:30350	5272263	2	True				
ANR	5272446	Identifier	s		5272263	0					
ANR	5272447	IncDec	++		5272263	1					
ANR	5272448	CompoundStatement		26:55:696:696	5272263	3					
ANR	5272449	IfStatement	if ( pad [ s ] != sign )		5272263	0					
ANR	5272450	Condition	pad [ s ] != sign	1534:9:30377:30390	5272263	0	True				
ANR	5272451	EqualityExpression	pad [ s ] != sign		5272263	0		!=			
ANR	5272452	ArrayIndexing	pad [ s ]		5272263	0					
ANR	5272453	Identifier	pad		5272263	0					
ANR	5272454	Identifier	s		5272263	1					
ANR	5272455	Identifier	sign		5272263	1					
ANR	5272456	CompoundStatement		27:25:736:736	5272263	1					
ANR	5272457	ReturnStatement	return FALSE ;	1535:6:30401:30413	5272263	0	True				
ANR	5272458	Identifier	FALSE		5272263	0					
ANR	5272459	BreakStatement	break ;	1539:3:30448:30453	5272263	5	True				
ANR	5272460	Label	case ascii :	1541:2:30458:30468	5272263	6	True				
ANR	5272461	Identifier	ascii		5272263	0					
ANR	5272462	ReturnStatement	return FALSE ;	1542:3:30473:30485	5272263	7	True				
ANR	5272463	Identifier	FALSE		5272263	0					
ANR	5272464	ExpressionStatement	"NETWORK_TRACE ( ""get long "" << l )"	1544:4:30494:30525	5272263	3	True				
ANR	5272465	CallExpression	"NETWORK_TRACE ( ""get long "" << l )"		5272263	0					
ANR	5272466	Callee	NETWORK_TRACE		5272263	0					
ANR	5272467	Identifier	NETWORK_TRACE		5272263	0					
ANR	5272468	ArgumentList	"""get long "" << l"		5272263	1					
ANR	5272469	Argument	"""get long "" << l"		5272263	0					
ANR	5272470	ShiftExpression	"""get long "" << l"		5272263	0		<<			
ANR	5272471	PrimaryExpression	"""get long """		5272263	0					
ANR	5272472	Identifier	l		5272263	1					
ANR	5272473	ReturnStatement	return TRUE ;	1545:1:30528:30539	5272263	4	True				
ANR	5272474	Identifier	TRUE		5272263	0					
ANR	5272475	ReturnType	int		5272263	1					
ANR	5272476	Identifier	Stream :: get		5272263	2					
ANR	5272477	ParameterList	long & l		5272263	3					
ANR	5272478	Parameter	long & l	1507:13:29647:29653	5272263	0	True				
ANR	5272479	ParameterType	long &		5272263	0					
ANR	5272480	Identifier	l		5272263	1					
ANR	5272481	CFGEntryNode	ENTRY		5272263		True				
ANR	5272482	CFGExitNode	EXIT		5272263		True				
ANR	5272483	Symbol	_code		5272263						
ANR	5272484	Symbol	INT_SIZE		5272263						
ANR	5272485	Symbol	sign		5272263						
ANR	5272486	Symbol	i		5272263						
ANR	5272487	Symbol	ntohL		5272263						
ANR	5272488	Symbol	TRUE		5272263						
ANR	5272489	Symbol	l		5272263						
ANR	5272490	Symbol	get_bytes		5272263						
ANR	5272491	Symbol	pad		5272263						
ANR	5272492	Symbol	& l		5272263						
ANR	5272493	Symbol	s		5272263						
ANR	5272494	Symbol	hton_is_noop		5272263						
ANR	5272495	Symbol	get		5272263						
ANR	5272496	Symbol	FALSE		5272263						
ANR	5272497	Symbol	* pad		5272263						
ANR	5272498	Symbol	* s		5272263						
ANR	5272499	Function	Stream :: get	1550:0:30546:31444							
ANR	5272500	FunctionDef	Stream :: get (unsigned long & l)		5272499	0					
ANR	5272501	CompoundStatement		1552:0:30582:31444	5272499	0					
ANR	5272502	IdentifierDeclStatement	unsigned int i ;	1553:1:30585:30600	5272499	0	True				
ANR	5272503	IdentifierDecl	i		5272499	0					
ANR	5272504	IdentifierDeclType	unsigned int		5272499	0					
ANR	5272505	Identifier	i		5272499	1					
ANR	5272506	IdentifierDeclStatement	char pad [ INT_SIZE - sizeof ( long ) ] ;	1554:1:30603:30634	5272499	1	True				
ANR	5272507	IdentifierDecl	pad [ INT_SIZE - sizeof ( long ) ]		5272499	0					
ANR	5272508	IdentifierDeclType	char [ INT_SIZE - sizeof ( long ) ]		5272499	0					
ANR	5272509	Identifier	pad		5272499	1					
ANR	5272510	AdditiveExpression	INT_SIZE - sizeof ( long )		5272499	2		-			
ANR	5272511	Identifier	INT_SIZE		5272499	0					
ANR	5272512	SizeofExpression	sizeof ( long )		5272499	1					
ANR	5272513	Sizeof	sizeof		5272499	0					
ANR	5272514	SizeofOperand	long		5272499	1					
ANR	5272515	SwitchStatement	switch ( _code )		5272499	2					
ANR	5272516	Condition	_code	1556:8:30645:30649	5272499	0	True				
ANR	5272517	Identifier	_code		5272499	0					
ANR	5272518	CompoundStatement		5:14:68:68	5272499	1					
ANR	5272519	Label	case internal :	1557:2:30655:30668	5272499	0	True				
ANR	5272520	Identifier	internal		5272499	0					
ANR	5272521	IfStatement	"if ( get_bytes ( & l , sizeof ( long ) ) != sizeof ( long ) )"		5272499	1					
ANR	5272522	Condition	"get_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"	1558:7:30677:30719	5272499	0	True				
ANR	5272523	EqualityExpression	"get_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"		5272499	0		!=			
ANR	5272524	CallExpression	"get_bytes ( & l , sizeof ( long ) )"		5272499	0					
ANR	5272525	Callee	get_bytes		5272499	0					
ANR	5272526	Identifier	get_bytes		5272499	0					
ANR	5272527	ArgumentList	& l		5272499	1					
ANR	5272528	Argument	& l		5272499	0					
ANR	5272529	UnaryOperationExpression	& l		5272499	0					
ANR	5272530	UnaryOperator	&		5272499	0					
ANR	5272531	Identifier	l		5272499	1					
ANR	5272532	Argument	sizeof ( long )		5272499	1					
ANR	5272533	SizeofExpression	sizeof ( long )		5272499	0					
ANR	5272534	Sizeof	sizeof		5272499	0					
ANR	5272535	SizeofOperand	long		5272499	1					
ANR	5272536	SizeofExpression	sizeof ( long )		5272499	1					
ANR	5272537	Sizeof	sizeof		5272499	0					
ANR	5272538	SizeofOperand	long		5272499	1					
ANR	5272539	ReturnStatement	return FALSE ;	1558:52:30722:30734	5272499	1	True				
ANR	5272540	Identifier	FALSE		5272499	0					
ANR	5272541	BreakStatement	break ;	1559:3:30739:30744	5272499	2	True				
ANR	5272542	Label	case external :	1561:2:30749:30762	5272499	3	True				
ANR	5272543	Identifier	external		5272499	0					
ANR	5272544	IfStatement	if ( ( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE ) )		5272499	4					
ANR	5272545	Condition	( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE )	1562:7:30771:30828	5272499	0	True				
ANR	5272546	OrExpression	( sizeof ( int ) == sizeof ( long ) ) || ( sizeof ( long ) > INT_SIZE )		5272499	0		||			
ANR	5272547	EqualityExpression	sizeof ( int ) == sizeof ( long )		5272499	0		==			
ANR	5272548	SizeofExpression	sizeof ( int )		5272499	0					
ANR	5272549	Sizeof	sizeof		5272499	0					
ANR	5272550	SizeofOperand	int		5272499	1					
ANR	5272551	SizeofExpression	sizeof ( long )		5272499	1					
ANR	5272552	Sizeof	sizeof		5272499	0					
ANR	5272553	SizeofOperand	long		5272499	1					
ANR	5272554	RelationalExpression	sizeof ( long ) > INT_SIZE		5272499	1		>			
ANR	5272555	SizeofExpression	sizeof ( long )		5272499	0					
ANR	5272556	Sizeof	sizeof		5272499	0					
ANR	5272557	SizeofOperand	long		5272499	1					
ANR	5272558	Identifier	INT_SIZE		5272499	1					
ANR	5272559	CompoundStatement		11:67:248:248	5272499	1					
ANR	5272560	IfStatement	if ( ! get ( i ) )		5272499	0					
ANR	5272561	Condition	! get ( i )	1563:8:30841:30847	5272499	0	True				
ANR	5272562	UnaryOperationExpression	! get ( i )		5272499	0					
ANR	5272563	UnaryOperator	!		5272499	0					
ANR	5272564	CallExpression	get ( i )		5272499	1					
ANR	5272565	Callee	get		5272499	0					
ANR	5272566	Identifier	get		5272499	0					
ANR	5272567	ArgumentList	i		5272499	1					
ANR	5272568	Argument	i		5272499	0					
ANR	5272569	Identifier	i		5272499	0					
ANR	5272570	ReturnStatement	return FALSE ;	1563:17:30850:30862	5272499	1	True				
ANR	5272571	Identifier	FALSE		5272499	0					
ANR	5272572	ExpressionStatement	l = ( unsigned long ) i	1564:4:30868:30889	5272499	1	True				
ANR	5272573	AssignmentExpression	l = ( unsigned long ) i		5272499	0		=			
ANR	5272574	Identifier	l		5272499	0					
ANR	5272575	CastExpression	( unsigned long ) i		5272499	1					
ANR	5272576	CastTarget	unsigned long		5272499	0					
ANR	5272577	Identifier	i		5272499	1					
ANR	5272578	ElseStatement	else		5272499	0					
ANR	5272579	CompoundStatement		14:10:318:318	5272499	0					
ANR	5272580	IfStatement	if ( sizeof ( long ) < INT_SIZE )		5272499	0					
ANR	5272581	Condition	sizeof ( long ) < INT_SIZE	1566:8:30911:30933	5272499	0	True				
ANR	5272582	RelationalExpression	sizeof ( long ) < INT_SIZE		5272499	0		<			
ANR	5272583	SizeofExpression	sizeof ( long )		5272499	0					
ANR	5272584	Sizeof	sizeof		5272499	0					
ANR	5272585	SizeofOperand	long		5272499	1					
ANR	5272586	Identifier	INT_SIZE		5272499	1					
ANR	5272587	CompoundStatement		15:33:353:353	5272499	1					
ANR	5272588	IfStatement	"if ( get_bytes ( pad , INT_SIZE - sizeof ( long ) ) != INT_SIZE - sizeof ( long ) )"		5272499	0					
ANR	5272589	Condition	"get_bytes ( pad , INT_SIZE - sizeof ( long ) ) != INT_SIZE - sizeof ( long )"	1567:9:30947:31014	5272499	0	True				
ANR	5272590	EqualityExpression	"get_bytes ( pad , INT_SIZE - sizeof ( long ) ) != INT_SIZE - sizeof ( long )"		5272499	0		!=			
ANR	5272591	CallExpression	"get_bytes ( pad , INT_SIZE - sizeof ( long ) )"		5272499	0					
ANR	5272592	Callee	get_bytes		5272499	0					
ANR	5272593	Identifier	get_bytes		5272499	0					
ANR	5272594	ArgumentList	pad		5272499	1					
ANR	5272595	Argument	pad		5272499	0					
ANR	5272596	Identifier	pad		5272499	0					
ANR	5272597	Argument	INT_SIZE - sizeof ( long )		5272499	1					
ANR	5272598	AdditiveExpression	INT_SIZE - sizeof ( long )		5272499	0		-			
ANR	5272599	Identifier	INT_SIZE		5272499	0					
ANR	5272600	SizeofExpression	sizeof ( long )		5272499	1					
ANR	5272601	Sizeof	sizeof		5272499	0					
ANR	5272602	SizeofOperand	long		5272499	1					
ANR	5272603	AdditiveExpression	INT_SIZE - sizeof ( long )		5272499	1		-			
ANR	5272604	Identifier	INT_SIZE		5272499	0					
ANR	5272605	SizeofExpression	sizeof ( long )		5272499	1					
ANR	5272606	Sizeof	sizeof		5272499	0					
ANR	5272607	SizeofOperand	long		5272499	1					
ANR	5272608	CompoundStatement		17:32:434:434	5272499	1					
ANR	5272609	ReturnStatement	return FALSE ;	1569:6:31025:31037	5272499	0	True				
ANR	5272610	Identifier	FALSE		5272499	0					
ANR	5272611	IfStatement	"if ( get_bytes ( & l , sizeof ( long ) ) != sizeof ( long ) )"		5272499	1					
ANR	5272612	Condition	"get_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"	1572:8:31060:31102	5272499	0	True				
ANR	5272613	EqualityExpression	"get_bytes ( & l , sizeof ( long ) ) != sizeof ( long )"		5272499	0		!=			
ANR	5272614	CallExpression	"get_bytes ( & l , sizeof ( long ) )"		5272499	0					
ANR	5272615	Callee	get_bytes		5272499	0					
ANR	5272616	Identifier	get_bytes		5272499	0					
ANR	5272617	ArgumentList	& l		5272499	1					
ANR	5272618	Argument	& l		5272499	0					
ANR	5272619	UnaryOperationExpression	& l		5272499	0					
ANR	5272620	UnaryOperator	&		5272499	0					
ANR	5272621	Identifier	l		5272499	1					
ANR	5272622	Argument	sizeof ( long )		5272499	1					
ANR	5272623	SizeofExpression	sizeof ( long )		5272499	0					
ANR	5272624	Sizeof	sizeof		5272499	0					
ANR	5272625	SizeofOperand	long		5272499	1					
ANR	5272626	SizeofExpression	sizeof ( long )		5272499	1					
ANR	5272627	Sizeof	sizeof		5272499	0					
ANR	5272628	SizeofOperand	long		5272499	1					
ANR	5272629	ReturnStatement	return FALSE ;	1572:53:31105:31117	5272499	1	True				
ANR	5272630	Identifier	FALSE		5272499	0					
ANR	5272631	IfStatement	if ( ! hton_is_noop ( ) )		5272499	2					
ANR	5272632	Condition	! hton_is_noop ( )	1573:8:31127:31141	5272499	0	True				
ANR	5272633	UnaryOperationExpression	! hton_is_noop ( )		5272499	0					
ANR	5272634	UnaryOperator	!		5272499	0					
ANR	5272635	CallExpression	hton_is_noop ( )		5272499	1					
ANR	5272636	Callee	hton_is_noop		5272499	0					
ANR	5272637	Identifier	hton_is_noop		5272499	0					
ANR	5272638	ArgumentList			5272499	1					
ANR	5272639	CompoundStatement		22:25:561:561	5272499	1					
ANR	5272640	ExpressionStatement	l = ntohL ( l )	1574:5:31184:31196	5272499	0	True				
ANR	5272641	AssignmentExpression	l = ntohL ( l )		5272499	0		=			
ANR	5272642	Identifier	l		5272499	0					
ANR	5272643	CallExpression	ntohL ( l )		5272499	1					
ANR	5272644	Callee	ntohL		5272499	0					
ANR	5272645	Identifier	ntohL		5272499	0					
ANR	5272646	ArgumentList	l		5272499	1					
ANR	5272647	Argument	l		5272499	0					
ANR	5272648	Identifier	l		5272499	0					
ANR	5272649	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( long ) ; s ++ )		5272499	3					
ANR	5272650	ForInit	int s = 0 ;	1576:9:31213:31220	5272499	0	True				
ANR	5272651	IdentifierDeclStatement	int s = 0 ;		5272499	0					
ANR	5272652	IdentifierDecl	s = 0		5272499	0					
ANR	5272653	IdentifierDeclType	int		5272499	0					
ANR	5272654	Identifier	s		5272499	1					
ANR	5272655	AssignmentExpression	s = 0		5272499	2		=			
ANR	5272656	Identifier	s		5272499	0					
ANR	5272657	PrimaryExpression	0		5272499	1					
ANR	5272658	Condition	s < INT_SIZE - ( int ) sizeof ( long )	1576:18:31222:31251	5272499	1	True				
ANR	5272659	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( long )		5272499	0		<			
ANR	5272660	Identifier	s		5272499	0					
ANR	5272661	AdditiveExpression	INT_SIZE - ( int ) sizeof ( long )		5272499	1		-			
ANR	5272662	Identifier	INT_SIZE		5272499	0					
ANR	5272663	CastExpression	( int ) sizeof ( long )		5272499	1					
ANR	5272664	CastTarget	int		5272499	0					
ANR	5272665	SizeofExpression	sizeof ( long )		5272499	1					
ANR	5272666	Sizeof	sizeof		5272499	0					
ANR	5272667	SizeofOperand	long		5272499	1					
ANR	5272668	PostIncDecOperationExpression	s ++	1576:50:31254:31256	5272499	2	True				
ANR	5272669	Identifier	s		5272499	0					
ANR	5272670	IncDec	++		5272499	1					
ANR	5272671	CompoundStatement		25:55:676:676	5272499	3					
ANR	5272672	IfStatement	if ( pad [ s ] != 0 )		5272499	0					
ANR	5272673	Condition	pad [ s ] != 0	1577:9:31283:31293	5272499	0	True				
ANR	5272674	EqualityExpression	pad [ s ] != 0		5272499	0		!=			
ANR	5272675	ArrayIndexing	pad [ s ]		5272499	0					
ANR	5272676	Identifier	pad		5272499	0					
ANR	5272677	Identifier	s		5272499	1					
ANR	5272678	PrimaryExpression	0		5272499	1					
ANR	5272679	CompoundStatement		26:22:713:713	5272499	1					
ANR	5272680	ReturnStatement	return FALSE ;	1578:6:31304:31316	5272499	0	True				
ANR	5272681	Identifier	FALSE		5272499	0					
ANR	5272682	BreakStatement	break ;	1582:3:31351:31356	5272499	5	True				
ANR	5272683	Label	case ascii :	1584:2:31361:31371	5272499	6	True				
ANR	5272684	Identifier	ascii		5272499	0					
ANR	5272685	ReturnStatement	return FALSE ;	1585:3:31376:31388	5272499	7	True				
ANR	5272686	Identifier	FALSE		5272499	0					
ANR	5272687	ExpressionStatement	"NETWORK_TRACE ( ""get long "" << l )"	1587:4:31397:31428	5272499	3	True				
ANR	5272688	CallExpression	"NETWORK_TRACE ( ""get long "" << l )"		5272499	0					
ANR	5272689	Callee	NETWORK_TRACE		5272499	0					
ANR	5272690	Identifier	NETWORK_TRACE		5272499	0					
ANR	5272691	ArgumentList	"""get long "" << l"		5272499	1					
ANR	5272692	Argument	"""get long "" << l"		5272499	0					
ANR	5272693	ShiftExpression	"""get long "" << l"		5272499	0		<<			
ANR	5272694	PrimaryExpression	"""get long """		5272499	0					
ANR	5272695	Identifier	l		5272499	1					
ANR	5272696	ReturnStatement	return TRUE ;	1588:1:31431:31442	5272499	4	True				
ANR	5272697	Identifier	TRUE		5272499	0					
ANR	5272698	ReturnType	int		5272499	1					
ANR	5272699	Identifier	Stream :: get		5272499	2					
ANR	5272700	ParameterList	unsigned long & l		5272499	3					
ANR	5272701	Parameter	unsigned long & l	1551:13:30564:30579	5272499	0	True				
ANR	5272702	ParameterType	unsigned long &		5272499	0					
ANR	5272703	Identifier	l		5272499	1					
ANR	5272704	CFGEntryNode	ENTRY		5272499		True				
ANR	5272705	CFGExitNode	EXIT		5272499		True				
ANR	5272706	Symbol	_code		5272499						
ANR	5272707	Symbol	INT_SIZE		5272499						
ANR	5272708	Symbol	i		5272499						
ANR	5272709	Symbol	ntohL		5272499						
ANR	5272710	Symbol	TRUE		5272499						
ANR	5272711	Symbol	l		5272499						
ANR	5272712	Symbol	get_bytes		5272499						
ANR	5272713	Symbol	pad		5272499						
ANR	5272714	Symbol	& l		5272499						
ANR	5272715	Symbol	s		5272499						
ANR	5272716	Symbol	hton_is_noop		5272499						
ANR	5272717	Symbol	get		5272499						
ANR	5272718	Symbol	FALSE		5272499						
ANR	5272719	Symbol	* pad		5272499						
ANR	5272720	Symbol	* s		5272499						
ANR	5272721	Function	Stream :: get	1593:0:31490:32635							
ANR	5272722	FunctionDef	Stream :: get (int64_t & l)		5272721	0					
ANR	5272723	CompoundStatement		1595:0:31520:32635	5272721	0					
ANR	5272724	IdentifierDeclStatement	int i ;	1596:1:31523:31529	5272721	0	True				
ANR	5272725	IdentifierDecl	i		5272721	0					
ANR	5272726	IdentifierDeclType	int		5272721	0					
ANR	5272727	Identifier	i		5272721	1					
ANR	5272728	IdentifierDeclStatement	char sign ;	1597:1:31532:31541	5272721	1	True				
ANR	5272729	IdentifierDecl	sign		5272721	0					
ANR	5272730	IdentifierDeclType	char		5272721	0					
ANR	5272731	Identifier	sign		5272721	1					
ANR	5272732	IdentifierDeclStatement	char pad [ INT_SIZE - sizeof ( int64_t ) ] ;	1601:1:31665:31699	5272721	2	True				
ANR	5272733	IdentifierDecl	pad [ INT_SIZE - sizeof ( int64_t ) ]		5272721	0					
ANR	5272734	IdentifierDeclType	char [ INT_SIZE - sizeof ( int64_t ) ]		5272721	0					
ANR	5272735	Identifier	pad		5272721	1					
ANR	5272736	AdditiveExpression	INT_SIZE - sizeof ( int64_t )		5272721	2		-			
ANR	5272737	Identifier	INT_SIZE		5272721	0					
ANR	5272738	SizeofExpression	sizeof ( int64_t )		5272721	1					
ANR	5272739	Sizeof	sizeof		5272721	0					
ANR	5272740	SizeofOperand	int64_t		5272721	1					
ANR	5272741	SwitchStatement	switch ( _code )		5272721	3					
ANR	5272742	Condition	_code	1604:8:31718:31722	5272721	0	True				
ANR	5272743	Identifier	_code		5272721	0					
ANR	5272744	CompoundStatement		10:14:203:203	5272721	1					
ANR	5272745	Label	case internal :	1605:2:31728:31741	5272721	0	True				
ANR	5272746	Identifier	internal		5272721	0					
ANR	5272747	IfStatement	"if ( get_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t ) )"		5272721	1					
ANR	5272748	Condition	"get_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t )"	1606:7:31750:31798	5272721	0	True				
ANR	5272749	EqualityExpression	"get_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t )"		5272721	0		!=			
ANR	5272750	CallExpression	"get_bytes ( & l , sizeof ( int64_t ) )"		5272721	0					
ANR	5272751	Callee	get_bytes		5272721	0					
ANR	5272752	Identifier	get_bytes		5272721	0					
ANR	5272753	ArgumentList	& l		5272721	1					
ANR	5272754	Argument	& l		5272721	0					
ANR	5272755	UnaryOperationExpression	& l		5272721	0					
ANR	5272756	UnaryOperator	&		5272721	0					
ANR	5272757	Identifier	l		5272721	1					
ANR	5272758	Argument	sizeof ( int64_t )		5272721	1					
ANR	5272759	SizeofExpression	sizeof ( int64_t )		5272721	0					
ANR	5272760	Sizeof	sizeof		5272721	0					
ANR	5272761	SizeofOperand	int64_t		5272721	1					
ANR	5272762	SizeofExpression	sizeof ( int64_t )		5272721	1					
ANR	5272763	Sizeof	sizeof		5272721	0					
ANR	5272764	SizeofOperand	int64_t		5272721	1					
ANR	5272765	ReturnStatement	return FALSE ;	1606:58:31801:31813	5272721	1	True				
ANR	5272766	Identifier	FALSE		5272721	0					
ANR	5272767	BreakStatement	break ;	1607:3:31818:31823	5272721	2	True				
ANR	5272768	Label	case external :	1609:2:31828:31841	5272721	3	True				
ANR	5272769	Identifier	external		5272721	0					
ANR	5272770	IfStatement	if ( ( sizeof ( int ) == sizeof ( int64_t ) ) || ( sizeof ( int64_t ) > INT_SIZE ) )		5272721	4					
ANR	5272771	Condition	( sizeof ( int ) == sizeof ( int64_t ) ) || ( sizeof ( int64_t ) > INT_SIZE )	1610:7:31850:31913	5272721	0	True				
ANR	5272772	OrExpression	( sizeof ( int ) == sizeof ( int64_t ) ) || ( sizeof ( int64_t ) > INT_SIZE )		5272721	0		||			
ANR	5272773	EqualityExpression	sizeof ( int ) == sizeof ( int64_t )		5272721	0		==			
ANR	5272774	SizeofExpression	sizeof ( int )		5272721	0					
ANR	5272775	Sizeof	sizeof		5272721	0					
ANR	5272776	SizeofOperand	int		5272721	1					
ANR	5272777	SizeofExpression	sizeof ( int64_t )		5272721	1					
ANR	5272778	Sizeof	sizeof		5272721	0					
ANR	5272779	SizeofOperand	int64_t		5272721	1					
ANR	5272780	RelationalExpression	sizeof ( int64_t ) > INT_SIZE		5272721	1		>			
ANR	5272781	SizeofExpression	sizeof ( int64_t )		5272721	0					
ANR	5272782	Sizeof	sizeof		5272721	0					
ANR	5272783	SizeofOperand	int64_t		5272721	1					
ANR	5272784	Identifier	INT_SIZE		5272721	1					
ANR	5272785	CompoundStatement		16:73:395:395	5272721	1					
ANR	5272786	IfStatement	if ( ! get ( i ) )		5272721	0					
ANR	5272787	Condition	! get ( i )	1611:8:31926:31932	5272721	0	True				
ANR	5272788	UnaryOperationExpression	! get ( i )		5272721	0					
ANR	5272789	UnaryOperator	!		5272721	0					
ANR	5272790	CallExpression	get ( i )		5272721	1					
ANR	5272791	Callee	get		5272721	0					
ANR	5272792	Identifier	get		5272721	0					
ANR	5272793	ArgumentList	i		5272721	1					
ANR	5272794	Argument	i		5272721	0					
ANR	5272795	Identifier	i		5272721	0					
ANR	5272796	ReturnStatement	return FALSE ;	1611:17:31935:31947	5272721	1	True				
ANR	5272797	Identifier	FALSE		5272721	0					
ANR	5272798	ExpressionStatement	l = ( long ) i	1612:4:31953:31965	5272721	1	True				
ANR	5272799	AssignmentExpression	l = ( long ) i		5272721	0		=			
ANR	5272800	Identifier	l		5272721	0					
ANR	5272801	CastExpression	( long ) i		5272721	1					
ANR	5272802	CastTarget	long		5272721	0					
ANR	5272803	Identifier	i		5272721	1					
ANR	5272804	ElseStatement	else		5272721	0					
ANR	5272805	CompoundStatement		19:10:456:456	5272721	0					
ANR	5272806	IfStatement	if ( sizeof ( int64_t ) < INT_SIZE )		5272721	0					
ANR	5272807	Condition	sizeof ( int64_t ) < INT_SIZE	1615:8:32005:32030	5272721	0	True				
ANR	5272808	RelationalExpression	sizeof ( int64_t ) < INT_SIZE		5272721	0		<			
ANR	5272809	SizeofExpression	sizeof ( int64_t )		5272721	0					
ANR	5272810	Sizeof	sizeof		5272721	0					
ANR	5272811	SizeofOperand	int64_t		5272721	1					
ANR	5272812	Identifier	INT_SIZE		5272721	1					
ANR	5272813	CompoundStatement		21:36:512:512	5272721	1					
ANR	5272814	IfStatement	"if ( get_bytes ( pad , INT_SIZE - sizeof ( int64_t ) ) != INT_SIZE - sizeof ( int64_t ) )"		5272721	0					
ANR	5272815	Condition	"get_bytes ( pad , INT_SIZE - sizeof ( int64_t ) ) != INT_SIZE - sizeof ( int64_t )"	1616:9:32044:32117	5272721	0	True				
ANR	5272816	EqualityExpression	"get_bytes ( pad , INT_SIZE - sizeof ( int64_t ) ) != INT_SIZE - sizeof ( int64_t )"		5272721	0		!=			
ANR	5272817	CallExpression	"get_bytes ( pad , INT_SIZE - sizeof ( int64_t ) )"		5272721	0					
ANR	5272818	Callee	get_bytes		5272721	0					
ANR	5272819	Identifier	get_bytes		5272721	0					
ANR	5272820	ArgumentList	pad		5272721	1					
ANR	5272821	Argument	pad		5272721	0					
ANR	5272822	Identifier	pad		5272721	0					
ANR	5272823	Argument	INT_SIZE - sizeof ( int64_t )		5272721	1					
ANR	5272824	AdditiveExpression	INT_SIZE - sizeof ( int64_t )		5272721	0		-			
ANR	5272825	Identifier	INT_SIZE		5272721	0					
ANR	5272826	SizeofExpression	sizeof ( int64_t )		5272721	1					
ANR	5272827	Sizeof	sizeof		5272721	0					
ANR	5272828	SizeofOperand	int64_t		5272721	1					
ANR	5272829	AdditiveExpression	INT_SIZE - sizeof ( int64_t )		5272721	1		-			
ANR	5272830	Identifier	INT_SIZE		5272721	0					
ANR	5272831	SizeofExpression	sizeof ( int64_t )		5272721	1					
ANR	5272832	Sizeof	sizeof		5272721	0					
ANR	5272833	SizeofOperand	int64_t		5272721	1					
ANR	5272834	CompoundStatement		23:35:599:599	5272721	1					
ANR	5272835	ReturnStatement	return FALSE ;	1618:6:32128:32140	5272721	0	True				
ANR	5272836	Identifier	FALSE		5272721	0					
ANR	5272837	IfStatement	"if ( get_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t ) )"		5272721	1					
ANR	5272838	Condition	"get_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t )"	1622:8:32174:32222	5272721	0	True				
ANR	5272839	EqualityExpression	"get_bytes ( & l , sizeof ( int64_t ) ) != sizeof ( int64_t )"		5272721	0		!=			
ANR	5272840	CallExpression	"get_bytes ( & l , sizeof ( int64_t ) )"		5272721	0					
ANR	5272841	Callee	get_bytes		5272721	0					
ANR	5272842	Identifier	get_bytes		5272721	0					
ANR	5272843	ArgumentList	& l		5272721	1					
ANR	5272844	Argument	& l		5272721	0					
ANR	5272845	UnaryOperationExpression	& l		5272721	0					
ANR	5272846	UnaryOperator	&		5272721	0					
ANR	5272847	Identifier	l		5272721	1					
ANR	5272848	Argument	sizeof ( int64_t )		5272721	1					
ANR	5272849	SizeofExpression	sizeof ( int64_t )		5272721	0					
ANR	5272850	Sizeof	sizeof		5272721	0					
ANR	5272851	SizeofOperand	int64_t		5272721	1					
ANR	5272852	SizeofExpression	sizeof ( int64_t )		5272721	1					
ANR	5272853	Sizeof	sizeof		5272721	0					
ANR	5272854	SizeofOperand	int64_t		5272721	1					
ANR	5272855	ReturnStatement	return FALSE ;	1622:59:32225:32237	5272721	1	True				
ANR	5272856	Identifier	FALSE		5272721	0					
ANR	5272857	IfStatement	if ( ! hton_is_noop ( ) )		5272721	2					
ANR	5272858	Condition	! hton_is_noop ( )	1623:8:32247:32261	5272721	0	True				
ANR	5272859	UnaryOperationExpression	! hton_is_noop ( )		5272721	0					
ANR	5272860	UnaryOperator	!		5272721	0					
ANR	5272861	CallExpression	hton_is_noop ( )		5272721	1					
ANR	5272862	Callee	hton_is_noop		5272721	0					
ANR	5272863	Identifier	hton_is_noop		5272721	0					
ANR	5272864	ArgumentList			5272721	1					
ANR	5272865	CompoundStatement		29:25:743:743	5272721	1					
ANR	5272866	ExpressionStatement	l = ntohLL ( l )	1624:5:32304:32317	5272721	0	True				
ANR	5272867	AssignmentExpression	l = ntohLL ( l )		5272721	0		=			
ANR	5272868	Identifier	l		5272721	0					
ANR	5272869	CallExpression	ntohLL ( l )		5272721	1					
ANR	5272870	Callee	ntohLL		5272721	0					
ANR	5272871	Identifier	ntohLL		5272721	0					
ANR	5272872	ArgumentList	l		5272721	1					
ANR	5272873	Argument	l		5272721	0					
ANR	5272874	Identifier	l		5272721	0					
ANR	5272875	ExpressionStatement	sign = ( l >= 0 ) ? 0 : 0xff	1626:4:32329:32355	5272721	3	True				
ANR	5272876	AssignmentExpression	sign = ( l >= 0 ) ? 0 : 0xff		5272721	0		=			
ANR	5272877	Identifier	sign		5272721	0					
ANR	5272878	ConditionalExpression	( l >= 0 ) ? 0 : 0xff		5272721	1					
ANR	5272879	Condition	l >= 0		5272721	0					
ANR	5272880	RelationalExpression	l >= 0		5272721	0		>=			
ANR	5272881	Identifier	l		5272721	0					
ANR	5272882	PrimaryExpression	0		5272721	1					
ANR	5272883	PrimaryExpression	0		5272721	1					
ANR	5272884	PrimaryExpression	0xff		5272721	2					
ANR	5272885	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( int64_t ) ; s ++ )		5272721	4					
ANR	5272886	ForInit	int s = 0 ;	1628:9:32384:32391	5272721	0	True				
ANR	5272887	IdentifierDeclStatement	int s = 0 ;		5272721	0					
ANR	5272888	IdentifierDecl	s = 0		5272721	0					
ANR	5272889	IdentifierDeclType	int		5272721	0					
ANR	5272890	Identifier	s		5272721	1					
ANR	5272891	AssignmentExpression	s = 0		5272721	2		=			
ANR	5272892	Identifier	s		5272721	0					
ANR	5272893	PrimaryExpression	0		5272721	1					
ANR	5272894	Condition	s < INT_SIZE - ( int ) sizeof ( int64_t )	1628:18:32393:32425	5272721	1	True				
ANR	5272895	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( int64_t )		5272721	0		<			
ANR	5272896	Identifier	s		5272721	0					
ANR	5272897	AdditiveExpression	INT_SIZE - ( int ) sizeof ( int64_t )		5272721	1		-			
ANR	5272898	Identifier	INT_SIZE		5272721	0					
ANR	5272899	CastExpression	( int ) sizeof ( int64_t )		5272721	1					
ANR	5272900	CastTarget	int		5272721	0					
ANR	5272901	SizeofExpression	sizeof ( int64_t )		5272721	1					
ANR	5272902	Sizeof	sizeof		5272721	0					
ANR	5272903	SizeofOperand	int64_t		5272721	1					
ANR	5272904	PostIncDecOperationExpression	s ++	1628:53:32428:32430	5272721	2	True				
ANR	5272905	Identifier	s		5272721	0					
ANR	5272906	IncDec	++		5272721	1					
ANR	5272907	CompoundStatement		34:58:912:912	5272721	3					
ANR	5272908	IfStatement	if ( pad [ s ] != sign )		5272721	0					
ANR	5272909	Condition	pad [ s ] != sign	1629:9:32457:32470	5272721	0	True				
ANR	5272910	EqualityExpression	pad [ s ] != sign		5272721	0		!=			
ANR	5272911	ArrayIndexing	pad [ s ]		5272721	0					
ANR	5272912	Identifier	pad		5272721	0					
ANR	5272913	Identifier	s		5272721	1					
ANR	5272914	Identifier	sign		5272721	1					
ANR	5272915	CompoundStatement		35:25:952:952	5272721	1					
ANR	5272916	ReturnStatement	return FALSE ;	1630:6:32481:32493	5272721	0	True				
ANR	5272917	Identifier	FALSE		5272721	0					
ANR	5272918	BreakStatement	break ;	1635:3:32539:32544	5272721	5	True				
ANR	5272919	Label	case ascii :	1637:2:32549:32559	5272721	6	True				
ANR	5272920	Identifier	ascii		5272721	0					
ANR	5272921	ReturnStatement	return FALSE ;	1638:3:32564:32576	5272721	7	True				
ANR	5272922	Identifier	FALSE		5272721	0					
ANR	5272923	ExpressionStatement	"NETWORK_TRACE ( ""get int64_t "" << l )"	1640:4:32585:32619	5272721	4	True				
ANR	5272924	CallExpression	"NETWORK_TRACE ( ""get int64_t "" << l )"		5272721	0					
ANR	5272925	Callee	NETWORK_TRACE		5272721	0					
ANR	5272926	Identifier	NETWORK_TRACE		5272721	0					
ANR	5272927	ArgumentList	"""get int64_t "" << l"		5272721	1					
ANR	5272928	Argument	"""get int64_t "" << l"		5272721	0					
ANR	5272929	ShiftExpression	"""get int64_t "" << l"		5272721	0		<<			
ANR	5272930	PrimaryExpression	"""get int64_t """		5272721	0					
ANR	5272931	Identifier	l		5272721	1					
ANR	5272932	ReturnStatement	return TRUE ;	1641:1:32622:32633	5272721	5	True				
ANR	5272933	Identifier	TRUE		5272721	0					
ANR	5272934	ReturnType	int		5272721	1					
ANR	5272935	Identifier	Stream :: get		5272721	2					
ANR	5272936	ParameterList	int64_t & l		5272721	3					
ANR	5272937	Parameter	int64_t & l	1594:13:31508:31517	5272721	0	True				
ANR	5272938	ParameterType	int64_t &		5272721	0					
ANR	5272939	Identifier	l		5272721	1					
ANR	5272940	CFGEntryNode	ENTRY		5272721		True				
ANR	5272941	CFGExitNode	EXIT		5272721		True				
ANR	5272942	Symbol	_code		5272721						
ANR	5272943	Symbol	INT_SIZE		5272721						
ANR	5272944	Symbol	sign		5272721						
ANR	5272945	Symbol	i		5272721						
ANR	5272946	Symbol	TRUE		5272721						
ANR	5272947	Symbol	l		5272721						
ANR	5272948	Symbol	get_bytes		5272721						
ANR	5272949	Symbol	pad		5272721						
ANR	5272950	Symbol	& l		5272721						
ANR	5272951	Symbol	s		5272721						
ANR	5272952	Symbol	ntohLL		5272721						
ANR	5272953	Symbol	hton_is_noop		5272721						
ANR	5272954	Symbol	get		5272721						
ANR	5272955	Symbol	FALSE		5272721						
ANR	5272956	Symbol	* pad		5272721						
ANR	5272957	Symbol	* s		5272721						
ANR	5272958	Function	Stream :: get	1645:0:32639:33775							
ANR	5272959	FunctionDef	Stream :: get (uint64_t & l)		5272958	0					
ANR	5272960	CompoundStatement		1647:0:32670:33775	5272958	0					
ANR	5272961	IdentifierDeclStatement	unsigned int i ;	1648:1:32673:32688	5272958	0	True				
ANR	5272962	IdentifierDecl	i		5272958	0					
ANR	5272963	IdentifierDeclType	unsigned int		5272958	0					
ANR	5272964	Identifier	i		5272958	1					
ANR	5272965	IdentifierDeclStatement	char pad [ INT_SIZE - sizeof ( uint64_t ) ] ;	1653:1:32824:32859	5272958	1	True				
ANR	5272966	IdentifierDecl	pad [ INT_SIZE - sizeof ( uint64_t ) ]		5272958	0					
ANR	5272967	IdentifierDeclType	char [ INT_SIZE - sizeof ( uint64_t ) ]		5272958	0					
ANR	5272968	Identifier	pad		5272958	1					
ANR	5272969	AdditiveExpression	INT_SIZE - sizeof ( uint64_t )		5272958	2		-			
ANR	5272970	Identifier	INT_SIZE		5272958	0					
ANR	5272971	SizeofExpression	sizeof ( uint64_t )		5272958	1					
ANR	5272972	Sizeof	sizeof		5272958	0					
ANR	5272973	SizeofOperand	uint64_t		5272958	1					
ANR	5272974	SwitchStatement	switch ( _code )		5272958	2					
ANR	5272975	Condition	_code	1656:8:32878:32882	5272958	0	True				
ANR	5272976	Identifier	_code		5272958	0					
ANR	5272977	CompoundStatement		10:14:213:213	5272958	1					
ANR	5272978	Label	case internal :	1657:2:32888:32901	5272958	0	True				
ANR	5272979	Identifier	internal		5272958	0					
ANR	5272980	IfStatement	"if ( get_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t ) )"		5272958	1					
ANR	5272981	Condition	"get_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t )"	1658:7:32910:32960	5272958	0	True				
ANR	5272982	EqualityExpression	"get_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t )"		5272958	0		!=			
ANR	5272983	CallExpression	"get_bytes ( & l , sizeof ( uint64_t ) )"		5272958	0					
ANR	5272984	Callee	get_bytes		5272958	0					
ANR	5272985	Identifier	get_bytes		5272958	0					
ANR	5272986	ArgumentList	& l		5272958	1					
ANR	5272987	Argument	& l		5272958	0					
ANR	5272988	UnaryOperationExpression	& l		5272958	0					
ANR	5272989	UnaryOperator	&		5272958	0					
ANR	5272990	Identifier	l		5272958	1					
ANR	5272991	Argument	sizeof ( uint64_t )		5272958	1					
ANR	5272992	SizeofExpression	sizeof ( uint64_t )		5272958	0					
ANR	5272993	Sizeof	sizeof		5272958	0					
ANR	5272994	SizeofOperand	uint64_t		5272958	1					
ANR	5272995	SizeofExpression	sizeof ( uint64_t )		5272958	1					
ANR	5272996	Sizeof	sizeof		5272958	0					
ANR	5272997	SizeofOperand	uint64_t		5272958	1					
ANR	5272998	ReturnStatement	return FALSE ;	1658:60:32963:32975	5272958	1	True				
ANR	5272999	Identifier	FALSE		5272958	0					
ANR	5273000	BreakStatement	break ;	1659:3:32980:32985	5272958	2	True				
ANR	5273001	Label	case external :	1661:2:32990:33003	5272958	3	True				
ANR	5273002	Identifier	external		5272958	0					
ANR	5273003	IfStatement	if ( ( sizeof ( int ) == sizeof ( uint64_t ) ) || ( sizeof ( uint64_t ) > INT_SIZE ) )		5272958	4					
ANR	5273004	Condition	( sizeof ( int ) == sizeof ( uint64_t ) ) || ( sizeof ( uint64_t ) > INT_SIZE )	1662:7:33012:33077	5272958	0	True				
ANR	5273005	OrExpression	( sizeof ( int ) == sizeof ( uint64_t ) ) || ( sizeof ( uint64_t ) > INT_SIZE )		5272958	0		||			
ANR	5273006	EqualityExpression	sizeof ( int ) == sizeof ( uint64_t )		5272958	0		==			
ANR	5273007	SizeofExpression	sizeof ( int )		5272958	0					
ANR	5273008	Sizeof	sizeof		5272958	0					
ANR	5273009	SizeofOperand	int		5272958	1					
ANR	5273010	SizeofExpression	sizeof ( uint64_t )		5272958	1					
ANR	5273011	Sizeof	sizeof		5272958	0					
ANR	5273012	SizeofOperand	uint64_t		5272958	1					
ANR	5273013	RelationalExpression	sizeof ( uint64_t ) > INT_SIZE		5272958	1		>			
ANR	5273014	SizeofExpression	sizeof ( uint64_t )		5272958	0					
ANR	5273015	Sizeof	sizeof		5272958	0					
ANR	5273016	SizeofOperand	uint64_t		5272958	1					
ANR	5273017	Identifier	INT_SIZE		5272958	1					
ANR	5273018	CompoundStatement		16:75:409:409	5272958	1					
ANR	5273019	IfStatement	if ( ! get ( i ) )		5272958	0					
ANR	5273020	Condition	! get ( i )	1663:8:33090:33096	5272958	0	True				
ANR	5273021	UnaryOperationExpression	! get ( i )		5272958	0					
ANR	5273022	UnaryOperator	!		5272958	0					
ANR	5273023	CallExpression	get ( i )		5272958	1					
ANR	5273024	Callee	get		5272958	0					
ANR	5273025	Identifier	get		5272958	0					
ANR	5273026	ArgumentList	i		5272958	1					
ANR	5273027	Argument	i		5272958	0					
ANR	5273028	Identifier	i		5272958	0					
ANR	5273029	ReturnStatement	return FALSE ;	1663:17:33099:33111	5272958	1	True				
ANR	5273030	Identifier	FALSE		5272958	0					
ANR	5273031	ExpressionStatement	l = ( uint64_t ) i	1664:4:33117:33133	5272958	1	True				
ANR	5273032	AssignmentExpression	l = ( uint64_t ) i		5272958	0		=			
ANR	5273033	Identifier	l		5272958	0					
ANR	5273034	CastExpression	( uint64_t ) i		5272958	1					
ANR	5273035	CastTarget	uint64_t		5272958	0					
ANR	5273036	Identifier	i		5272958	1					
ANR	5273037	ElseStatement	else		5272958	0					
ANR	5273038	CompoundStatement		19:10:474:474	5272958	0					
ANR	5273039	IfStatement	if ( sizeof ( uint64_t ) < INT_SIZE )		5272958	0					
ANR	5273040	Condition	sizeof ( uint64_t ) < INT_SIZE	1667:8:33173:33199	5272958	0	True				
ANR	5273041	RelationalExpression	sizeof ( uint64_t ) < INT_SIZE		5272958	0		<			
ANR	5273042	SizeofExpression	sizeof ( uint64_t )		5272958	0					
ANR	5273043	Sizeof	sizeof		5272958	0					
ANR	5273044	SizeofOperand	uint64_t		5272958	1					
ANR	5273045	Identifier	INT_SIZE		5272958	1					
ANR	5273046	CompoundStatement		21:37:531:531	5272958	1					
ANR	5273047	IfStatement	"if ( get_bytes ( pad , INT_SIZE - sizeof ( uint64_t ) ) != INT_SIZE - sizeof ( uint64_t ) )"		5272958	0					
ANR	5273048	Condition	"get_bytes ( pad , INT_SIZE - sizeof ( uint64_t ) ) != INT_SIZE - sizeof ( uint64_t )"	1668:9:33213:33288	5272958	0	True				
ANR	5273049	EqualityExpression	"get_bytes ( pad , INT_SIZE - sizeof ( uint64_t ) ) != INT_SIZE - sizeof ( uint64_t )"		5272958	0		!=			
ANR	5273050	CallExpression	"get_bytes ( pad , INT_SIZE - sizeof ( uint64_t ) )"		5272958	0					
ANR	5273051	Callee	get_bytes		5272958	0					
ANR	5273052	Identifier	get_bytes		5272958	0					
ANR	5273053	ArgumentList	pad		5272958	1					
ANR	5273054	Argument	pad		5272958	0					
ANR	5273055	Identifier	pad		5272958	0					
ANR	5273056	Argument	INT_SIZE - sizeof ( uint64_t )		5272958	1					
ANR	5273057	AdditiveExpression	INT_SIZE - sizeof ( uint64_t )		5272958	0		-			
ANR	5273058	Identifier	INT_SIZE		5272958	0					
ANR	5273059	SizeofExpression	sizeof ( uint64_t )		5272958	1					
ANR	5273060	Sizeof	sizeof		5272958	0					
ANR	5273061	SizeofOperand	uint64_t		5272958	1					
ANR	5273062	AdditiveExpression	INT_SIZE - sizeof ( uint64_t )		5272958	1		-			
ANR	5273063	Identifier	INT_SIZE		5272958	0					
ANR	5273064	SizeofExpression	sizeof ( uint64_t )		5272958	1					
ANR	5273065	Sizeof	sizeof		5272958	0					
ANR	5273066	SizeofOperand	uint64_t		5272958	1					
ANR	5273067	CompoundStatement		23:36:620:620	5272958	1					
ANR	5273068	ReturnStatement	return FALSE ;	1670:6:33299:33311	5272958	0	True				
ANR	5273069	Identifier	FALSE		5272958	0					
ANR	5273070	IfStatement	"if ( get_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t ) )"		5272958	1					
ANR	5273071	Condition	"get_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t )"	1674:8:33345:33395	5272958	0	True				
ANR	5273072	EqualityExpression	"get_bytes ( & l , sizeof ( uint64_t ) ) != sizeof ( uint64_t )"		5272958	0		!=			
ANR	5273073	CallExpression	"get_bytes ( & l , sizeof ( uint64_t ) )"		5272958	0					
ANR	5273074	Callee	get_bytes		5272958	0					
ANR	5273075	Identifier	get_bytes		5272958	0					
ANR	5273076	ArgumentList	& l		5272958	1					
ANR	5273077	Argument	& l		5272958	0					
ANR	5273078	UnaryOperationExpression	& l		5272958	0					
ANR	5273079	UnaryOperator	&		5272958	0					
ANR	5273080	Identifier	l		5272958	1					
ANR	5273081	Argument	sizeof ( uint64_t )		5272958	1					
ANR	5273082	SizeofExpression	sizeof ( uint64_t )		5272958	0					
ANR	5273083	Sizeof	sizeof		5272958	0					
ANR	5273084	SizeofOperand	uint64_t		5272958	1					
ANR	5273085	SizeofExpression	sizeof ( uint64_t )		5272958	1					
ANR	5273086	Sizeof	sizeof		5272958	0					
ANR	5273087	SizeofOperand	uint64_t		5272958	1					
ANR	5273088	ReturnStatement	return FALSE ;	1674:61:33398:33410	5272958	1	True				
ANR	5273089	Identifier	FALSE		5272958	0					
ANR	5273090	IfStatement	if ( ! hton_is_noop ( ) )		5272958	2					
ANR	5273091	Condition	! hton_is_noop ( )	1675:8:33420:33434	5272958	0	True				
ANR	5273092	UnaryOperationExpression	! hton_is_noop ( )		5272958	0					
ANR	5273093	UnaryOperator	!		5272958	0					
ANR	5273094	CallExpression	hton_is_noop ( )		5272958	1					
ANR	5273095	Callee	hton_is_noop		5272958	0					
ANR	5273096	Identifier	hton_is_noop		5272958	0					
ANR	5273097	ArgumentList			5272958	1					
ANR	5273098	CompoundStatement		29:25:766:766	5272958	1					
ANR	5273099	ExpressionStatement	l = ntohLL ( l )	1676:5:33477:33490	5272958	0	True				
ANR	5273100	AssignmentExpression	l = ntohLL ( l )		5272958	0		=			
ANR	5273101	Identifier	l		5272958	0					
ANR	5273102	CallExpression	ntohLL ( l )		5272958	1					
ANR	5273103	Callee	ntohLL		5272958	0					
ANR	5273104	Identifier	ntohLL		5272958	0					
ANR	5273105	ArgumentList	l		5272958	1					
ANR	5273106	Argument	l		5272958	0					
ANR	5273107	Identifier	l		5272958	0					
ANR	5273108	ForStatement	for ( int s = 0 ; s < INT_SIZE - ( int ) sizeof ( uint64_t ) ; s ++ )		5272958	3					
ANR	5273109	ForInit	int s = 0 ;	1679:9:33525:33532	5272958	0	True				
ANR	5273110	IdentifierDeclStatement	int s = 0 ;		5272958	0					
ANR	5273111	IdentifierDecl	s = 0		5272958	0					
ANR	5273112	IdentifierDeclType	int		5272958	0					
ANR	5273113	Identifier	s		5272958	1					
ANR	5273114	AssignmentExpression	s = 0		5272958	2		=			
ANR	5273115	Identifier	s		5272958	0					
ANR	5273116	PrimaryExpression	0		5272958	1					
ANR	5273117	Condition	s < INT_SIZE - ( int ) sizeof ( uint64_t )	1679:18:33534:33567	5272958	1	True				
ANR	5273118	RelationalExpression	s < INT_SIZE - ( int ) sizeof ( uint64_t )		5272958	0		<			
ANR	5273119	Identifier	s		5272958	0					
ANR	5273120	AdditiveExpression	INT_SIZE - ( int ) sizeof ( uint64_t )		5272958	1		-			
ANR	5273121	Identifier	INT_SIZE		5272958	0					
ANR	5273122	CastExpression	( int ) sizeof ( uint64_t )		5272958	1					
ANR	5273123	CastTarget	int		5272958	0					
ANR	5273124	SizeofExpression	sizeof ( uint64_t )		5272958	1					
ANR	5273125	Sizeof	sizeof		5272958	0					
ANR	5273126	SizeofOperand	uint64_t		5272958	1					
ANR	5273127	PostIncDecOperationExpression	s ++	1679:54:33570:33572	5272958	2	True				
ANR	5273128	Identifier	s		5272958	0					
ANR	5273129	IncDec	++		5272958	1					
ANR	5273130	CompoundStatement		33:59:904:904	5272958	3					
ANR	5273131	IfStatement	if ( pad [ s ] != 0 )		5272958	0					
ANR	5273132	Condition	pad [ s ] != 0	1680:9:33599:33609	5272958	0	True				
ANR	5273133	EqualityExpression	pad [ s ] != 0		5272958	0		!=			
ANR	5273134	ArrayIndexing	pad [ s ]		5272958	0					
ANR	5273135	Identifier	pad		5272958	0					
ANR	5273136	Identifier	s		5272958	1					
ANR	5273137	PrimaryExpression	0		5272958	1					
ANR	5273138	CompoundStatement		34:22:941:941	5272958	1					
ANR	5273139	ReturnStatement	return FALSE ;	1681:6:33620:33632	5272958	0	True				
ANR	5273140	Identifier	FALSE		5272958	0					
ANR	5273141	BreakStatement	break ;	1686:3:33678:33683	5272958	5	True				
ANR	5273142	Label	case ascii :	1688:2:33688:33698	5272958	6	True				
ANR	5273143	Identifier	ascii		5272958	0					
ANR	5273144	ReturnStatement	return FALSE ;	1689:3:33703:33715	5272958	7	True				
ANR	5273145	Identifier	FALSE		5272958	0					
ANR	5273146	ExpressionStatement	"NETWORK_TRACE ( ""get uint64_t "" << l )"	1691:4:33724:33759	5272958	3	True				
ANR	5273147	CallExpression	"NETWORK_TRACE ( ""get uint64_t "" << l )"		5272958	0					
ANR	5273148	Callee	NETWORK_TRACE		5272958	0					
ANR	5273149	Identifier	NETWORK_TRACE		5272958	0					
ANR	5273150	ArgumentList	"""get uint64_t "" << l"		5272958	1					
ANR	5273151	Argument	"""get uint64_t "" << l"		5272958	0					
ANR	5273152	ShiftExpression	"""get uint64_t "" << l"		5272958	0		<<			
ANR	5273153	PrimaryExpression	"""get uint64_t """		5272958	0					
ANR	5273154	Identifier	l		5272958	1					
ANR	5273155	ReturnStatement	return TRUE ;	1692:1:33762:33773	5272958	4	True				
ANR	5273156	Identifier	TRUE		5272958	0					
ANR	5273157	ReturnType	int		5272958	1					
ANR	5273158	Identifier	Stream :: get		5272958	2					
ANR	5273159	ParameterList	uint64_t & l		5272958	3					
ANR	5273160	Parameter	uint64_t & l	1646:13:32657:32667	5272958	0	True				
ANR	5273161	ParameterType	uint64_t &		5272958	0					
ANR	5273162	Identifier	l		5272958	1					
ANR	5273163	CFGEntryNode	ENTRY		5272958		True				
ANR	5273164	CFGExitNode	EXIT		5272958		True				
ANR	5273165	Symbol	_code		5272958						
ANR	5273166	Symbol	INT_SIZE		5272958						
ANR	5273167	Symbol	i		5272958						
ANR	5273168	Symbol	TRUE		5272958						
ANR	5273169	Symbol	l		5272958						
ANR	5273170	Symbol	get_bytes		5272958						
ANR	5273171	Symbol	pad		5272958						
ANR	5273172	Symbol	& l		5272958						
ANR	5273173	Symbol	s		5272958						
ANR	5273174	Symbol	ntohLL		5272958						
ANR	5273175	Symbol	hton_is_noop		5272958						
ANR	5273176	Symbol	get		5272958						
ANR	5273177	Symbol	FALSE		5272958						
ANR	5273178	Symbol	* pad		5272958						
ANR	5273179	Symbol	* s		5272958						
ANR	5273180	Function	Stream :: get	1697:0:33786:34104							
ANR	5273181	FunctionDef	Stream :: get (short & s)		5273180	0					
ANR	5273182	CompoundStatement		1699:0:33814:34104	5273180	0					
ANR	5273183	IdentifierDeclStatement	int i ;	1700:1:33817:33823	5273180	0	True				
ANR	5273184	IdentifierDecl	i		5273180	0					
ANR	5273185	IdentifierDeclType	int		5273180	0					
ANR	5273186	Identifier	i		5273180	1					
ANR	5273187	SwitchStatement	switch ( _code )		5273180	1					
ANR	5273188	Condition	_code	1702:8:33834:33838	5273180	0	True				
ANR	5273189	Identifier	_code		5273180	0					
ANR	5273190	CompoundStatement		4:14:25:25	5273180	1					
ANR	5273191	Label	case internal :	1703:2:33844:33857	5273180	0	True				
ANR	5273192	Identifier	internal		5273180	0					
ANR	5273193	IfStatement	"if ( get_bytes ( & s , sizeof ( short ) ) != sizeof ( short ) )"		5273180	1					
ANR	5273194	Condition	"get_bytes ( & s , sizeof ( short ) ) != sizeof ( short )"	1704:7:33866:33910	5273180	0	True				
ANR	5273195	EqualityExpression	"get_bytes ( & s , sizeof ( short ) ) != sizeof ( short )"		5273180	0		!=			
ANR	5273196	CallExpression	"get_bytes ( & s , sizeof ( short ) )"		5273180	0					
ANR	5273197	Callee	get_bytes		5273180	0					
ANR	5273198	Identifier	get_bytes		5273180	0					
ANR	5273199	ArgumentList	& s		5273180	1					
ANR	5273200	Argument	& s		5273180	0					
ANR	5273201	UnaryOperationExpression	& s		5273180	0					
ANR	5273202	UnaryOperator	&		5273180	0					
ANR	5273203	Identifier	s		5273180	1					
ANR	5273204	Argument	sizeof ( short )		5273180	1					
ANR	5273205	SizeofExpression	sizeof ( short )		5273180	0					
ANR	5273206	Sizeof	sizeof		5273180	0					
ANR	5273207	SizeofOperand	short		5273180	1					
ANR	5273208	SizeofExpression	sizeof ( short )		5273180	1					
ANR	5273209	Sizeof	sizeof		5273180	0					
ANR	5273210	SizeofOperand	short		5273180	1					
ANR	5273211	ReturnStatement	return FALSE ;	1704:54:33913:33925	5273180	1	True				
ANR	5273212	Identifier	FALSE		5273180	0					
ANR	5273213	BreakStatement	break ;	1705:3:33930:33935	5273180	2	True				
ANR	5273214	Label	case external :	1707:2:33940:33953	5273180	3	True				
ANR	5273215	Identifier	external		5273180	0					
ANR	5273216	IfStatement	if ( ! get ( i ) )		5273180	4					
ANR	5273217	Condition	! get ( i )	1708:7:33962:33968	5273180	0	True				
ANR	5273218	UnaryOperationExpression	! get ( i )		5273180	0					
ANR	5273219	UnaryOperator	!		5273180	0					
ANR	5273220	CallExpression	get ( i )		5273180	1					
ANR	5273221	Callee	get		5273180	0					
ANR	5273222	Identifier	get		5273180	0					
ANR	5273223	ArgumentList	i		5273180	1					
ANR	5273224	Argument	i		5273180	0					
ANR	5273225	Identifier	i		5273180	0					
ANR	5273226	ReturnStatement	return FALSE ;	1708:16:33971:33983	5273180	1	True				
ANR	5273227	Identifier	FALSE		5273180	0					
ANR	5273228	ExpressionStatement	s = ( short ) i	1709:3:33988:34001	5273180	5	True				
ANR	5273229	AssignmentExpression	s = ( short ) i		5273180	0		=			
ANR	5273230	Identifier	s		5273180	0					
ANR	5273231	CastExpression	( short ) i		5273180	1					
ANR	5273232	CastTarget	short		5273180	0					
ANR	5273233	Identifier	i		5273180	1					
ANR	5273234	BreakStatement	break ;	1710:3:34006:34011	5273180	6	True				
ANR	5273235	Label	case ascii :	1712:2:34016:34026	5273180	7	True				
ANR	5273236	Identifier	ascii		5273180	0					
ANR	5273237	ReturnStatement	return FALSE ;	1713:3:34031:34043	5273180	8	True				
ANR	5273238	Identifier	FALSE		5273180	0					
ANR	5273239	ExpressionStatement	"NETWORK_TRACE ( ""get short "" << s )"	1715:8:34056:34088	5273180	2	True				
ANR	5273240	CallExpression	"NETWORK_TRACE ( ""get short "" << s )"		5273180	0					
ANR	5273241	Callee	NETWORK_TRACE		5273180	0					
ANR	5273242	Identifier	NETWORK_TRACE		5273180	0					
ANR	5273243	ArgumentList	"""get short "" << s"		5273180	1					
ANR	5273244	Argument	"""get short "" << s"		5273180	0					
ANR	5273245	ShiftExpression	"""get short "" << s"		5273180	0		<<			
ANR	5273246	PrimaryExpression	"""get short """		5273180	0					
ANR	5273247	Identifier	s		5273180	1					
ANR	5273248	ReturnStatement	return TRUE ;	1716:1:34091:34102	5273180	3	True				
ANR	5273249	Identifier	TRUE		5273180	0					
ANR	5273250	ReturnType	int		5273180	1					
ANR	5273251	Identifier	Stream :: get		5273180	2					
ANR	5273252	ParameterList	short & s		5273180	3					
ANR	5273253	Parameter	short & s	1698:13:33804:33811	5273180	0	True				
ANR	5273254	ParameterType	short &		5273180	0					
ANR	5273255	Identifier	s		5273180	1					
ANR	5273256	CFGEntryNode	ENTRY		5273180		True				
ANR	5273257	CFGExitNode	EXIT		5273180		True				
ANR	5273258	Symbol	s		5273180						
ANR	5273259	Symbol	_code		5273180						
ANR	5273260	Symbol	get		5273180						
ANR	5273261	Symbol	i		5273180						
ANR	5273262	Symbol	& s		5273180						
ANR	5273263	Symbol	TRUE		5273180						
ANR	5273264	Symbol	FALSE		5273180						
ANR	5273265	Symbol	get_bytes		5273180						
ANR	5273266	Function	Stream :: get	1721:0:34109:34454							
ANR	5273267	FunctionDef	Stream :: get (unsigned short & s)		5273266	0					
ANR	5273268	CompoundStatement		1723:0:34146:34454	5273266	0					
ANR	5273269	IdentifierDeclStatement	unsigned int i ;	1724:1:34149:34164	5273266	0	True				
ANR	5273270	IdentifierDecl	i		5273266	0					
ANR	5273271	IdentifierDeclType	unsigned int		5273266	0					
ANR	5273272	Identifier	i		5273266	1					
ANR	5273273	SwitchStatement	switch ( _code )		5273266	1					
ANR	5273274	Condition	_code	1726:8:34175:34179	5273266	0	True				
ANR	5273275	Identifier	_code		5273266	0					
ANR	5273276	CompoundStatement		4:14:34:34	5273266	1					
ANR	5273277	Label	case internal :	1727:2:34185:34198	5273266	0	True				
ANR	5273278	Identifier	internal		5273266	0					
ANR	5273279	IfStatement	"if ( get_bytes ( & s , sizeof ( short ) ) != sizeof ( short ) )"		5273266	1					
ANR	5273280	Condition	"get_bytes ( & s , sizeof ( short ) ) != sizeof ( short )"	1728:7:34207:34251	5273266	0	True				
ANR	5273281	EqualityExpression	"get_bytes ( & s , sizeof ( short ) ) != sizeof ( short )"		5273266	0		!=			
ANR	5273282	CallExpression	"get_bytes ( & s , sizeof ( short ) )"		5273266	0					
ANR	5273283	Callee	get_bytes		5273266	0					
ANR	5273284	Identifier	get_bytes		5273266	0					
ANR	5273285	ArgumentList	& s		5273266	1					
ANR	5273286	Argument	& s		5273266	0					
ANR	5273287	UnaryOperationExpression	& s		5273266	0					
ANR	5273288	UnaryOperator	&		5273266	0					
ANR	5273289	Identifier	s		5273266	1					
ANR	5273290	Argument	sizeof ( short )		5273266	1					
ANR	5273291	SizeofExpression	sizeof ( short )		5273266	0					
ANR	5273292	Sizeof	sizeof		5273266	0					
ANR	5273293	SizeofOperand	short		5273266	1					
ANR	5273294	SizeofExpression	sizeof ( short )		5273266	1					
ANR	5273295	Sizeof	sizeof		5273266	0					
ANR	5273296	SizeofOperand	short		5273266	1					
ANR	5273297	ReturnStatement	return FALSE ;	1728:54:34254:34266	5273266	1	True				
ANR	5273298	Identifier	FALSE		5273266	0					
ANR	5273299	BreakStatement	break ;	1729:3:34271:34276	5273266	2	True				
ANR	5273300	Label	case external :	1731:2:34281:34294	5273266	3	True				
ANR	5273301	Identifier	external		5273266	0					
ANR	5273302	IfStatement	if ( ! get ( i ) )		5273266	4					
ANR	5273303	Condition	! get ( i )	1732:7:34303:34309	5273266	0	True				
ANR	5273304	UnaryOperationExpression	! get ( i )		5273266	0					
ANR	5273305	UnaryOperator	!		5273266	0					
ANR	5273306	CallExpression	get ( i )		5273266	1					
ANR	5273307	Callee	get		5273266	0					
ANR	5273308	Identifier	get		5273266	0					
ANR	5273309	ArgumentList	i		5273266	1					
ANR	5273310	Argument	i		5273266	0					
ANR	5273311	Identifier	i		5273266	0					
ANR	5273312	ReturnStatement	return FALSE ;	1732:16:34312:34324	5273266	1	True				
ANR	5273313	Identifier	FALSE		5273266	0					
ANR	5273314	ExpressionStatement	s = ( unsigned short ) i	1733:3:34329:34351	5273266	5	True				
ANR	5273315	AssignmentExpression	s = ( unsigned short ) i		5273266	0		=			
ANR	5273316	Identifier	s		5273266	0					
ANR	5273317	CastExpression	( unsigned short ) i		5273266	1					
ANR	5273318	CastTarget	unsigned short		5273266	0					
ANR	5273319	Identifier	i		5273266	1					
ANR	5273320	BreakStatement	break ;	1734:3:34356:34361	5273266	6	True				
ANR	5273321	Label	case ascii :	1736:2:34366:34376	5273266	7	True				
ANR	5273322	Identifier	ascii		5273266	0					
ANR	5273323	ReturnStatement	return FALSE ;	1737:3:34381:34393	5273266	8	True				
ANR	5273324	Identifier	FALSE		5273266	0					
ANR	5273325	ExpressionStatement	"NETWORK_TRACE ( ""get short "" << s )"	1739:8:34406:34438	5273266	2	True				
ANR	5273326	CallExpression	"NETWORK_TRACE ( ""get short "" << s )"		5273266	0					
ANR	5273327	Callee	NETWORK_TRACE		5273266	0					
ANR	5273328	Identifier	NETWORK_TRACE		5273266	0					
ANR	5273329	ArgumentList	"""get short "" << s"		5273266	1					
ANR	5273330	Argument	"""get short "" << s"		5273266	0					
ANR	5273331	ShiftExpression	"""get short "" << s"		5273266	0		<<			
ANR	5273332	PrimaryExpression	"""get short """		5273266	0					
ANR	5273333	Identifier	s		5273266	1					
ANR	5273334	ReturnStatement	return TRUE ;	1740:1:34441:34452	5273266	3	True				
ANR	5273335	Identifier	TRUE		5273266	0					
ANR	5273336	ReturnType	int		5273266	1					
ANR	5273337	Identifier	Stream :: get		5273266	2					
ANR	5273338	ParameterList	unsigned short & s		5273266	3					
ANR	5273339	Parameter	unsigned short & s	1722:13:34127:34143	5273266	0	True				
ANR	5273340	ParameterType	unsigned short &		5273266	0					
ANR	5273341	Identifier	s		5273266	1					
ANR	5273342	CFGEntryNode	ENTRY		5273266		True				
ANR	5273343	CFGExitNode	EXIT		5273266		True				
ANR	5273344	Symbol	s		5273266						
ANR	5273345	Symbol	_code		5273266						
ANR	5273346	Symbol	get		5273266						
ANR	5273347	Symbol	i		5273266						
ANR	5273348	Symbol	& s		5273266						
ANR	5273349	Symbol	TRUE		5273266						
ANR	5273350	Symbol	FALSE		5273266						
ANR	5273351	Symbol	get_bytes		5273266						
ANR	5273352	Function	Stream :: get	1745:0:34459:34779							
ANR	5273353	FunctionDef	Stream :: get (float & f)		5273352	0					
ANR	5273354	CompoundStatement		1747:0:34487:34779	5273352	0					
ANR	5273355	IdentifierDeclStatement	double d ;	1748:1:34490:34498	5273352	0	True				
ANR	5273356	IdentifierDecl	d		5273352	0					
ANR	5273357	IdentifierDeclType	double		5273352	0					
ANR	5273358	Identifier	d		5273352	1					
ANR	5273359	SwitchStatement	switch ( _code )		5273352	1					
ANR	5273360	Condition	_code	1750:8:34509:34513	5273352	0	True				
ANR	5273361	Identifier	_code		5273352	0					
ANR	5273362	CompoundStatement		4:14:27:27	5273352	1					
ANR	5273363	Label	case internal :	1751:2:34519:34532	5273352	0	True				
ANR	5273364	Identifier	internal		5273352	0					
ANR	5273365	IfStatement	"if ( get_bytes ( & f , sizeof ( float ) ) != sizeof ( float ) )"		5273352	1					
ANR	5273366	Condition	"get_bytes ( & f , sizeof ( float ) ) != sizeof ( float )"	1752:7:34541:34585	5273352	0	True				
ANR	5273367	EqualityExpression	"get_bytes ( & f , sizeof ( float ) ) != sizeof ( float )"		5273352	0		!=			
ANR	5273368	CallExpression	"get_bytes ( & f , sizeof ( float ) )"		5273352	0					
ANR	5273369	Callee	get_bytes		5273352	0					
ANR	5273370	Identifier	get_bytes		5273352	0					
ANR	5273371	ArgumentList	& f		5273352	1					
ANR	5273372	Argument	& f		5273352	0					
ANR	5273373	UnaryOperationExpression	& f		5273352	0					
ANR	5273374	UnaryOperator	&		5273352	0					
ANR	5273375	Identifier	f		5273352	1					
ANR	5273376	Argument	sizeof ( float )		5273352	1					
ANR	5273377	SizeofExpression	sizeof ( float )		5273352	0					
ANR	5273378	Sizeof	sizeof		5273352	0					
ANR	5273379	SizeofOperand	float		5273352	1					
ANR	5273380	SizeofExpression	sizeof ( float )		5273352	1					
ANR	5273381	Sizeof	sizeof		5273352	0					
ANR	5273382	SizeofOperand	float		5273352	1					
ANR	5273383	ReturnStatement	return FALSE ;	1752:54:34588:34600	5273352	1	True				
ANR	5273384	Identifier	FALSE		5273352	0					
ANR	5273385	BreakStatement	break ;	1753:3:34605:34610	5273352	2	True				
ANR	5273386	Label	case external :	1755:2:34615:34628	5273352	3	True				
ANR	5273387	Identifier	external		5273352	0					
ANR	5273388	IfStatement	if ( ! get ( d ) )		5273352	4					
ANR	5273389	Condition	! get ( d )	1756:7:34637:34643	5273352	0	True				
ANR	5273390	UnaryOperationExpression	! get ( d )		5273352	0					
ANR	5273391	UnaryOperator	!		5273352	0					
ANR	5273392	CallExpression	get ( d )		5273352	1					
ANR	5273393	Callee	get		5273352	0					
ANR	5273394	Identifier	get		5273352	0					
ANR	5273395	ArgumentList	d		5273352	1					
ANR	5273396	Argument	d		5273352	0					
ANR	5273397	Identifier	d		5273352	0					
ANR	5273398	ReturnStatement	return FALSE ;	1756:16:34646:34658	5273352	1	True				
ANR	5273399	Identifier	FALSE		5273352	0					
ANR	5273400	ExpressionStatement	f = ( float ) d	1757:3:34663:34676	5273352	5	True				
ANR	5273401	AssignmentExpression	f = ( float ) d		5273352	0		=			
ANR	5273402	Identifier	f		5273352	0					
ANR	5273403	CastExpression	( float ) d		5273352	1					
ANR	5273404	CastTarget	float		5273352	0					
ANR	5273405	Identifier	d		5273352	1					
ANR	5273406	BreakStatement	break ;	1758:3:34681:34686	5273352	6	True				
ANR	5273407	Label	case ascii :	1760:2:34691:34701	5273352	7	True				
ANR	5273408	Identifier	ascii		5273352	0					
ANR	5273409	ReturnStatement	return FALSE ;	1761:3:34706:34718	5273352	8	True				
ANR	5273410	Identifier	FALSE		5273352	0					
ANR	5273411	ExpressionStatement	"NETWORK_TRACE ( ""get float "" << f )"	1763:8:34731:34763	5273352	2	True				
ANR	5273412	CallExpression	"NETWORK_TRACE ( ""get float "" << f )"		5273352	0					
ANR	5273413	Callee	NETWORK_TRACE		5273352	0					
ANR	5273414	Identifier	NETWORK_TRACE		5273352	0					
ANR	5273415	ArgumentList	"""get float "" << f"		5273352	1					
ANR	5273416	Argument	"""get float "" << f"		5273352	0					
ANR	5273417	ShiftExpression	"""get float "" << f"		5273352	0		<<			
ANR	5273418	PrimaryExpression	"""get float """		5273352	0					
ANR	5273419	Identifier	f		5273352	1					
ANR	5273420	ReturnStatement	return TRUE ;	1764:1:34766:34777	5273352	3	True				
ANR	5273421	Identifier	TRUE		5273352	0					
ANR	5273422	ReturnType	int		5273352	1					
ANR	5273423	Identifier	Stream :: get		5273352	2					
ANR	5273424	ParameterList	float & f		5273352	3					
ANR	5273425	Parameter	float & f	1746:13:34477:34484	5273352	0	True				
ANR	5273426	ParameterType	float &		5273352	0					
ANR	5273427	Identifier	f		5273352	1					
ANR	5273428	CFGEntryNode	ENTRY		5273352		True				
ANR	5273429	CFGExitNode	EXIT		5273352		True				
ANR	5273430	Symbol	d		5273352						
ANR	5273431	Symbol	_code		5273352						
ANR	5273432	Symbol	f		5273352						
ANR	5273433	Symbol	get		5273352						
ANR	5273434	Symbol	TRUE		5273352						
ANR	5273435	Symbol	FALSE		5273352						
ANR	5273436	Symbol	& f		5273352						
ANR	5273437	Symbol	get_bytes		5273352						
ANR	5273438	Function	Stream :: get	1769:0:34784:35189							
ANR	5273439	FunctionDef	Stream :: get (double & d)		5273438	0					
ANR	5273440	CompoundStatement		1771:0:34813:35189	5273438	0					
ANR	5273441	IdentifierDeclStatement	"int frac , exp ;"	1772:1:34816:34830	5273438	0	True				
ANR	5273442	IdentifierDecl	frac		5273438	0					
ANR	5273443	IdentifierDeclType	int		5273438	0					
ANR	5273444	Identifier	frac		5273438	1					
ANR	5273445	IdentifierDecl	exp		5273438	1					
ANR	5273446	IdentifierDeclType	int		5273438	0					
ANR	5273447	Identifier	exp		5273438	1					
ANR	5273448	SwitchStatement	switch ( _code )		5273438	1					
ANR	5273449	Condition	_code	1774:8:34841:34845	5273438	0	True				
ANR	5273450	Identifier	_code		5273438	0					
ANR	5273451	CompoundStatement		4:14:33:33	5273438	1					
ANR	5273452	Label	case internal :	1775:2:34851:34864	5273438	0	True				
ANR	5273453	Identifier	internal		5273438	0					
ANR	5273454	IfStatement	"if ( get_bytes ( & d , sizeof ( double ) ) != sizeof ( double ) )"		5273438	1					
ANR	5273455	Condition	"get_bytes ( & d , sizeof ( double ) ) != sizeof ( double )"	1776:7:34873:34919	5273438	0	True				
ANR	5273456	EqualityExpression	"get_bytes ( & d , sizeof ( double ) ) != sizeof ( double )"		5273438	0		!=			
ANR	5273457	CallExpression	"get_bytes ( & d , sizeof ( double ) )"		5273438	0					
ANR	5273458	Callee	get_bytes		5273438	0					
ANR	5273459	Identifier	get_bytes		5273438	0					
ANR	5273460	ArgumentList	& d		5273438	1					
ANR	5273461	Argument	& d		5273438	0					
ANR	5273462	UnaryOperationExpression	& d		5273438	0					
ANR	5273463	UnaryOperator	&		5273438	0					
ANR	5273464	Identifier	d		5273438	1					
ANR	5273465	Argument	sizeof ( double )		5273438	1					
ANR	5273466	SizeofExpression	sizeof ( double )		5273438	0					
ANR	5273467	Sizeof	sizeof		5273438	0					
ANR	5273468	SizeofOperand	double		5273438	1					
ANR	5273469	SizeofExpression	sizeof ( double )		5273438	1					
ANR	5273470	Sizeof	sizeof		5273438	0					
ANR	5273471	SizeofOperand	double		5273438	1					
ANR	5273472	ReturnStatement	return FALSE ;	1776:56:34922:34934	5273438	1	True				
ANR	5273473	Identifier	FALSE		5273438	0					
ANR	5273474	BreakStatement	break ;	1777:3:34939:34944	5273438	2	True				
ANR	5273475	Label	case external :	1779:2:34949:34962	5273438	3	True				
ANR	5273476	Identifier	external		5273438	0					
ANR	5273477	IfStatement	if ( ! get ( frac ) )		5273438	4					
ANR	5273478	Condition	! get ( frac )	1780:7:34971:34980	5273438	0	True				
ANR	5273479	UnaryOperationExpression	! get ( frac )		5273438	0					
ANR	5273480	UnaryOperator	!		5273438	0					
ANR	5273481	CallExpression	get ( frac )		5273438	1					
ANR	5273482	Callee	get		5273438	0					
ANR	5273483	Identifier	get		5273438	0					
ANR	5273484	ArgumentList	frac		5273438	1					
ANR	5273485	Argument	frac		5273438	0					
ANR	5273486	Identifier	frac		5273438	0					
ANR	5273487	ReturnStatement	return FALSE ;	1780:19:34983:34995	5273438	1	True				
ANR	5273488	Identifier	FALSE		5273438	0					
ANR	5273489	IfStatement	if ( ! get ( exp ) )		5273438	5					
ANR	5273490	Condition	! get ( exp )	1781:7:35004:35012	5273438	0	True				
ANR	5273491	UnaryOperationExpression	! get ( exp )		5273438	0					
ANR	5273492	UnaryOperator	!		5273438	0					
ANR	5273493	CallExpression	get ( exp )		5273438	1					
ANR	5273494	Callee	get		5273438	0					
ANR	5273495	Identifier	get		5273438	0					
ANR	5273496	ArgumentList	exp		5273438	1					
ANR	5273497	Argument	exp		5273438	0					
ANR	5273498	Identifier	exp		5273438	0					
ANR	5273499	ReturnStatement	return FALSE ;	1781:18:35015:35027	5273438	1	True				
ANR	5273500	Identifier	FALSE		5273438	0					
ANR	5273501	ExpressionStatement	"d = ldexp ( ( ( ( double ) frac ) / ( ( double ) FRAC_CONST ) ) , exp )"	1782:3:35032:35085	5273438	6	True				
ANR	5273502	AssignmentExpression	"d = ldexp ( ( ( ( double ) frac ) / ( ( double ) FRAC_CONST ) ) , exp )"		5273438	0		=			
ANR	5273503	Identifier	d		5273438	0					
ANR	5273504	CallExpression	"ldexp ( ( ( ( double ) frac ) / ( ( double ) FRAC_CONST ) ) , exp )"		5273438	1					
ANR	5273505	Callee	ldexp		5273438	0					
ANR	5273506	Identifier	ldexp		5273438	0					
ANR	5273507	ArgumentList	( ( double ) frac ) / ( ( double ) FRAC_CONST )		5273438	1					
ANR	5273508	Argument	( ( double ) frac ) / ( ( double ) FRAC_CONST )		5273438	0					
ANR	5273509	MultiplicativeExpression	( ( double ) frac ) / ( ( double ) FRAC_CONST )		5273438	0		/			
ANR	5273510	CastExpression	( double ) frac		5273438	0					
ANR	5273511	CastTarget	double		5273438	0					
ANR	5273512	Identifier	frac		5273438	1					
ANR	5273513	CastExpression	( double ) FRAC_CONST		5273438	1					
ANR	5273514	CastTarget	double		5273438	0					
ANR	5273515	Identifier	FRAC_CONST		5273438	1					
ANR	5273516	Argument	exp		5273438	1					
ANR	5273517	Identifier	exp		5273438	0					
ANR	5273518	BreakStatement	break ;	1783:3:35090:35095	5273438	7	True				
ANR	5273519	Label	case ascii :	1785:2:35100:35110	5273438	8	True				
ANR	5273520	Identifier	ascii		5273438	0					
ANR	5273521	ReturnStatement	return FALSE ;	1786:3:35115:35127	5273438	9	True				
ANR	5273522	Identifier	FALSE		5273438	0					
ANR	5273523	ExpressionStatement	"NETWORK_TRACE ( ""get double "" << d )"	1788:8:35140:35173	5273438	2	True				
ANR	5273524	CallExpression	"NETWORK_TRACE ( ""get double "" << d )"		5273438	0					
ANR	5273525	Callee	NETWORK_TRACE		5273438	0					
ANR	5273526	Identifier	NETWORK_TRACE		5273438	0					
ANR	5273527	ArgumentList	"""get double "" << d"		5273438	1					
ANR	5273528	Argument	"""get double "" << d"		5273438	0					
ANR	5273529	ShiftExpression	"""get double "" << d"		5273438	0		<<			
ANR	5273530	PrimaryExpression	"""get double """		5273438	0					
ANR	5273531	Identifier	d		5273438	1					
ANR	5273532	ReturnStatement	return TRUE ;	1789:1:35176:35187	5273438	3	True				
ANR	5273533	Identifier	TRUE		5273438	0					
ANR	5273534	ReturnType	int		5273438	1					
ANR	5273535	Identifier	Stream :: get		5273438	2					
ANR	5273536	ParameterList	double & d		5273438	3					
ANR	5273537	Parameter	double & d	1770:13:34802:34810	5273438	0	True				
ANR	5273538	ParameterType	double &		5273438	0					
ANR	5273539	Identifier	d		5273438	1					
ANR	5273540	CFGEntryNode	ENTRY		5273438		True				
ANR	5273541	CFGExitNode	EXIT		5273438		True				
ANR	5273542	Symbol	FRAC_CONST		5273438						
ANR	5273543	Symbol	d		5273438						
ANR	5273544	Symbol	_code		5273438						
ANR	5273545	Symbol	ldexp		5273438						
ANR	5273546	Symbol	get		5273438						
ANR	5273547	Symbol	TRUE		5273438						
ANR	5273548	Symbol	& d		5273438						
ANR	5273549	Symbol	FALSE		5273438						
ANR	5273550	Symbol	exp		5273438						
ANR	5273551	Symbol	frac		5273438						
ANR	5273552	Symbol	get_bytes		5273438						
ANR	5273553	Function	Stream :: get	1803:0:35613:36108							
ANR	5273554	FunctionDef	Stream :: get (char * & s)		5273553	0					
ANR	5273555	CompoundStatement		1805:0:35641:36108	5273553	0					
ANR	5273556	IdentifierDeclStatement	char const * ptr = NULL ;	1806:1:35644:35666	5273553	0	True				
ANR	5273557	IdentifierDecl	* ptr = NULL		5273553	0					
ANR	5273558	IdentifierDeclType	char const *		5273553	0					
ANR	5273559	Identifier	ptr		5273553	1					
ANR	5273560	AssignmentExpression	* ptr = NULL		5273553	2		=			
ANR	5273561	Identifier	NULL		5273553	0					
ANR	5273562	Identifier	NULL		5273553	1					
ANR	5273563	ExpressionStatement	ASSERT ( s == NULL )	1812:1:35921:35940	5273553	1	True				
ANR	5273564	CallExpression	ASSERT ( s == NULL )		5273553	0					
ANR	5273565	Callee	ASSERT		5273553	0					
ANR	5273566	Identifier	ASSERT		5273553	0					
ANR	5273567	ArgumentList	s == NULL		5273553	1					
ANR	5273568	Argument	s == NULL		5273553	0					
ANR	5273569	EqualityExpression	s == NULL		5273553	0		==			
ANR	5273570	Identifier	s		5273553	0					
ANR	5273571	Identifier	NULL		5273553	1					
ANR	5273572	IdentifierDeclStatement	int result = get_string_ptr ( ptr ) ;	1814:1:35944:35976	5273553	2	True				
ANR	5273573	IdentifierDecl	result = get_string_ptr ( ptr )		5273553	0					
ANR	5273574	IdentifierDeclType	int		5273553	0					
ANR	5273575	Identifier	result		5273553	1					
ANR	5273576	AssignmentExpression	result = get_string_ptr ( ptr )		5273553	2		=			
ANR	5273577	Identifier	result		5273553	0					
ANR	5273578	CallExpression	get_string_ptr ( ptr )		5273553	1					
ANR	5273579	Callee	get_string_ptr		5273553	0					
ANR	5273580	Identifier	get_string_ptr		5273553	0					
ANR	5273581	ArgumentList	ptr		5273553	1					
ANR	5273582	Argument	ptr		5273553	0					
ANR	5273583	Identifier	ptr		5273553	0					
ANR	5273584	IfStatement	if ( result == TRUE )		5273553	3					
ANR	5273585	Condition	result == TRUE	1815:5:35983:35996	5273553	0	True				
ANR	5273586	EqualityExpression	result == TRUE		5273553	0		==			
ANR	5273587	Identifier	result		5273553	0					
ANR	5273588	Identifier	TRUE		5273553	1					
ANR	5273589	CompoundStatement		11:22:358:358	5273553	1					
ANR	5273590	IfStatement	if ( ptr )		5273553	0					
ANR	5273591	Condition	ptr	1816:6:36008:36010	5273553	0	True				
ANR	5273592	Identifier	ptr		5273553	0					
ANR	5273593	CompoundStatement		12:12:372:372	5273553	1					
ANR	5273594	ExpressionStatement	s = strdup ( ptr )	1817:3:36019:36034	5273553	0	True				
ANR	5273595	AssignmentExpression	s = strdup ( ptr )		5273553	0		=			
ANR	5273596	Identifier	s		5273553	0					
ANR	5273597	CallExpression	strdup ( ptr )		5273553	1					
ANR	5273598	Callee	strdup		5273553	0					
ANR	5273599	Identifier	strdup		5273553	0					
ANR	5273600	ArgumentList	ptr		5273553	1					
ANR	5273601	Argument	ptr		5273553	0					
ANR	5273602	Identifier	ptr		5273553	0					
ANR	5273603	ElseStatement	else		5273553	0					
ANR	5273604	CompoundStatement		15:7:405:405	5273553	0					
ANR	5273605	ExpressionStatement	s = NULL	1820:3:36052:36060	5273553	0	True				
ANR	5273606	AssignmentExpression	s = NULL		5273553	0		=			
ANR	5273607	Identifier	s		5273553	0					
ANR	5273608	Identifier	NULL		5273553	1					
ANR	5273609	ElseStatement	else		5273553	0					
ANR	5273610	CompoundStatement		19:6:433:433	5273553	0					
ANR	5273611	ExpressionStatement	s = NULL	1824:2:36079:36087	5273553	0	True				
ANR	5273612	AssignmentExpression	s = NULL		5273553	0		=			
ANR	5273613	Identifier	s		5273553	0					
ANR	5273614	Identifier	NULL		5273553	1					
ANR	5273615	ReturnStatement	return result ;	1826:1:36093:36106	5273553	4	True				
ANR	5273616	Identifier	result		5273553	0					
ANR	5273617	ReturnType	int		5273553	1					
ANR	5273618	Identifier	Stream :: get		5273553	2					
ANR	5273619	ParameterList	char * & s		5273553	3					
ANR	5273620	Parameter	char * & s	1804:13:35631:35638	5273553	0	True				
ANR	5273621	ParameterType	char * &		5273553	0					
ANR	5273622	Identifier	s		5273553	1					
ANR	5273623	CFGEntryNode	ENTRY		5273553		True				
ANR	5273624	CFGExitNode	EXIT		5273553		True				
ANR	5273625	Symbol	result		5273553						
ANR	5273626	Symbol	s		5273553						
ANR	5273627	Symbol	NULL		5273553						
ANR	5273628	Symbol	get_string_ptr		5273553						
ANR	5273629	Symbol	TRUE		5273553						
ANR	5273630	Symbol	strdup		5273553						
ANR	5273631	Symbol	ptr		5273553						
ANR	5273632	Function	Stream :: get	1836:0:36410:36739							
ANR	5273633	FunctionDef	"Stream :: get (char * s , int l)"		5273632	0					
ANR	5273634	CompoundStatement		1838:0:36445:36739	5273632	0					
ANR	5273635	IdentifierDeclStatement	char const * ptr = NULL ;	1839:1:36448:36470	5273632	0	True				
ANR	5273636	IdentifierDecl	* ptr = NULL		5273632	0					
ANR	5273637	IdentifierDeclType	char const *		5273632	0					
ANR	5273638	Identifier	ptr		5273632	1					
ANR	5273639	AssignmentExpression	* ptr = NULL		5273632	2		=			
ANR	5273640	Identifier	NULL		5273632	0					
ANR	5273641	Identifier	NULL		5273632	1					
ANR	5273642	ExpressionStatement	ASSERT ( s != NULL && l > 0 )	1841:1:36474:36502	5273632	1	True				
ANR	5273643	CallExpression	ASSERT ( s != NULL && l > 0 )		5273632	0					
ANR	5273644	Callee	ASSERT		5273632	0					
ANR	5273645	Identifier	ASSERT		5273632	0					
ANR	5273646	ArgumentList	s != NULL && l > 0		5273632	1					
ANR	5273647	Argument	s != NULL && l > 0		5273632	0					
ANR	5273648	AndExpression	s != NULL && l > 0		5273632	0		&&			
ANR	5273649	EqualityExpression	s != NULL		5273632	0		!=			
ANR	5273650	Identifier	s		5273632	0					
ANR	5273651	Identifier	NULL		5273632	1					
ANR	5273652	RelationalExpression	l > 0		5273632	1		>			
ANR	5273653	Identifier	l		5273632	0					
ANR	5273654	PrimaryExpression	0		5273632	1					
ANR	5273655	IdentifierDeclStatement	int result = get_string_ptr ( ptr ) ;	1843:1:36506:36538	5273632	2	True				
ANR	5273656	IdentifierDecl	result = get_string_ptr ( ptr )		5273632	0					
ANR	5273657	IdentifierDeclType	int		5273632	0					
ANR	5273658	Identifier	result		5273632	1					
ANR	5273659	AssignmentExpression	result = get_string_ptr ( ptr )		5273632	2		=			
ANR	5273660	Identifier	result		5273632	0					
ANR	5273661	CallExpression	get_string_ptr ( ptr )		5273632	1					
ANR	5273662	Callee	get_string_ptr		5273632	0					
ANR	5273663	Identifier	get_string_ptr		5273632	0					
ANR	5273664	ArgumentList	ptr		5273632	1					
ANR	5273665	Argument	ptr		5273632	0					
ANR	5273666	Identifier	ptr		5273632	0					
ANR	5273667	IfStatement	if ( result != TRUE || ! ptr )		5273632	3					
ANR	5273668	Condition	result != TRUE || ! ptr	1844:5:36545:36566	5273632	0	True				
ANR	5273669	OrExpression	result != TRUE || ! ptr		5273632	0		||			
ANR	5273670	EqualityExpression	result != TRUE		5273632	0		!=			
ANR	5273671	Identifier	result		5273632	0					
ANR	5273672	Identifier	TRUE		5273632	1					
ANR	5273673	UnaryOperationExpression	! ptr		5273632	1					
ANR	5273674	UnaryOperator	!		5273632	0					
ANR	5273675	Identifier	ptr		5273632	1					
ANR	5273676	CompoundStatement		7:30:124:124	5273632	1					
ANR	5273677	ExpressionStatement	"ptr = """""	1845:2:36574:36582	5273632	0	True				
ANR	5273678	AssignmentExpression	"ptr = """""		5273632	0		=			
ANR	5273679	Identifier	ptr		5273632	0					
ANR	5273680	PrimaryExpression	""""""		5273632	1					
ANR	5273681	IdentifierDeclStatement	int len = strlen ( ptr ) ;	1848:1:36589:36610	5273632	4	True				
ANR	5273682	IdentifierDecl	len = strlen ( ptr )		5273632	0					
ANR	5273683	IdentifierDeclType	int		5273632	0					
ANR	5273684	Identifier	len		5273632	1					
ANR	5273685	AssignmentExpression	len = strlen ( ptr )		5273632	2		=			
ANR	5273686	Identifier	len		5273632	0					
ANR	5273687	CallExpression	strlen ( ptr )		5273632	1					
ANR	5273688	Callee	strlen		5273632	0					
ANR	5273689	Identifier	strlen		5273632	0					
ANR	5273690	ArgumentList	ptr		5273632	1					
ANR	5273691	Argument	ptr		5273632	0					
ANR	5273692	Identifier	ptr		5273632	0					
ANR	5273693	IfStatement	if ( len + 1 > l )		5273632	5					
ANR	5273694	Condition	len + 1 > l	1849:5:36617:36627	5273632	0	True				
ANR	5273695	RelationalExpression	len + 1 > l		5273632	0		>			
ANR	5273696	AdditiveExpression	len + 1		5273632	0		+			
ANR	5273697	Identifier	len		5273632	0					
ANR	5273698	PrimaryExpression	1		5273632	1					
ANR	5273699	Identifier	l		5273632	1					
ANR	5273700	CompoundStatement		12:19:185:185	5273632	1					
ANR	5273701	ExpressionStatement	"strncpy ( s , ptr , l - 1 )"	1850:2:36635:36653	5273632	0	True				
ANR	5273702	CallExpression	"strncpy ( s , ptr , l - 1 )"		5273632	0					
ANR	5273703	Callee	strncpy		5273632	0					
ANR	5273704	Identifier	strncpy		5273632	0					
ANR	5273705	ArgumentList	s		5273632	1					
ANR	5273706	Argument	s		5273632	0					
ANR	5273707	Identifier	s		5273632	0					
ANR	5273708	Argument	ptr		5273632	1					
ANR	5273709	Identifier	ptr		5273632	0					
ANR	5273710	Argument	l - 1		5273632	2					
ANR	5273711	AdditiveExpression	l - 1		5273632	0		-			
ANR	5273712	Identifier	l		5273632	0					
ANR	5273713	PrimaryExpression	1		5273632	1					
ANR	5273714	ExpressionStatement	s [ l ] = '\\0'	1851:2:36657:36668	5273632	1	True				
ANR	5273715	AssignmentExpression	s [ l ] = '\\0'		5273632	0		=			
ANR	5273716	ArrayIndexing	s [ l ]		5273632	0					
ANR	5273717	Identifier	s		5273632	0					
ANR	5273718	Identifier	l		5273632	1					
ANR	5273719	PrimaryExpression	'\\0'		5273632	1					
ANR	5273720	ExpressionStatement	result = FALSE	1852:2:36672:36686	5273632	2	True				
ANR	5273721	AssignmentExpression	result = FALSE		5273632	0		=			
ANR	5273722	Identifier	result		5273632	0					
ANR	5273723	Identifier	FALSE		5273632	1					
ANR	5273724	ElseStatement	else		5273632	0					
ANR	5273725	CompoundStatement		17:6:251:251	5273632	0					
ANR	5273726	ExpressionStatement	"strncpy ( s , ptr , l )"	1855:2:36701:36717	5273632	0	True				
ANR	5273727	CallExpression	"strncpy ( s , ptr , l )"		5273632	0					
ANR	5273728	Callee	strncpy		5273632	0					
ANR	5273729	Identifier	strncpy		5273632	0					
ANR	5273730	ArgumentList	s		5273632	1					
ANR	5273731	Argument	s		5273632	0					
ANR	5273732	Identifier	s		5273632	0					
ANR	5273733	Argument	ptr		5273632	1					
ANR	5273734	Identifier	ptr		5273632	0					
ANR	5273735	Argument	l		5273632	2					
ANR	5273736	Identifier	l		5273632	0					
ANR	5273737	ReturnStatement	return result ;	1858:1:36724:36737	5273632	6	True				
ANR	5273738	Identifier	result		5273632	0					
ANR	5273739	ReturnType	int		5273632	1					
ANR	5273740	Identifier	Stream :: get		5273632	2					
ANR	5273741	ParameterList	"char * s , int l"		5273632	3					
ANR	5273742	Parameter	char * s	1837:13:36428:36434	5273632	0	True				
ANR	5273743	ParameterType	char *		5273632	0					
ANR	5273744	Identifier	s		5273632	1					
ANR	5273745	Parameter	int l	1837:22:36437:36442	5273632	1	True				
ANR	5273746	ParameterType	int		5273632	0					
ANR	5273747	Identifier	l		5273632	1					
ANR	5273748	CFGEntryNode	ENTRY		5273632		True				
ANR	5273749	CFGExitNode	EXIT		5273632		True				
ANR	5273750	Symbol	result		5273632						
ANR	5273751	Symbol	strlen		5273632						
ANR	5273752	Symbol	s		5273632						
ANR	5273753	Symbol	NULL		5273632						
ANR	5273754	Symbol	len		5273632						
ANR	5273755	Symbol	get_string_ptr		5273632						
ANR	5273756	Symbol	* l		5273632						
ANR	5273757	Symbol	TRUE		5273632						
ANR	5273758	Symbol	FALSE		5273632						
ANR	5273759	Symbol	l		5273632						
ANR	5273760	Symbol	* s		5273632						
ANR	5273761	Symbol	ptr		5273632						
ANR	5273762	Function	Stream :: get_string_ptr	1861:0:36742:38337							
ANR	5273763	FunctionDef	Stream :: get_string_ptr (char const * & s)		5273762	0					
ANR	5273764	CompoundStatement		1862:41:36787:38337	5273762	0					
ANR	5273765	IdentifierDeclStatement	char c ;	1863:1:36790:36796	5273762	0	True				
ANR	5273766	IdentifierDecl	c		5273762	0					
ANR	5273767	IdentifierDeclType	char		5273762	0					
ANR	5273768	Identifier	c		5273762	1					
ANR	5273769	IdentifierDeclStatement	void * tmp_ptr = 0 ;	1864:1:36799:36817	5273762	1	True				
ANR	5273770	IdentifierDecl	* tmp_ptr = 0		5273762	0					
ANR	5273771	IdentifierDeclType	void *		5273762	0					
ANR	5273772	Identifier	tmp_ptr		5273762	1					
ANR	5273773	AssignmentExpression	* tmp_ptr = 0		5273762	2		=			
ANR	5273774	Identifier	tmp_ptr		5273762	0					
ANR	5273775	PrimaryExpression	0		5273762	1					
ANR	5273776	IdentifierDeclStatement	int len ;	1865:4:36823:36834	5273762	2	True				
ANR	5273777	IdentifierDecl	len		5273762	0					
ANR	5273778	IdentifierDeclType	int		5273762	0					
ANR	5273779	Identifier	len		5273762	1					
ANR	5273780	ExpressionStatement	s = NULL	1867:1:36838:36846	5273762	3	True				
ANR	5273781	AssignmentExpression	s = NULL		5273762	0		=			
ANR	5273782	Identifier	s		5273762	0					
ANR	5273783	Identifier	NULL		5273762	1					
ANR	5273784	SwitchStatement	switch ( _code )		5273762	4					
ANR	5273785	Condition	_code	1868:8:36856:36860	5273762	0	True				
ANR	5273786	Identifier	_code		5273762	0					
ANR	5273787	CompoundStatement		7:14:74:74	5273762	1					
ANR	5273788	Label	case internal :	1869:2:36866:36879	5273762	0	True				
ANR	5273789	Identifier	internal		5273762	0					
ANR	5273790	Label	case external :	1870:2:36883:36896	5273762	1	True				
ANR	5273791	Identifier	external		5273762	0					
ANR	5273792	IfStatement	if ( ! get_encryption ( ) )		5273762	2					
ANR	5273793	Condition	! get_encryption ( )	1872:24:36998:37014	5273762	0	True				
ANR	5273794	UnaryOperationExpression	! get_encryption ( )		5273762	0					
ANR	5273795	UnaryOperator	!		5273762	0					
ANR	5273796	CallExpression	get_encryption ( )		5273762	1					
ANR	5273797	Callee	get_encryption		5273762	0					
ANR	5273798	Identifier	get_encryption		5273762	0					
ANR	5273799	ArgumentList			5273762	1					
ANR	5273800	CompoundStatement		11:43:229:229	5273762	1					
ANR	5273801	IfStatement	if ( ! peek ( c ) )		5273762	0					
ANR	5273802	Condition	! peek ( c )	1873:28:37047:37054	5273762	0	True				
ANR	5273803	UnaryOperationExpression	! peek ( c )		5273762	0					
ANR	5273804	UnaryOperator	!		5273762	0					
ANR	5273805	CallExpression	peek ( c )		5273762	1					
ANR	5273806	Callee	peek		5273762	0					
ANR	5273807	Identifier	peek		5273762	0					
ANR	5273808	ArgumentList	c		5273762	1					
ANR	5273809	Argument	c		5273762	0					
ANR	5273810	Identifier	c		5273762	0					
ANR	5273811	ReturnStatement	return FALSE ;	1873:38:37057:37069	5273762	1	True				
ANR	5273812	Identifier	FALSE		5273762	0					
ANR	5273813	IfStatement	if ( c == '\\255' )		5273762	1					
ANR	5273814	Condition	c == '\\255'	1874:28:37099:37109	5273762	0	True				
ANR	5273815	EqualityExpression	c == '\\255'		5273762	0		==			
ANR	5273816	Identifier	c		5273762	0					
ANR	5273817	PrimaryExpression	'\\255'		5273762	1					
ANR	5273818	CompoundStatement		13:40:323:323	5273762	1					
ANR	5273819	IfStatement	"if ( get_bytes ( & c , 1 ) != 1 )"		5273762	0					
ANR	5273820	Condition	"get_bytes ( & c , 1 ) != 1"	1875:32:37145:37165	5273762	0	True				
ANR	5273821	EqualityExpression	"get_bytes ( & c , 1 ) != 1"		5273762	0		!=			
ANR	5273822	CallExpression	"get_bytes ( & c , 1 )"		5273762	0					
ANR	5273823	Callee	get_bytes		5273762	0					
ANR	5273824	Identifier	get_bytes		5273762	0					
ANR	5273825	ArgumentList	& c		5273762	1					
ANR	5273826	Argument	& c		5273762	0					
ANR	5273827	UnaryOperationExpression	& c		5273762	0					
ANR	5273828	UnaryOperator	&		5273762	0					
ANR	5273829	Identifier	c		5273762	1					
ANR	5273830	Argument	1		5273762	1					
ANR	5273831	PrimaryExpression	1		5273762	0					
ANR	5273832	PrimaryExpression	1		5273762	1					
ANR	5273833	ReturnStatement	return FALSE ;	1875:55:37168:37180	5273762	1	True				
ANR	5273834	Identifier	FALSE		5273762	0					
ANR	5273835	ExpressionStatement	s = NULL	1876:7:37189:37197	5273762	1	True				
ANR	5273836	AssignmentExpression	s = NULL		5273762	0		=			
ANR	5273837	Identifier	s		5273762	0					
ANR	5273838	Identifier	NULL		5273762	1					
ANR	5273839	ElseStatement	else		5273762	0					
ANR	5273840	CompoundStatement		17:28:465:465	5273762	0					
ANR	5273841	IfStatement	"if ( get_ptr ( tmp_ptr , '\\0' ) <= 0 )"		5273762	0					
ANR	5273842	Condition	"get_ptr ( tmp_ptr , '\\0' ) <= 0"	1879:32:37287:37313	5273762	0	True				
ANR	5273843	RelationalExpression	"get_ptr ( tmp_ptr , '\\0' ) <= 0"		5273762	0		<=			
ANR	5273844	CallExpression	"get_ptr ( tmp_ptr , '\\0' )"		5273762	0					
ANR	5273845	Callee	get_ptr		5273762	0					
ANR	5273846	Identifier	get_ptr		5273762	0					
ANR	5273847	ArgumentList	tmp_ptr		5273762	1					
ANR	5273848	Argument	tmp_ptr		5273762	0					
ANR	5273849	Identifier	tmp_ptr		5273762	0					
ANR	5273850	Argument	'\\0'		5273762	1					
ANR	5273851	PrimaryExpression	'\\0'		5273762	0					
ANR	5273852	PrimaryExpression	0		5273762	1					
ANR	5273853	ReturnStatement	return FALSE ;	1879:61:37316:37328	5273762	1	True				
ANR	5273854	Identifier	FALSE		5273762	0					
ANR	5273855	ExpressionStatement	s = ( char * ) tmp_ptr	1880:7:37337:37356	5273762	1	True				
ANR	5273856	AssignmentExpression	s = ( char * ) tmp_ptr		5273762	0		=			
ANR	5273857	Identifier	s		5273762	0					
ANR	5273858	CastExpression	( char * ) tmp_ptr		5273762	1					
ANR	5273859	CastTarget	char *		5273762	0					
ANR	5273860	Identifier	tmp_ptr		5273762	1					
ANR	5273861	ElseStatement	else		5273762	0					
ANR	5273862	CompoundStatement		22:25:643:643	5273762	0					
ANR	5273863	IfStatement	if ( get ( len ) == FALSE )		5273762	0					
ANR	5273864	Condition	get ( len ) == FALSE	1885:28:37537:37553	5273762	0	True				
ANR	5273865	EqualityExpression	get ( len ) == FALSE		5273762	0		==			
ANR	5273866	CallExpression	get ( len )		5273762	0					
ANR	5273867	Callee	get		5273762	0					
ANR	5273868	Identifier	get		5273762	0					
ANR	5273869	ArgumentList	len		5273762	1					
ANR	5273870	Argument	len		5273762	0					
ANR	5273871	Identifier	len		5273762	0					
ANR	5273872	Identifier	FALSE		5273762	1					
ANR	5273873	CompoundStatement		24:47:768:768	5273762	1					
ANR	5273874	ReturnStatement	return FALSE ;	1886:28:37586:37598	5273762	0	True				
ANR	5273875	Identifier	FALSE		5273762	0					
ANR	5273876	IfStatement	if ( ! decrypt_buf || decrypt_buf_len < len )		5273762	1					
ANR	5273877	Condition	! decrypt_buf || decrypt_buf_len < len	1889:10:37637:37673	5273762	0	True				
ANR	5273878	OrExpression	! decrypt_buf || decrypt_buf_len < len		5273762	0		||			
ANR	5273879	UnaryOperationExpression	! decrypt_buf		5273762	0					
ANR	5273880	UnaryOperator	!		5273762	0					
ANR	5273881	Identifier	decrypt_buf		5273762	1					
ANR	5273882	RelationalExpression	decrypt_buf_len < len		5273762	1		<			
ANR	5273883	Identifier	decrypt_buf_len		5273762	0					
ANR	5273884	Identifier	len		5273762	1					
ANR	5273885	CompoundStatement		28:50:889:889	5273762	1					
ANR	5273886	ExpressionStatement	free ( decrypt_buf )	1890:7:37686:37705	5273762	0	True				
ANR	5273887	CallExpression	free ( decrypt_buf )		5273762	0					
ANR	5273888	Callee	free		5273762	0					
ANR	5273889	Identifier	free		5273762	0					
ANR	5273890	ArgumentList	decrypt_buf		5273762	1					
ANR	5273891	Argument	decrypt_buf		5273762	0					
ANR	5273892	Identifier	decrypt_buf		5273762	0					
ANR	5273893	ExpressionStatement	decrypt_buf = ( char * ) malloc ( len )	1891:7:37714:37747	5273762	1	True				
ANR	5273894	AssignmentExpression	decrypt_buf = ( char * ) malloc ( len )		5273762	0		=			
ANR	5273895	Identifier	decrypt_buf		5273762	0					
ANR	5273896	CastExpression	( char * ) malloc ( len )		5273762	1					
ANR	5273897	CastTarget	char *		5273762	0					
ANR	5273898	CallExpression	malloc ( len )		5273762	1					
ANR	5273899	Callee	malloc		5273762	0					
ANR	5273900	Identifier	malloc		5273762	0					
ANR	5273901	ArgumentList	len		5273762	1					
ANR	5273902	Argument	len		5273762	0					
ANR	5273903	Identifier	len		5273762	0					
ANR	5273904	ExpressionStatement	ASSERT ( decrypt_buf )	1892:7:37756:37777	5273762	2	True				
ANR	5273905	CallExpression	ASSERT ( decrypt_buf )		5273762	0					
ANR	5273906	Callee	ASSERT		5273762	0					
ANR	5273907	Identifier	ASSERT		5273762	0					
ANR	5273908	ArgumentList	decrypt_buf		5273762	1					
ANR	5273909	Argument	decrypt_buf		5273762	0					
ANR	5273910	Identifier	decrypt_buf		5273762	0					
ANR	5273911	ExpressionStatement	decrypt_buf_len = len	1893:7:37786:37807	5273762	3	True				
ANR	5273912	AssignmentExpression	decrypt_buf_len = len		5273762	0		=			
ANR	5273913	Identifier	decrypt_buf_len		5273762	0					
ANR	5273914	Identifier	len		5273762	1					
ANR	5273915	IfStatement	"if ( get_bytes ( decrypt_buf , len ) != len )"		5273762	2					
ANR	5273916	Condition	"get_bytes ( decrypt_buf , len ) != len"	1896:28:37846:37879	5273762	0	True				
ANR	5273917	EqualityExpression	"get_bytes ( decrypt_buf , len ) != len"		5273762	0		!=			
ANR	5273918	CallExpression	"get_bytes ( decrypt_buf , len )"		5273762	0					
ANR	5273919	Callee	get_bytes		5273762	0					
ANR	5273920	Identifier	get_bytes		5273762	0					
ANR	5273921	ArgumentList	decrypt_buf		5273762	1					
ANR	5273922	Argument	decrypt_buf		5273762	0					
ANR	5273923	Identifier	decrypt_buf		5273762	0					
ANR	5273924	Argument	len		5273762	1					
ANR	5273925	Identifier	len		5273762	0					
ANR	5273926	Identifier	len		5273762	1					
ANR	5273927	CompoundStatement		35:65:1095:1095	5273762	1					
ANR	5273928	ReturnStatement	return FALSE ;	1897:28:37913:37925	5273762	0	True				
ANR	5273929	Identifier	FALSE		5273762	0					
ANR	5273930	IfStatement	if ( * decrypt_buf == '\\255' )		5273762	3					
ANR	5273931	Condition	* decrypt_buf == '\\255'	1900:28:37982:38003	5273762	0	True				
ANR	5273932	EqualityExpression	* decrypt_buf == '\\255'		5273762	0		==			
ANR	5273933	UnaryOperationExpression	* decrypt_buf		5273762	0					
ANR	5273934	UnaryOperator	*		5273762	0					
ANR	5273935	Identifier	decrypt_buf		5273762	1					
ANR	5273936	PrimaryExpression	'\\255'		5273762	1					
ANR	5273937	CompoundStatement		39:53:1219:1219	5273762	1					
ANR	5273938	ExpressionStatement	s = NULL	1901:7:38016:38024	5273762	0	True				
ANR	5273939	AssignmentExpression	s = NULL		5273762	0		=			
ANR	5273940	Identifier	s		5273762	0					
ANR	5273941	Identifier	NULL		5273762	1					
ANR	5273942	ElseStatement	else		5273762	0					
ANR	5273943	CompoundStatement		42:29:1293:1293	5273762	0					
ANR	5273944	ExpressionStatement	s = decrypt_buf	1904:7:38090:38105	5273762	0	True				
ANR	5273945	AssignmentExpression	s = decrypt_buf		5273762	0		=			
ANR	5273946	Identifier	s		5273762	0					
ANR	5273947	Identifier	decrypt_buf		5273762	1					
ANR	5273948	BreakStatement	break ;	1907:20:38175:38180	5273762	3	True				
ANR	5273949	Label	case ascii :	1909:2:38185:38195	5273762	4	True				
ANR	5273950	Identifier	ascii		5273762	0					
ANR	5273951	ReturnStatement	return FALSE ;	1910:3:38200:38212	5273762	5	True				
ANR	5273952	Identifier	FALSE		5273762	0					
ANR	5273953	IfStatement	if ( s )		5273762	5					
ANR	5273954	Condition	s	1912:5:38222:38222	5273762	0	True				
ANR	5273955	Identifier	s		5273762	0					
ANR	5273956	CompoundStatement		51:9:1438:1438	5273762	1					
ANR	5273957	ExpressionStatement	"NETWORK_TRACE ( ""get string ptr "" << s )"	1913:2:38230:38267	5273762	0	True				
ANR	5273958	CallExpression	"NETWORK_TRACE ( ""get string ptr "" << s )"		5273762	0					
ANR	5273959	Callee	NETWORK_TRACE		5273762	0					
ANR	5273960	Identifier	NETWORK_TRACE		5273762	0					
ANR	5273961	ArgumentList	"""get string ptr "" << s"		5273762	1					
ANR	5273962	Argument	"""get string ptr "" << s"		5273762	0					
ANR	5273963	ShiftExpression	"""get string ptr "" << s"		5273762	0		<<			
ANR	5273964	PrimaryExpression	"""get string ptr """		5273762	0					
ANR	5273965	Identifier	s		5273762	1					
ANR	5273966	ElseStatement	else		5273762	0					
ANR	5273967	CompoundStatement		54:6:1490:1490	5273762	0					
ANR	5273968	ExpressionStatement	"NETWORK_TRACE ( ""get string ptr NULL"" )"	1916:2:38282:38318	5273762	0	True				
ANR	5273969	CallExpression	"NETWORK_TRACE ( ""get string ptr NULL"" )"		5273762	0					
ANR	5273970	Callee	NETWORK_TRACE		5273762	0					
ANR	5273971	Identifier	NETWORK_TRACE		5273762	0					
ANR	5273972	ArgumentList	"""get string ptr NULL"""		5273762	1					
ANR	5273973	Argument	"""get string ptr NULL"""		5273762	0					
ANR	5273974	PrimaryExpression	"""get string ptr NULL"""		5273762	0					
ANR	5273975	ReturnStatement	return TRUE ;	1918:1:38324:38335	5273762	6	True				
ANR	5273976	Identifier	TRUE		5273762	0					
ANR	5273977	ReturnType	int		5273762	1					
ANR	5273978	Identifier	Stream :: get_string_ptr		5273762	2					
ANR	5273979	ParameterList	char const * & s		5273762	3					
ANR	5273980	Parameter	char const * & s	1862:24:36770:36783	5273762	0	True				
ANR	5273981	ParameterType	char const * &		5273762	0					
ANR	5273982	Identifier	s		5273762	1					
ANR	5273983	CFGEntryNode	ENTRY		5273762		True				
ANR	5273984	CFGExitNode	EXIT		5273762		True				
ANR	5273985	Symbol	malloc		5273762						
ANR	5273986	Symbol	c		5273762						
ANR	5273987	Symbol	NULL		5273762						
ANR	5273988	Symbol	_code		5273762						
ANR	5273989	Symbol	& c		5273762						
ANR	5273990	Symbol	TRUE		5273762						
ANR	5273991	Symbol	decrypt_buf_len		5273762						
ANR	5273992	Symbol	* decrypt_buf		5273762						
ANR	5273993	Symbol	tmp_ptr		5273762						
ANR	5273994	Symbol	decrypt_buf		5273762						
ANR	5273995	Symbol	get_encryption		5273762						
ANR	5273996	Symbol	get_bytes		5273762						
ANR	5273997	Symbol	peek		5273762						
ANR	5273998	Symbol	get_ptr		5273762						
ANR	5273999	Symbol	s		5273762						
ANR	5274000	Symbol	len		5273762						
ANR	5274001	Symbol	get		5273762						
ANR	5274002	Symbol	FALSE		5273762						
ANR	5274003	Function	Stream :: get	1930:0:38738:38953							
ANR	5274004	FunctionDef	Stream :: get (MyString & s)		5274003	0					
ANR	5274005	CompoundStatement		1932:0:38769:38953	5274003	0					
ANR	5274006	IdentifierDeclStatement	char const * ptr = NULL ;	1933:1:38772:38794	5274003	0	True				
ANR	5274007	IdentifierDecl	* ptr = NULL		5274003	0					
ANR	5274008	IdentifierDeclType	char const *		5274003	0					
ANR	5274009	Identifier	ptr		5274003	1					
ANR	5274010	AssignmentExpression	* ptr = NULL		5274003	2		=			
ANR	5274011	Identifier	NULL		5274003	0					
ANR	5274012	Identifier	NULL		5274003	1					
ANR	5274013	IdentifierDeclStatement	int result = get_string_ptr ( ptr ) ;	1934:1:38797:38829	5274003	1	True				
ANR	5274014	IdentifierDecl	result = get_string_ptr ( ptr )		5274003	0					
ANR	5274015	IdentifierDeclType	int		5274003	0					
ANR	5274016	Identifier	result		5274003	1					
ANR	5274017	AssignmentExpression	result = get_string_ptr ( ptr )		5274003	2		=			
ANR	5274018	Identifier	result		5274003	0					
ANR	5274019	CallExpression	get_string_ptr ( ptr )		5274003	1					
ANR	5274020	Callee	get_string_ptr		5274003	0					
ANR	5274021	Identifier	get_string_ptr		5274003	0					
ANR	5274022	ArgumentList	ptr		5274003	1					
ANR	5274023	Argument	ptr		5274003	0					
ANR	5274024	Identifier	ptr		5274003	0					
ANR	5274025	IfStatement	if ( result == TRUE )		5274003	2					
ANR	5274026	Condition	result == TRUE	1935:5:38836:38849	5274003	0	True				
ANR	5274027	EqualityExpression	result == TRUE		5274003	0		==			
ANR	5274028	Identifier	result		5274003	0					
ANR	5274029	Identifier	TRUE		5274003	1					
ANR	5274030	CompoundStatement		4:22:83:83	5274003	1					
ANR	5274031	IfStatement	if ( ptr )		5274003	0					
ANR	5274032	Condition	ptr	1936:6:38861:38863	5274003	0	True				
ANR	5274033	Identifier	ptr		5274003	0					
ANR	5274034	CompoundStatement		5:12:97:97	5274003	1					
ANR	5274035	ExpressionStatement	s = ptr	1937:3:38872:38879	5274003	0	True				
ANR	5274036	AssignmentExpression	s = ptr		5274003	0		=			
ANR	5274037	Identifier	s		5274003	0					
ANR	5274038	Identifier	ptr		5274003	1					
ANR	5274039	ElseStatement	else		5274003	0					
ANR	5274040	CompoundStatement		8:7:122:122	5274003	0					
ANR	5274041	ExpressionStatement	s = NULL	1940:3:38897:38905	5274003	0	True				
ANR	5274042	AssignmentExpression	s = NULL		5274003	0		=			
ANR	5274043	Identifier	s		5274003	0					
ANR	5274044	Identifier	NULL		5274003	1					
ANR	5274045	ElseStatement	else		5274003	0					
ANR	5274046	CompoundStatement		12:6:150:150	5274003	0					
ANR	5274047	ExpressionStatement	s = NULL	1944:2:38924:38932	5274003	0	True				
ANR	5274048	AssignmentExpression	s = NULL		5274003	0		=			
ANR	5274049	Identifier	s		5274003	0					
ANR	5274050	Identifier	NULL		5274003	1					
ANR	5274051	ReturnStatement	return result ;	1946:1:38938:38951	5274003	3	True				
ANR	5274052	Identifier	result		5274003	0					
ANR	5274053	ReturnType	int		5274003	1					
ANR	5274054	Identifier	Stream :: get		5274003	2					
ANR	5274055	ParameterList	MyString & s		5274003	3					
ANR	5274056	Parameter	MyString & s	1931:13:38756:38766	5274003	0	True				
ANR	5274057	ParameterType	MyString &		5274003	0					
ANR	5274058	Identifier	s		5274003	1					
ANR	5274059	CFGEntryNode	ENTRY		5274003		True				
ANR	5274060	CFGExitNode	EXIT		5274003		True				
ANR	5274061	Symbol	result		5274003						
ANR	5274062	Symbol	s		5274003						
ANR	5274063	Symbol	NULL		5274003						
ANR	5274064	Symbol	get_string_ptr		5274003						
ANR	5274065	Symbol	TRUE		5274003						
ANR	5274066	Symbol	ptr		5274003						
ANR	5274067	Function	Stream :: get	1949:0:38956:39170							
ANR	5274068	FunctionDef	Stream :: get (std :: string & s)		5274067	0					
ANR	5274069	CompoundStatement		1951:0:38990:39170	5274067	0					
ANR	5274070	IdentifierDeclStatement	char const * ptr = NULL ;	1952:1:38993:39015	5274067	0	True				
ANR	5274071	IdentifierDecl	* ptr = NULL		5274067	0					
ANR	5274072	IdentifierDeclType	char const *		5274067	0					
ANR	5274073	Identifier	ptr		5274067	1					
ANR	5274074	AssignmentExpression	* ptr = NULL		5274067	2		=			
ANR	5274075	Identifier	NULL		5274067	0					
ANR	5274076	Identifier	NULL		5274067	1					
ANR	5274077	IdentifierDeclStatement	int result = get_string_ptr ( ptr ) ;	1953:1:39018:39050	5274067	1	True				
ANR	5274078	IdentifierDecl	result = get_string_ptr ( ptr )		5274067	0					
ANR	5274079	IdentifierDeclType	int		5274067	0					
ANR	5274080	Identifier	result		5274067	1					
ANR	5274081	AssignmentExpression	result = get_string_ptr ( ptr )		5274067	2		=			
ANR	5274082	Identifier	result		5274067	0					
ANR	5274083	CallExpression	get_string_ptr ( ptr )		5274067	1					
ANR	5274084	Callee	get_string_ptr		5274067	0					
ANR	5274085	Identifier	get_string_ptr		5274067	0					
ANR	5274086	ArgumentList	ptr		5274067	1					
ANR	5274087	Argument	ptr		5274067	0					
ANR	5274088	Identifier	ptr		5274067	0					
ANR	5274089	IfStatement	if ( result == TRUE )		5274067	2					
ANR	5274090	Condition	result == TRUE	1954:5:39057:39070	5274067	0	True				
ANR	5274091	EqualityExpression	result == TRUE		5274067	0		==			
ANR	5274092	Identifier	result		5274067	0					
ANR	5274093	Identifier	TRUE		5274067	1					
ANR	5274094	CompoundStatement		4:22:83:83	5274067	1					
ANR	5274095	IfStatement	if ( ptr )		5274067	0					
ANR	5274096	Condition	ptr	1955:6:39082:39084	5274067	0	True				
ANR	5274097	Identifier	ptr		5274067	0					
ANR	5274098	CompoundStatement		5:12:97:97	5274067	1					
ANR	5274099	ExpressionStatement	s = ptr	1956:3:39093:39100	5274067	0	True				
ANR	5274100	AssignmentExpression	s = ptr		5274067	0		=			
ANR	5274101	Identifier	s		5274067	0					
ANR	5274102	Identifier	ptr		5274067	1					
ANR	5274103	ElseStatement	else		5274067	0					
ANR	5274104	CompoundStatement		8:7:122:122	5274067	0					
ANR	5274105	ExpressionStatement	"s = """""	1959:3:39118:39124	5274067	0	True				
ANR	5274106	AssignmentExpression	"s = """""		5274067	0		=			
ANR	5274107	Identifier	s		5274067	0					
ANR	5274108	PrimaryExpression	""""""		5274067	1					
ANR	5274109	ElseStatement	else		5274067	0					
ANR	5274110	CompoundStatement		12:6:148:148	5274067	0					
ANR	5274111	ExpressionStatement	"s = """""	1963:2:39143:39149	5274067	0	True				
ANR	5274112	AssignmentExpression	"s = """""		5274067	0		=			
ANR	5274113	Identifier	s		5274067	0					
ANR	5274114	PrimaryExpression	""""""		5274067	1					
ANR	5274115	ReturnStatement	return result ;	1965:1:39155:39168	5274067	3	True				
ANR	5274116	Identifier	result		5274067	0					
ANR	5274117	ReturnType	int		5274067	1					
ANR	5274118	Identifier	Stream :: get		5274067	2					
ANR	5274119	ParameterList	std :: string & s		5274067	3					
ANR	5274120	Parameter	std :: string & s	1950:13:38974:38987	5274067	0	True				
ANR	5274121	ParameterType	std :: string &		5274067	0					
ANR	5274122	Identifier	s		5274067	1					
ANR	5274123	CFGEntryNode	ENTRY		5274067		True				
ANR	5274124	CFGExitNode	EXIT		5274067		True				
ANR	5274125	Symbol	result		5274067						
ANR	5274126	Symbol	s		5274067						
ANR	5274127	Symbol	NULL		5274067						
ANR	5274128	Symbol	get_string_ptr		5274067						
ANR	5274129	Symbol	TRUE		5274067						
ANR	5274130	Symbol	ptr		5274067						
ANR	5274131	Function	Stream :: snd_int	1968:0:39173:39368							
ANR	5274132	FunctionDef	"Stream :: snd_int (int val , int end_of_record)"		5274131	0					
ANR	5274133	CompoundStatement		1973:0:39228:39368	5274131	0					
ANR	5274134	ExpressionStatement	encode ( )	1974:1:39231:39239	5274131	0	True				
ANR	5274135	CallExpression	encode ( )		5274131	0					
ANR	5274136	Callee	encode		5274131	0					
ANR	5274137	Identifier	encode		5274131	0					
ANR	5274138	ArgumentList			5274131	1					
ANR	5274139	IfStatement	if ( ! code ( val ) )		5274131	1					
ANR	5274140	Condition	! code ( val )	1975:5:39246:39255	5274131	0	True				
ANR	5274141	UnaryOperationExpression	! code ( val )		5274131	0					
ANR	5274142	UnaryOperator	!		5274131	0					
ANR	5274143	CallExpression	code ( val )		5274131	1					
ANR	5274144	Callee	code		5274131	0					
ANR	5274145	Identifier	code		5274131	0					
ANR	5274146	ArgumentList	val		5274131	1					
ANR	5274147	Argument	val		5274131	0					
ANR	5274148	Identifier	val		5274131	0					
ANR	5274149	CompoundStatement		3:17:29:29	5274131	1					
ANR	5274150	ReturnStatement	return FALSE ;	1976:2:39262:39274	5274131	0	True				
ANR	5274151	Identifier	FALSE		5274131	0					
ANR	5274152	IfStatement	if ( end_of_record )		5274131	2					
ANR	5274153	Condition	end_of_record	1979:5:39285:39297	5274131	0	True				
ANR	5274154	Identifier	end_of_record		5274131	0					
ANR	5274155	CompoundStatement		7:20:71:71	5274131	1					
ANR	5274156	IfStatement	if ( ! end_of_message ( ) )		5274131	0					
ANR	5274157	Condition	! end_of_message ( )	1980:6:39308:39324	5274131	0	True				
ANR	5274158	UnaryOperationExpression	! end_of_message ( )		5274131	0					
ANR	5274159	UnaryOperator	!		5274131	0					
ANR	5274160	CallExpression	end_of_message ( )		5274131	1					
ANR	5274161	Callee	end_of_message		5274131	0					
ANR	5274162	Identifier	end_of_message		5274131	0					
ANR	5274163	ArgumentList			5274131	1					
ANR	5274164	CompoundStatement		8:25:98:98	5274131	1					
ANR	5274165	ReturnStatement	return FALSE ;	1981:3:39332:39344	5274131	0	True				
ANR	5274166	Identifier	FALSE		5274131	0					
ANR	5274167	ReturnStatement	return TRUE ;	1985:1:39355:39366	5274131	3	True				
ANR	5274168	Identifier	TRUE		5274131	0					
ANR	5274169	ReturnType	int		5274131	1					
ANR	5274170	Identifier	Stream :: snd_int		5274131	2					
ANR	5274171	ParameterList	"int val , int end_of_record"		5274131	3					
ANR	5274172	Parameter	int val	1970:1:39196:39202	5274131	0	True				
ANR	5274173	ParameterType	int		5274131	0					
ANR	5274174	Identifier	val		5274131	1					
ANR	5274175	Parameter	int end_of_record	1971:1:39207:39223	5274131	1	True				
ANR	5274176	ParameterType	int		5274131	0					
ANR	5274177	Identifier	end_of_record		5274131	1					
ANR	5274178	CFGEntryNode	ENTRY		5274131		True				
ANR	5274179	CFGExitNode	EXIT		5274131		True				
ANR	5274180	Symbol	val		5274131						
ANR	5274181	Symbol	end_of_record		5274131						
ANR	5274182	Symbol	code		5274131						
ANR	5274183	Symbol	end_of_message		5274131						
ANR	5274184	Symbol	TRUE		5274131						
ANR	5274185	Symbol	FALSE		5274131						
ANR	5274186	Function	Stream :: rcv_int	1989:0:39372:39567							
ANR	5274187	FunctionDef	"Stream :: rcv_int (int & val , int end_of_record)"		5274186	0					
ANR	5274188	CompoundStatement		1994:0:39427:39567	5274186	0					
ANR	5274189	ExpressionStatement	decode ( )	1995:1:39430:39438	5274186	0	True				
ANR	5274190	CallExpression	decode ( )		5274186	0					
ANR	5274191	Callee	decode		5274186	0					
ANR	5274192	Identifier	decode		5274186	0					
ANR	5274193	ArgumentList			5274186	1					
ANR	5274194	IfStatement	if ( ! code ( val ) )		5274186	1					
ANR	5274195	Condition	! code ( val )	1996:5:39445:39454	5274186	0	True				
ANR	5274196	UnaryOperationExpression	! code ( val )		5274186	0					
ANR	5274197	UnaryOperator	!		5274186	0					
ANR	5274198	CallExpression	code ( val )		5274186	1					
ANR	5274199	Callee	code		5274186	0					
ANR	5274200	Identifier	code		5274186	0					
ANR	5274201	ArgumentList	val		5274186	1					
ANR	5274202	Argument	val		5274186	0					
ANR	5274203	Identifier	val		5274186	0					
ANR	5274204	CompoundStatement		3:17:29:29	5274186	1					
ANR	5274205	ReturnStatement	return FALSE ;	1997:2:39461:39473	5274186	0	True				
ANR	5274206	Identifier	FALSE		5274186	0					
ANR	5274207	IfStatement	if ( end_of_record )		5274186	2					
ANR	5274208	Condition	end_of_record	2000:5:39484:39496	5274186	0	True				
ANR	5274209	Identifier	end_of_record		5274186	0					
ANR	5274210	CompoundStatement		7:20:71:71	5274186	1					
ANR	5274211	IfStatement	if ( ! end_of_message ( ) )		5274186	0					
ANR	5274212	Condition	! end_of_message ( )	2001:6:39507:39523	5274186	0	True				
ANR	5274213	UnaryOperationExpression	! end_of_message ( )		5274186	0					
ANR	5274214	UnaryOperator	!		5274186	0					
ANR	5274215	CallExpression	end_of_message ( )		5274186	1					
ANR	5274216	Callee	end_of_message		5274186	0					
ANR	5274217	Identifier	end_of_message		5274186	0					
ANR	5274218	ArgumentList			5274186	1					
ANR	5274219	CompoundStatement		8:25:98:98	5274186	1					
ANR	5274220	ReturnStatement	return FALSE ;	2002:3:39531:39543	5274186	0	True				
ANR	5274221	Identifier	FALSE		5274186	0					
ANR	5274222	ReturnStatement	return TRUE ;	2006:1:39554:39565	5274186	3	True				
ANR	5274223	Identifier	TRUE		5274186	0					
ANR	5274224	ReturnType	int		5274186	1					
ANR	5274225	Identifier	Stream :: rcv_int		5274186	2					
ANR	5274226	ParameterList	"int & val , int end_of_record"		5274186	3					
ANR	5274227	Parameter	int & val	1991:1:39395:39402	5274186	0	True				
ANR	5274228	ParameterType	int &		5274186	0					
ANR	5274229	Identifier	val		5274186	1					
ANR	5274230	Parameter	int end_of_record	1992:1:39406:39422	5274186	1	True				
ANR	5274231	ParameterType	int		5274186	0					
ANR	5274232	Identifier	end_of_record		5274186	1					
ANR	5274233	CFGEntryNode	ENTRY		5274186		True				
ANR	5274234	CFGExitNode	EXIT		5274186		True				
ANR	5274235	Symbol	val		5274186						
ANR	5274236	Symbol	end_of_record		5274186						
ANR	5274237	Symbol	code		5274186						
ANR	5274238	Symbol	end_of_message		5274186						
ANR	5274239	Symbol	TRUE		5274186						
ANR	5274240	Symbol	FALSE		5274186						
ANR	5274241	Function	Stream :: allow_one_empty_message	2009:0:39570:39646							
ANR	5274242	FunctionDef	Stream :: allow_one_empty_message ()		5274241	0					
ANR	5274243	CompoundStatement		2011:0:39610:39646	5274241	0					
ANR	5274244	ExpressionStatement	allow_empty_message_flag = TRUE	2012:1:39613:39644	5274241	0	True				
ANR	5274245	AssignmentExpression	allow_empty_message_flag = TRUE		5274241	0		=			
ANR	5274246	Identifier	allow_empty_message_flag		5274241	0					
ANR	5274247	Identifier	TRUE		5274241	1					
ANR	5274248	ReturnType	void		5274241	1					
ANR	5274249	Identifier	Stream :: allow_one_empty_message		5274241	2					
ANR	5274250	ParameterList			5274241	3					
ANR	5274251	CFGEntryNode	ENTRY		5274241		True				
ANR	5274252	CFGExitNode	EXIT		5274241		True				
ANR	5274253	Symbol	allow_empty_message_flag		5274241						
ANR	5274254	Symbol	TRUE		5274241						
ANR	5274255	Function	Stream :: set_crypto_mode	2015:0:39649:39889							
ANR	5274256	FunctionDef	Stream :: set_crypto_mode (bool enabled)		5274255	0					
ANR	5274257	CompoundStatement		2017:0:39693:39889	5274255	0					
ANR	5274258	IfStatement	if ( canEncrypt ( ) && enabled )		5274255	0					
ANR	5274259	Condition	canEncrypt ( ) && enabled	2018:5:39700:39722	5274255	0	True				
ANR	5274260	AndExpression	canEncrypt ( ) && enabled		5274255	0		&&			
ANR	5274261	CallExpression	canEncrypt ( )		5274255	0					
ANR	5274262	Callee	canEncrypt		5274255	0					
ANR	5274263	Identifier	canEncrypt		5274255	0					
ANR	5274264	ArgumentList			5274255	1					
ANR	5274265	Identifier	enabled		5274255	1					
ANR	5274266	CompoundStatement		2:30:31:31	5274255	1					
ANR	5274267	ExpressionStatement	crypto_mode_ = true	2019:2:39729:39748	5274255	0	True				
ANR	5274268	AssignmentExpression	crypto_mode_ = true		5274255	0		=			
ANR	5274269	Identifier	crypto_mode_		5274255	0					
ANR	5274270	Identifier	true		5274255	1					
ANR	5274271	ElseStatement	else		5274255	0					
ANR	5274272	CompoundStatement		4:8:64:64	5274255	0					
ANR	5274273	IfStatement	if ( enabled )		5274255	0					
ANR	5274274	Condition	enabled	2021:6:39766:39772	5274255	0	True				
ANR	5274275	Identifier	enabled		5274255	0					
ANR	5274276	CompoundStatement		5:15:81:81	5274255	1					
ANR	5274277	ExpressionStatement	"dprintf ( D_SECURITY , ""NOT enabling crypto - there was no key exchanged.\\n"" )"	2022:3:39780:39856	5274255	0	True				
ANR	5274278	CallExpression	"dprintf ( D_SECURITY , ""NOT enabling crypto - there was no key exchanged.\\n"" )"		5274255	0					
ANR	5274279	Callee	dprintf		5274255	0					
ANR	5274280	Identifier	dprintf		5274255	0					
ANR	5274281	ArgumentList	D_SECURITY		5274255	1					
ANR	5274282	Argument	D_SECURITY		5274255	0					
ANR	5274283	Identifier	D_SECURITY		5274255	0					
ANR	5274284	Argument	"""NOT enabling crypto - there was no key exchanged.\\n"""		5274255	1					
ANR	5274285	PrimaryExpression	"""NOT enabling crypto - there was no key exchanged.\\n"""		5274255	0					
ANR	5274286	ExpressionStatement	crypto_mode_ = false	2024:2:39864:39884	5274255	1	True				
ANR	5274287	AssignmentExpression	crypto_mode_ = false		5274255	0		=			
ANR	5274288	Identifier	crypto_mode_		5274255	0					
ANR	5274289	Identifier	false		5274255	1					
ANR	5274290	ReturnType	void		5274255	1					
ANR	5274291	Identifier	Stream :: set_crypto_mode		5274255	2					
ANR	5274292	ParameterList	bool enabled		5274255	3					
ANR	5274293	Parameter	bool enabled	2016:24:39679:39690	5274255	0	True				
ANR	5274294	ParameterType	bool		5274255	0					
ANR	5274295	Identifier	enabled		5274255	1					
ANR	5274296	CFGEntryNode	ENTRY		5274255		True				
ANR	5274297	CFGExitNode	EXIT		5274255		True				
ANR	5274298	Symbol	crypto_mode_		5274255						
ANR	5274299	Symbol	canEncrypt		5274255						
ANR	5274300	Symbol	D_SECURITY		5274255						
ANR	5274301	Symbol	true		5274255						
ANR	5274302	Symbol	false		5274255						
ANR	5274303	Symbol	enabled		5274255						
ANR	5274304	Function	Stream :: get_encryption	2028:0:39892:39958							
ANR	5274305	FunctionDef	Stream :: get_encryption ()		5274304	0					
ANR	5274306	CompoundStatement		2030:0:39929:39958	5274304	0					
ANR	5274307	ReturnStatement	return ( crypto_mode_ ) ;	2031:4:39935:39956	5274304	0	True				
ANR	5274308	Identifier	crypto_mode_		5274304	0					
ANR	5274309	ReturnType	bool		5274304	1					
ANR	5274310	Identifier	Stream :: get_encryption		5274304	2					
ANR	5274311	ParameterList			5274304	3					
ANR	5274312	CFGEntryNode	ENTRY		5274304		True				
ANR	5274313	CFGExitNode	EXIT		5274304		True				
ANR	5274314	Symbol	crypto_mode_		5274304						
ANR	5274315	Function	Stream :: peer_description	2035:0:39962:40175							
ANR	5274316	FunctionDef	Stream :: peer_description ()		5274315	0					
ANR	5274317	CompoundStatement		2036:27:40002:40175	5274315	0					
ANR	5274318	IfStatement	if ( m_peer_description_str )		5274315	0					
ANR	5274319	Condition	m_peer_description_str	2037:4:40008:40029	5274315	0	True				
ANR	5274320	Identifier	m_peer_description_str		5274315	0					
ANR	5274321	CompoundStatement		2:28:29:29	5274315	1					
ANR	5274322	ReturnStatement	return m_peer_description_str ;	2038:2:40036:40065	5274315	0	True				
ANR	5274323	Identifier	m_peer_description_str		5274315	0					
ANR	5274324	IdentifierDeclStatement	char const * desc = default_peer_description ( ) ;	2040:1:40071:40116	5274315	1	True				
ANR	5274325	IdentifierDecl	* desc = default_peer_description ( )		5274315	0					
ANR	5274326	IdentifierDeclType	char const *		5274315	0					
ANR	5274327	Identifier	desc		5274315	1					
ANR	5274328	AssignmentExpression	* desc = default_peer_description ( )		5274315	2		=			
ANR	5274329	Identifier	desc		5274315	0					
ANR	5274330	CallExpression	default_peer_description ( )		5274315	1					
ANR	5274331	Callee	default_peer_description		5274315	0					
ANR	5274332	Identifier	default_peer_description		5274315	0					
ANR	5274333	ArgumentList			5274315	1					
ANR	5274334	IfStatement	if ( ! desc )		5274315	2					
ANR	5274335	Condition	! desc	2041:4:40122:40126	5274315	0	True				
ANR	5274336	UnaryOperationExpression	! desc		5274315	0					
ANR	5274337	UnaryOperator	!		5274315	0					
ANR	5274338	Identifier	desc		5274315	1					
ANR	5274339	CompoundStatement		6:11:126:126	5274315	1					
ANR	5274340	ReturnStatement	"return ""(unknown peer)"" ;"	2042:2:40133:40156	5274315	0	True				
ANR	5274341	PrimaryExpression	"""(unknown peer)"""		5274315	0					
ANR	5274342	ReturnStatement	return desc ;	2044:1:40162:40173	5274315	3	True				
ANR	5274343	Identifier	desc		5274315	0					
ANR	5274344	ReturnType	char const *		5274315	1					
ANR	5274345	Identifier	Stream :: peer_description		5274315	2					
ANR	5274346	ParameterList			5274315	3					
ANR	5274347	CFGEntryNode	ENTRY		5274315		True				
ANR	5274348	CFGExitNode	EXIT		5274315		True				
ANR	5274349	Symbol	m_peer_description_str		5274315						
ANR	5274350	Symbol	default_peer_description		5274315						
ANR	5274351	Symbol	desc		5274315						
ANR	5274352	Function	Stream :: set_peer_description	2047:0:40178:40360							
ANR	5274353	FunctionDef	Stream :: set_peer_description (char const * str)		5274352	0					
ANR	5274354	CompoundStatement		2048:46:40229:40360	5274352	0					
ANR	5274355	ExpressionStatement	free ( m_peer_description_str )	2049:1:40232:40260	5274352	0	True				
ANR	5274356	CallExpression	free ( m_peer_description_str )		5274352	0					
ANR	5274357	Callee	free		5274352	0					
ANR	5274358	Identifier	free		5274352	0					
ANR	5274359	ArgumentList	m_peer_description_str		5274352	1					
ANR	5274360	Argument	m_peer_description_str		5274352	0					
ANR	5274361	Identifier	m_peer_description_str		5274352	0					
ANR	5274362	IfStatement	if ( str )		5274352	1					
ANR	5274363	Condition	str	2050:4:40266:40268	5274352	0	True				
ANR	5274364	Identifier	str		5274352	0					
ANR	5274365	CompoundStatement		3:9:41:41	5274352	1					
ANR	5274366	ExpressionStatement	m_peer_description_str = strdup ( str )	2051:2:40275:40311	5274352	0	True				
ANR	5274367	AssignmentExpression	m_peer_description_str = strdup ( str )		5274352	0		=			
ANR	5274368	Identifier	m_peer_description_str		5274352	0					
ANR	5274369	CallExpression	strdup ( str )		5274352	1					
ANR	5274370	Callee	strdup		5274352	0					
ANR	5274371	Identifier	strdup		5274352	0					
ANR	5274372	ArgumentList	str		5274352	1					
ANR	5274373	Argument	str		5274352	0					
ANR	5274374	Identifier	str		5274352	0					
ANR	5274375	ElseStatement	else		5274352	0					
ANR	5274376	CompoundStatement		6:6:92:92	5274352	0					
ANR	5274377	ExpressionStatement	m_peer_description_str = NULL	2054:2:40326:40355	5274352	0	True				
ANR	5274378	AssignmentExpression	m_peer_description_str = NULL		5274352	0		=			
ANR	5274379	Identifier	m_peer_description_str		5274352	0					
ANR	5274380	Identifier	NULL		5274352	1					
ANR	5274381	ReturnType	void		5274352	1					
ANR	5274382	Identifier	Stream :: set_peer_description		5274352	2					
ANR	5274383	ParameterList	char const * str		5274352	3					
ANR	5274384	Parameter	char const * str	2048:29:40212:40226	5274352	0	True				
ANR	5274385	ParameterType	char const *		5274352	0					
ANR	5274386	Identifier	str		5274352	1					
ANR	5274387	CFGEntryNode	ENTRY		5274352		True				
ANR	5274388	CFGExitNode	EXIT		5274352		True				
ANR	5274389	Symbol	str		5274352						
ANR	5274390	Symbol	NULL		5274352						
ANR	5274391	Symbol	m_peer_description_str		5274352						
ANR	5274392	Symbol	strdup		5274352						
ANR	5274393	Function	Stream :: get_peer_version	2058:0:40363:40448							
ANR	5274394	FunctionDef	Stream :: get_peer_version ()		5274393	0					
ANR	5274395	CompoundStatement		2060:0:40422:40448	5274393	0					
ANR	5274396	ReturnStatement	return m_peer_version ;	2061:1:40425:40446	5274393	0	True				
ANR	5274397	Identifier	m_peer_version		5274393	0					
ANR	5274398	ReturnType	CondorVersionInfo const *		5274393	1					
ANR	5274399	Identifier	Stream :: get_peer_version		5274393	2					
ANR	5274400	ParameterList			5274393	3					
ANR	5274401	CFGEntryNode	ENTRY		5274393		True				
ANR	5274402	CFGExitNode	EXIT		5274393		True				
ANR	5274403	Symbol	m_peer_version		5274393						
ANR	5274404	Function	Stream :: set_peer_version	2064:0:40451:40666							
ANR	5274405	FunctionDef	Stream :: set_peer_version (CondorVersionInfo const * version)		5274404	0					
ANR	5274406	CompoundStatement		2066:0:40515:40666	5274404	0					
ANR	5274407	IfStatement	if ( m_peer_version )		5274404	0					
ANR	5274408	Condition	m_peer_version	2067:5:40522:40535	5274404	0	True				
ANR	5274409	Identifier	m_peer_version		5274404	0					
ANR	5274410	CompoundStatement		2:22:23:23	5274404	1					
ANR	5274411	Statement	delete	2068:2:40543:40548	5274404	0	True				
ANR	5274412	ExpressionStatement	m_peer_version	2068:9:40550:40564	5274404	1	True				
ANR	5274413	Identifier	m_peer_version		5274404	0					
ANR	5274414	ExpressionStatement	m_peer_version = NULL	2069:2:40568:40589	5274404	2	True				
ANR	5274415	AssignmentExpression	m_peer_version = NULL		5274404	0		=			
ANR	5274416	Identifier	m_peer_version		5274404	0					
ANR	5274417	Identifier	NULL		5274404	1					
ANR	5274418	IfStatement	if ( version )		5274404	1					
ANR	5274419	Condition	version	2071:5:40599:40605	5274404	0	True				
ANR	5274420	Identifier	version		5274404	0					
ANR	5274421	CompoundStatement		6:15:93:93	5274404	1					
ANR	5274422	ExpressionStatement	m_peer_version = new CondorVersionInfo ( * version )	2072:2:40613:40661	5274404	0	True				
ANR	5274423	AssignmentExpression	m_peer_version = new CondorVersionInfo ( * version )		5274404	0		=			
ANR	5274424	Identifier	m_peer_version		5274404	0					
ANR	5274425	UnaryOperationExpression	* version		5274404	1					
ANR	5274426	UnaryOperator	*		5274404	0					
ANR	5274427	Identifier	version		5274404	1					
ANR	5274428	ReturnType	void		5274404	1					
ANR	5274429	Identifier	Stream :: set_peer_version		5274404	2					
ANR	5274430	ParameterList	CondorVersionInfo const * version		5274404	3					
ANR	5274431	Parameter	CondorVersionInfo const * version	2065:25:40481:40512	5274404	0	True				
ANR	5274432	ParameterType	CondorVersionInfo const *		5274404	0					
ANR	5274433	Identifier	version		5274404	1					
ANR	5274434	CFGEntryNode	ENTRY		5274404		True				
ANR	5274435	CFGExitNode	EXIT		5274404		True				
ANR	5274436	Symbol	NULL		5274404						
ANR	5274437	Symbol	m_peer_version		5274404						
ANR	5274438	Symbol	* version		5274404						
ANR	5274439	Symbol	version		5274404						
ANR	5274440	Function	Stream :: set_deadline_timeout	2076:0:40669:40907							
ANR	5274441	FunctionDef	Stream :: set_deadline_timeout (int t)		5274440	0					
ANR	5274442	CompoundStatement		2078:0:40710:40907	5274440	0					
ANR	5274443	IfStatement	if ( t < 0 )		5274440	0					
ANR	5274444	Condition	t < 0	2079:5:40717:40721	5274440	0	True				
ANR	5274445	RelationalExpression	t < 0		5274440	0		<			
ANR	5274446	Identifier	t		5274440	0					
ANR	5274447	PrimaryExpression	0		5274440	1					
ANR	5274448	CompoundStatement		2:13:14:14	5274440	1					
ANR	5274449	ExpressionStatement	m_deadline_time = 0	2081:2:40747:40766	5274440	0	True				
ANR	5274450	AssignmentExpression	m_deadline_time = 0		5274440	0		=			
ANR	5274451	Identifier	m_deadline_time		5274440	0					
ANR	5274452	PrimaryExpression	0		5274440	1					
ANR	5274453	ElseStatement	else		5274440	0					
ANR	5274454	CompoundStatement		6:6:66:66	5274440	0					
ANR	5274455	IfStatement	if ( Sock :: get_timeout_multiplier ( ) > 0 )		5274440	0					
ANR	5274456	Condition	Sock :: get_timeout_multiplier ( ) > 0	2084:6:40785:40818	5274440	0	True				
ANR	5274457	RelationalExpression	Sock :: get_timeout_multiplier ( ) > 0		5274440	0		>			
ANR	5274458	CallExpression	Sock :: get_timeout_multiplier ( )		5274440	0					
ANR	5274459	Callee	Sock :: get_timeout_multiplier		5274440	0					
ANR	5274460	Identifier	Sock :: get_timeout_multiplier		5274440	0					
ANR	5274461	ArgumentList			5274440	1					
ANR	5274462	PrimaryExpression	0		5274440	1					
ANR	5274463	CompoundStatement		7:43:111:111	5274440	1					
ANR	5274464	ExpressionStatement	t *= Sock :: get_timeout_multiplier ( )	2085:3:40827:40862	5274440	0	True				
ANR	5274465	AssignmentExpression	t *= Sock :: get_timeout_multiplier ( )		5274440	0		*=			
ANR	5274466	Identifier	t		5274440	0					
ANR	5274467	CallExpression	Sock :: get_timeout_multiplier ( )		5274440	1					
ANR	5274468	Callee	Sock :: get_timeout_multiplier		5274440	0					
ANR	5274469	Identifier	Sock :: get_timeout_multiplier		5274440	0					
ANR	5274470	ArgumentList			5274440	1					
ANR	5274471	ExpressionStatement	m_deadline_time = time ( NULL ) + t	2087:2:40870:40902	5274440	1	True				
ANR	5274472	AssignmentExpression	m_deadline_time = time ( NULL ) + t		5274440	0		=			
ANR	5274473	Identifier	m_deadline_time		5274440	0					
ANR	5274474	AdditiveExpression	time ( NULL ) + t		5274440	1		+			
ANR	5274475	CallExpression	time ( NULL )		5274440	0					
ANR	5274476	Callee	time		5274440	0					
ANR	5274477	Identifier	time		5274440	0					
ANR	5274478	ArgumentList	NULL		5274440	1					
ANR	5274479	Argument	NULL		5274440	0					
ANR	5274480	Identifier	NULL		5274440	0					
ANR	5274481	Identifier	t		5274440	1					
ANR	5274482	ReturnType	void		5274440	1					
ANR	5274483	Identifier	Stream :: set_deadline_timeout		5274440	2					
ANR	5274484	ParameterList	int t		5274440	3					
ANR	5274485	Parameter	int t	2077:29:40703:40707	5274440	0	True				
ANR	5274486	ParameterType	int		5274440	0					
ANR	5274487	Identifier	t		5274440	1					
ANR	5274488	CFGEntryNode	ENTRY		5274440		True				
ANR	5274489	CFGExitNode	EXIT		5274440		True				
ANR	5274490	Symbol	NULL		5274440						
ANR	5274491	Symbol	t		5274440						
ANR	5274492	Symbol	Sock :: get_timeout_multiplier		5274440						
ANR	5274493	Symbol	m_deadline_time		5274440						
ANR	5274494	Symbol	time		5274440						
ANR	5274495	Function	Stream :: set_deadline	2091:0:40910:40970							
ANR	5274496	FunctionDef	Stream :: set_deadline (time_t t)		5274495	0					
ANR	5274497	CompoundStatement		2093:0:40946:40970	5274495	0					
ANR	5274498	ExpressionStatement	m_deadline_time = t	2094:1:40949:40968	5274495	0	True				
ANR	5274499	AssignmentExpression	m_deadline_time = t		5274495	0		=			
ANR	5274500	Identifier	m_deadline_time		5274495	0					
ANR	5274501	Identifier	t		5274495	1					
ANR	5274502	ReturnType	void		5274495	1					
ANR	5274503	Identifier	Stream :: set_deadline		5274495	2					
ANR	5274504	ParameterList	time_t t		5274495	3					
ANR	5274505	Parameter	time_t t	2092:21:40936:40943	5274495	0	True				
ANR	5274506	ParameterType	time_t		5274495	0					
ANR	5274507	Identifier	t		5274495	1					
ANR	5274508	CFGEntryNode	ENTRY		5274495		True				
ANR	5274509	CFGExitNode	EXIT		5274495		True				
ANR	5274510	Symbol	t		5274495						
ANR	5274511	Symbol	m_deadline_time		5274495						
ANR	5274512	Function	Stream :: get_deadline	2097:0:40973:41030							
ANR	5274513	FunctionDef	Stream :: get_deadline ()		5274512	0					
ANR	5274514	CompoundStatement		2099:0:41003:41030	5274512	0					
ANR	5274515	ReturnStatement	return m_deadline_time ;	2100:1:41006:41028	5274512	0	True				
ANR	5274516	Identifier	m_deadline_time		5274512	0					
ANR	5274517	ReturnType	time_t		5274512	1					
ANR	5274518	Identifier	Stream :: get_deadline		5274512	2					
ANR	5274519	ParameterList			5274512	3					
ANR	5274520	CFGEntryNode	ENTRY		5274512		True				
ANR	5274521	CFGExitNode	EXIT		5274512		True				
ANR	5274522	Symbol	m_deadline_time		5274512						
ANR	5274523	Function	Stream :: deadline_expired	2103:0:41033:41129							
ANR	5274524	FunctionDef	Stream :: deadline_expired ()		5274523	0					
ANR	5274525	CompoundStatement		2105:0:41065:41129	5274523	0					
ANR	5274526	ReturnStatement	return m_deadline_time != 0 && time ( NULL ) > m_deadline_time ;	2106:1:41068:41127	5274523	0	True				
ANR	5274527	AndExpression	m_deadline_time != 0 && time ( NULL ) > m_deadline_time		5274523	0		&&			
ANR	5274528	EqualityExpression	m_deadline_time != 0		5274523	0		!=			
ANR	5274529	Identifier	m_deadline_time		5274523	0					
ANR	5274530	PrimaryExpression	0		5274523	1					
ANR	5274531	RelationalExpression	time ( NULL ) > m_deadline_time		5274523	1		>			
ANR	5274532	CallExpression	time ( NULL )		5274523	0					
ANR	5274533	Callee	time		5274523	0					
ANR	5274534	Identifier	time		5274523	0					
ANR	5274535	ArgumentList	NULL		5274523	1					
ANR	5274536	Argument	NULL		5274523	0					
ANR	5274537	Identifier	NULL		5274523	0					
ANR	5274538	Identifier	m_deadline_time		5274523	1					
ANR	5274539	ReturnType	bool		5274523	1					
ANR	5274540	Identifier	Stream :: deadline_expired		5274523	2					
ANR	5274541	ParameterList			5274523	3					
ANR	5274542	CFGEntryNode	ENTRY		5274523		True				
ANR	5274543	CFGExitNode	EXIT		5274523		True				
ANR	5274544	Symbol	NULL		5274523						
ANR	5274545	Symbol	m_deadline_time		5274523						
ANR	5274546	Symbol	time		5274523						
ANR	5274547	Function	Stream :: prepare_crypto_for_secret_is_noop	2109:0:41132:41447							
ANR	5274548	FunctionDef	Stream :: prepare_crypto_for_secret_is_noop ()		5274547	0					
ANR	5274549	CompoundStatement		2111:0:41181:41447	5274547	0					
ANR	5274550	IdentifierDeclStatement	CondorVersionInfo const * peer_ver = get_peer_version ( ) ;	2112:1:41184:41238	5274547	0	True				
ANR	5274551	IdentifierDecl	* peer_ver = get_peer_version ( )		5274547	0					
ANR	5274552	IdentifierDeclType	CondorVersionInfo const *		5274547	0					
ANR	5274553	Identifier	peer_ver		5274547	1					
ANR	5274554	AssignmentExpression	* peer_ver = get_peer_version ( )		5274547	2		=			
ANR	5274555	Identifier	peer_ver		5274547	0					
ANR	5274556	CallExpression	get_peer_version ( )		5274547	1					
ANR	5274557	Callee	get_peer_version		5274547	0					
ANR	5274558	Identifier	get_peer_version		5274547	0					
ANR	5274559	ArgumentList			5274547	1					
ANR	5274560	IfStatement	"if ( ! peer_ver || peer_ver -> built_since_version ( 7 , 1 , 3 ) )"		5274547	1					
ANR	5274561	Condition	"! peer_ver || peer_ver -> built_since_version ( 7 , 1 , 3 )"	2113:5:41245:41293	5274547	0	True				
ANR	5274562	OrExpression	"! peer_ver || peer_ver -> built_since_version ( 7 , 1 , 3 )"		5274547	0		||			
ANR	5274563	UnaryOperationExpression	! peer_ver		5274547	0					
ANR	5274564	UnaryOperator	!		5274547	0					
ANR	5274565	Identifier	peer_ver		5274547	1					
ANR	5274566	CallExpression	"peer_ver -> built_since_version ( 7 , 1 , 3 )"		5274547	1					
ANR	5274567	Callee	peer_ver -> built_since_version		5274547	0					
ANR	5274568	PtrMemberAccess	peer_ver -> built_since_version		5274547	0					
ANR	5274569	Identifier	peer_ver		5274547	0					
ANR	5274570	Identifier	built_since_version		5274547	1					
ANR	5274571	ArgumentList	7		5274547	1					
ANR	5274572	Argument	7		5274547	0					
ANR	5274573	PrimaryExpression	7		5274547	0					
ANR	5274574	Argument	1		5274547	1					
ANR	5274575	PrimaryExpression	1		5274547	0					
ANR	5274576	Argument	3		5274547	2					
ANR	5274577	PrimaryExpression	3		5274547	0					
ANR	5274578	CompoundStatement		3:57:115:115	5274547	1					
ANR	5274579	IfStatement	if ( ! get_encryption ( ) )		5274547	0					
ANR	5274580	Condition	! get_encryption ( )	2114:6:41305:41321	5274547	0	True				
ANR	5274581	UnaryOperationExpression	! get_encryption ( )		5274547	0					
ANR	5274582	UnaryOperator	!		5274547	0					
ANR	5274583	CallExpression	get_encryption ( )		5274547	1					
ANR	5274584	Callee	get_encryption		5274547	0					
ANR	5274585	Identifier	get_encryption		5274547	0					
ANR	5274586	ArgumentList			5274547	1					
ANR	5274587	CompoundStatement		4:26:143:143	5274547	1					
ANR	5274588	IfStatement	if ( canEncrypt ( ) )		5274547	0					
ANR	5274589	Condition	canEncrypt ( )	2115:7:41334:41345	5274547	0	True				
ANR	5274590	CallExpression	canEncrypt ( )		5274547	0					
ANR	5274591	Callee	canEncrypt		5274547	0					
ANR	5274592	Identifier	canEncrypt		5274547	0					
ANR	5274593	ArgumentList			5274547	1					
ANR	5274594	CompoundStatement		5:22:167:167	5274547	1					
ANR	5274595	ReturnStatement	return false ;	2117:4:41407:41419	5274547	0	True				
ANR	5274596	Identifier	false		5274547	0					
ANR	5274597	ReturnStatement	return true ;	2121:1:41434:41445	5274547	2	True				
ANR	5274598	Identifier	true		5274547	0					
ANR	5274599	ReturnType	bool		5274547	1					
ANR	5274600	Identifier	Stream :: prepare_crypto_for_secret_is_noop		5274547	2					
ANR	5274601	ParameterList			5274547	3					
ANR	5274602	CFGEntryNode	ENTRY		5274547		True				
ANR	5274603	CFGExitNode	EXIT		5274547		True				
ANR	5274604	Symbol	peer_ver -> built_since_version		5274547						
ANR	5274605	Symbol	peer_ver		5274547						
ANR	5274606	Symbol	canEncrypt		5274547						
ANR	5274607	Symbol	false		5274547						
ANR	5274608	Symbol	true		5274547						
ANR	5274609	Symbol	* peer_ver		5274547						
ANR	5274610	Symbol	get_peer_version		5274547						
ANR	5274611	Symbol	get_encryption		5274547						
ANR	5274612	Function	Stream :: prepare_crypto_for_secret	2124:0:41450:41716							
ANR	5274613	FunctionDef	Stream :: prepare_crypto_for_secret ()		5274612	0					
ANR	5274614	CompoundStatement		2126:0:41491:41716	5274612	0					
ANR	5274615	ExpressionStatement	m_crypto_state_before_secret = true	2127:1:41494:41529	5274612	0	True				
ANR	5274616	AssignmentExpression	m_crypto_state_before_secret = true		5274612	0		=			
ANR	5274617	Identifier	m_crypto_state_before_secret		5274612	0					
ANR	5274618	Identifier	true		5274612	1					
ANR	5274619	IfStatement	if ( ! prepare_crypto_for_secret_is_noop ( ) )		5274612	1					
ANR	5274620	Condition	! prepare_crypto_for_secret_is_noop ( )	2128:5:41536:41571	5274612	0	True				
ANR	5274621	UnaryOperationExpression	! prepare_crypto_for_secret_is_noop ( )		5274612	0					
ANR	5274622	UnaryOperator	!		5274612	0					
ANR	5274623	CallExpression	prepare_crypto_for_secret_is_noop ( )		5274612	1					
ANR	5274624	Callee	prepare_crypto_for_secret_is_noop		5274612	0					
ANR	5274625	Identifier	prepare_crypto_for_secret_is_noop		5274612	0					
ANR	5274626	ArgumentList			5274612	1					
ANR	5274627	CompoundStatement		3:44:83:83	5274612	1					
ANR	5274628	ExpressionStatement	"dprintf ( D_NETWORK , ""encrypting secret\\n"" )"	2129:2:41579:41619	5274612	0	True				
ANR	5274629	CallExpression	"dprintf ( D_NETWORK , ""encrypting secret\\n"" )"		5274612	0					
ANR	5274630	Callee	dprintf		5274612	0					
ANR	5274631	Identifier	dprintf		5274612	0					
ANR	5274632	ArgumentList	D_NETWORK		5274612	1					
ANR	5274633	Argument	D_NETWORK		5274612	0					
ANR	5274634	Identifier	D_NETWORK		5274612	0					
ANR	5274635	Argument	"""encrypting secret\\n"""		5274612	1					
ANR	5274636	PrimaryExpression	"""encrypting secret\\n"""		5274612	0					
ANR	5274637	ExpressionStatement	m_crypto_state_before_secret = get_encryption ( )	2130:2:41623:41670	5274612	1	True				
ANR	5274638	AssignmentExpression	m_crypto_state_before_secret = get_encryption ( )		5274612	0		=			
ANR	5274639	Identifier	m_crypto_state_before_secret		5274612	0					
ANR	5274640	CallExpression	get_encryption ( )		5274612	1					
ANR	5274641	Callee	get_encryption		5274612	0					
ANR	5274642	Identifier	get_encryption		5274612	0					
ANR	5274643	ArgumentList			5274612	1					
ANR	5274644	ExpressionStatement	set_crypto_mode ( true )	2131:2:41690:41711	5274612	2	True				
ANR	5274645	CallExpression	set_crypto_mode ( true )		5274612	0					
ANR	5274646	Callee	set_crypto_mode		5274612	0					
ANR	5274647	Identifier	set_crypto_mode		5274612	0					
ANR	5274648	ArgumentList	true		5274612	1					
ANR	5274649	Argument	true		5274612	0					
ANR	5274650	Identifier	true		5274612	0					
ANR	5274651	ReturnType	void		5274612	1					
ANR	5274652	Identifier	Stream :: prepare_crypto_for_secret		5274612	2					
ANR	5274653	ParameterList			5274612	3					
ANR	5274654	CFGEntryNode	ENTRY		5274612		True				
ANR	5274655	CFGExitNode	EXIT		5274612		True				
ANR	5274656	Symbol	m_crypto_state_before_secret		5274612						
ANR	5274657	Symbol	prepare_crypto_for_secret_is_noop		5274612						
ANR	5274658	Symbol	true		5274612						
ANR	5274659	Symbol	D_NETWORK		5274612						
ANR	5274660	Symbol	get_encryption		5274612						
ANR	5274661	Function	Stream :: restore_crypto_after_secret	2135:0:41719:41854							
ANR	5274662	FunctionDef	Stream :: restore_crypto_after_secret ()		5274661	0					
ANR	5274663	CompoundStatement		2137:0:41762:41854	5274661	0					
ANR	5274664	IfStatement	if ( ! m_crypto_state_before_secret )		5274661	0					
ANR	5274665	Condition	! m_crypto_state_before_secret	2138:5:41769:41797	5274661	0	True				
ANR	5274666	UnaryOperationExpression	! m_crypto_state_before_secret		5274661	0					
ANR	5274667	UnaryOperator	!		5274661	0					
ANR	5274668	Identifier	m_crypto_state_before_secret		5274661	1					
ANR	5274669	CompoundStatement		2:37:38:38	5274661	1					
ANR	5274670	ExpressionStatement	set_crypto_mode ( false )	2139:2:41805:41827	5274661	0	True				
ANR	5274671	CallExpression	set_crypto_mode ( false )		5274661	0					
ANR	5274672	Callee	set_crypto_mode		5274661	0					
ANR	5274673	Identifier	set_crypto_mode		5274661	0					
ANR	5274674	ArgumentList	false		5274661	1					
ANR	5274675	Argument	false		5274661	0					
ANR	5274676	Identifier	false		5274661	0					
ANR	5274677	ReturnType	void		5274661	1					
ANR	5274678	Identifier	Stream :: restore_crypto_after_secret		5274661	2					
ANR	5274679	ParameterList			5274661	3					
ANR	5274680	CFGEntryNode	ENTRY		5274661		True				
ANR	5274681	CFGExitNode	EXIT		5274661		True				
ANR	5274682	Symbol	m_crypto_state_before_secret		5274661						
ANR	5274683	Symbol	false		5274661						
ANR	5274684	Function	Stream :: set_timeout_multiplier	2143:0:41857:41990							
ANR	5274685	FunctionDef	Stream :: set_timeout_multiplier (int secs)		5274684	0					
ANR	5274686	CompoundStatement		2145:0:41902:41990	5274684	0					
ANR	5274687	IdentifierDeclStatement	int old_val = timeout_multiplier ;	2146:3:41907:41939	5274684	0	True				
ANR	5274688	IdentifierDecl	old_val = timeout_multiplier		5274684	0					
ANR	5274689	IdentifierDeclType	int		5274684	0					
ANR	5274690	Identifier	old_val		5274684	1					
ANR	5274691	AssignmentExpression	old_val = timeout_multiplier		5274684	2		=			
ANR	5274692	Identifier	timeout_multiplier		5274684	0					
ANR	5274693	Identifier	timeout_multiplier		5274684	1					
ANR	5274694	ExpressionStatement	timeout_multiplier = secs	2147:3:41944:41969	5274684	1	True				
ANR	5274695	AssignmentExpression	timeout_multiplier = secs		5274684	0		=			
ANR	5274696	Identifier	timeout_multiplier		5274684	0					
ANR	5274697	Identifier	secs		5274684	1					
ANR	5274698	ReturnStatement	return old_val ;	2148:3:41974:41988	5274684	2	True				
ANR	5274699	Identifier	old_val		5274684	0					
ANR	5274700	ReturnType	int		5274684	1					
ANR	5274701	Identifier	Stream :: set_timeout_multiplier		5274684	2					
ANR	5274702	ParameterList	int secs		5274684	3					
ANR	5274703	Parameter	int secs	2144:31:41892:41899	5274684	0	True				
ANR	5274704	ParameterType	int		5274684	0					
ANR	5274705	Identifier	secs		5274684	1					
ANR	5274706	CFGEntryNode	ENTRY		5274684		True				
ANR	5274707	CFGExitNode	EXIT		5274684		True				
ANR	5274708	Symbol	old_val		5274684						
ANR	5274709	Symbol	secs		5274684						
ANR	5274710	Symbol	timeout_multiplier		5274684						
ANR	5274711	Function	Stream :: get_timeout_multiplier	2151:0:41993:42060							
ANR	5274712	FunctionDef	Stream :: get_timeout_multiplier ()		5274711	0					
ANR	5274713	CompoundStatement		2153:0:42030:42060	5274711	0					
ANR	5274714	ReturnStatement	return timeout_multiplier ;	2154:1:42033:42058	5274711	0	True				
ANR	5274715	Identifier	timeout_multiplier		5274711	0					
ANR	5274716	ReturnType	int		5274711	1					
ANR	5274717	Identifier	Stream :: get_timeout_multiplier		5274711	2					
ANR	5274718	ParameterList			5274711	3					
ANR	5274719	CFGEntryNode	ENTRY		5274711		True				
ANR	5274720	CFGExitNode	EXIT		5274711		True				
ANR	5274721	Symbol	timeout_multiplier		5274711						
