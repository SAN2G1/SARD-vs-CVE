command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4763496	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_forkwork.cpp								
ANR	4763497	Function	ForkWorker :: ForkWorker	31:0:1030:1105							
ANR	4763498	FunctionDef	ForkWorker :: ForkWorker ()		4763497	0					
ANR	4763499	CompoundStatement		32:0:1061:1105	4763497	0					
ANR	4763500	ExpressionStatement	valid = 0x5a5a	33:1:1064:1078	4763497	0	True				
ANR	4763501	AssignmentExpression	valid = 0x5a5a		4763497	0		=			
ANR	4763502	Identifier	valid		4763497	0					
ANR	4763503	PrimaryExpression	0x5a5a		4763497	1					
ANR	4763504	ExpressionStatement	pid = - 1	34:1:1081:1089	4763497	1	True				
ANR	4763505	AssignmentExpression	pid = - 1		4763497	0		=			
ANR	4763506	Identifier	pid		4763497	0					
ANR	4763507	UnaryOperationExpression	- 1		4763497	1					
ANR	4763508	UnaryOperator	-		4763497	0					
ANR	4763509	PrimaryExpression	1		4763497	1					
ANR	4763510	ExpressionStatement	parent = - 1	35:1:1092:1103	4763497	2	True				
ANR	4763511	AssignmentExpression	parent = - 1		4763497	0		=			
ANR	4763512	Identifier	parent		4763497	0					
ANR	4763513	UnaryOperationExpression	- 1		4763497	1					
ANR	4763514	UnaryOperator	-		4763497	0					
ANR	4763515	PrimaryExpression	1		4763497	1					
ANR	4763516	Identifier	ForkWorker :: ForkWorker		4763497	1					
ANR	4763517	ParameterList			4763497	2					
ANR	4763518	CFGEntryNode	ENTRY		4763497		True				
ANR	4763519	CFGExitNode	EXIT		4763497		True				
ANR	4763520	Symbol	valid		4763497						
ANR	4763521	Symbol	parent		4763497						
ANR	4763522	Symbol	pid		4763497						
ANR	4763523	Function	ForkWorker :: ~ForkWorker	39:0:1140:1272							
ANR	4763524	FunctionDef	ForkWorker :: ~ForkWorker ()		4763523	0					
ANR	4763525	CompoundStatement		40:0:1172:1272	4763523	0					
ANR	4763526	IfStatement	if ( valid != 0x5a5a )		4763523	0					
ANR	4763527	Condition	valid != 0x5a5a	41:6:1180:1194	4763523	0	True				
ANR	4763528	EqualityExpression	valid != 0x5a5a		4763523	0		!=			
ANR	4763529	Identifier	valid		4763523	0					
ANR	4763530	PrimaryExpression	0x5a5a		4763523	1					
ANR	4763531	CompoundStatement		2:24:25:25	4763523	1					
ANR	4763532	ExpressionStatement	"dprintf ( D_ALWAYS , ""ForkWorker: delete invalid!!\\n"" )"	42:2:1202:1255	4763523	0	True				
ANR	4763533	CallExpression	"dprintf ( D_ALWAYS , ""ForkWorker: delete invalid!!\\n"" )"		4763523	0					
ANR	4763534	Callee	dprintf		4763523	0					
ANR	4763535	Identifier	dprintf		4763523	0					
ANR	4763536	ArgumentList	D_ALWAYS		4763523	1					
ANR	4763537	Argument	D_ALWAYS		4763523	0					
ANR	4763538	Identifier	D_ALWAYS		4763523	0					
ANR	4763539	Argument	"""ForkWorker: delete invalid!!\\n"""		4763523	1					
ANR	4763540	PrimaryExpression	"""ForkWorker: delete invalid!!\\n"""		4763523	0					
ANR	4763541	ExpressionStatement	valid = 0	44:1:1261:1270	4763523	1	True				
ANR	4763542	AssignmentExpression	valid = 0		4763523	0		=			
ANR	4763543	Identifier	valid		4763523	0					
ANR	4763544	PrimaryExpression	0		4763523	1					
ANR	4763545	Identifier	ForkWorker :: ~ForkWorker		4763523	1					
ANR	4763546	ParameterList			4763523	2					
ANR	4763547	CFGEntryNode	ENTRY		4763523		True				
ANR	4763548	CFGExitNode	EXIT		4763523		True				
ANR	4763549	Symbol	valid		4763523						
ANR	4763550	Symbol	D_ALWAYS		4763523						
ANR	4763551	Function	ForkWorker :: Fork	48:0:1305:2080							
ANR	4763552	FunctionDef	ForkWorker :: Fork ()		4763551	0					
ANR	4763553	CompoundStatement		50:0:1341:2080	4763551	0					
ANR	4763554	IdentifierDeclStatement	ifndef WIN32 pid = fork ( ) ;	51:2:1345:1381	4763551	0	True				
ANR	4763555	IdentifierDecl	pid = fork ( )		4763551	0					
ANR	4763556	IdentifierDeclType	ifndef WIN32		4763551	0					
ANR	4763557	Identifier	pid		4763551	1					
ANR	4763558	AssignmentExpression	pid = fork ( )		4763551	2		=			
ANR	4763559	Identifier	pid		4763551	0					
ANR	4763560	CallExpression	fork ( )		4763551	1					
ANR	4763561	Callee	fork		4763551	0					
ANR	4763562	Identifier	fork		4763551	0					
ANR	4763563	ArgumentList			4763551	1					
ANR	4763564	IfStatement	if ( pid < 0 )		4763551	1					
ANR	4763565	Condition	pid < 0	55:6:1390:1396	4763551	0	True				
ANR	4763566	RelationalExpression	pid < 0		4763551	0		<			
ANR	4763567	Identifier	pid		4763551	0					
ANR	4763568	PrimaryExpression	0		4763551	1					
ANR	4763569	CompoundStatement		6:16:58:58	4763551	1					
ANR	4763570	ExpressionStatement	"dprintf ( D_ALWAYS , ""ForkWorker::Fork: Fork failed\\n"" )"	56:2:1404:1458	4763551	0	True				
ANR	4763571	CallExpression	"dprintf ( D_ALWAYS , ""ForkWorker::Fork: Fork failed\\n"" )"		4763551	0					
ANR	4763572	Callee	dprintf		4763551	0					
ANR	4763573	Identifier	dprintf		4763551	0					
ANR	4763574	ArgumentList	D_ALWAYS		4763551	1					
ANR	4763575	Argument	D_ALWAYS		4763551	0					
ANR	4763576	Identifier	D_ALWAYS		4763551	0					
ANR	4763577	Argument	"""ForkWorker::Fork: Fork failed\\n"""		4763551	1					
ANR	4763578	PrimaryExpression	"""ForkWorker::Fork: Fork failed\\n"""		4763551	0					
ANR	4763579	ReturnStatement	return FORK_FAILED ;	57:2:1462:1480	4763551	1	True				
ANR	4763580	Identifier	FORK_FAILED		4763551	0					
ANR	4763581	ElseStatement	else		4763551	0					
ANR	4763582	IfStatement	if ( 0 == pid )		4763551	0					
ANR	4763583	Condition	0 == pid	58:13:1495:1502	4763551	0	True				
ANR	4763584	EqualityExpression	0 == pid		4763551	0		==			
ANR	4763585	PrimaryExpression	0		4763551	0					
ANR	4763586	Identifier	pid		4763551	1					
ANR	4763587	CompoundStatement		9:24:164:164	4763551	1					
ANR	4763588	ExpressionStatement	daemonCore -> Forked_Child_Wants_Exit_By_Exec ( true )	64:2:1777:1828	4763551	0	True				
ANR	4763589	CallExpression	daemonCore -> Forked_Child_Wants_Exit_By_Exec ( true )		4763551	0					
ANR	4763590	Callee	daemonCore -> Forked_Child_Wants_Exit_By_Exec		4763551	0					
ANR	4763591	PtrMemberAccess	daemonCore -> Forked_Child_Wants_Exit_By_Exec		4763551	0					
ANR	4763592	Identifier	daemonCore		4763551	0					
ANR	4763593	Identifier	Forked_Child_Wants_Exit_By_Exec		4763551	1					
ANR	4763594	ArgumentList	true		4763551	1					
ANR	4763595	Argument	true		4763551	0					
ANR	4763596	Identifier	true		4763551	0					
ANR	4763597	ExpressionStatement	parent = getppid ( )	65:2:1832:1851	4763551	1	True				
ANR	4763598	AssignmentExpression	parent = getppid ( )		4763551	0		=			
ANR	4763599	Identifier	parent		4763551	0					
ANR	4763600	CallExpression	getppid ( )		4763551	1					
ANR	4763601	Callee	getppid		4763551	0					
ANR	4763602	Identifier	getppid		4763551	0					
ANR	4763603	ArgumentList			4763551	1					
ANR	4763604	ExpressionStatement	pid = - 1	66:2:1855:1863	4763551	2	True				
ANR	4763605	AssignmentExpression	pid = - 1		4763551	0		=			
ANR	4763606	Identifier	pid		4763551	0					
ANR	4763607	UnaryOperationExpression	- 1		4763551	1					
ANR	4763608	UnaryOperator	-		4763551	0					
ANR	4763609	PrimaryExpression	1		4763551	1					
ANR	4763610	ReturnStatement	return FORK_CHILD ;	67:2:1867:1884	4763551	3	True				
ANR	4763611	Identifier	FORK_CHILD		4763551	0					
ANR	4763612	ElseStatement	else		4763551	0					
ANR	4763613	CompoundStatement		19:8:552:552	4763551	0					
ANR	4763614	ExpressionStatement	parent = getpid ( )	70:2:1910:1928	4763551	0	True				
ANR	4763615	AssignmentExpression	parent = getpid ( )		4763551	0		=			
ANR	4763616	Identifier	parent		4763551	0					
ANR	4763617	CallExpression	getpid ( )		4763551	1					
ANR	4763618	Callee	getpid		4763551	0					
ANR	4763619	Identifier	getpid		4763551	0					
ANR	4763620	ArgumentList			4763551	1					
ANR	4763621	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ForkWorker::Fork: New child of %d = %d\\n"" , parent , pid )"	71:2:1932:2017	4763551	1	True				
ANR	4763622	CallExpression	"dprintf ( D_FULLDEBUG , ""ForkWorker::Fork: New child of %d = %d\\n"" , parent , pid )"		4763551	0					
ANR	4763623	Callee	dprintf		4763551	0					
ANR	4763624	Identifier	dprintf		4763551	0					
ANR	4763625	ArgumentList	D_FULLDEBUG		4763551	1					
ANR	4763626	Argument	D_FULLDEBUG		4763551	0					
ANR	4763627	Identifier	D_FULLDEBUG		4763551	0					
ANR	4763628	Argument	"""ForkWorker::Fork: New child of %d = %d\\n"""		4763551	1					
ANR	4763629	PrimaryExpression	"""ForkWorker::Fork: New child of %d = %d\\n"""		4763551	0					
ANR	4763630	Argument	parent		4763551	2					
ANR	4763631	Identifier	parent		4763551	0					
ANR	4763632	Argument	pid		4763551	3					
ANR	4763633	Identifier	pid		4763551	0					
ANR	4763634	ReturnStatement	return FORK_PARENT ;	73:2:2021:2039	4763551	2	True				
ANR	4763635	Identifier	FORK_PARENT		4763551	0					
ANR	4763636	ReturnType	ForkStatus		4763551	1					
ANR	4763637	Identifier	ForkWorker :: Fork		4763551	2					
ANR	4763638	ParameterList			4763551	3					
ANR	4763639	CFGEntryNode	ENTRY		4763551		True				
ANR	4763640	CFGExitNode	EXIT		4763551		True				
ANR	4763641	Symbol	parent		4763551						
ANR	4763642	Symbol	fork		4763551						
ANR	4763643	Symbol	getppid		4763551						
ANR	4763644	Symbol	FORK_PARENT		4763551						
ANR	4763645	Symbol	daemonCore		4763551						
ANR	4763646	Symbol	D_ALWAYS		4763551						
ANR	4763647	Symbol	true		4763551						
ANR	4763648	Symbol	pid		4763551						
ANR	4763649	Symbol	FORK_FAILED		4763551						
ANR	4763650	Symbol	FORK_CHILD		4763551						
ANR	4763651	Symbol	D_FULLDEBUG		4763551						
ANR	4763652	Symbol	getpid		4763551						
ANR	4763653	Function	ForkWork :: ForkWork	81:0:2108:2251							
ANR	4763654	FunctionDef	ForkWork :: ForkWork (int max_workers)		4763653	0					
ANR	4763655	CompoundStatement		82:0:2146:2251	4763653	0					
ANR	4763656	IdentifierDeclStatement	ifdef WIN32 max_workers = 0 ;	83:2:2150:2178	4763653	0	True				
ANR	4763657	IdentifierDecl	max_workers = 0		4763653	0					
ANR	4763658	IdentifierDeclType	ifdef WIN32		4763653	0					
ANR	4763659	Identifier	max_workers		4763653	1					
ANR	4763660	AssignmentExpression	max_workers = 0		4763653	2		=			
ANR	4763661	Identifier	max_workers		4763653	0					
ANR	4763662	PrimaryExpression	0		4763653	1					
ANR	4763663	IdentifierDeclStatement	endif maxWorkers = max_workers ;	85:2:2182:2213	4763653	1	True				
ANR	4763664	IdentifierDecl	maxWorkers = max_workers		4763653	0					
ANR	4763665	IdentifierDeclType	endif		4763653	0					
ANR	4763666	Identifier	maxWorkers		4763653	1					
ANR	4763667	AssignmentExpression	maxWorkers = max_workers		4763653	2		=			
ANR	4763668	Identifier	max_workers		4763653	0					
ANR	4763669	Identifier	max_workers		4763653	1					
ANR	4763670	ExpressionStatement	reaperId = - 1	87:1:2216:2229	4763653	2	True				
ANR	4763671	AssignmentExpression	reaperId = - 1		4763653	0		=			
ANR	4763672	Identifier	reaperId		4763653	0					
ANR	4763673	UnaryOperationExpression	- 1		4763653	1					
ANR	4763674	UnaryOperator	-		4763653	0					
ANR	4763675	PrimaryExpression	1		4763653	1					
ANR	4763676	ExpressionStatement	childExit = false	88:1:2232:2249	4763653	3	True				
ANR	4763677	AssignmentExpression	childExit = false		4763653	0		=			
ANR	4763678	Identifier	childExit		4763653	0					
ANR	4763679	Identifier	false		4763653	1					
ANR	4763680	Identifier	ForkWork :: ForkWork		4763653	1					
ANR	4763681	ParameterList	int max_workers		4763653	2					
ANR	4763682	Parameter	int max_workers	81:20:2128:2142	4763653	0	True				
ANR	4763683	ParameterType	int		4763653	0					
ANR	4763684	Identifier	max_workers		4763653	1					
ANR	4763685	CFGEntryNode	ENTRY		4763653		True				
ANR	4763686	CFGExitNode	EXIT		4763653		True				
ANR	4763687	Symbol	maxWorkers		4763653						
ANR	4763688	Symbol	reaperId		4763653						
ANR	4763689	Symbol	max_workers		4763653						
ANR	4763690	Symbol	childExit		4763653						
ANR	4763691	Symbol	false		4763653						
ANR	4763692	Function	ForkWork :: Initialize	92:0:2279:2596							
ANR	4763693	FunctionDef	ForkWork :: Initialize ()		4763692	0					
ANR	4763694	CompoundStatement		94:0:2312:2596	4763692	0					
ANR	4763695	IfStatement	if ( reaperId != - 1 )		4763692	0					
ANR	4763696	Condition	reaperId != - 1	95:5:2319:2332	4763692	0	True				
ANR	4763697	EqualityExpression	reaperId != - 1		4763692	0		!=			
ANR	4763698	Identifier	reaperId		4763692	0					
ANR	4763699	UnaryOperationExpression	- 1		4763692	1					
ANR	4763700	UnaryOperator	-		4763692	0					
ANR	4763701	PrimaryExpression	1		4763692	1					
ANR	4763702	CompoundStatement		2:22:23:23	4763692	1					
ANR	4763703	ReturnStatement	return 0 ;	97:2:2366:2374	4763692	0	True				
ANR	4763704	PrimaryExpression	0		4763692	0					
ANR	4763705	ExpressionStatement	"reaperId = daemonCore -> Register_Reaper ( ""ForkWork_Reaper"" , ( ReaperHandlercpp ) & ForkWork :: Reaper , ""ForkWork Reaper"" , this )"	101:1:2404:2535	4763692	1	True				
ANR	4763706	AssignmentExpression	"reaperId = daemonCore -> Register_Reaper ( ""ForkWork_Reaper"" , ( ReaperHandlercpp ) & ForkWork :: Reaper , ""ForkWork Reaper"" , this )"		4763692	0		=			
ANR	4763707	Identifier	reaperId		4763692	0					
ANR	4763708	CallExpression	"daemonCore -> Register_Reaper ( ""ForkWork_Reaper"" , ( ReaperHandlercpp ) & ForkWork :: Reaper , ""ForkWork Reaper"" , this )"		4763692	1					
ANR	4763709	Callee	daemonCore -> Register_Reaper		4763692	0					
ANR	4763710	PtrMemberAccess	daemonCore -> Register_Reaper		4763692	0					
ANR	4763711	Identifier	daemonCore		4763692	0					
ANR	4763712	Identifier	Register_Reaper		4763692	1					
ANR	4763713	ArgumentList	"""ForkWork_Reaper"""		4763692	1					
ANR	4763714	Argument	"""ForkWork_Reaper"""		4763692	0					
ANR	4763715	PrimaryExpression	"""ForkWork_Reaper"""		4763692	0					
ANR	4763716	Argument	( ReaperHandlercpp ) & ForkWork :: Reaper		4763692	1					
ANR	4763717	CastExpression	( ReaperHandlercpp ) & ForkWork :: Reaper		4763692	0					
ANR	4763718	CastTarget	ReaperHandlercpp		4763692	0					
ANR	4763719	UnaryOperationExpression	& ForkWork :: Reaper		4763692	1					
ANR	4763720	UnaryOperator	&		4763692	0					
ANR	4763721	Identifier	ForkWork :: Reaper		4763692	1					
ANR	4763722	Argument	"""ForkWork Reaper"""		4763692	2					
ANR	4763723	PrimaryExpression	"""ForkWork Reaper"""		4763692	0					
ANR	4763724	Argument	this		4763692	3					
ANR	4763725	Identifier	this		4763692	0					
ANR	4763726	ExpressionStatement	daemonCore -> Set_Default_Reaper ( reaperId )	106:4:2541:2583	4763692	2	True				
ANR	4763727	CallExpression	daemonCore -> Set_Default_Reaper ( reaperId )		4763692	0					
ANR	4763728	Callee	daemonCore -> Set_Default_Reaper		4763692	0					
ANR	4763729	PtrMemberAccess	daemonCore -> Set_Default_Reaper		4763692	0					
ANR	4763730	Identifier	daemonCore		4763692	0					
ANR	4763731	Identifier	Set_Default_Reaper		4763692	1					
ANR	4763732	ArgumentList	reaperId		4763692	1					
ANR	4763733	Argument	reaperId		4763692	0					
ANR	4763734	Identifier	reaperId		4763692	0					
ANR	4763735	ReturnStatement	return 0 ;	107:1:2586:2594	4763692	3	True				
ANR	4763736	PrimaryExpression	0		4763692	0					
ANR	4763737	ReturnType	int		4763692	1					
ANR	4763738	Identifier	ForkWork :: Initialize		4763692	2					
ANR	4763739	ParameterList			4763692	3					
ANR	4763740	CFGEntryNode	ENTRY		4763692		True				
ANR	4763741	CFGExitNode	EXIT		4763692		True				
ANR	4763742	Symbol	daemonCore -> Register_Reaper		4763692						
ANR	4763743	Symbol	reaperId		4763692						
ANR	4763744	Symbol	& ForkWork :: Reaper		4763692						
ANR	4763745	Symbol	* daemonCore		4763692						
ANR	4763746	Symbol	daemonCore		4763692						
ANR	4763747	Symbol	this		4763692						
ANR	4763748	Function	ForkWork :: ~ForkWork	111:0:2624:2686							
ANR	4763749	FunctionDef	ForkWork :: ~ForkWork ()		4763748	0					
ANR	4763750	CompoundStatement		112:0:2652:2686	4763748	0					
ANR	4763751	ExpressionStatement	DeleteAll ( )	114:1:2672:2684	4763748	0	True				
ANR	4763752	CallExpression	DeleteAll ( )		4763748	0					
ANR	4763753	Callee	DeleteAll		4763748	0					
ANR	4763754	Identifier	DeleteAll		4763748	0					
ANR	4763755	ArgumentList			4763748	1					
ANR	4763756	Identifier	ForkWork :: ~ForkWork		4763748	1					
ANR	4763757	ParameterList			4763748	2					
ANR	4763758	CFGEntryNode	ENTRY		4763748		True				
ANR	4763759	CFGExitNode	EXIT		4763748		True				
ANR	4763760	Function	ForkWork :: setMaxWorkers	118:0:2714:2993							
ANR	4763761	FunctionDef	ForkWork :: setMaxWorkers (int max_workers)		4763760	0					
ANR	4763762	CompoundStatement		120:0:2762:2993	4763760	0					
ANR	4763763	IdentifierDeclStatement	ifdef WIN32 max_workers = 0 ;	121:2:2766:2794	4763760	0	True				
ANR	4763764	IdentifierDecl	max_workers = 0		4763760	0					
ANR	4763765	IdentifierDeclType	ifdef WIN32		4763760	0					
ANR	4763766	Identifier	max_workers		4763760	1					
ANR	4763767	AssignmentExpression	max_workers = 0		4763760	2		=			
ANR	4763768	Identifier	max_workers		4763760	0					
ANR	4763769	PrimaryExpression	0		4763760	1					
ANR	4763770	IdentifierDeclStatement	endif maxWorkers = max_workers ;	123:2:2798:2829	4763760	1	True				
ANR	4763771	IdentifierDecl	maxWorkers = max_workers		4763760	0					
ANR	4763772	IdentifierDeclType	endif		4763760	0					
ANR	4763773	Identifier	maxWorkers		4763760	1					
ANR	4763774	AssignmentExpression	maxWorkers = max_workers		4763760	2		=			
ANR	4763775	Identifier	max_workers		4763760	0					
ANR	4763776	Identifier	max_workers		4763760	1					
ANR	4763777	IfStatement	if ( workerList . Number ( ) > maxWorkers )		4763760	2					
ANR	4763778	Condition	workerList . Number ( ) > maxWorkers	125:6:2837:2868	4763760	0	True				
ANR	4763779	RelationalExpression	workerList . Number ( ) > maxWorkers		4763760	0		>			
ANR	4763780	CallExpression	workerList . Number ( )		4763760	0					
ANR	4763781	Callee	workerList . Number		4763760	0					
ANR	4763782	MemberAccess	workerList . Number		4763760	0					
ANR	4763783	Identifier	workerList		4763760	0					
ANR	4763784	Identifier	Number		4763760	1					
ANR	4763785	ArgumentList			4763760	1					
ANR	4763786	Identifier	maxWorkers		4763760	1					
ANR	4763787	CompoundStatement		6:41:109:109	4763760	1					
ANR	4763788	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Warning: # forked workers (%d) exceeds new max (%d)\\n"" , workerList . Number ( ) , maxWorkers )"	126:2:2876:2988	4763760	0	True				
ANR	4763789	CallExpression	"dprintf ( D_FULLDEBUG , ""Warning: # forked workers (%d) exceeds new max (%d)\\n"" , workerList . Number ( ) , maxWorkers )"		4763760	0					
ANR	4763790	Callee	dprintf		4763760	0					
ANR	4763791	Identifier	dprintf		4763760	0					
ANR	4763792	ArgumentList	D_FULLDEBUG		4763760	1					
ANR	4763793	Argument	D_FULLDEBUG		4763760	0					
ANR	4763794	Identifier	D_FULLDEBUG		4763760	0					
ANR	4763795	Argument	"""Warning: # forked workers (%d) exceeds new max (%d)\\n"""		4763760	1					
ANR	4763796	PrimaryExpression	"""Warning: # forked workers (%d) exceeds new max (%d)\\n"""		4763760	0					
ANR	4763797	Argument	workerList . Number ( )		4763760	2					
ANR	4763798	CallExpression	workerList . Number ( )		4763760	0					
ANR	4763799	Callee	workerList . Number		4763760	0					
ANR	4763800	MemberAccess	workerList . Number		4763760	0					
ANR	4763801	Identifier	workerList		4763760	0					
ANR	4763802	Identifier	Number		4763760	1					
ANR	4763803	ArgumentList			4763760	1					
ANR	4763804	Argument	maxWorkers		4763760	3					
ANR	4763805	Identifier	maxWorkers		4763760	0					
ANR	4763806	ReturnType	void		4763760	1					
ANR	4763807	Identifier	ForkWork :: setMaxWorkers		4763760	2					
ANR	4763808	ParameterList	int max_workers		4763760	3					
ANR	4763809	Parameter	int max_workers	119:25:2744:2758	4763760	0	True				
ANR	4763810	ParameterType	int		4763760	0					
ANR	4763811	Identifier	max_workers		4763760	1					
ANR	4763812	CFGEntryNode	ENTRY		4763760		True				
ANR	4763813	CFGExitNode	EXIT		4763760		True				
ANR	4763814	Symbol	maxWorkers		4763760						
ANR	4763815	Symbol	max_workers		4763760						
ANR	4763816	Symbol	workerList		4763760						
ANR	4763817	Symbol	workerList . Number		4763760						
ANR	4763818	Symbol	D_FULLDEBUG		4763760						
ANR	4763819	Function	ForkWork :: DeleteAll	131:0:3033:3275							
ANR	4763820	FunctionDef	ForkWork :: DeleteAll ()		4763819	0					
ANR	4763821	CompoundStatement		133:0:3065:3275	4763819	0					
ANR	4763822	IdentifierDeclStatement	ForkWorker * worker ;	134:1:3068:3086	4763819	0	True				
ANR	4763823	IdentifierDecl	* worker		4763819	0					
ANR	4763824	IdentifierDeclType	ForkWorker *		4763819	0					
ANR	4763825	Identifier	worker		4763819	1					
ANR	4763826	ExpressionStatement	KillAll ( true )	137:1:3107:3122	4763819	1	True				
ANR	4763827	CallExpression	KillAll ( true )		4763819	0					
ANR	4763828	Callee	KillAll		4763819	0					
ANR	4763829	Identifier	KillAll		4763819	0					
ANR	4763830	ArgumentList	true		4763819	1					
ANR	4763831	Argument	true		4763819	0					
ANR	4763832	Identifier	true		4763819	0					
ANR	4763833	ExpressionStatement	workerList . Rewind ( )	140:1:3152:3172	4763819	2	True				
ANR	4763834	CallExpression	workerList . Rewind ( )		4763819	0					
ANR	4763835	Callee	workerList . Rewind		4763819	0					
ANR	4763836	MemberAccess	workerList . Rewind		4763819	0					
ANR	4763837	Identifier	workerList		4763819	0					
ANR	4763838	Identifier	Rewind		4763819	1					
ANR	4763839	ArgumentList			4763819	1					
ANR	4763840	WhileStatement	while ( workerList . Next ( worker ) )		4763819	3					
ANR	4763841	Condition	workerList . Next ( worker )	141:9:3183:3207	4763819	0	True				
ANR	4763842	CallExpression	workerList . Next ( worker )		4763819	0					
ANR	4763843	Callee	workerList . Next		4763819	0					
ANR	4763844	MemberAccess	workerList . Next		4763819	0					
ANR	4763845	Identifier	workerList		4763819	0					
ANR	4763846	Identifier	Next		4763819	1					
ANR	4763847	ArgumentList	worker		4763819	1					
ANR	4763848	Argument	worker		4763819	0					
ANR	4763849	Identifier	worker		4763819	0					
ANR	4763850	CompoundStatement		9:37:145:145	4763819	1					
ANR	4763851	ExpressionStatement	workerList . DeleteCurrent ( )	142:2:3215:3242	4763819	0	True				
ANR	4763852	CallExpression	workerList . DeleteCurrent ( )		4763819	0					
ANR	4763853	Callee	workerList . DeleteCurrent		4763819	0					
ANR	4763854	MemberAccess	workerList . DeleteCurrent		4763819	0					
ANR	4763855	Identifier	workerList		4763819	0					
ANR	4763856	Identifier	DeleteCurrent		4763819	1					
ANR	4763857	ArgumentList			4763819	1					
ANR	4763858	Statement	delete	143:2:3246:3251	4763819	1	True				
ANR	4763859	ExpressionStatement	worker	143:9:3253:3259	4763819	2	True				
ANR	4763860	Identifier	worker		4763819	0					
ANR	4763861	ReturnStatement	return 0 ;	145:1:3265:3273	4763819	4	True				
ANR	4763862	PrimaryExpression	0		4763819	0					
ANR	4763863	ReturnType	int		4763819	1					
ANR	4763864	Identifier	ForkWork :: DeleteAll		4763819	2					
ANR	4763865	ParameterList			4763819	3					
ANR	4763866	CFGEntryNode	ENTRY		4763819		True				
ANR	4763867	CFGExitNode	EXIT		4763819		True				
ANR	4763868	Symbol	true		4763819						
ANR	4763869	Symbol	workerList		4763819						
ANR	4763870	Symbol	worker		4763819						
ANR	4763871	Symbol	workerList . Next		4763819						
ANR	4763872	Function	ForkWork :: KillAll	149:0:3303:3902							
ANR	4763873	FunctionDef	ForkWork :: KillAll (bool force)		4763872	0					
ANR	4763874	CompoundStatement		151:0:3339:3902	4763872	0					
ANR	4763875	IdentifierDeclStatement	ForkWorker * worker ;	152:1:3342:3360	4763872	0	True				
ANR	4763876	IdentifierDecl	* worker		4763872	0					
ANR	4763877	IdentifierDeclType	ForkWorker *		4763872	0					
ANR	4763878	Identifier	worker		4763872	1					
ANR	4763879	IdentifierDeclStatement	int mypid = getpid ( ) ;	153:1:3363:3384	4763872	1	True				
ANR	4763880	IdentifierDecl	mypid = getpid ( )		4763872	0					
ANR	4763881	IdentifierDeclType	int		4763872	0					
ANR	4763882	Identifier	mypid		4763872	1					
ANR	4763883	AssignmentExpression	mypid = getpid ( )		4763872	2		=			
ANR	4763884	Identifier	mypid		4763872	0					
ANR	4763885	CallExpression	getpid ( )		4763872	1					
ANR	4763886	Callee	getpid		4763872	0					
ANR	4763887	Identifier	getpid		4763872	0					
ANR	4763888	ArgumentList			4763872	1					
ANR	4763889	IdentifierDeclStatement	int num_killed = 0 ;	154:1:3387:3406	4763872	2	True				
ANR	4763890	IdentifierDecl	num_killed = 0		4763872	0					
ANR	4763891	IdentifierDeclType	int		4763872	0					
ANR	4763892	Identifier	num_killed		4763872	1					
ANR	4763893	AssignmentExpression	num_killed = 0		4763872	2		=			
ANR	4763894	Identifier	num_killed		4763872	0					
ANR	4763895	PrimaryExpression	0		4763872	1					
ANR	4763896	ExpressionStatement	workerList . Rewind ( )	157:1:3436:3456	4763872	3	True				
ANR	4763897	CallExpression	workerList . Rewind ( )		4763872	0					
ANR	4763898	Callee	workerList . Rewind		4763872	0					
ANR	4763899	MemberAccess	workerList . Rewind		4763872	0					
ANR	4763900	Identifier	workerList		4763872	0					
ANR	4763901	Identifier	Rewind		4763872	1					
ANR	4763902	ArgumentList			4763872	1					
ANR	4763903	WhileStatement	while ( workerList . Next ( worker ) )		4763872	4					
ANR	4763904	Condition	workerList . Next ( worker )	158:9:3467:3491	4763872	0	True				
ANR	4763905	CallExpression	workerList . Next ( worker )		4763872	0					
ANR	4763906	Callee	workerList . Next		4763872	0					
ANR	4763907	MemberAccess	workerList . Next		4763872	0					
ANR	4763908	Identifier	workerList		4763872	0					
ANR	4763909	Identifier	Next		4763872	1					
ANR	4763910	ArgumentList	worker		4763872	1					
ANR	4763911	Argument	worker		4763872	0					
ANR	4763912	Identifier	worker		4763872	0					
ANR	4763913	CompoundStatement		8:37:155:155	4763872	1					
ANR	4763914	IfStatement	if ( mypid == worker -> getParent ( ) )		4763872	0					
ANR	4763915	Condition	mypid == worker -> getParent ( )	160:7:3536:3563	4763872	0	True				
ANR	4763916	EqualityExpression	mypid == worker -> getParent ( )		4763872	0		==			
ANR	4763917	Identifier	mypid		4763872	0					
ANR	4763918	CallExpression	worker -> getParent ( )		4763872	1					
ANR	4763919	Callee	worker -> getParent		4763872	0					
ANR	4763920	PtrMemberAccess	worker -> getParent		4763872	0					
ANR	4763921	Identifier	worker		4763872	0					
ANR	4763922	Identifier	getParent		4763872	1					
ANR	4763923	ArgumentList			4763872	1					
ANR	4763924	CompoundStatement		10:38:227:227	4763872	1					
ANR	4763925	ExpressionStatement	num_killed ++	161:3:3572:3584	4763872	0	True				
ANR	4763926	PostIncDecOperationExpression	num_killed ++		4763872	0					
ANR	4763927	Identifier	num_killed		4763872	0					
ANR	4763928	IncDec	++		4763872	1					
ANR	4763929	IfStatement	if ( force )		4763872	1					
ANR	4763930	Condition	force	162:8:3594:3598	4763872	0	True				
ANR	4763931	Identifier	force		4763872	0					
ANR	4763932	CompoundStatement		12:16:262:262	4763872	1					
ANR	4763933	ExpressionStatement	"daemonCore -> Send_Signal ( worker -> getPid ( ) , SIGKILL )"	163:4:3608:3660	4763872	0	True				
ANR	4763934	CallExpression	"daemonCore -> Send_Signal ( worker -> getPid ( ) , SIGKILL )"		4763872	0					
ANR	4763935	Callee	daemonCore -> Send_Signal		4763872	0					
ANR	4763936	PtrMemberAccess	daemonCore -> Send_Signal		4763872	0					
ANR	4763937	Identifier	daemonCore		4763872	0					
ANR	4763938	Identifier	Send_Signal		4763872	1					
ANR	4763939	ArgumentList	worker -> getPid ( )		4763872	1					
ANR	4763940	Argument	worker -> getPid ( )		4763872	0					
ANR	4763941	CallExpression	worker -> getPid ( )		4763872	0					
ANR	4763942	Callee	worker -> getPid		4763872	0					
ANR	4763943	PtrMemberAccess	worker -> getPid		4763872	0					
ANR	4763944	Identifier	worker		4763872	0					
ANR	4763945	Identifier	getPid		4763872	1					
ANR	4763946	ArgumentList			4763872	1					
ANR	4763947	Argument	SIGKILL		4763872	1					
ANR	4763948	Identifier	SIGKILL		4763872	0					
ANR	4763949	ElseStatement	else		4763872	0					
ANR	4763950	CompoundStatement		14:10:332:332	4763872	0					
ANR	4763951	ExpressionStatement	"daemonCore -> Send_Signal ( worker -> getPid ( ) , SIGTERM )"	165:4:3678:3730	4763872	0	True				
ANR	4763952	CallExpression	"daemonCore -> Send_Signal ( worker -> getPid ( ) , SIGTERM )"		4763872	0					
ANR	4763953	Callee	daemonCore -> Send_Signal		4763872	0					
ANR	4763954	PtrMemberAccess	daemonCore -> Send_Signal		4763872	0					
ANR	4763955	Identifier	daemonCore		4763872	0					
ANR	4763956	Identifier	Send_Signal		4763872	1					
ANR	4763957	ArgumentList	worker -> getPid ( )		4763872	1					
ANR	4763958	Argument	worker -> getPid ( )		4763872	0					
ANR	4763959	CallExpression	worker -> getPid ( )		4763872	0					
ANR	4763960	Callee	worker -> getPid		4763872	0					
ANR	4763961	PtrMemberAccess	worker -> getPid		4763872	0					
ANR	4763962	Identifier	worker		4763872	0					
ANR	4763963	Identifier	getPid		4763872	1					
ANR	4763964	ArgumentList			4763872	1					
ANR	4763965	Argument	SIGTERM		4763872	1					
ANR	4763966	Identifier	SIGTERM		4763872	0					
ANR	4763967	IfStatement	if ( num_killed )		4763872	5					
ANR	4763968	Condition	num_killed	171:6:3784:3793	4763872	0	True				
ANR	4763969	Identifier	num_killed		4763872	0					
ANR	4763970	CompoundStatement		21:19:457:457	4763872	1					
ANR	4763971	ExpressionStatement	"dprintf ( D_ALWAYS , ""ForkWork %d: Killed %d jobs\\n"" , mypid , workerList . Number ( ) )"	172:2:3801:3886	4763872	0	True				
ANR	4763972	CallExpression	"dprintf ( D_ALWAYS , ""ForkWork %d: Killed %d jobs\\n"" , mypid , workerList . Number ( ) )"		4763872	0					
ANR	4763973	Callee	dprintf		4763872	0					
ANR	4763974	Identifier	dprintf		4763872	0					
ANR	4763975	ArgumentList	D_ALWAYS		4763872	1					
ANR	4763976	Argument	D_ALWAYS		4763872	0					
ANR	4763977	Identifier	D_ALWAYS		4763872	0					
ANR	4763978	Argument	"""ForkWork %d: Killed %d jobs\\n"""		4763872	1					
ANR	4763979	PrimaryExpression	"""ForkWork %d: Killed %d jobs\\n"""		4763872	0					
ANR	4763980	Argument	mypid		4763872	2					
ANR	4763981	Identifier	mypid		4763872	0					
ANR	4763982	Argument	workerList . Number ( )		4763872	3					
ANR	4763983	CallExpression	workerList . Number ( )		4763872	0					
ANR	4763984	Callee	workerList . Number		4763872	0					
ANR	4763985	MemberAccess	workerList . Number		4763872	0					
ANR	4763986	Identifier	workerList		4763872	0					
ANR	4763987	Identifier	Number		4763872	1					
ANR	4763988	ArgumentList			4763872	1					
ANR	4763989	ReturnStatement	return 0 ;	175:1:3892:3900	4763872	6	True				
ANR	4763990	PrimaryExpression	0		4763872	0					
ANR	4763991	ReturnType	int		4763872	1					
ANR	4763992	Identifier	ForkWork :: KillAll		4763872	2					
ANR	4763993	ParameterList	bool force		4763872	3					
ANR	4763994	Parameter	bool force	150:19:3326:3335	4763872	0	True				
ANR	4763995	ParameterType	bool		4763872	0					
ANR	4763996	Identifier	force		4763872	1					
ANR	4763997	CFGEntryNode	ENTRY		4763872		True				
ANR	4763998	CFGExitNode	EXIT		4763872		True				
ANR	4763999	Symbol	num_killed		4763872						
ANR	4764000	Symbol	mypid		4763872						
ANR	4764001	Symbol	worker -> getParent		4763872						
ANR	4764002	Symbol	workerList		4763872						
ANR	4764003	Symbol	D_ALWAYS		4763872						
ANR	4764004	Symbol	workerList . Number		4763872						
ANR	4764005	Symbol	workerList . Next		4763872						
ANR	4764006	Symbol	SIGKILL		4763872						
ANR	4764007	Symbol	* worker		4763872						
ANR	4764008	Symbol	worker -> getPid		4763872						
ANR	4764009	Symbol	daemonCore		4763872						
ANR	4764010	Symbol	force		4763872						
ANR	4764011	Symbol	SIGTERM		4763872						
ANR	4764012	Symbol	worker		4763872						
ANR	4764013	Symbol	getpid		4763872						
ANR	4764014	Function	ForkWork :: NewJob	179:0:3939:4537							
ANR	4764015	FunctionDef	ForkWork :: NewJob ()		4764014	0					
ANR	4764016	CompoundStatement		181:0:3975:4537	4764014	0					
ANR	4764017	IfStatement	if ( workerList . Number ( ) >= maxWorkers )		4764014	0					
ANR	4764018	Condition	workerList . Number ( ) >= maxWorkers	183:6:4003:4035	4764014	0	True				
ANR	4764019	RelationalExpression	workerList . Number ( ) >= maxWorkers		4764014	0		>=			
ANR	4764020	CallExpression	workerList . Number ( )		4764014	0					
ANR	4764021	Callee	workerList . Number		4764014	0					
ANR	4764022	MemberAccess	workerList . Number		4764014	0					
ANR	4764023	Identifier	workerList		4764014	0					
ANR	4764024	Identifier	Number		4764014	1					
ANR	4764025	ArgumentList			4764014	1					
ANR	4764026	Identifier	maxWorkers		4764014	1					
ANR	4764027	CompoundStatement		3:42:63:63	4764014	1					
ANR	4764028	IfStatement	if ( maxWorkers )		4764014	0					
ANR	4764029	Condition	maxWorkers	184:7:4048:4057	4764014	0	True				
ANR	4764030	Identifier	maxWorkers		4764014	0					
ANR	4764031	CompoundStatement		4:20:85:85	4764014	1					
ANR	4764032	ExpressionStatement	"dprintf ( D_ALWAYS , ""ForkWork: not forking because reached max workers %d\\n"" , maxWorkers )"	185:3:4066:4155	4764014	0	True				
ANR	4764033	CallExpression	"dprintf ( D_ALWAYS , ""ForkWork: not forking because reached max workers %d\\n"" , maxWorkers )"		4764014	0					
ANR	4764034	Callee	dprintf		4764014	0					
ANR	4764035	Identifier	dprintf		4764014	0					
ANR	4764036	ArgumentList	D_ALWAYS		4764014	1					
ANR	4764037	Argument	D_ALWAYS		4764014	0					
ANR	4764038	Identifier	D_ALWAYS		4764014	0					
ANR	4764039	Argument	"""ForkWork: not forking because reached max workers %d\\n"""		4764014	1					
ANR	4764040	PrimaryExpression	"""ForkWork: not forking because reached max workers %d\\n"""		4764014	0					
ANR	4764041	Argument	maxWorkers		4764014	2					
ANR	4764042	Identifier	maxWorkers		4764014	0					
ANR	4764043	ReturnStatement	return FORK_BUSY ;	187:2:4163:4179	4764014	1	True				
ANR	4764044	Identifier	FORK_BUSY		4764014	0					
ANR	4764045	IdentifierDeclStatement	ForkWorker * worker = new ForkWorker ( ) ;	191:1:4209:4247	4764014	1	True				
ANR	4764046	IdentifierDecl	* worker = new ForkWorker ( )		4764014	0					
ANR	4764047	IdentifierDeclType	ForkWorker *		4764014	0					
ANR	4764048	Identifier	worker		4764014	1					
ANR	4764049	AssignmentExpression	* worker = new ForkWorker ( )		4764014	2		=			
ANR	4764050	Identifier	worker		4764014	0					
ANR	4764051	UnaryExpression	new ForkWorker ( )		4764014	1					
ANR	4764052	IdentifierDeclStatement	ForkStatus status = worker -> Fork ( ) ;	192:1:4250:4285	4764014	2	True				
ANR	4764053	IdentifierDecl	status = worker -> Fork ( )		4764014	0					
ANR	4764054	IdentifierDeclType	ForkStatus		4764014	0					
ANR	4764055	Identifier	status		4764014	1					
ANR	4764056	AssignmentExpression	status = worker -> Fork ( )		4764014	2		=			
ANR	4764057	Identifier	status		4764014	0					
ANR	4764058	CallExpression	worker -> Fork ( )		4764014	1					
ANR	4764059	Callee	worker -> Fork		4764014	0					
ANR	4764060	PtrMemberAccess	worker -> Fork		4764014	0					
ANR	4764061	Identifier	worker		4764014	0					
ANR	4764062	Identifier	Fork		4764014	1					
ANR	4764063	ArgumentList			4764014	1					
ANR	4764064	IfStatement	if ( FORK_PARENT == status )		4764014	3					
ANR	4764065	Condition	FORK_PARENT == status	195:6:4329:4349	4764014	0	True				
ANR	4764066	EqualityExpression	FORK_PARENT == status		4764014	0		==			
ANR	4764067	Identifier	FORK_PARENT		4764014	0					
ANR	4764068	Identifier	status		4764014	1					
ANR	4764069	CompoundStatement		15:30:377:377	4764014	1					
ANR	4764070	ExpressionStatement	workerList . Append ( worker )	196:2:4357:4384	4764014	0	True				
ANR	4764071	CallExpression	workerList . Append ( worker )		4764014	0					
ANR	4764072	Callee	workerList . Append		4764014	0					
ANR	4764073	MemberAccess	workerList . Append		4764014	0					
ANR	4764074	Identifier	workerList		4764014	0					
ANR	4764075	Identifier	Append		4764014	1					
ANR	4764076	ArgumentList	worker		4764014	1					
ANR	4764077	Argument	worker		4764014	0					
ANR	4764078	Identifier	worker		4764014	0					
ANR	4764079	ReturnStatement	return FORK_PARENT ;	197:2:4388:4406	4764014	1	True				
ANR	4764080	Identifier	FORK_PARENT		4764014	0					
ANR	4764081	ElseStatement	else		4764014	0					
ANR	4764082	IfStatement	if ( FORK_FAILED == status )		4764014	0					
ANR	4764083	Condition	FORK_FAILED == status	198:13:4421:4441	4764014	0	True				
ANR	4764084	EqualityExpression	FORK_FAILED == status		4764014	0		==			
ANR	4764085	Identifier	FORK_FAILED		4764014	0					
ANR	4764086	Identifier	status		4764014	1					
ANR	4764087	CompoundStatement		18:37:469:469	4764014	1					
ANR	4764088	Statement	delete	199:2:4449:4454	4764014	0	True				
ANR	4764089	ExpressionStatement	worker	199:9:4456:4462	4764014	1	True				
ANR	4764090	Identifier	worker		4764014	0					
ANR	4764091	ReturnStatement	return FORK_FAILED ;	200:2:4466:4484	4764014	2	True				
ANR	4764092	Identifier	FORK_FAILED		4764014	0					
ANR	4764093	ElseStatement	else		4764014	0					
ANR	4764094	CompoundStatement		21:8:518:518	4764014	0					
ANR	4764095	Statement	delete	202:2:4498:4503	4764014	0	True				
ANR	4764096	ExpressionStatement	worker	202:9:4505:4511	4764014	1	True				
ANR	4764097	Identifier	worker		4764014	0					
ANR	4764098	ReturnStatement	return FORK_CHILD ;	203:2:4515:4532	4764014	2	True				
ANR	4764099	Identifier	FORK_CHILD		4764014	0					
ANR	4764100	ReturnType	ForkStatus		4764014	1					
ANR	4764101	Identifier	ForkWork :: NewJob		4764014	2					
ANR	4764102	ParameterList			4764014	3					
ANR	4764103	CFGEntryNode	ENTRY		4764014		True				
ANR	4764104	CFGExitNode	EXIT		4764014		True				
ANR	4764105	Symbol	maxWorkers		4764014						
ANR	4764106	Symbol	FORK_BUSY		4764014						
ANR	4764107	Symbol	worker -> Fork		4764014						
ANR	4764108	Symbol	FORK_PARENT		4764014						
ANR	4764109	Symbol	workerList		4764014						
ANR	4764110	Symbol	D_ALWAYS		4764014						
ANR	4764111	Symbol	workerList . Number		4764014						
ANR	4764112	Symbol	FORK_FAILED		4764014						
ANR	4764113	Symbol	FORK_CHILD		4764014						
ANR	4764114	Symbol	worker		4764014						
ANR	4764115	Symbol	status		4764014						
ANR	4764116	Symbol	* worker		4764014						
ANR	4764117	Function	ForkWork :: WorkerDone	208:0:4564:4729							
ANR	4764118	FunctionDef	ForkWork :: WorkerDone (int exit_status)		4764117	0					
ANR	4764119	CompoundStatement		210:0:4609:4729	4764117	0					
ANR	4764120	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ForkWork: Child %d done, status %d\\n"" , getpid ( ) , exit_status )"	211:1:4612:4705	4764117	0	True				
ANR	4764121	CallExpression	"dprintf ( D_FULLDEBUG , ""ForkWork: Child %d done, status %d\\n"" , getpid ( ) , exit_status )"		4764117	0					
ANR	4764122	Callee	dprintf		4764117	0					
ANR	4764123	Identifier	dprintf		4764117	0					
ANR	4764124	ArgumentList	D_FULLDEBUG		4764117	1					
ANR	4764125	Argument	D_FULLDEBUG		4764117	0					
ANR	4764126	Identifier	D_FULLDEBUG		4764117	0					
ANR	4764127	Argument	"""ForkWork: Child %d done, status %d\\n"""		4764117	1					
ANR	4764128	PrimaryExpression	"""ForkWork: Child %d done, status %d\\n"""		4764117	0					
ANR	4764129	Argument	getpid ( )		4764117	2					
ANR	4764130	CallExpression	getpid ( )		4764117	0					
ANR	4764131	Callee	getpid		4764117	0					
ANR	4764132	Identifier	getpid		4764117	0					
ANR	4764133	ArgumentList			4764117	1					
ANR	4764134	Argument	exit_status		4764117	3					
ANR	4764135	Identifier	exit_status		4764117	0					
ANR	4764136	ExpressionStatement	exit ( exit_status )	214:1:4708:4727	4764117	1	True				
ANR	4764137	CallExpression	exit ( exit_status )		4764117	0					
ANR	4764138	Callee	exit		4764117	0					
ANR	4764139	Identifier	exit		4764117	0					
ANR	4764140	ArgumentList	exit_status		4764117	1					
ANR	4764141	Argument	exit_status		4764117	0					
ANR	4764142	Identifier	exit_status		4764117	0					
ANR	4764143	ReturnType	void		4764117	1					
ANR	4764144	Identifier	ForkWork :: WorkerDone		4764117	2					
ANR	4764145	ParameterList	int exit_status		4764117	3					
ANR	4764146	Parameter	int exit_status	209:22:4591:4605	4764117	0	True				
ANR	4764147	ParameterType	int		4764117	0					
ANR	4764148	Identifier	exit_status		4764117	1					
ANR	4764149	CFGEntryNode	ENTRY		4764117		True				
ANR	4764150	CFGExitNode	EXIT		4764117		True				
ANR	4764151	Symbol	D_FULLDEBUG		4764117						
ANR	4764152	Symbol	exit_status		4764117						
ANR	4764153	Symbol	getpid		4764117						
ANR	4764154	DeclStmt									
ANR	4764155	Decl							ForkWorker	ForkWorker *	worker
