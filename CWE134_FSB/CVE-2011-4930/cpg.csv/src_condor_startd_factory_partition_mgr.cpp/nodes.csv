command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3966535	File	data/converged/CVE-2011-4930_htcondor/src_condor_startd_factory_partition_mgr.cpp								
ANR	3966536	Function	PartitionManager :: PartitionManager	32:0:1113:1190							
ANR	3966537	FunctionDef	PartitionManager :: PartitionManager ()		3966536	0					
ANR	3966538	CompoundStatement		34:0:1188:1190	3966536	0					
ANR	3966539	Identifier	PartitionManager :: PartitionManager		3966536	1					
ANR	3966540	ParameterList			3966536	2					
ANR	3966541	CFGEntryNode	ENTRY		3966536		True				
ANR	3966542	CFGExitNode	EXIT		3966536		True				
ANR	3966543	Function	PartitionManager :: ~PartitionManager	37:0:1193:1385							
ANR	3966544	FunctionDef	PartitionManager :: ~PartitionManager ()		3966543	0					
ANR	3966545	CompoundStatement		38:0:1231:1385	3966543	0					
ANR	3966546	IdentifierDeclStatement	int idx ;	39:1:1234:1241	3966543	0	True				
ANR	3966547	IdentifierDecl	idx		3966543	0					
ANR	3966548	IdentifierDeclType	int		3966543	0					
ANR	3966549	Identifier	idx		3966543	1					
ANR	3966550	IdentifierDeclStatement	ClassAd * ad = NULL ;	40:1:1244:1262	3966543	1	True				
ANR	3966551	IdentifierDecl	* ad = NULL		3966543	0					
ANR	3966552	IdentifierDeclType	ClassAd *		3966543	0					
ANR	3966553	Identifier	ad		3966543	1					
ANR	3966554	AssignmentExpression	* ad = NULL		3966543	2		=			
ANR	3966555	Identifier	NULL		3966543	0					
ANR	3966556	Identifier	NULL		3966543	1					
ANR	3966557	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		3966543	2					
ANR	3966558	ForInit	idx = 0 ;	42:6:1271:1278	3966543	0	True				
ANR	3966559	AssignmentExpression	idx = 0		3966543	0		=			
ANR	3966560	Identifier	idx		3966543	0					
ANR	3966561	PrimaryExpression	0		3966543	1					
ANR	3966562	Condition	idx < m_parts . length ( )	42:15:1280:1301	3966543	1	True				
ANR	3966563	RelationalExpression	idx < m_parts . length ( )		3966543	0		<			
ANR	3966564	Identifier	idx		3966543	0					
ANR	3966565	CallExpression	m_parts . length ( )		3966543	1					
ANR	3966566	Callee	m_parts . length		3966543	0					
ANR	3966567	MemberAccess	m_parts . length		3966543	0					
ANR	3966568	Identifier	m_parts		3966543	0					
ANR	3966569	Identifier	length		3966543	1					
ANR	3966570	ArgumentList			3966543	1					
ANR	3966571	PostIncDecOperationExpression	idx ++	42:39:1304:1308	3966543	2	True				
ANR	3966572	Identifier	idx		3966543	0					
ANR	3966573	IncDec	++		3966543	1					
ANR	3966574	CompoundStatement		6:1:80:80	3966543	3					
ANR	3966575	ExpressionStatement	ad = m_parts [ idx ] . detach ( )	44:2:1316:1342	3966543	0	True				
ANR	3966576	AssignmentExpression	ad = m_parts [ idx ] . detach ( )		3966543	0		=			
ANR	3966577	Identifier	ad		3966543	0					
ANR	3966578	CallExpression	m_parts [ idx ] . detach ( )		3966543	1					
ANR	3966579	Callee	m_parts [ idx ] . detach		3966543	0					
ANR	3966580	MemberAccess	m_parts [ idx ] . detach		3966543	0					
ANR	3966581	ArrayIndexing	m_parts [ idx ]		3966543	0					
ANR	3966582	Identifier	m_parts		3966543	0					
ANR	3966583	Identifier	idx		3966543	1					
ANR	3966584	Identifier	detach		3966543	1					
ANR	3966585	ArgumentList			3966543	1					
ANR	3966586	IfStatement	if ( ad != NULL )		3966543	1					
ANR	3966587	Condition	ad != NULL	45:6:1350:1359	3966543	0	True				
ANR	3966588	EqualityExpression	ad != NULL		3966543	0		!=			
ANR	3966589	Identifier	ad		3966543	0					
ANR	3966590	Identifier	NULL		3966543	1					
ANR	3966591	CompoundStatement		8:18:130:130	3966543	1					
ANR	3966592	Statement	delete	46:3:1367:1372	3966543	0	True				
ANR	3966593	ExpressionStatement	ad	46:10:1374:1376	3966543	1	True				
ANR	3966594	Identifier	ad		3966543	0					
ANR	3966595	Identifier	PartitionManager :: ~PartitionManager		3966543	1					
ANR	3966596	ParameterList			3966543	2					
ANR	3966597	CFGEntryNode	ENTRY		3966543		True				
ANR	3966598	CFGExitNode	EXIT		3966543		True				
ANR	3966599	Symbol	NULL		3966543						
ANR	3966600	Symbol	ad		3966543						
ANR	3966601	Symbol	m_parts . length		3966543						
ANR	3966602	Symbol	* m_parts		3966543						
ANR	3966603	Symbol	m_parts		3966543						
ANR	3966604	Symbol	* idx		3966543						
ANR	3966605	Symbol	idx		3966543						
ANR	3966606	Symbol	m_parts [ idx ] . detach		3966543						
ANR	3966607	Function	PartitionManager :: query_available_partitions	51:0:1388:1892							
ANR	3966608	FunctionDef	PartitionManager :: query_available_partitions (char * script)		3966607	0					
ANR	3966609	CompoundStatement		52:0:1452:1892	3966607	0					
ANR	3966610	IdentifierDeclStatement	FILE * fin = NULL ;	53:1:1455:1471	3966607	0	True				
ANR	3966611	IdentifierDecl	* fin = NULL		3966607	0					
ANR	3966612	IdentifierDeclType	FILE *		3966607	0					
ANR	3966613	Identifier	fin		3966607	1					
ANR	3966614	AssignmentExpression	* fin = NULL		3966607	2		=			
ANR	3966615	Identifier	NULL		3966607	0					
ANR	3966616	Identifier	NULL		3966607	1					
ANR	3966617	IdentifierDeclStatement	ArgList args ;	54:1:1474:1486	3966607	1	True				
ANR	3966618	IdentifierDecl	args		3966607	0					
ANR	3966619	IdentifierDeclType	ArgList		3966607	0					
ANR	3966620	Identifier	args		3966607	1					
ANR	3966621	IdentifierDeclStatement	priv_state priv ;	55:1:1489:1504	3966607	2	True				
ANR	3966622	IdentifierDecl	priv		3966607	0					
ANR	3966623	IdentifierDeclType	priv_state		3966607	0					
ANR	3966624	Identifier	priv		3966607	1					
ANR	3966625	ExpressionStatement	"dprintf ( D_ALWAYS , ""Finding available partitions with: %s\\n"" , script )"	60:1:1613:1681	3966607	3	True				
ANR	3966626	CallExpression	"dprintf ( D_ALWAYS , ""Finding available partitions with: %s\\n"" , script )"		3966607	0					
ANR	3966627	Callee	dprintf		3966607	0					
ANR	3966628	Identifier	dprintf		3966607	0					
ANR	3966629	ArgumentList	D_ALWAYS		3966607	1					
ANR	3966630	Argument	D_ALWAYS		3966607	0					
ANR	3966631	Identifier	D_ALWAYS		3966607	0					
ANR	3966632	Argument	"""Finding available partitions with: %s\\n"""		3966607	1					
ANR	3966633	PrimaryExpression	"""Finding available partitions with: %s\\n"""		3966607	0					
ANR	3966634	Argument	script		3966607	2					
ANR	3966635	Identifier	script		3966607	0					
ANR	3966636	ExpressionStatement	args . AppendArg ( script )	62:1:1685:1707	3966607	4	True				
ANR	3966637	CallExpression	args . AppendArg ( script )		3966607	0					
ANR	3966638	Callee	args . AppendArg		3966607	0					
ANR	3966639	MemberAccess	args . AppendArg		3966607	0					
ANR	3966640	Identifier	args		3966607	0					
ANR	3966641	Identifier	AppendArg		3966607	1					
ANR	3966642	ArgumentList	script		3966607	1					
ANR	3966643	Argument	script		3966607	0					
ANR	3966644	Identifier	script		3966607	0					
ANR	3966645	ExpressionStatement	priv = set_root_priv ( )	64:1:1711:1733	3966607	5	True				
ANR	3966646	AssignmentExpression	priv = set_root_priv ( )		3966607	0		=			
ANR	3966647	Identifier	priv		3966607	0					
ANR	3966648	CallExpression	set_root_priv ( )		3966607	1					
ANR	3966649	Callee	set_root_priv		3966607	0					
ANR	3966650	Identifier	set_root_priv		3966607	0					
ANR	3966651	ArgumentList			3966607	1					
ANR	3966652	ExpressionStatement	"fin = my_popen ( args , ""r"" , TRUE )"	65:1:1736:1767	3966607	6	True				
ANR	3966653	AssignmentExpression	"fin = my_popen ( args , ""r"" , TRUE )"		3966607	0		=			
ANR	3966654	Identifier	fin		3966607	0					
ANR	3966655	CallExpression	"my_popen ( args , ""r"" , TRUE )"		3966607	1					
ANR	3966656	Callee	my_popen		3966607	0					
ANR	3966657	Identifier	my_popen		3966607	0					
ANR	3966658	ArgumentList	args		3966607	1					
ANR	3966659	Argument	args		3966607	0					
ANR	3966660	Identifier	args		3966607	0					
ANR	3966661	Argument	"""r"""		3966607	1					
ANR	3966662	PrimaryExpression	"""r"""		3966607	0					
ANR	3966663	Argument	TRUE		3966607	2					
ANR	3966664	Identifier	TRUE		3966607	0					
ANR	3966665	IfStatement	if ( fin == NULL )		3966607	7					
ANR	3966666	Condition	fin == NULL	67:5:1775:1785	3966607	0	True				
ANR	3966667	EqualityExpression	fin == NULL		3966607	0		==			
ANR	3966668	Identifier	fin		3966607	0					
ANR	3966669	Identifier	NULL		3966607	1					
ANR	3966670	CompoundStatement		16:18:335:335	3966607	1					
ANR	3966671	ExpressionStatement	"EXCEPT ( ""Can't execute %s\\n"" , script )"	68:2:1792:1828	3966607	0	True				
ANR	3966672	CallExpression	"EXCEPT ( ""Can't execute %s\\n"" , script )"		3966607	0					
ANR	3966673	Callee	EXCEPT		3966607	0					
ANR	3966674	Identifier	EXCEPT		3966607	0					
ANR	3966675	ArgumentList	"""Can't execute %s\\n"""		3966607	1					
ANR	3966676	Argument	"""Can't execute %s\\n"""		3966607	0					
ANR	3966677	PrimaryExpression	"""Can't execute %s\\n"""		3966607	0					
ANR	3966678	Argument	script		3966607	1					
ANR	3966679	Identifier	script		3966607	0					
ANR	3966680	ExpressionStatement	read_partitions ( fin )	71:1:1835:1855	3966607	8	True				
ANR	3966681	CallExpression	read_partitions ( fin )		3966607	0					
ANR	3966682	Callee	read_partitions		3966607	0					
ANR	3966683	Identifier	read_partitions		3966607	0					
ANR	3966684	ArgumentList	fin		3966607	1					
ANR	3966685	Argument	fin		3966607	0					
ANR	3966686	Identifier	fin		3966607	0					
ANR	3966687	ExpressionStatement	my_pclose ( fin )	73:1:1859:1873	3966607	9	True				
ANR	3966688	CallExpression	my_pclose ( fin )		3966607	0					
ANR	3966689	Callee	my_pclose		3966607	0					
ANR	3966690	Identifier	my_pclose		3966607	0					
ANR	3966691	ArgumentList	fin		3966607	1					
ANR	3966692	Argument	fin		3966607	0					
ANR	3966693	Identifier	fin		3966607	0					
ANR	3966694	ExpressionStatement	set_priv ( priv )	74:1:1876:1890	3966607	10	True				
ANR	3966695	CallExpression	set_priv ( priv )		3966607	0					
ANR	3966696	Callee	set_priv		3966607	0					
ANR	3966697	Identifier	set_priv		3966607	0					
ANR	3966698	ArgumentList	priv		3966607	1					
ANR	3966699	Argument	priv		3966607	0					
ANR	3966700	Identifier	priv		3966607	0					
ANR	3966701	ReturnType	void		3966607	1					
ANR	3966702	Identifier	PartitionManager :: query_available_partitions		3966607	2					
ANR	3966703	ParameterList	char * script		3966607	3					
ANR	3966704	Parameter	char * script	51:50:1438:1449	3966607	0	True				
ANR	3966705	ParameterType	char *		3966607	0					
ANR	3966706	Identifier	script		3966607	1					
ANR	3966707	CFGEntryNode	ENTRY		3966607		True				
ANR	3966708	CFGExitNode	EXIT		3966607		True				
ANR	3966709	Symbol	args		3966607						
ANR	3966710	Symbol	NULL		3966607						
ANR	3966711	Symbol	D_ALWAYS		3966607						
ANR	3966712	Symbol	TRUE		3966607						
ANR	3966713	Symbol	fin		3966607						
ANR	3966714	Symbol	set_root_priv		3966607						
ANR	3966715	Symbol	priv		3966607						
ANR	3966716	Symbol	my_popen		3966607						
ANR	3966717	Symbol	script		3966607						
ANR	3966718	Function	PartitionManager :: read_partitions	77:0:1895:3228							
ANR	3966719	FunctionDef	PartitionManager :: read_partitions (FILE * fin)		3966718	0					
ANR	3966720	CompoundStatement		78:0:1945:3228	3966718	0					
ANR	3966721	IdentifierDeclStatement	int idx ;	79:1:1948:1955	3966718	0	True				
ANR	3966722	IdentifierDecl	idx		3966718	0					
ANR	3966723	IdentifierDeclType	int		3966718	0					
ANR	3966724	Identifier	idx		3966718	1					
ANR	3966725	IdentifierDeclStatement	ClassAd * ad = NULL ;	80:1:1958:1976	3966718	1	True				
ANR	3966726	IdentifierDecl	* ad = NULL		3966718	0					
ANR	3966727	IdentifierDeclType	ClassAd *		3966718	0					
ANR	3966728	Identifier	ad		3966718	1					
ANR	3966729	AssignmentExpression	* ad = NULL		3966718	2		=			
ANR	3966730	Identifier	NULL		3966718	0					
ANR	3966731	Identifier	NULL		3966718	1					
ANR	3966732	IdentifierDeclStatement	"int eof , error , empty ;"	81:1:1979:2000	3966718	2	True				
ANR	3966733	IdentifierDecl	eof		3966718	0					
ANR	3966734	IdentifierDeclType	int		3966718	0					
ANR	3966735	Identifier	eof		3966718	1					
ANR	3966736	IdentifierDecl	error		3966718	1					
ANR	3966737	IdentifierDeclType	int		3966718	0					
ANR	3966738	Identifier	error		3966718	1					
ANR	3966739	IdentifierDecl	empty		3966718	2					
ANR	3966740	IdentifierDeclType	int		3966718	0					
ANR	3966741	Identifier	empty		3966718	1					
ANR	3966742	IdentifierDeclStatement	"const char * classad_delimitor = ""---\\n"" ;"	82:1:2003:2042	3966718	3	True				
ANR	3966743	IdentifierDecl	"* classad_delimitor = ""---\\n"""		3966718	0					
ANR	3966744	IdentifierDeclType	const char *		3966718	0					
ANR	3966745	Identifier	classad_delimitor		3966718	1					
ANR	3966746	AssignmentExpression	"* classad_delimitor = ""---\\n"""		3966718	2		=			
ANR	3966747	Identifier	classad_delimitor		3966718	0					
ANR	3966748	PrimaryExpression	"""---\\n"""		3966718	1					
ANR	3966749	IdentifierDeclStatement	MyString tmp_str ;	83:1:2045:2061	3966718	4	True				
ANR	3966750	IdentifierDecl	tmp_str		3966718	0					
ANR	3966751	IdentifierDeclType	MyString		3966718	0					
ANR	3966752	Identifier	tmp_str		3966718	1					
ANR	3966753	IdentifierDeclStatement	bool tmp_bool = true ;	84:1:2064:2084	3966718	5	True				
ANR	3966754	IdentifierDecl	tmp_bool = true		3966718	0					
ANR	3966755	IdentifierDeclType	bool		3966718	0					
ANR	3966756	Identifier	tmp_bool		3966718	1					
ANR	3966757	AssignmentExpression	tmp_bool = true		3966718	2		=			
ANR	3966758	Identifier	true		3966718	0					
ANR	3966759	Identifier	true		3966718	1					
ANR	3966760	ForStatement	for ( idx = 0 ; idx < m_parts . getsize ( ) ; idx ++ )		3966718	6					
ANR	3966761	ForInit	idx = 0 ;	89:6:2214:2221	3966718	0	True				
ANR	3966762	AssignmentExpression	idx = 0		3966718	0		=			
ANR	3966763	Identifier	idx		3966718	0					
ANR	3966764	PrimaryExpression	0		3966718	1					
ANR	3966765	Condition	idx < m_parts . getsize ( )	89:15:2223:2245	3966718	1	True				
ANR	3966766	RelationalExpression	idx < m_parts . getsize ( )		3966718	0		<			
ANR	3966767	Identifier	idx		3966718	0					
ANR	3966768	CallExpression	m_parts . getsize ( )		3966718	1					
ANR	3966769	Callee	m_parts . getsize		3966718	0					
ANR	3966770	MemberAccess	m_parts . getsize		3966718	0					
ANR	3966771	Identifier	m_parts		3966718	0					
ANR	3966772	Identifier	getsize		3966718	1					
ANR	3966773	ArgumentList			3966718	1					
ANR	3966774	PostIncDecOperationExpression	idx ++	89:40:2248:2252	3966718	2	True				
ANR	3966775	Identifier	idx		3966718	0					
ANR	3966776	IncDec	++		3966718	1					
ANR	3966777	CompoundStatement		13:1:310:310	3966718	3					
ANR	3966778	ExpressionStatement	ad = m_parts [ idx ] . detach ( )	91:2:2260:2286	3966718	0	True				
ANR	3966779	AssignmentExpression	ad = m_parts [ idx ] . detach ( )		3966718	0		=			
ANR	3966780	Identifier	ad		3966718	0					
ANR	3966781	CallExpression	m_parts [ idx ] . detach ( )		3966718	1					
ANR	3966782	Callee	m_parts [ idx ] . detach		3966718	0					
ANR	3966783	MemberAccess	m_parts [ idx ] . detach		3966718	0					
ANR	3966784	ArrayIndexing	m_parts [ idx ]		3966718	0					
ANR	3966785	Identifier	m_parts		3966718	0					
ANR	3966786	Identifier	idx		3966718	1					
ANR	3966787	Identifier	detach		3966718	1					
ANR	3966788	ArgumentList			3966718	1					
ANR	3966789	Statement	delete	92:2:2290:2295	3966718	1	True				
ANR	3966790	ExpressionStatement	ad	92:9:2297:2299	3966718	2	True				
ANR	3966791	Identifier	ad		3966718	0					
ANR	3966792	ExpressionStatement	m_parts . truncate ( 0 )	94:1:2305:2324	3966718	7	True				
ANR	3966793	CallExpression	m_parts . truncate ( 0 )		3966718	0					
ANR	3966794	Callee	m_parts . truncate		3966718	0					
ANR	3966795	MemberAccess	m_parts . truncate		3966718	0					
ANR	3966796	Identifier	m_parts		3966718	0					
ANR	3966797	Identifier	truncate		3966718	1					
ANR	3966798	ArgumentList	0		3966718	1					
ANR	3966799	Argument	0		3966718	0					
ANR	3966800	PrimaryExpression	0		3966718	0					
ANR	3966801	ExpressionStatement	idx = 0	96:1:2328:2335	3966718	8	True				
ANR	3966802	AssignmentExpression	idx = 0		3966718	0		=			
ANR	3966803	Identifier	idx		3966718	0					
ANR	3966804	PrimaryExpression	0		3966718	1					
ANR	3966805	ExpressionStatement	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"	97:1:2338:2393	3966718	9	True				
ANR	3966806	AssignmentExpression	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"		3966718	0		=			
ANR	3966807	Identifier	ad		3966718	0					
ANR	3966808	Expression	"fin , classad_delimitor , eof , error , empty"		3966718	1					
ANR	3966809	Identifier	fin		3966718	0					
ANR	3966810	Expression	"classad_delimitor , eof , error , empty"		3966718	1					
ANR	3966811	Identifier	classad_delimitor		3966718	0					
ANR	3966812	Expression	"eof , error , empty"		3966718	1					
ANR	3966813	Identifier	eof		3966718	0					
ANR	3966814	Expression	"error , empty"		3966718	1					
ANR	3966815	Identifier	error		3966718	0					
ANR	3966816	Identifier	empty		3966718	1					
ANR	3966817	WhileStatement	while ( ! empty )		3966718	10					
ANR	3966818	Condition	! empty	98:7:2402:2407	3966718	0	True				
ANR	3966819	UnaryOperationExpression	! empty		3966718	0					
ANR	3966820	UnaryOperator	!		3966718	0					
ANR	3966821	Identifier	empty		3966718	1					
ANR	3966822	CompoundStatement		22:1:465:465	3966718	1					
ANR	3966823	ExpressionStatement	m_parts [ idx ] . attach ( ad )	100:2:2415:2438	3966718	0	True				
ANR	3966824	CallExpression	m_parts [ idx ] . attach ( ad )		3966718	0					
ANR	3966825	Callee	m_parts [ idx ] . attach		3966718	0					
ANR	3966826	MemberAccess	m_parts [ idx ] . attach		3966718	0					
ANR	3966827	ArrayIndexing	m_parts [ idx ]		3966718	0					
ANR	3966828	Identifier	m_parts		3966718	0					
ANR	3966829	Identifier	idx		3966718	1					
ANR	3966830	Identifier	attach		3966718	1					
ANR	3966831	ArgumentList	ad		3966718	1					
ANR	3966832	Argument	ad		3966718	0					
ANR	3966833	Identifier	ad		3966718	0					
ANR	3966834	ExpressionStatement	tmp_str = m_parts [ idx ] . get_name ( )	101:2:2442:2475	3966718	1	True				
ANR	3966835	AssignmentExpression	tmp_str = m_parts [ idx ] . get_name ( )		3966718	0		=			
ANR	3966836	Identifier	tmp_str		3966718	0					
ANR	3966837	CallExpression	m_parts [ idx ] . get_name ( )		3966718	1					
ANR	3966838	Callee	m_parts [ idx ] . get_name		3966718	0					
ANR	3966839	MemberAccess	m_parts [ idx ] . get_name		3966718	0					
ANR	3966840	ArrayIndexing	m_parts [ idx ]		3966718	0					
ANR	3966841	Identifier	m_parts		3966718	0					
ANR	3966842	Identifier	idx		3966718	1					
ANR	3966843	Identifier	get_name		3966718	1					
ANR	3966844	ArgumentList			3966718	1					
ANR	3966845	SwitchStatement	switch ( m_parts [ idx ] . get_pstate ( ) )		3966718	2					
ANR	3966846	Condition	m_parts [ idx ] . get_pstate ( )	107:9:2716:2740	3966718	0	True				
ANR	3966847	CallExpression	m_parts [ idx ] . get_pstate ( )		3966718	0					
ANR	3966848	Callee	m_parts [ idx ] . get_pstate		3966718	0					
ANR	3966849	MemberAccess	m_parts [ idx ] . get_pstate		3966718	0					
ANR	3966850	ArrayIndexing	m_parts [ idx ]		3966718	0					
ANR	3966851	Identifier	m_parts		3966718	0					
ANR	3966852	Identifier	idx		3966718	1					
ANR	3966853	Identifier	get_pstate		3966718	1					
ANR	3966854	ArgumentList			3966718	1					
ANR	3966855	CompoundStatement		30:36:797:797	3966718	1					
ANR	3966856	Label	case BOOTED :	108:3:2748:2759	3966718	0	True				
ANR	3966857	Identifier	BOOTED		3966718	0					
ANR	3966858	IfStatement	"if ( m_assigned . lookup ( tmp_str , tmp_bool ) == 0 )"		3966718	1					
ANR	3966859	Condition	"m_assigned . lookup ( tmp_str , tmp_bool ) == 0"	109:8:2769:2809	3966718	0	True				
ANR	3966860	EqualityExpression	"m_assigned . lookup ( tmp_str , tmp_bool ) == 0"		3966718	0		==			
ANR	3966861	CallExpression	"m_assigned . lookup ( tmp_str , tmp_bool )"		3966718	0					
ANR	3966862	Callee	m_assigned . lookup		3966718	0					
ANR	3966863	MemberAccess	m_assigned . lookup		3966718	0					
ANR	3966864	Identifier	m_assigned		3966718	0					
ANR	3966865	Identifier	lookup		3966718	1					
ANR	3966866	ArgumentList	tmp_str		3966718	1					
ANR	3966867	Argument	tmp_str		3966718	0					
ANR	3966868	Identifier	tmp_str		3966718	0					
ANR	3966869	Argument	tmp_bool		3966718	1					
ANR	3966870	Identifier	tmp_bool		3966718	0					
ANR	3966871	PrimaryExpression	0		3966718	1					
ANR	3966872	CompoundStatement		32:51:866:866	3966718	1					
ANR	3966873	ExpressionStatement	m_parts [ idx ] . set_pstate ( ASSIGNED )	110:5:2819:2852	3966718	0	True				
ANR	3966874	CallExpression	m_parts [ idx ] . set_pstate ( ASSIGNED )		3966718	0					
ANR	3966875	Callee	m_parts [ idx ] . set_pstate		3966718	0					
ANR	3966876	MemberAccess	m_parts [ idx ] . set_pstate		3966718	0					
ANR	3966877	ArrayIndexing	m_parts [ idx ]		3966718	0					
ANR	3966878	Identifier	m_parts		3966718	0					
ANR	3966879	Identifier	idx		3966718	1					
ANR	3966880	Identifier	set_pstate		3966718	1					
ANR	3966881	ArgumentList	ASSIGNED		3966718	1					
ANR	3966882	Argument	ASSIGNED		3966718	0					
ANR	3966883	Identifier	ASSIGNED		3966718	0					
ANR	3966884	BreakStatement	break ;	112:4:2864:2869	3966718	2	True				
ANR	3966885	Label	case BACKED :	113:3:2874:2885	3966718	3	True				
ANR	3966886	Identifier	BACKED		3966718	0					
ANR	3966887	IfStatement	"if ( m_assigned . lookup ( tmp_str , tmp_bool ) == 0 )"		3966718	4					
ANR	3966888	Condition	"m_assigned . lookup ( tmp_str , tmp_bool ) == 0"	114:8:2895:2935	3966718	0	True				
ANR	3966889	EqualityExpression	"m_assigned . lookup ( tmp_str , tmp_bool ) == 0"		3966718	0		==			
ANR	3966890	CallExpression	"m_assigned . lookup ( tmp_str , tmp_bool )"		3966718	0					
ANR	3966891	Callee	m_assigned . lookup		3966718	0					
ANR	3966892	MemberAccess	m_assigned . lookup		3966718	0					
ANR	3966893	Identifier	m_assigned		3966718	0					
ANR	3966894	Identifier	lookup		3966718	1					
ANR	3966895	ArgumentList	tmp_str		3966718	1					
ANR	3966896	Argument	tmp_str		3966718	0					
ANR	3966897	Identifier	tmp_str		3966718	0					
ANR	3966898	Argument	tmp_bool		3966718	1					
ANR	3966899	Identifier	tmp_bool		3966718	0					
ANR	3966900	PrimaryExpression	0		3966718	1					
ANR	3966901	CompoundStatement		37:51:992:992	3966718	1					
ANR	3966902	ExpressionStatement	m_assigned . remove ( tmp_str )	115:5:2945:2971	3966718	0	True				
ANR	3966903	CallExpression	m_assigned . remove ( tmp_str )		3966718	0					
ANR	3966904	Callee	m_assigned . remove		3966718	0					
ANR	3966905	MemberAccess	m_assigned . remove		3966718	0					
ANR	3966906	Identifier	m_assigned		3966718	0					
ANR	3966907	Identifier	remove		3966718	1					
ANR	3966908	ArgumentList	tmp_str		3966718	1					
ANR	3966909	Argument	tmp_str		3966718	0					
ANR	3966910	Identifier	tmp_str		3966718	0					
ANR	3966911	BreakStatement	break ;	117:4:2983:2988	3966718	5	True				
ANR	3966912	Label	default :	118:3:2993:3000	3966718	6	True				
ANR	3966913	Identifier	default		3966718	0					
ANR	3966914	BreakStatement	break ;	120:4:3024:3029	3966718	7	True				
ANR	3966915	ExpressionStatement	idx ++	124:2:3071:3076	3966718	3	True				
ANR	3966916	PostIncDecOperationExpression	idx ++		3966718	0					
ANR	3966917	Identifier	idx		3966718	0					
ANR	3966918	IncDec	++		3966718	1					
ANR	3966919	ExpressionStatement	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"	126:2:3081:3136	3966718	4	True				
ANR	3966920	AssignmentExpression	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"		3966718	0		=			
ANR	3966921	Identifier	ad		3966718	0					
ANR	3966922	Expression	"fin , classad_delimitor , eof , error , empty"		3966718	1					
ANR	3966923	Identifier	fin		3966718	0					
ANR	3966924	Expression	"classad_delimitor , eof , error , empty"		3966718	1					
ANR	3966925	Identifier	classad_delimitor		3966718	0					
ANR	3966926	Expression	"eof , error , empty"		3966718	1					
ANR	3966927	Identifier	eof		3966718	0					
ANR	3966928	Expression	"error , empty"		3966718	1					
ANR	3966929	Identifier	error		3966718	0					
ANR	3966930	Identifier	empty		3966718	1					
ANR	3966931	Statement	delete	130:1:3216:3221	3966718	11	True				
ANR	3966932	ExpressionStatement	ad	130:7:3222:3226	3966718	12	True				
ANR	3966933	Identifier	ad		3966718	0					
ANR	3966934	ReturnType	void		3966718	1					
ANR	3966935	Identifier	PartitionManager :: read_partitions		3966718	2					
ANR	3966936	ParameterList	FILE * fin		3966718	3					
ANR	3966937	Parameter	FILE * fin	77:39:1934:1942	3966718	0	True				
ANR	3966938	ParameterType	FILE *		3966718	0					
ANR	3966939	Identifier	fin		3966718	1					
ANR	3966940	CFGEntryNode	ENTRY		3966718		True				
ANR	3966941	CFGExitNode	EXIT		3966718		True				
ANR	3966942	Symbol	NULL		3966718						
ANR	3966943	Symbol	ad		3966718						
ANR	3966944	Symbol	tmp_str		3966718						
ANR	3966945	Symbol	* m_parts		3966718						
ANR	3966946	Symbol	tmp_bool		3966718						
ANR	3966947	Symbol	fin		3966718						
ANR	3966948	Symbol	classad_delimitor		3966718						
ANR	3966949	Symbol	error		3966718						
ANR	3966950	Symbol	empty		3966718						
ANR	3966951	Symbol	m_parts [ idx ] . get_name		3966718						
ANR	3966952	Symbol	m_parts		3966718						
ANR	3966953	Symbol	m_assigned . lookup		3966718						
ANR	3966954	Symbol	m_parts . getsize		3966718						
ANR	3966955	Symbol	ASSIGNED		3966718						
ANR	3966956	Symbol	true		3966718						
ANR	3966957	Symbol	* idx		3966718						
ANR	3966958	Symbol	idx		3966718						
ANR	3966959	Symbol	eof		3966718						
ANR	3966960	Symbol	m_parts [ idx ] . detach		3966718						
ANR	3966961	Symbol	m_parts [ idx ] . get_pstate		3966718						
ANR	3966962	Symbol	m_assigned		3966718						
ANR	3966963	Function	PartitionManager :: partition_exists	134:0:3279:3475							
ANR	3966964	FunctionDef	PartitionManager :: partition_exists (MyString name)		3966963	0					
ANR	3966965	CompoundStatement		135:0:3334:3475	3966963	0					
ANR	3966966	IdentifierDeclStatement	int idx ;	136:1:3337:3344	3966963	0	True				
ANR	3966967	IdentifierDecl	idx		3966963	0					
ANR	3966968	IdentifierDeclType	int		3966963	0					
ANR	3966969	Identifier	idx		3966963	1					
ANR	3966970	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		3966963	1					
ANR	3966971	ForInit	idx = 0 ;	138:6:3353:3360	3966963	0	True				
ANR	3966972	AssignmentExpression	idx = 0		3966963	0		=			
ANR	3966973	Identifier	idx		3966963	0					
ANR	3966974	PrimaryExpression	0		3966963	1					
ANR	3966975	Condition	idx < m_parts . length ( )	138:15:3362:3383	3966963	1	True				
ANR	3966976	RelationalExpression	idx < m_parts . length ( )		3966963	0		<			
ANR	3966977	Identifier	idx		3966963	0					
ANR	3966978	CallExpression	m_parts . length ( )		3966963	1					
ANR	3966979	Callee	m_parts . length		3966963	0					
ANR	3966980	MemberAccess	m_parts . length		3966963	0					
ANR	3966981	Identifier	m_parts		3966963	0					
ANR	3966982	Identifier	length		3966963	1					
ANR	3966983	ArgumentList			3966963	1					
ANR	3966984	PostIncDecOperationExpression	idx ++	138:39:3386:3390	3966963	2	True				
ANR	3966985	Identifier	idx		3966963	0					
ANR	3966986	IncDec	++		3966963	1					
ANR	3966987	CompoundStatement		4:46:58:58	3966963	3					
ANR	3966988	IfStatement	if ( m_parts [ idx ] . get_name ( ) == name )		3966963	0					
ANR	3966989	Condition	m_parts [ idx ] . get_name ( ) == name	139:6:3401:3431	3966963	0	True				
ANR	3966990	EqualityExpression	m_parts [ idx ] . get_name ( ) == name		3966963	0		==			
ANR	3966991	CallExpression	m_parts [ idx ] . get_name ( )		3966963	0					
ANR	3966992	Callee	m_parts [ idx ] . get_name		3966963	0					
ANR	3966993	MemberAccess	m_parts [ idx ] . get_name		3966963	0					
ANR	3966994	ArrayIndexing	m_parts [ idx ]		3966963	0					
ANR	3966995	Identifier	m_parts		3966963	0					
ANR	3966996	Identifier	idx		3966963	1					
ANR	3966997	Identifier	get_name		3966963	1					
ANR	3966998	ArgumentList			3966963	1					
ANR	3966999	Identifier	name		3966963	1					
ANR	3967000	CompoundStatement		5:39:99:99	3966963	1					
ANR	3967001	ReturnStatement	return true ;	140:3:3439:3450	3966963	0	True				
ANR	3967002	Identifier	true		3966963	0					
ANR	3967003	ReturnStatement	return false ;	144:1:3461:3473	3966963	2	True				
ANR	3967004	Identifier	false		3966963	0					
ANR	3967005	ReturnType	bool		3966963	1					
ANR	3967006	Identifier	PartitionManager :: partition_exists		3966963	2					
ANR	3967007	ParameterList	MyString name		3966963	3					
ANR	3967008	Parameter	MyString name	134:40:3319:3331	3966963	0	True				
ANR	3967009	ParameterType	MyString		3966963	0					
ANR	3967010	Identifier	name		3966963	1					
ANR	3967011	CFGEntryNode	ENTRY		3966963		True				
ANR	3967012	CFGExitNode	EXIT		3966963		True				
ANR	3967013	Symbol	m_parts . length		3966963						
ANR	3967014	Symbol	* m_parts		3966963						
ANR	3967015	Symbol	m_parts [ idx ] . get_name		3966963						
ANR	3967016	Symbol	m_parts		3966963						
ANR	3967017	Symbol	name		3966963						
ANR	3967018	Symbol	* idx		3966963						
ANR	3967019	Symbol	true		3966963						
ANR	3967020	Symbol	false		3966963						
ANR	3967021	Symbol	idx		3966963						
ANR	3967022	Function	PartitionManager :: set_partition_backer	147:0:3478:3816							
ANR	3967023	FunctionDef	"PartitionManager :: set_partition_backer (MyString part_name , MyString backer)"		3967022	0					
ANR	3967024	CompoundStatement		148:0:3559:3816	3967022	0					
ANR	3967025	IdentifierDeclStatement	int idx ;	149:1:3562:3569	3967022	0	True				
ANR	3967026	IdentifierDecl	idx		3967022	0					
ANR	3967027	IdentifierDeclType	int		3967022	0					
ANR	3967028	Identifier	idx		3967022	1					
ANR	3967029	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		3967022	1					
ANR	3967030	ForInit	idx = 0 ;	151:6:3578:3585	3967022	0	True				
ANR	3967031	AssignmentExpression	idx = 0		3967022	0		=			
ANR	3967032	Identifier	idx		3967022	0					
ANR	3967033	PrimaryExpression	0		3967022	1					
ANR	3967034	Condition	idx < m_parts . length ( )	151:15:3587:3608	3967022	1	True				
ANR	3967035	RelationalExpression	idx < m_parts . length ( )		3967022	0		<			
ANR	3967036	Identifier	idx		3967022	0					
ANR	3967037	CallExpression	m_parts . length ( )		3967022	1					
ANR	3967038	Callee	m_parts . length		3967022	0					
ANR	3967039	MemberAccess	m_parts . length		3967022	0					
ANR	3967040	Identifier	m_parts		3967022	0					
ANR	3967041	Identifier	length		3967022	1					
ANR	3967042	ArgumentList			3967022	1					
ANR	3967043	PostIncDecOperationExpression	idx ++	151:39:3611:3615	3967022	2	True				
ANR	3967044	Identifier	idx		3967022	0					
ANR	3967045	IncDec	++		3967022	1					
ANR	3967046	CompoundStatement		4:46:58:58	3967022	3					
ANR	3967047	IfStatement	if ( m_parts [ idx ] . get_name ( ) == part_name )		3967022	0					
ANR	3967048	Condition	m_parts [ idx ] . get_name ( ) == part_name	152:6:3626:3661	3967022	0	True				
ANR	3967049	EqualityExpression	m_parts [ idx ] . get_name ( ) == part_name		3967022	0		==			
ANR	3967050	CallExpression	m_parts [ idx ] . get_name ( )		3967022	0					
ANR	3967051	Callee	m_parts [ idx ] . get_name		3967022	0					
ANR	3967052	MemberAccess	m_parts [ idx ] . get_name		3967022	0					
ANR	3967053	ArrayIndexing	m_parts [ idx ]		3967022	0					
ANR	3967054	Identifier	m_parts		3967022	0					
ANR	3967055	Identifier	idx		3967022	1					
ANR	3967056	Identifier	get_name		3967022	1					
ANR	3967057	ArgumentList			3967022	1					
ANR	3967058	Identifier	part_name		3967022	1					
ANR	3967059	CompoundStatement		5:44:104:104	3967022	1					
ANR	3967060	ExpressionStatement	m_parts [ idx ] . set_backer ( backer )	153:3:3669:3700	3967022	0	True				
ANR	3967061	CallExpression	m_parts [ idx ] . set_backer ( backer )		3967022	0					
ANR	3967062	Callee	m_parts [ idx ] . set_backer		3967022	0					
ANR	3967063	MemberAccess	m_parts [ idx ] . set_backer		3967022	0					
ANR	3967064	ArrayIndexing	m_parts [ idx ]		3967022	0					
ANR	3967065	Identifier	m_parts		3967022	0					
ANR	3967066	Identifier	idx		3967022	1					
ANR	3967067	Identifier	set_backer		3967022	1					
ANR	3967068	ArgumentList	backer		3967022	1					
ANR	3967069	Argument	backer		3967022	0					
ANR	3967070	Identifier	backer		3967022	0					
ANR	3967071	ExpressionStatement	m_parts [ idx ] . set_pstate ( BACKED )	155:3:3765:3796	3967022	1	True				
ANR	3967072	CallExpression	m_parts [ idx ] . set_pstate ( BACKED )		3967022	0					
ANR	3967073	Callee	m_parts [ idx ] . set_pstate		3967022	0					
ANR	3967074	MemberAccess	m_parts [ idx ] . set_pstate		3967022	0					
ANR	3967075	ArrayIndexing	m_parts [ idx ]		3967022	0					
ANR	3967076	Identifier	m_parts		3967022	0					
ANR	3967077	Identifier	idx		3967022	1					
ANR	3967078	Identifier	set_pstate		3967022	1					
ANR	3967079	ArgumentList	BACKED		3967022	1					
ANR	3967080	Argument	BACKED		3967022	0					
ANR	3967081	Identifier	BACKED		3967022	0					
ANR	3967082	ReturnStatement	return ;	156:3:3801:3807	3967022	2	True				
ANR	3967083	ReturnType	void		3967022	1					
ANR	3967084	Identifier	PartitionManager :: set_partition_backer		3967022	2					
ANR	3967085	ParameterList	"MyString part_name , MyString backer"		3967022	3					
ANR	3967086	Parameter	MyString part_name	147:44:3522:3539	3967022	0	True				
ANR	3967087	ParameterType	MyString		3967022	0					
ANR	3967088	Identifier	part_name		3967022	1					
ANR	3967089	Parameter	MyString backer	147:64:3542:3556	3967022	1	True				
ANR	3967090	ParameterType	MyString		3967022	0					
ANR	3967091	Identifier	backer		3967022	1					
ANR	3967092	CFGEntryNode	ENTRY		3967022		True				
ANR	3967093	CFGExitNode	EXIT		3967022		True				
ANR	3967094	Symbol	m_parts . length		3967022						
ANR	3967095	Symbol	* m_parts		3967022						
ANR	3967096	Symbol	m_parts [ idx ] . get_name		3967022						
ANR	3967097	Symbol	backer		3967022						
ANR	3967098	Symbol	m_parts		3967022						
ANR	3967099	Symbol	BACKED		3967022						
ANR	3967100	Symbol	* idx		3967022						
ANR	3967101	Symbol	idx		3967022						
ANR	3967102	Symbol	part_name		3967022						
ANR	3967103	Function	PartitionManager :: get_partition_backer	161:0:3819:4074							
ANR	3967104	FunctionDef	PartitionManager :: get_partition_backer (MyString part_name)		3967103	0					
ANR	3967105	CompoundStatement		162:0:3887:4074	3967103	0					
ANR	3967106	IdentifierDeclStatement	int idx ;	163:1:3890:3897	3967103	0	True				
ANR	3967107	IdentifierDecl	idx		3967103	0					
ANR	3967108	IdentifierDeclType	int		3967103	0					
ANR	3967109	Identifier	idx		3967103	1					
ANR	3967110	IdentifierDeclStatement	"MyString none = """" ;"	164:1:3900:3918	3967103	1	True				
ANR	3967111	IdentifierDecl	"none = """""		3967103	0					
ANR	3967112	IdentifierDeclType	MyString		3967103	0					
ANR	3967113	Identifier	none		3967103	1					
ANR	3967114	AssignmentExpression	"none = """""		3967103	2		=			
ANR	3967115	Identifier	none		3967103	0					
ANR	3967116	PrimaryExpression	""""""		3967103	1					
ANR	3967117	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		3967103	2					
ANR	3967118	ForInit	idx = 0 ;	166:6:3927:3934	3967103	0	True				
ANR	3967119	AssignmentExpression	idx = 0		3967103	0		=			
ANR	3967120	Identifier	idx		3967103	0					
ANR	3967121	PrimaryExpression	0		3967103	1					
ANR	3967122	Condition	idx < m_parts . length ( )	166:15:3936:3957	3967103	1	True				
ANR	3967123	RelationalExpression	idx < m_parts . length ( )		3967103	0		<			
ANR	3967124	Identifier	idx		3967103	0					
ANR	3967125	CallExpression	m_parts . length ( )		3967103	1					
ANR	3967126	Callee	m_parts . length		3967103	0					
ANR	3967127	MemberAccess	m_parts . length		3967103	0					
ANR	3967128	Identifier	m_parts		3967103	0					
ANR	3967129	Identifier	length		3967103	1					
ANR	3967130	ArgumentList			3967103	1					
ANR	3967131	PostIncDecOperationExpression	idx ++	166:39:3960:3964	3967103	2	True				
ANR	3967132	Identifier	idx		3967103	0					
ANR	3967133	IncDec	++		3967103	1					
ANR	3967134	CompoundStatement		5:46:79:79	3967103	3					
ANR	3967135	IfStatement	if ( m_parts [ idx ] . get_name ( ) == part_name )		3967103	0					
ANR	3967136	Condition	m_parts [ idx ] . get_name ( ) == part_name	167:6:3975:4010	3967103	0	True				
ANR	3967137	EqualityExpression	m_parts [ idx ] . get_name ( ) == part_name		3967103	0		==			
ANR	3967138	CallExpression	m_parts [ idx ] . get_name ( )		3967103	0					
ANR	3967139	Callee	m_parts [ idx ] . get_name		3967103	0					
ANR	3967140	MemberAccess	m_parts [ idx ] . get_name		3967103	0					
ANR	3967141	ArrayIndexing	m_parts [ idx ]		3967103	0					
ANR	3967142	Identifier	m_parts		3967103	0					
ANR	3967143	Identifier	idx		3967103	1					
ANR	3967144	Identifier	get_name		3967103	1					
ANR	3967145	ArgumentList			3967103	1					
ANR	3967146	Identifier	part_name		3967103	1					
ANR	3967147	CompoundStatement		6:44:125:125	3967103	1					
ANR	3967148	ReturnStatement	return m_parts [ idx ] . get_backer ( ) ;	168:3:4018:4050	3967103	0	True				
ANR	3967149	CallExpression	m_parts [ idx ] . get_backer ( )		3967103	0					
ANR	3967150	Callee	m_parts [ idx ] . get_backer		3967103	0					
ANR	3967151	MemberAccess	m_parts [ idx ] . get_backer		3967103	0					
ANR	3967152	ArrayIndexing	m_parts [ idx ]		3967103	0					
ANR	3967153	Identifier	m_parts		3967103	0					
ANR	3967154	Identifier	idx		3967103	1					
ANR	3967155	Identifier	get_backer		3967103	1					
ANR	3967156	ArgumentList			3967103	1					
ANR	3967157	ReturnStatement	return none ;	172:1:4061:4072	3967103	3	True				
ANR	3967158	Identifier	none		3967103	0					
ANR	3967159	ReturnType	MyString		3967103	1					
ANR	3967160	Identifier	PartitionManager :: get_partition_backer		3967103	2					
ANR	3967161	ParameterList	MyString part_name		3967103	3					
ANR	3967162	Parameter	MyString part_name	161:48:3867:3884	3967103	0	True				
ANR	3967163	ParameterType	MyString		3967103	0					
ANR	3967164	Identifier	part_name		3967103	1					
ANR	3967165	CFGEntryNode	ENTRY		3967103		True				
ANR	3967166	CFGExitNode	EXIT		3967103		True				
ANR	3967167	Symbol	m_parts [ idx ] . get_backer		3967103						
ANR	3967168	Symbol	m_parts . length		3967103						
ANR	3967169	Symbol	m_parts [ idx ] . get_name		3967103						
ANR	3967170	Symbol	* m_parts		3967103						
ANR	3967171	Symbol	m_parts		3967103						
ANR	3967172	Symbol	* idx		3967103						
ANR	3967173	Symbol	none		3967103						
ANR	3967174	Symbol	idx		3967103						
ANR	3967175	Symbol	part_name		3967103						
ANR	3967176	Function	PartitionManager :: partition_realization	177:0:4184:4779							
ANR	3967177	FunctionDef	"PartitionManager :: partition_realization (int & tot_smp , int & tot_dual , int & tot_vn)"		3967176	0					
ANR	3967178	CompoundStatement		179:0:4273:4779	3967176	0					
ANR	3967179	IdentifierDeclStatement	int idx ;	180:1:4276:4283	3967176	0	True				
ANR	3967180	IdentifierDecl	idx		3967176	0					
ANR	3967181	IdentifierDeclType	int		3967176	0					
ANR	3967182	Identifier	idx		3967176	1					
ANR	3967183	ExpressionStatement	tot_smp = 0	182:1:4287:4298	3967176	1	True				
ANR	3967184	AssignmentExpression	tot_smp = 0		3967176	0		=			
ANR	3967185	Identifier	tot_smp		3967176	0					
ANR	3967186	PrimaryExpression	0		3967176	1					
ANR	3967187	ExpressionStatement	tot_dual = 0	183:1:4301:4313	3967176	2	True				
ANR	3967188	AssignmentExpression	tot_dual = 0		3967176	0		=			
ANR	3967189	Identifier	tot_dual		3967176	0					
ANR	3967190	PrimaryExpression	0		3967176	1					
ANR	3967191	ExpressionStatement	tot_vn = 0	184:1:4316:4326	3967176	3	True				
ANR	3967192	AssignmentExpression	tot_vn = 0		3967176	0		=			
ANR	3967193	Identifier	tot_vn		3967176	0					
ANR	3967194	PrimaryExpression	0		3967176	1					
ANR	3967195	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		3967176	4					
ANR	3967196	ForInit	idx = 0 ;	186:6:4335:4342	3967176	0	True				
ANR	3967197	AssignmentExpression	idx = 0		3967176	0		=			
ANR	3967198	Identifier	idx		3967176	0					
ANR	3967199	PrimaryExpression	0		3967176	1					
ANR	3967200	Condition	idx < m_parts . length ( )	186:15:4344:4365	3967176	1	True				
ANR	3967201	RelationalExpression	idx < m_parts . length ( )		3967176	0		<			
ANR	3967202	Identifier	idx		3967176	0					
ANR	3967203	CallExpression	m_parts . length ( )		3967176	1					
ANR	3967204	Callee	m_parts . length		3967176	0					
ANR	3967205	MemberAccess	m_parts . length		3967176	0					
ANR	3967206	Identifier	m_parts		3967176	0					
ANR	3967207	Identifier	length		3967176	1					
ANR	3967208	ArgumentList			3967176	1					
ANR	3967209	PostIncDecOperationExpression	idx ++	186:39:4368:4372	3967176	2	True				
ANR	3967210	Identifier	idx		3967176	0					
ANR	3967211	IncDec	++		3967176	1					
ANR	3967212	CompoundStatement		8:46:101:101	3967176	3					
ANR	3967213	IfStatement	if ( m_parts [ idx ] . get_pstate ( ) == BACKED )		3967176	0					
ANR	3967214	Condition	m_parts [ idx ] . get_pstate ( ) == BACKED	187:6:4383:4417	3967176	0	True				
ANR	3967215	EqualityExpression	m_parts [ idx ] . get_pstate ( ) == BACKED		3967176	0		==			
ANR	3967216	CallExpression	m_parts [ idx ] . get_pstate ( )		3967176	0					
ANR	3967217	Callee	m_parts [ idx ] . get_pstate		3967176	0					
ANR	3967218	MemberAccess	m_parts [ idx ] . get_pstate		3967176	0					
ANR	3967219	ArrayIndexing	m_parts [ idx ]		3967176	0					
ANR	3967220	Identifier	m_parts		3967176	0					
ANR	3967221	Identifier	idx		3967176	1					
ANR	3967222	Identifier	get_pstate		3967176	1					
ANR	3967223	ArgumentList			3967176	1					
ANR	3967224	Identifier	BACKED		3967176	1					
ANR	3967225	CompoundStatement		9:43:146:146	3967176	1					
ANR	3967226	SwitchStatement	switch ( m_parts [ idx ] . get_pkind ( ) )		3967176	0					
ANR	3967227	Condition	m_parts [ idx ] . get_pkind ( )	188:10:4432:4455	3967176	0	True				
ANR	3967228	CallExpression	m_parts [ idx ] . get_pkind ( )		3967176	0					
ANR	3967229	Callee	m_parts [ idx ] . get_pkind		3967176	0					
ANR	3967230	MemberAccess	m_parts [ idx ] . get_pkind		3967176	0					
ANR	3967231	ArrayIndexing	m_parts [ idx ]		3967176	0					
ANR	3967232	Identifier	m_parts		3967176	0					
ANR	3967233	Identifier	idx		3967176	1					
ANR	3967234	Identifier	get_pkind		3967176	1					
ANR	3967235	ArgumentList			3967176	1					
ANR	3967236	CompoundStatement		10:36:184:184	3967176	1					
ANR	3967237	Label	case SMP :	189:4:4464:4472	3967176	0	True				
ANR	3967238	Identifier	SMP		3967176	0					
ANR	3967239	ExpressionStatement	tot_smp += m_parts [ idx ] . get_size ( )	190:5:4479:4513	3967176	1	True				
ANR	3967240	AssignmentExpression	tot_smp += m_parts [ idx ] . get_size ( )		3967176	0		+=			
ANR	3967241	Identifier	tot_smp		3967176	0					
ANR	3967242	CallExpression	m_parts [ idx ] . get_size ( )		3967176	1					
ANR	3967243	Callee	m_parts [ idx ] . get_size		3967176	0					
ANR	3967244	MemberAccess	m_parts [ idx ] . get_size		3967176	0					
ANR	3967245	ArrayIndexing	m_parts [ idx ]		3967176	0					
ANR	3967246	Identifier	m_parts		3967176	0					
ANR	3967247	Identifier	idx		3967176	1					
ANR	3967248	Identifier	get_size		3967176	1					
ANR	3967249	ArgumentList			3967176	1					
ANR	3967250	BreakStatement	break ;	191:5:4520:4525	3967176	2	True				
ANR	3967251	Label	case DUAL :	193:4:4532:4541	3967176	3	True				
ANR	3967252	Identifier	DUAL		3967176	0					
ANR	3967253	ExpressionStatement	tot_dual += m_parts [ idx ] . get_size ( )	194:5:4548:4583	3967176	4	True				
ANR	3967254	AssignmentExpression	tot_dual += m_parts [ idx ] . get_size ( )		3967176	0		+=			
ANR	3967255	Identifier	tot_dual		3967176	0					
ANR	3967256	CallExpression	m_parts [ idx ] . get_size ( )		3967176	1					
ANR	3967257	Callee	m_parts [ idx ] . get_size		3967176	0					
ANR	3967258	MemberAccess	m_parts [ idx ] . get_size		3967176	0					
ANR	3967259	ArrayIndexing	m_parts [ idx ]		3967176	0					
ANR	3967260	Identifier	m_parts		3967176	0					
ANR	3967261	Identifier	idx		3967176	1					
ANR	3967262	Identifier	get_size		3967176	1					
ANR	3967263	ArgumentList			3967176	1					
ANR	3967264	BreakStatement	break ;	195:5:4590:4595	3967176	5	True				
ANR	3967265	Label	case VN :	197:4:4602:4609	3967176	6	True				
ANR	3967266	Identifier	VN		3967176	0					
ANR	3967267	ExpressionStatement	tot_dual += m_parts [ idx ] . get_size ( )	198:5:4616:4651	3967176	7	True				
ANR	3967268	AssignmentExpression	tot_dual += m_parts [ idx ] . get_size ( )		3967176	0		+=			
ANR	3967269	Identifier	tot_dual		3967176	0					
ANR	3967270	CallExpression	m_parts [ idx ] . get_size ( )		3967176	1					
ANR	3967271	Callee	m_parts [ idx ] . get_size		3967176	0					
ANR	3967272	MemberAccess	m_parts [ idx ] . get_size		3967176	0					
ANR	3967273	ArrayIndexing	m_parts [ idx ]		3967176	0					
ANR	3967274	Identifier	m_parts		3967176	0					
ANR	3967275	Identifier	idx		3967176	1					
ANR	3967276	Identifier	get_size		3967176	1					
ANR	3967277	ArgumentList			3967176	1					
ANR	3967278	BreakStatement	break ;	199:5:4658:4663	3967176	8	True				
ANR	3967279	Label	default :	201:4:4670:4677	3967176	9	True				
ANR	3967280	Identifier	default		3967176	0					
ANR	3967281	Statement	EXCEPT	202:5:4684:4689	3967176	10	True				
ANR	3967282	Statement	(	202:11:4690:4690	3967176	11	True				
ANR	3967283	Statement	"""PartitionManager::total_backed_partitions(): """	202:12:4691:4737	3967176	12	True				
ANR	3967284	Statement	"""Programmer error!"""	203:6:4745:4763	3967176	13	True				
ANR	3967285	Statement	)	203:25:4764:4764	3967176	14	True				
ANR	3967286	ExpressionStatement		203:26:4765:4765	3967176	15	True				
ANR	3967287	ReturnType	void		3967176	1					
ANR	3967288	Identifier	PartitionManager :: partition_realization		3967176	2					
ANR	3967289	ParameterList	"int & tot_smp , int & tot_dual , int & tot_vn"		3967176	3					
ANR	3967290	Parameter	int & tot_smp	177:45:4229:4240	3967176	0	True				
ANR	3967291	ParameterType	int &		3967176	0					
ANR	3967292	Identifier	tot_smp		3967176	1					
ANR	3967293	Parameter	int & tot_dual	177:59:4243:4255	3967176	1	True				
ANR	3967294	ParameterType	int &		3967176	0					
ANR	3967295	Identifier	tot_dual		3967176	1					
ANR	3967296	Parameter	int & tot_vn	178:1:4260:4270	3967176	2	True				
ANR	3967297	ParameterType	int &		3967176	0					
ANR	3967298	Identifier	tot_vn		3967176	1					
ANR	3967299	CFGEntryNode	ENTRY		3967176		True				
ANR	3967300	CFGExitNode	EXIT		3967176		True				
ANR	3967301	Symbol	m_parts . length		3967176						
ANR	3967302	Symbol	* m_parts		3967176						
ANR	3967303	Symbol	m_parts [ idx ] . get_pkind		3967176						
ANR	3967304	Symbol	m_parts		3967176						
ANR	3967305	Symbol	BACKED		3967176						
ANR	3967306	Symbol	* idx		3967176						
ANR	3967307	Symbol	tot_dual		3967176						
ANR	3967308	Symbol	tot_vn		3967176						
ANR	3967309	Symbol	m_parts [ idx ] . get_size		3967176						
ANR	3967310	Symbol	tot_smp		3967176						
ANR	3967311	Symbol	idx		3967176						
ANR	3967312	Symbol	m_parts [ idx ] . get_pstate		3967176						
ANR	3967313	DeclStmt									
ANR	3967314	Decl							int	int	idx
ANR	3967315	DeclStmt									
ANR	3967316	Decl							int	int	total_smp_idle
ANR	3967317	DeclStmt									
ANR	3967318	Decl							int	int	total_dual_idle
ANR	3967319	DeclStmt									
ANR	3967320	Decl							int	int	total_vn_idle
ANR	3967321	DeclStmt									
ANR	3967322	Decl							MyString	MyString	name
ANR	3967323	DeclStmt									
ANR	3967324	Decl							bool	bool	val
ANR	3967325	DeclStmt									
ANR	3967326	Decl							int	int	smp_backed
ANR	3967327	DeclStmt									
ANR	3967328	Decl							int	int	dual_backed
ANR	3967329	DeclStmt									
ANR	3967330	Decl							int	int	vn_backed
ANR	3967331	Function	PartitionManager :: dump	444:0:12719:12850							
ANR	3967332	FunctionDef	PartitionManager :: dump (int flags)		3967331	0					
ANR	3967333	CompoundStatement		445:0:12758:12850	3967331	0					
ANR	3967334	IdentifierDeclStatement	int idx ;	446:1:12761:12768	3967331	0	True				
ANR	3967335	IdentifierDecl	idx		3967331	0					
ANR	3967336	IdentifierDeclType	int		3967331	0					
ANR	3967337	Identifier	idx		3967331	1					
ANR	3967338	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		3967331	1					
ANR	3967339	ForInit	idx = 0 ;	448:6:12777:12784	3967331	0	True				
ANR	3967340	AssignmentExpression	idx = 0		3967331	0		=			
ANR	3967341	Identifier	idx		3967331	0					
ANR	3967342	PrimaryExpression	0		3967331	1					
ANR	3967343	Condition	idx < m_parts . length ( )	448:15:12786:12807	3967331	1	True				
ANR	3967344	RelationalExpression	idx < m_parts . length ( )		3967331	0		<			
ANR	3967345	Identifier	idx		3967331	0					
ANR	3967346	CallExpression	m_parts . length ( )		3967331	1					
ANR	3967347	Callee	m_parts . length		3967331	0					
ANR	3967348	MemberAccess	m_parts . length		3967331	0					
ANR	3967349	Identifier	m_parts		3967331	0					
ANR	3967350	Identifier	length		3967331	1					
ANR	3967351	ArgumentList			3967331	1					
ANR	3967352	PostIncDecOperationExpression	idx ++	448:39:12810:12814	3967331	2	True				
ANR	3967353	Identifier	idx		3967331	0					
ANR	3967354	IncDec	++		3967331	1					
ANR	3967355	CompoundStatement		4:46:58:58	3967331	3					
ANR	3967356	ExpressionStatement	m_parts [ idx ] . dump ( flags )	449:2:12821:12845	3967331	0	True				
ANR	3967357	CallExpression	m_parts [ idx ] . dump ( flags )		3967331	0					
ANR	3967358	Callee	m_parts [ idx ] . dump		3967331	0					
ANR	3967359	MemberAccess	m_parts [ idx ] . dump		3967331	0					
ANR	3967360	ArrayIndexing	m_parts [ idx ]		3967331	0					
ANR	3967361	Identifier	m_parts		3967331	0					
ANR	3967362	Identifier	idx		3967331	1					
ANR	3967363	Identifier	dump		3967331	1					
ANR	3967364	ArgumentList	flags		3967331	1					
ANR	3967365	Argument	flags		3967331	0					
ANR	3967366	Identifier	flags		3967331	0					
ANR	3967367	ReturnType	void		3967331	1					
ANR	3967368	Identifier	PartitionManager :: dump		3967331	2					
ANR	3967369	ParameterList	int flags		3967331	3					
ANR	3967370	Parameter	int flags	444:28:12747:12755	3967331	0	True				
ANR	3967371	ParameterType	int		3967331	0					
ANR	3967372	Identifier	flags		3967331	1					
ANR	3967373	CFGEntryNode	ENTRY		3967331		True				
ANR	3967374	CFGExitNode	EXIT		3967331		True				
ANR	3967375	Symbol	m_parts . length		3967331						
ANR	3967376	Symbol	* m_parts		3967331						
ANR	3967377	Symbol	m_parts		3967331						
ANR	3967378	Symbol	flags		3967331						
ANR	3967379	Symbol	* idx		3967331						
ANR	3967380	Symbol	idx		3967331						
