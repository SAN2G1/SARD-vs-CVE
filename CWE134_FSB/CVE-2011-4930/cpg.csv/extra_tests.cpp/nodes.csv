command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1312876	File	data/converged/CVE-2011-4930_htcondor/extra_tests.cpp								
ANR	1312877	DeclStmt									
ANR	1312878	Decl							string	string	parsing_text
ANR	1312879	DeclStmt									
ANR	1312880	Decl							string	string	chaining_root_text
ANR	1312881	DeclStmt									
ANR	1312882	Decl							string	string	chaining_child_text
ANR	1312883	DeclStmt									
ANR	1312884	Decl							string	string	dirty_classad_text
ANR	1312885	DeclStmt									
ANR	1312886	Decl							int	"int ( int argc , char * * argv )"	main
ANR	1312887	DeclStmt									
ANR	1312888	Decl							void	void ( void )	test_quoting_bug
ANR	1312889	DeclStmt									
ANR	1312890	Decl							void	void ( void )	test_parsing
ANR	1312891	DeclStmt									
ANR	1312892	Decl							void	"void ( ClassAd * classad_a , ClassAd * classad_b )"	test_parsing_helper
ANR	1312893	DeclStmt									
ANR	1312894	Decl							void	"void ( ClassAd * * classad_a , ClassAd * * classad_b )"	read_from_string
ANR	1312895	DeclStmt									
ANR	1312896	Decl							void	"void ( ClassAd * * classad_a , ClassAd * * classad_b )"	read_from_string_alt
ANR	1312897	DeclStmt									
ANR	1312898	Decl							void	"void ( ClassAd * * classad_a , ClassAd * * classad_b )"	read_from_char
ANR	1312899	DeclStmt									
ANR	1312900	Decl							void	"void ( ClassAd * * classad_a , ClassAd * * classad_b )"	read_from_char_alt
ANR	1312901	DeclStmt									
ANR	1312902	Decl							void	void ( void )	make_file
ANR	1312903	DeclStmt									
ANR	1312904	Decl							void	void ( void )	remove_file
ANR	1312905	DeclStmt									
ANR	1312906	Decl							void	"void ( ClassAd * * classad_a , ClassAd * * classad_b )"	read_from_file
ANR	1312907	DeclStmt									
ANR	1312908	Decl							void	"void ( ClassAd * * classad_a , ClassAd * * classad_b )"	read_from_file_alt
ANR	1312909	DeclStmt									
ANR	1312910	Decl							void	"void ( ClassAd * * classad_a , ClassAd * * classad_b )"	read_from_stream
ANR	1312911	DeclStmt									
ANR	1312912	Decl							void	"void ( ClassAd * * classad_a , ClassAd * * classad_b )"	read_from_stream_alt
ANR	1312913	DeclStmt									
ANR	1312914	Decl							void	"void ( ClassAd * classad_a , ClassAd * classad_b , ClassAd * classad_c )"	check_parse
ANR	1312915	DeclStmt									
ANR	1312916	Decl							void	void ( ClassAd * classad )	check_classad_a
ANR	1312917	DeclStmt									
ANR	1312918	Decl							void	void ( ClassAd * classad )	check_classad_b
ANR	1312919	DeclStmt									
ANR	1312920	Decl							void	void ( void )	test_chaining
ANR	1312921	DeclStmt									
ANR	1312922	Decl							void	void ( void )	test_dirty
ANR	1312923	DeclStmt									
ANR	1312924	Decl							void	void ( void )	test_user_functions
ANR	1312925	DeclStmt									
ANR	1312926	Decl							bool	"bool ( const char * name , const ArgumentList & arguments , EvalState & state , Value & result )"	triple
ANR	1312927	Function	test_quoting_bug	94:0:3197:3493							
ANR	1312928	FunctionDef	test_quoting_bug ()		1312927	0					
ANR	1312929	CompoundStatement		95:0:3232:3493	1312927	0					
ANR	1312930	IdentifierDeclStatement	ClassAdParser par ;	96:4:3238:3256	1312927	0	True				
ANR	1312931	IdentifierDecl	par		1312927	0					
ANR	1312932	IdentifierDeclType	ClassAdParser		1312927	0					
ANR	1312933	Identifier	par		1312927	1					
ANR	1312934	IdentifierDeclStatement	"string attr = ""other.GlueCEStateStatus == \\""Production\\"""" ;"	97:4:3262:3319	1312927	1	True				
ANR	1312935	IdentifierDecl	"attr = ""other.GlueCEStateStatus == \\""Production\\"""""		1312927	0					
ANR	1312936	IdentifierDeclType	string		1312927	0					
ANR	1312937	Identifier	attr		1312927	1					
ANR	1312938	AssignmentExpression	"attr = ""other.GlueCEStateStatus == \\""Production\\"""""		1312927	2		=			
ANR	1312939	Identifier	attr		1312927	0					
ANR	1312940	PrimaryExpression	"""other.GlueCEStateStatus == \\""Production\\"""""		1312927	1					
ANR	1312941	IfStatement	"if ( ! par . ParseExpression ( attr , true ) )"		1312927	2					
ANR	1312942	Condition	"! par . ParseExpression ( attr , true )"	98:8:3329:3360	1312927	0	True				
ANR	1312943	UnaryOperationExpression	"! par . ParseExpression ( attr , true )"		1312927	0					
ANR	1312944	UnaryOperator	!		1312927	0					
ANR	1312945	CallExpression	"par . ParseExpression ( attr , true )"		1312927	1					
ANR	1312946	Callee	par . ParseExpression		1312927	0					
ANR	1312947	MemberAccess	par . ParseExpression		1312927	0					
ANR	1312948	Identifier	par		1312927	0					
ANR	1312949	Identifier	ParseExpression		1312927	1					
ANR	1312950	ArgumentList	attr		1312927	1					
ANR	1312951	Argument	attr		1312927	0					
ANR	1312952	Identifier	attr		1312927	0					
ANR	1312953	Argument	true		1312927	1					
ANR	1312954	Identifier	true		1312927	0					
ANR	1312955	CompoundStatement		4:42:130:130	1312927	1					
ANR	1312956	ExpressionStatement	"cout << ""Error in parsing quotes.\\n"""	99:8:3373:3409	1312927	0	True				
ANR	1312957	ShiftExpression	"cout << ""Error in parsing quotes.\\n"""		1312927	0		<<			
ANR	1312958	Identifier	cout		1312927	0					
ANR	1312959	PrimaryExpression	"""Error in parsing quotes.\\n"""		1312927	1					
ANR	1312960	ElseStatement	else		1312927	0					
ANR	1312961	CompoundStatement		6:11:189:189	1312927	0					
ANR	1312962	ExpressionStatement	"cout << ""No problem in parsing quotes.\\n"""	101:8:3432:3473	1312927	0	True				
ANR	1312963	ShiftExpression	"cout << ""No problem in parsing quotes.\\n"""		1312927	0		<<			
ANR	1312964	Identifier	cout		1312927	0					
ANR	1312965	PrimaryExpression	"""No problem in parsing quotes.\\n"""		1312927	1					
ANR	1312966	ReturnStatement	return ;	103:4:3485:3491	1312927	3	True				
ANR	1312967	ReturnType	static void		1312927	1					
ANR	1312968	Identifier	test_quoting_bug		1312927	2					
ANR	1312969	ParameterList			1312927	3					
ANR	1312970	CFGEntryNode	ENTRY		1312927		True				
ANR	1312971	CFGExitNode	EXIT		1312927		True				
ANR	1312972	Symbol	par		1312927						
ANR	1312973	Symbol	true		1312927						
ANR	1312974	Symbol	par . ParseExpression		1312927						
ANR	1312975	Symbol	attr		1312927						
ANR	1312976	Function	test_parsing	106:0:3496:4322							
ANR	1312977	FunctionDef	test_parsing ()		1312976	0					
ANR	1312978	CompoundStatement		107:0:3527:4322	1312976	0					
ANR	1312979	IdentifierDeclStatement	"ClassAd * classad_a , * classad_b ;"	108:1:3530:3566	1312976	0	True				
ANR	1312980	IdentifierDecl	* classad_a		1312976	0					
ANR	1312981	IdentifierDeclType	ClassAd *		1312976	0					
ANR	1312982	Identifier	classad_a		1312976	1					
ANR	1312983	IdentifierDecl	* classad_b		1312976	1					
ANR	1312984	IdentifierDeclType	ClassAd *		1312976	0					
ANR	1312985	Identifier	classad_b		1312976	1					
ANR	1312986	ExpressionStatement	"read_from_string ( & classad_a , & classad_b )"	110:1:3570:3610	1312976	1	True				
ANR	1312987	CallExpression	"read_from_string ( & classad_a , & classad_b )"		1312976	0					
ANR	1312988	Callee	read_from_string		1312976	0					
ANR	1312989	Identifier	read_from_string		1312976	0					
ANR	1312990	ArgumentList	& classad_a		1312976	1					
ANR	1312991	Argument	& classad_a		1312976	0					
ANR	1312992	UnaryOperationExpression	& classad_a		1312976	0					
ANR	1312993	UnaryOperator	&		1312976	0					
ANR	1312994	Identifier	classad_a		1312976	1					
ANR	1312995	Argument	& classad_b		1312976	1					
ANR	1312996	UnaryOperationExpression	& classad_b		1312976	0					
ANR	1312997	UnaryOperator	&		1312976	0					
ANR	1312998	Identifier	classad_b		1312976	1					
ANR	1312999	ExpressionStatement	"test_parsing_helper ( classad_a , classad_b )"	111:1:3613:3654	1312976	2	True				
ANR	1313000	CallExpression	"test_parsing_helper ( classad_a , classad_b )"		1312976	0					
ANR	1313001	Callee	test_parsing_helper		1312976	0					
ANR	1313002	Identifier	test_parsing_helper		1312976	0					
ANR	1313003	ArgumentList	classad_a		1312976	1					
ANR	1313004	Argument	classad_a		1312976	0					
ANR	1313005	Identifier	classad_a		1312976	0					
ANR	1313006	Argument	classad_b		1312976	1					
ANR	1313007	Identifier	classad_b		1312976	0					
ANR	1313008	ExpressionStatement	"read_from_string_alt ( & classad_a , & classad_b )"	113:1:3658:3702	1312976	3	True				
ANR	1313009	CallExpression	"read_from_string_alt ( & classad_a , & classad_b )"		1312976	0					
ANR	1313010	Callee	read_from_string_alt		1312976	0					
ANR	1313011	Identifier	read_from_string_alt		1312976	0					
ANR	1313012	ArgumentList	& classad_a		1312976	1					
ANR	1313013	Argument	& classad_a		1312976	0					
ANR	1313014	UnaryOperationExpression	& classad_a		1312976	0					
ANR	1313015	UnaryOperator	&		1312976	0					
ANR	1313016	Identifier	classad_a		1312976	1					
ANR	1313017	Argument	& classad_b		1312976	1					
ANR	1313018	UnaryOperationExpression	& classad_b		1312976	0					
ANR	1313019	UnaryOperator	&		1312976	0					
ANR	1313020	Identifier	classad_b		1312976	1					
ANR	1313021	ExpressionStatement	"test_parsing_helper ( classad_a , classad_b )"	114:1:3705:3746	1312976	4	True				
ANR	1313022	CallExpression	"test_parsing_helper ( classad_a , classad_b )"		1312976	0					
ANR	1313023	Callee	test_parsing_helper		1312976	0					
ANR	1313024	Identifier	test_parsing_helper		1312976	0					
ANR	1313025	ArgumentList	classad_a		1312976	1					
ANR	1313026	Argument	classad_a		1312976	0					
ANR	1313027	Identifier	classad_a		1312976	0					
ANR	1313028	Argument	classad_b		1312976	1					
ANR	1313029	Identifier	classad_b		1312976	0					
ANR	1313030	ExpressionStatement	"read_from_char ( & classad_a , & classad_b )"	116:1:3750:3788	1312976	5	True				
ANR	1313031	CallExpression	"read_from_char ( & classad_a , & classad_b )"		1312976	0					
ANR	1313032	Callee	read_from_char		1312976	0					
ANR	1313033	Identifier	read_from_char		1312976	0					
ANR	1313034	ArgumentList	& classad_a		1312976	1					
ANR	1313035	Argument	& classad_a		1312976	0					
ANR	1313036	UnaryOperationExpression	& classad_a		1312976	0					
ANR	1313037	UnaryOperator	&		1312976	0					
ANR	1313038	Identifier	classad_a		1312976	1					
ANR	1313039	Argument	& classad_b		1312976	1					
ANR	1313040	UnaryOperationExpression	& classad_b		1312976	0					
ANR	1313041	UnaryOperator	&		1312976	0					
ANR	1313042	Identifier	classad_b		1312976	1					
ANR	1313043	ExpressionStatement	"test_parsing_helper ( classad_a , classad_b )"	117:1:3791:3832	1312976	6	True				
ANR	1313044	CallExpression	"test_parsing_helper ( classad_a , classad_b )"		1312976	0					
ANR	1313045	Callee	test_parsing_helper		1312976	0					
ANR	1313046	Identifier	test_parsing_helper		1312976	0					
ANR	1313047	ArgumentList	classad_a		1312976	1					
ANR	1313048	Argument	classad_a		1312976	0					
ANR	1313049	Identifier	classad_a		1312976	0					
ANR	1313050	Argument	classad_b		1312976	1					
ANR	1313051	Identifier	classad_b		1312976	0					
ANR	1313052	ExpressionStatement	"read_from_char_alt ( & classad_a , & classad_b )"	119:1:3836:3878	1312976	7	True				
ANR	1313053	CallExpression	"read_from_char_alt ( & classad_a , & classad_b )"		1312976	0					
ANR	1313054	Callee	read_from_char_alt		1312976	0					
ANR	1313055	Identifier	read_from_char_alt		1312976	0					
ANR	1313056	ArgumentList	& classad_a		1312976	1					
ANR	1313057	Argument	& classad_a		1312976	0					
ANR	1313058	UnaryOperationExpression	& classad_a		1312976	0					
ANR	1313059	UnaryOperator	&		1312976	0					
ANR	1313060	Identifier	classad_a		1312976	1					
ANR	1313061	Argument	& classad_b		1312976	1					
ANR	1313062	UnaryOperationExpression	& classad_b		1312976	0					
ANR	1313063	UnaryOperator	&		1312976	0					
ANR	1313064	Identifier	classad_b		1312976	1					
ANR	1313065	ExpressionStatement	"test_parsing_helper ( classad_a , classad_b )"	120:1:3881:3922	1312976	8	True				
ANR	1313066	CallExpression	"test_parsing_helper ( classad_a , classad_b )"		1312976	0					
ANR	1313067	Callee	test_parsing_helper		1312976	0					
ANR	1313068	Identifier	test_parsing_helper		1312976	0					
ANR	1313069	ArgumentList	classad_a		1312976	1					
ANR	1313070	Argument	classad_a		1312976	0					
ANR	1313071	Identifier	classad_a		1312976	0					
ANR	1313072	Argument	classad_b		1312976	1					
ANR	1313073	Identifier	classad_b		1312976	0					
ANR	1313074	ExpressionStatement	make_file ( )	122:1:3926:3937	1312976	9	True				
ANR	1313075	CallExpression	make_file ( )		1312976	0					
ANR	1313076	Callee	make_file		1312976	0					
ANR	1313077	Identifier	make_file		1312976	0					
ANR	1313078	ArgumentList			1312976	1					
ANR	1313079	ExpressionStatement	"read_from_file ( & classad_a , & classad_b )"	124:1:3941:3979	1312976	10	True				
ANR	1313080	CallExpression	"read_from_file ( & classad_a , & classad_b )"		1312976	0					
ANR	1313081	Callee	read_from_file		1312976	0					
ANR	1313082	Identifier	read_from_file		1312976	0					
ANR	1313083	ArgumentList	& classad_a		1312976	1					
ANR	1313084	Argument	& classad_a		1312976	0					
ANR	1313085	UnaryOperationExpression	& classad_a		1312976	0					
ANR	1313086	UnaryOperator	&		1312976	0					
ANR	1313087	Identifier	classad_a		1312976	1					
ANR	1313088	Argument	& classad_b		1312976	1					
ANR	1313089	UnaryOperationExpression	& classad_b		1312976	0					
ANR	1313090	UnaryOperator	&		1312976	0					
ANR	1313091	Identifier	classad_b		1312976	1					
ANR	1313092	ExpressionStatement	"test_parsing_helper ( classad_a , classad_b )"	125:1:3982:4023	1312976	11	True				
ANR	1313093	CallExpression	"test_parsing_helper ( classad_a , classad_b )"		1312976	0					
ANR	1313094	Callee	test_parsing_helper		1312976	0					
ANR	1313095	Identifier	test_parsing_helper		1312976	0					
ANR	1313096	ArgumentList	classad_a		1312976	1					
ANR	1313097	Argument	classad_a		1312976	0					
ANR	1313098	Identifier	classad_a		1312976	0					
ANR	1313099	Argument	classad_b		1312976	1					
ANR	1313100	Identifier	classad_b		1312976	0					
ANR	1313101	ExpressionStatement	"read_from_file_alt ( & classad_a , & classad_b )"	127:1:4027:4069	1312976	12	True				
ANR	1313102	CallExpression	"read_from_file_alt ( & classad_a , & classad_b )"		1312976	0					
ANR	1313103	Callee	read_from_file_alt		1312976	0					
ANR	1313104	Identifier	read_from_file_alt		1312976	0					
ANR	1313105	ArgumentList	& classad_a		1312976	1					
ANR	1313106	Argument	& classad_a		1312976	0					
ANR	1313107	UnaryOperationExpression	& classad_a		1312976	0					
ANR	1313108	UnaryOperator	&		1312976	0					
ANR	1313109	Identifier	classad_a		1312976	1					
ANR	1313110	Argument	& classad_b		1312976	1					
ANR	1313111	UnaryOperationExpression	& classad_b		1312976	0					
ANR	1313112	UnaryOperator	&		1312976	0					
ANR	1313113	Identifier	classad_b		1312976	1					
ANR	1313114	ExpressionStatement	"test_parsing_helper ( classad_a , classad_b )"	128:1:4072:4113	1312976	13	True				
ANR	1313115	CallExpression	"test_parsing_helper ( classad_a , classad_b )"		1312976	0					
ANR	1313116	Callee	test_parsing_helper		1312976	0					
ANR	1313117	Identifier	test_parsing_helper		1312976	0					
ANR	1313118	ArgumentList	classad_a		1312976	1					
ANR	1313119	Argument	classad_a		1312976	0					
ANR	1313120	Identifier	classad_a		1312976	0					
ANR	1313121	Argument	classad_b		1312976	1					
ANR	1313122	Identifier	classad_b		1312976	0					
ANR	1313123	ExpressionStatement	"read_from_stream ( & classad_a , & classad_b )"	130:1:4117:4157	1312976	14	True				
ANR	1313124	CallExpression	"read_from_stream ( & classad_a , & classad_b )"		1312976	0					
ANR	1313125	Callee	read_from_stream		1312976	0					
ANR	1313126	Identifier	read_from_stream		1312976	0					
ANR	1313127	ArgumentList	& classad_a		1312976	1					
ANR	1313128	Argument	& classad_a		1312976	0					
ANR	1313129	UnaryOperationExpression	& classad_a		1312976	0					
ANR	1313130	UnaryOperator	&		1312976	0					
ANR	1313131	Identifier	classad_a		1312976	1					
ANR	1313132	Argument	& classad_b		1312976	1					
ANR	1313133	UnaryOperationExpression	& classad_b		1312976	0					
ANR	1313134	UnaryOperator	&		1312976	0					
ANR	1313135	Identifier	classad_b		1312976	1					
ANR	1313136	ExpressionStatement	"test_parsing_helper ( classad_a , classad_b )"	131:1:4160:4201	1312976	15	True				
ANR	1313137	CallExpression	"test_parsing_helper ( classad_a , classad_b )"		1312976	0					
ANR	1313138	Callee	test_parsing_helper		1312976	0					
ANR	1313139	Identifier	test_parsing_helper		1312976	0					
ANR	1313140	ArgumentList	classad_a		1312976	1					
ANR	1313141	Argument	classad_a		1312976	0					
ANR	1313142	Identifier	classad_a		1312976	0					
ANR	1313143	Argument	classad_b		1312976	1					
ANR	1313144	Identifier	classad_b		1312976	0					
ANR	1313145	ExpressionStatement	"read_from_stream_alt ( & classad_a , & classad_b )"	133:1:4205:4249	1312976	16	True				
ANR	1313146	CallExpression	"read_from_stream_alt ( & classad_a , & classad_b )"		1312976	0					
ANR	1313147	Callee	read_from_stream_alt		1312976	0					
ANR	1313148	Identifier	read_from_stream_alt		1312976	0					
ANR	1313149	ArgumentList	& classad_a		1312976	1					
ANR	1313150	Argument	& classad_a		1312976	0					
ANR	1313151	UnaryOperationExpression	& classad_a		1312976	0					
ANR	1313152	UnaryOperator	&		1312976	0					
ANR	1313153	Identifier	classad_a		1312976	1					
ANR	1313154	Argument	& classad_b		1312976	1					
ANR	1313155	UnaryOperationExpression	& classad_b		1312976	0					
ANR	1313156	UnaryOperator	&		1312976	0					
ANR	1313157	Identifier	classad_b		1312976	1					
ANR	1313158	ExpressionStatement	"test_parsing_helper ( classad_a , classad_b )"	134:1:4252:4293	1312976	17	True				
ANR	1313159	CallExpression	"test_parsing_helper ( classad_a , classad_b )"		1312976	0					
ANR	1313160	Callee	test_parsing_helper		1312976	0					
ANR	1313161	Identifier	test_parsing_helper		1312976	0					
ANR	1313162	ArgumentList	classad_a		1312976	1					
ANR	1313163	Argument	classad_a		1312976	0					
ANR	1313164	Identifier	classad_a		1312976	0					
ANR	1313165	Argument	classad_b		1312976	1					
ANR	1313166	Identifier	classad_b		1312976	0					
ANR	1313167	ExpressionStatement	remove_file ( )	136:1:4297:4310	1312976	18	True				
ANR	1313168	CallExpression	remove_file ( )		1312976	0					
ANR	1313169	Callee	remove_file		1312976	0					
ANR	1313170	Identifier	remove_file		1312976	0					
ANR	1313171	ArgumentList			1312976	1					
ANR	1313172	ReturnStatement	return ;	138:1:4314:4320	1312976	19	True				
ANR	1313173	ReturnType	static void		1312976	1					
ANR	1313174	Identifier	test_parsing		1312976	2					
ANR	1313175	ParameterList			1312976	3					
ANR	1313176	CFGEntryNode	ENTRY		1312976		True				
ANR	1313177	CFGExitNode	EXIT		1312976		True				
ANR	1313178	Symbol	& classad_a		1312976						
ANR	1313179	Symbol	& classad_b		1312976						
ANR	1313180	Symbol	classad_a		1312976						
ANR	1313181	Symbol	classad_b		1312976						
ANR	1313182	Function	test_parsing_helper	141:0:4325:4507							
ANR	1313183	FunctionDef	"test_parsing_helper (ClassAd * classad_a , ClassAd * classad_b)"		1313182	0					
ANR	1313184	CompoundStatement		144:0:4400:4507	1313182	0					
ANR	1313185	ExpressionStatement	check_classad_a ( classad_a )	145:1:4403:4429	1313182	0	True				
ANR	1313186	CallExpression	check_classad_a ( classad_a )		1313182	0					
ANR	1313187	Callee	check_classad_a		1313182	0					
ANR	1313188	Identifier	check_classad_a		1313182	0					
ANR	1313189	ArgumentList	classad_a		1313182	1					
ANR	1313190	Argument	classad_a		1313182	0					
ANR	1313191	Identifier	classad_a		1313182	0					
ANR	1313192	ExpressionStatement	check_classad_b ( classad_b )	146:1:4432:4458	1313182	1	True				
ANR	1313193	CallExpression	check_classad_b ( classad_b )		1313182	0					
ANR	1313194	Callee	check_classad_b		1313182	0					
ANR	1313195	Identifier	check_classad_b		1313182	0					
ANR	1313196	ArgumentList	classad_b		1313182	1					
ANR	1313197	Argument	classad_b		1313182	0					
ANR	1313198	Identifier	classad_b		1313182	0					
ANR	1313199	Statement	delete	147:1:4461:4466	1313182	2	True				
ANR	1313200	ExpressionStatement	classad_a	147:8:4468:4477	1313182	3	True				
ANR	1313201	Identifier	classad_a		1313182	0					
ANR	1313202	Statement	delete	148:1:4480:4485	1313182	4	True				
ANR	1313203	ExpressionStatement	classad_b	148:8:4487:4496	1313182	5	True				
ANR	1313204	Identifier	classad_b		1313182	0					
ANR	1313205	ReturnStatement	return ;	149:1:4499:4505	1313182	6	True				
ANR	1313206	ReturnType	static void		1313182	1					
ANR	1313207	Identifier	test_parsing_helper		1313182	2					
ANR	1313208	ParameterList	"ClassAd * classad_a , ClassAd * classad_b"		1313182	3					
ANR	1313209	Parameter	ClassAd * classad_a	142:1:4359:4376	1313182	0	True				
ANR	1313210	ParameterType	ClassAd *		1313182	0					
ANR	1313211	Identifier	classad_a		1313182	1					
ANR	1313212	Parameter	ClassAd * classad_b	143:1:4380:4397	1313182	1	True				
ANR	1313213	ParameterType	ClassAd *		1313182	0					
ANR	1313214	Identifier	classad_b		1313182	1					
ANR	1313215	CFGEntryNode	ENTRY		1313182		True				
ANR	1313216	CFGExitNode	EXIT		1313182		True				
ANR	1313217	Symbol	classad_a		1313182						
ANR	1313218	Symbol	classad_b		1313182						
ANR	1313219	Function	read_from_string	152:0:4510:4924							
ANR	1313220	FunctionDef	"read_from_string (ClassAd * * classad_a , ClassAd * * classad_b)"		1313219	0					
ANR	1313221	CompoundStatement		153:0:4581:4924	1313219	0					
ANR	1313222	IdentifierDeclStatement	ClassAdParser parser ;	154:1:4584:4604	1313219	0	True				
ANR	1313223	IdentifierDecl	parser		1313219	0					
ANR	1313224	IdentifierDeclType	ClassAdParser		1313219	0					
ANR	1313225	Identifier	parser		1313219	1					
ANR	1313226	IdentifierDeclStatement	ClassAd * classad_c ;	155:1:4607:4625	1313219	1	True				
ANR	1313227	IdentifierDecl	* classad_c		1313219	0					
ANR	1313228	IdentifierDeclType	ClassAd *		1313219	0					
ANR	1313229	Identifier	classad_c		1313219	1					
ANR	1313230	IdentifierDeclStatement	int offset ;	156:1:4628:4638	1313219	2	True				
ANR	1313231	IdentifierDecl	offset		1313219	0					
ANR	1313232	IdentifierDeclType	int		1313219	0					
ANR	1313233	Identifier	offset		1313219	1					
ANR	1313234	ExpressionStatement	"cout << ""Reading from C++ string.\\n"""	158:1:4642:4678	1313219	3	True				
ANR	1313235	ShiftExpression	"cout << ""Reading from C++ string.\\n"""		1313219	0		<<			
ANR	1313236	Identifier	cout		1313219	0					
ANR	1313237	PrimaryExpression	"""Reading from C++ string.\\n"""		1313219	1					
ANR	1313238	ExpressionStatement	offset = 0	160:1:4682:4692	1313219	4	True				
ANR	1313239	AssignmentExpression	offset = 0		1313219	0		=			
ANR	1313240	Identifier	offset		1313219	0					
ANR	1313241	PrimaryExpression	0		1313219	1					
ANR	1313242	ExpressionStatement	"* classad_a = parser . ParseClassAd ( parsing_text , offset )"	161:1:4695:4749	1313219	5	True				
ANR	1313243	AssignmentExpression	"* classad_a = parser . ParseClassAd ( parsing_text , offset )"		1313219	0		=			
ANR	1313244	UnaryOperationExpression	* classad_a		1313219	0					
ANR	1313245	UnaryOperator	*		1313219	0					
ANR	1313246	Identifier	classad_a		1313219	1					
ANR	1313247	CallExpression	"parser . ParseClassAd ( parsing_text , offset )"		1313219	1					
ANR	1313248	Callee	parser . ParseClassAd		1313219	0					
ANR	1313249	MemberAccess	parser . ParseClassAd		1313219	0					
ANR	1313250	Identifier	parser		1313219	0					
ANR	1313251	Identifier	ParseClassAd		1313219	1					
ANR	1313252	ArgumentList	parsing_text		1313219	1					
ANR	1313253	Argument	parsing_text		1313219	0					
ANR	1313254	Identifier	parsing_text		1313219	0					
ANR	1313255	Argument	offset		1313219	1					
ANR	1313256	Identifier	offset		1313219	0					
ANR	1313257	ExpressionStatement	"* classad_b = parser . ParseClassAd ( parsing_text , offset )"	162:1:4752:4806	1313219	6	True				
ANR	1313258	AssignmentExpression	"* classad_b = parser . ParseClassAd ( parsing_text , offset )"		1313219	0		=			
ANR	1313259	UnaryOperationExpression	* classad_b		1313219	0					
ANR	1313260	UnaryOperator	*		1313219	0					
ANR	1313261	Identifier	classad_b		1313219	1					
ANR	1313262	CallExpression	"parser . ParseClassAd ( parsing_text , offset )"		1313219	1					
ANR	1313263	Callee	parser . ParseClassAd		1313219	0					
ANR	1313264	MemberAccess	parser . ParseClassAd		1313219	0					
ANR	1313265	Identifier	parser		1313219	0					
ANR	1313266	Identifier	ParseClassAd		1313219	1					
ANR	1313267	ArgumentList	parsing_text		1313219	1					
ANR	1313268	Argument	parsing_text		1313219	0					
ANR	1313269	Identifier	parsing_text		1313219	0					
ANR	1313270	Argument	offset		1313219	1					
ANR	1313271	Identifier	offset		1313219	0					
ANR	1313272	ExpressionStatement	"classad_c = parser . ParseClassAd ( parsing_text , offset )"	163:1:4809:4862	1313219	7	True				
ANR	1313273	AssignmentExpression	"classad_c = parser . ParseClassAd ( parsing_text , offset )"		1313219	0		=			
ANR	1313274	Identifier	classad_c		1313219	0					
ANR	1313275	CallExpression	"parser . ParseClassAd ( parsing_text , offset )"		1313219	1					
ANR	1313276	Callee	parser . ParseClassAd		1313219	0					
ANR	1313277	MemberAccess	parser . ParseClassAd		1313219	0					
ANR	1313278	Identifier	parser		1313219	0					
ANR	1313279	Identifier	ParseClassAd		1313219	1					
ANR	1313280	ArgumentList	parsing_text		1313219	1					
ANR	1313281	Argument	parsing_text		1313219	0					
ANR	1313282	Identifier	parsing_text		1313219	0					
ANR	1313283	Argument	offset		1313219	1					
ANR	1313284	Identifier	offset		1313219	0					
ANR	1313285	ExpressionStatement	"check_parse ( * classad_a , * classad_b , classad_c )"	165:1:4866:4912	1313219	8	True				
ANR	1313286	CallExpression	"check_parse ( * classad_a , * classad_b , classad_c )"		1313219	0					
ANR	1313287	Callee	check_parse		1313219	0					
ANR	1313288	Identifier	check_parse		1313219	0					
ANR	1313289	ArgumentList	* classad_a		1313219	1					
ANR	1313290	Argument	* classad_a		1313219	0					
ANR	1313291	UnaryOperationExpression	* classad_a		1313219	0					
ANR	1313292	UnaryOperator	*		1313219	0					
ANR	1313293	Identifier	classad_a		1313219	1					
ANR	1313294	Argument	* classad_b		1313219	1					
ANR	1313295	UnaryOperationExpression	* classad_b		1313219	0					
ANR	1313296	UnaryOperator	*		1313219	0					
ANR	1313297	Identifier	classad_b		1313219	1					
ANR	1313298	Argument	classad_c		1313219	2					
ANR	1313299	Identifier	classad_c		1313219	0					
ANR	1313300	ReturnStatement	return ;	167:1:4916:4922	1313219	9	True				
ANR	1313301	ReturnType	static void		1313219	1					
ANR	1313302	Identifier	read_from_string		1313219	2					
ANR	1313303	ParameterList	"ClassAd * * classad_a , ClassAd * * classad_b"		1313219	3					
ANR	1313304	Parameter	ClassAd * * classad_a	152:29:4539:4557	1313219	0	True				
ANR	1313305	ParameterType	ClassAd * *		1313219	0					
ANR	1313306	Identifier	classad_a		1313219	1					
ANR	1313307	Parameter	ClassAd * * classad_b	152:50:4560:4578	1313219	1	True				
ANR	1313308	ParameterType	ClassAd * *		1313219	0					
ANR	1313309	Identifier	classad_b		1313219	1					
ANR	1313310	CFGEntryNode	ENTRY		1313219		True				
ANR	1313311	CFGExitNode	EXIT		1313219		True				
ANR	1313312	Symbol	* classad_a		1313219						
ANR	1313313	Symbol	parsing_text		1313219						
ANR	1313314	Symbol	parser		1313219						
ANR	1313315	Symbol	offset		1313219						
ANR	1313316	Symbol	classad_a		1313219						
ANR	1313317	Symbol	* classad_b		1313219						
ANR	1313318	Symbol	classad_c		1313219						
ANR	1313319	Symbol	parser . ParseClassAd		1313219						
ANR	1313320	Symbol	classad_b		1313219						
ANR	1313321	Function	read_from_string_alt	170:0:4927:5487							
ANR	1313322	FunctionDef	"read_from_string_alt (ClassAd * * classad_a , ClassAd * * classad_b)"		1313321	0					
ANR	1313323	CompoundStatement		171:0:5002:5487	1313321	0					
ANR	1313324	IdentifierDeclStatement	ClassAdParser parser ;	172:1:5005:5025	1313321	0	True				
ANR	1313325	IdentifierDecl	parser		1313321	0					
ANR	1313326	IdentifierDeclType	ClassAdParser		1313321	0					
ANR	1313327	Identifier	parser		1313321	1					
ANR	1313328	IdentifierDeclStatement	ClassAd * classad_c ;	173:1:5028:5046	1313321	1	True				
ANR	1313329	IdentifierDecl	* classad_c		1313321	0					
ANR	1313330	IdentifierDeclType	ClassAd *		1313321	0					
ANR	1313331	Identifier	classad_c		1313321	1					
ANR	1313332	IdentifierDeclStatement	int offset ;	174:1:5049:5059	1313321	2	True				
ANR	1313333	IdentifierDecl	offset		1313321	0					
ANR	1313334	IdentifierDeclType	int		1313321	0					
ANR	1313335	Identifier	offset		1313321	1					
ANR	1313336	ExpressionStatement	"cout << ""Reading from C++ string (alt parse).\\n"""	176:1:5063:5111	1313321	3	True				
ANR	1313337	ShiftExpression	"cout << ""Reading from C++ string (alt parse).\\n"""		1313321	0		<<			
ANR	1313338	Identifier	cout		1313321	0					
ANR	1313339	PrimaryExpression	"""Reading from C++ string (alt parse).\\n"""		1313321	1					
ANR	1313340	ExpressionStatement	offset = 0	178:1:5115:5125	1313321	4	True				
ANR	1313341	AssignmentExpression	offset = 0		1313321	0		=			
ANR	1313342	Identifier	offset		1313321	0					
ANR	1313343	PrimaryExpression	0		1313321	1					
ANR	1313344	Statement	*	179:1:5128:5128	1313321	5	True				
ANR	1313345	Statement	classad_a	179:2:5129:5137	1313321	6	True				
ANR	1313346	Statement	=	179:12:5139:5139	1313321	7	True				
ANR	1313347	Statement	new	179:14:5141:5143	1313321	8	True				
ANR	1313348	ExpressionStatement	ClassAd	179:18:5145:5152	1313321	9	True				
ANR	1313349	Identifier	ClassAd		1313321	0					
ANR	1313350	Statement	*	180:1:5155:5155	1313321	10	True				
ANR	1313351	Statement	classad_b	180:2:5156:5164	1313321	11	True				
ANR	1313352	Statement	=	180:12:5166:5166	1313321	12	True				
ANR	1313353	Statement	new	180:14:5168:5170	1313321	13	True				
ANR	1313354	ExpressionStatement	ClassAd	180:18:5172:5179	1313321	14	True				
ANR	1313355	Identifier	ClassAd		1313321	0					
ANR	1313356	Statement	classad_c	181:1:5182:5190	1313321	15	True				
ANR	1313357	Statement	=	181:12:5193:5193	1313321	16	True				
ANR	1313358	Statement	new	181:14:5195:5197	1313321	17	True				
ANR	1313359	ExpressionStatement	ClassAd	181:18:5199:5206	1313321	18	True				
ANR	1313360	Identifier	ClassAd		1313321	0					
ANR	1313361	ExpressionStatement	"parser . ParseClassAd ( parsing_text , * * classad_a , offset )"	182:1:5209:5263	1313321	19	True				
ANR	1313362	CallExpression	"parser . ParseClassAd ( parsing_text , * * classad_a , offset )"		1313321	0					
ANR	1313363	Callee	parser . ParseClassAd		1313321	0					
ANR	1313364	MemberAccess	parser . ParseClassAd		1313321	0					
ANR	1313365	Identifier	parser		1313321	0					
ANR	1313366	Identifier	ParseClassAd		1313321	1					
ANR	1313367	ArgumentList	parsing_text		1313321	1					
ANR	1313368	Argument	parsing_text		1313321	0					
ANR	1313369	Identifier	parsing_text		1313321	0					
ANR	1313370	Argument	* * classad_a		1313321	1					
ANR	1313371	UnaryOperationExpression	* * classad_a		1313321	0					
ANR	1313372	UnaryOperator	*		1313321	0					
ANR	1313373	UnaryOperationExpression	* classad_a		1313321	1					
ANR	1313374	UnaryOperator	*		1313321	0					
ANR	1313375	Identifier	classad_a		1313321	1					
ANR	1313376	Argument	offset		1313321	2					
ANR	1313377	Identifier	offset		1313321	0					
ANR	1313378	ExpressionStatement	"parser . ParseClassAd ( parsing_text , * * classad_b , offset )"	183:1:5266:5320	1313321	20	True				
ANR	1313379	CallExpression	"parser . ParseClassAd ( parsing_text , * * classad_b , offset )"		1313321	0					
ANR	1313380	Callee	parser . ParseClassAd		1313321	0					
ANR	1313381	MemberAccess	parser . ParseClassAd		1313321	0					
ANR	1313382	Identifier	parser		1313321	0					
ANR	1313383	Identifier	ParseClassAd		1313321	1					
ANR	1313384	ArgumentList	parsing_text		1313321	1					
ANR	1313385	Argument	parsing_text		1313321	0					
ANR	1313386	Identifier	parsing_text		1313321	0					
ANR	1313387	Argument	* * classad_b		1313321	1					
ANR	1313388	UnaryOperationExpression	* * classad_b		1313321	0					
ANR	1313389	UnaryOperator	*		1313321	0					
ANR	1313390	UnaryOperationExpression	* classad_b		1313321	1					
ANR	1313391	UnaryOperator	*		1313321	0					
ANR	1313392	Identifier	classad_b		1313321	1					
ANR	1313393	Argument	offset		1313321	2					
ANR	1313394	Identifier	offset		1313321	0					
ANR	1313395	IfStatement	"if ( ! parser . ParseClassAd ( parsing_text , * classad_c , offset ) )"		1313321	21					
ANR	1313396	Condition	"! parser . ParseClassAd ( parsing_text , * classad_c , offset )"	184:5:5327:5380	1313321	0	True				
ANR	1313397	UnaryOperationExpression	"! parser . ParseClassAd ( parsing_text , * classad_c , offset )"		1313321	0					
ANR	1313398	UnaryOperator	!		1313321	0					
ANR	1313399	CallExpression	"parser . ParseClassAd ( parsing_text , * classad_c , offset )"		1313321	1					
ANR	1313400	Callee	parser . ParseClassAd		1313321	0					
ANR	1313401	MemberAccess	parser . ParseClassAd		1313321	0					
ANR	1313402	Identifier	parser		1313321	0					
ANR	1313403	Identifier	ParseClassAd		1313321	1					
ANR	1313404	ArgumentList	parsing_text		1313321	1					
ANR	1313405	Argument	parsing_text		1313321	0					
ANR	1313406	Identifier	parsing_text		1313321	0					
ANR	1313407	Argument	* classad_c		1313321	1					
ANR	1313408	UnaryOperationExpression	* classad_c		1313321	0					
ANR	1313409	UnaryOperator	*		1313321	0					
ANR	1313410	Identifier	classad_c		1313321	1					
ANR	1313411	Argument	offset		1313321	2					
ANR	1313412	Identifier	offset		1313321	0					
ANR	1313413	CompoundStatement		14:61:380:380	1313321	1					
ANR	1313414	Statement	delete	185:2:5387:5392	1313321	0	True				
ANR	1313415	ExpressionStatement	classad_c	185:9:5394:5403	1313321	1	True				
ANR	1313416	Identifier	classad_c		1313321	0					
ANR	1313417	ExpressionStatement	classad_c = NULL	186:2:5407:5423	1313321	2	True				
ANR	1313418	AssignmentExpression	classad_c = NULL		1313321	0		=			
ANR	1313419	Identifier	classad_c		1313321	0					
ANR	1313420	Identifier	NULL		1313321	1					
ANR	1313421	ExpressionStatement	"check_parse ( * classad_a , * classad_b , classad_c )"	189:1:5430:5476	1313321	22	True				
ANR	1313422	CallExpression	"check_parse ( * classad_a , * classad_b , classad_c )"		1313321	0					
ANR	1313423	Callee	check_parse		1313321	0					
ANR	1313424	Identifier	check_parse		1313321	0					
ANR	1313425	ArgumentList	* classad_a		1313321	1					
ANR	1313426	Argument	* classad_a		1313321	0					
ANR	1313427	UnaryOperationExpression	* classad_a		1313321	0					
ANR	1313428	UnaryOperator	*		1313321	0					
ANR	1313429	Identifier	classad_a		1313321	1					
ANR	1313430	Argument	* classad_b		1313321	1					
ANR	1313431	UnaryOperationExpression	* classad_b		1313321	0					
ANR	1313432	UnaryOperator	*		1313321	0					
ANR	1313433	Identifier	classad_b		1313321	1					
ANR	1313434	Argument	classad_c		1313321	2					
ANR	1313435	Identifier	classad_c		1313321	0					
ANR	1313436	ReturnStatement	return ;	190:1:5479:5485	1313321	23	True				
ANR	1313437	ReturnType	static void		1313321	1					
ANR	1313438	Identifier	read_from_string_alt		1313321	2					
ANR	1313439	ParameterList	"ClassAd * * classad_a , ClassAd * * classad_b"		1313321	3					
ANR	1313440	Parameter	ClassAd * * classad_a	170:33:4960:4978	1313321	0	True				
ANR	1313441	ParameterType	ClassAd * *		1313321	0					
ANR	1313442	Identifier	classad_a		1313321	1					
ANR	1313443	Parameter	ClassAd * * classad_b	170:54:4981:4999	1313321	1	True				
ANR	1313444	ParameterType	ClassAd * *		1313321	0					
ANR	1313445	Identifier	classad_b		1313321	1					
ANR	1313446	CFGEntryNode	ENTRY		1313321		True				
ANR	1313447	CFGExitNode	EXIT		1313321		True				
ANR	1313448	Symbol	* classad_a		1313321						
ANR	1313449	Symbol	NULL		1313321						
ANR	1313450	Symbol	offset		1313321						
ANR	1313451	Symbol	* * classad_a		1313321						
ANR	1313452	Symbol	* * classad_b		1313321						
ANR	1313453	Symbol	classad_a		1313321						
ANR	1313454	Symbol	* classad_c		1313321						
ANR	1313455	Symbol	* classad_b		1313321						
ANR	1313456	Symbol	classad_c		1313321						
ANR	1313457	Symbol	parser . ParseClassAd		1313321						
ANR	1313458	Symbol	classad_b		1313321						
ANR	1313459	Symbol	parsing_text		1313321						
ANR	1313460	Symbol	parser		1313321						
ANR	1313461	Function	read_from_char	193:0:5490:5917							
ANR	1313462	FunctionDef	"read_from_char (ClassAd * * classad_a , ClassAd * * classad_b)"		1313461	0					
ANR	1313463	CompoundStatement		194:0:5559:5917	1313461	0					
ANR	1313464	IdentifierDeclStatement	ClassAdParser parser ;	195:1:5562:5582	1313461	0	True				
ANR	1313465	IdentifierDecl	parser		1313461	0					
ANR	1313466	IdentifierDeclType	ClassAdParser		1313461	0					
ANR	1313467	Identifier	parser		1313461	1					
ANR	1313468	IdentifierDeclStatement	ClassAd * classad_c ;	196:1:5585:5603	1313461	1	True				
ANR	1313469	IdentifierDecl	* classad_c		1313461	0					
ANR	1313470	IdentifierDeclType	ClassAd *		1313461	0					
ANR	1313471	Identifier	classad_c		1313461	1					
ANR	1313472	IdentifierDeclStatement	const char * text = parsing_text . c_str ( ) ;	197:1:5606:5645	1313461	2	True				
ANR	1313473	IdentifierDecl	* text = parsing_text . c_str ( )		1313461	0					
ANR	1313474	IdentifierDeclType	const char *		1313461	0					
ANR	1313475	Identifier	text		1313461	1					
ANR	1313476	AssignmentExpression	* text = parsing_text . c_str ( )		1313461	2		=			
ANR	1313477	Identifier	text		1313461	0					
ANR	1313478	CallExpression	parsing_text . c_str ( )		1313461	1					
ANR	1313479	Callee	parsing_text . c_str		1313461	0					
ANR	1313480	MemberAccess	parsing_text . c_str		1313461	0					
ANR	1313481	Identifier	parsing_text		1313461	0					
ANR	1313482	Identifier	c_str		1313461	1					
ANR	1313483	ArgumentList			1313461	1					
ANR	1313484	IdentifierDeclStatement	int offset ;	198:1:5648:5658	1313461	3	True				
ANR	1313485	IdentifierDecl	offset		1313461	0					
ANR	1313486	IdentifierDeclType	int		1313461	0					
ANR	1313487	Identifier	offset		1313461	1					
ANR	1313488	ExpressionStatement	"cout << ""Reading from C string.\\n"""	200:1:5662:5696	1313461	4	True				
ANR	1313489	ShiftExpression	"cout << ""Reading from C string.\\n"""		1313461	0		<<			
ANR	1313490	Identifier	cout		1313461	0					
ANR	1313491	PrimaryExpression	"""Reading from C string.\\n"""		1313461	1					
ANR	1313492	ExpressionStatement	offset = 0	202:1:5700:5710	1313461	5	True				
ANR	1313493	AssignmentExpression	offset = 0		1313461	0		=			
ANR	1313494	Identifier	offset		1313461	0					
ANR	1313495	PrimaryExpression	0		1313461	1					
ANR	1313496	ExpressionStatement	"* classad_a = parser . ParseClassAd ( text , offset )"	203:1:5713:5759	1313461	6	True				
ANR	1313497	AssignmentExpression	"* classad_a = parser . ParseClassAd ( text , offset )"		1313461	0		=			
ANR	1313498	UnaryOperationExpression	* classad_a		1313461	0					
ANR	1313499	UnaryOperator	*		1313461	0					
ANR	1313500	Identifier	classad_a		1313461	1					
ANR	1313501	CallExpression	"parser . ParseClassAd ( text , offset )"		1313461	1					
ANR	1313502	Callee	parser . ParseClassAd		1313461	0					
ANR	1313503	MemberAccess	parser . ParseClassAd		1313461	0					
ANR	1313504	Identifier	parser		1313461	0					
ANR	1313505	Identifier	ParseClassAd		1313461	1					
ANR	1313506	ArgumentList	text		1313461	1					
ANR	1313507	Argument	text		1313461	0					
ANR	1313508	Identifier	text		1313461	0					
ANR	1313509	Argument	offset		1313461	1					
ANR	1313510	Identifier	offset		1313461	0					
ANR	1313511	ExpressionStatement	"* classad_b = parser . ParseClassAd ( text , offset )"	204:1:5762:5808	1313461	7	True				
ANR	1313512	AssignmentExpression	"* classad_b = parser . ParseClassAd ( text , offset )"		1313461	0		=			
ANR	1313513	UnaryOperationExpression	* classad_b		1313461	0					
ANR	1313514	UnaryOperator	*		1313461	0					
ANR	1313515	Identifier	classad_b		1313461	1					
ANR	1313516	CallExpression	"parser . ParseClassAd ( text , offset )"		1313461	1					
ANR	1313517	Callee	parser . ParseClassAd		1313461	0					
ANR	1313518	MemberAccess	parser . ParseClassAd		1313461	0					
ANR	1313519	Identifier	parser		1313461	0					
ANR	1313520	Identifier	ParseClassAd		1313461	1					
ANR	1313521	ArgumentList	text		1313461	1					
ANR	1313522	Argument	text		1313461	0					
ANR	1313523	Identifier	text		1313461	0					
ANR	1313524	Argument	offset		1313461	1					
ANR	1313525	Identifier	offset		1313461	0					
ANR	1313526	ExpressionStatement	"classad_c = parser . ParseClassAd ( text , offset )"	205:1:5811:5856	1313461	8	True				
ANR	1313527	AssignmentExpression	"classad_c = parser . ParseClassAd ( text , offset )"		1313461	0		=			
ANR	1313528	Identifier	classad_c		1313461	0					
ANR	1313529	CallExpression	"parser . ParseClassAd ( text , offset )"		1313461	1					
ANR	1313530	Callee	parser . ParseClassAd		1313461	0					
ANR	1313531	MemberAccess	parser . ParseClassAd		1313461	0					
ANR	1313532	Identifier	parser		1313461	0					
ANR	1313533	Identifier	ParseClassAd		1313461	1					
ANR	1313534	ArgumentList	text		1313461	1					
ANR	1313535	Argument	text		1313461	0					
ANR	1313536	Identifier	text		1313461	0					
ANR	1313537	Argument	offset		1313461	1					
ANR	1313538	Identifier	offset		1313461	0					
ANR	1313539	ExpressionStatement	"check_parse ( * classad_a , * classad_b , classad_c )"	207:1:5860:5906	1313461	9	True				
ANR	1313540	CallExpression	"check_parse ( * classad_a , * classad_b , classad_c )"		1313461	0					
ANR	1313541	Callee	check_parse		1313461	0					
ANR	1313542	Identifier	check_parse		1313461	0					
ANR	1313543	ArgumentList	* classad_a		1313461	1					
ANR	1313544	Argument	* classad_a		1313461	0					
ANR	1313545	UnaryOperationExpression	* classad_a		1313461	0					
ANR	1313546	UnaryOperator	*		1313461	0					
ANR	1313547	Identifier	classad_a		1313461	1					
ANR	1313548	Argument	* classad_b		1313461	1					
ANR	1313549	UnaryOperationExpression	* classad_b		1313461	0					
ANR	1313550	UnaryOperator	*		1313461	0					
ANR	1313551	Identifier	classad_b		1313461	1					
ANR	1313552	Argument	classad_c		1313461	2					
ANR	1313553	Identifier	classad_c		1313461	0					
ANR	1313554	ReturnStatement	return ;	208:1:5909:5915	1313461	10	True				
ANR	1313555	ReturnType	static void		1313461	1					
ANR	1313556	Identifier	read_from_char		1313461	2					
ANR	1313557	ParameterList	"ClassAd * * classad_a , ClassAd * * classad_b"		1313461	3					
ANR	1313558	Parameter	ClassAd * * classad_a	193:27:5517:5535	1313461	0	True				
ANR	1313559	ParameterType	ClassAd * *		1313461	0					
ANR	1313560	Identifier	classad_a		1313461	1					
ANR	1313561	Parameter	ClassAd * * classad_b	193:48:5538:5556	1313461	1	True				
ANR	1313562	ParameterType	ClassAd * *		1313461	0					
ANR	1313563	Identifier	classad_b		1313461	1					
ANR	1313564	CFGEntryNode	ENTRY		1313461		True				
ANR	1313565	CFGExitNode	EXIT		1313461		True				
ANR	1313566	Symbol	* classad_a		1313461						
ANR	1313567	Symbol	parsing_text		1313461						
ANR	1313568	Symbol	parser		1313461						
ANR	1313569	Symbol	offset		1313461						
ANR	1313570	Symbol	text		1313461						
ANR	1313571	Symbol	classad_a		1313461						
ANR	1313572	Symbol	* classad_b		1313461						
ANR	1313573	Symbol	classad_c		1313461						
ANR	1313574	Symbol	parsing_text . c_str		1313461						
ANR	1313575	Symbol	parser . ParseClassAd		1313461						
ANR	1313576	Symbol	classad_b		1313461						
ANR	1313577	Function	read_from_char_alt	211:0:5920:6494							
ANR	1313578	FunctionDef	"read_from_char_alt (ClassAd * * classad_a , ClassAd * * classad_b)"		1313577	0					
ANR	1313579	CompoundStatement		212:0:5993:6494	1313577	0					
ANR	1313580	IdentifierDeclStatement	ClassAdParser parser ;	213:1:5996:6016	1313577	0	True				
ANR	1313581	IdentifierDecl	parser		1313577	0					
ANR	1313582	IdentifierDeclType	ClassAdParser		1313577	0					
ANR	1313583	Identifier	parser		1313577	1					
ANR	1313584	IdentifierDeclStatement	ClassAd * classad_c ;	214:1:6019:6037	1313577	1	True				
ANR	1313585	IdentifierDecl	* classad_c		1313577	0					
ANR	1313586	IdentifierDeclType	ClassAd *		1313577	0					
ANR	1313587	Identifier	classad_c		1313577	1					
ANR	1313588	IdentifierDeclStatement	const char * text = parsing_text . c_str ( ) ;	215:1:6040:6079	1313577	2	True				
ANR	1313589	IdentifierDecl	* text = parsing_text . c_str ( )		1313577	0					
ANR	1313590	IdentifierDeclType	const char *		1313577	0					
ANR	1313591	Identifier	text		1313577	1					
ANR	1313592	AssignmentExpression	* text = parsing_text . c_str ( )		1313577	2		=			
ANR	1313593	Identifier	text		1313577	0					
ANR	1313594	CallExpression	parsing_text . c_str ( )		1313577	1					
ANR	1313595	Callee	parsing_text . c_str		1313577	0					
ANR	1313596	MemberAccess	parsing_text . c_str		1313577	0					
ANR	1313597	Identifier	parsing_text		1313577	0					
ANR	1313598	Identifier	c_str		1313577	1					
ANR	1313599	ArgumentList			1313577	1					
ANR	1313600	IdentifierDeclStatement	int offset ;	216:1:6082:6092	1313577	3	True				
ANR	1313601	IdentifierDecl	offset		1313577	0					
ANR	1313602	IdentifierDeclType	int		1313577	0					
ANR	1313603	Identifier	offset		1313577	1					
ANR	1313604	ExpressionStatement	"cout << ""Reading from C string (alt parse).\\n"""	218:1:6096:6142	1313577	4	True				
ANR	1313605	ShiftExpression	"cout << ""Reading from C string (alt parse).\\n"""		1313577	0		<<			
ANR	1313606	Identifier	cout		1313577	0					
ANR	1313607	PrimaryExpression	"""Reading from C string (alt parse).\\n"""		1313577	1					
ANR	1313608	ExpressionStatement	offset = 0	220:1:6146:6156	1313577	5	True				
ANR	1313609	AssignmentExpression	offset = 0		1313577	0		=			
ANR	1313610	Identifier	offset		1313577	0					
ANR	1313611	PrimaryExpression	0		1313577	1					
ANR	1313612	Statement	*	221:1:6159:6159	1313577	6	True				
ANR	1313613	Statement	classad_a	221:2:6160:6168	1313577	7	True				
ANR	1313614	Statement	=	221:12:6170:6170	1313577	8	True				
ANR	1313615	Statement	new	221:14:6172:6174	1313577	9	True				
ANR	1313616	ExpressionStatement	ClassAd	221:18:6176:6183	1313577	10	True				
ANR	1313617	Identifier	ClassAd		1313577	0					
ANR	1313618	Statement	*	222:1:6186:6186	1313577	11	True				
ANR	1313619	Statement	classad_b	222:2:6187:6195	1313577	12	True				
ANR	1313620	Statement	=	222:12:6197:6197	1313577	13	True				
ANR	1313621	Statement	new	222:14:6199:6201	1313577	14	True				
ANR	1313622	ExpressionStatement	ClassAd	222:18:6203:6210	1313577	15	True				
ANR	1313623	Identifier	ClassAd		1313577	0					
ANR	1313624	Statement	classad_c	223:1:6213:6221	1313577	16	True				
ANR	1313625	Statement	=	223:12:6224:6224	1313577	17	True				
ANR	1313626	Statement	new	223:14:6226:6228	1313577	18	True				
ANR	1313627	ExpressionStatement	ClassAd	223:18:6230:6237	1313577	19	True				
ANR	1313628	Identifier	ClassAd		1313577	0					
ANR	1313629	ExpressionStatement	"parser . ParseClassAd ( text , * * classad_a , offset )"	224:1:6240:6286	1313577	20	True				
ANR	1313630	CallExpression	"parser . ParseClassAd ( text , * * classad_a , offset )"		1313577	0					
ANR	1313631	Callee	parser . ParseClassAd		1313577	0					
ANR	1313632	MemberAccess	parser . ParseClassAd		1313577	0					
ANR	1313633	Identifier	parser		1313577	0					
ANR	1313634	Identifier	ParseClassAd		1313577	1					
ANR	1313635	ArgumentList	text		1313577	1					
ANR	1313636	Argument	text		1313577	0					
ANR	1313637	Identifier	text		1313577	0					
ANR	1313638	Argument	* * classad_a		1313577	1					
ANR	1313639	UnaryOperationExpression	* * classad_a		1313577	0					
ANR	1313640	UnaryOperator	*		1313577	0					
ANR	1313641	UnaryOperationExpression	* classad_a		1313577	1					
ANR	1313642	UnaryOperator	*		1313577	0					
ANR	1313643	Identifier	classad_a		1313577	1					
ANR	1313644	Argument	offset		1313577	2					
ANR	1313645	Identifier	offset		1313577	0					
ANR	1313646	ExpressionStatement	"parser . ParseClassAd ( text , * * classad_b , offset )"	225:1:6289:6335	1313577	21	True				
ANR	1313647	CallExpression	"parser . ParseClassAd ( text , * * classad_b , offset )"		1313577	0					
ANR	1313648	Callee	parser . ParseClassAd		1313577	0					
ANR	1313649	MemberAccess	parser . ParseClassAd		1313577	0					
ANR	1313650	Identifier	parser		1313577	0					
ANR	1313651	Identifier	ParseClassAd		1313577	1					
ANR	1313652	ArgumentList	text		1313577	1					
ANR	1313653	Argument	text		1313577	0					
ANR	1313654	Identifier	text		1313577	0					
ANR	1313655	Argument	* * classad_b		1313577	1					
ANR	1313656	UnaryOperationExpression	* * classad_b		1313577	0					
ANR	1313657	UnaryOperator	*		1313577	0					
ANR	1313658	UnaryOperationExpression	* classad_b		1313577	1					
ANR	1313659	UnaryOperator	*		1313577	0					
ANR	1313660	Identifier	classad_b		1313577	1					
ANR	1313661	Argument	offset		1313577	2					
ANR	1313662	Identifier	offset		1313577	0					
ANR	1313663	IfStatement	"if ( ! parser . ParseClassAd ( text , * classad_c , offset ) )"		1313577	22					
ANR	1313664	Condition	"! parser . ParseClassAd ( text , * classad_c , offset )"	226:5:6342:6387	1313577	0	True				
ANR	1313665	UnaryOperationExpression	"! parser . ParseClassAd ( text , * classad_c , offset )"		1313577	0					
ANR	1313666	UnaryOperator	!		1313577	0					
ANR	1313667	CallExpression	"parser . ParseClassAd ( text , * classad_c , offset )"		1313577	1					
ANR	1313668	Callee	parser . ParseClassAd		1313577	0					
ANR	1313669	MemberAccess	parser . ParseClassAd		1313577	0					
ANR	1313670	Identifier	parser		1313577	0					
ANR	1313671	Identifier	ParseClassAd		1313577	1					
ANR	1313672	ArgumentList	text		1313577	1					
ANR	1313673	Argument	text		1313577	0					
ANR	1313674	Identifier	text		1313577	0					
ANR	1313675	Argument	* classad_c		1313577	1					
ANR	1313676	UnaryOperationExpression	* classad_c		1313577	0					
ANR	1313677	UnaryOperator	*		1313577	0					
ANR	1313678	Identifier	classad_c		1313577	1					
ANR	1313679	Argument	offset		1313577	2					
ANR	1313680	Identifier	offset		1313577	0					
ANR	1313681	CompoundStatement		15:53:396:396	1313577	1					
ANR	1313682	Statement	delete	227:2:6394:6399	1313577	0	True				
ANR	1313683	ExpressionStatement	classad_c	227:9:6401:6410	1313577	1	True				
ANR	1313684	Identifier	classad_c		1313577	0					
ANR	1313685	ExpressionStatement	classad_c = NULL	228:2:6414:6430	1313577	2	True				
ANR	1313686	AssignmentExpression	classad_c = NULL		1313577	0		=			
ANR	1313687	Identifier	classad_c		1313577	0					
ANR	1313688	Identifier	NULL		1313577	1					
ANR	1313689	ExpressionStatement	"check_parse ( * classad_a , * classad_b , classad_c )"	231:1:6437:6483	1313577	23	True				
ANR	1313690	CallExpression	"check_parse ( * classad_a , * classad_b , classad_c )"		1313577	0					
ANR	1313691	Callee	check_parse		1313577	0					
ANR	1313692	Identifier	check_parse		1313577	0					
ANR	1313693	ArgumentList	* classad_a		1313577	1					
ANR	1313694	Argument	* classad_a		1313577	0					
ANR	1313695	UnaryOperationExpression	* classad_a		1313577	0					
ANR	1313696	UnaryOperator	*		1313577	0					
ANR	1313697	Identifier	classad_a		1313577	1					
ANR	1313698	Argument	* classad_b		1313577	1					
ANR	1313699	UnaryOperationExpression	* classad_b		1313577	0					
ANR	1313700	UnaryOperator	*		1313577	0					
ANR	1313701	Identifier	classad_b		1313577	1					
ANR	1313702	Argument	classad_c		1313577	2					
ANR	1313703	Identifier	classad_c		1313577	0					
ANR	1313704	ReturnStatement	return ;	232:1:6486:6492	1313577	24	True				
ANR	1313705	ReturnType	static void		1313577	1					
ANR	1313706	Identifier	read_from_char_alt		1313577	2					
ANR	1313707	ParameterList	"ClassAd * * classad_a , ClassAd * * classad_b"		1313577	3					
ANR	1313708	Parameter	ClassAd * * classad_a	211:31:5951:5969	1313577	0	True				
ANR	1313709	ParameterType	ClassAd * *		1313577	0					
ANR	1313710	Identifier	classad_a		1313577	1					
ANR	1313711	Parameter	ClassAd * * classad_b	211:52:5972:5990	1313577	1	True				
ANR	1313712	ParameterType	ClassAd * *		1313577	0					
ANR	1313713	Identifier	classad_b		1313577	1					
ANR	1313714	CFGEntryNode	ENTRY		1313577		True				
ANR	1313715	CFGExitNode	EXIT		1313577		True				
ANR	1313716	Symbol	* classad_a		1313577						
ANR	1313717	Symbol	NULL		1313577						
ANR	1313718	Symbol	offset		1313577						
ANR	1313719	Symbol	* * classad_a		1313577						
ANR	1313720	Symbol	* * classad_b		1313577						
ANR	1313721	Symbol	classad_a		1313577						
ANR	1313722	Symbol	* classad_c		1313577						
ANR	1313723	Symbol	* classad_b		1313577						
ANR	1313724	Symbol	classad_c		1313577						
ANR	1313725	Symbol	parser . ParseClassAd		1313577						
ANR	1313726	Symbol	classad_b		1313577						
ANR	1313727	Symbol	parsing_text		1313577						
ANR	1313728	Symbol	parser		1313577						
ANR	1313729	Symbol	text		1313577						
ANR	1313730	Symbol	parsing_text . c_str		1313577						
ANR	1313731	Function	make_file	235:0:6497:6666							
ANR	1313732	FunctionDef	make_file ()		1313731	0					
ANR	1313733	CompoundStatement		236:0:6525:6666	1313731	0					
ANR	1313734	IdentifierDeclStatement	FILE * file ;	237:1:6528:6538	1313731	0	True				
ANR	1313735	IdentifierDecl	* file		1313731	0					
ANR	1313736	IdentifierDeclType	FILE *		1313731	0					
ANR	1313737	Identifier	file		1313731	1					
ANR	1313738	ExpressionStatement	remove_file ( )	239:1:6542:6555	1313731	1	True				
ANR	1313739	CallExpression	remove_file ( )		1313731	0					
ANR	1313740	Callee	remove_file		1313731	0					
ANR	1313741	Identifier	remove_file		1313731	0					
ANR	1313742	ArgumentList			1313731	1					
ANR	1313743	ExpressionStatement	"file = fopen ( ""tmp.classads.tmp"" , ""w"" )"	240:1:6558:6595	1313731	2	True				
ANR	1313744	AssignmentExpression	"file = fopen ( ""tmp.classads.tmp"" , ""w"" )"		1313731	0		=			
ANR	1313745	Identifier	file		1313731	0					
ANR	1313746	CallExpression	"fopen ( ""tmp.classads.tmp"" , ""w"" )"		1313731	1					
ANR	1313747	Callee	fopen		1313731	0					
ANR	1313748	Identifier	fopen		1313731	0					
ANR	1313749	ArgumentList	"""tmp.classads.tmp"""		1313731	1					
ANR	1313750	Argument	"""tmp.classads.tmp"""		1313731	0					
ANR	1313751	PrimaryExpression	"""tmp.classads.tmp"""		1313731	0					
ANR	1313752	Argument	"""w"""		1313731	1					
ANR	1313753	PrimaryExpression	"""w"""		1313731	0					
ANR	1313754	ExpressionStatement	"fprintf ( file , ""%s"" , parsing_text . c_str ( ) )"	241:1:6598:6639	1313731	3	True				
ANR	1313755	CallExpression	"fprintf ( file , ""%s"" , parsing_text . c_str ( ) )"		1313731	0					
ANR	1313756	Callee	fprintf		1313731	0					
ANR	1313757	Identifier	fprintf		1313731	0					
ANR	1313758	ArgumentList	file		1313731	1					
ANR	1313759	Argument	file		1313731	0					
ANR	1313760	Identifier	file		1313731	0					
ANR	1313761	Argument	"""%s"""		1313731	1					
ANR	1313762	PrimaryExpression	"""%s"""		1313731	0					
ANR	1313763	Argument	parsing_text . c_str ( )		1313731	2					
ANR	1313764	CallExpression	parsing_text . c_str ( )		1313731	0					
ANR	1313765	Callee	parsing_text . c_str		1313731	0					
ANR	1313766	MemberAccess	parsing_text . c_str		1313731	0					
ANR	1313767	Identifier	parsing_text		1313731	0					
ANR	1313768	Identifier	c_str		1313731	1					
ANR	1313769	ArgumentList			1313731	1					
ANR	1313770	ExpressionStatement	fclose ( file )	242:1:6642:6654	1313731	4	True				
ANR	1313771	CallExpression	fclose ( file )		1313731	0					
ANR	1313772	Callee	fclose		1313731	0					
ANR	1313773	Identifier	fclose		1313731	0					
ANR	1313774	ArgumentList	file		1313731	1					
ANR	1313775	Argument	file		1313731	0					
ANR	1313776	Identifier	file		1313731	0					
ANR	1313777	ReturnStatement	return ;	244:1:6658:6664	1313731	5	True				
ANR	1313778	ReturnType	static void		1313731	1					
ANR	1313779	Identifier	make_file		1313731	2					
ANR	1313780	ParameterList			1313731	3					
ANR	1313781	CFGEntryNode	ENTRY		1313731		True				
ANR	1313782	CFGExitNode	EXIT		1313731		True				
ANR	1313783	Symbol	fopen		1313731						
ANR	1313784	Symbol	file		1313731						
ANR	1313785	Symbol	parsing_text		1313731						
ANR	1313786	Symbol	parsing_text . c_str		1313731						
ANR	1313787	Function	remove_file	247:0:6669:6745							
ANR	1313788	FunctionDef	remove_file ()		1313787	0					
ANR	1313789	CompoundStatement		248:0:6699:6745	1313787	0					
ANR	1313790	ExpressionStatement	"system ( ""rm -f tmp.classads.tmp"" )"	249:1:6702:6734	1313787	0	True				
ANR	1313791	CallExpression	"system ( ""rm -f tmp.classads.tmp"" )"		1313787	0					
ANR	1313792	Callee	system		1313787	0					
ANR	1313793	Identifier	system		1313787	0					
ANR	1313794	ArgumentList	"""rm -f tmp.classads.tmp"""		1313787	1					
ANR	1313795	Argument	"""rm -f tmp.classads.tmp"""		1313787	0					
ANR	1313796	PrimaryExpression	"""rm -f tmp.classads.tmp"""		1313787	0					
ANR	1313797	ReturnStatement	return ;	250:1:6737:6743	1313787	1	True				
ANR	1313798	ReturnType	static void		1313787	1					
ANR	1313799	Identifier	remove_file		1313787	2					
ANR	1313800	ParameterList			1313787	3					
ANR	1313801	CFGEntryNode	ENTRY		1313787		True				
ANR	1313802	CFGExitNode	EXIT		1313787		True				
ANR	1313803	Function	read_from_file	253:0:6748:7218							
ANR	1313804	FunctionDef	"read_from_file (ClassAd * * classad_a , ClassAd * * classad_b)"		1313803	0					
ANR	1313805	CompoundStatement		254:0:6817:7218	1313803	0					
ANR	1313806	IdentifierDeclStatement	ClassAdParser parser ;	255:1:6820:6840	1313803	0	True				
ANR	1313807	IdentifierDecl	parser		1313803	0					
ANR	1313808	IdentifierDeclType	ClassAdParser		1313803	0					
ANR	1313809	Identifier	parser		1313803	1					
ANR	1313810	IdentifierDeclStatement	ClassAd * classad_c ;	256:1:6843:6861	1313803	1	True				
ANR	1313811	IdentifierDecl	* classad_c		1313803	0					
ANR	1313812	IdentifierDeclType	ClassAd *		1313803	0					
ANR	1313813	Identifier	classad_c		1313803	1					
ANR	1313814	IdentifierDeclStatement	FILE * file ;	257:1:6864:6874	1313803	2	True				
ANR	1313815	IdentifierDecl	* file		1313803	0					
ANR	1313816	IdentifierDeclType	FILE *		1313803	0					
ANR	1313817	Identifier	file		1313803	1					
ANR	1313818	ExpressionStatement	"file = fopen ( ""tmp.classads.tmp"" , ""r"" )"	259:1:6878:6915	1313803	3	True				
ANR	1313819	AssignmentExpression	"file = fopen ( ""tmp.classads.tmp"" , ""r"" )"		1313803	0		=			
ANR	1313820	Identifier	file		1313803	0					
ANR	1313821	CallExpression	"fopen ( ""tmp.classads.tmp"" , ""r"" )"		1313803	1					
ANR	1313822	Callee	fopen		1313803	0					
ANR	1313823	Identifier	fopen		1313803	0					
ANR	1313824	ArgumentList	"""tmp.classads.tmp"""		1313803	1					
ANR	1313825	Argument	"""tmp.classads.tmp"""		1313803	0					
ANR	1313826	PrimaryExpression	"""tmp.classads.tmp"""		1313803	0					
ANR	1313827	Argument	"""r"""		1313803	1					
ANR	1313828	PrimaryExpression	"""r"""		1313803	0					
ANR	1313829	IfStatement	if ( file == NULL )		1313803	4					
ANR	1313830	Condition	file == NULL	260:5:6922:6933	1313803	0	True				
ANR	1313831	EqualityExpression	file == NULL		1313803	0		==			
ANR	1313832	Identifier	file		1313803	0					
ANR	1313833	Identifier	NULL		1313803	1					
ANR	1313834	CompoundStatement		7:19:118:118	1313803	1					
ANR	1313835	ExpressionStatement	"cout << ""Can't open temporary ClassAd file.\\n"""	261:2:6940:6986	1313803	0	True				
ANR	1313836	ShiftExpression	"cout << ""Can't open temporary ClassAd file.\\n"""		1313803	0		<<			
ANR	1313837	Identifier	cout		1313803	0					
ANR	1313838	PrimaryExpression	"""Can't open temporary ClassAd file.\\n"""		1313803	1					
ANR	1313839	ExpressionStatement	exit ( 1 )	262:2:6990:6997	1313803	1	True				
ANR	1313840	CallExpression	exit ( 1 )		1313803	0					
ANR	1313841	Callee	exit		1313803	0					
ANR	1313842	Identifier	exit		1313803	0					
ANR	1313843	ArgumentList	1		1313803	1					
ANR	1313844	Argument	1		1313803	0					
ANR	1313845	PrimaryExpression	1		1313803	0					
ANR	1313846	ExpressionStatement	"cout << ""Reading from FILE.\\n"""	265:1:7004:7034	1313803	5	True				
ANR	1313847	ShiftExpression	"cout << ""Reading from FILE.\\n"""		1313803	0		<<			
ANR	1313848	Identifier	cout		1313803	0					
ANR	1313849	PrimaryExpression	"""Reading from FILE.\\n"""		1313803	1					
ANR	1313850	ExpressionStatement	* classad_a = parser . ParseClassAd ( file )	267:1:7038:7076	1313803	6	True				
ANR	1313851	AssignmentExpression	* classad_a = parser . ParseClassAd ( file )		1313803	0		=			
ANR	1313852	UnaryOperationExpression	* classad_a		1313803	0					
ANR	1313853	UnaryOperator	*		1313803	0					
ANR	1313854	Identifier	classad_a		1313803	1					
ANR	1313855	CallExpression	parser . ParseClassAd ( file )		1313803	1					
ANR	1313856	Callee	parser . ParseClassAd		1313803	0					
ANR	1313857	MemberAccess	parser . ParseClassAd		1313803	0					
ANR	1313858	Identifier	parser		1313803	0					
ANR	1313859	Identifier	ParseClassAd		1313803	1					
ANR	1313860	ArgumentList	file		1313803	1					
ANR	1313861	Argument	file		1313803	0					
ANR	1313862	Identifier	file		1313803	0					
ANR	1313863	ExpressionStatement	* classad_b = parser . ParseClassAd ( file )	268:1:7079:7117	1313803	7	True				
ANR	1313864	AssignmentExpression	* classad_b = parser . ParseClassAd ( file )		1313803	0		=			
ANR	1313865	UnaryOperationExpression	* classad_b		1313803	0					
ANR	1313866	UnaryOperator	*		1313803	0					
ANR	1313867	Identifier	classad_b		1313803	1					
ANR	1313868	CallExpression	parser . ParseClassAd ( file )		1313803	1					
ANR	1313869	Callee	parser . ParseClassAd		1313803	0					
ANR	1313870	MemberAccess	parser . ParseClassAd		1313803	0					
ANR	1313871	Identifier	parser		1313803	0					
ANR	1313872	Identifier	ParseClassAd		1313803	1					
ANR	1313873	ArgumentList	file		1313803	1					
ANR	1313874	Argument	file		1313803	0					
ANR	1313875	Identifier	file		1313803	0					
ANR	1313876	ExpressionStatement	classad_c = parser . ParseClassAd ( file )	269:1:7120:7157	1313803	8	True				
ANR	1313877	AssignmentExpression	classad_c = parser . ParseClassAd ( file )		1313803	0		=			
ANR	1313878	Identifier	classad_c		1313803	0					
ANR	1313879	CallExpression	parser . ParseClassAd ( file )		1313803	1					
ANR	1313880	Callee	parser . ParseClassAd		1313803	0					
ANR	1313881	MemberAccess	parser . ParseClassAd		1313803	0					
ANR	1313882	Identifier	parser		1313803	0					
ANR	1313883	Identifier	ParseClassAd		1313803	1					
ANR	1313884	ArgumentList	file		1313803	1					
ANR	1313885	Argument	file		1313803	0					
ANR	1313886	Identifier	file		1313803	0					
ANR	1313887	ExpressionStatement	"check_parse ( * classad_a , * classad_b , classad_c )"	271:1:7161:7207	1313803	9	True				
ANR	1313888	CallExpression	"check_parse ( * classad_a , * classad_b , classad_c )"		1313803	0					
ANR	1313889	Callee	check_parse		1313803	0					
ANR	1313890	Identifier	check_parse		1313803	0					
ANR	1313891	ArgumentList	* classad_a		1313803	1					
ANR	1313892	Argument	* classad_a		1313803	0					
ANR	1313893	UnaryOperationExpression	* classad_a		1313803	0					
ANR	1313894	UnaryOperator	*		1313803	0					
ANR	1313895	Identifier	classad_a		1313803	1					
ANR	1313896	Argument	* classad_b		1313803	1					
ANR	1313897	UnaryOperationExpression	* classad_b		1313803	0					
ANR	1313898	UnaryOperator	*		1313803	0					
ANR	1313899	Identifier	classad_b		1313803	1					
ANR	1313900	Argument	classad_c		1313803	2					
ANR	1313901	Identifier	classad_c		1313803	0					
ANR	1313902	ReturnStatement	return ;	272:1:7210:7216	1313803	10	True				
ANR	1313903	ReturnType	static void		1313803	1					
ANR	1313904	Identifier	read_from_file		1313803	2					
ANR	1313905	ParameterList	"ClassAd * * classad_a , ClassAd * * classad_b"		1313803	3					
ANR	1313906	Parameter	ClassAd * * classad_a	253:27:6775:6793	1313803	0	True				
ANR	1313907	ParameterType	ClassAd * *		1313803	0					
ANR	1313908	Identifier	classad_a		1313803	1					
ANR	1313909	Parameter	ClassAd * * classad_b	253:48:6796:6814	1313803	1	True				
ANR	1313910	ParameterType	ClassAd * *		1313803	0					
ANR	1313911	Identifier	classad_b		1313803	1					
ANR	1313912	CFGEntryNode	ENTRY		1313803		True				
ANR	1313913	CFGExitNode	EXIT		1313803		True				
ANR	1313914	Symbol	fopen		1313803						
ANR	1313915	Symbol	* classad_a		1313803						
ANR	1313916	Symbol	file		1313803						
ANR	1313917	Symbol	NULL		1313803						
ANR	1313918	Symbol	parser		1313803						
ANR	1313919	Symbol	classad_a		1313803						
ANR	1313920	Symbol	* classad_b		1313803						
ANR	1313921	Symbol	classad_c		1313803						
ANR	1313922	Symbol	parser . ParseClassAd		1313803						
ANR	1313923	Symbol	classad_b		1313803						
ANR	1313924	Function	read_from_file_alt	275:0:7221:7838							
ANR	1313925	FunctionDef	"read_from_file_alt (ClassAd * * classad_a , ClassAd * * classad_b)"		1313924	0					
ANR	1313926	CompoundStatement		276:0:7294:7838	1313924	0					
ANR	1313927	IdentifierDeclStatement	ClassAdParser parser ;	277:1:7297:7317	1313924	0	True				
ANR	1313928	IdentifierDecl	parser		1313924	0					
ANR	1313929	IdentifierDeclType	ClassAdParser		1313924	0					
ANR	1313930	Identifier	parser		1313924	1					
ANR	1313931	IdentifierDeclStatement	ClassAd * classad_c ;	278:1:7320:7338	1313924	1	True				
ANR	1313932	IdentifierDecl	* classad_c		1313924	0					
ANR	1313933	IdentifierDeclType	ClassAd *		1313924	0					
ANR	1313934	Identifier	classad_c		1313924	1					
ANR	1313935	IdentifierDeclStatement	FILE * file ;	279:1:7341:7351	1313924	2	True				
ANR	1313936	IdentifierDecl	* file		1313924	0					
ANR	1313937	IdentifierDeclType	FILE *		1313924	0					
ANR	1313938	Identifier	file		1313924	1					
ANR	1313939	ExpressionStatement	"file = fopen ( ""tmp.classads.tmp"" , ""r"" )"	281:1:7355:7392	1313924	3	True				
ANR	1313940	AssignmentExpression	"file = fopen ( ""tmp.classads.tmp"" , ""r"" )"		1313924	0		=			
ANR	1313941	Identifier	file		1313924	0					
ANR	1313942	CallExpression	"fopen ( ""tmp.classads.tmp"" , ""r"" )"		1313924	1					
ANR	1313943	Callee	fopen		1313924	0					
ANR	1313944	Identifier	fopen		1313924	0					
ANR	1313945	ArgumentList	"""tmp.classads.tmp"""		1313924	1					
ANR	1313946	Argument	"""tmp.classads.tmp"""		1313924	0					
ANR	1313947	PrimaryExpression	"""tmp.classads.tmp"""		1313924	0					
ANR	1313948	Argument	"""r"""		1313924	1					
ANR	1313949	PrimaryExpression	"""r"""		1313924	0					
ANR	1313950	IfStatement	if ( file == NULL )		1313924	4					
ANR	1313951	Condition	file == NULL	282:5:7399:7410	1313924	0	True				
ANR	1313952	EqualityExpression	file == NULL		1313924	0		==			
ANR	1313953	Identifier	file		1313924	0					
ANR	1313954	Identifier	NULL		1313924	1					
ANR	1313955	CompoundStatement		7:19:118:118	1313924	1					
ANR	1313956	ExpressionStatement	"cout << ""Can't open temporary ClassAd file.\\n"""	283:2:7417:7463	1313924	0	True				
ANR	1313957	ShiftExpression	"cout << ""Can't open temporary ClassAd file.\\n"""		1313924	0		<<			
ANR	1313958	Identifier	cout		1313924	0					
ANR	1313959	PrimaryExpression	"""Can't open temporary ClassAd file.\\n"""		1313924	1					
ANR	1313960	ExpressionStatement	exit ( 1 )	284:2:7467:7474	1313924	1	True				
ANR	1313961	CallExpression	exit ( 1 )		1313924	0					
ANR	1313962	Callee	exit		1313924	0					
ANR	1313963	Identifier	exit		1313924	0					
ANR	1313964	ArgumentList	1		1313924	1					
ANR	1313965	Argument	1		1313924	0					
ANR	1313966	PrimaryExpression	1		1313924	0					
ANR	1313967	ExpressionStatement	"cout << ""Reading from FILE (alt parse).\\n"""	287:1:7481:7523	1313924	5	True				
ANR	1313968	ShiftExpression	"cout << ""Reading from FILE (alt parse).\\n"""		1313924	0		<<			
ANR	1313969	Identifier	cout		1313924	0					
ANR	1313970	PrimaryExpression	"""Reading from FILE (alt parse).\\n"""		1313924	1					
ANR	1313971	Statement	*	289:1:7527:7527	1313924	6	True				
ANR	1313972	Statement	classad_a	289:2:7528:7536	1313924	7	True				
ANR	1313973	Statement	=	289:12:7538:7538	1313924	8	True				
ANR	1313974	Statement	new	289:14:7540:7542	1313924	9	True				
ANR	1313975	ExpressionStatement	ClassAd	289:18:7544:7551	1313924	10	True				
ANR	1313976	Identifier	ClassAd		1313924	0					
ANR	1313977	Statement	*	290:1:7554:7554	1313924	11	True				
ANR	1313978	Statement	classad_b	290:2:7555:7563	1313924	12	True				
ANR	1313979	Statement	=	290:12:7565:7565	1313924	13	True				
ANR	1313980	Statement	new	290:14:7567:7569	1313924	14	True				
ANR	1313981	ExpressionStatement	ClassAd	290:18:7571:7578	1313924	15	True				
ANR	1313982	Identifier	ClassAd		1313924	0					
ANR	1313983	Statement	classad_c	291:1:7581:7589	1313924	16	True				
ANR	1313984	Statement	=	291:12:7592:7592	1313924	17	True				
ANR	1313985	Statement	new	291:14:7594:7596	1313924	18	True				
ANR	1313986	ExpressionStatement	ClassAd	291:18:7598:7605	1313924	19	True				
ANR	1313987	Identifier	ClassAd		1313924	0					
ANR	1313988	ExpressionStatement	"parser . ParseClassAd ( file , * * classad_a )"	292:1:7608:7646	1313924	20	True				
ANR	1313989	CallExpression	"parser . ParseClassAd ( file , * * classad_a )"		1313924	0					
ANR	1313990	Callee	parser . ParseClassAd		1313924	0					
ANR	1313991	MemberAccess	parser . ParseClassAd		1313924	0					
ANR	1313992	Identifier	parser		1313924	0					
ANR	1313993	Identifier	ParseClassAd		1313924	1					
ANR	1313994	ArgumentList	file		1313924	1					
ANR	1313995	Argument	file		1313924	0					
ANR	1313996	Identifier	file		1313924	0					
ANR	1313997	Argument	* * classad_a		1313924	1					
ANR	1313998	UnaryOperationExpression	* * classad_a		1313924	0					
ANR	1313999	UnaryOperator	*		1313924	0					
ANR	1314000	UnaryOperationExpression	* classad_a		1313924	1					
ANR	1314001	UnaryOperator	*		1313924	0					
ANR	1314002	Identifier	classad_a		1313924	1					
ANR	1314003	ExpressionStatement	"parser . ParseClassAd ( file , * * classad_b )"	293:1:7649:7687	1313924	21	True				
ANR	1314004	CallExpression	"parser . ParseClassAd ( file , * * classad_b )"		1313924	0					
ANR	1314005	Callee	parser . ParseClassAd		1313924	0					
ANR	1314006	MemberAccess	parser . ParseClassAd		1313924	0					
ANR	1314007	Identifier	parser		1313924	0					
ANR	1314008	Identifier	ParseClassAd		1313924	1					
ANR	1314009	ArgumentList	file		1313924	1					
ANR	1314010	Argument	file		1313924	0					
ANR	1314011	Identifier	file		1313924	0					
ANR	1314012	Argument	* * classad_b		1313924	1					
ANR	1314013	UnaryOperationExpression	* * classad_b		1313924	0					
ANR	1314014	UnaryOperator	*		1313924	0					
ANR	1314015	UnaryOperationExpression	* classad_b		1313924	1					
ANR	1314016	UnaryOperator	*		1313924	0					
ANR	1314017	Identifier	classad_b		1313924	1					
ANR	1314018	IfStatement	"if ( ! parser . ParseClassAd ( file , * classad_c ) )"		1313924	22					
ANR	1314019	Condition	"! parser . ParseClassAd ( file , * classad_c )"	294:5:7694:7731	1313924	0	True				
ANR	1314020	UnaryOperationExpression	"! parser . ParseClassAd ( file , * classad_c )"		1313924	0					
ANR	1314021	UnaryOperator	!		1313924	0					
ANR	1314022	CallExpression	"parser . ParseClassAd ( file , * classad_c )"		1313924	1					
ANR	1314023	Callee	parser . ParseClassAd		1313924	0					
ANR	1314024	MemberAccess	parser . ParseClassAd		1313924	0					
ANR	1314025	Identifier	parser		1313924	0					
ANR	1314026	Identifier	ParseClassAd		1313924	1					
ANR	1314027	ArgumentList	file		1313924	1					
ANR	1314028	Argument	file		1313924	0					
ANR	1314029	Identifier	file		1313924	0					
ANR	1314030	Argument	* classad_c		1313924	1					
ANR	1314031	UnaryOperationExpression	* classad_c		1313924	0					
ANR	1314032	UnaryOperator	*		1313924	0					
ANR	1314033	Identifier	classad_c		1313924	1					
ANR	1314034	CompoundStatement		19:45:439:439	1313924	1					
ANR	1314035	Statement	delete	295:2:7738:7743	1313924	0	True				
ANR	1314036	ExpressionStatement	classad_c	295:9:7745:7754	1313924	1	True				
ANR	1314037	Identifier	classad_c		1313924	0					
ANR	1314038	ExpressionStatement	classad_c = NULL	296:2:7758:7774	1313924	2	True				
ANR	1314039	AssignmentExpression	classad_c = NULL		1313924	0		=			
ANR	1314040	Identifier	classad_c		1313924	0					
ANR	1314041	Identifier	NULL		1313924	1					
ANR	1314042	ExpressionStatement	"check_parse ( * classad_a , * classad_b , classad_c )"	299:1:7781:7827	1313924	23	True				
ANR	1314043	CallExpression	"check_parse ( * classad_a , * classad_b , classad_c )"		1313924	0					
ANR	1314044	Callee	check_parse		1313924	0					
ANR	1314045	Identifier	check_parse		1313924	0					
ANR	1314046	ArgumentList	* classad_a		1313924	1					
ANR	1314047	Argument	* classad_a		1313924	0					
ANR	1314048	UnaryOperationExpression	* classad_a		1313924	0					
ANR	1314049	UnaryOperator	*		1313924	0					
ANR	1314050	Identifier	classad_a		1313924	1					
ANR	1314051	Argument	* classad_b		1313924	1					
ANR	1314052	UnaryOperationExpression	* classad_b		1313924	0					
ANR	1314053	UnaryOperator	*		1313924	0					
ANR	1314054	Identifier	classad_b		1313924	1					
ANR	1314055	Argument	classad_c		1313924	2					
ANR	1314056	Identifier	classad_c		1313924	0					
ANR	1314057	ReturnStatement	return ;	300:1:7830:7836	1313924	24	True				
ANR	1314058	ReturnType	static void		1313924	1					
ANR	1314059	Identifier	read_from_file_alt		1313924	2					
ANR	1314060	ParameterList	"ClassAd * * classad_a , ClassAd * * classad_b"		1313924	3					
ANR	1314061	Parameter	ClassAd * * classad_a	275:31:7252:7270	1313924	0	True				
ANR	1314062	ParameterType	ClassAd * *		1313924	0					
ANR	1314063	Identifier	classad_a		1313924	1					
ANR	1314064	Parameter	ClassAd * * classad_b	275:52:7273:7291	1313924	1	True				
ANR	1314065	ParameterType	ClassAd * *		1313924	0					
ANR	1314066	Identifier	classad_b		1313924	1					
ANR	1314067	CFGEntryNode	ENTRY		1313924		True				
ANR	1314068	CFGExitNode	EXIT		1313924		True				
ANR	1314069	Symbol	fopen		1313924						
ANR	1314070	Symbol	* classad_a		1313924						
ANR	1314071	Symbol	NULL		1313924						
ANR	1314072	Symbol	* * classad_a		1313924						
ANR	1314073	Symbol	* * classad_b		1313924						
ANR	1314074	Symbol	classad_a		1313924						
ANR	1314075	Symbol	* classad_c		1313924						
ANR	1314076	Symbol	* classad_b		1313924						
ANR	1314077	Symbol	classad_c		1313924						
ANR	1314078	Symbol	parser . ParseClassAd		1313924						
ANR	1314079	Symbol	classad_b		1313924						
ANR	1314080	Symbol	file		1313924						
ANR	1314081	Symbol	parser		1313924						
ANR	1314082	Function	read_from_stream	303:0:7841:8303							
ANR	1314083	FunctionDef	"read_from_stream (ClassAd * * classad_a , ClassAd * * classad_b)"		1314082	0					
ANR	1314084	CompoundStatement		304:0:7912:8303	1314082	0					
ANR	1314085	IdentifierDeclStatement	ClassAdParser parser ;	305:1:7915:7935	1314082	0	True				
ANR	1314086	IdentifierDecl	parser		1314082	0					
ANR	1314087	IdentifierDeclType	ClassAdParser		1314082	0					
ANR	1314088	Identifier	parser		1314082	1					
ANR	1314089	IdentifierDeclStatement	ClassAd * classad_c ;	306:1:7938:7956	1314082	1	True				
ANR	1314090	IdentifierDecl	* classad_c		1314082	0					
ANR	1314091	IdentifierDeclType	ClassAd *		1314082	0					
ANR	1314092	Identifier	classad_c		1314082	1					
ANR	1314093	IdentifierDeclStatement	"ifstream stream ( ""tmp.classads.tmp"" ) ;"	308:1:7960:7995	1314082	2	True				
ANR	1314094	IdentifierDecl	"stream ( ""tmp.classads.tmp"" )"		1314082	0					
ANR	1314095	IdentifierDeclType	ifstream		1314082	0					
ANR	1314096	Identifier	stream		1314082	1					
ANR	1314097	PrimaryExpression	"""tmp.classads.tmp"""		1314082	2					
ANR	1314098	IfStatement	if ( ! stream )		1314082	3					
ANR	1314099	Condition	! stream	309:5:8002:8008	1314082	0	True				
ANR	1314100	UnaryOperationExpression	! stream		1314082	0					
ANR	1314101	UnaryOperator	!		1314082	0					
ANR	1314102	Identifier	stream		1314082	1					
ANR	1314103	CompoundStatement		6:14:98:98	1314082	1					
ANR	1314104	ExpressionStatement	"cout << ""Can't open temporary ClassAd file.\\n"""	310:2:8015:8061	1314082	0	True				
ANR	1314105	ShiftExpression	"cout << ""Can't open temporary ClassAd file.\\n"""		1314082	0		<<			
ANR	1314106	Identifier	cout		1314082	0					
ANR	1314107	PrimaryExpression	"""Can't open temporary ClassAd file.\\n"""		1314082	1					
ANR	1314108	ExpressionStatement	exit ( 1 )	311:2:8065:8072	1314082	1	True				
ANR	1314109	CallExpression	exit ( 1 )		1314082	0					
ANR	1314110	Callee	exit		1314082	0					
ANR	1314111	Identifier	exit		1314082	0					
ANR	1314112	ArgumentList	1		1314082	1					
ANR	1314113	Argument	1		1314082	0					
ANR	1314114	PrimaryExpression	1		1314082	0					
ANR	1314115	ExpressionStatement	"cout << ""Reading from ifstream.\\n"""	314:1:8079:8113	1314082	4	True				
ANR	1314116	ShiftExpression	"cout << ""Reading from ifstream.\\n"""		1314082	0		<<			
ANR	1314117	Identifier	cout		1314082	0					
ANR	1314118	PrimaryExpression	"""Reading from ifstream.\\n"""		1314082	1					
ANR	1314119	ExpressionStatement	* classad_a = parser . ParseClassAd ( stream )	316:1:8117:8157	1314082	5	True				
ANR	1314120	AssignmentExpression	* classad_a = parser . ParseClassAd ( stream )		1314082	0		=			
ANR	1314121	UnaryOperationExpression	* classad_a		1314082	0					
ANR	1314122	UnaryOperator	*		1314082	0					
ANR	1314123	Identifier	classad_a		1314082	1					
ANR	1314124	CallExpression	parser . ParseClassAd ( stream )		1314082	1					
ANR	1314125	Callee	parser . ParseClassAd		1314082	0					
ANR	1314126	MemberAccess	parser . ParseClassAd		1314082	0					
ANR	1314127	Identifier	parser		1314082	0					
ANR	1314128	Identifier	ParseClassAd		1314082	1					
ANR	1314129	ArgumentList	stream		1314082	1					
ANR	1314130	Argument	stream		1314082	0					
ANR	1314131	Identifier	stream		1314082	0					
ANR	1314132	ExpressionStatement	* classad_b = parser . ParseClassAd ( stream )	317:1:8160:8200	1314082	6	True				
ANR	1314133	AssignmentExpression	* classad_b = parser . ParseClassAd ( stream )		1314082	0		=			
ANR	1314134	UnaryOperationExpression	* classad_b		1314082	0					
ANR	1314135	UnaryOperator	*		1314082	0					
ANR	1314136	Identifier	classad_b		1314082	1					
ANR	1314137	CallExpression	parser . ParseClassAd ( stream )		1314082	1					
ANR	1314138	Callee	parser . ParseClassAd		1314082	0					
ANR	1314139	MemberAccess	parser . ParseClassAd		1314082	0					
ANR	1314140	Identifier	parser		1314082	0					
ANR	1314141	Identifier	ParseClassAd		1314082	1					
ANR	1314142	ArgumentList	stream		1314082	1					
ANR	1314143	Argument	stream		1314082	0					
ANR	1314144	Identifier	stream		1314082	0					
ANR	1314145	ExpressionStatement	classad_c = parser . ParseClassAd ( stream )	318:1:8203:8242	1314082	7	True				
ANR	1314146	AssignmentExpression	classad_c = parser . ParseClassAd ( stream )		1314082	0		=			
ANR	1314147	Identifier	classad_c		1314082	0					
ANR	1314148	CallExpression	parser . ParseClassAd ( stream )		1314082	1					
ANR	1314149	Callee	parser . ParseClassAd		1314082	0					
ANR	1314150	MemberAccess	parser . ParseClassAd		1314082	0					
ANR	1314151	Identifier	parser		1314082	0					
ANR	1314152	Identifier	ParseClassAd		1314082	1					
ANR	1314153	ArgumentList	stream		1314082	1					
ANR	1314154	Argument	stream		1314082	0					
ANR	1314155	Identifier	stream		1314082	0					
ANR	1314156	ExpressionStatement	"check_parse ( * classad_a , * classad_b , classad_c )"	320:1:8246:8292	1314082	8	True				
ANR	1314157	CallExpression	"check_parse ( * classad_a , * classad_b , classad_c )"		1314082	0					
ANR	1314158	Callee	check_parse		1314082	0					
ANR	1314159	Identifier	check_parse		1314082	0					
ANR	1314160	ArgumentList	* classad_a		1314082	1					
ANR	1314161	Argument	* classad_a		1314082	0					
ANR	1314162	UnaryOperationExpression	* classad_a		1314082	0					
ANR	1314163	UnaryOperator	*		1314082	0					
ANR	1314164	Identifier	classad_a		1314082	1					
ANR	1314165	Argument	* classad_b		1314082	1					
ANR	1314166	UnaryOperationExpression	* classad_b		1314082	0					
ANR	1314167	UnaryOperator	*		1314082	0					
ANR	1314168	Identifier	classad_b		1314082	1					
ANR	1314169	Argument	classad_c		1314082	2					
ANR	1314170	Identifier	classad_c		1314082	0					
ANR	1314171	ReturnStatement	return ;	321:1:8295:8301	1314082	9	True				
ANR	1314172	ReturnType	static void		1314082	1					
ANR	1314173	Identifier	read_from_stream		1314082	2					
ANR	1314174	ParameterList	"ClassAd * * classad_a , ClassAd * * classad_b"		1314082	3					
ANR	1314175	Parameter	ClassAd * * classad_a	303:29:7870:7888	1314082	0	True				
ANR	1314176	ParameterType	ClassAd * *		1314082	0					
ANR	1314177	Identifier	classad_a		1314082	1					
ANR	1314178	Parameter	ClassAd * * classad_b	303:50:7891:7909	1314082	1	True				
ANR	1314179	ParameterType	ClassAd * *		1314082	0					
ANR	1314180	Identifier	classad_b		1314082	1					
ANR	1314181	CFGEntryNode	ENTRY		1314082		True				
ANR	1314182	CFGExitNode	EXIT		1314082		True				
ANR	1314183	Symbol	* classad_a		1314082						
ANR	1314184	Symbol	parser		1314082						
ANR	1314185	Symbol	stream		1314082						
ANR	1314186	Symbol	classad_a		1314082						
ANR	1314187	Symbol	* classad_b		1314082						
ANR	1314188	Symbol	classad_c		1314082						
ANR	1314189	Symbol	parser . ParseClassAd		1314082						
ANR	1314190	Symbol	classad_b		1314082						
ANR	1314191	Function	read_from_stream_alt	324:0:8306:8915							
ANR	1314192	FunctionDef	"read_from_stream_alt (ClassAd * * classad_a , ClassAd * * classad_b)"		1314191	0					
ANR	1314193	CompoundStatement		325:0:8381:8915	1314191	0					
ANR	1314194	IdentifierDeclStatement	ClassAdParser parser ;	326:1:8384:8404	1314191	0	True				
ANR	1314195	IdentifierDecl	parser		1314191	0					
ANR	1314196	IdentifierDeclType	ClassAdParser		1314191	0					
ANR	1314197	Identifier	parser		1314191	1					
ANR	1314198	IdentifierDeclStatement	ClassAd * classad_c ;	327:1:8407:8425	1314191	1	True				
ANR	1314199	IdentifierDecl	* classad_c		1314191	0					
ANR	1314200	IdentifierDeclType	ClassAd *		1314191	0					
ANR	1314201	Identifier	classad_c		1314191	1					
ANR	1314202	IdentifierDeclStatement	"ifstream stream ( ""tmp.classads.tmp"" ) ;"	329:1:8429:8464	1314191	2	True				
ANR	1314203	IdentifierDecl	"stream ( ""tmp.classads.tmp"" )"		1314191	0					
ANR	1314204	IdentifierDeclType	ifstream		1314191	0					
ANR	1314205	Identifier	stream		1314191	1					
ANR	1314206	PrimaryExpression	"""tmp.classads.tmp"""		1314191	2					
ANR	1314207	IfStatement	if ( ! stream )		1314191	3					
ANR	1314208	Condition	! stream	330:5:8471:8477	1314191	0	True				
ANR	1314209	UnaryOperationExpression	! stream		1314191	0					
ANR	1314210	UnaryOperator	!		1314191	0					
ANR	1314211	Identifier	stream		1314191	1					
ANR	1314212	CompoundStatement		6:14:98:98	1314191	1					
ANR	1314213	ExpressionStatement	"cout << ""Can't open temporary ClassAd file.\\n"""	331:2:8484:8530	1314191	0	True				
ANR	1314214	ShiftExpression	"cout << ""Can't open temporary ClassAd file.\\n"""		1314191	0		<<			
ANR	1314215	Identifier	cout		1314191	0					
ANR	1314216	PrimaryExpression	"""Can't open temporary ClassAd file.\\n"""		1314191	1					
ANR	1314217	ExpressionStatement	exit ( 1 )	332:2:8534:8541	1314191	1	True				
ANR	1314218	CallExpression	exit ( 1 )		1314191	0					
ANR	1314219	Callee	exit		1314191	0					
ANR	1314220	Identifier	exit		1314191	0					
ANR	1314221	ArgumentList	1		1314191	1					
ANR	1314222	Argument	1		1314191	0					
ANR	1314223	PrimaryExpression	1		1314191	0					
ANR	1314224	ExpressionStatement	"cout << ""Reading from ifstream (alt parse).\\n"""	335:1:8548:8594	1314191	4	True				
ANR	1314225	ShiftExpression	"cout << ""Reading from ifstream (alt parse).\\n"""		1314191	0		<<			
ANR	1314226	Identifier	cout		1314191	0					
ANR	1314227	PrimaryExpression	"""Reading from ifstream (alt parse).\\n"""		1314191	1					
ANR	1314228	Statement	*	337:1:8598:8598	1314191	5	True				
ANR	1314229	Statement	classad_a	337:2:8599:8607	1314191	6	True				
ANR	1314230	Statement	=	337:12:8609:8609	1314191	7	True				
ANR	1314231	Statement	new	337:14:8611:8613	1314191	8	True				
ANR	1314232	ExpressionStatement	ClassAd	337:18:8615:8622	1314191	9	True				
ANR	1314233	Identifier	ClassAd		1314191	0					
ANR	1314234	Statement	*	338:1:8625:8625	1314191	10	True				
ANR	1314235	Statement	classad_b	338:2:8626:8634	1314191	11	True				
ANR	1314236	Statement	=	338:12:8636:8636	1314191	12	True				
ANR	1314237	Statement	new	338:14:8638:8640	1314191	13	True				
ANR	1314238	ExpressionStatement	ClassAd	338:18:8642:8649	1314191	14	True				
ANR	1314239	Identifier	ClassAd		1314191	0					
ANR	1314240	Statement	classad_c	339:1:8652:8660	1314191	15	True				
ANR	1314241	Statement	=	339:12:8663:8663	1314191	16	True				
ANR	1314242	Statement	new	339:14:8665:8667	1314191	17	True				
ANR	1314243	ExpressionStatement	ClassAd	339:18:8669:8676	1314191	18	True				
ANR	1314244	Identifier	ClassAd		1314191	0					
ANR	1314245	ExpressionStatement	"parser . ParseClassAd ( stream , * * classad_a )"	340:1:8679:8719	1314191	19	True				
ANR	1314246	CallExpression	"parser . ParseClassAd ( stream , * * classad_a )"		1314191	0					
ANR	1314247	Callee	parser . ParseClassAd		1314191	0					
ANR	1314248	MemberAccess	parser . ParseClassAd		1314191	0					
ANR	1314249	Identifier	parser		1314191	0					
ANR	1314250	Identifier	ParseClassAd		1314191	1					
ANR	1314251	ArgumentList	stream		1314191	1					
ANR	1314252	Argument	stream		1314191	0					
ANR	1314253	Identifier	stream		1314191	0					
ANR	1314254	Argument	* * classad_a		1314191	1					
ANR	1314255	UnaryOperationExpression	* * classad_a		1314191	0					
ANR	1314256	UnaryOperator	*		1314191	0					
ANR	1314257	UnaryOperationExpression	* classad_a		1314191	1					
ANR	1314258	UnaryOperator	*		1314191	0					
ANR	1314259	Identifier	classad_a		1314191	1					
ANR	1314260	ExpressionStatement	"parser . ParseClassAd ( stream , * * classad_b )"	341:1:8722:8762	1314191	20	True				
ANR	1314261	CallExpression	"parser . ParseClassAd ( stream , * * classad_b )"		1314191	0					
ANR	1314262	Callee	parser . ParseClassAd		1314191	0					
ANR	1314263	MemberAccess	parser . ParseClassAd		1314191	0					
ANR	1314264	Identifier	parser		1314191	0					
ANR	1314265	Identifier	ParseClassAd		1314191	1					
ANR	1314266	ArgumentList	stream		1314191	1					
ANR	1314267	Argument	stream		1314191	0					
ANR	1314268	Identifier	stream		1314191	0					
ANR	1314269	Argument	* * classad_b		1314191	1					
ANR	1314270	UnaryOperationExpression	* * classad_b		1314191	0					
ANR	1314271	UnaryOperator	*		1314191	0					
ANR	1314272	UnaryOperationExpression	* classad_b		1314191	1					
ANR	1314273	UnaryOperator	*		1314191	0					
ANR	1314274	Identifier	classad_b		1314191	1					
ANR	1314275	IfStatement	"if ( ! parser . ParseClassAd ( stream , * classad_c ) )"		1314191	21					
ANR	1314276	Condition	"! parser . ParseClassAd ( stream , * classad_c )"	342:5:8769:8808	1314191	0	True				
ANR	1314277	UnaryOperationExpression	"! parser . ParseClassAd ( stream , * classad_c )"		1314191	0					
ANR	1314278	UnaryOperator	!		1314191	0					
ANR	1314279	CallExpression	"parser . ParseClassAd ( stream , * classad_c )"		1314191	1					
ANR	1314280	Callee	parser . ParseClassAd		1314191	0					
ANR	1314281	MemberAccess	parser . ParseClassAd		1314191	0					
ANR	1314282	Identifier	parser		1314191	0					
ANR	1314283	Identifier	ParseClassAd		1314191	1					
ANR	1314284	ArgumentList	stream		1314191	1					
ANR	1314285	Argument	stream		1314191	0					
ANR	1314286	Identifier	stream		1314191	0					
ANR	1314287	Argument	* classad_c		1314191	1					
ANR	1314288	UnaryOperationExpression	* classad_c		1314191	0					
ANR	1314289	UnaryOperator	*		1314191	0					
ANR	1314290	Identifier	classad_c		1314191	1					
ANR	1314291	CompoundStatement		18:47:429:429	1314191	1					
ANR	1314292	Statement	delete	343:2:8815:8820	1314191	0	True				
ANR	1314293	ExpressionStatement	classad_c	343:9:8822:8831	1314191	1	True				
ANR	1314294	Identifier	classad_c		1314191	0					
ANR	1314295	ExpressionStatement	classad_c = NULL	344:2:8835:8851	1314191	2	True				
ANR	1314296	AssignmentExpression	classad_c = NULL		1314191	0		=			
ANR	1314297	Identifier	classad_c		1314191	0					
ANR	1314298	Identifier	NULL		1314191	1					
ANR	1314299	ExpressionStatement	"check_parse ( * classad_a , * classad_b , classad_c )"	347:1:8858:8904	1314191	22	True				
ANR	1314300	CallExpression	"check_parse ( * classad_a , * classad_b , classad_c )"		1314191	0					
ANR	1314301	Callee	check_parse		1314191	0					
ANR	1314302	Identifier	check_parse		1314191	0					
ANR	1314303	ArgumentList	* classad_a		1314191	1					
ANR	1314304	Argument	* classad_a		1314191	0					
ANR	1314305	UnaryOperationExpression	* classad_a		1314191	0					
ANR	1314306	UnaryOperator	*		1314191	0					
ANR	1314307	Identifier	classad_a		1314191	1					
ANR	1314308	Argument	* classad_b		1314191	1					
ANR	1314309	UnaryOperationExpression	* classad_b		1314191	0					
ANR	1314310	UnaryOperator	*		1314191	0					
ANR	1314311	Identifier	classad_b		1314191	1					
ANR	1314312	Argument	classad_c		1314191	2					
ANR	1314313	Identifier	classad_c		1314191	0					
ANR	1314314	ReturnStatement	return ;	348:1:8907:8913	1314191	23	True				
ANR	1314315	ReturnType	static void		1314191	1					
ANR	1314316	Identifier	read_from_stream_alt		1314191	2					
ANR	1314317	ParameterList	"ClassAd * * classad_a , ClassAd * * classad_b"		1314191	3					
ANR	1314318	Parameter	ClassAd * * classad_a	324:33:8339:8357	1314191	0	True				
ANR	1314319	ParameterType	ClassAd * *		1314191	0					
ANR	1314320	Identifier	classad_a		1314191	1					
ANR	1314321	Parameter	ClassAd * * classad_b	324:54:8360:8378	1314191	1	True				
ANR	1314322	ParameterType	ClassAd * *		1314191	0					
ANR	1314323	Identifier	classad_b		1314191	1					
ANR	1314324	CFGEntryNode	ENTRY		1314191		True				
ANR	1314325	CFGExitNode	EXIT		1314191		True				
ANR	1314326	Symbol	* classad_a		1314191						
ANR	1314327	Symbol	NULL		1314191						
ANR	1314328	Symbol	parser		1314191						
ANR	1314329	Symbol	stream		1314191						
ANR	1314330	Symbol	* * classad_a		1314191						
ANR	1314331	Symbol	* * classad_b		1314191						
ANR	1314332	Symbol	classad_a		1314191						
ANR	1314333	Symbol	* classad_c		1314191						
ANR	1314334	Symbol	* classad_b		1314191						
ANR	1314335	Symbol	classad_c		1314191						
ANR	1314336	Symbol	parser . ParseClassAd		1314191						
ANR	1314337	Symbol	classad_b		1314191						
ANR	1314338	Function	check_parse	351:0:8918:9274							
ANR	1314339	FunctionDef	"check_parse (ClassAd * classad_a , ClassAd * classad_b , ClassAd * classad_c)"		1314338	0					
ANR	1314340	CompoundStatement		355:0:9006:9274	1314338	0					
ANR	1314341	IfStatement	if ( classad_a == NULL )		1314338	0					
ANR	1314342	Condition	classad_a == NULL	357:5:9014:9030	1314338	0	True				
ANR	1314343	EqualityExpression	classad_a == NULL		1314338	0		==			
ANR	1314344	Identifier	classad_a		1314338	0					
ANR	1314345	Identifier	NULL		1314338	1					
ANR	1314346	CompoundStatement		3:24:26:26	1314338	1					
ANR	1314347	ExpressionStatement	"cout << ""Couldn't parse first classad!\\n"""	358:2:9037:9078	1314338	0	True				
ANR	1314348	ShiftExpression	"cout << ""Couldn't parse first classad!\\n"""		1314338	0		<<			
ANR	1314349	Identifier	cout		1314338	0					
ANR	1314350	PrimaryExpression	"""Couldn't parse first classad!\\n"""		1314338	1					
ANR	1314351	ExpressionStatement	exit ( 1 )	359:2:9082:9089	1314338	1	True				
ANR	1314352	CallExpression	exit ( 1 )		1314338	0					
ANR	1314353	Callee	exit		1314338	0					
ANR	1314354	Identifier	exit		1314338	0					
ANR	1314355	ArgumentList	1		1314338	1					
ANR	1314356	Argument	1		1314338	0					
ANR	1314357	PrimaryExpression	1		1314338	0					
ANR	1314358	ElseStatement	else		1314338	0					
ANR	1314359	IfStatement	if ( classad_b == NULL )		1314338	0					
ANR	1314360	Condition	classad_b == NULL	360:12:9103:9119	1314338	0	True				
ANR	1314361	EqualityExpression	classad_b == NULL		1314338	0		==			
ANR	1314362	Identifier	classad_b		1314338	0					
ANR	1314363	Identifier	NULL		1314338	1					
ANR	1314364	CompoundStatement		6:31:115:115	1314338	1					
ANR	1314365	ExpressionStatement	"cout << ""Couldn't parse second classad!\\n"""	361:2:9126:9168	1314338	0	True				
ANR	1314366	ShiftExpression	"cout << ""Couldn't parse second classad!\\n"""		1314338	0		<<			
ANR	1314367	Identifier	cout		1314338	0					
ANR	1314368	PrimaryExpression	"""Couldn't parse second classad!\\n"""		1314338	1					
ANR	1314369	ExpressionStatement	exit ( 1 )	362:2:9172:9179	1314338	1	True				
ANR	1314370	CallExpression	exit ( 1 )		1314338	0					
ANR	1314371	Callee	exit		1314338	0					
ANR	1314372	Identifier	exit		1314338	0					
ANR	1314373	ArgumentList	1		1314338	1					
ANR	1314374	Argument	1		1314338	0					
ANR	1314375	PrimaryExpression	1		1314338	0					
ANR	1314376	ElseStatement	else		1314338	0					
ANR	1314377	IfStatement	if ( classad_c != NULL )		1314338	0					
ANR	1314378	Condition	classad_c != NULL	363:12:9193:9209	1314338	0	True				
ANR	1314379	EqualityExpression	classad_c != NULL		1314338	0		!=			
ANR	1314380	Identifier	classad_c		1314338	0					
ANR	1314381	Identifier	NULL		1314338	1					
ANR	1314382	CompoundStatement		9:31:205:205	1314338	1					
ANR	1314383	ExpressionStatement	"cout << ""Parsed third ClassAd?\\n"""	364:2:9216:9249	1314338	0	True				
ANR	1314384	ShiftExpression	"cout << ""Parsed third ClassAd?\\n"""		1314338	0		<<			
ANR	1314385	Identifier	cout		1314338	0					
ANR	1314386	PrimaryExpression	"""Parsed third ClassAd?\\n"""		1314338	1					
ANR	1314387	ExpressionStatement	exit ( 1 )	365:2:9253:9260	1314338	1	True				
ANR	1314388	CallExpression	exit ( 1 )		1314338	0					
ANR	1314389	Callee	exit		1314338	0					
ANR	1314390	Identifier	exit		1314338	0					
ANR	1314391	ArgumentList	1		1314338	1					
ANR	1314392	Argument	1		1314338	0					
ANR	1314393	PrimaryExpression	1		1314338	0					
ANR	1314394	ReturnStatement	return ;	367:1:9266:9272	1314338	1	True				
ANR	1314395	ReturnType	static void		1314338	1					
ANR	1314396	Identifier	check_parse		1314338	2					
ANR	1314397	ParameterList	"ClassAd * classad_a , ClassAd * classad_b , ClassAd * classad_c"		1314338	3					
ANR	1314398	Parameter	ClassAd * classad_a	352:1:8944:8961	1314338	0	True				
ANR	1314399	ParameterType	ClassAd *		1314338	0					
ANR	1314400	Identifier	classad_a		1314338	1					
ANR	1314401	Parameter	ClassAd * classad_b	353:1:8965:8982	1314338	1	True				
ANR	1314402	ParameterType	ClassAd *		1314338	0					
ANR	1314403	Identifier	classad_b		1314338	1					
ANR	1314404	Parameter	ClassAd * classad_c	354:1:8986:9003	1314338	2	True				
ANR	1314405	ParameterType	ClassAd *		1314338	0					
ANR	1314406	Identifier	classad_c		1314338	1					
ANR	1314407	CFGEntryNode	ENTRY		1314338		True				
ANR	1314408	CFGExitNode	EXIT		1314338		True				
ANR	1314409	Symbol	NULL		1314338						
ANR	1314410	Symbol	classad_a		1314338						
ANR	1314411	Symbol	classad_c		1314338						
ANR	1314412	Symbol	classad_b		1314338						
ANR	1314413	Function	check_classad_a	370:0:9277:9801							
ANR	1314414	FunctionDef	check_classad_a (ClassAd * classad)		1314413	0					
ANR	1314415	CompoundStatement		371:0:9323:9801	1314413	0					
ANR	1314416	IdentifierDeclStatement	int a ;	372:1:9326:9334	1314413	0	True				
ANR	1314417	IdentifierDecl	a		1314413	0					
ANR	1314418	IdentifierDeclType	int		1314413	0					
ANR	1314419	Identifier	a		1314413	1					
ANR	1314420	IdentifierDeclStatement	string b ;	373:1:9337:9345	1314413	1	True				
ANR	1314421	IdentifierDecl	b		1314413	0					
ANR	1314422	IdentifierDeclType	string		1314413	0					
ANR	1314423	Identifier	b		1314413	1					
ANR	1314424	IdentifierDeclStatement	bool c ;	374:1:9348:9356	1314413	2	True				
ANR	1314425	IdentifierDecl	c		1314413	0					
ANR	1314426	IdentifierDeclType	bool		1314413	0					
ANR	1314427	Identifier	c		1314413	1					
ANR	1314428	IdentifierDeclStatement	bool success = true ;	375:1:9359:9380	1314413	3	True				
ANR	1314429	IdentifierDecl	success = true		1314413	0					
ANR	1314430	IdentifierDeclType	bool		1314413	0					
ANR	1314431	Identifier	success		1314413	1					
ANR	1314432	AssignmentExpression	success = true		1314413	2		=			
ANR	1314433	Identifier	true		1314413	0					
ANR	1314434	Identifier	true		1314413	1					
ANR	1314435	IfStatement	"if ( ! classad -> EvaluateAttrInt ( ""A"" , a ) || a != 1 )"		1314413	4					
ANR	1314436	Condition	"! classad -> EvaluateAttrInt ( ""A"" , a ) || a != 1"	377:5:9388:9430	1314413	0	True				
ANR	1314437	OrExpression	"! classad -> EvaluateAttrInt ( ""A"" , a ) || a != 1"		1314413	0		||			
ANR	1314438	UnaryOperationExpression	"! classad -> EvaluateAttrInt ( ""A"" , a )"		1314413	0					
ANR	1314439	UnaryOperator	!		1314413	0					
ANR	1314440	CallExpression	"classad -> EvaluateAttrInt ( ""A"" , a )"		1314413	1					
ANR	1314441	Callee	classad -> EvaluateAttrInt		1314413	0					
ANR	1314442	PtrMemberAccess	classad -> EvaluateAttrInt		1314413	0					
ANR	1314443	Identifier	classad		1314413	0					
ANR	1314444	Identifier	EvaluateAttrInt		1314413	1					
ANR	1314445	ArgumentList	"""A"""		1314413	1					
ANR	1314446	Argument	"""A"""		1314413	0					
ANR	1314447	PrimaryExpression	"""A"""		1314413	0					
ANR	1314448	Argument	a		1314413	1					
ANR	1314449	Identifier	a		1314413	0					
ANR	1314450	EqualityExpression	a != 1		1314413	1		!=			
ANR	1314451	Identifier	a		1314413	0					
ANR	1314452	PrimaryExpression	1		1314413	1					
ANR	1314453	CompoundStatement		7:50:109:109	1314413	1					
ANR	1314454	ExpressionStatement	"cout << ""  Failed: A.A is bad.\\n"""	378:2:9437:9470	1314413	0	True				
ANR	1314455	ShiftExpression	"cout << ""  Failed: A.A is bad.\\n"""		1314413	0		<<			
ANR	1314456	Identifier	cout		1314413	0					
ANR	1314457	PrimaryExpression	"""  Failed: A.A is bad.\\n"""		1314413	1					
ANR	1314458	ExpressionStatement	success = false	379:2:9474:9489	1314413	1	True				
ANR	1314459	AssignmentExpression	success = false		1314413	0		=			
ANR	1314460	Identifier	success		1314413	0					
ANR	1314461	Identifier	false		1314413	1					
ANR	1314462	IfStatement	"if ( ! classad -> EvaluateAttrString ( ""B"" , b ) || b != ""blue"" )"		1314413	5					
ANR	1314463	Condition	"! classad -> EvaluateAttrString ( ""B"" , b ) || b != ""blue"""	382:5:9500:9550	1314413	0	True				
ANR	1314464	OrExpression	"! classad -> EvaluateAttrString ( ""B"" , b ) || b != ""blue"""		1314413	0		||			
ANR	1314465	UnaryOperationExpression	"! classad -> EvaluateAttrString ( ""B"" , b )"		1314413	0					
ANR	1314466	UnaryOperator	!		1314413	0					
ANR	1314467	CallExpression	"classad -> EvaluateAttrString ( ""B"" , b )"		1314413	1					
ANR	1314468	Callee	classad -> EvaluateAttrString		1314413	0					
ANR	1314469	PtrMemberAccess	classad -> EvaluateAttrString		1314413	0					
ANR	1314470	Identifier	classad		1314413	0					
ANR	1314471	Identifier	EvaluateAttrString		1314413	1					
ANR	1314472	ArgumentList	"""B"""		1314413	1					
ANR	1314473	Argument	"""B"""		1314413	0					
ANR	1314474	PrimaryExpression	"""B"""		1314413	0					
ANR	1314475	Argument	b		1314413	1					
ANR	1314476	Identifier	b		1314413	0					
ANR	1314477	EqualityExpression	"b != ""blue"""		1314413	1		!=			
ANR	1314478	Identifier	b		1314413	0					
ANR	1314479	PrimaryExpression	"""blue"""		1314413	1					
ANR	1314480	CompoundStatement		12:58:229:229	1314413	1					
ANR	1314481	ExpressionStatement	"cout << ""  Failed: A.B is bad.\\n"""	383:2:9557:9590	1314413	0	True				
ANR	1314482	ShiftExpression	"cout << ""  Failed: A.B is bad.\\n"""		1314413	0		<<			
ANR	1314483	Identifier	cout		1314413	0					
ANR	1314484	PrimaryExpression	"""  Failed: A.B is bad.\\n"""		1314413	1					
ANR	1314485	ExpressionStatement	success = false	384:2:9594:9609	1314413	1	True				
ANR	1314486	AssignmentExpression	success = false		1314413	0		=			
ANR	1314487	Identifier	success		1314413	0					
ANR	1314488	Identifier	false		1314413	1					
ANR	1314489	IfStatement	"if ( ! classad -> EvaluateAttrBool ( ""C"" , c ) || c != true )"		1314413	6					
ANR	1314490	Condition	"! classad -> EvaluateAttrBool ( ""C"" , c ) || c != true"	387:5:9620:9666	1314413	0	True				
ANR	1314491	OrExpression	"! classad -> EvaluateAttrBool ( ""C"" , c ) || c != true"		1314413	0		||			
ANR	1314492	UnaryOperationExpression	"! classad -> EvaluateAttrBool ( ""C"" , c )"		1314413	0					
ANR	1314493	UnaryOperator	!		1314413	0					
ANR	1314494	CallExpression	"classad -> EvaluateAttrBool ( ""C"" , c )"		1314413	1					
ANR	1314495	Callee	classad -> EvaluateAttrBool		1314413	0					
ANR	1314496	PtrMemberAccess	classad -> EvaluateAttrBool		1314413	0					
ANR	1314497	Identifier	classad		1314413	0					
ANR	1314498	Identifier	EvaluateAttrBool		1314413	1					
ANR	1314499	ArgumentList	"""C"""		1314413	1					
ANR	1314500	Argument	"""C"""		1314413	0					
ANR	1314501	PrimaryExpression	"""C"""		1314413	0					
ANR	1314502	Argument	c		1314413	1					
ANR	1314503	Identifier	c		1314413	0					
ANR	1314504	EqualityExpression	c != true		1314413	1		!=			
ANR	1314505	Identifier	c		1314413	0					
ANR	1314506	Identifier	true		1314413	1					
ANR	1314507	CompoundStatement		17:54:345:345	1314413	1					
ANR	1314508	ExpressionStatement	"cout << ""  Failed: A.C is bad.\\n"""	388:2:9673:9706	1314413	0	True				
ANR	1314509	ShiftExpression	"cout << ""  Failed: A.C is bad.\\n"""		1314413	0		<<			
ANR	1314510	Identifier	cout		1314413	0					
ANR	1314511	PrimaryExpression	"""  Failed: A.C is bad.\\n"""		1314413	1					
ANR	1314512	ExpressionStatement	success = false	389:2:9710:9725	1314413	1	True				
ANR	1314513	AssignmentExpression	success = false		1314413	0		=			
ANR	1314514	Identifier	success		1314413	0					
ANR	1314515	Identifier	false		1314413	1					
ANR	1314516	IfStatement	if ( success )		1314413	7					
ANR	1314517	Condition	success	392:5:9739:9745	1314413	0	True				
ANR	1314518	Identifier	success		1314413	0					
ANR	1314519	CompoundStatement		22:14:424:424	1314413	1					
ANR	1314520	ExpressionStatement	"cout << ""  ClassAd A looks good.\\n"""	393:2:9752:9787	1314413	0	True				
ANR	1314521	ShiftExpression	"cout << ""  ClassAd A looks good.\\n"""		1314413	0		<<			
ANR	1314522	Identifier	cout		1314413	0					
ANR	1314523	PrimaryExpression	"""  ClassAd A looks good.\\n"""		1314413	1					
ANR	1314524	ReturnStatement	return ;	395:1:9793:9799	1314413	8	True				
ANR	1314525	ReturnType	static void		1314413	1					
ANR	1314526	Identifier	check_classad_a		1314413	2					
ANR	1314527	ParameterList	ClassAd * classad		1314413	3					
ANR	1314528	Parameter	ClassAd * classad	370:28:9305:9320	1314413	0	True				
ANR	1314529	ParameterType	ClassAd *		1314413	0					
ANR	1314530	Identifier	classad		1314413	1					
ANR	1314531	CFGEntryNode	ENTRY		1314413		True				
ANR	1314532	CFGExitNode	EXIT		1314413		True				
ANR	1314533	Symbol	a		1314413						
ANR	1314534	Symbol	b		1314413						
ANR	1314535	Symbol	c		1314413						
ANR	1314536	Symbol	* classad		1314413						
ANR	1314537	Symbol	success		1314413						
ANR	1314538	Symbol	true		1314413						
ANR	1314539	Symbol	false		1314413						
ANR	1314540	Symbol	classad		1314413						
ANR	1314541	Symbol	classad -> EvaluateAttrInt		1314413						
ANR	1314542	Symbol	classad -> EvaluateAttrString		1314413						
ANR	1314543	Symbol	classad -> EvaluateAttrBool		1314413						
ANR	1314544	Function	check_classad_b	398:0:9804:10347							
ANR	1314545	FunctionDef	check_classad_b (ClassAd * classad)		1314544	0					
ANR	1314546	CompoundStatement		399:0:9850:10347	1314544	0					
ANR	1314547	IdentifierDeclStatement	int aa ;	400:1:9853:9862	1314544	0	True				
ANR	1314548	IdentifierDecl	aa		1314544	0					
ANR	1314549	IdentifierDeclType	int		1314544	0					
ANR	1314550	Identifier	aa		1314544	1					
ANR	1314551	IdentifierDeclStatement	string bb ;	401:1:9865:9874	1314544	1	True				
ANR	1314552	IdentifierDecl	bb		1314544	0					
ANR	1314553	IdentifierDeclType	string		1314544	0					
ANR	1314554	Identifier	bb		1314544	1					
ANR	1314555	IdentifierDeclStatement	bool cc ;	402:1:9877:9886	1314544	2	True				
ANR	1314556	IdentifierDecl	cc		1314544	0					
ANR	1314557	IdentifierDeclType	bool		1314544	0					
ANR	1314558	Identifier	cc		1314544	1					
ANR	1314559	IdentifierDeclStatement	bool success = true ;	403:1:9889:9910	1314544	3	True				
ANR	1314560	IdentifierDecl	success = true		1314544	0					
ANR	1314561	IdentifierDeclType	bool		1314544	0					
ANR	1314562	Identifier	success		1314544	1					
ANR	1314563	AssignmentExpression	success = true		1314544	2		=			
ANR	1314564	Identifier	true		1314544	0					
ANR	1314565	Identifier	true		1314544	1					
ANR	1314566	IfStatement	"if ( ! classad -> EvaluateAttrInt ( ""AA"" , aa ) || aa != 14 )"		1314544	4					
ANR	1314567	Condition	"! classad -> EvaluateAttrInt ( ""AA"" , aa ) || aa != 14"	405:5:9918:9964	1314544	0	True				
ANR	1314568	OrExpression	"! classad -> EvaluateAttrInt ( ""AA"" , aa ) || aa != 14"		1314544	0		||			
ANR	1314569	UnaryOperationExpression	"! classad -> EvaluateAttrInt ( ""AA"" , aa )"		1314544	0					
ANR	1314570	UnaryOperator	!		1314544	0					
ANR	1314571	CallExpression	"classad -> EvaluateAttrInt ( ""AA"" , aa )"		1314544	1					
ANR	1314572	Callee	classad -> EvaluateAttrInt		1314544	0					
ANR	1314573	PtrMemberAccess	classad -> EvaluateAttrInt		1314544	0					
ANR	1314574	Identifier	classad		1314544	0					
ANR	1314575	Identifier	EvaluateAttrInt		1314544	1					
ANR	1314576	ArgumentList	"""AA"""		1314544	1					
ANR	1314577	Argument	"""AA"""		1314544	0					
ANR	1314578	PrimaryExpression	"""AA"""		1314544	0					
ANR	1314579	Argument	aa		1314544	1					
ANR	1314580	Identifier	aa		1314544	0					
ANR	1314581	EqualityExpression	aa != 14		1314544	1		!=			
ANR	1314582	Identifier	aa		1314544	0					
ANR	1314583	PrimaryExpression	14		1314544	1					
ANR	1314584	CompoundStatement		7:54:116:116	1314544	1					
ANR	1314585	ExpressionStatement	"cout << ""  Failed: B.AA is bad.\\n"""	406:2:9971:10005	1314544	0	True				
ANR	1314586	ShiftExpression	"cout << ""  Failed: B.AA is bad.\\n"""		1314544	0		<<			
ANR	1314587	Identifier	cout		1314544	0					
ANR	1314588	PrimaryExpression	"""  Failed: B.AA is bad.\\n"""		1314544	1					
ANR	1314589	ExpressionStatement	success = false	407:2:10009:10024	1314544	1	True				
ANR	1314590	AssignmentExpression	success = false		1314544	0		=			
ANR	1314591	Identifier	success		1314544	0					
ANR	1314592	Identifier	false		1314544	1					
ANR	1314593	IfStatement	"if ( ! classad -> EvaluateAttrString ( ""BB"" , bb ) || bb != ""bonnet"" )"		1314544	5					
ANR	1314594	Condition	"! classad -> EvaluateAttrString ( ""BB"" , bb ) || bb != ""bonnet"""	410:5:10035:10090	1314544	0	True				
ANR	1314595	OrExpression	"! classad -> EvaluateAttrString ( ""BB"" , bb ) || bb != ""bonnet"""		1314544	0		||			
ANR	1314596	UnaryOperationExpression	"! classad -> EvaluateAttrString ( ""BB"" , bb )"		1314544	0					
ANR	1314597	UnaryOperator	!		1314544	0					
ANR	1314598	CallExpression	"classad -> EvaluateAttrString ( ""BB"" , bb )"		1314544	1					
ANR	1314599	Callee	classad -> EvaluateAttrString		1314544	0					
ANR	1314600	PtrMemberAccess	classad -> EvaluateAttrString		1314544	0					
ANR	1314601	Identifier	classad		1314544	0					
ANR	1314602	Identifier	EvaluateAttrString		1314544	1					
ANR	1314603	ArgumentList	"""BB"""		1314544	1					
ANR	1314604	Argument	"""BB"""		1314544	0					
ANR	1314605	PrimaryExpression	"""BB"""		1314544	0					
ANR	1314606	Argument	bb		1314544	1					
ANR	1314607	Identifier	bb		1314544	0					
ANR	1314608	EqualityExpression	"bb != ""bonnet"""		1314544	1		!=			
ANR	1314609	Identifier	bb		1314544	0					
ANR	1314610	PrimaryExpression	"""bonnet"""		1314544	1					
ANR	1314611	CompoundStatement		12:63:242:242	1314544	1					
ANR	1314612	ExpressionStatement	"cout << ""  Failed: B.BB is bad.\\n"""	411:2:10097:10131	1314544	0	True				
ANR	1314613	ShiftExpression	"cout << ""  Failed: B.BB is bad.\\n"""		1314544	0		<<			
ANR	1314614	Identifier	cout		1314544	0					
ANR	1314615	PrimaryExpression	"""  Failed: B.BB is bad.\\n"""		1314544	1					
ANR	1314616	ExpressionStatement	success = false	412:2:10135:10150	1314544	1	True				
ANR	1314617	AssignmentExpression	success = false		1314544	0		=			
ANR	1314618	Identifier	success		1314544	0					
ANR	1314619	Identifier	false		1314544	1					
ANR	1314620	IfStatement	"if ( ! classad -> EvaluateAttrBool ( ""CC"" , cc ) || cc != false )"		1314544	6					
ANR	1314621	Condition	"! classad -> EvaluateAttrBool ( ""CC"" , cc ) || cc != false"	415:5:10161:10211	1314544	0	True				
ANR	1314622	OrExpression	"! classad -> EvaluateAttrBool ( ""CC"" , cc ) || cc != false"		1314544	0		||			
ANR	1314623	UnaryOperationExpression	"! classad -> EvaluateAttrBool ( ""CC"" , cc )"		1314544	0					
ANR	1314624	UnaryOperator	!		1314544	0					
ANR	1314625	CallExpression	"classad -> EvaluateAttrBool ( ""CC"" , cc )"		1314544	1					
ANR	1314626	Callee	classad -> EvaluateAttrBool		1314544	0					
ANR	1314627	PtrMemberAccess	classad -> EvaluateAttrBool		1314544	0					
ANR	1314628	Identifier	classad		1314544	0					
ANR	1314629	Identifier	EvaluateAttrBool		1314544	1					
ANR	1314630	ArgumentList	"""CC"""		1314544	1					
ANR	1314631	Argument	"""CC"""		1314544	0					
ANR	1314632	PrimaryExpression	"""CC"""		1314544	0					
ANR	1314633	Argument	cc		1314544	1					
ANR	1314634	Identifier	cc		1314544	0					
ANR	1314635	EqualityExpression	cc != false		1314544	1		!=			
ANR	1314636	Identifier	cc		1314544	0					
ANR	1314637	Identifier	false		1314544	1					
ANR	1314638	CompoundStatement		17:58:363:363	1314544	1					
ANR	1314639	ExpressionStatement	"cout << ""  Failed: B.CC is bad.\\n"""	416:2:10218:10252	1314544	0	True				
ANR	1314640	ShiftExpression	"cout << ""  Failed: B.CC is bad.\\n"""		1314544	0		<<			
ANR	1314641	Identifier	cout		1314544	0					
ANR	1314642	PrimaryExpression	"""  Failed: B.CC is bad.\\n"""		1314544	1					
ANR	1314643	ExpressionStatement	success = false	417:2:10256:10271	1314544	1	True				
ANR	1314644	AssignmentExpression	success = false		1314544	0		=			
ANR	1314645	Identifier	success		1314544	0					
ANR	1314646	Identifier	false		1314544	1					
ANR	1314647	IfStatement	if ( success )		1314544	7					
ANR	1314648	Condition	success	420:5:10285:10291	1314544	0	True				
ANR	1314649	Identifier	success		1314544	0					
ANR	1314650	CompoundStatement		22:14:443:443	1314544	1					
ANR	1314651	ExpressionStatement	"cout << ""  ClassAd B looks good.\\n"""	421:2:10298:10333	1314544	0	True				
ANR	1314652	ShiftExpression	"cout << ""  ClassAd B looks good.\\n"""		1314544	0		<<			
ANR	1314653	Identifier	cout		1314544	0					
ANR	1314654	PrimaryExpression	"""  ClassAd B looks good.\\n"""		1314544	1					
ANR	1314655	ReturnStatement	return ;	423:1:10339:10345	1314544	8	True				
ANR	1314656	ReturnType	static void		1314544	1					
ANR	1314657	Identifier	check_classad_b		1314544	2					
ANR	1314658	ParameterList	ClassAd * classad		1314544	3					
ANR	1314659	Parameter	ClassAd * classad	398:28:9832:9847	1314544	0	True				
ANR	1314660	ParameterType	ClassAd *		1314544	0					
ANR	1314661	Identifier	classad		1314544	1					
ANR	1314662	CFGEntryNode	ENTRY		1314544		True				
ANR	1314663	CFGExitNode	EXIT		1314544		True				
ANR	1314664	Symbol	aa		1314544						
ANR	1314665	Symbol	bb		1314544						
ANR	1314666	Symbol	cc		1314544						
ANR	1314667	Symbol	* classad		1314544						
ANR	1314668	Symbol	success		1314544						
ANR	1314669	Symbol	true		1314544						
ANR	1314670	Symbol	false		1314544						
ANR	1314671	Symbol	classad		1314544						
ANR	1314672	Symbol	classad -> EvaluateAttrInt		1314544						
ANR	1314673	Symbol	classad -> EvaluateAttrString		1314544						
ANR	1314674	Symbol	classad -> EvaluateAttrBool		1314544						
ANR	1314675	Function	test_chaining	426:0:10350:12070							
ANR	1314676	FunctionDef	test_chaining ()		1314675	0					
ANR	1314677	CompoundStatement		427:0:10382:12070	1314675	0					
ANR	1314678	IdentifierDeclStatement	"ClassAd * root , * child ;"	428:1:10385:10406	1314675	0	True				
ANR	1314679	IdentifierDecl	* root		1314675	0					
ANR	1314680	IdentifierDeclType	ClassAd *		1314675	0					
ANR	1314681	Identifier	root		1314675	1					
ANR	1314682	IdentifierDecl	* child		1314675	1					
ANR	1314683	IdentifierDeclType	ClassAd *		1314675	0					
ANR	1314684	Identifier	child		1314675	1					
ANR	1314685	IdentifierDeclStatement	ClassAdParser parser ;	429:1:10409:10430	1314675	1	True				
ANR	1314686	IdentifierDecl	parser		1314675	0					
ANR	1314687	IdentifierDeclType	ClassAdParser		1314675	0					
ANR	1314688	Identifier	parser		1314675	1					
ANR	1314689	ExpressionStatement	root = parser . ParseClassAd ( chaining_root_text )	431:1:10434:10480	1314675	2	True				
ANR	1314690	AssignmentExpression	root = parser . ParseClassAd ( chaining_root_text )		1314675	0		=			
ANR	1314691	Identifier	root		1314675	0					
ANR	1314692	CallExpression	parser . ParseClassAd ( chaining_root_text )		1314675	1					
ANR	1314693	Callee	parser . ParseClassAd		1314675	0					
ANR	1314694	MemberAccess	parser . ParseClassAd		1314675	0					
ANR	1314695	Identifier	parser		1314675	0					
ANR	1314696	Identifier	ParseClassAd		1314675	1					
ANR	1314697	ArgumentList	chaining_root_text		1314675	1					
ANR	1314698	Argument	chaining_root_text		1314675	0					
ANR	1314699	Identifier	chaining_root_text		1314675	0					
ANR	1314700	ExpressionStatement	child = parser . ParseClassAd ( chaining_child_text )	432:1:10483:10531	1314675	3	True				
ANR	1314701	AssignmentExpression	child = parser . ParseClassAd ( chaining_child_text )		1314675	0		=			
ANR	1314702	Identifier	child		1314675	0					
ANR	1314703	CallExpression	parser . ParseClassAd ( chaining_child_text )		1314675	1					
ANR	1314704	Callee	parser . ParseClassAd		1314675	0					
ANR	1314705	MemberAccess	parser . ParseClassAd		1314675	0					
ANR	1314706	Identifier	parser		1314675	0					
ANR	1314707	Identifier	ParseClassAd		1314675	1					
ANR	1314708	ArgumentList	chaining_child_text		1314675	1					
ANR	1314709	Argument	chaining_child_text		1314675	0					
ANR	1314710	Identifier	chaining_child_text		1314675	0					
ANR	1314711	IfStatement	if ( root == NULL )		1314675	4					
ANR	1314712	Condition	root == NULL	434:5:10539:10550	1314675	0	True				
ANR	1314713	EqualityExpression	root == NULL		1314675	0		==			
ANR	1314714	Identifier	root		1314675	0					
ANR	1314715	Identifier	NULL		1314675	1					
ANR	1314716	CompoundStatement		8:19:170:170	1314675	1					
ANR	1314717	ExpressionStatement	"cout << ""Failed: Couldn't parse chaining root.\\n"""	435:2:10557:10606	1314675	0	True				
ANR	1314718	ShiftExpression	"cout << ""Failed: Couldn't parse chaining root.\\n"""		1314675	0		<<			
ANR	1314719	Identifier	cout		1314675	0					
ANR	1314720	PrimaryExpression	"""Failed: Couldn't parse chaining root.\\n"""		1314675	1					
ANR	1314721	ExpressionStatement	exit ( 1 )	436:2:10610:10617	1314675	1	True				
ANR	1314722	CallExpression	exit ( 1 )		1314675	0					
ANR	1314723	Callee	exit		1314675	0					
ANR	1314724	Identifier	exit		1314675	0					
ANR	1314725	ArgumentList	1		1314675	1					
ANR	1314726	Argument	1		1314675	0					
ANR	1314727	PrimaryExpression	1		1314675	0					
ANR	1314728	ElseStatement	else		1314675	0					
ANR	1314729	IfStatement	if ( child == NULL )		1314675	0					
ANR	1314730	Condition	child == NULL	437:12:10631:10643	1314675	0	True				
ANR	1314731	EqualityExpression	child == NULL		1314675	0		==			
ANR	1314732	Identifier	child		1314675	0					
ANR	1314733	Identifier	NULL		1314675	1					
ANR	1314734	CompoundStatement		11:27:263:263	1314675	1					
ANR	1314735	ExpressionStatement	"cout << ""Failed: Couldn't parser chaining child.\\n"""	438:2:10650:10701	1314675	0	True				
ANR	1314736	ShiftExpression	"cout << ""Failed: Couldn't parser chaining child.\\n"""		1314675	0		<<			
ANR	1314737	Identifier	cout		1314675	0					
ANR	1314738	PrimaryExpression	"""Failed: Couldn't parser chaining child.\\n"""		1314675	1					
ANR	1314739	ExpressionStatement	exit ( 1 )	439:2:10705:10712	1314675	1	True				
ANR	1314740	CallExpression	exit ( 1 )		1314675	0					
ANR	1314741	Callee	exit		1314675	0					
ANR	1314742	Identifier	exit		1314675	0					
ANR	1314743	ArgumentList	1		1314675	1					
ANR	1314744	Argument	1		1314675	0					
ANR	1314745	PrimaryExpression	1		1314675	0					
ANR	1314746	ExpressionStatement	"cout << ""\\nTesting chaining...\\n"""	442:1:10720:10753	1314675	5	True				
ANR	1314747	ShiftExpression	"cout << ""\\nTesting chaining...\\n"""		1314675	0		<<			
ANR	1314748	Identifier	cout		1314675	0					
ANR	1314749	PrimaryExpression	"""\\nTesting chaining...\\n"""		1314675	1					
ANR	1314750	ExpressionStatement	child -> ChainToAd ( root )	443:1:10756:10778	1314675	6	True				
ANR	1314751	CallExpression	child -> ChainToAd ( root )		1314675	0					
ANR	1314752	Callee	child -> ChainToAd		1314675	0					
ANR	1314753	PtrMemberAccess	child -> ChainToAd		1314675	0					
ANR	1314754	Identifier	child		1314675	0					
ANR	1314755	Identifier	ChainToAd		1314675	1					
ANR	1314756	ArgumentList	root		1314675	1					
ANR	1314757	Argument	root		1314675	0					
ANR	1314758	Identifier	root		1314675	0					
ANR	1314759	IdentifierDeclStatement	int aa ;	446:1:10821:10827	1314675	7	True				
ANR	1314760	IdentifierDecl	aa		1314675	0					
ANR	1314761	IdentifierDeclType	int		1314675	0					
ANR	1314762	Identifier	aa		1314675	1					
ANR	1314763	IfStatement	"if ( ! child -> EvaluateAttrInt ( ""AA"" , aa ) || aa != 14 )"		1314675	8					
ANR	1314764	Condition	"! child -> EvaluateAttrInt ( ""AA"" , aa ) || aa != 14"	447:5:10834:10878	1314675	0	True				
ANR	1314765	OrExpression	"! child -> EvaluateAttrInt ( ""AA"" , aa ) || aa != 14"		1314675	0		||			
ANR	1314766	UnaryOperationExpression	"! child -> EvaluateAttrInt ( ""AA"" , aa )"		1314675	0					
ANR	1314767	UnaryOperator	!		1314675	0					
ANR	1314768	CallExpression	"child -> EvaluateAttrInt ( ""AA"" , aa )"		1314675	1					
ANR	1314769	Callee	child -> EvaluateAttrInt		1314675	0					
ANR	1314770	PtrMemberAccess	child -> EvaluateAttrInt		1314675	0					
ANR	1314771	Identifier	child		1314675	0					
ANR	1314772	Identifier	EvaluateAttrInt		1314675	1					
ANR	1314773	ArgumentList	"""AA"""		1314675	1					
ANR	1314774	Argument	"""AA"""		1314675	0					
ANR	1314775	PrimaryExpression	"""AA"""		1314675	0					
ANR	1314776	Argument	aa		1314675	1					
ANR	1314777	Identifier	aa		1314675	0					
ANR	1314778	EqualityExpression	aa != 14		1314675	1		!=			
ANR	1314779	Identifier	aa		1314675	0					
ANR	1314780	PrimaryExpression	14		1314675	1					
ANR	1314781	CompoundStatement		21:52:498:498	1314675	1					
ANR	1314782	ExpressionStatement	"cout << ""  Couldn't retrieve AA from chained child.\\n"""	448:2:10885:10939	1314675	0	True				
ANR	1314783	ShiftExpression	"cout << ""  Couldn't retrieve AA from chained child.\\n"""		1314675	0		<<			
ANR	1314784	Identifier	cout		1314675	0					
ANR	1314785	PrimaryExpression	"""  Couldn't retrieve AA from chained child.\\n"""		1314675	1					
ANR	1314786	ElseStatement	else		1314675	0					
ANR	1314787	CompoundStatement		23:8:566:566	1314675	0					
ANR	1314788	ExpressionStatement	"cout << ""  Can look up AA.\\n"""	450:2:10953:10982	1314675	0	True				
ANR	1314789	ShiftExpression	"cout << ""  Can look up AA.\\n"""		1314675	0		<<			
ANR	1314790	Identifier	cout		1314675	0					
ANR	1314791	PrimaryExpression	"""  Can look up AA.\\n"""		1314675	1					
ANR	1314792	IdentifierDeclStatement	int a ;	454:1:11029:11034	1314675	9	True				
ANR	1314793	IdentifierDecl	a		1314675	0					
ANR	1314794	IdentifierDeclType	int		1314675	0					
ANR	1314795	Identifier	a		1314675	1					
ANR	1314796	IfStatement	"if ( ! child -> EvaluateAttrInt ( ""A"" , a ) || a != 1 )"		1314675	10					
ANR	1314797	Condition	"! child -> EvaluateAttrInt ( ""A"" , a ) || a != 1"	455:5:11041:11081	1314675	0	True				
ANR	1314798	OrExpression	"! child -> EvaluateAttrInt ( ""A"" , a ) || a != 1"		1314675	0		||			
ANR	1314799	UnaryOperationExpression	"! child -> EvaluateAttrInt ( ""A"" , a )"		1314675	0					
ANR	1314800	UnaryOperator	!		1314675	0					
ANR	1314801	CallExpression	"child -> EvaluateAttrInt ( ""A"" , a )"		1314675	1					
ANR	1314802	Callee	child -> EvaluateAttrInt		1314675	0					
ANR	1314803	PtrMemberAccess	child -> EvaluateAttrInt		1314675	0					
ANR	1314804	Identifier	child		1314675	0					
ANR	1314805	Identifier	EvaluateAttrInt		1314675	1					
ANR	1314806	ArgumentList	"""A"""		1314675	1					
ANR	1314807	Argument	"""A"""		1314675	0					
ANR	1314808	PrimaryExpression	"""A"""		1314675	0					
ANR	1314809	Argument	a		1314675	1					
ANR	1314810	Identifier	a		1314675	0					
ANR	1314811	EqualityExpression	a != 1		1314675	1		!=			
ANR	1314812	Identifier	a		1314675	0					
ANR	1314813	PrimaryExpression	1		1314675	1					
ANR	1314814	CompoundStatement		29:48:701:701	1314675	1					
ANR	1314815	ExpressionStatement	"cout << ""  Couldn't retrieve A from chained parent.\\n"""	456:2:11088:11142	1314675	0	True				
ANR	1314816	ShiftExpression	"cout << ""  Couldn't retrieve A from chained parent.\\n"""		1314675	0		<<			
ANR	1314817	Identifier	cout		1314675	0					
ANR	1314818	PrimaryExpression	"""  Couldn't retrieve A from chained parent.\\n"""		1314675	1					
ANR	1314819	ElseStatement	else		1314675	0					
ANR	1314820	CompoundStatement		31:8:769:769	1314675	0					
ANR	1314821	ExpressionStatement	"cout << ""  Can look up A from chained parent.\\n"""	458:2:11156:11204	1314675	0	True				
ANR	1314822	ShiftExpression	"cout << ""  Can look up A from chained parent.\\n"""		1314675	0		<<			
ANR	1314823	Identifier	cout		1314675	0					
ANR	1314824	PrimaryExpression	"""  Can look up A from chained parent.\\n"""		1314675	1					
ANR	1314825	IdentifierDeclStatement	string b ;	463:1:11305:11313	1314675	11	True				
ANR	1314826	IdentifierDecl	b		1314675	0					
ANR	1314827	IdentifierDeclType	string		1314675	0					
ANR	1314828	Identifier	b		1314675	1					
ANR	1314829	IfStatement	"if ( ! child -> EvaluateAttrString ( ""B"" , b ) || b != ""bonnet"" )"		1314675	12					
ANR	1314830	Condition	"! child -> EvaluateAttrString ( ""B"" , b ) || b != ""bonnet"""	464:5:11320:11370	1314675	0	True				
ANR	1314831	OrExpression	"! child -> EvaluateAttrString ( ""B"" , b ) || b != ""bonnet"""		1314675	0		||			
ANR	1314832	UnaryOperationExpression	"! child -> EvaluateAttrString ( ""B"" , b )"		1314675	0					
ANR	1314833	UnaryOperator	!		1314675	0					
ANR	1314834	CallExpression	"child -> EvaluateAttrString ( ""B"" , b )"		1314675	1					
ANR	1314835	Callee	child -> EvaluateAttrString		1314675	0					
ANR	1314836	PtrMemberAccess	child -> EvaluateAttrString		1314675	0					
ANR	1314837	Identifier	child		1314675	0					
ANR	1314838	Identifier	EvaluateAttrString		1314675	1					
ANR	1314839	ArgumentList	"""B"""		1314675	1					
ANR	1314840	Argument	"""B"""		1314675	0					
ANR	1314841	PrimaryExpression	"""B"""		1314675	0					
ANR	1314842	Argument	b		1314675	1					
ANR	1314843	Identifier	b		1314675	0					
ANR	1314844	EqualityExpression	"b != ""bonnet"""		1314675	1		!=			
ANR	1314845	Identifier	b		1314675	0					
ANR	1314846	PrimaryExpression	"""bonnet"""		1314675	1					
ANR	1314847	CompoundStatement		38:58:990:990	1314675	1					
ANR	1314848	ExpressionStatement	"cout << ""  Failed to look up B from chained child.\\n"""	465:2:11377:11430	1314675	0	True				
ANR	1314849	ShiftExpression	"cout << ""  Failed to look up B from chained child.\\n"""		1314675	0		<<			
ANR	1314850	Identifier	cout		1314675	0					
ANR	1314851	PrimaryExpression	"""  Failed to look up B from chained child.\\n"""		1314675	1					
ANR	1314852	ElseStatement	else		1314675	0					
ANR	1314853	CompoundStatement		40:8:1057:1057	1314675	0					
ANR	1314854	ExpressionStatement	"cout << ""  Can look up B from child.\\n"""	467:2:11444:11483	1314675	0	True				
ANR	1314855	ShiftExpression	"cout << ""  Can look up B from child.\\n"""		1314675	0		<<			
ANR	1314856	Identifier	cout		1314675	0					
ANR	1314857	PrimaryExpression	"""  Can look up B from child.\\n"""		1314675	1					
ANR	1314858	IdentifierDeclStatement	Value lookup_value ;	472:1:11570:11588	1314675	13	True				
ANR	1314859	IdentifierDecl	lookup_value		1314675	0					
ANR	1314860	IdentifierDeclType	Value		1314675	0					
ANR	1314861	Identifier	lookup_value		1314675	1					
ANR	1314862	IdentifierDeclStatement	string bb ;	473:1:11591:11600	1314675	14	True				
ANR	1314863	IdentifierDecl	bb		1314675	0					
ANR	1314864	IdentifierDeclType	string		1314675	0					
ANR	1314865	Identifier	bb		1314675	1					
ANR	1314866	ExpressionStatement	"child -> Delete ( ""BB"" )"	474:1:11603:11622	1314675	15	True				
ANR	1314867	CallExpression	"child -> Delete ( ""BB"" )"		1314675	0					
ANR	1314868	Callee	child -> Delete		1314675	0					
ANR	1314869	PtrMemberAccess	child -> Delete		1314675	0					
ANR	1314870	Identifier	child		1314675	0					
ANR	1314871	Identifier	Delete		1314675	1					
ANR	1314872	ArgumentList	"""BB"""		1314675	1					
ANR	1314873	Argument	"""BB"""		1314675	0					
ANR	1314874	PrimaryExpression	"""BB"""		1314675	0					
ANR	1314875	IfStatement	"if ( child -> EvaluateAttrString ( ""BB"" , bb ) )"		1314675	16					
ANR	1314876	Condition	"child -> EvaluateAttrString ( ""BB"" , bb )"	475:5:11629:11663	1314675	0	True				
ANR	1314877	CallExpression	"child -> EvaluateAttrString ( ""BB"" , bb )"		1314675	0					
ANR	1314878	Callee	child -> EvaluateAttrString		1314675	0					
ANR	1314879	PtrMemberAccess	child -> EvaluateAttrString		1314675	0					
ANR	1314880	Identifier	child		1314675	0					
ANR	1314881	Identifier	EvaluateAttrString		1314675	1					
ANR	1314882	ArgumentList	"""BB"""		1314675	1					
ANR	1314883	Argument	"""BB"""		1314675	0					
ANR	1314884	PrimaryExpression	"""BB"""		1314675	0					
ANR	1314885	Argument	bb		1314675	1					
ANR	1314886	Identifier	bb		1314675	0					
ANR	1314887	CompoundStatement		49:42:1283:1283	1314675	1					
ANR	1314888	ExpressionStatement	"cout << ""  Failed: BB still has string value?\\n"""	476:2:11670:11718	1314675	0	True				
ANR	1314889	ShiftExpression	"cout << ""  Failed: BB still has string value?\\n"""		1314675	0		<<			
ANR	1314890	Identifier	cout		1314675	0					
ANR	1314891	PrimaryExpression	"""  Failed: BB still has string value?\\n"""		1314675	1					
ANR	1314892	ElseStatement	else		1314675	0					
ANR	1314893	CompoundStatement		51:8:1345:1345	1314675	0					
ANR	1314894	ExpressionStatement	"cout << ""  BB is now undefined.\\n"""	478:2:11732:11766	1314675	0	True				
ANR	1314895	ShiftExpression	"cout << ""  BB is now undefined.\\n"""		1314675	0		<<			
ANR	1314896	Identifier	cout		1314675	0					
ANR	1314897	PrimaryExpression	"""  BB is now undefined.\\n"""		1314675	1					
ANR	1314898	ExpressionStatement	"child -> Delete ( ""B"" )"	483:1:11852:11870	1314675	17	True				
ANR	1314899	CallExpression	"child -> Delete ( ""B"" )"		1314675	0					
ANR	1314900	Callee	child -> Delete		1314675	0					
ANR	1314901	PtrMemberAccess	child -> Delete		1314675	0					
ANR	1314902	Identifier	child		1314675	0					
ANR	1314903	Identifier	Delete		1314675	1					
ANR	1314904	ArgumentList	"""B"""		1314675	1					
ANR	1314905	Argument	"""B"""		1314675	0					
ANR	1314906	PrimaryExpression	"""B"""		1314675	0					
ANR	1314907	IfStatement	"if ( child -> EvaluateAttrString ( ""B"" , b ) )"		1314675	18					
ANR	1314908	Condition	"child -> EvaluateAttrString ( ""B"" , b )"	484:5:11877:11909	1314675	0	True				
ANR	1314909	CallExpression	"child -> EvaluateAttrString ( ""B"" , b )"		1314675	0					
ANR	1314910	Callee	child -> EvaluateAttrString		1314675	0					
ANR	1314911	PtrMemberAccess	child -> EvaluateAttrString		1314675	0					
ANR	1314912	Identifier	child		1314675	0					
ANR	1314913	Identifier	EvaluateAttrString		1314675	1					
ANR	1314914	ArgumentList	"""B"""		1314675	1					
ANR	1314915	Argument	"""B"""		1314675	0					
ANR	1314916	PrimaryExpression	"""B"""		1314675	0					
ANR	1314917	Argument	b		1314675	1					
ANR	1314918	Identifier	b		1314675	0					
ANR	1314919	CompoundStatement		58:40:1529:1529	1314675	1					
ANR	1314920	ExpressionStatement	"cout << ""  Failed: B still has string value?\\n"""	485:2:11916:11963	1314675	0	True				
ANR	1314921	ShiftExpression	"cout << ""  Failed: B still has string value?\\n"""		1314675	0		<<			
ANR	1314922	Identifier	cout		1314675	0					
ANR	1314923	PrimaryExpression	"""  Failed: B still has string value?\\n"""		1314675	1					
ANR	1314924	ElseStatement	else		1314675	0					
ANR	1314925	CompoundStatement		60:8:1590:1590	1314675	0					
ANR	1314926	ExpressionStatement	"cout << ""  B is now undefined.\\n"""	487:2:11977:12010	1314675	0	True				
ANR	1314927	ShiftExpression	"cout << ""  B is now undefined.\\n"""		1314675	0		<<			
ANR	1314928	Identifier	cout		1314675	0					
ANR	1314929	PrimaryExpression	"""  B is now undefined.\\n"""		1314675	1					
ANR	1314930	ExpressionStatement	cout << * child << endl	489:1:12016:12038	1314675	19	True				
ANR	1314931	ShiftExpression	cout << * child << endl		1314675	0		<<			
ANR	1314932	Identifier	cout		1314675	0					
ANR	1314933	ShiftExpression	* child << endl		1314675	1		<<			
ANR	1314934	UnaryOperationExpression	* child		1314675	0					
ANR	1314935	UnaryOperator	*		1314675	0					
ANR	1314936	Identifier	child		1314675	1					
ANR	1314937	Identifier	endl		1314675	1					
ANR	1314938	ExpressionStatement	child -> Unchain ( )	491:1:12042:12058	1314675	20	True				
ANR	1314939	CallExpression	child -> Unchain ( )		1314675	0					
ANR	1314940	Callee	child -> Unchain		1314675	0					
ANR	1314941	PtrMemberAccess	child -> Unchain		1314675	0					
ANR	1314942	Identifier	child		1314675	0					
ANR	1314943	Identifier	Unchain		1314675	1					
ANR	1314944	ArgumentList			1314675	1					
ANR	1314945	ReturnStatement	return ;	493:1:12062:12068	1314675	21	True				
ANR	1314946	ReturnType	static void		1314675	1					
ANR	1314947	Identifier	test_chaining		1314675	2					
ANR	1314948	ParameterList			1314675	3					
ANR	1314949	CFGEntryNode	ENTRY		1314675		True				
ANR	1314950	CFGExitNode	EXIT		1314675		True				
ANR	1314951	Symbol	aa		1314675						
ANR	1314952	Symbol	bb		1314675						
ANR	1314953	Symbol	a		1314675						
ANR	1314954	Symbol	* child		1314675						
ANR	1314955	Symbol	b		1314675						
ANR	1314956	Symbol	NULL		1314675						
ANR	1314957	Symbol	child -> EvaluateAttrInt		1314675						
ANR	1314958	Symbol	chaining_root_text		1314675						
ANR	1314959	Symbol	chaining_child_text		1314675						
ANR	1314960	Symbol	parser . ParseClassAd		1314675						
ANR	1314961	Symbol	child -> EvaluateAttrString		1314675						
ANR	1314962	Symbol	parser		1314675						
ANR	1314963	Symbol	lookup_value		1314675						
ANR	1314964	Symbol	root		1314675						
ANR	1314965	Symbol	child		1314675						
ANR	1314966	Function	test_dirty	496:0:12073:13715							
ANR	1314967	FunctionDef	test_dirty ()		1314966	0					
ANR	1314968	CompoundStatement		497:0:12102:13715	1314966	0					
ANR	1314969	IdentifierDeclStatement	ClassAd * classad ;	498:1:12105:12128	1314966	0	True				
ANR	1314970	IdentifierDecl	* classad		1314966	0					
ANR	1314971	IdentifierDeclType	ClassAd *		1314966	0					
ANR	1314972	Identifier	classad		1314966	1					
ANR	1314973	IdentifierDeclStatement	ClassAdParser parser ;	499:1:12131:12152	1314966	1	True				
ANR	1314974	IdentifierDecl	parser		1314966	0					
ANR	1314975	IdentifierDeclType	ClassAdParser		1314966	0					
ANR	1314976	Identifier	parser		1314966	1					
ANR	1314977	ExpressionStatement	classad = parser . ParseClassAd ( dirty_classad_text )	501:1:12156:12205	1314966	2	True				
ANR	1314978	AssignmentExpression	classad = parser . ParseClassAd ( dirty_classad_text )		1314966	0		=			
ANR	1314979	Identifier	classad		1314966	0					
ANR	1314980	CallExpression	parser . ParseClassAd ( dirty_classad_text )		1314966	1					
ANR	1314981	Callee	parser . ParseClassAd		1314966	0					
ANR	1314982	MemberAccess	parser . ParseClassAd		1314966	0					
ANR	1314983	Identifier	parser		1314966	0					
ANR	1314984	Identifier	ParseClassAd		1314966	1					
ANR	1314985	ArgumentList	dirty_classad_text		1314966	1					
ANR	1314986	Argument	dirty_classad_text		1314966	0					
ANR	1314987	Identifier	dirty_classad_text		1314966	0					
ANR	1314988	ExpressionStatement	"cout << ""Testing dirty attributes...\\n"""	503:1:12209:12248	1314966	3	True				
ANR	1314989	ShiftExpression	"cout << ""Testing dirty attributes...\\n"""		1314966	0		<<			
ANR	1314990	Identifier	cout		1314966	0					
ANR	1314991	PrimaryExpression	"""Testing dirty attributes...\\n"""		1314966	1					
ANR	1314992	IfStatement	"if ( classad -> IsAttributeDirty ( ""A"" ) )"		1314966	4					
ANR	1314993	Condition	"classad -> IsAttributeDirty ( ""A"" )"	505:5:12256:12285	1314966	0	True				
ANR	1314994	CallExpression	"classad -> IsAttributeDirty ( ""A"" )"		1314966	0					
ANR	1314995	Callee	classad -> IsAttributeDirty		1314966	0					
ANR	1314996	PtrMemberAccess	classad -> IsAttributeDirty		1314966	0					
ANR	1314997	Identifier	classad		1314966	0					
ANR	1314998	Identifier	IsAttributeDirty		1314966	1					
ANR	1314999	ArgumentList	"""A"""		1314966	1					
ANR	1315000	Argument	"""A"""		1314966	0					
ANR	1315001	PrimaryExpression	"""A"""		1314966	0					
ANR	1315002	CompoundStatement		9:37:185:185	1314966	1					
ANR	1315003	ExpressionStatement	"cout << ""  Failed: A is dirty just after construction.\\n"""	506:2:12292:12349	1314966	0	True				
ANR	1315004	ShiftExpression	"cout << ""  Failed: A is dirty just after construction.\\n"""		1314966	0		<<			
ANR	1315005	Identifier	cout		1314966	0					
ANR	1315006	PrimaryExpression	"""  Failed: A is dirty just after construction.\\n"""		1314966	1					
ANR	1315007	ElseStatement	else		1314966	0					
ANR	1315008	CompoundStatement		11:8:256:256	1314966	0					
ANR	1315009	ExpressionStatement	"cout << ""  OK: A is clean.\\n"""	508:2:12363:12392	1314966	0	True				
ANR	1315010	ShiftExpression	"cout << ""  OK: A is clean.\\n"""		1314966	0		<<			
ANR	1315011	Identifier	cout		1314966	0					
ANR	1315012	PrimaryExpression	"""  OK: A is clean.\\n"""		1314966	1					
ANR	1315013	ExpressionStatement	"classad -> InsertAttr ( ""B"" , true )"	511:1:12399:12429	1314966	5	True				
ANR	1315014	CallExpression	"classad -> InsertAttr ( ""B"" , true )"		1314966	0					
ANR	1315015	Callee	classad -> InsertAttr		1314966	0					
ANR	1315016	PtrMemberAccess	classad -> InsertAttr		1314966	0					
ANR	1315017	Identifier	classad		1314966	0					
ANR	1315018	Identifier	InsertAttr		1314966	1					
ANR	1315019	ArgumentList	"""B"""		1314966	1					
ANR	1315020	Argument	"""B"""		1314966	0					
ANR	1315021	PrimaryExpression	"""B"""		1314966	0					
ANR	1315022	Argument	true		1314966	1					
ANR	1315023	Identifier	true		1314966	0					
ANR	1315024	IfStatement	"if ( classad -> IsAttributeDirty ( ""A"" ) )"		1314966	6					
ANR	1315025	Condition	"classad -> IsAttributeDirty ( ""A"" )"	512:5:12436:12465	1314966	0	True				
ANR	1315026	CallExpression	"classad -> IsAttributeDirty ( ""A"" )"		1314966	0					
ANR	1315027	Callee	classad -> IsAttributeDirty		1314966	0					
ANR	1315028	PtrMemberAccess	classad -> IsAttributeDirty		1314966	0					
ANR	1315029	Identifier	classad		1314966	0					
ANR	1315030	Identifier	IsAttributeDirty		1314966	1					
ANR	1315031	ArgumentList	"""A"""		1314966	1					
ANR	1315032	Argument	"""A"""		1314966	0					
ANR	1315033	PrimaryExpression	"""A"""		1314966	0					
ANR	1315034	CompoundStatement		16:37:365:365	1314966	1					
ANR	1315035	ExpressionStatement	"cout << ""  Failed: A is dirty after inserting B.\\n"""	513:2:12472:12523	1314966	0	True				
ANR	1315036	ShiftExpression	"cout << ""  Failed: A is dirty after inserting B.\\n"""		1314966	0		<<			
ANR	1315037	Identifier	cout		1314966	0					
ANR	1315038	PrimaryExpression	"""  Failed: A is dirty after inserting B.\\n"""		1314966	1					
ANR	1315039	ElseStatement	else		1314966	0					
ANR	1315040	CompoundStatement		18:8:430:430	1314966	0					
ANR	1315041	ExpressionStatement	"cout << ""  OK: A is still clean.\\n"""	515:2:12537:12572	1314966	0	True				
ANR	1315042	ShiftExpression	"cout << ""  OK: A is still clean.\\n"""		1314966	0		<<			
ANR	1315043	Identifier	cout		1314966	0					
ANR	1315044	PrimaryExpression	"""  OK: A is still clean.\\n"""		1314966	1					
ANR	1315045	IfStatement	"if ( ! classad -> IsAttributeDirty ( ""B"" ) )"		1314966	7					
ANR	1315046	Condition	"! classad -> IsAttributeDirty ( ""B"" )"	518:5:12584:12614	1314966	0	True				
ANR	1315047	UnaryOperationExpression	"! classad -> IsAttributeDirty ( ""B"" )"		1314966	0					
ANR	1315048	UnaryOperator	!		1314966	0					
ANR	1315049	CallExpression	"classad -> IsAttributeDirty ( ""B"" )"		1314966	1					
ANR	1315050	Callee	classad -> IsAttributeDirty		1314966	0					
ANR	1315051	PtrMemberAccess	classad -> IsAttributeDirty		1314966	0					
ANR	1315052	Identifier	classad		1314966	0					
ANR	1315053	Identifier	IsAttributeDirty		1314966	1					
ANR	1315054	ArgumentList	"""B"""		1314966	1					
ANR	1315055	Argument	"""B"""		1314966	0					
ANR	1315056	PrimaryExpression	"""B"""		1314966	0					
ANR	1315057	CompoundStatement		22:38:514:514	1314966	1					
ANR	1315058	ExpressionStatement	"cout << ""  Failed: B is not dirty.\\n"""	519:2:12621:12658	1314966	0	True				
ANR	1315059	ShiftExpression	"cout << ""  Failed: B is not dirty.\\n"""		1314966	0		<<			
ANR	1315060	Identifier	cout		1314966	0					
ANR	1315061	PrimaryExpression	"""  Failed: B is not dirty.\\n"""		1314966	1					
ANR	1315062	ElseStatement	else		1314966	0					
ANR	1315063	CompoundStatement		24:8:565:565	1314966	0					
ANR	1315064	ExpressionStatement	"cout << ""  OK: B is dirty.\\n"""	521:2:12672:12701	1314966	0	True				
ANR	1315065	ShiftExpression	"cout << ""  OK: B is dirty.\\n"""		1314966	0		<<			
ANR	1315066	Identifier	cout		1314966	0					
ANR	1315067	PrimaryExpression	"""  OK: B is dirty.\\n"""		1314966	1					
ANR	1315068	IdentifierDeclStatement	ClassAd :: dirtyIterator it = classad -> dirtyBegin ( ) ;	524:1:12708:12758	1314966	8	True				
ANR	1315069	IdentifierDecl	it = classad -> dirtyBegin ( )		1314966	0					
ANR	1315070	IdentifierDeclType	ClassAd :: dirtyIterator		1314966	0					
ANR	1315071	Identifier	it		1314966	1					
ANR	1315072	AssignmentExpression	it = classad -> dirtyBegin ( )		1314966	2		=			
ANR	1315073	Identifier	it		1314966	0					
ANR	1315074	CallExpression	classad -> dirtyBegin ( )		1314966	1					
ANR	1315075	Callee	classad -> dirtyBegin		1314966	0					
ANR	1315076	PtrMemberAccess	classad -> dirtyBegin		1314966	0					
ANR	1315077	Identifier	classad		1314966	0					
ANR	1315078	Identifier	dirtyBegin		1314966	1					
ANR	1315079	ArgumentList			1314966	1					
ANR	1315080	IfStatement	if ( it == classad -> dirtyEnd ( ) )		1314966	9					
ANR	1315081	Condition	it == classad -> dirtyEnd ( )	526:5:12767:12791	1314966	0	True				
ANR	1315082	EqualityExpression	it == classad -> dirtyEnd ( )		1314966	0		==			
ANR	1315083	Identifier	it		1314966	0					
ANR	1315084	CallExpression	classad -> dirtyEnd ( )		1314966	1					
ANR	1315085	Callee	classad -> dirtyEnd		1314966	0					
ANR	1315086	PtrMemberAccess	classad -> dirtyEnd		1314966	0					
ANR	1315087	Identifier	classad		1314966	0					
ANR	1315088	Identifier	dirtyEnd		1314966	1					
ANR	1315089	ArgumentList			1314966	1					
ANR	1315090	CompoundStatement		30:32:691:691	1314966	1					
ANR	1315091	ExpressionStatement	"cout << ""  Failed: Dirty iterator gives us nothing.\\n"""	527:2:12798:12852	1314966	0	True				
ANR	1315092	ShiftExpression	"cout << ""  Failed: Dirty iterator gives us nothing.\\n"""		1314966	0		<<			
ANR	1315093	Identifier	cout		1314966	0					
ANR	1315094	PrimaryExpression	"""  Failed: Dirty iterator gives us nothing.\\n"""		1314966	1					
ANR	1315095	ElseStatement	else		1314966	0					
ANR	1315096	CompoundStatement		32:8:759:759	1314966	0					
ANR	1315097	IfStatement	"if ( ( * it ) != ""B"" )"		1314966	0					
ANR	1315098	Condition	"( * it ) != ""B"""	529:6:12870:12881	1314966	0	True				
ANR	1315099	EqualityExpression	"( * it ) != ""B"""		1314966	0		!=			
ANR	1315100	UnaryOperationExpression	* it		1314966	0					
ANR	1315101	UnaryOperator	*		1314966	0					
ANR	1315102	Identifier	it		1314966	1					
ANR	1315103	PrimaryExpression	"""B"""		1314966	1					
ANR	1315104	CompoundStatement		33:20:781:781	1314966	1					
ANR	1315105	ExpressionStatement	"cout << ""  Failed: Dirty iterator is not pointing at B.\\n"""	530:3:12889:12947	1314966	0	True				
ANR	1315106	ShiftExpression	"cout << ""  Failed: Dirty iterator is not pointing at B.\\n"""		1314966	0		<<			
ANR	1315107	Identifier	cout		1314966	0					
ANR	1315108	PrimaryExpression	"""  Failed: Dirty iterator is not pointing at B.\\n"""		1314966	1					
ANR	1315109	ElseStatement	else		1314966	0					
ANR	1315110	CompoundStatement		35:9:855:855	1314966	0					
ANR	1315111	ExpressionStatement	"cout << ""  OK: Dirty iterator starts out okay.\\n"""	532:3:12963:13012	1314966	0	True				
ANR	1315112	ShiftExpression	"cout << ""  OK: Dirty iterator starts out okay.\\n"""		1314966	0		<<			
ANR	1315113	Identifier	cout		1314966	0					
ANR	1315114	PrimaryExpression	"""  OK: Dirty iterator starts out okay.\\n"""		1314966	1					
ANR	1315115	ExpressionStatement	it ++	534:3:13018:13022	1314966	1	True				
ANR	1315116	PostIncDecOperationExpression	it ++		1314966	0					
ANR	1315117	Identifier	it		1314966	0					
ANR	1315118	IncDec	++		1314966	1					
ANR	1315119	IfStatement	if ( it != classad -> dirtyEnd ( ) )		1314966	2					
ANR	1315120	Condition	it != classad -> dirtyEnd ( )	535:7:13031:13055	1314966	0	True				
ANR	1315121	EqualityExpression	it != classad -> dirtyEnd ( )		1314966	0		!=			
ANR	1315122	Identifier	it		1314966	0					
ANR	1315123	CallExpression	classad -> dirtyEnd ( )		1314966	1					
ANR	1315124	Callee	classad -> dirtyEnd		1314966	0					
ANR	1315125	PtrMemberAccess	classad -> dirtyEnd		1314966	0					
ANR	1315126	Identifier	classad		1314966	0					
ANR	1315127	Identifier	dirtyEnd		1314966	1					
ANR	1315128	ArgumentList			1314966	1					
ANR	1315129	CompoundStatement		39:34:955:955	1314966	1					
ANR	1315130	ExpressionStatement	"cout << ""  Failed: Dirty iterator it not at end.\\n"""	536:4:13064:13115	1314966	0	True				
ANR	1315131	ShiftExpression	"cout << ""  Failed: Dirty iterator it not at end.\\n"""		1314966	0		<<			
ANR	1315132	Identifier	cout		1314966	0					
ANR	1315133	PrimaryExpression	"""  Failed: Dirty iterator it not at end.\\n"""		1314966	1					
ANR	1315134	ElseStatement	else		1314966	0					
ANR	1315135	CompoundStatement		41:10:1024:1024	1314966	0					
ANR	1315136	ExpressionStatement	"cout << ""  OK: Dirty iterator ends okay.\\n"""	538:4:13133:13176	1314966	0	True				
ANR	1315137	ShiftExpression	"cout << ""  OK: Dirty iterator ends okay.\\n"""		1314966	0		<<			
ANR	1315138	Identifier	cout		1314966	0					
ANR	1315139	PrimaryExpression	"""  OK: Dirty iterator ends okay.\\n"""		1314966	1					
ANR	1315140	ExpressionStatement	classad -> ClearAllDirtyFlags ( )	543:1:13192:13221	1314966	10	True				
ANR	1315141	CallExpression	classad -> ClearAllDirtyFlags ( )		1314966	0					
ANR	1315142	Callee	classad -> ClearAllDirtyFlags		1314966	0					
ANR	1315143	PtrMemberAccess	classad -> ClearAllDirtyFlags		1314966	0					
ANR	1315144	Identifier	classad		1314966	0					
ANR	1315145	Identifier	ClearAllDirtyFlags		1314966	1					
ANR	1315146	ArgumentList			1314966	1					
ANR	1315147	IfStatement	"if ( classad -> IsAttributeDirty ( ""B"" ) )"		1314966	11					
ANR	1315148	Condition	"classad -> IsAttributeDirty ( ""B"" )"	544:5:13228:13257	1314966	0	True				
ANR	1315149	CallExpression	"classad -> IsAttributeDirty ( ""B"" )"		1314966	0					
ANR	1315150	Callee	classad -> IsAttributeDirty		1314966	0					
ANR	1315151	PtrMemberAccess	classad -> IsAttributeDirty		1314966	0					
ANR	1315152	Identifier	classad		1314966	0					
ANR	1315153	Identifier	IsAttributeDirty		1314966	1					
ANR	1315154	ArgumentList	"""B"""		1314966	1					
ANR	1315155	Argument	"""B"""		1314966	0					
ANR	1315156	PrimaryExpression	"""B"""		1314966	0					
ANR	1315157	CompoundStatement		48:37:1157:1157	1314966	1					
ANR	1315158	ExpressionStatement	"cout << ""  Failed: B is dirty after clearing flags.\\n"""	545:2:13264:13318	1314966	0	True				
ANR	1315159	ShiftExpression	"cout << ""  Failed: B is dirty after clearing flags.\\n"""		1314966	0		<<			
ANR	1315160	Identifier	cout		1314966	0					
ANR	1315161	PrimaryExpression	"""  Failed: B is dirty after clearing flags.\\n"""		1314966	1					
ANR	1315162	ElseStatement	else		1314966	0					
ANR	1315163	CompoundStatement		50:8:1225:1225	1314966	0					
ANR	1315164	ExpressionStatement	"cout << ""  OK: B is clean.\\n"""	547:2:13332:13361	1314966	0	True				
ANR	1315165	ShiftExpression	"cout << ""  OK: B is clean.\\n"""		1314966	0		<<			
ANR	1315166	Identifier	cout		1314966	0					
ANR	1315167	PrimaryExpression	"""  OK: B is clean.\\n"""		1314966	1					
ANR	1315168	ExpressionStatement	"classad -> MarkAttributeDirty ( ""A"" )"	550:1:13368:13400	1314966	12	True				
ANR	1315169	CallExpression	"classad -> MarkAttributeDirty ( ""A"" )"		1314966	0					
ANR	1315170	Callee	classad -> MarkAttributeDirty		1314966	0					
ANR	1315171	PtrMemberAccess	classad -> MarkAttributeDirty		1314966	0					
ANR	1315172	Identifier	classad		1314966	0					
ANR	1315173	Identifier	MarkAttributeDirty		1314966	1					
ANR	1315174	ArgumentList	"""A"""		1314966	1					
ANR	1315175	Argument	"""A"""		1314966	0					
ANR	1315176	PrimaryExpression	"""A"""		1314966	0					
ANR	1315177	IfStatement	"if ( ! classad -> IsAttributeDirty ( ""A"" ) )"		1314966	13					
ANR	1315178	Condition	"! classad -> IsAttributeDirty ( ""A"" )"	551:5:13407:13437	1314966	0	True				
ANR	1315179	UnaryOperationExpression	"! classad -> IsAttributeDirty ( ""A"" )"		1314966	0					
ANR	1315180	UnaryOperator	!		1314966	0					
ANR	1315181	CallExpression	"classad -> IsAttributeDirty ( ""A"" )"		1314966	1					
ANR	1315182	Callee	classad -> IsAttributeDirty		1314966	0					
ANR	1315183	PtrMemberAccess	classad -> IsAttributeDirty		1314966	0					
ANR	1315184	Identifier	classad		1314966	0					
ANR	1315185	Identifier	IsAttributeDirty		1314966	1					
ANR	1315186	ArgumentList	"""A"""		1314966	1					
ANR	1315187	Argument	"""A"""		1314966	0					
ANR	1315188	PrimaryExpression	"""A"""		1314966	0					
ANR	1315189	CompoundStatement		55:38:1337:1337	1314966	1					
ANR	1315190	ExpressionStatement	"cout << ""  Failed: A is not dirty.\\n"""	552:2:13444:13481	1314966	0	True				
ANR	1315191	ShiftExpression	"cout << ""  Failed: A is not dirty.\\n"""		1314966	0		<<			
ANR	1315192	Identifier	cout		1314966	0					
ANR	1315193	PrimaryExpression	"""  Failed: A is not dirty.\\n"""		1314966	1					
ANR	1315194	ElseStatement	else		1314966	0					
ANR	1315195	CompoundStatement		57:8:1388:1388	1314966	0					
ANR	1315196	ExpressionStatement	"cout << ""  OK: A is dirty.\\n"""	554:2:13495:13524	1314966	0	True				
ANR	1315197	ShiftExpression	"cout << ""  OK: A is dirty.\\n"""		1314966	0		<<			
ANR	1315198	Identifier	cout		1314966	0					
ANR	1315199	PrimaryExpression	"""  OK: A is dirty.\\n"""		1314966	1					
ANR	1315200	ExpressionStatement	"classad -> MarkAttributeClean ( ""A"" )"	557:1:13531:13563	1314966	14	True				
ANR	1315201	CallExpression	"classad -> MarkAttributeClean ( ""A"" )"		1314966	0					
ANR	1315202	Callee	classad -> MarkAttributeClean		1314966	0					
ANR	1315203	PtrMemberAccess	classad -> MarkAttributeClean		1314966	0					
ANR	1315204	Identifier	classad		1314966	0					
ANR	1315205	Identifier	MarkAttributeClean		1314966	1					
ANR	1315206	ArgumentList	"""A"""		1314966	1					
ANR	1315207	Argument	"""A"""		1314966	0					
ANR	1315208	PrimaryExpression	"""A"""		1314966	0					
ANR	1315209	IfStatement	"if ( classad -> IsAttributeDirty ( ""A"" ) )"		1314966	15					
ANR	1315210	Condition	"classad -> IsAttributeDirty ( ""A"" )"	558:5:13570:13599	1314966	0	True				
ANR	1315211	CallExpression	"classad -> IsAttributeDirty ( ""A"" )"		1314966	0					
ANR	1315212	Callee	classad -> IsAttributeDirty		1314966	0					
ANR	1315213	PtrMemberAccess	classad -> IsAttributeDirty		1314966	0					
ANR	1315214	Identifier	classad		1314966	0					
ANR	1315215	Identifier	IsAttributeDirty		1314966	1					
ANR	1315216	ArgumentList	"""A"""		1314966	1					
ANR	1315217	Argument	"""A"""		1314966	0					
ANR	1315218	PrimaryExpression	"""A"""		1314966	0					
ANR	1315219	CompoundStatement		62:37:1499:1499	1314966	1					
ANR	1315220	ExpressionStatement	"cout << ""  Failed: A is dirty after cleaning it.\\n"""	559:2:13606:13657	1314966	0	True				
ANR	1315221	ShiftExpression	"cout << ""  Failed: A is dirty after cleaning it.\\n"""		1314966	0		<<			
ANR	1315222	Identifier	cout		1314966	0					
ANR	1315223	PrimaryExpression	"""  Failed: A is dirty after cleaning it.\\n"""		1314966	1					
ANR	1315224	ElseStatement	else		1314966	0					
ANR	1315225	CompoundStatement		64:8:1564:1564	1314966	0					
ANR	1315226	ExpressionStatement	"cout << ""  OK: A is clean.\\n"""	561:2:13671:13700	1314966	0	True				
ANR	1315227	ShiftExpression	"cout << ""  OK: A is clean.\\n"""		1314966	0		<<			
ANR	1315228	Identifier	cout		1314966	0					
ANR	1315229	PrimaryExpression	"""  OK: A is clean.\\n"""		1314966	1					
ANR	1315230	ReturnStatement	return ;	564:1:13707:13713	1314966	16	True				
ANR	1315231	ReturnType	static void		1314966	1					
ANR	1315232	Identifier	test_dirty		1314966	2					
ANR	1315233	ParameterList			1314966	3					
ANR	1315234	CFGEntryNode	ENTRY		1314966		True				
ANR	1315235	CFGExitNode	EXIT		1314966		True				
ANR	1315236	Symbol	classad -> dirtyEnd		1314966						
ANR	1315237	Symbol	* it		1314966						
ANR	1315238	Symbol	classad -> dirtyBegin		1314966						
ANR	1315239	Symbol	parser		1314966						
ANR	1315240	Symbol	* classad		1314966						
ANR	1315241	Symbol	dirty_classad_text		1314966						
ANR	1315242	Symbol	true		1314966						
ANR	1315243	Symbol	classad		1314966						
ANR	1315244	Symbol	classad -> IsAttributeDirty		1314966						
ANR	1315245	Symbol	it		1314966						
ANR	1315246	Symbol	parser . ParseClassAd		1314966						
ANR	1315247	Function	test_user_functions	567:0:13718:16274							
ANR	1315248	FunctionDef	test_user_functions ()		1315247	0					
ANR	1315249	CompoundStatement		568:0:13756:16274	1315247	0					
ANR	1315250	IdentifierDeclStatement	"string name = ""triple"" ;"	569:1:13759:13781	1315247	0	True				
ANR	1315251	IdentifierDecl	"name = ""triple"""		1315247	0					
ANR	1315252	IdentifierDeclType	string		1315247	0					
ANR	1315253	Identifier	name		1315247	1					
ANR	1315254	AssignmentExpression	"name = ""triple"""		1315247	2		=			
ANR	1315255	Identifier	name		1315247	0					
ANR	1315256	PrimaryExpression	"""triple"""		1315247	1					
ANR	1315257	Statement	string	570:1:13784:13789	1315247	1	True				
ANR	1315258	Statement	classad_text	570:8:13791:13802	1315247	2	True				
ANR	1315259	Statement	=	570:21:13804:13804	1315247	3	True				
ANR	1315260	Statement	"""[ Test1 = 3 + triple(9); Test2 = 3 + double(9); """	570:23:13806:13855	1315247	4	True				
ANR	1315261	ExpressionStatement	"""Test3 = todays_date(); ]"""	571:20:13877:13903	1315247	5	True				
ANR	1315262	PrimaryExpression	"""Test3 = todays_date(); ]"""		1315247	0					
ANR	1315263	IdentifierDeclStatement	ClassAd * classad ;	572:1:13906:13929	1315247	6	True				
ANR	1315264	IdentifierDecl	* classad		1315247	0					
ANR	1315265	IdentifierDeclType	ClassAd *		1315247	0					
ANR	1315266	Identifier	classad		1315247	1					
ANR	1315267	IdentifierDeclStatement	ClassAdParser parser ;	573:1:13932:13953	1315247	7	True				
ANR	1315268	IdentifierDecl	parser		1315247	0					
ANR	1315269	IdentifierDeclType	ClassAdParser		1315247	0					
ANR	1315270	Identifier	parser		1315247	1					
ANR	1315271	ExpressionStatement	"cout << ""Testing user functions...\\n"""	575:1:13957:13994	1315247	8	True				
ANR	1315272	ShiftExpression	"cout << ""Testing user functions...\\n"""		1315247	0		<<			
ANR	1315273	Identifier	cout		1315247	0					
ANR	1315274	PrimaryExpression	"""Testing user functions...\\n"""		1315247	1					
ANR	1315275	ExpressionStatement	"FunctionCall :: RegisterFunction ( name , triple )"	577:1:13998:14042	1315247	9	True				
ANR	1315276	CallExpression	"FunctionCall :: RegisterFunction ( name , triple )"		1315247	0					
ANR	1315277	Callee	FunctionCall :: RegisterFunction		1315247	0					
ANR	1315278	Identifier	FunctionCall :: RegisterFunction		1315247	0					
ANR	1315279	ArgumentList	name		1315247	1					
ANR	1315280	Argument	name		1315247	0					
ANR	1315281	Identifier	name		1315247	0					
ANR	1315282	Argument	triple		1315247	1					
ANR	1315283	Identifier	triple		1315247	0					
ANR	1315284	IdentifierDeclStatement	bool opened_library ;	580:1:14105:14124	1315247	10	True				
ANR	1315285	IdentifierDecl	opened_library		1315247	0					
ANR	1315286	IdentifierDeclType	bool		1315247	0					
ANR	1315287	Identifier	opened_library		1315247	1					
ANR	1315288	IdentifierDeclStatement	char path [ 10240 ] ;	581:1:14127:14143	1315247	11	True				
ANR	1315289	IdentifierDecl	path [ 10240 ]		1315247	0					
ANR	1315290	IdentifierDeclType	char [ 10240 ]		1315247	0					
ANR	1315291	Identifier	path		1315247	1					
ANR	1315292	PrimaryExpression	10240		1315247	2					
ANR	1315293	IdentifierDeclStatement	string libname ;	582:1:14146:14160	1315247	12	True				
ANR	1315294	IdentifierDecl	libname		1315247	0					
ANR	1315295	IdentifierDeclType	string		1315247	0					
ANR	1315296	Identifier	libname		1315247	1					
ANR	1315297	ExpressionStatement	path [ 0 ] = 0	583:1:14163:14174	1315247	13	True				
ANR	1315298	AssignmentExpression	path [ 0 ] = 0		1315247	0		=			
ANR	1315299	ArrayIndexing	path [ 0 ]		1315247	0					
ANR	1315300	Identifier	path		1315247	0					
ANR	1315301	PrimaryExpression	0		1315247	1					
ANR	1315302	PrimaryExpression	0		1315247	1					
ANR	1315303	ExpressionStatement	"getcwd ( path , 10239 )"	584:1:14177:14196	1315247	14	True				
ANR	1315304	CallExpression	"getcwd ( path , 10239 )"		1315247	0					
ANR	1315305	Callee	getcwd		1315247	0					
ANR	1315306	Identifier	getcwd		1315247	0					
ANR	1315307	ArgumentList	path		1315247	1					
ANR	1315308	Argument	path		1315247	0					
ANR	1315309	Identifier	path		1315247	0					
ANR	1315310	Argument	10239		1315247	1					
ANR	1315311	PrimaryExpression	10239		1315247	0					
ANR	1315312	ExpressionStatement	libname = path	585:1:14199:14213	1315247	15	True				
ANR	1315313	AssignmentExpression	libname = path		1315247	0		=			
ANR	1315314	Identifier	libname		1315247	0					
ANR	1315315	Identifier	path		1315247	1					
ANR	1315316	ExpressionStatement	"libname += ""/"""	586:1:14216:14230	1315247	16	True				
ANR	1315317	AssignmentExpression	"libname += ""/"""		1315247	0		+=			
ANR	1315318	Identifier	libname		1315247	0					
ANR	1315319	PrimaryExpression	"""/"""		1315247	1					
ANR	1315320	ExpressionStatement	libname += TEST_LIBNAME	587:1:14233:14256	1315247	17	True				
ANR	1315321	AssignmentExpression	libname += TEST_LIBNAME		1315247	0		+=			
ANR	1315322	Identifier	libname		1315247	0					
ANR	1315323	Identifier	TEST_LIBNAME		1315247	1					
ANR	1315324	ExpressionStatement	opened_library = FunctionCall :: RegisterSharedLibraryFunctions ( libname . c_str ( ) )	588:1:14288:14366	1315247	18	True				
ANR	1315325	AssignmentExpression	opened_library = FunctionCall :: RegisterSharedLibraryFunctions ( libname . c_str ( ) )		1315247	0		=			
ANR	1315326	Identifier	opened_library		1315247	0					
ANR	1315327	CallExpression	FunctionCall :: RegisterSharedLibraryFunctions ( libname . c_str ( ) )		1315247	1					
ANR	1315328	Callee	FunctionCall :: RegisterSharedLibraryFunctions		1315247	0					
ANR	1315329	Identifier	FunctionCall :: RegisterSharedLibraryFunctions		1315247	0					
ANR	1315330	ArgumentList	libname . c_str ( )		1315247	1					
ANR	1315331	Argument	libname . c_str ( )		1315247	0					
ANR	1315332	CallExpression	libname . c_str ( )		1315247	0					
ANR	1315333	Callee	libname . c_str		1315247	0					
ANR	1315334	MemberAccess	libname . c_str		1315247	0					
ANR	1315335	Identifier	libname		1315247	0					
ANR	1315336	Identifier	c_str		1315247	1					
ANR	1315337	ArgumentList			1315247	1					
ANR	1315338	IfStatement	if ( ! opened_library )		1315247	19					
ANR	1315339	Condition	! opened_library	589:5:14373:14387	1315247	0	True				
ANR	1315340	UnaryOperationExpression	! opened_library		1315247	0					
ANR	1315341	UnaryOperator	!		1315247	0					
ANR	1315342	Identifier	opened_library		1315247	1					
ANR	1315343	CompoundStatement		22:22:633:633	1315247	1					
ANR	1315344	ExpressionStatement	"cout << ""  Failed to open libshared.so: "" << CondorErrMsg << endl"	590:2:14394:14459	1315247	0	True				
ANR	1315345	ShiftExpression	"cout << ""  Failed to open libshared.so: "" << CondorErrMsg << endl"		1315247	0		<<			
ANR	1315346	Identifier	cout		1315247	0					
ANR	1315347	ShiftExpression	"""  Failed to open libshared.so: "" << CondorErrMsg << endl"		1315247	1		<<			
ANR	1315348	PrimaryExpression	"""  Failed to open libshared.so: """		1315247	0					
ANR	1315349	ShiftExpression	CondorErrMsg << endl		1315247	1		<<			
ANR	1315350	Identifier	CondorErrMsg		1315247	0					
ANR	1315351	Identifier	endl		1315247	1					
ANR	1315352	ExpressionStatement	classad = parser . ParseClassAd ( classad_text )	594:1:14473:14516	1315247	20	True				
ANR	1315353	AssignmentExpression	classad = parser . ParseClassAd ( classad_text )		1315247	0		=			
ANR	1315354	Identifier	classad		1315247	0					
ANR	1315355	CallExpression	parser . ParseClassAd ( classad_text )		1315247	1					
ANR	1315356	Callee	parser . ParseClassAd		1315247	0					
ANR	1315357	MemberAccess	parser . ParseClassAd		1315247	0					
ANR	1315358	Identifier	parser		1315247	0					
ANR	1315359	Identifier	ParseClassAd		1315247	1					
ANR	1315360	ArgumentList	classad_text		1315247	1					
ANR	1315361	Argument	classad_text		1315247	0					
ANR	1315362	Identifier	classad_text		1315247	0					
ANR	1315363	IfStatement	if ( classad == NULL )		1315247	21					
ANR	1315364	Condition	classad == NULL	595:5:14523:14537	1315247	0	True				
ANR	1315365	EqualityExpression	classad == NULL		1315247	0		==			
ANR	1315366	Identifier	classad		1315247	0					
ANR	1315367	Identifier	NULL		1315247	1					
ANR	1315368	CompoundStatement		28:22:783:783	1315247	1					
ANR	1315369	ExpressionStatement	"cout << ""  Failed to parse ClassAd in test_internal_user_function().\\n"""	596:2:14544:14615	1315247	0	True				
ANR	1315370	ShiftExpression	"cout << ""  Failed to parse ClassAd in test_internal_user_function().\\n"""		1315247	0		<<			
ANR	1315371	Identifier	cout		1315247	0					
ANR	1315372	PrimaryExpression	"""  Failed to parse ClassAd in test_internal_user_function().\\n"""		1315247	1					
ANR	1315373	ExpressionStatement	exit ( 1 )	597:2:14619:14626	1315247	1	True				
ANR	1315374	CallExpression	exit ( 1 )		1315247	0					
ANR	1315375	Callee	exit		1315247	0					
ANR	1315376	Identifier	exit		1315247	0					
ANR	1315377	ArgumentList	1		1315247	1					
ANR	1315378	Argument	1		1315247	0					
ANR	1315379	PrimaryExpression	1		1315247	0					
ANR	1315380	IdentifierDeclStatement	int test ;	600:1:14633:14641	1315247	22	True				
ANR	1315381	IdentifierDecl	test		1315247	0					
ANR	1315382	IdentifierDeclType	int		1315247	0					
ANR	1315383	Identifier	test		1315247	1					
ANR	1315384	IfStatement	"if ( ! classad -> EvaluateAttrInt ( ""Test1"" , test ) || test != 30 )"		1315247	23					
ANR	1315385	Condition	"! classad -> EvaluateAttrInt ( ""Test1"" , test ) || test != 30"	601:5:14648:14701	1315247	0	True				
ANR	1315386	OrExpression	"! classad -> EvaluateAttrInt ( ""Test1"" , test ) || test != 30"		1315247	0		||			
ANR	1315387	UnaryOperationExpression	"! classad -> EvaluateAttrInt ( ""Test1"" , test )"		1315247	0					
ANR	1315388	UnaryOperator	!		1315247	0					
ANR	1315389	CallExpression	"classad -> EvaluateAttrInt ( ""Test1"" , test )"		1315247	1					
ANR	1315390	Callee	classad -> EvaluateAttrInt		1315247	0					
ANR	1315391	PtrMemberAccess	classad -> EvaluateAttrInt		1315247	0					
ANR	1315392	Identifier	classad		1315247	0					
ANR	1315393	Identifier	EvaluateAttrInt		1315247	1					
ANR	1315394	ArgumentList	"""Test1"""		1315247	1					
ANR	1315395	Argument	"""Test1"""		1315247	0					
ANR	1315396	PrimaryExpression	"""Test1"""		1315247	0					
ANR	1315397	Argument	test		1315247	1					
ANR	1315398	Identifier	test		1315247	0					
ANR	1315399	EqualityExpression	test != 30		1315247	1		!=			
ANR	1315400	Identifier	test		1315247	0					
ANR	1315401	PrimaryExpression	30		1315247	1					
ANR	1315402	CompoundStatement		34:61:947:947	1315247	1					
ANR	1315403	ExpressionStatement	"cout << ""  Failed: Couldn't evaluate internal user function triple correctly."""	602:2:14708:14786	1315247	0	True				
ANR	1315404	ShiftExpression	"cout << ""  Failed: Couldn't evaluate internal user function triple correctly."""		1315247	0		<<			
ANR	1315405	Identifier	cout		1315247	0					
ANR	1315406	PrimaryExpression	"""  Failed: Couldn't evaluate internal user function triple correctly."""		1315247	1					
ANR	1315407	ElseStatement	else		1315247	0					
ANR	1315408	CompoundStatement		36:8:1039:1039	1315247	0					
ANR	1315409	ExpressionStatement	"cout << ""  OK: Evaluated internal user function triple ("""	604:2:14800:14857	1315247	0	True				
ANR	1315410	ShiftExpression	"cout << ""  OK: Evaluated internal user function triple ("""		1315247	0		<<			
ANR	1315411	Identifier	cout		1315247	0					
ANR	1315412	PrimaryExpression	"""  OK: Evaluated internal user function triple ("""		1315247	1					
ANR	1315413	ExpressionStatement	"cout << test << "") correctly.\\n"""	605:2:14861:14893	1315247	1	True				
ANR	1315414	ShiftExpression	"cout << test << "") correctly.\\n"""		1315247	0		<<			
ANR	1315415	Identifier	cout		1315247	0					
ANR	1315416	ShiftExpression	"test << "") correctly.\\n"""		1315247	1		<<			
ANR	1315417	Identifier	test		1315247	0					
ANR	1315418	PrimaryExpression	""") correctly.\\n"""		1315247	1					
ANR	1315419	IfStatement	if ( opened_library )		1315247	24					
ANR	1315420	Condition	opened_library	609:5:14963:14976	1315247	0	True				
ANR	1315421	Identifier	opened_library		1315247	0					
ANR	1315422	CompoundStatement		67:2:2203:2214	1315247	1					
ANR	1315423	IfStatement	"if ( ! classad -> EvaluateAttrInt ( ""Test1"" , test ) || test != 30 )"		1315247	0					
ANR	1315424	Condition	"! classad -> EvaluateAttrInt ( ""Test1"" , test ) || test != 30"	613:6:15140:15193	1315247	0	True				
ANR	1315425	OrExpression	"! classad -> EvaluateAttrInt ( ""Test1"" , test ) || test != 30"		1315247	0		||			
ANR	1315426	UnaryOperationExpression	"! classad -> EvaluateAttrInt ( ""Test1"" , test )"		1315247	0					
ANR	1315427	UnaryOperator	!		1315247	0					
ANR	1315428	CallExpression	"classad -> EvaluateAttrInt ( ""Test1"" , test )"		1315247	1					
ANR	1315429	Callee	classad -> EvaluateAttrInt		1315247	0					
ANR	1315430	PtrMemberAccess	classad -> EvaluateAttrInt		1315247	0					
ANR	1315431	Identifier	classad		1315247	0					
ANR	1315432	Identifier	EvaluateAttrInt		1315247	1					
ANR	1315433	ArgumentList	"""Test1"""		1315247	1					
ANR	1315434	Argument	"""Test1"""		1315247	0					
ANR	1315435	PrimaryExpression	"""Test1"""		1315247	0					
ANR	1315436	Argument	test		1315247	1					
ANR	1315437	Identifier	test		1315247	0					
ANR	1315438	EqualityExpression	test != 30		1315247	1		!=			
ANR	1315439	Identifier	test		1315247	0					
ANR	1315440	PrimaryExpression	30		1315247	1					
ANR	1315441	CompoundStatement		46:62:1439:1439	1315247	1					
ANR	1315442	ExpressionStatement	"cout << ""  Failed: Couldn't evaluate internal user function triple correctly."" << endl"	614:3:15201:15292	1315247	0	True				
ANR	1315443	ShiftExpression	"cout << ""  Failed: Couldn't evaluate internal user function triple correctly."" << endl"		1315247	0		<<			
ANR	1315444	Identifier	cout		1315247	0					
ANR	1315445	ShiftExpression	"""  Failed: Couldn't evaluate internal user function triple correctly."" << endl"		1315247	1		<<			
ANR	1315446	PrimaryExpression	"""  Failed: Couldn't evaluate internal user function triple correctly."""		1315247	0					
ANR	1315447	Identifier	endl		1315247	1					
ANR	1315448	ElseStatement	else		1315247	0					
ANR	1315449	CompoundStatement		49:9:1546:1546	1315247	0					
ANR	1315450	ExpressionStatement	"cout << ""  OK: Evaluated internal user function triple ("""	617:3:15308:15365	1315247	0	True				
ANR	1315451	ShiftExpression	"cout << ""  OK: Evaluated internal user function triple ("""		1315247	0		<<			
ANR	1315452	Identifier	cout		1315247	0					
ANR	1315453	PrimaryExpression	"""  OK: Evaluated internal user function triple ("""		1315247	1					
ANR	1315454	ExpressionStatement	"cout << test << "") correctly.\\n"""	618:3:15370:15402	1315247	1	True				
ANR	1315455	ShiftExpression	"cout << test << "") correctly.\\n"""		1315247	0		<<			
ANR	1315456	Identifier	cout		1315247	0					
ANR	1315457	ShiftExpression	"test << "") correctly.\\n"""		1315247	1		<<			
ANR	1315458	Identifier	test		1315247	0					
ANR	1315459	PrimaryExpression	""") correctly.\\n"""		1315247	1					
ANR	1315460	IfStatement	"if ( ! classad -> EvaluateAttrInt ( ""Test2"" , test ) || test != 21 )"		1315247	1					
ANR	1315461	Condition	"! classad -> EvaluateAttrInt ( ""Test2"" , test ) || test != 21"	622:6:15482:15535	1315247	0	True				
ANR	1315462	OrExpression	"! classad -> EvaluateAttrInt ( ""Test2"" , test ) || test != 21"		1315247	0		||			
ANR	1315463	UnaryOperationExpression	"! classad -> EvaluateAttrInt ( ""Test2"" , test )"		1315247	0					
ANR	1315464	UnaryOperator	!		1315247	0					
ANR	1315465	CallExpression	"classad -> EvaluateAttrInt ( ""Test2"" , test )"		1315247	1					
ANR	1315466	Callee	classad -> EvaluateAttrInt		1315247	0					
ANR	1315467	PtrMemberAccess	classad -> EvaluateAttrInt		1315247	0					
ANR	1315468	Identifier	classad		1315247	0					
ANR	1315469	Identifier	EvaluateAttrInt		1315247	1					
ANR	1315470	ArgumentList	"""Test2"""		1315247	1					
ANR	1315471	Argument	"""Test2"""		1315247	0					
ANR	1315472	PrimaryExpression	"""Test2"""		1315247	0					
ANR	1315473	Argument	test		1315247	1					
ANR	1315474	Identifier	test		1315247	0					
ANR	1315475	EqualityExpression	test != 21		1315247	1		!=			
ANR	1315476	Identifier	test		1315247	0					
ANR	1315477	PrimaryExpression	21		1315247	1					
ANR	1315478	CompoundStatement		55:62:1781:1781	1315247	1					
ANR	1315479	ExpressionStatement	"cout << ""  Failed: Couldn't evaluate shared user function double "" << "" ("" << test << "") correctly."" << endl"	623:3:15543:15657	1315247	0	True				
ANR	1315480	ShiftExpression	"cout << ""  Failed: Couldn't evaluate shared user function double "" << "" ("" << test << "") correctly."" << endl"		1315247	0		<<			
ANR	1315481	Identifier	cout		1315247	0					
ANR	1315482	ShiftExpression	"""  Failed: Couldn't evaluate shared user function double "" << "" ("" << test << "") correctly."" << endl"		1315247	1		<<			
ANR	1315483	PrimaryExpression	"""  Failed: Couldn't evaluate shared user function double """		1315247	0					
ANR	1315484	ShiftExpression	""" ("" << test << "") correctly."" << endl"		1315247	1		<<			
ANR	1315485	PrimaryExpression	""" ("""		1315247	0					
ANR	1315486	ShiftExpression	"test << "") correctly."" << endl"		1315247	1		<<			
ANR	1315487	Identifier	test		1315247	0					
ANR	1315488	ShiftExpression	""") correctly."" << endl"		1315247	1		<<			
ANR	1315489	PrimaryExpression	""") correctly."""		1315247	0					
ANR	1315490	Identifier	endl		1315247	1					
ANR	1315491	IfStatement	"if ( ! classad -> EvaluateAttrInt ( ""Test2"" , test ) )"		1315247	1					
ANR	1315492	Condition	"! classad -> EvaluateAttrInt ( ""Test2"" , test )"	625:7:15666:15705	1315247	0	True				
ANR	1315493	UnaryOperationExpression	"! classad -> EvaluateAttrInt ( ""Test2"" , test )"		1315247	0					
ANR	1315494	UnaryOperator	!		1315247	0					
ANR	1315495	CallExpression	"classad -> EvaluateAttrInt ( ""Test2"" , test )"		1315247	1					
ANR	1315496	Callee	classad -> EvaluateAttrInt		1315247	0					
ANR	1315497	PtrMemberAccess	classad -> EvaluateAttrInt		1315247	0					
ANR	1315498	Identifier	classad		1315247	0					
ANR	1315499	Identifier	EvaluateAttrInt		1315247	1					
ANR	1315500	ArgumentList	"""Test2"""		1315247	1					
ANR	1315501	Argument	"""Test2"""		1315247	0					
ANR	1315502	PrimaryExpression	"""Test2"""		1315247	0					
ANR	1315503	Argument	test		1315247	1					
ANR	1315504	Identifier	test		1315247	0					
ANR	1315505	CompoundStatement		58:49:1951:1951	1315247	1					
ANR	1315506	ExpressionStatement	"cout << ""  Couldn't even evaluate it at all."" << endl"	626:4:15714:15767	1315247	0	True				
ANR	1315507	ShiftExpression	"cout << ""  Couldn't even evaluate it at all."" << endl"		1315247	0		<<			
ANR	1315508	Identifier	cout		1315247	0					
ANR	1315509	ShiftExpression	"""  Couldn't even evaluate it at all."" << endl"		1315247	1		<<			
ANR	1315510	PrimaryExpression	"""  Couldn't even evaluate it at all."""		1315247	0					
ANR	1315511	Identifier	endl		1315247	1					
ANR	1315512	ElseStatement	else		1315247	0					
ANR	1315513	CompoundStatement		61:9:2026:2026	1315247	0					
ANR	1315514	ExpressionStatement	"cout << ""  OK: Evaluated shared user function double ("""	629:3:15788:15843	1315247	0	True				
ANR	1315515	ShiftExpression	"cout << ""  OK: Evaluated shared user function double ("""		1315247	0		<<			
ANR	1315516	Identifier	cout		1315247	0					
ANR	1315517	PrimaryExpression	"""  OK: Evaluated shared user function double ("""		1315247	1					
ANR	1315518	ExpressionStatement	"cout << test << "") correctly.\\n"""	630:3:15848:15880	1315247	1	True				
ANR	1315519	ShiftExpression	"cout << test << "") correctly.\\n"""		1315247	0		<<			
ANR	1315520	Identifier	cout		1315247	0					
ANR	1315521	ShiftExpression	"test << "") correctly.\\n"""		1315247	1		<<			
ANR	1315522	Identifier	test		1315247	0					
ANR	1315523	PrimaryExpression	""") correctly.\\n"""		1315247	1					
ANR	1315524	IdentifierDeclStatement	string date ;	634:2:15960:15971	1315247	2	True				
ANR	1315525	IdentifierDecl	date		1315247	0					
ANR	1315526	IdentifierDeclType	string		1315247	0					
ANR	1315527	Identifier	date		1315247	1					
ANR	1315528	IfStatement	"if ( ! classad -> EvaluateAttrString ( ""Test3"" , date ) )"		1315247	3					
ANR	1315529	Condition	"! classad -> EvaluateAttrString ( ""Test3"" , date )"	635:6:15979:16021	1315247	0	True				
ANR	1315530	UnaryOperationExpression	"! classad -> EvaluateAttrString ( ""Test3"" , date )"		1315247	0					
ANR	1315531	UnaryOperator	!		1315247	0					
ANR	1315532	CallExpression	"classad -> EvaluateAttrString ( ""Test3"" , date )"		1315247	1					
ANR	1315533	Callee	classad -> EvaluateAttrString		1315247	0					
ANR	1315534	PtrMemberAccess	classad -> EvaluateAttrString		1315247	0					
ANR	1315535	Identifier	classad		1315247	0					
ANR	1315536	Identifier	EvaluateAttrString		1315247	1					
ANR	1315537	ArgumentList	"""Test3"""		1315247	1					
ANR	1315538	Argument	"""Test3"""		1315247	0					
ANR	1315539	PrimaryExpression	"""Test3"""		1315247	0					
ANR	1315540	Argument	date		1315247	1					
ANR	1315541	Identifier	date		1315247	0					
ANR	1315542	CompoundStatement		68:51:2267:2267	1315247	1					
ANR	1315543	ExpressionStatement	"cout << ""  Failed: Couldn't evaluate shared user function "" << "" todays_date ("" << test << "") correctly."" << endl"	636:3:16029:16148	1315247	0	True				
ANR	1315544	ShiftExpression	"cout << ""  Failed: Couldn't evaluate shared user function "" << "" todays_date ("" << test << "") correctly."" << endl"		1315247	0		<<			
ANR	1315545	Identifier	cout		1315247	0					
ANR	1315546	ShiftExpression	"""  Failed: Couldn't evaluate shared user function "" << "" todays_date ("" << test << "") correctly."" << endl"		1315247	1		<<			
ANR	1315547	PrimaryExpression	"""  Failed: Couldn't evaluate shared user function """		1315247	0					
ANR	1315548	ShiftExpression	""" todays_date ("" << test << "") correctly."" << endl"		1315247	1		<<			
ANR	1315549	PrimaryExpression	""" todays_date ("""		1315247	0					
ANR	1315550	ShiftExpression	"test << "") correctly."" << endl"		1315247	1		<<			
ANR	1315551	Identifier	test		1315247	0					
ANR	1315552	ShiftExpression	""") correctly."" << endl"		1315247	1		<<			
ANR	1315553	PrimaryExpression	""") correctly."""		1315247	0					
ANR	1315554	Identifier	endl		1315247	1					
ANR	1315555	ElseStatement	else		1315247	0					
ANR	1315556	CompoundStatement		71:9:2402:2402	1315247	0					
ANR	1315557	ExpressionStatement	"cout << ""  OK: Evaluated shared function todays_date: """	639:3:16164:16219	1315247	0	True				
ANR	1315558	ShiftExpression	"cout << ""  OK: Evaluated shared function todays_date: """		1315247	0		<<			
ANR	1315559	Identifier	cout		1315247	0					
ANR	1315560	PrimaryExpression	"""  OK: Evaluated shared function todays_date: """		1315247	1					
ANR	1315561	ExpressionStatement	cout << date << endl	640:3:16224:16244	1315247	1	True				
ANR	1315562	ShiftExpression	cout << date << endl		1315247	0		<<			
ANR	1315563	Identifier	cout		1315247	0					
ANR	1315564	ShiftExpression	date << endl		1315247	1		<<			
ANR	1315565	Identifier	date		1315247	0					
ANR	1315566	Identifier	endl		1315247	1					
ANR	1315567	ReturnStatement	return ;	646:1:16266:16272	1315247	25	True				
ANR	1315568	ReturnType	static void		1315247	1					
ANR	1315569	Identifier	test_user_functions		1315247	2					
ANR	1315570	ParameterList			1315247	3					
ANR	1315571	CFGEntryNode	ENTRY		1315247		True				
ANR	1315572	CFGExitNode	EXIT		1315247		True				
ANR	1315573	Symbol	opened_library		1315247						
ANR	1315574	Symbol	date		1315247						
ANR	1315575	Symbol	libname . c_str		1315247						
ANR	1315576	Symbol	NULL		1315247						
ANR	1315577	Symbol	test		1315247						
ANR	1315578	Symbol	* classad		1315247						
ANR	1315579	Symbol	classad_text		1315247						
ANR	1315580	Symbol	classad -> EvaluateAttrString		1315247						
ANR	1315581	Symbol	parser . ParseClassAd		1315247						
ANR	1315582	Symbol	path		1315247						
ANR	1315583	Symbol	FunctionCall :: RegisterSharedLibraryFunctions		1315247						
ANR	1315584	Symbol	parser		1315247						
ANR	1315585	Symbol	triple		1315247						
ANR	1315586	Symbol	libname		1315247						
ANR	1315587	Symbol	TEST_LIBNAME		1315247						
ANR	1315588	Symbol	name		1315247						
ANR	1315589	Symbol	* path		1315247						
ANR	1315590	Symbol	classad		1315247						
ANR	1315591	Symbol	classad -> EvaluateAttrInt		1315247						
ANR	1315592	DeclStmt									
ANR	1315593	Decl							Value	Value	arg
ANR	1315594	DeclStmt									
ANR	1315595	Decl							int	int	int_value
ANR	1315596	DeclStmt									
ANR	1315597	Decl							double	double	real_value
