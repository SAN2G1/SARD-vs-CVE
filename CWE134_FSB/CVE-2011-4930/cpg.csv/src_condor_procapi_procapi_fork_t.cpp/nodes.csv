command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3600936	File	data/converged/CVE-2011-4930_htcondor/src_condor_procapi_procapi_fork_t.cpp								
ANR	3600937	DeclStmt									
ANR	3600938	Decl							int	int	TOTAL_DEPTH
ANR	3600939	DeclStmt									
ANR	3600940	Decl							int	int	TREE_BREADTH_CHANGE
ANR	3600941	Function	do_work	40:0:1495:2138							
ANR	3600942	FunctionDef	"do_work (int k , bool verbose)"		3600941	0					
ANR	3600943	CompoundStatement		40:33:1528:2138	3600941	0					
ANR	3600944	IdentifierDeclStatement	char * * memory ;	41:2:1532:1545	3600941	0	True				
ANR	3600945	IdentifierDecl	* * memory		3600941	0					
ANR	3600946	IdentifierDeclType	char * *		3600941	0					
ANR	3600947	Identifier	memory		3600941	1					
ANR	3600948	Statement	memory	44:2:1576:1581	3600941	1	True				
ANR	3600949	Statement	=	44:9:1583:1583	3600941	2	True				
ANR	3600950	Statement	new	44:11:1585:1587	3600941	3	True				
ANR	3600951	Statement	char	44:15:1589:1592	3600941	4	True				
ANR	3600952	Statement	*	44:19:1593:1593	3600941	5	True				
ANR	3600953	Statement	[	44:20:1594:1594	3600941	6	True				
ANR	3600954	Statement	k	44:21:1595:1595	3600941	7	True				
ANR	3600955	Statement	]	44:22:1596:1596	3600941	8	True				
ANR	3600956	ExpressionStatement		44:23:1597:1597	3600941	9	True				
ANR	3600957	ForStatement	for ( int i = 0 ; i < k ; i ++ )		3600941	10					
ANR	3600958	ForInit	int i = 0 ;	45:6:1605:1614	3600941	0	True				
ANR	3600959	IdentifierDeclStatement	int i = 0 ;		3600941	0					
ANR	3600960	IdentifierDecl	i = 0		3600941	0					
ANR	3600961	IdentifierDeclType	int		3600941	0					
ANR	3600962	Identifier	i		3600941	1					
ANR	3600963	AssignmentExpression	i = 0		3600941	2		=			
ANR	3600964	Identifier	i		3600941	0					
ANR	3600965	PrimaryExpression	0		3600941	1					
ANR	3600966	Condition	i < k	45:17:1616:1620	3600941	1	True				
ANR	3600967	RelationalExpression	i < k		3600941	0		<			
ANR	3600968	Identifier	i		3600941	0					
ANR	3600969	Identifier	k		3600941	1					
ANR	3600970	PostIncDecOperationExpression	i ++	45:24:1623:1625	3600941	2	True				
ANR	3600971	Identifier	i		3600941	0					
ANR	3600972	IncDec	++		3600941	1					
ANR	3600973	CompoundStatement		6:28:98:98	3600941	3					
ANR	3600974	ExpressionStatement	memory [ i ] = new char [ 1024 ]	46:4:1633:1659	3600941	0	True				
ANR	3600975	AssignmentExpression	memory [ i ] = new char [ 1024 ]		3600941	0		=			
ANR	3600976	ArrayIndexing	memory [ i ]		3600941	0					
ANR	3600977	Identifier	memory		3600941	0					
ANR	3600978	Identifier	i		3600941	1					
ANR	3600979	PrimaryExpression	1024		3600941	1					
ANR	3600980	IfStatement	if ( verbose )		3600941	11					
ANR	3600981	Condition	verbose	48:5:1670:1676	3600941	0	True				
ANR	3600982	Identifier	verbose		3600941	0					
ANR	3600983	CompoundStatement		9:13:149:149	3600941	1					
ANR	3600984	ExpressionStatement	"printf ( ""Process %d done allocating %d k of memory\\n"" , getpid ( ) , k )"	49:4:1684:1750	3600941	0	True				
ANR	3600985	CallExpression	"printf ( ""Process %d done allocating %d k of memory\\n"" , getpid ( ) , k )"		3600941	0					
ANR	3600986	Callee	printf		3600941	0					
ANR	3600987	Identifier	printf		3600941	0					
ANR	3600988	ArgumentList	"""Process %d done allocating %d k of memory\\n"""		3600941	1					
ANR	3600989	Argument	"""Process %d done allocating %d k of memory\\n"""		3600941	0					
ANR	3600990	PrimaryExpression	"""Process %d done allocating %d k of memory\\n"""		3600941	0					
ANR	3600991	Argument	getpid ( )		3600941	1					
ANR	3600992	CallExpression	getpid ( )		3600941	0					
ANR	3600993	Callee	getpid		3600941	0					
ANR	3600994	Identifier	getpid		3600941	0					
ANR	3600995	ArgumentList			3600941	1					
ANR	3600996	Argument	k		3600941	2					
ANR	3600997	Identifier	k		3600941	0					
ANR	3600998	ForStatement	for ( int i = 0 ; i < k ; i ++ )		3600941	12					
ANR	3600999	ForInit	int i = 0 ;	52:7:1782:1791	3600941	0	True				
ANR	3601000	IdentifierDeclStatement	int i = 0 ;		3600941	0					
ANR	3601001	IdentifierDecl	i = 0		3600941	0					
ANR	3601002	IdentifierDeclType	int		3600941	0					
ANR	3601003	Identifier	i		3600941	1					
ANR	3601004	AssignmentExpression	i = 0		3600941	2		=			
ANR	3601005	Identifier	i		3600941	0					
ANR	3601006	PrimaryExpression	0		3600941	1					
ANR	3601007	Condition	i < k	52:18:1793:1797	3600941	1	True				
ANR	3601008	RelationalExpression	i < k		3600941	0		<			
ANR	3601009	Identifier	i		3600941	0					
ANR	3601010	Identifier	k		3600941	1					
ANR	3601011	PostIncDecOperationExpression	i ++	52:25:1800:1802	3600941	2	True				
ANR	3601012	Identifier	i		3600941	0					
ANR	3601013	IncDec	++		3600941	1					
ANR	3601014	CompoundStatement		13:29:275:275	3600941	3					
ANR	3601015	ExpressionStatement	memory [ i ] [ 0 ] = 'x'	53:4:1810:1828	3600941	0	True				
ANR	3601016	AssignmentExpression	memory [ i ] [ 0 ] = 'x'		3600941	0		=			
ANR	3601017	ArrayIndexing	memory [ i ] [ 0 ]		3600941	0					
ANR	3601018	ArrayIndexing	memory [ i ]		3600941	0					
ANR	3601019	Identifier	memory		3600941	0					
ANR	3601020	Identifier	i		3600941	1					
ANR	3601021	PrimaryExpression	0		3600941	1					
ANR	3601022	PrimaryExpression	'x'		3600941	1					
ANR	3601023	IfStatement	if ( verbose )		3600941	13					
ANR	3601024	Condition	verbose	55:5:1839:1845	3600941	0	True				
ANR	3601025	Identifier	verbose		3600941	0					
ANR	3601026	CompoundStatement		16:13:318:318	3600941	1					
ANR	3601027	ExpressionStatement	"printf ( ""Process %d done touching all pages\\n"" , getpid ( ) )"	56:4:1853:1909	3600941	0	True				
ANR	3601028	CallExpression	"printf ( ""Process %d done touching all pages\\n"" , getpid ( ) )"		3600941	0					
ANR	3601029	Callee	printf		3600941	0					
ANR	3601030	Identifier	printf		3600941	0					
ANR	3601031	ArgumentList	"""Process %d done touching all pages\\n"""		3600941	1					
ANR	3601032	Argument	"""Process %d done touching all pages\\n"""		3600941	0					
ANR	3601033	PrimaryExpression	"""Process %d done touching all pages\\n"""		3600941	0					
ANR	3601034	Argument	getpid ( )		3600941	1					
ANR	3601035	CallExpression	getpid ( )		3600941	0					
ANR	3601036	Callee	getpid		3600941	0					
ANR	3601037	Identifier	getpid		3600941	0					
ANR	3601038	ArgumentList			3600941	1					
ANR	3601039	ForStatement	for ( int i = 0 ; i < BUSY_WORK_TIME ; i ++ )		3600941	14					
ANR	3601040	ForInit	int i = 0 ;	59:6:1924:1933	3600941	0	True				
ANR	3601041	IdentifierDeclStatement	int i = 0 ;		3600941	0					
ANR	3601042	IdentifierDecl	i = 0		3600941	0					
ANR	3601043	IdentifierDeclType	int		3600941	0					
ANR	3601044	Identifier	i		3600941	1					
ANR	3601045	AssignmentExpression	i = 0		3600941	2		=			
ANR	3601046	Identifier	i		3600941	0					
ANR	3601047	PrimaryExpression	0		3600941	1					
ANR	3601048	Condition	i < BUSY_WORK_TIME	59:17:1935:1952	3600941	1	True				
ANR	3601049	RelationalExpression	i < BUSY_WORK_TIME		3600941	0		<			
ANR	3601050	Identifier	i		3600941	0					
ANR	3601051	Identifier	BUSY_WORK_TIME		3600941	1					
ANR	3601052	PostIncDecOperationExpression	i ++	59:37:1955:1957	3600941	2	True				
ANR	3601053	Identifier	i		3600941	0					
ANR	3601054	IncDec	++		3600941	1					
ANR	3601055	ExpressionStatement		60:4:1964:1964	3600941	3	True				
ANR	3601056	IfStatement	if ( verbose )		3600941	15					
ANR	3601057	Condition	verbose	61:5:1971:1977	3600941	0	True				
ANR	3601058	Identifier	verbose		3600941	0					
ANR	3601059	CompoundStatement		22:13:450:450	3600941	1					
ANR	3601060	ExpressionStatement	"printf ( ""Process %d done doing busy work\\n"" , getpid ( ) )"	62:4:1985:2038	3600941	0	True				
ANR	3601061	CallExpression	"printf ( ""Process %d done doing busy work\\n"" , getpid ( ) )"		3600941	0					
ANR	3601062	Callee	printf		3600941	0					
ANR	3601063	Identifier	printf		3600941	0					
ANR	3601064	ArgumentList	"""Process %d done doing busy work\\n"""		3600941	1					
ANR	3601065	Argument	"""Process %d done doing busy work\\n"""		3600941	0					
ANR	3601066	PrimaryExpression	"""Process %d done doing busy work\\n"""		3600941	0					
ANR	3601067	Argument	getpid ( )		3600941	1					
ANR	3601068	CallExpression	getpid ( )		3600941	0					
ANR	3601069	Callee	getpid		3600941	0					
ANR	3601070	Identifier	getpid		3600941	0					
ANR	3601071	ArgumentList			3600941	1					
ANR	3601072	ReturnType	void		3600941	1					
ANR	3601073	Identifier	do_work		3600941	2					
ANR	3601074	ParameterList	"int k , bool verbose"		3600941	3					
ANR	3601075	Parameter	int k	40:13:1508:1512	3600941	0	True				
ANR	3601076	ParameterType	int		3600941	0					
ANR	3601077	Identifier	k		3600941	1					
ANR	3601078	Parameter	bool verbose	40:20:1515:1526	3600941	1	True				
ANR	3601079	ParameterType	bool		3600941	0					
ANR	3601080	Identifier	verbose		3600941	1					
ANR	3601081	CFGEntryNode	ENTRY		3600941		True				
ANR	3601082	CFGExitNode	EXIT		3600941		True				
ANR	3601083	Symbol	BUSY_WORK_TIME		3600941						
ANR	3601084	Symbol	* * i		3600941						
ANR	3601085	Symbol	memory		3600941						
ANR	3601086	Symbol	* i		3600941						
ANR	3601087	Symbol	* * memory		3600941						
ANR	3601088	Symbol	i		3600941						
ANR	3601089	Symbol	k		3600941						
ANR	3601090	Symbol	* memory		3600941						
ANR	3601091	Symbol	getpid		3600941						
ANR	3601092	Symbol	verbose		3600941						
ANR	3601093	Function	recursive_fork	69:0:2141:5146							
ANR	3601094	FunctionDef	"recursive_fork (int depth , int breadth , bool verbose)"		3601093	0					
ANR	3601095	CompoundStatement		69:63:2204:5146	3601093	0					
ANR	3601096	IfStatement	if ( depth <= 0 )		3601093	0					
ANR	3601097	Condition	depth <= 0	71:5:2214:2223	3601093	0	True				
ANR	3601098	RelationalExpression	depth <= 0		3601093	0		<=			
ANR	3601099	Identifier	depth		3601093	0					
ANR	3601100	PrimaryExpression	0		3601093	1					
ANR	3601101	CompoundStatement		5:4:88:121	3601093	1					
ANR	3601102	IdentifierDeclStatement	PID_ENTRY * arr = new PID_ENTRY [ 1 ] ;	73:4:2293:2326	3601093	0	True				
ANR	3601103	IdentifierDecl	* arr = new PID_ENTRY [ 1 ]		3601093	0					
ANR	3601104	IdentifierDeclType	PID_ENTRY *		3601093	0					
ANR	3601105	Identifier	arr		3601093	1					
ANR	3601106	AssignmentExpression	* arr = new PID_ENTRY [ 1 ]		3601093	2		=			
ANR	3601107	Identifier	arr		3601093	0					
ANR	3601108	PrimaryExpression	1		3601093	1					
ANR	3601109	ExpressionStatement	arr [ 0 ] . pid = getpid ( )	74:4:2332:2353	3601093	1	True				
ANR	3601110	AssignmentExpression	arr [ 0 ] . pid = getpid ( )		3601093	0		=			
ANR	3601111	MemberAccess	arr [ 0 ] . pid		3601093	0					
ANR	3601112	ArrayIndexing	arr [ 0 ]		3601093	0					
ANR	3601113	Identifier	arr		3601093	0					
ANR	3601114	PrimaryExpression	0		3601093	1					
ANR	3601115	Identifier	pid		3601093	1					
ANR	3601116	CallExpression	getpid ( )		3601093	1					
ANR	3601117	Callee	getpid		3601093	0					
ANR	3601118	Identifier	getpid		3601093	0					
ANR	3601119	ArgumentList			3601093	1					
ANR	3601120	ExpressionStatement	arr [ 0 ] . ppid = getppid ( )	75:4:2359:2382	3601093	2	True				
ANR	3601121	AssignmentExpression	arr [ 0 ] . ppid = getppid ( )		3601093	0		=			
ANR	3601122	MemberAccess	arr [ 0 ] . ppid		3601093	0					
ANR	3601123	ArrayIndexing	arr [ 0 ]		3601093	0					
ANR	3601124	Identifier	arr		3601093	0					
ANR	3601125	PrimaryExpression	0		3601093	1					
ANR	3601126	Identifier	ppid		3601093	1					
ANR	3601127	CallExpression	getppid ( )		3601093	1					
ANR	3601128	Callee	getppid		3601093	0					
ANR	3601129	Identifier	getppid		3601093	0					
ANR	3601130	ArgumentList			3601093	1					
ANR	3601131	ExpressionStatement	arr [ 0 ] . depth = 1	76:4:2388:2404	3601093	3	True				
ANR	3601132	AssignmentExpression	arr [ 0 ] . depth = 1		3601093	0		=			
ANR	3601133	MemberAccess	arr [ 0 ] . depth		3601093	0					
ANR	3601134	ArrayIndexing	arr [ 0 ]		3601093	0					
ANR	3601135	Identifier	arr		3601093	0					
ANR	3601136	PrimaryExpression	0		3601093	1					
ANR	3601137	Identifier	depth		3601093	1					
ANR	3601138	PrimaryExpression	1		3601093	1					
ANR	3601139	ExpressionStatement	arr [ 0 ] . breadth = breadth	77:4:2410:2434	3601093	4	True				
ANR	3601140	AssignmentExpression	arr [ 0 ] . breadth = breadth		3601093	0		=			
ANR	3601141	MemberAccess	arr [ 0 ] . breadth		3601093	0					
ANR	3601142	ArrayIndexing	arr [ 0 ]		3601093	0					
ANR	3601143	Identifier	arr		3601093	0					
ANR	3601144	PrimaryExpression	0		3601093	1					
ANR	3601145	Identifier	breadth		3601093	1					
ANR	3601146	Identifier	breadth		3601093	1					
ANR	3601147	ReturnStatement	return arr ;	78:4:2440:2450	3601093	5	True				
ANR	3601148	Identifier	arr		3601093	0					
ANR	3601149	IdentifierDeclStatement	int * * fds ;	84:2:2554:2563	3601093	1	True				
ANR	3601150	IdentifierDecl	* * fds		3601093	0					
ANR	3601151	IdentifierDeclType	int * *		3601093	0					
ANR	3601152	Identifier	fds		3601093	1					
ANR	3601153	Statement	fds	85:2:2567:2569	3601093	2	True				
ANR	3601154	Statement	=	85:6:2571:2571	3601093	3	True				
ANR	3601155	Statement	new	85:8:2573:2575	3601093	4	True				
ANR	3601156	Statement	int	85:12:2577:2579	3601093	5	True				
ANR	3601157	Statement	*	85:15:2580:2580	3601093	6	True				
ANR	3601158	Statement	[	85:16:2581:2581	3601093	7	True				
ANR	3601159	Statement	breadth	85:17:2582:2588	3601093	8	True				
ANR	3601160	Statement	]	85:24:2589:2589	3601093	9	True				
ANR	3601161	ExpressionStatement		85:25:2590:2590	3601093	10	True				
ANR	3601162	ForStatement	for ( int i = 0 ; i < breadth ; i ++ )		3601093	11					
ANR	3601163	ForInit	int i = 0 ;	86:6:2598:2607	3601093	0	True				
ANR	3601164	IdentifierDeclStatement	int i = 0 ;		3601093	0					
ANR	3601165	IdentifierDecl	i = 0		3601093	0					
ANR	3601166	IdentifierDeclType	int		3601093	0					
ANR	3601167	Identifier	i		3601093	1					
ANR	3601168	AssignmentExpression	i = 0		3601093	2		=			
ANR	3601169	Identifier	i		3601093	0					
ANR	3601170	PrimaryExpression	0		3601093	1					
ANR	3601171	Condition	i < breadth	86:17:2609:2619	3601093	1	True				
ANR	3601172	RelationalExpression	i < breadth		3601093	0		<			
ANR	3601173	Identifier	i		3601093	0					
ANR	3601174	Identifier	breadth		3601093	1					
ANR	3601175	PostIncDecOperationExpression	i ++	86:30:2622:2624	3601093	2	True				
ANR	3601176	Identifier	i		3601093	0					
ANR	3601177	IncDec	++		3601093	1					
ANR	3601178	CompoundStatement		18:34:421:421	3601093	3					
ANR	3601179	ExpressionStatement	fds [ i ] = new int [ 2 ]	87:4:2632:2651	3601093	0	True				
ANR	3601180	AssignmentExpression	fds [ i ] = new int [ 2 ]		3601093	0		=			
ANR	3601181	ArrayIndexing	fds [ i ]		3601093	0					
ANR	3601182	Identifier	fds		3601093	0					
ANR	3601183	Identifier	i		3601093	1					
ANR	3601184	PrimaryExpression	2		3601093	1					
ANR	3601185	IdentifierDeclStatement	"PID_ENTRY * pid_arr = new PID_ENTRY [ get_num_nodes ( depth + 1 , breadth ) ] ;"	91:2:2733:2803	3601093	12	True				
ANR	3601186	IdentifierDecl	"* pid_arr = new PID_ENTRY [ get_num_nodes ( depth + 1 , breadth ) ]"		3601093	0					
ANR	3601187	IdentifierDeclType	PID_ENTRY *		3601093	0					
ANR	3601188	Identifier	pid_arr		3601093	1					
ANR	3601189	AssignmentExpression	"* pid_arr = new PID_ENTRY [ get_num_nodes ( depth + 1 , breadth ) ]"		3601093	2		=			
ANR	3601190	Identifier	pid_arr		3601093	0					
ANR	3601191	CallExpression	"get_num_nodes ( depth + 1 , breadth )"		3601093	1					
ANR	3601192	Callee	get_num_nodes		3601093	0					
ANR	3601193	Identifier	get_num_nodes		3601093	0					
ANR	3601194	ArgumentList	depth + 1		3601093	1					
ANR	3601195	Argument	depth + 1		3601093	0					
ANR	3601196	AdditiveExpression	depth + 1		3601093	0		+			
ANR	3601197	Identifier	depth		3601093	0					
ANR	3601198	PrimaryExpression	1		3601093	1					
ANR	3601199	Argument	breadth		3601093	1					
ANR	3601200	Identifier	breadth		3601093	0					
ANR	3601201	ForStatement	for ( int i = 0 ; i < breadth ; i ++ )		3601093	13					
ANR	3601202	ForInit	int i = 0 ;	93:7:2813:2822	3601093	0	True				
ANR	3601203	IdentifierDeclStatement	int i = 0 ;		3601093	0					
ANR	3601204	IdentifierDecl	i = 0		3601093	0					
ANR	3601205	IdentifierDeclType	int		3601093	0					
ANR	3601206	Identifier	i		3601093	1					
ANR	3601207	AssignmentExpression	i = 0		3601093	2		=			
ANR	3601208	Identifier	i		3601093	0					
ANR	3601209	PrimaryExpression	0		3601093	1					
ANR	3601210	Condition	i < breadth	93:18:2824:2834	3601093	1	True				
ANR	3601211	RelationalExpression	i < breadth		3601093	0		<			
ANR	3601212	Identifier	i		3601093	0					
ANR	3601213	Identifier	breadth		3601093	1					
ANR	3601214	PostIncDecOperationExpression	i ++	93:31:2837:2839	3601093	2	True				
ANR	3601215	Identifier	i		3601093	0					
ANR	3601216	IncDec	++		3601093	1					
ANR	3601217	CompoundStatement		29:4:688:708	3601093	3					
ANR	3601218	ExpressionStatement	pipe ( fds [ i ] )	96:4:2875:2887	3601093	0	True				
ANR	3601219	CallExpression	pipe ( fds [ i ] )		3601093	0					
ANR	3601220	Callee	pipe		3601093	0					
ANR	3601221	Identifier	pipe		3601093	0					
ANR	3601222	ArgumentList	fds [ i ]		3601093	1					
ANR	3601223	Argument	fds [ i ]		3601093	0					
ANR	3601224	ArrayIndexing	fds [ i ]		3601093	0					
ANR	3601225	Identifier	fds		3601093	0					
ANR	3601226	Identifier	i		3601093	1					
ANR	3601227	IdentifierDeclStatement	pid_t child = fork ( ) ;	97:4:2893:2913	3601093	1	True				
ANR	3601228	IdentifierDecl	child = fork ( )		3601093	0					
ANR	3601229	IdentifierDeclType	pid_t		3601093	0					
ANR	3601230	Identifier	child		3601093	1					
ANR	3601231	AssignmentExpression	child = fork ( )		3601093	2		=			
ANR	3601232	Identifier	child		3601093	0					
ANR	3601233	CallExpression	fork ( )		3601093	1					
ANR	3601234	Callee	fork		3601093	0					
ANR	3601235	Identifier	fork		3601093	0					
ANR	3601236	ArgumentList			3601093	1					
ANR	3601237	IfStatement	if ( child == 0 )		3601093	2					
ANR	3601238	Condition	child == 0	98:7:2922:2931	3601093	0	True				
ANR	3601239	EqualityExpression	child == 0		3601093	0		==			
ANR	3601240	Identifier	child		3601093	0					
ANR	3601241	PrimaryExpression	0		3601093	1					
ANR	3601242	CompoundStatement		48:6:1311:1357	3601093	1					
ANR	3601243	IfStatement	if ( verbose )		3601093	0					
ANR	3601244	Condition	verbose	102:9:2976:2982	3601093	0	True				
ANR	3601245	Identifier	verbose		3601093	0					
ANR	3601246	CompoundStatement		34:17:779:779	3601093	1					
ANR	3601247	ExpressionStatement	"printf ( ""Process %d is the #%d child of %d at depth %d\\n"" , getpid ( ) , i , getppid ( ) , TOTAL_DEPTH - depth )"	103:1:2987:3099	3601093	0	True				
ANR	3601248	CallExpression	"printf ( ""Process %d is the #%d child of %d at depth %d\\n"" , getpid ( ) , i , getppid ( ) , TOTAL_DEPTH - depth )"		3601093	0					
ANR	3601249	Callee	printf		3601093	0					
ANR	3601250	Identifier	printf		3601093	0					
ANR	3601251	ArgumentList	"""Process %d is the #%d child of %d at depth %d\\n"""		3601093	1					
ANR	3601252	Argument	"""Process %d is the #%d child of %d at depth %d\\n"""		3601093	0					
ANR	3601253	PrimaryExpression	"""Process %d is the #%d child of %d at depth %d\\n"""		3601093	0					
ANR	3601254	Argument	getpid ( )		3601093	1					
ANR	3601255	CallExpression	getpid ( )		3601093	0					
ANR	3601256	Callee	getpid		3601093	0					
ANR	3601257	Identifier	getpid		3601093	0					
ANR	3601258	ArgumentList			3601093	1					
ANR	3601259	Argument	i		3601093	2					
ANR	3601260	Identifier	i		3601093	0					
ANR	3601261	Argument	getppid ( )		3601093	3					
ANR	3601262	CallExpression	getppid ( )		3601093	0					
ANR	3601263	Callee	getppid		3601093	0					
ANR	3601264	Identifier	getppid		3601093	0					
ANR	3601265	ArgumentList			3601093	1					
ANR	3601266	Argument	TOTAL_DEPTH - depth		3601093	4					
ANR	3601267	AdditiveExpression	TOTAL_DEPTH - depth		3601093	0		-			
ANR	3601268	Identifier	TOTAL_DEPTH		3601093	0					
ANR	3601269	Identifier	depth		3601093	1					
ANR	3601270	IdentifierDeclStatement	"PID_ENTRY * child_arr = recursive_fork ( depth - 1 , breadth + TREE_BREADTH_CHANGE , verbose ) ;"	108:6:3140:3228	3601093	1	True				
ANR	3601271	IdentifierDecl	"* child_arr = recursive_fork ( depth - 1 , breadth + TREE_BREADTH_CHANGE , verbose )"		3601093	0					
ANR	3601272	IdentifierDeclType	PID_ENTRY *		3601093	0					
ANR	3601273	Identifier	child_arr		3601093	1					
ANR	3601274	AssignmentExpression	"* child_arr = recursive_fork ( depth - 1 , breadth + TREE_BREADTH_CHANGE , verbose )"		3601093	2		=			
ANR	3601275	Identifier	child_arr		3601093	0					
ANR	3601276	CallExpression	"recursive_fork ( depth - 1 , breadth + TREE_BREADTH_CHANGE , verbose )"		3601093	1					
ANR	3601277	Callee	recursive_fork		3601093	0					
ANR	3601278	Identifier	recursive_fork		3601093	0					
ANR	3601279	ArgumentList	depth - 1		3601093	1					
ANR	3601280	Argument	depth - 1		3601093	0					
ANR	3601281	AdditiveExpression	depth - 1		3601093	0		-			
ANR	3601282	Identifier	depth		3601093	0					
ANR	3601283	PrimaryExpression	1		3601093	1					
ANR	3601284	Argument	breadth + TREE_BREADTH_CHANGE		3601093	1					
ANR	3601285	AdditiveExpression	breadth + TREE_BREADTH_CHANGE		3601093	0		+			
ANR	3601286	Identifier	breadth		3601093	0					
ANR	3601287	Identifier	TREE_BREADTH_CHANGE		3601093	1					
ANR	3601288	Argument	verbose		3601093	2					
ANR	3601289	Identifier	verbose		3601093	0					
ANR	3601290	ExpressionStatement	"do_work ( MEMFACTOR * 1024 , verbose )"	113:6:3405:3437	3601093	2	True				
ANR	3601291	CallExpression	"do_work ( MEMFACTOR * 1024 , verbose )"		3601093	0					
ANR	3601292	Callee	do_work		3601093	0					
ANR	3601293	Identifier	do_work		3601093	0					
ANR	3601294	ArgumentList	MEMFACTOR * 1024		3601093	1					
ANR	3601295	Argument	MEMFACTOR * 1024		3601093	0					
ANR	3601296	MultiplicativeExpression	MEMFACTOR * 1024		3601093	0		*			
ANR	3601297	Identifier	MEMFACTOR		3601093	0					
ANR	3601298	PrimaryExpression	1024		3601093	1					
ANR	3601299	Argument	verbose		3601093	1					
ANR	3601300	Identifier	verbose		3601093	0					
ANR	3601301	IdentifierDeclStatement	"int num_nodes = get_num_nodes ( depth , breadth ) ;"	116:6:3516:3562	3601093	3	True				
ANR	3601302	IdentifierDecl	"num_nodes = get_num_nodes ( depth , breadth )"		3601093	0					
ANR	3601303	IdentifierDeclType	int		3601093	0					
ANR	3601304	Identifier	num_nodes		3601093	1					
ANR	3601305	AssignmentExpression	"num_nodes = get_num_nodes ( depth , breadth )"		3601093	2		=			
ANR	3601306	Identifier	num_nodes		3601093	0					
ANR	3601307	CallExpression	"get_num_nodes ( depth , breadth )"		3601093	1					
ANR	3601308	Callee	get_num_nodes		3601093	0					
ANR	3601309	Identifier	get_num_nodes		3601093	0					
ANR	3601310	ArgumentList	depth		3601093	1					
ANR	3601311	Argument	depth		3601093	0					
ANR	3601312	Identifier	depth		3601093	0					
ANR	3601313	Argument	breadth		3601093	1					
ANR	3601314	Identifier	breadth		3601093	0					
ANR	3601315	ExpressionStatement	child_arr [ 0 ] . pid = getpid ( )	117:6:3570:3597	3601093	4	True				
ANR	3601316	AssignmentExpression	child_arr [ 0 ] . pid = getpid ( )		3601093	0		=			
ANR	3601317	MemberAccess	child_arr [ 0 ] . pid		3601093	0					
ANR	3601318	ArrayIndexing	child_arr [ 0 ]		3601093	0					
ANR	3601319	Identifier	child_arr		3601093	0					
ANR	3601320	PrimaryExpression	0		3601093	1					
ANR	3601321	Identifier	pid		3601093	1					
ANR	3601322	CallExpression	getpid ( )		3601093	1					
ANR	3601323	Callee	getpid		3601093	0					
ANR	3601324	Identifier	getpid		3601093	0					
ANR	3601325	ArgumentList			3601093	1					
ANR	3601326	ExpressionStatement	child_arr [ 0 ] . ppid = getppid ( )	118:6:3605:3634	3601093	5	True				
ANR	3601327	AssignmentExpression	child_arr [ 0 ] . ppid = getppid ( )		3601093	0		=			
ANR	3601328	MemberAccess	child_arr [ 0 ] . ppid		3601093	0					
ANR	3601329	ArrayIndexing	child_arr [ 0 ]		3601093	0					
ANR	3601330	Identifier	child_arr		3601093	0					
ANR	3601331	PrimaryExpression	0		3601093	1					
ANR	3601332	Identifier	ppid		3601093	1					
ANR	3601333	CallExpression	getppid ( )		3601093	1					
ANR	3601334	Callee	getppid		3601093	0					
ANR	3601335	Identifier	getppid		3601093	0					
ANR	3601336	ArgumentList			3601093	1					
ANR	3601337	ExpressionStatement	child_arr [ 0 ] . depth = TOTAL_DEPTH - depth	119:6:3642:3682	3601093	6	True				
ANR	3601338	AssignmentExpression	child_arr [ 0 ] . depth = TOTAL_DEPTH - depth		3601093	0		=			
ANR	3601339	MemberAccess	child_arr [ 0 ] . depth		3601093	0					
ANR	3601340	ArrayIndexing	child_arr [ 0 ]		3601093	0					
ANR	3601341	Identifier	child_arr		3601093	0					
ANR	3601342	PrimaryExpression	0		3601093	1					
ANR	3601343	Identifier	depth		3601093	1					
ANR	3601344	AdditiveExpression	TOTAL_DEPTH - depth		3601093	1		-			
ANR	3601345	Identifier	TOTAL_DEPTH		3601093	0					
ANR	3601346	Identifier	depth		3601093	1					
ANR	3601347	ExpressionStatement	child_arr [ 0 ] . subtree_depth = depth	120:6:3690:3724	3601093	7	True				
ANR	3601348	AssignmentExpression	child_arr [ 0 ] . subtree_depth = depth		3601093	0		=			
ANR	3601349	MemberAccess	child_arr [ 0 ] . subtree_depth		3601093	0					
ANR	3601350	ArrayIndexing	child_arr [ 0 ]		3601093	0					
ANR	3601351	Identifier	child_arr		3601093	0					
ANR	3601352	PrimaryExpression	0		3601093	1					
ANR	3601353	Identifier	subtree_depth		3601093	1					
ANR	3601354	Identifier	depth		3601093	1					
ANR	3601355	ExpressionStatement	child_arr [ 0 ] . breadth = i	121:6:3732:3756	3601093	8	True				
ANR	3601356	AssignmentExpression	child_arr [ 0 ] . breadth = i		3601093	0		=			
ANR	3601357	MemberAccess	child_arr [ 0 ] . breadth		3601093	0					
ANR	3601358	ArrayIndexing	child_arr [ 0 ]		3601093	0					
ANR	3601359	Identifier	child_arr		3601093	0					
ANR	3601360	PrimaryExpression	0		3601093	1					
ANR	3601361	Identifier	breadth		3601093	1					
ANR	3601362	Identifier	i		3601093	1					
ANR	3601363	ExpressionStatement	close ( fds [ i ] [ 0 ] )	124:6:3803:3819	3601093	9	True				
ANR	3601364	CallExpression	close ( fds [ i ] [ 0 ] )		3601093	0					
ANR	3601365	Callee	close		3601093	0					
ANR	3601366	Identifier	close		3601093	0					
ANR	3601367	ArgumentList	fds [ i ] [ 0 ]		3601093	1					
ANR	3601368	Argument	fds [ i ] [ 0 ]		3601093	0					
ANR	3601369	ArrayIndexing	fds [ i ] [ 0 ]		3601093	0					
ANR	3601370	ArrayIndexing	fds [ i ]		3601093	0					
ANR	3601371	Identifier	fds		3601093	0					
ANR	3601372	Identifier	i		3601093	1					
ANR	3601373	PrimaryExpression	0		3601093	1					
ANR	3601374	ExpressionStatement	"write ( fds [ i ] [ 1 ] , child_arr , num_nodes * sizeof ( PID_ENTRY ) )"	125:6:3827:3885	3601093	10	True				
ANR	3601375	CallExpression	"write ( fds [ i ] [ 1 ] , child_arr , num_nodes * sizeof ( PID_ENTRY ) )"		3601093	0					
ANR	3601376	Callee	write		3601093	0					
ANR	3601377	Identifier	write		3601093	0					
ANR	3601378	ArgumentList	fds [ i ] [ 1 ]		3601093	1					
ANR	3601379	Argument	fds [ i ] [ 1 ]		3601093	0					
ANR	3601380	ArrayIndexing	fds [ i ] [ 1 ]		3601093	0					
ANR	3601381	ArrayIndexing	fds [ i ]		3601093	0					
ANR	3601382	Identifier	fds		3601093	0					
ANR	3601383	Identifier	i		3601093	1					
ANR	3601384	PrimaryExpression	1		3601093	1					
ANR	3601385	Argument	child_arr		3601093	1					
ANR	3601386	Identifier	child_arr		3601093	0					
ANR	3601387	Argument	num_nodes * sizeof ( PID_ENTRY )		3601093	2					
ANR	3601388	MultiplicativeExpression	num_nodes * sizeof ( PID_ENTRY )		3601093	0		*			
ANR	3601389	Identifier	num_nodes		3601093	0					
ANR	3601390	SizeofExpression	sizeof ( PID_ENTRY )		3601093	1					
ANR	3601391	Sizeof	sizeof		3601093	0					
ANR	3601392	SizeofOperand	PID_ENTRY		3601093	1					
ANR	3601393	Statement	delete	126:6:3893:3898	3601093	11	True				
ANR	3601394	Statement	[	126:12:3899:3899	3601093	12	True				
ANR	3601395	Statement	]	126:13:3900:3900	3601093	13	True				
ANR	3601396	ExpressionStatement	child_arr	126:15:3902:3911	3601093	14	True				
ANR	3601397	Identifier	child_arr		3601093	0					
ANR	3601398	ExpressionStatement	"kill ( getpid ( ) , SIGSTOP )"	130:6:3980:4003	3601093	15	True				
ANR	3601399	CallExpression	"kill ( getpid ( ) , SIGSTOP )"		3601093	0					
ANR	3601400	Callee	kill		3601093	0					
ANR	3601401	Identifier	kill		3601093	0					
ANR	3601402	ArgumentList	getpid ( )		3601093	1					
ANR	3601403	Argument	getpid ( )		3601093	0					
ANR	3601404	CallExpression	getpid ( )		3601093	0					
ANR	3601405	Callee	getpid		3601093	0					
ANR	3601406	Identifier	getpid		3601093	0					
ANR	3601407	ArgumentList			3601093	1					
ANR	3601408	Argument	SIGSTOP		3601093	1					
ANR	3601409	Identifier	SIGSTOP		3601093	0					
ANR	3601410	WhileStatement	while ( wait ( 0 ) != - 1 )		3601093	16					
ANR	3601411	Condition	wait ( 0 ) != - 1	132:12:4072:4084	3601093	0	True				
ANR	3601412	EqualityExpression	wait ( 0 ) != - 1		3601093	0		!=			
ANR	3601413	CallExpression	wait ( 0 )		3601093	0					
ANR	3601414	Callee	wait		3601093	0					
ANR	3601415	Identifier	wait		3601093	0					
ANR	3601416	ArgumentList	0		3601093	1					
ANR	3601417	Argument	0		3601093	0					
ANR	3601418	PrimaryExpression	0		3601093	0					
ANR	3601419	UnaryOperationExpression	- 1		3601093	1					
ANR	3601420	UnaryOperator	-		3601093	0					
ANR	3601421	PrimaryExpression	1		3601093	1					
ANR	3601422	ExpressionStatement		133:1:4088:4088	3601093	1	True				
ANR	3601423	IfStatement	if ( verbose )		3601093	17					
ANR	3601424	Condition	verbose	134:9:4099:4105	3601093	0	True				
ANR	3601425	Identifier	verbose		3601093	0					
ANR	3601426	CompoundStatement		66:17:1902:1902	3601093	1					
ANR	3601427	ExpressionStatement	"printf ( ""exiting process %d\\n"" , getpid ( ) )"	135:1:4110:4150	3601093	0	True				
ANR	3601428	CallExpression	"printf ( ""exiting process %d\\n"" , getpid ( ) )"		3601093	0					
ANR	3601429	Callee	printf		3601093	0					
ANR	3601430	Identifier	printf		3601093	0					
ANR	3601431	ArgumentList	"""exiting process %d\\n"""		3601093	1					
ANR	3601432	Argument	"""exiting process %d\\n"""		3601093	0					
ANR	3601433	PrimaryExpression	"""exiting process %d\\n"""		3601093	0					
ANR	3601434	Argument	getpid ( )		3601093	1					
ANR	3601435	CallExpression	getpid ( )		3601093	0					
ANR	3601436	Callee	getpid		3601093	0					
ANR	3601437	Identifier	getpid		3601093	0					
ANR	3601438	ArgumentList			3601093	1					
ANR	3601439	ExpressionStatement	exit ( 0 )	137:6:4166:4173	3601093	18	True				
ANR	3601440	CallExpression	exit ( 0 )		3601093	0					
ANR	3601441	Callee	exit		3601093	0					
ANR	3601442	Identifier	exit		3601093	0					
ANR	3601443	ArgumentList	0		3601093	1					
ANR	3601444	Argument	0		3601093	0					
ANR	3601445	PrimaryExpression	0		3601093	0					
ANR	3601446	IfStatement	if ( child == - 1 )		3601093	3					
ANR	3601447	Condition	child == - 1	140:7:4204:4214	3601093	0	True				
ANR	3601448	EqualityExpression	child == - 1		3601093	0		==			
ANR	3601449	Identifier	child		3601093	0					
ANR	3601450	UnaryOperationExpression	- 1		3601093	1					
ANR	3601451	UnaryOperator	-		3601093	0					
ANR	3601452	PrimaryExpression	1		3601093	1					
ANR	3601453	CompoundStatement		72:19:2011:2011	3601093	1					
ANR	3601454	ExpressionStatement	"perror ( ""Error forking child"" )"	141:6:4224:4253	3601093	0	True				
ANR	3601455	CallExpression	"perror ( ""Error forking child"" )"		3601093	0					
ANR	3601456	Callee	perror		3601093	0					
ANR	3601457	Identifier	perror		3601093	0					
ANR	3601458	ArgumentList	"""Error forking child"""		3601093	1					
ANR	3601459	Argument	"""Error forking child"""		3601093	0					
ANR	3601460	PrimaryExpression	"""Error forking child"""		3601093	0					
ANR	3601461	IfStatement	if ( errno == EAGAIN )		3601093	1					
ANR	3601462	Condition	errno == EAGAIN	143:9:4290:4304	3601093	0	True				
ANR	3601463	EqualityExpression	errno == EAGAIN		3601093	0		==			
ANR	3601464	Identifier	errno		3601093	0					
ANR	3601465	Identifier	EAGAIN		3601093	1					
ANR	3601466	CompoundStatement		75:25:2101:2101	3601093	1					
ANR	3601467	ExpressionStatement	"printf ( ""EAGAIN\\n"" )"	144:1:4309:4327	3601093	0	True				
ANR	3601468	CallExpression	"printf ( ""EAGAIN\\n"" )"		3601093	0					
ANR	3601469	Callee	printf		3601093	0					
ANR	3601470	Identifier	printf		3601093	0					
ANR	3601471	ArgumentList	"""EAGAIN\\n"""		3601093	1					
ANR	3601472	Argument	"""EAGAIN\\n"""		3601093	0					
ANR	3601473	PrimaryExpression	"""EAGAIN\\n"""		3601093	0					
ANR	3601474	ElseStatement	else		3601093	0					
ANR	3601475	IfStatement	if ( errno == ENOMEM )		3601093	0					
ANR	3601476	Condition	errno == ENOMEM	146:14:4351:4365	3601093	0	True				
ANR	3601477	EqualityExpression	errno == ENOMEM		3601093	0		==			
ANR	3601478	Identifier	errno		3601093	0					
ANR	3601479	Identifier	ENOMEM		3601093	1					
ANR	3601480	CompoundStatement		78:30:2162:2162	3601093	1					
ANR	3601481	ExpressionStatement	"printf ( ""ENOMEM\\n"" )"	147:1:4370:4388	3601093	0	True				
ANR	3601482	CallExpression	"printf ( ""ENOMEM\\n"" )"		3601093	0					
ANR	3601483	Callee	printf		3601093	0					
ANR	3601484	Identifier	printf		3601093	0					
ANR	3601485	ArgumentList	"""ENOMEM\\n"""		3601093	1					
ANR	3601486	Argument	"""ENOMEM\\n"""		3601093	0					
ANR	3601487	PrimaryExpression	"""ENOMEM\\n"""		3601093	0					
ANR	3601488	IdentifierDeclStatement	PID_ENTRY p ;	155:2:4492:4503	3601093	14	True				
ANR	3601489	IdentifierDecl	p		3601093	0					
ANR	3601490	IdentifierDeclType	PID_ENTRY		3601093	0					
ANR	3601491	Identifier	p		3601093	1					
ANR	3601492	ExpressionStatement	p . pid = getpid ( )	156:2:4507:4523	3601093	15	True				
ANR	3601493	AssignmentExpression	p . pid = getpid ( )		3601093	0		=			
ANR	3601494	MemberAccess	p . pid		3601093	0					
ANR	3601495	Identifier	p		3601093	0					
ANR	3601496	Identifier	pid		3601093	1					
ANR	3601497	CallExpression	getpid ( )		3601093	1					
ANR	3601498	Callee	getpid		3601093	0					
ANR	3601499	Identifier	getpid		3601093	0					
ANR	3601500	ArgumentList			3601093	1					
ANR	3601501	ExpressionStatement	p . ppid = getppid ( )	157:2:4527:4545	3601093	16	True				
ANR	3601502	AssignmentExpression	p . ppid = getppid ( )		3601093	0		=			
ANR	3601503	MemberAccess	p . ppid		3601093	0					
ANR	3601504	Identifier	p		3601093	0					
ANR	3601505	Identifier	ppid		3601093	1					
ANR	3601506	CallExpression	getppid ( )		3601093	1					
ANR	3601507	Callee	getppid		3601093	0					
ANR	3601508	Identifier	getppid		3601093	0					
ANR	3601509	ArgumentList			3601093	1					
ANR	3601510	ExpressionStatement	pid_arr [ 0 ] = p	160:2:4555:4569	3601093	17	True				
ANR	3601511	AssignmentExpression	pid_arr [ 0 ] = p		3601093	0		=			
ANR	3601512	ArrayIndexing	pid_arr [ 0 ]		3601093	0					
ANR	3601513	Identifier	pid_arr		3601093	0					
ANR	3601514	PrimaryExpression	0		3601093	1					
ANR	3601515	Identifier	p		3601093	1					
ANR	3601516	ForStatement	for ( int i = 0 ; i < breadth ; i ++ )		3601093	18					
ANR	3601517	ForInit	int i = 0 ;	163:7:4645:4654	3601093	0	True				
ANR	3601518	IdentifierDeclStatement	int i = 0 ;		3601093	0					
ANR	3601519	IdentifierDecl	i = 0		3601093	0					
ANR	3601520	IdentifierDeclType	int		3601093	0					
ANR	3601521	Identifier	i		3601093	1					
ANR	3601522	AssignmentExpression	i = 0		3601093	2		=			
ANR	3601523	Identifier	i		3601093	0					
ANR	3601524	PrimaryExpression	0		3601093	1					
ANR	3601525	Condition	i < breadth	163:18:4656:4666	3601093	1	True				
ANR	3601526	RelationalExpression	i < breadth		3601093	0		<			
ANR	3601527	Identifier	i		3601093	0					
ANR	3601528	Identifier	breadth		3601093	1					
ANR	3601529	PostIncDecOperationExpression	i ++	163:31:4669:4671	3601093	2	True				
ANR	3601530	Identifier	i		3601093	0					
ANR	3601531	IncDec	++		3601093	1					
ANR	3601532	CompoundStatement		104:4:2763:2772	3601093	3					
ANR	3601533	IdentifierDeclStatement	"int num_nodes = ( get_num_nodes ( depth + 1 , breadth ) - 1 ) / breadth ;"	165:4:4735:4799	3601093	0	True				
ANR	3601534	IdentifierDecl	"num_nodes = ( get_num_nodes ( depth + 1 , breadth ) - 1 ) / breadth"		3601093	0					
ANR	3601535	IdentifierDeclType	int		3601093	0					
ANR	3601536	Identifier	num_nodes		3601093	1					
ANR	3601537	AssignmentExpression	"num_nodes = ( get_num_nodes ( depth + 1 , breadth ) - 1 ) / breadth"		3601093	2		=			
ANR	3601538	Identifier	num_nodes		3601093	0					
ANR	3601539	MultiplicativeExpression	"( get_num_nodes ( depth + 1 , breadth ) - 1 ) / breadth"		3601093	1		/			
ANR	3601540	AdditiveExpression	"get_num_nodes ( depth + 1 , breadth ) - 1"		3601093	0		-			
ANR	3601541	CallExpression	"get_num_nodes ( depth + 1 , breadth )"		3601093	0					
ANR	3601542	Callee	get_num_nodes		3601093	0					
ANR	3601543	Identifier	get_num_nodes		3601093	0					
ANR	3601544	ArgumentList	depth + 1		3601093	1					
ANR	3601545	Argument	depth + 1		3601093	0					
ANR	3601546	AdditiveExpression	depth + 1		3601093	0		+			
ANR	3601547	Identifier	depth		3601093	0					
ANR	3601548	PrimaryExpression	1		3601093	1					
ANR	3601549	Argument	breadth		3601093	1					
ANR	3601550	Identifier	breadth		3601093	0					
ANR	3601551	PrimaryExpression	1		3601093	1					
ANR	3601552	Identifier	breadth		3601093	1					
ANR	3601553	IdentifierDeclStatement	PID_ENTRY temp_arr [ num_nodes ] ;	167:4:4810:4840	3601093	1	True				
ANR	3601554	IdentifierDecl	temp_arr [ num_nodes ]		3601093	0					
ANR	3601555	IdentifierDeclType	PID_ENTRY [ num_nodes ]		3601093	0					
ANR	3601556	Identifier	temp_arr		3601093	1					
ANR	3601557	Identifier	num_nodes		3601093	2					
ANR	3601558	ExpressionStatement	close ( fds [ i ] [ 1 ] )	168:4:4846:4862	3601093	2	True				
ANR	3601559	CallExpression	close ( fds [ i ] [ 1 ] )		3601093	0					
ANR	3601560	Callee	close		3601093	0					
ANR	3601561	Identifier	close		3601093	0					
ANR	3601562	ArgumentList	fds [ i ] [ 1 ]		3601093	1					
ANR	3601563	Argument	fds [ i ] [ 1 ]		3601093	0					
ANR	3601564	ArrayIndexing	fds [ i ] [ 1 ]		3601093	0					
ANR	3601565	ArrayIndexing	fds [ i ]		3601093	0					
ANR	3601566	Identifier	fds		3601093	0					
ANR	3601567	Identifier	i		3601093	1					
ANR	3601568	PrimaryExpression	1		3601093	1					
ANR	3601569	ExpressionStatement	"read ( fds [ i ] [ 0 ] , temp_arr , num_nodes * sizeof ( PID_ENTRY ) )"	169:4:4868:4924	3601093	3	True				
ANR	3601570	CallExpression	"read ( fds [ i ] [ 0 ] , temp_arr , num_nodes * sizeof ( PID_ENTRY ) )"		3601093	0					
ANR	3601571	Callee	read		3601093	0					
ANR	3601572	Identifier	read		3601093	0					
ANR	3601573	ArgumentList	fds [ i ] [ 0 ]		3601093	1					
ANR	3601574	Argument	fds [ i ] [ 0 ]		3601093	0					
ANR	3601575	ArrayIndexing	fds [ i ] [ 0 ]		3601093	0					
ANR	3601576	ArrayIndexing	fds [ i ]		3601093	0					
ANR	3601577	Identifier	fds		3601093	0					
ANR	3601578	Identifier	i		3601093	1					
ANR	3601579	PrimaryExpression	0		3601093	1					
ANR	3601580	Argument	temp_arr		3601093	1					
ANR	3601581	Identifier	temp_arr		3601093	0					
ANR	3601582	Argument	num_nodes * sizeof ( PID_ENTRY )		3601093	2					
ANR	3601583	MultiplicativeExpression	num_nodes * sizeof ( PID_ENTRY )		3601093	0		*			
ANR	3601584	Identifier	num_nodes		3601093	0					
ANR	3601585	SizeofExpression	sizeof ( PID_ENTRY )		3601093	1					
ANR	3601586	Sizeof	sizeof		3601093	0					
ANR	3601587	SizeofOperand	PID_ENTRY		3601093	1					
ANR	3601588	IdentifierDeclStatement	int start = 1 + i * num_nodes ;	171:4:4935:4962	3601093	4	True				
ANR	3601589	IdentifierDecl	start = 1 + i * num_nodes		3601093	0					
ANR	3601590	IdentifierDeclType	int		3601093	0					
ANR	3601591	Identifier	start		3601093	1					
ANR	3601592	AssignmentExpression	start = 1 + i * num_nodes		3601093	2		=			
ANR	3601593	Identifier	start		3601093	0					
ANR	3601594	AdditiveExpression	1 + i * num_nodes		3601093	1		+			
ANR	3601595	PrimaryExpression	1		3601093	0					
ANR	3601596	MultiplicativeExpression	i * num_nodes		3601093	1		*			
ANR	3601597	Identifier	i		3601093	0					
ANR	3601598	Identifier	num_nodes		3601093	1					
ANR	3601599	IdentifierDeclStatement	int k = 0 ;	172:4:4968:4977	3601093	5	True				
ANR	3601600	IdentifierDecl	k = 0		3601093	0					
ANR	3601601	IdentifierDeclType	int		3601093	0					
ANR	3601602	Identifier	k		3601093	1					
ANR	3601603	AssignmentExpression	k = 0		3601093	2		=			
ANR	3601604	Identifier	k		3601093	0					
ANR	3601605	PrimaryExpression	0		3601093	1					
ANR	3601606	ForStatement	for ( int j = start ; j < start + num_nodes ; j ++ )		3601093	6					
ANR	3601607	ForInit	int j = start ;	175:8:5022:5035	3601093	0	True				
ANR	3601608	IdentifierDeclStatement	int j = start ;		3601093	0					
ANR	3601609	IdentifierDecl	j = start		3601093	0					
ANR	3601610	IdentifierDeclType	int		3601093	0					
ANR	3601611	Identifier	j		3601093	1					
ANR	3601612	AssignmentExpression	j = start		3601093	2		=			
ANR	3601613	Identifier	start		3601093	0					
ANR	3601614	Identifier	start		3601093	1					
ANR	3601615	Condition	j < start + num_nodes	175:23:5037:5057	3601093	1	True				
ANR	3601616	RelationalExpression	j < start + num_nodes		3601093	0		<			
ANR	3601617	Identifier	j		3601093	0					
ANR	3601618	AdditiveExpression	start + num_nodes		3601093	1		+			
ANR	3601619	Identifier	start		3601093	0					
ANR	3601620	Identifier	num_nodes		3601093	1					
ANR	3601621	PostIncDecOperationExpression	j ++	175:46:5060:5062	3601093	2	True				
ANR	3601622	Identifier	j		3601093	0					
ANR	3601623	IncDec	++		3601093	1					
ANR	3601624	CompoundStatement		107:50:2859:2859	3601093	3					
ANR	3601625	ExpressionStatement	pid_arr [ j ] = temp_arr [ k ]	176:6:5072:5096	3601093	0	True				
ANR	3601626	AssignmentExpression	pid_arr [ j ] = temp_arr [ k ]		3601093	0		=			
ANR	3601627	ArrayIndexing	pid_arr [ j ]		3601093	0					
ANR	3601628	Identifier	pid_arr		3601093	0					
ANR	3601629	Identifier	j		3601093	1					
ANR	3601630	ArrayIndexing	temp_arr [ k ]		3601093	1					
ANR	3601631	Identifier	temp_arr		3601093	0					
ANR	3601632	Identifier	k		3601093	1					
ANR	3601633	ExpressionStatement	k ++	177:6:5104:5107	3601093	1	True				
ANR	3601634	PostIncDecOperationExpression	k ++		3601093	0					
ANR	3601635	Identifier	k		3601093	0					
ANR	3601636	IncDec	++		3601093	1					
ANR	3601637	ReturnStatement	return pid_arr ;	182:2:5130:5144	3601093	19	True				
ANR	3601638	Identifier	pid_arr		3601093	0					
ANR	3601639	ReturnType	PID_ENTRY *		3601093	1					
ANR	3601640	Identifier	recursive_fork		3601093	2					
ANR	3601641	ParameterList	"int depth , int breadth , bool verbose"		3601093	3					
ANR	3601642	Parameter	int depth	69:26:2167:2175	3601093	0	True				
ANR	3601643	ParameterType	int		3601093	0					
ANR	3601644	Identifier	depth		3601093	1					
ANR	3601645	Parameter	int breadth	69:37:2178:2188	3601093	1	True				
ANR	3601646	ParameterType	int		3601093	0					
ANR	3601647	Identifier	breadth		3601093	1					
ANR	3601648	Parameter	bool verbose	69:50:2191:2202	3601093	2	True				
ANR	3601649	ParameterType	bool		3601093	0					
ANR	3601650	Identifier	verbose		3601093	1					
ANR	3601651	CFGEntryNode	ENTRY		3601093		True				
ANR	3601652	CFGExitNode	EXIT		3601093		True				
ANR	3601653	Symbol	ENOMEM		3601093						
ANR	3601654	Symbol	breadth		3601093						
ANR	3601655	Symbol	p . pid		3601093						
ANR	3601656	Symbol	child_arr [ 0 ] . depth		3601093						
ANR	3601657	Symbol	num_nodes		3601093						
ANR	3601658	Symbol	arr [ 0 ] . ppid		3601093						
ANR	3601659	Symbol	arr [ 0 ] . depth		3601093						
ANR	3601660	Symbol	* fds		3601093						
ANR	3601661	Symbol	TREE_BREADTH_CHANGE		3601093						
ANR	3601662	Symbol	* * i		3601093						
ANR	3601663	Symbol	errno		3601093						
ANR	3601664	Symbol	child_arr [ 0 ] . pid		3601093						
ANR	3601665	Symbol	* arr		3601093						
ANR	3601666	Symbol	child_arr [ 0 ] . subtree_depth		3601093						
ANR	3601667	Symbol	pid_arr		3601093						
ANR	3601668	Symbol	child_arr [ 0 ] . ppid		3601093						
ANR	3601669	Symbol	p . ppid		3601093						
ANR	3601670	Symbol	child		3601093						
ANR	3601671	Symbol	child_arr [ 0 ] . breadth		3601093						
ANR	3601672	Symbol	wait		3601093						
ANR	3601673	Symbol	temp_arr		3601093						
ANR	3601674	Symbol	arr [ 0 ] . breadth		3601093						
ANR	3601675	Symbol	* pid_arr		3601093						
ANR	3601676	Symbol	* child_arr		3601093						
ANR	3601677	Symbol	* * fds		3601093						
ANR	3601678	Symbol	arr [ 0 ] . pid		3601093						
ANR	3601679	Symbol	arr		3601093						
ANR	3601680	Symbol	TOTAL_DEPTH		3601093						
ANR	3601681	Symbol	getppid		3601093						
ANR	3601682	Symbol	* temp_arr		3601093						
ANR	3601683	Symbol	child_arr		3601093						
ANR	3601684	Symbol	EAGAIN		3601093						
ANR	3601685	Symbol	start		3601093						
ANR	3601686	Symbol	i		3601093						
ANR	3601687	Symbol	get_num_nodes		3601093						
ANR	3601688	Symbol	MEMFACTOR		3601093						
ANR	3601689	Symbol	j		3601093						
ANR	3601690	Symbol	k		3601093						
ANR	3601691	Symbol	verbose		3601093						
ANR	3601692	Symbol	recursive_fork		3601093						
ANR	3601693	Symbol	p		3601093						
ANR	3601694	Symbol	fork		3601093						
ANR	3601695	Symbol	depth		3601093						
ANR	3601696	Symbol	* i		3601093						
ANR	3601697	Symbol	fds		3601093						
ANR	3601698	Symbol	* j		3601093						
ANR	3601699	Symbol	SIGSTOP		3601093						
ANR	3601700	Symbol	* k		3601093						
ANR	3601701	Symbol	getpid		3601093						
ANR	3601702	Function	fork_tree	202:0:5506:6887							
ANR	3601703	FunctionDef	"fork_tree (int depth , int breadth , int tree_breadth_change , bool verbose)"		3601702	0					
ANR	3601704	CompoundStatement		202:83:5589:6887	3601702	0					
ANR	3601705	ExpressionStatement	TREE_BREADTH_CHANGE = tree_breadth_change	203:2:5593:5634	3601702	0	True				
ANR	3601706	AssignmentExpression	TREE_BREADTH_CHANGE = tree_breadth_change		3601702	0		=			
ANR	3601707	Identifier	TREE_BREADTH_CHANGE		3601702	0					
ANR	3601708	Identifier	tree_breadth_change		3601702	1					
ANR	3601709	ExpressionStatement	TOTAL_DEPTH = depth	204:2:5638:5657	3601702	1	True				
ANR	3601710	AssignmentExpression	TOTAL_DEPTH = depth		3601702	0		=			
ANR	3601711	Identifier	TOTAL_DEPTH		3601702	0					
ANR	3601712	Identifier	depth		3601702	1					
ANR	3601713	IdentifierDeclStatement	int fds [ 2 ] ;	206:2:5662:5672	3601702	2	True				
ANR	3601714	IdentifierDecl	fds [ 2 ]		3601702	0					
ANR	3601715	IdentifierDeclType	int [ 2 ]		3601702	0					
ANR	3601716	Identifier	fds		3601702	1					
ANR	3601717	PrimaryExpression	2		3601702	2					
ANR	3601718	ExpressionStatement	pipe ( fds )	208:2:5677:5686	3601702	3	True				
ANR	3601719	CallExpression	pipe ( fds )		3601702	0					
ANR	3601720	Callee	pipe		3601702	0					
ANR	3601721	Identifier	pipe		3601702	0					
ANR	3601722	ArgumentList	fds		3601702	1					
ANR	3601723	Argument	fds		3601702	0					
ANR	3601724	Identifier	fds		3601702	0					
ANR	3601725	IdentifierDeclStatement	pid_t child = fork ( ) ;	209:2:5690:5710	3601702	4	True				
ANR	3601726	IdentifierDecl	child = fork ( )		3601702	0					
ANR	3601727	IdentifierDeclType	pid_t		3601702	0					
ANR	3601728	Identifier	child		3601702	1					
ANR	3601729	AssignmentExpression	child = fork ( )		3601702	2		=			
ANR	3601730	Identifier	child		3601702	0					
ANR	3601731	CallExpression	fork ( )		3601702	1					
ANR	3601732	Callee	fork		3601702	0					
ANR	3601733	Identifier	fork		3601702	0					
ANR	3601734	ArgumentList			3601702	1					
ANR	3601735	IfStatement	if ( child == 0 )		3601702	5					
ANR	3601736	Condition	child == 0	210:5:5717:5726	3601702	0	True				
ANR	3601737	EqualityExpression	child == 0		3601702	0		==			
ANR	3601738	Identifier	child		3601702	0					
ANR	3601739	PrimaryExpression	0		3601702	1					
ANR	3601740	CompoundStatement		15:4:298:356	3601702	1					
ANR	3601741	IfStatement	if ( verbose )		3601702	0					
ANR	3601742	Condition	verbose	211:7:5747:5753	3601702	0	True				
ANR	3601743	Identifier	verbose		3601702	0					
ANR	3601744	CompoundStatement		10:15:165:165	3601702	1					
ANR	3601745	ExpressionStatement	"printf ( ""Process %d is the head node at depth 0\\n"" , getpid ( ) )"	212:6:5763:5823	3601702	0	True				
ANR	3601746	CallExpression	"printf ( ""Process %d is the head node at depth 0\\n"" , getpid ( ) )"		3601702	0					
ANR	3601747	Callee	printf		3601702	0					
ANR	3601748	Identifier	printf		3601702	0					
ANR	3601749	ArgumentList	"""Process %d is the head node at depth 0\\n"""		3601702	1					
ANR	3601750	Argument	"""Process %d is the head node at depth 0\\n"""		3601702	0					
ANR	3601751	PrimaryExpression	"""Process %d is the head node at depth 0\\n"""		3601702	0					
ANR	3601752	Argument	getpid ( )		3601702	1					
ANR	3601753	CallExpression	getpid ( )		3601702	0					
ANR	3601754	Callee	getpid		3601702	0					
ANR	3601755	Identifier	getpid		3601702	0					
ANR	3601756	ArgumentList			3601702	1					
ANR	3601757	IdentifierDeclStatement	"int num_nodes = get_num_nodes ( depth , breadth ) ;"	215:4:5836:5881	3601702	1	True				
ANR	3601758	IdentifierDecl	"num_nodes = get_num_nodes ( depth , breadth )"		3601702	0					
ANR	3601759	IdentifierDeclType	int		3601702	0					
ANR	3601760	Identifier	num_nodes		3601702	1					
ANR	3601761	AssignmentExpression	"num_nodes = get_num_nodes ( depth , breadth )"		3601702	2		=			
ANR	3601762	Identifier	num_nodes		3601702	0					
ANR	3601763	CallExpression	"get_num_nodes ( depth , breadth )"		3601702	1					
ANR	3601764	Callee	get_num_nodes		3601702	0					
ANR	3601765	Identifier	get_num_nodes		3601702	0					
ANR	3601766	ArgumentList	depth		3601702	1					
ANR	3601767	Argument	depth		3601702	0					
ANR	3601768	Identifier	depth		3601702	0					
ANR	3601769	Argument	breadth		3601702	1					
ANR	3601770	Identifier	breadth		3601702	0					
ANR	3601771	IdentifierDeclStatement	"PID_ENTRY * p = recursive_fork ( depth - 1 , breadth , verbose ) ;"	216:4:5888:5946	3601702	2	True				
ANR	3601772	IdentifierDecl	"* p = recursive_fork ( depth - 1 , breadth , verbose )"		3601702	0					
ANR	3601773	IdentifierDeclType	PID_ENTRY *		3601702	0					
ANR	3601774	Identifier	p		3601702	1					
ANR	3601775	AssignmentExpression	"* p = recursive_fork ( depth - 1 , breadth , verbose )"		3601702	2		=			
ANR	3601776	Identifier	p		3601702	0					
ANR	3601777	CallExpression	"recursive_fork ( depth - 1 , breadth , verbose )"		3601702	1					
ANR	3601778	Callee	recursive_fork		3601702	0					
ANR	3601779	Identifier	recursive_fork		3601702	0					
ANR	3601780	ArgumentList	depth - 1		3601702	1					
ANR	3601781	Argument	depth - 1		3601702	0					
ANR	3601782	AdditiveExpression	depth - 1		3601702	0		-			
ANR	3601783	Identifier	depth		3601702	0					
ANR	3601784	PrimaryExpression	1		3601702	1					
ANR	3601785	Argument	breadth		3601702	1					
ANR	3601786	Identifier	breadth		3601702	0					
ANR	3601787	Argument	verbose		3601702	2					
ANR	3601788	Identifier	verbose		3601702	0					
ANR	3601789	ExpressionStatement	"do_work ( MEMFACTOR * 1024 , verbose )"	219:4:5998:6030	3601702	3	True				
ANR	3601790	CallExpression	"do_work ( MEMFACTOR * 1024 , verbose )"		3601702	0					
ANR	3601791	Callee	do_work		3601702	0					
ANR	3601792	Identifier	do_work		3601702	0					
ANR	3601793	ArgumentList	MEMFACTOR * 1024		3601702	1					
ANR	3601794	Argument	MEMFACTOR * 1024		3601702	0					
ANR	3601795	MultiplicativeExpression	MEMFACTOR * 1024		3601702	0		*			
ANR	3601796	Identifier	MEMFACTOR		3601702	0					
ANR	3601797	PrimaryExpression	1024		3601702	1					
ANR	3601798	Argument	verbose		3601702	1					
ANR	3601799	Identifier	verbose		3601702	0					
ANR	3601800	ExpressionStatement	p [ 0 ] . pid = getpid ( )	220:4:6036:6055	3601702	4	True				
ANR	3601801	AssignmentExpression	p [ 0 ] . pid = getpid ( )		3601702	0		=			
ANR	3601802	MemberAccess	p [ 0 ] . pid		3601702	0					
ANR	3601803	ArrayIndexing	p [ 0 ]		3601702	0					
ANR	3601804	Identifier	p		3601702	0					
ANR	3601805	PrimaryExpression	0		3601702	1					
ANR	3601806	Identifier	pid		3601702	1					
ANR	3601807	CallExpression	getpid ( )		3601702	1					
ANR	3601808	Callee	getpid		3601702	0					
ANR	3601809	Identifier	getpid		3601702	0					
ANR	3601810	ArgumentList			3601702	1					
ANR	3601811	ExpressionStatement	p [ 0 ] . ppid = getppid ( )	221:4:6061:6082	3601702	5	True				
ANR	3601812	AssignmentExpression	p [ 0 ] . ppid = getppid ( )		3601702	0		=			
ANR	3601813	MemberAccess	p [ 0 ] . ppid		3601702	0					
ANR	3601814	ArrayIndexing	p [ 0 ]		3601702	0					
ANR	3601815	Identifier	p		3601702	0					
ANR	3601816	PrimaryExpression	0		3601702	1					
ANR	3601817	Identifier	ppid		3601702	1					
ANR	3601818	CallExpression	getppid ( )		3601702	1					
ANR	3601819	Callee	getppid		3601702	0					
ANR	3601820	Identifier	getppid		3601702	0					
ANR	3601821	ArgumentList			3601702	1					
ANR	3601822	ExpressionStatement	p [ 0 ] . depth = TOTAL_DEPTH - depth	222:4:6088:6120	3601702	6	True				
ANR	3601823	AssignmentExpression	p [ 0 ] . depth = TOTAL_DEPTH - depth		3601702	0		=			
ANR	3601824	MemberAccess	p [ 0 ] . depth		3601702	0					
ANR	3601825	ArrayIndexing	p [ 0 ]		3601702	0					
ANR	3601826	Identifier	p		3601702	0					
ANR	3601827	PrimaryExpression	0		3601702	1					
ANR	3601828	Identifier	depth		3601702	1					
ANR	3601829	AdditiveExpression	TOTAL_DEPTH - depth		3601702	1		-			
ANR	3601830	Identifier	TOTAL_DEPTH		3601702	0					
ANR	3601831	Identifier	depth		3601702	1					
ANR	3601832	ExpressionStatement	p [ 0 ] . subtree_depth = depth	223:4:6126:6152	3601702	7	True				
ANR	3601833	AssignmentExpression	p [ 0 ] . subtree_depth = depth		3601702	0		=			
ANR	3601834	MemberAccess	p [ 0 ] . subtree_depth		3601702	0					
ANR	3601835	ArrayIndexing	p [ 0 ]		3601702	0					
ANR	3601836	Identifier	p		3601702	0					
ANR	3601837	PrimaryExpression	0		3601702	1					
ANR	3601838	Identifier	subtree_depth		3601702	1					
ANR	3601839	Identifier	depth		3601702	1					
ANR	3601840	ExpressionStatement	p [ 0 ] . breadth = 0	224:4:6158:6174	3601702	8	True				
ANR	3601841	AssignmentExpression	p [ 0 ] . breadth = 0		3601702	0		=			
ANR	3601842	MemberAccess	p [ 0 ] . breadth		3601702	0					
ANR	3601843	ArrayIndexing	p [ 0 ]		3601702	0					
ANR	3601844	Identifier	p		3601702	0					
ANR	3601845	PrimaryExpression	0		3601702	1					
ANR	3601846	Identifier	breadth		3601702	1					
ANR	3601847	PrimaryExpression	0		3601702	1					
ANR	3601848	ExpressionStatement	close ( fds [ 0 ] )	225:4:6180:6193	3601702	9	True				
ANR	3601849	CallExpression	close ( fds [ 0 ] )		3601702	0					
ANR	3601850	Callee	close		3601702	0					
ANR	3601851	Identifier	close		3601702	0					
ANR	3601852	ArgumentList	fds [ 0 ]		3601702	1					
ANR	3601853	Argument	fds [ 0 ]		3601702	0					
ANR	3601854	ArrayIndexing	fds [ 0 ]		3601702	0					
ANR	3601855	Identifier	fds		3601702	0					
ANR	3601856	PrimaryExpression	0		3601702	1					
ANR	3601857	ExpressionStatement	"write ( fds [ 1 ] , p , num_nodes * ( sizeof ( PID_ENTRY ) ) )"	226:4:6199:6246	3601702	10	True				
ANR	3601858	CallExpression	"write ( fds [ 1 ] , p , num_nodes * ( sizeof ( PID_ENTRY ) ) )"		3601702	0					
ANR	3601859	Callee	write		3601702	0					
ANR	3601860	Identifier	write		3601702	0					
ANR	3601861	ArgumentList	fds [ 1 ]		3601702	1					
ANR	3601862	Argument	fds [ 1 ]		3601702	0					
ANR	3601863	ArrayIndexing	fds [ 1 ]		3601702	0					
ANR	3601864	Identifier	fds		3601702	0					
ANR	3601865	PrimaryExpression	1		3601702	1					
ANR	3601866	Argument	p		3601702	1					
ANR	3601867	Identifier	p		3601702	0					
ANR	3601868	Argument	num_nodes * ( sizeof ( PID_ENTRY ) )		3601702	2					
ANR	3601869	MultiplicativeExpression	num_nodes * ( sizeof ( PID_ENTRY ) )		3601702	0		*			
ANR	3601870	Identifier	num_nodes		3601702	0					
ANR	3601871	SizeofExpression	sizeof ( PID_ENTRY )		3601702	1					
ANR	3601872	Sizeof	sizeof		3601702	0					
ANR	3601873	SizeofOperand	PID_ENTRY		3601702	1					
ANR	3601874	Statement	delete	227:4:6252:6257	3601702	11	True				
ANR	3601875	Statement	[	227:10:6258:6258	3601702	12	True				
ANR	3601876	Statement	]	227:11:6259:6259	3601702	13	True				
ANR	3601877	ExpressionStatement	p	227:13:6261:6262	3601702	14	True				
ANR	3601878	Identifier	p		3601702	0					
ANR	3601879	ExpressionStatement	"kill ( getpid ( ) , SIGSTOP )"	230:4:6303:6326	3601702	15	True				
ANR	3601880	CallExpression	"kill ( getpid ( ) , SIGSTOP )"		3601702	0					
ANR	3601881	Callee	kill		3601702	0					
ANR	3601882	Identifier	kill		3601702	0					
ANR	3601883	ArgumentList	getpid ( )		3601702	1					
ANR	3601884	Argument	getpid ( )		3601702	0					
ANR	3601885	CallExpression	getpid ( )		3601702	0					
ANR	3601886	Callee	getpid		3601702	0					
ANR	3601887	Identifier	getpid		3601702	0					
ANR	3601888	ArgumentList			3601702	1					
ANR	3601889	Argument	SIGSTOP		3601702	1					
ANR	3601890	Identifier	SIGSTOP		3601702	0					
ANR	3601891	WhileStatement	while ( wait ( 0 ) != - 1 )		3601702	16					
ANR	3601892	Condition	wait ( 0 ) != - 1	233:10:6392:6404	3601702	0	True				
ANR	3601893	EqualityExpression	wait ( 0 ) != - 1		3601702	0		!=			
ANR	3601894	CallExpression	wait ( 0 )		3601702	0					
ANR	3601895	Callee	wait		3601702	0					
ANR	3601896	Identifier	wait		3601702	0					
ANR	3601897	ArgumentList	0		3601702	1					
ANR	3601898	Argument	0		3601702	0					
ANR	3601899	PrimaryExpression	0		3601702	0					
ANR	3601900	UnaryOperationExpression	- 1		3601702	1					
ANR	3601901	UnaryOperator	-		3601702	0					
ANR	3601902	PrimaryExpression	1		3601702	1					
ANR	3601903	ExpressionStatement		234:6:6413:6413	3601702	1	True				
ANR	3601904	IfStatement	if ( verbose )		3601702	17					
ANR	3601905	Condition	verbose	235:7:6422:6428	3601702	0	True				
ANR	3601906	Identifier	verbose		3601702	0					
ANR	3601907	CompoundStatement		34:15:840:840	3601702	1					
ANR	3601908	ExpressionStatement	"printf ( ""exiting process %d\\n"" , getpid ( ) )"	236:6:6438:6478	3601702	0	True				
ANR	3601909	CallExpression	"printf ( ""exiting process %d\\n"" , getpid ( ) )"		3601702	0					
ANR	3601910	Callee	printf		3601702	0					
ANR	3601911	Identifier	printf		3601702	0					
ANR	3601912	ArgumentList	"""exiting process %d\\n"""		3601702	1					
ANR	3601913	Argument	"""exiting process %d\\n"""		3601702	0					
ANR	3601914	PrimaryExpression	"""exiting process %d\\n"""		3601702	0					
ANR	3601915	Argument	getpid ( )		3601702	1					
ANR	3601916	CallExpression	getpid ( )		3601702	0					
ANR	3601917	Callee	getpid		3601702	0					
ANR	3601918	Identifier	getpid		3601702	0					
ANR	3601919	ArgumentList			3601702	1					
ANR	3601920	ExpressionStatement	exit ( 0 )	238:4:6490:6497	3601702	18	True				
ANR	3601921	CallExpression	exit ( 0 )		3601702	0					
ANR	3601922	Callee	exit		3601702	0					
ANR	3601923	Identifier	exit		3601702	0					
ANR	3601924	ArgumentList	0		3601702	1					
ANR	3601925	Argument	0		3601702	0					
ANR	3601926	PrimaryExpression	0		3601702	0					
ANR	3601927	IdentifierDeclStatement	"int num_nodes = get_num_nodes ( depth , breadth ) ;"	241:2:6520:6565	3601702	6	True				
ANR	3601928	IdentifierDecl	"num_nodes = get_num_nodes ( depth , breadth )"		3601702	0					
ANR	3601929	IdentifierDeclType	int		3601702	0					
ANR	3601930	Identifier	num_nodes		3601702	1					
ANR	3601931	AssignmentExpression	"num_nodes = get_num_nodes ( depth , breadth )"		3601702	2		=			
ANR	3601932	Identifier	num_nodes		3601702	0					
ANR	3601933	CallExpression	"get_num_nodes ( depth , breadth )"		3601702	1					
ANR	3601934	Callee	get_num_nodes		3601702	0					
ANR	3601935	Identifier	get_num_nodes		3601702	0					
ANR	3601936	ArgumentList	depth		3601702	1					
ANR	3601937	Argument	depth		3601702	0					
ANR	3601938	Identifier	depth		3601702	0					
ANR	3601939	Argument	breadth		3601702	1					
ANR	3601940	Identifier	breadth		3601702	0					
ANR	3601941	IdentifierDeclStatement	PID_ENTRY * arr = new PID_ENTRY [ num_nodes ] ;	242:2:6569:6610	3601702	7	True				
ANR	3601942	IdentifierDecl	* arr = new PID_ENTRY [ num_nodes ]		3601702	0					
ANR	3601943	IdentifierDeclType	PID_ENTRY *		3601702	0					
ANR	3601944	Identifier	arr		3601702	1					
ANR	3601945	AssignmentExpression	* arr = new PID_ENTRY [ num_nodes ]		3601702	2		=			
ANR	3601946	Identifier	num_nodes		3601702	0					
ANR	3601947	Identifier	num_nodes		3601702	1					
ANR	3601948	ExpressionStatement	close ( fds [ 1 ] )	243:2:6614:6627	3601702	8	True				
ANR	3601949	CallExpression	close ( fds [ 1 ] )		3601702	0					
ANR	3601950	Callee	close		3601702	0					
ANR	3601951	Identifier	close		3601702	0					
ANR	3601952	ArgumentList	fds [ 1 ]		3601702	1					
ANR	3601953	Argument	fds [ 1 ]		3601702	0					
ANR	3601954	ArrayIndexing	fds [ 1 ]		3601702	0					
ANR	3601955	Identifier	fds		3601702	0					
ANR	3601956	PrimaryExpression	1		3601702	1					
ANR	3601957	ExpressionStatement	"read ( fds [ 0 ] , arr , num_nodes * ( sizeof ( PID_ENTRY ) ) )"	244:2:6631:6679	3601702	9	True				
ANR	3601958	CallExpression	"read ( fds [ 0 ] , arr , num_nodes * ( sizeof ( PID_ENTRY ) ) )"		3601702	0					
ANR	3601959	Callee	read		3601702	0					
ANR	3601960	Identifier	read		3601702	0					
ANR	3601961	ArgumentList	fds [ 0 ]		3601702	1					
ANR	3601962	Argument	fds [ 0 ]		3601702	0					
ANR	3601963	ArrayIndexing	fds [ 0 ]		3601702	0					
ANR	3601964	Identifier	fds		3601702	0					
ANR	3601965	PrimaryExpression	0		3601702	1					
ANR	3601966	Argument	arr		3601702	1					
ANR	3601967	Identifier	arr		3601702	0					
ANR	3601968	Argument	num_nodes * ( sizeof ( PID_ENTRY ) )		3601702	2					
ANR	3601969	MultiplicativeExpression	num_nodes * ( sizeof ( PID_ENTRY ) )		3601702	0		*			
ANR	3601970	Identifier	num_nodes		3601702	0					
ANR	3601971	SizeofExpression	sizeof ( PID_ENTRY )		3601702	1					
ANR	3601972	Sizeof	sizeof		3601702	0					
ANR	3601973	SizeofOperand	PID_ENTRY		3601702	1					
ANR	3601974	ForStatement	for ( int i = 0 ; i < num_nodes ; i ++ )		3601702	10					
ANR	3601975	ForInit	int i = 0 ;	246:6:6690:6699	3601702	0	True				
ANR	3601976	IdentifierDeclStatement	int i = 0 ;		3601702	0					
ANR	3601977	IdentifierDecl	i = 0		3601702	0					
ANR	3601978	IdentifierDeclType	int		3601702	0					
ANR	3601979	Identifier	i		3601702	1					
ANR	3601980	AssignmentExpression	i = 0		3601702	2		=			
ANR	3601981	Identifier	i		3601702	0					
ANR	3601982	PrimaryExpression	0		3601702	1					
ANR	3601983	Condition	i < num_nodes	246:17:6701:6713	3601702	1	True				
ANR	3601984	RelationalExpression	i < num_nodes		3601702	0		<			
ANR	3601985	Identifier	i		3601702	0					
ANR	3601986	Identifier	num_nodes		3601702	1					
ANR	3601987	PostIncDecOperationExpression	i ++	246:32:6716:6718	3601702	2	True				
ANR	3601988	Identifier	i		3601702	0					
ANR	3601989	IncDec	++		3601702	1					
ANR	3601990	CompoundStatement		45:36:1130:1130	3601702	3					
ANR	3601991	ExpressionStatement	"printf ( ""pid %d ppid %d depth %d breadth %d subtree_depth %d\\n"" , arr [ i ] . pid , arr [ i ] . ppid , arr [ i ] . depth , arr [ i ] . breadth , arr [ i ] . subtree_depth )"	247:4:6726:6866	3601702	0	True				
ANR	3601992	CallExpression	"printf ( ""pid %d ppid %d depth %d breadth %d subtree_depth %d\\n"" , arr [ i ] . pid , arr [ i ] . ppid , arr [ i ] . depth , arr [ i ] . breadth , arr [ i ] . subtree_depth )"		3601702	0					
ANR	3601993	Callee	printf		3601702	0					
ANR	3601994	Identifier	printf		3601702	0					
ANR	3601995	ArgumentList	"""pid %d ppid %d depth %d breadth %d subtree_depth %d\\n"""		3601702	1					
ANR	3601996	Argument	"""pid %d ppid %d depth %d breadth %d subtree_depth %d\\n"""		3601702	0					
ANR	3601997	PrimaryExpression	"""pid %d ppid %d depth %d breadth %d subtree_depth %d\\n"""		3601702	0					
ANR	3601998	Argument	arr [ i ] . pid		3601702	1					
ANR	3601999	MemberAccess	arr [ i ] . pid		3601702	0					
ANR	3602000	ArrayIndexing	arr [ i ]		3601702	0					
ANR	3602001	Identifier	arr		3601702	0					
ANR	3602002	Identifier	i		3601702	1					
ANR	3602003	Identifier	pid		3601702	1					
ANR	3602004	Argument	arr [ i ] . ppid		3601702	2					
ANR	3602005	MemberAccess	arr [ i ] . ppid		3601702	0					
ANR	3602006	ArrayIndexing	arr [ i ]		3601702	0					
ANR	3602007	Identifier	arr		3601702	0					
ANR	3602008	Identifier	i		3601702	1					
ANR	3602009	Identifier	ppid		3601702	1					
ANR	3602010	Argument	arr [ i ] . depth		3601702	3					
ANR	3602011	MemberAccess	arr [ i ] . depth		3601702	0					
ANR	3602012	ArrayIndexing	arr [ i ]		3601702	0					
ANR	3602013	Identifier	arr		3601702	0					
ANR	3602014	Identifier	i		3601702	1					
ANR	3602015	Identifier	depth		3601702	1					
ANR	3602016	Argument	arr [ i ] . breadth		3601702	4					
ANR	3602017	MemberAccess	arr [ i ] . breadth		3601702	0					
ANR	3602018	ArrayIndexing	arr [ i ]		3601702	0					
ANR	3602019	Identifier	arr		3601702	0					
ANR	3602020	Identifier	i		3601702	1					
ANR	3602021	Identifier	breadth		3601702	1					
ANR	3602022	Argument	arr [ i ] . subtree_depth		3601702	5					
ANR	3602023	MemberAccess	arr [ i ] . subtree_depth		3601702	0					
ANR	3602024	ArrayIndexing	arr [ i ]		3601702	0					
ANR	3602025	Identifier	arr		3601702	0					
ANR	3602026	Identifier	i		3601702	1					
ANR	3602027	Identifier	subtree_depth		3601702	1					
ANR	3602028	ReturnStatement	return arr ;	250:2:6875:6885	3601702	11	True				
ANR	3602029	Identifier	arr		3601702	0					
ANR	3602030	ReturnType	PID_ENTRY *		3601702	1					
ANR	3602031	Identifier	fork_tree		3601702	2					
ANR	3602032	ParameterList	"int depth , int breadth , int tree_breadth_change , bool verbose"		3601702	3					
ANR	3602033	Parameter	int depth	202:21:5527:5535	3601702	0	True				
ANR	3602034	ParameterType	int		3601702	0					
ANR	3602035	Identifier	depth		3601702	1					
ANR	3602036	Parameter	int breadth	202:32:5538:5548	3601702	1	True				
ANR	3602037	ParameterType	int		3601702	0					
ANR	3602038	Identifier	breadth		3601702	1					
ANR	3602039	Parameter	int tree_breadth_change	202:45:5551:5573	3601702	2	True				
ANR	3602040	ParameterType	int		3601702	0					
ANR	3602041	Identifier	tree_breadth_change		3601702	1					
ANR	3602042	Parameter	bool verbose	202:70:5576:5587	3601702	3	True				
ANR	3602043	ParameterType	bool		3601702	0					
ANR	3602044	Identifier	verbose		3601702	1					
ANR	3602045	CFGEntryNode	ENTRY		3601702		True				
ANR	3602046	CFGExitNode	EXIT		3601702		True				
ANR	3602047	Symbol	wait		3601702						
ANR	3602048	Symbol	breadth		3601702						
ANR	3602049	Symbol	num_nodes		3601702						
ANR	3602050	Symbol	arr [ i ] . breadth		3601702						
ANR	3602051	Symbol	p [ 0 ] . depth		3601702						
ANR	3602052	Symbol	p [ 0 ] . subtree_depth		3601702						
ANR	3602053	Symbol	arr [ i ] . ppid		3601702						
ANR	3602054	Symbol	arr [ i ] . subtree_depth		3601702						
ANR	3602055	Symbol	* fds		3601702						
ANR	3602056	Symbol	arr		3601702						
ANR	3602057	Symbol	TREE_BREADTH_CHANGE		3601702						
ANR	3602058	Symbol	TOTAL_DEPTH		3601702						
ANR	3602059	Symbol	p [ 0 ] . pid		3601702						
ANR	3602060	Symbol	getppid		3601702						
ANR	3602061	Symbol	arr [ i ] . depth		3601702						
ANR	3602062	Symbol	arr [ i ] . pid		3601702						
ANR	3602063	Symbol	get_num_nodes		3601702						
ANR	3602064	Symbol	MEMFACTOR		3601702						
ANR	3602065	Symbol	i		3601702						
ANR	3602066	Symbol	verbose		3601702						
ANR	3602067	Symbol	p		3601702						
ANR	3602068	Symbol	recursive_fork		3601702						
ANR	3602069	Symbol	fork		3601702						
ANR	3602070	Symbol	depth		3601702						
ANR	3602071	Symbol	* i		3601702						
ANR	3602072	Symbol	fds		3601702						
ANR	3602073	Symbol	* arr		3601702						
ANR	3602074	Symbol	p [ 0 ] . breadth		3601702						
ANR	3602075	Symbol	SIGSTOP		3601702						
ANR	3602076	Symbol	p [ 0 ] . ppid		3601702						
ANR	3602077	Symbol	* p		3601702						
ANR	3602078	Symbol	getpid		3601702						
ANR	3602079	Symbol	tree_breadth_change		3601702						
ANR	3602080	Symbol	child		3601702						
ANR	3602081	Function	end_tree	253:0:6890:7155							
ANR	3602082	FunctionDef	"end_tree (PID_ENTRY * pids , int num_pids)"		3602081	0					
ANR	3602083	CompoundStatement		253:44:6934:7155	3602081	0					
ANR	3602084	ExpressionStatement	sleep ( 10 )	255:2:6939:6948	3602081	0	True				
ANR	3602085	CallExpression	sleep ( 10 )		3602081	0					
ANR	3602086	Callee	sleep		3602081	0					
ANR	3602087	Identifier	sleep		3602081	0					
ANR	3602088	ArgumentList	10		3602081	1					
ANR	3602089	Argument	10		3602081	0					
ANR	3602090	PrimaryExpression	10		3602081	0					
ANR	3602091	ForStatement	for ( int i = 0 ; i < num_pids ; i ++ )		3602081	1					
ANR	3602092	ForInit	int i = 0 ;	257:6:7026:7035	3602081	0	True				
ANR	3602093	IdentifierDeclStatement	int i = 0 ;		3602081	0					
ANR	3602094	IdentifierDecl	i = 0		3602081	0					
ANR	3602095	IdentifierDeclType	int		3602081	0					
ANR	3602096	Identifier	i		3602081	1					
ANR	3602097	AssignmentExpression	i = 0		3602081	2		=			
ANR	3602098	Identifier	i		3602081	0					
ANR	3602099	PrimaryExpression	0		3602081	1					
ANR	3602100	Condition	i < num_pids	257:17:7037:7048	3602081	1	True				
ANR	3602101	RelationalExpression	i < num_pids		3602081	0		<			
ANR	3602102	Identifier	i		3602081	0					
ANR	3602103	Identifier	num_pids		3602081	1					
ANR	3602104	PostIncDecOperationExpression	i ++	257:31:7051:7053	3602081	2	True				
ANR	3602105	Identifier	i		3602081	0					
ANR	3602106	IncDec	++		3602081	1					
ANR	3602107	CompoundStatement		5:35:120:120	3602081	3					
ANR	3602108	ExpressionStatement	"kill ( pids [ i ] . pid , SIGCONT )"	258:4:7061:7087	3602081	0	True				
ANR	3602109	CallExpression	"kill ( pids [ i ] . pid , SIGCONT )"		3602081	0					
ANR	3602110	Callee	kill		3602081	0					
ANR	3602111	Identifier	kill		3602081	0					
ANR	3602112	ArgumentList	pids [ i ] . pid		3602081	1					
ANR	3602113	Argument	pids [ i ] . pid		3602081	0					
ANR	3602114	MemberAccess	pids [ i ] . pid		3602081	0					
ANR	3602115	ArrayIndexing	pids [ i ]		3602081	0					
ANR	3602116	Identifier	pids		3602081	0					
ANR	3602117	Identifier	i		3602081	1					
ANR	3602118	Identifier	pid		3602081	1					
ANR	3602119	Argument	SIGCONT		3602081	1					
ANR	3602120	Identifier	SIGCONT		3602081	0					
ANR	3602121	ExpressionStatement	wait ( 0 )	262:2:7128:7135	3602081	2	True				
ANR	3602122	CallExpression	wait ( 0 )		3602081	0					
ANR	3602123	Callee	wait		3602081	0					
ANR	3602124	Identifier	wait		3602081	0					
ANR	3602125	ArgumentList	0		3602081	1					
ANR	3602126	Argument	0		3602081	0					
ANR	3602127	PrimaryExpression	0		3602081	0					
ANR	3602128	Statement	delete	263:2:7139:7144	3602081	3	True				
ANR	3602129	Statement	[	263:8:7145:7145	3602081	4	True				
ANR	3602130	Statement	]	263:9:7146:7146	3602081	5	True				
ANR	3602131	ExpressionStatement	pids	263:11:7148:7152	3602081	6	True				
ANR	3602132	Identifier	pids		3602081	0					
ANR	3602133	ReturnType	void		3602081	1					
ANR	3602134	Identifier	end_tree		3602081	2					
ANR	3602135	ParameterList	"PID_ENTRY * pids , int num_pids"		3602081	3					
ANR	3602136	Parameter	PID_ENTRY * pids	253:14:6904:6918	3602081	0	True				
ANR	3602137	ParameterType	PID_ENTRY *		3602081	0					
ANR	3602138	Identifier	pids		3602081	1					
ANR	3602139	Parameter	int num_pids	253:31:6921:6932	3602081	1	True				
ANR	3602140	ParameterType	int		3602081	0					
ANR	3602141	Identifier	num_pids		3602081	1					
ANR	3602142	CFGEntryNode	ENTRY		3602081		True				
ANR	3602143	CFGExitNode	EXIT		3602081		True				
ANR	3602144	Symbol	* i		3602081						
ANR	3602145	Symbol	num_pids		3602081						
ANR	3602146	Symbol	pids [ i ] . pid		3602081						
ANR	3602147	Symbol	i		3602081						
ANR	3602148	Symbol	pids		3602081						
ANR	3602149	Symbol	* pids		3602081						
ANR	3602150	Symbol	SIGCONT		3602081						
ANR	3602151	Function	get_approx_mem	268:0:7159:7660							
ANR	3602152	FunctionDef	"get_approx_mem (int depth , int breadth)"		3602151	0					
ANR	3602153	CompoundStatement		268:42:7201:7660	3602151	0					
ANR	3602154	IfStatement	if ( depth <= 0 || breadth <= 0 )		3602151	0					
ANR	3602155	Condition	depth <= 0 || breadth <= 0	270:6:7210:7235	3602151	0	True				
ANR	3602156	OrExpression	depth <= 0 || breadth <= 0		3602151	0		||			
ANR	3602157	RelationalExpression	depth <= 0		3602151	0		<=			
ANR	3602158	Identifier	depth		3602151	0					
ANR	3602159	PrimaryExpression	0		3602151	1					
ANR	3602160	RelationalExpression	breadth <= 0		3602151	1		<=			
ANR	3602161	Identifier	breadth		3602151	0					
ANR	3602162	PrimaryExpression	0		3602151	1					
ANR	3602163	CompoundStatement		3:33:35:35	3602151	1					
ANR	3602164	ReturnStatement	return 0 ;	271:4:7243:7251	3602151	0	True				
ANR	3602165	PrimaryExpression	0		3602151	0					
ANR	3602166	IdentifierDeclStatement	int mem ;	273:2:7259:7266	3602151	1	True				
ANR	3602167	IdentifierDecl	mem		3602151	0					
ANR	3602168	IdentifierDeclType	int		3602151	0					
ANR	3602169	Identifier	mem		3602151	1					
ANR	3602170	ExpressionStatement	mem = 0	275:2:7285:7292	3602151	2	True				
ANR	3602171	AssignmentExpression	mem = 0		3602151	0		=			
ANR	3602172	Identifier	mem		3602151	0					
ANR	3602173	PrimaryExpression	0		3602151	1					
ANR	3602174	IdentifierDeclStatement	int mem_per_group = 0 ;	277:2:7360:7381	3602151	3	True				
ANR	3602175	IdentifierDecl	mem_per_group = 0		3602151	0					
ANR	3602176	IdentifierDeclType	int		3602151	0					
ANR	3602177	Identifier	mem_per_group		3602151	1					
ANR	3602178	AssignmentExpression	mem_per_group = 0		3602151	2		=			
ANR	3602179	Identifier	mem_per_group		3602151	0					
ANR	3602180	PrimaryExpression	0		3602151	1					
ANR	3602181	ForStatement	for ( int i = 1 ; i <= breadth ; i ++ )		3602151	4					
ANR	3602182	ForInit	int i = 1 ;	279:6:7390:7399	3602151	0	True				
ANR	3602183	IdentifierDeclStatement	int i = 1 ;		3602151	0					
ANR	3602184	IdentifierDecl	i = 1		3602151	0					
ANR	3602185	IdentifierDeclType	int		3602151	0					
ANR	3602186	Identifier	i		3602151	1					
ANR	3602187	AssignmentExpression	i = 1		3602151	2		=			
ANR	3602188	Identifier	i		3602151	0					
ANR	3602189	PrimaryExpression	1		3602151	1					
ANR	3602190	Condition	i <= breadth	279:17:7401:7412	3602151	1	True				
ANR	3602191	RelationalExpression	i <= breadth		3602151	0		<=			
ANR	3602192	Identifier	i		3602151	0					
ANR	3602193	Identifier	breadth		3602151	1					
ANR	3602194	PostIncDecOperationExpression	i ++	279:31:7415:7417	3602151	2	True				
ANR	3602195	Identifier	i		3602151	0					
ANR	3602196	IncDec	++		3602151	1					
ANR	3602197	CompoundStatement		12:35:217:217	3602151	3					
ANR	3602198	ExpressionStatement	mem_per_group += MEMFACTOR	280:4:7425:7451	3602151	0	True				
ANR	3602199	AssignmentExpression	mem_per_group += MEMFACTOR		3602151	0		+=			
ANR	3602200	Identifier	mem_per_group		3602151	0					
ANR	3602201	Identifier	MEMFACTOR		3602151	1					
ANR	3602202	ExpressionStatement	mem = MEMFACTOR	284:2:7478:7493	3602151	5	True				
ANR	3602203	AssignmentExpression	mem = MEMFACTOR		3602151	0		=			
ANR	3602204	Identifier	mem		3602151	0					
ANR	3602205	Identifier	MEMFACTOR		3602151	1					
ANR	3602206	ForStatement	for ( int i = 1 ; i < depth ; i ++ )		3602151	6					
ANR	3602207	ForInit	int i = 1 ;	285:7:7502:7511	3602151	0	True				
ANR	3602208	IdentifierDeclStatement	int i = 1 ;		3602151	0					
ANR	3602209	IdentifierDecl	i = 1		3602151	0					
ANR	3602210	IdentifierDeclType	int		3602151	0					
ANR	3602211	Identifier	i		3602151	1					
ANR	3602212	AssignmentExpression	i = 1		3602151	2		=			
ANR	3602213	Identifier	i		3602151	0					
ANR	3602214	PrimaryExpression	1		3602151	1					
ANR	3602215	Condition	i < depth	285:18:7513:7521	3602151	1	True				
ANR	3602216	RelationalExpression	i < depth		3602151	0		<			
ANR	3602217	Identifier	i		3602151	0					
ANR	3602218	Identifier	depth		3602151	1					
ANR	3602219	PostIncDecOperationExpression	i ++	285:29:7524:7526	3602151	2	True				
ANR	3602220	Identifier	i		3602151	0					
ANR	3602221	IncDec	++		3602151	1					
ANR	3602222	CompoundStatement		19:4:332:384	3602151	3					
ANR	3602223	IdentifierDeclStatement	"int num_nodes = ( int ) pow ( ( double ) breadth , ( double ) i ) ;"	286:4:7534:7586	3602151	0	True				
ANR	3602224	IdentifierDecl	"num_nodes = ( int ) pow ( ( double ) breadth , ( double ) i )"		3602151	0					
ANR	3602225	IdentifierDeclType	int		3602151	0					
ANR	3602226	Identifier	num_nodes		3602151	1					
ANR	3602227	AssignmentExpression	"num_nodes = ( int ) pow ( ( double ) breadth , ( double ) i )"		3602151	2		=			
ANR	3602228	Identifier	num_nodes		3602151	0					
ANR	3602229	CastExpression	"( int ) pow ( ( double ) breadth , ( double ) i )"		3602151	1					
ANR	3602230	CastTarget	int		3602151	0					
ANR	3602231	CallExpression	"pow ( ( double ) breadth , ( double ) i )"		3602151	1					
ANR	3602232	Callee	pow		3602151	0					
ANR	3602233	Identifier	pow		3602151	0					
ANR	3602234	ArgumentList	( double ) breadth		3602151	1					
ANR	3602235	Argument	( double ) breadth		3602151	0					
ANR	3602236	CastExpression	( double ) breadth		3602151	0					
ANR	3602237	CastTarget	double		3602151	0					
ANR	3602238	Identifier	breadth		3602151	1					
ANR	3602239	Argument	( double ) i		3602151	1					
ANR	3602240	CastExpression	( double ) i		3602151	0					
ANR	3602241	CastTarget	double		3602151	0					
ANR	3602242	Identifier	i		3602151	1					
ANR	3602243	ExpressionStatement	mem += ( num_nodes / breadth ) * mem_per_group	287:4:7592:7636	3602151	1	True				
ANR	3602244	AssignmentExpression	mem += ( num_nodes / breadth ) * mem_per_group		3602151	0		+=			
ANR	3602245	Identifier	mem		3602151	0					
ANR	3602246	MultiplicativeExpression	( num_nodes / breadth ) * mem_per_group		3602151	1		*			
ANR	3602247	MultiplicativeExpression	num_nodes / breadth		3602151	0		/			
ANR	3602248	Identifier	num_nodes		3602151	0					
ANR	3602249	Identifier	breadth		3602151	1					
ANR	3602250	Identifier	mem_per_group		3602151	1					
ANR	3602251	ReturnStatement	return mem ;	290:2:7647:7657	3602151	7	True				
ANR	3602252	Identifier	mem		3602151	0					
ANR	3602253	ReturnType	int		3602151	1					
ANR	3602254	Identifier	get_approx_mem		3602151	2					
ANR	3602255	ParameterList	"int depth , int breadth"		3602151	3					
ANR	3602256	Parameter	int depth	268:19:7178:7186	3602151	0	True				
ANR	3602257	ParameterType	int		3602151	0					
ANR	3602258	Identifier	depth		3602151	1					
ANR	3602259	Parameter	int breadth	268:30:7189:7199	3602151	1	True				
ANR	3602260	ParameterType	int		3602151	0					
ANR	3602261	Identifier	breadth		3602151	1					
ANR	3602262	CFGEntryNode	ENTRY		3602151		True				
ANR	3602263	CFGExitNode	EXIT		3602151		True				
ANR	3602264	Symbol	depth		3602151						
ANR	3602265	Symbol	breadth		3602151						
ANR	3602266	Symbol	mem		3602151						
ANR	3602267	Symbol	i		3602151						
ANR	3602268	Symbol	MEMFACTOR		3602151						
ANR	3602269	Symbol	pow		3602151						
ANR	3602270	Symbol	num_nodes		3602151						
ANR	3602271	Symbol	mem_per_group		3602151						
ANR	3602272	Function	get_num_nodes	294:0:7663:7894							
ANR	3602273	FunctionDef	"get_num_nodes (int depth , int breadth)"		3602272	0					
ANR	3602274	CompoundStatement		294:41:7704:7894	3602272	0					
ANR	3602275	IfStatement	if ( depth <= 0 || breadth <= 0 )		3602272	0					
ANR	3602276	Condition	depth <= 0 || breadth <= 0	296:6:7713:7738	3602272	0	True				
ANR	3602277	OrExpression	depth <= 0 || breadth <= 0		3602272	0		||			
ANR	3602278	RelationalExpression	depth <= 0		3602272	0		<=			
ANR	3602279	Identifier	depth		3602272	0					
ANR	3602280	PrimaryExpression	0		3602272	1					
ANR	3602281	RelationalExpression	breadth <= 0		3602272	1		<=			
ANR	3602282	Identifier	breadth		3602272	0					
ANR	3602283	PrimaryExpression	0		3602272	1					
ANR	3602284	CompoundStatement		3:33:35:35	3602272	1					
ANR	3602285	ReturnStatement	return 0 ;	297:4:7746:7754	3602272	0	True				
ANR	3602286	PrimaryExpression	0		3602272	0					
ANR	3602287	IdentifierDeclStatement	int num_nodes = 0 ;	299:2:7762:7779	3602272	1	True				
ANR	3602288	IdentifierDecl	num_nodes = 0		3602272	0					
ANR	3602289	IdentifierDeclType	int		3602272	0					
ANR	3602290	Identifier	num_nodes		3602272	1					
ANR	3602291	AssignmentExpression	num_nodes = 0		3602272	2		=			
ANR	3602292	Identifier	num_nodes		3602272	0					
ANR	3602293	PrimaryExpression	0		3602272	1					
ANR	3602294	ForStatement	for ( int i = 0 ; i < depth ; i ++ )		3602272	2					
ANR	3602295	ForInit	int i = 0 ;	300:6:7787:7796	3602272	0	True				
ANR	3602296	IdentifierDeclStatement	int i = 0 ;		3602272	0					
ANR	3602297	IdentifierDecl	i = 0		3602272	0					
ANR	3602298	IdentifierDeclType	int		3602272	0					
ANR	3602299	Identifier	i		3602272	1					
ANR	3602300	AssignmentExpression	i = 0		3602272	2		=			
ANR	3602301	Identifier	i		3602272	0					
ANR	3602302	PrimaryExpression	0		3602272	1					
ANR	3602303	Condition	i < depth	300:17:7798:7806	3602272	1	True				
ANR	3602304	RelationalExpression	i < depth		3602272	0		<			
ANR	3602305	Identifier	i		3602272	0					
ANR	3602306	Identifier	depth		3602272	1					
ANR	3602307	PostIncDecOperationExpression	i ++	300:28:7809:7811	3602272	2	True				
ANR	3602308	Identifier	i		3602272	0					
ANR	3602309	IncDec	++		3602272	1					
ANR	3602310	CompoundStatement		7:32:108:108	3602272	3					
ANR	3602311	ExpressionStatement	"num_nodes += ( int ) pow ( ( double ) breadth , ( double ) i )"	301:4:7819:7868	3602272	0	True				
ANR	3602312	AssignmentExpression	"num_nodes += ( int ) pow ( ( double ) breadth , ( double ) i )"		3602272	0		+=			
ANR	3602313	Identifier	num_nodes		3602272	0					
ANR	3602314	CastExpression	"( int ) pow ( ( double ) breadth , ( double ) i )"		3602272	1					
ANR	3602315	CastTarget	int		3602272	0					
ANR	3602316	CallExpression	"pow ( ( double ) breadth , ( double ) i )"		3602272	1					
ANR	3602317	Callee	pow		3602272	0					
ANR	3602318	Identifier	pow		3602272	0					
ANR	3602319	ArgumentList	( double ) breadth		3602272	1					
ANR	3602320	Argument	( double ) breadth		3602272	0					
ANR	3602321	CastExpression	( double ) breadth		3602272	0					
ANR	3602322	CastTarget	double		3602272	0					
ANR	3602323	Identifier	breadth		3602272	1					
ANR	3602324	Argument	( double ) i		3602272	1					
ANR	3602325	CastExpression	( double ) i		3602272	0					
ANR	3602326	CastTarget	double		3602272	0					
ANR	3602327	Identifier	i		3602272	1					
ANR	3602328	ReturnStatement	return num_nodes ;	303:2:7876:7892	3602272	3	True				
ANR	3602329	Identifier	num_nodes		3602272	0					
ANR	3602330	ReturnType	int		3602272	1					
ANR	3602331	Identifier	get_num_nodes		3602272	2					
ANR	3602332	ParameterList	"int depth , int breadth"		3602272	3					
ANR	3602333	Parameter	int depth	294:18:7681:7689	3602272	0	True				
ANR	3602334	ParameterType	int		3602272	0					
ANR	3602335	Identifier	depth		3602272	1					
ANR	3602336	Parameter	int breadth	294:29:7692:7702	3602272	1	True				
ANR	3602337	ParameterType	int		3602272	0					
ANR	3602338	Identifier	breadth		3602272	1					
ANR	3602339	CFGEntryNode	ENTRY		3602272		True				
ANR	3602340	CFGExitNode	EXIT		3602272		True				
ANR	3602341	Symbol	depth		3602272						
ANR	3602342	Symbol	breadth		3602272						
ANR	3602343	Symbol	i		3602272						
ANR	3602344	Symbol	pow		3602272						
ANR	3602345	Symbol	num_nodes		3602272						
