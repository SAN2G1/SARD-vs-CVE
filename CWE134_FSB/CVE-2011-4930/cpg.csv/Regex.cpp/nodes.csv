command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	509589	File	data/converged/CVE-2011-4930_htcondor/Regex.cpp								
ANR	509590	Function	Regex :: Regex	24:0:858:913							
ANR	509591	FunctionDef	Regex :: Regex ()		509590	0					
ANR	509592	CompoundStatement		25:0:873:913	509590	0					
ANR	509593	ExpressionStatement	this -> options = 0	26:1:876:893	509590	0	True				
ANR	509594	AssignmentExpression	this -> options = 0		509590	0		=			
ANR	509595	PtrMemberAccess	this -> options		509590	0					
ANR	509596	Identifier	this		509590	0					
ANR	509597	Identifier	options		509590	1					
ANR	509598	PrimaryExpression	0		509590	1					
ANR	509599	ExpressionStatement	this -> re = NULL	27:1:896:911	509590	1	True				
ANR	509600	AssignmentExpression	this -> re = NULL		509590	0		=			
ANR	509601	PtrMemberAccess	this -> re		509590	0					
ANR	509602	Identifier	this		509590	0					
ANR	509603	Identifier	re		509590	1					
ANR	509604	Identifier	NULL		509590	1					
ANR	509605	Identifier	Regex :: Regex		509590	1					
ANR	509606	ParameterList			509590	2					
ANR	509607	CFGEntryNode	ENTRY		509590		True				
ANR	509608	CFGExitNode	EXIT		509590		True				
ANR	509609	Symbol	* this		509590						
ANR	509610	Symbol	NULL		509590						
ANR	509611	Symbol	this		509590						
ANR	509612	Symbol	this -> options		509590						
ANR	509613	Symbol	this -> re		509590						
ANR	509614	Function	Regex :: Regex	46:0:1178:1269							
ANR	509615	FunctionDef	Regex :: Regex (const Regex & copy)		509614	0					
ANR	509616	CompoundStatement		47:0:1211:1269	509614	0					
ANR	509617	ExpressionStatement	this -> options = copy . options	48:1:1214:1242	509614	0	True				
ANR	509618	AssignmentExpression	this -> options = copy . options		509614	0		=			
ANR	509619	PtrMemberAccess	this -> options		509614	0					
ANR	509620	Identifier	this		509614	0					
ANR	509621	Identifier	options		509614	1					
ANR	509622	MemberAccess	copy . options		509614	1					
ANR	509623	Identifier	copy		509614	0					
ANR	509624	Identifier	options		509614	1					
ANR	509625	ExpressionStatement	re = clone_re ( copy . re )	49:1:1245:1267	509614	1	True				
ANR	509626	AssignmentExpression	re = clone_re ( copy . re )		509614	0		=			
ANR	509627	Identifier	re		509614	0					
ANR	509628	CallExpression	clone_re ( copy . re )		509614	1					
ANR	509629	Callee	clone_re		509614	0					
ANR	509630	Identifier	clone_re		509614	0					
ANR	509631	ArgumentList	copy . re		509614	1					
ANR	509632	Argument	copy . re		509614	0					
ANR	509633	MemberAccess	copy . re		509614	0					
ANR	509634	Identifier	copy		509614	0					
ANR	509635	Identifier	re		509614	1					
ANR	509636	Identifier	Regex :: Regex		509614	1					
ANR	509637	ParameterList	const Regex & copy		509614	2					
ANR	509638	Parameter	const Regex & copy	46:13:1191:1208	509614	0	True				
ANR	509639	ParameterType	const Regex &		509614	0					
ANR	509640	Identifier	copy		509614	1					
ANR	509641	CFGEntryNode	ENTRY		509614		True				
ANR	509642	CFGExitNode	EXIT		509614		True				
ANR	509643	Symbol	* this		509614						
ANR	509644	Symbol	re		509614						
ANR	509645	Symbol	copy . re		509614						
ANR	509646	Symbol	this		509614						
ANR	509647	Symbol	clone_re		509614						
ANR	509648	Symbol	copy . options		509614						
ANR	509649	Symbol	copy		509614						
ANR	509650	Symbol	this -> options		509614						
ANR	509651	Function	operator =	54:7:1294:1473							
ANR	509652	FunctionDef	operator = (const Regex & copy)		509651	0					
ANR	509653	CompoundStatement		55:0:1326:1473	509651	0					
ANR	509654	IfStatement	if ( this != & copy )		509651	0					
ANR	509655	Condition	this != & copy	56:5:1333:1345	509651	0	True				
ANR	509656	EqualityExpression	this != & copy		509651	0		!=			
ANR	509657	Identifier	this		509651	0					
ANR	509658	UnaryOperationExpression	& copy		509651	1					
ANR	509659	UnaryOperator	&		509651	0					
ANR	509660	Identifier	copy		509651	1					
ANR	509661	CompoundStatement		2:20:21:21	509651	1					
ANR	509662	ExpressionStatement	this -> options = copy . options	57:2:1352:1380	509651	0	True				
ANR	509663	AssignmentExpression	this -> options = copy . options		509651	0		=			
ANR	509664	PtrMemberAccess	this -> options		509651	0					
ANR	509665	Identifier	this		509651	0					
ANR	509666	Identifier	options		509651	1					
ANR	509667	MemberAccess	copy . options		509651	1					
ANR	509668	Identifier	copy		509651	0					
ANR	509669	Identifier	options		509651	1					
ANR	509670	IfStatement	if ( re )		509651	1					
ANR	509671	Condition	re	59:6:1389:1390	509651	0	True				
ANR	509672	Identifier	re		509651	0					
ANR	509673	CompoundStatement		5:10:66:66	509651	1					
ANR	509674	ExpressionStatement	pcre_free ( re )	60:3:1398:1411	509651	0	True				
ANR	509675	CallExpression	pcre_free ( re )		509651	0					
ANR	509676	Callee	pcre_free		509651	0					
ANR	509677	Identifier	pcre_free		509651	0					
ANR	509678	ArgumentList	re		509651	1					
ANR	509679	Argument	re		509651	0					
ANR	509680	Identifier	re		509651	0					
ANR	509681	ExpressionStatement	re = NULL	60:18:1413:1422	509651	1	True				
ANR	509682	AssignmentExpression	re = NULL		509651	0		=			
ANR	509683	Identifier	re		509651	0					
ANR	509684	Identifier	NULL		509651	1					
ANR	509685	ExpressionStatement	re = clone_re ( copy . re )	62:2:1430:1452	509651	2	True				
ANR	509686	AssignmentExpression	re = clone_re ( copy . re )		509651	0		=			
ANR	509687	Identifier	re		509651	0					
ANR	509688	CallExpression	clone_re ( copy . re )		509651	1					
ANR	509689	Callee	clone_re		509651	0					
ANR	509690	Identifier	clone_re		509651	0					
ANR	509691	ArgumentList	copy . re		509651	1					
ANR	509692	Argument	copy . re		509651	0					
ANR	509693	MemberAccess	copy . re		509651	0					
ANR	509694	Identifier	copy		509651	0					
ANR	509695	Identifier	re		509651	1					
ANR	509696	ReturnStatement	return * this ;	65:1:1459:1471	509651	1	True				
ANR	509697	UnaryOperationExpression	* this		509651	0					
ANR	509698	UnaryOperator	*		509651	0					
ANR	509699	Identifier	this		509651	1					
ANR	509700	Identifier	operator =		509651	1					
ANR	509701	ParameterList	const Regex & copy		509651	2					
ANR	509702	Parameter	const Regex & copy	54:19:1306:1323	509651	0	True				
ANR	509703	ParameterType	const Regex &		509651	0					
ANR	509704	Identifier	copy		509651	1					
ANR	509705	CFGEntryNode	ENTRY		509651		True				
ANR	509706	CFGExitNode	EXIT		509651		True				
ANR	509707	Symbol	* this		509651						
ANR	509708	Symbol	re		509651						
ANR	509709	Symbol	NULL		509651						
ANR	509710	Symbol	& copy		509651						
ANR	509711	Symbol	copy . re		509651						
ANR	509712	Symbol	this		509651						
ANR	509713	Symbol	clone_re		509651						
ANR	509714	Symbol	copy . options		509651						
ANR	509715	Symbol	copy		509651						
ANR	509716	Symbol	this -> options		509651						
ANR	509717	Function	Regex :: ~Regex	69:0:1477:1537							
ANR	509718	FunctionDef	Regex :: ~Regex ()		509717	0					
ANR	509719	CompoundStatement		70:0:1493:1537	509717	0					
ANR	509720	IfStatement	if ( re )		509717	0					
ANR	509721	Condition	re	71:5:1500:1501	509717	0	True				
ANR	509722	Identifier	re		509717	0					
ANR	509723	CompoundStatement		2:9:10:10	509717	1					
ANR	509724	ExpressionStatement	pcre_free ( re )	72:2:1508:1521	509717	0	True				
ANR	509725	CallExpression	pcre_free ( re )		509717	0					
ANR	509726	Callee	pcre_free		509717	0					
ANR	509727	Identifier	pcre_free		509717	0					
ANR	509728	ArgumentList	re		509717	1					
ANR	509729	Argument	re		509717	0					
ANR	509730	Identifier	re		509717	0					
ANR	509731	ExpressionStatement	re = NULL	72:17:1523:1532	509717	1	True				
ANR	509732	AssignmentExpression	re = NULL		509717	0		=			
ANR	509733	Identifier	re		509717	0					
ANR	509734	Identifier	NULL		509717	1					
ANR	509735	Identifier	Regex :: ~Regex		509717	1					
ANR	509736	ParameterList			509717	2					
ANR	509737	CFGEntryNode	ENTRY		509717		True				
ANR	509738	CFGExitNode	EXIT		509717		True				
ANR	509739	Symbol	re		509717						
ANR	509740	Symbol	NULL		509717						
ANR	509741	Function	Regex :: compile	77:0:1541:1765							
ANR	509742	FunctionDef	"Regex :: compile (const MyString & pattern , const char * * errptr , int * erroffset , int options_param)"		509741	0					
ANR	509743	CompoundStatement		82:0:1663:1765	509741	0					
ANR	509744	ExpressionStatement	"re = pcre_compile ( pattern . Value ( ) , options_param , errptr , erroffset , NULL )"	83:1:1666:1740	509741	0	True				
ANR	509745	AssignmentExpression	"re = pcre_compile ( pattern . Value ( ) , options_param , errptr , erroffset , NULL )"		509741	0		=			
ANR	509746	Identifier	re		509741	0					
ANR	509747	CallExpression	"pcre_compile ( pattern . Value ( ) , options_param , errptr , erroffset , NULL )"		509741	1					
ANR	509748	Callee	pcre_compile		509741	0					
ANR	509749	Identifier	pcre_compile		509741	0					
ANR	509750	ArgumentList	pattern . Value ( )		509741	1					
ANR	509751	Argument	pattern . Value ( )		509741	0					
ANR	509752	CallExpression	pattern . Value ( )		509741	0					
ANR	509753	Callee	pattern . Value		509741	0					
ANR	509754	MemberAccess	pattern . Value		509741	0					
ANR	509755	Identifier	pattern		509741	0					
ANR	509756	Identifier	Value		509741	1					
ANR	509757	ArgumentList			509741	1					
ANR	509758	Argument	options_param		509741	1					
ANR	509759	Identifier	options_param		509741	0					
ANR	509760	Argument	errptr		509741	2					
ANR	509761	Identifier	errptr		509741	0					
ANR	509762	Argument	erroffset		509741	3					
ANR	509763	Identifier	erroffset		509741	0					
ANR	509764	Argument	NULL		509741	4					
ANR	509765	Identifier	NULL		509741	0					
ANR	509766	ReturnStatement	return ( NULL != re ) ;	85:1:1744:1763	509741	1	True				
ANR	509767	EqualityExpression	NULL != re		509741	0		!=			
ANR	509768	Identifier	NULL		509741	0					
ANR	509769	Identifier	re		509741	1					
ANR	509770	ReturnType	bool		509741	1					
ANR	509771	Identifier	Regex :: compile		509741	2					
ANR	509772	ParameterList	"const MyString & pattern , const char * * errptr , int * erroffset , int options_param"		509741	3					
ANR	509773	Parameter	const MyString & pattern	78:15:1561:1584	509741	0	True				
ANR	509774	ParameterType	const MyString &		509741	0					
ANR	509775	Identifier	pattern		509741	1					
ANR	509776	Parameter	const char * * errptr	79:6:1593:1612	509741	1	True				
ANR	509777	ParameterType	const char * *		509741	0					
ANR	509778	Identifier	errptr		509741	1					
ANR	509779	Parameter	int * erroffset	80:6:1621:1635	509741	2	True				
ANR	509780	ParameterType	int *		509741	0					
ANR	509781	Identifier	erroffset		509741	1					
ANR	509782	Parameter	int options_param	81:6:1644:1660	509741	3	True				
ANR	509783	ParameterType	int		509741	0					
ANR	509784	Identifier	options_param		509741	1					
ANR	509785	CFGEntryNode	ENTRY		509741		True				
ANR	509786	CFGExitNode	EXIT		509741		True				
ANR	509787	Symbol	NULL		509741						
ANR	509788	Symbol	re		509741						
ANR	509789	Symbol	pattern		509741						
ANR	509790	Symbol	pattern . Value		509741						
ANR	509791	Symbol	erroffset		509741						
ANR	509792	Symbol	options_param		509741						
ANR	509793	Symbol	errptr		509741						
ANR	509794	Symbol	pcre_compile		509741						
ANR	509795	Function	Regex :: match	89:0:1769:2580							
ANR	509796	FunctionDef	"Regex :: match (const MyString & string , ExtArray < MyString > * groups)"		509795	0					
ANR	509797	CompoundStatement		92:0:1845:2580	509795	0					
ANR	509798	IfStatement	if ( ! this -> isInitialized ( ) )		509795	0					
ANR	509799	Condition	! this -> isInitialized ( )	93:6:1853:1875	509795	0	True				
ANR	509800	UnaryOperationExpression	! this -> isInitialized ( )		509795	0					
ANR	509801	UnaryOperator	!		509795	0					
ANR	509802	CallExpression	this -> isInitialized ( )		509795	1					
ANR	509803	Callee	this -> isInitialized		509795	0					
ANR	509804	PtrMemberAccess	this -> isInitialized		509795	0					
ANR	509805	Identifier	this		509795	0					
ANR	509806	Identifier	isInitialized		509795	1					
ANR	509807	ArgumentList			509795	1					
ANR	509808	CompoundStatement		2:32:33:33	509795	1					
ANR	509809	ReturnStatement	return false ;	94:2:1883:1895	509795	0	True				
ANR	509810	Identifier	false		509795	0					
ANR	509811	IdentifierDeclStatement	int group_count ;	97:1:1902:1917	509795	1	True				
ANR	509812	IdentifierDecl	group_count		509795	0					
ANR	509813	IdentifierDeclType	int		509795	0					
ANR	509814	Identifier	group_count		509795	1					
ANR	509815	ExpressionStatement	"pcre_fullinfo ( re , NULL , PCRE_INFO_CAPTURECOUNT , & group_count )"	98:1:1920:1981	509795	2	True				
ANR	509816	CallExpression	"pcre_fullinfo ( re , NULL , PCRE_INFO_CAPTURECOUNT , & group_count )"		509795	0					
ANR	509817	Callee	pcre_fullinfo		509795	0					
ANR	509818	Identifier	pcre_fullinfo		509795	0					
ANR	509819	ArgumentList	re		509795	1					
ANR	509820	Argument	re		509795	0					
ANR	509821	Identifier	re		509795	0					
ANR	509822	Argument	NULL		509795	1					
ANR	509823	Identifier	NULL		509795	0					
ANR	509824	Argument	PCRE_INFO_CAPTURECOUNT		509795	2					
ANR	509825	Identifier	PCRE_INFO_CAPTURECOUNT		509795	0					
ANR	509826	Argument	& group_count		509795	3					
ANR	509827	UnaryOperationExpression	& group_count		509795	0					
ANR	509828	UnaryOperator	&		509795	0					
ANR	509829	Identifier	group_count		509795	1					
ANR	509830	IdentifierDeclStatement	int oveccount = 3 * ( group_count + 1 ) ;	99:1:1984:2021	509795	3	True				
ANR	509831	IdentifierDecl	oveccount = 3 * ( group_count + 1 )		509795	0					
ANR	509832	IdentifierDeclType	int		509795	0					
ANR	509833	Identifier	oveccount		509795	1					
ANR	509834	AssignmentExpression	oveccount = 3 * ( group_count + 1 )		509795	2		=			
ANR	509835	Identifier	oveccount		509795	0					
ANR	509836	MultiplicativeExpression	3 * ( group_count + 1 )		509795	1		*			
ANR	509837	PrimaryExpression	3		509795	0					
ANR	509838	AdditiveExpression	group_count + 1		509795	1		+			
ANR	509839	Identifier	group_count		509795	0					
ANR	509840	PrimaryExpression	1		509795	1					
ANR	509841	IdentifierDeclStatement	int * ovector = ( int * ) malloc ( oveccount * sizeof ( int ) ) ;	100:1:2052:2107	509795	4	True				
ANR	509842	IdentifierDecl	* ovector = ( int * ) malloc ( oveccount * sizeof ( int ) )		509795	0					
ANR	509843	IdentifierDeclType	int *		509795	0					
ANR	509844	Identifier	ovector		509795	1					
ANR	509845	AssignmentExpression	* ovector = ( int * ) malloc ( oveccount * sizeof ( int ) )		509795	2		=			
ANR	509846	Identifier	ovector		509795	0					
ANR	509847	CastExpression	( int * ) malloc ( oveccount * sizeof ( int ) )		509795	1					
ANR	509848	CastTarget	int *		509795	0					
ANR	509849	CallExpression	malloc ( oveccount * sizeof ( int ) )		509795	1					
ANR	509850	Callee	malloc		509795	0					
ANR	509851	Identifier	malloc		509795	0					
ANR	509852	ArgumentList	oveccount * sizeof ( int )		509795	1					
ANR	509853	Argument	oveccount * sizeof ( int )		509795	0					
ANR	509854	MultiplicativeExpression	oveccount * sizeof ( int )		509795	0		*			
ANR	509855	Identifier	oveccount		509795	0					
ANR	509856	SizeofExpression	sizeof ( int )		509795	1					
ANR	509857	Sizeof	sizeof		509795	0					
ANR	509858	SizeofOperand	int		509795	1					
ANR	509859	IfStatement	if ( ! ovector )		509795	5					
ANR	509860	Condition	! ovector	101:5:2114:2121	509795	0	True				
ANR	509861	UnaryOperationExpression	! ovector		509795	0					
ANR	509862	UnaryOperator	!		509795	0					
ANR	509863	Identifier	ovector		509795	1					
ANR	509864	CompoundStatement		10:15:278:278	509795	1					
ANR	509865	ExpressionStatement	"EXCEPT ( ""No memory to allocate data for re match"" )"	103:2:2155:2204	509795	0	True				
ANR	509866	CallExpression	"EXCEPT ( ""No memory to allocate data for re match"" )"		509795	0					
ANR	509867	Callee	EXCEPT		509795	0					
ANR	509868	Identifier	EXCEPT		509795	0					
ANR	509869	ArgumentList	"""No memory to allocate data for re match"""		509795	1					
ANR	509870	Argument	"""No memory to allocate data for re match"""		509795	0					
ANR	509871	PrimaryExpression	"""No memory to allocate data for re match"""		509795	0					
ANR	509872	IdentifierDeclStatement	"int rc = pcre_exec ( re , NULL , string . Value ( ) , string . Length ( ) , 0 , options , ovector , oveccount ) ;"	106:1:2211:2408	509795	6	True				
ANR	509873	IdentifierDecl	"rc = pcre_exec ( re , NULL , string . Value ( ) , string . Length ( ) , 0 , options , ovector , oveccount )"		509795	0					
ANR	509874	IdentifierDeclType	int		509795	0					
ANR	509875	Identifier	rc		509795	1					
ANR	509876	AssignmentExpression	"rc = pcre_exec ( re , NULL , string . Value ( ) , string . Length ( ) , 0 , options , ovector , oveccount )"		509795	2		=			
ANR	509877	Identifier	rc		509795	0					
ANR	509878	CallExpression	"pcre_exec ( re , NULL , string . Value ( ) , string . Length ( ) , 0 , options , ovector , oveccount )"		509795	1					
ANR	509879	Callee	pcre_exec		509795	0					
ANR	509880	Identifier	pcre_exec		509795	0					
ANR	509881	ArgumentList	re		509795	1					
ANR	509882	Argument	re		509795	0					
ANR	509883	Identifier	re		509795	0					
ANR	509884	Argument	NULL		509795	1					
ANR	509885	Identifier	NULL		509795	0					
ANR	509886	Argument	string . Value ( )		509795	2					
ANR	509887	CallExpression	string . Value ( )		509795	0					
ANR	509888	Callee	string . Value		509795	0					
ANR	509889	MemberAccess	string . Value		509795	0					
ANR	509890	Identifier	string		509795	0					
ANR	509891	Identifier	Value		509795	1					
ANR	509892	ArgumentList			509795	1					
ANR	509893	Argument	string . Length ( )		509795	3					
ANR	509894	CallExpression	string . Length ( )		509795	0					
ANR	509895	Callee	string . Length		509795	0					
ANR	509896	MemberAccess	string . Length		509795	0					
ANR	509897	Identifier	string		509795	0					
ANR	509898	Identifier	Length		509795	1					
ANR	509899	ArgumentList			509795	1					
ANR	509900	Argument	0		509795	4					
ANR	509901	PrimaryExpression	0		509795	0					
ANR	509902	Argument	options		509795	5					
ANR	509903	Identifier	options		509795	0					
ANR	509904	Argument	ovector		509795	6					
ANR	509905	Identifier	ovector		509795	0					
ANR	509906	Argument	oveccount		509795	7					
ANR	509907	Identifier	oveccount		509795	0					
ANR	509908	IfStatement	if ( NULL != groups )		509795	7					
ANR	509909	Condition	NULL != groups	115:5:2416:2429	509795	0	True				
ANR	509910	EqualityExpression	NULL != groups		509795	0		!=			
ANR	509911	Identifier	NULL		509795	0					
ANR	509912	Identifier	groups		509795	1					
ANR	509913	CompoundStatement		24:21:586:586	509795	1					
ANR	509914	ForStatement	for ( int i = 0 ; i < rc ; i ++ )		509795	0					
ANR	509915	ForInit	int i = 0 ;	116:7:2441:2450	509795	0	True				
ANR	509916	IdentifierDeclStatement	int i = 0 ;		509795	0					
ANR	509917	IdentifierDecl	i = 0		509795	0					
ANR	509918	IdentifierDeclType	int		509795	0					
ANR	509919	Identifier	i		509795	1					
ANR	509920	AssignmentExpression	i = 0		509795	2		=			
ANR	509921	Identifier	i		509795	0					
ANR	509922	PrimaryExpression	0		509795	1					
ANR	509923	Condition	i < rc	116:18:2452:2457	509795	1	True				
ANR	509924	RelationalExpression	i < rc		509795	0		<			
ANR	509925	Identifier	i		509795	0					
ANR	509926	Identifier	rc		509795	1					
ANR	509927	PostIncDecOperationExpression	i ++	116:26:2460:2462	509795	2	True				
ANR	509928	Identifier	i		509795	0					
ANR	509929	IncDec	++		509795	1					
ANR	509930	CompoundStatement		25:31:619:619	509795	3					
ANR	509931	ExpressionStatement	"( * groups ) [ i ] = string . Substr ( ovector [ i * 2 ] , ovector [ i * 2 + 1 ] - 1 )"	117:3:2470:2538	509795	0	True				
ANR	509932	AssignmentExpression	"( * groups ) [ i ] = string . Substr ( ovector [ i * 2 ] , ovector [ i * 2 + 1 ] - 1 )"		509795	0		=			
ANR	509933	ArrayIndexing	( * groups ) [ i ]		509795	0					
ANR	509934	UnaryOperationExpression	* groups		509795	0					
ANR	509935	UnaryOperator	*		509795	0					
ANR	509936	Identifier	groups		509795	1					
ANR	509937	Identifier	i		509795	1					
ANR	509938	CallExpression	"string . Substr ( ovector [ i * 2 ] , ovector [ i * 2 + 1 ] - 1 )"		509795	1					
ANR	509939	Callee	string . Substr		509795	0					
ANR	509940	MemberAccess	string . Substr		509795	0					
ANR	509941	Identifier	string		509795	0					
ANR	509942	Identifier	Substr		509795	1					
ANR	509943	ArgumentList	ovector [ i * 2 ]		509795	1					
ANR	509944	Argument	ovector [ i * 2 ]		509795	0					
ANR	509945	ArrayIndexing	ovector [ i * 2 ]		509795	0					
ANR	509946	Identifier	ovector		509795	0					
ANR	509947	MultiplicativeExpression	i * 2		509795	1		*			
ANR	509948	Identifier	i		509795	0					
ANR	509949	PrimaryExpression	2		509795	1					
ANR	509950	Argument	ovector [ i * 2 + 1 ] - 1		509795	1					
ANR	509951	AdditiveExpression	ovector [ i * 2 + 1 ] - 1		509795	0		-			
ANR	509952	ArrayIndexing	ovector [ i * 2 + 1 ]		509795	0					
ANR	509953	Identifier	ovector		509795	0					
ANR	509954	AdditiveExpression	i * 2 + 1		509795	1		+			
ANR	509955	MultiplicativeExpression	i * 2		509795	0		*			
ANR	509956	Identifier	i		509795	0					
ANR	509957	PrimaryExpression	2		509795	1					
ANR	509958	PrimaryExpression	1		509795	1					
ANR	509959	PrimaryExpression	1		509795	1					
ANR	509960	ExpressionStatement	free ( ovector )	121:1:2549:2562	509795	8	True				
ANR	509961	CallExpression	free ( ovector )		509795	0					
ANR	509962	Callee	free		509795	0					
ANR	509963	Identifier	free		509795	0					
ANR	509964	ArgumentList	ovector		509795	1					
ANR	509965	Argument	ovector		509795	0					
ANR	509966	Identifier	ovector		509795	0					
ANR	509967	ReturnStatement	return rc > 0 ;	122:1:2565:2578	509795	9	True				
ANR	509968	RelationalExpression	rc > 0		509795	0		>			
ANR	509969	Identifier	rc		509795	0					
ANR	509970	PrimaryExpression	0		509795	1					
ANR	509971	ReturnType	bool		509795	1					
ANR	509972	Identifier	Regex :: match		509795	2					
ANR	509973	ParameterList	"const MyString & string , ExtArray < MyString > * groups"		509795	3					
ANR	509974	Parameter	const MyString & string	90:13:1787:1809	509795	0	True				
ANR	509975	ParameterType	const MyString &		509795	0					
ANR	509976	Identifier	string		509795	1					
ANR	509977	Parameter	ExtArray < MyString > * groups	91:4:1816:1842	509795	1	True				
ANR	509978	ParameterType	ExtArray < MyString > *		509795	0					
ANR	509979	Identifier	groups		509795	1					
ANR	509980	CFGEntryNode	ENTRY		509795		True				
ANR	509981	CFGExitNode	EXIT		509795		True				
ANR	509982	Symbol	string		509795						
ANR	509983	Symbol	group_count		509795						
ANR	509984	Symbol	pcre_exec		509795						
ANR	509985	Symbol	oveccount		509795						
ANR	509986	Symbol	string . Substr		509795						
ANR	509987	Symbol	* * groups		509795						
ANR	509988	Symbol	options		509795						
ANR	509989	Symbol	PCRE_INFO_CAPTURECOUNT		509795						
ANR	509990	Symbol	string . Value		509795						
ANR	509991	Symbol	ovector		509795						
ANR	509992	Symbol	malloc		509795						
ANR	509993	Symbol	NULL		509795						
ANR	509994	Symbol	& group_count		509795						
ANR	509995	Symbol	this		509795						
ANR	509996	Symbol	false		509795						
ANR	509997	Symbol	groups		509795						
ANR	509998	Symbol	i		509795						
ANR	509999	Symbol	this -> isInitialized		509795						
ANR	510000	Symbol	* this		509795						
ANR	510001	Symbol	rc		509795						
ANR	510002	Symbol	* ovector		509795						
ANR	510003	Symbol	string . Length		509795						
ANR	510004	Symbol	re		509795						
ANR	510005	Symbol	* i		509795						
ANR	510006	Symbol	* groups		509795						
ANR	510007	Function	Regex :: isInitialized	131:0:2759:2820							
ANR	510008	FunctionDef	Regex :: isInitialized ()		510007	0					
ANR	510009	CompoundStatement		133:0:2788:2820	510007	0					
ANR	510010	ReturnStatement	return ( this -> re != NULL ) ;	134:1:2791:2818	510007	0	True				
ANR	510011	EqualityExpression	this -> re != NULL		510007	0		!=			
ANR	510012	PtrMemberAccess	this -> re		510007	0					
ANR	510013	Identifier	this		510007	0					
ANR	510014	Identifier	re		510007	1					
ANR	510015	Identifier	NULL		510007	1					
ANR	510016	ReturnType	bool		510007	1					
ANR	510017	Identifier	Regex :: isInitialized		510007	2					
ANR	510018	ParameterList			510007	3					
ANR	510019	CFGEntryNode	ENTRY		510007		True				
ANR	510020	CFGExitNode	EXIT		510007		True				
ANR	510021	Symbol	* this		510007						
ANR	510022	Symbol	NULL		510007						
ANR	510023	Symbol	this		510007						
ANR	510024	Symbol	this -> re		510007						
ANR	510025	Function	Regex :: clone_re	137:0:2823:3140							
ANR	510026	FunctionDef	Regex :: clone_re (pcre * re)		510025	0					
ANR	510027	CompoundStatement		139:0:2857:3140	510025	0					
ANR	510028	IfStatement	if ( ! re )		510025	0					
ANR	510029	Condition	! re	140:5:2864:2866	510025	0	True				
ANR	510030	UnaryOperationExpression	! re		510025	0					
ANR	510031	UnaryOperator	!		510025	0					
ANR	510032	Identifier	re		510025	1					
ANR	510033	CompoundStatement		2:10:11:11	510025	1					
ANR	510034	ReturnStatement	return NULL ;	141:2:2873:2884	510025	0	True				
ANR	510035	Identifier	NULL		510025	0					
ANR	510036	IdentifierDeclStatement	size_t size ;	144:1:2891:2902	510025	1	True				
ANR	510037	IdentifierDecl	size		510025	0					
ANR	510038	IdentifierDeclType	size_t		510025	0					
ANR	510039	Identifier	size		510025	1					
ANR	510040	ExpressionStatement	"pcre_fullinfo ( re , NULL , PCRE_INFO_SIZE , & size )"	145:1:2905:2951	510025	2	True				
ANR	510041	CallExpression	"pcre_fullinfo ( re , NULL , PCRE_INFO_SIZE , & size )"		510025	0					
ANR	510042	Callee	pcre_fullinfo		510025	0					
ANR	510043	Identifier	pcre_fullinfo		510025	0					
ANR	510044	ArgumentList	re		510025	1					
ANR	510045	Argument	re		510025	0					
ANR	510046	Identifier	re		510025	0					
ANR	510047	Argument	NULL		510025	1					
ANR	510048	Identifier	NULL		510025	0					
ANR	510049	Argument	PCRE_INFO_SIZE		510025	2					
ANR	510050	Identifier	PCRE_INFO_SIZE		510025	0					
ANR	510051	Argument	& size		510025	3					
ANR	510052	UnaryOperationExpression	& size		510025	0					
ANR	510053	UnaryOperator	&		510025	0					
ANR	510054	Identifier	size		510025	1					
ANR	510055	IdentifierDeclStatement	pcre * newre = ( pcre * ) malloc ( size * sizeof ( char ) ) ;	147:1:2955:3006	510025	3	True				
ANR	510056	IdentifierDecl	* newre = ( pcre * ) malloc ( size * sizeof ( char ) )		510025	0					
ANR	510057	IdentifierDeclType	pcre *		510025	0					
ANR	510058	Identifier	newre		510025	1					
ANR	510059	AssignmentExpression	* newre = ( pcre * ) malloc ( size * sizeof ( char ) )		510025	2		=			
ANR	510060	Identifier	newre		510025	0					
ANR	510061	CastExpression	( pcre * ) malloc ( size * sizeof ( char ) )		510025	1					
ANR	510062	CastTarget	pcre *		510025	0					
ANR	510063	CallExpression	malloc ( size * sizeof ( char ) )		510025	1					
ANR	510064	Callee	malloc		510025	0					
ANR	510065	Identifier	malloc		510025	0					
ANR	510066	ArgumentList	size * sizeof ( char )		510025	1					
ANR	510067	Argument	size * sizeof ( char )		510025	0					
ANR	510068	MultiplicativeExpression	size * sizeof ( char )		510025	0		*			
ANR	510069	Identifier	size		510025	0					
ANR	510070	SizeofExpression	sizeof ( char )		510025	1					
ANR	510071	Sizeof	sizeof		510025	0					
ANR	510072	SizeofOperand	char		510025	1					
ANR	510073	IfStatement	if ( ! newre )		510025	4					
ANR	510074	Condition	! newre	148:5:3013:3018	510025	0	True				
ANR	510075	UnaryOperationExpression	! newre		510025	0					
ANR	510076	UnaryOperator	!		510025	0					
ANR	510077	Identifier	newre		510025	1					
ANR	510078	CompoundStatement		10:13:163:163	510025	1					
ANR	510079	ExpressionStatement	"EXCEPT ( ""No memory to allocate re clone"" )"	150:2:3052:3092	510025	0	True				
ANR	510080	CallExpression	"EXCEPT ( ""No memory to allocate re clone"" )"		510025	0					
ANR	510081	Callee	EXCEPT		510025	0					
ANR	510082	Identifier	EXCEPT		510025	0					
ANR	510083	ArgumentList	"""No memory to allocate re clone"""		510025	1					
ANR	510084	Argument	"""No memory to allocate re clone"""		510025	0					
ANR	510085	PrimaryExpression	"""No memory to allocate re clone"""		510025	0					
ANR	510086	ExpressionStatement	"memcpy ( newre , re , size )"	153:1:3099:3122	510025	5	True				
ANR	510087	CallExpression	"memcpy ( newre , re , size )"		510025	0					
ANR	510088	Callee	memcpy		510025	0					
ANR	510089	Identifier	memcpy		510025	0					
ANR	510090	ArgumentList	newre		510025	1					
ANR	510091	Argument	newre		510025	0					
ANR	510092	Identifier	newre		510025	0					
ANR	510093	Argument	re		510025	1					
ANR	510094	Identifier	re		510025	0					
ANR	510095	Argument	size		510025	2					
ANR	510096	Identifier	size		510025	0					
ANR	510097	ReturnStatement	return newre ;	155:1:3126:3138	510025	6	True				
ANR	510098	Identifier	newre		510025	0					
ANR	510099	ReturnType	pcre *		510025	1					
ANR	510100	Identifier	Regex :: clone_re		510025	2					
ANR	510101	ParameterList	pcre * re		510025	3					
ANR	510102	Parameter	pcre * re	138:16:2846:2854	510025	0	True				
ANR	510103	ParameterType	pcre *		510025	0					
ANR	510104	Identifier	re		510025	1					
ANR	510105	CFGEntryNode	ENTRY		510025		True				
ANR	510106	CFGExitNode	EXIT		510025		True				
ANR	510107	Symbol	PCRE_INFO_SIZE		510025						
ANR	510108	Symbol	malloc		510025						
ANR	510109	Symbol	re		510025						
ANR	510110	Symbol	NULL		510025						
ANR	510111	Symbol	size		510025						
ANR	510112	Symbol	& size		510025						
ANR	510113	Symbol	newre		510025						
