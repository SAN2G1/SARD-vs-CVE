command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1301822	File	data/converged/CVE-2011-4930_htcondor/exception_handling.WINDOWS.cpp								
ANR	1301823	DeclStmt									
ANR	1301824	Decl							TCHAR	TCHAR [ MAX_PATH ]	ExceptionHandler :: m_szLogFileName
ANR	1301825	DeclStmt									
ANR	1301826	Decl							LPTOP_LEVEL_EXCEPTION_FILTER	LPTOP_LEVEL_EXCEPTION_FILTER	ExceptionHandler :: m_previousFilter
ANR	1301827	DeclStmt									
ANR	1301828	Decl							HANDLE	HANDLE	ExceptionHandler :: m_hReportFile
ANR	1301829	DeclStmt									
ANR	1301830	Decl							pid_t	pid_t	ExceptionHandler :: m_pid
ANR	1301831	DeclStmt									
ANR	1301832	Decl							ExceptionHandler :: SYMINITIALIZEPROC	ExceptionHandler :: SYMINITIALIZEPROC	ExceptionHandler :: _SymInitialize
ANR	1301833	DeclStmt									
ANR	1301834	Decl							ExceptionHandler :: SYMCLEANUPPROC	ExceptionHandler :: SYMCLEANUPPROC	ExceptionHandler :: _SymCleanup
ANR	1301835	DeclStmt									
ANR	1301836	Decl							ExceptionHandler :: STACKWALKPROC	ExceptionHandler :: STACKWALKPROC	ExceptionHandler :: _StackWalk
ANR	1301837	DeclStmt									
ANR	1301838	Decl							ExceptionHandler :: SYMFUNCTIONTABLEACCESSPROC	ExceptionHandler :: SYMFUNCTIONTABLEACCESSPROC	ExceptionHandler :: _SymFunctionTableAccess
ANR	1301839	DeclStmt									
ANR	1301840	Decl							ExceptionHandler :: SYMGETMODULEBASEPROC	ExceptionHandler :: SYMGETMODULEBASEPROC	ExceptionHandler :: _SymGetModuleBase
ANR	1301841	DeclStmt									
ANR	1301842	Decl							ExceptionHandler :: SYMGETSYMFROMADDRPROC	ExceptionHandler :: SYMGETSYMFROMADDRPROC	ExceptionHandler :: _SymGetSymFromAddr
ANR	1301843	DeclStmt									
ANR	1301844	Decl							ExceptionHandler :: SYMGETLINEFROMADDRPROC	ExceptionHandler :: SYMGETLINEFROMADDRPROC	ExceptionHandler :: _SymGetLineFromAddr
ANR	1301845	DeclStmt									
ANR	1301846	Decl							ExceptionHandler	ExceptionHandler	g_ExceptionHandler
ANR	1301847	Function	ExceptionHandler :: ExceptionHandler	50:0:2034:2664							
ANR	1301848	FunctionDef	ExceptionHandler :: ExceptionHandler ()		1301847	0					
ANR	1301849	CompoundStatement		50:37:2071:2664	1301847	0					
ANR	1301850	ExpressionStatement	m_previousFilter = SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )	52:4:2132:2207	1301847	0	True				
ANR	1301851	AssignmentExpression	m_previousFilter = SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )		1301847	0		=			
ANR	1301852	Identifier	m_previousFilter		1301847	0					
ANR	1301853	CallExpression	SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )		1301847	1					
ANR	1301854	Callee	SetUnhandledExceptionFilter		1301847	0					
ANR	1301855	Identifier	SetUnhandledExceptionFilter		1301847	0					
ANR	1301856	ArgumentList	MSJUnhandledExceptionFilter		1301847	1					
ANR	1301857	Argument	MSJUnhandledExceptionFilter		1301847	0					
ANR	1301858	Identifier	MSJUnhandledExceptionFilter		1301847	0					
ANR	1301859	ExpressionStatement	"GetModuleFileName ( 0 , m_szLogFileName , MAX_PATH )"	54:4:2285:2334	1301847	1	True				
ANR	1301860	CallExpression	"GetModuleFileName ( 0 , m_szLogFileName , MAX_PATH )"		1301847	0					
ANR	1301861	Callee	GetModuleFileName		1301847	0					
ANR	1301862	Identifier	GetModuleFileName		1301847	0					
ANR	1301863	ArgumentList	0		1301847	1					
ANR	1301864	Argument	0		1301847	0					
ANR	1301865	PrimaryExpression	0		1301847	0					
ANR	1301866	Argument	m_szLogFileName		1301847	1					
ANR	1301867	Identifier	m_szLogFileName		1301847	0					
ANR	1301868	Argument	MAX_PATH		1301847	2					
ANR	1301869	Identifier	MAX_PATH		1301847	0					
ANR	1301870	IdentifierDeclStatement	"PTSTR pszDot = _tcsrchr ( m_szLogFileName , _T ( '.' ) ) ;"	57:1:2434:2485	1301847	2	True				
ANR	1301871	IdentifierDecl	"pszDot = _tcsrchr ( m_szLogFileName , _T ( '.' ) )"		1301847	0					
ANR	1301872	IdentifierDeclType	PTSTR		1301847	0					
ANR	1301873	Identifier	pszDot		1301847	1					
ANR	1301874	AssignmentExpression	"pszDot = _tcsrchr ( m_szLogFileName , _T ( '.' ) )"		1301847	2		=			
ANR	1301875	Identifier	pszDot		1301847	0					
ANR	1301876	CallExpression	"_tcsrchr ( m_szLogFileName , _T ( '.' ) )"		1301847	1					
ANR	1301877	Callee	_tcsrchr		1301847	0					
ANR	1301878	Identifier	_tcsrchr		1301847	0					
ANR	1301879	ArgumentList	m_szLogFileName		1301847	1					
ANR	1301880	Argument	m_szLogFileName		1301847	0					
ANR	1301881	Identifier	m_szLogFileName		1301847	0					
ANR	1301882	Argument	_T ( '.' )		1301847	1					
ANR	1301883	CallExpression	_T ( '.' )		1301847	0					
ANR	1301884	Callee	_T		1301847	0					
ANR	1301885	Identifier	_T		1301847	0					
ANR	1301886	ArgumentList	'.'		1301847	1					
ANR	1301887	Argument	'.'		1301847	0					
ANR	1301888	PrimaryExpression	'.'		1301847	0					
ANR	1301889	IfStatement	if ( pszDot )		1301847	3					
ANR	1301890	Condition	pszDot	58:9:2496:2501	1301847	0	True				
ANR	1301891	Identifier	pszDot		1301847	0					
ANR	1301892	CompoundStatement		9:21:436:436	1301847	1					
ANR	1301893	ExpressionStatement	pszDot ++	59:2:2520:2528	1301847	0	True				
ANR	1301894	PostIncDecOperationExpression	pszDot ++		1301847	0					
ANR	1301895	Identifier	pszDot		1301847	0					
ANR	1301896	IncDec	++		1301847	1					
ANR	1301897	IfStatement	if ( _tcslen ( pszDot ) >= 3 )		1301847	1					
ANR	1301898	Condition	_tcslen ( pszDot ) >= 3	60:13:2569:2588	1301847	0	True				
ANR	1301899	RelationalExpression	_tcslen ( pszDot ) >= 3		1301847	0		>=			
ANR	1301900	CallExpression	_tcslen ( pszDot )		1301847	0					
ANR	1301901	Callee	_tcslen		1301847	0					
ANR	1301902	Identifier	_tcslen		1301847	0					
ANR	1301903	ArgumentList	pszDot		1301847	1					
ANR	1301904	Argument	pszDot		1301847	0					
ANR	1301905	Identifier	pszDot		1301847	0					
ANR	1301906	PrimaryExpression	3		1301847	1					
ANR	1301907	ExpressionStatement	"_tcscpy ( pszDot , _T ( ""RPT"" ) )"	61:12:2604:2632	1301847	1	True				
ANR	1301908	CallExpression	"_tcscpy ( pszDot , _T ( ""RPT"" ) )"		1301847	0					
ANR	1301909	Callee	_tcscpy		1301847	0					
ANR	1301910	Identifier	_tcscpy		1301847	0					
ANR	1301911	ArgumentList	pszDot		1301847	1					
ANR	1301912	Argument	pszDot		1301847	0					
ANR	1301913	Identifier	pszDot		1301847	0					
ANR	1301914	Argument	"_T ( ""RPT"" )"		1301847	1					
ANR	1301915	CallExpression	"_T ( ""RPT"" )"		1301847	0					
ANR	1301916	Callee	_T		1301847	0					
ANR	1301917	Identifier	_T		1301847	0					
ANR	1301918	ArgumentList	"""RPT"""		1301847	1					
ANR	1301919	Argument	"""RPT"""		1301847	0					
ANR	1301920	PrimaryExpression	"""RPT"""		1301847	0					
ANR	1301921	Identifier	ExceptionHandler :: ExceptionHandler		1301847	1					
ANR	1301922	ParameterList			1301847	2					
ANR	1301923	CFGEntryNode	ENTRY		1301847		True				
ANR	1301924	CFGExitNode	EXIT		1301847		True				
ANR	1301925	Symbol	_T		1301847						
ANR	1301926	Symbol	MSJUnhandledExceptionFilter		1301847						
ANR	1301927	Symbol	m_szLogFileName		1301847						
ANR	1301928	Symbol	m_previousFilter		1301847						
ANR	1301929	Symbol	pszDot		1301847						
ANR	1301930	Symbol	MAX_PATH		1301847						
ANR	1301931	Symbol	_tcslen		1301847						
ANR	1301932	Symbol	_tcsrchr		1301847						
ANR	1301933	Symbol	SetUnhandledExceptionFilter		1301847						
ANR	1301934	Function	ExceptionHandler :: ~ExceptionHandler	66:0:2710:2803							
ANR	1301935	FunctionDef	ExceptionHandler :: ~ExceptionHandler ()		1301934	0					
ANR	1301936	CompoundStatement		66:38:2748:2803	1301934	0					
ANR	1301937	ExpressionStatement	SetUnhandledExceptionFilter ( m_previousFilter )	67:4:2754:2801	1301934	0	True				
ANR	1301938	CallExpression	SetUnhandledExceptionFilter ( m_previousFilter )		1301934	0					
ANR	1301939	Callee	SetUnhandledExceptionFilter		1301934	0					
ANR	1301940	Identifier	SetUnhandledExceptionFilter		1301934	0					
ANR	1301941	ArgumentList	m_previousFilter		1301934	1					
ANR	1301942	Argument	m_previousFilter		1301934	0					
ANR	1301943	Identifier	m_previousFilter		1301934	0					
ANR	1301944	Identifier	ExceptionHandler :: ~ExceptionHandler		1301934	1					
ANR	1301945	ParameterList			1301934	2					
ANR	1301946	CFGEntryNode	ENTRY		1301934		True				
ANR	1301947	CFGExitNode	EXIT		1301934		True				
ANR	1301948	Symbol	m_previousFilter		1301934						
ANR	1301949	Function	ExceptionHandler :: TurnOff	76:0:3124:3209							
ANR	1301950	FunctionDef	ExceptionHandler :: TurnOff ()		1301949	0					
ANR	1301951	CompoundStatement		76:33:3157:3209	1301949	0					
ANR	1301952	ExpressionStatement	SetUnhandledExceptionFilter ( m_previousFilter )	77:1:3160:3207	1301949	0	True				
ANR	1301953	CallExpression	SetUnhandledExceptionFilter ( m_previousFilter )		1301949	0					
ANR	1301954	Callee	SetUnhandledExceptionFilter		1301949	0					
ANR	1301955	Identifier	SetUnhandledExceptionFilter		1301949	0					
ANR	1301956	ArgumentList	m_previousFilter		1301949	1					
ANR	1301957	Argument	m_previousFilter		1301949	0					
ANR	1301958	Identifier	m_previousFilter		1301949	0					
ANR	1301959	ReturnType	void		1301949	1					
ANR	1301960	Identifier	ExceptionHandler :: TurnOff		1301949	2					
ANR	1301961	ParameterList			1301949	3					
ANR	1301962	CFGEntryNode	ENTRY		1301949		True				
ANR	1301963	CFGExitNode	EXIT		1301949		True				
ANR	1301964	Symbol	m_previousFilter		1301949						
ANR	1301965	Function	ExceptionHandler :: TurnOn	80:0:3212:3305							
ANR	1301966	FunctionDef	ExceptionHandler :: TurnOn ()		1301965	0					
ANR	1301967	CompoundStatement		80:32:3244:3305	1301965	0					
ANR	1301968	ExpressionStatement	SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )	81:1:3247:3303	1301965	0	True				
ANR	1301969	CallExpression	SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )		1301965	0					
ANR	1301970	Callee	SetUnhandledExceptionFilter		1301965	0					
ANR	1301971	Identifier	SetUnhandledExceptionFilter		1301965	0					
ANR	1301972	ArgumentList	MSJUnhandledExceptionFilter		1301965	1					
ANR	1301973	Argument	MSJUnhandledExceptionFilter		1301965	0					
ANR	1301974	Identifier	MSJUnhandledExceptionFilter		1301965	0					
ANR	1301975	ReturnType	void		1301965	1					
ANR	1301976	Identifier	ExceptionHandler :: TurnOn		1301965	2					
ANR	1301977	ParameterList			1301965	3					
ANR	1301978	CFGEntryNode	ENTRY		1301965		True				
ANR	1301979	CFGExitNode	EXIT		1301965		True				
ANR	1301980	Symbol	MSJUnhandledExceptionFilter		1301965						
ANR	1301981	Function	ExceptionHandler :: SetLogFileName	87:0:3503:3614							
ANR	1301982	FunctionDef	ExceptionHandler :: SetLogFileName (PTSTR pszLogFileName)		1301981	0					
ANR	1301983	CompoundStatement		87:61:3564:3614	1301981	0					
ANR	1301984	ExpressionStatement	"_tcscpy ( m_szLogFileName , pszLogFileName )"	88:4:3570:3612	1301981	0	True				
ANR	1301985	CallExpression	"_tcscpy ( m_szLogFileName , pszLogFileName )"		1301981	0					
ANR	1301986	Callee	_tcscpy		1301981	0					
ANR	1301987	Identifier	_tcscpy		1301981	0					
ANR	1301988	ArgumentList	m_szLogFileName		1301981	1					
ANR	1301989	Argument	m_szLogFileName		1301981	0					
ANR	1301990	Identifier	m_szLogFileName		1301981	0					
ANR	1301991	Argument	pszLogFileName		1301981	1					
ANR	1301992	Identifier	pszLogFileName		1301981	0					
ANR	1301993	ReturnType	void		1301981	1					
ANR	1301994	Identifier	ExceptionHandler :: SetLogFileName		1301981	2					
ANR	1301995	ParameterList	PTSTR pszLogFileName		1301981	3					
ANR	1301996	Parameter	PTSTR pszLogFileName	87:39:3542:3561	1301981	0	True				
ANR	1301997	ParameterType	PTSTR		1301981	0					
ANR	1301998	Identifier	pszLogFileName		1301981	1					
ANR	1301999	CFGEntryNode	ENTRY		1301981		True				
ANR	1302000	CFGExitNode	EXIT		1301981		True				
ANR	1302001	Symbol	pszLogFileName		1301981						
ANR	1302002	Symbol	m_szLogFileName		1301981						
ANR	1302003	Function	ExceptionHandler :: SetPID	94:0:3814:3877							
ANR	1302004	FunctionDef	ExceptionHandler :: SetPID (pid_t pid)		1302003	0					
ANR	1302005	CompoundStatement		94:42:3856:3877	1302003	0					
ANR	1302006	ExpressionStatement	m_pid = pid	95:4:3863:3874	1302003	0	True				
ANR	1302007	AssignmentExpression	m_pid = pid		1302003	0		=			
ANR	1302008	Identifier	m_pid		1302003	0					
ANR	1302009	Identifier	pid		1302003	1					
ANR	1302010	ReturnType	void		1302003	1					
ANR	1302011	Identifier	ExceptionHandler :: SetPID		1302003	2					
ANR	1302012	ParameterList	pid_t pid		1302003	3					
ANR	1302013	Parameter	pid_t pid	94:31:3845:3853	1302003	0	True				
ANR	1302014	ParameterType	pid_t		1302003	0					
ANR	1302015	Identifier	pid		1302003	1					
ANR	1302016	CFGEntryNode	ENTRY		1302003		True				
ANR	1302017	CFGExitNode	EXIT		1302003		True				
ANR	1302018	Symbol	m_pid		1302003						
ANR	1302019	Symbol	pid		1302003						
ANR	1302020	Function	ExceptionHandler :: MSJUnhandledExceptionFilter	101:0:4066:4938							
ANR	1302021	FunctionDef	ExceptionHandler :: MSJUnhandledExceptionFilter (PEXCEPTION_POINTERS pExceptionInfo)		1302020	0					
ANR	1302022	CompoundStatement		103:0:4207:4938	1302020	0					
ANR	1302023	ExpressionStatement	"dprintf ( D_ALWAYS , ""Intercepting an unhandled exception.\\n"" )"	104:1:4215:4277	1302020	0	True				
ANR	1302024	CallExpression	"dprintf ( D_ALWAYS , ""Intercepting an unhandled exception.\\n"" )"		1302020	0					
ANR	1302025	Callee	dprintf		1302020	0					
ANR	1302026	Identifier	dprintf		1302020	0					
ANR	1302027	ArgumentList	D_ALWAYS		1302020	1					
ANR	1302028	Argument	D_ALWAYS		1302020	0					
ANR	1302029	Identifier	D_ALWAYS		1302020	0					
ANR	1302030	Argument	"""Intercepting an unhandled exception.\\n"""		1302020	1					
ANR	1302031	PrimaryExpression	"""Intercepting an unhandled exception.\\n"""		1302020	0					
ANR	1302032	ExpressionStatement	"m_hReportFile = CreateFile ( m_szLogFileName , GENERIC_WRITE , 0 , 0 , CREATE_ALWAYS , FILE_FLAG_WRITE_THROUGH , 0 )"	105:1:4281:4534	1302020	1	True				
ANR	1302033	AssignmentExpression	"m_hReportFile = CreateFile ( m_szLogFileName , GENERIC_WRITE , 0 , 0 , CREATE_ALWAYS , FILE_FLAG_WRITE_THROUGH , 0 )"		1302020	0		=			
ANR	1302034	Identifier	m_hReportFile		1302020	0					
ANR	1302035	CallExpression	"CreateFile ( m_szLogFileName , GENERIC_WRITE , 0 , 0 , CREATE_ALWAYS , FILE_FLAG_WRITE_THROUGH , 0 )"		1302020	1					
ANR	1302036	Callee	CreateFile		1302020	0					
ANR	1302037	Identifier	CreateFile		1302020	0					
ANR	1302038	ArgumentList	m_szLogFileName		1302020	1					
ANR	1302039	Argument	m_szLogFileName		1302020	0					
ANR	1302040	Identifier	m_szLogFileName		1302020	0					
ANR	1302041	Argument	GENERIC_WRITE		1302020	1					
ANR	1302042	Identifier	GENERIC_WRITE		1302020	0					
ANR	1302043	Argument	0		1302020	2					
ANR	1302044	PrimaryExpression	0		1302020	0					
ANR	1302045	Argument	0		1302020	3					
ANR	1302046	PrimaryExpression	0		1302020	0					
ANR	1302047	Argument	CREATE_ALWAYS		1302020	4					
ANR	1302048	Identifier	CREATE_ALWAYS		1302020	0					
ANR	1302049	Argument	FILE_FLAG_WRITE_THROUGH		1302020	5					
ANR	1302050	Identifier	FILE_FLAG_WRITE_THROUGH		1302020	0					
ANR	1302051	Argument	0		1302020	6					
ANR	1302052	PrimaryExpression	0		1302020	0					
ANR	1302053	IfStatement	if ( m_hReportFile )		1302020	2					
ANR	1302054	Condition	m_hReportFile	112:6:4546:4558	1302020	0	True				
ANR	1302055	Identifier	m_hReportFile		1302020	0					
ANR	1302056	CompoundStatement		10:25:357:357	1302020	1					
ANR	1302057	ExpressionStatement	"dprintf ( D_ALWAYS , ""Dropping a core file.\\n"" )"	113:2:4570:4617	1302020	0	True				
ANR	1302058	CallExpression	"dprintf ( D_ALWAYS , ""Dropping a core file.\\n"" )"		1302020	0					
ANR	1302059	Callee	dprintf		1302020	0					
ANR	1302060	Identifier	dprintf		1302020	0					
ANR	1302061	ArgumentList	D_ALWAYS		1302020	1					
ANR	1302062	Argument	D_ALWAYS		1302020	0					
ANR	1302063	Identifier	D_ALWAYS		1302020	0					
ANR	1302064	Argument	"""Dropping a core file.\\n"""		1302020	1					
ANR	1302065	PrimaryExpression	"""Dropping a core file.\\n"""		1302020	0					
ANR	1302066	ExpressionStatement	GenerateExceptionReport ( pExceptionInfo )	115:8:4687:4728	1302020	1	True				
ANR	1302067	CallExpression	GenerateExceptionReport ( pExceptionInfo )		1302020	0					
ANR	1302068	Callee	GenerateExceptionReport		1302020	0					
ANR	1302069	Identifier	GenerateExceptionReport		1302020	0					
ANR	1302070	ArgumentList	pExceptionInfo		1302020	1					
ANR	1302071	Argument	pExceptionInfo		1302020	0					
ANR	1302072	Identifier	pExceptionInfo		1302020	0					
ANR	1302073	ExpressionStatement	CloseHandle ( m_hReportFile )	116:8:4738:4766	1302020	2	True				
ANR	1302074	CallExpression	CloseHandle ( m_hReportFile )		1302020	0					
ANR	1302075	Callee	CloseHandle		1302020	0					
ANR	1302076	Identifier	CloseHandle		1302020	0					
ANR	1302077	ArgumentList	m_hReportFile		1302020	1					
ANR	1302078	Argument	m_hReportFile		1302020	0					
ANR	1302079	Identifier	m_hReportFile		1302020	0					
ANR	1302080	ExpressionStatement	m_hReportFile = 0	117:2:4778:4795	1302020	3	True				
ANR	1302081	AssignmentExpression	m_hReportFile = 0		1302020	0		=			
ANR	1302082	Identifier	m_hReportFile		1302020	0					
ANR	1302083	PrimaryExpression	0		1302020	1					
ANR	1302084	IfStatement	if ( m_previousFilter )		1302020	3					
ANR	1302085	Condition	m_previousFilter	119:9:4813:4828	1302020	0	True				
ANR	1302086	Identifier	m_previousFilter		1302020	0					
ANR	1302087	ReturnStatement	return m_previousFilter ( pExceptionInfo ) ;	120:2:4842:4883	1302020	1	True				
ANR	1302088	CallExpression	m_previousFilter ( pExceptionInfo )		1302020	0					
ANR	1302089	Callee	m_previousFilter		1302020	0					
ANR	1302090	Identifier	m_previousFilter		1302020	0					
ANR	1302091	ArgumentList	pExceptionInfo		1302020	1					
ANR	1302092	Argument	pExceptionInfo		1302020	0					
ANR	1302093	Identifier	pExceptionInfo		1302020	0					
ANR	1302094	ElseStatement	else		1302020	0					
ANR	1302095	ReturnStatement	return EXCEPTION_CONTINUE_SEARCH ;	122:2:4904:4936	1302020	0	True				
ANR	1302096	Identifier	EXCEPTION_CONTINUE_SEARCH		1302020	0					
ANR	1302097	ReturnType	LONG WINAPI		1302020	1					
ANR	1302098	Identifier	ExceptionHandler :: MSJUnhandledExceptionFilter		1302020	2					
ANR	1302099	ParameterList	PEXCEPTION_POINTERS pExceptionInfo		1302020	3					
ANR	1302100	Parameter	PEXCEPTION_POINTERS pExceptionInfo	102:45:4170:4203	1302020	0	True				
ANR	1302101	ParameterType	PEXCEPTION_POINTERS		1302020	0					
ANR	1302102	Identifier	pExceptionInfo		1302020	1					
ANR	1302103	CFGEntryNode	ENTRY		1302020		True				
ANR	1302104	CFGExitNode	EXIT		1302020		True				
ANR	1302105	Symbol	CreateFile		1302020						
ANR	1302106	Symbol	CREATE_ALWAYS		1302020						
ANR	1302107	Symbol	pExceptionInfo		1302020						
ANR	1302108	Symbol	m_szLogFileName		1302020						
ANR	1302109	Symbol	GENERIC_WRITE		1302020						
ANR	1302110	Symbol	D_ALWAYS		1302020						
ANR	1302111	Symbol	m_previousFilter		1302020						
ANR	1302112	Symbol	EXCEPTION_CONTINUE_SEARCH		1302020						
ANR	1302113	Symbol	FILE_FLAG_WRITE_THROUGH		1302020						
ANR	1302114	Symbol	m_hReportFile		1302020						
ANR	1302115	Function	ExceptionHandler :: GenerateExceptionReport	128:0:5252:7640							
ANR	1302116	FunctionDef	ExceptionHandler :: GenerateExceptionReport (PEXCEPTION_POINTERS pExceptionInfo)		1302115	0					
ANR	1302117	CompoundStatement		129:40:5340:7640	1302115	0					
ANR	1302118	ExpressionStatement	"_tprintf ( _T ( ""//=====================================================\\n"" ) )"	131:4:5378:5453	1302115	0	True				
ANR	1302119	CallExpression	"_tprintf ( _T ( ""//=====================================================\\n"" ) )"		1302115	0					
ANR	1302120	Callee	_tprintf		1302115	0					
ANR	1302121	Identifier	_tprintf		1302115	0					
ANR	1302122	ArgumentList	"_T ( ""//=====================================================\\n"" )"		1302115	1					
ANR	1302123	Argument	"_T ( ""//=====================================================\\n"" )"		1302115	0					
ANR	1302124	CallExpression	"_T ( ""//=====================================================\\n"" )"		1302115	0					
ANR	1302125	Callee	_T		1302115	0					
ANR	1302126	Identifier	_T		1302115	0					
ANR	1302127	ArgumentList	"""//=====================================================\\n"""		1302115	1					
ANR	1302128	Argument	"""//=====================================================\\n"""		1302115	0					
ANR	1302129	PrimaryExpression	"""//=====================================================\\n"""		1302115	0					
ANR	1302130	IdentifierDeclStatement	PEXCEPTION_RECORD pExceptionRecord = pExceptionInfo -> ExceptionRecord ;	132:4:5459:5527	1302115	1	True				
ANR	1302131	IdentifierDecl	pExceptionRecord = pExceptionInfo -> ExceptionRecord		1302115	0					
ANR	1302132	IdentifierDeclType	PEXCEPTION_RECORD		1302115	0					
ANR	1302133	Identifier	pExceptionRecord		1302115	1					
ANR	1302134	AssignmentExpression	pExceptionRecord = pExceptionInfo -> ExceptionRecord		1302115	2		=			
ANR	1302135	Identifier	pExceptionRecord		1302115	0					
ANR	1302136	PtrMemberAccess	pExceptionInfo -> ExceptionRecord		1302115	1					
ANR	1302137	Identifier	pExceptionInfo		1302115	0					
ANR	1302138	Identifier	ExceptionRecord		1302115	1					
ANR	1302139	ExpressionStatement	"_tprintf ( _T ( ""PID: %d\\n"" ) , m_pid )"	134:1:5571:5607	1302115	2	True				
ANR	1302140	CallExpression	"_tprintf ( _T ( ""PID: %d\\n"" ) , m_pid )"		1302115	0					
ANR	1302141	Callee	_tprintf		1302115	0					
ANR	1302142	Identifier	_tprintf		1302115	0					
ANR	1302143	ArgumentList	"_T ( ""PID: %d\\n"" )"		1302115	1					
ANR	1302144	Argument	"_T ( ""PID: %d\\n"" )"		1302115	0					
ANR	1302145	CallExpression	"_T ( ""PID: %d\\n"" )"		1302115	0					
ANR	1302146	Callee	_T		1302115	0					
ANR	1302147	Identifier	_T		1302115	0					
ANR	1302148	ArgumentList	"""PID: %d\\n"""		1302115	1					
ANR	1302149	Argument	"""PID: %d\\n"""		1302115	0					
ANR	1302150	PrimaryExpression	"""PID: %d\\n"""		1302115	0					
ANR	1302151	Argument	m_pid		1302115	1					
ANR	1302152	Identifier	m_pid		1302115	0					
ANR	1302153	ExpressionStatement	"_tprintf ( _T ( ""Exception code: %08X %s\\n"" ) , pExceptionRecord -> ExceptionCode , GetExceptionString ( pExceptionRecord -> ExceptionCode ) )"	136:4:5666:5829	1302115	3	True				
ANR	1302154	CallExpression	"_tprintf ( _T ( ""Exception code: %08X %s\\n"" ) , pExceptionRecord -> ExceptionCode , GetExceptionString ( pExceptionRecord -> ExceptionCode ) )"		1302115	0					
ANR	1302155	Callee	_tprintf		1302115	0					
ANR	1302156	Identifier	_tprintf		1302115	0					
ANR	1302157	ArgumentList	"_T ( ""Exception code: %08X %s\\n"" )"		1302115	1					
ANR	1302158	Argument	"_T ( ""Exception code: %08X %s\\n"" )"		1302115	0					
ANR	1302159	CallExpression	"_T ( ""Exception code: %08X %s\\n"" )"		1302115	0					
ANR	1302160	Callee	_T		1302115	0					
ANR	1302161	Identifier	_T		1302115	0					
ANR	1302162	ArgumentList	"""Exception code: %08X %s\\n"""		1302115	1					
ANR	1302163	Argument	"""Exception code: %08X %s\\n"""		1302115	0					
ANR	1302164	PrimaryExpression	"""Exception code: %08X %s\\n"""		1302115	0					
ANR	1302165	Argument	pExceptionRecord -> ExceptionCode		1302115	1					
ANR	1302166	PtrMemberAccess	pExceptionRecord -> ExceptionCode		1302115	0					
ANR	1302167	Identifier	pExceptionRecord		1302115	0					
ANR	1302168	Identifier	ExceptionCode		1302115	1					
ANR	1302169	Argument	GetExceptionString ( pExceptionRecord -> ExceptionCode )		1302115	2					
ANR	1302170	CallExpression	GetExceptionString ( pExceptionRecord -> ExceptionCode )		1302115	0					
ANR	1302171	Callee	GetExceptionString		1302115	0					
ANR	1302172	Identifier	GetExceptionString		1302115	0					
ANR	1302173	ArgumentList	pExceptionRecord -> ExceptionCode		1302115	1					
ANR	1302174	Argument	pExceptionRecord -> ExceptionCode		1302115	0					
ANR	1302175	PtrMemberAccess	pExceptionRecord -> ExceptionCode		1302115	0					
ANR	1302176	Identifier	pExceptionRecord		1302115	0					
ANR	1302177	Identifier	ExceptionCode		1302115	1					
ANR	1302178	IdentifierDeclStatement	TCHAR szFaultingModule [ MAX_PATH ] ;	140:4:5894:5926	1302115	4	True				
ANR	1302179	IdentifierDecl	szFaultingModule [ MAX_PATH ]		1302115	0					
ANR	1302180	IdentifierDeclType	TCHAR [ MAX_PATH ]		1302115	0					
ANR	1302181	Identifier	szFaultingModule		1302115	1					
ANR	1302182	Identifier	MAX_PATH		1302115	2					
ANR	1302183	IdentifierDeclStatement	"DWORD section , offset ;"	141:1:5933:5954	1302115	5	True				
ANR	1302184	IdentifierDecl	section		1302115	0					
ANR	1302185	IdentifierDeclType	DWORD		1302115	0					
ANR	1302186	Identifier	section		1302115	1					
ANR	1302187	IdentifierDecl	offset		1302115	1					
ANR	1302188	IdentifierDeclType	DWORD		1302115	0					
ANR	1302189	Identifier	offset		1302115	1					
ANR	1302190	ExpressionStatement	"GetLogicalAddress ( pExceptionRecord -> ExceptionAddress , szFaultingModule , sizeof ( szFaultingModule ) , section , offset )"	142:4:5960:6151	1302115	6	True				
ANR	1302191	CallExpression	"GetLogicalAddress ( pExceptionRecord -> ExceptionAddress , szFaultingModule , sizeof ( szFaultingModule ) , section , offset )"		1302115	0					
ANR	1302192	Callee	GetLogicalAddress		1302115	0					
ANR	1302193	Identifier	GetLogicalAddress		1302115	0					
ANR	1302194	ArgumentList	pExceptionRecord -> ExceptionAddress		1302115	1					
ANR	1302195	Argument	pExceptionRecord -> ExceptionAddress		1302115	0					
ANR	1302196	PtrMemberAccess	pExceptionRecord -> ExceptionAddress		1302115	0					
ANR	1302197	Identifier	pExceptionRecord		1302115	0					
ANR	1302198	Identifier	ExceptionAddress		1302115	1					
ANR	1302199	Argument	szFaultingModule		1302115	1					
ANR	1302200	Identifier	szFaultingModule		1302115	0					
ANR	1302201	Argument	sizeof ( szFaultingModule )		1302115	2					
ANR	1302202	SizeofExpression	sizeof ( szFaultingModule )		1302115	0					
ANR	1302203	Sizeof	sizeof		1302115	0					
ANR	1302204	SizeofOperand	szFaultingModule		1302115	1					
ANR	1302205	Argument	section		1302115	3					
ANR	1302206	Identifier	section		1302115	0					
ANR	1302207	Argument	offset		1302115	4					
ANR	1302208	Identifier	offset		1302115	0					
ANR	1302209	ExpressionStatement	"_tprintf ( _T ( ""Fault address:  %08X %02X:%08X %s\\n"" ) , pExceptionRecord -> ExceptionAddress , section , offset , szFaultingModule )"	146:4:6157:6309	1302115	7	True				
ANR	1302210	CallExpression	"_tprintf ( _T ( ""Fault address:  %08X %02X:%08X %s\\n"" ) , pExceptionRecord -> ExceptionAddress , section , offset , szFaultingModule )"		1302115	0					
ANR	1302211	Callee	_tprintf		1302115	0					
ANR	1302212	Identifier	_tprintf		1302115	0					
ANR	1302213	ArgumentList	"_T ( ""Fault address:  %08X %02X:%08X %s\\n"" )"		1302115	1					
ANR	1302214	Argument	"_T ( ""Fault address:  %08X %02X:%08X %s\\n"" )"		1302115	0					
ANR	1302215	CallExpression	"_T ( ""Fault address:  %08X %02X:%08X %s\\n"" )"		1302115	0					
ANR	1302216	Callee	_T		1302115	0					
ANR	1302217	Identifier	_T		1302115	0					
ANR	1302218	ArgumentList	"""Fault address:  %08X %02X:%08X %s\\n"""		1302115	1					
ANR	1302219	Argument	"""Fault address:  %08X %02X:%08X %s\\n"""		1302115	0					
ANR	1302220	PrimaryExpression	"""Fault address:  %08X %02X:%08X %s\\n"""		1302115	0					
ANR	1302221	Argument	pExceptionRecord -> ExceptionAddress		1302115	1					
ANR	1302222	PtrMemberAccess	pExceptionRecord -> ExceptionAddress		1302115	0					
ANR	1302223	Identifier	pExceptionRecord		1302115	0					
ANR	1302224	Identifier	ExceptionAddress		1302115	1					
ANR	1302225	Argument	section		1302115	2					
ANR	1302226	Identifier	section		1302115	0					
ANR	1302227	Argument	offset		1302115	3					
ANR	1302228	Identifier	offset		1302115	0					
ANR	1302229	Argument	szFaultingModule		1302115	4					
ANR	1302230	Identifier	szFaultingModule		1302115	0					
ANR	1302231	IdentifierDeclStatement	PCONTEXT pCtx = pExceptionInfo -> ContextRecord ;	149:4:6315:6360	1302115	8	True				
ANR	1302232	IdentifierDecl	pCtx = pExceptionInfo -> ContextRecord		1302115	0					
ANR	1302233	IdentifierDeclType	PCONTEXT		1302115	0					
ANR	1302234	Identifier	pCtx		1302115	1					
ANR	1302235	AssignmentExpression	pCtx = pExceptionInfo -> ContextRecord		1302115	2		=			
ANR	1302236	Identifier	pCtx		1302115	0					
ANR	1302237	PtrMemberAccess	pExceptionInfo -> ContextRecord		1302115	1					
ANR	1302238	Identifier	pExceptionInfo		1302115	0					
ANR	1302239	Identifier	ContextRecord		1302115	1					
ANR	1302240	ExpressionStatement	"_tprintf ( _T ( ""\\nRegisters:\\n"" ) )"	153:1:6475:6507	1302115	9	True				
ANR	1302241	CallExpression	"_tprintf ( _T ( ""\\nRegisters:\\n"" ) )"		1302115	0					
ANR	1302242	Callee	_tprintf		1302115	0					
ANR	1302243	Identifier	_tprintf		1302115	0					
ANR	1302244	ArgumentList	"_T ( ""\\nRegisters:\\n"" )"		1302115	1					
ANR	1302245	Argument	"_T ( ""\\nRegisters:\\n"" )"		1302115	0					
ANR	1302246	CallExpression	"_T ( ""\\nRegisters:\\n"" )"		1302115	0					
ANR	1302247	Callee	_T		1302115	0					
ANR	1302248	Identifier	_T		1302115	0					
ANR	1302249	ArgumentList	"""\\nRegisters:\\n"""		1302115	1					
ANR	1302250	Argument	"""\\nRegisters:\\n"""		1302115	0					
ANR	1302251	PrimaryExpression	"""\\nRegisters:\\n"""		1302115	0					
ANR	1302252	ExpressionStatement	"_tprintf ( _T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" ) , pCtx -> Eax , pCtx -> Ebx , pCtx -> Ecx , pCtx -> Edx , pCtx -> Esi , pCtx -> Edi )"	154:4:6513:6669	1302115	10	True				
ANR	1302253	CallExpression	"_tprintf ( _T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" ) , pCtx -> Eax , pCtx -> Ebx , pCtx -> Ecx , pCtx -> Edx , pCtx -> Esi , pCtx -> Edi )"		1302115	0					
ANR	1302254	Callee	_tprintf		1302115	0					
ANR	1302255	Identifier	_tprintf		1302115	0					
ANR	1302256	ArgumentList	"_T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" )"		1302115	1					
ANR	1302257	Argument	"_T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" )"		1302115	0					
ANR	1302258	CallExpression	"_T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" )"		1302115	0					
ANR	1302259	Callee	_T		1302115	0					
ANR	1302260	Identifier	_T		1302115	0					
ANR	1302261	ArgumentList	"""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"""		1302115	1					
ANR	1302262	Argument	"""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"""		1302115	0					
ANR	1302263	PrimaryExpression	"""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"""		1302115	0					
ANR	1302264	Argument	pCtx -> Eax		1302115	1					
ANR	1302265	PtrMemberAccess	pCtx -> Eax		1302115	0					
ANR	1302266	Identifier	pCtx		1302115	0					
ANR	1302267	Identifier	Eax		1302115	1					
ANR	1302268	Argument	pCtx -> Ebx		1302115	2					
ANR	1302269	PtrMemberAccess	pCtx -> Ebx		1302115	0					
ANR	1302270	Identifier	pCtx		1302115	0					
ANR	1302271	Identifier	Ebx		1302115	1					
ANR	1302272	Argument	pCtx -> Ecx		1302115	3					
ANR	1302273	PtrMemberAccess	pCtx -> Ecx		1302115	0					
ANR	1302274	Identifier	pCtx		1302115	0					
ANR	1302275	Identifier	Ecx		1302115	1					
ANR	1302276	Argument	pCtx -> Edx		1302115	4					
ANR	1302277	PtrMemberAccess	pCtx -> Edx		1302115	0					
ANR	1302278	Identifier	pCtx		1302115	0					
ANR	1302279	Identifier	Edx		1302115	1					
ANR	1302280	Argument	pCtx -> Esi		1302115	5					
ANR	1302281	PtrMemberAccess	pCtx -> Esi		1302115	0					
ANR	1302282	Identifier	pCtx		1302115	0					
ANR	1302283	Identifier	Esi		1302115	1					
ANR	1302284	Argument	pCtx -> Edi		1302115	6					
ANR	1302285	PtrMemberAccess	pCtx -> Edi		1302115	0					
ANR	1302286	Identifier	pCtx		1302115	0					
ANR	1302287	Identifier	Edi		1302115	1					
ANR	1302288	ExpressionStatement	"_tprintf ( _T ( ""CS:EIP:%04X:%08X\\n"" ) , pCtx -> SegCs , pCtx -> Eip )"	156:4:6675:6735	1302115	11	True				
ANR	1302289	CallExpression	"_tprintf ( _T ( ""CS:EIP:%04X:%08X\\n"" ) , pCtx -> SegCs , pCtx -> Eip )"		1302115	0					
ANR	1302290	Callee	_tprintf		1302115	0					
ANR	1302291	Identifier	_tprintf		1302115	0					
ANR	1302292	ArgumentList	"_T ( ""CS:EIP:%04X:%08X\\n"" )"		1302115	1					
ANR	1302293	Argument	"_T ( ""CS:EIP:%04X:%08X\\n"" )"		1302115	0					
ANR	1302294	CallExpression	"_T ( ""CS:EIP:%04X:%08X\\n"" )"		1302115	0					
ANR	1302295	Callee	_T		1302115	0					
ANR	1302296	Identifier	_T		1302115	0					
ANR	1302297	ArgumentList	"""CS:EIP:%04X:%08X\\n"""		1302115	1					
ANR	1302298	Argument	"""CS:EIP:%04X:%08X\\n"""		1302115	0					
ANR	1302299	PrimaryExpression	"""CS:EIP:%04X:%08X\\n"""		1302115	0					
ANR	1302300	Argument	pCtx -> SegCs		1302115	1					
ANR	1302301	PtrMemberAccess	pCtx -> SegCs		1302115	0					
ANR	1302302	Identifier	pCtx		1302115	0					
ANR	1302303	Identifier	SegCs		1302115	1					
ANR	1302304	Argument	pCtx -> Eip		1302115	2					
ANR	1302305	PtrMemberAccess	pCtx -> Eip		1302115	0					
ANR	1302306	Identifier	pCtx		1302115	0					
ANR	1302307	Identifier	Eip		1302115	1					
ANR	1302308	ExpressionStatement	"_tprintf ( _T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" ) , pCtx -> SegSs , pCtx -> Esp , pCtx -> Ebp )"	157:4:6741:6836	1302115	12	True				
ANR	1302309	CallExpression	"_tprintf ( _T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" ) , pCtx -> SegSs , pCtx -> Esp , pCtx -> Ebp )"		1302115	0					
ANR	1302310	Callee	_tprintf		1302115	0					
ANR	1302311	Identifier	_tprintf		1302115	0					
ANR	1302312	ArgumentList	"_T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" )"		1302115	1					
ANR	1302313	Argument	"_T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" )"		1302115	0					
ANR	1302314	CallExpression	"_T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" )"		1302115	0					
ANR	1302315	Callee	_T		1302115	0					
ANR	1302316	Identifier	_T		1302115	0					
ANR	1302317	ArgumentList	"""SS:ESP:%04X:%08X  EBP:%08X\\n"""		1302115	1					
ANR	1302318	Argument	"""SS:ESP:%04X:%08X  EBP:%08X\\n"""		1302115	0					
ANR	1302319	PrimaryExpression	"""SS:ESP:%04X:%08X  EBP:%08X\\n"""		1302115	0					
ANR	1302320	Argument	pCtx -> SegSs		1302115	1					
ANR	1302321	PtrMemberAccess	pCtx -> SegSs		1302115	0					
ANR	1302322	Identifier	pCtx		1302115	0					
ANR	1302323	Identifier	SegSs		1302115	1					
ANR	1302324	Argument	pCtx -> Esp		1302115	2					
ANR	1302325	PtrMemberAccess	pCtx -> Esp		1302115	0					
ANR	1302326	Identifier	pCtx		1302115	0					
ANR	1302327	Identifier	Esp		1302115	1					
ANR	1302328	Argument	pCtx -> Ebp		1302115	3					
ANR	1302329	PtrMemberAccess	pCtx -> Ebp		1302115	0					
ANR	1302330	Identifier	pCtx		1302115	0					
ANR	1302331	Identifier	Ebp		1302115	1					
ANR	1302332	ExpressionStatement	"_tprintf ( _T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" ) , pCtx -> SegDs , pCtx -> SegEs , pCtx -> SegFs , pCtx -> SegGs )"	159:4:6842:6962	1302115	13	True				
ANR	1302333	CallExpression	"_tprintf ( _T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" ) , pCtx -> SegDs , pCtx -> SegEs , pCtx -> SegFs , pCtx -> SegGs )"		1302115	0					
ANR	1302334	Callee	_tprintf		1302115	0					
ANR	1302335	Identifier	_tprintf		1302115	0					
ANR	1302336	ArgumentList	"_T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" )"		1302115	1					
ANR	1302337	Argument	"_T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" )"		1302115	0					
ANR	1302338	CallExpression	"_T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" )"		1302115	0					
ANR	1302339	Callee	_T		1302115	0					
ANR	1302340	Identifier	_T		1302115	0					
ANR	1302341	ArgumentList	"""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"""		1302115	1					
ANR	1302342	Argument	"""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"""		1302115	0					
ANR	1302343	PrimaryExpression	"""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"""		1302115	0					
ANR	1302344	Argument	pCtx -> SegDs		1302115	1					
ANR	1302345	PtrMemberAccess	pCtx -> SegDs		1302115	0					
ANR	1302346	Identifier	pCtx		1302115	0					
ANR	1302347	Identifier	SegDs		1302115	1					
ANR	1302348	Argument	pCtx -> SegEs		1302115	2					
ANR	1302349	PtrMemberAccess	pCtx -> SegEs		1302115	0					
ANR	1302350	Identifier	pCtx		1302115	0					
ANR	1302351	Identifier	SegEs		1302115	1					
ANR	1302352	Argument	pCtx -> SegFs		1302115	3					
ANR	1302353	PtrMemberAccess	pCtx -> SegFs		1302115	0					
ANR	1302354	Identifier	pCtx		1302115	0					
ANR	1302355	Identifier	SegFs		1302115	1					
ANR	1302356	Argument	pCtx -> SegGs		1302115	4					
ANR	1302357	PtrMemberAccess	pCtx -> SegGs		1302115	0					
ANR	1302358	Identifier	pCtx		1302115	0					
ANR	1302359	Identifier	SegGs		1302115	1					
ANR	1302360	ExpressionStatement	"_tprintf ( _T ( ""Flags:%08X\\n"" ) , pCtx -> EFlags )"	161:4:6968:7012	1302115	14	True				
ANR	1302361	CallExpression	"_tprintf ( _T ( ""Flags:%08X\\n"" ) , pCtx -> EFlags )"		1302115	0					
ANR	1302362	Callee	_tprintf		1302115	0					
ANR	1302363	Identifier	_tprintf		1302115	0					
ANR	1302364	ArgumentList	"_T ( ""Flags:%08X\\n"" )"		1302115	1					
ANR	1302365	Argument	"_T ( ""Flags:%08X\\n"" )"		1302115	0					
ANR	1302366	CallExpression	"_T ( ""Flags:%08X\\n"" )"		1302115	0					
ANR	1302367	Callee	_T		1302115	0					
ANR	1302368	Identifier	_T		1302115	0					
ANR	1302369	ArgumentList	"""Flags:%08X\\n"""		1302115	1					
ANR	1302370	Argument	"""Flags:%08X\\n"""		1302115	0					
ANR	1302371	PrimaryExpression	"""Flags:%08X\\n"""		1302115	0					
ANR	1302372	Argument	pCtx -> EFlags		1302115	1					
ANR	1302373	PtrMemberAccess	pCtx -> EFlags		1302115	0					
ANR	1302374	Identifier	pCtx		1302115	0					
ANR	1302375	Identifier	EFlags		1302115	1					
ANR	1302376	IfStatement	if ( ! InitImagehlpFunctions ( ) )		1302115	15					
ANR	1302377	Condition	! InitImagehlpFunctions ( )	163:9:7034:7057	1302115	0	True				
ANR	1302378	UnaryOperationExpression	! InitImagehlpFunctions ( )		1302115	0					
ANR	1302379	UnaryOperator	!		1302115	0					
ANR	1302380	CallExpression	InitImagehlpFunctions ( )		1302115	1					
ANR	1302381	Callee	InitImagehlpFunctions		1302115	0					
ANR	1302382	Identifier	InitImagehlpFunctions		1302115	0					
ANR	1302383	ArgumentList			1302115	1					
ANR	1302384	CompoundStatement		35:39:1723:1723	1302115	1					
ANR	1302385	ExpressionStatement	IntelStackWalk ( pCtx )	168:2:7303:7325	1302115	0	True				
ANR	1302386	CallExpression	IntelStackWalk ( pCtx )		1302115	0					
ANR	1302387	Callee	IntelStackWalk		1302115	0					
ANR	1302388	Identifier	IntelStackWalk		1302115	0					
ANR	1302389	ArgumentList	pCtx		1302115	1					
ANR	1302390	Argument	pCtx		1302115	0					
ANR	1302391	Identifier	pCtx		1302115	0					
ANR	1302392	ReturnStatement	return ;	170:2:7344:7350	1302115	1	True				
ANR	1302393	ExpressionStatement	ImagehlpStackWalk ( pCtx )	172:1:7364:7389	1302115	16	True				
ANR	1302394	CallExpression	ImagehlpStackWalk ( pCtx )		1302115	0					
ANR	1302395	Callee	ImagehlpStackWalk		1302115	0					
ANR	1302396	Identifier	ImagehlpStackWalk		1302115	0					
ANR	1302397	ArgumentList	pCtx		1302115	1					
ANR	1302398	Argument	pCtx		1302115	0					
ANR	1302399	Identifier	pCtx		1302115	0					
ANR	1302400	ExpressionStatement	_SymCleanup ( GetCurrentProcess ( ) )	173:4:7395:7429	1302115	17	True				
ANR	1302401	CallExpression	_SymCleanup ( GetCurrentProcess ( ) )		1302115	0					
ANR	1302402	Callee	_SymCleanup		1302115	0					
ANR	1302403	Identifier	_SymCleanup		1302115	0					
ANR	1302404	ArgumentList	GetCurrentProcess ( )		1302115	1					
ANR	1302405	Argument	GetCurrentProcess ( )		1302115	0					
ANR	1302406	CallExpression	GetCurrentProcess ( )		1302115	0					
ANR	1302407	Callee	GetCurrentProcess		1302115	0					
ANR	1302408	Identifier	GetCurrentProcess		1302115	0					
ANR	1302409	ArgumentList			1302115	1					
ANR	1302410	ExpressionStatement	"_tprintf ( _T ( ""\\n//=====================================================\\n"" ) )"	176:1:7561:7638	1302115	18	True				
ANR	1302411	CallExpression	"_tprintf ( _T ( ""\\n//=====================================================\\n"" ) )"		1302115	0					
ANR	1302412	Callee	_tprintf		1302115	0					
ANR	1302413	Identifier	_tprintf		1302115	0					
ANR	1302414	ArgumentList	"_T ( ""\\n//=====================================================\\n"" )"		1302115	1					
ANR	1302415	Argument	"_T ( ""\\n//=====================================================\\n"" )"		1302115	0					
ANR	1302416	CallExpression	"_T ( ""\\n//=====================================================\\n"" )"		1302115	0					
ANR	1302417	Callee	_T		1302115	0					
ANR	1302418	Identifier	_T		1302115	0					
ANR	1302419	ArgumentList	"""\\n//=====================================================\\n"""		1302115	1					
ANR	1302420	Argument	"""\\n//=====================================================\\n"""		1302115	0					
ANR	1302421	PrimaryExpression	"""\\n//=====================================================\\n"""		1302115	0					
ANR	1302422	ReturnType	void		1302115	1					
ANR	1302423	Identifier	ExceptionHandler :: GenerateExceptionReport		1302115	2					
ANR	1302424	ParameterList	PEXCEPTION_POINTERS pExceptionInfo		1302115	3					
ANR	1302425	Parameter	PEXCEPTION_POINTERS pExceptionInfo	129:4:5304:5337	1302115	0	True				
ANR	1302426	ParameterType	PEXCEPTION_POINTERS		1302115	0					
ANR	1302427	Identifier	pExceptionInfo		1302115	1					
ANR	1302428	CFGEntryNode	ENTRY		1302115		True				
ANR	1302429	CFGExitNode	EXIT		1302115		True				
ANR	1302430	Symbol	InitImagehlpFunctions		1302115						
ANR	1302431	Symbol	pExceptionInfo		1302115						
ANR	1302432	Symbol	pCtx -> Eip		1302115						
ANR	1302433	Symbol	section		1302115						
ANR	1302434	Symbol	pExceptionRecord -> ExceptionAddress		1302115						
ANR	1302435	Symbol	pCtx -> SegSs		1302115						
ANR	1302436	Symbol	pCtx -> Ecx		1302115						
ANR	1302437	Symbol	_T		1302115						
ANR	1302438	Symbol	m_pid		1302115						
ANR	1302439	Symbol	pCtx -> Eax		1302115						
ANR	1302440	Symbol	pCtx -> SegGs		1302115						
ANR	1302441	Symbol	* pExceptionRecord		1302115						
ANR	1302442	Symbol	pCtx -> SegEs		1302115						
ANR	1302443	Symbol	pCtx -> EFlags		1302115						
ANR	1302444	Symbol	pCtx -> SegCs		1302115						
ANR	1302445	Symbol	offset		1302115						
ANR	1302446	Symbol	pCtx		1302115						
ANR	1302447	Symbol	pCtx -> Edi		1302115						
ANR	1302448	Symbol	* pExceptionInfo		1302115						
ANR	1302449	Symbol	pExceptionInfo -> ExceptionRecord		1302115						
ANR	1302450	Symbol	szFaultingModule		1302115						
ANR	1302451	Symbol	GetCurrentProcess		1302115						
ANR	1302452	Symbol	pCtx -> Ebp		1302115						
ANR	1302453	Symbol	pExceptionInfo -> ContextRecord		1302115						
ANR	1302454	Symbol	* pCtx		1302115						
ANR	1302455	Symbol	pExceptionRecord -> ExceptionCode		1302115						
ANR	1302456	Symbol	pCtx -> Edx		1302115						
ANR	1302457	Symbol	GetExceptionString		1302115						
ANR	1302458	Symbol	pCtx -> Esi		1302115						
ANR	1302459	Symbol	pCtx -> Ebx		1302115						
ANR	1302460	Symbol	pCtx -> Esp		1302115						
ANR	1302461	Symbol	pCtx -> SegFs		1302115						
ANR	1302462	Symbol	pCtx -> SegDs		1302115						
ANR	1302463	Symbol	pExceptionRecord		1302115						
ANR	1302464	Function	ExceptionHandler :: GetExceptionString	183:0:7992:9317							
ANR	1302465	FunctionDef	ExceptionHandler :: GetExceptionString (DWORD dwCode)		1302464	0					
ANR	1302466	CompoundStatement		183:59:8051:9317	1302464	0					
ANR	1302467	SwitchStatement	switch ( dwCode )		1302464	0					
ANR	1302468	Condition	dwCode	184:13:8066:8071	1302464	0	True				
ANR	1302469	Identifier	dwCode		1302464	0					
ANR	1302470	CompoundStatement		2:25:26:26	1302464	1					
ANR	1302471	Statement	EXCEPTION	185:2:8090:8098	1302464	0	True				
ANR	1302472	Statement	(	185:11:8099:8099	1302464	1	True				
ANR	1302473	Statement	ACCESS_VIOLATION	185:13:8101:8116	1302464	2	True				
ANR	1302474	Statement	)	185:30:8118:8118	1302464	3	True				
ANR	1302475	Statement	EXCEPTION	186:8:8128:8136	1302464	4	True				
ANR	1302476	Statement	(	186:17:8137:8137	1302464	5	True				
ANR	1302477	Statement	DATATYPE_MISALIGNMENT	186:19:8139:8159	1302464	6	True				
ANR	1302478	Statement	)	186:41:8161:8161	1302464	7	True				
ANR	1302479	Statement	EXCEPTION	187:2:8173:8181	1302464	8	True				
ANR	1302480	Statement	(	187:11:8182:8182	1302464	9	True				
ANR	1302481	Statement	BREAKPOINT	187:13:8184:8193	1302464	10	True				
ANR	1302482	Statement	)	187:24:8195:8195	1302464	11	True				
ANR	1302483	Statement	EXCEPTION	188:8:8205:8213	1302464	12	True				
ANR	1302484	Statement	(	188:17:8214:8214	1302464	13	True				
ANR	1302485	Statement	SINGLE_STEP	188:19:8216:8226	1302464	14	True				
ANR	1302486	Statement	)	188:31:8228:8228	1302464	15	True				
ANR	1302487	Statement	EXCEPTION	189:2:8240:8248	1302464	16	True				
ANR	1302488	Statement	(	189:11:8249:8249	1302464	17	True				
ANR	1302489	Statement	ARRAY_BOUNDS_EXCEEDED	189:13:8251:8271	1302464	18	True				
ANR	1302490	Statement	)	189:35:8273:8273	1302464	19	True				
ANR	1302491	Statement	EXCEPTION	190:8:8283:8291	1302464	20	True				
ANR	1302492	Statement	(	190:17:8292:8292	1302464	21	True				
ANR	1302493	Statement	FLT_DENORMAL_OPERAND	190:19:8294:8313	1302464	22	True				
ANR	1302494	Statement	)	190:40:8315:8315	1302464	23	True				
ANR	1302495	Statement	EXCEPTION	191:2:8327:8335	1302464	24	True				
ANR	1302496	Statement	(	191:11:8336:8336	1302464	25	True				
ANR	1302497	Statement	FLT_DIVIDE_BY_ZERO	191:13:8338:8355	1302464	26	True				
ANR	1302498	Statement	)	191:32:8357:8357	1302464	27	True				
ANR	1302499	Statement	EXCEPTION	192:8:8367:8375	1302464	28	True				
ANR	1302500	Statement	(	192:17:8376:8376	1302464	29	True				
ANR	1302501	Statement	FLT_INEXACT_RESULT	192:19:8378:8395	1302464	30	True				
ANR	1302502	Statement	)	192:38:8397:8397	1302464	31	True				
ANR	1302503	Statement	EXCEPTION	193:8:8407:8415	1302464	32	True				
ANR	1302504	Statement	(	193:17:8416:8416	1302464	33	True				
ANR	1302505	Statement	FLT_INVALID_OPERATION	193:19:8418:8438	1302464	34	True				
ANR	1302506	Statement	)	193:41:8440:8440	1302464	35	True				
ANR	1302507	Statement	EXCEPTION	194:2:8452:8460	1302464	36	True				
ANR	1302508	Statement	(	194:11:8461:8461	1302464	37	True				
ANR	1302509	Statement	FLT_OVERFLOW	194:13:8463:8474	1302464	38	True				
ANR	1302510	Statement	)	194:26:8476:8476	1302464	39	True				
ANR	1302511	Statement	EXCEPTION	195:8:8486:8494	1302464	40	True				
ANR	1302512	Statement	(	195:17:8495:8495	1302464	41	True				
ANR	1302513	Statement	FLT_STACK_CHECK	195:19:8497:8511	1302464	42	True				
ANR	1302514	Statement	)	195:35:8513:8513	1302464	43	True				
ANR	1302515	Statement	EXCEPTION	196:2:8525:8533	1302464	44	True				
ANR	1302516	Statement	(	196:11:8534:8534	1302464	45	True				
ANR	1302517	Statement	FLT_UNDERFLOW	196:13:8536:8548	1302464	46	True				
ANR	1302518	Statement	)	196:27:8550:8550	1302464	47	True				
ANR	1302519	Statement	EXCEPTION	197:8:8560:8568	1302464	48	True				
ANR	1302520	Statement	(	197:17:8569:8569	1302464	49	True				
ANR	1302521	Statement	INT_DIVIDE_BY_ZERO	197:19:8571:8588	1302464	50	True				
ANR	1302522	Statement	)	197:38:8590:8590	1302464	51	True				
ANR	1302523	Statement	EXCEPTION	198:2:8602:8610	1302464	52	True				
ANR	1302524	Statement	(	198:11:8611:8611	1302464	53	True				
ANR	1302525	Statement	INT_OVERFLOW	198:13:8613:8624	1302464	54	True				
ANR	1302526	Statement	)	198:26:8626:8626	1302464	55	True				
ANR	1302527	Statement	EXCEPTION	199:8:8636:8644	1302464	56	True				
ANR	1302528	Statement	(	199:17:8645:8645	1302464	57	True				
ANR	1302529	Statement	PRIV_INSTRUCTION	199:19:8647:8662	1302464	58	True				
ANR	1302530	Statement	)	199:36:8664:8664	1302464	59	True				
ANR	1302531	Statement	EXCEPTION	200:2:8676:8684	1302464	60	True				
ANR	1302532	Statement	(	200:11:8685:8685	1302464	61	True				
ANR	1302533	Statement	IN_PAGE_ERROR	200:13:8687:8699	1302464	62	True				
ANR	1302534	Statement	)	200:27:8701:8701	1302464	63	True				
ANR	1302535	Statement	EXCEPTION	201:8:8711:8719	1302464	64	True				
ANR	1302536	Statement	(	201:17:8720:8720	1302464	65	True				
ANR	1302537	Statement	ILLEGAL_INSTRUCTION	201:19:8722:8740	1302464	66	True				
ANR	1302538	Statement	)	201:39:8742:8742	1302464	67	True				
ANR	1302539	Statement	EXCEPTION	202:8:8752:8760	1302464	68	True				
ANR	1302540	Statement	(	202:17:8761:8761	1302464	69	True				
ANR	1302541	Statement	NONCONTINUABLE_EXCEPTION	202:19:8763:8786	1302464	70	True				
ANR	1302542	Statement	)	202:44:8788:8788	1302464	71	True				
ANR	1302543	Statement	EXCEPTION	203:2:8800:8808	1302464	72	True				
ANR	1302544	Statement	(	203:11:8809:8809	1302464	73	True				
ANR	1302545	Statement	STACK_OVERFLOW	203:13:8811:8824	1302464	74	True				
ANR	1302546	Statement	)	203:28:8826:8826	1302464	75	True				
ANR	1302547	Statement	EXCEPTION	204:8:8836:8844	1302464	76	True				
ANR	1302548	Statement	(	204:17:8845:8845	1302464	77	True				
ANR	1302549	Statement	INVALID_DISPOSITION	204:19:8847:8865	1302464	78	True				
ANR	1302550	Statement	)	204:39:8867:8867	1302464	79	True				
ANR	1302551	Statement	EXCEPTION	205:2:8879:8887	1302464	80	True				
ANR	1302552	Statement	(	205:11:8888:8888	1302464	81	True				
ANR	1302553	Statement	GUARD_PAGE	205:13:8890:8899	1302464	82	True				
ANR	1302554	Statement	)	205:24:8901:8901	1302464	83	True				
ANR	1302555	Statement	EXCEPTION	206:8:8911:8919	1302464	84	True				
ANR	1302556	Statement	(	206:17:8920:8920	1302464	85	True				
ANR	1302557	Statement	INVALID_HANDLE	206:19:8922:8935	1302464	86	True				
ANR	1302558	Statement	)	206:34:8937:8937	1302464	87	True				
ANR	1302559	Statement	static	210:1:9057:9062	1302464	1	True				
ANR	1302560	IdentifierDeclStatement	TCHAR szBuffer [ 512 ] = { 0 } ;	210:8:9064:9091	1302464	2	True				
ANR	1302561	IdentifierDecl	szBuffer [ 512 ] = { 0 }		1302464	0					
ANR	1302562	IdentifierDeclType	TCHAR [ 512 ]		1302464	0					
ANR	1302563	Identifier	szBuffer		1302464	1					
ANR	1302564	PrimaryExpression	512		1302464	2					
ANR	1302565	AssignmentExpression	szBuffer [ 512 ] = { 0 }		1302464	3		=			
ANR	1302566	Identifier	szBuffer		1302464	0					
ANR	1302567	InitializerList	0		1302464	1					
ANR	1302568	PrimaryExpression	0		1302464	0					
ANR	1302569	ExpressionStatement	"FormatMessage ( FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE , GetModuleHandle ( _T ( ""NTDLL.DLL"" ) ) , dwCode , 0 , szBuffer , sizeof ( szBuffer ) , 0 )"	211:4:9097:9294	1302464	3	True				
ANR	1302570	CallExpression	"FormatMessage ( FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE , GetModuleHandle ( _T ( ""NTDLL.DLL"" ) ) , dwCode , 0 , szBuffer , sizeof ( szBuffer ) , 0 )"		1302464	0					
ANR	1302571	Callee	FormatMessage		1302464	0					
ANR	1302572	Identifier	FormatMessage		1302464	0					
ANR	1302573	ArgumentList	FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE		1302464	1					
ANR	1302574	Argument	FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE		1302464	0					
ANR	1302575	InclusiveOrExpression	FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE		1302464	0		|			
ANR	1302576	Identifier	FORMAT_MESSAGE_IGNORE_INSERTS		1302464	0					
ANR	1302577	Identifier	FORMAT_MESSAGE_FROM_HMODULE		1302464	1					
ANR	1302578	Argument	"GetModuleHandle ( _T ( ""NTDLL.DLL"" ) )"		1302464	1					
ANR	1302579	CallExpression	"GetModuleHandle ( _T ( ""NTDLL.DLL"" ) )"		1302464	0					
ANR	1302580	Callee	GetModuleHandle		1302464	0					
ANR	1302581	Identifier	GetModuleHandle		1302464	0					
ANR	1302582	ArgumentList	"_T ( ""NTDLL.DLL"" )"		1302464	1					
ANR	1302583	Argument	"_T ( ""NTDLL.DLL"" )"		1302464	0					
ANR	1302584	CallExpression	"_T ( ""NTDLL.DLL"" )"		1302464	0					
ANR	1302585	Callee	_T		1302464	0					
ANR	1302586	Identifier	_T		1302464	0					
ANR	1302587	ArgumentList	"""NTDLL.DLL"""		1302464	1					
ANR	1302588	Argument	"""NTDLL.DLL"""		1302464	0					
ANR	1302589	PrimaryExpression	"""NTDLL.DLL"""		1302464	0					
ANR	1302590	Argument	dwCode		1302464	2					
ANR	1302591	Identifier	dwCode		1302464	0					
ANR	1302592	Argument	0		1302464	3					
ANR	1302593	PrimaryExpression	0		1302464	0					
ANR	1302594	Argument	szBuffer		1302464	4					
ANR	1302595	Identifier	szBuffer		1302464	0					
ANR	1302596	Argument	sizeof ( szBuffer )		1302464	5					
ANR	1302597	SizeofExpression	sizeof ( szBuffer )		1302464	0					
ANR	1302598	Sizeof	sizeof		1302464	0					
ANR	1302599	SizeofOperand	szBuffer		1302464	1					
ANR	1302600	Argument	0		1302464	6					
ANR	1302601	PrimaryExpression	0		1302464	0					
ANR	1302602	ReturnStatement	return szBuffer ;	214:4:9300:9315	1302464	4	True				
ANR	1302603	Identifier	szBuffer		1302464	0					
ANR	1302604	ReturnType	LPTSTR		1302464	1					
ANR	1302605	Identifier	ExceptionHandler :: GetExceptionString		1302464	2					
ANR	1302606	ParameterList	DWORD dwCode		1302464	3					
ANR	1302607	Parameter	DWORD dwCode	183:45:8037:8048	1302464	0	True				
ANR	1302608	ParameterType	DWORD		1302464	0					
ANR	1302609	Identifier	dwCode		1302464	1					
ANR	1302610	CFGEntryNode	ENTRY		1302464		True				
ANR	1302611	CFGExitNode	EXIT		1302464		True				
ANR	1302612	Symbol	dwCode		1302464						
ANR	1302613	Symbol	FORMAT_MESSAGE_FROM_HMODULE		1302464						
ANR	1302614	Symbol	FORMAT_MESSAGE_IGNORE_INSERTS		1302464						
ANR	1302615	Symbol	_T		1302464						
ANR	1302616	Symbol	szBuffer		1302464						
ANR	1302617	Symbol	GetModuleHandle		1302464						
ANR	1302618	Function	ExceptionHandler :: GetLogicalAddress	223:0:9881:11470							
ANR	1302619	FunctionDef	"ExceptionHandler :: GetLogicalAddress (PVOID addr , PTSTR szModule , DWORD len , DWORD & section , DWORD & offset)"		1302618	0					
ANR	1302620	CompoundStatement		224:79:10002:11470	1302618	0					
ANR	1302621	IdentifierDeclStatement	MEMORY_BASIC_INFORMATION mbi ;	225:4:10008:10036	1302618	0	True				
ANR	1302622	IdentifierDecl	mbi		1302618	0					
ANR	1302623	IdentifierDeclType	MEMORY_BASIC_INFORMATION		1302618	0					
ANR	1302624	Identifier	mbi		1302618	1					
ANR	1302625	IfStatement	"if ( ! VirtualQuery ( addr , & mbi , sizeof ( mbi ) ) )"		1302618	1					
ANR	1302626	Condition	"! VirtualQuery ( addr , & mbi , sizeof ( mbi ) )"	226:9:10047:10086	1302618	0	True				
ANR	1302627	UnaryOperationExpression	"! VirtualQuery ( addr , & mbi , sizeof ( mbi ) )"		1302618	0					
ANR	1302628	UnaryOperator	!		1302618	0					
ANR	1302629	CallExpression	"VirtualQuery ( addr , & mbi , sizeof ( mbi ) )"		1302618	1					
ANR	1302630	Callee	VirtualQuery		1302618	0					
ANR	1302631	Identifier	VirtualQuery		1302618	0					
ANR	1302632	ArgumentList	addr		1302618	1					
ANR	1302633	Argument	addr		1302618	0					
ANR	1302634	Identifier	addr		1302618	0					
ANR	1302635	Argument	& mbi		1302618	1					
ANR	1302636	UnaryOperationExpression	& mbi		1302618	0					
ANR	1302637	UnaryOperator	&		1302618	0					
ANR	1302638	Identifier	mbi		1302618	1					
ANR	1302639	Argument	sizeof ( mbi )		1302618	2					
ANR	1302640	SizeofExpression	sizeof ( mbi )		1302618	0					
ANR	1302641	Sizeof	sizeof		1302618	0					
ANR	1302642	SizeofOperand	mbi		1302618	1					
ANR	1302643	ReturnStatement	return FALSE ;	227:2:10100:10112	1302618	1	True				
ANR	1302644	Identifier	FALSE		1302618	0					
ANR	1302645	IdentifierDeclStatement	DWORD hMod = ( DWORD ) mbi . AllocationBase ;	228:4:10118:10156	1302618	2	True				
ANR	1302646	IdentifierDecl	hMod = ( DWORD ) mbi . AllocationBase		1302618	0					
ANR	1302647	IdentifierDeclType	DWORD		1302618	0					
ANR	1302648	Identifier	hMod		1302618	1					
ANR	1302649	AssignmentExpression	hMod = ( DWORD ) mbi . AllocationBase		1302618	2		=			
ANR	1302650	Identifier	hMod		1302618	0					
ANR	1302651	CastExpression	( DWORD ) mbi . AllocationBase		1302618	1					
ANR	1302652	CastTarget	DWORD		1302618	0					
ANR	1302653	MemberAccess	mbi . AllocationBase		1302618	1					
ANR	1302654	Identifier	mbi		1302618	0					
ANR	1302655	Identifier	AllocationBase		1302618	1					
ANR	1302656	IfStatement	"if ( ! GetModuleFileName ( ( HMODULE ) hMod , szModule , len ) )"		1302618	3					
ANR	1302657	Condition	"! GetModuleFileName ( ( HMODULE ) hMod , szModule , len )"	229:9:10167:10216	1302618	0	True				
ANR	1302658	UnaryOperationExpression	"! GetModuleFileName ( ( HMODULE ) hMod , szModule , len )"		1302618	0					
ANR	1302659	UnaryOperator	!		1302618	0					
ANR	1302660	CallExpression	"GetModuleFileName ( ( HMODULE ) hMod , szModule , len )"		1302618	1					
ANR	1302661	Callee	GetModuleFileName		1302618	0					
ANR	1302662	Identifier	GetModuleFileName		1302618	0					
ANR	1302663	ArgumentList	( HMODULE ) hMod		1302618	1					
ANR	1302664	Argument	( HMODULE ) hMod		1302618	0					
ANR	1302665	CastExpression	( HMODULE ) hMod		1302618	0					
ANR	1302666	CastTarget	HMODULE		1302618	0					
ANR	1302667	Identifier	hMod		1302618	1					
ANR	1302668	Argument	szModule		1302618	1					
ANR	1302669	Identifier	szModule		1302618	0					
ANR	1302670	Argument	len		1302618	2					
ANR	1302671	Identifier	len		1302618	0					
ANR	1302672	ReturnStatement	return FALSE ;	230:8:10228:10240	1302618	1	True				
ANR	1302673	Identifier	FALSE		1302618	0					
ANR	1302674	IdentifierDeclStatement	PIMAGE_DOS_HEADER pDosHdr = ( PIMAGE_DOS_HEADER ) hMod ;	231:4:10286:10337	1302618	4	True				
ANR	1302675	IdentifierDecl	pDosHdr = ( PIMAGE_DOS_HEADER ) hMod		1302618	0					
ANR	1302676	IdentifierDeclType	PIMAGE_DOS_HEADER		1302618	0					
ANR	1302677	Identifier	pDosHdr		1302618	1					
ANR	1302678	AssignmentExpression	pDosHdr = ( PIMAGE_DOS_HEADER ) hMod		1302618	2		=			
ANR	1302679	Identifier	pDosHdr		1302618	0					
ANR	1302680	CastExpression	( PIMAGE_DOS_HEADER ) hMod		1302618	1					
ANR	1302681	CastTarget	PIMAGE_DOS_HEADER		1302618	0					
ANR	1302682	Identifier	hMod		1302618	1					
ANR	1302683	IdentifierDeclStatement	PIMAGE_NT_HEADERS pNtHdr = ( PIMAGE_NT_HEADERS ) ( hMod + pDosHdr -> e_lfanew ) ;	233:4:10395:10467	1302618	5	True				
ANR	1302684	IdentifierDecl	pNtHdr = ( PIMAGE_NT_HEADERS ) ( hMod + pDosHdr -> e_lfanew )		1302618	0					
ANR	1302685	IdentifierDeclType	PIMAGE_NT_HEADERS		1302618	0					
ANR	1302686	Identifier	pNtHdr		1302618	1					
ANR	1302687	AssignmentExpression	pNtHdr = ( PIMAGE_NT_HEADERS ) ( hMod + pDosHdr -> e_lfanew )		1302618	2		=			
ANR	1302688	Identifier	pNtHdr		1302618	0					
ANR	1302689	CastExpression	( PIMAGE_NT_HEADERS ) ( hMod + pDosHdr -> e_lfanew )		1302618	1					
ANR	1302690	CastTarget	PIMAGE_NT_HEADERS		1302618	0					
ANR	1302691	AdditiveExpression	hMod + pDosHdr -> e_lfanew		1302618	1		+			
ANR	1302692	Identifier	hMod		1302618	0					
ANR	1302693	PtrMemberAccess	pDosHdr -> e_lfanew		1302618	1					
ANR	1302694	Identifier	pDosHdr		1302618	0					
ANR	1302695	Identifier	e_lfanew		1302618	1					
ANR	1302696	IdentifierDeclStatement	PIMAGE_SECTION_HEADER pSection = IMAGE_FIRST_SECTION ( pNtHdr ) ;	234:4:10473:10535	1302618	6	True				
ANR	1302697	IdentifierDecl	pSection = IMAGE_FIRST_SECTION ( pNtHdr )		1302618	0					
ANR	1302698	IdentifierDeclType	PIMAGE_SECTION_HEADER		1302618	0					
ANR	1302699	Identifier	pSection		1302618	1					
ANR	1302700	AssignmentExpression	pSection = IMAGE_FIRST_SECTION ( pNtHdr )		1302618	2		=			
ANR	1302701	Identifier	pSection		1302618	0					
ANR	1302702	CallExpression	IMAGE_FIRST_SECTION ( pNtHdr )		1302618	1					
ANR	1302703	Callee	IMAGE_FIRST_SECTION		1302618	0					
ANR	1302704	Identifier	IMAGE_FIRST_SECTION		1302618	0					
ANR	1302705	ArgumentList	pNtHdr		1302618	1					
ANR	1302706	Argument	pNtHdr		1302618	0					
ANR	1302707	Identifier	pNtHdr		1302618	0					
ANR	1302708	IdentifierDeclStatement	DWORD rva = ( DWORD ) addr - hMod ;	235:4:10541:10571	1302618	7	True				
ANR	1302709	IdentifierDecl	rva = ( DWORD ) addr - hMod		1302618	0					
ANR	1302710	IdentifierDeclType	DWORD		1302618	0					
ANR	1302711	Identifier	rva		1302618	1					
ANR	1302712	AssignmentExpression	rva = ( DWORD ) addr - hMod		1302618	2		=			
ANR	1302713	Identifier	rva		1302618	0					
ANR	1302714	AdditiveExpression	( DWORD ) addr - hMod		1302618	1		-			
ANR	1302715	CastExpression	( DWORD ) addr		1302618	0					
ANR	1302716	CastTarget	DWORD		1302618	0					
ANR	1302717	Identifier	addr		1302618	1					
ANR	1302718	Identifier	hMod		1302618	1					
ANR	1302719	ForStatement	"for ( unsigned i = 0 ; i < pNtHdr -> FileHeader . NumberOfSections ; i ++ , pSection ++ )"		1302618	8					
ANR	1302720	ForInit	unsigned i = 0 ;	238:9:10734:10748	1302618	0	True				
ANR	1302721	IdentifierDeclStatement	unsigned i = 0 ;		1302618	0					
ANR	1302722	IdentifierDecl	i = 0		1302618	0					
ANR	1302723	IdentifierDeclType	unsigned		1302618	0					
ANR	1302724	Identifier	i		1302618	1					
ANR	1302725	AssignmentExpression	i = 0		1302618	2		=			
ANR	1302726	Identifier	i		1302618	0					
ANR	1302727	PrimaryExpression	0		1302618	1					
ANR	1302728	Condition	i < pNtHdr -> FileHeader . NumberOfSections	239:12:10762:10800	1302618	1	True				
ANR	1302729	RelationalExpression	i < pNtHdr -> FileHeader . NumberOfSections		1302618	0		<			
ANR	1302730	Identifier	i		1302618	0					
ANR	1302731	MemberAccess	pNtHdr -> FileHeader . NumberOfSections		1302618	1					
ANR	1302732	PtrMemberAccess	pNtHdr -> FileHeader		1302618	0					
ANR	1302733	Identifier	pNtHdr		1302618	0					
ANR	1302734	Identifier	FileHeader		1302618	1					
ANR	1302735	Identifier	NumberOfSections		1302618	1					
ANR	1302736	Expression	"i ++ , pSection ++"	240:12:10815:10829	1302618	2	True				
ANR	1302737	PostIncDecOperationExpression	i ++		1302618	0					
ANR	1302738	Identifier	i		1302618	0					
ANR	1302739	IncDec	++		1302618	1					
ANR	1302740	PostIncDecOperationExpression	pSection ++		1302618	1					
ANR	1302741	Identifier	pSection		1302618	0					
ANR	1302742	IncDec	++		1302618	1					
ANR	1302743	CompoundStatement		19:8:898:1008	1302618	3					
ANR	1302744	IdentifierDeclStatement	DWORD sectionStart = pSection -> VirtualAddress ;	241:8:10846:10891	1302618	0	True				
ANR	1302745	IdentifierDecl	sectionStart = pSection -> VirtualAddress		1302618	0					
ANR	1302746	IdentifierDeclType	DWORD		1302618	0					
ANR	1302747	Identifier	sectionStart		1302618	1					
ANR	1302748	AssignmentExpression	sectionStart = pSection -> VirtualAddress		1302618	2		=			
ANR	1302749	Identifier	sectionStart		1302618	0					
ANR	1302750	PtrMemberAccess	pSection -> VirtualAddress		1302618	1					
ANR	1302751	Identifier	pSection		1302618	0					
ANR	1302752	Identifier	VirtualAddress		1302618	1					
ANR	1302753	IdentifierDeclStatement	"DWORD sectionEnd = sectionStart + max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize ) ;"	242:8:10901:11011	1302618	1	True				
ANR	1302754	IdentifierDecl	"sectionEnd = sectionStart + max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize )"		1302618	0					
ANR	1302755	IdentifierDeclType	DWORD		1302618	0					
ANR	1302756	Identifier	sectionEnd		1302618	1					
ANR	1302757	AssignmentExpression	"sectionEnd = sectionStart + max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize )"		1302618	2		=			
ANR	1302758	Identifier	sectionEnd		1302618	0					
ANR	1302759	AdditiveExpression	"sectionStart + max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize )"		1302618	1		+			
ANR	1302760	Identifier	sectionStart		1302618	0					
ANR	1302761	CallExpression	"max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize )"		1302618	1					
ANR	1302762	Callee	max		1302618	0					
ANR	1302763	Identifier	max		1302618	0					
ANR	1302764	ArgumentList	pSection -> SizeOfRawData		1302618	1					
ANR	1302765	Argument	pSection -> SizeOfRawData		1302618	0					
ANR	1302766	PtrMemberAccess	pSection -> SizeOfRawData		1302618	0					
ANR	1302767	Identifier	pSection		1302618	0					
ANR	1302768	Identifier	SizeOfRawData		1302618	1					
ANR	1302769	Argument	pSection -> Misc . VirtualSize		1302618	1					
ANR	1302770	MemberAccess	pSection -> Misc . VirtualSize		1302618	0					
ANR	1302771	PtrMemberAccess	pSection -> Misc		1302618	0					
ANR	1302772	Identifier	pSection		1302618	0					
ANR	1302773	Identifier	Misc		1302618	1					
ANR	1302774	Identifier	VirtualSize		1302618	1					
ANR	1302775	IfStatement	if ( ( rva >= sectionStart ) && ( rva <= sectionEnd ) )		1302618	2					
ANR	1302776	Condition	( rva >= sectionStart ) && ( rva <= sectionEnd )	245:13:11071:11114	1302618	0	True				
ANR	1302777	AndExpression	( rva >= sectionStart ) && ( rva <= sectionEnd )		1302618	0		&&			
ANR	1302778	RelationalExpression	rva >= sectionStart		1302618	0		>=			
ANR	1302779	Identifier	rva		1302618	0					
ANR	1302780	Identifier	sectionStart		1302618	1					
ANR	1302781	RelationalExpression	rva <= sectionEnd		1302618	1		<=			
ANR	1302782	Identifier	rva		1302618	0					
ANR	1302783	Identifier	sectionEnd		1302618	1					
ANR	1302784	CompoundStatement		22:60:1115:1115	1302618	1					
ANR	1302785	ExpressionStatement	section = i + 1	249:3:11321:11334	1302618	0	True				
ANR	1302786	AssignmentExpression	section = i + 1		1302618	0		=			
ANR	1302787	Identifier	section		1302618	0					
ANR	1302788	AdditiveExpression	i + 1		1302618	1		+			
ANR	1302789	Identifier	i		1302618	0					
ANR	1302790	PrimaryExpression	1		1302618	1					
ANR	1302791	ExpressionStatement	offset = rva - sectionStart	250:12:11348:11375	1302618	1	True				
ANR	1302792	AssignmentExpression	offset = rva - sectionStart		1302618	0		=			
ANR	1302793	Identifier	offset		1302618	0					
ANR	1302794	AdditiveExpression	rva - sectionStart		1302618	1		-			
ANR	1302795	Identifier	rva		1302618	0					
ANR	1302796	Identifier	sectionStart		1302618	1					
ANR	1302797	ReturnStatement	return TRUE ;	251:3:11392:11403	1302618	2	True				
ANR	1302798	Identifier	TRUE		1302618	0					
ANR	1302799	ReturnStatement	return FALSE ;	254:4:11428:11440	1302618	9	True				
ANR	1302800	Identifier	FALSE		1302618	0					
ANR	1302801	ReturnType	BOOL		1302618	1					
ANR	1302802	Identifier	ExceptionHandler :: GetLogicalAddress		1302618	2					
ANR	1302803	ParameterList	"PVOID addr , PTSTR szModule , DWORD len , DWORD & section , DWORD & offset"		1302618	3					
ANR	1302804	Parameter	PVOID addr	224:8:9931:9940	1302618	0	True				
ANR	1302805	ParameterType	PVOID		1302618	0					
ANR	1302806	Identifier	addr		1302618	1					
ANR	1302807	Parameter	PTSTR szModule	224:20:9943:9956	1302618	1	True				
ANR	1302808	ParameterType	PTSTR		1302618	0					
ANR	1302809	Identifier	szModule		1302618	1					
ANR	1302810	Parameter	DWORD len	224:36:9959:9967	1302618	2	True				
ANR	1302811	ParameterType	DWORD		1302618	0					
ANR	1302812	Identifier	len		1302618	1					
ANR	1302813	Parameter	DWORD & section	224:47:9970:9983	1302618	3	True				
ANR	1302814	ParameterType	DWORD &		1302618	0					
ANR	1302815	Identifier	section		1302618	1					
ANR	1302816	Parameter	DWORD & offset	224:63:9986:9998	1302618	4	True				
ANR	1302817	ParameterType	DWORD &		1302618	0					
ANR	1302818	Identifier	offset		1302618	1					
ANR	1302819	CFGEntryNode	ENTRY		1302618		True				
ANR	1302820	CFGExitNode	EXIT		1302618		True				
ANR	1302821	Symbol	pNtHdr -> FileHeader		1302618						
ANR	1302822	Symbol	pDosHdr -> e_lfanew		1302618						
ANR	1302823	Symbol	GetModuleFileName		1302618						
ANR	1302824	Symbol	pSection -> SizeOfRawData		1302618						
ANR	1302825	Symbol	section		1302618						
ANR	1302826	Symbol	hMod		1302618						
ANR	1302827	Symbol	pDosHdr		1302618						
ANR	1302828	Symbol	* pSection		1302618						
ANR	1302829	Symbol	VirtualQuery		1302618						
ANR	1302830	Symbol	len		1302618						
ANR	1302831	Symbol	sectionEnd		1302618						
ANR	1302832	Symbol	IMAGE_FIRST_SECTION		1302618						
ANR	1302833	Symbol	addr		1302618						
ANR	1302834	Symbol	* pDosHdr		1302618						
ANR	1302835	Symbol	rva		1302618						
ANR	1302836	Symbol	pSection -> Misc . VirtualSize		1302618						
ANR	1302837	Symbol	& mbi		1302618						
ANR	1302838	Symbol	pNtHdr -> FileHeader . NumberOfSections		1302618						
ANR	1302839	Symbol	pNtHdr		1302618						
ANR	1302840	Symbol	sectionStart		1302618						
ANR	1302841	Symbol	offset		1302618						
ANR	1302842	Symbol	mbi . AllocationBase		1302618						
ANR	1302843	Symbol	max		1302618						
ANR	1302844	Symbol	i		1302618						
ANR	1302845	Symbol	TRUE		1302618						
ANR	1302846	Symbol	* pNtHdr		1302618						
ANR	1302847	Symbol	pSection -> VirtualAddress		1302618						
ANR	1302848	Symbol	pSection -> Misc		1302618						
ANR	1302849	Symbol	mbi		1302618						
ANR	1302850	Symbol	FALSE		1302618						
ANR	1302851	Symbol	szModule		1302618						
ANR	1302852	Symbol	pSection		1302618						
ANR	1302853	Function	ExceptionHandler :: IntelStackWalk	259:0:11661:12723							
ANR	1302854	FunctionDef	ExceptionHandler :: IntelStackWalk (PCONTEXT pContext)		1302853	0					
ANR	1302855	CompoundStatement		259:59:11720:12723	1302853	0					
ANR	1302856	ExpressionStatement	"_tprintf ( _T ( ""\\nCall stack:\\n"" ) )"	260:4:11726:11759	1302853	0	True				
ANR	1302857	CallExpression	"_tprintf ( _T ( ""\\nCall stack:\\n"" ) )"		1302853	0					
ANR	1302858	Callee	_tprintf		1302853	0					
ANR	1302859	Identifier	_tprintf		1302853	0					
ANR	1302860	ArgumentList	"_T ( ""\\nCall stack:\\n"" )"		1302853	1					
ANR	1302861	Argument	"_T ( ""\\nCall stack:\\n"" )"		1302853	0					
ANR	1302862	CallExpression	"_T ( ""\\nCall stack:\\n"" )"		1302853	0					
ANR	1302863	Callee	_T		1302853	0					
ANR	1302864	Identifier	_T		1302853	0					
ANR	1302865	ArgumentList	"""\\nCall stack:\\n"""		1302853	1					
ANR	1302866	Argument	"""\\nCall stack:\\n"""		1302853	0					
ANR	1302867	PrimaryExpression	"""\\nCall stack:\\n"""		1302853	0					
ANR	1302868	ExpressionStatement	"_tprintf ( _T ( ""Address   Frame     Logical addr  Module\\n"" ) )"	261:4:11765:11825	1302853	1	True				
ANR	1302869	CallExpression	"_tprintf ( _T ( ""Address   Frame     Logical addr  Module\\n"" ) )"		1302853	0					
ANR	1302870	Callee	_tprintf		1302853	0					
ANR	1302871	Identifier	_tprintf		1302853	0					
ANR	1302872	ArgumentList	"_T ( ""Address   Frame     Logical addr  Module\\n"" )"		1302853	1					
ANR	1302873	Argument	"_T ( ""Address   Frame     Logical addr  Module\\n"" )"		1302853	0					
ANR	1302874	CallExpression	"_T ( ""Address   Frame     Logical addr  Module\\n"" )"		1302853	0					
ANR	1302875	Callee	_T		1302853	0					
ANR	1302876	Identifier	_T		1302853	0					
ANR	1302877	ArgumentList	"""Address   Frame     Logical addr  Module\\n"""		1302853	1					
ANR	1302878	Argument	"""Address   Frame     Logical addr  Module\\n"""		1302853	0					
ANR	1302879	PrimaryExpression	"""Address   Frame     Logical addr  Module\\n"""		1302853	0					
ANR	1302880	IdentifierDeclStatement	DWORD pc = pContext -> Eip ;	262:4:11831:11855	1302853	2	True				
ANR	1302881	IdentifierDecl	pc = pContext -> Eip		1302853	0					
ANR	1302882	IdentifierDeclType	DWORD		1302853	0					
ANR	1302883	Identifier	pc		1302853	1					
ANR	1302884	AssignmentExpression	pc = pContext -> Eip		1302853	2		=			
ANR	1302885	Identifier	pc		1302853	0					
ANR	1302886	PtrMemberAccess	pContext -> Eip		1302853	1					
ANR	1302887	Identifier	pContext		1302853	0					
ANR	1302888	Identifier	Eip		1302853	1					
ANR	1302889	IdentifierDeclStatement	"PDWORD pFrame , pPrevFrame ;"	263:1:11862:11887	1302853	3	True				
ANR	1302890	IdentifierDecl	pFrame		1302853	0					
ANR	1302891	IdentifierDeclType	PDWORD		1302853	0					
ANR	1302892	Identifier	pFrame		1302853	1					
ANR	1302893	IdentifierDecl	pPrevFrame		1302853	1					
ANR	1302894	IdentifierDeclType	PDWORD		1302853	0					
ANR	1302895	Identifier	pPrevFrame		1302853	1					
ANR	1302896	ExpressionStatement	pFrame = ( PDWORD ) pContext -> Ebp	264:4:11897:11927	1302853	4	True				
ANR	1302897	AssignmentExpression	pFrame = ( PDWORD ) pContext -> Ebp		1302853	0		=			
ANR	1302898	Identifier	pFrame		1302853	0					
ANR	1302899	CastExpression	( PDWORD ) pContext -> Ebp		1302853	1					
ANR	1302900	CastTarget	PDWORD		1302853	0					
ANR	1302901	PtrMemberAccess	pContext -> Ebp		1302853	1					
ANR	1302902	Identifier	pContext		1302853	0					
ANR	1302903	Identifier	Ebp		1302853	1					
ANR	1302904	DoStatement	do		1302853	5					
ANR	1302905	CompoundStatement		9:2:271:300	1302853	0					
ANR	1302906	IdentifierDeclStatement	"TCHAR szModule [ MAX_PATH ] = _T ( """" ) ;"	266:8:11947:11980	1302853	0	True				
ANR	1302907	IdentifierDecl	"szModule [ MAX_PATH ] = _T ( """" )"		1302853	0					
ANR	1302908	IdentifierDeclType	TCHAR [ MAX_PATH ]		1302853	0					
ANR	1302909	Identifier	szModule		1302853	1					
ANR	1302910	Identifier	MAX_PATH		1302853	2					
ANR	1302911	AssignmentExpression	"szModule [ MAX_PATH ] = _T ( """" )"		1302853	3		=			
ANR	1302912	Identifier	MAX_PATH		1302853	0					
ANR	1302913	CallExpression	"_T ( """" )"		1302853	1					
ANR	1302914	Callee	_T		1302853	0					
ANR	1302915	Identifier	_T		1302853	0					
ANR	1302916	ArgumentList	""""""		1302853	1					
ANR	1302917	Argument	""""""		1302853	0					
ANR	1302918	PrimaryExpression	""""""		1302853	0					
ANR	1302919	IdentifierDeclStatement	"DWORD section = 0 , offset = 0 ;"	267:2:11992:12021	1302853	1	True				
ANR	1302920	IdentifierDecl	section = 0		1302853	0					
ANR	1302921	IdentifierDeclType	DWORD		1302853	0					
ANR	1302922	Identifier	section		1302853	1					
ANR	1302923	AssignmentExpression	section = 0		1302853	2		=			
ANR	1302924	Identifier	section		1302853	0					
ANR	1302925	PrimaryExpression	0		1302853	1					
ANR	1302926	IdentifierDecl	offset = 0		1302853	1					
ANR	1302927	IdentifierDeclType	DWORD		1302853	0					
ANR	1302928	Identifier	offset		1302853	1					
ANR	1302929	AssignmentExpression	offset = 0		1302853	2		=			
ANR	1302930	Identifier	offset		1302853	0					
ANR	1302931	PrimaryExpression	0		1302853	1					
ANR	1302932	ExpressionStatement	"GetLogicalAddress ( ( PVOID ) pc , szModule , sizeof ( szModule ) , section , offset )"	268:8:12031:12102	1302853	2	True				
ANR	1302933	CallExpression	"GetLogicalAddress ( ( PVOID ) pc , szModule , sizeof ( szModule ) , section , offset )"		1302853	0					
ANR	1302934	Callee	GetLogicalAddress		1302853	0					
ANR	1302935	Identifier	GetLogicalAddress		1302853	0					
ANR	1302936	ArgumentList	( PVOID ) pc		1302853	1					
ANR	1302937	Argument	( PVOID ) pc		1302853	0					
ANR	1302938	CastExpression	( PVOID ) pc		1302853	0					
ANR	1302939	CastTarget	PVOID		1302853	0					
ANR	1302940	Identifier	pc		1302853	1					
ANR	1302941	Argument	szModule		1302853	1					
ANR	1302942	Identifier	szModule		1302853	0					
ANR	1302943	Argument	sizeof ( szModule )		1302853	2					
ANR	1302944	SizeofExpression	sizeof ( szModule )		1302853	0					
ANR	1302945	Sizeof	sizeof		1302853	0					
ANR	1302946	SizeofOperand	szModule		1302853	1					
ANR	1302947	Argument	section		1302853	3					
ANR	1302948	Identifier	section		1302853	0					
ANR	1302949	Argument	offset		1302853	4					
ANR	1302950	Identifier	offset		1302853	0					
ANR	1302951	ExpressionStatement	"_tprintf ( _T ( ""%08X  %08X  %04X:%08X %s\\n"" ) , pc , pFrame , section , offset , szModule )"	269:8:12112:12213	1302853	3	True				
ANR	1302952	CallExpression	"_tprintf ( _T ( ""%08X  %08X  %04X:%08X %s\\n"" ) , pc , pFrame , section , offset , szModule )"		1302853	0					
ANR	1302953	Callee	_tprintf		1302853	0					
ANR	1302954	Identifier	_tprintf		1302853	0					
ANR	1302955	ArgumentList	"_T ( ""%08X  %08X  %04X:%08X %s\\n"" )"		1302853	1					
ANR	1302956	Argument	"_T ( ""%08X  %08X  %04X:%08X %s\\n"" )"		1302853	0					
ANR	1302957	CallExpression	"_T ( ""%08X  %08X  %04X:%08X %s\\n"" )"		1302853	0					
ANR	1302958	Callee	_T		1302853	0					
ANR	1302959	Identifier	_T		1302853	0					
ANR	1302960	ArgumentList	"""%08X  %08X  %04X:%08X %s\\n"""		1302853	1					
ANR	1302961	Argument	"""%08X  %08X  %04X:%08X %s\\n"""		1302853	0					
ANR	1302962	PrimaryExpression	"""%08X  %08X  %04X:%08X %s\\n"""		1302853	0					
ANR	1302963	Argument	pc		1302853	1					
ANR	1302964	Identifier	pc		1302853	0					
ANR	1302965	Argument	pFrame		1302853	2					
ANR	1302966	Identifier	pFrame		1302853	0					
ANR	1302967	Argument	section		1302853	3					
ANR	1302968	Identifier	section		1302853	0					
ANR	1302969	Argument	offset		1302853	4					
ANR	1302970	Identifier	offset		1302853	0					
ANR	1302971	Argument	szModule		1302853	5					
ANR	1302972	Identifier	szModule		1302853	0					
ANR	1302973	ExpressionStatement	pc = pFrame [ 1 ]	271:8:12223:12237	1302853	4	True				
ANR	1302974	AssignmentExpression	pc = pFrame [ 1 ]		1302853	0		=			
ANR	1302975	Identifier	pc		1302853	0					
ANR	1302976	ArrayIndexing	pFrame [ 1 ]		1302853	1					
ANR	1302977	Identifier	pFrame		1302853	0					
ANR	1302978	PrimaryExpression	1		1302853	1					
ANR	1302979	ExpressionStatement	pPrevFrame = pFrame	272:2:12249:12268	1302853	5	True				
ANR	1302980	AssignmentExpression	pPrevFrame = pFrame		1302853	0		=			
ANR	1302981	Identifier	pPrevFrame		1302853	0					
ANR	1302982	Identifier	pFrame		1302853	1					
ANR	1302983	ExpressionStatement	pFrame = ( PDWORD ) pFrame [ 0 ]	273:8:12278:12304	1302853	6	True				
ANR	1302984	AssignmentExpression	pFrame = ( PDWORD ) pFrame [ 0 ]		1302853	0		=			
ANR	1302985	Identifier	pFrame		1302853	0					
ANR	1302986	CastExpression	( PDWORD ) pFrame [ 0 ]		1302853	1					
ANR	1302987	CastTarget	PDWORD		1302853	0					
ANR	1302988	ArrayIndexing	pFrame [ 0 ]		1302853	1					
ANR	1302989	Identifier	pFrame		1302853	0					
ANR	1302990	PrimaryExpression	0		1302853	1					
ANR	1302991	IfStatement	if ( ( DWORD ) pFrame & 3 )		1302853	7					
ANR	1302992	Condition	( DWORD ) pFrame & 3	274:13:12360:12376	1302853	0	True				
ANR	1302993	BitAndExpression	( DWORD ) pFrame & 3		1302853	0		&			
ANR	1302994	CastExpression	( DWORD ) pFrame		1302853	0					
ANR	1302995	CastTarget	DWORD		1302853	0					
ANR	1302996	Identifier	pFrame		1302853	1					
ANR	1302997	PrimaryExpression	3		1302853	1					
ANR	1302998	BreakStatement	break ;	275:12:12433:12438	1302853	1	True				
ANR	1302999	IfStatement	if ( pFrame <= pPrevFrame )		1302853	8					
ANR	1303000	Condition	pFrame <= pPrevFrame	276:13:12506:12525	1302853	0	True				
ANR	1303001	RelationalExpression	pFrame <= pPrevFrame		1302853	0		<=			
ANR	1303002	Identifier	pFrame		1302853	0					
ANR	1303003	Identifier	pPrevFrame		1302853	1					
ANR	1303004	BreakStatement	break ;	277:3:12544:12549	1302853	1	True				
ANR	1303005	IfStatement	"if ( IsBadWritePtr ( pFrame , sizeof ( PVOID ) * 2 ) )"		1302853	9					
ANR	1303006	Condition	"IsBadWritePtr ( pFrame , sizeof ( PVOID ) * 2 )"	279:13:12641:12678	1302853	0	True				
ANR	1303007	CallExpression	"IsBadWritePtr ( pFrame , sizeof ( PVOID ) * 2 )"		1302853	0					
ANR	1303008	Callee	IsBadWritePtr		1302853	0					
ANR	1303009	Identifier	IsBadWritePtr		1302853	0					
ANR	1303010	ArgumentList	pFrame		1302853	1					
ANR	1303011	Argument	pFrame		1302853	0					
ANR	1303012	Identifier	pFrame		1302853	0					
ANR	1303013	Argument	sizeof ( PVOID ) * 2		1302853	1					
ANR	1303014	MultiplicativeExpression	sizeof ( PVOID ) * 2		1302853	0		*			
ANR	1303015	SizeofExpression	sizeof ( PVOID )		1302853	0					
ANR	1303016	Sizeof	sizeof		1302853	0					
ANR	1303017	SizeofOperand	PVOID		1302853	1					
ANR	1303018	PrimaryExpression	2		1302853	1					
ANR	1303019	BreakStatement	break ;	280:3:12697:12702	1302853	1	True				
ANR	1303020	Condition	1	281:14:12718:12718	1302853	1	True				
ANR	1303021	PrimaryExpression	1		1302853	0					
ANR	1303022	ReturnType	void		1302853	1					
ANR	1303023	Identifier	ExceptionHandler :: IntelStackWalk		1302853	2					
ANR	1303024	ParameterList	PCONTEXT pContext		1302853	3					
ANR	1303025	Parameter	PCONTEXT pContext	259:39:11700:11716	1302853	0	True				
ANR	1303026	ParameterType	PCONTEXT		1302853	0					
ANR	1303027	Identifier	pContext		1302853	1					
ANR	1303028	CFGEntryNode	ENTRY		1302853		True				
ANR	1303029	CFGExitNode	EXIT		1302853		True				
ANR	1303030	Symbol	pPrevFrame		1302853						
ANR	1303031	Symbol	offset		1302853						
ANR	1303032	Symbol	section		1302853						
ANR	1303033	Symbol	pContext		1302853						
ANR	1303034	Symbol	pContext -> Eip		1302853						
ANR	1303035	Symbol	IsBadWritePtr		1302853						
ANR	1303036	Symbol	pc		1302853						
ANR	1303037	Symbol	pFrame		1302853						
ANR	1303038	Symbol	* pFrame		1302853						
ANR	1303039	Symbol	_T		1302853						
ANR	1303040	Symbol	pContext -> Ebp		1302853						
ANR	1303041	Symbol	* pContext		1302853						
ANR	1303042	Symbol	MAX_PATH		1302853						
ANR	1303043	Symbol	szModule		1302853						
ANR	1303044	Function	ExceptionHandler :: InternalSymGetLineFromAddr	286:0:12896:13870							
ANR	1303045	FunctionDef	"ExceptionHandler :: InternalSymGetLineFromAddr (IN HANDLE hProcess , IN DWORD dwAddr , OUT PDWORD pdwDisplacement , OUT PIMAGEHLP_LINE Line)"		1303044	0					
ANR	1303046	CompoundStatement		290:0:13090:13870	1303044	0					
ANR	1303047	IdentifierDeclStatement	DWORD dwTempDis = 0 ;	295:4:13355:13375	1303044	0	True				
ANR	1303048	IdentifierDecl	dwTempDis = 0		1303044	0					
ANR	1303049	IdentifierDeclType	DWORD		1303044	0					
ANR	1303050	Identifier	dwTempDis		1303044	1					
ANR	1303051	AssignmentExpression	dwTempDis = 0		1303044	2		=			
ANR	1303052	Identifier	dwTempDis		1303044	0					
ANR	1303053	PrimaryExpression	0		1303044	1					
ANR	1303054	WhileStatement	"while ( FALSE == _SymGetLineFromAddr ( hProcess , dwAddr - dwTempDis , pdwDisplacement , Line ) )"		1303044	1					
ANR	1303055	Condition	"FALSE == _SymGetLineFromAddr ( hProcess , dwAddr - dwTempDis , pdwDisplacement , Line )"	297:12:13391:13468	1303044	0	True				
ANR	1303056	EqualityExpression	"FALSE == _SymGetLineFromAddr ( hProcess , dwAddr - dwTempDis , pdwDisplacement , Line )"		1303044	0		==			
ANR	1303057	Identifier	FALSE		1303044	0					
ANR	1303058	CallExpression	"_SymGetLineFromAddr ( hProcess , dwAddr - dwTempDis , pdwDisplacement , Line )"		1303044	1					
ANR	1303059	Callee	_SymGetLineFromAddr		1303044	0					
ANR	1303060	Identifier	_SymGetLineFromAddr		1303044	0					
ANR	1303061	ArgumentList	hProcess		1303044	1					
ANR	1303062	Argument	hProcess		1303044	0					
ANR	1303063	Identifier	hProcess		1303044	0					
ANR	1303064	Argument	dwAddr - dwTempDis		1303044	1					
ANR	1303065	AdditiveExpression	dwAddr - dwTempDis		1303044	0		-			
ANR	1303066	Identifier	dwAddr		1303044	0					
ANR	1303067	Identifier	dwTempDis		1303044	1					
ANR	1303068	Argument	pdwDisplacement		1303044	2					
ANR	1303069	Identifier	pdwDisplacement		1303044	0					
ANR	1303070	Argument	Line		1303044	3					
ANR	1303071	Identifier	Line		1303044	0					
ANR	1303072	CompoundStatement		9:4:385:385	1303044	1					
ANR	1303073	ExpressionStatement	dwTempDis += 1	299:8:13487:13502	1303044	0	True				
ANR	1303074	AssignmentExpression	dwTempDis += 1		1303044	0		+=			
ANR	1303075	Identifier	dwTempDis		1303044	0					
ANR	1303076	PrimaryExpression	1		1303044	1					
ANR	1303077	IfStatement	if ( 100 == dwTempDis )		1303044	1					
ANR	1303078	Condition	100 == dwTempDis	300:13:13518:13533	1303044	0	True				
ANR	1303079	EqualityExpression	100 == dwTempDis		1303044	0		==			
ANR	1303080	PrimaryExpression	100		1303044	0					
ANR	1303081	Identifier	dwTempDis		1303044	1					
ANR	1303082	CompoundStatement		12:8:455:455	1303044	1					
ANR	1303083	ReturnStatement	return ( FALSE ) ;	302:12:13561:13578	1303044	0	True				
ANR	1303084	Identifier	FALSE		1303044	0					
ANR	1303085	IfStatement	if ( 0 != dwTempDis )		1303044	2					
ANR	1303086	Condition	0 != dwTempDis	309:9:13775:13788	1303044	0	True				
ANR	1303087	EqualityExpression	0 != dwTempDis		1303044	0		!=			
ANR	1303088	PrimaryExpression	0		1303044	0					
ANR	1303089	Identifier	dwTempDis		1303044	1					
ANR	1303090	CompoundStatement		21:4:706:706	1303044	1					
ANR	1303091	ExpressionStatement	* pdwDisplacement = dwTempDis	311:8:13808:13837	1303044	0	True				
ANR	1303092	AssignmentExpression	* pdwDisplacement = dwTempDis		1303044	0		=			
ANR	1303093	UnaryOperationExpression	* pdwDisplacement		1303044	0					
ANR	1303094	UnaryOperator	*		1303044	0					
ANR	1303095	Identifier	pdwDisplacement		1303044	1					
ANR	1303096	Identifier	dwTempDis		1303044	1					
ANR	1303097	ReturnStatement	return ( TRUE ) ;	313:4:13851:13867	1303044	3	True				
ANR	1303098	Identifier	TRUE		1303044	0					
ANR	1303099	ReturnType	BOOL		1303044	1					
ANR	1303100	Identifier	ExceptionHandler :: InternalSymGetLineFromAddr		1303044	2					
ANR	1303101	ParameterList	"IN HANDLE hProcess , IN DWORD dwAddr , OUT PDWORD pdwDisplacement , OUT PIMAGEHLP_LINE Line"		1303044	3					
ANR	1303102	Parameter	IN HANDLE hProcess	286:52:12948:12968	1303044	0	True				
ANR	1303103	ParameterType	IN HANDLE		1303044	0					
ANR	1303104	Identifier	hProcess		1303044	1					
ANR	1303105	Parameter	IN DWORD dwAddr	287:13:12985:13002	1303044	1	True				
ANR	1303106	ParameterType	IN DWORD		1303044	0					
ANR	1303107	Identifier	dwAddr		1303044	1					
ANR	1303108	Parameter	OUT PDWORD pdwDisplacement	288:13:13019:13046	1303044	2	True				
ANR	1303109	ParameterType	OUT PDWORD		1303044	0					
ANR	1303110	Identifier	pdwDisplacement		1303044	1					
ANR	1303111	Parameter	OUT PIMAGEHLP_LINE Line	289:13:13063:13086	1303044	3	True				
ANR	1303112	ParameterType	OUT PIMAGEHLP_LINE		1303044	0					
ANR	1303113	Identifier	Line		1303044	1					
ANR	1303114	CFGEntryNode	ENTRY		1303044		True				
ANR	1303115	CFGExitNode	EXIT		1303044		True				
ANR	1303116	Symbol	Line		1303044						
ANR	1303117	Symbol	dwAddr		1303044						
ANR	1303118	Symbol	dwTempDis		1303044						
ANR	1303119	Symbol	hProcess		1303044						
ANR	1303120	Symbol	pdwDisplacement		1303044						
ANR	1303121	Symbol	* pdwDisplacement		1303044						
ANR	1303122	Symbol	TRUE		1303044						
ANR	1303123	Symbol	FALSE		1303044						
ANR	1303124	Symbol	_SymGetLineFromAddr		1303044						
ANR	1303125	Function	ExceptionHandler :: ImagehlpStackWalk	320:0:14064:17901							
ANR	1303126	FunctionDef	ExceptionHandler :: ImagehlpStackWalk (PCONTEXT pContext)		1303125	0					
ANR	1303127	CompoundStatement		320:62:14126:17901	1303125	0					
ANR	1303128	ExpressionStatement	"_tprintf ( _T ( ""\\nCall stack:\\n"" ) )"	321:4:14132:14165	1303125	0	True				
ANR	1303129	CallExpression	"_tprintf ( _T ( ""\\nCall stack:\\n"" ) )"		1303125	0					
ANR	1303130	Callee	_tprintf		1303125	0					
ANR	1303131	Identifier	_tprintf		1303125	0					
ANR	1303132	ArgumentList	"_T ( ""\\nCall stack:\\n"" )"		1303125	1					
ANR	1303133	Argument	"_T ( ""\\nCall stack:\\n"" )"		1303125	0					
ANR	1303134	CallExpression	"_T ( ""\\nCall stack:\\n"" )"		1303125	0					
ANR	1303135	Callee	_T		1303125	0					
ANR	1303136	Identifier	_T		1303125	0					
ANR	1303137	ArgumentList	"""\\nCall stack:\\n"""		1303125	1					
ANR	1303138	Argument	"""\\nCall stack:\\n"""		1303125	0					
ANR	1303139	PrimaryExpression	"""\\nCall stack:\\n"""		1303125	0					
ANR	1303140	ExpressionStatement	"_tprintf ( _T ( ""Address   Frame\\n"" ) )"	323:1:14283:14318	1303125	1	True				
ANR	1303141	CallExpression	"_tprintf ( _T ( ""Address   Frame\\n"" ) )"		1303125	0					
ANR	1303142	Callee	_tprintf		1303125	0					
ANR	1303143	Identifier	_tprintf		1303125	0					
ANR	1303144	ArgumentList	"_T ( ""Address   Frame\\n"" )"		1303125	1					
ANR	1303145	Argument	"_T ( ""Address   Frame\\n"" )"		1303125	0					
ANR	1303146	CallExpression	"_T ( ""Address   Frame\\n"" )"		1303125	0					
ANR	1303147	Callee	_T		1303125	0					
ANR	1303148	Identifier	_T		1303125	0					
ANR	1303149	ArgumentList	"""Address   Frame\\n"""		1303125	1					
ANR	1303150	Argument	"""Address   Frame\\n"""		1303125	0					
ANR	1303151	PrimaryExpression	"""Address   Frame\\n"""		1303125	0					
ANR	1303152	ExpressionStatement	SymSetOptions ( SYMOPT_LOAD_LINES )	325:1:14322:14354	1303125	2	True				
ANR	1303153	CallExpression	SymSetOptions ( SYMOPT_LOAD_LINES )		1303125	0					
ANR	1303154	Callee	SymSetOptions		1303125	0					
ANR	1303155	Identifier	SymSetOptions		1303125	0					
ANR	1303156	ArgumentList	SYMOPT_LOAD_LINES		1303125	1					
ANR	1303157	Argument	SYMOPT_LOAD_LINES		1303125	0					
ANR	1303158	Identifier	SYMOPT_LOAD_LINES		1303125	0					
ANR	1303159	IdentifierDeclStatement	STACKFRAME sf ;	328:4:14435:14448	1303125	3	True				
ANR	1303160	IdentifierDecl	sf		1303125	0					
ANR	1303161	IdentifierDeclType	STACKFRAME		1303125	0					
ANR	1303162	Identifier	sf		1303125	1					
ANR	1303163	ExpressionStatement	"memset ( & sf , 0 , sizeof ( sf ) )"	329:1:14455:14483	1303125	4	True				
ANR	1303164	CallExpression	"memset ( & sf , 0 , sizeof ( sf ) )"		1303125	0					
ANR	1303165	Callee	memset		1303125	0					
ANR	1303166	Identifier	memset		1303125	0					
ANR	1303167	ArgumentList	& sf		1303125	1					
ANR	1303168	Argument	& sf		1303125	0					
ANR	1303169	UnaryOperationExpression	& sf		1303125	0					
ANR	1303170	UnaryOperator	&		1303125	0					
ANR	1303171	Identifier	sf		1303125	1					
ANR	1303172	Argument	0		1303125	1					
ANR	1303173	PrimaryExpression	0		1303125	0					
ANR	1303174	Argument	sizeof ( sf )		1303125	2					
ANR	1303175	SizeofExpression	sizeof ( sf )		1303125	0					
ANR	1303176	Sizeof	sizeof		1303125	0					
ANR	1303177	SizeofOperand	sf		1303125	1					
ANR	1303178	ExpressionStatement	sf . AddrPC . Offset = pContext -> Eip	332:4:14641:14679	1303125	5	True				
ANR	1303179	AssignmentExpression	sf . AddrPC . Offset = pContext -> Eip		1303125	0		=			
ANR	1303180	MemberAccess	sf . AddrPC . Offset		1303125	0					
ANR	1303181	MemberAccess	sf . AddrPC		1303125	0					
ANR	1303182	Identifier	sf		1303125	0					
ANR	1303183	Identifier	AddrPC		1303125	1					
ANR	1303184	Identifier	Offset		1303125	1					
ANR	1303185	PtrMemberAccess	pContext -> Eip		1303125	1					
ANR	1303186	Identifier	pContext		1303125	0					
ANR	1303187	Identifier	Eip		1303125	1					
ANR	1303188	ExpressionStatement	sf . AddrPC . Mode = AddrModeFlat	333:4:14685:14722	1303125	6	True				
ANR	1303189	AssignmentExpression	sf . AddrPC . Mode = AddrModeFlat		1303125	0		=			
ANR	1303190	MemberAccess	sf . AddrPC . Mode		1303125	0					
ANR	1303191	MemberAccess	sf . AddrPC		1303125	0					
ANR	1303192	Identifier	sf		1303125	0					
ANR	1303193	Identifier	AddrPC		1303125	1					
ANR	1303194	Identifier	Mode		1303125	1					
ANR	1303195	Identifier	AddrModeFlat		1303125	1					
ANR	1303196	ExpressionStatement	sf . AddrStack . Offset = pContext -> Esp	334:4:14728:14766	1303125	7	True				
ANR	1303197	AssignmentExpression	sf . AddrStack . Offset = pContext -> Esp		1303125	0		=			
ANR	1303198	MemberAccess	sf . AddrStack . Offset		1303125	0					
ANR	1303199	MemberAccess	sf . AddrStack		1303125	0					
ANR	1303200	Identifier	sf		1303125	0					
ANR	1303201	Identifier	AddrStack		1303125	1					
ANR	1303202	Identifier	Offset		1303125	1					
ANR	1303203	PtrMemberAccess	pContext -> Esp		1303125	1					
ANR	1303204	Identifier	pContext		1303125	0					
ANR	1303205	Identifier	Esp		1303125	1					
ANR	1303206	ExpressionStatement	sf . AddrStack . Mode = AddrModeFlat	335:4:14772:14809	1303125	8	True				
ANR	1303207	AssignmentExpression	sf . AddrStack . Mode = AddrModeFlat		1303125	0		=			
ANR	1303208	MemberAccess	sf . AddrStack . Mode		1303125	0					
ANR	1303209	MemberAccess	sf . AddrStack		1303125	0					
ANR	1303210	Identifier	sf		1303125	0					
ANR	1303211	Identifier	AddrStack		1303125	1					
ANR	1303212	Identifier	Mode		1303125	1					
ANR	1303213	Identifier	AddrModeFlat		1303125	1					
ANR	1303214	ExpressionStatement	sf . AddrFrame . Offset = pContext -> Ebp	336:4:14815:14853	1303125	9	True				
ANR	1303215	AssignmentExpression	sf . AddrFrame . Offset = pContext -> Ebp		1303125	0		=			
ANR	1303216	MemberAccess	sf . AddrFrame . Offset		1303125	0					
ANR	1303217	MemberAccess	sf . AddrFrame		1303125	0					
ANR	1303218	Identifier	sf		1303125	0					
ANR	1303219	Identifier	AddrFrame		1303125	1					
ANR	1303220	Identifier	Offset		1303125	1					
ANR	1303221	PtrMemberAccess	pContext -> Ebp		1303125	1					
ANR	1303222	Identifier	pContext		1303125	0					
ANR	1303223	Identifier	Ebp		1303125	1					
ANR	1303224	ExpressionStatement	sf . AddrFrame . Mode = AddrModeFlat	337:4:14859:14896	1303125	10	True				
ANR	1303225	AssignmentExpression	sf . AddrFrame . Mode = AddrModeFlat		1303125	0		=			
ANR	1303226	MemberAccess	sf . AddrFrame . Mode		1303125	0					
ANR	1303227	MemberAccess	sf . AddrFrame		1303125	0					
ANR	1303228	Identifier	sf		1303125	0					
ANR	1303229	Identifier	AddrFrame		1303125	1					
ANR	1303230	Identifier	Mode		1303125	1					
ANR	1303231	Identifier	AddrModeFlat		1303125	1					
ANR	1303232	WhileStatement	while ( 1 )		1303125	11					
ANR	1303233	Condition	1	338:9:14911:14911	1303125	0	True				
ANR	1303234	PrimaryExpression	1		1303125	0					
ANR	1303235	CompoundStatement		46:8:2251:2276	1303125	1					
ANR	1303236	IfStatement	"if ( ! _StackWalk ( IMAGE_FILE_MACHINE_I386 , GetCurrentProcess ( ) , GetCurrentThread ( ) , & sf , pContext , 0 , _SymFunctionTableAccess , _SymGetModuleBase , 0 ) )"		1303125	0					
ANR	1303237	Condition	"! _StackWalk ( IMAGE_FILE_MACHINE_I386 , GetCurrentProcess ( ) , GetCurrentThread ( ) , & sf , pContext , 0 , _SymFunctionTableAccess , _SymGetModuleBase , 0 )"	339:13:14933:15323	1303125	0	True				
ANR	1303238	UnaryOperationExpression	"! _StackWalk ( IMAGE_FILE_MACHINE_I386 , GetCurrentProcess ( ) , GetCurrentThread ( ) , & sf , pContext , 0 , _SymFunctionTableAccess , _SymGetModuleBase , 0 )"		1303125	0					
ANR	1303239	UnaryOperator	!		1303125	0					
ANR	1303240	CallExpression	"_StackWalk ( IMAGE_FILE_MACHINE_I386 , GetCurrentProcess ( ) , GetCurrentThread ( ) , & sf , pContext , 0 , _SymFunctionTableAccess , _SymGetModuleBase , 0 )"		1303125	1					
ANR	1303241	Callee	_StackWalk		1303125	0					
ANR	1303242	Identifier	_StackWalk		1303125	0					
ANR	1303243	ArgumentList	IMAGE_FILE_MACHINE_I386		1303125	1					
ANR	1303244	Argument	IMAGE_FILE_MACHINE_I386		1303125	0					
ANR	1303245	Identifier	IMAGE_FILE_MACHINE_I386		1303125	0					
ANR	1303246	Argument	GetCurrentProcess ( )		1303125	1					
ANR	1303247	CallExpression	GetCurrentProcess ( )		1303125	0					
ANR	1303248	Callee	GetCurrentProcess		1303125	0					
ANR	1303249	Identifier	GetCurrentProcess		1303125	0					
ANR	1303250	ArgumentList			1303125	1					
ANR	1303251	Argument	GetCurrentThread ( )		1303125	2					
ANR	1303252	CallExpression	GetCurrentThread ( )		1303125	0					
ANR	1303253	Callee	GetCurrentThread		1303125	0					
ANR	1303254	Identifier	GetCurrentThread		1303125	0					
ANR	1303255	ArgumentList			1303125	1					
ANR	1303256	Argument	& sf		1303125	3					
ANR	1303257	UnaryOperationExpression	& sf		1303125	0					
ANR	1303258	UnaryOperator	&		1303125	0					
ANR	1303259	Identifier	sf		1303125	1					
ANR	1303260	Argument	pContext		1303125	4					
ANR	1303261	Identifier	pContext		1303125	0					
ANR	1303262	Argument	0		1303125	5					
ANR	1303263	PrimaryExpression	0		1303125	0					
ANR	1303264	Argument	_SymFunctionTableAccess		1303125	6					
ANR	1303265	Identifier	_SymFunctionTableAccess		1303125	0					
ANR	1303266	Argument	_SymGetModuleBase		1303125	7					
ANR	1303267	Identifier	_SymGetModuleBase		1303125	0					
ANR	1303268	Argument	0		1303125	8					
ANR	1303269	PrimaryExpression	0		1303125	0					
ANR	1303270	BreakStatement	break ;	348:12:15339:15344	1303125	1	True				
ANR	1303271	IfStatement	if ( 0 == sf . AddrFrame . Offset )		1303125	1					
ANR	1303272	Condition	0 == sf . AddrFrame . Offset	349:13:15359:15382	1303125	0	True				
ANR	1303273	EqualityExpression	0 == sf . AddrFrame . Offset		1303125	0		==			
ANR	1303274	PrimaryExpression	0		1303125	0					
ANR	1303275	MemberAccess	sf . AddrFrame . Offset		1303125	1					
ANR	1303276	MemberAccess	sf . AddrFrame		1303125	0					
ANR	1303277	Identifier	sf		1303125	0					
ANR	1303278	Identifier	AddrFrame		1303125	1					
ANR	1303279	Identifier	Offset		1303125	1					
ANR	1303280	BreakStatement	break ;	350:12:15433:15438	1303125	1	True				
ANR	1303281	ExpressionStatement	"_tprintf ( _T ( ""%08X  %08X  "" ) , sf . AddrPC . Offset , sf . AddrFrame . Offset )"	351:8:15503:15572	1303125	2	True				
ANR	1303282	CallExpression	"_tprintf ( _T ( ""%08X  %08X  "" ) , sf . AddrPC . Offset , sf . AddrFrame . Offset )"		1303125	0					
ANR	1303283	Callee	_tprintf		1303125	0					
ANR	1303284	Identifier	_tprintf		1303125	0					
ANR	1303285	ArgumentList	"_T ( ""%08X  %08X  "" )"		1303125	1					
ANR	1303286	Argument	"_T ( ""%08X  %08X  "" )"		1303125	0					
ANR	1303287	CallExpression	"_T ( ""%08X  %08X  "" )"		1303125	0					
ANR	1303288	Callee	_T		1303125	0					
ANR	1303289	Identifier	_T		1303125	0					
ANR	1303290	ArgumentList	"""%08X  %08X  """		1303125	1					
ANR	1303291	Argument	"""%08X  %08X  """		1303125	0					
ANR	1303292	PrimaryExpression	"""%08X  %08X  """		1303125	0					
ANR	1303293	Argument	sf . AddrPC . Offset		1303125	1					
ANR	1303294	MemberAccess	sf . AddrPC . Offset		1303125	0					
ANR	1303295	MemberAccess	sf . AddrPC		1303125	0					
ANR	1303296	Identifier	sf		1303125	0					
ANR	1303297	Identifier	AddrPC		1303125	1					
ANR	1303298	Identifier	Offset		1303125	1					
ANR	1303299	Argument	sf . AddrFrame . Offset		1303125	2					
ANR	1303300	MemberAccess	sf . AddrFrame . Offset		1303125	0					
ANR	1303301	MemberAccess	sf . AddrFrame		1303125	0					
ANR	1303302	Identifier	sf		1303125	0					
ANR	1303303	Identifier	AddrFrame		1303125	1					
ANR	1303304	Identifier	Offset		1303125	1					
ANR	1303305	IdentifierDeclStatement	BYTE symbolBuffer [ sizeof ( IMAGEHLP_SYMBOL ) + 512 ] ;	359:8:16078:16128	1303125	3	True				
ANR	1303306	IdentifierDecl	symbolBuffer [ sizeof ( IMAGEHLP_SYMBOL ) + 512 ]		1303125	0					
ANR	1303307	IdentifierDeclType	BYTE [ sizeof ( IMAGEHLP_SYMBOL ) + 512 ]		1303125	0					
ANR	1303308	Identifier	symbolBuffer		1303125	1					
ANR	1303309	AdditiveExpression	sizeof ( IMAGEHLP_SYMBOL ) + 512		1303125	2		+			
ANR	1303310	SizeofExpression	sizeof ( IMAGEHLP_SYMBOL )		1303125	0					
ANR	1303311	Sizeof	sizeof		1303125	0					
ANR	1303312	SizeofOperand	IMAGEHLP_SYMBOL		1303125	1					
ANR	1303313	PrimaryExpression	512		1303125	1					
ANR	1303314	IdentifierDeclStatement	PIMAGEHLP_SYMBOL pSymbol = ( PIMAGEHLP_SYMBOL ) symbolBuffer ;	360:8:16138:16195	1303125	4	True				
ANR	1303315	IdentifierDecl	pSymbol = ( PIMAGEHLP_SYMBOL ) symbolBuffer		1303125	0					
ANR	1303316	IdentifierDeclType	PIMAGEHLP_SYMBOL		1303125	0					
ANR	1303317	Identifier	pSymbol		1303125	1					
ANR	1303318	AssignmentExpression	pSymbol = ( PIMAGEHLP_SYMBOL ) symbolBuffer		1303125	2		=			
ANR	1303319	Identifier	pSymbol		1303125	0					
ANR	1303320	CastExpression	( PIMAGEHLP_SYMBOL ) symbolBuffer		1303125	1					
ANR	1303321	CastTarget	PIMAGEHLP_SYMBOL		1303125	0					
ANR	1303322	Identifier	symbolBuffer		1303125	1					
ANR	1303323	ExpressionStatement	pSymbol -> SizeOfStruct = sizeof ( IMAGEHLP_SYMBOL )	362:2:16256:16303	1303125	5	True				
ANR	1303324	AssignmentExpression	pSymbol -> SizeOfStruct = sizeof ( IMAGEHLP_SYMBOL )		1303125	0		=			
ANR	1303325	PtrMemberAccess	pSymbol -> SizeOfStruct		1303125	0					
ANR	1303326	Identifier	pSymbol		1303125	0					
ANR	1303327	Identifier	SizeOfStruct		1303125	1					
ANR	1303328	SizeofExpression	sizeof ( IMAGEHLP_SYMBOL )		1303125	1					
ANR	1303329	Sizeof	sizeof		1303125	0					
ANR	1303330	SizeofOperand	IMAGEHLP_SYMBOL		1303125	1					
ANR	1303331	ExpressionStatement	pSymbol -> MaxNameLength = 511	363:8:16313:16341	1303125	6	True				
ANR	1303332	AssignmentExpression	pSymbol -> MaxNameLength = 511		1303125	0		=			
ANR	1303333	PtrMemberAccess	pSymbol -> MaxNameLength		1303125	0					
ANR	1303334	Identifier	pSymbol		1303125	0					
ANR	1303335	Identifier	MaxNameLength		1303125	1					
ANR	1303336	PrimaryExpression	511		1303125	1					
ANR	1303337	ExpressionStatement	pSymbol -> Name [ 0 ] = '\\0'	364:2:16345:16368	1303125	7	True				
ANR	1303338	AssignmentExpression	pSymbol -> Name [ 0 ] = '\\0'		1303125	0		=			
ANR	1303339	ArrayIndexing	pSymbol -> Name [ 0 ]		1303125	0					
ANR	1303340	PtrMemberAccess	pSymbol -> Name		1303125	0					
ANR	1303341	Identifier	pSymbol		1303125	0					
ANR	1303342	Identifier	Name		1303125	1					
ANR	1303343	PrimaryExpression	0		1303125	1					
ANR	1303344	PrimaryExpression	'\\0'		1303125	1					
ANR	1303345	IdentifierDeclStatement	DWORD symDisplacement = 0 ;	365:8:16378:16403	1303125	8	True				
ANR	1303346	IdentifierDecl	symDisplacement = 0		1303125	0					
ANR	1303347	IdentifierDeclType	DWORD		1303125	0					
ANR	1303348	Identifier	symDisplacement		1303125	1					
ANR	1303349	AssignmentExpression	symDisplacement = 0		1303125	2		=			
ANR	1303350	Identifier	symDisplacement		1303125	0					
ANR	1303351	PrimaryExpression	0		1303125	1					
ANR	1303352	IfStatement	"if ( _SymGetSymFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , pSymbol ) )"		1303125	9					
ANR	1303353	Condition	"_SymGetSymFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , pSymbol )"	368:7:16527:16641	1303125	0	True				
ANR	1303354	CallExpression	"_SymGetSymFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , pSymbol )"		1303125	0					
ANR	1303355	Callee	_SymGetSymFromAddr		1303125	0					
ANR	1303356	Identifier	_SymGetSymFromAddr		1303125	0					
ANR	1303357	ArgumentList	GetCurrentProcess ( )		1303125	1					
ANR	1303358	Argument	GetCurrentProcess ( )		1303125	0					
ANR	1303359	CallExpression	GetCurrentProcess ( )		1303125	0					
ANR	1303360	Callee	GetCurrentProcess		1303125	0					
ANR	1303361	Identifier	GetCurrentProcess		1303125	0					
ANR	1303362	ArgumentList			1303125	1					
ANR	1303363	Argument	sf . AddrPC . Offset		1303125	1					
ANR	1303364	MemberAccess	sf . AddrPC . Offset		1303125	0					
ANR	1303365	MemberAccess	sf . AddrPC		1303125	0					
ANR	1303366	Identifier	sf		1303125	0					
ANR	1303367	Identifier	AddrPC		1303125	1					
ANR	1303368	Identifier	Offset		1303125	1					
ANR	1303369	Argument	& symDisplacement		1303125	2					
ANR	1303370	UnaryOperationExpression	& symDisplacement		1303125	0					
ANR	1303371	UnaryOperator	&		1303125	0					
ANR	1303372	Identifier	symDisplacement		1303125	1					
ANR	1303373	Argument	pSymbol		1303125	3					
ANR	1303374	Identifier	pSymbol		1303125	0					
ANR	1303375	CompoundStatement		55:3:2681:2705	1303125	1					
ANR	1303376	IdentifierDeclStatement	IMAGEHLP_LINE lineInfo ;	371:3:16653:16675	1303125	0	True				
ANR	1303377	IdentifierDecl	lineInfo		1303125	0					
ANR	1303378	IdentifierDeclType	IMAGEHLP_LINE		1303125	0					
ANR	1303379	Identifier	lineInfo		1303125	1					
ANR	1303380	ExpressionStatement	lineInfo . SizeOfStruct = sizeof ( IMAGEHLP_LINE )	372:3:16680:16725	1303125	1	True				
ANR	1303381	AssignmentExpression	lineInfo . SizeOfStruct = sizeof ( IMAGEHLP_LINE )		1303125	0		=			
ANR	1303382	MemberAccess	lineInfo . SizeOfStruct		1303125	0					
ANR	1303383	Identifier	lineInfo		1303125	0					
ANR	1303384	Identifier	SizeOfStruct		1303125	1					
ANR	1303385	SizeofExpression	sizeof ( IMAGEHLP_LINE )		1303125	1					
ANR	1303386	Sizeof	sizeof		1303125	0					
ANR	1303387	SizeofOperand	IMAGEHLP_LINE		1303125	1					
ANR	1303388	ExpressionStatement	"ZeroMemory ( & lineInfo , sizeof ( IMAGEHLP_LINE ) )"	373:3:16754:16802	1303125	2	True				
ANR	1303389	CallExpression	"ZeroMemory ( & lineInfo , sizeof ( IMAGEHLP_LINE ) )"		1303125	0					
ANR	1303390	Callee	ZeroMemory		1303125	0					
ANR	1303391	Identifier	ZeroMemory		1303125	0					
ANR	1303392	ArgumentList	& lineInfo		1303125	1					
ANR	1303393	Argument	& lineInfo		1303125	0					
ANR	1303394	UnaryOperationExpression	& lineInfo		1303125	0					
ANR	1303395	UnaryOperator	&		1303125	0					
ANR	1303396	Identifier	lineInfo		1303125	1					
ANR	1303397	Argument	sizeof ( IMAGEHLP_LINE )		1303125	1					
ANR	1303398	SizeofExpression	sizeof ( IMAGEHLP_LINE )		1303125	0					
ANR	1303399	Sizeof	sizeof		1303125	0					
ANR	1303400	SizeofOperand	IMAGEHLP_LINE		1303125	1					
ANR	1303401	IdentifierDeclStatement	bool bGotLineNum = false ;	374:3:16808:16832	1303125	3	True				
ANR	1303402	IdentifierDecl	bGotLineNum = false		1303125	0					
ANR	1303403	IdentifierDeclType	bool		1303125	0					
ANR	1303404	Identifier	bGotLineNum		1303125	1					
ANR	1303405	AssignmentExpression	bGotLineNum = false		1303125	2		=			
ANR	1303406	Identifier	false		1303125	0					
ANR	1303407	Identifier	false		1303125	1					
ANR	1303408	IfStatement	if ( _SymGetLineFromAddr )		1303125	4					
ANR	1303409	Condition	_SymGetLineFromAddr	375:7:16841:16859	1303125	0	True				
ANR	1303410	Identifier	_SymGetLineFromAddr		1303125	0					
ANR	1303411	CompoundStatement		57:3:2781:2781	1303125	1					
ANR	1303412	ExpressionStatement	"bGotLineNum = InternalSymGetLineFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , & lineInfo )"	378:4:16929:17047	1303125	0	True				
ANR	1303413	AssignmentExpression	"bGotLineNum = InternalSymGetLineFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , & lineInfo )"		1303125	0		=			
ANR	1303414	Identifier	bGotLineNum		1303125	0					
ANR	1303415	CallExpression	"InternalSymGetLineFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , & lineInfo )"		1303125	1					
ANR	1303416	Callee	InternalSymGetLineFromAddr		1303125	0					
ANR	1303417	Identifier	InternalSymGetLineFromAddr		1303125	0					
ANR	1303418	ArgumentList	GetCurrentProcess ( )		1303125	1					
ANR	1303419	Argument	GetCurrentProcess ( )		1303125	0					
ANR	1303420	CallExpression	GetCurrentProcess ( )		1303125	0					
ANR	1303421	Callee	GetCurrentProcess		1303125	0					
ANR	1303422	Identifier	GetCurrentProcess		1303125	0					
ANR	1303423	ArgumentList			1303125	1					
ANR	1303424	Argument	sf . AddrPC . Offset		1303125	1					
ANR	1303425	MemberAccess	sf . AddrPC . Offset		1303125	0					
ANR	1303426	MemberAccess	sf . AddrPC		1303125	0					
ANR	1303427	Identifier	sf		1303125	0					
ANR	1303428	Identifier	AddrPC		1303125	1					
ANR	1303429	Identifier	Offset		1303125	1					
ANR	1303430	Argument	& symDisplacement		1303125	2					
ANR	1303431	UnaryOperationExpression	& symDisplacement		1303125	0					
ANR	1303432	UnaryOperator	&		1303125	0					
ANR	1303433	Identifier	symDisplacement		1303125	1					
ANR	1303434	Argument	& lineInfo		1303125	3					
ANR	1303435	UnaryOperationExpression	& lineInfo		1303125	0					
ANR	1303436	UnaryOperator	&		1303125	0					
ANR	1303437	Identifier	lineInfo		1303125	1					
ANR	1303438	IfStatement	if ( bGotLineNum )		1303125	5					
ANR	1303439	Condition	bGotLineNum	382:7:17065:17075	1303125	0	True				
ANR	1303440	Identifier	bGotLineNum		1303125	0					
ANR	1303441	ExpressionStatement	"_tprintf ( _T ( ""%hs (%s:%d)\\n"" ) , pSymbol -> Name , lineInfo . FileName , lineInfo . LineNumber )"	383:4:17082:17173	1303125	1	True				
ANR	1303442	CallExpression	"_tprintf ( _T ( ""%hs (%s:%d)\\n"" ) , pSymbol -> Name , lineInfo . FileName , lineInfo . LineNumber )"		1303125	0					
ANR	1303443	Callee	_tprintf		1303125	0					
ANR	1303444	Identifier	_tprintf		1303125	0					
ANR	1303445	ArgumentList	"_T ( ""%hs (%s:%d)\\n"" )"		1303125	1					
ANR	1303446	Argument	"_T ( ""%hs (%s:%d)\\n"" )"		1303125	0					
ANR	1303447	CallExpression	"_T ( ""%hs (%s:%d)\\n"" )"		1303125	0					
ANR	1303448	Callee	_T		1303125	0					
ANR	1303449	Identifier	_T		1303125	0					
ANR	1303450	ArgumentList	"""%hs (%s:%d)\\n"""		1303125	1					
ANR	1303451	Argument	"""%hs (%s:%d)\\n"""		1303125	0					
ANR	1303452	PrimaryExpression	"""%hs (%s:%d)\\n"""		1303125	0					
ANR	1303453	Argument	pSymbol -> Name		1303125	1					
ANR	1303454	PtrMemberAccess	pSymbol -> Name		1303125	0					
ANR	1303455	Identifier	pSymbol		1303125	0					
ANR	1303456	Identifier	Name		1303125	1					
ANR	1303457	Argument	lineInfo . FileName		1303125	2					
ANR	1303458	MemberAccess	lineInfo . FileName		1303125	0					
ANR	1303459	Identifier	lineInfo		1303125	0					
ANR	1303460	Identifier	FileName		1303125	1					
ANR	1303461	Argument	lineInfo . LineNumber		1303125	3					
ANR	1303462	MemberAccess	lineInfo . LineNumber		1303125	0					
ANR	1303463	Identifier	lineInfo		1303125	0					
ANR	1303464	Identifier	LineNumber		1303125	1					
ANR	1303465	ElseStatement	else		1303125	0					
ANR	1303466	ExpressionStatement	"_tprintf ( _T ( ""%hs+%X\\n"" ) , pSymbol -> Name , symDisplacement )"	386:4:17187:17245	1303125	0	True				
ANR	1303467	CallExpression	"_tprintf ( _T ( ""%hs+%X\\n"" ) , pSymbol -> Name , symDisplacement )"		1303125	0					
ANR	1303468	Callee	_tprintf		1303125	0					
ANR	1303469	Identifier	_tprintf		1303125	0					
ANR	1303470	ArgumentList	"_T ( ""%hs+%X\\n"" )"		1303125	1					
ANR	1303471	Argument	"_T ( ""%hs+%X\\n"" )"		1303125	0					
ANR	1303472	CallExpression	"_T ( ""%hs+%X\\n"" )"		1303125	0					
ANR	1303473	Callee	_T		1303125	0					
ANR	1303474	Identifier	_T		1303125	0					
ANR	1303475	ArgumentList	"""%hs+%X\\n"""		1303125	1					
ANR	1303476	Argument	"""%hs+%X\\n"""		1303125	0					
ANR	1303477	PrimaryExpression	"""%hs+%X\\n"""		1303125	0					
ANR	1303478	Argument	pSymbol -> Name		1303125	1					
ANR	1303479	PtrMemberAccess	pSymbol -> Name		1303125	0					
ANR	1303480	Identifier	pSymbol		1303125	0					
ANR	1303481	Identifier	Name		1303125	1					
ANR	1303482	Argument	symDisplacement		1303125	2					
ANR	1303483	Identifier	symDisplacement		1303125	0					
ANR	1303484	ElseStatement	else		1303125	0					
ANR	1303485	CompoundStatement		77:12:3496:3525	1303125	0					
ANR	1303486	IdentifierDeclStatement	"TCHAR szModule [ MAX_PATH ] = _T ( """" ) ;"	395:12:17576:17609	1303125	0	True				
ANR	1303487	IdentifierDecl	"szModule [ MAX_PATH ] = _T ( """" )"		1303125	0					
ANR	1303488	IdentifierDeclType	TCHAR [ MAX_PATH ]		1303125	0					
ANR	1303489	Identifier	szModule		1303125	1					
ANR	1303490	Identifier	MAX_PATH		1303125	2					
ANR	1303491	AssignmentExpression	"szModule [ MAX_PATH ] = _T ( """" )"		1303125	3		=			
ANR	1303492	Identifier	MAX_PATH		1303125	0					
ANR	1303493	CallExpression	"_T ( """" )"		1303125	1					
ANR	1303494	Callee	_T		1303125	0					
ANR	1303495	Identifier	_T		1303125	0					
ANR	1303496	ArgumentList	""""""		1303125	1					
ANR	1303497	Argument	""""""		1303125	0					
ANR	1303498	PrimaryExpression	""""""		1303125	0					
ANR	1303499	IdentifierDeclStatement	"DWORD section = 0 , offset = 0 ;"	396:12:17623:17652	1303125	1	True				
ANR	1303500	IdentifierDecl	section = 0		1303125	0					
ANR	1303501	IdentifierDeclType	DWORD		1303125	0					
ANR	1303502	Identifier	section		1303125	1					
ANR	1303503	AssignmentExpression	section = 0		1303125	2		=			
ANR	1303504	Identifier	section		1303125	0					
ANR	1303505	PrimaryExpression	0		1303125	1					
ANR	1303506	IdentifierDecl	offset = 0		1303125	1					
ANR	1303507	IdentifierDeclType	DWORD		1303125	0					
ANR	1303508	Identifier	offset		1303125	1					
ANR	1303509	AssignmentExpression	offset = 0		1303125	2		=			
ANR	1303510	Identifier	offset		1303125	0					
ANR	1303511	PrimaryExpression	0		1303125	1					
ANR	1303512	ExpressionStatement	"GetLogicalAddress ( ( PVOID ) sf . AddrPC . Offset , szModule , sizeof ( szModule ) , section , offset )"	397:12:17666:17788	1303125	2	True				
ANR	1303513	CallExpression	"GetLogicalAddress ( ( PVOID ) sf . AddrPC . Offset , szModule , sizeof ( szModule ) , section , offset )"		1303125	0					
ANR	1303514	Callee	GetLogicalAddress		1303125	0					
ANR	1303515	Identifier	GetLogicalAddress		1303125	0					
ANR	1303516	ArgumentList	( PVOID ) sf . AddrPC . Offset		1303125	1					
ANR	1303517	Argument	( PVOID ) sf . AddrPC . Offset		1303125	0					
ANR	1303518	CastExpression	( PVOID ) sf . AddrPC . Offset		1303125	0					
ANR	1303519	CastTarget	PVOID		1303125	0					
ANR	1303520	MemberAccess	sf . AddrPC . Offset		1303125	1					
ANR	1303521	MemberAccess	sf . AddrPC		1303125	0					
ANR	1303522	Identifier	sf		1303125	0					
ANR	1303523	Identifier	AddrPC		1303125	1					
ANR	1303524	Identifier	Offset		1303125	1					
ANR	1303525	Argument	szModule		1303125	1					
ANR	1303526	Identifier	szModule		1303125	0					
ANR	1303527	Argument	sizeof ( szModule )		1303125	2					
ANR	1303528	SizeofExpression	sizeof ( szModule )		1303125	0					
ANR	1303529	Sizeof	sizeof		1303125	0					
ANR	1303530	SizeofOperand	szModule		1303125	1					
ANR	1303531	Argument	section		1303125	3					
ANR	1303532	Identifier	section		1303125	0					
ANR	1303533	Argument	offset		1303125	4					
ANR	1303534	Identifier	offset		1303125	0					
ANR	1303535	ExpressionStatement	"_tprintf ( _T ( ""%04X:%08X %s\\n"" ) , section , offset , szModule )"	399:12:17802:17883	1303125	3	True				
ANR	1303536	CallExpression	"_tprintf ( _T ( ""%04X:%08X %s\\n"" ) , section , offset , szModule )"		1303125	0					
ANR	1303537	Callee	_tprintf		1303125	0					
ANR	1303538	Identifier	_tprintf		1303125	0					
ANR	1303539	ArgumentList	"_T ( ""%04X:%08X %s\\n"" )"		1303125	1					
ANR	1303540	Argument	"_T ( ""%04X:%08X %s\\n"" )"		1303125	0					
ANR	1303541	CallExpression	"_T ( ""%04X:%08X %s\\n"" )"		1303125	0					
ANR	1303542	Callee	_T		1303125	0					
ANR	1303543	Identifier	_T		1303125	0					
ANR	1303544	ArgumentList	"""%04X:%08X %s\\n"""		1303125	1					
ANR	1303545	Argument	"""%04X:%08X %s\\n"""		1303125	0					
ANR	1303546	PrimaryExpression	"""%04X:%08X %s\\n"""		1303125	0					
ANR	1303547	Argument	section		1303125	1					
ANR	1303548	Identifier	section		1303125	0					
ANR	1303549	Argument	offset		1303125	2					
ANR	1303550	Identifier	offset		1303125	0					
ANR	1303551	Argument	szModule		1303125	3					
ANR	1303552	Identifier	szModule		1303125	0					
ANR	1303553	ReturnType	void		1303125	1					
ANR	1303554	Identifier	ExceptionHandler :: ImagehlpStackWalk		1303125	2					
ANR	1303555	ParameterList	PCONTEXT pContext		1303125	3					
ANR	1303556	Parameter	PCONTEXT pContext	320:42:14106:14122	1303125	0	True				
ANR	1303557	ParameterType	PCONTEXT		1303125	0					
ANR	1303558	Identifier	pContext		1303125	1					
ANR	1303559	CFGEntryNode	ENTRY		1303125		True				
ANR	1303560	CFGExitNode	EXIT		1303125		True				
ANR	1303561	Symbol	section		1303125						
ANR	1303562	Symbol	sf . AddrStack . Offset		1303125						
ANR	1303563	Symbol	sf . AddrPC . Offset		1303125						
ANR	1303564	Symbol	AddrModeFlat		1303125						
ANR	1303565	Symbol	pSymbol		1303125						
ANR	1303566	Symbol	lineInfo . SizeOfStruct		1303125						
ANR	1303567	Symbol	lineInfo		1303125						
ANR	1303568	Symbol	symbolBuffer		1303125						
ANR	1303569	Symbol	InternalSymGetLineFromAddr		1303125						
ANR	1303570	Symbol	& sf		1303125						
ANR	1303571	Symbol	_SymGetSymFromAddr		1303125						
ANR	1303572	Symbol	offset		1303125						
ANR	1303573	Symbol	sf . AddrStack . Mode		1303125						
ANR	1303574	Symbol	lineInfo . FileName		1303125						
ANR	1303575	Symbol	GetCurrentThread		1303125						
ANR	1303576	Symbol	GetCurrentProcess		1303125						
ANR	1303577	Symbol	* pSymbol		1303125						
ANR	1303578	Symbol	bGotLineNum		1303125						
ANR	1303579	Symbol	pContext -> Eip		1303125						
ANR	1303580	Symbol	sf . AddrFrame		1303125						
ANR	1303581	Symbol	& lineInfo		1303125						
ANR	1303582	Symbol	_SymGetModuleBase		1303125						
ANR	1303583	Symbol	lineInfo . LineNumber		1303125						
ANR	1303584	Symbol	sf . AddrFrame . Offset		1303125						
ANR	1303585	Symbol	szModule		1303125						
ANR	1303586	Symbol	pSymbol -> SizeOfStruct		1303125						
ANR	1303587	Symbol	sf . AddrPC		1303125						
ANR	1303588	Symbol	sf . AddrFrame . Mode		1303125						
ANR	1303589	Symbol	_SymFunctionTableAccess		1303125						
ANR	1303590	Symbol	pSymbol -> Name		1303125						
ANR	1303591	Symbol	sf		1303125						
ANR	1303592	Symbol	_T		1303125						
ANR	1303593	Symbol	IMAGE_FILE_MACHINE_I386		1303125						
ANR	1303594	Symbol	SYMOPT_LOAD_LINES		1303125						
ANR	1303595	Symbol	* pContext		1303125						
ANR	1303596	Symbol	sf . AddrPC . Mode		1303125						
ANR	1303597	Symbol	_SymGetLineFromAddr		1303125						
ANR	1303598	Symbol	sf . AddrStack		1303125						
ANR	1303599	Symbol	_StackWalk		1303125						
ANR	1303600	Symbol	pContext -> Esp		1303125						
ANR	1303601	Symbol	* pSymbol -> Name		1303125						
ANR	1303602	Symbol	pSymbol -> MaxNameLength		1303125						
ANR	1303603	Symbol	false		1303125						
ANR	1303604	Symbol	pContext		1303125						
ANR	1303605	Symbol	pContext -> Ebp		1303125						
ANR	1303606	Symbol	* * pSymbol		1303125						
ANR	1303607	Symbol	symDisplacement		1303125						
ANR	1303608	Symbol	MAX_PATH		1303125						
ANR	1303609	Symbol	& symDisplacement		1303125						
ANR	1303610	Function	ExceptionHandler :: _tprintf	408:0:18219:18594							
ANR	1303611	FunctionDef	ExceptionHandler :: _tprintf (const TCHAR * format)		1303610	0					
ANR	1303612	CompoundStatement		408:66:18285:18594	1303610	0					
ANR	1303613	IdentifierDeclStatement	TCHAR szBuff [ 1024 ] ;	409:4:18291:18309	1303610	0	True				
ANR	1303614	IdentifierDecl	szBuff [ 1024 ]		1303610	0					
ANR	1303615	IdentifierDeclType	TCHAR [ 1024 ]		1303610	0					
ANR	1303616	Identifier	szBuff		1303610	1					
ANR	1303617	PrimaryExpression	1024		1303610	2					
ANR	1303618	IdentifierDeclStatement	int retValue ;	410:1:18316:18328	1303610	1	True				
ANR	1303619	IdentifierDecl	retValue		1303610	0					
ANR	1303620	IdentifierDeclType	int		1303610	0					
ANR	1303621	Identifier	retValue		1303610	1					
ANR	1303622	IdentifierDeclStatement	DWORD cbWritten ;	411:1:18335:18350	1303610	2	True				
ANR	1303623	IdentifierDecl	cbWritten		1303610	0					
ANR	1303624	IdentifierDeclType	DWORD		1303610	0					
ANR	1303625	Identifier	cbWritten		1303610	1					
ANR	1303626	IdentifierDeclStatement	va_list argptr ;	412:1:18357:18371	1303610	3	True				
ANR	1303627	IdentifierDecl	argptr		1303610	0					
ANR	1303628	IdentifierDeclType	va_list		1303610	0					
ANR	1303629	Identifier	argptr		1303610	1					
ANR	1303630	ExpressionStatement	"va_start ( argptr , format )"	414:1:18389:18415	1303610	4	True				
ANR	1303631	CallExpression	"va_start ( argptr , format )"		1303610	0					
ANR	1303632	Callee	va_start		1303610	0					
ANR	1303633	Identifier	va_start		1303610	0					
ANR	1303634	ArgumentList	argptr		1303610	1					
ANR	1303635	Argument	argptr		1303610	0					
ANR	1303636	Identifier	argptr		1303610	0					
ANR	1303637	Argument	format		1303610	1					
ANR	1303638	Identifier	format		1303610	0					
ANR	1303639	ExpressionStatement	"retValue = wvsprintf ( szBuff , format , argptr )"	415:4:18421:18467	1303610	5	True				
ANR	1303640	AssignmentExpression	"retValue = wvsprintf ( szBuff , format , argptr )"		1303610	0		=			
ANR	1303641	Identifier	retValue		1303610	0					
ANR	1303642	CallExpression	"wvsprintf ( szBuff , format , argptr )"		1303610	1					
ANR	1303643	Callee	wvsprintf		1303610	0					
ANR	1303644	Identifier	wvsprintf		1303610	0					
ANR	1303645	ArgumentList	szBuff		1303610	1					
ANR	1303646	Argument	szBuff		1303610	0					
ANR	1303647	Identifier	szBuff		1303610	0					
ANR	1303648	Argument	format		1303610	1					
ANR	1303649	Identifier	format		1303610	0					
ANR	1303650	Argument	argptr		1303610	2					
ANR	1303651	Identifier	argptr		1303610	0					
ANR	1303652	ExpressionStatement	va_end ( argptr )	416:1:18474:18490	1303610	6	True				
ANR	1303653	CallExpression	va_end ( argptr )		1303610	0					
ANR	1303654	Callee	va_end		1303610	0					
ANR	1303655	Identifier	va_end		1303610	0					
ANR	1303656	ArgumentList	argptr		1303610	1					
ANR	1303657	Argument	argptr		1303610	0					
ANR	1303658	Identifier	argptr		1303610	0					
ANR	1303659	ExpressionStatement	"WriteFile ( m_hReportFile , szBuff , retValue * sizeof ( TCHAR ) , & cbWritten , 0 )"	417:4:18496:18571	1303610	7	True				
ANR	1303660	CallExpression	"WriteFile ( m_hReportFile , szBuff , retValue * sizeof ( TCHAR ) , & cbWritten , 0 )"		1303610	0					
ANR	1303661	Callee	WriteFile		1303610	0					
ANR	1303662	Identifier	WriteFile		1303610	0					
ANR	1303663	ArgumentList	m_hReportFile		1303610	1					
ANR	1303664	Argument	m_hReportFile		1303610	0					
ANR	1303665	Identifier	m_hReportFile		1303610	0					
ANR	1303666	Argument	szBuff		1303610	1					
ANR	1303667	Identifier	szBuff		1303610	0					
ANR	1303668	Argument	retValue * sizeof ( TCHAR )		1303610	2					
ANR	1303669	MultiplicativeExpression	retValue * sizeof ( TCHAR )		1303610	0		*			
ANR	1303670	Identifier	retValue		1303610	0					
ANR	1303671	SizeofExpression	sizeof ( TCHAR )		1303610	1					
ANR	1303672	Sizeof	sizeof		1303610	0					
ANR	1303673	SizeofOperand	TCHAR		1303610	1					
ANR	1303674	Argument	& cbWritten		1303610	3					
ANR	1303675	UnaryOperationExpression	& cbWritten		1303610	0					
ANR	1303676	UnaryOperator	&		1303610	0					
ANR	1303677	Identifier	cbWritten		1303610	1					
ANR	1303678	Argument	0		1303610	4					
ANR	1303679	PrimaryExpression	0		1303610	0					
ANR	1303680	ReturnStatement	return retValue ;	418:4:18577:18592	1303610	8	True				
ANR	1303681	Identifier	retValue		1303610	0					
ANR	1303682	ReturnType	int __cdecl		1303610	1					
ANR	1303683	Identifier	ExceptionHandler :: _tprintf		1303610	2					
ANR	1303684	ParameterList	const TCHAR * format		1303610	3					
ANR	1303685	Parameter	const TCHAR * format	408:39:18258:18277	1303610	0	True				
ANR	1303686	ParameterType	const TCHAR *		1303610	0					
ANR	1303687	Identifier	format		1303610	1					
ANR	1303688	CFGEntryNode	ENTRY		1303610		True				
ANR	1303689	CFGExitNode	EXIT		1303610		True				
ANR	1303690	Symbol	wvsprintf		1303610						
ANR	1303691	Symbol	& cbWritten		1303610						
ANR	1303692	Symbol	argptr		1303610						
ANR	1303693	Symbol	cbWritten		1303610						
ANR	1303694	Symbol	retValue		1303610						
ANR	1303695	Symbol	format		1303610						
ANR	1303696	Symbol	szBuff		1303610						
ANR	1303697	Symbol	m_hReportFile		1303610						
ANR	1303698	Function	ExceptionHandler :: InitImagehlpFunctions	423:0:18824:20426							
ANR	1303699	FunctionDef	ExceptionHandler :: InitImagehlpFunctions ()		1303698	0					
ANR	1303700	CompoundStatement		423:53:18877:20426	1303698	0					
ANR	1303701	IdentifierDeclStatement	"HMODULE hModImagehlp = LoadLibrary ( _T ( ""IMAGEHLP.DLL"" ) ) ;"	424:4:18883:18939	1303698	0	True				
ANR	1303702	IdentifierDecl	"hModImagehlp = LoadLibrary ( _T ( ""IMAGEHLP.DLL"" ) )"		1303698	0					
ANR	1303703	IdentifierDeclType	HMODULE		1303698	0					
ANR	1303704	Identifier	hModImagehlp		1303698	1					
ANR	1303705	AssignmentExpression	"hModImagehlp = LoadLibrary ( _T ( ""IMAGEHLP.DLL"" ) )"		1303698	2		=			
ANR	1303706	Identifier	hModImagehlp		1303698	0					
ANR	1303707	CallExpression	"LoadLibrary ( _T ( ""IMAGEHLP.DLL"" ) )"		1303698	1					
ANR	1303708	Callee	LoadLibrary		1303698	0					
ANR	1303709	Identifier	LoadLibrary		1303698	0					
ANR	1303710	ArgumentList	"_T ( ""IMAGEHLP.DLL"" )"		1303698	1					
ANR	1303711	Argument	"_T ( ""IMAGEHLP.DLL"" )"		1303698	0					
ANR	1303712	CallExpression	"_T ( ""IMAGEHLP.DLL"" )"		1303698	0					
ANR	1303713	Callee	_T		1303698	0					
ANR	1303714	Identifier	_T		1303698	0					
ANR	1303715	ArgumentList	"""IMAGEHLP.DLL"""		1303698	1					
ANR	1303716	Argument	"""IMAGEHLP.DLL"""		1303698	0					
ANR	1303717	PrimaryExpression	"""IMAGEHLP.DLL"""		1303698	0					
ANR	1303718	IfStatement	if ( ! hModImagehlp )		1303698	1					
ANR	1303719	Condition	! hModImagehlp	425:9:18950:18962	1303698	0	True				
ANR	1303720	UnaryOperationExpression	! hModImagehlp		1303698	0					
ANR	1303721	UnaryOperator	!		1303698	0					
ANR	1303722	Identifier	hModImagehlp		1303698	1					
ANR	1303723	ReturnStatement	return FALSE ;	426:2:18976:18988	1303698	1	True				
ANR	1303724	Identifier	FALSE		1303698	0					
ANR	1303725	ExpressionStatement	"_SymInitialize = ( SYMINITIALIZEPROC ) GetProcAddress ( hModImagehlp , ""SymInitialize"" )"	427:4:18994:19133	1303698	2	True				
ANR	1303726	AssignmentExpression	"_SymInitialize = ( SYMINITIALIZEPROC ) GetProcAddress ( hModImagehlp , ""SymInitialize"" )"		1303698	0		=			
ANR	1303727	Identifier	_SymInitialize		1303698	0					
ANR	1303728	CastExpression	"( SYMINITIALIZEPROC ) GetProcAddress ( hModImagehlp , ""SymInitialize"" )"		1303698	1					
ANR	1303729	CastTarget	SYMINITIALIZEPROC		1303698	0					
ANR	1303730	CallExpression	"GetProcAddress ( hModImagehlp , ""SymInitialize"" )"		1303698	1					
ANR	1303731	Callee	GetProcAddress		1303698	0					
ANR	1303732	Identifier	GetProcAddress		1303698	0					
ANR	1303733	ArgumentList	hModImagehlp		1303698	1					
ANR	1303734	Argument	hModImagehlp		1303698	0					
ANR	1303735	Identifier	hModImagehlp		1303698	0					
ANR	1303736	Argument	"""SymInitialize"""		1303698	1					
ANR	1303737	PrimaryExpression	"""SymInitialize"""		1303698	0					
ANR	1303738	IfStatement	if ( ! _SymInitialize )		1303698	3					
ANR	1303739	Condition	! _SymInitialize	429:9:19144:19158	1303698	0	True				
ANR	1303740	UnaryOperationExpression	! _SymInitialize		1303698	0					
ANR	1303741	UnaryOperator	!		1303698	0					
ANR	1303742	Identifier	_SymInitialize		1303698	1					
ANR	1303743	ReturnStatement	return FALSE ;	430:2:19172:19184	1303698	1	True				
ANR	1303744	Identifier	FALSE		1303698	0					
ANR	1303745	ExpressionStatement	"_SymCleanup = ( SYMCLEANUPPROC ) GetProcAddress ( hModImagehlp , ""SymCleanup"" )"	431:4:19190:19264	1303698	4	True				
ANR	1303746	AssignmentExpression	"_SymCleanup = ( SYMCLEANUPPROC ) GetProcAddress ( hModImagehlp , ""SymCleanup"" )"		1303698	0		=			
ANR	1303747	Identifier	_SymCleanup		1303698	0					
ANR	1303748	CastExpression	"( SYMCLEANUPPROC ) GetProcAddress ( hModImagehlp , ""SymCleanup"" )"		1303698	1					
ANR	1303749	CastTarget	SYMCLEANUPPROC		1303698	0					
ANR	1303750	CallExpression	"GetProcAddress ( hModImagehlp , ""SymCleanup"" )"		1303698	1					
ANR	1303751	Callee	GetProcAddress		1303698	0					
ANR	1303752	Identifier	GetProcAddress		1303698	0					
ANR	1303753	ArgumentList	hModImagehlp		1303698	1					
ANR	1303754	Argument	hModImagehlp		1303698	0					
ANR	1303755	Identifier	hModImagehlp		1303698	0					
ANR	1303756	Argument	"""SymCleanup"""		1303698	1					
ANR	1303757	PrimaryExpression	"""SymCleanup"""		1303698	0					
ANR	1303758	IfStatement	if ( ! _SymCleanup )		1303698	5					
ANR	1303759	Condition	! _SymCleanup	432:9:19275:19286	1303698	0	True				
ANR	1303760	UnaryOperationExpression	! _SymCleanup		1303698	0					
ANR	1303761	UnaryOperator	!		1303698	0					
ANR	1303762	Identifier	_SymCleanup		1303698	1					
ANR	1303763	ReturnStatement	return FALSE ;	433:2:19292:19304	1303698	1	True				
ANR	1303764	Identifier	FALSE		1303698	0					
ANR	1303765	ExpressionStatement	"_StackWalk = ( STACKWALKPROC ) GetProcAddress ( hModImagehlp , ""StackWalk"" )"	434:4:19310:19381	1303698	6	True				
ANR	1303766	AssignmentExpression	"_StackWalk = ( STACKWALKPROC ) GetProcAddress ( hModImagehlp , ""StackWalk"" )"		1303698	0		=			
ANR	1303767	Identifier	_StackWalk		1303698	0					
ANR	1303768	CastExpression	"( STACKWALKPROC ) GetProcAddress ( hModImagehlp , ""StackWalk"" )"		1303698	1					
ANR	1303769	CastTarget	STACKWALKPROC		1303698	0					
ANR	1303770	CallExpression	"GetProcAddress ( hModImagehlp , ""StackWalk"" )"		1303698	1					
ANR	1303771	Callee	GetProcAddress		1303698	0					
ANR	1303772	Identifier	GetProcAddress		1303698	0					
ANR	1303773	ArgumentList	hModImagehlp		1303698	1					
ANR	1303774	Argument	hModImagehlp		1303698	0					
ANR	1303775	Identifier	hModImagehlp		1303698	0					
ANR	1303776	Argument	"""StackWalk"""		1303698	1					
ANR	1303777	PrimaryExpression	"""StackWalk"""		1303698	0					
ANR	1303778	IfStatement	if ( ! _StackWalk )		1303698	7					
ANR	1303779	Condition	! _StackWalk	435:9:19392:19402	1303698	0	True				
ANR	1303780	UnaryOperationExpression	! _StackWalk		1303698	0					
ANR	1303781	UnaryOperator	!		1303698	0					
ANR	1303782	Identifier	_StackWalk		1303698	1					
ANR	1303783	ReturnStatement	return FALSE ;	436:2:19408:19420	1303698	1	True				
ANR	1303784	Identifier	FALSE		1303698	0					
ANR	1303785	ExpressionStatement	"_SymFunctionTableAccess = ( SYMFUNCTIONTABLEACCESSPROC ) GetProcAddress ( hModImagehlp , ""SymFunctionTableAccess"" )"	437:4:19426:19561	1303698	8	True				
ANR	1303786	AssignmentExpression	"_SymFunctionTableAccess = ( SYMFUNCTIONTABLEACCESSPROC ) GetProcAddress ( hModImagehlp , ""SymFunctionTableAccess"" )"		1303698	0		=			
ANR	1303787	Identifier	_SymFunctionTableAccess		1303698	0					
ANR	1303788	CastExpression	"( SYMFUNCTIONTABLEACCESSPROC ) GetProcAddress ( hModImagehlp , ""SymFunctionTableAccess"" )"		1303698	1					
ANR	1303789	CastTarget	SYMFUNCTIONTABLEACCESSPROC		1303698	0					
ANR	1303790	CallExpression	"GetProcAddress ( hModImagehlp , ""SymFunctionTableAccess"" )"		1303698	1					
ANR	1303791	Callee	GetProcAddress		1303698	0					
ANR	1303792	Identifier	GetProcAddress		1303698	0					
ANR	1303793	ArgumentList	hModImagehlp		1303698	1					
ANR	1303794	Argument	hModImagehlp		1303698	0					
ANR	1303795	Identifier	hModImagehlp		1303698	0					
ANR	1303796	Argument	"""SymFunctionTableAccess"""		1303698	1					
ANR	1303797	PrimaryExpression	"""SymFunctionTableAccess"""		1303698	0					
ANR	1303798	IfStatement	if ( ! _SymFunctionTableAccess )		1303698	9					
ANR	1303799	Condition	! _SymFunctionTableAccess	439:9:19572:19595	1303698	0	True				
ANR	1303800	UnaryOperationExpression	! _SymFunctionTableAccess		1303698	0					
ANR	1303801	UnaryOperator	!		1303698	0					
ANR	1303802	Identifier	_SymFunctionTableAccess		1303698	1					
ANR	1303803	ReturnStatement	return FALSE ;	440:2:19601:19613	1303698	1	True				
ANR	1303804	Identifier	FALSE		1303698	0					
ANR	1303805	ExpressionStatement	"_SymGetModuleBase = ( SYMGETMODULEBASEPROC ) GetProcAddress ( hModImagehlp , ""SymGetModuleBase"" )"	441:4:19619:19768	1303698	10	True				
ANR	1303806	AssignmentExpression	"_SymGetModuleBase = ( SYMGETMODULEBASEPROC ) GetProcAddress ( hModImagehlp , ""SymGetModuleBase"" )"		1303698	0		=			
ANR	1303807	Identifier	_SymGetModuleBase		1303698	0					
ANR	1303808	CastExpression	"( SYMGETMODULEBASEPROC ) GetProcAddress ( hModImagehlp , ""SymGetModuleBase"" )"		1303698	1					
ANR	1303809	CastTarget	SYMGETMODULEBASEPROC		1303698	0					
ANR	1303810	CallExpression	"GetProcAddress ( hModImagehlp , ""SymGetModuleBase"" )"		1303698	1					
ANR	1303811	Callee	GetProcAddress		1303698	0					
ANR	1303812	Identifier	GetProcAddress		1303698	0					
ANR	1303813	ArgumentList	hModImagehlp		1303698	1					
ANR	1303814	Argument	hModImagehlp		1303698	0					
ANR	1303815	Identifier	hModImagehlp		1303698	0					
ANR	1303816	Argument	"""SymGetModuleBase"""		1303698	1					
ANR	1303817	PrimaryExpression	"""SymGetModuleBase"""		1303698	0					
ANR	1303818	IfStatement	if ( ! _SymGetModuleBase )		1303698	11					
ANR	1303819	Condition	! _SymGetModuleBase	443:9:19779:19796	1303698	0	True				
ANR	1303820	UnaryOperationExpression	! _SymGetModuleBase		1303698	0					
ANR	1303821	UnaryOperator	!		1303698	0					
ANR	1303822	Identifier	_SymGetModuleBase		1303698	1					
ANR	1303823	ReturnStatement	return FALSE ;	444:2:19802:19814	1303698	1	True				
ANR	1303824	Identifier	FALSE		1303698	0					
ANR	1303825	ExpressionStatement	"_SymGetSymFromAddr = ( SYMGETSYMFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetSymFromAddr"" )"	445:4:19820:19973	1303698	12	True				
ANR	1303826	AssignmentExpression	"_SymGetSymFromAddr = ( SYMGETSYMFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetSymFromAddr"" )"		1303698	0		=			
ANR	1303827	Identifier	_SymGetSymFromAddr		1303698	0					
ANR	1303828	CastExpression	"( SYMGETSYMFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetSymFromAddr"" )"		1303698	1					
ANR	1303829	CastTarget	SYMGETSYMFROMADDRPROC		1303698	0					
ANR	1303830	CallExpression	"GetProcAddress ( hModImagehlp , ""SymGetSymFromAddr"" )"		1303698	1					
ANR	1303831	Callee	GetProcAddress		1303698	0					
ANR	1303832	Identifier	GetProcAddress		1303698	0					
ANR	1303833	ArgumentList	hModImagehlp		1303698	1					
ANR	1303834	Argument	hModImagehlp		1303698	0					
ANR	1303835	Identifier	hModImagehlp		1303698	0					
ANR	1303836	Argument	"""SymGetSymFromAddr"""		1303698	1					
ANR	1303837	PrimaryExpression	"""SymGetSymFromAddr"""		1303698	0					
ANR	1303838	IfStatement	if ( ! _SymGetSymFromAddr )		1303698	13					
ANR	1303839	Condition	! _SymGetSymFromAddr	447:9:19984:20002	1303698	0	True				
ANR	1303840	UnaryOperationExpression	! _SymGetSymFromAddr		1303698	0					
ANR	1303841	UnaryOperator	!		1303698	0					
ANR	1303842	Identifier	_SymGetSymFromAddr		1303698	1					
ANR	1303843	ReturnStatement	return FALSE ;	448:2:20013:20025	1303698	1	True				
ANR	1303844	Identifier	FALSE		1303698	0					
ANR	1303845	ExpressionStatement	"_SymGetLineFromAddr = ( SYMGETLINEFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetLineFromAddr"" )"	453:1:20214:20326	1303698	14	True				
ANR	1303846	AssignmentExpression	"_SymGetLineFromAddr = ( SYMGETLINEFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetLineFromAddr"" )"		1303698	0		=			
ANR	1303847	Identifier	_SymGetLineFromAddr		1303698	0					
ANR	1303848	CastExpression	"( SYMGETLINEFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetLineFromAddr"" )"		1303698	1					
ANR	1303849	CastTarget	SYMGETLINEFROMADDRPROC		1303698	0					
ANR	1303850	CallExpression	"GetProcAddress ( hModImagehlp , ""SymGetLineFromAddr"" )"		1303698	1					
ANR	1303851	Callee	GetProcAddress		1303698	0					
ANR	1303852	Identifier	GetProcAddress		1303698	0					
ANR	1303853	ArgumentList	hModImagehlp		1303698	1					
ANR	1303854	Argument	hModImagehlp		1303698	0					
ANR	1303855	Identifier	hModImagehlp		1303698	0					
ANR	1303856	Argument	"""SymGetLineFromAddr"""		1303698	1					
ANR	1303857	PrimaryExpression	"""SymGetLineFromAddr"""		1303698	0					
ANR	1303858	IfStatement	"if ( ! _SymInitialize ( GetCurrentProcess ( ) , NULL , TRUE ) )"		1303698	15					
ANR	1303859	Condition	"! _SymInitialize ( GetCurrentProcess ( ) , NULL , TRUE )"	456:9:20338:20387	1303698	0	True				
ANR	1303860	UnaryOperationExpression	"! _SymInitialize ( GetCurrentProcess ( ) , NULL , TRUE )"		1303698	0					
ANR	1303861	UnaryOperator	!		1303698	0					
ANR	1303862	CallExpression	"_SymInitialize ( GetCurrentProcess ( ) , NULL , TRUE )"		1303698	1					
ANR	1303863	Callee	_SymInitialize		1303698	0					
ANR	1303864	Identifier	_SymInitialize		1303698	0					
ANR	1303865	ArgumentList	GetCurrentProcess ( )		1303698	1					
ANR	1303866	Argument	GetCurrentProcess ( )		1303698	0					
ANR	1303867	CallExpression	GetCurrentProcess ( )		1303698	0					
ANR	1303868	Callee	GetCurrentProcess		1303698	0					
ANR	1303869	Identifier	GetCurrentProcess		1303698	0					
ANR	1303870	ArgumentList			1303698	1					
ANR	1303871	Argument	NULL		1303698	1					
ANR	1303872	Identifier	NULL		1303698	0					
ANR	1303873	Argument	TRUE		1303698	2					
ANR	1303874	Identifier	TRUE		1303698	0					
ANR	1303875	ReturnStatement	return FALSE ;	457:2:20393:20405	1303698	1	True				
ANR	1303876	Identifier	FALSE		1303698	0					
ANR	1303877	ReturnStatement	return TRUE ;	459:4:20412:20423	1303698	16	True				
ANR	1303878	Identifier	TRUE		1303698	0					
ANR	1303879	ReturnType	BOOL		1303698	1					
ANR	1303880	Identifier	ExceptionHandler :: InitImagehlpFunctions		1303698	2					
ANR	1303881	ParameterList			1303698	3					
ANR	1303882	CFGEntryNode	ENTRY		1303698		True				
ANR	1303883	CFGExitNode	EXIT		1303698		True				
ANR	1303884	Symbol	_StackWalk		1303698						
ANR	1303885	Symbol	NULL		1303698						
ANR	1303886	Symbol	_SymInitialize		1303698						
ANR	1303887	Symbol	_SymFunctionTableAccess		1303698						
ANR	1303888	Symbol	GetCurrentProcess		1303698						
ANR	1303889	Symbol	TRUE		1303698						
ANR	1303890	Symbol	_SymCleanup		1303698						
ANR	1303891	Symbol	hModImagehlp		1303698						
ANR	1303892	Symbol	LoadLibrary		1303698						
ANR	1303893	Symbol	_T		1303698						
ANR	1303894	Symbol	GetProcAddress		1303698						
ANR	1303895	Symbol	_SymGetModuleBase		1303698						
ANR	1303896	Symbol	FALSE		1303698						
ANR	1303897	Symbol	_SymGetSymFromAddr		1303698						
ANR	1303898	Symbol	_SymGetLineFromAddr		1303698						
