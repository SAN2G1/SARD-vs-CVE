command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3036190	File	data/converged/CVE-2011-4930_htcondor/src_condor_daemon_core.V6_daemon_core.cpp								
ANR	3036191	DeclStmt									
ANR	3036192	Decl							void	void ( )	Generic_stop_logging
ANR	3036193	DeclStmt									
ANR	3036194	Decl							const int	const int	DEFAULT_MAXCOMMANDS
ANR	3036195	DeclStmt									
ANR	3036196	Decl							const int	const int	DEFAULT_MAXSIGNALS
ANR	3036197	DeclStmt									
ANR	3036198	Decl							const int	const int	DEFAULT_MAXSOCKETS
ANR	3036199	DeclStmt									
ANR	3036200	Decl							const int	const int	DEFAULT_MAXPIPES
ANR	3036201	DeclStmt									
ANR	3036202	Decl							const int	const int	DEFAULT_MAXREAPS
ANR	3036203	DeclStmt									
ANR	3036204	Decl							const int	const int	DEFAULT_PIDBUCKETS
ANR	3036205	DeclStmt									
ANR	3036206	Decl							const int	const int	DEFAULT_MAX_PID_COLLISIONS
ANR	3036207	DeclStmt									
ANR	3036208	Decl							const char	const char *	DEFAULT_INDENT
ANR	3036209	DeclStmt									
ANR	3036210	Decl							const int	const int	MAX_TIME_SKIP
ANR	3036211	DeclStmt									
ANR	3036212	Decl							const int	const int	MIN_FILE_DESCRIPTOR_SAFETY_LIMIT
ANR	3036213	DeclStmt									
ANR	3036214	Decl							const int	const int	MIN_REGISTERED_SOCKET_SAFETY_LIMIT
ANR	3036215	DeclStmt									
ANR	3036216	Decl							const int	const int	DC_PIPE_BUF_SIZE
ANR	3036217	DeclStmt									
ANR	3036218	Decl							CRITICAL_SECTION	CRITICAL_SECTION	Big_fat_mutex
ANR	3036219	DeclStmt									
ANR	3036220	Decl							const char	const char *	EMPTY_DESCRIP
ANR	3036221	DeclStmt									
ANR	3036222	Decl							const int	const int	DaemonCore :: ERRNO_EXEC_AS_ROOT
ANR	3036223	DeclStmt									
ANR	3036224	Decl							const int	const int	DaemonCore :: ERRNO_PID_COLLISION
ANR	3036225	DeclStmt									
ANR	3036226	Decl							const int	const int	DaemonCore :: ERRNO_REGISTRATION_FAILED
ANR	3036227	DeclStmt									
ANR	3036228	Decl							const int	const int	DaemonCore :: ERRNO_EXIT
ANR	3036229	ClassDef	<unnamed>	142:9:4383:4677							
ANR	3036230	DeclStmt									
ANR	3036231	Decl							long	long	osfhnd
ANR	3036232	DeclStmt									
ANR	3036233	Decl							char	char	osfile
ANR	3036234	DeclStmt									
ANR	3036235	Decl							char	char	pipech
ANR	3036236	DeclStmt									
ANR	3036237	Decl							int	int	lockinitflag
ANR	3036238	DeclStmt									
ANR	3036239	Decl							CRITICAL_SECTION	CRITICAL_SECTION	lock
ANR	3036240	DeclStmt									
ANR	3036241	Decl									ioinfo
ANR	3036242	DeclStmt									
ANR	3036243	Decl							extern _CRTIMP ioinfo	extern _CRTIMP ioinfo * [ ]	__pioinfo
ANR	3036244	DeclStmt									
ANR	3036245	Decl							extern int	extern int	_nhandle
ANR	3036246	DeclStmt									
ANR	3036247	Decl							extern void __cdecl	extern void __cdecl ( int )	_lock_fhandle
ANR	3036248	DeclStmt									
ANR	3036249	Decl							extern void __cdecl	extern void __cdecl ( int )	_unlock_fhandle
ANR	3036250	Function	tdp_wait_stopped_child	176:0:5567:6211							
ANR	3036251	FunctionDef	tdp_wait_stopped_child (pid_t pid)		3036250	0					
ANR	3036252	CompoundStatement		178:0:5606:6211	3036250	0					
ANR	3036253	IdentifierDeclStatement	int wait_val ;	180:4:5613:5625	3036250	0	True				
ANR	3036254	IdentifierDecl	wait_val		3036250	0					
ANR	3036255	IdentifierDeclType	int		3036250	0					
ANR	3036256	Identifier	wait_val		3036250	1					
ANR	3036257	IfStatement	"if ( waitpid ( pid , & wait_val , 0 ) == - 1 )"		3036250	1					
ANR	3036258	Condition	"waitpid ( pid , & wait_val , 0 ) == - 1"	182:8:5636:5667	3036250	0	True				
ANR	3036259	EqualityExpression	"waitpid ( pid , & wait_val , 0 ) == - 1"		3036250	0		==			
ANR	3036260	CallExpression	"waitpid ( pid , & wait_val , 0 )"		3036250	0					
ANR	3036261	Callee	waitpid		3036250	0					
ANR	3036262	Identifier	waitpid		3036250	0					
ANR	3036263	ArgumentList	pid		3036250	1					
ANR	3036264	Argument	pid		3036250	0					
ANR	3036265	Identifier	pid		3036250	0					
ANR	3036266	Argument	& wait_val		3036250	1					
ANR	3036267	UnaryOperationExpression	& wait_val		3036250	0					
ANR	3036268	UnaryOperator	&		3036250	0					
ANR	3036269	Identifier	wait_val		3036250	1					
ANR	3036270	Argument	0		3036250	2					
ANR	3036271	PrimaryExpression	0		3036250	0					
ANR	3036272	UnaryOperationExpression	- 1		3036250	1					
ANR	3036273	UnaryOperator	-		3036250	0					
ANR	3036274	PrimaryExpression	1		3036250	1					
ANR	3036275	CompoundStatement		5:42:63:63	3036250	1					
ANR	3036276	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wait for Stopped Child wait failed: %d (%s) \\n"" , errno , strerror ( errno ) )"	183:1:5673:5764	3036250	0	True				
ANR	3036277	CallExpression	"dprintf ( D_ALWAYS , ""Wait for Stopped Child wait failed: %d (%s) \\n"" , errno , strerror ( errno ) )"		3036250	0					
ANR	3036278	Callee	dprintf		3036250	0					
ANR	3036279	Identifier	dprintf		3036250	0					
ANR	3036280	ArgumentList	D_ALWAYS		3036250	1					
ANR	3036281	Argument	D_ALWAYS		3036250	0					
ANR	3036282	Identifier	D_ALWAYS		3036250	0					
ANR	3036283	Argument	"""Wait for Stopped Child wait failed: %d (%s) \\n"""		3036250	1					
ANR	3036284	PrimaryExpression	"""Wait for Stopped Child wait failed: %d (%s) \\n"""		3036250	0					
ANR	3036285	Argument	errno		3036250	2					
ANR	3036286	Identifier	errno		3036250	0					
ANR	3036287	Argument	strerror ( errno )		3036250	3					
ANR	3036288	CallExpression	strerror ( errno )		3036250	0					
ANR	3036289	Callee	strerror		3036250	0					
ANR	3036290	Identifier	strerror		3036250	0					
ANR	3036291	ArgumentList	errno		3036250	1					
ANR	3036292	Argument	errno		3036250	0					
ANR	3036293	Identifier	errno		3036250	0					
ANR	3036294	ReturnStatement	return - 1 ;	184:1:5767:5776	3036250	1	True				
ANR	3036295	UnaryOperationExpression	- 1		3036250	0					
ANR	3036296	UnaryOperator	-		3036250	0					
ANR	3036297	PrimaryExpression	1		3036250	1					
ANR	3036298	IfStatement	if ( ! WIFSTOPPED ( wait_val ) )		3036250	2					
ANR	3036299	Condition	! WIFSTOPPED ( wait_val )	187:7:5792:5812	3036250	0	True				
ANR	3036300	UnaryOperationExpression	! WIFSTOPPED ( wait_val )		3036250	0					
ANR	3036301	UnaryOperator	!		3036250	0					
ANR	3036302	CallExpression	WIFSTOPPED ( wait_val )		3036250	1					
ANR	3036303	Callee	WIFSTOPPED		3036250	0					
ANR	3036304	Identifier	WIFSTOPPED		3036250	0					
ANR	3036305	ArgumentList	wait_val		3036250	1					
ANR	3036306	Argument	wait_val		3036250	0					
ANR	3036307	Identifier	wait_val		3036250	0					
ANR	3036308	CompoundStatement		10:30:208:208	3036250	1					
ANR	3036309	ReturnStatement	return - 1 ;	188:1:5818:5827	3036250	0	True				
ANR	3036310	UnaryOperationExpression	- 1		3036250	0					
ANR	3036311	UnaryOperator	-		3036250	0					
ANR	3036312	PrimaryExpression	1		3036250	1					
ANR	3036313	IfStatement	"if ( kill ( pid , SIGSTOP ) < 0 )"		3036250	3					
ANR	3036314	Condition	"kill ( pid , SIGSTOP ) < 0"	191:8:5895:5916	3036250	0	True				
ANR	3036315	RelationalExpression	"kill ( pid , SIGSTOP ) < 0"		3036250	0		<			
ANR	3036316	CallExpression	"kill ( pid , SIGSTOP )"		3036250	0					
ANR	3036317	Callee	kill		3036250	0					
ANR	3036318	Identifier	kill		3036250	0					
ANR	3036319	ArgumentList	pid		3036250	1					
ANR	3036320	Argument	pid		3036250	0					
ANR	3036321	Identifier	pid		3036250	0					
ANR	3036322	Argument	SIGSTOP		3036250	1					
ANR	3036323	Identifier	SIGSTOP		3036250	0					
ANR	3036324	PrimaryExpression	0		3036250	1					
ANR	3036325	CompoundStatement		14:32:312:312	3036250	1					
ANR	3036326	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wait for Stopped Child kill failed: %d (%s) \\n"" , errno , strerror ( errno ) )"	192:1:5922:6013	3036250	0	True				
ANR	3036327	CallExpression	"dprintf ( D_ALWAYS , ""Wait for Stopped Child kill failed: %d (%s) \\n"" , errno , strerror ( errno ) )"		3036250	0					
ANR	3036328	Callee	dprintf		3036250	0					
ANR	3036329	Identifier	dprintf		3036250	0					
ANR	3036330	ArgumentList	D_ALWAYS		3036250	1					
ANR	3036331	Argument	D_ALWAYS		3036250	0					
ANR	3036332	Identifier	D_ALWAYS		3036250	0					
ANR	3036333	Argument	"""Wait for Stopped Child kill failed: %d (%s) \\n"""		3036250	1					
ANR	3036334	PrimaryExpression	"""Wait for Stopped Child kill failed: %d (%s) \\n"""		3036250	0					
ANR	3036335	Argument	errno		3036250	2					
ANR	3036336	Identifier	errno		3036250	0					
ANR	3036337	Argument	strerror ( errno )		3036250	3					
ANR	3036338	CallExpression	strerror ( errno )		3036250	0					
ANR	3036339	Callee	strerror		3036250	0					
ANR	3036340	Identifier	strerror		3036250	0					
ANR	3036341	ArgumentList	errno		3036250	1					
ANR	3036342	Argument	errno		3036250	0					
ANR	3036343	Identifier	errno		3036250	0					
ANR	3036344	ReturnStatement	return - 1 ;	193:1:6016:6025	3036250	1	True				
ANR	3036345	UnaryOperationExpression	- 1		3036250	0					
ANR	3036346	UnaryOperator	-		3036250	0					
ANR	3036347	PrimaryExpression	1		3036250	1					
ANR	3036348	IfStatement	"if ( ptrace ( PTRACE_DETACH , pid , 0 , 0 ) < 0 )"		3036250	4					
ANR	3036349	Condition	"ptrace ( PTRACE_DETACH , pid , 0 , 0 ) < 0"	196:8:6042:6077	3036250	0	True				
ANR	3036350	RelationalExpression	"ptrace ( PTRACE_DETACH , pid , 0 , 0 ) < 0"		3036250	0		<			
ANR	3036351	CallExpression	"ptrace ( PTRACE_DETACH , pid , 0 , 0 )"		3036250	0					
ANR	3036352	Callee	ptrace		3036250	0					
ANR	3036353	Identifier	ptrace		3036250	0					
ANR	3036354	ArgumentList	PTRACE_DETACH		3036250	1					
ANR	3036355	Argument	PTRACE_DETACH		3036250	0					
ANR	3036356	Identifier	PTRACE_DETACH		3036250	0					
ANR	3036357	Argument	pid		3036250	1					
ANR	3036358	Identifier	pid		3036250	0					
ANR	3036359	Argument	0		3036250	2					
ANR	3036360	PrimaryExpression	0		3036250	0					
ANR	3036361	Argument	0		3036250	3					
ANR	3036362	PrimaryExpression	0		3036250	0					
ANR	3036363	PrimaryExpression	0		3036250	1					
ANR	3036364	CompoundStatement		19:46:473:473	3036250	1					
ANR	3036365	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wait for Stopped Child detach failed: %d (%s) \\n"" , errno , strerror ( errno ) )"	197:1:6083:6176	3036250	0	True				
ANR	3036366	CallExpression	"dprintf ( D_ALWAYS , ""Wait for Stopped Child detach failed: %d (%s) \\n"" , errno , strerror ( errno ) )"		3036250	0					
ANR	3036367	Callee	dprintf		3036250	0					
ANR	3036368	Identifier	dprintf		3036250	0					
ANR	3036369	ArgumentList	D_ALWAYS		3036250	1					
ANR	3036370	Argument	D_ALWAYS		3036250	0					
ANR	3036371	Identifier	D_ALWAYS		3036250	0					
ANR	3036372	Argument	"""Wait for Stopped Child detach failed: %d (%s) \\n"""		3036250	1					
ANR	3036373	PrimaryExpression	"""Wait for Stopped Child detach failed: %d (%s) \\n"""		3036250	0					
ANR	3036374	Argument	errno		3036250	2					
ANR	3036375	Identifier	errno		3036250	0					
ANR	3036376	Argument	strerror ( errno )		3036250	3					
ANR	3036377	CallExpression	strerror ( errno )		3036250	0					
ANR	3036378	Callee	strerror		3036250	0					
ANR	3036379	Identifier	strerror		3036250	0					
ANR	3036380	ArgumentList	errno		3036250	1					
ANR	3036381	Argument	errno		3036250	0					
ANR	3036382	Identifier	errno		3036250	0					
ANR	3036383	ReturnStatement	return - 1 ;	198:1:6179:6188	3036250	1	True				
ANR	3036384	UnaryOperationExpression	- 1		3036250	0					
ANR	3036385	UnaryOperator	-		3036250	0					
ANR	3036386	PrimaryExpression	1		3036250	1					
ANR	3036387	ReturnStatement	return 0 ;	201:4:6201:6209	3036250	5	True				
ANR	3036388	PrimaryExpression	0		3036250	0					
ANR	3036389	ReturnType	int		3036250	1					
ANR	3036390	Identifier	tdp_wait_stopped_child		3036250	2					
ANR	3036391	ParameterList	pid_t pid		3036250	3					
ANR	3036392	Parameter	pid_t pid	177:24:5595:5603	3036250	0	True				
ANR	3036393	ParameterType	pid_t		3036250	0					
ANR	3036394	Identifier	pid		3036250	1					
ANR	3036395	CFGEntryNode	ENTRY		3036250		True				
ANR	3036396	CFGExitNode	EXIT		3036250		True				
ANR	3036397	Symbol	strerror		3036250						
ANR	3036398	Symbol	errno		3036250						
ANR	3036399	Symbol	wait_val		3036250						
ANR	3036400	Symbol	ptrace		3036250						
ANR	3036401	Symbol	SIGSTOP		3036250						
ANR	3036402	Symbol	PTRACE_DETACH		3036250						
ANR	3036403	Symbol	& wait_val		3036250						
ANR	3036404	Symbol	D_ALWAYS		3036250						
ANR	3036405	Symbol	pid		3036250						
ANR	3036406	Symbol	kill		3036250						
ANR	3036407	Symbol	waitpid		3036250						
ANR	3036408	Symbol	WIFSTOPPED		3036250						
ANR	3036409	DeclStmt									
ANR	3036410	Decl							unsigned int	unsigned int	ZZZZZ
ANR	3036411	Function	ZZZ_always_increase	227:0:6782:6827							
ANR	3036412	FunctionDef	ZZZ_always_increase ()		3036411	0					
ANR	3036413	CompoundStatement		227:26:6808:6827	3036411	0					
ANR	3036414	ReturnStatement	return ZZZZZ ++ ;	228:1:6811:6825	3036411	0	True				
ANR	3036415	PostIncDecOperationExpression	ZZZZZ ++		3036411	0					
ANR	3036416	Identifier	ZZZZZ		3036411	0					
ANR	3036417	IncDec	++		3036411	1					
ANR	3036418	ReturnType	int		3036411	1					
ANR	3036419	Identifier	ZZZ_always_increase		3036411	2					
ANR	3036420	ParameterList			3036411	3					
ANR	3036421	CFGEntryNode	ENTRY		3036411		True				
ANR	3036422	CFGExitNode	EXIT		3036411		True				
ANR	3036423	Symbol	ZZZZZ		3036411						
ANR	3036424	DeclStmt									
ANR	3036425	Decl							int	int	_condor_exit_with_exec
ANR	3036426	DeclStmt									
ANR	3036427	Decl							void	void * *	curr_dataptr
ANR	3036428	DeclStmt									
ANR	3036429	Decl							void	void * *	curr_regdataptr
ANR	3036430	DeclStmt									
ANR	3036431	Decl							extern void	extern void ( void )	drop_addr_file
ANR	3036432	DeclStmt									
ANR	3036433	Decl							TimerManager	TimerManager	DaemonCore :: t
ANR	3036434	Function	compute_pid_hash	241:0:7014:7098							
ANR	3036435	FunctionDef	compute_pid_hash (const pid_t & key)		3036434	0					
ANR	3036436	CompoundStatement		242:0:7069:7098	3036434	0					
ANR	3036437	ReturnStatement	return ( unsigned int ) key ;	243:1:7072:7096	3036434	0	True				
ANR	3036438	CastExpression	( unsigned int ) key		3036434	0					
ANR	3036439	CastTarget	unsigned int		3036434	0					
ANR	3036440	Identifier	key		3036434	1					
ANR	3036441	ReturnType	static unsigned int		3036434	1					
ANR	3036442	Identifier	compute_pid_hash		3036434	2					
ANR	3036443	ParameterList	const pid_t & key		3036434	3					
ANR	3036444	Parameter	const pid_t & key	241:37:7051:7066	3036434	0	True				
ANR	3036445	ParameterType	const pid_t &		3036434	0					
ANR	3036446	Identifier	key		3036434	1					
ANR	3036447	CFGEntryNode	ENTRY		3036434		True				
ANR	3036448	CFGExitNode	EXIT		3036434		True				
ANR	3036449	Symbol	key		3036434						
ANR	3036450	Function	DaemonCore :: DaemonCore	248:0:7129:13174							
ANR	3036451	FunctionDef	"DaemonCore :: DaemonCore (int PidSize , int ComSize , int SigSize , int SocSize , int ReapSize , int PipeSize)"		3036450	0					
ANR	3036452	CompoundStatement		250:0:7233:13174	3036450	0					
ANR	3036453	IfStatement	if ( ComSize < 0 || SigSize < 0 || SocSize < 0 || PidSize < 0 )		3036450	0					
ANR	3036454	Condition	ComSize < 0 || SigSize < 0 || SocSize < 0 || PidSize < 0	252:4:7240:7295	3036450	0	True				
ANR	3036455	OrExpression	ComSize < 0 || SigSize < 0 || SocSize < 0 || PidSize < 0		3036450	0		||			
ANR	3036456	RelationalExpression	ComSize < 0		3036450	0		<			
ANR	3036457	Identifier	ComSize		3036450	0					
ANR	3036458	PrimaryExpression	0		3036450	1					
ANR	3036459	OrExpression	SigSize < 0 || SocSize < 0 || PidSize < 0		3036450	1		||			
ANR	3036460	RelationalExpression	SigSize < 0		3036450	0		<			
ANR	3036461	Identifier	SigSize		3036450	0					
ANR	3036462	PrimaryExpression	0		3036450	1					
ANR	3036463	OrExpression	SocSize < 0 || PidSize < 0		3036450	1		||			
ANR	3036464	RelationalExpression	SocSize < 0		3036450	0		<			
ANR	3036465	Identifier	SocSize		3036450	0					
ANR	3036466	PrimaryExpression	0		3036450	1					
ANR	3036467	RelationalExpression	PidSize < 0		3036450	1		<			
ANR	3036468	Identifier	PidSize		3036450	0					
ANR	3036469	PrimaryExpression	0		3036450	1					
ANR	3036470	CompoundStatement		4:1:65:65	3036450	1					
ANR	3036471	ExpressionStatement	"EXCEPT ( ""Invalid argument(s) for DaemonCore constructor"" )"	254:2:7303:7359	3036450	0	True				
ANR	3036472	CallExpression	"EXCEPT ( ""Invalid argument(s) for DaemonCore constructor"" )"		3036450	0					
ANR	3036473	Callee	EXCEPT		3036450	0					
ANR	3036474	Identifier	EXCEPT		3036450	0					
ANR	3036475	ArgumentList	"""Invalid argument(s) for DaemonCore constructor"""		3036450	1					
ANR	3036476	Argument	"""Invalid argument(s) for DaemonCore constructor"""		3036450	0					
ANR	3036477	PrimaryExpression	"""Invalid argument(s) for DaemonCore constructor"""		3036450	0					
ANR	3036478	ExpressionStatement	dc_stats . Init ( )	257:4:7369:7384	3036450	1	True				
ANR	3036479	CallExpression	dc_stats . Init ( )		3036450	0					
ANR	3036480	Callee	dc_stats . Init		3036450	0					
ANR	3036481	MemberAccess	dc_stats . Init		3036450	0					
ANR	3036482	Identifier	dc_stats		3036450	0					
ANR	3036483	Identifier	Init		3036450	1					
ANR	3036484	ArgumentList			3036450	1					
ANR	3036485	ExpressionStatement	dc_stats . SetWindowSize ( 20 * 60 )	258:4:7415:7444	3036450	2	True				
ANR	3036486	CallExpression	dc_stats . SetWindowSize ( 20 * 60 )		3036450	0					
ANR	3036487	Callee	dc_stats . SetWindowSize		3036450	0					
ANR	3036488	MemberAccess	dc_stats . SetWindowSize		3036450	0					
ANR	3036489	Identifier	dc_stats		3036450	0					
ANR	3036490	Identifier	SetWindowSize		3036450	1					
ANR	3036491	ArgumentList	20 * 60		3036450	1					
ANR	3036492	Argument	20 * 60		3036450	0					
ANR	3036493	MultiplicativeExpression	20 * 60		3036450	0		*			
ANR	3036494	PrimaryExpression	20		3036450	0					
ANR	3036495	PrimaryExpression	60		3036450	1					
ANR	3036496	ExpressionStatement	"daemonCoreSockAdapter . EnableDaemonCore ( this , ( DaemonCoreSockAdapterClass :: Register_Socket_fnptr ) & DaemonCore :: Register_Socket , & DaemonCore :: Cancel_Socket , & DaemonCore :: CallSocketHandler , & DaemonCore :: CallCommandHandler , & DaemonCore :: HandleReqAsync , & DaemonCore :: Register_DataPtr , & DaemonCore :: GetDataPtr , ( DaemonCoreSockAdapterClass :: Register_Timer_fnptr ) & DaemonCore :: Register_Timer , ( DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr ) & DaemonCore :: Register_Timer , & DaemonCore :: Cancel_Timer , & DaemonCore :: TooManyRegisteredSockets , & DaemonCore :: incrementPendingSockets , & DaemonCore :: decrementPendingSockets , & DaemonCore :: publicNetworkIpAddr , & DaemonCore :: Register_Command , & DaemonCore :: daemonContactInfoChanged , & DaemonCore :: Register_Timer_TS )"	264:1:7661:8572	3036450	3	True				
ANR	3036497	CallExpression	"daemonCoreSockAdapter . EnableDaemonCore ( this , ( DaemonCoreSockAdapterClass :: Register_Socket_fnptr ) & DaemonCore :: Register_Socket , & DaemonCore :: Cancel_Socket , & DaemonCore :: CallSocketHandler , & DaemonCore :: CallCommandHandler , & DaemonCore :: HandleReqAsync , & DaemonCore :: Register_DataPtr , & DaemonCore :: GetDataPtr , ( DaemonCoreSockAdapterClass :: Register_Timer_fnptr ) & DaemonCore :: Register_Timer , ( DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr ) & DaemonCore :: Register_Timer , & DaemonCore :: Cancel_Timer , & DaemonCore :: TooManyRegisteredSockets , & DaemonCore :: incrementPendingSockets , & DaemonCore :: decrementPendingSockets , & DaemonCore :: publicNetworkIpAddr , & DaemonCore :: Register_Command , & DaemonCore :: daemonContactInfoChanged , & DaemonCore :: Register_Timer_TS )"		3036450	0					
ANR	3036498	Callee	daemonCoreSockAdapter . EnableDaemonCore		3036450	0					
ANR	3036499	MemberAccess	daemonCoreSockAdapter . EnableDaemonCore		3036450	0					
ANR	3036500	Identifier	daemonCoreSockAdapter		3036450	0					
ANR	3036501	Identifier	EnableDaemonCore		3036450	1					
ANR	3036502	ArgumentList	this		3036450	1					
ANR	3036503	Argument	this		3036450	0					
ANR	3036504	Identifier	this		3036450	0					
ANR	3036505	Argument	( DaemonCoreSockAdapterClass :: Register_Socket_fnptr ) & DaemonCore :: Register_Socket		3036450	1					
ANR	3036506	CastExpression	( DaemonCoreSockAdapterClass :: Register_Socket_fnptr ) & DaemonCore :: Register_Socket		3036450	0					
ANR	3036507	CastTarget	DaemonCoreSockAdapterClass :: Register_Socket_fnptr		3036450	0					
ANR	3036508	UnaryOperationExpression	& DaemonCore :: Register_Socket		3036450	1					
ANR	3036509	UnaryOperator	&		3036450	0					
ANR	3036510	Identifier	DaemonCore :: Register_Socket		3036450	1					
ANR	3036511	Argument	& DaemonCore :: Cancel_Socket		3036450	2					
ANR	3036512	UnaryOperationExpression	& DaemonCore :: Cancel_Socket		3036450	0					
ANR	3036513	UnaryOperator	&		3036450	0					
ANR	3036514	Identifier	DaemonCore :: Cancel_Socket		3036450	1					
ANR	3036515	Argument	& DaemonCore :: CallSocketHandler		3036450	3					
ANR	3036516	UnaryOperationExpression	& DaemonCore :: CallSocketHandler		3036450	0					
ANR	3036517	UnaryOperator	&		3036450	0					
ANR	3036518	Identifier	DaemonCore :: CallSocketHandler		3036450	1					
ANR	3036519	Argument	& DaemonCore :: CallCommandHandler		3036450	4					
ANR	3036520	UnaryOperationExpression	& DaemonCore :: CallCommandHandler		3036450	0					
ANR	3036521	UnaryOperator	&		3036450	0					
ANR	3036522	Identifier	DaemonCore :: CallCommandHandler		3036450	1					
ANR	3036523	Argument	& DaemonCore :: HandleReqAsync		3036450	5					
ANR	3036524	UnaryOperationExpression	& DaemonCore :: HandleReqAsync		3036450	0					
ANR	3036525	UnaryOperator	&		3036450	0					
ANR	3036526	Identifier	DaemonCore :: HandleReqAsync		3036450	1					
ANR	3036527	Argument	& DaemonCore :: Register_DataPtr		3036450	6					
ANR	3036528	UnaryOperationExpression	& DaemonCore :: Register_DataPtr		3036450	0					
ANR	3036529	UnaryOperator	&		3036450	0					
ANR	3036530	Identifier	DaemonCore :: Register_DataPtr		3036450	1					
ANR	3036531	Argument	& DaemonCore :: GetDataPtr		3036450	7					
ANR	3036532	UnaryOperationExpression	& DaemonCore :: GetDataPtr		3036450	0					
ANR	3036533	UnaryOperator	&		3036450	0					
ANR	3036534	Identifier	DaemonCore :: GetDataPtr		3036450	1					
ANR	3036535	Argument	( DaemonCoreSockAdapterClass :: Register_Timer_fnptr ) & DaemonCore :: Register_Timer		3036450	8					
ANR	3036536	CastExpression	( DaemonCoreSockAdapterClass :: Register_Timer_fnptr ) & DaemonCore :: Register_Timer		3036450	0					
ANR	3036537	CastTarget	DaemonCoreSockAdapterClass :: Register_Timer_fnptr		3036450	0					
ANR	3036538	UnaryOperationExpression	& DaemonCore :: Register_Timer		3036450	1					
ANR	3036539	UnaryOperator	&		3036450	0					
ANR	3036540	Identifier	DaemonCore :: Register_Timer		3036450	1					
ANR	3036541	Argument	( DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr ) & DaemonCore :: Register_Timer		3036450	9					
ANR	3036542	CastExpression	( DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr ) & DaemonCore :: Register_Timer		3036450	0					
ANR	3036543	CastTarget	DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr		3036450	0					
ANR	3036544	UnaryOperationExpression	& DaemonCore :: Register_Timer		3036450	1					
ANR	3036545	UnaryOperator	&		3036450	0					
ANR	3036546	Identifier	DaemonCore :: Register_Timer		3036450	1					
ANR	3036547	Argument	& DaemonCore :: Cancel_Timer		3036450	10					
ANR	3036548	UnaryOperationExpression	& DaemonCore :: Cancel_Timer		3036450	0					
ANR	3036549	UnaryOperator	&		3036450	0					
ANR	3036550	Identifier	DaemonCore :: Cancel_Timer		3036450	1					
ANR	3036551	Argument	& DaemonCore :: TooManyRegisteredSockets		3036450	11					
ANR	3036552	UnaryOperationExpression	& DaemonCore :: TooManyRegisteredSockets		3036450	0					
ANR	3036553	UnaryOperator	&		3036450	0					
ANR	3036554	Identifier	DaemonCore :: TooManyRegisteredSockets		3036450	1					
ANR	3036555	Argument	& DaemonCore :: incrementPendingSockets		3036450	12					
ANR	3036556	UnaryOperationExpression	& DaemonCore :: incrementPendingSockets		3036450	0					
ANR	3036557	UnaryOperator	&		3036450	0					
ANR	3036558	Identifier	DaemonCore :: incrementPendingSockets		3036450	1					
ANR	3036559	Argument	& DaemonCore :: decrementPendingSockets		3036450	13					
ANR	3036560	UnaryOperationExpression	& DaemonCore :: decrementPendingSockets		3036450	0					
ANR	3036561	UnaryOperator	&		3036450	0					
ANR	3036562	Identifier	DaemonCore :: decrementPendingSockets		3036450	1					
ANR	3036563	Argument	& DaemonCore :: publicNetworkIpAddr		3036450	14					
ANR	3036564	UnaryOperationExpression	& DaemonCore :: publicNetworkIpAddr		3036450	0					
ANR	3036565	UnaryOperator	&		3036450	0					
ANR	3036566	Identifier	DaemonCore :: publicNetworkIpAddr		3036450	1					
ANR	3036567	Argument	& DaemonCore :: Register_Command		3036450	15					
ANR	3036568	UnaryOperationExpression	& DaemonCore :: Register_Command		3036450	0					
ANR	3036569	UnaryOperator	&		3036450	0					
ANR	3036570	Identifier	DaemonCore :: Register_Command		3036450	1					
ANR	3036571	Argument	& DaemonCore :: daemonContactInfoChanged		3036450	16					
ANR	3036572	UnaryOperationExpression	& DaemonCore :: daemonContactInfoChanged		3036450	0					
ANR	3036573	UnaryOperator	&		3036450	0					
ANR	3036574	Identifier	DaemonCore :: daemonContactInfoChanged		3036450	1					
ANR	3036575	Argument	& DaemonCore :: Register_Timer_TS		3036450	17					
ANR	3036576	UnaryOperationExpression	& DaemonCore :: Register_Timer_TS		3036450	0					
ANR	3036577	UnaryOperator	&		3036450	0					
ANR	3036578	Identifier	DaemonCore :: Register_Timer_TS		3036450	1					
ANR	3036579	IfStatement	if ( PidSize == 0 )		3036450	4					
ANR	3036580	Condition	PidSize == 0	286:6:8581:8592	3036450	0	True				
ANR	3036581	EqualityExpression	PidSize == 0		3036450	0		==			
ANR	3036582	Identifier	PidSize		3036450	0					
ANR	3036583	PrimaryExpression	0		3036450	1					
ANR	3036584	ExpressionStatement	PidSize = DEFAULT_PIDBUCKETS	287:2:8598:8626	3036450	1	True				
ANR	3036585	AssignmentExpression	PidSize = DEFAULT_PIDBUCKETS		3036450	0		=			
ANR	3036586	Identifier	PidSize		3036450	0					
ANR	3036587	Identifier	DEFAULT_PIDBUCKETS		3036450	1					
ANR	3036588	ExpressionStatement	"pidTable = new PidHashTable ( PidSize , compute_pid_hash )"	288:1:8629:8683	3036450	5	True				
ANR	3036589	AssignmentExpression	"pidTable = new PidHashTable ( PidSize , compute_pid_hash )"		3036450	0		=			
ANR	3036590	Identifier	pidTable		3036450	0					
ANR	3036591	Expression	"PidSize , compute_pid_hash"		3036450	1					
ANR	3036592	Identifier	PidSize		3036450	0					
ANR	3036593	Identifier	compute_pid_hash		3036450	1					
ANR	3036594	ExpressionStatement	ppid = 0	289:1:8686:8694	3036450	6	True				
ANR	3036595	AssignmentExpression	ppid = 0		3036450	0		=			
ANR	3036596	Identifier	ppid		3036450	0					
ANR	3036597	PrimaryExpression	0		3036450	1					
ANR	3036598	ExpressionStatement	InitializeCriticalSection ( & Big_fat_mutex )	292:1:8729:8770	3036450	7	True				
ANR	3036599	CallExpression	InitializeCriticalSection ( & Big_fat_mutex )		3036450	0					
ANR	3036600	Callee	InitializeCriticalSection		3036450	0					
ANR	3036601	Identifier	InitializeCriticalSection		3036450	0					
ANR	3036602	ArgumentList	& Big_fat_mutex		3036450	1					
ANR	3036603	Argument	& Big_fat_mutex		3036450	0					
ANR	3036604	UnaryOperationExpression	& Big_fat_mutex		3036450	0					
ANR	3036605	UnaryOperator	&		3036450	0					
ANR	3036606	Identifier	Big_fat_mutex		3036450	1					
ANR	3036607	ExpressionStatement	EnterCriticalSection ( & Big_fat_mutex )	293:1:8773:8809	3036450	8	True				
ANR	3036608	CallExpression	EnterCriticalSection ( & Big_fat_mutex )		3036450	0					
ANR	3036609	Callee	EnterCriticalSection		3036450	0					
ANR	3036610	Identifier	EnterCriticalSection		3036450	0					
ANR	3036611	ArgumentList	& Big_fat_mutex		3036450	1					
ANR	3036612	Argument	& Big_fat_mutex		3036450	0					
ANR	3036613	UnaryOperationExpression	& Big_fat_mutex		3036450	0					
ANR	3036614	UnaryOperator	&		3036450	0					
ANR	3036615	Identifier	Big_fat_mutex		3036450	1					
ANR	3036616	Statement	mypid	295:1:8813:8817	3036450	9	True				
ANR	3036617	Statement	=	295:7:8819:8819	3036450	10	True				
ANR	3036618	Statement	::	295:9:8821:8822	3036450	11	True				
ANR	3036619	ExpressionStatement	GetCurrentProcessId ( )	295:11:8823:8844	3036450	12	True				
ANR	3036620	CallExpression	GetCurrentProcessId ( )		3036450	0					
ANR	3036621	Callee	GetCurrentProcessId		3036450	0					
ANR	3036622	Identifier	GetCurrentProcessId		3036450	0					
ANR	3036623	ArgumentList			3036450	1					
ANR	3036624	ExpressionStatement	m_proc_family = NULL	304:1:9067:9087	3036450	13	True				
ANR	3036625	AssignmentExpression	m_proc_family = NULL		3036450	0		=			
ANR	3036626	Identifier	m_proc_family		3036450	0					
ANR	3036627	Identifier	NULL		3036450	1					
ANR	3036628	ExpressionStatement	maxCommand = ComSize	306:1:9091:9111	3036450	14	True				
ANR	3036629	AssignmentExpression	maxCommand = ComSize		3036450	0		=			
ANR	3036630	Identifier	maxCommand		3036450	0					
ANR	3036631	Identifier	ComSize		3036450	1					
ANR	3036632	ExpressionStatement	maxSig = SigSize	307:1:9114:9130	3036450	15	True				
ANR	3036633	AssignmentExpression	maxSig = SigSize		3036450	0		=			
ANR	3036634	Identifier	maxSig		3036450	0					
ANR	3036635	Identifier	SigSize		3036450	1					
ANR	3036636	ExpressionStatement	maxSocket = SocSize	308:1:9133:9152	3036450	16	True				
ANR	3036637	AssignmentExpression	maxSocket = SocSize		3036450	0		=			
ANR	3036638	Identifier	maxSocket		3036450	0					
ANR	3036639	Identifier	SocSize		3036450	1					
ANR	3036640	ExpressionStatement	maxReap = ReapSize	309:1:9155:9173	3036450	17	True				
ANR	3036641	AssignmentExpression	maxReap = ReapSize		3036450	0		=			
ANR	3036642	Identifier	maxReap		3036450	0					
ANR	3036643	Identifier	ReapSize		3036450	1					
ANR	3036644	ExpressionStatement	maxPipe = PipeSize	310:1:9176:9194	3036450	18	True				
ANR	3036645	AssignmentExpression	maxPipe = PipeSize		3036450	0		=			
ANR	3036646	Identifier	maxPipe		3036450	0					
ANR	3036647	Identifier	PipeSize		3036450	1					
ANR	3036648	IfStatement	if ( maxCommand == 0 )		3036450	19					
ANR	3036649	Condition	maxCommand == 0	312:4:9201:9215	3036450	0	True				
ANR	3036650	EqualityExpression	maxCommand == 0		3036450	0		==			
ANR	3036651	Identifier	maxCommand		3036450	0					
ANR	3036652	PrimaryExpression	0		3036450	1					
ANR	3036653	ExpressionStatement	maxCommand = DEFAULT_MAXCOMMANDS	313:2:9220:9252	3036450	1	True				
ANR	3036654	AssignmentExpression	maxCommand = DEFAULT_MAXCOMMANDS		3036450	0		=			
ANR	3036655	Identifier	maxCommand		3036450	0					
ANR	3036656	Identifier	DEFAULT_MAXCOMMANDS		3036450	1					
ANR	3036657	ExpressionStatement	comTable = new CommandEnt [ maxCommand ]	315:1:9256:9293	3036450	20	True				
ANR	3036658	AssignmentExpression	comTable = new CommandEnt [ maxCommand ]		3036450	0		=			
ANR	3036659	Identifier	comTable		3036450	0					
ANR	3036660	Identifier	maxCommand		3036450	1					
ANR	3036661	IfStatement	if ( comTable == NULL )		3036450	21					
ANR	3036662	Condition	comTable == NULL	316:4:9299:9314	3036450	0	True				
ANR	3036663	EqualityExpression	comTable == NULL		3036450	0		==			
ANR	3036664	Identifier	comTable		3036450	0					
ANR	3036665	Identifier	NULL		3036450	1					
ANR	3036666	CompoundStatement		67:22:2083:2083	3036450	1					
ANR	3036667	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	317:2:9321:9345	3036450	0	True				
ANR	3036668	CallExpression	"EXCEPT ( ""Out of memory!"" )"		3036450	0					
ANR	3036669	Callee	EXCEPT		3036450	0					
ANR	3036670	Identifier	EXCEPT		3036450	0					
ANR	3036671	ArgumentList	"""Out of memory!"""		3036450	1					
ANR	3036672	Argument	"""Out of memory!"""		3036450	0					
ANR	3036673	PrimaryExpression	"""Out of memory!"""		3036450	0					
ANR	3036674	ExpressionStatement	nCommand = 0	319:1:9351:9363	3036450	22	True				
ANR	3036675	AssignmentExpression	nCommand = 0		3036450	0		=			
ANR	3036676	Identifier	nCommand		3036450	0					
ANR	3036677	PrimaryExpression	0		3036450	1					
ANR	3036678	ExpressionStatement	"memset ( comTable , '\\0' , maxCommand * sizeof ( CommandEnt ) )"	320:1:9366:9417	3036450	23	True				
ANR	3036679	CallExpression	"memset ( comTable , '\\0' , maxCommand * sizeof ( CommandEnt ) )"		3036450	0					
ANR	3036680	Callee	memset		3036450	0					
ANR	3036681	Identifier	memset		3036450	0					
ANR	3036682	ArgumentList	comTable		3036450	1					
ANR	3036683	Argument	comTable		3036450	0					
ANR	3036684	Identifier	comTable		3036450	0					
ANR	3036685	Argument	'\\0'		3036450	1					
ANR	3036686	PrimaryExpression	'\\0'		3036450	0					
ANR	3036687	Argument	maxCommand * sizeof ( CommandEnt )		3036450	2					
ANR	3036688	MultiplicativeExpression	maxCommand * sizeof ( CommandEnt )		3036450	0		*			
ANR	3036689	Identifier	maxCommand		3036450	0					
ANR	3036690	SizeofExpression	sizeof ( CommandEnt )		3036450	1					
ANR	3036691	Sizeof	sizeof		3036450	0					
ANR	3036692	SizeofOperand	CommandEnt		3036450	1					
ANR	3036693	IfStatement	if ( maxSig == 0 )		3036450	24					
ANR	3036694	Condition	maxSig == 0	322:4:9424:9434	3036450	0	True				
ANR	3036695	EqualityExpression	maxSig == 0		3036450	0		==			
ANR	3036696	Identifier	maxSig		3036450	0					
ANR	3036697	PrimaryExpression	0		3036450	1					
ANR	3036698	ExpressionStatement	maxSig = DEFAULT_MAXSIGNALS	323:2:9439:9466	3036450	1	True				
ANR	3036699	AssignmentExpression	maxSig = DEFAULT_MAXSIGNALS		3036450	0		=			
ANR	3036700	Identifier	maxSig		3036450	0					
ANR	3036701	Identifier	DEFAULT_MAXSIGNALS		3036450	1					
ANR	3036702	ExpressionStatement	sigTable = new SignalEnt [ maxSig ]	325:1:9470:9502	3036450	25	True				
ANR	3036703	AssignmentExpression	sigTable = new SignalEnt [ maxSig ]		3036450	0		=			
ANR	3036704	Identifier	sigTable		3036450	0					
ANR	3036705	Identifier	maxSig		3036450	1					
ANR	3036706	IfStatement	if ( sigTable == NULL )		3036450	26					
ANR	3036707	Condition	sigTable == NULL	326:4:9508:9523	3036450	0	True				
ANR	3036708	EqualityExpression	sigTable == NULL		3036450	0		==			
ANR	3036709	Identifier	sigTable		3036450	0					
ANR	3036710	Identifier	NULL		3036450	1					
ANR	3036711	CompoundStatement		78:1:2293:2293	3036450	1					
ANR	3036712	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	328:2:9531:9555	3036450	0	True				
ANR	3036713	CallExpression	"EXCEPT ( ""Out of memory!"" )"		3036450	0					
ANR	3036714	Callee	EXCEPT		3036450	0					
ANR	3036715	Identifier	EXCEPT		3036450	0					
ANR	3036716	ArgumentList	"""Out of memory!"""		3036450	1					
ANR	3036717	Argument	"""Out of memory!"""		3036450	0					
ANR	3036718	PrimaryExpression	"""Out of memory!"""		3036450	0					
ANR	3036719	ExpressionStatement	nSig = 0	330:1:9561:9569	3036450	27	True				
ANR	3036720	AssignmentExpression	nSig = 0		3036450	0		=			
ANR	3036721	Identifier	nSig		3036450	0					
ANR	3036722	PrimaryExpression	0		3036450	1					
ANR	3036723	ExpressionStatement	"memset ( sigTable , '\\0' , maxSig * sizeof ( SignalEnt ) )"	331:1:9572:9618	3036450	28	True				
ANR	3036724	CallExpression	"memset ( sigTable , '\\0' , maxSig * sizeof ( SignalEnt ) )"		3036450	0					
ANR	3036725	Callee	memset		3036450	0					
ANR	3036726	Identifier	memset		3036450	0					
ANR	3036727	ArgumentList	sigTable		3036450	1					
ANR	3036728	Argument	sigTable		3036450	0					
ANR	3036729	Identifier	sigTable		3036450	0					
ANR	3036730	Argument	'\\0'		3036450	1					
ANR	3036731	PrimaryExpression	'\\0'		3036450	0					
ANR	3036732	Argument	maxSig * sizeof ( SignalEnt )		3036450	2					
ANR	3036733	MultiplicativeExpression	maxSig * sizeof ( SignalEnt )		3036450	0		*			
ANR	3036734	Identifier	maxSig		3036450	0					
ANR	3036735	SizeofExpression	sizeof ( SignalEnt )		3036450	1					
ANR	3036736	Sizeof	sizeof		3036450	0					
ANR	3036737	SizeofOperand	SignalEnt		3036450	1					
ANR	3036738	IfStatement	if ( maxSocket == 0 )		3036450	29					
ANR	3036739	Condition	maxSocket == 0	333:4:9625:9638	3036450	0	True				
ANR	3036740	EqualityExpression	maxSocket == 0		3036450	0		==			
ANR	3036741	Identifier	maxSocket		3036450	0					
ANR	3036742	PrimaryExpression	0		3036450	1					
ANR	3036743	ExpressionStatement	maxSocket = DEFAULT_MAXSOCKETS	334:2:9643:9673	3036450	1	True				
ANR	3036744	AssignmentExpression	maxSocket = DEFAULT_MAXSOCKETS		3036450	0		=			
ANR	3036745	Identifier	maxSocket		3036450	0					
ANR	3036746	Identifier	DEFAULT_MAXSOCKETS		3036450	1					
ANR	3036747	ExpressionStatement	sec_man = new SecMan ( )	336:1:9677:9699	3036450	30	True				
ANR	3036748	AssignmentExpression	sec_man = new SecMan ( )		3036450	0		=			
ANR	3036749	Identifier	sec_man		3036450	0					
ANR	3036750	UnaryExpression	new SecMan ( )		3036450	1					
ANR	3036751	ExpressionStatement	sockTable = new ExtArray < SockEnt > ( maxSocket )	338:1:9703:9747	3036450	31	True				
ANR	3036752	AssignmentExpression	sockTable = new ExtArray < SockEnt > ( maxSocket )		3036450	0		=			
ANR	3036753	Identifier	sockTable		3036450	0					
ANR	3036754	Identifier	maxSocket		3036450	1					
ANR	3036755	IfStatement	if ( sockTable == NULL )		3036450	32					
ANR	3036756	Condition	sockTable == NULL	339:4:9753:9769	3036450	0	True				
ANR	3036757	EqualityExpression	sockTable == NULL		3036450	0		==			
ANR	3036758	Identifier	sockTable		3036450	0					
ANR	3036759	Identifier	NULL		3036450	1					
ANR	3036760	CompoundStatement		91:1:2539:2539	3036450	1					
ANR	3036761	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	341:2:9777:9801	3036450	0	True				
ANR	3036762	CallExpression	"EXCEPT ( ""Out of memory!"" )"		3036450	0					
ANR	3036763	Callee	EXCEPT		3036450	0					
ANR	3036764	Identifier	EXCEPT		3036450	0					
ANR	3036765	ArgumentList	"""Out of memory!"""		3036450	1					
ANR	3036766	Argument	"""Out of memory!"""		3036450	0					
ANR	3036767	PrimaryExpression	"""Out of memory!"""		3036450	0					
ANR	3036768	ExpressionStatement	nSock = 0	343:1:9807:9816	3036450	33	True				
ANR	3036769	AssignmentExpression	nSock = 0		3036450	0		=			
ANR	3036770	Identifier	nSock		3036450	0					
ANR	3036771	PrimaryExpression	0		3036450	1					
ANR	3036772	ExpressionStatement	nPendingSockets = 0	344:1:9819:9838	3036450	34	True				
ANR	3036773	AssignmentExpression	nPendingSockets = 0		3036450	0		=			
ANR	3036774	Identifier	nPendingSockets		3036450	0					
ANR	3036775	PrimaryExpression	0		3036450	1					
ANR	3036776	IdentifierDeclStatement	SockEnt blankSockEnt ;	345:1:9841:9861	3036450	35	True				
ANR	3036777	IdentifierDecl	blankSockEnt		3036450	0					
ANR	3036778	IdentifierDeclType	SockEnt		3036450	0					
ANR	3036779	Identifier	blankSockEnt		3036450	1					
ANR	3036780	ExpressionStatement	"memset ( & blankSockEnt , '\\0' , sizeof ( SockEnt ) )"	346:1:9864:9906	3036450	36	True				
ANR	3036781	CallExpression	"memset ( & blankSockEnt , '\\0' , sizeof ( SockEnt ) )"		3036450	0					
ANR	3036782	Callee	memset		3036450	0					
ANR	3036783	Identifier	memset		3036450	0					
ANR	3036784	ArgumentList	& blankSockEnt		3036450	1					
ANR	3036785	Argument	& blankSockEnt		3036450	0					
ANR	3036786	UnaryOperationExpression	& blankSockEnt		3036450	0					
ANR	3036787	UnaryOperator	&		3036450	0					
ANR	3036788	Identifier	blankSockEnt		3036450	1					
ANR	3036789	Argument	'\\0'		3036450	1					
ANR	3036790	PrimaryExpression	'\\0'		3036450	0					
ANR	3036791	Argument	sizeof ( SockEnt )		3036450	2					
ANR	3036792	SizeofExpression	sizeof ( SockEnt )		3036450	0					
ANR	3036793	Sizeof	sizeof		3036450	0					
ANR	3036794	SizeofOperand	SockEnt		3036450	1					
ANR	3036795	ExpressionStatement	sockTable -> fill ( blankSockEnt )	347:1:9909:9938	3036450	37	True				
ANR	3036796	CallExpression	sockTable -> fill ( blankSockEnt )		3036450	0					
ANR	3036797	Callee	sockTable -> fill		3036450	0					
ANR	3036798	PtrMemberAccess	sockTable -> fill		3036450	0					
ANR	3036799	Identifier	sockTable		3036450	0					
ANR	3036800	Identifier	fill		3036450	1					
ANR	3036801	ArgumentList	blankSockEnt		3036450	1					
ANR	3036802	Argument	blankSockEnt		3036450	0					
ANR	3036803	Identifier	blankSockEnt		3036450	0					
ANR	3036804	ExpressionStatement	initial_command_sock = - 1	349:1:9942:9967	3036450	38	True				
ANR	3036805	AssignmentExpression	initial_command_sock = - 1		3036450	0		=			
ANR	3036806	Identifier	initial_command_sock		3036450	0					
ANR	3036807	UnaryOperationExpression	- 1		3036450	1					
ANR	3036808	UnaryOperator	-		3036450	0					
ANR	3036809	PrimaryExpression	1		3036450	1					
ANR	3036810	ExpressionStatement	soap_ssl_sock = - 1	351:1:9992:10010	3036450	39	True				
ANR	3036811	AssignmentExpression	soap_ssl_sock = - 1		3036450	0		=			
ANR	3036812	Identifier	soap_ssl_sock		3036450	0					
ANR	3036813	UnaryOperationExpression	- 1		3036450	1					
ANR	3036814	UnaryOperator	-		3036450	0					
ANR	3036815	PrimaryExpression	1		3036450	1					
ANR	3036816	ExpressionStatement	m_dirty_sinful = true	354:1:10021:10042	3036450	40	True				
ANR	3036817	AssignmentExpression	m_dirty_sinful = true		3036450	0		=			
ANR	3036818	Identifier	m_dirty_sinful		3036450	0					
ANR	3036819	Identifier	true		3036450	1					
ANR	3036820	IfStatement	if ( maxPipe == 0 )		3036450	41					
ANR	3036821	Condition	maxPipe == 0	356:4:10049:10060	3036450	0	True				
ANR	3036822	EqualityExpression	maxPipe == 0		3036450	0		==			
ANR	3036823	Identifier	maxPipe		3036450	0					
ANR	3036824	PrimaryExpression	0		3036450	1					
ANR	3036825	ExpressionStatement	maxPipe = DEFAULT_MAXPIPES	357:2:10065:10091	3036450	1	True				
ANR	3036826	AssignmentExpression	maxPipe = DEFAULT_MAXPIPES		3036450	0		=			
ANR	3036827	Identifier	maxPipe		3036450	0					
ANR	3036828	Identifier	DEFAULT_MAXPIPES		3036450	1					
ANR	3036829	ExpressionStatement	pipeTable = new ExtArray < PipeEnt > ( maxPipe )	359:1:10095:10137	3036450	42	True				
ANR	3036830	AssignmentExpression	pipeTable = new ExtArray < PipeEnt > ( maxPipe )		3036450	0		=			
ANR	3036831	Identifier	pipeTable		3036450	0					
ANR	3036832	Identifier	maxPipe		3036450	1					
ANR	3036833	IfStatement	if ( pipeTable == NULL )		3036450	43					
ANR	3036834	Condition	pipeTable == NULL	360:4:10143:10159	3036450	0	True				
ANR	3036835	EqualityExpression	pipeTable == NULL		3036450	0		==			
ANR	3036836	Identifier	pipeTable		3036450	0					
ANR	3036837	Identifier	NULL		3036450	1					
ANR	3036838	CompoundStatement		112:1:2929:2929	3036450	1					
ANR	3036839	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	362:2:10167:10191	3036450	0	True				
ANR	3036840	CallExpression	"EXCEPT ( ""Out of memory!"" )"		3036450	0					
ANR	3036841	Callee	EXCEPT		3036450	0					
ANR	3036842	Identifier	EXCEPT		3036450	0					
ANR	3036843	ArgumentList	"""Out of memory!"""		3036450	1					
ANR	3036844	Argument	"""Out of memory!"""		3036450	0					
ANR	3036845	PrimaryExpression	"""Out of memory!"""		3036450	0					
ANR	3036846	ExpressionStatement	nPipe = 0	364:1:10197:10206	3036450	44	True				
ANR	3036847	AssignmentExpression	nPipe = 0		3036450	0		=			
ANR	3036848	Identifier	nPipe		3036450	0					
ANR	3036849	PrimaryExpression	0		3036450	1					
ANR	3036850	IdentifierDeclStatement	PipeEnt blankPipeEnt ;	365:1:10209:10229	3036450	45	True				
ANR	3036851	IdentifierDecl	blankPipeEnt		3036450	0					
ANR	3036852	IdentifierDeclType	PipeEnt		3036450	0					
ANR	3036853	Identifier	blankPipeEnt		3036450	1					
ANR	3036854	ExpressionStatement	"memset ( & blankPipeEnt , '\\0' , sizeof ( PipeEnt ) )"	366:1:10232:10274	3036450	46	True				
ANR	3036855	CallExpression	"memset ( & blankPipeEnt , '\\0' , sizeof ( PipeEnt ) )"		3036450	0					
ANR	3036856	Callee	memset		3036450	0					
ANR	3036857	Identifier	memset		3036450	0					
ANR	3036858	ArgumentList	& blankPipeEnt		3036450	1					
ANR	3036859	Argument	& blankPipeEnt		3036450	0					
ANR	3036860	UnaryOperationExpression	& blankPipeEnt		3036450	0					
ANR	3036861	UnaryOperator	&		3036450	0					
ANR	3036862	Identifier	blankPipeEnt		3036450	1					
ANR	3036863	Argument	'\\0'		3036450	1					
ANR	3036864	PrimaryExpression	'\\0'		3036450	0					
ANR	3036865	Argument	sizeof ( PipeEnt )		3036450	2					
ANR	3036866	SizeofExpression	sizeof ( PipeEnt )		3036450	0					
ANR	3036867	Sizeof	sizeof		3036450	0					
ANR	3036868	SizeofOperand	PipeEnt		3036450	1					
ANR	3036869	ExpressionStatement	blankPipeEnt . index = - 1	367:1:10277:10300	3036450	47	True				
ANR	3036870	AssignmentExpression	blankPipeEnt . index = - 1		3036450	0		=			
ANR	3036871	MemberAccess	blankPipeEnt . index		3036450	0					
ANR	3036872	Identifier	blankPipeEnt		3036450	0					
ANR	3036873	Identifier	index		3036450	1					
ANR	3036874	UnaryOperationExpression	- 1		3036450	1					
ANR	3036875	UnaryOperator	-		3036450	0					
ANR	3036876	PrimaryExpression	1		3036450	1					
ANR	3036877	ExpressionStatement	pipeTable -> fill ( blankPipeEnt )	368:1:10303:10332	3036450	48	True				
ANR	3036878	CallExpression	pipeTable -> fill ( blankPipeEnt )		3036450	0					
ANR	3036879	Callee	pipeTable -> fill		3036450	0					
ANR	3036880	PtrMemberAccess	pipeTable -> fill		3036450	0					
ANR	3036881	Identifier	pipeTable		3036450	0					
ANR	3036882	Identifier	fill		3036450	1					
ANR	3036883	ArgumentList	blankPipeEnt		3036450	1					
ANR	3036884	Argument	blankPipeEnt		3036450	0					
ANR	3036885	Identifier	blankPipeEnt		3036450	0					
ANR	3036886	ExpressionStatement	pipeHandleTable = new ExtArray < PipeHandle > ( maxPipe )	370:1:10336:10387	3036450	49	True				
ANR	3036887	AssignmentExpression	pipeHandleTable = new ExtArray < PipeHandle > ( maxPipe )		3036450	0		=			
ANR	3036888	Identifier	pipeHandleTable		3036450	0					
ANR	3036889	Identifier	maxPipe		3036450	1					
ANR	3036890	ExpressionStatement	maxPipeHandleIndex = - 1	371:1:10390:10413	3036450	50	True				
ANR	3036891	AssignmentExpression	maxPipeHandleIndex = - 1		3036450	0		=			
ANR	3036892	Identifier	maxPipeHandleIndex		3036450	0					
ANR	3036893	UnaryOperationExpression	- 1		3036450	1					
ANR	3036894	UnaryOperator	-		3036450	0					
ANR	3036895	PrimaryExpression	1		3036450	1					
ANR	3036896	ExpressionStatement	maxPipeBuffer = 10240	372:1:10416:10437	3036450	51	True				
ANR	3036897	AssignmentExpression	maxPipeBuffer = 10240		3036450	0		=			
ANR	3036898	Identifier	maxPipeBuffer		3036450	0					
ANR	3036899	PrimaryExpression	10240		3036450	1					
ANR	3036900	IfStatement	if ( maxReap == 0 )		3036450	52					
ANR	3036901	Condition	maxReap == 0	374:4:10444:10455	3036450	0	True				
ANR	3036902	EqualityExpression	maxReap == 0		3036450	0		==			
ANR	3036903	Identifier	maxReap		3036450	0					
ANR	3036904	PrimaryExpression	0		3036450	1					
ANR	3036905	ExpressionStatement	maxReap = DEFAULT_MAXREAPS	375:2:10460:10486	3036450	1	True				
ANR	3036906	AssignmentExpression	maxReap = DEFAULT_MAXREAPS		3036450	0		=			
ANR	3036907	Identifier	maxReap		3036450	0					
ANR	3036908	Identifier	DEFAULT_MAXREAPS		3036450	1					
ANR	3036909	ExpressionStatement	reapTable = new ReapEnt [ maxReap ]	377:1:10490:10522	3036450	53	True				
ANR	3036910	AssignmentExpression	reapTable = new ReapEnt [ maxReap ]		3036450	0		=			
ANR	3036911	Identifier	reapTable		3036450	0					
ANR	3036912	Identifier	maxReap		3036450	1					
ANR	3036913	IfStatement	if ( reapTable == NULL )		3036450	54					
ANR	3036914	Condition	reapTable == NULL	378:4:10528:10544	3036450	0	True				
ANR	3036915	EqualityExpression	reapTable == NULL		3036450	0		==			
ANR	3036916	Identifier	reapTable		3036450	0					
ANR	3036917	Identifier	NULL		3036450	1					
ANR	3036918	CompoundStatement		130:1:3314:3314	3036450	1					
ANR	3036919	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	380:2:10552:10576	3036450	0	True				
ANR	3036920	CallExpression	"EXCEPT ( ""Out of memory!"" )"		3036450	0					
ANR	3036921	Callee	EXCEPT		3036450	0					
ANR	3036922	Identifier	EXCEPT		3036450	0					
ANR	3036923	ArgumentList	"""Out of memory!"""		3036450	1					
ANR	3036924	Argument	"""Out of memory!"""		3036450	0					
ANR	3036925	PrimaryExpression	"""Out of memory!"""		3036450	0					
ANR	3036926	ExpressionStatement	nReap = 0	382:1:10582:10591	3036450	55	True				
ANR	3036927	AssignmentExpression	nReap = 0		3036450	0		=			
ANR	3036928	Identifier	nReap		3036450	0					
ANR	3036929	PrimaryExpression	0		3036450	1					
ANR	3036930	ExpressionStatement	"memset ( reapTable , '\\0' , maxReap * sizeof ( ReapEnt ) )"	383:1:10594:10640	3036450	56	True				
ANR	3036931	CallExpression	"memset ( reapTable , '\\0' , maxReap * sizeof ( ReapEnt ) )"		3036450	0					
ANR	3036932	Callee	memset		3036450	0					
ANR	3036933	Identifier	memset		3036450	0					
ANR	3036934	ArgumentList	reapTable		3036450	1					
ANR	3036935	Argument	reapTable		3036450	0					
ANR	3036936	Identifier	reapTable		3036450	0					
ANR	3036937	Argument	'\\0'		3036450	1					
ANR	3036938	PrimaryExpression	'\\0'		3036450	0					
ANR	3036939	Argument	maxReap * sizeof ( ReapEnt )		3036450	2					
ANR	3036940	MultiplicativeExpression	maxReap * sizeof ( ReapEnt )		3036450	0		*			
ANR	3036941	Identifier	maxReap		3036450	0					
ANR	3036942	SizeofExpression	sizeof ( ReapEnt )		3036450	1					
ANR	3036943	Sizeof	sizeof		3036450	0					
ANR	3036944	SizeofOperand	ReapEnt		3036450	1					
ANR	3036945	ExpressionStatement	defaultReaper = - 1	384:1:10643:10659	3036450	57	True				
ANR	3036946	AssignmentExpression	defaultReaper = - 1		3036450	0		=			
ANR	3036947	Identifier	defaultReaper		3036450	0					
ANR	3036948	UnaryOperationExpression	- 1		3036450	1					
ANR	3036949	UnaryOperator	-		3036450	0					
ANR	3036950	PrimaryExpression	1		3036450	1					
ANR	3036951	ExpressionStatement	curr_dataptr = NULL	386:1:10663:10682	3036450	58	True				
ANR	3036952	AssignmentExpression	curr_dataptr = NULL		3036450	0		=			
ANR	3036953	Identifier	curr_dataptr		3036450	0					
ANR	3036954	Identifier	NULL		3036450	1					
ANR	3036955	ExpressionStatement	curr_regdataptr = NULL	387:1:10685:10707	3036450	59	True				
ANR	3036956	AssignmentExpression	curr_regdataptr = NULL		3036450	0		=			
ANR	3036957	Identifier	curr_regdataptr		3036450	0					
ANR	3036958	Identifier	NULL		3036450	1					
ANR	3036959	ExpressionStatement	send_child_alive_timer = - 1	389:1:10711:10738	3036450	60	True				
ANR	3036960	AssignmentExpression	send_child_alive_timer = - 1		3036450	0		=			
ANR	3036961	Identifier	send_child_alive_timer		3036450	0					
ANR	3036962	UnaryOperationExpression	- 1		3036450	1					
ANR	3036963	UnaryOperator	-		3036450	0					
ANR	3036964	PrimaryExpression	1		3036450	1					
ANR	3036965	ExpressionStatement	m_want_send_child_alive = true	390:1:10741:10771	3036450	61	True				
ANR	3036966	AssignmentExpression	m_want_send_child_alive = true		3036450	0		=			
ANR	3036967	Identifier	m_want_send_child_alive		3036450	0					
ANR	3036968	Identifier	true		3036450	1					
ANR	3036969	Statement	dcmainThreadId	393:1:10788:10801	3036450	62	True				
ANR	3036970	Statement	=	393:16:10803:10803	3036450	63	True				
ANR	3036971	Statement	::	393:18:10805:10806	3036450	64	True				
ANR	3036972	ExpressionStatement	GetCurrentThreadId ( )	393:20:10807:10827	3036450	65	True				
ANR	3036973	CallExpression	GetCurrentThreadId ( )		3036450	0					
ANR	3036974	Callee	GetCurrentThreadId		3036450	0					
ANR	3036975	Identifier	GetCurrentThreadId		3036450	0					
ANR	3036976	ArgumentList			3036450	1					
ANR	3036977	ExpressionStatement	async_sigs_unblocked = FALSE	397:1:10852:10880	3036450	66	True				
ANR	3036978	AssignmentExpression	async_sigs_unblocked = FALSE		3036450	0		=			
ANR	3036979	Identifier	async_sigs_unblocked		3036450	0					
ANR	3036980	Identifier	FALSE		3036450	1					
ANR	3036981	ExpressionStatement	async_pipe_signal = false	399:1:10890:10915	3036450	67	True				
ANR	3036982	AssignmentExpression	async_pipe_signal = false		3036450	0		=			
ANR	3036983	Identifier	async_pipe_signal		3036450	0					
ANR	3036984	Identifier	false		3036450	1					
ANR	3036985	ExpressionStatement	"m_wants_dc_udp = param_boolean ( ""WANT_UDP_COMMAND_SOCKET"" , true )"	402:1:10985:11048	3036450	68	True				
ANR	3036986	AssignmentExpression	"m_wants_dc_udp = param_boolean ( ""WANT_UDP_COMMAND_SOCKET"" , true )"		3036450	0		=			
ANR	3036987	Identifier	m_wants_dc_udp		3036450	0					
ANR	3036988	CallExpression	"param_boolean ( ""WANT_UDP_COMMAND_SOCKET"" , true )"		3036450	1					
ANR	3036989	Callee	param_boolean		3036450	0					
ANR	3036990	Identifier	param_boolean		3036450	0					
ANR	3036991	ArgumentList	"""WANT_UDP_COMMAND_SOCKET"""		3036450	1					
ANR	3036992	Argument	"""WANT_UDP_COMMAND_SOCKET"""		3036450	0					
ANR	3036993	PrimaryExpression	"""WANT_UDP_COMMAND_SOCKET"""		3036450	0					
ANR	3036994	Argument	true		3036450	1					
ANR	3036995	Identifier	true		3036450	0					
ANR	3036996	ExpressionStatement	m_wants_dc_udp_self = m_wants_dc_udp	403:1:11051:11087	3036450	69	True				
ANR	3036997	AssignmentExpression	m_wants_dc_udp_self = m_wants_dc_udp		3036450	0		=			
ANR	3036998	Identifier	m_wants_dc_udp_self		3036450	0					
ANR	3036999	Identifier	m_wants_dc_udp		3036450	1					
ANR	3037000	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW ) )		3036450	70					
ANR	3037001	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW )	409:5:11321:11368	3036450	0	True				
ANR	3037002	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW )		3036450	0					
ANR	3037003	Callee	get_mySubSystem ( ) -> isType		3036450	0					
ANR	3037004	PtrMemberAccess	get_mySubSystem ( ) -> isType		3036450	0					
ANR	3037005	CallExpression	get_mySubSystem ( )		3036450	0					
ANR	3037006	Callee	get_mySubSystem		3036450	0					
ANR	3037007	Identifier	get_mySubSystem		3036450	0					
ANR	3037008	ArgumentList			3036450	1					
ANR	3037009	Identifier	isType		3036450	1					
ANR	3037010	ArgumentList	SUBSYSTEM_TYPE_SHADOW		3036450	1					
ANR	3037011	Argument	SUBSYSTEM_TYPE_SHADOW		3036450	0					
ANR	3037012	Identifier	SUBSYSTEM_TYPE_SHADOW		3036450	0					
ANR	3037013	CompoundStatement		160:56:4138:4138	3036450	1					
ANR	3037014	ExpressionStatement	m_wants_dc_udp_self = false	410:2:11376:11403	3036450	0	True				
ANR	3037015	AssignmentExpression	m_wants_dc_udp_self = false		3036450	0		=			
ANR	3037016	Identifier	m_wants_dc_udp_self		3036450	0					
ANR	3037017	Identifier	false		3036450	1					
ANR	3037018	ExpressionStatement	m_invalidate_sessions_via_tcp = true	413:1:11416:11452	3036450	71	True				
ANR	3037019	AssignmentExpression	m_invalidate_sessions_via_tcp = true		3036450	0		=			
ANR	3037020	Identifier	m_invalidate_sessions_via_tcp		3036450	0					
ANR	3037021	Identifier	true		3036450	1					
ANR	3037022	ExpressionStatement	dc_rsock = NULL	414:1:11455:11470	3036450	72	True				
ANR	3037023	AssignmentExpression	dc_rsock = NULL		3036450	0		=			
ANR	3037024	Identifier	dc_rsock		3036450	0					
ANR	3037025	Identifier	NULL		3036450	1					
ANR	3037026	ExpressionStatement	dc_ssock = NULL	415:1:11473:11488	3036450	73	True				
ANR	3037027	AssignmentExpression	dc_ssock = NULL		3036450	0		=			
ANR	3037028	Identifier	dc_ssock		3036450	0					
ANR	3037029	Identifier	NULL		3036450	1					
ANR	3037030	ExpressionStatement	"m_iMaxAcceptsPerCycle = param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"	416:4:11494:11559	3036450	74	True				
ANR	3037031	AssignmentExpression	"m_iMaxAcceptsPerCycle = param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"		3036450	0		=			
ANR	3037032	Identifier	m_iMaxAcceptsPerCycle		3036450	0					
ANR	3037033	CallExpression	"param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"		3036450	1					
ANR	3037034	Callee	param_integer		3036450	0					
ANR	3037035	Identifier	param_integer		3036450	0					
ANR	3037036	ArgumentList	"""MAX_ACCEPTS_PER_CYCLE"""		3036450	1					
ANR	3037037	Argument	"""MAX_ACCEPTS_PER_CYCLE"""		3036450	0					
ANR	3037038	PrimaryExpression	"""MAX_ACCEPTS_PER_CYCLE"""		3036450	0					
ANR	3037039	Argument	8		3036450	1					
ANR	3037040	PrimaryExpression	8		3036450	0					
ANR	3037041	IfStatement	if ( m_iMaxAcceptsPerCycle != 1 )		3036450	75					
ANR	3037042	Condition	m_iMaxAcceptsPerCycle != 1	417:8:11569:11594	3036450	0	True				
ANR	3037043	EqualityExpression	m_iMaxAcceptsPerCycle != 1		3036450	0		!=			
ANR	3037044	Identifier	m_iMaxAcceptsPerCycle		3036450	0					
ANR	3037045	PrimaryExpression	1		3036450	1					
ANR	3037046	CompoundStatement		168:37:4364:4364	3036450	1					
ANR	3037047	ExpressionStatement	"dprintf ( D_ALWAYS , ""Setting maximum accepts per cycle %d.\\n"" , m_iMaxAcceptsPerCycle )"	418:8:11608:11690	3036450	0	True				
ANR	3037048	CallExpression	"dprintf ( D_ALWAYS , ""Setting maximum accepts per cycle %d.\\n"" , m_iMaxAcceptsPerCycle )"		3036450	0					
ANR	3037049	Callee	dprintf		3036450	0					
ANR	3037050	Identifier	dprintf		3036450	0					
ANR	3037051	ArgumentList	D_ALWAYS		3036450	1					
ANR	3037052	Argument	D_ALWAYS		3036450	0					
ANR	3037053	Identifier	D_ALWAYS		3036450	0					
ANR	3037054	Argument	"""Setting maximum accepts per cycle %d.\\n"""		3036450	1					
ANR	3037055	PrimaryExpression	"""Setting maximum accepts per cycle %d.\\n"""		3036450	0					
ANR	3037056	Argument	m_iMaxAcceptsPerCycle		3036450	2					
ANR	3037057	Identifier	m_iMaxAcceptsPerCycle		3036450	0					
ANR	3037058	ExpressionStatement	inheritedSocks [ 0 ] = NULL	421:1:11700:11724	3036450	76	True				
ANR	3037059	AssignmentExpression	inheritedSocks [ 0 ] = NULL		3036450	0		=			
ANR	3037060	ArrayIndexing	inheritedSocks [ 0 ]		3036450	0					
ANR	3037061	Identifier	inheritedSocks		3036450	0					
ANR	3037062	PrimaryExpression	0		3036450	1					
ANR	3037063	Identifier	NULL		3036450	1					
ANR	3037064	ExpressionStatement	inServiceCommandSocket_flag = FALSE	422:1:11727:11762	3036450	77	True				
ANR	3037065	AssignmentExpression	inServiceCommandSocket_flag = FALSE		3036450	0		=			
ANR	3037066	Identifier	inServiceCommandSocket_flag		3036450	0					
ANR	3037067	Identifier	FALSE		3036450	1					
ANR	3037068	IdentifierDeclStatement	int i ;	426:1:11866:11871	3036450	78	True				
ANR	3037069	IdentifierDecl	i		3036450	0					
ANR	3037070	IdentifierDeclType	int		3036450	0					
ANR	3037071	Identifier	i		3036450	1					
ANR	3037072	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		3036450	79					
ANR	3037073	ForInit	i = 0 ;	427:6:11879:11882	3036450	0	True				
ANR	3037074	AssignmentExpression	i = 0		3036450	0		=			
ANR	3037075	Identifier	i		3036450	0					
ANR	3037076	PrimaryExpression	0		3036450	1					
ANR	3037077	Condition	i < LAST_PERM	427:11:11884:11894	3036450	1	True				
ANR	3037078	RelationalExpression	i < LAST_PERM		3036450	0		<			
ANR	3037079	Identifier	i		3036450	0					
ANR	3037080	Identifier	LAST_PERM		3036450	1					
ANR	3037081	PostIncDecOperationExpression	i ++	427:24:11897:11899	3036450	2	True				
ANR	3037082	Identifier	i		3036450	0					
ANR	3037083	IncDec	++		3036450	1					
ANR	3037084	CompoundStatement		178:30:4669:4669	3036450	3					
ANR	3037085	ExpressionStatement	SettableAttrsLists [ i ] = NULL	428:2:11907:11935	3036450	0	True				
ANR	3037086	AssignmentExpression	SettableAttrsLists [ i ] = NULL		3036450	0		=			
ANR	3037087	ArrayIndexing	SettableAttrsLists [ i ]		3036450	0					
ANR	3037088	Identifier	SettableAttrsLists		3036450	0					
ANR	3037089	Identifier	i		3036450	1					
ANR	3037090	Identifier	NULL		3036450	1					
ANR	3037091	ExpressionStatement	Default_Priv_State = PRIV_CONDOR	431:1:11942:11974	3036450	80	True				
ANR	3037092	AssignmentExpression	Default_Priv_State = PRIV_CONDOR		3036450	0		=			
ANR	3037093	Identifier	Default_Priv_State		3036450	0					
ANR	3037094	Identifier	PRIV_CONDOR		3036450	1					
ANR	3037095	ExpressionStatement	_cookie_len_old = _cookie_len = 0	433:1:11978:12013	3036450	81	True				
ANR	3037096	AssignmentExpression	_cookie_len_old = _cookie_len = 0		3036450	0		=			
ANR	3037097	Identifier	_cookie_len_old		3036450	0					
ANR	3037098	AssignmentExpression	_cookie_len = 0		3036450	1		=			
ANR	3037099	Identifier	_cookie_len		3036450	0					
ANR	3037100	PrimaryExpression	0		3036450	1					
ANR	3037101	ExpressionStatement	_cookie_data_old = _cookie_data = NULL	434:1:12016:12054	3036450	82	True				
ANR	3037102	AssignmentExpression	_cookie_data_old = _cookie_data = NULL		3036450	0		=			
ANR	3037103	Identifier	_cookie_data_old		3036450	0					
ANR	3037104	AssignmentExpression	_cookie_data = NULL		3036450	1		=			
ANR	3037105	Identifier	_cookie_data		3036450	0					
ANR	3037106	Identifier	NULL		3036450	1					
ANR	3037107	ExpressionStatement	peaceful_shutdown = false	436:1:12058:12083	3036450	83	True				
ANR	3037108	AssignmentExpression	peaceful_shutdown = false		3036450	0		=			
ANR	3037109	Identifier	peaceful_shutdown		3036450	0					
ANR	3037110	Identifier	false		3036450	1					
ANR	3037111	ExpressionStatement	mapfile = NULL	440:1:12133:12148	3036450	84	True				
ANR	3037112	AssignmentExpression	mapfile = NULL		3036450	0		=			
ANR	3037113	Identifier	mapfile		3036450	0					
ANR	3037114	Identifier	NULL		3036450	1					
ANR	3037115	ExpressionStatement	file_descriptor_safety_limit = 0	444:1:12166:12198	3036450	85	True				
ANR	3037116	AssignmentExpression	file_descriptor_safety_limit = 0		3036450	0		=			
ANR	3037117	Identifier	file_descriptor_safety_limit		3036450	0					
ANR	3037118	PrimaryExpression	0		3036450	1					
ANR	3037119	IdentifierDeclStatement	char max_fds_name [ 50 ] ;	447:1:12253:12274	3036450	86	True				
ANR	3037120	IdentifierDecl	max_fds_name [ 50 ]		3036450	0					
ANR	3037121	IdentifierDeclType	char [ 50 ]		3036450	0					
ANR	3037122	Identifier	max_fds_name		3036450	1					
ANR	3037123	PrimaryExpression	50		3036450	2					
ANR	3037124	ExpressionStatement	"sprintf ( max_fds_name , ""%s_MAX_FILE_DESCRIPTORS"" , get_mySubSystem ( ) -> getName ( ) )"	448:1:12277:12353	3036450	87	True				
ANR	3037125	CallExpression	"sprintf ( max_fds_name , ""%s_MAX_FILE_DESCRIPTORS"" , get_mySubSystem ( ) -> getName ( ) )"		3036450	0					
ANR	3037126	Callee	sprintf		3036450	0					
ANR	3037127	Identifier	sprintf		3036450	0					
ANR	3037128	ArgumentList	max_fds_name		3036450	1					
ANR	3037129	Argument	max_fds_name		3036450	0					
ANR	3037130	Identifier	max_fds_name		3036450	0					
ANR	3037131	Argument	"""%s_MAX_FILE_DESCRIPTORS"""		3036450	1					
ANR	3037132	PrimaryExpression	"""%s_MAX_FILE_DESCRIPTORS"""		3036450	0					
ANR	3037133	Argument	get_mySubSystem ( ) -> getName ( )		3036450	2					
ANR	3037134	CallExpression	get_mySubSystem ( ) -> getName ( )		3036450	0					
ANR	3037135	Callee	get_mySubSystem ( ) -> getName		3036450	0					
ANR	3037136	PtrMemberAccess	get_mySubSystem ( ) -> getName		3036450	0					
ANR	3037137	CallExpression	get_mySubSystem ( )		3036450	0					
ANR	3037138	Callee	get_mySubSystem		3036450	0					
ANR	3037139	Identifier	get_mySubSystem		3036450	0					
ANR	3037140	ArgumentList			3036450	1					
ANR	3037141	Identifier	getName		3036450	1					
ANR	3037142	ArgumentList			3036450	1					
ANR	3037143	IdentifierDeclStatement	"int max_fds = param_integer ( max_fds_name , 0 ) ;"	449:1:12356:12399	3036450	88	True				
ANR	3037144	IdentifierDecl	"max_fds = param_integer ( max_fds_name , 0 )"		3036450	0					
ANR	3037145	IdentifierDeclType	int		3036450	0					
ANR	3037146	Identifier	max_fds		3036450	1					
ANR	3037147	AssignmentExpression	"max_fds = param_integer ( max_fds_name , 0 )"		3036450	2		=			
ANR	3037148	Identifier	max_fds		3036450	0					
ANR	3037149	CallExpression	"param_integer ( max_fds_name , 0 )"		3036450	1					
ANR	3037150	Callee	param_integer		3036450	0					
ANR	3037151	Identifier	param_integer		3036450	0					
ANR	3037152	ArgumentList	max_fds_name		3036450	1					
ANR	3037153	Argument	max_fds_name		3036450	0					
ANR	3037154	Identifier	max_fds_name		3036450	0					
ANR	3037155	Argument	0		3036450	1					
ANR	3037156	PrimaryExpression	0		3036450	0					
ANR	3037157	IfStatement	if ( max_fds <= 0 )		3036450	89					
ANR	3037158	Condition	max_fds <= 0	450:5:12406:12417	3036450	0	True				
ANR	3037159	RelationalExpression	max_fds <= 0		3036450	0		<=			
ANR	3037160	Identifier	max_fds		3036450	0					
ANR	3037161	PrimaryExpression	0		3036450	1					
ANR	3037162	CompoundStatement		201:20:5187:5187	3036450	1					
ANR	3037163	ExpressionStatement	"max_fds = param_integer ( ""MAX_FILE_DESCRIPTORS"" , 0 )"	451:2:12425:12474	3036450	0	True				
ANR	3037164	AssignmentExpression	"max_fds = param_integer ( ""MAX_FILE_DESCRIPTORS"" , 0 )"		3036450	0		=			
ANR	3037165	Identifier	max_fds		3036450	0					
ANR	3037166	CallExpression	"param_integer ( ""MAX_FILE_DESCRIPTORS"" , 0 )"		3036450	1					
ANR	3037167	Callee	param_integer		3036450	0					
ANR	3037168	Identifier	param_integer		3036450	0					
ANR	3037169	ArgumentList	"""MAX_FILE_DESCRIPTORS"""		3036450	1					
ANR	3037170	Argument	"""MAX_FILE_DESCRIPTORS"""		3036450	0					
ANR	3037171	PrimaryExpression	"""MAX_FILE_DESCRIPTORS"""		3036450	0					
ANR	3037172	Argument	0		3036450	1					
ANR	3037173	PrimaryExpression	0		3036450	0					
ANR	3037174	IfStatement	if ( max_fds > 0 )		3036450	90					
ANR	3037175	Condition	max_fds > 0	453:5:12484:12494	3036450	0	True				
ANR	3037176	RelationalExpression	max_fds > 0		3036450	0		>			
ANR	3037177	Identifier	max_fds		3036450	0					
ANR	3037178	PrimaryExpression	0		3036450	1					
ANR	3037179	CompoundStatement		207:2:5342:5375	3036450	1					
ANR	3037180	ExpressionStatement	"dprintf ( D_ALWAYS , ""Setting maximum file descriptors to %d.\\n"" , max_fds )"	454:2:12502:12571	3036450	0	True				
ANR	3037181	CallExpression	"dprintf ( D_ALWAYS , ""Setting maximum file descriptors to %d.\\n"" , max_fds )"		3036450	0					
ANR	3037182	Callee	dprintf		3036450	0					
ANR	3037183	Identifier	dprintf		3036450	0					
ANR	3037184	ArgumentList	D_ALWAYS		3036450	1					
ANR	3037185	Argument	D_ALWAYS		3036450	0					
ANR	3037186	Identifier	D_ALWAYS		3036450	0					
ANR	3037187	Argument	"""Setting maximum file descriptors to %d.\\n"""		3036450	1					
ANR	3037188	PrimaryExpression	"""Setting maximum file descriptors to %d.\\n"""		3036450	0					
ANR	3037189	Argument	max_fds		3036450	2					
ANR	3037190	Identifier	max_fds		3036450	0					
ANR	3037191	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	456:2:12576:12609	3036450	1	True				
ANR	3037192	IdentifierDecl	priv = set_root_priv ( )		3036450	0					
ANR	3037193	IdentifierDeclType	priv_state		3036450	0					
ANR	3037194	Identifier	priv		3036450	1					
ANR	3037195	AssignmentExpression	priv = set_root_priv ( )		3036450	2		=			
ANR	3037196	Identifier	priv		3036450	0					
ANR	3037197	CallExpression	set_root_priv ( )		3036450	1					
ANR	3037198	Callee	set_root_priv		3036450	0					
ANR	3037199	Identifier	set_root_priv		3036450	0					
ANR	3037200	ArgumentList			3036450	1					
ANR	3037201	ExpressionStatement	"limit ( RLIMIT_NOFILE , max_fds , CONDOR_REQUIRED_LIMIT , ""MAX_FILE_DESCRIPTORS"" )"	457:2:12613:12686	3036450	2	True				
ANR	3037202	CallExpression	"limit ( RLIMIT_NOFILE , max_fds , CONDOR_REQUIRED_LIMIT , ""MAX_FILE_DESCRIPTORS"" )"		3036450	0					
ANR	3037203	Callee	limit		3036450	0					
ANR	3037204	Identifier	limit		3036450	0					
ANR	3037205	ArgumentList	RLIMIT_NOFILE		3036450	1					
ANR	3037206	Argument	RLIMIT_NOFILE		3036450	0					
ANR	3037207	Identifier	RLIMIT_NOFILE		3036450	0					
ANR	3037208	Argument	max_fds		3036450	1					
ANR	3037209	Identifier	max_fds		3036450	0					
ANR	3037210	Argument	CONDOR_REQUIRED_LIMIT		3036450	2					
ANR	3037211	Identifier	CONDOR_REQUIRED_LIMIT		3036450	0					
ANR	3037212	Argument	"""MAX_FILE_DESCRIPTORS"""		3036450	3					
ANR	3037213	PrimaryExpression	"""MAX_FILE_DESCRIPTORS"""		3036450	0					
ANR	3037214	ExpressionStatement	set_priv ( priv )	458:2:12690:12704	3036450	3	True				
ANR	3037215	CallExpression	set_priv ( priv )		3036450	0					
ANR	3037216	Callee	set_priv		3036450	0					
ANR	3037217	Identifier	set_priv		3036450	0					
ANR	3037218	ArgumentList	priv		3036450	1					
ANR	3037219	Argument	priv		3036450	0					
ANR	3037220	Identifier	priv		3036450	0					
ANR	3037221	ExpressionStatement	soap = NULL	462:1:12718:12729	3036450	91	True				
ANR	3037222	AssignmentExpression	soap = NULL		3036450	0		=			
ANR	3037223	Identifier	soap		3036450	0					
ANR	3037224	Identifier	NULL		3036450	1					
ANR	3037225	ExpressionStatement	localAdFile = NULL	464:1:12733:12751	3036450	92	True				
ANR	3037226	AssignmentExpression	localAdFile = NULL		3036450	0		=			
ANR	3037227	Identifier	localAdFile		3036450	0					
ANR	3037228	Identifier	NULL		3036450	1					
ANR	3037229	ExpressionStatement	m_collector_list = NULL	466:1:12755:12778	3036450	93	True				
ANR	3037230	AssignmentExpression	m_collector_list = NULL		3036450	0		=			
ANR	3037231	Identifier	m_collector_list		3036450	0					
ANR	3037232	Identifier	NULL		3036450	1					
ANR	3037233	ExpressionStatement	m_wants_restart = true	467:1:12781:12803	3036450	94	True				
ANR	3037234	AssignmentExpression	m_wants_restart = true		3036450	0		=			
ANR	3037235	Identifier	m_wants_restart		3036450	0					
ANR	3037236	Identifier	true		3036450	1					
ANR	3037237	ExpressionStatement	m_in_daemon_shutdown = false	468:1:12806:12834	3036450	95	True				
ANR	3037238	AssignmentExpression	m_in_daemon_shutdown = false		3036450	0		=			
ANR	3037239	Identifier	m_in_daemon_shutdown		3036450	0					
ANR	3037240	Identifier	false		3036450	1					
ANR	3037241	ExpressionStatement	m_in_daemon_shutdown_fast = false	469:1:12837:12870	3036450	96	True				
ANR	3037242	AssignmentExpression	m_in_daemon_shutdown_fast = false		3036450	0		=			
ANR	3037243	Identifier	m_in_daemon_shutdown_fast		3036450	0					
ANR	3037244	Identifier	false		3036450	1					
ANR	3037245	ExpressionStatement	m_private_network_name = NULL	470:1:12873:12902	3036450	97	True				
ANR	3037246	AssignmentExpression	m_private_network_name = NULL		3036450	0		=			
ANR	3037247	Identifier	m_private_network_name		3036450	0					
ANR	3037248	Identifier	NULL		3036450	1					
ANR	3037249	ExpressionStatement	m_use_clone_to_create_processes = false	475:1:13008:13047	3036450	98	True				
ANR	3037250	AssignmentExpression	m_use_clone_to_create_processes = false		3036450	0		=			
ANR	3037251	Identifier	m_use_clone_to_create_processes		3036450	0					
ANR	3037252	Identifier	false		3036450	1					
ANR	3037253	ExpressionStatement	m_fake_create_thread = false	478:1:13058:13086	3036450	99	True				
ANR	3037254	AssignmentExpression	m_fake_create_thread = false		3036450	0		=			
ANR	3037255	Identifier	m_fake_create_thread		3036450	0					
ANR	3037256	Identifier	false		3036450	1					
ANR	3037257	ExpressionStatement	m_refresh_dns_timer = - 1	480:1:13090:13114	3036450	100	True				
ANR	3037258	AssignmentExpression	m_refresh_dns_timer = - 1		3036450	0		=			
ANR	3037259	Identifier	m_refresh_dns_timer		3036450	0					
ANR	3037260	UnaryOperationExpression	- 1		3036450	1					
ANR	3037261	UnaryOperator	-		3036450	0					
ANR	3037262	PrimaryExpression	1		3036450	1					
ANR	3037263	ExpressionStatement	m_ccb_listeners = NULL	482:1:13118:13140	3036450	101	True				
ANR	3037264	AssignmentExpression	m_ccb_listeners = NULL		3036450	0		=			
ANR	3037265	Identifier	m_ccb_listeners		3036450	0					
ANR	3037266	Identifier	NULL		3036450	1					
ANR	3037267	ExpressionStatement	m_shared_port_endpoint = NULL	483:1:13143:13172	3036450	102	True				
ANR	3037268	AssignmentExpression	m_shared_port_endpoint = NULL		3036450	0		=			
ANR	3037269	Identifier	m_shared_port_endpoint		3036450	0					
ANR	3037270	Identifier	NULL		3036450	1					
ANR	3037271	Identifier	DaemonCore :: DaemonCore		3036450	1					
ANR	3037272	ParameterList	"int PidSize , int ComSize , int SigSize , int SocSize , int ReapSize , int PipeSize"		3036450	2					
ANR	3037273	Parameter	int PidSize	248:23:7152:7162	3036450	0	True				
ANR	3037274	ParameterType	int		3036450	0					
ANR	3037275	Identifier	PidSize		3036450	1					
ANR	3037276	Parameter	int ComSize	248:36:7165:7175	3036450	1	True				
ANR	3037277	ParameterType	int		3036450	0					
ANR	3037278	Identifier	ComSize		3036450	1					
ANR	3037279	Parameter	int SigSize	248:48:7177:7187	3036450	2	True				
ANR	3037280	ParameterType	int		3036450	0					
ANR	3037281	Identifier	SigSize		3036450	1					
ANR	3037282	Parameter	int SocSize	249:4:7194:7204	3036450	3	True				
ANR	3037283	ParameterType	int		3036450	0					
ANR	3037284	Identifier	SocSize		3036450	1					
ANR	3037285	Parameter	int ReapSize	249:16:7206:7217	3036450	4	True				
ANR	3037286	ParameterType	int		3036450	0					
ANR	3037287	Identifier	ReapSize		3036450	1					
ANR	3037288	Parameter	int PipeSize	249:29:7219:7230	3036450	5	True				
ANR	3037289	ParameterType	int		3036450	0					
ANR	3037290	Identifier	PipeSize		3036450	1					
ANR	3037291	CFGEntryNode	ENTRY		3036450		True				
ANR	3037292	CFGExitNode	EXIT		3036450		True				
ANR	3037293	Symbol	async_pipe_signal		3036450						
ANR	3037294	Symbol	nReap		3036450						
ANR	3037295	Symbol	SUBSYSTEM_TYPE_SHADOW		3036450						
ANR	3037296	Symbol	& DaemonCore :: CallSocketHandler		3036450						
ANR	3037297	Symbol	nPipe		3036450						
ANR	3037298	Symbol	sec_man		3036450						
ANR	3037299	Symbol	defaultReaper		3036450						
ANR	3037300	Symbol	curr_dataptr		3036450						
ANR	3037301	Symbol	Default_Priv_State		3036450						
ANR	3037302	Symbol	nPendingSockets		3036450						
ANR	3037303	Symbol	blankSockEnt		3036450						
ANR	3037304	Symbol	& DaemonCore :: Register_DataPtr		3036450						
ANR	3037305	Symbol	async_sigs_unblocked		3036450						
ANR	3037306	Symbol	LAST_PERM		3036450						
ANR	3037307	Symbol	m_fake_create_thread		3036450						
ANR	3037308	Symbol	CONDOR_REQUIRED_LIMIT		3036450						
ANR	3037309	Symbol	blankPipeEnt		3036450						
ANR	3037310	Symbol	soap_ssl_sock		3036450						
ANR	3037311	Symbol	& DaemonCore :: daemonContactInfoChanged		3036450						
ANR	3037312	Symbol	ReapSize		3036450						
ANR	3037313	Symbol	ppid		3036450						
ANR	3037314	Symbol	DEFAULT_MAXSIGNALS		3036450						
ANR	3037315	Symbol	reapTable		3036450						
ANR	3037316	Symbol	compute_pid_hash		3036450						
ANR	3037317	Symbol	& DaemonCore :: HandleReqAsync		3036450						
ANR	3037318	Symbol	* inheritedSocks		3036450						
ANR	3037319	Symbol	param_integer		3036450						
ANR	3037320	Symbol	get_mySubSystem		3036450						
ANR	3037321	Symbol	& DaemonCore :: incrementPendingSockets		3036450						
ANR	3037322	Symbol	mapfile		3036450						
ANR	3037323	Symbol	m_want_send_child_alive		3036450						
ANR	3037324	Symbol	localAdFile		3036450						
ANR	3037325	Symbol	maxSig		3036450						
ANR	3037326	Symbol	_cookie_len_old		3036450						
ANR	3037327	Symbol	& DaemonCore :: decrementPendingSockets		3036450						
ANR	3037328	Symbol	_cookie_data_old		3036450						
ANR	3037329	Symbol	m_dirty_sinful		3036450						
ANR	3037330	Symbol	peaceful_shutdown		3036450						
ANR	3037331	Symbol	PipeSize		3036450						
ANR	3037332	Symbol	max_fds		3036450						
ANR	3037333	Symbol	& DaemonCore :: Register_Command		3036450						
ANR	3037334	Symbol	daemonCoreSockAdapter		3036450						
ANR	3037335	Symbol	dc_ssock		3036450						
ANR	3037336	Symbol	* SettableAttrsLists		3036450						
ANR	3037337	Symbol	inServiceCommandSocket_flag		3036450						
ANR	3037338	Symbol	sigTable		3036450						
ANR	3037339	Symbol	m_wants_dc_udp		3036450						
ANR	3037340	Symbol	RLIMIT_NOFILE		3036450						
ANR	3037341	Symbol	m_use_clone_to_create_processes		3036450						
ANR	3037342	Symbol	pidTable		3036450						
ANR	3037343	Symbol	get_mySubSystem ( ) -> isType		3036450						
ANR	3037344	Symbol	nCommand		3036450						
ANR	3037345	Symbol	m_iMaxAcceptsPerCycle		3036450						
ANR	3037346	Symbol	nSock		3036450						
ANR	3037347	Symbol	maxReap		3036450						
ANR	3037348	Symbol	i		3036450						
ANR	3037349	Symbol	set_root_priv		3036450						
ANR	3037350	Symbol	& DaemonCore :: GetDataPtr		3036450						
ANR	3037351	Symbol	initial_command_sock		3036450						
ANR	3037352	Symbol	m_shared_port_endpoint		3036450						
ANR	3037353	Symbol	comTable		3036450						
ANR	3037354	Symbol	dc_stats		3036450						
ANR	3037355	Symbol	& DaemonCore :: publicNetworkIpAddr		3036450						
ANR	3037356	Symbol	maxPipe		3036450						
ANR	3037357	Symbol	PRIV_CONDOR		3036450						
ANR	3037358	Symbol	& DaemonCore :: Register_Timer		3036450						
ANR	3037359	Symbol	& DaemonCore :: Cancel_Socket		3036450						
ANR	3037360	Symbol	m_in_daemon_shutdown		3036450						
ANR	3037361	Symbol	& blankSockEnt		3036450						
ANR	3037362	Symbol	priv		3036450						
ANR	3037363	Symbol	m_wants_dc_udp_self		3036450						
ANR	3037364	Symbol	DEFAULT_MAXSOCKETS		3036450						
ANR	3037365	Symbol	SocSize		3036450						
ANR	3037366	Symbol	& DaemonCore :: Register_Socket		3036450						
ANR	3037367	Symbol	DEFAULT_MAXREAPS		3036450						
ANR	3037368	Symbol	NULL		3036450						
ANR	3037369	Symbol	sockTable		3036450						
ANR	3037370	Symbol	this		3036450						
ANR	3037371	Symbol	param_boolean		3036450						
ANR	3037372	Symbol	m_refresh_dns_timer		3036450						
ANR	3037373	Symbol	& Big_fat_mutex		3036450						
ANR	3037374	Symbol	nSig		3036450						
ANR	3037375	Symbol	m_ccb_listeners		3036450						
ANR	3037376	Symbol	& DaemonCore :: Register_Timer_TS		3036450						
ANR	3037377	Symbol	true		3036450						
ANR	3037378	Symbol	& blankPipeEnt		3036450						
ANR	3037379	Symbol	m_in_daemon_shutdown_fast		3036450						
ANR	3037380	Symbol	maxSocket		3036450						
ANR	3037381	Symbol	m_invalidate_sessions_via_tcp		3036450						
ANR	3037382	Symbol	soap		3036450						
ANR	3037383	Symbol	curr_regdataptr		3036450						
ANR	3037384	Symbol	& DaemonCore :: CallCommandHandler		3036450						
ANR	3037385	Symbol	PidSize		3036450						
ANR	3037386	Symbol	inheritedSocks		3036450						
ANR	3037387	Symbol	ComSize		3036450						
ANR	3037388	Symbol	pipeHandleTable		3036450						
ANR	3037389	Symbol	m_wants_restart		3036450						
ANR	3037390	Symbol	_cookie_data		3036450						
ANR	3037391	Symbol	maxCommand		3036450						
ANR	3037392	Symbol	& DaemonCore :: TooManyRegisteredSockets		3036450						
ANR	3037393	Symbol	m_proc_family		3036450						
ANR	3037394	Symbol	file_descriptor_safety_limit		3036450						
ANR	3037395	Symbol	dc_rsock		3036450						
ANR	3037396	Symbol	m_private_network_name		3036450						
ANR	3037397	Symbol	get_mySubSystem ( ) -> getName		3036450						
ANR	3037398	Symbol	* get_mySubSystem		3036450						
ANR	3037399	Symbol	& DaemonCore :: Cancel_Timer		3036450						
ANR	3037400	Symbol	false		3036450						
ANR	3037401	Symbol	D_ALWAYS		3036450						
ANR	3037402	Symbol	DEFAULT_PIDBUCKETS		3036450						
ANR	3037403	Symbol	pipeTable		3036450						
ANR	3037404	Symbol	_cookie_len		3036450						
ANR	3037405	Symbol	m_collector_list		3036450						
ANR	3037406	Symbol	DEFAULT_MAXCOMMANDS		3036450						
ANR	3037407	Symbol	DEFAULT_MAXPIPES		3036450						
ANR	3037408	Symbol	send_child_alive_timer		3036450						
ANR	3037409	Symbol	* i		3036450						
ANR	3037410	Symbol	SigSize		3036450						
ANR	3037411	Symbol	SettableAttrsLists		3036450						
ANR	3037412	Symbol	maxPipeBuffer		3036450						
ANR	3037413	Symbol	maxPipeHandleIndex		3036450						
ANR	3037414	Symbol	FALSE		3036450						
ANR	3037415	Symbol	blankPipeEnt . index		3036450						
ANR	3037416	Symbol	max_fds_name		3036450						
ANR	3037417	Function	DaemonCore :: ~DaemonCore	488:0:13296:16211							
ANR	3037418	FunctionDef	DaemonCore :: ~DaemonCore ()		3037417	0					
ANR	3037419	CompoundStatement		489:0:13322:16211	3037417	0					
ANR	3037420	IdentifierDeclStatement	int i ;	490:1:13325:13331	3037417	0	True				
ANR	3037421	IdentifierDecl	i		3037417	0					
ANR	3037422	IdentifierDeclType	int		3037417	0					
ANR	3037423	Identifier	i		3037417	1					
ANR	3037424	IfStatement	if ( m_ccb_listeners )		3037417	1					
ANR	3037425	Condition	m_ccb_listeners	492:5:13339:13353	3037417	0	True				
ANR	3037426	Identifier	m_ccb_listeners		3037417	0					
ANR	3037427	CompoundStatement		4:23:34:34	3037417	1					
ANR	3037428	Statement	delete	493:2:13361:13366	3037417	0	True				
ANR	3037429	ExpressionStatement	m_ccb_listeners	493:9:13368:13383	3037417	1	True				
ANR	3037430	Identifier	m_ccb_listeners		3037417	0					
ANR	3037431	ExpressionStatement	m_ccb_listeners = NULL	494:2:13387:13409	3037417	2	True				
ANR	3037432	AssignmentExpression	m_ccb_listeners = NULL		3037417	0		=			
ANR	3037433	Identifier	m_ccb_listeners		3037417	0					
ANR	3037434	Identifier	NULL		3037417	1					
ANR	3037435	IfStatement	if ( m_shared_port_endpoint )		3037417	2					
ANR	3037436	Condition	m_shared_port_endpoint	497:5:13420:13441	3037417	0	True				
ANR	3037437	Identifier	m_shared_port_endpoint		3037417	0					
ANR	3037438	CompoundStatement		9:30:122:122	3037417	1					
ANR	3037439	Statement	delete	498:2:13449:13454	3037417	0	True				
ANR	3037440	ExpressionStatement	m_shared_port_endpoint	498:9:13456:13478	3037417	1	True				
ANR	3037441	Identifier	m_shared_port_endpoint		3037417	0					
ANR	3037442	ExpressionStatement	m_shared_port_endpoint = NULL	499:2:13482:13511	3037417	2	True				
ANR	3037443	AssignmentExpression	m_shared_port_endpoint = NULL		3037417	0		=			
ANR	3037444	Identifier	m_shared_port_endpoint		3037417	0					
ANR	3037445	Identifier	NULL		3037417	1					
ANR	3037446	ExpressionStatement	close ( async_pipe [ 1 ] )	503:1:13532:13552	3037417	3	True				
ANR	3037447	CallExpression	close ( async_pipe [ 1 ] )		3037417	0					
ANR	3037448	Callee	close		3037417	0					
ANR	3037449	Identifier	close		3037417	0					
ANR	3037450	ArgumentList	async_pipe [ 1 ]		3037417	1					
ANR	3037451	Argument	async_pipe [ 1 ]		3037417	0					
ANR	3037452	ArrayIndexing	async_pipe [ 1 ]		3037417	0					
ANR	3037453	Identifier	async_pipe		3037417	0					
ANR	3037454	PrimaryExpression	1		3037417	1					
ANR	3037455	ExpressionStatement	close ( async_pipe [ 0 ] )	504:1:13555:13575	3037417	4	True				
ANR	3037456	CallExpression	close ( async_pipe [ 0 ] )		3037417	0					
ANR	3037457	Callee	close		3037417	0					
ANR	3037458	Identifier	close		3037417	0					
ANR	3037459	ArgumentList	async_pipe [ 0 ]		3037417	1					
ANR	3037460	Argument	async_pipe [ 0 ]		3037417	0					
ANR	3037461	ArrayIndexing	async_pipe [ 0 ]		3037417	0					
ANR	3037462	Identifier	async_pipe		3037417	0					
ANR	3037463	PrimaryExpression	0		3037417	1					
ANR	3037464	IfStatement	if ( comTable != NULL )		3037417	5					
ANR	3037465	Condition	comTable != NULL	507:5:13590:13605	3037417	0	True				
ANR	3037466	EqualityExpression	comTable != NULL		3037417	0		!=			
ANR	3037467	Identifier	comTable		3037417	0					
ANR	3037468	Identifier	NULL		3037417	1					
ANR	3037469	CompoundStatement		20:1:287:287	3037417	1					
ANR	3037470	ForStatement	for ( i = 0 ; i < maxCommand ; i ++ )		3037417	0					
ANR	3037471	ForInit	i = 0 ;	509:7:13619:13622	3037417	0	True				
ANR	3037472	AssignmentExpression	i = 0		3037417	0		=			
ANR	3037473	Identifier	i		3037417	0					
ANR	3037474	PrimaryExpression	0		3037417	1					
ANR	3037475	Condition	i < maxCommand	509:11:13623:13634	3037417	1	True				
ANR	3037476	RelationalExpression	i < maxCommand		3037417	0		<			
ANR	3037477	Identifier	i		3037417	0					
ANR	3037478	Identifier	maxCommand		3037417	1					
ANR	3037479	PostIncDecOperationExpression	i ++	509:24:13636:13638	3037417	2	True				
ANR	3037480	Identifier	i		3037417	0					
ANR	3037481	IncDec	++		3037417	1					
ANR	3037482	CompoundStatement		21:29:318:318	3037417	3					
ANR	3037483	ExpressionStatement	free ( comTable [ i ] . command_descrip )	510:3:13646:13681	3037417	0	True				
ANR	3037484	CallExpression	free ( comTable [ i ] . command_descrip )		3037417	0					
ANR	3037485	Callee	free		3037417	0					
ANR	3037486	Identifier	free		3037417	0					
ANR	3037487	ArgumentList	comTable [ i ] . command_descrip		3037417	1					
ANR	3037488	Argument	comTable [ i ] . command_descrip		3037417	0					
ANR	3037489	MemberAccess	comTable [ i ] . command_descrip		3037417	0					
ANR	3037490	ArrayIndexing	comTable [ i ]		3037417	0					
ANR	3037491	Identifier	comTable		3037417	0					
ANR	3037492	Identifier	i		3037417	1					
ANR	3037493	Identifier	command_descrip		3037417	1					
ANR	3037494	ExpressionStatement	free ( comTable [ i ] . handler_descrip )	511:3:13686:13721	3037417	1	True				
ANR	3037495	CallExpression	free ( comTable [ i ] . handler_descrip )		3037417	0					
ANR	3037496	Callee	free		3037417	0					
ANR	3037497	Identifier	free		3037417	0					
ANR	3037498	ArgumentList	comTable [ i ] . handler_descrip		3037417	1					
ANR	3037499	Argument	comTable [ i ] . handler_descrip		3037417	0					
ANR	3037500	MemberAccess	comTable [ i ] . handler_descrip		3037417	0					
ANR	3037501	ArrayIndexing	comTable [ i ]		3037417	0					
ANR	3037502	Identifier	comTable		3037417	0					
ANR	3037503	Identifier	i		3037417	1					
ANR	3037504	Identifier	handler_descrip		3037417	1					
ANR	3037505	Statement	delete	513:2:13729:13734	3037417	1	True				
ANR	3037506	Statement	[	513:9:13736:13736	3037417	2	True				
ANR	3037507	Statement	]	513:10:13737:13737	3037417	3	True				
ANR	3037508	ExpressionStatement	comTable	513:11:13738:13746	3037417	4	True				
ANR	3037509	Identifier	comTable		3037417	0					
ANR	3037510	IfStatement	if ( sigTable != NULL )		3037417	6					
ANR	3037511	Condition	sigTable != NULL	516:5:13757:13772	3037417	0	True				
ANR	3037512	EqualityExpression	sigTable != NULL		3037417	0		!=			
ANR	3037513	Identifier	sigTable		3037417	0					
ANR	3037514	Identifier	NULL		3037417	1					
ANR	3037515	CompoundStatement		29:1:453:453	3037417	1					
ANR	3037516	ForStatement	for ( i = 0 ; i < maxSig ; i ++ )		3037417	0					
ANR	3037517	ForInit	i = 0 ;	518:7:13785:13788	3037417	0	True				
ANR	3037518	AssignmentExpression	i = 0		3037417	0		=			
ANR	3037519	Identifier	i		3037417	0					
ANR	3037520	PrimaryExpression	0		3037417	1					
ANR	3037521	Condition	i < maxSig	518:11:13789:13796	3037417	1	True				
ANR	3037522	RelationalExpression	i < maxSig		3037417	0		<			
ANR	3037523	Identifier	i		3037417	0					
ANR	3037524	Identifier	maxSig		3037417	1					
ANR	3037525	PostIncDecOperationExpression	i ++	518:20:13798:13800	3037417	2	True				
ANR	3037526	Identifier	i		3037417	0					
ANR	3037527	IncDec	++		3037417	1					
ANR	3037528	CompoundStatement		30:25:480:480	3037417	3					
ANR	3037529	ExpressionStatement	free ( sigTable [ i ] . sig_descrip )	519:3:13808:13839	3037417	0	True				
ANR	3037530	CallExpression	free ( sigTable [ i ] . sig_descrip )		3037417	0					
ANR	3037531	Callee	free		3037417	0					
ANR	3037532	Identifier	free		3037417	0					
ANR	3037533	ArgumentList	sigTable [ i ] . sig_descrip		3037417	1					
ANR	3037534	Argument	sigTable [ i ] . sig_descrip		3037417	0					
ANR	3037535	MemberAccess	sigTable [ i ] . sig_descrip		3037417	0					
ANR	3037536	ArrayIndexing	sigTable [ i ]		3037417	0					
ANR	3037537	Identifier	sigTable		3037417	0					
ANR	3037538	Identifier	i		3037417	1					
ANR	3037539	Identifier	sig_descrip		3037417	1					
ANR	3037540	ExpressionStatement	free ( sigTable [ i ] . handler_descrip )	520:3:13844:13879	3037417	1	True				
ANR	3037541	CallExpression	free ( sigTable [ i ] . handler_descrip )		3037417	0					
ANR	3037542	Callee	free		3037417	0					
ANR	3037543	Identifier	free		3037417	0					
ANR	3037544	ArgumentList	sigTable [ i ] . handler_descrip		3037417	1					
ANR	3037545	Argument	sigTable [ i ] . handler_descrip		3037417	0					
ANR	3037546	MemberAccess	sigTable [ i ] . handler_descrip		3037417	0					
ANR	3037547	ArrayIndexing	sigTable [ i ]		3037417	0					
ANR	3037548	Identifier	sigTable		3037417	0					
ANR	3037549	Identifier	i		3037417	1					
ANR	3037550	Identifier	handler_descrip		3037417	1					
ANR	3037551	Statement	delete	522:2:13887:13892	3037417	1	True				
ANR	3037552	Statement	[	522:9:13894:13894	3037417	2	True				
ANR	3037553	Statement	]	522:10:13895:13895	3037417	3	True				
ANR	3037554	ExpressionStatement	sigTable	522:11:13896:13904	3037417	4	True				
ANR	3037555	Identifier	sigTable		3037417	0					
ANR	3037556	IfStatement	if ( sockTable != NULL )		3037417	7					
ANR	3037557	Condition	sockTable != NULL	525:5:13915:13931	3037417	0	True				
ANR	3037558	EqualityExpression	sockTable != NULL		3037417	0		!=			
ANR	3037559	Identifier	sockTable		3037417	0					
ANR	3037560	Identifier	NULL		3037417	1					
ANR	3037561	CompoundStatement		38:1:612:612	3037417	1					
ANR	3037562	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		3037417	0					
ANR	3037563	ForInit	i = 0 ;	539:7:14537:14540	3037417	0	True				
ANR	3037564	AssignmentExpression	i = 0		3037417	0		=			
ANR	3037565	Identifier	i		3037417	0					
ANR	3037566	PrimaryExpression	0		3037417	1					
ANR	3037567	Condition	i < nSock	539:11:14541:14547	3037417	1	True				
ANR	3037568	RelationalExpression	i < nSock		3037417	0		<			
ANR	3037569	Identifier	i		3037417	0					
ANR	3037570	Identifier	nSock		3037417	1					
ANR	3037571	PostIncDecOperationExpression	i ++	539:19:14549:14551	3037417	2	True				
ANR	3037572	Identifier	i		3037417	0					
ANR	3037573	IncDec	++		3037417	1					
ANR	3037574	CompoundStatement		51:24:1231:1231	3037417	3					
ANR	3037575	ExpressionStatement	free ( ( * sockTable ) [ i ] . iosock_descrip )	540:3:14559:14597	3037417	0	True				
ANR	3037576	CallExpression	free ( ( * sockTable ) [ i ] . iosock_descrip )		3037417	0					
ANR	3037577	Callee	free		3037417	0					
ANR	3037578	Identifier	free		3037417	0					
ANR	3037579	ArgumentList	( * sockTable ) [ i ] . iosock_descrip		3037417	1					
ANR	3037580	Argument	( * sockTable ) [ i ] . iosock_descrip		3037417	0					
ANR	3037581	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3037417	0					
ANR	3037582	ArrayIndexing	( * sockTable ) [ i ]		3037417	0					
ANR	3037583	UnaryOperationExpression	* sockTable		3037417	0					
ANR	3037584	UnaryOperator	*		3037417	0					
ANR	3037585	Identifier	sockTable		3037417	1					
ANR	3037586	Identifier	i		3037417	1					
ANR	3037587	Identifier	iosock_descrip		3037417	1					
ANR	3037588	ExpressionStatement	free ( ( * sockTable ) [ i ] . handler_descrip )	541:3:14602:14641	3037417	1	True				
ANR	3037589	CallExpression	free ( ( * sockTable ) [ i ] . handler_descrip )		3037417	0					
ANR	3037590	Callee	free		3037417	0					
ANR	3037591	Identifier	free		3037417	0					
ANR	3037592	ArgumentList	( * sockTable ) [ i ] . handler_descrip		3037417	1					
ANR	3037593	Argument	( * sockTable ) [ i ] . handler_descrip		3037417	0					
ANR	3037594	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3037417	0					
ANR	3037595	ArrayIndexing	( * sockTable ) [ i ]		3037417	0					
ANR	3037596	UnaryOperationExpression	* sockTable		3037417	0					
ANR	3037597	UnaryOperator	*		3037417	0					
ANR	3037598	Identifier	sockTable		3037417	1					
ANR	3037599	Identifier	i		3037417	1					
ANR	3037600	Identifier	handler_descrip		3037417	1					
ANR	3037601	Statement	delete	543:2:14649:14654	3037417	1	True				
ANR	3037602	ExpressionStatement	sockTable	543:9:14656:14665	3037417	2	True				
ANR	3037603	Identifier	sockTable		3037417	0					
ANR	3037604	IfStatement	if ( sec_man )		3037417	8					
ANR	3037605	Condition	sec_man	546:5:14676:14682	3037417	0	True				
ANR	3037606	Identifier	sec_man		3037417	0					
ANR	3037607	CompoundStatement		62:2:1535:1594	3037417	1					
ANR	3037608	IdentifierDeclStatement	KeyCache * tmp_kt = sec_man -> session_cache ;	549:2:14812:14854	3037417	0	True				
ANR	3037609	IdentifierDecl	* tmp_kt = sec_man -> session_cache		3037417	0					
ANR	3037610	IdentifierDeclType	KeyCache *		3037417	0					
ANR	3037611	Identifier	tmp_kt		3037417	1					
ANR	3037612	AssignmentExpression	* tmp_kt = sec_man -> session_cache		3037417	2		=			
ANR	3037613	Identifier	tmp_kt		3037417	0					
ANR	3037614	PtrMemberAccess	sec_man -> session_cache		3037417	1					
ANR	3037615	Identifier	sec_man		3037417	0					
ANR	3037616	Identifier	session_cache		3037417	1					
ANR	3037617	IdentifierDeclStatement	"HashTable < MyString , MyString > * tmp_cm = sec_man -> command_map ;"	550:2:14858:14917	3037417	1	True				
ANR	3037618	IdentifierDecl	* tmp_cm = sec_man -> command_map		3037417	0					
ANR	3037619	IdentifierDeclType	"HashTable < MyString , MyString > *"		3037417	0					
ANR	3037620	Identifier	tmp_cm		3037417	1					
ANR	3037621	AssignmentExpression	* tmp_cm = sec_man -> command_map		3037417	2		=			
ANR	3037622	Identifier	tmp_cm		3037417	0					
ANR	3037623	PtrMemberAccess	sec_man -> command_map		3037417	1					
ANR	3037624	Identifier	sec_man		3037417	0					
ANR	3037625	Identifier	command_map		3037417	1					
ANR	3037626	Statement	delete	552:2:14922:14927	3037417	2	True				
ANR	3037627	ExpressionStatement	sec_man	552:9:14929:14936	3037417	3	True				
ANR	3037628	Identifier	sec_man		3037417	0					
ANR	3037629	Statement	delete	553:2:14940:14945	3037417	4	True				
ANR	3037630	ExpressionStatement	tmp_kt	553:9:14947:14953	3037417	5	True				
ANR	3037631	Identifier	tmp_kt		3037417	0					
ANR	3037632	Statement	delete	554:2:14957:14962	3037417	6	True				
ANR	3037633	ExpressionStatement	tmp_cm	554:9:14964:14970	3037417	7	True				
ANR	3037634	Identifier	tmp_cm		3037417	0					
ANR	3037635	IfStatement	if ( dc_rsock )		3037417	9					
ANR	3037636	Condition	dc_rsock	558:5:15036:15043	3037417	0	True				
ANR	3037637	Identifier	dc_rsock		3037417	0					
ANR	3037638	CompoundStatement		70:16:1724:1724	3037417	1					
ANR	3037639	Statement	delete	559:2:15051:15056	3037417	0	True				
ANR	3037640	ExpressionStatement	dc_rsock	559:9:15058:15066	3037417	1	True				
ANR	3037641	Identifier	dc_rsock		3037417	0					
ANR	3037642	IfStatement	if ( dc_ssock )		3037417	10					
ANR	3037643	Condition	dc_ssock	561:5:15076:15083	3037417	0	True				
ANR	3037644	Identifier	dc_ssock		3037417	0					
ANR	3037645	CompoundStatement		73:16:1764:1764	3037417	1					
ANR	3037646	Statement	delete	562:2:15091:15096	3037417	0	True				
ANR	3037647	ExpressionStatement	dc_ssock	562:9:15098:15106	3037417	1	True				
ANR	3037648	Identifier	dc_ssock		3037417	0					
ANR	3037649	IfStatement	if ( reapTable != NULL )		3037417	11					
ANR	3037650	Condition	reapTable != NULL	565:5:15117:15133	3037417	0	True				
ANR	3037651	EqualityExpression	reapTable != NULL		3037417	0		!=			
ANR	3037652	Identifier	reapTable		3037417	0					
ANR	3037653	Identifier	NULL		3037417	1					
ANR	3037654	CompoundStatement		78:1:1814:1814	3037417	1					
ANR	3037655	ForStatement	for ( i = 0 ; i < maxReap ; i ++ )		3037417	0					
ANR	3037656	ForInit	i = 0 ;	567:7:15146:15149	3037417	0	True				
ANR	3037657	AssignmentExpression	i = 0		3037417	0		=			
ANR	3037658	Identifier	i		3037417	0					
ANR	3037659	PrimaryExpression	0		3037417	1					
ANR	3037660	Condition	i < maxReap	567:11:15150:15158	3037417	1	True				
ANR	3037661	RelationalExpression	i < maxReap		3037417	0		<			
ANR	3037662	Identifier	i		3037417	0					
ANR	3037663	Identifier	maxReap		3037417	1					
ANR	3037664	PostIncDecOperationExpression	i ++	567:21:15160:15162	3037417	2	True				
ANR	3037665	Identifier	i		3037417	0					
ANR	3037666	IncDec	++		3037417	1					
ANR	3037667	CompoundStatement		79:26:1842:1842	3037417	3					
ANR	3037668	ExpressionStatement	free ( reapTable [ i ] . reap_descrip )	568:3:15170:15203	3037417	0	True				
ANR	3037669	CallExpression	free ( reapTable [ i ] . reap_descrip )		3037417	0					
ANR	3037670	Callee	free		3037417	0					
ANR	3037671	Identifier	free		3037417	0					
ANR	3037672	ArgumentList	reapTable [ i ] . reap_descrip		3037417	1					
ANR	3037673	Argument	reapTable [ i ] . reap_descrip		3037417	0					
ANR	3037674	MemberAccess	reapTable [ i ] . reap_descrip		3037417	0					
ANR	3037675	ArrayIndexing	reapTable [ i ]		3037417	0					
ANR	3037676	Identifier	reapTable		3037417	0					
ANR	3037677	Identifier	i		3037417	1					
ANR	3037678	Identifier	reap_descrip		3037417	1					
ANR	3037679	ExpressionStatement	free ( reapTable [ i ] . handler_descrip )	569:3:15208:15244	3037417	1	True				
ANR	3037680	CallExpression	free ( reapTable [ i ] . handler_descrip )		3037417	0					
ANR	3037681	Callee	free		3037417	0					
ANR	3037682	Identifier	free		3037417	0					
ANR	3037683	ArgumentList	reapTable [ i ] . handler_descrip		3037417	1					
ANR	3037684	Argument	reapTable [ i ] . handler_descrip		3037417	0					
ANR	3037685	MemberAccess	reapTable [ i ] . handler_descrip		3037417	0					
ANR	3037686	ArrayIndexing	reapTable [ i ]		3037417	0					
ANR	3037687	Identifier	reapTable		3037417	0					
ANR	3037688	Identifier	i		3037417	1					
ANR	3037689	Identifier	handler_descrip		3037417	1					
ANR	3037690	Statement	delete	571:2:15252:15257	3037417	1	True				
ANR	3037691	Statement	[	571:9:15259:15259	3037417	2	True				
ANR	3037692	Statement	]	571:10:15260:15260	3037417	3	True				
ANR	3037693	ExpressionStatement	reapTable	571:11:15261:15270	3037417	4	True				
ANR	3037694	Identifier	reapTable		3037417	0					
ANR	3037695	IdentifierDeclStatement	PidEntry * pid_entry ;	575:1:15340:15359	3037417	12	True				
ANR	3037696	IdentifierDecl	* pid_entry		3037417	0					
ANR	3037697	IdentifierDeclType	PidEntry *		3037417	0					
ANR	3037698	Identifier	pid_entry		3037417	1					
ANR	3037699	ExpressionStatement	pidTable -> startIterations ( )	576:1:15362:15389	3037417	13	True				
ANR	3037700	CallExpression	pidTable -> startIterations ( )		3037417	0					
ANR	3037701	Callee	pidTable -> startIterations		3037417	0					
ANR	3037702	PtrMemberAccess	pidTable -> startIterations		3037417	0					
ANR	3037703	Identifier	pidTable		3037417	0					
ANR	3037704	Identifier	startIterations		3037417	1					
ANR	3037705	ArgumentList			3037417	1					
ANR	3037706	WhileStatement	while ( pidTable -> iterate ( pid_entry ) )		3037417	14					
ANR	3037707	Condition	pidTable -> iterate ( pid_entry )	577:8:15399:15426	3037417	0	True				
ANR	3037708	CallExpression	pidTable -> iterate ( pid_entry )		3037417	0					
ANR	3037709	Callee	pidTable -> iterate		3037417	0					
ANR	3037710	PtrMemberAccess	pidTable -> iterate		3037417	0					
ANR	3037711	Identifier	pidTable		3037417	0					
ANR	3037712	Identifier	iterate		3037417	1					
ANR	3037713	ArgumentList	pid_entry		3037417	1					
ANR	3037714	Argument	pid_entry		3037417	0					
ANR	3037715	Identifier	pid_entry		3037417	0					
ANR	3037716	CompoundStatement		90:1:2107:2107	3037417	1					
ANR	3037717	IfStatement	if ( pid_entry )		3037417	0					
ANR	3037718	Condition	pid_entry	579:7:15439:15447	3037417	0	True				
ANR	3037719	Identifier	pid_entry		3037417	0					
ANR	3037720	Statement	delete	579:19:15451:15456	3037417	1	True				
ANR	3037721	ExpressionStatement	pid_entry	579:26:15458:15467	3037417	1	True				
ANR	3037722	Identifier	pid_entry		3037417	0					
ANR	3037723	Statement	delete	581:1:15473:15478	3037417	15	True				
ANR	3037724	ExpressionStatement	pidTable	581:8:15480:15488	3037417	16	True				
ANR	3037725	Identifier	pidTable		3037417	0					
ANR	3037726	IfStatement	if ( m_proc_family != NULL )		3037417	17					
ANR	3037727	Condition	m_proc_family != NULL	583:5:15496:15516	3037417	0	True				
ANR	3037728	EqualityExpression	m_proc_family != NULL		3037417	0		!=			
ANR	3037729	Identifier	m_proc_family		3037417	0					
ANR	3037730	Identifier	NULL		3037417	1					
ANR	3037731	CompoundStatement		95:28:2196:2196	3037417	1					
ANR	3037732	Statement	delete	584:2:15523:15528	3037417	0	True				
ANR	3037733	ExpressionStatement	m_proc_family	584:9:15530:15543	3037417	1	True				
ANR	3037734	Identifier	m_proc_family		3037417	0					
ANR	3037735	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		3037417	18					
ANR	3037736	ForInit	i = 0 ;	587:6:15555:15558	3037417	0	True				
ANR	3037737	AssignmentExpression	i = 0		3037417	0		=			
ANR	3037738	Identifier	i		3037417	0					
ANR	3037739	PrimaryExpression	0		3037417	1					
ANR	3037740	Condition	i < LAST_PERM	587:11:15560:15570	3037417	1	True				
ANR	3037741	RelationalExpression	i < LAST_PERM		3037417	0		<			
ANR	3037742	Identifier	i		3037417	0					
ANR	3037743	Identifier	LAST_PERM		3037417	1					
ANR	3037744	PostIncDecOperationExpression	i ++	587:24:15573:15575	3037417	2	True				
ANR	3037745	Identifier	i		3037417	0					
ANR	3037746	IncDec	++		3037417	1					
ANR	3037747	CompoundStatement		99:30:2256:2256	3037417	3					
ANR	3037748	IfStatement	if ( SettableAttrsLists [ i ] )		3037417	0					
ANR	3037749	Condition	SettableAttrsLists [ i ]	588:6:15587:15607	3037417	0	True				
ANR	3037750	ArrayIndexing	SettableAttrsLists [ i ]		3037417	0					
ANR	3037751	Identifier	SettableAttrsLists		3037417	0					
ANR	3037752	Identifier	i		3037417	1					
ANR	3037753	CompoundStatement		100:30:2288:2288	3037417	1					
ANR	3037754	Statement	delete	589:3:15616:15621	3037417	0	True				
ANR	3037755	ExpressionStatement	SettableAttrsLists [ i ]	589:10:15623:15644	3037417	1	True				
ANR	3037756	ArrayIndexing	SettableAttrsLists [ i ]		3037417	0					
ANR	3037757	Identifier	SettableAttrsLists		3037417	0					
ANR	3037758	Identifier	i		3037417	1					
ANR	3037759	IfStatement	if ( pipeTable )		3037417	19					
ANR	3037760	Condition	pipeTable	593:5:15659:15667	3037417	0	True				
ANR	3037761	Identifier	pipeTable		3037417	0					
ANR	3037762	CompoundStatement		105:17:2348:2348	3037417	1					
ANR	3037763	Statement	delete	594:2:15675:15680	3037417	0	True				
ANR	3037764	ExpressionStatement	pipeTable	594:8:15681:15694	3037417	1	True				
ANR	3037765	Identifier	pipeTable		3037417	0					
ANR	3037766	IfStatement	if ( pipeHandleTable )		3037417	20					
ANR	3037767	Condition	pipeHandleTable	597:5:15705:15719	3037417	0	True				
ANR	3037768	Identifier	pipeHandleTable		3037417	0					
ANR	3037769	CompoundStatement		109:22:2399:2399	3037417	1					
ANR	3037770	Statement	delete	598:2:15726:15731	3037417	0	True				
ANR	3037771	ExpressionStatement	pipeHandleTable	598:9:15733:15748	3037417	1	True				
ANR	3037772	Identifier	pipeHandleTable		3037417	0					
ANR	3037773	ExpressionStatement	t . CancelAllTimers ( )	601:1:15755:15774	3037417	21	True				
ANR	3037774	CallExpression	t . CancelAllTimers ( )		3037417	0					
ANR	3037775	Callee	t . CancelAllTimers		3037417	0					
ANR	3037776	MemberAccess	t . CancelAllTimers		3037417	0					
ANR	3037777	Identifier	t		3037417	0					
ANR	3037778	Identifier	CancelAllTimers		3037417	1					
ANR	3037779	ArgumentList			3037417	1					
ANR	3037780	IfStatement	if ( _cookie_data )		3037417	22					
ANR	3037781	Condition	_cookie_data	603:5:15782:15793	3037417	0	True				
ANR	3037782	Identifier	_cookie_data		3037417	0					
ANR	3037783	CompoundStatement		115:19:2473:2473	3037417	1					
ANR	3037784	ExpressionStatement	free ( _cookie_data )	604:2:15800:15818	3037417	0	True				
ANR	3037785	CallExpression	free ( _cookie_data )		3037417	0					
ANR	3037786	Callee	free		3037417	0					
ANR	3037787	Identifier	free		3037417	0					
ANR	3037788	ArgumentList	_cookie_data		3037417	1					
ANR	3037789	Argument	_cookie_data		3037417	0					
ANR	3037790	Identifier	_cookie_data		3037417	0					
ANR	3037791	IfStatement	if ( _cookie_data_old )		3037417	23					
ANR	3037792	Condition	_cookie_data_old	606:5:15828:15843	3037417	0	True				
ANR	3037793	Identifier	_cookie_data_old		3037417	0					
ANR	3037794	CompoundStatement		118:23:2523:2523	3037417	1					
ANR	3037795	ExpressionStatement	free ( _cookie_data_old )	607:2:15850:15872	3037417	0	True				
ANR	3037796	CallExpression	free ( _cookie_data_old )		3037417	0					
ANR	3037797	Callee	free		3037417	0					
ANR	3037798	Identifier	free		3037417	0					
ANR	3037799	ArgumentList	_cookie_data_old		3037417	1					
ANR	3037800	Argument	_cookie_data_old		3037417	0					
ANR	3037801	Identifier	_cookie_data_old		3037417	0					
ANR	3037802	IfStatement	if ( soap )		3037417	24					
ANR	3037803	Condition	soap	611:5:15905:15908	3037417	0	True				
ANR	3037804	Identifier	soap		3037417	0					
ANR	3037805	CompoundStatement		123:12:2589:2589	3037417	1					
ANR	3037806	ExpressionStatement	dc_soap_free ( soap )	612:2:15916:15934	3037417	0	True				
ANR	3037807	CallExpression	dc_soap_free ( soap )		3037417	0					
ANR	3037808	Callee	dc_soap_free		3037417	0					
ANR	3037809	Identifier	dc_soap_free		3037417	0					
ANR	3037810	ArgumentList	soap		3037417	1					
ANR	3037811	Argument	soap		3037417	0					
ANR	3037812	Identifier	soap		3037417	0					
ANR	3037813	ExpressionStatement	soap = NULL	613:2:15938:15949	3037417	1	True				
ANR	3037814	AssignmentExpression	soap = NULL		3037417	0		=			
ANR	3037815	Identifier	soap		3037417	0					
ANR	3037816	Identifier	NULL		3037417	1					
ANR	3037817	IfStatement	if ( localAdFile )		3037417	25					
ANR	3037818	Condition	localAdFile	617:4:15966:15976	3037417	0	True				
ANR	3037819	Identifier	localAdFile		3037417	0					
ANR	3037820	CompoundStatement		129:17:2656:2656	3037417	1					
ANR	3037821	ExpressionStatement	free ( localAdFile )	618:2:15983:16000	3037417	0	True				
ANR	3037822	CallExpression	free ( localAdFile )		3037417	0					
ANR	3037823	Callee	free		3037417	0					
ANR	3037824	Identifier	free		3037417	0					
ANR	3037825	ArgumentList	localAdFile		3037417	1					
ANR	3037826	Argument	localAdFile		3037417	0					
ANR	3037827	Identifier	localAdFile		3037417	0					
ANR	3037828	ExpressionStatement	localAdFile = NULL	619:2:16004:16022	3037417	1	True				
ANR	3037829	AssignmentExpression	localAdFile = NULL		3037417	0		=			
ANR	3037830	Identifier	localAdFile		3037417	0					
ANR	3037831	Identifier	NULL		3037417	1					
ANR	3037832	IfStatement	if ( m_collector_list )		3037417	26					
ANR	3037833	Condition	m_collector_list	622:5:16034:16049	3037417	0	True				
ANR	3037834	Identifier	m_collector_list		3037417	0					
ANR	3037835	CompoundStatement		134:23:2729:2729	3037417	1					
ANR	3037836	Statement	delete	623:2:16056:16061	3037417	0	True				
ANR	3037837	ExpressionStatement	m_collector_list	623:9:16063:16079	3037417	1	True				
ANR	3037838	Identifier	m_collector_list		3037417	0					
ANR	3037839	ExpressionStatement	m_collector_list = NULL	624:2:16083:16106	3037417	2	True				
ANR	3037840	AssignmentExpression	m_collector_list = NULL		3037417	0		=			
ANR	3037841	Identifier	m_collector_list		3037417	0					
ANR	3037842	Identifier	NULL		3037417	1					
ANR	3037843	IfStatement	if ( m_private_network_name )		3037417	27					
ANR	3037844	Condition	m_private_network_name	627:5:16117:16138	3037417	0	True				
ANR	3037845	Identifier	m_private_network_name		3037417	0					
ANR	3037846	CompoundStatement		139:29:2818:2818	3037417	1					
ANR	3037847	ExpressionStatement	free ( m_private_network_name )	628:2:16145:16173	3037417	0	True				
ANR	3037848	CallExpression	free ( m_private_network_name )		3037417	0					
ANR	3037849	Callee	free		3037417	0					
ANR	3037850	Identifier	free		3037417	0					
ANR	3037851	ArgumentList	m_private_network_name		3037417	1					
ANR	3037852	Argument	m_private_network_name		3037417	0					
ANR	3037853	Identifier	m_private_network_name		3037417	0					
ANR	3037854	ExpressionStatement	m_private_network_name = NULL	629:2:16177:16206	3037417	1	True				
ANR	3037855	AssignmentExpression	m_private_network_name = NULL		3037417	0		=			
ANR	3037856	Identifier	m_private_network_name		3037417	0					
ANR	3037857	Identifier	NULL		3037417	1					
ANR	3037858	Identifier	DaemonCore :: ~DaemonCore		3037417	1					
ANR	3037859	ParameterList			3037417	2					
ANR	3037860	CFGEntryNode	ENTRY		3037417		True				
ANR	3037861	CFGExitNode	EXIT		3037417		True				
ANR	3037862	Symbol	comTable [ i ] . command_descrip		3037417						
ANR	3037863	Symbol	sigTable [ i ] . sig_descrip		3037417						
ANR	3037864	Symbol	sec_man -> command_map		3037417						
ANR	3037865	Symbol	sec_man		3037417						
ANR	3037866	Symbol	( * sockTable ) [ i ] . handler_descrip		3037417						
ANR	3037867	Symbol	( * sockTable ) [ i ] . iosock_descrip		3037417						
ANR	3037868	Symbol	pidTable -> iterate		3037417						
ANR	3037869	Symbol	LAST_PERM		3037417						
ANR	3037870	Symbol	NULL		3037417						
ANR	3037871	Symbol	pid_entry		3037417						
ANR	3037872	Symbol	sockTable		3037417						
ANR	3037873	Symbol	reapTable [ i ] . reap_descrip		3037417						
ANR	3037874	Symbol	m_ccb_listeners		3037417						
ANR	3037875	Symbol	sec_man -> session_cache		3037417						
ANR	3037876	Symbol	* sec_man		3037417						
ANR	3037877	Symbol	tmp_cm		3037417						
ANR	3037878	Symbol	reapTable		3037417						
ANR	3037879	Symbol	comTable [ i ] . handler_descrip		3037417						
ANR	3037880	Symbol	tmp_kt		3037417						
ANR	3037881	Symbol	soap		3037417						
ANR	3037882	Symbol	* async_pipe		3037417						
ANR	3037883	Symbol	localAdFile		3037417						
ANR	3037884	Symbol	sigTable [ i ] . handler_descrip		3037417						
ANR	3037885	Symbol	maxSig		3037417						
ANR	3037886	Symbol	* pidTable		3037417						
ANR	3037887	Symbol	_cookie_data_old		3037417						
ANR	3037888	Symbol	* * sockTable		3037417						
ANR	3037889	Symbol	dc_ssock		3037417						
ANR	3037890	Symbol	pipeHandleTable		3037417						
ANR	3037891	Symbol	* comTable		3037417						
ANR	3037892	Symbol	* SettableAttrsLists		3037417						
ANR	3037893	Symbol	_cookie_data		3037417						
ANR	3037894	Symbol	sigTable		3037417						
ANR	3037895	Symbol	maxCommand		3037417						
ANR	3037896	Symbol	m_proc_family		3037417						
ANR	3037897	Symbol	async_pipe		3037417						
ANR	3037898	Symbol	pidTable		3037417						
ANR	3037899	Symbol	dc_rsock		3037417						
ANR	3037900	Symbol	m_private_network_name		3037417						
ANR	3037901	Symbol	nSock		3037417						
ANR	3037902	Symbol	i		3037417						
ANR	3037903	Symbol	maxReap		3037417						
ANR	3037904	Symbol	pipeTable		3037417						
ANR	3037905	Symbol	m_collector_list		3037417						
ANR	3037906	Symbol	* i		3037417						
ANR	3037907	Symbol	* sigTable		3037417						
ANR	3037908	Symbol	* sockTable		3037417						
ANR	3037909	Symbol	t		3037417						
ANR	3037910	Symbol	m_shared_port_endpoint		3037417						
ANR	3037911	Symbol	reapTable [ i ] . handler_descrip		3037417						
ANR	3037912	Symbol	SettableAttrsLists		3037417						
ANR	3037913	Symbol	comTable		3037417						
ANR	3037914	Symbol	* reapTable		3037417						
ANR	3037915	Function	DaemonCore :: Set_Default_Reaper	633:0:16214:16297							
ANR	3037916	FunctionDef	DaemonCore :: Set_Default_Reaper (int reaper_id)		3037915	0					
ANR	3037917	CompoundStatement		634:0:16267:16297	3037915	0					
ANR	3037918	ExpressionStatement	defaultReaper = reaper_id	635:1:16270:16295	3037915	0	True				
ANR	3037919	AssignmentExpression	defaultReaper = reaper_id		3037915	0		=			
ANR	3037920	Identifier	defaultReaper		3037915	0					
ANR	3037921	Identifier	reaper_id		3037915	1					
ANR	3037922	ReturnType	void		3037915	1					
ANR	3037923	Identifier	DaemonCore :: Set_Default_Reaper		3037915	2					
ANR	3037924	ParameterList	int reaper_id		3037915	3					
ANR	3037925	Parameter	int reaper_id	633:37:16251:16263	3037915	0	True				
ANR	3037926	ParameterType	int		3037915	0					
ANR	3037927	Identifier	reaper_id		3037915	1					
ANR	3037928	CFGEntryNode	ENTRY		3037915		True				
ANR	3037929	CFGExitNode	EXIT		3037915		True				
ANR	3037930	Symbol	reaper_id		3037915						
ANR	3037931	Symbol	defaultReaper		3037915						
ANR	3037932	Function	DaemonCore :: Register_Command	643:0:16575:17006							
ANR	3037933	FunctionDef	"DaemonCore :: Register_Command (int command , const char * com_descrip , CommandHandler handler , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload)"		3037932	0					
ANR	3037934	CompoundStatement		647:0:16809:17006	3037932	0					
ANR	3037935	ReturnStatement	"return ( Register_Command ( command , com_descrip , handler , ( CommandHandlercpp ) NULL , handler_descrip , s , perm , dprintf_flag , FALSE , force_authentication , wait_for_payload ) ) ;"	648:1:16812:17004	3037932	0	True				
ANR	3037936	CallExpression	"Register_Command ( command , com_descrip , handler , ( CommandHandlercpp ) NULL , handler_descrip , s , perm , dprintf_flag , FALSE , force_authentication , wait_for_payload )"		3037932	0					
ANR	3037937	Callee	Register_Command		3037932	0					
ANR	3037938	Identifier	Register_Command		3037932	0					
ANR	3037939	ArgumentList	command		3037932	1					
ANR	3037940	Argument	command		3037932	0					
ANR	3037941	Identifier	command		3037932	0					
ANR	3037942	Argument	com_descrip		3037932	1					
ANR	3037943	Identifier	com_descrip		3037932	0					
ANR	3037944	Argument	handler		3037932	2					
ANR	3037945	Identifier	handler		3037932	0					
ANR	3037946	Argument	( CommandHandlercpp ) NULL		3037932	3					
ANR	3037947	CastExpression	( CommandHandlercpp ) NULL		3037932	0					
ANR	3037948	CastTarget	CommandHandlercpp		3037932	0					
ANR	3037949	Identifier	NULL		3037932	1					
ANR	3037950	Argument	handler_descrip		3037932	4					
ANR	3037951	Identifier	handler_descrip		3037932	0					
ANR	3037952	Argument	s		3037932	5					
ANR	3037953	Identifier	s		3037932	0					
ANR	3037954	Argument	perm		3037932	6					
ANR	3037955	Identifier	perm		3037932	0					
ANR	3037956	Argument	dprintf_flag		3037932	7					
ANR	3037957	Identifier	dprintf_flag		3037932	0					
ANR	3037958	Argument	FALSE		3037932	8					
ANR	3037959	Identifier	FALSE		3037932	0					
ANR	3037960	Argument	force_authentication		3037932	9					
ANR	3037961	Identifier	force_authentication		3037932	0					
ANR	3037962	Argument	wait_for_payload		3037932	10					
ANR	3037963	Identifier	wait_for_payload		3037932	0					
ANR	3037964	ReturnType	int		3037932	1					
ANR	3037965	Identifier	DaemonCore :: Register_Command		3037932	2					
ANR	3037966	ParameterList	"int command , const char * com_descrip , CommandHandler handler , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload"		3037932	3					
ANR	3037967	Parameter	int command	643:33:16608:16618	3037932	0	True				
ANR	3037968	ParameterType	int		3037932	0					
ANR	3037969	Identifier	command		3037932	1					
ANR	3037970	Parameter	const char * com_descrip	643:46:16621:16643	3037932	1	True				
ANR	3037971	ParameterType	const char *		3037932	0					
ANR	3037972	Identifier	com_descrip		3037932	1					
ANR	3037973	Parameter	CommandHandler handler	644:4:16650:16671	3037932	2	True				
ANR	3037974	ParameterType	CommandHandler		3037932	0					
ANR	3037975	Identifier	handler		3037932	1					
ANR	3037976	Parameter	const char * handler_descrip	644:28:16674:16700	3037932	3	True				
ANR	3037977	ParameterType	const char *		3037932	0					
ANR	3037978	Identifier	handler_descrip		3037932	1					
ANR	3037979	Parameter	Service * s	644:57:16703:16712	3037932	4	True				
ANR	3037980	ParameterType	Service *		3037932	0					
ANR	3037981	Identifier	s		3037932	1					
ANR	3037982	Parameter	DCpermission perm	645:4:16719:16735	3037932	5	True				
ANR	3037983	ParameterType	DCpermission		3037932	0					
ANR	3037984	Identifier	perm		3037932	1					
ANR	3037985	Parameter	int dprintf_flag	645:23:16738:16753	3037932	6	True				
ANR	3037986	ParameterType	int		3037932	0					
ANR	3037987	Identifier	dprintf_flag		3037932	1					
ANR	3037988	Parameter	bool force_authentication	645:41:16756:16780	3037932	7	True				
ANR	3037989	ParameterType	bool		3037932	0					
ANR	3037990	Identifier	force_authentication		3037932	1					
ANR	3037991	Parameter	int wait_for_payload	646:4:16787:16806	3037932	8	True				
ANR	3037992	ParameterType	int		3037932	0					
ANR	3037993	Identifier	wait_for_payload		3037932	1					
ANR	3037994	CFGEntryNode	ENTRY		3037932		True				
ANR	3037995	CFGExitNode	EXIT		3037932		True				
ANR	3037996	Symbol	handler		3037932						
ANR	3037997	Symbol	s		3037932						
ANR	3037998	Symbol	NULL		3037932						
ANR	3037999	Symbol	handler_descrip		3037932						
ANR	3038000	Symbol	perm		3037932						
ANR	3038001	Symbol	force_authentication		3037932						
ANR	3038002	Symbol	FALSE		3037932						
ANR	3038003	Symbol	dprintf_flag		3037932						
ANR	3038004	Symbol	Register_Command		3037932						
ANR	3038005	Symbol	com_descrip		3037932						
ANR	3038006	Symbol	command		3037932						
ANR	3038007	Symbol	wait_for_payload		3037932						
ANR	3038008	Function	DaemonCore :: Register_Command	654:0:17009:17422							
ANR	3038009	FunctionDef	"DaemonCore :: Register_Command (int command , const char * com_descrip , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload)"		3038008	0					
ANR	3038010	CompoundStatement		658:0:17249:17422	3038008	0					
ANR	3038011	ReturnStatement	"return ( Register_Command ( command , com_descrip , NULL , handlercpp , handler_descrip , s , perm , dprintf_flag , TRUE , force_authentication , wait_for_payload ) ) ;"	659:1:17252:17420	3038008	0	True				
ANR	3038012	CallExpression	"Register_Command ( command , com_descrip , NULL , handlercpp , handler_descrip , s , perm , dprintf_flag , TRUE , force_authentication , wait_for_payload )"		3038008	0					
ANR	3038013	Callee	Register_Command		3038008	0					
ANR	3038014	Identifier	Register_Command		3038008	0					
ANR	3038015	ArgumentList	command		3038008	1					
ANR	3038016	Argument	command		3038008	0					
ANR	3038017	Identifier	command		3038008	0					
ANR	3038018	Argument	com_descrip		3038008	1					
ANR	3038019	Identifier	com_descrip		3038008	0					
ANR	3038020	Argument	NULL		3038008	2					
ANR	3038021	Identifier	NULL		3038008	0					
ANR	3038022	Argument	handlercpp		3038008	3					
ANR	3038023	Identifier	handlercpp		3038008	0					
ANR	3038024	Argument	handler_descrip		3038008	4					
ANR	3038025	Identifier	handler_descrip		3038008	0					
ANR	3038026	Argument	s		3038008	5					
ANR	3038027	Identifier	s		3038008	0					
ANR	3038028	Argument	perm		3038008	6					
ANR	3038029	Identifier	perm		3038008	0					
ANR	3038030	Argument	dprintf_flag		3038008	7					
ANR	3038031	Identifier	dprintf_flag		3038008	0					
ANR	3038032	Argument	TRUE		3038008	8					
ANR	3038033	Identifier	TRUE		3038008	0					
ANR	3038034	Argument	force_authentication		3038008	9					
ANR	3038035	Identifier	force_authentication		3038008	0					
ANR	3038036	Argument	wait_for_payload		3038008	10					
ANR	3038037	Identifier	wait_for_payload		3038008	0					
ANR	3038038	ReturnType	int		3038008	1					
ANR	3038039	Identifier	DaemonCore :: Register_Command		3038008	2					
ANR	3038040	ParameterList	"int command , const char * com_descrip , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload"		3038008	3					
ANR	3038041	Parameter	int command	654:33:17042:17052	3038008	0	True				
ANR	3038042	ParameterType	int		3038008	0					
ANR	3038043	Identifier	command		3038008	1					
ANR	3038044	Parameter	const char * com_descrip	654:46:17055:17077	3038008	1	True				
ANR	3038045	ParameterType	const char *		3038008	0					
ANR	3038046	Identifier	com_descrip		3038008	1					
ANR	3038047	Parameter	CommandHandlercpp handlercpp	655:4:17084:17111	3038008	2	True				
ANR	3038048	ParameterType	CommandHandlercpp		3038008	0					
ANR	3038049	Identifier	handlercpp		3038008	1					
ANR	3038050	Parameter	const char * handler_descrip	655:34:17114:17140	3038008	3	True				
ANR	3038051	ParameterType	const char *		3038008	0					
ANR	3038052	Identifier	handler_descrip		3038008	1					
ANR	3038053	Parameter	Service * s	656:4:17147:17156	3038008	4	True				
ANR	3038054	ParameterType	Service *		3038008	0					
ANR	3038055	Identifier	s		3038008	1					
ANR	3038056	Parameter	DCpermission perm	656:16:17159:17175	3038008	5	True				
ANR	3038057	ParameterType	DCpermission		3038008	0					
ANR	3038058	Identifier	perm		3038008	1					
ANR	3038059	Parameter	int dprintf_flag	656:35:17178:17193	3038008	6	True				
ANR	3038060	ParameterType	int		3038008	0					
ANR	3038061	Identifier	dprintf_flag		3038008	1					
ANR	3038062	Parameter	bool force_authentication	657:4:17200:17224	3038008	7	True				
ANR	3038063	ParameterType	bool		3038008	0					
ANR	3038064	Identifier	force_authentication		3038008	1					
ANR	3038065	Parameter	int wait_for_payload	657:31:17227:17246	3038008	8	True				
ANR	3038066	ParameterType	int		3038008	0					
ANR	3038067	Identifier	wait_for_payload		3038008	1					
ANR	3038068	CFGEntryNode	ENTRY		3038008		True				
ANR	3038069	CFGExitNode	EXIT		3038008		True				
ANR	3038070	Symbol	s		3038008						
ANR	3038071	Symbol	NULL		3038008						
ANR	3038072	Symbol	handler_descrip		3038008						
ANR	3038073	Symbol	perm		3038008						
ANR	3038074	Symbol	force_authentication		3038008						
ANR	3038075	Symbol	TRUE		3038008						
ANR	3038076	Symbol	dprintf_flag		3038008						
ANR	3038077	Symbol	Register_Command		3038008						
ANR	3038078	Symbol	com_descrip		3038008						
ANR	3038079	Symbol	handlercpp		3038008						
ANR	3038080	Symbol	command		3038008						
ANR	3038081	Symbol	wait_for_payload		3038008						
ANR	3038082	Function	DaemonCore :: Register_CommandWithPayload	664:0:17425:17867							
ANR	3038083	FunctionDef	"DaemonCore :: Register_CommandWithPayload (int command , const char * com_descrip , CommandHandler handler , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload)"		3038082	0					
ANR	3038084	CompoundStatement		668:0:17670:17867	3038082	0					
ANR	3038085	ReturnStatement	"return ( Register_Command ( command , com_descrip , handler , ( CommandHandlercpp ) NULL , handler_descrip , s , perm , dprintf_flag , FALSE , force_authentication , wait_for_payload ) ) ;"	669:1:17673:17865	3038082	0	True				
ANR	3038086	CallExpression	"Register_Command ( command , com_descrip , handler , ( CommandHandlercpp ) NULL , handler_descrip , s , perm , dprintf_flag , FALSE , force_authentication , wait_for_payload )"		3038082	0					
ANR	3038087	Callee	Register_Command		3038082	0					
ANR	3038088	Identifier	Register_Command		3038082	0					
ANR	3038089	ArgumentList	command		3038082	1					
ANR	3038090	Argument	command		3038082	0					
ANR	3038091	Identifier	command		3038082	0					
ANR	3038092	Argument	com_descrip		3038082	1					
ANR	3038093	Identifier	com_descrip		3038082	0					
ANR	3038094	Argument	handler		3038082	2					
ANR	3038095	Identifier	handler		3038082	0					
ANR	3038096	Argument	( CommandHandlercpp ) NULL		3038082	3					
ANR	3038097	CastExpression	( CommandHandlercpp ) NULL		3038082	0					
ANR	3038098	CastTarget	CommandHandlercpp		3038082	0					
ANR	3038099	Identifier	NULL		3038082	1					
ANR	3038100	Argument	handler_descrip		3038082	4					
ANR	3038101	Identifier	handler_descrip		3038082	0					
ANR	3038102	Argument	s		3038082	5					
ANR	3038103	Identifier	s		3038082	0					
ANR	3038104	Argument	perm		3038082	6					
ANR	3038105	Identifier	perm		3038082	0					
ANR	3038106	Argument	dprintf_flag		3038082	7					
ANR	3038107	Identifier	dprintf_flag		3038082	0					
ANR	3038108	Argument	FALSE		3038082	8					
ANR	3038109	Identifier	FALSE		3038082	0					
ANR	3038110	Argument	force_authentication		3038082	9					
ANR	3038111	Identifier	force_authentication		3038082	0					
ANR	3038112	Argument	wait_for_payload		3038082	10					
ANR	3038113	Identifier	wait_for_payload		3038082	0					
ANR	3038114	ReturnType	int		3038082	1					
ANR	3038115	Identifier	DaemonCore :: Register_CommandWithPayload		3038082	2					
ANR	3038116	ParameterList	"int command , const char * com_descrip , CommandHandler handler , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload"		3038082	3					
ANR	3038117	Parameter	int command	664:44:17469:17479	3038082	0	True				
ANR	3038118	ParameterType	int		3038082	0					
ANR	3038119	Identifier	command		3038082	1					
ANR	3038120	Parameter	const char * com_descrip	664:57:17482:17504	3038082	1	True				
ANR	3038121	ParameterType	const char *		3038082	0					
ANR	3038122	Identifier	com_descrip		3038082	1					
ANR	3038123	Parameter	CommandHandler handler	665:4:17511:17532	3038082	2	True				
ANR	3038124	ParameterType	CommandHandler		3038082	0					
ANR	3038125	Identifier	handler		3038082	1					
ANR	3038126	Parameter	const char * handler_descrip	665:28:17535:17561	3038082	3	True				
ANR	3038127	ParameterType	const char *		3038082	0					
ANR	3038128	Identifier	handler_descrip		3038082	1					
ANR	3038129	Parameter	Service * s	665:57:17564:17573	3038082	4	True				
ANR	3038130	ParameterType	Service *		3038082	0					
ANR	3038131	Identifier	s		3038082	1					
ANR	3038132	Parameter	DCpermission perm	666:4:17580:17596	3038082	5	True				
ANR	3038133	ParameterType	DCpermission		3038082	0					
ANR	3038134	Identifier	perm		3038082	1					
ANR	3038135	Parameter	int dprintf_flag	666:23:17599:17614	3038082	6	True				
ANR	3038136	ParameterType	int		3038082	0					
ANR	3038137	Identifier	dprintf_flag		3038082	1					
ANR	3038138	Parameter	bool force_authentication	666:41:17617:17641	3038082	7	True				
ANR	3038139	ParameterType	bool		3038082	0					
ANR	3038140	Identifier	force_authentication		3038082	1					
ANR	3038141	Parameter	int wait_for_payload	667:4:17648:17667	3038082	8	True				
ANR	3038142	ParameterType	int		3038082	0					
ANR	3038143	Identifier	wait_for_payload		3038082	1					
ANR	3038144	CFGEntryNode	ENTRY		3038082		True				
ANR	3038145	CFGExitNode	EXIT		3038082		True				
ANR	3038146	Symbol	handler		3038082						
ANR	3038147	Symbol	s		3038082						
ANR	3038148	Symbol	NULL		3038082						
ANR	3038149	Symbol	handler_descrip		3038082						
ANR	3038150	Symbol	perm		3038082						
ANR	3038151	Symbol	force_authentication		3038082						
ANR	3038152	Symbol	FALSE		3038082						
ANR	3038153	Symbol	dprintf_flag		3038082						
ANR	3038154	Symbol	Register_Command		3038082						
ANR	3038155	Symbol	com_descrip		3038082						
ANR	3038156	Symbol	command		3038082						
ANR	3038157	Symbol	wait_for_payload		3038082						
ANR	3038158	Function	DaemonCore :: Register_CommandWithPayload	675:0:17870:18294							
ANR	3038159	FunctionDef	"DaemonCore :: Register_CommandWithPayload (int command , const char * com_descrip , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload)"		3038158	0					
ANR	3038160	CompoundStatement		679:0:18121:18294	3038158	0					
ANR	3038161	ReturnStatement	"return ( Register_Command ( command , com_descrip , NULL , handlercpp , handler_descrip , s , perm , dprintf_flag , TRUE , force_authentication , wait_for_payload ) ) ;"	680:1:18124:18292	3038158	0	True				
ANR	3038162	CallExpression	"Register_Command ( command , com_descrip , NULL , handlercpp , handler_descrip , s , perm , dprintf_flag , TRUE , force_authentication , wait_for_payload )"		3038158	0					
ANR	3038163	Callee	Register_Command		3038158	0					
ANR	3038164	Identifier	Register_Command		3038158	0					
ANR	3038165	ArgumentList	command		3038158	1					
ANR	3038166	Argument	command		3038158	0					
ANR	3038167	Identifier	command		3038158	0					
ANR	3038168	Argument	com_descrip		3038158	1					
ANR	3038169	Identifier	com_descrip		3038158	0					
ANR	3038170	Argument	NULL		3038158	2					
ANR	3038171	Identifier	NULL		3038158	0					
ANR	3038172	Argument	handlercpp		3038158	3					
ANR	3038173	Identifier	handlercpp		3038158	0					
ANR	3038174	Argument	handler_descrip		3038158	4					
ANR	3038175	Identifier	handler_descrip		3038158	0					
ANR	3038176	Argument	s		3038158	5					
ANR	3038177	Identifier	s		3038158	0					
ANR	3038178	Argument	perm		3038158	6					
ANR	3038179	Identifier	perm		3038158	0					
ANR	3038180	Argument	dprintf_flag		3038158	7					
ANR	3038181	Identifier	dprintf_flag		3038158	0					
ANR	3038182	Argument	TRUE		3038158	8					
ANR	3038183	Identifier	TRUE		3038158	0					
ANR	3038184	Argument	force_authentication		3038158	9					
ANR	3038185	Identifier	force_authentication		3038158	0					
ANR	3038186	Argument	wait_for_payload		3038158	10					
ANR	3038187	Identifier	wait_for_payload		3038158	0					
ANR	3038188	ReturnType	int		3038158	1					
ANR	3038189	Identifier	DaemonCore :: Register_CommandWithPayload		3038158	2					
ANR	3038190	ParameterList	"int command , const char * com_descrip , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload"		3038158	3					
ANR	3038191	Parameter	int command	675:44:17914:17924	3038158	0	True				
ANR	3038192	ParameterType	int		3038158	0					
ANR	3038193	Identifier	command		3038158	1					
ANR	3038194	Parameter	const char * com_descrip	675:57:17927:17949	3038158	1	True				
ANR	3038195	ParameterType	const char *		3038158	0					
ANR	3038196	Identifier	com_descrip		3038158	1					
ANR	3038197	Parameter	CommandHandlercpp handlercpp	676:4:17956:17983	3038158	2	True				
ANR	3038198	ParameterType	CommandHandlercpp		3038158	0					
ANR	3038199	Identifier	handlercpp		3038158	1					
ANR	3038200	Parameter	const char * handler_descrip	676:34:17986:18012	3038158	3	True				
ANR	3038201	ParameterType	const char *		3038158	0					
ANR	3038202	Identifier	handler_descrip		3038158	1					
ANR	3038203	Parameter	Service * s	677:4:18019:18028	3038158	4	True				
ANR	3038204	ParameterType	Service *		3038158	0					
ANR	3038205	Identifier	s		3038158	1					
ANR	3038206	Parameter	DCpermission perm	677:16:18031:18047	3038158	5	True				
ANR	3038207	ParameterType	DCpermission		3038158	0					
ANR	3038208	Identifier	perm		3038158	1					
ANR	3038209	Parameter	int dprintf_flag	677:35:18050:18065	3038158	6	True				
ANR	3038210	ParameterType	int		3038158	0					
ANR	3038211	Identifier	dprintf_flag		3038158	1					
ANR	3038212	Parameter	bool force_authentication	678:4:18072:18096	3038158	7	True				
ANR	3038213	ParameterType	bool		3038158	0					
ANR	3038214	Identifier	force_authentication		3038158	1					
ANR	3038215	Parameter	int wait_for_payload	678:31:18099:18118	3038158	8	True				
ANR	3038216	ParameterType	int		3038158	0					
ANR	3038217	Identifier	wait_for_payload		3038158	1					
ANR	3038218	CFGEntryNode	ENTRY		3038158		True				
ANR	3038219	CFGExitNode	EXIT		3038158		True				
ANR	3038220	Symbol	s		3038158						
ANR	3038221	Symbol	NULL		3038158						
ANR	3038222	Symbol	handler_descrip		3038158						
ANR	3038223	Symbol	perm		3038158						
ANR	3038224	Symbol	force_authentication		3038158						
ANR	3038225	Symbol	TRUE		3038158						
ANR	3038226	Symbol	dprintf_flag		3038158						
ANR	3038227	Symbol	Register_Command		3038158						
ANR	3038228	Symbol	com_descrip		3038158						
ANR	3038229	Symbol	handlercpp		3038158						
ANR	3038230	Symbol	command		3038158						
ANR	3038231	Symbol	wait_for_payload		3038158						
ANR	3038232	Function	DaemonCore :: Register_Signal	685:0:18297:18557							
ANR	3038233	FunctionDef	"DaemonCore :: Register_Signal (int sig , const char * sig_descrip , SignalHandler handler , const char * handler_descrip , Service * s)"		3038232	0					
ANR	3038234	CompoundStatement		688:0:18435:18557	3038232	0					
ANR	3038235	ReturnStatement	"return ( Register_Signal ( sig , sig_descrip , handler , ( SignalHandlercpp ) NULL , handler_descrip , s , FALSE ) ) ;"	689:1:18438:18555	3038232	0	True				
ANR	3038236	CallExpression	"Register_Signal ( sig , sig_descrip , handler , ( SignalHandlercpp ) NULL , handler_descrip , s , FALSE )"		3038232	0					
ANR	3038237	Callee	Register_Signal		3038232	0					
ANR	3038238	Identifier	Register_Signal		3038232	0					
ANR	3038239	ArgumentList	sig		3038232	1					
ANR	3038240	Argument	sig		3038232	0					
ANR	3038241	Identifier	sig		3038232	0					
ANR	3038242	Argument	sig_descrip		3038232	1					
ANR	3038243	Identifier	sig_descrip		3038232	0					
ANR	3038244	Argument	handler		3038232	2					
ANR	3038245	Identifier	handler		3038232	0					
ANR	3038246	Argument	( SignalHandlercpp ) NULL		3038232	3					
ANR	3038247	CastExpression	( SignalHandlercpp ) NULL		3038232	0					
ANR	3038248	CastTarget	SignalHandlercpp		3038232	0					
ANR	3038249	Identifier	NULL		3038232	1					
ANR	3038250	Argument	handler_descrip		3038232	4					
ANR	3038251	Identifier	handler_descrip		3038232	0					
ANR	3038252	Argument	s		3038232	5					
ANR	3038253	Identifier	s		3038232	0					
ANR	3038254	Argument	FALSE		3038232	6					
ANR	3038255	Identifier	FALSE		3038232	0					
ANR	3038256	ReturnType	int		3038232	1					
ANR	3038257	Identifier	DaemonCore :: Register_Signal		3038232	2					
ANR	3038258	ParameterList	"int sig , const char * sig_descrip , SignalHandler handler , const char * handler_descrip , Service * s"		3038232	3					
ANR	3038259	Parameter	int sig	685:32:18329:18335	3038232	0	True				
ANR	3038260	ParameterType	int		3038232	0					
ANR	3038261	Identifier	sig		3038232	1					
ANR	3038262	Parameter	const char * sig_descrip	685:41:18338:18360	3038232	1	True				
ANR	3038263	ParameterType	const char *		3038232	0					
ANR	3038264	Identifier	sig_descrip		3038232	1					
ANR	3038265	Parameter	SignalHandler handler	686:4:18367:18387	3038232	2	True				
ANR	3038266	ParameterType	SignalHandler		3038232	0					
ANR	3038267	Identifier	handler		3038232	1					
ANR	3038268	Parameter	const char * handler_descrip	686:27:18390:18416	3038232	3	True				
ANR	3038269	ParameterType	const char *		3038232	0					
ANR	3038270	Identifier	handler_descrip		3038232	1					
ANR	3038271	Parameter	Service * s	687:4:18423:18432	3038232	4	True				
ANR	3038272	ParameterType	Service *		3038232	0					
ANR	3038273	Identifier	s		3038232	1					
ANR	3038274	CFGEntryNode	ENTRY		3038232		True				
ANR	3038275	CFGExitNode	EXIT		3038232		True				
ANR	3038276	Symbol	sig		3038232						
ANR	3038277	Symbol	handler		3038232						
ANR	3038278	Symbol	s		3038232						
ANR	3038279	Symbol	NULL		3038232						
ANR	3038280	Symbol	handler_descrip		3038232						
ANR	3038281	Symbol	Register_Signal		3038232						
ANR	3038282	Symbol	sig_descrip		3038232						
ANR	3038283	Symbol	FALSE		3038232						
ANR	3038284	Function	DaemonCore :: Register_Signal	694:0:18560:18803							
ANR	3038285	FunctionDef	"DaemonCore :: Register_Signal (int sig , const char * sig_descrip , SignalHandlercpp handlercpp , const char * handler_descrip , Service * s)"		3038284	0					
ANR	3038286	CompoundStatement		697:0:18704:18803	3038284	0					
ANR	3038287	ReturnStatement	"return ( Register_Signal ( sig , sig_descrip , NULL , handlercpp , handler_descrip , s , TRUE ) ) ;"	698:1:18707:18801	3038284	0	True				
ANR	3038288	CallExpression	"Register_Signal ( sig , sig_descrip , NULL , handlercpp , handler_descrip , s , TRUE )"		3038284	0					
ANR	3038289	Callee	Register_Signal		3038284	0					
ANR	3038290	Identifier	Register_Signal		3038284	0					
ANR	3038291	ArgumentList	sig		3038284	1					
ANR	3038292	Argument	sig		3038284	0					
ANR	3038293	Identifier	sig		3038284	0					
ANR	3038294	Argument	sig_descrip		3038284	1					
ANR	3038295	Identifier	sig_descrip		3038284	0					
ANR	3038296	Argument	NULL		3038284	2					
ANR	3038297	Identifier	NULL		3038284	0					
ANR	3038298	Argument	handlercpp		3038284	3					
ANR	3038299	Identifier	handlercpp		3038284	0					
ANR	3038300	Argument	handler_descrip		3038284	4					
ANR	3038301	Identifier	handler_descrip		3038284	0					
ANR	3038302	Argument	s		3038284	5					
ANR	3038303	Identifier	s		3038284	0					
ANR	3038304	Argument	TRUE		3038284	6					
ANR	3038305	Identifier	TRUE		3038284	0					
ANR	3038306	ReturnType	int		3038284	1					
ANR	3038307	Identifier	DaemonCore :: Register_Signal		3038284	2					
ANR	3038308	ParameterList	"int sig , const char * sig_descrip , SignalHandlercpp handlercpp , const char * handler_descrip , Service * s"		3038284	3					
ANR	3038309	Parameter	int sig	694:32:18592:18598	3038284	0	True				
ANR	3038310	ParameterType	int		3038284	0					
ANR	3038311	Identifier	sig		3038284	1					
ANR	3038312	Parameter	const char * sig_descrip	694:41:18601:18623	3038284	1	True				
ANR	3038313	ParameterType	const char *		3038284	0					
ANR	3038314	Identifier	sig_descrip		3038284	1					
ANR	3038315	Parameter	SignalHandlercpp handlercpp	695:4:18630:18656	3038284	2	True				
ANR	3038316	ParameterType	SignalHandlercpp		3038284	0					
ANR	3038317	Identifier	handlercpp		3038284	1					
ANR	3038318	Parameter	const char * handler_descrip	695:33:18659:18685	3038284	3	True				
ANR	3038319	ParameterType	const char *		3038284	0					
ANR	3038320	Identifier	handler_descrip		3038284	1					
ANR	3038321	Parameter	Service * s	696:4:18692:18701	3038284	4	True				
ANR	3038322	ParameterType	Service *		3038284	0					
ANR	3038323	Identifier	s		3038284	1					
ANR	3038324	CFGEntryNode	ENTRY		3038284		True				
ANR	3038325	CFGExitNode	EXIT		3038284		True				
ANR	3038326	Symbol	sig		3038284						
ANR	3038327	Symbol	s		3038284						
ANR	3038328	Symbol	NULL		3038284						
ANR	3038329	Symbol	handler_descrip		3038284						
ANR	3038330	Symbol	Register_Signal		3038284						
ANR	3038331	Symbol	sig_descrip		3038284						
ANR	3038332	Symbol	TRUE		3038284						
ANR	3038333	Symbol	handlercpp		3038284						
ANR	3038334	Function	DaemonCore :: RegisteredSocketCount	702:0:18806:18892							
ANR	3038335	FunctionDef	DaemonCore :: RegisteredSocketCount ()		3038334	0					
ANR	3038336	CompoundStatement		703:0:18846:18892	3038334	0					
ANR	3038337	ReturnStatement	return nRegisteredSocks + nPendingSockets ;	704:1:18849:18890	3038334	0	True				
ANR	3038338	AdditiveExpression	nRegisteredSocks + nPendingSockets		3038334	0		+			
ANR	3038339	Identifier	nRegisteredSocks		3038334	0					
ANR	3038340	Identifier	nPendingSockets		3038334	1					
ANR	3038341	ReturnType	int		3038334	1					
ANR	3038342	Identifier	DaemonCore :: RegisteredSocketCount		3038334	2					
ANR	3038343	ParameterList			3038334	3					
ANR	3038344	CFGEntryNode	ENTRY		3038334		True				
ANR	3038345	CFGExitNode	EXIT		3038334		True				
ANR	3038346	Symbol	nPendingSockets		3038334						
ANR	3038347	Symbol	nRegisteredSocks		3038334						
ANR	3038348	Function	DaemonCore :: FileDescriptorSafetyLimit	707:0:18895:19860							
ANR	3038349	FunctionDef	DaemonCore :: FileDescriptorSafetyLimit ()		3038348	0					
ANR	3038350	CompoundStatement		708:0:18939:19860	3038348	0					
ANR	3038351	IfStatement	if ( file_descriptor_safety_limit == 0 )		3038348	0					
ANR	3038352	Condition	file_descriptor_safety_limit == 0	709:5:18946:18978	3038348	0	True				
ANR	3038353	EqualityExpression	file_descriptor_safety_limit == 0		3038348	0		==			
ANR	3038354	Identifier	file_descriptor_safety_limit		3038348	0					
ANR	3038355	PrimaryExpression	0		3038348	1					
ANR	3038356	CompoundStatement		15:2:634:692	3038348	1					
ANR	3038357	IdentifierDeclStatement	int file_descriptor_max = Selector :: fd_select_size ( ) ;	712:2:19082:19134	3038348	0	True				
ANR	3038358	IdentifierDecl	file_descriptor_max = Selector :: fd_select_size ( )		3038348	0					
ANR	3038359	IdentifierDeclType	int		3038348	0					
ANR	3038360	Identifier	file_descriptor_max		3038348	1					
ANR	3038361	AssignmentExpression	file_descriptor_max = Selector :: fd_select_size ( )		3038348	2		=			
ANR	3038362	Identifier	file_descriptor_max		3038348	0					
ANR	3038363	CallExpression	Selector :: fd_select_size ( )		3038348	1					
ANR	3038364	Callee	Selector :: fd_select_size		3038348	0					
ANR	3038365	Identifier	Selector :: fd_select_size		3038348	0					
ANR	3038366	ArgumentList			3038348	1					
ANR	3038367	ExpressionStatement	file_descriptor_safety_limit = file_descriptor_max - file_descriptor_max / 5	714:2:19182:19256	3038348	1	True				
ANR	3038368	AssignmentExpression	file_descriptor_safety_limit = file_descriptor_max - file_descriptor_max / 5		3038348	0		=			
ANR	3038369	Identifier	file_descriptor_safety_limit		3038348	0					
ANR	3038370	AdditiveExpression	file_descriptor_max - file_descriptor_max / 5		3038348	1		-			
ANR	3038371	Identifier	file_descriptor_max		3038348	0					
ANR	3038372	MultiplicativeExpression	file_descriptor_max / 5		3038348	1		/			
ANR	3038373	Identifier	file_descriptor_max		3038348	0					
ANR	3038374	PrimaryExpression	5		3038348	1					
ANR	3038375	IfStatement	if ( file_descriptor_safety_limit < MIN_FILE_DESCRIPTOR_SAFETY_LIMIT )		3038348	2					
ANR	3038376	Condition	file_descriptor_safety_limit < MIN_FILE_DESCRIPTOR_SAFETY_LIMIT	715:6:19264:19326	3038348	0	True				
ANR	3038377	RelationalExpression	file_descriptor_safety_limit < MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		3038348	0		<			
ANR	3038378	Identifier	file_descriptor_safety_limit		3038348	0					
ANR	3038379	Identifier	MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		3038348	1					
ANR	3038380	CompoundStatement		8:72:390:390	3038348	1					
ANR	3038381	ExpressionStatement	file_descriptor_safety_limit = MIN_FILE_DESCRIPTOR_SAFETY_LIMIT	719:3:19502:19565	3038348	0	True				
ANR	3038382	AssignmentExpression	file_descriptor_safety_limit = MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		3038348	0		=			
ANR	3038383	Identifier	file_descriptor_safety_limit		3038348	0					
ANR	3038384	Identifier	MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		3038348	1					
ANR	3038385	IdentifierDeclStatement	"int p = param_integer ( ""NETWORK_MAX_PENDING_CONNECTS"" , 0 ) ;"	722:2:19574:19632	3038348	3	True				
ANR	3038386	IdentifierDecl	"p = param_integer ( ""NETWORK_MAX_PENDING_CONNECTS"" , 0 )"		3038348	0					
ANR	3038387	IdentifierDeclType	int		3038348	0					
ANR	3038388	Identifier	p		3038348	1					
ANR	3038389	AssignmentExpression	"p = param_integer ( ""NETWORK_MAX_PENDING_CONNECTS"" , 0 )"		3038348	2		=			
ANR	3038390	Identifier	p		3038348	0					
ANR	3038391	CallExpression	"param_integer ( ""NETWORK_MAX_PENDING_CONNECTS"" , 0 )"		3038348	1					
ANR	3038392	Callee	param_integer		3038348	0					
ANR	3038393	Identifier	param_integer		3038348	0					
ANR	3038394	ArgumentList	"""NETWORK_MAX_PENDING_CONNECTS"""		3038348	1					
ANR	3038395	Argument	"""NETWORK_MAX_PENDING_CONNECTS"""		3038348	0					
ANR	3038396	PrimaryExpression	"""NETWORK_MAX_PENDING_CONNECTS"""		3038348	0					
ANR	3038397	Argument	0		3038348	1					
ANR	3038398	PrimaryExpression	0		3038348	0					
ANR	3038399	IfStatement	if ( p != 0 )		3038348	4					
ANR	3038400	Condition	p != 0	723:6:19640:19643	3038348	0	True				
ANR	3038401	EqualityExpression	p != 0		3038348	0		!=			
ANR	3038402	Identifier	p		3038348	0					
ANR	3038403	PrimaryExpression	0		3038348	1					
ANR	3038404	CompoundStatement		16:13:707:707	3038348	1					
ANR	3038405	ExpressionStatement	file_descriptor_safety_limit = p	724:3:19652:19684	3038348	0	True				
ANR	3038406	AssignmentExpression	file_descriptor_safety_limit = p		3038348	0		=			
ANR	3038407	Identifier	file_descriptor_safety_limit		3038348	0					
ANR	3038408	Identifier	p		3038348	1					
ANR	3038409	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""File descriptor limits: max %d, safe %d\\n"" , file_descriptor_max , file_descriptor_safety_limit )"	727:2:19693:19816	3038348	5	True				
ANR	3038410	CallExpression	"dprintf ( D_FULLDEBUG , ""File descriptor limits: max %d, safe %d\\n"" , file_descriptor_max , file_descriptor_safety_limit )"		3038348	0					
ANR	3038411	Callee	dprintf		3038348	0					
ANR	3038412	Identifier	dprintf		3038348	0					
ANR	3038413	ArgumentList	D_FULLDEBUG		3038348	1					
ANR	3038414	Argument	D_FULLDEBUG		3038348	0					
ANR	3038415	Identifier	D_FULLDEBUG		3038348	0					
ANR	3038416	Argument	"""File descriptor limits: max %d, safe %d\\n"""		3038348	1					
ANR	3038417	PrimaryExpression	"""File descriptor limits: max %d, safe %d\\n"""		3038348	0					
ANR	3038418	Argument	file_descriptor_max		3038348	2					
ANR	3038419	Identifier	file_descriptor_max		3038348	0					
ANR	3038420	Argument	file_descriptor_safety_limit		3038348	3					
ANR	3038421	Identifier	file_descriptor_safety_limit		3038348	0					
ANR	3038422	ReturnStatement	return file_descriptor_safety_limit ;	732:1:19823:19858	3038348	1	True				
ANR	3038423	Identifier	file_descriptor_safety_limit		3038348	0					
ANR	3038424	ReturnType	int		3038348	1					
ANR	3038425	Identifier	DaemonCore :: FileDescriptorSafetyLimit		3038348	2					
ANR	3038426	ParameterList			3038348	3					
ANR	3038427	CFGEntryNode	ENTRY		3038348		True				
ANR	3038428	CFGExitNode	EXIT		3038348		True				
ANR	3038429	Symbol	Selector :: fd_select_size		3038348						
ANR	3038430	Symbol	file_descriptor_max		3038348						
ANR	3038431	Symbol	p		3038348						
ANR	3038432	Symbol	MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		3038348						
ANR	3038433	Symbol	param_integer		3038348						
ANR	3038434	Symbol	D_FULLDEBUG		3038348						
ANR	3038435	Symbol	file_descriptor_safety_limit		3038348						
ANR	3038436	Function	DaemonCore :: TooManyRegisteredSockets	735:0:19863:21726							
ANR	3038437	FunctionDef	"DaemonCore :: TooManyRegisteredSockets (int fd , MyString * msg , int num_fds)"		3038436	0					
ANR	3038438	CompoundStatement		736:0:19939:21726	3038436	0					
ANR	3038439	IdentifierDeclStatement	int registered_socket_count = RegisteredSocketCount ( ) ;	737:1:19942:19995	3038436	0	True				
ANR	3038440	IdentifierDecl	registered_socket_count = RegisteredSocketCount ( )		3038436	0					
ANR	3038441	IdentifierDeclType	int		3038436	0					
ANR	3038442	Identifier	registered_socket_count		3038436	1					
ANR	3038443	AssignmentExpression	registered_socket_count = RegisteredSocketCount ( )		3038436	2		=			
ANR	3038444	Identifier	registered_socket_count		3038436	0					
ANR	3038445	CallExpression	RegisteredSocketCount ( )		3038436	1					
ANR	3038446	Callee	RegisteredSocketCount		3038436	0					
ANR	3038447	Identifier	RegisteredSocketCount		3038436	0					
ANR	3038448	ArgumentList			3038436	1					
ANR	3038449	IdentifierDeclStatement	int fds_used = registered_socket_count ;	738:1:19998:20036	3038436	1	True				
ANR	3038450	IdentifierDecl	fds_used = registered_socket_count		3038436	0					
ANR	3038451	IdentifierDeclType	int		3038436	0					
ANR	3038452	Identifier	fds_used		3038436	1					
ANR	3038453	AssignmentExpression	fds_used = registered_socket_count		3038436	2		=			
ANR	3038454	Identifier	registered_socket_count		3038436	0					
ANR	3038455	Identifier	registered_socket_count		3038436	1					
ANR	3038456	IdentifierDeclStatement	int safety_limit = FileDescriptorSafetyLimit ( ) ;	739:1:20039:20085	3038436	2	True				
ANR	3038457	IdentifierDecl	safety_limit = FileDescriptorSafetyLimit ( )		3038436	0					
ANR	3038458	IdentifierDeclType	int		3038436	0					
ANR	3038459	Identifier	safety_limit		3038436	1					
ANR	3038460	AssignmentExpression	safety_limit = FileDescriptorSafetyLimit ( )		3038436	2		=			
ANR	3038461	Identifier	safety_limit		3038436	0					
ANR	3038462	CallExpression	FileDescriptorSafetyLimit ( )		3038436	1					
ANR	3038463	Callee	FileDescriptorSafetyLimit		3038436	0					
ANR	3038464	Identifier	FileDescriptorSafetyLimit		3038436	0					
ANR	3038465	ArgumentList			3038436	1					
ANR	3038466	IfStatement	if ( safety_limit < 0 )		3038436	3					
ANR	3038467	Condition	safety_limit < 0	741:5:20093:20108	3038436	0	True				
ANR	3038468	RelationalExpression	safety_limit < 0		3038436	0		<			
ANR	3038469	Identifier	safety_limit		3038436	0					
ANR	3038470	PrimaryExpression	0		3038436	1					
ANR	3038471	CompoundStatement		6:24:172:172	3038436	1					
ANR	3038472	ReturnStatement	return false ;	743:2:20132:20144	3038436	0	True				
ANR	3038473	Identifier	false		3038436	0					
ANR	3038474	IfStatement	if ( fd == - 1 )		3038436	4					
ANR	3038475	Condition	fd == - 1	750:5:20324:20331	3038436	0	True				
ANR	3038476	EqualityExpression	fd == - 1		3038436	0		==			
ANR	3038477	Identifier	fd		3038436	0					
ANR	3038478	UnaryOperationExpression	- 1		3038436	1					
ANR	3038479	UnaryOperator	-		3038436	0					
ANR	3038480	PrimaryExpression	1		3038436	1					
ANR	3038481	CompoundStatement		15:15:394:394	3038436	1					
ANR	3038482	ExpressionStatement	"fd = safe_open_wrapper_follow ( NULL_FILE , O_RDONLY )"	752:2:20400:20452	3038436	0	True				
ANR	3038483	AssignmentExpression	"fd = safe_open_wrapper_follow ( NULL_FILE , O_RDONLY )"		3038436	0		=			
ANR	3038484	Identifier	fd		3038436	0					
ANR	3038485	CallExpression	"safe_open_wrapper_follow ( NULL_FILE , O_RDONLY )"		3038436	1					
ANR	3038486	Callee	safe_open_wrapper_follow		3038436	0					
ANR	3038487	Identifier	safe_open_wrapper_follow		3038436	0					
ANR	3038488	ArgumentList	NULL_FILE		3038436	1					
ANR	3038489	Argument	NULL_FILE		3038436	0					
ANR	3038490	Identifier	NULL_FILE		3038436	0					
ANR	3038491	Argument	O_RDONLY		3038436	1					
ANR	3038492	Identifier	O_RDONLY		3038436	0					
ANR	3038493	IfStatement	if ( fd >= 0 )		3038436	1					
ANR	3038494	Condition	fd >= 0	753:7:20461:20467	3038436	0	True				
ANR	3038495	RelationalExpression	fd >= 0		3038436	0		>=			
ANR	3038496	Identifier	fd		3038436	0					
ANR	3038497	PrimaryExpression	0		3038436	1					
ANR	3038498	CompoundStatement		18:17:531:531	3038436	1					
ANR	3038499	ExpressionStatement	close ( fd )	754:3:20476:20487	3038436	0	True				
ANR	3038500	CallExpression	close ( fd )		3038436	0					
ANR	3038501	Callee	close		3038436	0					
ANR	3038502	Identifier	close		3038436	0					
ANR	3038503	ArgumentList	fd		3038436	1					
ANR	3038504	Argument	fd		3038436	0					
ANR	3038505	Identifier	fd		3038436	0					
ANR	3038506	IfStatement	if ( fd > fds_used )		3038436	5					
ANR	3038507	Condition	fd > fds_used	757:5:20501:20513	3038436	0	True				
ANR	3038508	RelationalExpression	fd > fds_used		3038436	0		>			
ANR	3038509	Identifier	fd		3038436	0					
ANR	3038510	Identifier	fds_used		3038436	1					
ANR	3038511	CompoundStatement		22:21:577:577	3038436	1					
ANR	3038512	ExpressionStatement	fds_used = fd	759:2:20579:20592	3038436	0	True				
ANR	3038513	AssignmentExpression	fds_used = fd		3038436	0		=			
ANR	3038514	Identifier	fds_used		3038436	0					
ANR	3038515	Identifier	fd		3038436	1					
ANR	3038516	IfStatement	if ( num_fds + fds_used > file_descriptor_safety_limit )		3038436	6					
ANR	3038517	Condition	num_fds + fds_used > file_descriptor_safety_limit	763:5:20610:20658	3038436	0	True				
ANR	3038518	RelationalExpression	num_fds + fds_used > file_descriptor_safety_limit		3038436	0		>			
ANR	3038519	AdditiveExpression	num_fds + fds_used		3038436	0		+			
ANR	3038520	Identifier	num_fds		3038436	0					
ANR	3038521	Identifier	fds_used		3038436	1					
ANR	3038522	Identifier	file_descriptor_safety_limit		3038436	1					
ANR	3038523	CompoundStatement		28:57:722:722	3038436	1					
ANR	3038524	IfStatement	if ( registered_socket_count < MIN_REGISTERED_SOCKET_SAFETY_LIMIT )		3038436	0					
ANR	3038525	Condition	registered_socket_count < MIN_REGISTERED_SOCKET_SAFETY_LIMIT	764:6:20670:20729	3038436	0	True				
ANR	3038526	RelationalExpression	registered_socket_count < MIN_REGISTERED_SOCKET_SAFETY_LIMIT		3038436	0		<			
ANR	3038527	Identifier	registered_socket_count		3038436	0					
ANR	3038528	Identifier	MIN_REGISTERED_SOCKET_SAFETY_LIMIT		3038436	1					
ANR	3038529	CompoundStatement		29:69:793:793	3038436	1					
ANR	3038530	IfStatement	if ( msg )		3038436	0					
ANR	3038531	Condition	msg	772:7:21039:21041	3038436	0	True				
ANR	3038532	Identifier	msg		3038436	0					
ANR	3038533	CompoundStatement		37:12:1104:1104	3038436	1					
ANR	3038534	Statement	dprintf	776:4:21199:21205	3038436	0	True				
ANR	3038535	Statement	(	776:11:21206:21206	3038436	1	True				
ANR	3038536	Statement	D_NETWORK	776:12:21207:21215	3038436	2	True				
ANR	3038537	Statement	|	776:21:21216:21216	3038436	3	True				
ANR	3038538	Statement	D_FULLDEBUG	776:22:21217:21227	3038436	4	True				
ANR	3038539	Statement	","	776:33:21228:21228	3038436	5	True				
ANR	3038540	Statement	"""Ignoring file descriptor safety limit (%d), because """	777:6:21236:21289	3038436	6	True				
ANR	3038541	Statement	"""only %d sockets are registered (fd is %d)\\n"""	778:6:21297:21341	3038436	7	True				
ANR	3038542	Statement	","	778:51:21342:21342	3038436	8	True				
ANR	3038543	Statement	file_descriptor_safety_limit	779:6:21350:21377	3038436	9	True				
ANR	3038544	Statement	","	779:34:21378:21378	3038436	10	True				
ANR	3038545	Statement	registered_socket_count	780:6:21386:21408	3038436	11	True				
ANR	3038546	Statement	","	780:29:21409:21409	3038436	12	True				
ANR	3038547	Statement	fd	781:6:21417:21418	3038436	13	True				
ANR	3038548	Statement	)	781:9:21420:21420	3038436	14	True				
ANR	3038549	ExpressionStatement		781:10:21421:21421	3038436	15	True				
ANR	3038550	ReturnStatement	return false ;	783:3:21431:21443	3038436	1	True				
ANR	3038551	Identifier	false		3038436	0					
ANR	3038552	IfStatement	if ( msg )		3038436	1					
ANR	3038553	Condition	msg	785:5:21454:21456	3038436	0	True				
ANR	3038554	Identifier	msg		3038436	0					
ANR	3038555	CompoundStatement		50:10:1519:1519	3038436	1					
ANR	3038556	Statement	msg	786:3:21464:21466	3038436	0	True				
ANR	3038557	Statement	->	786:6:21467:21468	3038436	1	True				
ANR	3038558	Statement	sprintf	786:8:21469:21475	3038436	2	True				
ANR	3038559	Statement	(	786:15:21476:21476	3038436	3	True				
ANR	3038560	Statement	"""file descriptor safety level exceeded: """	786:17:21478:21518	3038436	4	True				
ANR	3038561	Statement	""" limit %d, """	787:17:21537:21549	3038436	5	True				
ANR	3038562	Statement	""" registered socket count %d, """	788:17:21568:21598	3038436	6	True				
ANR	3038563	Statement	""" fd %d"""	789:17:21617:21624	3038436	7	True				
ANR	3038564	Statement	","	789:25:21625:21625	3038436	8	True				
ANR	3038565	Statement	safety_limit	790:17:21644:21655	3038436	9	True				
ANR	3038566	Statement	","	790:29:21656:21656	3038436	10	True				
ANR	3038567	Statement	registered_socket_count	790:31:21658:21680	3038436	11	True				
ANR	3038568	Statement	","	790:54:21681:21681	3038436	12	True				
ANR	3038569	Statement	fd	790:56:21683:21684	3038436	13	True				
ANR	3038570	Statement	)	790:59:21686:21686	3038436	14	True				
ANR	3038571	ExpressionStatement		790:60:21687:21687	3038436	15	True				
ANR	3038572	ReturnStatement	return true ;	792:2:21695:21706	3038436	2	True				
ANR	3038573	Identifier	true		3038436	0					
ANR	3038574	ReturnStatement	return false ;	794:1:21712:21724	3038436	7	True				
ANR	3038575	Identifier	false		3038436	0					
ANR	3038576	ReturnType	bool		3038436	1					
ANR	3038577	Identifier	DaemonCore :: TooManyRegisteredSockets		3038436	2					
ANR	3038578	ParameterList	"int fd , MyString * msg , int num_fds"		3038436	3					
ANR	3038579	Parameter	int fd	735:42:19905:19910	3038436	0	True				
ANR	3038580	ParameterType	int		3038436	0					
ANR	3038581	Identifier	fd		3038436	1					
ANR	3038582	Parameter	MyString * msg	735:49:19912:19924	3038436	1	True				
ANR	3038583	ParameterType	MyString *		3038436	0					
ANR	3038584	Identifier	msg		3038436	1					
ANR	3038585	Parameter	int num_fds	735:63:19926:19936	3038436	2	True				
ANR	3038586	ParameterType	int		3038436	0					
ANR	3038587	Identifier	num_fds		3038436	1					
ANR	3038588	CFGEntryNode	ENTRY		3038436		True				
ANR	3038589	CFGExitNode	EXIT		3038436		True				
ANR	3038590	Symbol	msg		3038436						
ANR	3038591	Symbol	safe_open_wrapper_follow		3038436						
ANR	3038592	Symbol	FileDescriptorSafetyLimit		3038436						
ANR	3038593	Symbol	false		3038436						
ANR	3038594	Symbol	fds_used		3038436						
ANR	3038595	Symbol	MIN_REGISTERED_SOCKET_SAFETY_LIMIT		3038436						
ANR	3038596	Symbol	O_RDONLY		3038436						
ANR	3038597	Symbol	RegisteredSocketCount		3038436						
ANR	3038598	Symbol	NULL_FILE		3038436						
ANR	3038599	Symbol	true		3038436						
ANR	3038600	Symbol	registered_socket_count		3038436						
ANR	3038601	Symbol	file_descriptor_safety_limit		3038436						
ANR	3038602	Symbol	num_fds		3038436						
ANR	3038603	Symbol	fd		3038436						
ANR	3038604	Symbol	safety_limit		3038436						
ANR	3038605	Function	DaemonCore :: Register_Socket	797:0:21729:22030							
ANR	3038606	FunctionDef	"DaemonCore :: Register_Socket (Stream * iosock , const char * iosock_descrip , SocketHandler handler , const char * handler_descrip , Service * s , DCpermission perm)"		3038605	0					
ANR	3038607	CompoundStatement		800:0:21896:22030	3038605	0					
ANR	3038608	ReturnStatement	"return ( Register_Socket ( iosock , iosock_descrip , handler , ( SocketHandlercpp ) NULL , handler_descrip , s , perm , FALSE ) ) ;"	801:1:21899:22028	3038605	0	True				
ANR	3038609	CallExpression	"Register_Socket ( iosock , iosock_descrip , handler , ( SocketHandlercpp ) NULL , handler_descrip , s , perm , FALSE )"		3038605	0					
ANR	3038610	Callee	Register_Socket		3038605	0					
ANR	3038611	Identifier	Register_Socket		3038605	0					
ANR	3038612	ArgumentList	iosock		3038605	1					
ANR	3038613	Argument	iosock		3038605	0					
ANR	3038614	Identifier	iosock		3038605	0					
ANR	3038615	Argument	iosock_descrip		3038605	1					
ANR	3038616	Identifier	iosock_descrip		3038605	0					
ANR	3038617	Argument	handler		3038605	2					
ANR	3038618	Identifier	handler		3038605	0					
ANR	3038619	Argument	( SocketHandlercpp ) NULL		3038605	3					
ANR	3038620	CastExpression	( SocketHandlercpp ) NULL		3038605	0					
ANR	3038621	CastTarget	SocketHandlercpp		3038605	0					
ANR	3038622	Identifier	NULL		3038605	1					
ANR	3038623	Argument	handler_descrip		3038605	4					
ANR	3038624	Identifier	handler_descrip		3038605	0					
ANR	3038625	Argument	s		3038605	5					
ANR	3038626	Identifier	s		3038605	0					
ANR	3038627	Argument	perm		3038605	6					
ANR	3038628	Identifier	perm		3038605	0					
ANR	3038629	Argument	FALSE		3038605	7					
ANR	3038630	Identifier	FALSE		3038605	0					
ANR	3038631	ReturnType	int		3038605	1					
ANR	3038632	Identifier	DaemonCore :: Register_Socket		3038605	2					
ANR	3038633	ParameterList	"Stream * iosock , const char * iosock_descrip , SocketHandler handler , const char * handler_descrip , Service * s , DCpermission perm"		3038605	3					
ANR	3038634	Parameter	Stream * iosock	797:32:21761:21774	3038605	0	True				
ANR	3038635	ParameterType	Stream *		3038605	0					
ANR	3038636	Identifier	iosock		3038605	1					
ANR	3038637	Parameter	const char * iosock_descrip	797:48:21777:21802	3038605	1	True				
ANR	3038638	ParameterType	const char *		3038605	0					
ANR	3038639	Identifier	iosock_descrip		3038605	1					
ANR	3038640	Parameter	SocketHandler handler	798:4:21809:21829	3038605	2	True				
ANR	3038641	ParameterType	SocketHandler		3038605	0					
ANR	3038642	Identifier	handler		3038605	1					
ANR	3038643	Parameter	const char * handler_descrip	798:27:21832:21858	3038605	3	True				
ANR	3038644	ParameterType	const char *		3038605	0					
ANR	3038645	Identifier	handler_descrip		3038605	1					
ANR	3038646	Parameter	Service * s	799:4:21865:21874	3038605	4	True				
ANR	3038647	ParameterType	Service *		3038605	0					
ANR	3038648	Identifier	s		3038605	1					
ANR	3038649	Parameter	DCpermission perm	799:16:21877:21893	3038605	5	True				
ANR	3038650	ParameterType	DCpermission		3038605	0					
ANR	3038651	Identifier	perm		3038605	1					
ANR	3038652	CFGEntryNode	ENTRY		3038605		True				
ANR	3038653	CFGExitNode	EXIT		3038605		True				
ANR	3038654	Symbol	handler		3038605						
ANR	3038655	Symbol	s		3038605						
ANR	3038656	Symbol	NULL		3038605						
ANR	3038657	Symbol	iosock		3038605						
ANR	3038658	Symbol	handler_descrip		3038605						
ANR	3038659	Symbol	perm		3038605						
ANR	3038660	Symbol	iosock_descrip		3038605						
ANR	3038661	Symbol	FALSE		3038605						
ANR	3038662	Symbol	Register_Socket		3038605						
ANR	3038663	Function	DaemonCore :: Register_Socket	806:0:22033:22317							
ANR	3038664	FunctionDef	"DaemonCore :: Register_Socket (Stream * iosock , const char * iosock_descrip , SocketHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm)"		3038663	0					
ANR	3038665	CompoundStatement		809:0:22206:22317	3038663	0					
ANR	3038666	ReturnStatement	"return ( Register_Socket ( iosock , iosock_descrip , NULL , handlercpp , handler_descrip , s , perm , TRUE ) ) ;"	810:1:22209:22315	3038663	0	True				
ANR	3038667	CallExpression	"Register_Socket ( iosock , iosock_descrip , NULL , handlercpp , handler_descrip , s , perm , TRUE )"		3038663	0					
ANR	3038668	Callee	Register_Socket		3038663	0					
ANR	3038669	Identifier	Register_Socket		3038663	0					
ANR	3038670	ArgumentList	iosock		3038663	1					
ANR	3038671	Argument	iosock		3038663	0					
ANR	3038672	Identifier	iosock		3038663	0					
ANR	3038673	Argument	iosock_descrip		3038663	1					
ANR	3038674	Identifier	iosock_descrip		3038663	0					
ANR	3038675	Argument	NULL		3038663	2					
ANR	3038676	Identifier	NULL		3038663	0					
ANR	3038677	Argument	handlercpp		3038663	3					
ANR	3038678	Identifier	handlercpp		3038663	0					
ANR	3038679	Argument	handler_descrip		3038663	4					
ANR	3038680	Identifier	handler_descrip		3038663	0					
ANR	3038681	Argument	s		3038663	5					
ANR	3038682	Identifier	s		3038663	0					
ANR	3038683	Argument	perm		3038663	6					
ANR	3038684	Identifier	perm		3038663	0					
ANR	3038685	Argument	TRUE		3038663	7					
ANR	3038686	Identifier	TRUE		3038663	0					
ANR	3038687	ReturnType	int		3038663	1					
ANR	3038688	Identifier	DaemonCore :: Register_Socket		3038663	2					
ANR	3038689	ParameterList	"Stream * iosock , const char * iosock_descrip , SocketHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm"		3038663	3					
ANR	3038690	Parameter	Stream * iosock	806:32:22065:22078	3038663	0	True				
ANR	3038691	ParameterType	Stream *		3038663	0					
ANR	3038692	Identifier	iosock		3038663	1					
ANR	3038693	Parameter	const char * iosock_descrip	806:48:22081:22106	3038663	1	True				
ANR	3038694	ParameterType	const char *		3038663	0					
ANR	3038695	Identifier	iosock_descrip		3038663	1					
ANR	3038696	Parameter	SocketHandlercpp handlercpp	807:4:22113:22139	3038663	2	True				
ANR	3038697	ParameterType	SocketHandlercpp		3038663	0					
ANR	3038698	Identifier	handlercpp		3038663	1					
ANR	3038699	Parameter	const char * handler_descrip	807:33:22142:22168	3038663	3	True				
ANR	3038700	ParameterType	const char *		3038663	0					
ANR	3038701	Identifier	handler_descrip		3038663	1					
ANR	3038702	Parameter	Service * s	808:4:22175:22184	3038663	4	True				
ANR	3038703	ParameterType	Service *		3038663	0					
ANR	3038704	Identifier	s		3038663	1					
ANR	3038705	Parameter	DCpermission perm	808:16:22187:22203	3038663	5	True				
ANR	3038706	ParameterType	DCpermission		3038663	0					
ANR	3038707	Identifier	perm		3038663	1					
ANR	3038708	CFGEntryNode	ENTRY		3038663		True				
ANR	3038709	CFGExitNode	EXIT		3038663		True				
ANR	3038710	Symbol	s		3038663						
ANR	3038711	Symbol	NULL		3038663						
ANR	3038712	Symbol	iosock		3038663						
ANR	3038713	Symbol	handler_descrip		3038663						
ANR	3038714	Symbol	perm		3038663						
ANR	3038715	Symbol	iosock_descrip		3038663						
ANR	3038716	Symbol	TRUE		3038663						
ANR	3038717	Symbol	Register_Socket		3038663						
ANR	3038718	Symbol	handlercpp		3038663						
ANR	3038719	Function	DaemonCore :: Register_Pipe	814:0:22320:22633							
ANR	3038720	FunctionDef	"DaemonCore :: Register_Pipe (int pipe_end , const char * pipe_descrip , PipeHandler handler , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm)"		3038719	0					
ANR	3038721	CompoundStatement		817:0:22505:22633	3038719	0					
ANR	3038722	ReturnStatement	"return ( Register_Pipe ( pipe_end , pipe_descrip , handler , NULL , handler_descrip , s , handler_type , perm , FALSE ) ) ;"	818:1:22508:22631	3038719	0	True				
ANR	3038723	CallExpression	"Register_Pipe ( pipe_end , pipe_descrip , handler , NULL , handler_descrip , s , handler_type , perm , FALSE )"		3038719	0					
ANR	3038724	Callee	Register_Pipe		3038719	0					
ANR	3038725	Identifier	Register_Pipe		3038719	0					
ANR	3038726	ArgumentList	pipe_end		3038719	1					
ANR	3038727	Argument	pipe_end		3038719	0					
ANR	3038728	Identifier	pipe_end		3038719	0					
ANR	3038729	Argument	pipe_descrip		3038719	1					
ANR	3038730	Identifier	pipe_descrip		3038719	0					
ANR	3038731	Argument	handler		3038719	2					
ANR	3038732	Identifier	handler		3038719	0					
ANR	3038733	Argument	NULL		3038719	3					
ANR	3038734	Identifier	NULL		3038719	0					
ANR	3038735	Argument	handler_descrip		3038719	4					
ANR	3038736	Identifier	handler_descrip		3038719	0					
ANR	3038737	Argument	s		3038719	5					
ANR	3038738	Identifier	s		3038719	0					
ANR	3038739	Argument	handler_type		3038719	6					
ANR	3038740	Identifier	handler_type		3038719	0					
ANR	3038741	Argument	perm		3038719	7					
ANR	3038742	Identifier	perm		3038719	0					
ANR	3038743	Argument	FALSE		3038719	8					
ANR	3038744	Identifier	FALSE		3038719	0					
ANR	3038745	ReturnType	int		3038719	1					
ANR	3038746	Identifier	DaemonCore :: Register_Pipe		3038719	2					
ANR	3038747	ParameterList	"int pipe_end , const char * pipe_descrip , PipeHandler handler , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm"		3038719	3					
ANR	3038748	Parameter	int pipe_end	814:30:22350:22361	3038719	0	True				
ANR	3038749	ParameterType	int		3038719	0					
ANR	3038750	Identifier	pipe_end		3038719	1					
ANR	3038751	Parameter	const char * pipe_descrip	814:44:22364:22387	3038719	1	True				
ANR	3038752	ParameterType	const char *		3038719	0					
ANR	3038753	Identifier	pipe_descrip		3038719	1					
ANR	3038754	Parameter	PipeHandler handler	815:4:22394:22412	3038719	2	True				
ANR	3038755	ParameterType	PipeHandler		3038719	0					
ANR	3038756	Identifier	handler		3038719	1					
ANR	3038757	Parameter	const char * handler_descrip	815:25:22415:22441	3038719	3	True				
ANR	3038758	ParameterType	const char *		3038719	0					
ANR	3038759	Identifier	handler_descrip		3038719	1					
ANR	3038760	Parameter	Service * s	816:4:22448:22457	3038719	4	True				
ANR	3038761	ParameterType	Service *		3038719	0					
ANR	3038762	Identifier	s		3038719	1					
ANR	3038763	Parameter	HandlerType handler_type	816:16:22460:22483	3038719	5	True				
ANR	3038764	ParameterType	HandlerType		3038719	0					
ANR	3038765	Identifier	handler_type		3038719	1					
ANR	3038766	Parameter	DCpermission perm	816:42:22486:22502	3038719	6	True				
ANR	3038767	ParameterType	DCpermission		3038719	0					
ANR	3038768	Identifier	perm		3038719	1					
ANR	3038769	CFGEntryNode	ENTRY		3038719		True				
ANR	3038770	CFGExitNode	EXIT		3038719		True				
ANR	3038771	Symbol	handler		3038719						
ANR	3038772	Symbol	s		3038719						
ANR	3038773	Symbol	NULL		3038719						
ANR	3038774	Symbol	handler_descrip		3038719						
ANR	3038775	Symbol	perm		3038719						
ANR	3038776	Symbol	pipe_descrip		3038719						
ANR	3038777	Symbol	handler_type		3038719						
ANR	3038778	Symbol	pipe_end		3038719						
ANR	3038779	Symbol	FALSE		3038719						
ANR	3038780	Symbol	Register_Pipe		3038719						
ANR	3038781	Function	DaemonCore :: Register_Pipe	823:0:22636:22950							
ANR	3038782	FunctionDef	"DaemonCore :: Register_Pipe (int pipe_end , const char * pipe_descrip , PipeHandlercpp handlercpp , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm)"		3038781	0					
ANR	3038783	CompoundStatement		826:0:22827:22950	3038781	0					
ANR	3038784	ReturnStatement	"return ( Register_Pipe ( pipe_end , pipe_descrip , NULL , handlercpp , handler_descrip , s , handler_type , perm , TRUE ) ) ;"	827:1:22830:22948	3038781	0	True				
ANR	3038785	CallExpression	"Register_Pipe ( pipe_end , pipe_descrip , NULL , handlercpp , handler_descrip , s , handler_type , perm , TRUE )"		3038781	0					
ANR	3038786	Callee	Register_Pipe		3038781	0					
ANR	3038787	Identifier	Register_Pipe		3038781	0					
ANR	3038788	ArgumentList	pipe_end		3038781	1					
ANR	3038789	Argument	pipe_end		3038781	0					
ANR	3038790	Identifier	pipe_end		3038781	0					
ANR	3038791	Argument	pipe_descrip		3038781	1					
ANR	3038792	Identifier	pipe_descrip		3038781	0					
ANR	3038793	Argument	NULL		3038781	2					
ANR	3038794	Identifier	NULL		3038781	0					
ANR	3038795	Argument	handlercpp		3038781	3					
ANR	3038796	Identifier	handlercpp		3038781	0					
ANR	3038797	Argument	handler_descrip		3038781	4					
ANR	3038798	Identifier	handler_descrip		3038781	0					
ANR	3038799	Argument	s		3038781	5					
ANR	3038800	Identifier	s		3038781	0					
ANR	3038801	Argument	handler_type		3038781	6					
ANR	3038802	Identifier	handler_type		3038781	0					
ANR	3038803	Argument	perm		3038781	7					
ANR	3038804	Identifier	perm		3038781	0					
ANR	3038805	Argument	TRUE		3038781	8					
ANR	3038806	Identifier	TRUE		3038781	0					
ANR	3038807	ReturnType	int		3038781	1					
ANR	3038808	Identifier	DaemonCore :: Register_Pipe		3038781	2					
ANR	3038809	ParameterList	"int pipe_end , const char * pipe_descrip , PipeHandlercpp handlercpp , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm"		3038781	3					
ANR	3038810	Parameter	int pipe_end	823:30:22666:22677	3038781	0	True				
ANR	3038811	ParameterType	int		3038781	0					
ANR	3038812	Identifier	pipe_end		3038781	1					
ANR	3038813	Parameter	const char * pipe_descrip	823:44:22680:22703	3038781	1	True				
ANR	3038814	ParameterType	const char *		3038781	0					
ANR	3038815	Identifier	pipe_descrip		3038781	1					
ANR	3038816	Parameter	PipeHandlercpp handlercpp	824:4:22710:22734	3038781	2	True				
ANR	3038817	ParameterType	PipeHandlercpp		3038781	0					
ANR	3038818	Identifier	handlercpp		3038781	1					
ANR	3038819	Parameter	const char * handler_descrip	824:31:22737:22763	3038781	3	True				
ANR	3038820	ParameterType	const char *		3038781	0					
ANR	3038821	Identifier	handler_descrip		3038781	1					
ANR	3038822	Parameter	Service * s	825:4:22770:22779	3038781	4	True				
ANR	3038823	ParameterType	Service *		3038781	0					
ANR	3038824	Identifier	s		3038781	1					
ANR	3038825	Parameter	HandlerType handler_type	825:16:22782:22805	3038781	5	True				
ANR	3038826	ParameterType	HandlerType		3038781	0					
ANR	3038827	Identifier	handler_type		3038781	1					
ANR	3038828	Parameter	DCpermission perm	825:42:22808:22824	3038781	6	True				
ANR	3038829	ParameterType	DCpermission		3038781	0					
ANR	3038830	Identifier	perm		3038781	1					
ANR	3038831	CFGEntryNode	ENTRY		3038781		True				
ANR	3038832	CFGExitNode	EXIT		3038781		True				
ANR	3038833	Symbol	s		3038781						
ANR	3038834	Symbol	NULL		3038781						
ANR	3038835	Symbol	handler_descrip		3038781						
ANR	3038836	Symbol	perm		3038781						
ANR	3038837	Symbol	pipe_descrip		3038781						
ANR	3038838	Symbol	handler_type		3038781						
ANR	3038839	Symbol	pipe_end		3038781						
ANR	3038840	Symbol	TRUE		3038781						
ANR	3038841	Symbol	Register_Pipe		3038781						
ANR	3038842	Symbol	handlercpp		3038781						
ANR	3038843	Function	DaemonCore :: Register_Reaper	831:0:22953:23201							
ANR	3038844	FunctionDef	"DaemonCore :: Register_Reaper (const char * reap_descrip , ReaperHandler handler , const char * handler_descrip , Service * s)"		3038843	0					
ANR	3038845	CompoundStatement		833:0:23079:23201	3038843	0					
ANR	3038846	ReturnStatement	"return ( Register_Reaper ( - 1 , reap_descrip , handler , ( ReaperHandlercpp ) NULL , handler_descrip , s , FALSE ) ) ;"	834:1:23082:23199	3038843	0	True				
ANR	3038847	CallExpression	"Register_Reaper ( - 1 , reap_descrip , handler , ( ReaperHandlercpp ) NULL , handler_descrip , s , FALSE )"		3038843	0					
ANR	3038848	Callee	Register_Reaper		3038843	0					
ANR	3038849	Identifier	Register_Reaper		3038843	0					
ANR	3038850	ArgumentList	- 1		3038843	1					
ANR	3038851	Argument	- 1		3038843	0					
ANR	3038852	UnaryOperationExpression	- 1		3038843	0					
ANR	3038853	UnaryOperator	-		3038843	0					
ANR	3038854	PrimaryExpression	1		3038843	1					
ANR	3038855	Argument	reap_descrip		3038843	1					
ANR	3038856	Identifier	reap_descrip		3038843	0					
ANR	3038857	Argument	handler		3038843	2					
ANR	3038858	Identifier	handler		3038843	0					
ANR	3038859	Argument	( ReaperHandlercpp ) NULL		3038843	3					
ANR	3038860	CastExpression	( ReaperHandlercpp ) NULL		3038843	0					
ANR	3038861	CastTarget	ReaperHandlercpp		3038843	0					
ANR	3038862	Identifier	NULL		3038843	1					
ANR	3038863	Argument	handler_descrip		3038843	4					
ANR	3038864	Identifier	handler_descrip		3038843	0					
ANR	3038865	Argument	s		3038843	5					
ANR	3038866	Identifier	s		3038843	0					
ANR	3038867	Argument	FALSE		3038843	6					
ANR	3038868	Identifier	FALSE		3038843	0					
ANR	3038869	ReturnType	int		3038843	1					
ANR	3038870	Identifier	DaemonCore :: Register_Reaper		3038843	2					
ANR	3038871	ParameterList	"const char * reap_descrip , ReaperHandler handler , const char * handler_descrip , Service * s"		3038843	3					
ANR	3038872	Parameter	const char * reap_descrip	831:32:22985:23008	3038843	0	True				
ANR	3038873	ParameterType	const char *		3038843	0					
ANR	3038874	Identifier	reap_descrip		3038843	1					
ANR	3038875	Parameter	ReaperHandler handler	831:58:23011:23031	3038843	1	True				
ANR	3038876	ParameterType	ReaperHandler		3038843	0					
ANR	3038877	Identifier	handler		3038843	1					
ANR	3038878	Parameter	const char * handler_descrip	832:4:23038:23064	3038843	2	True				
ANR	3038879	ParameterType	const char *		3038843	0					
ANR	3038880	Identifier	handler_descrip		3038843	1					
ANR	3038881	Parameter	Service * s	832:33:23067:23076	3038843	3	True				
ANR	3038882	ParameterType	Service *		3038843	0					
ANR	3038883	Identifier	s		3038843	1					
ANR	3038884	CFGEntryNode	ENTRY		3038843		True				
ANR	3038885	CFGExitNode	EXIT		3038843		True				
ANR	3038886	Symbol	handler		3038843						
ANR	3038887	Symbol	s		3038843						
ANR	3038888	Symbol	NULL		3038843						
ANR	3038889	Symbol	handler_descrip		3038843						
ANR	3038890	Symbol	FALSE		3038843						
ANR	3038891	Symbol	Register_Reaper		3038843						
ANR	3038892	Symbol	reap_descrip		3038843						
ANR	3038893	Function	DaemonCore :: Register_Reaper	839:0:23204:23435							
ANR	3038894	FunctionDef	"DaemonCore :: Register_Reaper (const char * reap_descrip , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s)"		3038893	0					
ANR	3038895	CompoundStatement		841:0:23336:23435	3038893	0					
ANR	3038896	ReturnStatement	"return ( Register_Reaper ( - 1 , reap_descrip , NULL , handlercpp , handler_descrip , s , TRUE ) ) ;"	842:1:23339:23433	3038893	0	True				
ANR	3038897	CallExpression	"Register_Reaper ( - 1 , reap_descrip , NULL , handlercpp , handler_descrip , s , TRUE )"		3038893	0					
ANR	3038898	Callee	Register_Reaper		3038893	0					
ANR	3038899	Identifier	Register_Reaper		3038893	0					
ANR	3038900	ArgumentList	- 1		3038893	1					
ANR	3038901	Argument	- 1		3038893	0					
ANR	3038902	UnaryOperationExpression	- 1		3038893	0					
ANR	3038903	UnaryOperator	-		3038893	0					
ANR	3038904	PrimaryExpression	1		3038893	1					
ANR	3038905	Argument	reap_descrip		3038893	1					
ANR	3038906	Identifier	reap_descrip		3038893	0					
ANR	3038907	Argument	NULL		3038893	2					
ANR	3038908	Identifier	NULL		3038893	0					
ANR	3038909	Argument	handlercpp		3038893	3					
ANR	3038910	Identifier	handlercpp		3038893	0					
ANR	3038911	Argument	handler_descrip		3038893	4					
ANR	3038912	Identifier	handler_descrip		3038893	0					
ANR	3038913	Argument	s		3038893	5					
ANR	3038914	Identifier	s		3038893	0					
ANR	3038915	Argument	TRUE		3038893	6					
ANR	3038916	Identifier	TRUE		3038893	0					
ANR	3038917	ReturnType	int		3038893	1					
ANR	3038918	Identifier	DaemonCore :: Register_Reaper		3038893	2					
ANR	3038919	ParameterList	"const char * reap_descrip , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s"		3038893	3					
ANR	3038920	Parameter	const char * reap_descrip	839:32:23236:23259	3038893	0	True				
ANR	3038921	ParameterType	const char *		3038893	0					
ANR	3038922	Identifier	reap_descrip		3038893	1					
ANR	3038923	Parameter	ReaperHandlercpp handlercpp	840:4:23266:23292	3038893	1	True				
ANR	3038924	ParameterType	ReaperHandlercpp		3038893	0					
ANR	3038925	Identifier	handlercpp		3038893	1					
ANR	3038926	Parameter	const char * handler_descrip	840:33:23295:23321	3038893	2	True				
ANR	3038927	ParameterType	const char *		3038893	0					
ANR	3038928	Identifier	handler_descrip		3038893	1					
ANR	3038929	Parameter	Service * s	840:62:23324:23333	3038893	3	True				
ANR	3038930	ParameterType	Service *		3038893	0					
ANR	3038931	Identifier	s		3038893	1					
ANR	3038932	CFGEntryNode	ENTRY		3038893		True				
ANR	3038933	CFGExitNode	EXIT		3038893		True				
ANR	3038934	Symbol	s		3038893						
ANR	3038935	Symbol	NULL		3038893						
ANR	3038936	Symbol	handler_descrip		3038893						
ANR	3038937	Symbol	TRUE		3038893						
ANR	3038938	Symbol	Register_Reaper		3038893						
ANR	3038939	Symbol	reap_descrip		3038893						
ANR	3038940	Symbol	handlercpp		3038893						
ANR	3038941	Function	DaemonCore :: Reset_Reaper	846:0:23438:23693							
ANR	3038942	FunctionDef	"DaemonCore :: Reset_Reaper (int rid , const char * reap_descrip , ReaperHandler handler , const char * handler_descrip , Service * s)"		3038941	0					
ANR	3038943	CompoundStatement		848:0:23570:23693	3038941	0					
ANR	3038944	ReturnStatement	"return ( Register_Reaper ( rid , reap_descrip , handler , ( ReaperHandlercpp ) NULL , handler_descrip , s , FALSE ) ) ;"	849:1:23573:23691	3038941	0	True				
ANR	3038945	CallExpression	"Register_Reaper ( rid , reap_descrip , handler , ( ReaperHandlercpp ) NULL , handler_descrip , s , FALSE )"		3038941	0					
ANR	3038946	Callee	Register_Reaper		3038941	0					
ANR	3038947	Identifier	Register_Reaper		3038941	0					
ANR	3038948	ArgumentList	rid		3038941	1					
ANR	3038949	Argument	rid		3038941	0					
ANR	3038950	Identifier	rid		3038941	0					
ANR	3038951	Argument	reap_descrip		3038941	1					
ANR	3038952	Identifier	reap_descrip		3038941	0					
ANR	3038953	Argument	handler		3038941	2					
ANR	3038954	Identifier	handler		3038941	0					
ANR	3038955	Argument	( ReaperHandlercpp ) NULL		3038941	3					
ANR	3038956	CastExpression	( ReaperHandlercpp ) NULL		3038941	0					
ANR	3038957	CastTarget	ReaperHandlercpp		3038941	0					
ANR	3038958	Identifier	NULL		3038941	1					
ANR	3038959	Argument	handler_descrip		3038941	4					
ANR	3038960	Identifier	handler_descrip		3038941	0					
ANR	3038961	Argument	s		3038941	5					
ANR	3038962	Identifier	s		3038941	0					
ANR	3038963	Argument	FALSE		3038941	6					
ANR	3038964	Identifier	FALSE		3038941	0					
ANR	3038965	ReturnType	int		3038941	1					
ANR	3038966	Identifier	DaemonCore :: Reset_Reaper		3038941	2					
ANR	3038967	ParameterList	"int rid , const char * reap_descrip , ReaperHandler handler , const char * handler_descrip , Service * s"		3038941	3					
ANR	3038968	Parameter	int rid	846:29:23467:23473	3038941	0	True				
ANR	3038969	ParameterType	int		3038941	0					
ANR	3038970	Identifier	rid		3038941	1					
ANR	3038971	Parameter	const char * reap_descrip	846:38:23476:23499	3038941	1	True				
ANR	3038972	ParameterType	const char *		3038941	0					
ANR	3038973	Identifier	reap_descrip		3038941	1					
ANR	3038974	Parameter	ReaperHandler handler	847:4:23506:23526	3038941	2	True				
ANR	3038975	ParameterType	ReaperHandler		3038941	0					
ANR	3038976	Identifier	handler		3038941	1					
ANR	3038977	Parameter	const char * handler_descrip	847:27:23529:23555	3038941	3	True				
ANR	3038978	ParameterType	const char *		3038941	0					
ANR	3038979	Identifier	handler_descrip		3038941	1					
ANR	3038980	Parameter	Service * s	847:56:23558:23567	3038941	4	True				
ANR	3038981	ParameterType	Service *		3038941	0					
ANR	3038982	Identifier	s		3038941	1					
ANR	3038983	CFGEntryNode	ENTRY		3038941		True				
ANR	3038984	CFGExitNode	EXIT		3038941		True				
ANR	3038985	Symbol	handler		3038941						
ANR	3038986	Symbol	s		3038941						
ANR	3038987	Symbol	NULL		3038941						
ANR	3038988	Symbol	handler_descrip		3038941						
ANR	3038989	Symbol	FALSE		3038941						
ANR	3038990	Symbol	Register_Reaper		3038941						
ANR	3038991	Symbol	rid		3038941						
ANR	3038992	Symbol	reap_descrip		3038941						
ANR	3038993	Function	DaemonCore :: Reset_Reaper	854:0:23696:23934							
ANR	3038994	FunctionDef	"DaemonCore :: Reset_Reaper (int rid , const char * reap_descrip , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s)"		3038993	0					
ANR	3038995	CompoundStatement		856:0:23834:23934	3038993	0					
ANR	3038996	ReturnStatement	"return ( Register_Reaper ( rid , reap_descrip , NULL , handlercpp , handler_descrip , s , TRUE ) ) ;"	857:1:23837:23932	3038993	0	True				
ANR	3038997	CallExpression	"Register_Reaper ( rid , reap_descrip , NULL , handlercpp , handler_descrip , s , TRUE )"		3038993	0					
ANR	3038998	Callee	Register_Reaper		3038993	0					
ANR	3038999	Identifier	Register_Reaper		3038993	0					
ANR	3039000	ArgumentList	rid		3038993	1					
ANR	3039001	Argument	rid		3038993	0					
ANR	3039002	Identifier	rid		3038993	0					
ANR	3039003	Argument	reap_descrip		3038993	1					
ANR	3039004	Identifier	reap_descrip		3038993	0					
ANR	3039005	Argument	NULL		3038993	2					
ANR	3039006	Identifier	NULL		3038993	0					
ANR	3039007	Argument	handlercpp		3038993	3					
ANR	3039008	Identifier	handlercpp		3038993	0					
ANR	3039009	Argument	handler_descrip		3038993	4					
ANR	3039010	Identifier	handler_descrip		3038993	0					
ANR	3039011	Argument	s		3038993	5					
ANR	3039012	Identifier	s		3038993	0					
ANR	3039013	Argument	TRUE		3038993	6					
ANR	3039014	Identifier	TRUE		3038993	0					
ANR	3039015	ReturnType	int		3038993	1					
ANR	3039016	Identifier	DaemonCore :: Reset_Reaper		3038993	2					
ANR	3039017	ParameterList	"int rid , const char * reap_descrip , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s"		3038993	3					
ANR	3039018	Parameter	int rid	854:29:23725:23731	3038993	0	True				
ANR	3039019	ParameterType	int		3038993	0					
ANR	3039020	Identifier	rid		3038993	1					
ANR	3039021	Parameter	const char * reap_descrip	854:38:23734:23757	3038993	1	True				
ANR	3039022	ParameterType	const char *		3038993	0					
ANR	3039023	Identifier	reap_descrip		3038993	1					
ANR	3039024	Parameter	ReaperHandlercpp handlercpp	855:4:23764:23790	3038993	2	True				
ANR	3039025	ParameterType	ReaperHandlercpp		3038993	0					
ANR	3039026	Identifier	handlercpp		3038993	1					
ANR	3039027	Parameter	const char * handler_descrip	855:33:23793:23819	3038993	3	True				
ANR	3039028	ParameterType	const char *		3038993	0					
ANR	3039029	Identifier	handler_descrip		3038993	1					
ANR	3039030	Parameter	Service * s	855:62:23822:23831	3038993	4	True				
ANR	3039031	ParameterType	Service *		3038993	0					
ANR	3039032	Identifier	s		3038993	1					
ANR	3039033	CFGEntryNode	ENTRY		3038993		True				
ANR	3039034	CFGExitNode	EXIT		3038993		True				
ANR	3039035	Symbol	s		3038993						
ANR	3039036	Symbol	NULL		3038993						
ANR	3039037	Symbol	handler_descrip		3038993						
ANR	3039038	Symbol	TRUE		3038993						
ANR	3039039	Symbol	Register_Reaper		3038993						
ANR	3039040	Symbol	rid		3038993						
ANR	3039041	Symbol	reap_descrip		3038993						
ANR	3039042	Symbol	handlercpp		3038993						
ANR	3039043	Function	DaemonCore :: Register_Timer	861:0:23937:24104							
ANR	3039044	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , TimerHandler handler , const char * event_descrip)"		3039043	0					
ANR	3039045	CompoundStatement		863:0:24041:24104	3039043	0					
ANR	3039046	ReturnStatement	"return ( t . NewTimer ( deltawhen , handler , event_descrip , 0 ) ) ;"	864:1:24044:24102	3039043	0	True				
ANR	3039047	CallExpression	"t . NewTimer ( deltawhen , handler , event_descrip , 0 )"		3039043	0					
ANR	3039048	Callee	t . NewTimer		3039043	0					
ANR	3039049	MemberAccess	t . NewTimer		3039043	0					
ANR	3039050	Identifier	t		3039043	0					
ANR	3039051	Identifier	NewTimer		3039043	1					
ANR	3039052	ArgumentList	deltawhen		3039043	1					
ANR	3039053	Argument	deltawhen		3039043	0					
ANR	3039054	Identifier	deltawhen		3039043	0					
ANR	3039055	Argument	handler		3039043	1					
ANR	3039056	Identifier	handler		3039043	0					
ANR	3039057	Argument	event_descrip		3039043	2					
ANR	3039058	Identifier	event_descrip		3039043	0					
ANR	3039059	Argument	0		3039043	3					
ANR	3039060	PrimaryExpression	0		3039043	0					
ANR	3039061	ReturnType	int		3039043	1					
ANR	3039062	Identifier	DaemonCore :: Register_Timer		3039043	2					
ANR	3039063	ParameterList	"unsigned deltawhen , TimerHandler handler , const char * event_descrip"		3039043	3					
ANR	3039064	Parameter	unsigned deltawhen	861:31:23968:23985	3039043	0	True				
ANR	3039065	ParameterType	unsigned		3039043	0					
ANR	3039066	Identifier	deltawhen		3039043	1					
ANR	3039067	Parameter	TimerHandler handler	861:51:23988:24007	3039043	1	True				
ANR	3039068	ParameterType	TimerHandler		3039043	0					
ANR	3039069	Identifier	handler		3039043	1					
ANR	3039070	Parameter	const char * event_descrip	862:4:24014:24038	3039043	2	True				
ANR	3039071	ParameterType	const char *		3039043	0					
ANR	3039072	Identifier	event_descrip		3039043	1					
ANR	3039073	CFGEntryNode	ENTRY		3039043		True				
ANR	3039074	CFGExitNode	EXIT		3039043		True				
ANR	3039075	Symbol	deltawhen		3039043						
ANR	3039076	Symbol	handler		3039043						
ANR	3039077	Symbol	t		3039043						
ANR	3039078	Symbol	event_descrip		3039043						
ANR	3039079	Symbol	t . NewTimer		3039043						
ANR	3039080	Function	DaemonCore :: Register_Timer_TS	868:0:24120:24608							
ANR	3039081	FunctionDef	"DaemonCore :: Register_Timer_TS (unsigned deltawhen , TimerHandlercpp handler , const char * event_descrip , Service * s)"		3039080	0					
ANR	3039082	CompoundStatement		870:0:24242:24608	3039080	0					
ANR	3039083	ExpressionStatement	EnterCriticalSection ( & Big_fat_mutex )	871:1:24245:24281	3039080	0	True				
ANR	3039084	CallExpression	EnterCriticalSection ( & Big_fat_mutex )		3039080	0					
ANR	3039085	Callee	EnterCriticalSection		3039080	0					
ANR	3039086	Identifier	EnterCriticalSection		3039080	0					
ANR	3039087	ArgumentList	& Big_fat_mutex		3039080	1					
ANR	3039088	Argument	& Big_fat_mutex		3039080	0					
ANR	3039089	UnaryOperationExpression	& Big_fat_mutex		3039080	0					
ANR	3039090	UnaryOperator	&		3039080	0					
ANR	3039091	Identifier	Big_fat_mutex		3039080	1					
ANR	3039092	IdentifierDeclStatement	"int status = Register_Timer ( deltawhen , handler , event_descrip , s ) ;"	872:1:24284:24349	3039080	1	True				
ANR	3039093	IdentifierDecl	"status = Register_Timer ( deltawhen , handler , event_descrip , s )"		3039080	0					
ANR	3039094	IdentifierDeclType	int		3039080	0					
ANR	3039095	Identifier	status		3039080	1					
ANR	3039096	AssignmentExpression	"status = Register_Timer ( deltawhen , handler , event_descrip , s )"		3039080	2		=			
ANR	3039097	Identifier	status		3039080	0					
ANR	3039098	CallExpression	"Register_Timer ( deltawhen , handler , event_descrip , s )"		3039080	1					
ANR	3039099	Callee	Register_Timer		3039080	0					
ANR	3039100	Identifier	Register_Timer		3039080	0					
ANR	3039101	ArgumentList	deltawhen		3039080	1					
ANR	3039102	Argument	deltawhen		3039080	0					
ANR	3039103	Identifier	deltawhen		3039080	0					
ANR	3039104	Argument	handler		3039080	1					
ANR	3039105	Identifier	handler		3039080	0					
ANR	3039106	Argument	event_descrip		3039080	2					
ANR	3039107	Identifier	event_descrip		3039080	0					
ANR	3039108	Argument	s		3039080	3					
ANR	3039109	Identifier	s		3039080	0					
ANR	3039110	ExpressionStatement	Do_Wake_up_select ( )	873:1:24352:24371	3039080	2	True				
ANR	3039111	CallExpression	Do_Wake_up_select ( )		3039080	0					
ANR	3039112	Callee	Do_Wake_up_select		3039080	0					
ANR	3039113	Identifier	Do_Wake_up_select		3039080	0					
ANR	3039114	ArgumentList			3039080	1					
ANR	3039115	ExpressionStatement	LeaveCriticalSection ( & Big_fat_mutex )	874:1:24374:24410	3039080	3	True				
ANR	3039116	CallExpression	LeaveCriticalSection ( & Big_fat_mutex )		3039080	0					
ANR	3039117	Callee	LeaveCriticalSection		3039080	0					
ANR	3039118	Identifier	LeaveCriticalSection		3039080	0					
ANR	3039119	ArgumentList	& Big_fat_mutex		3039080	1					
ANR	3039120	Argument	& Big_fat_mutex		3039080	0					
ANR	3039121	UnaryOperationExpression	& Big_fat_mutex		3039080	0					
ANR	3039122	UnaryOperator	&		3039080	0					
ANR	3039123	Identifier	Big_fat_mutex		3039080	1					
ANR	3039124	ReturnStatement	return status ;	876:1:24414:24427	3039080	4	True				
ANR	3039125	Identifier	status		3039080	0					
ANR	3039126	ReturnType	int		3039080	1					
ANR	3039127	Identifier	DaemonCore :: Register_Timer_TS		3039080	2					
ANR	3039128	ParameterList	"unsigned deltawhen , TimerHandlercpp handler , const char * event_descrip , Service * s"		3039080	3					
ANR	3039129	Parameter	unsigned deltawhen	868:34:24154:24171	3039080	0	True				
ANR	3039130	ParameterType	unsigned		3039080	0					
ANR	3039131	Identifier	deltawhen		3039080	1					
ANR	3039132	Parameter	TimerHandlercpp handler	868:54:24174:24196	3039080	1	True				
ANR	3039133	ParameterType	TimerHandlercpp		3039080	0					
ANR	3039134	Identifier	handler		3039080	1					
ANR	3039135	Parameter	const char * event_descrip	869:4:24203:24227	3039080	2	True				
ANR	3039136	ParameterType	const char *		3039080	0					
ANR	3039137	Identifier	event_descrip		3039080	1					
ANR	3039138	Parameter	Service * s	869:31:24230:24239	3039080	3	True				
ANR	3039139	ParameterType	Service *		3039080	0					
ANR	3039140	Identifier	s		3039080	1					
ANR	3039141	CFGEntryNode	ENTRY		3039080		True				
ANR	3039142	CFGExitNode	EXIT		3039080		True				
ANR	3039143	Symbol	& Big_fat_mutex		3039080						
ANR	3039144	Symbol	deltawhen		3039080						
ANR	3039145	Symbol	handler		3039080						
ANR	3039146	Symbol	s		3039080						
ANR	3039147	Symbol	Register_Timer		3039080						
ANR	3039148	Symbol	event_descrip		3039080						
ANR	3039149	Symbol	status		3039080						
ANR	3039150	Function	DaemonCore :: Register_Timer	886:0:24611:24810							
ANR	3039151	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , TimerHandler handler , Release release , const char * event_descrip)"		3039150	0					
ANR	3039152	CompoundStatement		888:0:24738:24810	3039150	0					
ANR	3039153	ReturnStatement	"return ( t . NewTimer ( deltawhen , handler , release , event_descrip , 0 ) ) ;"	889:1:24741:24808	3039150	0	True				
ANR	3039154	CallExpression	"t . NewTimer ( deltawhen , handler , release , event_descrip , 0 )"		3039150	0					
ANR	3039155	Callee	t . NewTimer		3039150	0					
ANR	3039156	MemberAccess	t . NewTimer		3039150	0					
ANR	3039157	Identifier	t		3039150	0					
ANR	3039158	Identifier	NewTimer		3039150	1					
ANR	3039159	ArgumentList	deltawhen		3039150	1					
ANR	3039160	Argument	deltawhen		3039150	0					
ANR	3039161	Identifier	deltawhen		3039150	0					
ANR	3039162	Argument	handler		3039150	1					
ANR	3039163	Identifier	handler		3039150	0					
ANR	3039164	Argument	release		3039150	2					
ANR	3039165	Identifier	release		3039150	0					
ANR	3039166	Argument	event_descrip		3039150	3					
ANR	3039167	Identifier	event_descrip		3039150	0					
ANR	3039168	Argument	0		3039150	4					
ANR	3039169	PrimaryExpression	0		3039150	0					
ANR	3039170	ReturnType	int		3039150	1					
ANR	3039171	Identifier	DaemonCore :: Register_Timer		3039150	2					
ANR	3039172	ParameterList	"unsigned deltawhen , TimerHandler handler , Release release , const char * event_descrip"		3039150	3					
ANR	3039173	Parameter	unsigned deltawhen	886:31:24642:24659	3039150	0	True				
ANR	3039174	ParameterType	unsigned		3039150	0					
ANR	3039175	Identifier	deltawhen		3039150	1					
ANR	3039176	Parameter	TimerHandler handler	886:51:24662:24681	3039150	1	True				
ANR	3039177	ParameterType	TimerHandler		3039150	0					
ANR	3039178	Identifier	handler		3039150	1					
ANR	3039179	Parameter	Release release	887:10:24694:24708	3039150	2	True				
ANR	3039180	ParameterType	Release		3039150	0					
ANR	3039181	Identifier	release		3039150	1					
ANR	3039182	Parameter	const char * event_descrip	887:27:24711:24735	3039150	3	True				
ANR	3039183	ParameterType	const char *		3039150	0					
ANR	3039184	Identifier	event_descrip		3039150	1					
ANR	3039185	CFGEntryNode	ENTRY		3039150		True				
ANR	3039186	CFGExitNode	EXIT		3039150		True				
ANR	3039187	Symbol	deltawhen		3039150						
ANR	3039188	Symbol	handler		3039150						
ANR	3039189	Symbol	t		3039150						
ANR	3039190	Symbol	release		3039150						
ANR	3039191	Symbol	event_descrip		3039150						
ANR	3039192	Symbol	t . NewTimer		3039150						
ANR	3039193	Function	DaemonCore :: Register_Timer	892:0:24813:25002							
ANR	3039194	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , unsigned period , TimerHandler handler , const char * event_descrip)"		3039193	0					
ANR	3039195	CompoundStatement		894:0:24934:25002	3039193	0					
ANR	3039196	ReturnStatement	"return ( t . NewTimer ( deltawhen , handler , event_descrip , period ) ) ;"	895:1:24937:25000	3039193	0	True				
ANR	3039197	CallExpression	"t . NewTimer ( deltawhen , handler , event_descrip , period )"		3039193	0					
ANR	3039198	Callee	t . NewTimer		3039193	0					
ANR	3039199	MemberAccess	t . NewTimer		3039193	0					
ANR	3039200	Identifier	t		3039193	0					
ANR	3039201	Identifier	NewTimer		3039193	1					
ANR	3039202	ArgumentList	deltawhen		3039193	1					
ANR	3039203	Argument	deltawhen		3039193	0					
ANR	3039204	Identifier	deltawhen		3039193	0					
ANR	3039205	Argument	handler		3039193	1					
ANR	3039206	Identifier	handler		3039193	0					
ANR	3039207	Argument	event_descrip		3039193	2					
ANR	3039208	Identifier	event_descrip		3039193	0					
ANR	3039209	Argument	period		3039193	3					
ANR	3039210	Identifier	period		3039193	0					
ANR	3039211	ReturnType	int		3039193	1					
ANR	3039212	Identifier	DaemonCore :: Register_Timer		3039193	2					
ANR	3039213	ParameterList	"unsigned deltawhen , unsigned period , TimerHandler handler , const char * event_descrip"		3039193	3					
ANR	3039214	Parameter	unsigned deltawhen	892:31:24844:24861	3039193	0	True				
ANR	3039215	ParameterType	unsigned		3039193	0					
ANR	3039216	Identifier	deltawhen		3039193	1					
ANR	3039217	Parameter	unsigned period	892:51:24864:24878	3039193	1	True				
ANR	3039218	ParameterType	unsigned		3039193	0					
ANR	3039219	Identifier	period		3039193	1					
ANR	3039220	Parameter	TimerHandler handler	893:4:24885:24904	3039193	2	True				
ANR	3039221	ParameterType	TimerHandler		3039193	0					
ANR	3039222	Identifier	handler		3039193	1					
ANR	3039223	Parameter	const char * event_descrip	893:26:24907:24931	3039193	3	True				
ANR	3039224	ParameterType	const char *		3039193	0					
ANR	3039225	Identifier	event_descrip		3039193	1					
ANR	3039226	CFGEntryNode	ENTRY		3039193		True				
ANR	3039227	CFGExitNode	EXIT		3039193		True				
ANR	3039228	Symbol	deltawhen		3039193						
ANR	3039229	Symbol	handler		3039193						
ANR	3039230	Symbol	period		3039193						
ANR	3039231	Symbol	t		3039193						
ANR	3039232	Symbol	event_descrip		3039193						
ANR	3039233	Symbol	t . NewTimer		3039193						
ANR	3039234	Function	DaemonCore :: Register_Timer	898:0:25005:25196							
ANR	3039235	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , TimerHandlercpp handlercpp , const char * event_descrip , Service * s)"		3039234	0					
ANR	3039236	CompoundStatement		900:0:25127:25196	3039234	0					
ANR	3039237	ReturnStatement	"return ( t . NewTimer ( s , deltawhen , handlercpp , event_descrip , 0 ) ) ;"	901:1:25130:25194	3039234	0	True				
ANR	3039238	CallExpression	"t . NewTimer ( s , deltawhen , handlercpp , event_descrip , 0 )"		3039234	0					
ANR	3039239	Callee	t . NewTimer		3039234	0					
ANR	3039240	MemberAccess	t . NewTimer		3039234	0					
ANR	3039241	Identifier	t		3039234	0					
ANR	3039242	Identifier	NewTimer		3039234	1					
ANR	3039243	ArgumentList	s		3039234	1					
ANR	3039244	Argument	s		3039234	0					
ANR	3039245	Identifier	s		3039234	0					
ANR	3039246	Argument	deltawhen		3039234	1					
ANR	3039247	Identifier	deltawhen		3039234	0					
ANR	3039248	Argument	handlercpp		3039234	2					
ANR	3039249	Identifier	handlercpp		3039234	0					
ANR	3039250	Argument	event_descrip		3039234	3					
ANR	3039251	Identifier	event_descrip		3039234	0					
ANR	3039252	Argument	0		3039234	4					
ANR	3039253	PrimaryExpression	0		3039234	0					
ANR	3039254	ReturnType	int		3039234	1					
ANR	3039255	Identifier	DaemonCore :: Register_Timer		3039234	2					
ANR	3039256	ParameterList	"unsigned deltawhen , TimerHandlercpp handlercpp , const char * event_descrip , Service * s"		3039234	3					
ANR	3039257	Parameter	unsigned deltawhen	898:31:25036:25053	3039234	0	True				
ANR	3039258	ParameterType	unsigned		3039234	0					
ANR	3039259	Identifier	deltawhen		3039234	1					
ANR	3039260	Parameter	TimerHandlercpp handlercpp	898:51:25056:25081	3039234	1	True				
ANR	3039261	ParameterType	TimerHandlercpp		3039234	0					
ANR	3039262	Identifier	handlercpp		3039234	1					
ANR	3039263	Parameter	const char * event_descrip	899:4:25088:25112	3039234	2	True				
ANR	3039264	ParameterType	const char *		3039234	0					
ANR	3039265	Identifier	event_descrip		3039234	1					
ANR	3039266	Parameter	Service * s	899:31:25115:25124	3039234	3	True				
ANR	3039267	ParameterType	Service *		3039234	0					
ANR	3039268	Identifier	s		3039234	1					
ANR	3039269	CFGEntryNode	ENTRY		3039234		True				
ANR	3039270	CFGExitNode	EXIT		3039234		True				
ANR	3039271	Symbol	deltawhen		3039234						
ANR	3039272	Symbol	s		3039234						
ANR	3039273	Symbol	t		3039234						
ANR	3039274	Symbol	event_descrip		3039234						
ANR	3039275	Symbol	t . NewTimer		3039234						
ANR	3039276	Symbol	handlercpp		3039234						
ANR	3039277	Function	DaemonCore :: Register_Timer	904:0:25199:25407							
ANR	3039278	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , unsigned period , TimerHandlercpp handler , const char * event_descrip , Service * s)"		3039277	0					
ANR	3039279	CompoundStatement		906:0:25336:25407	3039277	0					
ANR	3039280	ReturnStatement	"return ( t . NewTimer ( s , deltawhen , handler , event_descrip , period ) ) ;"	907:1:25339:25405	3039277	0	True				
ANR	3039281	CallExpression	"t . NewTimer ( s , deltawhen , handler , event_descrip , period )"		3039277	0					
ANR	3039282	Callee	t . NewTimer		3039277	0					
ANR	3039283	MemberAccess	t . NewTimer		3039277	0					
ANR	3039284	Identifier	t		3039277	0					
ANR	3039285	Identifier	NewTimer		3039277	1					
ANR	3039286	ArgumentList	s		3039277	1					
ANR	3039287	Argument	s		3039277	0					
ANR	3039288	Identifier	s		3039277	0					
ANR	3039289	Argument	deltawhen		3039277	1					
ANR	3039290	Identifier	deltawhen		3039277	0					
ANR	3039291	Argument	handler		3039277	2					
ANR	3039292	Identifier	handler		3039277	0					
ANR	3039293	Argument	event_descrip		3039277	3					
ANR	3039294	Identifier	event_descrip		3039277	0					
ANR	3039295	Argument	period		3039277	4					
ANR	3039296	Identifier	period		3039277	0					
ANR	3039297	ReturnType	int		3039277	1					
ANR	3039298	Identifier	DaemonCore :: Register_Timer		3039277	2					
ANR	3039299	ParameterList	"unsigned deltawhen , unsigned period , TimerHandlercpp handler , const char * event_descrip , Service * s"		3039277	3					
ANR	3039300	Parameter	unsigned deltawhen	904:31:25230:25247	3039277	0	True				
ANR	3039301	ParameterType	unsigned		3039277	0					
ANR	3039302	Identifier	deltawhen		3039277	1					
ANR	3039303	Parameter	unsigned period	904:51:25250:25264	3039277	1	True				
ANR	3039304	ParameterType	unsigned		3039277	0					
ANR	3039305	Identifier	period		3039277	1					
ANR	3039306	Parameter	TimerHandlercpp handler	905:4:25271:25293	3039277	2	True				
ANR	3039307	ParameterType	TimerHandlercpp		3039277	0					
ANR	3039308	Identifier	handler		3039277	1					
ANR	3039309	Parameter	const char * event_descrip	905:29:25296:25320	3039277	3	True				
ANR	3039310	ParameterType	const char *		3039277	0					
ANR	3039311	Identifier	event_descrip		3039277	1					
ANR	3039312	Parameter	Service * s	905:56:25323:25332	3039277	4	True				
ANR	3039313	ParameterType	Service *		3039277	0					
ANR	3039314	Identifier	s		3039277	1					
ANR	3039315	CFGEntryNode	ENTRY		3039277		True				
ANR	3039316	CFGExitNode	EXIT		3039277		True				
ANR	3039317	Symbol	deltawhen		3039277						
ANR	3039318	Symbol	handler		3039277						
ANR	3039319	Symbol	period		3039277						
ANR	3039320	Symbol	s		3039277						
ANR	3039321	Symbol	t		3039277						
ANR	3039322	Symbol	event_descrip		3039277						
ANR	3039323	Symbol	t . NewTimer		3039277						
ANR	3039324	Function	DaemonCore :: Register_Timer	910:0:25410:25593							
ANR	3039325	FunctionDef	"DaemonCore :: Register_Timer (const Timeslice & timeslice , TimerHandlercpp handler , const char * event_descrip , Service * s)"		3039324	0					
ANR	3039326	CompoundStatement		911:0:25532:25593	3039324	0					
ANR	3039327	ReturnStatement	"return t . NewTimer ( s , timeslice , handler , event_descrip ) ;"	912:1:25535:25591	3039324	0	True				
ANR	3039328	CallExpression	"t . NewTimer ( s , timeslice , handler , event_descrip )"		3039324	0					
ANR	3039329	Callee	t . NewTimer		3039324	0					
ANR	3039330	MemberAccess	t . NewTimer		3039324	0					
ANR	3039331	Identifier	t		3039324	0					
ANR	3039332	Identifier	NewTimer		3039324	1					
ANR	3039333	ArgumentList	s		3039324	1					
ANR	3039334	Argument	s		3039324	0					
ANR	3039335	Identifier	s		3039324	0					
ANR	3039336	Argument	timeslice		3039324	1					
ANR	3039337	Identifier	timeslice		3039324	0					
ANR	3039338	Argument	handler		3039324	2					
ANR	3039339	Identifier	handler		3039324	0					
ANR	3039340	Argument	event_descrip		3039324	3					
ANR	3039341	Identifier	event_descrip		3039324	0					
ANR	3039342	ReturnType	int		3039324	1					
ANR	3039343	Identifier	DaemonCore :: Register_Timer		3039324	2					
ANR	3039344	ParameterList	"const Timeslice & timeslice , TimerHandlercpp handler , const char * event_descrip , Service * s"		3039324	3					
ANR	3039345	Parameter	const Timeslice & timeslice	910:32:25442:25467	3039324	0	True				
ANR	3039346	ParameterType	const Timeslice &		3039324	0					
ANR	3039347	Identifier	timeslice		3039324	1					
ANR	3039348	Parameter	TimerHandlercpp handler	910:59:25469:25491	3039324	1	True				
ANR	3039349	ParameterType	TimerHandlercpp		3039324	0					
ANR	3039350	Identifier	handler		3039324	1					
ANR	3039351	Parameter	const char * event_descrip	910:83:25493:25518	3039324	2	True				
ANR	3039352	ParameterType	const char *		3039324	0					
ANR	3039353	Identifier	event_descrip		3039324	1					
ANR	3039354	Parameter	Service * s	910:110:25520:25529	3039324	3	True				
ANR	3039355	ParameterType	Service *		3039324	0					
ANR	3039356	Identifier	s		3039324	1					
ANR	3039357	CFGEntryNode	ENTRY		3039324		True				
ANR	3039358	CFGExitNode	EXIT		3039324		True				
ANR	3039359	Symbol	timeslice		3039324						
ANR	3039360	Symbol	handler		3039324						
ANR	3039361	Symbol	s		3039324						
ANR	3039362	Symbol	t		3039324						
ANR	3039363	Symbol	event_descrip		3039324						
ANR	3039364	Symbol	t . NewTimer		3039324						
ANR	3039365	Function	DaemonCore :: Cancel_Timer	915:0:25596:25667							
ANR	3039366	FunctionDef	DaemonCore :: Cancel_Timer (int id)		3039365	0					
ANR	3039367	CompoundStatement		916:0:25635:25667	3039365	0					
ANR	3039368	ReturnStatement	return ( t . CancelTimer ( id ) ) ;	917:1:25638:25665	3039365	0	True				
ANR	3039369	CallExpression	t . CancelTimer ( id )		3039365	0					
ANR	3039370	Callee	t . CancelTimer		3039365	0					
ANR	3039371	MemberAccess	t . CancelTimer		3039365	0					
ANR	3039372	Identifier	t		3039365	0					
ANR	3039373	Identifier	CancelTimer		3039365	1					
ANR	3039374	ArgumentList	id		3039365	1					
ANR	3039375	Argument	id		3039365	0					
ANR	3039376	Identifier	id		3039365	0					
ANR	3039377	ReturnType	int		3039365	1					
ANR	3039378	Identifier	DaemonCore :: Cancel_Timer		3039365	2					
ANR	3039379	ParameterList	int id		3039365	3					
ANR	3039380	Parameter	int id	915:30:25626:25631	3039365	0	True				
ANR	3039381	ParameterType	int		3039365	0					
ANR	3039382	Identifier	id		3039365	1					
ANR	3039383	CFGEntryNode	ENTRY		3039365		True				
ANR	3039384	CFGExitNode	EXIT		3039365		True				
ANR	3039385	Symbol	t		3039365						
ANR	3039386	Symbol	id		3039365						
ANR	3039387	Symbol	t . CancelTimer		3039365						
ANR	3039388	Function	DaemonCore :: Reset_Timer	920:0:25670:25783							
ANR	3039389	FunctionDef	"DaemonCore :: Reset_Timer (int id , unsigned when , unsigned period)"		3039388	0					
ANR	3039390	CompoundStatement		921:0:25740:25783	3039388	0					
ANR	3039391	ReturnStatement	"return ( t . ResetTimer ( id , when , period ) ) ;"	922:1:25743:25781	3039388	0	True				
ANR	3039392	CallExpression	"t . ResetTimer ( id , when , period )"		3039388	0					
ANR	3039393	Callee	t . ResetTimer		3039388	0					
ANR	3039394	MemberAccess	t . ResetTimer		3039388	0					
ANR	3039395	Identifier	t		3039388	0					
ANR	3039396	Identifier	ResetTimer		3039388	1					
ANR	3039397	ArgumentList	id		3039388	1					
ANR	3039398	Argument	id		3039388	0					
ANR	3039399	Identifier	id		3039388	0					
ANR	3039400	Argument	when		3039388	1					
ANR	3039401	Identifier	when		3039388	0					
ANR	3039402	Argument	period		3039388	2					
ANR	3039403	Identifier	period		3039388	0					
ANR	3039404	ReturnType	int		3039388	1					
ANR	3039405	Identifier	DaemonCore :: Reset_Timer		3039388	2					
ANR	3039406	ParameterList	"int id , unsigned when , unsigned period"		3039388	3					
ANR	3039407	Parameter	int id	920:29:25699:25704	3039388	0	True				
ANR	3039408	ParameterType	int		3039388	0					
ANR	3039409	Identifier	id		3039388	1					
ANR	3039410	Parameter	unsigned when	920:37:25707:25719	3039388	1	True				
ANR	3039411	ParameterType	unsigned		3039388	0					
ANR	3039412	Identifier	when		3039388	1					
ANR	3039413	Parameter	unsigned period	920:52:25722:25736	3039388	2	True				
ANR	3039414	ParameterType	unsigned		3039388	0					
ANR	3039415	Identifier	period		3039388	1					
ANR	3039416	CFGEntryNode	ENTRY		3039388		True				
ANR	3039417	CFGExitNode	EXIT		3039388		True				
ANR	3039418	Symbol	period		3039388						
ANR	3039419	Symbol	t		3039388						
ANR	3039420	Symbol	id		3039388						
ANR	3039421	Symbol	t . ResetTimer		3039388						
ANR	3039422	Symbol	when		3039388						
ANR	3039423	Function	DaemonCore :: Reset_Timer_Period	925:0:25786:25893							
ANR	3039424	FunctionDef	"DaemonCore :: Reset_Timer_Period (int id , unsigned period)"		3039423	0					
ANR	3039425	CompoundStatement		926:0:25849:25893	3039423	0					
ANR	3039426	ReturnStatement	"return ( t . ResetTimerPeriod ( id , period ) ) ;"	927:1:25852:25891	3039423	0	True				
ANR	3039427	CallExpression	"t . ResetTimerPeriod ( id , period )"		3039423	0					
ANR	3039428	Callee	t . ResetTimerPeriod		3039423	0					
ANR	3039429	MemberAccess	t . ResetTimerPeriod		3039423	0					
ANR	3039430	Identifier	t		3039423	0					
ANR	3039431	Identifier	ResetTimerPeriod		3039423	1					
ANR	3039432	ArgumentList	id		3039423	1					
ANR	3039433	Argument	id		3039423	0					
ANR	3039434	Identifier	id		3039423	0					
ANR	3039435	Argument	period		3039423	1					
ANR	3039436	Identifier	period		3039423	0					
ANR	3039437	ReturnType	int		3039423	1					
ANR	3039438	Identifier	DaemonCore :: Reset_Timer_Period		3039423	2					
ANR	3039439	ParameterList	"int id , unsigned period"		3039423	3					
ANR	3039440	Parameter	int id	925:37:25823:25828	3039423	0	True				
ANR	3039441	ParameterType	int		3039423	0					
ANR	3039442	Identifier	id		3039423	1					
ANR	3039443	Parameter	unsigned period	925:45:25831:25845	3039423	1	True				
ANR	3039444	ParameterType	unsigned		3039423	0					
ANR	3039445	Identifier	period		3039423	1					
ANR	3039446	CFGEntryNode	ENTRY		3039423		True				
ANR	3039447	CFGExitNode	EXIT		3039423		True				
ANR	3039448	Symbol	period		3039423						
ANR	3039449	Symbol	t		3039423						
ANR	3039450	Symbol	t . ResetTimerPeriod		3039423						
ANR	3039451	Symbol	id		3039423						
ANR	3039452	Function	DaemonCore :: ResetTimerTimeslice	930:0:25896:26026							
ANR	3039453	FunctionDef	"DaemonCore :: ResetTimerTimeslice (int id , Timeslice const & new_timeslice)"		3039452	0					
ANR	3039454	CompoundStatement		931:0:25975:26026	3039452	0					
ANR	3039455	ReturnStatement	"return t . ResetTimerTimeslice ( id , new_timeslice ) ;"	932:1:25978:26024	3039452	0	True				
ANR	3039456	CallExpression	"t . ResetTimerTimeslice ( id , new_timeslice )"		3039452	0					
ANR	3039457	Callee	t . ResetTimerTimeslice		3039452	0					
ANR	3039458	MemberAccess	t . ResetTimerTimeslice		3039452	0					
ANR	3039459	Identifier	t		3039452	0					
ANR	3039460	Identifier	ResetTimerTimeslice		3039452	1					
ANR	3039461	ArgumentList	id		3039452	1					
ANR	3039462	Argument	id		3039452	0					
ANR	3039463	Identifier	id		3039452	0					
ANR	3039464	Argument	new_timeslice		3039452	1					
ANR	3039465	Identifier	new_timeslice		3039452	0					
ANR	3039466	ReturnType	int		3039452	1					
ANR	3039467	Identifier	DaemonCore :: ResetTimerTimeslice		3039452	2					
ANR	3039468	ParameterList	"int id , Timeslice const & new_timeslice"		3039452	3					
ANR	3039469	Parameter	int id	930:38:25934:25939	3039452	0	True				
ANR	3039470	ParameterType	int		3039452	0					
ANR	3039471	Identifier	id		3039452	1					
ANR	3039472	Parameter	Timeslice const & new_timeslice	930:46:25942:25971	3039452	1	True				
ANR	3039473	ParameterType	Timeslice const &		3039452	0					
ANR	3039474	Identifier	new_timeslice		3039452	1					
ANR	3039475	CFGEntryNode	ENTRY		3039452		True				
ANR	3039476	CFGExitNode	EXIT		3039452		True				
ANR	3039477	Symbol	t		3039452						
ANR	3039478	Symbol	id		3039452						
ANR	3039479	Symbol	new_timeslice		3039452						
ANR	3039480	Symbol	t . ResetTimerTimeslice		3039452						
ANR	3039481	Function	DaemonCore :: GetTimerTimeslice	935:0:26029:26144							
ANR	3039482	FunctionDef	"DaemonCore :: GetTimerTimeslice (int id , Timeslice & timeslice)"		3039481	0					
ANR	3039483	CompoundStatement		936:0:26096:26144	3039481	0					
ANR	3039484	ReturnStatement	"return t . GetTimerTimeslice ( id , timeslice ) ;"	937:1:26099:26142	3039481	0	True				
ANR	3039485	CallExpression	"t . GetTimerTimeslice ( id , timeslice )"		3039481	0					
ANR	3039486	Callee	t . GetTimerTimeslice		3039481	0					
ANR	3039487	MemberAccess	t . GetTimerTimeslice		3039481	0					
ANR	3039488	Identifier	t		3039481	0					
ANR	3039489	Identifier	GetTimerTimeslice		3039481	1					
ANR	3039490	ArgumentList	id		3039481	1					
ANR	3039491	Argument	id		3039481	0					
ANR	3039492	Identifier	id		3039481	0					
ANR	3039493	Argument	timeslice		3039481	1					
ANR	3039494	Identifier	timeslice		3039481	0					
ANR	3039495	ReturnType	bool		3039481	1					
ANR	3039496	Identifier	DaemonCore :: GetTimerTimeslice		3039481	2					
ANR	3039497	ParameterList	"int id , Timeslice & timeslice"		3039481	3					
ANR	3039498	Parameter	int id	935:36:26065:26070	3039481	0	True				
ANR	3039499	ParameterType	int		3039481	0					
ANR	3039500	Identifier	id		3039481	1					
ANR	3039501	Parameter	Timeslice & timeslice	935:44:26073:26092	3039481	1	True				
ANR	3039502	ParameterType	Timeslice &		3039481	0					
ANR	3039503	Identifier	timeslice		3039481	1					
ANR	3039504	CFGEntryNode	ENTRY		3039481		True				
ANR	3039505	CFGExitNode	EXIT		3039481		True				
ANR	3039506	Symbol	timeslice		3039481						
ANR	3039507	Symbol	t		3039481						
ANR	3039508	Symbol	id		3039481						
ANR	3039509	Symbol	t . GetTimerTimeslice		3039481						
ANR	3039510	Function	DaemonCore :: Register_Command	943:0:26224:28656							
ANR	3039511	FunctionDef	"DaemonCore :: Register_Command (int command , const char * command_descrip , CommandHandler handler , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , int is_cpp , bool force_authentication , int wait_for_payload)"		3039510	0					
ANR	3039512	CompoundStatement		948:0:26508:28656	3039510	0					
ANR	3039513	IdentifierDeclStatement	int i ;	949:4:26514:26523	3039510	0	True				
ANR	3039514	IdentifierDecl	i		3039510	0					
ANR	3039515	IdentifierDeclType	int		3039510	0					
ANR	3039516	Identifier	i		3039510	1					
ANR	3039517	IdentifierDeclStatement	int j ;	950:4:26544:26553	3039510	1	True				
ANR	3039518	IdentifierDecl	j		3039510	0					
ANR	3039519	IdentifierDeclType	int		3039510	0					
ANR	3039520	Identifier	j		3039510	1					
ANR	3039521	IfStatement	if ( handler == 0 && handlercpp == 0 )		3039510	2					
ANR	3039522	Condition	handler == 0 && handlercpp == 0	952:8:26587:26617	3039510	0	True				
ANR	3039523	AndExpression	handler == 0 && handlercpp == 0		3039510	0		&&			
ANR	3039524	EqualityExpression	handler == 0		3039510	0		==			
ANR	3039525	Identifier	handler		3039510	0					
ANR	3039526	PrimaryExpression	0		3039510	1					
ANR	3039527	EqualityExpression	handlercpp == 0		3039510	1		==			
ANR	3039528	Identifier	handlercpp		3039510	0					
ANR	3039529	PrimaryExpression	0		3039510	1					
ANR	3039530	CompoundStatement		5:42:112:112	3039510	1					
ANR	3039531	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Can't register NULL command handler\\n"" )"	953:2:26625:26687	3039510	0	True				
ANR	3039532	CallExpression	"dprintf ( D_DAEMONCORE , ""Can't register NULL command handler\\n"" )"		3039510	0					
ANR	3039533	Callee	dprintf		3039510	0					
ANR	3039534	Identifier	dprintf		3039510	0					
ANR	3039535	ArgumentList	D_DAEMONCORE		3039510	1					
ANR	3039536	Argument	D_DAEMONCORE		3039510	0					
ANR	3039537	Identifier	D_DAEMONCORE		3039510	0					
ANR	3039538	Argument	"""Can't register NULL command handler\\n"""		3039510	1					
ANR	3039539	PrimaryExpression	"""Can't register NULL command handler\\n"""		3039510	0					
ANR	3039540	ReturnStatement	return - 1 ;	954:2:26691:26700	3039510	1	True				
ANR	3039541	UnaryOperationExpression	- 1		3039510	0					
ANR	3039542	UnaryOperator	-		3039510	0					
ANR	3039543	PrimaryExpression	1		3039510	1					
ANR	3039544	IfStatement	if ( nCommand >= maxCommand )		3039510	3					
ANR	3039545	Condition	nCommand >= maxCommand	957:7:26716:26737	3039510	0	True				
ANR	3039546	RelationalExpression	nCommand >= maxCommand		3039510	0		>=			
ANR	3039547	Identifier	nCommand		3039510	0					
ANR	3039548	Identifier	maxCommand		3039510	1					
ANR	3039549	CompoundStatement		10:31:231:231	3039510	1					
ANR	3039550	ExpressionStatement	"EXCEPT ( ""# of command handlers exceeded specified maximum"" )"	958:2:26744:26802	3039510	0	True				
ANR	3039551	CallExpression	"EXCEPT ( ""# of command handlers exceeded specified maximum"" )"		3039510	0					
ANR	3039552	Callee	EXCEPT		3039510	0					
ANR	3039553	Identifier	EXCEPT		3039510	0					
ANR	3039554	ArgumentList	"""# of command handlers exceeded specified maximum"""		3039510	1					
ANR	3039555	Argument	"""# of command handlers exceeded specified maximum"""		3039510	0					
ANR	3039556	PrimaryExpression	"""# of command handlers exceeded specified maximum"""		3039510	0					
ANR	3039557	IfStatement	if ( command < 0 )		3039510	4					
ANR	3039558	Condition	command < 0	963:7:26941:26951	3039510	0	True				
ANR	3039559	RelationalExpression	command < 0		3039510	0		<			
ANR	3039560	Identifier	command		3039510	0					
ANR	3039561	PrimaryExpression	0		3039510	1					
ANR	3039562	CompoundStatement		16:20:445:445	3039510	1					
ANR	3039563	ExpressionStatement	i = - command % maxCommand	964:8:26964:26989	3039510	0	True				
ANR	3039564	AssignmentExpression	i = - command % maxCommand		3039510	0		=			
ANR	3039565	Identifier	i		3039510	0					
ANR	3039566	MultiplicativeExpression	- command % maxCommand		3039510	1		%			
ANR	3039567	UnaryOperationExpression	- command		3039510	0					
ANR	3039568	UnaryOperator	-		3039510	0					
ANR	3039569	Identifier	command		3039510	1					
ANR	3039570	Identifier	maxCommand		3039510	1					
ANR	3039571	ElseStatement	else		3039510	0					
ANR	3039572	CompoundStatement		18:11:493:493	3039510	0					
ANR	3039573	ExpressionStatement	i = command % maxCommand	966:8:27012:27036	3039510	0	True				
ANR	3039574	AssignmentExpression	i = command % maxCommand		3039510	0		=			
ANR	3039575	Identifier	i		3039510	0					
ANR	3039576	MultiplicativeExpression	command % maxCommand		3039510	1		%			
ANR	3039577	Identifier	command		3039510	0					
ANR	3039578	Identifier	maxCommand		3039510	1					
ANR	3039579	IfStatement	if ( ( comTable [ i ] . handler ) || ( comTable [ i ] . handlercpp ) )		3039510	5					
ANR	3039580	Condition	( comTable [ i ] . handler ) || ( comTable [ i ] . handlercpp )	970:9:27103:27151	3039510	0	True				
ANR	3039581	OrExpression	( comTable [ i ] . handler ) || ( comTable [ i ] . handlercpp )		3039510	0		||			
ANR	3039582	MemberAccess	comTable [ i ] . handler		3039510	0					
ANR	3039583	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039584	Identifier	comTable		3039510	0					
ANR	3039585	Identifier	i		3039510	1					
ANR	3039586	Identifier	handler		3039510	1					
ANR	3039587	MemberAccess	comTable [ i ] . handlercpp		3039510	1					
ANR	3039588	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039589	Identifier	comTable		3039510	0					
ANR	3039590	Identifier	i		3039510	1					
ANR	3039591	Identifier	handlercpp		3039510	1					
ANR	3039592	CompoundStatement		23:61:646:646	3039510	1					
ANR	3039593	IfStatement	if ( comTable [ i ] . num == command )		3039510	0					
ANR	3039594	Condition	comTable [ i ] . num == command	972:11:27182:27207	3039510	0	True				
ANR	3039595	EqualityExpression	comTable [ i ] . num == command		3039510	0		==			
ANR	3039596	MemberAccess	comTable [ i ] . num		3039510	0					
ANR	3039597	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039598	Identifier	comTable		3039510	0					
ANR	3039599	Identifier	i		3039510	1					
ANR	3039600	Identifier	num		3039510	1					
ANR	3039601	Identifier	command		3039510	1					
ANR	3039602	CompoundStatement		25:39:701:701	3039510	1					
ANR	3039603	ExpressionStatement	"EXCEPT ( ""DaemonCore: Same command registered twice"" )"	974:3:27240:27291	3039510	0	True				
ANR	3039604	CallExpression	"EXCEPT ( ""DaemonCore: Same command registered twice"" )"		3039510	0					
ANR	3039605	Callee	EXCEPT		3039510	0					
ANR	3039606	Identifier	EXCEPT		3039510	0					
ANR	3039607	ArgumentList	"""DaemonCore: Same command registered twice"""		3039510	1					
ANR	3039608	Argument	"""DaemonCore: Same command registered twice"""		3039510	0					
ANR	3039609	PrimaryExpression	"""DaemonCore: Same command registered twice"""		3039510	0					
ANR	3039610	ForStatement	for ( j = ( i + 1 ) % maxCommand ; j != i ; j = ( j + 1 ) % maxCommand )		3039510	1					
ANR	3039611	ForInit	j = ( i + 1 ) % maxCommand ;	978:12:27400:27424	3039510	0	True				
ANR	3039612	AssignmentExpression	j = ( i + 1 ) % maxCommand		3039510	0		=			
ANR	3039613	Identifier	j		3039510	0					
ANR	3039614	MultiplicativeExpression	( i + 1 ) % maxCommand		3039510	1		%			
ANR	3039615	AdditiveExpression	i + 1		3039510	0		+			
ANR	3039616	Identifier	i		3039510	0					
ANR	3039617	PrimaryExpression	1		3039510	1					
ANR	3039618	Identifier	maxCommand		3039510	1					
ANR	3039619	Condition	j != i	978:38:27426:27431	3039510	1	True				
ANR	3039620	EqualityExpression	j != i		3039510	0		!=			
ANR	3039621	Identifier	j		3039510	0					
ANR	3039622	Identifier	i		3039510	1					
ANR	3039623	AssignmentExpression	j = ( j + 1 ) % maxCommand	978:46:27434:27457	3039510	2	True	=			
ANR	3039624	Identifier	j		3039510	0					
ANR	3039625	MultiplicativeExpression	( j + 1 ) % maxCommand		3039510	1		%			
ANR	3039626	AdditiveExpression	j + 1		3039510	0		+			
ANR	3039627	Identifier	j		3039510	0					
ANR	3039628	PrimaryExpression	1		3039510	1					
ANR	3039629	Identifier	maxCommand		3039510	1					
ANR	3039630	CompoundStatement		31:72:951:951	3039510	3					
ANR	3039631	IfStatement	if ( ( comTable [ j ] . handler == 0 ) && ( comTable [ j ] . handlercpp == 0 ) )		3039510	0					
ANR	3039632	Condition	( comTable [ j ] . handler == 0 ) && ( comTable [ j ] . handlercpp == 0 )	979:16:27478:27536	3039510	0	True				
ANR	3039633	AndExpression	( comTable [ j ] . handler == 0 ) && ( comTable [ j ] . handlercpp == 0 )		3039510	0		&&			
ANR	3039634	EqualityExpression	comTable [ j ] . handler == 0		3039510	0		==			
ANR	3039635	MemberAccess	comTable [ j ] . handler		3039510	0					
ANR	3039636	ArrayIndexing	comTable [ j ]		3039510	0					
ANR	3039637	Identifier	comTable		3039510	0					
ANR	3039638	Identifier	j		3039510	1					
ANR	3039639	Identifier	handler		3039510	1					
ANR	3039640	PrimaryExpression	0		3039510	1					
ANR	3039641	EqualityExpression	comTable [ j ] . handlercpp == 0		3039510	1		==			
ANR	3039642	MemberAccess	comTable [ j ] . handlercpp		3039510	0					
ANR	3039643	ArrayIndexing	comTable [ j ]		3039510	0					
ANR	3039644	Identifier	comTable		3039510	0					
ANR	3039645	Identifier	j		3039510	1					
ANR	3039646	Identifier	handlercpp		3039510	1					
ANR	3039647	PrimaryExpression	0		3039510	1					
ANR	3039648	CompoundStatement		33:12:1043:1043	3039510	1					
ANR	3039649	ExpressionStatement	i = j	981:4:27558:27563	3039510	0	True				
ANR	3039650	AssignmentExpression	i = j		3039510	0		=			
ANR	3039651	Identifier	i		3039510	0					
ANR	3039652	Identifier	j		3039510	1					
ANR	3039653	BreakStatement	break ;	982:4:27569:27574	3039510	1	True				
ANR	3039654	ExpressionStatement	comTable [ i ] . num = command	988:1:27669:27694	3039510	6	True				
ANR	3039655	AssignmentExpression	comTable [ i ] . num = command		3039510	0		=			
ANR	3039656	MemberAccess	comTable [ i ] . num		3039510	0					
ANR	3039657	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039658	Identifier	comTable		3039510	0					
ANR	3039659	Identifier	i		3039510	1					
ANR	3039660	Identifier	num		3039510	1					
ANR	3039661	Identifier	command		3039510	1					
ANR	3039662	ExpressionStatement	comTable [ i ] . handler = handler	989:1:27697:27726	3039510	7	True				
ANR	3039663	AssignmentExpression	comTable [ i ] . handler = handler		3039510	0		=			
ANR	3039664	MemberAccess	comTable [ i ] . handler		3039510	0					
ANR	3039665	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039666	Identifier	comTable		3039510	0					
ANR	3039667	Identifier	i		3039510	1					
ANR	3039668	Identifier	handler		3039510	1					
ANR	3039669	Identifier	handler		3039510	1					
ANR	3039670	ExpressionStatement	comTable [ i ] . handlercpp = handlercpp	990:1:27729:27764	3039510	8	True				
ANR	3039671	AssignmentExpression	comTable [ i ] . handlercpp = handlercpp		3039510	0		=			
ANR	3039672	MemberAccess	comTable [ i ] . handlercpp		3039510	0					
ANR	3039673	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039674	Identifier	comTable		3039510	0					
ANR	3039675	Identifier	i		3039510	1					
ANR	3039676	Identifier	handlercpp		3039510	1					
ANR	3039677	Identifier	handlercpp		3039510	1					
ANR	3039678	ExpressionStatement	comTable [ i ] . is_cpp = is_cpp	991:1:27767:27794	3039510	9	True				
ANR	3039679	AssignmentExpression	comTable [ i ] . is_cpp = is_cpp		3039510	0		=			
ANR	3039680	MemberAccess	comTable [ i ] . is_cpp		3039510	0					
ANR	3039681	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039682	Identifier	comTable		3039510	0					
ANR	3039683	Identifier	i		3039510	1					
ANR	3039684	Identifier	is_cpp		3039510	1					
ANR	3039685	Identifier	is_cpp		3039510	1					
ANR	3039686	ExpressionStatement	comTable [ i ] . perm = perm	992:1:27797:27820	3039510	10	True				
ANR	3039687	AssignmentExpression	comTable [ i ] . perm = perm		3039510	0		=			
ANR	3039688	MemberAccess	comTable [ i ] . perm		3039510	0					
ANR	3039689	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039690	Identifier	comTable		3039510	0					
ANR	3039691	Identifier	i		3039510	1					
ANR	3039692	Identifier	perm		3039510	1					
ANR	3039693	Identifier	perm		3039510	1					
ANR	3039694	ExpressionStatement	comTable [ i ] . force_authentication = force_authentication	993:1:27823:27878	3039510	11	True				
ANR	3039695	AssignmentExpression	comTable [ i ] . force_authentication = force_authentication		3039510	0		=			
ANR	3039696	MemberAccess	comTable [ i ] . force_authentication		3039510	0					
ANR	3039697	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039698	Identifier	comTable		3039510	0					
ANR	3039699	Identifier	i		3039510	1					
ANR	3039700	Identifier	force_authentication		3039510	1					
ANR	3039701	Identifier	force_authentication		3039510	1					
ANR	3039702	ExpressionStatement	comTable [ i ] . service = s	994:1:27881:27904	3039510	12	True				
ANR	3039703	AssignmentExpression	comTable [ i ] . service = s		3039510	0		=			
ANR	3039704	MemberAccess	comTable [ i ] . service		3039510	0					
ANR	3039705	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039706	Identifier	comTable		3039510	0					
ANR	3039707	Identifier	i		3039510	1					
ANR	3039708	Identifier	service		3039510	1					
ANR	3039709	Identifier	s		3039510	1					
ANR	3039710	ExpressionStatement	comTable [ i ] . data_ptr = NULL	995:1:27907:27934	3039510	13	True				
ANR	3039711	AssignmentExpression	comTable [ i ] . data_ptr = NULL		3039510	0		=			
ANR	3039712	MemberAccess	comTable [ i ] . data_ptr		3039510	0					
ANR	3039713	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039714	Identifier	comTable		3039510	0					
ANR	3039715	Identifier	i		3039510	1					
ANR	3039716	Identifier	data_ptr		3039510	1					
ANR	3039717	Identifier	NULL		3039510	1					
ANR	3039718	ExpressionStatement	comTable [ i ] . dprintf_flag = dprintf_flag	996:1:27937:27976	3039510	14	True				
ANR	3039719	AssignmentExpression	comTable [ i ] . dprintf_flag = dprintf_flag		3039510	0		=			
ANR	3039720	MemberAccess	comTable [ i ] . dprintf_flag		3039510	0					
ANR	3039721	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039722	Identifier	comTable		3039510	0					
ANR	3039723	Identifier	i		3039510	1					
ANR	3039724	Identifier	dprintf_flag		3039510	1					
ANR	3039725	Identifier	dprintf_flag		3039510	1					
ANR	3039726	ExpressionStatement	comTable [ i ] . wait_for_payload = wait_for_payload	997:1:27979:28026	3039510	15	True				
ANR	3039727	AssignmentExpression	comTable [ i ] . wait_for_payload = wait_for_payload		3039510	0		=			
ANR	3039728	MemberAccess	comTable [ i ] . wait_for_payload		3039510	0					
ANR	3039729	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039730	Identifier	comTable		3039510	0					
ANR	3039731	Identifier	i		3039510	1					
ANR	3039732	Identifier	wait_for_payload		3039510	1					
ANR	3039733	Identifier	wait_for_payload		3039510	1					
ANR	3039734	ExpressionStatement	free ( comTable [ i ] . command_descrip )	998:1:28029:28062	3039510	16	True				
ANR	3039735	CallExpression	free ( comTable [ i ] . command_descrip )		3039510	0					
ANR	3039736	Callee	free		3039510	0					
ANR	3039737	Identifier	free		3039510	0					
ANR	3039738	ArgumentList	comTable [ i ] . command_descrip		3039510	1					
ANR	3039739	Argument	comTable [ i ] . command_descrip		3039510	0					
ANR	3039740	MemberAccess	comTable [ i ] . command_descrip		3039510	0					
ANR	3039741	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039742	Identifier	comTable		3039510	0					
ANR	3039743	Identifier	i		3039510	1					
ANR	3039744	Identifier	command_descrip		3039510	1					
ANR	3039745	IfStatement	if ( command_descrip )		3039510	17					
ANR	3039746	Condition	command_descrip	999:6:28070:28084	3039510	0	True				
ANR	3039747	Identifier	command_descrip		3039510	0					
ANR	3039748	ExpressionStatement	comTable [ i ] . command_descrip = strdup ( command_descrip )	1000:2:28090:28143	3039510	1	True				
ANR	3039749	AssignmentExpression	comTable [ i ] . command_descrip = strdup ( command_descrip )		3039510	0		=			
ANR	3039750	MemberAccess	comTable [ i ] . command_descrip		3039510	0					
ANR	3039751	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039752	Identifier	comTable		3039510	0					
ANR	3039753	Identifier	i		3039510	1					
ANR	3039754	Identifier	command_descrip		3039510	1					
ANR	3039755	CallExpression	strdup ( command_descrip )		3039510	1					
ANR	3039756	Callee	strdup		3039510	0					
ANR	3039757	Identifier	strdup		3039510	0					
ANR	3039758	ArgumentList	command_descrip		3039510	1					
ANR	3039759	Argument	command_descrip		3039510	0					
ANR	3039760	Identifier	command_descrip		3039510	0					
ANR	3039761	ElseStatement	else		3039510	0					
ANR	3039762	ExpressionStatement	comTable [ i ] . command_descrip = strdup ( EMPTY_DESCRIP )	1002:2:28153:28204	3039510	0	True				
ANR	3039763	AssignmentExpression	comTable [ i ] . command_descrip = strdup ( EMPTY_DESCRIP )		3039510	0		=			
ANR	3039764	MemberAccess	comTable [ i ] . command_descrip		3039510	0					
ANR	3039765	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039766	Identifier	comTable		3039510	0					
ANR	3039767	Identifier	i		3039510	1					
ANR	3039768	Identifier	command_descrip		3039510	1					
ANR	3039769	CallExpression	strdup ( EMPTY_DESCRIP )		3039510	1					
ANR	3039770	Callee	strdup		3039510	0					
ANR	3039771	Identifier	strdup		3039510	0					
ANR	3039772	ArgumentList	EMPTY_DESCRIP		3039510	1					
ANR	3039773	Argument	EMPTY_DESCRIP		3039510	0					
ANR	3039774	Identifier	EMPTY_DESCRIP		3039510	0					
ANR	3039775	ExpressionStatement	free ( comTable [ i ] . handler_descrip )	1003:1:28207:28240	3039510	18	True				
ANR	3039776	CallExpression	free ( comTable [ i ] . handler_descrip )		3039510	0					
ANR	3039777	Callee	free		3039510	0					
ANR	3039778	Identifier	free		3039510	0					
ANR	3039779	ArgumentList	comTable [ i ] . handler_descrip		3039510	1					
ANR	3039780	Argument	comTable [ i ] . handler_descrip		3039510	0					
ANR	3039781	MemberAccess	comTable [ i ] . handler_descrip		3039510	0					
ANR	3039782	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039783	Identifier	comTable		3039510	0					
ANR	3039784	Identifier	i		3039510	1					
ANR	3039785	Identifier	handler_descrip		3039510	1					
ANR	3039786	IfStatement	if ( handler_descrip )		3039510	19					
ANR	3039787	Condition	handler_descrip	1004:6:28248:28262	3039510	0	True				
ANR	3039788	Identifier	handler_descrip		3039510	0					
ANR	3039789	ExpressionStatement	comTable [ i ] . handler_descrip = strdup ( handler_descrip )	1005:2:28268:28321	3039510	1	True				
ANR	3039790	AssignmentExpression	comTable [ i ] . handler_descrip = strdup ( handler_descrip )		3039510	0		=			
ANR	3039791	MemberAccess	comTable [ i ] . handler_descrip		3039510	0					
ANR	3039792	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039793	Identifier	comTable		3039510	0					
ANR	3039794	Identifier	i		3039510	1					
ANR	3039795	Identifier	handler_descrip		3039510	1					
ANR	3039796	CallExpression	strdup ( handler_descrip )		3039510	1					
ANR	3039797	Callee	strdup		3039510	0					
ANR	3039798	Identifier	strdup		3039510	0					
ANR	3039799	ArgumentList	handler_descrip		3039510	1					
ANR	3039800	Argument	handler_descrip		3039510	0					
ANR	3039801	Identifier	handler_descrip		3039510	0					
ANR	3039802	ElseStatement	else		3039510	0					
ANR	3039803	ExpressionStatement	comTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	1007:2:28331:28382	3039510	0	True				
ANR	3039804	AssignmentExpression	comTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		3039510	0		=			
ANR	3039805	MemberAccess	comTable [ i ] . handler_descrip		3039510	0					
ANR	3039806	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039807	Identifier	comTable		3039510	0					
ANR	3039808	Identifier	i		3039510	1					
ANR	3039809	Identifier	handler_descrip		3039510	1					
ANR	3039810	CallExpression	strdup ( EMPTY_DESCRIP )		3039510	1					
ANR	3039811	Callee	strdup		3039510	0					
ANR	3039812	Identifier	strdup		3039510	0					
ANR	3039813	ArgumentList	EMPTY_DESCRIP		3039510	1					
ANR	3039814	Argument	EMPTY_DESCRIP		3039510	0					
ANR	3039815	Identifier	EMPTY_DESCRIP		3039510	0					
ANR	3039816	ExpressionStatement	nCommand ++	1010:1:28439:28449	3039510	20	True				
ANR	3039817	PostIncDecOperationExpression	nCommand ++		3039510	0					
ANR	3039818	Identifier	nCommand		3039510	0					
ANR	3039819	IncDec	++		3039510	1					
ANR	3039820	ExpressionStatement	curr_regdataptr = & ( comTable [ i ] . data_ptr )	1013:1:28497:28538	3039510	21	True				
ANR	3039821	AssignmentExpression	curr_regdataptr = & ( comTable [ i ] . data_ptr )		3039510	0		=			
ANR	3039822	Identifier	curr_regdataptr		3039510	0					
ANR	3039823	UnaryOperationExpression	& ( comTable [ i ] . data_ptr )		3039510	1					
ANR	3039824	UnaryOperator	&		3039510	0					
ANR	3039825	MemberAccess	comTable [ i ] . data_ptr		3039510	1					
ANR	3039826	ArrayIndexing	comTable [ i ]		3039510	0					
ANR	3039827	Identifier	comTable		3039510	0					
ANR	3039828	Identifier	i		3039510	1					
ANR	3039829	Identifier	data_ptr		3039510	1					
ANR	3039830	ExpressionStatement	DumpCommandTable ( D_FULLDEBUG | D_DAEMONCORE )	1016:1:28591:28635	3039510	22	True				
ANR	3039831	CallExpression	DumpCommandTable ( D_FULLDEBUG | D_DAEMONCORE )		3039510	0					
ANR	3039832	Callee	DumpCommandTable		3039510	0					
ANR	3039833	Identifier	DumpCommandTable		3039510	0					
ANR	3039834	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		3039510	1					
ANR	3039835	Argument	D_FULLDEBUG | D_DAEMONCORE		3039510	0					
ANR	3039836	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		3039510	0		|			
ANR	3039837	Identifier	D_FULLDEBUG		3039510	0					
ANR	3039838	Identifier	D_DAEMONCORE		3039510	1					
ANR	3039839	ReturnStatement	return ( command ) ;	1018:1:28639:28654	3039510	23	True				
ANR	3039840	Identifier	command		3039510	0					
ANR	3039841	ReturnType	int		3039510	1					
ANR	3039842	Identifier	DaemonCore :: Register_Command		3039510	2					
ANR	3039843	ParameterList	"int command , const char * command_descrip , CommandHandler handler , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , int is_cpp , bool force_authentication , int wait_for_payload"		3039510	3					
ANR	3039844	Parameter	int command	943:33:26257:26267	3039510	0	True				
ANR	3039845	ParameterType	int		3039510	0					
ANR	3039846	Identifier	command		3039510	1					
ANR	3039847	Parameter	const char * command_descrip	943:46:26270:26296	3039510	1	True				
ANR	3039848	ParameterType	const char *		3039510	0					
ANR	3039849	Identifier	command_descrip		3039510	1					
ANR	3039850	Parameter	CommandHandler handler	944:4:26303:26324	3039510	2	True				
ANR	3039851	ParameterType	CommandHandler		3039510	0					
ANR	3039852	Identifier	handler		3039510	1					
ANR	3039853	Parameter	CommandHandlercpp handlercpp	944:28:26327:26354	3039510	3	True				
ANR	3039854	ParameterType	CommandHandlercpp		3039510	0					
ANR	3039855	Identifier	handlercpp		3039510	1					
ANR	3039856	Parameter	const char * handler_descrip	945:4:26361:26387	3039510	4	True				
ANR	3039857	ParameterType	const char *		3039510	0					
ANR	3039858	Identifier	handler_descrip		3039510	1					
ANR	3039859	Parameter	Service * s	945:33:26390:26399	3039510	5	True				
ANR	3039860	ParameterType	Service *		3039510	0					
ANR	3039861	Identifier	s		3039510	1					
ANR	3039862	Parameter	DCpermission perm	945:45:26402:26418	3039510	6	True				
ANR	3039863	ParameterType	DCpermission		3039510	0					
ANR	3039864	Identifier	perm		3039510	1					
ANR	3039865	Parameter	int dprintf_flag	946:4:26425:26440	3039510	7	True				
ANR	3039866	ParameterType	int		3039510	0					
ANR	3039867	Identifier	dprintf_flag		3039510	1					
ANR	3039868	Parameter	int is_cpp	946:22:26443:26452	3039510	8	True				
ANR	3039869	ParameterType	int		3039510	0					
ANR	3039870	Identifier	is_cpp		3039510	1					
ANR	3039871	Parameter	bool force_authentication	946:34:26455:26479	3039510	9	True				
ANR	3039872	ParameterType	bool		3039510	0					
ANR	3039873	Identifier	force_authentication		3039510	1					
ANR	3039874	Parameter	int wait_for_payload	947:4:26486:26505	3039510	10	True				
ANR	3039875	ParameterType	int		3039510	0					
ANR	3039876	Identifier	wait_for_payload		3039510	1					
ANR	3039877	CFGEntryNode	ENTRY		3039510		True				
ANR	3039878	CFGExitNode	EXIT		3039510		True				
ANR	3039879	Symbol	curr_regdataptr		3039510						
ANR	3039880	Symbol	handler		3039510						
ANR	3039881	Symbol	comTable [ i ] . command_descrip		3039510						
ANR	3039882	Symbol	perm		3039510						
ANR	3039883	Symbol	comTable [ j ] . handler		3039510						
ANR	3039884	Symbol	comTable [ i ] . service		3039510						
ANR	3039885	Symbol	comTable [ i ] . data_ptr		3039510						
ANR	3039886	Symbol	comTable [ j ] . handlercpp		3039510						
ANR	3039887	Symbol	command_descrip		3039510						
ANR	3039888	Symbol	comTable [ i ] . is_cpp		3039510						
ANR	3039889	Symbol	comTable [ i ] . num		3039510						
ANR	3039890	Symbol	* comTable		3039510						
ANR	3039891	Symbol	handler_descrip		3039510						
ANR	3039892	Symbol	maxCommand		3039510						
ANR	3039893	Symbol	handlercpp		3039510						
ANR	3039894	Symbol	wait_for_payload		3039510						
ANR	3039895	Symbol	is_cpp		3039510						
ANR	3039896	Symbol	nCommand		3039510						
ANR	3039897	Symbol	comTable [ i ] . perm		3039510						
ANR	3039898	Symbol	NULL		3039510						
ANR	3039899	Symbol	D_DAEMONCORE		3039510						
ANR	3039900	Symbol	comTable [ i ] . wait_for_payload		3039510						
ANR	3039901	Symbol	force_authentication		3039510						
ANR	3039902	Symbol	comTable [ i ] . force_authentication		3039510						
ANR	3039903	Symbol	i		3039510						
ANR	3039904	Symbol	j		3039510						
ANR	3039905	Symbol	D_FULLDEBUG		3039510						
ANR	3039906	Symbol	dprintf_flag		3039510						
ANR	3039907	Symbol	& comTable [ i ] . data_ptr		3039510						
ANR	3039908	Symbol	comTable [ i ] . dprintf_flag		3039510						
ANR	3039909	Symbol	command		3039510						
ANR	3039910	Symbol	s		3039510						
ANR	3039911	Symbol	* i		3039510						
ANR	3039912	Symbol	* j		3039510						
ANR	3039913	Symbol	EMPTY_DESCRIP		3039510						
ANR	3039914	Symbol	comTable [ i ] . handler_descrip		3039510						
ANR	3039915	Symbol	comTable [ i ] . handler		3039510						
ANR	3039916	Symbol	comTable		3039510						
ANR	3039917	Symbol	comTable [ i ] . handlercpp		3039510						
ANR	3039918	Symbol	strdup		3039510						
ANR	3039919	Function	DaemonCore :: Cancel_Command	1021:0:28659:29102							
ANR	3039920	FunctionDef	DaemonCore :: Cancel_Command (int command)		3039919	0					
ANR	3039921	CompoundStatement		1022:0:28705:29102	3039919	0					
ANR	3039922	IdentifierDeclStatement	int i ;	1024:1:28709:28714	3039919	0	True				
ANR	3039923	IdentifierDecl	i		3039919	0					
ANR	3039924	IdentifierDeclType	int		3039919	0					
ANR	3039925	Identifier	i		3039919	1					
ANR	3039926	ForStatement	for ( i = 0 ; i < maxCommand ; i ++ )		3039919	1					
ANR	3039927	ForInit	i = 0 ;	1025:5:28721:28726	3039919	0	True				
ANR	3039928	AssignmentExpression	i = 0		3039919	0		=			
ANR	3039929	Identifier	i		3039919	0					
ANR	3039930	PrimaryExpression	0		3039919	1					
ANR	3039931	Condition	i < maxCommand	1025:12:28728:28739	3039919	1	True				
ANR	3039932	RelationalExpression	i < maxCommand		3039919	0		<			
ANR	3039933	Identifier	i		3039919	0					
ANR	3039934	Identifier	maxCommand		3039919	1					
ANR	3039935	PostIncDecOperationExpression	i ++	1025:26:28742:28744	3039919	2	True				
ANR	3039936	Identifier	i		3039919	0					
ANR	3039937	IncDec	++		3039919	1					
ANR	3039938	CompoundStatement		4:31:41:41	3039919	3					
ANR	3039939	IfStatement	if ( comTable [ i ] . num == command )		3039919	0					
ANR	3039940	Condition	comTable [ i ] . num == command	1026:6:28755:28780	3039919	0	True				
ANR	3039941	EqualityExpression	comTable [ i ] . num == command		3039919	0		==			
ANR	3039942	MemberAccess	comTable [ i ] . num		3039919	0					
ANR	3039943	ArrayIndexing	comTable [ i ]		3039919	0					
ANR	3039944	Identifier	comTable		3039919	0					
ANR	3039945	Identifier	i		3039919	1					
ANR	3039946	Identifier	num		3039919	1					
ANR	3039947	Identifier	command		3039919	1					
ANR	3039948	CompoundStatement		6:2:80:80	3039919	1					
ANR	3039949	ExpressionStatement	comTable [ i ] . num = 0	1028:3:28791:28810	3039919	0	True				
ANR	3039950	AssignmentExpression	comTable [ i ] . num = 0		3039919	0		=			
ANR	3039951	MemberAccess	comTable [ i ] . num		3039919	0					
ANR	3039952	ArrayIndexing	comTable [ i ]		3039919	0					
ANR	3039953	Identifier	comTable		3039919	0					
ANR	3039954	Identifier	i		3039919	1					
ANR	3039955	Identifier	num		3039919	1					
ANR	3039956	PrimaryExpression	0		3039919	1					
ANR	3039957	ExpressionStatement	comTable [ i ] . num = 0	1029:3:28815:28834	3039919	1	True				
ANR	3039958	AssignmentExpression	comTable [ i ] . num = 0		3039919	0		=			
ANR	3039959	MemberAccess	comTable [ i ] . num		3039919	0					
ANR	3039960	ArrayIndexing	comTable [ i ]		3039919	0					
ANR	3039961	Identifier	comTable		3039919	0					
ANR	3039962	Identifier	i		3039919	1					
ANR	3039963	Identifier	num		3039919	1					
ANR	3039964	PrimaryExpression	0		3039919	1					
ANR	3039965	ExpressionStatement	comTable [ i ] . handler = 0	1030:3:28839:28862	3039919	2	True				
ANR	3039966	AssignmentExpression	comTable [ i ] . handler = 0		3039919	0		=			
ANR	3039967	MemberAccess	comTable [ i ] . handler		3039919	0					
ANR	3039968	ArrayIndexing	comTable [ i ]		3039919	0					
ANR	3039969	Identifier	comTable		3039919	0					
ANR	3039970	Identifier	i		3039919	1					
ANR	3039971	Identifier	handler		3039919	1					
ANR	3039972	PrimaryExpression	0		3039919	1					
ANR	3039973	ExpressionStatement	comTable [ i ] . handlercpp = 0	1031:3:28867:28893	3039919	3	True				
ANR	3039974	AssignmentExpression	comTable [ i ] . handlercpp = 0		3039919	0		=			
ANR	3039975	MemberAccess	comTable [ i ] . handlercpp		3039919	0					
ANR	3039976	ArrayIndexing	comTable [ i ]		3039919	0					
ANR	3039977	Identifier	comTable		3039919	0					
ANR	3039978	Identifier	i		3039919	1					
ANR	3039979	Identifier	handlercpp		3039919	1					
ANR	3039980	PrimaryExpression	0		3039919	1					
ANR	3039981	ExpressionStatement	free ( comTable [ i ] . command_descrip )	1032:3:28898:28931	3039919	4	True				
ANR	3039982	CallExpression	free ( comTable [ i ] . command_descrip )		3039919	0					
ANR	3039983	Callee	free		3039919	0					
ANR	3039984	Identifier	free		3039919	0					
ANR	3039985	ArgumentList	comTable [ i ] . command_descrip		3039919	1					
ANR	3039986	Argument	comTable [ i ] . command_descrip		3039919	0					
ANR	3039987	MemberAccess	comTable [ i ] . command_descrip		3039919	0					
ANR	3039988	ArrayIndexing	comTable [ i ]		3039919	0					
ANR	3039989	Identifier	comTable		3039919	0					
ANR	3039990	Identifier	i		3039919	1					
ANR	3039991	Identifier	command_descrip		3039919	1					
ANR	3039992	ExpressionStatement	comTable [ i ] . command_descrip = NULL	1033:3:28936:28970	3039919	5	True				
ANR	3039993	AssignmentExpression	comTable [ i ] . command_descrip = NULL		3039919	0		=			
ANR	3039994	MemberAccess	comTable [ i ] . command_descrip		3039919	0					
ANR	3039995	ArrayIndexing	comTable [ i ]		3039919	0					
ANR	3039996	Identifier	comTable		3039919	0					
ANR	3039997	Identifier	i		3039919	1					
ANR	3039998	Identifier	command_descrip		3039919	1					
ANR	3039999	Identifier	NULL		3039919	1					
ANR	3040000	ExpressionStatement	free ( comTable [ i ] . handler_descrip )	1034:3:28975:29008	3039919	6	True				
ANR	3040001	CallExpression	free ( comTable [ i ] . handler_descrip )		3039919	0					
ANR	3040002	Callee	free		3039919	0					
ANR	3040003	Identifier	free		3039919	0					
ANR	3040004	ArgumentList	comTable [ i ] . handler_descrip		3039919	1					
ANR	3040005	Argument	comTable [ i ] . handler_descrip		3039919	0					
ANR	3040006	MemberAccess	comTable [ i ] . handler_descrip		3039919	0					
ANR	3040007	ArrayIndexing	comTable [ i ]		3039919	0					
ANR	3040008	Identifier	comTable		3039919	0					
ANR	3040009	Identifier	i		3039919	1					
ANR	3040010	Identifier	handler_descrip		3039919	1					
ANR	3040011	ExpressionStatement	comTable [ i ] . handler_descrip = NULL	1035:3:29013:29047	3039919	7	True				
ANR	3040012	AssignmentExpression	comTable [ i ] . handler_descrip = NULL		3039919	0		=			
ANR	3040013	MemberAccess	comTable [ i ] . handler_descrip		3039919	0					
ANR	3040014	ArrayIndexing	comTable [ i ]		3039919	0					
ANR	3040015	Identifier	comTable		3039919	0					
ANR	3040016	Identifier	i		3039919	1					
ANR	3040017	Identifier	handler_descrip		3039919	1					
ANR	3040018	Identifier	NULL		3039919	1					
ANR	3040019	ExpressionStatement	nCommand --	1036:3:29052:29062	3039919	8	True				
ANR	3040020	PostIncDecOperationExpression	nCommand --		3039919	0					
ANR	3040021	Identifier	nCommand		3039919	0					
ANR	3040022	IncDec	--		3039919	1					
ANR	3040023	ReturnStatement	return TRUE ;	1037:3:29067:29078	3039919	9	True				
ANR	3040024	Identifier	TRUE		3039919	0					
ANR	3040025	ReturnStatement	return FALSE ;	1040:1:29088:29100	3039919	2	True				
ANR	3040026	Identifier	FALSE		3039919	0					
ANR	3040027	ReturnType	int		3039919	1					
ANR	3040028	Identifier	DaemonCore :: Cancel_Command		3039919	2					
ANR	3040029	ParameterList	int command		3039919	3					
ANR	3040030	Parameter	int command	1021:32:28691:28701	3039919	0	True				
ANR	3040031	ParameterType	int		3039919	0					
ANR	3040032	Identifier	command		3039919	1					
ANR	3040033	CFGEntryNode	ENTRY		3039919		True				
ANR	3040034	CFGExitNode	EXIT		3039919		True				
ANR	3040035	Symbol	comTable [ i ] . command_descrip		3039919						
ANR	3040036	Symbol	nCommand		3039919						
ANR	3040037	Symbol	NULL		3039919						
ANR	3040038	Symbol	i		3039919						
ANR	3040039	Symbol	TRUE		3039919						
ANR	3040040	Symbol	command		3039919						
ANR	3040041	Symbol	comTable [ i ] . num		3039919						
ANR	3040042	Symbol	* comTable		3039919						
ANR	3040043	Symbol	* i		3039919						
ANR	3040044	Symbol	comTable [ i ] . handler_descrip		3039919						
ANR	3040045	Symbol	comTable		3039919						
ANR	3040046	Symbol	comTable [ i ] . handler		3039919						
ANR	3040047	Symbol	maxCommand		3039919						
ANR	3040048	Symbol	comTable [ i ] . handlercpp		3039919						
ANR	3040049	Symbol	FALSE		3039919						
ANR	3040050	Function	DaemonCore :: InfoCommandPort	1043:0:29105:29338							
ANR	3040051	FunctionDef	DaemonCore :: InfoCommandPort ()		3040050	0					
ANR	3040052	CompoundStatement		1044:0:29139:29338	3040050	0					
ANR	3040053	IfStatement	if ( initial_command_sock == - 1 )		3040050	0					
ANR	3040054	Condition	initial_command_sock == - 1	1045:6:29147:29172	3040050	0	True				
ANR	3040055	EqualityExpression	initial_command_sock == - 1		3040050	0		==			
ANR	3040056	Identifier	initial_command_sock		3040050	0					
ANR	3040057	UnaryOperationExpression	- 1		3040050	1					
ANR	3040058	UnaryOperator	-		3040050	0					
ANR	3040059	PrimaryExpression	1		3040050	1					
ANR	3040060	CompoundStatement		2:35:36:36	3040050	1					
ANR	3040061	ReturnStatement	return - 1 ;	1047:2:29211:29220	3040050	0	True				
ANR	3040062	UnaryOperationExpression	- 1		3040050	0					
ANR	3040063	UnaryOperator	-		3040050	0					
ANR	3040064	PrimaryExpression	1		3040050	1					
ANR	3040065	ReturnStatement	return ( ( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port ( ) ) ;	1051:1:29262:29336	3040050	1	True				
ANR	3040066	CallExpression	( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port ( )		3040050	0					
ANR	3040067	Callee	( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port		3040050	0					
ANR	3040068	PtrMemberAccess	( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port		3040050	0					
ANR	3040069	CastExpression	( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock )		3040050	0					
ANR	3040070	CastTarget	Sock *		3040050	0					
ANR	3040071	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		3040050	1					
ANR	3040072	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		3040050	0					
ANR	3040073	UnaryOperationExpression	* sockTable		3040050	0					
ANR	3040074	UnaryOperator	*		3040050	0					
ANR	3040075	Identifier	sockTable		3040050	1					
ANR	3040076	Identifier	initial_command_sock		3040050	1					
ANR	3040077	Identifier	iosock		3040050	1					
ANR	3040078	Identifier	get_port		3040050	1					
ANR	3040079	ArgumentList			3040050	1					
ANR	3040080	ReturnType	int		3040050	1					
ANR	3040081	Identifier	DaemonCore :: InfoCommandPort		3040050	2					
ANR	3040082	ParameterList			3040050	3					
ANR	3040083	CFGEntryNode	ENTRY		3040050		True				
ANR	3040084	CFGExitNode	EXIT		3040050		True				
ANR	3040085	Symbol	* ( * sockTable ) [ initial_command_sock ] . iosock		3040050						
ANR	3040086	Symbol	( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port		3040050						
ANR	3040087	Symbol	( * sockTable ) [ initial_command_sock ] . iosock		3040050						
ANR	3040088	Symbol	* * * sockTable		3040050						
ANR	3040089	Symbol	* sockTable		3040050						
ANR	3040090	Symbol	initial_command_sock		3040050						
ANR	3040091	Symbol	* * initial_command_sock		3040050						
ANR	3040092	Symbol	sockTable		3040050						
ANR	3040093	Symbol	* * sockTable		3040050						
ANR	3040094	Symbol	* initial_command_sock		3040050						
ANR	3040095	Function	DaemonCore :: InfoCommandSinfulString	1057:0:29576:30129							
ANR	3040096	FunctionDef	DaemonCore :: InfoCommandSinfulString (int pid)		3040095	0					
ANR	3040097	CompoundStatement		1058:0:29634:30129	3040095	0					
ANR	3040098	IfStatement	if ( pid == - 1 )		3040095	0					
ANR	3040099	Condition	pid == - 1	1061:6:29759:29767	3040095	0	True				
ANR	3040100	EqualityExpression	pid == - 1		3040095	0		==			
ANR	3040101	Identifier	pid		3040095	0					
ANR	3040102	UnaryOperationExpression	- 1		3040095	1					
ANR	3040103	UnaryOperator	-		3040095	0					
ANR	3040104	PrimaryExpression	1		3040095	1					
ANR	3040105	CompoundStatement		4:18:136:136	3040095	1					
ANR	3040106	ReturnStatement	return InfoCommandSinfulStringMyself ( false ) ;	1062:2:29775:29818	3040095	0	True				
ANR	3040107	CallExpression	InfoCommandSinfulStringMyself ( false )		3040095	0					
ANR	3040108	Callee	InfoCommandSinfulStringMyself		3040095	0					
ANR	3040109	Identifier	InfoCommandSinfulStringMyself		3040095	0					
ANR	3040110	ArgumentList	false		3040095	1					
ANR	3040111	Argument	false		3040095	0					
ANR	3040112	Identifier	false		3040095	0					
ANR	3040113	ElseStatement	else		3040095	0					
ANR	3040114	CompoundStatement		7:2:197:221	3040095	0					
ANR	3040115	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	1064:2:29832:29856	3040095	0	True				
ANR	3040116	IdentifierDecl	* pidinfo = NULL		3040095	0					
ANR	3040117	IdentifierDeclType	PidEntry *		3040095	0					
ANR	3040118	Identifier	pidinfo		3040095	1					
ANR	3040119	AssignmentExpression	* pidinfo = NULL		3040095	2		=			
ANR	3040120	Identifier	NULL		3040095	0					
ANR	3040121	Identifier	NULL		3040095	1					
ANR	3040122	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) < 0 ) )"		3040095	1					
ANR	3040123	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	1065:6:29864:29899	3040095	0	True				
ANR	3040124	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		3040095	0		<			
ANR	3040125	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		3040095	0					
ANR	3040126	Callee	pidTable -> lookup		3040095	0					
ANR	3040127	PtrMemberAccess	pidTable -> lookup		3040095	0					
ANR	3040128	Identifier	pidTable		3040095	0					
ANR	3040129	Identifier	lookup		3040095	1					
ANR	3040130	ArgumentList	pid		3040095	1					
ANR	3040131	Argument	pid		3040095	0					
ANR	3040132	Identifier	pid		3040095	0					
ANR	3040133	Argument	pidinfo		3040095	1					
ANR	3040134	Identifier	pidinfo		3040095	0					
ANR	3040135	PrimaryExpression	0		3040095	1					
ANR	3040136	CompoundStatement		8:44:267:267	3040095	1					
ANR	3040137	ReturnStatement	return NULL ;	1067:3:29948:29959	3040095	0	True				
ANR	3040138	Identifier	NULL		3040095	0					
ANR	3040139	IfStatement	if ( pidinfo -> sinful_string [ 0 ] == '\\0' )		3040095	2					
ANR	3040140	Condition	pidinfo -> sinful_string [ 0 ] == '\\0'	1069:7:29972:30004	3040095	0	True				
ANR	3040141	EqualityExpression	pidinfo -> sinful_string [ 0 ] == '\\0'		3040095	0		==			
ANR	3040142	ArrayIndexing	pidinfo -> sinful_string [ 0 ]		3040095	0					
ANR	3040143	PtrMemberAccess	pidinfo -> sinful_string		3040095	0					
ANR	3040144	Identifier	pidinfo		3040095	0					
ANR	3040145	Identifier	sinful_string		3040095	1					
ANR	3040146	PrimaryExpression	0		3040095	1					
ANR	3040147	PrimaryExpression	'\\0'		3040095	1					
ANR	3040148	CompoundStatement		12:43:373:373	3040095	1					
ANR	3040149	ReturnStatement	return NULL ;	1071:3:30068:30079	3040095	0	True				
ANR	3040150	Identifier	NULL		3040095	0					
ANR	3040151	ReturnStatement	return pidinfo -> sinful_string . Value ( ) ;	1073:2:30087:30124	3040095	3	True				
ANR	3040152	CallExpression	pidinfo -> sinful_string . Value ( )		3040095	0					
ANR	3040153	Callee	pidinfo -> sinful_string . Value		3040095	0					
ANR	3040154	MemberAccess	pidinfo -> sinful_string . Value		3040095	0					
ANR	3040155	PtrMemberAccess	pidinfo -> sinful_string		3040095	0					
ANR	3040156	Identifier	pidinfo		3040095	0					
ANR	3040157	Identifier	sinful_string		3040095	1					
ANR	3040158	Identifier	Value		3040095	1					
ANR	3040159	ArgumentList			3040095	1					
ANR	3040160	ReturnType	char const *		3040095	1					
ANR	3040161	Identifier	DaemonCore :: InfoCommandSinfulString		3040095	2					
ANR	3040162	ParameterList	int pid		3040095	3					
ANR	3040163	Parameter	int pid	1057:49:29625:29631	3040095	0	True				
ANR	3040164	ParameterType	int		3040095	0					
ANR	3040165	Identifier	pid		3040095	1					
ANR	3040166	CFGEntryNode	ENTRY		3040095		True				
ANR	3040167	CFGExitNode	EXIT		3040095		True				
ANR	3040168	Symbol	pidinfo		3040095						
ANR	3040169	Symbol	pidTable		3040095						
ANR	3040170	Symbol	InfoCommandSinfulStringMyself		3040095						
ANR	3040171	Symbol	* * pidinfo		3040095						
ANR	3040172	Symbol	pidinfo -> sinful_string . Value		3040095						
ANR	3040173	Symbol	NULL		3040095						
ANR	3040174	Symbol	* pidTable		3040095						
ANR	3040175	Symbol	false		3040095						
ANR	3040176	Symbol	pid		3040095						
ANR	3040177	Symbol	pidTable -> lookup		3040095						
ANR	3040178	Symbol	pidinfo -> sinful_string		3040095						
ANR	3040179	Symbol	* pidinfo		3040095						
ANR	3040180	Symbol	* pidinfo -> sinful_string		3040095						
ANR	3040181	Function	DaemonCore :: InfoCommandSinfulStringMyself	1081:0:30374:34499							
ANR	3040182	FunctionDef	DaemonCore :: InfoCommandSinfulStringMyself (bool usePrivateAddress)		3040181	0					
ANR	3040183	CompoundStatement		1083:0:30453:34499	3040181	0					
ANR	3040184	Statement	static	1084:1:30456:30461	3040181	0	True				
ANR	3040185	IdentifierDeclStatement	char * sinful_public = NULL ;	1084:8:30463:30490	3040181	1	True				
ANR	3040186	IdentifierDecl	* sinful_public = NULL		3040181	0					
ANR	3040187	IdentifierDeclType	char *		3040181	0					
ANR	3040188	Identifier	sinful_public		3040181	1					
ANR	3040189	AssignmentExpression	* sinful_public = NULL		3040181	2		=			
ANR	3040190	Identifier	NULL		3040181	0					
ANR	3040191	Identifier	NULL		3040181	1					
ANR	3040192	Statement	static	1085:1:30493:30498	3040181	2	True				
ANR	3040193	IdentifierDeclStatement	char * sinful_private = NULL ;	1085:8:30500:30528	3040181	3	True				
ANR	3040194	IdentifierDecl	* sinful_private = NULL		3040181	0					
ANR	3040195	IdentifierDeclType	char *		3040181	0					
ANR	3040196	Identifier	sinful_private		3040181	1					
ANR	3040197	AssignmentExpression	* sinful_private = NULL		3040181	2		=			
ANR	3040198	Identifier	NULL		3040181	0					
ANR	3040199	Identifier	NULL		3040181	1					
ANR	3040200	Statement	static	1086:1:30531:30536	3040181	4	True				
ANR	3040201	IdentifierDeclStatement	bool initialized_sinful_private = false ;	1086:8:30538:30577	3040181	5	True				
ANR	3040202	IdentifierDecl	initialized_sinful_private = false		3040181	0					
ANR	3040203	IdentifierDeclType	bool		3040181	0					
ANR	3040204	Identifier	initialized_sinful_private		3040181	1					
ANR	3040205	AssignmentExpression	initialized_sinful_private = false		3040181	2		=			
ANR	3040206	Identifier	false		3040181	0					
ANR	3040207	Identifier	false		3040181	1					
ANR	3040208	IfStatement	if ( m_shared_port_endpoint )		3040181	6					
ANR	3040209	Condition	m_shared_port_endpoint	1088:5:30585:30606	3040181	0	True				
ANR	3040210	Identifier	m_shared_port_endpoint		3040181	0					
ANR	3040211	CompoundStatement		10:2:354:417	3040181	1					
ANR	3040212	IdentifierDeclStatement	char const * addr = m_shared_port_endpoint -> GetMyRemoteAddress ( ) ;	1092:2:30808:30871	3040181	0	True				
ANR	3040213	IdentifierDecl	* addr = m_shared_port_endpoint -> GetMyRemoteAddress ( )		3040181	0					
ANR	3040214	IdentifierDeclType	char const *		3040181	0					
ANR	3040215	Identifier	addr		3040181	1					
ANR	3040216	AssignmentExpression	* addr = m_shared_port_endpoint -> GetMyRemoteAddress ( )		3040181	2		=			
ANR	3040217	Identifier	addr		3040181	0					
ANR	3040218	CallExpression	m_shared_port_endpoint -> GetMyRemoteAddress ( )		3040181	1					
ANR	3040219	Callee	m_shared_port_endpoint -> GetMyRemoteAddress		3040181	0					
ANR	3040220	PtrMemberAccess	m_shared_port_endpoint -> GetMyRemoteAddress		3040181	0					
ANR	3040221	Identifier	m_shared_port_endpoint		3040181	0					
ANR	3040222	Identifier	GetMyRemoteAddress		3040181	1					
ANR	3040223	ArgumentList			3040181	1					
ANR	3040224	IfStatement	if ( ! addr && usePrivateAddress )		3040181	1					
ANR	3040225	Condition	! addr && usePrivateAddress	1093:6:30879:30904	3040181	0	True				
ANR	3040226	AndExpression	! addr && usePrivateAddress		3040181	0		&&			
ANR	3040227	UnaryOperationExpression	! addr		3040181	0					
ANR	3040228	UnaryOperator	!		3040181	0					
ANR	3040229	Identifier	addr		3040181	1					
ANR	3040230	Identifier	usePrivateAddress		3040181	1					
ANR	3040231	CompoundStatement		11:35:454:454	3040181	1					
ANR	3040232	ExpressionStatement	addr = m_shared_port_endpoint -> GetMyLocalAddress ( )	1098:3:31135:31185	3040181	0	True				
ANR	3040233	AssignmentExpression	addr = m_shared_port_endpoint -> GetMyLocalAddress ( )		3040181	0		=			
ANR	3040234	Identifier	addr		3040181	0					
ANR	3040235	CallExpression	m_shared_port_endpoint -> GetMyLocalAddress ( )		3040181	1					
ANR	3040236	Callee	m_shared_port_endpoint -> GetMyLocalAddress		3040181	0					
ANR	3040237	PtrMemberAccess	m_shared_port_endpoint -> GetMyLocalAddress		3040181	0					
ANR	3040238	Identifier	m_shared_port_endpoint		3040181	0					
ANR	3040239	Identifier	GetMyLocalAddress		3040181	1					
ANR	3040240	ArgumentList			3040181	1					
ANR	3040241	IfStatement	if ( addr )		3040181	2					
ANR	3040242	Condition	addr	1100:6:31197:31200	3040181	0	True				
ANR	3040243	Identifier	addr		3040181	0					
ANR	3040244	CompoundStatement		18:13:750:750	3040181	1					
ANR	3040245	ReturnStatement	return addr ;	1101:3:31209:31220	3040181	0	True				
ANR	3040246	Identifier	addr		3040181	0					
ANR	3040247	IfStatement	if ( initial_command_sock == - 1 )		3040181	7					
ANR	3040248	Condition	initial_command_sock == - 1	1105:6:31236:31261	3040181	0	True				
ANR	3040249	EqualityExpression	initial_command_sock == - 1		3040181	0		==			
ANR	3040250	Identifier	initial_command_sock		3040181	0					
ANR	3040251	UnaryOperationExpression	- 1		3040181	1					
ANR	3040252	UnaryOperator	-		3040181	0					
ANR	3040253	PrimaryExpression	1		3040181	1					
ANR	3040254	CompoundStatement		23:35:811:811	3040181	1					
ANR	3040255	ReturnStatement	return NULL ;	1107:2:31300:31311	3040181	0	True				
ANR	3040256	Identifier	NULL		3040181	0					
ANR	3040257	IfStatement	if ( sinful_public == NULL || m_dirty_sinful )		3040181	8					
ANR	3040258	Condition	sinful_public == NULL || m_dirty_sinful	1111:5:31381:31419	3040181	0	True				
ANR	3040259	OrExpression	sinful_public == NULL || m_dirty_sinful		3040181	0		||			
ANR	3040260	EqualityExpression	sinful_public == NULL		3040181	0		==			
ANR	3040261	Identifier	sinful_public		3040181	0					
ANR	3040262	Identifier	NULL		3040181	1					
ANR	3040263	Identifier	m_dirty_sinful		3040181	1					
ANR	3040264	CompoundStatement		33:2:1022:1112	3040181	1					
ANR	3040265	ExpressionStatement	free ( sinful_public )	1112:2:31426:31447	3040181	0	True				
ANR	3040266	CallExpression	free ( sinful_public )		3040181	0					
ANR	3040267	Callee	free		3040181	0					
ANR	3040268	Identifier	free		3040181	0					
ANR	3040269	ArgumentList	sinful_public		3040181	1					
ANR	3040270	Argument	sinful_public		3040181	0					
ANR	3040271	Identifier	sinful_public		3040181	0					
ANR	3040272	ExpressionStatement	sinful_public = NULL	1113:2:31451:31471	3040181	1	True				
ANR	3040273	AssignmentExpression	sinful_public = NULL		3040181	0		=			
ANR	3040274	Identifier	sinful_public		3040181	0					
ANR	3040275	Identifier	NULL		3040181	1					
ANR	3040276	IdentifierDeclStatement	char const * addr = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public ( ) ;	1115:2:31476:31566	3040181	2	True				
ANR	3040277	IdentifierDecl	* addr = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public ( )		3040181	0					
ANR	3040278	IdentifierDeclType	char const *		3040181	0					
ANR	3040279	Identifier	addr		3040181	1					
ANR	3040280	AssignmentExpression	* addr = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public ( )		3040181	2		=			
ANR	3040281	Identifier	addr		3040181	0					
ANR	3040282	CallExpression	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public ( )		3040181	1					
ANR	3040283	Callee	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public		3040181	0					
ANR	3040284	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public		3040181	0					
ANR	3040285	CastExpression	( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock		3040181	0					
ANR	3040286	CastTarget	Sock *		3040181	0					
ANR	3040287	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		3040181	1					
ANR	3040288	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		3040181	0					
ANR	3040289	UnaryOperationExpression	* sockTable		3040181	0					
ANR	3040290	UnaryOperator	*		3040181	0					
ANR	3040291	Identifier	sockTable		3040181	1					
ANR	3040292	Identifier	initial_command_sock		3040181	1					
ANR	3040293	Identifier	iosock		3040181	1					
ANR	3040294	Identifier	get_sinful_public		3040181	1					
ANR	3040295	ArgumentList			3040181	1					
ANR	3040296	IfStatement	if ( ! addr )		3040181	3					
ANR	3040297	Condition	! addr	1116:6:31574:31578	3040181	0	True				
ANR	3040298	UnaryOperationExpression	! addr		3040181	0					
ANR	3040299	UnaryOperator	!		3040181	0					
ANR	3040300	Identifier	addr		3040181	1					
ANR	3040301	CompoundStatement		34:14:1128:1128	3040181	1					
ANR	3040302	ExpressionStatement	"EXCEPT ( ""Failed to get public address of command socket!"" )"	1117:3:31587:31644	3040181	0	True				
ANR	3040303	CallExpression	"EXCEPT ( ""Failed to get public address of command socket!"" )"		3040181	0					
ANR	3040304	Callee	EXCEPT		3040181	0					
ANR	3040305	Identifier	EXCEPT		3040181	0					
ANR	3040306	ArgumentList	"""Failed to get public address of command socket!"""		3040181	1					
ANR	3040307	Argument	"""Failed to get public address of command socket!"""		3040181	0					
ANR	3040308	PrimaryExpression	"""Failed to get public address of command socket!"""		3040181	0					
ANR	3040309	ExpressionStatement	sinful_public = strdup ( addr )	1119:2:31652:31682	3040181	4	True				
ANR	3040310	AssignmentExpression	sinful_public = strdup ( addr )		3040181	0		=			
ANR	3040311	Identifier	sinful_public		3040181	0					
ANR	3040312	CallExpression	strdup ( addr )		3040181	1					
ANR	3040313	Callee	strdup		3040181	0					
ANR	3040314	Identifier	strdup		3040181	0					
ANR	3040315	ArgumentList	addr		3040181	1					
ANR	3040316	Argument	addr		3040181	0					
ANR	3040317	Identifier	addr		3040181	0					
ANR	3040318	ExpressionStatement	m_dirty_sinful = true	1120:2:31686:31707	3040181	5	True				
ANR	3040319	AssignmentExpression	m_dirty_sinful = true		3040181	0		=			
ANR	3040320	Identifier	m_dirty_sinful		3040181	0					
ANR	3040321	Identifier	true		3040181	1					
ANR	3040322	IfStatement	if ( ! initialized_sinful_private || m_dirty_sinful )		3040181	9					
ANR	3040323	Condition	! initialized_sinful_private || m_dirty_sinful	1123:5:31718:31762	3040181	0	True				
ANR	3040324	OrExpression	! initialized_sinful_private || m_dirty_sinful		3040181	0		||			
ANR	3040325	UnaryOperationExpression	! initialized_sinful_private		3040181	0					
ANR	3040326	UnaryOperator	!		3040181	0					
ANR	3040327	Identifier	initialized_sinful_private		3040181	1					
ANR	3040328	Identifier	m_dirty_sinful		3040181	1					
ANR	3040329	CompoundStatement		46:2:1400:1409	3040181	1					
ANR	3040330	ExpressionStatement	free ( sinful_private )	1124:2:31769:31790	3040181	0	True				
ANR	3040331	CallExpression	free ( sinful_private )		3040181	0					
ANR	3040332	Callee	free		3040181	0					
ANR	3040333	Identifier	free		3040181	0					
ANR	3040334	ArgumentList	sinful_private		3040181	1					
ANR	3040335	Argument	sinful_private		3040181	0					
ANR	3040336	Identifier	sinful_private		3040181	0					
ANR	3040337	ExpressionStatement	sinful_private = NULL	1125:2:31794:31815	3040181	1	True				
ANR	3040338	AssignmentExpression	sinful_private = NULL		3040181	0		=			
ANR	3040339	Identifier	sinful_private		3040181	0					
ANR	3040340	Identifier	NULL		3040181	1					
ANR	3040341	IdentifierDeclStatement	MyString private_sinful_string ;	1127:2:31820:31850	3040181	2	True				
ANR	3040342	IdentifierDecl	private_sinful_string		3040181	0					
ANR	3040343	IdentifierDeclType	MyString		3040181	0					
ANR	3040344	Identifier	private_sinful_string		3040181	1					
ANR	3040345	IdentifierDeclStatement	char * tmp ;	1128:2:31854:31863	3040181	3	True				
ANR	3040346	IdentifierDecl	* tmp		3040181	0					
ANR	3040347	IdentifierDeclType	char *		3040181	0					
ANR	3040348	Identifier	tmp		3040181	1					
ANR	3040349	IfStatement	"if ( ( tmp = param ( ""PRIVATE_NETWORK_INTERFACE"" ) ) )"		3040181	4					
ANR	3040350	Condition	"tmp = param ( ""PRIVATE_NETWORK_INTERFACE"" )"	1129:6:31871:31912	3040181	0	True				
ANR	3040351	AssignmentExpression	"tmp = param ( ""PRIVATE_NETWORK_INTERFACE"" )"		3040181	0		=			
ANR	3040352	Identifier	tmp		3040181	0					
ANR	3040353	CallExpression	"param ( ""PRIVATE_NETWORK_INTERFACE"" )"		3040181	1					
ANR	3040354	Callee	param		3040181	0					
ANR	3040355	Identifier	param		3040181	0					
ANR	3040356	ArgumentList	"""PRIVATE_NETWORK_INTERFACE"""		3040181	1					
ANR	3040357	Argument	"""PRIVATE_NETWORK_INTERFACE"""		3040181	0					
ANR	3040358	PrimaryExpression	"""PRIVATE_NETWORK_INTERFACE"""		3040181	0					
ANR	3040359	CompoundStatement		50:3:1571:1648	3040181	1					
ANR	3040360	IdentifierDeclStatement	int port = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port ( ) ;	1130:3:31920:31993	3040181	0	True				
ANR	3040361	IdentifierDecl	port = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port ( )		3040181	0					
ANR	3040362	IdentifierDeclType	int		3040181	0					
ANR	3040363	Identifier	port		3040181	1					
ANR	3040364	AssignmentExpression	port = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port ( )		3040181	2		=			
ANR	3040365	Identifier	port		3040181	0					
ANR	3040366	CallExpression	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port ( )		3040181	1					
ANR	3040367	Callee	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port		3040181	0					
ANR	3040368	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port		3040181	0					
ANR	3040369	CastExpression	( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock		3040181	0					
ANR	3040370	CastTarget	Sock *		3040181	0					
ANR	3040371	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		3040181	1					
ANR	3040372	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		3040181	0					
ANR	3040373	UnaryOperationExpression	* sockTable		3040181	0					
ANR	3040374	UnaryOperator	*		3040181	0					
ANR	3040375	Identifier	sockTable		3040181	1					
ANR	3040376	Identifier	initial_command_sock		3040181	1					
ANR	3040377	Identifier	iosock		3040181	1					
ANR	3040378	Identifier	get_port		3040181	1					
ANR	3040379	ArgumentList			3040181	1					
ANR	3040380	IdentifierDeclStatement	std :: string private_ip ;	1131:3:31998:32020	3040181	1	True				
ANR	3040381	IdentifierDecl	private_ip		3040181	0					
ANR	3040382	IdentifierDeclType	std :: string		3040181	0					
ANR	3040383	Identifier	private_ip		3040181	1					
ANR	3040384	IdentifierDeclStatement	"bool ok = network_interface_to_ip ( ""PRIVATE_NETWORK_INTERFACE"" , tmp , private_ip ) ;"	1132:3:32025:32102	3040181	2	True				
ANR	3040385	IdentifierDecl	"ok = network_interface_to_ip ( ""PRIVATE_NETWORK_INTERFACE"" , tmp , private_ip )"		3040181	0					
ANR	3040386	IdentifierDeclType	bool		3040181	0					
ANR	3040387	Identifier	ok		3040181	1					
ANR	3040388	AssignmentExpression	"ok = network_interface_to_ip ( ""PRIVATE_NETWORK_INTERFACE"" , tmp , private_ip )"		3040181	2		=			
ANR	3040389	Identifier	ok		3040181	0					
ANR	3040390	CallExpression	"network_interface_to_ip ( ""PRIVATE_NETWORK_INTERFACE"" , tmp , private_ip )"		3040181	1					
ANR	3040391	Callee	network_interface_to_ip		3040181	0					
ANR	3040392	Identifier	network_interface_to_ip		3040181	0					
ANR	3040393	ArgumentList	"""PRIVATE_NETWORK_INTERFACE"""		3040181	1					
ANR	3040394	Argument	"""PRIVATE_NETWORK_INTERFACE"""		3040181	0					
ANR	3040395	PrimaryExpression	"""PRIVATE_NETWORK_INTERFACE"""		3040181	0					
ANR	3040396	Argument	tmp		3040181	1					
ANR	3040397	Identifier	tmp		3040181	0					
ANR	3040398	Argument	private_ip		3040181	2					
ANR	3040399	Identifier	private_ip		3040181	0					
ANR	3040400	IfStatement	if ( ! ok )		3040181	3					
ANR	3040401	Condition	! ok	1133:7:32111:32113	3040181	0	True				
ANR	3040402	UnaryOperationExpression	! ok		3040181	0					
ANR	3040403	UnaryOperator	!		3040181	0					
ANR	3040404	Identifier	ok		3040181	1					
ANR	3040405	CompoundStatement		51:13:1663:1663	3040181	1					
ANR	3040406	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to determine my private IP address using PRIVATE_NETWORK_INTERFACE=%s\\n"" , tmp )"	1134:4:32123:32239	3040181	0	True				
ANR	3040407	CallExpression	"dprintf ( D_ALWAYS , ""Failed to determine my private IP address using PRIVATE_NETWORK_INTERFACE=%s\\n"" , tmp )"		3040181	0					
ANR	3040408	Callee	dprintf		3040181	0					
ANR	3040409	Identifier	dprintf		3040181	0					
ANR	3040410	ArgumentList	D_ALWAYS		3040181	1					
ANR	3040411	Argument	D_ALWAYS		3040181	0					
ANR	3040412	Identifier	D_ALWAYS		3040181	0					
ANR	3040413	Argument	"""Failed to determine my private IP address using PRIVATE_NETWORK_INTERFACE=%s\\n"""		3040181	1					
ANR	3040414	PrimaryExpression	"""Failed to determine my private IP address using PRIVATE_NETWORK_INTERFACE=%s\\n"""		3040181	0					
ANR	3040415	Argument	tmp		3040181	2					
ANR	3040416	Identifier	tmp		3040181	0					
ANR	3040417	ElseStatement	else		3040181	0					
ANR	3040418	CompoundStatement		56:8:1800:1800	3040181	0					
ANR	3040419	ExpressionStatement	"private_sinful_string = generate_sinful ( private_ip . c_str ( ) , port )"	1139:4:32260:32325	3040181	0	True				
ANR	3040420	AssignmentExpression	"private_sinful_string = generate_sinful ( private_ip . c_str ( ) , port )"		3040181	0		=			
ANR	3040421	Identifier	private_sinful_string		3040181	0					
ANR	3040422	CallExpression	"generate_sinful ( private_ip . c_str ( ) , port )"		3040181	1					
ANR	3040423	Callee	generate_sinful		3040181	0					
ANR	3040424	Identifier	generate_sinful		3040181	0					
ANR	3040425	ArgumentList	private_ip . c_str ( )		3040181	1					
ANR	3040426	Argument	private_ip . c_str ( )		3040181	0					
ANR	3040427	CallExpression	private_ip . c_str ( )		3040181	0					
ANR	3040428	Callee	private_ip . c_str		3040181	0					
ANR	3040429	MemberAccess	private_ip . c_str		3040181	0					
ANR	3040430	Identifier	private_ip		3040181	0					
ANR	3040431	Identifier	c_str		3040181	1					
ANR	3040432	ArgumentList			3040181	1					
ANR	3040433	Argument	port		3040181	1					
ANR	3040434	Identifier	port		3040181	0					
ANR	3040435	ExpressionStatement	sinful_private = strdup ( private_sinful_string . Value ( ) )	1140:4:32331:32385	3040181	1	True				
ANR	3040436	AssignmentExpression	sinful_private = strdup ( private_sinful_string . Value ( ) )		3040181	0		=			
ANR	3040437	Identifier	sinful_private		3040181	0					
ANR	3040438	CallExpression	strdup ( private_sinful_string . Value ( ) )		3040181	1					
ANR	3040439	Callee	strdup		3040181	0					
ANR	3040440	Identifier	strdup		3040181	0					
ANR	3040441	ArgumentList	private_sinful_string . Value ( )		3040181	1					
ANR	3040442	Argument	private_sinful_string . Value ( )		3040181	0					
ANR	3040443	CallExpression	private_sinful_string . Value ( )		3040181	0					
ANR	3040444	Callee	private_sinful_string . Value		3040181	0					
ANR	3040445	MemberAccess	private_sinful_string . Value		3040181	0					
ANR	3040446	Identifier	private_sinful_string		3040181	0					
ANR	3040447	Identifier	Value		3040181	1					
ANR	3040448	ArgumentList			3040181	1					
ANR	3040449	ExpressionStatement	free ( tmp )	1142:3:32395:32404	3040181	4	True				
ANR	3040450	CallExpression	free ( tmp )		3040181	0					
ANR	3040451	Callee	free		3040181	0					
ANR	3040452	Identifier	free		3040181	0					
ANR	3040453	ArgumentList	tmp		3040181	1					
ANR	3040454	Argument	tmp		3040181	0					
ANR	3040455	Identifier	tmp		3040181	0					
ANR	3040456	ExpressionStatement	free ( m_private_network_name )	1145:2:32413:32441	3040181	5	True				
ANR	3040457	CallExpression	free ( m_private_network_name )		3040181	0					
ANR	3040458	Callee	free		3040181	0					
ANR	3040459	Identifier	free		3040181	0					
ANR	3040460	ArgumentList	m_private_network_name		3040181	1					
ANR	3040461	Argument	m_private_network_name		3040181	0					
ANR	3040462	Identifier	m_private_network_name		3040181	0					
ANR	3040463	ExpressionStatement	m_private_network_name = NULL	1146:2:32445:32474	3040181	6	True				
ANR	3040464	AssignmentExpression	m_private_network_name = NULL		3040181	0		=			
ANR	3040465	Identifier	m_private_network_name		3040181	0					
ANR	3040466	Identifier	NULL		3040181	1					
ANR	3040467	IfStatement	"if ( ( tmp = param ( ""PRIVATE_NETWORK_NAME"" ) ) )"		3040181	7					
ANR	3040468	Condition	"tmp = param ( ""PRIVATE_NETWORK_NAME"" )"	1147:6:32482:32518	3040181	0	True				
ANR	3040469	AssignmentExpression	"tmp = param ( ""PRIVATE_NETWORK_NAME"" )"		3040181	0		=			
ANR	3040470	Identifier	tmp		3040181	0					
ANR	3040471	CallExpression	"param ( ""PRIVATE_NETWORK_NAME"" )"		3040181	1					
ANR	3040472	Callee	param		3040181	0					
ANR	3040473	Identifier	param		3040181	0					
ANR	3040474	ArgumentList	"""PRIVATE_NETWORK_NAME"""		3040181	1					
ANR	3040475	Argument	"""PRIVATE_NETWORK_NAME"""		3040181	0					
ANR	3040476	PrimaryExpression	"""PRIVATE_NETWORK_NAME"""		3040181	0					
ANR	3040477	CompoundStatement		65:45:2067:2067	3040181	1					
ANR	3040478	ExpressionStatement	m_private_network_name = tmp	1148:3:32526:32554	3040181	0	True				
ANR	3040479	AssignmentExpression	m_private_network_name = tmp		3040181	0		=			
ANR	3040480	Identifier	m_private_network_name		3040181	0					
ANR	3040481	Identifier	tmp		3040181	1					
ANR	3040482	IfStatement	"if ( sinful_private == NULL && ( param_boolean ( ""NET_REMAP_ENABLE"" , false , false ) ) )"		3040181	8					
ANR	3040483	Condition	"sinful_private == NULL && ( param_boolean ( ""NET_REMAP_ENABLE"" , false , false ) )"	1152:6:32584:32661	3040181	0	True				
ANR	3040484	AndExpression	"sinful_private == NULL && ( param_boolean ( ""NET_REMAP_ENABLE"" , false , false ) )"		3040181	0		&&			
ANR	3040485	EqualityExpression	sinful_private == NULL		3040181	0		==			
ANR	3040486	Identifier	sinful_private		3040181	0					
ANR	3040487	Identifier	NULL		3040181	1					
ANR	3040488	CallExpression	"param_boolean ( ""NET_REMAP_ENABLE"" , false , false )"		3040181	1					
ANR	3040489	Callee	param_boolean		3040181	0					
ANR	3040490	Identifier	param_boolean		3040181	0					
ANR	3040491	ArgumentList	"""NET_REMAP_ENABLE"""		3040181	1					
ANR	3040492	Argument	"""NET_REMAP_ENABLE"""		3040181	0					
ANR	3040493	PrimaryExpression	"""NET_REMAP_ENABLE"""		3040181	0					
ANR	3040494	Argument	false		3040181	1					
ANR	3040495	Identifier	false		3040181	0					
ANR	3040496	Argument	false		3040181	2					
ANR	3040497	Identifier	false		3040181	0					
ANR	3040498	CompoundStatement		75:3:2354:2436	3040181	1					
ANR	3040499	IdentifierDeclStatement	struct sockaddr_in addr ;	1155:3:32733:32756	3040181	0	True				
ANR	3040500	IdentifierDecl	addr		3040181	0					
ANR	3040501	IdentifierDeclType	struct sockaddr_in		3040181	0					
ANR	3040502	Identifier	addr		3040181	1					
ANR	3040503	IdentifierDeclStatement	SOCKET_LENGTH_TYPE addr_len = sizeof ( addr ) ;	1156:3:32761:32803	3040181	1	True				
ANR	3040504	IdentifierDecl	addr_len = sizeof ( addr )		3040181	0					
ANR	3040505	IdentifierDeclType	SOCKET_LENGTH_TYPE		3040181	0					
ANR	3040506	Identifier	addr_len		3040181	1					
ANR	3040507	AssignmentExpression	addr_len = sizeof ( addr )		3040181	2		=			
ANR	3040508	Identifier	addr_len		3040181	0					
ANR	3040509	SizeofExpression	sizeof ( addr )		3040181	1					
ANR	3040510	Sizeof	sizeof		3040181	0					
ANR	3040511	SizeofOperand	addr		3040181	1					
ANR	3040512	IdentifierDeclStatement	SOCKET sockd = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc ( ) ;	1157:3:32808:32890	3040181	2	True				
ANR	3040513	IdentifierDecl	sockd = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc ( )		3040181	0					
ANR	3040514	IdentifierDeclType	SOCKET		3040181	0					
ANR	3040515	Identifier	sockd		3040181	1					
ANR	3040516	AssignmentExpression	sockd = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc ( )		3040181	2		=			
ANR	3040517	Identifier	sockd		3040181	0					
ANR	3040518	CallExpression	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc ( )		3040181	1					
ANR	3040519	Callee	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc		3040181	0					
ANR	3040520	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc		3040181	0					
ANR	3040521	CastExpression	( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock		3040181	0					
ANR	3040522	CastTarget	Sock *		3040181	0					
ANR	3040523	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		3040181	1					
ANR	3040524	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		3040181	0					
ANR	3040525	UnaryOperationExpression	* sockTable		3040181	0					
ANR	3040526	UnaryOperator	*		3040181	0					
ANR	3040527	Identifier	sockTable		3040181	1					
ANR	3040528	Identifier	initial_command_sock		3040181	1					
ANR	3040529	Identifier	iosock		3040181	1					
ANR	3040530	Identifier	get_file_desc		3040181	1					
ANR	3040531	ArgumentList			3040181	1					
ANR	3040532	IfStatement	"if ( GCB_real_getsockname ( sockd , ( struct sockaddr * ) & addr , & addr_len ) >= 0 )"		3040181	3					
ANR	3040533	Condition	"GCB_real_getsockname ( sockd , ( struct sockaddr * ) & addr , & addr_len ) >= 0"	1158:7:32899:32967	3040181	0	True				
ANR	3040534	RelationalExpression	"GCB_real_getsockname ( sockd , ( struct sockaddr * ) & addr , & addr_len ) >= 0"		3040181	0		>=			
ANR	3040535	CallExpression	"GCB_real_getsockname ( sockd , ( struct sockaddr * ) & addr , & addr_len )"		3040181	0					
ANR	3040536	Callee	GCB_real_getsockname		3040181	0					
ANR	3040537	Identifier	GCB_real_getsockname		3040181	0					
ANR	3040538	ArgumentList	sockd		3040181	1					
ANR	3040539	Argument	sockd		3040181	0					
ANR	3040540	Identifier	sockd		3040181	0					
ANR	3040541	Argument	( struct sockaddr * ) & addr		3040181	1					
ANR	3040542	CastExpression	( struct sockaddr * ) & addr		3040181	0					
ANR	3040543	CastTarget	struct sockaddr *		3040181	0					
ANR	3040544	UnaryOperationExpression	& addr		3040181	1					
ANR	3040545	UnaryOperator	&		3040181	0					
ANR	3040546	Identifier	addr		3040181	1					
ANR	3040547	Argument	& addr_len		3040181	2					
ANR	3040548	UnaryOperationExpression	& addr_len		3040181	0					
ANR	3040549	UnaryOperator	&		3040181	0					
ANR	3040550	Identifier	addr_len		3040181	1					
ANR	3040551	PrimaryExpression	0		3040181	1					
ANR	3040552	CompoundStatement		76:78:2516:2516	3040181	1					
ANR	3040553	ExpressionStatement	sinful_private = strdup ( sin_to_string ( & addr ) )	1159:4:32976:33021	3040181	0	True				
ANR	3040554	AssignmentExpression	sinful_private = strdup ( sin_to_string ( & addr ) )		3040181	0		=			
ANR	3040555	Identifier	sinful_private		3040181	0					
ANR	3040556	CallExpression	strdup ( sin_to_string ( & addr ) )		3040181	1					
ANR	3040557	Callee	strdup		3040181	0					
ANR	3040558	Identifier	strdup		3040181	0					
ANR	3040559	ArgumentList	sin_to_string ( & addr )		3040181	1					
ANR	3040560	Argument	sin_to_string ( & addr )		3040181	0					
ANR	3040561	CallExpression	sin_to_string ( & addr )		3040181	0					
ANR	3040562	Callee	sin_to_string		3040181	0					
ANR	3040563	Identifier	sin_to_string		3040181	0					
ANR	3040564	ArgumentList	& addr		3040181	1					
ANR	3040565	Argument	& addr		3040181	0					
ANR	3040566	UnaryOperationExpression	& addr		3040181	0					
ANR	3040567	UnaryOperator	&		3040181	0					
ANR	3040568	Identifier	addr		3040181	1					
ANR	3040569	ExpressionStatement	initialized_sinful_private = true	1163:2:33060:33093	3040181	9	True				
ANR	3040570	AssignmentExpression	initialized_sinful_private = true		3040181	0		=			
ANR	3040571	Identifier	initialized_sinful_private		3040181	0					
ANR	3040572	Identifier	true		3040181	1					
ANR	3040573	ExpressionStatement	m_dirty_sinful = true	1164:2:33097:33118	3040181	10	True				
ANR	3040574	AssignmentExpression	m_dirty_sinful = true		3040181	0		=			
ANR	3040575	Identifier	m_dirty_sinful		3040181	0					
ANR	3040576	Identifier	true		3040181	1					
ANR	3040577	IfStatement	if ( m_dirty_sinful )		3040181	10					
ANR	3040578	Condition	m_dirty_sinful	1167:5:33129:33142	3040181	0	True				
ANR	3040579	Identifier	m_dirty_sinful		3040181	0					
ANR	3040580	CompoundStatement		106:2:3378:3425	3040181	1					
ANR	3040581	ExpressionStatement	m_dirty_sinful = false	1168:2:33188:33210	3040181	0	True				
ANR	3040582	AssignmentExpression	m_dirty_sinful = false		3040181	0		=			
ANR	3040583	Identifier	m_dirty_sinful		3040181	0					
ANR	3040584	Identifier	false		3040181	1					
ANR	3040585	ExpressionStatement	m_sinful = Sinful ( sinful_public )	1173:2:33343:33375	3040181	1	True				
ANR	3040586	AssignmentExpression	m_sinful = Sinful ( sinful_public )		3040181	0		=			
ANR	3040587	Identifier	m_sinful		3040181	0					
ANR	3040588	CallExpression	Sinful ( sinful_public )		3040181	1					
ANR	3040589	Callee	Sinful		3040181	0					
ANR	3040590	Identifier	Sinful		3040181	0					
ANR	3040591	ArgumentList	sinful_public		3040181	1					
ANR	3040592	Argument	sinful_public		3040181	0					
ANR	3040593	Identifier	sinful_public		3040181	0					
ANR	3040594	IdentifierDeclStatement	bool publish_private_name = false ;	1177:2:33512:33545	3040181	2	True				
ANR	3040595	IdentifierDecl	publish_private_name = false		3040181	0					
ANR	3040596	IdentifierDeclType	bool		3040181	0					
ANR	3040597	Identifier	publish_private_name		3040181	1					
ANR	3040598	AssignmentExpression	publish_private_name = false		3040181	2		=			
ANR	3040599	Identifier	false		3040181	0					
ANR	3040600	Identifier	false		3040181	1					
ANR	3040601	IdentifierDeclStatement	char const * private_name = privateNetworkName ( ) ;	1179:2:33550:33597	3040181	3	True				
ANR	3040602	IdentifierDecl	* private_name = privateNetworkName ( )		3040181	0					
ANR	3040603	IdentifierDeclType	char const *		3040181	0					
ANR	3040604	Identifier	private_name		3040181	1					
ANR	3040605	AssignmentExpression	* private_name = privateNetworkName ( )		3040181	2		=			
ANR	3040606	Identifier	private_name		3040181	0					
ANR	3040607	CallExpression	privateNetworkName ( )		3040181	1					
ANR	3040608	Callee	privateNetworkName		3040181	0					
ANR	3040609	Identifier	privateNetworkName		3040181	0					
ANR	3040610	ArgumentList			3040181	1					
ANR	3040611	IfStatement	if ( private_name )		3040181	4					
ANR	3040612	Condition	private_name	1180:6:33605:33616	3040181	0	True				
ANR	3040613	Identifier	private_name		3040181	0					
ANR	3040614	CompoundStatement		98:21:3166:3166	3040181	1					
ANR	3040615	IfStatement	"if ( sinful_private && strcmp ( sinful_public , sinful_private ) )"		3040181	0					
ANR	3040616	Condition	"sinful_private && strcmp ( sinful_public , sinful_private )"	1181:7:33629:33682	3040181	0	True				
ANR	3040617	AndExpression	"sinful_private && strcmp ( sinful_public , sinful_private )"		3040181	0		&&			
ANR	3040618	Identifier	sinful_private		3040181	0					
ANR	3040619	CallExpression	"strcmp ( sinful_public , sinful_private )"		3040181	1					
ANR	3040620	Callee	strcmp		3040181	0					
ANR	3040621	Identifier	strcmp		3040181	0					
ANR	3040622	ArgumentList	sinful_public		3040181	1					
ANR	3040623	Argument	sinful_public		3040181	0					
ANR	3040624	Identifier	sinful_public		3040181	0					
ANR	3040625	Argument	sinful_private		3040181	1					
ANR	3040626	Identifier	sinful_private		3040181	0					
ANR	3040627	CompoundStatement		99:64:3232:3232	3040181	1					
ANR	3040628	ExpressionStatement	m_sinful . setPrivateAddr ( sinful_private )	1182:4:33692:33731	3040181	0	True				
ANR	3040629	CallExpression	m_sinful . setPrivateAddr ( sinful_private )		3040181	0					
ANR	3040630	Callee	m_sinful . setPrivateAddr		3040181	0					
ANR	3040631	MemberAccess	m_sinful . setPrivateAddr		3040181	0					
ANR	3040632	Identifier	m_sinful		3040181	0					
ANR	3040633	Identifier	setPrivateAddr		3040181	1					
ANR	3040634	ArgumentList	sinful_private		3040181	1					
ANR	3040635	Argument	sinful_private		3040181	0					
ANR	3040636	Identifier	sinful_private		3040181	0					
ANR	3040637	ExpressionStatement	publish_private_name = true	1183:4:33737:33764	3040181	1	True				
ANR	3040638	AssignmentExpression	publish_private_name = true		3040181	0		=			
ANR	3040639	Identifier	publish_private_name		3040181	0					
ANR	3040640	Identifier	true		3040181	1					
ANR	3040641	IdentifierDeclStatement	"char * forwarding = param ( ""TCP_FORWARDING_HOST"" ) ;"	1188:2:33832:33879	3040181	5	True				
ANR	3040642	IdentifierDecl	"* forwarding = param ( ""TCP_FORWARDING_HOST"" )"		3040181	0					
ANR	3040643	IdentifierDeclType	char *		3040181	0					
ANR	3040644	Identifier	forwarding		3040181	1					
ANR	3040645	AssignmentExpression	"* forwarding = param ( ""TCP_FORWARDING_HOST"" )"		3040181	2		=			
ANR	3040646	Identifier	forwarding		3040181	0					
ANR	3040647	CallExpression	"param ( ""TCP_FORWARDING_HOST"" )"		3040181	1					
ANR	3040648	Callee	param		3040181	0					
ANR	3040649	Identifier	param		3040181	0					
ANR	3040650	ArgumentList	"""TCP_FORWARDING_HOST"""		3040181	1					
ANR	3040651	Argument	"""TCP_FORWARDING_HOST"""		3040181	0					
ANR	3040652	PrimaryExpression	"""TCP_FORWARDING_HOST"""		3040181	0					
ANR	3040653	IfStatement	if ( forwarding )		3040181	6					
ANR	3040654	Condition	forwarding	1189:6:33887:33896	3040181	0	True				
ANR	3040655	Identifier	forwarding		3040181	0					
ANR	3040656	CompoundStatement		107:19:3446:3446	3040181	1					
ANR	3040657	ExpressionStatement	free ( forwarding )	1190:3:33905:33923	3040181	0	True				
ANR	3040658	CallExpression	free ( forwarding )		3040181	0					
ANR	3040659	Callee	free		3040181	0					
ANR	3040660	Identifier	free		3040181	0					
ANR	3040661	ArgumentList	forwarding		3040181	1					
ANR	3040662	Argument	forwarding		3040181	0					
ANR	3040663	Identifier	forwarding		3040181	0					
ANR	3040664	ExpressionStatement	m_sinful . setNoUDP ( true )	1191:3:33928:33951	3040181	1	True				
ANR	3040665	CallExpression	m_sinful . setNoUDP ( true )		3040181	0					
ANR	3040666	Callee	m_sinful . setNoUDP		3040181	0					
ANR	3040667	MemberAccess	m_sinful . setNoUDP		3040181	0					
ANR	3040668	Identifier	m_sinful		3040181	0					
ANR	3040669	Identifier	setNoUDP		3040181	1					
ANR	3040670	ArgumentList	true		3040181	1					
ANR	3040671	Argument	true		3040181	0					
ANR	3040672	Identifier	true		3040181	0					
ANR	3040673	IfStatement	if ( ! dc_ssock )		3040181	7					
ANR	3040674	Condition	! dc_ssock	1193:6:33963:33971	3040181	0	True				
ANR	3040675	UnaryOperationExpression	! dc_ssock		3040181	0					
ANR	3040676	UnaryOperator	!		3040181	0					
ANR	3040677	Identifier	dc_ssock		3040181	1					
ANR	3040678	CompoundStatement		111:18:3521:3521	3040181	1					
ANR	3040679	ExpressionStatement	m_sinful . setNoUDP ( true )	1194:3:33980:34003	3040181	0	True				
ANR	3040680	CallExpression	m_sinful . setNoUDP ( true )		3040181	0					
ANR	3040681	Callee	m_sinful . setNoUDP		3040181	0					
ANR	3040682	MemberAccess	m_sinful . setNoUDP		3040181	0					
ANR	3040683	Identifier	m_sinful		3040181	0					
ANR	3040684	Identifier	setNoUDP		3040181	1					
ANR	3040685	ArgumentList	true		3040181	1					
ANR	3040686	Argument	true		3040181	0					
ANR	3040687	Identifier	true		3040181	0					
ANR	3040688	IfStatement	if ( m_ccb_listeners )		3040181	8					
ANR	3040689	Condition	m_ccb_listeners	1197:6:34016:34030	3040181	0	True				
ANR	3040690	Identifier	m_ccb_listeners		3040181	0					
ANR	3040691	CompoundStatement		116:3:3585:3605	3040181	1					
ANR	3040692	IdentifierDeclStatement	MyString ccb_contact ;	1198:3:34039:34059	3040181	0	True				
ANR	3040693	IdentifierDecl	ccb_contact		3040181	0					
ANR	3040694	IdentifierDeclType	MyString		3040181	0					
ANR	3040695	Identifier	ccb_contact		3040181	1					
ANR	3040696	ExpressionStatement	m_ccb_listeners -> GetCCBContactString ( ccb_contact )	1199:3:34064:34113	3040181	1	True				
ANR	3040697	CallExpression	m_ccb_listeners -> GetCCBContactString ( ccb_contact )		3040181	0					
ANR	3040698	Callee	m_ccb_listeners -> GetCCBContactString		3040181	0					
ANR	3040699	PtrMemberAccess	m_ccb_listeners -> GetCCBContactString		3040181	0					
ANR	3040700	Identifier	m_ccb_listeners		3040181	0					
ANR	3040701	Identifier	GetCCBContactString		3040181	1					
ANR	3040702	ArgumentList	ccb_contact		3040181	1					
ANR	3040703	Argument	ccb_contact		3040181	0					
ANR	3040704	Identifier	ccb_contact		3040181	0					
ANR	3040705	IfStatement	if ( ! ccb_contact . IsEmpty ( ) )		3040181	2					
ANR	3040706	Condition	! ccb_contact . IsEmpty ( )	1200:7:34122:34143	3040181	0	True				
ANR	3040707	UnaryOperationExpression	! ccb_contact . IsEmpty ( )		3040181	0					
ANR	3040708	UnaryOperator	!		3040181	0					
ANR	3040709	CallExpression	ccb_contact . IsEmpty ( )		3040181	1					
ANR	3040710	Callee	ccb_contact . IsEmpty		3040181	0					
ANR	3040711	MemberAccess	ccb_contact . IsEmpty		3040181	0					
ANR	3040712	Identifier	ccb_contact		3040181	0					
ANR	3040713	Identifier	IsEmpty		3040181	1					
ANR	3040714	ArgumentList			3040181	1					
ANR	3040715	CompoundStatement		118:32:3693:3693	3040181	1					
ANR	3040716	ExpressionStatement	m_sinful . setCCBContact ( ccb_contact . Value ( ) )	1201:4:34153:34196	3040181	0	True				
ANR	3040717	CallExpression	m_sinful . setCCBContact ( ccb_contact . Value ( ) )		3040181	0					
ANR	3040718	Callee	m_sinful . setCCBContact		3040181	0					
ANR	3040719	MemberAccess	m_sinful . setCCBContact		3040181	0					
ANR	3040720	Identifier	m_sinful		3040181	0					
ANR	3040721	Identifier	setCCBContact		3040181	1					
ANR	3040722	ArgumentList	ccb_contact . Value ( )		3040181	1					
ANR	3040723	Argument	ccb_contact . Value ( )		3040181	0					
ANR	3040724	CallExpression	ccb_contact . Value ( )		3040181	0					
ANR	3040725	Callee	ccb_contact . Value		3040181	0					
ANR	3040726	MemberAccess	ccb_contact . Value		3040181	0					
ANR	3040727	Identifier	ccb_contact		3040181	0					
ANR	3040728	Identifier	Value		3040181	1					
ANR	3040729	ArgumentList			3040181	1					
ANR	3040730	ExpressionStatement	publish_private_name = true	1202:4:34202:34229	3040181	1	True				
ANR	3040731	AssignmentExpression	publish_private_name = true		3040181	0		=			
ANR	3040732	Identifier	publish_private_name		3040181	0					
ANR	3040733	Identifier	true		3040181	1					
ANR	3040734	IfStatement	if ( private_name && publish_private_name )		3040181	9					
ANR	3040735	Condition	private_name && publish_private_name	1206:6:34247:34282	3040181	0	True				
ANR	3040736	AndExpression	private_name && publish_private_name		3040181	0		&&			
ANR	3040737	Identifier	private_name		3040181	0					
ANR	3040738	Identifier	publish_private_name		3040181	1					
ANR	3040739	CompoundStatement		124:45:3832:3832	3040181	1					
ANR	3040740	ExpressionStatement	m_sinful . setPrivateNetworkName ( private_name )	1207:3:34291:34335	3040181	0	True				
ANR	3040741	CallExpression	m_sinful . setPrivateNetworkName ( private_name )		3040181	0					
ANR	3040742	Callee	m_sinful . setPrivateNetworkName		3040181	0					
ANR	3040743	MemberAccess	m_sinful . setPrivateNetworkName		3040181	0					
ANR	3040744	Identifier	m_sinful		3040181	0					
ANR	3040745	Identifier	setPrivateNetworkName		3040181	1					
ANR	3040746	ArgumentList	private_name		3040181	1					
ANR	3040747	Argument	private_name		3040181	0					
ANR	3040748	Identifier	private_name		3040181	0					
ANR	3040749	IfStatement	if ( usePrivateAddress )		3040181	11					
ANR	3040750	Condition	usePrivateAddress	1211:5:34350:34366	3040181	0	True				
ANR	3040751	Identifier	usePrivateAddress		3040181	0					
ANR	3040752	CompoundStatement		129:25:3916:3916	3040181	1					
ANR	3040753	IfStatement	if ( sinful_private )		3040181	0					
ANR	3040754	Condition	sinful_private	1212:6:34378:34391	3040181	0	True				
ANR	3040755	Identifier	sinful_private		3040181	0					
ANR	3040756	CompoundStatement		130:23:3941:3941	3040181	1					
ANR	3040757	ReturnStatement	return sinful_private ;	1213:3:34400:34421	3040181	0	True				
ANR	3040758	Identifier	sinful_private		3040181	0					
ANR	3040759	ElseStatement	else		3040181	0					
ANR	3040760	CompoundStatement		133:7:3980:3980	3040181	0					
ANR	3040761	ReturnStatement	return sinful_public ;	1216:3:34439:34459	3040181	0	True				
ANR	3040762	Identifier	sinful_public		3040181	0					
ANR	3040763	ReturnStatement	return m_sinful . getSinful ( ) ;	1220:1:34470:34497	3040181	12	True				
ANR	3040764	CallExpression	m_sinful . getSinful ( )		3040181	0					
ANR	3040765	Callee	m_sinful . getSinful		3040181	0					
ANR	3040766	MemberAccess	m_sinful . getSinful		3040181	0					
ANR	3040767	Identifier	m_sinful		3040181	0					
ANR	3040768	Identifier	getSinful		3040181	1					
ANR	3040769	ArgumentList			3040181	1					
ANR	3040770	ReturnType	char const *		3040181	1					
ANR	3040771	Identifier	DaemonCore :: InfoCommandSinfulStringMyself		3040181	2					
ANR	3040772	ParameterList	bool usePrivateAddress		3040181	3					
ANR	3040773	Parameter	bool usePrivateAddress	1082:42:30429:30450	3040181	0	True				
ANR	3040774	ParameterType	bool		3040181	0					
ANR	3040775	Identifier	usePrivateAddress		3040181	1					
ANR	3040776	CFGEntryNode	ENTRY		3040181		True				
ANR	3040777	CFGExitNode	EXIT		3040181		True				
ANR	3040778	Symbol	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public		3040181						
ANR	3040779	Symbol	publish_private_name		3040181						
ANR	3040780	Symbol	sin_to_string		3040181						
ANR	3040781	Symbol	private_sinful_string		3040181						
ANR	3040782	Symbol	* * initial_command_sock		3040181						
ANR	3040783	Symbol	tmp		3040181						
ANR	3040784	Symbol	addr_len		3040181						
ANR	3040785	Symbol	m_sinful . getSinful		3040181						
ANR	3040786	Symbol	strcmp		3040181						
ANR	3040787	Symbol	NULL		3040181						
ANR	3040788	Symbol	sockTable		3040181						
ANR	3040789	Symbol	sockd		3040181						
ANR	3040790	Symbol	param_boolean		3040181						
ANR	3040791	Symbol	network_interface_to_ip		3040181						
ANR	3040792	Symbol	m_ccb_listeners		3040181						
ANR	3040793	Symbol	* m_shared_port_endpoint		3040181						
ANR	3040794	Symbol	ccb_contact		3040181						
ANR	3040795	Symbol	port		3040181						
ANR	3040796	Symbol	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port		3040181						
ANR	3040797	Symbol	true		3040181						
ANR	3040798	Symbol	* initial_command_sock		3040181						
ANR	3040799	Symbol	private_ip . c_str		3040181						
ANR	3040800	Symbol	m_sinful		3040181						
ANR	3040801	Symbol	ccb_contact . Value		3040181						
ANR	3040802	Symbol	initialized_sinful_private		3040181						
ANR	3040803	Symbol	m_dirty_sinful		3040181						
ANR	3040804	Symbol	* * sockTable		3040181						
ANR	3040805	Symbol	forwarding		3040181						
ANR	3040806	Symbol	& addr_len		3040181						
ANR	3040807	Symbol	private_ip		3040181						
ANR	3040808	Symbol	m_shared_port_endpoint -> GetMyRemoteAddress		3040181						
ANR	3040809	Symbol	dc_ssock		3040181						
ANR	3040810	Symbol	( * sockTable ) [ initial_command_sock ] . iosock		3040181						
ANR	3040811	Symbol	param		3040181						
ANR	3040812	Symbol	private_sinful_string . Value		3040181						
ANR	3040813	Symbol	m_shared_port_endpoint -> GetMyLocalAddress		3040181						
ANR	3040814	Symbol	Sinful		3040181						
ANR	3040815	Symbol	addr		3040181						
ANR	3040816	Symbol	ok		3040181						
ANR	3040817	Symbol	GCB_real_getsockname		3040181						
ANR	3040818	Symbol	private_name		3040181						
ANR	3040819	Symbol	m_private_network_name		3040181						
ANR	3040820	Symbol	& addr		3040181						
ANR	3040821	Symbol	* * * sockTable		3040181						
ANR	3040822	Symbol	false		3040181						
ANR	3040823	Symbol	D_ALWAYS		3040181						
ANR	3040824	Symbol	sinful_public		3040181						
ANR	3040825	Symbol	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc		3040181						
ANR	3040826	Symbol	* ( * sockTable ) [ initial_command_sock ] . iosock		3040181						
ANR	3040827	Symbol	* sockTable		3040181						
ANR	3040828	Symbol	m_shared_port_endpoint		3040181						
ANR	3040829	Symbol	initial_command_sock		3040181						
ANR	3040830	Symbol	generate_sinful		3040181						
ANR	3040831	Symbol	ccb_contact . IsEmpty		3040181						
ANR	3040832	Symbol	sinful_private		3040181						
ANR	3040833	Symbol	strdup		3040181						
ANR	3040834	Symbol	usePrivateAddress		3040181						
ANR	3040835	Symbol	privateNetworkName		3040181						
ANR	3040836	Function	DaemonCore :: daemonContactInfoChanged	1223:0:34502:34592							
ANR	3040837	FunctionDef	DaemonCore :: daemonContactInfoChanged ()		3040836	0					
ANR	3040838	CompoundStatement		1225:0:34546:34592	3040836	0					
ANR	3040839	ExpressionStatement	m_dirty_sinful = true	1226:1:34549:34570	3040836	0	True				
ANR	3040840	AssignmentExpression	m_dirty_sinful = true		3040836	0		=			
ANR	3040841	Identifier	m_dirty_sinful		3040836	0					
ANR	3040842	Identifier	true		3040836	1					
ANR	3040843	ExpressionStatement	drop_addr_file ( )	1228:1:34574:34590	3040836	1	True				
ANR	3040844	CallExpression	drop_addr_file ( )		3040836	0					
ANR	3040845	Callee	drop_addr_file		3040836	0					
ANR	3040846	Identifier	drop_addr_file		3040836	0					
ANR	3040847	ArgumentList			3040836	1					
ANR	3040848	ReturnType	void		3040836	1					
ANR	3040849	Identifier	DaemonCore :: daemonContactInfoChanged		3040836	2					
ANR	3040850	ParameterList			3040836	3					
ANR	3040851	CFGEntryNode	ENTRY		3040836		True				
ANR	3040852	CFGExitNode	EXIT		3040836		True				
ANR	3040853	Symbol	true		3040836						
ANR	3040854	Symbol	m_dirty_sinful		3040836						
ANR	3040855	Function	DaemonCore :: publicNetworkIpAddr	1231:0:34595:34707							
ANR	3040856	FunctionDef	DaemonCore :: publicNetworkIpAddr ()		3040855	0					
ANR	3040857	CompoundStatement		1232:38:34645:34707	3040855	0					
ANR	3040858	ReturnStatement	return ( const char * ) InfoCommandSinfulStringMyself ( false ) ;	1233:1:34648:34705	3040855	0	True				
ANR	3040859	CastExpression	( const char * ) InfoCommandSinfulStringMyself ( false )		3040855	0					
ANR	3040860	CastTarget	const char *		3040855	0					
ANR	3040861	CallExpression	InfoCommandSinfulStringMyself ( false )		3040855	1					
ANR	3040862	Callee	InfoCommandSinfulStringMyself		3040855	0					
ANR	3040863	Identifier	InfoCommandSinfulStringMyself		3040855	0					
ANR	3040864	ArgumentList	false		3040855	1					
ANR	3040865	Argument	false		3040855	0					
ANR	3040866	Identifier	false		3040855	0					
ANR	3040867	ReturnType	const char *		3040855	1					
ANR	3040868	Identifier	DaemonCore :: publicNetworkIpAddr		3040855	2					
ANR	3040869	ParameterList			3040855	3					
ANR	3040870	CFGEntryNode	ENTRY		3040855		True				
ANR	3040871	CFGExitNode	EXIT		3040855		True				
ANR	3040872	Symbol	InfoCommandSinfulStringMyself		3040855						
ANR	3040873	Symbol	false		3040855						
ANR	3040874	Function	DaemonCore :: privateNetworkIpAddr	1237:0:34711:34823							
ANR	3040875	FunctionDef	DaemonCore :: privateNetworkIpAddr ()		3040874	0					
ANR	3040876	CompoundStatement		1238:39:34762:34823	3040874	0					
ANR	3040877	ReturnStatement	return ( const char * ) InfoCommandSinfulStringMyself ( true ) ;	1239:1:34765:34821	3040874	0	True				
ANR	3040878	CastExpression	( const char * ) InfoCommandSinfulStringMyself ( true )		3040874	0					
ANR	3040879	CastTarget	const char *		3040874	0					
ANR	3040880	CallExpression	InfoCommandSinfulStringMyself ( true )		3040874	1					
ANR	3040881	Callee	InfoCommandSinfulStringMyself		3040874	0					
ANR	3040882	Identifier	InfoCommandSinfulStringMyself		3040874	0					
ANR	3040883	ArgumentList	true		3040874	1					
ANR	3040884	Argument	true		3040874	0					
ANR	3040885	Identifier	true		3040874	0					
ANR	3040886	ReturnType	const char *		3040874	1					
ANR	3040887	Identifier	DaemonCore :: privateNetworkIpAddr		3040874	2					
ANR	3040888	ParameterList			3040874	3					
ANR	3040889	CFGEntryNode	ENTRY		3040874		True				
ANR	3040890	CFGExitNode	EXIT		3040874		True				
ANR	3040891	Symbol	InfoCommandSinfulStringMyself		3040874						
ANR	3040892	Symbol	true		3040874						
ANR	3040893	Function	DaemonCore :: privateNetworkName	1243:0:34827:34923							
ANR	3040894	FunctionDef	DaemonCore :: privateNetworkName ()		3040893	0					
ANR	3040895	CompoundStatement		1244:37:34876:34923	3040893	0					
ANR	3040896	ReturnStatement	return ( const char * ) m_private_network_name ;	1245:1:34879:34921	3040893	0	True				
ANR	3040897	CastExpression	( const char * ) m_private_network_name		3040893	0					
ANR	3040898	CastTarget	const char *		3040893	0					
ANR	3040899	Identifier	m_private_network_name		3040893	1					
ANR	3040900	ReturnType	const char *		3040893	1					
ANR	3040901	Identifier	DaemonCore :: privateNetworkName		3040893	2					
ANR	3040902	ParameterList			3040893	3					
ANR	3040903	CFGEntryNode	ENTRY		3040893		True				
ANR	3040904	CFGExitNode	EXIT		3040893		True				
ANR	3040905	Symbol	m_private_network_name		3040893						
ANR	3040906	Function	DaemonCore :: InfoEnvironmentID	1250:0:35067:35824							
ANR	3040907	FunctionDef	"DaemonCore :: InfoEnvironmentID (PidEnvID * penvid , int pid)"		3040906	0					
ANR	3040908	CompoundStatement		1252:0:35134:35824	3040906	0					
ANR	3040909	IfStatement	if ( penvid == NULL )		3040906	0					
ANR	3040910	Condition	penvid == NULL	1253:5:35141:35154	3040906	0	True				
ANR	3040911	EqualityExpression	penvid == NULL		3040906	0		==			
ANR	3040912	Identifier	penvid		3040906	0					
ANR	3040913	Identifier	NULL		3040906	1					
ANR	3040914	CompoundStatement		2:21:22:22	3040906	1					
ANR	3040915	ReturnStatement	return NULL ;	1254:2:35161:35172	3040906	0	True				
ANR	3040916	Identifier	NULL		3040906	0					
ANR	3040917	ExpressionStatement	pidenvid_init ( penvid )	1258:1:35202:35223	3040906	1	True				
ANR	3040918	CallExpression	pidenvid_init ( penvid )		3040906	0					
ANR	3040919	Callee	pidenvid_init		3040906	0					
ANR	3040920	Identifier	pidenvid_init		3040906	0					
ANR	3040921	ArgumentList	penvid		3040906	1					
ANR	3040922	Argument	penvid		3040906	0					
ANR	3040923	Identifier	penvid		3040906	0					
ANR	3040924	IfStatement	if ( pid == - 1 )		3040906	2					
ANR	3040925	Condition	pid == - 1	1261:6:35274:35282	3040906	0	True				
ANR	3040926	EqualityExpression	pid == - 1		3040906	0		==			
ANR	3040927	Identifier	pid		3040906	0					
ANR	3040928	UnaryOperationExpression	- 1		3040906	1					
ANR	3040929	UnaryOperator	-		3040906	0					
ANR	3040930	PrimaryExpression	1		3040906	1					
ANR	3040931	CompoundStatement		10:18:151:151	3040906	1					
ANR	3040932	IfStatement	"if ( pidenvid_filter_and_insert ( penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED )"		3040906	0					
ANR	3040933	Condition	"pidenvid_filter_and_insert ( penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED"	1263:6:35295:35368	3040906	0	True				
ANR	3040934	EqualityExpression	"pidenvid_filter_and_insert ( penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED"		3040906	0		==			
ANR	3040935	CallExpression	"pidenvid_filter_and_insert ( penvid , GetEnviron ( ) )"		3040906	0					
ANR	3040936	Callee	pidenvid_filter_and_insert		3040906	0					
ANR	3040937	Identifier	pidenvid_filter_and_insert		3040906	0					
ANR	3040938	ArgumentList	penvid		3040906	1					
ANR	3040939	Argument	penvid		3040906	0					
ANR	3040940	Identifier	penvid		3040906	0					
ANR	3040941	Argument	GetEnviron ( )		3040906	1					
ANR	3040942	CallExpression	GetEnviron ( )		3040906	0					
ANR	3040943	Callee	GetEnviron		3040906	0					
ANR	3040944	Identifier	GetEnviron		3040906	0					
ANR	3040945	ArgumentList			3040906	1					
ANR	3040946	Identifier	PIDENVID_OVERSIZED		3040906	1					
ANR	3040947	CompoundStatement		14:2:238:238	3040906	1					
ANR	3040948	Statement	EXCEPT	1266:3:35378:35383	3040906	0	True				
ANR	3040949	Statement	(	1266:9:35384:35384	3040906	1	True				
ANR	3040950	Statement	"""DaemonCore::InfoEnvironmentID: Programmer error. """	1266:11:35386:35436	3040906	2	True				
ANR	3040951	Statement	"""Tried to overstuff a PidEntryID array."""	1267:4:35442:35481	3040906	3	True				
ANR	3040952	Statement	)	1267:45:35483:35483	3040906	4	True				
ANR	3040953	ExpressionStatement		1267:46:35484:35484	3040906	5	True				
ANR	3040954	ElseStatement	else		3040906	0					
ANR	3040955	CompoundStatement		22:2:438:462	3040906	0					
ANR	3040956	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	1273:2:35573:35597	3040906	0	True				
ANR	3040957	IdentifierDecl	* pidinfo = NULL		3040906	0					
ANR	3040958	IdentifierDeclType	PidEntry *		3040906	0					
ANR	3040959	Identifier	pidinfo		3040906	1					
ANR	3040960	AssignmentExpression	* pidinfo = NULL		3040906	2		=			
ANR	3040961	Identifier	NULL		3040906	0					
ANR	3040962	Identifier	NULL		3040906	1					
ANR	3040963	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) < 0 ) )"		3040906	1					
ANR	3040964	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	1274:6:35605:35640	3040906	0	True				
ANR	3040965	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		3040906	0		<			
ANR	3040966	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		3040906	0					
ANR	3040967	Callee	pidTable -> lookup		3040906	0					
ANR	3040968	PtrMemberAccess	pidTable -> lookup		3040906	0					
ANR	3040969	Identifier	pidTable		3040906	0					
ANR	3040970	Identifier	lookup		3040906	1					
ANR	3040971	ArgumentList	pid		3040906	1					
ANR	3040972	Argument	pid		3040906	0					
ANR	3040973	Identifier	pid		3040906	0					
ANR	3040974	Argument	pidinfo		3040906	1					
ANR	3040975	Identifier	pidinfo		3040906	0					
ANR	3040976	PrimaryExpression	0		3040906	1					
ANR	3040977	CompoundStatement		23:44:508:508	3040906	1					
ANR	3040978	ReturnStatement	return NULL ;	1276:3:35689:35700	3040906	0	True				
ANR	3040979	Identifier	NULL		3040906	0					
ANR	3040980	ExpressionStatement	"pidenvid_copy ( penvid , & pidinfo -> penvid )"	1280:2:35763:35802	3040906	2	True				
ANR	3040981	CallExpression	"pidenvid_copy ( penvid , & pidinfo -> penvid )"		3040906	0					
ANR	3040982	Callee	pidenvid_copy		3040906	0					
ANR	3040983	Identifier	pidenvid_copy		3040906	0					
ANR	3040984	ArgumentList	penvid		3040906	1					
ANR	3040985	Argument	penvid		3040906	0					
ANR	3040986	Identifier	penvid		3040906	0					
ANR	3040987	Argument	& pidinfo -> penvid		3040906	1					
ANR	3040988	UnaryOperationExpression	& pidinfo -> penvid		3040906	0					
ANR	3040989	UnaryOperator	&		3040906	0					
ANR	3040990	PtrMemberAccess	pidinfo -> penvid		3040906	1					
ANR	3040991	Identifier	pidinfo		3040906	0					
ANR	3040992	Identifier	penvid		3040906	1					
ANR	3040993	ReturnStatement	return penvid ;	1283:1:35809:35822	3040906	3	True				
ANR	3040994	Identifier	penvid		3040906	0					
ANR	3040995	ReturnType	PidEnvID *		3040906	1					
ANR	3040996	Identifier	DaemonCore :: InfoEnvironmentID		3040906	2					
ANR	3040997	ParameterList	"PidEnvID * penvid , int pid"		3040906	3					
ANR	3040998	Parameter	PidEnvID * penvid	1251:30:35107:35122	3040906	0	True				
ANR	3040999	ParameterType	PidEnvID *		3040906	0					
ANR	3041000	Identifier	penvid		3040906	1					
ANR	3041001	Parameter	int pid	1251:48:35125:35131	3040906	1	True				
ANR	3041002	ParameterType	int		3040906	0					
ANR	3041003	Identifier	pid		3040906	1					
ANR	3041004	CFGEntryNode	ENTRY		3040906		True				
ANR	3041005	CFGExitNode	EXIT		3040906		True				
ANR	3041006	Symbol	pidinfo		3040906						
ANR	3041007	Symbol	pidTable		3040906						
ANR	3041008	Symbol	PIDENVID_OVERSIZED		3040906						
ANR	3041009	Symbol	NULL		3040906						
ANR	3041010	Symbol	pidTable -> lookup		3040906						
ANR	3041011	Symbol	GetEnviron		3040906						
ANR	3041012	Symbol	* pidTable		3040906						
ANR	3041013	Symbol	penvid		3040906						
ANR	3041014	Symbol	& pidinfo -> penvid		3040906						
ANR	3041015	Symbol	pid		3040906						
ANR	3041016	Symbol	pidenvid_filter_and_insert		3040906						
ANR	3041017	Function	DaemonCore :: Register_Signal	1286:0:35827:38620							
ANR	3041018	FunctionDef	"DaemonCore :: Register_Signal (int sig , const char * sig_descrip , SignalHandler handler , SignalHandlercpp handlercpp , const char * handler_descrip , Service * s , int is_cpp)"		3041017	0					
ANR	3041019	CompoundStatement		1290:0:36013:38620	3041017	0					
ANR	3041020	IdentifierDeclStatement	int i ;	1291:4:36019:36028	3041017	0	True				
ANR	3041021	IdentifierDecl	i		3041017	0					
ANR	3041022	IdentifierDeclType	int		3041017	0					
ANR	3041023	Identifier	i		3041017	1					
ANR	3041024	IdentifierDeclStatement	int j ;	1292:4:36049:36058	3041017	1	True				
ANR	3041025	IdentifierDecl	j		3041017	0					
ANR	3041026	IdentifierDeclType	int		3041017	0					
ANR	3041027	Identifier	j		3041017	1					
ANR	3041028	IfStatement	if ( handler == 0 && handlercpp == 0 )		3041017	2					
ANR	3041029	Condition	handler == 0 && handlercpp == 0	1295:8:36093:36123	3041017	0	True				
ANR	3041030	AndExpression	handler == 0 && handlercpp == 0		3041017	0		&&			
ANR	3041031	EqualityExpression	handler == 0		3041017	0		==			
ANR	3041032	Identifier	handler		3041017	0					
ANR	3041033	PrimaryExpression	0		3041017	1					
ANR	3041034	EqualityExpression	handlercpp == 0		3041017	1		==			
ANR	3041035	Identifier	handlercpp		3041017	0					
ANR	3041036	PrimaryExpression	0		3041017	1					
ANR	3041037	CompoundStatement		6:42:113:113	3041017	1					
ANR	3041038	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Can't register NULL signal handler\\n"" )"	1296:2:36131:36192	3041017	0	True				
ANR	3041039	CallExpression	"dprintf ( D_DAEMONCORE , ""Can't register NULL signal handler\\n"" )"		3041017	0					
ANR	3041040	Callee	dprintf		3041017	0					
ANR	3041041	Identifier	dprintf		3041017	0					
ANR	3041042	ArgumentList	D_DAEMONCORE		3041017	1					
ANR	3041043	Argument	D_DAEMONCORE		3041017	0					
ANR	3041044	Identifier	D_DAEMONCORE		3041017	0					
ANR	3041045	Argument	"""Can't register NULL signal handler\\n"""		3041017	1					
ANR	3041046	PrimaryExpression	"""Can't register NULL signal handler\\n"""		3041017	0					
ANR	3041047	ReturnStatement	return - 1 ;	1297:2:36196:36205	3041017	1	True				
ANR	3041048	UnaryOperationExpression	- 1		3041017	0					
ANR	3041049	UnaryOperator	-		3041017	0					
ANR	3041050	PrimaryExpression	1		3041017	1					
ANR	3041051	ExpressionStatement	"dc_stats . New ( ""Signal"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"	1300:4:36218:36305	3041017	3	True				
ANR	3041052	CallExpression	"dc_stats . New ( ""Signal"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"		3041017	0					
ANR	3041053	Callee	dc_stats . New		3041017	0					
ANR	3041054	MemberAccess	dc_stats . New		3041017	0					
ANR	3041055	Identifier	dc_stats		3041017	0					
ANR	3041056	Identifier	New		3041017	1					
ANR	3041057	ArgumentList	"""Signal"""		3041017	1					
ANR	3041058	Argument	"""Signal"""		3041017	0					
ANR	3041059	PrimaryExpression	"""Signal"""		3041017	0					
ANR	3041060	Argument	handler_descrip		3041017	1					
ANR	3041061	Identifier	handler_descrip		3041017	0					
ANR	3041062	Argument	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		3041017	2					
ANR	3041063	InclusiveOrExpression	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		3041017	0		|			
ANR	3041064	Identifier	AS_COUNT		3041017	0					
ANR	3041065	InclusiveOrExpression	IS_RCT | IF_NONZERO | IF_VERBOSEPUB		3041017	1		|			
ANR	3041066	Identifier	IS_RCT		3041017	0					
ANR	3041067	InclusiveOrExpression	IF_NONZERO | IF_VERBOSEPUB		3041017	1		|			
ANR	3041068	Identifier	IF_NONZERO		3041017	0					
ANR	3041069	Identifier	IF_VERBOSEPUB		3041017	1					
ANR	3041070	SwitchStatement	switch ( sig )		3041017	4					
ANR	3041071	Condition	sig	1305:9:36522:36524	3041017	0	True				
ANR	3041072	Identifier	sig		3041017	0					
ANR	3041073	CompoundStatement		16:14:513:513	3041017	1					
ANR	3041074	Label	case SIGKILL :	1306:2:36531:36543	3041017	0	True				
ANR	3041075	Identifier	SIGKILL		3041017	0					
ANR	3041076	Label	case SIGSTOP :	1307:2:36547:36559	3041017	1	True				
ANR	3041077	Identifier	SIGSTOP		3041017	0					
ANR	3041078	Label	case SIGCONT :	1308:2:36563:36575	3041017	2	True				
ANR	3041079	Identifier	SIGCONT		3041017	0					
ANR	3041080	ExpressionStatement	"EXCEPT ( ""Trying to Register_Signal for sig %d which cannot be caught!"" , sig )"	1309:3:36580:36654	3041017	3	True				
ANR	3041081	CallExpression	"EXCEPT ( ""Trying to Register_Signal for sig %d which cannot be caught!"" , sig )"		3041017	0					
ANR	3041082	Callee	EXCEPT		3041017	0					
ANR	3041083	Identifier	EXCEPT		3041017	0					
ANR	3041084	ArgumentList	"""Trying to Register_Signal for sig %d which cannot be caught!"""		3041017	1					
ANR	3041085	Argument	"""Trying to Register_Signal for sig %d which cannot be caught!"""		3041017	0					
ANR	3041086	PrimaryExpression	"""Trying to Register_Signal for sig %d which cannot be caught!"""		3041017	0					
ANR	3041087	Argument	sig		3041017	1					
ANR	3041088	Identifier	sig		3041017	0					
ANR	3041089	BreakStatement	break ;	1310:3:36659:36664	3041017	4	True				
ANR	3041090	Label	case SIGCHLD :	1311:2:36668:36680	3041017	5	True				
ANR	3041091	Identifier	SIGCHLD		3041017	0					
ANR	3041092	ExpressionStatement	Cancel_Signal ( SIGCHLD )	1312:3:36685:36707	3041017	6	True				
ANR	3041093	CallExpression	Cancel_Signal ( SIGCHLD )		3041017	0					
ANR	3041094	Callee	Cancel_Signal		3041017	0					
ANR	3041095	Identifier	Cancel_Signal		3041017	0					
ANR	3041096	ArgumentList	SIGCHLD		3041017	1					
ANR	3041097	Argument	SIGCHLD		3041017	0					
ANR	3041098	Identifier	SIGCHLD		3041017	0					
ANR	3041099	BreakStatement	break ;	1313:3:36712:36717	3041017	7	True				
ANR	3041100	Label	default :	1314:2:36721:36728	3041017	8	True				
ANR	3041101	Identifier	default		3041017	0					
ANR	3041102	BreakStatement	break ;	1315:3:36733:36738	3041017	9	True				
ANR	3041103	IfStatement	if ( nSig >= maxSig )		3041017	5					
ANR	3041104	Condition	nSig >= maxSig	1318:7:36751:36764	3041017	0	True				
ANR	3041105	RelationalExpression	nSig >= maxSig		3041017	0		>=			
ANR	3041106	Identifier	nSig		3041017	0					
ANR	3041107	Identifier	maxSig		3041017	1					
ANR	3041108	CompoundStatement		29:23:753:753	3041017	1					
ANR	3041109	ExpressionStatement	"EXCEPT ( ""# of signal handlers exceeded specified maximum"" )"	1319:2:36771:36828	3041017	0	True				
ANR	3041110	CallExpression	"EXCEPT ( ""# of signal handlers exceeded specified maximum"" )"		3041017	0					
ANR	3041111	Callee	EXCEPT		3041017	0					
ANR	3041112	Identifier	EXCEPT		3041017	0					
ANR	3041113	ArgumentList	"""# of signal handlers exceeded specified maximum"""		3041017	1					
ANR	3041114	Argument	"""# of signal handlers exceeded specified maximum"""		3041017	0					
ANR	3041115	PrimaryExpression	"""# of signal handlers exceeded specified maximum"""		3041017	0					
ANR	3041116	IfStatement	if ( sig < 0 )		3041017	6					
ANR	3041117	Condition	sig < 0	1324:7:36967:36973	3041017	0	True				
ANR	3041118	RelationalExpression	sig < 0		3041017	0		<			
ANR	3041119	Identifier	sig		3041017	0					
ANR	3041120	PrimaryExpression	0		3041017	1					
ANR	3041121	CompoundStatement		35:16:962:962	3041017	1					
ANR	3041122	ExpressionStatement	i = - sig % maxSig	1325:8:36986:37003	3041017	0	True				
ANR	3041123	AssignmentExpression	i = - sig % maxSig		3041017	0		=			
ANR	3041124	Identifier	i		3041017	0					
ANR	3041125	MultiplicativeExpression	- sig % maxSig		3041017	1		%			
ANR	3041126	UnaryOperationExpression	- sig		3041017	0					
ANR	3041127	UnaryOperator	-		3041017	0					
ANR	3041128	Identifier	sig		3041017	1					
ANR	3041129	Identifier	maxSig		3041017	1					
ANR	3041130	ElseStatement	else		3041017	0					
ANR	3041131	CompoundStatement		37:11:1002:1002	3041017	0					
ANR	3041132	ExpressionStatement	i = sig % maxSig	1327:8:37026:37042	3041017	0	True				
ANR	3041133	AssignmentExpression	i = sig % maxSig		3041017	0		=			
ANR	3041134	Identifier	i		3041017	0					
ANR	3041135	MultiplicativeExpression	sig % maxSig		3041017	1		%			
ANR	3041136	Identifier	sig		3041017	0					
ANR	3041137	Identifier	maxSig		3041017	1					
ANR	3041138	IfStatement	if ( sigTable [ i ] . handler || sigTable [ i ] . handlercpp )		3041017	7					
ANR	3041139	Condition	sigTable [ i ] . handler || sigTable [ i ] . handlercpp	1333:8:37258:37302	3041017	0	True				
ANR	3041140	OrExpression	sigTable [ i ] . handler || sigTable [ i ] . handlercpp		3041017	0		||			
ANR	3041141	MemberAccess	sigTable [ i ] . handler		3041017	0					
ANR	3041142	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041143	Identifier	sigTable		3041017	0					
ANR	3041144	Identifier	i		3041017	1					
ANR	3041145	Identifier	handler		3041017	1					
ANR	3041146	MemberAccess	sigTable [ i ] . handlercpp		3041017	1					
ANR	3041147	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041148	Identifier	sigTable		3041017	0					
ANR	3041149	Identifier	i		3041017	1					
ANR	3041150	Identifier	handlercpp		3041017	1					
ANR	3041151	CompoundStatement		44:56:1292:1292	3041017	1					
ANR	3041152	IfStatement	if ( sigTable [ i ] . num == sig )		3041017	0					
ANR	3041153	Condition	sigTable [ i ] . num == sig	1335:11:37336:37357	3041017	0	True				
ANR	3041154	EqualityExpression	sigTable [ i ] . num == sig		3041017	0		==			
ANR	3041155	MemberAccess	sigTable [ i ] . num		3041017	0					
ANR	3041156	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041157	Identifier	sigTable		3041017	0					
ANR	3041158	Identifier	i		3041017	1					
ANR	3041159	Identifier	num		3041017	1					
ANR	3041160	Identifier	sig		3041017	1					
ANR	3041161	CompoundStatement		46:35:1346:1346	3041017	1					
ANR	3041162	ExpressionStatement	"EXCEPT ( ""DaemonCore: Same signal registered twice"" )"	1337:3:37390:37440	3041017	0	True				
ANR	3041163	CallExpression	"EXCEPT ( ""DaemonCore: Same signal registered twice"" )"		3041017	0					
ANR	3041164	Callee	EXCEPT		3041017	0					
ANR	3041165	Identifier	EXCEPT		3041017	0					
ANR	3041166	ArgumentList	"""DaemonCore: Same signal registered twice"""		3041017	1					
ANR	3041167	Argument	"""DaemonCore: Same signal registered twice"""		3041017	0					
ANR	3041168	PrimaryExpression	"""DaemonCore: Same signal registered twice"""		3041017	0					
ANR	3041169	ForStatement	for ( j = ( i + 1 ) % maxSig ; j != i ; j = ( j + 1 ) % maxSig )		3041017	1					
ANR	3041170	ForInit	j = ( i + 1 ) % maxSig ;	1341:12:37549:37569	3041017	0	True				
ANR	3041171	AssignmentExpression	j = ( i + 1 ) % maxSig		3041017	0		=			
ANR	3041172	Identifier	j		3041017	0					
ANR	3041173	MultiplicativeExpression	( i + 1 ) % maxSig		3041017	1		%			
ANR	3041174	AdditiveExpression	i + 1		3041017	0		+			
ANR	3041175	Identifier	i		3041017	0					
ANR	3041176	PrimaryExpression	1		3041017	1					
ANR	3041177	Identifier	maxSig		3041017	1					
ANR	3041178	Condition	j != i	1341:34:37571:37576	3041017	1	True				
ANR	3041179	EqualityExpression	j != i		3041017	0		!=			
ANR	3041180	Identifier	j		3041017	0					
ANR	3041181	Identifier	i		3041017	1					
ANR	3041182	AssignmentExpression	j = ( j + 1 ) % maxSig	1341:42:37579:37598	3041017	2	True	=			
ANR	3041183	Identifier	j		3041017	0					
ANR	3041184	MultiplicativeExpression	( j + 1 ) % maxSig		3041017	1		%			
ANR	3041185	AdditiveExpression	j + 1		3041017	0		+			
ANR	3041186	Identifier	j		3041017	0					
ANR	3041187	PrimaryExpression	1		3041017	1					
ANR	3041188	Identifier	maxSig		3041017	1					
ANR	3041189	CompoundStatement		52:64:1587:1587	3041017	3					
ANR	3041190	IfStatement	if ( ( sigTable [ j ] . handler == 0 ) && ( sigTable [ j ] . handlercpp == 0 ) )		3041017	0					
ANR	3041191	Condition	( sigTable [ j ] . handler == 0 ) && ( sigTable [ j ] . handlercpp == 0 )	1342:16:37619:37677	3041017	0	True				
ANR	3041192	AndExpression	( sigTable [ j ] . handler == 0 ) && ( sigTable [ j ] . handlercpp == 0 )		3041017	0		&&			
ANR	3041193	EqualityExpression	sigTable [ j ] . handler == 0		3041017	0		==			
ANR	3041194	MemberAccess	sigTable [ j ] . handler		3041017	0					
ANR	3041195	ArrayIndexing	sigTable [ j ]		3041017	0					
ANR	3041196	Identifier	sigTable		3041017	0					
ANR	3041197	Identifier	j		3041017	1					
ANR	3041198	Identifier	handler		3041017	1					
ANR	3041199	PrimaryExpression	0		3041017	1					
ANR	3041200	EqualityExpression	sigTable [ j ] . handlercpp == 0		3041017	1		==			
ANR	3041201	MemberAccess	sigTable [ j ] . handlercpp		3041017	0					
ANR	3041202	ArrayIndexing	sigTable [ j ]		3041017	0					
ANR	3041203	Identifier	sigTable		3041017	0					
ANR	3041204	Identifier	j		3041017	1					
ANR	3041205	Identifier	handlercpp		3041017	1					
ANR	3041206	PrimaryExpression	0		3041017	1					
ANR	3041207	CompoundStatement		54:12:1679:1679	3041017	1					
ANR	3041208	ExpressionStatement	i = j	1344:4:37699:37704	3041017	0	True				
ANR	3041209	AssignmentExpression	i = j		3041017	0		=			
ANR	3041210	Identifier	i		3041017	0					
ANR	3041211	Identifier	j		3041017	1					
ANR	3041212	BreakStatement	break ;	1345:4:37710:37715	3041017	1	True				
ANR	3041213	ExpressionStatement	sigTable [ i ] . num = sig	1351:1:37810:37831	3041017	8	True				
ANR	3041214	AssignmentExpression	sigTable [ i ] . num = sig		3041017	0		=			
ANR	3041215	MemberAccess	sigTable [ i ] . num		3041017	0					
ANR	3041216	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041217	Identifier	sigTable		3041017	0					
ANR	3041218	Identifier	i		3041017	1					
ANR	3041219	Identifier	num		3041017	1					
ANR	3041220	Identifier	sig		3041017	1					
ANR	3041221	ExpressionStatement	sigTable [ i ] . handler = handler	1352:1:37834:37863	3041017	9	True				
ANR	3041222	AssignmentExpression	sigTable [ i ] . handler = handler		3041017	0		=			
ANR	3041223	MemberAccess	sigTable [ i ] . handler		3041017	0					
ANR	3041224	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041225	Identifier	sigTable		3041017	0					
ANR	3041226	Identifier	i		3041017	1					
ANR	3041227	Identifier	handler		3041017	1					
ANR	3041228	Identifier	handler		3041017	1					
ANR	3041229	ExpressionStatement	sigTable [ i ] . handlercpp = handlercpp	1353:1:37866:37901	3041017	10	True				
ANR	3041230	AssignmentExpression	sigTable [ i ] . handlercpp = handlercpp		3041017	0		=			
ANR	3041231	MemberAccess	sigTable [ i ] . handlercpp		3041017	0					
ANR	3041232	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041233	Identifier	sigTable		3041017	0					
ANR	3041234	Identifier	i		3041017	1					
ANR	3041235	Identifier	handlercpp		3041017	1					
ANR	3041236	Identifier	handlercpp		3041017	1					
ANR	3041237	ExpressionStatement	sigTable [ i ] . is_cpp = is_cpp	1354:1:37904:37931	3041017	11	True				
ANR	3041238	AssignmentExpression	sigTable [ i ] . is_cpp = is_cpp		3041017	0		=			
ANR	3041239	MemberAccess	sigTable [ i ] . is_cpp		3041017	0					
ANR	3041240	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041241	Identifier	sigTable		3041017	0					
ANR	3041242	Identifier	i		3041017	1					
ANR	3041243	Identifier	is_cpp		3041017	1					
ANR	3041244	Identifier	is_cpp		3041017	1					
ANR	3041245	ExpressionStatement	sigTable [ i ] . service = s	1355:1:37934:37957	3041017	12	True				
ANR	3041246	AssignmentExpression	sigTable [ i ] . service = s		3041017	0		=			
ANR	3041247	MemberAccess	sigTable [ i ] . service		3041017	0					
ANR	3041248	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041249	Identifier	sigTable		3041017	0					
ANR	3041250	Identifier	i		3041017	1					
ANR	3041251	Identifier	service		3041017	1					
ANR	3041252	Identifier	s		3041017	1					
ANR	3041253	ExpressionStatement	sigTable [ i ] . is_blocked = FALSE	1356:1:37960:37990	3041017	13	True				
ANR	3041254	AssignmentExpression	sigTable [ i ] . is_blocked = FALSE		3041017	0		=			
ANR	3041255	MemberAccess	sigTable [ i ] . is_blocked		3041017	0					
ANR	3041256	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041257	Identifier	sigTable		3041017	0					
ANR	3041258	Identifier	i		3041017	1					
ANR	3041259	Identifier	is_blocked		3041017	1					
ANR	3041260	Identifier	FALSE		3041017	1					
ANR	3041261	ExpressionStatement	sigTable [ i ] . is_pending = FALSE	1357:1:37993:38023	3041017	14	True				
ANR	3041262	AssignmentExpression	sigTable [ i ] . is_pending = FALSE		3041017	0		=			
ANR	3041263	MemberAccess	sigTable [ i ] . is_pending		3041017	0					
ANR	3041264	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041265	Identifier	sigTable		3041017	0					
ANR	3041266	Identifier	i		3041017	1					
ANR	3041267	Identifier	is_pending		3041017	1					
ANR	3041268	Identifier	FALSE		3041017	1					
ANR	3041269	ExpressionStatement	free ( sigTable [ i ] . sig_descrip )	1358:1:38026:38055	3041017	15	True				
ANR	3041270	CallExpression	free ( sigTable [ i ] . sig_descrip )		3041017	0					
ANR	3041271	Callee	free		3041017	0					
ANR	3041272	Identifier	free		3041017	0					
ANR	3041273	ArgumentList	sigTable [ i ] . sig_descrip		3041017	1					
ANR	3041274	Argument	sigTable [ i ] . sig_descrip		3041017	0					
ANR	3041275	MemberAccess	sigTable [ i ] . sig_descrip		3041017	0					
ANR	3041276	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041277	Identifier	sigTable		3041017	0					
ANR	3041278	Identifier	i		3041017	1					
ANR	3041279	Identifier	sig_descrip		3041017	1					
ANR	3041280	IfStatement	if ( sig_descrip )		3041017	16					
ANR	3041281	Condition	sig_descrip	1359:6:38063:38073	3041017	0	True				
ANR	3041282	Identifier	sig_descrip		3041017	0					
ANR	3041283	ExpressionStatement	sigTable [ i ] . sig_descrip = strdup ( sig_descrip )	1360:2:38079:38124	3041017	1	True				
ANR	3041284	AssignmentExpression	sigTable [ i ] . sig_descrip = strdup ( sig_descrip )		3041017	0		=			
ANR	3041285	MemberAccess	sigTable [ i ] . sig_descrip		3041017	0					
ANR	3041286	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041287	Identifier	sigTable		3041017	0					
ANR	3041288	Identifier	i		3041017	1					
ANR	3041289	Identifier	sig_descrip		3041017	1					
ANR	3041290	CallExpression	strdup ( sig_descrip )		3041017	1					
ANR	3041291	Callee	strdup		3041017	0					
ANR	3041292	Identifier	strdup		3041017	0					
ANR	3041293	ArgumentList	sig_descrip		3041017	1					
ANR	3041294	Argument	sig_descrip		3041017	0					
ANR	3041295	Identifier	sig_descrip		3041017	0					
ANR	3041296	ElseStatement	else		3041017	0					
ANR	3041297	ExpressionStatement	sigTable [ i ] . sig_descrip = strdup ( EMPTY_DESCRIP )	1362:2:38134:38181	3041017	0	True				
ANR	3041298	AssignmentExpression	sigTable [ i ] . sig_descrip = strdup ( EMPTY_DESCRIP )		3041017	0		=			
ANR	3041299	MemberAccess	sigTable [ i ] . sig_descrip		3041017	0					
ANR	3041300	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041301	Identifier	sigTable		3041017	0					
ANR	3041302	Identifier	i		3041017	1					
ANR	3041303	Identifier	sig_descrip		3041017	1					
ANR	3041304	CallExpression	strdup ( EMPTY_DESCRIP )		3041017	1					
ANR	3041305	Callee	strdup		3041017	0					
ANR	3041306	Identifier	strdup		3041017	0					
ANR	3041307	ArgumentList	EMPTY_DESCRIP		3041017	1					
ANR	3041308	Argument	EMPTY_DESCRIP		3041017	0					
ANR	3041309	Identifier	EMPTY_DESCRIP		3041017	0					
ANR	3041310	ExpressionStatement	free ( sigTable [ i ] . handler_descrip )	1363:1:38184:38217	3041017	17	True				
ANR	3041311	CallExpression	free ( sigTable [ i ] . handler_descrip )		3041017	0					
ANR	3041312	Callee	free		3041017	0					
ANR	3041313	Identifier	free		3041017	0					
ANR	3041314	ArgumentList	sigTable [ i ] . handler_descrip		3041017	1					
ANR	3041315	Argument	sigTable [ i ] . handler_descrip		3041017	0					
ANR	3041316	MemberAccess	sigTable [ i ] . handler_descrip		3041017	0					
ANR	3041317	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041318	Identifier	sigTable		3041017	0					
ANR	3041319	Identifier	i		3041017	1					
ANR	3041320	Identifier	handler_descrip		3041017	1					
ANR	3041321	IfStatement	if ( handler_descrip )		3041017	18					
ANR	3041322	Condition	handler_descrip	1364:6:38225:38239	3041017	0	True				
ANR	3041323	Identifier	handler_descrip		3041017	0					
ANR	3041324	ExpressionStatement	sigTable [ i ] . handler_descrip = strdup ( handler_descrip )	1365:2:38245:38298	3041017	1	True				
ANR	3041325	AssignmentExpression	sigTable [ i ] . handler_descrip = strdup ( handler_descrip )		3041017	0		=			
ANR	3041326	MemberAccess	sigTable [ i ] . handler_descrip		3041017	0					
ANR	3041327	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041328	Identifier	sigTable		3041017	0					
ANR	3041329	Identifier	i		3041017	1					
ANR	3041330	Identifier	handler_descrip		3041017	1					
ANR	3041331	CallExpression	strdup ( handler_descrip )		3041017	1					
ANR	3041332	Callee	strdup		3041017	0					
ANR	3041333	Identifier	strdup		3041017	0					
ANR	3041334	ArgumentList	handler_descrip		3041017	1					
ANR	3041335	Argument	handler_descrip		3041017	0					
ANR	3041336	Identifier	handler_descrip		3041017	0					
ANR	3041337	ElseStatement	else		3041017	0					
ANR	3041338	ExpressionStatement	sigTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	1367:2:38308:38359	3041017	0	True				
ANR	3041339	AssignmentExpression	sigTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		3041017	0		=			
ANR	3041340	MemberAccess	sigTable [ i ] . handler_descrip		3041017	0					
ANR	3041341	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041342	Identifier	sigTable		3041017	0					
ANR	3041343	Identifier	i		3041017	1					
ANR	3041344	Identifier	handler_descrip		3041017	1					
ANR	3041345	CallExpression	strdup ( EMPTY_DESCRIP )		3041017	1					
ANR	3041346	Callee	strdup		3041017	0					
ANR	3041347	Identifier	strdup		3041017	0					
ANR	3041348	ArgumentList	EMPTY_DESCRIP		3041017	1					
ANR	3041349	Argument	EMPTY_DESCRIP		3041017	0					
ANR	3041350	Identifier	EMPTY_DESCRIP		3041017	0					
ANR	3041351	ExpressionStatement	nSig ++	1370:1:38416:38422	3041017	19	True				
ANR	3041352	PostIncDecOperationExpression	nSig ++		3041017	0					
ANR	3041353	Identifier	nSig		3041017	0					
ANR	3041354	IncDec	++		3041017	1					
ANR	3041355	ExpressionStatement	curr_regdataptr = & ( sigTable [ i ] . data_ptr )	1373:1:38470:38511	3041017	20	True				
ANR	3041356	AssignmentExpression	curr_regdataptr = & ( sigTable [ i ] . data_ptr )		3041017	0		=			
ANR	3041357	Identifier	curr_regdataptr		3041017	0					
ANR	3041358	UnaryOperationExpression	& ( sigTable [ i ] . data_ptr )		3041017	1					
ANR	3041359	UnaryOperator	&		3041017	0					
ANR	3041360	MemberAccess	sigTable [ i ] . data_ptr		3041017	1					
ANR	3041361	ArrayIndexing	sigTable [ i ]		3041017	0					
ANR	3041362	Identifier	sigTable		3041017	0					
ANR	3041363	Identifier	i		3041017	1					
ANR	3041364	Identifier	data_ptr		3041017	1					
ANR	3041365	ExpressionStatement	DumpSigTable ( D_FULLDEBUG | D_DAEMONCORE )	1376:1:38564:38604	3041017	21	True				
ANR	3041366	CallExpression	DumpSigTable ( D_FULLDEBUG | D_DAEMONCORE )		3041017	0					
ANR	3041367	Callee	DumpSigTable		3041017	0					
ANR	3041368	Identifier	DumpSigTable		3041017	0					
ANR	3041369	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		3041017	1					
ANR	3041370	Argument	D_FULLDEBUG | D_DAEMONCORE		3041017	0					
ANR	3041371	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		3041017	0		|			
ANR	3041372	Identifier	D_FULLDEBUG		3041017	0					
ANR	3041373	Identifier	D_DAEMONCORE		3041017	1					
ANR	3041374	ReturnStatement	return sig ;	1378:1:38608:38618	3041017	22	True				
ANR	3041375	Identifier	sig		3041017	0					
ANR	3041376	ReturnType	int		3041017	1					
ANR	3041377	Identifier	DaemonCore :: Register_Signal		3041017	2					
ANR	3041378	ParameterList	"int sig , const char * sig_descrip , SignalHandler handler , SignalHandlercpp handlercpp , const char * handler_descrip , Service * s , int is_cpp"		3041017	3					
ANR	3041379	Parameter	int sig	1286:32:35859:35865	3041017	0	True				
ANR	3041380	ParameterType	int		3041017	0					
ANR	3041381	Identifier	sig		3041017	1					
ANR	3041382	Parameter	const char * sig_descrip	1286:41:35868:35890	3041017	1	True				
ANR	3041383	ParameterType	const char *		3041017	0					
ANR	3041384	Identifier	sig_descrip		3041017	1					
ANR	3041385	Parameter	SignalHandler handler	1287:4:35898:35918	3041017	2	True				
ANR	3041386	ParameterType	SignalHandler		3041017	0					
ANR	3041387	Identifier	handler		3041017	1					
ANR	3041388	Parameter	SignalHandlercpp handlercpp	1287:27:35921:35947	3041017	3	True				
ANR	3041389	ParameterType	SignalHandlercpp		3041017	0					
ANR	3041390	Identifier	handlercpp		3041017	1					
ANR	3041391	Parameter	const char * handler_descrip	1288:4:35955:35981	3041017	4	True				
ANR	3041392	ParameterType	const char *		3041017	0					
ANR	3041393	Identifier	handler_descrip		3041017	1					
ANR	3041394	Parameter	Service * s	1288:33:35984:35993	3041017	5	True				
ANR	3041395	ParameterType	Service *		3041017	0					
ANR	3041396	Identifier	s		3041017	1					
ANR	3041397	Parameter	int is_cpp	1289:4:36001:36010	3041017	6	True				
ANR	3041398	ParameterType	int		3041017	0					
ANR	3041399	Identifier	is_cpp		3041017	1					
ANR	3041400	CFGEntryNode	ENTRY		3041017		True				
ANR	3041401	CFGExitNode	EXIT		3041017		True				
ANR	3041402	Symbol	curr_regdataptr		3041017						
ANR	3041403	Symbol	handler		3041017						
ANR	3041404	Symbol	sigTable [ j ] . handlercpp		3041017						
ANR	3041405	Symbol	sigTable [ i ] . is_cpp		3041017						
ANR	3041406	Symbol	sigTable [ i ] . handler_descrip		3041017						
ANR	3041407	Symbol	maxSig		3041017						
ANR	3041408	Symbol	sigTable [ i ] . sig_descrip		3041017						
ANR	3041409	Symbol	sig_descrip		3041017						
ANR	3041410	Symbol	sig		3041017						
ANR	3041411	Symbol	IF_NONZERO		3041017						
ANR	3041412	Symbol	handler_descrip		3041017						
ANR	3041413	Symbol	sigTable [ i ] . handlercpp		3041017						
ANR	3041414	Symbol	sigTable		3041017						
ANR	3041415	Symbol	handlercpp		3041017						
ANR	3041416	Symbol	is_cpp		3041017						
ANR	3041417	Symbol	AS_COUNT		3041017						
ANR	3041418	Symbol	IS_RCT		3041017						
ANR	3041419	Symbol	sigTable [ i ] . service		3041017						
ANR	3041420	Symbol	sigTable [ i ] . is_pending		3041017						
ANR	3041421	Symbol	D_DAEMONCORE		3041017						
ANR	3041422	Symbol	i		3041017						
ANR	3041423	Symbol	& sigTable [ i ] . data_ptr		3041017						
ANR	3041424	Symbol	j		3041017						
ANR	3041425	Symbol	D_FULLDEBUG		3041017						
ANR	3041426	Symbol	nSig		3041017						
ANR	3041427	Symbol	SIGCHLD		3041017						
ANR	3041428	Symbol	s		3041017						
ANR	3041429	Symbol	* i		3041017						
ANR	3041430	Symbol	* sigTable		3041017						
ANR	3041431	Symbol	IF_VERBOSEPUB		3041017						
ANR	3041432	Symbol	* j		3041017						
ANR	3041433	Symbol	EMPTY_DESCRIP		3041017						
ANR	3041434	Symbol	sigTable [ i ] . num		3041017						
ANR	3041435	Symbol	sigTable [ i ] . is_blocked		3041017						
ANR	3041436	Symbol	sigTable [ j ] . handler		3041017						
ANR	3041437	Symbol	dc_stats		3041017						
ANR	3041438	Symbol	FALSE		3041017						
ANR	3041439	Symbol	strdup		3041017						
ANR	3041440	Symbol	sigTable [ i ] . handler		3041017						
ANR	3041441	Function	DaemonCore :: Cancel_Signal	1381:0:38623:40081							
ANR	3041442	FunctionDef	DaemonCore :: Cancel_Signal (int sig)		3041441	0					
ANR	3041443	CompoundStatement		1382:0:38664:40081	3041441	0					
ANR	3041444	IdentifierDeclStatement	"int i , j ;"	1383:1:38667:38674	3041441	0	True				
ANR	3041445	IdentifierDecl	i		3041441	0					
ANR	3041446	IdentifierDeclType	int		3041441	0					
ANR	3041447	Identifier	i		3041441	1					
ANR	3041448	IdentifierDecl	j		3041441	1					
ANR	3041449	IdentifierDeclType	int		3041441	0					
ANR	3041450	Identifier	j		3041441	1					
ANR	3041451	IdentifierDeclStatement	int found = - 1 ;	1384:1:38677:38691	3041441	1	True				
ANR	3041452	IdentifierDecl	found = - 1		3041441	0					
ANR	3041453	IdentifierDeclType	int		3041441	0					
ANR	3041454	Identifier	found		3041441	1					
ANR	3041455	AssignmentExpression	found = - 1		3041441	2		=			
ANR	3041456	Identifier	found		3041441	0					
ANR	3041457	UnaryOperationExpression	- 1		3041441	1					
ANR	3041458	UnaryOperator	-		3041441	0					
ANR	3041459	PrimaryExpression	1		3041441	1					
ANR	3041460	IfStatement	if ( sig < 0 )		3041441	2					
ANR	3041461	Condition	sig < 0	1388:7:38824:38830	3041441	0	True				
ANR	3041462	RelationalExpression	sig < 0		3041441	0		<			
ANR	3041463	Identifier	sig		3041441	0					
ANR	3041464	PrimaryExpression	0		3041441	1					
ANR	3041465	CompoundStatement		7:16:168:168	3041441	1					
ANR	3041466	ExpressionStatement	i = - sig % maxSig	1389:8:38843:38860	3041441	0	True				
ANR	3041467	AssignmentExpression	i = - sig % maxSig		3041441	0		=			
ANR	3041468	Identifier	i		3041441	0					
ANR	3041469	MultiplicativeExpression	- sig % maxSig		3041441	1		%			
ANR	3041470	UnaryOperationExpression	- sig		3041441	0					
ANR	3041471	UnaryOperator	-		3041441	0					
ANR	3041472	Identifier	sig		3041441	1					
ANR	3041473	Identifier	maxSig		3041441	1					
ANR	3041474	ElseStatement	else		3041441	0					
ANR	3041475	CompoundStatement		9:11:208:208	3041441	0					
ANR	3041476	ExpressionStatement	i = sig % maxSig	1391:8:38883:38899	3041441	0	True				
ANR	3041477	AssignmentExpression	i = sig % maxSig		3041441	0		=			
ANR	3041478	Identifier	i		3041441	0					
ANR	3041479	MultiplicativeExpression	sig % maxSig		3041441	1		%			
ANR	3041480	Identifier	sig		3041441	0					
ANR	3041481	Identifier	maxSig		3041441	1					
ANR	3041482	ExpressionStatement	j = i	1395:1:38943:38948	3041441	3	True				
ANR	3041483	AssignmentExpression	j = i		3041441	0		=			
ANR	3041484	Identifier	j		3041441	0					
ANR	3041485	Identifier	i		3041441	1					
ANR	3041486	DoStatement	do		3041441	4					
ANR	3041487	CompoundStatement		15:4:289:289	3041441	0					
ANR	3041488	IfStatement	if ( ( sigTable [ j ] . num == sig ) && ( sigTable [ j ] . handler || sigTable [ j ] . handlercpp ) )		3041441	0					
ANR	3041489	Condition	( sigTable [ j ] . num == sig ) && ( sigTable [ j ] . handler || sigTable [ j ] . handlercpp )	1397:7:38963:39043	3041441	0	True				
ANR	3041490	AndExpression	( sigTable [ j ] . num == sig ) && ( sigTable [ j ] . handler || sigTable [ j ] . handlercpp )		3041441	0		&&			
ANR	3041491	EqualityExpression	sigTable [ j ] . num == sig		3041441	0		==			
ANR	3041492	MemberAccess	sigTable [ j ] . num		3041441	0					
ANR	3041493	ArrayIndexing	sigTable [ j ]		3041441	0					
ANR	3041494	Identifier	sigTable		3041441	0					
ANR	3041495	Identifier	j		3041441	1					
ANR	3041496	Identifier	num		3041441	1					
ANR	3041497	Identifier	sig		3041441	1					
ANR	3041498	OrExpression	sigTable [ j ] . handler || sigTable [ j ] . handlercpp		3041441	1		||			
ANR	3041499	MemberAccess	sigTable [ j ] . handler		3041441	0					
ANR	3041500	ArrayIndexing	sigTable [ j ]		3041441	0					
ANR	3041501	Identifier	sigTable		3041441	0					
ANR	3041502	Identifier	j		3041441	1					
ANR	3041503	Identifier	handler		3041441	1					
ANR	3041504	MemberAccess	sigTable [ j ] . handlercpp		3041441	1					
ANR	3041505	ArrayIndexing	sigTable [ j ]		3041441	0					
ANR	3041506	Identifier	sigTable		3041441	0					
ANR	3041507	Identifier	j		3041441	1					
ANR	3041508	Identifier	handlercpp		3041441	1					
ANR	3041509	CompoundStatement		17:56:382:382	3041441	1					
ANR	3041510	ExpressionStatement	found = j	1399:3:39052:39061	3041441	0	True				
ANR	3041511	AssignmentExpression	found = j		3041441	0		=			
ANR	3041512	Identifier	found		3041441	0					
ANR	3041513	Identifier	j		3041441	1					
ANR	3041514	ElseStatement	else		3041441	0					
ANR	3041515	CompoundStatement		19:9:407:407	3041441	0					
ANR	3041516	ExpressionStatement	j = ( j + 1 ) % maxSig	1401:3:39077:39097	3041441	0	True				
ANR	3041517	AssignmentExpression	j = ( j + 1 ) % maxSig		3041441	0		=			
ANR	3041518	Identifier	j		3041441	0					
ANR	3041519	MultiplicativeExpression	( j + 1 ) % maxSig		3041441	1		%			
ANR	3041520	AdditiveExpression	j + 1		3041441	0		+			
ANR	3041521	Identifier	j		3041441	0					
ANR	3041522	PrimaryExpression	1		3041441	1					
ANR	3041523	Identifier	maxSig		3041441	1					
ANR	3041524	Condition	j != i && found == - 1	1403:11:39114:39134	3041441	1	True				
ANR	3041525	AndExpression	j != i && found == - 1		3041441	0		&&			
ANR	3041526	EqualityExpression	j != i		3041441	0		!=			
ANR	3041527	Identifier	j		3041441	0					
ANR	3041528	Identifier	i		3041441	1					
ANR	3041529	EqualityExpression	found == - 1		3041441	1		==			
ANR	3041530	Identifier	found		3041441	0					
ANR	3041531	UnaryOperationExpression	- 1		3041441	1					
ANR	3041532	UnaryOperator	-		3041441	0					
ANR	3041533	PrimaryExpression	1		3041441	1					
ANR	3041534	IfStatement	if ( found == - 1 )		3041441	5					
ANR	3041535	Condition	found == - 1	1406:6:39165:39175	3041441	0	True				
ANR	3041536	EqualityExpression	found == - 1		3041441	0		==			
ANR	3041537	Identifier	found		3041441	0					
ANR	3041538	UnaryOperationExpression	- 1		3041441	1					
ANR	3041539	UnaryOperator	-		3041441	0					
ANR	3041540	PrimaryExpression	1		3041441	1					
ANR	3041541	CompoundStatement		25:20:514:514	3041441	1					
ANR	3041542	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Signal: signal %d not found\\n"" , sig )"	1407:2:39183:39247	3041441	0	True				
ANR	3041543	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Signal: signal %d not found\\n"" , sig )"		3041441	0					
ANR	3041544	Callee	dprintf		3041441	0					
ANR	3041545	Identifier	dprintf		3041441	0					
ANR	3041546	ArgumentList	D_DAEMONCORE		3041441	1					
ANR	3041547	Argument	D_DAEMONCORE		3041441	0					
ANR	3041548	Identifier	D_DAEMONCORE		3041441	0					
ANR	3041549	Argument	"""Cancel_Signal: signal %d not found\\n"""		3041441	1					
ANR	3041550	PrimaryExpression	"""Cancel_Signal: signal %d not found\\n"""		3041441	0					
ANR	3041551	Argument	sig		3041441	2					
ANR	3041552	Identifier	sig		3041441	0					
ANR	3041553	ReturnStatement	return FALSE ;	1408:2:39251:39263	3041441	1	True				
ANR	3041554	Identifier	FALSE		3041441	0					
ANR	3041555	ExpressionStatement	sigTable [ found ] . num = 0	1412:1:39286:39309	3041441	6	True				
ANR	3041556	AssignmentExpression	sigTable [ found ] . num = 0		3041441	0		=			
ANR	3041557	MemberAccess	sigTable [ found ] . num		3041441	0					
ANR	3041558	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041559	Identifier	sigTable		3041441	0					
ANR	3041560	Identifier	found		3041441	1					
ANR	3041561	Identifier	num		3041441	1					
ANR	3041562	PrimaryExpression	0		3041441	1					
ANR	3041563	ExpressionStatement	sigTable [ found ] . handler = NULL	1413:1:39312:39342	3041441	7	True				
ANR	3041564	AssignmentExpression	sigTable [ found ] . handler = NULL		3041441	0		=			
ANR	3041565	MemberAccess	sigTable [ found ] . handler		3041441	0					
ANR	3041566	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041567	Identifier	sigTable		3041441	0					
ANR	3041568	Identifier	found		3041441	1					
ANR	3041569	Identifier	handler		3041441	1					
ANR	3041570	Identifier	NULL		3041441	1					
ANR	3041571	ExpressionStatement	sigTable [ found ] . handlercpp = ( SignalHandlercpp ) NULL	1414:1:39345:39396	3041441	8	True				
ANR	3041572	AssignmentExpression	sigTable [ found ] . handlercpp = ( SignalHandlercpp ) NULL		3041441	0		=			
ANR	3041573	MemberAccess	sigTable [ found ] . handlercpp		3041441	0					
ANR	3041574	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041575	Identifier	sigTable		3041441	0					
ANR	3041576	Identifier	found		3041441	1					
ANR	3041577	Identifier	handlercpp		3041441	1					
ANR	3041578	CastExpression	( SignalHandlercpp ) NULL		3041441	1					
ANR	3041579	CastTarget	SignalHandlercpp		3041441	0					
ANR	3041580	Identifier	NULL		3041441	1					
ANR	3041581	ExpressionStatement	free ( sigTable [ found ] . handler_descrip )	1415:1:39399:39438	3041441	9	True				
ANR	3041582	CallExpression	free ( sigTable [ found ] . handler_descrip )		3041441	0					
ANR	3041583	Callee	free		3041441	0					
ANR	3041584	Identifier	free		3041441	0					
ANR	3041585	ArgumentList	sigTable [ found ] . handler_descrip		3041441	1					
ANR	3041586	Argument	sigTable [ found ] . handler_descrip		3041441	0					
ANR	3041587	MemberAccess	sigTable [ found ] . handler_descrip		3041441	0					
ANR	3041588	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041589	Identifier	sigTable		3041441	0					
ANR	3041590	Identifier	found		3041441	1					
ANR	3041591	Identifier	handler_descrip		3041441	1					
ANR	3041592	ExpressionStatement	sigTable [ found ] . handler_descrip = NULL	1416:1:39441:39479	3041441	10	True				
ANR	3041593	AssignmentExpression	sigTable [ found ] . handler_descrip = NULL		3041441	0		=			
ANR	3041594	MemberAccess	sigTable [ found ] . handler_descrip		3041441	0					
ANR	3041595	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041596	Identifier	sigTable		3041441	0					
ANR	3041597	Identifier	found		3041441	1					
ANR	3041598	Identifier	handler_descrip		3041441	1					
ANR	3041599	Identifier	NULL		3041441	1					
ANR	3041600	ExpressionStatement	nSig --	1419:1:39536:39542	3041441	11	True				
ANR	3041601	PostIncDecOperationExpression	nSig --		3041441	0					
ANR	3041602	Identifier	nSig		3041441	0					
ANR	3041603	IncDec	--		3041441	1					
ANR	3041604	IfStatement	if ( curr_regdataptr == & ( sigTable [ found ] . data_ptr ) )		3041441	12					
ANR	3041605	Condition	curr_regdataptr == & ( sigTable [ found ] . data_ptr )	1422:6:39613:39658	3041441	0	True				
ANR	3041606	EqualityExpression	curr_regdataptr == & ( sigTable [ found ] . data_ptr )		3041441	0		==			
ANR	3041607	Identifier	curr_regdataptr		3041441	0					
ANR	3041608	UnaryOperationExpression	& ( sigTable [ found ] . data_ptr )		3041441	1					
ANR	3041609	UnaryOperator	&		3041441	0					
ANR	3041610	MemberAccess	sigTable [ found ] . data_ptr		3041441	1					
ANR	3041611	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041612	Identifier	sigTable		3041441	0					
ANR	3041613	Identifier	found		3041441	1					
ANR	3041614	Identifier	data_ptr		3041441	1					
ANR	3041615	ExpressionStatement	curr_regdataptr = NULL	1423:2:39664:39686	3041441	1	True				
ANR	3041616	AssignmentExpression	curr_regdataptr = NULL		3041441	0		=			
ANR	3041617	Identifier	curr_regdataptr		3041441	0					
ANR	3041618	Identifier	NULL		3041441	1					
ANR	3041619	IfStatement	if ( curr_dataptr == & ( sigTable [ found ] . data_ptr ) )		3041441	13					
ANR	3041620	Condition	curr_dataptr == & ( sigTable [ found ] . data_ptr )	1424:6:39694:39736	3041441	0	True				
ANR	3041621	EqualityExpression	curr_dataptr == & ( sigTable [ found ] . data_ptr )		3041441	0		==			
ANR	3041622	Identifier	curr_dataptr		3041441	0					
ANR	3041623	UnaryOperationExpression	& ( sigTable [ found ] . data_ptr )		3041441	1					
ANR	3041624	UnaryOperator	&		3041441	0					
ANR	3041625	MemberAccess	sigTable [ found ] . data_ptr		3041441	1					
ANR	3041626	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041627	Identifier	sigTable		3041441	0					
ANR	3041628	Identifier	found		3041441	1					
ANR	3041629	Identifier	data_ptr		3041441	1					
ANR	3041630	ExpressionStatement	curr_dataptr = NULL	1425:2:39742:39761	3041441	1	True				
ANR	3041631	AssignmentExpression	curr_dataptr = NULL		3041441	0		=			
ANR	3041632	Identifier	curr_dataptr		3041441	0					
ANR	3041633	Identifier	NULL		3041441	1					
ANR	3041634	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Signal: cancelled signal %d <%s>\\n"" , sig , sigTable [ found ] . sig_descrip )"	1428:1:39836:39945	3041441	14	True				
ANR	3041635	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Signal: cancelled signal %d <%s>\\n"" , sig , sigTable [ found ] . sig_descrip )"		3041441	0					
ANR	3041636	Callee	dprintf		3041441	0					
ANR	3041637	Identifier	dprintf		3041441	0					
ANR	3041638	ArgumentList	D_DAEMONCORE		3041441	1					
ANR	3041639	Argument	D_DAEMONCORE		3041441	0					
ANR	3041640	Identifier	D_DAEMONCORE		3041441	0					
ANR	3041641	Argument	"""Cancel_Signal: cancelled signal %d <%s>\\n"""		3041441	1					
ANR	3041642	PrimaryExpression	"""Cancel_Signal: cancelled signal %d <%s>\\n"""		3041441	0					
ANR	3041643	Argument	sig		3041441	2					
ANR	3041644	Identifier	sig		3041441	0					
ANR	3041645	Argument	sigTable [ found ] . sig_descrip		3041441	3					
ANR	3041646	MemberAccess	sigTable [ found ] . sig_descrip		3041441	0					
ANR	3041647	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041648	Identifier	sigTable		3041441	0					
ANR	3041649	Identifier	found		3041441	1					
ANR	3041650	Identifier	sig_descrip		3041441	1					
ANR	3041651	ExpressionStatement	free ( sigTable [ found ] . sig_descrip )	1431:1:39948:39983	3041441	15	True				
ANR	3041652	CallExpression	free ( sigTable [ found ] . sig_descrip )		3041441	0					
ANR	3041653	Callee	free		3041441	0					
ANR	3041654	Identifier	free		3041441	0					
ANR	3041655	ArgumentList	sigTable [ found ] . sig_descrip		3041441	1					
ANR	3041656	Argument	sigTable [ found ] . sig_descrip		3041441	0					
ANR	3041657	MemberAccess	sigTable [ found ] . sig_descrip		3041441	0					
ANR	3041658	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041659	Identifier	sigTable		3041441	0					
ANR	3041660	Identifier	found		3041441	1					
ANR	3041661	Identifier	sig_descrip		3041441	1					
ANR	3041662	ExpressionStatement	sigTable [ found ] . sig_descrip = NULL	1432:1:39986:40020	3041441	16	True				
ANR	3041663	AssignmentExpression	sigTable [ found ] . sig_descrip = NULL		3041441	0		=			
ANR	3041664	MemberAccess	sigTable [ found ] . sig_descrip		3041441	0					
ANR	3041665	ArrayIndexing	sigTable [ found ]		3041441	0					
ANR	3041666	Identifier	sigTable		3041441	0					
ANR	3041667	Identifier	found		3041441	1					
ANR	3041668	Identifier	sig_descrip		3041441	1					
ANR	3041669	Identifier	NULL		3041441	1					
ANR	3041670	ExpressionStatement	DumpSigTable ( D_FULLDEBUG | D_DAEMONCORE )	1434:1:40024:40064	3041441	17	True				
ANR	3041671	CallExpression	DumpSigTable ( D_FULLDEBUG | D_DAEMONCORE )		3041441	0					
ANR	3041672	Callee	DumpSigTable		3041441	0					
ANR	3041673	Identifier	DumpSigTable		3041441	0					
ANR	3041674	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		3041441	1					
ANR	3041675	Argument	D_FULLDEBUG | D_DAEMONCORE		3041441	0					
ANR	3041676	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		3041441	0		|			
ANR	3041677	Identifier	D_FULLDEBUG		3041441	0					
ANR	3041678	Identifier	D_DAEMONCORE		3041441	1					
ANR	3041679	ReturnStatement	return TRUE ;	1436:1:40068:40079	3041441	18	True				
ANR	3041680	Identifier	TRUE		3041441	0					
ANR	3041681	ReturnType	int		3041441	1					
ANR	3041682	Identifier	DaemonCore :: Cancel_Signal		3041441	2					
ANR	3041683	ParameterList	int sig		3041441	3					
ANR	3041684	Parameter	int sig	1381:31:38654:38660	3041441	0	True				
ANR	3041685	ParameterType	int		3041441	0					
ANR	3041686	Identifier	sig		3041441	1					
ANR	3041687	CFGEntryNode	ENTRY		3041441		True				
ANR	3041688	CFGExitNode	EXIT		3041441		True				
ANR	3041689	Symbol	curr_regdataptr		3041441						
ANR	3041690	Symbol	sigTable [ j ] . handlercpp		3041441						
ANR	3041691	Symbol	& sigTable [ found ] . data_ptr		3041441						
ANR	3041692	Symbol	maxSig		3041441						
ANR	3041693	Symbol	curr_dataptr		3041441						
ANR	3041694	Symbol	sig		3041441						
ANR	3041695	Symbol	found		3041441						
ANR	3041696	Symbol	sigTable		3041441						
ANR	3041697	Symbol	NULL		3041441						
ANR	3041698	Symbol	D_DAEMONCORE		3041441						
ANR	3041699	Symbol	sigTable [ found ] . handler_descrip		3041441						
ANR	3041700	Symbol	i		3041441						
ANR	3041701	Symbol	TRUE		3041441						
ANR	3041702	Symbol	j		3041441						
ANR	3041703	Symbol	D_FULLDEBUG		3041441						
ANR	3041704	Symbol	sigTable [ found ] . num		3041441						
ANR	3041705	Symbol	nSig		3041441						
ANR	3041706	Symbol	* sigTable		3041441						
ANR	3041707	Symbol	* j		3041441						
ANR	3041708	Symbol	sigTable [ found ] . sig_descrip		3041441						
ANR	3041709	Symbol	sigTable [ j ] . num		3041441						
ANR	3041710	Symbol	sigTable [ j ] . handler		3041441						
ANR	3041711	Symbol	FALSE		3041441						
ANR	3041712	Symbol	sigTable [ found ] . handler		3041441						
ANR	3041713	Symbol	sigTable [ found ] . handlercpp		3041441						
ANR	3041714	Symbol	* found		3041441						
ANR	3041715	Function	DaemonCore :: Register_Socket	1439:0:40084:45864							
ANR	3041716	FunctionDef	"DaemonCore :: Register_Socket (Stream * iosock , const char * iosock_descrip , SocketHandler handler , SocketHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int is_cpp)"		3041715	0					
ANR	3041717	CompoundStatement		1443:0:40296:45864	3041715	0					
ANR	3041718	IdentifierDeclStatement	int i ;	1444:4:40302:40311	3041715	0	True				
ANR	3041719	IdentifierDecl	i		3041715	0					
ANR	3041720	IdentifierDeclType	int		3041715	0					
ANR	3041721	Identifier	i		3041715	1					
ANR	3041722	IdentifierDeclStatement	int j ;	1445:4:40317:40326	3041715	1	True				
ANR	3041723	IdentifierDecl	j		3041715	0					
ANR	3041724	IdentifierDeclType	int		3041715	0					
ANR	3041725	Identifier	j		3041715	1					
ANR	3041726	IfStatement	if ( ! iosock )		3041715	2					
ANR	3041727	Condition	! iosock	1455:9:40759:40765	3041715	0	True				
ANR	3041728	UnaryOperationExpression	! iosock		3041715	0					
ANR	3041729	UnaryOperator	!		3041715	0					
ANR	3041730	Identifier	iosock		3041715	1					
ANR	3041731	CompoundStatement		13:19:472:472	3041715	1					
ANR	3041732	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Can't register NULL socket \\n"" )"	1456:2:40773:40827	3041715	0	True				
ANR	3041733	CallExpression	"dprintf ( D_DAEMONCORE , ""Can't register NULL socket \\n"" )"		3041715	0					
ANR	3041734	Callee	dprintf		3041715	0					
ANR	3041735	Identifier	dprintf		3041715	0					
ANR	3041736	ArgumentList	D_DAEMONCORE		3041715	1					
ANR	3041737	Argument	D_DAEMONCORE		3041715	0					
ANR	3041738	Identifier	D_DAEMONCORE		3041715	0					
ANR	3041739	Argument	"""Can't register NULL socket \\n"""		3041715	1					
ANR	3041740	PrimaryExpression	"""Can't register NULL socket \\n"""		3041715	0					
ANR	3041741	ReturnStatement	return - 1 ;	1457:2:40831:40840	3041715	1	True				
ANR	3041742	UnaryOperationExpression	- 1		3041715	0					
ANR	3041743	UnaryOperator	-		3041715	0					
ANR	3041744	PrimaryExpression	1		3041715	1					
ANR	3041745	ForStatement	for ( i = 0 ; i <= nSock ; i ++ )		3041715	3					
ANR	3041746	ForInit	i = 0 ;	1461:6:40889:40892	3041715	0	True				
ANR	3041747	AssignmentExpression	i = 0		3041715	0		=			
ANR	3041748	Identifier	i		3041715	0					
ANR	3041749	PrimaryExpression	0		3041715	1					
ANR	3041750	Condition	i <= nSock	1461:10:40893:40902	3041715	1	True				
ANR	3041751	RelationalExpression	i <= nSock		3041715	0		<=			
ANR	3041752	Identifier	i		3041715	0					
ANR	3041753	Identifier	nSock		3041715	1					
ANR	3041754	PostIncDecOperationExpression	i ++	1461:22:40905:40907	3041715	2	True				
ANR	3041755	Identifier	i		3041715	0					
ANR	3041756	IncDec	++		3041715	1					
ANR	3041757	CompoundStatement		19:27:613:613	3041715	3					
ANR	3041758	IfStatement	if ( ( * sockTable ) [ i ] . iosock == NULL )		3041715	0					
ANR	3041759	Condition	( * sockTable ) [ i ] . iosock == NULL	1462:7:40919:40948	3041715	0	True				
ANR	3041760	EqualityExpression	( * sockTable ) [ i ] . iosock == NULL		3041715	0		==			
ANR	3041761	MemberAccess	( * sockTable ) [ i ] . iosock		3041715	0					
ANR	3041762	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3041763	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041764	UnaryOperator	*		3041715	0					
ANR	3041765	Identifier	sockTable		3041715	1					
ANR	3041766	Identifier	i		3041715	1					
ANR	3041767	Identifier	iosock		3041715	1					
ANR	3041768	Identifier	NULL		3041715	1					
ANR	3041769	CompoundStatement		20:40:655:655	3041715	1					
ANR	3041770	BreakStatement	break ;	1463:3:40957:40962	3041715	0	True				
ANR	3041771	IfStatement	if ( ( * sockTable ) [ i ] . remove_asap && ( * sockTable ) [ i ] . servicing_tid == 0 )		3041715	1					
ANR	3041772	Condition	( * sockTable ) [ i ] . remove_asap && ( * sockTable ) [ i ] . servicing_tid == 0	1465:7:40975:41037	3041715	0	True				
ANR	3041773	AndExpression	( * sockTable ) [ i ] . remove_asap && ( * sockTable ) [ i ] . servicing_tid == 0		3041715	0		&&			
ANR	3041774	MemberAccess	( * sockTable ) [ i ] . remove_asap		3041715	0					
ANR	3041775	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3041776	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041777	UnaryOperator	*		3041715	0					
ANR	3041778	Identifier	sockTable		3041715	1					
ANR	3041779	Identifier	i		3041715	1					
ANR	3041780	Identifier	remove_asap		3041715	1					
ANR	3041781	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == 0		3041715	1		==			
ANR	3041782	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3041715	0					
ANR	3041783	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3041784	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041785	UnaryOperator	*		3041715	0					
ANR	3041786	Identifier	sockTable		3041715	1					
ANR	3041787	Identifier	i		3041715	1					
ANR	3041788	Identifier	servicing_tid		3041715	1					
ANR	3041789	PrimaryExpression	0		3041715	1					
ANR	3041790	CompoundStatement		23:73:744:744	3041715	1					
ANR	3041791	ExpressionStatement	( * sockTable ) [ i ] . iosock = NULL	1466:3:41046:41075	3041715	0	True				
ANR	3041792	AssignmentExpression	( * sockTable ) [ i ] . iosock = NULL		3041715	0		=			
ANR	3041793	MemberAccess	( * sockTable ) [ i ] . iosock		3041715	0					
ANR	3041794	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3041795	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041796	UnaryOperator	*		3041715	0					
ANR	3041797	Identifier	sockTable		3041715	1					
ANR	3041798	Identifier	i		3041715	1					
ANR	3041799	Identifier	iosock		3041715	1					
ANR	3041800	Identifier	NULL		3041715	1					
ANR	3041801	BreakStatement	break ;	1467:3:41080:41085	3041715	1	True				
ANR	3041802	IfStatement	if ( ( * sockTable ) [ i ] . iosock )		3041715	4					
ANR	3041803	Condition	( * sockTable ) [ i ] . iosock	1472:6:41141:41162	3041715	0	True				
ANR	3041804	MemberAccess	( * sockTable ) [ i ] . iosock		3041715	0					
ANR	3041805	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3041806	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041807	UnaryOperator	*		3041715	0					
ANR	3041808	Identifier	sockTable		3041715	1					
ANR	3041809	Identifier	i		3041715	1					
ANR	3041810	Identifier	iosock		3041715	1					
ANR	3041811	CompoundStatement		30:31:869:869	3041715	1					
ANR	3041812	ExpressionStatement	"dprintf ( D_ALWAYS , ""Socket table fubar.  nSock = %d\\n"" , nSock )"	1473:8:41176:41240	3041715	0	True				
ANR	3041813	CallExpression	"dprintf ( D_ALWAYS , ""Socket table fubar.  nSock = %d\\n"" , nSock )"		3041715	0					
ANR	3041814	Callee	dprintf		3041715	0					
ANR	3041815	Identifier	dprintf		3041715	0					
ANR	3041816	ArgumentList	D_ALWAYS		3041715	1					
ANR	3041817	Argument	D_ALWAYS		3041715	0					
ANR	3041818	Identifier	D_ALWAYS		3041715	0					
ANR	3041819	Argument	"""Socket table fubar.  nSock = %d\\n"""		3041715	1					
ANR	3041820	PrimaryExpression	"""Socket table fubar.  nSock = %d\\n"""		3041715	0					
ANR	3041821	Argument	nSock		3041715	2					
ANR	3041822	Identifier	nSock		3041715	0					
ANR	3041823	ExpressionStatement	DumpSocketTable ( D_ALWAYS )	1474:8:41250:41277	3041715	1	True				
ANR	3041824	CallExpression	DumpSocketTable ( D_ALWAYS )		3041715	0					
ANR	3041825	Callee	DumpSocketTable		3041715	0					
ANR	3041826	Identifier	DumpSocketTable		3041715	0					
ANR	3041827	ArgumentList	D_ALWAYS		3041715	1					
ANR	3041828	Argument	D_ALWAYS		3041715	0					
ANR	3041829	Identifier	D_ALWAYS		3041715	0					
ANR	3041830	ExpressionStatement	"EXCEPT ( ""DaemonCore: Socket table messed up"" )"	1475:2:41281:41325	3041715	2	True				
ANR	3041831	CallExpression	"EXCEPT ( ""DaemonCore: Socket table messed up"" )"		3041715	0					
ANR	3041832	Callee	EXCEPT		3041715	0					
ANR	3041833	Identifier	EXCEPT		3041715	0					
ANR	3041834	ArgumentList	"""DaemonCore: Socket table messed up"""		3041715	1					
ANR	3041835	Argument	"""DaemonCore: Socket table messed up"""		3041715	0					
ANR	3041836	PrimaryExpression	"""DaemonCore: Socket table messed up"""		3041715	0					
ANR	3041837	ExpressionStatement	"dc_stats . New ( ""Socket"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"	1478:4:41335:41422	3041715	5	True				
ANR	3041838	CallExpression	"dc_stats . New ( ""Socket"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"		3041715	0					
ANR	3041839	Callee	dc_stats . New		3041715	0					
ANR	3041840	MemberAccess	dc_stats . New		3041715	0					
ANR	3041841	Identifier	dc_stats		3041715	0					
ANR	3041842	Identifier	New		3041715	1					
ANR	3041843	ArgumentList	"""Socket"""		3041715	1					
ANR	3041844	Argument	"""Socket"""		3041715	0					
ANR	3041845	PrimaryExpression	"""Socket"""		3041715	0					
ANR	3041846	Argument	handler_descrip		3041715	1					
ANR	3041847	Identifier	handler_descrip		3041715	0					
ANR	3041848	Argument	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		3041715	2					
ANR	3041849	InclusiveOrExpression	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		3041715	0		|			
ANR	3041850	Identifier	AS_COUNT		3041715	0					
ANR	3041851	InclusiveOrExpression	IS_RCT | IF_NONZERO | IF_VERBOSEPUB		3041715	1		|			
ANR	3041852	Identifier	IS_RCT		3041715	0					
ANR	3041853	InclusiveOrExpression	IF_NONZERO | IF_VERBOSEPUB		3041715	1		|			
ANR	3041854	Identifier	IF_NONZERO		3041715	0					
ANR	3041855	Identifier	IF_VERBOSEPUB		3041715	1					
ANR	3041856	ExpressionStatement	nRegisteredSocks = nSock	1488:1:41941:41965	3041715	6	True				
ANR	3041857	AssignmentExpression	nRegisteredSocks = nSock		3041715	0		=			
ANR	3041858	Identifier	nRegisteredSocks		3041715	0					
ANR	3041859	Identifier	nSock		3041715	1					
ANR	3041860	IdentifierDeclStatement	int fd_to_register = ( ( Sock * ) iosock ) -> get_file_desc ( ) ;	1489:1:41968:42022	3041715	7	True				
ANR	3041861	IdentifierDecl	fd_to_register = ( ( Sock * ) iosock ) -> get_file_desc ( )		3041715	0					
ANR	3041862	IdentifierDeclType	int		3041715	0					
ANR	3041863	Identifier	fd_to_register		3041715	1					
ANR	3041864	AssignmentExpression	fd_to_register = ( ( Sock * ) iosock ) -> get_file_desc ( )		3041715	2		=			
ANR	3041865	Identifier	fd_to_register		3041715	0					
ANR	3041866	CallExpression	( ( Sock * ) iosock ) -> get_file_desc ( )		3041715	1					
ANR	3041867	Callee	( ( Sock * ) iosock ) -> get_file_desc		3041715	0					
ANR	3041868	PtrMemberAccess	( ( Sock * ) iosock ) -> get_file_desc		3041715	0					
ANR	3041869	CastExpression	( Sock * ) iosock		3041715	0					
ANR	3041870	CastTarget	Sock *		3041715	0					
ANR	3041871	Identifier	iosock		3041715	1					
ANR	3041872	Identifier	get_file_desc		3041715	1					
ANR	3041873	ArgumentList			3041715	1					
ANR	3041874	IdentifierDeclStatement	bool duplicate_found = false ;	1490:1:42025:42053	3041715	8	True				
ANR	3041875	IdentifierDecl	duplicate_found = false		3041715	0					
ANR	3041876	IdentifierDeclType	bool		3041715	0					
ANR	3041877	Identifier	duplicate_found		3041715	1					
ANR	3041878	AssignmentExpression	duplicate_found = false		3041715	2		=			
ANR	3041879	Identifier	false		3041715	0					
ANR	3041880	Identifier	false		3041715	1					
ANR	3041881	ForStatement	for ( j = 0 ; j < nSock ; j ++ )		3041715	9					
ANR	3041882	ForInit	j = 0 ;	1491:7:42062:42065	3041715	0	True				
ANR	3041883	AssignmentExpression	j = 0		3041715	0		=			
ANR	3041884	Identifier	j		3041715	0					
ANR	3041885	PrimaryExpression	0		3041715	1					
ANR	3041886	Condition	j < nSock	1491:12:42067:42075	3041715	1	True				
ANR	3041887	RelationalExpression	j < nSock		3041715	0		<			
ANR	3041888	Identifier	j		3041715	0					
ANR	3041889	Identifier	nSock		3041715	1					
ANR	3041890	PostIncDecOperationExpression	j ++	1491:23:42078:42080	3041715	2	True				
ANR	3041891	Identifier	j		3041715	0					
ANR	3041892	IncDec	++		3041715	1					
ANR	3041893	CompoundStatement		50:1:1788:1788	3041715	3					
ANR	3041894	IfStatement	if ( ( * sockTable ) [ j ] . iosock == iosock )		3041715	0					
ANR	3041895	Condition	( * sockTable ) [ j ] . iosock == iosock	1493:7:42096:42127	3041715	0	True				
ANR	3041896	EqualityExpression	( * sockTable ) [ j ] . iosock == iosock		3041715	0		==			
ANR	3041897	MemberAccess	( * sockTable ) [ j ] . iosock		3041715	0					
ANR	3041898	ArrayIndexing	( * sockTable ) [ j ]		3041715	0					
ANR	3041899	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041900	UnaryOperator	*		3041715	0					
ANR	3041901	Identifier	sockTable		3041715	1					
ANR	3041902	Identifier	j		3041715	1					
ANR	3041903	Identifier	iosock		3041715	1					
ANR	3041904	Identifier	iosock		3041715	1					
ANR	3041905	CompoundStatement		51:42:1834:1834	3041715	1					
ANR	3041906	ExpressionStatement	duplicate_found = true	1494:3:42136:42158	3041715	0	True				
ANR	3041907	AssignmentExpression	duplicate_found = true		3041715	0		=			
ANR	3041908	Identifier	duplicate_found		3041715	0					
ANR	3041909	Identifier	true		3041715	1					
ANR	3041910	IfStatement	if ( ( * sockTable ) [ j ] . iosock && fd_to_register != - 1 )		3041715	1					
ANR	3041911	Condition	( * sockTable ) [ j ] . iosock && fd_to_register != - 1	1499:7:42305:42350	3041715	0	True				
ANR	3041912	AndExpression	( * sockTable ) [ j ] . iosock && fd_to_register != - 1		3041715	0		&&			
ANR	3041913	MemberAccess	( * sockTable ) [ j ] . iosock		3041715	0					
ANR	3041914	ArrayIndexing	( * sockTable ) [ j ]		3041715	0					
ANR	3041915	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041916	UnaryOperator	*		3041715	0					
ANR	3041917	Identifier	sockTable		3041715	1					
ANR	3041918	Identifier	j		3041715	1					
ANR	3041919	Identifier	iosock		3041715	1					
ANR	3041920	EqualityExpression	fd_to_register != - 1		3041715	1		!=			
ANR	3041921	Identifier	fd_to_register		3041715	0					
ANR	3041922	UnaryOperationExpression	- 1		3041715	1					
ANR	3041923	UnaryOperator	-		3041715	0					
ANR	3041924	PrimaryExpression	1		3041715	1					
ANR	3041925	CompoundStatement		57:56:2057:2057	3041715	1					
ANR	3041926	IfStatement	if ( ( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc ( ) == fd_to_register )		3041715	0					
ANR	3041927	Condition	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc ( ) == fd_to_register	1500:8:42364:42438	3041715	0	True				
ANR	3041928	EqualityExpression	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc ( ) == fd_to_register		3041715	0		==			
ANR	3041929	CallExpression	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc ( )		3041715	0					
ANR	3041930	Callee	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc		3041715	0					
ANR	3041931	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc		3041715	0					
ANR	3041932	CastExpression	( Sock * ) ( * sockTable ) [ j ] . iosock		3041715	0					
ANR	3041933	CastTarget	Sock *		3041715	0					
ANR	3041934	MemberAccess	( * sockTable ) [ j ] . iosock		3041715	1					
ANR	3041935	ArrayIndexing	( * sockTable ) [ j ]		3041715	0					
ANR	3041936	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041937	UnaryOperator	*		3041715	0					
ANR	3041938	Identifier	sockTable		3041715	1					
ANR	3041939	Identifier	j		3041715	1					
ANR	3041940	Identifier	iosock		3041715	1					
ANR	3041941	Identifier	get_file_desc		3041715	1					
ANR	3041942	ArgumentList			3041715	1					
ANR	3041943	Identifier	fd_to_register		3041715	1					
ANR	3041944	CompoundStatement		59:25:2145:2145	3041715	1					
ANR	3041945	ExpressionStatement	duplicate_found = true	1502:4:42448:42470	3041715	0	True				
ANR	3041946	AssignmentExpression	duplicate_found = true		3041715	0		=			
ANR	3041947	Identifier	duplicate_found		3041715	0					
ANR	3041948	Identifier	true		3041715	1					
ANR	3041949	IfStatement	if ( ( ( * sockTable ) [ j ] . iosock == NULL ) || ( ( * sockTable ) [ j ] . remove_asap && ( * sockTable ) [ j ] . servicing_tid == 0 ) )		3041715	2					
ANR	3041950	Condition	( ( * sockTable ) [ j ] . iosock == NULL ) || ( ( * sockTable ) [ j ] . remove_asap && ( * sockTable ) [ j ] . servicing_tid == 0 )	1507:7:42527:42685	3041715	0	True				
ANR	3041951	OrExpression	( ( * sockTable ) [ j ] . iosock == NULL ) || ( ( * sockTable ) [ j ] . remove_asap && ( * sockTable ) [ j ] . servicing_tid == 0 )		3041715	0		||			
ANR	3041952	EqualityExpression	( * sockTable ) [ j ] . iosock == NULL		3041715	0		==			
ANR	3041953	MemberAccess	( * sockTable ) [ j ] . iosock		3041715	0					
ANR	3041954	ArrayIndexing	( * sockTable ) [ j ]		3041715	0					
ANR	3041955	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041956	UnaryOperator	*		3041715	0					
ANR	3041957	Identifier	sockTable		3041715	1					
ANR	3041958	Identifier	j		3041715	1					
ANR	3041959	Identifier	iosock		3041715	1					
ANR	3041960	Identifier	NULL		3041715	1					
ANR	3041961	AndExpression	( * sockTable ) [ j ] . remove_asap && ( * sockTable ) [ j ] . servicing_tid == 0		3041715	1		&&			
ANR	3041962	MemberAccess	( * sockTable ) [ j ] . remove_asap		3041715	0					
ANR	3041963	ArrayIndexing	( * sockTable ) [ j ]		3041715	0					
ANR	3041964	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041965	UnaryOperator	*		3041715	0					
ANR	3041966	Identifier	sockTable		3041715	1					
ANR	3041967	Identifier	j		3041715	1					
ANR	3041968	Identifier	remove_asap		3041715	1					
ANR	3041969	EqualityExpression	( * sockTable ) [ j ] . servicing_tid == 0		3041715	1		==			
ANR	3041970	MemberAccess	( * sockTable ) [ j ] . servicing_tid		3041715	0					
ANR	3041971	ArrayIndexing	( * sockTable ) [ j ]		3041715	0					
ANR	3041972	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3041973	UnaryOperator	*		3041715	0					
ANR	3041974	Identifier	sockTable		3041715	1					
ANR	3041975	Identifier	j		3041715	1					
ANR	3041976	Identifier	servicing_tid		3041715	1					
ANR	3041977	PrimaryExpression	0		3041715	1					
ANR	3041978	CompoundStatement		68:2:2395:2395	3041715	1					
ANR	3041979	ExpressionStatement	nRegisteredSocks --	1511:3:42697:42715	3041715	0	True				
ANR	3041980	PostIncDecOperationExpression	nRegisteredSocks --		3041715	0					
ANR	3041981	Identifier	nRegisteredSocks		3041715	0					
ANR	3041982	IncDec	--		3041715	1					
ANR	3041983	IfStatement	if ( duplicate_found )		3041715	10					
ANR	3041984	Condition	duplicate_found	1514:5:42767:42781	3041715	0	True				
ANR	3041985	Identifier	duplicate_found		3041715	0					
ANR	3041986	CompoundStatement		72:22:2487:2487	3041715	1					
ANR	3041987	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: Attempt to register socket twice\\n"" )"	1515:2:42788:42855	3041715	0	True				
ANR	3041988	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: Attempt to register socket twice\\n"" )"		3041715	0					
ANR	3041989	Callee	dprintf		3041715	0					
ANR	3041990	Identifier	dprintf		3041715	0					
ANR	3041991	ArgumentList	D_ALWAYS		3041715	1					
ANR	3041992	Argument	D_ALWAYS		3041715	0					
ANR	3041993	Identifier	D_ALWAYS		3041715	0					
ANR	3041994	Argument	"""DaemonCore: Attempt to register socket twice\\n"""		3041715	1					
ANR	3041995	PrimaryExpression	"""DaemonCore: Attempt to register socket twice\\n"""		3041715	0					
ANR	3041996	ReturnStatement	return - 2 ;	1516:2:42859:42868	3041715	1	True				
ANR	3041997	UnaryOperationExpression	- 2		3041715	0					
ANR	3041998	UnaryOperator	-		3041715	0					
ANR	3041999	PrimaryExpression	2		3041715	1					
ANR	3042000	IfStatement	if ( iosock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) iosock ) -> is_connect_pending ( ) )		3041715	11					
ANR	3042001	Condition	iosock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) iosock ) -> is_connect_pending ( )	1526:5:43282:43367	3041715	0	True				
ANR	3042002	AndExpression	iosock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) iosock ) -> is_connect_pending ( )		3041715	0		&&			
ANR	3042003	EqualityExpression	iosock -> type ( ) == Stream :: reli_sock		3041715	0		==			
ANR	3042004	CallExpression	iosock -> type ( )		3041715	0					
ANR	3042005	Callee	iosock -> type		3041715	0					
ANR	3042006	PtrMemberAccess	iosock -> type		3041715	0					
ANR	3042007	Identifier	iosock		3041715	0					
ANR	3042008	Identifier	type		3041715	1					
ANR	3042009	ArgumentList			3041715	1					
ANR	3042010	Identifier	Stream :: reli_sock		3041715	1					
ANR	3042011	CallExpression	( ( ReliSock * ) iosock ) -> is_connect_pending ( )		3041715	1					
ANR	3042012	Callee	( ( ReliSock * ) iosock ) -> is_connect_pending		3041715	0					
ANR	3042013	PtrMemberAccess	( ( ReliSock * ) iosock ) -> is_connect_pending		3041715	0					
ANR	3042014	CastExpression	( ReliSock * ) iosock		3041715	0					
ANR	3042015	CastTarget	ReliSock *		3041715	0					
ANR	3042016	Identifier	iosock		3041715	1					
ANR	3042017	Identifier	is_connect_pending		3041715	1					
ANR	3042018	ArgumentList			3041715	1					
ANR	3042019	CompoundStatement		88:2:3104:3238	3041715	1					
ANR	3042020	IdentifierDeclStatement	MyString overload_msg ;	1529:2:43376:43397	3041715	0	True				
ANR	3042021	IdentifierDecl	overload_msg		3041715	0					
ANR	3042022	IdentifierDeclType	MyString		3041715	0					
ANR	3042023	Identifier	overload_msg		3041715	1					
ANR	3042024	IdentifierDeclStatement	"bool overload_danger = TooManyRegisteredSockets ( ( ( Sock * ) iosock ) -> get_file_desc ( ) , & overload_msg ) ;"	1530:2:43401:43535	3041715	1	True				
ANR	3042025	IdentifierDecl	"overload_danger = TooManyRegisteredSockets ( ( ( Sock * ) iosock ) -> get_file_desc ( ) , & overload_msg )"		3041715	0					
ANR	3042026	IdentifierDeclType	bool		3041715	0					
ANR	3042027	Identifier	overload_danger		3041715	1					
ANR	3042028	AssignmentExpression	"overload_danger = TooManyRegisteredSockets ( ( ( Sock * ) iosock ) -> get_file_desc ( ) , & overload_msg )"		3041715	2		=			
ANR	3042029	Identifier	overload_danger		3041715	0					
ANR	3042030	CallExpression	"TooManyRegisteredSockets ( ( ( Sock * ) iosock ) -> get_file_desc ( ) , & overload_msg )"		3041715	1					
ANR	3042031	Callee	TooManyRegisteredSockets		3041715	0					
ANR	3042032	Identifier	TooManyRegisteredSockets		3041715	0					
ANR	3042033	ArgumentList	( ( Sock * ) iosock ) -> get_file_desc ( )		3041715	1					
ANR	3042034	Argument	( ( Sock * ) iosock ) -> get_file_desc ( )		3041715	0					
ANR	3042035	CallExpression	( ( Sock * ) iosock ) -> get_file_desc ( )		3041715	0					
ANR	3042036	Callee	( ( Sock * ) iosock ) -> get_file_desc		3041715	0					
ANR	3042037	PtrMemberAccess	( ( Sock * ) iosock ) -> get_file_desc		3041715	0					
ANR	3042038	CastExpression	( Sock * ) iosock		3041715	0					
ANR	3042039	CastTarget	Sock *		3041715	0					
ANR	3042040	Identifier	iosock		3041715	1					
ANR	3042041	Identifier	get_file_desc		3041715	1					
ANR	3042042	ArgumentList			3041715	1					
ANR	3042043	Argument	& overload_msg		3041715	1					
ANR	3042044	UnaryOperationExpression	& overload_msg		3041715	0					
ANR	3042045	UnaryOperator	&		3041715	0					
ANR	3042046	Identifier	overload_msg		3041715	1					
ANR	3042047	IfStatement	if ( overload_danger )		3041715	2					
ANR	3042048	Condition	overload_danger	1534:6:43544:43558	3041715	0	True				
ANR	3042049	Identifier	overload_danger		3041715	0					
ANR	3042050	CompoundStatement		93:2:3267:3267	3041715	1					
ANR	3042051	ExpressionStatement	"dprintf ( D_ALWAYS , ""Aborting registration of socket %s %s: %s\\n"" , iosock_descrip ? iosock_descrip : """" , handler_descrip ? handler_descrip : ( ( Sock * ) iosock ) -> get_sinful_peer ( ) , overload_msg . Value ( ) )"	1536:3:43569:43783	3041715	0	True				
ANR	3042052	CallExpression	"dprintf ( D_ALWAYS , ""Aborting registration of socket %s %s: %s\\n"" , iosock_descrip ? iosock_descrip : """" , handler_descrip ? handler_descrip : ( ( Sock * ) iosock ) -> get_sinful_peer ( ) , overload_msg . Value ( ) )"		3041715	0					
ANR	3042053	Callee	dprintf		3041715	0					
ANR	3042054	Identifier	dprintf		3041715	0					
ANR	3042055	ArgumentList	D_ALWAYS		3041715	1					
ANR	3042056	Argument	D_ALWAYS		3041715	0					
ANR	3042057	Identifier	D_ALWAYS		3041715	0					
ANR	3042058	Argument	"""Aborting registration of socket %s %s: %s\\n"""		3041715	1					
ANR	3042059	PrimaryExpression	"""Aborting registration of socket %s %s: %s\\n"""		3041715	0					
ANR	3042060	Argument	"iosock_descrip ? iosock_descrip : """""		3041715	2					
ANR	3042061	ConditionalExpression	"iosock_descrip ? iosock_descrip : """""		3041715	0					
ANR	3042062	Condition	iosock_descrip		3041715	0					
ANR	3042063	Identifier	iosock_descrip		3041715	0					
ANR	3042064	Identifier	iosock_descrip		3041715	1					
ANR	3042065	PrimaryExpression	""""""		3041715	2					
ANR	3042066	Argument	handler_descrip ? handler_descrip : ( ( Sock * ) iosock ) -> get_sinful_peer ( )		3041715	3					
ANR	3042067	ConditionalExpression	handler_descrip ? handler_descrip : ( ( Sock * ) iosock ) -> get_sinful_peer ( )		3041715	0					
ANR	3042068	Condition	handler_descrip		3041715	0					
ANR	3042069	Identifier	handler_descrip		3041715	0					
ANR	3042070	Identifier	handler_descrip		3041715	1					
ANR	3042071	CallExpression	( ( Sock * ) iosock ) -> get_sinful_peer ( )		3041715	2					
ANR	3042072	Callee	( ( Sock * ) iosock ) -> get_sinful_peer		3041715	0					
ANR	3042073	PtrMemberAccess	( ( Sock * ) iosock ) -> get_sinful_peer		3041715	0					
ANR	3042074	CastExpression	( Sock * ) iosock		3041715	0					
ANR	3042075	CastTarget	Sock *		3041715	0					
ANR	3042076	Identifier	iosock		3041715	1					
ANR	3042077	Identifier	get_sinful_peer		3041715	1					
ANR	3042078	ArgumentList			3041715	1					
ANR	3042079	Argument	overload_msg . Value ( )		3041715	4					
ANR	3042080	CallExpression	overload_msg . Value ( )		3041715	0					
ANR	3042081	Callee	overload_msg . Value		3041715	0					
ANR	3042082	MemberAccess	overload_msg . Value		3041715	0					
ANR	3042083	Identifier	overload_msg		3041715	0					
ANR	3042084	Identifier	Value		3041715	1					
ANR	3042085	ArgumentList			3041715	1					
ANR	3042086	ReturnStatement	return - 3 ;	1541:3:43788:43797	3041715	1	True				
ANR	3042087	UnaryOperationExpression	- 3		3041715	0					
ANR	3042088	UnaryOperator	-		3041715	0					
ANR	3042089	PrimaryExpression	3		3041715	1					
ANR	3042090	ExpressionStatement	( * sockTable ) [ i ] . servicing_tid = 0	1546:1:43869:43902	3041715	12	True				
ANR	3042091	AssignmentExpression	( * sockTable ) [ i ] . servicing_tid = 0		3041715	0		=			
ANR	3042092	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3041715	0					
ANR	3042093	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042094	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042095	UnaryOperator	*		3041715	0					
ANR	3042096	Identifier	sockTable		3041715	1					
ANR	3042097	Identifier	i		3041715	1					
ANR	3042098	Identifier	servicing_tid		3041715	1					
ANR	3042099	PrimaryExpression	0		3041715	1					
ANR	3042100	ExpressionStatement	( * sockTable ) [ i ] . remove_asap = false	1547:1:43905:43940	3041715	13	True				
ANR	3042101	AssignmentExpression	( * sockTable ) [ i ] . remove_asap = false		3041715	0		=			
ANR	3042102	MemberAccess	( * sockTable ) [ i ] . remove_asap		3041715	0					
ANR	3042103	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042104	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042105	UnaryOperator	*		3041715	0					
ANR	3042106	Identifier	sockTable		3041715	1					
ANR	3042107	Identifier	i		3041715	1					
ANR	3042108	Identifier	remove_asap		3041715	1					
ANR	3042109	Identifier	false		3041715	1					
ANR	3042110	ExpressionStatement	( * sockTable ) [ i ] . call_handler = false	1548:1:43943:43979	3041715	14	True				
ANR	3042111	AssignmentExpression	( * sockTable ) [ i ] . call_handler = false		3041715	0		=			
ANR	3042112	MemberAccess	( * sockTable ) [ i ] . call_handler		3041715	0					
ANR	3042113	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042114	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042115	UnaryOperator	*		3041715	0					
ANR	3042116	Identifier	sockTable		3041715	1					
ANR	3042117	Identifier	i		3041715	1					
ANR	3042118	Identifier	call_handler		3041715	1					
ANR	3042119	Identifier	false		3041715	1					
ANR	3042120	ExpressionStatement	( * sockTable ) [ i ] . iosock = ( Sock * ) iosock	1549:1:43982:44021	3041715	15	True				
ANR	3042121	AssignmentExpression	( * sockTable ) [ i ] . iosock = ( Sock * ) iosock		3041715	0		=			
ANR	3042122	MemberAccess	( * sockTable ) [ i ] . iosock		3041715	0					
ANR	3042123	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042124	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042125	UnaryOperator	*		3041715	0					
ANR	3042126	Identifier	sockTable		3041715	1					
ANR	3042127	Identifier	i		3041715	1					
ANR	3042128	Identifier	iosock		3041715	1					
ANR	3042129	CastExpression	( Sock * ) iosock		3041715	1					
ANR	3042130	CastTarget	Sock *		3041715	0					
ANR	3042131	Identifier	iosock		3041715	1					
ANR	3042132	SwitchStatement	switch ( iosock -> type ( ) )		3041715	16					
ANR	3042133	Condition	iosock -> type ( )	1550:10:44033:44046	3041715	0	True				
ANR	3042134	CallExpression	iosock -> type ( )		3041715	0					
ANR	3042135	Callee	iosock -> type		3041715	0					
ANR	3042136	PtrMemberAccess	iosock -> type		3041715	0					
ANR	3042137	Identifier	iosock		3041715	0					
ANR	3042138	Identifier	type		3041715	1					
ANR	3042139	ArgumentList			3041715	1					
ANR	3042140	CompoundStatement		108:27:3753:3753	3041715	1					
ANR	3042141	Label	case Stream :: reli_sock :	1551:2:44054:44077	3041715	0	True				
ANR	3042142	Identifier	Stream :: reli_sock		3041715	0					
ANR	3042143	ExpressionStatement	( * sockTable ) [ i ] . is_connect_pending = ( ( ReliSock * ) iosock ) -> is_connect_pending ( ) && ! ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )	1553:3:44113:44255	3041715	1	True				
ANR	3042144	AssignmentExpression	( * sockTable ) [ i ] . is_connect_pending = ( ( ReliSock * ) iosock ) -> is_connect_pending ( ) && ! ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		3041715	0		=			
ANR	3042145	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		3041715	0					
ANR	3042146	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042147	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042148	UnaryOperator	*		3041715	0					
ANR	3042149	Identifier	sockTable		3041715	1					
ANR	3042150	Identifier	i		3041715	1					
ANR	3042151	Identifier	is_connect_pending		3041715	1					
ANR	3042152	AndExpression	( ( ReliSock * ) iosock ) -> is_connect_pending ( ) && ! ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		3041715	1		&&			
ANR	3042153	CallExpression	( ( ReliSock * ) iosock ) -> is_connect_pending ( )		3041715	0					
ANR	3042154	Callee	( ( ReliSock * ) iosock ) -> is_connect_pending		3041715	0					
ANR	3042155	PtrMemberAccess	( ( ReliSock * ) iosock ) -> is_connect_pending		3041715	0					
ANR	3042156	CastExpression	( ReliSock * ) iosock		3041715	0					
ANR	3042157	CastTarget	ReliSock *		3041715	0					
ANR	3042158	Identifier	iosock		3041715	1					
ANR	3042159	Identifier	is_connect_pending		3041715	1					
ANR	3042160	ArgumentList			3041715	1					
ANR	3042161	UnaryOperationExpression	! ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		3041715	1					
ANR	3042162	UnaryOperator	!		3041715	0					
ANR	3042163	CallExpression	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		3041715	1					
ANR	3042164	Callee	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		3041715	0					
ANR	3042165	PtrMemberAccess	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		3041715	0					
ANR	3042166	CastExpression	( ReliSock * ) iosock		3041715	0					
ANR	3042167	CastTarget	ReliSock *		3041715	0					
ANR	3042168	Identifier	iosock		3041715	1					
ANR	3042169	Identifier	is_reverse_connect_pending		3041715	1					
ANR	3042170	ArgumentList			3041715	1					
ANR	3042171	ExpressionStatement	( * sockTable ) [ i ] . is_reverse_connect_pending = ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )	1556:3:44260:44359	3041715	2	True				
ANR	3042172	AssignmentExpression	( * sockTable ) [ i ] . is_reverse_connect_pending = ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		3041715	0		=			
ANR	3042173	MemberAccess	( * sockTable ) [ i ] . is_reverse_connect_pending		3041715	0					
ANR	3042174	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042175	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042176	UnaryOperator	*		3041715	0					
ANR	3042177	Identifier	sockTable		3041715	1					
ANR	3042178	Identifier	i		3041715	1					
ANR	3042179	Identifier	is_reverse_connect_pending		3041715	1					
ANR	3042180	CallExpression	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		3041715	1					
ANR	3042181	Callee	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		3041715	0					
ANR	3042182	PtrMemberAccess	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		3041715	0					
ANR	3042183	CastExpression	( ReliSock * ) iosock		3041715	0					
ANR	3042184	CastTarget	ReliSock *		3041715	0					
ANR	3042185	Identifier	iosock		3041715	1					
ANR	3042186	Identifier	is_reverse_connect_pending		3041715	1					
ANR	3042187	ArgumentList			3041715	1					
ANR	3042188	BreakStatement	break ;	1558:3:44364:44369	3041715	3	True				
ANR	3042189	Label	case Stream :: safe_sock :	1559:2:44373:44396	3041715	4	True				
ANR	3042190	Identifier	Stream :: safe_sock		3041715	0					
ANR	3042191	ExpressionStatement	( * sockTable ) [ i ] . is_connect_pending = false	1561:3:44442:44484	3041715	5	True				
ANR	3042192	AssignmentExpression	( * sockTable ) [ i ] . is_connect_pending = false		3041715	0		=			
ANR	3042193	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		3041715	0					
ANR	3042194	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042195	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042196	UnaryOperator	*		3041715	0					
ANR	3042197	Identifier	sockTable		3041715	1					
ANR	3042198	Identifier	i		3041715	1					
ANR	3042199	Identifier	is_connect_pending		3041715	1					
ANR	3042200	Identifier	false		3041715	1					
ANR	3042201	ExpressionStatement	( * sockTable ) [ i ] . is_reverse_connect_pending = false	1562:3:44489:44539	3041715	6	True				
ANR	3042202	AssignmentExpression	( * sockTable ) [ i ] . is_reverse_connect_pending = false		3041715	0		=			
ANR	3042203	MemberAccess	( * sockTable ) [ i ] . is_reverse_connect_pending		3041715	0					
ANR	3042204	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042205	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042206	UnaryOperator	*		3041715	0					
ANR	3042207	Identifier	sockTable		3041715	1					
ANR	3042208	Identifier	i		3041715	1					
ANR	3042209	Identifier	is_reverse_connect_pending		3041715	1					
ANR	3042210	Identifier	false		3041715	1					
ANR	3042211	BreakStatement	break ;	1563:3:44544:44549	3041715	7	True				
ANR	3042212	Label	default :	1564:2:44553:44560	3041715	8	True				
ANR	3042213	Identifier	default		3041715	0					
ANR	3042214	ExpressionStatement	"EXCEPT ( ""Adding CEDAR socket of unknown type"" )"	1565:3:44565:44610	3041715	9	True				
ANR	3042215	CallExpression	"EXCEPT ( ""Adding CEDAR socket of unknown type"" )"		3041715	0					
ANR	3042216	Callee	EXCEPT		3041715	0					
ANR	3042217	Identifier	EXCEPT		3041715	0					
ANR	3042218	ArgumentList	"""Adding CEDAR socket of unknown type"""		3041715	1					
ANR	3042219	Argument	"""Adding CEDAR socket of unknown type"""		3041715	0					
ANR	3042220	PrimaryExpression	"""Adding CEDAR socket of unknown type"""		3041715	0					
ANR	3042221	BreakStatement	break ;	1566:3:44615:44620	3041715	10	True				
ANR	3042222	ExpressionStatement	( * sockTable ) [ i ] . handler = handler	1568:1:44626:44659	3041715	17	True				
ANR	3042223	AssignmentExpression	( * sockTable ) [ i ] . handler = handler		3041715	0		=			
ANR	3042224	MemberAccess	( * sockTable ) [ i ] . handler		3041715	0					
ANR	3042225	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042226	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042227	UnaryOperator	*		3041715	0					
ANR	3042228	Identifier	sockTable		3041715	1					
ANR	3042229	Identifier	i		3041715	1					
ANR	3042230	Identifier	handler		3041715	1					
ANR	3042231	Identifier	handler		3041715	1					
ANR	3042232	ExpressionStatement	( * sockTable ) [ i ] . handlercpp = handlercpp	1569:1:44662:44701	3041715	18	True				
ANR	3042233	AssignmentExpression	( * sockTable ) [ i ] . handlercpp = handlercpp		3041715	0		=			
ANR	3042234	MemberAccess	( * sockTable ) [ i ] . handlercpp		3041715	0					
ANR	3042235	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042236	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042237	UnaryOperator	*		3041715	0					
ANR	3042238	Identifier	sockTable		3041715	1					
ANR	3042239	Identifier	i		3041715	1					
ANR	3042240	Identifier	handlercpp		3041715	1					
ANR	3042241	Identifier	handlercpp		3041715	1					
ANR	3042242	ExpressionStatement	( * sockTable ) [ i ] . is_cpp = is_cpp	1570:1:44704:44735	3041715	19	True				
ANR	3042243	AssignmentExpression	( * sockTable ) [ i ] . is_cpp = is_cpp		3041715	0		=			
ANR	3042244	MemberAccess	( * sockTable ) [ i ] . is_cpp		3041715	0					
ANR	3042245	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042246	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042247	UnaryOperator	*		3041715	0					
ANR	3042248	Identifier	sockTable		3041715	1					
ANR	3042249	Identifier	i		3041715	1					
ANR	3042250	Identifier	is_cpp		3041715	1					
ANR	3042251	Identifier	is_cpp		3041715	1					
ANR	3042252	ExpressionStatement	( * sockTable ) [ i ] . perm = perm	1571:1:44738:44765	3041715	20	True				
ANR	3042253	AssignmentExpression	( * sockTable ) [ i ] . perm = perm		3041715	0		=			
ANR	3042254	MemberAccess	( * sockTable ) [ i ] . perm		3041715	0					
ANR	3042255	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042256	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042257	UnaryOperator	*		3041715	0					
ANR	3042258	Identifier	sockTable		3041715	1					
ANR	3042259	Identifier	i		3041715	1					
ANR	3042260	Identifier	perm		3041715	1					
ANR	3042261	Identifier	perm		3041715	1					
ANR	3042262	ExpressionStatement	( * sockTable ) [ i ] . service = s	1572:1:44768:44795	3041715	21	True				
ANR	3042263	AssignmentExpression	( * sockTable ) [ i ] . service = s		3041715	0		=			
ANR	3042264	MemberAccess	( * sockTable ) [ i ] . service		3041715	0					
ANR	3042265	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042266	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042267	UnaryOperator	*		3041715	0					
ANR	3042268	Identifier	sockTable		3041715	1					
ANR	3042269	Identifier	i		3041715	1					
ANR	3042270	Identifier	service		3041715	1					
ANR	3042271	Identifier	s		3041715	1					
ANR	3042272	ExpressionStatement	( * sockTable ) [ i ] . data_ptr = NULL	1573:1:44798:44829	3041715	22	True				
ANR	3042273	AssignmentExpression	( * sockTable ) [ i ] . data_ptr = NULL		3041715	0		=			
ANR	3042274	MemberAccess	( * sockTable ) [ i ] . data_ptr		3041715	0					
ANR	3042275	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042276	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042277	UnaryOperator	*		3041715	0					
ANR	3042278	Identifier	sockTable		3041715	1					
ANR	3042279	Identifier	i		3041715	1					
ANR	3042280	Identifier	data_ptr		3041715	1					
ANR	3042281	Identifier	NULL		3041715	1					
ANR	3042282	ExpressionStatement	free ( ( * sockTable ) [ i ] . iosock_descrip )	1574:1:44832:44868	3041715	23	True				
ANR	3042283	CallExpression	free ( ( * sockTable ) [ i ] . iosock_descrip )		3041715	0					
ANR	3042284	Callee	free		3041715	0					
ANR	3042285	Identifier	free		3041715	0					
ANR	3042286	ArgumentList	( * sockTable ) [ i ] . iosock_descrip		3041715	1					
ANR	3042287	Argument	( * sockTable ) [ i ] . iosock_descrip		3041715	0					
ANR	3042288	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3041715	0					
ANR	3042289	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042290	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042291	UnaryOperator	*		3041715	0					
ANR	3042292	Identifier	sockTable		3041715	1					
ANR	3042293	Identifier	i		3041715	1					
ANR	3042294	Identifier	iosock_descrip		3041715	1					
ANR	3042295	IfStatement	if ( iosock_descrip )		3041715	24					
ANR	3042296	Condition	iosock_descrip	1575:6:44876:44889	3041715	0	True				
ANR	3042297	Identifier	iosock_descrip		3041715	0					
ANR	3042298	ExpressionStatement	( * sockTable ) [ i ] . iosock_descrip = strdup ( iosock_descrip )	1576:2:44895:44950	3041715	1	True				
ANR	3042299	AssignmentExpression	( * sockTable ) [ i ] . iosock_descrip = strdup ( iosock_descrip )		3041715	0		=			
ANR	3042300	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3041715	0					
ANR	3042301	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042302	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042303	UnaryOperator	*		3041715	0					
ANR	3042304	Identifier	sockTable		3041715	1					
ANR	3042305	Identifier	i		3041715	1					
ANR	3042306	Identifier	iosock_descrip		3041715	1					
ANR	3042307	CallExpression	strdup ( iosock_descrip )		3041715	1					
ANR	3042308	Callee	strdup		3041715	0					
ANR	3042309	Identifier	strdup		3041715	0					
ANR	3042310	ArgumentList	iosock_descrip		3041715	1					
ANR	3042311	Argument	iosock_descrip		3041715	0					
ANR	3042312	Identifier	iosock_descrip		3041715	0					
ANR	3042313	ElseStatement	else		3041715	0					
ANR	3042314	ExpressionStatement	( * sockTable ) [ i ] . iosock_descrip = strdup ( EMPTY_DESCRIP )	1578:2:44960:45014	3041715	0	True				
ANR	3042315	AssignmentExpression	( * sockTable ) [ i ] . iosock_descrip = strdup ( EMPTY_DESCRIP )		3041715	0		=			
ANR	3042316	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3041715	0					
ANR	3042317	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042318	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042319	UnaryOperator	*		3041715	0					
ANR	3042320	Identifier	sockTable		3041715	1					
ANR	3042321	Identifier	i		3041715	1					
ANR	3042322	Identifier	iosock_descrip		3041715	1					
ANR	3042323	CallExpression	strdup ( EMPTY_DESCRIP )		3041715	1					
ANR	3042324	Callee	strdup		3041715	0					
ANR	3042325	Identifier	strdup		3041715	0					
ANR	3042326	ArgumentList	EMPTY_DESCRIP		3041715	1					
ANR	3042327	Argument	EMPTY_DESCRIP		3041715	0					
ANR	3042328	Identifier	EMPTY_DESCRIP		3041715	0					
ANR	3042329	ExpressionStatement	free ( ( * sockTable ) [ i ] . handler_descrip )	1579:1:45017:45054	3041715	25	True				
ANR	3042330	CallExpression	free ( ( * sockTable ) [ i ] . handler_descrip )		3041715	0					
ANR	3042331	Callee	free		3041715	0					
ANR	3042332	Identifier	free		3041715	0					
ANR	3042333	ArgumentList	( * sockTable ) [ i ] . handler_descrip		3041715	1					
ANR	3042334	Argument	( * sockTable ) [ i ] . handler_descrip		3041715	0					
ANR	3042335	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3041715	0					
ANR	3042336	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042337	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042338	UnaryOperator	*		3041715	0					
ANR	3042339	Identifier	sockTable		3041715	1					
ANR	3042340	Identifier	i		3041715	1					
ANR	3042341	Identifier	handler_descrip		3041715	1					
ANR	3042342	IfStatement	if ( handler_descrip )		3041715	26					
ANR	3042343	Condition	handler_descrip	1580:6:45062:45076	3041715	0	True				
ANR	3042344	Identifier	handler_descrip		3041715	0					
ANR	3042345	ExpressionStatement	( * sockTable ) [ i ] . handler_descrip = strdup ( handler_descrip )	1581:2:45082:45139	3041715	1	True				
ANR	3042346	AssignmentExpression	( * sockTable ) [ i ] . handler_descrip = strdup ( handler_descrip )		3041715	0		=			
ANR	3042347	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3041715	0					
ANR	3042348	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042349	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042350	UnaryOperator	*		3041715	0					
ANR	3042351	Identifier	sockTable		3041715	1					
ANR	3042352	Identifier	i		3041715	1					
ANR	3042353	Identifier	handler_descrip		3041715	1					
ANR	3042354	CallExpression	strdup ( handler_descrip )		3041715	1					
ANR	3042355	Callee	strdup		3041715	0					
ANR	3042356	Identifier	strdup		3041715	0					
ANR	3042357	ArgumentList	handler_descrip		3041715	1					
ANR	3042358	Argument	handler_descrip		3041715	0					
ANR	3042359	Identifier	handler_descrip		3041715	0					
ANR	3042360	ElseStatement	else		3041715	0					
ANR	3042361	ExpressionStatement	( * sockTable ) [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	1583:2:45149:45204	3041715	0	True				
ANR	3042362	AssignmentExpression	( * sockTable ) [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		3041715	0		=			
ANR	3042363	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3041715	0					
ANR	3042364	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042365	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042366	UnaryOperator	*		3041715	0					
ANR	3042367	Identifier	sockTable		3041715	1					
ANR	3042368	Identifier	i		3041715	1					
ANR	3042369	Identifier	handler_descrip		3041715	1					
ANR	3042370	CallExpression	strdup ( EMPTY_DESCRIP )		3041715	1					
ANR	3042371	Callee	strdup		3041715	0					
ANR	3042372	Identifier	strdup		3041715	0					
ANR	3042373	ArgumentList	EMPTY_DESCRIP		3041715	1					
ANR	3042374	Argument	EMPTY_DESCRIP		3041715	0					
ANR	3042375	Identifier	EMPTY_DESCRIP		3041715	0					
ANR	3042376	IfStatement	if ( i == nSock )		3041715	27					
ANR	3042377	Condition	i == nSock	1587:6:45303:45312	3041715	0	True				
ANR	3042378	EqualityExpression	i == nSock		3041715	0		==			
ANR	3042379	Identifier	i		3041715	0					
ANR	3042380	Identifier	nSock		3041715	1					
ANR	3042381	CompoundStatement		145:20:5020:5020	3041715	1					
ANR	3042382	ExpressionStatement	nSock ++	1588:2:45321:45328	3041715	0	True				
ANR	3042383	PostIncDecOperationExpression	nSock ++		3041715	0					
ANR	3042384	Identifier	nSock		3041715	0					
ANR	3042385	IncDec	++		3041715	1					
ANR	3042386	IfStatement	if ( initial_command_sock == - 1 && handler == 0 && handlercpp == 0 && m_shared_port_endpoint == NULL )		3041715	28					
ANR	3042387	Condition	initial_command_sock == - 1 && handler == 0 && handlercpp == 0 && m_shared_port_endpoint == NULL	1592:6:45404:45498	3041715	0	True				
ANR	3042388	AndExpression	initial_command_sock == - 1 && handler == 0 && handlercpp == 0 && m_shared_port_endpoint == NULL		3041715	0		&&			
ANR	3042389	EqualityExpression	initial_command_sock == - 1		3041715	0		==			
ANR	3042390	Identifier	initial_command_sock		3041715	0					
ANR	3042391	UnaryOperationExpression	- 1		3041715	1					
ANR	3042392	UnaryOperator	-		3041715	0					
ANR	3042393	PrimaryExpression	1		3041715	1					
ANR	3042394	AndExpression	handler == 0 && handlercpp == 0 && m_shared_port_endpoint == NULL		3041715	1		&&			
ANR	3042395	EqualityExpression	handler == 0		3041715	0		==			
ANR	3042396	Identifier	handler		3041715	0					
ANR	3042397	PrimaryExpression	0		3041715	1					
ANR	3042398	AndExpression	handlercpp == 0 && m_shared_port_endpoint == NULL		3041715	1		&&			
ANR	3042399	EqualityExpression	handlercpp == 0		3041715	0		==			
ANR	3042400	Identifier	handlercpp		3041715	0					
ANR	3042401	PrimaryExpression	0		3041715	1					
ANR	3042402	EqualityExpression	m_shared_port_endpoint == NULL		3041715	1		==			
ANR	3042403	Identifier	m_shared_port_endpoint		3041715	0					
ANR	3042404	Identifier	NULL		3041715	1					
ANR	3042405	ExpressionStatement	initial_command_sock = i	1593:2:45504:45528	3041715	1	True				
ANR	3042406	AssignmentExpression	initial_command_sock = i		3041715	0		=			
ANR	3042407	Identifier	initial_command_sock		3041715	0					
ANR	3042408	Identifier	i		3041715	1					
ANR	3042409	ExpressionStatement	curr_regdataptr = & ( ( * sockTable ) [ i ] . data_ptr )	1596:1:45576:45621	3041715	29	True				
ANR	3042410	AssignmentExpression	curr_regdataptr = & ( ( * sockTable ) [ i ] . data_ptr )		3041715	0		=			
ANR	3042411	Identifier	curr_regdataptr		3041715	0					
ANR	3042412	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . data_ptr )		3041715	1					
ANR	3042413	UnaryOperator	&		3041715	0					
ANR	3042414	MemberAccess	( * sockTable ) [ i ] . data_ptr		3041715	1					
ANR	3042415	ArrayIndexing	( * sockTable ) [ i ]		3041715	0					
ANR	3042416	UnaryOperationExpression	* sockTable		3041715	0					
ANR	3042417	UnaryOperator	*		3041715	0					
ANR	3042418	Identifier	sockTable		3041715	1					
ANR	3042419	Identifier	i		3041715	1					
ANR	3042420	Identifier	data_ptr		3041715	1					
ANR	3042421	ExpressionStatement	DumpSocketTable ( D_FULLDEBUG | D_DAEMONCORE )	1599:1:45674:45717	3041715	30	True				
ANR	3042422	CallExpression	DumpSocketTable ( D_FULLDEBUG | D_DAEMONCORE )		3041715	0					
ANR	3042423	Callee	DumpSocketTable		3041715	0					
ANR	3042424	Identifier	DumpSocketTable		3041715	0					
ANR	3042425	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		3041715	1					
ANR	3042426	Argument	D_FULLDEBUG | D_DAEMONCORE		3041715	0					
ANR	3042427	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		3041715	0		|			
ANR	3042428	Identifier	D_FULLDEBUG		3041715	0					
ANR	3042429	Identifier	D_DAEMONCORE		3041715	1					
ANR	3042430	ExpressionStatement	Wake_up_select ( )	1603:1:45834:45850	3041715	31	True				
ANR	3042431	CallExpression	Wake_up_select ( )		3041715	0					
ANR	3042432	Callee	Wake_up_select		3041715	0					
ANR	3042433	Identifier	Wake_up_select		3041715	0					
ANR	3042434	ArgumentList			3041715	1					
ANR	3042435	ReturnStatement	return i ;	1605:1:45854:45862	3041715	32	True				
ANR	3042436	Identifier	i		3041715	0					
ANR	3042437	ReturnType	int		3041715	1					
ANR	3042438	Identifier	DaemonCore :: Register_Socket		3041715	2					
ANR	3042439	ParameterList	"Stream * iosock , const char * iosock_descrip , SocketHandler handler , SocketHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int is_cpp"		3041715	3					
ANR	3042440	Parameter	Stream * iosock	1439:32:40116:40129	3041715	0	True				
ANR	3042441	ParameterType	Stream *		3041715	0					
ANR	3042442	Identifier	iosock		3041715	1					
ANR	3042443	Parameter	const char * iosock_descrip	1439:48:40132:40157	3041715	1	True				
ANR	3042444	ParameterType	const char *		3041715	0					
ANR	3042445	Identifier	iosock_descrip		3041715	1					
ANR	3042446	Parameter	SocketHandler handler	1440:4:40164:40184	3041715	2	True				
ANR	3042447	ParameterType	SocketHandler		3041715	0					
ANR	3042448	Identifier	handler		3041715	1					
ANR	3042449	Parameter	SocketHandlercpp handlercpp	1440:27:40187:40213	3041715	3	True				
ANR	3042450	ParameterType	SocketHandlercpp		3041715	0					
ANR	3042451	Identifier	handlercpp		3041715	1					
ANR	3042452	Parameter	const char * handler_descrip	1441:4:40220:40246	3041715	4	True				
ANR	3042453	ParameterType	const char *		3041715	0					
ANR	3042454	Identifier	handler_descrip		3041715	1					
ANR	3042455	Parameter	Service * s	1441:33:40249:40258	3041715	5	True				
ANR	3042456	ParameterType	Service *		3041715	0					
ANR	3042457	Identifier	s		3041715	1					
ANR	3042458	Parameter	DCpermission perm	1441:45:40261:40277	3041715	6	True				
ANR	3042459	ParameterType	DCpermission		3041715	0					
ANR	3042460	Identifier	perm		3041715	1					
ANR	3042461	Parameter	int is_cpp	1442:4:40284:40293	3041715	7	True				
ANR	3042462	ParameterType	int		3041715	0					
ANR	3042463	Identifier	is_cpp		3041715	1					
ANR	3042464	CFGEntryNode	ENTRY		3041715		True				
ANR	3042465	CFGExitNode	EXIT		3041715		True				
ANR	3042466	Symbol	handler		3041715						
ANR	3042467	Symbol	& overload_msg		3041715						
ANR	3042468	Symbol	( * sockTable ) [ i ] . is_connect_pending		3041715						
ANR	3042469	Symbol	( * sockTable ) [ i ] . is_cpp		3041715						
ANR	3042470	Symbol	& ( * sockTable ) [ i ] . data_ptr		3041715						
ANR	3042471	Symbol	iosock_descrip		3041715						
ANR	3042472	Symbol	duplicate_found		3041715						
ANR	3042473	Symbol	( * sockTable ) [ i ] . data_ptr		3041715						
ANR	3042474	Symbol	( * sockTable ) [ j ] . servicing_tid		3041715						
ANR	3042475	Symbol	( * sockTable ) [ i ] . handlercpp		3041715						
ANR	3042476	Symbol	( * sockTable ) [ i ] . handler_descrip		3041715						
ANR	3042477	Symbol	( * sockTable ) [ i ] . service		3041715						
ANR	3042478	Symbol	IF_NONZERO		3041715						
ANR	3042479	Symbol	overload_msg . Value		3041715						
ANR	3042480	Symbol	( * sockTable ) [ i ] . iosock_descrip		3041715						
ANR	3042481	Symbol	iosock		3041715						
ANR	3042482	Symbol	overload_msg		3041715						
ANR	3042483	Symbol	* iosock		3041715						
ANR	3042484	Symbol	( * sockTable ) [ i ] . iosock		3041715						
ANR	3042485	Symbol	Stream :: reli_sock		3041715						
ANR	3042486	Symbol	handlercpp		3041715						
ANR	3042487	Symbol	( * sockTable ) [ i ] . remove_asap		3041715						
ANR	3042488	Symbol	is_cpp		3041715						
ANR	3042489	Symbol	* * j		3041715						
ANR	3042490	Symbol	NULL		3041715						
ANR	3042491	Symbol	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc		3041715						
ANR	3042492	Symbol	sockTable		3041715						
ANR	3042493	Symbol	* ( * sockTable ) [ j ] . iosock		3041715						
ANR	3042494	Symbol	D_FULLDEBUG		3041715						
ANR	3042495	Symbol	TooManyRegisteredSockets		3041715						
ANR	3042496	Symbol	iosock -> type		3041715						
ANR	3042497	Symbol	( ( ReliSock * ) iosock ) -> is_connect_pending		3041715						
ANR	3042498	Symbol	true		3041715						
ANR	3042499	Symbol	curr_regdataptr		3041715						
ANR	3042500	Symbol	perm		3041715						
ANR	3042501	Symbol	( * sockTable ) [ i ] . is_reverse_connect_pending		3041715						
ANR	3042502	Symbol	overload_danger		3041715						
ANR	3042503	Symbol	* * sockTable		3041715						
ANR	3042504	Symbol	( * sockTable ) [ j ] . iosock		3041715						
ANR	3042505	Symbol	handler_descrip		3041715						
ANR	3042506	Symbol	fd_to_register		3041715						
ANR	3042507	Symbol	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		3041715						
ANR	3042508	Symbol	( ( Sock * ) iosock ) -> get_sinful_peer		3041715						
ANR	3042509	Symbol	IS_RCT		3041715						
ANR	3042510	Symbol	AS_COUNT		3041715						
ANR	3042511	Symbol	* * * sockTable		3041715						
ANR	3042512	Symbol	D_DAEMONCORE		3041715						
ANR	3042513	Symbol	( * sockTable ) [ j ] . remove_asap		3041715						
ANR	3042514	Symbol	nSock		3041715						
ANR	3042515	Symbol	D_ALWAYS		3041715						
ANR	3042516	Symbol	false		3041715						
ANR	3042517	Symbol	i		3041715						
ANR	3042518	Symbol	j		3041715						
ANR	3042519	Symbol	( * sockTable ) [ i ] . perm		3041715						
ANR	3042520	Symbol	nRegisteredSocks		3041715						
ANR	3042521	Symbol	s		3041715						
ANR	3042522	Symbol	* i		3041715						
ANR	3042523	Symbol	* sockTable		3041715						
ANR	3042524	Symbol	IF_VERBOSEPUB		3041715						
ANR	3042525	Symbol	( ( Sock * ) iosock ) -> get_file_desc		3041715						
ANR	3042526	Symbol	* j		3041715						
ANR	3042527	Symbol	EMPTY_DESCRIP		3041715						
ANR	3042528	Symbol	initial_command_sock		3041715						
ANR	3042529	Symbol	m_shared_port_endpoint		3041715						
ANR	3042530	Symbol	( * sockTable ) [ i ] . call_handler		3041715						
ANR	3042531	Symbol	( * sockTable ) [ i ] . servicing_tid		3041715						
ANR	3042532	Symbol	dc_stats		3041715						
ANR	3042533	Symbol	strdup		3041715						
ANR	3042534	Symbol	( * sockTable ) [ i ] . handler		3041715						
ANR	3042535	Function	DaemonCore :: Cancel_Socket	1608:0:45867:47786							
ANR	3042536	FunctionDef	DaemonCore :: Cancel_Socket (Stream * insock)		3042535	0					
ANR	3042537	CompoundStatement		1609:0:45914:47786	3042535	0					
ANR	3042538	IdentifierDeclStatement	"int i , j ;"	1610:1:45917:45924	3042535	0	True				
ANR	3042539	IdentifierDecl	i		3042535	0					
ANR	3042540	IdentifierDeclType	int		3042535	0					
ANR	3042541	Identifier	i		3042535	1					
ANR	3042542	IdentifierDecl	j		3042535	1					
ANR	3042543	IdentifierDeclType	int		3042535	0					
ANR	3042544	Identifier	j		3042535	1					
ANR	3042545	IfStatement	if ( ! insock )		3042535	1					
ANR	3042546	Condition	! insock	1612:5:45932:45938	3042535	0	True				
ANR	3042547	UnaryOperationExpression	! insock		3042535	0					
ANR	3042548	UnaryOperator	!		3042535	0					
ANR	3042549	Identifier	insock		3042535	1					
ANR	3042550	CompoundStatement		4:14:26:26	3042535	1					
ANR	3042551	ReturnStatement	return FALSE ;	1613:2:45945:45957	3042535	0	True				
ANR	3042552	Identifier	FALSE		3042535	0					
ANR	3042553	ExpressionStatement	i = - 1	1616:1:45964:45970	3042535	2	True				
ANR	3042554	AssignmentExpression	i = - 1		3042535	0		=			
ANR	3042555	Identifier	i		3042535	0					
ANR	3042556	UnaryOperationExpression	- 1		3042535	1					
ANR	3042557	UnaryOperator	-		3042535	0					
ANR	3042558	PrimaryExpression	1		3042535	1					
ANR	3042559	ForStatement	for ( j = 0 ; j < nSock ; j ++ )		3042535	3					
ANR	3042560	ForInit	j = 0 ;	1617:6:45978:45981	3042535	0	True				
ANR	3042561	AssignmentExpression	j = 0		3042535	0		=			
ANR	3042562	Identifier	j		3042535	0					
ANR	3042563	PrimaryExpression	0		3042535	1					
ANR	3042564	Condition	j < nSock	1617:10:45982:45988	3042535	1	True				
ANR	3042565	RelationalExpression	j < nSock		3042535	0		<			
ANR	3042566	Identifier	j		3042535	0					
ANR	3042567	Identifier	nSock		3042535	1					
ANR	3042568	PostIncDecOperationExpression	j ++	1617:18:45990:45992	3042535	2	True				
ANR	3042569	Identifier	j		3042535	0					
ANR	3042570	IncDec	++		3042535	1					
ANR	3042571	CompoundStatement		9:23:80:80	3042535	3					
ANR	3042572	IfStatement	if ( ( * sockTable ) [ j ] . iosock == insock )		3042535	0					
ANR	3042573	Condition	( * sockTable ) [ j ] . iosock == insock	1618:7:46004:46035	3042535	0	True				
ANR	3042574	EqualityExpression	( * sockTable ) [ j ] . iosock == insock		3042535	0		==			
ANR	3042575	MemberAccess	( * sockTable ) [ j ] . iosock		3042535	0					
ANR	3042576	ArrayIndexing	( * sockTable ) [ j ]		3042535	0					
ANR	3042577	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042578	UnaryOperator	*		3042535	0					
ANR	3042579	Identifier	sockTable		3042535	1					
ANR	3042580	Identifier	j		3042535	1					
ANR	3042581	Identifier	iosock		3042535	1					
ANR	3042582	Identifier	insock		3042535	1					
ANR	3042583	CompoundStatement		10:42:124:124	3042535	1					
ANR	3042584	ExpressionStatement	i = j	1619:3:46044:46049	3042535	0	True				
ANR	3042585	AssignmentExpression	i = j		3042535	0		=			
ANR	3042586	Identifier	i		3042535	0					
ANR	3042587	Identifier	j		3042535	1					
ANR	3042588	BreakStatement	break ;	1620:3:46054:46059	3042535	1	True				
ANR	3042589	IfStatement	if ( i == - 1 )		3042535	4					
ANR	3042590	Condition	i == - 1	1624:6:46075:46081	3042535	0	True				
ANR	3042591	EqualityExpression	i == - 1		3042535	0		==			
ANR	3042592	Identifier	i		3042535	0					
ANR	3042593	UnaryOperationExpression	- 1		3042535	1					
ANR	3042594	UnaryOperator	-		3042535	0					
ANR	3042595	PrimaryExpression	1		3042535	1					
ANR	3042596	CompoundStatement		16:16:170:170	3042535	1					
ANR	3042597	ExpressionStatement	"dprintf ( D_ALWAYS , ""Cancel_Socket: called on non-registered socket!\\n"" )"	1625:2:46089:46159	3042535	0	True				
ANR	3042598	CallExpression	"dprintf ( D_ALWAYS , ""Cancel_Socket: called on non-registered socket!\\n"" )"		3042535	0					
ANR	3042599	Callee	dprintf		3042535	0					
ANR	3042600	Identifier	dprintf		3042535	0					
ANR	3042601	ArgumentList	D_ALWAYS		3042535	1					
ANR	3042602	Argument	D_ALWAYS		3042535	0					
ANR	3042603	Identifier	D_ALWAYS		3042535	0					
ANR	3042604	Argument	"""Cancel_Socket: called on non-registered socket!\\n"""		3042535	1					
ANR	3042605	PrimaryExpression	"""Cancel_Socket: called on non-registered socket!\\n"""		3042535	0					
ANR	3042606	IfStatement	if ( insock )		3042535	1					
ANR	3042607	Condition	insock	1626:12:46173:46178	3042535	0	True				
ANR	3042608	Identifier	insock		3042535	0					
ANR	3042609	CompoundStatement		18:21:267:267	3042535	1					
ANR	3042610	ExpressionStatement	"dprintf ( D_ALWAYS , ""Offending socket number %d to %s\\n"" , ( ( Sock * ) insock ) -> get_file_desc ( ) , insock -> peer_description ( ) )"	1627:12:46196:46356	3042535	0	True				
ANR	3042611	CallExpression	"dprintf ( D_ALWAYS , ""Offending socket number %d to %s\\n"" , ( ( Sock * ) insock ) -> get_file_desc ( ) , insock -> peer_description ( ) )"		3042535	0					
ANR	3042612	Callee	dprintf		3042535	0					
ANR	3042613	Identifier	dprintf		3042535	0					
ANR	3042614	ArgumentList	D_ALWAYS		3042535	1					
ANR	3042615	Argument	D_ALWAYS		3042535	0					
ANR	3042616	Identifier	D_ALWAYS		3042535	0					
ANR	3042617	Argument	"""Offending socket number %d to %s\\n"""		3042535	1					
ANR	3042618	PrimaryExpression	"""Offending socket number %d to %s\\n"""		3042535	0					
ANR	3042619	Argument	( ( Sock * ) insock ) -> get_file_desc ( )		3042535	2					
ANR	3042620	CallExpression	( ( Sock * ) insock ) -> get_file_desc ( )		3042535	0					
ANR	3042621	Callee	( ( Sock * ) insock ) -> get_file_desc		3042535	0					
ANR	3042622	PtrMemberAccess	( ( Sock * ) insock ) -> get_file_desc		3042535	0					
ANR	3042623	CastExpression	( Sock * ) insock		3042535	0					
ANR	3042624	CastTarget	Sock *		3042535	0					
ANR	3042625	Identifier	insock		3042535	1					
ANR	3042626	Identifier	get_file_desc		3042535	1					
ANR	3042627	ArgumentList			3042535	1					
ANR	3042628	Argument	insock -> peer_description ( )		3042535	3					
ANR	3042629	CallExpression	insock -> peer_description ( )		3042535	0					
ANR	3042630	Callee	insock -> peer_description		3042535	0					
ANR	3042631	PtrMemberAccess	insock -> peer_description		3042535	0					
ANR	3042632	Identifier	insock		3042535	0					
ANR	3042633	Identifier	peer_description		3042535	1					
ANR	3042634	ArgumentList			3042535	1					
ANR	3042635	ExpressionStatement	DumpSocketTable ( D_DAEMONCORE )	1631:2:46370:46401	3042535	2	True				
ANR	3042636	CallExpression	DumpSocketTable ( D_DAEMONCORE )		3042535	0					
ANR	3042637	Callee	DumpSocketTable		3042535	0					
ANR	3042638	Identifier	DumpSocketTable		3042535	0					
ANR	3042639	ArgumentList	D_DAEMONCORE		3042535	1					
ANR	3042640	Argument	D_DAEMONCORE		3042535	0					
ANR	3042641	Identifier	D_DAEMONCORE		3042535	0					
ANR	3042642	ReturnStatement	return FALSE ;	1632:2:46405:46417	3042535	3	True				
ANR	3042643	Identifier	FALSE		3042535	0					
ANR	3042644	IfStatement	if ( curr_regdataptr == & ( ( * sockTable ) [ i ] . data_ptr ) )		3042535	5					
ANR	3042645	Condition	curr_regdataptr == & ( ( * sockTable ) [ i ] . data_ptr )	1636:6:46491:46537	3042535	0	True				
ANR	3042646	EqualityExpression	curr_regdataptr == & ( ( * sockTable ) [ i ] . data_ptr )		3042535	0		==			
ANR	3042647	Identifier	curr_regdataptr		3042535	0					
ANR	3042648	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . data_ptr )		3042535	1					
ANR	3042649	UnaryOperator	&		3042535	0					
ANR	3042650	MemberAccess	( * sockTable ) [ i ] . data_ptr		3042535	1					
ANR	3042651	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042652	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042653	UnaryOperator	*		3042535	0					
ANR	3042654	Identifier	sockTable		3042535	1					
ANR	3042655	Identifier	i		3042535	1					
ANR	3042656	Identifier	data_ptr		3042535	1					
ANR	3042657	ExpressionStatement	curr_regdataptr = NULL	1637:2:46543:46565	3042535	1	True				
ANR	3042658	AssignmentExpression	curr_regdataptr = NULL		3042535	0		=			
ANR	3042659	Identifier	curr_regdataptr		3042535	0					
ANR	3042660	Identifier	NULL		3042535	1					
ANR	3042661	IfStatement	if ( curr_dataptr == & ( ( * sockTable ) [ i ] . data_ptr ) )		3042535	6					
ANR	3042662	Condition	curr_dataptr == & ( ( * sockTable ) [ i ] . data_ptr )	1638:6:46573:46616	3042535	0	True				
ANR	3042663	EqualityExpression	curr_dataptr == & ( ( * sockTable ) [ i ] . data_ptr )		3042535	0		==			
ANR	3042664	Identifier	curr_dataptr		3042535	0					
ANR	3042665	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . data_ptr )		3042535	1					
ANR	3042666	UnaryOperator	&		3042535	0					
ANR	3042667	MemberAccess	( * sockTable ) [ i ] . data_ptr		3042535	1					
ANR	3042668	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042669	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042670	UnaryOperator	*		3042535	0					
ANR	3042671	Identifier	sockTable		3042535	1					
ANR	3042672	Identifier	i		3042535	1					
ANR	3042673	Identifier	data_ptr		3042535	1					
ANR	3042674	ExpressionStatement	curr_dataptr = NULL	1639:2:46622:46641	3042535	1	True				
ANR	3042675	AssignmentExpression	curr_dataptr = NULL		3042535	0		=			
ANR	3042676	Identifier	curr_dataptr		3042535	0					
ANR	3042677	Identifier	NULL		3042535	1					
ANR	3042678	IfStatement	if ( ( * sockTable ) [ i ] . servicing_tid == 0 || ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( ) )		3042535	7					
ANR	3042679	Condition	( * sockTable ) [ i ] . servicing_tid == 0 || ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )	1641:5:46649:46759	3042535	0	True				
ANR	3042680	OrExpression	( * sockTable ) [ i ] . servicing_tid == 0 || ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )		3042535	0		||			
ANR	3042681	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == 0		3042535	0		==			
ANR	3042682	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3042535	0					
ANR	3042683	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042684	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042685	UnaryOperator	*		3042535	0					
ANR	3042686	Identifier	sockTable		3042535	1					
ANR	3042687	Identifier	i		3042535	1					
ANR	3042688	Identifier	servicing_tid		3042535	1					
ANR	3042689	PrimaryExpression	0		3042535	1					
ANR	3042690	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )		3042535	1		==			
ANR	3042691	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3042535	0					
ANR	3042692	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042693	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042694	UnaryOperator	*		3042535	0					
ANR	3042695	Identifier	sockTable		3042535	1					
ANR	3042696	Identifier	i		3042535	1					
ANR	3042697	Identifier	servicing_tid		3042535	1					
ANR	3042698	CallExpression	CondorThreads :: get_handle ( ) -> get_tid ( )		3042535	1					
ANR	3042699	Callee	CondorThreads :: get_handle ( ) -> get_tid		3042535	0					
ANR	3042700	PtrMemberAccess	CondorThreads :: get_handle ( ) -> get_tid		3042535	0					
ANR	3042701	CallExpression	CondorThreads :: get_handle ( )		3042535	0					
ANR	3042702	Callee	CondorThreads :: get_handle		3042535	0					
ANR	3042703	Identifier	CondorThreads :: get_handle		3042535	0					
ANR	3042704	ArgumentList			3042535	1					
ANR	3042705	Identifier	get_tid		3042535	1					
ANR	3042706	ArgumentList			3042535	1					
ANR	3042707	CompoundStatement		35:1:848:848	3042535	1					
ANR	3042708	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Socket: cancelled socket %d <%s> %p\\n"" , i , ( * sockTable ) [ i ] . iosock_descrip , ( * sockTable ) [ i ] . iosock )"	1645:2:46786:46917	3042535	0	True				
ANR	3042709	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Socket: cancelled socket %d <%s> %p\\n"" , i , ( * sockTable ) [ i ] . iosock_descrip , ( * sockTable ) [ i ] . iosock )"		3042535	0					
ANR	3042710	Callee	dprintf		3042535	0					
ANR	3042711	Identifier	dprintf		3042535	0					
ANR	3042712	ArgumentList	D_DAEMONCORE		3042535	1					
ANR	3042713	Argument	D_DAEMONCORE		3042535	0					
ANR	3042714	Identifier	D_DAEMONCORE		3042535	0					
ANR	3042715	Argument	"""Cancel_Socket: cancelled socket %d <%s> %p\\n"""		3042535	1					
ANR	3042716	PrimaryExpression	"""Cancel_Socket: cancelled socket %d <%s> %p\\n"""		3042535	0					
ANR	3042717	Argument	i		3042535	2					
ANR	3042718	Identifier	i		3042535	0					
ANR	3042719	Argument	( * sockTable ) [ i ] . iosock_descrip		3042535	3					
ANR	3042720	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3042535	0					
ANR	3042721	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042722	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042723	UnaryOperator	*		3042535	0					
ANR	3042724	Identifier	sockTable		3042535	1					
ANR	3042725	Identifier	i		3042535	1					
ANR	3042726	Identifier	iosock_descrip		3042535	1					
ANR	3042727	Argument	( * sockTable ) [ i ] . iosock		3042535	4					
ANR	3042728	MemberAccess	( * sockTable ) [ i ] . iosock		3042535	0					
ANR	3042729	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042730	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042731	UnaryOperator	*		3042535	0					
ANR	3042732	Identifier	sockTable		3042535	1					
ANR	3042733	Identifier	i		3042535	1					
ANR	3042734	Identifier	iosock		3042535	1					
ANR	3042735	ExpressionStatement	( * sockTable ) [ i ] . iosock = NULL	1648:2:46990:47019	3042535	1	True				
ANR	3042736	AssignmentExpression	( * sockTable ) [ i ] . iosock = NULL		3042535	0		=			
ANR	3042737	MemberAccess	( * sockTable ) [ i ] . iosock		3042535	0					
ANR	3042738	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042739	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042740	UnaryOperator	*		3042535	0					
ANR	3042741	Identifier	sockTable		3042535	1					
ANR	3042742	Identifier	i		3042535	1					
ANR	3042743	Identifier	iosock		3042535	1					
ANR	3042744	Identifier	NULL		3042535	1					
ANR	3042745	ExpressionStatement	free ( ( * sockTable ) [ i ] . iosock_descrip )	1649:2:47023:47061	3042535	2	True				
ANR	3042746	CallExpression	free ( ( * sockTable ) [ i ] . iosock_descrip )		3042535	0					
ANR	3042747	Callee	free		3042535	0					
ANR	3042748	Identifier	free		3042535	0					
ANR	3042749	ArgumentList	( * sockTable ) [ i ] . iosock_descrip		3042535	1					
ANR	3042750	Argument	( * sockTable ) [ i ] . iosock_descrip		3042535	0					
ANR	3042751	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3042535	0					
ANR	3042752	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042753	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042754	UnaryOperator	*		3042535	0					
ANR	3042755	Identifier	sockTable		3042535	1					
ANR	3042756	Identifier	i		3042535	1					
ANR	3042757	Identifier	iosock_descrip		3042535	1					
ANR	3042758	ExpressionStatement	( * sockTable ) [ i ] . iosock_descrip = NULL	1650:2:47065:47102	3042535	3	True				
ANR	3042759	AssignmentExpression	( * sockTable ) [ i ] . iosock_descrip = NULL		3042535	0		=			
ANR	3042760	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3042535	0					
ANR	3042761	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042762	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042763	UnaryOperator	*		3042535	0					
ANR	3042764	Identifier	sockTable		3042535	1					
ANR	3042765	Identifier	i		3042535	1					
ANR	3042766	Identifier	iosock_descrip		3042535	1					
ANR	3042767	Identifier	NULL		3042535	1					
ANR	3042768	ExpressionStatement	free ( ( * sockTable ) [ i ] . handler_descrip )	1651:2:47106:47145	3042535	4	True				
ANR	3042769	CallExpression	free ( ( * sockTable ) [ i ] . handler_descrip )		3042535	0					
ANR	3042770	Callee	free		3042535	0					
ANR	3042771	Identifier	free		3042535	0					
ANR	3042772	ArgumentList	( * sockTable ) [ i ] . handler_descrip		3042535	1					
ANR	3042773	Argument	( * sockTable ) [ i ] . handler_descrip		3042535	0					
ANR	3042774	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3042535	0					
ANR	3042775	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042776	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042777	UnaryOperator	*		3042535	0					
ANR	3042778	Identifier	sockTable		3042535	1					
ANR	3042779	Identifier	i		3042535	1					
ANR	3042780	Identifier	handler_descrip		3042535	1					
ANR	3042781	ExpressionStatement	( * sockTable ) [ i ] . handler_descrip = NULL	1652:2:47149:47187	3042535	5	True				
ANR	3042782	AssignmentExpression	( * sockTable ) [ i ] . handler_descrip = NULL		3042535	0		=			
ANR	3042783	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3042535	0					
ANR	3042784	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042785	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042786	UnaryOperator	*		3042535	0					
ANR	3042787	Identifier	sockTable		3042535	1					
ANR	3042788	Identifier	i		3042535	1					
ANR	3042789	Identifier	handler_descrip		3042535	1					
ANR	3042790	Identifier	NULL		3042535	1					
ANR	3042791	IfStatement	if ( i == nSock - 1 )		3042535	6					
ANR	3042792	Condition	i == nSock - 1	1654:7:47272:47285	3042535	0	True				
ANR	3042793	EqualityExpression	i == nSock - 1		3042535	0		==			
ANR	3042794	Identifier	i		3042535	0					
ANR	3042795	AdditiveExpression	nSock - 1		3042535	1		-			
ANR	3042796	Identifier	nSock		3042535	0					
ANR	3042797	PrimaryExpression	1		3042535	1					
ANR	3042798	CompoundStatement		46:24:1374:1374	3042535	1					
ANR	3042799	ExpressionStatement	nSock --	1655:3:47294:47301	3042535	0	True				
ANR	3042800	PostIncDecOperationExpression	nSock --		3042535	0					
ANR	3042801	Identifier	nSock		3042535	0					
ANR	3042802	IncDec	--		3042535	1					
ANR	3042803	ElseStatement	else		3042535	0					
ANR	3042804	CompoundStatement		49:8:1412:1412	3042535	0					
ANR	3042805	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Socket: deferred cancel socket %d <%s> %p\\n"" , i , ( * sockTable ) [ i ] . iosock_descrip , ( * sockTable ) [ i ] . iosock )"	1659:2:47350:47487	3042535	0	True				
ANR	3042806	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Socket: deferred cancel socket %d <%s> %p\\n"" , i , ( * sockTable ) [ i ] . iosock_descrip , ( * sockTable ) [ i ] . iosock )"		3042535	0					
ANR	3042807	Callee	dprintf		3042535	0					
ANR	3042808	Identifier	dprintf		3042535	0					
ANR	3042809	ArgumentList	D_DAEMONCORE		3042535	1					
ANR	3042810	Argument	D_DAEMONCORE		3042535	0					
ANR	3042811	Identifier	D_DAEMONCORE		3042535	0					
ANR	3042812	Argument	"""Cancel_Socket: deferred cancel socket %d <%s> %p\\n"""		3042535	1					
ANR	3042813	PrimaryExpression	"""Cancel_Socket: deferred cancel socket %d <%s> %p\\n"""		3042535	0					
ANR	3042814	Argument	i		3042535	2					
ANR	3042815	Identifier	i		3042535	0					
ANR	3042816	Argument	( * sockTable ) [ i ] . iosock_descrip		3042535	3					
ANR	3042817	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3042535	0					
ANR	3042818	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042819	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042820	UnaryOperator	*		3042535	0					
ANR	3042821	Identifier	sockTable		3042535	1					
ANR	3042822	Identifier	i		3042535	1					
ANR	3042823	Identifier	iosock_descrip		3042535	1					
ANR	3042824	Argument	( * sockTable ) [ i ] . iosock		3042535	4					
ANR	3042825	MemberAccess	( * sockTable ) [ i ] . iosock		3042535	0					
ANR	3042826	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042827	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042828	UnaryOperator	*		3042535	0					
ANR	3042829	Identifier	sockTable		3042535	1					
ANR	3042830	Identifier	i		3042535	1					
ANR	3042831	Identifier	iosock		3042535	1					
ANR	3042832	ExpressionStatement	( * sockTable ) [ i ] . remove_asap = true	1661:2:47491:47525	3042535	1	True				
ANR	3042833	AssignmentExpression	( * sockTable ) [ i ] . remove_asap = true		3042535	0		=			
ANR	3042834	MemberAccess	( * sockTable ) [ i ] . remove_asap		3042535	0					
ANR	3042835	ArrayIndexing	( * sockTable ) [ i ]		3042535	0					
ANR	3042836	UnaryOperationExpression	* sockTable		3042535	0					
ANR	3042837	UnaryOperator	*		3042535	0					
ANR	3042838	Identifier	sockTable		3042535	1					
ANR	3042839	Identifier	i		3042535	1					
ANR	3042840	Identifier	remove_asap		3042535	1					
ANR	3042841	Identifier	true		3042535	1					
ANR	3042842	ExpressionStatement	nRegisteredSocks --	1664:1:47532:47550	3042535	8	True				
ANR	3042843	PostIncDecOperationExpression	nRegisteredSocks --		3042535	0					
ANR	3042844	Identifier	nRegisteredSocks		3042535	0					
ANR	3042845	IncDec	--		3042535	1					
ANR	3042846	ExpressionStatement	DumpSocketTable ( D_FULLDEBUG | D_DAEMONCORE )	1666:1:47593:47636	3042535	9	True				
ANR	3042847	CallExpression	DumpSocketTable ( D_FULLDEBUG | D_DAEMONCORE )		3042535	0					
ANR	3042848	Callee	DumpSocketTable		3042535	0					
ANR	3042849	Identifier	DumpSocketTable		3042535	0					
ANR	3042850	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		3042535	1					
ANR	3042851	Argument	D_FULLDEBUG | D_DAEMONCORE		3042535	0					
ANR	3042852	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		3042535	0		|			
ANR	3042853	Identifier	D_FULLDEBUG		3042535	0					
ANR	3042854	Identifier	D_DAEMONCORE		3042535	1					
ANR	3042855	ExpressionStatement	Wake_up_select ( )	1670:1:47753:47769	3042535	10	True				
ANR	3042856	CallExpression	Wake_up_select ( )		3042535	0					
ANR	3042857	Callee	Wake_up_select		3042535	0					
ANR	3042858	Identifier	Wake_up_select		3042535	0					
ANR	3042859	ArgumentList			3042535	1					
ANR	3042860	ReturnStatement	return TRUE ;	1672:1:47773:47784	3042535	11	True				
ANR	3042861	Identifier	TRUE		3042535	0					
ANR	3042862	ReturnType	int		3042535	1					
ANR	3042863	Identifier	DaemonCore :: Cancel_Socket		3042535	2					
ANR	3042864	ParameterList	Stream * insock		3042535	3					
ANR	3042865	Parameter	Stream * insock	1608:31:45898:45911	3042535	0	True				
ANR	3042866	ParameterType	Stream *		3042535	0					
ANR	3042867	Identifier	insock		3042535	1					
ANR	3042868	CFGEntryNode	ENTRY		3042535		True				
ANR	3042869	CFGExitNode	EXIT		3042535		True				
ANR	3042870	Symbol	curr_regdataptr		3042535						
ANR	3042871	Symbol	& ( * sockTable ) [ i ] . data_ptr		3042535						
ANR	3042872	Symbol	* * sockTable		3042535						
ANR	3042873	Symbol	( * sockTable ) [ j ] . iosock		3042535						
ANR	3042874	Symbol	curr_dataptr		3042535						
ANR	3042875	Symbol	( * sockTable ) [ i ] . handler_descrip		3042535						
ANR	3042876	Symbol	( ( Sock * ) insock ) -> get_file_desc		3042535						
ANR	3042877	Symbol	( * sockTable ) [ i ] . iosock_descrip		3042535						
ANR	3042878	Symbol	( * sockTable ) [ i ] . iosock		3042535						
ANR	3042879	Symbol	insock		3042535						
ANR	3042880	Symbol	* CondorThreads :: get_handle		3042535						
ANR	3042881	Symbol	CondorThreads :: get_handle		3042535						
ANR	3042882	Symbol	( * sockTable ) [ i ] . remove_asap		3042535						
ANR	3042883	Symbol	NULL		3042535						
ANR	3042884	Symbol	D_DAEMONCORE		3042535						
ANR	3042885	Symbol	nSock		3042535						
ANR	3042886	Symbol	sockTable		3042535						
ANR	3042887	Symbol	D_ALWAYS		3042535						
ANR	3042888	Symbol	i		3042535						
ANR	3042889	Symbol	TRUE		3042535						
ANR	3042890	Symbol	j		3042535						
ANR	3042891	Symbol	D_FULLDEBUG		3042535						
ANR	3042892	Symbol	nRegisteredSocks		3042535						
ANR	3042893	Symbol	insock -> peer_description		3042535						
ANR	3042894	Symbol	* i		3042535						
ANR	3042895	Symbol	CondorThreads :: get_handle ( ) -> get_tid		3042535						
ANR	3042896	Symbol	* j		3042535						
ANR	3042897	Symbol	* sockTable		3042535						
ANR	3042898	Symbol	* insock		3042535						
ANR	3042899	Symbol	true		3042535						
ANR	3042900	Symbol	( * sockTable ) [ i ] . servicing_tid		3042535						
ANR	3042901	Symbol	FALSE		3042535						
ANR	3042902	DeclStmt									
ANR	3042903	Decl							const int	const int	PIPE_INDEX_OFFSET
ANR	3042904	Function	DaemonCore :: pipeHandleTableInsert	1686:0:48454:48839							
ANR	3042905	FunctionDef	DaemonCore :: pipeHandleTableInsert (PipeHandle entry)		3042904	0					
ANR	3042906	CompoundStatement		1687:0:48510:48839	3042904	0					
ANR	3042907	ForStatement	for ( int i = 0 ; i <= maxPipeHandleIndex ; i ++ )		3042904	0					
ANR	3042908	ForInit	int i = 0 ;	1689:6:48546:48555	3042904	0	True				
ANR	3042909	IdentifierDeclStatement	int i = 0 ;		3042904	0					
ANR	3042910	IdentifierDecl	i = 0		3042904	0					
ANR	3042911	IdentifierDeclType	int		3042904	0					
ANR	3042912	Identifier	i		3042904	1					
ANR	3042913	AssignmentExpression	i = 0		3042904	2		=			
ANR	3042914	Identifier	i		3042904	0					
ANR	3042915	PrimaryExpression	0		3042904	1					
ANR	3042916	Condition	i <= maxPipeHandleIndex	1689:17:48557:48579	3042904	1	True				
ANR	3042917	RelationalExpression	i <= maxPipeHandleIndex		3042904	0		<=			
ANR	3042918	Identifier	i		3042904	0					
ANR	3042919	Identifier	maxPipeHandleIndex		3042904	1					
ANR	3042920	PostIncDecOperationExpression	i ++	1689:42:48582:48584	3042904	2	True				
ANR	3042921	Identifier	i		3042904	0					
ANR	3042922	IncDec	++		3042904	1					
ANR	3042923	CompoundStatement		3:47:76:76	3042904	3					
ANR	3042924	IfStatement	if ( ( * pipeHandleTable ) [ i ] == ( PipeHandle ) - 1 )		3042904	0					
ANR	3042925	Condition	( * pipeHandleTable ) [ i ] == ( PipeHandle ) - 1	1690:6:48595:48633	3042904	0	True				
ANR	3042926	EqualityExpression	( * pipeHandleTable ) [ i ] == ( PipeHandle ) - 1		3042904	0		==			
ANR	3042927	ArrayIndexing	( * pipeHandleTable ) [ i ]		3042904	0					
ANR	3042928	UnaryOperationExpression	* pipeHandleTable		3042904	0					
ANR	3042929	UnaryOperator	*		3042904	0					
ANR	3042930	Identifier	pipeHandleTable		3042904	1					
ANR	3042931	Identifier	i		3042904	1					
ANR	3042932	CastExpression	( PipeHandle ) - 1		3042904	1					
ANR	3042933	CastTarget	PipeHandle		3042904	0					
ANR	3042934	UnaryOperationExpression	- 1		3042904	1					
ANR	3042935	UnaryOperator	-		3042904	0					
ANR	3042936	PrimaryExpression	1		3042904	1					
ANR	3042937	CompoundStatement		4:47:125:125	3042904	1					
ANR	3042938	ExpressionStatement	( * pipeHandleTable ) [ i ] = entry	1691:3:48641:48670	3042904	0	True				
ANR	3042939	AssignmentExpression	( * pipeHandleTable ) [ i ] = entry		3042904	0		=			
ANR	3042940	ArrayIndexing	( * pipeHandleTable ) [ i ]		3042904	0					
ANR	3042941	UnaryOperationExpression	* pipeHandleTable		3042904	0					
ANR	3042942	UnaryOperator	*		3042904	0					
ANR	3042943	Identifier	pipeHandleTable		3042904	1					
ANR	3042944	Identifier	i		3042904	1					
ANR	3042945	Identifier	entry		3042904	1					
ANR	3042946	ReturnStatement	return i ;	1692:3:48675:48683	3042904	1	True				
ANR	3042947	Identifier	i		3042904	0					
ANR	3042948	ExpressionStatement	( * pipeHandleTable ) [ ++ maxPipeHandleIndex ] = entry	1697:1:48761:48809	3042904	1	True				
ANR	3042949	AssignmentExpression	( * pipeHandleTable ) [ ++ maxPipeHandleIndex ] = entry		3042904	0		=			
ANR	3042950	ArrayIndexing	( * pipeHandleTable ) [ ++ maxPipeHandleIndex ]		3042904	0					
ANR	3042951	UnaryOperationExpression	* pipeHandleTable		3042904	0					
ANR	3042952	UnaryOperator	*		3042904	0					
ANR	3042953	Identifier	pipeHandleTable		3042904	1					
ANR	3042954	UnaryExpression	++ maxPipeHandleIndex		3042904	1					
ANR	3042955	IncDec	++		3042904	0					
ANR	3042956	Identifier	maxPipeHandleIndex		3042904	1					
ANR	3042957	Identifier	entry		3042904	1					
ANR	3042958	ReturnStatement	return maxPipeHandleIndex ;	1698:1:48812:48837	3042904	2	True				
ANR	3042959	Identifier	maxPipeHandleIndex		3042904	0					
ANR	3042960	ReturnType	int		3042904	1					
ANR	3042961	Identifier	DaemonCore :: pipeHandleTableInsert		3042904	2					
ANR	3042962	ParameterList	PipeHandle entry		3042904	3					
ANR	3042963	Parameter	PipeHandle entry	1686:38:48492:48507	3042904	0	True				
ANR	3042964	ParameterType	PipeHandle		3042904	0					
ANR	3042965	Identifier	entry		3042904	1					
ANR	3042966	CFGEntryNode	ENTRY		3042904		True				
ANR	3042967	CFGExitNode	EXIT		3042904		True				
ANR	3042968	Symbol	entry		3042904						
ANR	3042969	Symbol	pipeHandleTable		3042904						
ANR	3042970	Symbol	* i		3042904						
ANR	3042971	Symbol	* maxPipeHandleIndex		3042904						
ANR	3042972	Symbol	* pipeHandleTable		3042904						
ANR	3042973	Symbol	* * pipeHandleTable		3042904						
ANR	3042974	Symbol	i		3042904						
ANR	3042975	Symbol	maxPipeHandleIndex		3042904						
ANR	3042976	Function	DaemonCore :: pipeHandleTableRemove	1701:0:48842:49078							
ANR	3042977	FunctionDef	DaemonCore :: pipeHandleTableRemove (int index)		3042976	0					
ANR	3042978	CompoundStatement		1702:0:48892:49078	3042976	0					
ANR	3042979	ExpressionStatement	( * pipeHandleTable ) [ index ] = ( PipeHandle ) - 1	1704:1:48921:48963	3042976	0	True				
ANR	3042980	AssignmentExpression	( * pipeHandleTable ) [ index ] = ( PipeHandle ) - 1		3042976	0		=			
ANR	3042981	ArrayIndexing	( * pipeHandleTable ) [ index ]		3042976	0					
ANR	3042982	UnaryOperationExpression	* pipeHandleTable		3042976	0					
ANR	3042983	UnaryOperator	*		3042976	0					
ANR	3042984	Identifier	pipeHandleTable		3042976	1					
ANR	3042985	Identifier	index		3042976	1					
ANR	3042986	CastExpression	( PipeHandle ) - 1		3042976	1					
ANR	3042987	CastTarget	PipeHandle		3042976	0					
ANR	3042988	UnaryOperationExpression	- 1		3042976	1					
ANR	3042989	UnaryOperator	-		3042976	0					
ANR	3042990	PrimaryExpression	1		3042976	1					
ANR	3042991	IfStatement	if ( index == maxPipeHandleIndex )		3042976	1					
ANR	3042992	Condition	index == maxPipeHandleIndex	1707:5:49020:49046	3042976	0	True				
ANR	3042993	EqualityExpression	index == maxPipeHandleIndex		3042976	0		==			
ANR	3042994	Identifier	index		3042976	0					
ANR	3042995	Identifier	maxPipeHandleIndex		3042976	1					
ANR	3042996	CompoundStatement		6:34:156:156	3042976	1					
ANR	3042997	ExpressionStatement	maxPipeHandleIndex --	1708:2:49053:49073	3042976	0	True				
ANR	3042998	PostIncDecOperationExpression	maxPipeHandleIndex --		3042976	0					
ANR	3042999	Identifier	maxPipeHandleIndex		3042976	0					
ANR	3043000	IncDec	--		3042976	1					
ANR	3043001	ReturnType	void		3042976	1					
ANR	3043002	Identifier	DaemonCore :: pipeHandleTableRemove		3042976	2					
ANR	3043003	ParameterList	int index		3042976	3					
ANR	3043004	Parameter	int index	1701:39:48881:48889	3042976	0	True				
ANR	3043005	ParameterType	int		3042976	0					
ANR	3043006	Identifier	index		3042976	1					
ANR	3043007	CFGEntryNode	ENTRY		3042976		True				
ANR	3043008	CFGExitNode	EXIT		3042976		True				
ANR	3043009	Symbol	pipeHandleTable		3042976						
ANR	3043010	Symbol	* pipeHandleTable		3042976						
ANR	3043011	Symbol	* index		3042976						
ANR	3043012	Symbol	* * pipeHandleTable		3042976						
ANR	3043013	Symbol	index		3042976						
ANR	3043014	Symbol	maxPipeHandleIndex		3042976						
ANR	3043015	Function	DaemonCore :: pipeHandleTableLookup	1712:0:49081:49371							
ANR	3043016	FunctionDef	"DaemonCore :: pipeHandleTableLookup (int index , PipeHandle * ph)"		3043015	0					
ANR	3043017	CompoundStatement		1713:0:49146:49371	3043015	0					
ANR	3043018	IfStatement	if ( ( index < 0 ) || ( index > maxPipeHandleIndex ) )		3043015	0					
ANR	3043019	Condition	( index < 0 ) || ( index > maxPipeHandleIndex )	1714:5:49153:49195	3043015	0	True				
ANR	3043020	OrExpression	( index < 0 ) || ( index > maxPipeHandleIndex )		3043015	0		||			
ANR	3043021	RelationalExpression	index < 0		3043015	0		<			
ANR	3043022	Identifier	index		3043015	0					
ANR	3043023	PrimaryExpression	0		3043015	1					
ANR	3043024	RelationalExpression	index > maxPipeHandleIndex		3043015	1		>			
ANR	3043025	Identifier	index		3043015	0					
ANR	3043026	Identifier	maxPipeHandleIndex		3043015	1					
ANR	3043027	CompoundStatement		2:50:51:51	3043015	1					
ANR	3043028	ReturnStatement	return FALSE ;	1715:2:49202:49214	3043015	0	True				
ANR	3043029	Identifier	FALSE		3043015	0					
ANR	3043030	IdentifierDeclStatement	PipeHandle tmp_ph = ( * pipeHandleTable ) [ index ] ;	1717:1:49220:49265	3043015	1	True				
ANR	3043031	IdentifierDecl	tmp_ph = ( * pipeHandleTable ) [ index ]		3043015	0					
ANR	3043032	IdentifierDeclType	PipeHandle		3043015	0					
ANR	3043033	Identifier	tmp_ph		3043015	1					
ANR	3043034	AssignmentExpression	tmp_ph = ( * pipeHandleTable ) [ index ]		3043015	2		=			
ANR	3043035	Identifier	tmp_ph		3043015	0					
ANR	3043036	ArrayIndexing	( * pipeHandleTable ) [ index ]		3043015	1					
ANR	3043037	UnaryOperationExpression	* pipeHandleTable		3043015	0					
ANR	3043038	UnaryOperator	*		3043015	0					
ANR	3043039	Identifier	pipeHandleTable		3043015	1					
ANR	3043040	Identifier	index		3043015	1					
ANR	3043041	IfStatement	if ( tmp_ph == ( PipeHandle ) - 1 )		3043015	2					
ANR	3043042	Condition	tmp_ph == ( PipeHandle ) - 1	1718:5:49272:49295	3043015	0	True				
ANR	3043043	EqualityExpression	tmp_ph == ( PipeHandle ) - 1		3043015	0		==			
ANR	3043044	Identifier	tmp_ph		3043015	0					
ANR	3043045	CastExpression	( PipeHandle ) - 1		3043015	1					
ANR	3043046	CastTarget	PipeHandle		3043015	0					
ANR	3043047	UnaryOperationExpression	- 1		3043015	1					
ANR	3043048	UnaryOperator	-		3043015	0					
ANR	3043049	PrimaryExpression	1		3043015	1					
ANR	3043050	CompoundStatement		6:31:151:151	3043015	1					
ANR	3043051	ReturnStatement	return FALSE ;	1719:2:49302:49314	3043015	0	True				
ANR	3043052	Identifier	FALSE		3043015	0					
ANR	3043053	IfStatement	if ( ph != NULL )		3043015	3					
ANR	3043054	Condition	ph != NULL	1721:5:49324:49333	3043015	0	True				
ANR	3043055	EqualityExpression	ph != NULL		3043015	0		!=			
ANR	3043056	Identifier	ph		3043015	0					
ANR	3043057	Identifier	NULL		3043015	1					
ANR	3043058	CompoundStatement		9:17:189:189	3043015	1					
ANR	3043059	ExpressionStatement	* ph = tmp_ph	1722:2:49340:49352	3043015	0	True				
ANR	3043060	AssignmentExpression	* ph = tmp_ph		3043015	0		=			
ANR	3043061	UnaryOperationExpression	* ph		3043015	0					
ANR	3043062	UnaryOperator	*		3043015	0					
ANR	3043063	Identifier	ph		3043015	1					
ANR	3043064	Identifier	tmp_ph		3043015	1					
ANR	3043065	ReturnStatement	return TRUE ;	1724:1:49358:49369	3043015	4	True				
ANR	3043066	Identifier	TRUE		3043015	0					
ANR	3043067	ReturnType	int		3043015	1					
ANR	3043068	Identifier	DaemonCore :: pipeHandleTableLookup		3043015	2					
ANR	3043069	ParameterList	"int index , PipeHandle * ph"		3043015	3					
ANR	3043070	Parameter	int index	1712:38:49119:49127	3043015	0	True				
ANR	3043071	ParameterType	int		3043015	0					
ANR	3043072	Identifier	index		3043015	1					
ANR	3043073	Parameter	PipeHandle * ph	1712:49:49130:49143	3043015	1	True				
ANR	3043074	ParameterType	PipeHandle *		3043015	0					
ANR	3043075	Identifier	ph		3043015	1					
ANR	3043076	CFGEntryNode	ENTRY		3043015		True				
ANR	3043077	CFGExitNode	EXIT		3043015		True				
ANR	3043078	Symbol	pipeHandleTable		3043015						
ANR	3043079	Symbol	NULL		3043015						
ANR	3043080	Symbol	tmp_ph		3043015						
ANR	3043081	Symbol	* pipeHandleTable		3043015						
ANR	3043082	Symbol	* index		3043015						
ANR	3043083	Symbol	ph		3043015						
ANR	3043084	Symbol	* * pipeHandleTable		3043015						
ANR	3043085	Symbol	index		3043015						
ANR	3043086	Symbol	TRUE		3043015						
ANR	3043087	Symbol	maxPipeHandleIndex		3043015						
ANR	3043088	Symbol	FALSE		3043015						
ANR	3043089	Symbol	* ph		3043015						
ANR	3043090	Function	DaemonCore :: Create_Pipe	1727:0:49374:50105							
ANR	3043091	FunctionDef	"DaemonCore :: Create_Pipe (int * pipe_ends , bool can_register_read , bool can_register_write , bool nonblocking_read , bool nonblocking_write , unsigned int psize)"		3043090	0					
ANR	3043092	CompoundStatement		1733:0:49575:50105	3043090	0					
ANR	3043093	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Entering Create_Pipe()\\n"" )"	1734:1:49578:49626	3043090	0	True				
ANR	3043094	CallExpression	"dprintf ( D_DAEMONCORE , ""Entering Create_Pipe()\\n"" )"		3043090	0					
ANR	3043095	Callee	dprintf		3043090	0					
ANR	3043096	Identifier	dprintf		3043090	0					
ANR	3043097	ArgumentList	D_DAEMONCORE		3043090	1					
ANR	3043098	Argument	D_DAEMONCORE		3043090	0					
ANR	3043099	Identifier	D_DAEMONCORE		3043090	0					
ANR	3043100	Argument	"""Entering Create_Pipe()\\n"""		3043090	1					
ANR	3043101	PrimaryExpression	"""Entering Create_Pipe()\\n"""		3043090	0					
ANR	3043102	Statement	static	1736:1:49642:49647	3043090	1	True				
ANR	3043103	IdentifierDeclStatement	unsigned pipe_counter = 0 ;	1736:8:49649:49674	3043090	2	True				
ANR	3043104	IdentifierDecl	pipe_counter = 0		3043090	0					
ANR	3043105	IdentifierDeclType	unsigned		3043090	0					
ANR	3043106	Identifier	pipe_counter		3043090	1					
ANR	3043107	AssignmentExpression	pipe_counter = 0		3043090	2		=			
ANR	3043108	Identifier	pipe_counter		3043090	0					
ANR	3043109	PrimaryExpression	0		3043090	1					
ANR	3043110	IdentifierDeclStatement	MyString pipe_name ;	1737:1:49677:49695	3043090	3	True				
ANR	3043111	IdentifierDecl	pipe_name		3043090	0					
ANR	3043112	IdentifierDeclType	MyString		3043090	0					
ANR	3043113	Identifier	pipe_name		3043090	1					
ANR	3043114	ExpressionStatement	"pipe_name . sprintf ( ""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"" , GetCurrentProcessId ( ) , pipe_counter ++ )"	1738:1:49698:49788	3043090	4	True				
ANR	3043115	CallExpression	"pipe_name . sprintf ( ""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"" , GetCurrentProcessId ( ) , pipe_counter ++ )"		3043090	0					
ANR	3043116	Callee	pipe_name . sprintf		3043090	0					
ANR	3043117	MemberAccess	pipe_name . sprintf		3043090	0					
ANR	3043118	Identifier	pipe_name		3043090	0					
ANR	3043119	Identifier	sprintf		3043090	1					
ANR	3043120	ArgumentList	"""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"""		3043090	1					
ANR	3043121	Argument	"""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"""		3043090	0					
ANR	3043122	PrimaryExpression	"""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"""		3043090	0					
ANR	3043123	Argument	GetCurrentProcessId ( )		3043090	1					
ANR	3043124	CallExpression	GetCurrentProcessId ( )		3043090	0					
ANR	3043125	Callee	GetCurrentProcessId		3043090	0					
ANR	3043126	Identifier	GetCurrentProcessId		3043090	0					
ANR	3043127	ArgumentList			3043090	1					
ANR	3043128	Argument	pipe_counter ++		3043090	2					
ANR	3043129	PostIncDecOperationExpression	pipe_counter ++		3043090	0					
ANR	3043130	Identifier	pipe_counter		3043090	0					
ANR	3043131	IncDec	++		3043090	1					
ANR	3043132	ReturnStatement	"return Create_Named_Pipe ( pipe_ends , can_register_read , can_register_write , nonblocking_read , nonblocking_write , psize , pipe_name . Value ( ) ) ;"	1739:1:49791:49940	3043090	5	True				
ANR	3043133	CallExpression	"Create_Named_Pipe ( pipe_ends , can_register_read , can_register_write , nonblocking_read , nonblocking_write , psize , pipe_name . Value ( ) )"		3043090	0					
ANR	3043134	Callee	Create_Named_Pipe		3043090	0					
ANR	3043135	Identifier	Create_Named_Pipe		3043090	0					
ANR	3043136	ArgumentList	pipe_ends		3043090	1					
ANR	3043137	Argument	pipe_ends		3043090	0					
ANR	3043138	Identifier	pipe_ends		3043090	0					
ANR	3043139	Argument	can_register_read		3043090	1					
ANR	3043140	Identifier	can_register_read		3043090	0					
ANR	3043141	Argument	can_register_write		3043090	2					
ANR	3043142	Identifier	can_register_write		3043090	0					
ANR	3043143	Argument	nonblocking_read		3043090	3					
ANR	3043144	Identifier	nonblocking_read		3043090	0					
ANR	3043145	Argument	nonblocking_write		3043090	4					
ANR	3043146	Identifier	nonblocking_write		3043090	0					
ANR	3043147	Argument	psize		3043090	5					
ANR	3043148	Identifier	psize		3043090	0					
ANR	3043149	Argument	pipe_name . Value ( )		3043090	6					
ANR	3043150	CallExpression	pipe_name . Value ( )		3043090	0					
ANR	3043151	Callee	pipe_name . Value		3043090	0					
ANR	3043152	MemberAccess	pipe_name . Value		3043090	0					
ANR	3043153	Identifier	pipe_name		3043090	0					
ANR	3043154	Identifier	Value		3043090	1					
ANR	3043155	ArgumentList			3043090	1					
ANR	3043156	ReturnType	int		3043090	1					
ANR	3043157	Identifier	DaemonCore :: Create_Pipe		3043090	2					
ANR	3043158	ParameterList	"int * pipe_ends , bool can_register_read , bool can_register_write , bool nonblocking_read , bool nonblocking_write , unsigned int psize"		3043090	3					
ANR	3043159	Parameter	int * pipe_ends	1727:29:49403:49416	3043090	0	True				
ANR	3043160	ParameterType	int *		3043090	0					
ANR	3043161	Identifier	pipe_ends		3043090	1					
ANR	3043162	Parameter	bool can_register_read	1728:8:49427:49448	3043090	1	True				
ANR	3043163	ParameterType	bool		3043090	0					
ANR	3043164	Identifier	can_register_read		3043090	1					
ANR	3043165	Parameter	bool can_register_write	1729:8:49459:49481	3043090	2	True				
ANR	3043166	ParameterType	bool		3043090	0					
ANR	3043167	Identifier	can_register_write		3043090	1					
ANR	3043168	Parameter	bool nonblocking_read	1730:8:49492:49512	3043090	3	True				
ANR	3043169	ParameterType	bool		3043090	0					
ANR	3043170	Identifier	nonblocking_read		3043090	1					
ANR	3043171	Parameter	bool nonblocking_write	1731:8:49523:49544	3043090	4	True				
ANR	3043172	ParameterType	bool		3043090	0					
ANR	3043173	Identifier	nonblocking_write		3043090	1					
ANR	3043174	Parameter	unsigned int psize	1732:8:49555:49572	3043090	5	True				
ANR	3043175	ParameterType	unsigned int		3043090	0					
ANR	3043176	Identifier	psize		3043090	1					
ANR	3043177	CFGEntryNode	ENTRY		3043090		True				
ANR	3043178	CFGExitNode	EXIT		3043090		True				
ANR	3043179	Symbol	pipe_ends		3043090						
ANR	3043180	Symbol	psize		3043090						
ANR	3043181	Symbol	pipe_name		3043090						
ANR	3043182	Symbol	can_register_read		3043090						
ANR	3043183	Symbol	D_DAEMONCORE		3043090						
ANR	3043184	Symbol	pipe_name . Value		3043090						
ANR	3043185	Symbol	pipe_counter		3043090						
ANR	3043186	Symbol	Create_Named_Pipe		3043090						
ANR	3043187	Symbol	can_register_write		3043090						
ANR	3043188	Symbol	GetCurrentProcessId		3043090						
ANR	3043189	Symbol	nonblocking_read		3043090						
ANR	3043190	Symbol	nonblocking_write		3043090						
ANR	3043191	Function	DaemonCore :: Create_Named_Pipe	1758:0:50108:53792							
ANR	3043192	FunctionDef	"DaemonCore :: Create_Named_Pipe (int * pipe_ends , bool can_register_read , bool can_register_write , bool nonblocking_read , bool nonblocking_write , unsigned int psize , const char * pipe_name)"		3043191	0					
ANR	3043193	CompoundStatement		1765:0:50343:53792	3043191	0					
ANR	3043194	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Entering Create_Named_Pipe()\\n"" )"	1766:1:50346:50400	3043191	0	True				
ANR	3043195	CallExpression	"dprintf ( D_DAEMONCORE , ""Entering Create_Named_Pipe()\\n"" )"		3043191	0					
ANR	3043196	Callee	dprintf		3043191	0					
ANR	3043197	Identifier	dprintf		3043191	0					
ANR	3043198	ArgumentList	D_DAEMONCORE		3043191	1					
ANR	3043199	Argument	D_DAEMONCORE		3043191	0					
ANR	3043200	Identifier	D_DAEMONCORE		3043191	0					
ANR	3043201	Argument	"""Entering Create_Named_Pipe()\\n"""		3043191	1					
ANR	3043202	PrimaryExpression	"""Entering Create_Named_Pipe()\\n"""		3043191	0					
ANR	3043203	IdentifierDeclStatement	"PipeHandle read_handle , write_handle ;"	1768:1:50404:50440	3043191	1	True				
ANR	3043204	IdentifierDecl	read_handle		3043191	0					
ANR	3043205	IdentifierDeclType	PipeHandle		3043191	0					
ANR	3043206	Identifier	read_handle		3043191	1					
ANR	3043207	IdentifierDecl	write_handle		3043191	1					
ANR	3043208	IdentifierDeclType	PipeHandle		3043191	0					
ANR	3043209	Identifier	write_handle		3043191	1					
ANR	3043210	IdentifierDeclStatement	"DWORD overlapped_read_flag = 0 , overlapped_write_flag = 0 ;"	1771:1:50457:50514	3043191	2	True				
ANR	3043211	IdentifierDecl	overlapped_read_flag = 0		3043191	0					
ANR	3043212	IdentifierDeclType	DWORD		3043191	0					
ANR	3043213	Identifier	overlapped_read_flag		3043191	1					
ANR	3043214	AssignmentExpression	overlapped_read_flag = 0		3043191	2		=			
ANR	3043215	Identifier	overlapped_read_flag		3043191	0					
ANR	3043216	PrimaryExpression	0		3043191	1					
ANR	3043217	IdentifierDecl	overlapped_write_flag = 0		3043191	1					
ANR	3043218	IdentifierDeclType	DWORD		3043191	0					
ANR	3043219	Identifier	overlapped_write_flag		3043191	1					
ANR	3043220	AssignmentExpression	overlapped_write_flag = 0		3043191	2		=			
ANR	3043221	Identifier	overlapped_write_flag		3043191	0					
ANR	3043222	PrimaryExpression	0		3043191	1					
ANR	3043223	IfStatement	if ( can_register_read )		3043191	3					
ANR	3043224	Condition	can_register_read	1772:5:50521:50537	3043191	0	True				
ANR	3043225	Identifier	can_register_read		3043191	0					
ANR	3043226	CompoundStatement		8:24:196:196	3043191	1					
ANR	3043227	ExpressionStatement	overlapped_read_flag = FILE_FLAG_OVERLAPPED	1773:2:50544:50587	3043191	0	True				
ANR	3043228	AssignmentExpression	overlapped_read_flag = FILE_FLAG_OVERLAPPED		3043191	0		=			
ANR	3043229	Identifier	overlapped_read_flag		3043191	0					
ANR	3043230	Identifier	FILE_FLAG_OVERLAPPED		3043191	1					
ANR	3043231	IfStatement	if ( can_register_write || nonblocking_write )		3043191	4					
ANR	3043232	Condition	can_register_write || nonblocking_write	1775:5:50597:50635	3043191	0	True				
ANR	3043233	OrExpression	can_register_write || nonblocking_write		3043191	0		||			
ANR	3043234	Identifier	can_register_write		3043191	0					
ANR	3043235	Identifier	nonblocking_write		3043191	1					
ANR	3043236	CompoundStatement		11:46:294:294	3043191	1					
ANR	3043237	ExpressionStatement	overlapped_write_flag = FILE_FLAG_OVERLAPPED	1776:2:50642:50686	3043191	0	True				
ANR	3043238	AssignmentExpression	overlapped_write_flag = FILE_FLAG_OVERLAPPED		3043191	0		=			
ANR	3043239	Identifier	overlapped_write_flag		3043191	0					
ANR	3043240	Identifier	FILE_FLAG_OVERLAPPED		3043191	1					
ANR	3043241	IdentifierDeclStatement	"HANDLE w = CreateNamedPipe ( pipe_name , PIPE_ACCESS_OUTBOUND | overlapped_write_flag , 0 , PIPE_UNLIMITED_INSTANCES , psize , 0 , 0 , NULL ) ;"	1779:1:50693:51188	3043191	5	True				
ANR	3043242	IdentifierDecl	"w = CreateNamedPipe ( pipe_name , PIPE_ACCESS_OUTBOUND | overlapped_write_flag , 0 , PIPE_UNLIMITED_INSTANCES , psize , 0 , 0 , NULL )"		3043191	0					
ANR	3043243	IdentifierDeclType	HANDLE		3043191	0					
ANR	3043244	Identifier	w		3043191	1					
ANR	3043245	AssignmentExpression	"w = CreateNamedPipe ( pipe_name , PIPE_ACCESS_OUTBOUND | overlapped_write_flag , 0 , PIPE_UNLIMITED_INSTANCES , psize , 0 , 0 , NULL )"		3043191	2		=			
ANR	3043246	Identifier	w		3043191	0					
ANR	3043247	CallExpression	"CreateNamedPipe ( pipe_name , PIPE_ACCESS_OUTBOUND | overlapped_write_flag , 0 , PIPE_UNLIMITED_INSTANCES , psize , 0 , 0 , NULL )"		3043191	1					
ANR	3043248	Callee	CreateNamedPipe		3043191	0					
ANR	3043249	Identifier	CreateNamedPipe		3043191	0					
ANR	3043250	ArgumentList	pipe_name		3043191	1					
ANR	3043251	Argument	pipe_name		3043191	0					
ANR	3043252	Identifier	pipe_name		3043191	0					
ANR	3043253	Argument	PIPE_ACCESS_OUTBOUND | overlapped_write_flag		3043191	1					
ANR	3043254	InclusiveOrExpression	PIPE_ACCESS_OUTBOUND | overlapped_write_flag		3043191	0		|			
ANR	3043255	Identifier	PIPE_ACCESS_OUTBOUND		3043191	0					
ANR	3043256	Identifier	overlapped_write_flag		3043191	1					
ANR	3043257	Argument	0		3043191	2					
ANR	3043258	PrimaryExpression	0		3043191	0					
ANR	3043259	Argument	PIPE_UNLIMITED_INSTANCES		3043191	3					
ANR	3043260	Identifier	PIPE_UNLIMITED_INSTANCES		3043191	0					
ANR	3043261	Argument	psize		3043191	4					
ANR	3043262	Identifier	psize		3043191	0					
ANR	3043263	Argument	0		3043191	5					
ANR	3043264	PrimaryExpression	0		3043191	0					
ANR	3043265	Argument	0		3043191	6					
ANR	3043266	PrimaryExpression	0		3043191	0					
ANR	3043267	Argument	NULL		3043191	7					
ANR	3043268	Identifier	NULL		3043191	0					
ANR	3043269	IfStatement	if ( w == INVALID_HANDLE_VALUE )		3043191	6					
ANR	3043270	Condition	w == INVALID_HANDLE_VALUE	1789:5:51265:51289	3043191	0	True				
ANR	3043271	EqualityExpression	w == INVALID_HANDLE_VALUE		3043191	0		==			
ANR	3043272	Identifier	w		3043191	0					
ANR	3043273	Identifier	INVALID_HANDLE_VALUE		3043191	1					
ANR	3043274	CompoundStatement		25:32:948:948	3043191	1					
ANR	3043275	ExpressionStatement	"dprintf ( D_ALWAYS , ""CreateNamedPipe(%s) error: %d\\n"" , pipe_name , GetLastError ( ) )"	1790:2:51296:51379	3043191	0	True				
ANR	3043276	CallExpression	"dprintf ( D_ALWAYS , ""CreateNamedPipe(%s) error: %d\\n"" , pipe_name , GetLastError ( ) )"		3043191	0					
ANR	3043277	Callee	dprintf		3043191	0					
ANR	3043278	Identifier	dprintf		3043191	0					
ANR	3043279	ArgumentList	D_ALWAYS		3043191	1					
ANR	3043280	Argument	D_ALWAYS		3043191	0					
ANR	3043281	Identifier	D_ALWAYS		3043191	0					
ANR	3043282	Argument	"""CreateNamedPipe(%s) error: %d\\n"""		3043191	1					
ANR	3043283	PrimaryExpression	"""CreateNamedPipe(%s) error: %d\\n"""		3043191	0					
ANR	3043284	Argument	pipe_name		3043191	2					
ANR	3043285	Identifier	pipe_name		3043191	0					
ANR	3043286	Argument	GetLastError ( )		3043191	3					
ANR	3043287	CallExpression	GetLastError ( )		3043191	0					
ANR	3043288	Callee	GetLastError		3043191	0					
ANR	3043289	Identifier	GetLastError		3043191	0					
ANR	3043290	ArgumentList			3043191	1					
ANR	3043291	ReturnStatement	return FALSE ;	1792:2:51383:51395	3043191	1	True				
ANR	3043292	Identifier	FALSE		3043191	0					
ANR	3043293	IdentifierDeclStatement	"HANDLE r = CreateFile ( pipe_name , GENERIC_READ , 0 , NULL , OPEN_EXISTING , overlapped_read_flag , NULL ) ;"	1794:1:51401:51764	3043191	7	True				
ANR	3043294	IdentifierDecl	"r = CreateFile ( pipe_name , GENERIC_READ , 0 , NULL , OPEN_EXISTING , overlapped_read_flag , NULL )"		3043191	0					
ANR	3043295	IdentifierDeclType	HANDLE		3043191	0					
ANR	3043296	Identifier	r		3043191	1					
ANR	3043297	AssignmentExpression	"r = CreateFile ( pipe_name , GENERIC_READ , 0 , NULL , OPEN_EXISTING , overlapped_read_flag , NULL )"		3043191	2		=			
ANR	3043298	Identifier	r		3043191	0					
ANR	3043299	CallExpression	"CreateFile ( pipe_name , GENERIC_READ , 0 , NULL , OPEN_EXISTING , overlapped_read_flag , NULL )"		3043191	1					
ANR	3043300	Callee	CreateFile		3043191	0					
ANR	3043301	Identifier	CreateFile		3043191	0					
ANR	3043302	ArgumentList	pipe_name		3043191	1					
ANR	3043303	Argument	pipe_name		3043191	0					
ANR	3043304	Identifier	pipe_name		3043191	0					
ANR	3043305	Argument	GENERIC_READ		3043191	1					
ANR	3043306	Identifier	GENERIC_READ		3043191	0					
ANR	3043307	Argument	0		3043191	2					
ANR	3043308	PrimaryExpression	0		3043191	0					
ANR	3043309	Argument	NULL		3043191	3					
ANR	3043310	Identifier	NULL		3043191	0					
ANR	3043311	Argument	OPEN_EXISTING		3043191	4					
ANR	3043312	Identifier	OPEN_EXISTING		3043191	0					
ANR	3043313	Argument	overlapped_read_flag		3043191	5					
ANR	3043314	Identifier	overlapped_read_flag		3043191	0					
ANR	3043315	Argument	NULL		3043191	6					
ANR	3043316	Identifier	NULL		3043191	0					
ANR	3043317	IfStatement	if ( r == INVALID_HANDLE_VALUE )		3043191	8					
ANR	3043318	Condition	r == INVALID_HANDLE_VALUE	1802:5:51809:51833	3043191	0	True				
ANR	3043319	EqualityExpression	r == INVALID_HANDLE_VALUE		3043191	0		==			
ANR	3043320	Identifier	r		3043191	0					
ANR	3043321	Identifier	INVALID_HANDLE_VALUE		3043191	1					
ANR	3043322	CompoundStatement		38:32:1492:1492	3043191	1					
ANR	3043323	ExpressionStatement	CloseHandle ( w )	1803:2:51840:51854	3043191	0	True				
ANR	3043324	CallExpression	CloseHandle ( w )		3043191	0					
ANR	3043325	Callee	CloseHandle		3043191	0					
ANR	3043326	Identifier	CloseHandle		3043191	0					
ANR	3043327	ArgumentList	w		3043191	1					
ANR	3043328	Argument	w		3043191	0					
ANR	3043329	Identifier	w		3043191	0					
ANR	3043330	ExpressionStatement	"dprintf ( D_ALWAYS , ""CreateFile(%s) error on named pipe: %d\\n"" , pipe_name , GetLastError ( ) )"	1804:2:51858:51950	3043191	1	True				
ANR	3043331	CallExpression	"dprintf ( D_ALWAYS , ""CreateFile(%s) error on named pipe: %d\\n"" , pipe_name , GetLastError ( ) )"		3043191	0					
ANR	3043332	Callee	dprintf		3043191	0					
ANR	3043333	Identifier	dprintf		3043191	0					
ANR	3043334	ArgumentList	D_ALWAYS		3043191	1					
ANR	3043335	Argument	D_ALWAYS		3043191	0					
ANR	3043336	Identifier	D_ALWAYS		3043191	0					
ANR	3043337	Argument	"""CreateFile(%s) error on named pipe: %d\\n"""		3043191	1					
ANR	3043338	PrimaryExpression	"""CreateFile(%s) error on named pipe: %d\\n"""		3043191	0					
ANR	3043339	Argument	pipe_name		3043191	2					
ANR	3043340	Identifier	pipe_name		3043191	0					
ANR	3043341	Argument	GetLastError ( )		3043191	3					
ANR	3043342	CallExpression	GetLastError ( )		3043191	0					
ANR	3043343	Callee	GetLastError		3043191	0					
ANR	3043344	Identifier	GetLastError		3043191	0					
ANR	3043345	ArgumentList			3043191	1					
ANR	3043346	ReturnStatement	return FALSE ;	1806:2:51954:51966	3043191	2	True				
ANR	3043347	Identifier	FALSE		3043191	0					
ANR	3043348	ExpressionStatement	"read_handle = new ReadPipeEnd ( r , overlapped_read_flag , nonblocking_read , psize )"	1808:1:51972:52051	3043191	9	True				
ANR	3043349	AssignmentExpression	"read_handle = new ReadPipeEnd ( r , overlapped_read_flag , nonblocking_read , psize )"		3043191	0		=			
ANR	3043350	Identifier	read_handle		3043191	0					
ANR	3043351	Expression	"r , overlapped_read_flag , nonblocking_read , psize"		3043191	1					
ANR	3043352	Identifier	r		3043191	0					
ANR	3043353	Expression	"overlapped_read_flag , nonblocking_read , psize"		3043191	1					
ANR	3043354	Identifier	overlapped_read_flag		3043191	0					
ANR	3043355	Expression	"nonblocking_read , psize"		3043191	1					
ANR	3043356	Identifier	nonblocking_read		3043191	0					
ANR	3043357	Identifier	psize		3043191	1					
ANR	3043358	ExpressionStatement	"write_handle = new WritePipeEnd ( w , overlapped_write_flag , nonblocking_write , psize )"	1809:1:52054:52137	3043191	10	True				
ANR	3043359	AssignmentExpression	"write_handle = new WritePipeEnd ( w , overlapped_write_flag , nonblocking_write , psize )"		3043191	0		=			
ANR	3043360	Identifier	write_handle		3043191	0					
ANR	3043361	Expression	"w , overlapped_write_flag , nonblocking_write , psize"		3043191	1					
ANR	3043362	Identifier	w		3043191	0					
ANR	3043363	Expression	"overlapped_write_flag , nonblocking_write , psize"		3043191	1					
ANR	3043364	Identifier	overlapped_write_flag		3043191	0					
ANR	3043365	Expression	"nonblocking_write , psize"		3043191	1					
ANR	3043366	Identifier	nonblocking_write		3043191	0					
ANR	3043367	Identifier	psize		3043191	1					
ANR	3043368	ExpressionStatement	pipe_ends [ 0 ] = pipeHandleTableInsert ( read_handle ) + PIPE_INDEX_OFFSET	1867:1:53516:53585	3043191	11	True				
ANR	3043369	AssignmentExpression	pipe_ends [ 0 ] = pipeHandleTableInsert ( read_handle ) + PIPE_INDEX_OFFSET		3043191	0		=			
ANR	3043370	ArrayIndexing	pipe_ends [ 0 ]		3043191	0					
ANR	3043371	Identifier	pipe_ends		3043191	0					
ANR	3043372	PrimaryExpression	0		3043191	1					
ANR	3043373	AdditiveExpression	pipeHandleTableInsert ( read_handle ) + PIPE_INDEX_OFFSET		3043191	1		+			
ANR	3043374	CallExpression	pipeHandleTableInsert ( read_handle )		3043191	0					
ANR	3043375	Callee	pipeHandleTableInsert		3043191	0					
ANR	3043376	Identifier	pipeHandleTableInsert		3043191	0					
ANR	3043377	ArgumentList	read_handle		3043191	1					
ANR	3043378	Argument	read_handle		3043191	0					
ANR	3043379	Identifier	read_handle		3043191	0					
ANR	3043380	Identifier	PIPE_INDEX_OFFSET		3043191	1					
ANR	3043381	ExpressionStatement	pipe_ends [ 1 ] = pipeHandleTableInsert ( write_handle ) + PIPE_INDEX_OFFSET	1868:1:53588:53658	3043191	12	True				
ANR	3043382	AssignmentExpression	pipe_ends [ 1 ] = pipeHandleTableInsert ( write_handle ) + PIPE_INDEX_OFFSET		3043191	0		=			
ANR	3043383	ArrayIndexing	pipe_ends [ 1 ]		3043191	0					
ANR	3043384	Identifier	pipe_ends		3043191	0					
ANR	3043385	PrimaryExpression	1		3043191	1					
ANR	3043386	AdditiveExpression	pipeHandleTableInsert ( write_handle ) + PIPE_INDEX_OFFSET		3043191	1		+			
ANR	3043387	CallExpression	pipeHandleTableInsert ( write_handle )		3043191	0					
ANR	3043388	Callee	pipeHandleTableInsert		3043191	0					
ANR	3043389	Identifier	pipeHandleTableInsert		3043191	0					
ANR	3043390	ArgumentList	write_handle		3043191	1					
ANR	3043391	Argument	write_handle		3043191	0					
ANR	3043392	Identifier	write_handle		3043191	0					
ANR	3043393	Identifier	PIPE_INDEX_OFFSET		3043191	1					
ANR	3043394	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Create_Pipe() success read_handle=%d write_handle=%d\\n"" , pipe_ends [ 0 ] , pipe_ends [ 1 ] )"	1870:1:53662:53776	3043191	13	True				
ANR	3043395	CallExpression	"dprintf ( D_DAEMONCORE , ""Create_Pipe() success read_handle=%d write_handle=%d\\n"" , pipe_ends [ 0 ] , pipe_ends [ 1 ] )"		3043191	0					
ANR	3043396	Callee	dprintf		3043191	0					
ANR	3043397	Identifier	dprintf		3043191	0					
ANR	3043398	ArgumentList	D_DAEMONCORE		3043191	1					
ANR	3043399	Argument	D_DAEMONCORE		3043191	0					
ANR	3043400	Identifier	D_DAEMONCORE		3043191	0					
ANR	3043401	Argument	"""Create_Pipe() success read_handle=%d write_handle=%d\\n"""		3043191	1					
ANR	3043402	PrimaryExpression	"""Create_Pipe() success read_handle=%d write_handle=%d\\n"""		3043191	0					
ANR	3043403	Argument	pipe_ends [ 0 ]		3043191	2					
ANR	3043404	ArrayIndexing	pipe_ends [ 0 ]		3043191	0					
ANR	3043405	Identifier	pipe_ends		3043191	0					
ANR	3043406	PrimaryExpression	0		3043191	1					
ANR	3043407	Argument	pipe_ends [ 1 ]		3043191	3					
ANR	3043408	ArrayIndexing	pipe_ends [ 1 ]		3043191	0					
ANR	3043409	Identifier	pipe_ends		3043191	0					
ANR	3043410	PrimaryExpression	1		3043191	1					
ANR	3043411	ReturnStatement	return TRUE ;	1872:1:53779:53790	3043191	14	True				
ANR	3043412	Identifier	TRUE		3043191	0					
ANR	3043413	ReturnType	int		3043191	1					
ANR	3043414	Identifier	DaemonCore :: Create_Named_Pipe		3043191	2					
ANR	3043415	ParameterList	"int * pipe_ends , bool can_register_read , bool can_register_write , bool nonblocking_read , bool nonblocking_write , unsigned int psize , const char * pipe_name"		3043191	3					
ANR	3043416	Parameter	int * pipe_ends	1758:35:50143:50156	3043191	0	True				
ANR	3043417	ParameterType	int *		3043191	0					
ANR	3043418	Identifier	pipe_ends		3043191	1					
ANR	3043419	Parameter	bool can_register_read	1759:8:50167:50188	3043191	1	True				
ANR	3043420	ParameterType	bool		3043191	0					
ANR	3043421	Identifier	can_register_read		3043191	1					
ANR	3043422	Parameter	bool can_register_write	1760:8:50199:50221	3043191	2	True				
ANR	3043423	ParameterType	bool		3043191	0					
ANR	3043424	Identifier	can_register_write		3043191	1					
ANR	3043425	Parameter	bool nonblocking_read	1761:8:50232:50252	3043191	3	True				
ANR	3043426	ParameterType	bool		3043191	0					
ANR	3043427	Identifier	nonblocking_read		3043191	1					
ANR	3043428	Parameter	bool nonblocking_write	1762:8:50263:50284	3043191	4	True				
ANR	3043429	ParameterType	bool		3043191	0					
ANR	3043430	Identifier	nonblocking_write		3043191	1					
ANR	3043431	Parameter	unsigned int psize	1763:8:50295:50312	3043191	5	True				
ANR	3043432	ParameterType	unsigned int		3043191	0					
ANR	3043433	Identifier	psize		3043191	1					
ANR	3043434	Parameter	const char * pipe_name	1764:5:50320:50340	3043191	6	True				
ANR	3043435	ParameterType	const char *		3043191	0					
ANR	3043436	Identifier	pipe_name		3043191	1					
ANR	3043437	CFGEntryNode	ENTRY		3043191		True				
ANR	3043438	CFGExitNode	EXIT		3043191		True				
ANR	3043439	Symbol	can_register_write		3043191						
ANR	3043440	Symbol	CreateNamedPipe		3043191						
ANR	3043441	Symbol	nonblocking_write		3043191						
ANR	3043442	Symbol	* pipe_ends		3043191						
ANR	3043443	Symbol	overlapped_write_flag		3043191						
ANR	3043444	Symbol	CreateFile		3043191						
ANR	3043445	Symbol	psize		3043191						
ANR	3043446	Symbol	read_handle		3043191						
ANR	3043447	Symbol	FILE_FLAG_OVERLAPPED		3043191						
ANR	3043448	Symbol	OPEN_EXISTING		3043191						
ANR	3043449	Symbol	write_handle		3043191						
ANR	3043450	Symbol	pipe_ends		3043191						
ANR	3043451	Symbol	PIPE_INDEX_OFFSET		3043191						
ANR	3043452	Symbol	pipeHandleTableInsert		3043191						
ANR	3043453	Symbol	NULL		3043191						
ANR	3043454	Symbol	D_DAEMONCORE		3043191						
ANR	3043455	Symbol	PIPE_ACCESS_OUTBOUND		3043191						
ANR	3043456	Symbol	overlapped_read_flag		3043191						
ANR	3043457	Symbol	GENERIC_READ		3043191						
ANR	3043458	Symbol	D_ALWAYS		3043191						
ANR	3043459	Symbol	TRUE		3043191						
ANR	3043460	Symbol	nonblocking_read		3043191						
ANR	3043461	Symbol	INVALID_HANDLE_VALUE		3043191						
ANR	3043462	Symbol	pipe_name		3043191						
ANR	3043463	Symbol	can_register_read		3043191						
ANR	3043464	Symbol	r		3043191						
ANR	3043465	Symbol	GetLastError		3043191						
ANR	3043466	Symbol	w		3043191						
ANR	3043467	Symbol	FALSE		3043191						
ANR	3043468	Symbol	PIPE_UNLIMITED_INSTANCES		3043191						
ANR	3043469	Function	DaemonCore :: Inherit_Pipe	1875:0:53795:54418							
ANR	3043470	FunctionDef	"DaemonCore :: Inherit_Pipe (int fd , bool is_write , bool can_register , bool nonblocking , int psize)"		3043469	0					
ANR	3043471	CompoundStatement		1876:0:53895:54418	3043469	0					
ANR	3043472	IdentifierDeclStatement	PipeHandle pipe_handle ;	1877:1:53898:53920	3043469	0	True				
ANR	3043473	IdentifierDecl	pipe_handle		3043469	0					
ANR	3043474	IdentifierDeclType	PipeHandle		3043469	0					
ANR	3043475	Identifier	pipe_handle		3043469	1					
ANR	3043476	IdentifierDeclStatement	HANDLE h = ( HANDLE ) _get_osfhandle ( fd ) ;	1880:1:53943:53980	3043469	1	True				
ANR	3043477	IdentifierDecl	h = ( HANDLE ) _get_osfhandle ( fd )		3043469	0					
ANR	3043478	IdentifierDeclType	HANDLE		3043469	0					
ANR	3043479	Identifier	h		3043469	1					
ANR	3043480	AssignmentExpression	h = ( HANDLE ) _get_osfhandle ( fd )		3043469	2		=			
ANR	3043481	Identifier	h		3043469	0					
ANR	3043482	CastExpression	( HANDLE ) _get_osfhandle ( fd )		3043469	1					
ANR	3043483	CastTarget	HANDLE		3043469	0					
ANR	3043484	CallExpression	_get_osfhandle ( fd )		3043469	1					
ANR	3043485	Callee	_get_osfhandle		3043469	0					
ANR	3043486	Identifier	_get_osfhandle		3043469	0					
ANR	3043487	ArgumentList	fd		3043469	1					
ANR	3043488	Argument	fd		3043469	0					
ANR	3043489	Identifier	fd		3043469	0					
ANR	3043490	IfStatement	if ( is_write )		3043469	2					
ANR	3043491	Condition	is_write	1881:5:53987:53994	3043469	0	True				
ANR	3043492	Identifier	is_write		3043469	0					
ANR	3043493	CompoundStatement		6:15:101:101	3043469	1					
ANR	3043494	ExpressionStatement	"pipe_handle = new WritePipeEnd ( h , can_register , nonblocking , psize )"	1882:2:54001:54068	3043469	0	True				
ANR	3043495	AssignmentExpression	"pipe_handle = new WritePipeEnd ( h , can_register , nonblocking , psize )"		3043469	0		=			
ANR	3043496	Identifier	pipe_handle		3043469	0					
ANR	3043497	Expression	"h , can_register , nonblocking , psize"		3043469	1					
ANR	3043498	Identifier	h		3043469	0					
ANR	3043499	Expression	"can_register , nonblocking , psize"		3043469	1					
ANR	3043500	Identifier	can_register		3043469	0					
ANR	3043501	Expression	"nonblocking , psize"		3043469	1					
ANR	3043502	Identifier	nonblocking		3043469	0					
ANR	3043503	Identifier	psize		3043469	1					
ANR	3043504	ElseStatement	else		3043469	0					
ANR	3043505	CompoundStatement		9:6:183:183	3043469	0					
ANR	3043506	ExpressionStatement	"pipe_handle = new ReadPipeEnd ( h , can_register , nonblocking , psize )"	1885:2:54083:54149	3043469	0	True				
ANR	3043507	AssignmentExpression	"pipe_handle = new ReadPipeEnd ( h , can_register , nonblocking , psize )"		3043469	0		=			
ANR	3043508	Identifier	pipe_handle		3043469	0					
ANR	3043509	Expression	"h , can_register , nonblocking , psize"		3043469	1					
ANR	3043510	Identifier	h		3043469	0					
ANR	3043511	Expression	"can_register , nonblocking , psize"		3043469	1					
ANR	3043512	Identifier	can_register		3043469	0					
ANR	3043513	Expression	"nonblocking , psize"		3043469	1					
ANR	3043514	Identifier	nonblocking		3043469	0					
ANR	3043515	Identifier	psize		3043469	1					
ANR	3043516	ReturnStatement	return pipeHandleTableInsert ( pipe_handle ) + PIPE_INDEX_OFFSET ;	1898:1:54355:54416	3043469	3	True				
ANR	3043517	AdditiveExpression	pipeHandleTableInsert ( pipe_handle ) + PIPE_INDEX_OFFSET		3043469	0		+			
ANR	3043518	CallExpression	pipeHandleTableInsert ( pipe_handle )		3043469	0					
ANR	3043519	Callee	pipeHandleTableInsert		3043469	0					
ANR	3043520	Identifier	pipeHandleTableInsert		3043469	0					
ANR	3043521	ArgumentList	pipe_handle		3043469	1					
ANR	3043522	Argument	pipe_handle		3043469	0					
ANR	3043523	Identifier	pipe_handle		3043469	0					
ANR	3043524	Identifier	PIPE_INDEX_OFFSET		3043469	1					
ANR	3043525	ReturnType	int		3043469	1					
ANR	3043526	Identifier	DaemonCore :: Inherit_Pipe		3043469	2					
ANR	3043527	ParameterList	"int fd , bool is_write , bool can_register , bool nonblocking , int psize"		3043469	3					
ANR	3043528	Parameter	int fd	1875:29:53824:53829	3043469	0	True				
ANR	3043529	ParameterType	int		3043469	0					
ANR	3043530	Identifier	fd		3043469	1					
ANR	3043531	Parameter	bool is_write	1875:37:53832:53844	3043469	1	True				
ANR	3043532	ParameterType	bool		3043469	0					
ANR	3043533	Identifier	is_write		3043469	1					
ANR	3043534	Parameter	bool can_register	1875:52:53847:53863	3043469	2	True				
ANR	3043535	ParameterType	bool		3043469	0					
ANR	3043536	Identifier	can_register		3043469	1					
ANR	3043537	Parameter	bool nonblocking	1875:71:53866:53881	3043469	3	True				
ANR	3043538	ParameterType	bool		3043469	0					
ANR	3043539	Identifier	nonblocking		3043469	1					
ANR	3043540	Parameter	int psize	1875:89:53884:53892	3043469	4	True				
ANR	3043541	ParameterType	int		3043469	0					
ANR	3043542	Identifier	psize		3043469	1					
ANR	3043543	CFGEntryNode	ENTRY		3043469		True				
ANR	3043544	CFGExitNode	EXIT		3043469		True				
ANR	3043545	Symbol	PIPE_INDEX_OFFSET		3043469						
ANR	3043546	Symbol	psize		3043469						
ANR	3043547	Symbol	pipeHandleTableInsert		3043469						
ANR	3043548	Symbol	nonblocking		3043469						
ANR	3043549	Symbol	can_register		3043469						
ANR	3043550	Symbol	h		3043469						
ANR	3043551	Symbol	is_write		3043469						
ANR	3043552	Symbol	_get_osfhandle		3043469						
ANR	3043553	Symbol	fd		3043469						
ANR	3043554	Symbol	pipe_handle		3043469						
ANR	3043555	Function	DaemonCore :: Register_Pipe	1901:0:54421:57152							
ANR	3043556	FunctionDef	"DaemonCore :: Register_Pipe (int pipe_end , const char * pipe_descrip , PipeHandler handler , PipeHandlercpp handlercpp , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm , int is_cpp)"		3043555	0					
ANR	3043557	CompoundStatement		1906:0:54653:57152	3043555	0					
ANR	3043558	IdentifierDeclStatement	int i ;	1907:4:54659:54668	3043555	0	True				
ANR	3043559	IdentifierDecl	i		3043555	0					
ANR	3043560	IdentifierDeclType	int		3043555	0					
ANR	3043561	Identifier	i		3043555	1					
ANR	3043562	IdentifierDeclStatement	int j ;	1908:4:54674:54683	3043555	1	True				
ANR	3043563	IdentifierDecl	j		3043555	0					
ANR	3043564	IdentifierDeclType	int		3043555	0					
ANR	3043565	Identifier	j		3043555	1					
ANR	3043566	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	1910:1:54687:54727	3043555	2	True				
ANR	3043567	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		3043555	0					
ANR	3043568	IdentifierDeclType	int		3043555	0					
ANR	3043569	Identifier	index		3043555	1					
ANR	3043570	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		3043555	2		=			
ANR	3043571	Identifier	index		3043555	0					
ANR	3043572	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		3043555	1		-			
ANR	3043573	Identifier	pipe_end		3043555	0					
ANR	3043574	Identifier	PIPE_INDEX_OFFSET		3043555	1					
ANR	3043575	IfStatement	if ( pipeHandleTableLookup ( index ) == FALSE )		3043555	3					
ANR	3043576	Condition	pipeHandleTableLookup ( index ) == FALSE	1911:5:54734:54770	3043555	0	True				
ANR	3043577	EqualityExpression	pipeHandleTableLookup ( index ) == FALSE		3043555	0		==			
ANR	3043578	CallExpression	pipeHandleTableLookup ( index )		3043555	0					
ANR	3043579	Callee	pipeHandleTableLookup		3043555	0					
ANR	3043580	Identifier	pipeHandleTableLookup		3043555	0					
ANR	3043581	ArgumentList	index		3043555	1					
ANR	3043582	Argument	index		3043555	0					
ANR	3043583	Identifier	index		3043555	0					
ANR	3043584	Identifier	FALSE		3043555	1					
ANR	3043585	CompoundStatement		6:44:119:119	3043555	1					
ANR	3043586	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Register_Pipe: invalid index\\n"" )"	1912:2:54777:54832	3043555	0	True				
ANR	3043587	CallExpression	"dprintf ( D_DAEMONCORE , ""Register_Pipe: invalid index\\n"" )"		3043555	0					
ANR	3043588	Callee	dprintf		3043555	0					
ANR	3043589	Identifier	dprintf		3043555	0					
ANR	3043590	ArgumentList	D_DAEMONCORE		3043555	1					
ANR	3043591	Argument	D_DAEMONCORE		3043555	0					
ANR	3043592	Identifier	D_DAEMONCORE		3043555	0					
ANR	3043593	Argument	"""Register_Pipe: invalid index\\n"""		3043555	1					
ANR	3043594	PrimaryExpression	"""Register_Pipe: invalid index\\n"""		3043555	0					
ANR	3043595	ReturnStatement	return - 1 ;	1913:2:54836:54845	3043555	1	True				
ANR	3043596	UnaryOperationExpression	- 1		3043555	0					
ANR	3043597	UnaryOperator	-		3043555	0					
ANR	3043598	PrimaryExpression	1		3043555	1					
ANR	3043599	ExpressionStatement	i = nPipe	1916:1:54852:54861	3043555	4	True				
ANR	3043600	AssignmentExpression	i = nPipe		3043555	0		=			
ANR	3043601	Identifier	i		3043555	0					
ANR	3043602	Identifier	nPipe		3043555	1					
ANR	3043603	IfStatement	if ( ( * pipeTable ) [ i ] . index != - 1 )		3043555	5					
ANR	3043604	Condition	( * pipeTable ) [ i ] . index != - 1	1919:6:54910:54936	3043555	0	True				
ANR	3043605	EqualityExpression	( * pipeTable ) [ i ] . index != - 1		3043555	0		!=			
ANR	3043606	MemberAccess	( * pipeTable ) [ i ] . index		3043555	0					
ANR	3043607	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043608	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043609	UnaryOperator	*		3043555	0					
ANR	3043610	Identifier	pipeTable		3043555	1					
ANR	3043611	Identifier	i		3043555	1					
ANR	3043612	Identifier	index		3043555	1					
ANR	3043613	UnaryOperationExpression	- 1		3043555	1					
ANR	3043614	UnaryOperator	-		3043555	0					
ANR	3043615	PrimaryExpression	1		3043555	1					
ANR	3043616	CompoundStatement		14:36:286:286	3043555	1					
ANR	3043617	ExpressionStatement	"EXCEPT ( ""Pipe table fubar!  nPipe = %d"" , nPipe )"	1920:8:54950:54997	3043555	0	True				
ANR	3043618	CallExpression	"EXCEPT ( ""Pipe table fubar!  nPipe = %d"" , nPipe )"		3043555	0					
ANR	3043619	Callee	EXCEPT		3043555	0					
ANR	3043620	Identifier	EXCEPT		3043555	0					
ANR	3043621	ArgumentList	"""Pipe table fubar!  nPipe = %d"""		3043555	1					
ANR	3043622	Argument	"""Pipe table fubar!  nPipe = %d"""		3043555	0					
ANR	3043623	PrimaryExpression	"""Pipe table fubar!  nPipe = %d"""		3043555	0					
ANR	3043624	Argument	nPipe		3043555	1					
ANR	3043625	Identifier	nPipe		3043555	0					
ANR	3043626	ForStatement	for ( j = 0 ; j < nPipe ; j ++ )		3043555	6					
ANR	3043627	ForInit	j = 0 ;	1924:7:55070:55073	3043555	0	True				
ANR	3043628	AssignmentExpression	j = 0		3043555	0		=			
ANR	3043629	Identifier	j		3043555	0					
ANR	3043630	PrimaryExpression	0		3043555	1					
ANR	3043631	Condition	j < nPipe	1924:12:55075:55083	3043555	1	True				
ANR	3043632	RelationalExpression	j < nPipe		3043555	0		<			
ANR	3043633	Identifier	j		3043555	0					
ANR	3043634	Identifier	nPipe		3043555	1					
ANR	3043635	PostIncDecOperationExpression	j ++	1924:23:55086:55088	3043555	2	True				
ANR	3043636	Identifier	j		3043555	0					
ANR	3043637	IncDec	++		3043555	1					
ANR	3043638	CompoundStatement		20:1:439:439	3043555	3					
ANR	3043639	IfStatement	if ( ( * pipeTable ) [ j ] . index == index )		3043555	0					
ANR	3043640	Condition	( * pipeTable ) [ j ] . index == index	1926:7:55102:55131	3043555	0	True				
ANR	3043641	EqualityExpression	( * pipeTable ) [ j ] . index == index		3043555	0		==			
ANR	3043642	MemberAccess	( * pipeTable ) [ j ] . index		3043555	0					
ANR	3043643	ArrayIndexing	( * pipeTable ) [ j ]		3043555	0					
ANR	3043644	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043645	UnaryOperator	*		3043555	0					
ANR	3043646	Identifier	pipeTable		3043555	1					
ANR	3043647	Identifier	j		3043555	1					
ANR	3043648	Identifier	index		3043555	1					
ANR	3043649	Identifier	index		3043555	1					
ANR	3043650	CompoundStatement		21:40:481:481	3043555	1					
ANR	3043651	ExpressionStatement	"EXCEPT ( ""DaemonCore: Same pipe registered twice"" )"	1927:3:55140:55188	3043555	0	True				
ANR	3043652	CallExpression	"EXCEPT ( ""DaemonCore: Same pipe registered twice"" )"		3043555	0					
ANR	3043653	Callee	EXCEPT		3043555	0					
ANR	3043654	Identifier	EXCEPT		3043555	0					
ANR	3043655	ArgumentList	"""DaemonCore: Same pipe registered twice"""		3043555	1					
ANR	3043656	Argument	"""DaemonCore: Same pipe registered twice"""		3043555	0					
ANR	3043657	PrimaryExpression	"""DaemonCore: Same pipe registered twice"""		3043555	0					
ANR	3043658	ExpressionStatement	"dc_stats . New ( ""Pipe"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"	1931:4:55208:55293	3043555	7	True				
ANR	3043659	CallExpression	"dc_stats . New ( ""Pipe"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"		3043555	0					
ANR	3043660	Callee	dc_stats . New		3043555	0					
ANR	3043661	MemberAccess	dc_stats . New		3043555	0					
ANR	3043662	Identifier	dc_stats		3043555	0					
ANR	3043663	Identifier	New		3043555	1					
ANR	3043664	ArgumentList	"""Pipe"""		3043555	1					
ANR	3043665	Argument	"""Pipe"""		3043555	0					
ANR	3043666	PrimaryExpression	"""Pipe"""		3043555	0					
ANR	3043667	Argument	handler_descrip		3043555	1					
ANR	3043668	Identifier	handler_descrip		3043555	0					
ANR	3043669	Argument	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		3043555	2					
ANR	3043670	InclusiveOrExpression	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		3043555	0		|			
ANR	3043671	Identifier	AS_COUNT		3043555	0					
ANR	3043672	InclusiveOrExpression	IS_RCT | IF_NONZERO | IF_VERBOSEPUB		3043555	1		|			
ANR	3043673	Identifier	IS_RCT		3043555	0					
ANR	3043674	InclusiveOrExpression	IF_NONZERO | IF_VERBOSEPUB		3043555	1		|			
ANR	3043675	Identifier	IF_NONZERO		3043555	0					
ANR	3043676	Identifier	IF_VERBOSEPUB		3043555	1					
ANR	3043677	ExpressionStatement	( * pipeTable ) [ i ] . pentry = NULL	1934:1:55358:55387	3043555	8	True				
ANR	3043678	AssignmentExpression	( * pipeTable ) [ i ] . pentry = NULL		3043555	0		=			
ANR	3043679	MemberAccess	( * pipeTable ) [ i ] . pentry		3043555	0					
ANR	3043680	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043681	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043682	UnaryOperator	*		3043555	0					
ANR	3043683	Identifier	pipeTable		3043555	1					
ANR	3043684	Identifier	i		3043555	1					
ANR	3043685	Identifier	pentry		3043555	1					
ANR	3043686	Identifier	NULL		3043555	1					
ANR	3043687	ExpressionStatement	( * pipeTable ) [ i ] . call_handler = false	1935:1:55390:55426	3043555	9	True				
ANR	3043688	AssignmentExpression	( * pipeTable ) [ i ] . call_handler = false		3043555	0		=			
ANR	3043689	MemberAccess	( * pipeTable ) [ i ] . call_handler		3043555	0					
ANR	3043690	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043691	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043692	UnaryOperator	*		3043555	0					
ANR	3043693	Identifier	pipeTable		3043555	1					
ANR	3043694	Identifier	i		3043555	1					
ANR	3043695	Identifier	call_handler		3043555	1					
ANR	3043696	Identifier	false		3043555	1					
ANR	3043697	ExpressionStatement	( * pipeTable ) [ i ] . in_handler = false	1936:1:55429:55463	3043555	10	True				
ANR	3043698	AssignmentExpression	( * pipeTable ) [ i ] . in_handler = false		3043555	0		=			
ANR	3043699	MemberAccess	( * pipeTable ) [ i ] . in_handler		3043555	0					
ANR	3043700	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043701	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043702	UnaryOperator	*		3043555	0					
ANR	3043703	Identifier	pipeTable		3043555	1					
ANR	3043704	Identifier	i		3043555	1					
ANR	3043705	Identifier	in_handler		3043555	1					
ANR	3043706	Identifier	false		3043555	1					
ANR	3043707	ExpressionStatement	( * pipeTable ) [ i ] . index = index	1937:1:55466:55495	3043555	11	True				
ANR	3043708	AssignmentExpression	( * pipeTable ) [ i ] . index = index		3043555	0		=			
ANR	3043709	MemberAccess	( * pipeTable ) [ i ] . index		3043555	0					
ANR	3043710	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043711	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043712	UnaryOperator	*		3043555	0					
ANR	3043713	Identifier	pipeTable		3043555	1					
ANR	3043714	Identifier	i		3043555	1					
ANR	3043715	Identifier	index		3043555	1					
ANR	3043716	Identifier	index		3043555	1					
ANR	3043717	ExpressionStatement	( * pipeTable ) [ i ] . handler = handler	1938:1:55498:55531	3043555	12	True				
ANR	3043718	AssignmentExpression	( * pipeTable ) [ i ] . handler = handler		3043555	0		=			
ANR	3043719	MemberAccess	( * pipeTable ) [ i ] . handler		3043555	0					
ANR	3043720	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043721	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043722	UnaryOperator	*		3043555	0					
ANR	3043723	Identifier	pipeTable		3043555	1					
ANR	3043724	Identifier	i		3043555	1					
ANR	3043725	Identifier	handler		3043555	1					
ANR	3043726	Identifier	handler		3043555	1					
ANR	3043727	ExpressionStatement	( * pipeTable ) [ i ] . handler_type = handler_type	1939:1:55534:55577	3043555	13	True				
ANR	3043728	AssignmentExpression	( * pipeTable ) [ i ] . handler_type = handler_type		3043555	0		=			
ANR	3043729	MemberAccess	( * pipeTable ) [ i ] . handler_type		3043555	0					
ANR	3043730	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043731	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043732	UnaryOperator	*		3043555	0					
ANR	3043733	Identifier	pipeTable		3043555	1					
ANR	3043734	Identifier	i		3043555	1					
ANR	3043735	Identifier	handler_type		3043555	1					
ANR	3043736	Identifier	handler_type		3043555	1					
ANR	3043737	ExpressionStatement	( * pipeTable ) [ i ] . handlercpp = handlercpp	1940:1:55580:55619	3043555	14	True				
ANR	3043738	AssignmentExpression	( * pipeTable ) [ i ] . handlercpp = handlercpp		3043555	0		=			
ANR	3043739	MemberAccess	( * pipeTable ) [ i ] . handlercpp		3043555	0					
ANR	3043740	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043741	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043742	UnaryOperator	*		3043555	0					
ANR	3043743	Identifier	pipeTable		3043555	1					
ANR	3043744	Identifier	i		3043555	1					
ANR	3043745	Identifier	handlercpp		3043555	1					
ANR	3043746	Identifier	handlercpp		3043555	1					
ANR	3043747	ExpressionStatement	( * pipeTable ) [ i ] . is_cpp = is_cpp	1941:1:55622:55653	3043555	15	True				
ANR	3043748	AssignmentExpression	( * pipeTable ) [ i ] . is_cpp = is_cpp		3043555	0		=			
ANR	3043749	MemberAccess	( * pipeTable ) [ i ] . is_cpp		3043555	0					
ANR	3043750	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043751	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043752	UnaryOperator	*		3043555	0					
ANR	3043753	Identifier	pipeTable		3043555	1					
ANR	3043754	Identifier	i		3043555	1					
ANR	3043755	Identifier	is_cpp		3043555	1					
ANR	3043756	Identifier	is_cpp		3043555	1					
ANR	3043757	ExpressionStatement	( * pipeTable ) [ i ] . perm = perm	1942:1:55656:55683	3043555	16	True				
ANR	3043758	AssignmentExpression	( * pipeTable ) [ i ] . perm = perm		3043555	0		=			
ANR	3043759	MemberAccess	( * pipeTable ) [ i ] . perm		3043555	0					
ANR	3043760	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043761	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043762	UnaryOperator	*		3043555	0					
ANR	3043763	Identifier	pipeTable		3043555	1					
ANR	3043764	Identifier	i		3043555	1					
ANR	3043765	Identifier	perm		3043555	1					
ANR	3043766	Identifier	perm		3043555	1					
ANR	3043767	ExpressionStatement	( * pipeTable ) [ i ] . service = s	1943:1:55686:55713	3043555	17	True				
ANR	3043768	AssignmentExpression	( * pipeTable ) [ i ] . service = s		3043555	0		=			
ANR	3043769	MemberAccess	( * pipeTable ) [ i ] . service		3043555	0					
ANR	3043770	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043771	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043772	UnaryOperator	*		3043555	0					
ANR	3043773	Identifier	pipeTable		3043555	1					
ANR	3043774	Identifier	i		3043555	1					
ANR	3043775	Identifier	service		3043555	1					
ANR	3043776	Identifier	s		3043555	1					
ANR	3043777	ExpressionStatement	( * pipeTable ) [ i ] . data_ptr = NULL	1944:1:55716:55747	3043555	18	True				
ANR	3043778	AssignmentExpression	( * pipeTable ) [ i ] . data_ptr = NULL		3043555	0		=			
ANR	3043779	MemberAccess	( * pipeTable ) [ i ] . data_ptr		3043555	0					
ANR	3043780	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043781	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043782	UnaryOperator	*		3043555	0					
ANR	3043783	Identifier	pipeTable		3043555	1					
ANR	3043784	Identifier	i		3043555	1					
ANR	3043785	Identifier	data_ptr		3043555	1					
ANR	3043786	Identifier	NULL		3043555	1					
ANR	3043787	ExpressionStatement	free ( ( * pipeTable ) [ i ] . pipe_descrip )	1945:1:55750:55784	3043555	19	True				
ANR	3043788	CallExpression	free ( ( * pipeTable ) [ i ] . pipe_descrip )		3043555	0					
ANR	3043789	Callee	free		3043555	0					
ANR	3043790	Identifier	free		3043555	0					
ANR	3043791	ArgumentList	( * pipeTable ) [ i ] . pipe_descrip		3043555	1					
ANR	3043792	Argument	( * pipeTable ) [ i ] . pipe_descrip		3043555	0					
ANR	3043793	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		3043555	0					
ANR	3043794	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043795	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043796	UnaryOperator	*		3043555	0					
ANR	3043797	Identifier	pipeTable		3043555	1					
ANR	3043798	Identifier	i		3043555	1					
ANR	3043799	Identifier	pipe_descrip		3043555	1					
ANR	3043800	IfStatement	if ( pipe_descrip )		3043555	20					
ANR	3043801	Condition	pipe_descrip	1946:6:55792:55803	3043555	0	True				
ANR	3043802	Identifier	pipe_descrip		3043555	0					
ANR	3043803	ExpressionStatement	( * pipeTable ) [ i ] . pipe_descrip = strdup ( pipe_descrip )	1947:2:55809:55860	3043555	1	True				
ANR	3043804	AssignmentExpression	( * pipeTable ) [ i ] . pipe_descrip = strdup ( pipe_descrip )		3043555	0		=			
ANR	3043805	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		3043555	0					
ANR	3043806	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043807	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043808	UnaryOperator	*		3043555	0					
ANR	3043809	Identifier	pipeTable		3043555	1					
ANR	3043810	Identifier	i		3043555	1					
ANR	3043811	Identifier	pipe_descrip		3043555	1					
ANR	3043812	CallExpression	strdup ( pipe_descrip )		3043555	1					
ANR	3043813	Callee	strdup		3043555	0					
ANR	3043814	Identifier	strdup		3043555	0					
ANR	3043815	ArgumentList	pipe_descrip		3043555	1					
ANR	3043816	Argument	pipe_descrip		3043555	0					
ANR	3043817	Identifier	pipe_descrip		3043555	0					
ANR	3043818	ElseStatement	else		3043555	0					
ANR	3043819	ExpressionStatement	( * pipeTable ) [ i ] . pipe_descrip = strdup ( EMPTY_DESCRIP )	1949:2:55870:55922	3043555	0	True				
ANR	3043820	AssignmentExpression	( * pipeTable ) [ i ] . pipe_descrip = strdup ( EMPTY_DESCRIP )		3043555	0		=			
ANR	3043821	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		3043555	0					
ANR	3043822	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043823	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043824	UnaryOperator	*		3043555	0					
ANR	3043825	Identifier	pipeTable		3043555	1					
ANR	3043826	Identifier	i		3043555	1					
ANR	3043827	Identifier	pipe_descrip		3043555	1					
ANR	3043828	CallExpression	strdup ( EMPTY_DESCRIP )		3043555	1					
ANR	3043829	Callee	strdup		3043555	0					
ANR	3043830	Identifier	strdup		3043555	0					
ANR	3043831	ArgumentList	EMPTY_DESCRIP		3043555	1					
ANR	3043832	Argument	EMPTY_DESCRIP		3043555	0					
ANR	3043833	Identifier	EMPTY_DESCRIP		3043555	0					
ANR	3043834	ExpressionStatement	free ( ( * pipeTable ) [ i ] . handler_descrip )	1950:1:55925:55962	3043555	21	True				
ANR	3043835	CallExpression	free ( ( * pipeTable ) [ i ] . handler_descrip )		3043555	0					
ANR	3043836	Callee	free		3043555	0					
ANR	3043837	Identifier	free		3043555	0					
ANR	3043838	ArgumentList	( * pipeTable ) [ i ] . handler_descrip		3043555	1					
ANR	3043839	Argument	( * pipeTable ) [ i ] . handler_descrip		3043555	0					
ANR	3043840	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		3043555	0					
ANR	3043841	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043842	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043843	UnaryOperator	*		3043555	0					
ANR	3043844	Identifier	pipeTable		3043555	1					
ANR	3043845	Identifier	i		3043555	1					
ANR	3043846	Identifier	handler_descrip		3043555	1					
ANR	3043847	IfStatement	if ( handler_descrip )		3043555	22					
ANR	3043848	Condition	handler_descrip	1951:6:55970:55984	3043555	0	True				
ANR	3043849	Identifier	handler_descrip		3043555	0					
ANR	3043850	ExpressionStatement	( * pipeTable ) [ i ] . handler_descrip = strdup ( handler_descrip )	1952:2:55990:56047	3043555	1	True				
ANR	3043851	AssignmentExpression	( * pipeTable ) [ i ] . handler_descrip = strdup ( handler_descrip )		3043555	0		=			
ANR	3043852	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		3043555	0					
ANR	3043853	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043854	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043855	UnaryOperator	*		3043555	0					
ANR	3043856	Identifier	pipeTable		3043555	1					
ANR	3043857	Identifier	i		3043555	1					
ANR	3043858	Identifier	handler_descrip		3043555	1					
ANR	3043859	CallExpression	strdup ( handler_descrip )		3043555	1					
ANR	3043860	Callee	strdup		3043555	0					
ANR	3043861	Identifier	strdup		3043555	0					
ANR	3043862	ArgumentList	handler_descrip		3043555	1					
ANR	3043863	Argument	handler_descrip		3043555	0					
ANR	3043864	Identifier	handler_descrip		3043555	0					
ANR	3043865	ElseStatement	else		3043555	0					
ANR	3043866	ExpressionStatement	( * pipeTable ) [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	1954:2:56057:56112	3043555	0	True				
ANR	3043867	AssignmentExpression	( * pipeTable ) [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		3043555	0		=			
ANR	3043868	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		3043555	0					
ANR	3043869	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043870	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043871	UnaryOperator	*		3043555	0					
ANR	3043872	Identifier	pipeTable		3043555	1					
ANR	3043873	Identifier	i		3043555	1					
ANR	3043874	Identifier	handler_descrip		3043555	1					
ANR	3043875	CallExpression	strdup ( EMPTY_DESCRIP )		3043555	1					
ANR	3043876	Callee	strdup		3043555	0					
ANR	3043877	Identifier	strdup		3043555	0					
ANR	3043878	ArgumentList	EMPTY_DESCRIP		3043555	1					
ANR	3043879	Argument	EMPTY_DESCRIP		3043555	0					
ANR	3043880	Identifier	EMPTY_DESCRIP		3043555	0					
ANR	3043881	ExpressionStatement	nPipe ++	1957:1:56169:56176	3043555	23	True				
ANR	3043882	PostIncDecOperationExpression	nPipe ++		3043555	0					
ANR	3043883	Identifier	nPipe		3043555	0					
ANR	3043884	IncDec	++		3043555	1					
ANR	3043885	ExpressionStatement	curr_regdataptr = & ( ( * pipeTable ) [ i ] . data_ptr )	1960:1:56224:56269	3043555	24	True				
ANR	3043886	AssignmentExpression	curr_regdataptr = & ( ( * pipeTable ) [ i ] . data_ptr )		3043555	0		=			
ANR	3043887	Identifier	curr_regdataptr		3043555	0					
ANR	3043888	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . data_ptr )		3043555	1					
ANR	3043889	UnaryOperator	&		3043555	0					
ANR	3043890	MemberAccess	( * pipeTable ) [ i ] . data_ptr		3043555	1					
ANR	3043891	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043892	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043893	UnaryOperator	*		3043555	0					
ANR	3043894	Identifier	pipeTable		3043555	1					
ANR	3043895	Identifier	i		3043555	1					
ANR	3043896	Identifier	data_ptr		3043555	1					
ANR	3043897	ExpressionStatement	Wake_up_select ( )	1966:1:56447:56463	3043555	25	True				
ANR	3043898	CallExpression	Wake_up_select ( )		3043555	0					
ANR	3043899	Callee	Wake_up_select		3043555	0					
ANR	3043900	Identifier	Wake_up_select		3043555	0					
ANR	3043901	ArgumentList			3043555	1					
ANR	3043902	ExpressionStatement	( * pipeHandleTable ) [ index ] -> set_registered ( )	1976:1:56784:56827	3043555	26	True				
ANR	3043903	CallExpression	( * pipeHandleTable ) [ index ] -> set_registered ( )		3043555	0					
ANR	3043904	Callee	( * pipeHandleTable ) [ index ] -> set_registered		3043555	0					
ANR	3043905	PtrMemberAccess	( * pipeHandleTable ) [ index ] -> set_registered		3043555	0					
ANR	3043906	ArrayIndexing	( * pipeHandleTable ) [ index ]		3043555	0					
ANR	3043907	UnaryOperationExpression	* pipeHandleTable		3043555	0					
ANR	3043908	UnaryOperator	*		3043555	0					
ANR	3043909	Identifier	pipeHandleTable		3043555	1					
ANR	3043910	Identifier	index		3043555	1					
ANR	3043911	Identifier	set_registered		3043555	1					
ANR	3043912	ArgumentList			3043555	1					
ANR	3043913	Statement	(	1978:1:56831:56831	3043555	27	True				
ANR	3043914	Statement	*	1978:2:56832:56832	3043555	28	True				
ANR	3043915	Statement	pipeTable	1978:3:56833:56841	3043555	29	True				
ANR	3043916	Statement	)	1978:12:56842:56842	3043555	30	True				
ANR	3043917	Statement	[	1978:13:56843:56843	3043555	31	True				
ANR	3043918	Statement	i	1978:14:56844:56844	3043555	32	True				
ANR	3043919	Statement	]	1978:15:56845:56845	3043555	33	True				
ANR	3043920	Statement	.	1978:16:56846:56846	3043555	34	True				
ANR	3043921	Statement	pentry	1978:17:56847:56852	3043555	35	True				
ANR	3043922	Statement	=	1978:24:56854:56854	3043555	36	True				
ANR	3043923	Statement	new	1978:26:56856:56858	3043555	37	True				
ANR	3043924	ExpressionStatement	PidEntry	1978:30:56860:56868	3043555	38	True				
ANR	3043925	Identifier	PidEntry		3043555	0					
ANR	3043926	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> hProcess = 0	1979:1:56871:56907	3043555	39	True				
ANR	3043927	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> hProcess = 0		3043555	0		=			
ANR	3043928	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> hProcess		3043555	0					
ANR	3043929	MemberAccess	( * pipeTable ) [ i ] . pentry		3043555	0					
ANR	3043930	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043931	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043932	UnaryOperator	*		3043555	0					
ANR	3043933	Identifier	pipeTable		3043555	1					
ANR	3043934	Identifier	i		3043555	1					
ANR	3043935	Identifier	pentry		3043555	1					
ANR	3043936	Identifier	hProcess		3043555	1					
ANR	3043937	PrimaryExpression	0		3043555	1					
ANR	3043938	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> hThread = 0	1980:1:56910:56945	3043555	40	True				
ANR	3043939	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> hThread = 0		3043555	0		=			
ANR	3043940	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> hThread		3043555	0					
ANR	3043941	MemberAccess	( * pipeTable ) [ i ] . pentry		3043555	0					
ANR	3043942	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043943	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043944	UnaryOperator	*		3043555	0					
ANR	3043945	Identifier	pipeTable		3043555	1					
ANR	3043946	Identifier	i		3043555	1					
ANR	3043947	Identifier	pentry		3043555	1					
ANR	3043948	Identifier	hThread		3043555	1					
ANR	3043949	PrimaryExpression	0		3043555	1					
ANR	3043950	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> pipeReady = 0	1981:1:56948:56985	3043555	41	True				
ANR	3043951	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> pipeReady = 0		3043555	0		=			
ANR	3043952	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeReady		3043555	0					
ANR	3043953	MemberAccess	( * pipeTable ) [ i ] . pentry		3043555	0					
ANR	3043954	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043955	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043956	UnaryOperator	*		3043555	0					
ANR	3043957	Identifier	pipeTable		3043555	1					
ANR	3043958	Identifier	i		3043555	1					
ANR	3043959	Identifier	pentry		3043555	1					
ANR	3043960	Identifier	pipeReady		3043555	1					
ANR	3043961	PrimaryExpression	0		3043555	1					
ANR	3043962	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> deallocate = 0	1982:1:56988:57026	3043555	42	True				
ANR	3043963	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> deallocate = 0		3043555	0		=			
ANR	3043964	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> deallocate		3043555	0					
ANR	3043965	MemberAccess	( * pipeTable ) [ i ] . pentry		3043555	0					
ANR	3043966	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043967	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043968	UnaryOperator	*		3043555	0					
ANR	3043969	Identifier	pipeTable		3043555	1					
ANR	3043970	Identifier	i		3043555	1					
ANR	3043971	Identifier	pentry		3043555	1					
ANR	3043972	Identifier	deallocate		3043555	1					
ANR	3043973	PrimaryExpression	0		3043555	1					
ANR	3043974	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> pipeEnd = ( * pipeHandleTable ) [ index ]	1983:1:57029:57088	3043555	43	True				
ANR	3043975	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> pipeEnd = ( * pipeHandleTable ) [ index ]		3043555	0		=			
ANR	3043976	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeEnd		3043555	0					
ANR	3043977	MemberAccess	( * pipeTable ) [ i ] . pentry		3043555	0					
ANR	3043978	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043979	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043980	UnaryOperator	*		3043555	0					
ANR	3043981	Identifier	pipeTable		3043555	1					
ANR	3043982	Identifier	i		3043555	1					
ANR	3043983	Identifier	pentry		3043555	1					
ANR	3043984	Identifier	pipeEnd		3043555	1					
ANR	3043985	ArrayIndexing	( * pipeHandleTable ) [ index ]		3043555	1					
ANR	3043986	UnaryOperationExpression	* pipeHandleTable		3043555	0					
ANR	3043987	UnaryOperator	*		3043555	0					
ANR	3043988	Identifier	pipeHandleTable		3043555	1					
ANR	3043989	Identifier	index		3043555	1					
ANR	3043990	ExpressionStatement	WatchPid ( ( * pipeTable ) [ i ] . pentry )	1985:1:57092:57124	3043555	44	True				
ANR	3043991	CallExpression	WatchPid ( ( * pipeTable ) [ i ] . pentry )		3043555	0					
ANR	3043992	Callee	WatchPid		3043555	0					
ANR	3043993	Identifier	WatchPid		3043555	0					
ANR	3043994	ArgumentList	( * pipeTable ) [ i ] . pentry		3043555	1					
ANR	3043995	Argument	( * pipeTable ) [ i ] . pentry		3043555	0					
ANR	3043996	MemberAccess	( * pipeTable ) [ i ] . pentry		3043555	0					
ANR	3043997	ArrayIndexing	( * pipeTable ) [ i ]		3043555	0					
ANR	3043998	UnaryOperationExpression	* pipeTable		3043555	0					
ANR	3043999	UnaryOperator	*		3043555	0					
ANR	3044000	Identifier	pipeTable		3043555	1					
ANR	3044001	Identifier	i		3043555	1					
ANR	3044002	Identifier	pentry		3043555	1					
ANR	3044003	ReturnStatement	return pipe_end ;	1988:1:57135:57150	3043555	45	True				
ANR	3044004	Identifier	pipe_end		3043555	0					
ANR	3044005	ReturnType	int		3043555	1					
ANR	3044006	Identifier	DaemonCore :: Register_Pipe		3043555	2					
ANR	3044007	ParameterList	"int pipe_end , const char * pipe_descrip , PipeHandler handler , PipeHandlercpp handlercpp , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm , int is_cpp"		3043555	3					
ANR	3044008	Parameter	int pipe_end	1901:30:54451:54462	3043555	0	True				
ANR	3044009	ParameterType	int		3043555	0					
ANR	3044010	Identifier	pipe_end		3043555	1					
ANR	3044011	Parameter	const char * pipe_descrip	1901:44:54465:54488	3043555	1	True				
ANR	3044012	ParameterType	const char *		3043555	0					
ANR	3044013	Identifier	pipe_descrip		3043555	1					
ANR	3044014	Parameter	PipeHandler handler	1902:4:54495:54513	3043555	2	True				
ANR	3044015	ParameterType	PipeHandler		3043555	0					
ANR	3044016	Identifier	handler		3043555	1					
ANR	3044017	Parameter	PipeHandlercpp handlercpp	1902:25:54516:54540	3043555	3	True				
ANR	3044018	ParameterType	PipeHandlercpp		3043555	0					
ANR	3044019	Identifier	handlercpp		3043555	1					
ANR	3044020	Parameter	const char * handler_descrip	1903:4:54547:54573	3043555	4	True				
ANR	3044021	ParameterType	const char *		3043555	0					
ANR	3044022	Identifier	handler_descrip		3043555	1					
ANR	3044023	Parameter	Service * s	1903:33:54576:54585	3043555	5	True				
ANR	3044024	ParameterType	Service *		3043555	0					
ANR	3044025	Identifier	s		3043555	1					
ANR	3044026	Parameter	HandlerType handler_type	1904:4:54592:54615	3043555	6	True				
ANR	3044027	ParameterType	HandlerType		3043555	0					
ANR	3044028	Identifier	handler_type		3043555	1					
ANR	3044029	Parameter	DCpermission perm	1904:30:54618:54634	3043555	7	True				
ANR	3044030	ParameterType	DCpermission		3043555	0					
ANR	3044031	Identifier	perm		3043555	1					
ANR	3044032	Parameter	int is_cpp	1905:4:54641:54650	3043555	8	True				
ANR	3044033	ParameterType	int		3043555	0					
ANR	3044034	Identifier	is_cpp		3043555	1					
ANR	3044035	CFGEntryNode	ENTRY		3043555		True				
ANR	3044036	CFGExitNode	EXIT		3043555		True				
ANR	3044037	Symbol	handler		3043555						
ANR	3044038	Symbol	pipe_end		3043555						
ANR	3044039	Symbol	* index		3043555						
ANR	3044040	Symbol	nPipe		3043555						
ANR	3044041	Symbol	pipeHandleTableLookup		3043555						
ANR	3044042	Symbol	( * pipeTable ) [ i ] . pentry -> pipeEnd		3043555						
ANR	3044043	Symbol	IF_NONZERO		3043555						
ANR	3044044	Symbol	* * * pipeTable		3043555						
ANR	3044045	Symbol	( * pipeTable ) [ i ] . pipe_descrip		3043555						
ANR	3044046	Symbol	handlercpp		3043555						
ANR	3044047	Symbol	is_cpp		3043555						
ANR	3044048	Symbol	PIPE_INDEX_OFFSET		3043555						
ANR	3044049	Symbol	* * i		3043555						
ANR	3044050	Symbol	NULL		3043555						
ANR	3044051	Symbol	( * pipeTable ) [ i ] . pentry -> pipeReady		3043555						
ANR	3044052	Symbol	index		3043555						
ANR	3044053	Symbol	* pipeTable		3043555						
ANR	3044054	Symbol	& ( * pipeTable ) [ i ] . data_ptr		3043555						
ANR	3044055	Symbol	( * pipeTable ) [ i ] . index		3043555						
ANR	3044056	Symbol	( * pipeTable ) [ i ] . handler		3043555						
ANR	3044057	Symbol	( * pipeTable ) [ i ] . handler_type		3043555						
ANR	3044058	Symbol	( * pipeTable ) [ i ] . data_ptr		3043555						
ANR	3044059	Symbol	( * pipeTable ) [ i ] . call_handler		3043555						
ANR	3044060	Symbol	* ( * pipeTable ) [ i ] . pentry		3043555						
ANR	3044061	Symbol	curr_regdataptr		3043555						
ANR	3044062	Symbol	perm		3043555						
ANR	3044063	Symbol	* pipeHandleTable		3043555						
ANR	3044064	Symbol	* * pipeTable		3043555						
ANR	3044065	Symbol	( * pipeTable ) [ i ] . handler_descrip		3043555						
ANR	3044066	Symbol	( * pipeTable ) [ j ] . index		3043555						
ANR	3044067	Symbol	pipeHandleTable		3043555						
ANR	3044068	Symbol	handler_descrip		3043555						
ANR	3044069	Symbol	pipe_descrip		3043555						
ANR	3044070	Symbol	( * pipeTable ) [ i ] . pentry -> hThread		3043555						
ANR	3044071	Symbol	( * pipeTable ) [ i ] . is_cpp		3043555						
ANR	3044072	Symbol	AS_COUNT		3043555						
ANR	3044073	Symbol	IS_RCT		3043555						
ANR	3044074	Symbol	( * pipeTable ) [ i ] . pentry -> hProcess		3043555						
ANR	3044075	Symbol	handler_type		3043555						
ANR	3044076	Symbol	D_DAEMONCORE		3043555						
ANR	3044077	Symbol	( * pipeTable ) [ i ] . service		3043555						
ANR	3044078	Symbol	false		3043555						
ANR	3044079	Symbol	i		3043555						
ANR	3044080	Symbol	j		3043555						
ANR	3044081	Symbol	pipeTable		3043555						
ANR	3044082	Symbol	s		3043555						
ANR	3044083	Symbol	* i		3043555						
ANR	3044084	Symbol	( * pipeTable ) [ i ] . handlercpp		3043555						
ANR	3044085	Symbol	* j		3043555						
ANR	3044086	Symbol	IF_VERBOSEPUB		3043555						
ANR	3044087	Symbol	EMPTY_DESCRIP		3043555						
ANR	3044088	Symbol	( * pipeTable ) [ i ] . pentry		3043555						
ANR	3044089	Symbol	* * pipeHandleTable		3043555						
ANR	3044090	Symbol	FALSE		3043555						
ANR	3044091	Symbol	dc_stats		3043555						
ANR	3044092	Symbol	( * pipeTable ) [ i ] . pentry -> deallocate		3043555						
ANR	3044093	Symbol	( * pipeTable ) [ i ] . perm		3043555						
ANR	3044094	Symbol	strdup		3043555						
ANR	3044095	Symbol	( * pipeTable ) [ i ] . in_handler		3043555						
ANR	3044096	Function	DaemonCore :: Cancel_Pipe	1992:0:57156:59998							
ANR	3044097	FunctionDef	DaemonCore :: Cancel_Pipe (int pipe_end)		3044096	0					
ANR	3044098	CompoundStatement		1993:0:57200:59998	3044096	0					
ANR	3044099	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	1994:1:57203:57243	3044096	0	True				
ANR	3044100	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		3044096	0					
ANR	3044101	IdentifierDeclType	int		3044096	0					
ANR	3044102	Identifier	index		3044096	1					
ANR	3044103	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		3044096	2		=			
ANR	3044104	Identifier	index		3044096	0					
ANR	3044105	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		3044096	1		-			
ANR	3044106	Identifier	pipe_end		3044096	0					
ANR	3044107	Identifier	PIPE_INDEX_OFFSET		3044096	1					
ANR	3044108	IfStatement	if ( index < 0 )		3044096	1					
ANR	3044109	Condition	index < 0	1995:5:57250:57258	3044096	0	True				
ANR	3044110	RelationalExpression	index < 0		3044096	0		<			
ANR	3044111	Identifier	index		3044096	0					
ANR	3044112	PrimaryExpression	0		3044096	1					
ANR	3044113	CompoundStatement		3:16:60:60	3044096	1					
ANR	3044114	ExpressionStatement	"dprintf ( D_ALWAYS , ""Cancel_Pipe on invalid pipe end: %d\\n"" , pipe_end )"	1996:2:57265:57333	3044096	0	True				
ANR	3044115	CallExpression	"dprintf ( D_ALWAYS , ""Cancel_Pipe on invalid pipe end: %d\\n"" , pipe_end )"		3044096	0					
ANR	3044116	Callee	dprintf		3044096	0					
ANR	3044117	Identifier	dprintf		3044096	0					
ANR	3044118	ArgumentList	D_ALWAYS		3044096	1					
ANR	3044119	Argument	D_ALWAYS		3044096	0					
ANR	3044120	Identifier	D_ALWAYS		3044096	0					
ANR	3044121	Argument	"""Cancel_Pipe on invalid pipe end: %d\\n"""		3044096	1					
ANR	3044122	PrimaryExpression	"""Cancel_Pipe on invalid pipe end: %d\\n"""		3044096	0					
ANR	3044123	Argument	pipe_end		3044096	2					
ANR	3044124	Identifier	pipe_end		3044096	0					
ANR	3044125	ExpressionStatement	"EXCEPT ( ""Cancel_Pipe error"" )"	1997:2:57337:57364	3044096	1	True				
ANR	3044126	CallExpression	"EXCEPT ( ""Cancel_Pipe error"" )"		3044096	0					
ANR	3044127	Callee	EXCEPT		3044096	0					
ANR	3044128	Identifier	EXCEPT		3044096	0					
ANR	3044129	ArgumentList	"""Cancel_Pipe error"""		3044096	1					
ANR	3044130	Argument	"""Cancel_Pipe error"""		3044096	0					
ANR	3044131	PrimaryExpression	"""Cancel_Pipe error"""		3044096	0					
ANR	3044132	IdentifierDeclStatement	"int i , j ;"	2000:1:57372:57379	3044096	2	True				
ANR	3044133	IdentifierDecl	i		3044096	0					
ANR	3044134	IdentifierDeclType	int		3044096	0					
ANR	3044135	Identifier	i		3044096	1					
ANR	3044136	IdentifierDecl	j		3044096	1					
ANR	3044137	IdentifierDeclType	int		3044096	0					
ANR	3044138	Identifier	j		3044096	1					
ANR	3044139	ExpressionStatement	i = - 1	2002:1:57383:57389	3044096	3	True				
ANR	3044140	AssignmentExpression	i = - 1		3044096	0		=			
ANR	3044141	Identifier	i		3044096	0					
ANR	3044142	UnaryOperationExpression	- 1		3044096	1					
ANR	3044143	UnaryOperator	-		3044096	0					
ANR	3044144	PrimaryExpression	1		3044096	1					
ANR	3044145	ForStatement	for ( j = 0 ; j < nPipe ; j ++ )		3044096	4					
ANR	3044146	ForInit	j = 0 ;	2003:6:57397:57400	3044096	0	True				
ANR	3044147	AssignmentExpression	j = 0		3044096	0		=			
ANR	3044148	Identifier	j		3044096	0					
ANR	3044149	PrimaryExpression	0		3044096	1					
ANR	3044150	Condition	j < nPipe	2003:10:57401:57407	3044096	1	True				
ANR	3044151	RelationalExpression	j < nPipe		3044096	0		<			
ANR	3044152	Identifier	j		3044096	0					
ANR	3044153	Identifier	nPipe		3044096	1					
ANR	3044154	PostIncDecOperationExpression	j ++	2003:18:57409:57411	3044096	2	True				
ANR	3044155	Identifier	j		3044096	0					
ANR	3044156	IncDec	++		3044096	1					
ANR	3044157	CompoundStatement		11:23:213:213	3044096	3					
ANR	3044158	IfStatement	if ( ( * pipeTable ) [ j ] . index == index )		3044096	0					
ANR	3044159	Condition	( * pipeTable ) [ j ] . index == index	2004:7:57423:57452	3044096	0	True				
ANR	3044160	EqualityExpression	( * pipeTable ) [ j ] . index == index		3044096	0		==			
ANR	3044161	MemberAccess	( * pipeTable ) [ j ] . index		3044096	0					
ANR	3044162	ArrayIndexing	( * pipeTable ) [ j ]		3044096	0					
ANR	3044163	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044164	UnaryOperator	*		3044096	0					
ANR	3044165	Identifier	pipeTable		3044096	1					
ANR	3044166	Identifier	j		3044096	1					
ANR	3044167	Identifier	index		3044096	1					
ANR	3044168	Identifier	index		3044096	1					
ANR	3044169	CompoundStatement		12:40:255:255	3044096	1					
ANR	3044170	ExpressionStatement	i = j	2005:3:57461:57466	3044096	0	True				
ANR	3044171	AssignmentExpression	i = j		3044096	0		=			
ANR	3044172	Identifier	i		3044096	0					
ANR	3044173	Identifier	j		3044096	1					
ANR	3044174	BreakStatement	break ;	2006:3:57471:57476	3044096	1	True				
ANR	3044175	IfStatement	if ( i == - 1 )		3044096	5					
ANR	3044176	Condition	i == - 1	2010:6:57492:57498	3044096	0	True				
ANR	3044177	EqualityExpression	i == - 1		3044096	0		==			
ANR	3044178	Identifier	i		3044096	0					
ANR	3044179	UnaryOperationExpression	- 1		3044096	1					
ANR	3044180	UnaryOperator	-		3044096	0					
ANR	3044181	PrimaryExpression	1		3044096	1					
ANR	3044182	CompoundStatement		18:16:301:301	3044096	1					
ANR	3044183	ExpressionStatement	"dprintf ( D_ALWAYS , ""Cancel_Pipe: called on non-registered pipe!\\n"" )"	2011:2:57506:57572	3044096	0	True				
ANR	3044184	CallExpression	"dprintf ( D_ALWAYS , ""Cancel_Pipe: called on non-registered pipe!\\n"" )"		3044096	0					
ANR	3044185	Callee	dprintf		3044096	0					
ANR	3044186	Identifier	dprintf		3044096	0					
ANR	3044187	ArgumentList	D_ALWAYS		3044096	1					
ANR	3044188	Argument	D_ALWAYS		3044096	0					
ANR	3044189	Identifier	D_ALWAYS		3044096	0					
ANR	3044190	Argument	"""Cancel_Pipe: called on non-registered pipe!\\n"""		3044096	1					
ANR	3044191	PrimaryExpression	"""Cancel_Pipe: called on non-registered pipe!\\n"""		3044096	0					
ANR	3044192	ExpressionStatement	"dprintf ( D_ALWAYS , ""Offending pipe end number %d\\n"" , pipe_end )"	2012:2:57576:57638	3044096	1	True				
ANR	3044193	CallExpression	"dprintf ( D_ALWAYS , ""Offending pipe end number %d\\n"" , pipe_end )"		3044096	0					
ANR	3044194	Callee	dprintf		3044096	0					
ANR	3044195	Identifier	dprintf		3044096	0					
ANR	3044196	ArgumentList	D_ALWAYS		3044096	1					
ANR	3044197	Argument	D_ALWAYS		3044096	0					
ANR	3044198	Identifier	D_ALWAYS		3044096	0					
ANR	3044199	Argument	"""Offending pipe end number %d\\n"""		3044096	1					
ANR	3044200	PrimaryExpression	"""Offending pipe end number %d\\n"""		3044096	0					
ANR	3044201	Argument	pipe_end		3044096	2					
ANR	3044202	Identifier	pipe_end		3044096	0					
ANR	3044203	ReturnStatement	return FALSE ;	2013:2:57642:57654	3044096	2	True				
ANR	3044204	Identifier	FALSE		3044096	0					
ANR	3044205	IfStatement	if ( curr_regdataptr == & ( ( * pipeTable ) [ i ] . data_ptr ) )		3044096	6					
ANR	3044206	Condition	curr_regdataptr == & ( ( * pipeTable ) [ i ] . data_ptr )	2019:6:57799:57845	3044096	0	True				
ANR	3044207	EqualityExpression	curr_regdataptr == & ( ( * pipeTable ) [ i ] . data_ptr )		3044096	0		==			
ANR	3044208	Identifier	curr_regdataptr		3044096	0					
ANR	3044209	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . data_ptr )		3044096	1					
ANR	3044210	UnaryOperator	&		3044096	0					
ANR	3044211	MemberAccess	( * pipeTable ) [ i ] . data_ptr		3044096	1					
ANR	3044212	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044213	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044214	UnaryOperator	*		3044096	0					
ANR	3044215	Identifier	pipeTable		3044096	1					
ANR	3044216	Identifier	i		3044096	1					
ANR	3044217	Identifier	data_ptr		3044096	1					
ANR	3044218	ExpressionStatement	curr_regdataptr = NULL	2020:2:57851:57873	3044096	1	True				
ANR	3044219	AssignmentExpression	curr_regdataptr = NULL		3044096	0		=			
ANR	3044220	Identifier	curr_regdataptr		3044096	0					
ANR	3044221	Identifier	NULL		3044096	1					
ANR	3044222	IfStatement	if ( curr_dataptr == & ( ( * pipeTable ) [ i ] . data_ptr ) )		3044096	7					
ANR	3044223	Condition	curr_dataptr == & ( ( * pipeTable ) [ i ] . data_ptr )	2021:6:57881:57924	3044096	0	True				
ANR	3044224	EqualityExpression	curr_dataptr == & ( ( * pipeTable ) [ i ] . data_ptr )		3044096	0		==			
ANR	3044225	Identifier	curr_dataptr		3044096	0					
ANR	3044226	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . data_ptr )		3044096	1					
ANR	3044227	UnaryOperator	&		3044096	0					
ANR	3044228	MemberAccess	( * pipeTable ) [ i ] . data_ptr		3044096	1					
ANR	3044229	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044230	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044231	UnaryOperator	*		3044096	0					
ANR	3044232	Identifier	pipeTable		3044096	1					
ANR	3044233	Identifier	i		3044096	1					
ANR	3044234	Identifier	data_ptr		3044096	1					
ANR	3044235	ExpressionStatement	curr_dataptr = NULL	2022:2:57930:57949	3044096	1	True				
ANR	3044236	AssignmentExpression	curr_dataptr = NULL		3044096	0		=			
ANR	3044237	Identifier	curr_dataptr		3044096	0					
ANR	3044238	Identifier	NULL		3044096	1					
ANR	3044239	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Pipe: cancelled pipe end %d <%s> (entry=%d)\\n"" , pipe_end , ( * pipeTable ) [ i ] . pipe_descrip , i )"	2025:1:57971:58097	3044096	8	True				
ANR	3044240	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Pipe: cancelled pipe end %d <%s> (entry=%d)\\n"" , pipe_end , ( * pipeTable ) [ i ] . pipe_descrip , i )"		3044096	0					
ANR	3044241	Callee	dprintf		3044096	0					
ANR	3044242	Identifier	dprintf		3044096	0					
ANR	3044243	ArgumentList	D_DAEMONCORE		3044096	1					
ANR	3044244	Argument	D_DAEMONCORE		3044096	0					
ANR	3044245	Identifier	D_DAEMONCORE		3044096	0					
ANR	3044246	Argument	"""Cancel_Pipe: cancelled pipe end %d <%s> (entry=%d)\\n"""		3044096	1					
ANR	3044247	PrimaryExpression	"""Cancel_Pipe: cancelled pipe end %d <%s> (entry=%d)\\n"""		3044096	0					
ANR	3044248	Argument	pipe_end		3044096	2					
ANR	3044249	Identifier	pipe_end		3044096	0					
ANR	3044250	Argument	( * pipeTable ) [ i ] . pipe_descrip		3044096	3					
ANR	3044251	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		3044096	0					
ANR	3044252	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044253	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044254	UnaryOperator	*		3044096	0					
ANR	3044255	Identifier	pipeTable		3044096	1					
ANR	3044256	Identifier	i		3044096	1					
ANR	3044257	Identifier	pipe_descrip		3044096	1					
ANR	3044258	Argument	i		3044096	4					
ANR	3044259	Identifier	i		3044096	0					
ANR	3044260	ExpressionStatement	( * pipeTable ) [ i ] . index = - 1	2030:1:58164:58190	3044096	9	True				
ANR	3044261	AssignmentExpression	( * pipeTable ) [ i ] . index = - 1		3044096	0		=			
ANR	3044262	MemberAccess	( * pipeTable ) [ i ] . index		3044096	0					
ANR	3044263	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044264	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044265	UnaryOperator	*		3044096	0					
ANR	3044266	Identifier	pipeTable		3044096	1					
ANR	3044267	Identifier	i		3044096	1					
ANR	3044268	Identifier	index		3044096	1					
ANR	3044269	UnaryOperationExpression	- 1		3044096	1					
ANR	3044270	UnaryOperator	-		3044096	0					
ANR	3044271	PrimaryExpression	1		3044096	1					
ANR	3044272	ExpressionStatement	free ( ( * pipeTable ) [ i ] . pipe_descrip )	2031:1:58193:58229	3044096	10	True				
ANR	3044273	CallExpression	free ( ( * pipeTable ) [ i ] . pipe_descrip )		3044096	0					
ANR	3044274	Callee	free		3044096	0					
ANR	3044275	Identifier	free		3044096	0					
ANR	3044276	ArgumentList	( * pipeTable ) [ i ] . pipe_descrip		3044096	1					
ANR	3044277	Argument	( * pipeTable ) [ i ] . pipe_descrip		3044096	0					
ANR	3044278	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		3044096	0					
ANR	3044279	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044280	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044281	UnaryOperator	*		3044096	0					
ANR	3044282	Identifier	pipeTable		3044096	1					
ANR	3044283	Identifier	i		3044096	1					
ANR	3044284	Identifier	pipe_descrip		3044096	1					
ANR	3044285	ExpressionStatement	( * pipeTable ) [ i ] . pipe_descrip = NULL	2032:1:58232:58267	3044096	11	True				
ANR	3044286	AssignmentExpression	( * pipeTable ) [ i ] . pipe_descrip = NULL		3044096	0		=			
ANR	3044287	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		3044096	0					
ANR	3044288	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044289	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044290	UnaryOperator	*		3044096	0					
ANR	3044291	Identifier	pipeTable		3044096	1					
ANR	3044292	Identifier	i		3044096	1					
ANR	3044293	Identifier	pipe_descrip		3044096	1					
ANR	3044294	Identifier	NULL		3044096	1					
ANR	3044295	ExpressionStatement	free ( ( * pipeTable ) [ i ] . handler_descrip )	2033:1:58270:58309	3044096	12	True				
ANR	3044296	CallExpression	free ( ( * pipeTable ) [ i ] . handler_descrip )		3044096	0					
ANR	3044297	Callee	free		3044096	0					
ANR	3044298	Identifier	free		3044096	0					
ANR	3044299	ArgumentList	( * pipeTable ) [ i ] . handler_descrip		3044096	1					
ANR	3044300	Argument	( * pipeTable ) [ i ] . handler_descrip		3044096	0					
ANR	3044301	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		3044096	0					
ANR	3044302	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044303	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044304	UnaryOperator	*		3044096	0					
ANR	3044305	Identifier	pipeTable		3044096	1					
ANR	3044306	Identifier	i		3044096	1					
ANR	3044307	Identifier	handler_descrip		3044096	1					
ANR	3044308	ExpressionStatement	( * pipeTable ) [ i ] . handler_descrip = NULL	2034:1:58312:58350	3044096	13	True				
ANR	3044309	AssignmentExpression	( * pipeTable ) [ i ] . handler_descrip = NULL		3044096	0		=			
ANR	3044310	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		3044096	0					
ANR	3044311	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044312	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044313	UnaryOperator	*		3044096	0					
ANR	3044314	Identifier	pipeTable		3044096	1					
ANR	3044315	Identifier	i		3044096	1					
ANR	3044316	Identifier	handler_descrip		3044096	1					
ANR	3044317	Identifier	NULL		3044096	1					
ANR	3044318	ExpressionStatement	ASSERT ( ( * pipeTable ) [ i ] . pentry )	2040:1:58528:58560	3044096	14	True				
ANR	3044319	CallExpression	ASSERT ( ( * pipeTable ) [ i ] . pentry )		3044096	0					
ANR	3044320	Callee	ASSERT		3044096	0					
ANR	3044321	Identifier	ASSERT		3044096	0					
ANR	3044322	ArgumentList	( * pipeTable ) [ i ] . pentry		3044096	1					
ANR	3044323	Argument	( * pipeTable ) [ i ] . pentry		3044096	0					
ANR	3044324	MemberAccess	( * pipeTable ) [ i ] . pentry		3044096	0					
ANR	3044325	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044326	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044327	UnaryOperator	*		3044096	0					
ANR	3044328	Identifier	pipeTable		3044096	1					
ANR	3044329	Identifier	i		3044096	1					
ANR	3044330	Identifier	pentry		3044096	1					
ANR	3044331	ExpressionStatement	"InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> deallocate ) , 1L )"	2041:1:58563:58624	3044096	15	True				
ANR	3044332	CallExpression	"InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> deallocate ) , 1L )"		3044096	0					
ANR	3044333	Callee	InterlockedExchange		3044096	0					
ANR	3044334	Identifier	InterlockedExchange		3044096	0					
ANR	3044335	ArgumentList	& ( ( * pipeTable ) [ i ] . pentry -> deallocate )		3044096	1					
ANR	3044336	Argument	& ( ( * pipeTable ) [ i ] . pentry -> deallocate )		3044096	0					
ANR	3044337	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . pentry -> deallocate )		3044096	0					
ANR	3044338	UnaryOperator	&		3044096	0					
ANR	3044339	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> deallocate		3044096	1					
ANR	3044340	MemberAccess	( * pipeTable ) [ i ] . pentry		3044096	0					
ANR	3044341	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044342	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044343	UnaryOperator	*		3044096	0					
ANR	3044344	Identifier	pipeTable		3044096	1					
ANR	3044345	Identifier	i		3044096	1					
ANR	3044346	Identifier	pentry		3044096	1					
ANR	3044347	Identifier	deallocate		3044096	1					
ANR	3044348	Argument	1L		3044096	1					
ANR	3044349	PrimaryExpression	1L		3044096	0					
ANR	3044350	IfStatement	if ( ( * pipeTable ) [ i ] . pentry -> watcherEvent )		3044096	16					
ANR	3044351	Condition	( * pipeTable ) [ i ] . pentry -> watcherEvent	2042:5:58631:58666	3044096	0	True				
ANR	3044352	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> watcherEvent		3044096	0					
ANR	3044353	MemberAccess	( * pipeTable ) [ i ] . pentry		3044096	0					
ANR	3044354	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044355	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044356	UnaryOperator	*		3044096	0					
ANR	3044357	Identifier	pipeTable		3044096	1					
ANR	3044358	Identifier	i		3044096	1					
ANR	3044359	Identifier	pentry		3044096	1					
ANR	3044360	Identifier	watcherEvent		3044096	1					
ANR	3044361	CompoundStatement		50:43:1468:1468	3044096	1					
ANR	3044362	ExpressionStatement	SetEvent ( ( * pipeTable ) [ i ] . pentry -> watcherEvent )	2043:2:58673:58719	3044096	0	True				
ANR	3044363	CallExpression	SetEvent ( ( * pipeTable ) [ i ] . pentry -> watcherEvent )		3044096	0					
ANR	3044364	Callee	SetEvent		3044096	0					
ANR	3044365	Identifier	SetEvent		3044096	0					
ANR	3044366	ArgumentList	( * pipeTable ) [ i ] . pentry -> watcherEvent		3044096	1					
ANR	3044367	Argument	( * pipeTable ) [ i ] . pentry -> watcherEvent		3044096	0					
ANR	3044368	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> watcherEvent		3044096	0					
ANR	3044369	MemberAccess	( * pipeTable ) [ i ] . pentry		3044096	0					
ANR	3044370	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044371	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044372	UnaryOperator	*		3044096	0					
ANR	3044373	Identifier	pipeTable		3044096	1					
ANR	3044374	Identifier	i		3044096	1					
ANR	3044375	Identifier	pentry		3044096	1					
ANR	3044376	Identifier	watcherEvent		3044096	1					
ANR	3044377	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> pipeEnd -> cancel ( )	2049:1:58876:58917	3044096	17	True				
ANR	3044378	CallExpression	( * pipeTable ) [ i ] . pentry -> pipeEnd -> cancel ( )		3044096	0					
ANR	3044379	Callee	( * pipeTable ) [ i ] . pentry -> pipeEnd -> cancel		3044096	0					
ANR	3044380	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeEnd -> cancel		3044096	0					
ANR	3044381	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeEnd		3044096	0					
ANR	3044382	MemberAccess	( * pipeTable ) [ i ] . pentry		3044096	0					
ANR	3044383	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044384	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044385	UnaryOperator	*		3044096	0					
ANR	3044386	Identifier	pipeTable		3044096	1					
ANR	3044387	Identifier	i		3044096	1					
ANR	3044388	Identifier	pentry		3044096	1					
ANR	3044389	Identifier	pipeEnd		3044096	1					
ANR	3044390	Identifier	cancel		3044096	1					
ANR	3044391	ArgumentList			3044096	1					
ANR	3044392	IfStatement	if ( ( * pipeTable ) [ i ] . in_handler )		3044096	18					
ANR	3044393	Condition	( * pipeTable ) [ i ] . in_handler	2051:5:58925:58950	3044096	0	True				
ANR	3044394	MemberAccess	( * pipeTable ) [ i ] . in_handler		3044096	0					
ANR	3044395	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044396	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044397	UnaryOperator	*		3044096	0					
ANR	3044398	Identifier	pipeTable		3044096	1					
ANR	3044399	Identifier	i		3044096	1					
ANR	3044400	Identifier	in_handler		3044096	1					
ANR	3044401	CompoundStatement		59:33:1752:1752	3044096	1					
ANR	3044402	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> pipeEnd = NULL	2057:2:59241:59279	3044096	0	True				
ANR	3044403	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> pipeEnd = NULL		3044096	0		=			
ANR	3044404	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeEnd		3044096	0					
ANR	3044405	MemberAccess	( * pipeTable ) [ i ] . pentry		3044096	0					
ANR	3044406	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044407	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044408	UnaryOperator	*		3044096	0					
ANR	3044409	Identifier	pipeTable		3044096	1					
ANR	3044410	Identifier	i		3044096	1					
ANR	3044411	Identifier	pentry		3044096	1					
ANR	3044412	Identifier	pipeEnd		3044096	1					
ANR	3044413	Identifier	NULL		3044096	1					
ANR	3044414	ElseStatement	else		3044096	0					
ANR	3044415	CompoundStatement		67:6:2089:2089	3044096	0					
ANR	3044416	Statement	delete	2062:2:59374:59379	3044096	0	True				
ANR	3044417	ExpressionStatement	( * pipeTable ) [ i ] . pentry	2062:9:59381:59403	3044096	1	True				
ANR	3044418	MemberAccess	( * pipeTable ) [ i ] . pentry		3044096	0					
ANR	3044419	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044420	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044421	UnaryOperator	*		3044096	0					
ANR	3044422	Identifier	pipeTable		3044096	1					
ANR	3044423	Identifier	i		3044096	1					
ANR	3044424	Identifier	pentry		3044096	1					
ANR	3044425	ExpressionStatement	( * pipeTable ) [ i ] . pentry = NULL	2065:1:59416:59445	3044096	19	True				
ANR	3044426	AssignmentExpression	( * pipeTable ) [ i ] . pentry = NULL		3044096	0		=			
ANR	3044427	MemberAccess	( * pipeTable ) [ i ] . pentry		3044096	0					
ANR	3044428	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044429	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044430	UnaryOperator	*		3044096	0					
ANR	3044431	Identifier	pipeTable		3044096	1					
ANR	3044432	Identifier	i		3044096	1					
ANR	3044433	Identifier	pentry		3044096	1					
ANR	3044434	Identifier	NULL		3044096	1					
ANR	3044435	IfStatement	if ( i < nPipe - 1 )		3044096	20					
ANR	3044436	Condition	i < nPipe - 1	2066:6:59453:59465	3044096	0	True				
ANR	3044437	RelationalExpression	i < nPipe - 1		3044096	0		<			
ANR	3044438	Identifier	i		3044096	0					
ANR	3044439	AdditiveExpression	nPipe - 1		3044096	1		-			
ANR	3044440	Identifier	nPipe		3044096	0					
ANR	3044441	PrimaryExpression	1		3044096	1					
ANR	3044442	CompoundStatement		74:22:2268:2268	3044096	1					
ANR	3044443	ExpressionStatement	( * pipeTable ) [ i ] = ( * pipeTable ) [ nPipe - 1 ]	2068:2:59547:59588	3044096	0	True				
ANR	3044444	AssignmentExpression	( * pipeTable ) [ i ] = ( * pipeTable ) [ nPipe - 1 ]		3044096	0		=			
ANR	3044445	ArrayIndexing	( * pipeTable ) [ i ]		3044096	0					
ANR	3044446	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044447	UnaryOperator	*		3044096	0					
ANR	3044448	Identifier	pipeTable		3044096	1					
ANR	3044449	Identifier	i		3044096	1					
ANR	3044450	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		3044096	1					
ANR	3044451	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044452	UnaryOperator	*		3044096	0					
ANR	3044453	Identifier	pipeTable		3044096	1					
ANR	3044454	AdditiveExpression	nPipe - 1		3044096	1		-			
ANR	3044455	Identifier	nPipe		3044096	0					
ANR	3044456	PrimaryExpression	1		3044096	1					
ANR	3044457	ExpressionStatement	( * pipeTable ) [ nPipe - 1 ] . index = - 1	2069:2:59592:59626	3044096	1	True				
ANR	3044458	AssignmentExpression	( * pipeTable ) [ nPipe - 1 ] . index = - 1		3044096	0		=			
ANR	3044459	MemberAccess	( * pipeTable ) [ nPipe - 1 ] . index		3044096	0					
ANR	3044460	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		3044096	0					
ANR	3044461	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044462	UnaryOperator	*		3044096	0					
ANR	3044463	Identifier	pipeTable		3044096	1					
ANR	3044464	AdditiveExpression	nPipe - 1		3044096	1		-			
ANR	3044465	Identifier	nPipe		3044096	0					
ANR	3044466	PrimaryExpression	1		3044096	1					
ANR	3044467	Identifier	index		3044096	1					
ANR	3044468	UnaryOperationExpression	- 1		3044096	1					
ANR	3044469	UnaryOperator	-		3044096	0					
ANR	3044470	PrimaryExpression	1		3044096	1					
ANR	3044471	ExpressionStatement	( * pipeTable ) [ nPipe - 1 ] . pipe_descrip = NULL	2070:2:59630:59673	3044096	2	True				
ANR	3044472	AssignmentExpression	( * pipeTable ) [ nPipe - 1 ] . pipe_descrip = NULL		3044096	0		=			
ANR	3044473	MemberAccess	( * pipeTable ) [ nPipe - 1 ] . pipe_descrip		3044096	0					
ANR	3044474	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		3044096	0					
ANR	3044475	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044476	UnaryOperator	*		3044096	0					
ANR	3044477	Identifier	pipeTable		3044096	1					
ANR	3044478	AdditiveExpression	nPipe - 1		3044096	1		-			
ANR	3044479	Identifier	nPipe		3044096	0					
ANR	3044480	PrimaryExpression	1		3044096	1					
ANR	3044481	Identifier	pipe_descrip		3044096	1					
ANR	3044482	Identifier	NULL		3044096	1					
ANR	3044483	ExpressionStatement	( * pipeTable ) [ nPipe - 1 ] . handler_descrip = NULL	2071:2:59677:59723	3044096	3	True				
ANR	3044484	AssignmentExpression	( * pipeTable ) [ nPipe - 1 ] . handler_descrip = NULL		3044096	0		=			
ANR	3044485	MemberAccess	( * pipeTable ) [ nPipe - 1 ] . handler_descrip		3044096	0					
ANR	3044486	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		3044096	0					
ANR	3044487	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044488	UnaryOperator	*		3044096	0					
ANR	3044489	Identifier	pipeTable		3044096	1					
ANR	3044490	AdditiveExpression	nPipe - 1		3044096	1		-			
ANR	3044491	Identifier	nPipe		3044096	0					
ANR	3044492	PrimaryExpression	1		3044096	1					
ANR	3044493	Identifier	handler_descrip		3044096	1					
ANR	3044494	Identifier	NULL		3044096	1					
ANR	3044495	ExpressionStatement	( * pipeTable ) [ nPipe - 1 ] . pentry = NULL	2072:2:59727:59764	3044096	4	True				
ANR	3044496	AssignmentExpression	( * pipeTable ) [ nPipe - 1 ] . pentry = NULL		3044096	0		=			
ANR	3044497	MemberAccess	( * pipeTable ) [ nPipe - 1 ] . pentry		3044096	0					
ANR	3044498	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		3044096	0					
ANR	3044499	UnaryOperationExpression	* pipeTable		3044096	0					
ANR	3044500	UnaryOperator	*		3044096	0					
ANR	3044501	Identifier	pipeTable		3044096	1					
ANR	3044502	AdditiveExpression	nPipe - 1		3044096	1		-			
ANR	3044503	Identifier	nPipe		3044096	0					
ANR	3044504	PrimaryExpression	1		3044096	1					
ANR	3044505	Identifier	pentry		3044096	1					
ANR	3044506	Identifier	NULL		3044096	1					
ANR	3044507	ExpressionStatement	nPipe --	2074:1:59770:59777	3044096	21	True				
ANR	3044508	PostIncDecOperationExpression	nPipe --		3044096	0					
ANR	3044509	Identifier	nPipe		3044096	0					
ANR	3044510	IncDec	--		3044096	1					
ANR	3044511	ExpressionStatement	Wake_up_select ( )	2080:1:59958:59974	3044096	22	True				
ANR	3044512	CallExpression	Wake_up_select ( )		3044096	0					
ANR	3044513	Callee	Wake_up_select		3044096	0					
ANR	3044514	Identifier	Wake_up_select		3044096	0					
ANR	3044515	ArgumentList			3044096	1					
ANR	3044516	ReturnStatement	return TRUE ;	2083:1:59985:59996	3044096	23	True				
ANR	3044517	Identifier	TRUE		3044096	0					
ANR	3044518	ReturnType	int		3044096	1					
ANR	3044519	Identifier	DaemonCore :: Cancel_Pipe		3044096	2					
ANR	3044520	ParameterList	int pipe_end		3044096	3					
ANR	3044521	Parameter	int pipe_end	1992:29:57185:57196	3044096	0	True				
ANR	3044522	ParameterType	int		3044096	0					
ANR	3044523	Identifier	pipe_end		3044096	1					
ANR	3044524	CFGEntryNode	ENTRY		3044096		True				
ANR	3044525	CFGExitNode	EXIT		3044096		True				
ANR	3044526	Symbol	curr_regdataptr		3044096						
ANR	3044527	Symbol	pipe_end		3044096						
ANR	3044528	Symbol	* * pipeTable		3044096						
ANR	3044529	Symbol	( * pipeTable ) [ i ] . pentry -> watcherEvent		3044096						
ANR	3044530	Symbol	nPipe		3044096						
ANR	3044531	Symbol	curr_dataptr		3044096						
ANR	3044532	Symbol	( * pipeTable ) [ i ] . handler_descrip		3044096						
ANR	3044533	Symbol	( * pipeTable ) [ j ] . index		3044096						
ANR	3044534	Symbol	( * pipeTable ) [ i ] . pentry -> pipeEnd		3044096						
ANR	3044535	Symbol	( * pipeTable ) [ nPipe - 1 ] . handler_descrip		3044096						
ANR	3044536	Symbol	* * * pipeTable		3044096						
ANR	3044537	Symbol	* nPipe		3044096						
ANR	3044538	Symbol	( * pipeTable ) [ nPipe - 1 ] . pentry		3044096						
ANR	3044539	Symbol	( * pipeTable ) [ i ] . pipe_descrip		3044096						
ANR	3044540	Symbol	PIPE_INDEX_OFFSET		3044096						
ANR	3044541	Symbol	( * pipeTable ) [ nPipe - 1 ] . index		3044096						
ANR	3044542	Symbol	* * i		3044096						
ANR	3044543	Symbol	NULL		3044096						
ANR	3044544	Symbol	D_DAEMONCORE		3044096						
ANR	3044545	Symbol	( * pipeTable ) [ nPipe - 1 ] . pipe_descrip		3044096						
ANR	3044546	Symbol	D_ALWAYS		3044096						
ANR	3044547	Symbol	index		3044096						
ANR	3044548	Symbol	i		3044096						
ANR	3044549	Symbol	& ( * pipeTable ) [ i ] . pentry -> deallocate		3044096						
ANR	3044550	Symbol	TRUE		3044096						
ANR	3044551	Symbol	j		3044096						
ANR	3044552	Symbol	* pipeTable		3044096						
ANR	3044553	Symbol	pipeTable		3044096						
ANR	3044554	Symbol	& ( * pipeTable ) [ i ] . data_ptr		3044096						
ANR	3044555	Symbol	( * pipeTable ) [ i ] . index		3044096						
ANR	3044556	Symbol	* i		3044096						
ANR	3044557	Symbol	* j		3044096						
ANR	3044558	Symbol	( * pipeTable ) [ i ] . pentry		3044096						
ANR	3044559	Symbol	FALSE		3044096						
ANR	3044560	Symbol	( * pipeTable ) [ i ] . in_handler		3044096						
ANR	3044561	Symbol	* ( * pipeTable ) [ i ] . pentry		3044096						
ANR	3044562	Function	pipe_close_thread	2091:0:60277:60487							
ANR	3044563	FunctionDef	pipe_close_thread (void * arg)		3044562	0					
ANR	3044564	CompoundStatement		2092:0:60325:60487	3044562	0					
ANR	3044565	IdentifierDeclStatement	WritePipeEnd * wpe = ( WritePipeEnd * ) arg ;	2093:1:60328:60366	3044562	0	True				
ANR	3044566	IdentifierDecl	* wpe = ( WritePipeEnd * ) arg		3044562	0					
ANR	3044567	IdentifierDeclType	WritePipeEnd *		3044562	0					
ANR	3044568	Identifier	wpe		3044562	1					
ANR	3044569	AssignmentExpression	* wpe = ( WritePipeEnd * ) arg		3044562	2		=			
ANR	3044570	Identifier	wpe		3044562	0					
ANR	3044571	CastExpression	( WritePipeEnd * ) arg		3044562	1					
ANR	3044572	CastTarget	WritePipeEnd *		3044562	0					
ANR	3044573	Identifier	arg		3044562	1					
ANR	3044574	ExpressionStatement	wpe -> complete_async_write ( false )	2094:1:60369:60401	3044562	1	True				
ANR	3044575	CallExpression	wpe -> complete_async_write ( false )		3044562	0					
ANR	3044576	Callee	wpe -> complete_async_write		3044562	0					
ANR	3044577	PtrMemberAccess	wpe -> complete_async_write		3044562	0					
ANR	3044578	Identifier	wpe		3044562	0					
ANR	3044579	Identifier	complete_async_write		3044562	1					
ANR	3044580	ArgumentList	false		3044562	1					
ANR	3044581	Argument	false		3044562	0					
ANR	3044582	Identifier	false		3044562	0					
ANR	3044583	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""finally closing pipe %p\\n"" , wpe )"	2096:1:60405:60460	3044562	2	True				
ANR	3044584	CallExpression	"dprintf ( D_DAEMONCORE , ""finally closing pipe %p\\n"" , wpe )"		3044562	0					
ANR	3044585	Callee	dprintf		3044562	0					
ANR	3044586	Identifier	dprintf		3044562	0					
ANR	3044587	ArgumentList	D_DAEMONCORE		3044562	1					
ANR	3044588	Argument	D_DAEMONCORE		3044562	0					
ANR	3044589	Identifier	D_DAEMONCORE		3044562	0					
ANR	3044590	Argument	"""finally closing pipe %p\\n"""		3044562	1					
ANR	3044591	PrimaryExpression	"""finally closing pipe %p\\n"""		3044562	0					
ANR	3044592	Argument	wpe		3044562	2					
ANR	3044593	Identifier	wpe		3044562	0					
ANR	3044594	Statement	delete	2097:1:60463:60468	3044562	3	True				
ANR	3044595	ExpressionStatement	wpe	2097:8:60470:60473	3044562	4	True				
ANR	3044596	Identifier	wpe		3044562	0					
ANR	3044597	ReturnStatement	return 0 ;	2099:1:60477:60485	3044562	5	True				
ANR	3044598	PrimaryExpression	0		3044562	0					
ANR	3044599	ReturnType	unsigned __stdcall		3044562	1					
ANR	3044600	Identifier	pipe_close_thread		3044562	2					
ANR	3044601	ParameterList	void * arg		3044562	3					
ANR	3044602	Parameter	void * arg	2091:37:60314:60322	3044562	0	True				
ANR	3044603	ParameterType	void *		3044562	0					
ANR	3044604	Identifier	arg		3044562	1					
ANR	3044605	CFGEntryNode	ENTRY		3044562		True				
ANR	3044606	CFGExitNode	EXIT		3044562		True				
ANR	3044607	Symbol	D_DAEMONCORE		3044562						
ANR	3044608	Symbol	arg		3044562						
ANR	3044609	Symbol	false		3044562						
ANR	3044610	Symbol	wpe		3044562						
ANR	3044611	Function	DaemonCore :: Close_Pipe	2103:0:60497:62218							
ANR	3044612	FunctionDef	DaemonCore :: Close_Pipe (int pipe_end)		3044611	0					
ANR	3044613	CompoundStatement		2104:0:60540:62218	3044611	0					
ANR	3044614	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	2105:1:60543:60583	3044611	0	True				
ANR	3044615	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		3044611	0					
ANR	3044616	IdentifierDeclType	int		3044611	0					
ANR	3044617	Identifier	index		3044611	1					
ANR	3044618	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		3044611	2		=			
ANR	3044619	Identifier	index		3044611	0					
ANR	3044620	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		3044611	1		-			
ANR	3044621	Identifier	pipe_end		3044611	0					
ANR	3044622	Identifier	PIPE_INDEX_OFFSET		3044611	1					
ANR	3044623	IfStatement	if ( pipeHandleTableLookup ( index ) == FALSE )		3044611	1					
ANR	3044624	Condition	pipeHandleTableLookup ( index ) == FALSE	2106:5:60590:60626	3044611	0	True				
ANR	3044625	EqualityExpression	pipeHandleTableLookup ( index ) == FALSE		3044611	0		==			
ANR	3044626	CallExpression	pipeHandleTableLookup ( index )		3044611	0					
ANR	3044627	Callee	pipeHandleTableLookup		3044611	0					
ANR	3044628	Identifier	pipeHandleTableLookup		3044611	0					
ANR	3044629	ArgumentList	index		3044611	1					
ANR	3044630	Argument	index		3044611	0					
ANR	3044631	Identifier	index		3044611	0					
ANR	3044632	Identifier	FALSE		3044611	1					
ANR	3044633	CompoundStatement		3:44:88:88	3044611	1					
ANR	3044634	ExpressionStatement	"dprintf ( D_ALWAYS , ""Close_Pipe on invalid pipe end: %d\\n"" , pipe_end )"	2107:2:60633:60700	3044611	0	True				
ANR	3044635	CallExpression	"dprintf ( D_ALWAYS , ""Close_Pipe on invalid pipe end: %d\\n"" , pipe_end )"		3044611	0					
ANR	3044636	Callee	dprintf		3044611	0					
ANR	3044637	Identifier	dprintf		3044611	0					
ANR	3044638	ArgumentList	D_ALWAYS		3044611	1					
ANR	3044639	Argument	D_ALWAYS		3044611	0					
ANR	3044640	Identifier	D_ALWAYS		3044611	0					
ANR	3044641	Argument	"""Close_Pipe on invalid pipe end: %d\\n"""		3044611	1					
ANR	3044642	PrimaryExpression	"""Close_Pipe on invalid pipe end: %d\\n"""		3044611	0					
ANR	3044643	Argument	pipe_end		3044611	2					
ANR	3044644	Identifier	pipe_end		3044611	0					
ANR	3044645	ExpressionStatement	"EXCEPT ( ""Close_Pipe error"" )"	2108:2:60704:60730	3044611	1	True				
ANR	3044646	CallExpression	"EXCEPT ( ""Close_Pipe error"" )"		3044611	0					
ANR	3044647	Callee	EXCEPT		3044611	0					
ANR	3044648	Identifier	EXCEPT		3044611	0					
ANR	3044649	ArgumentList	"""Close_Pipe error"""		3044611	1					
ANR	3044650	Argument	"""Close_Pipe error"""		3044611	0					
ANR	3044651	PrimaryExpression	"""Close_Pipe error"""		3044611	0					
ANR	3044652	IdentifierDeclStatement	"int i , j ;"	2112:1:60781:60788	3044611	2	True				
ANR	3044653	IdentifierDecl	i		3044611	0					
ANR	3044654	IdentifierDeclType	int		3044611	0					
ANR	3044655	Identifier	i		3044611	1					
ANR	3044656	IdentifierDecl	j		3044611	1					
ANR	3044657	IdentifierDeclType	int		3044611	0					
ANR	3044658	Identifier	j		3044611	1					
ANR	3044659	ExpressionStatement	i = - 1	2113:1:60791:60797	3044611	3	True				
ANR	3044660	AssignmentExpression	i = - 1		3044611	0		=			
ANR	3044661	Identifier	i		3044611	0					
ANR	3044662	UnaryOperationExpression	- 1		3044611	1					
ANR	3044663	UnaryOperator	-		3044611	0					
ANR	3044664	PrimaryExpression	1		3044611	1					
ANR	3044665	ForStatement	for ( j = 0 ; j < nPipe ; j ++ )		3044611	4					
ANR	3044666	ForInit	j = 0 ;	2114:6:60805:60808	3044611	0	True				
ANR	3044667	AssignmentExpression	j = 0		3044611	0		=			
ANR	3044668	Identifier	j		3044611	0					
ANR	3044669	PrimaryExpression	0		3044611	1					
ANR	3044670	Condition	j < nPipe	2114:10:60809:60815	3044611	1	True				
ANR	3044671	RelationalExpression	j < nPipe		3044611	0		<			
ANR	3044672	Identifier	j		3044611	0					
ANR	3044673	Identifier	nPipe		3044611	1					
ANR	3044674	PostIncDecOperationExpression	j ++	2114:18:60817:60819	3044611	2	True				
ANR	3044675	Identifier	j		3044611	0					
ANR	3044676	IncDec	++		3044611	1					
ANR	3044677	CompoundStatement		11:23:281:281	3044611	3					
ANR	3044678	IfStatement	if ( ( * pipeTable ) [ j ] . index == index )		3044611	0					
ANR	3044679	Condition	( * pipeTable ) [ j ] . index == index	2115:7:60867:60896	3044611	0	True				
ANR	3044680	EqualityExpression	( * pipeTable ) [ j ] . index == index		3044611	0		==			
ANR	3044681	MemberAccess	( * pipeTable ) [ j ] . index		3044611	0					
ANR	3044682	ArrayIndexing	( * pipeTable ) [ j ]		3044611	0					
ANR	3044683	UnaryOperationExpression	* pipeTable		3044611	0					
ANR	3044684	UnaryOperator	*		3044611	0					
ANR	3044685	Identifier	pipeTable		3044611	1					
ANR	3044686	Identifier	j		3044611	1					
ANR	3044687	Identifier	index		3044611	1					
ANR	3044688	Identifier	index		3044611	1					
ANR	3044689	CompoundStatement		12:40:359:359	3044611	1					
ANR	3044690	ExpressionStatement	i = j	2116:3:60905:60910	3044611	0	True				
ANR	3044691	AssignmentExpression	i = j		3044611	0		=			
ANR	3044692	Identifier	i		3044611	0					
ANR	3044693	Identifier	j		3044611	1					
ANR	3044694	BreakStatement	break ;	2117:3:60915:60920	3044611	1	True				
ANR	3044695	IfStatement	if ( i != - 1 )		3044611	5					
ANR	3044696	Condition	i != - 1	2120:6:60935:60941	3044611	0	True				
ANR	3044697	EqualityExpression	i != - 1		3044611	0		!=			
ANR	3044698	Identifier	i		3044611	0					
ANR	3044699	UnaryOperationExpression	- 1		3044611	1					
ANR	3044700	UnaryOperator	-		3044611	0					
ANR	3044701	PrimaryExpression	1		3044611	1					
ANR	3044702	CompoundStatement		19:2:469:503	3044611	1					
ANR	3044703	IdentifierDeclStatement	int result = Cancel_Pipe ( pipe_end ) ;	2122:2:61010:61044	3044611	0	True				
ANR	3044704	IdentifierDecl	result = Cancel_Pipe ( pipe_end )		3044611	0					
ANR	3044705	IdentifierDeclType	int		3044611	0					
ANR	3044706	Identifier	result		3044611	1					
ANR	3044707	AssignmentExpression	result = Cancel_Pipe ( pipe_end )		3044611	2		=			
ANR	3044708	Identifier	result		3044611	0					
ANR	3044709	CallExpression	Cancel_Pipe ( pipe_end )		3044611	1					
ANR	3044710	Callee	Cancel_Pipe		3044611	0					
ANR	3044711	Identifier	Cancel_Pipe		3044611	0					
ANR	3044712	ArgumentList	pipe_end		3044611	1					
ANR	3044713	Argument	pipe_end		3044611	0					
ANR	3044714	Identifier	pipe_end		3044611	0					
ANR	3044715	ExpressionStatement	ASSERT ( result == TRUE )	2125:2:61184:61208	3044611	1	True				
ANR	3044716	CallExpression	ASSERT ( result == TRUE )		3044611	0					
ANR	3044717	Callee	ASSERT		3044611	0					
ANR	3044718	Identifier	ASSERT		3044611	0					
ANR	3044719	ArgumentList	result == TRUE		3044611	1					
ANR	3044720	Argument	result == TRUE		3044611	0					
ANR	3044721	EqualityExpression	result == TRUE		3044611	0		==			
ANR	3044722	Identifier	result		3044611	0					
ANR	3044723	Identifier	TRUE		3044611	1					
ANR	3044724	IdentifierDeclStatement	int retval = TRUE ;	2129:1:61240:61257	3044611	6	True				
ANR	3044725	IdentifierDecl	retval = TRUE		3044611	0					
ANR	3044726	IdentifierDeclType	int		3044611	0					
ANR	3044727	Identifier	retval		3044611	1					
ANR	3044728	AssignmentExpression	retval = TRUE		3044611	2		=			
ANR	3044729	Identifier	TRUE		3044611	0					
ANR	3044730	Identifier	TRUE		3044611	1					
ANR	3044731	Statement	WritePipeEnd	2131:1:61279:61290	3044611	7	True				
ANR	3044732	Statement	*	2131:13:61291:61291	3044611	8	True				
ANR	3044733	Statement	wpe	2131:15:61293:61295	3044611	9	True				
ANR	3044734	Statement	=	2131:19:61297:61297	3044611	10	True				
ANR	3044735	Statement	dynamic_cast	2131:21:61299:61310	3044611	11	True				
ANR	3044736	Statement	<	2131:33:61311:61311	3044611	12	True				
ANR	3044737	Statement	WritePipeEnd	2131:34:61312:61323	3044611	13	True				
ANR	3044738	Statement	*	2131:46:61324:61324	3044611	14	True				
ANR	3044739	Statement	>	2131:47:61325:61325	3044611	15	True				
ANR	3044740	ExpressionStatement	( * pipeHandleTable ) [ index ]	2131:48:61326:61353	3044611	16	True				
ANR	3044741	ArrayIndexing	( * pipeHandleTable ) [ index ]		3044611	0					
ANR	3044742	UnaryOperationExpression	* pipeHandleTable		3044611	0					
ANR	3044743	UnaryOperator	*		3044611	0					
ANR	3044744	Identifier	pipeHandleTable		3044611	1					
ANR	3044745	Identifier	index		3044611	1					
ANR	3044746	IfStatement	if ( wpe && wpe -> needs_delayed_close ( ) )		3044611	17					
ANR	3044747	Condition	wpe && wpe -> needs_delayed_close ( )	2132:5:61360:61392	3044611	0	True				
ANR	3044748	AndExpression	wpe && wpe -> needs_delayed_close ( )		3044611	0		&&			
ANR	3044749	Identifier	wpe		3044611	0					
ANR	3044750	CallExpression	wpe -> needs_delayed_close ( )		3044611	1					
ANR	3044751	Callee	wpe -> needs_delayed_close		3044611	0					
ANR	3044752	PtrMemberAccess	wpe -> needs_delayed_close		3044611	0					
ANR	3044753	Identifier	wpe		3044611	0					
ANR	3044754	Identifier	needs_delayed_close		3044611	1					
ANR	3044755	ArgumentList			3044611	1					
ANR	3044756	CompoundStatement		29:40:854:854	3044611	1					
ANR	3044757	ExpressionStatement	"CloseHandle ( ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL ) )"	2136:2:61582:61687	3044611	0	True				
ANR	3044758	CallExpression	"CloseHandle ( ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL ) )"		3044611	0					
ANR	3044759	Callee	CloseHandle		3044611	0					
ANR	3044760	Identifier	CloseHandle		3044611	0					
ANR	3044761	ArgumentList	"( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL )"		3044611	1					
ANR	3044762	Argument	"( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL )"		3044611	0					
ANR	3044763	CastExpression	"( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL )"		3044611	0					
ANR	3044764	CastTarget	HANDLE		3044611	0					
ANR	3044765	CallExpression	"_beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL )"		3044611	1					
ANR	3044766	Callee	_beginthreadex		3044611	0					
ANR	3044767	Identifier	_beginthreadex		3044611	0					
ANR	3044768	ArgumentList	NULL		3044611	1					
ANR	3044769	Argument	NULL		3044611	0					
ANR	3044770	Identifier	NULL		3044611	0					
ANR	3044771	Argument	0		3044611	1					
ANR	3044772	PrimaryExpression	0		3044611	0					
ANR	3044773	Argument	pipe_close_thread		3044611	2					
ANR	3044774	Identifier	pipe_close_thread		3044611	0					
ANR	3044775	Argument	wpe		3044611	3					
ANR	3044776	Identifier	wpe		3044611	0					
ANR	3044777	Argument	0		3044611	4					
ANR	3044778	PrimaryExpression	0		3044611	0					
ANR	3044779	Argument	NULL		3044611	5					
ANR	3044780	Identifier	NULL		3044611	0					
ANR	3044781	ElseStatement	else		3044611	0					
ANR	3044782	CompoundStatement		37:6:1157:1157	3044611	0					
ANR	3044783	Statement	delete	2143:2:61784:61789	3044611	0	True				
ANR	3044784	ExpressionStatement	( * pipeHandleTable ) [ index ]	2143:9:61791:61816	3044611	1	True				
ANR	3044785	ArrayIndexing	( * pipeHandleTable ) [ index ]		3044611	0					
ANR	3044786	UnaryOperationExpression	* pipeHandleTable		3044611	0					
ANR	3044787	UnaryOperator	*		3044611	0					
ANR	3044788	Identifier	pipeHandleTable		3044611	1					
ANR	3044789	Identifier	index		3044611	1					
ANR	3044790	ExpressionStatement	pipeHandleTableRemove ( index )	2155:1:62067:62095	3044611	18	True				
ANR	3044791	CallExpression	pipeHandleTableRemove ( index )		3044611	0					
ANR	3044792	Callee	pipeHandleTableRemove		3044611	0					
ANR	3044793	Identifier	pipeHandleTableRemove		3044611	0					
ANR	3044794	ArgumentList	index		3044611	1					
ANR	3044795	Argument	index		3044611	0					
ANR	3044796	Identifier	index		3044611	0					
ANR	3044797	IfStatement	if ( retval == TRUE )		3044611	19					
ANR	3044798	Condition	retval == TRUE	2157:5:62103:62116	3044611	0	True				
ANR	3044799	EqualityExpression	retval == TRUE		3044611	0		==			
ANR	3044800	Identifier	retval		3044611	0					
ANR	3044801	Identifier	TRUE		3044611	1					
ANR	3044802	CompoundStatement		54:21:1578:1578	3044611	1					
ANR	3044803	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Close_Pipe(pipe_end=%d) succeeded\\n"" , pipe_end )"	2158:2:62123:62196	3044611	0	True				
ANR	3044804	CallExpression	"dprintf ( D_DAEMONCORE , ""Close_Pipe(pipe_end=%d) succeeded\\n"" , pipe_end )"		3044611	0					
ANR	3044805	Callee	dprintf		3044611	0					
ANR	3044806	Identifier	dprintf		3044611	0					
ANR	3044807	ArgumentList	D_DAEMONCORE		3044611	1					
ANR	3044808	Argument	D_DAEMONCORE		3044611	0					
ANR	3044809	Identifier	D_DAEMONCORE		3044611	0					
ANR	3044810	Argument	"""Close_Pipe(pipe_end=%d) succeeded\\n"""		3044611	1					
ANR	3044811	PrimaryExpression	"""Close_Pipe(pipe_end=%d) succeeded\\n"""		3044611	0					
ANR	3044812	Argument	pipe_end		3044611	2					
ANR	3044813	Identifier	pipe_end		3044611	0					
ANR	3044814	ReturnStatement	return retval ;	2162:1:62203:62216	3044611	20	True				
ANR	3044815	Identifier	retval		3044611	0					
ANR	3044816	ReturnType	int		3044611	1					
ANR	3044817	Identifier	DaemonCore :: Close_Pipe		3044611	2					
ANR	3044818	ParameterList	int pipe_end		3044611	3					
ANR	3044819	Parameter	int pipe_end	2103:28:60525:60536	3044611	0	True				
ANR	3044820	ParameterType	int		3044611	0					
ANR	3044821	Identifier	pipe_end		3044611	1					
ANR	3044822	CFGEntryNode	ENTRY		3044611		True				
ANR	3044823	CFGExitNode	EXIT		3044611		True				
ANR	3044824	Symbol	pipe_end		3044611						
ANR	3044825	Symbol	* pipeHandleTable		3044611						
ANR	3044826	Symbol	* * pipeTable		3044611						
ANR	3044827	Symbol	nPipe		3044611						
ANR	3044828	Symbol	_beginthreadex		3044611						
ANR	3044829	Symbol	pipeHandleTableLookup		3044611						
ANR	3044830	Symbol	pipe_close_thread		3044611						
ANR	3044831	Symbol	( * pipeTable ) [ j ] . index		3044611						
ANR	3044832	Symbol	result		3044611						
ANR	3044833	Symbol	pipeHandleTable		3044611						
ANR	3044834	Symbol	* wpe		3044611						
ANR	3044835	Symbol	PIPE_INDEX_OFFSET		3044611						
ANR	3044836	Symbol	NULL		3044611						
ANR	3044837	Symbol	D_DAEMONCORE		3044611						
ANR	3044838	Symbol	D_ALWAYS		3044611						
ANR	3044839	Symbol	wpe -> needs_delayed_close		3044611						
ANR	3044840	Symbol	index		3044611						
ANR	3044841	Symbol	i		3044611						
ANR	3044842	Symbol	TRUE		3044611						
ANR	3044843	Symbol	j		3044611						
ANR	3044844	Symbol	* pipeTable		3044611						
ANR	3044845	Symbol	pipeTable		3044611						
ANR	3044846	Symbol	wpe		3044611						
ANR	3044847	Symbol	retval		3044611						
ANR	3044848	Symbol	* j		3044611						
ANR	3044849	Symbol	FALSE		3044611						
ANR	3044850	Symbol	Cancel_Pipe		3044611						
ANR	3044851	Function	DaemonCore :: Cancel_And_Close_All_Pipes	2166:0:62222:62697							
ANR	3044852	FunctionDef	DaemonCore :: Cancel_And_Close_All_Pipes ()		3044851	0					
ANR	3044853	CompoundStatement		2168:0:62271:62697	3044851	0					
ANR	3044854	IdentifierDeclStatement	int i = 0 ;	2171:1:62396:62405	3044851	0	True				
ANR	3044855	IdentifierDecl	i = 0		3044851	0					
ANR	3044856	IdentifierDeclType	int		3044851	0					
ANR	3044857	Identifier	i		3044851	1					
ANR	3044858	AssignmentExpression	i = 0		3044851	2		=			
ANR	3044859	Identifier	i		3044851	0					
ANR	3044860	PrimaryExpression	0		3044851	1					
ANR	3044861	WhileStatement	while ( nPipe > 0 )		3044851	1					
ANR	3044862	Condition	nPipe > 0	2173:9:62417:62425	3044851	0	True				
ANR	3044863	RelationalExpression	nPipe > 0		3044851	0		>			
ANR	3044864	Identifier	nPipe		3044851	0					
ANR	3044865	PrimaryExpression	0		3044851	1					
ANR	3044866	CompoundStatement		6:21:157:157	3044851	1					
ANR	3044867	IfStatement	if ( ( * pipeTable ) [ 0 ] . index != - 1 )		3044851	0					
ANR	3044868	Condition	( * pipeTable ) [ 0 ] . index != - 1	2174:7:62438:62464	3044851	0	True				
ANR	3044869	EqualityExpression	( * pipeTable ) [ 0 ] . index != - 1		3044851	0		!=			
ANR	3044870	MemberAccess	( * pipeTable ) [ 0 ] . index		3044851	0					
ANR	3044871	ArrayIndexing	( * pipeTable ) [ 0 ]		3044851	0					
ANR	3044872	UnaryOperationExpression	* pipeTable		3044851	0					
ANR	3044873	UnaryOperator	*		3044851	0					
ANR	3044874	Identifier	pipeTable		3044851	1					
ANR	3044875	PrimaryExpression	0		3044851	1					
ANR	3044876	Identifier	index		3044851	1					
ANR	3044877	UnaryOperationExpression	- 1		3044851	1					
ANR	3044878	UnaryOperator	-		3044851	0					
ANR	3044879	PrimaryExpression	1		3044851	1					
ANR	3044880	CompoundStatement		7:37:196:196	3044851	1					
ANR	3044881	ExpressionStatement	Close_Pipe ( ( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET )	2178:3:62613:62668	3044851	0	True				
ANR	3044882	CallExpression	Close_Pipe ( ( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET )		3044851	0					
ANR	3044883	Callee	Close_Pipe		3044851	0					
ANR	3044884	Identifier	Close_Pipe		3044851	0					
ANR	3044885	ArgumentList	( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET		3044851	1					
ANR	3044886	Argument	( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET		3044851	0					
ANR	3044887	AdditiveExpression	( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET		3044851	0		+			
ANR	3044888	MemberAccess	( * pipeTable ) [ 0 ] . index		3044851	0					
ANR	3044889	ArrayIndexing	( * pipeTable ) [ 0 ]		3044851	0					
ANR	3044890	UnaryOperationExpression	* pipeTable		3044851	0					
ANR	3044891	UnaryOperator	*		3044851	0					
ANR	3044892	Identifier	pipeTable		3044851	1					
ANR	3044893	PrimaryExpression	0		3044851	1					
ANR	3044894	Identifier	index		3044851	1					
ANR	3044895	Identifier	PIPE_INDEX_OFFSET		3044851	1					
ANR	3044896	ExpressionStatement	i ++	2179:3:62673:62676	3044851	1	True				
ANR	3044897	PostIncDecOperationExpression	i ++		3044851	0					
ANR	3044898	Identifier	i		3044851	0					
ANR	3044899	IncDec	++		3044851	1					
ANR	3044900	ReturnStatement	return i ;	2183:1:62687:62695	3044851	2	True				
ANR	3044901	Identifier	i		3044851	0					
ANR	3044902	ReturnType	int		3044851	1					
ANR	3044903	Identifier	DaemonCore :: Cancel_And_Close_All_Pipes		3044851	2					
ANR	3044904	ParameterList			3044851	3					
ANR	3044905	CFGEntryNode	ENTRY		3044851		True				
ANR	3044906	CFGExitNode	EXIT		3044851		True				
ANR	3044907	Symbol	PIPE_INDEX_OFFSET		3044851						
ANR	3044908	Symbol	( * pipeTable ) [ 0 ] . index		3044851						
ANR	3044909	Symbol	* * pipeTable		3044851						
ANR	3044910	Symbol	nPipe		3044851						
ANR	3044911	Symbol	i		3044851						
ANR	3044912	Symbol	* pipeTable		3044851						
ANR	3044913	Symbol	pipeTable		3044851						
ANR	3044914	Function	DaemonCore :: Read_Pipe	2186:0:62700:63265							
ANR	3044915	FunctionDef	"DaemonCore :: Read_Pipe (int pipe_end , void * buffer , int len)"		3044914	0					
ANR	3044916	CompoundStatement		2188:0:62763:63265	3044914	0					
ANR	3044917	IfStatement	if ( len < 0 )		3044914	0					
ANR	3044918	Condition	len < 0	2189:5:62770:62776	3044914	0	True				
ANR	3044919	RelationalExpression	len < 0		3044914	0		<			
ANR	3044920	Identifier	len		3044914	0					
ANR	3044921	PrimaryExpression	0		3044914	1					
ANR	3044922	CompoundStatement		2:14:15:15	3044914	1					
ANR	3044923	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read_Pipe: invalid len: %d\\n"" , len )"	2190:2:62783:62837	3044914	0	True				
ANR	3044924	CallExpression	"dprintf ( D_ALWAYS , ""Read_Pipe: invalid len: %d\\n"" , len )"		3044914	0					
ANR	3044925	Callee	dprintf		3044914	0					
ANR	3044926	Identifier	dprintf		3044914	0					
ANR	3044927	ArgumentList	D_ALWAYS		3044914	1					
ANR	3044928	Argument	D_ALWAYS		3044914	0					
ANR	3044929	Identifier	D_ALWAYS		3044914	0					
ANR	3044930	Argument	"""Read_Pipe: invalid len: %d\\n"""		3044914	1					
ANR	3044931	PrimaryExpression	"""Read_Pipe: invalid len: %d\\n"""		3044914	0					
ANR	3044932	Argument	len		3044914	2					
ANR	3044933	Identifier	len		3044914	0					
ANR	3044934	ExpressionStatement	"EXCEPT ( ""Read_Pipe"" )"	2191:2:62841:62860	3044914	1	True				
ANR	3044935	CallExpression	"EXCEPT ( ""Read_Pipe"" )"		3044914	0					
ANR	3044936	Callee	EXCEPT		3044914	0					
ANR	3044937	Identifier	EXCEPT		3044914	0					
ANR	3044938	ArgumentList	"""Read_Pipe"""		3044914	1					
ANR	3044939	Argument	"""Read_Pipe"""		3044914	0					
ANR	3044940	PrimaryExpression	"""Read_Pipe"""		3044914	0					
ANR	3044941	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	2194:1:62867:62907	3044914	1	True				
ANR	3044942	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		3044914	0					
ANR	3044943	IdentifierDeclType	int		3044914	0					
ANR	3044944	Identifier	index		3044914	1					
ANR	3044945	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		3044914	2		=			
ANR	3044946	Identifier	index		3044914	0					
ANR	3044947	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		3044914	1		-			
ANR	3044948	Identifier	pipe_end		3044914	0					
ANR	3044949	Identifier	PIPE_INDEX_OFFSET		3044914	1					
ANR	3044950	IfStatement	if ( pipeHandleTableLookup ( index ) == FALSE )		3044914	2					
ANR	3044951	Condition	pipeHandleTableLookup ( index ) == FALSE	2195:5:62914:62950	3044914	0	True				
ANR	3044952	EqualityExpression	pipeHandleTableLookup ( index ) == FALSE		3044914	0		==			
ANR	3044953	CallExpression	pipeHandleTableLookup ( index )		3044914	0					
ANR	3044954	Callee	pipeHandleTableLookup		3044914	0					
ANR	3044955	Identifier	pipeHandleTableLookup		3044914	0					
ANR	3044956	ArgumentList	index		3044914	1					
ANR	3044957	Argument	index		3044914	0					
ANR	3044958	Identifier	index		3044914	0					
ANR	3044959	Identifier	FALSE		3044914	1					
ANR	3044960	CompoundStatement		8:44:189:189	3044914	1					
ANR	3044961	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read_Pipe: invalid pipe_end: %d\\n"" , pipe_end )"	2196:2:62957:63021	3044914	0	True				
ANR	3044962	CallExpression	"dprintf ( D_ALWAYS , ""Read_Pipe: invalid pipe_end: %d\\n"" , pipe_end )"		3044914	0					
ANR	3044963	Callee	dprintf		3044914	0					
ANR	3044964	Identifier	dprintf		3044914	0					
ANR	3044965	ArgumentList	D_ALWAYS		3044914	1					
ANR	3044966	Argument	D_ALWAYS		3044914	0					
ANR	3044967	Identifier	D_ALWAYS		3044914	0					
ANR	3044968	Argument	"""Read_Pipe: invalid pipe_end: %d\\n"""		3044914	1					
ANR	3044969	PrimaryExpression	"""Read_Pipe: invalid pipe_end: %d\\n"""		3044914	0					
ANR	3044970	Argument	pipe_end		3044914	2					
ANR	3044971	Identifier	pipe_end		3044914	0					
ANR	3044972	ExpressionStatement	"EXCEPT ( ""Read_Pipe"" )"	2197:2:63025:63044	3044914	1	True				
ANR	3044973	CallExpression	"EXCEPT ( ""Read_Pipe"" )"		3044914	0					
ANR	3044974	Callee	EXCEPT		3044914	0					
ANR	3044975	Identifier	EXCEPT		3044914	0					
ANR	3044976	ArgumentList	"""Read_Pipe"""		3044914	1					
ANR	3044977	Argument	"""Read_Pipe"""		3044914	0					
ANR	3044978	PrimaryExpression	"""Read_Pipe"""		3044914	0					
ANR	3044979	Statement	ReadPipeEnd	2201:1:63070:63080	3044914	3	True				
ANR	3044980	Statement	*	2201:12:63081:63081	3044914	4	True				
ANR	3044981	Statement	rpe	2201:14:63083:63085	3044914	5	True				
ANR	3044982	Statement	=	2201:18:63087:63087	3044914	6	True				
ANR	3044983	Statement	dynamic_cast	2201:20:63089:63100	3044914	7	True				
ANR	3044984	Statement	<	2201:32:63101:63101	3044914	8	True				
ANR	3044985	Statement	ReadPipeEnd	2201:33:63102:63112	3044914	9	True				
ANR	3044986	Statement	*	2201:44:63113:63113	3044914	10	True				
ANR	3044987	Statement	>	2201:45:63114:63114	3044914	11	True				
ANR	3044988	ExpressionStatement	( * pipeHandleTable ) [ index ]	2201:46:63115:63142	3044914	12	True				
ANR	3044989	ArrayIndexing	( * pipeHandleTable ) [ index ]		3044914	0					
ANR	3044990	UnaryOperationExpression	* pipeHandleTable		3044914	0					
ANR	3044991	UnaryOperator	*		3044914	0					
ANR	3044992	Identifier	pipeHandleTable		3044914	1					
ANR	3044993	Identifier	index		3044914	1					
ANR	3044994	ExpressionStatement	ASSERT ( rpe != NULL )	2202:1:63145:63164	3044914	13	True				
ANR	3044995	CallExpression	ASSERT ( rpe != NULL )		3044914	0					
ANR	3044996	Callee	ASSERT		3044914	0					
ANR	3044997	Identifier	ASSERT		3044914	0					
ANR	3044998	ArgumentList	rpe != NULL		3044914	1					
ANR	3044999	Argument	rpe != NULL		3044914	0					
ANR	3045000	EqualityExpression	rpe != NULL		3044914	0		!=			
ANR	3045001	Identifier	rpe		3044914	0					
ANR	3045002	Identifier	NULL		3044914	1					
ANR	3045003	ReturnStatement	"return rpe -> read ( buffer , len ) ;"	2203:1:63167:63196	3044914	14	True				
ANR	3045004	CallExpression	"rpe -> read ( buffer , len )"		3044914	0					
ANR	3045005	Callee	rpe -> read		3044914	0					
ANR	3045006	PtrMemberAccess	rpe -> read		3044914	0					
ANR	3045007	Identifier	rpe		3044914	0					
ANR	3045008	Identifier	read		3044914	1					
ANR	3045009	ArgumentList	buffer		3044914	1					
ANR	3045010	Argument	buffer		3044914	0					
ANR	3045011	Identifier	buffer		3044914	0					
ANR	3045012	Argument	len		3044914	1					
ANR	3045013	Identifier	len		3044914	0					
ANR	3045014	ReturnType	int		3044914	1					
ANR	3045015	Identifier	DaemonCore :: Read_Pipe		3044914	2					
ANR	3045016	ParameterList	"int pipe_end , void * buffer , int len"		3044914	3					
ANR	3045017	Parameter	int pipe_end	2187:22:62726:62737	3044914	0	True				
ANR	3045018	ParameterType	int		3044914	0					
ANR	3045019	Identifier	pipe_end		3044914	1					
ANR	3045020	Parameter	void * buffer	2187:36:62740:62751	3044914	1	True				
ANR	3045021	ParameterType	void *		3044914	0					
ANR	3045022	Identifier	buffer		3044914	1					
ANR	3045023	Parameter	int len	2187:50:62754:62760	3044914	2	True				
ANR	3045024	ParameterType	int		3044914	0					
ANR	3045025	Identifier	len		3044914	1					
ANR	3045026	CFGEntryNode	ENTRY		3044914		True				
ANR	3045027	CFGExitNode	EXIT		3044914		True				
ANR	3045028	Symbol	PIPE_INDEX_OFFSET		3044914						
ANR	3045029	Symbol	NULL		3044914						
ANR	3045030	Symbol	pipe_end		3044914						
ANR	3045031	Symbol	* pipeHandleTable		3044914						
ANR	3045032	Symbol	rpe		3044914						
ANR	3045033	Symbol	D_ALWAYS		3044914						
ANR	3045034	Symbol	index		3044914						
ANR	3045035	Symbol	pipeHandleTableLookup		3044914						
ANR	3045036	Symbol	* rpe		3044914						
ANR	3045037	Symbol	pipeHandleTable		3044914						
ANR	3045038	Symbol	len		3044914						
ANR	3045039	Symbol	rpe -> read		3044914						
ANR	3045040	Symbol	FALSE		3044914						
ANR	3045041	Symbol	buffer		3044914						
ANR	3045042	Function	DaemonCore :: Write_Pipe	2209:0:63268:63866							
ANR	3045043	FunctionDef	"DaemonCore :: Write_Pipe (int pipe_end , const void * buffer , int len)"		3045042	0					
ANR	3045044	CompoundStatement		2211:0:63338:63866	3045042	0					
ANR	3045045	IfStatement	if ( len < 0 )		3045042	0					
ANR	3045046	Condition	len < 0	2212:5:63345:63351	3045042	0	True				
ANR	3045047	RelationalExpression	len < 0		3045042	0		<			
ANR	3045048	Identifier	len		3045042	0					
ANR	3045049	PrimaryExpression	0		3045042	1					
ANR	3045050	CompoundStatement		2:14:15:15	3045042	1					
ANR	3045051	ExpressionStatement	"dprintf ( D_ALWAYS , ""Write_Pipe: invalid len: %d\\n"" , len )"	2213:2:63358:63413	3045042	0	True				
ANR	3045052	CallExpression	"dprintf ( D_ALWAYS , ""Write_Pipe: invalid len: %d\\n"" , len )"		3045042	0					
ANR	3045053	Callee	dprintf		3045042	0					
ANR	3045054	Identifier	dprintf		3045042	0					
ANR	3045055	ArgumentList	D_ALWAYS		3045042	1					
ANR	3045056	Argument	D_ALWAYS		3045042	0					
ANR	3045057	Identifier	D_ALWAYS		3045042	0					
ANR	3045058	Argument	"""Write_Pipe: invalid len: %d\\n"""		3045042	1					
ANR	3045059	PrimaryExpression	"""Write_Pipe: invalid len: %d\\n"""		3045042	0					
ANR	3045060	Argument	len		3045042	2					
ANR	3045061	Identifier	len		3045042	0					
ANR	3045062	ExpressionStatement	"EXCEPT ( ""Write_Pipe"" )"	2214:2:63417:63437	3045042	1	True				
ANR	3045063	CallExpression	"EXCEPT ( ""Write_Pipe"" )"		3045042	0					
ANR	3045064	Callee	EXCEPT		3045042	0					
ANR	3045065	Identifier	EXCEPT		3045042	0					
ANR	3045066	ArgumentList	"""Write_Pipe"""		3045042	1					
ANR	3045067	Argument	"""Write_Pipe"""		3045042	0					
ANR	3045068	PrimaryExpression	"""Write_Pipe"""		3045042	0					
ANR	3045069	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	2217:1:63444:63484	3045042	1	True				
ANR	3045070	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		3045042	0					
ANR	3045071	IdentifierDeclType	int		3045042	0					
ANR	3045072	Identifier	index		3045042	1					
ANR	3045073	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		3045042	2		=			
ANR	3045074	Identifier	index		3045042	0					
ANR	3045075	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		3045042	1		-			
ANR	3045076	Identifier	pipe_end		3045042	0					
ANR	3045077	Identifier	PIPE_INDEX_OFFSET		3045042	1					
ANR	3045078	IfStatement	if ( pipeHandleTableLookup ( index ) == FALSE )		3045042	2					
ANR	3045079	Condition	pipeHandleTableLookup ( index ) == FALSE	2218:5:63491:63527	3045042	0	True				
ANR	3045080	EqualityExpression	pipeHandleTableLookup ( index ) == FALSE		3045042	0		==			
ANR	3045081	CallExpression	pipeHandleTableLookup ( index )		3045042	0					
ANR	3045082	Callee	pipeHandleTableLookup		3045042	0					
ANR	3045083	Identifier	pipeHandleTableLookup		3045042	0					
ANR	3045084	ArgumentList	index		3045042	1					
ANR	3045085	Argument	index		3045042	0					
ANR	3045086	Identifier	index		3045042	0					
ANR	3045087	Identifier	FALSE		3045042	1					
ANR	3045088	CompoundStatement		8:44:191:191	3045042	1					
ANR	3045089	ExpressionStatement	"dprintf ( D_ALWAYS , ""Write_Pipe: invalid pipe_end: %d\\n"" , pipe_end )"	2219:2:63534:63599	3045042	0	True				
ANR	3045090	CallExpression	"dprintf ( D_ALWAYS , ""Write_Pipe: invalid pipe_end: %d\\n"" , pipe_end )"		3045042	0					
ANR	3045091	Callee	dprintf		3045042	0					
ANR	3045092	Identifier	dprintf		3045042	0					
ANR	3045093	ArgumentList	D_ALWAYS		3045042	1					
ANR	3045094	Argument	D_ALWAYS		3045042	0					
ANR	3045095	Identifier	D_ALWAYS		3045042	0					
ANR	3045096	Argument	"""Write_Pipe: invalid pipe_end: %d\\n"""		3045042	1					
ANR	3045097	PrimaryExpression	"""Write_Pipe: invalid pipe_end: %d\\n"""		3045042	0					
ANR	3045098	Argument	pipe_end		3045042	2					
ANR	3045099	Identifier	pipe_end		3045042	0					
ANR	3045100	ExpressionStatement	"EXCEPT ( ""Write_Pipe: invalid pipe end"" )"	2220:2:63603:63641	3045042	1	True				
ANR	3045101	CallExpression	"EXCEPT ( ""Write_Pipe: invalid pipe end"" )"		3045042	0					
ANR	3045102	Callee	EXCEPT		3045042	0					
ANR	3045103	Identifier	EXCEPT		3045042	0					
ANR	3045104	ArgumentList	"""Write_Pipe: invalid pipe end"""		3045042	1					
ANR	3045105	Argument	"""Write_Pipe: invalid pipe end"""		3045042	0					
ANR	3045106	PrimaryExpression	"""Write_Pipe: invalid pipe end"""		3045042	0					
ANR	3045107	Statement	WritePipeEnd	2224:1:63667:63678	3045042	3	True				
ANR	3045108	Statement	*	2224:13:63679:63679	3045042	4	True				
ANR	3045109	Statement	wpe	2224:15:63681:63683	3045042	5	True				
ANR	3045110	Statement	=	2224:19:63685:63685	3045042	6	True				
ANR	3045111	Statement	dynamic_cast	2224:21:63687:63698	3045042	7	True				
ANR	3045112	Statement	<	2224:33:63699:63699	3045042	8	True				
ANR	3045113	Statement	WritePipeEnd	2224:34:63700:63711	3045042	9	True				
ANR	3045114	Statement	*	2224:46:63712:63712	3045042	10	True				
ANR	3045115	Statement	>	2224:47:63713:63713	3045042	11	True				
ANR	3045116	ExpressionStatement	( * pipeHandleTable ) [ index ]	2224:48:63714:63741	3045042	12	True				
ANR	3045117	ArrayIndexing	( * pipeHandleTable ) [ index ]		3045042	0					
ANR	3045118	UnaryOperationExpression	* pipeHandleTable		3045042	0					
ANR	3045119	UnaryOperator	*		3045042	0					
ANR	3045120	Identifier	pipeHandleTable		3045042	1					
ANR	3045121	Identifier	index		3045042	1					
ANR	3045122	ExpressionStatement	ASSERT ( wpe != NULL )	2225:1:63744:63763	3045042	13	True				
ANR	3045123	CallExpression	ASSERT ( wpe != NULL )		3045042	0					
ANR	3045124	Callee	ASSERT		3045042	0					
ANR	3045125	Identifier	ASSERT		3045042	0					
ANR	3045126	ArgumentList	wpe != NULL		3045042	1					
ANR	3045127	Argument	wpe != NULL		3045042	0					
ANR	3045128	EqualityExpression	wpe != NULL		3045042	0		!=			
ANR	3045129	Identifier	wpe		3045042	0					
ANR	3045130	Identifier	NULL		3045042	1					
ANR	3045131	ReturnStatement	"return wpe -> write ( buffer , len ) ;"	2226:1:63766:63796	3045042	14	True				
ANR	3045132	CallExpression	"wpe -> write ( buffer , len )"		3045042	0					
ANR	3045133	Callee	wpe -> write		3045042	0					
ANR	3045134	PtrMemberAccess	wpe -> write		3045042	0					
ANR	3045135	Identifier	wpe		3045042	0					
ANR	3045136	Identifier	write		3045042	1					
ANR	3045137	ArgumentList	buffer		3045042	1					
ANR	3045138	Argument	buffer		3045042	0					
ANR	3045139	Identifier	buffer		3045042	0					
ANR	3045140	Argument	len		3045042	1					
ANR	3045141	Identifier	len		3045042	0					
ANR	3045142	ReturnType	int		3045042	1					
ANR	3045143	Identifier	DaemonCore :: Write_Pipe		3045042	2					
ANR	3045144	ParameterList	"int pipe_end , const void * buffer , int len"		3045042	3					
ANR	3045145	Parameter	int pipe_end	2210:23:63295:63306	3045042	0	True				
ANR	3045146	ParameterType	int		3045042	0					
ANR	3045147	Identifier	pipe_end		3045042	1					
ANR	3045148	Parameter	const void * buffer	2210:37:63309:63326	3045042	1	True				
ANR	3045149	ParameterType	const void *		3045042	0					
ANR	3045150	Identifier	buffer		3045042	1					
ANR	3045151	Parameter	int len	2210:57:63329:63335	3045042	2	True				
ANR	3045152	ParameterType	int		3045042	0					
ANR	3045153	Identifier	len		3045042	1					
ANR	3045154	CFGEntryNode	ENTRY		3045042		True				
ANR	3045155	CFGExitNode	EXIT		3045042		True				
ANR	3045156	Symbol	PIPE_INDEX_OFFSET		3045042						
ANR	3045157	Symbol	NULL		3045042						
ANR	3045158	Symbol	pipe_end		3045042						
ANR	3045159	Symbol	* pipeHandleTable		3045042						
ANR	3045160	Symbol	D_ALWAYS		3045042						
ANR	3045161	Symbol	index		3045042						
ANR	3045162	Symbol	pipeHandleTableLookup		3045042						
ANR	3045163	Symbol	wpe		3045042						
ANR	3045164	Symbol	pipeHandleTable		3045042						
ANR	3045165	Symbol	len		3045042						
ANR	3045166	Symbol	* wpe		3045042						
ANR	3045167	Symbol	FALSE		3045042						
ANR	3045168	Symbol	wpe -> write		3045042						
ANR	3045169	Symbol	buffer		3045042						
ANR	3045170	Function	DaemonCore :: Get_Pipe_FD	2233:0:63889:64027							
ANR	3045171	FunctionDef	"DaemonCore :: Get_Pipe_FD (int pipe_end , int * fd)"		3045170	0					
ANR	3045172	CompoundStatement		2235:0:63940:64027	3045170	0					
ANR	3045173	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	2236:1:63943:63983	3045170	0	True				
ANR	3045174	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		3045170	0					
ANR	3045175	IdentifierDeclType	int		3045170	0					
ANR	3045176	Identifier	index		3045170	1					
ANR	3045177	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		3045170	2		=			
ANR	3045178	Identifier	index		3045170	0					
ANR	3045179	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		3045170	1		-			
ANR	3045180	Identifier	pipe_end		3045170	0					
ANR	3045181	Identifier	PIPE_INDEX_OFFSET		3045170	1					
ANR	3045182	ReturnStatement	"return pipeHandleTableLookup ( index , fd ) ;"	2237:1:63986:64025	3045170	1	True				
ANR	3045183	CallExpression	"pipeHandleTableLookup ( index , fd )"		3045170	0					
ANR	3045184	Callee	pipeHandleTableLookup		3045170	0					
ANR	3045185	Identifier	pipeHandleTableLookup		3045170	0					
ANR	3045186	ArgumentList	index		3045170	1					
ANR	3045187	Argument	index		3045170	0					
ANR	3045188	Identifier	index		3045170	0					
ANR	3045189	Argument	fd		3045170	1					
ANR	3045190	Identifier	fd		3045170	0					
ANR	3045191	ReturnType	int		3045170	1					
ANR	3045192	Identifier	DaemonCore :: Get_Pipe_FD		3045170	2					
ANR	3045193	ParameterList	"int pipe_end , int * fd"		3045170	3					
ANR	3045194	Parameter	int pipe_end	2234:24:63917:63928	3045170	0	True				
ANR	3045195	ParameterType	int		3045170	0					
ANR	3045196	Identifier	pipe_end		3045170	1					
ANR	3045197	Parameter	int * fd	2234:38:63931:63937	3045170	1	True				
ANR	3045198	ParameterType	int *		3045170	0					
ANR	3045199	Identifier	fd		3045170	1					
ANR	3045200	CFGEntryNode	ENTRY		3045170		True				
ANR	3045201	CFGExitNode	EXIT		3045170		True				
ANR	3045202	Symbol	PIPE_INDEX_OFFSET		3045170						
ANR	3045203	Symbol	pipe_end		3045170						
ANR	3045204	Symbol	index		3045170						
ANR	3045205	Symbol	pipeHandleTableLookup		3045170						
ANR	3045206	Symbol	fd		3045170						
ANR	3045207	Function	DaemonCore :: Close_FD	2241:0:64037:64237							
ANR	3045208	FunctionDef	DaemonCore :: Close_FD (int fd)		3045207	0					
ANR	3045209	CompoundStatement		2243:0:64070:64237	3045207	0					
ANR	3045210	IdentifierDeclStatement	int retval = - 1 ;	2244:1:64073:64088	3045207	0	True				
ANR	3045211	IdentifierDecl	retval = - 1		3045207	0					
ANR	3045212	IdentifierDeclType	int		3045207	0					
ANR	3045213	Identifier	retval		3045207	1					
ANR	3045214	AssignmentExpression	retval = - 1		3045207	2		=			
ANR	3045215	Identifier	retval		3045207	0					
ANR	3045216	UnaryOperationExpression	- 1		3045207	1					
ANR	3045217	UnaryOperator	-		3045207	0					
ANR	3045218	PrimaryExpression	1		3045207	1					
ANR	3045219	IfStatement	if ( fd >= PIPE_INDEX_OFFSET )		3045207	1					
ANR	3045220	Condition	fd >= PIPE_INDEX_OFFSET	2245:6:64098:64120	3045207	0	True				
ANR	3045221	RelationalExpression	fd >= PIPE_INDEX_OFFSET		3045207	0		>=			
ANR	3045222	Identifier	fd		3045207	0					
ANR	3045223	Identifier	PIPE_INDEX_OFFSET		3045207	1					
ANR	3045224	CompoundStatement		3:32:53:53	3045207	1					
ANR	3045225	ExpressionStatement	retval = ( daemonCore -> Close_Pipe ( fd ) ? 0 : - 1 )	2246:2:64130:64181	3045207	0	True				
ANR	3045226	AssignmentExpression	retval = ( daemonCore -> Close_Pipe ( fd ) ? 0 : - 1 )		3045207	0		=			
ANR	3045227	Identifier	retval		3045207	0					
ANR	3045228	ConditionalExpression	daemonCore -> Close_Pipe ( fd ) ? 0 : - 1		3045207	1					
ANR	3045229	Condition	daemonCore -> Close_Pipe ( fd )		3045207	0					
ANR	3045230	CallExpression	daemonCore -> Close_Pipe ( fd )		3045207	0					
ANR	3045231	Callee	daemonCore -> Close_Pipe		3045207	0					
ANR	3045232	PtrMemberAccess	daemonCore -> Close_Pipe		3045207	0					
ANR	3045233	Identifier	daemonCore		3045207	0					
ANR	3045234	Identifier	Close_Pipe		3045207	1					
ANR	3045235	ArgumentList	fd		3045207	1					
ANR	3045236	Argument	fd		3045207	0					
ANR	3045237	Identifier	fd		3045207	0					
ANR	3045238	PrimaryExpression	0		3045207	1					
ANR	3045239	UnaryOperationExpression	- 1		3045207	2					
ANR	3045240	UnaryOperator	-		3045207	0					
ANR	3045241	PrimaryExpression	1		3045207	1					
ANR	3045242	ElseStatement	else		3045207	0					
ANR	3045243	CompoundStatement		5:8:120:120	3045207	0					
ANR	3045244	ExpressionStatement	retval = close ( fd )	2248:2:64195:64216	3045207	0	True				
ANR	3045245	AssignmentExpression	retval = close ( fd )		3045207	0		=			
ANR	3045246	Identifier	retval		3045207	0					
ANR	3045247	CallExpression	close ( fd )		3045207	1					
ANR	3045248	Callee	close		3045207	0					
ANR	3045249	Identifier	close		3045207	0					
ANR	3045250	ArgumentList	fd		3045207	1					
ANR	3045251	Argument	fd		3045207	0					
ANR	3045252	Identifier	fd		3045207	0					
ANR	3045253	ReturnStatement	return retval ;	2250:1:64222:64235	3045207	2	True				
ANR	3045254	Identifier	retval		3045207	0					
ANR	3045255	ReturnType	int		3045207	1					
ANR	3045256	Identifier	DaemonCore :: Close_FD		3045207	2					
ANR	3045257	ParameterList	int fd		3045207	3					
ANR	3045258	Parameter	int fd	2242:21:64062:64067	3045207	0	True				
ANR	3045259	ParameterType	int		3045207	0					
ANR	3045260	Identifier	fd		3045207	1					
ANR	3045261	CFGEntryNode	ENTRY		3045207		True				
ANR	3045262	CFGExitNode	EXIT		3045207		True				
ANR	3045263	Symbol	PIPE_INDEX_OFFSET		3045207						
ANR	3045264	Symbol	daemonCore -> Close_Pipe		3045207						
ANR	3045265	Symbol	* daemonCore		3045207						
ANR	3045266	Symbol	daemonCore		3045207						
ANR	3045267	Symbol	close		3045207						
ANR	3045268	Symbol	fd		3045207						
ANR	3045269	Symbol	retval		3045207						
ANR	3045270	Function	DaemonCore :: Read_Std_Pipe	2253:0:64240:64794							
ANR	3045271	FunctionDef	"DaemonCore :: Read_Std_Pipe (int pid , int std_fd)"		3045270	0					
ANR	3045272	CompoundStatement		2254:47:64297:64794	3045270	0					
ANR	3045273	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	2255:1:64300:64324	3045270	0	True				
ANR	3045274	IdentifierDecl	* pidinfo = NULL		3045270	0					
ANR	3045275	IdentifierDeclType	PidEntry *		3045270	0					
ANR	3045276	Identifier	pidinfo		3045270	1					
ANR	3045277	AssignmentExpression	* pidinfo = NULL		3045270	2		=			
ANR	3045278	Identifier	NULL		3045270	0					
ANR	3045279	Identifier	NULL		3045270	1					
ANR	3045280	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) < 0 ) )"		3045270	1					
ANR	3045281	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	2256:5:64331:64366	3045270	0	True				
ANR	3045282	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		3045270	0		<			
ANR	3045283	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		3045270	0					
ANR	3045284	Callee	pidTable -> lookup		3045270	0					
ANR	3045285	PtrMemberAccess	pidTable -> lookup		3045270	0					
ANR	3045286	Identifier	pidTable		3045270	0					
ANR	3045287	Identifier	lookup		3045270	1					
ANR	3045288	ArgumentList	pid		3045270	1					
ANR	3045289	Argument	pid		3045270	0					
ANR	3045290	Identifier	pid		3045270	0					
ANR	3045291	Argument	pidinfo		3045270	1					
ANR	3045292	Identifier	pidinfo		3045270	0					
ANR	3045293	PrimaryExpression	0		3045270	1					
ANR	3045294	CompoundStatement		3:43:71:71	3045270	1					
ANR	3045295	ReturnStatement	return NULL ;	2259:2:64463:64474	3045270	0	True				
ANR	3045296	Identifier	NULL		3045270	0					
ANR	3045297	ReturnStatement	return pidinfo -> pipe_buf [ std_fd ] ;	2266:1:64760:64792	3045270	2	True				
ANR	3045298	ArrayIndexing	pidinfo -> pipe_buf [ std_fd ]		3045270	0					
ANR	3045299	PtrMemberAccess	pidinfo -> pipe_buf		3045270	0					
ANR	3045300	Identifier	pidinfo		3045270	0					
ANR	3045301	Identifier	pipe_buf		3045270	1					
ANR	3045302	Identifier	std_fd		3045270	1					
ANR	3045303	ReturnType	MyString *		3045270	1					
ANR	3045304	Identifier	DaemonCore :: Read_Std_Pipe		3045270	2					
ANR	3045305	ParameterList	"int pid , int std_fd"		3045270	3					
ANR	3045306	Parameter	int pid	2254:26:64276:64282	3045270	0	True				
ANR	3045307	ParameterType	int		3045270	0					
ANR	3045308	Identifier	pid		3045270	1					
ANR	3045309	Parameter	int std_fd	2254:35:64285:64294	3045270	1	True				
ANR	3045310	ParameterType	int		3045270	0					
ANR	3045311	Identifier	std_fd		3045270	1					
ANR	3045312	CFGEntryNode	ENTRY		3045270		True				
ANR	3045313	CFGExitNode	EXIT		3045270		True				
ANR	3045314	Symbol	pidinfo		3045270						
ANR	3045315	Symbol	pidTable		3045270						
ANR	3045316	Symbol	* pidinfo -> pipe_buf		3045270						
ANR	3045317	Symbol	* * pidinfo		3045270						
ANR	3045318	Symbol	NULL		3045270						
ANR	3045319	Symbol	std_fd		3045270						
ANR	3045320	Symbol	pidTable -> lookup		3045270						
ANR	3045321	Symbol	* pidTable		3045270						
ANR	3045322	Symbol	* std_fd		3045270						
ANR	3045323	Symbol	pid		3045270						
ANR	3045324	Symbol	* pidinfo		3045270						
ANR	3045325	Symbol	pidinfo -> pipe_buf		3045270						
ANR	3045326	DeclStmt									
ANR	3045327	Decl							PidEntry	PidEntry *	pidinfo
ANR	3045328	Function	DaemonCore :: Close_Stdin_Pipe	2290:0:65453:65856							
ANR	3045329	FunctionDef	DaemonCore :: Close_Stdin_Pipe (int pid)		3045328	0					
ANR	3045330	CompoundStatement		2291:38:65496:65856	3045328	0					
ANR	3045331	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	2292:1:65499:65523	3045328	0	True				
ANR	3045332	IdentifierDecl	* pidinfo = NULL		3045328	0					
ANR	3045333	IdentifierDeclType	PidEntry *		3045328	0					
ANR	3045334	Identifier	pidinfo		3045328	1					
ANR	3045335	AssignmentExpression	* pidinfo = NULL		3045328	2		=			
ANR	3045336	Identifier	NULL		3045328	0					
ANR	3045337	Identifier	NULL		3045328	1					
ANR	3045338	IdentifierDeclStatement	int rval ;	2293:1:65526:65534	3045328	1	True				
ANR	3045339	IdentifierDecl	rval		3045328	0					
ANR	3045340	IdentifierDeclType	int		3045328	0					
ANR	3045341	Identifier	rval		3045328	1					
ANR	3045342	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) < 0 ) )"		3045328	2					
ANR	3045343	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	2295:5:65542:65577	3045328	0	True				
ANR	3045344	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		3045328	0		<			
ANR	3045345	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		3045328	0					
ANR	3045346	Callee	pidTable -> lookup		3045328	0					
ANR	3045347	PtrMemberAccess	pidTable -> lookup		3045328	0					
ANR	3045348	Identifier	pidTable		3045328	0					
ANR	3045349	Identifier	lookup		3045328	1					
ANR	3045350	ArgumentList	pid		3045328	1					
ANR	3045351	Argument	pid		3045328	0					
ANR	3045352	Identifier	pid		3045328	0					
ANR	3045353	Argument	pidinfo		3045328	1					
ANR	3045354	Identifier	pidinfo		3045328	0					
ANR	3045355	PrimaryExpression	0		3045328	1					
ANR	3045356	CompoundStatement		5:43:83:83	3045328	1					
ANR	3045357	ReturnStatement	return false ;	2297:2:65625:65637	3045328	0	True				
ANR	3045358	Identifier	false		3045328	0					
ANR	3045359	IfStatement	if ( pidinfo -> std_pipes [ 0 ] == DC_STD_FD_NOPIPE )		3045328	3					
ANR	3045360	Condition	pidinfo -> std_pipes [ 0 ] == DC_STD_FD_NOPIPE	2299:5:65647:65687	3045328	0	True				
ANR	3045361	EqualityExpression	pidinfo -> std_pipes [ 0 ] == DC_STD_FD_NOPIPE		3045328	0		==			
ANR	3045362	ArrayIndexing	pidinfo -> std_pipes [ 0 ]		3045328	0					
ANR	3045363	PtrMemberAccess	pidinfo -> std_pipes		3045328	0					
ANR	3045364	Identifier	pidinfo		3045328	0					
ANR	3045365	Identifier	std_pipes		3045328	1					
ANR	3045366	PrimaryExpression	0		3045328	1					
ANR	3045367	Identifier	DC_STD_FD_NOPIPE		3045328	1					
ANR	3045368	CompoundStatement		9:48:193:193	3045328	1					
ANR	3045369	ReturnStatement	return false ;	2301:2:65715:65727	3045328	0	True				
ANR	3045370	Identifier	false		3045328	0					
ANR	3045371	ExpressionStatement	rval = Close_Pipe ( pidinfo -> std_pipes [ 0 ] )	2304:1:65734:65774	3045328	4	True				
ANR	3045372	AssignmentExpression	rval = Close_Pipe ( pidinfo -> std_pipes [ 0 ] )		3045328	0		=			
ANR	3045373	Identifier	rval		3045328	0					
ANR	3045374	CallExpression	Close_Pipe ( pidinfo -> std_pipes [ 0 ] )		3045328	1					
ANR	3045375	Callee	Close_Pipe		3045328	0					
ANR	3045376	Identifier	Close_Pipe		3045328	0					
ANR	3045377	ArgumentList	pidinfo -> std_pipes [ 0 ]		3045328	1					
ANR	3045378	Argument	pidinfo -> std_pipes [ 0 ]		3045328	0					
ANR	3045379	ArrayIndexing	pidinfo -> std_pipes [ 0 ]		3045328	0					
ANR	3045380	PtrMemberAccess	pidinfo -> std_pipes		3045328	0					
ANR	3045381	Identifier	pidinfo		3045328	0					
ANR	3045382	Identifier	std_pipes		3045328	1					
ANR	3045383	PrimaryExpression	0		3045328	1					
ANR	3045384	IfStatement	if ( rval )		3045328	5					
ANR	3045385	Condition	rval	2305:5:65781:65784	3045328	0	True				
ANR	3045386	Identifier	rval		3045328	0					
ANR	3045387	CompoundStatement		15:11:290:290	3045328	1					
ANR	3045388	ExpressionStatement	pidinfo -> std_pipes [ 0 ] = DC_STD_FD_NOPIPE	2306:2:65791:65831	3045328	0	True				
ANR	3045389	AssignmentExpression	pidinfo -> std_pipes [ 0 ] = DC_STD_FD_NOPIPE		3045328	0		=			
ANR	3045390	ArrayIndexing	pidinfo -> std_pipes [ 0 ]		3045328	0					
ANR	3045391	PtrMemberAccess	pidinfo -> std_pipes		3045328	0					
ANR	3045392	Identifier	pidinfo		3045328	0					
ANR	3045393	Identifier	std_pipes		3045328	1					
ANR	3045394	PrimaryExpression	0		3045328	1					
ANR	3045395	Identifier	DC_STD_FD_NOPIPE		3045328	1					
ANR	3045396	ReturnStatement	return ( bool ) rval ;	2308:1:65837:65854	3045328	6	True				
ANR	3045397	CastExpression	( bool ) rval		3045328	0					
ANR	3045398	CastTarget	bool		3045328	0					
ANR	3045399	Identifier	rval		3045328	1					
ANR	3045400	ReturnType	bool		3045328	1					
ANR	3045401	Identifier	DaemonCore :: Close_Stdin_Pipe		3045328	2					
ANR	3045402	ParameterList	int pid		3045328	3					
ANR	3045403	Parameter	int pid	2291:29:65487:65493	3045328	0	True				
ANR	3045404	ParameterType	int		3045328	0					
ANR	3045405	Identifier	pid		3045328	1					
ANR	3045406	CFGEntryNode	ENTRY		3045328		True				
ANR	3045407	CFGExitNode	EXIT		3045328		True				
ANR	3045408	Symbol	pidinfo		3045328						
ANR	3045409	Symbol	pidTable		3045328						
ANR	3045410	Symbol	* * pidinfo		3045328						
ANR	3045411	Symbol	NULL		3045328						
ANR	3045412	Symbol	* pidTable		3045328						
ANR	3045413	Symbol	false		3045328						
ANR	3045414	Symbol	pid		3045328						
ANR	3045415	Symbol	* pidinfo -> std_pipes		3045328						
ANR	3045416	Symbol	pidTable -> lookup		3045328						
ANR	3045417	Symbol	Close_Pipe		3045328						
ANR	3045418	Symbol	pidinfo -> std_pipes		3045328						
ANR	3045419	Symbol	rval		3045328						
ANR	3045420	Symbol	DC_STD_FD_NOPIPE		3045328						
ANR	3045421	Symbol	* pidinfo		3045328						
ANR	3045422	Function	DaemonCore :: Register_Reaper	2312:0:65860:68548							
ANR	3045423	FunctionDef	"DaemonCore :: Register_Reaper (int rid , const char * reap_descrip , ReaperHandler handler , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s , int is_cpp)"		3045422	0					
ANR	3045424	CompoundStatement		2315:0:66040:68548	3045422	0					
ANR	3045425	IdentifierDeclStatement	int i ;	2316:4:66046:66055	3045422	0	True				
ANR	3045426	IdentifierDecl	i		3045422	0					
ANR	3045427	IdentifierDeclType	int		3045422	0					
ANR	3045428	Identifier	i		3045422	1					
ANR	3045429	IdentifierDeclStatement	int j ;	2317:4:66061:66070	3045422	1	True				
ANR	3045430	IdentifierDecl	j		3045422	0					
ANR	3045431	IdentifierDeclType	int		3045422	0					
ANR	3045432	Identifier	j		3045422	1					
ANR	3045433	IfStatement	if ( rid == - 1 )		3045422	2					
ANR	3045434	Condition	rid == - 1	2332:6:66708:66716	3045422	0	True				
ANR	3045435	EqualityExpression	rid == - 1		3045422	0		==			
ANR	3045436	Identifier	rid		3045422	0					
ANR	3045437	UnaryOperationExpression	- 1		3045422	1					
ANR	3045438	UnaryOperator	-		3045422	0					
ANR	3045439	PrimaryExpression	1		3045422	1					
ANR	3045440	CompoundStatement		18:18:679:679	3045422	1					
ANR	3045441	IfStatement	if ( nReap >= maxReap )		3045422	0					
ANR	3045442	Condition	nReap >= maxReap	2334:5:66763:66778	3045422	0	True				
ANR	3045443	RelationalExpression	nReap >= maxReap		3045422	0		>=			
ANR	3045444	Identifier	nReap		3045422	0					
ANR	3045445	Identifier	maxReap		3045422	1					
ANR	3045446	CompoundStatement		20:23:740:740	3045422	1					
ANR	3045447	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unable to register reaper with description: %s\\n"" , reap_descrip == NULL ? ""[Not specified]"" : reap_descrip )"	2335:3:66786:66915	3045422	0	True				
ANR	3045448	CallExpression	"dprintf ( D_ALWAYS , ""Unable to register reaper with description: %s\\n"" , reap_descrip == NULL ? ""[Not specified]"" : reap_descrip )"		3045422	0					
ANR	3045449	Callee	dprintf		3045422	0					
ANR	3045450	Identifier	dprintf		3045422	0					
ANR	3045451	ArgumentList	D_ALWAYS		3045422	1					
ANR	3045452	Argument	D_ALWAYS		3045422	0					
ANR	3045453	Identifier	D_ALWAYS		3045422	0					
ANR	3045454	Argument	"""Unable to register reaper with description: %s\\n"""		3045422	1					
ANR	3045455	PrimaryExpression	"""Unable to register reaper with description: %s\\n"""		3045422	0					
ANR	3045456	Argument	"reap_descrip == NULL ? ""[Not specified]"" : reap_descrip"		3045422	2					
ANR	3045457	ConditionalExpression	"reap_descrip == NULL ? ""[Not specified]"" : reap_descrip"		3045422	0					
ANR	3045458	Condition	reap_descrip == NULL		3045422	0					
ANR	3045459	EqualityExpression	reap_descrip == NULL		3045422	0		==			
ANR	3045460	Identifier	reap_descrip		3045422	0					
ANR	3045461	Identifier	NULL		3045422	1					
ANR	3045462	PrimaryExpression	"""[Not specified]"""		3045422	1					
ANR	3045463	Identifier	reap_descrip		3045422	2					
ANR	3045464	ExpressionStatement	"EXCEPT ( ""# of reaper handlers exceeded specified maximum"" )"	2338:3:66920:66977	3045422	1	True				
ANR	3045465	CallExpression	"EXCEPT ( ""# of reaper handlers exceeded specified maximum"" )"		3045422	0					
ANR	3045466	Callee	EXCEPT		3045422	0					
ANR	3045467	Identifier	EXCEPT		3045422	0					
ANR	3045468	ArgumentList	"""# of reaper handlers exceeded specified maximum"""		3045422	1					
ANR	3045469	Argument	"""# of reaper handlers exceeded specified maximum"""		3045422	0					
ANR	3045470	PrimaryExpression	"""# of reaper handlers exceeded specified maximum"""		3045422	0					
ANR	3045471	ForStatement	"for ( i = nReap % maxReap , j = 0 ; j < maxReap ; j ++ , i = ( i + 1 ) % maxReap )"		3045422	1					
ANR	3045472	ForInit	"i = nReap % maxReap , j = 0 ;"	2342:6:67101:67125	3045422	0	True				
ANR	3045473	Expression	"i = nReap % maxReap , j = 0"		3045422	0					
ANR	3045474	AssignmentExpression	i = nReap % maxReap		3045422	0		=			
ANR	3045475	Identifier	i		3045422	0					
ANR	3045476	MultiplicativeExpression	nReap % maxReap		3045422	1		%			
ANR	3045477	Identifier	nReap		3045422	0					
ANR	3045478	Identifier	maxReap		3045422	1					
ANR	3045479	AssignmentExpression	j = 0		3045422	1		=			
ANR	3045480	Identifier	j		3045422	0					
ANR	3045481	PrimaryExpression	0		3045422	1					
ANR	3045482	Condition	j < maxReap	2342:32:67127:67137	3045422	1	True				
ANR	3045483	RelationalExpression	j < maxReap		3045422	0		<			
ANR	3045484	Identifier	j		3045422	0					
ANR	3045485	Identifier	maxReap		3045422	1					
ANR	3045486	Expression	"j ++ , i = ( i + 1 ) % maxReap"	2342:45:67140:67165	3045422	2	True				
ANR	3045487	PostIncDecOperationExpression	j ++		3045422	0					
ANR	3045488	Identifier	j		3045422	0					
ANR	3045489	IncDec	++		3045422	1					
ANR	3045490	AssignmentExpression	i = ( i + 1 ) % maxReap		3045422	1		=			
ANR	3045491	Identifier	i		3045422	0					
ANR	3045492	MultiplicativeExpression	( i + 1 ) % maxReap		3045422	1		%			
ANR	3045493	AdditiveExpression	i + 1		3045422	0		+			
ANR	3045494	Identifier	i		3045422	0					
ANR	3045495	PrimaryExpression	1		3045422	1					
ANR	3045496	Identifier	maxReap		3045422	1					
ANR	3045497	CompoundStatement		29:2:1129:1129	3045422	3					
ANR	3045498	IfStatement	if ( reapTable [ i ] . num == 0 )		3045422	0					
ANR	3045499	Condition	reapTable [ i ] . num == 0	2344:8:67180:67200	3045422	0	True				
ANR	3045500	EqualityExpression	reapTable [ i ] . num == 0		3045422	0		==			
ANR	3045501	MemberAccess	reapTable [ i ] . num		3045422	0					
ANR	3045502	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045503	Identifier	reapTable		3045422	0					
ANR	3045504	Identifier	i		3045422	1					
ANR	3045505	Identifier	num		3045422	1					
ANR	3045506	PrimaryExpression	0		3045422	1					
ANR	3045507	CompoundStatement		30:32:1163:1163	3045422	1					
ANR	3045508	BreakStatement	break ;	2345:4:67210:67215	3045422	0	True				
ANR	3045509	ElseStatement	else		3045422	0					
ANR	3045510	CompoundStatement		32:10:1186:1186	3045422	0					
ANR	3045511	IfStatement	if ( reapTable [ i ] . num != i + 1 )		3045422	0					
ANR	3045512	Condition	reapTable [ i ] . num != i + 1	2347:9:67238:67262	3045422	0	True				
ANR	3045513	EqualityExpression	reapTable [ i ] . num != i + 1		3045422	0		!=			
ANR	3045514	MemberAccess	reapTable [ i ] . num		3045422	0					
ANR	3045515	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045516	Identifier	reapTable		3045422	0					
ANR	3045517	Identifier	i		3045422	1					
ANR	3045518	Identifier	num		3045422	1					
ANR	3045519	AdditiveExpression	i + 1		3045422	1		+			
ANR	3045520	Identifier	i		3045422	0					
ANR	3045521	PrimaryExpression	1		3045422	1					
ANR	3045522	CompoundStatement		33:37:1225:1225	3045422	1					
ANR	3045523	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unable to register reaper with description: %s\\n"" , reap_descrip == NULL ? ""[Not specified]"" : reap_descrip )"	2348:5:67273:67406	3045422	0	True				
ANR	3045524	CallExpression	"dprintf ( D_ALWAYS , ""Unable to register reaper with description: %s\\n"" , reap_descrip == NULL ? ""[Not specified]"" : reap_descrip )"		3045422	0					
ANR	3045525	Callee	dprintf		3045422	0					
ANR	3045526	Identifier	dprintf		3045422	0					
ANR	3045527	ArgumentList	D_ALWAYS		3045422	1					
ANR	3045528	Argument	D_ALWAYS		3045422	0					
ANR	3045529	Identifier	D_ALWAYS		3045422	0					
ANR	3045530	Argument	"""Unable to register reaper with description: %s\\n"""		3045422	1					
ANR	3045531	PrimaryExpression	"""Unable to register reaper with description: %s\\n"""		3045422	0					
ANR	3045532	Argument	"reap_descrip == NULL ? ""[Not specified]"" : reap_descrip"		3045422	2					
ANR	3045533	ConditionalExpression	"reap_descrip == NULL ? ""[Not specified]"" : reap_descrip"		3045422	0					
ANR	3045534	Condition	reap_descrip == NULL		3045422	0					
ANR	3045535	EqualityExpression	reap_descrip == NULL		3045422	0		==			
ANR	3045536	Identifier	reap_descrip		3045422	0					
ANR	3045537	Identifier	NULL		3045422	1					
ANR	3045538	PrimaryExpression	"""[Not specified]"""		3045422	1					
ANR	3045539	Identifier	reap_descrip		3045422	2					
ANR	3045540	ExpressionStatement	"EXCEPT ( ""reaper table messed up"" )"	2351:5:67413:67445	3045422	1	True				
ANR	3045541	CallExpression	"EXCEPT ( ""reaper table messed up"" )"		3045422	0					
ANR	3045542	Callee	EXCEPT		3045422	0					
ANR	3045543	Identifier	EXCEPT		3045422	0					
ANR	3045544	ArgumentList	"""reaper table messed up"""		3045422	1					
ANR	3045545	Argument	"""reaper table messed up"""		3045422	0					
ANR	3045546	PrimaryExpression	"""reaper table messed up"""		3045422	0					
ANR	3045547	ExpressionStatement	nReap ++	2355:2:67464:67471	3045422	2	True				
ANR	3045548	PostIncDecOperationExpression	nReap ++		3045422	0					
ANR	3045549	Identifier	nReap		3045422	0					
ANR	3045550	IncDec	++		3045422	1					
ANR	3045551	ExpressionStatement	rid = i + 1	2356:2:67524:67535	3045422	3	True				
ANR	3045552	AssignmentExpression	rid = i + 1		3045422	0		=			
ANR	3045553	Identifier	rid		3045422	0					
ANR	3045554	AdditiveExpression	i + 1		3045422	1		+			
ANR	3045555	Identifier	i		3045422	0					
ANR	3045556	PrimaryExpression	1		3045422	1					
ANR	3045557	ElseStatement	else		3045422	0					
ANR	3045558	CompoundStatement		43:8:1504:1504	3045422	0					
ANR	3045559	IfStatement	if ( ( rid < 1 ) || ( rid > maxReap ) )		3045422	0					
ANR	3045560	Condition	( rid < 1 ) || ( rid > maxReap )	2358:7:67554:67581	3045422	0	True				
ANR	3045561	OrExpression	( rid < 1 ) || ( rid > maxReap )		3045422	0		||			
ANR	3045562	RelationalExpression	rid < 1		3045422	0		<			
ANR	3045563	Identifier	rid		3045422	0					
ANR	3045564	PrimaryExpression	1		3045422	1					
ANR	3045565	RelationalExpression	rid > maxReap		3045422	1		>			
ANR	3045566	Identifier	rid		3045422	0					
ANR	3045567	Identifier	maxReap		3045422	1					
ANR	3045568	ReturnStatement	return FALSE ;	2359:3:67588:67600	3045422	1	True				
ANR	3045569	Identifier	FALSE		3045422	0					
ANR	3045570	IfStatement	if ( ( reapTable [ rid - 1 ] . num ) != rid )		3045422	1					
ANR	3045571	Condition	( reapTable [ rid - 1 ] . num ) != rid	2360:7:67637:67667	3045422	0	True				
ANR	3045572	EqualityExpression	( reapTable [ rid - 1 ] . num ) != rid		3045422	0		!=			
ANR	3045573	MemberAccess	reapTable [ rid - 1 ] . num		3045422	0					
ANR	3045574	ArrayIndexing	reapTable [ rid - 1 ]		3045422	0					
ANR	3045575	Identifier	reapTable		3045422	0					
ANR	3045576	AdditiveExpression	rid - 1		3045422	1		-			
ANR	3045577	Identifier	rid		3045422	0					
ANR	3045578	PrimaryExpression	1		3045422	1					
ANR	3045579	Identifier	num		3045422	1					
ANR	3045580	Identifier	rid		3045422	1					
ANR	3045581	ReturnStatement	return FALSE ;	2361:3:67674:67686	3045422	1	True				
ANR	3045582	Identifier	FALSE		3045422	0					
ANR	3045583	ExpressionStatement	i = rid - 1	2362:2:67736:67747	3045422	2	True				
ANR	3045584	AssignmentExpression	i = rid - 1		3045422	0		=			
ANR	3045585	Identifier	i		3045422	0					
ANR	3045586	AdditiveExpression	rid - 1		3045422	1		-			
ANR	3045587	Identifier	rid		3045422	0					
ANR	3045588	PrimaryExpression	1		3045422	1					
ANR	3045589	ExpressionStatement	reapTable [ i ] . num = rid	2366:1:67818:67840	3045422	3	True				
ANR	3045590	AssignmentExpression	reapTable [ i ] . num = rid		3045422	0		=			
ANR	3045591	MemberAccess	reapTable [ i ] . num		3045422	0					
ANR	3045592	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045593	Identifier	reapTable		3045422	0					
ANR	3045594	Identifier	i		3045422	1					
ANR	3045595	Identifier	num		3045422	1					
ANR	3045596	Identifier	rid		3045422	1					
ANR	3045597	ExpressionStatement	reapTable [ i ] . handler = handler	2367:1:67843:67873	3045422	4	True				
ANR	3045598	AssignmentExpression	reapTable [ i ] . handler = handler		3045422	0		=			
ANR	3045599	MemberAccess	reapTable [ i ] . handler		3045422	0					
ANR	3045600	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045601	Identifier	reapTable		3045422	0					
ANR	3045602	Identifier	i		3045422	1					
ANR	3045603	Identifier	handler		3045422	1					
ANR	3045604	Identifier	handler		3045422	1					
ANR	3045605	ExpressionStatement	reapTable [ i ] . handlercpp = handlercpp	2368:1:67876:67912	3045422	5	True				
ANR	3045606	AssignmentExpression	reapTable [ i ] . handlercpp = handlercpp		3045422	0		=			
ANR	3045607	MemberAccess	reapTable [ i ] . handlercpp		3045422	0					
ANR	3045608	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045609	Identifier	reapTable		3045422	0					
ANR	3045610	Identifier	i		3045422	1					
ANR	3045611	Identifier	handlercpp		3045422	1					
ANR	3045612	Identifier	handlercpp		3045422	1					
ANR	3045613	ExpressionStatement	reapTable [ i ] . is_cpp = is_cpp	2369:1:67915:67943	3045422	6	True				
ANR	3045614	AssignmentExpression	reapTable [ i ] . is_cpp = is_cpp		3045422	0		=			
ANR	3045615	MemberAccess	reapTable [ i ] . is_cpp		3045422	0					
ANR	3045616	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045617	Identifier	reapTable		3045422	0					
ANR	3045618	Identifier	i		3045422	1					
ANR	3045619	Identifier	is_cpp		3045422	1					
ANR	3045620	Identifier	is_cpp		3045422	1					
ANR	3045621	ExpressionStatement	reapTable [ i ] . service = s	2370:1:67946:67970	3045422	7	True				
ANR	3045622	AssignmentExpression	reapTable [ i ] . service = s		3045422	0		=			
ANR	3045623	MemberAccess	reapTable [ i ] . service		3045422	0					
ANR	3045624	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045625	Identifier	reapTable		3045422	0					
ANR	3045626	Identifier	i		3045422	1					
ANR	3045627	Identifier	service		3045422	1					
ANR	3045628	Identifier	s		3045422	1					
ANR	3045629	ExpressionStatement	reapTable [ i ] . data_ptr = NULL	2371:1:67973:68001	3045422	8	True				
ANR	3045630	AssignmentExpression	reapTable [ i ] . data_ptr = NULL		3045422	0		=			
ANR	3045631	MemberAccess	reapTable [ i ] . data_ptr		3045422	0					
ANR	3045632	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045633	Identifier	reapTable		3045422	0					
ANR	3045634	Identifier	i		3045422	1					
ANR	3045635	Identifier	data_ptr		3045422	1					
ANR	3045636	Identifier	NULL		3045422	1					
ANR	3045637	ExpressionStatement	free ( reapTable [ i ] . reap_descrip )	2372:1:68004:68035	3045422	9	True				
ANR	3045638	CallExpression	free ( reapTable [ i ] . reap_descrip )		3045422	0					
ANR	3045639	Callee	free		3045422	0					
ANR	3045640	Identifier	free		3045422	0					
ANR	3045641	ArgumentList	reapTable [ i ] . reap_descrip		3045422	1					
ANR	3045642	Argument	reapTable [ i ] . reap_descrip		3045422	0					
ANR	3045643	MemberAccess	reapTable [ i ] . reap_descrip		3045422	0					
ANR	3045644	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045645	Identifier	reapTable		3045422	0					
ANR	3045646	Identifier	i		3045422	1					
ANR	3045647	Identifier	reap_descrip		3045422	1					
ANR	3045648	IfStatement	if ( reap_descrip )		3045422	10					
ANR	3045649	Condition	reap_descrip	2373:6:68043:68054	3045422	0	True				
ANR	3045650	Identifier	reap_descrip		3045422	0					
ANR	3045651	ExpressionStatement	reapTable [ i ] . reap_descrip = strdup ( reap_descrip )	2374:2:68060:68108	3045422	1	True				
ANR	3045652	AssignmentExpression	reapTable [ i ] . reap_descrip = strdup ( reap_descrip )		3045422	0		=			
ANR	3045653	MemberAccess	reapTable [ i ] . reap_descrip		3045422	0					
ANR	3045654	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045655	Identifier	reapTable		3045422	0					
ANR	3045656	Identifier	i		3045422	1					
ANR	3045657	Identifier	reap_descrip		3045422	1					
ANR	3045658	CallExpression	strdup ( reap_descrip )		3045422	1					
ANR	3045659	Callee	strdup		3045422	0					
ANR	3045660	Identifier	strdup		3045422	0					
ANR	3045661	ArgumentList	reap_descrip		3045422	1					
ANR	3045662	Argument	reap_descrip		3045422	0					
ANR	3045663	Identifier	reap_descrip		3045422	0					
ANR	3045664	ElseStatement	else		3045422	0					
ANR	3045665	ExpressionStatement	reapTable [ i ] . reap_descrip = strdup ( EMPTY_DESCRIP )	2376:2:68118:68167	3045422	0	True				
ANR	3045666	AssignmentExpression	reapTable [ i ] . reap_descrip = strdup ( EMPTY_DESCRIP )		3045422	0		=			
ANR	3045667	MemberAccess	reapTable [ i ] . reap_descrip		3045422	0					
ANR	3045668	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045669	Identifier	reapTable		3045422	0					
ANR	3045670	Identifier	i		3045422	1					
ANR	3045671	Identifier	reap_descrip		3045422	1					
ANR	3045672	CallExpression	strdup ( EMPTY_DESCRIP )		3045422	1					
ANR	3045673	Callee	strdup		3045422	0					
ANR	3045674	Identifier	strdup		3045422	0					
ANR	3045675	ArgumentList	EMPTY_DESCRIP		3045422	1					
ANR	3045676	Argument	EMPTY_DESCRIP		3045422	0					
ANR	3045677	Identifier	EMPTY_DESCRIP		3045422	0					
ANR	3045678	ExpressionStatement	free ( reapTable [ i ] . handler_descrip )	2377:1:68170:68204	3045422	11	True				
ANR	3045679	CallExpression	free ( reapTable [ i ] . handler_descrip )		3045422	0					
ANR	3045680	Callee	free		3045422	0					
ANR	3045681	Identifier	free		3045422	0					
ANR	3045682	ArgumentList	reapTable [ i ] . handler_descrip		3045422	1					
ANR	3045683	Argument	reapTable [ i ] . handler_descrip		3045422	0					
ANR	3045684	MemberAccess	reapTable [ i ] . handler_descrip		3045422	0					
ANR	3045685	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045686	Identifier	reapTable		3045422	0					
ANR	3045687	Identifier	i		3045422	1					
ANR	3045688	Identifier	handler_descrip		3045422	1					
ANR	3045689	IfStatement	if ( handler_descrip )		3045422	12					
ANR	3045690	Condition	handler_descrip	2378:6:68212:68226	3045422	0	True				
ANR	3045691	Identifier	handler_descrip		3045422	0					
ANR	3045692	ExpressionStatement	reapTable [ i ] . handler_descrip = strdup ( handler_descrip )	2379:2:68232:68286	3045422	1	True				
ANR	3045693	AssignmentExpression	reapTable [ i ] . handler_descrip = strdup ( handler_descrip )		3045422	0		=			
ANR	3045694	MemberAccess	reapTable [ i ] . handler_descrip		3045422	0					
ANR	3045695	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045696	Identifier	reapTable		3045422	0					
ANR	3045697	Identifier	i		3045422	1					
ANR	3045698	Identifier	handler_descrip		3045422	1					
ANR	3045699	CallExpression	strdup ( handler_descrip )		3045422	1					
ANR	3045700	Callee	strdup		3045422	0					
ANR	3045701	Identifier	strdup		3045422	0					
ANR	3045702	ArgumentList	handler_descrip		3045422	1					
ANR	3045703	Argument	handler_descrip		3045422	0					
ANR	3045704	Identifier	handler_descrip		3045422	0					
ANR	3045705	ElseStatement	else		3045422	0					
ANR	3045706	ExpressionStatement	reapTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	2381:2:68296:68348	3045422	0	True				
ANR	3045707	AssignmentExpression	reapTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		3045422	0		=			
ANR	3045708	MemberAccess	reapTable [ i ] . handler_descrip		3045422	0					
ANR	3045709	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045710	Identifier	reapTable		3045422	0					
ANR	3045711	Identifier	i		3045422	1					
ANR	3045712	Identifier	handler_descrip		3045422	1					
ANR	3045713	CallExpression	strdup ( EMPTY_DESCRIP )		3045422	1					
ANR	3045714	Callee	strdup		3045422	0					
ANR	3045715	Identifier	strdup		3045422	0					
ANR	3045716	ArgumentList	EMPTY_DESCRIP		3045422	1					
ANR	3045717	Argument	EMPTY_DESCRIP		3045422	0					
ANR	3045718	Identifier	EMPTY_DESCRIP		3045422	0					
ANR	3045719	ExpressionStatement	curr_regdataptr = & ( reapTable [ i ] . data_ptr )	2384:1:68396:68438	3045422	13	True				
ANR	3045720	AssignmentExpression	curr_regdataptr = & ( reapTable [ i ] . data_ptr )		3045422	0		=			
ANR	3045721	Identifier	curr_regdataptr		3045422	0					
ANR	3045722	UnaryOperationExpression	& ( reapTable [ i ] . data_ptr )		3045422	1					
ANR	3045723	UnaryOperator	&		3045422	0					
ANR	3045724	MemberAccess	reapTable [ i ] . data_ptr		3045422	1					
ANR	3045725	ArrayIndexing	reapTable [ i ]		3045422	0					
ANR	3045726	Identifier	reapTable		3045422	0					
ANR	3045727	Identifier	i		3045422	1					
ANR	3045728	Identifier	data_ptr		3045422	1					
ANR	3045729	ExpressionStatement	DumpReapTable ( D_FULLDEBUG | D_DAEMONCORE )	2387:1:68491:68532	3045422	14	True				
ANR	3045730	CallExpression	DumpReapTable ( D_FULLDEBUG | D_DAEMONCORE )		3045422	0					
ANR	3045731	Callee	DumpReapTable		3045422	0					
ANR	3045732	Identifier	DumpReapTable		3045422	0					
ANR	3045733	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		3045422	1					
ANR	3045734	Argument	D_FULLDEBUG | D_DAEMONCORE		3045422	0					
ANR	3045735	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		3045422	0		|			
ANR	3045736	Identifier	D_FULLDEBUG		3045422	0					
ANR	3045737	Identifier	D_DAEMONCORE		3045422	1					
ANR	3045738	ReturnStatement	return rid ;	2389:1:68536:68546	3045422	15	True				
ANR	3045739	Identifier	rid		3045422	0					
ANR	3045740	ReturnType	int		3045422	1					
ANR	3045741	Identifier	DaemonCore :: Register_Reaper		3045422	2					
ANR	3045742	ParameterList	"int rid , const char * reap_descrip , ReaperHandler handler , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s , int is_cpp"		3045422	3					
ANR	3045743	Parameter	int rid	2312:32:65892:65898	3045422	0	True				
ANR	3045744	ParameterType	int		3045422	0					
ANR	3045745	Identifier	rid		3045422	1					
ANR	3045746	Parameter	const char * reap_descrip	2312:41:65901:65924	3045422	1	True				
ANR	3045747	ParameterType	const char *		3045422	0					
ANR	3045748	Identifier	reap_descrip		3045422	1					
ANR	3045749	Parameter	ReaperHandler handler	2313:4:65931:65951	3045422	2	True				
ANR	3045750	ParameterType	ReaperHandler		3045422	0					
ANR	3045751	Identifier	handler		3045422	1					
ANR	3045752	Parameter	ReaperHandlercpp handlercpp	2313:27:65954:65980	3045422	3	True				
ANR	3045753	ParameterType	ReaperHandlercpp		3045422	0					
ANR	3045754	Identifier	handlercpp		3045422	1					
ANR	3045755	Parameter	const char * handler_descrip	2314:4:65987:66013	3045422	4	True				
ANR	3045756	ParameterType	const char *		3045422	0					
ANR	3045757	Identifier	handler_descrip		3045422	1					
ANR	3045758	Parameter	Service * s	2314:33:66016:66025	3045422	5	True				
ANR	3045759	ParameterType	Service *		3045422	0					
ANR	3045760	Identifier	s		3045422	1					
ANR	3045761	Parameter	int is_cpp	2314:45:66028:66037	3045422	6	True				
ANR	3045762	ParameterType	int		3045422	0					
ANR	3045763	Identifier	is_cpp		3045422	1					
ANR	3045764	CFGEntryNode	ENTRY		3045422		True				
ANR	3045765	CFGExitNode	EXIT		3045422		True				
ANR	3045766	Symbol	curr_regdataptr		3045422						
ANR	3045767	Symbol	handler		3045422						
ANR	3045768	Symbol	reapTable [ i ] . data_ptr		3045422						
ANR	3045769	Symbol	nReap		3045422						
ANR	3045770	Symbol	rid		3045422						
ANR	3045771	Symbol	handler_descrip		3045422						
ANR	3045772	Symbol	reapTable [ i ] . num		3045422						
ANR	3045773	Symbol	reapTable [ i ] . handler		3045422						
ANR	3045774	Symbol	handlercpp		3045422						
ANR	3045775	Symbol	& reapTable [ i ] . data_ptr		3045422						
ANR	3045776	Symbol	is_cpp		3045422						
ANR	3045777	Symbol	reapTable [ i ] . is_cpp		3045422						
ANR	3045778	Symbol	NULL		3045422						
ANR	3045779	Symbol	D_DAEMONCORE		3045422						
ANR	3045780	Symbol	reapTable [ i ] . service		3045422						
ANR	3045781	Symbol	D_ALWAYS		3045422						
ANR	3045782	Symbol	reapTable [ i ] . reap_descrip		3045422						
ANR	3045783	Symbol	i		3045422						
ANR	3045784	Symbol	maxReap		3045422						
ANR	3045785	Symbol	j		3045422						
ANR	3045786	Symbol	D_FULLDEBUG		3045422						
ANR	3045787	Symbol	reapTable [ rid - 1 ] . num		3045422						
ANR	3045788	Symbol	s		3045422						
ANR	3045789	Symbol	* i		3045422						
ANR	3045790	Symbol	reapTable		3045422						
ANR	3045791	Symbol	EMPTY_DESCRIP		3045422						
ANR	3045792	Symbol	reapTable [ i ] . handler_descrip		3045422						
ANR	3045793	Symbol	* rid		3045422						
ANR	3045794	Symbol	reapTable [ i ] . handlercpp		3045422						
ANR	3045795	Symbol	* reapTable		3045422						
ANR	3045796	Symbol	FALSE		3045422						
ANR	3045797	Symbol	strdup		3045422						
ANR	3045798	Symbol	reap_descrip		3045422						
ANR	3045799	Function	DaemonCore :: Lookup_Socket	2393:0:68552:68709							
ANR	3045800	FunctionDef	DaemonCore :: Lookup_Socket (Stream * insock)		3045799	0					
ANR	3045801	CompoundStatement		2394:0:68600:68709	3045799	0					
ANR	3045802	ForStatement	for ( int i = 0 ; i < nSock ; i ++ )		3045799	0					
ANR	3045803	ForInit	int i = 0 ;	2395:6:68608:68615	3045799	0	True				
ANR	3045804	IdentifierDeclStatement	int i = 0 ;		3045799	0					
ANR	3045805	IdentifierDecl	i = 0		3045799	0					
ANR	3045806	IdentifierDeclType	int		3045799	0					
ANR	3045807	Identifier	i		3045799	1					
ANR	3045808	AssignmentExpression	i = 0		3045799	2		=			
ANR	3045809	Identifier	i		3045799	0					
ANR	3045810	PrimaryExpression	0		3045799	1					
ANR	3045811	Condition	i < nSock	2395:15:68617:68625	3045799	1	True				
ANR	3045812	RelationalExpression	i < nSock		3045799	0		<			
ANR	3045813	Identifier	i		3045799	0					
ANR	3045814	Identifier	nSock		3045799	1					
ANR	3045815	PostIncDecOperationExpression	i ++	2395:26:68628:68630	3045799	2	True				
ANR	3045816	Identifier	i		3045799	0					
ANR	3045817	IncDec	++		3045799	1					
ANR	3045818	CompoundStatement		2:31:32:32	3045799	3					
ANR	3045819	IfStatement	if ( ( * sockTable ) [ i ] . iosock == insock )		3045799	0					
ANR	3045820	Condition	( * sockTable ) [ i ] . iosock == insock	2396:6:68641:68672	3045799	0	True				
ANR	3045821	EqualityExpression	( * sockTable ) [ i ] . iosock == insock		3045799	0		==			
ANR	3045822	MemberAccess	( * sockTable ) [ i ] . iosock		3045799	0					
ANR	3045823	ArrayIndexing	( * sockTable ) [ i ]		3045799	0					
ANR	3045824	UnaryOperationExpression	* sockTable		3045799	0					
ANR	3045825	UnaryOperator	*		3045799	0					
ANR	3045826	Identifier	sockTable		3045799	1					
ANR	3045827	Identifier	i		3045799	1					
ANR	3045828	Identifier	iosock		3045799	1					
ANR	3045829	Identifier	insock		3045799	1					
ANR	3045830	CompoundStatement		3:40:74:74	3045799	1					
ANR	3045831	ReturnStatement	return i ;	2397:3:68680:68688	3045799	0	True				
ANR	3045832	Identifier	i		3045799	0					
ANR	3045833	ReturnStatement	return - 1 ;	2400:1:68698:68707	3045799	1	True				
ANR	3045834	UnaryOperationExpression	- 1		3045799	0					
ANR	3045835	UnaryOperator	-		3045799	0					
ANR	3045836	PrimaryExpression	1		3045799	1					
ANR	3045837	ReturnType	int		3045799	1					
ANR	3045838	Identifier	DaemonCore :: Lookup_Socket		3045799	2					
ANR	3045839	ParameterList	Stream * insock		3045799	3					
ANR	3045840	Parameter	Stream * insock	2393:31:68583:68596	3045799	0	True				
ANR	3045841	ParameterType	Stream *		3045799	0					
ANR	3045842	Identifier	insock		3045799	1					
ANR	3045843	CFGEntryNode	ENTRY		3045799		True				
ANR	3045844	CFGExitNode	EXIT		3045799		True				
ANR	3045845	Symbol	* i		3045799						
ANR	3045846	Symbol	* sockTable		3045799						
ANR	3045847	Symbol	nSock		3045799						
ANR	3045848	Symbol	sockTable		3045799						
ANR	3045849	Symbol	( * sockTable ) [ i ] . iosock		3045799						
ANR	3045850	Symbol	insock		3045799						
ANR	3045851	Symbol	i		3045799						
ANR	3045852	Symbol	* * sockTable		3045799						
ANR	3045853	Function	DaemonCore :: Dump	2413:0:68867:69047							
ANR	3045854	FunctionDef	"DaemonCore :: Dump (int flag , const char * indent)"		3045853	0					
ANR	3045855	CompoundStatement		2414:0:68919:69047	3045853	0					
ANR	3045856	ExpressionStatement	"DumpCommandTable ( flag , indent )"	2415:1:68922:68952	3045853	0	True				
ANR	3045857	CallExpression	"DumpCommandTable ( flag , indent )"		3045853	0					
ANR	3045858	Callee	DumpCommandTable		3045853	0					
ANR	3045859	Identifier	DumpCommandTable		3045853	0					
ANR	3045860	ArgumentList	flag		3045853	1					
ANR	3045861	Argument	flag		3045853	0					
ANR	3045862	Identifier	flag		3045853	0					
ANR	3045863	Argument	indent		3045853	1					
ANR	3045864	Identifier	indent		3045853	0					
ANR	3045865	ExpressionStatement	"DumpSigTable ( flag , indent )"	2416:1:68955:68981	3045853	1	True				
ANR	3045866	CallExpression	"DumpSigTable ( flag , indent )"		3045853	0					
ANR	3045867	Callee	DumpSigTable		3045853	0					
ANR	3045868	Identifier	DumpSigTable		3045853	0					
ANR	3045869	ArgumentList	flag		3045853	1					
ANR	3045870	Argument	flag		3045853	0					
ANR	3045871	Identifier	flag		3045853	0					
ANR	3045872	Argument	indent		3045853	1					
ANR	3045873	Identifier	indent		3045853	0					
ANR	3045874	ExpressionStatement	"DumpSocketTable ( flag , indent )"	2417:1:68984:69013	3045853	2	True				
ANR	3045875	CallExpression	"DumpSocketTable ( flag , indent )"		3045853	0					
ANR	3045876	Callee	DumpSocketTable		3045853	0					
ANR	3045877	Identifier	DumpSocketTable		3045853	0					
ANR	3045878	ArgumentList	flag		3045853	1					
ANR	3045879	Argument	flag		3045853	0					
ANR	3045880	Identifier	flag		3045853	0					
ANR	3045881	Argument	indent		3045853	1					
ANR	3045882	Identifier	indent		3045853	0					
ANR	3045883	ExpressionStatement	"t . DumpTimerList ( flag , indent )"	2418:1:69016:69045	3045853	3	True				
ANR	3045884	CallExpression	"t . DumpTimerList ( flag , indent )"		3045853	0					
ANR	3045885	Callee	t . DumpTimerList		3045853	0					
ANR	3045886	MemberAccess	t . DumpTimerList		3045853	0					
ANR	3045887	Identifier	t		3045853	0					
ANR	3045888	Identifier	DumpTimerList		3045853	1					
ANR	3045889	ArgumentList	flag		3045853	1					
ANR	3045890	Argument	flag		3045853	0					
ANR	3045891	Identifier	flag		3045853	0					
ANR	3045892	Argument	indent		3045853	1					
ANR	3045893	Identifier	indent		3045853	0					
ANR	3045894	ReturnType	void		3045853	1					
ANR	3045895	Identifier	DaemonCore :: Dump		3045853	2					
ANR	3045896	ParameterList	"int flag , const char * indent"		3045853	3					
ANR	3045897	Parameter	int flag	2413:22:68889:68896	3045853	0	True				
ANR	3045898	ParameterType	int		3045853	0					
ANR	3045899	Identifier	flag		3045853	1					
ANR	3045900	Parameter	const char * indent	2413:32:68899:68916	3045853	1	True				
ANR	3045901	ParameterType	const char *		3045853	0					
ANR	3045902	Identifier	indent		3045853	1					
ANR	3045903	CFGEntryNode	ENTRY		3045853		True				
ANR	3045904	CFGExitNode	EXIT		3045853		True				
ANR	3045905	Symbol	flag		3045853						
ANR	3045906	Symbol	t		3045853						
ANR	3045907	Symbol	indent		3045853						
ANR	3045908	Function	DaemonCore :: DumpCommandTable	2421:0:69050:70095							
ANR	3045909	FunctionDef	"DaemonCore :: DumpCommandTable (int flag , const char * indent)"		3045908	0					
ANR	3045910	CompoundStatement		2422:0:69114:70095	3045908	0					
ANR	3045911	IdentifierDeclStatement	int i ;	2423:1:69117:69124	3045908	0	True				
ANR	3045912	IdentifierDecl	i		3045908	0					
ANR	3045913	IdentifierDeclType	int		3045908	0					
ANR	3045914	Identifier	i		3045908	1					
ANR	3045915	IdentifierDeclStatement	const char * descrip1 ;	2424:1:69127:69147	3045908	1	True				
ANR	3045916	IdentifierDecl	* descrip1		3045908	0					
ANR	3045917	IdentifierDeclType	const char *		3045908	0					
ANR	3045918	Identifier	descrip1		3045908	1					
ANR	3045919	IdentifierDeclStatement	const char * descrip2 ;	2425:1:69150:69170	3045908	2	True				
ANR	3045920	IdentifierDecl	* descrip2		3045908	0					
ANR	3045921	IdentifierDeclType	const char *		3045908	0					
ANR	3045922	Identifier	descrip2		3045908	1					
ANR	3045923	IfStatement	if ( ( flag & DebugFlags ) != flag )		3045908	3					
ANR	3045924	Condition	( flag & DebugFlags ) != flag	2432:6:69461:69487	3045908	0	True				
ANR	3045925	EqualityExpression	( flag & DebugFlags ) != flag		3045908	0		!=			
ANR	3045926	BitAndExpression	flag & DebugFlags		3045908	0		&			
ANR	3045927	Identifier	flag		3045908	0					
ANR	3045928	Identifier	DebugFlags		3045908	1					
ANR	3045929	Identifier	flag		3045908	1					
ANR	3045930	ReturnStatement	return ;	2433:2:69493:69499	3045908	1	True				
ANR	3045931	IfStatement	if ( indent == NULL )		3045908	4					
ANR	3045932	Condition	indent == NULL	2435:6:69508:69521	3045908	0	True				
ANR	3045933	EqualityExpression	indent == NULL		3045908	0		==			
ANR	3045934	Identifier	indent		3045908	0					
ANR	3045935	Identifier	NULL		3045908	1					
ANR	3045936	ExpressionStatement	indent = DEFAULT_INDENT	2436:2:69526:69549	3045908	1	True				
ANR	3045937	AssignmentExpression	indent = DEFAULT_INDENT		3045908	0		=			
ANR	3045938	Identifier	indent		3045908	0					
ANR	3045939	Identifier	DEFAULT_INDENT		3045908	1					
ANR	3045940	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2438:1:69553:69571	3045908	5	True				
ANR	3045941	CallExpression	"dprintf ( flag , ""\\n"" )"		3045908	0					
ANR	3045942	Callee	dprintf		3045908	0					
ANR	3045943	Identifier	dprintf		3045908	0					
ANR	3045944	ArgumentList	flag		3045908	1					
ANR	3045945	Argument	flag		3045908	0					
ANR	3045946	Identifier	flag		3045908	0					
ANR	3045947	Argument	"""\\n"""		3045908	1					
ANR	3045948	PrimaryExpression	"""\\n"""		3045908	0					
ANR	3045949	ExpressionStatement	"dprintf ( flag , ""%sCommands Registered\\n"" , indent )"	2439:1:69574:69622	3045908	6	True				
ANR	3045950	CallExpression	"dprintf ( flag , ""%sCommands Registered\\n"" , indent )"		3045908	0					
ANR	3045951	Callee	dprintf		3045908	0					
ANR	3045952	Identifier	dprintf		3045908	0					
ANR	3045953	ArgumentList	flag		3045908	1					
ANR	3045954	Argument	flag		3045908	0					
ANR	3045955	Identifier	flag		3045908	0					
ANR	3045956	Argument	"""%sCommands Registered\\n"""		3045908	1					
ANR	3045957	PrimaryExpression	"""%sCommands Registered\\n"""		3045908	0					
ANR	3045958	Argument	indent		3045908	2					
ANR	3045959	Identifier	indent		3045908	0					
ANR	3045960	ExpressionStatement	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"	2440:1:69625:69673	3045908	7	True				
ANR	3045961	CallExpression	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"		3045908	0					
ANR	3045962	Callee	dprintf		3045908	0					
ANR	3045963	Identifier	dprintf		3045908	0					
ANR	3045964	ArgumentList	flag		3045908	1					
ANR	3045965	Argument	flag		3045908	0					
ANR	3045966	Identifier	flag		3045908	0					
ANR	3045967	Argument	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		3045908	1					
ANR	3045968	PrimaryExpression	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		3045908	0					
ANR	3045969	Argument	indent		3045908	2					
ANR	3045970	Identifier	indent		3045908	0					
ANR	3045971	ForStatement	for ( i = 0 ; i < maxCommand ; i ++ )		3045908	8					
ANR	3045972	ForInit	i = 0 ;	2441:6:69681:69686	3045908	0	True				
ANR	3045973	AssignmentExpression	i = 0		3045908	0		=			
ANR	3045974	Identifier	i		3045908	0					
ANR	3045975	PrimaryExpression	0		3045908	1					
ANR	3045976	Condition	i < maxCommand	2441:13:69688:69701	3045908	1	True				
ANR	3045977	RelationalExpression	i < maxCommand		3045908	0		<			
ANR	3045978	Identifier	i		3045908	0					
ANR	3045979	Identifier	maxCommand		3045908	1					
ANR	3045980	PostIncDecOperationExpression	i ++	2441:29:69704:69706	3045908	2	True				
ANR	3045981	Identifier	i		3045908	0					
ANR	3045982	IncDec	++		3045908	1					
ANR	3045983	CompoundStatement		20:34:594:594	3045908	3					
ANR	3045984	IfStatement	if ( comTable [ i ] . handler || comTable [ i ] . handlercpp )		3045908	0					
ANR	3045985	Condition	comTable [ i ] . handler || comTable [ i ] . handlercpp	2442:6:69717:69761	3045908	0	True				
ANR	3045986	OrExpression	comTable [ i ] . handler || comTable [ i ] . handlercpp		3045908	0		||			
ANR	3045987	MemberAccess	comTable [ i ] . handler		3045908	0					
ANR	3045988	ArrayIndexing	comTable [ i ]		3045908	0					
ANR	3045989	Identifier	comTable		3045908	0					
ANR	3045990	Identifier	i		3045908	1					
ANR	3045991	Identifier	handler		3045908	1					
ANR	3045992	MemberAccess	comTable [ i ] . handlercpp		3045908	1					
ANR	3045993	ArrayIndexing	comTable [ i ]		3045908	0					
ANR	3045994	Identifier	comTable		3045908	0					
ANR	3045995	Identifier	i		3045908	1					
ANR	3045996	Identifier	handlercpp		3045908	1					
ANR	3045997	CompoundStatement		22:2:652:652	3045908	1					
ANR	3045998	ExpressionStatement	"descrip1 = ""NULL"""	2444:3:69772:69789	3045908	0	True				
ANR	3045999	AssignmentExpression	"descrip1 = ""NULL"""		3045908	0		=			
ANR	3046000	Identifier	descrip1		3045908	0					
ANR	3046001	PrimaryExpression	"""NULL"""		3045908	1					
ANR	3046002	ExpressionStatement	descrip2 = descrip1	2445:3:69794:69813	3045908	1	True				
ANR	3046003	AssignmentExpression	descrip2 = descrip1		3045908	0		=			
ANR	3046004	Identifier	descrip2		3045908	0					
ANR	3046005	Identifier	descrip1		3045908	1					
ANR	3046006	IfStatement	if ( comTable [ i ] . command_descrip )		3045908	2					
ANR	3046007	Condition	comTable [ i ] . command_descrip	2446:8:69823:69849	3045908	0	True				
ANR	3046008	MemberAccess	comTable [ i ] . command_descrip		3045908	0					
ANR	3046009	ArrayIndexing	comTable [ i ]		3045908	0					
ANR	3046010	Identifier	comTable		3045908	0					
ANR	3046011	Identifier	i		3045908	1					
ANR	3046012	Identifier	command_descrip		3045908	1					
ANR	3046013	ExpressionStatement	descrip1 = comTable [ i ] . command_descrip	2447:4:69857:69895	3045908	1	True				
ANR	3046014	AssignmentExpression	descrip1 = comTable [ i ] . command_descrip		3045908	0		=			
ANR	3046015	Identifier	descrip1		3045908	0					
ANR	3046016	MemberAccess	comTable [ i ] . command_descrip		3045908	1					
ANR	3046017	ArrayIndexing	comTable [ i ]		3045908	0					
ANR	3046018	Identifier	comTable		3045908	0					
ANR	3046019	Identifier	i		3045908	1					
ANR	3046020	Identifier	command_descrip		3045908	1					
ANR	3046021	IfStatement	if ( comTable [ i ] . handler_descrip )		3045908	3					
ANR	3046022	Condition	comTable [ i ] . handler_descrip	2448:8:69905:69931	3045908	0	True				
ANR	3046023	MemberAccess	comTable [ i ] . handler_descrip		3045908	0					
ANR	3046024	ArrayIndexing	comTable [ i ]		3045908	0					
ANR	3046025	Identifier	comTable		3045908	0					
ANR	3046026	Identifier	i		3045908	1					
ANR	3046027	Identifier	handler_descrip		3045908	1					
ANR	3046028	ExpressionStatement	descrip2 = comTable [ i ] . handler_descrip	2449:4:69939:69977	3045908	1	True				
ANR	3046029	AssignmentExpression	descrip2 = comTable [ i ] . handler_descrip		3045908	0		=			
ANR	3046030	Identifier	descrip2		3045908	0					
ANR	3046031	MemberAccess	comTable [ i ] . handler_descrip		3045908	1					
ANR	3046032	ArrayIndexing	comTable [ i ]		3045908	0					
ANR	3046033	Identifier	comTable		3045908	0					
ANR	3046034	Identifier	i		3045908	1					
ANR	3046035	Identifier	handler_descrip		3045908	1					
ANR	3046036	ExpressionStatement	"dprintf ( flag , ""%s%d: %s %s\\n"" , indent , comTable [ i ] . num , descrip1 , descrip2 )"	2450:3:69982:70064	3045908	4	True				
ANR	3046037	CallExpression	"dprintf ( flag , ""%s%d: %s %s\\n"" , indent , comTable [ i ] . num , descrip1 , descrip2 )"		3045908	0					
ANR	3046038	Callee	dprintf		3045908	0					
ANR	3046039	Identifier	dprintf		3045908	0					
ANR	3046040	ArgumentList	flag		3045908	1					
ANR	3046041	Argument	flag		3045908	0					
ANR	3046042	Identifier	flag		3045908	0					
ANR	3046043	Argument	"""%s%d: %s %s\\n"""		3045908	1					
ANR	3046044	PrimaryExpression	"""%s%d: %s %s\\n"""		3045908	0					
ANR	3046045	Argument	indent		3045908	2					
ANR	3046046	Identifier	indent		3045908	0					
ANR	3046047	Argument	comTable [ i ] . num		3045908	3					
ANR	3046048	MemberAccess	comTable [ i ] . num		3045908	0					
ANR	3046049	ArrayIndexing	comTable [ i ]		3045908	0					
ANR	3046050	Identifier	comTable		3045908	0					
ANR	3046051	Identifier	i		3045908	1					
ANR	3046052	Identifier	num		3045908	1					
ANR	3046053	Argument	descrip1		3045908	4					
ANR	3046054	Identifier	descrip1		3045908	0					
ANR	3046055	Argument	descrip2		3045908	5					
ANR	3046056	Identifier	descrip2		3045908	0					
ANR	3046057	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2454:1:70074:70093	3045908	9	True				
ANR	3046058	CallExpression	"dprintf ( flag , ""\\n"" )"		3045908	0					
ANR	3046059	Callee	dprintf		3045908	0					
ANR	3046060	Identifier	dprintf		3045908	0					
ANR	3046061	ArgumentList	flag		3045908	1					
ANR	3046062	Argument	flag		3045908	0					
ANR	3046063	Identifier	flag		3045908	0					
ANR	3046064	Argument	"""\\n"""		3045908	1					
ANR	3046065	PrimaryExpression	"""\\n"""		3045908	0					
ANR	3046066	ReturnType	void		3045908	1					
ANR	3046067	Identifier	DaemonCore :: DumpCommandTable		3045908	2					
ANR	3046068	ParameterList	"int flag , const char * indent"		3045908	3					
ANR	3046069	Parameter	int flag	2421:34:69084:69091	3045908	0	True				
ANR	3046070	ParameterType	int		3045908	0					
ANR	3046071	Identifier	flag		3045908	1					
ANR	3046072	Parameter	const char * indent	2421:44:69094:69111	3045908	1	True				
ANR	3046073	ParameterType	const char *		3045908	0					
ANR	3046074	Identifier	indent		3045908	1					
ANR	3046075	CFGEntryNode	ENTRY		3045908		True				
ANR	3046076	CFGExitNode	EXIT		3045908		True				
ANR	3046077	Symbol	comTable [ i ] . command_descrip		3045908						
ANR	3046078	Symbol	flag		3045908						
ANR	3046079	Symbol	NULL		3045908						
ANR	3046080	Symbol	indent		3045908						
ANR	3046081	Symbol	DEFAULT_INDENT		3045908						
ANR	3046082	Symbol	i		3045908						
ANR	3046083	Symbol	DebugFlags		3045908						
ANR	3046084	Symbol	comTable [ i ] . num		3045908						
ANR	3046085	Symbol	* comTable		3045908						
ANR	3046086	Symbol	* i		3045908						
ANR	3046087	Symbol	comTable [ i ] . handler_descrip		3045908						
ANR	3046088	Symbol	comTable [ i ] . handler		3045908						
ANR	3046089	Symbol	comTable		3045908						
ANR	3046090	Symbol	descrip1		3045908						
ANR	3046091	Symbol	maxCommand		3045908						
ANR	3046092	Symbol	comTable [ i ] . handlercpp		3045908						
ANR	3046093	Symbol	descrip2		3045908						
ANR	3046094	Function	DaemonCore :: GetCommandsInAuthLevel	2457:0:70098:70769							
ANR	3046095	FunctionDef	"DaemonCore :: GetCommandsInAuthLevel (DCpermission perm , bool is_authenticated)"		3046094	0					
ANR	3046096	CompoundStatement		2457:85:70183:70769	3046094	0					
ANR	3046097	IdentifierDeclStatement	MyString res ;	2458:1:70186:70198	3046094	0	True				
ANR	3046098	IdentifierDecl	res		3046094	0					
ANR	3046099	IdentifierDeclType	MyString		3046094	0					
ANR	3046100	Identifier	res		3046094	1					
ANR	3046101	IdentifierDeclStatement	int i ;	2459:1:70201:70207	3046094	1	True				
ANR	3046102	IdentifierDecl	i		3046094	0					
ANR	3046103	IdentifierDeclType	int		3046094	0					
ANR	3046104	Identifier	i		3046094	1					
ANR	3046105	IdentifierDeclStatement	DCpermissionHierarchy hierarchy ( perm ) ;	2460:1:70210:70249	3046094	2	True				
ANR	3046106	IdentifierDecl	hierarchy ( perm )		3046094	0					
ANR	3046107	IdentifierDeclType	DCpermissionHierarchy		3046094	0					
ANR	3046108	Identifier	hierarchy		3046094	1					
ANR	3046109	Identifier	perm		3046094	2					
ANR	3046110	IdentifierDeclStatement	DCpermission const * perms = hierarchy . getImpliedPerms ( ) ;	2461:1:70252:70307	3046094	3	True				
ANR	3046111	IdentifierDecl	* perms = hierarchy . getImpliedPerms ( )		3046094	0					
ANR	3046112	IdentifierDeclType	DCpermission const *		3046094	0					
ANR	3046113	Identifier	perms		3046094	1					
ANR	3046114	AssignmentExpression	* perms = hierarchy . getImpliedPerms ( )		3046094	2		=			
ANR	3046115	Identifier	perms		3046094	0					
ANR	3046116	CallExpression	hierarchy . getImpliedPerms ( )		3046094	1					
ANR	3046117	Callee	hierarchy . getImpliedPerms		3046094	0					
ANR	3046118	MemberAccess	hierarchy . getImpliedPerms		3046094	0					
ANR	3046119	Identifier	hierarchy		3046094	0					
ANR	3046120	Identifier	getImpliedPerms		3046094	1					
ANR	3046121	ArgumentList			3046094	1					
ANR	3046122	ForStatement	for ( perm = * ( perms ++ ) ; perm != LAST_PERM ; perm = * ( perms ++ ) )		3046094	4					
ANR	3046123	ForInit	perm = * ( perms ++ ) ;	2464:6:70385:70402	3046094	0	True				
ANR	3046124	AssignmentExpression	perm = * ( perms ++ )		3046094	0		=			
ANR	3046125	Identifier	perm		3046094	0					
ANR	3046126	UnaryOperationExpression	* ( perms ++ )		3046094	1					
ANR	3046127	UnaryOperator	*		3046094	0					
ANR	3046128	PostIncDecOperationExpression	perms ++		3046094	1					
ANR	3046129	Identifier	perms		3046094	0					
ANR	3046130	IncDec	++		3046094	1					
ANR	3046131	Condition	perm != LAST_PERM	2464:25:70404:70420	3046094	1	True				
ANR	3046132	EqualityExpression	perm != LAST_PERM		3046094	0		!=			
ANR	3046133	Identifier	perm		3046094	0					
ANR	3046134	Identifier	LAST_PERM		3046094	1					
ANR	3046135	AssignmentExpression	perm = * ( perms ++ )	2464:44:70423:70439	3046094	2	True	=			
ANR	3046136	Identifier	perm		3046094	0					
ANR	3046137	UnaryOperationExpression	* ( perms ++ )		3046094	1					
ANR	3046138	UnaryOperator	*		3046094	0					
ANR	3046139	PostIncDecOperationExpression	perms ++		3046094	1					
ANR	3046140	Identifier	perms		3046094	0					
ANR	3046141	IncDec	++		3046094	1					
ANR	3046142	CompoundStatement		8:63:258:258	3046094	3					
ANR	3046143	ForStatement	for ( i = 0 ; i < maxCommand ; i ++ )		3046094	0					
ANR	3046144	ForInit	i = 0 ;	2465:7:70451:70456	3046094	0	True				
ANR	3046145	AssignmentExpression	i = 0		3046094	0		=			
ANR	3046146	Identifier	i		3046094	0					
ANR	3046147	PrimaryExpression	0		3046094	1					
ANR	3046148	Condition	i < maxCommand	2465:14:70458:70471	3046094	1	True				
ANR	3046149	RelationalExpression	i < maxCommand		3046094	0		<			
ANR	3046150	Identifier	i		3046094	0					
ANR	3046151	Identifier	maxCommand		3046094	1					
ANR	3046152	PostIncDecOperationExpression	i ++	2465:30:70474:70476	3046094	2	True				
ANR	3046153	Identifier	i		3046094	0					
ANR	3046154	IncDec	++		3046094	1					
ANR	3046155	CompoundStatement		9:35:295:295	3046094	3					
ANR	3046156	IfStatement	if ( ( comTable [ i ] . handler || comTable [ i ] . handlercpp ) && ( comTable [ i ] . perm == perm ) && ( ! comTable [ i ] . force_authentication || is_authenticated ) )		3046094	0					
ANR	3046157	Condition	( comTable [ i ] . handler || comTable [ i ] . handlercpp ) && ( comTable [ i ] . perm == perm ) && ( ! comTable [ i ] . force_authentication || is_authenticated )	2466:7:70488:70631	3046094	0	True				
ANR	3046158	AndExpression	( comTable [ i ] . handler || comTable [ i ] . handlercpp ) && ( comTable [ i ] . perm == perm ) && ( ! comTable [ i ] . force_authentication || is_authenticated )		3046094	0		&&			
ANR	3046159	OrExpression	comTable [ i ] . handler || comTable [ i ] . handlercpp		3046094	0		||			
ANR	3046160	MemberAccess	comTable [ i ] . handler		3046094	0					
ANR	3046161	ArrayIndexing	comTable [ i ]		3046094	0					
ANR	3046162	Identifier	comTable		3046094	0					
ANR	3046163	Identifier	i		3046094	1					
ANR	3046164	Identifier	handler		3046094	1					
ANR	3046165	MemberAccess	comTable [ i ] . handlercpp		3046094	1					
ANR	3046166	ArrayIndexing	comTable [ i ]		3046094	0					
ANR	3046167	Identifier	comTable		3046094	0					
ANR	3046168	Identifier	i		3046094	1					
ANR	3046169	Identifier	handlercpp		3046094	1					
ANR	3046170	AndExpression	( comTable [ i ] . perm == perm ) && ( ! comTable [ i ] . force_authentication || is_authenticated )		3046094	1		&&			
ANR	3046171	EqualityExpression	comTable [ i ] . perm == perm		3046094	0		==			
ANR	3046172	MemberAccess	comTable [ i ] . perm		3046094	0					
ANR	3046173	ArrayIndexing	comTable [ i ]		3046094	0					
ANR	3046174	Identifier	comTable		3046094	0					
ANR	3046175	Identifier	i		3046094	1					
ANR	3046176	Identifier	perm		3046094	1					
ANR	3046177	Identifier	perm		3046094	1					
ANR	3046178	OrExpression	! comTable [ i ] . force_authentication || is_authenticated		3046094	1		||			
ANR	3046179	UnaryOperationExpression	! comTable [ i ] . force_authentication		3046094	0					
ANR	3046180	UnaryOperator	!		3046094	0					
ANR	3046181	MemberAccess	comTable [ i ] . force_authentication		3046094	1					
ANR	3046182	ArrayIndexing	comTable [ i ]		3046094	0					
ANR	3046183	Identifier	comTable		3046094	0					
ANR	3046184	Identifier	i		3046094	1					
ANR	3046185	Identifier	force_authentication		3046094	1					
ANR	3046186	Identifier	is_authenticated		3046094	1					
ANR	3046187	CompoundStatement		14:4:459:502	3046094	1					
ANR	3046188	IdentifierDeclStatement	"char const * comma = res . Length ( ) ? "","" : """" ;"	2470:4:70643:70686	3046094	0	True				
ANR	3046189	IdentifierDecl	"* comma = res . Length ( ) ? "","" : """""		3046094	0					
ANR	3046190	IdentifierDeclType	char const *		3046094	0					
ANR	3046191	Identifier	comma		3046094	1					
ANR	3046192	AssignmentExpression	"* comma = res . Length ( ) ? "","" : """""		3046094	2		=			
ANR	3046193	Identifier	comma		3046094	0					
ANR	3046194	ConditionalExpression	"res . Length ( ) ? "","" : """""		3046094	1					
ANR	3046195	Condition	res . Length ( )		3046094	0					
ANR	3046196	CallExpression	res . Length ( )		3046094	0					
ANR	3046197	Callee	res . Length		3046094	0					
ANR	3046198	MemberAccess	res . Length		3046094	0					
ANR	3046199	Identifier	res		3046094	0					
ANR	3046200	Identifier	Length		3046094	1					
ANR	3046201	ArgumentList			3046094	1					
ANR	3046202	PrimaryExpression	""","""		3046094	1					
ANR	3046203	PrimaryExpression	""""""		3046094	2					
ANR	3046204	ExpressionStatement	"res . sprintf_cat ( ""%s%i"" , comma , comTable [ i ] . num )"	2471:4:70692:70741	3046094	1	True				
ANR	3046205	CallExpression	"res . sprintf_cat ( ""%s%i"" , comma , comTable [ i ] . num )"		3046094	0					
ANR	3046206	Callee	res . sprintf_cat		3046094	0					
ANR	3046207	MemberAccess	res . sprintf_cat		3046094	0					
ANR	3046208	Identifier	res		3046094	0					
ANR	3046209	Identifier	sprintf_cat		3046094	1					
ANR	3046210	ArgumentList	"""%s%i"""		3046094	1					
ANR	3046211	Argument	"""%s%i"""		3046094	0					
ANR	3046212	PrimaryExpression	"""%s%i"""		3046094	0					
ANR	3046213	Argument	comma		3046094	1					
ANR	3046214	Identifier	comma		3046094	0					
ANR	3046215	Argument	comTable [ i ] . num		3046094	2					
ANR	3046216	MemberAccess	comTable [ i ] . num		3046094	0					
ANR	3046217	ArrayIndexing	comTable [ i ]		3046094	0					
ANR	3046218	Identifier	comTable		3046094	0					
ANR	3046219	Identifier	i		3046094	1					
ANR	3046220	Identifier	num		3046094	1					
ANR	3046221	ReturnStatement	return res ;	2476:1:70757:70767	3046094	5	True				
ANR	3046222	Identifier	res		3046094	0					
ANR	3046223	ReturnType	MyString		3046094	1					
ANR	3046224	Identifier	DaemonCore :: GetCommandsInAuthLevel		3046094	2					
ANR	3046225	ParameterList	"DCpermission perm , bool is_authenticated"		3046094	3					
ANR	3046226	Parameter	DCpermission perm	2457:44:70142:70158	3046094	0	True				
ANR	3046227	ParameterType	DCpermission		3046094	0					
ANR	3046228	Identifier	perm		3046094	1					
ANR	3046229	Parameter	bool is_authenticated	2457:62:70160:70180	3046094	1	True				
ANR	3046230	ParameterType	bool		3046094	0					
ANR	3046231	Identifier	is_authenticated		3046094	1					
ANR	3046232	CFGEntryNode	ENTRY		3046094		True				
ANR	3046233	CFGExitNode	EXIT		3046094		True				
ANR	3046234	Symbol	LAST_PERM		3046094						
ANR	3046235	Symbol	res		3046094						
ANR	3046236	Symbol	comTable [ i ] . perm		3046094						
ANR	3046237	Symbol	perm		3046094						
ANR	3046238	Symbol	hierarchy . getImpliedPerms		3046094						
ANR	3046239	Symbol	hierarchy		3046094						
ANR	3046240	Symbol	comTable [ i ] . force_authentication		3046094						
ANR	3046241	Symbol	i		3046094						
ANR	3046242	Symbol	res . Length		3046094						
ANR	3046243	Symbol	* ( perms ++ )		3046094						
ANR	3046244	Symbol	comTable [ i ] . num		3046094						
ANR	3046245	Symbol	comma		3046094						
ANR	3046246	Symbol	* comTable		3046094						
ANR	3046247	Symbol	* i		3046094						
ANR	3046248	Symbol	comTable		3046094						
ANR	3046249	Symbol	comTable [ i ] . handler		3046094						
ANR	3046250	Symbol	maxCommand		3046094						
ANR	3046251	Symbol	comTable [ i ] . handlercpp		3046094						
ANR	3046252	Symbol	perms		3046094						
ANR	3046253	Symbol	is_authenticated		3046094						
ANR	3046254	Function	DaemonCore :: DumpReapTable	2479:0:70772:71809							
ANR	3046255	FunctionDef	"DaemonCore :: DumpReapTable (int flag , const char * indent)"		3046254	0					
ANR	3046256	CompoundStatement		2480:0:70833:71809	3046254	0					
ANR	3046257	IdentifierDeclStatement	int i ;	2481:1:70836:70843	3046254	0	True				
ANR	3046258	IdentifierDecl	i		3046254	0					
ANR	3046259	IdentifierDeclType	int		3046254	0					
ANR	3046260	Identifier	i		3046254	1					
ANR	3046261	IdentifierDeclStatement	const char * descrip1 ;	2482:1:70846:70866	3046254	1	True				
ANR	3046262	IdentifierDecl	* descrip1		3046254	0					
ANR	3046263	IdentifierDeclType	const char *		3046254	0					
ANR	3046264	Identifier	descrip1		3046254	1					
ANR	3046265	IdentifierDeclStatement	const char * descrip2 ;	2483:1:70869:70889	3046254	2	True				
ANR	3046266	IdentifierDecl	* descrip2		3046254	0					
ANR	3046267	IdentifierDeclType	const char *		3046254	0					
ANR	3046268	Identifier	descrip2		3046254	1					
ANR	3046269	IfStatement	if ( ( flag & DebugFlags ) != flag )		3046254	3					
ANR	3046270	Condition	( flag & DebugFlags ) != flag	2490:6:71180:71206	3046254	0	True				
ANR	3046271	EqualityExpression	( flag & DebugFlags ) != flag		3046254	0		!=			
ANR	3046272	BitAndExpression	flag & DebugFlags		3046254	0		&			
ANR	3046273	Identifier	flag		3046254	0					
ANR	3046274	Identifier	DebugFlags		3046254	1					
ANR	3046275	Identifier	flag		3046254	1					
ANR	3046276	ReturnStatement	return ;	2491:2:71212:71218	3046254	1	True				
ANR	3046277	IfStatement	if ( indent == NULL )		3046254	4					
ANR	3046278	Condition	indent == NULL	2493:6:71227:71240	3046254	0	True				
ANR	3046279	EqualityExpression	indent == NULL		3046254	0		==			
ANR	3046280	Identifier	indent		3046254	0					
ANR	3046281	Identifier	NULL		3046254	1					
ANR	3046282	ExpressionStatement	indent = DEFAULT_INDENT	2494:2:71245:71268	3046254	1	True				
ANR	3046283	AssignmentExpression	indent = DEFAULT_INDENT		3046254	0		=			
ANR	3046284	Identifier	indent		3046254	0					
ANR	3046285	Identifier	DEFAULT_INDENT		3046254	1					
ANR	3046286	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2496:1:71272:71290	3046254	5	True				
ANR	3046287	CallExpression	"dprintf ( flag , ""\\n"" )"		3046254	0					
ANR	3046288	Callee	dprintf		3046254	0					
ANR	3046289	Identifier	dprintf		3046254	0					
ANR	3046290	ArgumentList	flag		3046254	1					
ANR	3046291	Argument	flag		3046254	0					
ANR	3046292	Identifier	flag		3046254	0					
ANR	3046293	Argument	"""\\n"""		3046254	1					
ANR	3046294	PrimaryExpression	"""\\n"""		3046254	0					
ANR	3046295	ExpressionStatement	"dprintf ( flag , ""%sReapers Registered\\n"" , indent )"	2497:1:71293:71340	3046254	6	True				
ANR	3046296	CallExpression	"dprintf ( flag , ""%sReapers Registered\\n"" , indent )"		3046254	0					
ANR	3046297	Callee	dprintf		3046254	0					
ANR	3046298	Identifier	dprintf		3046254	0					
ANR	3046299	ArgumentList	flag		3046254	1					
ANR	3046300	Argument	flag		3046254	0					
ANR	3046301	Identifier	flag		3046254	0					
ANR	3046302	Argument	"""%sReapers Registered\\n"""		3046254	1					
ANR	3046303	PrimaryExpression	"""%sReapers Registered\\n"""		3046254	0					
ANR	3046304	Argument	indent		3046254	2					
ANR	3046305	Identifier	indent		3046254	0					
ANR	3046306	ExpressionStatement	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"	2498:1:71343:71391	3046254	7	True				
ANR	3046307	CallExpression	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"		3046254	0					
ANR	3046308	Callee	dprintf		3046254	0					
ANR	3046309	Identifier	dprintf		3046254	0					
ANR	3046310	ArgumentList	flag		3046254	1					
ANR	3046311	Argument	flag		3046254	0					
ANR	3046312	Identifier	flag		3046254	0					
ANR	3046313	Argument	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		3046254	1					
ANR	3046314	PrimaryExpression	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		3046254	0					
ANR	3046315	Argument	indent		3046254	2					
ANR	3046316	Identifier	indent		3046254	0					
ANR	3046317	ForStatement	for ( i = 0 ; i < maxReap ; i ++ )		3046254	8					
ANR	3046318	ForInit	i = 0 ;	2499:6:71399:71404	3046254	0	True				
ANR	3046319	AssignmentExpression	i = 0		3046254	0		=			
ANR	3046320	Identifier	i		3046254	0					
ANR	3046321	PrimaryExpression	0		3046254	1					
ANR	3046322	Condition	i < maxReap	2499:13:71406:71416	3046254	1	True				
ANR	3046323	RelationalExpression	i < maxReap		3046254	0		<			
ANR	3046324	Identifier	i		3046254	0					
ANR	3046325	Identifier	maxReap		3046254	1					
ANR	3046326	PostIncDecOperationExpression	i ++	2499:26:71419:71421	3046254	2	True				
ANR	3046327	Identifier	i		3046254	0					
ANR	3046328	IncDec	++		3046254	1					
ANR	3046329	CompoundStatement		20:31:590:590	3046254	3					
ANR	3046330	IfStatement	if ( reapTable [ i ] . handler || reapTable [ i ] . handlercpp )		3046254	0					
ANR	3046331	Condition	reapTable [ i ] . handler || reapTable [ i ] . handlercpp	2500:6:71432:71478	3046254	0	True				
ANR	3046332	OrExpression	reapTable [ i ] . handler || reapTable [ i ] . handlercpp		3046254	0		||			
ANR	3046333	MemberAccess	reapTable [ i ] . handler		3046254	0					
ANR	3046334	ArrayIndexing	reapTable [ i ]		3046254	0					
ANR	3046335	Identifier	reapTable		3046254	0					
ANR	3046336	Identifier	i		3046254	1					
ANR	3046337	Identifier	handler		3046254	1					
ANR	3046338	MemberAccess	reapTable [ i ] . handlercpp		3046254	1					
ANR	3046339	ArrayIndexing	reapTable [ i ]		3046254	0					
ANR	3046340	Identifier	reapTable		3046254	0					
ANR	3046341	Identifier	i		3046254	1					
ANR	3046342	Identifier	handlercpp		3046254	1					
ANR	3046343	CompoundStatement		21:56:648:648	3046254	1					
ANR	3046344	ExpressionStatement	"descrip1 = ""NULL"""	2501:3:71487:71504	3046254	0	True				
ANR	3046345	AssignmentExpression	"descrip1 = ""NULL"""		3046254	0		=			
ANR	3046346	Identifier	descrip1		3046254	0					
ANR	3046347	PrimaryExpression	"""NULL"""		3046254	1					
ANR	3046348	ExpressionStatement	descrip2 = descrip1	2502:3:71509:71528	3046254	1	True				
ANR	3046349	AssignmentExpression	descrip2 = descrip1		3046254	0		=			
ANR	3046350	Identifier	descrip2		3046254	0					
ANR	3046351	Identifier	descrip1		3046254	1					
ANR	3046352	IfStatement	if ( reapTable [ i ] . reap_descrip )		3046254	2					
ANR	3046353	Condition	reapTable [ i ] . reap_descrip	2503:8:71538:71562	3046254	0	True				
ANR	3046354	MemberAccess	reapTable [ i ] . reap_descrip		3046254	0					
ANR	3046355	ArrayIndexing	reapTable [ i ]		3046254	0					
ANR	3046356	Identifier	reapTable		3046254	0					
ANR	3046357	Identifier	i		3046254	1					
ANR	3046358	Identifier	reap_descrip		3046254	1					
ANR	3046359	ExpressionStatement	descrip1 = reapTable [ i ] . reap_descrip	2504:4:71570:71606	3046254	1	True				
ANR	3046360	AssignmentExpression	descrip1 = reapTable [ i ] . reap_descrip		3046254	0		=			
ANR	3046361	Identifier	descrip1		3046254	0					
ANR	3046362	MemberAccess	reapTable [ i ] . reap_descrip		3046254	1					
ANR	3046363	ArrayIndexing	reapTable [ i ]		3046254	0					
ANR	3046364	Identifier	reapTable		3046254	0					
ANR	3046365	Identifier	i		3046254	1					
ANR	3046366	Identifier	reap_descrip		3046254	1					
ANR	3046367	IfStatement	if ( reapTable [ i ] . handler_descrip )		3046254	3					
ANR	3046368	Condition	reapTable [ i ] . handler_descrip	2505:8:71616:71643	3046254	0	True				
ANR	3046369	MemberAccess	reapTable [ i ] . handler_descrip		3046254	0					
ANR	3046370	ArrayIndexing	reapTable [ i ]		3046254	0					
ANR	3046371	Identifier	reapTable		3046254	0					
ANR	3046372	Identifier	i		3046254	1					
ANR	3046373	Identifier	handler_descrip		3046254	1					
ANR	3046374	ExpressionStatement	descrip2 = reapTable [ i ] . handler_descrip	2506:4:71651:71690	3046254	1	True				
ANR	3046375	AssignmentExpression	descrip2 = reapTable [ i ] . handler_descrip		3046254	0		=			
ANR	3046376	Identifier	descrip2		3046254	0					
ANR	3046377	MemberAccess	reapTable [ i ] . handler_descrip		3046254	1					
ANR	3046378	ArrayIndexing	reapTable [ i ]		3046254	0					
ANR	3046379	Identifier	reapTable		3046254	0					
ANR	3046380	Identifier	i		3046254	1					
ANR	3046381	Identifier	handler_descrip		3046254	1					
ANR	3046382	ExpressionStatement	"dprintf ( flag , ""%s%d: %s %s\\n"" , indent , reapTable [ i ] . num , descrip1 , descrip2 )"	2507:3:71695:71778	3046254	4	True				
ANR	3046383	CallExpression	"dprintf ( flag , ""%s%d: %s %s\\n"" , indent , reapTable [ i ] . num , descrip1 , descrip2 )"		3046254	0					
ANR	3046384	Callee	dprintf		3046254	0					
ANR	3046385	Identifier	dprintf		3046254	0					
ANR	3046386	ArgumentList	flag		3046254	1					
ANR	3046387	Argument	flag		3046254	0					
ANR	3046388	Identifier	flag		3046254	0					
ANR	3046389	Argument	"""%s%d: %s %s\\n"""		3046254	1					
ANR	3046390	PrimaryExpression	"""%s%d: %s %s\\n"""		3046254	0					
ANR	3046391	Argument	indent		3046254	2					
ANR	3046392	Identifier	indent		3046254	0					
ANR	3046393	Argument	reapTable [ i ] . num		3046254	3					
ANR	3046394	MemberAccess	reapTable [ i ] . num		3046254	0					
ANR	3046395	ArrayIndexing	reapTable [ i ]		3046254	0					
ANR	3046396	Identifier	reapTable		3046254	0					
ANR	3046397	Identifier	i		3046254	1					
ANR	3046398	Identifier	num		3046254	1					
ANR	3046399	Argument	descrip1		3046254	4					
ANR	3046400	Identifier	descrip1		3046254	0					
ANR	3046401	Argument	descrip2		3046254	5					
ANR	3046402	Identifier	descrip2		3046254	0					
ANR	3046403	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2511:1:71788:71807	3046254	9	True				
ANR	3046404	CallExpression	"dprintf ( flag , ""\\n"" )"		3046254	0					
ANR	3046405	Callee	dprintf		3046254	0					
ANR	3046406	Identifier	dprintf		3046254	0					
ANR	3046407	ArgumentList	flag		3046254	1					
ANR	3046408	Argument	flag		3046254	0					
ANR	3046409	Identifier	flag		3046254	0					
ANR	3046410	Argument	"""\\n"""		3046254	1					
ANR	3046411	PrimaryExpression	"""\\n"""		3046254	0					
ANR	3046412	ReturnType	void		3046254	1					
ANR	3046413	Identifier	DaemonCore :: DumpReapTable		3046254	2					
ANR	3046414	ParameterList	"int flag , const char * indent"		3046254	3					
ANR	3046415	Parameter	int flag	2479:31:70803:70810	3046254	0	True				
ANR	3046416	ParameterType	int		3046254	0					
ANR	3046417	Identifier	flag		3046254	1					
ANR	3046418	Parameter	const char * indent	2479:41:70813:70830	3046254	1	True				
ANR	3046419	ParameterType	const char *		3046254	0					
ANR	3046420	Identifier	indent		3046254	1					
ANR	3046421	CFGEntryNode	ENTRY		3046254		True				
ANR	3046422	CFGExitNode	EXIT		3046254		True				
ANR	3046423	Symbol	flag		3046254						
ANR	3046424	Symbol	NULL		3046254						
ANR	3046425	Symbol	indent		3046254						
ANR	3046426	Symbol	DEFAULT_INDENT		3046254						
ANR	3046427	Symbol	reapTable [ i ] . reap_descrip		3046254						
ANR	3046428	Symbol	i		3046254						
ANR	3046429	Symbol	maxReap		3046254						
ANR	3046430	Symbol	DebugFlags		3046254						
ANR	3046431	Symbol	* i		3046254						
ANR	3046432	Symbol	reapTable		3046254						
ANR	3046433	Symbol	reapTable [ i ] . handler_descrip		3046254						
ANR	3046434	Symbol	reapTable [ i ] . handlercpp		3046254						
ANR	3046435	Symbol	descrip1		3046254						
ANR	3046436	Symbol	reapTable [ i ] . num		3046254						
ANR	3046437	Symbol	descrip2		3046254						
ANR	3046438	Symbol	* reapTable		3046254						
ANR	3046439	Symbol	reapTable [ i ] . handler		3046254						
ANR	3046440	Function	DaemonCore :: DumpSigTable	2514:0:71812:72916							
ANR	3046441	FunctionDef	"DaemonCore :: DumpSigTable (int flag , const char * indent)"		3046440	0					
ANR	3046442	CompoundStatement		2515:0:71872:72916	3046440	0					
ANR	3046443	IdentifierDeclStatement	int i ;	2516:1:71875:71882	3046440	0	True				
ANR	3046444	IdentifierDecl	i		3046440	0					
ANR	3046445	IdentifierDeclType	int		3046440	0					
ANR	3046446	Identifier	i		3046440	1					
ANR	3046447	IdentifierDeclStatement	const char * descrip1 ;	2517:1:71885:71905	3046440	1	True				
ANR	3046448	IdentifierDecl	* descrip1		3046440	0					
ANR	3046449	IdentifierDeclType	const char *		3046440	0					
ANR	3046450	Identifier	descrip1		3046440	1					
ANR	3046451	IdentifierDeclStatement	const char * descrip2 ;	2518:1:71908:71928	3046440	2	True				
ANR	3046452	IdentifierDecl	* descrip2		3046440	0					
ANR	3046453	IdentifierDeclType	const char *		3046440	0					
ANR	3046454	Identifier	descrip2		3046440	1					
ANR	3046455	IfStatement	if ( ( flag & DebugFlags ) != flag )		3046440	3					
ANR	3046456	Condition	( flag & DebugFlags ) != flag	2525:6:72219:72245	3046440	0	True				
ANR	3046457	EqualityExpression	( flag & DebugFlags ) != flag		3046440	0		!=			
ANR	3046458	BitAndExpression	flag & DebugFlags		3046440	0		&			
ANR	3046459	Identifier	flag		3046440	0					
ANR	3046460	Identifier	DebugFlags		3046440	1					
ANR	3046461	Identifier	flag		3046440	1					
ANR	3046462	ReturnStatement	return ;	2526:2:72251:72257	3046440	1	True				
ANR	3046463	IfStatement	if ( indent == NULL )		3046440	4					
ANR	3046464	Condition	indent == NULL	2528:6:72266:72279	3046440	0	True				
ANR	3046465	EqualityExpression	indent == NULL		3046440	0		==			
ANR	3046466	Identifier	indent		3046440	0					
ANR	3046467	Identifier	NULL		3046440	1					
ANR	3046468	ExpressionStatement	indent = DEFAULT_INDENT	2529:2:72284:72307	3046440	1	True				
ANR	3046469	AssignmentExpression	indent = DEFAULT_INDENT		3046440	0		=			
ANR	3046470	Identifier	indent		3046440	0					
ANR	3046471	Identifier	DEFAULT_INDENT		3046440	1					
ANR	3046472	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2531:1:72311:72330	3046440	5	True				
ANR	3046473	CallExpression	"dprintf ( flag , ""\\n"" )"		3046440	0					
ANR	3046474	Callee	dprintf		3046440	0					
ANR	3046475	Identifier	dprintf		3046440	0					
ANR	3046476	ArgumentList	flag		3046440	1					
ANR	3046477	Argument	flag		3046440	0					
ANR	3046478	Identifier	flag		3046440	0					
ANR	3046479	Argument	"""\\n"""		3046440	1					
ANR	3046480	PrimaryExpression	"""\\n"""		3046440	0					
ANR	3046481	ExpressionStatement	"dprintf ( flag , ""%sSignals Registered\\n"" , indent )"	2532:1:72333:72380	3046440	6	True				
ANR	3046482	CallExpression	"dprintf ( flag , ""%sSignals Registered\\n"" , indent )"		3046440	0					
ANR	3046483	Callee	dprintf		3046440	0					
ANR	3046484	Identifier	dprintf		3046440	0					
ANR	3046485	ArgumentList	flag		3046440	1					
ANR	3046486	Argument	flag		3046440	0					
ANR	3046487	Identifier	flag		3046440	0					
ANR	3046488	Argument	"""%sSignals Registered\\n"""		3046440	1					
ANR	3046489	PrimaryExpression	"""%sSignals Registered\\n"""		3046440	0					
ANR	3046490	Argument	indent		3046440	2					
ANR	3046491	Identifier	indent		3046440	0					
ANR	3046492	ExpressionStatement	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~\\n"" , indent )"	2533:1:72383:72430	3046440	7	True				
ANR	3046493	CallExpression	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~\\n"" , indent )"		3046440	0					
ANR	3046494	Callee	dprintf		3046440	0					
ANR	3046495	Identifier	dprintf		3046440	0					
ANR	3046496	ArgumentList	flag		3046440	1					
ANR	3046497	Argument	flag		3046440	0					
ANR	3046498	Identifier	flag		3046440	0					
ANR	3046499	Argument	"""%s~~~~~~~~~~~~~~~~~~\\n"""		3046440	1					
ANR	3046500	PrimaryExpression	"""%s~~~~~~~~~~~~~~~~~~\\n"""		3046440	0					
ANR	3046501	Argument	indent		3046440	2					
ANR	3046502	Identifier	indent		3046440	0					
ANR	3046503	ForStatement	for ( i = 0 ; i < maxSig ; i ++ )		3046440	8					
ANR	3046504	ForInit	i = 0 ;	2534:6:72438:72443	3046440	0	True				
ANR	3046505	AssignmentExpression	i = 0		3046440	0		=			
ANR	3046506	Identifier	i		3046440	0					
ANR	3046507	PrimaryExpression	0		3046440	1					
ANR	3046508	Condition	i < maxSig	2534:13:72445:72454	3046440	1	True				
ANR	3046509	RelationalExpression	i < maxSig		3046440	0		<			
ANR	3046510	Identifier	i		3046440	0					
ANR	3046511	Identifier	maxSig		3046440	1					
ANR	3046512	PostIncDecOperationExpression	i ++	2534:25:72457:72459	3046440	2	True				
ANR	3046513	Identifier	i		3046440	0					
ANR	3046514	IncDec	++		3046440	1					
ANR	3046515	CompoundStatement		20:30:589:589	3046440	3					
ANR	3046516	IfStatement	if ( sigTable [ i ] . handler || sigTable [ i ] . handlercpp )		3046440	0					
ANR	3046517	Condition	sigTable [ i ] . handler || sigTable [ i ] . handlercpp	2535:6:72470:72514	3046440	0	True				
ANR	3046518	OrExpression	sigTable [ i ] . handler || sigTable [ i ] . handlercpp		3046440	0		||			
ANR	3046519	MemberAccess	sigTable [ i ] . handler		3046440	0					
ANR	3046520	ArrayIndexing	sigTable [ i ]		3046440	0					
ANR	3046521	Identifier	sigTable		3046440	0					
ANR	3046522	Identifier	i		3046440	1					
ANR	3046523	Identifier	handler		3046440	1					
ANR	3046524	MemberAccess	sigTable [ i ] . handlercpp		3046440	1					
ANR	3046525	ArrayIndexing	sigTable [ i ]		3046440	0					
ANR	3046526	Identifier	sigTable		3046440	0					
ANR	3046527	Identifier	i		3046440	1					
ANR	3046528	Identifier	handlercpp		3046440	1					
ANR	3046529	CompoundStatement		21:54:645:645	3046440	1					
ANR	3046530	ExpressionStatement	"descrip1 = ""NULL"""	2536:3:72523:72540	3046440	0	True				
ANR	3046531	AssignmentExpression	"descrip1 = ""NULL"""		3046440	0		=			
ANR	3046532	Identifier	descrip1		3046440	0					
ANR	3046533	PrimaryExpression	"""NULL"""		3046440	1					
ANR	3046534	ExpressionStatement	descrip2 = descrip1	2537:3:72545:72564	3046440	1	True				
ANR	3046535	AssignmentExpression	descrip2 = descrip1		3046440	0		=			
ANR	3046536	Identifier	descrip2		3046440	0					
ANR	3046537	Identifier	descrip1		3046440	1					
ANR	3046538	IfStatement	if ( sigTable [ i ] . sig_descrip )		3046440	2					
ANR	3046539	Condition	sigTable [ i ] . sig_descrip	2538:8:72574:72596	3046440	0	True				
ANR	3046540	MemberAccess	sigTable [ i ] . sig_descrip		3046440	0					
ANR	3046541	ArrayIndexing	sigTable [ i ]		3046440	0					
ANR	3046542	Identifier	sigTable		3046440	0					
ANR	3046543	Identifier	i		3046440	1					
ANR	3046544	Identifier	sig_descrip		3046440	1					
ANR	3046545	ExpressionStatement	descrip1 = sigTable [ i ] . sig_descrip	2539:4:72604:72638	3046440	1	True				
ANR	3046546	AssignmentExpression	descrip1 = sigTable [ i ] . sig_descrip		3046440	0		=			
ANR	3046547	Identifier	descrip1		3046440	0					
ANR	3046548	MemberAccess	sigTable [ i ] . sig_descrip		3046440	1					
ANR	3046549	ArrayIndexing	sigTable [ i ]		3046440	0					
ANR	3046550	Identifier	sigTable		3046440	0					
ANR	3046551	Identifier	i		3046440	1					
ANR	3046552	Identifier	sig_descrip		3046440	1					
ANR	3046553	IfStatement	if ( sigTable [ i ] . handler_descrip )		3046440	3					
ANR	3046554	Condition	sigTable [ i ] . handler_descrip	2540:8:72648:72674	3046440	0	True				
ANR	3046555	MemberAccess	sigTable [ i ] . handler_descrip		3046440	0					
ANR	3046556	ArrayIndexing	sigTable [ i ]		3046440	0					
ANR	3046557	Identifier	sigTable		3046440	0					
ANR	3046558	Identifier	i		3046440	1					
ANR	3046559	Identifier	handler_descrip		3046440	1					
ANR	3046560	ExpressionStatement	descrip2 = sigTable [ i ] . handler_descrip	2541:4:72682:72720	3046440	1	True				
ANR	3046561	AssignmentExpression	descrip2 = sigTable [ i ] . handler_descrip		3046440	0		=			
ANR	3046562	Identifier	descrip2		3046440	0					
ANR	3046563	MemberAccess	sigTable [ i ] . handler_descrip		3046440	1					
ANR	3046564	ArrayIndexing	sigTable [ i ]		3046440	0					
ANR	3046565	Identifier	sigTable		3046440	0					
ANR	3046566	Identifier	i		3046440	1					
ANR	3046567	Identifier	handler_descrip		3046440	1					
ANR	3046568	ExpressionStatement	"dprintf ( flag , ""%s%d: %s %s, Blocked:%d Pending:%d\\n"" , indent , sigTable [ i ] . num , descrip1 , descrip2 , sigTable [ i ] . is_blocked , sigTable [ i ] . is_pending )"	2542:3:72725:72885	3046440	4	True				
ANR	3046569	CallExpression	"dprintf ( flag , ""%s%d: %s %s, Blocked:%d Pending:%d\\n"" , indent , sigTable [ i ] . num , descrip1 , descrip2 , sigTable [ i ] . is_blocked , sigTable [ i ] . is_pending )"		3046440	0					
ANR	3046570	Callee	dprintf		3046440	0					
ANR	3046571	Identifier	dprintf		3046440	0					
ANR	3046572	ArgumentList	flag		3046440	1					
ANR	3046573	Argument	flag		3046440	0					
ANR	3046574	Identifier	flag		3046440	0					
ANR	3046575	Argument	"""%s%d: %s %s, Blocked:%d Pending:%d\\n"""		3046440	1					
ANR	3046576	PrimaryExpression	"""%s%d: %s %s, Blocked:%d Pending:%d\\n"""		3046440	0					
ANR	3046577	Argument	indent		3046440	2					
ANR	3046578	Identifier	indent		3046440	0					
ANR	3046579	Argument	sigTable [ i ] . num		3046440	3					
ANR	3046580	MemberAccess	sigTable [ i ] . num		3046440	0					
ANR	3046581	ArrayIndexing	sigTable [ i ]		3046440	0					
ANR	3046582	Identifier	sigTable		3046440	0					
ANR	3046583	Identifier	i		3046440	1					
ANR	3046584	Identifier	num		3046440	1					
ANR	3046585	Argument	descrip1		3046440	4					
ANR	3046586	Identifier	descrip1		3046440	0					
ANR	3046587	Argument	descrip2		3046440	5					
ANR	3046588	Identifier	descrip2		3046440	0					
ANR	3046589	Argument	sigTable [ i ] . is_blocked		3046440	6					
ANR	3046590	MemberAccess	sigTable [ i ] . is_blocked		3046440	0					
ANR	3046591	ArrayIndexing	sigTable [ i ]		3046440	0					
ANR	3046592	Identifier	sigTable		3046440	0					
ANR	3046593	Identifier	i		3046440	1					
ANR	3046594	Identifier	is_blocked		3046440	1					
ANR	3046595	Argument	sigTable [ i ] . is_pending		3046440	7					
ANR	3046596	MemberAccess	sigTable [ i ] . is_pending		3046440	0					
ANR	3046597	ArrayIndexing	sigTable [ i ]		3046440	0					
ANR	3046598	Identifier	sigTable		3046440	0					
ANR	3046599	Identifier	i		3046440	1					
ANR	3046600	Identifier	is_pending		3046440	1					
ANR	3046601	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2547:1:72895:72914	3046440	9	True				
ANR	3046602	CallExpression	"dprintf ( flag , ""\\n"" )"		3046440	0					
ANR	3046603	Callee	dprintf		3046440	0					
ANR	3046604	Identifier	dprintf		3046440	0					
ANR	3046605	ArgumentList	flag		3046440	1					
ANR	3046606	Argument	flag		3046440	0					
ANR	3046607	Identifier	flag		3046440	0					
ANR	3046608	Argument	"""\\n"""		3046440	1					
ANR	3046609	PrimaryExpression	"""\\n"""		3046440	0					
ANR	3046610	ReturnType	void		3046440	1					
ANR	3046611	Identifier	DaemonCore :: DumpSigTable		3046440	2					
ANR	3046612	ParameterList	"int flag , const char * indent"		3046440	3					
ANR	3046613	Parameter	int flag	2514:30:71842:71849	3046440	0	True				
ANR	3046614	ParameterType	int		3046440	0					
ANR	3046615	Identifier	flag		3046440	1					
ANR	3046616	Parameter	const char * indent	2514:40:71852:71869	3046440	1	True				
ANR	3046617	ParameterType	const char *		3046440	0					
ANR	3046618	Identifier	indent		3046440	1					
ANR	3046619	CFGEntryNode	ENTRY		3046440		True				
ANR	3046620	CFGExitNode	EXIT		3046440		True				
ANR	3046621	Symbol	sigTable [ i ] . handler_descrip		3046440						
ANR	3046622	Symbol	sigTable [ i ] . is_pending		3046440						
ANR	3046623	Symbol	flag		3046440						
ANR	3046624	Symbol	NULL		3046440						
ANR	3046625	Symbol	maxSig		3046440						
ANR	3046626	Symbol	sigTable [ i ] . sig_descrip		3046440						
ANR	3046627	Symbol	indent		3046440						
ANR	3046628	Symbol	DEFAULT_INDENT		3046440						
ANR	3046629	Symbol	i		3046440						
ANR	3046630	Symbol	DebugFlags		3046440						
ANR	3046631	Symbol	* sigTable		3046440						
ANR	3046632	Symbol	* i		3046440						
ANR	3046633	Symbol	sigTable [ i ] . num		3046440						
ANR	3046634	Symbol	sigTable [ i ] . handlercpp		3046440						
ANR	3046635	Symbol	sigTable [ i ] . is_blocked		3046440						
ANR	3046636	Symbol	sigTable		3046440						
ANR	3046637	Symbol	descrip1		3046440						
ANR	3046638	Symbol	descrip2		3046440						
ANR	3046639	Symbol	sigTable [ i ] . handler		3046440						
ANR	3046640	Function	DaemonCore :: DumpSocketTable	2550:0:72919:73987							
ANR	3046641	FunctionDef	"DaemonCore :: DumpSocketTable (int flag , const char * indent)"		3046640	0					
ANR	3046642	CompoundStatement		2551:0:72982:73987	3046640	0					
ANR	3046643	IdentifierDeclStatement	int i ;	2552:1:72985:72992	3046640	0	True				
ANR	3046644	IdentifierDecl	i		3046640	0					
ANR	3046645	IdentifierDeclType	int		3046640	0					
ANR	3046646	Identifier	i		3046640	1					
ANR	3046647	IdentifierDeclStatement	const char * descrip1 ;	2553:1:72995:73015	3046640	1	True				
ANR	3046648	IdentifierDecl	* descrip1		3046640	0					
ANR	3046649	IdentifierDeclType	const char *		3046640	0					
ANR	3046650	Identifier	descrip1		3046640	1					
ANR	3046651	IdentifierDeclStatement	const char * descrip2 ;	2554:1:73018:73038	3046640	2	True				
ANR	3046652	IdentifierDecl	* descrip2		3046640	0					
ANR	3046653	IdentifierDeclType	const char *		3046640	0					
ANR	3046654	Identifier	descrip2		3046640	1					
ANR	3046655	IfStatement	if ( ( flag & DebugFlags ) != flag )		3046640	3					
ANR	3046656	Condition	( flag & DebugFlags ) != flag	2561:6:73329:73355	3046640	0	True				
ANR	3046657	EqualityExpression	( flag & DebugFlags ) != flag		3046640	0		!=			
ANR	3046658	BitAndExpression	flag & DebugFlags		3046640	0		&			
ANR	3046659	Identifier	flag		3046640	0					
ANR	3046660	Identifier	DebugFlags		3046640	1					
ANR	3046661	Identifier	flag		3046640	1					
ANR	3046662	ReturnStatement	return ;	2562:2:73361:73367	3046640	1	True				
ANR	3046663	IfStatement	if ( indent == NULL )		3046640	4					
ANR	3046664	Condition	indent == NULL	2564:6:73376:73389	3046640	0	True				
ANR	3046665	EqualityExpression	indent == NULL		3046640	0		==			
ANR	3046666	Identifier	indent		3046640	0					
ANR	3046667	Identifier	NULL		3046640	1					
ANR	3046668	ExpressionStatement	indent = DEFAULT_INDENT	2565:2:73394:73417	3046640	1	True				
ANR	3046669	AssignmentExpression	indent = DEFAULT_INDENT		3046640	0		=			
ANR	3046670	Identifier	indent		3046640	0					
ANR	3046671	Identifier	DEFAULT_INDENT		3046640	1					
ANR	3046672	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2567:1:73421:73439	3046640	5	True				
ANR	3046673	CallExpression	"dprintf ( flag , ""\\n"" )"		3046640	0					
ANR	3046674	Callee	dprintf		3046640	0					
ANR	3046675	Identifier	dprintf		3046640	0					
ANR	3046676	ArgumentList	flag		3046640	1					
ANR	3046677	Argument	flag		3046640	0					
ANR	3046678	Identifier	flag		3046640	0					
ANR	3046679	Argument	"""\\n"""		3046640	1					
ANR	3046680	PrimaryExpression	"""\\n"""		3046640	0					
ANR	3046681	ExpressionStatement	"dprintf ( flag , ""%sSockets Registered\\n"" , indent )"	2568:1:73442:73489	3046640	6	True				
ANR	3046682	CallExpression	"dprintf ( flag , ""%sSockets Registered\\n"" , indent )"		3046640	0					
ANR	3046683	Callee	dprintf		3046640	0					
ANR	3046684	Identifier	dprintf		3046640	0					
ANR	3046685	ArgumentList	flag		3046640	1					
ANR	3046686	Argument	flag		3046640	0					
ANR	3046687	Identifier	flag		3046640	0					
ANR	3046688	Argument	"""%sSockets Registered\\n"""		3046640	1					
ANR	3046689	PrimaryExpression	"""%sSockets Registered\\n"""		3046640	0					
ANR	3046690	Argument	indent		3046640	2					
ANR	3046691	Identifier	indent		3046640	0					
ANR	3046692	ExpressionStatement	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"	2569:1:73492:73540	3046640	7	True				
ANR	3046693	CallExpression	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"		3046640	0					
ANR	3046694	Callee	dprintf		3046640	0					
ANR	3046695	Identifier	dprintf		3046640	0					
ANR	3046696	ArgumentList	flag		3046640	1					
ANR	3046697	Argument	flag		3046640	0					
ANR	3046698	Identifier	flag		3046640	0					
ANR	3046699	Argument	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		3046640	1					
ANR	3046700	PrimaryExpression	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		3046640	0					
ANR	3046701	Argument	indent		3046640	2					
ANR	3046702	Identifier	indent		3046640	0					
ANR	3046703	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		3046640	8					
ANR	3046704	ForInit	i = 0 ;	2570:6:73548:73553	3046640	0	True				
ANR	3046705	AssignmentExpression	i = 0		3046640	0		=			
ANR	3046706	Identifier	i		3046640	0					
ANR	3046707	PrimaryExpression	0		3046640	1					
ANR	3046708	Condition	i < nSock	2570:13:73555:73563	3046640	1	True				
ANR	3046709	RelationalExpression	i < nSock		3046640	0		<			
ANR	3046710	Identifier	i		3046640	0					
ANR	3046711	Identifier	nSock		3046640	1					
ANR	3046712	PostIncDecOperationExpression	i ++	2570:24:73566:73568	3046640	2	True				
ANR	3046713	Identifier	i		3046640	0					
ANR	3046714	IncDec	++		3046640	1					
ANR	3046715	CompoundStatement		20:29:588:588	3046640	3					
ANR	3046716	IfStatement	if ( ( * sockTable ) [ i ] . iosock )		3046640	0					
ANR	3046717	Condition	( * sockTable ) [ i ] . iosock	2571:7:73580:73601	3046640	0	True				
ANR	3046718	MemberAccess	( * sockTable ) [ i ] . iosock		3046640	0					
ANR	3046719	ArrayIndexing	( * sockTable ) [ i ]		3046640	0					
ANR	3046720	UnaryOperationExpression	* sockTable		3046640	0					
ANR	3046721	UnaryOperator	*		3046640	0					
ANR	3046722	Identifier	sockTable		3046640	1					
ANR	3046723	Identifier	i		3046640	1					
ANR	3046724	Identifier	iosock		3046640	1					
ANR	3046725	CompoundStatement		21:32:622:622	3046640	1					
ANR	3046726	ExpressionStatement	"descrip1 = ""NULL"""	2572:3:73610:73627	3046640	0	True				
ANR	3046727	AssignmentExpression	"descrip1 = ""NULL"""		3046640	0		=			
ANR	3046728	Identifier	descrip1		3046640	0					
ANR	3046729	PrimaryExpression	"""NULL"""		3046640	1					
ANR	3046730	ExpressionStatement	descrip2 = descrip1	2573:3:73632:73651	3046640	1	True				
ANR	3046731	AssignmentExpression	descrip2 = descrip1		3046640	0		=			
ANR	3046732	Identifier	descrip2		3046640	0					
ANR	3046733	Identifier	descrip1		3046640	1					
ANR	3046734	IfStatement	if ( ( * sockTable ) [ i ] . iosock_descrip )		3046640	2					
ANR	3046735	Condition	( * sockTable ) [ i ] . iosock_descrip	2574:8:73661:73690	3046640	0	True				
ANR	3046736	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3046640	0					
ANR	3046737	ArrayIndexing	( * sockTable ) [ i ]		3046640	0					
ANR	3046738	UnaryOperationExpression	* sockTable		3046640	0					
ANR	3046739	UnaryOperator	*		3046640	0					
ANR	3046740	Identifier	sockTable		3046640	1					
ANR	3046741	Identifier	i		3046640	1					
ANR	3046742	Identifier	iosock_descrip		3046640	1					
ANR	3046743	ExpressionStatement	descrip1 = ( * sockTable ) [ i ] . iosock_descrip	2575:4:73698:73739	3046640	1	True				
ANR	3046744	AssignmentExpression	descrip1 = ( * sockTable ) [ i ] . iosock_descrip		3046640	0		=			
ANR	3046745	Identifier	descrip1		3046640	0					
ANR	3046746	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3046640	1					
ANR	3046747	ArrayIndexing	( * sockTable ) [ i ]		3046640	0					
ANR	3046748	UnaryOperationExpression	* sockTable		3046640	0					
ANR	3046749	UnaryOperator	*		3046640	0					
ANR	3046750	Identifier	sockTable		3046640	1					
ANR	3046751	Identifier	i		3046640	1					
ANR	3046752	Identifier	iosock_descrip		3046640	1					
ANR	3046753	IfStatement	if ( ( * sockTable ) [ i ] . handler_descrip )		3046640	3					
ANR	3046754	Condition	( * sockTable ) [ i ] . handler_descrip	2576:8:73749:73779	3046640	0	True				
ANR	3046755	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3046640	0					
ANR	3046756	ArrayIndexing	( * sockTable ) [ i ]		3046640	0					
ANR	3046757	UnaryOperationExpression	* sockTable		3046640	0					
ANR	3046758	UnaryOperator	*		3046640	0					
ANR	3046759	Identifier	sockTable		3046640	1					
ANR	3046760	Identifier	i		3046640	1					
ANR	3046761	Identifier	handler_descrip		3046640	1					
ANR	3046762	ExpressionStatement	descrip2 = ( * sockTable ) [ i ] . handler_descrip	2577:4:73787:73829	3046640	1	True				
ANR	3046763	AssignmentExpression	descrip2 = ( * sockTable ) [ i ] . handler_descrip		3046640	0		=			
ANR	3046764	Identifier	descrip2		3046640	0					
ANR	3046765	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3046640	1					
ANR	3046766	ArrayIndexing	( * sockTable ) [ i ]		3046640	0					
ANR	3046767	UnaryOperationExpression	* sockTable		3046640	0					
ANR	3046768	UnaryOperator	*		3046640	0					
ANR	3046769	Identifier	sockTable		3046640	1					
ANR	3046770	Identifier	i		3046640	1					
ANR	3046771	Identifier	handler_descrip		3046640	1					
ANR	3046772	ExpressionStatement	"dprintf ( flag , ""%s%d: %d %s %s\\n"" , indent , i , ( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc ( ) , descrip1 , descrip2 )"	2578:3:73834:73956	3046640	4	True				
ANR	3046773	CallExpression	"dprintf ( flag , ""%s%d: %d %s %s\\n"" , indent , i , ( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc ( ) , descrip1 , descrip2 )"		3046640	0					
ANR	3046774	Callee	dprintf		3046640	0					
ANR	3046775	Identifier	dprintf		3046640	0					
ANR	3046776	ArgumentList	flag		3046640	1					
ANR	3046777	Argument	flag		3046640	0					
ANR	3046778	Identifier	flag		3046640	0					
ANR	3046779	Argument	"""%s%d: %d %s %s\\n"""		3046640	1					
ANR	3046780	PrimaryExpression	"""%s%d: %d %s %s\\n"""		3046640	0					
ANR	3046781	Argument	indent		3046640	2					
ANR	3046782	Identifier	indent		3046640	0					
ANR	3046783	Argument	i		3046640	3					
ANR	3046784	Identifier	i		3046640	0					
ANR	3046785	Argument	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc ( )		3046640	4					
ANR	3046786	CallExpression	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc ( )		3046640	0					
ANR	3046787	Callee	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc		3046640	0					
ANR	3046788	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc		3046640	0					
ANR	3046789	CastExpression	( Sock * ) ( * sockTable ) [ i ] . iosock		3046640	0					
ANR	3046790	CastTarget	Sock *		3046640	0					
ANR	3046791	MemberAccess	( * sockTable ) [ i ] . iosock		3046640	1					
ANR	3046792	ArrayIndexing	( * sockTable ) [ i ]		3046640	0					
ANR	3046793	UnaryOperationExpression	* sockTable		3046640	0					
ANR	3046794	UnaryOperator	*		3046640	0					
ANR	3046795	Identifier	sockTable		3046640	1					
ANR	3046796	Identifier	i		3046640	1					
ANR	3046797	Identifier	iosock		3046640	1					
ANR	3046798	Identifier	get_file_desc		3046640	1					
ANR	3046799	ArgumentList			3046640	1					
ANR	3046800	Argument	descrip1		3046640	5					
ANR	3046801	Identifier	descrip1		3046640	0					
ANR	3046802	Argument	descrip2		3046640	6					
ANR	3046803	Identifier	descrip2		3046640	0					
ANR	3046804	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2582:1:73966:73985	3046640	9	True				
ANR	3046805	CallExpression	"dprintf ( flag , ""\\n"" )"		3046640	0					
ANR	3046806	Callee	dprintf		3046640	0					
ANR	3046807	Identifier	dprintf		3046640	0					
ANR	3046808	ArgumentList	flag		3046640	1					
ANR	3046809	Argument	flag		3046640	0					
ANR	3046810	Identifier	flag		3046640	0					
ANR	3046811	Argument	"""\\n"""		3046640	1					
ANR	3046812	PrimaryExpression	"""\\n"""		3046640	0					
ANR	3046813	ReturnType	void		3046640	1					
ANR	3046814	Identifier	DaemonCore :: DumpSocketTable		3046640	2					
ANR	3046815	ParameterList	"int flag , const char * indent"		3046640	3					
ANR	3046816	Parameter	int flag	2550:33:72952:72959	3046640	0	True				
ANR	3046817	ParameterType	int		3046640	0					
ANR	3046818	Identifier	flag		3046640	1					
ANR	3046819	Parameter	const char * indent	2550:43:72962:72979	3046640	1	True				
ANR	3046820	ParameterType	const char *		3046640	0					
ANR	3046821	Identifier	indent		3046640	1					
ANR	3046822	CFGEntryNode	ENTRY		3046640		True				
ANR	3046823	CFGExitNode	EXIT		3046640		True				
ANR	3046824	Symbol	* * i		3046640						
ANR	3046825	Symbol	flag		3046640						
ANR	3046826	Symbol	NULL		3046640						
ANR	3046827	Symbol	* * * sockTable		3046640						
ANR	3046828	Symbol	indent		3046640						
ANR	3046829	Symbol	nSock		3046640						
ANR	3046830	Symbol	sockTable		3046640						
ANR	3046831	Symbol	DEFAULT_INDENT		3046640						
ANR	3046832	Symbol	i		3046640						
ANR	3046833	Symbol	DebugFlags		3046640						
ANR	3046834	Symbol	* * sockTable		3046640						
ANR	3046835	Symbol	( * sockTable ) [ i ] . handler_descrip		3046640						
ANR	3046836	Symbol	* i		3046640						
ANR	3046837	Symbol	( * sockTable ) [ i ] . iosock_descrip		3046640						
ANR	3046838	Symbol	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc		3046640						
ANR	3046839	Symbol	* sockTable		3046640						
ANR	3046840	Symbol	( * sockTable ) [ i ] . iosock		3046640						
ANR	3046841	Symbol	descrip1		3046640						
ANR	3046842	Symbol	descrip2		3046640						
ANR	3046843	Symbol	* ( * sockTable ) [ i ] . iosock		3046640						
ANR	3046844	Function	DaemonCore :: refreshDNS	2585:0:73990:74189							
ANR	3046845	FunctionDef	DaemonCore :: refreshDNS ()		3046844	0					
ANR	3046846	CompoundStatement		2586:25:74020:74189	3046844	0					
ANR	3046847	ExpressionStatement	res_init ( )	2589:1:74126:74136	3046844	0	True				
ANR	3046848	CallExpression	res_init ( )		3046844	0					
ANR	3046849	Callee	res_init		3046844	0					
ANR	3046850	Identifier	res_init		3046844	0					
ANR	3046851	ArgumentList			3046844	1					
ANR	3046852	ExpressionStatement	getSecMan ( ) -> getIpVerify ( ) -> refreshDNS ( )	2592:1:74147:74187	3046844	1	True				
ANR	3046853	CallExpression	getSecMan ( ) -> getIpVerify ( ) -> refreshDNS ( )		3046844	0					
ANR	3046854	Callee	getSecMan ( ) -> getIpVerify ( ) -> refreshDNS		3046844	0					
ANR	3046855	PtrMemberAccess	getSecMan ( ) -> getIpVerify ( ) -> refreshDNS		3046844	0					
ANR	3046856	CallExpression	getSecMan ( ) -> getIpVerify ( )		3046844	0					
ANR	3046857	Callee	getSecMan ( ) -> getIpVerify		3046844	0					
ANR	3046858	PtrMemberAccess	getSecMan ( ) -> getIpVerify		3046844	0					
ANR	3046859	CallExpression	getSecMan ( )		3046844	0					
ANR	3046860	Callee	getSecMan		3046844	0					
ANR	3046861	Identifier	getSecMan		3046844	0					
ANR	3046862	ArgumentList			3046844	1					
ANR	3046863	Identifier	getIpVerify		3046844	1					
ANR	3046864	ArgumentList			3046844	1					
ANR	3046865	Identifier	refreshDNS		3046844	1					
ANR	3046866	ArgumentList			3046844	1					
ANR	3046867	ReturnType	void		3046844	1					
ANR	3046868	Identifier	DaemonCore :: refreshDNS		3046844	2					
ANR	3046869	ParameterList			3046844	3					
ANR	3046870	CFGEntryNode	ENTRY		3046844		True				
ANR	3046871	CFGExitNode	EXIT		3046844		True				
ANR	3046872	Symbol	* getSecMan		3046844						
ANR	3046873	Symbol	getSecMan ( ) -> getIpVerify		3046844						
ANR	3046874	Symbol	getSecMan		3046844						
ANR	3046875	ClassDef	DCThreadState	2595:0:74192:74411							
ANR	3046876	Function	DCThreadState	2597:1:74241:74313							
ANR	3046877	FunctionDef	DCThreadState (int tid)		3046876	0					
ANR	3046878	CompoundStatement		2598:2:74267:74313	3046876	0					
ANR	3046879	ExpressionStatement	m_tid = tid	2598:0:74268:74277	3046876	0	True				
ANR	3046880	AssignmentExpression	m_tid = tid		3046876	0		=			
ANR	3046881	Identifier	m_tid		3046876	0					
ANR	3046882	Identifier	tid		3046876	1					
ANR	3046883	ExpressionStatement	m_dataptr = NULL	2598:11:74279:74293	3046876	1	True				
ANR	3046884	AssignmentExpression	m_dataptr = NULL		3046876	0		=			
ANR	3046885	Identifier	m_dataptr		3046876	0					
ANR	3046886	Identifier	NULL		3046876	1					
ANR	3046887	ExpressionStatement	m_regdataptr = NULL	2598:27:74295:74312	3046876	2	True				
ANR	3046888	AssignmentExpression	m_regdataptr = NULL		3046876	0		=			
ANR	3046889	Identifier	m_regdataptr		3046876	0					
ANR	3046890	Identifier	NULL		3046876	1					
ANR	3046891	Identifier	DCThreadState		3046876	1					
ANR	3046892	ParameterList	int tid		3046876	2					
ANR	3046893	Parameter	int tid	2597:15:74255:74261	3046876	0	True				
ANR	3046894	ParameterType	int		3046876	0					
ANR	3046895	Identifier	tid		3046876	1					
ANR	3046896	CFGEntryNode	ENTRY		3046876		True				
ANR	3046897	CFGExitNode	EXIT		3046876		True				
ANR	3046898	Symbol	m_tid		3046876						
ANR	3046899	Symbol	NULL		3046876						
ANR	3046900	Symbol	m_regdataptr		3046876						
ANR	3046901	Symbol	m_dataptr		3046876						
ANR	3046902	Symbol	tid		3046876						
ANR	3046903	Function	get_tid	2599:1:74316:74346							
ANR	3046904	FunctionDef	get_tid ()		3046903	1					
ANR	3046905	CompoundStatement		2599:15:74330:74346	3046903	0					
ANR	3046906	ReturnStatement	return m_tid ;	2599:1:74332:74344	3046903	0	True				
ANR	3046907	Identifier	m_tid		3046903	0					
ANR	3046908	ReturnType	int		3046903	1					
ANR	3046909	Identifier	get_tid		3046903	2					
ANR	3046910	ParameterList			3046903	3					
ANR	3046911	CFGEntryNode	ENTRY		3046903		True				
ANR	3046912	CFGExitNode	EXIT		3046903		True				
ANR	3046913	Symbol	m_tid		3046903						
ANR	3046914	DeclStmt									
ANR	3046915	Decl							void	void * *	m_dataptr
ANR	3046916	DeclStmt									
ANR	3046917	Decl							void	void * *	m_regdataptr
ANR	3046918	DeclStmt									
ANR	3046919	Decl							int	int	m_tid
ANR	3046920	Function	DaemonCore :: thread_switch_callback	2606:0:74415:76465							
ANR	3046921	FunctionDef	DaemonCore :: thread_switch_callback (void * & incoming_contextVP)		3046920	0					
ANR	3046922	CompoundStatement		2608:0:74484:76465	3046920	0					
ANR	3046923	Statement	static	2609:1:74487:74492	3046920	0	True				
ANR	3046924	IdentifierDeclStatement	int last_tid = 1 ;	2609:8:74494:74510	3046920	1	True				
ANR	3046925	IdentifierDecl	last_tid = 1		3046920	0					
ANR	3046926	IdentifierDeclType	int		3046920	0					
ANR	3046927	Identifier	last_tid		3046920	1					
ANR	3046928	AssignmentExpression	last_tid = 1		3046920	2		=			
ANR	3046929	Identifier	last_tid		3046920	0					
ANR	3046930	PrimaryExpression	1		3046920	1					
ANR	3046931	IdentifierDeclStatement	DCThreadState * outgoing_context = NULL ;	2610:1:74544:74582	3046920	2	True				
ANR	3046932	IdentifierDecl	* outgoing_context = NULL		3046920	0					
ANR	3046933	IdentifierDeclType	DCThreadState *		3046920	0					
ANR	3046934	Identifier	outgoing_context		3046920	1					
ANR	3046935	AssignmentExpression	* outgoing_context = NULL		3046920	2		=			
ANR	3046936	Identifier	NULL		3046920	0					
ANR	3046937	Identifier	NULL		3046920	1					
ANR	3046938	IdentifierDeclStatement	DCThreadState * incoming_context = ( DCThreadState * ) incoming_contextVP ;	2611:1:74585:74655	3046920	3	True				
ANR	3046939	IdentifierDecl	* incoming_context = ( DCThreadState * ) incoming_contextVP		3046920	0					
ANR	3046940	IdentifierDeclType	DCThreadState *		3046920	0					
ANR	3046941	Identifier	incoming_context		3046920	1					
ANR	3046942	AssignmentExpression	* incoming_context = ( DCThreadState * ) incoming_contextVP		3046920	2		=			
ANR	3046943	Identifier	incoming_context		3046920	0					
ANR	3046944	CastExpression	( DCThreadState * ) incoming_contextVP		3046920	1					
ANR	3046945	CastTarget	DCThreadState *		3046920	0					
ANR	3046946	Identifier	incoming_contextVP		3046920	1					
ANR	3046947	IdentifierDeclStatement	int current_tid = CondorThreads :: get_tid ( ) ;	2612:1:74658:74700	3046920	4	True				
ANR	3046948	IdentifierDecl	current_tid = CondorThreads :: get_tid ( )		3046920	0					
ANR	3046949	IdentifierDeclType	int		3046920	0					
ANR	3046950	Identifier	current_tid		3046920	1					
ANR	3046951	AssignmentExpression	current_tid = CondorThreads :: get_tid ( )		3046920	2		=			
ANR	3046952	Identifier	current_tid		3046920	0					
ANR	3046953	CallExpression	CondorThreads :: get_tid ( )		3046920	1					
ANR	3046954	Callee	CondorThreads :: get_tid		3046920	0					
ANR	3046955	Identifier	CondorThreads :: get_tid		3046920	0					
ANR	3046956	ArgumentList			3046920	1					
ANR	3046957	ExpressionStatement	"dprintf ( D_THREADS , ""DaemonCore context switch from tid %d to %d\\n"" , last_tid , current_tid )"	2618:1:74871:74963	3046920	5	True				
ANR	3046958	CallExpression	"dprintf ( D_THREADS , ""DaemonCore context switch from tid %d to %d\\n"" , last_tid , current_tid )"		3046920	0					
ANR	3046959	Callee	dprintf		3046920	0					
ANR	3046960	Identifier	dprintf		3046920	0					
ANR	3046961	ArgumentList	D_THREADS		3046920	1					
ANR	3046962	Argument	D_THREADS		3046920	0					
ANR	3046963	Identifier	D_THREADS		3046920	0					
ANR	3046964	Argument	"""DaemonCore context switch from tid %d to %d\\n"""		3046920	1					
ANR	3046965	PrimaryExpression	"""DaemonCore context switch from tid %d to %d\\n"""		3046920	0					
ANR	3046966	Argument	last_tid		3046920	2					
ANR	3046967	Identifier	last_tid		3046920	0					
ANR	3046968	Argument	current_tid		3046920	3					
ANR	3046969	Identifier	current_tid		3046920	0					
ANR	3046970	IfStatement	if ( ! incoming_context )		3046920	6					
ANR	3046971	Condition	! incoming_context	2621:5:74971:74987	3046920	0	True				
ANR	3046972	UnaryOperationExpression	! incoming_context		3046920	0					
ANR	3046973	UnaryOperator	!		3046920	0					
ANR	3046974	Identifier	incoming_context		3046920	1					
ANR	3046975	CompoundStatement		14:24:505:505	3046920	1					
ANR	3046976	ExpressionStatement	incoming_context = new DCThreadState ( current_tid )	2625:2:75137:75186	3046920	0	True				
ANR	3046977	AssignmentExpression	incoming_context = new DCThreadState ( current_tid )		3046920	0		=			
ANR	3046978	Identifier	incoming_context		3046920	0					
ANR	3046979	Identifier	current_tid		3046920	1					
ANR	3046980	ExpressionStatement	ASSERT ( incoming_context )	2626:2:75190:75214	3046920	1	True				
ANR	3046981	CallExpression	ASSERT ( incoming_context )		3046920	0					
ANR	3046982	Callee	ASSERT		3046920	0					
ANR	3046983	Identifier	ASSERT		3046920	0					
ANR	3046984	ArgumentList	incoming_context		3046920	1					
ANR	3046985	Argument	incoming_context		3046920	0					
ANR	3046986	Identifier	incoming_context		3046920	0					
ANR	3046987	ExpressionStatement	incoming_contextVP = ( void * ) incoming_context	2627:2:75218:75264	3046920	2	True				
ANR	3046988	AssignmentExpression	incoming_contextVP = ( void * ) incoming_context		3046920	0		=			
ANR	3046989	Identifier	incoming_contextVP		3046920	0					
ANR	3046990	CastExpression	( void * ) incoming_context		3046920	1					
ANR	3046991	CastTarget	void *		3046920	0					
ANR	3046992	Identifier	incoming_context		3046920	1					
ANR	3046993	IdentifierDeclStatement	WorkerThreadPtr_t context = CondorThreads :: get_handle ( last_tid ) ;	2638:1:75685:75748	3046920	7	True				
ANR	3046994	IdentifierDecl	context = CondorThreads :: get_handle ( last_tid )		3046920	0					
ANR	3046995	IdentifierDeclType	WorkerThreadPtr_t		3046920	0					
ANR	3046996	Identifier	context		3046920	1					
ANR	3046997	AssignmentExpression	context = CondorThreads :: get_handle ( last_tid )		3046920	2		=			
ANR	3046998	Identifier	context		3046920	0					
ANR	3046999	CallExpression	CondorThreads :: get_handle ( last_tid )		3046920	1					
ANR	3047000	Callee	CondorThreads :: get_handle		3046920	0					
ANR	3047001	Identifier	CondorThreads :: get_handle		3046920	0					
ANR	3047002	ArgumentList	last_tid		3046920	1					
ANR	3047003	Argument	last_tid		3046920	0					
ANR	3047004	Identifier	last_tid		3046920	0					
ANR	3047005	IfStatement	if ( ! context . is_null ( ) )		3046920	8					
ANR	3047006	Condition	! context . is_null ( )	2639:6:75756:75773	3046920	0	True				
ANR	3047007	UnaryOperationExpression	! context . is_null ( )		3046920	0					
ANR	3047008	UnaryOperator	!		3046920	0					
ANR	3047009	CallExpression	context . is_null ( )		3046920	1					
ANR	3047010	Callee	context . is_null		3046920	0					
ANR	3047011	MemberAccess	context . is_null		3046920	0					
ANR	3047012	Identifier	context		3046920	0					
ANR	3047013	Identifier	is_null		3046920	1					
ANR	3047014	ArgumentList			3046920	1					
ANR	3047015	CompoundStatement		32:27:1292:1292	3046920	1					
ANR	3047016	ExpressionStatement	outgoing_context = ( DCThreadState * ) context -> user_pointer_	2640:2:75781:75840	3046920	0	True				
ANR	3047017	AssignmentExpression	outgoing_context = ( DCThreadState * ) context -> user_pointer_		3046920	0		=			
ANR	3047018	Identifier	outgoing_context		3046920	0					
ANR	3047019	CastExpression	( DCThreadState * ) context -> user_pointer_		3046920	1					
ANR	3047020	CastTarget	DCThreadState *		3046920	0					
ANR	3047021	PtrMemberAccess	context -> user_pointer_		3046920	1					
ANR	3047022	Identifier	context		3046920	0					
ANR	3047023	Identifier	user_pointer_		3046920	1					
ANR	3047024	IfStatement	if ( ! outgoing_context )		3046920	1					
ANR	3047025	Condition	! outgoing_context	2641:6:75848:75864	3046920	0	True				
ANR	3047026	UnaryOperationExpression	! outgoing_context		3046920	0					
ANR	3047027	UnaryOperator	!		3046920	0					
ANR	3047028	Identifier	outgoing_context		3046920	1					
ANR	3047029	CompoundStatement		34:25:1382:1382	3046920	1					
ANR	3047030	ExpressionStatement	"EXCEPT ( ""ERROR: daemonCore - no thread context for tid %d\\n"" , last_tid )"	2642:4:75873:75949	3046920	0	True				
ANR	3047031	CallExpression	"EXCEPT ( ""ERROR: daemonCore - no thread context for tid %d\\n"" , last_tid )"		3046920	0					
ANR	3047032	Callee	EXCEPT		3046920	0					
ANR	3047033	Identifier	EXCEPT		3046920	0					
ANR	3047034	ArgumentList	"""ERROR: daemonCore - no thread context for tid %d\\n"""		3046920	1					
ANR	3047035	Argument	"""ERROR: daemonCore - no thread context for tid %d\\n"""		3046920	0					
ANR	3047036	PrimaryExpression	"""ERROR: daemonCore - no thread context for tid %d\\n"""		3046920	0					
ANR	3047037	Argument	last_tid		3046920	1					
ANR	3047038	Identifier	last_tid		3046920	0					
ANR	3047039	IfStatement	if ( outgoing_context )		3046920	9					
ANR	3047040	Condition	outgoing_context	2648:6:76021:76036	3046920	0	True				
ANR	3047041	Identifier	outgoing_context		3046920	0					
ANR	3047042	CompoundStatement		41:25:1555:1555	3046920	1					
ANR	3047043	ExpressionStatement	ASSERT ( outgoing_context -> get_tid ( ) == last_tid )	2649:2:76044:76091	3046920	0	True				
ANR	3047044	CallExpression	ASSERT ( outgoing_context -> get_tid ( ) == last_tid )		3046920	0					
ANR	3047045	Callee	ASSERT		3046920	0					
ANR	3047046	Identifier	ASSERT		3046920	0					
ANR	3047047	ArgumentList	outgoing_context -> get_tid ( ) == last_tid		3046920	1					
ANR	3047048	Argument	outgoing_context -> get_tid ( ) == last_tid		3046920	0					
ANR	3047049	EqualityExpression	outgoing_context -> get_tid ( ) == last_tid		3046920	0		==			
ANR	3047050	CallExpression	outgoing_context -> get_tid ( )		3046920	0					
ANR	3047051	Callee	outgoing_context -> get_tid		3046920	0					
ANR	3047052	PtrMemberAccess	outgoing_context -> get_tid		3046920	0					
ANR	3047053	Identifier	outgoing_context		3046920	0					
ANR	3047054	Identifier	get_tid		3046920	1					
ANR	3047055	ArgumentList			3046920	1					
ANR	3047056	Identifier	last_tid		3046920	1					
ANR	3047057	ExpressionStatement	outgoing_context -> m_dataptr = curr_dataptr	2650:2:76095:76137	3046920	1	True				
ANR	3047058	AssignmentExpression	outgoing_context -> m_dataptr = curr_dataptr		3046920	0		=			
ANR	3047059	PtrMemberAccess	outgoing_context -> m_dataptr		3046920	0					
ANR	3047060	Identifier	outgoing_context		3046920	0					
ANR	3047061	Identifier	m_dataptr		3046920	1					
ANR	3047062	Identifier	curr_dataptr		3046920	1					
ANR	3047063	ExpressionStatement	outgoing_context -> m_regdataptr = curr_regdataptr	2651:2:76141:76189	3046920	2	True				
ANR	3047064	AssignmentExpression	outgoing_context -> m_regdataptr = curr_regdataptr		3046920	0		=			
ANR	3047065	PtrMemberAccess	outgoing_context -> m_regdataptr		3046920	0					
ANR	3047066	Identifier	outgoing_context		3046920	0					
ANR	3047067	Identifier	m_regdataptr		3046920	1					
ANR	3047068	Identifier	curr_regdataptr		3046920	1					
ANR	3047069	ExpressionStatement	ASSERT ( incoming_context -> get_tid ( ) == current_tid )	2655:1:76246:76296	3046920	10	True				
ANR	3047070	CallExpression	ASSERT ( incoming_context -> get_tid ( ) == current_tid )		3046920	0					
ANR	3047071	Callee	ASSERT		3046920	0					
ANR	3047072	Identifier	ASSERT		3046920	0					
ANR	3047073	ArgumentList	incoming_context -> get_tid ( ) == current_tid		3046920	1					
ANR	3047074	Argument	incoming_context -> get_tid ( ) == current_tid		3046920	0					
ANR	3047075	EqualityExpression	incoming_context -> get_tid ( ) == current_tid		3046920	0		==			
ANR	3047076	CallExpression	incoming_context -> get_tid ( )		3046920	0					
ANR	3047077	Callee	incoming_context -> get_tid		3046920	0					
ANR	3047078	PtrMemberAccess	incoming_context -> get_tid		3046920	0					
ANR	3047079	Identifier	incoming_context		3046920	0					
ANR	3047080	Identifier	get_tid		3046920	1					
ANR	3047081	ArgumentList			3046920	1					
ANR	3047082	Identifier	current_tid		3046920	1					
ANR	3047083	ExpressionStatement	curr_dataptr = incoming_context -> m_dataptr	2656:1:76299:76341	3046920	11	True				
ANR	3047084	AssignmentExpression	curr_dataptr = incoming_context -> m_dataptr		3046920	0		=			
ANR	3047085	Identifier	curr_dataptr		3046920	0					
ANR	3047086	PtrMemberAccess	incoming_context -> m_dataptr		3046920	1					
ANR	3047087	Identifier	incoming_context		3046920	0					
ANR	3047088	Identifier	m_dataptr		3046920	1					
ANR	3047089	ExpressionStatement	curr_regdataptr = incoming_context -> m_regdataptr	2657:1:76344:76392	3046920	12	True				
ANR	3047090	AssignmentExpression	curr_regdataptr = incoming_context -> m_regdataptr		3046920	0		=			
ANR	3047091	Identifier	curr_regdataptr		3046920	0					
ANR	3047092	PtrMemberAccess	incoming_context -> m_regdataptr		3046920	1					
ANR	3047093	Identifier	incoming_context		3046920	0					
ANR	3047094	Identifier	m_regdataptr		3046920	1					
ANR	3047095	ExpressionStatement	last_tid = current_tid	2660:1:76441:76463	3046920	13	True				
ANR	3047096	AssignmentExpression	last_tid = current_tid		3046920	0		=			
ANR	3047097	Identifier	last_tid		3046920	0					
ANR	3047098	Identifier	current_tid		3046920	1					
ANR	3047099	ReturnType	void		3046920	1					
ANR	3047100	Identifier	DaemonCore :: thread_switch_callback		3046920	2					
ANR	3047101	ParameterList	void * & incoming_contextVP		3046920	3					
ANR	3047102	Parameter	void * & incoming_contextVP	2607:35:74456:74481	3046920	0	True				
ANR	3047103	ParameterType	void * &		3046920	0					
ANR	3047104	Identifier	incoming_contextVP		3046920	1					
ANR	3047105	CFGEntryNode	ENTRY		3046920		True				
ANR	3047106	CFGExitNode	EXIT		3046920		True				
ANR	3047107	Symbol	CondorThreads :: get_tid		3046920						
ANR	3047108	Symbol	curr_regdataptr		3046920						
ANR	3047109	Symbol	incoming_context -> m_regdataptr		3046920						
ANR	3047110	Symbol	NULL		3046920						
ANR	3047111	Symbol	context -> user_pointer_		3046920						
ANR	3047112	Symbol	incoming_context -> m_dataptr		3046920						
ANR	3047113	Symbol	* incoming_context		3046920						
ANR	3047114	Symbol	D_THREADS		3046920						
ANR	3047115	Symbol	* outgoing_context		3046920						
ANR	3047116	Symbol	incoming_context		3046920						
ANR	3047117	Symbol	curr_dataptr		3046920						
ANR	3047118	Symbol	last_tid		3046920						
ANR	3047119	Symbol	* context		3046920						
ANR	3047120	Symbol	outgoing_context -> m_dataptr		3046920						
ANR	3047121	Symbol	context . is_null		3046920						
ANR	3047122	Symbol	current_tid		3046920						
ANR	3047123	Symbol	outgoing_context		3046920						
ANR	3047124	Symbol	outgoing_context -> m_regdataptr		3046920						
ANR	3047125	Symbol	incoming_contextVP		3046920						
ANR	3047126	Symbol	context		3046920						
ANR	3047127	Symbol	outgoing_context -> get_tid		3046920						
ANR	3047128	Symbol	CondorThreads :: get_handle		3046920						
ANR	3047129	Symbol	incoming_context -> get_tid		3046920						
ANR	3047130	Function	DaemonCore :: reconfig	2663:0:76468:84038							
ANR	3047131	FunctionDef	DaemonCore :: reconfig ()		3047130	0					
ANR	3047132	CompoundStatement		2664:27:76500:84038	3047130	0					
ANR	3047133	ExpressionStatement	ClassAd :: Reconfig ( )	2674:1:76867:76886	3047130	0	True				
ANR	3047134	CallExpression	ClassAd :: Reconfig ( )		3047130	0					
ANR	3047135	Callee	ClassAd :: Reconfig		3047130	0					
ANR	3047136	Identifier	ClassAd :: Reconfig		3047130	0					
ANR	3047137	ArgumentList			3047130	1					
ANR	3047138	ExpressionStatement	dc_stats . Reconfig ( )	2677:4:76974:76993	3047130	1	True				
ANR	3047139	CallExpression	dc_stats . Reconfig ( )		3047130	0					
ANR	3047140	Callee	dc_stats . Reconfig		3047130	0					
ANR	3047141	MemberAccess	dc_stats . Reconfig		3047130	0					
ANR	3047142	Identifier	dc_stats		3047130	0					
ANR	3047143	Identifier	Reconfig		3047130	1					
ANR	3047144	ArgumentList			3047130	1					
ANR	3047145	ExpressionStatement	m_dirty_sinful = true	2679:1:76997:77018	3047130	2	True				
ANR	3047146	AssignmentExpression	m_dirty_sinful = true		3047130	0		=			
ANR	3047147	Identifier	m_dirty_sinful		3047130	0					
ANR	3047148	Identifier	true		3047130	1					
ANR	3047149	IdentifierDeclStatement	SecMan * secman = getSecMan ( ) ;	2681:1:77071:77099	3047130	3	True				
ANR	3047150	IdentifierDecl	* secman = getSecMan ( )		3047130	0					
ANR	3047151	IdentifierDeclType	SecMan *		3047130	0					
ANR	3047152	Identifier	secman		3047130	1					
ANR	3047153	AssignmentExpression	* secman = getSecMan ( )		3047130	2		=			
ANR	3047154	Identifier	secman		3047130	0					
ANR	3047155	CallExpression	getSecMan ( )		3047130	1					
ANR	3047156	Callee	getSecMan		3047130	0					
ANR	3047157	Identifier	getSecMan		3047130	0					
ANR	3047158	ArgumentList			3047130	1					
ANR	3047159	ExpressionStatement	secman -> reconfig ( )	2682:1:77102:77120	3047130	4	True				
ANR	3047160	CallExpression	secman -> reconfig ( )		3047130	0					
ANR	3047161	Callee	secman -> reconfig		3047130	0					
ANR	3047162	PtrMemberAccess	secman -> reconfig		3047130	0					
ANR	3047163	Identifier	secman		3047130	0					
ANR	3047164	Identifier	reconfig		3047130	1					
ANR	3047165	ArgumentList			3047130	1					
ANR	3047166	IdentifierDeclStatement	"int dns_interval = param_integer ( ""DNS_CACHE_REFRESH"" , 8 * 60 * 60 + ( rand ( ) % 600 ) , 0 ) ;"	2685:1:77171:77259	3047130	5	True				
ANR	3047167	IdentifierDecl	"dns_interval = param_integer ( ""DNS_CACHE_REFRESH"" , 8 * 60 * 60 + ( rand ( ) % 600 ) , 0 )"		3047130	0					
ANR	3047168	IdentifierDeclType	int		3047130	0					
ANR	3047169	Identifier	dns_interval		3047130	1					
ANR	3047170	AssignmentExpression	"dns_interval = param_integer ( ""DNS_CACHE_REFRESH"" , 8 * 60 * 60 + ( rand ( ) % 600 ) , 0 )"		3047130	2		=			
ANR	3047171	Identifier	dns_interval		3047130	0					
ANR	3047172	CallExpression	"param_integer ( ""DNS_CACHE_REFRESH"" , 8 * 60 * 60 + ( rand ( ) % 600 ) , 0 )"		3047130	1					
ANR	3047173	Callee	param_integer		3047130	0					
ANR	3047174	Identifier	param_integer		3047130	0					
ANR	3047175	ArgumentList	"""DNS_CACHE_REFRESH"""		3047130	1					
ANR	3047176	Argument	"""DNS_CACHE_REFRESH"""		3047130	0					
ANR	3047177	PrimaryExpression	"""DNS_CACHE_REFRESH"""		3047130	0					
ANR	3047178	Argument	8 * 60 * 60 + ( rand ( ) % 600 )		3047130	1					
ANR	3047179	AdditiveExpression	8 * 60 * 60 + ( rand ( ) % 600 )		3047130	0		+			
ANR	3047180	MultiplicativeExpression	8 * 60 * 60		3047130	0		*			
ANR	3047181	PrimaryExpression	8		3047130	0					
ANR	3047182	MultiplicativeExpression	60 * 60		3047130	1		*			
ANR	3047183	PrimaryExpression	60		3047130	0					
ANR	3047184	PrimaryExpression	60		3047130	1					
ANR	3047185	MultiplicativeExpression	rand ( ) % 600		3047130	1		%			
ANR	3047186	CallExpression	rand ( )		3047130	0					
ANR	3047187	Callee	rand		3047130	0					
ANR	3047188	Identifier	rand		3047130	0					
ANR	3047189	ArgumentList			3047130	1					
ANR	3047190	PrimaryExpression	600		3047130	1					
ANR	3047191	Argument	0		3047130	2					
ANR	3047192	PrimaryExpression	0		3047130	0					
ANR	3047193	IfStatement	if ( dns_interval > 0 )		3047130	6					
ANR	3047194	Condition	dns_interval > 0	2687:5:77266:77281	3047130	0	True				
ANR	3047195	RelationalExpression	dns_interval > 0		3047130	0		>			
ANR	3047196	Identifier	dns_interval		3047130	0					
ANR	3047197	PrimaryExpression	0		3047130	1					
ANR	3047198	CompoundStatement		24:24:784:784	3047130	1					
ANR	3047199	IfStatement	if ( m_refresh_dns_timer < 0 )		3047130	0					
ANR	3047200	Condition	m_refresh_dns_timer < 0	2688:6:77293:77315	3047130	0	True				
ANR	3047201	RelationalExpression	m_refresh_dns_timer < 0		3047130	0		<			
ANR	3047202	Identifier	m_refresh_dns_timer		3047130	0					
ANR	3047203	PrimaryExpression	0		3047130	1					
ANR	3047204	CompoundStatement		25:32:818:818	3047130	1					
ANR	3047205	ExpressionStatement	"m_refresh_dns_timer = Register_Timer ( dns_interval , dns_interval , ( TimerHandlercpp ) & DaemonCore :: refreshDNS , ""DaemonCore::refreshDNS()"" , daemonCore )"	2689:3:77324:77492	3047130	0	True				
ANR	3047206	AssignmentExpression	"m_refresh_dns_timer = Register_Timer ( dns_interval , dns_interval , ( TimerHandlercpp ) & DaemonCore :: refreshDNS , ""DaemonCore::refreshDNS()"" , daemonCore )"		3047130	0		=			
ANR	3047207	Identifier	m_refresh_dns_timer		3047130	0					
ANR	3047208	CallExpression	"Register_Timer ( dns_interval , dns_interval , ( TimerHandlercpp ) & DaemonCore :: refreshDNS , ""DaemonCore::refreshDNS()"" , daemonCore )"		3047130	1					
ANR	3047209	Callee	Register_Timer		3047130	0					
ANR	3047210	Identifier	Register_Timer		3047130	0					
ANR	3047211	ArgumentList	dns_interval		3047130	1					
ANR	3047212	Argument	dns_interval		3047130	0					
ANR	3047213	Identifier	dns_interval		3047130	0					
ANR	3047214	Argument	dns_interval		3047130	1					
ANR	3047215	Identifier	dns_interval		3047130	0					
ANR	3047216	Argument	( TimerHandlercpp ) & DaemonCore :: refreshDNS		3047130	2					
ANR	3047217	CastExpression	( TimerHandlercpp ) & DaemonCore :: refreshDNS		3047130	0					
ANR	3047218	CastTarget	TimerHandlercpp		3047130	0					
ANR	3047219	UnaryOperationExpression	& DaemonCore :: refreshDNS		3047130	1					
ANR	3047220	UnaryOperator	&		3047130	0					
ANR	3047221	Identifier	DaemonCore :: refreshDNS		3047130	1					
ANR	3047222	Argument	"""DaemonCore::refreshDNS()"""		3047130	3					
ANR	3047223	PrimaryExpression	"""DaemonCore::refreshDNS()"""		3047130	0					
ANR	3047224	Argument	daemonCore		3047130	4					
ANR	3047225	Identifier	daemonCore		3047130	0					
ANR	3047226	ElseStatement	else		3047130	0					
ANR	3047227	CompoundStatement		30:9:1002:1002	3047130	0					
ANR	3047228	ExpressionStatement	"Reset_Timer ( m_refresh_dns_timer , dns_interval , dns_interval )"	2694:3:77508:77570	3047130	0	True				
ANR	3047229	CallExpression	"Reset_Timer ( m_refresh_dns_timer , dns_interval , dns_interval )"		3047130	0					
ANR	3047230	Callee	Reset_Timer		3047130	0					
ANR	3047231	Identifier	Reset_Timer		3047130	0					
ANR	3047232	ArgumentList	m_refresh_dns_timer		3047130	1					
ANR	3047233	Argument	m_refresh_dns_timer		3047130	0					
ANR	3047234	Identifier	m_refresh_dns_timer		3047130	0					
ANR	3047235	Argument	dns_interval		3047130	1					
ANR	3047236	Identifier	dns_interval		3047130	0					
ANR	3047237	Argument	dns_interval		3047130	2					
ANR	3047238	Identifier	dns_interval		3047130	0					
ANR	3047239	ElseStatement	else		3047130	0					
ANR	3047240	IfStatement	if ( m_refresh_dns_timer != - 1 )		3047130	0					
ANR	3047241	Condition	m_refresh_dns_timer != - 1	2697:10:77589:77613	3047130	0	True				
ANR	3047242	EqualityExpression	m_refresh_dns_timer != - 1		3047130	0		!=			
ANR	3047243	Identifier	m_refresh_dns_timer		3047130	0					
ANR	3047244	UnaryOperationExpression	- 1		3047130	1					
ANR	3047245	UnaryOperator	-		3047130	0					
ANR	3047246	PrimaryExpression	1		3047130	1					
ANR	3047247	CompoundStatement		34:38:1116:1116	3047130	1					
ANR	3047248	ExpressionStatement	daemonCore -> Cancel_Timer ( m_refresh_dns_timer )	2698:2:77621:77668	3047130	0	True				
ANR	3047249	CallExpression	daemonCore -> Cancel_Timer ( m_refresh_dns_timer )		3047130	0					
ANR	3047250	Callee	daemonCore -> Cancel_Timer		3047130	0					
ANR	3047251	PtrMemberAccess	daemonCore -> Cancel_Timer		3047130	0					
ANR	3047252	Identifier	daemonCore		3047130	0					
ANR	3047253	Identifier	Cancel_Timer		3047130	1					
ANR	3047254	ArgumentList	m_refresh_dns_timer		3047130	1					
ANR	3047255	Argument	m_refresh_dns_timer		3047130	0					
ANR	3047256	Identifier	m_refresh_dns_timer		3047130	0					
ANR	3047257	ExpressionStatement	m_refresh_dns_timer = - 1	2699:2:77672:77696	3047130	1	True				
ANR	3047258	AssignmentExpression	m_refresh_dns_timer = - 1		3047130	0		=			
ANR	3047259	Identifier	m_refresh_dns_timer		3047130	0					
ANR	3047260	UnaryOperationExpression	- 1		3047130	1					
ANR	3047261	UnaryOperator	-		3047130	0					
ANR	3047262	PrimaryExpression	1		3047130	1					
ANR	3047263	ExpressionStatement	"maxPipeBuffer = param_integer ( ""PIPE_BUFFER_MAX"" , 10240 )"	2704:1:77799:77854	3047130	7	True				
ANR	3047264	AssignmentExpression	"maxPipeBuffer = param_integer ( ""PIPE_BUFFER_MAX"" , 10240 )"		3047130	0		=			
ANR	3047265	Identifier	maxPipeBuffer		3047130	0					
ANR	3047266	CallExpression	"param_integer ( ""PIPE_BUFFER_MAX"" , 10240 )"		3047130	1					
ANR	3047267	Callee	param_integer		3047130	0					
ANR	3047268	Identifier	param_integer		3047130	0					
ANR	3047269	ArgumentList	"""PIPE_BUFFER_MAX"""		3047130	1					
ANR	3047270	Argument	"""PIPE_BUFFER_MAX"""		3047130	0					
ANR	3047271	PrimaryExpression	"""PIPE_BUFFER_MAX"""		3047130	0					
ANR	3047272	Argument	10240		3047130	1					
ANR	3047273	PrimaryExpression	10240		3047130	0					
ANR	3047274	ExpressionStatement	"m_iMaxAcceptsPerCycle = param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"	2706:4:77861:77926	3047130	8	True				
ANR	3047275	AssignmentExpression	"m_iMaxAcceptsPerCycle = param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"		3047130	0		=			
ANR	3047276	Identifier	m_iMaxAcceptsPerCycle		3047130	0					
ANR	3047277	CallExpression	"param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"		3047130	1					
ANR	3047278	Callee	param_integer		3047130	0					
ANR	3047279	Identifier	param_integer		3047130	0					
ANR	3047280	ArgumentList	"""MAX_ACCEPTS_PER_CYCLE"""		3047130	1					
ANR	3047281	Argument	"""MAX_ACCEPTS_PER_CYCLE"""		3047130	0					
ANR	3047282	PrimaryExpression	"""MAX_ACCEPTS_PER_CYCLE"""		3047130	0					
ANR	3047283	Argument	8		3047130	1					
ANR	3047284	PrimaryExpression	8		3047130	0					
ANR	3047285	IfStatement	if ( m_iMaxAcceptsPerCycle != 1 )		3047130	9					
ANR	3047286	Condition	m_iMaxAcceptsPerCycle != 1	2707:8:77936:77961	3047130	0	True				
ANR	3047287	EqualityExpression	m_iMaxAcceptsPerCycle != 1		3047130	0		!=			
ANR	3047288	Identifier	m_iMaxAcceptsPerCycle		3047130	0					
ANR	3047289	PrimaryExpression	1		3047130	1					
ANR	3047290	CompoundStatement		44:37:1464:1464	3047130	1					
ANR	3047291	ExpressionStatement	"dprintf ( D_ALWAYS , ""Setting maximum accepts per cycle %d.\\n"" , m_iMaxAcceptsPerCycle )"	2708:8:77975:78057	3047130	0	True				
ANR	3047292	CallExpression	"dprintf ( D_ALWAYS , ""Setting maximum accepts per cycle %d.\\n"" , m_iMaxAcceptsPerCycle )"		3047130	0					
ANR	3047293	Callee	dprintf		3047130	0					
ANR	3047294	Identifier	dprintf		3047130	0					
ANR	3047295	ArgumentList	D_ALWAYS		3047130	1					
ANR	3047296	Argument	D_ALWAYS		3047130	0					
ANR	3047297	Identifier	D_ALWAYS		3047130	0					
ANR	3047298	Argument	"""Setting maximum accepts per cycle %d.\\n"""		3047130	1					
ANR	3047299	PrimaryExpression	"""Setting maximum accepts per cycle %d.\\n"""		3047130	0					
ANR	3047300	Argument	m_iMaxAcceptsPerCycle		3047130	2					
ANR	3047301	Identifier	m_iMaxAcceptsPerCycle		3047130	0					
ANR	3047302	ExpressionStatement	initCollectorList ( )	2712:1:78122:78141	3047130	10	True				
ANR	3047303	CallExpression	initCollectorList ( )		3047130	0					
ANR	3047304	Callee	initCollectorList		3047130	0					
ANR	3047305	Identifier	initCollectorList		3047130	0					
ANR	3047306	ArgumentList			3047130	1					
ANR	3047307	ExpressionStatement	InitSettableAttrsLists ( )	2717:1:78332:78356	3047130	11	True				
ANR	3047308	CallExpression	InitSettableAttrsLists ( )		3047130	0					
ANR	3047309	Callee	InitSettableAttrsLists		3047130	0					
ANR	3047310	Identifier	InitSettableAttrsLists		3047130	0					
ANR	3047311	ArgumentList			3047130	1					
ANR	3047312	IfStatement	"if ( param_boolean ( ""NET_REMAP_ENABLE"" , false , false ) )"		3047130	12					
ANR	3047313	Condition	"param_boolean ( ""NET_REMAP_ENABLE"" , false , false )"	2720:8:78382:78428	3047130	0	True				
ANR	3047314	CallExpression	"param_boolean ( ""NET_REMAP_ENABLE"" , false , false )"		3047130	0					
ANR	3047315	Callee	param_boolean		3047130	0					
ANR	3047316	Identifier	param_boolean		3047130	0					
ANR	3047317	ArgumentList	"""NET_REMAP_ENABLE"""		3047130	1					
ANR	3047318	Argument	"""NET_REMAP_ENABLE"""		3047130	0					
ANR	3047319	PrimaryExpression	"""NET_REMAP_ENABLE"""		3047130	0					
ANR	3047320	Argument	false		3047130	1					
ANR	3047321	Identifier	false		3047130	0					
ANR	3047322	Argument	false		3047130	2					
ANR	3047323	Identifier	false		3047130	0					
ANR	3047324	CompoundStatement		57:57:1930:1930	3047130	1					
ANR	3047325	ExpressionStatement	m_use_clone_to_create_processes = false	2721:2:78435:78474	3047130	0	True				
ANR	3047326	AssignmentExpression	m_use_clone_to_create_processes = false		3047130	0		=			
ANR	3047327	Identifier	m_use_clone_to_create_processes		3047130	0					
ANR	3047328	Identifier	false		3047130	1					
ANR	3047329	ExpressionStatement	"dprintf ( D_CONFIG , ""NET_REMAP_ENABLE is TRUE, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"" )"	2722:2:78478:78574	3047130	1	True				
ANR	3047330	CallExpression	"dprintf ( D_CONFIG , ""NET_REMAP_ENABLE is TRUE, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"" )"		3047130	0					
ANR	3047331	Callee	dprintf		3047130	0					
ANR	3047332	Identifier	dprintf		3047130	0					
ANR	3047333	ArgumentList	D_CONFIG		3047130	1					
ANR	3047334	Argument	D_CONFIG		3047130	0					
ANR	3047335	Identifier	D_CONFIG		3047130	0					
ANR	3047336	Argument	"""NET_REMAP_ENABLE is TRUE, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"""		3047130	1					
ANR	3047337	PrimaryExpression	"""NET_REMAP_ENABLE is TRUE, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"""		3047130	0					
ANR	3047338	ElseStatement	else		3047130	0					
ANR	3047339	CompoundStatement		61:6:2084:2084	3047130	0					
ANR	3047340	ExpressionStatement	"m_use_clone_to_create_processes = param_boolean ( ""USE_CLONE_TO_CREATE_PROCESSES"" , true )"	2725:2:78589:78675	3047130	0	True				
ANR	3047341	AssignmentExpression	"m_use_clone_to_create_processes = param_boolean ( ""USE_CLONE_TO_CREATE_PROCESSES"" , true )"		3047130	0		=			
ANR	3047342	Identifier	m_use_clone_to_create_processes		3047130	0					
ANR	3047343	CallExpression	"param_boolean ( ""USE_CLONE_TO_CREATE_PROCESSES"" , true )"		3047130	1					
ANR	3047344	Callee	param_boolean		3047130	0					
ANR	3047345	Identifier	param_boolean		3047130	0					
ANR	3047346	ArgumentList	"""USE_CLONE_TO_CREATE_PROCESSES"""		3047130	1					
ANR	3047347	Argument	"""USE_CLONE_TO_CREATE_PROCESSES"""		3047130	0					
ANR	3047348	PrimaryExpression	"""USE_CLONE_TO_CREATE_PROCESSES"""		3047130	0					
ANR	3047349	Argument	true		3047130	1					
ANR	3047350	Identifier	true		3047130	0					
ANR	3047351	IfStatement	if ( RUNNING_ON_VALGRIND )		3047130	13					
ANR	3047352	Condition	RUNNING_ON_VALGRIND	2727:5:78685:78703	3047130	0	True				
ANR	3047353	Identifier	RUNNING_ON_VALGRIND		3047130	0					
ANR	3047354	CompoundStatement		64:26:2205:2205	3047130	1					
ANR	3047355	ExpressionStatement	"dprintf ( D_ALWAYS , ""Looks like we are under valgrind, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"" )"	2728:2:78710:78814	3047130	0	True				
ANR	3047356	CallExpression	"dprintf ( D_ALWAYS , ""Looks like we are under valgrind, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"" )"		3047130	0					
ANR	3047357	Callee	dprintf		3047130	0					
ANR	3047358	Identifier	dprintf		3047130	0					
ANR	3047359	ArgumentList	D_ALWAYS		3047130	1					
ANR	3047360	Argument	D_ALWAYS		3047130	0					
ANR	3047361	Identifier	D_ALWAYS		3047130	0					
ANR	3047362	Argument	"""Looks like we are under valgrind, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"""		3047130	1					
ANR	3047363	PrimaryExpression	"""Looks like we are under valgrind, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"""		3047130	0					
ANR	3047364	ExpressionStatement	m_use_clone_to_create_processes = false	2729:2:78818:78857	3047130	1	True				
ANR	3047365	AssignmentExpression	m_use_clone_to_create_processes = false		3047130	0		=			
ANR	3047366	Identifier	m_use_clone_to_create_processes		3047130	0					
ANR	3047367	Identifier	false		3047130	1					
ANR	3047368	IfStatement	if ( ! ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) ) )		3047130	14					
ANR	3047369	Condition	! ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) )	2735:6:79031:79081	3047130	0	True				
ANR	3047370	UnaryOperationExpression	! ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) )		3047130	0					
ANR	3047371	UnaryOperator	!		3047130	0					
ANR	3047372	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD )		3047130	1					
ANR	3047373	Callee	get_mySubSystem ( ) -> isType		3047130	0					
ANR	3047374	PtrMemberAccess	get_mySubSystem ( ) -> isType		3047130	0					
ANR	3047375	CallExpression	get_mySubSystem ( )		3047130	0					
ANR	3047376	Callee	get_mySubSystem		3047130	0					
ANR	3047377	Identifier	get_mySubSystem		3047130	0					
ANR	3047378	ArgumentList			3047130	1					
ANR	3047379	Identifier	isType		3047130	1					
ANR	3047380	ArgumentList	SUBSYSTEM_TYPE_SCHEDD		3047130	1					
ANR	3047381	Argument	SUBSYSTEM_TYPE_SCHEDD		3047130	0					
ANR	3047382	Identifier	SUBSYSTEM_TYPE_SCHEDD		3047130	0					
ANR	3047383	CompoundStatement		72:60:2584:2584	3047130	1					
ANR	3047384	ExpressionStatement	m_use_clone_to_create_processes = false	2736:2:79089:79128	3047130	0	True				
ANR	3047385	AssignmentExpression	m_use_clone_to_create_processes = false		3047130	0		=			
ANR	3047386	Identifier	m_use_clone_to_create_processes		3047130	0					
ANR	3047387	Identifier	false		3047130	1					
ANR	3047388	ExpressionStatement	"m_invalidate_sessions_via_tcp = param_boolean ( ""SEC_INVALIDATE_SESSIONS_VIA_TCP"" , true )"	2740:1:79159:79245	3047130	15	True				
ANR	3047389	AssignmentExpression	"m_invalidate_sessions_via_tcp = param_boolean ( ""SEC_INVALIDATE_SESSIONS_VIA_TCP"" , true )"		3047130	0		=			
ANR	3047390	Identifier	m_invalidate_sessions_via_tcp		3047130	0					
ANR	3047391	CallExpression	"param_boolean ( ""SEC_INVALIDATE_SESSIONS_VIA_TCP"" , true )"		3047130	1					
ANR	3047392	Callee	param_boolean		3047130	0					
ANR	3047393	Identifier	param_boolean		3047130	0					
ANR	3047394	ArgumentList	"""SEC_INVALIDATE_SESSIONS_VIA_TCP"""		3047130	1					
ANR	3047395	Argument	"""SEC_INVALIDATE_SESSIONS_VIA_TCP"""		3047130	0					
ANR	3047396	PrimaryExpression	"""SEC_INVALIDATE_SESSIONS_VIA_TCP"""		3047130	0					
ANR	3047397	Argument	true		3047130	1					
ANR	3047398	Identifier	true		3047130	0					
ANR	3047399	IfStatement	"if ( param_boolean ( ""ENABLE_SOAP"" , false ) || param_boolean ( ""ENABLE_WEB_SERVER"" , false ) )"		3047130	16					
ANR	3047400	Condition	"param_boolean ( ""ENABLE_SOAP"" , false ) || param_boolean ( ""ENABLE_WEB_SERVER"" , false )"	2743:5:79275:79354	3047130	0	True				
ANR	3047401	OrExpression	"param_boolean ( ""ENABLE_SOAP"" , false ) || param_boolean ( ""ENABLE_WEB_SERVER"" , false )"		3047130	0		||			
ANR	3047402	CallExpression	"param_boolean ( ""ENABLE_SOAP"" , false )"		3047130	0					
ANR	3047403	Callee	param_boolean		3047130	0					
ANR	3047404	Identifier	param_boolean		3047130	0					
ANR	3047405	ArgumentList	"""ENABLE_SOAP"""		3047130	1					
ANR	3047406	Argument	"""ENABLE_SOAP"""		3047130	0					
ANR	3047407	PrimaryExpression	"""ENABLE_SOAP"""		3047130	0					
ANR	3047408	Argument	false		3047130	1					
ANR	3047409	Identifier	false		3047130	0					
ANR	3047410	CallExpression	"param_boolean ( ""ENABLE_WEB_SERVER"" , false )"		3047130	1					
ANR	3047411	Callee	param_boolean		3047130	0					
ANR	3047412	Identifier	param_boolean		3047130	0					
ANR	3047413	ArgumentList	"""ENABLE_WEB_SERVER"""		3047130	1					
ANR	3047414	Argument	"""ENABLE_WEB_SERVER"""		3047130	0					
ANR	3047415	PrimaryExpression	"""ENABLE_WEB_SERVER"""		3047130	0					
ANR	3047416	Argument	false		3047130	1					
ANR	3047417	Identifier	false		3047130	0					
ANR	3047418	CompoundStatement		82:1:2858:2858	3047130	1					
ANR	3047419	IfStatement	if ( soap )		3047130	0					
ANR	3047420	Condition	soap	2747:6:79410:79413	3047130	0	True				
ANR	3047421	Identifier	soap		3047130	0					
ANR	3047422	CompoundStatement		84:13:2916:2916	3047130	1					
ANR	3047423	ExpressionStatement	dc_soap_free ( soap )	2748:3:79422:79440	3047130	0	True				
ANR	3047424	CallExpression	dc_soap_free ( soap )		3047130	0					
ANR	3047425	Callee	dc_soap_free		3047130	0					
ANR	3047426	Identifier	dc_soap_free		3047130	0					
ANR	3047427	ArgumentList	soap		3047130	1					
ANR	3047428	Argument	soap		3047130	0					
ANR	3047429	Identifier	soap		3047130	0					
ANR	3047430	ExpressionStatement	soap = NULL	2749:3:79445:79456	3047130	1	True				
ANR	3047431	AssignmentExpression	soap = NULL		3047130	0		=			
ANR	3047432	Identifier	soap		3047130	0					
ANR	3047433	Identifier	NULL		3047130	1					
ANR	3047434	ExpressionStatement	dc_soap_init ( soap )	2752:2:79465:79483	3047130	1	True				
ANR	3047435	CallExpression	dc_soap_init ( soap )		3047130	0					
ANR	3047436	Callee	dc_soap_init		3047130	0					
ANR	3047437	Identifier	dc_soap_init		3047130	0					
ANR	3047438	ArgumentList	soap		3047130	1					
ANR	3047439	Argument	soap		3047130	0					
ANR	3047440	Identifier	soap		3047130	0					
ANR	3047441	ElseStatement	else		3047130	0					
ANR	3047442	CompoundStatement		92:6:2996:2996	3047130	0					
ANR	3047443	IdentifierDeclStatement	MyString subsys = MyString ( get_mySubSystem ( ) -> getName ( ) ) ;	2763:1:79727:79783	3047130	17	True				
ANR	3047444	IdentifierDecl	subsys = MyString ( get_mySubSystem ( ) -> getName ( ) )		3047130	0					
ANR	3047445	IdentifierDeclType	MyString		3047130	0					
ANR	3047446	Identifier	subsys		3047130	1					
ANR	3047447	AssignmentExpression	subsys = MyString ( get_mySubSystem ( ) -> getName ( ) )		3047130	2		=			
ANR	3047448	Identifier	subsys		3047130	0					
ANR	3047449	CallExpression	MyString ( get_mySubSystem ( ) -> getName ( ) )		3047130	1					
ANR	3047450	Callee	MyString		3047130	0					
ANR	3047451	Identifier	MyString		3047130	0					
ANR	3047452	ArgumentList	get_mySubSystem ( ) -> getName ( )		3047130	1					
ANR	3047453	Argument	get_mySubSystem ( ) -> getName ( )		3047130	0					
ANR	3047454	CallExpression	get_mySubSystem ( ) -> getName ( )		3047130	0					
ANR	3047455	Callee	get_mySubSystem ( ) -> getName		3047130	0					
ANR	3047456	PtrMemberAccess	get_mySubSystem ( ) -> getName		3047130	0					
ANR	3047457	CallExpression	get_mySubSystem ( )		3047130	0					
ANR	3047458	Callee	get_mySubSystem		3047130	0					
ANR	3047459	Identifier	get_mySubSystem		3047130	0					
ANR	3047460	ArgumentList			3047130	1					
ANR	3047461	Identifier	getName		3047130	1					
ANR	3047462	ArgumentList			3047130	1					
ANR	3047463	IdentifierDeclStatement	"bool enable_soap_ssl = param_boolean ( ""ENABLE_SOAP_SSL"" , false ) ;"	2764:1:79786:79848	3047130	18	True				
ANR	3047464	IdentifierDecl	"enable_soap_ssl = param_boolean ( ""ENABLE_SOAP_SSL"" , false )"		3047130	0					
ANR	3047465	IdentifierDeclType	bool		3047130	0					
ANR	3047466	Identifier	enable_soap_ssl		3047130	1					
ANR	3047467	AssignmentExpression	"enable_soap_ssl = param_boolean ( ""ENABLE_SOAP_SSL"" , false )"		3047130	2		=			
ANR	3047468	Identifier	enable_soap_ssl		3047130	0					
ANR	3047469	CallExpression	"param_boolean ( ""ENABLE_SOAP_SSL"" , false )"		3047130	1					
ANR	3047470	Callee	param_boolean		3047130	0					
ANR	3047471	Identifier	param_boolean		3047130	0					
ANR	3047472	ArgumentList	"""ENABLE_SOAP_SSL"""		3047130	1					
ANR	3047473	Argument	"""ENABLE_SOAP_SSL"""		3047130	0					
ANR	3047474	PrimaryExpression	"""ENABLE_SOAP_SSL"""		3047130	0					
ANR	3047475	Argument	false		3047130	1					
ANR	3047476	Identifier	false		3047130	0					
ANR	3047477	IfStatement	if ( enable_soap_ssl )		3047130	19					
ANR	3047478	Condition	enable_soap_ssl	2766:5:79856:79870	3047130	0	True				
ANR	3047479	Identifier	enable_soap_ssl		3047130	0					
ANR	3047480	CompoundStatement		118:2:3879:3887	3047130	1					
ANR	3047481	IfStatement	if ( mapfile )		3047130	0					
ANR	3047482	Condition	mapfile	2767:6:79881:79887	3047130	0	True				
ANR	3047483	Identifier	mapfile		3047130	0					
ANR	3047484	CompoundStatement		104:15:3389:3389	3047130	1					
ANR	3047485	Statement	delete	2768:3:79895:79900	3047130	0	True				
ANR	3047486	ExpressionStatement	mapfile	2768:10:79902:79909	3047130	1	True				
ANR	3047487	Identifier	mapfile		3047130	0					
ANR	3047488	ExpressionStatement	mapfile = NULL	2768:19:79911:79925	3047130	2	True				
ANR	3047489	AssignmentExpression	mapfile = NULL		3047130	0		=			
ANR	3047490	Identifier	mapfile		3047130	0					
ANR	3047491	Identifier	NULL		3047130	1					
ANR	3047492	Statement	mapfile	2770:2:79933:79939	3047130	1	True				
ANR	3047493	Statement	=	2770:10:79941:79941	3047130	2	True				
ANR	3047494	Statement	new	2770:12:79943:79945	3047130	3	True				
ANR	3047495	ExpressionStatement	MapFile	2770:16:79947:79954	3047130	4	True				
ANR	3047496	Identifier	MapFile		3047130	0					
ANR	3047497	IdentifierDeclStatement	char * credential_mapfile ;	2771:2:79958:79983	3047130	5	True				
ANR	3047498	IdentifierDecl	* credential_mapfile		3047130	0					
ANR	3047499	IdentifierDeclType	char *		3047130	0					
ANR	3047500	Identifier	credential_mapfile		3047130	1					
ANR	3047501	IfStatement	"if ( NULL == ( credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" ) ) )"		3047130	6					
ANR	3047502	Condition	"NULL == ( credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" ) )"	2772:6:79991:80049	3047130	0	True				
ANR	3047503	EqualityExpression	"NULL == ( credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" ) )"		3047130	0		==			
ANR	3047504	Identifier	NULL		3047130	0					
ANR	3047505	AssignmentExpression	"credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" )"		3047130	1		=			
ANR	3047506	Identifier	credential_mapfile		3047130	0					
ANR	3047507	CallExpression	"param ( ""CERTIFICATE_MAPFILE"" )"		3047130	1					
ANR	3047508	Callee	param		3047130	0					
ANR	3047509	Identifier	param		3047130	0					
ANR	3047510	ArgumentList	"""CERTIFICATE_MAPFILE"""		3047130	1					
ANR	3047511	Argument	"""CERTIFICATE_MAPFILE"""		3047130	0					
ANR	3047512	PrimaryExpression	"""CERTIFICATE_MAPFILE"""		3047130	0					
ANR	3047513	CompoundStatement		109:67:3551:3551	3047130	1					
ANR	3047514	Statement	EXCEPT	2773:3:80057:80062	3047130	0	True				
ANR	3047515	Statement	(	2773:9:80063:80063	3047130	1	True				
ANR	3047516	Statement	"""DaemonCore: No CERTIFICATE_MAPFILE defined, """	2773:10:80064:80109	3047130	2	True				
ANR	3047517	Statement	"""unable to identify users, required by ENABLE_SOAP_SSL"""	2774:7:80118:80172	3047130	3	True				
ANR	3047518	Statement	)	2774:62:80173:80173	3047130	4	True				
ANR	3047519	ExpressionStatement		2774:63:80174:80174	3047130	5	True				
ANR	3047520	IdentifierDeclStatement	char * user_mapfile ;	2776:2:80182:80201	3047130	7	True				
ANR	3047521	IdentifierDecl	* user_mapfile		3047130	0					
ANR	3047522	IdentifierDeclType	char *		3047130	0					
ANR	3047523	Identifier	user_mapfile		3047130	1					
ANR	3047524	IfStatement	"if ( NULL == ( user_mapfile = param ( ""USER_MAPFILE"" ) ) )"		3047130	8					
ANR	3047525	Condition	"NULL == ( user_mapfile = param ( ""USER_MAPFILE"" ) )"	2777:6:80209:80254	3047130	0	True				
ANR	3047526	EqualityExpression	"NULL == ( user_mapfile = param ( ""USER_MAPFILE"" ) )"		3047130	0		==			
ANR	3047527	Identifier	NULL		3047130	0					
ANR	3047528	AssignmentExpression	"user_mapfile = param ( ""USER_MAPFILE"" )"		3047130	1		=			
ANR	3047529	Identifier	user_mapfile		3047130	0					
ANR	3047530	CallExpression	"param ( ""USER_MAPFILE"" )"		3047130	1					
ANR	3047531	Callee	param		3047130	0					
ANR	3047532	Identifier	param		3047130	0					
ANR	3047533	ArgumentList	"""USER_MAPFILE"""		3047130	1					
ANR	3047534	Argument	"""USER_MAPFILE"""		3047130	0					
ANR	3047535	PrimaryExpression	"""USER_MAPFILE"""		3047130	0					
ANR	3047536	CompoundStatement		114:54:3756:3756	3047130	1					
ANR	3047537	Statement	EXCEPT	2778:3:80262:80267	3047130	0	True				
ANR	3047538	Statement	(	2778:9:80268:80268	3047130	1	True				
ANR	3047539	Statement	"""DaemonCore: No USER_MAPFILE defined, """	2778:10:80269:80307	3047130	2	True				
ANR	3047540	Statement	"""unable to identify users, required by ENABLE_SOAP_SSL"""	2779:7:80316:80370	3047130	3	True				
ANR	3047541	Statement	)	2779:62:80371:80371	3047130	4	True				
ANR	3047542	ExpressionStatement		2779:63:80372:80372	3047130	5	True				
ANR	3047543	IdentifierDeclStatement	int line ;	2781:2:80380:80388	3047130	9	True				
ANR	3047544	IdentifierDecl	line		3047130	0					
ANR	3047545	IdentifierDeclType	int		3047130	0					
ANR	3047546	Identifier	line		3047130	1					
ANR	3047547	IfStatement	if ( 0 != ( line = mapfile -> ParseCanonicalizationFile ( credential_mapfile ) ) )		3047130	10					
ANR	3047548	Condition	0 != ( line = mapfile -> ParseCanonicalizationFile ( credential_mapfile ) )	2782:6:80396:80463	3047130	0	True				
ANR	3047549	EqualityExpression	0 != ( line = mapfile -> ParseCanonicalizationFile ( credential_mapfile ) )		3047130	0		!=			
ANR	3047550	PrimaryExpression	0		3047130	0					
ANR	3047551	AssignmentExpression	line = mapfile -> ParseCanonicalizationFile ( credential_mapfile )		3047130	1		=			
ANR	3047552	Identifier	line		3047130	0					
ANR	3047553	CallExpression	mapfile -> ParseCanonicalizationFile ( credential_mapfile )		3047130	1					
ANR	3047554	Callee	mapfile -> ParseCanonicalizationFile		3047130	0					
ANR	3047555	PtrMemberAccess	mapfile -> ParseCanonicalizationFile		3047130	0					
ANR	3047556	Identifier	mapfile		3047130	0					
ANR	3047557	Identifier	ParseCanonicalizationFile		3047130	1					
ANR	3047558	ArgumentList	credential_mapfile		3047130	1					
ANR	3047559	Argument	credential_mapfile		3047130	0					
ANR	3047560	Identifier	credential_mapfile		3047130	0					
ANR	3047561	CompoundStatement		119:76:3965:3965	3047130	1					
ANR	3047562	ExpressionStatement	"EXCEPT ( ""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"" , line )"	2783:3:80471:80550	3047130	0	True				
ANR	3047563	CallExpression	"EXCEPT ( ""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"" , line )"		3047130	0					
ANR	3047564	Callee	EXCEPT		3047130	0					
ANR	3047565	Identifier	EXCEPT		3047130	0					
ANR	3047566	ArgumentList	"""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"""		3047130	1					
ANR	3047567	Argument	"""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"""		3047130	0					
ANR	3047568	PrimaryExpression	"""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"""		3047130	0					
ANR	3047569	Argument	line		3047130	1					
ANR	3047570	Identifier	line		3047130	0					
ANR	3047571	IfStatement	if ( 0 != ( line = mapfile -> ParseUsermapFile ( user_mapfile ) ) )		3047130	11					
ANR	3047572	Condition	0 != ( line = mapfile -> ParseUsermapFile ( user_mapfile ) )	2786:6:80561:80613	3047130	0	True				
ANR	3047573	EqualityExpression	0 != ( line = mapfile -> ParseUsermapFile ( user_mapfile ) )		3047130	0		!=			
ANR	3047574	PrimaryExpression	0		3047130	0					
ANR	3047575	AssignmentExpression	line = mapfile -> ParseUsermapFile ( user_mapfile )		3047130	1		=			
ANR	3047576	Identifier	line		3047130	0					
ANR	3047577	CallExpression	mapfile -> ParseUsermapFile ( user_mapfile )		3047130	1					
ANR	3047578	Callee	mapfile -> ParseUsermapFile		3047130	0					
ANR	3047579	PtrMemberAccess	mapfile -> ParseUsermapFile		3047130	0					
ANR	3047580	Identifier	mapfile		3047130	0					
ANR	3047581	Identifier	ParseUsermapFile		3047130	1					
ANR	3047582	ArgumentList	user_mapfile		3047130	1					
ANR	3047583	Argument	user_mapfile		3047130	0					
ANR	3047584	Identifier	user_mapfile		3047130	0					
ANR	3047585	CompoundStatement		123:61:4115:4115	3047130	1					
ANR	3047586	ExpressionStatement	"EXCEPT ( ""DaemonCore: Error parsing USER_MAPFILE at line %d"" , line )"	2787:3:80621:80686	3047130	0	True				
ANR	3047587	CallExpression	"EXCEPT ( ""DaemonCore: Error parsing USER_MAPFILE at line %d"" , line )"		3047130	0					
ANR	3047588	Callee	EXCEPT		3047130	0					
ANR	3047589	Identifier	EXCEPT		3047130	0					
ANR	3047590	ArgumentList	"""DaemonCore: Error parsing USER_MAPFILE at line %d"""		3047130	1					
ANR	3047591	Argument	"""DaemonCore: Error parsing USER_MAPFILE at line %d"""		3047130	0					
ANR	3047592	PrimaryExpression	"""DaemonCore: Error parsing USER_MAPFILE at line %d"""		3047130	0					
ANR	3047593	Argument	line		3047130	1					
ANR	3047594	Identifier	line		3047130	0					
ANR	3047595	ExpressionStatement	"m_fake_create_thread = param_boolean ( ""FAKE_CREATE_THREAD"" , true )"	2799:1:80997:81060	3047130	20	True				
ANR	3047596	AssignmentExpression	"m_fake_create_thread = param_boolean ( ""FAKE_CREATE_THREAD"" , true )"		3047130	0		=			
ANR	3047597	Identifier	m_fake_create_thread		3047130	0					
ANR	3047598	CallExpression	"param_boolean ( ""FAKE_CREATE_THREAD"" , true )"		3047130	1					
ANR	3047599	Callee	param_boolean		3047130	0					
ANR	3047600	Identifier	param_boolean		3047130	0					
ANR	3047601	ArgumentList	"""FAKE_CREATE_THREAD"""		3047130	1					
ANR	3047602	Argument	"""FAKE_CREATE_THREAD"""		3047130	0					
ANR	3047603	PrimaryExpression	"""FAKE_CREATE_THREAD"""		3047130	0					
ANR	3047604	Argument	true		3047130	1					
ANR	3047605	Identifier	true		3047130	0					
ANR	3047606	IfStatement	if ( ppid && m_want_send_child_alive )		3047130	21					
ANR	3047607	Condition	ppid && m_want_send_child_alive	2807:6:81312:81342	3047130	0	True				
ANR	3047608	AndExpression	ppid && m_want_send_child_alive		3047130	0		&&			
ANR	3047609	Identifier	ppid		3047130	0					
ANR	3047610	Identifier	m_want_send_child_alive		3047130	1					
ANR	3047611	CompoundStatement		145:2:4849:4861	3047130	1					
ANR	3047612	IdentifierDeclStatement	MyString buf ;	2808:2:81350:81362	3047130	0	True				
ANR	3047613	IdentifierDecl	buf		3047130	0					
ANR	3047614	IdentifierDeclType	MyString		3047130	0					
ANR	3047615	Identifier	buf		3047130	1					
ANR	3047616	ExpressionStatement	"buf . sprintf ( ""%s_NOT_RESPONDING_TIMEOUT"" , get_mySubSystem ( ) -> getName ( ) )"	2809:2:81366:81435	3047130	1	True				
ANR	3047617	CallExpression	"buf . sprintf ( ""%s_NOT_RESPONDING_TIMEOUT"" , get_mySubSystem ( ) -> getName ( ) )"		3047130	0					
ANR	3047618	Callee	buf . sprintf		3047130	0					
ANR	3047619	MemberAccess	buf . sprintf		3047130	0					
ANR	3047620	Identifier	buf		3047130	0					
ANR	3047621	Identifier	sprintf		3047130	1					
ANR	3047622	ArgumentList	"""%s_NOT_RESPONDING_TIMEOUT"""		3047130	1					
ANR	3047623	Argument	"""%s_NOT_RESPONDING_TIMEOUT"""		3047130	0					
ANR	3047624	PrimaryExpression	"""%s_NOT_RESPONDING_TIMEOUT"""		3047130	0					
ANR	3047625	Argument	get_mySubSystem ( ) -> getName ( )		3047130	1					
ANR	3047626	CallExpression	get_mySubSystem ( ) -> getName ( )		3047130	0					
ANR	3047627	Callee	get_mySubSystem ( ) -> getName		3047130	0					
ANR	3047628	PtrMemberAccess	get_mySubSystem ( ) -> getName		3047130	0					
ANR	3047629	CallExpression	get_mySubSystem ( )		3047130	0					
ANR	3047630	Callee	get_mySubSystem		3047130	0					
ANR	3047631	Identifier	get_mySubSystem		3047130	0					
ANR	3047632	ArgumentList			3047130	1					
ANR	3047633	Identifier	getName		3047130	1					
ANR	3047634	ArgumentList			3047130	1					
ANR	3047635	ExpressionStatement	"max_hang_time = param_integer ( buf . Value ( ) , - 1 )"	2810:2:81439:81484	3047130	2	True				
ANR	3047636	AssignmentExpression	"max_hang_time = param_integer ( buf . Value ( ) , - 1 )"		3047130	0		=			
ANR	3047637	Identifier	max_hang_time		3047130	0					
ANR	3047638	CallExpression	"param_integer ( buf . Value ( ) , - 1 )"		3047130	1					
ANR	3047639	Callee	param_integer		3047130	0					
ANR	3047640	Identifier	param_integer		3047130	0					
ANR	3047641	ArgumentList	buf . Value ( )		3047130	1					
ANR	3047642	Argument	buf . Value ( )		3047130	0					
ANR	3047643	CallExpression	buf . Value ( )		3047130	0					
ANR	3047644	Callee	buf . Value		3047130	0					
ANR	3047645	MemberAccess	buf . Value		3047130	0					
ANR	3047646	Identifier	buf		3047130	0					
ANR	3047647	Identifier	Value		3047130	1					
ANR	3047648	ArgumentList			3047130	1					
ANR	3047649	Argument	- 1		3047130	1					
ANR	3047650	UnaryOperationExpression	- 1		3047130	0					
ANR	3047651	UnaryOperator	-		3047130	0					
ANR	3047652	PrimaryExpression	1		3047130	1					
ANR	3047653	IfStatement	if ( max_hang_time == ( unsigned int ) - 1 )		3047130	3					
ANR	3047654	Condition	max_hang_time == ( unsigned int ) - 1	2811:6:81492:81524	3047130	0	True				
ANR	3047655	EqualityExpression	max_hang_time == ( unsigned int ) - 1		3047130	0		==			
ANR	3047656	Identifier	max_hang_time		3047130	0					
ANR	3047657	CastExpression	( unsigned int ) - 1		3047130	1					
ANR	3047658	CastTarget	unsigned int		3047130	0					
ANR	3047659	UnaryOperationExpression	- 1		3047130	1					
ANR	3047660	UnaryOperator	-		3047130	0					
ANR	3047661	PrimaryExpression	1		3047130	1					
ANR	3047662	CompoundStatement		148:42:5027:5027	3047130	1					
ANR	3047663	ExpressionStatement	"max_hang_time = param_integer ( ""NOT_RESPONDING_TIMEOUT"" , 0 )"	2812:3:81533:81590	3047130	0	True				
ANR	3047664	AssignmentExpression	"max_hang_time = param_integer ( ""NOT_RESPONDING_TIMEOUT"" , 0 )"		3047130	0		=			
ANR	3047665	Identifier	max_hang_time		3047130	0					
ANR	3047666	CallExpression	"param_integer ( ""NOT_RESPONDING_TIMEOUT"" , 0 )"		3047130	1					
ANR	3047667	Callee	param_integer		3047130	0					
ANR	3047668	Identifier	param_integer		3047130	0					
ANR	3047669	ArgumentList	"""NOT_RESPONDING_TIMEOUT"""		3047130	1					
ANR	3047670	Argument	"""NOT_RESPONDING_TIMEOUT"""		3047130	0					
ANR	3047671	PrimaryExpression	"""NOT_RESPONDING_TIMEOUT"""		3047130	0					
ANR	3047672	Argument	0		3047130	1					
ANR	3047673	PrimaryExpression	0		3047130	0					
ANR	3047674	IfStatement	if ( ! max_hang_time )		3047130	4					
ANR	3047675	Condition	! max_hang_time	2814:7:81603:81616	3047130	0	True				
ANR	3047676	UnaryOperationExpression	! max_hang_time		3047130	0					
ANR	3047677	UnaryOperator	!		3047130	0					
ANR	3047678	Identifier	max_hang_time		3047130	1					
ANR	3047679	CompoundStatement		151:24:5119:5119	3047130	1					
ANR	3047680	ExpressionStatement	max_hang_time = 60 * 60	2815:3:81625:81648	3047130	0	True				
ANR	3047681	AssignmentExpression	max_hang_time = 60 * 60		3047130	0		=			
ANR	3047682	Identifier	max_hang_time		3047130	0					
ANR	3047683	MultiplicativeExpression	60 * 60		3047130	1		*			
ANR	3047684	PrimaryExpression	60		3047130	0					
ANR	3047685	PrimaryExpression	60		3047130	1					
ANR	3047686	ExpressionStatement	m_child_alive_period = ( max_hang_time / 3 ) - 30	2817:2:81677:81724	3047130	5	True				
ANR	3047687	AssignmentExpression	m_child_alive_period = ( max_hang_time / 3 ) - 30		3047130	0		=			
ANR	3047688	Identifier	m_child_alive_period		3047130	0					
ANR	3047689	AdditiveExpression	( max_hang_time / 3 ) - 30		3047130	1		-			
ANR	3047690	MultiplicativeExpression	max_hang_time / 3		3047130	0		/			
ANR	3047691	Identifier	max_hang_time		3047130	0					
ANR	3047692	PrimaryExpression	3		3047130	1					
ANR	3047693	PrimaryExpression	30		3047130	1					
ANR	3047694	IfStatement	if ( m_child_alive_period < 1 )		3047130	6					
ANR	3047695	Condition	m_child_alive_period < 1	2818:7:81733:81756	3047130	0	True				
ANR	3047696	RelationalExpression	m_child_alive_period < 1		3047130	0		<			
ANR	3047697	Identifier	m_child_alive_period		3047130	0					
ANR	3047698	PrimaryExpression	1		3047130	1					
ANR	3047699	ExpressionStatement	m_child_alive_period = 1	2819:3:81763:81787	3047130	1	True				
ANR	3047700	AssignmentExpression	m_child_alive_period = 1		3047130	0		=			
ANR	3047701	Identifier	m_child_alive_period		3047130	0					
ANR	3047702	PrimaryExpression	1		3047130	1					
ANR	3047703	IfStatement	if ( send_child_alive_timer == - 1 )		3047130	7					
ANR	3047704	Condition	send_child_alive_timer == - 1	2820:7:81796:81823	3047130	0	True				
ANR	3047705	EqualityExpression	send_child_alive_timer == - 1		3047130	0		==			
ANR	3047706	Identifier	send_child_alive_timer		3047130	0					
ANR	3047707	UnaryOperationExpression	- 1		3047130	1					
ANR	3047708	UnaryOperator	-		3047130	0					
ANR	3047709	PrimaryExpression	1		3047130	1					
ANR	3047710	CompoundStatement		157:38:5326:5326	3047130	1					
ANR	3047711	ExpressionStatement	"send_child_alive_timer = Register_Timer ( 0 , ( unsigned ) m_child_alive_period , ( TimerHandlercpp ) & DaemonCore :: SendAliveToParent , ""DaemonCore::SendAliveToParent"" , this )"	2833:3:82373:82551	3047130	0	True				
ANR	3047712	AssignmentExpression	"send_child_alive_timer = Register_Timer ( 0 , ( unsigned ) m_child_alive_period , ( TimerHandlercpp ) & DaemonCore :: SendAliveToParent , ""DaemonCore::SendAliveToParent"" , this )"		3047130	0		=			
ANR	3047713	Identifier	send_child_alive_timer		3047130	0					
ANR	3047714	CallExpression	"Register_Timer ( 0 , ( unsigned ) m_child_alive_period , ( TimerHandlercpp ) & DaemonCore :: SendAliveToParent , ""DaemonCore::SendAliveToParent"" , this )"		3047130	1					
ANR	3047715	Callee	Register_Timer		3047130	0					
ANR	3047716	Identifier	Register_Timer		3047130	0					
ANR	3047717	ArgumentList	0		3047130	1					
ANR	3047718	Argument	0		3047130	0					
ANR	3047719	PrimaryExpression	0		3047130	0					
ANR	3047720	Argument	( unsigned ) m_child_alive_period		3047130	1					
ANR	3047721	CastExpression	( unsigned ) m_child_alive_period		3047130	0					
ANR	3047722	CastTarget	unsigned		3047130	0					
ANR	3047723	Identifier	m_child_alive_period		3047130	1					
ANR	3047724	Argument	( TimerHandlercpp ) & DaemonCore :: SendAliveToParent		3047130	2					
ANR	3047725	CastExpression	( TimerHandlercpp ) & DaemonCore :: SendAliveToParent		3047130	0					
ANR	3047726	CastTarget	TimerHandlercpp		3047130	0					
ANR	3047727	UnaryOperationExpression	& DaemonCore :: SendAliveToParent		3047130	1					
ANR	3047728	UnaryOperator	&		3047130	0					
ANR	3047729	Identifier	DaemonCore :: SendAliveToParent		3047130	1					
ANR	3047730	Argument	"""DaemonCore::SendAliveToParent"""		3047130	3					
ANR	3047731	PrimaryExpression	"""DaemonCore::SendAliveToParent"""		3047130	0					
ANR	3047732	Argument	this		3047130	4					
ANR	3047733	Identifier	this		3047130	0					
ANR	3047734	ElseStatement	else		3047130	0					
ANR	3047735	CompoundStatement		179:9:6247:6247	3047130	0					
ANR	3047736	ExpressionStatement	"Reset_Timer ( send_child_alive_timer , 1 , m_child_alive_period )"	2843:3:82753:82813	3047130	0	True				
ANR	3047737	CallExpression	"Reset_Timer ( send_child_alive_timer , 1 , m_child_alive_period )"		3047130	0					
ANR	3047738	Callee	Reset_Timer		3047130	0					
ANR	3047739	Identifier	Reset_Timer		3047130	0					
ANR	3047740	ArgumentList	send_child_alive_timer		3047130	1					
ANR	3047741	Argument	send_child_alive_timer		3047130	0					
ANR	3047742	Identifier	send_child_alive_timer		3047130	0					
ANR	3047743	Argument	1		3047130	1					
ANR	3047744	PrimaryExpression	1		3047130	0					
ANR	3047745	Argument	m_child_alive_period		3047130	2					
ANR	3047746	Identifier	m_child_alive_period		3047130	0					
ANR	3047747	ExpressionStatement	file_descriptor_safety_limit = 0	2847:1:82824:82856	3047130	22	True				
ANR	3047748	AssignmentExpression	file_descriptor_safety_limit = 0		3047130	0		=			
ANR	3047749	Identifier	file_descriptor_safety_limit		3047130	0					
ANR	3047750	PrimaryExpression	0		3047130	1					
ANR	3047751	ExpressionStatement	InitSharedPort ( )	2849:1:82897:82913	3047130	23	True				
ANR	3047752	CallExpression	InitSharedPort ( )		3047130	0					
ANR	3047753	Callee	InitSharedPort		3047130	0					
ANR	3047754	Identifier	InitSharedPort		3047130	0					
ANR	3047755	ArgumentList			3047130	1					
ANR	3047756	IdentifierDeclStatement	bool never_use_ccb = get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN ) ;	2851:1:82917:83040	3047130	24	True				
ANR	3047757	IdentifierDecl	never_use_ccb = get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		3047130	0					
ANR	3047758	IdentifierDeclType	bool		3047130	0					
ANR	3047759	Identifier	never_use_ccb		3047130	1					
ANR	3047760	AssignmentExpression	never_use_ccb = get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		3047130	2		=			
ANR	3047761	Identifier	never_use_ccb		3047130	0					
ANR	3047762	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		3047130	1		||			
ANR	3047763	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP )		3047130	0					
ANR	3047764	Callee	get_mySubSystem ( ) -> isType		3047130	0					
ANR	3047765	PtrMemberAccess	get_mySubSystem ( ) -> isType		3047130	0					
ANR	3047766	CallExpression	get_mySubSystem ( )		3047130	0					
ANR	3047767	Callee	get_mySubSystem		3047130	0					
ANR	3047768	Identifier	get_mySubSystem		3047130	0					
ANR	3047769	ArgumentList			3047130	1					
ANR	3047770	Identifier	isType		3047130	1					
ANR	3047771	ArgumentList	SUBSYSTEM_TYPE_GAHP		3047130	1					
ANR	3047772	Argument	SUBSYSTEM_TYPE_GAHP		3047130	0					
ANR	3047773	Identifier	SUBSYSTEM_TYPE_GAHP		3047130	0					
ANR	3047774	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		3047130	1					
ANR	3047775	Callee	get_mySubSystem ( ) -> isType		3047130	0					
ANR	3047776	PtrMemberAccess	get_mySubSystem ( ) -> isType		3047130	0					
ANR	3047777	CallExpression	get_mySubSystem ( )		3047130	0					
ANR	3047778	Callee	get_mySubSystem		3047130	0					
ANR	3047779	Identifier	get_mySubSystem		3047130	0					
ANR	3047780	ArgumentList			3047130	1					
ANR	3047781	Identifier	isType		3047130	1					
ANR	3047782	ArgumentList	SUBSYSTEM_TYPE_DAGMAN		3047130	1					
ANR	3047783	Argument	SUBSYSTEM_TYPE_DAGMAN		3047130	0					
ANR	3047784	Identifier	SUBSYSTEM_TYPE_DAGMAN		3047130	0					
ANR	3047785	IfStatement	if ( ! never_use_ccb )		3047130	25					
ANR	3047786	Condition	! never_use_ccb	2855:5:83048:83061	3047130	0	True				
ANR	3047787	UnaryOperationExpression	! never_use_ccb		3047130	0					
ANR	3047788	UnaryOperator	!		3047130	0					
ANR	3047789	Identifier	never_use_ccb		3047130	1					
ANR	3047790	CompoundStatement		207:2:6967:6993	3047130	1					
ANR	3047791	IfStatement	if ( ! m_ccb_listeners )		3047130	0					
ANR	3047792	Condition	! m_ccb_listeners	2856:6:83073:83088	3047130	0	True				
ANR	3047793	UnaryOperationExpression	! m_ccb_listeners		3047130	0					
ANR	3047794	UnaryOperator	!		3047130	0					
ANR	3047795	Identifier	m_ccb_listeners		3047130	1					
ANR	3047796	CompoundStatement		193:25:6591:6591	3047130	1					
ANR	3047797	Statement	m_ccb_listeners	2857:3:83097:83111	3047130	0	True				
ANR	3047798	Statement	=	2857:19:83113:83113	3047130	1	True				
ANR	3047799	Statement	new	2857:21:83115:83117	3047130	2	True				
ANR	3047800	ExpressionStatement	CCBListeners	2857:25:83119:83131	3047130	3	True				
ANR	3047801	Identifier	CCBListeners		3047130	0					
ANR	3047802	IdentifierDeclStatement	"char * ccb_addresses = param ( ""CCB_ADDRESS"" ) ;"	2860:2:83140:83182	3047130	1	True				
ANR	3047803	IdentifierDecl	"* ccb_addresses = param ( ""CCB_ADDRESS"" )"		3047130	0					
ANR	3047804	IdentifierDeclType	char *		3047130	0					
ANR	3047805	Identifier	ccb_addresses		3047130	1					
ANR	3047806	AssignmentExpression	"* ccb_addresses = param ( ""CCB_ADDRESS"" )"		3047130	2		=			
ANR	3047807	Identifier	ccb_addresses		3047130	0					
ANR	3047808	CallExpression	"param ( ""CCB_ADDRESS"" )"		3047130	1					
ANR	3047809	Callee	param		3047130	0					
ANR	3047810	Identifier	param		3047130	0					
ANR	3047811	ArgumentList	"""CCB_ADDRESS"""		3047130	1					
ANR	3047812	Argument	"""CCB_ADDRESS"""		3047130	0					
ANR	3047813	PrimaryExpression	"""CCB_ADDRESS"""		3047130	0					
ANR	3047814	IfStatement	if ( m_shared_port_endpoint )		3047130	2					
ANR	3047815	Condition	m_shared_port_endpoint	2861:6:83190:83211	3047130	0	True				
ANR	3047816	Identifier	m_shared_port_endpoint		3047130	0					
ANR	3047817	CompoundStatement		198:31:6714:6714	3047130	1					
ANR	3047818	ExpressionStatement	free ( ccb_addresses )	2864:3:83341:83362	3047130	0	True				
ANR	3047819	CallExpression	free ( ccb_addresses )		3047130	0					
ANR	3047820	Callee	free		3047130	0					
ANR	3047821	Identifier	free		3047130	0					
ANR	3047822	ArgumentList	ccb_addresses		3047130	1					
ANR	3047823	Argument	ccb_addresses		3047130	0					
ANR	3047824	Identifier	ccb_addresses		3047130	0					
ANR	3047825	ExpressionStatement	ccb_addresses = NULL	2865:3:83367:83387	3047130	1	True				
ANR	3047826	AssignmentExpression	ccb_addresses = NULL		3047130	0		=			
ANR	3047827	Identifier	ccb_addresses		3047130	0					
ANR	3047828	Identifier	NULL		3047130	1					
ANR	3047829	ExpressionStatement	m_ccb_listeners -> Configure ( ccb_addresses )	2867:2:83395:83438	3047130	3	True				
ANR	3047830	CallExpression	m_ccb_listeners -> Configure ( ccb_addresses )		3047130	0					
ANR	3047831	Callee	m_ccb_listeners -> Configure		3047130	0					
ANR	3047832	PtrMemberAccess	m_ccb_listeners -> Configure		3047130	0					
ANR	3047833	Identifier	m_ccb_listeners		3047130	0					
ANR	3047834	Identifier	Configure		3047130	1					
ANR	3047835	ArgumentList	ccb_addresses		3047130	1					
ANR	3047836	Argument	ccb_addresses		3047130	0					
ANR	3047837	Identifier	ccb_addresses		3047130	0					
ANR	3047838	ExpressionStatement	free ( ccb_addresses )	2868:2:83442:83463	3047130	4	True				
ANR	3047839	CallExpression	free ( ccb_addresses )		3047130	0					
ANR	3047840	Callee	free		3047130	0					
ANR	3047841	Identifier	free		3047130	0					
ANR	3047842	ArgumentList	ccb_addresses		3047130	1					
ANR	3047843	Argument	ccb_addresses		3047130	0					
ANR	3047844	Identifier	ccb_addresses		3047130	0					
ANR	3047845	IdentifierDeclStatement	const bool blocking = true ;	2870:2:83468:83494	3047130	5	True				
ANR	3047846	IdentifierDecl	blocking = true		3047130	0					
ANR	3047847	IdentifierDeclType	const bool		3047130	0					
ANR	3047848	Identifier	blocking		3047130	1					
ANR	3047849	AssignmentExpression	blocking = true		3047130	2		=			
ANR	3047850	Identifier	true		3047130	0					
ANR	3047851	Identifier	true		3047130	1					
ANR	3047852	ExpressionStatement	m_ccb_listeners -> RegisterWithCCBServer ( blocking )	2871:2:83498:83546	3047130	6	True				
ANR	3047853	CallExpression	m_ccb_listeners -> RegisterWithCCBServer ( blocking )		3047130	0					
ANR	3047854	Callee	m_ccb_listeners -> RegisterWithCCBServer		3047130	0					
ANR	3047855	PtrMemberAccess	m_ccb_listeners -> RegisterWithCCBServer		3047130	0					
ANR	3047856	Identifier	m_ccb_listeners		3047130	0					
ANR	3047857	Identifier	RegisterWithCCBServer		3047130	1					
ANR	3047858	ArgumentList	blocking		3047130	1					
ANR	3047859	Argument	blocking		3047130	0					
ANR	3047860	Identifier	blocking		3047130	0					
ANR	3047861	ExpressionStatement	CondorThreads :: pool_init ( )	2875:1:83580:83606	3047130	26	True				
ANR	3047862	CallExpression	CondorThreads :: pool_init ( )		3047130	0					
ANR	3047863	Callee	CondorThreads :: pool_init		3047130	0					
ANR	3047864	Identifier	CondorThreads :: pool_init		3047130	0					
ANR	3047865	ArgumentList			3047130	1					
ANR	3047866	ExpressionStatement	"_mark_thread_safe_callback ( CondorThreads :: start_thread_safe_block , CondorThreads :: stop_thread_safe_block )"	2878:1:83701:83816	3047130	27	True				
ANR	3047867	CallExpression	"_mark_thread_safe_callback ( CondorThreads :: start_thread_safe_block , CondorThreads :: stop_thread_safe_block )"		3047130	0					
ANR	3047868	Callee	_mark_thread_safe_callback		3047130	0					
ANR	3047869	Identifier	_mark_thread_safe_callback		3047130	0					
ANR	3047870	ArgumentList	CondorThreads :: start_thread_safe_block		3047130	1					
ANR	3047871	Argument	CondorThreads :: start_thread_safe_block		3047130	0					
ANR	3047872	Identifier	CondorThreads :: start_thread_safe_block		3047130	0					
ANR	3047873	Argument	CondorThreads :: stop_thread_safe_block		3047130	1					
ANR	3047874	Identifier	CondorThreads :: stop_thread_safe_block		3047130	0					
ANR	3047875	ExpressionStatement	CondorThreads :: set_switch_callback ( thread_switch_callback )	2881:1:83883:83943	3047130	28	True				
ANR	3047876	CallExpression	CondorThreads :: set_switch_callback ( thread_switch_callback )		3047130	0					
ANR	3047877	Callee	CondorThreads :: set_switch_callback		3047130	0					
ANR	3047878	Identifier	CondorThreads :: set_switch_callback		3047130	0					
ANR	3047879	ArgumentList	thread_switch_callback		3047130	1					
ANR	3047880	Argument	thread_switch_callback		3047130	0					
ANR	3047881	Identifier	thread_switch_callback		3047130	0					
ANR	3047882	ExpressionStatement	daemonContactInfoChanged ( )	2884:1:84010:84036	3047130	29	True				
ANR	3047883	CallExpression	daemonContactInfoChanged ( )		3047130	0					
ANR	3047884	Callee	daemonContactInfoChanged		3047130	0					
ANR	3047885	Identifier	daemonContactInfoChanged		3047130	0					
ANR	3047886	ArgumentList			3047130	1					
ANR	3047887	ReturnType	void		3047130	1					
ANR	3047888	Identifier	DaemonCore :: reconfig		3047130	2					
ANR	3047889	ParameterList			3047130	3					
ANR	3047890	CFGEntryNode	ENTRY		3047130		True				
ANR	3047891	CFGExitNode	EXIT		3047130		True				
ANR	3047892	Symbol	RUNNING_ON_VALGRIND		3047130						
ANR	3047893	Symbol	mapfile -> ParseCanonicalizationFile		3047130						
ANR	3047894	Symbol	D_CONFIG		3047130						
ANR	3047895	Symbol	rand		3047130						
ANR	3047896	Symbol	max_hang_time		3047130						
ANR	3047897	Symbol	secman		3047130						
ANR	3047898	Symbol	SUBSYSTEM_TYPE_DAGMAN		3047130						
ANR	3047899	Symbol	never_use_ccb		3047130						
ANR	3047900	Symbol	dns_interval		3047130						
ANR	3047901	Symbol	m_child_alive_period		3047130						
ANR	3047902	Symbol	m_fake_create_thread		3047130						
ANR	3047903	Symbol	enable_soap_ssl		3047130						
ANR	3047904	Symbol	NULL		3047130						
ANR	3047905	Symbol	* mapfile		3047130						
ANR	3047906	Symbol	this		3047130						
ANR	3047907	Symbol	param_boolean		3047130						
ANR	3047908	Symbol	m_refresh_dns_timer		3047130						
ANR	3047909	Symbol	thread_switch_callback		3047130						
ANR	3047910	Symbol	getSecMan		3047130						
ANR	3047911	Symbol	ppid		3047130						
ANR	3047912	Symbol	m_ccb_listeners		3047130						
ANR	3047913	Symbol	user_mapfile		3047130						
ANR	3047914	Symbol	true		3047130						
ANR	3047915	Symbol	& DaemonCore :: SendAliveToParent		3047130						
ANR	3047916	Symbol	param_integer		3047130						
ANR	3047917	Symbol	MyString		3047130						
ANR	3047918	Symbol	get_mySubSystem		3047130						
ANR	3047919	Symbol	m_invalidate_sessions_via_tcp		3047130						
ANR	3047920	Symbol	soap		3047130						
ANR	3047921	Symbol	mapfile		3047130						
ANR	3047922	Symbol	m_want_send_child_alive		3047130						
ANR	3047923	Symbol	line		3047130						
ANR	3047924	Symbol	CondorThreads :: stop_thread_safe_block		3047130						
ANR	3047925	Symbol	m_dirty_sinful		3047130						
ANR	3047926	Symbol	SUBSYSTEM_TYPE_SCHEDD		3047130						
ANR	3047927	Symbol	subsys		3047130						
ANR	3047928	Symbol	param		3047130						
ANR	3047929	Symbol	blocking		3047130						
ANR	3047930	Symbol	daemonCore		3047130						
ANR	3047931	Symbol	buf . Value		3047130						
ANR	3047932	Symbol	& DaemonCore :: refreshDNS		3047130						
ANR	3047933	Symbol	file_descriptor_safety_limit		3047130						
ANR	3047934	Symbol	m_use_clone_to_create_processes		3047130						
ANR	3047935	Symbol	get_mySubSystem ( ) -> isType		3047130						
ANR	3047936	Symbol	Register_Timer		3047130						
ANR	3047937	Symbol	m_iMaxAcceptsPerCycle		3047130						
ANR	3047938	Symbol	get_mySubSystem ( ) -> getName		3047130						
ANR	3047939	Symbol	credential_mapfile		3047130						
ANR	3047940	Symbol	* get_mySubSystem		3047130						
ANR	3047941	Symbol	D_ALWAYS		3047130						
ANR	3047942	Symbol	false		3047130						
ANR	3047943	Symbol	ccb_addresses		3047130						
ANR	3047944	Symbol	mapfile -> ParseUsermapFile		3047130						
ANR	3047945	Symbol	send_child_alive_timer		3047130						
ANR	3047946	Symbol	buf		3047130						
ANR	3047947	Symbol	m_shared_port_endpoint		3047130						
ANR	3047948	Symbol	maxPipeBuffer		3047130						
ANR	3047949	Symbol	dc_stats		3047130						
ANR	3047950	Symbol	CondorThreads :: start_thread_safe_block		3047130						
ANR	3047951	Symbol	SUBSYSTEM_TYPE_GAHP		3047130						
ANR	3047952	Function	DaemonCore :: InitSharedPort	2887:0:84041:85116							
ANR	3047953	FunctionDef	DaemonCore :: InitSharedPort (bool in_init_dc_command_socket)		3047952	0					
ANR	3047954	CompoundStatement		2889:0:84105:85116	3047952	0					
ANR	3047955	IdentifierDeclStatement	MyString why_not ;	2890:1:84108:84124	3047952	0	True				
ANR	3047956	IdentifierDecl	why_not		3047952	0					
ANR	3047957	IdentifierDeclType	MyString		3047952	0					
ANR	3047958	Identifier	why_not		3047952	1					
ANR	3047959	IdentifierDeclStatement	bool already_open = m_shared_port_endpoint != NULL ;	2891:1:84127:84177	3047952	1	True				
ANR	3047960	IdentifierDecl	already_open = m_shared_port_endpoint != NULL		3047952	0					
ANR	3047961	IdentifierDeclType	bool		3047952	0					
ANR	3047962	Identifier	already_open		3047952	1					
ANR	3047963	AssignmentExpression	already_open = m_shared_port_endpoint != NULL		3047952	2		=			
ANR	3047964	Identifier	already_open		3047952	0					
ANR	3047965	EqualityExpression	m_shared_port_endpoint != NULL		3047952	1		!=			
ANR	3047966	Identifier	m_shared_port_endpoint		3047952	0					
ANR	3047967	Identifier	NULL		3047952	1					
ANR	3047968	IfStatement	"if ( SharedPortEndpoint :: UseSharedPort ( & why_not , already_open ) )"		3047952	2					
ANR	3047969	Condition	"SharedPortEndpoint :: UseSharedPort ( & why_not , already_open )"	2893:5:84185:84240	3047952	0	True				
ANR	3047970	CallExpression	"SharedPortEndpoint :: UseSharedPort ( & why_not , already_open )"		3047952	0					
ANR	3047971	Callee	SharedPortEndpoint :: UseSharedPort		3047952	0					
ANR	3047972	Identifier	SharedPortEndpoint :: UseSharedPort		3047952	0					
ANR	3047973	ArgumentList	& why_not		3047952	1					
ANR	3047974	Argument	& why_not		3047952	0					
ANR	3047975	UnaryOperationExpression	& why_not		3047952	0					
ANR	3047976	UnaryOperator	&		3047952	0					
ANR	3047977	Identifier	why_not		3047952	1					
ANR	3047978	Argument	already_open		3047952	1					
ANR	3047979	Identifier	already_open		3047952	0					
ANR	3047980	CompoundStatement		5:64:138:138	3047952	1					
ANR	3047981	IfStatement	if ( ! m_shared_port_endpoint )		3047952	0					
ANR	3047982	Condition	! m_shared_port_endpoint	2894:6:84252:84274	3047952	0	True				
ANR	3047983	UnaryOperationExpression	! m_shared_port_endpoint		3047952	0					
ANR	3047984	UnaryOperator	!		3047952	0					
ANR	3047985	Identifier	m_shared_port_endpoint		3047952	1					
ANR	3047986	CompoundStatement		7:3:177:227	3047952	1					
ANR	3047987	IdentifierDeclStatement	char const * sock_name = m_daemon_sock_name . Value ( ) ;	2895:3:84283:84333	3047952	0	True				
ANR	3047988	IdentifierDecl	* sock_name = m_daemon_sock_name . Value ( )		3047952	0					
ANR	3047989	IdentifierDeclType	char const *		3047952	0					
ANR	3047990	Identifier	sock_name		3047952	1					
ANR	3047991	AssignmentExpression	* sock_name = m_daemon_sock_name . Value ( )		3047952	2		=			
ANR	3047992	Identifier	sock_name		3047952	0					
ANR	3047993	CallExpression	m_daemon_sock_name . Value ( )		3047952	1					
ANR	3047994	Callee	m_daemon_sock_name . Value		3047952	0					
ANR	3047995	MemberAccess	m_daemon_sock_name . Value		3047952	0					
ANR	3047996	Identifier	m_daemon_sock_name		3047952	0					
ANR	3047997	Identifier	Value		3047952	1					
ANR	3047998	ArgumentList			3047952	1					
ANR	3047999	IfStatement	if ( ! * sock_name )		3047952	1					
ANR	3048000	Condition	! * sock_name	2896:7:84342:84352	3047952	0	True				
ANR	3048001	UnaryOperationExpression	! * sock_name		3047952	0					
ANR	3048002	UnaryOperator	!		3047952	0					
ANR	3048003	UnaryOperationExpression	* sock_name		3047952	1					
ANR	3048004	UnaryOperator	*		3047952	0					
ANR	3048005	Identifier	sock_name		3047952	1					
ANR	3048006	ExpressionStatement	sock_name = NULL	2896:21:84356:84372	3047952	1	True				
ANR	3048007	AssignmentExpression	sock_name = NULL		3047952	0		=			
ANR	3048008	Identifier	sock_name		3047952	0					
ANR	3048009	Identifier	NULL		3047952	1					
ANR	3048010	ExpressionStatement	m_shared_port_endpoint = new SharedPortEndpoint ( sock_name )	2897:3:84377:84435	3047952	2	True				
ANR	3048011	AssignmentExpression	m_shared_port_endpoint = new SharedPortEndpoint ( sock_name )		3047952	0		=			
ANR	3048012	Identifier	m_shared_port_endpoint		3047952	0					
ANR	3048013	Identifier	sock_name		3047952	1					
ANR	3048014	ExpressionStatement	m_shared_port_endpoint -> InitAndReconfig ( )	2899:2:84443:84484	3047952	1	True				
ANR	3048015	CallExpression	m_shared_port_endpoint -> InitAndReconfig ( )		3047952	0					
ANR	3048016	Callee	m_shared_port_endpoint -> InitAndReconfig		3047952	0					
ANR	3048017	PtrMemberAccess	m_shared_port_endpoint -> InitAndReconfig		3047952	0					
ANR	3048018	Identifier	m_shared_port_endpoint		3047952	0					
ANR	3048019	Identifier	InitAndReconfig		3047952	1					
ANR	3048020	ArgumentList			3047952	1					
ANR	3048021	IfStatement	if ( ! m_shared_port_endpoint -> StartListener ( ) )		3047952	2					
ANR	3048022	Condition	! m_shared_port_endpoint -> StartListener ( )	2900:6:84492:84531	3047952	0	True				
ANR	3048023	UnaryOperationExpression	! m_shared_port_endpoint -> StartListener ( )		3047952	0					
ANR	3048024	UnaryOperator	!		3047952	0					
ANR	3048025	CallExpression	m_shared_port_endpoint -> StartListener ( )		3047952	1					
ANR	3048026	Callee	m_shared_port_endpoint -> StartListener		3047952	0					
ANR	3048027	PtrMemberAccess	m_shared_port_endpoint -> StartListener		3047952	0					
ANR	3048028	Identifier	m_shared_port_endpoint		3047952	0					
ANR	3048029	Identifier	StartListener		3047952	1					
ANR	3048030	ArgumentList			3047952	1					
ANR	3048031	CompoundStatement		12:49:429:429	3047952	1					
ANR	3048032	ExpressionStatement	"EXCEPT ( ""Failed to start local listener (USE_SHARED_PORT=true)"" )"	2901:3:84540:84603	3047952	0	True				
ANR	3048033	CallExpression	"EXCEPT ( ""Failed to start local listener (USE_SHARED_PORT=true)"" )"		3047952	0					
ANR	3048034	Callee	EXCEPT		3047952	0					
ANR	3048035	Identifier	EXCEPT		3047952	0					
ANR	3048036	ArgumentList	"""Failed to start local listener (USE_SHARED_PORT=true)"""		3047952	1					
ANR	3048037	Argument	"""Failed to start local listener (USE_SHARED_PORT=true)"""		3047952	0					
ANR	3048038	PrimaryExpression	"""Failed to start local listener (USE_SHARED_PORT=true)"""		3047952	0					
ANR	3048039	ElseStatement	else		3047952	0					
ANR	3048040	IfStatement	if ( m_shared_port_endpoint )		3047952	0					
ANR	3048041	Condition	m_shared_port_endpoint	2904:10:84622:84643	3047952	0	True				
ANR	3048042	Identifier	m_shared_port_endpoint		3047952	0					
ANR	3048043	CompoundStatement		16:35:541:541	3047952	1					
ANR	3048044	ExpressionStatement	"dprintf ( D_ALWAYS , ""Turning off shared port endpoint because %s\\n"" , why_not . Value ( ) )"	2905:2:84651:84737	3047952	0	True				
ANR	3048045	CallExpression	"dprintf ( D_ALWAYS , ""Turning off shared port endpoint because %s\\n"" , why_not . Value ( ) )"		3047952	0					
ANR	3048046	Callee	dprintf		3047952	0					
ANR	3048047	Identifier	dprintf		3047952	0					
ANR	3048048	ArgumentList	D_ALWAYS		3047952	1					
ANR	3048049	Argument	D_ALWAYS		3047952	0					
ANR	3048050	Identifier	D_ALWAYS		3047952	0					
ANR	3048051	Argument	"""Turning off shared port endpoint because %s\\n"""		3047952	1					
ANR	3048052	PrimaryExpression	"""Turning off shared port endpoint because %s\\n"""		3047952	0					
ANR	3048053	Argument	why_not . Value ( )		3047952	2					
ANR	3048054	CallExpression	why_not . Value ( )		3047952	0					
ANR	3048055	Callee	why_not . Value		3047952	0					
ANR	3048056	MemberAccess	why_not . Value		3047952	0					
ANR	3048057	Identifier	why_not		3047952	0					
ANR	3048058	Identifier	Value		3047952	1					
ANR	3048059	ArgumentList			3047952	1					
ANR	3048060	Statement	delete	2907:2:84741:84746	3047952	1	True				
ANR	3048061	ExpressionStatement	m_shared_port_endpoint	2907:9:84748:84770	3047952	2	True				
ANR	3048062	Identifier	m_shared_port_endpoint		3047952	0					
ANR	3048063	ExpressionStatement	m_shared_port_endpoint = NULL	2908:2:84774:84803	3047952	3	True				
ANR	3048064	AssignmentExpression	m_shared_port_endpoint = NULL		3047952	0		=			
ANR	3048065	Identifier	m_shared_port_endpoint		3047952	0					
ANR	3048066	Identifier	NULL		3047952	1					
ANR	3048067	IfStatement	if ( ! in_init_dc_command_socket )		3047952	4					
ANR	3048068	Condition	! in_init_dc_command_socket	2912:6:84932:84957	3047952	0	True				
ANR	3048069	UnaryOperationExpression	! in_init_dc_command_socket		3047952	0					
ANR	3048070	UnaryOperator	!		3047952	0					
ANR	3048071	Identifier	in_init_dc_command_socket		3047952	1					
ANR	3048072	CompoundStatement		24:35:855:855	3047952	1					
ANR	3048073	ExpressionStatement	InitDCCommandSocket ( 1 )	2913:3:84966:84988	3047952	0	True				
ANR	3048074	CallExpression	InitDCCommandSocket ( 1 )		3047952	0					
ANR	3048075	Callee	InitDCCommandSocket		3047952	0					
ANR	3048076	Identifier	InitDCCommandSocket		3047952	0					
ANR	3048077	ArgumentList	1		3047952	1					
ANR	3048078	Argument	1		3047952	0					
ANR	3048079	PrimaryExpression	1		3047952	0					
ANR	3048080	ElseStatement	else		3047952	0					
ANR	3048081	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3047952	0					
ANR	3048082	Condition	DebugFlags & D_FULLDEBUG	2916:10:85007:85030	3047952	0	True				
ANR	3048083	BitAndExpression	DebugFlags & D_FULLDEBUG		3047952	0		&			
ANR	3048084	Identifier	DebugFlags		3047952	0					
ANR	3048085	Identifier	D_FULLDEBUG		3047952	1					
ANR	3048086	CompoundStatement		28:37:928:928	3047952	1					
ANR	3048087	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Not using shared port because %s\\n"" , why_not . Value ( ) )"	2917:2:85038:85111	3047952	0	True				
ANR	3048088	CallExpression	"dprintf ( D_FULLDEBUG , ""Not using shared port because %s\\n"" , why_not . Value ( ) )"		3047952	0					
ANR	3048089	Callee	dprintf		3047952	0					
ANR	3048090	Identifier	dprintf		3047952	0					
ANR	3048091	ArgumentList	D_FULLDEBUG		3047952	1					
ANR	3048092	Argument	D_FULLDEBUG		3047952	0					
ANR	3048093	Identifier	D_FULLDEBUG		3047952	0					
ANR	3048094	Argument	"""Not using shared port because %s\\n"""		3047952	1					
ANR	3048095	PrimaryExpression	"""Not using shared port because %s\\n"""		3047952	0					
ANR	3048096	Argument	why_not . Value ( )		3047952	2					
ANR	3048097	CallExpression	why_not . Value ( )		3047952	0					
ANR	3048098	Callee	why_not . Value		3047952	0					
ANR	3048099	MemberAccess	why_not . Value		3047952	0					
ANR	3048100	Identifier	why_not		3047952	0					
ANR	3048101	Identifier	Value		3047952	1					
ANR	3048102	ArgumentList			3047952	1					
ANR	3048103	ReturnType	void		3047952	1					
ANR	3048104	Identifier	DaemonCore :: InitSharedPort		3047952	2					
ANR	3048105	ParameterList	bool in_init_dc_command_socket		3047952	3					
ANR	3048106	Parameter	bool in_init_dc_command_socket	2888:27:84073:84102	3047952	0	True				
ANR	3048107	ParameterType	bool		3047952	0					
ANR	3048108	Identifier	in_init_dc_command_socket		3047952	1					
ANR	3048109	CFGEntryNode	ENTRY		3047952		True				
ANR	3048110	CFGExitNode	EXIT		3047952		True				
ANR	3048111	Symbol	why_not . Value		3047952						
ANR	3048112	Symbol	NULL		3047952						
ANR	3048113	Symbol	& why_not		3047952						
ANR	3048114	Symbol	m_shared_port_endpoint -> StartListener		3047952						
ANR	3048115	Symbol	D_ALWAYS		3047952						
ANR	3048116	Symbol	D_FULLDEBUG		3047952						
ANR	3048117	Symbol	DebugFlags		3047952						
ANR	3048118	Symbol	sock_name		3047952						
ANR	3048119	Symbol	in_init_dc_command_socket		3047952						
ANR	3048120	Symbol	why_not		3047952						
ANR	3048121	Symbol	* sock_name		3047952						
ANR	3048122	Symbol	* m_shared_port_endpoint		3047952						
ANR	3048123	Symbol	m_daemon_sock_name		3047952						
ANR	3048124	Symbol	m_shared_port_endpoint		3047952						
ANR	3048125	Symbol	m_daemon_sock_name . Value		3047952						
ANR	3048126	Symbol	already_open		3047952						
ANR	3048127	Symbol	SharedPortEndpoint :: UseSharedPort		3047952						
ANR	3048128	Function	DaemonCore :: ReloadSharedPortServerAddr	2921:0:85119:85258							
ANR	3048129	FunctionDef	DaemonCore :: ReloadSharedPortServerAddr ()		3048128	0					
ANR	3048130	CompoundStatement		2923:0:85165:85258	3048128	0					
ANR	3048131	IfStatement	if ( m_shared_port_endpoint )		3048128	0					
ANR	3048132	Condition	m_shared_port_endpoint	2924:5:85172:85193	3048128	0	True				
ANR	3048133	Identifier	m_shared_port_endpoint		3048128	0					
ANR	3048134	CompoundStatement		2:30:31:31	3048128	1					
ANR	3048135	ExpressionStatement	m_shared_port_endpoint -> ReloadSharedPortServerAddr ( )	2925:2:85201:85253	3048128	0	True				
ANR	3048136	CallExpression	m_shared_port_endpoint -> ReloadSharedPortServerAddr ( )		3048128	0					
ANR	3048137	Callee	m_shared_port_endpoint -> ReloadSharedPortServerAddr		3048128	0					
ANR	3048138	PtrMemberAccess	m_shared_port_endpoint -> ReloadSharedPortServerAddr		3048128	0					
ANR	3048139	Identifier	m_shared_port_endpoint		3048128	0					
ANR	3048140	Identifier	ReloadSharedPortServerAddr		3048128	1					
ANR	3048141	ArgumentList			3048128	1					
ANR	3048142	ReturnType	void		3048128	1					
ANR	3048143	Identifier	DaemonCore :: ReloadSharedPortServerAddr		3048128	2					
ANR	3048144	ParameterList			3048128	3					
ANR	3048145	CFGEntryNode	ENTRY		3048128		True				
ANR	3048146	CFGExitNode	EXIT		3048128		True				
ANR	3048147	Symbol	m_shared_port_endpoint		3048128						
ANR	3048148	Function	DaemonCore :: Verify	2929:0:85261:86450							
ANR	3048149	FunctionDef	"DaemonCore :: Verify (char const * command_descrip , DCpermission perm , const condor_sockaddr & addr , const char * fqu)"		3048148	0					
ANR	3048150	CompoundStatement		2931:0:85379:86450	3048148	0					
ANR	3048151	IdentifierDeclStatement	MyString deny_reason ;	2932:1:85382:85402	3048148	0	True				
ANR	3048152	IdentifierDecl	deny_reason		3048148	0					
ANR	3048153	IdentifierDeclType	MyString		3048148	0					
ANR	3048154	Identifier	deny_reason		3048148	1					
ANR	3048155	IdentifierDeclStatement	MyString * allow_reason = NULL ;	2933:1:85450:85479	3048148	1	True				
ANR	3048156	IdentifierDecl	* allow_reason = NULL		3048148	0					
ANR	3048157	IdentifierDeclType	MyString *		3048148	0					
ANR	3048158	Identifier	allow_reason		3048148	1					
ANR	3048159	AssignmentExpression	* allow_reason = NULL		3048148	2		=			
ANR	3048160	Identifier	NULL		3048148	0					
ANR	3048161	Identifier	NULL		3048148	1					
ANR	3048162	IdentifierDeclStatement	MyString allow_reason_buf ;	2934:1:85482:85507	3048148	2	True				
ANR	3048163	IdentifierDecl	allow_reason_buf		3048148	0					
ANR	3048164	IdentifierDeclType	MyString		3048148	0					
ANR	3048165	Identifier	allow_reason_buf		3048148	1					
ANR	3048166	IfStatement	if ( ( DebugFlags & D_SECURITY ) )		3048148	3					
ANR	3048167	Condition	DebugFlags & D_SECURITY	2935:5:85514:85538	3048148	0	True				
ANR	3048168	BitAndExpression	DebugFlags & D_SECURITY		3048148	0		&			
ANR	3048169	Identifier	DebugFlags		3048148	0					
ANR	3048170	Identifier	D_SECURITY		3048148	1					
ANR	3048171	CompoundStatement		5:33:162:162	3048148	1					
ANR	3048172	ExpressionStatement	allow_reason = & allow_reason_buf	2937:2:85603:85635	3048148	0	True				
ANR	3048173	AssignmentExpression	allow_reason = & allow_reason_buf		3048148	0		=			
ANR	3048174	Identifier	allow_reason		3048148	0					
ANR	3048175	UnaryOperationExpression	& allow_reason_buf		3048148	1					
ANR	3048176	UnaryOperator	&		3048148	0					
ANR	3048177	Identifier	allow_reason_buf		3048148	1					
ANR	3048178	IdentifierDeclStatement	"int result = getSecMan ( ) -> Verify ( perm , addr , fqu , allow_reason , & deny_reason ) ;"	2940:1:85642:85719	3048148	4	True				
ANR	3048179	IdentifierDecl	"result = getSecMan ( ) -> Verify ( perm , addr , fqu , allow_reason , & deny_reason )"		3048148	0					
ANR	3048180	IdentifierDeclType	int		3048148	0					
ANR	3048181	Identifier	result		3048148	1					
ANR	3048182	AssignmentExpression	"result = getSecMan ( ) -> Verify ( perm , addr , fqu , allow_reason , & deny_reason )"		3048148	2		=			
ANR	3048183	Identifier	result		3048148	0					
ANR	3048184	CallExpression	"getSecMan ( ) -> Verify ( perm , addr , fqu , allow_reason , & deny_reason )"		3048148	1					
ANR	3048185	Callee	getSecMan ( ) -> Verify		3048148	0					
ANR	3048186	PtrMemberAccess	getSecMan ( ) -> Verify		3048148	0					
ANR	3048187	CallExpression	getSecMan ( )		3048148	0					
ANR	3048188	Callee	getSecMan		3048148	0					
ANR	3048189	Identifier	getSecMan		3048148	0					
ANR	3048190	ArgumentList			3048148	1					
ANR	3048191	Identifier	Verify		3048148	1					
ANR	3048192	ArgumentList	perm		3048148	1					
ANR	3048193	Argument	perm		3048148	0					
ANR	3048194	Identifier	perm		3048148	0					
ANR	3048195	Argument	addr		3048148	1					
ANR	3048196	Identifier	addr		3048148	0					
ANR	3048197	Argument	fqu		3048148	2					
ANR	3048198	Identifier	fqu		3048148	0					
ANR	3048199	Argument	allow_reason		3048148	3					
ANR	3048200	Identifier	allow_reason		3048148	0					
ANR	3048201	Argument	& deny_reason		3048148	4					
ANR	3048202	UnaryOperationExpression	& deny_reason		3048148	0					
ANR	3048203	UnaryOperator	&		3048148	0					
ANR	3048204	Identifier	deny_reason		3048148	1					
ANR	3048205	IdentifierDeclStatement	MyString * reason = result ? allow_reason : & deny_reason ;	2942:1:85723:85778	3048148	5	True				
ANR	3048206	IdentifierDecl	* reason = result ? allow_reason : & deny_reason		3048148	0					
ANR	3048207	IdentifierDeclType	MyString *		3048148	0					
ANR	3048208	Identifier	reason		3048148	1					
ANR	3048209	AssignmentExpression	* reason = result ? allow_reason : & deny_reason		3048148	2		=			
ANR	3048210	Identifier	reason		3048148	0					
ANR	3048211	ConditionalExpression	result ? allow_reason : & deny_reason		3048148	1					
ANR	3048212	Condition	result		3048148	0					
ANR	3048213	Identifier	result		3048148	0					
ANR	3048214	Identifier	allow_reason		3048148	1					
ANR	3048215	UnaryOperationExpression	& deny_reason		3048148	2					
ANR	3048216	UnaryOperator	&		3048148	0					
ANR	3048217	Identifier	deny_reason		3048148	1					
ANR	3048218	IdentifierDeclStatement	"char const * result_desc = result ? ""GRANTED"" : ""DENIED"" ;"	2943:1:85781:85836	3048148	6	True				
ANR	3048219	IdentifierDecl	"* result_desc = result ? ""GRANTED"" : ""DENIED"""		3048148	0					
ANR	3048220	IdentifierDeclType	char const *		3048148	0					
ANR	3048221	Identifier	result_desc		3048148	1					
ANR	3048222	AssignmentExpression	"* result_desc = result ? ""GRANTED"" : ""DENIED"""		3048148	2		=			
ANR	3048223	Identifier	result_desc		3048148	0					
ANR	3048224	ConditionalExpression	"result ? ""GRANTED"" : ""DENIED"""		3048148	1					
ANR	3048225	Condition	result		3048148	0					
ANR	3048226	Identifier	result		3048148	0					
ANR	3048227	PrimaryExpression	"""GRANTED"""		3048148	1					
ANR	3048228	PrimaryExpression	"""DENIED"""		3048148	2					
ANR	3048229	IfStatement	if ( reason )		3048148	7					
ANR	3048230	Condition	reason	2945:5:85844:85849	3048148	0	True				
ANR	3048231	Identifier	reason		3048148	0					
ANR	3048232	CompoundStatement		16:2:477:507	3048148	1					
ANR	3048233	IdentifierDeclStatement	char ipstr [ IP_STRING_BUF_SIZE ] ;	2946:2:85857:85887	3048148	0	True				
ANR	3048234	IdentifierDecl	ipstr [ IP_STRING_BUF_SIZE ]		3048148	0					
ANR	3048235	IdentifierDeclType	char [ IP_STRING_BUF_SIZE ]		3048148	0					
ANR	3048236	Identifier	ipstr		3048148	1					
ANR	3048237	Identifier	IP_STRING_BUF_SIZE		3048148	2					
ANR	3048238	ExpressionStatement	"strcpy ( ipstr , ""(unknown)"" )"	2947:2:85891:85917	3048148	1	True				
ANR	3048239	CallExpression	"strcpy ( ipstr , ""(unknown)"" )"		3048148	0					
ANR	3048240	Callee	strcpy		3048148	0					
ANR	3048241	Identifier	strcpy		3048148	0					
ANR	3048242	ArgumentList	ipstr		3048148	1					
ANR	3048243	Argument	ipstr		3048148	0					
ANR	3048244	Identifier	ipstr		3048148	0					
ANR	3048245	Argument	"""(unknown)"""		3048148	1					
ANR	3048246	PrimaryExpression	"""(unknown)"""		3048148	0					
ANR	3048247	ExpressionStatement	"addr . to_ip_string ( ipstr , sizeof ( ipstr ) )"	2948:2:85921:85960	3048148	2	True				
ANR	3048248	CallExpression	"addr . to_ip_string ( ipstr , sizeof ( ipstr ) )"		3048148	0					
ANR	3048249	Callee	addr . to_ip_string		3048148	0					
ANR	3048250	MemberAccess	addr . to_ip_string		3048148	0					
ANR	3048251	Identifier	addr		3048148	0					
ANR	3048252	Identifier	to_ip_string		3048148	1					
ANR	3048253	ArgumentList	ipstr		3048148	1					
ANR	3048254	Argument	ipstr		3048148	0					
ANR	3048255	Identifier	ipstr		3048148	0					
ANR	3048256	Argument	sizeof ( ipstr )		3048148	1					
ANR	3048257	SizeofExpression	sizeof ( ipstr )		3048148	0					
ANR	3048258	Sizeof	sizeof		3048148	0					
ANR	3048259	SizeofOperand	ipstr		3048148	1					
ANR	3048260	Statement	dprintf	2953:2:86130:86136	3048148	3	True				
ANR	3048261	Statement	(	2953:9:86137:86137	3048148	4	True				
ANR	3048262	Statement	D_ALWAYS	2953:11:86139:86146	3048148	5	True				
ANR	3048263	Statement	","	2953:19:86147:86147	3048148	6	True				
ANR	3048264	Statement	"""PERMISSION %s to %s from host %s for %s, """	2954:5:86154:86196	3048148	7	True				
ANR	3048265	Statement	"""access level %s: reason: %s\\n"""	2955:5:86203:86233	3048148	8	True				
ANR	3048266	Statement	","	2955:36:86234:86234	3048148	9	True				
ANR	3048267	Statement	result_desc	2956:5:86241:86251	3048148	10	True				
ANR	3048268	Statement	","	2956:16:86252:86252	3048148	11	True				
ANR	3048269	Statement	(	2957:5:86259:86259	3048148	12	True				
ANR	3048270	Statement	fqu	2957:6:86260:86262	3048148	13	True				
ANR	3048271	Statement	&&	2957:10:86264:86265	3048148	14	True				
ANR	3048272	Statement	*	2957:13:86267:86267	3048148	15	True				
ANR	3048273	Statement	fqu	2957:14:86268:86270	3048148	16	True				
ANR	3048274	Statement	)	2957:17:86271:86271	3048148	17	True				
ANR	3048275	Statement	?	2957:19:86273:86273	3048148	18	True				
ANR	3048276	Label	fqu :	2957:21:86275:86279	3048148	19	True				
ANR	3048277	Identifier	fqu		3048148	0					
ANR	3048278	Statement	"""unauthenticated user"""	2957:27:86281:86302	3048148	20	True				
ANR	3048279	Statement	","	2957:49:86303:86303	3048148	21	True				
ANR	3048280	Statement	ipstr	2958:5:86310:86314	3048148	22	True				
ANR	3048281	Statement	","	2958:10:86315:86315	3048148	23	True				
ANR	3048282	Statement	command_descrip	2959:5:86322:86336	3048148	24	True				
ANR	3048283	Statement	?	2959:21:86338:86338	3048148	25	True				
ANR	3048284	Label	command_descrip :	2959:23:86340:86356	3048148	26	True				
ANR	3048285	Identifier	command_descrip		3048148	0					
ANR	3048286	Statement	"""unspecified operation"""	2959:41:86358:86380	3048148	27	True				
ANR	3048287	Statement	","	2959:64:86381:86381	3048148	28	True				
ANR	3048288	Statement	PermString	2960:5:86388:86397	3048148	29	True				
ANR	3048289	Statement	(	2960:15:86398:86398	3048148	30	True				
ANR	3048290	Statement	perm	2960:16:86399:86402	3048148	31	True				
ANR	3048291	Statement	)	2960:20:86403:86403	3048148	32	True				
ANR	3048292	Statement	","	2960:21:86404:86404	3048148	33	True				
ANR	3048293	Statement	reason	2961:5:86411:86416	3048148	34	True				
ANR	3048294	Statement	->	2961:11:86417:86418	3048148	35	True				
ANR	3048295	Statement	Value	2961:13:86419:86423	3048148	36	True				
ANR	3048296	Statement	(	2961:18:86424:86424	3048148	37	True				
ANR	3048297	Statement	)	2961:19:86425:86425	3048148	38	True				
ANR	3048298	Statement	)	2961:21:86427:86427	3048148	39	True				
ANR	3048299	ExpressionStatement		2961:22:86428:86428	3048148	40	True				
ANR	3048300	ReturnStatement	return result ;	2964:1:86435:86448	3048148	8	True				
ANR	3048301	Identifier	result		3048148	0					
ANR	3048302	ReturnType	int		3048148	1					
ANR	3048303	Identifier	DaemonCore :: Verify		3048148	2					
ANR	3048304	ParameterList	"char const * command_descrip , DCpermission perm , const condor_sockaddr & addr , const char * fqu"		3048148	3					
ANR	3048305	Parameter	char const * command_descrip	2930:19:85284:85310	3048148	0	True				
ANR	3048306	ParameterType	char const *		3048148	0					
ANR	3048307	Identifier	command_descrip		3048148	1					
ANR	3048308	Parameter	DCpermission perm	2930:47:85312:85328	3048148	1	True				
ANR	3048309	ParameterType	DCpermission		3048148	0					
ANR	3048310	Identifier	perm		3048148	1					
ANR	3048311	Parameter	const condor_sockaddr & addr	2930:66:85331:85357	3048148	2	True				
ANR	3048312	ParameterType	const condor_sockaddr &		3048148	0					
ANR	3048313	Identifier	addr		3048148	1					
ANR	3048314	Parameter	const char * fqu	2930:95:85360:85375	3048148	3	True				
ANR	3048315	ParameterType	const char *		3048148	0					
ANR	3048316	Identifier	fqu		3048148	1					
ANR	3048317	CFGEntryNode	ENTRY		3048148		True				
ANR	3048318	CFGExitNode	EXIT		3048148		True				
ANR	3048319	Symbol	getSecMan ( ) -> Verify		3048148						
ANR	3048320	Symbol	reason		3048148						
ANR	3048321	Symbol	NULL		3048148						
ANR	3048322	Symbol	perm		3048148						
ANR	3048323	Symbol	D_SECURITY		3048148						
ANR	3048324	Symbol	result_desc		3048148						
ANR	3048325	Symbol	command_descrip		3048148						
ANR	3048326	Symbol	DebugFlags		3048148						
ANR	3048327	Symbol	fqu		3048148						
ANR	3048328	Symbol	& allow_reason_buf		3048148						
ANR	3048329	Symbol	* getSecMan		3048148						
ANR	3048330	Symbol	deny_reason		3048148						
ANR	3048331	Symbol	allow_reason		3048148						
ANR	3048332	Symbol	allow_reason_buf		3048148						
ANR	3048333	Symbol	getSecMan		3048148						
ANR	3048334	Symbol	result		3048148						
ANR	3048335	Symbol	ipstr		3048148						
ANR	3048336	Symbol	addr		3048148						
ANR	3048337	Symbol	& deny_reason		3048148						
ANR	3048338	Function	DaemonCore :: Wake_up_select	2967:0:86453:87232							
ANR	3048339	FunctionDef	DaemonCore :: Wake_up_select ()		3048338	0					
ANR	3048340	CompoundStatement		2969:0:86487:87232	3048338	0					
ANR	3048341	IfStatement	if ( CondorThreads :: get_tid ( ) <= 1 )		3048338	0					
ANR	3048342	Condition	CondorThreads :: get_tid ( ) <= 1	2976:5:86949:86977	3048338	0	True				
ANR	3048343	RelationalExpression	CondorThreads :: get_tid ( ) <= 1		3048338	0		<=			
ANR	3048344	CallExpression	CondorThreads :: get_tid ( )		3048338	0					
ANR	3048345	Callee	CondorThreads :: get_tid		3048338	0					
ANR	3048346	Identifier	CondorThreads :: get_tid		3048338	0					
ANR	3048347	ArgumentList			3048338	1					
ANR	3048348	PrimaryExpression	1		3048338	1					
ANR	3048349	CompoundStatement		8:36:492:492	3048338	1					
ANR	3048350	IfStatement	if ( GetCurrentThreadId ( ) != dcmainThreadId )		3048338	0					
ANR	3048351	Condition	GetCurrentThreadId ( ) != dcmainThreadId	2978:6:87001:87038	3048338	0	True				
ANR	3048352	EqualityExpression	GetCurrentThreadId ( ) != dcmainThreadId		3048338	0		!=			
ANR	3048353	CallExpression	GetCurrentThreadId ( )		3048338	0					
ANR	3048354	Callee	GetCurrentThreadId		3048338	0					
ANR	3048355	Identifier	GetCurrentThreadId		3048338	0					
ANR	3048356	ArgumentList			3048338	1					
ANR	3048357	Identifier	dcmainThreadId		3048338	1					
ANR	3048358	CompoundStatement		10:46:553:553	3048338	1					
ANR	3048359	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore::Wake_up_select called from an unknown thread. windows tid = %d"" , GetCurrentThreadId ( ) )"	2979:3:87046:87169	3048338	0	True				
ANR	3048360	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore::Wake_up_select called from an unknown thread. windows tid = %d"" , GetCurrentThreadId ( ) )"		3048338	0					
ANR	3048361	Callee	dprintf		3048338	0					
ANR	3048362	Identifier	dprintf		3048338	0					
ANR	3048363	ArgumentList	D_ALWAYS		3048338	1					
ANR	3048364	Argument	D_ALWAYS		3048338	0					
ANR	3048365	Identifier	D_ALWAYS		3048338	0					
ANR	3048366	Argument	"""DaemonCore::Wake_up_select called from an unknown thread. windows tid = %d"""		3048338	1					
ANR	3048367	PrimaryExpression	"""DaemonCore::Wake_up_select called from an unknown thread. windows tid = %d"""		3048338	0					
ANR	3048368	Argument	GetCurrentThreadId ( )		3048338	2					
ANR	3048369	CallExpression	GetCurrentThreadId ( )		3048338	0					
ANR	3048370	Callee	GetCurrentThreadId		3048338	0					
ANR	3048371	Identifier	GetCurrentThreadId		3048338	0					
ANR	3048372	ArgumentList			3048338	1					
ANR	3048373	ReturnStatement	return false ;	2984:2:87185:87197	3048338	1	True				
ANR	3048374	Identifier	false		3048338	0					
ANR	3048375	ReturnStatement	return Do_Wake_up_select ( ) ;	2987:1:87204:87230	3048338	1	True				
ANR	3048376	CallExpression	Do_Wake_up_select ( )		3048338	0					
ANR	3048377	Callee	Do_Wake_up_select		3048338	0					
ANR	3048378	Identifier	Do_Wake_up_select		3048338	0					
ANR	3048379	ArgumentList			3048338	1					
ANR	3048380	ReturnType	bool		3048338	1					
ANR	3048381	Identifier	DaemonCore :: Wake_up_select		3048338	2					
ANR	3048382	ParameterList			3048338	3					
ANR	3048383	CFGEntryNode	ENTRY		3048338		True				
ANR	3048384	CFGExitNode	EXIT		3048338		True				
ANR	3048385	Symbol	CondorThreads :: get_tid		3048338						
ANR	3048386	Symbol	GetCurrentThreadId		3048338						
ANR	3048387	Symbol	D_ALWAYS		3048338						
ANR	3048388	Symbol	false		3048338						
ANR	3048389	Symbol	dcmainThreadId		3048338						
ANR	3048390	Symbol	Do_Wake_up_select		3048338						
ANR	3048391	Function	DaemonCore :: Do_Wake_up_select	2990:0:87235:88202							
ANR	3048392	FunctionDef	DaemonCore :: Do_Wake_up_select ()		3048391	0					
ANR	3048393	CompoundStatement		2992:0:87272:88202	3048391	0					
ANR	3048394	IdentifierDeclStatement	bool fSuccess = true ;	2998:1:87548:87568	3048391	0	True				
ANR	3048395	IdentifierDecl	fSuccess = true		3048391	0					
ANR	3048396	IdentifierDeclType	bool		3048391	0					
ANR	3048397	Identifier	fSuccess		3048391	1					
ANR	3048398	AssignmentExpression	fSuccess = true		3048391	2		=			
ANR	3048399	Identifier	true		3048391	0					
ANR	3048400	Identifier	true		3048391	1					
ANR	3048401	IfStatement	if ( ! async_pipe_signal )		3048391	1					
ANR	3048402	Condition	! async_pipe_signal	2999:6:87620:87638	3048391	0	True				
ANR	3048403	UnaryOperationExpression	! async_pipe_signal		3048391	0					
ANR	3048404	UnaryOperator	!		3048391	0					
ANR	3048405	Identifier	async_pipe_signal		3048391	1					
ANR	3048406	CompoundStatement		8:27:368:368	3048391	1					
ANR	3048407	ExpressionStatement	async_pipe_signal = true	3003:2:87846:87870	3048391	0	True				
ANR	3048408	AssignmentExpression	async_pipe_signal = true		3048391	0		=			
ANR	3048409	Identifier	async_pipe_signal		3048391	0					
ANR	3048410	Identifier	true		3048391	1					
ANR	3048411	IfStatement	if ( GetCurrentThreadId ( ) == dcmainThreadId )		3048391	1					
ANR	3048412	Condition	GetCurrentThreadId ( ) == dcmainThreadId	3005:6:87891:87928	3048391	0	True				
ANR	3048413	EqualityExpression	GetCurrentThreadId ( ) == dcmainThreadId		3048391	0		==			
ANR	3048414	CallExpression	GetCurrentThreadId ( )		3048391	0					
ANR	3048415	Callee	GetCurrentThreadId		3048391	0					
ANR	3048416	Identifier	GetCurrentThreadId		3048391	0					
ANR	3048417	ArgumentList			3048391	1					
ANR	3048418	Identifier	dcmainThreadId		3048391	1					
ANR	3048419	CompoundStatement		14:46:658:658	3048391	1					
ANR	3048420	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore::Do_Wake_up_select called from main thread. this should never happen."" )"	3006:3:87936:88038	3048391	0	True				
ANR	3048421	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore::Do_Wake_up_select called from main thread. this should never happen."" )"		3048391	0					
ANR	3048422	Callee	dprintf		3048391	0					
ANR	3048423	Identifier	dprintf		3048391	0					
ANR	3048424	ArgumentList	D_ALWAYS		3048391	1					
ANR	3048425	Argument	D_ALWAYS		3048391	0					
ANR	3048426	Identifier	D_ALWAYS		3048391	0					
ANR	3048427	Argument	"""DaemonCore::Do_Wake_up_select called from main thread. this should never happen."""		3048391	1					
ANR	3048428	PrimaryExpression	"""DaemonCore::Do_Wake_up_select called from main thread. this should never happen."""		3048391	0					
ANR	3048429	ReturnStatement	return false ;	3007:3:88043:88055	3048391	1	True				
ANR	3048430	Identifier	false		3048391	0					
ANR	3048431	ExpressionStatement	"fSuccess = send ( async_pipe [ 1 ] . get_socket ( ) , ""!"" , 1 , 0 ) > 0"	3009:2:88063:88121	3048391	2	True				
ANR	3048432	AssignmentExpression	"fSuccess = send ( async_pipe [ 1 ] . get_socket ( ) , ""!"" , 1 , 0 ) > 0"		3048391	0		=			
ANR	3048433	Identifier	fSuccess		3048391	0					
ANR	3048434	RelationalExpression	"send ( async_pipe [ 1 ] . get_socket ( ) , ""!"" , 1 , 0 ) > 0"		3048391	1		>			
ANR	3048435	CallExpression	"send ( async_pipe [ 1 ] . get_socket ( ) , ""!"" , 1 , 0 )"		3048391	0					
ANR	3048436	Callee	send		3048391	0					
ANR	3048437	Identifier	send		3048391	0					
ANR	3048438	ArgumentList	async_pipe [ 1 ] . get_socket ( )		3048391	1					
ANR	3048439	Argument	async_pipe [ 1 ] . get_socket ( )		3048391	0					
ANR	3048440	CallExpression	async_pipe [ 1 ] . get_socket ( )		3048391	0					
ANR	3048441	Callee	async_pipe [ 1 ] . get_socket		3048391	0					
ANR	3048442	MemberAccess	async_pipe [ 1 ] . get_socket		3048391	0					
ANR	3048443	ArrayIndexing	async_pipe [ 1 ]		3048391	0					
ANR	3048444	Identifier	async_pipe		3048391	0					
ANR	3048445	PrimaryExpression	1		3048391	1					
ANR	3048446	Identifier	get_socket		3048391	1					
ANR	3048447	ArgumentList			3048391	1					
ANR	3048448	Argument	"""!"""		3048391	1					
ANR	3048449	PrimaryExpression	"""!"""		3048391	0					
ANR	3048450	Argument	1		3048391	2					
ANR	3048451	PrimaryExpression	1		3048391	0					
ANR	3048452	Argument	0		3048391	3					
ANR	3048453	PrimaryExpression	0		3048391	0					
ANR	3048454	PrimaryExpression	0		3048391	1					
ANR	3048455	ReturnStatement	return fSuccess ;	3014:1:88185:88200	3048391	2	True				
ANR	3048456	Identifier	fSuccess		3048391	0					
ANR	3048457	ReturnType	bool		3048391	1					
ANR	3048458	Identifier	DaemonCore :: Do_Wake_up_select		3048391	2					
ANR	3048459	ParameterList			3048391	3					
ANR	3048460	CFGEntryNode	ENTRY		3048391		True				
ANR	3048461	CFGExitNode	EXIT		3048391		True				
ANR	3048462	Symbol	* async_pipe		3048391						
ANR	3048463	Symbol	async_pipe_signal		3048391						
ANR	3048464	Symbol	GetCurrentThreadId		3048391						
ANR	3048465	Symbol	true		3048391						
ANR	3048466	Symbol	fSuccess		3048391						
ANR	3048467	Symbol	D_ALWAYS		3048391						
ANR	3048468	Symbol	false		3048391						
ANR	3048469	Symbol	async_pipe [ 1 ] . get_socket		3048391						
ANR	3048470	Symbol	dcmainThreadId		3048391						
ANR	3048471	Symbol	async_pipe		3048391						
ANR	3048472	Symbol	send		3048391						
ANR	3048473	Function	DaemonCore :: Driver	3019:0:88347:109909							
ANR	3048474	FunctionDef	DaemonCore :: Driver ()		3048473	0					
ANR	3048475	CompoundStatement		3020:0:88373:109909	3048473	0					
ANR	3048476	IdentifierDeclStatement	Selector selector ;	3021:1:88376:88393	3048473	0	True				
ANR	3048477	IdentifierDecl	selector		3048473	0					
ANR	3048478	IdentifierDeclType	Selector		3048473	0					
ANR	3048479	Identifier	selector		3048473	1					
ANR	3048480	IdentifierDeclStatement	int i ;	3022:1:88396:88403	3048473	1	True				
ANR	3048481	IdentifierDecl	i		3048473	0					
ANR	3048482	IdentifierDeclType	int		3048473	0					
ANR	3048483	Identifier	i		3048473	1					
ANR	3048484	IdentifierDeclStatement	int tmpErrno ;	3023:1:88406:88420	3048473	2	True				
ANR	3048485	IdentifierDecl	tmpErrno		3048473	0					
ANR	3048486	IdentifierDeclType	int		3048473	0					
ANR	3048487	Identifier	tmpErrno		3048473	1					
ANR	3048488	IdentifierDeclStatement	time_t timeout ;	3024:1:88423:88438	3048473	3	True				
ANR	3048489	IdentifierDecl	timeout		3048473	0					
ANR	3048490	IdentifierDeclType	time_t		3048473	0					
ANR	3048491	Identifier	timeout		3048473	1					
ANR	3048492	IdentifierDeclStatement	time_t min_deadline ;	3025:1:88441:88460	3048473	4	True				
ANR	3048493	IdentifierDecl	min_deadline		3048473	0					
ANR	3048494	IdentifierDeclType	time_t		3048473	0					
ANR	3048495	Identifier	min_deadline		3048473	1					
ANR	3048496	IdentifierDeclStatement	"sigset_t fullset , emptyset ;"	3028:1:88478:88504	3048473	5	True				
ANR	3048497	IdentifierDecl	fullset		3048473	0					
ANR	3048498	IdentifierDeclType	sigset_t		3048473	0					
ANR	3048499	Identifier	fullset		3048473	1					
ANR	3048500	IdentifierDecl	emptyset		3048473	1					
ANR	3048501	IdentifierDeclType	sigset_t		3048473	0					
ANR	3048502	Identifier	emptyset		3048473	1					
ANR	3048503	ExpressionStatement	sigfillset ( & fullset )	3029:1:88507:88529	3048473	6	True				
ANR	3048504	CallExpression	sigfillset ( & fullset )		3048473	0					
ANR	3048505	Callee	sigfillset		3048473	0					
ANR	3048506	Identifier	sigfillset		3048473	0					
ANR	3048507	ArgumentList	& fullset		3048473	1					
ANR	3048508	Argument	& fullset		3048473	0					
ANR	3048509	UnaryOperationExpression	& fullset		3048473	0					
ANR	3048510	UnaryOperator	&		3048473	0					
ANR	3048511	Identifier	fullset		3048473	1					
ANR	3048512	ExpressionStatement	"sigdelset ( & fullset , SIGSEGV )"	3031:2:88591:88619	3048473	7	True				
ANR	3048513	CallExpression	"sigdelset ( & fullset , SIGSEGV )"		3048473	0					
ANR	3048514	Callee	sigdelset		3048473	0					
ANR	3048515	Identifier	sigdelset		3048473	0					
ANR	3048516	ArgumentList	& fullset		3048473	1					
ANR	3048517	Argument	& fullset		3048473	0					
ANR	3048518	UnaryOperationExpression	& fullset		3048473	0					
ANR	3048519	UnaryOperator	&		3048473	0					
ANR	3048520	Identifier	fullset		3048473	1					
ANR	3048521	Argument	SIGSEGV		3048473	1					
ANR	3048522	Identifier	SIGSEGV		3048473	0					
ANR	3048523	ExpressionStatement	"sigdelset ( & fullset , SIGABRT )"	3032:2:88657:88685	3048473	8	True				
ANR	3048524	CallExpression	"sigdelset ( & fullset , SIGABRT )"		3048473	0					
ANR	3048525	Callee	sigdelset		3048473	0					
ANR	3048526	Identifier	sigdelset		3048473	0					
ANR	3048527	ArgumentList	& fullset		3048473	1					
ANR	3048528	Argument	& fullset		3048473	0					
ANR	3048529	UnaryOperationExpression	& fullset		3048473	0					
ANR	3048530	UnaryOperator	&		3048473	0					
ANR	3048531	Identifier	fullset		3048473	1					
ANR	3048532	Argument	SIGABRT		3048473	1					
ANR	3048533	Identifier	SIGABRT		3048473	0					
ANR	3048534	ExpressionStatement	"sigdelset ( & fullset , SIGILL )"	3033:2:88729:88756	3048473	9	True				
ANR	3048535	CallExpression	"sigdelset ( & fullset , SIGILL )"		3048473	0					
ANR	3048536	Callee	sigdelset		3048473	0					
ANR	3048537	Identifier	sigdelset		3048473	0					
ANR	3048538	ArgumentList	& fullset		3048473	1					
ANR	3048539	Argument	& fullset		3048473	0					
ANR	3048540	UnaryOperationExpression	& fullset		3048473	0					
ANR	3048541	UnaryOperator	&		3048473	0					
ANR	3048542	Identifier	fullset		3048473	1					
ANR	3048543	Argument	SIGILL		3048473	1					
ANR	3048544	Identifier	SIGILL		3048473	0					
ANR	3048545	ExpressionStatement	"sigdelset ( & fullset , SIGBUS )"	3034:2:88795:88822	3048473	10	True				
ANR	3048546	CallExpression	"sigdelset ( & fullset , SIGBUS )"		3048473	0					
ANR	3048547	Callee	sigdelset		3048473	0					
ANR	3048548	Identifier	sigdelset		3048473	0					
ANR	3048549	ArgumentList	& fullset		3048473	1					
ANR	3048550	Argument	& fullset		3048473	0					
ANR	3048551	UnaryOperationExpression	& fullset		3048473	0					
ANR	3048552	UnaryOperator	&		3048473	0					
ANR	3048553	Identifier	fullset		3048473	1					
ANR	3048554	Argument	SIGBUS		3048473	1					
ANR	3048555	Identifier	SIGBUS		3048473	0					
ANR	3048556	ExpressionStatement	"sigdelset ( & fullset , SIGFPE )"	3035:2:88861:88888	3048473	11	True				
ANR	3048557	CallExpression	"sigdelset ( & fullset , SIGFPE )"		3048473	0					
ANR	3048558	Callee	sigdelset		3048473	0					
ANR	3048559	Identifier	sigdelset		3048473	0					
ANR	3048560	ArgumentList	& fullset		3048473	1					
ANR	3048561	Argument	& fullset		3048473	0					
ANR	3048562	UnaryOperationExpression	& fullset		3048473	0					
ANR	3048563	UnaryOperator	&		3048473	0					
ANR	3048564	Identifier	fullset		3048473	1					
ANR	3048565	Argument	SIGFPE		3048473	1					
ANR	3048566	Identifier	SIGFPE		3048473	0					
ANR	3048567	ExpressionStatement	"sigdelset ( & fullset , SIGTRAP )"	3036:2:88927:88955	3048473	12	True				
ANR	3048568	CallExpression	"sigdelset ( & fullset , SIGTRAP )"		3048473	0					
ANR	3048569	Callee	sigdelset		3048473	0					
ANR	3048570	Identifier	sigdelset		3048473	0					
ANR	3048571	ArgumentList	& fullset		3048473	1					
ANR	3048572	Argument	& fullset		3048473	0					
ANR	3048573	UnaryOperationExpression	& fullset		3048473	0					
ANR	3048574	UnaryOperator	&		3048473	0					
ANR	3048575	Identifier	fullset		3048473	1					
ANR	3048576	Argument	SIGTRAP		3048473	1					
ANR	3048577	Identifier	SIGTRAP		3048473	0					
ANR	3048578	ExpressionStatement	"sigdelset ( & fullset , SIGPROF )"	3037:2:88999:89027	3048473	13	True				
ANR	3048579	CallExpression	"sigdelset ( & fullset , SIGPROF )"		3048473	0					
ANR	3048580	Callee	sigdelset		3048473	0					
ANR	3048581	Identifier	sigdelset		3048473	0					
ANR	3048582	ArgumentList	& fullset		3048473	1					
ANR	3048583	Argument	& fullset		3048473	0					
ANR	3048584	UnaryOperationExpression	& fullset		3048473	0					
ANR	3048585	UnaryOperator	&		3048473	0					
ANR	3048586	Identifier	fullset		3048473	1					
ANR	3048587	Argument	SIGPROF		3048473	1					
ANR	3048588	Identifier	SIGPROF		3048473	0					
ANR	3048589	ExpressionStatement	sigemptyset ( & emptyset )	3039:1:89052:89076	3048473	14	True				
ANR	3048590	CallExpression	sigemptyset ( & emptyset )		3048473	0					
ANR	3048591	Callee	sigemptyset		3048473	0					
ANR	3048592	Identifier	sigemptyset		3048473	0					
ANR	3048593	ArgumentList	& emptyset		3048473	1					
ANR	3048594	Argument	& emptyset		3048473	0					
ANR	3048595	UnaryOperationExpression	& emptyset		3048473	0					
ANR	3048596	UnaryOperator	&		3048473	0					
ANR	3048597	Identifier	emptyset		3048473	1					
ANR	3048598	IdentifierDeclStatement	char asyncpipe_buf [ 10 ] ;	3040:1:89079:89101	3048473	15	True				
ANR	3048599	IdentifierDecl	asyncpipe_buf [ 10 ]		3048473	0					
ANR	3048600	IdentifierDeclType	char [ 10 ]		3048473	0					
ANR	3048601	Identifier	asyncpipe_buf		3048473	1					
ANR	3048602	PrimaryExpression	10		3048473	2					
ANR	3048603	IfStatement	"if ( param_boolean ( ""ENABLE_STDOUT_TESTING"" , false ) )"		3048473	16					
ANR	3048604	Condition	"param_boolean ( ""ENABLE_STDOUT_TESTING"" , false )"	3043:6:89117:89163	3048473	0	True				
ANR	3048605	CallExpression	"param_boolean ( ""ENABLE_STDOUT_TESTING"" , false )"		3048473	0					
ANR	3048606	Callee	param_boolean		3048473	0					
ANR	3048607	Identifier	param_boolean		3048473	0					
ANR	3048608	ArgumentList	"""ENABLE_STDOUT_TESTING"""		3048473	1					
ANR	3048609	Argument	"""ENABLE_STDOUT_TESTING"""		3048473	0					
ANR	3048610	PrimaryExpression	"""ENABLE_STDOUT_TESTING"""		3048473	0					
ANR	3048611	Argument	false		3048473	1					
ANR	3048612	Identifier	false		3048473	0					
ANR	3048613	CompoundStatement		25:1:794:794	3048473	1					
ANR	3048614	ExpressionStatement	"dprintf ( D_ALWAYS , ""Testing stdout & stderr\\n"" )"	3045:2:89172:89220	3048473	0	True				
ANR	3048615	CallExpression	"dprintf ( D_ALWAYS , ""Testing stdout & stderr\\n"" )"		3048473	0					
ANR	3048616	Callee	dprintf		3048473	0					
ANR	3048617	Identifier	dprintf		3048473	0					
ANR	3048618	ArgumentList	D_ALWAYS		3048473	1					
ANR	3048619	Argument	D_ALWAYS		3048473	0					
ANR	3048620	Identifier	D_ALWAYS		3048473	0					
ANR	3048621	Argument	"""Testing stdout & stderr\\n"""		3048473	1					
ANR	3048622	PrimaryExpression	"""Testing stdout & stderr\\n"""		3048473	0					
ANR	3048623	CompoundStatement		31:3:945:978	3048473	1					
ANR	3048624	IdentifierDeclStatement	char buf [ 1024 ] ;	3047:3:89229:89243	3048473	0	True				
ANR	3048625	IdentifierDecl	buf [ 1024 ]		3048473	0					
ANR	3048626	IdentifierDeclType	char [ 1024 ]		3048473	0					
ANR	3048627	Identifier	buf		3048473	1					
ANR	3048628	PrimaryExpression	1024		3048473	2					
ANR	3048629	ExpressionStatement	"memset ( buf , 0 , sizeof ( buf ) )"	3048:3:89248:89276	3048473	1	True				
ANR	3048630	CallExpression	"memset ( buf , 0 , sizeof ( buf ) )"		3048473	0					
ANR	3048631	Callee	memset		3048473	0					
ANR	3048632	Identifier	memset		3048473	0					
ANR	3048633	ArgumentList	buf		3048473	1					
ANR	3048634	Argument	buf		3048473	0					
ANR	3048635	Identifier	buf		3048473	0					
ANR	3048636	Argument	0		3048473	1					
ANR	3048637	PrimaryExpression	0		3048473	0					
ANR	3048638	Argument	sizeof ( buf )		3048473	2					
ANR	3048639	SizeofExpression	sizeof ( buf )		3048473	0					
ANR	3048640	Sizeof	sizeof		3048473	0					
ANR	3048641	SizeofOperand	buf		3048473	1					
ANR	3048642	IdentifierDeclStatement	"bool do_out = true , do_err = true ;"	3049:3:89281:89314	3048473	2	True				
ANR	3048643	IdentifierDecl	do_out = true		3048473	0					
ANR	3048644	IdentifierDeclType	bool		3048473	0					
ANR	3048645	Identifier	do_out		3048473	1					
ANR	3048646	AssignmentExpression	do_out = true		3048473	2		=			
ANR	3048647	Identifier	true		3048473	0					
ANR	3048648	Identifier	true		3048473	1					
ANR	3048649	IdentifierDecl	do_err = true		3048473	1					
ANR	3048650	IdentifierDeclType	bool		3048473	0					
ANR	3048651	Identifier	do_err		3048473	1					
ANR	3048652	AssignmentExpression	do_err = true		3048473	2		=			
ANR	3048653	Identifier	true		3048473	0					
ANR	3048654	Identifier	true		3048473	1					
ANR	3048655	IdentifierDeclStatement	"bool do_fd1 = true , do_fd2 = true ;"	3050:3:89319:89352	3048473	3	True				
ANR	3048656	IdentifierDecl	do_fd1 = true		3048473	0					
ANR	3048657	IdentifierDeclType	bool		3048473	0					
ANR	3048658	Identifier	do_fd1		3048473	1					
ANR	3048659	AssignmentExpression	do_fd1 = true		3048473	2		=			
ANR	3048660	Identifier	true		3048473	0					
ANR	3048661	Identifier	true		3048473	1					
ANR	3048662	IdentifierDecl	do_fd2 = true		3048473	1					
ANR	3048663	IdentifierDeclType	bool		3048473	0					
ANR	3048664	Identifier	do_fd2		3048473	1					
ANR	3048665	AssignmentExpression	do_fd2 = true		3048473	2		=			
ANR	3048666	Identifier	true		3048473	0					
ANR	3048667	Identifier	true		3048473	1					
ANR	3048668	ForStatement	for ( i = 0 ; i < 16 * 1024 ; i ++ )		3048473	4					
ANR	3048669	ForInit	i = 0 ;	3051:9:89363:89366	3048473	0	True				
ANR	3048670	AssignmentExpression	i = 0		3048473	0		=			
ANR	3048671	Identifier	i		3048473	0					
ANR	3048672	PrimaryExpression	0		3048473	1					
ANR	3048673	Condition	i < 16 * 1024	3051:15:89369:89377	3048473	1	True				
ANR	3048674	RelationalExpression	i < 16 * 1024		3048473	0		<			
ANR	3048675	Identifier	i		3048473	0					
ANR	3048676	MultiplicativeExpression	16 * 1024		3048473	1		*			
ANR	3048677	PrimaryExpression	16		3048473	0					
ANR	3048678	PrimaryExpression	1024		3048473	1					
ANR	3048679	PostIncDecOperationExpression	i ++	3051:27:89381:89383	3048473	2	True				
ANR	3048680	Identifier	i		3048473	0					
ANR	3048681	IncDec	++		3048473	1					
ANR	3048682	CompoundStatement		33:3:1016:1016	3048473	3					
ANR	3048683	IfStatement	"if ( do_out && fwrite ( buf , sizeof ( buf ) , 1 , stdout ) != 1 )"		3048473	0					
ANR	3048684	Condition	"do_out && fwrite ( buf , sizeof ( buf ) , 1 , stdout ) != 1"	3053:9:89401:89452	3048473	0	True				
ANR	3048685	AndExpression	"do_out && fwrite ( buf , sizeof ( buf ) , 1 , stdout ) != 1"		3048473	0		&&			
ANR	3048686	Identifier	do_out		3048473	0					
ANR	3048687	EqualityExpression	"fwrite ( buf , sizeof ( buf ) , 1 , stdout ) != 1"		3048473	1		!=			
ANR	3048688	CallExpression	"fwrite ( buf , sizeof ( buf ) , 1 , stdout )"		3048473	0					
ANR	3048689	Callee	fwrite		3048473	0					
ANR	3048690	Identifier	fwrite		3048473	0					
ANR	3048691	ArgumentList	buf		3048473	1					
ANR	3048692	Argument	buf		3048473	0					
ANR	3048693	Identifier	buf		3048473	0					
ANR	3048694	Argument	sizeof ( buf )		3048473	1					
ANR	3048695	SizeofExpression	sizeof ( buf )		3048473	0					
ANR	3048696	Sizeof	sizeof		3048473	0					
ANR	3048697	SizeofOperand	buf		3048473	1					
ANR	3048698	Argument	1		3048473	2					
ANR	3048699	PrimaryExpression	1		3048473	0					
ANR	3048700	Argument	stdout		3048473	3					
ANR	3048701	Identifier	stdout		3048473	0					
ANR	3048702	PrimaryExpression	1		3048473	1					
ANR	3048703	CompoundStatement		35:4:1086:1086	3048473	1					
ANR	3048704	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to write to stdout: %s\\n"" , strerror ( errno ) )"	3055:5:89467:89548	3048473	0	True				
ANR	3048705	CallExpression	"dprintf ( D_ALWAYS , ""Failed to write to stdout: %s\\n"" , strerror ( errno ) )"		3048473	0					
ANR	3048706	Callee	dprintf		3048473	0					
ANR	3048707	Identifier	dprintf		3048473	0					
ANR	3048708	ArgumentList	D_ALWAYS		3048473	1					
ANR	3048709	Argument	D_ALWAYS		3048473	0					
ANR	3048710	Identifier	D_ALWAYS		3048473	0					
ANR	3048711	Argument	"""Failed to write to stdout: %s\\n"""		3048473	1					
ANR	3048712	PrimaryExpression	"""Failed to write to stdout: %s\\n"""		3048473	0					
ANR	3048713	Argument	strerror ( errno )		3048473	2					
ANR	3048714	CallExpression	strerror ( errno )		3048473	0					
ANR	3048715	Callee	strerror		3048473	0					
ANR	3048716	Identifier	strerror		3048473	0					
ANR	3048717	ArgumentList	errno		3048473	1					
ANR	3048718	Argument	errno		3048473	0					
ANR	3048719	Identifier	errno		3048473	0					
ANR	3048720	ExpressionStatement	do_out = false	3057:5:89555:89569	3048473	1	True				
ANR	3048721	AssignmentExpression	do_out = false		3048473	0		=			
ANR	3048722	Identifier	do_out		3048473	0					
ANR	3048723	Identifier	false		3048473	1					
ANR	3048724	IfStatement	"if ( do_err && fwrite ( buf , sizeof ( buf ) , 1 , stderr ) != 1 )"		3048473	1					
ANR	3048725	Condition	"do_err && fwrite ( buf , sizeof ( buf ) , 1 , stderr ) != 1"	3059:9:89586:89637	3048473	0	True				
ANR	3048726	AndExpression	"do_err && fwrite ( buf , sizeof ( buf ) , 1 , stderr ) != 1"		3048473	0		&&			
ANR	3048727	Identifier	do_err		3048473	0					
ANR	3048728	EqualityExpression	"fwrite ( buf , sizeof ( buf ) , 1 , stderr ) != 1"		3048473	1		!=			
ANR	3048729	CallExpression	"fwrite ( buf , sizeof ( buf ) , 1 , stderr )"		3048473	0					
ANR	3048730	Callee	fwrite		3048473	0					
ANR	3048731	Identifier	fwrite		3048473	0					
ANR	3048732	ArgumentList	buf		3048473	1					
ANR	3048733	Argument	buf		3048473	0					
ANR	3048734	Identifier	buf		3048473	0					
ANR	3048735	Argument	sizeof ( buf )		3048473	1					
ANR	3048736	SizeofExpression	sizeof ( buf )		3048473	0					
ANR	3048737	Sizeof	sizeof		3048473	0					
ANR	3048738	SizeofOperand	buf		3048473	1					
ANR	3048739	Argument	1		3048473	2					
ANR	3048740	PrimaryExpression	1		3048473	0					
ANR	3048741	Argument	stderr		3048473	3					
ANR	3048742	Identifier	stderr		3048473	0					
ANR	3048743	PrimaryExpression	1		3048473	1					
ANR	3048744	CompoundStatement		41:4:1271:1271	3048473	1					
ANR	3048745	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to write to stderr: %s\\n"" , strerror ( errno ) )"	3061:5:89652:89733	3048473	0	True				
ANR	3048746	CallExpression	"dprintf ( D_ALWAYS , ""Failed to write to stderr: %s\\n"" , strerror ( errno ) )"		3048473	0					
ANR	3048747	Callee	dprintf		3048473	0					
ANR	3048748	Identifier	dprintf		3048473	0					
ANR	3048749	ArgumentList	D_ALWAYS		3048473	1					
ANR	3048750	Argument	D_ALWAYS		3048473	0					
ANR	3048751	Identifier	D_ALWAYS		3048473	0					
ANR	3048752	Argument	"""Failed to write to stderr: %s\\n"""		3048473	1					
ANR	3048753	PrimaryExpression	"""Failed to write to stderr: %s\\n"""		3048473	0					
ANR	3048754	Argument	strerror ( errno )		3048473	2					
ANR	3048755	CallExpression	strerror ( errno )		3048473	0					
ANR	3048756	Callee	strerror		3048473	0					
ANR	3048757	Identifier	strerror		3048473	0					
ANR	3048758	ArgumentList	errno		3048473	1					
ANR	3048759	Argument	errno		3048473	0					
ANR	3048760	Identifier	errno		3048473	0					
ANR	3048761	ExpressionStatement	do_err = false	3063:5:89740:89754	3048473	1	True				
ANR	3048762	AssignmentExpression	do_err = false		3048473	0		=			
ANR	3048763	Identifier	do_err		3048473	0					
ANR	3048764	Identifier	false		3048473	1					
ANR	3048765	IfStatement	"if ( do_fd1 && write ( 1 , buf , sizeof ( buf ) ) != sizeof ( buf ) )"		3048473	2					
ANR	3048766	Condition	"do_fd1 && write ( 1 , buf , sizeof ( buf ) ) != sizeof ( buf )"	3065:9:89771:89823	3048473	0	True				
ANR	3048767	AndExpression	"do_fd1 && write ( 1 , buf , sizeof ( buf ) ) != sizeof ( buf )"		3048473	0		&&			
ANR	3048768	Identifier	do_fd1		3048473	0					
ANR	3048769	EqualityExpression	"write ( 1 , buf , sizeof ( buf ) ) != sizeof ( buf )"		3048473	1		!=			
ANR	3048770	CallExpression	"write ( 1 , buf , sizeof ( buf ) )"		3048473	0					
ANR	3048771	Callee	write		3048473	0					
ANR	3048772	Identifier	write		3048473	0					
ANR	3048773	ArgumentList	1		3048473	1					
ANR	3048774	Argument	1		3048473	0					
ANR	3048775	PrimaryExpression	1		3048473	0					
ANR	3048776	Argument	buf		3048473	1					
ANR	3048777	Identifier	buf		3048473	0					
ANR	3048778	Argument	sizeof ( buf )		3048473	2					
ANR	3048779	SizeofExpression	sizeof ( buf )		3048473	0					
ANR	3048780	Sizeof	sizeof		3048473	0					
ANR	3048781	SizeofOperand	buf		3048473	1					
ANR	3048782	SizeofExpression	sizeof ( buf )		3048473	1					
ANR	3048783	Sizeof	sizeof		3048473	0					
ANR	3048784	SizeofOperand	buf		3048473	1					
ANR	3048785	CompoundStatement		47:4:1457:1457	3048473	1					
ANR	3048786	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to write to fd 1: %s\\n"" , strerror ( errno ) )"	3067:5:89838:89917	3048473	0	True				
ANR	3048787	CallExpression	"dprintf ( D_ALWAYS , ""Failed to write to fd 1: %s\\n"" , strerror ( errno ) )"		3048473	0					
ANR	3048788	Callee	dprintf		3048473	0					
ANR	3048789	Identifier	dprintf		3048473	0					
ANR	3048790	ArgumentList	D_ALWAYS		3048473	1					
ANR	3048791	Argument	D_ALWAYS		3048473	0					
ANR	3048792	Identifier	D_ALWAYS		3048473	0					
ANR	3048793	Argument	"""Failed to write to fd 1: %s\\n"""		3048473	1					
ANR	3048794	PrimaryExpression	"""Failed to write to fd 1: %s\\n"""		3048473	0					
ANR	3048795	Argument	strerror ( errno )		3048473	2					
ANR	3048796	CallExpression	strerror ( errno )		3048473	0					
ANR	3048797	Callee	strerror		3048473	0					
ANR	3048798	Identifier	strerror		3048473	0					
ANR	3048799	ArgumentList	errno		3048473	1					
ANR	3048800	Argument	errno		3048473	0					
ANR	3048801	Identifier	errno		3048473	0					
ANR	3048802	ExpressionStatement	do_fd1 = false	3069:5:89924:89938	3048473	1	True				
ANR	3048803	AssignmentExpression	do_fd1 = false		3048473	0		=			
ANR	3048804	Identifier	do_fd1		3048473	0					
ANR	3048805	Identifier	false		3048473	1					
ANR	3048806	IfStatement	"if ( do_fd2 && write ( 2 , buf , sizeof ( buf ) ) != sizeof ( buf ) )"		3048473	3					
ANR	3048807	Condition	"do_fd2 && write ( 2 , buf , sizeof ( buf ) ) != sizeof ( buf )"	3071:9:89955:90007	3048473	0	True				
ANR	3048808	AndExpression	"do_fd2 && write ( 2 , buf , sizeof ( buf ) ) != sizeof ( buf )"		3048473	0		&&			
ANR	3048809	Identifier	do_fd2		3048473	0					
ANR	3048810	EqualityExpression	"write ( 2 , buf , sizeof ( buf ) ) != sizeof ( buf )"		3048473	1		!=			
ANR	3048811	CallExpression	"write ( 2 , buf , sizeof ( buf ) )"		3048473	0					
ANR	3048812	Callee	write		3048473	0					
ANR	3048813	Identifier	write		3048473	0					
ANR	3048814	ArgumentList	2		3048473	1					
ANR	3048815	Argument	2		3048473	0					
ANR	3048816	PrimaryExpression	2		3048473	0					
ANR	3048817	Argument	buf		3048473	1					
ANR	3048818	Identifier	buf		3048473	0					
ANR	3048819	Argument	sizeof ( buf )		3048473	2					
ANR	3048820	SizeofExpression	sizeof ( buf )		3048473	0					
ANR	3048821	Sizeof	sizeof		3048473	0					
ANR	3048822	SizeofOperand	buf		3048473	1					
ANR	3048823	SizeofExpression	sizeof ( buf )		3048473	1					
ANR	3048824	Sizeof	sizeof		3048473	0					
ANR	3048825	SizeofOperand	buf		3048473	1					
ANR	3048826	CompoundStatement		53:4:1641:1641	3048473	1					
ANR	3048827	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to write to fd 2: %s\\n"" , strerror ( errno ) )"	3073:5:90022:90101	3048473	0	True				
ANR	3048828	CallExpression	"dprintf ( D_ALWAYS , ""Failed to write to fd 2: %s\\n"" , strerror ( errno ) )"		3048473	0					
ANR	3048829	Callee	dprintf		3048473	0					
ANR	3048830	Identifier	dprintf		3048473	0					
ANR	3048831	ArgumentList	D_ALWAYS		3048473	1					
ANR	3048832	Argument	D_ALWAYS		3048473	0					
ANR	3048833	Identifier	D_ALWAYS		3048473	0					
ANR	3048834	Argument	"""Failed to write to fd 2: %s\\n"""		3048473	1					
ANR	3048835	PrimaryExpression	"""Failed to write to fd 2: %s\\n"""		3048473	0					
ANR	3048836	Argument	strerror ( errno )		3048473	2					
ANR	3048837	CallExpression	strerror ( errno )		3048473	0					
ANR	3048838	Callee	strerror		3048473	0					
ANR	3048839	Identifier	strerror		3048473	0					
ANR	3048840	ArgumentList	errno		3048473	1					
ANR	3048841	Argument	errno		3048473	0					
ANR	3048842	Identifier	errno		3048473	0					
ANR	3048843	ExpressionStatement	do_fd2 = false	3075:5:90108:90122	3048473	1	True				
ANR	3048844	AssignmentExpression	do_fd2 = false		3048473	0		=			
ANR	3048845	Identifier	do_fd2		3048473	0					
ANR	3048846	Identifier	false		3048473	1					
ANR	3048847	ExpressionStatement	"dprintf ( D_ALWAYS , ""Done with stdout & stderr tests\\n"" )"	3079:2:90141:90197	3048473	2	True				
ANR	3048848	CallExpression	"dprintf ( D_ALWAYS , ""Done with stdout & stderr tests\\n"" )"		3048473	0					
ANR	3048849	Callee	dprintf		3048473	0					
ANR	3048850	Identifier	dprintf		3048473	0					
ANR	3048851	ArgumentList	D_ALWAYS		3048473	1					
ANR	3048852	Argument	D_ALWAYS		3048473	0					
ANR	3048853	Identifier	D_ALWAYS		3048473	0					
ANR	3048854	Argument	"""Done with stdout & stderr tests\\n"""		3048473	1					
ANR	3048855	PrimaryExpression	"""Done with stdout & stderr tests\\n"""		3048473	0					
ANR	3048856	IdentifierDeclStatement	double runtime = UtcTime :: getTimeDouble ( ) ;	3082:1:90204:90245	3048473	17	True				
ANR	3048857	IdentifierDecl	runtime = UtcTime :: getTimeDouble ( )		3048473	0					
ANR	3048858	IdentifierDeclType	double		3048473	0					
ANR	3048859	Identifier	runtime		3048473	1					
ANR	3048860	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		3048473	2		=			
ANR	3048861	Identifier	runtime		3048473	0					
ANR	3048862	CallExpression	UtcTime :: getTimeDouble ( )		3048473	1					
ANR	3048863	Callee	UtcTime :: getTimeDouble		3048473	0					
ANR	3048864	Identifier	UtcTime :: getTimeDouble		3048473	0					
ANR	3048865	ArgumentList			3048473	1					
ANR	3048866	IdentifierDeclStatement	double group_runtime = runtime ;	3083:1:90248:90278	3048473	18	True				
ANR	3048867	IdentifierDecl	group_runtime = runtime		3048473	0					
ANR	3048868	IdentifierDeclType	double		3048473	0					
ANR	3048869	Identifier	group_runtime		3048473	1					
ANR	3048870	AssignmentExpression	group_runtime = runtime		3048473	2		=			
ANR	3048871	Identifier	runtime		3048473	0					
ANR	3048872	Identifier	runtime		3048473	1					
ANR	3048873	IdentifierDeclStatement	double pump_cycle_begin_time = runtime ;	3084:4:90284:90322	3048473	19	True				
ANR	3048874	IdentifierDecl	pump_cycle_begin_time = runtime		3048473	0					
ANR	3048875	IdentifierDeclType	double		3048473	0					
ANR	3048876	Identifier	pump_cycle_begin_time		3048473	1					
ANR	3048877	AssignmentExpression	pump_cycle_begin_time = runtime		3048473	2		=			
ANR	3048878	Identifier	runtime		3048473	0					
ANR	3048879	Identifier	runtime		3048473	1					
ANR	3048880	ForStatement	for ( ; ; )		3048473	20					
ANR	3048881	CompoundStatement		261:2:9035:9062	3048473	0					
ANR	3048882	ExpressionStatement	sent_signal = FALSE	3090:2:90390:90409	3048473	0	True				
ANR	3048883	AssignmentExpression	sent_signal = FALSE		3048473	0		=			
ANR	3048884	Identifier	sent_signal		3048473	0					
ANR	3048885	Identifier	FALSE		3048473	1					
ANR	3048886	ForStatement	for ( i = 0 ; i < maxSig ; i ++ )		3048473	1					
ANR	3048887	ForInit	i = 0 ;	3091:8:90455:90458	3048473	0	True				
ANR	3048888	AssignmentExpression	i = 0		3048473	0		=			
ANR	3048889	Identifier	i		3048473	0					
ANR	3048890	PrimaryExpression	0		3048473	1					
ANR	3048891	Condition	i < maxSig	3091:12:90459:90466	3048473	1	True				
ANR	3048892	RelationalExpression	i < maxSig		3048473	0		<			
ANR	3048893	Identifier	i		3048473	0					
ANR	3048894	Identifier	maxSig		3048473	1					
ANR	3048895	PostIncDecOperationExpression	i ++	3091:21:90468:90470	3048473	2	True				
ANR	3048896	Identifier	i		3048473	0					
ANR	3048897	IncDec	++		3048473	1					
ANR	3048898	CompoundStatement		72:26:2099:2099	3048473	3					
ANR	3048899	IfStatement	if ( sigTable [ i ] . handler || sigTable [ i ] . handlercpp )		3048473	0					
ANR	3048900	Condition	sigTable [ i ] . handler || sigTable [ i ] . handlercpp	3092:9:90484:90528	3048473	0	True				
ANR	3048901	OrExpression	sigTable [ i ] . handler || sigTable [ i ] . handlercpp		3048473	0		||			
ANR	3048902	MemberAccess	sigTable [ i ] . handler		3048473	0					
ANR	3048903	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048904	Identifier	sigTable		3048473	0					
ANR	3048905	Identifier	i		3048473	1					
ANR	3048906	Identifier	handler		3048473	1					
ANR	3048907	MemberAccess	sigTable [ i ] . handlercpp		3048473	1					
ANR	3048908	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048909	Identifier	sigTable		3048473	0					
ANR	3048910	Identifier	i		3048473	1					
ANR	3048911	Identifier	handlercpp		3048473	1					
ANR	3048912	CompoundStatement		73:57:2158:2158	3048473	1					
ANR	3048913	IfStatement	if ( sigTable [ i ] . is_pending && ! sigTable [ i ] . is_blocked )		3048473	0					
ANR	3048914	Condition	sigTable [ i ] . is_pending && ! sigTable [ i ] . is_blocked	3094:10:90604:90652	3048473	0	True				
ANR	3048915	AndExpression	sigTable [ i ] . is_pending && ! sigTable [ i ] . is_blocked		3048473	0		&&			
ANR	3048916	MemberAccess	sigTable [ i ] . is_pending		3048473	0					
ANR	3048917	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048918	Identifier	sigTable		3048473	0					
ANR	3048919	Identifier	i		3048473	1					
ANR	3048920	Identifier	is_pending		3048473	1					
ANR	3048921	UnaryOperationExpression	! sigTable [ i ] . is_blocked		3048473	1					
ANR	3048922	UnaryOperator	!		3048473	0					
ANR	3048923	MemberAccess	sigTable [ i ] . is_blocked		3048473	1					
ANR	3048924	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048925	Identifier	sigTable		3048473	0					
ANR	3048926	Identifier	i		3048473	1					
ANR	3048927	Identifier	is_blocked		3048473	1					
ANR	3048928	CompoundStatement		75:62:2282:2282	3048473	1					
ANR	3048929	ExpressionStatement	sigTable [ i ] . is_pending = 0	3096:6:90716:90742	3048473	0	True				
ANR	3048930	AssignmentExpression	sigTable [ i ] . is_pending = 0		3048473	0		=			
ANR	3048931	MemberAccess	sigTable [ i ] . is_pending		3048473	0					
ANR	3048932	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048933	Identifier	sigTable		3048473	0					
ANR	3048934	Identifier	i		3048473	1					
ANR	3048935	Identifier	is_pending		3048473	1					
ANR	3048936	PrimaryExpression	0		3048473	1					
ANR	3048937	ExpressionStatement	curr_dataptr = & ( sigTable [ i ] . data_ptr )	3098:6:90796:90834	3048473	1	True				
ANR	3048938	AssignmentExpression	curr_dataptr = & ( sigTable [ i ] . data_ptr )		3048473	0		=			
ANR	3048939	Identifier	curr_dataptr		3048473	0					
ANR	3048940	UnaryOperationExpression	& ( sigTable [ i ] . data_ptr )		3048473	1					
ANR	3048941	UnaryOperator	&		3048473	0					
ANR	3048942	MemberAccess	sigTable [ i ] . data_ptr		3048473	1					
ANR	3048943	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048944	Identifier	sigTable		3048473	0					
ANR	3048945	Identifier	i		3048473	1					
ANR	3048946	Identifier	data_ptr		3048473	1					
ANR	3048947	ExpressionStatement	dc_stats . Signals += 1	3100:24:90905:90926	3048473	2	True				
ANR	3048948	AssignmentExpression	dc_stats . Signals += 1		3048473	0		+=			
ANR	3048949	MemberAccess	dc_stats . Signals		3048473	0					
ANR	3048950	Identifier	dc_stats		3048473	0					
ANR	3048951	Identifier	Signals		3048473	1					
ANR	3048952	PrimaryExpression	1		3048473	1					
ANR	3048953	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Calling Handler <%s> for Signal %d <%s>\\n"" , sigTable [ i ] . handler_descrip , sigTable [ i ] . num , sigTable [ i ] . sig_descrip )"	3103:6:90958:91124	3048473	3	True				
ANR	3048954	CallExpression	"dprintf ( D_DAEMONCORE , ""Calling Handler <%s> for Signal %d <%s>\\n"" , sigTable [ i ] . handler_descrip , sigTable [ i ] . num , sigTable [ i ] . sig_descrip )"		3048473	0					
ANR	3048955	Callee	dprintf		3048473	0					
ANR	3048956	Identifier	dprintf		3048473	0					
ANR	3048957	ArgumentList	D_DAEMONCORE		3048473	1					
ANR	3048958	Argument	D_DAEMONCORE		3048473	0					
ANR	3048959	Identifier	D_DAEMONCORE		3048473	0					
ANR	3048960	Argument	"""Calling Handler <%s> for Signal %d <%s>\\n"""		3048473	1					
ANR	3048961	PrimaryExpression	"""Calling Handler <%s> for Signal %d <%s>\\n"""		3048473	0					
ANR	3048962	Argument	sigTable [ i ] . handler_descrip		3048473	2					
ANR	3048963	MemberAccess	sigTable [ i ] . handler_descrip		3048473	0					
ANR	3048964	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048965	Identifier	sigTable		3048473	0					
ANR	3048966	Identifier	i		3048473	1					
ANR	3048967	Identifier	handler_descrip		3048473	1					
ANR	3048968	Argument	sigTable [ i ] . num		3048473	3					
ANR	3048969	MemberAccess	sigTable [ i ] . num		3048473	0					
ANR	3048970	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048971	Identifier	sigTable		3048473	0					
ANR	3048972	Identifier	i		3048473	1					
ANR	3048973	Identifier	num		3048473	1					
ANR	3048974	Argument	sigTable [ i ] . sig_descrip		3048473	4					
ANR	3048975	MemberAccess	sigTable [ i ] . sig_descrip		3048473	0					
ANR	3048976	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048977	Identifier	sigTable		3048473	0					
ANR	3048978	Identifier	i		3048473	1					
ANR	3048979	Identifier	sig_descrip		3048473	1					
ANR	3048980	IfStatement	if ( sigTable [ i ] . is_cpp )		3048473	4					
ANR	3048981	Condition	sigTable [ i ] . is_cpp	3108:11:91163:91180	3048473	0	True				
ANR	3048982	MemberAccess	sigTable [ i ] . is_cpp		3048473	0					
ANR	3048983	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048984	Identifier	sigTable		3048473	0					
ANR	3048985	Identifier	i		3048473	1					
ANR	3048986	Identifier	is_cpp		3048473	1					
ANR	3048987	Statement	(	3109:7:91191:91191	3048473	1	True				
ANR	3048988	ElseStatement	else		3048473	0					
ANR	3048989	ExpressionStatement	"( * sigTable [ i ] . handler ) ( sigTable [ i ] . service , sigTable [ i ] . num )"	3111:7:91276:91335	3048473	0	True				
ANR	3048990	CallExpression	"( * sigTable [ i ] . handler ) ( sigTable [ i ] . service , sigTable [ i ] . num )"		3048473	0					
ANR	3048991	Callee	* sigTable [ i ] . handler		3048473	0					
ANR	3048992	UnaryOperationExpression	* sigTable [ i ] . handler		3048473	0					
ANR	3048993	UnaryOperator	*		3048473	0					
ANR	3048994	MemberAccess	sigTable [ i ] . handler		3048473	1					
ANR	3048995	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3048996	Identifier	sigTable		3048473	0					
ANR	3048997	Identifier	i		3048473	1					
ANR	3048998	Identifier	handler		3048473	1					
ANR	3048999	ArgumentList	sigTable [ i ] . service		3048473	1					
ANR	3049000	Argument	sigTable [ i ] . service		3048473	0					
ANR	3049001	MemberAccess	sigTable [ i ] . service		3048473	0					
ANR	3049002	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3049003	Identifier	sigTable		3048473	0					
ANR	3049004	Identifier	i		3048473	1					
ANR	3049005	Identifier	service		3048473	1					
ANR	3049006	Argument	sigTable [ i ] . num		3048473	1					
ANR	3049007	MemberAccess	sigTable [ i ] . num		3048473	0					
ANR	3049008	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3049009	Identifier	sigTable		3048473	0					
ANR	3049010	Identifier	i		3048473	1					
ANR	3049011	Identifier	num		3048473	1					
ANR	3049012	Statement	sigTable	3109:8:91192:91199	3048473	5	True				
ANR	3049013	Statement	[	3109:16:91200:91200	3048473	6	True				
ANR	3049014	Statement	i	3109:17:91201:91201	3048473	7	True				
ANR	3049015	Statement	]	3109:18:91202:91202	3048473	8	True				
ANR	3049016	Statement	.	3109:19:91203:91203	3048473	9	True				
ANR	3049017	Statement	service	3109:20:91204:91210	3048473	10	True				
ANR	3049018	Statement	->*	3109:27:91211:91213	3048473	11	True				
ANR	3049019	Statement	(	3109:30:91214:91214	3048473	12	True				
ANR	3049020	Statement	sigTable	3109:31:91215:91222	3048473	13	True				
ANR	3049021	Statement	[	3109:39:91223:91223	3048473	14	True				
ANR	3049022	Statement	i	3109:40:91224:91224	3048473	15	True				
ANR	3049023	Statement	]	3109:41:91225:91225	3048473	16	True				
ANR	3049024	Statement	.	3109:42:91226:91226	3048473	17	True				
ANR	3049025	Statement	handlercpp	3109:43:91227:91236	3048473	18	True				
ANR	3049026	Statement	)	3109:53:91237:91237	3048473	19	True				
ANR	3049027	Statement	)	3109:54:91238:91238	3048473	20	True				
ANR	3049028	ExpressionStatement	sigTable [ i ] . num	3109:55:91239:91256	3048473	21	True				
ANR	3049029	MemberAccess	sigTable [ i ] . num		3048473	0					
ANR	3049030	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3049031	Identifier	sigTable		3048473	0					
ANR	3049032	Identifier	i		3048473	1					
ANR	3049033	Identifier	num		3048473	1					
ANR	3049034	ExpressionStatement	curr_dataptr = NULL	3113:6:91371:91390	3048473	22	True				
ANR	3049035	AssignmentExpression	curr_dataptr = NULL		3048473	0		=			
ANR	3049036	Identifier	curr_dataptr		3048473	0					
ANR	3049037	Identifier	NULL		3048473	1					
ANR	3049038	ExpressionStatement	CheckPrivState ( )	3115:6:91447:91463	3048473	23	True				
ANR	3049039	CallExpression	CheckPrivState ( )		3048473	0					
ANR	3049040	Callee	CheckPrivState		3048473	0					
ANR	3049041	Identifier	CheckPrivState		3048473	0					
ANR	3049042	ArgumentList			3048473	1					
ANR	3049043	ExpressionStatement	"runtime = dc_stats . AddRuntime ( sigTable [ i ] . handler_descrip , runtime )"	3118:24:91563:91630	3048473	24	True				
ANR	3049044	AssignmentExpression	"runtime = dc_stats . AddRuntime ( sigTable [ i ] . handler_descrip , runtime )"		3048473	0		=			
ANR	3049045	Identifier	runtime		3048473	0					
ANR	3049046	CallExpression	"dc_stats . AddRuntime ( sigTable [ i ] . handler_descrip , runtime )"		3048473	1					
ANR	3049047	Callee	dc_stats . AddRuntime		3048473	0					
ANR	3049048	MemberAccess	dc_stats . AddRuntime		3048473	0					
ANR	3049049	Identifier	dc_stats		3048473	0					
ANR	3049050	Identifier	AddRuntime		3048473	1					
ANR	3049051	ArgumentList	sigTable [ i ] . handler_descrip		3048473	1					
ANR	3049052	Argument	sigTable [ i ] . handler_descrip		3048473	0					
ANR	3049053	MemberAccess	sigTable [ i ] . handler_descrip		3048473	0					
ANR	3049054	ArrayIndexing	sigTable [ i ]		3048473	0					
ANR	3049055	Identifier	sigTable		3048473	0					
ANR	3049056	Identifier	i		3048473	1					
ANR	3049057	Identifier	handler_descrip		3048473	1					
ANR	3049058	Argument	runtime		3048473	1					
ANR	3049059	Identifier	runtime		3048473	0					
ANR	3049060	ExpressionStatement	async_pipe_signal = false	3126:2:91797:91822	3048473	2	True				
ANR	3049061	AssignmentExpression	async_pipe_signal = false		3048473	0		=			
ANR	3049062	Identifier	async_pipe_signal		3048473	0					
ANR	3049063	Identifier	false		3048473	1					
ANR	3049064	WhileStatement	"while ( read ( async_pipe [ 0 ] , asyncpipe_buf , 8 ) > 0 )"		3048473	3					
ANR	3049065	Condition	"read ( async_pipe [ 0 ] , asyncpipe_buf , 8 ) > 0"	3130:9:92047:92085	3048473	0	True				
ANR	3049066	RelationalExpression	"read ( async_pipe [ 0 ] , asyncpipe_buf , 8 ) > 0"		3048473	0		>			
ANR	3049067	CallExpression	"read ( async_pipe [ 0 ] , asyncpipe_buf , 8 )"		3048473	0					
ANR	3049068	Callee	read		3048473	0					
ANR	3049069	Identifier	read		3048473	0					
ANR	3049070	ArgumentList	async_pipe [ 0 ]		3048473	1					
ANR	3049071	Argument	async_pipe [ 0 ]		3048473	0					
ANR	3049072	ArrayIndexing	async_pipe [ 0 ]		3048473	0					
ANR	3049073	Identifier	async_pipe		3048473	0					
ANR	3049074	PrimaryExpression	0		3048473	1					
ANR	3049075	Argument	asyncpipe_buf		3048473	1					
ANR	3049076	Identifier	asyncpipe_buf		3048473	0					
ANR	3049077	Argument	8		3048473	2					
ANR	3049078	PrimaryExpression	8		3048473	0					
ANR	3049079	PrimaryExpression	0		3048473	1					
ANR	3049080	ExpressionStatement		3130:50:92088:92088	3048473	1	True				
ANR	3049081	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3136:8:92247:92281	3048473	4	True				
ANR	3049082	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		3048473	0		=			
ANR	3049083	Identifier	runtime		3048473	0					
ANR	3049084	CallExpression	UtcTime :: getTimeDouble ( )		3048473	1					
ANR	3049085	Callee	UtcTime :: getTimeDouble		3048473	0					
ANR	3049086	Identifier	UtcTime :: getTimeDouble		3048473	0					
ANR	3049087	ArgumentList			3048473	1					
ANR	3049088	ExpressionStatement	dc_stats . SignalRuntime += ( runtime - group_runtime )	3137:8:92291:92342	3048473	5	True				
ANR	3049089	AssignmentExpression	dc_stats . SignalRuntime += ( runtime - group_runtime )		3048473	0		+=			
ANR	3049090	MemberAccess	dc_stats . SignalRuntime		3048473	0					
ANR	3049091	Identifier	dc_stats		3048473	0					
ANR	3049092	Identifier	SignalRuntime		3048473	1					
ANR	3049093	AdditiveExpression	runtime - group_runtime		3048473	1		-			
ANR	3049094	Identifier	runtime		3048473	0					
ANR	3049095	Identifier	group_runtime		3048473	1					
ANR	3049096	ExpressionStatement	group_runtime = runtime	3138:8:92352:92375	3048473	6	True				
ANR	3049097	AssignmentExpression	group_runtime = runtime		3048473	0		=			
ANR	3049098	Identifier	group_runtime		3048473	0					
ANR	3049099	Identifier	runtime		3048473	1					
ANR	3049100	IdentifierDeclStatement	int num_timers_fired = 0 ;	3153:8:93043:93067	3048473	7	True				
ANR	3049101	IdentifierDecl	num_timers_fired = 0		3048473	0					
ANR	3049102	IdentifierDeclType	int		3048473	0					
ANR	3049103	Identifier	num_timers_fired		3048473	1					
ANR	3049104	AssignmentExpression	num_timers_fired = 0		3048473	2		=			
ANR	3049105	Identifier	num_timers_fired		3048473	0					
ANR	3049106	PrimaryExpression	0		3048473	1					
ANR	3049107	ExpressionStatement	"timeout = t . Timeout ( & num_timers_fired , & runtime )"	3154:2:93071:93119	3048473	8	True				
ANR	3049108	AssignmentExpression	"timeout = t . Timeout ( & num_timers_fired , & runtime )"		3048473	0		=			
ANR	3049109	Identifier	timeout		3048473	0					
ANR	3049110	CallExpression	"t . Timeout ( & num_timers_fired , & runtime )"		3048473	1					
ANR	3049111	Callee	t . Timeout		3048473	0					
ANR	3049112	MemberAccess	t . Timeout		3048473	0					
ANR	3049113	Identifier	t		3048473	0					
ANR	3049114	Identifier	Timeout		3048473	1					
ANR	3049115	ArgumentList	& num_timers_fired		3048473	1					
ANR	3049116	Argument	& num_timers_fired		3048473	0					
ANR	3049117	UnaryOperationExpression	& num_timers_fired		3048473	0					
ANR	3049118	UnaryOperator	&		3048473	0					
ANR	3049119	Identifier	num_timers_fired		3048473	1					
ANR	3049120	Argument	& runtime		3048473	1					
ANR	3049121	UnaryOperationExpression	& runtime		3048473	0					
ANR	3049122	UnaryOperator	&		3048473	0					
ANR	3049123	Identifier	runtime		3048473	1					
ANR	3049124	ExpressionStatement	dc_stats . TimersFired += num_timers_fired	3156:8:93130:93170	3048473	9	True				
ANR	3049125	AssignmentExpression	dc_stats . TimersFired += num_timers_fired		3048473	0		+=			
ANR	3049126	MemberAccess	dc_stats . TimersFired		3048473	0					
ANR	3049127	Identifier	dc_stats		3048473	0					
ANR	3049128	Identifier	TimersFired		3048473	1					
ANR	3049129	Identifier	num_timers_fired		3048473	1					
ANR	3049130	IfStatement	if ( sent_signal == TRUE )		3048473	10					
ANR	3049131	Condition	sent_signal == TRUE	3158:7:93180:93198	3048473	0	True				
ANR	3049132	EqualityExpression	sent_signal == TRUE		3048473	0		==			
ANR	3049133	Identifier	sent_signal		3048473	0					
ANR	3049134	Identifier	TRUE		3048473	1					
ANR	3049135	CompoundStatement		139:29:4828:4828	3048473	1					
ANR	3049136	ExpressionStatement	timeout = 0	3159:3:93207:93218	3048473	0	True				
ANR	3049137	AssignmentExpression	timeout = 0		3048473	0		=			
ANR	3049138	Identifier	timeout		3048473	0					
ANR	3049139	PrimaryExpression	0		3048473	1					
ANR	3049140	IfStatement	if ( timeout < 0 )		3048473	11					
ANR	3049141	Condition	timeout < 0	3161:7:93231:93241	3048473	0	True				
ANR	3049142	RelationalExpression	timeout < 0		3048473	0		<			
ANR	3049143	Identifier	timeout		3048473	0					
ANR	3049144	PrimaryExpression	0		3048473	1					
ANR	3049145	CompoundStatement		142:21:4871:4871	3048473	1					
ANR	3049146	ExpressionStatement	timeout = TIME_T_NEVER	3162:3:93250:93272	3048473	0	True				
ANR	3049147	AssignmentExpression	timeout = TIME_T_NEVER		3048473	0		=			
ANR	3049148	Identifier	timeout		3048473	0					
ANR	3049149	Identifier	TIME_T_NEVER		3048473	1					
ANR	3049150	ExpressionStatement	dc_stats . TimerRuntime += ( runtime - group_runtime )	3167:8:93406:93456	3048473	12	True				
ANR	3049151	AssignmentExpression	dc_stats . TimerRuntime += ( runtime - group_runtime )		3048473	0		+=			
ANR	3049152	MemberAccess	dc_stats . TimerRuntime		3048473	0					
ANR	3049153	Identifier	dc_stats		3048473	0					
ANR	3049154	Identifier	TimerRuntime		3048473	1					
ANR	3049155	AdditiveExpression	runtime - group_runtime		3048473	1		-			
ANR	3049156	Identifier	runtime		3048473	0					
ANR	3049157	Identifier	group_runtime		3048473	1					
ANR	3049158	ExpressionStatement	group_runtime = runtime	3168:8:93466:93489	3048473	13	True				
ANR	3049159	AssignmentExpression	group_runtime = runtime		3048473	0		=			
ANR	3049160	Identifier	group_runtime		3048473	0					
ANR	3049161	Identifier	runtime		3048473	1					
ANR	3049162	ExpressionStatement	selector . reset ( )	3173:2:93682:93698	3048473	14	True				
ANR	3049163	CallExpression	selector . reset ( )		3048473	0					
ANR	3049164	Callee	selector . reset		3048473	0					
ANR	3049165	MemberAccess	selector . reset		3048473	0					
ANR	3049166	Identifier	selector		3048473	0					
ANR	3049167	Identifier	reset		3048473	1					
ANR	3049168	ArgumentList			3048473	1					
ANR	3049169	ExpressionStatement	min_deadline = 0	3174:2:93702:93718	3048473	15	True				
ANR	3049170	AssignmentExpression	min_deadline = 0		3048473	0		=			
ANR	3049171	Identifier	min_deadline		3048473	0					
ANR	3049172	PrimaryExpression	0		3048473	1					
ANR	3049173	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		3048473	16					
ANR	3049174	ForInit	i = 0 ;	3175:7:93727:93732	3048473	0	True				
ANR	3049175	AssignmentExpression	i = 0		3048473	0		=			
ANR	3049176	Identifier	i		3048473	0					
ANR	3049177	PrimaryExpression	0		3048473	1					
ANR	3049178	Condition	i < nSock	3175:14:93734:93742	3048473	1	True				
ANR	3049179	RelationalExpression	i < nSock		3048473	0		<			
ANR	3049180	Identifier	i		3048473	0					
ANR	3049181	Identifier	nSock		3048473	1					
ANR	3049182	PostIncDecOperationExpression	i ++	3175:25:93745:93747	3048473	2	True				
ANR	3049183	Identifier	i		3048473	0					
ANR	3049184	IncDec	++		3048473	1					
ANR	3049185	CompoundStatement		156:30:5376:5376	3048473	3					
ANR	3049186	IfStatement	if ( ( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false )		3048473	0					
ANR	3049187	Condition	( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false	3177:8:93826:93934	3048473	0	True				
ANR	3049188	AndExpression	( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false		3048473	0		&&			
ANR	3049189	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049190	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049191	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049192	UnaryOperator	*		3048473	0					
ANR	3049193	Identifier	sockTable		3048473	1					
ANR	3049194	Identifier	i		3048473	1					
ANR	3049195	Identifier	iosock		3048473	1					
ANR	3049196	AndExpression	( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false		3048473	1		&&			
ANR	3049197	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == 0		3048473	0		==			
ANR	3049198	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3048473	0					
ANR	3049199	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049200	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049201	UnaryOperator	*		3048473	0					
ANR	3049202	Identifier	sockTable		3048473	1					
ANR	3049203	Identifier	i		3048473	1					
ANR	3049204	Identifier	servicing_tid		3048473	1					
ANR	3049205	PrimaryExpression	0		3048473	1					
ANR	3049206	EqualityExpression	( * sockTable ) [ i ] . remove_asap == false		3048473	1		==			
ANR	3049207	MemberAccess	( * sockTable ) [ i ] . remove_asap		3048473	0					
ANR	3049208	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049209	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049210	UnaryOperator	*		3048473	0					
ANR	3049211	Identifier	sockTable		3048473	1					
ANR	3049212	Identifier	i		3048473	1					
ANR	3049213	Identifier	remove_asap		3048473	1					
ANR	3049214	Identifier	false		3048473	1					
ANR	3049215	CompoundStatement		187:4:6752:6808	3048473	1					
ANR	3049216	IfStatement	if ( ( * sockTable ) [ i ] . is_reverse_connect_pending )		3048473	0					
ANR	3049217	Condition	( * sockTable ) [ i ] . is_reverse_connect_pending	3181:9:93975:94016	3048473	0	True				
ANR	3049218	MemberAccess	( * sockTable ) [ i ] . is_reverse_connect_pending		3048473	0					
ANR	3049219	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049220	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049221	UnaryOperator	*		3048473	0					
ANR	3049222	Identifier	sockTable		3048473	1					
ANR	3049223	Identifier	i		3048473	1					
ANR	3049224	Identifier	is_reverse_connect_pending		3048473	1					
ANR	3049225	CompoundStatement		162:54:5646:5646	3048473	1					
ANR	3049226	ContinueStatement	continue ;	3189:5:94404:94412	3048473	0	True				
ANR	3049227	ElseStatement	else		3048473	0					
ANR	3049228	IfStatement	if ( ( * sockTable ) [ i ] . is_connect_pending )		3048473	0					
ANR	3049229	Condition	( * sockTable ) [ i ] . is_connect_pending	3191:14:94434:94467	3048473	0	True				
ANR	3049230	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		3048473	0					
ANR	3049231	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049232	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049233	UnaryOperator	*		3048473	0					
ANR	3049234	Identifier	sockTable		3048473	1					
ANR	3049235	Identifier	i		3048473	1					
ANR	3049236	Identifier	is_connect_pending		3048473	1					
ANR	3049237	CompoundStatement		172:51:6097:6097	3048473	1					
ANR	3049238	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE )"	3196:5:94681:94759	3048473	0	True				
ANR	3049239	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE )"		3048473	0					
ANR	3049240	Callee	selector . add_fd		3048473	0					
ANR	3049241	MemberAccess	selector . add_fd		3048473	0					
ANR	3049242	Identifier	selector		3048473	0					
ANR	3049243	Identifier	add_fd		3048473	1					
ANR	3049244	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	1					
ANR	3049245	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049246	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049247	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049248	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049249	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049250	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049251	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049252	UnaryOperator	*		3048473	0					
ANR	3049253	Identifier	sockTable		3048473	1					
ANR	3049254	Identifier	i		3048473	1					
ANR	3049255	Identifier	iosock		3048473	1					
ANR	3049256	Identifier	get_file_desc		3048473	1					
ANR	3049257	ArgumentList			3048473	1					
ANR	3049258	Argument	Selector :: IO_WRITE		3048473	1					
ANR	3049259	Identifier	Selector :: IO_WRITE		3048473	0					
ANR	3049260	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT )"	3197:5:94766:94845	3048473	1	True				
ANR	3049261	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT )"		3048473	0					
ANR	3049262	Callee	selector . add_fd		3048473	0					
ANR	3049263	MemberAccess	selector . add_fd		3048473	0					
ANR	3049264	Identifier	selector		3048473	0					
ANR	3049265	Identifier	add_fd		3048473	1					
ANR	3049266	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	1					
ANR	3049267	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049268	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049269	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049270	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049271	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049272	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049273	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049274	UnaryOperator	*		3048473	0					
ANR	3049275	Identifier	sockTable		3048473	1					
ANR	3049276	Identifier	i		3048473	1					
ANR	3049277	Identifier	iosock		3048473	1					
ANR	3049278	Identifier	get_file_desc		3048473	1					
ANR	3049279	ArgumentList			3048473	1					
ANR	3049280	Argument	Selector :: IO_EXCEPT		3048473	1					
ANR	3049281	Identifier	Selector :: IO_EXCEPT		3048473	0					
ANR	3049282	ElseStatement	else		3048473	0					
ANR	3049283	CompoundStatement		179:11:6484:6484	3048473	0					
ANR	3049284	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"	3201:5:94936:95013	3048473	0	True				
ANR	3049285	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		3048473	0					
ANR	3049286	Callee	selector . add_fd		3048473	0					
ANR	3049287	MemberAccess	selector . add_fd		3048473	0					
ANR	3049288	Identifier	selector		3048473	0					
ANR	3049289	Identifier	add_fd		3048473	1					
ANR	3049290	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	1					
ANR	3049291	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049292	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049293	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049294	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049295	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049296	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049297	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049298	UnaryOperator	*		3048473	0					
ANR	3049299	Identifier	sockTable		3048473	1					
ANR	3049300	Identifier	i		3048473	1					
ANR	3049301	Identifier	iosock		3048473	1					
ANR	3049302	Identifier	get_file_desc		3048473	1					
ANR	3049303	ArgumentList			3048473	1					
ANR	3049304	Argument	Selector :: IO_READ		3048473	1					
ANR	3049305	Identifier	Selector :: IO_READ		3048473	0					
ANR	3049306	IdentifierDeclStatement	time_t deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( ) ;	3206:4:95126:95182	3048473	1	True				
ANR	3049307	IdentifierDecl	deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( )		3048473	0					
ANR	3049308	IdentifierDeclType	time_t		3048473	0					
ANR	3049309	Identifier	deadline		3048473	1					
ANR	3049310	AssignmentExpression	deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( )		3048473	2		=			
ANR	3049311	Identifier	deadline		3048473	0					
ANR	3049312	CallExpression	( * sockTable ) [ i ] . iosock -> get_deadline ( )		3048473	1					
ANR	3049313	Callee	( * sockTable ) [ i ] . iosock -> get_deadline		3048473	0					
ANR	3049314	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_deadline		3048473	0					
ANR	3049315	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049316	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049317	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049318	UnaryOperator	*		3048473	0					
ANR	3049319	Identifier	sockTable		3048473	1					
ANR	3049320	Identifier	i		3048473	1					
ANR	3049321	Identifier	iosock		3048473	1					
ANR	3049322	Identifier	get_deadline		3048473	1					
ANR	3049323	ArgumentList			3048473	1					
ANR	3049324	IfStatement	if ( deadline )		3048473	2					
ANR	3049325	Condition	deadline	3207:7:95191:95198	3048473	0	True				
ANR	3049326	Identifier	deadline		3048473	0					
ANR	3049327	CompoundStatement		188:17:6827:6827	3048473	1					
ANR	3049328	IfStatement	if ( min_deadline == 0 || min_deadline > deadline )		3048473	0					
ANR	3049329	Condition	min_deadline == 0 || min_deadline > deadline	3208:8:95247:95290	3048473	0	True				
ANR	3049330	OrExpression	min_deadline == 0 || min_deadline > deadline		3048473	0		||			
ANR	3049331	EqualityExpression	min_deadline == 0		3048473	0		==			
ANR	3049332	Identifier	min_deadline		3048473	0					
ANR	3049333	PrimaryExpression	0		3048473	1					
ANR	3049334	RelationalExpression	min_deadline > deadline		3048473	1		>			
ANR	3049335	Identifier	min_deadline		3048473	0					
ANR	3049336	Identifier	deadline		3048473	1					
ANR	3049337	CompoundStatement		189:54:6919:6919	3048473	1					
ANR	3049338	ExpressionStatement	min_deadline = deadline	3209:6:95301:95324	3048473	0	True				
ANR	3049339	AssignmentExpression	min_deadline = deadline		3048473	0		=			
ANR	3049340	Identifier	min_deadline		3048473	0					
ANR	3049341	Identifier	deadline		3048473	1					
ANR	3049342	IfStatement	if ( min_deadline )		3048473	17					
ANR	3049343	Condition	min_deadline	3215:6:95364:95375	3048473	0	True				
ANR	3049344	Identifier	min_deadline		3048473	0					
ANR	3049345	CompoundStatement		197:3:7010:7062	3048473	1					
ANR	3049346	IdentifierDeclStatement	int deadline_timeout = min_deadline - time ( NULL ) + 1 ;	3216:3:95384:95436	3048473	0	True				
ANR	3049347	IdentifierDecl	deadline_timeout = min_deadline - time ( NULL ) + 1		3048473	0					
ANR	3049348	IdentifierDeclType	int		3048473	0					
ANR	3049349	Identifier	deadline_timeout		3048473	1					
ANR	3049350	AssignmentExpression	deadline_timeout = min_deadline - time ( NULL ) + 1		3048473	2		=			
ANR	3049351	Identifier	deadline_timeout		3048473	0					
ANR	3049352	AdditiveExpression	min_deadline - time ( NULL ) + 1		3048473	1		-			
ANR	3049353	Identifier	min_deadline		3048473	0					
ANR	3049354	AdditiveExpression	time ( NULL ) + 1		3048473	1		+			
ANR	3049355	CallExpression	time ( NULL )		3048473	0					
ANR	3049356	Callee	time		3048473	0					
ANR	3049357	Identifier	time		3048473	0					
ANR	3049358	ArgumentList	NULL		3048473	1					
ANR	3049359	Argument	NULL		3048473	0					
ANR	3049360	Identifier	NULL		3048473	0					
ANR	3049361	PrimaryExpression	1		3048473	1					
ANR	3049362	IfStatement	if ( deadline_timeout < timeout )		3048473	1					
ANR	3049363	Condition	deadline_timeout < timeout	3217:6:95444:95469	3048473	0	True				
ANR	3049364	RelationalExpression	deadline_timeout < timeout		3048473	0		<			
ANR	3049365	Identifier	deadline_timeout		3048473	0					
ANR	3049366	Identifier	timeout		3048473	1					
ANR	3049367	CompoundStatement		198:34:7098:7098	3048473	1					
ANR	3049368	IfStatement	if ( deadline_timeout < 0 )		3048473	0					
ANR	3049369	Condition	deadline_timeout < 0	3218:7:95481:95500	3048473	0	True				
ANR	3049370	RelationalExpression	deadline_timeout < 0		3048473	0		<			
ANR	3049371	Identifier	deadline_timeout		3048473	0					
ANR	3049372	PrimaryExpression	0		3048473	1					
ANR	3049373	ExpressionStatement	deadline_timeout = 0	3218:29:95503:95523	3048473	1	True				
ANR	3049374	AssignmentExpression	deadline_timeout = 0		3048473	0		=			
ANR	3049375	Identifier	deadline_timeout		3048473	0					
ANR	3049376	PrimaryExpression	0		3048473	1					
ANR	3049377	ExpressionStatement	timeout = deadline_timeout	3219:4:95529:95555	3048473	1	True				
ANR	3049378	AssignmentExpression	timeout = deadline_timeout		3048473	0		=			
ANR	3049379	Identifier	timeout		3048473	0					
ANR	3049380	Identifier	deadline_timeout		3048473	1					
ANR	3049381	ForStatement	for ( i = 0 ; i < nPipe ; i ++ )		3048473	18					
ANR	3049382	ForInit	i = 0 ;	3226:7:95675:95680	3048473	0	True				
ANR	3049383	AssignmentExpression	i = 0		3048473	0		=			
ANR	3049384	Identifier	i		3048473	0					
ANR	3049385	PrimaryExpression	0		3048473	1					
ANR	3049386	Condition	i < nPipe	3226:14:95682:95690	3048473	1	True				
ANR	3049387	RelationalExpression	i < nPipe		3048473	0		<			
ANR	3049388	Identifier	i		3048473	0					
ANR	3049389	Identifier	nPipe		3048473	1					
ANR	3049390	PostIncDecOperationExpression	i ++	3226:25:95693:95695	3048473	2	True				
ANR	3049391	Identifier	i		3048473	0					
ANR	3049392	IncDec	++		3048473	1					
ANR	3049393	CompoundStatement		207:30:7324:7324	3048473	3					
ANR	3049394	IfStatement	if ( ( * pipeTable ) [ i ] . index != - 1 )		3048473	0					
ANR	3049395	Condition	( * pipeTable ) [ i ] . index != - 1	3227:8:95708:95734	3048473	0	True				
ANR	3049396	EqualityExpression	( * pipeTable ) [ i ] . index != - 1		3048473	0		!=			
ANR	3049397	MemberAccess	( * pipeTable ) [ i ] . index		3048473	0					
ANR	3049398	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3049399	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3049400	UnaryOperator	*		3048473	0					
ANR	3049401	Identifier	pipeTable		3048473	1					
ANR	3049402	Identifier	i		3048473	1					
ANR	3049403	Identifier	index		3048473	1					
ANR	3049404	UnaryOperationExpression	- 1		3048473	1					
ANR	3049405	UnaryOperator	-		3048473	0					
ANR	3049406	PrimaryExpression	1		3048473	1					
ANR	3049407	CompoundStatement		209:4:7394:7448	3048473	1					
ANR	3049408	IdentifierDeclStatement	int pipefd = ( * pipeHandleTable ) [ ( * pipeTable ) [ i ] . index ] ;	3228:4:95768:95822	3048473	0	True				
ANR	3049409	IdentifierDecl	pipefd = ( * pipeHandleTable ) [ ( * pipeTable ) [ i ] . index ]		3048473	0					
ANR	3049410	IdentifierDeclType	int		3048473	0					
ANR	3049411	Identifier	pipefd		3048473	1					
ANR	3049412	AssignmentExpression	pipefd = ( * pipeHandleTable ) [ ( * pipeTable ) [ i ] . index ]		3048473	2		=			
ANR	3049413	Identifier	pipefd		3048473	0					
ANR	3049414	ArrayIndexing	( * pipeHandleTable ) [ ( * pipeTable ) [ i ] . index ]		3048473	1					
ANR	3049415	UnaryOperationExpression	* pipeHandleTable		3048473	0					
ANR	3049416	UnaryOperator	*		3048473	0					
ANR	3049417	Identifier	pipeHandleTable		3048473	1					
ANR	3049418	MemberAccess	( * pipeTable ) [ i ] . index		3048473	1					
ANR	3049419	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3049420	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3049421	UnaryOperator	*		3048473	0					
ANR	3049422	Identifier	pipeTable		3048473	1					
ANR	3049423	Identifier	i		3048473	1					
ANR	3049424	Identifier	index		3048473	1					
ANR	3049425	SwitchStatement	switch ( ( * pipeTable ) [ i ] . handler_type )		3048473	1					
ANR	3049426	Condition	( * pipeTable ) [ i ] . handler_type	3229:12:95836:95863	3048473	0	True				
ANR	3049427	MemberAccess	( * pipeTable ) [ i ] . handler_type		3048473	0					
ANR	3049428	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3049429	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3049430	UnaryOperator	*		3048473	0					
ANR	3049431	Identifier	pipeTable		3048473	1					
ANR	3049432	Identifier	i		3048473	1					
ANR	3049433	Identifier	handler_type		3048473	1					
ANR	3049434	CompoundStatement		210:43:7493:7493	3048473	1					
ANR	3049435	Label	case HANDLE_READ :	3230:4:95873:95889	3048473	0	True				
ANR	3049436	Identifier	HANDLE_READ		3048473	0					
ANR	3049437	ExpressionStatement	"selector . add_fd ( pipefd , Selector :: IO_READ )"	3231:5:95896:95940	3048473	1	True				
ANR	3049438	CallExpression	"selector . add_fd ( pipefd , Selector :: IO_READ )"		3048473	0					
ANR	3049439	Callee	selector . add_fd		3048473	0					
ANR	3049440	MemberAccess	selector . add_fd		3048473	0					
ANR	3049441	Identifier	selector		3048473	0					
ANR	3049442	Identifier	add_fd		3048473	1					
ANR	3049443	ArgumentList	pipefd		3048473	1					
ANR	3049444	Argument	pipefd		3048473	0					
ANR	3049445	Identifier	pipefd		3048473	0					
ANR	3049446	Argument	Selector :: IO_READ		3048473	1					
ANR	3049447	Identifier	Selector :: IO_READ		3048473	0					
ANR	3049448	BreakStatement	break ;	3232:5:95947:95952	3048473	2	True				
ANR	3049449	Label	case HANDLE_WRITE :	3233:4:95958:95975	3048473	3	True				
ANR	3049450	Identifier	HANDLE_WRITE		3048473	0					
ANR	3049451	ExpressionStatement	"selector . add_fd ( pipefd , Selector :: IO_WRITE )"	3234:5:95982:96027	3048473	4	True				
ANR	3049452	CallExpression	"selector . add_fd ( pipefd , Selector :: IO_WRITE )"		3048473	0					
ANR	3049453	Callee	selector . add_fd		3048473	0					
ANR	3049454	MemberAccess	selector . add_fd		3048473	0					
ANR	3049455	Identifier	selector		3048473	0					
ANR	3049456	Identifier	add_fd		3048473	1					
ANR	3049457	ArgumentList	pipefd		3048473	1					
ANR	3049458	Argument	pipefd		3048473	0					
ANR	3049459	Identifier	pipefd		3048473	0					
ANR	3049460	Argument	Selector :: IO_WRITE		3048473	1					
ANR	3049461	Identifier	Selector :: IO_WRITE		3048473	0					
ANR	3049462	BreakStatement	break ;	3235:5:96034:96039	3048473	5	True				
ANR	3049463	Label	case HANDLE_READ_WRITE :	3236:4:96045:96067	3048473	6	True				
ANR	3049464	Identifier	HANDLE_READ_WRITE		3048473	0					
ANR	3049465	ExpressionStatement	"selector . add_fd ( pipefd , Selector :: IO_READ )"	3237:5:96074:96118	3048473	7	True				
ANR	3049466	CallExpression	"selector . add_fd ( pipefd , Selector :: IO_READ )"		3048473	0					
ANR	3049467	Callee	selector . add_fd		3048473	0					
ANR	3049468	MemberAccess	selector . add_fd		3048473	0					
ANR	3049469	Identifier	selector		3048473	0					
ANR	3049470	Identifier	add_fd		3048473	1					
ANR	3049471	ArgumentList	pipefd		3048473	1					
ANR	3049472	Argument	pipefd		3048473	0					
ANR	3049473	Identifier	pipefd		3048473	0					
ANR	3049474	Argument	Selector :: IO_READ		3048473	1					
ANR	3049475	Identifier	Selector :: IO_READ		3048473	0					
ANR	3049476	ExpressionStatement	"selector . add_fd ( pipefd , Selector :: IO_WRITE )"	3238:5:96125:96170	3048473	8	True				
ANR	3049477	CallExpression	"selector . add_fd ( pipefd , Selector :: IO_WRITE )"		3048473	0					
ANR	3049478	Callee	selector . add_fd		3048473	0					
ANR	3049479	MemberAccess	selector . add_fd		3048473	0					
ANR	3049480	Identifier	selector		3048473	0					
ANR	3049481	Identifier	add_fd		3048473	1					
ANR	3049482	ArgumentList	pipefd		3048473	1					
ANR	3049483	Argument	pipefd		3048473	0					
ANR	3049484	Identifier	pipefd		3048473	0					
ANR	3049485	Argument	Selector :: IO_WRITE		3048473	1					
ANR	3049486	Identifier	Selector :: IO_WRITE		3048473	0					
ANR	3049487	BreakStatement	break ;	3239:5:96177:96182	3048473	9	True				
ANR	3049488	IfStatement	if ( ! async_pipe [ 0 ] . is_connected ( ) )		3048473	19					
ANR	3049489	Condition	! async_pipe [ 0 ] . is_connected ( )	3250:7:96443:96472	3048473	0	True				
ANR	3049490	UnaryOperationExpression	! async_pipe [ 0 ] . is_connected ( )		3048473	0					
ANR	3049491	UnaryOperator	!		3048473	0					
ANR	3049492	CallExpression	async_pipe [ 0 ] . is_connected ( )		3048473	1					
ANR	3049493	Callee	async_pipe [ 0 ] . is_connected		3048473	0					
ANR	3049494	MemberAccess	async_pipe [ 0 ] . is_connected		3048473	0					
ANR	3049495	ArrayIndexing	async_pipe [ 0 ]		3048473	0					
ANR	3049496	Identifier	async_pipe		3048473	0					
ANR	3049497	PrimaryExpression	0		3048473	1					
ANR	3049498	Identifier	is_connected		3048473	1					
ANR	3049499	ArgumentList			3048473	1					
ANR	3049500	CompoundStatement		231:39:8101:8101	3048473	1					
ANR	3049501	ExpressionStatement	"EXCEPT ( ""DaemonCore:: async_pipe has been unexpectedly closed!"" )"	3251:3:96480:96543	3048473	0	True				
ANR	3049502	CallExpression	"EXCEPT ( ""DaemonCore:: async_pipe has been unexpectedly closed!"" )"		3048473	0					
ANR	3049503	Callee	EXCEPT		3048473	0					
ANR	3049504	Identifier	EXCEPT		3048473	0					
ANR	3049505	ArgumentList	"""DaemonCore:: async_pipe has been unexpectedly closed!"""		3048473	1					
ANR	3049506	Argument	"""DaemonCore:: async_pipe has been unexpectedly closed!"""		3048473	0					
ANR	3049507	PrimaryExpression	"""DaemonCore:: async_pipe has been unexpectedly closed!"""		3048473	0					
ANR	3049508	ExpressionStatement	"selector . add_fd ( async_pipe [ 0 ] . get_file_desc ( ) , Selector :: IO_READ )"	3253:2:96552:96620	3048473	20	True				
ANR	3049509	CallExpression	"selector . add_fd ( async_pipe [ 0 ] . get_file_desc ( ) , Selector :: IO_READ )"		3048473	0					
ANR	3049510	Callee	selector . add_fd		3048473	0					
ANR	3049511	MemberAccess	selector . add_fd		3048473	0					
ANR	3049512	Identifier	selector		3048473	0					
ANR	3049513	Identifier	add_fd		3048473	1					
ANR	3049514	ArgumentList	async_pipe [ 0 ] . get_file_desc ( )		3048473	1					
ANR	3049515	Argument	async_pipe [ 0 ] . get_file_desc ( )		3048473	0					
ANR	3049516	CallExpression	async_pipe [ 0 ] . get_file_desc ( )		3048473	0					
ANR	3049517	Callee	async_pipe [ 0 ] . get_file_desc		3048473	0					
ANR	3049518	MemberAccess	async_pipe [ 0 ] . get_file_desc		3048473	0					
ANR	3049519	ArrayIndexing	async_pipe [ 0 ]		3048473	0					
ANR	3049520	Identifier	async_pipe		3048473	0					
ANR	3049521	PrimaryExpression	0		3048473	1					
ANR	3049522	Identifier	get_file_desc		3048473	1					
ANR	3049523	ArgumentList			3048473	1					
ANR	3049524	Argument	Selector :: IO_READ		3048473	1					
ANR	3049525	Identifier	Selector :: IO_READ		3048473	0					
ANR	3049526	ExpressionStatement	CondorThreads :: enable_parallel ( true )	3259:2:96751:96787	3048473	21	True				
ANR	3049527	CallExpression	CondorThreads :: enable_parallel ( true )		3048473	0					
ANR	3049528	Callee	CondorThreads :: enable_parallel		3048473	0					
ANR	3049529	Identifier	CondorThreads :: enable_parallel		3048473	0					
ANR	3049530	ArgumentList	true		3048473	1					
ANR	3049531	Argument	true		3048473	0					
ANR	3049532	Identifier	true		3048473	0					
ANR	3049533	ExpressionStatement	async_sigs_unblocked = TRUE	3266:2:97078:97105	3048473	22	True				
ANR	3049534	AssignmentExpression	async_sigs_unblocked = TRUE		3048473	0		=			
ANR	3049535	Identifier	async_sigs_unblocked		3048473	0					
ANR	3049536	Identifier	TRUE		3048473	1					
ANR	3049537	ExpressionStatement	"sigprocmask ( SIG_SETMASK , & emptyset , NULL )"	3270:2:97183:97226	3048473	23	True				
ANR	3049538	CallExpression	"sigprocmask ( SIG_SETMASK , & emptyset , NULL )"		3048473	0					
ANR	3049539	Callee	sigprocmask		3048473	0					
ANR	3049540	Identifier	sigprocmask		3048473	0					
ANR	3049541	ArgumentList	SIG_SETMASK		3048473	1					
ANR	3049542	Argument	SIG_SETMASK		3048473	0					
ANR	3049543	Identifier	SIG_SETMASK		3048473	0					
ANR	3049544	Argument	& emptyset		3048473	1					
ANR	3049545	UnaryOperationExpression	& emptyset		3048473	0					
ANR	3049546	UnaryOperator	&		3048473	0					
ANR	3049547	Identifier	emptyset		3048473	1					
ANR	3049548	Argument	NULL		3048473	2					
ANR	3049549	Identifier	NULL		3048473	0					
ANR	3049550	ExpressionStatement	selector . set_timeout ( timeout )	3276:2:97325:97356	3048473	24	True				
ANR	3049551	CallExpression	selector . set_timeout ( timeout )		3048473	0					
ANR	3049552	Callee	selector . set_timeout		3048473	0					
ANR	3049553	MemberAccess	selector . set_timeout		3048473	0					
ANR	3049554	Identifier	selector		3048473	0					
ANR	3049555	Identifier	set_timeout		3048473	1					
ANR	3049556	ArgumentList	timeout		3048473	1					
ANR	3049557	Argument	timeout		3048473	0					
ANR	3049558	Identifier	timeout		3048473	0					
ANR	3049559	ExpressionStatement	errno = 0	3278:2:97361:97370	3048473	25	True				
ANR	3049560	AssignmentExpression	errno = 0		3048473	0		=			
ANR	3049561	Identifier	errno		3048473	0					
ANR	3049562	PrimaryExpression	0		3048473	1					
ANR	3049563	IdentifierDeclStatement	time_t time_before = time ( NULL ) ;	3279:2:97374:97405	3048473	26	True				
ANR	3049564	IdentifierDecl	time_before = time ( NULL )		3048473	0					
ANR	3049565	IdentifierDeclType	time_t		3048473	0					
ANR	3049566	Identifier	time_before		3048473	1					
ANR	3049567	AssignmentExpression	time_before = time ( NULL )		3048473	2		=			
ANR	3049568	Identifier	time_before		3048473	0					
ANR	3049569	CallExpression	time ( NULL )		3048473	1					
ANR	3049570	Callee	time		3048473	0					
ANR	3049571	Identifier	time		3048473	0					
ANR	3049572	ArgumentList	NULL		3048473	1					
ANR	3049573	Argument	NULL		3048473	0					
ANR	3049574	Identifier	NULL		3048473	0					
ANR	3049575	IdentifierDeclStatement	time_t okay_delta = timeout ;	3280:2:97409:97436	3048473	27	True				
ANR	3049576	IdentifierDecl	okay_delta = timeout		3048473	0					
ANR	3049577	IdentifierDeclType	time_t		3048473	0					
ANR	3049578	Identifier	okay_delta		3048473	1					
ANR	3049579	AssignmentExpression	okay_delta = timeout		3048473	2		=			
ANR	3049580	Identifier	timeout		3048473	0					
ANR	3049581	Identifier	timeout		3048473	1					
ANR	3049582	IfStatement	if ( DebugFlags & D_PERF_TRACE )		3048473	28					
ANR	3049583	Condition	DebugFlags & D_PERF_TRACE	3285:6:97599:97623	3048473	0	True				
ANR	3049584	BitAndExpression	DebugFlags & D_PERF_TRACE		3048473	0		&			
ANR	3049585	Identifier	DebugFlags		3048473	0					
ANR	3049586	Identifier	D_PERF_TRACE		3048473	1					
ANR	3049587	CompoundStatement		266:33:9252:9252	3048473	1					
ANR	3049588	ExpressionStatement	"dprintf ( D_ALWAYS , ""PERF: entering select\\n"" )"	3286:3:97631:97675	3048473	0	True				
ANR	3049589	CallExpression	"dprintf ( D_ALWAYS , ""PERF: entering select\\n"" )"		3048473	0					
ANR	3049590	Callee	dprintf		3048473	0					
ANR	3049591	Identifier	dprintf		3048473	0					
ANR	3049592	ArgumentList	D_ALWAYS		3048473	1					
ANR	3049593	Argument	D_ALWAYS		3048473	0					
ANR	3049594	Identifier	D_ALWAYS		3048473	0					
ANR	3049595	Argument	"""PERF: entering select\\n"""		3048473	1					
ANR	3049596	PrimaryExpression	"""PERF: entering select\\n"""		3048473	0					
ANR	3049597	ExpressionStatement	selector . execute ( )	3289:2:97684:97702	3048473	29	True				
ANR	3049598	CallExpression	selector . execute ( )		3048473	0					
ANR	3049599	Callee	selector . execute		3048473	0					
ANR	3049600	MemberAccess	selector . execute		3048473	0					
ANR	3049601	Identifier	selector		3048473	0					
ANR	3049602	Identifier	execute		3048473	1					
ANR	3049603	ArgumentList			3048473	1					
ANR	3049604	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3292:8:97775:97809	3048473	30	True				
ANR	3049605	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		3048473	0		=			
ANR	3049606	Identifier	runtime		3048473	0					
ANR	3049607	CallExpression	UtcTime :: getTimeDouble ( )		3048473	1					
ANR	3049608	Callee	UtcTime :: getTimeDouble		3048473	0					
ANR	3049609	Identifier	UtcTime :: getTimeDouble		3048473	0					
ANR	3049610	ArgumentList			3048473	1					
ANR	3049611	ExpressionStatement	dc_stats . SelectWaittime += ( runtime - group_runtime )	3293:8:97819:97871	3048473	31	True				
ANR	3049612	AssignmentExpression	dc_stats . SelectWaittime += ( runtime - group_runtime )		3048473	0		+=			
ANR	3049613	MemberAccess	dc_stats . SelectWaittime		3048473	0					
ANR	3049614	Identifier	dc_stats		3048473	0					
ANR	3049615	Identifier	SelectWaittime		3048473	1					
ANR	3049616	AdditiveExpression	runtime - group_runtime		3048473	1		-			
ANR	3049617	Identifier	runtime		3048473	0					
ANR	3049618	Identifier	group_runtime		3048473	1					
ANR	3049619	ExpressionStatement	tmpErrno = errno	3296:2:97936:97952	3048473	32	True				
ANR	3049620	AssignmentExpression	tmpErrno = errno		3048473	0		=			
ANR	3049621	Identifier	tmpErrno		3048473	0					
ANR	3049622	Identifier	errno		3048473	1					
ANR	3049623	ExpressionStatement	"CheckForTimeSkip ( time_before , okay_delta )"	3298:2:97957:97998	3048473	33	True				
ANR	3049624	CallExpression	"CheckForTimeSkip ( time_before , okay_delta )"		3048473	0					
ANR	3049625	Callee	CheckForTimeSkip		3048473	0					
ANR	3049626	Identifier	CheckForTimeSkip		3048473	0					
ANR	3049627	ArgumentList	time_before		3048473	1					
ANR	3049628	Argument	time_before		3048473	0					
ANR	3049629	Identifier	time_before		3048473	0					
ANR	3049630	Argument	okay_delta		3048473	1					
ANR	3049631	Identifier	okay_delta		3048473	0					
ANR	3049632	ExpressionStatement	"sigprocmask ( SIG_SETMASK , & fullset , NULL )"	3305:2:98105:98147	3048473	34	True				
ANR	3049633	CallExpression	"sigprocmask ( SIG_SETMASK , & fullset , NULL )"		3048473	0					
ANR	3049634	Callee	sigprocmask		3048473	0					
ANR	3049635	Identifier	sigprocmask		3048473	0					
ANR	3049636	ArgumentList	SIG_SETMASK		3048473	1					
ANR	3049637	Argument	SIG_SETMASK		3048473	0					
ANR	3049638	Identifier	SIG_SETMASK		3048473	0					
ANR	3049639	Argument	& fullset		3048473	1					
ANR	3049640	UnaryOperationExpression	& fullset		3048473	0					
ANR	3049641	UnaryOperator	&		3048473	0					
ANR	3049642	Identifier	fullset		3048473	1					
ANR	3049643	Argument	NULL		3048473	2					
ANR	3049644	Identifier	NULL		3048473	0					
ANR	3049645	ExpressionStatement	async_sigs_unblocked = FALSE	3310:2:98302:98330	3048473	35	True				
ANR	3049646	AssignmentExpression	async_sigs_unblocked = FALSE		3048473	0		=			
ANR	3049647	Identifier	async_sigs_unblocked		3048473	0					
ANR	3049648	Identifier	FALSE		3048473	1					
ANR	3049649	IfStatement	if ( selector . failed ( ) )		3048473	36					
ANR	3049650	Condition	selector . failed ( )	3312:7:98340:98356	3048473	0	True				
ANR	3049651	CallExpression	selector . failed ( )		3048473	0					
ANR	3049652	Callee	selector . failed		3048473	0					
ANR	3049653	MemberAccess	selector . failed		3048473	0					
ANR	3049654	Identifier	selector		3048473	0					
ANR	3049655	Identifier	failed		3048473	1					
ANR	3049656	ArgumentList			3048473	1					
ANR	3049657	CompoundStatement		293:27:9986:9986	3048473	1					
ANR	3049658	ExpressionStatement	"dprintf ( D_ALWAYS , ""Socket Table:\\n"" )"	3314:4:98408:98443	3048473	0	True				
ANR	3049659	CallExpression	"dprintf ( D_ALWAYS , ""Socket Table:\\n"" )"		3048473	0					
ANR	3049660	Callee	dprintf		3048473	0					
ANR	3049661	Identifier	dprintf		3048473	0					
ANR	3049662	ArgumentList	D_ALWAYS		3048473	1					
ANR	3049663	Argument	D_ALWAYS		3048473	0					
ANR	3049664	Identifier	D_ALWAYS		3048473	0					
ANR	3049665	Argument	"""Socket Table:\\n"""		3048473	1					
ANR	3049666	PrimaryExpression	"""Socket Table:\\n"""		3048473	0					
ANR	3049667	ExpressionStatement	DumpSocketTable ( D_ALWAYS )	3315:10:98455:98482	3048473	1	True				
ANR	3049668	CallExpression	DumpSocketTable ( D_ALWAYS )		3048473	0					
ANR	3049669	Callee	DumpSocketTable		3048473	0					
ANR	3049670	Identifier	DumpSocketTable		3048473	0					
ANR	3049671	ArgumentList	D_ALWAYS		3048473	1					
ANR	3049672	Argument	D_ALWAYS		3048473	0					
ANR	3049673	Identifier	D_ALWAYS		3048473	0					
ANR	3049674	ExpressionStatement	"dprintf ( D_ALWAYS , ""State of selector:\\n"" )"	3316:4:98488:98528	3048473	2	True				
ANR	3049675	CallExpression	"dprintf ( D_ALWAYS , ""State of selector:\\n"" )"		3048473	0					
ANR	3049676	Callee	dprintf		3048473	0					
ANR	3049677	Identifier	dprintf		3048473	0					
ANR	3049678	ArgumentList	D_ALWAYS		3048473	1					
ANR	3049679	Argument	D_ALWAYS		3048473	0					
ANR	3049680	Identifier	D_ALWAYS		3048473	0					
ANR	3049681	Argument	"""State of selector:\\n"""		3048473	1					
ANR	3049682	PrimaryExpression	"""State of selector:\\n"""		3048473	0					
ANR	3049683	ExpressionStatement	selector . display ( )	3317:4:98534:98552	3048473	3	True				
ANR	3049684	CallExpression	selector . display ( )		3048473	0					
ANR	3049685	Callee	selector . display		3048473	0					
ANR	3049686	MemberAccess	selector . display		3048473	0					
ANR	3049687	Identifier	selector		3048473	0					
ANR	3049688	Identifier	display		3048473	1					
ANR	3049689	ArgumentList			3048473	1					
ANR	3049690	ExpressionStatement	"EXCEPT ( ""DaemonCore: select() returned an unexpected error: %d (%s)"" , tmpErrno , strerror ( tmpErrno ) )"	3318:4:98558:98654	3048473	4	True				
ANR	3049691	CallExpression	"EXCEPT ( ""DaemonCore: select() returned an unexpected error: %d (%s)"" , tmpErrno , strerror ( tmpErrno ) )"		3048473	0					
ANR	3049692	Callee	EXCEPT		3048473	0					
ANR	3049693	Identifier	EXCEPT		3048473	0					
ANR	3049694	ArgumentList	"""DaemonCore: select() returned an unexpected error: %d (%s)"""		3048473	1					
ANR	3049695	Argument	"""DaemonCore: select() returned an unexpected error: %d (%s)"""		3048473	0					
ANR	3049696	PrimaryExpression	"""DaemonCore: select() returned an unexpected error: %d (%s)"""		3048473	0					
ANR	3049697	Argument	tmpErrno		3048473	1					
ANR	3049698	Identifier	tmpErrno		3048473	0					
ANR	3049699	Argument	strerror ( tmpErrno )		3048473	2					
ANR	3049700	CallExpression	strerror ( tmpErrno )		3048473	0					
ANR	3049701	Callee	strerror		3048473	0					
ANR	3049702	Identifier	strerror		3048473	0					
ANR	3049703	ArgumentList	tmpErrno		3048473	1					
ANR	3049704	Argument	tmpErrno		3048473	0					
ANR	3049705	Identifier	tmpErrno		3048473	0					
ANR	3049706	IfStatement	if ( DebugFlags & D_PERF_TRACE )		3048473	37					
ANR	3049707	Condition	DebugFlags & D_PERF_TRACE	3356:6:99939:99963	3048473	0	True				
ANR	3049708	BitAndExpression	DebugFlags & D_PERF_TRACE		3048473	0		&			
ANR	3049709	Identifier	DebugFlags		3048473	0					
ANR	3049710	Identifier	D_PERF_TRACE		3048473	1					
ANR	3049711	CompoundStatement		337:33:11592:11592	3048473	1					
ANR	3049712	ExpressionStatement	"dprintf ( D_ALWAYS , ""PERF: leaving select\\n"" )"	3357:3:99971:100014	3048473	0	True				
ANR	3049713	CallExpression	"dprintf ( D_ALWAYS , ""PERF: leaving select\\n"" )"		3048473	0					
ANR	3049714	Callee	dprintf		3048473	0					
ANR	3049715	Identifier	dprintf		3048473	0					
ANR	3049716	ArgumentList	D_ALWAYS		3048473	1					
ANR	3049717	Argument	D_ALWAYS		3048473	0					
ANR	3049718	Identifier	D_ALWAYS		3048473	0					
ANR	3049719	Argument	"""PERF: leaving select\\n"""		3048473	1					
ANR	3049720	PrimaryExpression	"""PERF: leaving select\\n"""		3048473	0					
ANR	3049721	ExpressionStatement	selector . display ( )	3358:3:100019:100037	3048473	1	True				
ANR	3049722	CallExpression	selector . display ( )		3048473	0					
ANR	3049723	Callee	selector . display		3048473	0					
ANR	3049724	MemberAccess	selector . display		3048473	0					
ANR	3049725	Identifier	selector		3048473	0					
ANR	3049726	Identifier	display		3048473	1					
ANR	3049727	ArgumentList			3048473	1					
ANR	3049728	ExpressionStatement	CondorThreads :: enable_parallel ( false )	3363:2:100136:100173	3048473	38	True				
ANR	3049729	CallExpression	CondorThreads :: enable_parallel ( false )		3048473	0					
ANR	3049730	Callee	CondorThreads :: enable_parallel		3048473	0					
ANR	3049731	Identifier	CondorThreads :: enable_parallel		3048473	0					
ANR	3049732	ArgumentList	false		3048473	1					
ANR	3049733	Argument	false		3048473	0					
ANR	3049734	Identifier	false		3048473	0					
ANR	3049735	ExpressionStatement	runtime = group_runtime = UtcTime :: getTimeDouble ( )	3365:8:100184:100234	3048473	39	True				
ANR	3049736	AssignmentExpression	runtime = group_runtime = UtcTime :: getTimeDouble ( )		3048473	0		=			
ANR	3049737	Identifier	runtime		3048473	0					
ANR	3049738	AssignmentExpression	group_runtime = UtcTime :: getTimeDouble ( )		3048473	1		=			
ANR	3049739	Identifier	group_runtime		3048473	0					
ANR	3049740	CallExpression	UtcTime :: getTimeDouble ( )		3048473	1					
ANR	3049741	Callee	UtcTime :: getTimeDouble		3048473	0					
ANR	3049742	Identifier	UtcTime :: getTimeDouble		3048473	0					
ANR	3049743	ArgumentList			3048473	1					
ANR	3049744	IfStatement	if ( selector . has_ready ( ) || ( selector . timed_out ( ) && min_deadline && min_deadline < time ( NULL ) ) )		3048473	40					
ANR	3049745	Condition	selector . has_ready ( ) || ( selector . timed_out ( ) && min_deadline && min_deadline < time ( NULL ) )	3367:7:100244:100347	3048473	0	True				
ANR	3049746	OrExpression	selector . has_ready ( ) || ( selector . timed_out ( ) && min_deadline && min_deadline < time ( NULL ) )		3048473	0		||			
ANR	3049747	CallExpression	selector . has_ready ( )		3048473	0					
ANR	3049748	Callee	selector . has_ready		3048473	0					
ANR	3049749	MemberAccess	selector . has_ready		3048473	0					
ANR	3049750	Identifier	selector		3048473	0					
ANR	3049751	Identifier	has_ready		3048473	1					
ANR	3049752	ArgumentList			3048473	1					
ANR	3049753	AndExpression	selector . timed_out ( ) && min_deadline && min_deadline < time ( NULL )		3048473	1		&&			
ANR	3049754	CallExpression	selector . timed_out ( )		3048473	0					
ANR	3049755	Callee	selector . timed_out		3048473	0					
ANR	3049756	MemberAccess	selector . timed_out		3048473	0					
ANR	3049757	Identifier	selector		3048473	0					
ANR	3049758	Identifier	timed_out		3048473	1					
ANR	3049759	ArgumentList			3048473	1					
ANR	3049760	AndExpression	min_deadline && min_deadline < time ( NULL )		3048473	1		&&			
ANR	3049761	Identifier	min_deadline		3048473	0					
ANR	3049762	RelationalExpression	min_deadline < time ( NULL )		3048473	1		<			
ANR	3049763	Identifier	min_deadline		3048473	0					
ANR	3049764	CallExpression	time ( NULL )		3048473	1					
ANR	3049765	Callee	time		3048473	0					
ANR	3049766	Identifier	time		3048473	0					
ANR	3049767	ArgumentList	NULL		3048473	1					
ANR	3049768	Argument	NULL		3048473	0					
ANR	3049769	Identifier	NULL		3048473	0					
ANR	3049770	CompoundStatement		360:3:12261:12288	3048473	1					
ANR	3049771	IdentifierDeclStatement	time_t now = time ( NULL ) ;	3377:3:100606:100629	3048473	0	True				
ANR	3049772	IdentifierDecl	now = time ( NULL )		3048473	0					
ANR	3049773	IdentifierDeclType	time_t		3048473	0					
ANR	3049774	Identifier	now		3048473	1					
ANR	3049775	AssignmentExpression	now = time ( NULL )		3048473	2		=			
ANR	3049776	Identifier	now		3048473	0					
ANR	3049777	CallExpression	time ( NULL )		3048473	1					
ANR	3049778	Callee	time		3048473	0					
ANR	3049779	Identifier	time		3048473	0					
ANR	3049780	ArgumentList	NULL		3048473	1					
ANR	3049781	Argument	NULL		3048473	0					
ANR	3049782	Identifier	NULL		3048473	0					
ANR	3049783	IdentifierDeclStatement	bool recheck_status = false ;	3379:3:100635:100662	3048473	1	True				
ANR	3049784	IdentifierDecl	recheck_status = false		3048473	0					
ANR	3049785	IdentifierDeclType	bool		3048473	0					
ANR	3049786	Identifier	recheck_status		3048473	1					
ANR	3049787	AssignmentExpression	recheck_status = false		3048473	2		=			
ANR	3049788	Identifier	false		3048473	0					
ANR	3049789	Identifier	false		3048473	1					
ANR	3049790	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		3048473	2					
ANR	3049791	ForInit	i = 0 ;	3383:7:100777:100782	3048473	0	True				
ANR	3049792	AssignmentExpression	i = 0		3048473	0		=			
ANR	3049793	Identifier	i		3048473	0					
ANR	3049794	PrimaryExpression	0		3048473	1					
ANR	3049795	Condition	i < nSock	3383:14:100784:100792	3048473	1	True				
ANR	3049796	RelationalExpression	i < nSock		3048473	0		<			
ANR	3049797	Identifier	i		3048473	0					
ANR	3049798	Identifier	nSock		3048473	1					
ANR	3049799	PostIncDecOperationExpression	i ++	3383:25:100795:100797	3048473	2	True				
ANR	3049800	Identifier	i		3048473	0					
ANR	3049801	IncDec	++		3048473	1					
ANR	3049802	CompoundStatement		364:30:12426:12426	3048473	3					
ANR	3049803	IfStatement	if ( ( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false )		3048473	0					
ANR	3049804	Condition	( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false	3384:9:100811:100921	3048473	0	True				
ANR	3049805	AndExpression	( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false		3048473	0		&&			
ANR	3049806	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049807	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049808	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049809	UnaryOperator	*		3048473	0					
ANR	3049810	Identifier	sockTable		3048473	1					
ANR	3049811	Identifier	i		3048473	1					
ANR	3049812	Identifier	iosock		3048473	1					
ANR	3049813	AndExpression	( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false		3048473	1		&&			
ANR	3049814	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == 0		3048473	0		==			
ANR	3049815	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3048473	0					
ANR	3049816	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049817	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049818	UnaryOperator	*		3048473	0					
ANR	3049819	Identifier	sockTable		3048473	1					
ANR	3049820	Identifier	i		3048473	1					
ANR	3049821	Identifier	servicing_tid		3048473	1					
ANR	3049822	PrimaryExpression	0		3048473	1					
ANR	3049823	EqualityExpression	( * sockTable ) [ i ] . remove_asap == false		3048473	1		==			
ANR	3049824	MemberAccess	( * sockTable ) [ i ] . remove_asap		3048473	0					
ANR	3049825	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049826	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049827	UnaryOperator	*		3048473	0					
ANR	3049828	Identifier	sockTable		3048473	1					
ANR	3049829	Identifier	i		3048473	1					
ANR	3049830	Identifier	remove_asap		3048473	1					
ANR	3049831	Identifier	false		3048473	1					
ANR	3049832	CompoundStatement		374:5:12869:12921	3048473	1					
ANR	3049833	ExpressionStatement	( * sockTable ) [ i ] . call_handler = false	3391:5:101137:101173	3048473	0	True				
ANR	3049834	AssignmentExpression	( * sockTable ) [ i ] . call_handler = false		3048473	0		=			
ANR	3049835	MemberAccess	( * sockTable ) [ i ] . call_handler		3048473	0					
ANR	3049836	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049837	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049838	UnaryOperator	*		3048473	0					
ANR	3049839	Identifier	sockTable		3048473	1					
ANR	3049840	Identifier	i		3048473	1					
ANR	3049841	Identifier	call_handler		3048473	1					
ANR	3049842	Identifier	false		3048473	1					
ANR	3049843	IdentifierDeclStatement	time_t deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( ) ;	3392:5:101180:101236	3048473	1	True				
ANR	3049844	IdentifierDecl	deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( )		3048473	0					
ANR	3049845	IdentifierDeclType	time_t		3048473	0					
ANR	3049846	Identifier	deadline		3048473	1					
ANR	3049847	AssignmentExpression	deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( )		3048473	2		=			
ANR	3049848	Identifier	deadline		3048473	0					
ANR	3049849	CallExpression	( * sockTable ) [ i ] . iosock -> get_deadline ( )		3048473	1					
ANR	3049850	Callee	( * sockTable ) [ i ] . iosock -> get_deadline		3048473	0					
ANR	3049851	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_deadline		3048473	0					
ANR	3049852	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049853	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049854	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049855	UnaryOperator	*		3048473	0					
ANR	3049856	Identifier	sockTable		3048473	1					
ANR	3049857	Identifier	i		3048473	1					
ANR	3049858	Identifier	iosock		3048473	1					
ANR	3049859	Identifier	get_deadline		3048473	1					
ANR	3049860	ArgumentList			3048473	1					
ANR	3049861	IdentifierDeclStatement	bool sock_timed_out = ( deadline && deadline < now ) ;	3393:5:101243:101295	3048473	2	True				
ANR	3049862	IdentifierDecl	sock_timed_out = ( deadline && deadline < now )		3048473	0					
ANR	3049863	IdentifierDeclType	bool		3048473	0					
ANR	3049864	Identifier	sock_timed_out		3048473	1					
ANR	3049865	AssignmentExpression	sock_timed_out = ( deadline && deadline < now )		3048473	2		=			
ANR	3049866	Identifier	sock_timed_out		3048473	0					
ANR	3049867	AndExpression	deadline && deadline < now		3048473	1		&&			
ANR	3049868	Identifier	deadline		3048473	0					
ANR	3049869	RelationalExpression	deadline < now		3048473	1		<			
ANR	3049870	Identifier	deadline		3048473	0					
ANR	3049871	Identifier	now		3048473	1					
ANR	3049872	IfStatement	if ( ( * sockTable ) [ i ] . is_reverse_connect_pending )		3048473	3					
ANR	3049873	Condition	( * sockTable ) [ i ] . is_reverse_connect_pending	3395:10:101308:101349	3048473	0	True				
ANR	3049874	MemberAccess	( * sockTable ) [ i ] . is_reverse_connect_pending		3048473	0					
ANR	3049875	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049876	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049877	UnaryOperator	*		3048473	0					
ANR	3049878	Identifier	sockTable		3048473	1					
ANR	3049879	Identifier	i		3048473	1					
ANR	3049880	Identifier	is_reverse_connect_pending		3048473	1					
ANR	3049881	CompoundStatement		376:55:12979:12979	3048473	1					
ANR	3049882	ElseStatement	else		3048473	0					
ANR	3049883	IfStatement	if ( ( * sockTable ) [ i ] . is_connect_pending )		3048473	0					
ANR	3049884	Condition	( * sockTable ) [ i ] . is_connect_pending	3398:15:101400:101433	3048473	0	True				
ANR	3049885	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		3048473	0					
ANR	3049886	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049887	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049888	UnaryOperator	*		3048473	0					
ANR	3049889	Identifier	sockTable		3048473	1					
ANR	3049890	Identifier	i		3048473	1					
ANR	3049891	Identifier	is_connect_pending		3048473	1					
ANR	3049892	CompoundStatement		379:52:13063:13063	3048473	1					
ANR	3049893	IfStatement	"if ( selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE ) || selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT ) || sock_timed_out )"		3048473	0					
ANR	3049894	Condition	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE ) || selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT ) || sock_timed_out"	3400:11:101451:101673	3048473	0	True				
ANR	3049895	OrExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE ) || selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT ) || sock_timed_out"		3048473	0		||			
ANR	3049896	CallExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE )"		3048473	0					
ANR	3049897	Callee	selector . fd_ready		3048473	0					
ANR	3049898	MemberAccess	selector . fd_ready		3048473	0					
ANR	3049899	Identifier	selector		3048473	0					
ANR	3049900	Identifier	fd_ready		3048473	1					
ANR	3049901	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	1					
ANR	3049902	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049903	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049904	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049905	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049906	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049907	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049908	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049909	UnaryOperator	*		3048473	0					
ANR	3049910	Identifier	sockTable		3048473	1					
ANR	3049911	Identifier	i		3048473	1					
ANR	3049912	Identifier	iosock		3048473	1					
ANR	3049913	Identifier	get_file_desc		3048473	1					
ANR	3049914	ArgumentList			3048473	1					
ANR	3049915	Argument	Selector :: IO_WRITE		3048473	1					
ANR	3049916	Identifier	Selector :: IO_WRITE		3048473	0					
ANR	3049917	OrExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT ) || sock_timed_out"		3048473	1		||			
ANR	3049918	CallExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT )"		3048473	0					
ANR	3049919	Callee	selector . fd_ready		3048473	0					
ANR	3049920	MemberAccess	selector . fd_ready		3048473	0					
ANR	3049921	Identifier	selector		3048473	0					
ANR	3049922	Identifier	fd_ready		3048473	1					
ANR	3049923	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	1					
ANR	3049924	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049925	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049926	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049927	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049928	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049929	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049930	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049931	UnaryOperator	*		3048473	0					
ANR	3049932	Identifier	sockTable		3048473	1					
ANR	3049933	Identifier	i		3048473	1					
ANR	3049934	Identifier	iosock		3048473	1					
ANR	3049935	Identifier	get_file_desc		3048473	1					
ANR	3049936	ArgumentList			3048473	1					
ANR	3049937	Argument	Selector :: IO_EXCEPT		3048473	1					
ANR	3049938	Identifier	Selector :: IO_EXCEPT		3048473	0					
ANR	3049939	Identifier	sock_timed_out		3048473	1					
ANR	3049940	CompoundStatement		386:6:13309:13309	3048473	1					
ANR	3049941	IfStatement	if ( ( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish ( ) != CEDAR_EWOULDBLOCK )		3048473	0					
ANR	3049942	Condition	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish ( ) != CEDAR_EWOULDBLOCK	3411:12:101893:101980	3048473	0	True				
ANR	3049943	EqualityExpression	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish ( ) != CEDAR_EWOULDBLOCK		3048473	0		!=			
ANR	3049944	CallExpression	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish ( )		3048473	0					
ANR	3049945	Callee	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish		3048473	0					
ANR	3049946	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish		3048473	0					
ANR	3049947	CastExpression	( Sock * ) ( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049948	CastTarget	Sock *		3048473	0					
ANR	3049949	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	1					
ANR	3049950	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049951	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049952	UnaryOperator	*		3048473	0					
ANR	3049953	Identifier	sockTable		3048473	1					
ANR	3049954	Identifier	i		3048473	1					
ANR	3049955	Identifier	iosock		3048473	1					
ANR	3049956	Identifier	do_connect_finish		3048473	1					
ANR	3049957	ArgumentList			3048473	1					
ANR	3049958	Identifier	CEDAR_EWOULDBLOCK		3048473	1					
ANR	3049959	CompoundStatement		394:7:13616:13616	3048473	1					
ANR	3049960	ExpressionStatement	( * sockTable ) [ i ] . call_handler = true	3414:8:102000:102035	3048473	0	True				
ANR	3049961	AssignmentExpression	( * sockTable ) [ i ] . call_handler = true		3048473	0		=			
ANR	3049962	MemberAccess	( * sockTable ) [ i ] . call_handler		3048473	0					
ANR	3049963	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049964	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049965	UnaryOperator	*		3048473	0					
ANR	3049966	Identifier	sockTable		3048473	1					
ANR	3049967	Identifier	i		3048473	1					
ANR	3049968	Identifier	call_handler		3048473	1					
ANR	3049969	Identifier	true		3048473	1					
ANR	3049970	ElseStatement	else		3048473	0					
ANR	3049971	CompoundStatement		398:12:13692:13692	3048473	0					
ANR	3049972	IfStatement	"if ( selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ ) || sock_timed_out )"		3048473	0					
ANR	3049973	Condition	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ ) || sock_timed_out"	3418:11:102079:102195	3048473	0	True				
ANR	3049974	OrExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ ) || sock_timed_out"		3048473	0		||			
ANR	3049975	CallExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		3048473	0					
ANR	3049976	Callee	selector . fd_ready		3048473	0					
ANR	3049977	MemberAccess	selector . fd_ready		3048473	0					
ANR	3049978	Identifier	selector		3048473	0					
ANR	3049979	Identifier	fd_ready		3048473	1					
ANR	3049980	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	1					
ANR	3049981	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049982	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3049983	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049984	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3049985	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3049986	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3049987	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3049988	UnaryOperator	*		3048473	0					
ANR	3049989	Identifier	sockTable		3048473	1					
ANR	3049990	Identifier	i		3048473	1					
ANR	3049991	Identifier	iosock		3048473	1					
ANR	3049992	Identifier	get_file_desc		3048473	1					
ANR	3049993	ArgumentList			3048473	1					
ANR	3049994	Argument	Selector :: IO_READ		3048473	1					
ANR	3049995	Identifier	Selector :: IO_READ		3048473	0					
ANR	3049996	Identifier	sock_timed_out		3048473	1					
ANR	3049997	CompoundStatement		402:6:13831:13831	3048473	1					
ANR	3049998	ExpressionStatement	( * sockTable ) [ i ] . call_handler = true	3422:7:102214:102249	3048473	0	True				
ANR	3049999	AssignmentExpression	( * sockTable ) [ i ] . call_handler = true		3048473	0		=			
ANR	3050000	MemberAccess	( * sockTable ) [ i ] . call_handler		3048473	0					
ANR	3050001	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3050002	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3050003	UnaryOperator	*		3048473	0					
ANR	3050004	Identifier	sockTable		3048473	1					
ANR	3050005	Identifier	i		3048473	1					
ANR	3050006	Identifier	call_handler		3048473	1					
ANR	3050007	Identifier	true		3048473	1					
ANR	3050008	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3428:12:102364:102398	3048473	3	True				
ANR	3050009	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		3048473	0		=			
ANR	3050010	Identifier	runtime		3048473	0					
ANR	3050011	CallExpression	UtcTime :: getTimeDouble ( )		3048473	1					
ANR	3050012	Callee	UtcTime :: getTimeDouble		3048473	0					
ANR	3050013	Identifier	UtcTime :: getTimeDouble		3048473	0					
ANR	3050014	ArgumentList			3048473	1					
ANR	3050015	ExpressionStatement	dc_stats . SocketRuntime += ( runtime - group_runtime )	3429:12:102412:102463	3048473	4	True				
ANR	3050016	AssignmentExpression	dc_stats . SocketRuntime += ( runtime - group_runtime )		3048473	0		+=			
ANR	3050017	MemberAccess	dc_stats . SocketRuntime		3048473	0					
ANR	3050018	Identifier	dc_stats		3048473	0					
ANR	3050019	Identifier	SocketRuntime		3048473	1					
ANR	3050020	AdditiveExpression	runtime - group_runtime		3048473	1		-			
ANR	3050021	Identifier	runtime		3048473	0					
ANR	3050022	Identifier	group_runtime		3048473	1					
ANR	3050023	ExpressionStatement	group_runtime = runtime	3430:12:102477:102500	3048473	5	True				
ANR	3050024	AssignmentExpression	group_runtime = runtime		3048473	0		=			
ANR	3050025	Identifier	group_runtime		3048473	0					
ANR	3050026	Identifier	runtime		3048473	1					
ANR	3050027	ForStatement	for ( i = 0 ; i < nPipe ; i ++ )		3048473	6					
ANR	3050028	ForInit	i = 0 ;	3433:7:102576:102581	3048473	0	True				
ANR	3050029	AssignmentExpression	i = 0		3048473	0		=			
ANR	3050030	Identifier	i		3048473	0					
ANR	3050031	PrimaryExpression	0		3048473	1					
ANR	3050032	Condition	i < nPipe	3433:14:102583:102591	3048473	1	True				
ANR	3050033	RelationalExpression	i < nPipe		3048473	0		<			
ANR	3050034	Identifier	i		3048473	0					
ANR	3050035	Identifier	nPipe		3048473	1					
ANR	3050036	PostIncDecOperationExpression	i ++	3433:25:102594:102596	3048473	2	True				
ANR	3050037	Identifier	i		3048473	0					
ANR	3050038	IncDec	++		3048473	1					
ANR	3050039	CompoundStatement		414:30:14225:14225	3048473	3					
ANR	3050040	IfStatement	if ( ( * pipeTable ) [ i ] . index != - 1 )		3048473	0					
ANR	3050041	Condition	( * pipeTable ) [ i ] . index != - 1	3434:9:102610:102636	3048473	0	True				
ANR	3050042	EqualityExpression	( * pipeTable ) [ i ] . index != - 1		3048473	0		!=			
ANR	3050043	MemberAccess	( * pipeTable ) [ i ] . index		3048473	0					
ANR	3050044	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050045	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050046	UnaryOperator	*		3048473	0					
ANR	3050047	Identifier	pipeTable		3048473	1					
ANR	3050048	Identifier	i		3048473	1					
ANR	3050049	Identifier	index		3048473	1					
ANR	3050050	UnaryOperationExpression	- 1		3048473	1					
ANR	3050051	UnaryOperator	-		3048473	0					
ANR	3050052	PrimaryExpression	1		3048473	1					
ANR	3050053	CompoundStatement		415:39:14266:14266	3048473	1					
ANR	3050054	ExpressionStatement	( * pipeTable ) [ i ] . call_handler = false	3436:5:102718:102754	3048473	0	True				
ANR	3050055	AssignmentExpression	( * pipeTable ) [ i ] . call_handler = false		3048473	0		=			
ANR	3050056	MemberAccess	( * pipeTable ) [ i ] . call_handler		3048473	0					
ANR	3050057	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050058	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050059	UnaryOperator	*		3048473	0					
ANR	3050060	Identifier	pipeTable		3048473	1					
ANR	3050061	Identifier	i		3048473	1					
ANR	3050062	Identifier	call_handler		3048473	1					
ANR	3050063	Identifier	false		3048473	1					
ANR	3050064	ExpressionStatement	ASSERT ( ( * pipeTable ) [ i ] . pentry )	3439:5:102839:102871	3048473	1	True				
ANR	3050065	CallExpression	ASSERT ( ( * pipeTable ) [ i ] . pentry )		3048473	0					
ANR	3050066	Callee	ASSERT		3048473	0					
ANR	3050067	Identifier	ASSERT		3048473	0					
ANR	3050068	ArgumentList	( * pipeTable ) [ i ] . pentry		3048473	1					
ANR	3050069	Argument	( * pipeTable ) [ i ] . pentry		3048473	0					
ANR	3050070	MemberAccess	( * pipeTable ) [ i ] . pentry		3048473	0					
ANR	3050071	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050072	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050073	UnaryOperator	*		3048473	0					
ANR	3050074	Identifier	pipeTable		3048473	1					
ANR	3050075	Identifier	i		3048473	1					
ANR	3050076	Identifier	pentry		3048473	1					
ANR	3050077	IfStatement	"if ( InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> pipeReady ) , 0L ) )"		3048473	2					
ANR	3050078	Condition	"InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> pipeReady ) , 0L )"	3440:9:102882:102941	3048473	0	True				
ANR	3050079	CallExpression	"InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> pipeReady ) , 0L )"		3048473	0					
ANR	3050080	Callee	InterlockedExchange		3048473	0					
ANR	3050081	Identifier	InterlockedExchange		3048473	0					
ANR	3050082	ArgumentList	& ( ( * pipeTable ) [ i ] . pentry -> pipeReady )		3048473	1					
ANR	3050083	Argument	& ( ( * pipeTable ) [ i ] . pentry -> pipeReady )		3048473	0					
ANR	3050084	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . pentry -> pipeReady )		3048473	0					
ANR	3050085	UnaryOperator	&		3048473	0					
ANR	3050086	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeReady		3048473	1					
ANR	3050087	MemberAccess	( * pipeTable ) [ i ] . pentry		3048473	0					
ANR	3050088	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050089	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050090	UnaryOperator	*		3048473	0					
ANR	3050091	Identifier	pipeTable		3048473	1					
ANR	3050092	Identifier	i		3048473	1					
ANR	3050093	Identifier	pentry		3048473	1					
ANR	3050094	Identifier	pipeReady		3048473	1					
ANR	3050095	Argument	0L		3048473	1					
ANR	3050096	PrimaryExpression	0L		3048473	0					
ANR	3050097	CompoundStatement		422:5:14575:14575	3048473	1					
ANR	3050098	ExpressionStatement	( * pipeTable ) [ i ] . call_handler = true	3443:6:103015:103050	3048473	0	True				
ANR	3050099	AssignmentExpression	( * pipeTable ) [ i ] . call_handler = true		3048473	0		=			
ANR	3050100	MemberAccess	( * pipeTable ) [ i ] . call_handler		3048473	0					
ANR	3050101	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050102	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050103	UnaryOperator	*		3048473	0					
ANR	3050104	Identifier	pipeTable		3048473	1					
ANR	3050105	Identifier	i		3048473	1					
ANR	3050106	Identifier	call_handler		3048473	1					
ANR	3050107	Identifier	true		3048473	1					
ANR	3050108	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3462:12:103582:103616	3048473	7	True				
ANR	3050109	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		3048473	0		=			
ANR	3050110	Identifier	runtime		3048473	0					
ANR	3050111	CallExpression	UtcTime :: getTimeDouble ( )		3048473	1					
ANR	3050112	Callee	UtcTime :: getTimeDouble		3048473	0					
ANR	3050113	Identifier	UtcTime :: getTimeDouble		3048473	0					
ANR	3050114	ArgumentList			3048473	1					
ANR	3050115	ForStatement	for ( i = 0 ; i < nPipe ; i ++ )		3048473	8					
ANR	3050116	ForInit	i = 0 ;	3463:7:103625:103630	3048473	0	True				
ANR	3050117	AssignmentExpression	i = 0		3048473	0		=			
ANR	3050118	Identifier	i		3048473	0					
ANR	3050119	PrimaryExpression	0		3048473	1					
ANR	3050120	Condition	i < nPipe	3463:14:103632:103640	3048473	1	True				
ANR	3050121	RelationalExpression	i < nPipe		3048473	0		<			
ANR	3050122	Identifier	i		3048473	0					
ANR	3050123	Identifier	nPipe		3048473	1					
ANR	3050124	PostIncDecOperationExpression	i ++	3463:25:103643:103645	3048473	2	True				
ANR	3050125	Identifier	i		3048473	0					
ANR	3050126	IncDec	++		3048473	1					
ANR	3050127	CompoundStatement		444:30:15274:15274	3048473	3					
ANR	3050128	IfStatement	if ( ( * pipeTable ) [ i ] . index != - 1 )		3048473	0					
ANR	3050129	Condition	( * pipeTable ) [ i ] . index != - 1	3464:9:103659:103685	3048473	0	True				
ANR	3050130	EqualityExpression	( * pipeTable ) [ i ] . index != - 1		3048473	0		!=			
ANR	3050131	MemberAccess	( * pipeTable ) [ i ] . index		3048473	0					
ANR	3050132	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050133	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050134	UnaryOperator	*		3048473	0					
ANR	3050135	Identifier	pipeTable		3048473	1					
ANR	3050136	Identifier	i		3048473	1					
ANR	3050137	Identifier	index		3048473	1					
ANR	3050138	UnaryOperationExpression	- 1		3048473	1					
ANR	3050139	UnaryOperator	-		3048473	0					
ANR	3050140	PrimaryExpression	1		3048473	1					
ANR	3050141	CompoundStatement		445:39:15315:15315	3048473	1					
ANR	3050142	IfStatement	if ( ( * pipeTable ) [ i ] . call_handler )		3048473	0					
ANR	3050143	Condition	( * pipeTable ) [ i ] . call_handler	3466:10:103725:103752	3048473	0	True				
ANR	3050144	MemberAccess	( * pipeTable ) [ i ] . call_handler		3048473	0					
ANR	3050145	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050146	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050147	UnaryOperator	*		3048473	0					
ANR	3050148	Identifier	pipeTable		3048473	1					
ANR	3050149	Identifier	i		3048473	1					
ANR	3050150	Identifier	call_handler		3048473	1					
ANR	3050151	CompoundStatement		494:6:17052:17108	3048473	1					
ANR	3050152	ExpressionStatement	( * pipeTable ) [ i ] . call_handler = false	3468:6:103765:103801	3048473	0	True				
ANR	3050153	AssignmentExpression	( * pipeTable ) [ i ] . call_handler = false		3048473	0		=			
ANR	3050154	MemberAccess	( * pipeTable ) [ i ] . call_handler		3048473	0					
ANR	3050155	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050156	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050157	UnaryOperator	*		3048473	0					
ANR	3050158	Identifier	pipeTable		3048473	1					
ANR	3050159	Identifier	i		3048473	1					
ANR	3050160	Identifier	call_handler		3048473	1					
ANR	3050161	Identifier	false		3048473	1					
ANR	3050162	ExpressionStatement	dc_stats . PipeMessages += 1	3470:24:103828:103854	3048473	1	True				
ANR	3050163	AssignmentExpression	dc_stats . PipeMessages += 1		3048473	0		+=			
ANR	3050164	MemberAccess	dc_stats . PipeMessages		3048473	0					
ANR	3050165	Identifier	dc_stats		3048473	0					
ANR	3050166	Identifier	PipeMessages		3048473	1					
ANR	3050167	PrimaryExpression	1		3048473	1					
ANR	3050168	IdentifierDeclStatement	PidEntry * saved_pentry = ( * pipeTable ) [ i ] . pentry ;	3474:6:103982:104029	3048473	2	True				
ANR	3050169	IdentifierDecl	* saved_pentry = ( * pipeTable ) [ i ] . pentry		3048473	0					
ANR	3050170	IdentifierDeclType	PidEntry *		3048473	0					
ANR	3050171	Identifier	saved_pentry		3048473	1					
ANR	3050172	AssignmentExpression	* saved_pentry = ( * pipeTable ) [ i ] . pentry		3048473	2		=			
ANR	3050173	Identifier	saved_pentry		3048473	0					
ANR	3050174	MemberAccess	( * pipeTable ) [ i ] . pentry		3048473	1					
ANR	3050175	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050176	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050177	UnaryOperator	*		3048473	0					
ANR	3050178	Identifier	pipeTable		3048473	1					
ANR	3050179	Identifier	i		3048473	1					
ANR	3050180	Identifier	pentry		3048473	1					
ANR	3050181	IfStatement	if ( recheck_status || saved_pentry )		3048473	3					
ANR	3050182	Condition	recheck_status || saved_pentry	3476:11:104043:104072	3048473	0	True				
ANR	3050183	OrExpression	recheck_status || saved_pentry		3048473	0		||			
ANR	3050184	Identifier	recheck_status		3048473	0					
ANR	3050185	Identifier	saved_pentry		3048473	1					
ANR	3050186	CompoundStatement		457:44:15702:15702	3048473	1					
ANR	3050187	IfStatement	if ( ! saved_pentry -> pipeEnd -> io_ready ( ) )		3048473	0					
ANR	3050188	Condition	! saved_pentry -> pipeEnd -> io_ready ( )	3490:11:104793:104826	3048473	0	True				
ANR	3050189	UnaryOperationExpression	! saved_pentry -> pipeEnd -> io_ready ( )		3048473	0					
ANR	3050190	UnaryOperator	!		3048473	0					
ANR	3050191	CallExpression	saved_pentry -> pipeEnd -> io_ready ( )		3048473	1					
ANR	3050192	Callee	saved_pentry -> pipeEnd -> io_ready		3048473	0					
ANR	3050193	PtrMemberAccess	saved_pentry -> pipeEnd -> io_ready		3048473	0					
ANR	3050194	PtrMemberAccess	saved_pentry -> pipeEnd		3048473	0					
ANR	3050195	Identifier	saved_pentry		3048473	0					
ANR	3050196	Identifier	pipeEnd		3048473	1					
ANR	3050197	Identifier	io_ready		3048473	1					
ANR	3050198	ArgumentList			3048473	1					
ANR	3050199	CompoundStatement		471:47:16455:16455	3048473	1					
ANR	3050200	ExpressionStatement	WatchPid ( saved_pentry )	3492:8:104900:104922	3048473	0	True				
ANR	3050201	CallExpression	WatchPid ( saved_pentry )		3048473	0					
ANR	3050202	Callee	WatchPid		3048473	0					
ANR	3050203	Identifier	WatchPid		3048473	0					
ANR	3050204	ArgumentList	saved_pentry		3048473	1					
ANR	3050205	Argument	saved_pentry		3048473	0					
ANR	3050206	Identifier	saved_pentry		3048473	0					
ANR	3050207	ContinueStatement	continue ;	3493:8:104932:104940	3048473	1	True				
ANR	3050208	ExpressionStatement	( * pipeTable ) [ i ] . in_handler = true	3510:6:105361:105394	3048473	4	True				
ANR	3050209	AssignmentExpression	( * pipeTable ) [ i ] . in_handler = true		3048473	0		=			
ANR	3050210	MemberAccess	( * pipeTable ) [ i ] . in_handler		3048473	0					
ANR	3050211	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050212	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050213	UnaryOperator	*		3048473	0					
ANR	3050214	Identifier	pipeTable		3048473	1					
ANR	3050215	Identifier	i		3048473	1					
ANR	3050216	Identifier	in_handler		3048473	1					
ANR	3050217	Identifier	true		3048473	1					
ANR	3050218	IdentifierDeclStatement	int pipe_end = ( * pipeTable ) [ i ] . index + PIPE_INDEX_OFFSET ;	3513:6:105426:105482	3048473	5	True				
ANR	3050219	IdentifierDecl	pipe_end = ( * pipeTable ) [ i ] . index + PIPE_INDEX_OFFSET		3048473	0					
ANR	3050220	IdentifierDeclType	int		3048473	0					
ANR	3050221	Identifier	pipe_end		3048473	1					
ANR	3050222	AssignmentExpression	pipe_end = ( * pipeTable ) [ i ] . index + PIPE_INDEX_OFFSET		3048473	2		=			
ANR	3050223	Identifier	pipe_end		3048473	0					
ANR	3050224	AdditiveExpression	( * pipeTable ) [ i ] . index + PIPE_INDEX_OFFSET		3048473	1		+			
ANR	3050225	MemberAccess	( * pipeTable ) [ i ] . index		3048473	0					
ANR	3050226	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050227	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050228	UnaryOperator	*		3048473	0					
ANR	3050229	Identifier	pipeTable		3048473	1					
ANR	3050230	Identifier	i		3048473	1					
ANR	3050231	Identifier	index		3048473	1					
ANR	3050232	Identifier	PIPE_INDEX_OFFSET		3048473	1					
ANR	3050233	ExpressionStatement	"dprintf ( D_COMMAND , ""Calling pipe Handler <%s> for Pipe end=%d <%s>\\n"" , ( * pipeTable ) [ i ] . handler_descrip , pipe_end , ( * pipeTable ) [ i ] . pipe_descrip )"	3514:6:105490:105659	3048473	6	True				
ANR	3050234	CallExpression	"dprintf ( D_COMMAND , ""Calling pipe Handler <%s> for Pipe end=%d <%s>\\n"" , ( * pipeTable ) [ i ] . handler_descrip , pipe_end , ( * pipeTable ) [ i ] . pipe_descrip )"		3048473	0					
ANR	3050235	Callee	dprintf		3048473	0					
ANR	3050236	Identifier	dprintf		3048473	0					
ANR	3050237	ArgumentList	D_COMMAND		3048473	1					
ANR	3050238	Argument	D_COMMAND		3048473	0					
ANR	3050239	Identifier	D_COMMAND		3048473	0					
ANR	3050240	Argument	"""Calling pipe Handler <%s> for Pipe end=%d <%s>\\n"""		3048473	1					
ANR	3050241	PrimaryExpression	"""Calling pipe Handler <%s> for Pipe end=%d <%s>\\n"""		3048473	0					
ANR	3050242	Argument	( * pipeTable ) [ i ] . handler_descrip		3048473	2					
ANR	3050243	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		3048473	0					
ANR	3050244	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050245	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050246	UnaryOperator	*		3048473	0					
ANR	3050247	Identifier	pipeTable		3048473	1					
ANR	3050248	Identifier	i		3048473	1					
ANR	3050249	Identifier	handler_descrip		3048473	1					
ANR	3050250	Argument	pipe_end		3048473	3					
ANR	3050251	Identifier	pipe_end		3048473	0					
ANR	3050252	Argument	( * pipeTable ) [ i ] . pipe_descrip		3048473	4					
ANR	3050253	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		3048473	0					
ANR	3050254	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050255	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050256	UnaryOperator	*		3048473	0					
ANR	3050257	Identifier	pipeTable		3048473	1					
ANR	3050258	Identifier	i		3048473	1					
ANR	3050259	Identifier	pipe_descrip		3048473	1					
ANR	3050260	ExpressionStatement	curr_dataptr = & ( ( * pipeTable ) [ i ] . data_ptr )	3520:6:105714:105757	3048473	7	True				
ANR	3050261	AssignmentExpression	curr_dataptr = & ( ( * pipeTable ) [ i ] . data_ptr )		3048473	0		=			
ANR	3050262	Identifier	curr_dataptr		3048473	0					
ANR	3050263	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . data_ptr )		3048473	1					
ANR	3050264	UnaryOperator	&		3048473	0					
ANR	3050265	MemberAccess	( * pipeTable ) [ i ] . data_ptr		3048473	1					
ANR	3050266	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050267	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050268	UnaryOperator	*		3048473	0					
ANR	3050269	Identifier	pipeTable		3048473	1					
ANR	3050270	Identifier	i		3048473	1					
ANR	3050271	Identifier	data_ptr		3048473	1					
ANR	3050272	ExpressionStatement	recheck_status = true	3521:6:105765:105786	3048473	8	True				
ANR	3050273	AssignmentExpression	recheck_status = true		3048473	0		=			
ANR	3050274	Identifier	recheck_status		3048473	0					
ANR	3050275	Identifier	true		3048473	1					
ANR	3050276	IfStatement	if ( ( * pipeTable ) [ i ] . handler )		3048473	9					
ANR	3050277	Condition	( * pipeTable ) [ i ] . handler	3522:11:105799:105821	3048473	0	True				
ANR	3050278	MemberAccess	( * pipeTable ) [ i ] . handler		3048473	0					
ANR	3050279	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050280	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050281	UnaryOperator	*		3048473	0					
ANR	3050282	Identifier	pipeTable		3048473	1					
ANR	3050283	Identifier	i		3048473	1					
ANR	3050284	Identifier	handler		3048473	1					
ANR	3050285	ExpressionStatement	"( * ( ( * pipeTable ) [ i ] . handler ) ) ( ( * pipeTable ) [ i ] . service , pipe_end )"	3524:7:105854:105919	3048473	1	True				
ANR	3050286	CallExpression	"( * ( ( * pipeTable ) [ i ] . handler ) ) ( ( * pipeTable ) [ i ] . service , pipe_end )"		3048473	0					
ANR	3050287	Callee	* ( ( * pipeTable ) [ i ] . handler )		3048473	0					
ANR	3050288	UnaryOperationExpression	* ( ( * pipeTable ) [ i ] . handler )		3048473	0					
ANR	3050289	UnaryOperator	*		3048473	0					
ANR	3050290	MemberAccess	( * pipeTable ) [ i ] . handler		3048473	1					
ANR	3050291	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050292	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050293	UnaryOperator	*		3048473	0					
ANR	3050294	Identifier	pipeTable		3048473	1					
ANR	3050295	Identifier	i		3048473	1					
ANR	3050296	Identifier	handler		3048473	1					
ANR	3050297	ArgumentList	( * pipeTable ) [ i ] . service		3048473	1					
ANR	3050298	Argument	( * pipeTable ) [ i ] . service		3048473	0					
ANR	3050299	MemberAccess	( * pipeTable ) [ i ] . service		3048473	0					
ANR	3050300	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050301	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050302	UnaryOperator	*		3048473	0					
ANR	3050303	Identifier	pipeTable		3048473	1					
ANR	3050304	Identifier	i		3048473	1					
ANR	3050305	Identifier	service		3048473	1					
ANR	3050306	Argument	pipe_end		3048473	1					
ANR	3050307	Identifier	pipe_end		3048473	0					
ANR	3050308	ElseStatement	else		3048473	0					
ANR	3050309	IfStatement	if ( ( * pipeTable ) [ i ] . handlercpp )		3048473	0					
ANR	3050310	Condition	( * pipeTable ) [ i ] . handlercpp	3526:11:105943:105968	3048473	0	True				
ANR	3050311	MemberAccess	( * pipeTable ) [ i ] . handlercpp		3048473	0					
ANR	3050312	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050313	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050314	UnaryOperator	*		3048473	0					
ANR	3050315	Identifier	pipeTable		3048473	1					
ANR	3050316	Identifier	i		3048473	1					
ANR	3050317	Identifier	handlercpp		3048473	1					
ANR	3050318	Statement	(	3528:7:106003:106003	3048473	1	True				
ANR	3050319	ElseStatement	else		3048473	0					
ANR	3050320	CompoundStatement		511:6:17715:17715	3048473	0					
ANR	3050321	ExpressionStatement	"EXCEPT ( ""No pipe handler callback"" )"	3532:7:106130:106164	3048473	0	True				
ANR	3050322	CallExpression	"EXCEPT ( ""No pipe handler callback"" )"		3048473	0					
ANR	3050323	Callee	EXCEPT		3048473	0					
ANR	3050324	Identifier	EXCEPT		3048473	0					
ANR	3050325	ArgumentList	"""No pipe handler callback"""		3048473	1					
ANR	3050326	Argument	"""No pipe handler callback"""		3048473	0					
ANR	3050327	PrimaryExpression	"""No pipe handler callback"""		3048473	0					
ANR	3050328	Statement	(	3528:8:106004:106004	3048473	10	True				
ANR	3050329	Statement	*	3528:9:106005:106005	3048473	11	True				
ANR	3050330	Statement	pipeTable	3528:10:106006:106014	3048473	12	True				
ANR	3050331	Statement	)	3528:19:106015:106015	3048473	13	True				
ANR	3050332	Statement	[	3528:20:106016:106016	3048473	14	True				
ANR	3050333	Statement	i	3528:21:106017:106017	3048473	15	True				
ANR	3050334	Statement	]	3528:22:106018:106018	3048473	16	True				
ANR	3050335	Statement	.	3528:23:106019:106019	3048473	17	True				
ANR	3050336	Statement	service	3528:24:106020:106026	3048473	18	True				
ANR	3050337	Statement	->*	3528:31:106027:106029	3048473	19	True				
ANR	3050338	Statement	(	3528:34:106030:106030	3048473	20	True				
ANR	3050339	Statement	(	3528:36:106032:106032	3048473	21	True				
ANR	3050340	Statement	*	3528:37:106033:106033	3048473	22	True				
ANR	3050341	Statement	pipeTable	3528:38:106034:106042	3048473	23	True				
ANR	3050342	Statement	)	3528:47:106043:106043	3048473	24	True				
ANR	3050343	Statement	[	3528:48:106044:106044	3048473	25	True				
ANR	3050344	Statement	i	3528:49:106045:106045	3048473	26	True				
ANR	3050345	Statement	]	3528:50:106046:106046	3048473	27	True				
ANR	3050346	Statement	.	3528:51:106047:106047	3048473	28	True				
ANR	3050347	Statement	handlercpp	3528:52:106048:106057	3048473	29	True				
ANR	3050348	Statement	)	3528:62:106058:106058	3048473	30	True				
ANR	3050349	Statement	)	3528:63:106059:106059	3048473	31	True				
ANR	3050350	ExpressionStatement	pipe_end	3528:64:106060:106070	3048473	32	True				
ANR	3050351	Identifier	pipe_end		3048473	0					
ANR	3050352	ExpressionStatement	"dprintf ( D_COMMAND , ""Return from pipe Handler\\n"" )"	3535:6:106181:106228	3048473	33	True				
ANR	3050353	CallExpression	"dprintf ( D_COMMAND , ""Return from pipe Handler\\n"" )"		3048473	0					
ANR	3050354	Callee	dprintf		3048473	0					
ANR	3050355	Identifier	dprintf		3048473	0					
ANR	3050356	ArgumentList	D_COMMAND		3048473	1					
ANR	3050357	Argument	D_COMMAND		3048473	0					
ANR	3050358	Identifier	D_COMMAND		3048473	0					
ANR	3050359	Argument	"""Return from pipe Handler\\n"""		3048473	1					
ANR	3050360	PrimaryExpression	"""Return from pipe Handler\\n"""		3048473	0					
ANR	3050361	ExpressionStatement	( * pipeTable ) [ i ] . in_handler = false	3537:6:106237:106271	3048473	34	True				
ANR	3050362	AssignmentExpression	( * pipeTable ) [ i ] . in_handler = false		3048473	0		=			
ANR	3050363	MemberAccess	( * pipeTable ) [ i ] . in_handler		3048473	0					
ANR	3050364	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050365	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050366	UnaryOperator	*		3048473	0					
ANR	3050367	Identifier	pipeTable		3048473	1					
ANR	3050368	Identifier	i		3048473	1					
ANR	3050369	Identifier	in_handler		3048473	1					
ANR	3050370	Identifier	false		3048473	1					
ANR	3050371	ExpressionStatement	CheckPrivState ( )	3540:6:106329:106345	3048473	35	True				
ANR	3050372	CallExpression	CheckPrivState ( )		3048473	0					
ANR	3050373	Callee	CheckPrivState		3048473	0					
ANR	3050374	Identifier	CheckPrivState		3048473	0					
ANR	3050375	ArgumentList			3048473	1					
ANR	3050376	ExpressionStatement	curr_dataptr = NULL	3543:6:106382:106401	3048473	36	True				
ANR	3050377	AssignmentExpression	curr_dataptr = NULL		3048473	0		=			
ANR	3050378	Identifier	curr_dataptr		3048473	0					
ANR	3050379	Identifier	NULL		3048473	1					
ANR	3050380	IfStatement	if ( saved_pentry -> pipeEnd )		3048473	37					
ANR	3050381	Condition	saved_pentry -> pipeEnd	3550:11:106624:106644	3048473	0	True				
ANR	3050382	PtrMemberAccess	saved_pentry -> pipeEnd		3048473	0					
ANR	3050383	Identifier	saved_pentry		3048473	0					
ANR	3050384	Identifier	pipeEnd		3048473	1					
ANR	3050385	CompoundStatement		531:35:18274:18274	3048473	1					
ANR	3050386	ExpressionStatement	WatchPid ( saved_pentry )	3551:7:106657:106679	3048473	0	True				
ANR	3050387	CallExpression	WatchPid ( saved_pentry )		3048473	0					
ANR	3050388	Callee	WatchPid		3048473	0					
ANR	3050389	Identifier	WatchPid		3048473	0					
ANR	3050390	ArgumentList	saved_pentry		3048473	1					
ANR	3050391	Argument	saved_pentry		3048473	0					
ANR	3050392	Identifier	saved_pentry		3048473	0					
ANR	3050393	ExpressionStatement	"runtime = dc_stats . AddRuntime ( ( * pipeTable ) [ i ] . handler_descrip , runtime )"	3556:24:106786:106857	3048473	38	True				
ANR	3050394	AssignmentExpression	"runtime = dc_stats . AddRuntime ( ( * pipeTable ) [ i ] . handler_descrip , runtime )"		3048473	0		=			
ANR	3050395	Identifier	runtime		3048473	0					
ANR	3050396	CallExpression	"dc_stats . AddRuntime ( ( * pipeTable ) [ i ] . handler_descrip , runtime )"		3048473	1					
ANR	3050397	Callee	dc_stats . AddRuntime		3048473	0					
ANR	3050398	MemberAccess	dc_stats . AddRuntime		3048473	0					
ANR	3050399	Identifier	dc_stats		3048473	0					
ANR	3050400	Identifier	AddRuntime		3048473	1					
ANR	3050401	ArgumentList	( * pipeTable ) [ i ] . handler_descrip		3048473	1					
ANR	3050402	Argument	( * pipeTable ) [ i ] . handler_descrip		3048473	0					
ANR	3050403	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		3048473	0					
ANR	3050404	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050405	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050406	UnaryOperator	*		3048473	0					
ANR	3050407	Identifier	pipeTable		3048473	1					
ANR	3050408	Identifier	i		3048473	1					
ANR	3050409	Identifier	handler_descrip		3048473	1					
ANR	3050410	Argument	runtime		3048473	1					
ANR	3050411	Identifier	runtime		3048473	0					
ANR	3050412	IfStatement	if ( ( * pipeTable ) [ i ] . call_handler == true )		3048473	39					
ANR	3050413	Condition	( * pipeTable ) [ i ] . call_handler == true	3558:11:106871:106906	3048473	0	True				
ANR	3050414	EqualityExpression	( * pipeTable ) [ i ] . call_handler == true		3048473	0		==			
ANR	3050415	MemberAccess	( * pipeTable ) [ i ] . call_handler		3048473	0					
ANR	3050416	ArrayIndexing	( * pipeTable ) [ i ]		3048473	0					
ANR	3050417	UnaryOperationExpression	* pipeTable		3048473	0					
ANR	3050418	UnaryOperator	*		3048473	0					
ANR	3050419	Identifier	pipeTable		3048473	1					
ANR	3050420	Identifier	i		3048473	1					
ANR	3050421	Identifier	call_handler		3048473	1					
ANR	3050422	Identifier	true		3048473	1					
ANR	3050423	CompoundStatement		539:50:18536:18536	3048473	1					
ANR	3050424	ExpressionStatement	i --	3563:7:107141:107144	3048473	0	True				
ANR	3050425	PostIncDecOperationExpression	i --		3048473	0					
ANR	3050426	Identifier	i		3048473	0					
ANR	3050427	IncDec	--		3048473	1					
ANR	3050428	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3571:12:107298:107332	3048473	9	True				
ANR	3050429	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		3048473	0		=			
ANR	3050430	Identifier	runtime		3048473	0					
ANR	3050431	CallExpression	UtcTime :: getTimeDouble ( )		3048473	1					
ANR	3050432	Callee	UtcTime :: getTimeDouble		3048473	0					
ANR	3050433	Identifier	UtcTime :: getTimeDouble		3048473	0					
ANR	3050434	ArgumentList			3048473	1					
ANR	3050435	ExpressionStatement	dc_stats . PipeRuntime += ( runtime - group_runtime )	3572:12:107346:107395	3048473	10	True				
ANR	3050436	AssignmentExpression	dc_stats . PipeRuntime += ( runtime - group_runtime )		3048473	0		+=			
ANR	3050437	MemberAccess	dc_stats . PipeRuntime		3048473	0					
ANR	3050438	Identifier	dc_stats		3048473	0					
ANR	3050439	Identifier	PipeRuntime		3048473	1					
ANR	3050440	AdditiveExpression	runtime - group_runtime		3048473	1		-			
ANR	3050441	Identifier	runtime		3048473	0					
ANR	3050442	Identifier	group_runtime		3048473	1					
ANR	3050443	ExpressionStatement	group_runtime = runtime	3573:12:107409:107432	3048473	11	True				
ANR	3050444	AssignmentExpression	group_runtime = runtime		3048473	0		=			
ANR	3050445	Identifier	group_runtime		3048473	0					
ANR	3050446	Identifier	runtime		3048473	1					
ANR	3050447	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		3048473	12					
ANR	3050448	ForInit	i = 0 ;	3576:7:107513:107518	3048473	0	True				
ANR	3050449	AssignmentExpression	i = 0		3048473	0		=			
ANR	3050450	Identifier	i		3048473	0					
ANR	3050451	PrimaryExpression	0		3048473	1					
ANR	3050452	Condition	i < nSock	3576:14:107520:107528	3048473	1	True				
ANR	3050453	RelationalExpression	i < nSock		3048473	0		<			
ANR	3050454	Identifier	i		3048473	0					
ANR	3050455	Identifier	nSock		3048473	1					
ANR	3050456	PostIncDecOperationExpression	i ++	3576:25:107531:107533	3048473	2	True				
ANR	3050457	Identifier	i		3048473	0					
ANR	3050458	IncDec	++		3048473	1					
ANR	3050459	CompoundStatement		557:30:19162:19162	3048473	3					
ANR	3050460	IfStatement	if ( ( * sockTable ) [ i ] . iosock )		3048473	0					
ANR	3050461	Condition	( * sockTable ) [ i ] . iosock	3577:9:107547:107568	3048473	0	True				
ANR	3050462	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3050463	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3050464	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3050465	UnaryOperator	*		3048473	0					
ANR	3050466	Identifier	sockTable		3048473	1					
ANR	3050467	Identifier	i		3048473	1					
ANR	3050468	Identifier	iosock		3048473	1					
ANR	3050469	CompoundStatement		558:34:19198:19198	3048473	1					
ANR	3050470	IfStatement	if ( ( * sockTable ) [ i ] . call_handler )		3048473	0					
ANR	3050471	Condition	( * sockTable ) [ i ] . call_handler	3579:10:107608:107635	3048473	0	True				
ANR	3050472	MemberAccess	( * sockTable ) [ i ] . call_handler		3048473	0					
ANR	3050473	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3050474	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3050475	UnaryOperator	*		3048473	0					
ANR	3050476	Identifier	sockTable		3048473	1					
ANR	3050477	Identifier	i		3048473	1					
ANR	3050478	Identifier	call_handler		3048473	1					
ANR	3050479	CompoundStatement		560:41:19265:19265	3048473	1					
ANR	3050480	ExpressionStatement	( * sockTable ) [ i ] . call_handler = false	3581:6:107648:107684	3048473	0	True				
ANR	3050481	AssignmentExpression	( * sockTable ) [ i ] . call_handler = false		3048473	0		=			
ANR	3050482	MemberAccess	( * sockTable ) [ i ] . call_handler		3048473	0					
ANR	3050483	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3050484	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3050485	UnaryOperator	*		3048473	0					
ANR	3050486	Identifier	sockTable		3048473	1					
ANR	3050487	Identifier	i		3048473	1					
ANR	3050488	Identifier	call_handler		3048473	1					
ANR	3050489	Identifier	false		3048473	1					
ANR	3050490	ExpressionStatement	dc_stats . SockMessages += 1	3583:24:107711:107737	3048473	1	True				
ANR	3050491	AssignmentExpression	dc_stats . SockMessages += 1		3048473	0		+=			
ANR	3050492	MemberAccess	dc_stats . SockMessages		3048473	0					
ANR	3050493	Identifier	dc_stats		3048473	0					
ANR	3050494	Identifier	SockMessages		3048473	1					
ANR	3050495	PrimaryExpression	1		3048473	1					
ANR	3050496	IfStatement	if ( recheck_status && ( ( * sockTable ) [ i ] . is_connect_pending == false ) )		3048473	2					
ANR	3050497	Condition	recheck_status && ( ( * sockTable ) [ i ] . is_connect_pending == false )	3585:11:107751:107821	3048473	0	True				
ANR	3050498	AndExpression	recheck_status && ( ( * sockTable ) [ i ] . is_connect_pending == false )		3048473	0		&&			
ANR	3050499	Identifier	recheck_status		3048473	0					
ANR	3050500	EqualityExpression	( * sockTable ) [ i ] . is_connect_pending == false		3048473	1		==			
ANR	3050501	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		3048473	0					
ANR	3050502	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3050503	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3050504	UnaryOperator	*		3048473	0					
ANR	3050505	Identifier	sockTable		3048473	1					
ANR	3050506	Identifier	i		3048473	1					
ANR	3050507	Identifier	is_connect_pending		3048473	1					
ANR	3050508	Identifier	false		3048473	1					
ANR	3050509	CompoundStatement		568:6:19457:19457	3048473	1					
ANR	3050510	ExpressionStatement	selector . reset ( )	3593:7:108136:108152	3048473	0	True				
ANR	3050511	CallExpression	selector . reset ( )		3048473	0					
ANR	3050512	Callee	selector . reset		3048473	0					
ANR	3050513	MemberAccess	selector . reset		3048473	0					
ANR	3050514	Identifier	selector		3048473	0					
ANR	3050515	Identifier	reset		3048473	1					
ANR	3050516	ArgumentList			3048473	1					
ANR	3050517	ExpressionStatement	selector . set_timeout ( 0 )	3594:7:108161:108186	3048473	1	True				
ANR	3050518	CallExpression	selector . set_timeout ( 0 )		3048473	0					
ANR	3050519	Callee	selector . set_timeout		3048473	0					
ANR	3050520	MemberAccess	selector . set_timeout		3048473	0					
ANR	3050521	Identifier	selector		3048473	0					
ANR	3050522	Identifier	set_timeout		3048473	1					
ANR	3050523	ArgumentList	0		3048473	1					
ANR	3050524	Argument	0		3048473	0					
ANR	3050525	PrimaryExpression	0		3048473	0					
ANR	3050526	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"	3595:7:108220:108309	3048473	2	True				
ANR	3050527	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		3048473	0					
ANR	3050528	Callee	selector . add_fd		3048473	0					
ANR	3050529	MemberAccess	selector . add_fd		3048473	0					
ANR	3050530	Identifier	selector		3048473	0					
ANR	3050531	Identifier	add_fd		3048473	1					
ANR	3050532	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	1					
ANR	3050533	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3050534	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3048473	0					
ANR	3050535	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3050536	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473	0					
ANR	3050537	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3050538	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3050539	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3050540	UnaryOperator	*		3048473	0					
ANR	3050541	Identifier	sockTable		3048473	1					
ANR	3050542	Identifier	i		3048473	1					
ANR	3050543	Identifier	iosock		3048473	1					
ANR	3050544	Identifier	get_file_desc		3048473	1					
ANR	3050545	ArgumentList			3048473	1					
ANR	3050546	Argument	Selector :: IO_READ		3048473	1					
ANR	3050547	Identifier	Selector :: IO_READ		3048473	0					
ANR	3050548	ExpressionStatement	selector . execute ( )	3598:7:108319:108337	3048473	3	True				
ANR	3050549	CallExpression	selector . execute ( )		3048473	0					
ANR	3050550	Callee	selector . execute		3048473	0					
ANR	3050551	MemberAccess	selector . execute		3048473	0					
ANR	3050552	Identifier	selector		3048473	0					
ANR	3050553	Identifier	execute		3048473	1					
ANR	3050554	ArgumentList			3048473	1					
ANR	3050555	IfStatement	if ( selector . timed_out ( ) )		3048473	4					
ANR	3050556	Condition	selector . timed_out ( )	3599:12:108351:108370	3048473	0	True				
ANR	3050557	CallExpression	selector . timed_out ( )		3048473	0					
ANR	3050558	Callee	selector . timed_out		3048473	0					
ANR	3050559	MemberAccess	selector . timed_out		3048473	0					
ANR	3050560	Identifier	selector		3048473	0					
ANR	3050561	Identifier	timed_out		3048473	1					
ANR	3050562	ArgumentList			3048473	1					
ANR	3050563	CompoundStatement		580:35:20000:20000	3048473	1					
ANR	3050564	ContinueStatement	continue ;	3601:8:108436:108444	3048473	0	True				
ANR	3050565	IfStatement	if ( ( * sockTable ) [ i ] . iosock -> type ( ) == Stream :: safe_sock )		3048473	3					
ANR	3050566	Condition	( * sockTable ) [ i ] . iosock -> type ( ) == Stream :: safe_sock	3610:11:108730:108780	3048473	0	True				
ANR	3050567	EqualityExpression	( * sockTable ) [ i ] . iosock -> type ( ) == Stream :: safe_sock		3048473	0		==			
ANR	3050568	CallExpression	( * sockTable ) [ i ] . iosock -> type ( )		3048473	0					
ANR	3050569	Callee	( * sockTable ) [ i ] . iosock -> type		3048473	0					
ANR	3050570	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> type		3048473	0					
ANR	3050571	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3050572	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3050573	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3050574	UnaryOperator	*		3048473	0					
ANR	3050575	Identifier	sockTable		3048473	1					
ANR	3050576	Identifier	i		3048473	1					
ANR	3050577	Identifier	iosock		3048473	1					
ANR	3050578	Identifier	type		3048473	1					
ANR	3050579	ArgumentList			3048473	1					
ANR	3050580	Identifier	Stream :: safe_sock		3048473	1					
ANR	3050581	CompoundStatement		593:7:20425:20474	3048473	1					
ANR	3050582	IdentifierDeclStatement	SafeSock * ss = ( SafeSock * ) ( * sockTable ) [ i ] . iosock ;	3612:7:108799:108848	3048473	0	True				
ANR	3050583	IdentifierDecl	* ss = ( SafeSock * ) ( * sockTable ) [ i ] . iosock		3048473	0					
ANR	3050584	IdentifierDeclType	SafeSock *		3048473	0					
ANR	3050585	Identifier	ss		3048473	1					
ANR	3050586	AssignmentExpression	* ss = ( SafeSock * ) ( * sockTable ) [ i ] . iosock		3048473	2		=			
ANR	3050587	Identifier	ss		3048473	0					
ANR	3050588	CastExpression	( SafeSock * ) ( * sockTable ) [ i ] . iosock		3048473	1					
ANR	3050589	CastTarget	SafeSock *		3048473	0					
ANR	3050590	MemberAccess	( * sockTable ) [ i ] . iosock		3048473	1					
ANR	3050591	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3050592	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3050593	UnaryOperator	*		3048473	0					
ANR	3050594	Identifier	sockTable		3048473	1					
ANR	3050595	Identifier	i		3048473	1					
ANR	3050596	Identifier	iosock		3048473	1					
ANR	3050597	IfStatement	if ( ! ( ss -> handle_incoming_packet ( ) ) )		3048473	1					
ANR	3050598	Condition	! ( ss -> handle_incoming_packet ( ) )	3616:12:109025:109055	3048473	0	True				
ANR	3050599	UnaryOperationExpression	! ( ss -> handle_incoming_packet ( ) )		3048473	0					
ANR	3050600	UnaryOperator	!		3048473	0					
ANR	3050601	CallExpression	ss -> handle_incoming_packet ( )		3048473	1					
ANR	3050602	Callee	ss -> handle_incoming_packet		3048473	0					
ANR	3050603	PtrMemberAccess	ss -> handle_incoming_packet		3048473	0					
ANR	3050604	Identifier	ss		3048473	0					
ANR	3050605	Identifier	handle_incoming_packet		3048473	1					
ANR	3050606	ArgumentList			3048473	1					
ANR	3050607	CompoundStatement		597:46:20685:20685	3048473	1					
ANR	3050608	ContinueStatement	continue ;	3620:8:109214:109222	3048473	0	True				
ANR	3050609	ExpressionStatement	recheck_status = true	3624:6:109248:109269	3048473	4	True				
ANR	3050610	AssignmentExpression	recheck_status = true		3048473	0		=			
ANR	3050611	Identifier	recheck_status		3048473	0					
ANR	3050612	Identifier	true		3048473	1					
ANR	3050613	ExpressionStatement	"CallSocketHandler ( i , true )"	3625:6:109277:109305	3048473	5	True				
ANR	3050614	CallExpression	"CallSocketHandler ( i , true )"		3048473	0					
ANR	3050615	Callee	CallSocketHandler		3048473	0					
ANR	3050616	Identifier	CallSocketHandler		3048473	0					
ANR	3050617	ArgumentList	i		3048473	1					
ANR	3050618	Argument	i		3048473	0					
ANR	3050619	Identifier	i		3048473	0					
ANR	3050620	Argument	true		3048473	1					
ANR	3050621	Identifier	true		3048473	0					
ANR	3050622	ExpressionStatement	"runtime = dc_stats . AddRuntime ( ( * sockTable ) [ i ] . handler_descrip , runtime )"	3628:24:109397:109468	3048473	6	True				
ANR	3050623	AssignmentExpression	"runtime = dc_stats . AddRuntime ( ( * sockTable ) [ i ] . handler_descrip , runtime )"		3048473	0		=			
ANR	3050624	Identifier	runtime		3048473	0					
ANR	3050625	CallExpression	"dc_stats . AddRuntime ( ( * sockTable ) [ i ] . handler_descrip , runtime )"		3048473	1					
ANR	3050626	Callee	dc_stats . AddRuntime		3048473	0					
ANR	3050627	MemberAccess	dc_stats . AddRuntime		3048473	0					
ANR	3050628	Identifier	dc_stats		3048473	0					
ANR	3050629	Identifier	AddRuntime		3048473	1					
ANR	3050630	ArgumentList	( * sockTable ) [ i ] . handler_descrip		3048473	1					
ANR	3050631	Argument	( * sockTable ) [ i ] . handler_descrip		3048473	0					
ANR	3050632	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3048473	0					
ANR	3050633	ArrayIndexing	( * sockTable ) [ i ]		3048473	0					
ANR	3050634	UnaryOperationExpression	* sockTable		3048473	0					
ANR	3050635	UnaryOperator	*		3048473	0					
ANR	3050636	Identifier	sockTable		3048473	1					
ANR	3050637	Identifier	i		3048473	1					
ANR	3050638	Identifier	handler_descrip		3048473	1					
ANR	3050639	Argument	runtime		3048473	1					
ANR	3050640	Identifier	runtime		3048473	0					
ANR	3050641	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3634:12:109613:109647	3048473	13	True				
ANR	3050642	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		3048473	0		=			
ANR	3050643	Identifier	runtime		3048473	0					
ANR	3050644	CallExpression	UtcTime :: getTimeDouble ( )		3048473	1					
ANR	3050645	Callee	UtcTime :: getTimeDouble		3048473	0					
ANR	3050646	Identifier	UtcTime :: getTimeDouble		3048473	0					
ANR	3050647	ArgumentList			3048473	1					
ANR	3050648	ExpressionStatement	dc_stats . SocketRuntime += ( runtime - group_runtime )	3635:12:109661:109712	3048473	14	True				
ANR	3050649	AssignmentExpression	dc_stats . SocketRuntime += ( runtime - group_runtime )		3048473	0		+=			
ANR	3050650	MemberAccess	dc_stats . SocketRuntime		3048473	0					
ANR	3050651	Identifier	dc_stats		3048473	0					
ANR	3050652	Identifier	SocketRuntime		3048473	1					
ANR	3050653	AdditiveExpression	runtime - group_runtime		3048473	1		-			
ANR	3050654	Identifier	runtime		3048473	0					
ANR	3050655	Identifier	group_runtime		3048473	1					
ANR	3050656	ExpressionStatement	group_runtime = runtime	3636:12:109726:109749	3048473	15	True				
ANR	3050657	AssignmentExpression	group_runtime = runtime		3048473	0		=			
ANR	3050658	Identifier	group_runtime		3048473	0					
ANR	3050659	Identifier	runtime		3048473	1					
ANR	3050660	ExpressionStatement	dc_stats . PumpCycle += ( runtime - pump_cycle_begin_time )	3641:8:109779:109834	3048473	41	True				
ANR	3050661	AssignmentExpression	dc_stats . PumpCycle += ( runtime - pump_cycle_begin_time )		3048473	0		+=			
ANR	3050662	MemberAccess	dc_stats . PumpCycle		3048473	0					
ANR	3050663	Identifier	dc_stats		3048473	0					
ANR	3050664	Identifier	PumpCycle		3048473	1					
ANR	3050665	AdditiveExpression	runtime - pump_cycle_begin_time		3048473	1		-			
ANR	3050666	Identifier	runtime		3048473	0					
ANR	3050667	Identifier	pump_cycle_begin_time		3048473	1					
ANR	3050668	ExpressionStatement	pump_cycle_begin_time = runtime	3642:8:109844:109875	3048473	42	True				
ANR	3050669	AssignmentExpression	pump_cycle_begin_time = runtime		3048473	0		=			
ANR	3050670	Identifier	pump_cycle_begin_time		3048473	0					
ANR	3050671	Identifier	runtime		3048473	1					
ANR	3050672	ReturnType	void		3048473	1					
ANR	3050673	Identifier	DaemonCore :: Driver		3048473	2					
ANR	3050674	ParameterList			3048473	3					
ANR	3050675	CFGEntryNode	ENTRY		3048473		True				
ANR	3050676	CFGExitNode	EXIT		3048473		True				
ANR	3050677	InfiniteForNode	true		3048473		True				
ANR	3050678	Symbol	& ( * pipeTable ) [ i ] . pentry -> pipeReady		3048473						
ANR	3050679	Symbol	async_pipe_signal		3048473						
ANR	3050680	Symbol	sigTable [ i ] . sig_descrip		3048473						
ANR	3050681	Symbol	& num_timers_fired		3048473						
ANR	3050682	Symbol	* ss		3048473						
ANR	3050683	Symbol	( * sockTable ) [ i ] . is_connect_pending		3048473						
ANR	3050684	Symbol	pipe_end		3048473						
ANR	3050685	Symbol	nPipe		3048473						
ANR	3050686	Symbol	ss -> handle_incoming_packet		3048473						
ANR	3050687	Symbol	( * sockTable ) [ i ] . iosock -> type		3048473						
ANR	3050688	Symbol	curr_dataptr		3048473						
ANR	3050689	Symbol	Selector :: IO_READ		3048473						
ANR	3050690	Symbol	( * sockTable ) [ i ] . handler_descrip		3048473						
ANR	3050691	Symbol	* * saved_pentry		3048473						
ANR	3050692	Symbol	time_before		3048473						
ANR	3050693	Symbol	sigTable [ i ] . handlercpp		3048473						
ANR	3050694	Symbol	SIGTRAP		3048473						
ANR	3050695	Symbol	async_pipe [ 0 ] . is_connected		3048473						
ANR	3050696	Symbol	write		3048473						
ANR	3050697	Symbol	( * sockTable ) [ i ] . remove_asap		3048473						
ANR	3050698	Symbol	D_COMMAND		3048473						
ANR	3050699	Symbol	UtcTime :: getTimeDouble		3048473						
ANR	3050700	Symbol	pump_cycle_begin_time		3048473						
ANR	3050701	Symbol	async_sigs_unblocked		3048473						
ANR	3050702	Symbol	PIPE_INDEX_OFFSET		3048473						
ANR	3050703	Symbol	dc_stats . SockMessages		3048473						
ANR	3050704	Symbol	errno		3048473						
ANR	3050705	Symbol	dc_stats . PipeRuntime		3048473						
ANR	3050706	Symbol	saved_pentry		3048473						
ANR	3050707	Symbol	& ( * pipeTable ) [ i ] . data_ptr		3048473						
ANR	3050708	Symbol	( * pipeTable ) [ i ] . handler		3048473						
ANR	3050709	Symbol	deadline_timeout		3048473						
ANR	3050710	Symbol	dc_stats . SocketRuntime		3048473						
ANR	3050711	Symbol	sigTable [ i ] . is_blocked		3048473						
ANR	3050712	Symbol	tmpErrno		3048473						
ANR	3050713	Symbol	* async_pipe		3048473						
ANR	3050714	Symbol	D_PERF_TRACE		3048473						
ANR	3050715	Symbol	sigTable [ i ] . handler_descrip		3048473						
ANR	3050716	Symbol	maxSig		3048473						
ANR	3050717	Symbol	( * sockTable ) [ i ] . is_reverse_connect_pending		3048473						
ANR	3050718	Symbol	* pipeHandleTable		3048473						
ANR	3050719	Symbol	( * pipeTable ) [ i ] . handler_descrip		3048473						
ANR	3050720	Symbol	* ( * pipeTable ) [ i ] . index		3048473						
ANR	3050721	Symbol	selector . fd_ready		3048473						
ANR	3050722	Symbol	sigTable		3048473						
ANR	3050723	Symbol	InterlockedExchange		3048473						
ANR	3050724	Symbol	do_err		3048473						
ANR	3050725	Symbol	deadline		3048473						
ANR	3050726	Symbol	* ( * sockTable ) [ i ] . iosock		3048473						
ANR	3050727	Symbol	ss		3048473						
ANR	3050728	Symbol	& runtime		3048473						
ANR	3050729	Symbol	recheck_status		3048473						
ANR	3050730	Symbol	sigTable [ i ] . is_pending		3048473						
ANR	3050731	Symbol	num_timers_fired		3048473						
ANR	3050732	Symbol	* * * sockTable		3048473						
ANR	3050733	Symbol	group_runtime		3048473						
ANR	3050734	Symbol	nSock		3048473						
ANR	3050735	Symbol	SIG_SETMASK		3048473						
ANR	3050736	Symbol	i		3048473						
ANR	3050737	Symbol	SIGABRT		3048473						
ANR	3050738	Symbol	dc_stats . SignalRuntime		3048473						
ANR	3050739	Symbol	emptyset		3048473						
ANR	3050740	Symbol	do_fd2		3048473						
ANR	3050741	Symbol	saved_pentry -> pipeEnd		3048473						
ANR	3050742	Symbol	buf		3048473						
ANR	3050743	Symbol	* sigTable		3048473						
ANR	3050744	Symbol	( * pipeTable ) [ i ] . handlercpp		3048473						
ANR	3050745	Symbol	t		3048473						
ANR	3050746	Symbol	* sockTable		3048473						
ANR	3050747	Symbol	do_out		3048473						
ANR	3050748	Symbol	dc_stats		3048473						
ANR	3050749	Symbol	dc_stats . TimerRuntime		3048473						
ANR	3050750	Symbol	( * pipeTable ) [ i ] . in_handler		3048473						
ANR	3050751	Symbol	sigTable [ i ] . handler		3048473						
ANR	3050752	Symbol	asyncpipe_buf		3048473						
ANR	3050753	Symbol	stdout		3048473						
ANR	3050754	Symbol	* saved_pentry -> pipeEnd		3048473						
ANR	3050755	Symbol	Stream :: safe_sock		3048473						
ANR	3050756	Symbol	saved_pentry -> pipeEnd -> io_ready		3048473						
ANR	3050757	Symbol	t . Timeout		3048473						
ANR	3050758	Symbol	do_fd1		3048473						
ANR	3050759	Symbol	* * * pipeTable		3048473						
ANR	3050760	Symbol	CEDAR_EWOULDBLOCK		3048473						
ANR	3050761	Symbol	( * sockTable ) [ i ] . iosock		3048473						
ANR	3050762	Symbol	( * pipeTable ) [ i ] . pipe_descrip		3048473						
ANR	3050763	Symbol	SIGFPE		3048473						
ANR	3050764	Symbol	* * i		3048473						
ANR	3050765	Symbol	& emptyset		3048473						
ANR	3050766	Symbol	NULL		3048473						
ANR	3050767	Symbol	read		3048473						
ANR	3050768	Symbol	dc_stats . TimersFired		3048473						
ANR	3050769	Symbol	Selector :: IO_EXCEPT		3048473						
ANR	3050770	Symbol	sockTable		3048473						
ANR	3050771	Symbol	selector . timed_out		3048473						
ANR	3050772	Symbol	runtime		3048473						
ANR	3050773	Symbol	& sigTable [ i ] . data_ptr		3048473						
ANR	3050774	Symbol	TRUE		3048473						
ANR	3050775	Symbol	param_boolean		3048473						
ANR	3050776	Symbol	* pipeTable		3048473						
ANR	3050777	Symbol	DebugFlags		3048473						
ANR	3050778	Symbol	* saved_pentry		3048473						
ANR	3050779	Symbol	& fullset		3048473						
ANR	3050780	Symbol	stderr		3048473						
ANR	3050781	Symbol	dc_stats . AddRuntime		3048473						
ANR	3050782	Symbol	okay_delta		3048473						
ANR	3050783	Symbol	strerror		3048473						
ANR	3050784	Symbol	( * sockTable ) [ i ] . iosock -> get_deadline		3048473						
ANR	3050785	Symbol	( * pipeTable ) [ i ] . index		3048473						
ANR	3050786	Symbol	SIGSEGV		3048473						
ANR	3050787	Symbol	dc_stats . Signals		3048473						
ANR	3050788	Symbol	async_pipe [ 0 ] . get_file_desc		3048473						
ANR	3050789	Symbol	true		3048473						
ANR	3050790	Symbol	( * pipeTable ) [ i ] . handler_type		3048473						
ANR	3050791	Symbol	dc_stats . SelectWaittime		3048473						
ANR	3050792	Symbol	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish		3048473						
ANR	3050793	Symbol	Selector :: IO_WRITE		3048473						
ANR	3050794	Symbol	dc_stats . PipeMessages		3048473						
ANR	3050795	Symbol	( * pipeTable ) [ i ] . call_handler		3048473						
ANR	3050796	Symbol	sigTable [ i ] . is_cpp		3048473						
ANR	3050797	Symbol	( * sockTable ) [ i ] . iosock -> get_file_desc		3048473						
ANR	3050798	Symbol	selector . failed		3048473						
ANR	3050799	Symbol	SIGBUS		3048473						
ANR	3050800	Symbol	* * pipeTable		3048473						
ANR	3050801	Symbol	* * sockTable		3048473						
ANR	3050802	Symbol	min_deadline		3048473						
ANR	3050803	Symbol	timeout		3048473						
ANR	3050804	Symbol	SIGPROF		3048473						
ANR	3050805	Symbol	pipeHandleTable		3048473						
ANR	3050806	Symbol	now		3048473						
ANR	3050807	Symbol	selector		3048473						
ANR	3050808	Symbol	async_pipe		3048473						
ANR	3050809	Symbol	sigTable [ i ] . service		3048473						
ANR	3050810	Symbol	TIME_T_NEVER		3048473						
ANR	3050811	Symbol	sock_timed_out		3048473						
ANR	3050812	Symbol	sent_signal		3048473						
ANR	3050813	Symbol	D_DAEMONCORE		3048473						
ANR	3050814	Symbol	selector . has_ready		3048473						
ANR	3050815	Symbol	( * pipeTable ) [ i ] . service		3048473						
ANR	3050816	Symbol	false		3048473						
ANR	3050817	Symbol	D_ALWAYS		3048473						
ANR	3050818	Symbol	fwrite		3048473						
ANR	3050819	Symbol	pipeTable		3048473						
ANR	3050820	Symbol	SIGILL		3048473						
ANR	3050821	Symbol	dc_stats . PumpCycle		3048473						
ANR	3050822	Symbol	* i		3048473						
ANR	3050823	Symbol	fullset		3048473						
ANR	3050824	Symbol	sigTable [ i ] . num		3048473						
ANR	3050825	Symbol	( * pipeTable ) [ i ] . pentry		3048473						
ANR	3050826	Symbol	pipefd		3048473						
ANR	3050827	Symbol	( * sockTable ) [ i ] . call_handler		3048473						
ANR	3050828	Symbol	* * pipeHandleTable		3048473						
ANR	3050829	Symbol	( * sockTable ) [ i ] . servicing_tid		3048473						
ANR	3050830	Symbol	FALSE		3048473						
ANR	3050831	Symbol	time		3048473						
ANR	3050832	Function	DaemonCore :: SocketIsRegistered	3647:0:109912:110026							
ANR	3050833	FunctionDef	DaemonCore :: SocketIsRegistered (Stream * sock)		3050832	0					
ANR	3050834	CompoundStatement		3649:0:109964:110026	3050832	0					
ANR	3050835	IdentifierDeclStatement	int i = GetRegisteredSocketIndex ( sock ) ;	3650:1:109967:110007	3050832	0	True				
ANR	3050836	IdentifierDecl	i = GetRegisteredSocketIndex ( sock )		3050832	0					
ANR	3050837	IdentifierDeclType	int		3050832	0					
ANR	3050838	Identifier	i		3050832	1					
ANR	3050839	AssignmentExpression	i = GetRegisteredSocketIndex ( sock )		3050832	2		=			
ANR	3050840	Identifier	i		3050832	0					
ANR	3050841	CallExpression	GetRegisteredSocketIndex ( sock )		3050832	1					
ANR	3050842	Callee	GetRegisteredSocketIndex		3050832	0					
ANR	3050843	Identifier	GetRegisteredSocketIndex		3050832	0					
ANR	3050844	ArgumentList	sock		3050832	1					
ANR	3050845	Argument	sock		3050832	0					
ANR	3050846	Identifier	sock		3050832	0					
ANR	3050847	ReturnStatement	return i != - 1 ;	3651:1:110010:110024	3050832	1	True				
ANR	3050848	EqualityExpression	i != - 1		3050832	0		!=			
ANR	3050849	Identifier	i		3050832	0					
ANR	3050850	UnaryOperationExpression	- 1		3050832	1					
ANR	3050851	UnaryOperator	-		3050832	0					
ANR	3050852	PrimaryExpression	1		3050832	1					
ANR	3050853	ReturnType	bool		3050832	1					
ANR	3050854	Identifier	DaemonCore :: SocketIsRegistered		3050832	2					
ANR	3050855	ParameterList	Stream * sock		3050832	3					
ANR	3050856	Parameter	Stream * sock	3648:32:109949:109960	3050832	0	True				
ANR	3050857	ParameterType	Stream *		3050832	0					
ANR	3050858	Identifier	sock		3050832	1					
ANR	3050859	CFGEntryNode	ENTRY		3050832		True				
ANR	3050860	CFGExitNode	EXIT		3050832		True				
ANR	3050861	Symbol	sock		3050832						
ANR	3050862	Symbol	i		3050832						
ANR	3050863	Symbol	GetRegisteredSocketIndex		3050832						
ANR	3050864	Function	DaemonCore :: GetRegisteredSocketIndex	3654:0:110029:110196							
ANR	3050865	FunctionDef	DaemonCore :: GetRegisteredSocketIndex (Stream * sock)		3050864	0					
ANR	3050866	CompoundStatement		3656:0:110086:110196	3050864	0					
ANR	3050867	IdentifierDeclStatement	int i ;	3657:1:110089:110094	3050864	0	True				
ANR	3050868	IdentifierDecl	i		3050864	0					
ANR	3050869	IdentifierDeclType	int		3050864	0					
ANR	3050870	Identifier	i		3050864	1					
ANR	3050871	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		3050864	1					
ANR	3050872	ForInit	i = 0 ;	3659:6:110103:110106	3050864	0	True				
ANR	3050873	AssignmentExpression	i = 0		3050864	0		=			
ANR	3050874	Identifier	i		3050864	0					
ANR	3050875	PrimaryExpression	0		3050864	1					
ANR	3050876	Condition	i < nSock	3659:10:110107:110113	3050864	1	True				
ANR	3050877	RelationalExpression	i < nSock		3050864	0		<			
ANR	3050878	Identifier	i		3050864	0					
ANR	3050879	Identifier	nSock		3050864	1					
ANR	3050880	PostIncDecOperationExpression	i ++	3659:18:110115:110117	3050864	2	True				
ANR	3050881	Identifier	i		3050864	0					
ANR	3050882	IncDec	++		3050864	1					
ANR	3050883	CompoundStatement		4:23:33:33	3050864	3					
ANR	3050884	IfStatement	if ( ( * sockTable ) [ i ] . iosock == sock )		3050864	0					
ANR	3050885	Condition	( * sockTable ) [ i ] . iosock == sock	3660:7:110129:110158	3050864	0	True				
ANR	3050886	EqualityExpression	( * sockTable ) [ i ] . iosock == sock		3050864	0		==			
ANR	3050887	MemberAccess	( * sockTable ) [ i ] . iosock		3050864	0					
ANR	3050888	ArrayIndexing	( * sockTable ) [ i ]		3050864	0					
ANR	3050889	UnaryOperationExpression	* sockTable		3050864	0					
ANR	3050890	UnaryOperator	*		3050864	0					
ANR	3050891	Identifier	sockTable		3050864	1					
ANR	3050892	Identifier	i		3050864	1					
ANR	3050893	Identifier	iosock		3050864	1					
ANR	3050894	Identifier	sock		3050864	1					
ANR	3050895	CompoundStatement		5:40:75:75	3050864	1					
ANR	3050896	ReturnStatement	return i ;	3661:3:110167:110175	3050864	0	True				
ANR	3050897	Identifier	i		3050864	0					
ANR	3050898	ReturnStatement	return - 1 ;	3664:1:110185:110194	3050864	2	True				
ANR	3050899	UnaryOperationExpression	- 1		3050864	0					
ANR	3050900	UnaryOperator	-		3050864	0					
ANR	3050901	PrimaryExpression	1		3050864	1					
ANR	3050902	ReturnType	int		3050864	1					
ANR	3050903	Identifier	DaemonCore :: GetRegisteredSocketIndex		3050864	2					
ANR	3050904	ParameterList	Stream * sock		3050864	3					
ANR	3050905	Parameter	Stream * sock	3655:38:110071:110082	3050864	0	True				
ANR	3050906	ParameterType	Stream *		3050864	0					
ANR	3050907	Identifier	sock		3050864	1					
ANR	3050908	CFGEntryNode	ENTRY		3050864		True				
ANR	3050909	CFGExitNode	EXIT		3050864		True				
ANR	3050910	Symbol	sock		3050864						
ANR	3050911	Symbol	* i		3050864						
ANR	3050912	Symbol	* sockTable		3050864						
ANR	3050913	Symbol	nSock		3050864						
ANR	3050914	Symbol	sockTable		3050864						
ANR	3050915	Symbol	( * sockTable ) [ i ] . iosock		3050864						
ANR	3050916	Symbol	i		3050864						
ANR	3050917	Symbol	* * sockTable		3050864						
ANR	3050918	Function	DaemonCore :: CallSocketHandler	3667:0:110199:110580							
ANR	3050919	FunctionDef	"DaemonCore :: CallSocketHandler (Stream * sock , bool default_to_HandleCommand)"		3050918	0					
ANR	3050920	CompoundStatement		3669:0:110281:110580	3050918	0					
ANR	3050921	IdentifierDeclStatement	int i = GetRegisteredSocketIndex ( sock ) ;	3670:1:110284:110324	3050918	0	True				
ANR	3050922	IdentifierDecl	i = GetRegisteredSocketIndex ( sock )		3050918	0					
ANR	3050923	IdentifierDeclType	int		3050918	0					
ANR	3050924	Identifier	i		3050918	1					
ANR	3050925	AssignmentExpression	i = GetRegisteredSocketIndex ( sock )		3050918	2		=			
ANR	3050926	Identifier	i		3050918	0					
ANR	3050927	CallExpression	GetRegisteredSocketIndex ( sock )		3050918	1					
ANR	3050928	Callee	GetRegisteredSocketIndex		3050918	0					
ANR	3050929	Identifier	GetRegisteredSocketIndex		3050918	0					
ANR	3050930	ArgumentList	sock		3050918	1					
ANR	3050931	Argument	sock		3050918	0					
ANR	3050932	Identifier	sock		3050918	0					
ANR	3050933	IfStatement	if ( i == - 1 )		3050918	1					
ANR	3050934	Condition	i == - 1	3672:6:110333:110339	3050918	0	True				
ANR	3050935	EqualityExpression	i == - 1		3050918	0		==			
ANR	3050936	Identifier	i		3050918	0					
ANR	3050937	UnaryOperationExpression	- 1		3050918	1					
ANR	3050938	UnaryOperator	-		3050918	0					
ANR	3050939	PrimaryExpression	1		3050918	1					
ANR	3050940	CompoundStatement		4:16:61:61	3050918	1					
ANR	3050941	ExpressionStatement	"dprintf ( D_ALWAYS , ""CallSocketHandler: called on non-registered socket!\\n"" )"	3673:2:110347:110421	3050918	0	True				
ANR	3050942	CallExpression	"dprintf ( D_ALWAYS , ""CallSocketHandler: called on non-registered socket!\\n"" )"		3050918	0					
ANR	3050943	Callee	dprintf		3050918	0					
ANR	3050944	Identifier	dprintf		3050918	0					
ANR	3050945	ArgumentList	D_ALWAYS		3050918	1					
ANR	3050946	Argument	D_ALWAYS		3050918	0					
ANR	3050947	Identifier	D_ALWAYS		3050918	0					
ANR	3050948	Argument	"""CallSocketHandler: called on non-registered socket!\\n"""		3050918	1					
ANR	3050949	PrimaryExpression	"""CallSocketHandler: called on non-registered socket!\\n"""		3050918	0					
ANR	3050950	ExpressionStatement	"dprintf ( D_ALWAYS , ""Offending socket number %d\\n"" , i )"	3674:2:110425:110478	3050918	1	True				
ANR	3050951	CallExpression	"dprintf ( D_ALWAYS , ""Offending socket number %d\\n"" , i )"		3050918	0					
ANR	3050952	Callee	dprintf		3050918	0					
ANR	3050953	Identifier	dprintf		3050918	0					
ANR	3050954	ArgumentList	D_ALWAYS		3050918	1					
ANR	3050955	Argument	D_ALWAYS		3050918	0					
ANR	3050956	Identifier	D_ALWAYS		3050918	0					
ANR	3050957	Argument	"""Offending socket number %d\\n"""		3050918	1					
ANR	3050958	PrimaryExpression	"""Offending socket number %d\\n"""		3050918	0					
ANR	3050959	Argument	i		3050918	2					
ANR	3050960	Identifier	i		3050918	0					
ANR	3050961	ExpressionStatement	DumpSocketTable ( D_DAEMONCORE )	3675:2:110482:110513	3050918	2	True				
ANR	3050962	CallExpression	DumpSocketTable ( D_DAEMONCORE )		3050918	0					
ANR	3050963	Callee	DumpSocketTable		3050918	0					
ANR	3050964	Identifier	DumpSocketTable		3050918	0					
ANR	3050965	ArgumentList	D_DAEMONCORE		3050918	1					
ANR	3050966	Argument	D_DAEMONCORE		3050918	0					
ANR	3050967	Identifier	D_DAEMONCORE		3050918	0					
ANR	3050968	ReturnStatement	return ;	3676:2:110517:110523	3050918	3	True				
ANR	3050969	ExpressionStatement	"CallSocketHandler ( i , default_to_HandleCommand )"	3679:1:110530:110578	3050918	2	True				
ANR	3050970	CallExpression	"CallSocketHandler ( i , default_to_HandleCommand )"		3050918	0					
ANR	3050971	Callee	CallSocketHandler		3050918	0					
ANR	3050972	Identifier	CallSocketHandler		3050918	0					
ANR	3050973	ArgumentList	i		3050918	1					
ANR	3050974	Argument	i		3050918	0					
ANR	3050975	Identifier	i		3050918	0					
ANR	3050976	Argument	default_to_HandleCommand		3050918	1					
ANR	3050977	Identifier	default_to_HandleCommand		3050918	0					
ANR	3050978	ReturnType	void		3050918	1					
ANR	3050979	Identifier	DaemonCore :: CallSocketHandler		3050918	2					
ANR	3050980	ParameterList	"Stream * sock , bool default_to_HandleCommand"		3050918	3					
ANR	3050981	Parameter	Stream * sock	3668:31:110235:110246	3050918	0	True				
ANR	3050982	ParameterType	Stream *		3050918	0					
ANR	3050983	Identifier	sock		3050918	1					
ANR	3050984	Parameter	bool default_to_HandleCommand	3668:45:110249:110277	3050918	1	True				
ANR	3050985	ParameterType	bool		3050918	0					
ANR	3050986	Identifier	default_to_HandleCommand		3050918	1					
ANR	3050987	CFGEntryNode	ENTRY		3050918		True				
ANR	3050988	CFGExitNode	EXIT		3050918		True				
ANR	3050989	Symbol	sock		3050918						
ANR	3050990	Symbol	D_DAEMONCORE		3050918						
ANR	3050991	Symbol	D_ALWAYS		3050918						
ANR	3050992	Symbol	i		3050918						
ANR	3050993	Symbol	default_to_HandleCommand		3050918						
ANR	3050994	Symbol	GetRegisteredSocketIndex		3050918						
ANR	3050995	ClassDef	CallSocketHandler_args	3682:0:110583:110679							
ANR	3050996	DeclStmt									
ANR	3050997	Decl							int	int	i
ANR	3050998	DeclStmt									
ANR	3050999	Decl							bool	bool	default_to_HandleCommand
ANR	3051000	DeclStmt									
ANR	3051001	Decl							Stream	Stream *	accepted_sock
ANR	3051002	Function	DaemonCore :: CallSocketHandler	3688:0:110683:113097							
ANR	3051003	FunctionDef	"DaemonCore :: CallSocketHandler (int & i , bool default_to_HandleCommand)"		3051002	0					
ANR	3051004	CompoundStatement		3690:0:110759:113097	3051002	0					
ANR	3051005	IdentifierDeclStatement	unsigned int iAcceptCnt = ( m_iMaxAcceptsPerCycle > 0 ) ? m_iMaxAcceptsPerCycle : - 1 ;	3691:4:110765:110848	3051002	0	True				
ANR	3051006	IdentifierDecl	iAcceptCnt = ( m_iMaxAcceptsPerCycle > 0 ) ? m_iMaxAcceptsPerCycle : - 1		3051002	0					
ANR	3051007	IdentifierDeclType	unsigned int		3051002	0					
ANR	3051008	Identifier	iAcceptCnt		3051002	1					
ANR	3051009	AssignmentExpression	iAcceptCnt = ( m_iMaxAcceptsPerCycle > 0 ) ? m_iMaxAcceptsPerCycle : - 1		3051002	2		=			
ANR	3051010	Identifier	iAcceptCnt		3051002	0					
ANR	3051011	ConditionalExpression	( m_iMaxAcceptsPerCycle > 0 ) ? m_iMaxAcceptsPerCycle : - 1		3051002	1					
ANR	3051012	Condition	m_iMaxAcceptsPerCycle > 0		3051002	0					
ANR	3051013	RelationalExpression	m_iMaxAcceptsPerCycle > 0		3051002	0		>			
ANR	3051014	Identifier	m_iMaxAcceptsPerCycle		3051002	0					
ANR	3051015	PrimaryExpression	0		3051002	1					
ANR	3051016	Identifier	m_iMaxAcceptsPerCycle		3051002	1					
ANR	3051017	UnaryOperationExpression	- 1		3051002	2					
ANR	3051018	UnaryOperator	-		3051002	0					
ANR	3051019	PrimaryExpression	1		3051002	1					
ANR	3051020	WhileStatement	while ( iAcceptCnt )		3051002	1					
ANR	3051021	Condition	iAcceptCnt	3695:12:110950:110959	3051002	0	True				
ANR	3051022	Identifier	iAcceptCnt		3051002	0					
ANR	3051023	CompoundStatement		56:5:1959:1975	3051002	1					
ANR	3051024	IdentifierDeclStatement	bool set_service_tid = false ;	3697:5:110974:111002	3051002	0	True				
ANR	3051025	IdentifierDecl	set_service_tid = false		3051002	0					
ANR	3051026	IdentifierDeclType	bool		3051002	0					
ANR	3051027	Identifier	set_service_tid		3051002	1					
ANR	3051028	AssignmentExpression	set_service_tid = false		3051002	2		=			
ANR	3051029	Identifier	false		3051002	0					
ANR	3051030	Identifier	false		3051002	1					
ANR	3051031	IdentifierDeclStatement	struct CallSocketHandler_args * args ;	3700:5:111070:111105	3051002	1	True				
ANR	3051032	IdentifierDecl	* args		3051002	0					
ANR	3051033	IdentifierDeclType	struct CallSocketHandler_args *		3051002	0					
ANR	3051034	Identifier	args		3051002	1					
ANR	3051035	Statement	args	3701:5:111112:111115	3051002	2	True				
ANR	3051036	Statement	=	3701:10:111117:111117	3051002	3	True				
ANR	3051037	Statement	new	3701:12:111119:111121	3051002	4	True				
ANR	3051038	Statement	struct	3701:16:111123:111128	3051002	5	True				
ANR	3051039	ExpressionStatement	CallSocketHandler_args	3701:23:111130:111152	3051002	6	True				
ANR	3051040	Identifier	CallSocketHandler_args		3051002	0					
ANR	3051041	ExpressionStatement	args -> accepted_sock = NULL	3706:5:111323:111349	3051002	7	True				
ANR	3051042	AssignmentExpression	args -> accepted_sock = NULL		3051002	0		=			
ANR	3051043	PtrMemberAccess	args -> accepted_sock		3051002	0					
ANR	3051044	Identifier	args		3051002	0					
ANR	3051045	Identifier	accepted_sock		3051002	1					
ANR	3051046	Identifier	NULL		3051002	1					
ANR	3051047	IdentifierDeclStatement	Stream * insock = ( * sockTable ) [ i ] . iosock ;	3707:5:111356:111395	3051002	8	True				
ANR	3051048	IdentifierDecl	* insock = ( * sockTable ) [ i ] . iosock		3051002	0					
ANR	3051049	IdentifierDeclType	Stream *		3051002	0					
ANR	3051050	Identifier	insock		3051002	1					
ANR	3051051	AssignmentExpression	* insock = ( * sockTable ) [ i ] . iosock		3051002	2		=			
ANR	3051052	Identifier	insock		3051002	0					
ANR	3051053	MemberAccess	( * sockTable ) [ i ] . iosock		3051002	1					
ANR	3051054	ArrayIndexing	( * sockTable ) [ i ]		3051002	0					
ANR	3051055	UnaryOperationExpression	* sockTable		3051002	0					
ANR	3051056	UnaryOperator	*		3051002	0					
ANR	3051057	Identifier	sockTable		3051002	1					
ANR	3051058	Identifier	i		3051002	1					
ANR	3051059	Identifier	iosock		3051002	1					
ANR	3051060	ExpressionStatement	ASSERT ( insock )	3708:5:111402:111416	3051002	9	True				
ANR	3051061	CallExpression	ASSERT ( insock )		3051002	0					
ANR	3051062	Callee	ASSERT		3051002	0					
ANR	3051063	Identifier	ASSERT		3051002	0					
ANR	3051064	ArgumentList	insock		3051002	1					
ANR	3051065	Argument	insock		3051002	0					
ANR	3051066	Identifier	insock		3051002	0					
ANR	3051067	IfStatement	if ( ( * sockTable ) [ i ] . handler == NULL && ( * sockTable ) [ i ] . handlercpp == NULL && default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen )		3051002	10					
ANR	3051068	Condition	( * sockTable ) [ i ] . handler == NULL && ( * sockTable ) [ i ] . handlercpp == NULL && default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen	3709:10:111428:111706	3051002	0	True				
ANR	3051069	AndExpression	( * sockTable ) [ i ] . handler == NULL && ( * sockTable ) [ i ] . handlercpp == NULL && default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		3051002	0		&&			
ANR	3051070	EqualityExpression	( * sockTable ) [ i ] . handler == NULL		3051002	0		==			
ANR	3051071	MemberAccess	( * sockTable ) [ i ] . handler		3051002	0					
ANR	3051072	ArrayIndexing	( * sockTable ) [ i ]		3051002	0					
ANR	3051073	UnaryOperationExpression	* sockTable		3051002	0					
ANR	3051074	UnaryOperator	*		3051002	0					
ANR	3051075	Identifier	sockTable		3051002	1					
ANR	3051076	Identifier	i		3051002	1					
ANR	3051077	Identifier	handler		3051002	1					
ANR	3051078	Identifier	NULL		3051002	1					
ANR	3051079	AndExpression	( * sockTable ) [ i ] . handlercpp == NULL && default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		3051002	1		&&			
ANR	3051080	EqualityExpression	( * sockTable ) [ i ] . handlercpp == NULL		3051002	0		==			
ANR	3051081	MemberAccess	( * sockTable ) [ i ] . handlercpp		3051002	0					
ANR	3051082	ArrayIndexing	( * sockTable ) [ i ]		3051002	0					
ANR	3051083	UnaryOperationExpression	* sockTable		3051002	0					
ANR	3051084	UnaryOperator	*		3051002	0					
ANR	3051085	Identifier	sockTable		3051002	1					
ANR	3051086	Identifier	i		3051002	1					
ANR	3051087	Identifier	handlercpp		3051002	1					
ANR	3051088	Identifier	NULL		3051002	1					
ANR	3051089	AndExpression	default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		3051002	1		&&			
ANR	3051090	Identifier	default_to_HandleCommand		3051002	0					
ANR	3051091	AndExpression	insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		3051002	1		&&			
ANR	3051092	EqualityExpression	insock -> type ( ) == Stream :: reli_sock		3051002	0		==			
ANR	3051093	CallExpression	insock -> type ( )		3051002	0					
ANR	3051094	Callee	insock -> type		3051002	0					
ANR	3051095	PtrMemberAccess	insock -> type		3051002	0					
ANR	3051096	Identifier	insock		3051002	0					
ANR	3051097	Identifier	type		3051002	1					
ANR	3051098	ArgumentList			3051002	1					
ANR	3051099	Identifier	Stream :: reli_sock		3051002	1					
ANR	3051100	AndExpression	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		3051002	1		&&			
ANR	3051101	EqualityExpression	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special		3051002	0		==			
ANR	3051102	PtrMemberAccess	( ( ReliSock * ) insock ) -> _state		3051002	0					
ANR	3051103	CastExpression	( ReliSock * ) insock		3051002	0					
ANR	3051104	CastTarget	ReliSock *		3051002	0					
ANR	3051105	Identifier	insock		3051002	1					
ANR	3051106	Identifier	_state		3051002	1					
ANR	3051107	Identifier	Sock :: sock_special		3051002	1					
ANR	3051108	EqualityExpression	( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		3051002	1		==			
ANR	3051109	PtrMemberAccess	( ( ReliSock * ) insock ) -> _special_state		3051002	0					
ANR	3051110	CastExpression	( ReliSock * ) insock		3051002	0					
ANR	3051111	CastTarget	ReliSock *		3051002	0					
ANR	3051112	Identifier	insock		3051002	1					
ANR	3051113	Identifier	_special_state		3051002	1					
ANR	3051114	Identifier	ReliSock :: relisock_listen		3051002	1					
ANR	3051115	CompoundStatement		28:12:1093:1110	3051002	1					
ANR	3051116	IdentifierDeclStatement	Selector selector ;	3717:12:111853:111870	3051002	0	True				
ANR	3051117	IdentifierDecl	selector		3051002	0					
ANR	3051118	IdentifierDeclType	Selector		3051002	0					
ANR	3051119	Identifier	selector		3051002	1					
ANR	3051120	ExpressionStatement	"selector . set_timeout ( 0 , 0 )"	3718:12:111884:111912	3051002	1	True				
ANR	3051121	CallExpression	"selector . set_timeout ( 0 , 0 )"		3051002	0					
ANR	3051122	Callee	selector . set_timeout		3051002	0					
ANR	3051123	MemberAccess	selector . set_timeout		3051002	0					
ANR	3051124	Identifier	selector		3051002	0					
ANR	3051125	Identifier	set_timeout		3051002	1					
ANR	3051126	ArgumentList	0		3051002	1					
ANR	3051127	Argument	0		3051002	0					
ANR	3051128	PrimaryExpression	0		3051002	0					
ANR	3051129	Argument	0		3051002	1					
ANR	3051130	PrimaryExpression	0		3051002	0					
ANR	3051131	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"	3719:12:111926:112003	3051002	2	True				
ANR	3051132	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		3051002	0					
ANR	3051133	Callee	selector . add_fd		3051002	0					
ANR	3051134	MemberAccess	selector . add_fd		3051002	0					
ANR	3051135	Identifier	selector		3051002	0					
ANR	3051136	Identifier	add_fd		3051002	1					
ANR	3051137	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3051002	1					
ANR	3051138	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3051002	0					
ANR	3051139	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		3051002	0					
ANR	3051140	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		3051002	0					
ANR	3051141	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		3051002	0					
ANR	3051142	MemberAccess	( * sockTable ) [ i ] . iosock		3051002	0					
ANR	3051143	ArrayIndexing	( * sockTable ) [ i ]		3051002	0					
ANR	3051144	UnaryOperationExpression	* sockTable		3051002	0					
ANR	3051145	UnaryOperator	*		3051002	0					
ANR	3051146	Identifier	sockTable		3051002	1					
ANR	3051147	Identifier	i		3051002	1					
ANR	3051148	Identifier	iosock		3051002	1					
ANR	3051149	Identifier	get_file_desc		3051002	1					
ANR	3051150	ArgumentList			3051002	1					
ANR	3051151	Argument	Selector :: IO_READ		3051002	1					
ANR	3051152	Identifier	Selector :: IO_READ		3051002	0					
ANR	3051153	ExpressionStatement	selector . execute ( )	3720:12:112017:112035	3051002	3	True				
ANR	3051154	CallExpression	selector . execute ( )		3051002	0					
ANR	3051155	Callee	selector . execute		3051002	0					
ANR	3051156	MemberAccess	selector . execute		3051002	0					
ANR	3051157	Identifier	selector		3051002	0					
ANR	3051158	Identifier	execute		3051002	1					
ANR	3051159	ArgumentList			3051002	1					
ANR	3051160	IfStatement	if ( ! selector . has_ready ( ) )		3051002	4					
ANR	3051161	Condition	! selector . has_ready ( )	3722:17:112055:112075	3051002	0	True				
ANR	3051162	UnaryOperationExpression	! selector . has_ready ( )		3051002	0					
ANR	3051163	UnaryOperator	!		3051002	0					
ANR	3051164	CallExpression	selector . has_ready ( )		3051002	1					
ANR	3051165	Callee	selector . has_ready		3051002	0					
ANR	3051166	MemberAccess	selector . has_ready		3051002	0					
ANR	3051167	Identifier	selector		3051002	0					
ANR	3051168	Identifier	has_ready		3051002	1					
ANR	3051169	ArgumentList			3051002	1					
ANR	3051170	CompoundStatement		33:41:1319:1319	3051002	1					
ANR	3051171	Statement	delete	3724:16:112192:112197	3051002	0	True				
ANR	3051172	ExpressionStatement	args	3724:23:112199:112203	3051002	1	True				
ANR	3051173	Identifier	args		3051002	0					
ANR	3051174	ReturnStatement	return ;	3725:16:112221:112227	3051002	2	True				
ANR	3051175	ExpressionStatement	args -> accepted_sock = ( Stream * ) ( ( ReliSock * ) insock ) -> accept ( )	3728:6:112250:112313	3051002	5	True				
ANR	3051176	AssignmentExpression	args -> accepted_sock = ( Stream * ) ( ( ReliSock * ) insock ) -> accept ( )		3051002	0		=			
ANR	3051177	PtrMemberAccess	args -> accepted_sock		3051002	0					
ANR	3051178	Identifier	args		3051002	0					
ANR	3051179	Identifier	accepted_sock		3051002	1					
ANR	3051180	CastExpression	( Stream * ) ( ( ReliSock * ) insock ) -> accept ( )		3051002	1					
ANR	3051181	CastTarget	Stream *		3051002	0					
ANR	3051182	CallExpression	( ( ReliSock * ) insock ) -> accept ( )		3051002	1					
ANR	3051183	Callee	( ( ReliSock * ) insock ) -> accept		3051002	0					
ANR	3051184	PtrMemberAccess	( ( ReliSock * ) insock ) -> accept		3051002	0					
ANR	3051185	CastExpression	( ReliSock * ) insock		3051002	0					
ANR	3051186	CastTarget	ReliSock *		3051002	0					
ANR	3051187	Identifier	insock		3051002	1					
ANR	3051188	Identifier	accept		3051002	1					
ANR	3051189	ArgumentList			3051002	1					
ANR	3051190	IfStatement	if ( ! ( args -> accepted_sock ) )		3051002	6					
ANR	3051191	Condition	! ( args -> accepted_sock )	3730:11:112327:112348	3051002	0	True				
ANR	3051192	UnaryOperationExpression	! ( args -> accepted_sock )		3051002	0					
ANR	3051193	UnaryOperator	!		3051002	0					
ANR	3051194	PtrMemberAccess	args -> accepted_sock		3051002	1					
ANR	3051195	Identifier	args		3051002	0					
ANR	3051196	Identifier	accepted_sock		3051002	1					
ANR	3051197	CompoundStatement		41:36:1592:1592	3051002	1					
ANR	3051198	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: accept() failed!"" )"	3731:10:112364:112413	3051002	0	True				
ANR	3051199	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: accept() failed!"" )"		3051002	0					
ANR	3051200	Callee	dprintf		3051002	0					
ANR	3051201	Identifier	dprintf		3051002	0					
ANR	3051202	ArgumentList	D_ALWAYS		3051002	1					
ANR	3051203	Argument	D_ALWAYS		3051002	0					
ANR	3051204	Identifier	D_ALWAYS		3051002	0					
ANR	3051205	Argument	"""DaemonCore: accept() failed!"""		3051002	1					
ANR	3051206	PrimaryExpression	"""DaemonCore: accept() failed!"""		3051002	0					
ANR	3051207	Statement	delete	3733:10:112487:112492	3051002	1	True				
ANR	3051208	ExpressionStatement	args	3733:17:112494:112498	3051002	2	True				
ANR	3051209	Identifier	args		3051002	0					
ANR	3051210	ReturnStatement	return ;	3734:10:112510:112516	3051002	3	True				
ANR	3051211	ExpressionStatement	iAcceptCnt --	3737:12:112539:112552	3051002	7	True				
ANR	3051212	PostIncDecOperationExpression	iAcceptCnt --		3051002	0					
ANR	3051213	Identifier	iAcceptCnt		3051002	0					
ANR	3051214	IncDec	--		3051002	1					
ANR	3051215	ElseStatement	else		3051002	0					
ANR	3051216	CompoundStatement		50:12:1807:1807	3051002	0					
ANR	3051217	ExpressionStatement	set_service_tid = true	3740:6:112575:112597	3051002	0	True				
ANR	3051218	AssignmentExpression	set_service_tid = true		3051002	0		=			
ANR	3051219	Identifier	set_service_tid		3051002	0					
ANR	3051220	Identifier	true		3051002	1					
ANR	3051221	ExpressionStatement	iAcceptCnt = 0	3741:12:112611:112623	3051002	1	True				
ANR	3051222	AssignmentExpression	iAcceptCnt = 0		3051002	0		=			
ANR	3051223	Identifier	iAcceptCnt		3051002	0					
ANR	3051224	PrimaryExpression	0		3051002	1					
ANR	3051225	ExpressionStatement	args -> i = i	3743:5:112637:112648	3051002	11	True				
ANR	3051226	AssignmentExpression	args -> i = i		3051002	0		=			
ANR	3051227	PtrMemberAccess	args -> i		3051002	0					
ANR	3051228	Identifier	args		3051002	0					
ANR	3051229	Identifier	i		3051002	1					
ANR	3051230	Identifier	i		3051002	1					
ANR	3051231	ExpressionStatement	args -> default_to_HandleCommand = default_to_HandleCommand	3744:5:112655:112712	3051002	12	True				
ANR	3051232	AssignmentExpression	args -> default_to_HandleCommand = default_to_HandleCommand		3051002	0		=			
ANR	3051233	PtrMemberAccess	args -> default_to_HandleCommand		3051002	0					
ANR	3051234	Identifier	args		3051002	0					
ANR	3051235	Identifier	default_to_HandleCommand		3051002	1					
ANR	3051236	Identifier	default_to_HandleCommand		3051002	1					
ANR	3051237	IdentifierDeclStatement	int * pTid = NULL ;	3745:5:112719:112735	3051002	13	True				
ANR	3051238	IdentifierDecl	* pTid = NULL		3051002	0					
ANR	3051239	IdentifierDeclType	int *		3051002	0					
ANR	3051240	Identifier	pTid		3051002	1					
ANR	3051241	AssignmentExpression	* pTid = NULL		3051002	2		=			
ANR	3051242	Identifier	NULL		3051002	0					
ANR	3051243	Identifier	NULL		3051002	1					
ANR	3051244	IfStatement	if ( set_service_tid )		3051002	14					
ANR	3051245	Condition	set_service_tid	3746:10:112747:112761	3051002	0	True				
ANR	3051246	Identifier	set_service_tid		3051002	0					
ANR	3051247	CompoundStatement		57:28:2005:2005	3051002	1					
ANR	3051248	ExpressionStatement	pTid = & ( ( * sockTable ) [ i ] . servicing_tid )	3749:6:112908:112947	3051002	0	True				
ANR	3051249	AssignmentExpression	pTid = & ( ( * sockTable ) [ i ] . servicing_tid )		3051002	0		=			
ANR	3051250	Identifier	pTid		3051002	0					
ANR	3051251	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . servicing_tid )		3051002	1					
ANR	3051252	UnaryOperator	&		3051002	0					
ANR	3051253	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3051002	1					
ANR	3051254	ArrayIndexing	( * sockTable ) [ i ]		3051002	0					
ANR	3051255	UnaryOperationExpression	* sockTable		3051002	0					
ANR	3051256	UnaryOperator	*		3051002	0					
ANR	3051257	Identifier	sockTable		3051002	1					
ANR	3051258	Identifier	i		3051002	1					
ANR	3051259	Identifier	servicing_tid		3051002	1					
ANR	3051260	ExpressionStatement	"CondorThreads :: pool_add ( DaemonCore :: CallSocketHandler_worker_demarshall , args , pTid , ( * sockTable ) [ i ] . handler_descrip )"	3751:5:112961:113088	3051002	15	True				
ANR	3051261	CallExpression	"CondorThreads :: pool_add ( DaemonCore :: CallSocketHandler_worker_demarshall , args , pTid , ( * sockTable ) [ i ] . handler_descrip )"		3051002	0					
ANR	3051262	Callee	CondorThreads :: pool_add		3051002	0					
ANR	3051263	Identifier	CondorThreads :: pool_add		3051002	0					
ANR	3051264	ArgumentList	DaemonCore :: CallSocketHandler_worker_demarshall		3051002	1					
ANR	3051265	Argument	DaemonCore :: CallSocketHandler_worker_demarshall		3051002	0					
ANR	3051266	Identifier	DaemonCore :: CallSocketHandler_worker_demarshall		3051002	0					
ANR	3051267	Argument	args		3051002	1					
ANR	3051268	Identifier	args		3051002	0					
ANR	3051269	Argument	pTid		3051002	2					
ANR	3051270	Identifier	pTid		3051002	0					
ANR	3051271	Argument	( * sockTable ) [ i ] . handler_descrip		3051002	3					
ANR	3051272	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3051002	0					
ANR	3051273	ArrayIndexing	( * sockTable ) [ i ]		3051002	0					
ANR	3051274	UnaryOperationExpression	* sockTable		3051002	0					
ANR	3051275	UnaryOperator	*		3051002	0					
ANR	3051276	Identifier	sockTable		3051002	1					
ANR	3051277	Identifier	i		3051002	1					
ANR	3051278	Identifier	handler_descrip		3051002	1					
ANR	3051279	ReturnType	void		3051002	1					
ANR	3051280	Identifier	DaemonCore :: CallSocketHandler		3051002	2					
ANR	3051281	ParameterList	"int & i , bool default_to_HandleCommand"		3051002	3					
ANR	3051282	Parameter	int & i	3689:31:110719:110724	3051002	0	True				
ANR	3051283	ParameterType	int &		3051002	0					
ANR	3051284	Identifier	i		3051002	1					
ANR	3051285	Parameter	bool default_to_HandleCommand	3689:39:110727:110755	3051002	1	True				
ANR	3051286	ParameterType	bool		3051002	0					
ANR	3051287	Identifier	default_to_HandleCommand		3051002	1					
ANR	3051288	CFGEntryNode	ENTRY		3051002		True				
ANR	3051289	CFGExitNode	EXIT		3051002		True				
ANR	3051290	Symbol	( * sockTable ) [ i ] . iosock -> get_file_desc		3051002						
ANR	3051291	Symbol	Sock :: sock_special		3051002						
ANR	3051292	Symbol	* * sockTable		3051002						
ANR	3051293	Symbol	( ( ReliSock * ) insock ) -> _special_state		3051002						
ANR	3051294	Symbol	pTid		3051002						
ANR	3051295	Symbol	iAcceptCnt		3051002						
ANR	3051296	Symbol	( * sockTable ) [ i ] . handlercpp		3051002						
ANR	3051297	Symbol	Selector :: IO_READ		3051002						
ANR	3051298	Symbol	( * sockTable ) [ i ] . handler_descrip		3051002						
ANR	3051299	Symbol	* args		3051002						
ANR	3051300	Symbol	args -> default_to_HandleCommand		3051002						
ANR	3051301	Symbol	set_service_tid		3051002						
ANR	3051302	Symbol	( * sockTable ) [ i ] . iosock		3051002						
ANR	3051303	Symbol	insock		3051002						
ANR	3051304	Symbol	Stream :: reli_sock		3051002						
ANR	3051305	Symbol	selector		3051002						
ANR	3051306	Symbol	ReliSock :: relisock_listen		3051002						
ANR	3051307	Symbol	* ( * sockTable ) [ i ] . iosock		3051002						
ANR	3051308	Symbol	* * i		3051002						
ANR	3051309	Symbol	NULL		3051002						
ANR	3051310	Symbol	m_iMaxAcceptsPerCycle		3051002						
ANR	3051311	Symbol	* * * sockTable		3051002						
ANR	3051312	Symbol	sockTable		3051002						
ANR	3051313	Symbol	selector . has_ready		3051002						
ANR	3051314	Symbol	false		3051002						
ANR	3051315	Symbol	D_ALWAYS		3051002						
ANR	3051316	Symbol	i		3051002						
ANR	3051317	Symbol	args -> accepted_sock		3051002						
ANR	3051318	Symbol	args		3051002						
ANR	3051319	Symbol	insock -> type		3051002						
ANR	3051320	Symbol	( ( ReliSock * ) insock ) -> _state		3051002						
ANR	3051321	Symbol	* i		3051002						
ANR	3051322	Symbol	* sockTable		3051002						
ANR	3051323	Symbol	* insock		3051002						
ANR	3051324	Symbol	args -> i		3051002						
ANR	3051325	Symbol	DaemonCore :: CallSocketHandler_worker_demarshall		3051002						
ANR	3051326	Symbol	true		3051002						
ANR	3051327	Symbol	& ( * sockTable ) [ i ] . servicing_tid		3051002						
ANR	3051328	Symbol	( ( ReliSock * ) insock ) -> accept		3051002						
ANR	3051329	Symbol	default_to_HandleCommand		3051002						
ANR	3051330	Symbol	( * sockTable ) [ i ] . handler		3051002						
ANR	3051331	Function	DaemonCore :: CallSocketHandler_worker_demarshall	3757:0:113100:113374							
ANR	3051332	FunctionDef	DaemonCore :: CallSocketHandler_worker_demarshall (void * arg)		3051331	0					
ANR	3051333	CompoundStatement		3759:0:113164:113374	3051331	0					
ANR	3051334	IdentifierDeclStatement	struct CallSocketHandler_args * args = ( struct CallSocketHandler_args * ) arg ;	3760:1:113167:113241	3051331	0	True				
ANR	3051335	IdentifierDecl	* args = ( struct CallSocketHandler_args * ) arg		3051331	0					
ANR	3051336	IdentifierDeclType	struct CallSocketHandler_args *		3051331	0					
ANR	3051337	Identifier	args		3051331	1					
ANR	3051338	AssignmentExpression	* args = ( struct CallSocketHandler_args * ) arg		3051331	2		=			
ANR	3051339	Identifier	args		3051331	0					
ANR	3051340	CastExpression	( struct CallSocketHandler_args * ) arg		3051331	1					
ANR	3051341	CastTarget	struct CallSocketHandler_args *		3051331	0					
ANR	3051342	Identifier	arg		3051331	1					
ANR	3051343	ExpressionStatement	"daemonCore -> CallSocketHandler_worker ( args -> i , args -> default_to_HandleCommand , args -> accepted_sock )"	3762:1:113245:113357	3051331	1	True				
ANR	3051344	CallExpression	"daemonCore -> CallSocketHandler_worker ( args -> i , args -> default_to_HandleCommand , args -> accepted_sock )"		3051331	0					
ANR	3051345	Callee	daemonCore -> CallSocketHandler_worker		3051331	0					
ANR	3051346	PtrMemberAccess	daemonCore -> CallSocketHandler_worker		3051331	0					
ANR	3051347	Identifier	daemonCore		3051331	0					
ANR	3051348	Identifier	CallSocketHandler_worker		3051331	1					
ANR	3051349	ArgumentList	args -> i		3051331	1					
ANR	3051350	Argument	args -> i		3051331	0					
ANR	3051351	PtrMemberAccess	args -> i		3051331	0					
ANR	3051352	Identifier	args		3051331	0					
ANR	3051353	Identifier	i		3051331	1					
ANR	3051354	Argument	args -> default_to_HandleCommand		3051331	1					
ANR	3051355	PtrMemberAccess	args -> default_to_HandleCommand		3051331	0					
ANR	3051356	Identifier	args		3051331	0					
ANR	3051357	Identifier	default_to_HandleCommand		3051331	1					
ANR	3051358	Argument	args -> accepted_sock		3051331	2					
ANR	3051359	PtrMemberAccess	args -> accepted_sock		3051331	0					
ANR	3051360	Identifier	args		3051331	0					
ANR	3051361	Identifier	accepted_sock		3051331	1					
ANR	3051362	Statement	delete	3766:1:113361:113366	3051331	2	True				
ANR	3051363	ExpressionStatement	args	3766:8:113368:113372	3051331	3	True				
ANR	3051364	Identifier	args		3051331	0					
ANR	3051365	ReturnType	void		3051331	1					
ANR	3051366	Identifier	DaemonCore :: CallSocketHandler_worker_demarshall		3051331	2					
ANR	3051367	ParameterList	void * arg		3051331	3					
ANR	3051368	Parameter	void * arg	3758:48:113153:113161	3051331	0	True				
ANR	3051369	ParameterType	void *		3051331	0					
ANR	3051370	Identifier	arg		3051331	1					
ANR	3051371	CFGEntryNode	ENTRY		3051331		True				
ANR	3051372	CFGExitNode	EXIT		3051331		True				
ANR	3051373	Symbol	args		3051331						
ANR	3051374	Symbol	args -> default_to_HandleCommand		3051331						
ANR	3051375	Symbol	args -> i		3051331						
ANR	3051376	Symbol	arg		3051331						
ANR	3051377	Symbol	daemonCore		3051331						
ANR	3051378	Symbol	* args		3051331						
ANR	3051379	Symbol	args -> accepted_sock		3051331						
ANR	3051380	Function	DaemonCore :: CallSocketHandler_worker	3769:0:113377:116057							
ANR	3051381	FunctionDef	"DaemonCore :: CallSocketHandler_worker (int i , bool default_to_HandleCommand , Stream * asock)"		3051380	0					
ANR	3051382	CompoundStatement		3771:0:113474:116057	3051380	0					
ANR	3051383	IdentifierDeclStatement	char * handlerName = NULL ;	3772:1:113477:113501	3051380	0	True				
ANR	3051384	IdentifierDecl	* handlerName = NULL		3051380	0					
ANR	3051385	IdentifierDeclType	char *		3051380	0					
ANR	3051386	Identifier	handlerName		3051380	1					
ANR	3051387	AssignmentExpression	* handlerName = NULL		3051380	2		=			
ANR	3051388	Identifier	NULL		3051380	0					
ANR	3051389	Identifier	NULL		3051380	1					
ANR	3051390	IdentifierDeclStatement	int result = 0 ;	3773:1:113504:113516	3051380	1	True				
ANR	3051391	IdentifierDecl	result = 0		3051380	0					
ANR	3051392	IdentifierDeclType	int		3051380	0					
ANR	3051393	Identifier	result		3051380	1					
ANR	3051394	AssignmentExpression	result = 0		3051380	2		=			
ANR	3051395	Identifier	result		3051380	0					
ANR	3051396	PrimaryExpression	0		3051380	1					
ANR	3051397	ExpressionStatement	curr_dataptr = & ( ( * sockTable ) [ i ] . data_ptr )	3782:1:113792:113835	3051380	2	True				
ANR	3051398	AssignmentExpression	curr_dataptr = & ( ( * sockTable ) [ i ] . data_ptr )		3051380	0		=			
ANR	3051399	Identifier	curr_dataptr		3051380	0					
ANR	3051400	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . data_ptr )		3051380	1					
ANR	3051401	UnaryOperator	&		3051380	0					
ANR	3051402	MemberAccess	( * sockTable ) [ i ] . data_ptr		3051380	1					
ANR	3051403	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051404	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051405	UnaryOperator	*		3051380	0					
ANR	3051406	Identifier	sockTable		3051380	1					
ANR	3051407	Identifier	i		3051380	1					
ANR	3051408	Identifier	data_ptr		3051380	1					
ANR	3051409	IfStatement	if ( ( * sockTable ) [ i ] . handler || ( * sockTable ) [ i ] . handlercpp )		3051380	3					
ANR	3051410	Condition	( * sockTable ) [ i ] . handler || ( * sockTable ) [ i ] . handlercpp	3785:6:113863:113915	3051380	0	True				
ANR	3051411	OrExpression	( * sockTable ) [ i ] . handler || ( * sockTable ) [ i ] . handlercpp		3051380	0		||			
ANR	3051412	MemberAccess	( * sockTable ) [ i ] . handler		3051380	0					
ANR	3051413	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051414	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051415	UnaryOperator	*		3051380	0					
ANR	3051416	Identifier	sockTable		3051380	1					
ANR	3051417	Identifier	i		3051380	1					
ANR	3051418	Identifier	handler		3051380	1					
ANR	3051419	MemberAccess	( * sockTable ) [ i ] . handlercpp		3051380	1					
ANR	3051420	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051421	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051422	UnaryOperator	*		3051380	0					
ANR	3051423	Identifier	sockTable		3051380	1					
ANR	3051424	Identifier	i		3051380	1					
ANR	3051425	Identifier	handlercpp		3051380	1					
ANR	3051426	CompoundStatement		37:2:1156:1226	3051380	1					
ANR	3051427	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Calling Handler <%s> for Socket <%s>\\n"" , ( * sockTable ) [ i ] . handler_descrip , ( * sockTable ) [ i ] . iosock_descrip )"	3787:3:113926:114069	3051380	0	True				
ANR	3051428	CallExpression	"dprintf ( D_DAEMONCORE , ""Calling Handler <%s> for Socket <%s>\\n"" , ( * sockTable ) [ i ] . handler_descrip , ( * sockTable ) [ i ] . iosock_descrip )"		3051380	0					
ANR	3051429	Callee	dprintf		3051380	0					
ANR	3051430	Identifier	dprintf		3051380	0					
ANR	3051431	ArgumentList	D_DAEMONCORE		3051380	1					
ANR	3051432	Argument	D_DAEMONCORE		3051380	0					
ANR	3051433	Identifier	D_DAEMONCORE		3051380	0					
ANR	3051434	Argument	"""Calling Handler <%s> for Socket <%s>\\n"""		3051380	1					
ANR	3051435	PrimaryExpression	"""Calling Handler <%s> for Socket <%s>\\n"""		3051380	0					
ANR	3051436	Argument	( * sockTable ) [ i ] . handler_descrip		3051380	2					
ANR	3051437	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3051380	0					
ANR	3051438	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051439	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051440	UnaryOperator	*		3051380	0					
ANR	3051441	Identifier	sockTable		3051380	1					
ANR	3051442	Identifier	i		3051380	1					
ANR	3051443	Identifier	handler_descrip		3051380	1					
ANR	3051444	Argument	( * sockTable ) [ i ] . iosock_descrip		3051380	3					
ANR	3051445	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		3051380	0					
ANR	3051446	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051447	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051448	UnaryOperator	*		3051380	0					
ANR	3051449	Identifier	sockTable		3051380	1					
ANR	3051450	Identifier	i		3051380	1					
ANR	3051451	Identifier	iosock_descrip		3051380	1					
ANR	3051452	ExpressionStatement	handlerName = strdup ( ( * sockTable ) [ i ] . handler_descrip )	3791:3:114074:114127	3051380	1	True				
ANR	3051453	AssignmentExpression	handlerName = strdup ( ( * sockTable ) [ i ] . handler_descrip )		3051380	0		=			
ANR	3051454	Identifier	handlerName		3051380	0					
ANR	3051455	CallExpression	strdup ( ( * sockTable ) [ i ] . handler_descrip )		3051380	1					
ANR	3051456	Callee	strdup		3051380	0					
ANR	3051457	Identifier	strdup		3051380	0					
ANR	3051458	ArgumentList	( * sockTable ) [ i ] . handler_descrip		3051380	1					
ANR	3051459	Argument	( * sockTable ) [ i ] . handler_descrip		3051380	0					
ANR	3051460	MemberAccess	( * sockTable ) [ i ] . handler_descrip		3051380	0					
ANR	3051461	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051462	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051463	UnaryOperator	*		3051380	0					
ANR	3051464	Identifier	sockTable		3051380	1					
ANR	3051465	Identifier	i		3051380	1					
ANR	3051466	Identifier	handler_descrip		3051380	1					
ANR	3051467	ExpressionStatement	"dprintf ( D_COMMAND , ""Calling Handler <%s> (%d)\\n"" , handlerName , i )"	3792:3:114132:114196	3051380	2	True				
ANR	3051468	CallExpression	"dprintf ( D_COMMAND , ""Calling Handler <%s> (%d)\\n"" , handlerName , i )"		3051380	0					
ANR	3051469	Callee	dprintf		3051380	0					
ANR	3051470	Identifier	dprintf		3051380	0					
ANR	3051471	ArgumentList	D_COMMAND		3051380	1					
ANR	3051472	Argument	D_COMMAND		3051380	0					
ANR	3051473	Identifier	D_COMMAND		3051380	0					
ANR	3051474	Argument	"""Calling Handler <%s> (%d)\\n"""		3051380	1					
ANR	3051475	PrimaryExpression	"""Calling Handler <%s> (%d)\\n"""		3051380	0					
ANR	3051476	Argument	handlerName		3051380	2					
ANR	3051477	Identifier	handlerName		3051380	0					
ANR	3051478	Argument	i		3051380	3					
ANR	3051479	Identifier	i		3051380	0					
ANR	3051480	IdentifierDeclStatement	UtcTime handler_start_time ;	3794:2:114201:114227	3051380	3	True				
ANR	3051481	IdentifierDecl	handler_start_time		3051380	0					
ANR	3051482	IdentifierDeclType	UtcTime		3051380	0					
ANR	3051483	Identifier	handler_start_time		3051380	1					
ANR	3051484	ExpressionStatement	handler_start_time . getTime ( )	3795:2:114231:114259	3051380	4	True				
ANR	3051485	CallExpression	handler_start_time . getTime ( )		3051380	0					
ANR	3051486	Callee	handler_start_time . getTime		3051380	0					
ANR	3051487	MemberAccess	handler_start_time . getTime		3051380	0					
ANR	3051488	Identifier	handler_start_time		3051380	0					
ANR	3051489	Identifier	getTime		3051380	1					
ANR	3051490	ArgumentList			3051380	1					
ANR	3051491	IfStatement	if ( ( * sockTable ) [ i ] . handler )		3051380	5					
ANR	3051492	Condition	( * sockTable ) [ i ] . handler	3797:6:114268:114290	3051380	0	True				
ANR	3051493	MemberAccess	( * sockTable ) [ i ] . handler		3051380	0					
ANR	3051494	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051495	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051496	UnaryOperator	*		3051380	0					
ANR	3051497	Identifier	sockTable		3051380	1					
ANR	3051498	Identifier	i		3051380	1					
ANR	3051499	Identifier	handler		3051380	1					
ANR	3051500	CompoundStatement		27:32:819:819	3051380	1					
ANR	3051501	ExpressionStatement	"result = ( * ( ( * sockTable ) [ i ] . handler ) ) ( ( * sockTable ) [ i ] . service , ( * sockTable ) [ i ] . iosock )"	3799:2:114316:114404	3051380	0	True				
ANR	3051502	AssignmentExpression	"result = ( * ( ( * sockTable ) [ i ] . handler ) ) ( ( * sockTable ) [ i ] . service , ( * sockTable ) [ i ] . iosock )"		3051380	0		=			
ANR	3051503	Identifier	result		3051380	0					
ANR	3051504	CallExpression	"( * ( ( * sockTable ) [ i ] . handler ) ) ( ( * sockTable ) [ i ] . service , ( * sockTable ) [ i ] . iosock )"		3051380	1					
ANR	3051505	Callee	* ( ( * sockTable ) [ i ] . handler )		3051380	0					
ANR	3051506	UnaryOperationExpression	* ( ( * sockTable ) [ i ] . handler )		3051380	0					
ANR	3051507	UnaryOperator	*		3051380	0					
ANR	3051508	MemberAccess	( * sockTable ) [ i ] . handler		3051380	1					
ANR	3051509	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051510	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051511	UnaryOperator	*		3051380	0					
ANR	3051512	Identifier	sockTable		3051380	1					
ANR	3051513	Identifier	i		3051380	1					
ANR	3051514	Identifier	handler		3051380	1					
ANR	3051515	ArgumentList	( * sockTable ) [ i ] . service		3051380	1					
ANR	3051516	Argument	( * sockTable ) [ i ] . service		3051380	0					
ANR	3051517	MemberAccess	( * sockTable ) [ i ] . service		3051380	0					
ANR	3051518	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051519	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051520	UnaryOperator	*		3051380	0					
ANR	3051521	Identifier	sockTable		3051380	1					
ANR	3051522	Identifier	i		3051380	1					
ANR	3051523	Identifier	service		3051380	1					
ANR	3051524	Argument	( * sockTable ) [ i ] . iosock		3051380	1					
ANR	3051525	MemberAccess	( * sockTable ) [ i ] . iosock		3051380	0					
ANR	3051526	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051527	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051528	UnaryOperator	*		3051380	0					
ANR	3051529	Identifier	sockTable		3051380	1					
ANR	3051530	Identifier	i		3051380	1					
ANR	3051531	Identifier	iosock		3051380	1					
ANR	3051532	ElseStatement	else		3051380	0					
ANR	3051533	IfStatement	if ( ( * sockTable ) [ i ] . handlercpp )		3051380	0					
ANR	3051534	Condition	( * sockTable ) [ i ] . handlercpp	3800:13:114419:114444	3051380	0	True				
ANR	3051535	MemberAccess	( * sockTable ) [ i ] . handlercpp		3051380	0					
ANR	3051536	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051537	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051538	UnaryOperator	*		3051380	0					
ANR	3051539	Identifier	sockTable		3051380	1					
ANR	3051540	Identifier	i		3051380	1					
ANR	3051541	Identifier	handlercpp		3051380	1					
ANR	3051542	CompoundStatement		30:42:973:973	3051380	1					
ANR	3051543	Statement	result	3802:2:114472:114477	3051380	0	True				
ANR	3051544	Statement	=	3802:9:114479:114479	3051380	1	True				
ANR	3051545	Statement	(	3802:11:114481:114481	3051380	2	True				
ANR	3051546	Statement	(	3802:12:114482:114482	3051380	3	True				
ANR	3051547	Statement	*	3802:13:114483:114483	3051380	4	True				
ANR	3051548	Statement	sockTable	3802:14:114484:114492	3051380	5	True				
ANR	3051549	Statement	)	3802:23:114493:114493	3051380	6	True				
ANR	3051550	Statement	[	3802:24:114494:114494	3051380	7	True				
ANR	3051551	Statement	i	3802:25:114495:114495	3051380	8	True				
ANR	3051552	Statement	]	3802:26:114496:114496	3051380	9	True				
ANR	3051553	Statement	.	3802:27:114497:114497	3051380	10	True				
ANR	3051554	Statement	service	3802:28:114498:114504	3051380	11	True				
ANR	3051555	Statement	->*	3802:35:114505:114507	3051380	12	True				
ANR	3051556	Statement	(	3802:38:114508:114508	3051380	13	True				
ANR	3051557	Statement	(	3802:40:114510:114510	3051380	14	True				
ANR	3051558	Statement	*	3802:41:114511:114511	3051380	15	True				
ANR	3051559	Statement	sockTable	3802:42:114512:114520	3051380	16	True				
ANR	3051560	Statement	)	3802:51:114521:114521	3051380	17	True				
ANR	3051561	Statement	[	3802:52:114522:114522	3051380	18	True				
ANR	3051562	Statement	i	3802:53:114523:114523	3051380	19	True				
ANR	3051563	Statement	]	3802:54:114524:114524	3051380	20	True				
ANR	3051564	Statement	.	3802:55:114525:114525	3051380	21	True				
ANR	3051565	Statement	handlercpp	3802:56:114526:114535	3051380	22	True				
ANR	3051566	Statement	)	3802:66:114536:114536	3051380	23	True				
ANR	3051567	Statement	)	3802:67:114537:114537	3051380	24	True				
ANR	3051568	ExpressionStatement	( * sockTable ) [ i ] . iosock	3802:68:114538:114562	3051380	25	True				
ANR	3051569	MemberAccess	( * sockTable ) [ i ] . iosock		3051380	0					
ANR	3051570	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051571	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051572	UnaryOperator	*		3051380	0					
ANR	3051573	Identifier	sockTable		3051380	1					
ANR	3051574	Identifier	i		3051380	1					
ANR	3051575	Identifier	iosock		3051380	1					
ANR	3051576	IdentifierDeclStatement	UtcTime handler_stop_time ;	3805:2:114571:114596	3051380	6	True				
ANR	3051577	IdentifierDecl	handler_stop_time		3051380	0					
ANR	3051578	IdentifierDeclType	UtcTime		3051380	0					
ANR	3051579	Identifier	handler_stop_time		3051380	1					
ANR	3051580	ExpressionStatement	handler_stop_time . getTime ( )	3806:2:114600:114627	3051380	7	True				
ANR	3051581	CallExpression	handler_stop_time . getTime ( )		3051380	0					
ANR	3051582	Callee	handler_stop_time . getTime		3051380	0					
ANR	3051583	MemberAccess	handler_stop_time . getTime		3051380	0					
ANR	3051584	Identifier	handler_stop_time		3051380	0					
ANR	3051585	Identifier	getTime		3051380	1					
ANR	3051586	ArgumentList			3051380	1					
ANR	3051587	IdentifierDeclStatement	float handler_time = handler_stop_time . difference ( & handler_start_time ) ;	3807:2:114631:114701	3051380	8	True				
ANR	3051588	IdentifierDecl	handler_time = handler_stop_time . difference ( & handler_start_time )		3051380	0					
ANR	3051589	IdentifierDeclType	float		3051380	0					
ANR	3051590	Identifier	handler_time		3051380	1					
ANR	3051591	AssignmentExpression	handler_time = handler_stop_time . difference ( & handler_start_time )		3051380	2		=			
ANR	3051592	Identifier	handler_time		3051380	0					
ANR	3051593	CallExpression	handler_stop_time . difference ( & handler_start_time )		3051380	1					
ANR	3051594	Callee	handler_stop_time . difference		3051380	0					
ANR	3051595	MemberAccess	handler_stop_time . difference		3051380	0					
ANR	3051596	Identifier	handler_stop_time		3051380	0					
ANR	3051597	Identifier	difference		3051380	1					
ANR	3051598	ArgumentList	& handler_start_time		3051380	1					
ANR	3051599	Argument	& handler_start_time		3051380	0					
ANR	3051600	UnaryOperationExpression	& handler_start_time		3051380	0					
ANR	3051601	UnaryOperator	&		3051380	0					
ANR	3051602	Identifier	handler_start_time		3051380	1					
ANR	3051603	ExpressionStatement	"dprintf ( D_COMMAND , ""Return from Handler <%s> %.4fs\\n"" , handlerName , handler_time )"	3809:2:114706:114787	3051380	9	True				
ANR	3051604	CallExpression	"dprintf ( D_COMMAND , ""Return from Handler <%s> %.4fs\\n"" , handlerName , handler_time )"		3051380	0					
ANR	3051605	Callee	dprintf		3051380	0					
ANR	3051606	Identifier	dprintf		3051380	0					
ANR	3051607	ArgumentList	D_COMMAND		3051380	1					
ANR	3051608	Argument	D_COMMAND		3051380	0					
ANR	3051609	Identifier	D_COMMAND		3051380	0					
ANR	3051610	Argument	"""Return from Handler <%s> %.4fs\\n"""		3051380	1					
ANR	3051611	PrimaryExpression	"""Return from Handler <%s> %.4fs\\n"""		3051380	0					
ANR	3051612	Argument	handlerName		3051380	2					
ANR	3051613	Identifier	handlerName		3051380	0					
ANR	3051614	Argument	handler_time		3051380	3					
ANR	3051615	Identifier	handler_time		3051380	0					
ANR	3051616	ExpressionStatement	free ( handlerName )	3810:2:114791:114808	3051380	10	True				
ANR	3051617	CallExpression	free ( handlerName )		3051380	0					
ANR	3051618	Callee	free		3051380	0					
ANR	3051619	Identifier	free		3051380	0					
ANR	3051620	ArgumentList	handlerName		3051380	1					
ANR	3051621	Argument	handlerName		3051380	0					
ANR	3051622	Identifier	handlerName		3051380	0					
ANR	3051623	ElseStatement	else		3051380	0					
ANR	3051624	IfStatement	if ( default_to_HandleCommand )		3051380	0					
ANR	3051625	Condition	default_to_HandleCommand	3812:10:114823:114846	3051380	0	True				
ANR	3051626	Identifier	default_to_HandleCommand		3051380	0					
ANR	3051627	CompoundStatement		42:37:1375:1375	3051380	1					
ANR	3051628	ExpressionStatement	"result = HandleReq ( i , asock )"	3816:2:114990:115017	3051380	0	True				
ANR	3051629	AssignmentExpression	"result = HandleReq ( i , asock )"		3051380	0		=			
ANR	3051630	Identifier	result		3051380	0					
ANR	3051631	CallExpression	"HandleReq ( i , asock )"		3051380	1					
ANR	3051632	Callee	HandleReq		3051380	0					
ANR	3051633	Identifier	HandleReq		3051380	0					
ANR	3051634	ArgumentList	i		3051380	1					
ANR	3051635	Argument	i		3051380	0					
ANR	3051636	Identifier	i		3051380	0					
ANR	3051637	Argument	asock		3051380	1					
ANR	3051638	Identifier	asock		3051380	0					
ANR	3051639	ElseStatement	else		3051380	0					
ANR	3051640	CompoundStatement		48:6:1553:1553	3051380	0					
ANR	3051641	ExpressionStatement	result = FALSE	3822:2:115159:115173	3051380	0	True				
ANR	3051642	AssignmentExpression	result = FALSE		3051380	0		=			
ANR	3051643	Identifier	result		3051380	0					
ANR	3051644	Identifier	FALSE		3051380	1					
ANR	3051645	ExpressionStatement	CheckPrivState ( )	3826:1:115225:115241	3051380	4	True				
ANR	3051646	CallExpression	CheckPrivState ( )		3051380	0					
ANR	3051647	Callee	CheckPrivState		3051380	0					
ANR	3051648	Identifier	CheckPrivState		3051380	0					
ANR	3051649	ArgumentList			3051380	1					
ANR	3051650	ExpressionStatement	curr_dataptr = NULL	3829:1:115269:115288	3051380	5	True				
ANR	3051651	AssignmentExpression	curr_dataptr = NULL		3051380	0		=			
ANR	3051652	Identifier	curr_dataptr		3051380	0					
ANR	3051653	Identifier	NULL		3051380	1					
ANR	3051654	IfStatement	if ( result != KEEP_STREAM )		3051380	6					
ANR	3051655	Condition	result != KEEP_STREAM	3834:6:115417:115437	3051380	0	True				
ANR	3051656	EqualityExpression	result != KEEP_STREAM		3051380	0		!=			
ANR	3051657	Identifier	result		3051380	0					
ANR	3051658	Identifier	KEEP_STREAM		3051380	1					
ANR	3051659	CompoundStatement		64:30:1966:1966	3051380	1					
ANR	3051660	Statement	delete	3836:2:115475:115480	3051380	0	True				
ANR	3051661	ExpressionStatement	( * sockTable ) [ i ] . iosock	3836:9:115482:115504	3051380	1	True				
ANR	3051662	MemberAccess	( * sockTable ) [ i ] . iosock		3051380	0					
ANR	3051663	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051664	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051665	UnaryOperator	*		3051380	0					
ANR	3051666	Identifier	sockTable		3051380	1					
ANR	3051667	Identifier	i		3051380	1					
ANR	3051668	Identifier	iosock		3051380	1					
ANR	3051669	ExpressionStatement	Cancel_Socket ( ( * sockTable ) [ i ] . iosock )	3838:2:115540:115579	3051380	2	True				
ANR	3051670	CallExpression	Cancel_Socket ( ( * sockTable ) [ i ] . iosock )		3051380	0					
ANR	3051671	Callee	Cancel_Socket		3051380	0					
ANR	3051672	Identifier	Cancel_Socket		3051380	0					
ANR	3051673	ArgumentList	( * sockTable ) [ i ] . iosock		3051380	1					
ANR	3051674	Argument	( * sockTable ) [ i ] . iosock		3051380	0					
ANR	3051675	MemberAccess	( * sockTable ) [ i ] . iosock		3051380	0					
ANR	3051676	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051677	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051678	UnaryOperator	*		3051380	0					
ANR	3051679	Identifier	sockTable		3051380	1					
ANR	3051680	Identifier	i		3051380	1					
ANR	3051681	Identifier	iosock		3051380	1					
ANR	3051682	ElseStatement	else		3051380	0					
ANR	3051683	CompoundStatement		69:8:2114:2114	3051380	0					
ANR	3051684	IfStatement	if ( ( * sockTable ) [ i ] . servicing_tid && ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( ) )		3051380	0					
ANR	3051685	Condition	( * sockTable ) [ i ] . servicing_tid && ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )	3844:7:115804:115916	3051380	0	True				
ANR	3051686	AndExpression	( * sockTable ) [ i ] . servicing_tid && ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )		3051380	0		&&			
ANR	3051687	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3051380	0					
ANR	3051688	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051689	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051690	UnaryOperator	*		3051380	0					
ANR	3051691	Identifier	sockTable		3051380	1					
ANR	3051692	Identifier	i		3051380	1					
ANR	3051693	Identifier	servicing_tid		3051380	1					
ANR	3051694	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )		3051380	1		==			
ANR	3051695	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3051380	0					
ANR	3051696	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051697	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051698	UnaryOperator	*		3051380	0					
ANR	3051699	Identifier	sockTable		3051380	1					
ANR	3051700	Identifier	i		3051380	1					
ANR	3051701	Identifier	servicing_tid		3051380	1					
ANR	3051702	CallExpression	CondorThreads :: get_handle ( ) -> get_tid ( )		3051380	1					
ANR	3051703	Callee	CondorThreads :: get_handle ( ) -> get_tid		3051380	0					
ANR	3051704	PtrMemberAccess	CondorThreads :: get_handle ( ) -> get_tid		3051380	0					
ANR	3051705	CallExpression	CondorThreads :: get_handle ( )		3051380	0					
ANR	3051706	Callee	CondorThreads :: get_handle		3051380	0					
ANR	3051707	Identifier	CondorThreads :: get_handle		3051380	0					
ANR	3051708	ArgumentList			3051380	1					
ANR	3051709	Identifier	get_tid		3051380	1					
ANR	3051710	ArgumentList			3051380	1					
ANR	3051711	CompoundStatement		77:2:2448:2448	3051380	1					
ANR	3051712	ExpressionStatement	( * sockTable ) [ i ] . servicing_tid = 0	3848:4:115929:115962	3051380	0	True				
ANR	3051713	AssignmentExpression	( * sockTable ) [ i ] . servicing_tid = 0		3051380	0		=			
ANR	3051714	MemberAccess	( * sockTable ) [ i ] . servicing_tid		3051380	0					
ANR	3051715	ArrayIndexing	( * sockTable ) [ i ]		3051380	0					
ANR	3051716	UnaryOperationExpression	* sockTable		3051380	0					
ANR	3051717	UnaryOperator	*		3051380	0					
ANR	3051718	Identifier	sockTable		3051380	1					
ANR	3051719	Identifier	i		3051380	1					
ANR	3051720	Identifier	servicing_tid		3051380	1					
ANR	3051721	PrimaryExpression	0		3051380	1					
ANR	3051722	ExpressionStatement	daemonCore -> Wake_up_select ( )	3850:4:116019:116047	3051380	1	True				
ANR	3051723	CallExpression	daemonCore -> Wake_up_select ( )		3051380	0					
ANR	3051724	Callee	daemonCore -> Wake_up_select		3051380	0					
ANR	3051725	PtrMemberAccess	daemonCore -> Wake_up_select		3051380	0					
ANR	3051726	Identifier	daemonCore		3051380	0					
ANR	3051727	Identifier	Wake_up_select		3051380	1					
ANR	3051728	ArgumentList			3051380	1					
ANR	3051729	ReturnType	void		3051380	1					
ANR	3051730	Identifier	DaemonCore :: CallSocketHandler_worker		3051380	2					
ANR	3051731	ParameterList	"int i , bool default_to_HandleCommand , Stream * asock"		3051380	3					
ANR	3051732	Parameter	int i	3770:38:113420:113424	3051380	0	True				
ANR	3051733	ParameterType	int		3051380	0					
ANR	3051734	Identifier	i		3051380	1					
ANR	3051735	Parameter	bool default_to_HandleCommand	3770:45:113427:113455	3051380	1	True				
ANR	3051736	ParameterType	bool		3051380	0					
ANR	3051737	Identifier	default_to_HandleCommand		3051380	1					
ANR	3051738	Parameter	Stream * asock	3770:76:113458:113470	3051380	2	True				
ANR	3051739	ParameterType	Stream *		3051380	0					
ANR	3051740	Identifier	asock		3051380	1					
ANR	3051741	CFGEntryNode	ENTRY		3051380		True				
ANR	3051742	CFGExitNode	EXIT		3051380		True				
ANR	3051743	Symbol	& ( * sockTable ) [ i ] . data_ptr		3051380						
ANR	3051744	Symbol	handler_time		3051380						
ANR	3051745	Symbol	handlerName		3051380						
ANR	3051746	Symbol	* * sockTable		3051380						
ANR	3051747	Symbol	curr_dataptr		3051380						
ANR	3051748	Symbol	( * sockTable ) [ i ] . handlercpp		3051380						
ANR	3051749	Symbol	( * sockTable ) [ i ] . handler_descrip		3051380						
ANR	3051750	Symbol	KEEP_STREAM		3051380						
ANR	3051751	Symbol	result		3051380						
ANR	3051752	Symbol	( * sockTable ) [ i ] . service		3051380						
ANR	3051753	Symbol	( * sockTable ) [ i ] . iosock_descrip		3051380						
ANR	3051754	Symbol	& handler_start_time		3051380						
ANR	3051755	Symbol	daemonCore		3051380						
ANR	3051756	Symbol	( * sockTable ) [ i ] . iosock		3051380						
ANR	3051757	Symbol	* CondorThreads :: get_handle		3051380						
ANR	3051758	Symbol	CondorThreads :: get_handle		3051380						
ANR	3051759	Symbol	D_COMMAND		3051380						
ANR	3051760	Symbol	handler_stop_time . difference		3051380						
ANR	3051761	Symbol	* * i		3051380						
ANR	3051762	Symbol	NULL		3051380						
ANR	3051763	Symbol	handler_start_time		3051380						
ANR	3051764	Symbol	* * * sockTable		3051380						
ANR	3051765	Symbol	D_DAEMONCORE		3051380						
ANR	3051766	Symbol	* ( * sockTable ) [ i ] . handler		3051380						
ANR	3051767	Symbol	handler_stop_time		3051380						
ANR	3051768	Symbol	sockTable		3051380						
ANR	3051769	Symbol	i		3051380						
ANR	3051770	Symbol	asock		3051380						
ANR	3051771	Symbol	HandleReq		3051380						
ANR	3051772	Symbol	* i		3051380						
ANR	3051773	Symbol	CondorThreads :: get_handle ( ) -> get_tid		3051380						
ANR	3051774	Symbol	* sockTable		3051380						
ANR	3051775	Symbol	* ( ( * sockTable ) [ i ] . handler )		3051380						
ANR	3051776	Symbol	( * sockTable ) [ i ] . servicing_tid		3051380						
ANR	3051777	Symbol	FALSE		3051380						
ANR	3051778	Symbol	strdup		3051380						
ANR	3051779	Symbol	default_to_HandleCommand		3051380						
ANR	3051780	Symbol	( * sockTable ) [ i ] . handler		3051380						
ANR	3051781	Function	DaemonCore :: CommandNumToTableIndex	3855:0:116060:116564							
ANR	3051782	FunctionDef	"DaemonCore :: CommandNumToTableIndex (int cmd , int * cmd_index)"		3051781	0					
ANR	3051783	CompoundStatement		3857:0:116124:116564	3051781	0					
ANR	3051784	IfStatement	if ( cmd < 0 )		3051781	0					
ANR	3051785	Condition	cmd < 0	3859:6:116160:116166	3051781	0	True				
ANR	3051786	RelationalExpression	cmd < 0		3051781	0		<			
ANR	3051787	Identifier	cmd		3051781	0					
ANR	3051788	PrimaryExpression	0		3051781	1					
ANR	3051789	ExpressionStatement	* cmd_index = - cmd % maxCommand	3860:2:116172:116202	3051781	1	True				
ANR	3051790	AssignmentExpression	* cmd_index = - cmd % maxCommand		3051781	0		=			
ANR	3051791	UnaryOperationExpression	* cmd_index		3051781	0					
ANR	3051792	UnaryOperator	*		3051781	0					
ANR	3051793	Identifier	cmd_index		3051781	1					
ANR	3051794	MultiplicativeExpression	- cmd % maxCommand		3051781	1		%			
ANR	3051795	UnaryOperationExpression	- cmd		3051781	0					
ANR	3051796	UnaryOperator	-		3051781	0					
ANR	3051797	Identifier	cmd		3051781	1					
ANR	3051798	Identifier	maxCommand		3051781	1					
ANR	3051799	ElseStatement	else		3051781	0					
ANR	3051800	ExpressionStatement	* cmd_index = cmd % maxCommand	3862:2:116212:116241	3051781	0	True				
ANR	3051801	AssignmentExpression	* cmd_index = cmd % maxCommand		3051781	0		=			
ANR	3051802	UnaryOperationExpression	* cmd_index		3051781	0					
ANR	3051803	UnaryOperator	*		3051781	0					
ANR	3051804	Identifier	cmd_index		3051781	1					
ANR	3051805	MultiplicativeExpression	cmd % maxCommand		3051781	1		%			
ANR	3051806	Identifier	cmd		3051781	0					
ANR	3051807	Identifier	maxCommand		3051781	1					
ANR	3051808	IfStatement	if ( comTable [ * cmd_index ] . num == cmd )		3051781	1					
ANR	3051809	Condition	comTable [ * cmd_index ] . num == cmd	3864:5:116249:116279	3051781	0	True				
ANR	3051810	EqualityExpression	comTable [ * cmd_index ] . num == cmd		3051781	0		==			
ANR	3051811	MemberAccess	comTable [ * cmd_index ] . num		3051781	0					
ANR	3051812	ArrayIndexing	comTable [ * cmd_index ]		3051781	0					
ANR	3051813	Identifier	comTable		3051781	0					
ANR	3051814	UnaryOperationExpression	* cmd_index		3051781	1					
ANR	3051815	UnaryOperator	*		3051781	0					
ANR	3051816	Identifier	cmd_index		3051781	1					
ANR	3051817	Identifier	num		3051781	1					
ANR	3051818	Identifier	cmd		3051781	1					
ANR	3051819	CompoundStatement		8:38:157:157	3051781	1					
ANR	3051820	ReturnStatement	return true ;	3866:2:116324:116335	3051781	0	True				
ANR	3051821	Identifier	true		3051781	0					
ANR	3051822	IdentifierDeclStatement	int j ;	3870:1:116383:116388	3051781	2	True				
ANR	3051823	IdentifierDecl	j		3051781	0					
ANR	3051824	IdentifierDeclType	int		3051781	0					
ANR	3051825	Identifier	j		3051781	1					
ANR	3051826	ForStatement	for ( j = ( * cmd_index + 1 ) % maxCommand ; j != * cmd_index ; j = ( j + 1 ) % maxCommand )		3051781	3					
ANR	3051827	ForInit	j = ( * cmd_index + 1 ) % maxCommand ;	3871:6:116396:116429	3051781	0	True				
ANR	3051828	AssignmentExpression	j = ( * cmd_index + 1 ) % maxCommand		3051781	0		=			
ANR	3051829	Identifier	j		3051781	0					
ANR	3051830	MultiplicativeExpression	( * cmd_index + 1 ) % maxCommand		3051781	1		%			
ANR	3051831	AdditiveExpression	* cmd_index + 1		3051781	0		+			
ANR	3051832	UnaryOperationExpression	* cmd_index		3051781	0					
ANR	3051833	UnaryOperator	*		3051781	0					
ANR	3051834	Identifier	cmd_index		3051781	1					
ANR	3051835	PrimaryExpression	1		3051781	1					
ANR	3051836	Identifier	maxCommand		3051781	1					
ANR	3051837	Condition	j != * cmd_index	3871:41:116431:116445	3051781	1	True				
ANR	3051838	EqualityExpression	j != * cmd_index		3051781	0		!=			
ANR	3051839	Identifier	j		3051781	0					
ANR	3051840	UnaryOperationExpression	* cmd_index		3051781	1					
ANR	3051841	UnaryOperator	*		3051781	0					
ANR	3051842	Identifier	cmd_index		3051781	1					
ANR	3051843	AssignmentExpression	j = ( j + 1 ) % maxCommand	3871:58:116448:116471	3051781	2	True	=			
ANR	3051844	Identifier	j		3051781	0					
ANR	3051845	MultiplicativeExpression	( j + 1 ) % maxCommand		3051781	1		%			
ANR	3051846	AdditiveExpression	j + 1		3051781	0		+			
ANR	3051847	Identifier	j		3051781	0					
ANR	3051848	PrimaryExpression	1		3051781	1					
ANR	3051849	Identifier	maxCommand		3051781	1					
ANR	3051850	CompoundStatement		15:84:349:349	3051781	3					
ANR	3051851	IfStatement	if ( comTable [ j ] . num == cmd )		3051781	0					
ANR	3051852	Condition	comTable [ j ] . num == cmd	3872:5:116481:116502	3051781	0	True				
ANR	3051853	EqualityExpression	comTable [ j ] . num == cmd		3051781	0		==			
ANR	3051854	MemberAccess	comTable [ j ] . num		3051781	0					
ANR	3051855	ArrayIndexing	comTable [ j ]		3051781	0					
ANR	3051856	Identifier	comTable		3051781	0					
ANR	3051857	Identifier	j		3051781	1					
ANR	3051858	Identifier	num		3051781	1					
ANR	3051859	Identifier	cmd		3051781	1					
ANR	3051860	CompoundStatement		16:29:380:380	3051781	1					
ANR	3051861	ExpressionStatement	* cmd_index = j	3873:3:116510:116524	3051781	0	True				
ANR	3051862	AssignmentExpression	* cmd_index = j		3051781	0		=			
ANR	3051863	UnaryOperationExpression	* cmd_index		3051781	0					
ANR	3051864	UnaryOperator	*		3051781	0					
ANR	3051865	Identifier	cmd_index		3051781	1					
ANR	3051866	Identifier	j		3051781	1					
ANR	3051867	ReturnStatement	return true ;	3874:3:116529:116540	3051781	1	True				
ANR	3051868	Identifier	true		3051781	0					
ANR	3051869	ReturnStatement	return false ;	3877:1:116550:116562	3051781	4	True				
ANR	3051870	Identifier	false		3051781	0					
ANR	3051871	ReturnType	bool		3051781	1					
ANR	3051872	Identifier	DaemonCore :: CommandNumToTableIndex		3051781	2					
ANR	3051873	ParameterList	"int cmd , int * cmd_index"		3051781	3					
ANR	3051874	Parameter	int cmd	3856:35:116100:116106	3051781	0	True				
ANR	3051875	ParameterType	int		3051781	0					
ANR	3051876	Identifier	cmd		3051781	1					
ANR	3051877	Parameter	int * cmd_index	3856:43:116108:116121	3051781	1	True				
ANR	3051878	ParameterType	int *		3051781	0					
ANR	3051879	Identifier	cmd_index		3051781	1					
ANR	3051880	CFGEntryNode	ENTRY		3051781		True				
ANR	3051881	CFGExitNode	EXIT		3051781		True				
ANR	3051882	Symbol	* * cmd_index		3051781						
ANR	3051883	Symbol	* cmd_index		3051781						
ANR	3051884	Symbol	comTable [ * cmd_index ] . num		3051781						
ANR	3051885	Symbol	false		3051781						
ANR	3051886	Symbol	j		3051781						
ANR	3051887	Symbol	cmd_index		3051781						
ANR	3051888	Symbol	* comTable		3051781						
ANR	3051889	Symbol	comTable [ j ] . num		3051781						
ANR	3051890	Symbol	* j		3051781						
ANR	3051891	Symbol	comTable		3051781						
ANR	3051892	Symbol	true		3051781						
ANR	3051893	Symbol	maxCommand		3051781						
ANR	3051894	Symbol	cmd		3051781						
ANR	3051895	ClassDef	CallCommandHandlerInfo	3880:0:116567:116867							
ANR	3051896	Function	CallCommandHandlerInfo	3881:1:116600:116782							
ANR	3051897	FunctionDef	"CallCommandHandlerInfo (int req , time_t deadline , float time_spent_on_sec)"		3051896	0					
ANR	3051898	CompoundStatement		3885:1:116753:116782	3051896	0					
ANR	3051899	ExpressionStatement	m_start_time . getTime ( )	3886:2:116757:116779	3051896	0	True				
ANR	3051900	CallExpression	m_start_time . getTime ( )		3051896	0					
ANR	3051901	Callee	m_start_time . getTime		3051896	0					
ANR	3051902	MemberAccess	m_start_time . getTime		3051896	0					
ANR	3051903	Identifier	m_start_time		3051896	0					
ANR	3051904	Identifier	getTime		3051896	1					
ANR	3051905	ArgumentList			3051896	1					
ANR	3051906	Identifier	CallCommandHandlerInfo		3051896	1					
ANR	3051907	ParameterList	"int req , time_t deadline , float time_spent_on_sec"		3051896	2					
ANR	3051908	Parameter	int req	3881:24:116623:116629	3051896	0	True				
ANR	3051909	ParameterType	int		3051896	0					
ANR	3051910	Identifier	req		3051896	1					
ANR	3051911	Parameter	time_t deadline	3881:32:116631:116645	3051896	1	True				
ANR	3051912	ParameterType	time_t		3051896	0					
ANR	3051913	Identifier	deadline		3051896	1					
ANR	3051914	Parameter	float time_spent_on_sec	3881:48:116647:116669	3051896	2	True				
ANR	3051915	ParameterType	float		3051896	0					
ANR	3051916	Identifier	time_spent_on_sec		3051896	1					
ANR	3051917	CFGEntryNode	ENTRY		3051896		True				
ANR	3051918	CFGExitNode	EXIT		3051896		True				
ANR	3051919	Symbol	m_start_time		3051896						
ANR	3051920	Symbol	time_spent_on_sec		3051896						
ANR	3051921	Symbol	deadline		3051896						
ANR	3051922	Symbol	req		3051896						
ANR	3051923	DeclStmt									
ANR	3051924	Decl							int	int	m_req
ANR	3051925	DeclStmt									
ANR	3051926	Decl							time_t	time_t	m_deadline
ANR	3051927	DeclStmt									
ANR	3051928	Decl							float	float	m_time_spent_on_sec
ANR	3051929	DeclStmt									
ANR	3051930	Decl							UtcTime	UtcTime	m_start_time
ANR	3051931	Function	DaemonCore :: HandleReqPayloadReady	3894:0:116871:118134							
ANR	3051932	FunctionDef	DaemonCore :: HandleReqPayloadReady (Stream * stream)		3051931	0					
ANR	3051933	CompoundStatement		3896:0:116925:118134	3051931	0					
ANR	3051934	IdentifierDeclStatement	int result = FALSE ;	3899:1:116999:117017	3051931	0	True				
ANR	3051935	IdentifierDecl	result = FALSE		3051931	0					
ANR	3051936	IdentifierDeclType	int		3051931	0					
ANR	3051937	Identifier	result		3051931	1					
ANR	3051938	AssignmentExpression	result = FALSE		3051931	2		=			
ANR	3051939	Identifier	FALSE		3051931	0					
ANR	3051940	Identifier	FALSE		3051931	1					
ANR	3051941	IdentifierDeclStatement	CallCommandHandlerInfo * callback_info = ( CallCommandHandlerInfo * ) GetDataPtr ( ) ;	3900:1:117020:117098	3051931	1	True				
ANR	3051942	IdentifierDecl	* callback_info = ( CallCommandHandlerInfo * ) GetDataPtr ( )		3051931	0					
ANR	3051943	IdentifierDeclType	CallCommandHandlerInfo *		3051931	0					
ANR	3051944	Identifier	callback_info		3051931	1					
ANR	3051945	AssignmentExpression	* callback_info = ( CallCommandHandlerInfo * ) GetDataPtr ( )		3051931	2		=			
ANR	3051946	Identifier	callback_info		3051931	0					
ANR	3051947	CastExpression	( CallCommandHandlerInfo * ) GetDataPtr ( )		3051931	1					
ANR	3051948	CastTarget	CallCommandHandlerInfo *		3051931	0					
ANR	3051949	CallExpression	GetDataPtr ( )		3051931	1					
ANR	3051950	Callee	GetDataPtr		3051931	0					
ANR	3051951	Identifier	GetDataPtr		3051931	0					
ANR	3051952	ArgumentList			3051931	1					
ANR	3051953	IdentifierDeclStatement	int req = callback_info -> m_req ;	3901:1:117101:117131	3051931	2	True				
ANR	3051954	IdentifierDecl	req = callback_info -> m_req		3051931	0					
ANR	3051955	IdentifierDeclType	int		3051931	0					
ANR	3051956	Identifier	req		3051931	1					
ANR	3051957	AssignmentExpression	req = callback_info -> m_req		3051931	2		=			
ANR	3051958	Identifier	req		3051931	0					
ANR	3051959	PtrMemberAccess	callback_info -> m_req		3051931	1					
ANR	3051960	Identifier	callback_info		3051931	0					
ANR	3051961	Identifier	m_req		3051931	1					
ANR	3051962	IdentifierDeclStatement	time_t orig_deadline = callback_info -> m_deadline ;	3902:1:117134:117182	3051931	3	True				
ANR	3051963	IdentifierDecl	orig_deadline = callback_info -> m_deadline		3051931	0					
ANR	3051964	IdentifierDeclType	time_t		3051931	0					
ANR	3051965	Identifier	orig_deadline		3051931	1					
ANR	3051966	AssignmentExpression	orig_deadline = callback_info -> m_deadline		3051931	2		=			
ANR	3051967	Identifier	orig_deadline		3051931	0					
ANR	3051968	PtrMemberAccess	callback_info -> m_deadline		3051931	1					
ANR	3051969	Identifier	callback_info		3051931	0					
ANR	3051970	Identifier	m_deadline		3051931	1					
ANR	3051971	IdentifierDeclStatement	float time_spent_on_sec = callback_info -> m_time_spent_on_sec ;	3903:1:117185:117245	3051931	4	True				
ANR	3051972	IdentifierDecl	time_spent_on_sec = callback_info -> m_time_spent_on_sec		3051931	0					
ANR	3051973	IdentifierDeclType	float		3051931	0					
ANR	3051974	Identifier	time_spent_on_sec		3051931	1					
ANR	3051975	AssignmentExpression	time_spent_on_sec = callback_info -> m_time_spent_on_sec		3051931	2		=			
ANR	3051976	Identifier	time_spent_on_sec		3051931	0					
ANR	3051977	PtrMemberAccess	callback_info -> m_time_spent_on_sec		3051931	1					
ANR	3051978	Identifier	callback_info		3051931	0					
ANR	3051979	Identifier	m_time_spent_on_sec		3051931	1					
ANR	3051980	IdentifierDeclStatement	UtcTime now ;	3904:1:117248:117259	3051931	5	True				
ANR	3051981	IdentifierDecl	now		3051931	0					
ANR	3051982	IdentifierDeclType	UtcTime		3051931	0					
ANR	3051983	Identifier	now		3051931	1					
ANR	3051984	ExpressionStatement	now . getTime ( )	3905:1:117262:117275	3051931	6	True				
ANR	3051985	CallExpression	now . getTime ( )		3051931	0					
ANR	3051986	Callee	now . getTime		3051931	0					
ANR	3051987	MemberAccess	now . getTime		3051931	0					
ANR	3051988	Identifier	now		3051931	0					
ANR	3051989	Identifier	getTime		3051931	1					
ANR	3051990	ArgumentList			3051931	1					
ANR	3051991	IdentifierDeclStatement	float time_waiting_for_payload = now . difference ( callback_info -> m_start_time ) ;	3906:1:117278:117354	3051931	7	True				
ANR	3051992	IdentifierDecl	time_waiting_for_payload = now . difference ( callback_info -> m_start_time )		3051931	0					
ANR	3051993	IdentifierDeclType	float		3051931	0					
ANR	3051994	Identifier	time_waiting_for_payload		3051931	1					
ANR	3051995	AssignmentExpression	time_waiting_for_payload = now . difference ( callback_info -> m_start_time )		3051931	2		=			
ANR	3051996	Identifier	time_waiting_for_payload		3051931	0					
ANR	3051997	CallExpression	now . difference ( callback_info -> m_start_time )		3051931	1					
ANR	3051998	Callee	now . difference		3051931	0					
ANR	3051999	MemberAccess	now . difference		3051931	0					
ANR	3052000	Identifier	now		3051931	0					
ANR	3052001	Identifier	difference		3051931	1					
ANR	3052002	ArgumentList	callback_info -> m_start_time		3051931	1					
ANR	3052003	Argument	callback_info -> m_start_time		3051931	0					
ANR	3052004	PtrMemberAccess	callback_info -> m_start_time		3051931	0					
ANR	3052005	Identifier	callback_info		3051931	0					
ANR	3052006	Identifier	m_start_time		3051931	1					
ANR	3052007	Statement	delete	3908:1:117358:117363	3051931	8	True				
ANR	3052008	ExpressionStatement	callback_info	3908:8:117365:117378	3051931	9	True				
ANR	3052009	Identifier	callback_info		3051931	0					
ANR	3052010	ExpressionStatement	Cancel_Socket ( stream )	3910:1:117382:117405	3051931	10	True				
ANR	3052011	CallExpression	Cancel_Socket ( stream )		3051931	0					
ANR	3052012	Callee	Cancel_Socket		3051931	0					
ANR	3052013	Identifier	Cancel_Socket		3051931	0					
ANR	3052014	ArgumentList	stream		3051931	1					
ANR	3052015	Argument	stream		3051931	0					
ANR	3052016	Identifier	stream		3051931	0					
ANR	3052017	IdentifierDeclStatement	int index = 0 ;	3912:1:117409:117422	3051931	11	True				
ANR	3052018	IdentifierDecl	index = 0		3051931	0					
ANR	3052019	IdentifierDeclType	int		3051931	0					
ANR	3052020	Identifier	index		3051931	1					
ANR	3052021	AssignmentExpression	index = 0		3051931	2		=			
ANR	3052022	Identifier	index		3051931	0					
ANR	3052023	PrimaryExpression	0		3051931	1					
ANR	3052024	IdentifierDeclStatement	"bool reqFound = CommandNumToTableIndex ( req , & index ) ;"	3913:1:117425:117475	3051931	12	True				
ANR	3052025	IdentifierDecl	"reqFound = CommandNumToTableIndex ( req , & index )"		3051931	0					
ANR	3052026	IdentifierDeclType	bool		3051931	0					
ANR	3052027	Identifier	reqFound		3051931	1					
ANR	3052028	AssignmentExpression	"reqFound = CommandNumToTableIndex ( req , & index )"		3051931	2		=			
ANR	3052029	Identifier	reqFound		3051931	0					
ANR	3052030	CallExpression	"CommandNumToTableIndex ( req , & index )"		3051931	1					
ANR	3052031	Callee	CommandNumToTableIndex		3051931	0					
ANR	3052032	Identifier	CommandNumToTableIndex		3051931	0					
ANR	3052033	ArgumentList	req		3051931	1					
ANR	3052034	Argument	req		3051931	0					
ANR	3052035	Identifier	req		3051931	0					
ANR	3052036	Argument	& index		3051931	1					
ANR	3052037	UnaryOperationExpression	& index		3051931	0					
ANR	3052038	UnaryOperator	&		3051931	0					
ANR	3052039	Identifier	index		3051931	1					
ANR	3052040	IfStatement	if ( ! reqFound )		3051931	13					
ANR	3052041	Condition	! reqFound	3915:5:117483:117491	3051931	0	True				
ANR	3052042	UnaryOperationExpression	! reqFound		3051931	0					
ANR	3052043	UnaryOperator	!		3051931	0					
ANR	3052044	Identifier	reqFound		3051931	1					
ANR	3052045	CompoundStatement		20:17:569:569	3051931	1					
ANR	3052046	ExpressionStatement	"dprintf ( D_ALWAYS , ""Command %d from %s is no longer recognized!\\n"" , req , stream -> peer_description ( ) )"	3916:2:117499:117605	3051931	0	True				
ANR	3052047	CallExpression	"dprintf ( D_ALWAYS , ""Command %d from %s is no longer recognized!\\n"" , req , stream -> peer_description ( ) )"		3051931	0					
ANR	3052048	Callee	dprintf		3051931	0					
ANR	3052049	Identifier	dprintf		3051931	0					
ANR	3052050	ArgumentList	D_ALWAYS		3051931	1					
ANR	3052051	Argument	D_ALWAYS		3051931	0					
ANR	3052052	Identifier	D_ALWAYS		3051931	0					
ANR	3052053	Argument	"""Command %d from %s is no longer recognized!\\n"""		3051931	1					
ANR	3052054	PrimaryExpression	"""Command %d from %s is no longer recognized!\\n"""		3051931	0					
ANR	3052055	Argument	req		3051931	2					
ANR	3052056	Identifier	req		3051931	0					
ANR	3052057	Argument	stream -> peer_description ( )		3051931	3					
ANR	3052058	CallExpression	stream -> peer_description ( )		3051931	0					
ANR	3052059	Callee	stream -> peer_description		3051931	0					
ANR	3052060	PtrMemberAccess	stream -> peer_description		3051931	0					
ANR	3052061	Identifier	stream		3051931	0					
ANR	3052062	Identifier	peer_description		3051931	1					
ANR	3052063	ArgumentList			3051931	1					
ANR	3052064	GotoStatement	goto wrapup ;	3919:2:117609:117620	3051931	1	True				
ANR	3052065	Identifier	wrapup		3051931	0					
ANR	3052066	IfStatement	if ( stream -> deadline_expired ( ) )		3051931	14					
ANR	3052067	Condition	stream -> deadline_expired ( )	3922:5:117631:117656	3051931	0	True				
ANR	3052068	CallExpression	stream -> deadline_expired ( )		3051931	0					
ANR	3052069	Callee	stream -> deadline_expired		3051931	0					
ANR	3052070	PtrMemberAccess	stream -> deadline_expired		3051931	0					
ANR	3052071	Identifier	stream		3051931	0					
ANR	3052072	Identifier	deadline_expired		3051931	1					
ANR	3052073	ArgumentList			3051931	1					
ANR	3052074	CompoundStatement		27:34:734:734	3051931	1					
ANR	3052075	Statement	dprintf	3923:2:117664:117670	3051931	0	True				
ANR	3052076	Statement	(	3923:9:117671:117671	3051931	1	True				
ANR	3052077	Statement	D_ALWAYS	3923:10:117672:117679	3051931	2	True				
ANR	3052078	Statement	","	3923:18:117680:117680	3051931	3	True				
ANR	3052079	Statement	"""Deadline expired after %.3fs waiting for %s """	3924:4:117686:117731	3051931	4	True				
ANR	3052080	Statement	"""to send payload for command %d %s.\\n"""	3925:4:117737:117774	3051931	5	True				
ANR	3052081	Statement	","	3925:42:117775:117775	3051931	6	True				
ANR	3052082	Statement	time_waiting_for_payload	3926:4:117781:117804	3051931	7	True				
ANR	3052083	Statement	","	3926:28:117805:117805	3051931	8	True				
ANR	3052084	Statement	stream	3926:29:117806:117811	3051931	9	True				
ANR	3052085	Statement	->	3926:35:117812:117813	3051931	10	True				
ANR	3052086	Statement	peer_description	3926:37:117814:117829	3051931	11	True				
ANR	3052087	Statement	(	3926:53:117830:117830	3051931	12	True				
ANR	3052088	Statement	)	3926:54:117831:117831	3051931	13	True				
ANR	3052089	Statement	","	3926:55:117832:117832	3051931	14	True				
ANR	3052090	Statement	req	3927:4:117838:117840	3051931	15	True				
ANR	3052091	Statement	","	3927:7:117841:117841	3051931	16	True				
ANR	3052092	Statement	comTable	3927:8:117842:117849	3051931	17	True				
ANR	3052093	Statement	[	3927:16:117850:117850	3051931	18	True				
ANR	3052094	Statement	index	3927:17:117851:117855	3051931	19	True				
ANR	3052095	Statement	]	3927:22:117856:117856	3051931	20	True				
ANR	3052096	Statement	.	3927:23:117857:117857	3051931	21	True				
ANR	3052097	Statement	command_descrip	3927:24:117858:117872	3051931	22	True				
ANR	3052098	Statement	)	3927:39:117873:117873	3051931	23	True				
ANR	3052099	ExpressionStatement		3927:40:117874:117874	3051931	24	True				
ANR	3052100	GotoStatement	goto wrapup ;	3928:2:117878:117889	3051931	25	True				
ANR	3052101	Identifier	wrapup		3051931	0					
ANR	3052102	ExpressionStatement	stream -> set_deadline ( orig_deadline )	3931:1:117896:117933	3051931	15	True				
ANR	3052103	CallExpression	stream -> set_deadline ( orig_deadline )		3051931	0					
ANR	3052104	Callee	stream -> set_deadline		3051931	0					
ANR	3052105	PtrMemberAccess	stream -> set_deadline		3051931	0					
ANR	3052106	Identifier	stream		3051931	0					
ANR	3052107	Identifier	set_deadline		3051931	1					
ANR	3052108	ArgumentList	orig_deadline		3051931	1					
ANR	3052109	Argument	orig_deadline		3051931	0					
ANR	3052110	Identifier	orig_deadline		3051931	0					
ANR	3052111	ExpressionStatement	"result = CallCommandHandler ( req , stream , false , false , time_spent_on_sec , time_waiting_for_payload )"	3933:1:117937:118031	3051931	16	True				
ANR	3052112	AssignmentExpression	"result = CallCommandHandler ( req , stream , false , false , time_spent_on_sec , time_waiting_for_payload )"		3051931	0		=			
ANR	3052113	Identifier	result		3051931	0					
ANR	3052114	CallExpression	"CallCommandHandler ( req , stream , false , false , time_spent_on_sec , time_waiting_for_payload )"		3051931	1					
ANR	3052115	Callee	CallCommandHandler		3051931	0					
ANR	3052116	Identifier	CallCommandHandler		3051931	0					
ANR	3052117	ArgumentList	req		3051931	1					
ANR	3052118	Argument	req		3051931	0					
ANR	3052119	Identifier	req		3051931	0					
ANR	3052120	Argument	stream		3051931	1					
ANR	3052121	Identifier	stream		3051931	0					
ANR	3052122	Argument	false		3051931	2					
ANR	3052123	Identifier	false		3051931	0					
ANR	3052124	Argument	false		3051931	3					
ANR	3052125	Identifier	false		3051931	0					
ANR	3052126	Argument	time_spent_on_sec		3051931	4					
ANR	3052127	Identifier	time_spent_on_sec		3051931	0					
ANR	3052128	Argument	time_waiting_for_payload		3051931	5					
ANR	3052129	Identifier	time_waiting_for_payload		3051931	0					
ANR	3052130	Label	wrapup :	3935:1:118035:118041	3051931	17	True				
ANR	3052131	Identifier	wrapup		3051931	0					
ANR	3052132	IfStatement	if ( result != KEEP_STREAM )		3051931	18					
ANR	3052133	Condition	result != KEEP_STREAM	3936:5:118048:118068	3051931	0	True				
ANR	3052134	EqualityExpression	result != KEEP_STREAM		3051931	0		!=			
ANR	3052135	Identifier	result		3051931	0					
ANR	3052136	Identifier	KEEP_STREAM		3051931	1					
ANR	3052137	CompoundStatement		41:29:1146:1146	3051931	1					
ANR	3052138	Statement	delete	3937:2:118076:118081	3051931	0	True				
ANR	3052139	ExpressionStatement	stream	3937:9:118083:118089	3051931	1	True				
ANR	3052140	Identifier	stream		3051931	0					
ANR	3052141	ExpressionStatement	result = KEEP_STREAM	3938:2:118093:118113	3051931	2	True				
ANR	3052142	AssignmentExpression	result = KEEP_STREAM		3051931	0		=			
ANR	3052143	Identifier	result		3051931	0					
ANR	3052144	Identifier	KEEP_STREAM		3051931	1					
ANR	3052145	ReturnStatement	return result ;	3940:1:118119:118132	3051931	19	True				
ANR	3052146	Identifier	result		3051931	0					
ANR	3052147	ReturnType	int		3051931	1					
ANR	3052148	Identifier	DaemonCore :: HandleReqPayloadReady		3051931	2					
ANR	3052149	ParameterList	Stream * stream		3051931	3					
ANR	3052150	Parameter	Stream * stream	3895:34:116909:116922	3051931	0	True				
ANR	3052151	ParameterType	Stream *		3051931	0					
ANR	3052152	Identifier	stream		3051931	1					
ANR	3052153	CFGEntryNode	ENTRY		3051931		True				
ANR	3052154	CFGExitNode	EXIT		3051931		True				
ANR	3052155	Symbol	stream -> deadline_expired		3051931						
ANR	3052156	Symbol	* callback_info		3051931						
ANR	3052157	Symbol	callback_info -> m_deadline		3051931						
ANR	3052158	Symbol	KEEP_STREAM		3051931						
ANR	3052159	Symbol	result		3051931						
ANR	3052160	Symbol	callback_info -> m_start_time		3051931						
ANR	3052161	Symbol	stream		3051931						
ANR	3052162	Symbol	now		3051931						
ANR	3052163	Symbol	time_waiting_for_payload		3051931						
ANR	3052164	Symbol	callback_info -> m_time_spent_on_sec		3051931						
ANR	3052165	Symbol	& index		3051931						
ANR	3052166	Symbol	CommandNumToTableIndex		3051931						
ANR	3052167	Symbol	req		3051931						
ANR	3052168	Symbol	stream -> peer_description		3051931						
ANR	3052169	Symbol	CallCommandHandler		3051931						
ANR	3052170	Symbol	time_spent_on_sec		3051931						
ANR	3052171	Symbol	D_ALWAYS		3051931						
ANR	3052172	Symbol	false		3051931						
ANR	3052173	Symbol	now . difference		3051931						
ANR	3052174	Symbol	index		3051931						
ANR	3052175	Symbol	GetDataPtr		3051931						
ANR	3052176	Symbol	callback_info		3051931						
ANR	3052177	Symbol	* stream		3051931						
ANR	3052178	Symbol	callback_info -> m_req		3051931						
ANR	3052179	Symbol	orig_deadline		3051931						
ANR	3052180	Symbol	reqFound		3051931						
ANR	3052181	Symbol	FALSE		3051931						
ANR	3052182	Function	DaemonCore :: CallCommandHandler	3943:0:118137:121055							
ANR	3052183	FunctionDef	"DaemonCore :: CallCommandHandler (int req , Stream * stream , bool delete_stream , bool check_payload , float time_spent_on_sec , float time_spent_waiting_for_payload)"		3052182	0					
ANR	3052184	CompoundStatement		3945:0:118295:121055	3052182	0					
ANR	3052185	IdentifierDeclStatement	int result = FALSE ;	3946:1:118298:118316	3052182	0	True				
ANR	3052186	IdentifierDecl	result = FALSE		3052182	0					
ANR	3052187	IdentifierDeclType	int		3052182	0					
ANR	3052188	Identifier	result		3052182	1					
ANR	3052189	AssignmentExpression	result = FALSE		3052182	2		=			
ANR	3052190	Identifier	FALSE		3052182	0					
ANR	3052191	Identifier	FALSE		3052182	1					
ANR	3052192	IdentifierDeclStatement	int index = 0 ;	3947:1:118319:118332	3052182	1	True				
ANR	3052193	IdentifierDecl	index = 0		3052182	0					
ANR	3052194	IdentifierDeclType	int		3052182	0					
ANR	3052195	Identifier	index		3052182	1					
ANR	3052196	AssignmentExpression	index = 0		3052182	2		=			
ANR	3052197	Identifier	index		3052182	0					
ANR	3052198	PrimaryExpression	0		3052182	1					
ANR	3052199	IdentifierDeclStatement	"bool reqFound = CommandNumToTableIndex ( req , & index ) ;"	3948:1:118335:118385	3052182	2	True				
ANR	3052200	IdentifierDecl	"reqFound = CommandNumToTableIndex ( req , & index )"		3052182	0					
ANR	3052201	IdentifierDeclType	bool		3052182	0					
ANR	3052202	Identifier	reqFound		3052182	1					
ANR	3052203	AssignmentExpression	"reqFound = CommandNumToTableIndex ( req , & index )"		3052182	2		=			
ANR	3052204	Identifier	reqFound		3052182	0					
ANR	3052205	CallExpression	"CommandNumToTableIndex ( req , & index )"		3052182	1					
ANR	3052206	Callee	CommandNumToTableIndex		3052182	0					
ANR	3052207	Identifier	CommandNumToTableIndex		3052182	0					
ANR	3052208	ArgumentList	req		3052182	1					
ANR	3052209	Argument	req		3052182	0					
ANR	3052210	Identifier	req		3052182	0					
ANR	3052211	Argument	& index		3052182	1					
ANR	3052212	UnaryOperationExpression	& index		3052182	0					
ANR	3052213	UnaryOperator	&		3052182	0					
ANR	3052214	Identifier	index		3052182	1					
ANR	3052215	IdentifierDeclStatement	char const * user = NULL ;	3949:1:118388:118411	3052182	3	True				
ANR	3052216	IdentifierDecl	* user = NULL		3052182	0					
ANR	3052217	IdentifierDeclType	char const *		3052182	0					
ANR	3052218	Identifier	user		3052182	1					
ANR	3052219	AssignmentExpression	* user = NULL		3052182	2		=			
ANR	3052220	Identifier	NULL		3052182	0					
ANR	3052221	Identifier	NULL		3052182	1					
ANR	3052222	IdentifierDeclStatement	Sock * sock = ( Sock * ) stream ;	3950:1:118414:118441	3052182	4	True				
ANR	3052223	IdentifierDecl	* sock = ( Sock * ) stream		3052182	0					
ANR	3052224	IdentifierDeclType	Sock *		3052182	0					
ANR	3052225	Identifier	sock		3052182	1					
ANR	3052226	AssignmentExpression	* sock = ( Sock * ) stream		3052182	2		=			
ANR	3052227	Identifier	sock		3052182	0					
ANR	3052228	CastExpression	( Sock * ) stream		3052182	1					
ANR	3052229	CastTarget	Sock *		3052182	0					
ANR	3052230	Identifier	stream		3052182	1					
ANR	3052231	IfStatement	if ( reqFound )		3052182	5					
ANR	3052232	Condition	reqFound	3952:6:118450:118457	3052182	0	True				
ANR	3052233	Identifier	reqFound		3052182	0					
ANR	3052234	CompoundStatement		75:2:2397:2467	3052182	1					
ANR	3052235	IfStatement	if ( stream && stream -> type ( ) == Stream :: reli_sock && comTable [ index ] . wait_for_payload > 0 && check_payload )		3052182	0					
ANR	3052236	Condition	stream && stream -> type ( ) == Stream :: reli_sock && comTable [ index ] . wait_for_payload > 0 && check_payload	3954:6:118470:118577	3052182	0	True				
ANR	3052237	AndExpression	stream && stream -> type ( ) == Stream :: reli_sock && comTable [ index ] . wait_for_payload > 0 && check_payload		3052182	0		&&			
ANR	3052238	Identifier	stream		3052182	0					
ANR	3052239	AndExpression	stream -> type ( ) == Stream :: reli_sock && comTable [ index ] . wait_for_payload > 0 && check_payload		3052182	1		&&			
ANR	3052240	EqualityExpression	stream -> type ( ) == Stream :: reli_sock		3052182	0		==			
ANR	3052241	CallExpression	stream -> type ( )		3052182	0					
ANR	3052242	Callee	stream -> type		3052182	0					
ANR	3052243	PtrMemberAccess	stream -> type		3052182	0					
ANR	3052244	Identifier	stream		3052182	0					
ANR	3052245	Identifier	type		3052182	1					
ANR	3052246	ArgumentList			3052182	1					
ANR	3052247	Identifier	Stream :: reli_sock		3052182	1					
ANR	3052248	AndExpression	comTable [ index ] . wait_for_payload > 0 && check_payload		3052182	1		&&			
ANR	3052249	RelationalExpression	comTable [ index ] . wait_for_payload > 0		3052182	0		>			
ANR	3052250	MemberAccess	comTable [ index ] . wait_for_payload		3052182	0					
ANR	3052251	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052252	Identifier	comTable		3052182	0					
ANR	3052253	Identifier	index		3052182	1					
ANR	3052254	Identifier	wait_for_payload		3052182	1					
ANR	3052255	PrimaryExpression	0		3052182	1					
ANR	3052256	Identifier	check_payload		3052182	1					
ANR	3052257	CompoundStatement		12:2:287:287	3052182	1					
ANR	3052258	IfStatement	if ( ! sock -> readReady ( ) )		3052182	0					
ANR	3052259	Condition	! sock -> readReady ( )	3957:7:118592:118609	3052182	0	True				
ANR	3052260	UnaryOperationExpression	! sock -> readReady ( )		3052182	0					
ANR	3052261	UnaryOperator	!		3052182	0					
ANR	3052262	CallExpression	sock -> readReady ( )		3052182	1					
ANR	3052263	Callee	sock -> readReady		3052182	0					
ANR	3052264	PtrMemberAccess	sock -> readReady		3052182	0					
ANR	3052265	Identifier	sock		3052182	0					
ANR	3052266	Identifier	readReady		3052182	1					
ANR	3052267	ArgumentList			3052182	1					
ANR	3052268	CompoundStatement		13:28:317:317	3052182	1					
ANR	3052269	IfStatement	if ( sock -> deadline_expired ( ) )		3052182	0					
ANR	3052270	Condition	sock -> deadline_expired ( )	3958:8:118623:118646	3052182	0	True				
ANR	3052271	CallExpression	sock -> deadline_expired ( )		3052182	0					
ANR	3052272	Callee	sock -> deadline_expired		3052182	0					
ANR	3052273	PtrMemberAccess	sock -> deadline_expired		3052182	0					
ANR	3052274	Identifier	sock		3052182	0					
ANR	3052275	Identifier	deadline_expired		3052182	1					
ANR	3052276	ArgumentList			3052182	1					
ANR	3052277	CompoundStatement		14:35:354:354	3052182	1					
ANR	3052278	ExpressionStatement	"dprintf ( D_ALWAYS , ""The payload has not arrived for command %d from %s, but the deadline has expired, so continuing to the command handler.\\n"" , req , stream -> peer_description ( ) )"	3959:5:118657:118829	3052182	0	True				
ANR	3052279	CallExpression	"dprintf ( D_ALWAYS , ""The payload has not arrived for command %d from %s, but the deadline has expired, so continuing to the command handler.\\n"" , req , stream -> peer_description ( ) )"		3052182	0					
ANR	3052280	Callee	dprintf		3052182	0					
ANR	3052281	Identifier	dprintf		3052182	0					
ANR	3052282	ArgumentList	D_ALWAYS		3052182	1					
ANR	3052283	Argument	D_ALWAYS		3052182	0					
ANR	3052284	Identifier	D_ALWAYS		3052182	0					
ANR	3052285	Argument	"""The payload has not arrived for command %d from %s, but the deadline has expired, so continuing to the command handler.\\n"""		3052182	1					
ANR	3052286	PrimaryExpression	"""The payload has not arrived for command %d from %s, but the deadline has expired, so continuing to the command handler.\\n"""		3052182	0					
ANR	3052287	Argument	req		3052182	2					
ANR	3052288	Identifier	req		3052182	0					
ANR	3052289	Argument	stream -> peer_description ( )		3052182	3					
ANR	3052290	CallExpression	stream -> peer_description ( )		3052182	0					
ANR	3052291	Callee	stream -> peer_description		3052182	0					
ANR	3052292	PtrMemberAccess	stream -> peer_description		3052182	0					
ANR	3052293	Identifier	stream		3052182	0					
ANR	3052294	Identifier	peer_description		3052182	1					
ANR	3052295	ArgumentList			3052182	1					
ANR	3052296	ElseStatement	else		3052182	0					
ANR	3052297	CompoundStatement		23:5:773:949	3052182	0					
ANR	3052298	IdentifierDeclStatement	time_t old_deadline = sock -> get_deadline ( ) ;	3962:5:118853:118895	3052182	0	True				
ANR	3052299	IdentifierDecl	old_deadline = sock -> get_deadline ( )		3052182	0					
ANR	3052300	IdentifierDeclType	time_t		3052182	0					
ANR	3052301	Identifier	old_deadline		3052182	1					
ANR	3052302	AssignmentExpression	old_deadline = sock -> get_deadline ( )		3052182	2		=			
ANR	3052303	Identifier	old_deadline		3052182	0					
ANR	3052304	CallExpression	sock -> get_deadline ( )		3052182	1					
ANR	3052305	Callee	sock -> get_deadline		3052182	0					
ANR	3052306	PtrMemberAccess	sock -> get_deadline		3052182	0					
ANR	3052307	Identifier	sock		3052182	0					
ANR	3052308	Identifier	get_deadline		3052182	1					
ANR	3052309	ArgumentList			3052182	1					
ANR	3052310	ExpressionStatement	sock -> set_deadline_timeout ( comTable [ index ] . wait_for_payload )	3963:5:118902:118962	3052182	1	True				
ANR	3052311	CallExpression	sock -> set_deadline_timeout ( comTable [ index ] . wait_for_payload )		3052182	0					
ANR	3052312	Callee	sock -> set_deadline_timeout		3052182	0					
ANR	3052313	PtrMemberAccess	sock -> set_deadline_timeout		3052182	0					
ANR	3052314	Identifier	sock		3052182	0					
ANR	3052315	Identifier	set_deadline_timeout		3052182	1					
ANR	3052316	ArgumentList	comTable [ index ] . wait_for_payload		3052182	1					
ANR	3052317	Argument	comTable [ index ] . wait_for_payload		3052182	0					
ANR	3052318	MemberAccess	comTable [ index ] . wait_for_payload		3052182	0					
ANR	3052319	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052320	Identifier	comTable		3052182	0					
ANR	3052321	Identifier	index		3052182	1					
ANR	3052322	Identifier	wait_for_payload		3052182	1					
ANR	3052323	IdentifierDeclStatement	char callback_desc [ 50 ] ;	3965:5:118970:118992	3052182	2	True				
ANR	3052324	IdentifierDecl	callback_desc [ 50 ]		3052182	0					
ANR	3052325	IdentifierDeclType	char [ 50 ]		3052182	0					
ANR	3052326	Identifier	callback_desc		3052182	1					
ANR	3052327	PrimaryExpression	50		3052182	2					
ANR	3052328	ExpressionStatement	"snprintf ( callback_desc , 50 , ""Waiting for command %d payload"" , req )"	3966:5:118999:119062	3052182	3	True				
ANR	3052329	CallExpression	"snprintf ( callback_desc , 50 , ""Waiting for command %d payload"" , req )"		3052182	0					
ANR	3052330	Callee	snprintf		3052182	0					
ANR	3052331	Identifier	snprintf		3052182	0					
ANR	3052332	ArgumentList	callback_desc		3052182	1					
ANR	3052333	Argument	callback_desc		3052182	0					
ANR	3052334	Identifier	callback_desc		3052182	0					
ANR	3052335	Argument	50		3052182	1					
ANR	3052336	PrimaryExpression	50		3052182	0					
ANR	3052337	Argument	"""Waiting for command %d payload"""		3052182	2					
ANR	3052338	PrimaryExpression	"""Waiting for command %d payload"""		3052182	0					
ANR	3052339	Argument	req		3052182	3					
ANR	3052340	Identifier	req		3052182	0					
ANR	3052341	IdentifierDeclStatement	"int rc = Register_Socket ( stream , callback_desc , ( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady , ""DaemonCore::HandleReqPayloadReady"" , this ) ;"	3967:5:119069:119245	3052182	4	True				
ANR	3052342	IdentifierDecl	"rc = Register_Socket ( stream , callback_desc , ( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady , ""DaemonCore::HandleReqPayloadReady"" , this )"		3052182	0					
ANR	3052343	IdentifierDeclType	int		3052182	0					
ANR	3052344	Identifier	rc		3052182	1					
ANR	3052345	AssignmentExpression	"rc = Register_Socket ( stream , callback_desc , ( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady , ""DaemonCore::HandleReqPayloadReady"" , this )"		3052182	2		=			
ANR	3052346	Identifier	rc		3052182	0					
ANR	3052347	CallExpression	"Register_Socket ( stream , callback_desc , ( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady , ""DaemonCore::HandleReqPayloadReady"" , this )"		3052182	1					
ANR	3052348	Callee	Register_Socket		3052182	0					
ANR	3052349	Identifier	Register_Socket		3052182	0					
ANR	3052350	ArgumentList	stream		3052182	1					
ANR	3052351	Argument	stream		3052182	0					
ANR	3052352	Identifier	stream		3052182	0					
ANR	3052353	Argument	callback_desc		3052182	1					
ANR	3052354	Identifier	callback_desc		3052182	0					
ANR	3052355	Argument	( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady		3052182	2					
ANR	3052356	CastExpression	( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady		3052182	0					
ANR	3052357	CastTarget	SocketHandlercpp		3052182	0					
ANR	3052358	UnaryOperationExpression	& DaemonCore :: HandleReqPayloadReady		3052182	1					
ANR	3052359	UnaryOperator	&		3052182	0					
ANR	3052360	Identifier	DaemonCore :: HandleReqPayloadReady		3052182	1					
ANR	3052361	Argument	"""DaemonCore::HandleReqPayloadReady"""		3052182	3					
ANR	3052362	PrimaryExpression	"""DaemonCore::HandleReqPayloadReady"""		3052182	0					
ANR	3052363	Argument	this		3052182	4					
ANR	3052364	Identifier	this		3052182	0					
ANR	3052365	IfStatement	if ( rc >= 0 )		3052182	5					
ANR	3052366	Condition	rc >= 0	3973:9:119256:119262	3052182	0	True				
ANR	3052367	RelationalExpression	rc >= 0		3052182	0		>=			
ANR	3052368	Identifier	rc		3052182	0					
ANR	3052369	PrimaryExpression	0		3052182	1					
ANR	3052370	CompoundStatement		30:6:978:1080	3052182	1					
ANR	3052371	IdentifierDeclStatement	"CallCommandHandlerInfo * callback_info = new CallCommandHandlerInfo ( req , old_deadline , time_spent_on_sec ) ;"	3974:6:119274:119376	3052182	0	True				
ANR	3052372	IdentifierDecl	"* callback_info = new CallCommandHandlerInfo ( req , old_deadline , time_spent_on_sec )"		3052182	0					
ANR	3052373	IdentifierDeclType	CallCommandHandlerInfo *		3052182	0					
ANR	3052374	Identifier	callback_info		3052182	1					
ANR	3052375	AssignmentExpression	"* callback_info = new CallCommandHandlerInfo ( req , old_deadline , time_spent_on_sec )"		3052182	2		=			
ANR	3052376	Identifier	callback_info		3052182	0					
ANR	3052377	Expression	"req , old_deadline , time_spent_on_sec"		3052182	1					
ANR	3052378	Identifier	req		3052182	0					
ANR	3052379	Expression	"old_deadline , time_spent_on_sec"		3052182	1					
ANR	3052380	Identifier	old_deadline		3052182	0					
ANR	3052381	Identifier	time_spent_on_sec		3052182	1					
ANR	3052382	ExpressionStatement	Register_DataPtr ( ( void * ) callback_info )	3975:6:119384:119423	3052182	1	True				
ANR	3052383	CallExpression	Register_DataPtr ( ( void * ) callback_info )		3052182	0					
ANR	3052384	Callee	Register_DataPtr		3052182	0					
ANR	3052385	Identifier	Register_DataPtr		3052182	0					
ANR	3052386	ArgumentList	( void * ) callback_info		3052182	1					
ANR	3052387	Argument	( void * ) callback_info		3052182	0					
ANR	3052388	CastExpression	( void * ) callback_info		3052182	0					
ANR	3052389	CastTarget	void *		3052182	0					
ANR	3052390	Identifier	callback_info		3052182	1					
ANR	3052391	ReturnStatement	return KEEP_STREAM ;	3976:6:119431:119449	3052182	2	True				
ANR	3052392	Identifier	KEEP_STREAM		3052182	0					
ANR	3052393	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to register callback to wait for command %d payload from %s.\\n"" , req , stream -> peer_description ( ) )"	3979:5:119464:119584	3052182	6	True				
ANR	3052394	CallExpression	"dprintf ( D_ALWAYS , ""Failed to register callback to wait for command %d payload from %s.\\n"" , req , stream -> peer_description ( ) )"		3052182	0					
ANR	3052395	Callee	dprintf		3052182	0					
ANR	3052396	Identifier	dprintf		3052182	0					
ANR	3052397	ArgumentList	D_ALWAYS		3052182	1					
ANR	3052398	Argument	D_ALWAYS		3052182	0					
ANR	3052399	Identifier	D_ALWAYS		3052182	0					
ANR	3052400	Argument	"""Failed to register callback to wait for command %d payload from %s.\\n"""		3052182	1					
ANR	3052401	PrimaryExpression	"""Failed to register callback to wait for command %d payload from %s.\\n"""		3052182	0					
ANR	3052402	Argument	req		3052182	2					
ANR	3052403	Identifier	req		3052182	0					
ANR	3052404	Argument	stream -> peer_description ( )		3052182	3					
ANR	3052405	CallExpression	stream -> peer_description ( )		3052182	0					
ANR	3052406	Callee	stream -> peer_description		3052182	0					
ANR	3052407	PtrMemberAccess	stream -> peer_description		3052182	0					
ANR	3052408	Identifier	stream		3052182	0					
ANR	3052409	Identifier	peer_description		3052182	1					
ANR	3052410	ArgumentList			3052182	1					
ANR	3052411	ExpressionStatement	sock -> set_deadline ( old_deadline )	3980:5:119591:119625	3052182	7	True				
ANR	3052412	CallExpression	sock -> set_deadline ( old_deadline )		3052182	0					
ANR	3052413	Callee	sock -> set_deadline		3052182	0					
ANR	3052414	PtrMemberAccess	sock -> set_deadline		3052182	0					
ANR	3052415	Identifier	sock		3052182	0					
ANR	3052416	Identifier	set_deadline		3052182	1					
ANR	3052417	ArgumentList	old_deadline		3052182	1					
ANR	3052418	Argument	old_deadline		3052182	0					
ANR	3052419	Identifier	old_deadline		3052182	0					
ANR	3052420	ExpressionStatement	user = sock -> getFullyQualifiedUser ( )	3986:2:119684:119720	3052182	1	True				
ANR	3052421	AssignmentExpression	user = sock -> getFullyQualifiedUser ( )		3052182	0		=			
ANR	3052422	Identifier	user		3052182	0					
ANR	3052423	CallExpression	sock -> getFullyQualifiedUser ( )		3052182	1					
ANR	3052424	Callee	sock -> getFullyQualifiedUser		3052182	0					
ANR	3052425	PtrMemberAccess	sock -> getFullyQualifiedUser		3052182	0					
ANR	3052426	Identifier	sock		3052182	0					
ANR	3052427	Identifier	getFullyQualifiedUser		3052182	1					
ANR	3052428	ArgumentList			3052182	1					
ANR	3052429	IfStatement	if ( ! user )		3052182	2					
ANR	3052430	Condition	! user	3987:6:119728:119732	3052182	0	True				
ANR	3052431	UnaryOperationExpression	! user		3052182	0					
ANR	3052432	UnaryOperator	!		3052182	0					
ANR	3052433	Identifier	user		3052182	1					
ANR	3052434	CompoundStatement		43:14:1440:1440	3052182	1					
ANR	3052435	ExpressionStatement	"user = """""	3988:3:119741:119750	3052182	0	True				
ANR	3052436	AssignmentExpression	"user = """""		3052182	0		=			
ANR	3052437	Identifier	user		3052182	0					
ANR	3052438	PrimaryExpression	""""""		3052182	1					
ANR	3052439	ExpressionStatement	"dprintf ( D_COMMAND , ""Calling HandleReq <%s> (%d) for command %d (%s) from %s %s\\n"" , comTable [ index ] . handler_descrip , inServiceCommandSocket_flag , req , comTable [ index ] . command_descrip , user , stream -> peer_description ( ) )"	3990:2:119758:119998	3052182	3	True				
ANR	3052440	CallExpression	"dprintf ( D_COMMAND , ""Calling HandleReq <%s> (%d) for command %d (%s) from %s %s\\n"" , comTable [ index ] . handler_descrip , inServiceCommandSocket_flag , req , comTable [ index ] . command_descrip , user , stream -> peer_description ( ) )"		3052182	0					
ANR	3052441	Callee	dprintf		3052182	0					
ANR	3052442	Identifier	dprintf		3052182	0					
ANR	3052443	ArgumentList	D_COMMAND		3052182	1					
ANR	3052444	Argument	D_COMMAND		3052182	0					
ANR	3052445	Identifier	D_COMMAND		3052182	0					
ANR	3052446	Argument	"""Calling HandleReq <%s> (%d) for command %d (%s) from %s %s\\n"""		3052182	1					
ANR	3052447	PrimaryExpression	"""Calling HandleReq <%s> (%d) for command %d (%s) from %s %s\\n"""		3052182	0					
ANR	3052448	Argument	comTable [ index ] . handler_descrip		3052182	2					
ANR	3052449	MemberAccess	comTable [ index ] . handler_descrip		3052182	0					
ANR	3052450	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052451	Identifier	comTable		3052182	0					
ANR	3052452	Identifier	index		3052182	1					
ANR	3052453	Identifier	handler_descrip		3052182	1					
ANR	3052454	Argument	inServiceCommandSocket_flag		3052182	3					
ANR	3052455	Identifier	inServiceCommandSocket_flag		3052182	0					
ANR	3052456	Argument	req		3052182	4					
ANR	3052457	Identifier	req		3052182	0					
ANR	3052458	Argument	comTable [ index ] . command_descrip		3052182	5					
ANR	3052459	MemberAccess	comTable [ index ] . command_descrip		3052182	0					
ANR	3052460	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052461	Identifier	comTable		3052182	0					
ANR	3052462	Identifier	index		3052182	1					
ANR	3052463	Identifier	command_descrip		3052182	1					
ANR	3052464	Argument	user		3052182	6					
ANR	3052465	Identifier	user		3052182	0					
ANR	3052466	Argument	stream -> peer_description ( )		3052182	7					
ANR	3052467	CallExpression	stream -> peer_description ( )		3052182	0					
ANR	3052468	Callee	stream -> peer_description		3052182	0					
ANR	3052469	PtrMemberAccess	stream -> peer_description		3052182	0					
ANR	3052470	Identifier	stream		3052182	0					
ANR	3052471	Identifier	peer_description		3052182	1					
ANR	3052472	ArgumentList			3052182	1					
ANR	3052473	IdentifierDeclStatement	UtcTime handler_start_time ;	3998:2:120003:120029	3052182	4	True				
ANR	3052474	IdentifierDecl	handler_start_time		3052182	0					
ANR	3052475	IdentifierDeclType	UtcTime		3052182	0					
ANR	3052476	Identifier	handler_start_time		3052182	1					
ANR	3052477	ExpressionStatement	handler_start_time . getTime ( )	3999:2:120033:120061	3052182	5	True				
ANR	3052478	CallExpression	handler_start_time . getTime ( )		3052182	0					
ANR	3052479	Callee	handler_start_time . getTime		3052182	0					
ANR	3052480	MemberAccess	handler_start_time . getTime		3052182	0					
ANR	3052481	Identifier	handler_start_time		3052182	0					
ANR	3052482	Identifier	getTime		3052182	1					
ANR	3052483	ArgumentList			3052182	1					
ANR	3052484	ExpressionStatement	curr_dataptr = & ( comTable [ index ] . data_ptr )	4002:2:120134:120176	3052182	6	True				
ANR	3052485	AssignmentExpression	curr_dataptr = & ( comTable [ index ] . data_ptr )		3052182	0		=			
ANR	3052486	Identifier	curr_dataptr		3052182	0					
ANR	3052487	UnaryOperationExpression	& ( comTable [ index ] . data_ptr )		3052182	1					
ANR	3052488	UnaryOperator	&		3052182	0					
ANR	3052489	MemberAccess	comTable [ index ] . data_ptr		3052182	1					
ANR	3052490	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052491	Identifier	comTable		3052182	0					
ANR	3052492	Identifier	index		3052182	1					
ANR	3052493	Identifier	data_ptr		3052182	1					
ANR	3052494	IfStatement	if ( comTable [ index ] . is_cpp )		3052182	7					
ANR	3052495	Condition	comTable [ index ] . is_cpp	4004:7:120186:120207	3052182	0	True				
ANR	3052496	MemberAccess	comTable [ index ] . is_cpp		3052182	0					
ANR	3052497	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052498	Identifier	comTable		3052182	0					
ANR	3052499	Identifier	index		3052182	1					
ANR	3052500	Identifier	is_cpp		3052182	1					
ANR	3052501	CompoundStatement		60:32:1915:1915	3052182	1					
ANR	3052502	IfStatement	if ( comTable [ index ] . handlercpp )		3052182	0					
ANR	3052503	Condition	comTable [ index ] . handlercpp	4006:8:120279:120304	3052182	0	True				
ANR	3052504	MemberAccess	comTable [ index ] . handlercpp		3052182	0					
ANR	3052505	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052506	Identifier	comTable		3052182	0					
ANR	3052507	Identifier	index		3052182	1					
ANR	3052508	Identifier	handlercpp		3052182	1					
ANR	3052509	Statement	result	4007:4:120312:120317	3052182	1	True				
ANR	3052510	Statement	=	4007:11:120319:120319	3052182	1	True				
ANR	3052511	Statement	(	4007:13:120321:120321	3052182	2	True				
ANR	3052512	Statement	comTable	4007:14:120322:120329	3052182	3	True				
ANR	3052513	Statement	[	4007:22:120330:120330	3052182	4	True				
ANR	3052514	Statement	index	4007:23:120331:120335	3052182	5	True				
ANR	3052515	Statement	]	4007:28:120336:120336	3052182	6	True				
ANR	3052516	Statement	.	4007:29:120337:120337	3052182	7	True				
ANR	3052517	Statement	service	4007:30:120338:120344	3052182	8	True				
ANR	3052518	Statement	->*	4007:37:120345:120347	3052182	9	True				
ANR	3052519	Statement	(	4007:40:120348:120348	3052182	10	True				
ANR	3052520	Statement	comTable	4007:41:120349:120356	3052182	11	True				
ANR	3052521	Statement	[	4007:49:120357:120357	3052182	12	True				
ANR	3052522	Statement	index	4007:50:120358:120362	3052182	13	True				
ANR	3052523	Statement	]	4007:55:120363:120363	3052182	14	True				
ANR	3052524	Statement	.	4007:56:120364:120364	3052182	15	True				
ANR	3052525	Statement	handlercpp	4007:57:120365:120374	3052182	16	True				
ANR	3052526	Statement	)	4007:67:120375:120375	3052182	17	True				
ANR	3052527	Statement	)	4007:68:120376:120376	3052182	18	True				
ANR	3052528	ExpressionStatement	"req , stream"	4007:69:120377:120389	3052182	19	True				
ANR	3052529	Expression	"req , stream"		3052182	0					
ANR	3052530	Identifier	req		3052182	0					
ANR	3052531	Identifier	stream		3052182	1					
ANR	3052532	ElseStatement	else		3052182	0					
ANR	3052533	CompoundStatement		64:9:2104:2104	3052182	0					
ANR	3052534	IfStatement	if ( comTable [ index ] . handler )		3052182	0					
ANR	3052535	Condition	comTable [ index ] . handler	4010:8:120473:120495	3052182	0	True				
ANR	3052536	MemberAccess	comTable [ index ] . handler		3052182	0					
ANR	3052537	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052538	Identifier	comTable		3052182	0					
ANR	3052539	Identifier	index		3052182	1					
ANR	3052540	Identifier	handler		3052182	1					
ANR	3052541	ExpressionStatement	"result = ( * ( comTable [ index ] . handler ) ) ( comTable [ index ] . service , req , stream )"	4011:4:120503:120576	3052182	1	True				
ANR	3052542	AssignmentExpression	"result = ( * ( comTable [ index ] . handler ) ) ( comTable [ index ] . service , req , stream )"		3052182	0		=			
ANR	3052543	Identifier	result		3052182	0					
ANR	3052544	CallExpression	"( * ( comTable [ index ] . handler ) ) ( comTable [ index ] . service , req , stream )"		3052182	1					
ANR	3052545	Callee	* ( comTable [ index ] . handler )		3052182	0					
ANR	3052546	UnaryOperationExpression	* ( comTable [ index ] . handler )		3052182	0					
ANR	3052547	UnaryOperator	*		3052182	0					
ANR	3052548	MemberAccess	comTable [ index ] . handler		3052182	1					
ANR	3052549	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052550	Identifier	comTable		3052182	0					
ANR	3052551	Identifier	index		3052182	1					
ANR	3052552	Identifier	handler		3052182	1					
ANR	3052553	ArgumentList	comTable [ index ] . service		3052182	1					
ANR	3052554	Argument	comTable [ index ] . service		3052182	0					
ANR	3052555	MemberAccess	comTable [ index ] . service		3052182	0					
ANR	3052556	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052557	Identifier	comTable		3052182	0					
ANR	3052558	Identifier	index		3052182	1					
ANR	3052559	Identifier	service		3052182	1					
ANR	3052560	Argument	req		3052182	1					
ANR	3052561	Identifier	req		3052182	0					
ANR	3052562	Argument	stream		3052182	2					
ANR	3052563	Identifier	stream		3052182	0					
ANR	3052564	ExpressionStatement	curr_dataptr = NULL	4015:2:120609:120628	3052182	8	True				
ANR	3052565	AssignmentExpression	curr_dataptr = NULL		3052182	0		=			
ANR	3052566	Identifier	curr_dataptr		3052182	0					
ANR	3052567	Identifier	NULL		3052182	1					
ANR	3052568	IdentifierDeclStatement	UtcTime handler_stop_time ;	4017:2:120633:120658	3052182	9	True				
ANR	3052569	IdentifierDecl	handler_stop_time		3052182	0					
ANR	3052570	IdentifierDeclType	UtcTime		3052182	0					
ANR	3052571	Identifier	handler_stop_time		3052182	1					
ANR	3052572	ExpressionStatement	handler_stop_time . getTime ( )	4018:2:120662:120689	3052182	10	True				
ANR	3052573	CallExpression	handler_stop_time . getTime ( )		3052182	0					
ANR	3052574	Callee	handler_stop_time . getTime		3052182	0					
ANR	3052575	MemberAccess	handler_stop_time . getTime		3052182	0					
ANR	3052576	Identifier	handler_stop_time		3052182	0					
ANR	3052577	Identifier	getTime		3052182	1					
ANR	3052578	ArgumentList			3052182	1					
ANR	3052579	IdentifierDeclStatement	float handler_time = handler_stop_time . difference ( & handler_start_time ) ;	4019:2:120693:120763	3052182	11	True				
ANR	3052580	IdentifierDecl	handler_time = handler_stop_time . difference ( & handler_start_time )		3052182	0					
ANR	3052581	IdentifierDeclType	float		3052182	0					
ANR	3052582	Identifier	handler_time		3052182	1					
ANR	3052583	AssignmentExpression	handler_time = handler_stop_time . difference ( & handler_start_time )		3052182	2		=			
ANR	3052584	Identifier	handler_time		3052182	0					
ANR	3052585	CallExpression	handler_stop_time . difference ( & handler_start_time )		3052182	1					
ANR	3052586	Callee	handler_stop_time . difference		3052182	0					
ANR	3052587	MemberAccess	handler_stop_time . difference		3052182	0					
ANR	3052588	Identifier	handler_stop_time		3052182	0					
ANR	3052589	Identifier	difference		3052182	1					
ANR	3052590	ArgumentList	& handler_start_time		3052182	1					
ANR	3052591	Argument	& handler_start_time		3052182	0					
ANR	3052592	UnaryOperationExpression	& handler_start_time		3052182	0					
ANR	3052593	UnaryOperator	&		3052182	0					
ANR	3052594	Identifier	handler_start_time		3052182	1					
ANR	3052595	ExpressionStatement	"dprintf ( D_COMMAND , ""Return from HandleReq <%s> (handler: %.3fs, sec: %.3fs, payload: %.3fs)\\n"" , comTable [ index ] . handler_descrip , handler_time , time_spent_on_sec , time_spent_waiting_for_payload )"	4021:2:120768:120962	3052182	12	True				
ANR	3052596	CallExpression	"dprintf ( D_COMMAND , ""Return from HandleReq <%s> (handler: %.3fs, sec: %.3fs, payload: %.3fs)\\n"" , comTable [ index ] . handler_descrip , handler_time , time_spent_on_sec , time_spent_waiting_for_payload )"		3052182	0					
ANR	3052597	Callee	dprintf		3052182	0					
ANR	3052598	Identifier	dprintf		3052182	0					
ANR	3052599	ArgumentList	D_COMMAND		3052182	1					
ANR	3052600	Argument	D_COMMAND		3052182	0					
ANR	3052601	Identifier	D_COMMAND		3052182	0					
ANR	3052602	Argument	"""Return from HandleReq <%s> (handler: %.3fs, sec: %.3fs, payload: %.3fs)\\n"""		3052182	1					
ANR	3052603	PrimaryExpression	"""Return from HandleReq <%s> (handler: %.3fs, sec: %.3fs, payload: %.3fs)\\n"""		3052182	0					
ANR	3052604	Argument	comTable [ index ] . handler_descrip		3052182	2					
ANR	3052605	MemberAccess	comTable [ index ] . handler_descrip		3052182	0					
ANR	3052606	ArrayIndexing	comTable [ index ]		3052182	0					
ANR	3052607	Identifier	comTable		3052182	0					
ANR	3052608	Identifier	index		3052182	1					
ANR	3052609	Identifier	handler_descrip		3052182	1					
ANR	3052610	Argument	handler_time		3052182	3					
ANR	3052611	Identifier	handler_time		3052182	0					
ANR	3052612	Argument	time_spent_on_sec		3052182	4					
ANR	3052613	Identifier	time_spent_on_sec		3052182	0					
ANR	3052614	Argument	time_spent_waiting_for_payload		3052182	5					
ANR	3052615	Identifier	time_spent_waiting_for_payload		3052182	0					
ANR	3052616	IfStatement	if ( delete_stream && result != KEEP_STREAM )		3052182	6					
ANR	3052617	Condition	delete_stream && result != KEEP_STREAM	4025:6:120975:121012	3052182	0	True				
ANR	3052618	AndExpression	delete_stream && result != KEEP_STREAM		3052182	0		&&			
ANR	3052619	Identifier	delete_stream		3052182	0					
ANR	3052620	EqualityExpression	result != KEEP_STREAM		3052182	1		!=			
ANR	3052621	Identifier	result		3052182	0					
ANR	3052622	Identifier	KEEP_STREAM		3052182	1					
ANR	3052623	CompoundStatement		81:47:2720:2720	3052182	1					
ANR	3052624	Statement	delete	4026:2:121020:121025	3052182	0	True				
ANR	3052625	ExpressionStatement	stream	4026:9:121027:121033	3052182	1	True				
ANR	3052626	Identifier	stream		3052182	0					
ANR	3052627	ReturnStatement	return result ;	4029:1:121040:121053	3052182	7	True				
ANR	3052628	Identifier	result		3052182	0					
ANR	3052629	ReturnType	int		3052182	1					
ANR	3052630	Identifier	DaemonCore :: CallCommandHandler		3052182	2					
ANR	3052631	ParameterList	"int req , Stream * stream , bool delete_stream , bool check_payload , float time_spent_on_sec , float time_spent_waiting_for_payload"		3052182	3					
ANR	3052632	Parameter	int req	3944:31:118172:118178	3052182	0	True				
ANR	3052633	ParameterType	int		3052182	0					
ANR	3052634	Identifier	req		3052182	1					
ANR	3052635	Parameter	Stream * stream	3944:39:118180:118193	3052182	1	True				
ANR	3052636	ParameterType	Stream *		3052182	0					
ANR	3052637	Identifier	stream		3052182	1					
ANR	3052638	Parameter	bool delete_stream	3944:54:118195:118212	3052182	2	True				
ANR	3052639	ParameterType	bool		3052182	0					
ANR	3052640	Identifier	delete_stream		3052182	1					
ANR	3052641	Parameter	bool check_payload	3944:73:118214:118231	3052182	3	True				
ANR	3052642	ParameterType	bool		3052182	0					
ANR	3052643	Identifier	check_payload		3052182	1					
ANR	3052644	Parameter	float time_spent_on_sec	3944:92:118233:118255	3052182	4	True				
ANR	3052645	ParameterType	float		3052182	0					
ANR	3052646	Identifier	time_spent_on_sec		3052182	1					
ANR	3052647	Parameter	float time_spent_waiting_for_payload	3944:116:118257:118292	3052182	5	True				
ANR	3052648	ParameterType	float		3052182	0					
ANR	3052649	Identifier	time_spent_waiting_for_payload		3052182	1					
ANR	3052650	CFGEntryNode	ENTRY		3052182		True				
ANR	3052651	CFGExitNode	EXIT		3052182		True				
ANR	3052652	Symbol	* index		3052182						
ANR	3052653	Symbol	& DaemonCore :: HandleReqPayloadReady		3052182						
ANR	3052654	Symbol	comTable [ index ] . handlercpp		3052182						
ANR	3052655	Symbol	Register_Socket		3052182						
ANR	3052656	Symbol	curr_dataptr		3052182						
ANR	3052657	Symbol	KEEP_STREAM		3052182						
ANR	3052658	Symbol	* ( comTable [ index ] . handler )		3052182						
ANR	3052659	Symbol	comTable [ index ] . command_descrip		3052182						
ANR	3052660	Symbol	& handler_start_time		3052182						
ANR	3052661	Symbol	stream -> type		3052182						
ANR	3052662	Symbol	Stream :: reli_sock		3052182						
ANR	3052663	Symbol	& index		3052182						
ANR	3052664	Symbol	sock -> get_deadline		3052182						
ANR	3052665	Symbol	CommandNumToTableIndex		3052182						
ANR	3052666	Symbol	D_COMMAND		3052182						
ANR	3052667	Symbol	req		3052182						
ANR	3052668	Symbol	stream -> peer_description		3052182						
ANR	3052669	Symbol	NULL		3052182						
ANR	3052670	Symbol	time_spent_on_sec		3052182						
ANR	3052671	Symbol	this		3052182						
ANR	3052672	Symbol	index		3052182						
ANR	3052673	Symbol	rc		3052182						
ANR	3052674	Symbol	* * comTable		3052182						
ANR	3052675	Symbol	callback_desc		3052182						
ANR	3052676	Symbol	* stream		3052182						
ANR	3052677	Symbol	comTable [ index ] . wait_for_payload		3052182						
ANR	3052678	Symbol	sock -> deadline_expired		3052182						
ANR	3052679	Symbol	comTable [ index ] . handler		3052182						
ANR	3052680	Symbol	handler_time		3052182						
ANR	3052681	Symbol	delete_stream		3052182						
ANR	3052682	Symbol	result		3052182						
ANR	3052683	Symbol	sock -> getFullyQualifiedUser		3052182						
ANR	3052684	Symbol	* comTable		3052182						
ANR	3052685	Symbol	stream		3052182						
ANR	3052686	Symbol	comTable [ index ] . is_cpp		3052182						
ANR	3052687	Symbol	time_spent_waiting_for_payload		3052182						
ANR	3052688	Symbol	inServiceCommandSocket_flag		3052182						
ANR	3052689	Symbol	& comTable [ index ] . data_ptr		3052182						
ANR	3052690	Symbol	* comTable [ index ] . handler		3052182						
ANR	3052691	Symbol	* * index		3052182						
ANR	3052692	Symbol	* sock		3052182						
ANR	3052693	Symbol	handler_stop_time . difference		3052182						
ANR	3052694	Symbol	handler_start_time		3052182						
ANR	3052695	Symbol	handler_stop_time		3052182						
ANR	3052696	Symbol	D_ALWAYS		3052182						
ANR	3052697	Symbol	check_payload		3052182						
ANR	3052698	Symbol	callback_info		3052182						
ANR	3052699	Symbol	comTable [ index ] . handler_descrip		3052182						
ANR	3052700	Symbol	old_deadline		3052182						
ANR	3052701	Symbol	sock		3052182						
ANR	3052702	Symbol	sock -> readReady		3052182						
ANR	3052703	Symbol	comTable		3052182						
ANR	3052704	Symbol	reqFound		3052182						
ANR	3052705	Symbol	FALSE		3052182						
ANR	3052706	Symbol	user		3052182						
ANR	3052707	Symbol	comTable [ index ] . service		3052182						
ANR	3052708	Function	DaemonCore :: CheckPrivState	4032:0:121058:121798							
ANR	3052709	FunctionDef	DaemonCore :: CheckPrivState ()		3052708	0					
ANR	3052710	CompoundStatement		4034:0:121098:121798	3052708	0					
ANR	3052711	IdentifierDeclStatement	priv_state old_priv = set_priv ( Default_Priv_State ) ;	4037:1:121216:121268	3052708	0	True				
ANR	3052712	IdentifierDecl	old_priv = set_priv ( Default_Priv_State )		3052708	0					
ANR	3052713	IdentifierDeclType	priv_state		3052708	0					
ANR	3052714	Identifier	old_priv		3052708	1					
ANR	3052715	AssignmentExpression	old_priv = set_priv ( Default_Priv_State )		3052708	2		=			
ANR	3052716	Identifier	old_priv		3052708	0					
ANR	3052717	CallExpression	set_priv ( Default_Priv_State )		3052708	1					
ANR	3052718	Callee	set_priv		3052708	0					
ANR	3052719	Identifier	set_priv		3052708	0					
ANR	3052720	ArgumentList	Default_Priv_State		3052708	1					
ANR	3052721	Argument	Default_Priv_State		3052708	0					
ANR	3052722	Identifier	Default_Priv_State		3052708	0					
ANR	3052723	IfStatement	if ( Default_Priv_State == PRIV_USER )		3052708	1					
ANR	3052724	Condition	Default_Priv_State == PRIV_USER	4041:6:121356:121386	3052708	0	True				
ANR	3052725	EqualityExpression	Default_Priv_State == PRIV_USER		3052708	0		==			
ANR	3052726	Identifier	Default_Priv_State		3052708	0					
ANR	3052727	Identifier	PRIV_USER		3052708	1					
ANR	3052728	CompoundStatement		8:40:291:291	3052708	1					
ANR	3052729	ReturnStatement	return ;	4042:2:121394:121400	3052708	0	True				
ANR	3052730	IfStatement	if ( old_priv != Default_Priv_State )		3052708	2					
ANR	3052731	Condition	old_priv != Default_Priv_State	4047:5:121464:121493	3052708	0	True				
ANR	3052732	EqualityExpression	old_priv != Default_Priv_State		3052708	0		!=			
ANR	3052733	Identifier	old_priv		3052708	0					
ANR	3052734	Identifier	Default_Priv_State		3052708	1					
ANR	3052735	CompoundStatement		14:38:398:398	3052708	1					
ANR	3052736	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore ERROR: Handler returned with priv state %d\\n"" , old_priv )"	4048:2:121501:121599	3052708	0	True				
ANR	3052737	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore ERROR: Handler returned with priv state %d\\n"" , old_priv )"		3052708	0					
ANR	3052738	Callee	dprintf		3052708	0					
ANR	3052739	Identifier	dprintf		3052708	0					
ANR	3052740	ArgumentList	D_ALWAYS		3052708	1					
ANR	3052741	Argument	D_ALWAYS		3052708	0					
ANR	3052742	Identifier	D_ALWAYS		3052708	0					
ANR	3052743	Argument	"""DaemonCore ERROR: Handler returned with priv state %d\\n"""		3052708	1					
ANR	3052744	PrimaryExpression	"""DaemonCore ERROR: Handler returned with priv state %d\\n"""		3052708	0					
ANR	3052745	Argument	old_priv		3052708	2					
ANR	3052746	Identifier	old_priv		3052708	0					
ANR	3052747	ExpressionStatement	"dprintf ( D_ALWAYS , ""History of priv-state changes:\\n"" )"	4051:2:121603:121658	3052708	1	True				
ANR	3052748	CallExpression	"dprintf ( D_ALWAYS , ""History of priv-state changes:\\n"" )"		3052708	0					
ANR	3052749	Callee	dprintf		3052708	0					
ANR	3052750	Identifier	dprintf		3052708	0					
ANR	3052751	ArgumentList	D_ALWAYS		3052708	1					
ANR	3052752	Argument	D_ALWAYS		3052708	0					
ANR	3052753	Identifier	D_ALWAYS		3052708	0					
ANR	3052754	Argument	"""History of priv-state changes:\\n"""		3052708	1					
ANR	3052755	PrimaryExpression	"""History of priv-state changes:\\n"""		3052708	0					
ANR	3052756	ExpressionStatement	display_priv_log ( )	4052:2:121662:121680	3052708	2	True				
ANR	3052757	CallExpression	display_priv_log ( )		3052708	0					
ANR	3052758	Callee	display_priv_log		3052708	0					
ANR	3052759	Identifier	display_priv_log		3052708	0					
ANR	3052760	ArgumentList			3052708	1					
ANR	3052761	IfStatement	"if ( param_boolean_crufty ( ""EXCEPT_ON_ERROR"" , false ) )"		3052708	3					
ANR	3052762	Condition	"param_boolean_crufty ( ""EXCEPT_ON_ERROR"" , false )"	4053:6:121688:121733	3052708	0	True				
ANR	3052763	CallExpression	"param_boolean_crufty ( ""EXCEPT_ON_ERROR"" , false )"		3052708	0					
ANR	3052764	Callee	param_boolean_crufty		3052708	0					
ANR	3052765	Identifier	param_boolean_crufty		3052708	0					
ANR	3052766	ArgumentList	"""EXCEPT_ON_ERROR"""		3052708	1					
ANR	3052767	Argument	"""EXCEPT_ON_ERROR"""		3052708	0					
ANR	3052768	PrimaryExpression	"""EXCEPT_ON_ERROR"""		3052708	0					
ANR	3052769	Argument	false		3052708	1					
ANR	3052770	Identifier	false		3052708	0					
ANR	3052771	CompoundStatement		20:54:637:637	3052708	1					
ANR	3052772	ExpressionStatement	"EXCEPT ( ""Priv-state error found by DaemonCore"" )"	4054:3:121741:121789	3052708	0	True				
ANR	3052773	CallExpression	"EXCEPT ( ""Priv-state error found by DaemonCore"" )"		3052708	0					
ANR	3052774	Callee	EXCEPT		3052708	0					
ANR	3052775	Identifier	EXCEPT		3052708	0					
ANR	3052776	ArgumentList	"""Priv-state error found by DaemonCore"""		3052708	1					
ANR	3052777	Argument	"""Priv-state error found by DaemonCore"""		3052708	0					
ANR	3052778	PrimaryExpression	"""Priv-state error found by DaemonCore"""		3052708	0					
ANR	3052779	ReturnType	void		3052708	1					
ANR	3052780	Identifier	DaemonCore :: CheckPrivState		3052708	2					
ANR	3052781	ParameterList			3052708	3					
ANR	3052782	CFGEntryNode	ENTRY		3052708		True				
ANR	3052783	CFGExitNode	EXIT		3052708		True				
ANR	3052784	Symbol	old_priv		3052708						
ANR	3052785	Symbol	set_priv		3052708						
ANR	3052786	Symbol	PRIV_USER		3052708						
ANR	3052787	Symbol	D_ALWAYS		3052708						
ANR	3052788	Symbol	false		3052708						
ANR	3052789	Symbol	param_boolean_crufty		3052708						
ANR	3052790	Symbol	Default_Priv_State		3052708						
ANR	3052791	Function	DaemonCore :: ServiceCommandSocket	4059:0:121801:123075							
ANR	3052792	FunctionDef	DaemonCore :: ServiceCommandSocket ()		3052791	0					
ANR	3052793	CompoundStatement		4060:0:121840:123075	3052791	0					
ANR	3052794	IdentifierDeclStatement	Selector selector ;	4061:1:121843:121860	3052791	0	True				
ANR	3052795	IdentifierDecl	selector		3052791	0					
ANR	3052796	IdentifierDeclType	Selector		3052791	0					
ANR	3052797	Identifier	selector		3052791	1					
ANR	3052798	IdentifierDeclStatement	int commands_served = 0 ;	4062:1:121863:121886	3052791	1	True				
ANR	3052799	IdentifierDecl	commands_served = 0		3052791	0					
ANR	3052800	IdentifierDeclType	int		3052791	0					
ANR	3052801	Identifier	commands_served		3052791	1					
ANR	3052802	AssignmentExpression	commands_served = 0		3052791	2		=			
ANR	3052803	Identifier	commands_served		3052791	0					
ANR	3052804	PrimaryExpression	0		3052791	1					
ANR	3052805	IfStatement	if ( inServiceCommandSocket_flag )		3052791	2					
ANR	3052806	Condition	inServiceCommandSocket_flag	4064:6:121895:121921	3052791	0	True				
ANR	3052807	Identifier	inServiceCommandSocket_flag		3052791	0					
ANR	3052808	CompoundStatement		5:36:84:84	3052791	1					
ANR	3052809	ReturnStatement	return 0 ;	4067:2:122027:122035	3052791	0	True				
ANR	3052810	PrimaryExpression	0		3052791	0					
ANR	3052811	IfStatement	if ( initial_command_sock == - 1 )		3052791	3					
ANR	3052812	Condition	initial_command_sock == - 1	4071:6:122093:122118	3052791	0	True				
ANR	3052813	EqualityExpression	initial_command_sock == - 1		3052791	0		==			
ANR	3052814	Identifier	initial_command_sock		3052791	0					
ANR	3052815	UnaryOperationExpression	- 1		3052791	1					
ANR	3052816	UnaryOperator	-		3052791	0					
ANR	3052817	PrimaryExpression	1		3052791	1					
ANR	3052818	ReturnStatement	return 0 ;	4072:2:122124:122132	3052791	1	True				
ANR	3052819	PrimaryExpression	0		3052791	0					
ANR	3052820	IfStatement	if ( ! ( ( * sockTable ) [ initial_command_sock ] . iosock ) )		3052791	4					
ANR	3052821	Condition	! ( ( * sockTable ) [ initial_command_sock ] . iosock )	4073:6:122140:122184	3052791	0	True				
ANR	3052822	UnaryOperationExpression	! ( ( * sockTable ) [ initial_command_sock ] . iosock )		3052791	0					
ANR	3052823	UnaryOperator	!		3052791	0					
ANR	3052824	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		3052791	1					
ANR	3052825	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		3052791	0					
ANR	3052826	UnaryOperationExpression	* sockTable		3052791	0					
ANR	3052827	UnaryOperator	*		3052791	0					
ANR	3052828	Identifier	sockTable		3052791	1					
ANR	3052829	Identifier	initial_command_sock		3052791	1					
ANR	3052830	Identifier	iosock		3052791	1					
ANR	3052831	ReturnStatement	return 0 ;	4074:2:122190:122198	3052791	1	True				
ANR	3052832	PrimaryExpression	0		3052791	0					
ANR	3052833	ExpressionStatement	selector . set_timeout ( 0 )	4077:1:122273:122298	3052791	5	True				
ANR	3052834	CallExpression	selector . set_timeout ( 0 )		3052791	0					
ANR	3052835	Callee	selector . set_timeout		3052791	0					
ANR	3052836	MemberAccess	selector . set_timeout		3052791	0					
ANR	3052837	Identifier	selector		3052791	0					
ANR	3052838	Identifier	set_timeout		3052791	1					
ANR	3052839	ArgumentList	0		3052791	1					
ANR	3052840	Argument	0		3052791	0					
ANR	3052841	PrimaryExpression	0		3052791	0					
ANR	3052842	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"	4078:1:122301:122403	3052791	6	True				
ANR	3052843	CallExpression	"selector . add_fd ( ( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		3052791	0					
ANR	3052844	Callee	selector . add_fd		3052791	0					
ANR	3052845	MemberAccess	selector . add_fd		3052791	0					
ANR	3052846	Identifier	selector		3052791	0					
ANR	3052847	Identifier	add_fd		3052791	1					
ANR	3052848	ArgumentList	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( )		3052791	1					
ANR	3052849	Argument	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( )		3052791	0					
ANR	3052850	CallExpression	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( )		3052791	0					
ANR	3052851	Callee	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc		3052791	0					
ANR	3052852	PtrMemberAccess	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc		3052791	0					
ANR	3052853	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		3052791	0					
ANR	3052854	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		3052791	0					
ANR	3052855	UnaryOperationExpression	* sockTable		3052791	0					
ANR	3052856	UnaryOperator	*		3052791	0					
ANR	3052857	Identifier	sockTable		3052791	1					
ANR	3052858	Identifier	initial_command_sock		3052791	1					
ANR	3052859	Identifier	iosock		3052791	1					
ANR	3052860	Identifier	get_file_desc		3052791	1					
ANR	3052861	ArgumentList			3052791	1					
ANR	3052862	Argument	Selector :: IO_READ		3052791	1					
ANR	3052863	Identifier	Selector :: IO_READ		3052791	0					
ANR	3052864	ExpressionStatement	inServiceCommandSocket_flag = TRUE	4081:1:122407:122441	3052791	7	True				
ANR	3052865	AssignmentExpression	inServiceCommandSocket_flag = TRUE		3052791	0		=			
ANR	3052866	Identifier	inServiceCommandSocket_flag		3052791	0					
ANR	3052867	Identifier	TRUE		3052791	1					
ANR	3052868	DoStatement	do		3052791	8					
ANR	3052869	CompoundStatement		23:4:606:606	3052791	0					
ANR	3052870	ExpressionStatement	errno = 0	4084:2:122452:122461	3052791	0	True				
ANR	3052871	AssignmentExpression	errno = 0		3052791	0		=			
ANR	3052872	Identifier	errno		3052791	0					
ANR	3052873	PrimaryExpression	0		3052791	1					
ANR	3052874	ExpressionStatement	selector . execute ( )	4085:2:122465:122483	3052791	1	True				
ANR	3052875	CallExpression	selector . execute ( )		3052791	0					
ANR	3052876	Callee	selector . execute		3052791	0					
ANR	3052877	MemberAccess	selector . execute		3052791	0					
ANR	3052878	Identifier	selector		3052791	0					
ANR	3052879	Identifier	execute		3052791	1					
ANR	3052880	ArgumentList			3052791	1					
ANR	3052881	IfStatement	if ( selector . failed ( ) )		3052791	2					
ANR	3052882	Condition	selector . failed ( )	4088:7:122516:122532	3052791	0	True				
ANR	3052883	CallExpression	selector . failed ( )		3052791	0					
ANR	3052884	Callee	selector . failed		3052791	0					
ANR	3052885	MemberAccess	selector . failed		3052791	0					
ANR	3052886	Identifier	selector		3052791	0					
ANR	3052887	Identifier	failed		3052791	1					
ANR	3052888	ArgumentList			3052791	1					
ANR	3052889	CompoundStatement		29:27:695:695	3052791	1					
ANR	3052890	ExpressionStatement	"EXCEPT ( ""select, error # = %d"" , errno )"	4090:4:122585:122622	3052791	0	True				
ANR	3052891	CallExpression	"EXCEPT ( ""select, error # = %d"" , errno )"		3052791	0					
ANR	3052892	Callee	EXCEPT		3052791	0					
ANR	3052893	Identifier	EXCEPT		3052791	0					
ANR	3052894	ArgumentList	"""select, error # = %d"""		3052791	1					
ANR	3052895	Argument	"""select, error # = %d"""		3052791	0					
ANR	3052896	PrimaryExpression	"""select, error # = %d"""		3052791	0					
ANR	3052897	Argument	errno		3052791	1					
ANR	3052898	Identifier	errno		3052791	0					
ANR	3052899	IfStatement	if ( selector . has_ready ( ) )		3052791	3					
ANR	3052900	Condition	selector . has_ready ( )	4099:7:122769:122788	3052791	0	True				
ANR	3052901	CallExpression	selector . has_ready ( )		3052791	0					
ANR	3052902	Callee	selector . has_ready		3052791	0					
ANR	3052903	MemberAccess	selector . has_ready		3052791	0					
ANR	3052904	Identifier	selector		3052791	0					
ANR	3052905	Identifier	has_ready		3052791	1					
ANR	3052906	ArgumentList			3052791	1					
ANR	3052907	CompoundStatement		40:30:951:951	3052791	1					
ANR	3052908	ExpressionStatement	HandleReq ( initial_command_sock )	4100:3:122797:122830	3052791	0	True				
ANR	3052909	CallExpression	HandleReq ( initial_command_sock )		3052791	0					
ANR	3052910	Callee	HandleReq		3052791	0					
ANR	3052911	Identifier	HandleReq		3052791	0					
ANR	3052912	ArgumentList	initial_command_sock		3052791	1					
ANR	3052913	Argument	initial_command_sock		3052791	0					
ANR	3052914	Identifier	initial_command_sock		3052791	0					
ANR	3052915	ExpressionStatement	commands_served ++	4101:3:122835:122852	3052791	1	True				
ANR	3052916	PostIncDecOperationExpression	commands_served ++		3052791	0					
ANR	3052917	Identifier	commands_served		3052791	0					
ANR	3052918	IncDec	++		3052791	1					
ANR	3052919	ExpressionStatement	CheckPrivState ( )	4103:3:122904:122920	3052791	2	True				
ANR	3052920	CallExpression	CheckPrivState ( )		3052791	0					
ANR	3052921	Callee	CheckPrivState		3052791	0					
ANR	3052922	Identifier	CheckPrivState		3052791	0					
ANR	3052923	ArgumentList			3052791	1					
ANR	3052924	Condition	selector . has_ready ( )	4106:11:122938:122957	3052791	1	True				
ANR	3052925	CallExpression	selector . has_ready ( )		3052791	0					
ANR	3052926	Callee	selector . has_ready		3052791	0					
ANR	3052927	MemberAccess	selector . has_ready		3052791	0					
ANR	3052928	Identifier	selector		3052791	0					
ANR	3052929	Identifier	has_ready		3052791	1					
ANR	3052930	ArgumentList			3052791	1					
ANR	3052931	ExpressionStatement	inServiceCommandSocket_flag = FALSE	4108:1:123013:123048	3052791	9	True				
ANR	3052932	AssignmentExpression	inServiceCommandSocket_flag = FALSE		3052791	0		=			
ANR	3052933	Identifier	inServiceCommandSocket_flag		3052791	0					
ANR	3052934	Identifier	FALSE		3052791	1					
ANR	3052935	ReturnStatement	return commands_served ;	4109:1:123051:123073	3052791	10	True				
ANR	3052936	Identifier	commands_served		3052791	0					
ANR	3052937	ReturnType	int		3052791	1					
ANR	3052938	Identifier	DaemonCore :: ServiceCommandSocket		3052791	2					
ANR	3052939	ParameterList			3052791	3					
ANR	3052940	CFGEntryNode	ENTRY		3052791		True				
ANR	3052941	CFGExitNode	EXIT		3052791		True				
ANR	3052942	Symbol	errno		3052791						
ANR	3052943	Symbol	* * * sockTable		3052791						
ANR	3052944	Symbol	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc		3052791						
ANR	3052945	Symbol	selector . failed		3052791						
ANR	3052946	Symbol	sockTable		3052791						
ANR	3052947	Symbol	selector . has_ready		3052791						
ANR	3052948	Symbol	TRUE		3052791						
ANR	3052949	Symbol	* * sockTable		3052791						
ANR	3052950	Symbol	Selector :: IO_READ		3052791						
ANR	3052951	Symbol	commands_served		3052791						
ANR	3052952	Symbol	* ( * sockTable ) [ initial_command_sock ] . iosock		3052791						
ANR	3052953	Symbol	( * sockTable ) [ initial_command_sock ] . iosock		3052791						
ANR	3052954	Symbol	* sockTable		3052791						
ANR	3052955	Symbol	initial_command_sock		3052791						
ANR	3052956	Symbol	* * initial_command_sock		3052791						
ANR	3052957	Symbol	inServiceCommandSocket_flag		3052791						
ANR	3052958	Symbol	selector		3052791						
ANR	3052959	Symbol	FALSE		3052791						
ANR	3052960	Symbol	* initial_command_sock		3052791						
ANR	3052961	Function	DaemonCore :: HandleReqSocketTimerHandler	4113:0:123079:123739							
ANR	3052962	FunctionDef	DaemonCore :: HandleReqSocketTimerHandler ()		3052961	0					
ANR	3052963	CompoundStatement		4114:0:123125:123739	3052961	0					
ANR	3052964	IdentifierDeclStatement	Stream * stream = NULL ;	4115:1:123128:123149	3052961	0	True				
ANR	3052965	IdentifierDecl	* stream = NULL		3052961	0					
ANR	3052966	IdentifierDeclType	Stream *		3052961	0					
ANR	3052967	Identifier	stream		3052961	1					
ANR	3052968	AssignmentExpression	* stream = NULL		3052961	2		=			
ANR	3052969	Identifier	NULL		3052961	0					
ANR	3052970	Identifier	NULL		3052961	1					
ANR	3052971	ExpressionStatement	stream = ( Stream * ) GetDataPtr ( )	4123:1:123412:123443	3052961	1	True				
ANR	3052972	AssignmentExpression	stream = ( Stream * ) GetDataPtr ( )		3052961	0		=			
ANR	3052973	Identifier	stream		3052961	0					
ANR	3052974	CastExpression	( Stream * ) GetDataPtr ( )		3052961	1					
ANR	3052975	CastTarget	Stream *		3052961	0					
ANR	3052976	CallExpression	GetDataPtr ( )		3052961	1					
ANR	3052977	Callee	GetDataPtr		3052961	0					
ANR	3052978	Identifier	GetDataPtr		3052961	0					
ANR	3052979	ArgumentList			3052961	1					
ANR	3052980	ExpressionStatement	ASSERT ( stream )	4124:1:123446:123460	3052961	2	True				
ANR	3052981	CallExpression	ASSERT ( stream )		3052961	0					
ANR	3052982	Callee	ASSERT		3052961	0					
ANR	3052983	Identifier	ASSERT		3052961	0					
ANR	3052984	ArgumentList	stream		3052961	1					
ANR	3052985	Argument	stream		3052961	0					
ANR	3052986	Identifier	stream		3052961	0					
ANR	3052987	ExpressionStatement	ASSERT ( stream -> type ( ) == Stream :: reli_sock )	4125:1:123463:123508	3052961	3	True				
ANR	3052988	CallExpression	ASSERT ( stream -> type ( ) == Stream :: reli_sock )		3052961	0					
ANR	3052989	Callee	ASSERT		3052961	0					
ANR	3052990	Identifier	ASSERT		3052961	0					
ANR	3052991	ArgumentList	stream -> type ( ) == Stream :: reli_sock		3052961	1					
ANR	3052992	Argument	stream -> type ( ) == Stream :: reli_sock		3052961	0					
ANR	3052993	EqualityExpression	stream -> type ( ) == Stream :: reli_sock		3052961	0		==			
ANR	3052994	CallExpression	stream -> type ( )		3052961	0					
ANR	3052995	Callee	stream -> type		3052961	0					
ANR	3052996	PtrMemberAccess	stream -> type		3052961	0					
ANR	3052997	Identifier	stream		3052961	0					
ANR	3052998	Identifier	type		3052961	1					
ANR	3052999	ArgumentList			3052961	1					
ANR	3053000	Identifier	Stream :: reli_sock		3052961	1					
ANR	3053001	ExpressionStatement	Cancel_Socket ( stream )	4128:1:123541:123562	3052961	4	True				
ANR	3053002	CallExpression	Cancel_Socket ( stream )		3052961	0					
ANR	3053003	Callee	Cancel_Socket		3052961	0					
ANR	3053004	Identifier	Cancel_Socket		3052961	0					
ANR	3053005	ArgumentList	stream		3052961	1					
ANR	3053006	Argument	stream		3052961	0					
ANR	3053007	Identifier	stream		3052961	0					
ANR	3053008	ExpressionStatement	"dprintf ( D_ALWAYS , ""Closing socket from %s - no data received\\n"" , ( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value ( ) )"	4131:1:123590:123706	3052961	5	True				
ANR	3053009	CallExpression	"dprintf ( D_ALWAYS , ""Closing socket from %s - no data received\\n"" , ( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value ( ) )"		3052961	0					
ANR	3053010	Callee	dprintf		3052961	0					
ANR	3053011	Identifier	dprintf		3052961	0					
ANR	3053012	ArgumentList	D_ALWAYS		3052961	1					
ANR	3053013	Argument	D_ALWAYS		3052961	0					
ANR	3053014	Identifier	D_ALWAYS		3052961	0					
ANR	3053015	Argument	"""Closing socket from %s - no data received\\n"""		3052961	1					
ANR	3053016	PrimaryExpression	"""Closing socket from %s - no data received\\n"""		3052961	0					
ANR	3053017	Argument	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value ( )		3052961	2					
ANR	3053018	CallExpression	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value ( )		3052961	0					
ANR	3053019	Callee	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value		3052961	0					
ANR	3053020	MemberAccess	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value		3052961	0					
ANR	3053021	CallExpression	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( )		3052961	0					
ANR	3053022	Callee	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful		3052961	0					
ANR	3053023	MemberAccess	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful		3052961	0					
ANR	3053024	CallExpression	( ( Sock * ) stream ) -> peer_addr ( )		3052961	0					
ANR	3053025	Callee	( ( Sock * ) stream ) -> peer_addr		3052961	0					
ANR	3053026	PtrMemberAccess	( ( Sock * ) stream ) -> peer_addr		3052961	0					
ANR	3053027	CastExpression	( Sock * ) stream		3052961	0					
ANR	3053028	CastTarget	Sock *		3052961	0					
ANR	3053029	Identifier	stream		3052961	1					
ANR	3053030	Identifier	peer_addr		3052961	1					
ANR	3053031	ArgumentList			3052961	1					
ANR	3053032	Identifier	to_sinful		3052961	1					
ANR	3053033	ArgumentList			3052961	1					
ANR	3053034	Identifier	Value		3052961	1					
ANR	3053035	ArgumentList			3052961	1					
ANR	3053036	Statement	delete	4133:1:123709:123714	3052961	6	True				
ANR	3053037	ExpressionStatement	stream	4133:8:123716:123722	3052961	7	True				
ANR	3053038	Identifier	stream		3052961	0					
ANR	3053039	ReturnStatement	return TRUE ;	4135:1:123726:123737	3052961	8	True				
ANR	3053040	Identifier	TRUE		3052961	0					
ANR	3053041	ReturnType	int		3052961	1					
ANR	3053042	Identifier	DaemonCore :: HandleReqSocketTimerHandler		3052961	2					
ANR	3053043	ParameterList			3052961	3					
ANR	3053044	CFGEntryNode	ENTRY		3052961		True				
ANR	3053045	CFGExitNode	EXIT		3052961		True				
ANR	3053046	Symbol	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful		3052961						
ANR	3053047	Symbol	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value		3052961						
ANR	3053048	Symbol	NULL		3052961						
ANR	3053049	Symbol	stream		3052961						
ANR	3053050	Symbol	( ( Sock * ) stream ) -> peer_addr		3052961						
ANR	3053051	Symbol	* stream		3052961						
ANR	3053052	Symbol	stream -> type		3052961						
ANR	3053053	Symbol	D_ALWAYS		3052961						
ANR	3053054	Symbol	TRUE		3052961						
ANR	3053055	Symbol	GetDataPtr		3052961						
ANR	3053056	Symbol	Stream :: reli_sock		3052961						
ANR	3053057	Function	DaemonCore :: HandleReqSocketHandler	4139:0:123743:124842							
ANR	3053058	FunctionDef	DaemonCore :: HandleReqSocketHandler (Stream * stream)		3053057	0					
ANR	3053059	CompoundStatement		4140:0:123798:124842	3053057	0					
ANR	3053060	IdentifierDeclStatement	int * timeout_tid = NULL ;	4141:1:123801:123824	3053057	0	True				
ANR	3053061	IdentifierDecl	* timeout_tid = NULL		3053057	0					
ANR	3053062	IdentifierDeclType	int *		3053057	0					
ANR	3053063	Identifier	timeout_tid		3053057	1					
ANR	3053064	AssignmentExpression	* timeout_tid = NULL		3053057	2		=			
ANR	3053065	Identifier	NULL		3053057	0					
ANR	3053066	Identifier	NULL		3053057	1					
ANR	3053067	ExpressionStatement	timeout_tid = ( int * ) GetDataPtr ( )	4149:1:124041:124075	3053057	1	True				
ANR	3053068	AssignmentExpression	timeout_tid = ( int * ) GetDataPtr ( )		3053057	0		=			
ANR	3053069	Identifier	timeout_tid		3053057	0					
ANR	3053070	CastExpression	( int * ) GetDataPtr ( )		3053057	1					
ANR	3053071	CastTarget	int *		3053057	0					
ANR	3053072	CallExpression	GetDataPtr ( )		3053057	1					
ANR	3053073	Callee	GetDataPtr		3053057	0					
ANR	3053074	Identifier	GetDataPtr		3053057	0					
ANR	3053075	ArgumentList			3053057	1					
ANR	3053076	ExpressionStatement	ASSERT ( timeout_tid )	4150:1:124078:124097	3053057	2	True				
ANR	3053077	CallExpression	ASSERT ( timeout_tid )		3053057	0					
ANR	3053078	Callee	ASSERT		3053057	0					
ANR	3053079	Identifier	ASSERT		3053057	0					
ANR	3053080	ArgumentList	timeout_tid		3053057	1					
ANR	3053081	Argument	timeout_tid		3053057	0					
ANR	3053082	Identifier	timeout_tid		3053057	0					
ANR	3053083	ExpressionStatement	Cancel_Timer ( * timeout_tid )	4152:1:124101:124127	3053057	3	True				
ANR	3053084	CallExpression	Cancel_Timer ( * timeout_tid )		3053057	0					
ANR	3053085	Callee	Cancel_Timer		3053057	0					
ANR	3053086	Identifier	Cancel_Timer		3053057	0					
ANR	3053087	ArgumentList	* timeout_tid		3053057	1					
ANR	3053088	Argument	* timeout_tid		3053057	0					
ANR	3053089	UnaryOperationExpression	* timeout_tid		3053057	0					
ANR	3053090	UnaryOperator	*		3053057	0					
ANR	3053091	Identifier	timeout_tid		3053057	1					
ANR	3053092	Statement	delete	4153:1:124130:124135	3053057	4	True				
ANR	3053093	ExpressionStatement	timeout_tid	4153:8:124137:124148	3053057	5	True				
ANR	3053094	Identifier	timeout_tid		3053057	0					
ANR	3053095	ExpressionStatement	Cancel_Socket ( stream )	4159:1:124448:124469	3053057	6	True				
ANR	3053096	CallExpression	Cancel_Socket ( stream )		3053057	0					
ANR	3053097	Callee	Cancel_Socket		3053057	0					
ANR	3053098	Identifier	Cancel_Socket		3053057	0					
ANR	3053099	ArgumentList	stream		3053057	1					
ANR	3053100	Argument	stream		3053057	0					
ANR	3053101	Identifier	stream		3053057	0					
ANR	3053102	IdentifierDeclStatement	int ret_val = HandleReq ( stream ) ;	4162:1:124547:124579	3053057	7	True				
ANR	3053103	IdentifierDecl	ret_val = HandleReq ( stream )		3053057	0					
ANR	3053104	IdentifierDeclType	int		3053057	0					
ANR	3053105	Identifier	ret_val		3053057	1					
ANR	3053106	AssignmentExpression	ret_val = HandleReq ( stream )		3053057	2		=			
ANR	3053107	Identifier	ret_val		3053057	0					
ANR	3053108	CallExpression	HandleReq ( stream )		3053057	1					
ANR	3053109	Callee	HandleReq		3053057	0					
ANR	3053110	Identifier	HandleReq		3053057	0					
ANR	3053111	ArgumentList	stream		3053057	1					
ANR	3053112	Argument	stream		3053057	0					
ANR	3053113	Identifier	stream		3053057	0					
ANR	3053114	IfStatement	if ( ret_val != KEEP_STREAM )		3053057	8					
ANR	3053115	Condition	ret_val != KEEP_STREAM	4165:6:124656:124677	3053057	0	True				
ANR	3053116	EqualityExpression	ret_val != KEEP_STREAM		3053057	0		!=			
ANR	3053117	Identifier	ret_val		3053057	0					
ANR	3053118	Identifier	KEEP_STREAM		3053057	1					
ANR	3053119	CompoundStatement		26:31:882:882	3053057	1					
ANR	3053120	Statement	delete	4166:2:124685:124690	3053057	0	True				
ANR	3053121	ExpressionStatement	stream	4166:9:124692:124698	3053057	1	True				
ANR	3053122	Identifier	stream		3053057	0					
ANR	3053123	ReturnStatement	return KEEP_STREAM ;	4171:1:124822:124840	3053057	9	True				
ANR	3053124	Identifier	KEEP_STREAM		3053057	0					
ANR	3053125	ReturnType	int		3053057	1					
ANR	3053126	Identifier	DaemonCore :: HandleReqSocketHandler		3053057	2					
ANR	3053127	ParameterList	Stream * stream		3053057	3					
ANR	3053128	Parameter	Stream * stream	4139:39:123782:123795	3053057	0	True				
ANR	3053129	ParameterType	Stream *		3053057	0					
ANR	3053130	Identifier	stream		3053057	1					
ANR	3053131	CFGEntryNode	ENTRY		3053057		True				
ANR	3053132	CFGExitNode	EXIT		3053057		True				
ANR	3053133	Symbol	HandleReq		3053057						
ANR	3053134	Symbol	NULL		3053057						
ANR	3053135	Symbol	* timeout_tid		3053057						
ANR	3053136	Symbol	stream		3053057						
ANR	3053137	Symbol	timeout_tid		3053057						
ANR	3053138	Symbol	GetDataPtr		3053057						
ANR	3053139	Symbol	ret_val		3053057						
ANR	3053140	Symbol	KEEP_STREAM		3053057						
ANR	3053141	Function	DaemonCore :: RegisterSocketForHandleReq	4174:0:124845:126651							
ANR	3053142	FunctionDef	DaemonCore :: RegisterSocketForHandleReq (Stream * stream)		3053141	0					
ANR	3053143	CompoundStatement		4176:0:124905:126651	3053141	0					
ANR	3053144	IdentifierDeclStatement	"int tid = daemonCore -> Register_Timer ( 200 , ( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler , ""DaemonCore::HandleReqSocketTimerHandler"" , this ) ;"	4185:1:125370:125531	3053141	0	True				
ANR	3053145	IdentifierDecl	"tid = daemonCore -> Register_Timer ( 200 , ( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler , ""DaemonCore::HandleReqSocketTimerHandler"" , this )"		3053141	0					
ANR	3053146	IdentifierDeclType	int		3053141	0					
ANR	3053147	Identifier	tid		3053141	1					
ANR	3053148	AssignmentExpression	"tid = daemonCore -> Register_Timer ( 200 , ( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler , ""DaemonCore::HandleReqSocketTimerHandler"" , this )"		3053141	2		=			
ANR	3053149	Identifier	tid		3053141	0					
ANR	3053150	CallExpression	"daemonCore -> Register_Timer ( 200 , ( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler , ""DaemonCore::HandleReqSocketTimerHandler"" , this )"		3053141	1					
ANR	3053151	Callee	daemonCore -> Register_Timer		3053141	0					
ANR	3053152	PtrMemberAccess	daemonCore -> Register_Timer		3053141	0					
ANR	3053153	Identifier	daemonCore		3053141	0					
ANR	3053154	Identifier	Register_Timer		3053141	1					
ANR	3053155	ArgumentList	200		3053141	1					
ANR	3053156	Argument	200		3053141	0					
ANR	3053157	PrimaryExpression	200		3053141	0					
ANR	3053158	Argument	( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler		3053141	1					
ANR	3053159	CastExpression	( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler		3053141	0					
ANR	3053160	CastTarget	TimerHandlercpp		3053141	0					
ANR	3053161	UnaryOperationExpression	& DaemonCore :: HandleReqSocketTimerHandler		3053141	1					
ANR	3053162	UnaryOperator	&		3053141	0					
ANR	3053163	Identifier	DaemonCore :: HandleReqSocketTimerHandler		3053141	1					
ANR	3053164	Argument	"""DaemonCore::HandleReqSocketTimerHandler"""		3053141	2					
ANR	3053165	PrimaryExpression	"""DaemonCore::HandleReqSocketTimerHandler"""		3053141	0					
ANR	3053166	Argument	this		3053141	3					
ANR	3053167	Identifier	this		3053141	0					
ANR	3053168	ExpressionStatement	daemonCore -> Register_DataPtr ( ( void * ) stream )	4191:1:125572:125615	3053141	1	True				
ANR	3053169	CallExpression	daemonCore -> Register_DataPtr ( ( void * ) stream )		3053141	0					
ANR	3053170	Callee	daemonCore -> Register_DataPtr		3053141	0					
ANR	3053171	PtrMemberAccess	daemonCore -> Register_DataPtr		3053141	0					
ANR	3053172	Identifier	daemonCore		3053141	0					
ANR	3053173	Identifier	Register_DataPtr		3053141	1					
ANR	3053174	ArgumentList	( void * ) stream		3053141	1					
ANR	3053175	Argument	( void * ) stream		3053141	0					
ANR	3053176	CastExpression	( void * ) stream		3053141	0					
ANR	3053177	CastTarget	void *		3053141	0					
ANR	3053178	Identifier	stream		3053141	1					
ANR	3053179	IdentifierDeclStatement	"int tmp_result = daemonCore -> Register_Socket ( stream , ""Incoming command"" , ( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler , ""DaemonCore::HandleReqSocketHandler"" , this ) ;"	4196:1:125852:126032	3053141	2	True				
ANR	3053180	IdentifierDecl	"tmp_result = daemonCore -> Register_Socket ( stream , ""Incoming command"" , ( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler , ""DaemonCore::HandleReqSocketHandler"" , this )"		3053141	0					
ANR	3053181	IdentifierDeclType	int		3053141	0					
ANR	3053182	Identifier	tmp_result		3053141	1					
ANR	3053183	AssignmentExpression	"tmp_result = daemonCore -> Register_Socket ( stream , ""Incoming command"" , ( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler , ""DaemonCore::HandleReqSocketHandler"" , this )"		3053141	2		=			
ANR	3053184	Identifier	tmp_result		3053141	0					
ANR	3053185	CallExpression	"daemonCore -> Register_Socket ( stream , ""Incoming command"" , ( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler , ""DaemonCore::HandleReqSocketHandler"" , this )"		3053141	1					
ANR	3053186	Callee	daemonCore -> Register_Socket		3053141	0					
ANR	3053187	PtrMemberAccess	daemonCore -> Register_Socket		3053141	0					
ANR	3053188	Identifier	daemonCore		3053141	0					
ANR	3053189	Identifier	Register_Socket		3053141	1					
ANR	3053190	ArgumentList	stream		3053141	1					
ANR	3053191	Argument	stream		3053141	0					
ANR	3053192	Identifier	stream		3053141	0					
ANR	3053193	Argument	"""Incoming command"""		3053141	1					
ANR	3053194	PrimaryExpression	"""Incoming command"""		3053141	0					
ANR	3053195	Argument	( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler		3053141	2					
ANR	3053196	CastExpression	( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler		3053141	0					
ANR	3053197	CastTarget	SocketHandlercpp		3053141	0					
ANR	3053198	UnaryOperationExpression	& DaemonCore :: HandleReqSocketHandler		3053141	1					
ANR	3053199	UnaryOperator	&		3053141	0					
ANR	3053200	Identifier	DaemonCore :: HandleReqSocketHandler		3053141	1					
ANR	3053201	Argument	"""DaemonCore::HandleReqSocketHandler"""		3053141	3					
ANR	3053202	PrimaryExpression	"""DaemonCore::HandleReqSocketHandler"""		3053141	0					
ANR	3053203	Argument	this		3053141	4					
ANR	3053204	Identifier	this		3053141	0					
ANR	3053205	IfStatement	if ( tmp_result >= 0 )		3053141	3					
ANR	3053206	Condition	tmp_result >= 0	4201:6:126040:126054	3053141	0	True				
ANR	3053207	RelationalExpression	tmp_result >= 0		3053141	0		>=			
ANR	3053208	Identifier	tmp_result		3053141	0					
ANR	3053209	PrimaryExpression	0		3053141	1					
ANR	3053210	CompoundStatement		26:25:1153:1153	3053141	1					
ANR	3053211	Statement	int	4203:2:126097:126099	3053141	0	True				
ANR	3053212	Statement	*	4203:5:126100:126100	3053141	1	True				
ANR	3053213	Statement	stashed_tid	4203:7:126102:126112	3053141	2	True				
ANR	3053214	Statement	=	4203:19:126114:126114	3053141	3	True				
ANR	3053215	Statement	new	4203:21:126116:126118	3053141	4	True				
ANR	3053216	ExpressionStatement	int	4203:25:126120:126123	3053141	5	True				
ANR	3053217	Identifier	int		3053141	0					
ANR	3053218	ExpressionStatement	* stashed_tid = tid	4204:2:126127:126145	3053141	6	True				
ANR	3053219	AssignmentExpression	* stashed_tid = tid		3053141	0		=			
ANR	3053220	UnaryOperationExpression	* stashed_tid		3053141	0					
ANR	3053221	UnaryOperator	*		3053141	0					
ANR	3053222	Identifier	stashed_tid		3053141	1					
ANR	3053223	Identifier	tid		3053141	1					
ANR	3053224	ExpressionStatement	daemonCore -> Register_DataPtr ( ( void * ) stashed_tid )	4206:2:126213:126261	3053141	7	True				
ANR	3053225	CallExpression	daemonCore -> Register_DataPtr ( ( void * ) stashed_tid )		3053141	0					
ANR	3053226	Callee	daemonCore -> Register_DataPtr		3053141	0					
ANR	3053227	PtrMemberAccess	daemonCore -> Register_DataPtr		3053141	0					
ANR	3053228	Identifier	daemonCore		3053141	0					
ANR	3053229	Identifier	Register_DataPtr		3053141	1					
ANR	3053230	ArgumentList	( void * ) stashed_tid		3053141	1					
ANR	3053231	Argument	( void * ) stashed_tid		3053141	0					
ANR	3053232	CastExpression	( void * ) stashed_tid		3053141	0					
ANR	3053233	CastTarget	void *		3053141	0					
ANR	3053234	Identifier	stashed_tid		3053141	1					
ANR	3053235	ReturnStatement	return true ;	4209:2:126398:126409	3053141	8	True				
ANR	3053236	Identifier	true		3053141	0					
ANR	3053237	ElseStatement	else		3053141	0					
ANR	3053238	CompoundStatement		35:8:1513:1513	3053141	0					
ANR	3053239	ExpressionStatement	daemonCore -> Cancel_Timer ( tid )	4215:2:126602:126631	3053141	0	True				
ANR	3053240	CallExpression	daemonCore -> Cancel_Timer ( tid )		3053141	0					
ANR	3053241	Callee	daemonCore -> Cancel_Timer		3053141	0					
ANR	3053242	PtrMemberAccess	daemonCore -> Cancel_Timer		3053141	0					
ANR	3053243	Identifier	daemonCore		3053141	0					
ANR	3053244	Identifier	Cancel_Timer		3053141	1					
ANR	3053245	ArgumentList	tid		3053141	1					
ANR	3053246	Argument	tid		3053141	0					
ANR	3053247	Identifier	tid		3053141	0					
ANR	3053248	ReturnStatement	return false ;	4217:1:126637:126649	3053141	4	True				
ANR	3053249	Identifier	false		3053141	0					
ANR	3053250	ReturnType	bool		3053141	1					
ANR	3053251	Identifier	DaemonCore :: RegisterSocketForHandleReq		3053141	2					
ANR	3053252	ParameterList	Stream * stream		3053141	3					
ANR	3053253	Parameter	Stream * stream	4175:39:124889:124902	3053141	0	True				
ANR	3053254	ParameterType	Stream *		3053141	0					
ANR	3053255	Identifier	stream		3053141	1					
ANR	3053256	CFGEntryNode	ENTRY		3053141		True				
ANR	3053257	CFGExitNode	EXIT		3053141		True				
ANR	3053258	Symbol	this		3053141						
ANR	3053259	Symbol	false		3053141						
ANR	3053260	Symbol	stashed_tid		3053141						
ANR	3053261	Symbol	tid		3053141						
ANR	3053262	Symbol	tmp_result		3053141						
ANR	3053263	Symbol	* stashed_tid		3053141						
ANR	3053264	Symbol	& DaemonCore :: HandleReqSocketTimerHandler		3053141						
ANR	3053265	Symbol	stream		3053141						
ANR	3053266	Symbol	* daemonCore		3053141						
ANR	3053267	Symbol	daemonCore -> Register_Socket		3053141						
ANR	3053268	Symbol	& DaemonCore :: HandleReqSocketHandler		3053141						
ANR	3053269	Symbol	daemonCore		3053141						
ANR	3053270	Symbol	daemonCore -> Register_Timer		3053141						
ANR	3053271	Symbol	true		3053141						
ANR	3053272	Function	DaemonCore :: HandleReqAsync	4220:0:126654:126817							
ANR	3053273	FunctionDef	DaemonCore :: HandleReqAsync (Stream * stream)		3053272	0					
ANR	3053274	CompoundStatement		4222:0:126702:126817	3053272	0					
ANR	3053275	IfStatement	if ( ! RegisterSocketForHandleReq ( stream ) )		3053272	0					
ANR	3053276	Condition	! RegisterSocketForHandleReq ( stream )	4223:5:126709:126743	3053272	0	True				
ANR	3053277	UnaryOperationExpression	! RegisterSocketForHandleReq ( stream )		3053272	0					
ANR	3053278	UnaryOperator	!		3053272	0					
ANR	3053279	CallExpression	RegisterSocketForHandleReq ( stream )		3053272	1					
ANR	3053280	Callee	RegisterSocketForHandleReq		3053272	0					
ANR	3053281	Identifier	RegisterSocketForHandleReq		3053272	0					
ANR	3053282	ArgumentList	stream		3053272	1					
ANR	3053283	Argument	stream		3053272	0					
ANR	3053284	Identifier	stream		3053272	0					
ANR	3053285	CompoundStatement		2:43:44:44	3053272	1					
ANR	3053286	IfStatement	if ( HandleReq ( stream ) != KEEP_STREAM )		3053272	0					
ANR	3053287	Condition	HandleReq ( stream ) != KEEP_STREAM	4224:6:126755:126786	3053272	0	True				
ANR	3053288	EqualityExpression	HandleReq ( stream ) != KEEP_STREAM		3053272	0		!=			
ANR	3053289	CallExpression	HandleReq ( stream )		3053272	0					
ANR	3053290	Callee	HandleReq		3053272	0					
ANR	3053291	Identifier	HandleReq		3053272	0					
ANR	3053292	ArgumentList	stream		3053272	1					
ANR	3053293	Argument	stream		3053272	0					
ANR	3053294	Identifier	stream		3053272	0					
ANR	3053295	Identifier	KEEP_STREAM		3053272	1					
ANR	3053296	CompoundStatement		3:41:87:87	3053272	1					
ANR	3053297	Statement	delete	4225:3:126795:126800	3053272	0	True				
ANR	3053298	ExpressionStatement	stream	4225:10:126802:126808	3053272	1	True				
ANR	3053299	Identifier	stream		3053272	0					
ANR	3053300	ReturnType	void		3053272	1					
ANR	3053301	Identifier	DaemonCore :: HandleReqAsync		3053272	2					
ANR	3053302	ParameterList	Stream * stream		3053272	3					
ANR	3053303	Parameter	Stream * stream	4221:27:126686:126699	3053272	0	True				
ANR	3053304	ParameterType	Stream *		3053272	0					
ANR	3053305	Identifier	stream		3053272	1					
ANR	3053306	CFGEntryNode	ENTRY		3053272		True				
ANR	3053307	CFGExitNode	EXIT		3053272		True				
ANR	3053308	Symbol	HandleReq		3053272						
ANR	3053309	Symbol	stream		3053272						
ANR	3053310	Symbol	RegisterSocketForHandleReq		3053272						
ANR	3053311	Symbol	KEEP_STREAM		3053272						
ANR	3053312	Function	DaemonCore :: HandleReq	4230:0:126820:126966							
ANR	3053313	FunctionDef	"DaemonCore :: HandleReq (int socki , Stream * asock)"		3053312	0					
ANR	3053314	CompoundStatement		4231:0:126872:126966	3053312	0					
ANR	3053315	IdentifierDeclStatement	Stream * insock ;	4232:1:126875:126889	3053312	0	True				
ANR	3053316	IdentifierDecl	* insock		3053312	0					
ANR	3053317	IdentifierDeclType	Stream *		3053312	0					
ANR	3053318	Identifier	insock		3053312	1					
ANR	3053319	ExpressionStatement	insock = ( * sockTable ) [ socki ] . iosock	4234:1:126894:126929	3053312	1	True				
ANR	3053320	AssignmentExpression	insock = ( * sockTable ) [ socki ] . iosock		3053312	0		=			
ANR	3053321	Identifier	insock		3053312	0					
ANR	3053322	MemberAccess	( * sockTable ) [ socki ] . iosock		3053312	1					
ANR	3053323	ArrayIndexing	( * sockTable ) [ socki ]		3053312	0					
ANR	3053324	UnaryOperationExpression	* sockTable		3053312	0					
ANR	3053325	UnaryOperator	*		3053312	0					
ANR	3053326	Identifier	sockTable		3053312	1					
ANR	3053327	Identifier	socki		3053312	1					
ANR	3053328	Identifier	iosock		3053312	1					
ANR	3053329	ReturnStatement	"return HandleReq ( insock , asock ) ;"	4236:1:126933:126964	3053312	2	True				
ANR	3053330	CallExpression	"HandleReq ( insock , asock )"		3053312	0					
ANR	3053331	Callee	HandleReq		3053312	0					
ANR	3053332	Identifier	HandleReq		3053312	0					
ANR	3053333	ArgumentList	insock		3053312	1					
ANR	3053334	Argument	insock		3053312	0					
ANR	3053335	Identifier	insock		3053312	0					
ANR	3053336	Argument	asock		3053312	1					
ANR	3053337	Identifier	asock		3053312	0					
ANR	3053338	ReturnType	int		3053312	1					
ANR	3053339	Identifier	DaemonCore :: HandleReq		3053312	2					
ANR	3053340	ParameterList	"int socki , Stream * asock"		3053312	3					
ANR	3053341	Parameter	int socki	4230:26:126846:126854	3053312	0	True				
ANR	3053342	ParameterType	int		3053312	0					
ANR	3053343	Identifier	socki		3053312	1					
ANR	3053344	Parameter	Stream * asock	4230:37:126857:126869	3053312	1	True				
ANR	3053345	ParameterType	Stream *		3053312	0					
ANR	3053346	Identifier	asock		3053312	1					
ANR	3053347	CFGEntryNode	ENTRY		3053312		True				
ANR	3053348	CFGExitNode	EXIT		3053312		True				
ANR	3053349	Symbol	HandleReq		3053312						
ANR	3053350	Symbol	( * sockTable ) [ socki ] . iosock		3053312						
ANR	3053351	Symbol	* sockTable		3053312						
ANR	3053352	Symbol	* socki		3053312						
ANR	3053353	Symbol	sockTable		3053312						
ANR	3053354	Symbol	asock		3053312						
ANR	3053355	Symbol	insock		3053312						
ANR	3053356	Symbol	* * sockTable		3053312						
ANR	3053357	Symbol	socki		3053312						
ANR	3053358	Function	DaemonCore :: HandleReq	4239:0:126969:168113							
ANR	3053359	FunctionDef	"DaemonCore :: HandleReq (Stream * insock , Stream * asock)"		3053358	0					
ANR	3053360	CompoundStatement		4240:0:127026:168113	3053358	0					
ANR	3053361	IdentifierDeclStatement	Sock * sock = NULL ;	4241:1:127029:127049	3053358	0	True				
ANR	3053362	IdentifierDecl	* sock = NULL		3053358	0					
ANR	3053363	IdentifierDeclType	Sock *		3053358	0					
ANR	3053364	Identifier	sock		3053358	1					
ANR	3053365	AssignmentExpression	* sock = NULL		3053358	2		=			
ANR	3053366	Identifier	NULL		3053358	0					
ANR	3053367	Identifier	NULL		3053358	1					
ANR	3053368	IdentifierDeclStatement	int is_tcp = 0 ;	4243:1:127053:127069	3053358	1	True				
ANR	3053369	IdentifierDecl	is_tcp = 0		3053358	0					
ANR	3053370	IdentifierDeclType	int		3053358	0					
ANR	3053371	Identifier	is_tcp		3053358	1					
ANR	3053372	AssignmentExpression	is_tcp = 0		3053358	2		=			
ANR	3053373	Identifier	is_tcp		3053358	0					
ANR	3053374	PrimaryExpression	0		3053358	1					
ANR	3053375	IdentifierDeclStatement	int req = 0 ;	4244:1:127072:127099	3053358	2	True				
ANR	3053376	IdentifierDecl	req = 0		3053358	0					
ANR	3053377	IdentifierDeclType	int		3053358	0					
ANR	3053378	Identifier	req		3053358	1					
ANR	3053379	AssignmentExpression	req = 0		3053358	2		=			
ANR	3053380	Identifier	req		3053358	0					
ANR	3053381	PrimaryExpression	0		3053358	1					
ANR	3053382	IdentifierDeclStatement	int index ;	4245:1:127102:127115	3053358	3	True				
ANR	3053383	IdentifierDecl	index		3053358	0					
ANR	3053384	IdentifierDeclType	int		3053358	0					
ANR	3053385	Identifier	index		3053358	1					
ANR	3053386	IdentifierDeclStatement	int reqFound = FALSE ;	4246:1:127118:127142	3053358	4	True				
ANR	3053387	IdentifierDecl	reqFound = FALSE		3053358	0					
ANR	3053388	IdentifierDeclType	int		3053358	0					
ANR	3053389	Identifier	reqFound		3053358	1					
ANR	3053390	AssignmentExpression	reqFound = FALSE		3053358	2		=			
ANR	3053391	Identifier	FALSE		3053358	0					
ANR	3053392	Identifier	FALSE		3053358	1					
ANR	3053393	IdentifierDeclStatement	int result = FALSE ;	4247:1:127145:127167	3053358	5	True				
ANR	3053394	IdentifierDecl	result = FALSE		3053358	0					
ANR	3053395	IdentifierDeclType	int		3053358	0					
ANR	3053396	Identifier	result		3053358	1					
ANR	3053397	AssignmentExpression	result = FALSE		3053358	2		=			
ANR	3053398	Identifier	FALSE		3053358	0					
ANR	3053399	Identifier	FALSE		3053358	1					
ANR	3053400	IdentifierDeclStatement	int perm = USER_AUTH_FAILURE ;	4248:4:127173:127225	3053358	6	True				
ANR	3053401	IdentifierDecl	perm = USER_AUTH_FAILURE		3053358	0					
ANR	3053402	IdentifierDeclType	int		3053358	0					
ANR	3053403	Identifier	perm		3053358	1					
ANR	3053404	AssignmentExpression	perm = USER_AUTH_FAILURE		3053358	2		=			
ANR	3053405	Identifier	USER_AUTH_FAILURE		3053358	0					
ANR	3053406	Identifier	USER_AUTH_FAILURE		3053358	1					
ANR	3053407	IdentifierDeclStatement	MyString user ;	4249:1:127228:127252	3053358	7	True				
ANR	3053408	IdentifierDecl	user		3053358	0					
ANR	3053409	IdentifierDeclType	MyString		3053358	0					
ANR	3053410	Identifier	user		3053358	1					
ANR	3053411	IdentifierDeclStatement	ClassAd * the_policy = NULL ;	4250:4:127258:127288	3053358	8	True				
ANR	3053412	IdentifierDecl	* the_policy = NULL		3053358	0					
ANR	3053413	IdentifierDeclType	ClassAd *		3053358	0					
ANR	3053414	Identifier	the_policy		3053358	1					
ANR	3053415	AssignmentExpression	* the_policy = NULL		3053358	2		=			
ANR	3053416	Identifier	NULL		3053358	0					
ANR	3053417	Identifier	NULL		3053358	1					
ANR	3053418	IdentifierDeclStatement	KeyInfo * the_key = NULL ;	4251:4:127294:127324	3053358	9	True				
ANR	3053419	IdentifierDecl	* the_key = NULL		3053358	0					
ANR	3053420	IdentifierDeclType	KeyInfo *		3053358	0					
ANR	3053421	Identifier	the_key		3053358	1					
ANR	3053422	AssignmentExpression	* the_key = NULL		3053358	2		=			
ANR	3053423	Identifier	NULL		3053358	0					
ANR	3053424	Identifier	NULL		3053358	1					
ANR	3053425	IdentifierDeclStatement	char * the_sid = NULL ;	4252:4:127330:127360	3053358	10	True				
ANR	3053426	IdentifierDecl	* the_sid = NULL		3053358	0					
ANR	3053427	IdentifierDeclType	char *		3053358	0					
ANR	3053428	Identifier	the_sid		3053358	1					
ANR	3053429	AssignmentExpression	* the_sid = NULL		3053358	2		=			
ANR	3053430	Identifier	NULL		3053358	0					
ANR	3053431	Identifier	NULL		3053358	1					
ANR	3053432	IdentifierDeclStatement	char * who = NULL ;	4253:4:127366:127386	3053358	11	True				
ANR	3053433	IdentifierDecl	* who = NULL		3053358	0					
ANR	3053434	IdentifierDeclType	char *		3053358	0					
ANR	3053435	Identifier	who		3053358	1					
ANR	3053436	AssignmentExpression	* who = NULL		3053358	2		=			
ANR	3053437	Identifier	NULL		3053358	0					
ANR	3053438	Identifier	NULL		3053358	1					
ANR	3053439	IdentifierDeclStatement	bool is_http_post = false ;	4255:1:127428:127453	3053358	12	True				
ANR	3053440	IdentifierDecl	is_http_post = false		3053358	0					
ANR	3053441	IdentifierDeclType	bool		3053358	0					
ANR	3053442	Identifier	is_http_post		3053358	1					
ANR	3053443	AssignmentExpression	is_http_post = false		3053358	2		=			
ANR	3053444	Identifier	false		3053358	0					
ANR	3053445	Identifier	false		3053358	1					
ANR	3053446	IdentifierDeclStatement	bool is_http_get = false ;	4256:1:127484:127508	3053358	13	True				
ANR	3053447	IdentifierDecl	is_http_get = false		3053358	0					
ANR	3053448	IdentifierDeclType	bool		3053358	0					
ANR	3053449	Identifier	is_http_get		3053358	1					
ANR	3053450	AssignmentExpression	is_http_get = false		3053358	2		=			
ANR	3053451	Identifier	false		3053358	0					
ANR	3053452	Identifier	false		3053358	1					
ANR	3053453	IdentifierDeclStatement	UtcTime handle_req_start_time ;	4259:1:127549:127578	3053358	14	True				
ANR	3053454	IdentifierDecl	handle_req_start_time		3053358	0					
ANR	3053455	IdentifierDeclType	UtcTime		3053358	0					
ANR	3053456	Identifier	handle_req_start_time		3053358	1					
ANR	3053457	ExpressionStatement	handle_req_start_time . getTime ( )	4260:1:127581:127612	3053358	15	True				
ANR	3053458	CallExpression	handle_req_start_time . getTime ( )		3053358	0					
ANR	3053459	Callee	handle_req_start_time . getTime		3053358	0					
ANR	3053460	MemberAccess	handle_req_start_time . getTime		3053358	0					
ANR	3053461	Identifier	handle_req_start_time		3053358	0					
ANR	3053462	Identifier	getTime		3053358	1					
ANR	3053463	ArgumentList			3053358	1					
ANR	3053464	ExpressionStatement	ASSERT ( insock )	4262:1:127616:127630	3053358	16	True				
ANR	3053465	CallExpression	ASSERT ( insock )		3053358	0					
ANR	3053466	Callee	ASSERT		3053358	0					
ANR	3053467	Identifier	ASSERT		3053358	0					
ANR	3053468	ArgumentList	insock		3053358	1					
ANR	3053469	Argument	insock		3053358	0					
ANR	3053470	Identifier	insock		3053358	0					
ANR	3053471	SwitchStatement	switch ( insock -> type ( ) )		3053358	17					
ANR	3053472	Condition	insock -> type ( )	4264:10:127643:127656	3053358	0	True				
ANR	3053473	CallExpression	insock -> type ( )		3053358	0					
ANR	3053474	Callee	insock -> type		3053358	0					
ANR	3053475	PtrMemberAccess	insock -> type		3053358	0					
ANR	3053476	Identifier	insock		3053358	0					
ANR	3053477	Identifier	type		3053358	1					
ANR	3053478	ArgumentList			3053358	1					
ANR	3053479	CompoundStatement		25:27:633:633	3053358	1					
ANR	3053480	Label	case Stream :: reli_sock :	4265:2:127664:127687	3053358	0	True				
ANR	3053481	Identifier	Stream :: reli_sock		3053358	0					
ANR	3053482	ExpressionStatement	is_tcp = TRUE	4266:3:127692:127705	3053358	1	True				
ANR	3053483	AssignmentExpression	is_tcp = TRUE		3053358	0		=			
ANR	3053484	Identifier	is_tcp		3053358	0					
ANR	3053485	Identifier	TRUE		3053358	1					
ANR	3053486	BreakStatement	break ;	4267:3:127710:127715	3053358	2	True				
ANR	3053487	Label	case Stream :: safe_sock :	4268:2:127719:127742	3053358	3	True				
ANR	3053488	Identifier	Stream :: safe_sock		3053358	0					
ANR	3053489	ExpressionStatement	is_tcp = FALSE	4269:3:127747:127761	3053358	4	True				
ANR	3053490	AssignmentExpression	is_tcp = FALSE		3053358	0		=			
ANR	3053491	Identifier	is_tcp		3053358	0					
ANR	3053492	Identifier	FALSE		3053358	1					
ANR	3053493	BreakStatement	break ;	4270:3:127766:127771	3053358	5	True				
ANR	3053494	Label	default :	4271:2:127775:127782	3053358	6	True				
ANR	3053495	Identifier	default		3053358	0					
ANR	3053496	ExpressionStatement	"EXCEPT ( ""DaemonCore: HandleReq(): unrecognized Stream sock"" )"	4273:3:127818:127877	3053358	7	True				
ANR	3053497	CallExpression	"EXCEPT ( ""DaemonCore: HandleReq(): unrecognized Stream sock"" )"		3053358	0					
ANR	3053498	Callee	EXCEPT		3053358	0					
ANR	3053499	Identifier	EXCEPT		3053358	0					
ANR	3053500	ArgumentList	"""DaemonCore: HandleReq(): unrecognized Stream sock"""		3053358	1					
ANR	3053501	Argument	"""DaemonCore: HandleReq(): unrecognized Stream sock"""		3053358	0					
ANR	3053502	PrimaryExpression	"""DaemonCore: HandleReq(): unrecognized Stream sock"""		3053358	0					
ANR	3053503	IdentifierDeclStatement	CondorError errstack ;	4276:1:127884:127904	3053358	18	True				
ANR	3053504	IdentifierDecl	errstack		3053358	0					
ANR	3053505	IdentifierDeclType	CondorError		3053358	0					
ANR	3053506	Identifier	errstack		3053358	1					
ANR	3053507	IfStatement	if ( is_tcp )		3053358	19					
ANR	3053508	Condition	is_tcp	4279:6:127954:127959	3053358	0	True				
ANR	3053509	Identifier	is_tcp		3053358	0					
ANR	3053510	CompoundStatement		40:15:936:936	3053358	1					
ANR	3053511	IfStatement	if ( ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen )		3053358	0					
ANR	3053512	Condition	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen	4282:7:128043:128164	3053358	0	True				
ANR	3053513	AndExpression	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		3053358	0		&&			
ANR	3053514	EqualityExpression	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special		3053358	0		==			
ANR	3053515	PtrMemberAccess	( ( ReliSock * ) insock ) -> _state		3053358	0					
ANR	3053516	CastExpression	( ReliSock * ) insock		3053358	0					
ANR	3053517	CastTarget	ReliSock *		3053358	0					
ANR	3053518	Identifier	insock		3053358	1					
ANR	3053519	Identifier	_state		3053358	1					
ANR	3053520	Identifier	Sock :: sock_special		3053358	1					
ANR	3053521	EqualityExpression	( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		3053358	1		==			
ANR	3053522	PtrMemberAccess	( ( ReliSock * ) insock ) -> _special_state		3053358	0					
ANR	3053523	CastExpression	( ReliSock * ) insock		3053358	0					
ANR	3053524	CastTarget	ReliSock *		3053358	0					
ANR	3053525	Identifier	insock		3053358	1					
ANR	3053526	Identifier	_special_state		3053358	1					
ANR	3053527	Identifier	ReliSock :: relisock_listen		3053358	1					
ANR	3053528	CompoundStatement		45:2:1143:1143	3053358	1					
ANR	3053529	IfStatement	if ( asock )		3053358	0					
ANR	3053530	Condition	asock	4285:8:128180:128184	3053358	0	True				
ANR	3053531	Identifier	asock		3053358	0					
ANR	3053532	CompoundStatement		46:16:1161:1161	3053358	1					
ANR	3053533	ExpressionStatement	sock = ( Sock * ) asock	4286:4:128194:128214	3053358	0	True				
ANR	3053534	AssignmentExpression	sock = ( Sock * ) asock		3053358	0		=			
ANR	3053535	Identifier	sock		3053358	0					
ANR	3053536	CastExpression	( Sock * ) asock		3053358	1					
ANR	3053537	CastTarget	Sock *		3053358	0					
ANR	3053538	Identifier	asock		3053358	1					
ANR	3053539	ElseStatement	else		3053358	0					
ANR	3053540	CompoundStatement		48:10:1199:1199	3053358	0					
ANR	3053541	ExpressionStatement	sock = ( ( ReliSock * ) insock ) -> accept ( )	4288:4:128232:128269	3053358	0	True				
ANR	3053542	AssignmentExpression	sock = ( ( ReliSock * ) insock ) -> accept ( )		3053358	0		=			
ANR	3053543	Identifier	sock		3053358	0					
ANR	3053544	CallExpression	( ( ReliSock * ) insock ) -> accept ( )		3053358	1					
ANR	3053545	Callee	( ( ReliSock * ) insock ) -> accept		3053358	0					
ANR	3053546	PtrMemberAccess	( ( ReliSock * ) insock ) -> accept		3053358	0					
ANR	3053547	CastExpression	( ReliSock * ) insock		3053358	0					
ANR	3053548	CastTarget	ReliSock *		3053358	0					
ANR	3053549	Identifier	insock		3053358	1					
ANR	3053550	Identifier	accept		3053358	1					
ANR	3053551	ArgumentList			3053358	1					
ANR	3053552	IfStatement	if ( ! sock )		3053358	1					
ANR	3053553	Condition	! sock	4290:8:128284:128288	3053358	0	True				
ANR	3053554	UnaryOperationExpression	! sock		3053358	0					
ANR	3053555	UnaryOperator	!		3053358	0					
ANR	3053556	Identifier	sock		3053358	1					
ANR	3053557	CompoundStatement		51:16:1265:1265	3053358	1					
ANR	3053558	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: accept() failed!"" )"	4291:4:128298:128347	3053358	0	True				
ANR	3053559	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: accept() failed!"" )"		3053358	0					
ANR	3053560	Callee	dprintf		3053358	0					
ANR	3053561	Identifier	dprintf		3053358	0					
ANR	3053562	ArgumentList	D_ALWAYS		3053358	1					
ANR	3053563	Argument	D_ALWAYS		3053358	0					
ANR	3053564	Identifier	D_ALWAYS		3053358	0					
ANR	3053565	Argument	"""DaemonCore: accept() failed!"""		3053358	1					
ANR	3053566	PrimaryExpression	"""DaemonCore: accept() failed!"""		3053358	0					
ANR	3053567	ReturnStatement	return KEEP_STREAM ;	4293:4:128408:128426	3053358	1	True				
ANR	3053568	Identifier	KEEP_STREAM		3053358	0					
ANR	3053569	IfStatement	if ( ( ( ReliSock * ) sock ) -> bytes_available_to_read ( ) < 4 )		3053358	2					
ANR	3053570	Condition	( ( ReliSock * ) sock ) -> bytes_available_to_read ( ) < 4	4300:8:128700:128748	3053358	0	True				
ANR	3053571	RelationalExpression	( ( ReliSock * ) sock ) -> bytes_available_to_read ( ) < 4		3053358	0		<			
ANR	3053572	CallExpression	( ( ReliSock * ) sock ) -> bytes_available_to_read ( )		3053358	0					
ANR	3053573	Callee	( ( ReliSock * ) sock ) -> bytes_available_to_read		3053358	0					
ANR	3053574	PtrMemberAccess	( ( ReliSock * ) sock ) -> bytes_available_to_read		3053358	0					
ANR	3053575	CastExpression	( ReliSock * ) sock		3053358	0					
ANR	3053576	CastTarget	ReliSock *		3053358	0					
ANR	3053577	Identifier	sock		3053358	1					
ANR	3053578	Identifier	bytes_available_to_read		3053358	1					
ANR	3053579	ArgumentList			3053358	1					
ANR	3053580	PrimaryExpression	4		3053358	1					
ANR	3053581	CompoundStatement		62:3:1729:1729	3053358	1					
ANR	3053582	IfStatement	if ( RegisterSocketForHandleReq ( sock ) )		3053358	0					
ANR	3053583	Condition	RegisterSocketForHandleReq ( sock )	4302:8:128766:128799	3053358	0	True				
ANR	3053584	CallExpression	RegisterSocketForHandleReq ( sock )		3053358	0					
ANR	3053585	Callee	RegisterSocketForHandleReq		3053358	0					
ANR	3053586	Identifier	RegisterSocketForHandleReq		3053358	0					
ANR	3053587	ArgumentList	sock		3053358	1					
ANR	3053588	Argument	sock		3053358	0					
ANR	3053589	Identifier	sock		3053358	0					
ANR	3053590	CompoundStatement		63:45:1776:1776	3053358	1					
ANR	3053591	ReturnStatement	return KEEP_STREAM ;	4303:5:128810:128828	3053358	0	True				
ANR	3053592	Identifier	KEEP_STREAM		3053358	0					
ANR	3053593	ElseStatement	else		3053358	0					
ANR	3053594	CompoundStatement		69:7:1890:1890	3053358	0					
ANR	3053595	ExpressionStatement	sock = ( Sock * ) insock	4309:3:128922:128943	3053358	0	True				
ANR	3053596	AssignmentExpression	sock = ( Sock * ) insock		3053358	0		=			
ANR	3053597	Identifier	sock		3053358	0					
ANR	3053598	CastExpression	( Sock * ) insock		3053358	1					
ANR	3053599	CastTarget	Sock *		3053358	0					
ANR	3053600	Identifier	insock		3053358	1					
ANR	3053601	ElseStatement	else		3053358	0					
ANR	3053602	CompoundStatement		92:2:2598:2629	3053358	0					
ANR	3053603	ExpressionStatement	sock = ( Sock * ) insock	4318:2:129187:129208	3053358	0	True				
ANR	3053604	AssignmentExpression	sock = ( Sock * ) insock		3053358	0		=			
ANR	3053605	Identifier	sock		3053358	0					
ANR	3053606	CastExpression	( Sock * ) insock		3053358	1					
ANR	3053607	CastTarget	Sock *		3053358	0					
ANR	3053608	Identifier	insock		3053358	1					
ANR	3053609	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received UDP packet from %s.\\n"" , sock -> peer_description ( ) )"	4323:2:129375:129485	3053358	1	True				
ANR	3053610	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received UDP packet from %s.\\n"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3053611	Callee	dprintf		3053358	0					
ANR	3053612	Identifier	dprintf		3053358	0					
ANR	3053613	ArgumentList	D_SECURITY		3053358	1					
ANR	3053614	Argument	D_SECURITY		3053358	0					
ANR	3053615	Identifier	D_SECURITY		3053358	0					
ANR	3053616	Argument	"""DC_AUTHENTICATE: received UDP packet from %s.\\n"""		3053358	1					
ANR	3053617	PrimaryExpression	"""DC_AUTHENTICATE: received UDP packet from %s.\\n"""		3053358	0					
ANR	3053618	Argument	sock -> peer_description ( )		3053358	2					
ANR	3053619	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3053620	Callee	sock -> peer_description		3053358	0					
ANR	3053621	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3053622	Identifier	sock		3053358	0					
ANR	3053623	Identifier	peer_description		3053358	1					
ANR	3053624	ArgumentList			3053358	1					
ANR	3053625	IdentifierDeclStatement	const char * cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataMD5ed ( ) ;	4329:2:129526:129596	3053358	2	True				
ANR	3053626	IdentifierDecl	* cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataMD5ed ( )		3053358	0					
ANR	3053627	IdentifierDeclType	const char *		3053358	0					
ANR	3053628	Identifier	cleartext_info		3053358	1					
ANR	3053629	AssignmentExpression	* cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataMD5ed ( )		3053358	2		=			
ANR	3053630	Identifier	cleartext_info		3053358	0					
ANR	3053631	CallExpression	( ( SafeSock * ) sock ) -> isIncomingDataMD5ed ( )		3053358	1					
ANR	3053632	Callee	( ( SafeSock * ) sock ) -> isIncomingDataMD5ed		3053358	0					
ANR	3053633	PtrMemberAccess	( ( SafeSock * ) sock ) -> isIncomingDataMD5ed		3053358	0					
ANR	3053634	CastExpression	( SafeSock * ) sock		3053358	0					
ANR	3053635	CastTarget	SafeSock *		3053358	0					
ANR	3053636	Identifier	sock		3053358	1					
ANR	3053637	Identifier	isIncomingDataMD5ed		3053358	1					
ANR	3053638	ArgumentList			3053358	1					
ANR	3053639	IdentifierDeclStatement	char * sess_id = NULL ;	4330:2:129600:129621	3053358	3	True				
ANR	3053640	IdentifierDecl	* sess_id = NULL		3053358	0					
ANR	3053641	IdentifierDeclType	char *		3053358	0					
ANR	3053642	Identifier	sess_id		3053358	1					
ANR	3053643	AssignmentExpression	* sess_id = NULL		3053358	2		=			
ANR	3053644	Identifier	NULL		3053358	0					
ANR	3053645	Identifier	NULL		3053358	1					
ANR	3053646	IdentifierDeclStatement	char * return_address_ss = NULL ;	4331:2:129625:129656	3053358	4	True				
ANR	3053647	IdentifierDecl	* return_address_ss = NULL		3053358	0					
ANR	3053648	IdentifierDeclType	char *		3053358	0					
ANR	3053649	Identifier	return_address_ss		3053358	1					
ANR	3053650	AssignmentExpression	* return_address_ss = NULL		3053358	2		=			
ANR	3053651	Identifier	NULL		3053358	0					
ANR	3053652	Identifier	NULL		3053358	1					
ANR	3053653	IfStatement	if ( cleartext_info )		3053358	5					
ANR	3053654	Condition	cleartext_info	4333:6:129665:129678	3053358	0	True				
ANR	3053655	Identifier	cleartext_info		3053358	0					
ANR	3053656	CompoundStatement		96:3:2700:2717	3053358	1					
ANR	3053657	IdentifierDeclStatement	StringList info_list ( cleartext_info ) ;	4334:3:129686:129722	3053358	0	True				
ANR	3053658	IdentifierDecl	info_list ( cleartext_info )		3053358	0					
ANR	3053659	IdentifierDeclType	StringList		3053358	0					
ANR	3053660	Identifier	info_list		3053358	1					
ANR	3053661	Identifier	cleartext_info		3053358	2					
ANR	3053662	IdentifierDeclStatement	char * tmp = NULL ;	4335:3:129727:129744	3053358	1	True				
ANR	3053663	IdentifierDecl	* tmp = NULL		3053358	0					
ANR	3053664	IdentifierDeclType	char *		3053358	0					
ANR	3053665	Identifier	tmp		3053358	1					
ANR	3053666	AssignmentExpression	* tmp = NULL		3053358	2		=			
ANR	3053667	Identifier	NULL		3053358	0					
ANR	3053668	Identifier	NULL		3053358	1					
ANR	3053669	ExpressionStatement	info_list . rewind ( )	4337:3:129750:129768	3053358	2	True				
ANR	3053670	CallExpression	info_list . rewind ( )		3053358	0					
ANR	3053671	Callee	info_list . rewind		3053358	0					
ANR	3053672	MemberAccess	info_list . rewind		3053358	0					
ANR	3053673	Identifier	info_list		3053358	0					
ANR	3053674	Identifier	rewind		3053358	1					
ANR	3053675	ArgumentList			3053358	1					
ANR	3053676	ExpressionStatement	tmp = info_list . next ( )	4338:3:129773:129795	3053358	3	True				
ANR	3053677	AssignmentExpression	tmp = info_list . next ( )		3053358	0		=			
ANR	3053678	Identifier	tmp		3053358	0					
ANR	3053679	CallExpression	info_list . next ( )		3053358	1					
ANR	3053680	Callee	info_list . next		3053358	0					
ANR	3053681	MemberAccess	info_list . next		3053358	0					
ANR	3053682	Identifier	info_list		3053358	0					
ANR	3053683	Identifier	next		3053358	1					
ANR	3053684	ArgumentList			3053358	1					
ANR	3053685	IfStatement	if ( tmp )		3053358	4					
ANR	3053686	Condition	tmp	4339:7:129804:129806	3053358	0	True				
ANR	3053687	Identifier	tmp		3053358	0					
ANR	3053688	CompoundStatement		100:12:2782:2782	3053358	1					
ANR	3053689	ExpressionStatement	sess_id = strdup ( tmp )	4340:4:129815:129836	3053358	0	True				
ANR	3053690	AssignmentExpression	sess_id = strdup ( tmp )		3053358	0		=			
ANR	3053691	Identifier	sess_id		3053358	0					
ANR	3053692	CallExpression	strdup ( tmp )		3053358	1					
ANR	3053693	Callee	strdup		3053358	0					
ANR	3053694	Identifier	strdup		3053358	0					
ANR	3053695	ArgumentList	tmp		3053358	1					
ANR	3053696	Argument	tmp		3053358	0					
ANR	3053697	Identifier	tmp		3053358	0					
ANR	3053698	ExpressionStatement	tmp = info_list . next ( )	4341:4:129842:129864	3053358	1	True				
ANR	3053699	AssignmentExpression	tmp = info_list . next ( )		3053358	0		=			
ANR	3053700	Identifier	tmp		3053358	0					
ANR	3053701	CallExpression	info_list . next ( )		3053358	1					
ANR	3053702	Callee	info_list . next		3053358	0					
ANR	3053703	MemberAccess	info_list . next		3053358	0					
ANR	3053704	Identifier	info_list		3053358	0					
ANR	3053705	Identifier	next		3053358	1					
ANR	3053706	ArgumentList			3053358	1					
ANR	3053707	IfStatement	if ( tmp )		3053358	2					
ANR	3053708	Condition	tmp	4342:8:129874:129876	3053358	0	True				
ANR	3053709	Identifier	tmp		3053358	0					
ANR	3053710	CompoundStatement		103:13:2852:2852	3053358	1					
ANR	3053711	ExpressionStatement	return_address_ss = strdup ( tmp )	4343:5:129886:129917	3053358	0	True				
ANR	3053712	AssignmentExpression	return_address_ss = strdup ( tmp )		3053358	0		=			
ANR	3053713	Identifier	return_address_ss		3053358	0					
ANR	3053714	CallExpression	strdup ( tmp )		3053358	1					
ANR	3053715	Callee	strdup		3053358	0					
ANR	3053716	Identifier	strdup		3053358	0					
ANR	3053717	ArgumentList	tmp		3053358	1					
ANR	3053718	Argument	tmp		3053358	0					
ANR	3053719	Identifier	tmp		3053358	0					
ANR	3053720	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet from %s uses MD5 session %s.\\n"" , return_address_ss , sess_id )"	4344:5:129924:130038	3053358	1	True				
ANR	3053721	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet from %s uses MD5 session %s.\\n"" , return_address_ss , sess_id )"		3053358	0					
ANR	3053722	Callee	dprintf		3053358	0					
ANR	3053723	Identifier	dprintf		3053358	0					
ANR	3053724	ArgumentList	D_SECURITY		3053358	1					
ANR	3053725	Argument	D_SECURITY		3053358	0					
ANR	3053726	Identifier	D_SECURITY		3053358	0					
ANR	3053727	Argument	"""DC_AUTHENTICATE: packet from %s uses MD5 session %s.\\n"""		3053358	1					
ANR	3053728	PrimaryExpression	"""DC_AUTHENTICATE: packet from %s uses MD5 session %s.\\n"""		3053358	0					
ANR	3053729	Argument	return_address_ss		3053358	2					
ANR	3053730	Identifier	return_address_ss		3053358	0					
ANR	3053731	Argument	sess_id		3053358	3					
ANR	3053732	Identifier	sess_id		3053358	0					
ANR	3053733	ElseStatement	else		3053358	0					
ANR	3053734	CompoundStatement		107:11:3024:3024	3053358	0					
ANR	3053735	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet uses MD5 session %s.\\n"" , sess_id )"	4347:5:130058:130138	3053358	0	True				
ANR	3053736	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet uses MD5 session %s.\\n"" , sess_id )"		3053358	0					
ANR	3053737	Callee	dprintf		3053358	0					
ANR	3053738	Identifier	dprintf		3053358	0					
ANR	3053739	ArgumentList	D_SECURITY		3053358	1					
ANR	3053740	Argument	D_SECURITY		3053358	0					
ANR	3053741	Identifier	D_SECURITY		3053358	0					
ANR	3053742	Argument	"""DC_AUTHENTICATE: packet uses MD5 session %s.\\n"""		3053358	1					
ANR	3053743	PrimaryExpression	"""DC_AUTHENTICATE: packet uses MD5 session %s.\\n"""		3053358	0					
ANR	3053744	Argument	sess_id		3053358	2					
ANR	3053745	Identifier	sess_id		3053358	0					
ANR	3053746	ElseStatement	else		3053358	0					
ANR	3053747	CompoundStatement		111:10:3130:3130	3053358	0					
ANR	3053748	IfStatement	if ( sess_id )		3053358	6					
ANR	3053749	Condition	sess_id	4357:6:130330:130336	3053358	0	True				
ANR	3053750	Identifier	sess_id		3053358	0					
ANR	3053751	CompoundStatement		120:3:3351:3417	3053358	1					
ANR	3053752	IdentifierDeclStatement	KeyCacheEntry * session = NULL ;	4358:3:130344:130373	3053358	0	True				
ANR	3053753	IdentifierDecl	* session = NULL		3053358	0					
ANR	3053754	IdentifierDeclType	KeyCacheEntry *		3053358	0					
ANR	3053755	Identifier	session		3053358	1					
ANR	3053756	AssignmentExpression	* session = NULL		3053358	2		=			
ANR	3053757	Identifier	NULL		3053358	0					
ANR	3053758	Identifier	NULL		3053358	1					
ANR	3053759	IdentifierDeclStatement	"bool found_sess = sec_man -> session_cache -> lookup ( sess_id , session ) ;"	4359:3:130378:130444	3053358	1	True				
ANR	3053760	IdentifierDecl	"found_sess = sec_man -> session_cache -> lookup ( sess_id , session )"		3053358	0					
ANR	3053761	IdentifierDeclType	bool		3053358	0					
ANR	3053762	Identifier	found_sess		3053358	1					
ANR	3053763	AssignmentExpression	"found_sess = sec_man -> session_cache -> lookup ( sess_id , session )"		3053358	2		=			
ANR	3053764	Identifier	found_sess		3053358	0					
ANR	3053765	CallExpression	"sec_man -> session_cache -> lookup ( sess_id , session )"		3053358	1					
ANR	3053766	Callee	sec_man -> session_cache -> lookup		3053358	0					
ANR	3053767	PtrMemberAccess	sec_man -> session_cache -> lookup		3053358	0					
ANR	3053768	PtrMemberAccess	sec_man -> session_cache		3053358	0					
ANR	3053769	Identifier	sec_man		3053358	0					
ANR	3053770	Identifier	session_cache		3053358	1					
ANR	3053771	Identifier	lookup		3053358	1					
ANR	3053772	ArgumentList	sess_id		3053358	1					
ANR	3053773	Argument	sess_id		3053358	0					
ANR	3053774	Identifier	sess_id		3053358	0					
ANR	3053775	Argument	session		3053358	1					
ANR	3053776	Identifier	session		3053358	0					
ANR	3053777	IfStatement	if ( ! found_sess )		3053358	2					
ANR	3053778	Condition	! found_sess	4361:7:130454:130464	3053358	0	True				
ANR	3053779	UnaryOperationExpression	! found_sess		3053358	0					
ANR	3053780	UnaryOperator	!		3053358	0					
ANR	3053781	Identifier	found_sess		3053358	1					
ANR	3053782	CompoundStatement		122:20:3440:3440	3053358	1					
ANR	3053783	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4362:4:130473:130677	3053358	0	True				
ANR	3053784	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		3053358	0					
ANR	3053785	Callee	dprintf		3053358	0					
ANR	3053786	Identifier	dprintf		3053358	0					
ANR	3053787	ArgumentList	D_ALWAYS		3053358	1					
ANR	3053788	Argument	D_ALWAYS		3053358	0					
ANR	3053789	Identifier	D_ALWAYS		3053358	0					
ANR	3053790	Argument	"""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"""		3053358	1					
ANR	3053791	PrimaryExpression	"""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"""		3053358	0					
ANR	3053792	Argument	sess_id		3053358	2					
ANR	3053793	Identifier	sess_id		3053358	0					
ANR	3053794	Argument	sock -> peer_description ( )		3053358	3					
ANR	3053795	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3053796	Callee	sock -> peer_description		3053358	0					
ANR	3053797	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3053798	Identifier	sock		3053358	0					
ANR	3053799	Identifier	peer_description		3053358	1					
ANR	3053800	ArgumentList			3053358	1					
ANR	3053801	Argument	"return_address_ss ? return_address_ss : ""(none)"""		3053358	4					
ANR	3053802	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		3053358	0					
ANR	3053803	Condition	return_address_ss		3053358	0					
ANR	3053804	Identifier	return_address_ss		3053358	0					
ANR	3053805	Identifier	return_address_ss		3053358	1					
ANR	3053806	PrimaryExpression	"""(none)"""		3053358	2					
ANR	3053807	ExpressionStatement	"send_invalidate_session ( return_address_ss , sess_id )"	4367:4:130835:130889	3053358	1	True				
ANR	3053808	CallExpression	"send_invalidate_session ( return_address_ss , sess_id )"		3053358	0					
ANR	3053809	Callee	send_invalidate_session		3053358	0					
ANR	3053810	Identifier	send_invalidate_session		3053358	0					
ANR	3053811	ArgumentList	return_address_ss		3053358	1					
ANR	3053812	Argument	return_address_ss		3053358	0					
ANR	3053813	Identifier	return_address_ss		3053358	0					
ANR	3053814	Argument	sess_id		3053358	1					
ANR	3053815	Identifier	sess_id		3053358	0					
ANR	3053816	IfStatement	if ( return_address_ss )		3053358	2					
ANR	3053817	Condition	return_address_ss	4369:8:130900:130916	3053358	0	True				
ANR	3053818	Identifier	return_address_ss		3053358	0					
ANR	3053819	CompoundStatement		130:28:3893:3893	3053358	1					
ANR	3053820	ExpressionStatement	free ( return_address_ss )	4370:5:130927:130952	3053358	0	True				
ANR	3053821	CallExpression	free ( return_address_ss )		3053358	0					
ANR	3053822	Callee	free		3053358	0					
ANR	3053823	Identifier	free		3053358	0					
ANR	3053824	ArgumentList	return_address_ss		3053358	1					
ANR	3053825	Argument	return_address_ss		3053358	0					
ANR	3053826	Identifier	return_address_ss		3053358	0					
ANR	3053827	ExpressionStatement	return_address_ss = NULL	4371:5:130959:130983	3053358	1	True				
ANR	3053828	AssignmentExpression	return_address_ss = NULL		3053358	0		=			
ANR	3053829	Identifier	return_address_ss		3053358	0					
ANR	3053830	Identifier	NULL		3053358	1					
ANR	3053831	ExpressionStatement	free ( sess_id )	4373:4:130995:131010	3053358	3	True				
ANR	3053832	CallExpression	free ( sess_id )		3053358	0					
ANR	3053833	Callee	free		3053358	0					
ANR	3053834	Identifier	free		3053358	0					
ANR	3053835	ArgumentList	sess_id		3053358	1					
ANR	3053836	Argument	sess_id		3053358	0					
ANR	3053837	Identifier	sess_id		3053358	0					
ANR	3053838	ExpressionStatement	sess_id = NULL	4374:4:131016:131030	3053358	4	True				
ANR	3053839	AssignmentExpression	sess_id = NULL		3053358	0		=			
ANR	3053840	Identifier	sess_id		3053358	0					
ANR	3053841	Identifier	NULL		3053358	1					
ANR	3053842	ExpressionStatement	result = FALSE	4375:4:131036:131050	3053358	5	True				
ANR	3053843	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3053844	Identifier	result		3053358	0					
ANR	3053845	Identifier	FALSE		3053358	1					
ANR	3053846	GotoStatement	goto finalize ;	4376:4:131056:131069	3053358	6	True				
ANR	3053847	Identifier	finalize		3053358	0					
ANR	3053848	ExpressionStatement	session -> renewLease ( )	4379:3:131080:131101	3053358	3	True				
ANR	3053849	CallExpression	session -> renewLease ( )		3053358	0					
ANR	3053850	Callee	session -> renewLease		3053358	0					
ANR	3053851	PtrMemberAccess	session -> renewLease		3053358	0					
ANR	3053852	Identifier	session		3053358	0					
ANR	3053853	Identifier	renewLease		3053358	1					
ANR	3053854	ArgumentList			3053358	1					
ANR	3053855	IfStatement	if ( ! session -> key ( ) )		3053358	4					
ANR	3053856	Condition	! session -> key ( )	4381:7:131111:131125	3053358	0	True				
ANR	3053857	UnaryOperationExpression	! session -> key ( )		3053358	0					
ANR	3053858	UnaryOperator	!		3053358	0					
ANR	3053859	CallExpression	session -> key ( )		3053358	1					
ANR	3053860	Callee	session -> key		3053358	0					
ANR	3053861	PtrMemberAccess	session -> key		3053358	0					
ANR	3053862	Identifier	session		3053358	0					
ANR	3053863	Identifier	key		3053358	1					
ANR	3053864	ArgumentList			3053358	1					
ANR	3053865	CompoundStatement		142:24:4101:4101	3053358	1					
ANR	3053866	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4382:4:131134:131347	3053358	0	True				
ANR	3053867	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		3053358	0					
ANR	3053868	Callee	dprintf		3053358	0					
ANR	3053869	Identifier	dprintf		3053358	0					
ANR	3053870	ArgumentList	D_ALWAYS		3053358	1					
ANR	3053871	Argument	D_ALWAYS		3053358	0					
ANR	3053872	Identifier	D_ALWAYS		3053358	0					
ANR	3053873	Argument	"""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"""		3053358	1					
ANR	3053874	PrimaryExpression	"""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"""		3053358	0					
ANR	3053875	Argument	sess_id		3053358	2					
ANR	3053876	Identifier	sess_id		3053358	0					
ANR	3053877	Argument	sock -> peer_description ( )		3053358	3					
ANR	3053878	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3053879	Callee	sock -> peer_description		3053358	0					
ANR	3053880	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3053881	Identifier	sock		3053358	0					
ANR	3053882	Identifier	peer_description		3053358	1					
ANR	3053883	ArgumentList			3053358	1					
ANR	3053884	Argument	"return_address_ss ? return_address_ss : ""(none)"""		3053358	4					
ANR	3053885	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		3053358	0					
ANR	3053886	Condition	return_address_ss		3053358	0					
ANR	3053887	Identifier	return_address_ss		3053358	0					
ANR	3053888	Identifier	return_address_ss		3053358	1					
ANR	3053889	PrimaryExpression	"""(none)"""		3053358	2					
ANR	3053890	IfStatement	if ( return_address_ss )		3053358	1					
ANR	3053891	Condition	return_address_ss	4384:8:131397:131413	3053358	0	True				
ANR	3053892	Identifier	return_address_ss		3053358	0					
ANR	3053893	CompoundStatement		145:28:4390:4390	3053358	1					
ANR	3053894	ExpressionStatement	free ( return_address_ss )	4385:5:131424:131449	3053358	0	True				
ANR	3053895	CallExpression	free ( return_address_ss )		3053358	0					
ANR	3053896	Callee	free		3053358	0					
ANR	3053897	Identifier	free		3053358	0					
ANR	3053898	ArgumentList	return_address_ss		3053358	1					
ANR	3053899	Argument	return_address_ss		3053358	0					
ANR	3053900	Identifier	return_address_ss		3053358	0					
ANR	3053901	ExpressionStatement	return_address_ss = NULL	4386:5:131456:131480	3053358	1	True				
ANR	3053902	AssignmentExpression	return_address_ss = NULL		3053358	0		=			
ANR	3053903	Identifier	return_address_ss		3053358	0					
ANR	3053904	Identifier	NULL		3053358	1					
ANR	3053905	ExpressionStatement	free ( sess_id )	4388:4:131492:131507	3053358	2	True				
ANR	3053906	CallExpression	free ( sess_id )		3053358	0					
ANR	3053907	Callee	free		3053358	0					
ANR	3053908	Identifier	free		3053358	0					
ANR	3053909	ArgumentList	sess_id		3053358	1					
ANR	3053910	Argument	sess_id		3053358	0					
ANR	3053911	Identifier	sess_id		3053358	0					
ANR	3053912	ExpressionStatement	sess_id = NULL	4389:4:131513:131527	3053358	3	True				
ANR	3053913	AssignmentExpression	sess_id = NULL		3053358	0		=			
ANR	3053914	Identifier	sess_id		3053358	0					
ANR	3053915	Identifier	NULL		3053358	1					
ANR	3053916	ExpressionStatement	result = FALSE	4390:4:131533:131547	3053358	4	True				
ANR	3053917	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3053918	Identifier	result		3053358	0					
ANR	3053919	Identifier	FALSE		3053358	1					
ANR	3053920	GotoStatement	goto finalize ;	4391:4:131553:131566	3053358	5	True				
ANR	3053921	Identifier	finalize		3053358	0					
ANR	3053922	IfStatement	"if ( ! sock -> set_MD_mode ( MD_ALWAYS_ON , session -> key ( ) ) )"		3053358	5					
ANR	3053923	Condition	"! sock -> set_MD_mode ( MD_ALWAYS_ON , session -> key ( ) )"	4394:7:131581:131628	3053358	0	True				
ANR	3053924	UnaryOperationExpression	"! sock -> set_MD_mode ( MD_ALWAYS_ON , session -> key ( ) )"		3053358	0					
ANR	3053925	UnaryOperator	!		3053358	0					
ANR	3053926	CallExpression	"sock -> set_MD_mode ( MD_ALWAYS_ON , session -> key ( ) )"		3053358	1					
ANR	3053927	Callee	sock -> set_MD_mode		3053358	0					
ANR	3053928	PtrMemberAccess	sock -> set_MD_mode		3053358	0					
ANR	3053929	Identifier	sock		3053358	0					
ANR	3053930	Identifier	set_MD_mode		3053358	1					
ANR	3053931	ArgumentList	MD_ALWAYS_ON		3053358	1					
ANR	3053932	Argument	MD_ALWAYS_ON		3053358	0					
ANR	3053933	Identifier	MD_ALWAYS_ON		3053358	0					
ANR	3053934	Argument	session -> key ( )		3053358	1					
ANR	3053935	CallExpression	session -> key ( )		3053358	0					
ANR	3053936	Callee	session -> key		3053358	0					
ANR	3053937	PtrMemberAccess	session -> key		3053358	0					
ANR	3053938	Identifier	session		3053358	0					
ANR	3053939	Identifier	key		3053358	1					
ANR	3053940	ArgumentList			3053358	1					
ANR	3053941	CompoundStatement		155:57:4604:4604	3053358	1					
ANR	3053942	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on message authenticator for session %s, failing; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4395:4:131637:131882	3053358	0	True				
ANR	3053943	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on message authenticator for session %s, failing; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		3053358	0					
ANR	3053944	Callee	dprintf		3053358	0					
ANR	3053945	Identifier	dprintf		3053358	0					
ANR	3053946	ArgumentList	D_ALWAYS		3053358	1					
ANR	3053947	Argument	D_ALWAYS		3053358	0					
ANR	3053948	Identifier	D_ALWAYS		3053358	0					
ANR	3053949	Argument	"""DC_AUTHENTICATE: unable to turn on message authenticator for session %s, failing; this session was requested by %s with return address %s\\n"""		3053358	1					
ANR	3053950	PrimaryExpression	"""DC_AUTHENTICATE: unable to turn on message authenticator for session %s, failing; this session was requested by %s with return address %s\\n"""		3053358	0					
ANR	3053951	Argument	sess_id		3053358	2					
ANR	3053952	Identifier	sess_id		3053358	0					
ANR	3053953	Argument	sock -> peer_description ( )		3053358	3					
ANR	3053954	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3053955	Callee	sock -> peer_description		3053358	0					
ANR	3053956	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3053957	Identifier	sock		3053358	0					
ANR	3053958	Identifier	peer_description		3053358	1					
ANR	3053959	ArgumentList			3053358	1					
ANR	3053960	Argument	"return_address_ss ? return_address_ss : ""(none)"""		3053358	4					
ANR	3053961	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		3053358	0					
ANR	3053962	Condition	return_address_ss		3053358	0					
ANR	3053963	Identifier	return_address_ss		3053358	0					
ANR	3053964	Identifier	return_address_ss		3053358	1					
ANR	3053965	PrimaryExpression	"""(none)"""		3053358	2					
ANR	3053966	IfStatement	if ( return_address_ss )		3053358	1					
ANR	3053967	Condition	return_address_ss	4396:8:131892:131908	3053358	0	True				
ANR	3053968	Identifier	return_address_ss		3053358	0					
ANR	3053969	CompoundStatement		157:28:4885:4885	3053358	1					
ANR	3053970	ExpressionStatement	free ( return_address_ss )	4397:5:131919:131944	3053358	0	True				
ANR	3053971	CallExpression	free ( return_address_ss )		3053358	0					
ANR	3053972	Callee	free		3053358	0					
ANR	3053973	Identifier	free		3053358	0					
ANR	3053974	ArgumentList	return_address_ss		3053358	1					
ANR	3053975	Argument	return_address_ss		3053358	0					
ANR	3053976	Identifier	return_address_ss		3053358	0					
ANR	3053977	ExpressionStatement	return_address_ss = NULL	4398:5:131951:131975	3053358	1	True				
ANR	3053978	AssignmentExpression	return_address_ss = NULL		3053358	0		=			
ANR	3053979	Identifier	return_address_ss		3053358	0					
ANR	3053980	Identifier	NULL		3053358	1					
ANR	3053981	ExpressionStatement	free ( sess_id )	4400:4:131987:132002	3053358	2	True				
ANR	3053982	CallExpression	free ( sess_id )		3053358	0					
ANR	3053983	Callee	free		3053358	0					
ANR	3053984	Identifier	free		3053358	0					
ANR	3053985	ArgumentList	sess_id		3053358	1					
ANR	3053986	Argument	sess_id		3053358	0					
ANR	3053987	Identifier	sess_id		3053358	0					
ANR	3053988	ExpressionStatement	sess_id = NULL	4401:4:132008:132022	3053358	3	True				
ANR	3053989	AssignmentExpression	sess_id = NULL		3053358	0		=			
ANR	3053990	Identifier	sess_id		3053358	0					
ANR	3053991	Identifier	NULL		3053358	1					
ANR	3053992	ExpressionStatement	result = FALSE	4402:4:132028:132042	3053358	4	True				
ANR	3053993	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3053994	Identifier	result		3053358	0					
ANR	3053995	Identifier	FALSE		3053358	1					
ANR	3053996	GotoStatement	goto finalize ;	4403:4:132048:132061	3053358	5	True				
ANR	3053997	Identifier	finalize		3053358	0					
ANR	3053998	ElseStatement	else		3053358	0					
ANR	3053999	CompoundStatement		165:10:5046:5046	3053358	0					
ANR	3054000	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"" , sess_id )"	4405:4:132079:132176	3053358	0	True				
ANR	3054001	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"" , sess_id )"		3053358	0					
ANR	3054002	Callee	dprintf		3053358	0					
ANR	3054003	Identifier	dprintf		3053358	0					
ANR	3054004	ArgumentList	D_SECURITY		3053358	1					
ANR	3054005	Argument	D_SECURITY		3053358	0					
ANR	3054006	Identifier	D_SECURITY		3053358	0					
ANR	3054007	Argument	"""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"""		3053358	1					
ANR	3054008	PrimaryExpression	"""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"""		3053358	0					
ANR	3054009	Argument	sess_id		3053358	2					
ANR	3054010	Identifier	sess_id		3053358	0					
ANR	3054011	ExpressionStatement	"sec_man -> key_printf ( D_SECURITY , session -> key ( ) )"	4406:4:132182:132230	3053358	1	True				
ANR	3054012	CallExpression	"sec_man -> key_printf ( D_SECURITY , session -> key ( ) )"		3053358	0					
ANR	3054013	Callee	sec_man -> key_printf		3053358	0					
ANR	3054014	PtrMemberAccess	sec_man -> key_printf		3053358	0					
ANR	3054015	Identifier	sec_man		3053358	0					
ANR	3054016	Identifier	key_printf		3053358	1					
ANR	3054017	ArgumentList	D_SECURITY		3053358	1					
ANR	3054018	Argument	D_SECURITY		3053358	0					
ANR	3054019	Identifier	D_SECURITY		3053358	0					
ANR	3054020	Argument	session -> key ( )		3053358	1					
ANR	3054021	CallExpression	session -> key ( )		3053358	0					
ANR	3054022	Callee	session -> key		3053358	0					
ANR	3054023	PtrMemberAccess	session -> key		3053358	0					
ANR	3054024	Identifier	session		3053358	0					
ANR	3054025	Identifier	key		3053358	1					
ANR	3054026	ArgumentList			3053358	1					
ANR	3054027	ExpressionStatement	"session -> policy ( ) -> LookupString ( ATTR_SEC_USER , & who )"	4410:12:132284:132336	3053358	6	True				
ANR	3054028	CallExpression	"session -> policy ( ) -> LookupString ( ATTR_SEC_USER , & who )"		3053358	0					
ANR	3054029	Callee	session -> policy ( ) -> LookupString		3053358	0					
ANR	3054030	PtrMemberAccess	session -> policy ( ) -> LookupString		3053358	0					
ANR	3054031	CallExpression	session -> policy ( )		3053358	0					
ANR	3054032	Callee	session -> policy		3053358	0					
ANR	3054033	PtrMemberAccess	session -> policy		3053358	0					
ANR	3054034	Identifier	session		3053358	0					
ANR	3054035	Identifier	policy		3053358	1					
ANR	3054036	ArgumentList			3053358	1					
ANR	3054037	Identifier	LookupString		3053358	1					
ANR	3054038	ArgumentList	ATTR_SEC_USER		3053358	1					
ANR	3054039	Argument	ATTR_SEC_USER		3053358	0					
ANR	3054040	Identifier	ATTR_SEC_USER		3053358	0					
ANR	3054041	Argument	& who		3053358	1					
ANR	3054042	UnaryOperationExpression	& who		3053358	0					
ANR	3054043	UnaryOperator	&		3053358	0					
ANR	3054044	Identifier	who		3053358	1					
ANR	3054045	ExpressionStatement	free ( sess_id )	4412:3:132342:132357	3053358	7	True				
ANR	3054046	CallExpression	free ( sess_id )		3053358	0					
ANR	3054047	Callee	free		3053358	0					
ANR	3054048	Identifier	free		3053358	0					
ANR	3054049	ArgumentList	sess_id		3053358	1					
ANR	3054050	Argument	sess_id		3053358	0					
ANR	3054051	Identifier	sess_id		3053358	0					
ANR	3054052	IfStatement	if ( return_address_ss )		3053358	8					
ANR	3054053	Condition	return_address_ss	4414:7:132367:132383	3053358	0	True				
ANR	3054054	Identifier	return_address_ss		3053358	0					
ANR	3054055	CompoundStatement		175:26:5359:5359	3053358	1					
ANR	3054056	ExpressionStatement	free ( return_address_ss )	4415:4:132392:132417	3053358	0	True				
ANR	3054057	CallExpression	free ( return_address_ss )		3053358	0					
ANR	3054058	Callee	free		3053358	0					
ANR	3054059	Identifier	free		3053358	0					
ANR	3054060	ArgumentList	return_address_ss		3053358	1					
ANR	3054061	Argument	return_address_ss		3053358	0					
ANR	3054062	Identifier	return_address_ss		3053358	0					
ANR	3054063	ExpressionStatement	cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataEncrypted ( )	4421:2:132467:132528	3053358	7	True				
ANR	3054064	AssignmentExpression	cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataEncrypted ( )		3053358	0		=			
ANR	3054065	Identifier	cleartext_info		3053358	0					
ANR	3054066	CallExpression	( ( SafeSock * ) sock ) -> isIncomingDataEncrypted ( )		3053358	1					
ANR	3054067	Callee	( ( SafeSock * ) sock ) -> isIncomingDataEncrypted		3053358	0					
ANR	3054068	PtrMemberAccess	( ( SafeSock * ) sock ) -> isIncomingDataEncrypted		3053358	0					
ANR	3054069	CastExpression	( SafeSock * ) sock		3053358	0					
ANR	3054070	CastTarget	SafeSock *		3053358	0					
ANR	3054071	Identifier	sock		3053358	1					
ANR	3054072	Identifier	isIncomingDataEncrypted		3053358	1					
ANR	3054073	ArgumentList			3053358	1					
ANR	3054074	ExpressionStatement	sess_id = NULL	4422:2:132532:132546	3053358	8	True				
ANR	3054075	AssignmentExpression	sess_id = NULL		3053358	0		=			
ANR	3054076	Identifier	sess_id		3053358	0					
ANR	3054077	Identifier	NULL		3053358	1					
ANR	3054078	ExpressionStatement	return_address_ss = NULL	4423:2:132550:132574	3053358	9	True				
ANR	3054079	AssignmentExpression	return_address_ss = NULL		3053358	0		=			
ANR	3054080	Identifier	return_address_ss		3053358	0					
ANR	3054081	Identifier	NULL		3053358	1					
ANR	3054082	IfStatement	if ( cleartext_info )		3053358	10					
ANR	3054083	Condition	cleartext_info	4425:6:132583:132596	3053358	0	True				
ANR	3054084	Identifier	cleartext_info		3053358	0					
ANR	3054085	CompoundStatement		188:3:5618:5635	3053358	1					
ANR	3054086	IdentifierDeclStatement	StringList info_list ( cleartext_info ) ;	4426:3:132604:132640	3053358	0	True				
ANR	3054087	IdentifierDecl	info_list ( cleartext_info )		3053358	0					
ANR	3054088	IdentifierDeclType	StringList		3053358	0					
ANR	3054089	Identifier	info_list		3053358	1					
ANR	3054090	Identifier	cleartext_info		3053358	2					
ANR	3054091	IdentifierDeclStatement	char * tmp = NULL ;	4427:3:132645:132662	3053358	1	True				
ANR	3054092	IdentifierDecl	* tmp = NULL		3053358	0					
ANR	3054093	IdentifierDeclType	char *		3053358	0					
ANR	3054094	Identifier	tmp		3053358	1					
ANR	3054095	AssignmentExpression	* tmp = NULL		3053358	2		=			
ANR	3054096	Identifier	NULL		3053358	0					
ANR	3054097	Identifier	NULL		3053358	1					
ANR	3054098	ExpressionStatement	info_list . rewind ( )	4429:3:132668:132686	3053358	2	True				
ANR	3054099	CallExpression	info_list . rewind ( )		3053358	0					
ANR	3054100	Callee	info_list . rewind		3053358	0					
ANR	3054101	MemberAccess	info_list . rewind		3053358	0					
ANR	3054102	Identifier	info_list		3053358	0					
ANR	3054103	Identifier	rewind		3053358	1					
ANR	3054104	ArgumentList			3053358	1					
ANR	3054105	ExpressionStatement	tmp = info_list . next ( )	4430:3:132691:132713	3053358	3	True				
ANR	3054106	AssignmentExpression	tmp = info_list . next ( )		3053358	0		=			
ANR	3054107	Identifier	tmp		3053358	0					
ANR	3054108	CallExpression	info_list . next ( )		3053358	1					
ANR	3054109	Callee	info_list . next		3053358	0					
ANR	3054110	MemberAccess	info_list . next		3053358	0					
ANR	3054111	Identifier	info_list		3053358	0					
ANR	3054112	Identifier	next		3053358	1					
ANR	3054113	ArgumentList			3053358	1					
ANR	3054114	IfStatement	if ( tmp )		3053358	4					
ANR	3054115	Condition	tmp	4431:7:132722:132724	3053358	0	True				
ANR	3054116	Identifier	tmp		3053358	0					
ANR	3054117	CompoundStatement		192:12:5700:5700	3053358	1					
ANR	3054118	ExpressionStatement	sess_id = strdup ( tmp )	4432:4:132733:132754	3053358	0	True				
ANR	3054119	AssignmentExpression	sess_id = strdup ( tmp )		3053358	0		=			
ANR	3054120	Identifier	sess_id		3053358	0					
ANR	3054121	CallExpression	strdup ( tmp )		3053358	1					
ANR	3054122	Callee	strdup		3053358	0					
ANR	3054123	Identifier	strdup		3053358	0					
ANR	3054124	ArgumentList	tmp		3053358	1					
ANR	3054125	Argument	tmp		3053358	0					
ANR	3054126	Identifier	tmp		3053358	0					
ANR	3054127	ExpressionStatement	tmp = info_list . next ( )	4434:4:132761:132783	3053358	1	True				
ANR	3054128	AssignmentExpression	tmp = info_list . next ( )		3053358	0		=			
ANR	3054129	Identifier	tmp		3053358	0					
ANR	3054130	CallExpression	info_list . next ( )		3053358	1					
ANR	3054131	Callee	info_list . next		3053358	0					
ANR	3054132	MemberAccess	info_list . next		3053358	0					
ANR	3054133	Identifier	info_list		3053358	0					
ANR	3054134	Identifier	next		3053358	1					
ANR	3054135	ArgumentList			3053358	1					
ANR	3054136	IfStatement	if ( tmp )		3053358	2					
ANR	3054137	Condition	tmp	4435:8:132793:132795	3053358	0	True				
ANR	3054138	Identifier	tmp		3053358	0					
ANR	3054139	CompoundStatement		196:13:5771:5771	3053358	1					
ANR	3054140	ExpressionStatement	return_address_ss = strdup ( tmp )	4436:5:132805:132836	3053358	0	True				
ANR	3054141	AssignmentExpression	return_address_ss = strdup ( tmp )		3053358	0		=			
ANR	3054142	Identifier	return_address_ss		3053358	0					
ANR	3054143	CallExpression	strdup ( tmp )		3053358	1					
ANR	3054144	Callee	strdup		3053358	0					
ANR	3054145	Identifier	strdup		3053358	0					
ANR	3054146	ArgumentList	tmp		3053358	1					
ANR	3054147	Argument	tmp		3053358	0					
ANR	3054148	Identifier	tmp		3053358	0					
ANR	3054149	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet from %s uses crypto session %s.\\n"" , return_address_ss , sess_id )"	4437:5:132843:132960	3053358	1	True				
ANR	3054150	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet from %s uses crypto session %s.\\n"" , return_address_ss , sess_id )"		3053358	0					
ANR	3054151	Callee	dprintf		3053358	0					
ANR	3054152	Identifier	dprintf		3053358	0					
ANR	3054153	ArgumentList	D_SECURITY		3053358	1					
ANR	3054154	Argument	D_SECURITY		3053358	0					
ANR	3054155	Identifier	D_SECURITY		3053358	0					
ANR	3054156	Argument	"""DC_AUTHENTICATE: packet from %s uses crypto session %s.\\n"""		3053358	1					
ANR	3054157	PrimaryExpression	"""DC_AUTHENTICATE: packet from %s uses crypto session %s.\\n"""		3053358	0					
ANR	3054158	Argument	return_address_ss		3053358	2					
ANR	3054159	Identifier	return_address_ss		3053358	0					
ANR	3054160	Argument	sess_id		3053358	3					
ANR	3054161	Identifier	sess_id		3053358	0					
ANR	3054162	ElseStatement	else		3053358	0					
ANR	3054163	CompoundStatement		200:11:5946:5946	3053358	0					
ANR	3054164	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet uses crypto session %s.\\n"" , sess_id )"	4440:5:132980:133063	3053358	0	True				
ANR	3054165	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet uses crypto session %s.\\n"" , sess_id )"		3053358	0					
ANR	3054166	Callee	dprintf		3053358	0					
ANR	3054167	Identifier	dprintf		3053358	0					
ANR	3054168	ArgumentList	D_SECURITY		3053358	1					
ANR	3054169	Argument	D_SECURITY		3053358	0					
ANR	3054170	Identifier	D_SECURITY		3053358	0					
ANR	3054171	Argument	"""DC_AUTHENTICATE: packet uses crypto session %s.\\n"""		3053358	1					
ANR	3054172	PrimaryExpression	"""DC_AUTHENTICATE: packet uses crypto session %s.\\n"""		3053358	0					
ANR	3054173	Argument	sess_id		3053358	2					
ANR	3054174	Identifier	sess_id		3053358	0					
ANR	3054175	ElseStatement	else		3053358	0					
ANR	3054176	CompoundStatement		204:10:6055:6055	3053358	0					
ANR	3054177	IfStatement	if ( sess_id )		3053358	11					
ANR	3054178	Condition	sess_id	4451:6:133256:133262	3053358	0	True				
ANR	3054179	Identifier	sess_id		3053358	0					
ANR	3054180	CompoundStatement		281:3:9050:9083	3053358	1					
ANR	3054181	IdentifierDeclStatement	KeyCacheEntry * session = NULL ;	4452:3:133270:133299	3053358	0	True				
ANR	3054182	IdentifierDecl	* session = NULL		3053358	0					
ANR	3054183	IdentifierDeclType	KeyCacheEntry *		3053358	0					
ANR	3054184	Identifier	session		3053358	1					
ANR	3054185	AssignmentExpression	* session = NULL		3053358	2		=			
ANR	3054186	Identifier	NULL		3053358	0					
ANR	3054187	Identifier	NULL		3053358	1					
ANR	3054188	IdentifierDeclStatement	"bool found_sess = sec_man -> session_cache -> lookup ( sess_id , session ) ;"	4453:3:133304:133370	3053358	1	True				
ANR	3054189	IdentifierDecl	"found_sess = sec_man -> session_cache -> lookup ( sess_id , session )"		3053358	0					
ANR	3054190	IdentifierDeclType	bool		3053358	0					
ANR	3054191	Identifier	found_sess		3053358	1					
ANR	3054192	AssignmentExpression	"found_sess = sec_man -> session_cache -> lookup ( sess_id , session )"		3053358	2		=			
ANR	3054193	Identifier	found_sess		3053358	0					
ANR	3054194	CallExpression	"sec_man -> session_cache -> lookup ( sess_id , session )"		3053358	1					
ANR	3054195	Callee	sec_man -> session_cache -> lookup		3053358	0					
ANR	3054196	PtrMemberAccess	sec_man -> session_cache -> lookup		3053358	0					
ANR	3054197	PtrMemberAccess	sec_man -> session_cache		3053358	0					
ANR	3054198	Identifier	sec_man		3053358	0					
ANR	3054199	Identifier	session_cache		3053358	1					
ANR	3054200	Identifier	lookup		3053358	1					
ANR	3054201	ArgumentList	sess_id		3053358	1					
ANR	3054202	Argument	sess_id		3053358	0					
ANR	3054203	Identifier	sess_id		3053358	0					
ANR	3054204	Argument	session		3053358	1					
ANR	3054205	Identifier	session		3053358	0					
ANR	3054206	IfStatement	if ( ! found_sess )		3053358	2					
ANR	3054207	Condition	! found_sess	4455:7:133380:133390	3053358	0	True				
ANR	3054208	UnaryOperationExpression	! found_sess		3053358	0					
ANR	3054209	UnaryOperator	!		3053358	0					
ANR	3054210	Identifier	found_sess		3053358	1					
ANR	3054211	CompoundStatement		216:20:6366:6366	3053358	1					
ANR	3054212	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4456:4:133399:133603	3053358	0	True				
ANR	3054213	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		3053358	0					
ANR	3054214	Callee	dprintf		3053358	0					
ANR	3054215	Identifier	dprintf		3053358	0					
ANR	3054216	ArgumentList	D_ALWAYS		3053358	1					
ANR	3054217	Argument	D_ALWAYS		3053358	0					
ANR	3054218	Identifier	D_ALWAYS		3053358	0					
ANR	3054219	Argument	"""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"""		3053358	1					
ANR	3054220	PrimaryExpression	"""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"""		3053358	0					
ANR	3054221	Argument	sess_id		3053358	2					
ANR	3054222	Identifier	sess_id		3053358	0					
ANR	3054223	Argument	sock -> peer_description ( )		3053358	3					
ANR	3054224	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3054225	Callee	sock -> peer_description		3053358	0					
ANR	3054226	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3054227	Identifier	sock		3053358	0					
ANR	3054228	Identifier	peer_description		3053358	1					
ANR	3054229	ArgumentList			3053358	1					
ANR	3054230	Argument	"return_address_ss ? return_address_ss : ""(none)"""		3053358	4					
ANR	3054231	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		3053358	0					
ANR	3054232	Condition	return_address_ss		3053358	0					
ANR	3054233	Identifier	return_address_ss		3053358	0					
ANR	3054234	Identifier	return_address_ss		3053358	1					
ANR	3054235	PrimaryExpression	"""(none)"""		3053358	2					
ANR	3054236	ExpressionStatement	"send_invalidate_session ( return_address_ss , sess_id )"	4460:4:133702:133755	3053358	1	True				
ANR	3054237	CallExpression	"send_invalidate_session ( return_address_ss , sess_id )"		3053358	0					
ANR	3054238	Callee	send_invalidate_session		3053358	0					
ANR	3054239	Identifier	send_invalidate_session		3053358	0					
ANR	3054240	ArgumentList	return_address_ss		3053358	1					
ANR	3054241	Argument	return_address_ss		3053358	0					
ANR	3054242	Identifier	return_address_ss		3053358	0					
ANR	3054243	Argument	sess_id		3053358	1					
ANR	3054244	Identifier	sess_id		3053358	0					
ANR	3054245	IfStatement	if ( return_address_ss )		3053358	2					
ANR	3054246	Condition	return_address_ss	4462:8:133766:133782	3053358	0	True				
ANR	3054247	Identifier	return_address_ss		3053358	0					
ANR	3054248	CompoundStatement		223:28:6759:6759	3053358	1					
ANR	3054249	ExpressionStatement	free ( return_address_ss )	4463:5:133793:133818	3053358	0	True				
ANR	3054250	CallExpression	free ( return_address_ss )		3053358	0					
ANR	3054251	Callee	free		3053358	0					
ANR	3054252	Identifier	free		3053358	0					
ANR	3054253	ArgumentList	return_address_ss		3053358	1					
ANR	3054254	Argument	return_address_ss		3053358	0					
ANR	3054255	Identifier	return_address_ss		3053358	0					
ANR	3054256	ExpressionStatement	return_address_ss = NULL	4464:5:133825:133849	3053358	1	True				
ANR	3054257	AssignmentExpression	return_address_ss = NULL		3053358	0		=			
ANR	3054258	Identifier	return_address_ss		3053358	0					
ANR	3054259	Identifier	NULL		3053358	1					
ANR	3054260	ExpressionStatement	free ( sess_id )	4466:4:133861:133876	3053358	3	True				
ANR	3054261	CallExpression	free ( sess_id )		3053358	0					
ANR	3054262	Callee	free		3053358	0					
ANR	3054263	Identifier	free		3053358	0					
ANR	3054264	ArgumentList	sess_id		3053358	1					
ANR	3054265	Argument	sess_id		3053358	0					
ANR	3054266	Identifier	sess_id		3053358	0					
ANR	3054267	ExpressionStatement	sess_id = NULL	4467:4:133882:133896	3053358	4	True				
ANR	3054268	AssignmentExpression	sess_id = NULL		3053358	0		=			
ANR	3054269	Identifier	sess_id		3053358	0					
ANR	3054270	Identifier	NULL		3053358	1					
ANR	3054271	ExpressionStatement	result = FALSE	4468:4:133902:133916	3053358	5	True				
ANR	3054272	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3054273	Identifier	result		3053358	0					
ANR	3054274	Identifier	FALSE		3053358	1					
ANR	3054275	GotoStatement	goto finalize ;	4469:4:133922:133935	3053358	6	True				
ANR	3054276	Identifier	finalize		3053358	0					
ANR	3054277	ExpressionStatement	session -> renewLease ( )	4472:3:133946:133967	3053358	3	True				
ANR	3054278	CallExpression	session -> renewLease ( )		3053358	0					
ANR	3054279	Callee	session -> renewLease		3053358	0					
ANR	3054280	PtrMemberAccess	session -> renewLease		3053358	0					
ANR	3054281	Identifier	session		3053358	0					
ANR	3054282	Identifier	renewLease		3053358	1					
ANR	3054283	ArgumentList			3053358	1					
ANR	3054284	IfStatement	if ( ! session -> key ( ) )		3053358	4					
ANR	3054285	Condition	! session -> key ( )	4474:7:133977:133991	3053358	0	True				
ANR	3054286	UnaryOperationExpression	! session -> key ( )		3053358	0					
ANR	3054287	UnaryOperator	!		3053358	0					
ANR	3054288	CallExpression	session -> key ( )		3053358	1					
ANR	3054289	Callee	session -> key		3053358	0					
ANR	3054290	PtrMemberAccess	session -> key		3053358	0					
ANR	3054291	Identifier	session		3053358	0					
ANR	3054292	Identifier	key		3053358	1					
ANR	3054293	ArgumentList			3053358	1					
ANR	3054294	CompoundStatement		235:24:6967:6967	3053358	1					
ANR	3054295	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4475:4:134000:134213	3053358	0	True				
ANR	3054296	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		3053358	0					
ANR	3054297	Callee	dprintf		3053358	0					
ANR	3054298	Identifier	dprintf		3053358	0					
ANR	3054299	ArgumentList	D_ALWAYS		3053358	1					
ANR	3054300	Argument	D_ALWAYS		3053358	0					
ANR	3054301	Identifier	D_ALWAYS		3053358	0					
ANR	3054302	Argument	"""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"""		3053358	1					
ANR	3054303	PrimaryExpression	"""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"""		3053358	0					
ANR	3054304	Argument	sess_id		3053358	2					
ANR	3054305	Identifier	sess_id		3053358	0					
ANR	3054306	Argument	sock -> peer_description ( )		3053358	3					
ANR	3054307	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3054308	Callee	sock -> peer_description		3053358	0					
ANR	3054309	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3054310	Identifier	sock		3053358	0					
ANR	3054311	Identifier	peer_description		3053358	1					
ANR	3054312	ArgumentList			3053358	1					
ANR	3054313	Argument	"return_address_ss ? return_address_ss : ""(none)"""		3053358	4					
ANR	3054314	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		3053358	0					
ANR	3054315	Condition	return_address_ss		3053358	0					
ANR	3054316	Identifier	return_address_ss		3053358	0					
ANR	3054317	Identifier	return_address_ss		3053358	1					
ANR	3054318	PrimaryExpression	"""(none)"""		3053358	2					
ANR	3054319	IfStatement	if ( return_address_ss )		3053358	1					
ANR	3054320	Condition	return_address_ss	4477:8:134263:134279	3053358	0	True				
ANR	3054321	Identifier	return_address_ss		3053358	0					
ANR	3054322	CompoundStatement		238:28:7256:7256	3053358	1					
ANR	3054323	ExpressionStatement	free ( return_address_ss )	4478:5:134290:134315	3053358	0	True				
ANR	3054324	CallExpression	free ( return_address_ss )		3053358	0					
ANR	3054325	Callee	free		3053358	0					
ANR	3054326	Identifier	free		3053358	0					
ANR	3054327	ArgumentList	return_address_ss		3053358	1					
ANR	3054328	Argument	return_address_ss		3053358	0					
ANR	3054329	Identifier	return_address_ss		3053358	0					
ANR	3054330	ExpressionStatement	return_address_ss = NULL	4479:5:134322:134346	3053358	1	True				
ANR	3054331	AssignmentExpression	return_address_ss = NULL		3053358	0		=			
ANR	3054332	Identifier	return_address_ss		3053358	0					
ANR	3054333	Identifier	NULL		3053358	1					
ANR	3054334	ExpressionStatement	free ( sess_id )	4481:4:134358:134373	3053358	2	True				
ANR	3054335	CallExpression	free ( sess_id )		3053358	0					
ANR	3054336	Callee	free		3053358	0					
ANR	3054337	Identifier	free		3053358	0					
ANR	3054338	ArgumentList	sess_id		3053358	1					
ANR	3054339	Argument	sess_id		3053358	0					
ANR	3054340	Identifier	sess_id		3053358	0					
ANR	3054341	ExpressionStatement	sess_id = NULL	4482:4:134379:134393	3053358	3	True				
ANR	3054342	AssignmentExpression	sess_id = NULL		3053358	0		=			
ANR	3054343	Identifier	sess_id		3053358	0					
ANR	3054344	Identifier	NULL		3053358	1					
ANR	3054345	ExpressionStatement	result = FALSE	4483:4:134399:134413	3053358	4	True				
ANR	3054346	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3054347	Identifier	result		3053358	0					
ANR	3054348	Identifier	FALSE		3053358	1					
ANR	3054349	GotoStatement	goto finalize ;	4484:4:134419:134432	3053358	5	True				
ANR	3054350	Identifier	finalize		3053358	0					
ANR	3054351	IdentifierDeclStatement	"SecMan :: sec_feat_act will_enable_encryption = sec_man -> sec_lookup_feat_act ( * session -> policy ( ) , ATTR_SEC_ENCRYPTION ) ;"	4496:3:134967:135082	3053358	5	True				
ANR	3054352	IdentifierDecl	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * session -> policy ( ) , ATTR_SEC_ENCRYPTION )"		3053358	0					
ANR	3054353	IdentifierDeclType	SecMan :: sec_feat_act		3053358	0					
ANR	3054354	Identifier	will_enable_encryption		3053358	1					
ANR	3054355	AssignmentExpression	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * session -> policy ( ) , ATTR_SEC_ENCRYPTION )"		3053358	2		=			
ANR	3054356	Identifier	will_enable_encryption		3053358	0					
ANR	3054357	CallExpression	"sec_man -> sec_lookup_feat_act ( * session -> policy ( ) , ATTR_SEC_ENCRYPTION )"		3053358	1					
ANR	3054358	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3054359	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3054360	Identifier	sec_man		3053358	0					
ANR	3054361	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3054362	ArgumentList	* session -> policy ( )		3053358	1					
ANR	3054363	Argument	* session -> policy ( )		3053358	0					
ANR	3054364	UnaryOperationExpression	* session -> policy ( )		3053358	0					
ANR	3054365	UnaryOperator	*		3053358	0					
ANR	3054366	CallExpression	session -> policy ( )		3053358	1					
ANR	3054367	Callee	session -> policy		3053358	0					
ANR	3054368	PtrMemberAccess	session -> policy		3053358	0					
ANR	3054369	Identifier	session		3053358	0					
ANR	3054370	Identifier	policy		3053358	1					
ANR	3054371	ArgumentList			3053358	1					
ANR	3054372	Argument	ATTR_SEC_ENCRYPTION		3053358	1					
ANR	3054373	Identifier	ATTR_SEC_ENCRYPTION		3053358	0					
ANR	3054374	IdentifierDeclStatement	bool turn_encryption_on = will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES ;	4497:3:135087:135163	3053358	6	True				
ANR	3054375	IdentifierDecl	turn_encryption_on = will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES		3053358	0					
ANR	3054376	IdentifierDeclType	bool		3053358	0					
ANR	3054377	Identifier	turn_encryption_on		3053358	1					
ANR	3054378	AssignmentExpression	turn_encryption_on = will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES		3053358	2		=			
ANR	3054379	Identifier	turn_encryption_on		3053358	0					
ANR	3054380	EqualityExpression	will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES		3053358	1		==			
ANR	3054381	Identifier	will_enable_encryption		3053358	0					
ANR	3054382	Identifier	SecMan :: SEC_FEAT_ACT_YES		3053358	1					
ANR	3054383	IfStatement	"if ( ! sock -> set_crypto_key ( turn_encryption_on , session -> key ( ) ) )"		3053358	7					
ANR	3054384	Condition	"! sock -> set_crypto_key ( turn_encryption_on , session -> key ( ) )"	4499:7:135173:135229	3053358	0	True				
ANR	3054385	UnaryOperationExpression	"! sock -> set_crypto_key ( turn_encryption_on , session -> key ( ) )"		3053358	0					
ANR	3054386	UnaryOperator	!		3053358	0					
ANR	3054387	CallExpression	"sock -> set_crypto_key ( turn_encryption_on , session -> key ( ) )"		3053358	1					
ANR	3054388	Callee	sock -> set_crypto_key		3053358	0					
ANR	3054389	PtrMemberAccess	sock -> set_crypto_key		3053358	0					
ANR	3054390	Identifier	sock		3053358	0					
ANR	3054391	Identifier	set_crypto_key		3053358	1					
ANR	3054392	ArgumentList	turn_encryption_on		3053358	1					
ANR	3054393	Argument	turn_encryption_on		3053358	0					
ANR	3054394	Identifier	turn_encryption_on		3053358	0					
ANR	3054395	Argument	session -> key ( )		3053358	1					
ANR	3054396	CallExpression	session -> key ( )		3053358	0					
ANR	3054397	Callee	session -> key		3053358	0					
ANR	3054398	PtrMemberAccess	session -> key		3053358	0					
ANR	3054399	Identifier	session		3053358	0					
ANR	3054400	Identifier	key		3053358	1					
ANR	3054401	ArgumentList			3053358	1					
ANR	3054402	CompoundStatement		260:66:8205:8205	3053358	1					
ANR	3054403	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on encryption for session %s, failing; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4500:4:135238:135472	3053358	0	True				
ANR	3054404	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on encryption for session %s, failing; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		3053358	0					
ANR	3054405	Callee	dprintf		3053358	0					
ANR	3054406	Identifier	dprintf		3053358	0					
ANR	3054407	ArgumentList	D_ALWAYS		3053358	1					
ANR	3054408	Argument	D_ALWAYS		3053358	0					
ANR	3054409	Identifier	D_ALWAYS		3053358	0					
ANR	3054410	Argument	"""DC_AUTHENTICATE: unable to turn on encryption for session %s, failing; this session was requested by %s with return address %s\\n"""		3053358	1					
ANR	3054411	PrimaryExpression	"""DC_AUTHENTICATE: unable to turn on encryption for session %s, failing; this session was requested by %s with return address %s\\n"""		3053358	0					
ANR	3054412	Argument	sess_id		3053358	2					
ANR	3054413	Identifier	sess_id		3053358	0					
ANR	3054414	Argument	sock -> peer_description ( )		3053358	3					
ANR	3054415	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3054416	Callee	sock -> peer_description		3053358	0					
ANR	3054417	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3054418	Identifier	sock		3053358	0					
ANR	3054419	Identifier	peer_description		3053358	1					
ANR	3054420	ArgumentList			3053358	1					
ANR	3054421	Argument	"return_address_ss ? return_address_ss : ""(none)"""		3053358	4					
ANR	3054422	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		3053358	0					
ANR	3054423	Condition	return_address_ss		3053358	0					
ANR	3054424	Identifier	return_address_ss		3053358	0					
ANR	3054425	Identifier	return_address_ss		3053358	1					
ANR	3054426	PrimaryExpression	"""(none)"""		3053358	2					
ANR	3054427	IfStatement	if ( return_address_ss )		3053358	1					
ANR	3054428	Condition	return_address_ss	4501:8:135482:135498	3053358	0	True				
ANR	3054429	Identifier	return_address_ss		3053358	0					
ANR	3054430	CompoundStatement		262:28:8475:8475	3053358	1					
ANR	3054431	ExpressionStatement	free ( return_address_ss )	4502:5:135509:135534	3053358	0	True				
ANR	3054432	CallExpression	free ( return_address_ss )		3053358	0					
ANR	3054433	Callee	free		3053358	0					
ANR	3054434	Identifier	free		3053358	0					
ANR	3054435	ArgumentList	return_address_ss		3053358	1					
ANR	3054436	Argument	return_address_ss		3053358	0					
ANR	3054437	Identifier	return_address_ss		3053358	0					
ANR	3054438	ExpressionStatement	return_address_ss = NULL	4503:5:135541:135565	3053358	1	True				
ANR	3054439	AssignmentExpression	return_address_ss = NULL		3053358	0		=			
ANR	3054440	Identifier	return_address_ss		3053358	0					
ANR	3054441	Identifier	NULL		3053358	1					
ANR	3054442	ExpressionStatement	free ( sess_id )	4505:4:135577:135592	3053358	2	True				
ANR	3054443	CallExpression	free ( sess_id )		3053358	0					
ANR	3054444	Callee	free		3053358	0					
ANR	3054445	Identifier	free		3053358	0					
ANR	3054446	ArgumentList	sess_id		3053358	1					
ANR	3054447	Argument	sess_id		3053358	0					
ANR	3054448	Identifier	sess_id		3053358	0					
ANR	3054449	ExpressionStatement	sess_id = NULL	4506:4:135598:135612	3053358	3	True				
ANR	3054450	AssignmentExpression	sess_id = NULL		3053358	0		=			
ANR	3054451	Identifier	sess_id		3053358	0					
ANR	3054452	Identifier	NULL		3053358	1					
ANR	3054453	ExpressionStatement	result = FALSE	4507:4:135618:135632	3053358	4	True				
ANR	3054454	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3054455	Identifier	result		3053358	0					
ANR	3054456	Identifier	FALSE		3053358	1					
ANR	3054457	GotoStatement	goto finalize ;	4508:4:135638:135651	3053358	5	True				
ANR	3054458	Identifier	finalize		3053358	0					
ANR	3054459	ElseStatement	else		3053358	0					
ANR	3054460	CompoundStatement		270:10:8636:8636	3053358	0					
ANR	3054461	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled with key id %s%s.\\n"" , sess_id , turn_encryption_on ? """" : "" (but encryption mode is off by default for this packet)"" )"	4510:4:135669:135858	3053358	0	True				
ANR	3054462	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled with key id %s%s.\\n"" , sess_id , turn_encryption_on ? """" : "" (but encryption mode is off by default for this packet)"" )"		3053358	0					
ANR	3054463	Callee	dprintf		3053358	0					
ANR	3054464	Identifier	dprintf		3053358	0					
ANR	3054465	ArgumentList	D_SECURITY		3053358	1					
ANR	3054466	Argument	D_SECURITY		3053358	0					
ANR	3054467	Identifier	D_SECURITY		3053358	0					
ANR	3054468	Argument	"""DC_AUTHENTICATE: encryption enabled with key id %s%s.\\n"""		3053358	1					
ANR	3054469	PrimaryExpression	"""DC_AUTHENTICATE: encryption enabled with key id %s%s.\\n"""		3053358	0					
ANR	3054470	Argument	sess_id		3053358	2					
ANR	3054471	Identifier	sess_id		3053358	0					
ANR	3054472	Argument	"turn_encryption_on ? """" : "" (but encryption mode is off by default for this packet)"""		3053358	3					
ANR	3054473	ConditionalExpression	"turn_encryption_on ? """" : "" (but encryption mode is off by default for this packet)"""		3053358	0					
ANR	3054474	Condition	turn_encryption_on		3053358	0					
ANR	3054475	Identifier	turn_encryption_on		3053358	0					
ANR	3054476	PrimaryExpression	""""""		3053358	1					
ANR	3054477	PrimaryExpression	""" (but encryption mode is off by default for this packet)"""		3053358	2					
ANR	3054478	ExpressionStatement	"sec_man -> key_printf ( D_SECURITY , session -> key ( ) )"	4514:4:135864:135912	3053358	1	True				
ANR	3054479	CallExpression	"sec_man -> key_printf ( D_SECURITY , session -> key ( ) )"		3053358	0					
ANR	3054480	Callee	sec_man -> key_printf		3053358	0					
ANR	3054481	PtrMemberAccess	sec_man -> key_printf		3053358	0					
ANR	3054482	Identifier	sec_man		3053358	0					
ANR	3054483	Identifier	key_printf		3053358	1					
ANR	3054484	ArgumentList	D_SECURITY		3053358	1					
ANR	3054485	Argument	D_SECURITY		3053358	0					
ANR	3054486	Identifier	D_SECURITY		3053358	0					
ANR	3054487	Argument	session -> key ( )		3053358	1					
ANR	3054488	CallExpression	session -> key ( )		3053358	0					
ANR	3054489	Callee	session -> key		3053358	0					
ANR	3054490	PtrMemberAccess	session -> key		3053358	0					
ANR	3054491	Identifier	session		3053358	0					
ANR	3054492	Identifier	key		3053358	1					
ANR	3054493	ArgumentList			3053358	1					
ANR	3054494	IfStatement	if ( who == NULL )		3053358	8					
ANR	3054495	Condition	who == NULL	4517:16:135975:135985	3053358	0	True				
ANR	3054496	EqualityExpression	who == NULL		3053358	0		==			
ANR	3054497	Identifier	who		3053358	0					
ANR	3054498	Identifier	NULL		3053358	1					
ANR	3054499	CompoundStatement		278:29:8961:8961	3053358	1					
ANR	3054500	ExpressionStatement	"session -> policy ( ) -> LookupString ( ATTR_SEC_USER , & who )"	4518:16:136006:136058	3053358	0	True				
ANR	3054501	CallExpression	"session -> policy ( ) -> LookupString ( ATTR_SEC_USER , & who )"		3053358	0					
ANR	3054502	Callee	session -> policy ( ) -> LookupString		3053358	0					
ANR	3054503	PtrMemberAccess	session -> policy ( ) -> LookupString		3053358	0					
ANR	3054504	CallExpression	session -> policy ( )		3053358	0					
ANR	3054505	Callee	session -> policy		3053358	0					
ANR	3054506	PtrMemberAccess	session -> policy		3053358	0					
ANR	3054507	Identifier	session		3053358	0					
ANR	3054508	Identifier	policy		3053358	1					
ANR	3054509	ArgumentList			3053358	1					
ANR	3054510	Identifier	LookupString		3053358	1					
ANR	3054511	ArgumentList	ATTR_SEC_USER		3053358	1					
ANR	3054512	Argument	ATTR_SEC_USER		3053358	0					
ANR	3054513	Identifier	ATTR_SEC_USER		3053358	0					
ANR	3054514	Argument	& who		3053358	1					
ANR	3054515	UnaryOperationExpression	& who		3053358	0					
ANR	3054516	UnaryOperator	&		3053358	0					
ANR	3054517	Identifier	who		3053358	1					
ANR	3054518	IdentifierDeclStatement	bool tried_authentication = false ;	4520:3:136077:136110	3053358	9	True				
ANR	3054519	IdentifierDecl	tried_authentication = false		3053358	0					
ANR	3054520	IdentifierDeclType	bool		3053358	0					
ANR	3054521	Identifier	tried_authentication		3053358	1					
ANR	3054522	AssignmentExpression	tried_authentication = false		3053358	2		=			
ANR	3054523	Identifier	false		3053358	0					
ANR	3054524	Identifier	false		3053358	1					
ANR	3054525	ExpressionStatement	"session -> policy ( ) -> LookupBool ( ATTR_SEC_TRIED_AUTHENTICATION , tried_authentication )"	4521:3:136115:136196	3053358	10	True				
ANR	3054526	CallExpression	"session -> policy ( ) -> LookupBool ( ATTR_SEC_TRIED_AUTHENTICATION , tried_authentication )"		3053358	0					
ANR	3054527	Callee	session -> policy ( ) -> LookupBool		3053358	0					
ANR	3054528	PtrMemberAccess	session -> policy ( ) -> LookupBool		3053358	0					
ANR	3054529	CallExpression	session -> policy ( )		3053358	0					
ANR	3054530	Callee	session -> policy		3053358	0					
ANR	3054531	PtrMemberAccess	session -> policy		3053358	0					
ANR	3054532	Identifier	session		3053358	0					
ANR	3054533	Identifier	policy		3053358	1					
ANR	3054534	ArgumentList			3053358	1					
ANR	3054535	Identifier	LookupBool		3053358	1					
ANR	3054536	ArgumentList	ATTR_SEC_TRIED_AUTHENTICATION		3053358	1					
ANR	3054537	Argument	ATTR_SEC_TRIED_AUTHENTICATION		3053358	0					
ANR	3054538	Identifier	ATTR_SEC_TRIED_AUTHENTICATION		3053358	0					
ANR	3054539	Argument	tried_authentication		3053358	1					
ANR	3054540	Identifier	tried_authentication		3053358	0					
ANR	3054541	ExpressionStatement	sock -> setTriedAuthentication ( tried_authentication )	4522:3:136201:136251	3053358	11	True				
ANR	3054542	CallExpression	sock -> setTriedAuthentication ( tried_authentication )		3053358	0					
ANR	3054543	Callee	sock -> setTriedAuthentication		3053358	0					
ANR	3054544	PtrMemberAccess	sock -> setTriedAuthentication		3053358	0					
ANR	3054545	Identifier	sock		3053358	0					
ANR	3054546	Identifier	setTriedAuthentication		3053358	1					
ANR	3054547	ArgumentList	tried_authentication		3053358	1					
ANR	3054548	Argument	tried_authentication		3053358	0					
ANR	3054549	Identifier	tried_authentication		3053358	0					
ANR	3054550	ExpressionStatement	free ( sess_id )	4524:3:136257:136272	3053358	12	True				
ANR	3054551	CallExpression	free ( sess_id )		3053358	0					
ANR	3054552	Callee	free		3053358	0					
ANR	3054553	Identifier	free		3053358	0					
ANR	3054554	ArgumentList	sess_id		3053358	1					
ANR	3054555	Argument	sess_id		3053358	0					
ANR	3054556	Identifier	sess_id		3053358	0					
ANR	3054557	IfStatement	if ( return_address_ss )		3053358	13					
ANR	3054558	Condition	return_address_ss	4525:7:136281:136297	3053358	0	True				
ANR	3054559	Identifier	return_address_ss		3053358	0					
ANR	3054560	CompoundStatement		286:26:9273:9273	3053358	1					
ANR	3054561	ExpressionStatement	free ( return_address_ss )	4526:4:136306:136331	3053358	0	True				
ANR	3054562	CallExpression	free ( return_address_ss )		3053358	0					
ANR	3054563	Callee	free		3053358	0					
ANR	3054564	Identifier	free		3053358	0					
ANR	3054565	ArgumentList	return_address_ss		3053358	1					
ANR	3054566	Argument	return_address_ss		3053358	0					
ANR	3054567	Identifier	return_address_ss		3053358	0					
ANR	3054568	IfStatement	if ( who != NULL )		3053358	12					
ANR	3054569	Condition	who != NULL	4530:12:136355:136365	3053358	0	True				
ANR	3054570	EqualityExpression	who != NULL		3053358	0		!=			
ANR	3054571	Identifier	who		3053358	0					
ANR	3054572	Identifier	NULL		3053358	1					
ANR	3054573	CompoundStatement		291:25:9341:9341	3053358	1					
ANR	3054574	ExpressionStatement	sock -> setFullyQualifiedUser ( who )	4531:12:136382:136414	3053358	0	True				
ANR	3054575	CallExpression	sock -> setFullyQualifiedUser ( who )		3053358	0					
ANR	3054576	Callee	sock -> setFullyQualifiedUser		3053358	0					
ANR	3054577	PtrMemberAccess	sock -> setFullyQualifiedUser		3053358	0					
ANR	3054578	Identifier	sock		3053358	0					
ANR	3054579	Identifier	setFullyQualifiedUser		3053358	1					
ANR	3054580	ArgumentList	who		3053358	1					
ANR	3054581	Argument	who		3053358	0					
ANR	3054582	Identifier	who		3053358	0					
ANR	3054583	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: UDP message is from %s.\\n"" , who )"	4532:3:136419:136490	3053358	1	True				
ANR	3054584	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: UDP message is from %s.\\n"" , who )"		3053358	0					
ANR	3054585	Callee	dprintf		3053358	0					
ANR	3054586	Identifier	dprintf		3053358	0					
ANR	3054587	ArgumentList	D_SECURITY		3053358	1					
ANR	3054588	Argument	D_SECURITY		3053358	0					
ANR	3054589	Identifier	D_SECURITY		3053358	0					
ANR	3054590	Argument	"""DC_AUTHENTICATE: UDP message is from %s.\\n"""		3053358	1					
ANR	3054591	PrimaryExpression	"""DC_AUTHENTICATE: UDP message is from %s.\\n"""		3053358	0					
ANR	3054592	Argument	who		3053358	2					
ANR	3054593	Identifier	who		3053358	0					
ANR	3054594	ExpressionStatement	sock -> decode ( )	4537:1:136508:136522	3053358	20	True				
ANR	3054595	CallExpression	sock -> decode ( )		3053358	0					
ANR	3054596	Callee	sock -> decode		3053358	0					
ANR	3054597	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3054598	Identifier	sock		3053358	0					
ANR	3054599	Identifier	decode		3053358	1					
ANR	3054600	ArgumentList			3053358	1					
ANR	3054601	IdentifierDeclStatement	char tmpbuf [ 5 ] ;	4545:1:136916:136930	3053358	21	True				
ANR	3054602	IdentifierDecl	tmpbuf [ 5 ]		3053358	0					
ANR	3054603	IdentifierDeclType	char [ 5 ]		3053358	0					
ANR	3054604	Identifier	tmpbuf		3053358	1					
ANR	3054605	PrimaryExpression	5		3053358	2					
ANR	3054606	ExpressionStatement	"memset ( tmpbuf , 0 , sizeof ( tmpbuf ) )"	4546:1:136933:136964	3053358	22	True				
ANR	3054607	CallExpression	"memset ( tmpbuf , 0 , sizeof ( tmpbuf ) )"		3053358	0					
ANR	3054608	Callee	memset		3053358	0					
ANR	3054609	Identifier	memset		3053358	0					
ANR	3054610	ArgumentList	tmpbuf		3053358	1					
ANR	3054611	Argument	tmpbuf		3053358	0					
ANR	3054612	Identifier	tmpbuf		3053358	0					
ANR	3054613	Argument	0		3053358	1					
ANR	3054614	PrimaryExpression	0		3053358	0					
ANR	3054615	Argument	sizeof ( tmpbuf )		3053358	2					
ANR	3054616	SizeofExpression	sizeof ( tmpbuf )		3053358	0					
ANR	3054617	Sizeof	sizeof		3053358	0					
ANR	3054618	SizeofOperand	tmpbuf		3053358	1					
ANR	3054619	IfStatement	if ( is_tcp )		3053358	23					
ANR	3054620	Condition	is_tcp	4547:6:136972:136977	3053358	0	True				
ANR	3054621	Identifier	is_tcp		3053358	0					
ANR	3054622	CompoundStatement		308:15:9954:9954	3053358	1					
ANR	3054623	ExpressionStatement	"condor_read ( sock -> peer_description ( ) , sock -> get_file_desc ( ) , tmpbuf , sizeof ( tmpbuf ) - 1 , 1 , MSG_PEEK )"	4549:2:137051:137155	3053358	0	True				
ANR	3054624	CallExpression	"condor_read ( sock -> peer_description ( ) , sock -> get_file_desc ( ) , tmpbuf , sizeof ( tmpbuf ) - 1 , 1 , MSG_PEEK )"		3053358	0					
ANR	3054625	Callee	condor_read		3053358	0					
ANR	3054626	Identifier	condor_read		3053358	0					
ANR	3054627	ArgumentList	sock -> peer_description ( )		3053358	1					
ANR	3054628	Argument	sock -> peer_description ( )		3053358	0					
ANR	3054629	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3054630	Callee	sock -> peer_description		3053358	0					
ANR	3054631	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3054632	Identifier	sock		3053358	0					
ANR	3054633	Identifier	peer_description		3053358	1					
ANR	3054634	ArgumentList			3053358	1					
ANR	3054635	Argument	sock -> get_file_desc ( )		3053358	1					
ANR	3054636	CallExpression	sock -> get_file_desc ( )		3053358	0					
ANR	3054637	Callee	sock -> get_file_desc		3053358	0					
ANR	3054638	PtrMemberAccess	sock -> get_file_desc		3053358	0					
ANR	3054639	Identifier	sock		3053358	0					
ANR	3054640	Identifier	get_file_desc		3053358	1					
ANR	3054641	ArgumentList			3053358	1					
ANR	3054642	Argument	tmpbuf		3053358	2					
ANR	3054643	Identifier	tmpbuf		3053358	0					
ANR	3054644	Argument	sizeof ( tmpbuf ) - 1		3053358	3					
ANR	3054645	AdditiveExpression	sizeof ( tmpbuf ) - 1		3053358	0		-			
ANR	3054646	SizeofExpression	sizeof ( tmpbuf )		3053358	0					
ANR	3054647	Sizeof	sizeof		3053358	0					
ANR	3054648	SizeofOperand	tmpbuf		3053358	1					
ANR	3054649	PrimaryExpression	1		3053358	1					
ANR	3054650	Argument	1		3053358	4					
ANR	3054651	PrimaryExpression	1		3053358	0					
ANR	3054652	Argument	MSG_PEEK		3053358	5					
ANR	3054653	Identifier	MSG_PEEK		3053358	0					
ANR	3054654	IfStatement	"if ( strstr ( tmpbuf , ""GET"" ) )"		3053358	24					
ANR	3054655	Condition	"strstr ( tmpbuf , ""GET"" )"	4553:6:137188:137207	3053358	0	True				
ANR	3054656	CallExpression	"strstr ( tmpbuf , ""GET"" )"		3053358	0					
ANR	3054657	Callee	strstr		3053358	0					
ANR	3054658	Identifier	strstr		3053358	0					
ANR	3054659	ArgumentList	tmpbuf		3053358	1					
ANR	3054660	Argument	tmpbuf		3053358	0					
ANR	3054661	Identifier	tmpbuf		3053358	0					
ANR	3054662	Argument	"""GET"""		3053358	1					
ANR	3054663	PrimaryExpression	"""GET"""		3053358	0					
ANR	3054664	CompoundStatement		314:29:10184:10184	3053358	1					
ANR	3054665	IfStatement	"if ( param_boolean ( ""ENABLE_WEB_SERVER"" , false ) )"		3053358	0					
ANR	3054666	Condition	"param_boolean ( ""ENABLE_WEB_SERVER"" , false )"	4554:7:137220:137259	3053358	0	True				
ANR	3054667	CallExpression	"param_boolean ( ""ENABLE_WEB_SERVER"" , false )"		3053358	0					
ANR	3054668	Callee	param_boolean		3053358	0					
ANR	3054669	Identifier	param_boolean		3053358	0					
ANR	3054670	ArgumentList	"""ENABLE_WEB_SERVER"""		3053358	1					
ANR	3054671	Argument	"""ENABLE_WEB_SERVER"""		3053358	0					
ANR	3054672	PrimaryExpression	"""ENABLE_WEB_SERVER"""		3053358	0					
ANR	3054673	Argument	false		3053358	1					
ANR	3054674	Identifier	false		3053358	0					
ANR	3054675	CompoundStatement		315:50:10236:10236	3053358	1					
ANR	3054676	IfStatement	"if ( Verify ( ""HTTP GET"" , READ , sock -> peer_addr ( ) , NULL ) )"		3053358	0					
ANR	3054677	Condition	"Verify ( ""HTTP GET"" , READ , sock -> peer_addr ( ) , NULL )"	4556:8:137324:137370	3053358	0	True				
ANR	3054678	CallExpression	"Verify ( ""HTTP GET"" , READ , sock -> peer_addr ( ) , NULL )"		3053358	0					
ANR	3054679	Callee	Verify		3053358	0					
ANR	3054680	Identifier	Verify		3053358	0					
ANR	3054681	ArgumentList	"""HTTP GET"""		3053358	1					
ANR	3054682	Argument	"""HTTP GET"""		3053358	0					
ANR	3054683	PrimaryExpression	"""HTTP GET"""		3053358	0					
ANR	3054684	Argument	READ		3053358	1					
ANR	3054685	Identifier	READ		3053358	0					
ANR	3054686	Argument	sock -> peer_addr ( )		3053358	2					
ANR	3054687	CallExpression	sock -> peer_addr ( )		3053358	0					
ANR	3054688	Callee	sock -> peer_addr		3053358	0					
ANR	3054689	PtrMemberAccess	sock -> peer_addr		3053358	0					
ANR	3054690	Identifier	sock		3053358	0					
ANR	3054691	Identifier	peer_addr		3053358	1					
ANR	3054692	ArgumentList			3053358	1					
ANR	3054693	Argument	NULL		3053358	3					
ANR	3054694	Identifier	NULL		3053358	0					
ANR	3054695	CompoundStatement		317:58:10347:10347	3053358	1					
ANR	3054696	ExpressionStatement	is_http_get = true	4557:4:137380:137398	3053358	0	True				
ANR	3054697	AssignmentExpression	is_http_get = true		3053358	0		=			
ANR	3054698	Identifier	is_http_get		3053358	0					
ANR	3054699	Identifier	true		3053358	1					
ANR	3054700	ElseStatement	else		3053358	0					
ANR	3054701	CompoundStatement		320:9:10387:10387	3053358	0					
ANR	3054702	Statement	dprintf	4560:3:137419:137425	3053358	0	True				
ANR	3054703	Statement	(	4560:10:137426:137426	3053358	1	True				
ANR	3054704	Statement	D_ALWAYS	4560:11:137427:137434	3053358	2	True				
ANR	3054705	Statement	","	4560:19:137435:137435	3053358	3	True				
ANR	3054706	Statement	"""Received HTTP GET connection from %s -- """	4560:20:137436:137477	3053358	4	True				
ANR	3054707	Statement	"""DENIED because ENABLE_WEB_SERVER=FALSE\\n"""	4561:17:137496:137537	3053358	5	True				
ANR	3054708	Statement	","	4561:59:137538:137538	3053358	6	True				
ANR	3054709	Statement	sock	4562:8:137548:137551	3053358	7	True				
ANR	3054710	Statement	->	4562:12:137552:137553	3053358	8	True				
ANR	3054711	Statement	peer_description	4562:14:137554:137569	3053358	9	True				
ANR	3054712	Statement	(	4562:30:137570:137570	3053358	10	True				
ANR	3054713	Statement	)	4562:31:137571:137571	3053358	11	True				
ANR	3054714	Statement	)	4562:32:137572:137572	3053358	12	True				
ANR	3054715	ExpressionStatement		4562:33:137573:137573	3053358	13	True				
ANR	3054716	ElseStatement	else		3053358	0					
ANR	3054717	CompoundStatement		325:8:10560:10560	3053358	0					
ANR	3054718	IfStatement	"if ( strstr ( tmpbuf , ""POST"" ) )"		3053358	0					
ANR	3054719	Condition	"strstr ( tmpbuf , ""POST"" )"	4565:7:137596:137616	3053358	0	True				
ANR	3054720	CallExpression	"strstr ( tmpbuf , ""POST"" )"		3053358	0					
ANR	3054721	Callee	strstr		3053358	0					
ANR	3054722	Identifier	strstr		3053358	0					
ANR	3054723	ArgumentList	tmpbuf		3053358	1					
ANR	3054724	Argument	tmpbuf		3053358	0					
ANR	3054725	Identifier	tmpbuf		3053358	0					
ANR	3054726	Argument	"""POST"""		3053358	1					
ANR	3054727	PrimaryExpression	"""POST"""		3053358	0					
ANR	3054728	CompoundStatement		326:31:10593:10593	3053358	1					
ANR	3054729	IfStatement	"if ( param_boolean ( ""ENABLE_SOAP"" , false ) )"		3053358	0					
ANR	3054730	Condition	"param_boolean ( ""ENABLE_SOAP"" , false )"	4566:8:137630:137663	3053358	0	True				
ANR	3054731	CallExpression	"param_boolean ( ""ENABLE_SOAP"" , false )"		3053358	0					
ANR	3054732	Callee	param_boolean		3053358	0					
ANR	3054733	Identifier	param_boolean		3053358	0					
ANR	3054734	ArgumentList	"""ENABLE_SOAP"""		3053358	1					
ANR	3054735	Argument	"""ENABLE_SOAP"""		3053358	0					
ANR	3054736	PrimaryExpression	"""ENABLE_SOAP"""		3053358	0					
ANR	3054737	Argument	false		3053358	1					
ANR	3054738	Identifier	false		3053358	0					
ANR	3054739	CompoundStatement		327:45:10640:10640	3053358	1					
ANR	3054740	IfStatement	"if ( Verify ( ""HTTP POST"" , SOAP_PERM , sock -> peer_addr ( ) , NULL ) )"		3053358	0					
ANR	3054741	Condition	"Verify ( ""HTTP POST"" , SOAP_PERM , sock -> peer_addr ( ) , NULL )"	4568:9:137719:137770	3053358	0	True				
ANR	3054742	CallExpression	"Verify ( ""HTTP POST"" , SOAP_PERM , sock -> peer_addr ( ) , NULL )"		3053358	0					
ANR	3054743	Callee	Verify		3053358	0					
ANR	3054744	Identifier	Verify		3053358	0					
ANR	3054745	ArgumentList	"""HTTP POST"""		3053358	1					
ANR	3054746	Argument	"""HTTP POST"""		3053358	0					
ANR	3054747	PrimaryExpression	"""HTTP POST"""		3053358	0					
ANR	3054748	Argument	SOAP_PERM		3053358	1					
ANR	3054749	Identifier	SOAP_PERM		3053358	0					
ANR	3054750	Argument	sock -> peer_addr ( )		3053358	2					
ANR	3054751	CallExpression	sock -> peer_addr ( )		3053358	0					
ANR	3054752	Callee	sock -> peer_addr		3053358	0					
ANR	3054753	PtrMemberAccess	sock -> peer_addr		3053358	0					
ANR	3054754	Identifier	sock		3053358	0					
ANR	3054755	Identifier	peer_addr		3053358	1					
ANR	3054756	ArgumentList			3053358	1					
ANR	3054757	Argument	NULL		3053358	3					
ANR	3054758	Identifier	NULL		3053358	0					
ANR	3054759	CompoundStatement		329:64:10747:10747	3053358	1					
ANR	3054760	ExpressionStatement	is_http_post = true	4569:5:137781:137800	3053358	0	True				
ANR	3054761	AssignmentExpression	is_http_post = true		3053358	0		=			
ANR	3054762	Identifier	is_http_post		3053358	0					
ANR	3054763	Identifier	true		3053358	1					
ANR	3054764	ElseStatement	else		3053358	0					
ANR	3054765	CompoundStatement		332:10:10791:10791	3053358	0					
ANR	3054766	Statement	dprintf	4572:4:137824:137830	3053358	0	True				
ANR	3054767	Statement	(	4572:11:137831:137831	3053358	1	True				
ANR	3054768	Statement	D_ALWAYS	4572:12:137832:137839	3053358	2	True				
ANR	3054769	Statement	","	4572:20:137840:137840	3053358	3	True				
ANR	3054770	Statement	"""Received HTTP POST connection from %s -- """	4572:21:137841:137883	3053358	4	True				
ANR	3054771	Statement	"""DENIED because ENABLE_SOAP=FALSE\\n"""	4573:8:137893:137928	3053358	5	True				
ANR	3054772	Statement	","	4573:44:137929:137929	3053358	6	True				
ANR	3054773	Statement	sock	4574:8:137939:137942	3053358	7	True				
ANR	3054774	Statement	->	4574:12:137943:137944	3053358	8	True				
ANR	3054775	Statement	peer_description	4574:14:137945:137960	3053358	9	True				
ANR	3054776	Statement	(	4574:30:137961:137961	3053358	10	True				
ANR	3054777	Statement	)	4574:31:137962:137962	3053358	11	True				
ANR	3054778	Statement	)	4574:32:137963:137963	3053358	12	True				
ANR	3054779	ExpressionStatement		4574:33:137964:137964	3053358	13	True				
ANR	3054780	IfStatement	if ( is_http_post || is_http_get )		3053358	25					
ANR	3054781	Condition	is_http_post || is_http_get	4578:6:137984:138010	3053358	0	True				
ANR	3054782	OrExpression	is_http_post || is_http_get		3053358	0		||			
ANR	3054783	Identifier	is_http_post		3053358	0					
ANR	3054784	Identifier	is_http_get		3053358	1					
ANR	3054785	CompoundStatement		341:2:10992:11012	3053358	1					
ANR	3054786	IdentifierDeclStatement	struct soap * cursoap ;	4580:2:138019:138039	3053358	0	True				
ANR	3054787	IdentifierDecl	* cursoap		3053358	0					
ANR	3054788	IdentifierDeclType	struct soap *		3053358	0					
ANR	3054789	Identifier	cursoap		3053358	1					
ANR	3054790	ExpressionStatement	"dprintf ( D_ALWAYS , ""Received HTTP %s connection from %s\\n"" , is_http_get ? ""GET"" : ""POST"" , sock -> peer_description ( ) )"	4583:2:138094:138215	3053358	1	True				
ANR	3054791	CallExpression	"dprintf ( D_ALWAYS , ""Received HTTP %s connection from %s\\n"" , is_http_get ? ""GET"" : ""POST"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3054792	Callee	dprintf		3053358	0					
ANR	3054793	Identifier	dprintf		3053358	0					
ANR	3054794	ArgumentList	D_ALWAYS		3053358	1					
ANR	3054795	Argument	D_ALWAYS		3053358	0					
ANR	3054796	Identifier	D_ALWAYS		3053358	0					
ANR	3054797	Argument	"""Received HTTP %s connection from %s\\n"""		3053358	1					
ANR	3054798	PrimaryExpression	"""Received HTTP %s connection from %s\\n"""		3053358	0					
ANR	3054799	Argument	"is_http_get ? ""GET"" : ""POST"""		3053358	2					
ANR	3054800	ConditionalExpression	"is_http_get ? ""GET"" : ""POST"""		3053358	0					
ANR	3054801	Condition	is_http_get		3053358	0					
ANR	3054802	Identifier	is_http_get		3053358	0					
ANR	3054803	PrimaryExpression	"""GET"""		3053358	1					
ANR	3054804	PrimaryExpression	"""POST"""		3053358	2					
ANR	3054805	Argument	sock -> peer_description ( )		3053358	3					
ANR	3054806	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3054807	Callee	sock -> peer_description		3053358	0					
ANR	3054808	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3054809	Identifier	sock		3053358	0					
ANR	3054810	Identifier	peer_description		3053358	1					
ANR	3054811	ArgumentList			3053358	1					
ANR	3054812	ExpressionStatement	ASSERT ( soap )	4588:2:138221:138235	3053358	2	True				
ANR	3054813	CallExpression	ASSERT ( soap )		3053358	0					
ANR	3054814	Callee	ASSERT		3053358	0					
ANR	3054815	Identifier	ASSERT		3053358	0					
ANR	3054816	ArgumentList	soap		3053358	1					
ANR	3054817	Argument	soap		3053358	0					
ANR	3054818	Identifier	soap		3053358	0					
ANR	3054819	ExpressionStatement	"cursoap = dc_soap_accept ( sock , soap )"	4589:2:138239:138275	3053358	3	True				
ANR	3054820	AssignmentExpression	"cursoap = dc_soap_accept ( sock , soap )"		3053358	0		=			
ANR	3054821	Identifier	cursoap		3053358	0					
ANR	3054822	CallExpression	"dc_soap_accept ( sock , soap )"		3053358	1					
ANR	3054823	Callee	dc_soap_accept		3053358	0					
ANR	3054824	Identifier	dc_soap_accept		3053358	0					
ANR	3054825	ArgumentList	sock		3053358	1					
ANR	3054826	Argument	sock		3053358	0					
ANR	3054827	Identifier	sock		3053358	0					
ANR	3054828	Argument	soap		3053358	1					
ANR	3054829	Identifier	soap		3053358	0					
ANR	3054830	ExpressionStatement	"dprintf ( D_ALWAYS , ""About to serve HTTP request...\\n"" )"	4592:2:138336:138388	3053358	4	True				
ANR	3054831	CallExpression	"dprintf ( D_ALWAYS , ""About to serve HTTP request...\\n"" )"		3053358	0					
ANR	3054832	Callee	dprintf		3053358	0					
ANR	3054833	Identifier	dprintf		3053358	0					
ANR	3054834	ArgumentList	D_ALWAYS		3053358	1					
ANR	3054835	Argument	D_ALWAYS		3053358	0					
ANR	3054836	Identifier	D_ALWAYS		3053358	0					
ANR	3054837	Argument	"""About to serve HTTP request...\\n"""		3053358	1					
ANR	3054838	PrimaryExpression	"""About to serve HTTP request...\\n"""		3053358	0					
ANR	3054839	ExpressionStatement	dc_soap_serve ( cursoap )	4593:2:138392:138414	3053358	5	True				
ANR	3054840	CallExpression	dc_soap_serve ( cursoap )		3053358	0					
ANR	3054841	Callee	dc_soap_serve		3053358	0					
ANR	3054842	Identifier	dc_soap_serve		3053358	0					
ANR	3054843	ArgumentList	cursoap		3053358	1					
ANR	3054844	Argument	cursoap		3053358	0					
ANR	3054845	Identifier	cursoap		3053358	0					
ANR	3054846	ExpressionStatement	dc_soap_free ( cursoap )	4594:2:138418:138439	3053358	6	True				
ANR	3054847	CallExpression	dc_soap_free ( cursoap )		3053358	0					
ANR	3054848	Callee	dc_soap_free		3053358	0					
ANR	3054849	Identifier	dc_soap_free		3053358	0					
ANR	3054850	ArgumentList	cursoap		3053358	1					
ANR	3054851	Argument	cursoap		3053358	0					
ANR	3054852	Identifier	cursoap		3053358	0					
ANR	3054853	ExpressionStatement	"dprintf ( D_ALWAYS , ""Completed servicing HTTP request\\n"" )"	4595:2:138443:138498	3053358	7	True				
ANR	3054854	CallExpression	"dprintf ( D_ALWAYS , ""Completed servicing HTTP request\\n"" )"		3053358	0					
ANR	3054855	Callee	dprintf		3053358	0					
ANR	3054856	Identifier	dprintf		3053358	0					
ANR	3054857	ArgumentList	D_ALWAYS		3053358	1					
ANR	3054858	Argument	D_ALWAYS		3053358	0					
ANR	3054859	Identifier	D_ALWAYS		3053358	0					
ANR	3054860	Argument	"""Completed servicing HTTP request\\n"""		3053358	1					
ANR	3054861	PrimaryExpression	"""Completed servicing HTTP request\\n"""		3053358	0					
ANR	3054862	ExpressionStatement	sock -> _sock = INVALID_SOCKET	4600:2:138680:138708	3053358	8	True				
ANR	3054863	AssignmentExpression	sock -> _sock = INVALID_SOCKET		3053358	0		=			
ANR	3054864	PtrMemberAccess	sock -> _sock		3053358	0					
ANR	3054865	Identifier	sock		3053358	0					
ANR	3054866	Identifier	_sock		3053358	1					
ANR	3054867	Identifier	INVALID_SOCKET		3053358	1					
ANR	3054868	ExpressionStatement	result = TRUE	4602:2:138714:138727	3053358	9	True				
ANR	3054869	AssignmentExpression	result = TRUE		3053358	0		=			
ANR	3054870	Identifier	result		3053358	0					
ANR	3054871	Identifier	TRUE		3053358	1					
ANR	3054872	GotoStatement	goto finalize ;	4603:2:138731:138744	3053358	10	True				
ANR	3054873	Identifier	finalize		3053358	0					
ANR	3054874	ExpressionStatement	sock -> timeout ( 1 )	4609:1:138914:138930	3053358	26	True				
ANR	3054875	CallExpression	sock -> timeout ( 1 )		3053358	0					
ANR	3054876	Callee	sock -> timeout		3053358	0					
ANR	3054877	PtrMemberAccess	sock -> timeout		3053358	0					
ANR	3054878	Identifier	sock		3053358	0					
ANR	3054879	Identifier	timeout		3053358	1					
ANR	3054880	ArgumentList	1		3053358	1					
ANR	3054881	Argument	1		3053358	0					
ANR	3054882	PrimaryExpression	1		3053358	0					
ANR	3054883	ExpressionStatement	result = sock -> code ( req )	4610:1:138933:138957	3053358	27	True				
ANR	3054884	AssignmentExpression	result = sock -> code ( req )		3053358	0		=			
ANR	3054885	Identifier	result		3053358	0					
ANR	3054886	CallExpression	sock -> code ( req )		3053358	1					
ANR	3054887	Callee	sock -> code		3053358	0					
ANR	3054888	PtrMemberAccess	sock -> code		3053358	0					
ANR	3054889	Identifier	sock		3053358	0					
ANR	3054890	Identifier	code		3053358	1					
ANR	3054891	ArgumentList	req		3053358	1					
ANR	3054892	Argument	req		3053358	0					
ANR	3054893	Identifier	req		3053358	0					
ANR	3054894	ExpressionStatement	sock -> timeout ( 20 )	4613:1:139088:139105	3053358	28	True				
ANR	3054895	CallExpression	sock -> timeout ( 20 )		3053358	0					
ANR	3054896	Callee	sock -> timeout		3053358	0					
ANR	3054897	PtrMemberAccess	sock -> timeout		3053358	0					
ANR	3054898	Identifier	sock		3053358	0					
ANR	3054899	Identifier	timeout		3053358	1					
ANR	3054900	ArgumentList	20		3053358	1					
ANR	3054901	Argument	20		3053358	0					
ANR	3054902	PrimaryExpression	20		3053358	0					
ANR	3054903	IfStatement	if ( ! result )		3053358	29					
ANR	3054904	Condition	! result	4614:4:139111:139117	3053358	0	True				
ANR	3054905	UnaryOperationExpression	! result		3053358	0					
ANR	3054906	UnaryOperator	!		3053358	0					
ANR	3054907	Identifier	result		3053358	1					
ANR	3054908	CompoundStatement		376:2:12097:12133	3053358	1					
ANR	3054909	IdentifierDeclStatement	char const * ip = sock -> peer_ip_str ( ) ;	4615:2:139124:139160	3053358	0	True				
ANR	3054910	IdentifierDecl	* ip = sock -> peer_ip_str ( )		3053358	0					
ANR	3054911	IdentifierDeclType	char const *		3053358	0					
ANR	3054912	Identifier	ip		3053358	1					
ANR	3054913	AssignmentExpression	* ip = sock -> peer_ip_str ( )		3053358	2		=			
ANR	3054914	Identifier	ip		3053358	0					
ANR	3054915	CallExpression	sock -> peer_ip_str ( )		3053358	1					
ANR	3054916	Callee	sock -> peer_ip_str		3053358	0					
ANR	3054917	PtrMemberAccess	sock -> peer_ip_str		3053358	0					
ANR	3054918	Identifier	sock		3053358	0					
ANR	3054919	Identifier	peer_ip_str		3053358	1					
ANR	3054920	ArgumentList			3053358	1					
ANR	3054921	IfStatement	if ( ! ip )		3053358	1					
ANR	3054922	Condition	! ip	4616:5:139167:139169	3053358	0	True				
ANR	3054923	UnaryOperationExpression	! ip		3053358	0					
ANR	3054924	UnaryOperator	!		3053358	0					
ANR	3054925	Identifier	ip		3053358	1					
ANR	3054926	CompoundStatement		377:10:12145:12145	3053358	1					
ANR	3054927	ExpressionStatement	"ip = ""unknown address"""	4617:3:139177:139199	3053358	0	True				
ANR	3054928	AssignmentExpression	"ip = ""unknown address"""		3053358	0		=			
ANR	3054929	Identifier	ip		3053358	0					
ANR	3054930	PrimaryExpression	"""unknown address"""		3053358	1					
ANR	3054931	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: Can't receive command request from %s (perhaps a timeout?)\\n"" , ip )"	4619:2:139207:139307	3053358	2	True				
ANR	3054932	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: Can't receive command request from %s (perhaps a timeout?)\\n"" , ip )"		3053358	0					
ANR	3054933	Callee	dprintf		3053358	0					
ANR	3054934	Identifier	dprintf		3053358	0					
ANR	3054935	ArgumentList	D_ALWAYS		3053358	1					
ANR	3054936	Argument	D_ALWAYS		3053358	0					
ANR	3054937	Identifier	D_ALWAYS		3053358	0					
ANR	3054938	Argument	"""DaemonCore: Can't receive command request from %s (perhaps a timeout?)\\n"""		3053358	1					
ANR	3054939	PrimaryExpression	"""DaemonCore: Can't receive command request from %s (perhaps a timeout?)\\n"""		3053358	0					
ANR	3054940	Argument	ip		3053358	2					
ANR	3054941	Identifier	ip		3053358	0					
ANR	3054942	ExpressionStatement	result = FALSE	4621:2:139311:139325	3053358	3	True				
ANR	3054943	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3054944	Identifier	result		3053358	0					
ANR	3054945	Identifier	FALSE		3053358	1					
ANR	3054946	GotoStatement	goto finalize ;	4622:2:139329:139342	3053358	4	True				
ANR	3054947	Identifier	finalize		3053358	0					
ANR	3054948	IfStatement	if ( req == DC_AUTHENTICATE )		3053358	30					
ANR	3054949	Condition	req == DC_AUTHENTICATE	4625:5:139353:139374	3053358	0	True				
ANR	3054950	EqualityExpression	req == DC_AUTHENTICATE		3053358	0		==			
ANR	3054951	Identifier	req		3053358	0					
ANR	3054952	Identifier	DC_AUTHENTICATE		3053358	1					
ANR	3054953	CompoundStatement		459:2:14285:14315	3053358	1					
ANR	3054954	ExpressionStatement	ScopedEnableParallel ( true )	4628:2:139459:139485	3053358	0	True				
ANR	3054955	CallExpression	ScopedEnableParallel ( true )		3053358	0					
ANR	3054956	Callee	ScopedEnableParallel		3053358	0					
ANR	3054957	Identifier	ScopedEnableParallel		3053358	0					
ANR	3054958	ArgumentList	true		3053358	1					
ANR	3054959	Argument	true		3053358	0					
ANR	3054960	Identifier	true		3053358	0					
ANR	3054961	ExpressionStatement	sock -> decode ( )	4630:2:139490:139504	3053358	1	True				
ANR	3054962	CallExpression	sock -> decode ( )		3053358	0					
ANR	3054963	Callee	sock -> decode		3053358	0					
ANR	3054964	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3054965	Identifier	sock		3053358	0					
ANR	3054966	Identifier	decode		3053358	1					
ANR	3054967	ArgumentList			3053358	1					
ANR	3054968	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received DC_AUTHENTICATE from %s\\n"" , sock -> peer_description ( ) )"	4632:2:139509:139610	3053358	2	True				
ANR	3054969	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received DC_AUTHENTICATE from %s\\n"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3054970	Callee	dprintf		3053358	0					
ANR	3054971	Identifier	dprintf		3053358	0					
ANR	3054972	ArgumentList	D_SECURITY		3053358	1					
ANR	3054973	Argument	D_SECURITY		3053358	0					
ANR	3054974	Identifier	D_SECURITY		3053358	0					
ANR	3054975	Argument	"""DC_AUTHENTICATE: received DC_AUTHENTICATE from %s\\n"""		3053358	1					
ANR	3054976	PrimaryExpression	"""DC_AUTHENTICATE: received DC_AUTHENTICATE from %s\\n"""		3053358	0					
ANR	3054977	Argument	sock -> peer_description ( )		3053358	2					
ANR	3054978	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3054979	Callee	sock -> peer_description		3053358	0					
ANR	3054980	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3054981	Identifier	sock		3053358	0					
ANR	3054982	Identifier	peer_description		3053358	1					
ANR	3054983	ArgumentList			3053358	1					
ANR	3054984	IdentifierDeclStatement	ClassAd auth_info ;	4634:2:139615:139632	3053358	3	True				
ANR	3054985	IdentifierDecl	auth_info		3053358	0					
ANR	3054986	IdentifierDeclType	ClassAd		3053358	0					
ANR	3054987	Identifier	auth_info		3053358	1					
ANR	3054988	IfStatement	if ( ! auth_info . initFromStream ( * sock ) )		3053358	4					
ANR	3054989	Condition	! auth_info . initFromStream ( * sock )	4635:6:139640:139671	3053358	0	True				
ANR	3054990	UnaryOperationExpression	! auth_info . initFromStream ( * sock )		3053358	0					
ANR	3054991	UnaryOperator	!		3053358	0					
ANR	3054992	CallExpression	auth_info . initFromStream ( * sock )		3053358	1					
ANR	3054993	Callee	auth_info . initFromStream		3053358	0					
ANR	3054994	MemberAccess	auth_info . initFromStream		3053358	0					
ANR	3054995	Identifier	auth_info		3053358	0					
ANR	3054996	Identifier	initFromStream		3053358	1					
ANR	3054997	ArgumentList	* sock		3053358	1					
ANR	3054998	Argument	* sock		3053358	0					
ANR	3054999	UnaryOperationExpression	* sock		3053358	0					
ANR	3055000	UnaryOperator	*		3053358	0					
ANR	3055001	Identifier	sock		3053358	1					
ANR	3055002	CompoundStatement		396:40:12647:12647	3053358	1					
ANR	3055003	Statement	dprintf	4636:3:139679:139685	3053358	0	True				
ANR	3055004	Statement	(	4636:11:139687:139687	3053358	1	True				
ANR	3055005	Statement	D_ALWAYS	4636:12:139688:139695	3053358	2	True				
ANR	3055006	Statement	","	4636:20:139696:139696	3053358	3	True				
ANR	3055007	Statement	"""ERROR: DC_AUTHENTICATE unable to """	4636:22:139698:139732	3053358	4	True				
ANR	3055008	Statement	"""receive auth_info from %s!\\n"""	4637:6:139740:139769	3053358	5	True				
ANR	3055009	Statement	","	4637:36:139770:139770	3053358	6	True				
ANR	3055010	Statement	sock	4637:38:139772:139775	3053358	7	True				
ANR	3055011	Statement	->	4637:42:139776:139777	3053358	8	True				
ANR	3055012	Statement	peer_description	4637:44:139778:139793	3053358	9	True				
ANR	3055013	Statement	(	4637:60:139794:139794	3053358	10	True				
ANR	3055014	Statement	)	4637:61:139795:139795	3053358	11	True				
ANR	3055015	Statement	)	4637:62:139796:139796	3053358	12	True				
ANR	3055016	ExpressionStatement		4637:63:139797:139797	3053358	13	True				
ANR	3055017	ExpressionStatement	result = FALSE	4638:3:139802:139816	3053358	14	True				
ANR	3055018	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3055019	Identifier	result		3053358	0					
ANR	3055020	Identifier	FALSE		3053358	1					
ANR	3055021	GotoStatement	goto finalize ;	4639:3:139821:139834	3053358	15	True				
ANR	3055022	Identifier	finalize		3053358	0					
ANR	3055023	IfStatement	if ( is_tcp && ! sock -> end_of_message ( ) )		3053358	5					
ANR	3055024	Condition	is_tcp && ! sock -> end_of_message ( )	4642:7:139848:139880	3053358	0	True				
ANR	3055025	AndExpression	is_tcp && ! sock -> end_of_message ( )		3053358	0		&&			
ANR	3055026	Identifier	is_tcp		3053358	0					
ANR	3055027	UnaryOperationExpression	! sock -> end_of_message ( )		3053358	1					
ANR	3055028	UnaryOperator	!		3053358	0					
ANR	3055029	CallExpression	sock -> end_of_message ( )		3053358	1					
ANR	3055030	Callee	sock -> end_of_message		3053358	0					
ANR	3055031	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3055032	Identifier	sock		3053358	0					
ANR	3055033	Identifier	end_of_message		3053358	1					
ANR	3055034	ArgumentList			3053358	1					
ANR	3055035	CompoundStatement		403:42:12856:12856	3053358	1					
ANR	3055036	Statement	dprintf	4643:3:139888:139894	3053358	0	True				
ANR	3055037	Statement	(	4643:11:139896:139896	3053358	1	True				
ANR	3055038	Statement	D_ALWAYS	4643:12:139897:139904	3053358	2	True				
ANR	3055039	Statement	","	4643:20:139905:139905	3053358	3	True				
ANR	3055040	Statement	"""ERROR: DC_AUTHENTICATE is TCP, unable to """	4643:22:139907:139949	3053358	4	True				
ANR	3055041	Statement	"""receive eom!\\n"""	4644:8:139959:139974	3053358	5	True				
ANR	3055042	Statement	)	4644:24:139975:139975	3053358	6	True				
ANR	3055043	ExpressionStatement		4644:25:139976:139976	3053358	7	True				
ANR	3055044	ExpressionStatement	result = FALSE	4645:3:139981:139995	3053358	8	True				
ANR	3055045	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3055046	Identifier	result		3053358	0					
ANR	3055047	Identifier	FALSE		3053358	1					
ANR	3055048	GotoStatement	goto finalize ;	4646:3:140000:140013	3053358	9	True				
ANR	3055049	Identifier	finalize		3053358	0					
ANR	3055050	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	6					
ANR	3055051	Condition	DebugFlags & D_FULLDEBUG	4649:6:140026:140049	3053358	0	True				
ANR	3055052	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3055053	Identifier	DebugFlags		3053358	0					
ANR	3055054	Identifier	D_FULLDEBUG		3053358	1					
ANR	3055055	CompoundStatement		410:32:13025:13025	3053358	1					
ANR	3055056	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received following ClassAd:\\n"" )"	4650:3:140057:140127	3053358	0	True				
ANR	3055057	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received following ClassAd:\\n"" )"		3053358	0					
ANR	3055058	Callee	dprintf		3053358	0					
ANR	3055059	Identifier	dprintf		3053358	0					
ANR	3055060	ArgumentList	D_SECURITY		3053358	1					
ANR	3055061	Argument	D_SECURITY		3053358	0					
ANR	3055062	Identifier	D_SECURITY		3053358	0					
ANR	3055063	Argument	"""DC_AUTHENTICATE: received following ClassAd:\\n"""		3053358	1					
ANR	3055064	PrimaryExpression	"""DC_AUTHENTICATE: received following ClassAd:\\n"""		3053358	0					
ANR	3055065	ExpressionStatement	auth_info . dPrint ( D_SECURITY )	4651:3:140132:140161	3053358	1	True				
ANR	3055066	CallExpression	auth_info . dPrint ( D_SECURITY )		3053358	0					
ANR	3055067	Callee	auth_info . dPrint		3053358	0					
ANR	3055068	MemberAccess	auth_info . dPrint		3053358	0					
ANR	3055069	Identifier	auth_info		3053358	0					
ANR	3055070	Identifier	dPrint		3053358	1					
ANR	3055071	ArgumentList	D_SECURITY		3053358	1					
ANR	3055072	Argument	D_SECURITY		3053358	0					
ANR	3055073	Identifier	D_SECURITY		3053358	0					
ANR	3055074	IdentifierDeclStatement	MyString peer_version ;	4654:2:140170:140191	3053358	7	True				
ANR	3055075	IdentifierDecl	peer_version		3053358	0					
ANR	3055076	IdentifierDeclType	MyString		3053358	0					
ANR	3055077	Identifier	peer_version		3053358	1					
ANR	3055078	IfStatement	"if ( auth_info . LookupString ( ATTR_SEC_REMOTE_VERSION , peer_version ) )"		3053358	8					
ANR	3055079	Condition	"auth_info . LookupString ( ATTR_SEC_REMOTE_VERSION , peer_version )"	4655:6:140199:140261	3053358	0	True				
ANR	3055080	CallExpression	"auth_info . LookupString ( ATTR_SEC_REMOTE_VERSION , peer_version )"		3053358	0					
ANR	3055081	Callee	auth_info . LookupString		3053358	0					
ANR	3055082	MemberAccess	auth_info . LookupString		3053358	0					
ANR	3055083	Identifier	auth_info		3053358	0					
ANR	3055084	Identifier	LookupString		3053358	1					
ANR	3055085	ArgumentList	ATTR_SEC_REMOTE_VERSION		3053358	1					
ANR	3055086	Argument	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3055087	Identifier	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3055088	Argument	peer_version		3053358	1					
ANR	3055089	Identifier	peer_version		3053358	0					
ANR	3055090	CompoundStatement		417:3:13243:13293	3053358	1					
ANR	3055091	IdentifierDeclStatement	CondorVersionInfo ver_info ( peer_version . Value ( ) ) ;	4656:3:140270:140320	3053358	0	True				
ANR	3055092	IdentifierDecl	ver_info ( peer_version . Value ( ) )		3053358	0					
ANR	3055093	IdentifierDeclType	CondorVersionInfo		3053358	0					
ANR	3055094	Identifier	ver_info		3053358	1					
ANR	3055095	CallExpression	peer_version . Value ( )		3053358	2					
ANR	3055096	Callee	peer_version . Value		3053358	0					
ANR	3055097	MemberAccess	peer_version . Value		3053358	0					
ANR	3055098	Identifier	peer_version		3053358	0					
ANR	3055099	Identifier	Value		3053358	1					
ANR	3055100	ArgumentList			3053358	1					
ANR	3055101	ExpressionStatement	sock -> set_peer_version ( & ver_info )	4657:3:140325:140360	3053358	1	True				
ANR	3055102	CallExpression	sock -> set_peer_version ( & ver_info )		3053358	0					
ANR	3055103	Callee	sock -> set_peer_version		3053358	0					
ANR	3055104	PtrMemberAccess	sock -> set_peer_version		3053358	0					
ANR	3055105	Identifier	sock		3053358	0					
ANR	3055106	Identifier	set_peer_version		3053358	1					
ANR	3055107	ArgumentList	& ver_info		3053358	1					
ANR	3055108	Argument	& ver_info		3053358	0					
ANR	3055109	UnaryOperationExpression	& ver_info		3053358	0					
ANR	3055110	UnaryOperator	&		3053358	0					
ANR	3055111	Identifier	ver_info		3053358	1					
ANR	3055112	IdentifierDeclStatement	int real_cmd = 0 ;	4661:2:140415:140431	3053358	9	True				
ANR	3055113	IdentifierDecl	real_cmd = 0		3053358	0					
ANR	3055114	IdentifierDeclType	int		3053358	0					
ANR	3055115	Identifier	real_cmd		3053358	1					
ANR	3055116	AssignmentExpression	real_cmd = 0		3053358	2		=			
ANR	3055117	Identifier	real_cmd		3053358	0					
ANR	3055118	PrimaryExpression	0		3053358	1					
ANR	3055119	IdentifierDeclStatement	int tmp_cmd = 0 ;	4662:2:140435:140450	3053358	10	True				
ANR	3055120	IdentifierDecl	tmp_cmd = 0		3053358	0					
ANR	3055121	IdentifierDeclType	int		3053358	0					
ANR	3055122	Identifier	tmp_cmd		3053358	1					
ANR	3055123	AssignmentExpression	tmp_cmd = 0		3053358	2		=			
ANR	3055124	Identifier	tmp_cmd		3053358	0					
ANR	3055125	PrimaryExpression	0		3053358	1					
ANR	3055126	ExpressionStatement	"auth_info . LookupInteger ( ATTR_SEC_COMMAND , real_cmd )"	4663:2:140454:140505	3053358	11	True				
ANR	3055127	CallExpression	"auth_info . LookupInteger ( ATTR_SEC_COMMAND , real_cmd )"		3053358	0					
ANR	3055128	Callee	auth_info . LookupInteger		3053358	0					
ANR	3055129	MemberAccess	auth_info . LookupInteger		3053358	0					
ANR	3055130	Identifier	auth_info		3053358	0					
ANR	3055131	Identifier	LookupInteger		3053358	1					
ANR	3055132	ArgumentList	ATTR_SEC_COMMAND		3053358	1					
ANR	3055133	Argument	ATTR_SEC_COMMAND		3053358	0					
ANR	3055134	Identifier	ATTR_SEC_COMMAND		3053358	0					
ANR	3055135	Argument	real_cmd		3053358	1					
ANR	3055136	Identifier	real_cmd		3053358	0					
ANR	3055137	IfStatement	if ( real_cmd == DC_AUTHENTICATE )		3053358	12					
ANR	3055138	Condition	real_cmd == DC_AUTHENTICATE	4665:6:140514:140540	3053358	0	True				
ANR	3055139	EqualityExpression	real_cmd == DC_AUTHENTICATE		3053358	0		==			
ANR	3055140	Identifier	real_cmd		3053358	0					
ANR	3055141	Identifier	DC_AUTHENTICATE		3053358	1					
ANR	3055142	CompoundStatement		426:35:13516:13516	3053358	1					
ANR	3055143	ExpressionStatement	"auth_info . LookupInteger ( ATTR_SEC_AUTH_COMMAND , tmp_cmd )"	4667:3:140587:140642	3053358	0	True				
ANR	3055144	CallExpression	"auth_info . LookupInteger ( ATTR_SEC_AUTH_COMMAND , tmp_cmd )"		3053358	0					
ANR	3055145	Callee	auth_info . LookupInteger		3053358	0					
ANR	3055146	MemberAccess	auth_info . LookupInteger		3053358	0					
ANR	3055147	Identifier	auth_info		3053358	0					
ANR	3055148	Identifier	LookupInteger		3053358	1					
ANR	3055149	ArgumentList	ATTR_SEC_AUTH_COMMAND		3053358	1					
ANR	3055150	Argument	ATTR_SEC_AUTH_COMMAND		3053358	0					
ANR	3055151	Identifier	ATTR_SEC_AUTH_COMMAND		3053358	0					
ANR	3055152	Argument	tmp_cmd		3053358	1					
ANR	3055153	Identifier	tmp_cmd		3053358	0					
ANR	3055154	ElseStatement	else		3053358	0					
ANR	3055155	CompoundStatement		429:9:13626:13626	3053358	0					
ANR	3055156	ExpressionStatement	tmp_cmd = real_cmd	4669:3:140658:140676	3053358	0	True				
ANR	3055157	AssignmentExpression	tmp_cmd = real_cmd		3053358	0		=			
ANR	3055158	Identifier	tmp_cmd		3053358	0					
ANR	3055159	Identifier	real_cmd		3053358	1					
ANR	3055160	IdentifierDeclStatement	int cmd_index = 0 ;	4674:2:140758:140775	3053358	13	True				
ANR	3055161	IdentifierDecl	cmd_index = 0		3053358	0					
ANR	3055162	IdentifierDeclType	int		3053358	0					
ANR	3055163	Identifier	cmd_index		3053358	1					
ANR	3055164	AssignmentExpression	cmd_index = 0		3053358	2		=			
ANR	3055165	Identifier	cmd_index		3053358	0					
ANR	3055166	PrimaryExpression	0		3053358	1					
ANR	3055167	ExpressionStatement	"reqFound = CommandNumToTableIndex ( tmp_cmd , & cmd_index )"	4675:2:140779:140832	3053358	14	True				
ANR	3055168	AssignmentExpression	"reqFound = CommandNumToTableIndex ( tmp_cmd , & cmd_index )"		3053358	0		=			
ANR	3055169	Identifier	reqFound		3053358	0					
ANR	3055170	CallExpression	"CommandNumToTableIndex ( tmp_cmd , & cmd_index )"		3053358	1					
ANR	3055171	Callee	CommandNumToTableIndex		3053358	0					
ANR	3055172	Identifier	CommandNumToTableIndex		3053358	0					
ANR	3055173	ArgumentList	tmp_cmd		3053358	1					
ANR	3055174	Argument	tmp_cmd		3053358	0					
ANR	3055175	Identifier	tmp_cmd		3053358	0					
ANR	3055176	Argument	& cmd_index		3053358	1					
ANR	3055177	UnaryOperationExpression	& cmd_index		3053358	0					
ANR	3055178	UnaryOperator	&		3053358	0					
ANR	3055179	Identifier	cmd_index		3053358	1					
ANR	3055180	IfStatement	if ( ! reqFound )		3053358	15					
ANR	3055181	Condition	! reqFound	4677:6:140841:140849	3053358	0	True				
ANR	3055182	UnaryOperationExpression	! reqFound		3053358	0					
ANR	3055183	UnaryOperator	!		3053358	0					
ANR	3055184	Identifier	reqFound		3053358	1					
ANR	3055185	CompoundStatement		438:17:13825:13825	3053358	1					
ANR	3055186	ExpressionStatement	"dprintf ( D_ALWAYS , ""Received %s command (%d) (%s) from %s %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , tmp_cmd , ""UNREGISTERED COMMAND!"" , user . Value ( ) , sock -> peer_description ( ) )"	4681:3:140935:141128	3053358	0	True				
ANR	3055187	CallExpression	"dprintf ( D_ALWAYS , ""Received %s command (%d) (%s) from %s %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , tmp_cmd , ""UNREGISTERED COMMAND!"" , user . Value ( ) , sock -> peer_description ( ) )"		3053358	0					
ANR	3055188	Callee	dprintf		3053358	0					
ANR	3055189	Identifier	dprintf		3053358	0					
ANR	3055190	ArgumentList	D_ALWAYS		3053358	1					
ANR	3055191	Argument	D_ALWAYS		3053358	0					
ANR	3055192	Identifier	D_ALWAYS		3053358	0					
ANR	3055193	Argument	"""Received %s command (%d) (%s) from %s %s\\n"""		3053358	1					
ANR	3055194	PrimaryExpression	"""Received %s command (%d) (%s) from %s %s\\n"""		3053358	0					
ANR	3055195	Argument	"( is_tcp ) ? ""TCP"" : ""UDP"""		3053358	2					
ANR	3055196	ConditionalExpression	"( is_tcp ) ? ""TCP"" : ""UDP"""		3053358	0					
ANR	3055197	Condition	is_tcp		3053358	0					
ANR	3055198	Identifier	is_tcp		3053358	0					
ANR	3055199	PrimaryExpression	"""TCP"""		3053358	1					
ANR	3055200	PrimaryExpression	"""UDP"""		3053358	2					
ANR	3055201	Argument	tmp_cmd		3053358	3					
ANR	3055202	Identifier	tmp_cmd		3053358	0					
ANR	3055203	Argument	"""UNREGISTERED COMMAND!"""		3053358	4					
ANR	3055204	PrimaryExpression	"""UNREGISTERED COMMAND!"""		3053358	0					
ANR	3055205	Argument	user . Value ( )		3053358	5					
ANR	3055206	CallExpression	user . Value ( )		3053358	0					
ANR	3055207	Callee	user . Value		3053358	0					
ANR	3055208	MemberAccess	user . Value		3053358	0					
ANR	3055209	Identifier	user		3053358	0					
ANR	3055210	Identifier	Value		3053358	1					
ANR	3055211	ArgumentList			3053358	1					
ANR	3055212	Argument	sock -> peer_description ( )		3053358	6					
ANR	3055213	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3055214	Callee	sock -> peer_description		3053358	0					
ANR	3055215	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3055216	Identifier	sock		3053358	0					
ANR	3055217	Identifier	peer_description		3053358	1					
ANR	3055218	ArgumentList			3053358	1					
ANR	3055219	ExpressionStatement	result = FALSE	4689:3:141134:141148	3053358	1	True				
ANR	3055220	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3055221	Identifier	result		3053358	0					
ANR	3055222	Identifier	FALSE		3053358	1					
ANR	3055223	GotoStatement	goto finalize ;	4690:3:141153:141166	3053358	2	True				
ANR	3055224	Identifier	finalize		3053358	0					
ANR	3055225	IdentifierDeclStatement	bool new_session = false ;	4693:2:141175:141206	3053358	16	True				
ANR	3055226	IdentifierDecl	new_session = false		3053358	0					
ANR	3055227	IdentifierDeclType	bool		3053358	0					
ANR	3055228	Identifier	new_session		3053358	1					
ANR	3055229	AssignmentExpression	new_session = false		3053358	2		=			
ANR	3055230	Identifier	false		3053358	0					
ANR	3055231	Identifier	false		3053358	1					
ANR	3055232	IdentifierDeclStatement	bool using_cookie = false ;	4694:2:141210:141241	3053358	17	True				
ANR	3055233	IdentifierDecl	using_cookie = false		3053358	0					
ANR	3055234	IdentifierDeclType	bool		3053358	0					
ANR	3055235	Identifier	using_cookie		3053358	1					
ANR	3055236	AssignmentExpression	using_cookie = false		3053358	2		=			
ANR	3055237	Identifier	false		3053358	0					
ANR	3055238	Identifier	false		3053358	1					
ANR	3055239	IdentifierDeclStatement	bool valid_cookie = false ;	4695:2:141245:141271	3053358	18	True				
ANR	3055240	IdentifierDecl	valid_cookie = false		3053358	0					
ANR	3055241	IdentifierDeclType	bool		3053358	0					
ANR	3055242	Identifier	valid_cookie		3053358	1					
ANR	3055243	AssignmentExpression	valid_cookie = false		3053358	2		=			
ANR	3055244	Identifier	false		3053358	0					
ANR	3055245	Identifier	false		3053358	1					
ANR	3055246	IdentifierDeclStatement	char * incoming_cookie = NULL ;	4698:2:141312:141342	3053358	19	True				
ANR	3055247	IdentifierDecl	* incoming_cookie = NULL		3053358	0					
ANR	3055248	IdentifierDeclType	char *		3053358	0					
ANR	3055249	Identifier	incoming_cookie		3053358	1					
ANR	3055250	AssignmentExpression	* incoming_cookie = NULL		3053358	2		=			
ANR	3055251	Identifier	NULL		3053358	0					
ANR	3055252	Identifier	NULL		3053358	1					
ANR	3055253	IfStatement	"if ( auth_info . LookupString ( ATTR_SEC_COOKIE , & incoming_cookie ) )"		3053358	20					
ANR	3055254	Condition	"auth_info . LookupString ( ATTR_SEC_COOKIE , & incoming_cookie )"	4699:6:141350:141406	3053358	0	True				
ANR	3055255	CallExpression	"auth_info . LookupString ( ATTR_SEC_COOKIE , & incoming_cookie )"		3053358	0					
ANR	3055256	Callee	auth_info . LookupString		3053358	0					
ANR	3055257	MemberAccess	auth_info . LookupString		3053358	0					
ANR	3055258	Identifier	auth_info		3053358	0					
ANR	3055259	Identifier	LookupString		3053358	1					
ANR	3055260	ArgumentList	ATTR_SEC_COOKIE		3053358	1					
ANR	3055261	Argument	ATTR_SEC_COOKIE		3053358	0					
ANR	3055262	Identifier	ATTR_SEC_COOKIE		3053358	0					
ANR	3055263	Argument	& incoming_cookie		3053358	1					
ANR	3055264	UnaryOperationExpression	& incoming_cookie		3053358	0					
ANR	3055265	UnaryOperator	&		3053358	0					
ANR	3055266	Identifier	incoming_cookie		3053358	1					
ANR	3055267	CompoundStatement		460:65:14382:14382	3053358	1					
ANR	3055268	ExpressionStatement	valid_cookie = cookie_is_valid ( ( unsigned char * ) incoming_cookie )	4702:3:141462:141525	3053358	0	True				
ANR	3055269	AssignmentExpression	valid_cookie = cookie_is_valid ( ( unsigned char * ) incoming_cookie )		3053358	0		=			
ANR	3055270	Identifier	valid_cookie		3053358	0					
ANR	3055271	CallExpression	cookie_is_valid ( ( unsigned char * ) incoming_cookie )		3053358	1					
ANR	3055272	Callee	cookie_is_valid		3053358	0					
ANR	3055273	Identifier	cookie_is_valid		3053358	0					
ANR	3055274	ArgumentList	( unsigned char * ) incoming_cookie		3053358	1					
ANR	3055275	Argument	( unsigned char * ) incoming_cookie		3053358	0					
ANR	3055276	CastExpression	( unsigned char * ) incoming_cookie		3053358	0					
ANR	3055277	CastTarget	unsigned char *		3053358	0					
ANR	3055278	Identifier	incoming_cookie		3053358	1					
ANR	3055279	ExpressionStatement	free ( incoming_cookie )	4703:3:141530:141552	3053358	1	True				
ANR	3055280	CallExpression	free ( incoming_cookie )		3053358	0					
ANR	3055281	Callee	free		3053358	0					
ANR	3055282	Identifier	free		3053358	0					
ANR	3055283	ArgumentList	incoming_cookie		3053358	1					
ANR	3055284	Argument	incoming_cookie		3053358	0					
ANR	3055285	Identifier	incoming_cookie		3053358	0					
ANR	3055286	IfStatement	if ( valid_cookie )		3053358	2					
ANR	3055287	Condition	valid_cookie	4705:8:141563:141574	3053358	0	True				
ANR	3055288	Identifier	valid_cookie		3053358	0					
ANR	3055289	CompoundStatement		466:23:14551:14551	3053358	1					
ANR	3055290	ExpressionStatement	using_cookie = true	4707:4:141630:141649	3053358	0	True				
ANR	3055291	AssignmentExpression	using_cookie = true		3053358	0		=			
ANR	3055292	Identifier	using_cookie		3053358	0					
ANR	3055293	Identifier	true		3053358	1					
ANR	3055294	ElseStatement	else		3053358	0					
ANR	3055295	CompoundStatement		469:10:14634:14634	3053358	0					
ANR	3055296	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: recieved invalid cookie from %s!!!\\n"" , sock -> peer_description ( ) )"	4710:4:141688:141790	3053358	0	True				
ANR	3055297	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: recieved invalid cookie from %s!!!\\n"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3055298	Callee	dprintf		3053358	0					
ANR	3055299	Identifier	dprintf		3053358	0					
ANR	3055300	ArgumentList	D_ALWAYS		3053358	1					
ANR	3055301	Argument	D_ALWAYS		3053358	0					
ANR	3055302	Identifier	D_ALWAYS		3053358	0					
ANR	3055303	Argument	"""DC_AUTHENTICATE: recieved invalid cookie from %s!!!\\n"""		3053358	1					
ANR	3055304	PrimaryExpression	"""DC_AUTHENTICATE: recieved invalid cookie from %s!!!\\n"""		3053358	0					
ANR	3055305	Argument	sock -> peer_description ( )		3053358	2					
ANR	3055306	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3055307	Callee	sock -> peer_description		3053358	0					
ANR	3055308	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3055309	Identifier	sock		3053358	0					
ANR	3055310	Identifier	peer_description		3053358	1					
ANR	3055311	ArgumentList			3053358	1					
ANR	3055312	ExpressionStatement	result = FALSE	4711:4:141796:141810	3053358	1	True				
ANR	3055313	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3055314	Identifier	result		3053358	0					
ANR	3055315	Identifier	FALSE		3053358	1					
ANR	3055316	GotoStatement	goto finalize ;	4712:4:141816:141829	3053358	2	True				
ANR	3055317	Identifier	finalize		3053358	0					
ANR	3055318	IfStatement	if ( ! using_cookie )		3053358	21					
ANR	3055319	Condition	! using_cookie	4718:6:141897:141909	3053358	0	True				
ANR	3055320	UnaryOperationExpression	! using_cookie		3053358	0					
ANR	3055321	UnaryOperator	!		3053358	0					
ANR	3055322	Identifier	using_cookie		3053358	1					
ANR	3055323	CompoundStatement		479:21:14885:14885	3053358	1					
ANR	3055324	IfStatement	"if ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_USE_SESSION ) == SecMan :: SEC_FEAT_ACT_YES )"		3053358	0					
ANR	3055325	Condition	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_USE_SESSION ) == SecMan :: SEC_FEAT_ACT_YES"	4720:8:141923:142011	3053358	0	True				
ANR	3055326	EqualityExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_USE_SESSION ) == SecMan :: SEC_FEAT_ACT_YES"		3053358	0		==			
ANR	3055327	CallExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_USE_SESSION )"		3053358	0					
ANR	3055328	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3055329	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3055330	Identifier	sec_man		3053358	0					
ANR	3055331	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3055332	ArgumentList	auth_info		3053358	1					
ANR	3055333	Argument	auth_info		3053358	0					
ANR	3055334	Identifier	auth_info		3053358	0					
ANR	3055335	Argument	ATTR_SEC_USE_SESSION		3053358	1					
ANR	3055336	Identifier	ATTR_SEC_USE_SESSION		3053358	0					
ANR	3055337	Identifier	SecMan :: SEC_FEAT_ACT_YES		3053358	1					
ANR	3055338	CompoundStatement		483:4:14994:15023	3053358	1					
ANR	3055339	IdentifierDeclStatement	KeyCacheEntry * session = NULL ;	4722:4:142021:142050	3053358	0	True				
ANR	3055340	IdentifierDecl	* session = NULL		3053358	0					
ANR	3055341	IdentifierDeclType	KeyCacheEntry *		3053358	0					
ANR	3055342	Identifier	session		3053358	1					
ANR	3055343	AssignmentExpression	* session = NULL		3053358	2		=			
ANR	3055344	Identifier	NULL		3053358	0					
ANR	3055345	Identifier	NULL		3053358	1					
ANR	3055346	IfStatement	"if ( ! auth_info . LookupString ( ATTR_SEC_SID , & the_sid ) )"		3053358	1					
ANR	3055347	Condition	"! auth_info . LookupString ( ATTR_SEC_SID , & the_sid )"	4724:8:142061:142108	3053358	0	True				
ANR	3055348	UnaryOperationExpression	"! auth_info . LookupString ( ATTR_SEC_SID , & the_sid )"		3053358	0					
ANR	3055349	UnaryOperator	!		3053358	0					
ANR	3055350	CallExpression	"auth_info . LookupString ( ATTR_SEC_SID , & the_sid )"		3053358	1					
ANR	3055351	Callee	auth_info . LookupString		3053358	0					
ANR	3055352	MemberAccess	auth_info . LookupString		3053358	0					
ANR	3055353	Identifier	auth_info		3053358	0					
ANR	3055354	Identifier	LookupString		3053358	1					
ANR	3055355	ArgumentList	ATTR_SEC_SID		3053358	1					
ANR	3055356	Argument	ATTR_SEC_SID		3053358	0					
ANR	3055357	Identifier	ATTR_SEC_SID		3053358	0					
ANR	3055358	Argument	& the_sid		3053358	1					
ANR	3055359	UnaryOperationExpression	& the_sid		3053358	0					
ANR	3055360	UnaryOperator	&		3053358	0					
ANR	3055361	Identifier	the_sid		3053358	1					
ANR	3055362	CompoundStatement		485:58:15084:15084	3053358	1					
ANR	3055363	Statement	dprintf	4725:5:142118:142124	3053358	0	True				
ANR	3055364	Statement	(	4725:13:142126:142126	3053358	1	True				
ANR	3055365	Statement	D_ALWAYS	4725:14:142127:142134	3053358	2	True				
ANR	3055366	Statement	","	4725:22:142135:142135	3053358	3	True				
ANR	3055367	Statement	"""ERROR: DC_AUTHENTICATE unable to """	4725:24:142137:142171	3053358	4	True				
ANR	3055368	Statement	"""extract auth_info.%s from %s!\\n"""	4726:8:142181:142213	3053358	5	True				
ANR	3055369	Statement	","	4726:41:142214:142214	3053358	6	True				
ANR	3055370	Statement	ATTR_SEC_SID	4726:43:142216:142227	3053358	7	True				
ANR	3055371	Statement	","	4726:55:142228:142228	3053358	8	True				
ANR	3055372	Statement	sock	4727:8:142238:142241	3053358	9	True				
ANR	3055373	Statement	->	4727:12:142242:142243	3053358	10	True				
ANR	3055374	Statement	peer_description	4727:14:142244:142259	3053358	11	True				
ANR	3055375	Statement	(	4727:30:142260:142260	3053358	12	True				
ANR	3055376	Statement	)	4727:31:142261:142261	3053358	13	True				
ANR	3055377	Statement	)	4727:32:142262:142262	3053358	14	True				
ANR	3055378	ExpressionStatement		4727:33:142263:142263	3053358	15	True				
ANR	3055379	ExpressionStatement	result = FALSE	4728:5:142270:142284	3053358	16	True				
ANR	3055380	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3055381	Identifier	result		3053358	0					
ANR	3055382	Identifier	FALSE		3053358	1					
ANR	3055383	GotoStatement	goto finalize ;	4729:5:142291:142304	3053358	17	True				
ANR	3055384	Identifier	finalize		3053358	0					
ANR	3055385	IfStatement	"if ( ! sec_man -> session_cache -> lookup ( the_sid , session ) )"		3053358	2					
ANR	3055386	Condition	"! sec_man -> session_cache -> lookup ( the_sid , session )"	4733:8:142353:142401	3053358	0	True				
ANR	3055387	UnaryOperationExpression	"! sec_man -> session_cache -> lookup ( the_sid , session )"		3053358	0					
ANR	3055388	UnaryOperator	!		3053358	0					
ANR	3055389	CallExpression	"sec_man -> session_cache -> lookup ( the_sid , session )"		3053358	1					
ANR	3055390	Callee	sec_man -> session_cache -> lookup		3053358	0					
ANR	3055391	PtrMemberAccess	sec_man -> session_cache -> lookup		3053358	0					
ANR	3055392	PtrMemberAccess	sec_man -> session_cache		3053358	0					
ANR	3055393	Identifier	sec_man		3053358	0					
ANR	3055394	Identifier	session_cache		3053358	1					
ANR	3055395	Identifier	lookup		3053358	1					
ANR	3055396	ArgumentList	the_sid		3053358	1					
ANR	3055397	Argument	the_sid		3053358	0					
ANR	3055398	Identifier	the_sid		3053358	0					
ANR	3055399	Argument	session		3053358	1					
ANR	3055400	Identifier	session		3053358	0					
ANR	3055401	CompoundStatement		499:5:15465:15490	3053358	1					
ANR	3055402	IdentifierDeclStatement	char * return_addr = NULL ;	4738:5:142492:142517	3053358	0	True				
ANR	3055403	IdentifierDecl	* return_addr = NULL		3053358	0					
ANR	3055404	IdentifierDeclType	char *		3053358	0					
ANR	3055405	Identifier	return_addr		3053358	1					
ANR	3055406	AssignmentExpression	* return_addr = NULL		3053358	2		=			
ANR	3055407	Identifier	NULL		3053358	0					
ANR	3055408	Identifier	NULL		3053358	1					
ANR	3055409	ExpressionStatement	"auth_info . LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"	4739:5:142524:142590	3053358	1	True				
ANR	3055410	CallExpression	"auth_info . LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"		3053358	0					
ANR	3055411	Callee	auth_info . LookupString		3053358	0					
ANR	3055412	MemberAccess	auth_info . LookupString		3053358	0					
ANR	3055413	Identifier	auth_info		3053358	0					
ANR	3055414	Identifier	LookupString		3053358	1					
ANR	3055415	ArgumentList	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	1					
ANR	3055416	Argument	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	0					
ANR	3055417	Identifier	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	0					
ANR	3055418	Argument	& return_addr		3053358	1					
ANR	3055419	UnaryOperationExpression	& return_addr		3053358	0					
ANR	3055420	UnaryOperator	&		3053358	0					
ANR	3055421	Identifier	return_addr		3053358	1					
ANR	3055422	Statement	dprintf	4741:5:142598:142604	3053358	2	True				
ANR	3055423	Statement	(	4741:13:142606:142606	3053358	3	True				
ANR	3055424	Statement	D_ALWAYS	4741:14:142607:142614	3053358	4	True				
ANR	3055425	Statement	","	4741:22:142615:142615	3053358	5	True				
ANR	3055426	Statement	"""DC_AUTHENTICATE: attempt to open """	4741:24:142617:142651	3053358	6	True				
ANR	3055427	Statement	"""invalid session %s, failing; this session was requested by %s with return address %s\\n"""	4742:10:142663:142750	3053358	7	True				
ANR	3055428	Statement	","	4742:98:142751:142751	3053358	8	True				
ANR	3055429	Statement	the_sid	4742:100:142753:142759	3053358	9	True				
ANR	3055430	Statement	","	4742:107:142760:142760	3053358	10	True				
ANR	3055431	Statement	sock	4742:109:142762:142765	3053358	11	True				
ANR	3055432	Statement	->	4742:113:142766:142767	3053358	12	True				
ANR	3055433	Statement	peer_description	4742:115:142768:142783	3053358	13	True				
ANR	3055434	Statement	(	4742:131:142784:142784	3053358	14	True				
ANR	3055435	Statement	)	4742:132:142785:142785	3053358	15	True				
ANR	3055436	Statement	","	4742:133:142786:142786	3053358	16	True				
ANR	3055437	Statement	return_addr	4742:135:142788:142798	3053358	17	True				
ANR	3055438	Statement	?	4742:147:142800:142800	3053358	18	True				
ANR	3055439	Label	return_addr :	4742:149:142802:142814	3053358	19	True				
ANR	3055440	Identifier	return_addr		3053358	0					
ANR	3055441	Statement	"""(none)"""	4742:163:142816:142823	3053358	20	True				
ANR	3055442	Statement	)	4742:171:142824:142824	3053358	21	True				
ANR	3055443	ExpressionStatement		4742:172:142825:142825	3053358	22	True				
ANR	3055444	IfStatement	if ( return_addr )		3053358	23					
ANR	3055445	Condition	return_addr	4744:9:142837:142847	3053358	0	True				
ANR	3055446	Identifier	return_addr		3053358	0					
ANR	3055447	CompoundStatement		505:23:15824:15824	3053358	1					
ANR	3055448	ExpressionStatement	"send_invalidate_session ( return_addr , the_sid )"	4745:6:142859:142906	3053358	0	True				
ANR	3055449	CallExpression	"send_invalidate_session ( return_addr , the_sid )"		3053358	0					
ANR	3055450	Callee	send_invalidate_session		3053358	0					
ANR	3055451	Identifier	send_invalidate_session		3053358	0					
ANR	3055452	ArgumentList	return_addr		3053358	1					
ANR	3055453	Argument	return_addr		3053358	0					
ANR	3055454	Identifier	return_addr		3053358	0					
ANR	3055455	Argument	the_sid		3053358	1					
ANR	3055456	Identifier	the_sid		3053358	0					
ANR	3055457	ExpressionStatement	free ( return_addr )	4746:6:142914:142932	3053358	1	True				
ANR	3055458	CallExpression	free ( return_addr )		3053358	0					
ANR	3055459	Callee	free		3053358	0					
ANR	3055460	Identifier	free		3053358	0					
ANR	3055461	ArgumentList	return_addr		3053358	1					
ANR	3055462	Argument	return_addr		3053358	0					
ANR	3055463	Identifier	return_addr		3053358	0					
ANR	3055464	ExpressionStatement	sock -> decode ( )	4750:5:142984:142998	3053358	24	True				
ANR	3055465	CallExpression	sock -> decode ( )		3053358	0					
ANR	3055466	Callee	sock -> decode		3053358	0					
ANR	3055467	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3055468	Identifier	sock		3053358	0					
ANR	3055469	Identifier	decode		3053358	1					
ANR	3055470	ArgumentList			3053358	1					
ANR	3055471	ExpressionStatement	sock -> end_of_message ( )	4751:5:143005:143027	3053358	25	True				
ANR	3055472	CallExpression	sock -> end_of_message ( )		3053358	0					
ANR	3055473	Callee	sock -> end_of_message		3053358	0					
ANR	3055474	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3055475	Identifier	sock		3053358	0					
ANR	3055476	Identifier	end_of_message		3053358	1					
ANR	3055477	ArgumentList			3053358	1					
ANR	3055478	ExpressionStatement	result = FALSE	4754:5:143065:143079	3053358	26	True				
ANR	3055479	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3055480	Identifier	result		3053358	0					
ANR	3055481	Identifier	FALSE		3053358	1					
ANR	3055482	GotoStatement	goto finalize ;	4755:5:143086:143099	3053358	27	True				
ANR	3055483	Identifier	finalize		3053358	0					
ANR	3055484	ElseStatement	else		3053358	0					
ANR	3055485	CompoundStatement		518:11:16086:16086	3053358	0					
ANR	3055486	IfStatement	if ( DebugFlags & D_SECURITY )		3053358	0					
ANR	3055487	Condition	DebugFlags & D_SECURITY	4760:9:143192:143214	3053358	0	True				
ANR	3055488	BitAndExpression	DebugFlags & D_SECURITY		3053358	0		&			
ANR	3055489	Identifier	DebugFlags		3053358	0					
ANR	3055490	Identifier	D_SECURITY		3053358	1					
ANR	3055491	CompoundStatement		522:6:16198:16222	3053358	1					
ANR	3055492	IdentifierDeclStatement	char * return_addr = NULL ;	4761:6:143225:143249	3053358	0	True				
ANR	3055493	IdentifierDecl	* return_addr = NULL		3053358	0					
ANR	3055494	IdentifierDeclType	char *		3053358	0					
ANR	3055495	Identifier	return_addr		3053358	1					
ANR	3055496	AssignmentExpression	* return_addr = NULL		3053358	2		=			
ANR	3055497	Identifier	NULL		3053358	0					
ANR	3055498	Identifier	NULL		3053358	1					
ANR	3055499	IfStatement	if ( session -> policy ( ) )		3053358	1					
ANR	3055500	Condition	session -> policy ( )	4762:9:143260:143276	3053358	0	True				
ANR	3055501	CallExpression	session -> policy ( )		3053358	0					
ANR	3055502	Callee	session -> policy		3053358	0					
ANR	3055503	PtrMemberAccess	session -> policy		3053358	0					
ANR	3055504	Identifier	session		3053358	0					
ANR	3055505	Identifier	policy		3053358	1					
ANR	3055506	ArgumentList			3053358	1					
ANR	3055507	CompoundStatement		523:28:16252:16252	3053358	1					
ANR	3055508	ExpressionStatement	"session -> policy ( ) -> LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"	4763:7:143288:143362	3053358	0	True				
ANR	3055509	CallExpression	"session -> policy ( ) -> LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"		3053358	0					
ANR	3055510	Callee	session -> policy ( ) -> LookupString		3053358	0					
ANR	3055511	PtrMemberAccess	session -> policy ( ) -> LookupString		3053358	0					
ANR	3055512	CallExpression	session -> policy ( )		3053358	0					
ANR	3055513	Callee	session -> policy		3053358	0					
ANR	3055514	PtrMemberAccess	session -> policy		3053358	0					
ANR	3055515	Identifier	session		3053358	0					
ANR	3055516	Identifier	policy		3053358	1					
ANR	3055517	ArgumentList			3053358	1					
ANR	3055518	Identifier	LookupString		3053358	1					
ANR	3055519	ArgumentList	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	1					
ANR	3055520	Argument	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	0					
ANR	3055521	Identifier	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	0					
ANR	3055522	Argument	& return_addr		3053358	1					
ANR	3055523	UnaryOperationExpression	& return_addr		3053358	0					
ANR	3055524	UnaryOperator	&		3053358	0					
ANR	3055525	Identifier	return_addr		3053358	1					
ANR	3055526	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: resuming session id %s%s%s:\\n"" , session -> id ( ) , return_addr ? "" with return address "" : """" , return_addr ? return_addr : """" )"	4765:6:143378:143584	3053358	2	True				
ANR	3055527	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: resuming session id %s%s%s:\\n"" , session -> id ( ) , return_addr ? "" with return address "" : """" , return_addr ? return_addr : """" )"		3053358	0					
ANR	3055528	Callee	dprintf		3053358	0					
ANR	3055529	Identifier	dprintf		3053358	0					
ANR	3055530	ArgumentList	D_SECURITY		3053358	1					
ANR	3055531	Argument	D_SECURITY		3053358	0					
ANR	3055532	Identifier	D_SECURITY		3053358	0					
ANR	3055533	Argument	"""DC_AUTHENTICATE: resuming session id %s%s%s:\\n"""		3053358	1					
ANR	3055534	PrimaryExpression	"""DC_AUTHENTICATE: resuming session id %s%s%s:\\n"""		3053358	0					
ANR	3055535	Argument	session -> id ( )		3053358	2					
ANR	3055536	CallExpression	session -> id ( )		3053358	0					
ANR	3055537	Callee	session -> id		3053358	0					
ANR	3055538	PtrMemberAccess	session -> id		3053358	0					
ANR	3055539	Identifier	session		3053358	0					
ANR	3055540	Identifier	id		3053358	1					
ANR	3055541	ArgumentList			3053358	1					
ANR	3055542	Argument	"return_addr ? "" with return address "" : """""		3053358	3					
ANR	3055543	ConditionalExpression	"return_addr ? "" with return address "" : """""		3053358	0					
ANR	3055544	Condition	return_addr		3053358	0					
ANR	3055545	Identifier	return_addr		3053358	0					
ANR	3055546	PrimaryExpression	""" with return address """		3053358	1					
ANR	3055547	PrimaryExpression	""""""		3053358	2					
ANR	3055548	Argument	"return_addr ? return_addr : """""		3053358	4					
ANR	3055549	ConditionalExpression	"return_addr ? return_addr : """""		3053358	0					
ANR	3055550	Condition	return_addr		3053358	0					
ANR	3055551	Identifier	return_addr		3053358	0					
ANR	3055552	Identifier	return_addr		3053358	1					
ANR	3055553	PrimaryExpression	""""""		3053358	2					
ANR	3055554	ExpressionStatement	free ( return_addr )	4769:6:143592:143609	3053358	3	True				
ANR	3055555	CallExpression	free ( return_addr )		3053358	0					
ANR	3055556	Callee	free		3053358	0					
ANR	3055557	Identifier	free		3053358	0					
ANR	3055558	ArgumentList	return_addr		3053358	1					
ANR	3055559	Argument	return_addr		3053358	0					
ANR	3055560	Identifier	return_addr		3053358	0					
ANR	3055561	ExpressionStatement	session -> renewLease ( )	4773:4:143629:143650	3053358	3	True				
ANR	3055562	CallExpression	session -> renewLease ( )		3053358	0					
ANR	3055563	Callee	session -> renewLease		3053358	0					
ANR	3055564	PtrMemberAccess	session -> renewLease		3053358	0					
ANR	3055565	Identifier	session		3053358	0					
ANR	3055566	Identifier	renewLease		3053358	1					
ANR	3055567	ArgumentList			3053358	1					
ANR	3055568	IfStatement	if ( session -> key ( ) )		3053358	4					
ANR	3055569	Condition	session -> key ( )	4775:8:143661:143674	3053358	0	True				
ANR	3055570	CallExpression	session -> key ( )		3053358	0					
ANR	3055571	Callee	session -> key		3053358	0					
ANR	3055572	PtrMemberAccess	session -> key		3053358	0					
ANR	3055573	Identifier	session		3053358	0					
ANR	3055574	Identifier	key		3053358	1					
ANR	3055575	ArgumentList			3053358	1					
ANR	3055576	CompoundStatement		536:24:16650:16650	3053358	1					
ANR	3055577	ExpressionStatement	the_key = new KeyInfo ( * session -> key ( ) )	4777:5:143727:143765	3053358	0	True				
ANR	3055578	AssignmentExpression	the_key = new KeyInfo ( * session -> key ( ) )		3053358	0		=			
ANR	3055579	Identifier	the_key		3053358	0					
ANR	3055580	UnaryOperationExpression	* session -> key ( )		3053358	1					
ANR	3055581	UnaryOperator	*		3053358	0					
ANR	3055582	CallExpression	session -> key ( )		3053358	1					
ANR	3055583	Callee	session -> key		3053358	0					
ANR	3055584	PtrMemberAccess	session -> key		3053358	0					
ANR	3055585	Identifier	session		3053358	0					
ANR	3055586	Identifier	key		3053358	1					
ANR	3055587	ArgumentList			3053358	1					
ANR	3055588	IfStatement	if ( session -> policy ( ) )		3053358	5					
ANR	3055589	Condition	session -> policy ( )	4780:8:143782:143798	3053358	0	True				
ANR	3055590	CallExpression	session -> policy ( )		3053358	0					
ANR	3055591	Callee	session -> policy		3053358	0					
ANR	3055592	PtrMemberAccess	session -> policy		3053358	0					
ANR	3055593	Identifier	session		3053358	0					
ANR	3055594	Identifier	policy		3053358	1					
ANR	3055595	ArgumentList			3053358	1					
ANR	3055596	CompoundStatement		541:27:16774:16774	3053358	1					
ANR	3055597	ExpressionStatement	the_policy = new ClassAd ( * session -> policy ( ) )	4782:5:143851:143895	3053358	0	True				
ANR	3055598	AssignmentExpression	the_policy = new ClassAd ( * session -> policy ( ) )		3053358	0		=			
ANR	3055599	Identifier	the_policy		3053358	0					
ANR	3055600	UnaryOperationExpression	* session -> policy ( )		3053358	1					
ANR	3055601	UnaryOperator	*		3053358	0					
ANR	3055602	CallExpression	session -> policy ( )		3053358	1					
ANR	3055603	Callee	session -> policy		3053358	0					
ANR	3055604	PtrMemberAccess	session -> policy		3053358	0					
ANR	3055605	Identifier	session		3053358	0					
ANR	3055606	Identifier	policy		3053358	1					
ANR	3055607	ArgumentList			3053358	1					
ANR	3055608	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	1					
ANR	3055609	Condition	DebugFlags & D_FULLDEBUG	4783:9:143906:143929	3053358	0	True				
ANR	3055610	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3055611	Identifier	DebugFlags		3053358	0					
ANR	3055612	Identifier	D_FULLDEBUG		3053358	1					
ANR	3055613	CompoundStatement		544:35:16905:16905	3053358	1					
ANR	3055614	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: Cached Session:\\n"" )"	4784:6:143940:143998	3053358	0	True				
ANR	3055615	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: Cached Session:\\n"" )"		3053358	0					
ANR	3055616	Callee	dprintf		3053358	0					
ANR	3055617	Identifier	dprintf		3053358	0					
ANR	3055618	ArgumentList	D_SECURITY		3053358	1					
ANR	3055619	Argument	D_SECURITY		3053358	0					
ANR	3055620	Identifier	D_SECURITY		3053358	0					
ANR	3055621	Argument	"""DC_AUTHENTICATE: Cached Session:\\n"""		3053358	1					
ANR	3055622	PrimaryExpression	"""DC_AUTHENTICATE: Cached Session:\\n"""		3053358	0					
ANR	3055623	ExpressionStatement	the_policy -> dPrint ( D_SECURITY )	4785:6:144006:144037	3053358	1	True				
ANR	3055624	CallExpression	the_policy -> dPrint ( D_SECURITY )		3053358	0					
ANR	3055625	Callee	the_policy -> dPrint		3053358	0					
ANR	3055626	PtrMemberAccess	the_policy -> dPrint		3053358	0					
ANR	3055627	Identifier	the_policy		3053358	0					
ANR	3055628	Identifier	dPrint		3053358	1					
ANR	3055629	ArgumentList	D_SECURITY		3053358	1					
ANR	3055630	Argument	D_SECURITY		3053358	0					
ANR	3055631	Identifier	D_SECURITY		3053358	0					
ANR	3055632	IfStatement	if ( the_policy )		3053358	6					
ANR	3055633	Condition	the_policy	4790:8:144101:144110	3053358	0	True				
ANR	3055634	Identifier	the_policy		3053358	0					
ANR	3055635	CompoundStatement		561:5:17323:17354	3053358	1					
ANR	3055636	IdentifierDeclStatement	char * the_user = NULL ;	4791:5:144120:144142	3053358	0	True				
ANR	3055637	IdentifierDecl	* the_user = NULL		3053358	0					
ANR	3055638	IdentifierDeclType	char *		3053358	0					
ANR	3055639	Identifier	the_user		3053358	1					
ANR	3055640	AssignmentExpression	* the_user = NULL		3053358	2		=			
ANR	3055641	Identifier	NULL		3053358	0					
ANR	3055642	Identifier	NULL		3053358	1					
ANR	3055643	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_USER , & the_user )"	4792:5:144149:144200	3053358	1	True				
ANR	3055644	CallExpression	"the_policy -> LookupString ( ATTR_SEC_USER , & the_user )"		3053358	0					
ANR	3055645	Callee	the_policy -> LookupString		3053358	0					
ANR	3055646	PtrMemberAccess	the_policy -> LookupString		3053358	0					
ANR	3055647	Identifier	the_policy		3053358	0					
ANR	3055648	Identifier	LookupString		3053358	1					
ANR	3055649	ArgumentList	ATTR_SEC_USER		3053358	1					
ANR	3055650	Argument	ATTR_SEC_USER		3053358	0					
ANR	3055651	Identifier	ATTR_SEC_USER		3053358	0					
ANR	3055652	Argument	& the_user		3053358	1					
ANR	3055653	UnaryOperationExpression	& the_user		3053358	0					
ANR	3055654	UnaryOperator	&		3053358	0					
ANR	3055655	Identifier	the_user		3053358	1					
ANR	3055656	IfStatement	if ( the_user )		3053358	2					
ANR	3055657	Condition	the_user	4793:9:144211:144218	3053358	0	True				
ANR	3055658	Identifier	the_user		3053358	0					
ANR	3055659	CompoundStatement		554:19:17194:17194	3053358	1					
ANR	3055660	ExpressionStatement	user = the_user	4795:6:144273:144288	3053358	0	True				
ANR	3055661	AssignmentExpression	user = the_user		3053358	0		=			
ANR	3055662	Identifier	user		3053358	0					
ANR	3055663	Identifier	the_user		3053358	1					
ANR	3055664	ExpressionStatement	free ( the_user )	4796:6:144296:144312	3053358	1	True				
ANR	3055665	CallExpression	free ( the_user )		3053358	0					
ANR	3055666	Callee	free		3053358	0					
ANR	3055667	Identifier	free		3053358	0					
ANR	3055668	ArgumentList	the_user		3053358	1					
ANR	3055669	Argument	the_user		3053358	0					
ANR	3055670	Identifier	the_user		3053358	0					
ANR	3055671	ExpressionStatement	the_user = NULL	4797:6:144320:144335	3053358	2	True				
ANR	3055672	AssignmentExpression	the_user = NULL		3053358	0		=			
ANR	3055673	Identifier	the_user		3053358	0					
ANR	3055674	Identifier	NULL		3053358	1					
ANR	3055675	IdentifierDeclStatement	bool tried_authentication = false ;	4800:5:144350:144381	3053358	3	True				
ANR	3055676	IdentifierDecl	tried_authentication = false		3053358	0					
ANR	3055677	IdentifierDeclType	bool		3053358	0					
ANR	3055678	Identifier	tried_authentication		3053358	1					
ANR	3055679	AssignmentExpression	tried_authentication = false		3053358	2		=			
ANR	3055680	Identifier	false		3053358	0					
ANR	3055681	Identifier	false		3053358	1					
ANR	3055682	ExpressionStatement	"the_policy -> LookupBool ( ATTR_SEC_TRIED_AUTHENTICATION , tried_authentication )"	4801:5:144388:144462	3053358	4	True				
ANR	3055683	CallExpression	"the_policy -> LookupBool ( ATTR_SEC_TRIED_AUTHENTICATION , tried_authentication )"		3053358	0					
ANR	3055684	Callee	the_policy -> LookupBool		3053358	0					
ANR	3055685	PtrMemberAccess	the_policy -> LookupBool		3053358	0					
ANR	3055686	Identifier	the_policy		3053358	0					
ANR	3055687	Identifier	LookupBool		3053358	1					
ANR	3055688	ArgumentList	ATTR_SEC_TRIED_AUTHENTICATION		3053358	1					
ANR	3055689	Argument	ATTR_SEC_TRIED_AUTHENTICATION		3053358	0					
ANR	3055690	Identifier	ATTR_SEC_TRIED_AUTHENTICATION		3053358	0					
ANR	3055691	Argument	tried_authentication		3053358	1					
ANR	3055692	Identifier	tried_authentication		3053358	0					
ANR	3055693	ExpressionStatement	sock -> setTriedAuthentication ( tried_authentication )	4802:5:144469:144519	3053358	5	True				
ANR	3055694	CallExpression	sock -> setTriedAuthentication ( tried_authentication )		3053358	0					
ANR	3055695	Callee	sock -> setTriedAuthentication		3053358	0					
ANR	3055696	PtrMemberAccess	sock -> setTriedAuthentication		3053358	0					
ANR	3055697	Identifier	sock		3053358	0					
ANR	3055698	Identifier	setTriedAuthentication		3053358	1					
ANR	3055699	ArgumentList	tried_authentication		3053358	1					
ANR	3055700	Argument	tried_authentication		3053358	0					
ANR	3055701	Identifier	tried_authentication		3053358	0					
ANR	3055702	ExpressionStatement	new_session = false	4804:4:144531:144550	3053358	7	True				
ANR	3055703	AssignmentExpression	new_session = false		3053358	0		=			
ANR	3055704	Identifier	new_session		3053358	0					
ANR	3055705	Identifier	false		3053358	1					
ANR	3055706	ElseStatement	else		3053358	0					
ANR	3055707	CompoundStatement		610:4:18806:18918	3053358	0					
ANR	3055708	IdentifierDeclStatement	ClassAd our_policy ;	4809:4:144686:144704	3053358	0	True				
ANR	3055709	IdentifierDecl	our_policy		3053358	0					
ANR	3055710	IdentifierDeclType	ClassAd		3053358	0					
ANR	3055711	Identifier	our_policy		3053358	1					
ANR	3055712	IfStatement	"if ( ! sec_man -> FillInSecurityPolicyAd ( comTable [ cmd_index ] . perm , & our_policy , false , false , comTable [ cmd_index ] . force_authentication ) )"		3053358	1					
ANR	3055713	Condition	"! sec_man -> FillInSecurityPolicyAd ( comTable [ cmd_index ] . perm , & our_policy , false , false , comTable [ cmd_index ] . force_authentication )"	4810:8:144714:144868	3053358	0	True				
ANR	3055714	UnaryOperationExpression	"! sec_man -> FillInSecurityPolicyAd ( comTable [ cmd_index ] . perm , & our_policy , false , false , comTable [ cmd_index ] . force_authentication )"		3053358	0					
ANR	3055715	UnaryOperator	!		3053358	0					
ANR	3055716	CallExpression	"sec_man -> FillInSecurityPolicyAd ( comTable [ cmd_index ] . perm , & our_policy , false , false , comTable [ cmd_index ] . force_authentication )"		3053358	1					
ANR	3055717	Callee	sec_man -> FillInSecurityPolicyAd		3053358	0					
ANR	3055718	PtrMemberAccess	sec_man -> FillInSecurityPolicyAd		3053358	0					
ANR	3055719	Identifier	sec_man		3053358	0					
ANR	3055720	Identifier	FillInSecurityPolicyAd		3053358	1					
ANR	3055721	ArgumentList	comTable [ cmd_index ] . perm		3053358	1					
ANR	3055722	Argument	comTable [ cmd_index ] . perm		3053358	0					
ANR	3055723	MemberAccess	comTable [ cmd_index ] . perm		3053358	0					
ANR	3055724	ArrayIndexing	comTable [ cmd_index ]		3053358	0					
ANR	3055725	Identifier	comTable		3053358	0					
ANR	3055726	Identifier	cmd_index		3053358	1					
ANR	3055727	Identifier	perm		3053358	1					
ANR	3055728	Argument	& our_policy		3053358	1					
ANR	3055729	UnaryOperationExpression	& our_policy		3053358	0					
ANR	3055730	UnaryOperator	&		3053358	0					
ANR	3055731	Identifier	our_policy		3053358	1					
ANR	3055732	Argument	false		3053358	2					
ANR	3055733	Identifier	false		3053358	0					
ANR	3055734	Argument	false		3053358	3					
ANR	3055735	Identifier	false		3053358	0					
ANR	3055736	Argument	comTable [ cmd_index ] . force_authentication		3053358	4					
ANR	3055737	MemberAccess	comTable [ cmd_index ] . force_authentication		3053358	0					
ANR	3055738	ArrayIndexing	comTable [ cmd_index ]		3053358	0					
ANR	3055739	Identifier	comTable		3053358	0					
ANR	3055740	Identifier	cmd_index		3053358	1					
ANR	3055741	Identifier	force_authentication		3053358	1					
ANR	3055742	CompoundStatement		577:4:17849:17849	3053358	1					
ANR	3055743	Statement	dprintf	4819:5:144969:144975	3053358	0	True				
ANR	3055744	Statement	(	4819:12:144976:144976	3053358	1	True				
ANR	3055745	Statement	D_ALWAYS	4819:14:144978:144985	3053358	2	True				
ANR	3055746	Statement	","	4819:22:144986:144986	3053358	3	True				
ANR	3055747	Statement	"""DC_AUTHENTICATE: """	4819:24:144988:145006	3053358	4	True				
ANR	3055748	Statement	"""Our security policy is invalid!\\n"""	4820:8:145016:145050	3053358	5	True				
ANR	3055749	Statement	)	4820:44:145052:145052	3053358	6	True				
ANR	3055750	ExpressionStatement		4820:45:145053:145053	3053358	7	True				
ANR	3055751	ExpressionStatement	result = FALSE	4821:5:145060:145074	3053358	8	True				
ANR	3055752	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3055753	Identifier	result		3053358	0					
ANR	3055754	Identifier	FALSE		3053358	1					
ANR	3055755	GotoStatement	goto finalize ;	4822:5:145081:145094	3053358	9	True				
ANR	3055756	Identifier	finalize		3053358	0					
ANR	3055757	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	2					
ANR	3055758	Condition	DebugFlags & D_FULLDEBUG	4825:8:145111:145134	3053358	0	True				
ANR	3055759	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3055760	Identifier	DebugFlags		3053358	0					
ANR	3055761	Identifier	D_FULLDEBUG		3053358	1					
ANR	3055762	CompoundStatement		586:34:18110:18110	3053358	1					
ANR	3055763	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: our_policy:\\n"" )"	4826:5:145144:145200	3053358	0	True				
ANR	3055764	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: our_policy:\\n"" )"		3053358	0					
ANR	3055765	Callee	dprintf		3053358	0					
ANR	3055766	Identifier	dprintf		3053358	0					
ANR	3055767	ArgumentList	D_SECURITY		3053358	1					
ANR	3055768	Argument	D_SECURITY		3053358	0					
ANR	3055769	Identifier	D_SECURITY		3053358	0					
ANR	3055770	Argument	"""DC_AUTHENTICATE: our_policy:\\n"""		3053358	1					
ANR	3055771	PrimaryExpression	"""DC_AUTHENTICATE: our_policy:\\n"""		3053358	0					
ANR	3055772	ExpressionStatement	our_policy . dPrint ( D_SECURITY )	4827:5:145207:145236	3053358	1	True				
ANR	3055773	CallExpression	our_policy . dPrint ( D_SECURITY )		3053358	0					
ANR	3055774	Callee	our_policy . dPrint		3053358	0					
ANR	3055775	MemberAccess	our_policy . dPrint		3053358	0					
ANR	3055776	Identifier	our_policy		3053358	0					
ANR	3055777	Identifier	dPrint		3053358	1					
ANR	3055778	ArgumentList	D_SECURITY		3053358	1					
ANR	3055779	Argument	D_SECURITY		3053358	0					
ANR	3055780	Identifier	D_SECURITY		3053358	0					
ANR	3055781	ExpressionStatement	"the_policy = sec_man -> ReconcileSecurityPolicyAds ( auth_info , our_policy )"	4831:4:145293:145384	3053358	3	True				
ANR	3055782	AssignmentExpression	"the_policy = sec_man -> ReconcileSecurityPolicyAds ( auth_info , our_policy )"		3053358	0		=			
ANR	3055783	Identifier	the_policy		3053358	0					
ANR	3055784	CallExpression	"sec_man -> ReconcileSecurityPolicyAds ( auth_info , our_policy )"		3053358	1					
ANR	3055785	Callee	sec_man -> ReconcileSecurityPolicyAds		3053358	0					
ANR	3055786	PtrMemberAccess	sec_man -> ReconcileSecurityPolicyAds		3053358	0					
ANR	3055787	Identifier	sec_man		3053358	0					
ANR	3055788	Identifier	ReconcileSecurityPolicyAds		3053358	1					
ANR	3055789	ArgumentList	auth_info		3053358	1					
ANR	3055790	Argument	auth_info		3053358	0					
ANR	3055791	Identifier	auth_info		3053358	0					
ANR	3055792	Argument	our_policy		3053358	1					
ANR	3055793	Identifier	our_policy		3053358	0					
ANR	3055794	IfStatement	if ( ! the_policy )		3053358	4					
ANR	3055795	Condition	! the_policy	4834:8:145395:145405	3053358	0	True				
ANR	3055796	UnaryOperationExpression	! the_policy		3053358	0					
ANR	3055797	UnaryOperator	!		3053358	0					
ANR	3055798	Identifier	the_policy		3053358	1					
ANR	3055799	CompoundStatement		595:21:18381:18381	3053358	1					
ANR	3055800	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: Unable to reconcile!\\n"" )"	4835:5:145415:145475	3053358	0	True				
ANR	3055801	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: Unable to reconcile!\\n"" )"		3053358	0					
ANR	3055802	Callee	dprintf		3053358	0					
ANR	3055803	Identifier	dprintf		3053358	0					
ANR	3055804	ArgumentList	D_ALWAYS		3053358	1					
ANR	3055805	Argument	D_ALWAYS		3053358	0					
ANR	3055806	Identifier	D_ALWAYS		3053358	0					
ANR	3055807	Argument	"""DC_AUTHENTICATE: Unable to reconcile!\\n"""		3053358	1					
ANR	3055808	PrimaryExpression	"""DC_AUTHENTICATE: Unable to reconcile!\\n"""		3053358	0					
ANR	3055809	ExpressionStatement	result = FALSE	4836:5:145482:145496	3053358	1	True				
ANR	3055810	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3055811	Identifier	result		3053358	0					
ANR	3055812	Identifier	FALSE		3053358	1					
ANR	3055813	GotoStatement	goto finalize ;	4837:5:145503:145516	3053358	2	True				
ANR	3055814	Identifier	finalize		3053358	0					
ANR	3055815	ElseStatement	else		3053358	0					
ANR	3055816	CompoundStatement		599:11:18502:18502	3053358	0					
ANR	3055817	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	0					
ANR	3055818	Condition	DebugFlags & D_FULLDEBUG	4839:9:145540:145563	3053358	0	True				
ANR	3055819	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3055820	Identifier	DebugFlags		3053358	0					
ANR	3055821	Identifier	D_FULLDEBUG		3053358	1					
ANR	3055822	CompoundStatement		600:35:18539:18539	3053358	1					
ANR	3055823	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: the_policy:\\n"" )"	4840:6:145574:145630	3053358	0	True				
ANR	3055824	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: the_policy:\\n"" )"		3053358	0					
ANR	3055825	Callee	dprintf		3053358	0					
ANR	3055826	Identifier	dprintf		3053358	0					
ANR	3055827	ArgumentList	D_SECURITY		3053358	1					
ANR	3055828	Argument	D_SECURITY		3053358	0					
ANR	3055829	Identifier	D_SECURITY		3053358	0					
ANR	3055830	Argument	"""DC_AUTHENTICATE: the_policy:\\n"""		3053358	1					
ANR	3055831	PrimaryExpression	"""DC_AUTHENTICATE: the_policy:\\n"""		3053358	0					
ANR	3055832	ExpressionStatement	the_policy -> dPrint ( D_SECURITY )	4841:6:145638:145668	3053358	1	True				
ANR	3055833	CallExpression	the_policy -> dPrint ( D_SECURITY )		3053358	0					
ANR	3055834	Callee	the_policy -> dPrint		3053358	0					
ANR	3055835	PtrMemberAccess	the_policy -> dPrint		3053358	0					
ANR	3055836	Identifier	the_policy		3053358	0					
ANR	3055837	Identifier	dPrint		3053358	1					
ANR	3055838	ArgumentList	D_SECURITY		3053358	1					
ANR	3055839	Argument	D_SECURITY		3053358	0					
ANR	3055840	Identifier	D_SECURITY		3053358	0					
ANR	3055841	ExpressionStatement	"the_policy -> Assign ( ATTR_SEC_REMOTE_VERSION , CondorVersion ( ) )"	4846:4:145741:145801	3053358	5	True				
ANR	3055842	CallExpression	"the_policy -> Assign ( ATTR_SEC_REMOTE_VERSION , CondorVersion ( ) )"		3053358	0					
ANR	3055843	Callee	the_policy -> Assign		3053358	0					
ANR	3055844	PtrMemberAccess	the_policy -> Assign		3053358	0					
ANR	3055845	Identifier	the_policy		3053358	0					
ANR	3055846	Identifier	Assign		3053358	1					
ANR	3055847	ArgumentList	ATTR_SEC_REMOTE_VERSION		3053358	1					
ANR	3055848	Argument	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3055849	Identifier	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3055850	Argument	CondorVersion ( )		3053358	1					
ANR	3055851	CallExpression	CondorVersion ( )		3053358	0					
ANR	3055852	Callee	CondorVersion		3053358	0					
ANR	3055853	Identifier	CondorVersion		3053358	0					
ANR	3055854	ArgumentList			3053358	1					
ANR	3055855	IdentifierDeclStatement	"SecMan :: sec_feat_act will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION ) ;"	4849:4:145833:145945	3053358	6	True				
ANR	3055856	IdentifierDecl	"will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		3053358	0					
ANR	3055857	IdentifierDeclType	SecMan :: sec_feat_act		3053358	0					
ANR	3055858	Identifier	will_authenticate		3053358	1					
ANR	3055859	AssignmentExpression	"will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		3053358	2		=			
ANR	3055860	Identifier	will_authenticate		3053358	0					
ANR	3055861	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		3053358	1					
ANR	3055862	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3055863	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3055864	Identifier	sec_man		3053358	0					
ANR	3055865	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3055866	ArgumentList	* the_policy		3053358	1					
ANR	3055867	Argument	* the_policy		3053358	0					
ANR	3055868	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3055869	UnaryOperator	*		3053358	0					
ANR	3055870	Identifier	the_policy		3053358	1					
ANR	3055871	Argument	ATTR_SEC_AUTHENTICATION		3053358	1					
ANR	3055872	Identifier	ATTR_SEC_AUTHENTICATION		3053358	0					
ANR	3055873	IfStatement	"if ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_NEW_SESSION ) == SecMan :: SEC_FEAT_ACT_YES )"		3053358	7					
ANR	3055874	Condition	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_NEW_SESSION ) == SecMan :: SEC_FEAT_ACT_YES"	4851:8:145956:146044	3053358	0	True				
ANR	3055875	EqualityExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_NEW_SESSION ) == SecMan :: SEC_FEAT_ACT_YES"		3053358	0		==			
ANR	3055876	CallExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_NEW_SESSION )"		3053358	0					
ANR	3055877	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3055878	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3055879	Identifier	sec_man		3053358	0					
ANR	3055880	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3055881	ArgumentList	auth_info		3053358	1					
ANR	3055882	Argument	auth_info		3053358	0					
ANR	3055883	Identifier	auth_info		3053358	0					
ANR	3055884	Argument	ATTR_SEC_NEW_SESSION		3053358	1					
ANR	3055885	Identifier	ATTR_SEC_NEW_SESSION		3053358	0					
ANR	3055886	Identifier	SecMan :: SEC_FEAT_ACT_YES		3053358	1					
ANR	3055887	CompoundStatement		617:5:19090:19105	3053358	1					
ANR	3055888	IdentifierDeclStatement	MyString tmpStr ;	4856:5:146117:146132	3053358	0	True				
ANR	3055889	IdentifierDecl	tmpStr		3053358	0					
ANR	3055890	IdentifierDeclType	MyString		3053358	0					
ANR	3055891	Identifier	tmpStr		3053358	1					
ANR	3055892	ExpressionStatement	"tmpStr . sprintf ( ""%s:%i:%i:%i"" , get_local_hostname ( ) . Value ( ) , mypid , ( int ) time ( 0 ) , ZZZ_always_increase ( ) )"	4857:5:146139:146262	3053358	1	True				
ANR	3055893	CallExpression	"tmpStr . sprintf ( ""%s:%i:%i:%i"" , get_local_hostname ( ) . Value ( ) , mypid , ( int ) time ( 0 ) , ZZZ_always_increase ( ) )"		3053358	0					
ANR	3055894	Callee	tmpStr . sprintf		3053358	0					
ANR	3055895	MemberAccess	tmpStr . sprintf		3053358	0					
ANR	3055896	Identifier	tmpStr		3053358	0					
ANR	3055897	Identifier	sprintf		3053358	1					
ANR	3055898	ArgumentList	"""%s:%i:%i:%i"""		3053358	1					
ANR	3055899	Argument	"""%s:%i:%i:%i"""		3053358	0					
ANR	3055900	PrimaryExpression	"""%s:%i:%i:%i"""		3053358	0					
ANR	3055901	Argument	get_local_hostname ( ) . Value ( )		3053358	1					
ANR	3055902	CallExpression	get_local_hostname ( ) . Value ( )		3053358	0					
ANR	3055903	Callee	get_local_hostname ( ) . Value		3053358	0					
ANR	3055904	MemberAccess	get_local_hostname ( ) . Value		3053358	0					
ANR	3055905	CallExpression	get_local_hostname ( )		3053358	0					
ANR	3055906	Callee	get_local_hostname		3053358	0					
ANR	3055907	Identifier	get_local_hostname		3053358	0					
ANR	3055908	ArgumentList			3053358	1					
ANR	3055909	Identifier	Value		3053358	1					
ANR	3055910	ArgumentList			3053358	1					
ANR	3055911	Argument	mypid		3053358	2					
ANR	3055912	Identifier	mypid		3053358	0					
ANR	3055913	Argument	( int ) time ( 0 )		3053358	3					
ANR	3055914	CastExpression	( int ) time ( 0 )		3053358	0					
ANR	3055915	CastTarget	int		3053358	0					
ANR	3055916	CallExpression	time ( 0 )		3053358	1					
ANR	3055917	Callee	time		3053358	0					
ANR	3055918	Identifier	time		3053358	0					
ANR	3055919	ArgumentList	0		3053358	1					
ANR	3055920	Argument	0		3053358	0					
ANR	3055921	PrimaryExpression	0		3053358	0					
ANR	3055922	Argument	ZZZ_always_increase ( )		3053358	4					
ANR	3055923	CallExpression	ZZZ_always_increase ( )		3053358	0					
ANR	3055924	Callee	ZZZ_always_increase		3053358	0					
ANR	3055925	Identifier	ZZZ_always_increase		3053358	0					
ANR	3055926	ArgumentList			3053358	1					
ANR	3055927	ExpressionStatement	assert ( the_sid == NULL )	4860:5:146269:146293	3053358	2	True				
ANR	3055928	CallExpression	assert ( the_sid == NULL )		3053358	0					
ANR	3055929	Callee	assert		3053358	0					
ANR	3055930	Identifier	assert		3053358	0					
ANR	3055931	ArgumentList	the_sid == NULL		3053358	1					
ANR	3055932	Argument	the_sid == NULL		3053358	0					
ANR	3055933	EqualityExpression	the_sid == NULL		3053358	0		==			
ANR	3055934	Identifier	the_sid		3053358	0					
ANR	3055935	Identifier	NULL		3053358	1					
ANR	3055936	ExpressionStatement	the_sid = strdup ( tmpStr . Value ( ) )	4861:5:146300:146332	3053358	3	True				
ANR	3055937	AssignmentExpression	the_sid = strdup ( tmpStr . Value ( ) )		3053358	0		=			
ANR	3055938	Identifier	the_sid		3053358	0					
ANR	3055939	CallExpression	strdup ( tmpStr . Value ( ) )		3053358	1					
ANR	3055940	Callee	strdup		3053358	0					
ANR	3055941	Identifier	strdup		3053358	0					
ANR	3055942	ArgumentList	tmpStr . Value ( )		3053358	1					
ANR	3055943	Argument	tmpStr . Value ( )		3053358	0					
ANR	3055944	CallExpression	tmpStr . Value ( )		3053358	0					
ANR	3055945	Callee	tmpStr . Value		3053358	0					
ANR	3055946	MemberAccess	tmpStr . Value		3053358	0					
ANR	3055947	Identifier	tmpStr		3053358	0					
ANR	3055948	Identifier	Value		3053358	1					
ANR	3055949	ArgumentList			3053358	1					
ANR	3055950	IfStatement	if ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES )		3053358	4					
ANR	3055951	Condition	will_authenticate == SecMan :: SEC_FEAT_ACT_YES	4863:9:146344:146388	3053358	0	True				
ANR	3055952	EqualityExpression	will_authenticate == SecMan :: SEC_FEAT_ACT_YES		3053358	0		==			
ANR	3055953	Identifier	will_authenticate		3053358	0					
ANR	3055954	Identifier	SecMan :: SEC_FEAT_ACT_YES		3053358	1					
ANR	3055955	CompoundStatement		634:6:19746:19769	3053358	1					
ANR	3055956	IdentifierDeclStatement	char * crypto_method = NULL ;	4865:6:146400:146426	3053358	0	True				
ANR	3055957	IdentifierDecl	* crypto_method = NULL		3053358	0					
ANR	3055958	IdentifierDeclType	char *		3053358	0					
ANR	3055959	Identifier	crypto_method		3053358	1					
ANR	3055960	AssignmentExpression	* crypto_method = NULL		3053358	2		=			
ANR	3055961	Identifier	NULL		3053358	0					
ANR	3055962	Identifier	NULL		3053358	1					
ANR	3055963	IfStatement	"if ( ! the_policy -> LookupString ( ATTR_SEC_CRYPTO_METHODS , & crypto_method ) )"		3053358	1					
ANR	3055964	Condition	"! the_policy -> LookupString ( ATTR_SEC_CRYPTO_METHODS , & crypto_method )"	4866:10:146438:146503	3053358	0	True				
ANR	3055965	UnaryOperationExpression	"! the_policy -> LookupString ( ATTR_SEC_CRYPTO_METHODS , & crypto_method )"		3053358	0					
ANR	3055966	UnaryOperator	!		3053358	0					
ANR	3055967	CallExpression	"the_policy -> LookupString ( ATTR_SEC_CRYPTO_METHODS , & crypto_method )"		3053358	1					
ANR	3055968	Callee	the_policy -> LookupString		3053358	0					
ANR	3055969	PtrMemberAccess	the_policy -> LookupString		3053358	0					
ANR	3055970	Identifier	the_policy		3053358	0					
ANR	3055971	Identifier	LookupString		3053358	1					
ANR	3055972	ArgumentList	ATTR_SEC_CRYPTO_METHODS		3053358	1					
ANR	3055973	Argument	ATTR_SEC_CRYPTO_METHODS		3053358	0					
ANR	3055974	Identifier	ATTR_SEC_CRYPTO_METHODS		3053358	0					
ANR	3055975	Argument	& crypto_method		3053358	1					
ANR	3055976	UnaryOperationExpression	& crypto_method		3053358	0					
ANR	3055977	UnaryOperator	&		3053358	0					
ANR	3055978	Identifier	crypto_method		3053358	1					
ANR	3055979	CompoundStatement		627:78:19479:19479	3053358	1					
ANR	3055980	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: tried to enable encryption for request from %s, but we have none!\\n"" , sock -> peer_description ( ) )"	4867:7:146515:146649	3053358	0	True				
ANR	3055981	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: tried to enable encryption for request from %s, but we have none!\\n"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3055982	Callee	dprintf		3053358	0					
ANR	3055983	Identifier	dprintf		3053358	0					
ANR	3055984	ArgumentList	D_ALWAYS		3053358	1					
ANR	3055985	Argument	D_ALWAYS		3053358	0					
ANR	3055986	Identifier	D_ALWAYS		3053358	0					
ANR	3055987	Argument	"""DC_AUTHENTICATE: tried to enable encryption for request from %s, but we have none!\\n"""		3053358	1					
ANR	3055988	PrimaryExpression	"""DC_AUTHENTICATE: tried to enable encryption for request from %s, but we have none!\\n"""		3053358	0					
ANR	3055989	Argument	sock -> peer_description ( )		3053358	2					
ANR	3055990	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3055991	Callee	sock -> peer_description		3053358	0					
ANR	3055992	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3055993	Identifier	sock		3053358	0					
ANR	3055994	Identifier	peer_description		3053358	1					
ANR	3055995	ArgumentList			3053358	1					
ANR	3055996	ExpressionStatement	result = FALSE	4868:7:146658:146672	3053358	1	True				
ANR	3055997	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3055998	Identifier	result		3053358	0					
ANR	3055999	Identifier	FALSE		3053358	1					
ANR	3056000	GotoStatement	goto finalize ;	4869:7:146681:146694	3053358	2	True				
ANR	3056001	Identifier	finalize		3053358	0					
ANR	3056002	IdentifierDeclStatement	unsigned char * rkey = Condor_Crypt_Base :: randomKey ( 24 ) ;	4872:6:146711:146765	3053358	2	True				
ANR	3056003	IdentifierDecl	* rkey = Condor_Crypt_Base :: randomKey ( 24 )		3053358	0					
ANR	3056004	IdentifierDeclType	unsigned char *		3053358	0					
ANR	3056005	Identifier	rkey		3053358	1					
ANR	3056006	AssignmentExpression	* rkey = Condor_Crypt_Base :: randomKey ( 24 )		3053358	2		=			
ANR	3056007	Identifier	rkey		3053358	0					
ANR	3056008	CallExpression	Condor_Crypt_Base :: randomKey ( 24 )		3053358	1					
ANR	3056009	Callee	Condor_Crypt_Base :: randomKey		3053358	0					
ANR	3056010	Identifier	Condor_Crypt_Base :: randomKey		3053358	0					
ANR	3056011	ArgumentList	24		3053358	1					
ANR	3056012	Argument	24		3053358	0					
ANR	3056013	PrimaryExpression	24		3053358	0					
ANR	3056014	IdentifierDeclStatement	unsigned char rbuf [ 24 ] ;	4873:6:146773:146796	3053358	3	True				
ANR	3056015	IdentifierDecl	rbuf [ 24 ]		3053358	0					
ANR	3056016	IdentifierDeclType	unsigned char [ 24 ]		3053358	0					
ANR	3056017	Identifier	rbuf		3053358	1					
ANR	3056018	PrimaryExpression	24		3053358	2					
ANR	3056019	IfStatement	if ( rkey )		3053358	4					
ANR	3056020	Condition	rkey	4874:10:146808:146811	3053358	0	True				
ANR	3056021	Identifier	rkey		3053358	0					
ANR	3056022	CompoundStatement		635:16:19787:19787	3053358	1					
ANR	3056023	ExpressionStatement	"memcpy ( rbuf , rkey , 24 )"	4875:7:146823:146846	3053358	0	True				
ANR	3056024	CallExpression	"memcpy ( rbuf , rkey , 24 )"		3053358	0					
ANR	3056025	Callee	memcpy		3053358	0					
ANR	3056026	Identifier	memcpy		3053358	0					
ANR	3056027	ArgumentList	rbuf		3053358	1					
ANR	3056028	Argument	rbuf		3053358	0					
ANR	3056029	Identifier	rbuf		3053358	0					
ANR	3056030	Argument	rkey		3053358	1					
ANR	3056031	Identifier	rkey		3053358	0					
ANR	3056032	Argument	24		3053358	2					
ANR	3056033	PrimaryExpression	24		3053358	0					
ANR	3056034	ExpressionStatement	free ( rkey )	4877:7:146896:146907	3053358	1	True				
ANR	3056035	CallExpression	free ( rkey )		3053358	0					
ANR	3056036	Callee	free		3053358	0					
ANR	3056037	Identifier	free		3053358	0					
ANR	3056038	ArgumentList	rkey		3053358	1					
ANR	3056039	Argument	rkey		3053358	0					
ANR	3056040	Identifier	rkey		3053358	0					
ANR	3056041	ElseStatement	else		3053358	0					
ANR	3056042	CompoundStatement		639:13:19895:19895	3053358	0					
ANR	3056043	ExpressionStatement	"memset ( rbuf , 0 , 24 )"	4879:7:146931:146951	3053358	0	True				
ANR	3056044	CallExpression	"memset ( rbuf , 0 , 24 )"		3053358	0					
ANR	3056045	Callee	memset		3053358	0					
ANR	3056046	Identifier	memset		3053358	0					
ANR	3056047	ArgumentList	rbuf		3053358	1					
ANR	3056048	Argument	rbuf		3053358	0					
ANR	3056049	Identifier	rbuf		3053358	0					
ANR	3056050	Argument	0		3053358	1					
ANR	3056051	PrimaryExpression	0		3053358	0					
ANR	3056052	Argument	24		3053358	2					
ANR	3056053	PrimaryExpression	24		3053358	0					
ANR	3056054	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to generate key for request from %s - no crypto available!\\n"" , sock -> peer_description ( ) )"	4880:7:146960:147094	3053358	1	True				
ANR	3056055	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to generate key for request from %s - no crypto available!\\n"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3056056	Callee	dprintf		3053358	0					
ANR	3056057	Identifier	dprintf		3053358	0					
ANR	3056058	ArgumentList	D_ALWAYS		3053358	1					
ANR	3056059	Argument	D_ALWAYS		3053358	0					
ANR	3056060	Identifier	D_ALWAYS		3053358	0					
ANR	3056061	Argument	"""DC_AUTHENTICATE: unable to generate key for request from %s - no crypto available!\\n"""		3053358	1					
ANR	3056062	PrimaryExpression	"""DC_AUTHENTICATE: unable to generate key for request from %s - no crypto available!\\n"""		3053358	0					
ANR	3056063	Argument	sock -> peer_description ( )		3053358	2					
ANR	3056064	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3056065	Callee	sock -> peer_description		3053358	0					
ANR	3056066	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3056067	Identifier	sock		3053358	0					
ANR	3056068	Identifier	peer_description		3053358	1					
ANR	3056069	ArgumentList			3053358	1					
ANR	3056070	ExpressionStatement	free ( crypto_method )	4881:7:147110:147131	3053358	2	True				
ANR	3056071	CallExpression	free ( crypto_method )		3053358	0					
ANR	3056072	Callee	free		3053358	0					
ANR	3056073	Identifier	free		3053358	0					
ANR	3056074	ArgumentList	crypto_method		3053358	1					
ANR	3056075	Argument	crypto_method		3053358	0					
ANR	3056076	Identifier	crypto_method		3053358	0					
ANR	3056077	ExpressionStatement	crypto_method = NULL	4882:7:147140:147160	3053358	3	True				
ANR	3056078	AssignmentExpression	crypto_method = NULL		3053358	0		=			
ANR	3056079	Identifier	crypto_method		3053358	0					
ANR	3056080	Identifier	NULL		3053358	1					
ANR	3056081	ExpressionStatement	result = FALSE	4883:7:147169:147183	3053358	4	True				
ANR	3056082	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3056083	Identifier	result		3053358	0					
ANR	3056084	Identifier	FALSE		3053358	1					
ANR	3056085	GotoStatement	goto finalize ;	4884:7:147192:147205	3053358	5	True				
ANR	3056086	Identifier	finalize		3053358	0					
ANR	3056087	SwitchStatement	switch ( toupper ( crypto_method [ 0 ] ) )		3053358	5					
ANR	3056088	Condition	toupper ( crypto_method [ 0 ] )	4887:14:147230:147254	3053358	0	True				
ANR	3056089	CallExpression	toupper ( crypto_method [ 0 ] )		3053358	0					
ANR	3056090	Callee	toupper		3053358	0					
ANR	3056091	Identifier	toupper		3053358	0					
ANR	3056092	ArgumentList	crypto_method [ 0 ]		3053358	1					
ANR	3056093	Argument	crypto_method [ 0 ]		3053358	0					
ANR	3056094	ArrayIndexing	crypto_method [ 0 ]		3053358	0					
ANR	3056095	Identifier	crypto_method		3053358	0					
ANR	3056096	PrimaryExpression	0		3053358	1					
ANR	3056097	CompoundStatement		648:41:20230:20230	3053358	1					
ANR	3056098	Label	case 'B' :	4888:7:147266:147274	3053358	0	True				
ANR	3056099	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating BLOWFISH key for session %s...\\n"" , the_sid )"	4889:8:147296:147389	3053358	1	True				
ANR	3056100	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating BLOWFISH key for session %s...\\n"" , the_sid )"		3053358	0					
ANR	3056101	Callee	dprintf		3053358	0					
ANR	3056102	Identifier	dprintf		3053358	0					
ANR	3056103	ArgumentList	D_SECURITY		3053358	1					
ANR	3056104	Argument	D_SECURITY		3053358	0					
ANR	3056105	Identifier	D_SECURITY		3053358	0					
ANR	3056106	Argument	"""DC_AUTHENTICATE: generating BLOWFISH key for session %s...\\n"""		3053358	1					
ANR	3056107	PrimaryExpression	"""DC_AUTHENTICATE: generating BLOWFISH key for session %s...\\n"""		3053358	0					
ANR	3056108	Argument	the_sid		3053358	2					
ANR	3056109	Identifier	the_sid		3053358	0					
ANR	3056110	ExpressionStatement	"the_key = new KeyInfo ( rbuf , 24 , CONDOR_BLOWFISH )"	4890:8:147399:147447	3053358	2	True				
ANR	3056111	AssignmentExpression	"the_key = new KeyInfo ( rbuf , 24 , CONDOR_BLOWFISH )"		3053358	0		=			
ANR	3056112	Identifier	the_key		3053358	0					
ANR	3056113	Expression	"rbuf , 24 , CONDOR_BLOWFISH"		3053358	1					
ANR	3056114	Identifier	rbuf		3053358	0					
ANR	3056115	Expression	"24 , CONDOR_BLOWFISH"		3053358	1					
ANR	3056116	PrimaryExpression	24		3053358	0					
ANR	3056117	Identifier	CONDOR_BLOWFISH		3053358	1					
ANR	3056118	BreakStatement	break ;	4891:8:147457:147462	3053358	3	True				
ANR	3056119	Label	case '3' :	4892:7:147471:147479	3053358	4	True				
ANR	3056120	Label	case 'T' :	4893:7:147496:147504	3053358	5	True				
ANR	3056121	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating 3DES key for session %s...\\n"" , the_sid )"	4894:8:147527:147616	3053358	6	True				
ANR	3056122	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating 3DES key for session %s...\\n"" , the_sid )"		3053358	0					
ANR	3056123	Callee	dprintf		3053358	0					
ANR	3056124	Identifier	dprintf		3053358	0					
ANR	3056125	ArgumentList	D_SECURITY		3053358	1					
ANR	3056126	Argument	D_SECURITY		3053358	0					
ANR	3056127	Identifier	D_SECURITY		3053358	0					
ANR	3056128	Argument	"""DC_AUTHENTICATE: generating 3DES key for session %s...\\n"""		3053358	1					
ANR	3056129	PrimaryExpression	"""DC_AUTHENTICATE: generating 3DES key for session %s...\\n"""		3053358	0					
ANR	3056130	Argument	the_sid		3053358	2					
ANR	3056131	Identifier	the_sid		3053358	0					
ANR	3056132	ExpressionStatement	"the_key = new KeyInfo ( rbuf , 24 , CONDOR_3DES )"	4895:8:147626:147670	3053358	7	True				
ANR	3056133	AssignmentExpression	"the_key = new KeyInfo ( rbuf , 24 , CONDOR_3DES )"		3053358	0		=			
ANR	3056134	Identifier	the_key		3053358	0					
ANR	3056135	Expression	"rbuf , 24 , CONDOR_3DES"		3053358	1					
ANR	3056136	Identifier	rbuf		3053358	0					
ANR	3056137	Expression	"24 , CONDOR_3DES"		3053358	1					
ANR	3056138	PrimaryExpression	24		3053358	0					
ANR	3056139	Identifier	CONDOR_3DES		3053358	1					
ANR	3056140	BreakStatement	break ;	4896:8:147680:147685	3053358	8	True				
ANR	3056141	Label	default :	4897:7:147694:147701	3053358	9	True				
ANR	3056142	Identifier	default		3053358	0					
ANR	3056143	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating RANDOM key for session %s...\\n"" , the_sid )"	4898:8:147711:147802	3053358	10	True				
ANR	3056144	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating RANDOM key for session %s...\\n"" , the_sid )"		3053358	0					
ANR	3056145	Callee	dprintf		3053358	0					
ANR	3056146	Identifier	dprintf		3053358	0					
ANR	3056147	ArgumentList	D_SECURITY		3053358	1					
ANR	3056148	Argument	D_SECURITY		3053358	0					
ANR	3056149	Identifier	D_SECURITY		3053358	0					
ANR	3056150	Argument	"""DC_AUTHENTICATE: generating RANDOM key for session %s...\\n"""		3053358	1					
ANR	3056151	PrimaryExpression	"""DC_AUTHENTICATE: generating RANDOM key for session %s...\\n"""		3053358	0					
ANR	3056152	Argument	the_sid		3053358	2					
ANR	3056153	Identifier	the_sid		3053358	0					
ANR	3056154	ExpressionStatement	"the_key = new KeyInfo ( rbuf , 24 )"	4899:8:147812:147843	3053358	11	True				
ANR	3056155	AssignmentExpression	"the_key = new KeyInfo ( rbuf , 24 )"		3053358	0		=			
ANR	3056156	Identifier	the_key		3053358	0					
ANR	3056157	Expression	"rbuf , 24"		3053358	1					
ANR	3056158	Identifier	rbuf		3053358	0					
ANR	3056159	PrimaryExpression	24		3053358	1					
ANR	3056160	BreakStatement	break ;	4900:8:147853:147858	3053358	12	True				
ANR	3056161	ExpressionStatement	free ( crypto_method )	4903:6:147875:147896	3053358	6	True				
ANR	3056162	CallExpression	free ( crypto_method )		3053358	0					
ANR	3056163	Callee	free		3053358	0					
ANR	3056164	Identifier	free		3053358	0					
ANR	3056165	ArgumentList	crypto_method		3053358	1					
ANR	3056166	Argument	crypto_method		3053358	0					
ANR	3056167	Identifier	crypto_method		3053358	0					
ANR	3056168	ExpressionStatement	crypto_method = NULL	4904:6:147904:147924	3053358	7	True				
ANR	3056169	AssignmentExpression	crypto_method = NULL		3053358	0		=			
ANR	3056170	Identifier	crypto_method		3053358	0					
ANR	3056171	Identifier	NULL		3053358	1					
ANR	3056172	IfStatement	if ( ! the_key )		3053358	8					
ANR	3056173	Condition	! the_key	4906:10:147937:147944	3053358	0	True				
ANR	3056174	UnaryOperationExpression	! the_key		3053358	0					
ANR	3056175	UnaryOperator	!		3053358	0					
ANR	3056176	Identifier	the_key		3053358	1					
ANR	3056177	CompoundStatement		667:20:20920:20920	3053358	1					
ANR	3056178	ExpressionStatement	result = FALSE	4907:7:147956:147970	3053358	0	True				
ANR	3056179	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3056180	Identifier	result		3053358	0					
ANR	3056181	Identifier	FALSE		3053358	1					
ANR	3056182	GotoStatement	goto finalize ;	4908:7:147979:147992	3053358	1	True				
ANR	3056183	Identifier	finalize		3053358	0					
ANR	3056184	ExpressionStatement	"sec_man -> key_printf ( D_SECURITY , the_key )"	4911:6:148009:148050	3053358	9	True				
ANR	3056185	CallExpression	"sec_man -> key_printf ( D_SECURITY , the_key )"		3053358	0					
ANR	3056186	Callee	sec_man -> key_printf		3053358	0					
ANR	3056187	PtrMemberAccess	sec_man -> key_printf		3053358	0					
ANR	3056188	Identifier	sec_man		3053358	0					
ANR	3056189	Identifier	key_printf		3053358	1					
ANR	3056190	ArgumentList	D_SECURITY		3053358	1					
ANR	3056191	Argument	D_SECURITY		3053358	0					
ANR	3056192	Identifier	D_SECURITY		3053358	0					
ANR	3056193	Argument	the_key		3053358	1					
ANR	3056194	Identifier	the_key		3053358	0					
ANR	3056195	ExpressionStatement	new_session = true	4914:5:148065:148083	3053358	5	True				
ANR	3056196	AssignmentExpression	new_session = true		3053358	0		=			
ANR	3056197	Identifier	new_session		3053358	0					
ANR	3056198	Identifier	true		3053358	1					
ANR	3056199	IfStatement	"if ( is_tcp && ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) == SecMan :: SEC_FEAT_ACT_NO ) )"		3053358	8					
ANR	3056200	Condition	"is_tcp && ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) == SecMan :: SEC_FEAT_ACT_NO )"	4918:8:148132:148225	3053358	0	True				
ANR	3056201	AndExpression	"is_tcp && ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) == SecMan :: SEC_FEAT_ACT_NO )"		3053358	0		&&			
ANR	3056202	Identifier	is_tcp		3053358	0					
ANR	3056203	EqualityExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) == SecMan :: SEC_FEAT_ACT_NO"		3053358	1		==			
ANR	3056204	CallExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT )"		3053358	0					
ANR	3056205	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056206	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056207	Identifier	sec_man		3053358	0					
ANR	3056208	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3056209	ArgumentList	auth_info		3053358	1					
ANR	3056210	Argument	auth_info		3053358	0					
ANR	3056211	Identifier	auth_info		3053358	0					
ANR	3056212	Argument	ATTR_SEC_ENACT		3053358	1					
ANR	3056213	Identifier	ATTR_SEC_ENACT		3053358	0					
ANR	3056214	Identifier	SecMan :: SEC_FEAT_ACT_NO		3053358	1					
ANR	3056215	CompoundStatement		679:104:21201:21201	3053358	1					
ANR	3056216	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	0					
ANR	3056217	Condition	DebugFlags & D_FULLDEBUG	4919:9:148239:148262	3053358	0	True				
ANR	3056218	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3056219	Identifier	DebugFlags		3053358	0					
ANR	3056220	Identifier	D_FULLDEBUG		3053358	1					
ANR	3056221	CompoundStatement		680:35:21238:21238	3053358	1					
ANR	3056222	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: Sending following response ClassAd:\\n"" )"	4920:6:148273:148342	3053358	0	True				
ANR	3056223	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: Sending following response ClassAd:\\n"" )"		3053358	0					
ANR	3056224	Callee	dprintf		3053358	0					
ANR	3056225	Identifier	dprintf		3053358	0					
ANR	3056226	ArgumentList	D_SECURITY		3053358	1					
ANR	3056227	Argument	D_SECURITY		3053358	0					
ANR	3056228	Identifier	D_SECURITY		3053358	0					
ANR	3056229	Argument	"""SECMAN: Sending following response ClassAd:\\n"""		3053358	1					
ANR	3056230	PrimaryExpression	"""SECMAN: Sending following response ClassAd:\\n"""		3053358	0					
ANR	3056231	ExpressionStatement	the_policy -> dPrint ( D_SECURITY )	4921:6:148350:148382	3053358	1	True				
ANR	3056232	CallExpression	the_policy -> dPrint ( D_SECURITY )		3053358	0					
ANR	3056233	Callee	the_policy -> dPrint		3053358	0					
ANR	3056234	PtrMemberAccess	the_policy -> dPrint		3053358	0					
ANR	3056235	Identifier	the_policy		3053358	0					
ANR	3056236	Identifier	dPrint		3053358	1					
ANR	3056237	ArgumentList	D_SECURITY		3053358	1					
ANR	3056238	Argument	D_SECURITY		3053358	0					
ANR	3056239	Identifier	D_SECURITY		3053358	0					
ANR	3056240	ExpressionStatement	sock -> encode ( )	4923:5:148396:148410	3053358	1	True				
ANR	3056241	CallExpression	sock -> encode ( )		3053358	0					
ANR	3056242	Callee	sock -> encode		3053358	0					
ANR	3056243	PtrMemberAccess	sock -> encode		3053358	0					
ANR	3056244	Identifier	sock		3053358	0					
ANR	3056245	Identifier	encode		3053358	1					
ANR	3056246	ArgumentList			3053358	1					
ANR	3056247	IfStatement	if ( ! the_policy -> put ( * sock ) || ! sock -> end_of_message ( ) )		3053358	2					
ANR	3056248	Condition	! the_policy -> put ( * sock ) || ! sock -> end_of_message ( )	4924:9:148421:148476	3053358	0	True				
ANR	3056249	OrExpression	! the_policy -> put ( * sock ) || ! sock -> end_of_message ( )		3053358	0		||			
ANR	3056250	UnaryOperationExpression	! the_policy -> put ( * sock )		3053358	0					
ANR	3056251	UnaryOperator	!		3053358	0					
ANR	3056252	CallExpression	the_policy -> put ( * sock )		3053358	1					
ANR	3056253	Callee	the_policy -> put		3053358	0					
ANR	3056254	PtrMemberAccess	the_policy -> put		3053358	0					
ANR	3056255	Identifier	the_policy		3053358	0					
ANR	3056256	Identifier	put		3053358	1					
ANR	3056257	ArgumentList	* sock		3053358	1					
ANR	3056258	Argument	* sock		3053358	0					
ANR	3056259	UnaryOperationExpression	* sock		3053358	0					
ANR	3056260	UnaryOperator	*		3053358	0					
ANR	3056261	Identifier	sock		3053358	1					
ANR	3056262	UnaryOperationExpression	! sock -> end_of_message ( )		3053358	1					
ANR	3056263	UnaryOperator	!		3053358	0					
ANR	3056264	CallExpression	sock -> end_of_message ( )		3053358	1					
ANR	3056265	Callee	sock -> end_of_message		3053358	0					
ANR	3056266	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3056267	Identifier	sock		3053358	0					
ANR	3056268	Identifier	end_of_message		3053358	1					
ANR	3056269	ArgumentList			3053358	1					
ANR	3056270	CompoundStatement		686:31:21452:21452	3053358	1					
ANR	3056271	ExpressionStatement	"dprintf ( D_ALWAYS , ""SECMAN: Error sending response classad to %s!\\n"" , sock -> peer_description ( ) )"	4926:6:148487:148582	3053358	0	True				
ANR	3056272	CallExpression	"dprintf ( D_ALWAYS , ""SECMAN: Error sending response classad to %s!\\n"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3056273	Callee	dprintf		3053358	0					
ANR	3056274	Identifier	dprintf		3053358	0					
ANR	3056275	ArgumentList	D_ALWAYS		3053358	1					
ANR	3056276	Argument	D_ALWAYS		3053358	0					
ANR	3056277	Identifier	D_ALWAYS		3053358	0					
ANR	3056278	Argument	"""SECMAN: Error sending response classad to %s!\\n"""		3053358	1					
ANR	3056279	PrimaryExpression	"""SECMAN: Error sending response classad to %s!\\n"""		3053358	0					
ANR	3056280	Argument	sock -> peer_description ( )		3053358	2					
ANR	3056281	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3056282	Callee	sock -> peer_description		3053358	0					
ANR	3056283	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3056284	Identifier	sock		3053358	0					
ANR	3056285	Identifier	peer_description		3053358	1					
ANR	3056286	ArgumentList			3053358	1					
ANR	3056287	ExpressionStatement	auth_info . dPrint ( D_ALWAYS )	4927:6:148590:148617	3053358	1	True				
ANR	3056288	CallExpression	auth_info . dPrint ( D_ALWAYS )		3053358	0					
ANR	3056289	Callee	auth_info . dPrint		3053358	0					
ANR	3056290	MemberAccess	auth_info . dPrint		3053358	0					
ANR	3056291	Identifier	auth_info		3053358	0					
ANR	3056292	Identifier	dPrint		3053358	1					
ANR	3056293	ArgumentList	D_ALWAYS		3053358	1					
ANR	3056294	Argument	D_ALWAYS		3053358	0					
ANR	3056295	Identifier	D_ALWAYS		3053358	0					
ANR	3056296	ExpressionStatement	result = FALSE	4928:6:148625:148639	3053358	2	True				
ANR	3056297	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3056298	Identifier	result		3053358	0					
ANR	3056299	Identifier	FALSE		3053358	1					
ANR	3056300	GotoStatement	goto finalize ;	4929:6:148647:148660	3053358	3	True				
ANR	3056301	Identifier	finalize		3053358	0					
ANR	3056302	ExpressionStatement	sock -> decode ( )	4931:5:148674:148688	3053358	3	True				
ANR	3056303	CallExpression	sock -> decode ( )		3053358	0					
ANR	3056304	Callee	sock -> decode		3053358	0					
ANR	3056305	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3056306	Identifier	sock		3053358	0					
ANR	3056307	Identifier	decode		3053358	1					
ANR	3056308	ArgumentList			3053358	1					
ANR	3056309	ElseStatement	else		3053358	0					
ANR	3056310	CompoundStatement		693:11:21674:21674	3053358	0					
ANR	3056311	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: Enact was '%s', not sending response.\\n"" , SecMan :: sec_feat_act_rev [ sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) ] )"	4933:5:148708:148869	3053358	0	True				
ANR	3056312	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: Enact was '%s', not sending response.\\n"" , SecMan :: sec_feat_act_rev [ sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) ] )"		3053358	0					
ANR	3056313	Callee	dprintf		3053358	0					
ANR	3056314	Identifier	dprintf		3053358	0					
ANR	3056315	ArgumentList	D_SECURITY		3053358	1					
ANR	3056316	Argument	D_SECURITY		3053358	0					
ANR	3056317	Identifier	D_SECURITY		3053358	0					
ANR	3056318	Argument	"""SECMAN: Enact was '%s', not sending response.\\n"""		3053358	1					
ANR	3056319	PrimaryExpression	"""SECMAN: Enact was '%s', not sending response.\\n"""		3053358	0					
ANR	3056320	Argument	"SecMan :: sec_feat_act_rev [ sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) ]"		3053358	2					
ANR	3056321	ArrayIndexing	"SecMan :: sec_feat_act_rev [ sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) ]"		3053358	0					
ANR	3056322	Identifier	SecMan :: sec_feat_act_rev		3053358	0					
ANR	3056323	CallExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT )"		3053358	1					
ANR	3056324	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056325	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056326	Identifier	sec_man		3053358	0					
ANR	3056327	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3056328	ArgumentList	auth_info		3053358	1					
ANR	3056329	Argument	auth_info		3053358	0					
ANR	3056330	Identifier	auth_info		3053358	0					
ANR	3056331	Argument	ATTR_SEC_ENACT		3053358	1					
ANR	3056332	Identifier	ATTR_SEC_ENACT		3053358	0					
ANR	3056333	IfStatement	if ( ! is_tcp )		3053358	1					
ANR	3056334	Condition	! is_tcp	4939:7:148891:148897	3053358	0	True				
ANR	3056335	UnaryOperationExpression	! is_tcp		3053358	0					
ANR	3056336	UnaryOperator	!		3053358	0					
ANR	3056337	Identifier	is_tcp		3053358	1					
ANR	3056338	CompoundStatement		710:4:22294:22402	3053358	1					
ANR	3056339	IdentifierDeclStatement	"SecMan :: sec_feat_act will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION ) ;"	4949:4:149321:149429	3053358	0	True				
ANR	3056340	IdentifierDecl	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		3053358	0					
ANR	3056341	IdentifierDeclType	SecMan :: sec_feat_act		3053358	0					
ANR	3056342	Identifier	will_enable_encryption		3053358	1					
ANR	3056343	AssignmentExpression	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		3053358	2		=			
ANR	3056344	Identifier	will_enable_encryption		3053358	0					
ANR	3056345	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		3053358	1					
ANR	3056346	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056347	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056348	Identifier	sec_man		3053358	0					
ANR	3056349	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3056350	ArgumentList	* the_policy		3053358	1					
ANR	3056351	Argument	* the_policy		3053358	0					
ANR	3056352	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3056353	UnaryOperator	*		3053358	0					
ANR	3056354	Identifier	the_policy		3053358	1					
ANR	3056355	Argument	ATTR_SEC_ENCRYPTION		3053358	1					
ANR	3056356	Identifier	ATTR_SEC_ENCRYPTION		3053358	0					
ANR	3056357	IfStatement	if ( will_enable_encryption != SecMan :: SEC_FEAT_ACT_YES && the_key )		3053358	1					
ANR	3056358	Condition	will_enable_encryption != SecMan :: SEC_FEAT_ACT_YES && the_key	4951:8:149440:149505	3053358	0	True				
ANR	3056359	AndExpression	will_enable_encryption != SecMan :: SEC_FEAT_ACT_YES && the_key		3053358	0		&&			
ANR	3056360	EqualityExpression	will_enable_encryption != SecMan :: SEC_FEAT_ACT_YES		3053358	0		!=			
ANR	3056361	Identifier	will_enable_encryption		3053358	0					
ANR	3056362	Identifier	SecMan :: SEC_FEAT_ACT_YES		3053358	1					
ANR	3056363	Identifier	the_key		3053358	1					
ANR	3056364	CompoundStatement		714:4:22486:22486	3053358	1					
ANR	3056365	ExpressionStatement	"sock -> set_crypto_key ( false , the_key )"	4954:5:149520:149556	3053358	0	True				
ANR	3056366	CallExpression	"sock -> set_crypto_key ( false , the_key )"		3053358	0					
ANR	3056367	Callee	sock -> set_crypto_key		3053358	0					
ANR	3056368	PtrMemberAccess	sock -> set_crypto_key		3053358	0					
ANR	3056369	Identifier	sock		3053358	0					
ANR	3056370	Identifier	set_crypto_key		3053358	1					
ANR	3056371	ArgumentList	false		3053358	1					
ANR	3056372	Argument	false		3053358	0					
ANR	3056373	Identifier	false		3053358	0					
ANR	3056374	Argument	the_key		3053358	1					
ANR	3056375	Identifier	the_key		3053358	0					
ANR	3056376	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled with session key id %s (but encryption mode is off by default for this packet).\\n"" , the_sid ? the_sid : ""(null)"" )"	4955:5:149563:149733	3053358	1	True				
ANR	3056377	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled with session key id %s (but encryption mode is off by default for this packet).\\n"" , the_sid ? the_sid : ""(null)"" )"		3053358	0					
ANR	3056378	Callee	dprintf		3053358	0					
ANR	3056379	Identifier	dprintf		3053358	0					
ANR	3056380	ArgumentList	D_SECURITY		3053358	1					
ANR	3056381	Argument	D_SECURITY		3053358	0					
ANR	3056382	Identifier	D_SECURITY		3053358	0					
ANR	3056383	Argument	"""DC_AUTHENTICATE: encryption enabled with session key id %s (but encryption mode is off by default for this packet).\\n"""		3053358	1					
ANR	3056384	PrimaryExpression	"""DC_AUTHENTICATE: encryption enabled with session key id %s (but encryption mode is off by default for this packet).\\n"""		3053358	0					
ANR	3056385	Argument	"the_sid ? the_sid : ""(null)"""		3053358	2					
ANR	3056386	ConditionalExpression	"the_sid ? the_sid : ""(null)"""		3053358	0					
ANR	3056387	Condition	the_sid		3053358	0					
ANR	3056388	Identifier	the_sid		3053358	0					
ANR	3056389	Identifier	the_sid		3053358	1					
ANR	3056390	PrimaryExpression	"""(null)"""		3053358	2					
ANR	3056391	IfStatement	if ( is_tcp )		3053358	2					
ANR	3056392	Condition	is_tcp	4959:7:149754:149759	3053358	0	True				
ANR	3056393	Identifier	is_tcp		3053358	0					
ANR	3056394	CompoundStatement		727:4:23026:23133	3053358	1					
ANR	3056395	IdentifierDeclStatement	"SecMan :: sec_feat_act will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION ) ;"	4964:4:149821:149933	3053358	0	True				
ANR	3056396	IdentifierDecl	"will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		3053358	0					
ANR	3056397	IdentifierDeclType	SecMan :: sec_feat_act		3053358	0					
ANR	3056398	Identifier	will_authenticate		3053358	1					
ANR	3056399	AssignmentExpression	"will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		3053358	2		=			
ANR	3056400	Identifier	will_authenticate		3053358	0					
ANR	3056401	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		3053358	1					
ANR	3056402	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056403	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056404	Identifier	sec_man		3053358	0					
ANR	3056405	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3056406	ArgumentList	* the_policy		3053358	1					
ANR	3056407	Argument	* the_policy		3053358	0					
ANR	3056408	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3056409	UnaryOperator	*		3053358	0					
ANR	3056410	Identifier	the_policy		3053358	1					
ANR	3056411	Argument	ATTR_SEC_AUTHENTICATION		3053358	1					
ANR	3056412	Identifier	ATTR_SEC_AUTHENTICATION		3053358	0					
ANR	3056413	IdentifierDeclStatement	"SecMan :: sec_feat_act will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION ) ;"	4965:4:149939:150047	3053358	1	True				
ANR	3056414	IdentifierDecl	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		3053358	0					
ANR	3056415	IdentifierDeclType	SecMan :: sec_feat_act		3053358	0					
ANR	3056416	Identifier	will_enable_encryption		3053358	1					
ANR	3056417	AssignmentExpression	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		3053358	2		=			
ANR	3056418	Identifier	will_enable_encryption		3053358	0					
ANR	3056419	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		3053358	1					
ANR	3056420	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056421	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056422	Identifier	sec_man		3053358	0					
ANR	3056423	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3056424	ArgumentList	* the_policy		3053358	1					
ANR	3056425	Argument	* the_policy		3053358	0					
ANR	3056426	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3056427	UnaryOperator	*		3053358	0					
ANR	3056428	Identifier	the_policy		3053358	1					
ANR	3056429	Argument	ATTR_SEC_ENCRYPTION		3053358	1					
ANR	3056430	Identifier	ATTR_SEC_ENCRYPTION		3053358	0					
ANR	3056431	IdentifierDeclStatement	"SecMan :: sec_feat_act will_enable_integrity = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_INTEGRITY ) ;"	4966:4:150053:150160	3053358	2	True				
ANR	3056432	IdentifierDecl	"will_enable_integrity = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_INTEGRITY )"		3053358	0					
ANR	3056433	IdentifierDeclType	SecMan :: sec_feat_act		3053358	0					
ANR	3056434	Identifier	will_enable_integrity		3053358	1					
ANR	3056435	AssignmentExpression	"will_enable_integrity = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_INTEGRITY )"		3053358	2		=			
ANR	3056436	Identifier	will_enable_integrity		3053358	0					
ANR	3056437	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_INTEGRITY )"		3053358	1					
ANR	3056438	Callee	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056439	PtrMemberAccess	sec_man -> sec_lookup_feat_act		3053358	0					
ANR	3056440	Identifier	sec_man		3053358	0					
ANR	3056441	Identifier	sec_lookup_feat_act		3053358	1					
ANR	3056442	ArgumentList	* the_policy		3053358	1					
ANR	3056443	Argument	* the_policy		3053358	0					
ANR	3056444	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3056445	UnaryOperator	*		3053358	0					
ANR	3056446	Identifier	the_policy		3053358	1					
ANR	3056447	Argument	ATTR_SEC_INTEGRITY		3053358	1					
ANR	3056448	Identifier	ATTR_SEC_INTEGRITY		3053358	0					
ANR	3056449	IfStatement	if ( ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES ) )		3053358	3					
ANR	3056450	Condition	will_authenticate == SecMan :: SEC_FEAT_ACT_YES	4980:8:150585:150631	3053358	0	True				
ANR	3056451	EqualityExpression	will_authenticate == SecMan :: SEC_FEAT_ACT_YES		3053358	0		==			
ANR	3056452	Identifier	will_authenticate		3053358	0					
ANR	3056453	Identifier	SecMan :: SEC_FEAT_ACT_YES		3053358	1					
ANR	3056454	CompoundStatement		741:57:23607:23607	3053358	1					
ANR	3056455	IfStatement	if ( ( ! new_session ) )		3053358	0					
ANR	3056456	Condition	! new_session	4981:9:150645:150658	3053358	0	True				
ANR	3056457	UnaryOperationExpression	! new_session		3053358	0					
ANR	3056458	UnaryOperator	!		3053358	0					
ANR	3056459	Identifier	new_session		3053358	1					
ANR	3056460	CompoundStatement		743:6:23642:23670	3053358	1					
ANR	3056461	IdentifierDeclStatement	char * remote_version = NULL ;	4982:6:150669:150697	3053358	0	True				
ANR	3056462	IdentifierDecl	* remote_version = NULL		3053358	0					
ANR	3056463	IdentifierDeclType	char *		3053358	0					
ANR	3056464	Identifier	remote_version		3053358	1					
ANR	3056465	AssignmentExpression	* remote_version = NULL		3053358	2		=			
ANR	3056466	Identifier	NULL		3053358	0					
ANR	3056467	Identifier	NULL		3053358	1					
ANR	3056468	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_REMOTE_VERSION , & remote_version )"	4983:6:150705:150771	3053358	1	True				
ANR	3056469	CallExpression	"the_policy -> LookupString ( ATTR_SEC_REMOTE_VERSION , & remote_version )"		3053358	0					
ANR	3056470	Callee	the_policy -> LookupString		3053358	0					
ANR	3056471	PtrMemberAccess	the_policy -> LookupString		3053358	0					
ANR	3056472	Identifier	the_policy		3053358	0					
ANR	3056473	Identifier	LookupString		3053358	1					
ANR	3056474	ArgumentList	ATTR_SEC_REMOTE_VERSION		3053358	1					
ANR	3056475	Argument	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3056476	Identifier	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3056477	Argument	& remote_version		3053358	1					
ANR	3056478	UnaryOperationExpression	& remote_version		3053358	0					
ANR	3056479	UnaryOperator	&		3053358	0					
ANR	3056480	Identifier	remote_version		3053358	1					
ANR	3056481	IfStatement	if ( remote_version )		3053358	2					
ANR	3056482	Condition	remote_version	4984:9:150782:150795	3053358	0	True				
ANR	3056483	Identifier	remote_version		3053358	0					
ANR	3056484	CompoundStatement		745:25:23771:23771	3053358	1					
ANR	3056485	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: other side is %s, NOT reauthenticating.\\n"" , remote_version )"	4988:7:150986:151076	3053358	0	True				
ANR	3056486	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: other side is %s, NOT reauthenticating.\\n"" , remote_version )"		3053358	0					
ANR	3056487	Callee	dprintf		3053358	0					
ANR	3056488	Identifier	dprintf		3053358	0					
ANR	3056489	ArgumentList	D_SECURITY		3053358	1					
ANR	3056490	Argument	D_SECURITY		3053358	0					
ANR	3056491	Identifier	D_SECURITY		3053358	0					
ANR	3056492	Argument	"""SECMAN: other side is %s, NOT reauthenticating.\\n"""		3053358	1					
ANR	3056493	PrimaryExpression	"""SECMAN: other side is %s, NOT reauthenticating.\\n"""		3053358	0					
ANR	3056494	Argument	remote_version		3053358	2					
ANR	3056495	Identifier	remote_version		3053358	0					
ANR	3056496	ExpressionStatement	will_authenticate = SecMan :: SEC_FEAT_ACT_NO	4989:7:151085:151128	3053358	1	True				
ANR	3056497	AssignmentExpression	will_authenticate = SecMan :: SEC_FEAT_ACT_NO		3053358	0		=			
ANR	3056498	Identifier	will_authenticate		3053358	0					
ANR	3056499	Identifier	SecMan :: SEC_FEAT_ACT_NO		3053358	1					
ANR	3056500	ExpressionStatement	free ( remote_version )	4991:7:151138:151159	3053358	2	True				
ANR	3056501	CallExpression	free ( remote_version )		3053358	0					
ANR	3056502	Callee	free		3053358	0					
ANR	3056503	Identifier	free		3053358	0					
ANR	3056504	ArgumentList	remote_version		3053358	1					
ANR	3056505	Argument	remote_version		3053358	0					
ANR	3056506	Identifier	remote_version		3053358	0					
ANR	3056507	ElseStatement	else		3053358	0					
ANR	3056508	CompoundStatement		753:13:24147:24147	3053358	0					
ANR	3056509	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: other side is pre 6.6.1, reauthenticating.\\n"" )"	4993:7:151183:151260	3053358	0	True				
ANR	3056510	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: other side is pre 6.6.1, reauthenticating.\\n"" )"		3053358	0					
ANR	3056511	Callee	dprintf		3053358	0					
ANR	3056512	Identifier	dprintf		3053358	0					
ANR	3056513	ArgumentList	D_SECURITY		3053358	1					
ANR	3056514	Argument	D_SECURITY		3053358	0					
ANR	3056515	Identifier	D_SECURITY		3053358	0					
ANR	3056516	Argument	"""SECMAN: other side is pre 6.6.1, reauthenticating.\\n"""		3053358	1					
ANR	3056517	PrimaryExpression	"""SECMAN: other side is pre 6.6.1, reauthenticating.\\n"""		3053358	0					
ANR	3056518	ElseStatement	else		3053358	0					
ANR	3056519	CompoundStatement		756:12:24255:24255	3053358	0					
ANR	3056520	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: new session, doing initial authentication.\\n"" )"	4996:6:151290:151367	3053358	0	True				
ANR	3056521	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: new session, doing initial authentication.\\n"" )"		3053358	0					
ANR	3056522	Callee	dprintf		3053358	0					
ANR	3056523	Identifier	dprintf		3053358	0					
ANR	3056524	ArgumentList	D_SECURITY		3053358	1					
ANR	3056525	Argument	D_SECURITY		3053358	0					
ANR	3056526	Identifier	D_SECURITY		3053358	0					
ANR	3056527	Argument	"""SECMAN: new session, doing initial authentication.\\n"""		3053358	1					
ANR	3056528	PrimaryExpression	"""SECMAN: new session, doing initial authentication.\\n"""		3053358	0					
ANR	3056529	IfStatement	if ( is_tcp && ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES ) )		3053358	4					
ANR	3056530	Condition	is_tcp && ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES )	5002:8:151393:151449	3053358	0	True				
ANR	3056531	AndExpression	is_tcp && ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES )		3053358	0		&&			
ANR	3056532	Identifier	is_tcp		3053358	0					
ANR	3056533	EqualityExpression	will_authenticate == SecMan :: SEC_FEAT_ACT_YES		3053358	1		==			
ANR	3056534	Identifier	will_authenticate		3053358	0					
ANR	3056535	Identifier	SecMan :: SEC_FEAT_ACT_YES		3053358	1					
ANR	3056536	CompoundStatement		789:5:25442:25542	3053358	1					
ANR	3056537	IdentifierDeclStatement	char * auth_methods = NULL ;	5013:5:151917:151943	3053358	0	True				
ANR	3056538	IdentifierDecl	* auth_methods = NULL		3053358	0					
ANR	3056539	IdentifierDeclType	char *		3053358	0					
ANR	3056540	Identifier	auth_methods		3053358	1					
ANR	3056541	AssignmentExpression	* auth_methods = NULL		3053358	2		=			
ANR	3056542	Identifier	NULL		3053358	0					
ANR	3056543	Identifier	NULL		3053358	1					
ANR	3056544	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_AUTHENTICATION_METHODS_LIST , & auth_methods )"	5014:5:151950:152027	3053358	1	True				
ANR	3056545	CallExpression	"the_policy -> LookupString ( ATTR_SEC_AUTHENTICATION_METHODS_LIST , & auth_methods )"		3053358	0					
ANR	3056546	Callee	the_policy -> LookupString		3053358	0					
ANR	3056547	PtrMemberAccess	the_policy -> LookupString		3053358	0					
ANR	3056548	Identifier	the_policy		3053358	0					
ANR	3056549	Identifier	LookupString		3053358	1					
ANR	3056550	ArgumentList	ATTR_SEC_AUTHENTICATION_METHODS_LIST		3053358	1					
ANR	3056551	Argument	ATTR_SEC_AUTHENTICATION_METHODS_LIST		3053358	0					
ANR	3056552	Identifier	ATTR_SEC_AUTHENTICATION_METHODS_LIST		3053358	0					
ANR	3056553	Argument	& auth_methods		3053358	1					
ANR	3056554	UnaryOperationExpression	& auth_methods		3053358	0					
ANR	3056555	UnaryOperator	&		3053358	0					
ANR	3056556	Identifier	auth_methods		3053358	1					
ANR	3056557	IfStatement	if ( ! auth_methods )		3053358	2					
ANR	3056558	Condition	! auth_methods	5016:9:152039:152051	3053358	0	True				
ANR	3056559	UnaryOperationExpression	! auth_methods		3053358	0					
ANR	3056560	UnaryOperator	!		3053358	0					
ANR	3056561	Identifier	auth_methods		3053358	1					
ANR	3056562	CompoundStatement		777:24:25027:25027	3053358	1					
ANR	3056563	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: no auth methods in response ad from %s, failing!\\n"" , sock -> peer_description ( ) )"	5017:6:152062:152179	3053358	0	True				
ANR	3056564	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: no auth methods in response ad from %s, failing!\\n"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3056565	Callee	dprintf		3053358	0					
ANR	3056566	Identifier	dprintf		3053358	0					
ANR	3056567	ArgumentList	D_SECURITY		3053358	1					
ANR	3056568	Argument	D_SECURITY		3053358	0					
ANR	3056569	Identifier	D_SECURITY		3053358	0					
ANR	3056570	Argument	"""DC_AUTHENTICATE: no auth methods in response ad from %s, failing!\\n"""		3053358	1					
ANR	3056571	PrimaryExpression	"""DC_AUTHENTICATE: no auth methods in response ad from %s, failing!\\n"""		3053358	0					
ANR	3056572	Argument	sock -> peer_description ( )		3053358	2					
ANR	3056573	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3056574	Callee	sock -> peer_description		3053358	0					
ANR	3056575	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3056576	Identifier	sock		3053358	0					
ANR	3056577	Identifier	peer_description		3053358	1					
ANR	3056578	ArgumentList			3053358	1					
ANR	3056579	ExpressionStatement	result = FALSE	5018:6:152187:152201	3053358	1	True				
ANR	3056580	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3056581	Identifier	result		3053358	0					
ANR	3056582	Identifier	FALSE		3053358	1					
ANR	3056583	GotoStatement	goto finalize ;	5019:6:152209:152222	3053358	2	True				
ANR	3056584	Identifier	finalize		3053358	0					
ANR	3056585	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	3					
ANR	3056586	Condition	DebugFlags & D_FULLDEBUG	5022:9:152241:152264	3053358	0	True				
ANR	3056587	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3056588	Identifier	DebugFlags		3053358	0					
ANR	3056589	Identifier	D_FULLDEBUG		3053358	1					
ANR	3056590	CompoundStatement		783:35:25240:25240	3053358	1					
ANR	3056591	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: authenticating RIGHT NOW.\\n"" )"	5023:6:152275:152343	3053358	0	True				
ANR	3056592	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: authenticating RIGHT NOW.\\n"" )"		3053358	0					
ANR	3056593	Callee	dprintf		3053358	0					
ANR	3056594	Identifier	dprintf		3053358	0					
ANR	3056595	ArgumentList	D_SECURITY		3053358	1					
ANR	3056596	Argument	D_SECURITY		3053358	0					
ANR	3056597	Identifier	D_SECURITY		3053358	0					
ANR	3056598	Argument	"""DC_AUTHENTICATE: authenticating RIGHT NOW.\\n"""		3053358	1					
ANR	3056599	PrimaryExpression	"""DC_AUTHENTICATE: authenticating RIGHT NOW.\\n"""		3053358	0					
ANR	3056600	IdentifierDeclStatement	int auth_timeout = getSecMan ( ) -> getSecTimeout ( comTable [ cmd_index ] . perm ) ;	5026:5:152358:152431	3053358	4	True				
ANR	3056601	IdentifierDecl	auth_timeout = getSecMan ( ) -> getSecTimeout ( comTable [ cmd_index ] . perm )		3053358	0					
ANR	3056602	IdentifierDeclType	int		3053358	0					
ANR	3056603	Identifier	auth_timeout		3053358	1					
ANR	3056604	AssignmentExpression	auth_timeout = getSecMan ( ) -> getSecTimeout ( comTable [ cmd_index ] . perm )		3053358	2		=			
ANR	3056605	Identifier	auth_timeout		3053358	0					
ANR	3056606	CallExpression	getSecMan ( ) -> getSecTimeout ( comTable [ cmd_index ] . perm )		3053358	1					
ANR	3056607	Callee	getSecMan ( ) -> getSecTimeout		3053358	0					
ANR	3056608	PtrMemberAccess	getSecMan ( ) -> getSecTimeout		3053358	0					
ANR	3056609	CallExpression	getSecMan ( )		3053358	0					
ANR	3056610	Callee	getSecMan		3053358	0					
ANR	3056611	Identifier	getSecMan		3053358	0					
ANR	3056612	ArgumentList			3053358	1					
ANR	3056613	Identifier	getSecTimeout		3053358	1					
ANR	3056614	ArgumentList	comTable [ cmd_index ] . perm		3053358	1					
ANR	3056615	Argument	comTable [ cmd_index ] . perm		3053358	0					
ANR	3056616	MemberAccess	comTable [ cmd_index ] . perm		3053358	0					
ANR	3056617	ArrayIndexing	comTable [ cmd_index ]		3053358	0					
ANR	3056618	Identifier	comTable		3053358	0					
ANR	3056619	Identifier	cmd_index		3053358	1					
ANR	3056620	Identifier	perm		3053358	1					
ANR	3056621	IdentifierDeclStatement	char * method_used = NULL ;	5027:5:152438:152462	3053358	5	True				
ANR	3056622	IdentifierDecl	* method_used = NULL		3053358	0					
ANR	3056623	IdentifierDeclType	char *		3053358	0					
ANR	3056624	Identifier	method_used		3053358	1					
ANR	3056625	AssignmentExpression	* method_used = NULL		3053358	2		=			
ANR	3056626	Identifier	NULL		3053358	0					
ANR	3056627	Identifier	NULL		3053358	1					
ANR	3056628	IdentifierDeclStatement	"bool auth_success = sock -> authenticate ( the_key , auth_methods , & errstack , auth_timeout , & method_used ) ;"	5028:5:152469:152569	3053358	6	True				
ANR	3056629	IdentifierDecl	"auth_success = sock -> authenticate ( the_key , auth_methods , & errstack , auth_timeout , & method_used )"		3053358	0					
ANR	3056630	IdentifierDeclType	bool		3053358	0					
ANR	3056631	Identifier	auth_success		3053358	1					
ANR	3056632	AssignmentExpression	"auth_success = sock -> authenticate ( the_key , auth_methods , & errstack , auth_timeout , & method_used )"		3053358	2		=			
ANR	3056633	Identifier	auth_success		3053358	0					
ANR	3056634	CallExpression	"sock -> authenticate ( the_key , auth_methods , & errstack , auth_timeout , & method_used )"		3053358	1					
ANR	3056635	Callee	sock -> authenticate		3053358	0					
ANR	3056636	PtrMemberAccess	sock -> authenticate		3053358	0					
ANR	3056637	Identifier	sock		3053358	0					
ANR	3056638	Identifier	authenticate		3053358	1					
ANR	3056639	ArgumentList	the_key		3053358	1					
ANR	3056640	Argument	the_key		3053358	0					
ANR	3056641	Identifier	the_key		3053358	0					
ANR	3056642	Argument	auth_methods		3053358	1					
ANR	3056643	Identifier	auth_methods		3053358	0					
ANR	3056644	Argument	& errstack		3053358	2					
ANR	3056645	UnaryOperationExpression	& errstack		3053358	0					
ANR	3056646	UnaryOperator	&		3053358	0					
ANR	3056647	Identifier	errstack		3053358	1					
ANR	3056648	Argument	auth_timeout		3053358	3					
ANR	3056649	Identifier	auth_timeout		3053358	0					
ANR	3056650	Argument	& method_used		3053358	4					
ANR	3056651	UnaryOperationExpression	& method_used		3053358	0					
ANR	3056652	UnaryOperator	&		3053358	0					
ANR	3056653	Identifier	method_used		3053358	1					
ANR	3056654	IfStatement	if ( method_used )		3053358	7					
ANR	3056655	Condition	method_used	5030:10:152582:152592	3053358	0	True				
ANR	3056656	Identifier	method_used		3053358	0					
ANR	3056657	CompoundStatement		791:24:25569:25569	3053358	1					
ANR	3056658	ExpressionStatement	"the_policy -> Assign ( ATTR_SEC_AUTHENTICATION_METHODS , method_used )"	5031:6:152604:152668	3053358	0	True				
ANR	3056659	CallExpression	"the_policy -> Assign ( ATTR_SEC_AUTHENTICATION_METHODS , method_used )"		3053358	0					
ANR	3056660	Callee	the_policy -> Assign		3053358	0					
ANR	3056661	PtrMemberAccess	the_policy -> Assign		3053358	0					
ANR	3056662	Identifier	the_policy		3053358	0					
ANR	3056663	Identifier	Assign		3053358	1					
ANR	3056664	ArgumentList	ATTR_SEC_AUTHENTICATION_METHODS		3053358	1					
ANR	3056665	Argument	ATTR_SEC_AUTHENTICATION_METHODS		3053358	0					
ANR	3056666	Identifier	ATTR_SEC_AUTHENTICATION_METHODS		3053358	0					
ANR	3056667	Argument	method_used		3053358	1					
ANR	3056668	Identifier	method_used		3053358	0					
ANR	3056669	ExpressionStatement	free ( auth_methods )	5034:5:152683:152703	3053358	8	True				
ANR	3056670	CallExpression	free ( auth_methods )		3053358	0					
ANR	3056671	Callee	free		3053358	0					
ANR	3056672	Identifier	free		3053358	0					
ANR	3056673	ArgumentList	auth_methods		3053358	1					
ANR	3056674	Argument	auth_methods		3053358	0					
ANR	3056675	Identifier	auth_methods		3053358	0					
ANR	3056676	ExpressionStatement	free ( method_used )	5035:5:152710:152729	3053358	9	True				
ANR	3056677	CallExpression	free ( method_used )		3053358	0					
ANR	3056678	Callee	free		3053358	0					
ANR	3056679	Identifier	free		3053358	0					
ANR	3056680	ArgumentList	method_used		3053358	1					
ANR	3056681	Argument	method_used		3053358	0					
ANR	3056682	Identifier	method_used		3053358	0					
ANR	3056683	IfStatement	if ( comTable [ cmd_index ] . force_authentication && ! sock -> isMappedFQU ( ) )		3053358	10					
ANR	3056684	Condition	comTable [ cmd_index ] . force_authentication && ! sock -> isMappedFQU ( )	5037:9:152741:152810	3053358	0	True				
ANR	3056685	AndExpression	comTable [ cmd_index ] . force_authentication && ! sock -> isMappedFQU ( )		3053358	0		&&			
ANR	3056686	MemberAccess	comTable [ cmd_index ] . force_authentication		3053358	0					
ANR	3056687	ArrayIndexing	comTable [ cmd_index ]		3053358	0					
ANR	3056688	Identifier	comTable		3053358	0					
ANR	3056689	Identifier	cmd_index		3053358	1					
ANR	3056690	Identifier	force_authentication		3053358	1					
ANR	3056691	UnaryOperationExpression	! sock -> isMappedFQU ( )		3053358	1					
ANR	3056692	UnaryOperator	!		3053358	0					
ANR	3056693	CallExpression	sock -> isMappedFQU ( )		3053358	1					
ANR	3056694	Callee	sock -> isMappedFQU		3053358	0					
ANR	3056695	PtrMemberAccess	sock -> isMappedFQU		3053358	0					
ANR	3056696	Identifier	sock		3053358	0					
ANR	3056697	Identifier	isMappedFQU		3053358	1					
ANR	3056698	ArgumentList			3053358	1					
ANR	3056699	CompoundStatement		800:5:25792:25792	3053358	1					
ANR	3056700	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"" , sock -> peer_description ( ) , tmp_cmd , comTable [ cmd_index ] . command_descrip )"	5040:6:152827:153085	3053358	0	True				
ANR	3056701	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"" , sock -> peer_description ( ) , tmp_cmd , comTable [ cmd_index ] . command_descrip )"		3053358	0					
ANR	3056702	Callee	dprintf		3053358	0					
ANR	3056703	Identifier	dprintf		3053358	0					
ANR	3056704	ArgumentList	D_ALWAYS		3053358	1					
ANR	3056705	Argument	D_ALWAYS		3053358	0					
ANR	3056706	Identifier	D_ALWAYS		3053358	0					
ANR	3056707	Argument	"""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"""		3053358	1					
ANR	3056708	PrimaryExpression	"""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"""		3053358	0					
ANR	3056709	Argument	sock -> peer_description ( )		3053358	2					
ANR	3056710	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3056711	Callee	sock -> peer_description		3053358	0					
ANR	3056712	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3056713	Identifier	sock		3053358	0					
ANR	3056714	Identifier	peer_description		3053358	1					
ANR	3056715	ArgumentList			3053358	1					
ANR	3056716	Argument	tmp_cmd		3053358	3					
ANR	3056717	Identifier	tmp_cmd		3053358	0					
ANR	3056718	Argument	comTable [ cmd_index ] . command_descrip		3053358	4					
ANR	3056719	MemberAccess	comTable [ cmd_index ] . command_descrip		3053358	0					
ANR	3056720	ArrayIndexing	comTable [ cmd_index ]		3053358	0					
ANR	3056721	Identifier	comTable		3053358	0					
ANR	3056722	Identifier	cmd_index		3053358	1					
ANR	3056723	Identifier	command_descrip		3053358	1					
ANR	3056724	IfStatement	if ( ! auth_success )		3053358	1					
ANR	3056725	Condition	! auth_success	5044:10:153097:153109	3053358	0	True				
ANR	3056726	UnaryOperationExpression	! auth_success		3053358	0					
ANR	3056727	UnaryOperator	!		3053358	0					
ANR	3056728	Identifier	auth_success		3053358	1					
ANR	3056729	CompoundStatement		805:26:26086:26086	3053358	1					
ANR	3056730	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: reason for authentication failure: %s\\n"" , errstack . getFullText ( ) )"	5045:7:153122:153245	3053358	0	True				
ANR	3056731	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: reason for authentication failure: %s\\n"" , errstack . getFullText ( ) )"		3053358	0					
ANR	3056732	Callee	dprintf		3053358	0					
ANR	3056733	Identifier	dprintf		3053358	0					
ANR	3056734	ArgumentList	D_ALWAYS		3053358	1					
ANR	3056735	Argument	D_ALWAYS		3053358	0					
ANR	3056736	Identifier	D_ALWAYS		3053358	0					
ANR	3056737	Argument	"""DC_AUTHENTICATE: reason for authentication failure: %s\\n"""		3053358	1					
ANR	3056738	PrimaryExpression	"""DC_AUTHENTICATE: reason for authentication failure: %s\\n"""		3053358	0					
ANR	3056739	Argument	errstack . getFullText ( )		3053358	2					
ANR	3056740	CallExpression	errstack . getFullText ( )		3053358	0					
ANR	3056741	Callee	errstack . getFullText		3053358	0					
ANR	3056742	MemberAccess	errstack . getFullText		3053358	0					
ANR	3056743	Identifier	errstack		3053358	0					
ANR	3056744	Identifier	getFullText		3053358	1					
ANR	3056745	ArgumentList			3053358	1					
ANR	3056746	ExpressionStatement	result = FALSE	5049:6:153261:153275	3053358	2	True				
ANR	3056747	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3056748	Identifier	result		3053358	0					
ANR	3056749	Identifier	FALSE		3053358	1					
ANR	3056750	GotoStatement	goto finalize ;	5050:6:153283:153296	3053358	3	True				
ANR	3056751	Identifier	finalize		3053358	0					
ANR	3056752	IfStatement	if ( auth_success )		3053358	11					
ANR	3056753	Condition	auth_success	5053:9:153315:153326	3053358	0	True				
ANR	3056754	Identifier	auth_success		3053358	0					
ANR	3056755	CompoundStatement		814:24:26303:26303	3053358	1					
ANR	3056756	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: authentication of %s complete.\\n"" , sock -> peer_ip_str ( ) )"	5054:6:153338:153432	3053358	0	True				
ANR	3056757	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: authentication of %s complete.\\n"" , sock -> peer_ip_str ( ) )"		3053358	0					
ANR	3056758	Callee	dprintf		3053358	0					
ANR	3056759	Identifier	dprintf		3053358	0					
ANR	3056760	ArgumentList	D_SECURITY		3053358	1					
ANR	3056761	Argument	D_SECURITY		3053358	0					
ANR	3056762	Identifier	D_SECURITY		3053358	0					
ANR	3056763	Argument	"""DC_AUTHENTICATE: authentication of %s complete.\\n"""		3053358	1					
ANR	3056764	PrimaryExpression	"""DC_AUTHENTICATE: authentication of %s complete.\\n"""		3053358	0					
ANR	3056765	Argument	sock -> peer_ip_str ( )		3053358	2					
ANR	3056766	CallExpression	sock -> peer_ip_str ( )		3053358	0					
ANR	3056767	Callee	sock -> peer_ip_str		3053358	0					
ANR	3056768	PtrMemberAccess	sock -> peer_ip_str		3053358	0					
ANR	3056769	Identifier	sock		3053358	0					
ANR	3056770	Identifier	peer_ip_str		3053358	1					
ANR	3056771	ArgumentList			3053358	1					
ANR	3056772	ElseStatement	else		3053358	0					
ANR	3056773	CompoundStatement		818:6:26432:26457	3053358	0					
ANR	3056774	IdentifierDeclStatement	bool auth_required = true ;	5057:6:153459:153484	3053358	0	True				
ANR	3056775	IdentifierDecl	auth_required = true		3053358	0					
ANR	3056776	IdentifierDeclType	bool		3053358	0					
ANR	3056777	Identifier	auth_required		3053358	1					
ANR	3056778	AssignmentExpression	auth_required = true		3053358	2		=			
ANR	3056779	Identifier	true		3053358	0					
ANR	3056780	Identifier	true		3053358	1					
ANR	3056781	ExpressionStatement	"the_policy -> LookupBool ( ATTR_SEC_AUTH_REQUIRED , auth_required )"	5058:6:153492:153552	3053358	1	True				
ANR	3056782	CallExpression	"the_policy -> LookupBool ( ATTR_SEC_AUTH_REQUIRED , auth_required )"		3053358	0					
ANR	3056783	Callee	the_policy -> LookupBool		3053358	0					
ANR	3056784	PtrMemberAccess	the_policy -> LookupBool		3053358	0					
ANR	3056785	Identifier	the_policy		3053358	0					
ANR	3056786	Identifier	LookupBool		3053358	1					
ANR	3056787	ArgumentList	ATTR_SEC_AUTH_REQUIRED		3053358	1					
ANR	3056788	Argument	ATTR_SEC_AUTH_REQUIRED		3053358	0					
ANR	3056789	Identifier	ATTR_SEC_AUTH_REQUIRED		3053358	0					
ANR	3056790	Argument	auth_required		3053358	1					
ANR	3056791	Identifier	auth_required		3053358	0					
ANR	3056792	IfStatement	if ( ! auth_required )		3053358	2					
ANR	3056793	Condition	! auth_required	5060:10:153565:153578	3053358	0	True				
ANR	3056794	UnaryOperationExpression	! auth_required		3053358	0					
ANR	3056795	UnaryOperator	!		3053358	0					
ANR	3056796	Identifier	auth_required		3053358	1					
ANR	3056797	CompoundStatement		821:27:26555:26555	3053358	1					
ANR	3056798	ExpressionStatement	"dprintf ( D_SECURITY | D_FULLDEBUG , ""DC_SECURITY: authentication of %s failed but was not required, so continuing.\\n"" , sock -> peer_ip_str ( ) )"	5061:7:153591:153747	3053358	0	True				
ANR	3056799	CallExpression	"dprintf ( D_SECURITY | D_FULLDEBUG , ""DC_SECURITY: authentication of %s failed but was not required, so continuing.\\n"" , sock -> peer_ip_str ( ) )"		3053358	0					
ANR	3056800	Callee	dprintf		3053358	0					
ANR	3056801	Identifier	dprintf		3053358	0					
ANR	3056802	ArgumentList	D_SECURITY | D_FULLDEBUG		3053358	1					
ANR	3056803	Argument	D_SECURITY | D_FULLDEBUG		3053358	0					
ANR	3056804	InclusiveOrExpression	D_SECURITY | D_FULLDEBUG		3053358	0		|			
ANR	3056805	Identifier	D_SECURITY		3053358	0					
ANR	3056806	Identifier	D_FULLDEBUG		3053358	1					
ANR	3056807	Argument	"""DC_SECURITY: authentication of %s failed but was not required, so continuing.\\n"""		3053358	1					
ANR	3056808	PrimaryExpression	"""DC_SECURITY: authentication of %s failed but was not required, so continuing.\\n"""		3053358	0					
ANR	3056809	Argument	sock -> peer_ip_str ( )		3053358	2					
ANR	3056810	CallExpression	sock -> peer_ip_str ( )		3053358	0					
ANR	3056811	Callee	sock -> peer_ip_str		3053358	0					
ANR	3056812	PtrMemberAccess	sock -> peer_ip_str		3053358	0					
ANR	3056813	Identifier	sock		3053358	0					
ANR	3056814	Identifier	peer_ip_str		3053358	1					
ANR	3056815	ArgumentList			3053358	1					
ANR	3056816	ElseStatement	else		3053358	0					
ANR	3056817	CompoundStatement		826:11:26741:26741	3053358	0					
ANR	3056818	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: required authentication of %s failed: %s\\n"" , sock -> peer_ip_str ( ) , errstack . getFullText ( ) )"	5066:7:153777:153934	3053358	0	True				
ANR	3056819	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: required authentication of %s failed: %s\\n"" , sock -> peer_ip_str ( ) , errstack . getFullText ( ) )"		3053358	0					
ANR	3056820	Callee	dprintf		3053358	0					
ANR	3056821	Identifier	dprintf		3053358	0					
ANR	3056822	ArgumentList	D_ALWAYS		3053358	1					
ANR	3056823	Argument	D_ALWAYS		3053358	0					
ANR	3056824	Identifier	D_ALWAYS		3053358	0					
ANR	3056825	Argument	"""DC_AUTHENTICATE: required authentication of %s failed: %s\\n"""		3053358	1					
ANR	3056826	PrimaryExpression	"""DC_AUTHENTICATE: required authentication of %s failed: %s\\n"""		3053358	0					
ANR	3056827	Argument	sock -> peer_ip_str ( )		3053358	2					
ANR	3056828	CallExpression	sock -> peer_ip_str ( )		3053358	0					
ANR	3056829	Callee	sock -> peer_ip_str		3053358	0					
ANR	3056830	PtrMemberAccess	sock -> peer_ip_str		3053358	0					
ANR	3056831	Identifier	sock		3053358	0					
ANR	3056832	Identifier	peer_ip_str		3053358	1					
ANR	3056833	ArgumentList			3053358	1					
ANR	3056834	Argument	errstack . getFullText ( )		3053358	3					
ANR	3056835	CallExpression	errstack . getFullText ( )		3053358	0					
ANR	3056836	Callee	errstack . getFullText		3053358	0					
ANR	3056837	MemberAccess	errstack . getFullText		3053358	0					
ANR	3056838	Identifier	errstack		3053358	0					
ANR	3056839	Identifier	getFullText		3053358	1					
ANR	3056840	ArgumentList			3053358	1					
ANR	3056841	ExpressionStatement	result = FALSE	5070:7:153943:153957	3053358	1	True				
ANR	3056842	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3056843	Identifier	result		3053358	0					
ANR	3056844	Identifier	FALSE		3053358	1					
ANR	3056845	GotoStatement	goto finalize ;	5071:7:153966:153979	3053358	2	True				
ANR	3056846	Identifier	finalize		3053358	0					
ANR	3056847	ElseStatement	else		3053358	0					
ANR	3056848	CompoundStatement		836:11:26981:26981	3053358	0					
ANR	3056849	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	0					
ANR	3056850	Condition	DebugFlags & D_FULLDEBUG	5076:9:154019:154042	3053358	0	True				
ANR	3056851	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3056852	Identifier	DebugFlags		3053358	0					
ANR	3056853	Identifier	D_FULLDEBUG		3053358	1					
ANR	3056854	CompoundStatement		837:35:27018:27018	3053358	1					
ANR	3056855	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: not authenticating.\\n"" )"	5077:6:154053:154115	3053358	0	True				
ANR	3056856	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: not authenticating.\\n"" )"		3053358	0					
ANR	3056857	Callee	dprintf		3053358	0					
ANR	3056858	Identifier	dprintf		3053358	0					
ANR	3056859	ArgumentList	D_SECURITY		3053358	1					
ANR	3056860	Argument	D_SECURITY		3053358	0					
ANR	3056861	Identifier	D_SECURITY		3053358	0					
ANR	3056862	Argument	"""DC_AUTHENTICATE: not authenticating.\\n"""		3053358	1					
ANR	3056863	PrimaryExpression	"""DC_AUTHENTICATE: not authenticating.\\n"""		3053358	0					
ANR	3056864	IfStatement	if ( will_enable_integrity == SecMan :: SEC_FEAT_ACT_YES )		3053358	5					
ANR	3056865	Condition	will_enable_integrity == SecMan :: SEC_FEAT_ACT_YES	5082:8:154140:154188	3053358	0	True				
ANR	3056866	EqualityExpression	will_enable_integrity == SecMan :: SEC_FEAT_ACT_YES		3053358	0		==			
ANR	3056867	Identifier	will_enable_integrity		3053358	0					
ANR	3056868	Identifier	SecMan :: SEC_FEAT_ACT_YES		3053358	1					
ANR	3056869	CompoundStatement		843:59:27164:27164	3053358	1					
ANR	3056870	IfStatement	if ( ! the_key )		3053358	0					
ANR	3056871	Condition	! the_key	5084:9:154203:154210	3053358	0	True				
ANR	3056872	UnaryOperationExpression	! the_key		3053358	0					
ANR	3056873	UnaryOperator	!		3053358	0					
ANR	3056874	Identifier	the_key		3053358	1					
ANR	3056875	CompoundStatement		845:19:27186:27186	3053358	1					
ANR	3056876	ExpressionStatement	result = FALSE	5086:6:154263:154277	3053358	0	True				
ANR	3056877	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3056878	Identifier	result		3053358	0					
ANR	3056879	Identifier	FALSE		3053358	1					
ANR	3056880	GotoStatement	goto finalize ;	5087:6:154285:154298	3053358	1	True				
ANR	3056881	Identifier	finalize		3053358	0					
ANR	3056882	ExpressionStatement	sock -> decode ( )	5090:5:154313:154327	3053358	1	True				
ANR	3056883	CallExpression	sock -> decode ( )		3053358	0					
ANR	3056884	Callee	sock -> decode		3053358	0					
ANR	3056885	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3056886	Identifier	sock		3053358	0					
ANR	3056887	Identifier	decode		3053358	1					
ANR	3056888	ArgumentList			3053358	1					
ANR	3056889	IfStatement	"if ( ! sock -> set_MD_mode ( MD_ALWAYS_ON , the_key ) )"		3053358	2					
ANR	3056890	Condition	"! sock -> set_MD_mode ( MD_ALWAYS_ON , the_key )"	5091:9:154338:154378	3053358	0	True				
ANR	3056891	UnaryOperationExpression	"! sock -> set_MD_mode ( MD_ALWAYS_ON , the_key )"		3053358	0					
ANR	3056892	UnaryOperator	!		3053358	0					
ANR	3056893	CallExpression	"sock -> set_MD_mode ( MD_ALWAYS_ON , the_key )"		3053358	1					
ANR	3056894	Callee	sock -> set_MD_mode		3053358	0					
ANR	3056895	PtrMemberAccess	sock -> set_MD_mode		3053358	0					
ANR	3056896	Identifier	sock		3053358	0					
ANR	3056897	Identifier	set_MD_mode		3053358	1					
ANR	3056898	ArgumentList	MD_ALWAYS_ON		3053358	1					
ANR	3056899	Argument	MD_ALWAYS_ON		3053358	0					
ANR	3056900	Identifier	MD_ALWAYS_ON		3053358	0					
ANR	3056901	Argument	the_key		3053358	1					
ANR	3056902	Identifier	the_key		3053358	0					
ANR	3056903	CompoundStatement		852:52:27354:27354	3053358	1					
ANR	3056904	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on message authenticator, failing request from %s.\\n"" , sock -> peer_description ( ) )"	5092:6:154389:154521	3053358	0	True				
ANR	3056905	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on message authenticator, failing request from %s.\\n"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3056906	Callee	dprintf		3053358	0					
ANR	3056907	Identifier	dprintf		3053358	0					
ANR	3056908	ArgumentList	D_ALWAYS		3053358	1					
ANR	3056909	Argument	D_ALWAYS		3053358	0					
ANR	3056910	Identifier	D_ALWAYS		3053358	0					
ANR	3056911	Argument	"""DC_AUTHENTICATE: unable to turn on message authenticator, failing request from %s.\\n"""		3053358	1					
ANR	3056912	PrimaryExpression	"""DC_AUTHENTICATE: unable to turn on message authenticator, failing request from %s.\\n"""		3053358	0					
ANR	3056913	Argument	sock -> peer_description ( )		3053358	2					
ANR	3056914	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3056915	Callee	sock -> peer_description		3053358	0					
ANR	3056916	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3056917	Identifier	sock		3053358	0					
ANR	3056918	Identifier	peer_description		3053358	1					
ANR	3056919	ArgumentList			3053358	1					
ANR	3056920	ExpressionStatement	result = FALSE	5093:6:154529:154543	3053358	1	True				
ANR	3056921	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3056922	Identifier	result		3053358	0					
ANR	3056923	Identifier	FALSE		3053358	1					
ANR	3056924	GotoStatement	goto finalize ;	5094:6:154551:154564	3053358	2	True				
ANR	3056925	Identifier	finalize		3053358	0					
ANR	3056926	ElseStatement	else		3053358	0					
ANR	3056927	CompoundStatement		856:12:27551:27551	3053358	0					
ANR	3056928	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"" , the_sid )"	5096:6:154586:154683	3053358	0	True				
ANR	3056929	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"" , the_sid )"		3053358	0					
ANR	3056930	Callee	dprintf		3053358	0					
ANR	3056931	Identifier	dprintf		3053358	0					
ANR	3056932	ArgumentList	D_SECURITY		3053358	1					
ANR	3056933	Argument	D_SECURITY		3053358	0					
ANR	3056934	Identifier	D_SECURITY		3053358	0					
ANR	3056935	Argument	"""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"""		3053358	1					
ANR	3056936	PrimaryExpression	"""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"""		3053358	0					
ANR	3056937	Argument	the_sid		3053358	2					
ANR	3056938	Identifier	the_sid		3053358	0					
ANR	3056939	ExpressionStatement	"sec_man -> key_printf ( D_SECURITY , the_key )"	5097:6:154691:154732	3053358	1	True				
ANR	3056940	CallExpression	"sec_man -> key_printf ( D_SECURITY , the_key )"		3053358	0					
ANR	3056941	Callee	sec_man -> key_printf		3053358	0					
ANR	3056942	PtrMemberAccess	sec_man -> key_printf		3053358	0					
ANR	3056943	Identifier	sec_man		3053358	0					
ANR	3056944	Identifier	key_printf		3053358	1					
ANR	3056945	ArgumentList	D_SECURITY		3053358	1					
ANR	3056946	Argument	D_SECURITY		3053358	0					
ANR	3056947	Identifier	D_SECURITY		3053358	0					
ANR	3056948	Argument	the_key		3053358	1					
ANR	3056949	Identifier	the_key		3053358	0					
ANR	3056950	ElseStatement	else		3053358	0					
ANR	3056951	CompoundStatement		860:11:27725:27725	3053358	0					
ANR	3056952	ExpressionStatement	"sock -> set_MD_mode ( MD_OFF , the_key )"	5100:5:154759:154793	3053358	0	True				
ANR	3056953	CallExpression	"sock -> set_MD_mode ( MD_OFF , the_key )"		3053358	0					
ANR	3056954	Callee	sock -> set_MD_mode		3053358	0					
ANR	3056955	PtrMemberAccess	sock -> set_MD_mode		3053358	0					
ANR	3056956	Identifier	sock		3053358	0					
ANR	3056957	Identifier	set_MD_mode		3053358	1					
ANR	3056958	ArgumentList	MD_OFF		3053358	1					
ANR	3056959	Argument	MD_OFF		3053358	0					
ANR	3056960	Identifier	MD_OFF		3053358	0					
ANR	3056961	Argument	the_key		3053358	1					
ANR	3056962	Identifier	the_key		3053358	0					
ANR	3056963	IfStatement	if ( will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES )		3053358	6					
ANR	3056964	Condition	will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES	5104:8:154811:154860	3053358	0	True				
ANR	3056965	EqualityExpression	will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES		3053358	0		==			
ANR	3056966	Identifier	will_enable_encryption		3053358	0					
ANR	3056967	Identifier	SecMan :: SEC_FEAT_ACT_YES		3053358	1					
ANR	3056968	CompoundStatement		865:60:27836:27836	3053358	1					
ANR	3056969	IfStatement	if ( ! the_key )		3053358	0					
ANR	3056970	Condition	! the_key	5106:9:154875:154882	3053358	0	True				
ANR	3056971	UnaryOperationExpression	! the_key		3053358	0					
ANR	3056972	UnaryOperator	!		3053358	0					
ANR	3056973	Identifier	the_key		3053358	1					
ANR	3056974	CompoundStatement		867:19:27858:27858	3053358	1					
ANR	3056975	ExpressionStatement	result = FALSE	5108:6:154935:154949	3053358	0	True				
ANR	3056976	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3056977	Identifier	result		3053358	0					
ANR	3056978	Identifier	FALSE		3053358	1					
ANR	3056979	GotoStatement	goto finalize ;	5109:6:154957:154970	3053358	1	True				
ANR	3056980	Identifier	finalize		3053358	0					
ANR	3056981	ExpressionStatement	sock -> decode ( )	5112:5:154985:154999	3053358	1	True				
ANR	3056982	CallExpression	sock -> decode ( )		3053358	0					
ANR	3056983	Callee	sock -> decode		3053358	0					
ANR	3056984	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3056985	Identifier	sock		3053358	0					
ANR	3056986	Identifier	decode		3053358	1					
ANR	3056987	ArgumentList			3053358	1					
ANR	3056988	IfStatement	"if ( ! sock -> set_crypto_key ( true , the_key ) )"		3053358	2					
ANR	3056989	Condition	"! sock -> set_crypto_key ( true , the_key )"	5113:9:155010:155045	3053358	0	True				
ANR	3056990	UnaryOperationExpression	"! sock -> set_crypto_key ( true , the_key )"		3053358	0					
ANR	3056991	UnaryOperator	!		3053358	0					
ANR	3056992	CallExpression	"sock -> set_crypto_key ( true , the_key )"		3053358	1					
ANR	3056993	Callee	sock -> set_crypto_key		3053358	0					
ANR	3056994	PtrMemberAccess	sock -> set_crypto_key		3053358	0					
ANR	3056995	Identifier	sock		3053358	0					
ANR	3056996	Identifier	set_crypto_key		3053358	1					
ANR	3056997	ArgumentList	true		3053358	1					
ANR	3056998	Argument	true		3053358	0					
ANR	3056999	Identifier	true		3053358	0					
ANR	3057000	Argument	the_key		3053358	1					
ANR	3057001	Identifier	the_key		3053358	0					
ANR	3057002	CompoundStatement		874:48:28022:28022	3053358	1					
ANR	3057003	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on encryption, failing request from %s.\\n"" , sock -> peer_description ( ) )"	5114:6:155057:155178	3053358	0	True				
ANR	3057004	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on encryption, failing request from %s.\\n"" , sock -> peer_description ( ) )"		3053358	0					
ANR	3057005	Callee	dprintf		3053358	0					
ANR	3057006	Identifier	dprintf		3053358	0					
ANR	3057007	ArgumentList	D_ALWAYS		3053358	1					
ANR	3057008	Argument	D_ALWAYS		3053358	0					
ANR	3057009	Identifier	D_ALWAYS		3053358	0					
ANR	3057010	Argument	"""DC_AUTHENTICATE: unable to turn on encryption, failing request from %s.\\n"""		3053358	1					
ANR	3057011	PrimaryExpression	"""DC_AUTHENTICATE: unable to turn on encryption, failing request from %s.\\n"""		3053358	0					
ANR	3057012	Argument	sock -> peer_description ( )		3053358	2					
ANR	3057013	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3057014	Callee	sock -> peer_description		3053358	0					
ANR	3057015	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3057016	Identifier	sock		3053358	0					
ANR	3057017	Identifier	peer_description		3053358	1					
ANR	3057018	ArgumentList			3053358	1					
ANR	3057019	ExpressionStatement	result = FALSE	5115:6:155186:155200	3053358	1	True				
ANR	3057020	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3057021	Identifier	result		3053358	0					
ANR	3057022	Identifier	FALSE		3053358	1					
ANR	3057023	GotoStatement	goto finalize ;	5116:6:155208:155221	3053358	2	True				
ANR	3057024	Identifier	finalize		3053358	0					
ANR	3057025	ElseStatement	else		3053358	0					
ANR	3057026	CompoundStatement		878:12:28208:28208	3053358	0					
ANR	3057027	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled for session %s\\n"" , the_sid )"	5118:6:155243:155328	3053358	0	True				
ANR	3057028	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled for session %s\\n"" , the_sid )"		3053358	0					
ANR	3057029	Callee	dprintf		3053358	0					
ANR	3057030	Identifier	dprintf		3053358	0					
ANR	3057031	ArgumentList	D_SECURITY		3053358	1					
ANR	3057032	Argument	D_SECURITY		3053358	0					
ANR	3057033	Identifier	D_SECURITY		3053358	0					
ANR	3057034	Argument	"""DC_AUTHENTICATE: encryption enabled for session %s\\n"""		3053358	1					
ANR	3057035	PrimaryExpression	"""DC_AUTHENTICATE: encryption enabled for session %s\\n"""		3053358	0					
ANR	3057036	Argument	the_sid		3053358	2					
ANR	3057037	Identifier	the_sid		3053358	0					
ANR	3057038	ElseStatement	else		3053358	0					
ANR	3057039	CompoundStatement		881:11:28321:28321	3053358	0					
ANR	3057040	ExpressionStatement	"sock -> set_crypto_key ( false , the_key )"	5121:5:155355:155391	3053358	0	True				
ANR	3057041	CallExpression	"sock -> set_crypto_key ( false , the_key )"		3053358	0					
ANR	3057042	Callee	sock -> set_crypto_key		3053358	0					
ANR	3057043	PtrMemberAccess	sock -> set_crypto_key		3053358	0					
ANR	3057044	Identifier	sock		3053358	0					
ANR	3057045	Identifier	set_crypto_key		3053358	1					
ANR	3057046	ArgumentList	false		3053358	1					
ANR	3057047	Argument	false		3053358	0					
ANR	3057048	Identifier	false		3053358	0					
ANR	3057049	Argument	the_key		3053358	1					
ANR	3057050	Identifier	the_key		3053358	0					
ANR	3057051	IfStatement	if ( new_session )		3053358	7					
ANR	3057052	Condition	new_session	5125:8:155409:155419	3053358	0	True				
ANR	3057053	Identifier	new_session		3053358	0					
ANR	3057054	CompoundStatement		993:5:32748:32838	3053358	1					
ANR	3057055	ExpressionStatement	sock -> decode ( )	5127:5:155454:155468	3053358	0	True				
ANR	3057056	CallExpression	sock -> decode ( )		3053358	0					
ANR	3057057	Callee	sock -> decode		3053358	0					
ANR	3057058	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3057059	Identifier	sock		3053358	0					
ANR	3057060	Identifier	decode		3053358	1					
ANR	3057061	ArgumentList			3053358	1					
ANR	3057062	ExpressionStatement	sock -> end_of_message ( )	5128:5:155475:155497	3053358	1	True				
ANR	3057063	CallExpression	sock -> end_of_message ( )		3053358	0					
ANR	3057064	Callee	sock -> end_of_message		3053358	0					
ANR	3057065	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3057066	Identifier	sock		3053358	0					
ANR	3057067	Identifier	end_of_message		3053358	1					
ANR	3057068	ArgumentList			3053358	1					
ANR	3057069	IdentifierDeclStatement	ClassAd pa_ad ;	5131:5:155537:155550	3053358	2	True				
ANR	3057070	IdentifierDecl	pa_ad		3053358	0					
ANR	3057071	IdentifierDeclType	ClassAd		3053358	0					
ANR	3057072	Identifier	pa_ad		3053358	1					
ANR	3057073	IdentifierDeclStatement	const char * fully_qualified_user = sock -> getFullyQualifiedUser ( ) ;	5134:5:155579:155643	3053358	3	True				
ANR	3057074	IdentifierDecl	* fully_qualified_user = sock -> getFullyQualifiedUser ( )		3053358	0					
ANR	3057075	IdentifierDeclType	const char *		3053358	0					
ANR	3057076	Identifier	fully_qualified_user		3053358	1					
ANR	3057077	AssignmentExpression	* fully_qualified_user = sock -> getFullyQualifiedUser ( )		3053358	2		=			
ANR	3057078	Identifier	fully_qualified_user		3053358	0					
ANR	3057079	CallExpression	sock -> getFullyQualifiedUser ( )		3053358	1					
ANR	3057080	Callee	sock -> getFullyQualifiedUser		3053358	0					
ANR	3057081	PtrMemberAccess	sock -> getFullyQualifiedUser		3053358	0					
ANR	3057082	Identifier	sock		3053358	0					
ANR	3057083	Identifier	getFullyQualifiedUser		3053358	1					
ANR	3057084	ArgumentList			3053358	1					
ANR	3057085	IfStatement	if ( fully_qualified_user )		3053358	4					
ANR	3057086	Condition	fully_qualified_user	5135:10:155655:155674	3053358	0	True				
ANR	3057087	Identifier	fully_qualified_user		3053358	0					
ANR	3057088	CompoundStatement		896:33:28651:28651	3053358	1					
ANR	3057089	ExpressionStatement	"pa_ad . Assign ( ATTR_SEC_USER , fully_qualified_user )"	5136:6:155686:155734	3053358	0	True				
ANR	3057090	CallExpression	"pa_ad . Assign ( ATTR_SEC_USER , fully_qualified_user )"		3053358	0					
ANR	3057091	Callee	pa_ad . Assign		3053358	0					
ANR	3057092	MemberAccess	pa_ad . Assign		3053358	0					
ANR	3057093	Identifier	pa_ad		3053358	0					
ANR	3057094	Identifier	Assign		3053358	1					
ANR	3057095	ArgumentList	ATTR_SEC_USER		3053358	1					
ANR	3057096	Argument	ATTR_SEC_USER		3053358	0					
ANR	3057097	Identifier	ATTR_SEC_USER		3053358	0					
ANR	3057098	Argument	fully_qualified_user		3053358	1					
ANR	3057099	Identifier	fully_qualified_user		3053358	0					
ANR	3057100	IfStatement	if ( sock -> triedAuthentication ( ) )		3053358	5					
ANR	3057101	Condition	sock -> triedAuthentication ( )	5139:9:155753:155779	3053358	0	True				
ANR	3057102	CallExpression	sock -> triedAuthentication ( )		3053358	0					
ANR	3057103	Callee	sock -> triedAuthentication		3053358	0					
ANR	3057104	PtrMemberAccess	sock -> triedAuthentication		3053358	0					
ANR	3057105	Identifier	sock		3053358	0					
ANR	3057106	Identifier	triedAuthentication		3053358	1					
ANR	3057107	ArgumentList			3053358	1					
ANR	3057108	CompoundStatement		912:6:29458:29499	3053358	1					
ANR	3057109	IdentifierDeclStatement	char * remote_version = NULL ;	5149:6:156375:156403	3053358	0	True				
ANR	3057110	IdentifierDecl	* remote_version = NULL		3053358	0					
ANR	3057111	IdentifierDeclType	char *		3053358	0					
ANR	3057112	Identifier	remote_version		3053358	1					
ANR	3057113	AssignmentExpression	* remote_version = NULL		3053358	2		=			
ANR	3057114	Identifier	NULL		3053358	0					
ANR	3057115	Identifier	NULL		3053358	1					
ANR	3057116	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_REMOTE_VERSION , & remote_version )"	5150:6:156411:156477	3053358	1	True				
ANR	3057117	CallExpression	"the_policy -> LookupString ( ATTR_SEC_REMOTE_VERSION , & remote_version )"		3053358	0					
ANR	3057118	Callee	the_policy -> LookupString		3053358	0					
ANR	3057119	PtrMemberAccess	the_policy -> LookupString		3053358	0					
ANR	3057120	Identifier	the_policy		3053358	0					
ANR	3057121	Identifier	LookupString		3053358	1					
ANR	3057122	ArgumentList	ATTR_SEC_REMOTE_VERSION		3053358	1					
ANR	3057123	Argument	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3057124	Identifier	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3057125	Argument	& remote_version		3053358	1					
ANR	3057126	UnaryOperationExpression	& remote_version		3053358	0					
ANR	3057127	UnaryOperator	&		3053358	0					
ANR	3057128	Identifier	remote_version		3053358	1					
ANR	3057129	IdentifierDeclStatement	CondorVersionInfo verinfo ( remote_version ) ;	5151:6:156485:156526	3053358	2	True				
ANR	3057130	IdentifierDecl	verinfo ( remote_version )		3053358	0					
ANR	3057131	IdentifierDeclType	CondorVersionInfo		3053358	0					
ANR	3057132	Identifier	verinfo		3053358	1					
ANR	3057133	Identifier	remote_version		3053358	2					
ANR	3057134	ExpressionStatement	free ( remote_version )	5152:6:156534:156554	3053358	3	True				
ANR	3057135	CallExpression	free ( remote_version )		3053358	0					
ANR	3057136	Callee	free		3053358	0					
ANR	3057137	Identifier	free		3053358	0					
ANR	3057138	ArgumentList	remote_version		3053358	1					
ANR	3057139	Argument	remote_version		3053358	0					
ANR	3057140	Identifier	remote_version		3053358	0					
ANR	3057141	IfStatement	"if ( verinfo . built_since_version ( 7 , 1 , 2 ) )"		3053358	4					
ANR	3057142	Condition	"verinfo . built_since_version ( 7 , 1 , 2 )"	5154:10:156567:156600	3053358	0	True				
ANR	3057143	CallExpression	"verinfo . built_since_version ( 7 , 1 , 2 )"		3053358	0					
ANR	3057144	Callee	verinfo . built_since_version		3053358	0					
ANR	3057145	MemberAccess	verinfo . built_since_version		3053358	0					
ANR	3057146	Identifier	verinfo		3053358	0					
ANR	3057147	Identifier	built_since_version		3053358	1					
ANR	3057148	ArgumentList	7		3053358	1					
ANR	3057149	Argument	7		3053358	0					
ANR	3057150	PrimaryExpression	7		3053358	0					
ANR	3057151	Argument	1		3053358	1					
ANR	3057152	PrimaryExpression	1		3053358	0					
ANR	3057153	Argument	2		3053358	2					
ANR	3057154	PrimaryExpression	2		3053358	0					
ANR	3057155	CompoundStatement		915:46:29576:29576	3053358	1					
ANR	3057156	ExpressionStatement	"pa_ad . Assign ( ATTR_SEC_TRIED_AUTHENTICATION , sock -> triedAuthentication ( ) )"	5155:7:156612:156683	3053358	0	True				
ANR	3057157	CallExpression	"pa_ad . Assign ( ATTR_SEC_TRIED_AUTHENTICATION , sock -> triedAuthentication ( ) )"		3053358	0					
ANR	3057158	Callee	pa_ad . Assign		3053358	0					
ANR	3057159	MemberAccess	pa_ad . Assign		3053358	0					
ANR	3057160	Identifier	pa_ad		3053358	0					
ANR	3057161	Identifier	Assign		3053358	1					
ANR	3057162	ArgumentList	ATTR_SEC_TRIED_AUTHENTICATION		3053358	1					
ANR	3057163	Argument	ATTR_SEC_TRIED_AUTHENTICATION		3053358	0					
ANR	3057164	Identifier	ATTR_SEC_TRIED_AUTHENTICATION		3053358	0					
ANR	3057165	Argument	sock -> triedAuthentication ( )		3053358	1					
ANR	3057166	CallExpression	sock -> triedAuthentication ( )		3053358	0					
ANR	3057167	Callee	sock -> triedAuthentication		3053358	0					
ANR	3057168	PtrMemberAccess	sock -> triedAuthentication		3053358	0					
ANR	3057169	Identifier	sock		3053358	0					
ANR	3057170	Identifier	triedAuthentication		3053358	1					
ANR	3057171	ArgumentList			3053358	1					
ANR	3057172	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_TRIED_AUTHENTICATION )"	5161:5:156768:156848	3053358	6	True				
ANR	3057173	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_TRIED_AUTHENTICATION )"		3053358	0					
ANR	3057174	Callee	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057175	PtrMemberAccess	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057176	Identifier	sec_man		3053358	0					
ANR	3057177	Identifier	sec_copy_attribute		3053358	1					
ANR	3057178	ArgumentList	* the_policy		3053358	1					
ANR	3057179	Argument	* the_policy		3053358	0					
ANR	3057180	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3057181	UnaryOperator	*		3053358	0					
ANR	3057182	Identifier	the_policy		3053358	1					
ANR	3057183	Argument	pa_ad		3053358	1					
ANR	3057184	Identifier	pa_ad		3053358	0					
ANR	3057185	Argument	ATTR_SEC_TRIED_AUTHENTICATION		3053358	2					
ANR	3057186	Identifier	ATTR_SEC_TRIED_AUTHENTICATION		3053358	0					
ANR	3057187	ExpressionStatement	"pa_ad . Assign ( ATTR_SEC_SID , the_sid )"	5164:5:156875:156910	3053358	7	True				
ANR	3057188	CallExpression	"pa_ad . Assign ( ATTR_SEC_SID , the_sid )"		3053358	0					
ANR	3057189	Callee	pa_ad . Assign		3053358	0					
ANR	3057190	MemberAccess	pa_ad . Assign		3053358	0					
ANR	3057191	Identifier	pa_ad		3053358	0					
ANR	3057192	Identifier	Assign		3053358	1					
ANR	3057193	ArgumentList	ATTR_SEC_SID		3053358	1					
ANR	3057194	Argument	ATTR_SEC_SID		3053358	0					
ANR	3057195	Identifier	ATTR_SEC_SID		3053358	0					
ANR	3057196	Argument	the_sid		3053358	1					
ANR	3057197	Identifier	the_sid		3053358	0					
ANR	3057198	ExpressionStatement	"pa_ad . Assign ( ATTR_SEC_VALID_COMMANDS , GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value ( ) )"	5167:5:156966:157081	3053358	8	True				
ANR	3057199	CallExpression	"pa_ad . Assign ( ATTR_SEC_VALID_COMMANDS , GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value ( ) )"		3053358	0					
ANR	3057200	Callee	pa_ad . Assign		3053358	0					
ANR	3057201	MemberAccess	pa_ad . Assign		3053358	0					
ANR	3057202	Identifier	pa_ad		3053358	0					
ANR	3057203	Identifier	Assign		3053358	1					
ANR	3057204	ArgumentList	ATTR_SEC_VALID_COMMANDS		3053358	1					
ANR	3057205	Argument	ATTR_SEC_VALID_COMMANDS		3053358	0					
ANR	3057206	Identifier	ATTR_SEC_VALID_COMMANDS		3053358	0					
ANR	3057207	Argument	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value ( )"		3053358	1					
ANR	3057208	CallExpression	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value ( )"		3053358	0					
ANR	3057209	Callee	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value"		3053358	0					
ANR	3057210	MemberAccess	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value"		3053358	0					
ANR	3057211	CallExpression	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) )"		3053358	0					
ANR	3057212	Callee	GetCommandsInAuthLevel		3053358	0					
ANR	3057213	Identifier	GetCommandsInAuthLevel		3053358	0					
ANR	3057214	ArgumentList	comTable [ cmd_index ] . perm		3053358	1					
ANR	3057215	Argument	comTable [ cmd_index ] . perm		3053358	0					
ANR	3057216	MemberAccess	comTable [ cmd_index ] . perm		3053358	0					
ANR	3057217	ArrayIndexing	comTable [ cmd_index ]		3053358	0					
ANR	3057218	Identifier	comTable		3053358	0					
ANR	3057219	Identifier	cmd_index		3053358	1					
ANR	3057220	Identifier	perm		3053358	1					
ANR	3057221	Argument	sock -> isMappedFQU ( )		3053358	1					
ANR	3057222	CallExpression	sock -> isMappedFQU ( )		3053358	0					
ANR	3057223	Callee	sock -> isMappedFQU		3053358	0					
ANR	3057224	PtrMemberAccess	sock -> isMappedFQU		3053358	0					
ANR	3057225	Identifier	sock		3053358	0					
ANR	3057226	Identifier	isMappedFQU		3053358	1					
ANR	3057227	ArgumentList			3053358	1					
ANR	3057228	Identifier	Value		3053358	1					
ANR	3057229	ArgumentList			3053358	1					
ANR	3057230	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SUBSYSTEM )"	5170:5:157160:157233	3053358	9	True				
ANR	3057231	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SUBSYSTEM )"		3053358	0					
ANR	3057232	Callee	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057233	PtrMemberAccess	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057234	Identifier	sec_man		3053358	0					
ANR	3057235	Identifier	sec_copy_attribute		3053358	1					
ANR	3057236	ArgumentList	* the_policy		3053358	1					
ANR	3057237	Argument	* the_policy		3053358	0					
ANR	3057238	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3057239	UnaryOperator	*		3053358	0					
ANR	3057240	Identifier	the_policy		3053358	1					
ANR	3057241	Argument	auth_info		3053358	1					
ANR	3057242	Identifier	auth_info		3053358	0					
ANR	3057243	Argument	ATTR_SEC_SUBSYSTEM		3053358	2					
ANR	3057244	Identifier	ATTR_SEC_SUBSYSTEM		3053358	0					
ANR	3057245	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SERVER_COMMAND_SOCK )"	5171:5:157240:157323	3053358	10	True				
ANR	3057246	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SERVER_COMMAND_SOCK )"		3053358	0					
ANR	3057247	Callee	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057248	PtrMemberAccess	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057249	Identifier	sec_man		3053358	0					
ANR	3057250	Identifier	sec_copy_attribute		3053358	1					
ANR	3057251	ArgumentList	* the_policy		3053358	1					
ANR	3057252	Argument	* the_policy		3053358	0					
ANR	3057253	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3057254	UnaryOperator	*		3053358	0					
ANR	3057255	Identifier	the_policy		3053358	1					
ANR	3057256	Argument	auth_info		3053358	1					
ANR	3057257	Identifier	auth_info		3053358	0					
ANR	3057258	Argument	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	2					
ANR	3057259	Identifier	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	0					
ANR	3057260	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_PARENT_UNIQUE_ID )"	5172:5:157330:157410	3053358	11	True				
ANR	3057261	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_PARENT_UNIQUE_ID )"		3053358	0					
ANR	3057262	Callee	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057263	PtrMemberAccess	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057264	Identifier	sec_man		3053358	0					
ANR	3057265	Identifier	sec_copy_attribute		3053358	1					
ANR	3057266	ArgumentList	* the_policy		3053358	1					
ANR	3057267	Argument	* the_policy		3053358	0					
ANR	3057268	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3057269	UnaryOperator	*		3053358	0					
ANR	3057270	Identifier	the_policy		3053358	1					
ANR	3057271	Argument	auth_info		3053358	1					
ANR	3057272	Identifier	auth_info		3053358	0					
ANR	3057273	Argument	ATTR_SEC_PARENT_UNIQUE_ID		3053358	2					
ANR	3057274	Identifier	ATTR_SEC_PARENT_UNIQUE_ID		3053358	0					
ANR	3057275	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SERVER_PID )"	5173:5:157417:157491	3053358	12	True				
ANR	3057276	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SERVER_PID )"		3053358	0					
ANR	3057277	Callee	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057278	PtrMemberAccess	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057279	Identifier	sec_man		3053358	0					
ANR	3057280	Identifier	sec_copy_attribute		3053358	1					
ANR	3057281	ArgumentList	* the_policy		3053358	1					
ANR	3057282	Argument	* the_policy		3053358	0					
ANR	3057283	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3057284	UnaryOperator	*		3053358	0					
ANR	3057285	Identifier	the_policy		3053358	1					
ANR	3057286	Argument	auth_info		3053358	1					
ANR	3057287	Identifier	auth_info		3053358	0					
ANR	3057288	Argument	ATTR_SEC_SERVER_PID		3053358	2					
ANR	3057289	Identifier	ATTR_SEC_SERVER_PID		3053358	0					
ANR	3057290	ExpressionStatement	the_policy -> Delete ( ATTR_SEC_REMOTE_VERSION )	5175:5:157574:157619	3053358	13	True				
ANR	3057291	CallExpression	the_policy -> Delete ( ATTR_SEC_REMOTE_VERSION )		3053358	0					
ANR	3057292	Callee	the_policy -> Delete		3053358	0					
ANR	3057293	PtrMemberAccess	the_policy -> Delete		3053358	0					
ANR	3057294	Identifier	the_policy		3053358	0					
ANR	3057295	Identifier	Delete		3053358	1					
ANR	3057296	ArgumentList	ATTR_SEC_REMOTE_VERSION		3053358	1					
ANR	3057297	Argument	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3057298	Identifier	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3057299	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_REMOTE_VERSION )"	5176:5:157626:157704	3053358	14	True				
ANR	3057300	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_REMOTE_VERSION )"		3053358	0					
ANR	3057301	Callee	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057302	PtrMemberAccess	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057303	Identifier	sec_man		3053358	0					
ANR	3057304	Identifier	sec_copy_attribute		3053358	1					
ANR	3057305	ArgumentList	* the_policy		3053358	1					
ANR	3057306	Argument	* the_policy		3053358	0					
ANR	3057307	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3057308	UnaryOperator	*		3053358	0					
ANR	3057309	Identifier	the_policy		3053358	1					
ANR	3057310	Argument	auth_info		3053358	1					
ANR	3057311	Identifier	auth_info		3053358	0					
ANR	3057312	Argument	ATTR_SEC_REMOTE_VERSION		3053358	2					
ANR	3057313	Identifier	ATTR_SEC_REMOTE_VERSION		3053358	0					
ANR	3057314	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_USER )"	5177:5:157711:157775	3053358	15	True				
ANR	3057315	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_USER )"		3053358	0					
ANR	3057316	Callee	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057317	PtrMemberAccess	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057318	Identifier	sec_man		3053358	0					
ANR	3057319	Identifier	sec_copy_attribute		3053358	1					
ANR	3057320	ArgumentList	* the_policy		3053358	1					
ANR	3057321	Argument	* the_policy		3053358	0					
ANR	3057322	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3057323	UnaryOperator	*		3053358	0					
ANR	3057324	Identifier	the_policy		3053358	1					
ANR	3057325	Argument	pa_ad		3053358	1					
ANR	3057326	Identifier	pa_ad		3053358	0					
ANR	3057327	Argument	ATTR_SEC_USER		3053358	2					
ANR	3057328	Identifier	ATTR_SEC_USER		3053358	0					
ANR	3057329	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_SID )"	5178:5:157782:157845	3053358	16	True				
ANR	3057330	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_SID )"		3053358	0					
ANR	3057331	Callee	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057332	PtrMemberAccess	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057333	Identifier	sec_man		3053358	0					
ANR	3057334	Identifier	sec_copy_attribute		3053358	1					
ANR	3057335	ArgumentList	* the_policy		3053358	1					
ANR	3057336	Argument	* the_policy		3053358	0					
ANR	3057337	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3057338	UnaryOperator	*		3053358	0					
ANR	3057339	Identifier	the_policy		3053358	1					
ANR	3057340	Argument	pa_ad		3053358	1					
ANR	3057341	Identifier	pa_ad		3053358	0					
ANR	3057342	Argument	ATTR_SEC_SID		3053358	2					
ANR	3057343	Identifier	ATTR_SEC_SID		3053358	0					
ANR	3057344	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_VALID_COMMANDS )"	5179:5:157852:157926	3053358	17	True				
ANR	3057345	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_VALID_COMMANDS )"		3053358	0					
ANR	3057346	Callee	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057347	PtrMemberAccess	sec_man -> sec_copy_attribute		3053358	0					
ANR	3057348	Identifier	sec_man		3053358	0					
ANR	3057349	Identifier	sec_copy_attribute		3053358	1					
ANR	3057350	ArgumentList	* the_policy		3053358	1					
ANR	3057351	Argument	* the_policy		3053358	0					
ANR	3057352	UnaryOperationExpression	* the_policy		3053358	0					
ANR	3057353	UnaryOperator	*		3053358	0					
ANR	3057354	Identifier	the_policy		3053358	1					
ANR	3057355	Argument	pa_ad		3053358	1					
ANR	3057356	Identifier	pa_ad		3053358	0					
ANR	3057357	Argument	ATTR_SEC_VALID_COMMANDS		3053358	2					
ANR	3057358	Identifier	ATTR_SEC_VALID_COMMANDS		3053358	0					
ANR	3057359	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	18					
ANR	3057360	Condition	DebugFlags & D_FULLDEBUG	5181:9:157938:157961	3053358	0	True				
ANR	3057361	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3057362	Identifier	DebugFlags		3053358	0					
ANR	3057363	Identifier	D_FULLDEBUG		3053358	1					
ANR	3057364	CompoundStatement		942:35:30937:30937	3053358	1					
ANR	3057365	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: sending session ad:\\n"" )"	5182:6:157972:158034	3053358	0	True				
ANR	3057366	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: sending session ad:\\n"" )"		3053358	0					
ANR	3057367	Callee	dprintf		3053358	0					
ANR	3057368	Identifier	dprintf		3053358	0					
ANR	3057369	ArgumentList	D_SECURITY		3053358	1					
ANR	3057370	Argument	D_SECURITY		3053358	0					
ANR	3057371	Identifier	D_SECURITY		3053358	0					
ANR	3057372	Argument	"""DC_AUTHENTICATE: sending session ad:\\n"""		3053358	1					
ANR	3057373	PrimaryExpression	"""DC_AUTHENTICATE: sending session ad:\\n"""		3053358	0					
ANR	3057374	ExpressionStatement	pa_ad . dPrint ( D_SECURITY )	5183:6:158042:158068	3053358	1	True				
ANR	3057375	CallExpression	pa_ad . dPrint ( D_SECURITY )		3053358	0					
ANR	3057376	Callee	pa_ad . dPrint		3053358	0					
ANR	3057377	MemberAccess	pa_ad . dPrint		3053358	0					
ANR	3057378	Identifier	pa_ad		3053358	0					
ANR	3057379	Identifier	dPrint		3053358	1					
ANR	3057380	ArgumentList	D_SECURITY		3053358	1					
ANR	3057381	Argument	D_SECURITY		3053358	0					
ANR	3057382	Identifier	D_SECURITY		3053358	0					
ANR	3057383	ExpressionStatement	sock -> encode ( )	5186:5:158083:158097	3053358	19	True				
ANR	3057384	CallExpression	sock -> encode ( )		3053358	0					
ANR	3057385	Callee	sock -> encode		3053358	0					
ANR	3057386	PtrMemberAccess	sock -> encode		3053358	0					
ANR	3057387	Identifier	sock		3053358	0					
ANR	3057388	Identifier	encode		3053358	1					
ANR	3057389	ArgumentList			3053358	1					
ANR	3057390	IfStatement	if ( ! pa_ad . put ( * sock ) || ! sock -> end_of_message ( ) )		3053358	20					
ANR	3057391	Condition	! pa_ad . put ( * sock ) || ! sock -> end_of_message ( )	5187:9:158108:158159	3053358	0	True				
ANR	3057392	OrExpression	! pa_ad . put ( * sock ) || ! sock -> end_of_message ( )		3053358	0		||			
ANR	3057393	UnaryOperationExpression	! pa_ad . put ( * sock )		3053358	0					
ANR	3057394	UnaryOperator	!		3053358	0					
ANR	3057395	CallExpression	pa_ad . put ( * sock )		3053358	1					
ANR	3057396	Callee	pa_ad . put		3053358	0					
ANR	3057397	MemberAccess	pa_ad . put		3053358	0					
ANR	3057398	Identifier	pa_ad		3053358	0					
ANR	3057399	Identifier	put		3053358	1					
ANR	3057400	ArgumentList	* sock		3053358	1					
ANR	3057401	Argument	* sock		3053358	0					
ANR	3057402	UnaryOperationExpression	* sock		3053358	0					
ANR	3057403	UnaryOperator	*		3053358	0					
ANR	3057404	Identifier	sock		3053358	1					
ANR	3057405	UnaryOperationExpression	! sock -> end_of_message ( )		3053358	1					
ANR	3057406	UnaryOperator	!		3053358	0					
ANR	3057407	CallExpression	sock -> end_of_message ( )		3053358	1					
ANR	3057408	Callee	sock -> end_of_message		3053358	0					
ANR	3057409	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3057410	Identifier	sock		3053358	0					
ANR	3057411	Identifier	end_of_message		3053358	1					
ANR	3057412	ArgumentList			3053358	1					
ANR	3057413	CompoundStatement		949:33:31136:31136	3053358	1					
ANR	3057414	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to send session %s info to %s!\\n"" , the_sid , sock -> peer_description ( ) )"	5189:6:158171:158284	3053358	0	True				
ANR	3057415	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to send session %s info to %s!\\n"" , the_sid , sock -> peer_description ( ) )"		3053358	0					
ANR	3057416	Callee	dprintf		3053358	0					
ANR	3057417	Identifier	dprintf		3053358	0					
ANR	3057418	ArgumentList	D_ALWAYS		3053358	1					
ANR	3057419	Argument	D_ALWAYS		3053358	0					
ANR	3057420	Identifier	D_ALWAYS		3053358	0					
ANR	3057421	Argument	"""DC_AUTHENTICATE: unable to send session %s info to %s!\\n"""		3053358	1					
ANR	3057422	PrimaryExpression	"""DC_AUTHENTICATE: unable to send session %s info to %s!\\n"""		3053358	0					
ANR	3057423	Argument	the_sid		3053358	2					
ANR	3057424	Identifier	the_sid		3053358	0					
ANR	3057425	Argument	sock -> peer_description ( )		3053358	3					
ANR	3057426	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3057427	Callee	sock -> peer_description		3053358	0					
ANR	3057428	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3057429	Identifier	sock		3053358	0					
ANR	3057430	Identifier	peer_description		3053358	1					
ANR	3057431	ArgumentList			3053358	1					
ANR	3057432	ExpressionStatement	result = FALSE	5190:6:158292:158306	3053358	1	True				
ANR	3057433	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3057434	Identifier	result		3053358	0					
ANR	3057435	Identifier	FALSE		3053358	1					
ANR	3057436	GotoStatement	goto finalize ;	5191:6:158314:158327	3053358	2	True				
ANR	3057437	Identifier	finalize		3053358	0					
ANR	3057438	ElseStatement	else		3053358	0					
ANR	3057439	CompoundStatement		953:12:31314:31314	3053358	0					
ANR	3057440	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	0					
ANR	3057441	Condition	DebugFlags & D_FULLDEBUG	5193:10:158353:158376	3053358	0	True				
ANR	3057442	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3057443	Identifier	DebugFlags		3053358	0					
ANR	3057444	Identifier	D_FULLDEBUG		3053358	1					
ANR	3057445	CompoundStatement		954:36:31352:31352	3053358	1					
ANR	3057446	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: sent session %s info!\\n"" , the_sid )"	5194:7:158388:158461	3053358	0	True				
ANR	3057447	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: sent session %s info!\\n"" , the_sid )"		3053358	0					
ANR	3057448	Callee	dprintf		3053358	0					
ANR	3057449	Identifier	dprintf		3053358	0					
ANR	3057450	ArgumentList	D_SECURITY		3053358	1					
ANR	3057451	Argument	D_SECURITY		3053358	0					
ANR	3057452	Identifier	D_SECURITY		3053358	0					
ANR	3057453	Argument	"""DC_AUTHENTICATE: sent session %s info!\\n"""		3053358	1					
ANR	3057454	PrimaryExpression	"""DC_AUTHENTICATE: sent session %s info!\\n"""		3053358	0					
ANR	3057455	Argument	the_sid		3053358	2					
ANR	3057456	Identifier	the_sid		3053358	0					
ANR	3057457	IdentifierDeclStatement	char * dur = NULL ;	5199:5:158521:158537	3053358	21	True				
ANR	3057458	IdentifierDecl	* dur = NULL		3053358	0					
ANR	3057459	IdentifierDeclType	char *		3053358	0					
ANR	3057460	Identifier	dur		3053358	1					
ANR	3057461	AssignmentExpression	* dur = NULL		3053358	2		=			
ANR	3057462	Identifier	NULL		3053358	0					
ANR	3057463	Identifier	NULL		3053358	1					
ANR	3057464	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_SESSION_DURATION , & dur )"	5200:5:158544:158601	3053358	22	True				
ANR	3057465	CallExpression	"the_policy -> LookupString ( ATTR_SEC_SESSION_DURATION , & dur )"		3053358	0					
ANR	3057466	Callee	the_policy -> LookupString		3053358	0					
ANR	3057467	PtrMemberAccess	the_policy -> LookupString		3053358	0					
ANR	3057468	Identifier	the_policy		3053358	0					
ANR	3057469	Identifier	LookupString		3053358	1					
ANR	3057470	ArgumentList	ATTR_SEC_SESSION_DURATION		3053358	1					
ANR	3057471	Argument	ATTR_SEC_SESSION_DURATION		3053358	0					
ANR	3057472	Identifier	ATTR_SEC_SESSION_DURATION		3053358	0					
ANR	3057473	Argument	& dur		3053358	1					
ANR	3057474	UnaryOperationExpression	& dur		3053358	0					
ANR	3057475	UnaryOperator	&		3053358	0					
ANR	3057476	Identifier	dur		3053358	1					
ANR	3057477	IdentifierDeclStatement	char * return_addr = NULL ;	5202:5:158609:158633	3053358	23	True				
ANR	3057478	IdentifierDecl	* return_addr = NULL		3053358	0					
ANR	3057479	IdentifierDeclType	char *		3053358	0					
ANR	3057480	Identifier	return_addr		3053358	1					
ANR	3057481	AssignmentExpression	* return_addr = NULL		3053358	2		=			
ANR	3057482	Identifier	NULL		3053358	0					
ANR	3057483	Identifier	NULL		3053358	1					
ANR	3057484	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"	5203:5:158640:158708	3053358	24	True				
ANR	3057485	CallExpression	"the_policy -> LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"		3053358	0					
ANR	3057486	Callee	the_policy -> LookupString		3053358	0					
ANR	3057487	PtrMemberAccess	the_policy -> LookupString		3053358	0					
ANR	3057488	Identifier	the_policy		3053358	0					
ANR	3057489	Identifier	LookupString		3053358	1					
ANR	3057490	ArgumentList	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	1					
ANR	3057491	Argument	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	0					
ANR	3057492	Identifier	ATTR_SEC_SERVER_COMMAND_SOCK		3053358	0					
ANR	3057493	Argument	& return_addr		3053358	1					
ANR	3057494	UnaryOperationExpression	& return_addr		3053358	0					
ANR	3057495	UnaryOperator	&		3053358	0					
ANR	3057496	Identifier	return_addr		3053358	1					
ANR	3057497	IdentifierDeclStatement	"int slop = param_integer ( ""SEC_SESSION_DURATION_SLOP"" , 20 ) ;"	5209:5:158967:159024	3053358	25	True				
ANR	3057498	IdentifierDecl	"slop = param_integer ( ""SEC_SESSION_DURATION_SLOP"" , 20 )"		3053358	0					
ANR	3057499	IdentifierDeclType	int		3053358	0					
ANR	3057500	Identifier	slop		3053358	1					
ANR	3057501	AssignmentExpression	"slop = param_integer ( ""SEC_SESSION_DURATION_SLOP"" , 20 )"		3053358	2		=			
ANR	3057502	Identifier	slop		3053358	0					
ANR	3057503	CallExpression	"param_integer ( ""SEC_SESSION_DURATION_SLOP"" , 20 )"		3053358	1					
ANR	3057504	Callee	param_integer		3053358	0					
ANR	3057505	Identifier	param_integer		3053358	0					
ANR	3057506	ArgumentList	"""SEC_SESSION_DURATION_SLOP"""		3053358	1					
ANR	3057507	Argument	"""SEC_SESSION_DURATION_SLOP"""		3053358	0					
ANR	3057508	PrimaryExpression	"""SEC_SESSION_DURATION_SLOP"""		3053358	0					
ANR	3057509	Argument	20		3053358	1					
ANR	3057510	PrimaryExpression	20		3053358	0					
ANR	3057511	IdentifierDeclStatement	int durint = atoi ( dur ) + slop ;	5210:5:159031:159060	3053358	26	True				
ANR	3057512	IdentifierDecl	durint = atoi ( dur ) + slop		3053358	0					
ANR	3057513	IdentifierDeclType	int		3053358	0					
ANR	3057514	Identifier	durint		3053358	1					
ANR	3057515	AssignmentExpression	durint = atoi ( dur ) + slop		3053358	2		=			
ANR	3057516	Identifier	durint		3053358	0					
ANR	3057517	AdditiveExpression	atoi ( dur ) + slop		3053358	1		+			
ANR	3057518	CallExpression	atoi ( dur )		3053358	0					
ANR	3057519	Callee	atoi		3053358	0					
ANR	3057520	Identifier	atoi		3053358	0					
ANR	3057521	ArgumentList	dur		3053358	1					
ANR	3057522	Argument	dur		3053358	0					
ANR	3057523	Identifier	dur		3053358	0					
ANR	3057524	Identifier	slop		3053358	1					
ANR	3057525	IdentifierDeclStatement	time_t now = time ( 0 ) ;	5211:5:159067:159087	3053358	27	True				
ANR	3057526	IdentifierDecl	now = time ( 0 )		3053358	0					
ANR	3057527	IdentifierDeclType	time_t		3053358	0					
ANR	3057528	Identifier	now		3053358	1					
ANR	3057529	AssignmentExpression	now = time ( 0 )		3053358	2		=			
ANR	3057530	Identifier	now		3053358	0					
ANR	3057531	CallExpression	time ( 0 )		3053358	1					
ANR	3057532	Callee	time		3053358	0					
ANR	3057533	Identifier	time		3053358	0					
ANR	3057534	ArgumentList	0		3053358	1					
ANR	3057535	Argument	0		3053358	0					
ANR	3057536	PrimaryExpression	0		3053358	0					
ANR	3057537	IdentifierDeclStatement	int expiration_time = now + durint ;	5212:5:159094:159128	3053358	28	True				
ANR	3057538	IdentifierDecl	expiration_time = now + durint		3053358	0					
ANR	3057539	IdentifierDeclType	int		3053358	0					
ANR	3057540	Identifier	expiration_time		3053358	1					
ANR	3057541	AssignmentExpression	expiration_time = now + durint		3053358	2		=			
ANR	3057542	Identifier	expiration_time		3053358	0					
ANR	3057543	AdditiveExpression	now + durint		3053358	1		+			
ANR	3057544	Identifier	now		3053358	0					
ANR	3057545	Identifier	durint		3053358	1					
ANR	3057546	IdentifierDeclStatement	int session_lease = 0 ;	5215:5:159193:159214	3053358	29	True				
ANR	3057547	IdentifierDecl	session_lease = 0		3053358	0					
ANR	3057548	IdentifierDeclType	int		3053358	0					
ANR	3057549	Identifier	session_lease		3053358	1					
ANR	3057550	AssignmentExpression	session_lease = 0		3053358	2		=			
ANR	3057551	Identifier	session_lease		3053358	0					
ANR	3057552	PrimaryExpression	0		3053358	1					
ANR	3057553	ExpressionStatement	"the_policy -> LookupInteger ( ATTR_SEC_SESSION_LEASE , session_lease )"	5216:5:159221:159285	3053358	30	True				
ANR	3057554	CallExpression	"the_policy -> LookupInteger ( ATTR_SEC_SESSION_LEASE , session_lease )"		3053358	0					
ANR	3057555	Callee	the_policy -> LookupInteger		3053358	0					
ANR	3057556	PtrMemberAccess	the_policy -> LookupInteger		3053358	0					
ANR	3057557	Identifier	the_policy		3053358	0					
ANR	3057558	Identifier	LookupInteger		3053358	1					
ANR	3057559	ArgumentList	ATTR_SEC_SESSION_LEASE		3053358	1					
ANR	3057560	Argument	ATTR_SEC_SESSION_LEASE		3053358	0					
ANR	3057561	Identifier	ATTR_SEC_SESSION_LEASE		3053358	0					
ANR	3057562	Argument	session_lease		3053358	1					
ANR	3057563	Identifier	session_lease		3053358	0					
ANR	3057564	IfStatement	if ( session_lease )		3053358	31					
ANR	3057565	Condition	session_lease	5217:9:159296:159308	3053358	0	True				
ANR	3057566	Identifier	session_lease		3053358	0					
ANR	3057567	CompoundStatement		978:25:32285:32285	3053358	1					
ANR	3057568	ExpressionStatement	session_lease += slop	5221:6:159453:159474	3053358	0	True				
ANR	3057569	AssignmentExpression	session_lease += slop		3053358	0		+=			
ANR	3057570	Identifier	session_lease		3053358	0					
ANR	3057571	Identifier	slop		3053358	1					
ANR	3057572	IdentifierDeclStatement	"KeyCacheEntry tmp_key ( the_sid , NULL , the_key , the_policy , expiration_time , session_lease ) ;"	5232:5:159775:159865	3053358	32	True				
ANR	3057573	IdentifierDecl	"tmp_key ( the_sid , NULL , the_key , the_policy , expiration_time , session_lease )"		3053358	0					
ANR	3057574	IdentifierDeclType	KeyCacheEntry		3053358	0					
ANR	3057575	Identifier	tmp_key		3053358	1					
ANR	3057576	Expression	"the_sid , NULL , the_key , the_policy , expiration_time , session_lease"		3053358	2					
ANR	3057577	Identifier	the_sid		3053358	0					
ANR	3057578	Expression	"NULL , the_key , the_policy , expiration_time , session_lease"		3053358	1					
ANR	3057579	Identifier	NULL		3053358	0					
ANR	3057580	Expression	"the_key , the_policy , expiration_time , session_lease"		3053358	1					
ANR	3057581	Identifier	the_key		3053358	0					
ANR	3057582	Expression	"the_policy , expiration_time , session_lease"		3053358	1					
ANR	3057583	Identifier	the_policy		3053358	0					
ANR	3057584	Expression	"expiration_time , session_lease"		3053358	1					
ANR	3057585	Identifier	expiration_time		3053358	0					
ANR	3057586	Identifier	session_lease		3053358	1					
ANR	3057587	ExpressionStatement	sec_man -> session_cache -> insert ( tmp_key )	5233:5:159872:159911	3053358	33	True				
ANR	3057588	CallExpression	sec_man -> session_cache -> insert ( tmp_key )		3053358	0					
ANR	3057589	Callee	sec_man -> session_cache -> insert		3053358	0					
ANR	3057590	PtrMemberAccess	sec_man -> session_cache -> insert		3053358	0					
ANR	3057591	PtrMemberAccess	sec_man -> session_cache		3053358	0					
ANR	3057592	Identifier	sec_man		3053358	0					
ANR	3057593	Identifier	session_cache		3053358	1					
ANR	3057594	Identifier	insert		3053358	1					
ANR	3057595	ArgumentList	tmp_key		3053358	1					
ANR	3057596	Argument	tmp_key		3053358	0					
ANR	3057597	Identifier	tmp_key		3053358	0					
ANR	3057598	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: added incoming session id %s to cache for %i seconds (lease is %ds, return address is %s).\\n"" , the_sid , durint , session_lease , return_addr ? return_addr : ""unknown"" )"	5234:5:159918:160122	3053358	34	True				
ANR	3057599	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: added incoming session id %s to cache for %i seconds (lease is %ds, return address is %s).\\n"" , the_sid , durint , session_lease , return_addr ? return_addr : ""unknown"" )"		3053358	0					
ANR	3057600	Callee	dprintf		3053358	0					
ANR	3057601	Identifier	dprintf		3053358	0					
ANR	3057602	ArgumentList	D_SECURITY		3053358	1					
ANR	3057603	Argument	D_SECURITY		3053358	0					
ANR	3057604	Identifier	D_SECURITY		3053358	0					
ANR	3057605	Argument	"""DC_AUTHENTICATE: added incoming session id %s to cache for %i seconds (lease is %ds, return address is %s).\\n"""		3053358	1					
ANR	3057606	PrimaryExpression	"""DC_AUTHENTICATE: added incoming session id %s to cache for %i seconds (lease is %ds, return address is %s).\\n"""		3053358	0					
ANR	3057607	Argument	the_sid		3053358	2					
ANR	3057608	Identifier	the_sid		3053358	0					
ANR	3057609	Argument	durint		3053358	3					
ANR	3057610	Identifier	durint		3053358	0					
ANR	3057611	Argument	session_lease		3053358	4					
ANR	3057612	Identifier	session_lease		3053358	0					
ANR	3057613	Argument	"return_addr ? return_addr : ""unknown"""		3053358	5					
ANR	3057614	ConditionalExpression	"return_addr ? return_addr : ""unknown"""		3053358	0					
ANR	3057615	Condition	return_addr		3053358	0					
ANR	3057616	Identifier	return_addr		3053358	0					
ANR	3057617	Identifier	return_addr		3053358	1					
ANR	3057618	PrimaryExpression	"""unknown"""		3053358	2					
ANR	3057619	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3053358	35					
ANR	3057620	Condition	DebugFlags & D_FULLDEBUG	5235:9:160133:160156	3053358	0	True				
ANR	3057621	BitAndExpression	DebugFlags & D_FULLDEBUG		3053358	0		&			
ANR	3057622	Identifier	DebugFlags		3053358	0					
ANR	3057623	Identifier	D_FULLDEBUG		3053358	1					
ANR	3057624	CompoundStatement		996:35:33132:33132	3053358	1					
ANR	3057625	ExpressionStatement	the_policy -> dPrint ( D_SECURITY )	5236:6:160167:160197	3053358	0	True				
ANR	3057626	CallExpression	the_policy -> dPrint ( D_SECURITY )		3053358	0					
ANR	3057627	Callee	the_policy -> dPrint		3053358	0					
ANR	3057628	PtrMemberAccess	the_policy -> dPrint		3053358	0					
ANR	3057629	Identifier	the_policy		3053358	0					
ANR	3057630	Identifier	dPrint		3053358	1					
ANR	3057631	ArgumentList	D_SECURITY		3053358	1					
ANR	3057632	Argument	D_SECURITY		3053358	0					
ANR	3057633	Identifier	D_SECURITY		3053358	0					
ANR	3057634	ExpressionStatement	free ( dur )	5239:5:160212:160223	3053358	36	True				
ANR	3057635	CallExpression	free ( dur )		3053358	0					
ANR	3057636	Callee	free		3053358	0					
ANR	3057637	Identifier	free		3053358	0					
ANR	3057638	ArgumentList	dur		3053358	1					
ANR	3057639	Argument	dur		3053358	0					
ANR	3057640	Identifier	dur		3053358	0					
ANR	3057641	ExpressionStatement	dur = NULL	5240:5:160230:160240	3053358	37	True				
ANR	3057642	AssignmentExpression	dur = NULL		3053358	0		=			
ANR	3057643	Identifier	dur		3053358	0					
ANR	3057644	Identifier	NULL		3053358	1					
ANR	3057645	ExpressionStatement	free ( return_addr )	5241:5:160247:160266	3053358	38	True				
ANR	3057646	CallExpression	free ( return_addr )		3053358	0					
ANR	3057647	Callee	free		3053358	0					
ANR	3057648	Identifier	free		3053358	0					
ANR	3057649	ArgumentList	return_addr		3053358	1					
ANR	3057650	Argument	return_addr		3053358	0					
ANR	3057651	Identifier	return_addr		3053358	0					
ANR	3057652	ExpressionStatement	return_addr = NULL	5242:5:160273:160291	3053358	39	True				
ANR	3057653	AssignmentExpression	return_addr = NULL		3053358	0		=			
ANR	3057654	Identifier	return_addr		3053358	0					
ANR	3057655	Identifier	NULL		3053358	1					
ANR	3057656	IfStatement	if ( real_cmd == DC_AUTHENTICATE )		3053358	22					
ANR	3057657	Condition	real_cmd == DC_AUTHENTICATE	5247:6:160315:160341	3053358	0	True				
ANR	3057658	EqualityExpression	real_cmd == DC_AUTHENTICATE		3053358	0		==			
ANR	3057659	Identifier	real_cmd		3053358	0					
ANR	3057660	Identifier	DC_AUTHENTICATE		3053358	1					
ANR	3057661	CompoundStatement		1008:35:33317:33317	3053358	1					
ANR	3057662	ExpressionStatement	result = TRUE	5248:3:160349:160362	3053358	0	True				
ANR	3057663	AssignmentExpression	result = TRUE		3053358	0		=			
ANR	3057664	Identifier	result		3053358	0					
ANR	3057665	Identifier	TRUE		3053358	1					
ANR	3057666	GotoStatement	goto finalize ;	5249:3:160367:160380	3053358	1	True				
ANR	3057667	Identifier	finalize		3053358	0					
ANR	3057668	ExpressionStatement	req = real_cmd	5252:2:160389:160403	3053358	23	True				
ANR	3057669	AssignmentExpression	req = real_cmd		3053358	0		=			
ANR	3057670	Identifier	req		3053358	0					
ANR	3057671	Identifier	real_cmd		3053358	1					
ANR	3057672	ExpressionStatement	result = TRUE	5253:2:160407:160420	3053358	24	True				
ANR	3057673	AssignmentExpression	result = TRUE		3053358	0		=			
ANR	3057674	Identifier	result		3053358	0					
ANR	3057675	Identifier	TRUE		3053358	1					
ANR	3057676	ExpressionStatement	sock -> decode ( )	5255:2:160425:160439	3053358	25	True				
ANR	3057677	CallExpression	sock -> decode ( )		3053358	0					
ANR	3057678	Callee	sock -> decode		3053358	0					
ANR	3057679	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3057680	Identifier	sock		3053358	0					
ANR	3057681	Identifier	decode		3053358	1					
ANR	3057682	ArgumentList			3053358	1					
ANR	3057683	IfStatement	if ( comTable [ cmd_index ] . wait_for_payload == 0 )		3053358	26					
ANR	3057684	Condition	comTable [ cmd_index ] . wait_for_payload == 0	5256:6:160447:160487	3053358	0	True				
ANR	3057685	EqualityExpression	comTable [ cmd_index ] . wait_for_payload == 0		3053358	0		==			
ANR	3057686	MemberAccess	comTable [ cmd_index ] . wait_for_payload		3053358	0					
ANR	3057687	ArrayIndexing	comTable [ cmd_index ]		3053358	0					
ANR	3057688	Identifier	comTable		3053358	0					
ANR	3057689	Identifier	cmd_index		3053358	1					
ANR	3057690	Identifier	wait_for_payload		3053358	1					
ANR	3057691	PrimaryExpression	0		3053358	1					
ANR	3057692	CompoundStatement		1017:50:33464:33464	3053358	1					
ANR	3057693	ExpressionStatement	sock -> allow_one_empty_message ( )	5265:3:160838:160869	3053358	0	True				
ANR	3057694	CallExpression	sock -> allow_one_empty_message ( )		3053358	0					
ANR	3057695	Callee	sock -> allow_one_empty_message		3053358	0					
ANR	3057696	PtrMemberAccess	sock -> allow_one_empty_message		3053358	0					
ANR	3057697	Identifier	sock		3053358	0					
ANR	3057698	Identifier	allow_one_empty_message		3053358	1					
ANR	3057699	ArgumentList			3053358	1					
ANR	3057700	ExpressionStatement	reqFound = TRUE	5269:2:160908:160923	3053358	27	True				
ANR	3057701	AssignmentExpression	reqFound = TRUE		3053358	0		=			
ANR	3057702	Identifier	reqFound		3053358	0					
ANR	3057703	Identifier	TRUE		3053358	1					
ANR	3057704	ExpressionStatement	index = cmd_index	5270:2:160927:160944	3053358	28	True				
ANR	3057705	AssignmentExpression	index = cmd_index		3053358	0		=			
ANR	3057706	Identifier	index		3053358	0					
ANR	3057707	Identifier	cmd_index		3053358	1					
ANR	3057708	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: Success.\\n"" )"	5272:2:160949:161000	3053358	29	True				
ANR	3057709	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: Success.\\n"" )"		3053358	0					
ANR	3057710	Callee	dprintf		3053358	0					
ANR	3057711	Identifier	dprintf		3053358	0					
ANR	3057712	ArgumentList	D_SECURITY		3053358	1					
ANR	3057713	Argument	D_SECURITY		3053358	0					
ANR	3057714	Identifier	D_SECURITY		3053358	0					
ANR	3057715	Argument	"""DC_AUTHENTICATE: Success.\\n"""		3053358	1					
ANR	3057716	PrimaryExpression	"""DC_AUTHENTICATE: Success.\\n"""		3053358	0					
ANR	3057717	ElseStatement	else		3053358	0					
ANR	3057718	CompoundStatement		1034:8:33983:33983	3053358	0					
ANR	3057719	ExpressionStatement	"reqFound = CommandNumToTableIndex ( req , & index )"	5276:2:161101:161146	3053358	0	True				
ANR	3057720	AssignmentExpression	"reqFound = CommandNumToTableIndex ( req , & index )"		3053358	0		=			
ANR	3057721	Identifier	reqFound		3053358	0					
ANR	3057722	CallExpression	"CommandNumToTableIndex ( req , & index )"		3053358	1					
ANR	3057723	Callee	CommandNumToTableIndex		3053358	0					
ANR	3057724	Identifier	CommandNumToTableIndex		3053358	0					
ANR	3057725	ArgumentList	req		3053358	1					
ANR	3057726	Argument	req		3053358	0					
ANR	3057727	Identifier	req		3053358	0					
ANR	3057728	Argument	& index		3053358	1					
ANR	3057729	UnaryOperationExpression	& index		3053358	0					
ANR	3057730	UnaryOperator	&		3053358	0					
ANR	3057731	Identifier	index		3053358	1					
ANR	3057732	IfStatement	if ( reqFound && is_tcp && ! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( ) )		3053358	1					
ANR	3057733	Condition	reqFound && is_tcp && ! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )	5284:6:161415:161544	3053358	0	True				
ANR	3057734	AndExpression	reqFound && is_tcp && ! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )		3053358	0		&&			
ANR	3057735	Identifier	reqFound		3053358	0					
ANR	3057736	AndExpression	is_tcp && ! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )		3053358	1		&&			
ANR	3057737	Identifier	is_tcp		3053358	0					
ANR	3057738	AndExpression	! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )		3053358	1		&&			
ANR	3057739	UnaryOperationExpression	! sock -> isAuthenticated ( )		3053358	0					
ANR	3057740	UnaryOperator	!		3053358	0					
ANR	3057741	CallExpression	sock -> isAuthenticated ( )		3053358	1					
ANR	3057742	Callee	sock -> isAuthenticated		3053358	0					
ANR	3057743	PtrMemberAccess	sock -> isAuthenticated		3053358	0					
ANR	3057744	Identifier	sock		3053358	0					
ANR	3057745	Identifier	isAuthenticated		3053358	1					
ANR	3057746	ArgumentList			3053358	1					
ANR	3057747	AndExpression	comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )		3053358	1		&&			
ANR	3057748	MemberAccess	comTable [ index ] . force_authentication		3053358	0					
ANR	3057749	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3057750	Identifier	comTable		3053358	0					
ANR	3057751	Identifier	index		3053358	1					
ANR	3057752	Identifier	force_authentication		3053358	1					
ANR	3057753	UnaryOperationExpression	! sock -> triedAuthentication ( )		3053358	1					
ANR	3057754	UnaryOperator	!		3053358	0					
ANR	3057755	CallExpression	sock -> triedAuthentication ( )		3053358	1					
ANR	3057756	Callee	sock -> triedAuthentication		3053358	0					
ANR	3057757	PtrMemberAccess	sock -> triedAuthentication		3053358	0					
ANR	3057758	Identifier	sock		3053358	0					
ANR	3057759	Identifier	triedAuthentication		3053358	1					
ANR	3057760	ArgumentList			3053358	1					
ANR	3057761	CompoundStatement		1050:2:34523:34523	3053358	1					
ANR	3057762	ExpressionStatement	"SecMan :: authenticate_sock ( sock , WRITE , & errstack )"	5290:3:161555:161604	3053358	0	True				
ANR	3057763	CallExpression	"SecMan :: authenticate_sock ( sock , WRITE , & errstack )"		3053358	0					
ANR	3057764	Callee	SecMan :: authenticate_sock		3053358	0					
ANR	3057765	Identifier	SecMan :: authenticate_sock		3053358	0					
ANR	3057766	ArgumentList	sock		3053358	1					
ANR	3057767	Argument	sock		3053358	0					
ANR	3057768	Identifier	sock		3053358	0					
ANR	3057769	Argument	WRITE		3053358	1					
ANR	3057770	Identifier	WRITE		3053358	0					
ANR	3057771	Argument	& errstack		3053358	2					
ANR	3057772	UnaryOperationExpression	& errstack		3053358	0					
ANR	3057773	UnaryOperator	&		3053358	0					
ANR	3057774	Identifier	errstack		3053358	1					
ANR	3057775	IfStatement	if ( reqFound && ! sock -> isAuthenticated ( ) )		3053358	2					
ANR	3057776	Condition	reqFound && ! sock -> isAuthenticated ( )	5295:6:161739:161774	3053358	0	True				
ANR	3057777	AndExpression	reqFound && ! sock -> isAuthenticated ( )		3053358	0		&&			
ANR	3057778	Identifier	reqFound		3053358	0					
ANR	3057779	UnaryOperationExpression	! sock -> isAuthenticated ( )		3053358	1					
ANR	3057780	UnaryOperator	!		3053358	0					
ANR	3057781	CallExpression	sock -> isAuthenticated ( )		3053358	1					
ANR	3057782	Callee	sock -> isAuthenticated		3053358	0					
ANR	3057783	PtrMemberAccess	sock -> isAuthenticated		3053358	0					
ANR	3057784	Identifier	sock		3053358	0					
ANR	3057785	Identifier	isAuthenticated		3053358	1					
ANR	3057786	ArgumentList			3053358	1					
ANR	3057787	CompoundStatement		1056:44:34750:34750	3053358	1					
ANR	3057788	ExpressionStatement	"dprintf ( D_SECURITY , ""DaemonCore received UNAUTHENTICATED command %i %s.\\n"" , req , comTable [ index ] . command_descrip )"	5298:3:161850:161964	3053358	0	True				
ANR	3057789	CallExpression	"dprintf ( D_SECURITY , ""DaemonCore received UNAUTHENTICATED command %i %s.\\n"" , req , comTable [ index ] . command_descrip )"		3053358	0					
ANR	3057790	Callee	dprintf		3053358	0					
ANR	3057791	Identifier	dprintf		3053358	0					
ANR	3057792	ArgumentList	D_SECURITY		3053358	1					
ANR	3057793	Argument	D_SECURITY		3053358	0					
ANR	3057794	Identifier	D_SECURITY		3053358	0					
ANR	3057795	Argument	"""DaemonCore received UNAUTHENTICATED command %i %s.\\n"""		3053358	1					
ANR	3057796	PrimaryExpression	"""DaemonCore received UNAUTHENTICATED command %i %s.\\n"""		3053358	0					
ANR	3057797	Argument	req		3053358	2					
ANR	3057798	Identifier	req		3053358	0					
ANR	3057799	Argument	comTable [ index ] . command_descrip		3053358	3					
ANR	3057800	MemberAccess	comTable [ index ] . command_descrip		3053358	0					
ANR	3057801	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3057802	Identifier	comTable		3053358	0					
ANR	3057803	Identifier	index		3053358	1					
ANR	3057804	Identifier	command_descrip		3053358	1					
ANR	3057805	IfStatement	if ( comTable [ index ] . perm != ALLOW )		3053358	1					
ANR	3057806	Condition	comTable [ index ] . perm != ALLOW	5302:7:162100:162128	3053358	0	True				
ANR	3057807	EqualityExpression	comTable [ index ] . perm != ALLOW		3053358	0		!=			
ANR	3057808	MemberAccess	comTable [ index ] . perm		3053358	0					
ANR	3057809	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3057810	Identifier	comTable		3053358	0					
ANR	3057811	Identifier	index		3053358	1					
ANR	3057812	Identifier	perm		3053358	1					
ANR	3057813	Identifier	ALLOW		3053358	1					
ANR	3057814	CompoundStatement		1065:4:35111:35129	3053358	1					
ANR	3057815	IdentifierDeclStatement	ClassAd our_policy ;	5304:4:162138:162156	3053358	0	True				
ANR	3057816	IdentifierDecl	our_policy		3053358	0					
ANR	3057817	IdentifierDeclType	ClassAd		3053358	0					
ANR	3057818	Identifier	our_policy		3053358	1					
ANR	3057819	IfStatement	"if ( ! sec_man -> FillInSecurityPolicyAd ( comTable [ index ] . perm , & our_policy , false , false , comTable [ index ] . force_authentication ) )"		3053358	1					
ANR	3057820	Condition	"! sec_man -> FillInSecurityPolicyAd ( comTable [ index ] . perm , & our_policy , false , false , comTable [ index ] . force_authentication )"	5305:8:162166:162312	3053358	0	True				
ANR	3057821	UnaryOperationExpression	"! sec_man -> FillInSecurityPolicyAd ( comTable [ index ] . perm , & our_policy , false , false , comTable [ index ] . force_authentication )"		3053358	0					
ANR	3057822	UnaryOperator	!		3053358	0					
ANR	3057823	CallExpression	"sec_man -> FillInSecurityPolicyAd ( comTable [ index ] . perm , & our_policy , false , false , comTable [ index ] . force_authentication )"		3053358	1					
ANR	3057824	Callee	sec_man -> FillInSecurityPolicyAd		3053358	0					
ANR	3057825	PtrMemberAccess	sec_man -> FillInSecurityPolicyAd		3053358	0					
ANR	3057826	Identifier	sec_man		3053358	0					
ANR	3057827	Identifier	FillInSecurityPolicyAd		3053358	1					
ANR	3057828	ArgumentList	comTable [ index ] . perm		3053358	1					
ANR	3057829	Argument	comTable [ index ] . perm		3053358	0					
ANR	3057830	MemberAccess	comTable [ index ] . perm		3053358	0					
ANR	3057831	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3057832	Identifier	comTable		3053358	0					
ANR	3057833	Identifier	index		3053358	1					
ANR	3057834	Identifier	perm		3053358	1					
ANR	3057835	Argument	& our_policy		3053358	1					
ANR	3057836	UnaryOperationExpression	& our_policy		3053358	0					
ANR	3057837	UnaryOperator	&		3053358	0					
ANR	3057838	Identifier	our_policy		3053358	1					
ANR	3057839	Argument	false		3053358	2					
ANR	3057840	Identifier	false		3053358	0					
ANR	3057841	Argument	false		3053358	3					
ANR	3057842	Identifier	false		3053358	0					
ANR	3057843	Argument	comTable [ index ] . force_authentication		3053358	4					
ANR	3057844	MemberAccess	comTable [ index ] . force_authentication		3053358	0					
ANR	3057845	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3057846	Identifier	comTable		3053358	0					
ANR	3057847	Identifier	index		3053358	1					
ANR	3057848	Identifier	force_authentication		3053358	1					
ANR	3057849	CompoundStatement		1072:4:35293:35293	3053358	1					
ANR	3057850	Statement	dprintf	5312:5:162327:162333	3053358	0	True				
ANR	3057851	Statement	(	5312:12:162334:162334	3053358	1	True				
ANR	3057852	Statement	D_ALWAYS	5312:14:162336:162343	3053358	2	True				
ANR	3057853	Statement	","	5312:22:162344:162344	3053358	3	True				
ANR	3057854	Statement	"""DC_AUTHENTICATE: """	5312:24:162346:162364	3053358	4	True				
ANR	3057855	Statement	"""Our security policy is invalid!\\n"""	5313:8:162374:162408	3053358	5	True				
ANR	3057856	Statement	)	5313:44:162410:162410	3053358	6	True				
ANR	3057857	ExpressionStatement		5313:45:162411:162411	3053358	7	True				
ANR	3057858	ExpressionStatement	result = FALSE	5314:5:162418:162432	3053358	8	True				
ANR	3057859	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3057860	Identifier	result		3053358	0					
ANR	3057861	Identifier	FALSE		3053358	1					
ANR	3057862	GotoStatement	goto finalize ;	5315:5:162439:162452	3053358	9	True				
ANR	3057863	Identifier	finalize		3053358	0					
ANR	3057864	IfStatement	"if ( ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED ) )"		3053358	2					
ANR	3057865	Condition	"( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED )"	5322:10:162612:163024	3053358	0	True				
ANR	3057866	OrExpression	"( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED )"		3053358	0		||			
ANR	3057867	EqualityExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION ) == SecMan :: SEC_REQ_REQUIRED"		3053358	0		==			
ANR	3057868	CallExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION )"		3053358	0					
ANR	3057869	Callee	sec_man -> sec_lookup_req		3053358	0					
ANR	3057870	PtrMemberAccess	sec_man -> sec_lookup_req		3053358	0					
ANR	3057871	Identifier	sec_man		3053358	0					
ANR	3057872	Identifier	sec_lookup_req		3053358	1					
ANR	3057873	ArgumentList	our_policy		3053358	1					
ANR	3057874	Argument	our_policy		3053358	0					
ANR	3057875	Identifier	our_policy		3053358	0					
ANR	3057876	Argument	ATTR_SEC_NEGOTIATION		3053358	1					
ANR	3057877	Identifier	ATTR_SEC_NEGOTIATION		3053358	0					
ANR	3057878	Identifier	SecMan :: SEC_REQ_REQUIRED		3053358	1					
ANR	3057879	OrExpression	"( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED )"		3053358	1		||			
ANR	3057880	EqualityExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED"		3053358	0		==			
ANR	3057881	CallExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION )"		3053358	0					
ANR	3057882	Callee	sec_man -> sec_lookup_req		3053358	0					
ANR	3057883	PtrMemberAccess	sec_man -> sec_lookup_req		3053358	0					
ANR	3057884	Identifier	sec_man		3053358	0					
ANR	3057885	Identifier	sec_lookup_req		3053358	1					
ANR	3057886	ArgumentList	our_policy		3053358	1					
ANR	3057887	Argument	our_policy		3053358	0					
ANR	3057888	Identifier	our_policy		3053358	0					
ANR	3057889	Argument	ATTR_SEC_AUTHENTICATION		3053358	1					
ANR	3057890	Identifier	ATTR_SEC_AUTHENTICATION		3053358	0					
ANR	3057891	Identifier	SecMan :: SEC_REQ_REQUIRED		3053358	1					
ANR	3057892	OrExpression	"( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED )"		3053358	1		||			
ANR	3057893	EqualityExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED"		3053358	0		==			
ANR	3057894	CallExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION )"		3053358	0					
ANR	3057895	Callee	sec_man -> sec_lookup_req		3053358	0					
ANR	3057896	PtrMemberAccess	sec_man -> sec_lookup_req		3053358	0					
ANR	3057897	Identifier	sec_man		3053358	0					
ANR	3057898	Identifier	sec_lookup_req		3053358	1					
ANR	3057899	ArgumentList	our_policy		3053358	1					
ANR	3057900	Argument	our_policy		3053358	0					
ANR	3057901	Identifier	our_policy		3053358	0					
ANR	3057902	Argument	ATTR_SEC_ENCRYPTION		3053358	1					
ANR	3057903	Identifier	ATTR_SEC_ENCRYPTION		3053358	0					
ANR	3057904	Identifier	SecMan :: SEC_REQ_REQUIRED		3053358	1					
ANR	3057905	EqualityExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED"		3053358	1		==			
ANR	3057906	CallExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY )"		3053358	0					
ANR	3057907	Callee	sec_man -> sec_lookup_req		3053358	0					
ANR	3057908	PtrMemberAccess	sec_man -> sec_lookup_req		3053358	0					
ANR	3057909	Identifier	sec_man		3053358	0					
ANR	3057910	Identifier	sec_lookup_req		3053358	1					
ANR	3057911	ArgumentList	our_policy		3053358	1					
ANR	3057912	Argument	our_policy		3053358	0					
ANR	3057913	Identifier	our_policy		3053358	0					
ANR	3057914	Argument	ATTR_SEC_INTEGRITY		3053358	1					
ANR	3057915	Identifier	ATTR_SEC_INTEGRITY		3053358	0					
ANR	3057916	Identifier	SecMan :: SEC_REQ_REQUIRED		3053358	1					
ANR	3057917	CompoundStatement		1090:39:36001:36001	3053358	1					
ANR	3057918	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: PERMISSION DENIED for %d (%s) via %s%s%s from host %s (access level %s)\\n"" , req , comTable [ index ] . command_descrip , ( is_tcp ) ? ""TCP"" : ""UDP"" , ! user . IsEmpty ( ) ? "" from "" : """" , user . Value ( ) , sock -> peer_description ( ) , PermString ( comTable [ index ] . perm ) )"	5333:5:163068:163393	3053358	0	True				
ANR	3057919	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: PERMISSION DENIED for %d (%s) via %s%s%s from host %s (access level %s)\\n"" , req , comTable [ index ] . command_descrip , ( is_tcp ) ? ""TCP"" : ""UDP"" , ! user . IsEmpty ( ) ? "" from "" : """" , user . Value ( ) , sock -> peer_description ( ) , PermString ( comTable [ index ] . perm ) )"		3053358	0					
ANR	3057920	Callee	dprintf		3053358	0					
ANR	3057921	Identifier	dprintf		3053358	0					
ANR	3057922	ArgumentList	D_ALWAYS		3053358	1					
ANR	3057923	Argument	D_ALWAYS		3053358	0					
ANR	3057924	Identifier	D_ALWAYS		3053358	0					
ANR	3057925	Argument	"""DaemonCore: PERMISSION DENIED for %d (%s) via %s%s%s from host %s (access level %s)\\n"""		3053358	1					
ANR	3057926	PrimaryExpression	"""DaemonCore: PERMISSION DENIED for %d (%s) via %s%s%s from host %s (access level %s)\\n"""		3053358	0					
ANR	3057927	Argument	req		3053358	2					
ANR	3057928	Identifier	req		3053358	0					
ANR	3057929	Argument	comTable [ index ] . command_descrip		3053358	3					
ANR	3057930	MemberAccess	comTable [ index ] . command_descrip		3053358	0					
ANR	3057931	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3057932	Identifier	comTable		3053358	0					
ANR	3057933	Identifier	index		3053358	1					
ANR	3057934	Identifier	command_descrip		3053358	1					
ANR	3057935	Argument	"( is_tcp ) ? ""TCP"" : ""UDP"""		3053358	4					
ANR	3057936	ConditionalExpression	"( is_tcp ) ? ""TCP"" : ""UDP"""		3053358	0					
ANR	3057937	Condition	is_tcp		3053358	0					
ANR	3057938	Identifier	is_tcp		3053358	0					
ANR	3057939	PrimaryExpression	"""TCP"""		3053358	1					
ANR	3057940	PrimaryExpression	"""UDP"""		3053358	2					
ANR	3057941	Argument	"! user . IsEmpty ( ) ? "" from "" : """""		3053358	5					
ANR	3057942	ConditionalExpression	"! user . IsEmpty ( ) ? "" from "" : """""		3053358	0					
ANR	3057943	Condition	! user . IsEmpty ( )		3053358	0					
ANR	3057944	UnaryOperationExpression	! user . IsEmpty ( )		3053358	0					
ANR	3057945	UnaryOperator	!		3053358	0					
ANR	3057946	CallExpression	user . IsEmpty ( )		3053358	1					
ANR	3057947	Callee	user . IsEmpty		3053358	0					
ANR	3057948	MemberAccess	user . IsEmpty		3053358	0					
ANR	3057949	Identifier	user		3053358	0					
ANR	3057950	Identifier	IsEmpty		3053358	1					
ANR	3057951	ArgumentList			3053358	1					
ANR	3057952	PrimaryExpression	""" from """		3053358	1					
ANR	3057953	PrimaryExpression	""""""		3053358	2					
ANR	3057954	Argument	user . Value ( )		3053358	6					
ANR	3057955	CallExpression	user . Value ( )		3053358	0					
ANR	3057956	Callee	user . Value		3053358	0					
ANR	3057957	MemberAccess	user . Value		3053358	0					
ANR	3057958	Identifier	user		3053358	0					
ANR	3057959	Identifier	Value		3053358	1					
ANR	3057960	ArgumentList			3053358	1					
ANR	3057961	Argument	sock -> peer_description ( )		3053358	7					
ANR	3057962	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3057963	Callee	sock -> peer_description		3053358	0					
ANR	3057964	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3057965	Identifier	sock		3053358	0					
ANR	3057966	Identifier	peer_description		3053358	1					
ANR	3057967	ArgumentList			3053358	1					
ANR	3057968	Argument	PermString ( comTable [ index ] . perm )		3053358	8					
ANR	3057969	CallExpression	PermString ( comTable [ index ] . perm )		3053358	0					
ANR	3057970	Callee	PermString		3053358	0					
ANR	3057971	Identifier	PermString		3053358	0					
ANR	3057972	ArgumentList	comTable [ index ] . perm		3053358	1					
ANR	3057973	Argument	comTable [ index ] . perm		3053358	0					
ANR	3057974	MemberAccess	comTable [ index ] . perm		3053358	0					
ANR	3057975	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3057976	Identifier	comTable		3053358	0					
ANR	3057977	Identifier	index		3053358	1					
ANR	3057978	Identifier	perm		3053358	1					
ANR	3057979	ExpressionStatement	result = FALSE	5343:5:163401:163415	3053358	1	True				
ANR	3057980	AssignmentExpression	result = FALSE		3053358	0		=			
ANR	3057981	Identifier	result		3053358	0					
ANR	3057982	Identifier	FALSE		3053358	1					
ANR	3057983	GotoStatement	goto finalize ;	5344:5:163422:163435	3053358	2	True				
ANR	3057984	Identifier	finalize		3053358	0					
ANR	3057985	IfStatement	if ( reqFound == TRUE )		3053358	31					
ANR	3057986	Condition	reqFound == TRUE	5351:6:163463:163478	3053358	0	True				
ANR	3057987	EqualityExpression	reqFound == TRUE		3053358	0		==			
ANR	3057988	Identifier	reqFound		3053358	0					
ANR	3057989	Identifier	TRUE		3053358	1					
ANR	3057990	CompoundStatement		1131:2:36921:36942	3053358	1					
ANR	3057991	IfStatement	if ( user . Length ( ) && ! sock -> isAuthenticated ( ) )		3053358	0					
ANR	3057992	Condition	user . Length ( ) && ! sock -> isAuthenticated ( )	5358:6:163697:163737	3053358	0	True				
ANR	3057993	AndExpression	user . Length ( ) && ! sock -> isAuthenticated ( )		3053358	0		&&			
ANR	3057994	CallExpression	user . Length ( )		3053358	0					
ANR	3057995	Callee	user . Length		3053358	0					
ANR	3057996	MemberAccess	user . Length		3053358	0					
ANR	3057997	Identifier	user		3053358	0					
ANR	3057998	Identifier	Length		3053358	1					
ANR	3057999	ArgumentList			3053358	1					
ANR	3058000	UnaryOperationExpression	! sock -> isAuthenticated ( )		3053358	1					
ANR	3058001	UnaryOperator	!		3053358	0					
ANR	3058002	CallExpression	sock -> isAuthenticated ( )		3053358	1					
ANR	3058003	Callee	sock -> isAuthenticated		3053358	0					
ANR	3058004	PtrMemberAccess	sock -> isAuthenticated		3053358	0					
ANR	3058005	Identifier	sock		3053358	0					
ANR	3058006	Identifier	isAuthenticated		3053358	1					
ANR	3058007	ArgumentList			3053358	1					
ANR	3058008	CompoundStatement		1119:50:36714:36714	3053358	1					
ANR	3058009	ExpressionStatement	sock -> setFullyQualifiedUser ( user . Value ( ) )	5359:3:163746:163787	3053358	0	True				
ANR	3058010	CallExpression	sock -> setFullyQualifiedUser ( user . Value ( ) )		3053358	0					
ANR	3058011	Callee	sock -> setFullyQualifiedUser		3053358	0					
ANR	3058012	PtrMemberAccess	sock -> setFullyQualifiedUser		3053358	0					
ANR	3058013	Identifier	sock		3053358	0					
ANR	3058014	Identifier	setFullyQualifiedUser		3053358	1					
ANR	3058015	ArgumentList	user . Value ( )		3053358	1					
ANR	3058016	Argument	user . Value ( )		3053358	0					
ANR	3058017	CallExpression	user . Value ( )		3053358	0					
ANR	3058018	Callee	user . Value		3053358	0					
ANR	3058019	MemberAccess	user . Value		3053358	0					
ANR	3058020	Identifier	user		3053358	0					
ANR	3058021	Identifier	Value		3053358	1					
ANR	3058022	ArgumentList			3053358	1					
ANR	3058023	IfStatement	if ( is_tcp )		3053358	1					
ANR	3058024	Condition	is_tcp	5363:12:163841:163846	3053358	0	True				
ANR	3058025	Identifier	is_tcp		3053358	0					
ANR	3058026	CompoundStatement		1125:12:36836:36881	3053358	1					
ANR	3058027	IdentifierDeclStatement	const char * u = sock -> getFullyQualifiedUser ( ) ;	5364:12:163863:163908	3053358	0	True				
ANR	3058028	IdentifierDecl	* u = sock -> getFullyQualifiedUser ( )		3053358	0					
ANR	3058029	IdentifierDeclType	const char *		3053358	0					
ANR	3058030	Identifier	u		3053358	1					
ANR	3058031	AssignmentExpression	* u = sock -> getFullyQualifiedUser ( )		3053358	2		=			
ANR	3058032	Identifier	u		3053358	0					
ANR	3058033	CallExpression	sock -> getFullyQualifiedUser ( )		3053358	1					
ANR	3058034	Callee	sock -> getFullyQualifiedUser		3053358	0					
ANR	3058035	PtrMemberAccess	sock -> getFullyQualifiedUser		3053358	0					
ANR	3058036	Identifier	sock		3053358	0					
ANR	3058037	Identifier	getFullyQualifiedUser		3053358	1					
ANR	3058038	ArgumentList			3053358	1					
ANR	3058039	IfStatement	if ( u )		3053358	1					
ANR	3058040	Condition	u	5365:7:163917:163917	3053358	0	True				
ANR	3058041	Identifier	u		3053358	0					
ANR	3058042	CompoundStatement		1126:10:36893:36893	3053358	1					
ANR	3058043	ExpressionStatement	user = u	5366:4:163926:163934	3053358	0	True				
ANR	3058044	AssignmentExpression	user = u		3053358	0		=			
ANR	3058045	Identifier	user		3053358	0					
ANR	3058046	Identifier	u		3053358	1					
ANR	3058047	IdentifierDeclStatement	MyString command_desc ;	5370:2:163948:163969	3053358	2	True				
ANR	3058048	IdentifierDecl	command_desc		3053358	0					
ANR	3058049	IdentifierDeclType	MyString		3053358	0					
ANR	3058050	Identifier	command_desc		3053358	1					
ANR	3058051	ExpressionStatement	"command_desc . sprintf ( ""command %d (%s)"" , req , comTable [ index ] . command_descrip )"	5371:2:163973:164048	3053358	3	True				
ANR	3058052	CallExpression	"command_desc . sprintf ( ""command %d (%s)"" , req , comTable [ index ] . command_descrip )"		3053358	0					
ANR	3058053	Callee	command_desc . sprintf		3053358	0					
ANR	3058054	MemberAccess	command_desc . sprintf		3053358	0					
ANR	3058055	Identifier	command_desc		3053358	0					
ANR	3058056	Identifier	sprintf		3053358	1					
ANR	3058057	ArgumentList	"""command %d (%s)"""		3053358	1					
ANR	3058058	Argument	"""command %d (%s)"""		3053358	0					
ANR	3058059	PrimaryExpression	"""command %d (%s)"""		3053358	0					
ANR	3058060	Argument	req		3053358	1					
ANR	3058061	Identifier	req		3053358	0					
ANR	3058062	Argument	comTable [ index ] . command_descrip		3053358	2					
ANR	3058063	MemberAccess	comTable [ index ] . command_descrip		3053358	0					
ANR	3058064	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3058065	Identifier	comTable		3053358	0					
ANR	3058066	Identifier	index		3053358	1					
ANR	3058067	Identifier	command_descrip		3053358	1					
ANR	3058068	IfStatement	if ( comTable [ index ] . force_authentication && ! sock -> isMappedFQU ( ) )		3053358	4					
ANR	3058069	Condition	comTable [ index ] . force_authentication && ! sock -> isMappedFQU ( )	5373:6:164057:164119	3053358	0	True				
ANR	3058070	AndExpression	comTable [ index ] . force_authentication && ! sock -> isMappedFQU ( )		3053358	0		&&			
ANR	3058071	MemberAccess	comTable [ index ] . force_authentication		3053358	0					
ANR	3058072	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3058073	Identifier	comTable		3053358	0					
ANR	3058074	Identifier	index		3053358	1					
ANR	3058075	Identifier	force_authentication		3053358	1					
ANR	3058076	UnaryOperationExpression	! sock -> isMappedFQU ( )		3053358	1					
ANR	3058077	UnaryOperator	!		3053358	0					
ANR	3058078	CallExpression	sock -> isMappedFQU ( )		3053358	1					
ANR	3058079	Callee	sock -> isMappedFQU		3053358	0					
ANR	3058080	PtrMemberAccess	sock -> isMappedFQU		3053358	0					
ANR	3058081	Identifier	sock		3053358	0					
ANR	3058082	Identifier	isMappedFQU		3053358	1					
ANR	3058083	ArgumentList			3053358	1					
ANR	3058084	CompoundStatement		1136:2:37098:37098	3053358	1					
ANR	3058085	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"" , sock -> peer_description ( ) , req , comTable [ index ] . command_descrip )"	5376:3:164130:164371	3053358	0	True				
ANR	3058086	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"" , sock -> peer_description ( ) , req , comTable [ index ] . command_descrip )"		3053358	0					
ANR	3058087	Callee	dprintf		3053358	0					
ANR	3058088	Identifier	dprintf		3053358	0					
ANR	3058089	ArgumentList	D_ALWAYS		3053358	1					
ANR	3058090	Argument	D_ALWAYS		3053358	0					
ANR	3058091	Identifier	D_ALWAYS		3053358	0					
ANR	3058092	Argument	"""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"""		3053358	1					
ANR	3058093	PrimaryExpression	"""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"""		3053358	0					
ANR	3058094	Argument	sock -> peer_description ( )		3053358	2					
ANR	3058095	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3058096	Callee	sock -> peer_description		3053358	0					
ANR	3058097	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3058098	Identifier	sock		3053358	0					
ANR	3058099	Identifier	peer_description		3053358	1					
ANR	3058100	ArgumentList			3053358	1					
ANR	3058101	Argument	req		3053358	3					
ANR	3058102	Identifier	req		3053358	0					
ANR	3058103	Argument	comTable [ index ] . command_descrip		3053358	4					
ANR	3058104	MemberAccess	comTable [ index ] . command_descrip		3053358	0					
ANR	3058105	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3058106	Identifier	comTable		3053358	0					
ANR	3058107	Identifier	index		3053358	1					
ANR	3058108	Identifier	command_descrip		3053358	1					
ANR	3058109	ExpressionStatement	perm = USER_AUTH_FAILURE	5381:3:164377:164401	3053358	1	True				
ANR	3058110	AssignmentExpression	perm = USER_AUTH_FAILURE		3053358	0		=			
ANR	3058111	Identifier	perm		3053358	0					
ANR	3058112	Identifier	USER_AUTH_FAILURE		3053358	1					
ANR	3058113	ElseStatement	else		3053358	0					
ANR	3058114	CompoundStatement		1144:7:37387:37387	3053358	0					
ANR	3058115	ExpressionStatement	"perm = Verify ( command_desc . Value ( ) , comTable [ index ] . perm , sock -> peer_addr ( ) , user . Value ( ) )"	5384:3:164419:164543	3053358	0	True				
ANR	3058116	AssignmentExpression	"perm = Verify ( command_desc . Value ( ) , comTable [ index ] . perm , sock -> peer_addr ( ) , user . Value ( ) )"		3053358	0		=			
ANR	3058117	Identifier	perm		3053358	0					
ANR	3058118	CallExpression	"Verify ( command_desc . Value ( ) , comTable [ index ] . perm , sock -> peer_addr ( ) , user . Value ( ) )"		3053358	1					
ANR	3058119	Callee	Verify		3053358	0					
ANR	3058120	Identifier	Verify		3053358	0					
ANR	3058121	ArgumentList	command_desc . Value ( )		3053358	1					
ANR	3058122	Argument	command_desc . Value ( )		3053358	0					
ANR	3058123	CallExpression	command_desc . Value ( )		3053358	0					
ANR	3058124	Callee	command_desc . Value		3053358	0					
ANR	3058125	MemberAccess	command_desc . Value		3053358	0					
ANR	3058126	Identifier	command_desc		3053358	0					
ANR	3058127	Identifier	Value		3053358	1					
ANR	3058128	ArgumentList			3053358	1					
ANR	3058129	Argument	comTable [ index ] . perm		3053358	1					
ANR	3058130	MemberAccess	comTable [ index ] . perm		3053358	0					
ANR	3058131	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3058132	Identifier	comTable		3053358	0					
ANR	3058133	Identifier	index		3053358	1					
ANR	3058134	Identifier	perm		3053358	1					
ANR	3058135	Argument	sock -> peer_addr ( )		3053358	2					
ANR	3058136	CallExpression	sock -> peer_addr ( )		3053358	0					
ANR	3058137	Callee	sock -> peer_addr		3053358	0					
ANR	3058138	PtrMemberAccess	sock -> peer_addr		3053358	0					
ANR	3058139	Identifier	sock		3053358	0					
ANR	3058140	Identifier	peer_addr		3053358	1					
ANR	3058141	ArgumentList			3053358	1					
ANR	3058142	Argument	user . Value ( )		3053358	3					
ANR	3058143	CallExpression	user . Value ( )		3053358	0					
ANR	3058144	Callee	user . Value		3053358	0					
ANR	3058145	MemberAccess	user . Value		3053358	0					
ANR	3058146	Identifier	user		3053358	0					
ANR	3058147	Identifier	Value		3053358	1					
ANR	3058148	ArgumentList			3053358	1					
ANR	3058149	IfStatement	if ( perm != USER_AUTH_SUCCESS )		3053358	5					
ANR	3058150	Condition	perm != USER_AUTH_SUCCESS	5391:6:164556:164580	3053358	0	True				
ANR	3058151	EqualityExpression	perm != USER_AUTH_SUCCESS		3053358	0		!=			
ANR	3058152	Identifier	perm		3053358	0					
ANR	3058153	Identifier	USER_AUTH_SUCCESS		3053358	1					
ANR	3058154	CompoundStatement		1153:2:37559:37559	3053358	1					
ANR	3058155	ExpressionStatement	reqFound = FALSE	5394:3:164621:164637	3053358	0	True				
ANR	3058156	AssignmentExpression	reqFound = FALSE		3053358	0		=			
ANR	3058157	Identifier	reqFound		3053358	0					
ANR	3058158	Identifier	FALSE		3053358	1					
ANR	3058159	ExpressionStatement	result = 0	5396:3:164761:164771	3053358	1	True				
ANR	3058160	AssignmentExpression	result = 0		3053358	0		=			
ANR	3058161	Identifier	result		3053358	0					
ANR	3058162	PrimaryExpression	0		3053358	1					
ANR	3058163	IfStatement	if ( ! is_tcp )		3053358	2					
ANR	3058164	Condition	! is_tcp	5399:8:164854:164860	3053358	0	True				
ANR	3058165	UnaryOperationExpression	! is_tcp		3053358	0					
ANR	3058166	UnaryOperator	!		3053358	0					
ANR	3058167	Identifier	is_tcp		3053358	1					
ANR	3058168	ExpressionStatement	sock -> end_of_message ( )	5400:4:164867:164889	3053358	1	True				
ANR	3058169	CallExpression	sock -> end_of_message ( )		3053358	0					
ANR	3058170	Callee	sock -> end_of_message		3053358	0					
ANR	3058171	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3058172	Identifier	sock		3053358	0					
ANR	3058173	Identifier	end_of_message		3053358	1					
ANR	3058174	ArgumentList			3053358	1					
ANR	3058175	ElseStatement	else		3053358	0					
ANR	3058176	CompoundStatement		1163:9:37874:37874	3053358	0					
ANR	3058177	ExpressionStatement	"dprintf ( comTable [ index ] . dprintf_flag | D_COMMAND , ""Received %s command %d (%s) from %s %s, access level %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , req , comTable [ index ] . command_descrip , user . Value ( ) , sock -> peer_description ( ) , PermString ( comTable [ index ] . perm ) )"	5403:3:164906:165189	3053358	0	True				
ANR	3058178	CallExpression	"dprintf ( comTable [ index ] . dprintf_flag | D_COMMAND , ""Received %s command %d (%s) from %s %s, access level %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , req , comTable [ index ] . command_descrip , user . Value ( ) , sock -> peer_description ( ) , PermString ( comTable [ index ] . perm ) )"		3053358	0					
ANR	3058179	Callee	dprintf		3053358	0					
ANR	3058180	Identifier	dprintf		3053358	0					
ANR	3058181	ArgumentList	comTable [ index ] . dprintf_flag | D_COMMAND		3053358	1					
ANR	3058182	Argument	comTable [ index ] . dprintf_flag | D_COMMAND		3053358	0					
ANR	3058183	InclusiveOrExpression	comTable [ index ] . dprintf_flag | D_COMMAND		3053358	0		|			
ANR	3058184	MemberAccess	comTable [ index ] . dprintf_flag		3053358	0					
ANR	3058185	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3058186	Identifier	comTable		3053358	0					
ANR	3058187	Identifier	index		3053358	1					
ANR	3058188	Identifier	dprintf_flag		3053358	1					
ANR	3058189	Identifier	D_COMMAND		3053358	1					
ANR	3058190	Argument	"""Received %s command %d (%s) from %s %s, access level %s\\n"""		3053358	1					
ANR	3058191	PrimaryExpression	"""Received %s command %d (%s) from %s %s, access level %s\\n"""		3053358	0					
ANR	3058192	Argument	"( is_tcp ) ? ""TCP"" : ""UDP"""		3053358	2					
ANR	3058193	ConditionalExpression	"( is_tcp ) ? ""TCP"" : ""UDP"""		3053358	0					
ANR	3058194	Condition	is_tcp		3053358	0					
ANR	3058195	Identifier	is_tcp		3053358	0					
ANR	3058196	PrimaryExpression	"""TCP"""		3053358	1					
ANR	3058197	PrimaryExpression	"""UDP"""		3053358	2					
ANR	3058198	Argument	req		3053358	3					
ANR	3058199	Identifier	req		3053358	0					
ANR	3058200	Argument	comTable [ index ] . command_descrip		3053358	4					
ANR	3058201	MemberAccess	comTable [ index ] . command_descrip		3053358	0					
ANR	3058202	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3058203	Identifier	comTable		3053358	0					
ANR	3058204	Identifier	index		3053358	1					
ANR	3058205	Identifier	command_descrip		3053358	1					
ANR	3058206	Argument	user . Value ( )		3053358	5					
ANR	3058207	CallExpression	user . Value ( )		3053358	0					
ANR	3058208	Callee	user . Value		3053358	0					
ANR	3058209	MemberAccess	user . Value		3053358	0					
ANR	3058210	Identifier	user		3053358	0					
ANR	3058211	Identifier	Value		3053358	1					
ANR	3058212	ArgumentList			3053358	1					
ANR	3058213	Argument	sock -> peer_description ( )		3053358	6					
ANR	3058214	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3058215	Callee	sock -> peer_description		3053358	0					
ANR	3058216	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3058217	Identifier	sock		3053358	0					
ANR	3058218	Identifier	peer_description		3053358	1					
ANR	3058219	ArgumentList			3053358	1					
ANR	3058220	Argument	PermString ( comTable [ index ] . perm )		3053358	7					
ANR	3058221	CallExpression	PermString ( comTable [ index ] . perm )		3053358	0					
ANR	3058222	Callee	PermString		3053358	0					
ANR	3058223	Identifier	PermString		3053358	0					
ANR	3058224	ArgumentList	comTable [ index ] . perm		3053358	1					
ANR	3058225	Argument	comTable [ index ] . perm		3053358	0					
ANR	3058226	MemberAccess	comTable [ index ] . perm		3053358	0					
ANR	3058227	ArrayIndexing	comTable [ index ]		3053358	0					
ANR	3058228	Identifier	comTable		3053358	0					
ANR	3058229	Identifier	index		3053358	1					
ANR	3058230	Identifier	perm		3053358	1					
ANR	3058231	ElseStatement	else		3053358	0					
ANR	3058232	CompoundStatement		1174:8:38177:38177	3053358	0					
ANR	3058233	ExpressionStatement	"dprintf ( D_ALWAYS , ""Received %s command %d (%s) from %s %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , req , ""UNREGISTERED COMMAND!"" , user . Value ( ) , sock -> peer_description ( ) )"	5414:3:165209:165396	3053358	0	True				
ANR	3058234	CallExpression	"dprintf ( D_ALWAYS , ""Received %s command %d (%s) from %s %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , req , ""UNREGISTERED COMMAND!"" , user . Value ( ) , sock -> peer_description ( ) )"		3053358	0					
ANR	3058235	Callee	dprintf		3053358	0					
ANR	3058236	Identifier	dprintf		3053358	0					
ANR	3058237	ArgumentList	D_ALWAYS		3053358	1					
ANR	3058238	Argument	D_ALWAYS		3053358	0					
ANR	3058239	Identifier	D_ALWAYS		3053358	0					
ANR	3058240	Argument	"""Received %s command %d (%s) from %s %s\\n"""		3053358	1					
ANR	3058241	PrimaryExpression	"""Received %s command %d (%s) from %s %s\\n"""		3053358	0					
ANR	3058242	Argument	"( is_tcp ) ? ""TCP"" : ""UDP"""		3053358	2					
ANR	3058243	ConditionalExpression	"( is_tcp ) ? ""TCP"" : ""UDP"""		3053358	0					
ANR	3058244	Condition	is_tcp		3053358	0					
ANR	3058245	Identifier	is_tcp		3053358	0					
ANR	3058246	PrimaryExpression	"""TCP"""		3053358	1					
ANR	3058247	PrimaryExpression	"""UDP"""		3053358	2					
ANR	3058248	Argument	req		3053358	3					
ANR	3058249	Identifier	req		3053358	0					
ANR	3058250	Argument	"""UNREGISTERED COMMAND!"""		3053358	4					
ANR	3058251	PrimaryExpression	"""UNREGISTERED COMMAND!"""		3053358	0					
ANR	3058252	Argument	user . Value ( )		3053358	5					
ANR	3058253	CallExpression	user . Value ( )		3053358	0					
ANR	3058254	Callee	user . Value		3053358	0					
ANR	3058255	MemberAccess	user . Value		3053358	0					
ANR	3058256	Identifier	user		3053358	0					
ANR	3058257	Identifier	Value		3053358	1					
ANR	3058258	ArgumentList			3053358	1					
ANR	3058259	Argument	sock -> peer_description ( )		3053358	6					
ANR	3058260	CallExpression	sock -> peer_description ( )		3053358	0					
ANR	3058261	Callee	sock -> peer_description		3053358	0					
ANR	3058262	PtrMemberAccess	sock -> peer_description		3053358	0					
ANR	3058263	Identifier	sock		3053358	0					
ANR	3058264	Identifier	peer_description		3053358	1					
ANR	3058265	ArgumentList			3053358	1					
ANR	3058266	ExpressionStatement	result = 0	5422:2:165470:165480	3053358	1	True				
ANR	3058267	AssignmentExpression	result = 0		3053358	0		=			
ANR	3058268	Identifier	result		3053358	0					
ANR	3058269	PrimaryExpression	0		3053358	1					
ANR	3058270	IfStatement	if ( ! is_tcp )		3053358	2					
ANR	3058271	Condition	! is_tcp	5424:7:165560:165566	3053358	0	True				
ANR	3058272	UnaryOperationExpression	! is_tcp		3053358	0					
ANR	3058273	UnaryOperator	!		3053358	0					
ANR	3058274	Identifier	is_tcp		3053358	1					
ANR	3058275	ExpressionStatement	sock -> end_of_message ( )	5425:3:165572:165594	3053358	1	True				
ANR	3058276	CallExpression	sock -> end_of_message ( )		3053358	0					
ANR	3058277	Callee	sock -> end_of_message		3053358	0					
ANR	3058278	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3058279	Identifier	sock		3053358	0					
ANR	3058280	Identifier	end_of_message		3053358	1					
ANR	3058281	ArgumentList			3053358	1					
ANR	3058282	IfStatement	if ( reqFound == TRUE )		3053358	32					
ANR	3058283	Condition	reqFound == TRUE	5436:6:165845:165860	3053358	0	True				
ANR	3058284	EqualityExpression	reqFound == TRUE		3053358	0		==			
ANR	3058285	Identifier	reqFound		3053358	0					
ANR	3058286	Identifier	TRUE		3053358	1					
ANR	3058287	CompoundStatement		1203:2:39003:39073	3053358	1					
ANR	3058288	ExpressionStatement	ScopedEnableParallel ( false )	5438:2:165936:165963	3053358	0	True				
ANR	3058289	CallExpression	ScopedEnableParallel ( false )		3053358	0					
ANR	3058290	Callee	ScopedEnableParallel		3053358	0					
ANR	3058291	Identifier	ScopedEnableParallel		3053358	0					
ANR	3058292	ArgumentList	false		3053358	1					
ANR	3058293	Argument	false		3053358	0					
ANR	3058294	Identifier	false		3053358	0					
ANR	3058295	IdentifierDeclStatement	UtcTime handler_start_time ;	5440:2:165968:165994	3053358	1	True				
ANR	3058296	IdentifierDecl	handler_start_time		3053358	0					
ANR	3058297	IdentifierDeclType	UtcTime		3053358	0					
ANR	3058298	Identifier	handler_start_time		3053358	1					
ANR	3058299	ExpressionStatement	handler_start_time . getTime ( )	5441:2:165998:166026	3053358	2	True				
ANR	3058300	CallExpression	handler_start_time . getTime ( )		3053358	0					
ANR	3058301	Callee	handler_start_time . getTime		3053358	0					
ANR	3058302	MemberAccess	handler_start_time . getTime		3053358	0					
ANR	3058303	Identifier	handler_start_time		3053358	0					
ANR	3058304	Identifier	getTime		3053358	1					
ANR	3058305	ArgumentList			3053358	1					
ANR	3058306	IdentifierDeclStatement	float sec_time = handler_start_time . difference ( & handle_req_start_time ) ;	5442:2:166030:166100	3053358	3	True				
ANR	3058307	IdentifierDecl	sec_time = handler_start_time . difference ( & handle_req_start_time )		3053358	0					
ANR	3058308	IdentifierDeclType	float		3053358	0					
ANR	3058309	Identifier	sec_time		3053358	1					
ANR	3058310	AssignmentExpression	sec_time = handler_start_time . difference ( & handle_req_start_time )		3053358	2		=			
ANR	3058311	Identifier	sec_time		3053358	0					
ANR	3058312	CallExpression	handler_start_time . difference ( & handle_req_start_time )		3053358	1					
ANR	3058313	Callee	handler_start_time . difference		3053358	0					
ANR	3058314	MemberAccess	handler_start_time . difference		3053358	0					
ANR	3058315	Identifier	handler_start_time		3053358	0					
ANR	3058316	Identifier	difference		3053358	1					
ANR	3058317	ArgumentList	& handle_req_start_time		3053358	1					
ANR	3058318	Argument	& handle_req_start_time		3053358	0					
ANR	3058319	UnaryOperationExpression	& handle_req_start_time		3053358	0					
ANR	3058320	UnaryOperator	&		3053358	0					
ANR	3058321	Identifier	handle_req_start_time		3053358	1					
ANR	3058322	ExpressionStatement	"result = CallCommandHandler ( req , sock , false , true , sec_time , 0 )"	5444:2:166105:166212	3053358	4	True				
ANR	3058323	AssignmentExpression	"result = CallCommandHandler ( req , sock , false , true , sec_time , 0 )"		3053358	0		=			
ANR	3058324	Identifier	result		3053358	0					
ANR	3058325	CallExpression	"CallCommandHandler ( req , sock , false , true , sec_time , 0 )"		3053358	1					
ANR	3058326	Callee	CallCommandHandler		3053358	0					
ANR	3058327	Identifier	CallCommandHandler		3053358	0					
ANR	3058328	ArgumentList	req		3053358	1					
ANR	3058329	Argument	req		3053358	0					
ANR	3058330	Identifier	req		3053358	0					
ANR	3058331	Argument	sock		3053358	1					
ANR	3058332	Identifier	sock		3053358	0					
ANR	3058333	Argument	false		3053358	2					
ANR	3058334	Identifier	false		3053358	0					
ANR	3058335	Argument	true		3053358	3					
ANR	3058336	Identifier	true		3053358	0					
ANR	3058337	Argument	sec_time		3053358	4					
ANR	3058338	Identifier	sec_time		3053358	0					
ANR	3058339	Argument	0		3053358	5					
ANR	3058340	PrimaryExpression	0		3053358	0					
ANR	3058341	Label	finalize :	5447:0:166218:166226	3053358	33	True				
ANR	3058342	Identifier	finalize		3053358	0					
ANR	3058343	IfStatement	if ( the_policy )		3053358	34					
ANR	3058344	Condition	the_policy	5456:8:166702:166711	3053358	0	True				
ANR	3058345	Identifier	the_policy		3053358	0					
ANR	3058346	CompoundStatement		1217:20:39687:39687	3053358	1					
ANR	3058347	Statement	delete	5457:8:166724:166729	3053358	0	True				
ANR	3058348	ExpressionStatement	the_policy	5457:15:166731:166741	3053358	1	True				
ANR	3058349	Identifier	the_policy		3053358	0					
ANR	3058350	IfStatement	if ( the_key )		3053358	35					
ANR	3058351	Condition	the_key	5459:8:166757:166763	3053358	0	True				
ANR	3058352	Identifier	the_key		3053358	0					
ANR	3058353	CompoundStatement		1220:17:39739:39739	3053358	1					
ANR	3058354	Statement	delete	5460:8:166776:166781	3053358	0	True				
ANR	3058355	ExpressionStatement	the_key	5460:15:166783:166790	3053358	1	True				
ANR	3058356	Identifier	the_key		3053358	0					
ANR	3058357	IfStatement	if ( the_sid )		3053358	36					
ANR	3058358	Condition	the_sid	5462:8:166806:166812	3053358	0	True				
ANR	3058359	Identifier	the_sid		3053358	0					
ANR	3058360	CompoundStatement		1223:17:39788:39788	3053358	1					
ANR	3058361	ExpressionStatement	free ( the_sid )	5463:8:166825:166838	3053358	0	True				
ANR	3058362	CallExpression	free ( the_sid )		3053358	0					
ANR	3058363	Callee	free		3053358	0					
ANR	3058364	Identifier	free		3053358	0					
ANR	3058365	ArgumentList	the_sid		3053358	1					
ANR	3058366	Argument	the_sid		3053358	0					
ANR	3058367	Identifier	the_sid		3053358	0					
ANR	3058368	IfStatement	if ( who )		3053358	37					
ANR	3058369	Condition	who	5465:8:166854:166856	3053358	0	True				
ANR	3058370	Identifier	who		3053358	0					
ANR	3058371	CompoundStatement		1226:13:39832:39832	3053358	1					
ANR	3058372	ExpressionStatement	free ( who )	5466:8:166869:166878	3053358	0	True				
ANR	3058373	CallExpression	free ( who )		3053358	0					
ANR	3058374	Callee	free		3053358	0					
ANR	3058375	Identifier	free		3053358	0					
ANR	3058376	ArgumentList	who		3053358	1					
ANR	3058377	Argument	who		3053358	0					
ANR	3058378	Identifier	who		3053358	0					
ANR	3058379	IfStatement	if ( result != KEEP_STREAM )		3053358	38					
ANR	3058380	Condition	result != KEEP_STREAM	5468:6:166892:166912	3053358	0	True				
ANR	3058381	EqualityExpression	result != KEEP_STREAM		3053358	0		!=			
ANR	3058382	Identifier	result		3053358	0					
ANR	3058383	Identifier	KEEP_STREAM		3053358	1					
ANR	3058384	CompoundStatement		1229:30:39889:39889	3053358	1					
ANR	3058385	IfStatement	if ( is_tcp )		3053358	0					
ANR	3058386	Condition	is_tcp	5469:7:166925:166930	3053358	0	True				
ANR	3058387	Identifier	is_tcp		3053358	0					
ANR	3058388	CompoundStatement		1230:16:39907:39907	3053358	1					
ANR	3058389	ExpressionStatement	sock -> encode ( )	5470:3:166939:166953	3053358	0	True				
ANR	3058390	CallExpression	sock -> encode ( )		3053358	0					
ANR	3058391	Callee	sock -> encode		3053358	0					
ANR	3058392	PtrMemberAccess	sock -> encode		3053358	0					
ANR	3058393	Identifier	sock		3053358	0					
ANR	3058394	Identifier	encode		3053358	1					
ANR	3058395	ArgumentList			3053358	1					
ANR	3058396	ExpressionStatement	sock -> end_of_message ( )	5471:3:167008:167030	3053358	1	True				
ANR	3058397	CallExpression	sock -> end_of_message ( )		3053358	0					
ANR	3058398	Callee	sock -> end_of_message		3053358	0					
ANR	3058399	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3058400	Identifier	sock		3053358	0					
ANR	3058401	Identifier	end_of_message		3053358	1					
ANR	3058402	ArgumentList			3053358	1					
ANR	3058403	IfStatement	if ( insock != sock )		3053358	2					
ANR	3058404	Condition	insock != sock	5472:8:167082:167095	3053358	0	True				
ANR	3058405	EqualityExpression	insock != sock		3053358	0		!=			
ANR	3058406	Identifier	insock		3053358	0					
ANR	3058407	Identifier	sock		3053358	1					
ANR	3058408	Statement	delete	5473:4:167157:167162	3053358	1	True				
ANR	3058409	ExpressionStatement	sock	5473:11:167164:167168	3053358	3	True				
ANR	3058410	Identifier	sock		3053358	0					
ANR	3058411	ElseStatement	else		3053358	0					
ANR	3058412	CompoundStatement		1235:9:40216:40216	3053358	0					
ANR	3058413	ExpressionStatement	sock -> decode ( )	5475:3:167248:167262	3053358	0	True				
ANR	3058414	CallExpression	sock -> decode ( )		3053358	0					
ANR	3058415	Callee	sock -> decode		3053358	0					
ANR	3058416	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3058417	Identifier	sock		3053358	0					
ANR	3058418	Identifier	decode		3053358	1					
ANR	3058419	ArgumentList			3053358	1					
ANR	3058420	ExpressionStatement	sock -> end_of_message ( )	5476:3:167267:167289	3053358	1	True				
ANR	3058421	CallExpression	sock -> end_of_message ( )		3053358	0					
ANR	3058422	Callee	sock -> end_of_message		3053358	0					
ANR	3058423	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3058424	Identifier	sock		3053358	0					
ANR	3058425	Identifier	end_of_message		3053358	1					
ANR	3058426	ArgumentList			3053358	1					
ANR	3058427	ExpressionStatement	sock -> set_MD_mode ( MD_OFF )	5479:3:167334:167359	3053358	2	True				
ANR	3058428	CallExpression	sock -> set_MD_mode ( MD_OFF )		3053358	0					
ANR	3058429	Callee	sock -> set_MD_mode		3053358	0					
ANR	3058430	PtrMemberAccess	sock -> set_MD_mode		3053358	0					
ANR	3058431	Identifier	sock		3053358	0					
ANR	3058432	Identifier	set_MD_mode		3053358	1					
ANR	3058433	ArgumentList	MD_OFF		3053358	1					
ANR	3058434	Argument	MD_OFF		3053358	0					
ANR	3058435	Identifier	MD_OFF		3053358	0					
ANR	3058436	ExpressionStatement	"sock -> set_crypto_key ( false , NULL )"	5480:3:167364:167397	3053358	3	True				
ANR	3058437	CallExpression	"sock -> set_crypto_key ( false , NULL )"		3053358	0					
ANR	3058438	Callee	sock -> set_crypto_key		3053358	0					
ANR	3058439	PtrMemberAccess	sock -> set_crypto_key		3053358	0					
ANR	3058440	Identifier	sock		3053358	0					
ANR	3058441	Identifier	set_crypto_key		3053358	1					
ANR	3058442	ArgumentList	false		3053358	1					
ANR	3058443	Argument	false		3053358	0					
ANR	3058444	Identifier	false		3053358	0					
ANR	3058445	Argument	NULL		3053358	1					
ANR	3058446	Identifier	NULL		3053358	0					
ANR	3058447	ExpressionStatement	sock -> setFullyQualifiedUser ( NULL )	5483:3:167439:167472	3053358	4	True				
ANR	3058448	CallExpression	sock -> setFullyQualifiedUser ( NULL )		3053358	0					
ANR	3058449	Callee	sock -> setFullyQualifiedUser		3053358	0					
ANR	3058450	PtrMemberAccess	sock -> setFullyQualifiedUser		3053358	0					
ANR	3058451	Identifier	sock		3053358	0					
ANR	3058452	Identifier	setFullyQualifiedUser		3053358	1					
ANR	3058453	ArgumentList	NULL		3053358	1					
ANR	3058454	Argument	NULL		3053358	0					
ANR	3058455	Identifier	NULL		3053358	0					
ANR	3058456	ExpressionStatement	result = KEEP_STREAM	5485:3:167478:167498	3053358	5	True				
ANR	3058457	AssignmentExpression	result = KEEP_STREAM		3053358	0		=			
ANR	3058458	Identifier	result		3053358	0					
ANR	3058459	Identifier	KEEP_STREAM		3053358	1					
ANR	3058460	ElseStatement	else		3053358	0					
ANR	3058461	CompoundStatement		1249:8:40607:40607	3053358	0					
ANR	3058462	IfStatement	if ( ! is_tcp )		3053358	0					
ANR	3058463	Condition	! is_tcp	5489:6:167642:167648	3053358	0	True				
ANR	3058464	UnaryOperationExpression	! is_tcp		3053358	0					
ANR	3058465	UnaryOperator	!		3053358	0					
ANR	3058466	Identifier	is_tcp		3053358	1					
ANR	3058467	CompoundStatement		1250:15:40624:40624	3053358	1					
ANR	3058468	ExpressionStatement	sock -> decode ( )	5490:3:167656:167670	3053358	0	True				
ANR	3058469	CallExpression	sock -> decode ( )		3053358	0					
ANR	3058470	Callee	sock -> decode		3053358	0					
ANR	3058471	PtrMemberAccess	sock -> decode		3053358	0					
ANR	3058472	Identifier	sock		3053358	0					
ANR	3058473	Identifier	decode		3053358	1					
ANR	3058474	ArgumentList			3053358	1					
ANR	3058475	ExpressionStatement	sock -> end_of_message ( )	5491:3:167675:167697	3053358	1	True				
ANR	3058476	CallExpression	sock -> end_of_message ( )		3053358	0					
ANR	3058477	Callee	sock -> end_of_message		3053358	0					
ANR	3058478	PtrMemberAccess	sock -> end_of_message		3053358	0					
ANR	3058479	Identifier	sock		3053358	0					
ANR	3058480	Identifier	end_of_message		3053358	1					
ANR	3058481	ArgumentList			3053358	1					
ANR	3058482	ExpressionStatement	sock -> set_MD_mode ( MD_OFF )	5492:3:167702:167727	3053358	2	True				
ANR	3058483	CallExpression	sock -> set_MD_mode ( MD_OFF )		3053358	0					
ANR	3058484	Callee	sock -> set_MD_mode		3053358	0					
ANR	3058485	PtrMemberAccess	sock -> set_MD_mode		3053358	0					
ANR	3058486	Identifier	sock		3053358	0					
ANR	3058487	Identifier	set_MD_mode		3053358	1					
ANR	3058488	ArgumentList	MD_OFF		3053358	1					
ANR	3058489	Argument	MD_OFF		3053358	0					
ANR	3058490	Identifier	MD_OFF		3053358	0					
ANR	3058491	ExpressionStatement	"sock -> set_crypto_key ( false , NULL )"	5493:3:167732:167765	3053358	3	True				
ANR	3058492	CallExpression	"sock -> set_crypto_key ( false , NULL )"		3053358	0					
ANR	3058493	Callee	sock -> set_crypto_key		3053358	0					
ANR	3058494	PtrMemberAccess	sock -> set_crypto_key		3053358	0					
ANR	3058495	Identifier	sock		3053358	0					
ANR	3058496	Identifier	set_crypto_key		3053358	1					
ANR	3058497	ArgumentList	false		3053358	1					
ANR	3058498	Argument	false		3053358	0					
ANR	3058499	Identifier	false		3053358	0					
ANR	3058500	Argument	NULL		3053358	1					
ANR	3058501	Identifier	NULL		3053358	0					
ANR	3058502	ExpressionStatement	sock -> setFullyQualifiedUser ( NULL )	5494:3:167770:167803	3053358	4	True				
ANR	3058503	CallExpression	sock -> setFullyQualifiedUser ( NULL )		3053358	0					
ANR	3058504	Callee	sock -> setFullyQualifiedUser		3053358	0					
ANR	3058505	PtrMemberAccess	sock -> setFullyQualifiedUser		3053358	0					
ANR	3058506	Identifier	sock		3053358	0					
ANR	3058507	Identifier	setFullyQualifiedUser		3053358	1					
ANR	3058508	ArgumentList	NULL		3053358	1					
ANR	3058509	Argument	NULL		3053358	0					
ANR	3058510	Identifier	NULL		3053358	0					
ANR	3058511	IfStatement	if ( result == KEEP_STREAM || insock != sock )		3053358	39					
ANR	3058512	Condition	result == KEEP_STREAM || insock != sock	5501:6:168028:168066	3053358	0	True				
ANR	3058513	OrExpression	result == KEEP_STREAM || insock != sock		3053358	0		||			
ANR	3058514	EqualityExpression	result == KEEP_STREAM		3053358	0		==			
ANR	3058515	Identifier	result		3053358	0					
ANR	3058516	Identifier	KEEP_STREAM		3053358	1					
ANR	3058517	EqualityExpression	insock != sock		3053358	1		!=			
ANR	3058518	Identifier	insock		3053358	0					
ANR	3058519	Identifier	sock		3053358	1					
ANR	3058520	ReturnStatement	return KEEP_STREAM ;	5502:2:168072:168090	3053358	1	True				
ANR	3058521	Identifier	KEEP_STREAM		3053358	0					
ANR	3058522	ElseStatement	else		3053358	0					
ANR	3058523	ReturnStatement	return TRUE ;	5504:2:168100:168111	3053358	0	True				
ANR	3058524	Identifier	TRUE		3053358	0					
ANR	3058525	ReturnType	int		3053358	1					
ANR	3058526	Identifier	DaemonCore :: HandleReq		3053358	2					
ANR	3058527	ParameterList	"Stream * insock , Stream * asock"		3053358	3					
ANR	3058528	Parameter	Stream * insock	4239:26:126995:127008	3053358	0	True				
ANR	3058529	ParameterType	Stream *		3053358	0					
ANR	3058530	Identifier	insock		3053358	1					
ANR	3058531	Parameter	Stream * asock	4239:42:127011:127023	3053358	1	True				
ANR	3058532	ParameterType	Stream *		3053358	0					
ANR	3058533	Identifier	asock		3053358	1					
ANR	3058534	CFGEntryNode	ENTRY		3053358		True				
ANR	3058535	CFGExitNode	EXIT		3053358		True				
ANR	3058536	Symbol	dur		3053358						
ANR	3058537	Symbol	ATTR_SEC_ENCRYPTION		3053358						
ANR	3058538	Symbol	* getSecMan		3053358						
ANR	3058539	Symbol	KEEP_STREAM		3053358						
ANR	3058540	Symbol	sock -> peer_addr		3053358						
ANR	3058541	Symbol	peer_version		3053358						
ANR	3058542	Symbol	the_policy -> LookupString		3053358						
ANR	3058543	Symbol	command_desc . Value		3053358						
ANR	3058544	Symbol	the_key		3053358						
ANR	3058545	Symbol	( ( SafeSock * ) sock ) -> isIncomingDataMD5ed		3053358						
ANR	3058546	Symbol	sess_id		3053358						
ANR	3058547	Symbol	& errstack		3053358						
ANR	3058548	Symbol	Verify		3053358						
ANR	3058549	Symbol	CommandNumToTableIndex		3053358						
ANR	3058550	Symbol	D_COMMAND		3053358						
ANR	3058551	Symbol	* session -> key ( )		3053358						
ANR	3058552	Symbol	* session -> key		3053358						
ANR	3058553	Symbol	SOAP_PERM		3053358						
ANR	3058554	Symbol	verinfo		3053358						
ANR	3058555	Symbol	asock		3053358						
ANR	3058556	Symbol	ATTR_SEC_SESSION_LEASE		3053358						
ANR	3058557	Symbol	ATTR_SEC_NEGOTIATION		3053358						
ANR	3058558	Symbol	insock -> type		3053358						
ANR	3058559	Symbol	* insock		3053358						
ANR	3058560	Symbol	param_integer		3053358						
ANR	3058561	Symbol	* session -> policy		3053358						
ANR	3058562	Symbol	valid_cookie		3053358						
ANR	3058563	Symbol	& remote_version		3053358						
ANR	3058564	Symbol	DC_AUTHENTICATE		3053358						
ANR	3058565	Symbol	* crypto_method		3053358						
ANR	3058566	Symbol	ATTR_SEC_COMMAND		3053358						
ANR	3058567	Symbol	ATTR_SEC_AUTHENTICATION		3053358						
ANR	3058568	Symbol	ATTR_SEC_TRIED_AUTHENTICATION		3053358						
ANR	3058569	Symbol	* * session		3053358						
ANR	3058570	Symbol	INVALID_SOCKET		3053358						
ANR	3058571	Symbol	result		3053358						
ANR	3058572	Symbol	ZZZ_always_increase		3053358						
ANR	3058573	Symbol	* sock		3053358						
ANR	3058574	Symbol	* session -> policy ( )		3053358						
ANR	3058575	Symbol	auth_info . initFromStream		3053358						
ANR	3058576	Symbol	mypid		3053358						
ANR	3058577	Symbol	ATTR_SEC_AUTH_COMMAND		3053358						
ANR	3058578	Symbol	SecMan :: sec_feat_act_rev		3053358						
ANR	3058579	Symbol	will_enable_encryption		3053358						
ANR	3058580	Symbol	& cmd_index		3053358						
ANR	3058581	Symbol	cleartext_info		3053358						
ANR	3058582	Symbol	u		3053358						
ANR	3058583	Symbol	comTable		3053358						
ANR	3058584	Symbol	reqFound		3053358						
ANR	3058585	Symbol	errstack . getFullText		3053358						
ANR	3058586	Symbol	session -> policy		3053358						
ANR	3058587	Symbol	the_policy -> put		3053358						
ANR	3058588	Symbol	& crypto_method		3053358						
ANR	3058589	Symbol	info_list . next		3053358						
ANR	3058590	Symbol	& our_policy		3053358						
ANR	3058591	Symbol	fully_qualified_user		3053358						
ANR	3058592	Symbol	* sec_man -> session_cache		3053358						
ANR	3058593	Symbol	ATTR_SEC_SERVER_PID		3053358						
ANR	3058594	Symbol	& ver_info		3053358						
ANR	3058595	Symbol	rkey		3053358						
ANR	3058596	Symbol	will_enable_integrity		3053358						
ANR	3058597	Symbol	method_used		3053358						
ANR	3058598	Symbol	& index		3053358						
ANR	3058599	Symbol	ReliSock :: relisock_listen		3053358						
ANR	3058600	Symbol	MSG_PEEK		3053358						
ANR	3058601	Symbol	ALLOW		3053358						
ANR	3058602	Symbol	req		3053358						
ANR	3058603	Symbol	ATTR_SEC_AUTHENTICATION_METHODS		3053358						
ANR	3058604	Symbol	comTable [ cmd_index ] . perm		3053358						
ANR	3058605	Symbol	ATTR_SEC_VALID_COMMANDS		3053358						
ANR	3058606	Symbol	sock -> _sock		3053358						
ANR	3058607	Symbol	sec_time		3053358						
ANR	3058608	Symbol	ATTR_SEC_SID		3053358						
ANR	3058609	Symbol	tmpStr . Value		3053358						
ANR	3058610	Symbol	param_boolean		3053358						
ANR	3058611	Symbol	D_FULLDEBUG		3053358						
ANR	3058612	Symbol	ATTR_SEC_NEW_SESSION		3053358						
ANR	3058613	Symbol	comTable [ index ] . force_authentication		3053358						
ANR	3058614	Symbol	sock -> isMappedFQU		3053358						
ANR	3058615	Symbol	SecMan :: SEC_FEAT_ACT_NO		3053358						
ANR	3058616	Symbol	incoming_cookie		3053358						
ANR	3058617	Symbol	( ( ReliSock * ) insock ) -> _state		3053358						
ANR	3058618	Symbol	* sec_man		3053358						
ANR	3058619	Symbol	strstr		3053358						
ANR	3058620	Symbol	ATTR_SEC_AUTHENTICATION_METHODS_LIST		3053358						
ANR	3058621	Symbol	tmp_cmd		3053358						
ANR	3058622	Symbol	( ( ReliSock * ) insock ) -> accept		3053358						
ANR	3058623	Symbol	return_addr		3053358						
ANR	3058624	Symbol	using_cookie		3053358						
ANR	3058625	Symbol	perm		3053358						
ANR	3058626	Symbol	D_SECURITY		3053358						
ANR	3058627	Symbol	sock -> end_of_message		3053358						
ANR	3058628	Symbol	crypto_method		3053358						
ANR	3058629	Symbol	session		3053358						
ANR	3058630	Symbol	tried_authentication		3053358						
ANR	3058631	Symbol	cmd_index		3053358						
ANR	3058632	Symbol	is_http_get		3053358						
ANR	3058633	Symbol	pa_ad . put		3053358						
ANR	3058634	Symbol	sock -> get_file_desc		3053358						
ANR	3058635	Symbol	now		3053358						
ANR	3058636	Symbol	sec_man -> FillInSecurityPolicyAd		3053358						
ANR	3058637	Symbol	ATTR_SEC_CRYPTO_METHODS		3053358						
ANR	3058638	Symbol	is_tcp		3053358						
ANR	3058639	Symbol	user . Value		3053358						
ANR	3058640	Symbol	& who		3053358						
ANR	3058641	Symbol	ATTR_SEC_SESSION_DURATION		3053358						
ANR	3058642	Symbol	cursoap		3053358						
ANR	3058643	Symbol	false		3053358						
ANR	3058644	Symbol	D_ALWAYS		3053358						
ANR	3058645	Symbol	GetCommandsInAuthLevel		3053358						
ANR	3058646	Symbol	info_list		3053358						
ANR	3058647	Symbol	ATTR_SEC_USER		3053358						
ANR	3058648	Symbol	sock -> authenticate		3053358						
ANR	3058649	Symbol	auth_info . LookupString		3053358						
ANR	3058650	Symbol	cookie_is_valid		3053358						
ANR	3058651	Symbol	rbuf		3053358						
ANR	3058652	Symbol	FALSE		3053358						
ANR	3058653	Symbol	session_lease		3053358						
ANR	3058654	Symbol	strdup		3053358						
ANR	3058655	Symbol	time		3053358						
ANR	3058656	Symbol	ATTR_SEC_INTEGRITY		3053358						
ANR	3058657	Symbol	comTable [ cmd_index ] . wait_for_payload		3053358						
ANR	3058658	Symbol	& incoming_cookie		3053358						
ANR	3058659	Symbol	will_authenticate		3053358						
ANR	3058660	Symbol	durint		3053358						
ANR	3058661	Symbol	( ( ReliSock * ) sock ) -> bytes_available_to_read		3053358						
ANR	3058662	Symbol	* cmd_index		3053358						
ANR	3058663	Symbol	& method_used		3053358						
ANR	3058664	Symbol	* index		3053358						
ANR	3058665	Symbol	the_policy		3053358						
ANR	3058666	Symbol	sec_man		3053358						
ANR	3058667	Symbol	( ( ReliSock * ) insock ) -> _special_state		3053358						
ANR	3058668	Symbol	* session		3053358						
ANR	3058669	Symbol	& handle_req_start_time		3053358						
ANR	3058670	Symbol	found_sess		3053358						
ANR	3058671	Symbol	CondorVersion		3053358						
ANR	3058672	Symbol	auth_required		3053358						
ANR	3058673	Symbol	tmp		3053358						
ANR	3058674	Symbol	insock		3053358						
ANR	3058675	Symbol	new_session		3053358						
ANR	3058676	Symbol	CONDOR_BLOWFISH		3053358						
ANR	3058677	Symbol	& dur		3053358						
ANR	3058678	Symbol	CONDOR_3DES		3053358						
ANR	3058679	Symbol	sock -> peer_description		3053358						
ANR	3058680	Symbol	ATTR_SEC_USE_SESSION		3053358						
ANR	3058681	Symbol	ip		3053358						
ANR	3058682	Symbol	index		3053358						
ANR	3058683	Symbol	sock -> set_crypto_key		3053358						
ANR	3058684	Symbol	getSecMan		3053358						
ANR	3058685	Symbol	( ( SafeSock * ) sock ) -> isIncomingDataEncrypted		3053358						
ANR	3058686	Symbol	user . Length		3053358						
ANR	3058687	Symbol	sec_man -> session_cache		3053358						
ANR	3058688	Symbol	errstack		3053358						
ANR	3058689	Symbol	ATTR_SEC_REMOTE_VERSION		3053358						
ANR	3058690	Symbol	PermString		3053358						
ANR	3058691	Symbol	SecMan :: SEC_REQ_REQUIRED		3053358						
ANR	3058692	Symbol	auth_success		3053358						
ANR	3058693	Symbol	& the_user		3053358						
ANR	3058694	Symbol	ATTR_SEC_SUBSYSTEM		3053358						
ANR	3058695	Symbol	verinfo . built_since_version		3053358						
ANR	3058696	Symbol	Condor_Crypt_Base :: randomKey		3053358						
ANR	3058697	Symbol	get_local_hostname ( ) . Value		3053358						
ANR	3058698	Symbol	session -> key		3053358						
ANR	3058699	Symbol	WRITE		3053358						
ANR	3058700	Symbol	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value"		3053358						
ANR	3058701	Symbol	* comTable		3053358						
ANR	3058702	Symbol	sec_man -> ReconcileSecurityPolicyAds		3053358						
ANR	3058703	Symbol	comTable [ index ] . dprintf_flag		3053358						
ANR	3058704	Symbol	ATTR_SEC_AUTH_REQUIRED		3053358						
ANR	3058705	Symbol	ver_info		3053358						
ANR	3058706	Symbol	sock -> isAuthenticated		3053358						
ANR	3058707	Symbol	atoi		3053358						
ANR	3058708	Symbol	sec_man -> sec_lookup_feat_act		3053358						
ANR	3058709	Symbol	toupper		3053358						
ANR	3058710	Symbol	pa_ad		3053358						
ANR	3058711	Symbol	* SecMan :: sec_feat_act_rev		3053358						
ANR	3058712	Symbol	& auth_methods		3053358						
ANR	3058713	Symbol	sock -> triedAuthentication		3053358						
ANR	3058714	Symbol	auth_methods		3053358						
ANR	3058715	Symbol	* * sec_man		3053358						
ANR	3058716	Symbol	SecMan :: SEC_FEAT_ACT_YES		3053358						
ANR	3058717	Symbol	the_user		3053358						
ANR	3058718	Symbol	handle_req_start_time		3053358						
ANR	3058719	Symbol	the_sid		3053358						
ANR	3058720	Symbol	ATTR_SEC_ENACT		3053358						
ANR	3058721	Symbol	ATTR_SEC_PARENT_UNIQUE_ID		3053358						
ANR	3058722	Symbol	sock -> peer_ip_str		3053358						
ANR	3058723	Symbol	return_address_ss		3053358						
ANR	3058724	Symbol	handler_start_time . difference		3053358						
ANR	3058725	Symbol	comTable [ index ] . command_descrip		3053358						
ANR	3058726	Symbol	sock -> set_MD_mode		3053358						
ANR	3058727	Symbol	command_desc		3053358						
ANR	3058728	Symbol	tmp_key		3053358						
ANR	3058729	Symbol	session -> id		3053358						
ANR	3058730	Symbol	NULL		3053358						
ANR	3058731	Symbol	comTable [ cmd_index ] . force_authentication		3053358						
ANR	3058732	Symbol	dc_soap_accept		3053358						
ANR	3058733	Symbol	CallCommandHandler		3053358						
ANR	3058734	Symbol	RegisterSocketForHandleReq		3053358						
ANR	3058735	Symbol	TRUE		3053358						
ANR	3058736	Symbol	DebugFlags		3053358						
ANR	3058737	Symbol	sec_man -> sec_lookup_req		3053358						
ANR	3058738	Symbol	& return_addr		3053358						
ANR	3058739	Symbol	READ		3053358						
ANR	3058740	Symbol	is_http_post		3053358						
ANR	3058741	Symbol	USER_AUTH_SUCCESS		3053358						
ANR	3058742	Symbol	comTable [ index ] . perm		3053358						
ANR	3058743	Symbol	user . IsEmpty		3053358						
ANR	3058744	Symbol	MD_ALWAYS_ON		3053358						
ANR	3058745	Symbol	true		3053358						
ANR	3058746	Symbol	tmpStr		3053358						
ANR	3058747	Symbol	USER_AUTH_FAILURE		3053358						
ANR	3058748	Symbol	soap		3053358						
ANR	3058749	Symbol	who		3053358						
ANR	3058750	Symbol	Sock :: sock_special		3053358						
ANR	3058751	Symbol	turn_encryption_on		3053358						
ANR	3058752	Symbol	our_policy		3053358						
ANR	3058753	Symbol	sec_man -> session_cache -> lookup		3053358						
ANR	3058754	Symbol	getSecMan ( ) -> getSecTimeout		3053358						
ANR	3058755	Symbol	slop		3053358						
ANR	3058756	Symbol	sock -> getFullyQualifiedUser		3053358						
ANR	3058757	Symbol	remote_version		3053358						
ANR	3058758	Symbol	* sec_man -> sec_lookup_feat_act		3053358						
ANR	3058759	Symbol	& the_sid		3053358						
ANR	3058760	Symbol	real_cmd		3053358						
ANR	3058761	Symbol	tmpbuf		3053358						
ANR	3058762	Symbol	auth_timeout		3053358						
ANR	3058763	Symbol	handler_start_time		3053358						
ANR	3058764	Symbol	expiration_time		3053358						
ANR	3058765	Symbol	MD_OFF		3053358						
ANR	3058766	Symbol	get_local_hostname		3053358						
ANR	3058767	Symbol	auth_info		3053358						
ANR	3058768	Symbol	sock		3053358						
ANR	3058769	Symbol	ATTR_SEC_COOKIE		3053358						
ANR	3058770	Symbol	* the_policy		3053358						
ANR	3058771	Symbol	sock -> code		3053358						
ANR	3058772	Symbol	ATTR_SEC_SERVER_COMMAND_SOCK		3053358						
ANR	3058773	Symbol	comTable [ cmd_index ] . command_descrip		3053358						
ANR	3058774	Symbol	user		3053358						
ANR	3058775	Function	DaemonCore :: HandleSigCommand	5508:0:168117:168482							
ANR	3058776	FunctionDef	"DaemonCore :: HandleSigCommand (int command , Stream * stream)"		3058775	0					
ANR	3058777	CompoundStatement		5508:62:168179:168482	3058775	0					
ANR	3058778	IdentifierDeclStatement	int sig = 0 ;	5509:1:168182:168193	3058775	0	True				
ANR	3058779	IdentifierDecl	sig = 0		3058775	0					
ANR	3058780	IdentifierDeclType	int		3058775	0					
ANR	3058781	Identifier	sig		3058775	1					
ANR	3058782	AssignmentExpression	sig = 0		3058775	2		=			
ANR	3058783	Identifier	sig		3058775	0					
ANR	3058784	PrimaryExpression	0		3058775	1					
ANR	3058785	ExpressionStatement	assert ( command == DC_RAISESIGNAL )	5511:1:168197:168232	3058775	1	True				
ANR	3058786	CallExpression	assert ( command == DC_RAISESIGNAL )		3058775	0					
ANR	3058787	Callee	assert		3058775	0					
ANR	3058788	Identifier	assert		3058775	0					
ANR	3058789	ArgumentList	command == DC_RAISESIGNAL		3058775	1					
ANR	3058790	Argument	command == DC_RAISESIGNAL		3058775	0					
ANR	3058791	EqualityExpression	command == DC_RAISESIGNAL		3058775	0		==			
ANR	3058792	Identifier	command		3058775	0					
ANR	3058793	Identifier	DC_RAISESIGNAL		3058775	1					
ANR	3058794	IfStatement	if ( ! stream -> code ( sig ) )		3058775	2					
ANR	3058795	Condition	! stream -> code ( sig )	5516:5:168331:168348	3058775	0	True				
ANR	3058796	UnaryOperationExpression	! stream -> code ( sig )		3058775	0					
ANR	3058797	UnaryOperator	!		3058775	0					
ANR	3058798	CallExpression	stream -> code ( sig )		3058775	1					
ANR	3058799	Callee	stream -> code		3058775	0					
ANR	3058800	PtrMemberAccess	stream -> code		3058775	0					
ANR	3058801	Identifier	stream		3058775	0					
ANR	3058802	Identifier	code		3058775	1					
ANR	3058803	ArgumentList	sig		3058775	1					
ANR	3058804	Argument	sig		3058775	0					
ANR	3058805	Identifier	sig		3058775	0					
ANR	3058806	ReturnStatement	return FALSE ;	5517:2:168353:168365	3058775	1	True				
ANR	3058807	Identifier	FALSE		3058775	0					
ANR	3058808	ExpressionStatement	stream -> end_of_message ( )	5519:1:168369:168393	3058775	3	True				
ANR	3058809	CallExpression	stream -> end_of_message ( )		3058775	0					
ANR	3058810	Callee	stream -> end_of_message		3058775	0					
ANR	3058811	PtrMemberAccess	stream -> end_of_message		3058775	0					
ANR	3058812	Identifier	stream		3058775	0					
ANR	3058813	Identifier	end_of_message		3058775	1					
ANR	3058814	ArgumentList			3058775	1					
ANR	3058815	ReturnStatement	"return ( HandleSig ( _DC_RAISESIGNAL , sig ) ) ;"	5522:1:168440:168480	3058775	4	True				
ANR	3058816	CallExpression	"HandleSig ( _DC_RAISESIGNAL , sig )"		3058775	0					
ANR	3058817	Callee	HandleSig		3058775	0					
ANR	3058818	Identifier	HandleSig		3058775	0					
ANR	3058819	ArgumentList	_DC_RAISESIGNAL		3058775	1					
ANR	3058820	Argument	_DC_RAISESIGNAL		3058775	0					
ANR	3058821	Identifier	_DC_RAISESIGNAL		3058775	0					
ANR	3058822	Argument	sig		3058775	1					
ANR	3058823	Identifier	sig		3058775	0					
ANR	3058824	ReturnType	int		3058775	1					
ANR	3058825	Identifier	DaemonCore :: HandleSigCommand		3058775	2					
ANR	3058826	ParameterList	"int command , Stream * stream"		3058775	3					
ANR	3058827	Parameter	int command	5508:33:168150:168160	3058775	0	True				
ANR	3058828	ParameterType	int		3058775	0					
ANR	3058829	Identifier	command		3058775	1					
ANR	3058830	Parameter	Stream * stream	5508:46:168163:168176	3058775	1	True				
ANR	3058831	ParameterType	Stream *		3058775	0					
ANR	3058832	Identifier	stream		3058775	1					
ANR	3058833	CFGEntryNode	ENTRY		3058775		True				
ANR	3058834	CFGExitNode	EXIT		3058775		True				
ANR	3058835	Symbol	sig		3058775						
ANR	3058836	Symbol	stream		3058775						
ANR	3058837	Symbol	stream -> code		3058775						
ANR	3058838	Symbol	DC_RAISESIGNAL		3058775						
ANR	3058839	Symbol	* stream		3058775						
ANR	3058840	Symbol	FALSE		3058775						
ANR	3058841	Symbol	_DC_RAISESIGNAL		3058775						
ANR	3058842	Symbol	HandleSig		3058775						
ANR	3058843	Symbol	command		3058775						
ANR	3058844	Function	DaemonCore :: HandleSig	5525:0:168485:170146							
ANR	3058845	FunctionDef	"DaemonCore :: HandleSig (int command , int sig)"		3058844	0					
ANR	3058846	CompoundStatement		5526:0:168532:170146	3058844	0					
ANR	3058847	IdentifierDeclStatement	"int j , index ;"	5527:1:168535:168546	3058844	0	True				
ANR	3058848	IdentifierDecl	j		3058844	0					
ANR	3058849	IdentifierDeclType	int		3058844	0					
ANR	3058850	Identifier	j		3058844	1					
ANR	3058851	IdentifierDecl	index		3058844	1					
ANR	3058852	IdentifierDeclType	int		3058844	0					
ANR	3058853	Identifier	index		3058844	1					
ANR	3058854	IdentifierDeclStatement	int sigFound ;	5528:1:168549:168561	3058844	1	True				
ANR	3058855	IdentifierDecl	sigFound		3058844	0					
ANR	3058856	IdentifierDeclType	int		3058844	0					
ANR	3058857	Identifier	sigFound		3058844	1					
ANR	3058858	IfStatement	if ( sig < 0 )		3058844	2					
ANR	3058859	Condition	sig < 0	5532:6:168636:168642	3058844	0	True				
ANR	3058860	RelationalExpression	sig < 0		3058844	0		<			
ANR	3058861	Identifier	sig		3058844	0					
ANR	3058862	PrimaryExpression	0		3058844	1					
ANR	3058863	ExpressionStatement	index = - sig % maxSig	5533:2:168648:168669	3058844	1	True				
ANR	3058864	AssignmentExpression	index = - sig % maxSig		3058844	0		=			
ANR	3058865	Identifier	index		3058844	0					
ANR	3058866	MultiplicativeExpression	- sig % maxSig		3058844	1		%			
ANR	3058867	UnaryOperationExpression	- sig		3058844	0					
ANR	3058868	UnaryOperator	-		3058844	0					
ANR	3058869	Identifier	sig		3058844	1					
ANR	3058870	Identifier	maxSig		3058844	1					
ANR	3058871	ElseStatement	else		3058844	0					
ANR	3058872	ExpressionStatement	index = sig % maxSig	5535:2:168679:168699	3058844	0	True				
ANR	3058873	AssignmentExpression	index = sig % maxSig		3058844	0		=			
ANR	3058874	Identifier	index		3058844	0					
ANR	3058875	MultiplicativeExpression	sig % maxSig		3058844	1		%			
ANR	3058876	Identifier	sig		3058844	0					
ANR	3058877	Identifier	maxSig		3058844	1					
ANR	3058878	ExpressionStatement	sigFound = FALSE	5537:1:168703:168719	3058844	3	True				
ANR	3058879	AssignmentExpression	sigFound = FALSE		3058844	0		=			
ANR	3058880	Identifier	sigFound		3058844	0					
ANR	3058881	Identifier	FALSE		3058844	1					
ANR	3058882	IfStatement	if ( sigTable [ index ] . num == sig )		3058844	4					
ANR	3058883	Condition	sigTable [ index ] . num == sig	5538:5:168726:168751	3058844	0	True				
ANR	3058884	EqualityExpression	sigTable [ index ] . num == sig		3058844	0		==			
ANR	3058885	MemberAccess	sigTable [ index ] . num		3058844	0					
ANR	3058886	ArrayIndexing	sigTable [ index ]		3058844	0					
ANR	3058887	Identifier	sigTable		3058844	0					
ANR	3058888	Identifier	index		3058844	1					
ANR	3058889	Identifier	num		3058844	1					
ANR	3058890	Identifier	sig		3058844	1					
ANR	3058891	CompoundStatement		13:33:221:221	3058844	1					
ANR	3058892	ExpressionStatement	sigFound = TRUE	5540:2:168795:168810	3058844	0	True				
ANR	3058893	AssignmentExpression	sigFound = TRUE		3058844	0		=			
ANR	3058894	Identifier	sigFound		3058844	0					
ANR	3058895	Identifier	TRUE		3058844	1					
ANR	3058896	ElseStatement	else		3058844	0					
ANR	3058897	CompoundStatement		16:8:287:287	3058844	0					
ANR	3058898	ForStatement	for ( j = ( index + 1 ) % maxSig ; j != index ; j = ( j + 1 ) % maxSig )		3058844	0					
ANR	3058899	ForInit	j = ( index + 1 ) % maxSig ;	5543:7:168870:168894	3058844	0	True				
ANR	3058900	AssignmentExpression	j = ( index + 1 ) % maxSig		3058844	0		=			
ANR	3058901	Identifier	j		3058844	0					
ANR	3058902	MultiplicativeExpression	( index + 1 ) % maxSig		3058844	1		%			
ANR	3058903	AdditiveExpression	index + 1		3058844	0		+			
ANR	3058904	Identifier	index		3058844	0					
ANR	3058905	PrimaryExpression	1		3058844	1					
ANR	3058906	Identifier	maxSig		3058844	1					
ANR	3058907	Condition	j != index	5543:33:168896:168905	3058844	1	True				
ANR	3058908	EqualityExpression	j != index		3058844	0		!=			
ANR	3058909	Identifier	j		3058844	0					
ANR	3058910	Identifier	index		3058844	1					
ANR	3058911	AssignmentExpression	j = ( j + 1 ) % maxSig	5543:45:168908:168927	3058844	2	True	=			
ANR	3058912	Identifier	j		3058844	0					
ANR	3058913	MultiplicativeExpression	( j + 1 ) % maxSig		3058844	1		%			
ANR	3058914	AdditiveExpression	j + 1		3058844	0		+			
ANR	3058915	Identifier	j		3058844	0					
ANR	3058916	PrimaryExpression	1		3058844	1					
ANR	3058917	Identifier	maxSig		3058844	1					
ANR	3058918	IfStatement	if ( sigTable [ j ] . num == sig )		3058844	3					
ANR	3058919	Condition	sigTable [ j ] . num == sig	5544:6:168936:168957	3058844	0	True				
ANR	3058920	EqualityExpression	sigTable [ j ] . num == sig		3058844	0		==			
ANR	3058921	MemberAccess	sigTable [ j ] . num		3058844	0					
ANR	3058922	ArrayIndexing	sigTable [ j ]		3058844	0					
ANR	3058923	Identifier	sigTable		3058844	0					
ANR	3058924	Identifier	j		3058844	1					
ANR	3058925	Identifier	num		3058844	1					
ANR	3058926	Identifier	sig		3058844	1					
ANR	3058927	CompoundStatement		19:30:427:427	3058844	1					
ANR	3058928	ExpressionStatement	sigFound = TRUE	5545:4:168966:168981	3058844	0	True				
ANR	3058929	AssignmentExpression	sigFound = TRUE		3058844	0		=			
ANR	3058930	Identifier	sigFound		3058844	0					
ANR	3058931	Identifier	TRUE		3058844	1					
ANR	3058932	ExpressionStatement	index = j	5546:4:168987:168996	3058844	1	True				
ANR	3058933	AssignmentExpression	index = j		3058844	0		=			
ANR	3058934	Identifier	index		3058844	0					
ANR	3058935	Identifier	j		3058844	1					
ANR	3058936	BreakStatement	break ;	5547:4:169002:169007	3058844	2	True				
ANR	3058937	IfStatement	if ( sigFound == FALSE )		3058844	5					
ANR	3058938	Condition	sigFound == FALSE	5551:6:169024:169040	3058844	0	True				
ANR	3058939	EqualityExpression	sigFound == FALSE		3058844	0		==			
ANR	3058940	Identifier	sigFound		3058844	0					
ANR	3058941	Identifier	FALSE		3058844	1					
ANR	3058942	CompoundStatement		26:26:511:511	3058844	1					
ANR	3058943	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: received request for unregistered Signal %d !\\n"" , sig )"	5552:2:169048:169135	3058844	0	True				
ANR	3058944	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: received request for unregistered Signal %d !\\n"" , sig )"		3058844	0					
ANR	3058945	Callee	dprintf		3058844	0					
ANR	3058946	Identifier	dprintf		3058844	0					
ANR	3058947	ArgumentList	D_ALWAYS		3058844	1					
ANR	3058948	Argument	D_ALWAYS		3058844	0					
ANR	3058949	Identifier	D_ALWAYS		3058844	0					
ANR	3058950	Argument	"""DaemonCore: received request for unregistered Signal %d !\\n"""		3058844	1					
ANR	3058951	PrimaryExpression	"""DaemonCore: received request for unregistered Signal %d !\\n"""		3058844	0					
ANR	3058952	Argument	sig		3058844	2					
ANR	3058953	Identifier	sig		3058844	0					
ANR	3058954	ReturnStatement	return FALSE ;	5554:2:169139:169151	3058844	1	True				
ANR	3058955	Identifier	FALSE		3058844	0					
ANR	3058956	SwitchStatement	switch ( command )		3058844	6					
ANR	3058957	Condition	command	5557:9:169166:169172	3058844	0	True				
ANR	3058958	Identifier	command		3058844	0					
ANR	3058959	CompoundStatement		32:18:642:642	3058844	1					
ANR	3058960	Label	case _DC_RAISESIGNAL :	5558:2:169179:169199	3058844	0	True				
ANR	3058961	Identifier	_DC_RAISESIGNAL		3058844	0					
ANR	3058962	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore: received Signal %d (%s), raising event %s\\n"" , sig , sigTable [ index ] . sig_descrip , sigTable [ index ] . handler_descrip )"	5559:3:169204:169359	3058844	1	True				
ANR	3058963	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore: received Signal %d (%s), raising event %s\\n"" , sig , sigTable [ index ] . sig_descrip , sigTable [ index ] . handler_descrip )"		3058844	0					
ANR	3058964	Callee	dprintf		3058844	0					
ANR	3058965	Identifier	dprintf		3058844	0					
ANR	3058966	ArgumentList	D_DAEMONCORE		3058844	1					
ANR	3058967	Argument	D_DAEMONCORE		3058844	0					
ANR	3058968	Identifier	D_DAEMONCORE		3058844	0					
ANR	3058969	Argument	"""DaemonCore: received Signal %d (%s), raising event %s\\n"""		3058844	1					
ANR	3058970	PrimaryExpression	"""DaemonCore: received Signal %d (%s), raising event %s\\n"""		3058844	0					
ANR	3058971	Argument	sig		3058844	2					
ANR	3058972	Identifier	sig		3058844	0					
ANR	3058973	Argument	sigTable [ index ] . sig_descrip		3058844	3					
ANR	3058974	MemberAccess	sigTable [ index ] . sig_descrip		3058844	0					
ANR	3058975	ArrayIndexing	sigTable [ index ]		3058844	0					
ANR	3058976	Identifier	sigTable		3058844	0					
ANR	3058977	Identifier	index		3058844	1					
ANR	3058978	Identifier	sig_descrip		3058844	1					
ANR	3058979	Argument	sigTable [ index ] . handler_descrip		3058844	4					
ANR	3058980	MemberAccess	sigTable [ index ] . handler_descrip		3058844	0					
ANR	3058981	ArrayIndexing	sigTable [ index ]		3058844	0					
ANR	3058982	Identifier	sigTable		3058844	0					
ANR	3058983	Identifier	index		3058844	1					
ANR	3058984	Identifier	handler_descrip		3058844	1					
ANR	3058985	ExpressionStatement	sigTable [ index ] . is_pending = TRUE	5565:3:169484:169517	3058844	2	True				
ANR	3058986	AssignmentExpression	sigTable [ index ] . is_pending = TRUE		3058844	0		=			
ANR	3058987	MemberAccess	sigTable [ index ] . is_pending		3058844	0					
ANR	3058988	ArrayIndexing	sigTable [ index ]		3058844	0					
ANR	3058989	Identifier	sigTable		3058844	0					
ANR	3058990	Identifier	index		3058844	1					
ANR	3058991	Identifier	is_pending		3058844	1					
ANR	3058992	Identifier	TRUE		3058844	1					
ANR	3058993	BreakStatement	break ;	5566:3:169522:169527	3058844	3	True				
ANR	3058994	Label	case _DC_BLOCKSIGNAL :	5567:2:169531:169551	3058844	4	True				
ANR	3058995	Identifier	_DC_BLOCKSIGNAL		3058844	0					
ANR	3058996	ExpressionStatement	sigTable [ index ] . is_blocked = TRUE	5568:3:169556:169589	3058844	5	True				
ANR	3058997	AssignmentExpression	sigTable [ index ] . is_blocked = TRUE		3058844	0		=			
ANR	3058998	MemberAccess	sigTable [ index ] . is_blocked		3058844	0					
ANR	3058999	ArrayIndexing	sigTable [ index ]		3058844	0					
ANR	3059000	Identifier	sigTable		3058844	0					
ANR	3059001	Identifier	index		3058844	1					
ANR	3059002	Identifier	is_blocked		3058844	1					
ANR	3059003	Identifier	TRUE		3058844	1					
ANR	3059004	BreakStatement	break ;	5569:3:169594:169599	3058844	6	True				
ANR	3059005	Label	case _DC_UNBLOCKSIGNAL :	5570:2:169603:169625	3058844	7	True				
ANR	3059006	Identifier	_DC_UNBLOCKSIGNAL		3058844	0					
ANR	3059007	ExpressionStatement	sigTable [ index ] . is_blocked = FALSE	5571:3:169630:169664	3058844	8	True				
ANR	3059008	AssignmentExpression	sigTable [ index ] . is_blocked = FALSE		3058844	0		=			
ANR	3059009	MemberAccess	sigTable [ index ] . is_blocked		3058844	0					
ANR	3059010	ArrayIndexing	sigTable [ index ]		3058844	0					
ANR	3059011	Identifier	sigTable		3058844	0					
ANR	3059012	Identifier	index		3058844	1					
ANR	3059013	Identifier	is_blocked		3058844	1					
ANR	3059014	Identifier	FALSE		3058844	1					
ANR	3059015	IfStatement	if ( sigTable [ index ] . is_pending == TRUE )		3058844	9					
ANR	3059016	Condition	sigTable [ index ] . is_pending == TRUE	5576:8:169910:169943	3058844	0	True				
ANR	3059017	EqualityExpression	sigTable [ index ] . is_pending == TRUE		3058844	0		==			
ANR	3059018	MemberAccess	sigTable [ index ] . is_pending		3058844	0					
ANR	3059019	ArrayIndexing	sigTable [ index ]		3058844	0					
ANR	3059020	Identifier	sigTable		3058844	0					
ANR	3059021	Identifier	index		3058844	1					
ANR	3059022	Identifier	is_pending		3058844	1					
ANR	3059023	Identifier	TRUE		3058844	1					
ANR	3059024	ExpressionStatement	sent_signal = TRUE	5577:4:169951:169969	3058844	1	True				
ANR	3059025	AssignmentExpression	sent_signal = TRUE		3058844	0		=			
ANR	3059026	Identifier	sent_signal		3058844	0					
ANR	3059027	Identifier	TRUE		3058844	1					
ANR	3059028	BreakStatement	break ;	5578:3:169974:169979	3058844	10	True				
ANR	3059029	Label	default :	5579:2:169983:169990	3058844	11	True				
ANR	3059030	Identifier	default		3058844	0					
ANR	3059031	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore: HandleSig(): unrecognized command\\n"" )"	5580:3:169995:170071	3058844	12	True				
ANR	3059032	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore: HandleSig(): unrecognized command\\n"" )"		3058844	0					
ANR	3059033	Callee	dprintf		3058844	0					
ANR	3059034	Identifier	dprintf		3058844	0					
ANR	3059035	ArgumentList	D_DAEMONCORE		3058844	1					
ANR	3059036	Argument	D_DAEMONCORE		3058844	0					
ANR	3059037	Identifier	D_DAEMONCORE		3058844	0					
ANR	3059038	Argument	"""DaemonCore: HandleSig(): unrecognized command\\n"""		3058844	1					
ANR	3059039	PrimaryExpression	"""DaemonCore: HandleSig(): unrecognized command\\n"""		3058844	0					
ANR	3059040	ReturnStatement	return FALSE ;	5582:3:170076:170088	3058844	13	True				
ANR	3059041	Identifier	FALSE		3058844	0					
ANR	3059042	BreakStatement	break ;	5583:3:170093:170098	3058844	14	True				
ANR	3059043	ReturnStatement	return TRUE ;	5587:1:170133:170144	3058844	7	True				
ANR	3059044	Identifier	TRUE		3058844	0					
ANR	3059045	ReturnType	int		3058844	1					
ANR	3059046	Identifier	DaemonCore :: HandleSig		3058844	2					
ANR	3059047	ParameterList	"int command , int sig"		3058844	3					
ANR	3059048	Parameter	int command	5525:26:168511:168521	3058844	0	True				
ANR	3059049	ParameterType	int		3058844	0					
ANR	3059050	Identifier	command		3058844	1					
ANR	3059051	Parameter	int sig	5525:38:168523:168529	3058844	1	True				
ANR	3059052	ParameterType	int		3058844	0					
ANR	3059053	Identifier	sig		3058844	1					
ANR	3059054	CFGEntryNode	ENTRY		3058844		True				
ANR	3059055	CFGExitNode	EXIT		3058844		True				
ANR	3059056	Symbol	maxSig		3058844						
ANR	3059057	Symbol	sigTable [ index ] . is_blocked		3058844						
ANR	3059058	Symbol	sent_signal		3058844						
ANR	3059059	Symbol	D_DAEMONCORE		3058844						
ANR	3059060	Symbol	* index		3058844						
ANR	3059061	Symbol	sigTable [ index ] . sig_descrip		3058844						
ANR	3059062	Symbol	D_ALWAYS		3058844						
ANR	3059063	Symbol	index		3058844						
ANR	3059064	Symbol	TRUE		3058844						
ANR	3059065	Symbol	j		3058844						
ANR	3059066	Symbol	command		3058844						
ANR	3059067	Symbol	sig		3058844						
ANR	3059068	Symbol	sigTable [ index ] . num		3058844						
ANR	3059069	Symbol	* sigTable		3058844						
ANR	3059070	Symbol	* j		3058844						
ANR	3059071	Symbol	sigTable [ index ] . is_pending		3058844						
ANR	3059072	Symbol	sigFound		3058844						
ANR	3059073	Symbol	sigTable		3058844						
ANR	3059074	Symbol	sigTable [ j ] . num		3058844						
ANR	3059075	Symbol	FALSE		3058844						
ANR	3059076	Symbol	sigTable [ index ] . handler_descrip		3058844						
ANR	3059077	DeclStmt									
ANR	3059078	Decl							char const	char const *	status
ANR	3059079	Function	DCSignalMsg :: signalName	5624:0:170896:171449							
ANR	3059080	FunctionDef	DCSignalMsg :: signalName ()		3059079	0					
ANR	3059081	CompoundStatement		5625:0:170934:171449	3059079	0					
ANR	3059082	SwitchStatement	switch ( theSignal ( ) )		3059079	0					
ANR	3059083	Condition	theSignal ( )	5626:8:170944:170954	3059079	0	True				
ANR	3059084	CallExpression	theSignal ( )		3059079	0					
ANR	3059085	Callee	theSignal		3059079	0					
ANR	3059086	Identifier	theSignal		3059079	0					
ANR	3059087	ArgumentList			3059079	1					
ANR	3059088	CompoundStatement		2:21:22:22	3059079	1					
ANR	3059089	Label	case SIGUSR1 :	5627:1:170960:170972	3059079	0	True				
ANR	3059090	Identifier	SIGUSR1		3059079	0					
ANR	3059091	ReturnStatement	"return ""SIGUSR1"" ;"	5628:2:170976:170992	3059079	1	True				
ANR	3059092	PrimaryExpression	"""SIGUSR1"""		3059079	0					
ANR	3059093	Label	case SIGUSR2 :	5629:1:170995:171007	3059079	2	True				
ANR	3059094	Identifier	SIGUSR2		3059079	0					
ANR	3059095	ReturnStatement	"return ""SIGUSR2"" ;"	5630:2:171011:171027	3059079	3	True				
ANR	3059096	PrimaryExpression	"""SIGUSR2"""		3059079	0					
ANR	3059097	Label	case SIGTERM :	5631:1:171030:171042	3059079	4	True				
ANR	3059098	Identifier	SIGTERM		3059079	0					
ANR	3059099	ReturnStatement	"return ""SIGTERM"" ;"	5632:2:171046:171062	3059079	5	True				
ANR	3059100	PrimaryExpression	"""SIGTERM"""		3059079	0					
ANR	3059101	Label	case SIGSTOP :	5633:1:171065:171077	3059079	6	True				
ANR	3059102	Identifier	SIGSTOP		3059079	0					
ANR	3059103	ReturnStatement	"return ""SIGSTOP"" ;"	5634:2:171081:171097	3059079	7	True				
ANR	3059104	PrimaryExpression	"""SIGSTOP"""		3059079	0					
ANR	3059105	Label	case SIGCONT :	5635:1:171100:171112	3059079	8	True				
ANR	3059106	Identifier	SIGCONT		3059079	0					
ANR	3059107	ReturnStatement	"return ""SIGCONT"" ;"	5636:2:171116:171132	3059079	9	True				
ANR	3059108	PrimaryExpression	"""SIGCONT"""		3059079	0					
ANR	3059109	Label	case SIGQUIT :	5637:1:171135:171147	3059079	10	True				
ANR	3059110	Identifier	SIGQUIT		3059079	0					
ANR	3059111	ReturnStatement	"return ""SIGQUIT"" ;"	5638:2:171151:171167	3059079	11	True				
ANR	3059112	PrimaryExpression	"""SIGQUIT"""		3059079	0					
ANR	3059113	Label	case SIGKILL :	5639:1:171170:171182	3059079	12	True				
ANR	3059114	Identifier	SIGKILL		3059079	0					
ANR	3059115	ReturnStatement	"return ""SIGKILL"" ;"	5640:2:171186:171202	3059079	13	True				
ANR	3059116	PrimaryExpression	"""SIGKILL"""		3059079	0					
ANR	3059117	IdentifierDeclStatement	char const * sigName = getCommandString ( theSignal ( ) ) ;	5645:1:171277:171328	3059079	1	True				
ANR	3059118	IdentifierDecl	* sigName = getCommandString ( theSignal ( ) )		3059079	0					
ANR	3059119	IdentifierDeclType	char const *		3059079	0					
ANR	3059120	Identifier	sigName		3059079	1					
ANR	3059121	AssignmentExpression	* sigName = getCommandString ( theSignal ( ) )		3059079	2		=			
ANR	3059122	Identifier	sigName		3059079	0					
ANR	3059123	CallExpression	getCommandString ( theSignal ( ) )		3059079	1					
ANR	3059124	Callee	getCommandString		3059079	0					
ANR	3059125	Identifier	getCommandString		3059079	0					
ANR	3059126	ArgumentList	theSignal ( )		3059079	1					
ANR	3059127	Argument	theSignal ( )		3059079	0					
ANR	3059128	CallExpression	theSignal ( )		3059079	0					
ANR	3059129	Callee	theSignal		3059079	0					
ANR	3059130	Identifier	theSignal		3059079	0					
ANR	3059131	ArgumentList			3059079	1					
ANR	3059132	IfStatement	if ( ! sigName )		3059079	2					
ANR	3059133	Condition	! sigName	5646:4:171334:171341	3059079	0	True				
ANR	3059134	UnaryOperationExpression	! sigName		3059079	0					
ANR	3059135	UnaryOperator	!		3059079	0					
ANR	3059136	Identifier	sigName		3059079	1					
ANR	3059137	CompoundStatement		22:14:409:409	3059079	1					
ANR	3059138	ReturnStatement	"return """" ;"	5648:2:171418:171427	3059079	0	True				
ANR	3059139	PrimaryExpression	""""""		3059079	0					
ANR	3059140	ReturnStatement	return sigName ;	5650:1:171433:171447	3059079	3	True				
ANR	3059141	Identifier	sigName		3059079	0					
ANR	3059142	ReturnType	char const *		3059079	1					
ANR	3059143	Identifier	DCSignalMsg :: signalName		3059079	2					
ANR	3059144	ParameterList			3059079	3					
ANR	3059145	CFGEntryNode	ENTRY		3059079		True				
ANR	3059146	CFGExitNode	EXIT		3059079		True				
ANR	3059147	Symbol	theSignal		3059079						
ANR	3059148	Symbol	sigName		3059079						
ANR	3059149	Symbol	getCommandString		3059079						
ANR	3059150	Function	DaemonCore :: Send_Signal	5653:0:171452:171733							
ANR	3059151	FunctionDef	"DaemonCore :: Send_Signal (pid_t pid , int sig)"		3059150	0					
ANR	3059152	CompoundStatement		5654:0:171501:171733	3059150	0					
ANR	3059153	IdentifierDeclStatement	"classy_counted_ptr < DCSignalMsg > msg = new DCSignalMsg ( pid , sig ) ;"	5655:1:171504:171566	3059150	0	True				
ANR	3059154	IdentifierDecl	"msg = new DCSignalMsg ( pid , sig )"		3059150	0					
ANR	3059155	IdentifierDeclType	classy_counted_ptr < DCSignalMsg >		3059150	0					
ANR	3059156	Identifier	msg		3059150	1					
ANR	3059157	AssignmentExpression	"msg = new DCSignalMsg ( pid , sig )"		3059150	2		=			
ANR	3059158	Identifier	msg		3059150	0					
ANR	3059159	Expression	"pid , sig"		3059150	1					
ANR	3059160	Identifier	pid		3059150	0					
ANR	3059161	Identifier	sig		3059150	1					
ANR	3059162	ExpressionStatement	"Send_Signal ( msg , false )"	5656:1:171569:171592	3059150	1	True				
ANR	3059163	CallExpression	"Send_Signal ( msg , false )"		3059150	0					
ANR	3059164	Callee	Send_Signal		3059150	0					
ANR	3059165	Identifier	Send_Signal		3059150	0					
ANR	3059166	ArgumentList	msg		3059150	1					
ANR	3059167	Argument	msg		3059150	0					
ANR	3059168	Identifier	msg		3059150	0					
ANR	3059169	Argument	false		3059150	1					
ANR	3059170	Identifier	false		3059150	0					
ANR	3059171	ReturnStatement	return msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED ;	5660:1:171674:171731	3059150	2	True				
ANR	3059172	EqualityExpression	msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED		3059150	0		==			
ANR	3059173	CallExpression	msg -> deliveryStatus ( )		3059150	0					
ANR	3059174	Callee	msg -> deliveryStatus		3059150	0					
ANR	3059175	PtrMemberAccess	msg -> deliveryStatus		3059150	0					
ANR	3059176	Identifier	msg		3059150	0					
ANR	3059177	Identifier	deliveryStatus		3059150	1					
ANR	3059178	ArgumentList			3059150	1					
ANR	3059179	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3059150	1					
ANR	3059180	ReturnType	bool		3059150	1					
ANR	3059181	Identifier	DaemonCore :: Send_Signal		3059150	2					
ANR	3059182	ParameterList	"pid_t pid , int sig"		3059150	3					
ANR	3059183	Parameter	pid_t pid	5653:29:171481:171489	3059150	0	True				
ANR	3059184	ParameterType	pid_t		3059150	0					
ANR	3059185	Identifier	pid		3059150	1					
ANR	3059186	Parameter	int sig	5653:40:171492:171498	3059150	1	True				
ANR	3059187	ParameterType	int		3059150	0					
ANR	3059188	Identifier	sig		3059150	1					
ANR	3059189	CFGEntryNode	ENTRY		3059150		True				
ANR	3059190	CFGExitNode	EXIT		3059150		True				
ANR	3059191	Symbol	sig		3059150						
ANR	3059192	Symbol	msg		3059150						
ANR	3059193	Symbol	DCMsg :: DELIVERY_SUCCEEDED		3059150						
ANR	3059194	Symbol	msg -> deliveryStatus		3059150						
ANR	3059195	Symbol	false		3059150						
ANR	3059196	Symbol	pid		3059150						
ANR	3059197	Symbol	* msg		3059150						
ANR	3059198	Function	DaemonCore :: Send_Signal_nonblocking	5663:0:171736:172437							
ANR	3059199	FunctionDef	DaemonCore :: Send_Signal_nonblocking (classy_counted_ptr < DCSignalMsg > msg)		3059198	0					
ANR	3059200	CompoundStatement		5663:78:171814:172437	3059198	0					
ANR	3059201	ExpressionStatement	"Send_Signal ( msg , true )"	5664:1:171817:171841	3059198	0	True				
ANR	3059202	CallExpression	"Send_Signal ( msg , true )"		3059198	0					
ANR	3059203	Callee	Send_Signal		3059198	0					
ANR	3059204	Identifier	Send_Signal		3059198	0					
ANR	3059205	ArgumentList	msg		3059198	1					
ANR	3059206	Argument	msg		3059198	0					
ANR	3059207	Identifier	msg		3059198	0					
ANR	3059208	Argument	true		3059198	1					
ANR	3059209	Identifier	true		3059198	0					
ANR	3059210	IfStatement	if ( ! msg -> messengerDelivery ( ) )		3059198	1					
ANR	3059211	Condition	! msg -> messengerDelivery ( )	5670:5:172004:172028	3059198	0	True				
ANR	3059212	UnaryOperationExpression	! msg -> messengerDelivery ( )		3059198	0					
ANR	3059213	UnaryOperator	!		3059198	0					
ANR	3059214	CallExpression	msg -> messengerDelivery ( )		3059198	1					
ANR	3059215	Callee	msg -> messengerDelivery		3059198	0					
ANR	3059216	PtrMemberAccess	msg -> messengerDelivery		3059198	0					
ANR	3059217	Identifier	msg		3059198	0					
ANR	3059218	Identifier	messengerDelivery		3059198	1					
ANR	3059219	ArgumentList			3059198	1					
ANR	3059220	CompoundStatement		8:33:217:217	3059198	1					
ANR	3059221	SwitchStatement	switch ( msg -> deliveryStatus ( ) )		3059198	0					
ANR	3059222	Condition	msg -> deliveryStatus ( )	5671:10:172044:172064	3059198	0	True				
ANR	3059223	CallExpression	msg -> deliveryStatus ( )		3059198	0					
ANR	3059224	Callee	msg -> deliveryStatus		3059198	0					
ANR	3059225	PtrMemberAccess	msg -> deliveryStatus		3059198	0					
ANR	3059226	Identifier	msg		3059198	0					
ANR	3059227	Identifier	deliveryStatus		3059198	1					
ANR	3059228	ArgumentList			3059198	1					
ANR	3059229	CompoundStatement		9:34:253:253	3059198	1					
ANR	3059230	Label	case DCMsg :: DELIVERY_SUCCEEDED :	5672:2:172072:172102	3059198	0	True				
ANR	3059231	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3059198	0					
ANR	3059232	ExpressionStatement	"msg -> messageSent ( NULL , NULL )"	5673:3:172107:172137	3059198	1	True				
ANR	3059233	CallExpression	"msg -> messageSent ( NULL , NULL )"		3059198	0					
ANR	3059234	Callee	msg -> messageSent		3059198	0					
ANR	3059235	PtrMemberAccess	msg -> messageSent		3059198	0					
ANR	3059236	Identifier	msg		3059198	0					
ANR	3059237	Identifier	messageSent		3059198	1					
ANR	3059238	ArgumentList	NULL		3059198	1					
ANR	3059239	Argument	NULL		3059198	0					
ANR	3059240	Identifier	NULL		3059198	0					
ANR	3059241	Argument	NULL		3059198	1					
ANR	3059242	Identifier	NULL		3059198	0					
ANR	3059243	BreakStatement	break ;	5674:3:172142:172147	3059198	2	True				
ANR	3059244	Label	case DCMsg :: DELIVERY_FAILED :	5675:2:172151:172178	3059198	3	True				
ANR	3059245	Identifier	DCMsg :: DELIVERY_FAILED		3059198	0					
ANR	3059246	Label	case DCMsg :: DELIVERY_PENDING :	5676:2:172182:172210	3059198	4	True				
ANR	3059247	Identifier	DCMsg :: DELIVERY_PENDING		3059198	0					
ANR	3059248	Label	case DCMsg :: DELIVERY_CANCELED :	5677:2:172214:172243	3059198	5	True				
ANR	3059249	Identifier	DCMsg :: DELIVERY_CANCELED		3059198	0					
ANR	3059250	ExpressionStatement	msg -> messageSendFailed ( NULL )	5681:3:172388:172418	3059198	6	True				
ANR	3059251	CallExpression	msg -> messageSendFailed ( NULL )		3059198	0					
ANR	3059252	Callee	msg -> messageSendFailed		3059198	0					
ANR	3059253	PtrMemberAccess	msg -> messageSendFailed		3059198	0					
ANR	3059254	Identifier	msg		3059198	0					
ANR	3059255	Identifier	messageSendFailed		3059198	1					
ANR	3059256	ArgumentList	NULL		3059198	1					
ANR	3059257	Argument	NULL		3059198	0					
ANR	3059258	Identifier	NULL		3059198	0					
ANR	3059259	BreakStatement	break ;	5682:3:172423:172428	3059198	7	True				
ANR	3059260	ReturnType	void		3059198	1					
ANR	3059261	Identifier	DaemonCore :: Send_Signal_nonblocking		3059198	2					
ANR	3059262	ParameterList	classy_counted_ptr < DCSignalMsg > msg		3059198	3					
ANR	3059263	Parameter	classy_counted_ptr < DCSignalMsg > msg	5663:41:171777:171811	3059198	0	True				
ANR	3059264	ParameterType	classy_counted_ptr < DCSignalMsg >		3059198	0					
ANR	3059265	Identifier	msg		3059198	1					
ANR	3059266	CFGEntryNode	ENTRY		3059198		True				
ANR	3059267	CFGExitNode	EXIT		3059198		True				
ANR	3059268	Symbol	msg		3059198						
ANR	3059269	Symbol	NULL		3059198						
ANR	3059270	Symbol	msg -> deliveryStatus		3059198						
ANR	3059271	Symbol	msg -> messengerDelivery		3059198						
ANR	3059272	Symbol	true		3059198						
ANR	3059273	Symbol	* msg		3059198						
ANR	3059274	Function	DaemonCore :: Send_Signal	5687:0:172440:179578							
ANR	3059275	FunctionDef	"DaemonCore :: Send_Signal (classy_counted_ptr < DCSignalMsg > msg , bool nonblocking)"		3059274	0					
ANR	3059276	CompoundStatement		5688:0:172524:179578	3059274	0					
ANR	3059277	IdentifierDeclStatement	pid_t pid = msg -> thePid ( ) ;	5689:1:172527:172552	3059274	0	True				
ANR	3059278	IdentifierDecl	pid = msg -> thePid ( )		3059274	0					
ANR	3059279	IdentifierDeclType	pid_t		3059274	0					
ANR	3059280	Identifier	pid		3059274	1					
ANR	3059281	AssignmentExpression	pid = msg -> thePid ( )		3059274	2		=			
ANR	3059282	Identifier	pid		3059274	0					
ANR	3059283	CallExpression	msg -> thePid ( )		3059274	1					
ANR	3059284	Callee	msg -> thePid		3059274	0					
ANR	3059285	PtrMemberAccess	msg -> thePid		3059274	0					
ANR	3059286	Identifier	msg		3059274	0					
ANR	3059287	Identifier	thePid		3059274	1					
ANR	3059288	ArgumentList			3059274	1					
ANR	3059289	IdentifierDeclStatement	int sig = msg -> theSignal ( ) ;	5690:1:172555:172581	3059274	1	True				
ANR	3059290	IdentifierDecl	sig = msg -> theSignal ( )		3059274	0					
ANR	3059291	IdentifierDeclType	int		3059274	0					
ANR	3059292	Identifier	sig		3059274	1					
ANR	3059293	AssignmentExpression	sig = msg -> theSignal ( )		3059274	2		=			
ANR	3059294	Identifier	sig		3059274	0					
ANR	3059295	CallExpression	msg -> theSignal ( )		3059274	1					
ANR	3059296	Callee	msg -> theSignal		3059274	0					
ANR	3059297	PtrMemberAccess	msg -> theSignal		3059274	0					
ANR	3059298	Identifier	msg		3059274	0					
ANR	3059299	Identifier	theSignal		3059274	1					
ANR	3059300	ArgumentList			3059274	1					
ANR	3059301	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	5691:1:172584:172609	3059274	2	True				
ANR	3059302	IdentifierDecl	* pidinfo = NULL		3059274	0					
ANR	3059303	IdentifierDeclType	PidEntry *		3059274	0					
ANR	3059304	Identifier	pidinfo		3059274	1					
ANR	3059305	AssignmentExpression	* pidinfo = NULL		3059274	2		=			
ANR	3059306	Identifier	NULL		3059274	0					
ANR	3059307	Identifier	NULL		3059274	1					
ANR	3059308	IdentifierDeclStatement	"int same_thread , is_local ;"	5692:1:172612:172637	3059274	3	True				
ANR	3059309	IdentifierDecl	same_thread		3059274	0					
ANR	3059310	IdentifierDeclType	int		3059274	0					
ANR	3059311	Identifier	same_thread		3059274	1					
ANR	3059312	IdentifierDecl	is_local		3059274	1					
ANR	3059313	IdentifierDeclType	int		3059274	0					
ANR	3059314	Identifier	is_local		3059274	1					
ANR	3059315	IdentifierDeclStatement	char const * destination ;	5693:1:172640:172663	3059274	4	True				
ANR	3059316	IdentifierDecl	* destination		3059274	0					
ANR	3059317	IdentifierDeclType	char const *		3059274	0					
ANR	3059318	Identifier	destination		3059274	1					
ANR	3059319	IdentifierDeclStatement	int target_has_dcpm = TRUE ;	5694:1:172666:172692	3059274	5	True				
ANR	3059320	IdentifierDecl	target_has_dcpm = TRUE		3059274	0					
ANR	3059321	IdentifierDeclType	int		3059274	0					
ANR	3059322	Identifier	target_has_dcpm		3059274	1					
ANR	3059323	AssignmentExpression	target_has_dcpm = TRUE		3059274	2		=			
ANR	3059324	Identifier	TRUE		3059274	0					
ANR	3059325	Identifier	TRUE		3059274	1					
ANR	3059326	IdentifierDeclStatement	int signed_pid = ( int ) pid ;	5698:1:172871:172897	3059274	6	True				
ANR	3059327	IdentifierDecl	signed_pid = ( int ) pid		3059274	0					
ANR	3059328	IdentifierDeclType	int		3059274	0					
ANR	3059329	Identifier	signed_pid		3059274	1					
ANR	3059330	AssignmentExpression	signed_pid = ( int ) pid		3059274	2		=			
ANR	3059331	Identifier	signed_pid		3059274	0					
ANR	3059332	CastExpression	( int ) pid		3059274	1					
ANR	3059333	CastTarget	int		3059274	0					
ANR	3059334	Identifier	pid		3059274	1					
ANR	3059335	IfStatement	if ( signed_pid > - 10 && signed_pid < 3 )		3059274	7					
ANR	3059336	Condition	signed_pid > - 10 && signed_pid < 3	5699:6:172905:172938	3059274	0	True				
ANR	3059337	AndExpression	signed_pid > - 10 && signed_pid < 3		3059274	0		&&			
ANR	3059338	RelationalExpression	signed_pid > - 10		3059274	0		>			
ANR	3059339	Identifier	signed_pid		3059274	0					
ANR	3059340	UnaryOperationExpression	- 10		3059274	1					
ANR	3059341	UnaryOperator	-		3059274	0					
ANR	3059342	PrimaryExpression	10		3059274	1					
ANR	3059343	RelationalExpression	signed_pid < 3		3059274	1		<			
ANR	3059344	Identifier	signed_pid		3059274	0					
ANR	3059345	PrimaryExpression	3		3059274	1					
ANR	3059346	CompoundStatement		12:43:417:417	3059274	1					
ANR	3059347	ExpressionStatement	"EXCEPT ( ""Send_Signal: sent unsafe pid (%d)"" , signed_pid )"	5700:2:172946:173000	3059274	0	True				
ANR	3059348	CallExpression	"EXCEPT ( ""Send_Signal: sent unsafe pid (%d)"" , signed_pid )"		3059274	0					
ANR	3059349	Callee	EXCEPT		3059274	0					
ANR	3059350	Identifier	EXCEPT		3059274	0					
ANR	3059351	ArgumentList	"""Send_Signal: sent unsafe pid (%d)"""		3059274	1					
ANR	3059352	Argument	"""Send_Signal: sent unsafe pid (%d)"""		3059274	0					
ANR	3059353	PrimaryExpression	"""Send_Signal: sent unsafe pid (%d)"""		3059274	0					
ANR	3059354	Argument	signed_pid		3059274	1					
ANR	3059355	Identifier	signed_pid		3059274	0					
ANR	3059356	IfStatement	if ( pid != mypid )		3059274	8					
ANR	3059357	Condition	pid != mypid	5705:6:173158:173169	3059274	0	True				
ANR	3059358	EqualityExpression	pid != mypid		3059274	0		!=			
ANR	3059359	Identifier	pid		3059274	0					
ANR	3059360	Identifier	mypid		3059274	1					
ANR	3059361	CompoundStatement		18:21:648:648	3059274	1					
ANR	3059362	IfStatement	"if ( pidTable -> lookup ( pid , pidinfo ) < 0 )"		3059274	0					
ANR	3059363	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	5706:7:173182:173214	3059274	0	True				
ANR	3059364	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		3059274	0		<			
ANR	3059365	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		3059274	0					
ANR	3059366	Callee	pidTable -> lookup		3059274	0					
ANR	3059367	PtrMemberAccess	pidTable -> lookup		3059274	0					
ANR	3059368	Identifier	pidTable		3059274	0					
ANR	3059369	Identifier	lookup		3059274	1					
ANR	3059370	ArgumentList	pid		3059274	1					
ANR	3059371	Argument	pid		3059274	0					
ANR	3059372	Identifier	pid		3059274	0					
ANR	3059373	Argument	pidinfo		3059274	1					
ANR	3059374	Identifier	pidinfo		3059274	0					
ANR	3059375	PrimaryExpression	0		3059274	1					
ANR	3059376	CompoundStatement		19:43:693:693	3059274	1					
ANR	3059377	ExpressionStatement	pidinfo = NULL	5708:3:173271:173285	3059274	0	True				
ANR	3059378	AssignmentExpression	pidinfo = NULL		3059274	0		=			
ANR	3059379	Identifier	pidinfo		3059274	0					
ANR	3059380	Identifier	NULL		3059274	1					
ANR	3059381	ExpressionStatement	target_has_dcpm = FALSE	5709:3:173290:173313	3059274	1	True				
ANR	3059382	AssignmentExpression	target_has_dcpm = FALSE		3059274	0		=			
ANR	3059383	Identifier	target_has_dcpm		3059274	0					
ANR	3059384	Identifier	FALSE		3059274	1					
ANR	3059385	IfStatement	if ( pidinfo && pidinfo -> sinful_string [ 0 ] == '\\0' )		3059274	1					
ANR	3059386	Condition	pidinfo && pidinfo -> sinful_string [ 0 ] == '\\0'	5711:7:173326:173369	3059274	0	True				
ANR	3059387	AndExpression	pidinfo && pidinfo -> sinful_string [ 0 ] == '\\0'		3059274	0		&&			
ANR	3059388	Identifier	pidinfo		3059274	0					
ANR	3059389	EqualityExpression	pidinfo -> sinful_string [ 0 ] == '\\0'		3059274	1		==			
ANR	3059390	ArrayIndexing	pidinfo -> sinful_string [ 0 ]		3059274	0					
ANR	3059391	PtrMemberAccess	pidinfo -> sinful_string		3059274	0					
ANR	3059392	Identifier	pidinfo		3059274	0					
ANR	3059393	Identifier	sinful_string		3059274	1					
ANR	3059394	PrimaryExpression	0		3059274	1					
ANR	3059395	PrimaryExpression	'\\0'		3059274	1					
ANR	3059396	CompoundStatement		24:54:848:848	3059274	1					
ANR	3059397	ExpressionStatement	target_has_dcpm = FALSE	5714:3:173486:173509	3059274	0	True				
ANR	3059398	AssignmentExpression	target_has_dcpm = FALSE		3059274	0		=			
ANR	3059399	Identifier	target_has_dcpm		3059274	0					
ANR	3059400	Identifier	FALSE		3059274	1					
ANR	3059401	IfStatement	if ( ProcessExitedButNotReaped ( pid ) )		3059274	9					
ANR	3059402	Condition	ProcessExitedButNotReaped ( pid )	5718:5:173524:173553	3059274	0	True				
ANR	3059403	CallExpression	ProcessExitedButNotReaped ( pid )		3059274	0					
ANR	3059404	Callee	ProcessExitedButNotReaped		3059274	0					
ANR	3059405	Identifier	ProcessExitedButNotReaped		3059274	0					
ANR	3059406	ArgumentList	pid		3059274	1					
ANR	3059407	Argument	pid		3059274	0					
ANR	3059408	Identifier	pid		3059274	0					
ANR	3059409	CompoundStatement		31:38:1032:1032	3059274	1					
ANR	3059410	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_FAILED )	5719:2:173561:173606	3059274	0	True				
ANR	3059411	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_FAILED )		3059274	0					
ANR	3059412	Callee	msg -> deliveryStatus		3059274	0					
ANR	3059413	PtrMemberAccess	msg -> deliveryStatus		3059274	0					
ANR	3059414	Identifier	msg		3059274	0					
ANR	3059415	Identifier	deliveryStatus		3059274	1					
ANR	3059416	ArgumentList	DCMsg :: DELIVERY_FAILED		3059274	1					
ANR	3059417	Argument	DCMsg :: DELIVERY_FAILED		3059274	0					
ANR	3059418	Identifier	DCMsg :: DELIVERY_FAILED		3059274	0					
ANR	3059419	ExpressionStatement	"dprintf ( D_ALWAYS , ""Send_Signal: attempt to send signal %d to process %d, which has exited but not yet been reaped.\\n"" , sig , pid )"	5720:2:173610:173735	3059274	1	True				
ANR	3059420	CallExpression	"dprintf ( D_ALWAYS , ""Send_Signal: attempt to send signal %d to process %d, which has exited but not yet been reaped.\\n"" , sig , pid )"		3059274	0					
ANR	3059421	Callee	dprintf		3059274	0					
ANR	3059422	Identifier	dprintf		3059274	0					
ANR	3059423	ArgumentList	D_ALWAYS		3059274	1					
ANR	3059424	Argument	D_ALWAYS		3059274	0					
ANR	3059425	Identifier	D_ALWAYS		3059274	0					
ANR	3059426	Argument	"""Send_Signal: attempt to send signal %d to process %d, which has exited but not yet been reaped.\\n"""		3059274	1					
ANR	3059427	PrimaryExpression	"""Send_Signal: attempt to send signal %d to process %d, which has exited but not yet been reaped.\\n"""		3059274	0					
ANR	3059428	Argument	sig		3059274	2					
ANR	3059429	Identifier	sig		3059274	0					
ANR	3059430	Argument	pid		3059274	3					
ANR	3059431	Identifier	pid		3059274	0					
ANR	3059432	ReturnStatement	return ;	5721:2:173739:173745	3059274	2	True				
ANR	3059433	IfStatement	"if ( privsep_enabled ( ) || param_boolean ( ""GLEXEC_JOB"" , false ) )"		3059274	10					
ANR	3059434	Condition	"privsep_enabled ( ) || param_boolean ( ""GLEXEC_JOB"" , false )"	5727:5:173890:173944	3059274	0	True				
ANR	3059435	OrExpression	"privsep_enabled ( ) || param_boolean ( ""GLEXEC_JOB"" , false )"		3059274	0		||			
ANR	3059436	CallExpression	privsep_enabled ( )		3059274	0					
ANR	3059437	Callee	privsep_enabled		3059274	0					
ANR	3059438	Identifier	privsep_enabled		3059274	0					
ANR	3059439	ArgumentList			3059274	1					
ANR	3059440	CallExpression	"param_boolean ( ""GLEXEC_JOB"" , false )"		3059274	1					
ANR	3059441	Callee	param_boolean		3059274	0					
ANR	3059442	Identifier	param_boolean		3059274	0					
ANR	3059443	ArgumentList	"""GLEXEC_JOB"""		3059274	1					
ANR	3059444	Argument	"""GLEXEC_JOB"""		3059274	0					
ANR	3059445	PrimaryExpression	"""GLEXEC_JOB"""		3059274	0					
ANR	3059446	Argument	false		3059274	1					
ANR	3059447	Identifier	false		3059274	0					
ANR	3059448	CompoundStatement		40:62:1422:1422	3059274	1					
ANR	3059449	IfStatement	if ( ! target_has_dcpm && pidinfo && pidinfo -> new_process_group )		3059274	0					
ANR	3059450	Condition	! target_has_dcpm && pidinfo && pidinfo -> new_process_group	5728:6:173955:174011	3059274	0	True				
ANR	3059451	AndExpression	! target_has_dcpm && pidinfo && pidinfo -> new_process_group		3059274	0		&&			
ANR	3059452	UnaryOperationExpression	! target_has_dcpm		3059274	0					
ANR	3059453	UnaryOperator	!		3059274	0					
ANR	3059454	Identifier	target_has_dcpm		3059274	1					
ANR	3059455	AndExpression	pidinfo && pidinfo -> new_process_group		3059274	1		&&			
ANR	3059456	Identifier	pidinfo		3059274	0					
ANR	3059457	PtrMemberAccess	pidinfo -> new_process_group		3059274	1					
ANR	3059458	Identifier	pidinfo		3059274	0					
ANR	3059459	Identifier	new_process_group		3059274	1					
ANR	3059460	CompoundStatement		43:3:1528:1578	3059274	1					
ANR	3059461	ExpressionStatement	ASSERT ( m_proc_family != NULL )	5729:3:174019:174048	3059274	0	True				
ANR	3059462	CallExpression	ASSERT ( m_proc_family != NULL )		3059274	0					
ANR	3059463	Callee	ASSERT		3059274	0					
ANR	3059464	Identifier	ASSERT		3059274	0					
ANR	3059465	ArgumentList	m_proc_family != NULL		3059274	1					
ANR	3059466	Argument	m_proc_family != NULL		3059274	0					
ANR	3059467	EqualityExpression	m_proc_family != NULL		3059274	0		!=			
ANR	3059468	Identifier	m_proc_family		3059274	0					
ANR	3059469	Identifier	NULL		3059274	1					
ANR	3059470	IdentifierDeclStatement	"bool ok = m_proc_family -> signal_process ( pid , sig ) ;"	5730:3:174053:174103	3059274	1	True				
ANR	3059471	IdentifierDecl	"ok = m_proc_family -> signal_process ( pid , sig )"		3059274	0					
ANR	3059472	IdentifierDeclType	bool		3059274	0					
ANR	3059473	Identifier	ok		3059274	1					
ANR	3059474	AssignmentExpression	"ok = m_proc_family -> signal_process ( pid , sig )"		3059274	2		=			
ANR	3059475	Identifier	ok		3059274	0					
ANR	3059476	CallExpression	"m_proc_family -> signal_process ( pid , sig )"		3059274	1					
ANR	3059477	Callee	m_proc_family -> signal_process		3059274	0					
ANR	3059478	PtrMemberAccess	m_proc_family -> signal_process		3059274	0					
ANR	3059479	Identifier	m_proc_family		3059274	0					
ANR	3059480	Identifier	signal_process		3059274	1					
ANR	3059481	ArgumentList	pid		3059274	1					
ANR	3059482	Argument	pid		3059274	0					
ANR	3059483	Identifier	pid		3059274	0					
ANR	3059484	Argument	sig		3059274	1					
ANR	3059485	Identifier	sig		3059274	0					
ANR	3059486	IfStatement	if ( ok )		3059274	2					
ANR	3059487	Condition	ok	5731:7:174112:174113	3059274	0	True				
ANR	3059488	Identifier	ok		3059274	0					
ANR	3059489	CompoundStatement		44:11:1591:1591	3059274	1					
ANR	3059490	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5733:4:174150:174198	3059274	0	True				
ANR	3059491	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		3059274	0					
ANR	3059492	Callee	msg -> deliveryStatus		3059274	0					
ANR	3059493	PtrMemberAccess	msg -> deliveryStatus		3059274	0					
ANR	3059494	Identifier	msg		3059274	0					
ANR	3059495	Identifier	deliveryStatus		3059274	1					
ANR	3059496	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		3059274	1					
ANR	3059497	Argument	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059498	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059499	ElseStatement	else		3059274	0					
ANR	3059500	CompoundStatement		47:10:1685:1685	3059274	0					
ANR	3059501	ExpressionStatement	"dprintf ( D_ALWAYS , ""error using procd to send signal %d to pid %u\\n"" , sig , pid )"	5735:4:174216:174330	3059274	0	True				
ANR	3059502	CallExpression	"dprintf ( D_ALWAYS , ""error using procd to send signal %d to pid %u\\n"" , sig , pid )"		3059274	0					
ANR	3059503	Callee	dprintf		3059274	0					
ANR	3059504	Identifier	dprintf		3059274	0					
ANR	3059505	ArgumentList	D_ALWAYS		3059274	1					
ANR	3059506	Argument	D_ALWAYS		3059274	0					
ANR	3059507	Identifier	D_ALWAYS		3059274	0					
ANR	3059508	Argument	"""error using procd to send signal %d to pid %u\\n"""		3059274	1					
ANR	3059509	PrimaryExpression	"""error using procd to send signal %d to pid %u\\n"""		3059274	0					
ANR	3059510	Argument	sig		3059274	2					
ANR	3059511	Identifier	sig		3059274	0					
ANR	3059512	Argument	pid		3059274	3					
ANR	3059513	Identifier	pid		3059274	0					
ANR	3059514	ReturnStatement	return ;	5740:3:174340:174346	3059274	3	True				
ANR	3059515	ElseStatement	else		3059274	0					
ANR	3059516	ExpressionStatement	same_thread = FALSE	5845:2:177432:177451	3059274	0	True				
ANR	3059517	AssignmentExpression	same_thread = FALSE		3059274	0		=			
ANR	3059518	Identifier	same_thread		3059274	0					
ANR	3059519	Identifier	FALSE		3059274	1					
ANR	3059520	SwitchStatement	switch ( sig )		3059274	11					
ANR	3059521	Condition	sig	5746:9:174467:174469	3059274	0	True				
ANR	3059522	Identifier	sig		3059274	0					
ANR	3059523	CompoundStatement		59:14:1947:1947	3059274	1					
ANR	3059524	Label	case SIGKILL :	5747:2:174476:174488	3059274	0	True				
ANR	3059525	Identifier	SIGKILL		3059274	0					
ANR	3059526	IfStatement	if ( Shutdown_Fast ( pid ) )		3059274	1					
ANR	3059527	Condition	Shutdown_Fast ( pid )	5748:7:174497:174514	3059274	0	True				
ANR	3059528	CallExpression	Shutdown_Fast ( pid )		3059274	0					
ANR	3059529	Callee	Shutdown_Fast		3059274	0					
ANR	3059530	Identifier	Shutdown_Fast		3059274	0					
ANR	3059531	ArgumentList	pid		3059274	1					
ANR	3059532	Argument	pid		3059274	0					
ANR	3059533	Identifier	pid		3059274	0					
ANR	3059534	CompoundStatement		61:28:1993:1993	3059274	1					
ANR	3059535	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5749:4:174524:174572	3059274	0	True				
ANR	3059536	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		3059274	0					
ANR	3059537	Callee	msg -> deliveryStatus		3059274	0					
ANR	3059538	PtrMemberAccess	msg -> deliveryStatus		3059274	0					
ANR	3059539	Identifier	msg		3059274	0					
ANR	3059540	Identifier	deliveryStatus		3059274	1					
ANR	3059541	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		3059274	1					
ANR	3059542	Argument	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059543	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059544	ReturnStatement	return ;	5751:3:174582:174588	3059274	2	True				
ANR	3059545	BreakStatement	break ;	5752:3:174593:174598	3059274	3	True				
ANR	3059546	Label	case SIGSTOP :	5753:2:174602:174614	3059274	4	True				
ANR	3059547	Identifier	SIGSTOP		3059274	0					
ANR	3059548	IfStatement	if ( Suspend_Process ( pid ) )		3059274	5					
ANR	3059549	Condition	Suspend_Process ( pid )	5754:7:174623:174642	3059274	0	True				
ANR	3059550	CallExpression	Suspend_Process ( pid )		3059274	0					
ANR	3059551	Callee	Suspend_Process		3059274	0					
ANR	3059552	Identifier	Suspend_Process		3059274	0					
ANR	3059553	ArgumentList	pid		3059274	1					
ANR	3059554	Argument	pid		3059274	0					
ANR	3059555	Identifier	pid		3059274	0					
ANR	3059556	CompoundStatement		67:30:2121:2121	3059274	1					
ANR	3059557	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5755:4:174652:174700	3059274	0	True				
ANR	3059558	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		3059274	0					
ANR	3059559	Callee	msg -> deliveryStatus		3059274	0					
ANR	3059560	PtrMemberAccess	msg -> deliveryStatus		3059274	0					
ANR	3059561	Identifier	msg		3059274	0					
ANR	3059562	Identifier	deliveryStatus		3059274	1					
ANR	3059563	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		3059274	1					
ANR	3059564	Argument	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059565	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059566	ReturnStatement	return ;	5757:3:174710:174716	3059274	6	True				
ANR	3059567	BreakStatement	break ;	5758:3:174721:174726	3059274	7	True				
ANR	3059568	Label	case SIGCONT :	5759:2:174730:174742	3059274	8	True				
ANR	3059569	Identifier	SIGCONT		3059274	0					
ANR	3059570	IfStatement	if ( Continue_Process ( pid ) )		3059274	9					
ANR	3059571	Condition	Continue_Process ( pid )	5760:7:174751:174771	3059274	0	True				
ANR	3059572	CallExpression	Continue_Process ( pid )		3059274	0					
ANR	3059573	Callee	Continue_Process		3059274	0					
ANR	3059574	Identifier	Continue_Process		3059274	0					
ANR	3059575	ArgumentList	pid		3059274	1					
ANR	3059576	Argument	pid		3059274	0					
ANR	3059577	Identifier	pid		3059274	0					
ANR	3059578	CompoundStatement		73:31:2250:2250	3059274	1					
ANR	3059579	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5761:4:174781:174829	3059274	0	True				
ANR	3059580	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		3059274	0					
ANR	3059581	Callee	msg -> deliveryStatus		3059274	0					
ANR	3059582	PtrMemberAccess	msg -> deliveryStatus		3059274	0					
ANR	3059583	Identifier	msg		3059274	0					
ANR	3059584	Identifier	deliveryStatus		3059274	1					
ANR	3059585	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		3059274	1					
ANR	3059586	Argument	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059587	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059588	ReturnStatement	return ;	5763:3:174839:174845	3059274	10	True				
ANR	3059589	BreakStatement	break ;	5764:3:174850:174855	3059274	11	True				
ANR	3059590	Label	case SIGTERM :	5766:2:174872:174884	3059274	12	True				
ANR	3059591	Identifier	SIGTERM		3059274	0					
ANR	3059592	IfStatement	if ( pid != mypid && target_has_dcpm == FALSE )		3059274	13					
ANR	3059593	Condition	pid != mypid && target_has_dcpm == FALSE	5772:8:175147:175186	3059274	0	True				
ANR	3059594	AndExpression	pid != mypid && target_has_dcpm == FALSE		3059274	0		&&			
ANR	3059595	EqualityExpression	pid != mypid		3059274	0		!=			
ANR	3059596	Identifier	pid		3059274	0					
ANR	3059597	Identifier	mypid		3059274	1					
ANR	3059598	EqualityExpression	target_has_dcpm == FALSE		3059274	1		==			
ANR	3059599	Identifier	target_has_dcpm		3059274	0					
ANR	3059600	Identifier	FALSE		3059274	1					
ANR	3059601	CompoundStatement		85:51:2665:2665	3059274	1					
ANR	3059602	IfStatement	if ( Shutdown_Graceful ( pid ) )		3059274	0					
ANR	3059603	Condition	Shutdown_Graceful ( pid )	5773:8:175200:175221	3059274	0	True				
ANR	3059604	CallExpression	Shutdown_Graceful ( pid )		3059274	0					
ANR	3059605	Callee	Shutdown_Graceful		3059274	0					
ANR	3059606	Identifier	Shutdown_Graceful		3059274	0					
ANR	3059607	ArgumentList	pid		3059274	1					
ANR	3059608	Argument	pid		3059274	0					
ANR	3059609	Identifier	pid		3059274	0					
ANR	3059610	CompoundStatement		86:33:2700:2700	3059274	1					
ANR	3059611	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5774:5:175232:175280	3059274	0	True				
ANR	3059612	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		3059274	0					
ANR	3059613	Callee	msg -> deliveryStatus		3059274	0					
ANR	3059614	PtrMemberAccess	msg -> deliveryStatus		3059274	0					
ANR	3059615	Identifier	msg		3059274	0					
ANR	3059616	Identifier	deliveryStatus		3059274	1					
ANR	3059617	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		3059274	1					
ANR	3059618	Argument	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059619	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059620	ReturnStatement	return ;	5776:4:175292:175298	3059274	1	True				
ANR	3059621	BreakStatement	break ;	5778:3:175308:175313	3059274	14	True				
ANR	3059622	Label	default :	5780:2:175324:175331	3059274	15	True				
ANR	3059623	Identifier	default		3059274	0					
ANR	3059624	CompoundStatement		95:3:2827:2848	3059274	16					
ANR	3059625	IdentifierDeclStatement	bool use_kill = false ;	5782:3:175352:175373	3059274	0	True				
ANR	3059626	IdentifierDecl	use_kill = false		3059274	0					
ANR	3059627	IdentifierDeclType	bool		3059274	0					
ANR	3059628	Identifier	use_kill		3059274	1					
ANR	3059629	AssignmentExpression	use_kill = false		3059274	2		=			
ANR	3059630	Identifier	false		3059274	0					
ANR	3059631	Identifier	false		3059274	1					
ANR	3059632	IfStatement	if ( pid == mypid )		3059274	1					
ANR	3059633	Condition	pid == mypid	5783:7:175382:175393	3059274	0	True				
ANR	3059634	EqualityExpression	pid == mypid		3059274	0		==			
ANR	3059635	Identifier	pid		3059274	0					
ANR	3059636	Identifier	mypid		3059274	1					
ANR	3059637	CompoundStatement		96:22:2872:2872	3059274	1					
ANR	3059638	ExpressionStatement	use_kill = false	5787:4:175554:175570	3059274	0	True				
ANR	3059639	AssignmentExpression	use_kill = false		3059274	0		=			
ANR	3059640	Identifier	use_kill		3059274	0					
ANR	3059641	Identifier	false		3059274	1					
ANR	3059642	ElseStatement	else		3059274	0					
ANR	3059643	IfStatement	if ( target_has_dcpm == FALSE )		3059274	0					
ANR	3059644	Condition	target_has_dcpm == FALSE	5789:12:175589:175612	3059274	0	True				
ANR	3059645	EqualityExpression	target_has_dcpm == FALSE		3059274	0		==			
ANR	3059646	Identifier	target_has_dcpm		3059274	0					
ANR	3059647	Identifier	FALSE		3059274	1					
ANR	3059648	CompoundStatement		102:39:3091:3091	3059274	1					
ANR	3059649	ExpressionStatement	use_kill = true	5790:4:175622:175637	3059274	0	True				
ANR	3059650	AssignmentExpression	use_kill = true		3059274	0		=			
ANR	3059651	Identifier	use_kill		3059274	0					
ANR	3059652	Identifier	true		3059274	1					
ANR	3059653	ElseStatement	else		3059274	0					
ANR	3059654	IfStatement	if ( target_has_dcpm == TRUE && ( sig == SIGUSR1 || sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP ) )		3059274	0					
ANR	3059655	Condition	target_has_dcpm == TRUE && ( sig == SIGUSR1 || sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP )	5792:12:175656:175794	3059274	0	True				
ANR	3059656	AndExpression	target_has_dcpm == TRUE && ( sig == SIGUSR1 || sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP )		3059274	0		&&			
ANR	3059657	EqualityExpression	target_has_dcpm == TRUE		3059274	0		==			
ANR	3059658	Identifier	target_has_dcpm		3059274	0					
ANR	3059659	Identifier	TRUE		3059274	1					
ANR	3059660	OrExpression	sig == SIGUSR1 || sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP		3059274	1		||			
ANR	3059661	EqualityExpression	sig == SIGUSR1		3059274	0		==			
ANR	3059662	Identifier	sig		3059274	0					
ANR	3059663	Identifier	SIGUSR1		3059274	1					
ANR	3059664	OrExpression	sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP		3059274	1		||			
ANR	3059665	EqualityExpression	sig == SIGUSR2		3059274	0		==			
ANR	3059666	Identifier	sig		3059274	0					
ANR	3059667	Identifier	SIGUSR2		3059274	1					
ANR	3059668	OrExpression	sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP		3059274	1		||			
ANR	3059669	EqualityExpression	sig == SIGQUIT		3059274	0		==			
ANR	3059670	Identifier	sig		3059274	0					
ANR	3059671	Identifier	SIGQUIT		3059274	1					
ANR	3059672	OrExpression	sig == SIGTERM || sig == SIGHUP		3059274	1		||			
ANR	3059673	EqualityExpression	sig == SIGTERM		3059274	0		==			
ANR	3059674	Identifier	sig		3059274	0					
ANR	3059675	Identifier	SIGTERM		3059274	1					
ANR	3059676	EqualityExpression	sig == SIGHUP		3059274	1		==			
ANR	3059677	Identifier	sig		3059274	0					
ANR	3059678	Identifier	SIGHUP		3059274	1					
ANR	3059679	CompoundStatement		108:3:3276:3276	3059274	1					
ANR	3059680	ExpressionStatement	use_kill = true	5805:4:176197:176212	3059274	0	True				
ANR	3059681	AssignmentExpression	use_kill = true		3059274	0		=			
ANR	3059682	Identifier	use_kill		3059274	0					
ANR	3059683	Identifier	true		3059274	1					
ANR	3059684	IfStatement	if ( use_kill )		3059274	2					
ANR	3059685	Condition	use_kill	5808:8:176228:176235	3059274	0	True				
ANR	3059686	Identifier	use_kill		3059274	0					
ANR	3059687	CompoundStatement		126:4:3877:3910	3059274	1					
ANR	3059688	IdentifierDeclStatement	const char * tmp = signalName ( sig ) ;	5809:4:176245:176278	3059274	0	True				
ANR	3059689	IdentifierDecl	* tmp = signalName ( sig )		3059274	0					
ANR	3059690	IdentifierDeclType	const char *		3059274	0					
ANR	3059691	Identifier	tmp		3059274	1					
ANR	3059692	AssignmentExpression	* tmp = signalName ( sig )		3059274	2		=			
ANR	3059693	Identifier	tmp		3059274	0					
ANR	3059694	CallExpression	signalName ( sig )		3059274	1					
ANR	3059695	Callee	signalName		3059274	0					
ANR	3059696	Identifier	signalName		3059274	0					
ANR	3059697	ArgumentList	sig		3059274	1					
ANR	3059698	Argument	sig		3059274	0					
ANR	3059699	Identifier	sig		3059274	0					
ANR	3059700	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Send_Signal(): Doing kill(%d,%d) [%s]\\n"" , pid , sig , tmp ? tmp : ""Unknown"" )"	5810:4:176284:176396	3059274	1	True				
ANR	3059701	CallExpression	"dprintf ( D_FULLDEBUG , ""Send_Signal(): Doing kill(%d,%d) [%s]\\n"" , pid , sig , tmp ? tmp : ""Unknown"" )"		3059274	0					
ANR	3059702	Callee	dprintf		3059274	0					
ANR	3059703	Identifier	dprintf		3059274	0					
ANR	3059704	ArgumentList	D_FULLDEBUG		3059274	1					
ANR	3059705	Argument	D_FULLDEBUG		3059274	0					
ANR	3059706	Identifier	D_FULLDEBUG		3059274	0					
ANR	3059707	Argument	"""Send_Signal(): Doing kill(%d,%d) [%s]\\n"""		3059274	1					
ANR	3059708	PrimaryExpression	"""Send_Signal(): Doing kill(%d,%d) [%s]\\n"""		3059274	0					
ANR	3059709	Argument	pid		3059274	2					
ANR	3059710	Identifier	pid		3059274	0					
ANR	3059711	Argument	sig		3059274	3					
ANR	3059712	Identifier	sig		3059274	0					
ANR	3059713	Argument	"tmp ? tmp : ""Unknown"""		3059274	4					
ANR	3059714	ConditionalExpression	"tmp ? tmp : ""Unknown"""		3059274	0					
ANR	3059715	Condition	tmp		3059274	0					
ANR	3059716	Identifier	tmp		3059274	0					
ANR	3059717	Identifier	tmp		3059274	1					
ANR	3059718	PrimaryExpression	"""Unknown"""		3059274	2					
ANR	3059719	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	5813:4:176402:176435	3059274	2	True				
ANR	3059720	IdentifierDecl	priv = set_root_priv ( )		3059274	0					
ANR	3059721	IdentifierDeclType	priv_state		3059274	0					
ANR	3059722	Identifier	priv		3059274	1					
ANR	3059723	AssignmentExpression	priv = set_root_priv ( )		3059274	2		=			
ANR	3059724	Identifier	priv		3059274	0					
ANR	3059725	CallExpression	set_root_priv ( )		3059274	1					
ANR	3059726	Callee	set_root_priv		3059274	0					
ANR	3059727	Identifier	set_root_priv		3059274	0					
ANR	3059728	ArgumentList			3059274	1					
ANR	3059729	Statement	int	5814:4:176441:176443	3059274	3	True				
ANR	3059730	Statement	status	5814:8:176445:176450	3059274	4	True				
ANR	3059731	Statement	=	5814:15:176452:176452	3059274	5	True				
ANR	3059732	Statement	::	5814:17:176454:176455	3059274	6	True				
ANR	3059733	ExpressionStatement	"kill ( pid , sig )"	5814:19:176456:176470	3059274	7	True				
ANR	3059734	CallExpression	"kill ( pid , sig )"		3059274	0					
ANR	3059735	Callee	kill		3059274	0					
ANR	3059736	Identifier	kill		3059274	0					
ANR	3059737	ArgumentList	pid		3059274	1					
ANR	3059738	Argument	pid		3059274	0					
ANR	3059739	Identifier	pid		3059274	0					
ANR	3059740	Argument	sig		3059274	1					
ANR	3059741	Identifier	sig		3059274	0					
ANR	3059742	ExpressionStatement	set_priv ( priv )	5815:4:176476:176490	3059274	8	True				
ANR	3059743	CallExpression	set_priv ( priv )		3059274	0					
ANR	3059744	Callee	set_priv		3059274	0					
ANR	3059745	Identifier	set_priv		3059274	0					
ANR	3059746	ArgumentList	priv		3059274	1					
ANR	3059747	Argument	priv		3059274	0					
ANR	3059748	Identifier	priv		3059274	0					
ANR	3059749	IfStatement	if ( status >= 0 )		3059274	9					
ANR	3059750	Condition	status >= 0	5817:8:176546:176556	3059274	0	True				
ANR	3059751	RelationalExpression	status >= 0		3059274	0		>=			
ANR	3059752	Identifier	status		3059274	0					
ANR	3059753	PrimaryExpression	0		3059274	1					
ANR	3059754	CompoundStatement		130:21:4034:4034	3059274	1					
ANR	3059755	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5818:5:176566:176614	3059274	0	True				
ANR	3059756	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		3059274	0					
ANR	3059757	Callee	msg -> deliveryStatus		3059274	0					
ANR	3059758	PtrMemberAccess	msg -> deliveryStatus		3059274	0					
ANR	3059759	Identifier	msg		3059274	0					
ANR	3059760	Identifier	deliveryStatus		3059274	1					
ANR	3059761	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		3059274	1					
ANR	3059762	Argument	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059763	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059764	ElseStatement	else		3059274	0					
ANR	3059765	IfStatement	if ( target_has_dcpm == TRUE )		3059274	0					
ANR	3059766	Condition	target_has_dcpm == TRUE	5820:13:176635:176657	3059274	0	True				
ANR	3059767	EqualityExpression	target_has_dcpm == TRUE		3059274	0		==			
ANR	3059768	Identifier	target_has_dcpm		3059274	0					
ANR	3059769	Identifier	TRUE		3059274	1					
ANR	3059770	CompoundStatement		133:39:4136:4136	3059274	1					
ANR	3059771	ExpressionStatement	"dprintf ( D_ALWAYS , ""Send_Signal error: kill(%d,%d) failed: errno=%d %s\\n"" , pid , sig , errno , strerror ( errno ) )"	5822:5:176721:176831	3059274	0	True				
ANR	3059772	CallExpression	"dprintf ( D_ALWAYS , ""Send_Signal error: kill(%d,%d) failed: errno=%d %s\\n"" , pid , sig , errno , strerror ( errno ) )"		3059274	0					
ANR	3059773	Callee	dprintf		3059274	0					
ANR	3059774	Identifier	dprintf		3059274	0					
ANR	3059775	ArgumentList	D_ALWAYS		3059274	1					
ANR	3059776	Argument	D_ALWAYS		3059274	0					
ANR	3059777	Identifier	D_ALWAYS		3059274	0					
ANR	3059778	Argument	"""Send_Signal error: kill(%d,%d) failed: errno=%d %s\\n"""		3059274	1					
ANR	3059779	PrimaryExpression	"""Send_Signal error: kill(%d,%d) failed: errno=%d %s\\n"""		3059274	0					
ANR	3059780	Argument	pid		3059274	2					
ANR	3059781	Identifier	pid		3059274	0					
ANR	3059782	Argument	sig		3059274	3					
ANR	3059783	Identifier	sig		3059274	0					
ANR	3059784	Argument	errno		3059274	4					
ANR	3059785	Identifier	errno		3059274	0					
ANR	3059786	Argument	strerror ( errno )		3059274	5					
ANR	3059787	CallExpression	strerror ( errno )		3059274	0					
ANR	3059788	Callee	strerror		3059274	0					
ANR	3059789	Identifier	strerror		3059274	0					
ANR	3059790	ArgumentList	errno		3059274	1					
ANR	3059791	Argument	errno		3059274	0					
ANR	3059792	Identifier	errno		3059274	0					
ANR	3059793	BreakStatement	break ;	5824:5:176838:176843	3059274	1	True				
ANR	3059794	ReturnStatement	return ;	5826:4:176855:176861	3059274	10	True				
ANR	3059795	BreakStatement	break ;	5829:3:176900:176905	3059274	3	True				
ANR	3059796	Statement	if	5842:1:177354:177355	3059274	12	True				
ANR	3059797	Statement	(	5842:4:177357:177357	3059274	13	True				
ANR	3059798	Statement	dcmainThreadId	5842:6:177359:177372	3059274	14	True				
ANR	3059799	Statement	==	5842:21:177374:177375	3059274	15	True				
ANR	3059800	Statement	::	5842:24:177377:177378	3059274	16	True				
ANR	3059801	Statement	GetCurrentThreadId	5842:26:177379:177396	3059274	17	True				
ANR	3059802	Statement	(	5842:44:177397:177397	3059274	18	True				
ANR	3059803	Statement	)	5842:45:177398:177398	3059274	19	True				
ANR	3059804	Statement	)	5842:47:177400:177400	3059274	20	True				
ANR	3059805	ExpressionStatement	same_thread = TRUE	5843:2:177404:177422	3059274	21	True				
ANR	3059806	AssignmentExpression	same_thread = TRUE		3059274	0		=			
ANR	3059807	Identifier	same_thread		3059274	0					
ANR	3059808	Identifier	TRUE		3059274	1					
ANR	3059809	IfStatement	if ( pid == mypid )		3059274	22					
ANR	3059810	Condition	pid == mypid	5852:6:177620:177631	3059274	0	True				
ANR	3059811	EqualityExpression	pid == mypid		3059274	0		==			
ANR	3059812	Identifier	pid		3059274	0					
ANR	3059813	Identifier	mypid		3059274	1					
ANR	3059814	CompoundStatement		165:21:5110:5110	3059274	1					
ANR	3059815	IfStatement	if ( same_thread == TRUE )		3059274	0					
ANR	3059816	Condition	same_thread == TRUE	5853:7:177644:177662	3059274	0	True				
ANR	3059817	EqualityExpression	same_thread == TRUE		3059274	0		==			
ANR	3059818	Identifier	same_thread		3059274	0					
ANR	3059819	Identifier	TRUE		3059274	1					
ANR	3059820	CompoundStatement		166:29:5141:5141	3059274	1					
ANR	3059821	ExpressionStatement	"HandleSig ( _DC_RAISESIGNAL , sig )"	5856:3:177789:177819	3059274	0	True				
ANR	3059822	CallExpression	"HandleSig ( _DC_RAISESIGNAL , sig )"		3059274	0					
ANR	3059823	Callee	HandleSig		3059274	0					
ANR	3059824	Identifier	HandleSig		3059274	0					
ANR	3059825	ArgumentList	_DC_RAISESIGNAL		3059274	1					
ANR	3059826	Argument	_DC_RAISESIGNAL		3059274	0					
ANR	3059827	Identifier	_DC_RAISESIGNAL		3059274	0					
ANR	3059828	Argument	sig		3059274	1					
ANR	3059829	Identifier	sig		3059274	0					
ANR	3059830	ExpressionStatement	sent_signal = TRUE	5857:3:177824:177842	3059274	1	True				
ANR	3059831	AssignmentExpression	sent_signal = TRUE		3059274	0		=			
ANR	3059832	Identifier	sent_signal		3059274	0					
ANR	3059833	Identifier	TRUE		3059274	1					
ANR	3059834	IfStatement	if ( async_sigs_unblocked == TRUE )		3059274	2					
ANR	3059835	Condition	async_sigs_unblocked == TRUE	5864:8:178175:178202	3059274	0	True				
ANR	3059836	EqualityExpression	async_sigs_unblocked == TRUE		3059274	0		==			
ANR	3059837	Identifier	async_sigs_unblocked		3059274	0					
ANR	3059838	Identifier	TRUE		3059274	1					
ANR	3059839	CompoundStatement		177:39:5681:5681	3059274	1					
ANR	3059840	ExpressionStatement	"write ( async_pipe [ 1 ] , ""!"" , 1 )"	5865:4:178212:178238	3059274	0	True				
ANR	3059841	CallExpression	"write ( async_pipe [ 1 ] , ""!"" , 1 )"		3059274	0					
ANR	3059842	Callee	write		3059274	0					
ANR	3059843	Identifier	write		3059274	0					
ANR	3059844	ArgumentList	async_pipe [ 1 ]		3059274	1					
ANR	3059845	Argument	async_pipe [ 1 ]		3059274	0					
ANR	3059846	ArrayIndexing	async_pipe [ 1 ]		3059274	0					
ANR	3059847	Identifier	async_pipe		3059274	0					
ANR	3059848	PrimaryExpression	1		3059274	1					
ANR	3059849	Argument	"""!"""		3059274	1					
ANR	3059850	PrimaryExpression	"""!"""		3059274	0					
ANR	3059851	Argument	1		3059274	2					
ANR	3059852	PrimaryExpression	1		3059274	0					
ANR	3059853	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5868:3:178255:178303	3059274	3	True				
ANR	3059854	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		3059274	0					
ANR	3059855	Callee	msg -> deliveryStatus		3059274	0					
ANR	3059856	PtrMemberAccess	msg -> deliveryStatus		3059274	0					
ANR	3059857	Identifier	msg		3059274	0					
ANR	3059858	Identifier	deliveryStatus		3059274	1					
ANR	3059859	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		3059274	1					
ANR	3059860	Argument	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059861	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3059274	0					
ANR	3059862	ReturnStatement	return ;	5869:3:178308:178314	3059274	4	True				
ANR	3059863	ElseStatement	else		3059274	0					
ANR	3059864	CompoundStatement		183:9:5800:5800	3059274	0					
ANR	3059865	ExpressionStatement	destination = InfoCommandSinfulString ( )	5874:3:178470:178509	3059274	0	True				
ANR	3059866	AssignmentExpression	destination = InfoCommandSinfulString ( )		3059274	0		=			
ANR	3059867	Identifier	destination		3059274	0					
ANR	3059868	CallExpression	InfoCommandSinfulString ( )		3059274	1					
ANR	3059869	Callee	InfoCommandSinfulString		3059274	0					
ANR	3059870	Identifier	InfoCommandSinfulString		3059274	0					
ANR	3059871	ArgumentList			3059274	1					
ANR	3059872	ExpressionStatement	is_local = TRUE	5875:3:178514:178529	3059274	1	True				
ANR	3059873	AssignmentExpression	is_local = TRUE		3059274	0		=			
ANR	3059874	Identifier	is_local		3059274	0					
ANR	3059875	Identifier	TRUE		3059274	1					
ANR	3059876	IfStatement	if ( pid != mypid )		3059274	23					
ANR	3059877	Condition	pid != mypid	5880:6:178613:178624	3059274	0	True				
ANR	3059878	EqualityExpression	pid != mypid		3059274	0		!=			
ANR	3059879	Identifier	pid		3059274	0					
ANR	3059880	Identifier	mypid		3059274	1					
ANR	3059881	CompoundStatement		193:21:6103:6103	3059274	1					
ANR	3059882	IfStatement	if ( target_has_dcpm == FALSE || pidinfo == NULL )		3059274	0					
ANR	3059883	Condition	target_has_dcpm == FALSE || pidinfo == NULL	5881:7:178637:178679	3059274	0	True				
ANR	3059884	OrExpression	target_has_dcpm == FALSE || pidinfo == NULL		3059274	0		||			
ANR	3059885	EqualityExpression	target_has_dcpm == FALSE		3059274	0		==			
ANR	3059886	Identifier	target_has_dcpm		3059274	0					
ANR	3059887	Identifier	FALSE		3059274	1					
ANR	3059888	EqualityExpression	pidinfo == NULL		3059274	1		==			
ANR	3059889	Identifier	pidinfo		3059274	0					
ANR	3059890	Identifier	NULL		3059274	1					
ANR	3059891	CompoundStatement		194:52:6157:6157	3059274	1					
ANR	3059892	ExpressionStatement	"dprintf ( D_ALWAYS , ""Send_Signal: ERROR Attempt to send signal %d to pid %d, but pid %d has no command socket\\n"" , sig , pid , pid )"	5883:3:178743:178875	3059274	0	True				
ANR	3059893	CallExpression	"dprintf ( D_ALWAYS , ""Send_Signal: ERROR Attempt to send signal %d to pid %d, but pid %d has no command socket\\n"" , sig , pid , pid )"		3059274	0					
ANR	3059894	Callee	dprintf		3059274	0					
ANR	3059895	Identifier	dprintf		3059274	0					
ANR	3059896	ArgumentList	D_ALWAYS		3059274	1					
ANR	3059897	Argument	D_ALWAYS		3059274	0					
ANR	3059898	Identifier	D_ALWAYS		3059274	0					
ANR	3059899	Argument	"""Send_Signal: ERROR Attempt to send signal %d to pid %d, but pid %d has no command socket\\n"""		3059274	1					
ANR	3059900	PrimaryExpression	"""Send_Signal: ERROR Attempt to send signal %d to pid %d, but pid %d has no command socket\\n"""		3059274	0					
ANR	3059901	Argument	sig		3059274	2					
ANR	3059902	Identifier	sig		3059274	0					
ANR	3059903	Argument	pid		3059274	3					
ANR	3059904	Identifier	pid		3059274	0					
ANR	3059905	Argument	pid		3059274	4					
ANR	3059906	Identifier	pid		3059274	0					
ANR	3059907	ReturnStatement	return ;	5886:3:178880:178886	3059274	1	True				
ANR	3059908	ExpressionStatement	is_local = pidinfo -> is_local	5889:2:178895:178923	3059274	1	True				
ANR	3059909	AssignmentExpression	is_local = pidinfo -> is_local		3059274	0		=			
ANR	3059910	Identifier	is_local		3059274	0					
ANR	3059911	PtrMemberAccess	pidinfo -> is_local		3059274	1					
ANR	3059912	Identifier	pidinfo		3059274	0					
ANR	3059913	Identifier	is_local		3059274	1					
ANR	3059914	ExpressionStatement	destination = pidinfo -> sinful_string . Value ( )	5890:2:178927:178971	3059274	2	True				
ANR	3059915	AssignmentExpression	destination = pidinfo -> sinful_string . Value ( )		3059274	0		=			
ANR	3059916	Identifier	destination		3059274	0					
ANR	3059917	CallExpression	pidinfo -> sinful_string . Value ( )		3059274	1					
ANR	3059918	Callee	pidinfo -> sinful_string . Value		3059274	0					
ANR	3059919	MemberAccess	pidinfo -> sinful_string . Value		3059274	0					
ANR	3059920	PtrMemberAccess	pidinfo -> sinful_string		3059274	0					
ANR	3059921	Identifier	pidinfo		3059274	0					
ANR	3059922	Identifier	sinful_string		3059274	1					
ANR	3059923	Identifier	Value		3059274	1					
ANR	3059924	ArgumentList			3059274	1					
ANR	3059925	IdentifierDeclStatement	"classy_counted_ptr < Daemon > d = new Daemon ( DT_ANY , destination ) ;"	5893:1:178978:179042	3059274	24	True				
ANR	3059926	IdentifierDecl	"d = new Daemon ( DT_ANY , destination )"		3059274	0					
ANR	3059927	IdentifierDeclType	classy_counted_ptr < Daemon >		3059274	0					
ANR	3059928	Identifier	d		3059274	1					
ANR	3059929	AssignmentExpression	"d = new Daemon ( DT_ANY , destination )"		3059274	2		=			
ANR	3059930	Identifier	d		3059274	0					
ANR	3059931	Expression	"DT_ANY , destination"		3059274	1					
ANR	3059932	Identifier	DT_ANY		3059274	0					
ANR	3059933	Identifier	destination		3059274	1					
ANR	3059934	IfStatement	if ( is_local == TRUE && d -> hasUDPCommandPort ( ) )		3059274	25					
ANR	3059935	Condition	is_local == TRUE && d -> hasUDPCommandPort ( )	5896:6:179127:179168	3059274	0	True				
ANR	3059936	AndExpression	is_local == TRUE && d -> hasUDPCommandPort ( )		3059274	0		&&			
ANR	3059937	EqualityExpression	is_local == TRUE		3059274	0		==			
ANR	3059938	Identifier	is_local		3059274	0					
ANR	3059939	Identifier	TRUE		3059274	1					
ANR	3059940	CallExpression	d -> hasUDPCommandPort ( )		3059274	1					
ANR	3059941	Callee	d -> hasUDPCommandPort		3059274	0					
ANR	3059942	PtrMemberAccess	d -> hasUDPCommandPort		3059274	0					
ANR	3059943	Identifier	d		3059274	0					
ANR	3059944	Identifier	hasUDPCommandPort		3059274	1					
ANR	3059945	ArgumentList			3059274	1					
ANR	3059946	CompoundStatement		209:50:6646:6646	3059274	1					
ANR	3059947	ExpressionStatement	msg -> setStreamType ( Stream :: safe_sock )	5897:2:179175:179212	3059274	0	True				
ANR	3059948	CallExpression	msg -> setStreamType ( Stream :: safe_sock )		3059274	0					
ANR	3059949	Callee	msg -> setStreamType		3059274	0					
ANR	3059950	PtrMemberAccess	msg -> setStreamType		3059274	0					
ANR	3059951	Identifier	msg		3059274	0					
ANR	3059952	Identifier	setStreamType		3059274	1					
ANR	3059953	ArgumentList	Stream :: safe_sock		3059274	1					
ANR	3059954	Argument	Stream :: safe_sock		3059274	0					
ANR	3059955	Identifier	Stream :: safe_sock		3059274	0					
ANR	3059956	IfStatement	if ( ! nonblocking )		3059274	1					
ANR	3059957	Condition	! nonblocking	5898:6:179220:179231	3059274	0	True				
ANR	3059958	UnaryOperationExpression	! nonblocking		3059274	0					
ANR	3059959	UnaryOperator	!		3059274	0					
ANR	3059960	Identifier	nonblocking		3059274	1					
ANR	3059961	ExpressionStatement	msg -> setTimeout ( 3 )	5898:21:179235:179253	3059274	1	True				
ANR	3059962	CallExpression	msg -> setTimeout ( 3 )		3059274	0					
ANR	3059963	Callee	msg -> setTimeout		3059274	0					
ANR	3059964	PtrMemberAccess	msg -> setTimeout		3059274	0					
ANR	3059965	Identifier	msg		3059274	0					
ANR	3059966	Identifier	setTimeout		3059274	1					
ANR	3059967	ArgumentList	3		3059274	1					
ANR	3059968	Argument	3		3059274	0					
ANR	3059969	PrimaryExpression	3		3059274	0					
ANR	3059970	ElseStatement	else		3059274	0					
ANR	3059971	CompoundStatement		213:6:6739:6739	3059274	0					
ANR	3059972	ExpressionStatement	msg -> setStreamType ( Stream :: reli_sock )	5901:2:179268:179305	3059274	0	True				
ANR	3059973	CallExpression	msg -> setStreamType ( Stream :: reli_sock )		3059274	0					
ANR	3059974	Callee	msg -> setStreamType		3059274	0					
ANR	3059975	PtrMemberAccess	msg -> setStreamType		3059274	0					
ANR	3059976	Identifier	msg		3059274	0					
ANR	3059977	Identifier	setStreamType		3059274	1					
ANR	3059978	ArgumentList	Stream :: reli_sock		3059274	1					
ANR	3059979	Argument	Stream :: reli_sock		3059274	0					
ANR	3059980	Identifier	Stream :: reli_sock		3059274	0					
ANR	3059981	IfStatement	if ( pidinfo && pidinfo -> child_session_id )		3059274	26					
ANR	3059982	Condition	pidinfo && pidinfo -> child_session_id	5903:5:179315:179350	3059274	0	True				
ANR	3059983	AndExpression	pidinfo && pidinfo -> child_session_id		3059274	0		&&			
ANR	3059984	Identifier	pidinfo		3059274	0					
ANR	3059985	PtrMemberAccess	pidinfo -> child_session_id		3059274	1					
ANR	3059986	Identifier	pidinfo		3059274	0					
ANR	3059987	Identifier	child_session_id		3059274	1					
ANR	3059988	CompoundStatement		217:1:6829:6829	3059274	1					
ANR	3059989	ExpressionStatement	msg -> setSecSessionId ( pidinfo -> child_session_id )	5905:2:179358:179405	3059274	0	True				
ANR	3059990	CallExpression	msg -> setSecSessionId ( pidinfo -> child_session_id )		3059274	0					
ANR	3059991	Callee	msg -> setSecSessionId		3059274	0					
ANR	3059992	PtrMemberAccess	msg -> setSecSessionId		3059274	0					
ANR	3059993	Identifier	msg		3059274	0					
ANR	3059994	Identifier	setSecSessionId		3059274	1					
ANR	3059995	ArgumentList	pidinfo -> child_session_id		3059274	1					
ANR	3059996	Argument	pidinfo -> child_session_id		3059274	0					
ANR	3059997	PtrMemberAccess	pidinfo -> child_session_id		3059274	0					
ANR	3059998	Identifier	pidinfo		3059274	0					
ANR	3059999	Identifier	child_session_id		3059274	1					
ANR	3060000	ExpressionStatement	msg -> messengerDelivery ( true )	5907:1:179411:179441	3059274	27	True				
ANR	3060001	CallExpression	msg -> messengerDelivery ( true )		3059274	0					
ANR	3060002	Callee	msg -> messengerDelivery		3059274	0					
ANR	3060003	PtrMemberAccess	msg -> messengerDelivery		3059274	0					
ANR	3060004	Identifier	msg		3059274	0					
ANR	3060005	Identifier	messengerDelivery		3059274	1					
ANR	3060006	ArgumentList	true		3059274	1					
ANR	3060007	Argument	true		3059274	0					
ANR	3060008	Identifier	true		3059274	0					
ANR	3060009	IfStatement	if ( nonblocking )		3059274	28					
ANR	3060010	Condition	nonblocking	5908:5:179486:179496	3059274	0	True				
ANR	3060011	Identifier	nonblocking		3059274	0					
ANR	3060012	CompoundStatement		221:19:6975:6975	3059274	1					
ANR	3060013	ExpressionStatement	d -> sendMsg ( msg . get ( ) )	5909:2:179504:179527	3059274	0	True				
ANR	3060014	CallExpression	d -> sendMsg ( msg . get ( ) )		3059274	0					
ANR	3060015	Callee	d -> sendMsg		3059274	0					
ANR	3060016	PtrMemberAccess	d -> sendMsg		3059274	0					
ANR	3060017	Identifier	d		3059274	0					
ANR	3060018	Identifier	sendMsg		3059274	1					
ANR	3060019	ArgumentList	msg . get ( )		3059274	1					
ANR	3060020	Argument	msg . get ( )		3059274	0					
ANR	3060021	CallExpression	msg . get ( )		3059274	0					
ANR	3060022	Callee	msg . get		3059274	0					
ANR	3060023	MemberAccess	msg . get		3059274	0					
ANR	3060024	Identifier	msg		3059274	0					
ANR	3060025	Identifier	get		3059274	1					
ANR	3060026	ArgumentList			3059274	1					
ANR	3060027	ElseStatement	else		3059274	0					
ANR	3060028	CompoundStatement		224:6:7013:7013	3059274	0					
ANR	3060029	ExpressionStatement	d -> sendBlockingMsg ( msg . get ( ) )	5912:2:179542:179573	3059274	0	True				
ANR	3060030	CallExpression	d -> sendBlockingMsg ( msg . get ( ) )		3059274	0					
ANR	3060031	Callee	d -> sendBlockingMsg		3059274	0					
ANR	3060032	PtrMemberAccess	d -> sendBlockingMsg		3059274	0					
ANR	3060033	Identifier	d		3059274	0					
ANR	3060034	Identifier	sendBlockingMsg		3059274	1					
ANR	3060035	ArgumentList	msg . get ( )		3059274	1					
ANR	3060036	Argument	msg . get ( )		3059274	0					
ANR	3060037	CallExpression	msg . get ( )		3059274	0					
ANR	3060038	Callee	msg . get		3059274	0					
ANR	3060039	MemberAccess	msg . get		3059274	0					
ANR	3060040	Identifier	msg		3059274	0					
ANR	3060041	Identifier	get		3059274	1					
ANR	3060042	ArgumentList			3059274	1					
ANR	3060043	ReturnType	void		3059274	1					
ANR	3060044	Identifier	DaemonCore :: Send_Signal		3059274	2					
ANR	3060045	ParameterList	"classy_counted_ptr < DCSignalMsg > msg , bool nonblocking"		3059274	3					
ANR	3060046	Parameter	classy_counted_ptr < DCSignalMsg > msg	5687:29:172469:172503	3059274	0	True				
ANR	3060047	ParameterType	classy_counted_ptr < DCSignalMsg >		3059274	0					
ANR	3060048	Identifier	msg		3059274	1					
ANR	3060049	Parameter	bool nonblocking	5687:66:172506:172521	3059274	1	True				
ANR	3060050	ParameterType	bool		3059274	0					
ANR	3060051	Identifier	nonblocking		3059274	1					
ANR	3060052	CFGEntryNode	ENTRY		3059274		True				
ANR	3060053	CFGExitNode	EXIT		3059274		True				
ANR	3060054	Symbol	msg		3059274						
ANR	3060055	Symbol	Stream :: safe_sock		3059274						
ANR	3060056	Symbol	msg -> theSignal		3059274						
ANR	3060057	Symbol	pid		3059274						
ANR	3060058	Symbol	use_kill		3059274						
ANR	3060059	Symbol	pidTable -> lookup		3059274						
ANR	3060060	Symbol	tmp		3059274						
ANR	3060061	Symbol	Stream :: reli_sock		3059274						
ANR	3060062	Symbol	msg . get		3059274						
ANR	3060063	Symbol	priv		3059274						
ANR	3060064	Symbol	is_local		3059274						
ANR	3060065	Symbol	_DC_RAISESIGNAL		3059274						
ANR	3060066	Symbol	* pidinfo -> sinful_string		3059274						
ANR	3060067	Symbol	pidinfo		3059274						
ANR	3060068	Symbol	async_sigs_unblocked		3059274						
ANR	3060069	Symbol	errno		3059274						
ANR	3060070	Symbol	NULL		3059274						
ANR	3060071	Symbol	target_has_dcpm		3059274						
ANR	3060072	Symbol	SIGUSR2		3059274						
ANR	3060073	Symbol	TRUE		3059274						
ANR	3060074	Symbol	SIGUSR1		3059274						
ANR	3060075	Symbol	param_boolean		3059274						
ANR	3060076	Symbol	D_FULLDEBUG		3059274						
ANR	3060077	Symbol	strerror		3059274						
ANR	3060078	Symbol	msg -> thePid		3059274						
ANR	3060079	Symbol	DCMsg :: DELIVERY_SUCCEEDED		3059274						
ANR	3060080	Symbol	Shutdown_Graceful		3059274						
ANR	3060081	Symbol	true		3059274						
ANR	3060082	Symbol	* pidinfo		3059274						
ANR	3060083	Symbol	status		3059274						
ANR	3060084	Symbol	* async_pipe		3059274						
ANR	3060085	Symbol	Shutdown_Fast		3059274						
ANR	3060086	Symbol	Suspend_Process		3059274						
ANR	3060087	Symbol	pidinfo -> sinful_string . Value		3059274						
ANR	3060088	Symbol	SIGQUIT		3059274						
ANR	3060089	Symbol	* pidTable		3059274						
ANR	3060090	Symbol	destination		3059274						
ANR	3060091	Symbol	DT_ANY		3059274						
ANR	3060092	Symbol	InfoCommandSinfulString		3059274						
ANR	3060093	Symbol	sig		3059274						
ANR	3060094	Symbol	Continue_Process		3059274						
ANR	3060095	Symbol	same_thread		3059274						
ANR	3060096	Symbol	d -> hasUDPCommandPort		3059274						
ANR	3060097	Symbol	m_proc_family		3059274						
ANR	3060098	Symbol	SIGHUP		3059274						
ANR	3060099	Symbol	SIGTERM		3059274						
ANR	3060100	Symbol	ok		3059274						
ANR	3060101	Symbol	async_pipe		3059274						
ANR	3060102	Symbol	* m_proc_family		3059274						
ANR	3060103	Symbol	pidTable		3059274						
ANR	3060104	Symbol	pidinfo -> new_process_group		3059274						
ANR	3060105	Symbol	* * pidinfo		3059274						
ANR	3060106	Symbol	signalName		3059274						
ANR	3060107	Symbol	sent_signal		3059274						
ANR	3060108	Symbol	d		3059274						
ANR	3060109	Symbol	nonblocking		3059274						
ANR	3060110	Symbol	m_proc_family -> signal_process		3059274						
ANR	3060111	Symbol	mypid		3059274						
ANR	3060112	Symbol	DCMsg :: DELIVERY_FAILED		3059274						
ANR	3060113	Symbol	D_ALWAYS		3059274						
ANR	3060114	Symbol	false		3059274						
ANR	3060115	Symbol	set_root_priv		3059274						
ANR	3060116	Symbol	* msg		3059274						
ANR	3060117	Symbol	* d		3059274						
ANR	3060118	Symbol	pidinfo -> child_session_id		3059274						
ANR	3060119	Symbol	pidinfo -> is_local		3059274						
ANR	3060120	Symbol	ProcessExitedButNotReaped		3059274						
ANR	3060121	Symbol	signed_pid		3059274						
ANR	3060122	Symbol	pidinfo -> sinful_string		3059274						
ANR	3060123	Symbol	privsep_enabled		3059274						
ANR	3060124	Symbol	FALSE		3059274						
ANR	3060125	Function	DaemonCore :: Shutdown_Fast	5916:0:179581:181750							
ANR	3060126	FunctionDef	"DaemonCore :: Shutdown_Fast (pid_t pid , bool want_core)"		3060125	0					
ANR	3060127	CompoundStatement		5917:0:179639:181750	3060125	0					
ANR	3060128	ExpressionStatement	( void ) want_core	5918:1:179642:179658	3060125	0	True				
ANR	3060129	CastExpression	( void ) want_core		3060125	0					
ANR	3060130	CastTarget	void		3060125	0					
ANR	3060131	Identifier	want_core		3060125	1					
ANR	3060132	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""called DaemonCore::Shutdown_Fast(%d)\\n"" , pid )"	5920:1:179678:179747	3060125	1	True				
ANR	3060133	CallExpression	"dprintf ( D_PROCFAMILY , ""called DaemonCore::Shutdown_Fast(%d)\\n"" , pid )"		3060125	0					
ANR	3060134	Callee	dprintf		3060125	0					
ANR	3060135	Identifier	dprintf		3060125	0					
ANR	3060136	ArgumentList	D_PROCFAMILY		3060125	1					
ANR	3060137	Argument	D_PROCFAMILY		3060125	0					
ANR	3060138	Identifier	D_PROCFAMILY		3060125	0					
ANR	3060139	Argument	"""called DaemonCore::Shutdown_Fast(%d)\\n"""		3060125	1					
ANR	3060140	PrimaryExpression	"""called DaemonCore::Shutdown_Fast(%d)\\n"""		3060125	0					
ANR	3060141	Argument	pid		3060125	2					
ANR	3060142	Identifier	pid		3060125	0					
ANR	3060143	IfStatement	if ( pid == ppid )		3060125	2					
ANR	3060144	Condition	pid == ppid	5923:6:179756:179766	3060125	0	True				
ANR	3060145	EqualityExpression	pid == ppid		3060125	0		==			
ANR	3060146	Identifier	pid		3060125	0					
ANR	3060147	Identifier	ppid		3060125	1					
ANR	3060148	ReturnStatement	return FALSE ;	5924:2:179772:179784	3060125	1	True				
ANR	3060149	Identifier	FALSE		3060125	0					
ANR	3060150	ExpressionStatement	clearSession ( pid )	5927:4:179871:179888	3060125	3	True				
ANR	3060151	CallExpression	clearSession ( pid )		3060125	0					
ANR	3060152	Callee	clearSession		3060125	0					
ANR	3060153	Identifier	clearSession		3060125	0					
ANR	3060154	ArgumentList	pid		3060125	1					
ANR	3060155	Argument	pid		3060125	0					
ANR	3060156	Identifier	pid		3060125	0					
ANR	3060157	IfStatement	if ( Shutdown_Graceful ( pid ) == TRUE )		3060125	4					
ANR	3060158	Condition	Shutdown_Graceful ( pid ) == TRUE	5933:6:180077:180106	3060125	0	True				
ANR	3060159	EqualityExpression	Shutdown_Graceful ( pid ) == TRUE		3060125	0		==			
ANR	3060160	CallExpression	Shutdown_Graceful ( pid )		3060125	0					
ANR	3060161	Callee	Shutdown_Graceful		3060125	0					
ANR	3060162	Identifier	Shutdown_Graceful		3060125	0					
ANR	3060163	ArgumentList	pid		3060125	1					
ANR	3060164	Argument	pid		3060125	0					
ANR	3060165	Identifier	pid		3060125	0					
ANR	3060166	Identifier	TRUE		3060125	1					
ANR	3060167	CompoundStatement		17:39:470:470	3060125	1					
ANR	3060168	ExpressionStatement	Sleep ( 250 )	5937:2:180269:180279	3060125	0	True				
ANR	3060169	CallExpression	Sleep ( 250 )		3060125	0					
ANR	3060170	Callee	Sleep		3060125	0					
ANR	3060171	Identifier	Sleep		3060125	0					
ANR	3060172	ArgumentList	250		3060125	1					
ANR	3060173	Argument	250		3060125	0					
ANR	3060174	PrimaryExpression	250		3060125	0					
ANR	3060175	IdentifierDeclStatement	PidEntry * pidinfo ;	5940:1:180332:180349	3060125	5	True				
ANR	3060176	IdentifierDecl	* pidinfo		3060125	0					
ANR	3060177	IdentifierDeclType	PidEntry *		3060125	0					
ANR	3060178	Identifier	pidinfo		3060125	1					
ANR	3060179	IdentifierDeclStatement	HANDLE pidHandle ;	5941:1:180352:180368	3060125	6	True				
ANR	3060180	IdentifierDecl	pidHandle		3060125	0					
ANR	3060181	IdentifierDeclType	HANDLE		3060125	0					
ANR	3060182	Identifier	pidHandle		3060125	1					
ANR	3060183	IdentifierDeclStatement	bool must_free_handle = false ;	5942:1:180371:180400	3060125	7	True				
ANR	3060184	IdentifierDecl	must_free_handle = false		3060125	0					
ANR	3060185	IdentifierDeclType	bool		3060125	0					
ANR	3060186	Identifier	must_free_handle		3060125	1					
ANR	3060187	AssignmentExpression	must_free_handle = false		3060125	2		=			
ANR	3060188	Identifier	false		3060125	0					
ANR	3060189	Identifier	false		3060125	1					
ANR	3060190	IdentifierDeclStatement	int ret_value ;	5943:1:180403:180416	3060125	8	True				
ANR	3060191	IdentifierDecl	ret_value		3060125	0					
ANR	3060192	IdentifierDeclType	int		3060125	0					
ANR	3060193	Identifier	ret_value		3060125	1					
ANR	3060194	IfStatement	"if ( pidTable -> lookup ( pid , pidinfo ) < 0 )"		3060125	9					
ANR	3060195	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	5944:5:180423:180456	3060125	0	True				
ANR	3060196	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		3060125	0		<			
ANR	3060197	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		3060125	0					
ANR	3060198	Callee	pidTable -> lookup		3060125	0					
ANR	3060199	PtrMemberAccess	pidTable -> lookup		3060125	0					
ANR	3060200	Identifier	pidTable		3060125	0					
ANR	3060201	Identifier	lookup		3060125	1					
ANR	3060202	ArgumentList	pid		3060125	1					
ANR	3060203	Argument	pid		3060125	0					
ANR	3060204	Identifier	pid		3060125	0					
ANR	3060205	Argument	pidinfo		3060125	1					
ANR	3060206	Identifier	pidinfo		3060125	0					
ANR	3060207	PrimaryExpression	0		3060125	1					
ANR	3060208	CompoundStatement		28:41:819:819	3060125	1					
ANR	3060209	Statement	pidHandle	5947:2:180562:180570	3060125	0	True				
ANR	3060210	Statement	=	5947:12:180572:180572	3060125	1	True				
ANR	3060211	Statement	::	5947:14:180574:180575	3060125	2	True				
ANR	3060212	ExpressionStatement	"OpenProcess ( PROCESS_TERMINATE , FALSE , pid )"	5947:16:180576:180616	3060125	3	True				
ANR	3060213	CallExpression	"OpenProcess ( PROCESS_TERMINATE , FALSE , pid )"		3060125	0					
ANR	3060214	Callee	OpenProcess		3060125	0					
ANR	3060215	Identifier	OpenProcess		3060125	0					
ANR	3060216	ArgumentList	PROCESS_TERMINATE		3060125	1					
ANR	3060217	Argument	PROCESS_TERMINATE		3060125	0					
ANR	3060218	Identifier	PROCESS_TERMINATE		3060125	0					
ANR	3060219	Argument	FALSE		3060125	1					
ANR	3060220	Identifier	FALSE		3060125	0					
ANR	3060221	Argument	pid		3060125	2					
ANR	3060222	Identifier	pid		3060125	0					
ANR	3060223	IfStatement	if ( pidHandle == NULL )		3060125	4					
ANR	3060224	Condition	pidHandle == NULL	5948:7:180625:180641	3060125	0	True				
ANR	3060225	EqualityExpression	pidHandle == NULL		3060125	0		==			
ANR	3060226	Identifier	pidHandle		3060125	0					
ANR	3060227	Identifier	NULL		3060125	1					
ANR	3060228	CompoundStatement		32:27:1005:1005	3060125	1					
ANR	3060229	ReturnStatement	return FALSE ;	5950:3:180700:180712	3060125	0	True				
ANR	3060230	Identifier	FALSE		3060125	0					
ANR	3060231	ExpressionStatement	must_free_handle = true	5952:2:180720:180743	3060125	5	True				
ANR	3060232	AssignmentExpression	must_free_handle = true		3060125	0		=			
ANR	3060233	Identifier	must_free_handle		3060125	0					
ANR	3060234	Identifier	true		3060125	1					
ANR	3060235	ElseStatement	else		3060125	0					
ANR	3060236	CompoundStatement		37:8:1113:1113	3060125	0					
ANR	3060237	ExpressionStatement	pidHandle = pidinfo -> hProcess	5955:2:180790:180819	3060125	0	True				
ANR	3060238	AssignmentExpression	pidHandle = pidinfo -> hProcess		3060125	0		=			
ANR	3060239	Identifier	pidHandle		3060125	0					
ANR	3060240	PtrMemberAccess	pidinfo -> hProcess		3060125	1					
ANR	3060241	Identifier	pidinfo		3060125	0					
ANR	3060242	Identifier	hProcess		3060125	1					
ANR	3060243	IfStatement	if ( ( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG ) )		3060125	10					
ANR	3060244	Condition	( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG )	5958:5:180830:180886	3060125	0	True				
ANR	3060245	AndExpression	( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG )		3060125	0		&&			
ANR	3060246	BitAndExpression	DebugFlags & D_PROCFAMILY		3060125	0		&			
ANR	3060247	Identifier	DebugFlags		3060125	0					
ANR	3060248	Identifier	D_PROCFAMILY		3060125	1					
ANR	3060249	BitAndExpression	DebugFlags & D_FULLDEBUG		3060125	1		&			
ANR	3060250	Identifier	DebugFlags		3060125	0					
ANR	3060251	Identifier	D_FULLDEBUG		3060125	1					
ANR	3060252	CompoundStatement		44:3:1285:1301	3060125	1					
ANR	3060253	IdentifierDeclStatement	char check_name [ MAX_PATH ] ;	5959:3:180895:180920	3060125	0	True				
ANR	3060254	IdentifierDecl	check_name [ MAX_PATH ]		3060125	0					
ANR	3060255	IdentifierDeclType	char [ MAX_PATH ]		3060125	0					
ANR	3060256	Identifier	check_name		3060125	1					
ANR	3060257	Identifier	MAX_PATH		3060125	2					
ANR	3060258	IdentifierDeclStatement	CSysinfo sysinfo ;	5960:3:180925:180941	3060125	1	True				
ANR	3060259	IdentifierDecl	sysinfo		3060125	0					
ANR	3060260	IdentifierDeclType	CSysinfo		3060125	0					
ANR	3060261	Identifier	sysinfo		3060125	1					
ANR	3060262	ExpressionStatement	"sysinfo . GetProcessName ( pid , check_name , sizeof ( check_name ) )"	5961:3:180946:181004	3060125	2	True				
ANR	3060263	CallExpression	"sysinfo . GetProcessName ( pid , check_name , sizeof ( check_name ) )"		3060125	0					
ANR	3060264	Callee	sysinfo . GetProcessName		3060125	0					
ANR	3060265	MemberAccess	sysinfo . GetProcessName		3060125	0					
ANR	3060266	Identifier	sysinfo		3060125	0					
ANR	3060267	Identifier	GetProcessName		3060125	1					
ANR	3060268	ArgumentList	pid		3060125	1					
ANR	3060269	Argument	pid		3060125	0					
ANR	3060270	Identifier	pid		3060125	0					
ANR	3060271	Argument	check_name		3060125	1					
ANR	3060272	Identifier	check_name		3060125	0					
ANR	3060273	Argument	sizeof ( check_name )		3060125	2					
ANR	3060274	SizeofExpression	sizeof ( check_name )		3060125	0					
ANR	3060275	Sizeof	sizeof		3060125	0					
ANR	3060276	SizeofOperand	check_name		3060125	1					
ANR	3060277	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast(%d):calling TerminateProcess handle=%x check_name='%s'\\n"" , pid , pidHandle , check_name )"	5962:3:181009:181138	3060125	3	True				
ANR	3060278	CallExpression	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast(%d):calling TerminateProcess handle=%x check_name='%s'\\n"" , pid , pidHandle , check_name )"		3060125	0					
ANR	3060279	Callee	dprintf		3060125	0					
ANR	3060280	Identifier	dprintf		3060125	0					
ANR	3060281	ArgumentList	D_PROCFAMILY		3060125	1					
ANR	3060282	Argument	D_PROCFAMILY		3060125	0					
ANR	3060283	Identifier	D_PROCFAMILY		3060125	0					
ANR	3060284	Argument	"""Shutdown_Fast(%d):calling TerminateProcess handle=%x check_name='%s'\\n"""		3060125	1					
ANR	3060285	PrimaryExpression	"""Shutdown_Fast(%d):calling TerminateProcess handle=%x check_name='%s'\\n"""		3060125	0					
ANR	3060286	Argument	pid		3060125	2					
ANR	3060287	Identifier	pid		3060125	0					
ANR	3060288	Argument	pidHandle		3060125	3					
ANR	3060289	Identifier	pidHandle		3060125	0					
ANR	3060290	Argument	check_name		3060125	4					
ANR	3060291	Identifier	check_name		3060125	0					
ANR	3060292	IfStatement	"if ( TerminateProcess ( pidHandle , 0 ) )"		3060125	11					
ANR	3060293	Condition	"TerminateProcess ( pidHandle , 0 )"	5967:5:181149:181177	3060125	0	True				
ANR	3060294	CallExpression	"TerminateProcess ( pidHandle , 0 )"		3060125	0					
ANR	3060295	Callee	TerminateProcess		3060125	0					
ANR	3060296	Identifier	TerminateProcess		3060125	0					
ANR	3060297	ArgumentList	pidHandle		3060125	1					
ANR	3060298	Argument	pidHandle		3060125	0					
ANR	3060299	Identifier	pidHandle		3060125	0					
ANR	3060300	Argument	0		3060125	1					
ANR	3060301	PrimaryExpression	0		3060125	0					
ANR	3060302	CompoundStatement		51:36:1540:1540	3060125	1					
ANR	3060303	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast:Successfully terminated pid %d\\n"" , pid )"	5968:2:181184:181263	3060125	0	True				
ANR	3060304	CallExpression	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast:Successfully terminated pid %d\\n"" , pid )"		3060125	0					
ANR	3060305	Callee	dprintf		3060125	0					
ANR	3060306	Identifier	dprintf		3060125	0					
ANR	3060307	ArgumentList	D_PROCFAMILY		3060125	1					
ANR	3060308	Argument	D_PROCFAMILY		3060125	0					
ANR	3060309	Identifier	D_PROCFAMILY		3060125	0					
ANR	3060310	Argument	"""Shutdown_Fast:Successfully terminated pid %d\\n"""		3060125	1					
ANR	3060311	PrimaryExpression	"""Shutdown_Fast:Successfully terminated pid %d\\n"""		3060125	0					
ANR	3060312	Argument	pid		3060125	2					
ANR	3060313	Identifier	pid		3060125	0					
ANR	3060314	ExpressionStatement	ret_value = TRUE	5970:2:181267:181283	3060125	1	True				
ANR	3060315	AssignmentExpression	ret_value = TRUE		3060125	0		=			
ANR	3060316	Identifier	ret_value		3060125	0					
ANR	3060317	Identifier	TRUE		3060125	1					
ANR	3060318	ElseStatement	else		3060125	0					
ANR	3060319	CompoundStatement		55:8:1653:1653	3060125	0					
ANR	3060320	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast: Failed to TerminateProcess on pid %d\\n"" , pid )"	5974:2:181371:181456	3060125	0	True				
ANR	3060321	CallExpression	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast: Failed to TerminateProcess on pid %d\\n"" , pid )"		3060125	0					
ANR	3060322	Callee	dprintf		3060125	0					
ANR	3060323	Identifier	dprintf		3060125	0					
ANR	3060324	ArgumentList	D_PROCFAMILY		3060125	1					
ANR	3060325	Argument	D_PROCFAMILY		3060125	0					
ANR	3060326	Identifier	D_PROCFAMILY		3060125	0					
ANR	3060327	Argument	"""Shutdown_Fast: Failed to TerminateProcess on pid %d\\n"""		3060125	1					
ANR	3060328	PrimaryExpression	"""Shutdown_Fast: Failed to TerminateProcess on pid %d\\n"""		3060125	0					
ANR	3060329	Argument	pid		3060125	2					
ANR	3060330	Identifier	pid		3060125	0					
ANR	3060331	ExpressionStatement	ret_value = FALSE	5976:2:181460:181477	3060125	1	True				
ANR	3060332	AssignmentExpression	ret_value = FALSE		3060125	0		=			
ANR	3060333	Identifier	ret_value		3060125	0					
ANR	3060334	Identifier	FALSE		3060125	1					
ANR	3060335	IfStatement	if ( must_free_handle )		3060125	12					
ANR	3060336	Condition	must_free_handle	5978:6:181488:181503	3060125	0	True				
ANR	3060337	Identifier	must_free_handle		3060125	0					
ANR	3060338	CompoundStatement		62:25:1867:1867	3060125	1					
ANR	3060339	Statement	::	5979:2:181511:181512	3060125	0	True				
ANR	3060340	ExpressionStatement	CloseHandle ( pidHandle )	5979:4:181513:181537	3060125	1	True				
ANR	3060341	CallExpression	CloseHandle ( pidHandle )		3060125	0					
ANR	3060342	Callee	CloseHandle		3060125	0					
ANR	3060343	Identifier	CloseHandle		3060125	0					
ANR	3060344	ArgumentList	pidHandle		3060125	1					
ANR	3060345	Argument	pidHandle		3060125	0					
ANR	3060346	Identifier	pidHandle		3060125	0					
ANR	3060347	ReturnStatement	return ret_value ;	5981:1:181543:181559	3060125	13	True				
ANR	3060348	Identifier	ret_value		3060125	0					
ANR	3060349	ReturnType	int		3060125	1					
ANR	3060350	Identifier	DaemonCore :: Shutdown_Fast		3060125	2					
ANR	3060351	ParameterList	"pid_t pid , bool want_core"		3060125	3					
ANR	3060352	Parameter	pid_t pid	5916:30:179611:179619	3060125	0	True				
ANR	3060353	ParameterType	pid_t		3060125	0					
ANR	3060354	Identifier	pid		3060125	1					
ANR	3060355	Parameter	bool want_core	5916:41:179622:179635	3060125	1	True				
ANR	3060356	ParameterType	bool		3060125	0					
ANR	3060357	Identifier	want_core		3060125	1					
ANR	3060358	CFGEntryNode	ENTRY		3060125		True				
ANR	3060359	CFGExitNode	EXIT		3060125		True				
ANR	3060360	Symbol	PROCESS_TERMINATE		3060125						
ANR	3060361	Symbol	D_PROCFAMILY		3060125						
ANR	3060362	Symbol	want_core		3060125						
ANR	3060363	Symbol	* pidTable		3060125						
ANR	3060364	Symbol	must_free_handle		3060125						
ANR	3060365	Symbol	pid		3060125						
ANR	3060366	Symbol	pidinfo -> hProcess		3060125						
ANR	3060367	Symbol	pidTable -> lookup		3060125						
ANR	3060368	Symbol	sysinfo		3060125						
ANR	3060369	Symbol	pidinfo		3060125						
ANR	3060370	Symbol	pidTable		3060125						
ANR	3060371	Symbol	TerminateProcess		3060125						
ANR	3060372	Symbol	NULL		3060125						
ANR	3060373	Symbol	false		3060125						
ANR	3060374	Symbol	TRUE		3060125						
ANR	3060375	Symbol	DebugFlags		3060125						
ANR	3060376	Symbol	D_FULLDEBUG		3060125						
ANR	3060377	Symbol	ppid		3060125						
ANR	3060378	Symbol	pidHandle		3060125						
ANR	3060379	Symbol	Shutdown_Graceful		3060125						
ANR	3060380	Symbol	ret_value		3060125						
ANR	3060381	Symbol	true		3060125						
ANR	3060382	Symbol	FALSE		3060125						
ANR	3060383	Symbol	* pidinfo		3060125						
ANR	3060384	Symbol	check_name		3060125						
ANR	3060385	Function	DaemonCore :: Shutdown_Graceful	5990:0:181753:184072							
ANR	3060386	FunctionDef	DaemonCore :: Shutdown_Graceful (pid_t pid)		3060385	0					
ANR	3060387	CompoundStatement		5991:0:181798:184072	3060385	0					
ANR	3060388	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""called DaemonCore::Shutdown_Graceful(%d)\\n"" , pid )"	5992:1:181801:181874	3060385	0	True				
ANR	3060389	CallExpression	"dprintf ( D_PROCFAMILY , ""called DaemonCore::Shutdown_Graceful(%d)\\n"" , pid )"		3060385	0					
ANR	3060390	Callee	dprintf		3060385	0					
ANR	3060391	Identifier	dprintf		3060385	0					
ANR	3060392	ArgumentList	D_PROCFAMILY		3060385	1					
ANR	3060393	Argument	D_PROCFAMILY		3060385	0					
ANR	3060394	Identifier	D_PROCFAMILY		3060385	0					
ANR	3060395	Argument	"""called DaemonCore::Shutdown_Graceful(%d)\\n"""		3060385	1					
ANR	3060396	PrimaryExpression	"""called DaemonCore::Shutdown_Graceful(%d)\\n"""		3060385	0					
ANR	3060397	Argument	pid		3060385	2					
ANR	3060398	Identifier	pid		3060385	0					
ANR	3060399	IfStatement	if ( pid == ppid )		3060385	1					
ANR	3060400	Condition	pid == ppid	5995:6:181883:181893	3060385	0	True				
ANR	3060401	EqualityExpression	pid == ppid		3060385	0		==			
ANR	3060402	Identifier	pid		3060385	0					
ANR	3060403	Identifier	ppid		3060385	1					
ANR	3060404	ReturnStatement	return FALSE ;	5996:2:181899:181911	3060385	1	True				
ANR	3060405	Identifier	FALSE		3060385	0					
ANR	3060406	ExpressionStatement	clearSession ( pid )	5999:4:181998:182015	3060385	2	True				
ANR	3060407	CallExpression	clearSession ( pid )		3060385	0					
ANR	3060408	Callee	clearSession		3060385	0					
ANR	3060409	Identifier	clearSession		3060385	0					
ANR	3060410	ArgumentList	pid		3060385	1					
ANR	3060411	Argument	pid		3060385	0					
ANR	3060412	Identifier	pid		3060385	0					
ANR	3060413	IdentifierDeclStatement	PidEntry * pidinfo ;	6007:1:182111:182128	3060385	3	True				
ANR	3060414	IdentifierDecl	* pidinfo		3060385	0					
ANR	3060415	IdentifierDeclType	PidEntry *		3060385	0					
ANR	3060416	Identifier	pidinfo		3060385	1					
ANR	3060417	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) != - 1 ) && ( pidinfo -> sinful_string [ 0 ] != '\\0' ) )"		3060385	4					
ANR	3060418	Condition	"( pidTable -> lookup ( pid , pidinfo ) != - 1 ) && ( pidinfo -> sinful_string [ 0 ] != '\\0' )"	6008:5:182135:182216	3060385	0	True				
ANR	3060419	AndExpression	"( pidTable -> lookup ( pid , pidinfo ) != - 1 ) && ( pidinfo -> sinful_string [ 0 ] != '\\0' )"		3060385	0		&&			
ANR	3060420	EqualityExpression	"pidTable -> lookup ( pid , pidinfo ) != - 1"		3060385	0		!=			
ANR	3060421	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		3060385	0					
ANR	3060422	Callee	pidTable -> lookup		3060385	0					
ANR	3060423	PtrMemberAccess	pidTable -> lookup		3060385	0					
ANR	3060424	Identifier	pidTable		3060385	0					
ANR	3060425	Identifier	lookup		3060385	1					
ANR	3060426	ArgumentList	pid		3060385	1					
ANR	3060427	Argument	pid		3060385	0					
ANR	3060428	Identifier	pid		3060385	0					
ANR	3060429	Argument	pidinfo		3060385	1					
ANR	3060430	Identifier	pidinfo		3060385	0					
ANR	3060431	UnaryOperationExpression	- 1		3060385	1					
ANR	3060432	UnaryOperator	-		3060385	0					
ANR	3060433	PrimaryExpression	1		3060385	1					
ANR	3060434	EqualityExpression	pidinfo -> sinful_string [ 0 ] != '\\0'		3060385	1		!=			
ANR	3060435	ArrayIndexing	pidinfo -> sinful_string [ 0 ]		3060385	0					
ANR	3060436	PtrMemberAccess	pidinfo -> sinful_string		3060385	0					
ANR	3060437	Identifier	pidinfo		3060385	0					
ANR	3060438	Identifier	sinful_string		3060385	1					
ANR	3060439	PrimaryExpression	0		3060385	1					
ANR	3060440	PrimaryExpression	'\\0'		3060385	1					
ANR	3060441	CompoundStatement		20:1:421:421	3060385	1					
ANR	3060442	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Shutdown_Graceful: Sending pid %d SIGTERM\\n"" , pid )"	6011:2:182224:182317	3060385	0	True				
ANR	3060443	CallExpression	"dprintf ( D_PROCFAMILY , ""Shutdown_Graceful: Sending pid %d SIGTERM\\n"" , pid )"		3060385	0					
ANR	3060444	Callee	dprintf		3060385	0					
ANR	3060445	Identifier	dprintf		3060385	0					
ANR	3060446	ArgumentList	D_PROCFAMILY		3060385	1					
ANR	3060447	Argument	D_PROCFAMILY		3060385	0					
ANR	3060448	Identifier	D_PROCFAMILY		3060385	0					
ANR	3060449	Argument	"""Shutdown_Graceful: Sending pid %d SIGTERM\\n"""		3060385	1					
ANR	3060450	PrimaryExpression	"""Shutdown_Graceful: Sending pid %d SIGTERM\\n"""		3060385	0					
ANR	3060451	Argument	pid		3060385	2					
ANR	3060452	Identifier	pid		3060385	0					
ANR	3060453	ReturnStatement	"return Send_Signal ( pid , SIGTERM ) ;"	6014:2:182321:182353	3060385	1	True				
ANR	3060454	CallExpression	"Send_Signal ( pid , SIGTERM )"		3060385	0					
ANR	3060455	Callee	Send_Signal		3060385	0					
ANR	3060456	Identifier	Send_Signal		3060385	0					
ANR	3060457	ArgumentList	pid		3060385	1					
ANR	3060458	Argument	pid		3060385	0					
ANR	3060459	Identifier	pid		3060385	0					
ANR	3060460	Argument	SIGTERM		3060385	1					
ANR	3060461	Identifier	SIGTERM		3060385	0					
ANR	3060462	IdentifierDeclStatement	ArgList args ;	6021:1:182523:182535	3060385	5	True				
ANR	3060463	IdentifierDecl	args		3060385	0					
ANR	3060464	IdentifierDeclType	ArgList		3060385	0					
ANR	3060465	Identifier	args		3060385	1					
ANR	3060466	IdentifierDeclStatement	"char * softkill_binary = param ( ""WINDOWS_SOFTKILL"" ) ;"	6022:1:182538:182587	3060385	6	True				
ANR	3060467	IdentifierDecl	"* softkill_binary = param ( ""WINDOWS_SOFTKILL"" )"		3060385	0					
ANR	3060468	IdentifierDeclType	char *		3060385	0					
ANR	3060469	Identifier	softkill_binary		3060385	1					
ANR	3060470	AssignmentExpression	"* softkill_binary = param ( ""WINDOWS_SOFTKILL"" )"		3060385	2		=			
ANR	3060471	Identifier	softkill_binary		3060385	0					
ANR	3060472	CallExpression	"param ( ""WINDOWS_SOFTKILL"" )"		3060385	1					
ANR	3060473	Callee	param		3060385	0					
ANR	3060474	Identifier	param		3060385	0					
ANR	3060475	ArgumentList	"""WINDOWS_SOFTKILL"""		3060385	1					
ANR	3060476	Argument	"""WINDOWS_SOFTKILL"""		3060385	0					
ANR	3060477	PrimaryExpression	"""WINDOWS_SOFTKILL"""		3060385	0					
ANR	3060478	IfStatement	if ( softkill_binary == NULL )		3060385	7					
ANR	3060479	Condition	softkill_binary == NULL	6023:5:182594:182616	3060385	0	True				
ANR	3060480	EqualityExpression	softkill_binary == NULL		3060385	0		==			
ANR	3060481	Identifier	softkill_binary		3060385	0					
ANR	3060482	Identifier	NULL		3060385	1					
ANR	3060483	CompoundStatement		33:30:820:820	3060385	1					
ANR	3060484	ExpressionStatement	"dprintf ( D_ALWAYS , ""cannot send softkill since WINDOWS_SOFTKILL is undefined\\n"" )"	6024:2:182623:182702	3060385	0	True				
ANR	3060485	CallExpression	"dprintf ( D_ALWAYS , ""cannot send softkill since WINDOWS_SOFTKILL is undefined\\n"" )"		3060385	0					
ANR	3060486	Callee	dprintf		3060385	0					
ANR	3060487	Identifier	dprintf		3060385	0					
ANR	3060488	ArgumentList	D_ALWAYS		3060385	1					
ANR	3060489	Argument	D_ALWAYS		3060385	0					
ANR	3060490	Identifier	D_ALWAYS		3060385	0					
ANR	3060491	Argument	"""cannot send softkill since WINDOWS_SOFTKILL is undefined\\n"""		3060385	1					
ANR	3060492	PrimaryExpression	"""cannot send softkill since WINDOWS_SOFTKILL is undefined\\n"""		3060385	0					
ANR	3060493	ReturnStatement	return FALSE ;	6025:2:182706:182718	3060385	1	True				
ANR	3060494	Identifier	FALSE		3060385	0					
ANR	3060495	ExpressionStatement	args . AppendArg ( softkill_binary )	6027:1:182724:182755	3060385	8	True				
ANR	3060496	CallExpression	args . AppendArg ( softkill_binary )		3060385	0					
ANR	3060497	Callee	args . AppendArg		3060385	0					
ANR	3060498	MemberAccess	args . AppendArg		3060385	0					
ANR	3060499	Identifier	args		3060385	0					
ANR	3060500	Identifier	AppendArg		3060385	1					
ANR	3060501	ArgumentList	softkill_binary		3060385	1					
ANR	3060502	Argument	softkill_binary		3060385	0					
ANR	3060503	Identifier	softkill_binary		3060385	0					
ANR	3060504	ExpressionStatement	free ( softkill_binary )	6028:1:182758:182779	3060385	9	True				
ANR	3060505	CallExpression	free ( softkill_binary )		3060385	0					
ANR	3060506	Callee	free		3060385	0					
ANR	3060507	Identifier	free		3060385	0					
ANR	3060508	ArgumentList	softkill_binary		3060385	1					
ANR	3060509	Argument	softkill_binary		3060385	0					
ANR	3060510	Identifier	softkill_binary		3060385	0					
ANR	3060511	ExpressionStatement	args . AppendArg ( pid )	6029:1:182782:182801	3060385	10	True				
ANR	3060512	CallExpression	args . AppendArg ( pid )		3060385	0					
ANR	3060513	Callee	args . AppendArg		3060385	0					
ANR	3060514	MemberAccess	args . AppendArg		3060385	0					
ANR	3060515	Identifier	args		3060385	0					
ANR	3060516	Identifier	AppendArg		3060385	1					
ANR	3060517	ArgumentList	pid		3060385	1					
ANR	3060518	Argument	pid		3060385	0					
ANR	3060519	Identifier	pid		3060385	0					
ANR	3060520	IdentifierDeclStatement	int ret = my_system ( args ) ;	6031:1:182846:182871	3060385	11	True				
ANR	3060521	IdentifierDecl	ret = my_system ( args )		3060385	0					
ANR	3060522	IdentifierDeclType	int		3060385	0					
ANR	3060523	Identifier	ret		3060385	1					
ANR	3060524	AssignmentExpression	ret = my_system ( args )		3060385	2		=			
ANR	3060525	Identifier	ret		3060385	0					
ANR	3060526	CallExpression	my_system ( args )		3060385	1					
ANR	3060527	Callee	my_system		3060385	0					
ANR	3060528	Identifier	my_system		3060385	0					
ANR	3060529	ArgumentList	args		3060385	1					
ANR	3060530	Argument	args		3060385	0					
ANR	3060531	Identifier	args		3060385	0					
ANR	3060532	ExpressionStatement	"dprintf ( ( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS , ""return value from my_system for softkill: %d\\n"" , ret )"	6032:1:182874:182991	3060385	12	True				
ANR	3060533	CallExpression	"dprintf ( ( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS , ""return value from my_system for softkill: %d\\n"" , ret )"		3060385	0					
ANR	3060534	Callee	dprintf		3060385	0					
ANR	3060535	Identifier	dprintf		3060385	0					
ANR	3060536	ArgumentList	( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS		3060385	1					
ANR	3060537	Argument	( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS		3060385	0					
ANR	3060538	ConditionalExpression	( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS		3060385	0					
ANR	3060539	Condition	ret == 0		3060385	0					
ANR	3060540	EqualityExpression	ret == 0		3060385	0		==			
ANR	3060541	Identifier	ret		3060385	0					
ANR	3060542	PrimaryExpression	0		3060385	1					
ANR	3060543	Identifier	D_FULLDEBUG		3060385	1					
ANR	3060544	Identifier	D_ALWAYS		3060385	2					
ANR	3060545	Argument	"""return value from my_system for softkill: %d\\n"""		3060385	1					
ANR	3060546	PrimaryExpression	"""return value from my_system for softkill: %d\\n"""		3060385	0					
ANR	3060547	Argument	ret		3060385	2					
ANR	3060548	Identifier	ret		3060385	0					
ANR	3060549	ReturnStatement	return ( ret == 0 ) ;	6035:1:182994:183011	3060385	13	True				
ANR	3060550	EqualityExpression	ret == 0		3060385	0		==			
ANR	3060551	Identifier	ret		3060385	0					
ANR	3060552	PrimaryExpression	0		3060385	1					
ANR	3060553	ReturnType	int		3060385	1					
ANR	3060554	Identifier	DaemonCore :: Shutdown_Graceful		3060385	2					
ANR	3060555	ParameterList	pid_t pid		3060385	3					
ANR	3060556	Parameter	pid_t pid	5990:34:181787:181795	3060385	0	True				
ANR	3060557	ParameterType	pid_t		3060385	0					
ANR	3060558	Identifier	pid		3060385	1					
ANR	3060559	CFGEntryNode	ENTRY		3060385		True				
ANR	3060560	CFGExitNode	EXIT		3060385		True				
ANR	3060561	Symbol	pidinfo		3060385						
ANR	3060562	Symbol	pidTable		3060385						
ANR	3060563	Symbol	ret		3060385						
ANR	3060564	Symbol	* * pidinfo		3060385						
ANR	3060565	Symbol	D_PROCFAMILY		3060385						
ANR	3060566	Symbol	NULL		3060385						
ANR	3060567	Symbol	* pidTable		3060385						
ANR	3060568	Symbol	D_ALWAYS		3060385						
ANR	3060569	Symbol	pid		3060385						
ANR	3060570	Symbol	D_FULLDEBUG		3060385						
ANR	3060571	Symbol	ppid		3060385						
ANR	3060572	Symbol	args		3060385						
ANR	3060573	Symbol	softkill_binary		3060385						
ANR	3060574	Symbol	pidTable -> lookup		3060385						
ANR	3060575	Symbol	pidinfo -> sinful_string		3060385						
ANR	3060576	Symbol	param		3060385						
ANR	3060577	Symbol	Send_Signal		3060385						
ANR	3060578	Symbol	FALSE		3060385						
ANR	3060579	Symbol	* pidinfo		3060385						
ANR	3060580	Symbol	SIGTERM		3060385						
ANR	3060581	Symbol	* pidinfo -> sinful_string		3060385						
ANR	3060582	Symbol	my_system		3060385						
ANR	3060583	Function	DaemonCore :: Suspend_Thread	6069:0:184075:184968							
ANR	3060584	FunctionDef	DaemonCore :: Suspend_Thread (int tid)		3060583	0					
ANR	3060585	CompoundStatement		6070:0:184115:184968	3060583	0					
ANR	3060586	IdentifierDeclStatement	PidEntry * pidinfo ;	6071:1:184118:184135	3060583	0	True				
ANR	3060587	IdentifierDecl	* pidinfo		3060583	0					
ANR	3060588	IdentifierDeclType	PidEntry *		3060583	0					
ANR	3060589	Identifier	pidinfo		3060583	1					
ANR	3060590	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Suspend_Thread(%d)\\n"" , tid )"	6073:1:184139:184209	3060583	1	True				
ANR	3060591	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Suspend_Thread(%d)\\n"" , tid )"		3060583	0					
ANR	3060592	Callee	dprintf		3060583	0					
ANR	3060593	Identifier	dprintf		3060583	0					
ANR	3060594	ArgumentList	D_DAEMONCORE		3060583	1					
ANR	3060595	Argument	D_DAEMONCORE		3060583	0					
ANR	3060596	Identifier	D_DAEMONCORE		3060583	0					
ANR	3060597	Argument	"""called DaemonCore::Suspend_Thread(%d)\\n"""		3060583	1					
ANR	3060598	PrimaryExpression	"""called DaemonCore::Suspend_Thread(%d)\\n"""		3060583	0					
ANR	3060599	Argument	tid		3060583	2					
ANR	3060600	Identifier	tid		3060583	0					
ANR	3060601	Statement	if	6077:1:184257:184258	3060583	2	True				
ANR	3060602	Statement	(	6077:4:184260:184260	3060583	3	True				
ANR	3060603	Statement	(	6077:6:184262:184262	3060583	4	True				
ANR	3060604	Statement	pidTable	6077:7:184263:184270	3060583	5	True				
ANR	3060605	Statement	->	6077:15:184271:184272	3060583	6	True				
ANR	3060606	Statement	lookup	6077:17:184273:184278	3060583	7	True				
ANR	3060607	Statement	(	6077:23:184279:184279	3060583	8	True				
ANR	3060608	Statement	tid	6077:24:184280:184282	3060583	9	True				
ANR	3060609	Statement	","	6077:27:184283:184283	3060583	10	True				
ANR	3060610	Statement	pidinfo	6077:29:184285:184291	3060583	11	True				
ANR	3060611	Statement	)	6077:36:184292:184292	3060583	12	True				
ANR	3060612	Statement	<	6077:38:184294:184294	3060583	13	True				
ANR	3060613	Statement	0	6077:40:184296:184296	3060583	14	True				
ANR	3060614	Statement	)	6077:41:184297:184297	3060583	15	True				
ANR	3060615	Statement	||	6080:2:184383:184384	3060583	16	True				
ANR	3060616	Statement	(	6080:5:184386:184386	3060583	17	True				
ANR	3060617	Statement	pidinfo	6080:6:184387:184393	3060583	18	True				
ANR	3060618	Statement	->	6080:13:184394:184395	3060583	19	True				
ANR	3060619	Statement	hProcess	6080:15:184396:184403	3060583	20	True				
ANR	3060620	Statement	!=	6080:24:184405:184406	3060583	21	True				
ANR	3060621	Statement	NULL	6080:27:184408:184411	3060583	22	True				
ANR	3060622	Statement	)	6080:31:184412:184412	3060583	23	True				
ANR	3060623	Statement	||	6082:2:184454:184455	3060583	24	True				
ANR	3060624	Statement	(	6082:5:184457:184457	3060583	25	True				
ANR	3060625	Statement	pidinfo	6082:6:184458:184464	3060583	26	True				
ANR	3060626	Statement	->	6082:13:184465:184466	3060583	27	True				
ANR	3060627	Statement	hThread	6082:15:184467:184473	3060583	28	True				
ANR	3060628	Statement	==	6082:23:184475:184476	3060583	29	True				
ANR	3060629	Statement	NULL	6082:26:184478:184481	3060583	30	True				
ANR	3060630	Statement	)	6082:31:184483:184483	3060583	31	True				
ANR	3060631	Statement	)	6084:2:184494:184494	3060583	32	True				
ANR	3060632	CompoundStatement		16:1:381:381	3060583	33					
ANR	3060633	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore:Suspend_Thread(%d) failed, bad tid\\n"" , tid )"	6086:2:184501:184576	3060583	0	True				
ANR	3060634	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore:Suspend_Thread(%d) failed, bad tid\\n"" , tid )"		3060583	0					
ANR	3060635	Callee	dprintf		3060583	0					
ANR	3060636	Identifier	dprintf		3060583	0					
ANR	3060637	ArgumentList	D_ALWAYS		3060583	1					
ANR	3060638	Argument	D_ALWAYS		3060583	0					
ANR	3060639	Identifier	D_ALWAYS		3060583	0					
ANR	3060640	Argument	"""DaemonCore:Suspend_Thread(%d) failed, bad tid\\n"""		3060583	1					
ANR	3060641	PrimaryExpression	"""DaemonCore:Suspend_Thread(%d) failed, bad tid\\n"""		3060583	0					
ANR	3060642	Argument	tid		3060583	2					
ANR	3060643	Identifier	tid		3060583	0					
ANR	3060644	ReturnStatement	return FALSE ;	6088:2:184580:184592	3060583	1	True				
ANR	3060645	Identifier	FALSE		3060583	0					
ANR	3060646	ReturnStatement	return Suspend_Process ( tid ) ;	6093:1:184667:184694	3060583	34	True				
ANR	3060647	CallExpression	Suspend_Process ( tid )		3060583	0					
ANR	3060648	Callee	Suspend_Process		3060583	0					
ANR	3060649	Identifier	Suspend_Process		3060583	0					
ANR	3060650	ArgumentList	tid		3060583	1					
ANR	3060651	Argument	tid		3060583	0					
ANR	3060652	Identifier	tid		3060583	0					
ANR	3060653	ReturnType	int		3060583	1					
ANR	3060654	Identifier	DaemonCore :: Suspend_Thread		3060583	2					
ANR	3060655	ParameterList	int tid		3060583	3					
ANR	3060656	Parameter	int tid	6069:31:184106:184112	3060583	0	True				
ANR	3060657	ParameterType	int		3060583	0					
ANR	3060658	Identifier	tid		3060583	1					
ANR	3060659	CFGEntryNode	ENTRY		3060583		True				
ANR	3060660	CFGExitNode	EXIT		3060583		True				
ANR	3060661	Symbol	pidinfo		3060583						
ANR	3060662	Symbol	Suspend_Process		3060583						
ANR	3060663	Symbol	D_DAEMONCORE		3060583						
ANR	3060664	Symbol	D_ALWAYS		3060583						
ANR	3060665	Symbol	FALSE		3060583						
ANR	3060666	Symbol	tid		3060583						
ANR	3060667	Function	DaemonCore :: Continue_Thread	6105:0:184971:186002							
ANR	3060668	FunctionDef	DaemonCore :: Continue_Thread (int tid)		3060667	0					
ANR	3060669	CompoundStatement		6106:0:185012:186002	3060667	0					
ANR	3060670	IdentifierDeclStatement	PidEntry * pidinfo ;	6107:1:185015:185032	3060667	0	True				
ANR	3060671	IdentifierDecl	* pidinfo		3060667	0					
ANR	3060672	IdentifierDeclType	PidEntry *		3060667	0					
ANR	3060673	Identifier	pidinfo		3060667	1					
ANR	3060674	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Continue_Thread(%d)\\n"" , tid )"	6109:1:185036:185107	3060667	1	True				
ANR	3060675	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Continue_Thread(%d)\\n"" , tid )"		3060667	0					
ANR	3060676	Callee	dprintf		3060667	0					
ANR	3060677	Identifier	dprintf		3060667	0					
ANR	3060678	ArgumentList	D_DAEMONCORE		3060667	1					
ANR	3060679	Argument	D_DAEMONCORE		3060667	0					
ANR	3060680	Identifier	D_DAEMONCORE		3060667	0					
ANR	3060681	Argument	"""called DaemonCore::Continue_Thread(%d)\\n"""		3060667	1					
ANR	3060682	PrimaryExpression	"""called DaemonCore::Continue_Thread(%d)\\n"""		3060667	0					
ANR	3060683	Argument	tid		3060667	2					
ANR	3060684	Identifier	tid		3060667	0					
ANR	3060685	Statement	if	6113:1:185155:185156	3060667	2	True				
ANR	3060686	Statement	(	6113:4:185158:185158	3060667	3	True				
ANR	3060687	Statement	(	6113:6:185160:185160	3060667	4	True				
ANR	3060688	Statement	pidTable	6113:7:185161:185168	3060667	5	True				
ANR	3060689	Statement	->	6113:15:185169:185170	3060667	6	True				
ANR	3060690	Statement	lookup	6113:17:185171:185176	3060667	7	True				
ANR	3060691	Statement	(	6113:23:185177:185177	3060667	8	True				
ANR	3060692	Statement	tid	6113:24:185178:185180	3060667	9	True				
ANR	3060693	Statement	","	6113:27:185181:185181	3060667	10	True				
ANR	3060694	Statement	pidinfo	6113:29:185183:185189	3060667	11	True				
ANR	3060695	Statement	)	6113:36:185190:185190	3060667	12	True				
ANR	3060696	Statement	<	6113:38:185192:185192	3060667	13	True				
ANR	3060697	Statement	0	6113:40:185194:185194	3060667	14	True				
ANR	3060698	Statement	)	6113:41:185195:185195	3060667	15	True				
ANR	3060699	Statement	||	6116:2:185281:185282	3060667	16	True				
ANR	3060700	Statement	(	6116:5:185284:185284	3060667	17	True				
ANR	3060701	Statement	pidinfo	6116:6:185285:185291	3060667	18	True				
ANR	3060702	Statement	->	6116:13:185292:185293	3060667	19	True				
ANR	3060703	Statement	hProcess	6116:15:185294:185301	3060667	20	True				
ANR	3060704	Statement	!=	6116:24:185303:185304	3060667	21	True				
ANR	3060705	Statement	NULL	6116:27:185306:185309	3060667	22	True				
ANR	3060706	Statement	)	6116:31:185310:185310	3060667	23	True				
ANR	3060707	Statement	||	6118:2:185352:185353	3060667	24	True				
ANR	3060708	Statement	(	6118:5:185355:185355	3060667	25	True				
ANR	3060709	Statement	pidinfo	6118:6:185356:185362	3060667	26	True				
ANR	3060710	Statement	->	6118:13:185363:185364	3060667	27	True				
ANR	3060711	Statement	hThread	6118:15:185365:185371	3060667	28	True				
ANR	3060712	Statement	==	6118:23:185373:185374	3060667	29	True				
ANR	3060713	Statement	NULL	6118:26:185376:185379	3060667	30	True				
ANR	3060714	Statement	)	6118:31:185381:185381	3060667	31	True				
ANR	3060715	Statement	)	6120:2:185392:185392	3060667	32	True				
ANR	3060716	CompoundStatement		16:1:382:382	3060667	33					
ANR	3060717	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore:Continue_Thread(%d) failed, bad tid\\n"" , tid )"	6122:2:185399:185475	3060667	0	True				
ANR	3060718	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore:Continue_Thread(%d) failed, bad tid\\n"" , tid )"		3060667	0					
ANR	3060719	Callee	dprintf		3060667	0					
ANR	3060720	Identifier	dprintf		3060667	0					
ANR	3060721	ArgumentList	D_ALWAYS		3060667	1					
ANR	3060722	Argument	D_ALWAYS		3060667	0					
ANR	3060723	Identifier	D_ALWAYS		3060667	0					
ANR	3060724	Argument	"""DaemonCore:Continue_Thread(%d) failed, bad tid\\n"""		3060667	1					
ANR	3060725	PrimaryExpression	"""DaemonCore:Continue_Thread(%d) failed, bad tid\\n"""		3060667	0					
ANR	3060726	Argument	tid		3060667	2					
ANR	3060727	Identifier	tid		3060667	0					
ANR	3060728	ReturnStatement	return FALSE ;	6124:2:185479:185491	3060667	1	True				
ANR	3060729	Identifier	FALSE		3060667	0					
ANR	3060730	ReturnStatement	return Continue_Process ( tid ) ;	6129:1:185566:185594	3060667	34	True				
ANR	3060731	CallExpression	Continue_Process ( tid )		3060667	0					
ANR	3060732	Callee	Continue_Process		3060667	0					
ANR	3060733	Identifier	Continue_Process		3060667	0					
ANR	3060734	ArgumentList	tid		3060667	1					
ANR	3060735	Argument	tid		3060667	0					
ANR	3060736	Identifier	tid		3060667	0					
ANR	3060737	ReturnType	int		3060667	1					
ANR	3060738	Identifier	DaemonCore :: Continue_Thread		3060667	2					
ANR	3060739	ParameterList	int tid		3060667	3					
ANR	3060740	Parameter	int tid	6105:32:185003:185009	3060667	0	True				
ANR	3060741	ParameterType	int		3060667	0					
ANR	3060742	Identifier	tid		3060667	1					
ANR	3060743	CFGEntryNode	ENTRY		3060667		True				
ANR	3060744	CFGExitNode	EXIT		3060667		True				
ANR	3060745	Symbol	pidinfo		3060667						
ANR	3060746	Symbol	Continue_Process		3060667						
ANR	3060747	Symbol	D_DAEMONCORE		3060667						
ANR	3060748	Symbol	D_ALWAYS		3060667						
ANR	3060749	Symbol	FALSE		3060667						
ANR	3060750	Symbol	tid		3060667						
ANR	3060751	Function	DaemonCore :: Suspend_Process	6149:0:186005:186406							
ANR	3060752	FunctionDef	DaemonCore :: Suspend_Process (pid_t pid)		3060751	0					
ANR	3060753	CompoundStatement		6150:0:186048:186406	3060751	0					
ANR	3060754	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Suspend_Process(%d)\\n"" , pid )"	6151:1:186051:186122	3060751	0	True				
ANR	3060755	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Suspend_Process(%d)\\n"" , pid )"		3060751	0					
ANR	3060756	Callee	dprintf		3060751	0					
ANR	3060757	Identifier	dprintf		3060751	0					
ANR	3060758	ArgumentList	D_DAEMONCORE		3060751	1					
ANR	3060759	Argument	D_DAEMONCORE		3060751	0					
ANR	3060760	Identifier	D_DAEMONCORE		3060751	0					
ANR	3060761	Argument	"""called DaemonCore::Suspend_Process(%d)\\n"""		3060751	1					
ANR	3060762	PrimaryExpression	"""called DaemonCore::Suspend_Process(%d)\\n"""		3060751	0					
ANR	3060763	Argument	pid		3060751	2					
ANR	3060764	Identifier	pid		3060751	0					
ANR	3060765	IfStatement	if ( pid == ppid )		3060751	1					
ANR	3060766	Condition	pid == ppid	6154:6:186131:186141	3060751	0	True				
ANR	3060767	EqualityExpression	pid == ppid		3060751	0		==			
ANR	3060768	Identifier	pid		3060751	0					
ANR	3060769	Identifier	ppid		3060751	1					
ANR	3060770	ReturnStatement	return FALSE ;	6155:2:186147:186159	3060751	1	True				
ANR	3060771	Identifier	FALSE		3060751	0					
ANR	3060772	ReturnStatement	return windows_suspend ( pid ) ;	6158:1:186211:186238	3060751	2	True				
ANR	3060773	CallExpression	windows_suspend ( pid )		3060751	0					
ANR	3060774	Callee	windows_suspend		3060751	0					
ANR	3060775	Identifier	windows_suspend		3060751	0					
ANR	3060776	ArgumentList	pid		3060751	1					
ANR	3060777	Argument	pid		3060751	0					
ANR	3060778	Identifier	pid		3060751	0					
ANR	3060779	ReturnType	int		3060751	1					
ANR	3060780	Identifier	DaemonCore :: Suspend_Process		3060751	2					
ANR	3060781	ParameterList	pid_t pid		3060751	3					
ANR	3060782	Parameter	pid_t pid	6149:32:186037:186045	3060751	0	True				
ANR	3060783	ParameterType	pid_t		3060751	0					
ANR	3060784	Identifier	pid		3060751	1					
ANR	3060785	CFGEntryNode	ENTRY		3060751		True				
ANR	3060786	CFGExitNode	EXIT		3060751		True				
ANR	3060787	Symbol	D_DAEMONCORE		3060751						
ANR	3060788	Symbol	pid		3060751						
ANR	3060789	Symbol	FALSE		3060751						
ANR	3060790	Symbol	windows_suspend		3060751						
ANR	3060791	Symbol	ppid		3060751						
ANR	3060792	Function	DaemonCore :: Continue_Process	6167:0:186409:186747							
ANR	3060793	FunctionDef	DaemonCore :: Continue_Process (pid_t pid)		3060792	0					
ANR	3060794	CompoundStatement		6168:0:186453:186747	3060792	0					
ANR	3060795	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Continue_Process(%d)\\n"" , pid )"	6169:1:186456:186528	3060792	0	True				
ANR	3060796	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Continue_Process(%d)\\n"" , pid )"		3060792	0					
ANR	3060797	Callee	dprintf		3060792	0					
ANR	3060798	Identifier	dprintf		3060792	0					
ANR	3060799	ArgumentList	D_DAEMONCORE		3060792	1					
ANR	3060800	Argument	D_DAEMONCORE		3060792	0					
ANR	3060801	Identifier	D_DAEMONCORE		3060792	0					
ANR	3060802	Argument	"""called DaemonCore::Continue_Process(%d)\\n"""		3060792	1					
ANR	3060803	PrimaryExpression	"""called DaemonCore::Continue_Process(%d)\\n"""		3060792	0					
ANR	3060804	Argument	pid		3060792	2					
ANR	3060805	Identifier	pid		3060792	0					
ANR	3060806	ReturnStatement	return windows_continue ( pid ) ;	6173:1:186551:186579	3060792	1	True				
ANR	3060807	CallExpression	windows_continue ( pid )		3060792	0					
ANR	3060808	Callee	windows_continue		3060792	0					
ANR	3060809	Identifier	windows_continue		3060792	0					
ANR	3060810	ArgumentList	pid		3060792	1					
ANR	3060811	Argument	pid		3060792	0					
ANR	3060812	Identifier	pid		3060792	0					
ANR	3060813	ReturnType	int		3060792	1					
ANR	3060814	Identifier	DaemonCore :: Continue_Process		3060792	2					
ANR	3060815	ParameterList	pid_t pid		3060792	3					
ANR	3060816	Parameter	pid_t pid	6167:33:186442:186450	3060792	0	True				
ANR	3060817	ParameterType	pid_t		3060792	0					
ANR	3060818	Identifier	pid		3060792	1					
ANR	3060819	CFGEntryNode	ENTRY		3060792		True				
ANR	3060820	CFGExitNode	EXIT		3060792		True				
ANR	3060821	Symbol	windows_continue		3060792						
ANR	3060822	Symbol	D_DAEMONCORE		3060792						
ANR	3060823	Symbol	pid		3060792						
ANR	3060824	Function	DaemonCore :: SetDataPtr	6182:0:186750:186992							
ANR	3060825	FunctionDef	DaemonCore :: SetDataPtr (void * dptr)		3060824	0					
ANR	3060826	CompoundStatement		6183:0:186789:186992	3060824	0					
ANR	3060827	IfStatement	if ( curr_dataptr == NULL )		3060824	0					
ANR	3060828	Condition	curr_dataptr == NULL	6187:6:186909:186928	3060824	0	True				
ANR	3060829	EqualityExpression	curr_dataptr == NULL		3060824	0		==			
ANR	3060830	Identifier	curr_dataptr		3060824	0					
ANR	3060831	Identifier	NULL		3060824	1					
ANR	3060832	CompoundStatement		5:29:142:142	3060824	1					
ANR	3060833	ReturnStatement	return FALSE ;	6188:2:186936:186948	3060824	0	True				
ANR	3060834	Identifier	FALSE		3060824	0					
ANR	3060835	ExpressionStatement	* curr_dataptr = dptr	6191:1:186955:186975	3060824	1	True				
ANR	3060836	AssignmentExpression	* curr_dataptr = dptr		3060824	0		=			
ANR	3060837	UnaryOperationExpression	* curr_dataptr		3060824	0					
ANR	3060838	UnaryOperator	*		3060824	0					
ANR	3060839	Identifier	curr_dataptr		3060824	1					
ANR	3060840	Identifier	dptr		3060824	1					
ANR	3060841	ReturnStatement	return TRUE ;	6193:1:186979:186990	3060824	2	True				
ANR	3060842	Identifier	TRUE		3060824	0					
ANR	3060843	ReturnType	int		3060824	1					
ANR	3060844	Identifier	DaemonCore :: SetDataPtr		3060824	2					
ANR	3060845	ParameterList	void * dptr		3060824	3					
ANR	3060846	Parameter	void * dptr	6182:27:186777:186786	3060824	0	True				
ANR	3060847	ParameterType	void *		3060824	0					
ANR	3060848	Identifier	dptr		3060824	1					
ANR	3060849	CFGEntryNode	ENTRY		3060824		True				
ANR	3060850	CFGExitNode	EXIT		3060824		True				
ANR	3060851	Symbol	* curr_dataptr		3060824						
ANR	3060852	Symbol	NULL		3060824						
ANR	3060853	Symbol	dptr		3060824						
ANR	3060854	Symbol	TRUE		3060824						
ANR	3060855	Symbol	FALSE		3060824						
ANR	3060856	Symbol	curr_dataptr		3060824						
ANR	3060857	Function	DaemonCore :: Register_DataPtr	6196:0:186995:187249							
ANR	3060858	FunctionDef	DaemonCore :: Register_DataPtr (void * dptr)		3060857	0					
ANR	3060859	CompoundStatement		6197:0:187040:187249	3060857	0					
ANR	3060860	IfStatement	if ( curr_regdataptr == NULL )		3060857	0					
ANR	3060861	Condition	curr_regdataptr == NULL	6201:6:187160:187182	3060857	0	True				
ANR	3060862	EqualityExpression	curr_regdataptr == NULL		3060857	0		==			
ANR	3060863	Identifier	curr_regdataptr		3060857	0					
ANR	3060864	Identifier	NULL		3060857	1					
ANR	3060865	CompoundStatement		5:32:145:145	3060857	1					
ANR	3060866	ReturnStatement	return FALSE ;	6202:2:187190:187202	3060857	0	True				
ANR	3060867	Identifier	FALSE		3060857	0					
ANR	3060868	ExpressionStatement	* curr_regdataptr = dptr	6205:1:187209:187232	3060857	1	True				
ANR	3060869	AssignmentExpression	* curr_regdataptr = dptr		3060857	0		=			
ANR	3060870	UnaryOperationExpression	* curr_regdataptr		3060857	0					
ANR	3060871	UnaryOperator	*		3060857	0					
ANR	3060872	Identifier	curr_regdataptr		3060857	1					
ANR	3060873	Identifier	dptr		3060857	1					
ANR	3060874	ReturnStatement	return TRUE ;	6207:1:187236:187247	3060857	2	True				
ANR	3060875	Identifier	TRUE		3060857	0					
ANR	3060876	ReturnType	int		3060857	1					
ANR	3060877	Identifier	DaemonCore :: Register_DataPtr		3060857	2					
ANR	3060878	ParameterList	void * dptr		3060857	3					
ANR	3060879	Parameter	void * dptr	6196:33:187028:187037	3060857	0	True				
ANR	3060880	ParameterType	void *		3060857	0					
ANR	3060881	Identifier	dptr		3060857	1					
ANR	3060882	CFGEntryNode	ENTRY		3060857		True				
ANR	3060883	CFGExitNode	EXIT		3060857		True				
ANR	3060884	Symbol	curr_regdataptr		3060857						
ANR	3060885	Symbol	* curr_regdataptr		3060857						
ANR	3060886	Symbol	NULL		3060857						
ANR	3060887	Symbol	dptr		3060857						
ANR	3060888	Symbol	TRUE		3060857						
ANR	3060889	Symbol	FALSE		3060857						
ANR	3060890	Function	DaemonCore :: GetDataPtr	6210:0:187252:187469							
ANR	3060891	FunctionDef	DaemonCore :: GetDataPtr ()		3060890	0					
ANR	3060892	CompoundStatement		6211:0:187283:187469	3060890	0					
ANR	3060893	IfStatement	if ( curr_dataptr == NULL )		3060890	0					
ANR	3060894	Condition	curr_dataptr == NULL	6215:6:187403:187422	3060890	0	True				
ANR	3060895	EqualityExpression	curr_dataptr == NULL		3060890	0		==			
ANR	3060896	Identifier	curr_dataptr		3060890	0					
ANR	3060897	Identifier	NULL		3060890	1					
ANR	3060898	ReturnStatement	return NULL ;	6216:2:187428:187439	3060890	1	True				
ANR	3060899	Identifier	NULL		3060890	0					
ANR	3060900	ReturnStatement	return ( * curr_dataptr ) ;	6218:1:187443:187467	3060890	1	True				
ANR	3060901	UnaryOperationExpression	* curr_dataptr		3060890	0					
ANR	3060902	UnaryOperator	*		3060890	0					
ANR	3060903	Identifier	curr_dataptr		3060890	1					
ANR	3060904	ReturnType	void *		3060890	1					
ANR	3060905	Identifier	DaemonCore :: GetDataPtr		3060890	2					
ANR	3060906	ParameterList			3060890	3					
ANR	3060907	CFGEntryNode	ENTRY		3060890		True				
ANR	3060908	CFGExitNode	EXIT		3060890		True				
ANR	3060909	Symbol	* curr_dataptr		3060890						
ANR	3060910	Symbol	NULL		3060890						
ANR	3060911	Symbol	curr_dataptr		3060890						
ANR	3060912	Function	DaemonCore :: SetFDInheritFlag	6226:0:187721:188612							
ANR	3060913	FunctionDef	"DaemonCore :: SetFDInheritFlag (int fh , int flag)"		3060912	0					
ANR	3060914	CompoundStatement		6227:0:187772:188612	3060912	0					
ANR	3060915	IdentifierDeclStatement	long underlying_handle ;	6228:1:187775:187797	3060912	0	True				
ANR	3060916	IdentifierDecl	underlying_handle		3060912	0					
ANR	3060917	IdentifierDeclType	long		3060912	0					
ANR	3060918	Identifier	underlying_handle		3060912	1					
ANR	3060919	ExpressionStatement	underlying_handle = _get_osfhandle ( fh )	6230:1:187801:187839	3060912	1	True				
ANR	3060920	AssignmentExpression	underlying_handle = _get_osfhandle ( fh )		3060912	0		=			
ANR	3060921	Identifier	underlying_handle		3060912	0					
ANR	3060922	CallExpression	_get_osfhandle ( fh )		3060912	1					
ANR	3060923	Callee	_get_osfhandle		3060912	0					
ANR	3060924	Identifier	_get_osfhandle		3060912	0					
ANR	3060925	ArgumentList	fh		3060912	1					
ANR	3060926	Argument	fh		3060912	0					
ANR	3060927	Identifier	fh		3060912	0					
ANR	3060928	IfStatement	if ( underlying_handle == - 1L )		3060912	2					
ANR	3060929	Condition	underlying_handle == - 1L	6232:6:187848:187871	3060912	0	True				
ANR	3060930	EqualityExpression	underlying_handle == - 1L		3060912	0		==			
ANR	3060931	Identifier	underlying_handle		3060912	0					
ANR	3060932	UnaryOperationExpression	- 1L		3060912	1					
ANR	3060933	UnaryOperator	-		3060912	0					
ANR	3060934	PrimaryExpression	1L		3060912	1					
ANR	3060935	CompoundStatement		6:33:102:102	3060912	1					
ANR	3060936	ReturnStatement	return TRUE ;	6235:2:187961:187972	3060912	0	True				
ANR	3060937	Identifier	TRUE		3060912	0					
ANR	3060938	Statement	if	6239:1:188033:188034	3060912	3	True				
ANR	3060939	Statement	(	6239:4:188036:188036	3060912	4	True				
ANR	3060940	Statement	!	6239:5:188037:188037	3060912	5	True				
ANR	3060941	Statement	::	6239:6:188038:188039	3060912	6	True				
ANR	3060942	Statement	SetHandleInformation	6239:8:188040:188059	3060912	7	True				
ANR	3060943	Statement	(	6239:28:188060:188060	3060912	8	True				
ANR	3060944	Statement	(	6239:29:188061:188061	3060912	9	True				
ANR	3060945	Statement	HANDLE	6239:30:188062:188067	3060912	10	True				
ANR	3060946	Statement	)	6239:36:188068:188068	3060912	11	True				
ANR	3060947	Statement	underlying_handle	6239:37:188069:188085	3060912	12	True				
ANR	3060948	Statement	","	6239:54:188086:188086	3060912	13	True				
ANR	3060949	Statement	HANDLE_FLAG_INHERIT	6240:2:188090:188108	3060912	14	True				
ANR	3060950	Statement	","	6240:21:188109:188109	3060912	15	True				
ANR	3060951	Statement	flag	6240:23:188111:188114	3060912	16	True				
ANR	3060952	Statement	?	6240:28:188116:188116	3060912	17	True				
ANR	3060953	Label	HANDLE_FLAG_INHERIT :	6240:30:188118:188138	3060912	18	True				
ANR	3060954	Identifier	HANDLE_FLAG_INHERIT		3060912	0					
ANR	3060955	Statement	0	6240:52:188140:188140	3060912	19	True				
ANR	3060956	Statement	)	6240:53:188141:188141	3060912	20	True				
ANR	3060957	Statement	)	6240:55:188143:188143	3060912	21	True				
ANR	3060958	CompoundStatement		16:3:402:431	3060912	22					
ANR	3060959	IdentifierDeclStatement	DWORD whynot = GetLastError ( ) ;	6242:3:188175:188204	3060912	0	True				
ANR	3060960	IdentifierDecl	whynot = GetLastError ( )		3060912	0					
ANR	3060961	IdentifierDeclType	DWORD		3060912	0					
ANR	3060962	Identifier	whynot		3060912	1					
ANR	3060963	AssignmentExpression	whynot = GetLastError ( )		3060912	2		=			
ANR	3060964	Identifier	whynot		3060912	0					
ANR	3060965	CallExpression	GetLastError ( )		3060912	1					
ANR	3060966	Callee	GetLastError		3060912	0					
ANR	3060967	Identifier	GetLastError		3060912	0					
ANR	3060968	ArgumentList			3060912	1					
ANR	3060969	IfStatement	if ( whynot == ERROR_INVALID_HANDLE )		3060912	1					
ANR	3060970	Condition	whynot == ERROR_INVALID_HANDLE	6244:8:188215:188244	3060912	0	True				
ANR	3060971	EqualityExpression	whynot == ERROR_INVALID_HANDLE		3060912	0		==			
ANR	3060972	Identifier	whynot		3060912	0					
ANR	3060973	Identifier	ERROR_INVALID_HANDLE		3060912	1					
ANR	3060974	CompoundStatement		18:41:475:475	3060912	1					
ANR	3060975	ReturnStatement	return TRUE ;	6248:4:188428:188439	3060912	0	True				
ANR	3060976	Identifier	TRUE		3060912	0					
ANR	3060977	Statement	dprintf	6251:3:188450:188456	3060912	2	True				
ANR	3060978	Statement	(	6251:10:188457:188457	3060912	3	True				
ANR	3060979	Statement	D_ALWAYS	6251:11:188458:188465	3060912	4	True				
ANR	3060980	Statement	","	6251:19:188466:188466	3060912	5	True				
ANR	3060981	Statement	"""ERROR: SetHandleInformation() failed in SetFDInheritFlag(%d,%d),"""	6252:4:188472:188537	3060912	6	True				
ANR	3060982	Statement	"""err=%d\\n"""	6253:4:188543:188552	3060912	7	True				
ANR	3060983	Statement	","	6254:4:188558:188558	3060912	8	True				
ANR	3060984	Statement	fh	6254:5:188559:188560	3060912	9	True				
ANR	3060985	Statement	","	6254:7:188561:188561	3060912	10	True				
ANR	3060986	Statement	flag	6254:8:188562:188565	3060912	11	True				
ANR	3060987	Statement	","	6254:12:188566:188566	3060912	12	True				
ANR	3060988	Statement	whynot	6254:13:188567:188572	3060912	13	True				
ANR	3060989	Statement	)	6254:19:188573:188573	3060912	14	True				
ANR	3060990	ExpressionStatement		6254:20:188574:188574	3060912	15	True				
ANR	3060991	ReturnStatement	return FALSE ;	6256:3:188580:188592	3060912	16	True				
ANR	3060992	Identifier	FALSE		3060912	0					
ANR	3060993	ReturnStatement	return TRUE ;	6259:1:188599:188610	3060912	23	True				
ANR	3060994	Identifier	TRUE		3060912	0					
ANR	3060995	ReturnType	int		3060912	1					
ANR	3060996	Identifier	DaemonCore :: SetFDInheritFlag		3060912	2					
ANR	3060997	ParameterList	"int fh , int flag"		3060912	3					
ANR	3060998	Parameter	int fh	6226:33:187754:187759	3060912	0	True				
ANR	3060999	ParameterType	int		3060912	0					
ANR	3061000	Identifier	fh		3060912	1					
ANR	3061001	Parameter	int flag	6226:41:187762:187769	3060912	1	True				
ANR	3061002	ParameterType	int		3060912	0					
ANR	3061003	Identifier	flag		3060912	1					
ANR	3061004	CFGEntryNode	ENTRY		3060912		True				
ANR	3061005	CFGExitNode	EXIT		3060912		True				
ANR	3061006	Symbol	underlying_handle		3060912						
ANR	3061007	Symbol	fh		3060912						
ANR	3061008	Symbol	flag		3060912						
ANR	3061009	Symbol	GetLastError		3060912						
ANR	3061010	Symbol	TRUE		3060912						
ANR	3061011	Symbol	whynot		3060912						
ANR	3061012	Symbol	ERROR_INVALID_HANDLE		3060912						
ANR	3061013	Symbol	FALSE		3060912						
ANR	3061014	Symbol	_get_osfhandle		3060912						
ANR	3061015	Function	DaemonCore :: Forked_Child_Wants_Exit_By_Exec	6265:0:188642:188769							
ANR	3061016	FunctionDef	DaemonCore :: Forked_Child_Wants_Exit_By_Exec (bool exit_by_exec)		3061015	0					
ANR	3061017	CompoundStatement		6267:0:188712:188769	3061015	0					
ANR	3061018	IfStatement	if ( exit_by_exec )		3061015	0					
ANR	3061019	Condition	exit_by_exec	6268:5:188719:188730	3061015	0	True				
ANR	3061020	Identifier	exit_by_exec		3061015	0					
ANR	3061021	CompoundStatement		2:20:21:21	3061015	1					
ANR	3061022	ExpressionStatement	_condor_exit_with_exec = 1	6269:2:188738:188764	3061015	0	True				
ANR	3061023	AssignmentExpression	_condor_exit_with_exec = 1		3061015	0		=			
ANR	3061024	Identifier	_condor_exit_with_exec		3061015	0					
ANR	3061025	PrimaryExpression	1		3061015	1					
ANR	3061026	ReturnType	void		3061015	1					
ANR	3061027	Identifier	DaemonCore :: Forked_Child_Wants_Exit_By_Exec		3061015	2					
ANR	3061028	ParameterList	bool exit_by_exec		3061015	3					
ANR	3061029	Parameter	bool exit_by_exec	6266:45:188692:188708	3061015	0	True				
ANR	3061030	ParameterType	bool		3061015	0					
ANR	3061031	Identifier	exit_by_exec		3061015	1					
ANR	3061032	CFGEntryNode	ENTRY		3061015		True				
ANR	3061033	CFGExitNode	EXIT		3061015		True				
ANR	3061034	Symbol	exit_by_exec		3061015						
ANR	3061035	Symbol	_condor_exit_with_exec		3061015						
ANR	3061036	DeclStmt									
ANR	3061037	Decl							int	int	g_create_process_errorpipe
ANR	3061038	Function	enterCreateProcessChild	6276:0:188830:188962							
ANR	3061039	FunctionDef	enterCreateProcessChild (int errorpipe)		3061038	0					
ANR	3061040	CompoundStatement		6277:39:188874:188962	3061038	0					
ANR	3061041	ExpressionStatement	ASSERT ( g_create_process_errorpipe == - 1 )	6278:1:188877:188919	3061038	0	True				
ANR	3061042	CallExpression	ASSERT ( g_create_process_errorpipe == - 1 )		3061038	0					
ANR	3061043	Callee	ASSERT		3061038	0					
ANR	3061044	Identifier	ASSERT		3061038	0					
ANR	3061045	ArgumentList	g_create_process_errorpipe == - 1		3061038	1					
ANR	3061046	Argument	g_create_process_errorpipe == - 1		3061038	0					
ANR	3061047	EqualityExpression	g_create_process_errorpipe == - 1		3061038	0		==			
ANR	3061048	Identifier	g_create_process_errorpipe		3061038	0					
ANR	3061049	UnaryOperationExpression	- 1		3061038	1					
ANR	3061050	UnaryOperator	-		3061038	0					
ANR	3061051	PrimaryExpression	1		3061038	1					
ANR	3061052	ExpressionStatement	g_create_process_errorpipe = errorpipe	6279:1:188922:188960	3061038	1	True				
ANR	3061053	AssignmentExpression	g_create_process_errorpipe = errorpipe		3061038	0		=			
ANR	3061054	Identifier	g_create_process_errorpipe		3061038	0					
ANR	3061055	Identifier	errorpipe		3061038	1					
ANR	3061056	ReturnType	void		3061038	1					
ANR	3061057	Identifier	enterCreateProcessChild		3061038	2					
ANR	3061058	ParameterList	int errorpipe		3061038	3					
ANR	3061059	Parameter	int errorpipe	6277:24:188859:188871	3061038	0	True				
ANR	3061060	ParameterType	int		3061038	0					
ANR	3061061	Identifier	errorpipe		3061038	1					
ANR	3061062	CFGEntryNode	ENTRY		3061038		True				
ANR	3061063	CFGExitNode	EXIT		3061038		True				
ANR	3061064	Symbol	errorpipe		3061038						
ANR	3061065	Symbol	g_create_process_errorpipe		3061038						
ANR	3061066	Function	exitCreateProcessChild	6282:0:188965:189031							
ANR	3061067	FunctionDef	exitCreateProcessChild ()		3061066	0					
ANR	3061068	CompoundStatement		6283:25:188995:189031	3061066	0					
ANR	3061069	ExpressionStatement	g_create_process_errorpipe = - 1	6284:1:188998:189029	3061066	0	True				
ANR	3061070	AssignmentExpression	g_create_process_errorpipe = - 1		3061066	0		=			
ANR	3061071	Identifier	g_create_process_errorpipe		3061066	0					
ANR	3061072	UnaryOperationExpression	- 1		3061066	1					
ANR	3061073	UnaryOperator	-		3061066	0					
ANR	3061074	PrimaryExpression	1		3061066	1					
ANR	3061075	ReturnType	void		3061066	1					
ANR	3061076	Identifier	exitCreateProcessChild		3061066	2					
ANR	3061077	ParameterList			3061066	3					
ANR	3061078	CFGEntryNode	ENTRY		3061066		True				
ANR	3061079	CFGExitNode	EXIT		3061066		True				
ANR	3061080	Symbol	g_create_process_errorpipe		3061066						
ANR	3061081	DeclStmt									
ANR	3061082	Decl							void	void ( int status )	__real_exit
ANR	3061083	Function	__wrap_exit	6313:0:190431:192561							
ANR	3061084	FunctionDef	__wrap_exit (int status)		3061083	0					
ANR	3061085	CompoundStatement		6314:0:190460:192561	3061083	0					
ANR	3061086	IfStatement	if ( _condor_exit_with_exec == 0 && g_create_process_errorpipe == - 1 )		3061083	0					
ANR	3061087	Condition	_condor_exit_with_exec == 0 && g_create_process_errorpipe == - 1	6315:6:190468:190530	3061083	0	True				
ANR	3061088	AndExpression	_condor_exit_with_exec == 0 && g_create_process_errorpipe == - 1		3061083	0		&&			
ANR	3061089	EqualityExpression	_condor_exit_with_exec == 0		3061083	0		==			
ANR	3061090	Identifier	_condor_exit_with_exec		3061083	0					
ANR	3061091	PrimaryExpression	0		3061083	1					
ANR	3061092	EqualityExpression	g_create_process_errorpipe == - 1		3061083	1		==			
ANR	3061093	Identifier	g_create_process_errorpipe		3061083	0					
ANR	3061094	UnaryOperationExpression	- 1		3061083	1					
ANR	3061095	UnaryOperator	-		3061083	0					
ANR	3061096	PrimaryExpression	1		3061083	1					
ANR	3061097	CompoundStatement		2:72:73:73	3061083	1					
ANR	3061098	ExpressionStatement	__real_exit ( status )	6319:2:190696:190715	3061083	0	True				
ANR	3061099	CallExpression	__real_exit ( status )		3061083	0					
ANR	3061100	Callee	__real_exit		3061083	0					
ANR	3061101	Identifier	__real_exit		3061083	0					
ANR	3061102	ArgumentList	status		3061083	1					
ANR	3061103	Argument	status		3061083	0					
ANR	3061104	Identifier	status		3061083	0					
ANR	3061105	ExpressionStatement	fflush ( stdout )	6334:1:191157:191173	3061083	1	True				
ANR	3061106	CallExpression	fflush ( stdout )		3061083	0					
ANR	3061107	Callee	fflush		3061083	0					
ANR	3061108	Identifier	fflush		3061083	0					
ANR	3061109	ArgumentList	stdout		3061083	1					
ANR	3061110	Argument	stdout		3061083	0					
ANR	3061111	Identifier	stdout		3061083	0					
ANR	3061112	ExpressionStatement	fflush ( stderr )	6335:1:191176:191192	3061083	2	True				
ANR	3061113	CallExpression	fflush ( stderr )		3061083	0					
ANR	3061114	Callee	fflush		3061083	0					
ANR	3061115	Identifier	fflush		3061083	0					
ANR	3061116	ArgumentList	stderr		3061083	1					
ANR	3061117	Argument	stderr		3061083	0					
ANR	3061118	Identifier	stderr		3061083	0					
ANR	3061119	IfStatement	if ( g_create_process_errorpipe != - 1 )		3061083	3					
ANR	3061120	Condition	g_create_process_errorpipe != - 1	6337:5:191200:191231	3061083	0	True				
ANR	3061121	EqualityExpression	g_create_process_errorpipe != - 1		3061083	0		!=			
ANR	3061122	Identifier	g_create_process_errorpipe		3061083	0					
ANR	3061123	UnaryOperationExpression	- 1		3061083	1					
ANR	3061124	UnaryOperator	-		3061083	0					
ANR	3061125	PrimaryExpression	1		3061083	1					
ANR	3061126	CompoundStatement		27:2:901:941	3061083	1					
ANR	3061127	IdentifierDeclStatement	int child_errno = DaemonCore :: ERRNO_EXIT ;	6340:2:191362:191402	3061083	0	True				
ANR	3061128	IdentifierDecl	child_errno = DaemonCore :: ERRNO_EXIT		3061083	0					
ANR	3061129	IdentifierDeclType	int		3061083	0					
ANR	3061130	Identifier	child_errno		3061083	1					
ANR	3061131	AssignmentExpression	child_errno = DaemonCore :: ERRNO_EXIT		3061083	2		=			
ANR	3061132	Identifier	DaemonCore :: ERRNO_EXIT		3061083	0					
ANR	3061133	Identifier	DaemonCore :: ERRNO_EXIT		3061083	1					
ANR	3061134	ExpressionStatement	"write ( g_create_process_errorpipe , & child_errno , sizeof ( child_errno ) )"	6341:2:191406:191474	3061083	1	True				
ANR	3061135	CallExpression	"write ( g_create_process_errorpipe , & child_errno , sizeof ( child_errno ) )"		3061083	0					
ANR	3061136	Callee	write		3061083	0					
ANR	3061137	Identifier	write		3061083	0					
ANR	3061138	ArgumentList	g_create_process_errorpipe		3061083	1					
ANR	3061139	Argument	g_create_process_errorpipe		3061083	0					
ANR	3061140	Identifier	g_create_process_errorpipe		3061083	0					
ANR	3061141	Argument	& child_errno		3061083	1					
ANR	3061142	UnaryOperationExpression	& child_errno		3061083	0					
ANR	3061143	UnaryOperator	&		3061083	0					
ANR	3061144	Identifier	child_errno		3061083	1					
ANR	3061145	Argument	sizeof ( child_errno )		3061083	2					
ANR	3061146	SizeofExpression	sizeof ( child_errno )		3061083	0					
ANR	3061147	Sizeof	sizeof		3061083	0					
ANR	3061148	SizeofOperand	child_errno		3061083	1					
ANR	3061149	IfStatement	if ( _condor_exit_with_exec == 0 )		3061083	4					
ANR	3061150	Condition	_condor_exit_with_exec == 0	6344:6:191486:191512	3061083	0	True				
ANR	3061151	EqualityExpression	_condor_exit_with_exec == 0		3061083	0		==			
ANR	3061152	Identifier	_condor_exit_with_exec		3061083	0					
ANR	3061153	PrimaryExpression	0		3061083	1					
ANR	3061154	CompoundStatement		31:36:1055:1055	3061083	1					
ANR	3061155	ExpressionStatement	_exit ( status )	6345:2:191520:191533	3061083	0	True				
ANR	3061156	CallExpression	_exit ( status )		3061083	0					
ANR	3061157	Callee	_exit		3061083	0					
ANR	3061158	Identifier	_exit		3061083	0					
ANR	3061159	ArgumentList	status		3061083	1					
ANR	3061160	Argument	status		3061083	0					
ANR	3061161	Identifier	status		3061083	0					
ANR	3061162	IdentifierDeclStatement	const char * my_argv [ 2 ] ;	6348:1:191540:191562	3061083	5	True				
ANR	3061163	IdentifierDecl	* my_argv [ 2 ]		3061083	0					
ANR	3061164	IdentifierDeclType	const char * [ 2 ]		3061083	0					
ANR	3061165	Identifier	my_argv		3061083	1					
ANR	3061166	PrimaryExpression	2		3061083	2					
ANR	3061167	IdentifierDeclStatement	const char * my_env [ 1 ] ;	6349:1:191565:191586	3061083	6	True				
ANR	3061168	IdentifierDecl	* my_env [ 1 ]		3061083	0					
ANR	3061169	IdentifierDeclType	const char * [ 1 ]		3061083	0					
ANR	3061170	Identifier	my_env		3061083	1					
ANR	3061171	PrimaryExpression	1		3061083	2					
ANR	3061172	ExpressionStatement	my_argv [ 1 ] = NULL	6350:1:191589:191606	3061083	7	True				
ANR	3061173	AssignmentExpression	my_argv [ 1 ] = NULL		3061083	0		=			
ANR	3061174	ArrayIndexing	my_argv [ 1 ]		3061083	0					
ANR	3061175	Identifier	my_argv		3061083	0					
ANR	3061176	PrimaryExpression	1		3061083	1					
ANR	3061177	Identifier	NULL		3061083	1					
ANR	3061178	ExpressionStatement	my_env [ 0 ] = NULL	6351:1:191609:191625	3061083	8	True				
ANR	3061179	AssignmentExpression	my_env [ 0 ] = NULL		3061083	0		=			
ANR	3061180	ArrayIndexing	my_env [ 0 ]		3061083	0					
ANR	3061181	Identifier	my_env		3061083	0					
ANR	3061182	PrimaryExpression	0		3061083	1					
ANR	3061183	Identifier	NULL		3061083	1					
ANR	3061184	IfStatement	if ( status == 0 )		3061083	9					
ANR	3061185	Condition	status == 0	6354:6:191686:191696	3061083	0	True				
ANR	3061186	EqualityExpression	status == 0		3061083	0		==			
ANR	3061187	Identifier	status		3061083	0					
ANR	3061188	PrimaryExpression	0		3061083	1					
ANR	3061189	CompoundStatement		41:20:1239:1239	3061083	1					
ANR	3061190	ExpressionStatement	"my_argv [ 0 ] = ""/bin/true"""	6355:2:191704:191728	3061083	0	True				
ANR	3061191	AssignmentExpression	"my_argv [ 0 ] = ""/bin/true"""		3061083	0		=			
ANR	3061192	ArrayIndexing	my_argv [ 0 ]		3061083	0					
ANR	3061193	Identifier	my_argv		3061083	0					
ANR	3061194	PrimaryExpression	0		3061083	1					
ANR	3061195	PrimaryExpression	"""/bin/true"""		3061083	1					
ANR	3061196	Statement	execve	6356:2:191732:191737	3061083	1	True				
ANR	3061197	Statement	(	6356:8:191738:191738	3061083	2	True				
ANR	3061198	Statement	"""/bin/true"""	6356:10:191740:191750	3061083	3	True				
ANR	3061199	Statement	","	6356:21:191751:191751	3061083	4	True				
ANR	3061200	Statement	const_cast	6357:4:191757:191766	3061083	5	True				
ANR	3061201	Statement	<	6357:14:191767:191767	3061083	6	True				
ANR	3061202	Statement	char	6357:15:191768:191771	3061083	7	True				
ANR	3061203	Statement	*	6357:20:191773:191773	3061083	8	True				
ANR	3061204	Statement	const	6357:21:191774:191778	3061083	9	True				
ANR	3061205	Statement	*	6357:26:191779:191779	3061083	10	True				
ANR	3061206	Statement	>	6357:27:191780:191780	3061083	11	True				
ANR	3061207	Statement	(	6357:28:191781:191781	3061083	12	True				
ANR	3061208	Statement	my_argv	6357:29:191782:191788	3061083	13	True				
ANR	3061209	Statement	)	6357:36:191789:191789	3061083	14	True				
ANR	3061210	Statement	","	6357:37:191790:191790	3061083	15	True				
ANR	3061211	Statement	const_cast	6358:4:191796:191805	3061083	16	True				
ANR	3061212	Statement	<	6358:14:191806:191806	3061083	17	True				
ANR	3061213	Statement	char	6358:15:191807:191810	3061083	18	True				
ANR	3061214	Statement	*	6358:20:191812:191812	3061083	19	True				
ANR	3061215	Statement	const	6358:21:191813:191817	3061083	20	True				
ANR	3061216	Statement	*	6358:26:191818:191818	3061083	21	True				
ANR	3061217	Statement	>	6358:27:191819:191819	3061083	22	True				
ANR	3061218	Statement	(	6358:28:191820:191820	3061083	23	True				
ANR	3061219	Statement	my_env	6358:29:191821:191826	3061083	24	True				
ANR	3061220	Statement	)	6358:35:191827:191827	3061083	25	True				
ANR	3061221	Statement	)	6358:38:191830:191830	3061083	26	True				
ANR	3061222	ExpressionStatement		6358:39:191831:191831	3061083	27	True				
ANR	3061223	ExpressionStatement	"my_argv [ 0 ] = ""/usr/bin/true"""	6359:2:191835:191863	3061083	28	True				
ANR	3061224	AssignmentExpression	"my_argv [ 0 ] = ""/usr/bin/true"""		3061083	0		=			
ANR	3061225	ArrayIndexing	my_argv [ 0 ]		3061083	0					
ANR	3061226	Identifier	my_argv		3061083	0					
ANR	3061227	PrimaryExpression	0		3061083	1					
ANR	3061228	PrimaryExpression	"""/usr/bin/true"""		3061083	1					
ANR	3061229	Statement	execve	6360:2:191867:191872	3061083	29	True				
ANR	3061230	Statement	(	6360:8:191873:191873	3061083	30	True				
ANR	3061231	Statement	"""/usr/bin/true"""	6360:10:191875:191889	3061083	31	True				
ANR	3061232	Statement	","	6360:25:191890:191890	3061083	32	True				
ANR	3061233	Statement	const_cast	6361:4:191896:191905	3061083	33	True				
ANR	3061234	Statement	<	6361:14:191906:191906	3061083	34	True				
ANR	3061235	Statement	char	6361:15:191907:191910	3061083	35	True				
ANR	3061236	Statement	*	6361:20:191912:191912	3061083	36	True				
ANR	3061237	Statement	const	6361:21:191913:191917	3061083	37	True				
ANR	3061238	Statement	*	6361:26:191918:191918	3061083	38	True				
ANR	3061239	Statement	>	6361:27:191919:191919	3061083	39	True				
ANR	3061240	Statement	(	6361:28:191920:191920	3061083	40	True				
ANR	3061241	Statement	my_argv	6361:29:191921:191927	3061083	41	True				
ANR	3061242	Statement	)	6361:36:191928:191928	3061083	42	True				
ANR	3061243	Statement	","	6361:37:191929:191929	3061083	43	True				
ANR	3061244	Statement	const_cast	6362:4:191935:191944	3061083	44	True				
ANR	3061245	Statement	<	6362:14:191945:191945	3061083	45	True				
ANR	3061246	Statement	char	6362:15:191946:191949	3061083	46	True				
ANR	3061247	Statement	*	6362:20:191951:191951	3061083	47	True				
ANR	3061248	Statement	const	6362:21:191952:191956	3061083	48	True				
ANR	3061249	Statement	*	6362:26:191957:191957	3061083	49	True				
ANR	3061250	Statement	>	6362:27:191958:191958	3061083	50	True				
ANR	3061251	Statement	(	6362:28:191959:191959	3061083	51	True				
ANR	3061252	Statement	my_env	6362:29:191960:191965	3061083	52	True				
ANR	3061253	Statement	)	6362:35:191966:191966	3061083	53	True				
ANR	3061254	Statement	)	6362:38:191969:191969	3061083	54	True				
ANR	3061255	ExpressionStatement		6362:39:191970:191970	3061083	55	True				
ANR	3061256	ElseStatement	else		3061083	0					
ANR	3061257	CompoundStatement		50:8:1519:1519	3061083	0					
ANR	3061258	ExpressionStatement	"my_argv [ 0 ] = ""/bin/false"""	6364:2:191984:192009	3061083	0	True				
ANR	3061259	AssignmentExpression	"my_argv [ 0 ] = ""/bin/false"""		3061083	0		=			
ANR	3061260	ArrayIndexing	my_argv [ 0 ]		3061083	0					
ANR	3061261	Identifier	my_argv		3061083	0					
ANR	3061262	PrimaryExpression	0		3061083	1					
ANR	3061263	PrimaryExpression	"""/bin/false"""		3061083	1					
ANR	3061264	Statement	execve	6365:2:192013:192018	3061083	1	True				
ANR	3061265	Statement	(	6365:8:192019:192019	3061083	2	True				
ANR	3061266	Statement	"""/bin/false"""	6365:10:192021:192032	3061083	3	True				
ANR	3061267	Statement	","	6365:22:192033:192033	3061083	4	True				
ANR	3061268	Statement	const_cast	6366:4:192039:192048	3061083	5	True				
ANR	3061269	Statement	<	6366:14:192049:192049	3061083	6	True				
ANR	3061270	Statement	char	6366:15:192050:192053	3061083	7	True				
ANR	3061271	Statement	*	6366:20:192055:192055	3061083	8	True				
ANR	3061272	Statement	const	6366:21:192056:192060	3061083	9	True				
ANR	3061273	Statement	*	6366:26:192061:192061	3061083	10	True				
ANR	3061274	Statement	>	6366:27:192062:192062	3061083	11	True				
ANR	3061275	Statement	(	6366:28:192063:192063	3061083	12	True				
ANR	3061276	Statement	my_argv	6366:29:192064:192070	3061083	13	True				
ANR	3061277	Statement	)	6366:36:192071:192071	3061083	14	True				
ANR	3061278	Statement	","	6366:37:192072:192072	3061083	15	True				
ANR	3061279	Statement	const_cast	6367:4:192078:192087	3061083	16	True				
ANR	3061280	Statement	<	6367:14:192088:192088	3061083	17	True				
ANR	3061281	Statement	char	6367:15:192089:192092	3061083	18	True				
ANR	3061282	Statement	*	6367:20:192094:192094	3061083	19	True				
ANR	3061283	Statement	const	6367:21:192095:192099	3061083	20	True				
ANR	3061284	Statement	*	6367:26:192100:192100	3061083	21	True				
ANR	3061285	Statement	>	6367:27:192101:192101	3061083	22	True				
ANR	3061286	Statement	(	6367:28:192102:192102	3061083	23	True				
ANR	3061287	Statement	my_env	6367:29:192103:192108	3061083	24	True				
ANR	3061288	Statement	)	6367:35:192109:192109	3061083	25	True				
ANR	3061289	Statement	)	6367:38:192112:192112	3061083	26	True				
ANR	3061290	ExpressionStatement		6367:39:192113:192113	3061083	27	True				
ANR	3061291	ExpressionStatement	"my_argv [ 0 ] = ""/usr/bin/false"""	6368:2:192117:192146	3061083	28	True				
ANR	3061292	AssignmentExpression	"my_argv [ 0 ] = ""/usr/bin/false"""		3061083	0		=			
ANR	3061293	ArrayIndexing	my_argv [ 0 ]		3061083	0					
ANR	3061294	Identifier	my_argv		3061083	0					
ANR	3061295	PrimaryExpression	0		3061083	1					
ANR	3061296	PrimaryExpression	"""/usr/bin/false"""		3061083	1					
ANR	3061297	Statement	execve	6369:2:192150:192155	3061083	29	True				
ANR	3061298	Statement	(	6369:8:192156:192156	3061083	30	True				
ANR	3061299	Statement	"""/usr/bin/false"""	6369:10:192158:192173	3061083	31	True				
ANR	3061300	Statement	","	6369:26:192174:192174	3061083	32	True				
ANR	3061301	Statement	const_cast	6370:4:192180:192189	3061083	33	True				
ANR	3061302	Statement	<	6370:14:192190:192190	3061083	34	True				
ANR	3061303	Statement	char	6370:15:192191:192194	3061083	35	True				
ANR	3061304	Statement	*	6370:20:192196:192196	3061083	36	True				
ANR	3061305	Statement	const	6370:21:192197:192201	3061083	37	True				
ANR	3061306	Statement	*	6370:26:192202:192202	3061083	38	True				
ANR	3061307	Statement	>	6370:27:192203:192203	3061083	39	True				
ANR	3061308	Statement	(	6370:28:192204:192204	3061083	40	True				
ANR	3061309	Statement	my_argv	6370:29:192205:192211	3061083	41	True				
ANR	3061310	Statement	)	6370:36:192212:192212	3061083	42	True				
ANR	3061311	Statement	","	6370:37:192213:192213	3061083	43	True				
ANR	3061312	Statement	const_cast	6371:4:192219:192228	3061083	44	True				
ANR	3061313	Statement	<	6371:14:192229:192229	3061083	45	True				
ANR	3061314	Statement	char	6371:15:192230:192233	3061083	46	True				
ANR	3061315	Statement	*	6371:20:192235:192235	3061083	47	True				
ANR	3061316	Statement	const	6371:21:192236:192240	3061083	48	True				
ANR	3061317	Statement	*	6371:26:192241:192241	3061083	49	True				
ANR	3061318	Statement	>	6371:27:192242:192242	3061083	50	True				
ANR	3061319	Statement	(	6371:28:192243:192243	3061083	51	True				
ANR	3061320	Statement	my_env	6371:29:192244:192249	3061083	52	True				
ANR	3061321	Statement	)	6371:35:192250:192250	3061083	53	True				
ANR	3061322	Statement	)	6371:38:192253:192253	3061083	54	True				
ANR	3061323	ExpressionStatement		6371:39:192254:192254	3061083	55	True				
ANR	3061324	ExpressionStatement	_condor_exit_with_exec = 0	6381:1:192509:192535	3061083	10	True				
ANR	3061325	AssignmentExpression	_condor_exit_with_exec = 0		3061083	0		=			
ANR	3061326	Identifier	_condor_exit_with_exec		3061083	0					
ANR	3061327	PrimaryExpression	0		3061083	1					
ANR	3061328	ExpressionStatement	_exit ( status ? 1 : 0 )	6382:1:192538:192559	3061083	11	True				
ANR	3061329	CallExpression	_exit ( status ? 1 : 0 )		3061083	0					
ANR	3061330	Callee	_exit		3061083	0					
ANR	3061331	Identifier	_exit		3061083	0					
ANR	3061332	ArgumentList	status ? 1 : 0		3061083	1					
ANR	3061333	Argument	status ? 1 : 0		3061083	0					
ANR	3061334	ConditionalExpression	status ? 1 : 0		3061083	0					
ANR	3061335	Condition	status		3061083	0					
ANR	3061336	Identifier	status		3061083	0					
ANR	3061337	PrimaryExpression	1		3061083	1					
ANR	3061338	PrimaryExpression	0		3061083	2					
ANR	3061339	ReturnType	void		3061083	1					
ANR	3061340	Identifier	__wrap_exit		3061083	2					
ANR	3061341	ParameterList	int status		3061083	3					
ANR	3061342	Parameter	int status	6313:17:190448:190457	3061083	0	True				
ANR	3061343	ParameterType	int		3061083	0					
ANR	3061344	Identifier	status		3061083	1					
ANR	3061345	CFGEntryNode	ENTRY		3061083		True				
ANR	3061346	CFGExitNode	EXIT		3061083		True				
ANR	3061347	Symbol	DaemonCore :: ERRNO_EXIT		3061083						
ANR	3061348	Symbol	NULL		3061083						
ANR	3061349	Symbol	stdout		3061083						
ANR	3061350	Symbol	child_errno		3061083						
ANR	3061351	Symbol	& child_errno		3061083						
ANR	3061352	Symbol	g_create_process_errorpipe		3061083						
ANR	3061353	Symbol	stderr		3061083						
ANR	3061354	Symbol	my_env		3061083						
ANR	3061355	Symbol	* my_argv		3061083						
ANR	3061356	Symbol	my_argv		3061083						
ANR	3061357	Symbol	_condor_exit_with_exec		3061083						
ANR	3061358	Symbol	* my_env		3061083						
ANR	3061359	Symbol	status		3061083						
ANR	3061360	Function	DaemonCore :: Register_Family	6397:0:193151:196577							
ANR	3061361	FunctionDef	"DaemonCore :: Register_Family (pid_t child_pid , pid_t parent_pid , int max_snapshot_interval , PidEnvID * penvid , const char * login , gid_t * group , const char * cgroup , const char * glexec_proxy)"		3061360	0					
ANR	3061362	CompoundStatement		6406:0:193545:196577	3061360	0					
ANR	3061363	IdentifierDeclStatement	double begintime = UtcTime :: getTimeDouble ( ) ;	6407:4:193551:193594	3061360	0	True				
ANR	3061364	IdentifierDecl	begintime = UtcTime :: getTimeDouble ( )		3061360	0					
ANR	3061365	IdentifierDeclType	double		3061360	0					
ANR	3061366	Identifier	begintime		3061360	1					
ANR	3061367	AssignmentExpression	begintime = UtcTime :: getTimeDouble ( )		3061360	2		=			
ANR	3061368	Identifier	begintime		3061360	0					
ANR	3061369	CallExpression	UtcTime :: getTimeDouble ( )		3061360	1					
ANR	3061370	Callee	UtcTime :: getTimeDouble		3061360	0					
ANR	3061371	Identifier	UtcTime :: getTimeDouble		3061360	0					
ANR	3061372	ArgumentList			3061360	1					
ANR	3061373	IdentifierDeclStatement	double runtime = begintime ;	6408:4:193600:193626	3061360	1	True				
ANR	3061374	IdentifierDecl	runtime = begintime		3061360	0					
ANR	3061375	IdentifierDeclType	double		3061360	0					
ANR	3061376	Identifier	runtime		3061360	1					
ANR	3061377	AssignmentExpression	runtime = begintime		3061360	2		=			
ANR	3061378	Identifier	begintime		3061360	0					
ANR	3061379	Identifier	begintime		3061360	1					
ANR	3061380	IdentifierDeclStatement	bool success = false ;	6410:1:193630:193650	3061360	2	True				
ANR	3061381	IdentifierDecl	success = false		3061360	0					
ANR	3061382	IdentifierDeclType	bool		3061360	0					
ANR	3061383	Identifier	success		3061360	1					
ANR	3061384	AssignmentExpression	success = false		3061360	2		=			
ANR	3061385	Identifier	false		3061360	0					
ANR	3061386	Identifier	false		3061360	1					
ANR	3061387	IdentifierDeclStatement	bool family_registered = false ;	6411:1:193653:193683	3061360	3	True				
ANR	3061388	IdentifierDecl	family_registered = false		3061360	0					
ANR	3061389	IdentifierDeclType	bool		3061360	0					
ANR	3061390	Identifier	family_registered		3061360	1					
ANR	3061391	AssignmentExpression	family_registered = false		3061360	2		=			
ANR	3061392	Identifier	false		3061360	0					
ANR	3061393	Identifier	false		3061360	1					
ANR	3061394	IfStatement	"if ( ! m_proc_family -> register_subfamily ( child_pid , parent_pid , max_snapshot_interval ) )"		3061360	4					
ANR	3061395	Condition	"! m_proc_family -> register_subfamily ( child_pid , parent_pid , max_snapshot_interval )"	6412:5:193690:193849	3061360	0	True				
ANR	3061396	UnaryOperationExpression	"! m_proc_family -> register_subfamily ( child_pid , parent_pid , max_snapshot_interval )"		3061360	0					
ANR	3061397	UnaryOperator	!		3061360	0					
ANR	3061398	CallExpression	"m_proc_family -> register_subfamily ( child_pid , parent_pid , max_snapshot_interval )"		3061360	1					
ANR	3061399	Callee	m_proc_family -> register_subfamily		3061360	0					
ANR	3061400	PtrMemberAccess	m_proc_family -> register_subfamily		3061360	0					
ANR	3061401	Identifier	m_proc_family		3061360	0					
ANR	3061402	Identifier	register_subfamily		3061360	1					
ANR	3061403	ArgumentList	child_pid		3061360	1					
ANR	3061404	Argument	child_pid		3061360	0					
ANR	3061405	Identifier	child_pid		3061360	0					
ANR	3061406	Argument	parent_pid		3061360	1					
ANR	3061407	Identifier	parent_pid		3061360	0					
ANR	3061408	Argument	max_snapshot_interval		3061360	2					
ANR	3061409	Identifier	max_snapshot_interval		3061360	0					
ANR	3061410	CompoundStatement		10:1:307:307	3061360	1					
ANR	3061411	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: error registering family for pid %u\\n"" , child_pid )"	6416:2:193857:193962	3061360	0	True				
ANR	3061412	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: error registering family for pid %u\\n"" , child_pid )"		3061360	0					
ANR	3061413	Callee	dprintf		3061360	0					
ANR	3061414	Identifier	dprintf		3061360	0					
ANR	3061415	ArgumentList	D_ALWAYS		3061360	1					
ANR	3061416	Argument	D_ALWAYS		3061360	0					
ANR	3061417	Identifier	D_ALWAYS		3061360	0					
ANR	3061418	Argument	"""Create_Process: error registering family for pid %u\\n"""		3061360	1					
ANR	3061419	PrimaryExpression	"""Create_Process: error registering family for pid %u\\n"""		3061360	0					
ANR	3061420	Argument	child_pid		3061360	2					
ANR	3061421	Identifier	child_pid		3061360	0					
ANR	3061422	GotoStatement	goto REGISTER_FAMILY_DONE ;	6419:2:193966:193991	3061360	1	True				
ANR	3061423	Identifier	REGISTER_FAMILY_DONE		3061360	0					
ANR	3061424	ExpressionStatement	family_registered = true	6421:1:193997:194021	3061360	5	True				
ANR	3061425	AssignmentExpression	family_registered = true		3061360	0		=			
ANR	3061426	Identifier	family_registered		3061360	0					
ANR	3061427	Identifier	true		3061360	1					
ANR	3061428	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRregister_subfamily"" , IF_VERBOSEPUB , runtime )"	6422:4:194027:194111	3061360	6	True				
ANR	3061429	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRregister_subfamily"" , IF_VERBOSEPUB , runtime )"		3061360	0		=			
ANR	3061430	Identifier	runtime		3061360	0					
ANR	3061431	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRregister_subfamily"" , IF_VERBOSEPUB , runtime )"		3061360	1					
ANR	3061432	Callee	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061433	MemberAccess	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061434	Identifier	dc_stats		3061360	0					
ANR	3061435	Identifier	AddRuntimeSample		3061360	1					
ANR	3061436	ArgumentList	"""DCRregister_subfamily"""		3061360	1					
ANR	3061437	Argument	"""DCRregister_subfamily"""		3061360	0					
ANR	3061438	PrimaryExpression	"""DCRregister_subfamily"""		3061360	0					
ANR	3061439	Argument	IF_VERBOSEPUB		3061360	1					
ANR	3061440	Identifier	IF_VERBOSEPUB		3061360	0					
ANR	3061441	Argument	runtime		3061360	2					
ANR	3061442	Identifier	runtime		3061360	0					
ANR	3061443	IfStatement	if ( penvid != NULL )		3061360	7					
ANR	3061444	Condition	penvid != NULL	6423:5:194118:194131	3061360	0	True				
ANR	3061445	EqualityExpression	penvid != NULL		3061360	0		!=			
ANR	3061446	Identifier	penvid		3061360	0					
ANR	3061447	Identifier	NULL		3061360	1					
ANR	3061448	CompoundStatement		18:21:588:588	3061360	1					
ANR	3061449	IfStatement	"if ( ! m_proc_family -> track_family_via_environment ( child_pid , * penvid ) )"		3061360	0					
ANR	3061450	Condition	"! m_proc_family -> track_family_via_environment ( child_pid , * penvid )"	6424:6:194142:194205	3061360	0	True				
ANR	3061451	UnaryOperationExpression	"! m_proc_family -> track_family_via_environment ( child_pid , * penvid )"		3061360	0					
ANR	3061452	UnaryOperator	!		3061360	0					
ANR	3061453	CallExpression	"m_proc_family -> track_family_via_environment ( child_pid , * penvid )"		3061360	1					
ANR	3061454	Callee	m_proc_family -> track_family_via_environment		3061360	0					
ANR	3061455	PtrMemberAccess	m_proc_family -> track_family_via_environment		3061360	0					
ANR	3061456	Identifier	m_proc_family		3061360	0					
ANR	3061457	Identifier	track_family_via_environment		3061360	1					
ANR	3061458	ArgumentList	child_pid		3061360	1					
ANR	3061459	Argument	child_pid		3061360	0					
ANR	3061460	Identifier	child_pid		3061360	0					
ANR	3061461	Argument	* penvid		3061360	1					
ANR	3061462	UnaryOperationExpression	* penvid		3061360	0					
ANR	3061463	UnaryOperator	*		3061360	0					
ANR	3061464	Identifier	penvid		3061360	1					
ANR	3061465	CompoundStatement		19:72:662:662	3061360	1					
ANR	3061466	Statement	dprintf	6425:3:194213:194219	3061360	0	True				
ANR	3061467	Statement	(	6425:10:194220:194220	3061360	1	True				
ANR	3061468	Statement	D_ALWAYS	6425:11:194221:194228	3061360	2	True				
ANR	3061469	Statement	","	6425:19:194229:194229	3061360	3	True				
ANR	3061470	Statement	"""Create_Process: error tracking family """	6426:11:194242:194281	3061360	4	True				
ANR	3061471	Statement	"""with root %u via environment\\n"""	6427:15:194298:194329	3061360	5	True				
ANR	3061472	Statement	","	6427:47:194330:194330	3061360	6	True				
ANR	3061473	Statement	child_pid	6428:5:194337:194345	3061360	7	True				
ANR	3061474	Statement	)	6428:14:194346:194346	3061360	8	True				
ANR	3061475	ExpressionStatement		6428:15:194347:194347	3061360	9	True				
ANR	3061476	GotoStatement	goto REGISTER_FAMILY_DONE ;	6429:3:194352:194377	3061360	10	True				
ANR	3061477	Identifier	REGISTER_FAMILY_DONE		3061360	0					
ANR	3061478	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_env"" , IF_VERBOSEPUB , runtime )"	6431:7:194390:194476	3061360	1	True				
ANR	3061479	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_env"" , IF_VERBOSEPUB , runtime )"		3061360	0		=			
ANR	3061480	Identifier	runtime		3061360	0					
ANR	3061481	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_env"" , IF_VERBOSEPUB , runtime )"		3061360	1					
ANR	3061482	Callee	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061483	MemberAccess	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061484	Identifier	dc_stats		3061360	0					
ANR	3061485	Identifier	AddRuntimeSample		3061360	1					
ANR	3061486	ArgumentList	"""DCRtrack_family_via_env"""		3061360	1					
ANR	3061487	Argument	"""DCRtrack_family_via_env"""		3061360	0					
ANR	3061488	PrimaryExpression	"""DCRtrack_family_via_env"""		3061360	0					
ANR	3061489	Argument	IF_VERBOSEPUB		3061360	1					
ANR	3061490	Identifier	IF_VERBOSEPUB		3061360	0					
ANR	3061491	Argument	runtime		3061360	2					
ANR	3061492	Identifier	runtime		3061360	0					
ANR	3061493	IfStatement	if ( login != NULL )		3061360	8					
ANR	3061494	Condition	login != NULL	6433:5:194486:194498	3061360	0	True				
ANR	3061495	EqualityExpression	login != NULL		3061360	0		!=			
ANR	3061496	Identifier	login		3061360	0					
ANR	3061497	Identifier	NULL		3061360	1					
ANR	3061498	CompoundStatement		28:20:955:955	3061360	1					
ANR	3061499	IfStatement	"if ( ! m_proc_family -> track_family_via_login ( child_pid , login ) )"		3061360	0					
ANR	3061500	Condition	"! m_proc_family -> track_family_via_login ( child_pid , login )"	6434:6:194509:194564	3061360	0	True				
ANR	3061501	UnaryOperationExpression	"! m_proc_family -> track_family_via_login ( child_pid , login )"		3061360	0					
ANR	3061502	UnaryOperator	!		3061360	0					
ANR	3061503	CallExpression	"m_proc_family -> track_family_via_login ( child_pid , login )"		3061360	1					
ANR	3061504	Callee	m_proc_family -> track_family_via_login		3061360	0					
ANR	3061505	PtrMemberAccess	m_proc_family -> track_family_via_login		3061360	0					
ANR	3061506	Identifier	m_proc_family		3061360	0					
ANR	3061507	Identifier	track_family_via_login		3061360	1					
ANR	3061508	ArgumentList	child_pid		3061360	1					
ANR	3061509	Argument	child_pid		3061360	0					
ANR	3061510	Identifier	child_pid		3061360	0					
ANR	3061511	Argument	login		3061360	1					
ANR	3061512	Identifier	login		3061360	0					
ANR	3061513	CompoundStatement		29:64:1021:1021	3061360	1					
ANR	3061514	Statement	dprintf	6435:3:194572:194578	3061360	0	True				
ANR	3061515	Statement	(	6435:10:194579:194579	3061360	1	True				
ANR	3061516	Statement	D_ALWAYS	6435:11:194580:194587	3061360	2	True				
ANR	3061517	Statement	","	6435:19:194588:194588	3061360	3	True				
ANR	3061518	Statement	"""Create_Process: error tracking family """	6436:11:194601:194640	3061360	4	True				
ANR	3061519	Statement	"""with root %u via login (name: %s)\\n"""	6437:15:194657:194693	3061360	5	True				
ANR	3061520	Statement	","	6437:52:194694:194694	3061360	6	True				
ANR	3061521	Statement	child_pid	6438:11:194707:194715	3061360	7	True				
ANR	3061522	Statement	","	6438:20:194716:194716	3061360	8	True				
ANR	3061523	Statement	login	6439:11:194729:194733	3061360	9	True				
ANR	3061524	Statement	)	6439:16:194734:194734	3061360	10	True				
ANR	3061525	ExpressionStatement		6439:17:194735:194735	3061360	11	True				
ANR	3061526	GotoStatement	goto REGISTER_FAMILY_DONE ;	6440:3:194740:194765	3061360	12	True				
ANR	3061527	Identifier	REGISTER_FAMILY_DONE		3061360	0					
ANR	3061528	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_login"" , IF_VERBOSEPUB , runtime )"	6442:7:194778:194866	3061360	1	True				
ANR	3061529	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_login"" , IF_VERBOSEPUB , runtime )"		3061360	0		=			
ANR	3061530	Identifier	runtime		3061360	0					
ANR	3061531	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_login"" , IF_VERBOSEPUB , runtime )"		3061360	1					
ANR	3061532	Callee	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061533	MemberAccess	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061534	Identifier	dc_stats		3061360	0					
ANR	3061535	Identifier	AddRuntimeSample		3061360	1					
ANR	3061536	ArgumentList	"""DCRtrack_family_via_login"""		3061360	1					
ANR	3061537	Argument	"""DCRtrack_family_via_login"""		3061360	0					
ANR	3061538	PrimaryExpression	"""DCRtrack_family_via_login"""		3061360	0					
ANR	3061539	Argument	IF_VERBOSEPUB		3061360	1					
ANR	3061540	Identifier	IF_VERBOSEPUB		3061360	0					
ANR	3061541	Argument	runtime		3061360	2					
ANR	3061542	Identifier	runtime		3061360	0					
ANR	3061543	IfStatement	if ( group != NULL )		3061360	9					
ANR	3061544	Condition	group != NULL	6444:5:194876:194888	3061360	0	True				
ANR	3061545	EqualityExpression	group != NULL		3061360	0		!=			
ANR	3061546	Identifier	group		3061360	0					
ANR	3061547	Identifier	NULL		3061360	1					
ANR	3061548	CompoundStatement		39:20:1345:1345	3061360	1					
ANR	3061549	IfStatement	"if ( ! m_proc_family -> track_family_via_allocated_supplementary_group ( child_pid , * group ) )"		3061360	0					
ANR	3061550	Condition	"! m_proc_family -> track_family_via_allocated_supplementary_group ( child_pid , * group )"	6446:6:194918:195002	3061360	0	True				
ANR	3061551	UnaryOperationExpression	"! m_proc_family -> track_family_via_allocated_supplementary_group ( child_pid , * group )"		3061360	0					
ANR	3061552	UnaryOperator	!		3061360	0					
ANR	3061553	CallExpression	"m_proc_family -> track_family_via_allocated_supplementary_group ( child_pid , * group )"		3061360	1					
ANR	3061554	Callee	m_proc_family -> track_family_via_allocated_supplementary_group		3061360	0					
ANR	3061555	PtrMemberAccess	m_proc_family -> track_family_via_allocated_supplementary_group		3061360	0					
ANR	3061556	Identifier	m_proc_family		3061360	0					
ANR	3061557	Identifier	track_family_via_allocated_supplementary_group		3061360	1					
ANR	3061558	ArgumentList	child_pid		3061360	1					
ANR	3061559	Argument	child_pid		3061360	0					
ANR	3061560	Identifier	child_pid		3061360	0					
ANR	3061561	Argument	* group		3061360	1					
ANR	3061562	UnaryOperationExpression	* group		3061360	0					
ANR	3061563	UnaryOperator	*		3061360	0					
ANR	3061564	Identifier	group		3061360	1					
ANR	3061565	CompoundStatement		43:2:1461:1461	3061360	1					
ANR	3061566	Statement	dprintf	6449:3:195012:195018	3061360	0	True				
ANR	3061567	Statement	(	6449:10:195019:195019	3061360	1	True				
ANR	3061568	Statement	D_ALWAYS	6449:11:195020:195027	3061360	2	True				
ANR	3061569	Statement	","	6449:19:195028:195028	3061360	3	True				
ANR	3061570	Statement	"""Create_Process: error tracking family """	6450:11:195041:195080	3061360	4	True				
ANR	3061571	Statement	"""with root %u via group ID\\n"""	6451:15:195097:195125	3061360	5	True				
ANR	3061572	Statement	","	6451:44:195126:195126	3061360	6	True				
ANR	3061573	Statement	child_pid	6452:11:195139:195147	3061360	7	True				
ANR	3061574	Statement	)	6452:20:195148:195148	3061360	8	True				
ANR	3061575	ExpressionStatement		6452:21:195149:195149	3061360	9	True				
ANR	3061576	GotoStatement	goto REGISTER_FAMILY_DONE ;	6453:3:195154:195179	3061360	10	True				
ANR	3061577	Identifier	REGISTER_FAMILY_DONE		3061360	0					
ANR	3061578	IfStatement	if ( cgroup != NULL )		3061360	10					
ANR	3061579	Condition	cgroup != NULL	6460:5:195301:195314	3061360	0	True				
ANR	3061580	EqualityExpression	cgroup != NULL		3061360	0		!=			
ANR	3061581	Identifier	cgroup		3061360	0					
ANR	3061582	Identifier	NULL		3061360	1					
ANR	3061583	CompoundStatement		55:21:1771:1771	3061360	1					
ANR	3061584	IfStatement	"if ( ! m_proc_family -> track_family_via_cgroup ( child_pid , cgroup ) )"		3061360	0					
ANR	3061585	Condition	"! m_proc_family -> track_family_via_cgroup ( child_pid , cgroup )"	6462:6:195357:195414	3061360	0	True				
ANR	3061586	UnaryOperationExpression	"! m_proc_family -> track_family_via_cgroup ( child_pid , cgroup )"		3061360	0					
ANR	3061587	UnaryOperator	!		3061360	0					
ANR	3061588	CallExpression	"m_proc_family -> track_family_via_cgroup ( child_pid , cgroup )"		3061360	1					
ANR	3061589	Callee	m_proc_family -> track_family_via_cgroup		3061360	0					
ANR	3061590	PtrMemberAccess	m_proc_family -> track_family_via_cgroup		3061360	0					
ANR	3061591	Identifier	m_proc_family		3061360	0					
ANR	3061592	Identifier	track_family_via_cgroup		3061360	1					
ANR	3061593	ArgumentList	child_pid		3061360	1					
ANR	3061594	Argument	child_pid		3061360	0					
ANR	3061595	Identifier	child_pid		3061360	0					
ANR	3061596	Argument	cgroup		3061360	1					
ANR	3061597	Identifier	cgroup		3061360	0					
ANR	3061598	CompoundStatement		58:2:1873:1873	3061360	1					
ANR	3061599	Statement	dprintf	6464:3:195424:195430	3061360	0	True				
ANR	3061600	Statement	(	6464:10:195431:195431	3061360	1	True				
ANR	3061601	Statement	D_ALWAYS	6464:11:195432:195439	3061360	2	True				
ANR	3061602	Statement	","	6464:19:195440:195440	3061360	3	True				
ANR	3061603	Statement	"""Create_Process: error tracking family """	6465:4:195446:195485	3061360	4	True				
ANR	3061604	Statement	"""with root %u via cgroup %s\\n"""	6466:8:195495:195524	3061360	5	True				
ANR	3061605	Statement	","	6466:38:195525:195525	3061360	6	True				
ANR	3061606	Statement	child_pid	6467:4:195531:195539	3061360	7	True				
ANR	3061607	Statement	","	6467:13:195540:195540	3061360	8	True				
ANR	3061608	Statement	cgroup	6467:15:195542:195547	3061360	9	True				
ANR	3061609	Statement	)	6467:21:195548:195548	3061360	10	True				
ANR	3061610	ExpressionStatement		6467:22:195549:195549	3061360	11	True				
ANR	3061611	GotoStatement	goto REGISTER_FAMILY_DONE ;	6468:3:195554:195579	3061360	12	True				
ANR	3061612	Identifier	REGISTER_FAMILY_DONE		3061360	0					
ANR	3061613	IfStatement	if ( glexec_proxy != NULL )		3061360	11					
ANR	3061614	Condition	glexec_proxy != NULL	6475:5:195700:195719	3061360	0	True				
ANR	3061615	EqualityExpression	glexec_proxy != NULL		3061360	0		!=			
ANR	3061616	Identifier	glexec_proxy		3061360	0					
ANR	3061617	Identifier	NULL		3061360	1					
ANR	3061618	CompoundStatement		70:27:2176:2176	3061360	1					
ANR	3061619	IfStatement	"if ( ! m_proc_family -> use_glexec_for_family ( child_pid , glexec_proxy ) )"		3061360	0					
ANR	3061620	Condition	"! m_proc_family -> use_glexec_for_family ( child_pid , glexec_proxy )"	6476:6:195730:195835	3061360	0	True				
ANR	3061621	UnaryOperationExpression	"! m_proc_family -> use_glexec_for_family ( child_pid , glexec_proxy )"		3061360	0					
ANR	3061622	UnaryOperator	!		3061360	0					
ANR	3061623	CallExpression	"m_proc_family -> use_glexec_for_family ( child_pid , glexec_proxy )"		3061360	1					
ANR	3061624	Callee	m_proc_family -> use_glexec_for_family		3061360	0					
ANR	3061625	PtrMemberAccess	m_proc_family -> use_glexec_for_family		3061360	0					
ANR	3061626	Identifier	m_proc_family		3061360	0					
ANR	3061627	Identifier	use_glexec_for_family		3061360	1					
ANR	3061628	ArgumentList	child_pid		3061360	1					
ANR	3061629	Argument	child_pid		3061360	0					
ANR	3061630	Identifier	child_pid		3061360	0					
ANR	3061631	Argument	glexec_proxy		3061360	1					
ANR	3061632	Identifier	glexec_proxy		3061360	0					
ANR	3061633	CompoundStatement		73:2:2294:2294	3061360	1					
ANR	3061634	Statement	dprintf	6479:3:195845:195851	3061360	0	True				
ANR	3061635	Statement	(	6479:10:195852:195852	3061360	1	True				
ANR	3061636	Statement	D_ALWAYS	6479:11:195853:195860	3061360	2	True				
ANR	3061637	Statement	","	6479:19:195861:195861	3061360	3	True				
ANR	3061638	Statement	"""Create_Process: error using GLExec for """	6480:11:195874:195914	3061360	4	True				
ANR	3061639	Statement	"""family with root %u\\n"""	6481:8:195924:195946	3061360	5	True				
ANR	3061640	Statement	","	6481:31:195947:195947	3061360	6	True				
ANR	3061641	Statement	child_pid	6482:11:195960:195968	3061360	7	True				
ANR	3061642	Statement	)	6482:20:195969:195969	3061360	8	True				
ANR	3061643	ExpressionStatement		6482:21:195970:195970	3061360	9	True				
ANR	3061644	GotoStatement	goto REGISTER_FAMILY_DONE ;	6483:3:195975:196000	3061360	10	True				
ANR	3061645	Identifier	REGISTER_FAMILY_DONE		3061360	0					
ANR	3061646	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRuse_glexec_for_family"" , IF_VERBOSEPUB , runtime )"	6485:7:196013:196100	3061360	1	True				
ANR	3061647	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRuse_glexec_for_family"" , IF_VERBOSEPUB , runtime )"		3061360	0		=			
ANR	3061648	Identifier	runtime		3061360	0					
ANR	3061649	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRuse_glexec_for_family"" , IF_VERBOSEPUB , runtime )"		3061360	1					
ANR	3061650	Callee	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061651	MemberAccess	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061652	Identifier	dc_stats		3061360	0					
ANR	3061653	Identifier	AddRuntimeSample		3061360	1					
ANR	3061654	ArgumentList	"""DCRuse_glexec_for_family"""		3061360	1					
ANR	3061655	Argument	"""DCRuse_glexec_for_family"""		3061360	0					
ANR	3061656	PrimaryExpression	"""DCRuse_glexec_for_family"""		3061360	0					
ANR	3061657	Argument	IF_VERBOSEPUB		3061360	1					
ANR	3061658	Identifier	IF_VERBOSEPUB		3061360	0					
ANR	3061659	Argument	runtime		3061360	2					
ANR	3061660	Identifier	runtime		3061360	0					
ANR	3061661	ExpressionStatement	success = true	6487:1:196106:196120	3061360	12	True				
ANR	3061662	AssignmentExpression	success = true		3061360	0		=			
ANR	3061663	Identifier	success		3061360	0					
ANR	3061664	Identifier	true		3061360	1					
ANR	3061665	Label	REGISTER_FAMILY_DONE :	6488:0:196122:196142	3061360	13	True				
ANR	3061666	Identifier	REGISTER_FAMILY_DONE		3061360	0					
ANR	3061667	IfStatement	if ( family_registered && ! success )		3061360	14					
ANR	3061668	Condition	family_registered && ! success	6489:5:196149:196177	3061360	0	True				
ANR	3061669	AndExpression	family_registered && ! success		3061360	0		&&			
ANR	3061670	Identifier	family_registered		3061360	0					
ANR	3061671	UnaryOperationExpression	! success		3061360	1					
ANR	3061672	UnaryOperator	!		3061360	0					
ANR	3061673	Identifier	success		3061360	1					
ANR	3061674	CompoundStatement		84:36:2634:2634	3061360	1					
ANR	3061675	IfStatement	if ( ! m_proc_family -> unregister_family ( child_pid ) )		3061360	0					
ANR	3061676	Condition	! m_proc_family -> unregister_family ( child_pid )	6490:6:196188:196231	3061360	0	True				
ANR	3061677	UnaryOperationExpression	! m_proc_family -> unregister_family ( child_pid )		3061360	0					
ANR	3061678	UnaryOperator	!		3061360	0					
ANR	3061679	CallExpression	m_proc_family -> unregister_family ( child_pid )		3061360	1					
ANR	3061680	Callee	m_proc_family -> unregister_family		3061360	0					
ANR	3061681	PtrMemberAccess	m_proc_family -> unregister_family		3061360	0					
ANR	3061682	Identifier	m_proc_family		3061360	0					
ANR	3061683	Identifier	unregister_family		3061360	1					
ANR	3061684	ArgumentList	child_pid		3061360	1					
ANR	3061685	Argument	child_pid		3061360	0					
ANR	3061686	Identifier	child_pid		3061360	0					
ANR	3061687	CompoundStatement		85:52:2688:2688	3061360	1					
ANR	3061688	Statement	dprintf	6491:3:196239:196245	3061360	0	True				
ANR	3061689	Statement	(	6491:10:196246:196246	3061360	1	True				
ANR	3061690	Statement	D_ALWAYS	6491:11:196247:196254	3061360	2	True				
ANR	3061691	Statement	","	6491:19:196255:196255	3061360	3	True				
ANR	3061692	Statement	"""Create_Process: error unregistering family """	6492:11:196268:196312	3061360	4	True				
ANR	3061693	Statement	"""with root %u\\n"""	6493:15:196329:196344	3061360	5	True				
ANR	3061694	Statement	","	6493:31:196345:196345	3061360	6	True				
ANR	3061695	Statement	child_pid	6494:11:196358:196366	3061360	7	True				
ANR	3061696	Statement	)	6494:20:196367:196367	3061360	8	True				
ANR	3061697	ExpressionStatement		6494:21:196368:196368	3061360	9	True				
ANR	3061698	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRunregister_family"" , IF_VERBOSEPUB , runtime )"	6496:8:196382:196465	3061360	1	True				
ANR	3061699	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRunregister_family"" , IF_VERBOSEPUB , runtime )"		3061360	0		=			
ANR	3061700	Identifier	runtime		3061360	0					
ANR	3061701	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRunregister_family"" , IF_VERBOSEPUB , runtime )"		3061360	1					
ANR	3061702	Callee	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061703	MemberAccess	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061704	Identifier	dc_stats		3061360	0					
ANR	3061705	Identifier	AddRuntimeSample		3061360	1					
ANR	3061706	ArgumentList	"""DCRunregister_family"""		3061360	1					
ANR	3061707	Argument	"""DCRunregister_family"""		3061360	0					
ANR	3061708	PrimaryExpression	"""DCRunregister_family"""		3061360	0					
ANR	3061709	Argument	IF_VERBOSEPUB		3061360	1					
ANR	3061710	Identifier	IF_VERBOSEPUB		3061360	0					
ANR	3061711	Argument	runtime		3061360	2					
ANR	3061712	Identifier	runtime		3061360	0					
ANR	3061713	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRegister_Family"" , IF_VERBOSEPUB , begintime )"	6499:4:196475:196557	3061360	15	True				
ANR	3061714	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRegister_Family"" , IF_VERBOSEPUB , begintime )"		3061360	0		=			
ANR	3061715	Identifier	runtime		3061360	0					
ANR	3061716	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRegister_Family"" , IF_VERBOSEPUB , begintime )"		3061360	1					
ANR	3061717	Callee	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061718	MemberAccess	dc_stats . AddRuntimeSample		3061360	0					
ANR	3061719	Identifier	dc_stats		3061360	0					
ANR	3061720	Identifier	AddRuntimeSample		3061360	1					
ANR	3061721	ArgumentList	"""DCRegister_Family"""		3061360	1					
ANR	3061722	Argument	"""DCRegister_Family"""		3061360	0					
ANR	3061723	PrimaryExpression	"""DCRegister_Family"""		3061360	0					
ANR	3061724	Argument	IF_VERBOSEPUB		3061360	1					
ANR	3061725	Identifier	IF_VERBOSEPUB		3061360	0					
ANR	3061726	Argument	begintime		3061360	2					
ANR	3061727	Identifier	begintime		3061360	0					
ANR	3061728	ReturnStatement	return success ;	6501:1:196561:196575	3061360	16	True				
ANR	3061729	Identifier	success		3061360	0					
ANR	3061730	ReturnType	bool		3061360	1					
ANR	3061731	Identifier	DaemonCore :: Register_Family		3061360	2					
ANR	3061732	ParameterList	"pid_t child_pid , pid_t parent_pid , int max_snapshot_interval , PidEnvID * penvid , const char * login , gid_t * group , const char * cgroup , const char * glexec_proxy"		3061360	3					
ANR	3061733	Parameter	pid_t child_pid	6398:28:193184:193204	3061360	0	True				
ANR	3061734	ParameterType	pid_t		3061360	0					
ANR	3061735	Identifier	child_pid		3061360	1					
ANR	3061736	Parameter	pid_t parent_pid	6399:28:193235:193256	3061360	1	True				
ANR	3061737	ParameterType	pid_t		3061360	0					
ANR	3061738	Identifier	parent_pid		3061360	1					
ANR	3061739	Parameter	int max_snapshot_interval	6400:28:193287:193319	3061360	2	True				
ANR	3061740	ParameterType	int		3061360	0					
ANR	3061741	Identifier	max_snapshot_interval		3061360	1					
ANR	3061742	Parameter	PidEnvID * penvid	6401:28:193350:193367	3061360	3	True				
ANR	3061743	ParameterType	PidEnvID *		3061360	0					
ANR	3061744	Identifier	penvid		3061360	1					
ANR	3061745	Parameter	const char * login	6402:28:193398:193414	3061360	4	True				
ANR	3061746	ParameterType	const char *		3061360	0					
ANR	3061747	Identifier	login		3061360	1					
ANR	3061748	Parameter	gid_t * group	6403:28:193445:193461	3061360	5	True				
ANR	3061749	ParameterType	gid_t *		3061360	0					
ANR	3061750	Identifier	group		3061360	1					
ANR	3061751	Parameter	const char * cgroup	6404:7:193471:193488	3061360	6	True				
ANR	3061752	ParameterType	const char *		3061360	0					
ANR	3061753	Identifier	cgroup		3061360	1					
ANR	3061754	Parameter	const char * glexec_proxy	6405:28:193519:193542	3061360	7	True				
ANR	3061755	ParameterType	const char *		3061360	0					
ANR	3061756	Identifier	glexec_proxy		3061360	1					
ANR	3061757	CFGEntryNode	ENTRY		3061360		True				
ANR	3061758	CFGExitNode	EXIT		3061360		True				
ANR	3061759	Symbol	m_proc_family -> use_glexec_for_family		3061360						
ANR	3061760	Symbol	m_proc_family -> register_subfamily		3061360						
ANR	3061761	Symbol	family_registered		3061360						
ANR	3061762	Symbol	* group		3061360						
ANR	3061763	Symbol	login		3061360						
ANR	3061764	Symbol	m_proc_family -> track_family_via_cgroup		3061360						
ANR	3061765	Symbol	m_proc_family -> track_family_via_allocated_supplementary_group		3061360						
ANR	3061766	Symbol	* penvid		3061360						
ANR	3061767	Symbol	m_proc_family -> unregister_family		3061360						
ANR	3061768	Symbol	parent_pid		3061360						
ANR	3061769	Symbol	m_proc_family		3061360						
ANR	3061770	Symbol	group		3061360						
ANR	3061771	Symbol	* m_proc_family		3061360						
ANR	3061772	Symbol	UtcTime :: getTimeDouble		3061360						
ANR	3061773	Symbol	m_proc_family -> track_family_via_environment		3061360						
ANR	3061774	Symbol	NULL		3061360						
ANR	3061775	Symbol	m_proc_family -> track_family_via_login		3061360						
ANR	3061776	Symbol	false		3061360						
ANR	3061777	Symbol	D_ALWAYS		3061360						
ANR	3061778	Symbol	runtime		3061360						
ANR	3061779	Symbol	begintime		3061360						
ANR	3061780	Symbol	cgroup		3061360						
ANR	3061781	Symbol	child_pid		3061360						
ANR	3061782	Symbol	dc_stats . AddRuntimeSample		3061360						
ANR	3061783	Symbol	max_snapshot_interval		3061360						
ANR	3061784	Symbol	IF_VERBOSEPUB		3061360						
ANR	3061785	Symbol	success		3061360						
ANR	3061786	Symbol	true		3061360						
ANR	3061787	Symbol	penvid		3061360						
ANR	3061788	Symbol	dc_stats		3061360						
ANR	3061789	Symbol	glexec_proxy		3061360						
ANR	3061790	ClassDef	CreateProcessForkit	6512:0:196912:199880							
ANR	3061791	Function	CreateProcessForkit	6514:1:196949:198341							
ANR	3061792	FunctionDef	"CreateProcessForkit (const int ( & the_errorpipe ) [ 2 ] , const ArgList & the_args , int the_job_opt_mask , const Env * the_env , const MyString & the_inheritbuf , const MyString & the_privateinheritbuf , pid_t the_forker_pid , time_t the_time_of_fork , unsigned int the_mii , const FamilyInfo * the_family_info , const char * the_cwd , const char * the_executable , const char * the_executable_fullpath , const int * the_std , int the_numInheritFds , const int ( & the_inheritFds ) [ MAX_INHERIT_FDS ] , int the_nice_inc , const priv_state & the_priv , int the_want_command_port , const sigset_t * the_sigmask , size_t * core_hard_limit , int * affinity_mask)"		3061791	0					
ANR	3061793	CompoundStatement		6552:1:198338:198341	3061791	0					
ANR	3061794	Identifier	CreateProcessForkit		3061791	1					
ANR	3061795	ParameterList	"const int ( & the_errorpipe ) [ 2 ] , const ArgList & the_args , int the_job_opt_mask , const Env * the_env , const MyString & the_inheritbuf , const MyString & the_privateinheritbuf , pid_t the_forker_pid , time_t the_time_of_fork , unsigned int the_mii , const FamilyInfo * the_family_info , const char * the_cwd , const char * the_executable , const char * the_executable_fullpath , const int * the_std , int the_numInheritFds , const int ( & the_inheritFds ) [ MAX_INHERIT_FDS ] , int the_nice_inc , const priv_state & the_priv , int the_want_command_port , const sigset_t * the_sigmask , size_t * core_hard_limit , int * affinity_mask"		3061791	2					
ANR	3061796	Parameter	const int ( & the_errorpipe ) [ 2 ]	6515:2:196972:197000	3061791	0	True				
ANR	3061797	ParameterType	([ 2 ] const int) &		3061791	0					
ANR	3061798	Identifier	the_errorpipe		3061791	1					
ANR	3061799	Parameter	const ArgList & the_args	6516:2:197005:197027	3061791	1	True				
ANR	3061800	ParameterType	const ArgList &		3061791	0					
ANR	3061801	Identifier	the_args		3061791	1					
ANR	3061802	Parameter	int the_job_opt_mask	6517:2:197032:197051	3061791	2	True				
ANR	3061803	ParameterType	int		3061791	0					
ANR	3061804	Identifier	the_job_opt_mask		3061791	1					
ANR	3061805	Parameter	const Env * the_env	6518:2:197056:197073	3061791	3	True				
ANR	3061806	ParameterType	const Env *		3061791	0					
ANR	3061807	Identifier	the_env		3061791	1					
ANR	3061808	Parameter	const MyString & the_inheritbuf	6519:2:197078:197107	3061791	4	True				
ANR	3061809	ParameterType	const MyString &		3061791	0					
ANR	3061810	Identifier	the_inheritbuf		3061791	1					
ANR	3061811	Parameter	const MyString & the_privateinheritbuf	6520:2:197112:197148	3061791	5	True				
ANR	3061812	ParameterType	const MyString &		3061791	0					
ANR	3061813	Identifier	the_privateinheritbuf		3061791	1					
ANR	3061814	Parameter	pid_t the_forker_pid	6521:2:197153:197172	3061791	6	True				
ANR	3061815	ParameterType	pid_t		3061791	0					
ANR	3061816	Identifier	the_forker_pid		3061791	1					
ANR	3061817	Parameter	time_t the_time_of_fork	6522:2:197177:197199	3061791	7	True				
ANR	3061818	ParameterType	time_t		3061791	0					
ANR	3061819	Identifier	the_time_of_fork		3061791	1					
ANR	3061820	Parameter	unsigned int the_mii	6523:2:197204:197223	3061791	8	True				
ANR	3061821	ParameterType	unsigned int		3061791	0					
ANR	3061822	Identifier	the_mii		3061791	1					
ANR	3061823	Parameter	const FamilyInfo * the_family_info	6524:2:197228:197260	3061791	9	True				
ANR	3061824	ParameterType	const FamilyInfo *		3061791	0					
ANR	3061825	Identifier	the_family_info		3061791	1					
ANR	3061826	Parameter	const char * the_cwd	6525:2:197265:197283	3061791	10	True				
ANR	3061827	ParameterType	const char *		3061791	0					
ANR	3061828	Identifier	the_cwd		3061791	1					
ANR	3061829	Parameter	const char * the_executable	6526:2:197288:197313	3061791	11	True				
ANR	3061830	ParameterType	const char *		3061791	0					
ANR	3061831	Identifier	the_executable		3061791	1					
ANR	3061832	Parameter	const char * the_executable_fullpath	6527:2:197318:197352	3061791	12	True				
ANR	3061833	ParameterType	const char *		3061791	0					
ANR	3061834	Identifier	the_executable_fullpath		3061791	1					
ANR	3061835	Parameter	const int * the_std	6528:2:197357:197374	3061791	13	True				
ANR	3061836	ParameterType	const int *		3061791	0					
ANR	3061837	Identifier	the_std		3061791	1					
ANR	3061838	Parameter	int the_numInheritFds	6529:2:197379:197399	3061791	14	True				
ANR	3061839	ParameterType	int		3061791	0					
ANR	3061840	Identifier	the_numInheritFds		3061791	1					
ANR	3061841	Parameter	const int ( & the_inheritFds ) [ MAX_INHERIT_FDS ]	6530:2:197404:197447	3061791	15	True				
ANR	3061842	ParameterType	([ MAX_INHERIT_FDS ] const int) &		3061791	0					
ANR	3061843	Identifier	the_inheritFds		3061791	1					
ANR	3061844	Parameter	int the_nice_inc	6531:2:197452:197467	3061791	16	True				
ANR	3061845	ParameterType	int		3061791	0					
ANR	3061846	Identifier	the_nice_inc		3061791	1					
ANR	3061847	Parameter	const priv_state & the_priv	6532:2:197472:197497	3061791	17	True				
ANR	3061848	ParameterType	const priv_state &		3061791	0					
ANR	3061849	Identifier	the_priv		3061791	1					
ANR	3061850	Parameter	int the_want_command_port	6533:2:197502:197526	3061791	18	True				
ANR	3061851	ParameterType	int		3061791	0					
ANR	3061852	Identifier	the_want_command_port		3061791	1					
ANR	3061853	Parameter	const sigset_t * the_sigmask	6534:2:197531:197557	3061791	19	True				
ANR	3061854	ParameterType	const sigset_t *		3061791	0					
ANR	3061855	Identifier	the_sigmask		3061791	1					
ANR	3061856	Parameter	size_t * core_hard_limit	6535:2:197562:197584	3061791	20	True				
ANR	3061857	ParameterType	size_t *		3061791	0					
ANR	3061858	Identifier	core_hard_limit		3061791	1					
ANR	3061859	Parameter	int * affinity_mask	6536:2:197589:197607	3061791	21	True				
ANR	3061860	ParameterType	int *		3061791	0					
ANR	3061861	Identifier	affinity_mask		3061791	1					
ANR	3061862	CFGEntryNode	ENTRY		3061791		True				
ANR	3061863	CFGExitNode	EXIT		3061791		True				
ANR	3061864	Symbol	the_forker_pid		3061791						
ANR	3061865	Symbol	the_inheritFds		3061791						
ANR	3061866	Symbol	the_cwd		3061791						
ANR	3061867	Symbol	the_priv		3061791						
ANR	3061868	Symbol	the_family_info		3061791						
ANR	3061869	Symbol	the_privateinheritbuf		3061791						
ANR	3061870	Symbol	affinity_mask		3061791						
ANR	3061871	Symbol	the_executable		3061791						
ANR	3061872	Symbol	the_nice_inc		3061791						
ANR	3061873	Symbol	the_inheritbuf		3061791						
ANR	3061874	Symbol	core_hard_limit		3061791						
ANR	3061875	Symbol	the_time_of_fork		3061791						
ANR	3061876	Symbol	the_sigmask		3061791						
ANR	3061877	Symbol	the_std		3061791						
ANR	3061878	Symbol	the_want_command_port		3061791						
ANR	3061879	Symbol	the_numInheritFds		3061791						
ANR	3061880	Symbol	the_args		3061791						
ANR	3061881	Symbol	the_env		3061791						
ANR	3061882	Symbol	the_mii		3061791						
ANR	3061883	Symbol	the_job_opt_mask		3061791						
ANR	3061884	Symbol	the_executable_fullpath		3061791						
ANR	3061885	Symbol	the_errorpipe		3061791						
ANR	3061886	Function	~CreateProcessForkit	6555:1:198345:198529							
ANR	3061887	FunctionDef	~CreateProcessForkit ()		3061886	1					
ANR	3061888	CompoundStatement		6555:24:198368:198529	3061886	0					
ANR	3061889	ExpressionStatement	deleteStringArray ( m_unix_args )	6558:2:198463:198493	3061886	0	True				
ANR	3061890	CallExpression	deleteStringArray ( m_unix_args )		3061886	0					
ANR	3061891	Callee	deleteStringArray		3061886	0					
ANR	3061892	Identifier	deleteStringArray		3061886	0					
ANR	3061893	ArgumentList	m_unix_args		3061886	1					
ANR	3061894	Argument	m_unix_args		3061886	0					
ANR	3061895	Identifier	m_unix_args		3061886	0					
ANR	3061896	ExpressionStatement	deleteStringArray ( m_unix_env )	6559:2:198497:198526	3061886	1	True				
ANR	3061897	CallExpression	deleteStringArray ( m_unix_env )		3061886	0					
ANR	3061898	Callee	deleteStringArray		3061886	0					
ANR	3061899	Identifier	deleteStringArray		3061886	0					
ANR	3061900	ArgumentList	m_unix_env		3061886	1					
ANR	3061901	Argument	m_unix_env		3061886	0					
ANR	3061902	Identifier	m_unix_env		3061886	0					
ANR	3061903	Identifier	~CreateProcessForkit		3061886	1					
ANR	3061904	ParameterList			3061886	2					
ANR	3061905	CFGEntryNode	ENTRY		3061886		True				
ANR	3061906	CFGExitNode	EXIT		3061886		True				
ANR	3061907	Symbol	m_unix_args		3061886						
ANR	3061908	Symbol	m_unix_env		3061886						
ANR	3061909	DeclStmt									
ANR	3061910	Decl							pid_t	pid_t ( )	fork_exec
ANR	3061911	DeclStmt									
ANR	3061912	Decl							void	void ( )	exec
ANR	3061913	DeclStmt									
ANR	3061914	Decl							int	int ( void * arg )	clone_fn
ANR	3061915	DeclStmt									
ANR	3061916	Decl							pid_t	pid_t ( )	clone_safe_getpid
ANR	3061917	DeclStmt									
ANR	3061918	Decl							pid_t	pid_t ( )	clone_safe_getppid
ANR	3061919	DeclStmt									
ANR	3061920	Decl							const int ( & ) [ 2 ]	const int ( & ) [ 2 ]	m_errorpipe
ANR	3061921	DeclStmt									
ANR	3061922	Decl							const ArgList	const ArgList &	m_args
ANR	3061923	DeclStmt									
ANR	3061924	Decl							const int	const int	m_job_opt_mask
ANR	3061925	DeclStmt									
ANR	3061926	Decl							const Env	const Env *	m_env
ANR	3061927	DeclStmt									
ANR	3061928	Decl							const MyString	const MyString &	m_inheritbuf
ANR	3061929	DeclStmt									
ANR	3061930	Decl							const MyString	const MyString &	m_privateinheritbuf
ANR	3061931	DeclStmt									
ANR	3061932	Decl							const pid_t	const pid_t	m_forker_pid
ANR	3061933	DeclStmt									
ANR	3061934	Decl							const time_t	const time_t	m_time_of_fork
ANR	3061935	DeclStmt									
ANR	3061936	Decl							const unsigned int	const unsigned int	m_mii
ANR	3061937	DeclStmt									
ANR	3061938	Decl							const FamilyInfo	const FamilyInfo *	m_family_info
ANR	3061939	DeclStmt									
ANR	3061940	Decl							const char	const char *	m_cwd
ANR	3061941	DeclStmt									
ANR	3061942	Decl							const char	const char *	m_executable
ANR	3061943	DeclStmt									
ANR	3061944	Decl							const char	const char *	m_executable_fullpath
ANR	3061945	DeclStmt									
ANR	3061946	Decl							const int	const int *	m_std
ANR	3061947	DeclStmt									
ANR	3061948	Decl							const int	const int	m_numInheritFds
ANR	3061949	DeclStmt									
ANR	3061950	Decl							const int ( & ) [ MAX_INHERIT_FDS ]	const int ( & ) [ MAX_INHERIT_FDS ]	m_inheritFds
ANR	3061951	DeclStmt									
ANR	3061952	Decl							int	int	m_nice_inc
ANR	3061953	DeclStmt									
ANR	3061954	Decl							const priv_state	const priv_state &	m_priv
ANR	3061955	DeclStmt									
ANR	3061956	Decl							const int	const int	m_want_command_port
ANR	3061957	DeclStmt									
ANR	3061958	Decl							const sigset_t	const sigset_t *	m_sigmask
ANR	3061959	DeclStmt									
ANR	3061960	Decl							char	char * *	m_unix_args
ANR	3061961	DeclStmt									
ANR	3061962	Decl							char	char * *	m_unix_env
ANR	3061963	DeclStmt									
ANR	3061964	Decl							size_t	size_t *	m_core_hard_limit
ANR	3061965	DeclStmt									
ANR	3061966	Decl							const int	const int *	m_affinity_mask
ANR	3061967	DeclStmt									
ANR	3061968	Decl							Env	Env	m_envobject
ANR	3061969	ClassDef	<unnamed>	6607:0:199884:199940							
ANR	3061970	DeclStmt									
ANR	3061971	Decl							volatile int	volatile int	location
ANR	3061972	Function	CreateProcessForkit :: clone_safe_getpid	6621:0:200168:200571							
ANR	3061973	FunctionDef	CreateProcessForkit :: clone_safe_getpid ()		3061972	0					
ANR	3061974	CompoundStatement		6621:47:200215:200571	3061972	0					
ANR	3061975	ReturnStatement	return syscall ( SYS_getpid ) ;	6628:1:200510:200536	3061972	0	True				
ANR	3061976	CallExpression	syscall ( SYS_getpid )		3061972	0					
ANR	3061977	Callee	syscall		3061972	0					
ANR	3061978	Identifier	syscall		3061972	0					
ANR	3061979	ArgumentList	SYS_getpid		3061972	1					
ANR	3061980	Argument	SYS_getpid		3061972	0					
ANR	3061981	Identifier	SYS_getpid		3061972	0					
ANR	3061982	ReturnType	pid_t		3061972	1					
ANR	3061983	Identifier	CreateProcessForkit :: clone_safe_getpid		3061972	2					
ANR	3061984	ParameterList			3061972	3					
ANR	3061985	CFGEntryNode	ENTRY		3061972		True				
ANR	3061986	CFGExitNode	EXIT		3061972		True				
ANR	3061987	Symbol	syscall		3061972						
ANR	3061988	Symbol	SYS_getpid		3061972						
ANR	3061989	Function	CreateProcessForkit :: clone_safe_getppid	6633:0:200573:200797							
ANR	3061990	FunctionDef	CreateProcessForkit :: clone_safe_getppid ()		3061989	0					
ANR	3061991	CompoundStatement		6633:48:200621:200797	3061989	0					
ANR	3061992	ReturnStatement	return syscall ( SYS_getppid ) ;	6637:1:200734:200761	3061989	0	True				
ANR	3061993	CallExpression	syscall ( SYS_getppid )		3061989	0					
ANR	3061994	Callee	syscall		3061989	0					
ANR	3061995	Identifier	syscall		3061989	0					
ANR	3061996	ArgumentList	SYS_getppid		3061989	1					
ANR	3061997	Argument	SYS_getppid		3061989	0					
ANR	3061998	Identifier	SYS_getppid		3061989	0					
ANR	3061999	ReturnType	pid_t		3061989	1					
ANR	3062000	Identifier	CreateProcessForkit :: clone_safe_getppid		3061989	2					
ANR	3062001	ParameterList			3061989	3					
ANR	3062002	CFGEntryNode	ENTRY		3061989		True				
ANR	3062003	CFGExitNode	EXIT		3061989		True				
ANR	3062004	Symbol	syscall		3061989						
ANR	3062005	Symbol	SYS_getppid		3061989						
ANR	3062006	Function	CreateProcessForkit :: fork_exec	6643:0:200800:203558							
ANR	3062007	FunctionDef	CreateProcessForkit :: fork_exec ()		3062006	0					
ANR	3062008	CompoundStatement		6643:39:200839:203558	3062006	0					
ANR	3062009	IdentifierDeclStatement	pid_t newpid ;	6644:1:200842:200854	3062006	0	True				
ANR	3062010	IdentifierDecl	newpid		3062006	0					
ANR	3062011	IdentifierDeclType	pid_t		3062006	0					
ANR	3062012	Identifier	newpid		3062006	1					
ANR	3062013	IfStatement	if ( daemonCore -> UseCloneToCreateProcesses ( ) )		3062006	1					
ANR	3062014	Condition	daemonCore -> UseCloneToCreateProcesses ( )	6661:5:201643:201681	3062006	0	True				
ANR	3062015	CallExpression	daemonCore -> UseCloneToCreateProcesses ( )		3062006	0					
ANR	3062016	Callee	daemonCore -> UseCloneToCreateProcesses		3062006	0					
ANR	3062017	PtrMemberAccess	daemonCore -> UseCloneToCreateProcesses		3062006	0					
ANR	3062018	Identifier	daemonCore		3062006	0					
ANR	3062019	Identifier	UseCloneToCreateProcesses		3062006	1					
ANR	3062020	ArgumentList			3062006	1					
ANR	3062021	CompoundStatement		36:2:1584:1619	3062006	1					
ANR	3062022	Statement	dprintf	6662:2:201689:201695	3062006	0	True				
ANR	3062023	Statement	(	6662:9:201696:201696	3062006	1	True				
ANR	3062024	Statement	D_FULLDEBUG	6662:10:201697:201707	3062006	2	True				
ANR	3062025	Statement	","	6662:21:201708:201708	3062006	3	True				
ANR	3062026	Statement	"""Create_Process: using fast clone() """	6662:22:201709:201745	3062006	4	True				
ANR	3062027	Statement	"""to create child process.\\n"""	6663:22:201769:201796	3062006	5	True				
ANR	3062028	Statement	)	6663:50:201797:201797	3062006	6	True				
ANR	3062029	ExpressionStatement		6663:51:201798:201798	3062006	7	True				
ANR	3062030	IdentifierDeclStatement	const int stack_size = 16384 ;	6672:2:202208:202236	3062006	8	True				
ANR	3062031	IdentifierDecl	stack_size = 16384		3062006	0					
ANR	3062032	IdentifierDeclType	const int		3062006	0					
ANR	3062033	Identifier	stack_size		3062006	1					
ANR	3062034	AssignmentExpression	stack_size = 16384		3062006	2		=			
ANR	3062035	Identifier	stack_size		3062006	0					
ANR	3062036	PrimaryExpression	16384		3062006	1					
ANR	3062037	IdentifierDeclStatement	char child_stack [ stack_size ] ;	6673:2:202240:202268	3062006	9	True				
ANR	3062038	IdentifierDecl	child_stack [ stack_size ]		3062006	0					
ANR	3062039	IdentifierDeclType	char [ stack_size ]		3062006	0					
ANR	3062040	Identifier	child_stack		3062006	1					
ANR	3062041	Identifier	stack_size		3062006	2					
ANR	3062042	IdentifierDeclStatement	char * child_stack_ptr = child_stack ;	6678:2:202424:202459	3062006	10	True				
ANR	3062043	IdentifierDecl	* child_stack_ptr = child_stack		3062006	0					
ANR	3062044	IdentifierDeclType	char *		3062006	0					
ANR	3062045	Identifier	child_stack_ptr		3062006	1					
ANR	3062046	AssignmentExpression	* child_stack_ptr = child_stack		3062006	2		=			
ANR	3062047	Identifier	child_stack		3062006	0					
ANR	3062048	Identifier	child_stack		3062006	1					
ANR	3062049	IfStatement	if ( stack_direction ( ) == STACK_GROWS_DOWN )		3062006	11					
ANR	3062050	Condition	stack_direction ( ) == STACK_GROWS_DOWN	6679:6:202467:202503	3062006	0	True				
ANR	3062051	EqualityExpression	stack_direction ( ) == STACK_GROWS_DOWN		3062006	0		==			
ANR	3062052	CallExpression	stack_direction ( )		3062006	0					
ANR	3062053	Callee	stack_direction		3062006	0					
ANR	3062054	Identifier	stack_direction		3062006	0					
ANR	3062055	ArgumentList			3062006	1					
ANR	3062056	Identifier	STACK_GROWS_DOWN		3062006	1					
ANR	3062057	CompoundStatement		37:46:1667:1667	3062006	1					
ANR	3062058	ExpressionStatement	child_stack_ptr += stack_size	6680:3:202512:202541	3062006	0	True				
ANR	3062059	AssignmentExpression	child_stack_ptr += stack_size		3062006	0		+=			
ANR	3062060	Identifier	child_stack_ptr		3062006	0					
ANR	3062061	Identifier	stack_size		3062006	1					
ANR	3062062	ExpressionStatement	dprintf_before_shared_mem_clone ( )	6684:2:202583:202616	3062006	12	True				
ANR	3062063	CallExpression	dprintf_before_shared_mem_clone ( )		3062006	0					
ANR	3062064	Callee	dprintf_before_shared_mem_clone		3062006	0					
ANR	3062065	Identifier	dprintf_before_shared_mem_clone		3062006	0					
ANR	3062066	ArgumentList			3062006	1					
ANR	3062067	ExpressionStatement	enterCreateProcessChild ( m_errorpipe [ 1 ] )	6694:2:203029:203068	3062006	13	True				
ANR	3062068	CallExpression	enterCreateProcessChild ( m_errorpipe [ 1 ] )		3062006	0					
ANR	3062069	Callee	enterCreateProcessChild		3062006	0					
ANR	3062070	Identifier	enterCreateProcessChild		3062006	0					
ANR	3062071	ArgumentList	m_errorpipe [ 1 ]		3062006	1					
ANR	3062072	Argument	m_errorpipe [ 1 ]		3062006	0					
ANR	3062073	ArrayIndexing	m_errorpipe [ 1 ]		3062006	0					
ANR	3062074	Identifier	m_errorpipe		3062006	0					
ANR	3062075	PrimaryExpression	1		3062006	1					
ANR	3062076	ExpressionStatement	"newpid = clone ( CreateProcessForkit :: clone_fn , child_stack_ptr , ( CLONE_VM | CLONE_VFORK | SIGCHLD ) , this )"	6696:2:203073:203187	3062006	14	True				
ANR	3062077	AssignmentExpression	"newpid = clone ( CreateProcessForkit :: clone_fn , child_stack_ptr , ( CLONE_VM | CLONE_VFORK | SIGCHLD ) , this )"		3062006	0		=			
ANR	3062078	Identifier	newpid		3062006	0					
ANR	3062079	CallExpression	"clone ( CreateProcessForkit :: clone_fn , child_stack_ptr , ( CLONE_VM | CLONE_VFORK | SIGCHLD ) , this )"		3062006	1					
ANR	3062080	Callee	clone		3062006	0					
ANR	3062081	Identifier	clone		3062006	0					
ANR	3062082	ArgumentList	CreateProcessForkit :: clone_fn		3062006	1					
ANR	3062083	Argument	CreateProcessForkit :: clone_fn		3062006	0					
ANR	3062084	Identifier	CreateProcessForkit :: clone_fn		3062006	0					
ANR	3062085	Argument	child_stack_ptr		3062006	1					
ANR	3062086	Identifier	child_stack_ptr		3062006	0					
ANR	3062087	Argument	CLONE_VM | CLONE_VFORK | SIGCHLD		3062006	2					
ANR	3062088	InclusiveOrExpression	CLONE_VM | CLONE_VFORK | SIGCHLD		3062006	0		|			
ANR	3062089	Identifier	CLONE_VM		3062006	0					
ANR	3062090	InclusiveOrExpression	CLONE_VFORK | SIGCHLD		3062006	1		|			
ANR	3062091	Identifier	CLONE_VFORK		3062006	0					
ANR	3062092	Identifier	SIGCHLD		3062006	1					
ANR	3062093	Argument	this		3062006	3					
ANR	3062094	Identifier	this		3062006	0					
ANR	3062095	ExpressionStatement	exitCreateProcessChild ( )	6702:2:203192:203216	3062006	15	True				
ANR	3062096	CallExpression	exitCreateProcessChild ( )		3062006	0					
ANR	3062097	Callee	exitCreateProcessChild		3062006	0					
ANR	3062098	Identifier	exitCreateProcessChild		3062006	0					
ANR	3062099	ArgumentList			3062006	1					
ANR	3062100	ExpressionStatement	dprintf_after_shared_mem_clone ( )	6708:2:203334:203366	3062006	16	True				
ANR	3062101	CallExpression	dprintf_after_shared_mem_clone ( )		3062006	0					
ANR	3062102	Callee	dprintf_after_shared_mem_clone		3062006	0					
ANR	3062103	Identifier	dprintf_after_shared_mem_clone		3062006	0					
ANR	3062104	ArgumentList			3062006	1					
ANR	3062105	ReturnStatement	return newpid ;	6710:2:203371:203384	3062006	17	True				
ANR	3062106	Identifier	newpid		3062006	0					
ANR	3062107	ExpressionStatement	newpid = fork ( )	6714:1:203415:203430	3062006	2	True				
ANR	3062108	AssignmentExpression	newpid = fork ( )		3062006	0		=			
ANR	3062109	Identifier	newpid		3062006	0					
ANR	3062110	CallExpression	fork ( )		3062006	1					
ANR	3062111	Callee	fork		3062006	0					
ANR	3062112	Identifier	fork		3062006	0					
ANR	3062113	ArgumentList			3062006	1					
ANR	3062114	IfStatement	if ( newpid == 0 )		3062006	3					
ANR	3062115	Condition	newpid == 0	6715:5:203437:203447	3062006	0	True				
ANR	3062116	EqualityExpression	newpid == 0		3062006	0		==			
ANR	3062117	Identifier	newpid		3062006	0					
ANR	3062118	PrimaryExpression	0		3062006	1					
ANR	3062119	CompoundStatement		73:19:2611:2611	3062006	1					
ANR	3062120	ExpressionStatement	enterCreateProcessChild ( m_errorpipe [ 1 ] )	6717:2:203470:203509	3062006	0	True				
ANR	3062121	CallExpression	enterCreateProcessChild ( m_errorpipe [ 1 ] )		3062006	0					
ANR	3062122	Callee	enterCreateProcessChild		3062006	0					
ANR	3062123	Identifier	enterCreateProcessChild		3062006	0					
ANR	3062124	ArgumentList	m_errorpipe [ 1 ]		3062006	1					
ANR	3062125	Argument	m_errorpipe [ 1 ]		3062006	0					
ANR	3062126	ArrayIndexing	m_errorpipe [ 1 ]		3062006	0					
ANR	3062127	Identifier	m_errorpipe		3062006	0					
ANR	3062128	PrimaryExpression	1		3062006	1					
ANR	3062129	ExpressionStatement	exec ( )	6718:2:203513:203519	3062006	1	True				
ANR	3062130	CallExpression	exec ( )		3062006	0					
ANR	3062131	Callee	exec		3062006	0					
ANR	3062132	Identifier	exec		3062006	0					
ANR	3062133	ArgumentList			3062006	1					
ANR	3062134	ReturnStatement	return newpid ;	6721:1:203543:203556	3062006	4	True				
ANR	3062135	Identifier	newpid		3062006	0					
ANR	3062136	ReturnType	pid_t		3062006	1					
ANR	3062137	Identifier	CreateProcessForkit :: fork_exec		3062006	2					
ANR	3062138	ParameterList			3062006	3					
ANR	3062139	CFGEntryNode	ENTRY		3062006		True				
ANR	3062140	CFGExitNode	EXIT		3062006		True				
ANR	3062141	Symbol	child_stack		3062006						
ANR	3062142	Symbol	STACK_GROWS_DOWN		3062006						
ANR	3062143	Symbol	stack_direction		3062006						
ANR	3062144	Symbol	this		3062006						
ANR	3062145	Symbol	child_stack_ptr		3062006						
ANR	3062146	Symbol	* m_errorpipe		3062006						
ANR	3062147	Symbol	CreateProcessForkit :: clone_fn		3062006						
ANR	3062148	Symbol	SIGCHLD		3062006						
ANR	3062149	Symbol	fork		3062006						
ANR	3062150	Symbol	* daemonCore		3062006						
ANR	3062151	Symbol	m_errorpipe		3062006						
ANR	3062152	Symbol	newpid		3062006						
ANR	3062153	Symbol	daemonCore		3062006						
ANR	3062154	Symbol	clone		3062006						
ANR	3062155	Symbol	stack_size		3062006						
ANR	3062156	Symbol	CLONE_VM		3062006						
ANR	3062157	Symbol	daemonCore -> UseCloneToCreateProcesses		3062006						
ANR	3062158	Symbol	CLONE_VFORK		3062006						
ANR	3062159	Function	CreateProcessForkit :: clone_fn	6724:0:203561:203822							
ANR	3062160	FunctionDef	CreateProcessForkit :: clone_fn (void * arg)		3062159	0					
ANR	3062161	CompoundStatement		6724:47:203608:203822	3062159	0					
ANR	3062162	ExpressionStatement	( ( CreateProcessForkit * ) arg ) -> exec ( )	6728:1:203773:203809	3062159	0	True				
ANR	3062163	CallExpression	( ( CreateProcessForkit * ) arg ) -> exec ( )		3062159	0					
ANR	3062164	Callee	( ( CreateProcessForkit * ) arg ) -> exec		3062159	0					
ANR	3062165	PtrMemberAccess	( ( CreateProcessForkit * ) arg ) -> exec		3062159	0					
ANR	3062166	CastExpression	( CreateProcessForkit * ) arg		3062159	0					
ANR	3062167	CastTarget	CreateProcessForkit *		3062159	0					
ANR	3062168	Identifier	arg		3062159	1					
ANR	3062169	Identifier	exec		3062159	1					
ANR	3062170	ArgumentList			3062159	1					
ANR	3062171	ReturnStatement	return 0 ;	6729:1:203812:203820	3062159	1	True				
ANR	3062172	PrimaryExpression	0		3062159	0					
ANR	3062173	ReturnType	int		3062159	1					
ANR	3062174	Identifier	CreateProcessForkit :: clone_fn		3062159	2					
ANR	3062175	ParameterList	void * arg		3062159	3					
ANR	3062176	Parameter	void * arg	6724:35:203596:203604	3062159	0	True				
ANR	3062177	ParameterType	void *		3062159	0					
ANR	3062178	Identifier	arg		3062159	1					
ANR	3062179	CFGEntryNode	ENTRY		3062159		True				
ANR	3062180	CFGExitNode	EXIT		3062159		True				
ANR	3062181	Symbol	arg		3062159						
ANR	3062182	Function	CreateProcessForkit :: exec	6732:0:203825:223370							
ANR	3062183	FunctionDef	CreateProcessForkit :: exec ()		3062182	0					
ANR	3062184	CompoundStatement		6732:33:203858:223370	3062182	0					
ANR	3062185	ExpressionStatement	dprintf_init_fork_child ( )	6753:1:204931:204956	3062182	0	True				
ANR	3062186	CallExpression	dprintf_init_fork_child ( )		3062182	0					
ANR	3062187	Callee	dprintf_init_fork_child		3062182	0					
ANR	3062188	Identifier	dprintf_init_fork_child		3062182	0					
ANR	3062189	ArgumentList			3062182	1					
ANR	3062190	ExpressionStatement	close ( m_errorpipe [ 0 ] )	6757:1:205055:205076	3062182	1	True				
ANR	3062191	CallExpression	close ( m_errorpipe [ 0 ] )		3062182	0					
ANR	3062192	Callee	close		3062182	0					
ANR	3062193	Identifier	close		3062182	0					
ANR	3062194	ArgumentList	m_errorpipe [ 0 ]		3062182	1					
ANR	3062195	Argument	m_errorpipe [ 0 ]		3062182	0					
ANR	3062196	ArrayIndexing	m_errorpipe [ 0 ]		3062182	0					
ANR	3062197	Identifier	m_errorpipe		3062182	0					
ANR	3062198	PrimaryExpression	0		3062182	1					
ANR	3062199	ExpressionStatement	"fcntl ( m_errorpipe [ 1 ] , F_SETFD , FD_CLOEXEC )"	6758:1:205079:205121	3062182	2	True				
ANR	3062200	CallExpression	"fcntl ( m_errorpipe [ 1 ] , F_SETFD , FD_CLOEXEC )"		3062182	0					
ANR	3062201	Callee	fcntl		3062182	0					
ANR	3062202	Identifier	fcntl		3062182	0					
ANR	3062203	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3062204	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3062205	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3062206	Identifier	m_errorpipe		3062182	0					
ANR	3062207	PrimaryExpression	1		3062182	1					
ANR	3062208	Argument	F_SETFD		3062182	1					
ANR	3062209	Identifier	F_SETFD		3062182	0					
ANR	3062210	Argument	FD_CLOEXEC		3062182	2					
ANR	3062211	Identifier	FD_CLOEXEC		3062182	0					
ANR	3062212	IdentifierDeclStatement	pid_t pid = clone_safe_getpid ( ) ;	6787:1:206654:206685	3062182	3	True				
ANR	3062213	IdentifierDecl	pid = clone_safe_getpid ( )		3062182	0					
ANR	3062214	IdentifierDeclType	pid_t		3062182	0					
ANR	3062215	Identifier	pid		3062182	1					
ANR	3062216	AssignmentExpression	pid = clone_safe_getpid ( )		3062182	2		=			
ANR	3062217	Identifier	pid		3062182	0					
ANR	3062218	CallExpression	clone_safe_getpid ( )		3062182	1					
ANR	3062219	Callee	clone_safe_getpid		3062182	0					
ANR	3062220	Identifier	clone_safe_getpid		3062182	0					
ANR	3062221	ArgumentList			3062182	1					
ANR	3062222	IdentifierDeclStatement	pid_t ppid = clone_safe_getppid ( ) ;	6788:1:206688:206721	3062182	4	True				
ANR	3062223	IdentifierDecl	ppid = clone_safe_getppid ( )		3062182	0					
ANR	3062224	IdentifierDeclType	pid_t		3062182	0					
ANR	3062225	Identifier	ppid		3062182	1					
ANR	3062226	AssignmentExpression	ppid = clone_safe_getppid ( )		3062182	2		=			
ANR	3062227	Identifier	ppid		3062182	0					
ANR	3062228	CallExpression	clone_safe_getppid ( )		3062182	1					
ANR	3062229	Callee	clone_safe_getppid		3062182	0					
ANR	3062230	Identifier	clone_safe_getppid		3062182	0					
ANR	3062231	ArgumentList			3062182	1					
ANR	3062232	IdentifierDeclStatement	DaemonCore :: PidEntry * pidinfo = NULL ;	6789:1:206724:206760	3062182	5	True				
ANR	3062233	IdentifierDecl	* pidinfo = NULL		3062182	0					
ANR	3062234	IdentifierDeclType	DaemonCore :: PidEntry *		3062182	0					
ANR	3062235	Identifier	pidinfo		3062182	1					
ANR	3062236	AssignmentExpression	* pidinfo = NULL		3062182	2		=			
ANR	3062237	Identifier	NULL		3062182	0					
ANR	3062238	Identifier	NULL		3062182	1					
ANR	3062239	IfStatement	"if ( ( daemonCore -> pidTable -> lookup ( pid , pidinfo ) >= 0 ) )"		3062182	6					
ANR	3062240	Condition	"daemonCore -> pidTable -> lookup ( pid , pidinfo ) >= 0"	6790:5:206767:206815	3062182	0	True				
ANR	3062241	RelationalExpression	"daemonCore -> pidTable -> lookup ( pid , pidinfo ) >= 0"		3062182	0		>=			
ANR	3062242	CallExpression	"daemonCore -> pidTable -> lookup ( pid , pidinfo )"		3062182	0					
ANR	3062243	Callee	daemonCore -> pidTable -> lookup		3062182	0					
ANR	3062244	PtrMemberAccess	daemonCore -> pidTable -> lookup		3062182	0					
ANR	3062245	PtrMemberAccess	daemonCore -> pidTable		3062182	0					
ANR	3062246	Identifier	daemonCore		3062182	0					
ANR	3062247	Identifier	pidTable		3062182	1					
ANR	3062248	Identifier	lookup		3062182	1					
ANR	3062249	ArgumentList	pid		3062182	1					
ANR	3062250	Argument	pid		3062182	0					
ANR	3062251	Identifier	pid		3062182	0					
ANR	3062252	Argument	pidinfo		3062182	1					
ANR	3062253	Identifier	pidinfo		3062182	0					
ANR	3062254	PrimaryExpression	0		3062182	1					
ANR	3062255	CompoundStatement		62:2:3076:3125	3062182	1					
ANR	3062256	IdentifierDeclStatement	int child_errno = DaemonCore :: ERRNO_PID_COLLISION ;	6793:2:206935:206984	3062182	0	True				
ANR	3062257	IdentifierDecl	child_errno = DaemonCore :: ERRNO_PID_COLLISION		3062182	0					
ANR	3062258	IdentifierDeclType	int		3062182	0					
ANR	3062259	Identifier	child_errno		3062182	1					
ANR	3062260	AssignmentExpression	child_errno = DaemonCore :: ERRNO_PID_COLLISION		3062182	2		=			
ANR	3062261	Identifier	DaemonCore :: ERRNO_PID_COLLISION		3062182	0					
ANR	3062262	Identifier	DaemonCore :: ERRNO_PID_COLLISION		3062182	1					
ANR	3062263	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & child_errno , sizeof ( child_errno ) )"	6794:2:206988:207044	3062182	1	True				
ANR	3062264	CallExpression	"write ( m_errorpipe [ 1 ] , & child_errno , sizeof ( child_errno ) )"		3062182	0					
ANR	3062265	Callee	write		3062182	0					
ANR	3062266	Identifier	write		3062182	0					
ANR	3062267	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3062268	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3062269	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3062270	Identifier	m_errorpipe		3062182	0					
ANR	3062271	PrimaryExpression	1		3062182	1					
ANR	3062272	Argument	& child_errno		3062182	1					
ANR	3062273	UnaryOperationExpression	& child_errno		3062182	0					
ANR	3062274	UnaryOperator	&		3062182	0					
ANR	3062275	Identifier	child_errno		3062182	1					
ANR	3062276	Argument	sizeof ( child_errno )		3062182	2					
ANR	3062277	SizeofExpression	sizeof ( child_errno )		3062182	0					
ANR	3062278	Sizeof	sizeof		3062182	0					
ANR	3062279	SizeofOperand	child_errno		3062182	1					
ANR	3062280	ExpressionStatement	_exit ( 4 )	6795:2:207048:207056	3062182	2	True				
ANR	3062281	CallExpression	_exit ( 4 )		3062182	0					
ANR	3062282	Callee	_exit		3062182	0					
ANR	3062283	Identifier	_exit		3062182	0					
ANR	3062284	ArgumentList	4		3062182	1					
ANR	3062285	Argument	4		3062182	0					
ANR	3062286	PrimaryExpression	4		3062182	0					
ANR	3062287	IfStatement	if ( HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask ) )		3062182	7					
ANR	3062288	Condition	HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask )	6806:5:207485:207524	3062182	0	True				
ANR	3062289	CallExpression	HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask )		3062182	0					
ANR	3062290	Callee	HAS_DCJOBOPT_ENV_INHERIT		3062182	0					
ANR	3062291	Identifier	HAS_DCJOBOPT_ENV_INHERIT		3062182	0					
ANR	3062292	ArgumentList	m_job_opt_mask		3062182	1					
ANR	3062293	Argument	m_job_opt_mask		3062182	0					
ANR	3062294	Identifier	m_job_opt_mask		3062182	0					
ANR	3062295	CompoundStatement		75:48:3669:3669	3062182	1					
ANR	3062296	ExpressionStatement	m_envobject . MergeFrom ( GetEnviron ( ) )	6807:2:207532:207567	3062182	0	True				
ANR	3062297	CallExpression	m_envobject . MergeFrom ( GetEnviron ( ) )		3062182	0					
ANR	3062298	Callee	m_envobject . MergeFrom		3062182	0					
ANR	3062299	MemberAccess	m_envobject . MergeFrom		3062182	0					
ANR	3062300	Identifier	m_envobject		3062182	0					
ANR	3062301	Identifier	MergeFrom		3062182	1					
ANR	3062302	ArgumentList	GetEnviron ( )		3062182	1					
ANR	3062303	Argument	GetEnviron ( )		3062182	0					
ANR	3062304	CallExpression	GetEnviron ( )		3062182	0					
ANR	3062305	Callee	GetEnviron		3062182	0					
ANR	3062306	Identifier	GetEnviron		3062182	0					
ANR	3062307	ArgumentList			3062182	1					
ANR	3062308	IfStatement	if ( m_env )		3062182	8					
ANR	3062309	Condition	m_env	6813:4:207766:207770	3062182	0	True				
ANR	3062310	Identifier	m_env		3062182	0					
ANR	3062311	CompoundStatement		82:11:3914:3914	3062182	1					
ANR	3062312	ExpressionStatement	m_envobject . MergeFrom ( * m_env )	6814:2:207777:207806	3062182	0	True				
ANR	3062313	CallExpression	m_envobject . MergeFrom ( * m_env )		3062182	0					
ANR	3062314	Callee	m_envobject . MergeFrom		3062182	0					
ANR	3062315	MemberAccess	m_envobject . MergeFrom		3062182	0					
ANR	3062316	Identifier	m_envobject		3062182	0					
ANR	3062317	Identifier	MergeFrom		3062182	1					
ANR	3062318	ArgumentList	* m_env		3062182	1					
ANR	3062319	Argument	* m_env		3062182	0					
ANR	3062320	UnaryOperationExpression	* m_env		3062182	0					
ANR	3062321	UnaryOperator	*		3062182	0					
ANR	3062322	Identifier	m_env		3062182	1					
ANR	3062323	IfStatement	if ( HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask ) )		3062182	9					
ANR	3062324	Condition	HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask )	6819:5:207958:207997	3062182	0	True				
ANR	3062325	CallExpression	HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask )		3062182	0					
ANR	3062326	Callee	HAS_DCJOBOPT_ENV_INHERIT		3062182	0					
ANR	3062327	Identifier	HAS_DCJOBOPT_ENV_INHERIT		3062182	0					
ANR	3062328	ArgumentList	m_job_opt_mask		3062182	1					
ANR	3062329	Argument	m_job_opt_mask		3062182	0					
ANR	3062330	Identifier	m_job_opt_mask		3062182	0					
ANR	3062331	CompoundStatement		102:2:4724:4737	3062182	1					
ANR	3062332	ExpressionStatement	"m_envobject . SetEnv ( EnvGetName ( ENV_INHERIT ) , m_inheritbuf . Value ( ) )"	6823:2:208093:208162	3062182	0	True				
ANR	3062333	CallExpression	"m_envobject . SetEnv ( EnvGetName ( ENV_INHERIT ) , m_inheritbuf . Value ( ) )"		3062182	0					
ANR	3062334	Callee	m_envobject . SetEnv		3062182	0					
ANR	3062335	MemberAccess	m_envobject . SetEnv		3062182	0					
ANR	3062336	Identifier	m_envobject		3062182	0					
ANR	3062337	Identifier	SetEnv		3062182	1					
ANR	3062338	ArgumentList	EnvGetName ( ENV_INHERIT )		3062182	1					
ANR	3062339	Argument	EnvGetName ( ENV_INHERIT )		3062182	0					
ANR	3062340	CallExpression	EnvGetName ( ENV_INHERIT )		3062182	0					
ANR	3062341	Callee	EnvGetName		3062182	0					
ANR	3062342	Identifier	EnvGetName		3062182	0					
ANR	3062343	ArgumentList	ENV_INHERIT		3062182	1					
ANR	3062344	Argument	ENV_INHERIT		3062182	0					
ANR	3062345	Identifier	ENV_INHERIT		3062182	0					
ANR	3062346	Argument	m_inheritbuf . Value ( )		3062182	1					
ANR	3062347	CallExpression	m_inheritbuf . Value ( )		3062182	0					
ANR	3062348	Callee	m_inheritbuf . Value		3062182	0					
ANR	3062349	MemberAccess	m_inheritbuf . Value		3062182	0					
ANR	3062350	Identifier	m_inheritbuf		3062182	0					
ANR	3062351	Identifier	Value		3062182	1					
ANR	3062352	ArgumentList			3062182	1					
ANR	3062353	IfStatement	if ( ! m_privateinheritbuf . IsEmpty ( ) )		3062182	1					
ANR	3062354	Condition	! m_privateinheritbuf . IsEmpty ( )	6825:6:208171:208200	3062182	0	True				
ANR	3062355	UnaryOperationExpression	! m_privateinheritbuf . IsEmpty ( )		3062182	0					
ANR	3062356	UnaryOperator	!		3062182	0					
ANR	3062357	CallExpression	m_privateinheritbuf . IsEmpty ( )		3062182	1					
ANR	3062358	Callee	m_privateinheritbuf . IsEmpty		3062182	0					
ANR	3062359	MemberAccess	m_privateinheritbuf . IsEmpty		3062182	0					
ANR	3062360	Identifier	m_privateinheritbuf		3062182	0					
ANR	3062361	Identifier	IsEmpty		3062182	1					
ANR	3062362	ArgumentList			3062182	1					
ANR	3062363	CompoundStatement		94:39:4345:4345	3062182	1					
ANR	3062364	ExpressionStatement	"m_envobject . SetEnv ( EnvGetName ( ENV_PRIVATE ) , m_privateinheritbuf . Value ( ) )"	6826:3:208209:208285	3062182	0	True				
ANR	3062365	CallExpression	"m_envobject . SetEnv ( EnvGetName ( ENV_PRIVATE ) , m_privateinheritbuf . Value ( ) )"		3062182	0					
ANR	3062366	Callee	m_envobject . SetEnv		3062182	0					
ANR	3062367	MemberAccess	m_envobject . SetEnv		3062182	0					
ANR	3062368	Identifier	m_envobject		3062182	0					
ANR	3062369	Identifier	SetEnv		3062182	1					
ANR	3062370	ArgumentList	EnvGetName ( ENV_PRIVATE )		3062182	1					
ANR	3062371	Argument	EnvGetName ( ENV_PRIVATE )		3062182	0					
ANR	3062372	CallExpression	EnvGetName ( ENV_PRIVATE )		3062182	0					
ANR	3062373	Callee	EnvGetName		3062182	0					
ANR	3062374	Identifier	EnvGetName		3062182	0					
ANR	3062375	ArgumentList	ENV_PRIVATE		3062182	1					
ANR	3062376	Argument	ENV_PRIVATE		3062182	0					
ANR	3062377	Identifier	ENV_PRIVATE		3062182	0					
ANR	3062378	Argument	m_privateinheritbuf . Value ( )		3062182	1					
ANR	3062379	CallExpression	m_privateinheritbuf . Value ( )		3062182	0					
ANR	3062380	Callee	m_privateinheritbuf . Value		3062182	0					
ANR	3062381	MemberAccess	m_privateinheritbuf . Value		3062182	0					
ANR	3062382	Identifier	m_privateinheritbuf		3062182	0					
ANR	3062383	Identifier	Value		3062182	1					
ANR	3062384	ArgumentList			3062182	1					
ANR	3062385	IdentifierDeclStatement	char * display ;	6833:2:208583:208596	3062182	2	True				
ANR	3062386	IdentifierDecl	* display		3062182	0					
ANR	3062387	IdentifierDeclType	char *		3062182	0					
ANR	3062388	Identifier	display		3062182	1					
ANR	3062389	ExpressionStatement	"display = param ( ""PURIFY_DISPLAY"" )"	6834:2:208600:208636	3062182	3	True				
ANR	3062390	AssignmentExpression	"display = param ( ""PURIFY_DISPLAY"" )"		3062182	0		=			
ANR	3062391	Identifier	display		3062182	0					
ANR	3062392	CallExpression	"param ( ""PURIFY_DISPLAY"" )"		3062182	1					
ANR	3062393	Callee	param		3062182	0					
ANR	3062394	Identifier	param		3062182	0					
ANR	3062395	ArgumentList	"""PURIFY_DISPLAY"""		3062182	1					
ANR	3062396	Argument	"""PURIFY_DISPLAY"""		3062182	0					
ANR	3062397	PrimaryExpression	"""PURIFY_DISPLAY"""		3062182	0					
ANR	3062398	IfStatement	if ( display )		3062182	4					
ANR	3062399	Condition	display	6835:7:208645:208651	3062182	0	True				
ANR	3062400	Identifier	display		3062182	0					
ANR	3062401	CompoundStatement		107:3:4867:4880	3062182	1					
ANR	3062402	ExpressionStatement	"m_envobject . SetEnv ( ""DISPLAY"" , display )"	6836:3:208660:208700	3062182	0	True				
ANR	3062403	CallExpression	"m_envobject . SetEnv ( ""DISPLAY"" , display )"		3062182	0					
ANR	3062404	Callee	m_envobject . SetEnv		3062182	0					
ANR	3062405	MemberAccess	m_envobject . SetEnv		3062182	0					
ANR	3062406	Identifier	m_envobject		3062182	0					
ANR	3062407	Identifier	SetEnv		3062182	1					
ANR	3062408	ArgumentList	"""DISPLAY"""		3062182	1					
ANR	3062409	Argument	"""DISPLAY"""		3062182	0					
ANR	3062410	PrimaryExpression	"""DISPLAY"""		3062182	0					
ANR	3062411	Argument	display		3062182	1					
ANR	3062412	Identifier	display		3062182	0					
ANR	3062413	ExpressionStatement	free ( display )	6837:3:208705:208721	3062182	1	True				
ANR	3062414	CallExpression	free ( display )		3062182	0					
ANR	3062415	Callee	free		3062182	0					
ANR	3062416	Identifier	free		3062182	0					
ANR	3062417	ArgumentList	display		3062182	1					
ANR	3062418	Argument	display		3062182	0					
ANR	3062419	Identifier	display		3062182	0					
ANR	3062420	IdentifierDeclStatement	char * purebuf ;	6838:3:208726:208739	3062182	2	True				
ANR	3062421	IdentifierDecl	* purebuf		3062182	0					
ANR	3062422	IdentifierDeclType	char *		3062182	0					
ANR	3062423	Identifier	purebuf		3062182	1					
ANR	3062424	ExpressionStatement	"purebuf = ( char * ) malloc ( sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 ) )"	6839:3:208744:208858	3062182	3	True				
ANR	3062425	AssignmentExpression	"purebuf = ( char * ) malloc ( sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 ) )"		3062182	0		=			
ANR	3062426	Identifier	purebuf		3062182	0					
ANR	3062427	CastExpression	"( char * ) malloc ( sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 ) )"		3062182	1					
ANR	3062428	CastTarget	char *		3062182	0					
ANR	3062429	CallExpression	"malloc ( sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 ) )"		3062182	1					
ANR	3062430	Callee	malloc		3062182	0					
ANR	3062431	Identifier	malloc		3062182	0					
ANR	3062432	ArgumentList	"sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 )"		3062182	1					
ANR	3062433	Argument	"sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 )"		3062182	0					
ANR	3062434	MultiplicativeExpression	"sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 )"		3062182	0		*			
ANR	3062435	SizeofExpression	sizeof ( char )		3062182	0					
ANR	3062436	Sizeof	sizeof		3062182	0					
ANR	3062437	SizeofOperand	char		3062182	1					
ANR	3062438	AdditiveExpression	"strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1"		3062182	1		+			
ANR	3062439	CallExpression	"strlen ( ""-program-name="" )"		3062182	0					
ANR	3062440	Callee	strlen		3062182	0					
ANR	3062441	Identifier	strlen		3062182	0					
ANR	3062442	ArgumentList	"""-program-name="""		3062182	1					
ANR	3062443	Argument	"""-program-name="""		3062182	0					
ANR	3062444	PrimaryExpression	"""-program-name="""		3062182	0					
ANR	3062445	AdditiveExpression	strlen ( m_executable ) + 1		3062182	1		+			
ANR	3062446	CallExpression	strlen ( m_executable )		3062182	0					
ANR	3062447	Callee	strlen		3062182	0					
ANR	3062448	Identifier	strlen		3062182	0					
ANR	3062449	ArgumentList	m_executable		3062182	1					
ANR	3062450	Argument	m_executable		3062182	0					
ANR	3062451	Identifier	m_executable		3062182	0					
ANR	3062452	PrimaryExpression	1		3062182	1					
ANR	3062453	IfStatement	if ( purebuf == NULL )		3062182	4					
ANR	3062454	Condition	purebuf == NULL	6842:7:208867:208881	3062182	0	True				
ANR	3062455	EqualityExpression	purebuf == NULL		3062182	0		==			
ANR	3062456	Identifier	purebuf		3062182	0					
ANR	3062457	Identifier	NULL		3062182	1					
ANR	3062458	CompoundStatement		111:24:5025:5025	3062182	1					
ANR	3062459	ExpressionStatement	"EXCEPT ( ""Create_Process: PUREOPTIONS is out of memory!"" )"	6843:4:208890:208945	3062182	0	True				
ANR	3062460	CallExpression	"EXCEPT ( ""Create_Process: PUREOPTIONS is out of memory!"" )"		3062182	0					
ANR	3062461	Callee	EXCEPT		3062182	0					
ANR	3062462	Identifier	EXCEPT		3062182	0					
ANR	3062463	ArgumentList	"""Create_Process: PUREOPTIONS is out of memory!"""		3062182	1					
ANR	3062464	Argument	"""Create_Process: PUREOPTIONS is out of memory!"""		3062182	0					
ANR	3062465	PrimaryExpression	"""Create_Process: PUREOPTIONS is out of memory!"""		3062182	0					
ANR	3062466	ExpressionStatement	"sprintf ( purebuf , ""-program-name=%s"" , m_executable )"	6845:3:208955:209008	3062182	5	True				
ANR	3062467	CallExpression	"sprintf ( purebuf , ""-program-name=%s"" , m_executable )"		3062182	0					
ANR	3062468	Callee	sprintf		3062182	0					
ANR	3062469	Identifier	sprintf		3062182	0					
ANR	3062470	ArgumentList	purebuf		3062182	1					
ANR	3062471	Argument	purebuf		3062182	0					
ANR	3062472	Identifier	purebuf		3062182	0					
ANR	3062473	Argument	"""-program-name=%s"""		3062182	1					
ANR	3062474	PrimaryExpression	"""-program-name=%s"""		3062182	0					
ANR	3062475	Argument	m_executable		3062182	2					
ANR	3062476	Identifier	m_executable		3062182	0					
ANR	3062477	ExpressionStatement	"m_envobject . SetEnv ( ""PUREOPTIONS"" , purebuf )"	6846:3:209013:209057	3062182	6	True				
ANR	3062478	CallExpression	"m_envobject . SetEnv ( ""PUREOPTIONS"" , purebuf )"		3062182	0					
ANR	3062479	Callee	m_envobject . SetEnv		3062182	0					
ANR	3062480	MemberAccess	m_envobject . SetEnv		3062182	0					
ANR	3062481	Identifier	m_envobject		3062182	0					
ANR	3062482	Identifier	SetEnv		3062182	1					
ANR	3062483	ArgumentList	"""PUREOPTIONS"""		3062182	1					
ANR	3062484	Argument	"""PUREOPTIONS"""		3062182	0					
ANR	3062485	PrimaryExpression	"""PUREOPTIONS"""		3062182	0					
ANR	3062486	Argument	purebuf		3062182	1					
ANR	3062487	Identifier	purebuf		3062182	0					
ANR	3062488	ExpressionStatement	free ( purebuf )	6847:3:209062:209075	3062182	7	True				
ANR	3062489	CallExpression	free ( purebuf )		3062182	0					
ANR	3062490	Callee	free		3062182	0					
ANR	3062491	Identifier	free		3062182	0					
ANR	3062492	ArgumentList	purebuf		3062182	1					
ANR	3062493	Argument	purebuf		3062182	0					
ANR	3062494	Identifier	purebuf		3062182	0					
ANR	3062495	IdentifierDeclStatement	char envid [ PIDENVID_ENVID_SIZE ] ;	6860:1:209567:209598	3062182	10	True				
ANR	3062496	IdentifierDecl	envid [ PIDENVID_ENVID_SIZE ]		3062182	0					
ANR	3062497	IdentifierDeclType	char [ PIDENVID_ENVID_SIZE ]		3062182	0					
ANR	3062498	Identifier	envid		3062182	1					
ANR	3062499	Identifier	PIDENVID_ENVID_SIZE		3062182	2					
ANR	3062500	IdentifierDeclStatement	PidEnvID penvid ;	6865:1:209799:209814	3062182	11	True				
ANR	3062501	IdentifierDecl	penvid		3062182	0					
ANR	3062502	IdentifierDeclType	PidEnvID		3062182	0					
ANR	3062503	Identifier	penvid		3062182	1					
ANR	3062504	ExpressionStatement	pidenvid_init ( & penvid )	6866:1:209817:209839	3062182	12	True				
ANR	3062505	CallExpression	pidenvid_init ( & penvid )		3062182	0					
ANR	3062506	Callee	pidenvid_init		3062182	0					
ANR	3062507	Identifier	pidenvid_init		3062182	0					
ANR	3062508	ArgumentList	& penvid		3062182	1					
ANR	3062509	Argument	& penvid		3062182	0					
ANR	3062510	UnaryOperationExpression	& penvid		3062182	0					
ANR	3062511	UnaryOperator	&		3062182	0					
ANR	3062512	Identifier	penvid		3062182	1					
ANR	3062513	IfStatement	if ( HAS_DCJOBOPT_NO_ENV_INHERIT ( m_job_opt_mask ) )		3062182	13					
ANR	3062514	Condition	HAS_DCJOBOPT_NO_ENV_INHERIT ( m_job_opt_mask )	6871:6:210003:210045	3062182	0	True				
ANR	3062515	CallExpression	HAS_DCJOBOPT_NO_ENV_INHERIT ( m_job_opt_mask )		3062182	0					
ANR	3062516	Callee	HAS_DCJOBOPT_NO_ENV_INHERIT		3062182	0					
ANR	3062517	Identifier	HAS_DCJOBOPT_NO_ENV_INHERIT		3062182	0					
ANR	3062518	ArgumentList	m_job_opt_mask		3062182	1					
ANR	3062519	Argument	m_job_opt_mask		3062182	0					
ANR	3062520	Identifier	m_job_opt_mask		3062182	0					
ANR	3062521	CompoundStatement		141:2:6194:6199	3062182	1					
ANR	3062522	IdentifierDeclStatement	int i ;	6872:2:210053:210058	3062182	0	True				
ANR	3062523	IdentifierDecl	i		3062182	0					
ANR	3062524	IdentifierDeclType	int		3062182	0					
ANR	3062525	Identifier	i		3062182	1					
ANR	3062526	IfStatement	"if ( pidenvid_filter_and_insert ( & penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED )"		3062182	1					
ANR	3062527	Condition	"pidenvid_filter_and_insert ( & penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED"	6876:6:210231:210304	3062182	0	True				
ANR	3062528	EqualityExpression	"pidenvid_filter_and_insert ( & penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED"		3062182	0		==			
ANR	3062529	CallExpression	"pidenvid_filter_and_insert ( & penvid , GetEnviron ( ) )"		3062182	0					
ANR	3062530	Callee	pidenvid_filter_and_insert		3062182	0					
ANR	3062531	Identifier	pidenvid_filter_and_insert		3062182	0					
ANR	3062532	ArgumentList	& penvid		3062182	1					
ANR	3062533	Argument	& penvid		3062182	0					
ANR	3062534	UnaryOperationExpression	& penvid		3062182	0					
ANR	3062535	UnaryOperator	&		3062182	0					
ANR	3062536	Identifier	penvid		3062182	1					
ANR	3062537	Argument	GetEnviron ( )		3062182	1					
ANR	3062538	CallExpression	GetEnviron ( )		3062182	0					
ANR	3062539	Callee	GetEnviron		3062182	0					
ANR	3062540	Identifier	GetEnviron		3062182	0					
ANR	3062541	ArgumentList			3062182	1					
ANR	3062542	Identifier	PIDENVID_OVERSIZED		3062182	1					
ANR	3062543	CompoundStatement		147:3:6451:6451	3062182	1					
ANR	3062544	Statement	dprintf	6879:4:210316:210322	3062182	0	True				
ANR	3062545	Statement	(	6879:12:210324:210324	3062182	1	True				
ANR	3062546	Statement	D_ALWAYS	6879:14:210326:210333	3062182	2	True				
ANR	3062547	Statement	","	6879:22:210334:210334	3062182	3	True				
ANR	3062548	Statement	"""Create_Process: Failed to filter ancestor """	6879:24:210336:210379	3062182	4	True				
ANR	3062549	Statement	"""history from parent's environment because there are more """	6880:8:210389:210447	3062182	5	True				
ANR	3062550	Statement	"""than PIDENVID_MAX(%d) of them! Programmer Error.\\n"""	6881:8:210457:210508	3062182	6	True				
ANR	3062551	Statement	","	6881:60:210509:210509	3062182	7	True				
ANR	3062552	Statement	PIDENVID_MAX	6882:8:210519:210530	3062182	8	True				
ANR	3062553	Statement	)	6882:21:210532:210532	3062182	9	True				
ANR	3062554	ExpressionStatement		6882:22:210533:210533	3062182	10	True				
ANR	3062555	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	6885:4:210638:210682	3062182	11	True				
ANR	3062556	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		3062182	0					
ANR	3062557	Callee	write		3062182	0					
ANR	3062558	Identifier	write		3062182	0					
ANR	3062559	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3062560	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3062561	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3062562	Identifier	m_errorpipe		3062182	0					
ANR	3062563	PrimaryExpression	1		3062182	1					
ANR	3062564	Argument	& errno		3062182	1					
ANR	3062565	UnaryOperationExpression	& errno		3062182	0					
ANR	3062566	UnaryOperator	&		3062182	0					
ANR	3062567	Identifier	errno		3062182	1					
ANR	3062568	Argument	sizeof ( errno )		3062182	2					
ANR	3062569	SizeofExpression	sizeof ( errno )		3062182	0					
ANR	3062570	Sizeof	sizeof		3062182	0					
ANR	3062571	SizeofOperand	errno		3062182	1					
ANR	3062572	ExpressionStatement	_exit ( errno )	6886:4:210688:210700	3062182	12	True				
ANR	3062573	CallExpression	_exit ( errno )		3062182	0					
ANR	3062574	Callee	_exit		3062182	0					
ANR	3062575	Identifier	_exit		3062182	0					
ANR	3062576	ArgumentList	errno		3062182	1					
ANR	3062577	Argument	errno		3062182	0					
ANR	3062578	Identifier	errno		3062182	0					
ANR	3062579	ForStatement	for ( i = 0 ; i < PIDENVID_MAX ; i ++ )		3062182	2					
ANR	3062580	ForInit	i = 0 ;	6890:7:210779:210784	3062182	0	True				
ANR	3062581	AssignmentExpression	i = 0		3062182	0		=			
ANR	3062582	Identifier	i		3062182	0					
ANR	3062583	PrimaryExpression	0		3062182	1					
ANR	3062584	Condition	i < PIDENVID_MAX	6890:14:210786:210801	3062182	1	True				
ANR	3062585	RelationalExpression	i < PIDENVID_MAX		3062182	0		<			
ANR	3062586	Identifier	i		3062182	0					
ANR	3062587	Identifier	PIDENVID_MAX		3062182	1					
ANR	3062588	PostIncDecOperationExpression	i ++	6890:32:210804:210806	3062182	2	True				
ANR	3062589	Identifier	i		3062182	0					
ANR	3062590	IncDec	++		3062182	1					
ANR	3062591	CompoundStatement		159:37:6950:6950	3062182	3					
ANR	3062592	IfStatement	if ( penvid . ancestors [ i ] . active == TRUE )		3062182	0					
ANR	3062593	Condition	penvid . ancestors [ i ] . active == TRUE	6891:7:210818:210851	3062182	0	True				
ANR	3062594	EqualityExpression	penvid . ancestors [ i ] . active == TRUE		3062182	0		==			
ANR	3062595	MemberAccess	penvid . ancestors [ i ] . active		3062182	0					
ANR	3062596	ArrayIndexing	penvid . ancestors [ i ]		3062182	0					
ANR	3062597	MemberAccess	penvid . ancestors		3062182	0					
ANR	3062598	Identifier	penvid		3062182	0					
ANR	3062599	Identifier	ancestors		3062182	1					
ANR	3062600	Identifier	i		3062182	1					
ANR	3062601	Identifier	active		3062182	1					
ANR	3062602	Identifier	TRUE		3062182	1					
ANR	3062603	CompoundStatement		160:43:6995:6995	3062182	1					
ANR	3062604	ExpressionStatement	m_envobject . SetEnv ( penvid . ancestors [ i ] . envid )	6892:4:210861:210908	3062182	0	True				
ANR	3062605	CallExpression	m_envobject . SetEnv ( penvid . ancestors [ i ] . envid )		3062182	0					
ANR	3062606	Callee	m_envobject . SetEnv		3062182	0					
ANR	3062607	MemberAccess	m_envobject . SetEnv		3062182	0					
ANR	3062608	Identifier	m_envobject		3062182	0					
ANR	3062609	Identifier	SetEnv		3062182	1					
ANR	3062610	ArgumentList	penvid . ancestors [ i ] . envid		3062182	1					
ANR	3062611	Argument	penvid . ancestors [ i ] . envid		3062182	0					
ANR	3062612	MemberAccess	penvid . ancestors [ i ] . envid		3062182	0					
ANR	3062613	ArrayIndexing	penvid . ancestors [ i ]		3062182	0					
ANR	3062614	MemberAccess	penvid . ancestors		3062182	0					
ANR	3062615	Identifier	penvid		3062182	0					
ANR	3062616	Identifier	ancestors		3062182	1					
ANR	3062617	Identifier	i		3062182	1					
ANR	3062618	Identifier	envid		3062182	1					
ANR	3062619	ElseStatement	else		3062182	0					
ANR	3062620	CompoundStatement		162:10:7061:7061	3062182	0					
ANR	3062621	BreakStatement	break ;	6896:4:211005:211010	3062182	0	True				
ANR	3062622	IfStatement	"if ( pidenvid_format_to_envid ( envid , PIDENVID_ENVID_SIZE , m_forker_pid , pid , m_time_of_fork , m_mii ) == PIDENVID_BAD_FORMAT )"		3062182	14					
ANR	3062623	Condition	"pidenvid_format_to_envid ( envid , PIDENVID_ENVID_SIZE , m_forker_pid , pid , m_time_of_fork , m_mii ) == PIDENVID_BAD_FORMAT"	6902:5:211093:211219	3062182	0	True				
ANR	3062624	EqualityExpression	"pidenvid_format_to_envid ( envid , PIDENVID_ENVID_SIZE , m_forker_pid , pid , m_time_of_fork , m_mii ) == PIDENVID_BAD_FORMAT"		3062182	0		==			
ANR	3062625	CallExpression	"pidenvid_format_to_envid ( envid , PIDENVID_ENVID_SIZE , m_forker_pid , pid , m_time_of_fork , m_mii )"		3062182	0					
ANR	3062626	Callee	pidenvid_format_to_envid		3062182	0					
ANR	3062627	Identifier	pidenvid_format_to_envid		3062182	0					
ANR	3062628	ArgumentList	envid		3062182	1					
ANR	3062629	Argument	envid		3062182	0					
ANR	3062630	Identifier	envid		3062182	0					
ANR	3062631	Argument	PIDENVID_ENVID_SIZE		3062182	1					
ANR	3062632	Identifier	PIDENVID_ENVID_SIZE		3062182	0					
ANR	3062633	Argument	m_forker_pid		3062182	2					
ANR	3062634	Identifier	m_forker_pid		3062182	0					
ANR	3062635	Argument	pid		3062182	3					
ANR	3062636	Identifier	pid		3062182	0					
ANR	3062637	Argument	m_time_of_fork		3062182	4					
ANR	3062638	Identifier	m_time_of_fork		3062182	0					
ANR	3062639	Argument	m_mii		3062182	5					
ANR	3062640	Identifier	m_mii		3062182	0					
ANR	3062641	Identifier	PIDENVID_BAD_FORMAT		3062182	1					
ANR	3062642	CompoundStatement		173:2:7366:7366	3062182	1					
ANR	3062643	Statement	dprintf	6905:3:211230:211236	3062182	0	True				
ANR	3062644	Statement	(	6905:11:211238:211238	3062182	1	True				
ANR	3062645	Statement	D_ALWAYS	6905:13:211240:211247	3062182	2	True				
ANR	3062646	Statement	","	6905:21:211248:211248	3062182	3	True				
ANR	3062647	Statement	"""Create_Process: Failed to create envid """	6905:23:211250:211290	3062182	4	True				
ANR	3062648	Statement	"""\\""%s\\"" due to bad format. !\\n"""	6906:7:211299:211329	3062182	5	True				
ANR	3062649	Statement	","	6906:38:211330:211330	3062182	6	True				
ANR	3062650	Statement	envid	6906:40:211332:211336	3062182	7	True				
ANR	3062651	Statement	)	6906:46:211338:211338	3062182	8	True				
ANR	3062652	ExpressionStatement		6906:47:211339:211339	3062182	9	True				
ANR	3062653	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	6909:3:211441:211485	3062182	10	True				
ANR	3062654	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		3062182	0					
ANR	3062655	Callee	write		3062182	0					
ANR	3062656	Identifier	write		3062182	0					
ANR	3062657	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3062658	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3062659	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3062660	Identifier	m_errorpipe		3062182	0					
ANR	3062661	PrimaryExpression	1		3062182	1					
ANR	3062662	Argument	& errno		3062182	1					
ANR	3062663	UnaryOperationExpression	& errno		3062182	0					
ANR	3062664	UnaryOperator	&		3062182	0					
ANR	3062665	Identifier	errno		3062182	1					
ANR	3062666	Argument	sizeof ( errno )		3062182	2					
ANR	3062667	SizeofExpression	sizeof ( errno )		3062182	0					
ANR	3062668	Sizeof	sizeof		3062182	0					
ANR	3062669	SizeofOperand	errno		3062182	1					
ANR	3062670	ExpressionStatement	_exit ( errno )	6910:3:211490:211502	3062182	11	True				
ANR	3062671	CallExpression	_exit ( errno )		3062182	0					
ANR	3062672	Callee	_exit		3062182	0					
ANR	3062673	Identifier	_exit		3062182	0					
ANR	3062674	ArgumentList	errno		3062182	1					
ANR	3062675	Argument	errno		3062182	0					
ANR	3062676	Identifier	errno		3062182	0					
ANR	3062677	IfStatement	"if ( pidenvid_append ( & penvid , envid ) == PIDENVID_OK )"		3062182	15					
ANR	3062678	Condition	"pidenvid_append ( & penvid , envid ) == PIDENVID_OK"	6915:5:211640:211685	3062182	0	True				
ANR	3062679	EqualityExpression	"pidenvid_append ( & penvid , envid ) == PIDENVID_OK"		3062182	0		==			
ANR	3062680	CallExpression	"pidenvid_append ( & penvid , envid )"		3062182	0					
ANR	3062681	Callee	pidenvid_append		3062182	0					
ANR	3062682	Identifier	pidenvid_append		3062182	0					
ANR	3062683	ArgumentList	& penvid		3062182	1					
ANR	3062684	Argument	& penvid		3062182	0					
ANR	3062685	UnaryOperationExpression	& penvid		3062182	0					
ANR	3062686	UnaryOperator	&		3062182	0					
ANR	3062687	Identifier	penvid		3062182	1					
ANR	3062688	Argument	envid		3062182	1					
ANR	3062689	Identifier	envid		3062182	0					
ANR	3062690	Identifier	PIDENVID_OK		3062182	1					
ANR	3062691	CompoundStatement		184:53:7829:7829	3062182	1					
ANR	3062692	ExpressionStatement	m_envobject . SetEnv ( envid )	6916:2:211692:211719	3062182	0	True				
ANR	3062693	CallExpression	m_envobject . SetEnv ( envid )		3062182	0					
ANR	3062694	Callee	m_envobject . SetEnv		3062182	0					
ANR	3062695	MemberAccess	m_envobject . SetEnv		3062182	0					
ANR	3062696	Identifier	m_envobject		3062182	0					
ANR	3062697	Identifier	SetEnv		3062182	1					
ANR	3062698	ArgumentList	envid		3062182	1					
ANR	3062699	Argument	envid		3062182	0					
ANR	3062700	Identifier	envid		3062182	0					
ANR	3062701	ElseStatement	else		3062182	0					
ANR	3062702	CompoundStatement		186:8:7870:7870	3062182	0					
ANR	3062703	Statement	dprintf	6918:2:211733:211739	3062182	0	True				
ANR	3062704	Statement	(	6918:10:211741:211741	3062182	1	True				
ANR	3062705	Statement	D_ALWAYS	6918:12:211743:211750	3062182	2	True				
ANR	3062706	Statement	","	6918:20:211751:211751	3062182	3	True				
ANR	3062707	Statement	"""Create_Process: Failed to insert envid """	6918:22:211753:211793	3062182	4	True				
ANR	3062708	Statement	"""\\""%s\\"" because its insertion would mean more than """	6919:6:211801:211852	3062182	5	True				
ANR	3062709	Statement	"""PIDENVID_MAX entries in a process! Programmer """	6920:6:211860:211907	3062182	6	True				
ANR	3062710	Statement	"""Error.\\n"""	6921:6:211915:211924	3062182	7	True				
ANR	3062711	Statement	","	6921:16:211925:211925	3062182	8	True				
ANR	3062712	Statement	envid	6921:18:211927:211931	3062182	9	True				
ANR	3062713	Statement	)	6921:24:211933:211933	3062182	10	True				
ANR	3062714	ExpressionStatement		6921:25:211934:211934	3062182	11	True				
ANR	3062715	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	6924:2:212033:212077	3062182	12	True				
ANR	3062716	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		3062182	0					
ANR	3062717	Callee	write		3062182	0					
ANR	3062718	Identifier	write		3062182	0					
ANR	3062719	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3062720	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3062721	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3062722	Identifier	m_errorpipe		3062182	0					
ANR	3062723	PrimaryExpression	1		3062182	1					
ANR	3062724	Argument	& errno		3062182	1					
ANR	3062725	UnaryOperationExpression	& errno		3062182	0					
ANR	3062726	UnaryOperator	&		3062182	0					
ANR	3062727	Identifier	errno		3062182	1					
ANR	3062728	Argument	sizeof ( errno )		3062182	2					
ANR	3062729	SizeofExpression	sizeof ( errno )		3062182	0					
ANR	3062730	Sizeof	sizeof		3062182	0					
ANR	3062731	SizeofOperand	errno		3062182	1					
ANR	3062732	ExpressionStatement	_exit ( errno )	6925:2:212081:212093	3062182	13	True				
ANR	3062733	CallExpression	_exit ( errno )		3062182	0					
ANR	3062734	Callee	_exit		3062182	0					
ANR	3062735	Identifier	_exit		3062182	0					
ANR	3062736	ArgumentList	errno		3062182	1					
ANR	3062737	Argument	errno		3062182	0					
ANR	3062738	Identifier	errno		3062182	0					
ANR	3062739	ExpressionStatement	m_unix_env = m_envobject . getStringArray ( )	6930:1:212178:212219	3062182	16	True				
ANR	3062740	AssignmentExpression	m_unix_env = m_envobject . getStringArray ( )		3062182	0		=			
ANR	3062741	Identifier	m_unix_env		3062182	0					
ANR	3062742	CallExpression	m_envobject . getStringArray ( )		3062182	1					
ANR	3062743	Callee	m_envobject . getStringArray		3062182	0					
ANR	3062744	MemberAccess	m_envobject . getStringArray		3062182	0					
ANR	3062745	Identifier	m_envobject		3062182	0					
ANR	3062746	Identifier	getStringArray		3062182	1					
ANR	3062747	ArgumentList			3062182	1					
ANR	3062748	IfStatement	if ( m_args . Count ( ) == 0 )		3062182	17					
ANR	3062749	Condition	m_args . Count ( ) == 0	6937:5:212424:212442	3062182	0	True				
ANR	3062750	EqualityExpression	m_args . Count ( ) == 0		3062182	0		==			
ANR	3062751	CallExpression	m_args . Count ( )		3062182	0					
ANR	3062752	Callee	m_args . Count		3062182	0					
ANR	3062753	MemberAccess	m_args . Count		3062182	0					
ANR	3062754	Identifier	m_args		3062182	0					
ANR	3062755	Identifier	Count		3062182	1					
ANR	3062756	ArgumentList			3062182	1					
ANR	3062757	PrimaryExpression	0		3062182	1					
ANR	3062758	CompoundStatement		208:2:8647:8662	3062182	1					
ANR	3062759	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Create_Process: Arg: NULL\\n"" )"	6938:2:212450:212502	3062182	0	True				
ANR	3062760	CallExpression	"dprintf ( D_DAEMONCORE , ""Create_Process: Arg: NULL\\n"" )"		3062182	0					
ANR	3062761	Callee	dprintf		3062182	0					
ANR	3062762	Identifier	dprintf		3062182	0					
ANR	3062763	ArgumentList	D_DAEMONCORE		3062182	1					
ANR	3062764	Argument	D_DAEMONCORE		3062182	0					
ANR	3062765	Identifier	D_DAEMONCORE		3062182	0					
ANR	3062766	Argument	"""Create_Process: Arg: NULL\\n"""		3062182	1					
ANR	3062767	PrimaryExpression	"""Create_Process: Arg: NULL\\n"""		3062182	0					
ANR	3062768	IdentifierDeclStatement	ArgList tmpargs ;	6939:2:212506:212521	3062182	1	True				
ANR	3062769	IdentifierDecl	tmpargs		3062182	0					
ANR	3062770	IdentifierDeclType	ArgList		3062182	0					
ANR	3062771	Identifier	tmpargs		3062182	1					
ANR	3062772	ExpressionStatement	tmpargs . AppendArg ( m_executable )	6940:2:212525:212556	3062182	2	True				
ANR	3062773	CallExpression	tmpargs . AppendArg ( m_executable )		3062182	0					
ANR	3062774	Callee	tmpargs . AppendArg		3062182	0					
ANR	3062775	MemberAccess	tmpargs . AppendArg		3062182	0					
ANR	3062776	Identifier	tmpargs		3062182	0					
ANR	3062777	Identifier	AppendArg		3062182	1					
ANR	3062778	ArgumentList	m_executable		3062182	1					
ANR	3062779	Argument	m_executable		3062182	0					
ANR	3062780	Identifier	m_executable		3062182	0					
ANR	3062781	ExpressionStatement	m_unix_args = tmpargs . GetStringArray ( )	6941:2:212560:212598	3062182	3	True				
ANR	3062782	AssignmentExpression	m_unix_args = tmpargs . GetStringArray ( )		3062182	0		=			
ANR	3062783	Identifier	m_unix_args		3062182	0					
ANR	3062784	CallExpression	tmpargs . GetStringArray ( )		3062182	1					
ANR	3062785	Callee	tmpargs . GetStringArray		3062182	0					
ANR	3062786	MemberAccess	tmpargs . GetStringArray		3062182	0					
ANR	3062787	Identifier	tmpargs		3062182	0					
ANR	3062788	Identifier	GetStringArray		3062182	1					
ANR	3062789	ArgumentList			3062182	1					
ANR	3062790	ElseStatement	else		3062182	0					
ANR	3062791	CompoundStatement		212:6:8750:8750	3062182	0					
ANR	3062792	IfStatement	if ( DebugFlags & D_DAEMONCORE )		3062182	0					
ANR	3062793	Condition	DebugFlags & D_DAEMONCORE	6944:5:212616:212640	3062182	0	True				
ANR	3062794	BitAndExpression	DebugFlags & D_DAEMONCORE		3062182	0		&			
ANR	3062795	Identifier	DebugFlags		3062182	0					
ANR	3062796	Identifier	D_DAEMONCORE		3062182	1					
ANR	3062797	CompoundStatement		214:3:8789:8808	3062182	1					
ANR	3062798	IdentifierDeclStatement	MyString arg_string ;	6945:3:212648:212667	3062182	0	True				
ANR	3062799	IdentifierDecl	arg_string		3062182	0					
ANR	3062800	IdentifierDeclType	MyString		3062182	0					
ANR	3062801	Identifier	arg_string		3062182	1					
ANR	3062802	ExpressionStatement	m_args . GetArgsStringForDisplay ( & arg_string )	6946:3:212672:212715	3062182	1	True				
ANR	3062803	CallExpression	m_args . GetArgsStringForDisplay ( & arg_string )		3062182	0					
ANR	3062804	Callee	m_args . GetArgsStringForDisplay		3062182	0					
ANR	3062805	MemberAccess	m_args . GetArgsStringForDisplay		3062182	0					
ANR	3062806	Identifier	m_args		3062182	0					
ANR	3062807	Identifier	GetArgsStringForDisplay		3062182	1					
ANR	3062808	ArgumentList	& arg_string		3062182	1					
ANR	3062809	Argument	& arg_string		3062182	0					
ANR	3062810	UnaryOperationExpression	& arg_string		3062182	0					
ANR	3062811	UnaryOperator	&		3062182	0					
ANR	3062812	Identifier	arg_string		3062182	1					
ANR	3062813	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Create_Process: Arg: %s\\n"" , arg_string . Value ( ) )"	6947:3:212720:212790	3062182	2	True				
ANR	3062814	CallExpression	"dprintf ( D_DAEMONCORE , ""Create_Process: Arg: %s\\n"" , arg_string . Value ( ) )"		3062182	0					
ANR	3062815	Callee	dprintf		3062182	0					
ANR	3062816	Identifier	dprintf		3062182	0					
ANR	3062817	ArgumentList	D_DAEMONCORE		3062182	1					
ANR	3062818	Argument	D_DAEMONCORE		3062182	0					
ANR	3062819	Identifier	D_DAEMONCORE		3062182	0					
ANR	3062820	Argument	"""Create_Process: Arg: %s\\n"""		3062182	1					
ANR	3062821	PrimaryExpression	"""Create_Process: Arg: %s\\n"""		3062182	0					
ANR	3062822	Argument	arg_string . Value ( )		3062182	2					
ANR	3062823	CallExpression	arg_string . Value ( )		3062182	0					
ANR	3062824	Callee	arg_string . Value		3062182	0					
ANR	3062825	MemberAccess	arg_string . Value		3062182	0					
ANR	3062826	Identifier	arg_string		3062182	0					
ANR	3062827	Identifier	Value		3062182	1					
ANR	3062828	ArgumentList			3062182	1					
ANR	3062829	ExpressionStatement	m_unix_args = m_args . GetStringArray ( )	6949:2:212798:212835	3062182	1	True				
ANR	3062830	AssignmentExpression	m_unix_args = m_args . GetStringArray ( )		3062182	0		=			
ANR	3062831	Identifier	m_unix_args		3062182	0					
ANR	3062832	CallExpression	m_args . GetStringArray ( )		3062182	1					
ANR	3062833	Callee	m_args . GetStringArray		3062182	0					
ANR	3062834	MemberAccess	m_args . GetStringArray		3062182	0					
ANR	3062835	Identifier	m_args		3062182	0					
ANR	3062836	Identifier	GetStringArray		3062182	1					
ANR	3062837	ArgumentList			3062182	1					
ANR	3062838	IfStatement	if ( ( m_family_info != NULL ) )		3062182	18					
ANR	3062839	Condition	m_family_info != NULL	6954:5:212888:212912	3062182	0	True				
ANR	3062840	EqualityExpression	m_family_info != NULL		3062182	0		!=			
ANR	3062841	Identifier	m_family_info		3062182	0					
ANR	3062842	Identifier	NULL		3062182	1					
ANR	3062843	CompoundStatement		223:33:9057:9057	3062182	1					
ANR	3062844	IfStatement	"if ( param_boolean ( ""USE_PROCESS_GROUPS"" , true ) )"		3062182	0					
ANR	3062845	Condition	"param_boolean ( ""USE_PROCESS_GROUPS"" , true )"	6957:5:212978:213020	3062182	0	True				
ANR	3062846	CallExpression	"param_boolean ( ""USE_PROCESS_GROUPS"" , true )"		3062182	0					
ANR	3062847	Callee	param_boolean		3062182	0					
ANR	3062848	Identifier	param_boolean		3062182	0					
ANR	3062849	ArgumentList	"""USE_PROCESS_GROUPS"""		3062182	1					
ANR	3062850	Argument	"""USE_PROCESS_GROUPS"""		3062182	0					
ANR	3062851	PrimaryExpression	"""USE_PROCESS_GROUPS"""		3062182	0					
ANR	3062852	Argument	true		3062182	1					
ANR	3062853	Identifier	true		3062182	0					
ANR	3062854	CompoundStatement		226:50:9164:9164	3062182	1					
ANR	3062855	IfStatement	if ( setsid ( ) == - 1 )		3062182	0					
ANR	3062856	Condition	setsid ( ) == - 1	6960:7:213094:213107	3062182	0	True				
ANR	3062857	EqualityExpression	setsid ( ) == - 1		3062182	0		==			
ANR	3062858	CallExpression	setsid ( )		3062182	0					
ANR	3062859	Callee	setsid		3062182	0					
ANR	3062860	Identifier	setsid		3062182	0					
ANR	3062861	ArgumentList			3062182	1					
ANR	3062862	UnaryOperationExpression	- 1		3062182	1					
ANR	3062863	UnaryOperator	-		3062182	0					
ANR	3062864	PrimaryExpression	1		3062182	1					
ANR	3062865	CompoundStatement		230:4:9256:9256	3062182	1					
ANR	3062866	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: setsid() failed: %s\\n"" , strerror ( errno ) )"	6962:5:213122:213205	3062182	0	True				
ANR	3062867	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: setsid() failed: %s\\n"" , strerror ( errno ) )"		3062182	0					
ANR	3062868	Callee	dprintf		3062182	0					
ANR	3062869	Identifier	dprintf		3062182	0					
ANR	3062870	ArgumentList	D_ALWAYS		3062182	1					
ANR	3062871	Argument	D_ALWAYS		3062182	0					
ANR	3062872	Identifier	D_ALWAYS		3062182	0					
ANR	3062873	Argument	"""Create_Process: setsid() failed: %s\\n"""		3062182	1					
ANR	3062874	PrimaryExpression	"""Create_Process: setsid() failed: %s\\n"""		3062182	0					
ANR	3062875	Argument	strerror ( errno )		3062182	2					
ANR	3062876	CallExpression	strerror ( errno )		3062182	0					
ANR	3062877	Callee	strerror		3062182	0					
ANR	3062878	Identifier	strerror		3062182	0					
ANR	3062879	ArgumentList	errno		3062182	1					
ANR	3062880	Argument	errno		3062182	0					
ANR	3062881	Identifier	errno		3062182	0					
ANR	3062882	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	6966:5:213313:213357	3062182	1	True				
ANR	3062883	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		3062182	0					
ANR	3062884	Callee	write		3062182	0					
ANR	3062885	Identifier	write		3062182	0					
ANR	3062886	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3062887	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3062888	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3062889	Identifier	m_errorpipe		3062182	0					
ANR	3062890	PrimaryExpression	1		3062182	1					
ANR	3062891	Argument	& errno		3062182	1					
ANR	3062892	UnaryOperationExpression	& errno		3062182	0					
ANR	3062893	UnaryOperator	&		3062182	0					
ANR	3062894	Identifier	errno		3062182	1					
ANR	3062895	Argument	sizeof ( errno )		3062182	2					
ANR	3062896	SizeofExpression	sizeof ( errno )		3062182	0					
ANR	3062897	Sizeof	sizeof		3062182	0					
ANR	3062898	SizeofOperand	errno		3062182	1					
ANR	3062899	ExpressionStatement	_exit ( errno )	6967:5:213364:213376	3062182	2	True				
ANR	3062900	CallExpression	_exit ( errno )		3062182	0					
ANR	3062901	Callee	_exit		3062182	0					
ANR	3062902	Identifier	_exit		3062182	0					
ANR	3062903	ArgumentList	errno		3062182	1					
ANR	3062904	Argument	errno		3062182	0					
ANR	3062905	Identifier	errno		3062182	0					
ANR	3062906	ExpressionStatement	ASSERT ( daemonCore -> m_proc_family != NULL )	6975:2:213535:213576	3062182	1	True				
ANR	3062907	CallExpression	ASSERT ( daemonCore -> m_proc_family != NULL )		3062182	0					
ANR	3062908	Callee	ASSERT		3062182	0					
ANR	3062909	Identifier	ASSERT		3062182	0					
ANR	3062910	ArgumentList	daemonCore -> m_proc_family != NULL		3062182	1					
ANR	3062911	Argument	daemonCore -> m_proc_family != NULL		3062182	0					
ANR	3062912	EqualityExpression	daemonCore -> m_proc_family != NULL		3062182	0		!=			
ANR	3062913	PtrMemberAccess	daemonCore -> m_proc_family		3062182	0					
ANR	3062914	Identifier	daemonCore		3062182	0					
ANR	3062915	Identifier	m_proc_family		3062182	1					
ANR	3062916	Identifier	NULL		3062182	1					
ANR	3062917	IfStatement	if ( daemonCore -> m_proc_family -> register_from_child ( ) )		3062182	2					
ANR	3062918	Condition	daemonCore -> m_proc_family -> register_from_child ( )	6976:6:213584:213631	3062182	0	True				
ANR	3062919	CallExpression	daemonCore -> m_proc_family -> register_from_child ( )		3062182	0					
ANR	3062920	Callee	daemonCore -> m_proc_family -> register_from_child		3062182	0					
ANR	3062921	PtrMemberAccess	daemonCore -> m_proc_family -> register_from_child		3062182	0					
ANR	3062922	PtrMemberAccess	daemonCore -> m_proc_family		3062182	0					
ANR	3062923	Identifier	daemonCore		3062182	0					
ANR	3062924	Identifier	m_proc_family		3062182	1					
ANR	3062925	Identifier	register_from_child		3062182	1					
ANR	3062926	ArgumentList			3062182	1					
ANR	3062927	CompoundStatement		269:3:10545:10942	3062182	1					
ANR	3062928	IdentifierDeclStatement	PidEnvID * penvid_ptr = & penvid ;	6988:3:214143:214173	3062182	0	True				
ANR	3062929	IdentifierDecl	* penvid_ptr = & penvid		3062182	0					
ANR	3062930	IdentifierDeclType	PidEnvID *		3062182	0					
ANR	3062931	Identifier	penvid_ptr		3062182	1					
ANR	3062932	AssignmentExpression	* penvid_ptr = & penvid		3062182	2		=			
ANR	3062933	Identifier	penvid_ptr		3062182	0					
ANR	3062934	UnaryOperationExpression	& penvid		3062182	1					
ANR	3062935	UnaryOperator	&		3062182	0					
ANR	3062936	Identifier	penvid		3062182	1					
ANR	3062937	IdentifierDeclStatement	gid_t * tracking_gid_ptr = NULL ;	6995:3:214294:214324	3062182	1	True				
ANR	3062938	IdentifierDecl	* tracking_gid_ptr = NULL		3062182	0					
ANR	3062939	IdentifierDeclType	gid_t *		3062182	0					
ANR	3062940	Identifier	tracking_gid_ptr		3062182	1					
ANR	3062941	AssignmentExpression	* tracking_gid_ptr = NULL		3062182	2		=			
ANR	3062942	Identifier	NULL		3062182	0					
ANR	3062943	Identifier	NULL		3062182	1					
ANR	3062944	ExpressionStatement	tracking_gid_ptr = m_family_info -> group_ptr	6997:3:214348:214391	3062182	2	True				
ANR	3062945	AssignmentExpression	tracking_gid_ptr = m_family_info -> group_ptr		3062182	0		=			
ANR	3062946	Identifier	tracking_gid_ptr		3062182	0					
ANR	3062947	PtrMemberAccess	m_family_info -> group_ptr		3062182	1					
ANR	3062948	Identifier	m_family_info		3062182	0					
ANR	3062949	Identifier	group_ptr		3062182	1					
ANR	3062950	IdentifierDeclStatement	"bool ok = daemonCore -> Register_Family ( pid , ppid , m_family_info -> max_snapshot_interval , penvid_ptr , m_family_info -> login , tracking_gid_ptr , m_family_info -> cgroup , m_family_info -> glexec_proxy ) ;"	7000:3:214404:214801	3062182	3	True				
ANR	3062951	IdentifierDecl	"ok = daemonCore -> Register_Family ( pid , ppid , m_family_info -> max_snapshot_interval , penvid_ptr , m_family_info -> login , tracking_gid_ptr , m_family_info -> cgroup , m_family_info -> glexec_proxy )"		3062182	0					
ANR	3062952	IdentifierDeclType	bool		3062182	0					
ANR	3062953	Identifier	ok		3062182	1					
ANR	3062954	AssignmentExpression	"ok = daemonCore -> Register_Family ( pid , ppid , m_family_info -> max_snapshot_interval , penvid_ptr , m_family_info -> login , tracking_gid_ptr , m_family_info -> cgroup , m_family_info -> glexec_proxy )"		3062182	2		=			
ANR	3062955	Identifier	ok		3062182	0					
ANR	3062956	CallExpression	"daemonCore -> Register_Family ( pid , ppid , m_family_info -> max_snapshot_interval , penvid_ptr , m_family_info -> login , tracking_gid_ptr , m_family_info -> cgroup , m_family_info -> glexec_proxy )"		3062182	1					
ANR	3062957	Callee	daemonCore -> Register_Family		3062182	0					
ANR	3062958	PtrMemberAccess	daemonCore -> Register_Family		3062182	0					
ANR	3062959	Identifier	daemonCore		3062182	0					
ANR	3062960	Identifier	Register_Family		3062182	1					
ANR	3062961	ArgumentList	pid		3062182	1					
ANR	3062962	Argument	pid		3062182	0					
ANR	3062963	Identifier	pid		3062182	0					
ANR	3062964	Argument	ppid		3062182	1					
ANR	3062965	Identifier	ppid		3062182	0					
ANR	3062966	Argument	m_family_info -> max_snapshot_interval		3062182	2					
ANR	3062967	PtrMemberAccess	m_family_info -> max_snapshot_interval		3062182	0					
ANR	3062968	Identifier	m_family_info		3062182	0					
ANR	3062969	Identifier	max_snapshot_interval		3062182	1					
ANR	3062970	Argument	penvid_ptr		3062182	3					
ANR	3062971	Identifier	penvid_ptr		3062182	0					
ANR	3062972	Argument	m_family_info -> login		3062182	4					
ANR	3062973	PtrMemberAccess	m_family_info -> login		3062182	0					
ANR	3062974	Identifier	m_family_info		3062182	0					
ANR	3062975	Identifier	login		3062182	1					
ANR	3062976	Argument	tracking_gid_ptr		3062182	5					
ANR	3062977	Identifier	tracking_gid_ptr		3062182	0					
ANR	3062978	Argument	m_family_info -> cgroup		3062182	6					
ANR	3062979	PtrMemberAccess	m_family_info -> cgroup		3062182	0					
ANR	3062980	Identifier	m_family_info		3062182	0					
ANR	3062981	Identifier	cgroup		3062182	1					
ANR	3062982	Argument	m_family_info -> glexec_proxy		3062182	7					
ANR	3062983	PtrMemberAccess	m_family_info -> glexec_proxy		3062182	0					
ANR	3062984	Identifier	m_family_info		3062182	0					
ANR	3062985	Identifier	glexec_proxy		3062182	1					
ANR	3062986	IfStatement	if ( ! ok )		3062182	4					
ANR	3062987	Condition	! ok	7009:7:214810:214812	3062182	0	True				
ANR	3062988	UnaryOperationExpression	! ok		3062182	0					
ANR	3062989	UnaryOperator	!		3062182	0					
ANR	3062990	Identifier	ok		3062182	1					
ANR	3062991	CompoundStatement		278:12:10956:10956	3062182	1					
ANR	3062992	ExpressionStatement	errno = DaemonCore :: ERRNO_REGISTRATION_FAILED	7010:4:214821:214866	3062182	0	True				
ANR	3062993	AssignmentExpression	errno = DaemonCore :: ERRNO_REGISTRATION_FAILED		3062182	0		=			
ANR	3062994	Identifier	errno		3062182	0					
ANR	3062995	Identifier	DaemonCore :: ERRNO_REGISTRATION_FAILED		3062182	1					
ANR	3062996	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7011:4:214872:214916	3062182	1	True				
ANR	3062997	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		3062182	0					
ANR	3062998	Callee	write		3062182	0					
ANR	3062999	Identifier	write		3062182	0					
ANR	3063000	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3063001	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3063002	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3063003	Identifier	m_errorpipe		3062182	0					
ANR	3063004	PrimaryExpression	1		3062182	1					
ANR	3063005	Argument	& errno		3062182	1					
ANR	3063006	UnaryOperationExpression	& errno		3062182	0					
ANR	3063007	UnaryOperator	&		3062182	0					
ANR	3063008	Identifier	errno		3062182	1					
ANR	3063009	Argument	sizeof ( errno )		3062182	2					
ANR	3063010	SizeofExpression	sizeof ( errno )		3062182	0					
ANR	3063011	Sizeof	sizeof		3062182	0					
ANR	3063012	SizeofOperand	errno		3062182	1					
ANR	3063013	ExpressionStatement	_exit ( 4 )	7012:4:214922:214930	3062182	2	True				
ANR	3063014	CallExpression	_exit ( 4 )		3062182	0					
ANR	3063015	Callee	_exit		3062182	0					
ANR	3063016	Identifier	_exit		3062182	0					
ANR	3063017	ArgumentList	4		3062182	1					
ANR	3063018	Argument	4		3062182	0					
ANR	3063019	PrimaryExpression	4		3062182	0					
ANR	3063020	IfStatement	if ( tracking_gid_ptr != NULL )		3062182	5					
ANR	3063021	Condition	tracking_gid_ptr != NULL	7015:7:214945:214968	3062182	0	True				
ANR	3063022	EqualityExpression	tracking_gid_ptr != NULL		3062182	0		!=			
ANR	3063023	Identifier	tracking_gid_ptr		3062182	0					
ANR	3063024	Identifier	NULL		3062182	1					
ANR	3063025	CompoundStatement		284:33:11112:11112	3062182	1					
ANR	3063026	ExpressionStatement	set_user_tracking_gid ( * tracking_gid_ptr )	7016:4:214977:215017	3062182	0	True				
ANR	3063027	CallExpression	set_user_tracking_gid ( * tracking_gid_ptr )		3062182	0					
ANR	3063028	Callee	set_user_tracking_gid		3062182	0					
ANR	3063029	Identifier	set_user_tracking_gid		3062182	0					
ANR	3063030	ArgumentList	* tracking_gid_ptr		3062182	1					
ANR	3063031	Argument	* tracking_gid_ptr		3062182	0					
ANR	3063032	UnaryOperationExpression	* tracking_gid_ptr		3062182	0					
ANR	3063033	UnaryOperator	*		3062182	0					
ANR	3063034	Identifier	tracking_gid_ptr		3062182	1					
ANR	3063035	IdentifierDeclStatement	int openfds = getdtablesize ( ) ;	7021:1:215033:215062	3062182	19	True				
ANR	3063036	IdentifierDecl	openfds = getdtablesize ( )		3062182	0					
ANR	3063037	IdentifierDeclType	int		3062182	0					
ANR	3063038	Identifier	openfds		3062182	1					
ANR	3063039	AssignmentExpression	openfds = getdtablesize ( )		3062182	2		=			
ANR	3063040	Identifier	openfds		3062182	0					
ANR	3063041	CallExpression	getdtablesize ( )		3062182	1					
ANR	3063042	Callee	getdtablesize		3062182	0					
ANR	3063043	Identifier	getdtablesize		3062182	0					
ANR	3063044	ArgumentList			3062182	1					
ANR	3063045	IfStatement	if ( m_std )		3062182	20					
ANR	3063046	Condition	m_std	7024:6:215129:215133	3062182	0	True				
ANR	3063047	Identifier	m_std		3062182	0					
ANR	3063048	CompoundStatement		293:14:11278:11278	3062182	1					
ANR	3063049	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Re-mapping std(in|out|err) in child.\\n"" )"	7026:2:215142:215207	3062182	0	True				
ANR	3063050	CallExpression	"dprintf ( D_DAEMONCORE , ""Re-mapping std(in|out|err) in child.\\n"" )"		3062182	0					
ANR	3063051	Callee	dprintf		3062182	0					
ANR	3063052	Identifier	dprintf		3062182	0					
ANR	3063053	ArgumentList	D_DAEMONCORE		3062182	1					
ANR	3063054	Argument	D_DAEMONCORE		3062182	0					
ANR	3063055	Identifier	D_DAEMONCORE		3062182	0					
ANR	3063056	Argument	"""Re-mapping std(in|out|err) in child.\\n"""		3062182	1					
ANR	3063057	PrimaryExpression	"""Re-mapping std(in|out|err) in child.\\n"""		3062182	0					
ANR	3063058	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )		3062182	1					
ANR	3063059	ForInit	int i = 0 ;	7028:7:215217:215226	3062182	0	True				
ANR	3063060	IdentifierDeclStatement	int i = 0 ;		3062182	0					
ANR	3063061	IdentifierDecl	i = 0		3062182	0					
ANR	3063062	IdentifierDeclType	int		3062182	0					
ANR	3063063	Identifier	i		3062182	1					
ANR	3063064	AssignmentExpression	i = 0		3062182	2		=			
ANR	3063065	Identifier	i		3062182	0					
ANR	3063066	PrimaryExpression	0		3062182	1					
ANR	3063067	Condition	i < 3	7028:18:215228:215232	3062182	1	True				
ANR	3063068	RelationalExpression	i < 3		3062182	0		<			
ANR	3063069	Identifier	i		3062182	0					
ANR	3063070	PrimaryExpression	3		3062182	1					
ANR	3063071	PostIncDecOperationExpression	i ++	7028:25:215235:215237	3062182	2	True				
ANR	3063072	Identifier	i		3062182	0					
ANR	3063073	IncDec	++		3062182	1					
ANR	3063074	CompoundStatement		297:30:11381:11381	3062182	3					
ANR	3063075	IfStatement	if ( m_std [ i ] > - 1 )		3062182	0					
ANR	3063076	Condition	m_std [ i ] > - 1	7029:8:215250:215262	3062182	0	True				
ANR	3063077	RelationalExpression	m_std [ i ] > - 1		3062182	0		>			
ANR	3063078	ArrayIndexing	m_std [ i ]		3062182	0					
ANR	3063079	Identifier	m_std		3062182	0					
ANR	3063080	Identifier	i		3062182	1					
ANR	3063081	UnaryOperationExpression	- 1		3062182	1					
ANR	3063082	UnaryOperator	-		3062182	0					
ANR	3063083	PrimaryExpression	1		3062182	1					
ANR	3063084	CompoundStatement		299:4:11413:11430	3062182	1					
ANR	3063085	IdentifierDeclStatement	int fd = m_std [ i ] ;	7030:4:215272:215289	3062182	0	True				
ANR	3063086	IdentifierDecl	fd = m_std [ i ]		3062182	0					
ANR	3063087	IdentifierDeclType	int		3062182	0					
ANR	3063088	Identifier	fd		3062182	1					
ANR	3063089	AssignmentExpression	fd = m_std [ i ]		3062182	2		=			
ANR	3063090	Identifier	fd		3062182	0					
ANR	3063091	ArrayIndexing	m_std [ i ]		3062182	1					
ANR	3063092	Identifier	m_std		3062182	0					
ANR	3063093	Identifier	i		3062182	1					
ANR	3063094	IfStatement	if ( fd >= PIPE_INDEX_OFFSET )		3062182	1					
ANR	3063095	Condition	fd >= PIPE_INDEX_OFFSET	7031:8:215299:215321	3062182	0	True				
ANR	3063096	RelationalExpression	fd >= PIPE_INDEX_OFFSET		3062182	0		>=			
ANR	3063097	Identifier	fd		3062182	0					
ANR	3063098	Identifier	PIPE_INDEX_OFFSET		3062182	1					
ANR	3063099	CompoundStatement		304:5:11654:11688	3062182	1					
ANR	3063100	IdentifierDeclStatement	int index = fd - PIPE_INDEX_OFFSET ;	7035:5:215513:215547	3062182	0	True				
ANR	3063101	IdentifierDecl	index = fd - PIPE_INDEX_OFFSET		3062182	0					
ANR	3063102	IdentifierDeclType	int		3062182	0					
ANR	3063103	Identifier	index		3062182	1					
ANR	3063104	AssignmentExpression	index = fd - PIPE_INDEX_OFFSET		3062182	2		=			
ANR	3063105	Identifier	index		3062182	0					
ANR	3063106	AdditiveExpression	fd - PIPE_INDEX_OFFSET		3062182	1		-			
ANR	3063107	Identifier	fd		3062182	0					
ANR	3063108	Identifier	PIPE_INDEX_OFFSET		3062182	1					
ANR	3063109	ExpressionStatement	fd = ( * daemonCore -> pipeHandleTable ) [ index ]	7036:5:215554:215596	3062182	1	True				
ANR	3063110	AssignmentExpression	fd = ( * daemonCore -> pipeHandleTable ) [ index ]		3062182	0		=			
ANR	3063111	Identifier	fd		3062182	0					
ANR	3063112	ArrayIndexing	( * daemonCore -> pipeHandleTable ) [ index ]		3062182	1					
ANR	3063113	UnaryOperationExpression	* daemonCore -> pipeHandleTable		3062182	0					
ANR	3063114	UnaryOperator	*		3062182	0					
ANR	3063115	PtrMemberAccess	daemonCore -> pipeHandleTable		3062182	1					
ANR	3063116	Identifier	daemonCore		3062182	0					
ANR	3063117	Identifier	pipeHandleTable		3062182	1					
ANR	3063118	Identifier	index		3062182	1					
ANR	3063119	IfStatement	"if ( ( dup2 ( fd , i ) ) == - 1 )"		3062182	2					
ANR	3063120	Condition	"( dup2 ( fd , i ) ) == - 1"	7038:9:215613:215636	3062182	0	True				
ANR	3063121	EqualityExpression	"( dup2 ( fd , i ) ) == - 1"		3062182	0		==			
ANR	3063122	CallExpression	"dup2 ( fd , i )"		3062182	0					
ANR	3063123	Callee	dup2		3062182	0					
ANR	3063124	Identifier	dup2		3062182	0					
ANR	3063125	ArgumentList	fd		3062182	1					
ANR	3063126	Argument	fd		3062182	0					
ANR	3063127	Identifier	fd		3062182	0					
ANR	3063128	Argument	i		3062182	1					
ANR	3063129	Identifier	i		3062182	0					
ANR	3063130	UnaryOperationExpression	- 1		3062182	1					
ANR	3063131	UnaryOperator	-		3062182	0					
ANR	3063132	PrimaryExpression	1		3062182	1					
ANR	3063133	CompoundStatement		307:36:11781:11781	3062182	1					
ANR	3063134	ExpressionStatement	"dprintf ( D_ALWAYS , ""dup2 of m_std[%d] failed: %s (%d)\\n"" , i , strerror ( errno ) , errno )"	7039:5:215647:215764	3062182	0	True				
ANR	3063135	CallExpression	"dprintf ( D_ALWAYS , ""dup2 of m_std[%d] failed: %s (%d)\\n"" , i , strerror ( errno ) , errno )"		3062182	0					
ANR	3063136	Callee	dprintf		3062182	0					
ANR	3063137	Identifier	dprintf		3062182	0					
ANR	3063138	ArgumentList	D_ALWAYS		3062182	1					
ANR	3063139	Argument	D_ALWAYS		3062182	0					
ANR	3063140	Identifier	D_ALWAYS		3062182	0					
ANR	3063141	Argument	"""dup2 of m_std[%d] failed: %s (%d)\\n"""		3062182	1					
ANR	3063142	PrimaryExpression	"""dup2 of m_std[%d] failed: %s (%d)\\n"""		3062182	0					
ANR	3063143	Argument	i		3062182	2					
ANR	3063144	Identifier	i		3062182	0					
ANR	3063145	Argument	strerror ( errno )		3062182	3					
ANR	3063146	CallExpression	strerror ( errno )		3062182	0					
ANR	3063147	Callee	strerror		3062182	0					
ANR	3063148	Identifier	strerror		3062182	0					
ANR	3063149	ArgumentList	errno		3062182	1					
ANR	3063150	Argument	errno		3062182	0					
ANR	3063151	Identifier	errno		3062182	0					
ANR	3063152	Argument	errno		3062182	4					
ANR	3063153	Identifier	errno		3062182	0					
ANR	3063154	ElseStatement	else		3062182	0					
ANR	3063155	CompoundStatement		314:10:11923:11923	3062182	0					
ANR	3063156	ExpressionStatement	close ( i )	7048:4:215865:215875	3062182	0	True				
ANR	3063157	CallExpression	close ( i )		3062182	0					
ANR	3063158	Callee	close		3062182	0					
ANR	3063159	Identifier	close		3062182	0					
ANR	3063160	ArgumentList	i		3062182	1					
ANR	3063161	Argument	i		3062182	0					
ANR	3063162	Identifier	i		3062182	0					
ANR	3063163	ElseStatement	else		3062182	0					
ANR	3063164	CompoundStatement		333:2:12425:12442	3062182	0					
ANR	3063165	IdentifierDeclStatement	"MyString msg = ""Just closed standard file fd(s): "" ;"	7053:2:215899:215949	3062182	0	True				
ANR	3063166	IdentifierDecl	"msg = ""Just closed standard file fd(s): """		3062182	0					
ANR	3063167	IdentifierDeclType	MyString		3062182	0					
ANR	3063168	Identifier	msg		3062182	1					
ANR	3063169	AssignmentExpression	"msg = ""Just closed standard file fd(s): """		3062182	2		=			
ANR	3063170	Identifier	msg		3062182	0					
ANR	3063171	PrimaryExpression	"""Just closed standard file fd(s): """		3062182	1					
ANR	3063172	IdentifierDeclStatement	int num_closed = 0 ;	7063:2:216262:216280	3062182	1	True				
ANR	3063173	IdentifierDecl	num_closed = 0		3062182	0					
ANR	3063174	IdentifierDeclType	int		3062182	0					
ANR	3063175	Identifier	num_closed		3062182	1					
ANR	3063176	AssignmentExpression	num_closed = 0		3062182	2		=			
ANR	3063177	Identifier	num_closed		3062182	0					
ANR	3063178	PrimaryExpression	0		3062182	1					
ANR	3063179	IdentifierDeclStatement	int closed_fds [ 3 ] ;	7064:2:216284:216301	3062182	2	True				
ANR	3063180	IdentifierDecl	closed_fds [ 3 ]		3062182	0					
ANR	3063181	IdentifierDeclType	int [ 3 ]		3062182	0					
ANR	3063182	Identifier	closed_fds		3062182	1					
ANR	3063183	PrimaryExpression	3		3062182	2					
ANR	3063184	ForStatement	for ( int q = 0 ; ( q < openfds ) && ( q < 3 ) ; q ++ )		3062182	3					
ANR	3063185	ForInit	int q = 0 ;	7065:8:216311:216319	3062182	0	True				
ANR	3063186	IdentifierDeclStatement	int q = 0 ;		3062182	0					
ANR	3063187	IdentifierDecl	q = 0		3062182	0					
ANR	3063188	IdentifierDeclType	int		3062182	0					
ANR	3063189	Identifier	q		3062182	1					
ANR	3063190	AssignmentExpression	q = 0		3062182	2		=			
ANR	3063191	Identifier	q		3062182	0					
ANR	3063192	PrimaryExpression	0		3062182	1					
ANR	3063193	Condition	( q < openfds ) && ( q < 3 )	7065:18:216321:216340	3062182	1	True				
ANR	3063194	AndExpression	( q < openfds ) && ( q < 3 )		3062182	0		&&			
ANR	3063195	RelationalExpression	q < openfds		3062182	0		<			
ANR	3063196	Identifier	q		3062182	0					
ANR	3063197	Identifier	openfds		3062182	1					
ANR	3063198	RelationalExpression	q < 3		3062182	1		<			
ANR	3063199	Identifier	q		3062182	0					
ANR	3063200	PrimaryExpression	3		3062182	1					
ANR	3063201	PostIncDecOperationExpression	q ++	7065:41:216344:216346	3062182	2	True				
ANR	3063202	Identifier	q		3062182	0					
ANR	3063203	IncDec	++		3062182	1					
ANR	3063204	CompoundStatement		335:3:12496:12514	3062182	3					
ANR	3063205	IdentifierDeclStatement	bool found = FALSE ;	7066:3:216355:216373	3062182	0	True				
ANR	3063206	IdentifierDecl	found = FALSE		3062182	0					
ANR	3063207	IdentifierDeclType	bool		3062182	0					
ANR	3063208	Identifier	found		3062182	1					
ANR	3063209	AssignmentExpression	found = FALSE		3062182	2		=			
ANR	3063210	Identifier	FALSE		3062182	0					
ANR	3063211	Identifier	FALSE		3062182	1					
ANR	3063212	ForStatement	for ( int k = 0 ; k < m_numInheritFds ; k ++ )		3062182	1					
ANR	3063213	ForInit	int k = 0 ;	7067:9:216384:216392	3062182	0	True				
ANR	3063214	IdentifierDeclStatement	int k = 0 ;		3062182	0					
ANR	3063215	IdentifierDecl	k = 0		3062182	0					
ANR	3063216	IdentifierDeclType	int		3062182	0					
ANR	3063217	Identifier	k		3062182	1					
ANR	3063218	AssignmentExpression	k = 0		3062182	2		=			
ANR	3063219	Identifier	k		3062182	0					
ANR	3063220	PrimaryExpression	0		3062182	1					
ANR	3063221	Condition	k < m_numInheritFds	7067:19:216394:216412	3062182	1	True				
ANR	3063222	RelationalExpression	k < m_numInheritFds		3062182	0		<			
ANR	3063223	Identifier	k		3062182	0					
ANR	3063224	Identifier	m_numInheritFds		3062182	1					
ANR	3063225	PostIncDecOperationExpression	k ++	7067:41:216416:216418	3062182	2	True				
ANR	3063226	Identifier	k		3062182	0					
ANR	3063227	IncDec	++		3062182	1					
ANR	3063228	CompoundStatement		336:47:12563:12563	3062182	3					
ANR	3063229	IfStatement	if ( m_inheritFds [ k ] == q )		3062182	0					
ANR	3063230	Condition	m_inheritFds [ k ] == q	7068:9:216433:216452	3062182	0	True				
ANR	3063231	EqualityExpression	m_inheritFds [ k ] == q		3062182	0		==			
ANR	3063232	ArrayIndexing	m_inheritFds [ k ]		3062182	0					
ANR	3063233	Identifier	m_inheritFds		3062182	0					
ANR	3063234	Identifier	k		3062182	1					
ANR	3063235	Identifier	q		3062182	1					
ANR	3063236	CompoundStatement		337:32:12597:12597	3062182	1					
ANR	3063237	ExpressionStatement	found = TRUE	7069:5:216463:216475	3062182	0	True				
ANR	3063238	AssignmentExpression	found = TRUE		3062182	0		=			
ANR	3063239	Identifier	found		3062182	0					
ANR	3063240	Identifier	TRUE		3062182	1					
ANR	3063241	BreakStatement	break ;	7070:5:216482:216487	3062182	1	True				
ANR	3063242	IfStatement	if ( ( ! found ) && ( close ( q ) != - 1 ) )		3062182	2					
ANR	3063243	Condition	( ! found ) && ( close ( q ) != - 1 )	7074:8:216571:216606	3062182	0	True				
ANR	3063244	AndExpression	( ! found ) && ( close ( q ) != - 1 )		3062182	0		&&			
ANR	3063245	UnaryOperationExpression	! found		3062182	0					
ANR	3063246	UnaryOperator	!		3062182	0					
ANR	3063247	Identifier	found		3062182	1					
ANR	3063248	EqualityExpression	close ( q ) != - 1		3062182	1		!=			
ANR	3063249	CallExpression	close ( q )		3062182	0					
ANR	3063250	Callee	close		3062182	0					
ANR	3063251	Identifier	close		3062182	0					
ANR	3063252	ArgumentList	q		3062182	1					
ANR	3063253	Argument	q		3062182	0					
ANR	3063254	Identifier	q		3062182	0					
ANR	3063255	UnaryOperationExpression	- 1		3062182	1					
ANR	3063256	UnaryOperator	-		3062182	0					
ANR	3063257	PrimaryExpression	1		3062182	1					
ANR	3063258	CompoundStatement		343:47:12751:12751	3062182	1					
ANR	3063259	ExpressionStatement	closed_fds [ num_closed ++ ] = q	7075:4:216616:216644	3062182	0	True				
ANR	3063260	AssignmentExpression	closed_fds [ num_closed ++ ] = q		3062182	0		=			
ANR	3063261	ArrayIndexing	closed_fds [ num_closed ++ ]		3062182	0					
ANR	3063262	Identifier	closed_fds		3062182	0					
ANR	3063263	PostIncDecOperationExpression	num_closed ++		3062182	1					
ANR	3063264	Identifier	num_closed		3062182	0					
ANR	3063265	IncDec	++		3062182	1					
ANR	3063266	Identifier	q		3062182	1					
ANR	3063267	ExpressionStatement	msg += q	7076:4:216650:216658	3062182	1	True				
ANR	3063268	AssignmentExpression	msg += q		3062182	0		+=			
ANR	3063269	Identifier	msg		3062182	0					
ANR	3063270	Identifier	q		3062182	1					
ANR	3063271	ExpressionStatement	msg += ' '	7077:4:216664:216674	3062182	2	True				
ANR	3063272	AssignmentExpression	msg += ' '		3062182	0		+=			
ANR	3063273	Identifier	msg		3062182	0					
ANR	3063274	PrimaryExpression	' '		3062182	1					
ANR	3063275	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""%s\\n"" , msg . Value ( ) )"	7080:2:216687:216731	3062182	4	True				
ANR	3063276	CallExpression	"dprintf ( D_DAEMONCORE , ""%s\\n"" , msg . Value ( ) )"		3062182	0					
ANR	3063277	Callee	dprintf		3062182	0					
ANR	3063278	Identifier	dprintf		3062182	0					
ANR	3063279	ArgumentList	D_DAEMONCORE		3062182	1					
ANR	3063280	Argument	D_DAEMONCORE		3062182	0					
ANR	3063281	Identifier	D_DAEMONCORE		3062182	0					
ANR	3063282	Argument	"""%s\\n"""		3062182	1					
ANR	3063283	PrimaryExpression	"""%s\\n"""		3062182	0					
ANR	3063284	Argument	msg . Value ( )		3062182	2					
ANR	3063285	CallExpression	msg . Value ( )		3062182	0					
ANR	3063286	Callee	msg . Value		3062182	0					
ANR	3063287	MemberAccess	msg . Value		3062182	0					
ANR	3063288	Identifier	msg		3062182	0					
ANR	3063289	Identifier	Value		3062182	1					
ANR	3063290	ArgumentList			3062182	1					
ANR	3063291	IfStatement	if ( num_closed )		3062182	5					
ANR	3063292	Condition	num_closed	7083:7:216798:216807	3062182	0	True				
ANR	3063293	Identifier	num_closed		3062182	0					
ANR	3063294	CompoundStatement		353:3:12957:13016	3062182	1					
ANR	3063295	IdentifierDeclStatement	"int fd_null = safe_open_wrapper_follow ( NULL_FILE , O_RDWR ) ;"	7084:3:216816:216875	3062182	0	True				
ANR	3063296	IdentifierDecl	"fd_null = safe_open_wrapper_follow ( NULL_FILE , O_RDWR )"		3062182	0					
ANR	3063297	IdentifierDeclType	int		3062182	0					
ANR	3063298	Identifier	fd_null		3062182	1					
ANR	3063299	AssignmentExpression	"fd_null = safe_open_wrapper_follow ( NULL_FILE , O_RDWR )"		3062182	2		=			
ANR	3063300	Identifier	fd_null		3062182	0					
ANR	3063301	CallExpression	"safe_open_wrapper_follow ( NULL_FILE , O_RDWR )"		3062182	1					
ANR	3063302	Callee	safe_open_wrapper_follow		3062182	0					
ANR	3063303	Identifier	safe_open_wrapper_follow		3062182	0					
ANR	3063304	ArgumentList	NULL_FILE		3062182	1					
ANR	3063305	Argument	NULL_FILE		3062182	0					
ANR	3063306	Identifier	NULL_FILE		3062182	0					
ANR	3063307	Argument	O_RDWR		3062182	1					
ANR	3063308	Identifier	O_RDWR		3062182	0					
ANR	3063309	IfStatement	if ( fd_null < 0 )		3062182	1					
ANR	3063310	Condition	fd_null < 0	7085:8:216885:216895	3062182	0	True				
ANR	3063311	RelationalExpression	fd_null < 0		3062182	0		<			
ANR	3063312	Identifier	fd_null		3062182	0					
ANR	3063313	PrimaryExpression	0		3062182	1					
ANR	3063314	CompoundStatement		354:22:13040:13040	3062182	1					
ANR	3063315	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unable to open %s: %s\\n"" , NULL_FILE , strerror ( errno ) )"	7086:4:216905:216986	3062182	0	True				
ANR	3063316	CallExpression	"dprintf ( D_ALWAYS , ""Unable to open %s: %s\\n"" , NULL_FILE , strerror ( errno ) )"		3062182	0					
ANR	3063317	Callee	dprintf		3062182	0					
ANR	3063318	Identifier	dprintf		3062182	0					
ANR	3063319	ArgumentList	D_ALWAYS		3062182	1					
ANR	3063320	Argument	D_ALWAYS		3062182	0					
ANR	3063321	Identifier	D_ALWAYS		3062182	0					
ANR	3063322	Argument	"""Unable to open %s: %s\\n"""		3062182	1					
ANR	3063323	PrimaryExpression	"""Unable to open %s: %s\\n"""		3062182	0					
ANR	3063324	Argument	NULL_FILE		3062182	2					
ANR	3063325	Identifier	NULL_FILE		3062182	0					
ANR	3063326	Argument	strerror ( errno )		3062182	3					
ANR	3063327	CallExpression	strerror ( errno )		3062182	0					
ANR	3063328	Callee	strerror		3062182	0					
ANR	3063329	Identifier	strerror		3062182	0					
ANR	3063330	ArgumentList	errno		3062182	1					
ANR	3063331	Argument	errno		3062182	0					
ANR	3063332	Identifier	errno		3062182	0					
ANR	3063333	ElseStatement	else		3062182	0					
ANR	3063334	CompoundStatement		358:4:13145:13151	3062182	0					
ANR	3063335	IdentifierDeclStatement	int i ;	7089:4:217004:217010	3062182	0	True				
ANR	3063336	IdentifierDecl	i		3062182	0					
ANR	3063337	IdentifierDeclType	int		3062182	0					
ANR	3063338	Identifier	i		3062182	1					
ANR	3063339	ForStatement	for ( i = 0 ; i < num_closed ; i ++ )		3062182	1					
ANR	3063340	ForInit	i = 0 ;	7090:10:217022:217025	3062182	0	True				
ANR	3063341	AssignmentExpression	i = 0		3062182	0		=			
ANR	3063342	Identifier	i		3062182	0					
ANR	3063343	PrimaryExpression	0		3062182	1					
ANR	3063344	Condition	i < num_closed	7090:16:217028:217039	3062182	1	True				
ANR	3063345	RelationalExpression	i < num_closed		3062182	0		<			
ANR	3063346	Identifier	i		3062182	0					
ANR	3063347	Identifier	num_closed		3062182	1					
ANR	3063348	PostIncDecOperationExpression	i ++	7090:31:217043:217045	3062182	2	True				
ANR	3063349	Identifier	i		3062182	0					
ANR	3063350	IncDec	++		3062182	1					
ANR	3063351	CompoundStatement		359:37:13190:13190	3062182	3					
ANR	3063352	IfStatement	"if ( ( closed_fds [ i ] != fd_null ) && ( dup2 ( fd_null , closed_fds [ i ] ) < 0 ) )"		3062182	0					
ANR	3063353	Condition	"( closed_fds [ i ] != fd_null ) && ( dup2 ( fd_null , closed_fds [ i ] ) < 0 )"	7091:10:217061:217137	3062182	0	True				
ANR	3063354	AndExpression	"( closed_fds [ i ] != fd_null ) && ( dup2 ( fd_null , closed_fds [ i ] ) < 0 )"		3062182	0		&&			
ANR	3063355	EqualityExpression	closed_fds [ i ] != fd_null		3062182	0		!=			
ANR	3063356	ArrayIndexing	closed_fds [ i ]		3062182	0					
ANR	3063357	Identifier	closed_fds		3062182	0					
ANR	3063358	Identifier	i		3062182	1					
ANR	3063359	Identifier	fd_null		3062182	1					
ANR	3063360	RelationalExpression	"dup2 ( fd_null , closed_fds [ i ] ) < 0"		3062182	1		<			
ANR	3063361	CallExpression	"dup2 ( fd_null , closed_fds [ i ] )"		3062182	0					
ANR	3063362	Callee	dup2		3062182	0					
ANR	3063363	Identifier	dup2		3062182	0					
ANR	3063364	ArgumentList	fd_null		3062182	1					
ANR	3063365	Argument	fd_null		3062182	0					
ANR	3063366	Identifier	fd_null		3062182	0					
ANR	3063367	Argument	closed_fds [ i ]		3062182	1					
ANR	3063368	ArrayIndexing	closed_fds [ i ]		3062182	0					
ANR	3063369	Identifier	closed_fds		3062182	0					
ANR	3063370	Identifier	i		3062182	1					
ANR	3063371	PrimaryExpression	0		3062182	1					
ANR	3063372	CompoundStatement		361:48:13282:13282	3062182	1					
ANR	3063373	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error dup2()ing %s -> %d: %s\\n"" , NULL_FILE , closed_fds [ i ] , strerror ( errno ) )"	7093:6:217149:217272	3062182	0	True				
ANR	3063374	CallExpression	"dprintf ( D_ALWAYS , ""Error dup2()ing %s -> %d: %s\\n"" , NULL_FILE , closed_fds [ i ] , strerror ( errno ) )"		3062182	0					
ANR	3063375	Callee	dprintf		3062182	0					
ANR	3063376	Identifier	dprintf		3062182	0					
ANR	3063377	ArgumentList	D_ALWAYS		3062182	1					
ANR	3063378	Argument	D_ALWAYS		3062182	0					
ANR	3063379	Identifier	D_ALWAYS		3062182	0					
ANR	3063380	Argument	"""Error dup2()ing %s -> %d: %s\\n"""		3062182	1					
ANR	3063381	PrimaryExpression	"""Error dup2()ing %s -> %d: %s\\n"""		3062182	0					
ANR	3063382	Argument	NULL_FILE		3062182	2					
ANR	3063383	Identifier	NULL_FILE		3062182	0					
ANR	3063384	Argument	closed_fds [ i ]		3062182	3					
ANR	3063385	ArrayIndexing	closed_fds [ i ]		3062182	0					
ANR	3063386	Identifier	closed_fds		3062182	0					
ANR	3063387	Identifier	i		3062182	1					
ANR	3063388	Argument	strerror ( errno )		3062182	4					
ANR	3063389	CallExpression	strerror ( errno )		3062182	0					
ANR	3063390	Callee	strerror		3062182	0					
ANR	3063391	Identifier	strerror		3062182	0					
ANR	3063392	ArgumentList	errno		3062182	1					
ANR	3063393	Argument	errno		3062182	0					
ANR	3063394	Identifier	errno		3062182	0					
ANR	3063395	IfStatement	if ( fd_null > 2 )		3062182	2					
ANR	3063396	Condition	fd_null > 2	7100:9:217363:217373	3062182	0	True				
ANR	3063397	RelationalExpression	fd_null > 2		3062182	0		>			
ANR	3063398	Identifier	fd_null		3062182	0					
ANR	3063399	PrimaryExpression	2		3062182	1					
ANR	3063400	CompoundStatement		369:23:13518:13518	3062182	1					
ANR	3063401	ExpressionStatement	close ( fd_null )	7101:5:217384:217400	3062182	0	True				
ANR	3063402	CallExpression	close ( fd_null )		3062182	0					
ANR	3063403	Callee	close		3062182	0					
ANR	3063404	Identifier	close		3062182	0					
ANR	3063405	ArgumentList	fd_null		3062182	1					
ANR	3063406	Argument	fd_null		3062182	0					
ANR	3063407	Identifier	fd_null		3062182	0					
ANR	3063408	IfStatement	if ( m_nice_inc > 0 )		3062182	21					
ANR	3063409	Condition	m_nice_inc > 0	7109:5:217451:217464	3062182	0	True				
ANR	3063410	RelationalExpression	m_nice_inc > 0		3062182	0		>			
ANR	3063411	Identifier	m_nice_inc		3062182	0					
ANR	3063412	PrimaryExpression	0		3062182	1					
ANR	3063413	CompoundStatement		384:2:13738:13770	3062182	1					
ANR	3063414	IfStatement	if ( m_nice_inc > 19 )		3062182	0					
ANR	3063415	Condition	m_nice_inc > 19	7110:6:217476:217490	3062182	0	True				
ANR	3063416	RelationalExpression	m_nice_inc > 19		3062182	0		>			
ANR	3063417	Identifier	m_nice_inc		3062182	0					
ANR	3063418	PrimaryExpression	19		3062182	1					
ANR	3063419	CompoundStatement		379:24:13635:13635	3062182	1					
ANR	3063420	ExpressionStatement	m_nice_inc = 19	7111:3:217499:217514	3062182	0	True				
ANR	3063421	AssignmentExpression	m_nice_inc = 19		3062182	0		=			
ANR	3063422	Identifier	m_nice_inc		3062182	0					
ANR	3063423	PrimaryExpression	19		3062182	1					
ANR	3063424	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""calling nice(%d)\\n"" , m_nice_inc )"	7113:2:217522:217580	3062182	1	True				
ANR	3063425	CallExpression	"dprintf ( D_DAEMONCORE , ""calling nice(%d)\\n"" , m_nice_inc )"		3062182	0					
ANR	3063426	Callee	dprintf		3062182	0					
ANR	3063427	Identifier	dprintf		3062182	0					
ANR	3063428	ArgumentList	D_DAEMONCORE		3062182	1					
ANR	3063429	Argument	D_DAEMONCORE		3062182	0					
ANR	3063430	Identifier	D_DAEMONCORE		3062182	0					
ANR	3063431	Argument	"""calling nice(%d)\\n"""		3062182	1					
ANR	3063432	PrimaryExpression	"""calling nice(%d)\\n"""		3062182	0					
ANR	3063433	Argument	m_nice_inc		3062182	2					
ANR	3063434	Identifier	m_nice_inc		3062182	0					
ANR	3063435	ExpressionStatement	errno = 0	7114:2:217584:217593	3062182	2	True				
ANR	3063436	AssignmentExpression	errno = 0		3062182	0		=			
ANR	3063437	Identifier	errno		3062182	0					
ANR	3063438	PrimaryExpression	0		3062182	1					
ANR	3063439	IdentifierDeclStatement	int newnice = nice ( m_nice_inc ) ;	7115:2:217597:217629	3062182	3	True				
ANR	3063440	IdentifierDecl	newnice = nice ( m_nice_inc )		3062182	0					
ANR	3063441	IdentifierDeclType	int		3062182	0					
ANR	3063442	Identifier	newnice		3062182	1					
ANR	3063443	AssignmentExpression	newnice = nice ( m_nice_inc )		3062182	2		=			
ANR	3063444	Identifier	newnice		3062182	0					
ANR	3063445	CallExpression	nice ( m_nice_inc )		3062182	1					
ANR	3063446	Callee	nice		3062182	0					
ANR	3063447	Identifier	nice		3062182	0					
ANR	3063448	ArgumentList	m_nice_inc		3062182	1					
ANR	3063449	Argument	m_nice_inc		3062182	0					
ANR	3063450	Identifier	m_nice_inc		3062182	0					
ANR	3063451	IfStatement	if ( errno != 0 )		3062182	4					
ANR	3063452	Condition	errno != 0	7121:5:217909:217918	3062182	0	True				
ANR	3063453	EqualityExpression	errno != 0		3062182	0		!=			
ANR	3063454	Identifier	errno		3062182	0					
ANR	3063455	PrimaryExpression	0		3062182	1					
ANR	3063456	CompoundStatement		390:17:14062:14062	3062182	1					
ANR	3063457	ExpressionStatement	"dprintf ( D_ALWAYS , ""Warning: When attempting to exec a new process, failed to nice(%d): return code: %d, errno: %d %s\\n"" , m_nice_inc , newnice , errno , strerror ( errno ) )"	7122:3:217926:218091	3062182	0	True				
ANR	3063458	CallExpression	"dprintf ( D_ALWAYS , ""Warning: When attempting to exec a new process, failed to nice(%d): return code: %d, errno: %d %s\\n"" , m_nice_inc , newnice , errno , strerror ( errno ) )"		3062182	0					
ANR	3063459	Callee	dprintf		3062182	0					
ANR	3063460	Identifier	dprintf		3062182	0					
ANR	3063461	ArgumentList	D_ALWAYS		3062182	1					
ANR	3063462	Argument	D_ALWAYS		3062182	0					
ANR	3063463	Identifier	D_ALWAYS		3062182	0					
ANR	3063464	Argument	"""Warning: When attempting to exec a new process, failed to nice(%d): return code: %d, errno: %d %s\\n"""		3062182	1					
ANR	3063465	PrimaryExpression	"""Warning: When attempting to exec a new process, failed to nice(%d): return code: %d, errno: %d %s\\n"""		3062182	0					
ANR	3063466	Argument	m_nice_inc		3062182	2					
ANR	3063467	Identifier	m_nice_inc		3062182	0					
ANR	3063468	Argument	newnice		3062182	3					
ANR	3063469	Identifier	newnice		3062182	0					
ANR	3063470	Argument	errno		3062182	4					
ANR	3063471	Identifier	errno		3062182	0					
ANR	3063472	Argument	strerror ( errno )		3062182	5					
ANR	3063473	CallExpression	strerror ( errno )		3062182	0					
ANR	3063474	Callee	strerror		3062182	0					
ANR	3063475	Identifier	strerror		3062182	0					
ANR	3063476	ArgumentList	errno		3062182	1					
ANR	3063477	Argument	errno		3062182	0					
ANR	3063478	Identifier	errno		3062182	0					
ANR	3063479	IfStatement	if ( m_affinity_mask )		3062182	22					
ANR	3063480	Condition	m_affinity_mask	7128:5:218167:218181	3062182	0	True				
ANR	3063481	Identifier	m_affinity_mask		3062182	0					
ANR	3063482	CompoundStatement		407:2:14637:14677	3062182	1					
ANR	3063483	IdentifierDeclStatement	cpu_set_t mask ;	7129:2:218188:218202	3062182	0	True				
ANR	3063484	IdentifierDecl	mask		3062182	0					
ANR	3063485	IdentifierDeclType	cpu_set_t		3062182	0					
ANR	3063486	Identifier	mask		3062182	1					
ANR	3063487	ExpressionStatement	CPU_ZERO ( & mask )	7130:2:218206:218221	3062182	1	True				
ANR	3063488	CallExpression	CPU_ZERO ( & mask )		3062182	0					
ANR	3063489	Callee	CPU_ZERO		3062182	0					
ANR	3063490	Identifier	CPU_ZERO		3062182	0					
ANR	3063491	ArgumentList	& mask		3062182	1					
ANR	3063492	Argument	& mask		3062182	0					
ANR	3063493	UnaryOperationExpression	& mask		3062182	0					
ANR	3063494	UnaryOperator	&		3062182	0					
ANR	3063495	Identifier	mask		3062182	1					
ANR	3063496	ForStatement	for ( int i = 1 ; i < m_affinity_mask [ 0 ] ; i ++ )		3062182	2					
ANR	3063497	ForInit	int i = 1 ;	7131:7:218230:218239	3062182	0	True				
ANR	3063498	IdentifierDeclStatement	int i = 1 ;		3062182	0					
ANR	3063499	IdentifierDecl	i = 1		3062182	0					
ANR	3063500	IdentifierDeclType	int		3062182	0					
ANR	3063501	Identifier	i		3062182	1					
ANR	3063502	AssignmentExpression	i = 1		3062182	2		=			
ANR	3063503	Identifier	i		3062182	0					
ANR	3063504	PrimaryExpression	1		3062182	1					
ANR	3063505	Condition	i < m_affinity_mask [ 0 ]	7131:18:218241:218262	3062182	1	True				
ANR	3063506	RelationalExpression	i < m_affinity_mask [ 0 ]		3062182	0		<			
ANR	3063507	Identifier	i		3062182	0					
ANR	3063508	ArrayIndexing	m_affinity_mask [ 0 ]		3062182	1					
ANR	3063509	Identifier	m_affinity_mask		3062182	0					
ANR	3063510	PrimaryExpression	0		3062182	1					
ANR	3063511	PostIncDecOperationExpression	i ++	7131:42:218265:218267	3062182	2	True				
ANR	3063512	Identifier	i		3062182	0					
ANR	3063513	IncDec	++		3062182	1					
ANR	3063514	CompoundStatement		400:47:14411:14411	3062182	3					
ANR	3063515	ExpressionStatement	"CPU_SET ( m_affinity_mask [ i ] , & mask )"	7132:3:218275:218309	3062182	0	True				
ANR	3063516	CallExpression	"CPU_SET ( m_affinity_mask [ i ] , & mask )"		3062182	0					
ANR	3063517	Callee	CPU_SET		3062182	0					
ANR	3063518	Identifier	CPU_SET		3062182	0					
ANR	3063519	ArgumentList	m_affinity_mask [ i ]		3062182	1					
ANR	3063520	Argument	m_affinity_mask [ i ]		3062182	0					
ANR	3063521	ArrayIndexing	m_affinity_mask [ i ]		3062182	0					
ANR	3063522	Identifier	m_affinity_mask		3062182	0					
ANR	3063523	Identifier	i		3062182	1					
ANR	3063524	Argument	& mask		3062182	1					
ANR	3063525	UnaryOperationExpression	& mask		3062182	0					
ANR	3063526	UnaryOperator	&		3062182	0					
ANR	3063527	Identifier	mask		3062182	1					
ANR	3063528	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Calling sched_setaffinity\\n"" )"	7134:2:218317:218368	3062182	3	True				
ANR	3063529	CallExpression	"dprintf ( D_FULLDEBUG , ""Calling sched_setaffinity\\n"" )"		3062182	0					
ANR	3063530	Callee	dprintf		3062182	0					
ANR	3063531	Identifier	dprintf		3062182	0					
ANR	3063532	ArgumentList	D_FULLDEBUG		3062182	1					
ANR	3063533	Argument	D_FULLDEBUG		3062182	0					
ANR	3063534	Identifier	D_FULLDEBUG		3062182	0					
ANR	3063535	Argument	"""Calling sched_setaffinity\\n"""		3062182	1					
ANR	3063536	PrimaryExpression	"""Calling sched_setaffinity\\n"""		3062182	0					
ANR	3063537	IdentifierDeclStatement	"int result = sched_setaffinity ( 0 , & mask ) ;"	7138:2:218496:218536	3062182	4	True				
ANR	3063538	IdentifierDecl	"result = sched_setaffinity ( 0 , & mask )"		3062182	0					
ANR	3063539	IdentifierDeclType	int		3062182	0					
ANR	3063540	Identifier	result		3062182	1					
ANR	3063541	AssignmentExpression	"result = sched_setaffinity ( 0 , & mask )"		3062182	2		=			
ANR	3063542	Identifier	result		3062182	0					
ANR	3063543	CallExpression	"sched_setaffinity ( 0 , & mask )"		3062182	1					
ANR	3063544	Callee	sched_setaffinity		3062182	0					
ANR	3063545	Identifier	sched_setaffinity		3062182	0					
ANR	3063546	ArgumentList	0		3062182	1					
ANR	3063547	Argument	0		3062182	0					
ANR	3063548	PrimaryExpression	0		3062182	0					
ANR	3063549	Argument	& mask		3062182	1					
ANR	3063550	UnaryOperationExpression	& mask		3062182	0					
ANR	3063551	UnaryOperator	&		3062182	0					
ANR	3063552	Identifier	mask		3062182	1					
ANR	3063553	IfStatement	if ( result != 0 )		3062182	5					
ANR	3063554	Condition	result != 0	7142:6:218615:218625	3062182	0	True				
ANR	3063555	EqualityExpression	result != 0		3062182	0		!=			
ANR	3063556	Identifier	result		3062182	0					
ANR	3063557	PrimaryExpression	0		3062182	1					
ANR	3063558	CompoundStatement		411:19:14769:14769	3062182	1					
ANR	3063559	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error calling sched_setaffinity: %d\\n"" , errno )"	7143:3:218633:218698	3062182	0	True				
ANR	3063560	CallExpression	"dprintf ( D_ALWAYS , ""Error calling sched_setaffinity: %d\\n"" , errno )"		3062182	0					
ANR	3063561	Callee	dprintf		3062182	0					
ANR	3063562	Identifier	dprintf		3062182	0					
ANR	3063563	ArgumentList	D_ALWAYS		3062182	1					
ANR	3063564	Argument	D_ALWAYS		3062182	0					
ANR	3063565	Identifier	D_ALWAYS		3062182	0					
ANR	3063566	Argument	"""Error calling sched_setaffinity: %d\\n"""		3062182	1					
ANR	3063567	PrimaryExpression	"""Error calling sched_setaffinity: %d\\n"""		3062182	0					
ANR	3063568	Argument	errno		3062182	2					
ANR	3063569	Identifier	errno		3062182	0					
ANR	3063570	IfStatement	if ( DebugFlags & D_DAEMONCORE )		3062182	23					
ANR	3063571	Condition	DebugFlags & D_DAEMONCORE	7148:5:218720:218744	3062182	0	True				
ANR	3063572	BitAndExpression	DebugFlags & D_DAEMONCORE		3062182	0		&			
ANR	3063573	Identifier	DebugFlags		3062182	0					
ANR	3063574	Identifier	D_DAEMONCORE		3062182	1					
ANR	3063575	CompoundStatement		420:2:15003:15045	3062182	1					
ANR	3063576	IdentifierDeclStatement	"MyString msg = ""Printing fds to inherit: "" ;"	7151:2:218862:218904	3062182	0	True				
ANR	3063577	IdentifierDecl	"msg = ""Printing fds to inherit: """		3062182	0					
ANR	3063578	IdentifierDeclType	MyString		3062182	0					
ANR	3063579	Identifier	msg		3062182	1					
ANR	3063580	AssignmentExpression	"msg = ""Printing fds to inherit: """		3062182	2		=			
ANR	3063581	Identifier	msg		3062182	0					
ANR	3063582	PrimaryExpression	"""Printing fds to inherit: """		3062182	1					
ANR	3063583	ForStatement	for ( int a = 0 ; a < m_numInheritFds ; a ++ )		3062182	1					
ANR	3063584	ForInit	int a = 0 ;	7152:8:218914:218922	3062182	0	True				
ANR	3063585	IdentifierDeclStatement	int a = 0 ;		3062182	0					
ANR	3063586	IdentifierDecl	a = 0		3062182	0					
ANR	3063587	IdentifierDeclType	int		3062182	0					
ANR	3063588	Identifier	a		3062182	1					
ANR	3063589	AssignmentExpression	a = 0		3062182	2		=			
ANR	3063590	Identifier	a		3062182	0					
ANR	3063591	PrimaryExpression	0		3062182	1					
ANR	3063592	Condition	a < m_numInheritFds	7152:18:218924:218940	3062182	1	True				
ANR	3063593	RelationalExpression	a < m_numInheritFds		3062182	0		<			
ANR	3063594	Identifier	a		3062182	0					
ANR	3063595	Identifier	m_numInheritFds		3062182	1					
ANR	3063596	PostIncDecOperationExpression	a ++	7152:38:218944:218946	3062182	2	True				
ANR	3063597	Identifier	a		3062182	0					
ANR	3063598	IncDec	++		3062182	1					
ANR	3063599	CompoundStatement		421:44:15091:15091	3062182	3					
ANR	3063600	ExpressionStatement	msg += m_inheritFds [ a ]	7153:3:218955:218977	3062182	0	True				
ANR	3063601	AssignmentExpression	msg += m_inheritFds [ a ]		3062182	0		+=			
ANR	3063602	Identifier	msg		3062182	0					
ANR	3063603	ArrayIndexing	m_inheritFds [ a ]		3062182	1					
ANR	3063604	Identifier	m_inheritFds		3062182	0					
ANR	3063605	Identifier	a		3062182	1					
ANR	3063606	ExpressionStatement	msg += ' '	7154:3:218982:218992	3062182	1	True				
ANR	3063607	AssignmentExpression	msg += ' '		3062182	0		+=			
ANR	3063608	Identifier	msg		3062182	0					
ANR	3063609	PrimaryExpression	' '		3062182	1					
ANR	3063610	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""%s\\n"" , msg . Value ( ) )"	7156:2:219000:219044	3062182	2	True				
ANR	3063611	CallExpression	"dprintf ( D_DAEMONCORE , ""%s\\n"" , msg . Value ( ) )"		3062182	0					
ANR	3063612	Callee	dprintf		3062182	0					
ANR	3063613	Identifier	dprintf		3062182	0					
ANR	3063614	ArgumentList	D_DAEMONCORE		3062182	1					
ANR	3063615	Argument	D_DAEMONCORE		3062182	0					
ANR	3063616	Identifier	D_DAEMONCORE		3062182	0					
ANR	3063617	Argument	"""%s\\n"""		3062182	1					
ANR	3063618	PrimaryExpression	"""%s\\n"""		3062182	0					
ANR	3063619	Argument	msg . Value ( )		3062182	2					
ANR	3063620	CallExpression	msg . Value ( )		3062182	0					
ANR	3063621	Callee	msg . Value		3062182	0					
ANR	3063622	MemberAccess	msg . Value		3062182	0					
ANR	3063623	Identifier	msg		3062182	0					
ANR	3063624	Identifier	Value		3062182	1					
ANR	3063625	ArgumentList			3062182	1					
ANR	3063626	IfStatement	if ( m_core_hard_limit != NULL )		3062182	24					
ANR	3063627	Condition	m_core_hard_limit != NULL	7164:5:219370:219394	3062182	0	True				
ANR	3063628	EqualityExpression	m_core_hard_limit != NULL		3062182	0		!=			
ANR	3063629	Identifier	m_core_hard_limit		3062182	0					
ANR	3063630	Identifier	NULL		3062182	1					
ANR	3063631	CompoundStatement		433:32:15538:15538	3062182	1					
ANR	3063632	ExpressionStatement	"limit ( RLIMIT_CORE , * m_core_hard_limit , CONDOR_HARD_LIMIT , ""max core size"" )"	7165:2:219401:219475	3062182	0	True				
ANR	3063633	CallExpression	"limit ( RLIMIT_CORE , * m_core_hard_limit , CONDOR_HARD_LIMIT , ""max core size"" )"		3062182	0					
ANR	3063634	Callee	limit		3062182	0					
ANR	3063635	Identifier	limit		3062182	0					
ANR	3063636	ArgumentList	RLIMIT_CORE		3062182	1					
ANR	3063637	Argument	RLIMIT_CORE		3062182	0					
ANR	3063638	Identifier	RLIMIT_CORE		3062182	0					
ANR	3063639	Argument	* m_core_hard_limit		3062182	1					
ANR	3063640	UnaryOperationExpression	* m_core_hard_limit		3062182	0					
ANR	3063641	UnaryOperator	*		3062182	0					
ANR	3063642	Identifier	m_core_hard_limit		3062182	1					
ANR	3063643	Argument	CONDOR_HARD_LIMIT		3062182	2					
ANR	3063644	Identifier	CONDOR_HARD_LIMIT		3062182	0					
ANR	3063645	Argument	"""max core size"""		3062182	3					
ANR	3063646	PrimaryExpression	"""max core size"""		3062182	0					
ANR	3063647	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""About to exec \\""%s\\""\\n"" , m_executable_fullpath )"	7168:1:219482:219555	3062182	25	True				
ANR	3063648	CallExpression	"dprintf ( D_DAEMONCORE , ""About to exec \\""%s\\""\\n"" , m_executable_fullpath )"		3062182	0					
ANR	3063649	Callee	dprintf		3062182	0					
ANR	3063650	Identifier	dprintf		3062182	0					
ANR	3063651	ArgumentList	D_DAEMONCORE		3062182	1					
ANR	3063652	Argument	D_DAEMONCORE		3062182	0					
ANR	3063653	Identifier	D_DAEMONCORE		3062182	0					
ANR	3063654	Argument	"""About to exec \\""%s\\""\\n"""		3062182	1					
ANR	3063655	PrimaryExpression	"""About to exec \\""%s\\""\\n"""		3062182	0					
ANR	3063656	Argument	m_executable_fullpath		3062182	2					
ANR	3063657	Identifier	m_executable_fullpath		3062182	0					
ANR	3063658	ExpressionStatement	Generic_stop_logging ( )	7194:1:220487:220509	3062182	26	True				
ANR	3063659	CallExpression	Generic_stop_logging ( )		3062182	0					
ANR	3063660	Callee	Generic_stop_logging		3062182	0					
ANR	3063661	Identifier	Generic_stop_logging		3062182	0					
ANR	3063662	ArgumentList			3062182	1					
ANR	3063663	ExpressionStatement	dprintf_wrapup_fork_child ( )	7197:1:220520:220547	3062182	27	True				
ANR	3063664	CallExpression	dprintf_wrapup_fork_child ( )		3062182	0					
ANR	3063665	Callee	dprintf_wrapup_fork_child		3062182	0					
ANR	3063666	Identifier	dprintf_wrapup_fork_child		3062182	0					
ANR	3063667	ArgumentList			3062182	1					
ANR	3063668	IdentifierDeclStatement	bool found ;	7199:1:220551:220561	3062182	28	True				
ANR	3063669	IdentifierDecl	found		3062182	0					
ANR	3063670	IdentifierDeclType	bool		3062182	0					
ANR	3063671	Identifier	found		3062182	1					
ANR	3063672	ForStatement	for ( int j = 3 ; j < openfds ; j ++ )		3062182	29					
ANR	3063673	ForInit	int j = 3 ;	7200:7:220570:220578	3062182	0	True				
ANR	3063674	IdentifierDeclStatement	int j = 3 ;		3062182	0					
ANR	3063675	IdentifierDecl	j = 3		3062182	0					
ANR	3063676	IdentifierDeclType	int		3062182	0					
ANR	3063677	Identifier	j		3062182	1					
ANR	3063678	AssignmentExpression	j = 3		3062182	2		=			
ANR	3063679	Identifier	j		3062182	0					
ANR	3063680	PrimaryExpression	3		3062182	1					
ANR	3063681	Condition	j < openfds	7200:17:220580:220590	3062182	1	True				
ANR	3063682	RelationalExpression	j < openfds		3062182	0		<			
ANR	3063683	Identifier	j		3062182	0					
ANR	3063684	Identifier	openfds		3062182	1					
ANR	3063685	PostIncDecOperationExpression	j ++	7200:31:220594:220596	3062182	2	True				
ANR	3063686	Identifier	j		3062182	0					
ANR	3063687	IncDec	++		3062182	1					
ANR	3063688	CompoundStatement		469:37:16741:16741	3062182	3					
ANR	3063689	IfStatement	if ( j == m_errorpipe [ 1 ] )		3062182	0					
ANR	3063690	Condition	j == m_errorpipe [ 1 ]	7201:7:220609:220627	3062182	0	True				
ANR	3063691	EqualityExpression	j == m_errorpipe [ 1 ]		3062182	0		==			
ANR	3063692	Identifier	j		3062182	0					
ANR	3063693	ArrayIndexing	m_errorpipe [ 1 ]		3062182	1					
ANR	3063694	Identifier	m_errorpipe		3062182	0					
ANR	3063695	PrimaryExpression	1		3062182	1					
ANR	3063696	ContinueStatement	continue ;	7201:29:220631:220639	3062182	1	True				
ANR	3063697	ExpressionStatement	found = FALSE	7203:2:220674:220687	3062182	1	True				
ANR	3063698	AssignmentExpression	found = FALSE		3062182	0		=			
ANR	3063699	Identifier	found		3062182	0					
ANR	3063700	Identifier	FALSE		3062182	1					
ANR	3063701	ForStatement	for ( int k = 0 ; k < m_numInheritFds ; k ++ )		3062182	2					
ANR	3063702	ForInit	int k = 0 ;	7204:8:220697:220705	3062182	0	True				
ANR	3063703	IdentifierDeclStatement	int k = 0 ;		3062182	0					
ANR	3063704	IdentifierDecl	k = 0		3062182	0					
ANR	3063705	IdentifierDeclType	int		3062182	0					
ANR	3063706	Identifier	k		3062182	1					
ANR	3063707	AssignmentExpression	k = 0		3062182	2		=			
ANR	3063708	Identifier	k		3062182	0					
ANR	3063709	PrimaryExpression	0		3062182	1					
ANR	3063710	Condition	k < m_numInheritFds	7204:18:220707:220725	3062182	1	True				
ANR	3063711	RelationalExpression	k < m_numInheritFds		3062182	0		<			
ANR	3063712	Identifier	k		3062182	0					
ANR	3063713	Identifier	m_numInheritFds		3062182	1					
ANR	3063714	PostIncDecOperationExpression	k ++	7204:40:220729:220731	3062182	2	True				
ANR	3063715	Identifier	k		3062182	0					
ANR	3063716	IncDec	++		3062182	1					
ANR	3063717	CompoundStatement		473:46:16876:16876	3062182	3					
ANR	3063718	IfStatement	if ( m_inheritFds [ k ] == j )		3062182	0					
ANR	3063719	Condition	m_inheritFds [ k ] == j	7205:8:220745:220764	3062182	0	True				
ANR	3063720	EqualityExpression	m_inheritFds [ k ] == j		3062182	0		==			
ANR	3063721	ArrayIndexing	m_inheritFds [ k ]		3062182	0					
ANR	3063722	Identifier	m_inheritFds		3062182	0					
ANR	3063723	Identifier	k		3062182	1					
ANR	3063724	Identifier	j		3062182	1					
ANR	3063725	CompoundStatement		474:31:16909:16909	3062182	1					
ANR	3063726	ExpressionStatement	found = TRUE	7206:4:220774:220786	3062182	0	True				
ANR	3063727	AssignmentExpression	found = TRUE		3062182	0		=			
ANR	3063728	Identifier	found		3062182	0					
ANR	3063729	Identifier	TRUE		3062182	1					
ANR	3063730	BreakStatement	break ;	7207:4:220792:220797	3062182	1	True				
ANR	3063731	IfStatement	if ( ! found )		3062182	3					
ANR	3063732	Condition	! found	7211:6:220815:220820	3062182	0	True				
ANR	3063733	UnaryOperationExpression	! found		3062182	0					
ANR	3063734	UnaryOperator	!		3062182	0					
ANR	3063735	Identifier	found		3062182	1					
ANR	3063736	CompoundStatement		480:15:16965:16965	3062182	1					
ANR	3063737	ExpressionStatement	close ( j )	7212:3:220829:220839	3062182	0	True				
ANR	3063738	CallExpression	close ( j )		3062182	0					
ANR	3063739	Callee	close		3062182	0					
ANR	3063740	Identifier	close		3062182	0					
ANR	3063741	ArgumentList	j		3062182	1					
ANR	3063742	Argument	j		3062182	0					
ANR	3063743	Identifier	j		3062182	0					
ANR	3063744	IfStatement	if ( m_priv != PRIV_UNKNOWN )		3062182	30					
ANR	3063745	Condition	m_priv != PRIV_UNKNOWN	7217:6:220899:220920	3062182	0	True				
ANR	3063746	EqualityExpression	m_priv != PRIV_UNKNOWN		3062182	0		!=			
ANR	3063747	Identifier	m_priv		3062182	0					
ANR	3063748	Identifier	PRIV_UNKNOWN		3062182	1					
ANR	3063749	CompoundStatement		486:31:17065:17065	3062182	1					
ANR	3063750	ExpressionStatement	set_priv_no_memory_changes ( m_priv )	7223:2:221242:221278	3062182	0	True				
ANR	3063751	CallExpression	set_priv_no_memory_changes ( m_priv )		3062182	0					
ANR	3063752	Callee	set_priv_no_memory_changes		3062182	0					
ANR	3063753	Identifier	set_priv_no_memory_changes		3062182	0					
ANR	3063754	ArgumentList	m_priv		3062182	1					
ANR	3063755	Argument	m_priv		3062182	0					
ANR	3063756	Identifier	m_priv		3062182	0					
ANR	3063757	ExpressionStatement	unset_user_tracking_gid ( )	7228:2:221438:221463	3062182	1	True				
ANR	3063758	CallExpression	unset_user_tracking_gid ( )		3062182	0					
ANR	3063759	Callee	unset_user_tracking_gid		3062182	0					
ANR	3063760	Identifier	unset_user_tracking_gid		3062182	0					
ANR	3063761	ArgumentList			3062182	1					
ANR	3063762	IfStatement	if ( m_priv != PRIV_ROOT )		3062182	31					
ANR	3063763	Condition	m_priv != PRIV_ROOT	7237:6:221758:221776	3062182	0	True				
ANR	3063764	EqualityExpression	m_priv != PRIV_ROOT		3062182	0		!=			
ANR	3063765	Identifier	m_priv		3062182	0					
ANR	3063766	Identifier	PRIV_ROOT		3062182	1					
ANR	3063767	CompoundStatement		506:28:17921:17921	3062182	1					
ANR	3063768	IfStatement	if ( getuid ( ) == 0 )		3062182	0					
ANR	3063769	Condition	getuid ( ) == 0	7239:6:221843:221855	3062182	0	True				
ANR	3063770	EqualityExpression	getuid ( ) == 0		3062182	0		==			
ANR	3063771	CallExpression	getuid ( )		3062182	0					
ANR	3063772	Callee	getuid		3062182	0					
ANR	3063773	Identifier	getuid		3062182	0					
ANR	3063774	ArgumentList			3062182	1					
ANR	3063775	PrimaryExpression	0		3062182	1					
ANR	3063776	CompoundStatement		509:3:18005:18052	3062182	1					
ANR	3063777	IdentifierDeclStatement	int priv_errno = DaemonCore :: ERRNO_EXEC_AS_ROOT ;	7240:3:221864:221911	3062182	0	True				
ANR	3063778	IdentifierDecl	priv_errno = DaemonCore :: ERRNO_EXEC_AS_ROOT		3062182	0					
ANR	3063779	IdentifierDeclType	int		3062182	0					
ANR	3063780	Identifier	priv_errno		3062182	1					
ANR	3063781	AssignmentExpression	priv_errno = DaemonCore :: ERRNO_EXEC_AS_ROOT		3062182	2		=			
ANR	3063782	Identifier	DaemonCore :: ERRNO_EXEC_AS_ROOT		3062182	0					
ANR	3063783	Identifier	DaemonCore :: ERRNO_EXEC_AS_ROOT		3062182	1					
ANR	3063784	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & priv_errno , sizeof ( priv_errno ) )"	7241:3:221916:221970	3062182	1	True				
ANR	3063785	CallExpression	"write ( m_errorpipe [ 1 ] , & priv_errno , sizeof ( priv_errno ) )"		3062182	0					
ANR	3063786	Callee	write		3062182	0					
ANR	3063787	Identifier	write		3062182	0					
ANR	3063788	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3063789	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3063790	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3063791	Identifier	m_errorpipe		3062182	0					
ANR	3063792	PrimaryExpression	1		3062182	1					
ANR	3063793	Argument	& priv_errno		3062182	1					
ANR	3063794	UnaryOperationExpression	& priv_errno		3062182	0					
ANR	3063795	UnaryOperator	&		3062182	0					
ANR	3063796	Identifier	priv_errno		3062182	1					
ANR	3063797	Argument	sizeof ( priv_errno )		3062182	2					
ANR	3063798	SizeofExpression	sizeof ( priv_errno )		3062182	0					
ANR	3063799	Sizeof	sizeof		3062182	0					
ANR	3063800	SizeofOperand	priv_errno		3062182	1					
ANR	3063801	ExpressionStatement	_exit ( 4 )	7242:3:221975:221983	3062182	2	True				
ANR	3063802	CallExpression	_exit ( 4 )		3062182	0					
ANR	3063803	Callee	_exit		3062182	0					
ANR	3063804	Identifier	_exit		3062182	0					
ANR	3063805	ArgumentList	4		3062182	1					
ANR	3063806	Argument	4		3062182	0					
ANR	3063807	PrimaryExpression	4		3062182	0					
ANR	3063808	IfStatement	if ( m_cwd && m_cwd [ 0 ] )		3062182	32					
ANR	3063809	Condition	m_cwd && m_cwd [ 0 ]	7247:6:222057:222073	3062182	0	True				
ANR	3063810	AndExpression	m_cwd && m_cwd [ 0 ]		3062182	0		&&			
ANR	3063811	Identifier	m_cwd		3062182	0					
ANR	3063812	ArrayIndexing	m_cwd [ 0 ]		3062182	1					
ANR	3063813	Identifier	m_cwd		3062182	0					
ANR	3063814	PrimaryExpression	0		3062182	1					
ANR	3063815	CompoundStatement		516:26:18218:18218	3062182	1					
ANR	3063816	IfStatement	if ( chdir ( m_cwd ) == - 1 )		3062182	0					
ANR	3063817	Condition	chdir ( m_cwd ) == - 1	7248:6:222085:222102	3062182	0	True				
ANR	3063818	EqualityExpression	chdir ( m_cwd ) == - 1		3062182	0		==			
ANR	3063819	CallExpression	chdir ( m_cwd )		3062182	0					
ANR	3063820	Callee	chdir		3062182	0					
ANR	3063821	Identifier	chdir		3062182	0					
ANR	3063822	ArgumentList	m_cwd		3062182	1					
ANR	3063823	Argument	m_cwd		3062182	0					
ANR	3063824	Identifier	m_cwd		3062182	0					
ANR	3063825	UnaryOperationExpression	- 1		3062182	1					
ANR	3063826	UnaryOperator	-		3062182	0					
ANR	3063827	PrimaryExpression	1		3062182	1					
ANR	3063828	CompoundStatement		517:27:18247:18247	3062182	1					
ANR	3063829	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7251:3:222208:222252	3062182	0	True				
ANR	3063830	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		3062182	0					
ANR	3063831	Callee	write		3062182	0					
ANR	3063832	Identifier	write		3062182	0					
ANR	3063833	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3063834	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3063835	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3063836	Identifier	m_errorpipe		3062182	0					
ANR	3063837	PrimaryExpression	1		3062182	1					
ANR	3063838	Argument	& errno		3062182	1					
ANR	3063839	UnaryOperationExpression	& errno		3062182	0					
ANR	3063840	UnaryOperator	&		3062182	0					
ANR	3063841	Identifier	errno		3062182	1					
ANR	3063842	Argument	sizeof ( errno )		3062182	2					
ANR	3063843	SizeofExpression	sizeof ( errno )		3062182	0					
ANR	3063844	Sizeof	sizeof		3062182	0					
ANR	3063845	SizeofOperand	errno		3062182	1					
ANR	3063846	ExpressionStatement	_exit ( errno )	7252:3:222257:222269	3062182	1	True				
ANR	3063847	CallExpression	_exit ( errno )		3062182	0					
ANR	3063848	Callee	_exit		3062182	0					
ANR	3063849	Identifier	_exit		3062182	0					
ANR	3063850	ArgumentList	errno		3062182	1					
ANR	3063851	Argument	errno		3062182	0					
ANR	3063852	Identifier	errno		3062182	0					
ANR	3063853	IfStatement	if ( ! m_want_command_port )		3062182	33					
ANR	3063854	Condition	! m_want_command_port	7258:6:222415:222434	3062182	0	True				
ANR	3063855	UnaryOperationExpression	! m_want_command_port		3062182	0					
ANR	3063856	UnaryOperator	!		3062182	0					
ANR	3063857	Identifier	m_want_command_port		3062182	1					
ANR	3063858	CompoundStatement		529:2:18623:18642	3062182	1					
ANR	3063859	IdentifierDeclStatement	const sigset_t * new_mask = m_sigmask ;	7259:2:222442:222478	3062182	0	True				
ANR	3063860	IdentifierDecl	* new_mask = m_sigmask		3062182	0					
ANR	3063861	IdentifierDeclType	const sigset_t *		3062182	0					
ANR	3063862	Identifier	new_mask		3062182	1					
ANR	3063863	AssignmentExpression	* new_mask = m_sigmask		3062182	2		=			
ANR	3063864	Identifier	m_sigmask		3062182	0					
ANR	3063865	Identifier	m_sigmask		3062182	1					
ANR	3063866	IdentifierDeclStatement	sigset_t empty_mask ;	7260:2:222482:222501	3062182	1	True				
ANR	3063867	IdentifierDecl	empty_mask		3062182	0					
ANR	3063868	IdentifierDeclType	sigset_t		3062182	0					
ANR	3063869	Identifier	empty_mask		3062182	1					
ANR	3063870	IfStatement	if ( new_mask == NULL )		3062182	2					
ANR	3063871	Condition	new_mask == NULL	7261:6:222509:222524	3062182	0	True				
ANR	3063872	EqualityExpression	new_mask == NULL		3062182	0		==			
ANR	3063873	Identifier	new_mask		3062182	0					
ANR	3063874	Identifier	NULL		3062182	1					
ANR	3063875	CompoundStatement		530:24:18668:18668	3062182	1					
ANR	3063876	ExpressionStatement	sigemptyset ( & empty_mask )	7262:3:222532:222556	3062182	0	True				
ANR	3063877	CallExpression	sigemptyset ( & empty_mask )		3062182	0					
ANR	3063878	Callee	sigemptyset		3062182	0					
ANR	3063879	Identifier	sigemptyset		3062182	0					
ANR	3063880	ArgumentList	& empty_mask		3062182	1					
ANR	3063881	Argument	& empty_mask		3062182	0					
ANR	3063882	UnaryOperationExpression	& empty_mask		3062182	0					
ANR	3063883	UnaryOperator	&		3062182	0					
ANR	3063884	Identifier	empty_mask		3062182	1					
ANR	3063885	ExpressionStatement	new_mask = & empty_mask	7263:3:222561:222583	3062182	1	True				
ANR	3063886	AssignmentExpression	new_mask = & empty_mask		3062182	0		=			
ANR	3063887	Identifier	new_mask		3062182	0					
ANR	3063888	UnaryOperationExpression	& empty_mask		3062182	1					
ANR	3063889	UnaryOperator	&		3062182	0					
ANR	3063890	Identifier	empty_mask		3062182	1					
ANR	3063891	IfStatement	"if ( sigprocmask ( SIG_SETMASK , new_mask , NULL ) == - 1 )"		3062182	3					
ANR	3063892	Condition	"sigprocmask ( SIG_SETMASK , new_mask , NULL ) == - 1"	7265:6:222595:222640	3062182	0	True				
ANR	3063893	EqualityExpression	"sigprocmask ( SIG_SETMASK , new_mask , NULL ) == - 1"		3062182	0		==			
ANR	3063894	CallExpression	"sigprocmask ( SIG_SETMASK , new_mask , NULL )"		3062182	0					
ANR	3063895	Callee	sigprocmask		3062182	0					
ANR	3063896	Identifier	sigprocmask		3062182	0					
ANR	3063897	ArgumentList	SIG_SETMASK		3062182	1					
ANR	3063898	Argument	SIG_SETMASK		3062182	0					
ANR	3063899	Identifier	SIG_SETMASK		3062182	0					
ANR	3063900	Argument	new_mask		3062182	1					
ANR	3063901	Identifier	new_mask		3062182	0					
ANR	3063902	Argument	NULL		3062182	2					
ANR	3063903	Identifier	NULL		3062182	0					
ANR	3063904	UnaryOperationExpression	- 1		3062182	1					
ANR	3063905	UnaryOperator	-		3062182	0					
ANR	3063906	PrimaryExpression	1		3062182	1					
ANR	3063907	CompoundStatement		534:54:18784:18784	3062182	1					
ANR	3063908	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7266:3:222648:222692	3062182	0	True				
ANR	3063909	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		3062182	0					
ANR	3063910	Callee	write		3062182	0					
ANR	3063911	Identifier	write		3062182	0					
ANR	3063912	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3063913	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3063914	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3063915	Identifier	m_errorpipe		3062182	0					
ANR	3063916	PrimaryExpression	1		3062182	1					
ANR	3063917	Argument	& errno		3062182	1					
ANR	3063918	UnaryOperationExpression	& errno		3062182	0					
ANR	3063919	UnaryOperator	&		3062182	0					
ANR	3063920	Identifier	errno		3062182	1					
ANR	3063921	Argument	sizeof ( errno )		3062182	2					
ANR	3063922	SizeofExpression	sizeof ( errno )		3062182	0					
ANR	3063923	Sizeof	sizeof		3062182	0					
ANR	3063924	SizeofOperand	errno		3062182	1					
ANR	3063925	ExpressionStatement	_exit ( errno )	7267:3:222697:222709	3062182	1	True				
ANR	3063926	CallExpression	_exit ( errno )		3062182	0					
ANR	3063927	Callee	_exit		3062182	0					
ANR	3063928	Identifier	_exit		3062182	0					
ANR	3063929	ArgumentList	errno		3062182	1					
ANR	3063930	Argument	errno		3062182	0					
ANR	3063931	Identifier	errno		3062182	0					
ANR	3063932	IfStatement	if ( HAS_DCJOBOPT_SUSPEND_ON_EXEC ( m_job_opt_mask ) )		3062182	34					
ANR	3063933	Condition	HAS_DCJOBOPT_SUSPEND_ON_EXEC ( m_job_opt_mask )	7272:5:222759:222802	3062182	0	True				
ANR	3063934	CallExpression	HAS_DCJOBOPT_SUSPEND_ON_EXEC ( m_job_opt_mask )		3062182	0					
ANR	3063935	Callee	HAS_DCJOBOPT_SUSPEND_ON_EXEC		3062182	0					
ANR	3063936	Identifier	HAS_DCJOBOPT_SUSPEND_ON_EXEC		3062182	0					
ANR	3063937	ArgumentList	m_job_opt_mask		3062182	1					
ANR	3063938	Argument	m_job_opt_mask		3062182	0					
ANR	3063939	Identifier	m_job_opt_mask		3062182	0					
ANR	3063940	CompoundStatement		541:52:18947:18947	3062182	1					
ANR	3063941	IfStatement	"if ( ptrace ( PTRACE_TRACEME , 0 , 0 , 0 ) == - 1 )"		3062182	0					
ANR	3063942	Condition	"ptrace ( PTRACE_TRACEME , 0 , 0 , 0 ) == - 1"	7273:5:222813:222849	3062182	0	True				
ANR	3063943	EqualityExpression	"ptrace ( PTRACE_TRACEME , 0 , 0 , 0 ) == - 1"		3062182	0		==			
ANR	3063944	CallExpression	"ptrace ( PTRACE_TRACEME , 0 , 0 , 0 )"		3062182	0					
ANR	3063945	Callee	ptrace		3062182	0					
ANR	3063946	Identifier	ptrace		3062182	0					
ANR	3063947	ArgumentList	PTRACE_TRACEME		3062182	1					
ANR	3063948	Argument	PTRACE_TRACEME		3062182	0					
ANR	3063949	Identifier	PTRACE_TRACEME		3062182	0					
ANR	3063950	Argument	0		3062182	1					
ANR	3063951	PrimaryExpression	0		3062182	0					
ANR	3063952	Argument	0		3062182	2					
ANR	3063953	PrimaryExpression	0		3062182	0					
ANR	3063954	Argument	0		3062182	3					
ANR	3063955	PrimaryExpression	0		3062182	0					
ANR	3063956	UnaryOperationExpression	- 1		3062182	1					
ANR	3063957	UnaryOperator	-		3062182	0					
ANR	3063958	PrimaryExpression	1		3062182	1					
ANR	3063959	CompoundStatement		542:44:18993:18993	3062182	1					
ANR	3063960	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7274:3:222857:222901	3062182	0	True				
ANR	3063961	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		3062182	0					
ANR	3063962	Callee	write		3062182	0					
ANR	3063963	Identifier	write		3062182	0					
ANR	3063964	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3063965	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3063966	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3063967	Identifier	m_errorpipe		3062182	0					
ANR	3063968	PrimaryExpression	1		3062182	1					
ANR	3063969	Argument	& errno		3062182	1					
ANR	3063970	UnaryOperationExpression	& errno		3062182	0					
ANR	3063971	UnaryOperator	&		3062182	0					
ANR	3063972	Identifier	errno		3062182	1					
ANR	3063973	Argument	sizeof ( errno )		3062182	2					
ANR	3063974	SizeofExpression	sizeof ( errno )		3062182	0					
ANR	3063975	Sizeof	sizeof		3062182	0					
ANR	3063976	SizeofOperand	errno		3062182	1					
ANR	3063977	ExpressionStatement	_exit ( errno )	7275:3:222906:222919	3062182	1	True				
ANR	3063978	CallExpression	_exit ( errno )		3062182	0					
ANR	3063979	Callee	_exit		3062182	0					
ANR	3063980	Identifier	_exit		3062182	0					
ANR	3063981	ArgumentList	errno		3062182	1					
ANR	3063982	Argument	errno		3062182	0					
ANR	3063983	Identifier	errno		3062182	0					
ANR	3063984	ExpressionStatement	pidenvid_optimize_final_env ( m_unix_env )	7281:1:222938:222977	3062182	35	True				
ANR	3063985	CallExpression	pidenvid_optimize_final_env ( m_unix_env )		3062182	0					
ANR	3063986	Callee	pidenvid_optimize_final_env		3062182	0					
ANR	3063987	Identifier	pidenvid_optimize_final_env		3062182	0					
ANR	3063988	ArgumentList	m_unix_env		3062182	1					
ANR	3063989	Argument	m_unix_env		3062182	0					
ANR	3063990	Identifier	m_unix_env		3062182	0					
ANR	3063991	IdentifierDeclStatement	int exec_results ;	7284:1:223008:223024	3062182	36	True				
ANR	3063992	IdentifierDecl	exec_results		3062182	0					
ANR	3063993	IdentifierDeclType	int		3062182	0					
ANR	3063994	Identifier	exec_results		3062182	1					
ANR	3063995	ExpressionStatement	"exec_results = execve ( m_executable_fullpath , m_unix_args , m_unix_env )"	7285:1:223027:223097	3062182	37	True				
ANR	3063996	AssignmentExpression	"exec_results = execve ( m_executable_fullpath , m_unix_args , m_unix_env )"		3062182	0		=			
ANR	3063997	Identifier	exec_results		3062182	0					
ANR	3063998	CallExpression	"execve ( m_executable_fullpath , m_unix_args , m_unix_env )"		3062182	1					
ANR	3063999	Callee	execve		3062182	0					
ANR	3064000	Identifier	execve		3062182	0					
ANR	3064001	ArgumentList	m_executable_fullpath		3062182	1					
ANR	3064002	Argument	m_executable_fullpath		3062182	0					
ANR	3064003	Identifier	m_executable_fullpath		3062182	0					
ANR	3064004	Argument	m_unix_args		3062182	1					
ANR	3064005	Identifier	m_unix_args		3062182	0					
ANR	3064006	Argument	m_unix_env		3062182	2					
ANR	3064007	Identifier	m_unix_env		3062182	0					
ANR	3064008	IfStatement	if ( exec_results == - 1 )		3062182	38					
ANR	3064009	Condition	exec_results == - 1	7287:5:223105:223122	3062182	0	True				
ANR	3064010	EqualityExpression	exec_results == - 1		3062182	0		==			
ANR	3064011	Identifier	exec_results		3062182	0					
ANR	3064012	UnaryOperationExpression	- 1		3062182	1					
ANR	3064013	UnaryOperator	-		3062182	0					
ANR	3064014	PrimaryExpression	1		3062182	1					
ANR	3064015	CompoundStatement		556:26:19267:19267	3062182	1					
ANR	3064016	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7292:2:223305:223349	3062182	0	True				
ANR	3064017	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		3062182	0					
ANR	3064018	Callee	write		3062182	0					
ANR	3064019	Identifier	write		3062182	0					
ANR	3064020	ArgumentList	m_errorpipe [ 1 ]		3062182	1					
ANR	3064021	Argument	m_errorpipe [ 1 ]		3062182	0					
ANR	3064022	ArrayIndexing	m_errorpipe [ 1 ]		3062182	0					
ANR	3064023	Identifier	m_errorpipe		3062182	0					
ANR	3064024	PrimaryExpression	1		3062182	1					
ANR	3064025	Argument	& errno		3062182	1					
ANR	3064026	UnaryOperationExpression	& errno		3062182	0					
ANR	3064027	UnaryOperator	&		3062182	0					
ANR	3064028	Identifier	errno		3062182	1					
ANR	3064029	Argument	sizeof ( errno )		3062182	2					
ANR	3064030	SizeofExpression	sizeof ( errno )		3062182	0					
ANR	3064031	Sizeof	sizeof		3062182	0					
ANR	3064032	SizeofOperand	errno		3062182	1					
ANR	3064033	ExpressionStatement	_exit ( errno )	7293:2:223353:223365	3062182	1	True				
ANR	3064034	CallExpression	_exit ( errno )		3062182	0					
ANR	3064035	Callee	_exit		3062182	0					
ANR	3064036	Identifier	_exit		3062182	0					
ANR	3064037	ArgumentList	errno		3062182	1					
ANR	3064038	Argument	errno		3062182	0					
ANR	3064039	Identifier	errno		3062182	0					
ANR	3064040	ReturnType	void		3062182	1					
ANR	3064041	Identifier	CreateProcessForkit :: exec		3062182	2					
ANR	3064042	ParameterList			3062182	3					
ANR	3064043	CFGEntryNode	ENTRY		3062182		True				
ANR	3064044	CFGExitNode	EXIT		3062182		True				
ANR	3064045	Symbol	ENV_INHERIT		3062182						
ANR	3064046	Symbol	m_args		3062182						
ANR	3064047	Symbol	* index		3062182						
ANR	3064048	Symbol	HAS_DCJOBOPT_SUSPEND_ON_EXEC		3062182						
ANR	3064049	Symbol	& empty_mask		3062182						
ANR	3064050	Symbol	* * * daemonCore		3062182						
ANR	3064051	Symbol	envid		3062182						
ANR	3064052	Symbol	m_nice_inc		3062182						
ANR	3064053	Symbol	m_family_info -> group_ptr		3062182						
ANR	3064054	Symbol	DaemonCore :: ERRNO_PID_COLLISION		3062182						
ANR	3064055	Symbol	pidinfo		3062182						
ANR	3064056	Symbol	PIPE_INDEX_OFFSET		3062182						
ANR	3064057	Symbol	errno		3062182						
ANR	3064058	Symbol	penvid . ancestors		3062182						
ANR	3064059	Symbol	execve		3062182						
ANR	3064060	Symbol	child_errno		3062182						
ANR	3064061	Symbol	* m_affinity_mask		3062182						
ANR	3064062	Symbol	* m_env		3062182						
ANR	3064063	Symbol	index		3062182						
ANR	3064064	Symbol	FD_CLOEXEC		3062182						
ANR	3064065	Symbol	m_priv		3062182						
ANR	3064066	Symbol	ppid		3062182						
ANR	3064067	Symbol	setsid		3062182						
ANR	3064068	Symbol	RLIMIT_CORE		3062182						
ANR	3064069	Symbol	m_time_of_fork		3062182						
ANR	3064070	Symbol	arg_string		3062182						
ANR	3064071	Symbol	m_affinity_mask		3062182						
ANR	3064072	Symbol	m_errorpipe		3062182						
ANR	3064073	Symbol	* daemonCore		3062182						
ANR	3064074	Symbol	m_env		3062182						
ANR	3064075	Symbol	NULL_FILE		3062182						
ANR	3064076	Symbol	PRIV_ROOT		3062182						
ANR	3064077	Symbol	PIDENVID_MAX		3062182						
ANR	3064078	Symbol	* daemonCore -> m_proc_family		3062182						
ANR	3064079	Symbol	dup2		3062182						
ANR	3064080	Symbol	m_unix_env		3062182						
ANR	3064081	Symbol	m_envobject . getStringArray		3062182						
ANR	3064082	Symbol	new_mask		3062182						
ANR	3064083	Symbol	* * daemonCore -> pipeHandleTable		3062182						
ANR	3064084	Symbol	* tracking_gid_ptr		3062182						
ANR	3064085	Symbol	m_sigmask		3062182						
ANR	3064086	Symbol	m_privateinheritbuf . Value		3062182						
ANR	3064087	Symbol	empty_mask		3062182						
ANR	3064088	Symbol	sched_setaffinity		3062182						
ANR	3064089	Symbol	penvid . ancestors [ i ] . active		3062182						
ANR	3064090	Symbol	m_args . Count		3062182						
ANR	3064091	Symbol	daemonCore -> pidTable -> lookup		3062182						
ANR	3064092	Symbol	result		3062182						
ANR	3064093	Symbol	m_inheritFds		3062182						
ANR	3064094	Symbol	O_RDWR		3062182						
ANR	3064095	Symbol	found		3062182						
ANR	3064096	Symbol	* m_std		3062182						
ANR	3064097	Symbol	m_executable_fullpath		3062182						
ANR	3064098	Symbol	daemonCore		3062182						
ANR	3064099	Symbol	m_mii		3062182						
ANR	3064100	Symbol	m_inheritbuf . Value		3062182						
ANR	3064101	Symbol	penvid_ptr		3062182						
ANR	3064102	Symbol	m_args . GetStringArray		3062182						
ANR	3064103	Symbol	m_family_info -> glexec_proxy		3062182						
ANR	3064104	Symbol	close		3062182						
ANR	3064105	Symbol	openfds		3062182						
ANR	3064106	Symbol	* m_inheritFds		3062182						
ANR	3064107	Symbol	malloc		3062182						
ANR	3064108	Symbol	a		3062182						
ANR	3064109	Symbol	PIDENVID_BAD_FORMAT		3062182						
ANR	3064110	Symbol	m_family_info -> max_snapshot_interval		3062182						
ANR	3064111	Symbol	ptrace		3062182						
ANR	3064112	Symbol	display		3062182						
ANR	3064113	Symbol	getdtablesize		3062182						
ANR	3064114	Symbol	& mask		3062182						
ANR	3064115	Symbol	SIG_SETMASK		3062182						
ANR	3064116	Symbol	clone_safe_getpid		3062182						
ANR	3064117	Symbol	i		3062182						
ANR	3064118	Symbol	j		3062182						
ANR	3064119	Symbol	* m_errorpipe		3062182						
ANR	3064120	Symbol	k		3062182						
ANR	3064121	Symbol	PIDENVID_OK		3062182						
ANR	3064122	Symbol	sigprocmask		3062182						
ANR	3064123	Symbol	nice		3062182						
ANR	3064124	Symbol	ENV_PRIVATE		3062182						
ANR	3064125	Symbol	CONDOR_HARD_LIMIT		3062182						
ANR	3064126	Symbol	q		3062182						
ANR	3064127	Symbol	m_inheritbuf		3062182						
ANR	3064128	Symbol	& arg_string		3062182						
ANR	3064129	Symbol	daemonCore -> pipeHandleTable		3062182						
ANR	3064130	Symbol	DaemonCore :: ERRNO_EXEC_AS_ROOT		3062182						
ANR	3064131	Symbol	& priv_errno		3062182						
ANR	3064132	Symbol	m_std		3062182						
ANR	3064133	Symbol	num_closed		3062182						
ANR	3064134	Symbol	closed_fds		3062182						
ANR	3064135	Symbol	msg		3062182						
ANR	3064136	Symbol	daemonCore -> m_proc_family -> register_from_child		3062182						
ANR	3064137	Symbol	F_SETFD		3062182						
ANR	3064138	Symbol	& penvid		3062182						
ANR	3064139	Symbol	m_numInheritFds		3062182						
ANR	3064140	Symbol	pidenvid_format_to_envid		3062182						
ANR	3064141	Symbol	* m_family_info		3062182						
ANR	3064142	Symbol	pid		3062182						
ANR	3064143	Symbol	daemonCore -> pidTable		3062182						
ANR	3064144	Symbol	PRIV_UNKNOWN		3062182						
ANR	3064145	Symbol	* m_core_hard_limit		3062182						
ANR	3064146	Symbol	strlen		3062182						
ANR	3064147	Symbol	* penvid		3062182						
ANR	3064148	Symbol	m_envobject		3062182						
ANR	3064149	Symbol	m_want_command_port		3062182						
ANR	3064150	Symbol	priv_errno		3062182						
ANR	3064151	Symbol	HAS_DCJOBOPT_ENV_INHERIT		3062182						
ANR	3064152	Symbol	NULL		3062182						
ANR	3064153	Symbol	HAS_DCJOBOPT_NO_ENV_INHERIT		3062182						
ANR	3064154	Symbol	* m_cwd		3062182						
ANR	3064155	Symbol	fd_null		3062182						
ANR	3064156	Symbol	m_unix_args		3062182						
ANR	3064157	Symbol	m_family_info -> login		3062182						
ANR	3064158	Symbol	* daemonCore -> pipeHandleTable		3062182						
ANR	3064159	Symbol	TRUE		3062182						
ANR	3064160	Symbol	DebugFlags		3062182						
ANR	3064161	Symbol	param_boolean		3062182						
ANR	3064162	Symbol	D_FULLDEBUG		3062182						
ANR	3064163	Symbol	chdir		3062182						
ANR	3064164	Symbol	purebuf		3062182						
ANR	3064165	Symbol	tmpargs . GetStringArray		3062182						
ANR	3064166	Symbol	msg . Value		3062182						
ANR	3064167	Symbol	strerror		3062182						
ANR	3064168	Symbol	getuid		3062182						
ANR	3064169	Symbol	m_cwd		3062182						
ANR	3064170	Symbol	true		3062182						
ANR	3064171	Symbol	PTRACE_TRACEME		3062182						
ANR	3064172	Symbol	penvid		3062182						
ANR	3064173	Symbol	m_family_info -> cgroup		3062182						
ANR	3064174	Symbol	* * daemonCore		3062182						
ANR	3064175	Symbol	m_privateinheritbuf . IsEmpty		3062182						
ANR	3064176	Symbol	fd		3062182						
ANR	3064177	Symbol	* penvid . ancestors		3062182						
ANR	3064178	Symbol	safe_open_wrapper_follow		3062182						
ANR	3064179	Symbol	& child_errno		3062182						
ANR	3064180	Symbol	GetEnviron		3062182						
ANR	3064181	Symbol	arg_string . Value		3062182						
ANR	3064182	Symbol	m_job_opt_mask		3062182						
ANR	3064183	Symbol	pidenvid_append		3062182						
ANR	3064184	Symbol	m_core_hard_limit		3062182						
ANR	3064185	Symbol	penvid . ancestors [ i ] . envid		3062182						
ANR	3064186	Symbol	pidenvid_filter_and_insert		3062182						
ANR	3064187	Symbol	EnvGetName		3062182						
ANR	3064188	Symbol	* closed_fds		3062182						
ANR	3064189	Symbol	param		3062182						
ANR	3064190	Symbol	daemonCore -> Register_Family		3062182						
ANR	3064191	Symbol	* daemonCore -> pidTable		3062182						
ANR	3064192	Symbol	tracking_gid_ptr		3062182						
ANR	3064193	Symbol	ok		3062182						
ANR	3064194	Symbol	tmpargs		3062182						
ANR	3064195	Symbol	mask		3062182						
ANR	3064196	Symbol	m_privateinheritbuf		3062182						
ANR	3064197	Symbol	& errno		3062182						
ANR	3064198	Symbol	D_DAEMONCORE		3062182						
ANR	3064199	Symbol	D_ALWAYS		3062182						
ANR	3064200	Symbol	DaemonCore :: ERRNO_REGISTRATION_FAILED		3062182						
ANR	3064201	Symbol	* a		3062182						
ANR	3064202	Symbol	PIDENVID_OVERSIZED		3062182						
ANR	3064203	Symbol	PIDENVID_ENVID_SIZE		3062182						
ANR	3064204	Symbol	* i		3062182						
ANR	3064205	Symbol	m_forker_pid		3062182						
ANR	3064206	Symbol	clone_safe_getppid		3062182						
ANR	3064207	Symbol	* k		3062182						
ANR	3064208	Symbol	m_family_info		3062182						
ANR	3064209	Symbol	m_executable		3062182						
ANR	3064210	Symbol	daemonCore -> m_proc_family		3062182						
ANR	3064211	Symbol	FALSE		3062182						
ANR	3064212	Symbol	newnice		3062182						
ANR	3064213	Symbol	exec_results		3062182						
ANR	3064214	Function	DaemonCore :: Create_Process	7298:0:223380:266730							
ANR	3064215	FunctionDef	"DaemonCore :: Create_Process (const char * executable , ArgList const & args , priv_state priv , int reaper_id , int want_command_port , Env const * env , const char * cwd , FamilyInfo * family_info , Stream * sock_inherit_list [ ] , int std [ ] , int fd_inherit_list [ ] , int nice_inc , sigset_t * sigmask , int job_opt_mask , size_t * core_hard_limit , int * affinity_mask , char const * daemon_sock , MyString * err_return_msg)"		3064214	0					
ANR	3064216	CompoundStatement		7318:0:223954:266730	3064214	0					
ANR	3064217	IdentifierDeclStatement	"int i , j ;"	7319:1:223957:223965	3064214	0	True				
ANR	3064218	IdentifierDecl	i		3064214	0					
ANR	3064219	IdentifierDeclType	int		3064214	0					
ANR	3064220	Identifier	i		3064214	1					
ANR	3064221	IdentifierDecl	j		3064214	1					
ANR	3064222	IdentifierDeclType	int		3064214	0					
ANR	3064223	Identifier	j		3064214	1					
ANR	3064224	IdentifierDeclStatement	char * ptmp ;	7320:1:223968:223978	3064214	1	True				
ANR	3064225	IdentifierDecl	* ptmp		3064214	0					
ANR	3064226	IdentifierDeclType	char *		3064214	0					
ANR	3064227	Identifier	ptmp		3064214	1					
ANR	3064228	IdentifierDeclStatement	int inheritFds [ MAX_INHERIT_FDS ] ;	7321:1:223981:224012	3064214	2	True				
ANR	3064229	IdentifierDecl	inheritFds [ MAX_INHERIT_FDS ]		3064214	0					
ANR	3064230	IdentifierDeclType	int [ MAX_INHERIT_FDS ]		3064214	0					
ANR	3064231	Identifier	inheritFds		3064214	1					
ANR	3064232	Identifier	MAX_INHERIT_FDS		3064214	2					
ANR	3064233	IdentifierDeclStatement	int numInheritFds = 0 ;	7322:1:224015:224036	3064214	3	True				
ANR	3064234	IdentifierDecl	numInheritFds = 0		3064214	0					
ANR	3064235	IdentifierDeclType	int		3064214	0					
ANR	3064236	Identifier	numInheritFds		3064214	1					
ANR	3064237	AssignmentExpression	numInheritFds = 0		3064214	2		=			
ANR	3064238	Identifier	numInheritFds		3064214	0					
ANR	3064239	PrimaryExpression	0		3064214	1					
ANR	3064240	IdentifierDeclStatement	MyString executable_buf ;	7323:1:224039:224062	3064214	4	True				
ANR	3064241	IdentifierDecl	executable_buf		3064214	0					
ANR	3064242	IdentifierDeclType	MyString		3064214	0					
ANR	3064243	Identifier	executable_buf		3064214	1					
ANR	3064244	IdentifierDeclStatement	priv_state current_priv = PRIV_UNKNOWN ;	7324:1:224065:224103	3064214	5	True				
ANR	3064245	IdentifierDecl	current_priv = PRIV_UNKNOWN		3064214	0					
ANR	3064246	IdentifierDeclType	priv_state		3064214	0					
ANR	3064247	Identifier	current_priv		3064214	1					
ANR	3064248	AssignmentExpression	current_priv = PRIV_UNKNOWN		3064214	2		=			
ANR	3064249	Identifier	PRIV_UNKNOWN		3064214	0					
ANR	3064250	Identifier	PRIV_UNKNOWN		3064214	1					
ANR	3064251	Statement	int	7327:1:224139:224141	3064214	6	True				
ANR	3064252	Statement	dc_pipe_fds	7327:5:224143:224153	3064214	7	True				
ANR	3064253	Statement	[	7327:16:224154:224154	3064214	8	True				
ANR	3064254	Statement	3	7327:17:224155:224155	3064214	9	True				
ANR	3064255	Statement	]	7327:18:224156:224156	3064214	10	True				
ANR	3064256	Statement	[	7327:19:224157:224157	3064214	11	True				
ANR	3064257	Statement	2	7327:20:224158:224158	3064214	12	True				
ANR	3064258	Statement	]	7327:21:224159:224159	3064214	13	True				
ANR	3064259	Statement	=	7327:23:224161:224161	3064214	14	True				
ANR	3064260	CompoundStatement		10:25:208:208	3064214	15					
ANR	3064261	CompoundStatement		10:26:209:209	3064214	0					
ANR	3064262	Statement	-	7327:27:224165:224165	3064214	0	True				
ANR	3064263	Statement	1	7327:28:224166:224166	3064214	1	True				
ANR	3064264	Statement	","	7327:29:224167:224167	3064214	2	True				
ANR	3064265	Statement	-	7327:31:224169:224169	3064214	3	True				
ANR	3064266	Statement	1	7327:32:224170:224170	3064214	4	True				
ANR	3064267	Statement	","	7327:34:224172:224172	3064214	1	True				
ANR	3064268	CompoundStatement		10:36:219:219	3064214	2					
ANR	3064269	Statement	-	7327:37:224175:224175	3064214	0	True				
ANR	3064270	Statement	1	7327:38:224176:224176	3064214	1	True				
ANR	3064271	Statement	","	7327:39:224177:224177	3064214	2	True				
ANR	3064272	Statement	-	7327:41:224179:224179	3064214	3	True				
ANR	3064273	Statement	1	7327:42:224180:224180	3064214	4	True				
ANR	3064274	Statement	","	7327:44:224182:224182	3064214	3	True				
ANR	3064275	CompoundStatement		10:46:229:229	3064214	4					
ANR	3064276	Statement	-	7327:47:224185:224185	3064214	0	True				
ANR	3064277	Statement	1	7327:48:224186:224186	3064214	1	True				
ANR	3064278	Statement	","	7327:49:224187:224187	3064214	2	True				
ANR	3064279	Statement	-	7327:51:224189:224189	3064214	3	True				
ANR	3064280	Statement	1	7327:52:224190:224190	3064214	4	True				
ANR	3064281	ExpressionStatement		7327:55:224193:224193	3064214	16	True				
ANR	3064282	IdentifierDeclStatement	int return_errno = 0 ;	7332:1:224367:224387	3064214	17	True				
ANR	3064283	IdentifierDecl	return_errno = 0		3064214	0					
ANR	3064284	IdentifierDeclType	int		3064214	0					
ANR	3064285	Identifier	return_errno		3064214	1					
ANR	3064286	AssignmentExpression	return_errno = 0		3064214	2		=			
ANR	3064287	Identifier	return_errno		3064214	0					
ANR	3064288	PrimaryExpression	0		3064214	1					
ANR	3064289	IdentifierDeclStatement	pid_t newpid = FALSE ;	7333:1:224390:224410	3064214	18	True				
ANR	3064290	IdentifierDecl	newpid = FALSE		3064214	0					
ANR	3064291	IdentifierDeclType	pid_t		3064214	0					
ANR	3064292	Identifier	newpid		3064214	1					
ANR	3064293	AssignmentExpression	newpid = FALSE		3064214	2		=			
ANR	3064294	Identifier	FALSE		3064214	0					
ANR	3064295	Identifier	FALSE		3064214	1					
ANR	3064296	IdentifierDeclStatement	MyString inheritbuf ;	7335:1:224451:224470	3064214	19	True				
ANR	3064297	IdentifierDecl	inheritbuf		3064214	0					
ANR	3064298	IdentifierDeclType	MyString		3064214	0					
ANR	3064299	Identifier	inheritbuf		3064214	1					
ANR	3064300	IdentifierDeclStatement	ReliSock rsock ;	7338:1:224569:224583	3064214	20	True				
ANR	3064301	IdentifierDecl	rsock		3064214	0					
ANR	3064302	IdentifierDeclType	ReliSock		3064214	0					
ANR	3064303	Identifier	rsock		3064214	1					
ANR	3064304	IdentifierDeclStatement	SharedPortEndpoint shared_port_endpoint ( daemon_sock ) ;	7339:1:224586:224640	3064214	21	True				
ANR	3064305	IdentifierDecl	shared_port_endpoint ( daemon_sock )		3064214	0					
ANR	3064306	IdentifierDeclType	SharedPortEndpoint		3064214	0					
ANR	3064307	Identifier	shared_port_endpoint		3064214	1					
ANR	3064308	Identifier	daemon_sock		3064214	2					
ANR	3064309	IdentifierDeclStatement	SafeSock ssock ;	7340:1:224643:224657	3064214	22	True				
ANR	3064310	IdentifierDecl	ssock		3064214	0					
ANR	3064311	IdentifierDeclType	SafeSock		3064214	0					
ANR	3064312	Identifier	ssock		3064214	1					
ANR	3064313	IdentifierDeclStatement	PidEntry * pidtmp ;	7341:1:224660:224676	3064214	23	True				
ANR	3064314	IdentifierDecl	* pidtmp		3064214	0					
ANR	3064315	IdentifierDeclType	PidEntry *		3064214	0					
ANR	3064316	Identifier	pidtmp		3064214	1					
ANR	3064317	IdentifierDeclStatement	time_t time_of_fork ;	7344:1:224750:224769	3064214	24	True				
ANR	3064318	IdentifierDecl	time_of_fork		3064214	0					
ANR	3064319	IdentifierDeclType	time_t		3064214	0					
ANR	3064320	Identifier	time_of_fork		3064214	1					
ANR	3064321	IdentifierDeclStatement	unsigned int mii ;	7345:1:224772:224788	3064214	25	True				
ANR	3064322	IdentifierDecl	mii		3064214	0					
ANR	3064323	IdentifierDeclType	unsigned int		3064214	0					
ANR	3064324	Identifier	mii		3064214	1					
ANR	3064325	IdentifierDeclStatement	pid_t forker_pid ;	7346:1:224791:224807	3064214	26	True				
ANR	3064326	IdentifierDecl	forker_pid		3064214	0					
ANR	3064327	IdentifierDeclType	pid_t		3064214	0					
ANR	3064328	Identifier	forker_pid		3064214	1					
ANR	3064329	IdentifierDeclStatement	std :: string session_id ;	7348:1:224890:224912	3064214	27	True				
ANR	3064330	IdentifierDecl	session_id		3064214	0					
ANR	3064331	IdentifierDeclType	std :: string		3064214	0					
ANR	3064332	Identifier	session_id		3064214	1					
ANR	3064333	IdentifierDeclStatement	MyString privateinheritbuf ;	7349:1:224915:224941	3064214	28	True				
ANR	3064334	IdentifierDecl	privateinheritbuf		3064214	0					
ANR	3064335	IdentifierDeclType	MyString		3064214	0					
ANR	3064336	Identifier	privateinheritbuf		3064214	1					
ANR	3064337	IdentifierDeclStatement	DWORD create_process_flags = 0 ;	7355:1:225078:225108	3064214	29	True				
ANR	3064338	IdentifierDecl	create_process_flags = 0		3064214	0					
ANR	3064339	IdentifierDeclType	DWORD		3064214	0					
ANR	3064340	Identifier	create_process_flags		3064214	1					
ANR	3064341	AssignmentExpression	create_process_flags = 0		3064214	2		=			
ANR	3064342	Identifier	create_process_flags		3064214	0					
ANR	3064343	PrimaryExpression	0		3064214	1					
ANR	3064344	IdentifierDeclStatement	BOOL inherit_handles = FALSE ;	7356:1:225111:225139	3064214	30	True				
ANR	3064345	IdentifierDecl	inherit_handles = FALSE		3064214	0					
ANR	3064346	IdentifierDeclType	BOOL		3064214	0					
ANR	3064347	Identifier	inherit_handles		3064214	1					
ANR	3064348	AssignmentExpression	inherit_handles = FALSE		3064214	2		=			
ANR	3064349	Identifier	FALSE		3064214	0					
ANR	3064350	Identifier	FALSE		3064214	1					
ANR	3064351	IdentifierDeclStatement	char * newenv = NULL ;	7357:1:225142:225161	3064214	31	True				
ANR	3064352	IdentifierDecl	* newenv = NULL		3064214	0					
ANR	3064353	IdentifierDeclType	char *		3064214	0					
ANR	3064354	Identifier	newenv		3064214	1					
ANR	3064355	AssignmentExpression	* newenv = NULL		3064214	2		=			
ANR	3064356	Identifier	NULL		3064214	0					
ANR	3064357	Identifier	NULL		3064214	1					
ANR	3064358	IdentifierDeclStatement	MyString strArgs ;	7358:1:225164:225180	3064214	32	True				
ANR	3064359	IdentifierDecl	strArgs		3064214	0					
ANR	3064360	IdentifierDeclType	MyString		3064214	0					
ANR	3064361	Identifier	strArgs		3064214	1					
ANR	3064362	IdentifierDeclStatement	MyString args_errors ;	7359:1:225183:225203	3064214	33	True				
ANR	3064363	IdentifierDecl	args_errors		3064214	0					
ANR	3064364	IdentifierDeclType	MyString		3064214	0					
ANR	3064365	Identifier	args_errors		3064214	1					
ANR	3064366	IdentifierDeclStatement	int namelen = 0 ;	7360:1:225206:225221	3064214	34	True				
ANR	3064367	IdentifierDecl	namelen = 0		3064214	0					
ANR	3064368	IdentifierDeclType	int		3064214	0					
ANR	3064369	Identifier	namelen		3064214	1					
ANR	3064370	AssignmentExpression	namelen = 0		3064214	2		=			
ANR	3064371	Identifier	namelen		3064214	0					
ANR	3064372	PrimaryExpression	0		3064214	1					
ANR	3064373	IdentifierDeclStatement	bool bIs16Bit = FALSE ;	7361:1:225224:225245	3064214	35	True				
ANR	3064374	IdentifierDecl	bIs16Bit = FALSE		3064214	0					
ANR	3064375	IdentifierDeclType	bool		3064214	0					
ANR	3064376	Identifier	bIs16Bit		3064214	1					
ANR	3064377	AssignmentExpression	bIs16Bit = FALSE		3064214	2		=			
ANR	3064378	Identifier	FALSE		3064214	0					
ANR	3064379	Identifier	FALSE		3064214	1					
ANR	3064380	IdentifierDeclStatement	int first_arg_to_copy = 0 ;	7362:1:225248:225273	3064214	36	True				
ANR	3064381	IdentifierDecl	first_arg_to_copy = 0		3064214	0					
ANR	3064382	IdentifierDeclType	int		3064214	0					
ANR	3064383	Identifier	first_arg_to_copy		3064214	1					
ANR	3064384	AssignmentExpression	first_arg_to_copy = 0		3064214	2		=			
ANR	3064385	Identifier	first_arg_to_copy		3064214	0					
ANR	3064386	PrimaryExpression	0		3064214	1					
ANR	3064387	IdentifierDeclStatement	bool args_success = false ;	7363:1:225276:225301	3064214	37	True				
ANR	3064388	IdentifierDecl	args_success = false		3064214	0					
ANR	3064389	IdentifierDeclType	bool		3064214	0					
ANR	3064390	Identifier	args_success		3064214	1					
ANR	3064391	AssignmentExpression	args_success = false		3064214	2		=			
ANR	3064392	Identifier	false		3064214	0					
ANR	3064393	Identifier	false		3064214	1					
ANR	3064394	IdentifierDeclStatement	const char * extension = NULL ;	7364:1:225304:225332	3064214	38	True				
ANR	3064395	IdentifierDecl	* extension = NULL		3064214	0					
ANR	3064396	IdentifierDeclType	const char *		3064214	0					
ANR	3064397	Identifier	extension		3064214	1					
ANR	3064398	AssignmentExpression	* extension = NULL		3064214	2		=			
ANR	3064399	Identifier	NULL		3064214	0					
ANR	3064400	Identifier	NULL		3064214	1					
ANR	3064401	IdentifierDeclStatement	bool allow_scripts = true ;	7365:1:225335:225360	3064214	39	True				
ANR	3064402	IdentifierDecl	allow_scripts = true		3064214	0					
ANR	3064403	IdentifierDeclType	bool		3064214	0					
ANR	3064404	Identifier	allow_scripts		3064214	1					
ANR	3064405	AssignmentExpression	allow_scripts = true		3064214	2		=			
ANR	3064406	Identifier	true		3064214	0					
ANR	3064407	Identifier	true		3064214	1					
ANR	3064408	IdentifierDeclStatement	bool batch_file = false ;	7366:1:225363:225386	3064214	40	True				
ANR	3064409	IdentifierDecl	batch_file = false		3064214	0					
ANR	3064410	IdentifierDeclType	bool		3064214	0					
ANR	3064411	Identifier	batch_file		3064214	1					
ANR	3064412	AssignmentExpression	batch_file = false		3064214	2		=			
ANR	3064413	Identifier	false		3064214	0					
ANR	3064414	Identifier	false		3064214	1					
ANR	3064415	IdentifierDeclStatement	bool binary_executable = false ;	7367:1:225389:225419	3064214	41	True				
ANR	3064416	IdentifierDecl	binary_executable = false		3064214	0					
ANR	3064417	IdentifierDeclType	bool		3064214	0					
ANR	3064418	Identifier	binary_executable		3064214	1					
ANR	3064419	AssignmentExpression	binary_executable = false		3064214	2		=			
ANR	3064420	Identifier	false		3064214	0					
ANR	3064421	Identifier	false		3064214	1					
ANR	3064422	IdentifierDeclStatement	CHAR interpreter [ MAX_PATH + 1 ] ;	7368:1:225422:225450	3064214	42	True				
ANR	3064423	IdentifierDecl	interpreter [ MAX_PATH + 1 ]		3064214	0					
ANR	3064424	IdentifierDeclType	CHAR [ MAX_PATH + 1 ]		3064214	0					
ANR	3064425	Identifier	interpreter		3064214	1					
ANR	3064426	AdditiveExpression	MAX_PATH + 1		3064214	2		+			
ANR	3064427	Identifier	MAX_PATH		3064214	0					
ANR	3064428	PrimaryExpression	1		3064214	1					
ANR	3064429	IdentifierDeclStatement	MyString description ;	7369:1:225453:225473	3064214	43	True				
ANR	3064430	IdentifierDecl	description		3064214	0					
ANR	3064431	IdentifierDeclType	MyString		3064214	0					
ANR	3064432	Identifier	description		3064214	1					
ANR	3064433	IdentifierDeclStatement	BOOL ok ;	7370:1:225476:225483	3064214	44	True				
ANR	3064434	IdentifierDecl	ok		3064214	0					
ANR	3064435	IdentifierDeclType	BOOL		3064214	0					
ANR	3064436	Identifier	ok		3064214	1					
ANR	3064437	IdentifierDeclStatement	MyString executable_with_exe ;	7371:1:225486:225514	3064214	45	True				
ANR	3064438	IdentifierDecl	executable_with_exe		3064214	0					
ANR	3064439	IdentifierDeclType	MyString		3064214	0					
ANR	3064440	Identifier	executable_with_exe		3064214	1					
ANR	3064441	IdentifierDeclStatement	bool want_udp = ! HAS_DCJOBOPT_NO_UDP ( job_opt_mask ) && m_wants_dc_udp ;	7382:1:225757:225825	3064214	46	True				
ANR	3064442	IdentifierDecl	want_udp = ! HAS_DCJOBOPT_NO_UDP ( job_opt_mask ) && m_wants_dc_udp		3064214	0					
ANR	3064443	IdentifierDeclType	bool		3064214	0					
ANR	3064444	Identifier	want_udp		3064214	1					
ANR	3064445	AssignmentExpression	want_udp = ! HAS_DCJOBOPT_NO_UDP ( job_opt_mask ) && m_wants_dc_udp		3064214	2		=			
ANR	3064446	Identifier	want_udp		3064214	0					
ANR	3064447	AndExpression	! HAS_DCJOBOPT_NO_UDP ( job_opt_mask ) && m_wants_dc_udp		3064214	1		&&			
ANR	3064448	UnaryOperationExpression	! HAS_DCJOBOPT_NO_UDP ( job_opt_mask )		3064214	0					
ANR	3064449	UnaryOperator	!		3064214	0					
ANR	3064450	CallExpression	HAS_DCJOBOPT_NO_UDP ( job_opt_mask )		3064214	1					
ANR	3064451	Callee	HAS_DCJOBOPT_NO_UDP		3064214	0					
ANR	3064452	Identifier	HAS_DCJOBOPT_NO_UDP		3064214	0					
ANR	3064453	ArgumentList	job_opt_mask		3064214	1					
ANR	3064454	Argument	job_opt_mask		3064214	0					
ANR	3064455	Identifier	job_opt_mask		3064214	0					
ANR	3064456	Identifier	m_wants_dc_udp		3064214	1					
ANR	3064457	IdentifierDeclStatement	double runtime = UtcTime :: getTimeDouble ( ) ;	7384:1:225829:225870	3064214	47	True				
ANR	3064458	IdentifierDecl	runtime = UtcTime :: getTimeDouble ( )		3064214	0					
ANR	3064459	IdentifierDeclType	double		3064214	0					
ANR	3064460	Identifier	runtime		3064214	1					
ANR	3064461	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		3064214	2		=			
ANR	3064462	Identifier	runtime		3064214	0					
ANR	3064463	CallExpression	UtcTime :: getTimeDouble ( )		3064214	1					
ANR	3064464	Callee	UtcTime :: getTimeDouble		3064214	0					
ANR	3064465	Identifier	UtcTime :: getTimeDouble		3064214	0					
ANR	3064466	ArgumentList			3064214	1					
ANR	3064467	IdentifierDeclStatement	double create_process_begin_time = runtime ;	7385:4:225876:225918	3064214	48	True				
ANR	3064468	IdentifierDecl	create_process_begin_time = runtime		3064214	0					
ANR	3064469	IdentifierDeclType	double		3064214	0					
ANR	3064470	Identifier	create_process_begin_time		3064214	1					
ANR	3064471	AssignmentExpression	create_process_begin_time = runtime		3064214	2		=			
ANR	3064472	Identifier	runtime		3064214	0					
ANR	3064473	Identifier	runtime		3064214	1					
ANR	3064474	IdentifierDeclStatement	double delta_runtime = 0 ;	7386:4:225924:225948	3064214	49	True				
ANR	3064475	IdentifierDecl	delta_runtime = 0		3064214	0					
ANR	3064476	IdentifierDeclType	double		3064214	0					
ANR	3064477	Identifier	delta_runtime		3064214	1					
ANR	3064478	AssignmentExpression	delta_runtime = 0		3064214	2		=			
ANR	3064479	Identifier	delta_runtime		3064214	0					
ANR	3064480	PrimaryExpression	0		3064214	1					
ANR	3064481	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""In DaemonCore::Create_Process(%s,...)\\n"" , executable ? executable : ""NULL"" )"	7387:1:225951:226047	3064214	50	True				
ANR	3064482	CallExpression	"dprintf ( D_DAEMONCORE , ""In DaemonCore::Create_Process(%s,...)\\n"" , executable ? executable : ""NULL"" )"		3064214	0					
ANR	3064483	Callee	dprintf		3064214	0					
ANR	3064484	Identifier	dprintf		3064214	0					
ANR	3064485	ArgumentList	D_DAEMONCORE		3064214	1					
ANR	3064486	Argument	D_DAEMONCORE		3064214	0					
ANR	3064487	Identifier	D_DAEMONCORE		3064214	0					
ANR	3064488	Argument	"""In DaemonCore::Create_Process(%s,...)\\n"""		3064214	1					
ANR	3064489	PrimaryExpression	"""In DaemonCore::Create_Process(%s,...)\\n"""		3064214	0					
ANR	3064490	Argument	"executable ? executable : ""NULL"""		3064214	2					
ANR	3064491	ConditionalExpression	"executable ? executable : ""NULL"""		3064214	0					
ANR	3064492	Condition	executable		3064214	0					
ANR	3064493	Identifier	executable		3064214	0					
ANR	3064494	Identifier	executable		3064214	1					
ANR	3064495	PrimaryExpression	"""NULL"""		3064214	2					
ANR	3064496	IfStatement	if ( ( reaper_id < 0 ) || ( reaper_id > maxReap ) || ( ( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 ) ) )		3064214	51					
ANR	3064497	Condition	( reaper_id < 0 ) || ( reaper_id > maxReap ) || ( ( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 ) )	7392:6:226207:226309	3064214	0	True				
ANR	3064498	OrExpression	( reaper_id < 0 ) || ( reaper_id > maxReap ) || ( ( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 ) )		3064214	0		||			
ANR	3064499	RelationalExpression	reaper_id < 0		3064214	0		<			
ANR	3064500	Identifier	reaper_id		3064214	0					
ANR	3064501	PrimaryExpression	0		3064214	1					
ANR	3064502	OrExpression	( reaper_id > maxReap ) || ( ( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 ) )		3064214	1		||			
ANR	3064503	RelationalExpression	reaper_id > maxReap		3064214	0		>			
ANR	3064504	Identifier	reaper_id		3064214	0					
ANR	3064505	Identifier	maxReap		3064214	1					
ANR	3064506	AndExpression	( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 )		3064214	1		&&			
ANR	3064507	RelationalExpression	reaper_id > 0		3064214	0		>			
ANR	3064508	Identifier	reaper_id		3064214	0					
ANR	3064509	PrimaryExpression	0		3064214	1					
ANR	3064510	EqualityExpression	reapTable [ reaper_id - 1 ] . num == 0		3064214	1		==			
ANR	3064511	MemberAccess	reapTable [ reaper_id - 1 ] . num		3064214	0					
ANR	3064512	ArrayIndexing	reapTable [ reaper_id - 1 ]		3064214	0					
ANR	3064513	Identifier	reapTable		3064214	0					
ANR	3064514	AdditiveExpression	reaper_id - 1		3064214	1		-			
ANR	3064515	Identifier	reaper_id		3064214	0					
ANR	3064516	PrimaryExpression	1		3064214	1					
ANR	3064517	Identifier	num		3064214	1					
ANR	3064518	PrimaryExpression	0		3064214	1					
ANR	3064519	CompoundStatement		76:62:2358:2358	3064214	1					
ANR	3064520	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: invalid reaper_id\\n"" )"	7394:2:226317:226372	3064214	0	True				
ANR	3064521	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: invalid reaper_id\\n"" )"		3064214	0					
ANR	3064522	Callee	dprintf		3064214	0					
ANR	3064523	Identifier	dprintf		3064214	0					
ANR	3064524	ArgumentList	D_ALWAYS		3064214	1					
ANR	3064525	Argument	D_ALWAYS		3064214	0					
ANR	3064526	Identifier	D_ALWAYS		3064214	0					
ANR	3064527	Argument	"""Create_Process: invalid reaper_id\\n"""		3064214	1					
ANR	3064528	PrimaryExpression	"""Create_Process: invalid reaper_id\\n"""		3064214	0					
ANR	3064529	GotoStatement	goto wrapup ;	7395:2:226376:226387	3064214	1	True				
ANR	3064530	Identifier	wrapup		3064214	0					
ANR	3064531	IfStatement	if ( ! executable )		3064214	52					
ANR	3064532	Condition	! executable	7399:6:226423:226433	3064214	0	True				
ANR	3064533	UnaryOperationExpression	! executable		3064214	0					
ANR	3064534	UnaryOperator	!		3064214	0					
ANR	3064535	Identifier	executable		3064214	1					
ANR	3064536	CompoundStatement		82:20:2482:2482	3064214	1					
ANR	3064537	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: null name to exec\\n"" )"	7400:2:226441:226496	3064214	0	True				
ANR	3064538	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: null name to exec\\n"" )"		3064214	0					
ANR	3064539	Callee	dprintf		3064214	0					
ANR	3064540	Identifier	dprintf		3064214	0					
ANR	3064541	ArgumentList	D_ALWAYS		3064214	1					
ANR	3064542	Argument	D_ALWAYS		3064214	0					
ANR	3064543	Identifier	D_ALWAYS		3064214	0					
ANR	3064544	Argument	"""Create_Process: null name to exec\\n"""		3064214	1					
ANR	3064545	PrimaryExpression	"""Create_Process: null name to exec\\n"""		3064214	0					
ANR	3064546	GotoStatement	goto wrapup ;	7401:2:226500:226511	3064214	1	True				
ANR	3064547	Identifier	wrapup		3064214	0					
ANR	3064548	ExpressionStatement	"inheritbuf . sprintf ( ""%lu "" , ( unsigned long ) mypid )"	7404:1:226518:226565	3064214	53	True				
ANR	3064549	CallExpression	"inheritbuf . sprintf ( ""%lu "" , ( unsigned long ) mypid )"		3064214	0					
ANR	3064550	Callee	inheritbuf . sprintf		3064214	0					
ANR	3064551	MemberAccess	inheritbuf . sprintf		3064214	0					
ANR	3064552	Identifier	inheritbuf		3064214	0					
ANR	3064553	Identifier	sprintf		3064214	1					
ANR	3064554	ArgumentList	"""%lu """		3064214	1					
ANR	3064555	Argument	"""%lu """		3064214	0					
ANR	3064556	PrimaryExpression	"""%lu """		3064214	0					
ANR	3064557	Argument	( unsigned long ) mypid		3064214	1					
ANR	3064558	CastExpression	( unsigned long ) mypid		3064214	0					
ANR	3064559	CastTarget	unsigned long		3064214	0					
ANR	3064560	Identifier	mypid		3064214	1					
ANR	3064561	CompoundStatement		94:2:2810:2862	3064214	54					
ANR	3064562	IdentifierDeclStatement	MyString mysin = InfoCommandSinfulStringMyself ( true ) ;	7411:2:226765:226817	3064214	0	True				
ANR	3064563	IdentifierDecl	mysin = InfoCommandSinfulStringMyself ( true )		3064214	0					
ANR	3064564	IdentifierDeclType	MyString		3064214	0					
ANR	3064565	Identifier	mysin		3064214	1					
ANR	3064566	AssignmentExpression	mysin = InfoCommandSinfulStringMyself ( true )		3064214	2		=			
ANR	3064567	Identifier	mysin		3064214	0					
ANR	3064568	CallExpression	InfoCommandSinfulStringMyself ( true )		3064214	1					
ANR	3064569	Callee	InfoCommandSinfulStringMyself		3064214	0					
ANR	3064570	Identifier	InfoCommandSinfulStringMyself		3064214	0					
ANR	3064571	ArgumentList	true		3064214	1					
ANR	3064572	Argument	true		3064214	0					
ANR	3064573	Identifier	true		3064214	0					
ANR	3064574	ExpressionStatement	ASSERT ( mysin . Length ( ) > 0 )	7412:2:226821:226847	3064214	1	True				
ANR	3064575	CallExpression	ASSERT ( mysin . Length ( ) > 0 )		3064214	0					
ANR	3064576	Callee	ASSERT		3064214	0					
ANR	3064577	Identifier	ASSERT		3064214	0					
ANR	3064578	ArgumentList	mysin . Length ( ) > 0		3064214	1					
ANR	3064579	Argument	mysin . Length ( ) > 0		3064214	0					
ANR	3064580	RelationalExpression	mysin . Length ( ) > 0		3064214	0		>			
ANR	3064581	CallExpression	mysin . Length ( )		3064214	0					
ANR	3064582	Callee	mysin . Length		3064214	0					
ANR	3064583	MemberAccess	mysin . Length		3064214	0					
ANR	3064584	Identifier	mysin		3064214	0					
ANR	3064585	Identifier	Length		3064214	1					
ANR	3064586	ArgumentList			3064214	1					
ANR	3064587	PrimaryExpression	0		3064214	1					
ANR	3064588	ExpressionStatement	inheritbuf += mysin	7413:2:226891:226910	3064214	2	True				
ANR	3064589	AssignmentExpression	inheritbuf += mysin		3064214	0		+=			
ANR	3064590	Identifier	inheritbuf		3064214	0					
ANR	3064591	Identifier	mysin		3064214	1					
ANR	3064592	IfStatement	if ( sock_inherit_list )		3064214	55					
ANR	3064593	Condition	sock_inherit_list	7416:6:226922:226938	3064214	0	True				
ANR	3064594	Identifier	sock_inherit_list		3064214	0					
ANR	3064595	CompoundStatement		99:26:2987:2987	3064214	1					
ANR	3064596	ExpressionStatement	inherit_handles = TRUE	7417:2:226946:226968	3064214	0	True				
ANR	3064597	AssignmentExpression	inherit_handles = TRUE		3064214	0		=			
ANR	3064598	Identifier	inherit_handles		3064214	0					
ANR	3064599	Identifier	TRUE		3064214	1					
ANR	3064600	ForStatement	for ( i = 0 ; ( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS ) ; i ++ )		3064214	1					
ANR	3064601	ForInit	i = 0 ;	7418:7:226977:226983	3064214	0	True				
ANR	3064602	AssignmentExpression	i = 0		3064214	0		=			
ANR	3064603	Identifier	i		3064214	0					
ANR	3064604	PrimaryExpression	0		3064214	1					
ANR	3064605	Condition	( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS )	7419:4:226989:227045	3064214	1	True				
ANR	3064606	AndExpression	( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS )		3064214	0		&&			
ANR	3064607	EqualityExpression	sock_inherit_list [ i ] != NULL		3064214	0		!=			
ANR	3064608	ArrayIndexing	sock_inherit_list [ i ]		3064214	0					
ANR	3064609	Identifier	sock_inherit_list		3064214	0					
ANR	3064610	Identifier	i		3064214	1					
ANR	3064611	Identifier	NULL		3064214	1					
ANR	3064612	RelationalExpression	i < MAX_INHERIT_SOCKS		3064214	1		<			
ANR	3064613	Identifier	i		3064214	0					
ANR	3064614	Identifier	MAX_INHERIT_SOCKS		3064214	1					
ANR	3064615	PostIncDecOperationExpression	i ++	7420:4:227053:227055	3064214	2	True				
ANR	3064616	Identifier	i		3064214	0					
ANR	3064617	IncDec	++		3064214	1					
ANR	3064618	CompoundStatement		108:12:3298:3347	3064214	3					
ANR	3064619	IdentifierDeclStatement	Sock * tempSock = ( ( Sock * ) sock_inherit_list [ i ] ) ;	7425:12:227253:227302	3064214	0	True				
ANR	3064620	IdentifierDecl	* tempSock = ( ( Sock * ) sock_inherit_list [ i ] )		3064214	0					
ANR	3064621	IdentifierDeclType	Sock *		3064214	0					
ANR	3064622	Identifier	tempSock		3064214	1					
ANR	3064623	AssignmentExpression	* tempSock = ( ( Sock * ) sock_inherit_list [ i ] )		3064214	2		=			
ANR	3064624	Identifier	tempSock		3064214	0					
ANR	3064625	CastExpression	( Sock * ) sock_inherit_list [ i ]		3064214	1					
ANR	3064626	CastTarget	Sock *		3064214	0					
ANR	3064627	ArrayIndexing	sock_inherit_list [ i ]		3064214	1					
ANR	3064628	Identifier	sock_inherit_list		3064214	0					
ANR	3064629	Identifier	i		3064214	1					
ANR	3064630	IfStatement	if ( tempSock )		3064214	1					
ANR	3064631	Condition	tempSock	7426:17:227321:227328	3064214	0	True				
ANR	3064632	Identifier	tempSock		3064214	0					
ANR	3064633	CompoundStatement		109:28:3377:3377	3064214	1					
ANR	3064634	ExpressionStatement	inheritFds [ numInheritFds ] = tempSock -> get_file_desc ( )	7427:16:227350:227403	3064214	0	True				
ANR	3064635	AssignmentExpression	inheritFds [ numInheritFds ] = tempSock -> get_file_desc ( )		3064214	0		=			
ANR	3064636	ArrayIndexing	inheritFds [ numInheritFds ]		3064214	0					
ANR	3064637	Identifier	inheritFds		3064214	0					
ANR	3064638	Identifier	numInheritFds		3064214	1					
ANR	3064639	CallExpression	tempSock -> get_file_desc ( )		3064214	1					
ANR	3064640	Callee	tempSock -> get_file_desc		3064214	0					
ANR	3064641	PtrMemberAccess	tempSock -> get_file_desc		3064214	0					
ANR	3064642	Identifier	tempSock		3064214	0					
ANR	3064643	Identifier	get_file_desc		3064214	1					
ANR	3064644	ArgumentList			3064214	1					
ANR	3064645	ExpressionStatement	numInheritFds ++	7428:16:227421:227436	3064214	1	True				
ANR	3064646	PostIncDecOperationExpression	numInheritFds ++		3064214	0					
ANR	3064647	Identifier	numInheritFds		3064214	0					
ANR	3064648	IncDec	++		3064214	1					
ANR	3064649	IfStatement	if ( ! ( tempSock -> set_inheritable ( TRUE ) ) )		3064214	2					
ANR	3064650	Condition	! ( tempSock -> set_inheritable ( TRUE ) )	7430:21:227527:227560	3064214	0	True				
ANR	3064651	UnaryOperationExpression	! ( tempSock -> set_inheritable ( TRUE ) )		3064214	0					
ANR	3064652	UnaryOperator	!		3064214	0					
ANR	3064653	CallExpression	tempSock -> set_inheritable ( TRUE )		3064214	1					
ANR	3064654	Callee	tempSock -> set_inheritable		3064214	0					
ANR	3064655	PtrMemberAccess	tempSock -> set_inheritable		3064214	0					
ANR	3064656	Identifier	tempSock		3064214	0					
ANR	3064657	Identifier	set_inheritable		3064214	1					
ANR	3064658	ArgumentList	TRUE		3064214	1					
ANR	3064659	Argument	TRUE		3064214	0					
ANR	3064660	Identifier	TRUE		3064214	0					
ANR	3064661	CompoundStatement		113:58:3609:3609	3064214	1					
ANR	3064662	GotoStatement	goto wrapup ;	7431:5:227571:227582	3064214	0	True				
ANR	3064663	Identifier	wrapup		3064214	0					
ANR	3064664	ElseStatement	else		3064214	0					
ANR	3064665	CompoundStatement		117:17:3678:3678	3064214	0					
ANR	3064666	ExpressionStatement	"dprintf ( D_ALWAYS , ""Dynamic cast failure!\\n"" )"	7435:16:227651:227698	3064214	0	True				
ANR	3064667	CallExpression	"dprintf ( D_ALWAYS , ""Dynamic cast failure!\\n"" )"		3064214	0					
ANR	3064668	Callee	dprintf		3064214	0					
ANR	3064669	Identifier	dprintf		3064214	0					
ANR	3064670	ArgumentList	D_ALWAYS		3064214	1					
ANR	3064671	Argument	D_ALWAYS		3064214	0					
ANR	3064672	Identifier	D_ALWAYS		3064214	0					
ANR	3064673	Argument	"""Dynamic cast failure!\\n"""		3064214	1					
ANR	3064674	PrimaryExpression	"""Dynamic cast failure!\\n"""		3064214	0					
ANR	3064675	ExpressionStatement	"EXCEPT ( ""dynamic_cast"" )"	7436:16:227716:227740	3064214	1	True				
ANR	3064676	CallExpression	"EXCEPT ( ""dynamic_cast"" )"		3064214	0					
ANR	3064677	Callee	EXCEPT		3064214	0					
ANR	3064678	Identifier	EXCEPT		3064214	0					
ANR	3064679	ArgumentList	"""dynamic_cast"""		3064214	1					
ANR	3064680	Argument	"""dynamic_cast"""		3064214	0					
ANR	3064681	PrimaryExpression	"""dynamic_cast"""		3064214	0					
ANR	3064682	SwitchStatement	switch ( sock_inherit_list [ i ] -> type ( ) )		3064214	2					
ANR	3064683	Condition	sock_inherit_list [ i ] -> type ( )	7440:13:227821:227848	3064214	0	True				
ANR	3064684	CallExpression	sock_inherit_list [ i ] -> type ( )		3064214	0					
ANR	3064685	Callee	sock_inherit_list [ i ] -> type		3064214	0					
ANR	3064686	PtrMemberAccess	sock_inherit_list [ i ] -> type		3064214	0					
ANR	3064687	ArrayIndexing	sock_inherit_list [ i ]		3064214	0					
ANR	3064688	Identifier	sock_inherit_list		3064214	0					
ANR	3064689	Identifier	i		3064214	1					
ANR	3064690	Identifier	type		3064214	1					
ANR	3064691	ArgumentList			3064214	1					
ANR	3064692	CompoundStatement		123:44:3897:3897	3064214	1					
ANR	3064693	Label	case Stream :: reli_sock :	7441:4:227858:227881	3064214	0	True				
ANR	3064694	Identifier	Stream :: reli_sock		3064214	0					
ANR	3064695	ExpressionStatement	"inheritbuf += "" 1 """	7442:5:227888:227907	3064214	1	True				
ANR	3064696	AssignmentExpression	"inheritbuf += "" 1 """		3064214	0		+=			
ANR	3064697	Identifier	inheritbuf		3064214	0					
ANR	3064698	PrimaryExpression	""" 1 """		3064214	1					
ANR	3064699	BreakStatement	break ;	7443:5:227914:227919	3064214	2	True				
ANR	3064700	Label	case Stream :: safe_sock :	7444:4:227925:227948	3064214	3	True				
ANR	3064701	Identifier	Stream :: safe_sock		3064214	0					
ANR	3064702	ExpressionStatement	"inheritbuf += "" 2 """	7445:5:227955:227974	3064214	4	True				
ANR	3064703	AssignmentExpression	"inheritbuf += "" 2 """		3064214	0		+=			
ANR	3064704	Identifier	inheritbuf		3064214	0					
ANR	3064705	PrimaryExpression	""" 2 """		3064214	1					
ANR	3064706	BreakStatement	break ;	7446:5:227981:227986	3064214	5	True				
ANR	3064707	Label	default :	7447:4:227992:227999	3064214	6	True				
ANR	3064708	Identifier	default		3064214	0					
ANR	3064709	ExpressionStatement	assert ( 0 )	7449:5:228067:228076	3064214	7	True				
ANR	3064710	CallExpression	assert ( 0 )		3064214	0					
ANR	3064711	Callee	assert		3064214	0					
ANR	3064712	Identifier	assert		3064214	0					
ANR	3064713	ArgumentList	0		3064214	1					
ANR	3064714	Argument	0		3064214	0					
ANR	3064715	PrimaryExpression	0		3064214	0					
ANR	3064716	BreakStatement	break ;	7450:5:228083:228088	3064214	8	True				
ANR	3064717	ExpressionStatement	ptmp = sock_inherit_list [ i ] -> serialize ( )	7453:4:228142:228182	3064214	3	True				
ANR	3064718	AssignmentExpression	ptmp = sock_inherit_list [ i ] -> serialize ( )		3064214	0		=			
ANR	3064719	Identifier	ptmp		3064214	0					
ANR	3064720	CallExpression	sock_inherit_list [ i ] -> serialize ( )		3064214	1					
ANR	3064721	Callee	sock_inherit_list [ i ] -> serialize		3064214	0					
ANR	3064722	PtrMemberAccess	sock_inherit_list [ i ] -> serialize		3064214	0					
ANR	3064723	ArrayIndexing	sock_inherit_list [ i ]		3064214	0					
ANR	3064724	Identifier	sock_inherit_list		3064214	0					
ANR	3064725	Identifier	i		3064214	1					
ANR	3064726	Identifier	serialize		3064214	1					
ANR	3064727	ArgumentList			3064214	1					
ANR	3064728	ExpressionStatement	inheritbuf += ptmp	7454:4:228188:228206	3064214	4	True				
ANR	3064729	AssignmentExpression	inheritbuf += ptmp		3064214	0		+=			
ANR	3064730	Identifier	inheritbuf		3064214	0					
ANR	3064731	Identifier	ptmp		3064214	1					
ANR	3064732	Statement	delete	7455:4:228212:228217	3064214	5	True				
ANR	3064733	Statement	[	7455:11:228219:228219	3064214	6	True				
ANR	3064734	Statement	]	7455:12:228220:228220	3064214	7	True				
ANR	3064735	ExpressionStatement	ptmp	7455:13:228221:228225	3064214	8	True				
ANR	3064736	Identifier	ptmp		3064214	0					
ANR	3064737	ExpressionStatement	"inheritbuf += "" 0"""	7458:1:228235:228253	3064214	56	True				
ANR	3064738	AssignmentExpression	"inheritbuf += "" 0"""		3064214	0		+=			
ANR	3064739	Identifier	inheritbuf		3064214	0					
ANR	3064740	PrimaryExpression	""" 0"""		3064214	1					
ANR	3064741	IfStatement	if ( want_command_port != FALSE && want_command_port <= 1 && ! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( ) )		3064214	57					
ANR	3064742	Condition	want_command_port != FALSE && want_command_port <= 1 && ! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( )	7466:6:228622:228771	3064214	0	True				
ANR	3064743	AndExpression	want_command_port != FALSE && want_command_port <= 1 && ! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( )		3064214	0		&&			
ANR	3064744	EqualityExpression	want_command_port != FALSE		3064214	0		!=			
ANR	3064745	Identifier	want_command_port		3064214	0					
ANR	3064746	Identifier	FALSE		3064214	1					
ANR	3064747	AndExpression	want_command_port <= 1 && ! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( )		3064214	1		&&			
ANR	3064748	RelationalExpression	want_command_port <= 1		3064214	0		<=			
ANR	3064749	Identifier	want_command_port		3064214	0					
ANR	3064750	PrimaryExpression	1		3064214	1					
ANR	3064751	AndExpression	! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( )		3064214	1		&&			
ANR	3064752	UnaryOperationExpression	! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask )		3064214	0					
ANR	3064753	UnaryOperator	!		3064214	0					
ANR	3064754	CallExpression	HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask )		3064214	1					
ANR	3064755	Callee	HAS_DCJOBOPT_NEVER_USE_SHARED_PORT		3064214	0					
ANR	3064756	Identifier	HAS_DCJOBOPT_NEVER_USE_SHARED_PORT		3064214	0					
ANR	3064757	ArgumentList	job_opt_mask		3064214	1					
ANR	3064758	Argument	job_opt_mask		3064214	0					
ANR	3064759	Identifier	job_opt_mask		3064214	0					
ANR	3064760	CallExpression	SharedPortEndpoint :: UseSharedPort ( )		3064214	1					
ANR	3064761	Callee	SharedPortEndpoint :: UseSharedPort		3064214	0					
ANR	3064762	Identifier	SharedPortEndpoint :: UseSharedPort		3064214	0					
ANR	3064763	ArgumentList			3064214	1					
ANR	3064764	CompoundStatement		166:2:5289:5300	3064214	1					
ANR	3064765	ExpressionStatement	shared_port_endpoint . InitAndReconfig ( )	7470:2:228780:228818	3064214	0	True				
ANR	3064766	CallExpression	shared_port_endpoint . InitAndReconfig ( )		3064214	0					
ANR	3064767	Callee	shared_port_endpoint . InitAndReconfig		3064214	0					
ANR	3064768	MemberAccess	shared_port_endpoint . InitAndReconfig		3064214	0					
ANR	3064769	Identifier	shared_port_endpoint		3064214	0					
ANR	3064770	Identifier	InitAndReconfig		3064214	1					
ANR	3064771	ArgumentList			3064214	1					
ANR	3064772	IfStatement	if ( ! shared_port_endpoint . CreateListener ( ) )		3064214	1					
ANR	3064773	Condition	! shared_port_endpoint . CreateListener ( )	7471:6:228826:228863	3064214	0	True				
ANR	3064774	UnaryOperationExpression	! shared_port_endpoint . CreateListener ( )		3064214	0					
ANR	3064775	UnaryOperator	!		3064214	0					
ANR	3064776	CallExpression	shared_port_endpoint . CreateListener ( )		3064214	1					
ANR	3064777	Callee	shared_port_endpoint . CreateListener		3064214	0					
ANR	3064778	MemberAccess	shared_port_endpoint . CreateListener		3064214	0					
ANR	3064779	Identifier	shared_port_endpoint		3064214	0					
ANR	3064780	Identifier	CreateListener		3064214	1					
ANR	3064781	ArgumentList			3064214	1					
ANR	3064782	CompoundStatement		154:47:4912:4912	3064214	1					
ANR	3064783	GotoStatement	goto wrapup ;	7472:3:228872:228883	3064214	0	True				
ANR	3064784	Identifier	wrapup		3064214	0					
ANR	3064785	IfStatement	if ( ! shared_port_endpoint . ChownSocket ( priv ) )		3064214	2					
ANR	3064786	Condition	! shared_port_endpoint . ChownSocket ( priv )	7475:6:228896:228934	3064214	0	True				
ANR	3064787	UnaryOperationExpression	! shared_port_endpoint . ChownSocket ( priv )		3064214	0					
ANR	3064788	UnaryOperator	!		3064214	0					
ANR	3064789	CallExpression	shared_port_endpoint . ChownSocket ( priv )		3064214	1					
ANR	3064790	Callee	shared_port_endpoint . ChownSocket		3064214	0					
ANR	3064791	MemberAccess	shared_port_endpoint . ChownSocket		3064214	0					
ANR	3064792	Identifier	shared_port_endpoint		3064214	0					
ANR	3064793	Identifier	ChownSocket		3064214	1					
ANR	3064794	ArgumentList	priv		3064214	1					
ANR	3064795	Argument	priv		3064214	0					
ANR	3064796	Identifier	priv		3064214	0					
ANR	3064797	CompoundStatement		158:48:4983:4983	3064214	1					
ANR	3064798	ExpressionStatement	"dprintf ( D_FULLDEBUG | D_NETWORK , ""Created shared port endpoint for child process (%s)\\n"" , shared_port_endpoint . GetSharedPortID ( ) )"	7481:2:229083:229208	3064214	3	True				
ANR	3064799	CallExpression	"dprintf ( D_FULLDEBUG | D_NETWORK , ""Created shared port endpoint for child process (%s)\\n"" , shared_port_endpoint . GetSharedPortID ( ) )"		3064214	0					
ANR	3064800	Callee	dprintf		3064214	0					
ANR	3064801	Identifier	dprintf		3064214	0					
ANR	3064802	ArgumentList	D_FULLDEBUG | D_NETWORK		3064214	1					
ANR	3064803	Argument	D_FULLDEBUG | D_NETWORK		3064214	0					
ANR	3064804	InclusiveOrExpression	D_FULLDEBUG | D_NETWORK		3064214	0		|			
ANR	3064805	Identifier	D_FULLDEBUG		3064214	0					
ANR	3064806	Identifier	D_NETWORK		3064214	1					
ANR	3064807	Argument	"""Created shared port endpoint for child process (%s)\\n"""		3064214	1					
ANR	3064808	PrimaryExpression	"""Created shared port endpoint for child process (%s)\\n"""		3064214	0					
ANR	3064809	Argument	shared_port_endpoint . GetSharedPortID ( )		3064214	2					
ANR	3064810	CallExpression	shared_port_endpoint . GetSharedPortID ( )		3064214	0					
ANR	3064811	Callee	shared_port_endpoint . GetSharedPortID		3064214	0					
ANR	3064812	MemberAccess	shared_port_endpoint . GetSharedPortID		3064214	0					
ANR	3064813	Identifier	shared_port_endpoint		3064214	0					
ANR	3064814	Identifier	GetSharedPortID		3064214	1					
ANR	3064815	ArgumentList			3064214	1					
ANR	3064816	ExpressionStatement	"inheritbuf += "" SharedPort:"""	7482:2:229212:229240	3064214	4	True				
ANR	3064817	AssignmentExpression	"inheritbuf += "" SharedPort:"""		3064214	0		+=			
ANR	3064818	Identifier	inheritbuf		3064214	0					
ANR	3064819	PrimaryExpression	""" SharedPort:"""		3064214	1					
ANR	3064820	IdentifierDeclStatement	int fd = - 1 ;	7483:2:229244:229255	3064214	5	True				
ANR	3064821	IdentifierDecl	fd = - 1		3064214	0					
ANR	3064822	IdentifierDeclType	int		3064214	0					
ANR	3064823	Identifier	fd		3064214	1					
ANR	3064824	AssignmentExpression	fd = - 1		3064214	2		=			
ANR	3064825	Identifier	fd		3064214	0					
ANR	3064826	UnaryOperationExpression	- 1		3064214	1					
ANR	3064827	UnaryOperator	-		3064214	0					
ANR	3064828	PrimaryExpression	1		3064214	1					
ANR	3064829	ExpressionStatement	"shared_port_endpoint . serialize ( inheritbuf , fd )"	7484:2:229259:229304	3064214	6	True				
ANR	3064830	CallExpression	"shared_port_endpoint . serialize ( inheritbuf , fd )"		3064214	0					
ANR	3064831	Callee	shared_port_endpoint . serialize		3064214	0					
ANR	3064832	MemberAccess	shared_port_endpoint . serialize		3064214	0					
ANR	3064833	Identifier	shared_port_endpoint		3064214	0					
ANR	3064834	Identifier	serialize		3064214	1					
ANR	3064835	ArgumentList	inheritbuf		3064214	1					
ANR	3064836	Argument	inheritbuf		3064214	0					
ANR	3064837	Identifier	inheritbuf		3064214	0					
ANR	3064838	Argument	fd		3064214	1					
ANR	3064839	Identifier	fd		3064214	0					
ANR	3064840	ExpressionStatement	inheritFds [ numInheritFds ++ ] = fd	7485:8:229314:229346	3064214	7	True				
ANR	3064841	AssignmentExpression	inheritFds [ numInheritFds ++ ] = fd		3064214	0		=			
ANR	3064842	ArrayIndexing	inheritFds [ numInheritFds ++ ]		3064214	0					
ANR	3064843	Identifier	inheritFds		3064214	0					
ANR	3064844	PostIncDecOperationExpression	numInheritFds ++		3064214	1					
ANR	3064845	Identifier	numInheritFds		3064214	0					
ANR	3064846	IncDec	++		3064214	1					
ANR	3064847	Identifier	fd		3064214	1					
ANR	3064848	ExpressionStatement	inherit_handles = true	7486:2:229350:229372	3064214	8	True				
ANR	3064849	AssignmentExpression	inherit_handles = true		3064214	0		=			
ANR	3064850	Identifier	inherit_handles		3064214	0					
ANR	3064851	Identifier	true		3064214	1					
ANR	3064852	ElseStatement	else		3064214	0					
ANR	3064853	IfStatement	if ( want_command_port != FALSE )		3064214	0					
ANR	3064854	Condition	want_command_port != FALSE	7488:11:229388:229413	3064214	0	True				
ANR	3064855	EqualityExpression	want_command_port != FALSE		3064214	0		!=			
ANR	3064856	Identifier	want_command_port		3064214	0					
ANR	3064857	Identifier	FALSE		3064214	1					
ANR	3064858	CompoundStatement		173:2:5492:5538	3064214	1					
ANR	3064859	ExpressionStatement	inherit_handles = TRUE	7489:2:229421:229443	3064214	0	True				
ANR	3064860	AssignmentExpression	inherit_handles = TRUE		3064214	0		=			
ANR	3064861	Identifier	inherit_handles		3064214	0					
ANR	3064862	Identifier	TRUE		3064214	1					
ANR	3064863	IdentifierDeclStatement	SafeSock * ssock_ptr = want_udp ? & ssock : NULL ;	7490:2:229447:229493	3064214	1	True				
ANR	3064864	IdentifierDecl	* ssock_ptr = want_udp ? & ssock : NULL		3064214	0					
ANR	3064865	IdentifierDeclType	SafeSock *		3064214	0					
ANR	3064866	Identifier	ssock_ptr		3064214	1					
ANR	3064867	AssignmentExpression	* ssock_ptr = want_udp ? & ssock : NULL		3064214	2		=			
ANR	3064868	Identifier	ssock_ptr		3064214	0					
ANR	3064869	ConditionalExpression	want_udp ? & ssock : NULL		3064214	1					
ANR	3064870	Condition	want_udp		3064214	0					
ANR	3064871	Identifier	want_udp		3064214	0					
ANR	3064872	UnaryOperationExpression	& ssock		3064214	1					
ANR	3064873	UnaryOperator	&		3064214	0					
ANR	3064874	Identifier	ssock		3064214	1					
ANR	3064875	Identifier	NULL		3064214	2					
ANR	3064876	IfStatement	"if ( ! InitCommandSockets ( want_command_port , & rsock , ssock_ptr , false ) )"		3064214	2					
ANR	3064877	Condition	"! InitCommandSockets ( want_command_port , & rsock , ssock_ptr , false )"	7491:6:229501:229564	3064214	0	True				
ANR	3064878	UnaryOperationExpression	"! InitCommandSockets ( want_command_port , & rsock , ssock_ptr , false )"		3064214	0					
ANR	3064879	UnaryOperator	!		3064214	0					
ANR	3064880	CallExpression	"InitCommandSockets ( want_command_port , & rsock , ssock_ptr , false )"		3064214	1					
ANR	3064881	Callee	InitCommandSockets		3064214	0					
ANR	3064882	Identifier	InitCommandSockets		3064214	0					
ANR	3064883	ArgumentList	want_command_port		3064214	1					
ANR	3064884	Argument	want_command_port		3064214	0					
ANR	3064885	Identifier	want_command_port		3064214	0					
ANR	3064886	Argument	& rsock		3064214	1					
ANR	3064887	UnaryOperationExpression	& rsock		3064214	0					
ANR	3064888	UnaryOperator	&		3064214	0					
ANR	3064889	Identifier	rsock		3064214	1					
ANR	3064890	Argument	ssock_ptr		3064214	2					
ANR	3064891	Identifier	ssock_ptr		3064214	0					
ANR	3064892	Argument	false		3064214	3					
ANR	3064893	Identifier	false		3064214	0					
ANR	3064894	CompoundStatement		174:72:5612:5612	3064214	1					
ANR	3064895	GotoStatement	goto wrapup ;	7493:3:229634:229645	3064214	0	True				
ANR	3064896	Identifier	wrapup		3064214	0					
ANR	3064897	IfStatement	if ( ( ! rsock . set_inheritable ( TRUE ) ) || ( m_wants_dc_udp && ! ssock . set_inheritable ( TRUE ) ) )		3064214	3					
ANR	3064898	Condition	( ! rsock . set_inheritable ( TRUE ) ) || ( m_wants_dc_udp && ! ssock . set_inheritable ( TRUE ) )	7497:7:229723:229808	3064214	0	True				
ANR	3064899	OrExpression	( ! rsock . set_inheritable ( TRUE ) ) || ( m_wants_dc_udp && ! ssock . set_inheritable ( TRUE ) )		3064214	0		||			
ANR	3064900	UnaryOperationExpression	! rsock . set_inheritable ( TRUE )		3064214	0					
ANR	3064901	UnaryOperator	!		3064214	0					
ANR	3064902	CallExpression	rsock . set_inheritable ( TRUE )		3064214	1					
ANR	3064903	Callee	rsock . set_inheritable		3064214	0					
ANR	3064904	MemberAccess	rsock . set_inheritable		3064214	0					
ANR	3064905	Identifier	rsock		3064214	0					
ANR	3064906	Identifier	set_inheritable		3064214	1					
ANR	3064907	ArgumentList	TRUE		3064214	1					
ANR	3064908	Argument	TRUE		3064214	0					
ANR	3064909	Identifier	TRUE		3064214	0					
ANR	3064910	AndExpression	m_wants_dc_udp && ! ssock . set_inheritable ( TRUE )		3064214	1		&&			
ANR	3064911	Identifier	m_wants_dc_udp		3064214	0					
ANR	3064912	UnaryOperationExpression	! ssock . set_inheritable ( TRUE )		3064214	1					
ANR	3064913	UnaryOperator	!		3064214	0					
ANR	3064914	CallExpression	ssock . set_inheritable ( TRUE )		3064214	1					
ANR	3064915	Callee	ssock . set_inheritable		3064214	0					
ANR	3064916	MemberAccess	ssock . set_inheritable		3064214	0					
ANR	3064917	Identifier	ssock		3064214	0					
ANR	3064918	Identifier	set_inheritable		3064214	1					
ANR	3064919	ArgumentList	TRUE		3064214	1					
ANR	3064920	Argument	TRUE		3064214	0					
ANR	3064921	Identifier	TRUE		3064214	0					
ANR	3064922	CompoundStatement		181:55:5857:5857	3064214	1					
ANR	3064923	Statement	dprintf	7499:3:229817:229823	3064214	0	True				
ANR	3064924	Statement	(	7499:10:229824:229824	3064214	1	True				
ANR	3064925	Statement	D_ALWAYS	7499:11:229825:229832	3064214	2	True				
ANR	3064926	Statement	","	7499:19:229833:229833	3064214	3	True				
ANR	3064927	Statement	"""Create_Process:Failed to set command """	7499:20:229834:229872	3064214	4	True				
ANR	3064928	Statement	"""socks inheritable\\n"""	7500:5:229879:229899	3064214	5	True				
ANR	3064929	Statement	)	7500:26:229900:229900	3064214	6	True				
ANR	3064930	ExpressionStatement		7500:27:229901:229901	3064214	7	True				
ANR	3064931	GotoStatement	goto wrapup ;	7501:3:229906:229917	3064214	8	True				
ANR	3064932	Identifier	wrapup		3064214	0					
ANR	3064933	ExpressionStatement	"inheritbuf += "" """	7505:2:229987:230004	3064214	4	True				
ANR	3064934	AssignmentExpression	"inheritbuf += "" """		3064214	0		+=			
ANR	3064935	Identifier	inheritbuf		3064214	0					
ANR	3064936	PrimaryExpression	""" """		3064214	1					
ANR	3064937	ExpressionStatement	ptmp = rsock . serialize ( )	7506:2:230008:230032	3064214	5	True				
ANR	3064938	AssignmentExpression	ptmp = rsock . serialize ( )		3064214	0		=			
ANR	3064939	Identifier	ptmp		3064214	0					
ANR	3064940	CallExpression	rsock . serialize ( )		3064214	1					
ANR	3064941	Callee	rsock . serialize		3064214	0					
ANR	3064942	MemberAccess	rsock . serialize		3064214	0					
ANR	3064943	Identifier	rsock		3064214	0					
ANR	3064944	Identifier	serialize		3064214	1					
ANR	3064945	ArgumentList			3064214	1					
ANR	3064946	ExpressionStatement	inheritbuf += ptmp	7507:2:230036:230054	3064214	6	True				
ANR	3064947	AssignmentExpression	inheritbuf += ptmp		3064214	0		+=			
ANR	3064948	Identifier	inheritbuf		3064214	0					
ANR	3064949	Identifier	ptmp		3064214	1					
ANR	3064950	Statement	delete	7508:2:230058:230063	3064214	7	True				
ANR	3064951	Statement	[	7508:9:230065:230065	3064214	8	True				
ANR	3064952	Statement	]	7508:10:230066:230066	3064214	9	True				
ANR	3064953	ExpressionStatement	ptmp	7508:11:230067:230071	3064214	10	True				
ANR	3064954	Identifier	ptmp		3064214	0					
ANR	3064955	IfStatement	if ( want_udp )		3064214	11					
ANR	3064956	Condition	want_udp	7509:6:230079:230086	3064214	0	True				
ANR	3064957	Identifier	want_udp		3064214	0					
ANR	3064958	CompoundStatement		192:16:6134:6134	3064214	1					
ANR	3064959	ExpressionStatement	"inheritbuf += "" """	7510:3:230094:230111	3064214	0	True				
ANR	3064960	AssignmentExpression	"inheritbuf += "" """		3064214	0		+=			
ANR	3064961	Identifier	inheritbuf		3064214	0					
ANR	3064962	PrimaryExpression	""" """		3064214	1					
ANR	3064963	ExpressionStatement	ptmp = ssock . serialize ( )	7511:3:230116:230140	3064214	1	True				
ANR	3064964	AssignmentExpression	ptmp = ssock . serialize ( )		3064214	0		=			
ANR	3064965	Identifier	ptmp		3064214	0					
ANR	3064966	CallExpression	ssock . serialize ( )		3064214	1					
ANR	3064967	Callee	ssock . serialize		3064214	0					
ANR	3064968	MemberAccess	ssock . serialize		3064214	0					
ANR	3064969	Identifier	ssock		3064214	0					
ANR	3064970	Identifier	serialize		3064214	1					
ANR	3064971	ArgumentList			3064214	1					
ANR	3064972	ExpressionStatement	inheritbuf += ptmp	7512:3:230145:230163	3064214	2	True				
ANR	3064973	AssignmentExpression	inheritbuf += ptmp		3064214	0		+=			
ANR	3064974	Identifier	inheritbuf		3064214	0					
ANR	3064975	Identifier	ptmp		3064214	1					
ANR	3064976	Statement	delete	7513:3:230168:230173	3064214	3	True				
ANR	3064977	Statement	[	7513:10:230175:230175	3064214	4	True				
ANR	3064978	Statement	]	7513:11:230176:230176	3064214	5	True				
ANR	3064979	ExpressionStatement	ptmp	7513:12:230177:230181	3064214	6	True				
ANR	3064980	Identifier	ptmp		3064214	0					
ANR	3064981	ExpressionStatement	inheritFds [ numInheritFds ++ ] = rsock . get_file_desc ( )	7517:8:230266:230317	3064214	12	True				
ANR	3064982	AssignmentExpression	inheritFds [ numInheritFds ++ ] = rsock . get_file_desc ( )		3064214	0		=			
ANR	3064983	ArrayIndexing	inheritFds [ numInheritFds ++ ]		3064214	0					
ANR	3064984	Identifier	inheritFds		3064214	0					
ANR	3064985	PostIncDecOperationExpression	numInheritFds ++		3064214	1					
ANR	3064986	Identifier	numInheritFds		3064214	0					
ANR	3064987	IncDec	++		3064214	1					
ANR	3064988	CallExpression	rsock . get_file_desc ( )		3064214	1					
ANR	3064989	Callee	rsock . get_file_desc		3064214	0					
ANR	3064990	MemberAccess	rsock . get_file_desc		3064214	0					
ANR	3064991	Identifier	rsock		3064214	0					
ANR	3064992	Identifier	get_file_desc		3064214	1					
ANR	3064993	ArgumentList			3064214	1					
ANR	3064994	IfStatement	if ( want_udp )		3064214	13					
ANR	3064995	Condition	want_udp	7518:6:230325:230332	3064214	0	True				
ANR	3064996	Identifier	want_udp		3064214	0					
ANR	3064997	CompoundStatement		201:16:6380:6380	3064214	1					
ANR	3064998	ExpressionStatement	inheritFds [ numInheritFds ++ ] = ssock . get_file_desc ( )	7519:3:230340:230391	3064214	0	True				
ANR	3064999	AssignmentExpression	inheritFds [ numInheritFds ++ ] = ssock . get_file_desc ( )		3064214	0		=			
ANR	3065000	ArrayIndexing	inheritFds [ numInheritFds ++ ]		3064214	0					
ANR	3065001	Identifier	inheritFds		3064214	0					
ANR	3065002	PostIncDecOperationExpression	numInheritFds ++		3064214	1					
ANR	3065003	Identifier	numInheritFds		3064214	0					
ANR	3065004	IncDec	++		3064214	1					
ANR	3065005	CallExpression	ssock . get_file_desc ( )		3064214	1					
ANR	3065006	Callee	ssock . get_file_desc		3064214	0					
ANR	3065007	MemberAccess	ssock . get_file_desc		3064214	0					
ANR	3065008	Identifier	ssock		3064214	0					
ANR	3065009	Identifier	get_file_desc		3064214	1					
ANR	3065010	ArgumentList			3064214	1					
ANR	3065011	ExpressionStatement	"inheritbuf += "" 0"""	7522:1:230401:230419	3064214	58	True				
ANR	3065012	AssignmentExpression	"inheritbuf += "" 0"""		3064214	0		+=			
ANR	3065013	Identifier	inheritbuf		3064214	0					
ANR	3065014	PrimaryExpression	""" 0"""		3064214	1					
ANR	3065015	IfStatement	if ( want_command_port != FALSE )		3064214	59					
ANR	3065016	Condition	want_command_port != FALSE	7537:4:231065:231090	3064214	0	True				
ANR	3065017	EqualityExpression	want_command_port != FALSE		3064214	0		!=			
ANR	3065018	Identifier	want_command_port		3064214	0					
ANR	3065019	Identifier	FALSE		3064214	1					
ANR	3065020	CompoundStatement		264:2:8482:8562	3064214	1					
ANR	3065021	IdentifierDeclStatement	char * c_session_id = Condor_Crypt_Base :: randomHexKey ( ) ;	7539:2:231098:231152	3064214	0	True				
ANR	3065022	IdentifierDecl	* c_session_id = Condor_Crypt_Base :: randomHexKey ( )		3064214	0					
ANR	3065023	IdentifierDeclType	char *		3064214	0					
ANR	3065024	Identifier	c_session_id		3064214	1					
ANR	3065025	AssignmentExpression	* c_session_id = Condor_Crypt_Base :: randomHexKey ( )		3064214	2		=			
ANR	3065026	Identifier	c_session_id		3064214	0					
ANR	3065027	CallExpression	Condor_Crypt_Base :: randomHexKey ( )		3064214	1					
ANR	3065028	Callee	Condor_Crypt_Base :: randomHexKey		3064214	0					
ANR	3065029	Identifier	Condor_Crypt_Base :: randomHexKey		3064214	0					
ANR	3065030	ArgumentList			3064214	1					
ANR	3065031	IdentifierDeclStatement	char * c_session_key = Condor_Crypt_Base :: randomHexKey ( ) ;	7540:2:231156:231211	3064214	1	True				
ANR	3065032	IdentifierDecl	* c_session_key = Condor_Crypt_Base :: randomHexKey ( )		3064214	0					
ANR	3065033	IdentifierDeclType	char *		3064214	0					
ANR	3065034	Identifier	c_session_key		3064214	1					
ANR	3065035	AssignmentExpression	* c_session_key = Condor_Crypt_Base :: randomHexKey ( )		3064214	2		=			
ANR	3065036	Identifier	c_session_key		3064214	0					
ANR	3065037	CallExpression	Condor_Crypt_Base :: randomHexKey ( )		3064214	1					
ANR	3065038	Callee	Condor_Crypt_Base :: randomHexKey		3064214	0					
ANR	3065039	Identifier	Condor_Crypt_Base :: randomHexKey		3064214	0					
ANR	3065040	ArgumentList			3064214	1					
ANR	3065041	ExpressionStatement	session_id . assign ( c_session_id )	7542:2:231216:231247	3064214	2	True				
ANR	3065042	CallExpression	session_id . assign ( c_session_id )		3064214	0					
ANR	3065043	Callee	session_id . assign		3064214	0					
ANR	3065044	MemberAccess	session_id . assign		3064214	0					
ANR	3065045	Identifier	session_id		3064214	0					
ANR	3065046	Identifier	assign		3064214	1					
ANR	3065047	ArgumentList	c_session_id		3064214	1					
ANR	3065048	Argument	c_session_id		3064214	0					
ANR	3065049	Identifier	c_session_id		3064214	0					
ANR	3065050	IdentifierDeclStatement	std :: string session_key ( c_session_key ) ;	7543:2:231251:231289	3064214	3	True				
ANR	3065051	IdentifierDecl	session_key ( c_session_key )		3064214	0					
ANR	3065052	IdentifierDeclType	std :: string		3064214	0					
ANR	3065053	Identifier	session_key		3064214	1					
ANR	3065054	Identifier	c_session_key		3064214	2					
ANR	3065055	ExpressionStatement	free ( c_session_id )	7545:2:231294:231312	3064214	4	True				
ANR	3065056	CallExpression	free ( c_session_id )		3064214	0					
ANR	3065057	Callee	free		3064214	0					
ANR	3065058	Identifier	free		3064214	0					
ANR	3065059	ArgumentList	c_session_id		3064214	1					
ANR	3065060	Argument	c_session_id		3064214	0					
ANR	3065061	Identifier	c_session_id		3064214	0					
ANR	3065062	ExpressionStatement	free ( c_session_key )	7546:2:231316:231335	3064214	5	True				
ANR	3065063	CallExpression	free ( c_session_key )		3064214	0					
ANR	3065064	Callee	free		3064214	0					
ANR	3065065	Identifier	free		3064214	0					
ANR	3065066	ArgumentList	c_session_key		3064214	1					
ANR	3065067	Argument	c_session_key		3064214	0					
ANR	3065068	Identifier	c_session_key		3064214	0					
ANR	3065069	IdentifierDeclStatement	char const * session_id_c_str = session_id . c_str ( ) ;	7555:2:231757:231806	3064214	6	True				
ANR	3065070	IdentifierDecl	* session_id_c_str = session_id . c_str ( )		3064214	0					
ANR	3065071	IdentifierDeclType	char const *		3064214	0					
ANR	3065072	Identifier	session_id_c_str		3064214	1					
ANR	3065073	AssignmentExpression	* session_id_c_str = session_id . c_str ( )		3064214	2		=			
ANR	3065074	Identifier	session_id_c_str		3064214	0					
ANR	3065075	CallExpression	session_id . c_str ( )		3064214	1					
ANR	3065076	Callee	session_id . c_str		3064214	0					
ANR	3065077	MemberAccess	session_id . c_str		3064214	0					
ANR	3065078	Identifier	session_id		3064214	0					
ANR	3065079	Identifier	c_str		3064214	1					
ANR	3065080	ArgumentList			3064214	1					
ANR	3065081	IdentifierDeclStatement	char const * session_key_c_str = session_key . c_str ( ) ;	7556:2:231810:231861	3064214	7	True				
ANR	3065082	IdentifierDecl	* session_key_c_str = session_key . c_str ( )		3064214	0					
ANR	3065083	IdentifierDeclType	char const *		3064214	0					
ANR	3065084	Identifier	session_key_c_str		3064214	1					
ANR	3065085	AssignmentExpression	* session_key_c_str = session_key . c_str ( )		3064214	2		=			
ANR	3065086	Identifier	session_key_c_str		3064214	0					
ANR	3065087	CallExpression	session_key . c_str ( )		3064214	1					
ANR	3065088	Callee	session_key . c_str		3064214	0					
ANR	3065089	MemberAccess	session_key . c_str		3064214	0					
ANR	3065090	Identifier	session_key		3064214	0					
ANR	3065091	Identifier	c_str		3064214	1					
ANR	3065092	ArgumentList			3064214	1					
ANR	3065093	IdentifierDeclStatement	"bool rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , session_id_c_str , session_key_c_str , NULL , CONDOR_CHILD_FQU , NULL , 0 ) ;"	7558:2:231866:232023	3064214	8	True				
ANR	3065094	IdentifierDecl	"rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , session_id_c_str , session_key_c_str , NULL , CONDOR_CHILD_FQU , NULL , 0 )"		3064214	0					
ANR	3065095	IdentifierDeclType	bool		3064214	0					
ANR	3065096	Identifier	rc		3064214	1					
ANR	3065097	AssignmentExpression	"rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , session_id_c_str , session_key_c_str , NULL , CONDOR_CHILD_FQU , NULL , 0 )"		3064214	2		=			
ANR	3065098	Identifier	rc		3064214	0					
ANR	3065099	CallExpression	"getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , session_id_c_str , session_key_c_str , NULL , CONDOR_CHILD_FQU , NULL , 0 )"		3064214	1					
ANR	3065100	Callee	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		3064214	0					
ANR	3065101	PtrMemberAccess	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		3064214	0					
ANR	3065102	CallExpression	getSecMan ( )		3064214	0					
ANR	3065103	Callee	getSecMan		3064214	0					
ANR	3065104	Identifier	getSecMan		3064214	0					
ANR	3065105	ArgumentList			3064214	1					
ANR	3065106	Identifier	CreateNonNegotiatedSecuritySession		3064214	1					
ANR	3065107	ArgumentList	DAEMON		3064214	1					
ANR	3065108	Argument	DAEMON		3064214	0					
ANR	3065109	Identifier	DAEMON		3064214	0					
ANR	3065110	Argument	session_id_c_str		3064214	1					
ANR	3065111	Identifier	session_id_c_str		3064214	0					
ANR	3065112	Argument	session_key_c_str		3064214	2					
ANR	3065113	Identifier	session_key_c_str		3064214	0					
ANR	3065114	Argument	NULL		3064214	3					
ANR	3065115	Identifier	NULL		3064214	0					
ANR	3065116	Argument	CONDOR_CHILD_FQU		3064214	4					
ANR	3065117	Identifier	CONDOR_CHILD_FQU		3064214	0					
ANR	3065118	Argument	NULL		3064214	5					
ANR	3065119	Identifier	NULL		3064214	0					
ANR	3065120	Argument	0		3064214	6					
ANR	3065121	PrimaryExpression	0		3064214	0					
ANR	3065122	IfStatement	if ( ! rc )		3064214	9					
ANR	3065123	Condition	! rc	7567:5:232031:232033	3064214	0	True				
ANR	3065124	UnaryOperationExpression	! rc		3064214	0					
ANR	3065125	UnaryOperator	!		3064214	0					
ANR	3065126	Identifier	rc		3064214	1					
ANR	3065127	CompoundStatement		251:2:8083:8083	3064214	1					
ANR	3065128	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Create_Process failed to create security session for child daemon.\\n"" )"	7569:3:232043:232139	3064214	0	True				
ANR	3065129	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Create_Process failed to create security session for child daemon.\\n"" )"		3064214	0					
ANR	3065130	Callee	dprintf		3064214	0					
ANR	3065131	Identifier	dprintf		3064214	0					
ANR	3065132	ArgumentList	D_ALWAYS		3064214	1					
ANR	3065133	Argument	D_ALWAYS		3064214	0					
ANR	3065134	Identifier	D_ALWAYS		3064214	0					
ANR	3065135	Argument	"""ERROR: Create_Process failed to create security session for child daemon.\\n"""		3064214	1					
ANR	3065136	PrimaryExpression	"""ERROR: Create_Process failed to create security session for child daemon.\\n"""		3064214	0					
ANR	3065137	GotoStatement	goto wrapup ;	7570:3:232144:232155	3064214	1	True				
ANR	3065138	Identifier	wrapup		3064214	0					
ANR	3065139	ExpressionStatement	"privateinheritbuf += "" SessionKey:"""	7572:2:232163:232198	3064214	10	True				
ANR	3065140	AssignmentExpression	"privateinheritbuf += "" SessionKey:"""		3064214	0		+=			
ANR	3065141	Identifier	privateinheritbuf		3064214	0					
ANR	3065142	PrimaryExpression	""" SessionKey:"""		3064214	1					
ANR	3065143	IdentifierDeclStatement	MyString session_info ;	7574:2:232203:232224	3064214	11	True				
ANR	3065144	IdentifierDecl	session_info		3064214	0					
ANR	3065145	IdentifierDeclType	MyString		3064214	0					
ANR	3065146	Identifier	session_info		3064214	1					
ANR	3065147	ExpressionStatement	"rc = getSecMan ( ) -> ExportSecSessionInfo ( session_id_c_str , session_info )"	7575:2:232228:232298	3064214	12	True				
ANR	3065148	AssignmentExpression	"rc = getSecMan ( ) -> ExportSecSessionInfo ( session_id_c_str , session_info )"		3064214	0		=			
ANR	3065149	Identifier	rc		3064214	0					
ANR	3065150	CallExpression	"getSecMan ( ) -> ExportSecSessionInfo ( session_id_c_str , session_info )"		3064214	1					
ANR	3065151	Callee	getSecMan ( ) -> ExportSecSessionInfo		3064214	0					
ANR	3065152	PtrMemberAccess	getSecMan ( ) -> ExportSecSessionInfo		3064214	0					
ANR	3065153	CallExpression	getSecMan ( )		3064214	0					
ANR	3065154	Callee	getSecMan		3064214	0					
ANR	3065155	Identifier	getSecMan		3064214	0					
ANR	3065156	ArgumentList			3064214	1					
ANR	3065157	Identifier	ExportSecSessionInfo		3064214	1					
ANR	3065158	ArgumentList	session_id_c_str		3064214	1					
ANR	3065159	Argument	session_id_c_str		3064214	0					
ANR	3065160	Identifier	session_id_c_str		3064214	0					
ANR	3065161	Argument	session_info		3064214	1					
ANR	3065162	Identifier	session_info		3064214	0					
ANR	3065163	IfStatement	if ( ! rc )		3064214	13					
ANR	3065164	Condition	! rc	7576:5:232305:232307	3064214	0	True				
ANR	3065165	UnaryOperationExpression	! rc		3064214	0					
ANR	3065166	UnaryOperator	!		3064214	0					
ANR	3065167	Identifier	rc		3064214	1					
ANR	3065168	CompoundStatement		260:2:8357:8357	3064214	1					
ANR	3065169	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Create_Process failed to export security session for child daemon.\\n"" )"	7578:3:232317:232413	3064214	0	True				
ANR	3065170	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Create_Process failed to export security session for child daemon.\\n"" )"		3064214	0					
ANR	3065171	Callee	dprintf		3064214	0					
ANR	3065172	Identifier	dprintf		3064214	0					
ANR	3065173	ArgumentList	D_ALWAYS		3064214	1					
ANR	3065174	Argument	D_ALWAYS		3064214	0					
ANR	3065175	Identifier	D_ALWAYS		3064214	0					
ANR	3065176	Argument	"""ERROR: Create_Process failed to export security session for child daemon.\\n"""		3064214	1					
ANR	3065177	PrimaryExpression	"""ERROR: Create_Process failed to export security session for child daemon.\\n"""		3064214	0					
ANR	3065178	GotoStatement	goto wrapup ;	7579:3:232418:232429	3064214	1	True				
ANR	3065179	Identifier	wrapup		3064214	0					
ANR	3065180	IdentifierDeclStatement	"ClaimIdParser claimId ( session_id_c_str , session_info . Value ( ) , session_key_c_str ) ;"	7581:2:232437:232517	3064214	14	True				
ANR	3065181	IdentifierDecl	"claimId ( session_id_c_str , session_info . Value ( ) , session_key_c_str )"		3064214	0					
ANR	3065182	IdentifierDeclType	ClaimIdParser		3064214	0					
ANR	3065183	Identifier	claimId		3064214	1					
ANR	3065184	Expression	"session_id_c_str , session_info . Value ( ) , session_key_c_str"		3064214	2					
ANR	3065185	Identifier	session_id_c_str		3064214	0					
ANR	3065186	Expression	"session_info . Value ( ) , session_key_c_str"		3064214	1					
ANR	3065187	CallExpression	session_info . Value ( )		3064214	0					
ANR	3065188	Callee	session_info . Value		3064214	0					
ANR	3065189	MemberAccess	session_info . Value		3064214	0					
ANR	3065190	Identifier	session_info		3064214	0					
ANR	3065191	Identifier	Value		3064214	1					
ANR	3065192	ArgumentList			3064214	1					
ANR	3065193	Identifier	session_key_c_str		3064214	1					
ANR	3065194	ExpressionStatement	privateinheritbuf += claimId . claimId ( )	7582:2:232521:232559	3064214	15	True				
ANR	3065195	AssignmentExpression	privateinheritbuf += claimId . claimId ( )		3064214	0		+=			
ANR	3065196	Identifier	privateinheritbuf		3064214	0					
ANR	3065197	CallExpression	claimId . claimId ( )		3064214	1					
ANR	3065198	Callee	claimId . claimId		3064214	0					
ANR	3065199	MemberAccess	claimId . claimId		3064214	0					
ANR	3065200	Identifier	claimId		3064214	0					
ANR	3065201	Identifier	claimId		3064214	1					
ANR	3065202	ArgumentList			3064214	1					
ANR	3065203	IfStatement	if ( fd_inherit_list != NULL )		3064214	60					
ANR	3065204	Condition	fd_inherit_list != NULL	7588:5:232759:232781	3064214	0	True				
ANR	3065205	EqualityExpression	fd_inherit_list != NULL		3064214	0		!=			
ANR	3065206	Identifier	fd_inherit_list		3064214	0					
ANR	3065207	Identifier	NULL		3064214	1					
ANR	3065208	CompoundStatement		271:30:8829:8829	3064214	1					
ANR	3065209	Statement	EXCEPT	7590:2:232807:232812	3064214	0	True				
ANR	3065210	Statement	(	7590:8:232813:232813	3064214	1	True				
ANR	3065211	Statement	"""Create_Process: fd_inherit_list specified, """	7590:9:232814:232858	3064214	2	True				
ANR	3065212	Statement	"""but not implemented on Windows: programmer error"""	7591:13:232873:232922	3064214	3	True				
ANR	3065213	Statement	)	7591:63:232923:232923	3064214	4	True				
ANR	3065214	ExpressionStatement		7591:64:232924:232924	3064214	5	True				
ANR	3065215	ExpressionStatement	"create_id ( & time_of_fork , & mii )"	7605:1:233319:233349	3064214	61	True				
ANR	3065216	CallExpression	"create_id ( & time_of_fork , & mii )"		3064214	0					
ANR	3065217	Callee	create_id		3064214	0					
ANR	3065218	Identifier	create_id		3064214	0					
ANR	3065219	ArgumentList	& time_of_fork		3064214	1					
ANR	3065220	Argument	& time_of_fork		3064214	0					
ANR	3065221	UnaryOperationExpression	& time_of_fork		3064214	0					
ANR	3065222	UnaryOperator	&		3064214	0					
ANR	3065223	Identifier	time_of_fork		3064214	1					
ANR	3065224	Argument	& mii		3064214	1					
ANR	3065225	UnaryOperationExpression	& mii		3064214	0					
ANR	3065226	UnaryOperator	&		3064214	0					
ANR	3065227	Identifier	mii		3064214	1					
ANR	3065228	IfStatement	if ( ( family_info != NULL ) && ( m_proc_family == NULL ) )		3064214	62					
ANR	3065229	Condition	( family_info != NULL ) && ( m_proc_family == NULL )	7612:5:233585:233632	3064214	0	True				
ANR	3065230	AndExpression	( family_info != NULL ) && ( m_proc_family == NULL )		3064214	0		&&			
ANR	3065231	EqualityExpression	family_info != NULL		3064214	0		!=			
ANR	3065232	Identifier	family_info		3064214	0					
ANR	3065233	Identifier	NULL		3064214	1					
ANR	3065234	EqualityExpression	m_proc_family == NULL		3064214	1		==			
ANR	3065235	Identifier	m_proc_family		3064214	0					
ANR	3065236	Identifier	NULL		3064214	1					
ANR	3065237	CompoundStatement		295:55:9680:9680	3064214	1					
ANR	3065238	ExpressionStatement	m_proc_family = ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )	7613:2:233639:233712	3064214	0	True				
ANR	3065239	AssignmentExpression	m_proc_family = ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )		3064214	0		=			
ANR	3065240	Identifier	m_proc_family		3064214	0					
ANR	3065241	CallExpression	ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )		3064214	1					
ANR	3065242	Callee	ProcFamilyInterface :: create		3064214	0					
ANR	3065243	Identifier	ProcFamilyInterface :: create		3064214	0					
ANR	3065244	ArgumentList	get_mySubSystem ( ) -> getName ( )		3064214	1					
ANR	3065245	Argument	get_mySubSystem ( ) -> getName ( )		3064214	0					
ANR	3065246	CallExpression	get_mySubSystem ( ) -> getName ( )		3064214	0					
ANR	3065247	Callee	get_mySubSystem ( ) -> getName		3064214	0					
ANR	3065248	PtrMemberAccess	get_mySubSystem ( ) -> getName		3064214	0					
ANR	3065249	CallExpression	get_mySubSystem ( )		3064214	0					
ANR	3065250	Callee	get_mySubSystem		3064214	0					
ANR	3065251	Identifier	get_mySubSystem		3064214	0					
ANR	3065252	ArgumentList			3064214	1					
ANR	3065253	Identifier	getName		3064214	1					
ANR	3065254	ArgumentList			3064214	1					
ANR	3065255	ExpressionStatement	ASSERT ( m_proc_family )	7614:2:233716:233737	3064214	1	True				
ANR	3065256	CallExpression	ASSERT ( m_proc_family )		3064214	0					
ANR	3065257	Callee	ASSERT		3064214	0					
ANR	3065258	Identifier	ASSERT		3064214	0					
ANR	3065259	ArgumentList	m_proc_family		3064214	1					
ANR	3065260	Argument	m_proc_family		3064214	0					
ANR	3065261	Identifier	m_proc_family		3064214	0					
ANR	3065262	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		3064214	63					
ANR	3065263	ForInit	i = 0 ;	7620:6:233940:233943	3064214	0	True				
ANR	3065264	AssignmentExpression	i = 0		3064214	0		=			
ANR	3065265	Identifier	i		3064214	0					
ANR	3065266	PrimaryExpression	0		3064214	1					
ANR	3065267	Condition	i <= 2	7620:11:233945:233948	3064214	1	True				
ANR	3065268	RelationalExpression	i <= 2		3064214	0		<=			
ANR	3065269	Identifier	i		3064214	0					
ANR	3065270	PrimaryExpression	2		3064214	1					
ANR	3065271	PostIncDecOperationExpression	i ++	7620:17:233951:233953	3064214	2	True				
ANR	3065272	Identifier	i		3064214	0					
ANR	3065273	IncDec	++		3064214	1					
ANR	3065274	CompoundStatement		303:22:10001:10001	3064214	3					
ANR	3065275	IfStatement	if ( std && std [ i ] == DC_STD_FD_PIPE )		3064214	0					
ANR	3065276	Condition	std && std [ i ] == DC_STD_FD_PIPE	7621:6:233964:233994	3064214	0	True				
ANR	3065277	AndExpression	std && std [ i ] == DC_STD_FD_PIPE		3064214	0		&&			
ANR	3065278	Identifier	std		3064214	0					
ANR	3065279	EqualityExpression	std [ i ] == DC_STD_FD_PIPE		3064214	1		==			
ANR	3065280	ArrayIndexing	std [ i ]		3064214	0					
ANR	3065281	Identifier	std		3064214	0					
ANR	3065282	Identifier	i		3064214	1					
ANR	3065283	Identifier	DC_STD_FD_PIPE		3064214	1					
ANR	3065284	CompoundStatement		304:39:10042:10042	3064214	1					
ANR	3065285	IfStatement	if ( i == 0 )		3064214	0					
ANR	3065286	Condition	i == 0	7622:7:234006:234011	3064214	0	True				
ANR	3065287	EqualityExpression	i == 0		3064214	0		==			
ANR	3065288	Identifier	i		3064214	0					
ANR	3065289	PrimaryExpression	0		3064214	1					
ANR	3065290	CompoundStatement		305:15:10059:10059	3064214	1					
ANR	3065291	IfStatement	"if ( ! Create_Pipe ( dc_pipe_fds [ i ] , false , false , false , true ) )"		3064214	0					
ANR	3065292	Condition	"! Create_Pipe ( dc_pipe_fds [ i ] , false , false , false , true )"	7623:8:234024:234078	3064214	0	True				
ANR	3065293	UnaryOperationExpression	"! Create_Pipe ( dc_pipe_fds [ i ] , false , false , false , true )"		3064214	0					
ANR	3065294	UnaryOperator	!		3064214	0					
ANR	3065295	CallExpression	"Create_Pipe ( dc_pipe_fds [ i ] , false , false , false , true )"		3064214	1					
ANR	3065296	Callee	Create_Pipe		3064214	0					
ANR	3065297	Identifier	Create_Pipe		3064214	0					
ANR	3065298	ArgumentList	dc_pipe_fds [ i ]		3064214	1					
ANR	3065299	Argument	dc_pipe_fds [ i ]		3064214	0					
ANR	3065300	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3065301	Identifier	dc_pipe_fds		3064214	0					
ANR	3065302	Identifier	i		3064214	1					
ANR	3065303	Argument	false		3064214	1					
ANR	3065304	Identifier	false		3064214	0					
ANR	3065305	Argument	false		3064214	2					
ANR	3065306	Identifier	false		3064214	0					
ANR	3065307	Argument	false		3064214	3					
ANR	3065308	Identifier	false		3064214	0					
ANR	3065309	Argument	true		3064214	4					
ANR	3065310	Identifier	true		3064214	0					
ANR	3065311	CompoundStatement		306:65:10126:10126	3064214	1					
ANR	3065312	Statement	dprintf	7624:5:234088:234094	3064214	0	True				
ANR	3065313	Statement	(	7624:12:234095:234095	3064214	1	True				
ANR	3065314	Statement	D_ALWAYS	7624:13:234096:234103	3064214	2	True				
ANR	3065315	Statement	|	7624:21:234104:234104	3064214	3	True				
ANR	3065316	Statement	D_FAILURE	7624:22:234105:234113	3064214	4	True				
ANR	3065317	Statement	","	7624:31:234114:234114	3064214	5	True				
ANR	3065318	Statement	"""ERROR: Create_Process: """	7624:33:234116:234140	3064214	6	True				
ANR	3065319	Statement	"""Can't create DC pipe for stdin.\\n"""	7625:7:234149:234183	3064214	7	True				
ANR	3065320	Statement	)	7625:42:234184:234184	3064214	8	True				
ANR	3065321	ExpressionStatement		7625:43:234185:234185	3064214	9	True				
ANR	3065322	GotoStatement	goto wrapup ;	7626:5:234192:234203	3064214	10	True				
ANR	3065323	Identifier	wrapup		3064214	0					
ANR	3065324	ExpressionStatement	std [ i ] = dc_pipe_fds [ i ] [ 0 ]	7629:4:234271:234297	3064214	1	True				
ANR	3065325	AssignmentExpression	std [ i ] = dc_pipe_fds [ i ] [ 0 ]		3064214	0		=			
ANR	3065326	ArrayIndexing	std [ i ]		3064214	0					
ANR	3065327	Identifier	std		3064214	0					
ANR	3065328	Identifier	i		3064214	1					
ANR	3065329	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		3064214	1					
ANR	3065330	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3065331	Identifier	dc_pipe_fds		3064214	0					
ANR	3065332	Identifier	i		3064214	1					
ANR	3065333	PrimaryExpression	0		3064214	1					
ANR	3065334	ElseStatement	else		3064214	0					
ANR	3065335	CompoundStatement		314:8:10357:10357	3064214	0					
ANR	3065336	IfStatement	"if ( ! Create_Pipe ( dc_pipe_fds [ i ] , true , false , true ) )"		3064214	0					
ANR	3065337	Condition	"! Create_Pipe ( dc_pipe_fds [ i ] , true , false , true )"	7632:8:234322:234368	3064214	0	True				
ANR	3065338	UnaryOperationExpression	"! Create_Pipe ( dc_pipe_fds [ i ] , true , false , true )"		3064214	0					
ANR	3065339	UnaryOperator	!		3064214	0					
ANR	3065340	CallExpression	"Create_Pipe ( dc_pipe_fds [ i ] , true , false , true )"		3064214	1					
ANR	3065341	Callee	Create_Pipe		3064214	0					
ANR	3065342	Identifier	Create_Pipe		3064214	0					
ANR	3065343	ArgumentList	dc_pipe_fds [ i ]		3064214	1					
ANR	3065344	Argument	dc_pipe_fds [ i ]		3064214	0					
ANR	3065345	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3065346	Identifier	dc_pipe_fds		3064214	0					
ANR	3065347	Identifier	i		3064214	1					
ANR	3065348	Argument	true		3064214	1					
ANR	3065349	Identifier	true		3064214	0					
ANR	3065350	Argument	false		3064214	2					
ANR	3065351	Identifier	false		3064214	0					
ANR	3065352	Argument	true		3064214	3					
ANR	3065353	Identifier	true		3064214	0					
ANR	3065354	CompoundStatement		315:57:10416:10416	3064214	1					
ANR	3065355	Statement	dprintf	7633:5:234378:234384	3064214	0	True				
ANR	3065356	Statement	(	7633:12:234385:234385	3064214	1	True				
ANR	3065357	Statement	D_ALWAYS	7633:13:234386:234393	3064214	2	True				
ANR	3065358	Statement	|	7633:21:234394:234394	3064214	3	True				
ANR	3065359	Statement	D_FAILURE	7633:22:234395:234403	3064214	4	True				
ANR	3065360	Statement	","	7633:31:234404:234404	3064214	5	True				
ANR	3065361	Statement	"""ERROR: Create_Process: """	7633:33:234406:234430	3064214	6	True				
ANR	3065362	Statement	"""Can't create DC pipe for %s.\\n"""	7634:7:234439:234470	3064214	7	True				
ANR	3065363	Statement	","	7634:39:234471:234471	3064214	8	True				
ANR	3065364	Statement	i	7635:7:234480:234480	3064214	9	True				
ANR	3065365	Statement	==	7635:9:234482:234483	3064214	10	True				
ANR	3065366	Statement	1	7635:12:234485:234485	3064214	11	True				
ANR	3065367	Statement	?	7635:14:234487:234487	3064214	12	True				
ANR	3065368	Statement	"""stdout"""	7635:16:234489:234496	3064214	13	True				
ANR	3065369	Statement	:	7635:25:234498:234498	3064214	14	True				
ANR	3065370	Statement	"""stderr"""	7635:27:234500:234507	3064214	15	True				
ANR	3065371	Statement	)	7635:35:234508:234508	3064214	16	True				
ANR	3065372	ExpressionStatement		7635:36:234509:234509	3064214	17	True				
ANR	3065373	GotoStatement	goto wrapup ;	7636:5:234516:234527	3064214	18	True				
ANR	3065374	Identifier	wrapup		3064214	0					
ANR	3065375	ExpressionStatement	std [ i ] = dc_pipe_fds [ i ] [ 1 ]	7639:4:234596:234622	3064214	1	True				
ANR	3065376	AssignmentExpression	std [ i ] = dc_pipe_fds [ i ] [ 1 ]		3064214	0		=			
ANR	3065377	ArrayIndexing	std [ i ]		3064214	0					
ANR	3065378	Identifier	std		3064214	0					
ANR	3065379	Identifier	i		3064214	1					
ANR	3065380	ArrayIndexing	dc_pipe_fds [ i ] [ 1 ]		3064214	1					
ANR	3065381	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3065382	Identifier	dc_pipe_fds		3064214	0					
ANR	3065383	Identifier	i		3064214	1					
ANR	3065384	PrimaryExpression	1		3064214	1					
ANR	3065385	IdentifierDeclStatement	STARTUPINFO si ;	7648:1:234686:234700	3064214	64	True				
ANR	3065386	IdentifierDecl	si		3064214	0					
ANR	3065387	IdentifierDeclType	STARTUPINFO		3064214	0					
ANR	3065388	Identifier	si		3064214	1					
ANR	3065389	IdentifierDeclStatement	PROCESS_INFORMATION piProcess ;	7649:1:234703:234732	3064214	65	True				
ANR	3065390	IdentifierDecl	piProcess		3064214	0					
ANR	3065391	IdentifierDeclType	PROCESS_INFORMATION		3064214	0					
ANR	3065392	Identifier	piProcess		3064214	1					
ANR	3065393	ExpressionStatement	"ZeroMemory ( & si , sizeof ( si ) )"	7652:1:234792:234818	3064214	66	True				
ANR	3065394	CallExpression	"ZeroMemory ( & si , sizeof ( si ) )"		3064214	0					
ANR	3065395	Callee	ZeroMemory		3064214	0					
ANR	3065396	Identifier	ZeroMemory		3064214	0					
ANR	3065397	ArgumentList	& si		3064214	1					
ANR	3065398	Argument	& si		3064214	0					
ANR	3065399	UnaryOperationExpression	& si		3064214	0					
ANR	3065400	UnaryOperator	&		3064214	0					
ANR	3065401	Identifier	si		3064214	1					
ANR	3065402	Argument	sizeof ( si )		3064214	1					
ANR	3065403	SizeofExpression	sizeof ( si )		3064214	0					
ANR	3065404	Sizeof	sizeof		3064214	0					
ANR	3065405	SizeofOperand	si		3064214	1					
ANR	3065406	ExpressionStatement	si . cb = sizeof ( si )	7653:1:234821:234839	3064214	67	True				
ANR	3065407	AssignmentExpression	si . cb = sizeof ( si )		3064214	0		=			
ANR	3065408	MemberAccess	si . cb		3064214	0					
ANR	3065409	Identifier	si		3064214	0					
ANR	3065410	Identifier	cb		3064214	1					
ANR	3065411	SizeofExpression	sizeof ( si )		3064214	1					
ANR	3065412	Sizeof	sizeof		3064214	0					
ANR	3065413	SizeofOperand	si		3064214	1					
ANR	3065414	Statement	forker_pid	7656:1:234900:234909	3064214	68	True				
ANR	3065415	Statement	=	7656:12:234911:234911	3064214	69	True				
ANR	3065416	Statement	::	7656:14:234913:234914	3064214	70	True				
ANR	3065417	ExpressionStatement	GetCurrentProcessId ( )	7656:16:234915:234936	3064214	71	True				
ANR	3065418	CallExpression	GetCurrentProcessId ( )		3064214	0					
ANR	3065419	Callee	GetCurrentProcessId		3064214	0					
ANR	3065420	Identifier	GetCurrentProcessId		3064214	0					
ANR	3065421	ArgumentList			3064214	1					
ANR	3065422	IfStatement	if ( std )		3064214	72					
ANR	3065423	Condition	std	7678:6:235850:235852	3064214	0	True				
ANR	3065424	Identifier	std		3064214	0					
ANR	3065425	CompoundStatement		363:2:11926:11997	3064214	1					
ANR	3065426	IdentifierDeclStatement	int valid = FALSE ;	7679:2:235860:235877	3064214	0	True				
ANR	3065427	IdentifierDecl	valid = FALSE		3064214	0					
ANR	3065428	IdentifierDeclType	int		3064214	0					
ANR	3065429	Identifier	valid		3064214	1					
ANR	3065430	AssignmentExpression	valid = FALSE		3064214	2		=			
ANR	3065431	Identifier	FALSE		3064214	0					
ANR	3065432	Identifier	FALSE		3064214	1					
ANR	3065433	IdentifierDeclStatement	"HANDLE * std_handles [ 3 ] = { & si . hStdInput , & si . hStdOutput , & si . hStdError } ;"	7680:2:235881:235952	3064214	1	True				
ANR	3065434	IdentifierDecl	"* std_handles [ 3 ] = { & si . hStdInput , & si . hStdOutput , & si . hStdError }"		3064214	0					
ANR	3065435	IdentifierDeclType	HANDLE * [ 3 ]		3064214	0					
ANR	3065436	Identifier	std_handles		3064214	1					
ANR	3065437	PrimaryExpression	3		3064214	2					
ANR	3065438	AssignmentExpression	"* std_handles [ 3 ] = { & si . hStdInput , & si . hStdOutput , & si . hStdError }"		3064214	3		=			
ANR	3065439	Identifier	std_handles		3064214	0					
ANR	3065440	InitializerList	& si . hStdInput		3064214	1					
ANR	3065441	UnaryOperationExpression	& si . hStdInput		3064214	0					
ANR	3065442	UnaryOperator	&		3064214	0					
ANR	3065443	MemberAccess	si . hStdInput		3064214	1					
ANR	3065444	Identifier	si		3064214	0					
ANR	3065445	Identifier	hStdInput		3064214	1					
ANR	3065446	UnaryOperationExpression	& si . hStdOutput		3064214	1					
ANR	3065447	UnaryOperator	&		3064214	0					
ANR	3065448	MemberAccess	si . hStdOutput		3064214	1					
ANR	3065449	Identifier	si		3064214	0					
ANR	3065450	Identifier	hStdOutput		3064214	1					
ANR	3065451	UnaryOperationExpression	& si . hStdError		3064214	2					
ANR	3065452	UnaryOperator	&		3064214	0					
ANR	3065453	MemberAccess	si . hStdError		3064214	1					
ANR	3065454	Identifier	si		3064214	0					
ANR	3065455	Identifier	hStdError		3064214	1					
ANR	3065456	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )		3064214	2					
ANR	3065457	ForInit	int i = 0 ;	7681:7:235961:235970	3064214	0	True				
ANR	3065458	IdentifierDeclStatement	int i = 0 ;		3064214	0					
ANR	3065459	IdentifierDecl	i = 0		3064214	0					
ANR	3065460	IdentifierDeclType	int		3064214	0					
ANR	3065461	Identifier	i		3064214	1					
ANR	3065462	AssignmentExpression	i = 0		3064214	2		=			
ANR	3065463	Identifier	i		3064214	0					
ANR	3065464	PrimaryExpression	0		3064214	1					
ANR	3065465	Condition	i < 3	7681:18:235972:235976	3064214	1	True				
ANR	3065466	RelationalExpression	i < 3		3064214	0		<			
ANR	3065467	Identifier	i		3064214	0					
ANR	3065468	PrimaryExpression	3		3064214	1					
ANR	3065469	PostIncDecOperationExpression	i ++	7681:25:235979:235981	3064214	2	True				
ANR	3065470	Identifier	i		3064214	0					
ANR	3065471	IncDec	++		3064214	1					
ANR	3065472	CompoundStatement		364:30:12029:12029	3064214	3					
ANR	3065473	IfStatement	if ( std [ i ] > - 1 )		3064214	0					
ANR	3065474	Condition	std [ i ] > - 1	7682:8:235994:236004	3064214	0	True				
ANR	3065475	RelationalExpression	std [ i ] > - 1		3064214	0		>			
ANR	3065476	ArrayIndexing	std [ i ]		3064214	0					
ANR	3065477	Identifier	std		3064214	0					
ANR	3065478	Identifier	i		3064214	1					
ANR	3065479	UnaryOperationExpression	- 1		3064214	1					
ANR	3065480	UnaryOperator	-		3064214	0					
ANR	3065481	PrimaryExpression	1		3064214	1					
ANR	3065482	CompoundStatement		365:22:12053:12053	3064214	1					
ANR	3065483	IfStatement	if ( std [ i ] >= PIPE_INDEX_OFFSET )		3064214	0					
ANR	3065484	Condition	std [ i ] >= PIPE_INDEX_OFFSET	7683:8:236018:236044	3064214	0	True				
ANR	3065485	RelationalExpression	std [ i ] >= PIPE_INDEX_OFFSET		3064214	0		>=			
ANR	3065486	ArrayIndexing	std [ i ]		3064214	0					
ANR	3065487	Identifier	std		3064214	0					
ANR	3065488	Identifier	i		3064214	1					
ANR	3065489	Identifier	PIPE_INDEX_OFFSET		3064214	1					
ANR	3065490	CompoundStatement		368:5:12145:12183	3064214	1					
ANR	3065491	IdentifierDeclStatement	int index = std [ i ] - PIPE_INDEX_OFFSET ;	7685:5:236100:236138	3064214	0	True				
ANR	3065492	IdentifierDecl	index = std [ i ] - PIPE_INDEX_OFFSET		3064214	0					
ANR	3065493	IdentifierDeclType	int		3064214	0					
ANR	3065494	Identifier	index		3064214	1					
ANR	3065495	AssignmentExpression	index = std [ i ] - PIPE_INDEX_OFFSET		3064214	2		=			
ANR	3065496	Identifier	index		3064214	0					
ANR	3065497	AdditiveExpression	std [ i ] - PIPE_INDEX_OFFSET		3064214	1		-			
ANR	3065498	ArrayIndexing	std [ i ]		3064214	0					
ANR	3065499	Identifier	std		3064214	0					
ANR	3065500	Identifier	i		3064214	1					
ANR	3065501	Identifier	PIPE_INDEX_OFFSET		3064214	1					
ANR	3065502	ExpressionStatement	* std_handles [ i ] = ( * pipeHandleTable ) [ index ] -> get_handle ( )	7686:5:236145:236202	3064214	1	True				
ANR	3065503	AssignmentExpression	* std_handles [ i ] = ( * pipeHandleTable ) [ index ] -> get_handle ( )		3064214	0		=			
ANR	3065504	UnaryOperationExpression	* std_handles [ i ]		3064214	0					
ANR	3065505	UnaryOperator	*		3064214	0					
ANR	3065506	ArrayIndexing	std_handles [ i ]		3064214	1					
ANR	3065507	Identifier	std_handles		3064214	0					
ANR	3065508	Identifier	i		3064214	1					
ANR	3065509	CallExpression	( * pipeHandleTable ) [ index ] -> get_handle ( )		3064214	1					
ANR	3065510	Callee	( * pipeHandleTable ) [ index ] -> get_handle		3064214	0					
ANR	3065511	PtrMemberAccess	( * pipeHandleTable ) [ index ] -> get_handle		3064214	0					
ANR	3065512	ArrayIndexing	( * pipeHandleTable ) [ index ]		3064214	0					
ANR	3065513	UnaryOperationExpression	* pipeHandleTable		3064214	0					
ANR	3065514	UnaryOperator	*		3064214	0					
ANR	3065515	Identifier	pipeHandleTable		3064214	1					
ANR	3065516	Identifier	index		3064214	1					
ANR	3065517	Identifier	get_handle		3064214	1					
ANR	3065518	ArgumentList			3064214	1					
ANR	3065519	ExpressionStatement	"SetHandleInformation ( * std_handles [ i ] , HANDLE_FLAG_INHERIT , HANDLE_FLAG_INHERIT )"	7687:5:236209:236288	3064214	2	True				
ANR	3065520	CallExpression	"SetHandleInformation ( * std_handles [ i ] , HANDLE_FLAG_INHERIT , HANDLE_FLAG_INHERIT )"		3064214	0					
ANR	3065521	Callee	SetHandleInformation		3064214	0					
ANR	3065522	Identifier	SetHandleInformation		3064214	0					
ANR	3065523	ArgumentList	* std_handles [ i ]		3064214	1					
ANR	3065524	Argument	* std_handles [ i ]		3064214	0					
ANR	3065525	UnaryOperationExpression	* std_handles [ i ]		3064214	0					
ANR	3065526	UnaryOperator	*		3064214	0					
ANR	3065527	ArrayIndexing	std_handles [ i ]		3064214	1					
ANR	3065528	Identifier	std_handles		3064214	0					
ANR	3065529	Identifier	i		3064214	1					
ANR	3065530	Argument	HANDLE_FLAG_INHERIT		3064214	1					
ANR	3065531	Identifier	HANDLE_FLAG_INHERIT		3064214	0					
ANR	3065532	Argument	HANDLE_FLAG_INHERIT		3064214	2					
ANR	3065533	Identifier	HANDLE_FLAG_INHERIT		3064214	0					
ANR	3065534	ExpressionStatement	valid = TRUE	7688:5:236295:236307	3064214	3	True				
ANR	3065535	AssignmentExpression	valid = TRUE		3064214	0		=			
ANR	3065536	Identifier	valid		3064214	0					
ANR	3065537	Identifier	TRUE		3064214	1					
ANR	3065538	ElseStatement	else		3064214	0					
ANR	3065539	CompoundStatement		376:5:12481:12519	3064214	0					
ANR	3065540	ExpressionStatement	"SetFDInheritFlag ( std [ i ] , TRUE )"	7692:5:236374:236403	3064214	0	True				
ANR	3065541	CallExpression	"SetFDInheritFlag ( std [ i ] , TRUE )"		3064214	0					
ANR	3065542	Callee	SetFDInheritFlag		3064214	0					
ANR	3065543	Identifier	SetFDInheritFlag		3064214	0					
ANR	3065544	ArgumentList	std [ i ]		3064214	1					
ANR	3065545	Argument	std [ i ]		3064214	0					
ANR	3065546	ArrayIndexing	std [ i ]		3064214	0					
ANR	3065547	Identifier	std		3064214	0					
ANR	3065548	Identifier	i		3064214	1					
ANR	3065549	Argument	TRUE		3064214	1					
ANR	3065550	Identifier	TRUE		3064214	0					
ANR	3065551	IdentifierDeclStatement	long longTemp = _get_osfhandle ( std [ i ] ) ;	7693:5:236436:236474	3064214	1	True				
ANR	3065552	IdentifierDecl	longTemp = _get_osfhandle ( std [ i ] )		3064214	0					
ANR	3065553	IdentifierDeclType	long		3064214	0					
ANR	3065554	Identifier	longTemp		3064214	1					
ANR	3065555	AssignmentExpression	longTemp = _get_osfhandle ( std [ i ] )		3064214	2		=			
ANR	3065556	Identifier	longTemp		3064214	0					
ANR	3065557	CallExpression	_get_osfhandle ( std [ i ] )		3064214	1					
ANR	3065558	Callee	_get_osfhandle		3064214	0					
ANR	3065559	Identifier	_get_osfhandle		3064214	0					
ANR	3065560	ArgumentList	std [ i ]		3064214	1					
ANR	3065561	Argument	std [ i ]		3064214	0					
ANR	3065562	ArrayIndexing	std [ i ]		3064214	0					
ANR	3065563	Identifier	std		3064214	0					
ANR	3065564	Identifier	i		3064214	1					
ANR	3065565	IfStatement	if ( longTemp != - 1 )		3064214	2					
ANR	3065566	Condition	longTemp != - 1	7694:9:236485:236498	3064214	0	True				
ANR	3065567	EqualityExpression	longTemp != - 1		3064214	0		!=			
ANR	3065568	Identifier	longTemp		3064214	0					
ANR	3065569	UnaryOperationExpression	- 1		3064214	1					
ANR	3065570	UnaryOperator	-		3064214	0					
ANR	3065571	PrimaryExpression	1		3064214	1					
ANR	3065572	CompoundStatement		377:26:12547:12547	3064214	1					
ANR	3065573	ExpressionStatement	valid = TRUE	7695:6:236510:236522	3064214	0	True				
ANR	3065574	AssignmentExpression	valid = TRUE		3064214	0		=			
ANR	3065575	Identifier	valid		3064214	0					
ANR	3065576	Identifier	TRUE		3064214	1					
ANR	3065577	ExpressionStatement	* std_handles [ i ] = ( HANDLE ) longTemp	7696:6:236530:236564	3064214	1	True				
ANR	3065578	AssignmentExpression	* std_handles [ i ] = ( HANDLE ) longTemp		3064214	0		=			
ANR	3065579	UnaryOperationExpression	* std_handles [ i ]		3064214	0					
ANR	3065580	UnaryOperator	*		3064214	0					
ANR	3065581	ArrayIndexing	std_handles [ i ]		3064214	1					
ANR	3065582	Identifier	std_handles		3064214	0					
ANR	3065583	Identifier	i		3064214	1					
ANR	3065584	CastExpression	( HANDLE ) longTemp		3064214	1					
ANR	3065585	CastTarget	HANDLE		3064214	0					
ANR	3065586	Identifier	longTemp		3064214	1					
ANR	3065587	IfStatement	if ( valid )		3064214	3					
ANR	3065588	Condition	valid	7701:7:236595:236599	3064214	0	True				
ANR	3065589	Identifier	valid		3064214	0					
ANR	3065590	CompoundStatement		384:15:12648:12648	3064214	1					
ANR	3065591	ExpressionStatement	si . dwFlags |= STARTF_USESTDHANDLES	7702:3:236608:236642	3064214	0	True				
ANR	3065592	AssignmentExpression	si . dwFlags |= STARTF_USESTDHANDLES		3064214	0		|=			
ANR	3065593	MemberAccess	si . dwFlags		3064214	0					
ANR	3065594	Identifier	si		3064214	0					
ANR	3065595	Identifier	dwFlags		3064214	1					
ANR	3065596	Identifier	STARTF_USESTDHANDLES		3064214	1					
ANR	3065597	ExpressionStatement	inherit_handles = TRUE	7703:3:236647:236669	3064214	1	True				
ANR	3065598	AssignmentExpression	inherit_handles = TRUE		3064214	0		=			
ANR	3065599	Identifier	inherit_handles		3064214	0					
ANR	3065600	Identifier	TRUE		3064214	1					
ANR	3065601	IfStatement	if ( family_info != NULL )		3064214	73					
ANR	3065602	Condition	family_info != NULL	7707:5:236684:236702	3064214	0	True				
ANR	3065603	EqualityExpression	family_info != NULL		3064214	0		!=			
ANR	3065604	Identifier	family_info		3064214	0					
ANR	3065605	Identifier	NULL		3064214	1					
ANR	3065606	CompoundStatement		390:26:12750:12750	3064214	1					
ANR	3065607	ExpressionStatement	create_process_flags |= CREATE_NEW_PROCESS_GROUP	7708:2:236709:236757	3064214	0	True				
ANR	3065608	AssignmentExpression	create_process_flags |= CREATE_NEW_PROCESS_GROUP		3064214	0		|=			
ANR	3065609	Identifier	create_process_flags		3064214	0					
ANR	3065610	Identifier	CREATE_NEW_PROCESS_GROUP		3064214	1					
ANR	3065611	IfStatement	if ( nice_inc > 0 )		3064214	74					
ANR	3065612	Condition	nice_inc > 0	7718:9:237065:237076	3064214	0	True				
ANR	3065613	RelationalExpression	nice_inc > 0		3064214	0		>			
ANR	3065614	Identifier	nice_inc		3064214	0					
ANR	3065615	PrimaryExpression	0		3064214	1					
ANR	3065616	CompoundStatement		401:24:13125:13125	3064214	1					
ANR	3065617	ExpressionStatement	create_process_flags |= IDLE_PRIORITY_CLASS	7720:2:237140:237183	3064214	0	True				
ANR	3065618	AssignmentExpression	create_process_flags |= IDLE_PRIORITY_CLASS		3064214	0		|=			
ANR	3065619	Identifier	create_process_flags		3064214	0					
ANR	3065620	Identifier	IDLE_PRIORITY_CLASS		3064214	1					
ANR	3065621	CompoundStatement		465:2:15091:15100	3064214	75					
ANR	3065622	IdentifierDeclStatement	Env job_environ ;	7729:2:237346:237361	3064214	0	True				
ANR	3065623	IdentifierDecl	job_environ		3064214	0					
ANR	3065624	IdentifierDeclType	Env		3064214	0					
ANR	3065625	Identifier	job_environ		3064214	1					
ANR	3065626	IfStatement	if ( HAS_DCJOBOPT_NO_ENV_INHERIT ( job_opt_mask ) )		3064214	1					
ANR	3065627	Condition	HAS_DCJOBOPT_NO_ENV_INHERIT ( job_opt_mask )	7733:7:237494:237534	3064214	0	True				
ANR	3065628	CallExpression	HAS_DCJOBOPT_NO_ENV_INHERIT ( job_opt_mask )		3064214	0					
ANR	3065629	Callee	HAS_DCJOBOPT_NO_ENV_INHERIT		3064214	0					
ANR	3065630	Identifier	HAS_DCJOBOPT_NO_ENV_INHERIT		3064214	0					
ANR	3065631	ArgumentList	job_opt_mask		3064214	1					
ANR	3065632	Argument	job_opt_mask		3064214	0					
ANR	3065633	Identifier	job_opt_mask		3064214	0					
ANR	3065634	CompoundStatement		429:3:13980:13998	3064214	1					
ANR	3065635	IdentifierDeclStatement	MyString path ;	7738:3:237740:237753	3064214	0	True				
ANR	3065636	IdentifierDecl	path		3064214	0					
ANR	3065637	IdentifierDeclType	MyString		3064214	0					
ANR	3065638	Identifier	path		3064214	1					
ANR	3065639	ExpressionStatement	"GetEnv ( ""PATH"" , path )"	7739:3:237758:237777	3064214	1	True				
ANR	3065640	CallExpression	"GetEnv ( ""PATH"" , path )"		3064214	0					
ANR	3065641	Callee	GetEnv		3064214	0					
ANR	3065642	Identifier	GetEnv		3064214	0					
ANR	3065643	ArgumentList	"""PATH"""		3064214	1					
ANR	3065644	Argument	"""PATH"""		3064214	0					
ANR	3065645	PrimaryExpression	"""PATH"""		3064214	0					
ANR	3065646	Argument	path		3064214	1					
ANR	3065647	Identifier	path		3064214	0					
ANR	3065648	IfStatement	if ( path . Length ( ) )		3064214	2					
ANR	3065649	Condition	path . Length ( )	7740:7:237786:237798	3064214	0	True				
ANR	3065650	CallExpression	path . Length ( )		3064214	0					
ANR	3065651	Callee	path . Length		3064214	0					
ANR	3065652	MemberAccess	path . Length		3064214	0					
ANR	3065653	Identifier	path		3064214	0					
ANR	3065654	Identifier	Length		3064214	1					
ANR	3065655	ArgumentList			3064214	1					
ANR	3065656	CompoundStatement		423:22:13846:13846	3064214	1					
ANR	3065657	ExpressionStatement	"job_environ . SetEnv ( ""PATH"" , path . Value ( ) )"	7741:4:237807:237846	3064214	0	True				
ANR	3065658	CallExpression	"job_environ . SetEnv ( ""PATH"" , path . Value ( ) )"		3064214	0					
ANR	3065659	Callee	job_environ . SetEnv		3064214	0					
ANR	3065660	MemberAccess	job_environ . SetEnv		3064214	0					
ANR	3065661	Identifier	job_environ		3064214	0					
ANR	3065662	Identifier	SetEnv		3064214	1					
ANR	3065663	ArgumentList	"""PATH"""		3064214	1					
ANR	3065664	Argument	"""PATH"""		3064214	0					
ANR	3065665	PrimaryExpression	"""PATH"""		3064214	0					
ANR	3065666	Argument	path . Value ( )		3064214	1					
ANR	3065667	CallExpression	path . Value ( )		3064214	0					
ANR	3065668	Callee	path . Value		3064214	0					
ANR	3065669	MemberAccess	path . Value		3064214	0					
ANR	3065670	Identifier	path		3064214	0					
ANR	3065671	Identifier	Value		3064214	1					
ANR	3065672	ArgumentList			3064214	1					
ANR	3065673	IdentifierDeclStatement	MyString temp_path ;	7746:3:237935:237953	3064214	3	True				
ANR	3065674	IdentifierDecl	temp_path		3064214	0					
ANR	3065675	IdentifierDeclType	MyString		3064214	0					
ANR	3065676	Identifier	temp_path		3064214	1					
ANR	3065677	ExpressionStatement	"GetEnv ( ""TEMP"" , temp_path )"	7747:3:237958:237982	3064214	4	True				
ANR	3065678	CallExpression	"GetEnv ( ""TEMP"" , temp_path )"		3064214	0					
ANR	3065679	Callee	GetEnv		3064214	0					
ANR	3065680	Identifier	GetEnv		3064214	0					
ANR	3065681	ArgumentList	"""TEMP"""		3064214	1					
ANR	3065682	Argument	"""TEMP"""		3064214	0					
ANR	3065683	PrimaryExpression	"""TEMP"""		3064214	0					
ANR	3065684	Argument	temp_path		3064214	1					
ANR	3065685	Identifier	temp_path		3064214	0					
ANR	3065686	IfStatement	if ( temp_path . Length ( ) )		3064214	5					
ANR	3065687	Condition	temp_path . Length ( )	7748:7:237991:238008	3064214	0	True				
ANR	3065688	CallExpression	temp_path . Length ( )		3064214	0					
ANR	3065689	Callee	temp_path . Length		3064214	0					
ANR	3065690	MemberAccess	temp_path . Length		3064214	0					
ANR	3065691	Identifier	temp_path		3064214	0					
ANR	3065692	Identifier	Length		3064214	1					
ANR	3065693	ArgumentList			3064214	1					
ANR	3065694	CompoundStatement		431:27:14056:14056	3064214	1					
ANR	3065695	ExpressionStatement	"job_environ . SetEnv ( ""TEMP"" , temp_path . Value ( ) )"	7749:4:238017:238061	3064214	0	True				
ANR	3065696	CallExpression	"job_environ . SetEnv ( ""TEMP"" , temp_path . Value ( ) )"		3064214	0					
ANR	3065697	Callee	job_environ . SetEnv		3064214	0					
ANR	3065698	MemberAccess	job_environ . SetEnv		3064214	0					
ANR	3065699	Identifier	job_environ		3064214	0					
ANR	3065700	Identifier	SetEnv		3064214	1					
ANR	3065701	ArgumentList	"""TEMP"""		3064214	1					
ANR	3065702	Argument	"""TEMP"""		3064214	0					
ANR	3065703	PrimaryExpression	"""TEMP"""		3064214	0					
ANR	3065704	Argument	temp_path . Value ( )		3064214	1					
ANR	3065705	CallExpression	temp_path . Value ( )		3064214	0					
ANR	3065706	Callee	temp_path . Value		3064214	0					
ANR	3065707	MemberAccess	temp_path . Value		3064214	0					
ANR	3065708	Identifier	temp_path		3064214	0					
ANR	3065709	Identifier	Value		3064214	1					
ANR	3065710	ArgumentList			3064214	1					
ANR	3065711	ElseStatement	else		3064214	0					
ANR	3065712	CompoundStatement		436:3:14129:14167	3064214	0					
ANR	3065713	IdentifierDeclStatement	char * my_env = GetEnvironmentStrings ( ) ;	7753:3:238084:238122	3064214	0	True				
ANR	3065714	IdentifierDecl	* my_env = GetEnvironmentStrings ( )		3064214	0					
ANR	3065715	IdentifierDeclType	char *		3064214	0					
ANR	3065716	Identifier	my_env		3064214	1					
ANR	3065717	AssignmentExpression	* my_env = GetEnvironmentStrings ( )		3064214	2		=			
ANR	3065718	Identifier	my_env		3064214	0					
ANR	3065719	CallExpression	GetEnvironmentStrings ( )		3064214	1					
ANR	3065720	Callee	GetEnvironmentStrings		3064214	0					
ANR	3065721	Identifier	GetEnvironmentStrings		3064214	0					
ANR	3065722	ArgumentList			3064214	1					
ANR	3065723	IfStatement	if ( my_env == NULL )		3064214	1					
ANR	3065724	Condition	my_env == NULL	7754:7:238131:238144	3064214	0	True				
ANR	3065725	EqualityExpression	my_env == NULL		3064214	0		==			
ANR	3065726	Identifier	my_env		3064214	0					
ANR	3065727	Identifier	NULL		3064214	1					
ANR	3065728	CompoundStatement		437:23:14192:14192	3064214	1					
ANR	3065729	ExpressionStatement	"dprintf ( D_ALWAYS , ""GetEnvironmentStrings error: %u\\n"" , GetLastError ( ) )"	7755:4:238153:238247	3064214	0	True				
ANR	3065730	CallExpression	"dprintf ( D_ALWAYS , ""GetEnvironmentStrings error: %u\\n"" , GetLastError ( ) )"		3064214	0					
ANR	3065731	Callee	dprintf		3064214	0					
ANR	3065732	Identifier	dprintf		3064214	0					
ANR	3065733	ArgumentList	D_ALWAYS		3064214	1					
ANR	3065734	Argument	D_ALWAYS		3064214	0					
ANR	3065735	Identifier	D_ALWAYS		3064214	0					
ANR	3065736	Argument	"""GetEnvironmentStrings error: %u\\n"""		3064214	1					
ANR	3065737	PrimaryExpression	"""GetEnvironmentStrings error: %u\\n"""		3064214	0					
ANR	3065738	Argument	GetLastError ( )		3064214	2					
ANR	3065739	CallExpression	GetLastError ( )		3064214	0					
ANR	3065740	Callee	GetLastError		3064214	0					
ANR	3065741	Identifier	GetLastError		3064214	0					
ANR	3065742	ArgumentList			3064214	1					
ANR	3065743	ElseStatement	else		3064214	0					
ANR	3065744	CompoundStatement		442:8:14307:14307	3064214	0					
ANR	3065745	ExpressionStatement	job_environ . MergeFrom ( my_env )	7760:4:238268:238297	3064214	0	True				
ANR	3065746	CallExpression	job_environ . MergeFrom ( my_env )		3064214	0					
ANR	3065747	Callee	job_environ . MergeFrom		3064214	0					
ANR	3065748	MemberAccess	job_environ . MergeFrom		3064214	0					
ANR	3065749	Identifier	job_environ		3064214	0					
ANR	3065750	Identifier	MergeFrom		3064214	1					
ANR	3065751	ArgumentList	my_env		3064214	1					
ANR	3065752	Argument	my_env		3064214	0					
ANR	3065753	Identifier	my_env		3064214	0					
ANR	3065754	IfStatement	if ( FreeEnvironmentStrings ( my_env ) == FALSE )		3064214	1					
ANR	3065755	Condition	FreeEnvironmentStrings ( my_env ) == FALSE	7761:8:238307:238345	3064214	0	True				
ANR	3065756	EqualityExpression	FreeEnvironmentStrings ( my_env ) == FALSE		3064214	0		==			
ANR	3065757	CallExpression	FreeEnvironmentStrings ( my_env )		3064214	0					
ANR	3065758	Callee	FreeEnvironmentStrings		3064214	0					
ANR	3065759	Identifier	FreeEnvironmentStrings		3064214	0					
ANR	3065760	ArgumentList	my_env		3064214	1					
ANR	3065761	Argument	my_env		3064214	0					
ANR	3065762	Identifier	my_env		3064214	0					
ANR	3065763	Identifier	FALSE		3064214	1					
ANR	3065764	CompoundStatement		444:49:14393:14393	3064214	1					
ANR	3065765	ExpressionStatement	"dprintf ( D_ALWAYS , ""FreeEnvironmentStrings error: %u\\n"" , GetLastError ( ) )"	7762:5:238355:238452	3064214	0	True				
ANR	3065766	CallExpression	"dprintf ( D_ALWAYS , ""FreeEnvironmentStrings error: %u\\n"" , GetLastError ( ) )"		3064214	0					
ANR	3065767	Callee	dprintf		3064214	0					
ANR	3065768	Identifier	dprintf		3064214	0					
ANR	3065769	ArgumentList	D_ALWAYS		3064214	1					
ANR	3065770	Argument	D_ALWAYS		3064214	0					
ANR	3065771	Identifier	D_ALWAYS		3064214	0					
ANR	3065772	Argument	"""FreeEnvironmentStrings error: %u\\n"""		3064214	1					
ANR	3065773	PrimaryExpression	"""FreeEnvironmentStrings error: %u\\n"""		3064214	0					
ANR	3065774	Argument	GetLastError ( )		3064214	2					
ANR	3065775	CallExpression	GetLastError ( )		3064214	0					
ANR	3065776	Callee	GetLastError		3064214	0					
ANR	3065777	Identifier	GetLastError		3064214	0					
ANR	3065778	ArgumentList			3064214	1					
ANR	3065779	IfStatement	if ( env )		3064214	2					
ANR	3065780	Condition	env	7770:5:238511:238513	3064214	0	True				
ANR	3065781	Identifier	env		3064214	0					
ANR	3065782	CompoundStatement		453:10:14561:14561	3064214	1					
ANR	3065783	ExpressionStatement	job_environ . MergeFrom ( * env )	7771:3:238521:238548	3064214	0	True				
ANR	3065784	CallExpression	job_environ . MergeFrom ( * env )		3064214	0					
ANR	3065785	Callee	job_environ . MergeFrom		3064214	0					
ANR	3065786	MemberAccess	job_environ . MergeFrom		3064214	0					
ANR	3065787	Identifier	job_environ		3064214	0					
ANR	3065788	Identifier	MergeFrom		3064214	1					
ANR	3065789	ArgumentList	* env		3064214	1					
ANR	3065790	Argument	* env		3064214	0					
ANR	3065791	UnaryOperationExpression	* env		3064214	0					
ANR	3065792	UnaryOperator	*		3064214	0					
ANR	3065793	Identifier	env		3064214	1					
ANR	3065794	IdentifierDeclStatement	"const char * default_vars [ ] = { ""SystemDrive"" , ""SystemRoot"" , ""COMPUTERNAME"" , ""NUMBER_OF_PROCESSORS"" , ""OS"" , ""COMSPEC"" , ""PROCESSOR_ARCHITECTURE"" , ""PROCESSOR_IDENTIFIER"" , ""PROCESSOR_LEVEL"" , ""PROCESSOR_REVISION"" , ""PROGRAMFILES"" , ""WINDIR"" , ""\\0"" } ;"	7777:2:238754:239007	3064214	3	True				
ANR	3065795	IdentifierDecl	"* default_vars [ ] = { ""SystemDrive"" , ""SystemRoot"" , ""COMPUTERNAME"" , ""NUMBER_OF_PROCESSORS"" , ""OS"" , ""COMSPEC"" , ""PROCESSOR_ARCHITECTURE"" , ""PROCESSOR_IDENTIFIER"" , ""PROCESSOR_LEVEL"" , ""PROCESSOR_REVISION"" , ""PROGRAMFILES"" , ""WINDIR"" , ""\\0"" }"		3064214	0					
ANR	3065796	IdentifierDeclType	const char * [ ]		3064214	0					
ANR	3065797	Identifier	default_vars		3064214	1					
ANR	3065798	AssignmentExpression	"* default_vars [ ] = { ""SystemDrive"" , ""SystemRoot"" , ""COMPUTERNAME"" , ""NUMBER_OF_PROCESSORS"" , ""OS"" , ""COMSPEC"" , ""PROCESSOR_ARCHITECTURE"" , ""PROCESSOR_IDENTIFIER"" , ""PROCESSOR_LEVEL"" , ""PROCESSOR_REVISION"" , ""PROGRAMFILES"" , ""WINDIR"" , ""\\0"" }"		3064214	2		=			
ANR	3065799	Identifier	default_vars		3064214	0					
ANR	3065800	InitializerList	"""SystemDrive"""		3064214	1					
ANR	3065801	PrimaryExpression	"""SystemDrive"""		3064214	0					
ANR	3065802	PrimaryExpression	"""SystemRoot"""		3064214	1					
ANR	3065803	PrimaryExpression	"""COMPUTERNAME"""		3064214	2					
ANR	3065804	PrimaryExpression	"""NUMBER_OF_PROCESSORS"""		3064214	3					
ANR	3065805	PrimaryExpression	"""OS"""		3064214	4					
ANR	3065806	PrimaryExpression	"""COMSPEC"""		3064214	5					
ANR	3065807	PrimaryExpression	"""PROCESSOR_ARCHITECTURE"""		3064214	6					
ANR	3065808	PrimaryExpression	"""PROCESSOR_IDENTIFIER"""		3064214	7					
ANR	3065809	PrimaryExpression	"""PROCESSOR_LEVEL"""		3064214	8					
ANR	3065810	PrimaryExpression	"""PROCESSOR_REVISION"""		3064214	9					
ANR	3065811	PrimaryExpression	"""PROGRAMFILES"""		3064214	10					
ANR	3065812	PrimaryExpression	"""WINDIR"""		3064214	11					
ANR	3065813	PrimaryExpression	"""\\0"""		3064214	12					
ANR	3065814	IdentifierDeclStatement	int i = 0 ;	7782:2:239046:239055	3064214	4	True				
ANR	3065815	IdentifierDecl	i = 0		3064214	0					
ANR	3065816	IdentifierDeclType	int		3064214	0					
ANR	3065817	Identifier	i		3064214	1					
ANR	3065818	AssignmentExpression	i = 0		3064214	2		=			
ANR	3065819	Identifier	i		3064214	0					
ANR	3065820	PrimaryExpression	0		3064214	1					
ANR	3065821	WhileStatement	while ( default_vars [ i ] [ 0 ] )		3064214	5					
ANR	3065822	Condition	default_vars [ i ] [ 0 ]	7783:10:239067:239084	3064214	0	True				
ANR	3065823	ArrayIndexing	default_vars [ i ] [ 0 ]		3064214	0					
ANR	3065824	ArrayIndexing	default_vars [ i ]		3064214	0					
ANR	3065825	Identifier	default_vars		3064214	0					
ANR	3065826	Identifier	i		3064214	1					
ANR	3065827	PrimaryExpression	0		3064214	1					
ANR	3065828	CompoundStatement		467:3:15138:15153	3064214	1					
ANR	3065829	IdentifierDeclStatement	MyString envbuf ;	7784:3:239093:239108	3064214	0	True				
ANR	3065830	IdentifierDecl	envbuf		3064214	0					
ANR	3065831	IdentifierDeclType	MyString		3064214	0					
ANR	3065832	Identifier	envbuf		3064214	1					
ANR	3065833	ExpressionStatement	"GetEnv ( default_vars [ i ] , envbuf )"	7785:3:239113:239143	3064214	1	True				
ANR	3065834	CallExpression	"GetEnv ( default_vars [ i ] , envbuf )"		3064214	0					
ANR	3065835	Callee	GetEnv		3064214	0					
ANR	3065836	Identifier	GetEnv		3064214	0					
ANR	3065837	ArgumentList	default_vars [ i ]		3064214	1					
ANR	3065838	Argument	default_vars [ i ]		3064214	0					
ANR	3065839	ArrayIndexing	default_vars [ i ]		3064214	0					
ANR	3065840	Identifier	default_vars		3064214	0					
ANR	3065841	Identifier	i		3064214	1					
ANR	3065842	Argument	envbuf		3064214	1					
ANR	3065843	Identifier	envbuf		3064214	0					
ANR	3065844	IfStatement	if ( envbuf . Length ( ) )		3064214	2					
ANR	3065845	Condition	envbuf . Length ( )	7786:7:239152:239166	3064214	0	True				
ANR	3065846	CallExpression	envbuf . Length ( )		3064214	0					
ANR	3065847	Callee	envbuf . Length		3064214	0					
ANR	3065848	MemberAccess	envbuf . Length		3064214	0					
ANR	3065849	Identifier	envbuf		3064214	0					
ANR	3065850	Identifier	Length		3064214	1					
ANR	3065851	ArgumentList			3064214	1					
ANR	3065852	CompoundStatement		469:24:15214:15214	3064214	1					
ANR	3065853	ExpressionStatement	"job_environ . SetEnv ( default_vars [ i ] , envbuf . Value ( ) )"	7787:4:239175:239225	3064214	0	True				
ANR	3065854	CallExpression	"job_environ . SetEnv ( default_vars [ i ] , envbuf . Value ( ) )"		3064214	0					
ANR	3065855	Callee	job_environ . SetEnv		3064214	0					
ANR	3065856	MemberAccess	job_environ . SetEnv		3064214	0					
ANR	3065857	Identifier	job_environ		3064214	0					
ANR	3065858	Identifier	SetEnv		3064214	1					
ANR	3065859	ArgumentList	default_vars [ i ]		3064214	1					
ANR	3065860	Argument	default_vars [ i ]		3064214	0					
ANR	3065861	ArrayIndexing	default_vars [ i ]		3064214	0					
ANR	3065862	Identifier	default_vars		3064214	0					
ANR	3065863	Identifier	i		3064214	1					
ANR	3065864	Argument	envbuf . Value ( )		3064214	1					
ANR	3065865	CallExpression	envbuf . Value ( )		3064214	0					
ANR	3065866	Callee	envbuf . Value		3064214	0					
ANR	3065867	MemberAccess	envbuf . Value		3064214	0					
ANR	3065868	Identifier	envbuf		3064214	0					
ANR	3065869	Identifier	Value		3064214	1					
ANR	3065870	ArgumentList			3064214	1					
ANR	3065871	ExpressionStatement	i ++	7789:3:239235:239238	3064214	3	True				
ANR	3065872	PostIncDecOperationExpression	i ++		3064214	0					
ANR	3065873	Identifier	i		3064214	0					
ANR	3065874	IncDec	++		3064214	1					
ANR	3065875	ExpressionStatement	"job_environ . SetEnv ( EnvGetName ( ENV_INHERIT ) , inheritbuf . Value ( ) )"	7793:2:239281:239348	3064214	6	True				
ANR	3065876	CallExpression	"job_environ . SetEnv ( EnvGetName ( ENV_INHERIT ) , inheritbuf . Value ( ) )"		3064214	0					
ANR	3065877	Callee	job_environ . SetEnv		3064214	0					
ANR	3065878	MemberAccess	job_environ . SetEnv		3064214	0					
ANR	3065879	Identifier	job_environ		3064214	0					
ANR	3065880	Identifier	SetEnv		3064214	1					
ANR	3065881	ArgumentList	EnvGetName ( ENV_INHERIT )		3064214	1					
ANR	3065882	Argument	EnvGetName ( ENV_INHERIT )		3064214	0					
ANR	3065883	CallExpression	EnvGetName ( ENV_INHERIT )		3064214	0					
ANR	3065884	Callee	EnvGetName		3064214	0					
ANR	3065885	Identifier	EnvGetName		3064214	0					
ANR	3065886	ArgumentList	ENV_INHERIT		3064214	1					
ANR	3065887	Argument	ENV_INHERIT		3064214	0					
ANR	3065888	Identifier	ENV_INHERIT		3064214	0					
ANR	3065889	Argument	inheritbuf . Value ( )		3064214	1					
ANR	3065890	CallExpression	inheritbuf . Value ( )		3064214	0					
ANR	3065891	Callee	inheritbuf . Value		3064214	0					
ANR	3065892	MemberAccess	inheritbuf . Value		3064214	0					
ANR	3065893	Identifier	inheritbuf		3064214	0					
ANR	3065894	Identifier	Value		3064214	1					
ANR	3065895	ArgumentList			3064214	1					
ANR	3065896	IfStatement	if ( ! privateinheritbuf . IsEmpty ( ) )		3064214	7					
ANR	3065897	Condition	! privateinheritbuf . IsEmpty ( )	7795:6:239357:239384	3064214	0	True				
ANR	3065898	UnaryOperationExpression	! privateinheritbuf . IsEmpty ( )		3064214	0					
ANR	3065899	UnaryOperator	!		3064214	0					
ANR	3065900	CallExpression	privateinheritbuf . IsEmpty ( )		3064214	1					
ANR	3065901	Callee	privateinheritbuf . IsEmpty		3064214	0					
ANR	3065902	MemberAccess	privateinheritbuf . IsEmpty		3064214	0					
ANR	3065903	Identifier	privateinheritbuf		3064214	0					
ANR	3065904	Identifier	IsEmpty		3064214	1					
ANR	3065905	ArgumentList			3064214	1					
ANR	3065906	ExpressionStatement	"job_environ . SetEnv ( EnvGetName ( ENV_PRIVATE ) , privateinheritbuf . Value ( ) )"	7796:3:239391:239465	3064214	1	True				
ANR	3065907	CallExpression	"job_environ . SetEnv ( EnvGetName ( ENV_PRIVATE ) , privateinheritbuf . Value ( ) )"		3064214	0					
ANR	3065908	Callee	job_environ . SetEnv		3064214	0					
ANR	3065909	MemberAccess	job_environ . SetEnv		3064214	0					
ANR	3065910	Identifier	job_environ		3064214	0					
ANR	3065911	Identifier	SetEnv		3064214	1					
ANR	3065912	ArgumentList	EnvGetName ( ENV_PRIVATE )		3064214	1					
ANR	3065913	Argument	EnvGetName ( ENV_PRIVATE )		3064214	0					
ANR	3065914	CallExpression	EnvGetName ( ENV_PRIVATE )		3064214	0					
ANR	3065915	Callee	EnvGetName		3064214	0					
ANR	3065916	Identifier	EnvGetName		3064214	0					
ANR	3065917	ArgumentList	ENV_PRIVATE		3064214	1					
ANR	3065918	Argument	ENV_PRIVATE		3064214	0					
ANR	3065919	Identifier	ENV_PRIVATE		3064214	0					
ANR	3065920	Argument	privateinheritbuf . Value ( )		3064214	1					
ANR	3065921	CallExpression	privateinheritbuf . Value ( )		3064214	0					
ANR	3065922	Callee	privateinheritbuf . Value		3064214	0					
ANR	3065923	MemberAccess	privateinheritbuf . Value		3064214	0					
ANR	3065924	Identifier	privateinheritbuf		3064214	0					
ANR	3065925	Identifier	Value		3064214	1					
ANR	3065926	ArgumentList			3064214	1					
ANR	3065927	ExpressionStatement	newenv = job_environ . getWindowsEnvironmentString ( )	7801:2:239640:239690	3064214	8	True				
ANR	3065928	AssignmentExpression	newenv = job_environ . getWindowsEnvironmentString ( )		3064214	0		=			
ANR	3065929	Identifier	newenv		3064214	0					
ANR	3065930	CallExpression	job_environ . getWindowsEnvironmentString ( )		3064214	1					
ANR	3065931	Callee	job_environ . getWindowsEnvironmentString		3064214	0					
ANR	3065932	MemberAccess	job_environ . getWindowsEnvironmentString		3064214	0					
ANR	3065933	Identifier	job_environ		3064214	0					
ANR	3065934	Identifier	getWindowsEnvironmentString		3064214	1					
ANR	3065935	ArgumentList			3064214	1					
ANR	3065936	ExpressionStatement	bIs16Bit = false	7806:1:239780:239796	3064214	76	True				
ANR	3065937	AssignmentExpression	bIs16Bit = false		3064214	0		=			
ANR	3065938	Identifier	bIs16Bit		3064214	0					
ANR	3065939	Identifier	false		3064214	1					
ANR	3065940	IdentifierDeclStatement	LOADED_IMAGE loaded ;	7807:1:239799:239818	3064214	77	True				
ANR	3065941	IdentifierDecl	loaded		3064214	0					
ANR	3065942	IdentifierDeclType	LOADED_IMAGE		3064214	0					
ANR	3065943	Identifier	loaded		3064214	1					
ANR	3065944	IdentifierDeclStatement	BOOL map_and_load_result ;	7808:1:239821:239845	3064214	78	True				
ANR	3065945	IdentifierDecl	map_and_load_result		3064214	0					
ANR	3065946	IdentifierDeclType	BOOL		3064214	0					
ANR	3065947	Identifier	map_and_load_result		3064214	1					
ANR	3065948	ExpressionStatement	loaded . fDOSImage = FALSE	7816:1:240325:240349	3064214	79	True				
ANR	3065949	AssignmentExpression	loaded . fDOSImage = FALSE		3064214	0		=			
ANR	3065950	MemberAccess	loaded . fDOSImage		3064214	0					
ANR	3065951	Identifier	loaded		3064214	0					
ANR	3065952	Identifier	fDOSImage		3064214	1					
ANR	3065953	Identifier	FALSE		3064214	1					
ANR	3065954	ExpressionStatement	"map_and_load_result = MapAndLoad ( ( char * ) executable , NULL , & loaded , FALSE , TRUE )"	7817:1:240352:240432	3064214	80	True				
ANR	3065955	AssignmentExpression	"map_and_load_result = MapAndLoad ( ( char * ) executable , NULL , & loaded , FALSE , TRUE )"		3064214	0		=			
ANR	3065956	Identifier	map_and_load_result		3064214	0					
ANR	3065957	CallExpression	"MapAndLoad ( ( char * ) executable , NULL , & loaded , FALSE , TRUE )"		3064214	1					
ANR	3065958	Callee	MapAndLoad		3064214	0					
ANR	3065959	Identifier	MapAndLoad		3064214	0					
ANR	3065960	ArgumentList	( char * ) executable		3064214	1					
ANR	3065961	Argument	( char * ) executable		3064214	0					
ANR	3065962	CastExpression	( char * ) executable		3064214	0					
ANR	3065963	CastTarget	char *		3064214	0					
ANR	3065964	Identifier	executable		3064214	1					
ANR	3065965	Argument	NULL		3064214	1					
ANR	3065966	Identifier	NULL		3064214	0					
ANR	3065967	Argument	& loaded		3064214	2					
ANR	3065968	UnaryOperationExpression	& loaded		3064214	0					
ANR	3065969	UnaryOperator	&		3064214	0					
ANR	3065970	Identifier	loaded		3064214	1					
ANR	3065971	Argument	FALSE		3064214	3					
ANR	3065972	Identifier	FALSE		3064214	0					
ANR	3065973	Argument	TRUE		3064214	4					
ANR	3065974	Identifier	TRUE		3064214	0					
ANR	3065975	IfStatement	if ( loaded . fDOSImage == TRUE )		3064214	81					
ANR	3065976	Condition	loaded . fDOSImage == TRUE	7818:5:240439:240462	3064214	0	True				
ANR	3065977	EqualityExpression	loaded . fDOSImage == TRUE		3064214	0		==			
ANR	3065978	MemberAccess	loaded . fDOSImage		3064214	0					
ANR	3065979	Identifier	loaded		3064214	0					
ANR	3065980	Identifier	fDOSImage		3064214	1					
ANR	3065981	Identifier	TRUE		3064214	1					
ANR	3065982	ExpressionStatement	bIs16Bit = true	7819:2:240467:240482	3064214	1	True				
ANR	3065983	AssignmentExpression	bIs16Bit = true		3064214	0		=			
ANR	3065984	Identifier	bIs16Bit		3064214	0					
ANR	3065985	Identifier	true		3064214	1					
ANR	3065986	IfStatement	if ( map_and_load_result )		3064214	82					
ANR	3065987	Condition	map_and_load_result	7820:5:240489:240507	3064214	0	True				
ANR	3065988	Identifier	map_and_load_result		3064214	0					
ANR	3065989	ExpressionStatement	UnMapAndLoad ( & loaded )	7821:2:240512:240533	3064214	1	True				
ANR	3065990	CallExpression	UnMapAndLoad ( & loaded )		3064214	0					
ANR	3065991	Callee	UnMapAndLoad		3064214	0					
ANR	3065992	Identifier	UnMapAndLoad		3064214	0					
ANR	3065993	ArgumentList	& loaded		3064214	1					
ANR	3065994	Argument	& loaded		3064214	0					
ANR	3065995	UnaryOperationExpression	& loaded		3064214	0					
ANR	3065996	UnaryOperator	&		3064214	0					
ANR	3065997	Identifier	loaded		3064214	1					
ANR	3065998	ExpressionStatement	namelen = strlen ( executable )	7824:1:240591:240622	3064214	83	True				
ANR	3065999	AssignmentExpression	namelen = strlen ( executable )		3064214	0		=			
ANR	3066000	Identifier	namelen		3064214	0					
ANR	3066001	CallExpression	strlen ( executable )		3064214	1					
ANR	3066002	Callee	strlen		3064214	0					
ANR	3066003	Identifier	strlen		3064214	0					
ANR	3066004	ArgumentList	executable		3064214	1					
ANR	3066005	Argument	executable		3064214	0					
ANR	3066006	Identifier	executable		3064214	0					
ANR	3066007	ExpressionStatement	extension = namelen > 3 ? & ( executable [ namelen - 4 ] ) : NULL	7825:1:240625:240684	3064214	84	True				
ANR	3066008	AssignmentExpression	extension = namelen > 3 ? & ( executable [ namelen - 4 ] ) : NULL		3064214	0		=			
ANR	3066009	Identifier	extension		3064214	0					
ANR	3066010	ConditionalExpression	namelen > 3 ? & ( executable [ namelen - 4 ] ) : NULL		3064214	1					
ANR	3066011	Condition	namelen > 3		3064214	0					
ANR	3066012	RelationalExpression	namelen > 3		3064214	0		>			
ANR	3066013	Identifier	namelen		3064214	0					
ANR	3066014	PrimaryExpression	3		3064214	1					
ANR	3066015	UnaryOperationExpression	& ( executable [ namelen - 4 ] )		3064214	1					
ANR	3066016	UnaryOperator	&		3064214	0					
ANR	3066017	ArrayIndexing	executable [ namelen - 4 ]		3064214	1					
ANR	3066018	Identifier	executable		3064214	0					
ANR	3066019	AdditiveExpression	namelen - 4		3064214	1		-			
ANR	3066020	Identifier	namelen		3064214	0					
ANR	3066021	PrimaryExpression	4		3064214	1					
ANR	3066022	Identifier	NULL		3064214	2					
ANR	3066023	ExpressionStatement	"batch_file = ( extension && ( MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension ) ) ) , allow_scripts = param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true ) , binary_executable = ( extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) ) )"	7826:1:240687:241064	3064214	85	True				
ANR	3066024	Expression	"batch_file = ( extension && ( MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension ) ) ) , allow_scripts = param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true ) , binary_executable = ( extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) ) )"		3064214	0					
ANR	3066025	AssignmentExpression	"batch_file = ( extension && ( MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension ) ) )"		3064214	0		=			
ANR	3066026	Identifier	batch_file		3064214	0					
ANR	3066027	AndExpression	"extension && ( MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension ) )"		3064214	1		&&			
ANR	3066028	Identifier	extension		3064214	0					
ANR	3066029	OrExpression	"MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension )"		3064214	1		||			
ANR	3066030	EqualityExpression	"MATCH == strcasecmp ( "".bat"" , extension )"		3064214	0		==			
ANR	3066031	Identifier	MATCH		3064214	0					
ANR	3066032	CallExpression	"strcasecmp ( "".bat"" , extension )"		3064214	1					
ANR	3066033	Callee	strcasecmp		3064214	0					
ANR	3066034	Identifier	strcasecmp		3064214	0					
ANR	3066035	ArgumentList	""".bat"""		3064214	1					
ANR	3066036	Argument	""".bat"""		3064214	0					
ANR	3066037	PrimaryExpression	""".bat"""		3064214	0					
ANR	3066038	Argument	extension		3064214	1					
ANR	3066039	Identifier	extension		3064214	0					
ANR	3066040	EqualityExpression	"MATCH == strcasecmp ( "".cmd"" , extension )"		3064214	1		==			
ANR	3066041	Identifier	MATCH		3064214	0					
ANR	3066042	CallExpression	"strcasecmp ( "".cmd"" , extension )"		3064214	1					
ANR	3066043	Callee	strcasecmp		3064214	0					
ANR	3066044	Identifier	strcasecmp		3064214	0					
ANR	3066045	ArgumentList	""".cmd"""		3064214	1					
ANR	3066046	Argument	""".cmd"""		3064214	0					
ANR	3066047	PrimaryExpression	""".cmd"""		3064214	0					
ANR	3066048	Argument	extension		3064214	1					
ANR	3066049	Identifier	extension		3064214	0					
ANR	3066050	Expression	"allow_scripts = param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true ) , binary_executable = ( extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) ) )"		3064214	1					
ANR	3066051	AssignmentExpression	"allow_scripts = param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true )"		3064214	0		=			
ANR	3066052	Identifier	allow_scripts		3064214	0					
ANR	3066053	CallExpression	"param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true )"		3064214	1					
ANR	3066054	Callee	param_boolean		3064214	0					
ANR	3066055	Identifier	param_boolean		3064214	0					
ANR	3066056	ArgumentList	"""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"""		3064214	1					
ANR	3066057	Argument	"""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"""		3064214	0					
ANR	3066058	PrimaryExpression	"""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"""		3064214	0					
ANR	3066059	Argument	true		3064214	1					
ANR	3066060	Identifier	true		3064214	0					
ANR	3066061	AssignmentExpression	"binary_executable = ( extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) ) )"		3064214	1		=			
ANR	3066062	Identifier	binary_executable		3064214	0					
ANR	3066063	AndExpression	"extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) )"		3064214	1		&&			
ANR	3066064	Identifier	extension		3064214	0					
ANR	3066065	OrExpression	"MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension )"		3064214	1		||			
ANR	3066066	EqualityExpression	"MATCH == strcasecmp ( "".exe"" , extension )"		3064214	0		==			
ANR	3066067	Identifier	MATCH		3064214	0					
ANR	3066068	CallExpression	"strcasecmp ( "".exe"" , extension )"		3064214	1					
ANR	3066069	Callee	strcasecmp		3064214	0					
ANR	3066070	Identifier	strcasecmp		3064214	0					
ANR	3066071	ArgumentList	""".exe"""		3064214	1					
ANR	3066072	Argument	""".exe"""		3064214	0					
ANR	3066073	PrimaryExpression	""".exe"""		3064214	0					
ANR	3066074	Argument	extension		3064214	1					
ANR	3066075	Identifier	extension		3064214	0					
ANR	3066076	EqualityExpression	"MATCH == strcasecmp ( "".com"" , extension )"		3064214	1		==			
ANR	3066077	Identifier	MATCH		3064214	0					
ANR	3066078	CallExpression	"strcasecmp ( "".com"" , extension )"		3064214	1					
ANR	3066079	Callee	strcasecmp		3064214	0					
ANR	3066080	Identifier	strcasecmp		3064214	0					
ANR	3066081	ArgumentList	""".com"""		3064214	1					
ANR	3066082	Argument	""".com"""		3064214	0					
ANR	3066083	PrimaryExpression	""".com"""		3064214	0					
ANR	3066084	Argument	extension		3064214	1					
ANR	3066085	Identifier	extension		3064214	0					
ANR	3066086	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Create_Process(): executable: '%s'\\n"" , executable )"	7835:1:241068:241149	3064214	86	True				
ANR	3066087	CallExpression	"dprintf ( D_FULLDEBUG , ""Create_Process(): executable: '%s'\\n"" , executable )"		3064214	0					
ANR	3066088	Callee	dprintf		3064214	0					
ANR	3066089	Identifier	dprintf		3064214	0					
ANR	3066090	ArgumentList	D_FULLDEBUG		3064214	1					
ANR	3066091	Argument	D_FULLDEBUG		3064214	0					
ANR	3066092	Identifier	D_FULLDEBUG		3064214	0					
ANR	3066093	Argument	"""Create_Process(): executable: '%s'\\n"""		3064214	1					
ANR	3066094	PrimaryExpression	"""Create_Process(): executable: '%s'\\n"""		3064214	0					
ANR	3066095	Argument	executable		3064214	2					
ANR	3066096	Identifier	executable		3064214	0					
ANR	3066097	IfStatement	if ( bIs16Bit )		3064214	87					
ANR	3066098	Condition	bIs16Bit	7840:6:241159:241166	3064214	0	True				
ANR	3066099	Identifier	bIs16Bit		3064214	0					
ANR	3066100	CompoundStatement		523:17:17215:17215	3064214	1					
ANR	3066101	ExpressionStatement	"strArgs . sprintf ( ""\\""%s\\"""" , executable )"	7850:2:241433:241480	3064214	0	True				
ANR	3066102	CallExpression	"strArgs . sprintf ( ""\\""%s\\"""" , executable )"		3064214	0					
ANR	3066103	Callee	strArgs . sprintf		3064214	0					
ANR	3066104	MemberAccess	strArgs . sprintf		3064214	0					
ANR	3066105	Identifier	strArgs		3064214	0					
ANR	3066106	Identifier	sprintf		3064214	1					
ANR	3066107	ArgumentList	"""\\""%s\\"""""		3064214	1					
ANR	3066108	Argument	"""\\""%s\\"""""		3064214	0					
ANR	3066109	PrimaryExpression	"""\\""%s\\"""""		3064214	0					
ANR	3066110	Argument	executable		3064214	1					
ANR	3066111	Identifier	executable		3064214	0					
ANR	3066112	ExpressionStatement	"strArgs . replaceString ( ""/"" , ""\\\\"" , 0 )"	7855:2:241534:241583	3064214	1	True				
ANR	3066113	CallExpression	"strArgs . replaceString ( ""/"" , ""\\\\"" , 0 )"		3064214	0					
ANR	3066114	Callee	strArgs . replaceString		3064214	0					
ANR	3066115	MemberAccess	strArgs . replaceString		3064214	0					
ANR	3066116	Identifier	strArgs		3064214	0					
ANR	3066117	Identifier	replaceString		3064214	1					
ANR	3066118	ArgumentList	"""/"""		3064214	1					
ANR	3066119	Argument	"""/"""		3064214	0					
ANR	3066120	PrimaryExpression	"""/"""		3064214	0					
ANR	3066121	Argument	"""\\\\"""		3064214	1					
ANR	3066122	PrimaryExpression	"""\\\\"""		3064214	0					
ANR	3066123	Argument	0		3064214	2					
ANR	3066124	PrimaryExpression	0		3064214	0					
ANR	3066125	ExpressionStatement	first_arg_to_copy = 1	7860:2:241588:241609	3064214	2	True				
ANR	3066126	AssignmentExpression	first_arg_to_copy = 1		3064214	0		=			
ANR	3066127	Identifier	first_arg_to_copy		3064214	0					
ANR	3066128	PrimaryExpression	1		3064214	1					
ANR	3066129	ExpressionStatement	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"	7861:2:241613:241707	3064214	3	True				
ANR	3066130	AssignmentExpression	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		3064214	0		=			
ANR	3066131	Identifier	args_success		3064214	0					
ANR	3066132	CallExpression	"args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		3064214	1					
ANR	3066133	Callee	args . GetArgsStringWin32		3064214	0					
ANR	3066134	MemberAccess	args . GetArgsStringWin32		3064214	0					
ANR	3066135	Identifier	args		3064214	0					
ANR	3066136	Identifier	GetArgsStringWin32		3064214	1					
ANR	3066137	ArgumentList	& strArgs		3064214	1					
ANR	3066138	Argument	& strArgs		3064214	0					
ANR	3066139	UnaryOperationExpression	& strArgs		3064214	0					
ANR	3066140	UnaryOperator	&		3064214	0					
ANR	3066141	Identifier	strArgs		3064214	1					
ANR	3066142	Argument	first_arg_to_copy		3064214	1					
ANR	3066143	Identifier	first_arg_to_copy		3064214	0					
ANR	3066144	Argument	& args_errors		3064214	2					
ANR	3066145	UnaryOperationExpression	& args_errors		3064214	0					
ANR	3066146	UnaryOperator	&		3064214	0					
ANR	3066147	Identifier	args_errors		3064214	1					
ANR	3066148	Statement	dprintf	7866:2:241712:241718	3064214	4	True				
ANR	3066149	Statement	(	7866:10:241720:241720	3064214	5	True				
ANR	3066150	Statement	D_ALWAYS	7867:3:241726:241733	3064214	6	True				
ANR	3066151	Statement	","	7867:11:241734:241734	3064214	7	True				
ANR	3066152	Statement	"""Executable is 16-bit, """	7868:3:241740:241763	3064214	8	True				
ANR	3066153	Statement	"""args=%s\\n"""	7869:3:241768:241778	3064214	9	True				
ANR	3066154	Statement	","	7869:14:241779:241779	3064214	10	True				
ANR	3066155	Statement	args	7870:3:241785:241788	3064214	11	True				
ANR	3066156	Statement	)	7870:8:241790:241790	3064214	12	True				
ANR	3066157	ExpressionStatement		7870:9:241791:241791	3064214	13	True				
ANR	3066158	ElseStatement	else		3064214	0					
ANR	3066159	IfStatement	if ( batch_file )		3064214	0					
ANR	3066160	Condition	batch_file	7872:13:241807:241816	3064214	0	True				
ANR	3066161	Identifier	batch_file		3064214	0					
ANR	3066162	CompoundStatement		561:2:17985:18043	3064214	1					
ANR	3066163	IdentifierDeclStatement	char systemshell [ MAX_PATH + 1 ] ;	7874:2:241825:241853	3064214	0	True				
ANR	3066164	IdentifierDecl	systemshell [ MAX_PATH + 1 ]		3064214	0					
ANR	3066165	IdentifierDeclType	char [ MAX_PATH + 1 ]		3064214	0					
ANR	3066166	Identifier	systemshell		3064214	1					
ANR	3066167	AdditiveExpression	MAX_PATH + 1		3064214	2		+			
ANR	3066168	Identifier	MAX_PATH		3064214	0					
ANR	3066169	PrimaryExpression	1		3064214	1					
ANR	3066170	IdentifierDeclStatement	"UINT length = GetSystemDirectory ( systemshell , MAX_PATH ) ;"	7878:2:241940:241998	3064214	1	True				
ANR	3066171	IdentifierDecl	"length = GetSystemDirectory ( systemshell , MAX_PATH )"		3064214	0					
ANR	3066172	IdentifierDeclType	UINT		3064214	0					
ANR	3066173	Identifier	length		3064214	1					
ANR	3066174	AssignmentExpression	"length = GetSystemDirectory ( systemshell , MAX_PATH )"		3064214	2		=			
ANR	3066175	Identifier	length		3064214	0					
ANR	3066176	CallExpression	"GetSystemDirectory ( systemshell , MAX_PATH )"		3064214	1					
ANR	3066177	Callee	GetSystemDirectory		3064214	0					
ANR	3066178	Identifier	GetSystemDirectory		3064214	0					
ANR	3066179	ArgumentList	systemshell		3064214	1					
ANR	3066180	Argument	systemshell		3064214	0					
ANR	3066181	Identifier	systemshell		3064214	0					
ANR	3066182	Argument	MAX_PATH		3064214	1					
ANR	3066183	Identifier	MAX_PATH		3064214	0					
ANR	3066184	ExpressionStatement	"strncat ( systemshell , ""\\\\cmd.exe"" , MAX_PATH - length - 1 )"	7879:2:242002:242061	3064214	2	True				
ANR	3066185	CallExpression	"strncat ( systemshell , ""\\\\cmd.exe"" , MAX_PATH - length - 1 )"		3064214	0					
ANR	3066186	Callee	strncat		3064214	0					
ANR	3066187	Identifier	strncat		3064214	0					
ANR	3066188	ArgumentList	systemshell		3064214	1					
ANR	3066189	Argument	systemshell		3064214	0					
ANR	3066190	Identifier	systemshell		3064214	0					
ANR	3066191	Argument	"""\\\\cmd.exe"""		3064214	1					
ANR	3066192	PrimaryExpression	"""\\\\cmd.exe"""		3064214	0					
ANR	3066193	Argument	MAX_PATH - length - 1		3064214	2					
ANR	3066194	AdditiveExpression	MAX_PATH - length - 1		3064214	0		-			
ANR	3066195	Identifier	MAX_PATH		3064214	0					
ANR	3066196	AdditiveExpression	length - 1		3064214	1		-			
ANR	3066197	Identifier	length		3064214	0					
ANR	3066198	PrimaryExpression	1		3064214	1					
ANR	3066199	ExpressionStatement	"strArgs . sprintf ( ""\\""%s\\"" /Q /C \\""%s\\"""" , systemshell , executable )"	7883:2:242138:242214	3064214	3	True				
ANR	3066200	CallExpression	"strArgs . sprintf ( ""\\""%s\\"" /Q /C \\""%s\\"""" , systemshell , executable )"		3064214	0					
ANR	3066201	Callee	strArgs . sprintf		3064214	0					
ANR	3066202	MemberAccess	strArgs . sprintf		3064214	0					
ANR	3066203	Identifier	strArgs		3064214	0					
ANR	3066204	Identifier	sprintf		3064214	1					
ANR	3066205	ArgumentList	"""\\""%s\\"" /Q /C \\""%s\\"""""		3064214	1					
ANR	3066206	Argument	"""\\""%s\\"" /Q /C \\""%s\\"""""		3064214	0					
ANR	3066207	PrimaryExpression	"""\\""%s\\"" /Q /C \\""%s\\"""""		3064214	0					
ANR	3066208	Argument	systemshell		3064214	1					
ANR	3066209	Identifier	systemshell		3064214	0					
ANR	3066210	Argument	executable		3064214	2					
ANR	3066211	Identifier	executable		3064214	0					
ANR	3066212	ExpressionStatement	executable_buf = systemshell	7889:2:242264:242292	3064214	4	True				
ANR	3066213	AssignmentExpression	executable_buf = systemshell		3064214	0		=			
ANR	3066214	Identifier	executable_buf		3064214	0					
ANR	3066215	Identifier	systemshell		3064214	1					
ANR	3066216	ExpressionStatement	executable = executable_buf . Value ( )	7890:2:242296:242332	3064214	5	True				
ANR	3066217	AssignmentExpression	executable = executable_buf . Value ( )		3064214	0		=			
ANR	3066218	Identifier	executable		3064214	0					
ANR	3066219	CallExpression	executable_buf . Value ( )		3064214	1					
ANR	3066220	Callee	executable_buf . Value		3064214	0					
ANR	3066221	MemberAccess	executable_buf . Value		3064214	0					
ANR	3066222	Identifier	executable_buf		3064214	0					
ANR	3066223	Identifier	Value		3064214	1					
ANR	3066224	ArgumentList			3064214	1					
ANR	3066225	ExpressionStatement	first_arg_to_copy = 1	7894:2:242436:242457	3064214	6	True				
ANR	3066226	AssignmentExpression	first_arg_to_copy = 1		3064214	0		=			
ANR	3066227	Identifier	first_arg_to_copy		3064214	0					
ANR	3066228	PrimaryExpression	1		3064214	1					
ANR	3066229	ExpressionStatement	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"	7895:2:242461:242553	3064214	7	True				
ANR	3066230	AssignmentExpression	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		3064214	0		=			
ANR	3066231	Identifier	args_success		3064214	0					
ANR	3066232	CallExpression	"args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		3064214	1					
ANR	3066233	Callee	args . GetArgsStringWin32		3064214	0					
ANR	3066234	MemberAccess	args . GetArgsStringWin32		3064214	0					
ANR	3066235	Identifier	args		3064214	0					
ANR	3066236	Identifier	GetArgsStringWin32		3064214	1					
ANR	3066237	ArgumentList	& strArgs		3064214	1					
ANR	3066238	Argument	& strArgs		3064214	0					
ANR	3066239	UnaryOperationExpression	& strArgs		3064214	0					
ANR	3066240	UnaryOperator	&		3064214	0					
ANR	3066241	Identifier	strArgs		3064214	1					
ANR	3066242	Argument	first_arg_to_copy		3064214	1					
ANR	3066243	Identifier	first_arg_to_copy		3064214	0					
ANR	3066244	Argument	& args_errors		3064214	2					
ANR	3066245	UnaryOperationExpression	& args_errors		3064214	0					
ANR	3066246	UnaryOperator	&		3064214	0					
ANR	3066247	Identifier	args_errors		3064214	1					
ANR	3066248	Statement	dprintf	7900:2:242558:242564	3064214	8	True				
ANR	3066249	Statement	(	7900:10:242566:242566	3064214	9	True				
ANR	3066250	Statement	D_ALWAYS	7901:3:242572:242579	3064214	10	True				
ANR	3066251	Statement	","	7901:11:242580:242580	3064214	11	True				
ANR	3066252	Statement	"""Executable is a batch file, """	7902:3:242586:242615	3064214	12	True				
ANR	3066253	Statement	"""running: %s\\n"""	7903:3:242620:242634	3064214	13	True				
ANR	3066254	Statement	","	7903:18:242635:242635	3064214	14	True				
ANR	3066255	Statement	strArgs	7904:3:242640:242646	3064214	15	True				
ANR	3066256	Statement	.	7904:10:242647:242647	3064214	16	True				
ANR	3066257	Statement	Value	7904:11:242648:242652	3064214	17	True				
ANR	3066258	Statement	(	7904:17:242654:242654	3064214	18	True				
ANR	3066259	Statement	)	7904:18:242655:242655	3064214	19	True				
ANR	3066260	Statement	)	7904:20:242657:242657	3064214	20	True				
ANR	3066261	ExpressionStatement		7904:21:242658:242658	3064214	21	True				
ANR	3066262	ElseStatement	else		3064214	0					
ANR	3066263	IfStatement	if ( allow_scripts && ! binary_executable )		3064214	0					
ANR	3066264	Condition	allow_scripts && ! binary_executable	7906:13:242674:242708	3064214	0	True				
ANR	3066265	AndExpression	allow_scripts && ! binary_executable		3064214	0		&&			
ANR	3066266	Identifier	allow_scripts		3064214	0					
ANR	3066267	UnaryOperationExpression	! binary_executable		3064214	1					
ANR	3066268	UnaryOperator	!		3064214	0					
ANR	3066269	Identifier	binary_executable		3064214	1					
ANR	3066270	CompoundStatement		589:51:18757:18757	3064214	1					
ANR	3066271	ExpressionStatement	"extension = strrchr ( condor_basename ( executable ) , '.' )"	7911:2:242845:242901	3064214	0	True				
ANR	3066272	AssignmentExpression	"extension = strrchr ( condor_basename ( executable ) , '.' )"		3064214	0		=			
ANR	3066273	Identifier	extension		3064214	0					
ANR	3066274	CallExpression	"strrchr ( condor_basename ( executable ) , '.' )"		3064214	1					
ANR	3066275	Callee	strrchr		3064214	0					
ANR	3066276	Identifier	strrchr		3064214	0					
ANR	3066277	ArgumentList	condor_basename ( executable )		3064214	1					
ANR	3066278	Argument	condor_basename ( executable )		3064214	0					
ANR	3066279	CallExpression	condor_basename ( executable )		3064214	0					
ANR	3066280	Callee	condor_basename		3064214	0					
ANR	3066281	Identifier	condor_basename		3064214	0					
ANR	3066282	ArgumentList	executable		3064214	1					
ANR	3066283	Argument	executable		3064214	0					
ANR	3066284	Identifier	executable		3064214	0					
ANR	3066285	Argument	'.'		3064214	1					
ANR	3066286	PrimaryExpression	'.'		3064214	0					
ANR	3066287	IfStatement	if ( ! extension )		3064214	1					
ANR	3066288	Condition	! extension	7913:7:242911:242920	3064214	0	True				
ANR	3066289	UnaryOperationExpression	! extension		3064214	0					
ANR	3066290	UnaryOperator	!		3064214	0					
ANR	3066291	Identifier	extension		3064214	1					
ANR	3066292	CompoundStatement		596:20:18969:18969	3064214	1					
ANR	3066293	Statement	dprintf	7915:3:242930:242936	3064214	0	True				
ANR	3066294	Statement	(	7915:11:242938:242938	3064214	1	True				
ANR	3066295	Statement	D_ALWAYS	7916:4:242945:242952	3064214	2	True				
ANR	3066296	Statement	","	7916:12:242953:242953	3064214	3	True				
ANR	3066297	Statement	"""Create_Process(): Failed to extract """	7917:4:242960:242997	3064214	4	True				
ANR	3066298	Statement	"""the extension from file %s.\\n"""	7918:4:243003:243033	3064214	5	True				
ANR	3066299	Statement	","	7918:35:243034:243034	3064214	6	True				
ANR	3066300	Statement	executable	7918:37:243036:243045	3064214	7	True				
ANR	3066301	Statement	)	7918:48:243047:243047	3064214	8	True				
ANR	3066302	ExpressionStatement		7918:49:243048:243048	3064214	9	True				
ANR	3066303	ExpressionStatement	binary_executable = true	7929:3:243410:243434	3064214	10	True				
ANR	3066304	AssignmentExpression	binary_executable = true		3064214	0		=			
ANR	3066305	Identifier	binary_executable		3064214	0					
ANR	3066306	Identifier	true		3064214	1					
ANR	3066307	ElseStatement	else		3064214	0					
ANR	3066308	CompoundStatement		614:9:19491:19491	3064214	0					
ANR	3066309	ExpressionStatement	"ok = GetExecutableAndArgumentTemplateByExtention ( extension , interpreter )"	7935:3:243531:243616	3064214	0	True				
ANR	3066310	AssignmentExpression	"ok = GetExecutableAndArgumentTemplateByExtention ( extension , interpreter )"		3064214	0		=			
ANR	3066311	Identifier	ok		3064214	0					
ANR	3066312	CallExpression	"GetExecutableAndArgumentTemplateByExtention ( extension , interpreter )"		3064214	1					
ANR	3066313	Callee	GetExecutableAndArgumentTemplateByExtention		3064214	0					
ANR	3066314	Identifier	GetExecutableAndArgumentTemplateByExtention		3064214	0					
ANR	3066315	ArgumentList	extension		3064214	1					
ANR	3066316	Argument	extension		3064214	0					
ANR	3066317	Identifier	extension		3064214	0					
ANR	3066318	Argument	interpreter		3064214	1					
ANR	3066319	Identifier	interpreter		3064214	0					
ANR	3066320	IfStatement	if ( ! ok )		3064214	1					
ANR	3066321	Condition	! ok	7939:8:243627:243629	3064214	0	True				
ANR	3066322	UnaryOperationExpression	! ok		3064214	0					
ANR	3066323	UnaryOperator	!		3064214	0					
ANR	3066324	Identifier	ok		3064214	1					
ANR	3066325	CompoundStatement		622:14:19678:19678	3064214	1					
ANR	3066326	Statement	dprintf	7941:4:243640:243646	3064214	0	True				
ANR	3066327	Statement	(	7941:12:243648:243648	3064214	1	True				
ANR	3066328	Statement	D_ALWAYS	7942:5:243656:243663	3064214	2	True				
ANR	3066329	Statement	","	7942:13:243664:243664	3064214	3	True				
ANR	3066330	Statement	"""Create_Process(): Failed to find an """	7943:5:243672:243709	3064214	4	True				
ANR	3066331	Statement	"""executable for extension *%s\\n"""	7944:5:243716:243747	3064214	5	True				
ANR	3066332	Statement	","	7944:37:243748:243748	3064214	6	True				
ANR	3066333	Statement	extension	7945:5:243755:243763	3064214	7	True				
ANR	3066334	Statement	)	7945:15:243765:243765	3064214	8	True				
ANR	3066335	ExpressionStatement		7945:16:243766:243766	3064214	9	True				
ANR	3066336	ExpressionStatement	binary_executable = true	7951:4:243984:244008	3064214	10	True				
ANR	3066337	AssignmentExpression	binary_executable = true		3064214	0		=			
ANR	3066338	Identifier	binary_executable		3064214	0					
ANR	3066339	Identifier	true		3064214	1					
ANR	3066340	ElseStatement	else		3064214	0					
ANR	3066341	CompoundStatement		636:10:20066:20066	3064214	0					
ANR	3066342	ExpressionStatement	"strArgs . sprintf ( ""\\""%s\\"" \\""%s\\"""" , interpreter , executable )"	7957:4:244120:244196	3064214	0	True				
ANR	3066343	CallExpression	"strArgs . sprintf ( ""\\""%s\\"" \\""%s\\"""" , interpreter , executable )"		3064214	0					
ANR	3066344	Callee	strArgs . sprintf		3064214	0					
ANR	3066345	MemberAccess	strArgs . sprintf		3064214	0					
ANR	3066346	Identifier	strArgs		3064214	0					
ANR	3066347	Identifier	sprintf		3064214	1					
ANR	3066348	ArgumentList	"""\\""%s\\"" \\""%s\\"""""		3064214	1					
ANR	3066349	Argument	"""\\""%s\\"" \\""%s\\"""""		3064214	0					
ANR	3066350	PrimaryExpression	"""\\""%s\\"" \\""%s\\"""""		3064214	0					
ANR	3066351	Argument	interpreter		3064214	1					
ANR	3066352	Identifier	interpreter		3064214	0					
ANR	3066353	Argument	executable		3064214	2					
ANR	3066354	Identifier	executable		3064214	0					
ANR	3066355	ExpressionStatement	executable_buf = interpreter	7964:4:244295:244323	3064214	1	True				
ANR	3066356	AssignmentExpression	executable_buf = interpreter		3064214	0		=			
ANR	3066357	Identifier	executable_buf		3064214	0					
ANR	3066358	Identifier	interpreter		3064214	1					
ANR	3066359	ExpressionStatement	executable = executable_buf . Value ( )	7965:4:244329:244366	3064214	2	True				
ANR	3066360	AssignmentExpression	executable = executable_buf . Value ( )		3064214	0		=			
ANR	3066361	Identifier	executable		3064214	0					
ANR	3066362	CallExpression	executable_buf . Value ( )		3064214	1					
ANR	3066363	Callee	executable_buf . Value		3064214	0					
ANR	3066364	MemberAccess	executable_buf . Value		3064214	0					
ANR	3066365	Identifier	executable_buf		3064214	0					
ANR	3066366	Identifier	Value		3064214	1					
ANR	3066367	ArgumentList			3064214	1					
ANR	3066368	ExpressionStatement	first_arg_to_copy = 1	7969:4:244472:244493	3064214	3	True				
ANR	3066369	AssignmentExpression	first_arg_to_copy = 1		3064214	0		=			
ANR	3066370	Identifier	first_arg_to_copy		3064214	0					
ANR	3066371	PrimaryExpression	1		3064214	1					
ANR	3066372	ExpressionStatement	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"	7970:4:244499:244598	3064214	4	True				
ANR	3066373	AssignmentExpression	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		3064214	0		=			
ANR	3066374	Identifier	args_success		3064214	0					
ANR	3066375	CallExpression	"args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		3064214	1					
ANR	3066376	Callee	args . GetArgsStringWin32		3064214	0					
ANR	3066377	MemberAccess	args . GetArgsStringWin32		3064214	0					
ANR	3066378	Identifier	args		3064214	0					
ANR	3066379	Identifier	GetArgsStringWin32		3064214	1					
ANR	3066380	ArgumentList	& strArgs		3064214	1					
ANR	3066381	Argument	& strArgs		3064214	0					
ANR	3066382	UnaryOperationExpression	& strArgs		3064214	0					
ANR	3066383	UnaryOperator	&		3064214	0					
ANR	3066384	Identifier	strArgs		3064214	1					
ANR	3066385	Argument	first_arg_to_copy		3064214	1					
ANR	3066386	Identifier	first_arg_to_copy		3064214	0					
ANR	3066387	Argument	& args_errors		3064214	2					
ANR	3066388	UnaryOperationExpression	& args_errors		3064214	0					
ANR	3066389	UnaryOperator	&		3064214	0					
ANR	3066390	Identifier	args_errors		3064214	1					
ANR	3066391	Statement	dprintf	7975:4:244609:244615	3064214	5	True				
ANR	3066392	Statement	(	7975:12:244617:244617	3064214	6	True				
ANR	3066393	Statement	D_FULLDEBUG	7976:5:244624:244634	3064214	7	True				
ANR	3066394	Statement	","	7976:16:244635:244635	3064214	8	True				
ANR	3066395	Statement	"""Executable is a *%s script, """	7977:5:244642:244671	3064214	9	True				
ANR	3066396	Statement	"""running: %s\\n"""	7978:5:244678:244692	3064214	10	True				
ANR	3066397	Statement	","	7978:20:244693:244693	3064214	11	True				
ANR	3066398	Statement	extension	7979:5:244700:244708	3064214	12	True				
ANR	3066399	Statement	","	7979:14:244709:244709	3064214	13	True				
ANR	3066400	Statement	strArgs	7980:5:244716:244722	3064214	14	True				
ANR	3066401	Statement	.	7980:12:244723:244723	3064214	15	True				
ANR	3066402	Statement	Value	7980:13:244724:244728	3064214	16	True				
ANR	3066403	Statement	(	7980:19:244730:244730	3064214	17	True				
ANR	3066404	Statement	)	7980:20:244731:244731	3064214	18	True				
ANR	3066405	Statement	)	7980:22:244733:244733	3064214	19	True				
ANR	3066406	ExpressionStatement		7980:23:244734:244734	3064214	20	True				
ANR	3066407	IfStatement	if ( binary_executable && ! bIs16Bit )		3064214	88					
ANR	3066408	Condition	binary_executable && ! bIs16Bit	7992:6:244996:245025	3064214	0	True				
ANR	3066409	AndExpression	binary_executable && ! bIs16Bit		3064214	0		&&			
ANR	3066410	Identifier	binary_executable		3064214	0					
ANR	3066411	UnaryOperationExpression	! bIs16Bit		3064214	1					
ANR	3066412	UnaryOperator	!		3064214	0					
ANR	3066413	Identifier	bIs16Bit		3064214	1					
ANR	3066414	CompoundStatement		675:39:21074:21074	3064214	1					
ANR	3066415	ExpressionStatement	first_arg_to_copy = 0	7995:2:245090:245111	3064214	0	True				
ANR	3066416	AssignmentExpression	first_arg_to_copy = 0		3064214	0		=			
ANR	3066417	Identifier	first_arg_to_copy		3064214	0					
ANR	3066418	PrimaryExpression	0		3064214	1					
ANR	3066419	ExpressionStatement	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"	7996:2:245115:245208	3064214	1	True				
ANR	3066420	AssignmentExpression	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		3064214	0		=			
ANR	3066421	Identifier	args_success		3064214	0					
ANR	3066422	CallExpression	"args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		3064214	1					
ANR	3066423	Callee	args . GetArgsStringWin32		3064214	0					
ANR	3066424	MemberAccess	args . GetArgsStringWin32		3064214	0					
ANR	3066425	Identifier	args		3064214	0					
ANR	3066426	Identifier	GetArgsStringWin32		3064214	1					
ANR	3066427	ArgumentList	& strArgs		3064214	1					
ANR	3066428	Argument	& strArgs		3064214	0					
ANR	3066429	UnaryOperationExpression	& strArgs		3064214	0					
ANR	3066430	UnaryOperator	&		3064214	0					
ANR	3066431	Identifier	strArgs		3064214	1					
ANR	3066432	Argument	first_arg_to_copy		3064214	1					
ANR	3066433	Identifier	first_arg_to_copy		3064214	0					
ANR	3066434	Argument	& args_errors		3064214	2					
ANR	3066435	UnaryOperationExpression	& args_errors		3064214	0					
ANR	3066436	UnaryOperator	&		3064214	0					
ANR	3066437	Identifier	args_errors		3064214	1					
ANR	3066438	IfStatement	if ( ! args_success )		3064214	89					
ANR	3066439	Condition	! args_success	8003:4:245219:245231	3064214	0	True				
ANR	3066440	UnaryOperationExpression	! args_success		3064214	0					
ANR	3066441	UnaryOperator	!		3064214	0					
ANR	3066442	Identifier	args_success		3064214	1					
ANR	3066443	CompoundStatement		686:19:21279:21279	3064214	1					
ANR	3066444	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: failed to produce Win32 argument string from CreateProcess: %s\\n"" , args_errors . Value ( ) )"	8004:2:245238:245350	3064214	0	True				
ANR	3066445	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: failed to produce Win32 argument string from CreateProcess: %s\\n"" , args_errors . Value ( ) )"		3064214	0					
ANR	3066446	Callee	dprintf		3064214	0					
ANR	3066447	Identifier	dprintf		3064214	0					
ANR	3066448	ArgumentList	D_ALWAYS		3064214	1					
ANR	3066449	Argument	D_ALWAYS		3064214	0					
ANR	3066450	Identifier	D_ALWAYS		3064214	0					
ANR	3066451	Argument	"""ERROR: failed to produce Win32 argument string from CreateProcess: %s\\n"""		3064214	1					
ANR	3066452	PrimaryExpression	"""ERROR: failed to produce Win32 argument string from CreateProcess: %s\\n"""		3064214	0					
ANR	3066453	Argument	args_errors . Value ( )		3064214	2					
ANR	3066454	CallExpression	args_errors . Value ( )		3064214	0					
ANR	3066455	Callee	args_errors . Value		3064214	0					
ANR	3066456	MemberAccess	args_errors . Value		3064214	0					
ANR	3066457	Identifier	args_errors		3064214	0					
ANR	3066458	Identifier	Value		3064214	1					
ANR	3066459	ArgumentList			3064214	1					
ANR	3066460	GotoStatement	goto wrapup ;	8005:2:245354:245365	3064214	1	True				
ANR	3066461	Identifier	wrapup		3064214	0					
ANR	3066462	IdentifierDeclStatement	"BOOL cp_result , gbt_result ;"	8008:1:245372:245398	3064214	90	True				
ANR	3066463	IdentifierDecl	cp_result		3064214	0					
ANR	3066464	IdentifierDeclType	BOOL		3064214	0					
ANR	3066465	Identifier	cp_result		3064214	1					
ANR	3066466	IdentifierDecl	gbt_result		3064214	1					
ANR	3066467	IdentifierDeclType	BOOL		3064214	0					
ANR	3066468	Identifier	gbt_result		3064214	1					
ANR	3066469	IdentifierDeclStatement	DWORD binType ;	8009:1:245401:245414	3064214	91	True				
ANR	3066470	IdentifierDecl	binType		3064214	0					
ANR	3066471	IdentifierDeclType	DWORD		3064214	0					
ANR	3066472	Identifier	binType		3064214	1					
ANR	3066473	ExpressionStatement	"gbt_result = GetBinaryType ( executable , & binType )"	8010:1:245417:245465	3064214	92	True				
ANR	3066474	AssignmentExpression	"gbt_result = GetBinaryType ( executable , & binType )"		3064214	0		=			
ANR	3066475	Identifier	gbt_result		3064214	0					
ANR	3066476	CallExpression	"GetBinaryType ( executable , & binType )"		3064214	1					
ANR	3066477	Callee	GetBinaryType		3064214	0					
ANR	3066478	Identifier	GetBinaryType		3064214	0					
ANR	3066479	ArgumentList	executable		3064214	1					
ANR	3066480	Argument	executable		3064214	0					
ANR	3066481	Identifier	executable		3064214	0					
ANR	3066482	Argument	& binType		3064214	1					
ANR	3066483	UnaryOperationExpression	& binType		3064214	0					
ANR	3066484	UnaryOperator	&		3064214	0					
ANR	3066485	Identifier	binType		3064214	1					
ANR	3066486	IfStatement	if ( ! gbt_result )		3064214	93					
ANR	3066487	Condition	! gbt_result	8017:6:245764:245774	3064214	0	True				
ANR	3066488	UnaryOperationExpression	! gbt_result		3064214	0					
ANR	3066489	UnaryOperator	!		3064214	0					
ANR	3066490	Identifier	gbt_result		3064214	1					
ANR	3066491	CompoundStatement		701:2:21827:21881	3064214	1					
ANR	3066492	IdentifierDeclStatement	char * alt_name = alternate_exec_pathname ( executable ) ;	8018:2:245782:245836	3064214	0	True				
ANR	3066493	IdentifierDecl	* alt_name = alternate_exec_pathname ( executable )		3064214	0					
ANR	3066494	IdentifierDeclType	char *		3064214	0					
ANR	3066495	Identifier	alt_name		3064214	1					
ANR	3066496	AssignmentExpression	* alt_name = alternate_exec_pathname ( executable )		3064214	2		=			
ANR	3066497	Identifier	alt_name		3064214	0					
ANR	3066498	CallExpression	alternate_exec_pathname ( executable )		3064214	1					
ANR	3066499	Callee	alternate_exec_pathname		3064214	0					
ANR	3066500	Identifier	alternate_exec_pathname		3064214	0					
ANR	3066501	ArgumentList	executable		3064214	1					
ANR	3066502	Argument	executable		3064214	0					
ANR	3066503	Identifier	executable		3064214	0					
ANR	3066504	IfStatement	if ( alt_name )		3064214	1					
ANR	3066505	Condition	alt_name	8019:7:245845:245852	3064214	0	True				
ANR	3066506	Identifier	alt_name		3064214	0					
ANR	3066507	CompoundStatement		702:18:21901:21901	3064214	1					
ANR	3066508	ExpressionStatement	executable_with_exe = alt_name	8020:3:245861:245891	3064214	0	True				
ANR	3066509	AssignmentExpression	executable_with_exe = alt_name		3064214	0		=			
ANR	3066510	Identifier	executable_with_exe		3064214	0					
ANR	3066511	Identifier	alt_name		3064214	1					
ANR	3066512	ExpressionStatement	executable = executable_with_exe . Value ( )	8021:3:245896:245936	3064214	1	True				
ANR	3066513	AssignmentExpression	executable = executable_with_exe . Value ( )		3064214	0		=			
ANR	3066514	Identifier	executable		3064214	0					
ANR	3066515	CallExpression	executable_with_exe . Value ( )		3064214	1					
ANR	3066516	Callee	executable_with_exe . Value		3064214	0					
ANR	3066517	MemberAccess	executable_with_exe . Value		3064214	0					
ANR	3066518	Identifier	executable_with_exe		3064214	0					
ANR	3066519	Identifier	Value		3064214	1					
ANR	3066520	ArgumentList			3064214	1					
ANR	3066521	ExpressionStatement	free ( alt_name )	8022:3:245941:245955	3064214	2	True				
ANR	3066522	CallExpression	free ( alt_name )		3064214	0					
ANR	3066523	Callee	free		3064214	0					
ANR	3066524	Identifier	free		3064214	0					
ANR	3066525	ArgumentList	alt_name		3064214	1					
ANR	3066526	Argument	alt_name		3064214	0					
ANR	3066527	Identifier	alt_name		3064214	0					
ANR	3066528	ExpressionStatement	"gbt_result = GetBinaryType ( executable , & binType )"	8024:3:245994:246042	3064214	3	True				
ANR	3066529	AssignmentExpression	"gbt_result = GetBinaryType ( executable , & binType )"		3064214	0		=			
ANR	3066530	Identifier	gbt_result		3064214	0					
ANR	3066531	CallExpression	"GetBinaryType ( executable , & binType )"		3064214	1					
ANR	3066532	Callee	GetBinaryType		3064214	0					
ANR	3066533	Identifier	GetBinaryType		3064214	0					
ANR	3066534	ArgumentList	executable		3064214	1					
ANR	3066535	Argument	executable		3064214	0					
ANR	3066536	Identifier	executable		3064214	0					
ANR	3066537	Argument	& binType		3064214	1					
ANR	3066538	UnaryOperationExpression	& binType		3064214	0					
ANR	3066539	UnaryOperator	&		3064214	0					
ANR	3066540	Identifier	binType		3064214	1					
ANR	3066541	IfStatement	if ( ! gbt_result || ( binType == SCS_DOS_BINARY && ! bIs16Bit ) )		3064214	94					
ANR	3066542	Condition	! gbt_result || ( binType == SCS_DOS_BINARY && ! bIs16Bit )	8031:6:246269:246324	3064214	0	True				
ANR	3066543	OrExpression	! gbt_result || ( binType == SCS_DOS_BINARY && ! bIs16Bit )		3064214	0		||			
ANR	3066544	UnaryOperationExpression	! gbt_result		3064214	0					
ANR	3066545	UnaryOperator	!		3064214	0					
ANR	3066546	Identifier	gbt_result		3064214	1					
ANR	3066547	AndExpression	binType == SCS_DOS_BINARY && ! bIs16Bit		3064214	1		&&			
ANR	3066548	EqualityExpression	binType == SCS_DOS_BINARY		3064214	0		==			
ANR	3066549	Identifier	binType		3064214	0					
ANR	3066550	Identifier	SCS_DOS_BINARY		3064214	1					
ANR	3066551	UnaryOperationExpression	! bIs16Bit		3064214	1					
ANR	3066552	UnaryOperator	!		3064214	0					
ANR	3066553	Identifier	bIs16Bit		3064214	1					
ANR	3066554	CompoundStatement		714:65:22373:22373	3064214	1					
ANR	3066555	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: %s is not a valid Windows executable\\n"" , executable )"	8033:2:246333:246418	3064214	0	True				
ANR	3066556	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: %s is not a valid Windows executable\\n"" , executable )"		3064214	0					
ANR	3066557	Callee	dprintf		3064214	0					
ANR	3066558	Identifier	dprintf		3064214	0					
ANR	3066559	ArgumentList	D_ALWAYS		3064214	1					
ANR	3066560	Argument	D_ALWAYS		3064214	0					
ANR	3066561	Identifier	D_ALWAYS		3064214	0					
ANR	3066562	Argument	"""ERROR: %s is not a valid Windows executable\\n"""		3064214	1					
ANR	3066563	PrimaryExpression	"""ERROR: %s is not a valid Windows executable\\n"""		3064214	0					
ANR	3066564	Argument	executable		3064214	2					
ANR	3066565	Identifier	executable		3064214	0					
ANR	3066566	ExpressionStatement	cp_result = 0	8035:2:246422:246435	3064214	1	True				
ANR	3066567	AssignmentExpression	cp_result = 0		3064214	0		=			
ANR	3066568	Identifier	cp_result		3064214	0					
ANR	3066569	PrimaryExpression	0		3064214	1					
ANR	3066570	GotoStatement	goto wrapup ;	8037:2:246440:246451	3064214	2	True				
ANR	3066571	Identifier	wrapup		3064214	0					
ANR	3066572	ElseStatement	else		3064214	0					
ANR	3066573	CompoundStatement		721:8:22506:22506	3064214	0					
ANR	3066574	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""GetBinaryType() returned %d\\n"" , binType )"	8039:2:246465:246527	3064214	0	True				
ANR	3066575	CallExpression	"dprintf ( D_FULLDEBUG , ""GetBinaryType() returned %d\\n"" , binType )"		3064214	0					
ANR	3066576	Callee	dprintf		3064214	0					
ANR	3066577	Identifier	dprintf		3064214	0					
ANR	3066578	ArgumentList	D_FULLDEBUG		3064214	1					
ANR	3066579	Argument	D_FULLDEBUG		3064214	0					
ANR	3066580	Identifier	D_FULLDEBUG		3064214	0					
ANR	3066581	Argument	"""GetBinaryType() returned %d\\n"""		3064214	1					
ANR	3066582	PrimaryExpression	"""GetBinaryType() returned %d\\n"""		3064214	0					
ANR	3066583	Argument	binType		3064214	2					
ANR	3066584	Identifier	binType		3064214	0					
ANR	3066585	IfStatement	if ( family_info != NULL )		3064214	95					
ANR	3066586	Condition	family_info != NULL	8046:5:246689:246707	3064214	0	True				
ANR	3066587	EqualityExpression	family_info != NULL		3064214	0		!=			
ANR	3066588	Identifier	family_info		3064214	0					
ANR	3066589	Identifier	NULL		3064214	1					
ANR	3066590	CompoundStatement		729:26:22755:22755	3064214	1					
ANR	3066591	ExpressionStatement	create_process_flags |= CREATE_SUSPENDED	8047:2:246714:246754	3064214	0	True				
ANR	3066592	AssignmentExpression	create_process_flags |= CREATE_SUSPENDED		3064214	0		|=			
ANR	3066593	Identifier	create_process_flags		3064214	0					
ANR	3066594	Identifier	CREATE_SUSPENDED		3064214	1					
ANR	3066595	IfStatement	if ( priv == PRIV_USER_FINAL )		3064214	96					
ANR	3066596	Condition	priv == PRIV_USER_FINAL	8055:6:247011:247033	3064214	0	True				
ANR	3066597	EqualityExpression	priv == PRIV_USER_FINAL		3064214	0		==			
ANR	3066598	Identifier	priv		3064214	0					
ANR	3066599	Identifier	PRIV_USER_FINAL		3064214	1					
ANR	3066600	CompoundStatement		738:32:23082:23082	3064214	1					
ANR	3066601	ExpressionStatement	create_process_flags |= CREATE_NEW_CONSOLE	8056:2:247041:247083	3064214	0	True				
ANR	3066602	AssignmentExpression	create_process_flags |= CREATE_NEW_CONSOLE		3064214	0		|=			
ANR	3066603	Identifier	create_process_flags		3064214	0					
ANR	3066604	Identifier	CREATE_NEW_CONSOLE		3064214	1					
ANR	3066605	ExpressionStatement	si . dwFlags |= STARTF_USESHOWWINDOW	8057:2:247087:247121	3064214	1	True				
ANR	3066606	AssignmentExpression	si . dwFlags |= STARTF_USESHOWWINDOW		3064214	0		|=			
ANR	3066607	MemberAccess	si . dwFlags		3064214	0					
ANR	3066608	Identifier	si		3064214	0					
ANR	3066609	Identifier	dwFlags		3064214	1					
ANR	3066610	Identifier	STARTF_USESHOWWINDOW		3064214	1					
ANR	3066611	ExpressionStatement	si . wShowWindow = SW_SHOWNOACTIVATE	8058:8:247131:247165	3064214	2	True				
ANR	3066612	AssignmentExpression	si . wShowWindow = SW_SHOWNOACTIVATE		3064214	0		=			
ANR	3066613	MemberAccess	si . wShowWindow		3064214	0					
ANR	3066614	Identifier	si		3064214	0					
ANR	3066615	Identifier	wShowWindow		3064214	1					
ANR	3066616	Identifier	SW_SHOWNOACTIVATE		3064214	1					
ANR	3066617	IdentifierDeclStatement	const char * cwdBackup ;	8061:1:247172:247193	3064214	97	True				
ANR	3066618	IdentifierDecl	* cwdBackup		3064214	0					
ANR	3066619	IdentifierDeclType	const char *		3064214	0					
ANR	3066620	Identifier	cwdBackup		3064214	1					
ANR	3066621	IfStatement	if ( cwd && ( cwd [ 0 ] == '\\0' ) )		3064214	98					
ANR	3066622	Condition	cwd && ( cwd [ 0 ] == '\\0' )	8062:5:247200:247222	3064214	0	True				
ANR	3066623	AndExpression	cwd && ( cwd [ 0 ] == '\\0' )		3064214	0		&&			
ANR	3066624	Identifier	cwd		3064214	0					
ANR	3066625	EqualityExpression	cwd [ 0 ] == '\\0'		3064214	1		==			
ANR	3066626	ArrayIndexing	cwd [ 0 ]		3064214	0					
ANR	3066627	Identifier	cwd		3064214	0					
ANR	3066628	PrimaryExpression	0		3064214	1					
ANR	3066629	PrimaryExpression	'\\0'		3064214	1					
ANR	3066630	CompoundStatement		745:30:23270:23270	3064214	1					
ANR	3066631	ExpressionStatement	cwdBackup = NULL	8063:2:247229:247245	3064214	0	True				
ANR	3066632	AssignmentExpression	cwdBackup = NULL		3064214	0		=			
ANR	3066633	Identifier	cwdBackup		3064214	0					
ANR	3066634	Identifier	NULL		3064214	1					
ANR	3066635	ElseStatement	else		3064214	0					
ANR	3066636	CompoundStatement		747:8:23300:23300	3064214	0					
ANR	3066637	ExpressionStatement	cwdBackup = cwd	8065:2:247259:247274	3064214	0	True				
ANR	3066638	AssignmentExpression	cwdBackup = cwd		3064214	0		=			
ANR	3066639	Identifier	cwdBackup		3064214	0					
ANR	3066640	Identifier	cwd		3064214	1					
ANR	3066641	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_Process000"" , IF_VERBOSEPUB , runtime )"	8068:4:247286:247368	3064214	99	True				
ANR	3066642	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_Process000"" , IF_VERBOSEPUB , runtime )"		3064214	0		=			
ANR	3066643	Identifier	runtime		3064214	0					
ANR	3066644	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreate_Process000"" , IF_VERBOSEPUB , runtime )"		3064214	1					
ANR	3066645	Callee	dc_stats . AddRuntimeSample		3064214	0					
ANR	3066646	MemberAccess	dc_stats . AddRuntimeSample		3064214	0					
ANR	3066647	Identifier	dc_stats		3064214	0					
ANR	3066648	Identifier	AddRuntimeSample		3064214	1					
ANR	3066649	ArgumentList	"""DCCreate_Process000"""		3064214	1					
ANR	3066650	Argument	"""DCCreate_Process000"""		3064214	0					
ANR	3066651	PrimaryExpression	"""DCCreate_Process000"""		3064214	0					
ANR	3066652	Argument	IF_VERBOSEPUB		3064214	1					
ANR	3066653	Identifier	IF_VERBOSEPUB		3064214	0					
ANR	3066654	Argument	runtime		3064214	2					
ANR	3066655	Identifier	runtime		3064214	0					
ANR	3066656	IfStatement	if ( priv != PRIV_USER_FINAL || ! can_switch_ids ( ) )		3064214	100					
ANR	3066657	Condition	priv != PRIV_USER_FINAL || ! can_switch_ids ( )	8070:9:247380:247423	3064214	0	True				
ANR	3066658	OrExpression	priv != PRIV_USER_FINAL || ! can_switch_ids ( )		3064214	0		||			
ANR	3066659	EqualityExpression	priv != PRIV_USER_FINAL		3064214	0		!=			
ANR	3066660	Identifier	priv		3064214	0					
ANR	3066661	Identifier	PRIV_USER_FINAL		3064214	1					
ANR	3066662	UnaryOperationExpression	! can_switch_ids ( )		3064214	1					
ANR	3066663	UnaryOperator	!		3064214	0					
ANR	3066664	CallExpression	can_switch_ids ( )		3064214	1					
ANR	3066665	Callee	can_switch_ids		3064214	0					
ANR	3066666	Identifier	can_switch_ids		3064214	0					
ANR	3066667	ArgumentList			3064214	1					
ANR	3066668	CompoundStatement		753:56:23472:23472	3064214	1					
ANR	3066669	Statement	cp_result	8071:2:247431:247439	3064214	0	True				
ANR	3066670	Statement	=	8071:12:247441:247441	3064214	1	True				
ANR	3066671	Statement	::	8071:14:247443:247444	3064214	2	True				
ANR	3066672	ExpressionStatement	"CreateProcess ( bIs16Bit ? NULL : executable , ( char * ) strArgs . Value ( ) , NULL , NULL , inherit_handles , create_process_flags , newenv , cwdBackup , & si , & piProcess )"	8071:16:247445:247595	3064214	3	True				
ANR	3066673	CallExpression	"CreateProcess ( bIs16Bit ? NULL : executable , ( char * ) strArgs . Value ( ) , NULL , NULL , inherit_handles , create_process_flags , newenv , cwdBackup , & si , & piProcess )"		3064214	0					
ANR	3066674	Callee	CreateProcess		3064214	0					
ANR	3066675	Identifier	CreateProcess		3064214	0					
ANR	3066676	ArgumentList	bIs16Bit ? NULL : executable		3064214	1					
ANR	3066677	Argument	bIs16Bit ? NULL : executable		3064214	0					
ANR	3066678	ConditionalExpression	bIs16Bit ? NULL : executable		3064214	0					
ANR	3066679	Condition	bIs16Bit		3064214	0					
ANR	3066680	Identifier	bIs16Bit		3064214	0					
ANR	3066681	Identifier	NULL		3064214	1					
ANR	3066682	Identifier	executable		3064214	2					
ANR	3066683	Argument	( char * ) strArgs . Value ( )		3064214	1					
ANR	3066684	CastExpression	( char * ) strArgs . Value ( )		3064214	0					
ANR	3066685	CastTarget	char *		3064214	0					
ANR	3066686	CallExpression	strArgs . Value ( )		3064214	1					
ANR	3066687	Callee	strArgs . Value		3064214	0					
ANR	3066688	MemberAccess	strArgs . Value		3064214	0					
ANR	3066689	Identifier	strArgs		3064214	0					
ANR	3066690	Identifier	Value		3064214	1					
ANR	3066691	ArgumentList			3064214	1					
ANR	3066692	Argument	NULL		3064214	2					
ANR	3066693	Identifier	NULL		3064214	0					
ANR	3066694	Argument	NULL		3064214	3					
ANR	3066695	Identifier	NULL		3064214	0					
ANR	3066696	Argument	inherit_handles		3064214	4					
ANR	3066697	Identifier	inherit_handles		3064214	0					
ANR	3066698	Argument	create_process_flags		3064214	5					
ANR	3066699	Identifier	create_process_flags		3064214	0					
ANR	3066700	Argument	newenv		3064214	6					
ANR	3066701	Identifier	newenv		3064214	0					
ANR	3066702	Argument	cwdBackup		3064214	7					
ANR	3066703	Identifier	cwdBackup		3064214	0					
ANR	3066704	Argument	& si		3064214	8					
ANR	3066705	UnaryOperationExpression	& si		3064214	0					
ANR	3066706	UnaryOperator	&		3064214	0					
ANR	3066707	Identifier	si		3064214	1					
ANR	3066708	Argument	& piProcess		3064214	9					
ANR	3066709	UnaryOperationExpression	& piProcess		3064214	0					
ANR	3066710	UnaryOperator	&		3064214	0					
ANR	3066711	Identifier	piProcess		3064214	1					
ANR	3066712	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreateProcessW32"" , IF_VERBOSEPUB , runtime )"	8074:8:247606:247687	3064214	4	True				
ANR	3066713	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreateProcessW32"" , IF_VERBOSEPUB , runtime )"		3064214	0		=			
ANR	3066714	Identifier	runtime		3064214	0					
ANR	3066715	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreateProcessW32"" , IF_VERBOSEPUB , runtime )"		3064214	1					
ANR	3066716	Callee	dc_stats . AddRuntimeSample		3064214	0					
ANR	3066717	MemberAccess	dc_stats . AddRuntimeSample		3064214	0					
ANR	3066718	Identifier	dc_stats		3064214	0					
ANR	3066719	Identifier	AddRuntimeSample		3064214	1					
ANR	3066720	ArgumentList	"""DCCreateProcessW32"""		3064214	1					
ANR	3066721	Argument	"""DCCreateProcessW32"""		3064214	0					
ANR	3066722	PrimaryExpression	"""DCCreateProcessW32"""		3064214	0					
ANR	3066723	Argument	IF_VERBOSEPUB		3064214	1					
ANR	3066724	Identifier	IF_VERBOSEPUB		3064214	0					
ANR	3066725	Argument	runtime		3064214	2					
ANR	3066726	Identifier	runtime		3064214	0					
ANR	3066727	ElseStatement	else		3064214	0					
ANR	3066728	CompoundStatement		801:2:25415:25445	3064214	0					
ANR	3066729	IdentifierDeclStatement	HANDLE user_token = priv_state_get_handle ( ) ;	8080:2:247802:247845	3064214	0	True				
ANR	3066730	IdentifierDecl	user_token = priv_state_get_handle ( )		3064214	0					
ANR	3066731	IdentifierDeclType	HANDLE		3064214	0					
ANR	3066732	Identifier	user_token		3064214	1					
ANR	3066733	AssignmentExpression	user_token = priv_state_get_handle ( )		3064214	2		=			
ANR	3066734	Identifier	user_token		3064214	0					
ANR	3066735	CallExpression	priv_state_get_handle ( )		3064214	1					
ANR	3066736	Callee	priv_state_get_handle		3064214	0					
ANR	3066737	Identifier	priv_state_get_handle		3064214	0					
ANR	3066738	ArgumentList			3064214	1					
ANR	3066739	ExpressionStatement	ASSERT ( user_token )	8081:2:247849:247867	3064214	1	True				
ANR	3066740	CallExpression	ASSERT ( user_token )		3064214	0					
ANR	3066741	Callee	ASSERT		3064214	0					
ANR	3066742	Identifier	ASSERT		3064214	0					
ANR	3066743	ArgumentList	user_token		3064214	1					
ANR	3066744	Argument	user_token		3064214	0					
ANR	3066745	Identifier	user_token		3064214	0					
ANR	3066746	ExpressionStatement	"si . lpDesktop = """""	8086:2:248011:248028	3064214	2	True				
ANR	3066747	AssignmentExpression	"si . lpDesktop = """""		3064214	0		=			
ANR	3066748	MemberAccess	si . lpDesktop		3064214	0					
ANR	3066749	Identifier	si		3064214	0					
ANR	3066750	Identifier	lpDesktop		3064214	1					
ANR	3066751	PrimaryExpression	""""""		3064214	1					
ANR	3066752	IfStatement	"if ( param_boolean_crufty ( ""USE_VISIBLE_DESKTOP"" , false ) )"		3064214	3					
ANR	3066753	Condition	"param_boolean_crufty ( ""USE_VISIBLE_DESKTOP"" , false )"	8091:6:248213:248262	3064214	0	True				
ANR	3066754	CallExpression	"param_boolean_crufty ( ""USE_VISIBLE_DESKTOP"" , false )"		3064214	0					
ANR	3066755	Callee	param_boolean_crufty		3064214	0					
ANR	3066756	Identifier	param_boolean_crufty		3064214	0					
ANR	3066757	ArgumentList	"""USE_VISIBLE_DESKTOP"""		3064214	1					
ANR	3066758	Argument	"""USE_VISIBLE_DESKTOP"""		3064214	0					
ANR	3066759	PrimaryExpression	"""USE_VISIBLE_DESKTOP"""		3064214	0					
ANR	3066760	Argument	false		3064214	1					
ANR	3066761	Identifier	false		3064214	0					
ANR	3066762	CompoundStatement		774:58:24310:24310	3064214	1					
ANR	3066763	IfStatement	if ( GrantDesktopAccess ( user_token ) == 0 )		3064214	0					
ANR	3066764	Condition	GrantDesktopAccess ( user_token ) == 0	8094:8:248376:248410	3064214	0	True				
ANR	3066765	EqualityExpression	GrantDesktopAccess ( user_token ) == 0		3064214	0		==			
ANR	3066766	CallExpression	GrantDesktopAccess ( user_token )		3064214	0					
ANR	3066767	Callee	GrantDesktopAccess		3064214	0					
ANR	3066768	Identifier	GrantDesktopAccess		3064214	0					
ANR	3066769	ArgumentList	user_token		3064214	1					
ANR	3066770	Argument	user_token		3064214	0					
ANR	3066771	Identifier	user_token		3064214	0					
ANR	3066772	PrimaryExpression	0		3064214	1					
ANR	3066773	CompoundStatement		777:46:24459:24459	3064214	1					
ANR	3066774	ExpressionStatement	"si . lpDesktop = ""winsta0\\\\default"""	8097:4:248526:248559	3064214	0	True				
ANR	3066775	AssignmentExpression	"si . lpDesktop = ""winsta0\\\\default"""		3064214	0		=			
ANR	3066776	MemberAccess	si . lpDesktop		3064214	0					
ANR	3066777	Identifier	si		3064214	0					
ANR	3066778	Identifier	lpDesktop		3064214	1					
ANR	3066779	PrimaryExpression	"""winsta0\\\\default"""		3064214	1					
ANR	3066780	ElseStatement	else		3064214	0					
ANR	3066781	CompoundStatement		781:10:24616:24616	3064214	0					
ANR	3066782	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: Unable to use visible desktop\\n"" )"	8102:4:248747:248820	3064214	0	True				
ANR	3066783	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: Unable to use visible desktop\\n"" )"		3064214	0					
ANR	3066784	Callee	dprintf		3064214	0					
ANR	3066785	Identifier	dprintf		3064214	0					
ANR	3066786	ArgumentList	D_ALWAYS		3064214	1					
ANR	3066787	Argument	D_ALWAYS		3064214	0					
ANR	3066788	Identifier	D_ALWAYS		3064214	0					
ANR	3066789	Argument	"""Create_Process: Unable to use visible desktop\\n"""		3064214	1					
ANR	3066790	PrimaryExpression	"""Create_Process: Unable to use visible desktop\\n"""		3064214	0					
ANR	3066791	IdentifierDeclStatement	priv_state s = set_user_priv ( ) ;	8118:2:249370:249400	3064214	4	True				
ANR	3066792	IdentifierDecl	s = set_user_priv ( )		3064214	0					
ANR	3066793	IdentifierDeclType	priv_state		3064214	0					
ANR	3066794	Identifier	s		3064214	1					
ANR	3066795	AssignmentExpression	s = set_user_priv ( )		3064214	2		=			
ANR	3066796	Identifier	s		3064214	0					
ANR	3066797	CallExpression	set_user_priv ( )		3064214	1					
ANR	3066798	Callee	set_user_priv		3064214	0					
ANR	3066799	Identifier	set_user_priv		3064214	0					
ANR	3066800	ArgumentList			3064214	1					
ANR	3066801	Statement	cp_result	8120:2:249405:249413	3064214	5	True				
ANR	3066802	Statement	=	8120:12:249415:249415	3064214	6	True				
ANR	3066803	Statement	::	8120:14:249417:249418	3064214	7	True				
ANR	3066804	ExpressionStatement	"CreateProcessAsUser ( user_token , bIs16Bit ? NULL : executable , ( char * ) strArgs . Value ( ) , NULL , NULL , inherit_handles , create_process_flags , newenv , cwdBackup , & si , & piProcess )"	8120:16:249419:249592	3064214	8	True				
ANR	3066805	CallExpression	"CreateProcessAsUser ( user_token , bIs16Bit ? NULL : executable , ( char * ) strArgs . Value ( ) , NULL , NULL , inherit_handles , create_process_flags , newenv , cwdBackup , & si , & piProcess )"		3064214	0					
ANR	3066806	Callee	CreateProcessAsUser		3064214	0					
ANR	3066807	Identifier	CreateProcessAsUser		3064214	0					
ANR	3066808	ArgumentList	user_token		3064214	1					
ANR	3066809	Argument	user_token		3064214	0					
ANR	3066810	Identifier	user_token		3064214	0					
ANR	3066811	Argument	bIs16Bit ? NULL : executable		3064214	1					
ANR	3066812	ConditionalExpression	bIs16Bit ? NULL : executable		3064214	0					
ANR	3066813	Condition	bIs16Bit		3064214	0					
ANR	3066814	Identifier	bIs16Bit		3064214	0					
ANR	3066815	Identifier	NULL		3064214	1					
ANR	3066816	Identifier	executable		3064214	2					
ANR	3066817	Argument	( char * ) strArgs . Value ( )		3064214	2					
ANR	3066818	CastExpression	( char * ) strArgs . Value ( )		3064214	0					
ANR	3066819	CastTarget	char *		3064214	0					
ANR	3066820	CallExpression	strArgs . Value ( )		3064214	1					
ANR	3066821	Callee	strArgs . Value		3064214	0					
ANR	3066822	MemberAccess	strArgs . Value		3064214	0					
ANR	3066823	Identifier	strArgs		3064214	0					
ANR	3066824	Identifier	Value		3064214	1					
ANR	3066825	ArgumentList			3064214	1					
ANR	3066826	Argument	NULL		3064214	3					
ANR	3066827	Identifier	NULL		3064214	0					
ANR	3066828	Argument	NULL		3064214	4					
ANR	3066829	Identifier	NULL		3064214	0					
ANR	3066830	Argument	inherit_handles		3064214	5					
ANR	3066831	Identifier	inherit_handles		3064214	0					
ANR	3066832	Argument	create_process_flags		3064214	6					
ANR	3066833	Identifier	create_process_flags		3064214	0					
ANR	3066834	Argument	newenv		3064214	7					
ANR	3066835	Identifier	newenv		3064214	0					
ANR	3066836	Argument	cwdBackup		3064214	8					
ANR	3066837	Identifier	cwdBackup		3064214	0					
ANR	3066838	Argument	& si		3064214	9					
ANR	3066839	UnaryOperationExpression	& si		3064214	0					
ANR	3066840	UnaryOperator	&		3064214	0					
ANR	3066841	Identifier	si		3064214	1					
ANR	3066842	Argument	& piProcess		3064214	10					
ANR	3066843	UnaryOperationExpression	& piProcess		3064214	0					
ANR	3066844	UnaryOperator	&		3064214	0					
ANR	3066845	Identifier	piProcess		3064214	1					
ANR	3066846	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreateProcessAsUser"" , IF_VERBOSEPUB , runtime )"	8124:8:249603:249687	3064214	9	True				
ANR	3066847	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreateProcessAsUser"" , IF_VERBOSEPUB , runtime )"		3064214	0		=			
ANR	3066848	Identifier	runtime		3064214	0					
ANR	3066849	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreateProcessAsUser"" , IF_VERBOSEPUB , runtime )"		3064214	1					
ANR	3066850	Callee	dc_stats . AddRuntimeSample		3064214	0					
ANR	3066851	MemberAccess	dc_stats . AddRuntimeSample		3064214	0					
ANR	3066852	Identifier	dc_stats		3064214	0					
ANR	3066853	Identifier	AddRuntimeSample		3064214	1					
ANR	3066854	ArgumentList	"""DCCreateProcessAsUser"""		3064214	1					
ANR	3066855	Argument	"""DCCreateProcessAsUser"""		3064214	0					
ANR	3066856	PrimaryExpression	"""DCCreateProcessAsUser"""		3064214	0					
ANR	3066857	Argument	IF_VERBOSEPUB		3064214	1					
ANR	3066858	Identifier	IF_VERBOSEPUB		3064214	0					
ANR	3066859	Argument	runtime		3064214	2					
ANR	3066860	Identifier	runtime		3064214	0					
ANR	3066861	ExpressionStatement	set_priv ( s )	8126:2:249692:249703	3064214	10	True				
ANR	3066862	CallExpression	set_priv ( s )		3064214	0					
ANR	3066863	Callee	set_priv		3064214	0					
ANR	3066864	Identifier	set_priv		3064214	0					
ANR	3066865	ArgumentList	s		3064214	1					
ANR	3066866	Argument	s		3064214	0					
ANR	3066867	Identifier	s		3064214	0					
ANR	3066868	IfStatement	if ( ! cp_result )		3064214	101					
ANR	3066869	Condition	! cp_result	8129:6:249715:249724	3064214	0	True				
ANR	3066870	UnaryOperationExpression	! cp_result		3064214	0					
ANR	3066871	UnaryOperator	!		3064214	0					
ANR	3066872	Identifier	cp_result		3064214	1					
ANR	3066873	CompoundStatement		812:19:25773:25773	3064214	1					
ANR	3066874	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: CreateProcess failed, errno=%d\\n"" , GetLastError ( ) )"	8130:2:249732:249819	3064214	0	True				
ANR	3066875	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: CreateProcess failed, errno=%d\\n"" , GetLastError ( ) )"		3064214	0					
ANR	3066876	Callee	dprintf		3064214	0					
ANR	3066877	Identifier	dprintf		3064214	0					
ANR	3066878	ArgumentList	D_ALWAYS		3064214	1					
ANR	3066879	Argument	D_ALWAYS		3064214	0					
ANR	3066880	Identifier	D_ALWAYS		3064214	0					
ANR	3066881	Argument	"""Create_Process: CreateProcess failed, errno=%d\\n"""		3064214	1					
ANR	3066882	PrimaryExpression	"""Create_Process: CreateProcess failed, errno=%d\\n"""		3064214	0					
ANR	3066883	Argument	GetLastError ( )		3064214	2					
ANR	3066884	CallExpression	GetLastError ( )		3064214	0					
ANR	3066885	Callee	GetLastError		3064214	0					
ANR	3066886	Identifier	GetLastError		3064214	0					
ANR	3066887	ArgumentList			3064214	1					
ANR	3066888	GotoStatement	goto wrapup ;	8132:2:249823:249834	3064214	1	True				
ANR	3066889	Identifier	wrapup		3064214	0					
ANR	3066890	ExpressionStatement	newpid = piProcess . dwProcessId	8137:1:249880:249910	3064214	102	True				
ANR	3066891	AssignmentExpression	newpid = piProcess . dwProcessId		3064214	0		=			
ANR	3066892	Identifier	newpid		3064214	0					
ANR	3066893	MemberAccess	piProcess . dwProcessId		3064214	1					
ANR	3066894	Identifier	piProcess		3064214	0					
ANR	3066895	Identifier	dwProcessId		3064214	1					
ANR	3066896	IfStatement	if ( affinity_mask )		3064214	103					
ANR	3066897	Condition	affinity_mask	8141:6:249997:250009	3064214	0	True				
ANR	3066898	Identifier	affinity_mask		3064214	0					
ANR	3066899	CompoundStatement		837:2:26327:26396	3064214	1					
ANR	3066900	IdentifierDeclStatement	DWORD_PTR mask = 0 ;	8144:2:250062:250080	3064214	0	True				
ANR	3066901	IdentifierDecl	mask = 0		3064214	0					
ANR	3066902	IdentifierDeclType	DWORD_PTR		3064214	0					
ANR	3066903	Identifier	mask		3064214	1					
ANR	3066904	AssignmentExpression	mask = 0		3064214	2		=			
ANR	3066905	Identifier	mask		3064214	0					
ANR	3066906	PrimaryExpression	0		3064214	1					
ANR	3066907	ForStatement	for ( int i = 1 ; i < affinity_mask [ 0 ] ; ++ i )		3064214	1					
ANR	3066908	ForInit	int i = 1 ;	8145:8:250090:250099	3064214	0	True				
ANR	3066909	IdentifierDeclStatement	int i = 1 ;		3064214	0					
ANR	3066910	IdentifierDecl	i = 1		3064214	0					
ANR	3066911	IdentifierDeclType	int		3064214	0					
ANR	3066912	Identifier	i		3064214	1					
ANR	3066913	AssignmentExpression	i = 1		3064214	2		=			
ANR	3066914	Identifier	i		3064214	0					
ANR	3066915	PrimaryExpression	1		3064214	1					
ANR	3066916	Condition	i < affinity_mask [ 0 ]	8145:19:250101:250120	3064214	1	True				
ANR	3066917	RelationalExpression	i < affinity_mask [ 0 ]		3064214	0		<			
ANR	3066918	Identifier	i		3064214	0					
ANR	3066919	ArrayIndexing	affinity_mask [ 0 ]		3064214	1					
ANR	3066920	Identifier	affinity_mask		3064214	0					
ANR	3066921	PrimaryExpression	0		3064214	1					
ANR	3066922	UnaryExpression	++ i	8145:41:250123:250125	3064214	2	True				
ANR	3066923	IncDec	++		3064214	0					
ANR	3066924	Identifier	i		3064214	1					
ANR	3066925	CompoundStatement		828:47:26174:26174	3064214	3					
ANR	3066926	ExpressionStatement	mask |= ( 1 << affinity_mask [ i ] )	8146:3:250134:250167	3064214	0	True				
ANR	3066927	AssignmentExpression	mask |= ( 1 << affinity_mask [ i ] )		3064214	0		|=			
ANR	3066928	Identifier	mask		3064214	0					
ANR	3066929	ShiftExpression	1 << affinity_mask [ i ]		3064214	1		<<			
ANR	3066930	PrimaryExpression	1		3064214	0					
ANR	3066931	ArrayIndexing	affinity_mask [ i ]		3064214	1					
ANR	3066932	Identifier	affinity_mask		3064214	0					
ANR	3066933	Identifier	i		3064214	1					
ANR	3066934	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Setting process affinity\\n"" )"	8149:2:250176:250237	3064214	2	True				
ANR	3066935	CallExpression	"dprintf ( D_FULLDEBUG , ""Setting process affinity\\n"" )"		3064214	0					
ANR	3066936	Callee	dprintf		3064214	0					
ANR	3066937	Identifier	dprintf		3064214	0					
ANR	3066938	ArgumentList	D_FULLDEBUG		3064214	1					
ANR	3066939	Argument	D_FULLDEBUG		3064214	0					
ANR	3066940	Identifier	D_FULLDEBUG		3064214	0					
ANR	3066941	Argument	"""Setting process affinity\\n"""		3064214	1					
ANR	3066942	PrimaryExpression	"""Setting process affinity\\n"""		3064214	0					
ANR	3066943	IdentifierDeclStatement	"BOOL ok = SetProcessAffinityMask ( piProcess . hProcess , mask ) ;"	8154:2:250282:250351	3064214	3	True				
ANR	3066944	IdentifierDecl	"ok = SetProcessAffinityMask ( piProcess . hProcess , mask )"		3064214	0					
ANR	3066945	IdentifierDeclType	BOOL		3064214	0					
ANR	3066946	Identifier	ok		3064214	1					
ANR	3066947	AssignmentExpression	"ok = SetProcessAffinityMask ( piProcess . hProcess , mask )"		3064214	2		=			
ANR	3066948	Identifier	ok		3064214	0					
ANR	3066949	CallExpression	"SetProcessAffinityMask ( piProcess . hProcess , mask )"		3064214	1					
ANR	3066950	Callee	SetProcessAffinityMask		3064214	0					
ANR	3066951	Identifier	SetProcessAffinityMask		3064214	0					
ANR	3066952	ArgumentList	piProcess . hProcess		3064214	1					
ANR	3066953	Argument	piProcess . hProcess		3064214	0					
ANR	3066954	MemberAccess	piProcess . hProcess		3064214	0					
ANR	3066955	Identifier	piProcess		3064214	0					
ANR	3066956	Identifier	hProcess		3064214	1					
ANR	3066957	Argument	mask		3064214	1					
ANR	3066958	Identifier	mask		3064214	0					
ANR	3066959	IfStatement	if ( ! ok )		3064214	4					
ANR	3066960	Condition	! ok	8158:7:250363:250365	3064214	0	True				
ANR	3066961	UnaryOperationExpression	! ok		3064214	0					
ANR	3066962	UnaryOperator	!		3064214	0					
ANR	3066963	Identifier	ok		3064214	1					
ANR	3066964	CompoundStatement		841:13:26414:26414	3064214	1					
ANR	3066965	Statement	dprintf	8160:3:250375:250381	3064214	0	True				
ANR	3066966	Statement	(	8160:11:250383:250383	3064214	1	True				
ANR	3066967	Statement	D_ALWAYS	8160:13:250385:250392	3064214	2	True				
ANR	3066968	Statement	","	8160:21:250393:250393	3064214	3	True				
ANR	3066969	Statement	"""Failed to set process affinity. """	8161:4:250400:250433	3064214	4	True				
ANR	3066970	Statement	"""(last-error=%d)\\n"""	8162:4:250439:250457	3064214	5	True				
ANR	3066971	Statement	","	8162:23:250458:250458	3064214	6	True				
ANR	3066972	Statement	GetLastError	8163:4:250465:250476	3064214	7	True				
ANR	3066973	Statement	(	8163:17:250478:250478	3064214	8	True				
ANR	3066974	Statement	)	8163:18:250479:250479	3064214	9	True				
ANR	3066975	Statement	)	8163:20:250481:250481	3064214	10	True				
ANR	3066976	ExpressionStatement		8163:21:250482:250482	3064214	11	True				
ANR	3066977	IfStatement	if ( family_info != NULL )		3064214	104					
ANR	3066978	Condition	family_info != NULL	8176:5:250660:250678	3064214	0	True				
ANR	3066979	EqualityExpression	family_info != NULL		3064214	0		!=			
ANR	3066980	Identifier	family_info		3064214	0					
ANR	3066981	Identifier	NULL		3064214	1					
ANR	3066982	CompoundStatement		861:2:26763:27097	3064214	1					
ANR	3066983	ExpressionStatement	ASSERT ( m_proc_family != NULL )	8177:2:250685:250714	3064214	0	True				
ANR	3066984	CallExpression	ASSERT ( m_proc_family != NULL )		3064214	0					
ANR	3066985	Callee	ASSERT		3064214	0					
ANR	3066986	Identifier	ASSERT		3064214	0					
ANR	3066987	ArgumentList	m_proc_family != NULL		3064214	1					
ANR	3066988	Argument	m_proc_family != NULL		3064214	0					
ANR	3066989	EqualityExpression	m_proc_family != NULL		3064214	0		!=			
ANR	3066990	Identifier	m_proc_family		3064214	0					
ANR	3066991	Identifier	NULL		3064214	1					
ANR	3066992	IdentifierDeclStatement	"bool ok = Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , NULL , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy ) ;"	8178:2:250718:251052	3064214	1	True				
ANR	3066993	IdentifierDecl	"ok = Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , NULL , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"		3064214	0					
ANR	3066994	IdentifierDeclType	bool		3064214	0					
ANR	3066995	Identifier	ok		3064214	1					
ANR	3066996	AssignmentExpression	"ok = Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , NULL , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"		3064214	2		=			
ANR	3066997	Identifier	ok		3064214	0					
ANR	3066998	CallExpression	"Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , NULL , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"		3064214	1					
ANR	3066999	Callee	Register_Family		3064214	0					
ANR	3067000	Identifier	Register_Family		3064214	0					
ANR	3067001	ArgumentList	newpid		3064214	1					
ANR	3067002	Argument	newpid		3064214	0					
ANR	3067003	Identifier	newpid		3064214	0					
ANR	3067004	Argument	getpid ( )		3064214	1					
ANR	3067005	CallExpression	getpid ( )		3064214	0					
ANR	3067006	Callee	getpid		3064214	0					
ANR	3067007	Identifier	getpid		3064214	0					
ANR	3067008	ArgumentList			3064214	1					
ANR	3067009	Argument	family_info -> max_snapshot_interval		3064214	2					
ANR	3067010	PtrMemberAccess	family_info -> max_snapshot_interval		3064214	0					
ANR	3067011	Identifier	family_info		3064214	0					
ANR	3067012	Identifier	max_snapshot_interval		3064214	1					
ANR	3067013	Argument	NULL		3064214	3					
ANR	3067014	Identifier	NULL		3064214	0					
ANR	3067015	Argument	family_info -> login		3064214	4					
ANR	3067016	PtrMemberAccess	family_info -> login		3064214	0					
ANR	3067017	Identifier	family_info		3064214	0					
ANR	3067018	Identifier	login		3064214	1					
ANR	3067019	Argument	NULL		3064214	5					
ANR	3067020	Identifier	NULL		3064214	0					
ANR	3067021	Argument	family_info -> cgroup		3064214	6					
ANR	3067022	PtrMemberAccess	family_info -> cgroup		3064214	0					
ANR	3067023	Identifier	family_info		3064214	0					
ANR	3067024	Identifier	cgroup		3064214	1					
ANR	3067025	Argument	family_info -> glexec_proxy		3064214	7					
ANR	3067026	PtrMemberAccess	family_info -> glexec_proxy		3064214	0					
ANR	3067027	Identifier	family_info		3064214	0					
ANR	3067028	Identifier	glexec_proxy		3064214	1					
ANR	3067029	IfStatement	if ( ! ok )		3064214	2					
ANR	3067030	Condition	! ok	8186:6:251060:251062	3064214	0	True				
ANR	3067031	UnaryOperationExpression	! ok		3064214	0					
ANR	3067032	UnaryOperator	!		3064214	0					
ANR	3067033	Identifier	ok		3064214	1					
ANR	3067034	CompoundStatement		869:11:27110:27110	3064214	1					
ANR	3067035	ExpressionStatement	"EXCEPT ( ""error registering process family with procd"" )"	8187:3:251070:251123	3064214	0	True				
ANR	3067036	CallExpression	"EXCEPT ( ""error registering process family with procd"" )"		3064214	0					
ANR	3067037	Callee	EXCEPT		3064214	0					
ANR	3067038	Identifier	EXCEPT		3064214	0					
ANR	3067039	ArgumentList	"""error registering process family with procd"""		3064214	1					
ANR	3067040	Argument	"""error registering process family with procd"""		3064214	0					
ANR	3067041	PrimaryExpression	"""error registering process family with procd"""		3064214	0					
ANR	3067042	IfStatement	if ( ResumeThread ( piProcess . hThread ) == ( DWORD ) - 1 )		3064214	3					
ANR	3067043	Condition	ResumeThread ( piProcess . hThread ) == ( DWORD ) - 1	8189:6:251135:251178	3064214	0	True				
ANR	3067044	EqualityExpression	ResumeThread ( piProcess . hThread ) == ( DWORD ) - 1		3064214	0		==			
ANR	3067045	CallExpression	ResumeThread ( piProcess . hThread )		3064214	0					
ANR	3067046	Callee	ResumeThread		3064214	0					
ANR	3067047	Identifier	ResumeThread		3064214	0					
ANR	3067048	ArgumentList	piProcess . hThread		3064214	1					
ANR	3067049	Argument	piProcess . hThread		3064214	0					
ANR	3067050	MemberAccess	piProcess . hThread		3064214	0					
ANR	3067051	Identifier	piProcess		3064214	0					
ANR	3067052	Identifier	hThread		3064214	1					
ANR	3067053	CastExpression	( DWORD ) - 1		3064214	1					
ANR	3067054	CastTarget	DWORD		3064214	0					
ANR	3067055	UnaryOperationExpression	- 1		3064214	1					
ANR	3067056	UnaryOperator	-		3064214	0					
ANR	3067057	PrimaryExpression	1		3064214	1					
ANR	3067058	CompoundStatement		872:52:27226:27226	3064214	1					
ANR	3067059	ExpressionStatement	"EXCEPT ( ""error resuming newly created process: %u"" , GetLastError ( ) )"	8190:3:251186:251262	3064214	0	True				
ANR	3067060	CallExpression	"EXCEPT ( ""error resuming newly created process: %u"" , GetLastError ( ) )"		3064214	0					
ANR	3067061	Callee	EXCEPT		3064214	0					
ANR	3067062	Identifier	EXCEPT		3064214	0					
ANR	3067063	ArgumentList	"""error resuming newly created process: %u"""		3064214	1					
ANR	3067064	Argument	"""error resuming newly created process: %u"""		3064214	0					
ANR	3067065	PrimaryExpression	"""error resuming newly created process: %u"""		3064214	0					
ANR	3067066	Argument	GetLastError ( )		3064214	1					
ANR	3067067	CallExpression	GetLastError ( )		3064214	0					
ANR	3067068	Callee	GetLastError		3064214	0					
ANR	3067069	Identifier	GetLastError		3064214	0					
ANR	3067070	ArgumentList			3064214	1					
ANR	3067071	IfStatement	if ( sock_inherit_list )		3064214	105					
ANR	3067072	Condition	sock_inherit_list	8197:6:251360:251376	3064214	0	True				
ANR	3067073	Identifier	sock_inherit_list		3064214	0					
ANR	3067074	CompoundStatement		880:26:27425:27425	3064214	1					
ANR	3067075	ForStatement	for ( i = 0 ; ( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS ) ; i ++ )		3064214	0					
ANR	3067076	ForInit	i = 0 ;	8198:7:251389:251395	3064214	0	True				
ANR	3067077	AssignmentExpression	i = 0		3064214	0		=			
ANR	3067078	Identifier	i		3064214	0					
ANR	3067079	PrimaryExpression	0		3064214	1					
ANR	3067080	Condition	( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS )	8199:4:251401:251457	3064214	1	True				
ANR	3067081	AndExpression	( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS )		3064214	0		&&			
ANR	3067082	EqualityExpression	sock_inherit_list [ i ] != NULL		3064214	0		!=			
ANR	3067083	ArrayIndexing	sock_inherit_list [ i ]		3064214	0					
ANR	3067084	Identifier	sock_inherit_list		3064214	0					
ANR	3067085	Identifier	i		3064214	1					
ANR	3067086	Identifier	NULL		3064214	1					
ANR	3067087	RelationalExpression	i < MAX_INHERIT_SOCKS		3064214	1		<			
ANR	3067088	Identifier	i		3064214	0					
ANR	3067089	Identifier	MAX_INHERIT_SOCKS		3064214	1					
ANR	3067090	PostIncDecOperationExpression	i ++	8200:4:251465:251467	3064214	2	True				
ANR	3067091	Identifier	i		3064214	0					
ANR	3067092	IncDec	++		3064214	1					
ANR	3067093	CompoundStatement		884:8:27523:27523	3064214	3					
ANR	3067094	ExpressionStatement	( ( Sock * ) sock_inherit_list [ i ] ) -> set_inheritable ( FALSE )	8202:3:251483:251537	3064214	0	True				
ANR	3067095	CallExpression	( ( Sock * ) sock_inherit_list [ i ] ) -> set_inheritable ( FALSE )		3064214	0					
ANR	3067096	Callee	( ( Sock * ) sock_inherit_list [ i ] ) -> set_inheritable		3064214	0					
ANR	3067097	PtrMemberAccess	( ( Sock * ) sock_inherit_list [ i ] ) -> set_inheritable		3064214	0					
ANR	3067098	CastExpression	( Sock * ) sock_inherit_list [ i ]		3064214	0					
ANR	3067099	CastTarget	Sock *		3064214	0					
ANR	3067100	ArrayIndexing	sock_inherit_list [ i ]		3064214	1					
ANR	3067101	Identifier	sock_inherit_list		3064214	0					
ANR	3067102	Identifier	i		3064214	1					
ANR	3067103	Identifier	set_inheritable		3064214	1					
ANR	3067104	ArgumentList	FALSE		3064214	1					
ANR	3067105	Argument	FALSE		3064214	0					
ANR	3067106	Identifier	FALSE		3064214	0					
ANR	3067107	Statement	pidtmp	8518:1:261408:261413	3064214	106	True				
ANR	3067108	Statement	=	8518:8:261415:261415	3064214	107	True				
ANR	3067109	Statement	new	8518:10:261417:261419	3064214	108	True				
ANR	3067110	ExpressionStatement	PidEntry	8518:14:261421:261429	3064214	109	True				
ANR	3067111	Identifier	PidEntry		3064214	0					
ANR	3067112	ExpressionStatement	pidtmp -> pid = newpid	8519:1:261432:261452	3064214	110	True				
ANR	3067113	AssignmentExpression	pidtmp -> pid = newpid		3064214	0		=			
ANR	3067114	PtrMemberAccess	pidtmp -> pid		3064214	0					
ANR	3067115	Identifier	pidtmp		3064214	0					
ANR	3067116	Identifier	pid		3064214	1					
ANR	3067117	Identifier	newpid		3064214	1					
ANR	3067118	ExpressionStatement	pidtmp -> new_process_group = ( family_info != NULL )	8520:1:261455:261504	3064214	111	True				
ANR	3067119	AssignmentExpression	pidtmp -> new_process_group = ( family_info != NULL )		3064214	0		=			
ANR	3067120	PtrMemberAccess	pidtmp -> new_process_group		3064214	0					
ANR	3067121	Identifier	pidtmp		3064214	0					
ANR	3067122	Identifier	new_process_group		3064214	1					
ANR	3067123	EqualityExpression	family_info != NULL		3064214	1		!=			
ANR	3067124	Identifier	family_info		3064214	0					
ANR	3067125	Identifier	NULL		3064214	1					
ANR	3067126	CompoundStatement		1206:2:37557:37629	3064214	112					
ANR	3067127	IdentifierDeclStatement	char const * shared_port_addr = shared_port_endpoint . GetMyRemoteAddress ( ) ;	8523:2:261512:261584	3064214	0	True				
ANR	3067128	IdentifierDecl	* shared_port_addr = shared_port_endpoint . GetMyRemoteAddress ( )		3064214	0					
ANR	3067129	IdentifierDeclType	char const *		3064214	0					
ANR	3067130	Identifier	shared_port_addr		3064214	1					
ANR	3067131	AssignmentExpression	* shared_port_addr = shared_port_endpoint . GetMyRemoteAddress ( )		3064214	2		=			
ANR	3067132	Identifier	shared_port_addr		3064214	0					
ANR	3067133	CallExpression	shared_port_endpoint . GetMyRemoteAddress ( )		3064214	1					
ANR	3067134	Callee	shared_port_endpoint . GetMyRemoteAddress		3064214	0					
ANR	3067135	MemberAccess	shared_port_endpoint . GetMyRemoteAddress		3064214	0					
ANR	3067136	Identifier	shared_port_endpoint		3064214	0					
ANR	3067137	Identifier	GetMyRemoteAddress		3064214	1					
ANR	3067138	ArgumentList			3064214	1					
ANR	3067139	IfStatement	if ( ! shared_port_addr )		3064214	1					
ANR	3067140	Condition	! shared_port_addr	8524:6:261592:261608	3064214	0	True				
ANR	3067141	UnaryOperationExpression	! shared_port_addr		3064214	0					
ANR	3067142	UnaryOperator	!		3064214	0					
ANR	3067143	Identifier	shared_port_addr		3064214	1					
ANR	3067144	CompoundStatement		1207:26:37657:37657	3064214	1					
ANR	3067145	ExpressionStatement	shared_port_addr = shared_port_endpoint . GetMyLocalAddress ( )	8525:3:261617:261676	3064214	0	True				
ANR	3067146	AssignmentExpression	shared_port_addr = shared_port_endpoint . GetMyLocalAddress ( )		3064214	0		=			
ANR	3067147	Identifier	shared_port_addr		3064214	0					
ANR	3067148	CallExpression	shared_port_endpoint . GetMyLocalAddress ( )		3064214	1					
ANR	3067149	Callee	shared_port_endpoint . GetMyLocalAddress		3064214	0					
ANR	3067150	MemberAccess	shared_port_endpoint . GetMyLocalAddress		3064214	0					
ANR	3067151	Identifier	shared_port_endpoint		3064214	0					
ANR	3067152	Identifier	GetMyLocalAddress		3064214	1					
ANR	3067153	ArgumentList			3064214	1					
ANR	3067154	IfStatement	if ( shared_port_addr )		3064214	2					
ANR	3067155	Condition	shared_port_addr	8528:6:261689:261704	3064214	0	True				
ANR	3067156	Identifier	shared_port_addr		3064214	0					
ANR	3067157	CompoundStatement		1211:25:37753:37753	3064214	1					
ANR	3067158	ExpressionStatement	pidtmp -> sinful_string = shared_port_addr	8529:3:261713:261753	3064214	0	True				
ANR	3067159	AssignmentExpression	pidtmp -> sinful_string = shared_port_addr		3064214	0		=			
ANR	3067160	PtrMemberAccess	pidtmp -> sinful_string		3064214	0					
ANR	3067161	Identifier	pidtmp		3064214	0					
ANR	3067162	Identifier	sinful_string		3064214	1					
ANR	3067163	Identifier	shared_port_addr		3064214	1					
ANR	3067164	ExpressionStatement	pidtmp -> shared_port_fname = shared_port_endpoint . GetSocketFileName ( )	8531:3:261814:261882	3064214	1	True				
ANR	3067165	AssignmentExpression	pidtmp -> shared_port_fname = shared_port_endpoint . GetSocketFileName ( )		3064214	0		=			
ANR	3067166	PtrMemberAccess	pidtmp -> shared_port_fname		3064214	0					
ANR	3067167	Identifier	pidtmp		3064214	0					
ANR	3067168	Identifier	shared_port_fname		3064214	1					
ANR	3067169	CallExpression	shared_port_endpoint . GetSocketFileName ( )		3064214	1					
ANR	3067170	Callee	shared_port_endpoint . GetSocketFileName		3064214	0					
ANR	3067171	MemberAccess	shared_port_endpoint . GetSocketFileName		3064214	0					
ANR	3067172	Identifier	shared_port_endpoint		3064214	0					
ANR	3067173	Identifier	GetSocketFileName		3064214	1					
ANR	3067174	ArgumentList			3064214	1					
ANR	3067175	ElseStatement	else		3064214	0					
ANR	3067176	IfStatement	if ( want_command_port != FALSE )		3064214	0					
ANR	3067177	Condition	want_command_port != FALSE	8533:12:261900:261925	3064214	0	True				
ANR	3067178	EqualityExpression	want_command_port != FALSE		3064214	0		!=			
ANR	3067179	Identifier	want_command_port		3064214	0					
ANR	3067180	Identifier	FALSE		3064214	1					
ANR	3067181	CompoundStatement		1217:3:37979:38021	3064214	1					
ANR	3067182	IdentifierDeclStatement	Sinful sinful ( sock_to_string ( rsock . _sock ) ) ;	8534:3:261934:261976	3064214	0	True				
ANR	3067183	IdentifierDecl	sinful ( sock_to_string ( rsock . _sock ) )		3064214	0					
ANR	3067184	IdentifierDeclType	Sinful		3064214	0					
ANR	3067185	Identifier	sinful		3064214	1					
ANR	3067186	CallExpression	sock_to_string ( rsock . _sock )		3064214	2					
ANR	3067187	Callee	sock_to_string		3064214	0					
ANR	3067188	Identifier	sock_to_string		3064214	0					
ANR	3067189	ArgumentList	rsock . _sock		3064214	1					
ANR	3067190	Argument	rsock . _sock		3064214	0					
ANR	3067191	MemberAccess	rsock . _sock		3064214	0					
ANR	3067192	Identifier	rsock		3064214	0					
ANR	3067193	Identifier	_sock		3064214	1					
ANR	3067194	IfStatement	if ( ! want_udp )		3064214	1					
ANR	3067195	Condition	! want_udp	8535:7:261985:261993	3064214	0	True				
ANR	3067196	UnaryOperationExpression	! want_udp		3064214	0					
ANR	3067197	UnaryOperator	!		3064214	0					
ANR	3067198	Identifier	want_udp		3064214	1					
ANR	3067199	CompoundStatement		1218:19:38042:38042	3064214	1					
ANR	3067200	ExpressionStatement	sinful . setNoUDP ( true )	8536:4:262003:262024	3064214	0	True				
ANR	3067201	CallExpression	sinful . setNoUDP ( true )		3064214	0					
ANR	3067202	Callee	sinful . setNoUDP		3064214	0					
ANR	3067203	MemberAccess	sinful . setNoUDP		3064214	0					
ANR	3067204	Identifier	sinful		3064214	0					
ANR	3067205	Identifier	setNoUDP		3064214	1					
ANR	3067206	ArgumentList	true		3064214	1					
ANR	3067207	Argument	true		3064214	0					
ANR	3067208	Identifier	true		3064214	0					
ANR	3067209	ExpressionStatement	pidtmp -> sinful_string = sinful . getSinful ( )	8538:3:262034:262076	3064214	2	True				
ANR	3067210	AssignmentExpression	pidtmp -> sinful_string = sinful . getSinful ( )		3064214	0		=			
ANR	3067211	PtrMemberAccess	pidtmp -> sinful_string		3064214	0					
ANR	3067212	Identifier	pidtmp		3064214	0					
ANR	3067213	Identifier	sinful_string		3064214	1					
ANR	3067214	CallExpression	sinful . getSinful ( )		3064214	1					
ANR	3067215	Callee	sinful . getSinful		3064214	0					
ANR	3067216	MemberAccess	sinful . getSinful		3064214	0					
ANR	3067217	Identifier	sinful		3064214	0					
ANR	3067218	Identifier	getSinful		3064214	1					
ANR	3067219	ArgumentList			3064214	1					
ANR	3067220	ExpressionStatement	pidtmp -> is_local = TRUE	8542:1:262087:262110	3064214	113	True				
ANR	3067221	AssignmentExpression	pidtmp -> is_local = TRUE		3064214	0		=			
ANR	3067222	PtrMemberAccess	pidtmp -> is_local		3064214	0					
ANR	3067223	Identifier	pidtmp		3064214	0					
ANR	3067224	Identifier	is_local		3064214	1					
ANR	3067225	Identifier	TRUE		3064214	1					
ANR	3067226	ExpressionStatement	pidtmp -> parent_is_local = TRUE	8543:1:262113:262143	3064214	114	True				
ANR	3067227	AssignmentExpression	pidtmp -> parent_is_local = TRUE		3064214	0		=			
ANR	3067228	PtrMemberAccess	pidtmp -> parent_is_local		3064214	0					
ANR	3067229	Identifier	pidtmp		3064214	0					
ANR	3067230	Identifier	parent_is_local		3064214	1					
ANR	3067231	Identifier	TRUE		3064214	1					
ANR	3067232	ExpressionStatement	pidtmp -> reaper_id = reaper_id	8544:1:262146:262175	3064214	115	True				
ANR	3067233	AssignmentExpression	pidtmp -> reaper_id = reaper_id		3064214	0		=			
ANR	3067234	PtrMemberAccess	pidtmp -> reaper_id		3064214	0					
ANR	3067235	Identifier	pidtmp		3064214	0					
ANR	3067236	Identifier	reaper_id		3064214	1					
ANR	3067237	Identifier	reaper_id		3064214	1					
ANR	3067238	ExpressionStatement	pidtmp -> hung_tid = - 1	8545:1:262178:262199	3064214	116	True				
ANR	3067239	AssignmentExpression	pidtmp -> hung_tid = - 1		3064214	0		=			
ANR	3067240	PtrMemberAccess	pidtmp -> hung_tid		3064214	0					
ANR	3067241	Identifier	pidtmp		3064214	0					
ANR	3067242	Identifier	hung_tid		3064214	1					
ANR	3067243	UnaryOperationExpression	- 1		3064214	1					
ANR	3067244	UnaryOperator	-		3064214	0					
ANR	3067245	PrimaryExpression	1		3064214	1					
ANR	3067246	ExpressionStatement	pidtmp -> was_not_responding = FALSE	8546:1:262202:262236	3064214	117	True				
ANR	3067247	AssignmentExpression	pidtmp -> was_not_responding = FALSE		3064214	0		=			
ANR	3067248	PtrMemberAccess	pidtmp -> was_not_responding		3064214	0					
ANR	3067249	Identifier	pidtmp		3064214	0					
ANR	3067250	Identifier	was_not_responding		3064214	1					
ANR	3067251	Identifier	FALSE		3064214	1					
ANR	3067252	IfStatement	if ( ! session_id . empty ( ) )		3064214	118					
ANR	3067253	Condition	! session_id . empty ( )	8547:4:262242:262260	3064214	0	True				
ANR	3067254	UnaryOperationExpression	! session_id . empty ( )		3064214	0					
ANR	3067255	UnaryOperator	!		3064214	0					
ANR	3067256	CallExpression	session_id . empty ( )		3064214	1					
ANR	3067257	Callee	session_id . empty		3064214	0					
ANR	3067258	MemberAccess	session_id . empty		3064214	0					
ANR	3067259	Identifier	session_id		3064214	0					
ANR	3067260	Identifier	empty		3064214	1					
ANR	3067261	ArgumentList			3064214	1					
ANR	3067262	CompoundStatement		1231:1:38309:38309	3064214	1					
ANR	3067263	ExpressionStatement	pidtmp -> child_session_id = strdup ( session_id . c_str ( ) )	8549:2:262268:262321	3064214	0	True				
ANR	3067264	AssignmentExpression	pidtmp -> child_session_id = strdup ( session_id . c_str ( ) )		3064214	0		=			
ANR	3067265	PtrMemberAccess	pidtmp -> child_session_id		3064214	0					
ANR	3067266	Identifier	pidtmp		3064214	0					
ANR	3067267	Identifier	child_session_id		3064214	1					
ANR	3067268	CallExpression	strdup ( session_id . c_str ( ) )		3064214	1					
ANR	3067269	Callee	strdup		3064214	0					
ANR	3067270	Identifier	strdup		3064214	0					
ANR	3067271	ArgumentList	session_id . c_str ( )		3064214	1					
ANR	3067272	Argument	session_id . c_str ( )		3064214	0					
ANR	3067273	CallExpression	session_id . c_str ( )		3064214	0					
ANR	3067274	Callee	session_id . c_str		3064214	0					
ANR	3067275	MemberAccess	session_id . c_str		3064214	0					
ANR	3067276	Identifier	session_id		3064214	0					
ANR	3067277	Identifier	c_str		3064214	1					
ANR	3067278	ArgumentList			3064214	1					
ANR	3067279	ExpressionStatement	pidtmp -> hProcess = piProcess . hProcess	8552:1:262340:262377	3064214	119	True				
ANR	3067280	AssignmentExpression	pidtmp -> hProcess = piProcess . hProcess		3064214	0		=			
ANR	3067281	PtrMemberAccess	pidtmp -> hProcess		3064214	0					
ANR	3067282	Identifier	pidtmp		3064214	0					
ANR	3067283	Identifier	hProcess		3064214	1					
ANR	3067284	MemberAccess	piProcess . hProcess		3064214	1					
ANR	3067285	Identifier	piProcess		3064214	0					
ANR	3067286	Identifier	hProcess		3064214	1					
ANR	3067287	ExpressionStatement	pidtmp -> hThread = piProcess . hThread	8553:1:262380:262415	3064214	120	True				
ANR	3067288	AssignmentExpression	pidtmp -> hThread = piProcess . hThread		3064214	0		=			
ANR	3067289	PtrMemberAccess	pidtmp -> hThread		3064214	0					
ANR	3067290	Identifier	pidtmp		3064214	0					
ANR	3067291	Identifier	hThread		3064214	1					
ANR	3067292	MemberAccess	piProcess . hThread		3064214	1					
ANR	3067293	Identifier	piProcess		3064214	0					
ANR	3067294	Identifier	hThread		3064214	1					
ANR	3067295	ExpressionStatement	pidtmp -> pipeEnd = NULL	8554:1:262418:262440	3064214	121	True				
ANR	3067296	AssignmentExpression	pidtmp -> pipeEnd = NULL		3064214	0		=			
ANR	3067297	PtrMemberAccess	pidtmp -> pipeEnd		3064214	0					
ANR	3067298	Identifier	pidtmp		3064214	0					
ANR	3067299	Identifier	pipeEnd		3064214	1					
ANR	3067300	Identifier	NULL		3064214	1					
ANR	3067301	ExpressionStatement	pidtmp -> tid = piProcess . dwThreadId	8555:1:262443:262477	3064214	122	True				
ANR	3067302	AssignmentExpression	pidtmp -> tid = piProcess . dwThreadId		3064214	0		=			
ANR	3067303	PtrMemberAccess	pidtmp -> tid		3064214	0					
ANR	3067304	Identifier	pidtmp		3064214	0					
ANR	3067305	Identifier	tid		3064214	1					
ANR	3067306	MemberAccess	piProcess . dwThreadId		3064214	1					
ANR	3067307	Identifier	piProcess		3064214	0					
ANR	3067308	Identifier	dwThreadId		3064214	1					
ANR	3067309	ExpressionStatement	pidtmp -> hWnd = 0	8556:1:262480:262496	3064214	123	True				
ANR	3067310	AssignmentExpression	pidtmp -> hWnd = 0		3064214	0		=			
ANR	3067311	PtrMemberAccess	pidtmp -> hWnd		3064214	0					
ANR	3067312	Identifier	pidtmp		3064214	0					
ANR	3067313	Identifier	hWnd		3064214	1					
ANR	3067314	PrimaryExpression	0		3064214	1					
ANR	3067315	ExpressionStatement	pidtmp -> pipeReady = 0	8557:1:262499:262520	3064214	124	True				
ANR	3067316	AssignmentExpression	pidtmp -> pipeReady = 0		3064214	0		=			
ANR	3067317	PtrMemberAccess	pidtmp -> pipeReady		3064214	0					
ANR	3067318	Identifier	pidtmp		3064214	0					
ANR	3067319	Identifier	pipeReady		3064214	1					
ANR	3067320	PrimaryExpression	0		3064214	1					
ANR	3067321	ExpressionStatement	pidtmp -> deallocate = 0	8558:1:262523:262545	3064214	125	True				
ANR	3067322	AssignmentExpression	pidtmp -> deallocate = 0		3064214	0		=			
ANR	3067323	PtrMemberAccess	pidtmp -> deallocate		3064214	0					
ANR	3067324	Identifier	pidtmp		3064214	0					
ANR	3067325	Identifier	deallocate		3064214	1					
ANR	3067326	PrimaryExpression	0		3064214	1					
ANR	3067327	ExpressionStatement	shared_port_endpoint . Detach ( )	8562:1:262623:262652	3064214	126	True				
ANR	3067328	CallExpression	shared_port_endpoint . Detach ( )		3064214	0					
ANR	3067329	Callee	shared_port_endpoint . Detach		3064214	0					
ANR	3067330	MemberAccess	shared_port_endpoint . Detach		3064214	0					
ANR	3067331	Identifier	shared_port_endpoint		3064214	0					
ANR	3067332	Identifier	Detach		3064214	1					
ANR	3067333	ArgumentList			3064214	1					
ANR	3067334	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		3064214	127					
ANR	3067335	ForInit	i = 0 ;	8565:6:262712:262715	3064214	0	True				
ANR	3067336	AssignmentExpression	i = 0		3064214	0		=			
ANR	3067337	Identifier	i		3064214	0					
ANR	3067338	PrimaryExpression	0		3064214	1					
ANR	3067339	Condition	i <= 2	8565:11:262717:262720	3064214	1	True				
ANR	3067340	RelationalExpression	i <= 2		3064214	0		<=			
ANR	3067341	Identifier	i		3064214	0					
ANR	3067342	PrimaryExpression	2		3064214	1					
ANR	3067343	PostIncDecOperationExpression	i ++	8565:17:262723:262725	3064214	2	True				
ANR	3067344	Identifier	i		3064214	0					
ANR	3067345	IncDec	++		3064214	1					
ANR	3067346	CompoundStatement		1248:22:38773:38773	3064214	3					
ANR	3067347	IfStatement	if ( dc_pipe_fds [ i ] [ 0 ] != - 1 )		3064214	0					
ANR	3067348	Condition	dc_pipe_fds [ i ] [ 0 ] != - 1	8566:6:262736:262758	3064214	0	True				
ANR	3067349	EqualityExpression	dc_pipe_fds [ i ] [ 0 ] != - 1		3064214	0		!=			
ANR	3067350	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		3064214	0					
ANR	3067351	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067352	Identifier	dc_pipe_fds		3064214	0					
ANR	3067353	Identifier	i		3064214	1					
ANR	3067354	PrimaryExpression	0		3064214	1					
ANR	3067355	UnaryOperationExpression	- 1		3064214	1					
ANR	3067356	UnaryOperator	-		3064214	0					
ANR	3067357	PrimaryExpression	1		3064214	1					
ANR	3067358	CompoundStatement		1249:31:38806:38806	3064214	1					
ANR	3067359	IfStatement	if ( i == 0 )		3064214	0					
ANR	3067360	Condition	i == 0	8569:7:262884:262889	3064214	0	True				
ANR	3067361	EqualityExpression	i == 0		3064214	0		==			
ANR	3067362	Identifier	i		3064214	0					
ANR	3067363	PrimaryExpression	0		3064214	1					
ANR	3067364	CompoundStatement		1252:15:38937:38937	3064214	1					
ANR	3067365	ExpressionStatement	Close_Pipe ( dc_pipe_fds [ i ] [ 0 ] )	8572:4:262984:263013	3064214	0	True				
ANR	3067366	CallExpression	Close_Pipe ( dc_pipe_fds [ i ] [ 0 ] )		3064214	0					
ANR	3067367	Callee	Close_Pipe		3064214	0					
ANR	3067368	Identifier	Close_Pipe		3064214	0					
ANR	3067369	ArgumentList	dc_pipe_fds [ i ] [ 0 ]		3064214	1					
ANR	3067370	Argument	dc_pipe_fds [ i ] [ 0 ]		3064214	0					
ANR	3067371	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		3064214	0					
ANR	3067372	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067373	Identifier	dc_pipe_fds		3064214	0					
ANR	3067374	Identifier	i		3064214	1					
ANR	3067375	PrimaryExpression	0		3064214	1					
ANR	3067376	ExpressionStatement	pidtmp -> std_pipes [ i ] = dc_pipe_fds [ i ] [ 1 ]	8573:4:263019:263059	3064214	1	True				
ANR	3067377	AssignmentExpression	pidtmp -> std_pipes [ i ] = dc_pipe_fds [ i ] [ 1 ]		3064214	0		=			
ANR	3067378	ArrayIndexing	pidtmp -> std_pipes [ i ]		3064214	0					
ANR	3067379	PtrMemberAccess	pidtmp -> std_pipes		3064214	0					
ANR	3067380	Identifier	pidtmp		3064214	0					
ANR	3067381	Identifier	std_pipes		3064214	1					
ANR	3067382	Identifier	i		3064214	1					
ANR	3067383	ArrayIndexing	dc_pipe_fds [ i ] [ 1 ]		3064214	1					
ANR	3067384	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067385	Identifier	dc_pipe_fds		3064214	0					
ANR	3067386	Identifier	i		3064214	1					
ANR	3067387	PrimaryExpression	1		3064214	1					
ANR	3067388	ElseStatement	else		3064214	0					
ANR	3067389	CompoundStatement		1264:4:39334:39363	3064214	0					
ANR	3067390	ExpressionStatement	Close_Pipe ( dc_pipe_fds [ i ] [ 1 ] )	8578:4:263181:263210	3064214	0	True				
ANR	3067391	CallExpression	Close_Pipe ( dc_pipe_fds [ i ] [ 1 ] )		3064214	0					
ANR	3067392	Callee	Close_Pipe		3064214	0					
ANR	3067393	Identifier	Close_Pipe		3064214	0					
ANR	3067394	ArgumentList	dc_pipe_fds [ i ] [ 1 ]		3064214	1					
ANR	3067395	Argument	dc_pipe_fds [ i ] [ 1 ]		3064214	0					
ANR	3067396	ArrayIndexing	dc_pipe_fds [ i ] [ 1 ]		3064214	0					
ANR	3067397	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067398	Identifier	dc_pipe_fds		3064214	0					
ANR	3067399	Identifier	i		3064214	1					
ANR	3067400	PrimaryExpression	1		3064214	1					
ANR	3067401	ExpressionStatement	pidtmp -> std_pipes [ i ] = dc_pipe_fds [ i ] [ 0 ]	8579:4:263216:263256	3064214	1	True				
ANR	3067402	AssignmentExpression	pidtmp -> std_pipes [ i ] = dc_pipe_fds [ i ] [ 0 ]		3064214	0		=			
ANR	3067403	ArrayIndexing	pidtmp -> std_pipes [ i ]		3064214	0					
ANR	3067404	PtrMemberAccess	pidtmp -> std_pipes		3064214	0					
ANR	3067405	Identifier	pidtmp		3064214	0					
ANR	3067406	Identifier	std_pipes		3064214	1					
ANR	3067407	Identifier	i		3064214	1					
ANR	3067408	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		3064214	1					
ANR	3067409	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067410	Identifier	dc_pipe_fds		3064214	0					
ANR	3067411	Identifier	i		3064214	1					
ANR	3067412	PrimaryExpression	0		3064214	1					
ANR	3067413	IdentifierDeclStatement	const char * pipe_desc ;	8580:4:263262:263283	3064214	2	True				
ANR	3067414	IdentifierDecl	* pipe_desc		3064214	0					
ANR	3067415	IdentifierDeclType	const char *		3064214	0					
ANR	3067416	Identifier	pipe_desc		3064214	1					
ANR	3067417	IdentifierDeclStatement	const char * pipe_handler_desc ;	8581:4:263289:263318	3064214	3	True				
ANR	3067418	IdentifierDecl	* pipe_handler_desc		3064214	0					
ANR	3067419	IdentifierDeclType	const char *		3064214	0					
ANR	3067420	Identifier	pipe_handler_desc		3064214	1					
ANR	3067421	IfStatement	if ( i == 1 )		3064214	4					
ANR	3067422	Condition	i == 1	8582:8:263328:263333	3064214	0	True				
ANR	3067423	EqualityExpression	i == 1		3064214	0		==			
ANR	3067424	Identifier	i		3064214	0					
ANR	3067425	PrimaryExpression	1		3064214	1					
ANR	3067426	CompoundStatement		1265:16:39381:39381	3064214	1					
ANR	3067427	ExpressionStatement	"pipe_desc = ""DC stdout pipe"""	8583:5:263343:263371	3064214	0	True				
ANR	3067428	AssignmentExpression	"pipe_desc = ""DC stdout pipe"""		3064214	0		=			
ANR	3067429	Identifier	pipe_desc		3064214	0					
ANR	3067430	PrimaryExpression	"""DC stdout pipe"""		3064214	1					
ANR	3067431	ExpressionStatement	"pipe_handler_desc = ""DC stdout pipe handler"""	8584:5:263378:263422	3064214	1	True				
ANR	3067432	AssignmentExpression	"pipe_handler_desc = ""DC stdout pipe handler"""		3064214	0		=			
ANR	3067433	Identifier	pipe_handler_desc		3064214	0					
ANR	3067434	PrimaryExpression	"""DC stdout pipe handler"""		3064214	1					
ANR	3067435	ElseStatement	else		3064214	0					
ANR	3067436	CompoundStatement		1269:9:39484:39484	3064214	0					
ANR	3067437	ExpressionStatement	"pipe_desc = ""DC stderr pipe"""	8587:5:263446:263474	3064214	0	True				
ANR	3067438	AssignmentExpression	"pipe_desc = ""DC stderr pipe"""		3064214	0		=			
ANR	3067439	Identifier	pipe_desc		3064214	0					
ANR	3067440	PrimaryExpression	"""DC stderr pipe"""		3064214	1					
ANR	3067441	ExpressionStatement	"pipe_handler_desc = ""DC stderr pipe handler"""	8588:5:263481:263525	3064214	1	True				
ANR	3067442	AssignmentExpression	"pipe_handler_desc = ""DC stderr pipe handler"""		3064214	0		=			
ANR	3067443	Identifier	pipe_handler_desc		3064214	0					
ANR	3067444	PrimaryExpression	"""DC stderr pipe handler"""		3064214	1					
ANR	3067445	ExpressionStatement	"Register_Pipe ( dc_pipe_fds [ i ] [ 0 ] , pipe_desc , static_cast < PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler ) , pipe_handler_desc , pidtmp )"	8590:4:263537:263686	3064214	5	True				
ANR	3067446	CallExpression	"Register_Pipe ( dc_pipe_fds [ i ] [ 0 ] , pipe_desc , static_cast < PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler ) , pipe_handler_desc , pidtmp )"		3064214	0					
ANR	3067447	Callee	Register_Pipe		3064214	0					
ANR	3067448	Identifier	Register_Pipe		3064214	0					
ANR	3067449	ArgumentList	dc_pipe_fds [ i ] [ 0 ]		3064214	1					
ANR	3067450	Argument	dc_pipe_fds [ i ] [ 0 ]		3064214	0					
ANR	3067451	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		3064214	0					
ANR	3067452	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067453	Identifier	dc_pipe_fds		3064214	0					
ANR	3067454	Identifier	i		3064214	1					
ANR	3067455	PrimaryExpression	0		3064214	1					
ANR	3067456	Argument	pipe_desc		3064214	1					
ANR	3067457	Identifier	pipe_desc		3064214	0					
ANR	3067458	Argument	static_cast < PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler )		3064214	2					
ANR	3067459	RelationalExpression	static_cast < PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler )		3064214	0		<			
ANR	3067460	Identifier	static_cast		3064214	0					
ANR	3067461	RelationalExpression	PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler )		3064214	1		>			
ANR	3067462	Identifier	PipeHandlercpp		3064214	0					
ANR	3067463	UnaryOperationExpression	& DaemonCore :: PidEntry :: pipeHandler		3064214	1					
ANR	3067464	UnaryOperator	&		3064214	0					
ANR	3067465	Identifier	DaemonCore :: PidEntry :: pipeHandler		3064214	1					
ANR	3067466	Argument	pipe_handler_desc		3064214	3					
ANR	3067467	Identifier	pipe_handler_desc		3064214	0					
ANR	3067468	Argument	pidtmp		3064214	4					
ANR	3067469	Identifier	pidtmp		3064214	0					
ANR	3067470	ExpressionStatement	dc_pipe_fds [ i ] [ 0 ] = dc_pipe_fds [ i ] [ 1 ] = DC_STD_FD_NOPIPE	8597:3:263853:263909	3064214	1	True				
ANR	3067471	AssignmentExpression	dc_pipe_fds [ i ] [ 0 ] = dc_pipe_fds [ i ] [ 1 ] = DC_STD_FD_NOPIPE		3064214	0		=			
ANR	3067472	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		3064214	0					
ANR	3067473	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067474	Identifier	dc_pipe_fds		3064214	0					
ANR	3067475	Identifier	i		3064214	1					
ANR	3067476	PrimaryExpression	0		3064214	1					
ANR	3067477	AssignmentExpression	dc_pipe_fds [ i ] [ 1 ] = DC_STD_FD_NOPIPE		3064214	1		=			
ANR	3067478	ArrayIndexing	dc_pipe_fds [ i ] [ 1 ]		3064214	0					
ANR	3067479	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067480	Identifier	dc_pipe_fds		3064214	0					
ANR	3067481	Identifier	i		3064214	1					
ANR	3067482	PrimaryExpression	1		3064214	1					
ANR	3067483	Identifier	DC_STD_FD_NOPIPE		3064214	1					
ANR	3067484	ExpressionStatement	pidenvid_init ( & pidtmp -> penvid )	8602:1:263970:264000	3064214	128	True				
ANR	3067485	CallExpression	pidenvid_init ( & pidtmp -> penvid )		3064214	0					
ANR	3067486	Callee	pidenvid_init		3064214	0					
ANR	3067487	Identifier	pidenvid_init		3064214	0					
ANR	3067488	ArgumentList	& pidtmp -> penvid		3064214	1					
ANR	3067489	Argument	& pidtmp -> penvid		3064214	0					
ANR	3067490	UnaryOperationExpression	& pidtmp -> penvid		3064214	0					
ANR	3067491	UnaryOperator	&		3064214	0					
ANR	3067492	PtrMemberAccess	pidtmp -> penvid		3064214	1					
ANR	3067493	Identifier	pidtmp		3064214	0					
ANR	3067494	Identifier	penvid		3064214	1					
ANR	3067495	IfStatement	"if ( pidenvid_filter_and_insert ( & pidtmp -> penvid , GetEnviron ( ) ) != PIDENVID_OK )"		3064214	129					
ANR	3067496	Condition	"pidenvid_filter_and_insert ( & pidtmp -> penvid , GetEnviron ( ) ) != PIDENVID_OK"	8603:5:264007:264080	3064214	0	True				
ANR	3067497	EqualityExpression	"pidenvid_filter_and_insert ( & pidtmp -> penvid , GetEnviron ( ) ) != PIDENVID_OK"		3064214	0		!=			
ANR	3067498	CallExpression	"pidenvid_filter_and_insert ( & pidtmp -> penvid , GetEnviron ( ) )"		3064214	0					
ANR	3067499	Callee	pidenvid_filter_and_insert		3064214	0					
ANR	3067500	Identifier	pidenvid_filter_and_insert		3064214	0					
ANR	3067501	ArgumentList	& pidtmp -> penvid		3064214	1					
ANR	3067502	Argument	& pidtmp -> penvid		3064214	0					
ANR	3067503	UnaryOperationExpression	& pidtmp -> penvid		3064214	0					
ANR	3067504	UnaryOperator	&		3064214	0					
ANR	3067505	PtrMemberAccess	pidtmp -> penvid		3064214	1					
ANR	3067506	Identifier	pidtmp		3064214	0					
ANR	3067507	Identifier	penvid		3064214	1					
ANR	3067508	Argument	GetEnviron ( )		3064214	1					
ANR	3067509	CallExpression	GetEnviron ( )		3064214	0					
ANR	3067510	Callee	GetEnviron		3064214	0					
ANR	3067511	Identifier	GetEnviron		3064214	0					
ANR	3067512	ArgumentList			3064214	1					
ANR	3067513	Identifier	PIDENVID_OK		3064214	1					
ANR	3067514	CompoundStatement		1288:1:40129:40129	3064214	1					
ANR	3067515	Statement	EXCEPT	8606:2:264088:264093	3064214	0	True				
ANR	3067516	Statement	(	8606:8:264094:264094	3064214	1	True				
ANR	3067517	Statement	"""Create_Process: More ancestor environment IDs found than """	8606:10:264096:264154	3064214	2	True				
ANR	3067518	Statement	"""PIDENVID_MAX which is currently %d. Programmer Error."""	8607:4:264160:264214	3064214	3	True				
ANR	3067519	Statement	","	8607:59:264215:264215	3064214	4	True				
ANR	3067520	Statement	PIDENVID_MAX	8608:4:264221:264232	3064214	5	True				
ANR	3067521	Statement	)	8608:17:264234:264234	3064214	6	True				
ANR	3067522	ExpressionStatement		8608:18:264235:264235	3064214	7	True				
ANR	3067523	IfStatement	"if ( pidenvid_append_direct ( & pidtmp -> penvid , forker_pid , newpid , time_of_fork , mii ) == PIDENVID_OVERSIZED )"		3064214	130					
ANR	3067524	Condition	"pidenvid_append_direct ( & pidtmp -> penvid , forker_pid , newpid , time_of_fork , mii ) == PIDENVID_OVERSIZED"	8610:5:264245:264348	3064214	0	True				
ANR	3067525	EqualityExpression	"pidenvid_append_direct ( & pidtmp -> penvid , forker_pid , newpid , time_of_fork , mii ) == PIDENVID_OVERSIZED"		3064214	0		==			
ANR	3067526	CallExpression	"pidenvid_append_direct ( & pidtmp -> penvid , forker_pid , newpid , time_of_fork , mii )"		3064214	0					
ANR	3067527	Callee	pidenvid_append_direct		3064214	0					
ANR	3067528	Identifier	pidenvid_append_direct		3064214	0					
ANR	3067529	ArgumentList	& pidtmp -> penvid		3064214	1					
ANR	3067530	Argument	& pidtmp -> penvid		3064214	0					
ANR	3067531	UnaryOperationExpression	& pidtmp -> penvid		3064214	0					
ANR	3067532	UnaryOperator	&		3064214	0					
ANR	3067533	PtrMemberAccess	pidtmp -> penvid		3064214	1					
ANR	3067534	Identifier	pidtmp		3064214	0					
ANR	3067535	Identifier	penvid		3064214	1					
ANR	3067536	Argument	forker_pid		3064214	1					
ANR	3067537	Identifier	forker_pid		3064214	0					
ANR	3067538	Argument	newpid		3064214	2					
ANR	3067539	Identifier	newpid		3064214	0					
ANR	3067540	Argument	time_of_fork		3064214	3					
ANR	3067541	Identifier	time_of_fork		3064214	0					
ANR	3067542	Argument	mii		3064214	4					
ANR	3067543	Identifier	mii		3064214	0					
ANR	3067544	Identifier	PIDENVID_OVERSIZED		3064214	1					
ANR	3067545	CompoundStatement		1295:1:40397:40397	3064214	1					
ANR	3067546	Statement	EXCEPT	8613:2:264356:264361	3064214	0	True				
ANR	3067547	Statement	(	8613:8:264362:264362	3064214	1	True				
ANR	3067548	Statement	"""Create_Process: Cannot add child pid to PidEnvID table """	8613:10:264364:264420	3064214	2	True				
ANR	3067549	Statement	"""because there aren't enough entries. PIDENVID_MAX is """	8614:4:264426:264480	3064214	3	True				
ANR	3067550	Statement	"""currently %d! Programmer Error."""	8615:4:264486:264518	3064214	4	True				
ANR	3067551	Statement	","	8615:37:264519:264519	3064214	5	True				
ANR	3067552	Statement	PIDENVID_MAX	8615:39:264521:264532	3064214	6	True				
ANR	3067553	Statement	)	8615:52:264534:264534	3064214	7	True				
ANR	3067554	ExpressionStatement		8615:53:264535:264535	3064214	8	True				
ANR	3067555	CompoundStatement		1303:4:40624:40675	3064214	131					
ANR	3067556	IdentifierDeclStatement	"int insert_result = pidTable -> insert ( newpid , pidtmp ) ;"	8620:4:264579:264630	3064214	0	True				
ANR	3067557	IdentifierDecl	"insert_result = pidTable -> insert ( newpid , pidtmp )"		3064214	0					
ANR	3067558	IdentifierDeclType	int		3064214	0					
ANR	3067559	Identifier	insert_result		3064214	1					
ANR	3067560	AssignmentExpression	"insert_result = pidTable -> insert ( newpid , pidtmp )"		3064214	2		=			
ANR	3067561	Identifier	insert_result		3064214	0					
ANR	3067562	CallExpression	"pidTable -> insert ( newpid , pidtmp )"		3064214	1					
ANR	3067563	Callee	pidTable -> insert		3064214	0					
ANR	3067564	PtrMemberAccess	pidTable -> insert		3064214	0					
ANR	3067565	Identifier	pidTable		3064214	0					
ANR	3067566	Identifier	insert		3064214	1					
ANR	3067567	ArgumentList	newpid		3064214	1					
ANR	3067568	Argument	newpid		3064214	0					
ANR	3067569	Identifier	newpid		3064214	0					
ANR	3067570	Argument	pidtmp		3064214	1					
ANR	3067571	Identifier	pidtmp		3064214	0					
ANR	3067572	ExpressionStatement	assert ( insert_result == 0 )	8621:4:264636:264663	3064214	1	True				
ANR	3067573	CallExpression	assert ( insert_result == 0 )		3064214	0					
ANR	3067574	Callee	assert		3064214	0					
ANR	3067575	Identifier	assert		3064214	0					
ANR	3067576	ArgumentList	insert_result == 0		3064214	1					
ANR	3067577	Argument	insert_result == 0		3064214	0					
ANR	3067578	EqualityExpression	insert_result == 0		3064214	0		==			
ANR	3067579	Identifier	insert_result		3064214	0					
ANR	3067580	PrimaryExpression	0		3064214	1					
ANR	3067581	IfStatement	if ( ( family_info != NULL ) && ! m_proc_family -> register_from_child ( ) )		3064214	132					
ANR	3067582	Condition	( family_info != NULL ) && ! m_proc_family -> register_from_child ( )	8628:5:264800:264861	3064214	0	True				
ANR	3067583	AndExpression	( family_info != NULL ) && ! m_proc_family -> register_from_child ( )		3064214	0		&&			
ANR	3067584	EqualityExpression	family_info != NULL		3064214	0		!=			
ANR	3067585	Identifier	family_info		3064214	0					
ANR	3067586	Identifier	NULL		3064214	1					
ANR	3067587	UnaryOperationExpression	! m_proc_family -> register_from_child ( )		3064214	1					
ANR	3067588	UnaryOperator	!		3064214	0					
ANR	3067589	CallExpression	m_proc_family -> register_from_child ( )		3064214	1					
ANR	3067590	Callee	m_proc_family -> register_from_child		3064214	0					
ANR	3067591	PtrMemberAccess	m_proc_family -> register_from_child		3064214	0					
ANR	3067592	Identifier	m_proc_family		3064214	0					
ANR	3067593	Identifier	register_from_child		3064214	1					
ANR	3067594	ArgumentList			3064214	1					
ANR	3067595	CompoundStatement		1311:69:40909:40909	3064214	1					
ANR	3067596	ExpressionStatement	"Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , & pidtmp -> penvid , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"	8629:2:264868:265140	3064214	0	True				
ANR	3067597	CallExpression	"Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , & pidtmp -> penvid , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"		3064214	0					
ANR	3067598	Callee	Register_Family		3064214	0					
ANR	3067599	Identifier	Register_Family		3064214	0					
ANR	3067600	ArgumentList	newpid		3064214	1					
ANR	3067601	Argument	newpid		3064214	0					
ANR	3067602	Identifier	newpid		3064214	0					
ANR	3067603	Argument	getpid ( )		3064214	1					
ANR	3067604	CallExpression	getpid ( )		3064214	0					
ANR	3067605	Callee	getpid		3064214	0					
ANR	3067606	Identifier	getpid		3064214	0					
ANR	3067607	ArgumentList			3064214	1					
ANR	3067608	Argument	family_info -> max_snapshot_interval		3064214	2					
ANR	3067609	PtrMemberAccess	family_info -> max_snapshot_interval		3064214	0					
ANR	3067610	Identifier	family_info		3064214	0					
ANR	3067611	Identifier	max_snapshot_interval		3064214	1					
ANR	3067612	Argument	& pidtmp -> penvid		3064214	3					
ANR	3067613	UnaryOperationExpression	& pidtmp -> penvid		3064214	0					
ANR	3067614	UnaryOperator	&		3064214	0					
ANR	3067615	PtrMemberAccess	pidtmp -> penvid		3064214	1					
ANR	3067616	Identifier	pidtmp		3064214	0					
ANR	3067617	Identifier	penvid		3064214	1					
ANR	3067618	Argument	family_info -> login		3064214	4					
ANR	3067619	PtrMemberAccess	family_info -> login		3064214	0					
ANR	3067620	Identifier	family_info		3064214	0					
ANR	3067621	Identifier	login		3064214	1					
ANR	3067622	Argument	NULL		3064214	5					
ANR	3067623	Identifier	NULL		3064214	0					
ANR	3067624	Argument	family_info -> cgroup		3064214	6					
ANR	3067625	PtrMemberAccess	family_info -> cgroup		3064214	0					
ANR	3067626	Identifier	family_info		3064214	0					
ANR	3067627	Identifier	cgroup		3064214	1					
ANR	3067628	Argument	family_info -> glexec_proxy		3064214	7					
ANR	3067629	PtrMemberAccess	family_info -> glexec_proxy		3064214	0					
ANR	3067630	Identifier	family_info		3064214	0					
ANR	3067631	Identifier	glexec_proxy		3064214	1					
ANR	3067632	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	8640:4:265157:265191	3064214	133	True				
ANR	3067633	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		3064214	0		=			
ANR	3067634	Identifier	runtime		3064214	0					
ANR	3067635	CallExpression	UtcTime :: getTimeDouble ( )		3064214	1					
ANR	3067636	Callee	UtcTime :: getTimeDouble		3064214	0					
ANR	3067637	Identifier	UtcTime :: getTimeDouble		3064214	0					
ANR	3067638	ArgumentList			3064214	1					
ANR	3067639	ExpressionStatement	delta_runtime = ( runtime - create_process_begin_time )	8641:4:265197:265250	3064214	134	True				
ANR	3067640	AssignmentExpression	delta_runtime = ( runtime - create_process_begin_time )		3064214	0		=			
ANR	3067641	Identifier	delta_runtime		3064214	0					
ANR	3067642	AdditiveExpression	runtime - create_process_begin_time		3064214	1		-			
ANR	3067643	Identifier	runtime		3064214	0					
ANR	3067644	Identifier	create_process_begin_time		3064214	1					
ANR	3067645	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Child Process: pid %lu at %s (%.2f sec)\\n"" , ( unsigned long ) newpid , pidtmp -> sinful_string . Value ( ) , delta_runtime )"	8642:1:265253:265410	3064214	135	True				
ANR	3067646	CallExpression	"dprintf ( D_DAEMONCORE , ""Child Process: pid %lu at %s (%.2f sec)\\n"" , ( unsigned long ) newpid , pidtmp -> sinful_string . Value ( ) , delta_runtime )"		3064214	0					
ANR	3067647	Callee	dprintf		3064214	0					
ANR	3067648	Identifier	dprintf		3064214	0					
ANR	3067649	ArgumentList	D_DAEMONCORE		3064214	1					
ANR	3067650	Argument	D_DAEMONCORE		3064214	0					
ANR	3067651	Identifier	D_DAEMONCORE		3064214	0					
ANR	3067652	Argument	"""Child Process: pid %lu at %s (%.2f sec)\\n"""		3064214	1					
ANR	3067653	PrimaryExpression	"""Child Process: pid %lu at %s (%.2f sec)\\n"""		3064214	0					
ANR	3067654	Argument	( unsigned long ) newpid		3064214	2					
ANR	3067655	CastExpression	( unsigned long ) newpid		3064214	0					
ANR	3067656	CastTarget	unsigned long		3064214	0					
ANR	3067657	Identifier	newpid		3064214	1					
ANR	3067658	Argument	pidtmp -> sinful_string . Value ( )		3064214	3					
ANR	3067659	CallExpression	pidtmp -> sinful_string . Value ( )		3064214	0					
ANR	3067660	Callee	pidtmp -> sinful_string . Value		3064214	0					
ANR	3067661	MemberAccess	pidtmp -> sinful_string . Value		3064214	0					
ANR	3067662	PtrMemberAccess	pidtmp -> sinful_string		3064214	0					
ANR	3067663	Identifier	pidtmp		3064214	0					
ANR	3067664	Identifier	sinful_string		3064214	1					
ANR	3067665	Identifier	Value		3064214	1					
ANR	3067666	ArgumentList			3064214	1					
ANR	3067667	Argument	delta_runtime		3064214	4					
ANR	3067668	Identifier	delta_runtime		3064214	0					
ANR	3067669	ExpressionStatement	WatchPid ( pidtmp )	8648:1:265426:265442	3064214	136	True				
ANR	3067670	CallExpression	WatchPid ( pidtmp )		3064214	0					
ANR	3067671	Callee	WatchPid		3064214	0					
ANR	3067672	Identifier	WatchPid		3064214	0					
ANR	3067673	ArgumentList	pidtmp		3064214	1					
ANR	3067674	Argument	pidtmp		3064214	0					
ANR	3067675	Identifier	pidtmp		3064214	0					
ANR	3067676	Label	wrapup :	8655:1:265660:265666	3064214	137	True				
ANR	3067677	Identifier	wrapup		3064214	0					
ANR	3067678	ExpressionStatement	num_pid_collisions = 0	8661:1:265841:265863	3064214	138	True				
ANR	3067679	AssignmentExpression	num_pid_collisions = 0		3064214	0		=			
ANR	3067680	Identifier	num_pid_collisions		3064214	0					
ANR	3067681	PrimaryExpression	0		3064214	1					
ANR	3067682	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		3064214	139					
ANR	3067683	ForInit	i = 0 ;	8670:6:266046:266049	3064214	0	True				
ANR	3067684	AssignmentExpression	i = 0		3064214	0		=			
ANR	3067685	Identifier	i		3064214	0					
ANR	3067686	PrimaryExpression	0		3064214	1					
ANR	3067687	Condition	i <= 2	8670:11:266051:266054	3064214	1	True				
ANR	3067688	RelationalExpression	i <= 2		3064214	0		<=			
ANR	3067689	Identifier	i		3064214	0					
ANR	3067690	PrimaryExpression	2		3064214	1					
ANR	3067691	PostIncDecOperationExpression	i ++	8670:17:266057:266059	3064214	2	True				
ANR	3067692	Identifier	i		3064214	0					
ANR	3067693	IncDec	++		3064214	1					
ANR	3067694	CompoundStatement		1353:22:42107:42107	3064214	3					
ANR	3067695	ForStatement	for ( j = 0 ; j <= 1 ; j ++ )		3064214	0					
ANR	3067696	ForInit	j = 0 ;	8671:7:266071:266074	3064214	0	True				
ANR	3067697	AssignmentExpression	j = 0		3064214	0		=			
ANR	3067698	Identifier	j		3064214	0					
ANR	3067699	PrimaryExpression	0		3064214	1					
ANR	3067700	Condition	j <= 1	8671:12:266076:266079	3064214	1	True				
ANR	3067701	RelationalExpression	j <= 1		3064214	0		<=			
ANR	3067702	Identifier	j		3064214	0					
ANR	3067703	PrimaryExpression	1		3064214	1					
ANR	3067704	PostIncDecOperationExpression	j ++	8671:18:266082:266084	3064214	2	True				
ANR	3067705	Identifier	j		3064214	0					
ANR	3067706	IncDec	++		3064214	1					
ANR	3067707	CompoundStatement		1354:23:42132:42132	3064214	3					
ANR	3067708	IfStatement	if ( dc_pipe_fds [ i ] [ j ] != - 1 )		3064214	0					
ANR	3067709	Condition	dc_pipe_fds [ i ] [ j ] != - 1	8672:7:266096:266118	3064214	0	True				
ANR	3067710	EqualityExpression	dc_pipe_fds [ i ] [ j ] != - 1		3064214	0		!=			
ANR	3067711	ArrayIndexing	dc_pipe_fds [ i ] [ j ]		3064214	0					
ANR	3067712	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067713	Identifier	dc_pipe_fds		3064214	0					
ANR	3067714	Identifier	i		3064214	1					
ANR	3067715	Identifier	j		3064214	1					
ANR	3067716	UnaryOperationExpression	- 1		3064214	1					
ANR	3067717	UnaryOperator	-		3064214	0					
ANR	3067718	PrimaryExpression	1		3064214	1					
ANR	3067719	CompoundStatement		1355:32:42166:42166	3064214	1					
ANR	3067720	ExpressionStatement	Close_Pipe ( dc_pipe_fds [ i ] [ j ] )	8673:4:266127:266156	3064214	0	True				
ANR	3067721	CallExpression	Close_Pipe ( dc_pipe_fds [ i ] [ j ] )		3064214	0					
ANR	3067722	Callee	Close_Pipe		3064214	0					
ANR	3067723	Identifier	Close_Pipe		3064214	0					
ANR	3067724	ArgumentList	dc_pipe_fds [ i ] [ j ]		3064214	1					
ANR	3067725	Argument	dc_pipe_fds [ i ] [ j ]		3064214	0					
ANR	3067726	ArrayIndexing	dc_pipe_fds [ i ] [ j ]		3064214	0					
ANR	3067727	ArrayIndexing	dc_pipe_fds [ i ]		3064214	0					
ANR	3067728	Identifier	dc_pipe_fds		3064214	0					
ANR	3067729	Identifier	i		3064214	1					
ANR	3067730	Identifier	j		3064214	1					
ANR	3067731	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_Process001"" , IF_VERBOSEPUB , runtime )"	8678:4:266175:266257	3064214	140	True				
ANR	3067732	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_Process001"" , IF_VERBOSEPUB , runtime )"		3064214	0		=			
ANR	3067733	Identifier	runtime		3064214	0					
ANR	3067734	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreate_Process001"" , IF_VERBOSEPUB , runtime )"		3064214	1					
ANR	3067735	Callee	dc_stats . AddRuntimeSample		3064214	0					
ANR	3067736	MemberAccess	dc_stats . AddRuntimeSample		3064214	0					
ANR	3067737	Identifier	dc_stats		3064214	0					
ANR	3067738	Identifier	AddRuntimeSample		3064214	1					
ANR	3067739	ArgumentList	"""DCCreate_Process001"""		3064214	1					
ANR	3067740	Argument	"""DCCreate_Process001"""		3064214	0					
ANR	3067741	PrimaryExpression	"""DCCreate_Process001"""		3064214	0					
ANR	3067742	Argument	IF_VERBOSEPUB		3064214	1					
ANR	3067743	Identifier	IF_VERBOSEPUB		3064214	0					
ANR	3067744	Argument	runtime		3064214	2					
ANR	3067745	Identifier	runtime		3064214	0					
ANR	3067746	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_ProcessTot"" , IF_VERBOSEPUB , create_process_begin_time )"	8679:4:266263:266363	3064214	141	True				
ANR	3067747	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_ProcessTot"" , IF_VERBOSEPUB , create_process_begin_time )"		3064214	0		=			
ANR	3067748	Identifier	runtime		3064214	0					
ANR	3067749	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreate_ProcessTot"" , IF_VERBOSEPUB , create_process_begin_time )"		3064214	1					
ANR	3067750	Callee	dc_stats . AddRuntimeSample		3064214	0					
ANR	3067751	MemberAccess	dc_stats . AddRuntimeSample		3064214	0					
ANR	3067752	Identifier	dc_stats		3064214	0					
ANR	3067753	Identifier	AddRuntimeSample		3064214	1					
ANR	3067754	ArgumentList	"""DCCreate_ProcessTot"""		3064214	1					
ANR	3067755	Argument	"""DCCreate_ProcessTot"""		3064214	0					
ANR	3067756	PrimaryExpression	"""DCCreate_ProcessTot"""		3064214	0					
ANR	3067757	Argument	IF_VERBOSEPUB		3064214	1					
ANR	3067758	Identifier	IF_VERBOSEPUB		3064214	0					
ANR	3067759	Argument	create_process_begin_time		3064214	2					
ANR	3067760	Identifier	create_process_begin_time		3064214	0					
ANR	3067761	IfStatement	if ( ( runtime - create_process_begin_time ) > delta_runtime + 0.5 )		3064214	142					
ANR	3067762	Condition	( runtime - create_process_begin_time ) > delta_runtime + 0.5	8680:8:266373:266431	3064214	0	True				
ANR	3067763	RelationalExpression	( runtime - create_process_begin_time ) > delta_runtime + 0.5		3064214	0		>			
ANR	3067764	AdditiveExpression	runtime - create_process_begin_time		3064214	0		-			
ANR	3067765	Identifier	runtime		3064214	0					
ANR	3067766	Identifier	create_process_begin_time		3064214	1					
ANR	3067767	AdditiveExpression	delta_runtime + 0.5		3064214	1		+			
ANR	3067768	Identifier	delta_runtime		3064214	0					
ANR	3067769	PrimaryExpression	0.5		3064214	1					
ANR	3067770	CompoundStatement		1363:69:42479:42479	3064214	1					
ANR	3067771	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Warning: cleanup from Create_Process took %.3f sec, Create_Process took %.3f sec overall\\n"" , ( runtime - create_process_begin_time ) - delta_runtime , ( runtime - create_process_begin_time ) )"	8681:4:266440:266682	3064214	0	True				
ANR	3067772	CallExpression	"dprintf ( D_DAEMONCORE , ""Warning: cleanup from Create_Process took %.3f sec, Create_Process took %.3f sec overall\\n"" , ( runtime - create_process_begin_time ) - delta_runtime , ( runtime - create_process_begin_time ) )"		3064214	0					
ANR	3067773	Callee	dprintf		3064214	0					
ANR	3067774	Identifier	dprintf		3064214	0					
ANR	3067775	ArgumentList	D_DAEMONCORE		3064214	1					
ANR	3067776	Argument	D_DAEMONCORE		3064214	0					
ANR	3067777	Identifier	D_DAEMONCORE		3064214	0					
ANR	3067778	Argument	"""Warning: cleanup from Create_Process took %.3f sec, Create_Process took %.3f sec overall\\n"""		3064214	1					
ANR	3067779	PrimaryExpression	"""Warning: cleanup from Create_Process took %.3f sec, Create_Process took %.3f sec overall\\n"""		3064214	0					
ANR	3067780	Argument	( runtime - create_process_begin_time ) - delta_runtime		3064214	2					
ANR	3067781	AdditiveExpression	( runtime - create_process_begin_time ) - delta_runtime		3064214	0		-			
ANR	3067782	AdditiveExpression	runtime - create_process_begin_time		3064214	0		-			
ANR	3067783	Identifier	runtime		3064214	0					
ANR	3067784	Identifier	create_process_begin_time		3064214	1					
ANR	3067785	Identifier	delta_runtime		3064214	1					
ANR	3067786	Argument	runtime - create_process_begin_time		3064214	3					
ANR	3067787	AdditiveExpression	runtime - create_process_begin_time		3064214	0		-			
ANR	3067788	Identifier	runtime		3064214	0					
ANR	3067789	Identifier	create_process_begin_time		3064214	1					
ANR	3067790	ExpressionStatement	errno = return_errno	8687:1:266692:266712	3064214	143	True				
ANR	3067791	AssignmentExpression	errno = return_errno		3064214	0		=			
ANR	3067792	Identifier	errno		3064214	0					
ANR	3067793	Identifier	return_errno		3064214	1					
ANR	3067794	ReturnStatement	return newpid ;	8688:1:266715:266728	3064214	144	True				
ANR	3067795	Identifier	newpid		3064214	0					
ANR	3067796	ReturnType	int		3064214	1					
ANR	3067797	Identifier	DaemonCore :: Create_Process		3064214	2					
ANR	3067798	ParameterList	"const char * executable , ArgList const & args , priv_state priv , int reaper_id , int want_command_port , Env const * env , const char * cwd , FamilyInfo * family_info , Stream * sock_inherit_list [ ] , int std [ ] , int fd_inherit_list [ ] , int nice_inc , sigset_t * sigmask , int job_opt_mask , size_t * core_hard_limit , int * affinity_mask , char const * daemon_sock , MyString * err_return_msg"		3064214	3					
ANR	3067799	Parameter	const char * executable	7299:3:223415:223439	3064214	0	True				
ANR	3067800	ParameterType	const char *		3064214	0					
ANR	3067801	Identifier	executable		3064214	1					
ANR	3067802	Parameter	ArgList const & args	7300:3:223445:223463	3064214	1	True				
ANR	3067803	ParameterType	ArgList const &		3064214	0					
ANR	3067804	Identifier	args		3064214	1					
ANR	3067805	Parameter	priv_state priv	7301:3:223469:223486	3064214	2	True				
ANR	3067806	ParameterType	priv_state		3064214	0					
ANR	3067807	Identifier	priv		3064214	1					
ANR	3067808	Parameter	int reaper_id	7302:3:223492:223514	3064214	3	True				
ANR	3067809	ParameterType	int		3064214	0					
ANR	3067810	Identifier	reaper_id		3064214	1					
ANR	3067811	Parameter	int want_command_port	7303:3:223520:223550	3064214	4	True				
ANR	3067812	ParameterType	int		3064214	0					
ANR	3067813	Identifier	want_command_port		3064214	1					
ANR	3067814	Parameter	Env const * env	7304:3:223556:223573	3064214	5	True				
ANR	3067815	ParameterType	Env const *		3064214	0					
ANR	3067816	Identifier	env		3064214	1					
ANR	3067817	Parameter	const char * cwd	7305:3:223579:223596	3064214	6	True				
ANR	3067818	ParameterType	const char *		3064214	0					
ANR	3067819	Identifier	cwd		3064214	1					
ANR	3067820	Parameter	FamilyInfo * family_info	7306:3:223602:223627	3064214	7	True				
ANR	3067821	ParameterType	FamilyInfo *		3064214	0					
ANR	3067822	Identifier	family_info		3064214	1					
ANR	3067823	Parameter	Stream * sock_inherit_list [ ]	7307:3:223633:223666	3064214	8	True				
ANR	3067824	ParameterType	Stream * [ ]		3064214	0					
ANR	3067825	Identifier	sock_inherit_list		3064214	1					
ANR	3067826	Parameter	int std [ ]	7308:3:223672:223690	3064214	9	True				
ANR	3067827	ParameterType	int [ ]		3064214	0					
ANR	3067828	Identifier	std		3064214	1					
ANR	3067829	Parameter	int fd_inherit_list [ ]	7309:3:223696:223726	3064214	10	True				
ANR	3067830	ParameterType	int [ ]		3064214	0					
ANR	3067831	Identifier	fd_inherit_list		3064214	1					
ANR	3067832	Parameter	int nice_inc	7310:3:223732:223753	3064214	11	True				
ANR	3067833	ParameterType	int		3064214	0					
ANR	3067834	Identifier	nice_inc		3064214	1					
ANR	3067835	Parameter	sigset_t * sigmask	7311:3:223759:223780	3064214	12	True				
ANR	3067836	ParameterType	sigset_t *		3064214	0					
ANR	3067837	Identifier	sigmask		3064214	1					
ANR	3067838	Parameter	int job_opt_mask	7312:3:223786:223811	3064214	13	True				
ANR	3067839	ParameterType	int		3064214	0					
ANR	3067840	Identifier	job_opt_mask		3064214	1					
ANR	3067841	Parameter	size_t * core_hard_limit	7313:3:223817:223846	3064214	14	True				
ANR	3067842	ParameterType	size_t *		3064214	0					
ANR	3067843	Identifier	core_hard_limit		3064214	1					
ANR	3067844	Parameter	int * affinity_mask	7314:3:223852:223873	3064214	15	True				
ANR	3067845	ParameterType	int *		3064214	0					
ANR	3067846	Identifier	affinity_mask		3064214	1					
ANR	3067847	Parameter	char const * daemon_sock	7315:3:223879:223904	3064214	16	True				
ANR	3067848	ParameterType	char const *		3064214	0					
ANR	3067849	Identifier	daemon_sock		3064214	1					
ANR	3067850	Parameter	MyString * err_return_msg	7316:3:223910:223938	3064214	17	True				
ANR	3067851	ParameterType	MyString *		3064214	0					
ANR	3067852	Identifier	err_return_msg		3064214	1					
ANR	3067853	CFGEntryNode	ENTRY		3064214		True				
ANR	3067854	CFGExitNode	EXIT		3064214		True				
ANR	3067855	Symbol	& si . hStdInput		3064214						
ANR	3067856	Symbol	MAX_INHERIT_SOCKS		3064214						
ANR	3067857	Symbol	forker_pid		3064214						
ANR	3067858	Symbol	executable_buf . Value		3064214						
ANR	3067859	Symbol	set_user_priv		3064214						
ANR	3067860	Symbol	allow_scripts		3064214						
ANR	3067861	Symbol	* getSecMan		3064214						
ANR	3067862	Symbol	path		3064214						
ANR	3067863	Symbol	can_switch_ids		3064214						
ANR	3067864	Symbol	( * pipeHandleTable ) [ index ] -> get_handle		3064214						
ANR	3067865	Symbol	session_id . c_str		3064214						
ANR	3067866	Symbol	bIs16Bit		3064214						
ANR	3067867	Symbol	std		3064214						
ANR	3067868	Symbol	errno		3064214						
ANR	3067869	Symbol	inheritFds		3064214						
ANR	3067870	Symbol	nice_inc		3064214						
ANR	3067871	Symbol	reapTable [ reaper_id - 1 ] . num		3064214						
ANR	3067872	Symbol	piProcess		3064214						
ANR	3067873	Symbol	pidtmp -> sinful_string . Value		3064214						
ANR	3067874	Symbol	* inheritFds		3064214						
ANR	3067875	Symbol	interpreter		3064214						
ANR	3067876	Symbol	longTemp		3064214						
ANR	3067877	Symbol	executable_with_exe		3064214						
ANR	3067878	Symbol	pidtmp -> child_session_id		3064214						
ANR	3067879	Symbol	rc		3064214						
ANR	3067880	Symbol	shared_port_endpoint		3064214						
ANR	3067881	Symbol	reapTable		3064214						
ANR	3067882	Symbol	pidtmp -> reaper_id		3064214						
ANR	3067883	Symbol	job_environ		3064214						
ANR	3067884	Symbol	newenv		3064214						
ANR	3067885	Symbol	binary_executable		3064214						
ANR	3067886	Symbol	* reaper_id		3064214						
ANR	3067887	Symbol	sock_inherit_list		3064214						
ANR	3067888	Symbol	current_priv		3064214						
ANR	3067889	Symbol	ssock		3064214						
ANR	3067890	Symbol	get_mySubSystem		3064214						
ANR	3067891	Symbol	want_udp		3064214						
ANR	3067892	Symbol	HANDLE_FLAG_INHERIT		3064214						
ANR	3067893	Symbol	condor_basename		3064214						
ANR	3067894	Symbol	* pipeHandleTable		3064214						
ANR	3067895	Symbol	inheritbuf . Value		3064214						
ANR	3067896	Symbol	num_pid_collisions		3064214						
ANR	3067897	Symbol	ssock . set_inheritable		3064214						
ANR	3067898	Symbol	mii		3064214						
ANR	3067899	Symbol	pidtmp -> was_not_responding		3064214						
ANR	3067900	Symbol	* affinity_mask		3064214						
ANR	3067901	Symbol	getSecMan ( ) -> ExportSecSessionInfo		3064214						
ANR	3067902	Symbol	STARTF_USESTDHANDLES		3064214						
ANR	3067903	Symbol	priv_state_get_handle		3064214						
ANR	3067904	Symbol	default_vars		3064214						
ANR	3067905	Symbol	si		3064214						
ANR	3067906	Symbol	param_boolean_crufty		3064214						
ANR	3067907	Symbol	shared_port_endpoint . GetMyRemoteAddress		3064214						
ANR	3067908	Symbol	DC_STD_FD_NOPIPE		3064214						
ANR	3067909	Symbol	args_errors		3064214						
ANR	3067910	Symbol	pidtmp -> pipeReady		3064214						
ANR	3067911	Symbol	CREATE_NEW_PROCESS_GROUP		3064214						
ANR	3067912	Symbol	privateinheritbuf		3064214						
ANR	3067913	Symbol	GrantDesktopAccess		3064214						
ANR	3067914	Symbol	create_process_flags		3064214						
ANR	3067915	Symbol	cwdBackup		3064214						
ANR	3067916	Symbol	mypid		3064214						
ANR	3067917	Symbol	i		3064214						
ANR	3067918	Symbol	session_id		3064214						
ANR	3067919	Symbol	j		3064214						
ANR	3067920	Symbol	insert_result		3064214						
ANR	3067921	Symbol	PIDENVID_OK		3064214						
ANR	3067922	Symbol	executable		3064214						
ANR	3067923	Symbol	ENV_PRIVATE		3064214						
ANR	3067924	Symbol	cwd		3064214						
ANR	3067925	Symbol	* sock_inherit_list		3064214						
ANR	3067926	Symbol	dc_stats . AddRuntimeSample		3064214						
ANR	3067927	Symbol	pipe_handler_desc		3064214						
ANR	3067928	Symbol	s		3064214						
ANR	3067929	Symbol	* std_handles		3064214						
ANR	3067930	Symbol	IF_VERBOSEPUB		3064214						
ANR	3067931	Symbol	create_process_begin_time		3064214						
ANR	3067932	Symbol	HAS_DCJOBOPT_NEVER_USE_SHARED_PORT		3064214						
ANR	3067933	Symbol	temp_path . Length		3064214						
ANR	3067934	Symbol	privateinheritbuf . Value		3064214						
ANR	3067935	Symbol	D_NETWORK		3064214						
ANR	3067936	Symbol	temp_path . Value		3064214						
ANR	3067937	Symbol	executable_buf		3064214						
ANR	3067938	Symbol	& si		3064214						
ANR	3067939	Symbol	pidtmp -> pipeEnd		3064214						
ANR	3067940	Symbol	ProcFamilyInterface :: create		3064214						
ANR	3067941	Symbol	path . Length		3064214						
ANR	3067942	Symbol	claimId . claimId		3064214						
ANR	3067943	Symbol	& DaemonCore :: PidEntry :: pipeHandler		3064214						
ANR	3067944	Symbol	* dc_pipe_fds		3064214						
ANR	3067945	Symbol	_get_osfhandle		3064214						
ANR	3067946	Symbol	loaded		3064214						
ANR	3067947	Symbol	strlen		3064214						
ANR	3067948	Symbol	ptmp		3064214						
ANR	3067949	Symbol	newpid		3064214						
ANR	3067950	Symbol	tempSock		3064214						
ANR	3067951	Symbol	cp_result		3064214						
ANR	3067952	Symbol	priv		3064214						
ANR	3067953	Symbol	daemon_sock		3064214						
ANR	3067954	Symbol	batch_file		3064214						
ANR	3067955	Symbol	GetSystemDirectory		3064214						
ANR	3067956	Symbol	* * i		3064214						
ANR	3067957	Symbol	& strArgs		3064214						
ANR	3067958	Symbol	delta_runtime		3064214						
ANR	3067959	Symbol	D_FULLDEBUG		3064214						
ANR	3067960	Symbol	param_boolean		3064214						
ANR	3067961	Symbol	claimId		3064214						
ANR	3067962	Symbol	* pidtmp		3064214						
ANR	3067963	Symbol	family_info -> cgroup		3064214						
ANR	3067964	Symbol	static_cast		3064214						
ANR	3067965	Symbol	tempSock -> get_file_desc		3064214						
ANR	3067966	Symbol	shared_port_addr		3064214						
ANR	3067967	Symbol	pidtmp		3064214						
ANR	3067968	Symbol	fd		3064214						
ANR	3067969	Symbol	strArgs . Value		3064214						
ANR	3067970	Symbol	* * std_handles		3064214						
ANR	3067971	Symbol	shared_port_endpoint . GetMyLocalAddress		3064214						
ANR	3067972	Symbol	GetEnviron		3064214						
ANR	3067973	Symbol	alternate_exec_pathname		3064214						
ANR	3067974	Symbol	* pidTable		3064214						
ANR	3067975	Symbol	description		3064214						
ANR	3067976	Symbol	EnvGetName		3064214						
ANR	3067977	Symbol	piProcess . dwProcessId		3064214						
ANR	3067978	Symbol	family_info		3064214						
ANR	3067979	Symbol	shared_port_endpoint . GetSocketFileName		3064214						
ANR	3067980	Symbol	pidtmp -> new_process_group		3064214						
ANR	3067981	Symbol	PRIV_USER_FINAL		3064214						
ANR	3067982	Symbol	PipeHandlercpp		3064214						
ANR	3067983	Symbol	time_of_fork		3064214						
ANR	3067984	Symbol	ResumeThread		3064214						
ANR	3067985	Symbol	pidtmp -> hung_tid		3064214						
ANR	3067986	Symbol	MapAndLoad		3064214						
ANR	3067987	Symbol	* * index		3064214						
ANR	3067988	Symbol	temp_path		3064214						
ANR	3067989	Symbol	ssock_ptr		3064214						
ANR	3067990	Symbol	mask		3064214						
ANR	3067991	Symbol	pidtmp -> hWnd		3064214						
ANR	3067992	Symbol	* * dc_pipe_fds		3064214						
ANR	3067993	Symbol	false		3064214						
ANR	3067994	Symbol	D_ALWAYS		3064214						
ANR	3067995	Symbol	length		3064214						
ANR	3067996	Symbol	si . wShowWindow		3064214						
ANR	3067997	Symbol	& args_errors		3064214						
ANR	3067998	Symbol	pidtmp -> tid		3064214						
ANR	3067999	Symbol	env		3064214						
ANR	3068000	Symbol	HAS_DCJOBOPT_NO_UDP		3064214						
ANR	3068001	Symbol	return_errno		3064214						
ANR	3068002	Symbol	args		3064214						
ANR	3068003	Symbol	* * pidtmp		3064214						
ANR	3068004	Symbol	systemshell		3064214						
ANR	3068005	Symbol	envbuf		3064214						
ANR	3068006	Symbol	rsock . set_inheritable		3064214						
ANR	3068007	Symbol	fd_inherit_list		3064214						
ANR	3068008	Symbol	FALSE		3064214						
ANR	3068009	Symbol	* reapTable		3064214						
ANR	3068010	Symbol	CONDOR_CHILD_FQU		3064214						
ANR	3068011	Symbol	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		3064214						
ANR	3068012	Symbol	MAX_PATH		3064214						
ANR	3068013	Symbol	strdup		3064214						
ANR	3068014	Symbol	Create_Pipe		3064214						
ANR	3068015	Symbol	pidtmp -> parent_is_local		3064214						
ANR	3068016	Symbol	GetEnvironmentStrings		3064214						
ANR	3068017	Symbol	ENV_INHERIT		3064214						
ANR	3068018	Symbol	m_proc_family -> register_from_child		3064214						
ANR	3068019	Symbol	* index		3064214						
ANR	3068020	Symbol	piProcess . hProcess		3064214						
ANR	3068021	Symbol	* * default_vars		3064214						
ANR	3068022	Symbol	affinity_mask		3064214						
ANR	3068023	Symbol	namelen		3064214						
ANR	3068024	Symbol	args . GetArgsStringWin32		3064214						
ANR	3068025	Symbol	my_env		3064214						
ANR	3068026	Symbol	session_key . c_str		3064214						
ANR	3068027	Symbol	pidtmp -> std_pipes		3064214						
ANR	3068028	Symbol	args_success		3064214						
ANR	3068029	Symbol	family_info -> glexec_proxy		3064214						
ANR	3068030	Symbol	c_session_key		3064214						
ANR	3068031	Symbol	UtcTime :: getTimeDouble		3064214						
ANR	3068032	Symbol	PIPE_INDEX_OFFSET		3064214						
ANR	3068033	Symbol	piProcess . dwThreadId		3064214						
ANR	3068034	Symbol	IDLE_PRIORITY_CLASS		3064214						
ANR	3068035	Symbol	& pidtmp -> penvid		3064214						
ANR	3068036	Symbol	* tempSock		3064214						
ANR	3068037	Symbol	job_environ . getWindowsEnvironmentString		3064214						
ANR	3068038	Symbol	* cwd		3064214						
ANR	3068039	Symbol	index		3064214						
ANR	3068040	Symbol	session_id_c_str		3064214						
ANR	3068041	Symbol	getSecMan		3064214						
ANR	3068042	Symbol	SCS_DOS_BINARY		3064214						
ANR	3068043	Symbol	& binType		3064214						
ANR	3068044	Symbol	pidtmp -> sinful_string		3064214						
ANR	3068045	Symbol	DAEMON		3064214						
ANR	3068046	Symbol	GetExecutableAndArgumentTemplateByExtention		3064214						
ANR	3068047	Symbol	envbuf . Value		3064214						
ANR	3068048	Symbol	loaded . fDOSImage		3064214						
ANR	3068049	Symbol	STARTF_USESHOWWINDOW		3064214						
ANR	3068050	Symbol	si . dwFlags		3064214						
ANR	3068051	Symbol	pidtmp -> is_local		3064214						
ANR	3068052	Symbol	extension		3064214						
ANR	3068053	Symbol	session_id . empty		3064214						
ANR	3068054	Symbol	family_info -> max_snapshot_interval		3064214						
ANR	3068055	Symbol	ssock . serialize		3064214						
ANR	3068056	Symbol	sigmask		3064214						
ANR	3068057	Symbol	rsock		3064214						
ANR	3068058	Symbol	pipe_desc		3064214						
ANR	3068059	Symbol	* std		3064214						
ANR	3068060	Symbol	* pidtmp -> std_pipes		3064214						
ANR	3068061	Symbol	valid		3064214						
ANR	3068062	Symbol	* * * pipeHandleTable		3064214						
ANR	3068063	Symbol	m_wants_dc_udp		3064214						
ANR	3068064	Symbol	Condor_Crypt_Base :: randomHexKey		3064214						
ANR	3068065	Symbol	pidenvid_append_direct		3064214						
ANR	3068066	Symbol	session_key_c_str		3064214						
ANR	3068067	Symbol	c_session_id		3064214						
ANR	3068068	Symbol	pidTable		3064214						
ANR	3068069	Symbol	executable_with_exe . Value		3064214						
ANR	3068070	Symbol	SW_SHOWNOACTIVATE		3064214						
ANR	3068071	Symbol	binType		3064214						
ANR	3068072	Symbol	maxReap		3064214						
ANR	3068073	Symbol	strArgs		3064214						
ANR	3068074	Symbol	si . cb		3064214						
ANR	3068075	Symbol	& ssock		3064214						
ANR	3068076	Symbol	& si . hStdOutput		3064214						
ANR	3068077	Symbol	& mii		3064214						
ANR	3068078	Symbol	strrchr		3064214						
ANR	3068079	Symbol	inherit_handles		3064214						
ANR	3068080	Symbol	dc_stats		3064214						
ANR	3068081	Symbol	SetProcessAffinityMask		3064214						
ANR	3068082	Symbol	privateinheritbuf . IsEmpty		3064214						
ANR	3068083	Symbol	first_arg_to_copy		3064214						
ANR	3068084	Symbol	InitCommandSockets		3064214						
ANR	3068085	Symbol	shared_port_endpoint . CreateListener		3064214						
ANR	3068086	Symbol	err_return_msg		3064214						
ANR	3068087	Symbol	CREATE_SUSPENDED		3064214						
ANR	3068088	Symbol	pidtmp -> shared_port_fname		3064214						
ANR	3068089	Symbol	core_hard_limit		3064214						
ANR	3068090	Symbol	PRIV_UNKNOWN		3064214						
ANR	3068091	Symbol	& piProcess		3064214						
ANR	3068092	Symbol	map_and_load_result		3064214						
ANR	3068093	Symbol	sinful . getSinful		3064214						
ANR	3068094	Symbol	* std_handles [ i ]		3064214						
ANR	3068095	Symbol	Register_Family		3064214						
ANR	3068096	Symbol	mysin		3064214						
ANR	3068097	Symbol	FreeEnvironmentStrings		3064214						
ANR	3068098	Symbol	session_key		3064214						
ANR	3068099	Symbol	path . Value		3064214						
ANR	3068100	Symbol	strcasecmp		3064214						
ANR	3068101	Symbol	& si . hStdError		3064214						
ANR	3068102	Symbol	sinful		3064214						
ANR	3068103	Symbol	* family_info		3064214						
ANR	3068104	Symbol	* default_vars		3064214						
ANR	3068105	Symbol	NULL		3064214						
ANR	3068106	Symbol	session_info		3064214						
ANR	3068107	Symbol	pidtmp -> hProcess		3064214						
ANR	3068108	Symbol	HAS_DCJOBOPT_NO_ENV_INHERIT		3064214						
ANR	3068109	Symbol	args_errors . Value		3064214						
ANR	3068110	Symbol	gbt_result		3064214						
ANR	3068111	Symbol	rsock . serialize		3064214						
ANR	3068112	Symbol	rsock . _sock		3064214						
ANR	3068113	Symbol	shared_port_endpoint . GetSharedPortID		3064214						
ANR	3068114	Symbol	* env		3064214						
ANR	3068115	Symbol	runtime		3064214						
ANR	3068116	Symbol	TRUE		3064214						
ANR	3068117	Symbol	numInheritFds		3064214						
ANR	3068118	Symbol	shared_port_endpoint . ChownSocket		3064214						
ANR	3068119	Symbol	alt_name		3064214						
ANR	3068120	Symbol	std_handles		3064214						
ANR	3068121	Symbol	GetLastError		3064214						
ANR	3068122	Symbol	true		3064214						
ANR	3068123	Symbol	SharedPortEndpoint :: UseSharedPort		3064214						
ANR	3068124	Symbol	ssock . get_file_desc		3064214						
ANR	3068125	Symbol	InfoCommandSinfulStringMyself		3064214						
ANR	3068126	Symbol	family_info -> login		3064214						
ANR	3068127	Symbol	inheritbuf		3064214						
ANR	3068128	Symbol	sock_inherit_list [ i ] -> type		3064214						
ANR	3068129	Symbol	& time_of_fork		3064214						
ANR	3068130	Symbol	dc_pipe_fds		3064214						
ANR	3068131	Symbol	job_opt_mask		3064214						
ANR	3068132	Symbol	pidtmp -> deallocate		3064214						
ANR	3068133	Symbol	pidenvid_filter_and_insert		3064214						
ANR	3068134	Symbol	piProcess . hThread		3064214						
ANR	3068135	Symbol	pipeHandleTable		3064214						
ANR	3068136	Symbol	GetBinaryType		3064214						
ANR	3068137	Symbol	* * sock_inherit_list		3064214						
ANR	3068138	Symbol	m_proc_family		3064214						
ANR	3068139	Symbol	CREATE_NEW_CONSOLE		3064214						
ANR	3068140	Symbol	user_token		3064214						
ANR	3068141	Symbol	ok		3064214						
ANR	3068142	Symbol	sock_inherit_list [ i ] -> serialize		3064214						
ANR	3068143	Symbol	rsock . get_file_desc		3064214						
ANR	3068144	Symbol	* m_proc_family		3064214						
ANR	3068145	Symbol	reaper_id		3064214						
ANR	3068146	Symbol	get_mySubSystem ( ) -> getName		3064214						
ANR	3068147	Symbol	D_DAEMONCORE		3064214						
ANR	3068148	Symbol	* get_mySubSystem		3064214						
ANR	3068149	Symbol	pidTable -> insert		3064214						
ANR	3068150	Symbol	mysin . Length		3064214						
ANR	3068151	Symbol	DC_STD_FD_PIPE		3064214						
ANR	3068152	Symbol	* numInheritFds		3064214						
ANR	3068153	Symbol	pidtmp -> pid		3064214						
ANR	3068154	Symbol	PIDENVID_OVERSIZED		3064214						
ANR	3068155	Symbol	* i		3064214						
ANR	3068156	Symbol	tempSock -> set_inheritable		3064214						
ANR	3068157	Symbol	* j		3064214						
ANR	3068158	Symbol	& loaded		3064214						
ANR	3068159	Symbol	pidtmp -> hThread		3064214						
ANR	3068160	Symbol	& rsock		3064214						
ANR	3068161	Symbol	* * pipeHandleTable		3064214						
ANR	3068162	Symbol	si . lpDesktop		3064214						
ANR	3068163	Symbol	envbuf . Length		3064214						
ANR	3068164	Symbol	want_command_port		3064214						
ANR	3068165	Symbol	getpid		3064214						
ANR	3068166	Symbol	MATCH		3064214						
ANR	3068167	ClassDef	thread_info	8693:0:266774:266869							
ANR	3068168	DeclStmt									
ANR	3068169	Decl							ThreadStartFunc	ThreadStartFunc	start_func
ANR	3068170	DeclStmt									
ANR	3068171	Decl							void	void *	arg
ANR	3068172	DeclStmt									
ANR	3068173	Decl							Stream	Stream *	sock
ANR	3068174	DeclStmt									
ANR	3068175	Decl							priv_state	priv_state	priv
ANR	3068176	Function	win32_thread_start_func	8700:0:266873:267248							
ANR	3068177	FunctionDef	win32_thread_start_func (void * arg)		3068176	0					
ANR	3068178	CompoundStatement		8701:35:266917:267248	3068176	0					
ANR	3068179	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""In win32_thread_start_func\\n"" )"	8702:1:266920:266971	3068176	0	True				
ANR	3068180	CallExpression	"dprintf ( D_FULLDEBUG , ""In win32_thread_start_func\\n"" )"		3068176	0					
ANR	3068181	Callee	dprintf		3068176	0					
ANR	3068182	Identifier	dprintf		3068176	0					
ANR	3068183	ArgumentList	D_FULLDEBUG		3068176	1					
ANR	3068184	Argument	D_FULLDEBUG		3068176	0					
ANR	3068185	Identifier	D_FULLDEBUG		3068176	0					
ANR	3068186	Argument	"""In win32_thread_start_func\\n"""		3068176	1					
ANR	3068187	PrimaryExpression	"""In win32_thread_start_func\\n"""		3068176	0					
ANR	3068188	IdentifierDeclStatement	thread_info * tinfo = ( thread_info * ) arg ;	8703:1:266974:267013	3068176	1	True				
ANR	3068189	IdentifierDecl	* tinfo = ( thread_info * ) arg		3068176	0					
ANR	3068190	IdentifierDeclType	thread_info *		3068176	0					
ANR	3068191	Identifier	tinfo		3068176	1					
ANR	3068192	AssignmentExpression	* tinfo = ( thread_info * ) arg		3068176	2		=			
ANR	3068193	Identifier	tinfo		3068176	0					
ANR	3068194	CastExpression	( thread_info * ) arg		3068176	1					
ANR	3068195	CastTarget	thread_info *		3068176	0					
ANR	3068196	Identifier	arg		3068176	1					
ANR	3068197	IdentifierDeclStatement	int rval ;	8704:1:267016:267024	3068176	2	True				
ANR	3068198	IdentifierDecl	rval		3068176	0					
ANR	3068199	IdentifierDeclType	int		3068176	0					
ANR	3068200	Identifier	rval		3068176	1					
ANR	3068201	ExpressionStatement	set_priv ( tinfo -> priv )	8705:1:267027:267048	3068176	3	True				
ANR	3068202	CallExpression	set_priv ( tinfo -> priv )		3068176	0					
ANR	3068203	Callee	set_priv		3068176	0					
ANR	3068204	Identifier	set_priv		3068176	0					
ANR	3068205	ArgumentList	tinfo -> priv		3068176	1					
ANR	3068206	Argument	tinfo -> priv		3068176	0					
ANR	3068207	PtrMemberAccess	tinfo -> priv		3068176	0					
ANR	3068208	Identifier	tinfo		3068176	0					
ANR	3068209	Identifier	priv		3068176	1					
ANR	3068210	ExpressionStatement	"rval = tinfo -> start_func ( tinfo -> arg , tinfo -> sock )"	8706:1:267096:267145	3068176	4	True				
ANR	3068211	AssignmentExpression	"rval = tinfo -> start_func ( tinfo -> arg , tinfo -> sock )"		3068176	0		=			
ANR	3068212	Identifier	rval		3068176	0					
ANR	3068213	CallExpression	"tinfo -> start_func ( tinfo -> arg , tinfo -> sock )"		3068176	1					
ANR	3068214	Callee	tinfo -> start_func		3068176	0					
ANR	3068215	PtrMemberAccess	tinfo -> start_func		3068176	0					
ANR	3068216	Identifier	tinfo		3068176	0					
ANR	3068217	Identifier	start_func		3068176	1					
ANR	3068218	ArgumentList	tinfo -> arg		3068176	1					
ANR	3068219	Argument	tinfo -> arg		3068176	0					
ANR	3068220	PtrMemberAccess	tinfo -> arg		3068176	0					
ANR	3068221	Identifier	tinfo		3068176	0					
ANR	3068222	Identifier	arg		3068176	1					
ANR	3068223	Argument	tinfo -> sock		3068176	1					
ANR	3068224	PtrMemberAccess	tinfo -> sock		3068176	0					
ANR	3068225	Identifier	tinfo		3068176	0					
ANR	3068226	Identifier	sock		3068176	1					
ANR	3068227	IfStatement	if ( tinfo -> arg )		3068176	5					
ANR	3068228	Condition	tinfo -> arg	8707:5:267152:267161	3068176	0	True				
ANR	3068229	PtrMemberAccess	tinfo -> arg		3068176	0					
ANR	3068230	Identifier	tinfo		3068176	0					
ANR	3068231	Identifier	arg		3068176	1					
ANR	3068232	ExpressionStatement	free ( tinfo -> arg )	8707:17:267164:267180	3068176	1	True				
ANR	3068233	CallExpression	free ( tinfo -> arg )		3068176	0					
ANR	3068234	Callee	free		3068176	0					
ANR	3068235	Identifier	free		3068176	0					
ANR	3068236	ArgumentList	tinfo -> arg		3068176	1					
ANR	3068237	Argument	tinfo -> arg		3068176	0					
ANR	3068238	PtrMemberAccess	tinfo -> arg		3068176	0					
ANR	3068239	Identifier	tinfo		3068176	0					
ANR	3068240	Identifier	arg		3068176	1					
ANR	3068241	IfStatement	if ( tinfo -> sock )		3068176	6					
ANR	3068242	Condition	tinfo -> sock	8708:5:267187:267197	3068176	0	True				
ANR	3068243	PtrMemberAccess	tinfo -> sock		3068176	0					
ANR	3068244	Identifier	tinfo		3068176	0					
ANR	3068245	Identifier	sock		3068176	1					
ANR	3068246	Statement	delete	8708:18:267200:267205	3068176	1	True				
ANR	3068247	ExpressionStatement	tinfo -> sock	8708:25:267207:267218	3068176	7	True				
ANR	3068248	PtrMemberAccess	tinfo -> sock		3068176	0					
ANR	3068249	Identifier	tinfo		3068176	0					
ANR	3068250	Identifier	sock		3068176	1					
ANR	3068251	ExpressionStatement	free ( tinfo )	8709:1:267221:267232	3068176	8	True				
ANR	3068252	CallExpression	free ( tinfo )		3068176	0					
ANR	3068253	Callee	free		3068176	0					
ANR	3068254	Identifier	free		3068176	0					
ANR	3068255	ArgumentList	tinfo		3068176	1					
ANR	3068256	Argument	tinfo		3068176	0					
ANR	3068257	Identifier	tinfo		3068176	0					
ANR	3068258	ReturnStatement	return rval ;	8710:1:267235:267246	3068176	9	True				
ANR	3068259	Identifier	rval		3068176	0					
ANR	3068260	ReturnType	unsigned		3068176	1					
ANR	3068261	Identifier	win32_thread_start_func		3068176	2					
ANR	3068262	ParameterList	void * arg		3068176	3					
ANR	3068263	Parameter	void * arg	8701:24:266906:266914	3068176	0	True				
ANR	3068264	ParameterType	void *		3068176	0					
ANR	3068265	Identifier	arg		3068176	1					
ANR	3068266	CFGEntryNode	ENTRY		3068176		True				
ANR	3068267	CFGExitNode	EXIT		3068176		True				
ANR	3068268	Symbol	tinfo -> priv		3068176						
ANR	3068269	Symbol	tinfo		3068176						
ANR	3068270	Symbol	tinfo -> sock		3068176						
ANR	3068271	Symbol	arg		3068176						
ANR	3068272	Symbol	* tinfo		3068176						
ANR	3068273	Symbol	tinfo -> arg		3068176						
ANR	3068274	Symbol	D_FULLDEBUG		3068176						
ANR	3068275	Symbol	rval		3068176						
ANR	3068276	Symbol	tinfo -> start_func		3068176						
ANR	3068277	ClassDef	FakeCreateThreadReaperCaller	8714:0:267258:267513							
ANR	3068278	DeclStmt									
ANR	3068279	Decl							void	void ( )	CallReaper
ANR	3068280	Function	FakeThreadID	8720:1:267404:267439							
ANR	3068281	FunctionDef	FakeThreadID ()		3068280	1					
ANR	3068282	CompoundStatement		8720:20:267423:267439	3068280	0					
ANR	3068283	ReturnStatement	return m_tid ;	8720:1:267425:267437	3068280	0	True				
ANR	3068284	Identifier	m_tid		3068280	0					
ANR	3068285	ReturnType	int		3068280	1					
ANR	3068286	Identifier	FakeThreadID		3068280	2					
ANR	3068287	ParameterList			3068280	3					
ANR	3068288	CFGEntryNode	ENTRY		3068280		True				
ANR	3068289	CFGExitNode	EXIT		3068280		True				
ANR	3068290	Symbol	m_tid		3068280						
ANR	3068291	DeclStmt									
ANR	3068292	Decl							int	int	m_tid
ANR	3068293	DeclStmt									
ANR	3068294	Decl							int	int	m_exit_status
ANR	3068295	DeclStmt									
ANR	3068296	Decl							int	int	m_reaper_id
ANR	3068297	Function	FakeCreateThreadReaperCaller :: FakeCreateThreadReaperCaller	8728:0:267517:268027							
ANR	3068298	FunctionDef	"FakeCreateThreadReaperCaller :: FakeCreateThreadReaperCaller (int exit_status , int reaper_id)"		3068297	0					
ANR	3068299	CompoundStatement		8730:0:267660:268027	3068297	0					
ANR	3068300	ExpressionStatement	"m_tid = daemonCore -> Register_Timer ( 0 , ( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper , ""FakeCreateThreadReaperCaller::CallReaper()"" , this )"	8734:1:267842:268001	3068297	0	True				
ANR	3068301	AssignmentExpression	"m_tid = daemonCore -> Register_Timer ( 0 , ( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper , ""FakeCreateThreadReaperCaller::CallReaper()"" , this )"		3068297	0		=			
ANR	3068302	Identifier	m_tid		3068297	0					
ANR	3068303	CallExpression	"daemonCore -> Register_Timer ( 0 , ( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper , ""FakeCreateThreadReaperCaller::CallReaper()"" , this )"		3068297	1					
ANR	3068304	Callee	daemonCore -> Register_Timer		3068297	0					
ANR	3068305	PtrMemberAccess	daemonCore -> Register_Timer		3068297	0					
ANR	3068306	Identifier	daemonCore		3068297	0					
ANR	3068307	Identifier	Register_Timer		3068297	1					
ANR	3068308	ArgumentList	0		3068297	1					
ANR	3068309	Argument	0		3068297	0					
ANR	3068310	PrimaryExpression	0		3068297	0					
ANR	3068311	Argument	( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper		3068297	1					
ANR	3068312	CastExpression	( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper		3068297	0					
ANR	3068313	CastTarget	TimerHandlercpp		3068297	0					
ANR	3068314	UnaryOperationExpression	& FakeCreateThreadReaperCaller :: CallReaper		3068297	1					
ANR	3068315	UnaryOperator	&		3068297	0					
ANR	3068316	Identifier	FakeCreateThreadReaperCaller :: CallReaper		3068297	1					
ANR	3068317	Argument	"""FakeCreateThreadReaperCaller::CallReaper()"""		3068297	2					
ANR	3068318	PrimaryExpression	"""FakeCreateThreadReaperCaller::CallReaper()"""		3068297	0					
ANR	3068319	Argument	this		3068297	3					
ANR	3068320	Identifier	this		3068297	0					
ANR	3068321	ExpressionStatement	ASSERT ( m_tid >= 0 )	8740:1:268005:268025	3068297	1	True				
ANR	3068322	CallExpression	ASSERT ( m_tid >= 0 )		3068297	0					
ANR	3068323	Callee	ASSERT		3068297	0					
ANR	3068324	Identifier	ASSERT		3068297	0					
ANR	3068325	ArgumentList	m_tid >= 0		3068297	1					
ANR	3068326	Argument	m_tid >= 0		3068297	0					
ANR	3068327	RelationalExpression	m_tid >= 0		3068297	0		>=			
ANR	3068328	Identifier	m_tid		3068297	0					
ANR	3068329	PrimaryExpression	0		3068297	1					
ANR	3068330	Identifier	FakeCreateThreadReaperCaller :: FakeCreateThreadReaperCaller		3068297	1					
ANR	3068331	ParameterList	"int exit_status , int reaper_id"		3068297	2					
ANR	3068332	Parameter	int exit_status	8728:59:267576:267590	3068297	0	True				
ANR	3068333	ParameterType	int		3068297	0					
ANR	3068334	Identifier	exit_status		3068297	1					
ANR	3068335	Parameter	int reaper_id	8728:75:267592:267604	3068297	1	True				
ANR	3068336	ParameterType	int		3068297	0					
ANR	3068337	Identifier	reaper_id		3068297	1					
ANR	3068338	CFGEntryNode	ENTRY		3068297		True				
ANR	3068339	CFGExitNode	EXIT		3068297		True				
ANR	3068340	Symbol	m_tid		3068297						
ANR	3068341	Symbol	reaper_id		3068297						
ANR	3068342	Symbol	& FakeCreateThreadReaperCaller :: CallReaper		3068297						
ANR	3068343	Symbol	* daemonCore		3068297						
ANR	3068344	Symbol	daemonCore		3068297						
ANR	3068345	Symbol	daemonCore -> Register_Timer		3068297						
ANR	3068346	Symbol	this		3068297						
ANR	3068347	Symbol	exit_status		3068297						
ANR	3068348	Function	FakeCreateThreadReaperCaller :: CallReaper	8743:0:268030:268171							
ANR	3068349	FunctionDef	FakeCreateThreadReaperCaller :: CallReaper ()		3068348	0					
ANR	3068350	CompoundStatement		8744:43:268078:268171	3068348	0					
ANR	3068351	ExpressionStatement	"daemonCore -> CallReaper ( m_reaper_id , ""fake thread"" , m_tid , m_exit_status )"	8745:1:268081:268155	3068348	0	True				
ANR	3068352	CallExpression	"daemonCore -> CallReaper ( m_reaper_id , ""fake thread"" , m_tid , m_exit_status )"		3068348	0					
ANR	3068353	Callee	daemonCore -> CallReaper		3068348	0					
ANR	3068354	PtrMemberAccess	daemonCore -> CallReaper		3068348	0					
ANR	3068355	Identifier	daemonCore		3068348	0					
ANR	3068356	Identifier	CallReaper		3068348	1					
ANR	3068357	ArgumentList	m_reaper_id		3068348	1					
ANR	3068358	Argument	m_reaper_id		3068348	0					
ANR	3068359	Identifier	m_reaper_id		3068348	0					
ANR	3068360	Argument	"""fake thread"""		3068348	1					
ANR	3068361	PrimaryExpression	"""fake thread"""		3068348	0					
ANR	3068362	Argument	m_tid		3068348	2					
ANR	3068363	Identifier	m_tid		3068348	0					
ANR	3068364	Argument	m_exit_status		3068348	3					
ANR	3068365	Identifier	m_exit_status		3068348	0					
ANR	3068366	Statement	delete	8746:1:268158:268163	3068348	1	True				
ANR	3068367	ExpressionStatement	this	8746:8:268165:268169	3068348	2	True				
ANR	3068368	Identifier	this		3068348	0					
ANR	3068369	ReturnType	void		3068348	1					
ANR	3068370	Identifier	FakeCreateThreadReaperCaller :: CallReaper		3068348	2					
ANR	3068371	ParameterList			3068348	3					
ANR	3068372	CFGEntryNode	ENTRY		3068348		True				
ANR	3068373	CFGExitNode	EXIT		3068348		True				
ANR	3068374	Symbol	m_tid		3068348						
ANR	3068375	Symbol	m_exit_status		3068348						
ANR	3068376	Symbol	daemonCore		3068348						
ANR	3068377	Symbol	m_reaper_id		3068348						
ANR	3068378	Function	DaemonCore :: Create_Thread	8749:0:268174:275383							
ANR	3068379	FunctionDef	"DaemonCore :: Create_Thread (ThreadStartFunc start_func , void * arg , Stream * sock , int reaper_id)"		3068378	0					
ANR	3068380	CompoundStatement		8752:0:268280:275383	3068378	0					
ANR	3068381	IfStatement	if ( ( reaper_id < 1 ) || ( reaper_id > maxReap ) || ( reapTable [ reaper_id - 1 ] . num == 0 ) )		3068378	0					
ANR	3068382	Condition	( reaper_id < 1 ) || ( reaper_id > maxReap ) || ( reapTable [ reaper_id - 1 ] . num == 0 )	8754:6:268317:268398	3068378	0	True				
ANR	3068383	OrExpression	( reaper_id < 1 ) || ( reaper_id > maxReap ) || ( reapTable [ reaper_id - 1 ] . num == 0 )		3068378	0		||			
ANR	3068384	RelationalExpression	reaper_id < 1		3068378	0		<			
ANR	3068385	Identifier	reaper_id		3068378	0					
ANR	3068386	PrimaryExpression	1		3068378	1					
ANR	3068387	OrExpression	( reaper_id > maxReap ) || ( reapTable [ reaper_id - 1 ] . num == 0 )		3068378	1		||			
ANR	3068388	RelationalExpression	reaper_id > maxReap		3068378	0		>			
ANR	3068389	Identifier	reaper_id		3068378	0					
ANR	3068390	Identifier	maxReap		3068378	1					
ANR	3068391	EqualityExpression	reapTable [ reaper_id - 1 ] . num == 0		3068378	1		==			
ANR	3068392	MemberAccess	reapTable [ reaper_id - 1 ] . num		3068378	0					
ANR	3068393	ArrayIndexing	reapTable [ reaper_id - 1 ]		3068378	0					
ANR	3068394	Identifier	reapTable		3068378	0					
ANR	3068395	AdditiveExpression	reaper_id - 1		3068378	1		-			
ANR	3068396	Identifier	reaper_id		3068378	0					
ANR	3068397	PrimaryExpression	1		3068378	1					
ANR	3068398	Identifier	num		3068378	1					
ANR	3068399	PrimaryExpression	0		3068378	1					
ANR	3068400	CompoundStatement		4:44:121:121	3068378	1					
ANR	3068401	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Thread: invalid reaper_id\\n"" )"	8756:2:268406:268460	3068378	0	True				
ANR	3068402	CallExpression	"dprintf ( D_ALWAYS , ""Create_Thread: invalid reaper_id\\n"" )"		3068378	0					
ANR	3068403	Callee	dprintf		3068378	0					
ANR	3068404	Identifier	dprintf		3068378	0					
ANR	3068405	ArgumentList	D_ALWAYS		3068378	1					
ANR	3068406	Argument	D_ALWAYS		3068378	0					
ANR	3068407	Identifier	D_ALWAYS		3068378	0					
ANR	3068408	Argument	"""Create_Thread: invalid reaper_id\\n"""		3068378	1					
ANR	3068409	PrimaryExpression	"""Create_Thread: invalid reaper_id\\n"""		3068378	0					
ANR	3068410	ReturnStatement	return FALSE ;	8757:2:268464:268476	3068378	1	True				
ANR	3068411	Identifier	FALSE		3068378	0					
ANR	3068412	IfStatement	if ( DoFakeCreateThread ( ) )		3068378	1					
ANR	3068413	Condition	DoFakeCreateThread ( )	8760:5:268487:268506	3068378	0	True				
ANR	3068414	CallExpression	DoFakeCreateThread ( )		3068378	0					
ANR	3068415	Callee	DoFakeCreateThread		3068378	0					
ANR	3068416	Identifier	DoFakeCreateThread		3068378	0					
ANR	3068417	ArgumentList			3068378	1					
ANR	3068418	CompoundStatement		38:2:1142:1249	3068378	1					
ANR	3068419	IdentifierDeclStatement	Stream * s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL ;	8767:2:268783:268838	3068378	0	True				
ANR	3068420	IdentifierDecl	* s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		3068378	0					
ANR	3068421	IdentifierDeclType	Stream *		3068378	0					
ANR	3068422	Identifier	s		3068378	1					
ANR	3068423	AssignmentExpression	* s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		3068378	2		=			
ANR	3068424	Identifier	s		3068378	0					
ANR	3068425	ConditionalExpression	sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		3068378	1					
ANR	3068426	Condition	sock		3068378	0					
ANR	3068427	Identifier	sock		3068378	0					
ANR	3068428	CallExpression	sock -> CloneStream ( )		3068378	1					
ANR	3068429	Callee	sock -> CloneStream		3068378	0					
ANR	3068430	PtrMemberAccess	sock -> CloneStream		3068378	0					
ANR	3068431	Identifier	sock		3068378	0					
ANR	3068432	Identifier	CloneStream		3068378	1					
ANR	3068433	ArgumentList			3068378	1					
ANR	3068434	CastExpression	( Stream * ) NULL		3068378	2					
ANR	3068435	CastTarget	Stream *		3068378	0					
ANR	3068436	Identifier	NULL		3068378	1					
ANR	3068437	IdentifierDeclStatement	priv_state saved_priv = get_priv ( ) ;	8769:2:268843:268877	3068378	1	True				
ANR	3068438	IdentifierDecl	saved_priv = get_priv ( )		3068378	0					
ANR	3068439	IdentifierDeclType	priv_state		3068378	0					
ANR	3068440	Identifier	saved_priv		3068378	1					
ANR	3068441	AssignmentExpression	saved_priv = get_priv ( )		3068378	2		=			
ANR	3068442	Identifier	saved_priv		3068378	0					
ANR	3068443	CallExpression	get_priv ( )		3068378	1					
ANR	3068444	Callee	get_priv		3068378	0					
ANR	3068445	Identifier	get_priv		3068378	0					
ANR	3068446	ArgumentList			3068378	1					
ANR	3068447	IdentifierDeclStatement	"int exit_status = start_func ( arg , s ) ;"	8770:2:268881:268916	3068378	2	True				
ANR	3068448	IdentifierDecl	"exit_status = start_func ( arg , s )"		3068378	0					
ANR	3068449	IdentifierDeclType	int		3068378	0					
ANR	3068450	Identifier	exit_status		3068378	1					
ANR	3068451	AssignmentExpression	"exit_status = start_func ( arg , s )"		3068378	2		=			
ANR	3068452	Identifier	exit_status		3068378	0					
ANR	3068453	CallExpression	"start_func ( arg , s )"		3068378	1					
ANR	3068454	Callee	start_func		3068378	0					
ANR	3068455	Identifier	start_func		3068378	0					
ANR	3068456	ArgumentList	arg		3068378	1					
ANR	3068457	Argument	arg		3068378	0					
ANR	3068458	Identifier	arg		3068378	0					
ANR	3068459	Argument	s		3068378	1					
ANR	3068460	Identifier	s		3068378	0					
ANR	3068461	IfStatement	if ( s )		3068378	3					
ANR	3068462	Condition	s	8772:6:268925:268925	3068378	0	True				
ANR	3068463	Identifier	s		3068378	0					
ANR	3068464	Statement	delete	8772:9:268928:268933	3068378	1	True				
ANR	3068465	ExpressionStatement	s	8772:16:268935:268936	3068378	4	True				
ANR	3068466	Identifier	s		3068378	0					
ANR	3068467	ExpressionStatement	exit_status = exit_status << 8	8775:2:269025:269053	3068378	5	True				
ANR	3068468	AssignmentExpression	exit_status = exit_status << 8		3068378	0		=			
ANR	3068469	Identifier	exit_status		3068378	0					
ANR	3068470	ShiftExpression	exit_status << 8		3068378	1		<<			
ANR	3068471	Identifier	exit_status		3068378	0					
ANR	3068472	PrimaryExpression	8		3068378	1					
ANR	3068473	IdentifierDeclStatement	priv_state new_priv = get_priv ( ) ;	8778:2:269065:269097	3068378	6	True				
ANR	3068474	IdentifierDecl	new_priv = get_priv ( )		3068378	0					
ANR	3068475	IdentifierDeclType	priv_state		3068378	0					
ANR	3068476	Identifier	new_priv		3068378	1					
ANR	3068477	AssignmentExpression	new_priv = get_priv ( )		3068378	2		=			
ANR	3068478	Identifier	new_priv		3068378	0					
ANR	3068479	CallExpression	get_priv ( )		3068378	1					
ANR	3068480	Callee	get_priv		3068378	0					
ANR	3068481	Identifier	get_priv		3068378	0					
ANR	3068482	ArgumentList			3068378	1					
ANR	3068483	IfStatement	if ( saved_priv != new_priv )		3068378	7					
ANR	3068484	Condition	saved_priv != new_priv	8779:6:269105:269126	3068378	0	True				
ANR	3068485	EqualityExpression	saved_priv != new_priv		3068378	0		!=			
ANR	3068486	Identifier	saved_priv		3068378	0					
ANR	3068487	Identifier	new_priv		3068378	1					
ANR	3068488	CompoundStatement		29:3:854:913	3068378	1					
ANR	3068489	IdentifierDeclStatement	char const * reaper = reapTable [ reaper_id - 1 ] . handler_descrip ;	8780:3:269135:269194	3068378	0	True				
ANR	3068490	IdentifierDecl	* reaper = reapTable [ reaper_id - 1 ] . handler_descrip		3068378	0					
ANR	3068491	IdentifierDeclType	char const *		3068378	0					
ANR	3068492	Identifier	reaper		3068378	1					
ANR	3068493	AssignmentExpression	* reaper = reapTable [ reaper_id - 1 ] . handler_descrip		3068378	2		=			
ANR	3068494	Identifier	reaper		3068378	0					
ANR	3068495	MemberAccess	reapTable [ reaper_id - 1 ] . handler_descrip		3068378	1					
ANR	3068496	ArrayIndexing	reapTable [ reaper_id - 1 ]		3068378	0					
ANR	3068497	Identifier	reapTable		3068378	0					
ANR	3068498	AdditiveExpression	reaper_id - 1		3068378	1		-			
ANR	3068499	Identifier	reaper_id		3068378	0					
ANR	3068500	PrimaryExpression	1		3068378	1					
ANR	3068501	Identifier	handler_descrip		3068378	1					
ANR	3068502	Statement	dprintf	8781:3:269199:269205	3068378	1	True				
ANR	3068503	Statement	(	8781:10:269206:269206	3068378	2	True				
ANR	3068504	Statement	D_ALWAYS	8781:11:269207:269214	3068378	3	True				
ANR	3068505	Statement	","	8781:19:269215:269215	3068378	4	True				
ANR	3068506	Statement	"""Create_Thread: UNEXPECTED: priv state changed """	8782:5:269222:269269	3068378	5	True				
ANR	3068507	Statement	"""during worker function: %d %d (%s)\\n"""	8783:5:269276:269313	3068378	6	True				
ANR	3068508	Statement	","	8783:43:269314:269314	3068378	7	True				
ANR	3068509	Statement	(	8784:5:269321:269321	3068378	8	True				
ANR	3068510	Statement	int	8784:6:269322:269324	3068378	9	True				
ANR	3068511	Statement	)	8784:9:269325:269325	3068378	10	True				
ANR	3068512	Statement	saved_priv	8784:10:269326:269335	3068378	11	True				
ANR	3068513	Statement	","	8784:20:269336:269336	3068378	12	True				
ANR	3068514	Statement	(	8784:22:269338:269338	3068378	13	True				
ANR	3068515	Statement	int	8784:23:269339:269341	3068378	14	True				
ANR	3068516	Statement	)	8784:26:269342:269342	3068378	15	True				
ANR	3068517	Statement	new_priv	8784:27:269343:269350	3068378	16	True				
ANR	3068518	Statement	","	8784:35:269351:269351	3068378	17	True				
ANR	3068519	Statement	reaper	8785:5:269358:269363	3068378	18	True				
ANR	3068520	Statement	?	8785:12:269365:269365	3068378	19	True				
ANR	3068521	Label	reaper :	8785:14:269367:269374	3068378	20	True				
ANR	3068522	Identifier	reaper		3068378	0					
ANR	3068523	Statement	"""no reaper"""	8785:23:269376:269386	3068378	21	True				
ANR	3068524	Statement	)	8785:35:269388:269388	3068378	22	True				
ANR	3068525	ExpressionStatement		8785:36:269389:269389	3068378	23	True				
ANR	3068526	ExpressionStatement	set_priv ( saved_priv )	8786:3:269394:269414	3068378	24	True				
ANR	3068527	CallExpression	set_priv ( saved_priv )		3068378	0					
ANR	3068528	Callee	set_priv		3068378	0					
ANR	3068529	Identifier	set_priv		3068378	0					
ANR	3068530	ArgumentList	saved_priv		3068378	1					
ANR	3068531	Argument	saved_priv		3068378	0					
ANR	3068532	Identifier	saved_priv		3068378	0					
ANR	3068533	IdentifierDeclStatement	"FakeCreateThreadReaperCaller * reaper_caller = new FakeCreateThreadReaperCaller ( exit_status , reaper_id ) ;"	8789:2:269423:269530	3068378	8	True				
ANR	3068534	IdentifierDecl	"* reaper_caller = new FakeCreateThreadReaperCaller ( exit_status , reaper_id )"		3068378	0					
ANR	3068535	IdentifierDeclType	FakeCreateThreadReaperCaller *		3068378	0					
ANR	3068536	Identifier	reaper_caller		3068378	1					
ANR	3068537	AssignmentExpression	"* reaper_caller = new FakeCreateThreadReaperCaller ( exit_status , reaper_id )"		3068378	2		=			
ANR	3068538	Identifier	reaper_caller		3068378	0					
ANR	3068539	Expression	"exit_status , reaper_id"		3068378	1					
ANR	3068540	Identifier	exit_status		3068378	0					
ANR	3068541	Identifier	reaper_id		3068378	1					
ANR	3068542	ReturnStatement	return reaper_caller -> FakeThreadID ( ) ;	8792:2:269535:269571	3068378	9	True				
ANR	3068543	CallExpression	reaper_caller -> FakeThreadID ( )		3068378	0					
ANR	3068544	Callee	reaper_caller -> FakeThreadID		3068378	0					
ANR	3068545	PtrMemberAccess	reaper_caller -> FakeThreadID		3068378	0					
ANR	3068546	Identifier	reaper_caller		3068378	0					
ANR	3068547	Identifier	FakeThreadID		3068378	1					
ANR	3068548	ArgumentList			3068378	1					
ANR	3068549	ExpressionStatement	( void ) InfoCommandSinfulString ( )	8798:1:269789:269820	3068378	2	True				
ANR	3068550	CastExpression	( void ) InfoCommandSinfulString ( )		3068378	0					
ANR	3068551	CastTarget	void		3068378	0					
ANR	3068552	CallExpression	InfoCommandSinfulString ( )		3068378	1					
ANR	3068553	Callee	InfoCommandSinfulString		3068378	0					
ANR	3068554	Identifier	InfoCommandSinfulString		3068378	0					
ANR	3068555	ArgumentList			3068378	1					
ANR	3068556	IdentifierDeclStatement	unsigned tid ;	8801:1:269837:269849	3068378	3	True				
ANR	3068557	IdentifierDecl	tid		3068378	0					
ANR	3068558	IdentifierDeclType	unsigned		3068378	0					
ANR	3068559	Identifier	tid		3068378	1					
ANR	3068560	IdentifierDeclStatement	HANDLE hThread ;	8802:1:269852:269866	3068378	4	True				
ANR	3068561	IdentifierDecl	hThread		3068378	0					
ANR	3068562	IdentifierDeclType	HANDLE		3068378	0					
ANR	3068563	Identifier	hThread		3068378	1					
ANR	3068564	IdentifierDeclStatement	priv_state priv ;	8803:1:269869:269884	3068378	5	True				
ANR	3068565	IdentifierDecl	priv		3068378	0					
ANR	3068566	IdentifierDeclType	priv_state		3068378	0					
ANR	3068567	Identifier	priv		3068378	1					
ANR	3068568	IdentifierDeclStatement	Stream * s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL ;	8805:1:269960:270015	3068378	6	True				
ANR	3068569	IdentifierDecl	* s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		3068378	0					
ANR	3068570	IdentifierDeclType	Stream *		3068378	0					
ANR	3068571	Identifier	s		3068378	1					
ANR	3068572	AssignmentExpression	* s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		3068378	2		=			
ANR	3068573	Identifier	s		3068378	0					
ANR	3068574	ConditionalExpression	sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		3068378	1					
ANR	3068575	Condition	sock		3068378	0					
ANR	3068576	Identifier	sock		3068378	0					
ANR	3068577	CallExpression	sock -> CloneStream ( )		3068378	1					
ANR	3068578	Callee	sock -> CloneStream		3068378	0					
ANR	3068579	PtrMemberAccess	sock -> CloneStream		3068378	0					
ANR	3068580	Identifier	sock		3068378	0					
ANR	3068581	Identifier	CloneStream		3068378	1					
ANR	3068582	ArgumentList			3068378	1					
ANR	3068583	CastExpression	( Stream * ) NULL		3068378	2					
ANR	3068584	CastTarget	Stream *		3068378	0					
ANR	3068585	Identifier	NULL		3068378	1					
ANR	3068586	IdentifierDeclStatement	thread_info * tinfo = ( thread_info * ) malloc ( sizeof ( thread_info ) ) ;	8807:1:270019:270082	3068378	7	True				
ANR	3068587	IdentifierDecl	* tinfo = ( thread_info * ) malloc ( sizeof ( thread_info ) )		3068378	0					
ANR	3068588	IdentifierDeclType	thread_info *		3068378	0					
ANR	3068589	Identifier	tinfo		3068378	1					
ANR	3068590	AssignmentExpression	* tinfo = ( thread_info * ) malloc ( sizeof ( thread_info ) )		3068378	2		=			
ANR	3068591	Identifier	tinfo		3068378	0					
ANR	3068592	CastExpression	( thread_info * ) malloc ( sizeof ( thread_info ) )		3068378	1					
ANR	3068593	CastTarget	thread_info *		3068378	0					
ANR	3068594	CallExpression	malloc ( sizeof ( thread_info ) )		3068378	1					
ANR	3068595	Callee	malloc		3068378	0					
ANR	3068596	Identifier	malloc		3068378	0					
ANR	3068597	ArgumentList	sizeof ( thread_info )		3068378	1					
ANR	3068598	Argument	sizeof ( thread_info )		3068378	0					
ANR	3068599	SizeofExpression	sizeof ( thread_info )		3068378	0					
ANR	3068600	Sizeof	sizeof		3068378	0					
ANR	3068601	SizeofOperand	thread_info		3068378	1					
ANR	3068602	ExpressionStatement	tinfo -> start_func = start_func	8808:1:270085:270115	3068378	8	True				
ANR	3068603	AssignmentExpression	tinfo -> start_func = start_func		3068378	0		=			
ANR	3068604	PtrMemberAccess	tinfo -> start_func		3068378	0					
ANR	3068605	Identifier	tinfo		3068378	0					
ANR	3068606	Identifier	start_func		3068378	1					
ANR	3068607	Identifier	start_func		3068378	1					
ANR	3068608	ExpressionStatement	tinfo -> arg = arg	8809:1:270118:270134	3068378	9	True				
ANR	3068609	AssignmentExpression	tinfo -> arg = arg		3068378	0		=			
ANR	3068610	PtrMemberAccess	tinfo -> arg		3068378	0					
ANR	3068611	Identifier	tinfo		3068378	0					
ANR	3068612	Identifier	arg		3068378	1					
ANR	3068613	Identifier	arg		3068378	1					
ANR	3068614	ExpressionStatement	tinfo -> sock = s	8810:1:270137:270152	3068378	10	True				
ANR	3068615	AssignmentExpression	tinfo -> sock = s		3068378	0		=			
ANR	3068616	PtrMemberAccess	tinfo -> sock		3068378	0					
ANR	3068617	Identifier	tinfo		3068378	0					
ANR	3068618	Identifier	sock		3068378	1					
ANR	3068619	Identifier	s		3068378	1					
ANR	3068620	ExpressionStatement	priv = set_condor_priv ( )	8814:1:270358:270382	3068378	11	True				
ANR	3068621	AssignmentExpression	priv = set_condor_priv ( )		3068378	0		=			
ANR	3068622	Identifier	priv		3068378	0					
ANR	3068623	CallExpression	set_condor_priv ( )		3068378	1					
ANR	3068624	Callee	set_condor_priv		3068378	0					
ANR	3068625	Identifier	set_condor_priv		3068378	0					
ANR	3068626	ArgumentList			3068378	1					
ANR	3068627	ExpressionStatement	set_priv ( priv )	8815:1:270385:270399	3068378	12	True				
ANR	3068628	CallExpression	set_priv ( priv )		3068378	0					
ANR	3068629	Callee	set_priv		3068378	0					
ANR	3068630	Identifier	set_priv		3068378	0					
ANR	3068631	ArgumentList	priv		3068378	1					
ANR	3068632	Argument	priv		3068378	0					
ANR	3068633	Identifier	priv		3068378	0					
ANR	3068634	ExpressionStatement	tinfo -> priv = priv	8816:1:270402:270420	3068378	13	True				
ANR	3068635	AssignmentExpression	tinfo -> priv = priv		3068378	0		=			
ANR	3068636	PtrMemberAccess	tinfo -> priv		3068378	0					
ANR	3068637	Identifier	tinfo		3068378	0					
ANR	3068638	Identifier	priv		3068378	1					
ANR	3068639	Identifier	priv		3068378	1					
ANR	3068640	ExpressionStatement	"hThread = ( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) win32_thread_start_func , ( void * ) tinfo , 0 , & tid )"	8818:1:270447:270571	3068378	14	True				
ANR	3068641	AssignmentExpression	"hThread = ( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) win32_thread_start_func , ( void * ) tinfo , 0 , & tid )"		3068378	0		=			
ANR	3068642	Identifier	hThread		3068378	0					
ANR	3068643	CastExpression	"( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) win32_thread_start_func , ( void * ) tinfo , 0 , & tid )"		3068378	1					
ANR	3068644	CastTarget	HANDLE		3068378	0					
ANR	3068645	CallExpression	"_beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) win32_thread_start_func , ( void * ) tinfo , 0 , & tid )"		3068378	1					
ANR	3068646	Callee	_beginthreadex		3068378	0					
ANR	3068647	Identifier	_beginthreadex		3068378	0					
ANR	3068648	ArgumentList	NULL		3068378	1					
ANR	3068649	Argument	NULL		3068378	0					
ANR	3068650	Identifier	NULL		3068378	0					
ANR	3068651	Argument	1024		3068378	1					
ANR	3068652	PrimaryExpression	1024		3068378	0					
ANR	3068653	Argument	( CRT_THREAD_HANDLER ) win32_thread_start_func		3068378	2					
ANR	3068654	CastExpression	( CRT_THREAD_HANDLER ) win32_thread_start_func		3068378	0					
ANR	3068655	CastTarget	CRT_THREAD_HANDLER		3068378	0					
ANR	3068656	Identifier	win32_thread_start_func		3068378	1					
ANR	3068657	Argument	( void * ) tinfo		3068378	3					
ANR	3068658	CastExpression	( void * ) tinfo		3068378	0					
ANR	3068659	CastTarget	void *		3068378	0					
ANR	3068660	Identifier	tinfo		3068378	1					
ANR	3068661	Argument	0		3068378	4					
ANR	3068662	PrimaryExpression	0		3068378	0					
ANR	3068663	Argument	& tid		3068378	5					
ANR	3068664	UnaryOperationExpression	& tid		3068378	0					
ANR	3068665	UnaryOperator	&		3068378	0					
ANR	3068666	Identifier	tid		3068378	1					
ANR	3068667	IfStatement	if ( hThread == NULL )		3068378	15					
ANR	3068668	Condition	hThread == NULL	8821:6:270579:270593	3068378	0	True				
ANR	3068669	EqualityExpression	hThread == NULL		3068378	0		==			
ANR	3068670	Identifier	hThread		3068378	0					
ANR	3068671	Identifier	NULL		3068378	1					
ANR	3068672	CompoundStatement		70:24:2316:2316	3068378	1					
ANR	3068673	ExpressionStatement	"EXCEPT ( ""CreateThread failed"" )"	8822:2:270601:270630	3068378	0	True				
ANR	3068674	CallExpression	"EXCEPT ( ""CreateThread failed"" )"		3068378	0					
ANR	3068675	Callee	EXCEPT		3068378	0					
ANR	3068676	Identifier	EXCEPT		3068378	0					
ANR	3068677	ArgumentList	"""CreateThread failed"""		3068378	1					
ANR	3068678	Argument	"""CreateThread failed"""		3068378	0					
ANR	3068679	PrimaryExpression	"""CreateThread failed"""		3068378	0					
ANR	3068680	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Create_Thread: created new thread, tid=%d\\n"" , tid )"	8916:1:274077:274148	3068378	16	True				
ANR	3068681	CallExpression	"dprintf ( D_DAEMONCORE , ""Create_Thread: created new thread, tid=%d\\n"" , tid )"		3068378	0					
ANR	3068682	Callee	dprintf		3068378	0					
ANR	3068683	Identifier	dprintf		3068378	0					
ANR	3068684	ArgumentList	D_DAEMONCORE		3068378	1					
ANR	3068685	Argument	D_DAEMONCORE		3068378	0					
ANR	3068686	Identifier	D_DAEMONCORE		3068378	0					
ANR	3068687	Argument	"""Create_Thread: created new thread, tid=%d\\n"""		3068378	1					
ANR	3068688	PrimaryExpression	"""Create_Thread: created new thread, tid=%d\\n"""		3068378	0					
ANR	3068689	Argument	tid		3068378	2					
ANR	3068690	Identifier	tid		3068378	0					
ANR	3068691	Statement	PidEntry	8923:1:274461:274468	3068378	17	True				
ANR	3068692	Statement	*	8923:10:274470:274470	3068378	18	True				
ANR	3068693	Statement	pidtmp	8923:11:274471:274476	3068378	19	True				
ANR	3068694	Statement	=	8923:18:274478:274478	3068378	20	True				
ANR	3068695	Statement	new	8923:20:274480:274482	3068378	21	True				
ANR	3068696	ExpressionStatement	PidEntry	8923:24:274484:274492	3068378	22	True				
ANR	3068697	Identifier	PidEntry		3068378	0					
ANR	3068698	ExpressionStatement	pidtmp -> new_process_group = FALSE	8924:1:274495:274528	3068378	23	True				
ANR	3068699	AssignmentExpression	pidtmp -> new_process_group = FALSE		3068378	0		=			
ANR	3068700	PtrMemberAccess	pidtmp -> new_process_group		3068378	0					
ANR	3068701	Identifier	pidtmp		3068378	0					
ANR	3068702	Identifier	new_process_group		3068378	1					
ANR	3068703	Identifier	FALSE		3068378	1					
ANR	3068704	ExpressionStatement	pidtmp -> is_local = TRUE	8925:1:274531:274554	3068378	24	True				
ANR	3068705	AssignmentExpression	pidtmp -> is_local = TRUE		3068378	0		=			
ANR	3068706	PtrMemberAccess	pidtmp -> is_local		3068378	0					
ANR	3068707	Identifier	pidtmp		3068378	0					
ANR	3068708	Identifier	is_local		3068378	1					
ANR	3068709	Identifier	TRUE		3068378	1					
ANR	3068710	ExpressionStatement	pidtmp -> parent_is_local = TRUE	8926:1:274557:274587	3068378	25	True				
ANR	3068711	AssignmentExpression	pidtmp -> parent_is_local = TRUE		3068378	0		=			
ANR	3068712	PtrMemberAccess	pidtmp -> parent_is_local		3068378	0					
ANR	3068713	Identifier	pidtmp		3068378	0					
ANR	3068714	Identifier	parent_is_local		3068378	1					
ANR	3068715	Identifier	TRUE		3068378	1					
ANR	3068716	ExpressionStatement	pidtmp -> reaper_id = reaper_id	8927:1:274590:274619	3068378	26	True				
ANR	3068717	AssignmentExpression	pidtmp -> reaper_id = reaper_id		3068378	0		=			
ANR	3068718	PtrMemberAccess	pidtmp -> reaper_id		3068378	0					
ANR	3068719	Identifier	pidtmp		3068378	0					
ANR	3068720	Identifier	reaper_id		3068378	1					
ANR	3068721	Identifier	reaper_id		3068378	1					
ANR	3068722	ExpressionStatement	pidtmp -> hung_tid = - 1	8928:1:274622:274643	3068378	27	True				
ANR	3068723	AssignmentExpression	pidtmp -> hung_tid = - 1		3068378	0		=			
ANR	3068724	PtrMemberAccess	pidtmp -> hung_tid		3068378	0					
ANR	3068725	Identifier	pidtmp		3068378	0					
ANR	3068726	Identifier	hung_tid		3068378	1					
ANR	3068727	UnaryOperationExpression	- 1		3068378	1					
ANR	3068728	UnaryOperator	-		3068378	0					
ANR	3068729	PrimaryExpression	1		3068378	1					
ANR	3068730	ExpressionStatement	pidtmp -> was_not_responding = FALSE	8929:1:274646:274680	3068378	28	True				
ANR	3068731	AssignmentExpression	pidtmp -> was_not_responding = FALSE		3068378	0		=			
ANR	3068732	PtrMemberAccess	pidtmp -> was_not_responding		3068378	0					
ANR	3068733	Identifier	pidtmp		3068378	0					
ANR	3068734	Identifier	was_not_responding		3068378	1					
ANR	3068735	Identifier	FALSE		3068378	1					
ANR	3068736	ExpressionStatement	pidtmp -> pid = tid	8936:1:275007:275024	3068378	29	True				
ANR	3068737	AssignmentExpression	pidtmp -> pid = tid		3068378	0		=			
ANR	3068738	PtrMemberAccess	pidtmp -> pid		3068378	0					
ANR	3068739	Identifier	pidtmp		3068378	0					
ANR	3068740	Identifier	pid		3068378	1					
ANR	3068741	Identifier	tid		3068378	1					
ANR	3068742	ExpressionStatement	pidtmp -> hProcess = NULL	8937:1:275027:275050	3068378	30	True				
ANR	3068743	AssignmentExpression	pidtmp -> hProcess = NULL		3068378	0		=			
ANR	3068744	PtrMemberAccess	pidtmp -> hProcess		3068378	0					
ANR	3068745	Identifier	pidtmp		3068378	0					
ANR	3068746	Identifier	hProcess		3068378	1					
ANR	3068747	Identifier	NULL		3068378	1					
ANR	3068748	ExpressionStatement	pidtmp -> hThread = hThread	8938:1:275100:275125	3068378	31	True				
ANR	3068749	AssignmentExpression	pidtmp -> hThread = hThread		3068378	0		=			
ANR	3068750	PtrMemberAccess	pidtmp -> hThread		3068378	0					
ANR	3068751	Identifier	pidtmp		3068378	0					
ANR	3068752	Identifier	hThread		3068378	1					
ANR	3068753	Identifier	hThread		3068378	1					
ANR	3068754	ExpressionStatement	pidtmp -> pipeEnd = NULL	8939:1:275128:275150	3068378	32	True				
ANR	3068755	AssignmentExpression	pidtmp -> pipeEnd = NULL		3068378	0		=			
ANR	3068756	PtrMemberAccess	pidtmp -> pipeEnd		3068378	0					
ANR	3068757	Identifier	pidtmp		3068378	0					
ANR	3068758	Identifier	pipeEnd		3068378	1					
ANR	3068759	Identifier	NULL		3068378	1					
ANR	3068760	ExpressionStatement	pidtmp -> tid = tid	8940:1:275153:275170	3068378	33	True				
ANR	3068761	AssignmentExpression	pidtmp -> tid = tid		3068378	0		=			
ANR	3068762	PtrMemberAccess	pidtmp -> tid		3068378	0					
ANR	3068763	Identifier	pidtmp		3068378	0					
ANR	3068764	Identifier	tid		3068378	1					
ANR	3068765	Identifier	tid		3068378	1					
ANR	3068766	ExpressionStatement	pidtmp -> hWnd = 0	8941:1:275173:275189	3068378	34	True				
ANR	3068767	AssignmentExpression	pidtmp -> hWnd = 0		3068378	0		=			
ANR	3068768	PtrMemberAccess	pidtmp -> hWnd		3068378	0					
ANR	3068769	Identifier	pidtmp		3068378	0					
ANR	3068770	Identifier	hWnd		3068378	1					
ANR	3068771	PrimaryExpression	0		3068378	1					
ANR	3068772	ExpressionStatement	pidtmp -> deallocate = 0	8942:1:275192:275214	3068378	35	True				
ANR	3068773	AssignmentExpression	pidtmp -> deallocate = 0		3068378	0		=			
ANR	3068774	PtrMemberAccess	pidtmp -> deallocate		3068378	0					
ANR	3068775	Identifier	pidtmp		3068378	0					
ANR	3068776	Identifier	deallocate		3068378	1					
ANR	3068777	PrimaryExpression	0		3068378	1					
ANR	3068778	IdentifierDeclStatement	"int insert_result = pidTable -> insert ( tid , pidtmp ) ;"	8946:1:275250:275298	3068378	36	True				
ANR	3068779	IdentifierDecl	"insert_result = pidTable -> insert ( tid , pidtmp )"		3068378	0					
ANR	3068780	IdentifierDeclType	int		3068378	0					
ANR	3068781	Identifier	insert_result		3068378	1					
ANR	3068782	AssignmentExpression	"insert_result = pidTable -> insert ( tid , pidtmp )"		3068378	2		=			
ANR	3068783	Identifier	insert_result		3068378	0					
ANR	3068784	CallExpression	"pidTable -> insert ( tid , pidtmp )"		3068378	1					
ANR	3068785	Callee	pidTable -> insert		3068378	0					
ANR	3068786	PtrMemberAccess	pidTable -> insert		3068378	0					
ANR	3068787	Identifier	pidTable		3068378	0					
ANR	3068788	Identifier	insert		3068378	1					
ANR	3068789	ArgumentList	tid		3068378	1					
ANR	3068790	Argument	tid		3068378	0					
ANR	3068791	Identifier	tid		3068378	0					
ANR	3068792	Argument	pidtmp		3068378	1					
ANR	3068793	Identifier	pidtmp		3068378	0					
ANR	3068794	ExpressionStatement	assert ( insert_result == 0 )	8947:1:275301:275329	3068378	37	True				
ANR	3068795	CallExpression	assert ( insert_result == 0 )		3068378	0					
ANR	3068796	Callee	assert		3068378	0					
ANR	3068797	Identifier	assert		3068378	0					
ANR	3068798	ArgumentList	insert_result == 0		3068378	1					
ANR	3068799	Argument	insert_result == 0		3068378	0					
ANR	3068800	EqualityExpression	insert_result == 0		3068378	0		==			
ANR	3068801	Identifier	insert_result		3068378	0					
ANR	3068802	PrimaryExpression	0		3068378	1					
ANR	3068803	ExpressionStatement	WatchPid ( pidtmp )	8949:1:275345:275361	3068378	38	True				
ANR	3068804	CallExpression	WatchPid ( pidtmp )		3068378	0					
ANR	3068805	Callee	WatchPid		3068378	0					
ANR	3068806	Identifier	WatchPid		3068378	0					
ANR	3068807	ArgumentList	pidtmp		3068378	1					
ANR	3068808	Argument	pidtmp		3068378	0					
ANR	3068809	Identifier	pidtmp		3068378	0					
ANR	3068810	ReturnStatement	return tid ;	8951:1:275371:275381	3068378	39	True				
ANR	3068811	Identifier	tid		3068378	0					
ANR	3068812	ReturnType	int		3068378	1					
ANR	3068813	Identifier	DaemonCore :: Create_Thread		3068378	2					
ANR	3068814	ParameterList	"ThreadStartFunc start_func , void * arg , Stream * sock , int reaper_id"		3068378	3					
ANR	3068815	Parameter	ThreadStartFunc start_func	8750:26:268204:268229	3068378	0	True				
ANR	3068816	ParameterType	ThreadStartFunc		3068378	0					
ANR	3068817	Identifier	start_func		3068378	1					
ANR	3068818	Parameter	void * arg	8750:54:268232:268240	3068378	1	True				
ANR	3068819	ParameterType	void *		3068378	0					
ANR	3068820	Identifier	arg		3068378	1					
ANR	3068821	Parameter	Stream * sock	8750:65:268243:268254	3068378	2	True				
ANR	3068822	ParameterType	Stream *		3068378	0					
ANR	3068823	Identifier	sock		3068378	1					
ANR	3068824	Parameter	int reaper_id	8751:8:268265:268277	3068378	3	True				
ANR	3068825	ParameterType	int		3068378	0					
ANR	3068826	Identifier	reaper_id		3068378	1					
ANR	3068827	CFGEntryNode	ENTRY		3068378		True				
ANR	3068828	CFGExitNode	EXIT		3068378		True				
ANR	3068829	Symbol	pidtmp -> pipeEnd		3068378						
ANR	3068830	Symbol	set_condor_priv		3068378						
ANR	3068831	Symbol	win32_thread_start_func		3068378						
ANR	3068832	Symbol	reapTable [ reaper_id - 1 ] . handler_descrip		3068378						
ANR	3068833	Symbol	tinfo -> sock		3068378						
ANR	3068834	Symbol	reaper		3068378						
ANR	3068835	Symbol	_beginthreadex		3068378						
ANR	3068836	Symbol	tid		3068378						
ANR	3068837	Symbol	tinfo -> start_func		3068378						
ANR	3068838	Symbol	tinfo -> priv		3068378						
ANR	3068839	Symbol	priv		3068378						
ANR	3068840	Symbol	reaper_caller		3068378						
ANR	3068841	Symbol	NULL		3068378						
ANR	3068842	Symbol	pidtmp -> hProcess		3068378						
ANR	3068843	Symbol	* reaper_caller		3068378						
ANR	3068844	Symbol	reapTable [ reaper_id - 1 ] . num		3068378						
ANR	3068845	Symbol	TRUE		3068378						
ANR	3068846	Symbol	sock -> CloneStream		3068378						
ANR	3068847	Symbol	reaper_caller -> FakeThreadID		3068378						
ANR	3068848	Symbol	* pidtmp		3068378						
ANR	3068849	Symbol	& tid		3068378						
ANR	3068850	Symbol	start_func		3068378						
ANR	3068851	Symbol	reapTable		3068378						
ANR	3068852	Symbol	pidtmp -> reaper_id		3068378						
ANR	3068853	Symbol	* reaper_id		3068378						
ANR	3068854	Symbol	tinfo		3068378						
ANR	3068855	Symbol	get_priv		3068378						
ANR	3068856	Symbol	pidtmp		3068378						
ANR	3068857	Symbol	pidtmp -> is_local		3068378						
ANR	3068858	Symbol	* pidTable		3068378						
ANR	3068859	Symbol	exit_status		3068378						
ANR	3068860	Symbol	pidtmp -> was_not_responding		3068378						
ANR	3068861	Symbol	pidtmp -> deallocate		3068378						
ANR	3068862	Symbol	pidtmp -> new_process_group		3068378						
ANR	3068863	Symbol	DoFakeCreateThread		3068378						
ANR	3068864	Symbol	pidtmp -> hung_tid		3068378						
ANR	3068865	Symbol	arg		3068378						
ANR	3068866	Symbol	* tinfo		3068378						
ANR	3068867	Symbol	hThread		3068378						
ANR	3068868	Symbol	* sock		3068378						
ANR	3068869	Symbol	pidtmp -> hWnd		3068378						
ANR	3068870	Symbol	pidTable		3068378						
ANR	3068871	Symbol	malloc		3068378						
ANR	3068872	Symbol	reaper_id		3068378						
ANR	3068873	Symbol	D_DAEMONCORE		3068378						
ANR	3068874	Symbol	pidTable -> insert		3068378						
ANR	3068875	Symbol	D_ALWAYS		3068378						
ANR	3068876	Symbol	maxReap		3068378						
ANR	3068877	Symbol	tinfo -> arg		3068378						
ANR	3068878	Symbol	pidtmp -> tid		3068378						
ANR	3068879	Symbol	insert_result		3068378						
ANR	3068880	Symbol	pidtmp -> pid		3068378						
ANR	3068881	Symbol	sock		3068378						
ANR	3068882	Symbol	s		3068378						
ANR	3068883	Symbol	pidtmp -> hThread		3068378						
ANR	3068884	Symbol	saved_priv		3068378						
ANR	3068885	Symbol	new_priv		3068378						
ANR	3068886	Symbol	* reapTable		3068378						
ANR	3068887	Symbol	FALSE		3068378						
ANR	3068888	Symbol	pidtmp -> parent_is_local		3068378						
ANR	3068889	Function	DaemonCore :: Kill_Thread	8954:0:275386:276045							
ANR	3068890	FunctionDef	DaemonCore :: Kill_Thread (int tid)		3068889	0					
ANR	3068891	CompoundStatement		8956:0:275423:276045	3068889	0					
ANR	3068892	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Kill_Thread(%d)\\n"" , tid )"	8957:1:275426:275491	3068889	0	True				
ANR	3068893	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Kill_Thread(%d)\\n"" , tid )"		3068889	0					
ANR	3068894	Callee	dprintf		3068889	0					
ANR	3068895	Identifier	dprintf		3068889	0					
ANR	3068896	ArgumentList	D_DAEMONCORE		3068889	1					
ANR	3068897	Argument	D_DAEMONCORE		3068889	0					
ANR	3068898	Identifier	D_DAEMONCORE		3068889	0					
ANR	3068899	Argument	"""called DaemonCore::Kill_Thread(%d)\\n"""		3068889	1					
ANR	3068900	PrimaryExpression	"""called DaemonCore::Kill_Thread(%d)\\n"""		3068889	0					
ANR	3068901	Argument	tid		3068889	2					
ANR	3068902	Identifier	tid		3068889	0					
ANR	3068903	ReturnStatement	return 1 ;	8967:1:275869:275877	3068889	1	True				
ANR	3068904	PrimaryExpression	1		3068889	0					
ANR	3068905	ReturnType	int		3068889	1					
ANR	3068906	Identifier	DaemonCore :: Kill_Thread		3068889	2					
ANR	3068907	ParameterList	int tid		3068889	3					
ANR	3068908	Parameter	int tid	8955:24:275414:275420	3068889	0	True				
ANR	3068909	ParameterType	int		3068889	0					
ANR	3068910	Identifier	tid		3068889	1					
ANR	3068911	CFGEntryNode	ENTRY		3068889		True				
ANR	3068912	CFGExitNode	EXIT		3068889		True				
ANR	3068913	Symbol	D_DAEMONCORE		3068889						
ANR	3068914	Symbol	tid		3068889						
ANR	3068915	Function	DaemonCore :: Get_Family_Usage	8976:0:276048:276213							
ANR	3068916	FunctionDef	"DaemonCore :: Get_Family_Usage (pid_t pid , ProcFamilyUsage & usage , bool full)"		3068915	0					
ANR	3068917	CompoundStatement		8978:0:276127:276213	3068915	0					
ANR	3068918	ExpressionStatement	ASSERT ( m_proc_family != NULL )	8979:1:276130:276159	3068915	0	True				
ANR	3068919	CallExpression	ASSERT ( m_proc_family != NULL )		3068915	0					
ANR	3068920	Callee	ASSERT		3068915	0					
ANR	3068921	Identifier	ASSERT		3068915	0					
ANR	3068922	ArgumentList	m_proc_family != NULL		3068915	1					
ANR	3068923	Argument	m_proc_family != NULL		3068915	0					
ANR	3068924	EqualityExpression	m_proc_family != NULL		3068915	0		!=			
ANR	3068925	Identifier	m_proc_family		3068915	0					
ANR	3068926	Identifier	NULL		3068915	1					
ANR	3068927	ReturnStatement	"return m_proc_family -> get_usage ( pid , usage , full ) ;"	8980:1:276162:276211	3068915	1	True				
ANR	3068928	CallExpression	"m_proc_family -> get_usage ( pid , usage , full )"		3068915	0					
ANR	3068929	Callee	m_proc_family -> get_usage		3068915	0					
ANR	3068930	PtrMemberAccess	m_proc_family -> get_usage		3068915	0					
ANR	3068931	Identifier	m_proc_family		3068915	0					
ANR	3068932	Identifier	get_usage		3068915	1					
ANR	3068933	ArgumentList	pid		3068915	1					
ANR	3068934	Argument	pid		3068915	0					
ANR	3068935	Identifier	pid		3068915	0					
ANR	3068936	Argument	usage		3068915	1					
ANR	3068937	Identifier	usage		3068915	0					
ANR	3068938	Argument	full		3068915	2					
ANR	3068939	Identifier	full		3068915	0					
ANR	3068940	ReturnType	int		3068915	1					
ANR	3068941	Identifier	DaemonCore :: Get_Family_Usage		3068915	2					
ANR	3068942	ParameterList	"pid_t pid , ProcFamilyUsage & usage , bool full"		3068915	3					
ANR	3068943	Parameter	pid_t pid	8977:29:276081:276089	3068915	0	True				
ANR	3068944	ParameterType	pid_t		3068915	0					
ANR	3068945	Identifier	pid		3068915	1					
ANR	3068946	Parameter	ProcFamilyUsage & usage	8977:40:276092:276113	3068915	1	True				
ANR	3068947	ParameterType	ProcFamilyUsage &		3068915	0					
ANR	3068948	Identifier	usage		3068915	1					
ANR	3068949	Parameter	bool full	8977:64:276116:276124	3068915	2	True				
ANR	3068950	ParameterType	bool		3068915	0					
ANR	3068951	Identifier	full		3068915	1					
ANR	3068952	CFGEntryNode	ENTRY		3068915		True				
ANR	3068953	CFGExitNode	EXIT		3068915		True				
ANR	3068954	Symbol	NULL		3068915						
ANR	3068955	Symbol	usage		3068915						
ANR	3068956	Symbol	pid		3068915						
ANR	3068957	Symbol	m_proc_family		3068915						
ANR	3068958	Symbol	m_proc_family -> get_usage		3068915						
ANR	3068959	Symbol	full		3068915						
ANR	3068960	Symbol	* m_proc_family		3068915						
ANR	3068961	Function	DaemonCore :: Suspend_Family	8983:0:276216:276336							
ANR	3068962	FunctionDef	DaemonCore :: Suspend_Family (pid_t pid)		3068961	0					
ANR	3068963	CompoundStatement		8985:0:276258:276336	3068961	0					
ANR	3068964	ExpressionStatement	ASSERT ( m_proc_family != NULL )	8986:1:276261:276290	3068961	0	True				
ANR	3068965	CallExpression	ASSERT ( m_proc_family != NULL )		3068961	0					
ANR	3068966	Callee	ASSERT		3068961	0					
ANR	3068967	Identifier	ASSERT		3068961	0					
ANR	3068968	ArgumentList	m_proc_family != NULL		3068961	1					
ANR	3068969	Argument	m_proc_family != NULL		3068961	0					
ANR	3068970	EqualityExpression	m_proc_family != NULL		3068961	0		!=			
ANR	3068971	Identifier	m_proc_family		3068961	0					
ANR	3068972	Identifier	NULL		3068961	1					
ANR	3068973	ReturnStatement	return m_proc_family -> suspend_family ( pid ) ;	8987:1:276293:276334	3068961	1	True				
ANR	3068974	CallExpression	m_proc_family -> suspend_family ( pid )		3068961	0					
ANR	3068975	Callee	m_proc_family -> suspend_family		3068961	0					
ANR	3068976	PtrMemberAccess	m_proc_family -> suspend_family		3068961	0					
ANR	3068977	Identifier	m_proc_family		3068961	0					
ANR	3068978	Identifier	suspend_family		3068961	1					
ANR	3068979	ArgumentList	pid		3068961	1					
ANR	3068980	Argument	pid		3068961	0					
ANR	3068981	Identifier	pid		3068961	0					
ANR	3068982	ReturnType	int		3068961	1					
ANR	3068983	Identifier	DaemonCore :: Suspend_Family		3068961	2					
ANR	3068984	ParameterList	pid_t pid		3068961	3					
ANR	3068985	Parameter	pid_t pid	8984:27:276247:276255	3068961	0	True				
ANR	3068986	ParameterType	pid_t		3068961	0					
ANR	3068987	Identifier	pid		3068961	1					
ANR	3068988	CFGEntryNode	ENTRY		3068961		True				
ANR	3068989	CFGExitNode	EXIT		3068961		True				
ANR	3068990	Symbol	NULL		3068961						
ANR	3068991	Symbol	m_proc_family -> suspend_family		3068961						
ANR	3068992	Symbol	pid		3068961						
ANR	3068993	Symbol	m_proc_family		3068961						
ANR	3068994	Symbol	* m_proc_family		3068961						
ANR	3068995	Function	DaemonCore :: Continue_Family	8990:0:276339:276461							
ANR	3068996	FunctionDef	DaemonCore :: Continue_Family (pid_t pid)		3068995	0					
ANR	3068997	CompoundStatement		8992:0:276382:276461	3068995	0					
ANR	3068998	ExpressionStatement	ASSERT ( m_proc_family != NULL )	8993:1:276385:276414	3068995	0	True				
ANR	3068999	CallExpression	ASSERT ( m_proc_family != NULL )		3068995	0					
ANR	3069000	Callee	ASSERT		3068995	0					
ANR	3069001	Identifier	ASSERT		3068995	0					
ANR	3069002	ArgumentList	m_proc_family != NULL		3068995	1					
ANR	3069003	Argument	m_proc_family != NULL		3068995	0					
ANR	3069004	EqualityExpression	m_proc_family != NULL		3068995	0		!=			
ANR	3069005	Identifier	m_proc_family		3068995	0					
ANR	3069006	Identifier	NULL		3068995	1					
ANR	3069007	ReturnStatement	return m_proc_family -> continue_family ( pid ) ;	8994:1:276417:276459	3068995	1	True				
ANR	3069008	CallExpression	m_proc_family -> continue_family ( pid )		3068995	0					
ANR	3069009	Callee	m_proc_family -> continue_family		3068995	0					
ANR	3069010	PtrMemberAccess	m_proc_family -> continue_family		3068995	0					
ANR	3069011	Identifier	m_proc_family		3068995	0					
ANR	3069012	Identifier	continue_family		3068995	1					
ANR	3069013	ArgumentList	pid		3068995	1					
ANR	3069014	Argument	pid		3068995	0					
ANR	3069015	Identifier	pid		3068995	0					
ANR	3069016	ReturnType	int		3068995	1					
ANR	3069017	Identifier	DaemonCore :: Continue_Family		3068995	2					
ANR	3069018	ParameterList	pid_t pid		3068995	3					
ANR	3069019	Parameter	pid_t pid	8991:28:276371:276379	3068995	0	True				
ANR	3069020	ParameterType	pid_t		3068995	0					
ANR	3069021	Identifier	pid		3068995	1					
ANR	3069022	CFGEntryNode	ENTRY		3068995		True				
ANR	3069023	CFGExitNode	EXIT		3068995		True				
ANR	3069024	Symbol	m_proc_family -> continue_family		3068995						
ANR	3069025	Symbol	NULL		3068995						
ANR	3069026	Symbol	pid		3068995						
ANR	3069027	Symbol	m_proc_family		3068995						
ANR	3069028	Symbol	* m_proc_family		3068995						
ANR	3069029	Function	DaemonCore :: Kill_Family	8997:0:276464:276578							
ANR	3069030	FunctionDef	DaemonCore :: Kill_Family (pid_t pid)		3069029	0					
ANR	3069031	CompoundStatement		8999:0:276503:276578	3069029	0					
ANR	3069032	ExpressionStatement	ASSERT ( m_proc_family != NULL )	9000:1:276506:276535	3069029	0	True				
ANR	3069033	CallExpression	ASSERT ( m_proc_family != NULL )		3069029	0					
ANR	3069034	Callee	ASSERT		3069029	0					
ANR	3069035	Identifier	ASSERT		3069029	0					
ANR	3069036	ArgumentList	m_proc_family != NULL		3069029	1					
ANR	3069037	Argument	m_proc_family != NULL		3069029	0					
ANR	3069038	EqualityExpression	m_proc_family != NULL		3069029	0		!=			
ANR	3069039	Identifier	m_proc_family		3069029	0					
ANR	3069040	Identifier	NULL		3069029	1					
ANR	3069041	ReturnStatement	return m_proc_family -> kill_family ( pid ) ;	9001:1:276538:276576	3069029	1	True				
ANR	3069042	CallExpression	m_proc_family -> kill_family ( pid )		3069029	0					
ANR	3069043	Callee	m_proc_family -> kill_family		3069029	0					
ANR	3069044	PtrMemberAccess	m_proc_family -> kill_family		3069029	0					
ANR	3069045	Identifier	m_proc_family		3069029	0					
ANR	3069046	Identifier	kill_family		3069029	1					
ANR	3069047	ArgumentList	pid		3069029	1					
ANR	3069048	Argument	pid		3069029	0					
ANR	3069049	Identifier	pid		3069029	0					
ANR	3069050	ReturnType	int		3069029	1					
ANR	3069051	Identifier	DaemonCore :: Kill_Family		3069029	2					
ANR	3069052	ParameterList	pid_t pid		3069029	3					
ANR	3069053	Parameter	pid_t pid	8998:24:276492:276500	3069029	0	True				
ANR	3069054	ParameterType	pid_t		3069029	0					
ANR	3069055	Identifier	pid		3069029	1					
ANR	3069056	CFGEntryNode	ENTRY		3069029		True				
ANR	3069057	CFGExitNode	EXIT		3069029		True				
ANR	3069058	Symbol	NULL		3069029						
ANR	3069059	Symbol	m_proc_family -> kill_family		3069029						
ANR	3069060	Symbol	pid		3069029						
ANR	3069061	Symbol	m_proc_family		3069029						
ANR	3069062	Symbol	* m_proc_family		3069029						
ANR	3069063	Function	DaemonCore :: Signal_Process	9004:0:276581:276788							
ANR	3069064	FunctionDef	"DaemonCore :: Signal_Process (pid_t pid , int sig)"		3069063	0					
ANR	3069065	CompoundStatement		9006:0:276632:276788	3069063	0					
ANR	3069066	ExpressionStatement	ASSERT ( m_proc_family != NULL )	9007:1:276635:276664	3069063	0	True				
ANR	3069067	CallExpression	ASSERT ( m_proc_family != NULL )		3069063	0					
ANR	3069068	Callee	ASSERT		3069063	0					
ANR	3069069	Identifier	ASSERT		3069063	0					
ANR	3069070	ArgumentList	m_proc_family != NULL		3069063	1					
ANR	3069071	Argument	m_proc_family != NULL		3069063	0					
ANR	3069072	EqualityExpression	m_proc_family != NULL		3069063	0		!=			
ANR	3069073	Identifier	m_proc_family		3069063	0					
ANR	3069074	Identifier	NULL		3069063	1					
ANR	3069075	ExpressionStatement	"dprintf ( D_ALWAYS , ""sending signal %d to process with pid %u\\n"" , sig , pid )"	9008:1:276667:276738	3069063	1	True				
ANR	3069076	CallExpression	"dprintf ( D_ALWAYS , ""sending signal %d to process with pid %u\\n"" , sig , pid )"		3069063	0					
ANR	3069077	Callee	dprintf		3069063	0					
ANR	3069078	Identifier	dprintf		3069063	0					
ANR	3069079	ArgumentList	D_ALWAYS		3069063	1					
ANR	3069080	Argument	D_ALWAYS		3069063	0					
ANR	3069081	Identifier	D_ALWAYS		3069063	0					
ANR	3069082	Argument	"""sending signal %d to process with pid %u\\n"""		3069063	1					
ANR	3069083	PrimaryExpression	"""sending signal %d to process with pid %u\\n"""		3069063	0					
ANR	3069084	Argument	sig		3069063	2					
ANR	3069085	Identifier	sig		3069063	0					
ANR	3069086	Argument	pid		3069063	3					
ANR	3069087	Identifier	pid		3069063	0					
ANR	3069088	ReturnStatement	"return m_proc_family -> signal_process ( pid , sig ) ;"	9009:1:276741:276786	3069063	2	True				
ANR	3069089	CallExpression	"m_proc_family -> signal_process ( pid , sig )"		3069063	0					
ANR	3069090	Callee	m_proc_family -> signal_process		3069063	0					
ANR	3069091	PtrMemberAccess	m_proc_family -> signal_process		3069063	0					
ANR	3069092	Identifier	m_proc_family		3069063	0					
ANR	3069093	Identifier	signal_process		3069063	1					
ANR	3069094	ArgumentList	pid		3069063	1					
ANR	3069095	Argument	pid		3069063	0					
ANR	3069096	Identifier	pid		3069063	0					
ANR	3069097	Argument	sig		3069063	1					
ANR	3069098	Identifier	sig		3069063	0					
ANR	3069099	ReturnType	int		3069063	1					
ANR	3069100	Identifier	DaemonCore :: Signal_Process		3069063	2					
ANR	3069101	ParameterList	"pid_t pid , int sig"		3069063	3					
ANR	3069102	Parameter	pid_t pid	9005:27:276612:276620	3069063	0	True				
ANR	3069103	ParameterType	pid_t		3069063	0					
ANR	3069104	Identifier	pid		3069063	1					
ANR	3069105	Parameter	int sig	9005:38:276623:276629	3069063	1	True				
ANR	3069106	ParameterType	int		3069063	0					
ANR	3069107	Identifier	sig		3069063	1					
ANR	3069108	CFGEntryNode	ENTRY		3069063		True				
ANR	3069109	CFGExitNode	EXIT		3069063		True				
ANR	3069110	Symbol	sig		3069063						
ANR	3069111	Symbol	NULL		3069063						
ANR	3069112	Symbol	m_proc_family -> signal_process		3069063						
ANR	3069113	Symbol	D_ALWAYS		3069063						
ANR	3069114	Symbol	pid		3069063						
ANR	3069115	Symbol	m_proc_family		3069063						
ANR	3069116	Symbol	* m_proc_family		3069063						
ANR	3069117	Function	DaemonCore :: Proc_Family_Init	9012:0:276791:276964							
ANR	3069118	FunctionDef	DaemonCore :: Proc_Family_Init ()		3069117	0					
ANR	3069119	CompoundStatement		9014:0:276827:276964	3069117	0					
ANR	3069120	IfStatement	if ( m_proc_family == NULL )		3069117	0					
ANR	3069121	Condition	m_proc_family == NULL	9015:5:276834:276854	3069117	0	True				
ANR	3069122	EqualityExpression	m_proc_family == NULL		3069117	0		==			
ANR	3069123	Identifier	m_proc_family		3069117	0					
ANR	3069124	Identifier	NULL		3069117	1					
ANR	3069125	CompoundStatement		2:28:29:29	3069117	1					
ANR	3069126	ExpressionStatement	m_proc_family = ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )	9016:2:276861:276934	3069117	0	True				
ANR	3069127	AssignmentExpression	m_proc_family = ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )		3069117	0		=			
ANR	3069128	Identifier	m_proc_family		3069117	0					
ANR	3069129	CallExpression	ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )		3069117	1					
ANR	3069130	Callee	ProcFamilyInterface :: create		3069117	0					
ANR	3069131	Identifier	ProcFamilyInterface :: create		3069117	0					
ANR	3069132	ArgumentList	get_mySubSystem ( ) -> getName ( )		3069117	1					
ANR	3069133	Argument	get_mySubSystem ( ) -> getName ( )		3069117	0					
ANR	3069134	CallExpression	get_mySubSystem ( ) -> getName ( )		3069117	0					
ANR	3069135	Callee	get_mySubSystem ( ) -> getName		3069117	0					
ANR	3069136	PtrMemberAccess	get_mySubSystem ( ) -> getName		3069117	0					
ANR	3069137	CallExpression	get_mySubSystem ( )		3069117	0					
ANR	3069138	Callee	get_mySubSystem		3069117	0					
ANR	3069139	Identifier	get_mySubSystem		3069117	0					
ANR	3069140	ArgumentList			3069117	1					
ANR	3069141	Identifier	getName		3069117	1					
ANR	3069142	ArgumentList			3069117	1					
ANR	3069143	ExpressionStatement	ASSERT ( m_proc_family )	9017:2:276938:276959	3069117	1	True				
ANR	3069144	CallExpression	ASSERT ( m_proc_family )		3069117	0					
ANR	3069145	Callee	ASSERT		3069117	0					
ANR	3069146	Identifier	ASSERT		3069117	0					
ANR	3069147	ArgumentList	m_proc_family		3069117	1					
ANR	3069148	Argument	m_proc_family		3069117	0					
ANR	3069149	Identifier	m_proc_family		3069117	0					
ANR	3069150	ReturnType	void		3069117	1					
ANR	3069151	Identifier	DaemonCore :: Proc_Family_Init		3069117	2					
ANR	3069152	ParameterList			3069117	3					
ANR	3069153	CFGEntryNode	ENTRY		3069117		True				
ANR	3069154	CFGExitNode	EXIT		3069117		True				
ANR	3069155	Symbol	ProcFamilyInterface :: create		3069117						
ANR	3069156	Symbol	NULL		3069117						
ANR	3069157	Symbol	get_mySubSystem ( ) -> getName		3069117						
ANR	3069158	Symbol	* get_mySubSystem		3069117						
ANR	3069159	Symbol	m_proc_family		3069117						
ANR	3069160	Symbol	get_mySubSystem		3069117						
ANR	3069161	Function	DaemonCore :: Proc_Family_Cleanup	9021:0:276967:277081							
ANR	3069162	FunctionDef	DaemonCore :: Proc_Family_Cleanup ()		3069161	0					
ANR	3069163	CompoundStatement		9023:0:277006:277081	3069161	0					
ANR	3069164	IfStatement	if ( m_proc_family )		3069161	0					
ANR	3069165	Condition	m_proc_family	9024:5:277013:277025	3069161	0	True				
ANR	3069166	Identifier	m_proc_family		3069161	0					
ANR	3069167	CompoundStatement		2:20:21:21	3069161	1					
ANR	3069168	Statement	delete	9025:2:277032:277037	3069161	0	True				
ANR	3069169	ExpressionStatement	m_proc_family	9025:9:277039:277052	3069161	1	True				
ANR	3069170	Identifier	m_proc_family		3069161	0					
ANR	3069171	ExpressionStatement	m_proc_family = NULL	9026:2:277056:277076	3069161	2	True				
ANR	3069172	AssignmentExpression	m_proc_family = NULL		3069161	0		=			
ANR	3069173	Identifier	m_proc_family		3069161	0					
ANR	3069174	Identifier	NULL		3069161	1					
ANR	3069175	ReturnType	void		3069161	1					
ANR	3069176	Identifier	DaemonCore :: Proc_Family_Cleanup		3069161	2					
ANR	3069177	ParameterList			3069161	3					
ANR	3069178	CFGEntryNode	ENTRY		3069161		True				
ANR	3069179	CFGExitNode	EXIT		3069161		True				
ANR	3069180	Symbol	NULL		3069161						
ANR	3069181	Symbol	m_proc_family		3069161						
ANR	3069182	Function	DaemonCore :: Inherit	9030:0:277084:283648							
ANR	3069183	FunctionDef	DaemonCore :: Inherit ()		3069182	0					
ANR	3069184	CompoundStatement		9032:0:277117:283648	3069182	0					
ANR	3069185	IdentifierDeclStatement	char * inheritbuf = NULL ;	9033:1:277120:277143	3069182	0	True				
ANR	3069186	IdentifierDecl	* inheritbuf = NULL		3069182	0					
ANR	3069187	IdentifierDeclType	char *		3069182	0					
ANR	3069188	Identifier	inheritbuf		3069182	1					
ANR	3069189	AssignmentExpression	* inheritbuf = NULL		3069182	2		=			
ANR	3069190	Identifier	NULL		3069182	0					
ANR	3069191	Identifier	NULL		3069182	1					
ANR	3069192	IdentifierDeclStatement	int numInheritedSocks = 0 ;	9034:1:277146:277171	3069182	1	True				
ANR	3069193	IdentifierDecl	numInheritedSocks = 0		3069182	0					
ANR	3069194	IdentifierDeclType	int		3069182	0					
ANR	3069195	Identifier	numInheritedSocks		3069182	1					
ANR	3069196	AssignmentExpression	numInheritedSocks = 0		3069182	2		=			
ANR	3069197	Identifier	numInheritedSocks		3069182	0					
ANR	3069198	PrimaryExpression	0		3069182	1					
ANR	3069199	IdentifierDeclStatement	char * ptmp ;	9035:1:277174:277184	3069182	2	True				
ANR	3069200	IdentifierDecl	* ptmp		3069182	0					
ANR	3069201	IdentifierDeclType	char *		3069182	0					
ANR	3069202	Identifier	ptmp		3069182	1					
ANR	3069203	Statement	static	9036:1:277187:277192	3069182	3	True				
ANR	3069204	IdentifierDeclStatement	bool already_inherited = false ;	9036:8:277194:277224	3069182	4	True				
ANR	3069205	IdentifierDecl	already_inherited = false		3069182	0					
ANR	3069206	IdentifierDeclType	bool		3069182	0					
ANR	3069207	Identifier	already_inherited		3069182	1					
ANR	3069208	AssignmentExpression	already_inherited = false		3069182	2		=			
ANR	3069209	Identifier	false		3069182	0					
ANR	3069210	Identifier	false		3069182	1					
ANR	3069211	IfStatement	if ( already_inherited )		3069182	5					
ANR	3069212	Condition	already_inherited	9038:5:277232:277248	3069182	0	True				
ANR	3069213	Identifier	already_inherited		3069182	0					
ANR	3069214	CompoundStatement		7:25:134:134	3069182	1					
ANR	3069215	ReturnStatement	return ;	9039:2:277256:277262	3069182	0	True				
ANR	3069216	ExpressionStatement	already_inherited = true	9041:1:277268:277292	3069182	6	True				
ANR	3069217	AssignmentExpression	already_inherited = true		3069182	0		=			
ANR	3069218	Identifier	already_inherited		3069182	0					
ANR	3069219	Identifier	true		3069182	1					
ANR	3069220	IdentifierDeclStatement	const char * envName = EnvGetName ( ENV_INHERIT ) ;	9054:1:277869:277916	3069182	7	True				
ANR	3069221	IdentifierDecl	* envName = EnvGetName ( ENV_INHERIT )		3069182	0					
ANR	3069222	IdentifierDeclType	const char *		3069182	0					
ANR	3069223	Identifier	envName		3069182	1					
ANR	3069224	AssignmentExpression	* envName = EnvGetName ( ENV_INHERIT )		3069182	2		=			
ANR	3069225	Identifier	envName		3069182	0					
ANR	3069226	CallExpression	EnvGetName ( ENV_INHERIT )		3069182	1					
ANR	3069227	Callee	EnvGetName		3069182	0					
ANR	3069228	Identifier	EnvGetName		3069182	0					
ANR	3069229	ArgumentList	ENV_INHERIT		3069182	1					
ANR	3069230	Argument	ENV_INHERIT		3069182	0					
ANR	3069231	Identifier	ENV_INHERIT		3069182	0					
ANR	3069232	IdentifierDeclStatement	const char * tmp = GetEnv ( envName ) ;	9055:1:277919:277954	3069182	8	True				
ANR	3069233	IdentifierDecl	* tmp = GetEnv ( envName )		3069182	0					
ANR	3069234	IdentifierDeclType	const char *		3069182	0					
ANR	3069235	Identifier	tmp		3069182	1					
ANR	3069236	AssignmentExpression	* tmp = GetEnv ( envName )		3069182	2		=			
ANR	3069237	Identifier	tmp		3069182	0					
ANR	3069238	CallExpression	GetEnv ( envName )		3069182	1					
ANR	3069239	Callee	GetEnv		3069182	0					
ANR	3069240	Identifier	GetEnv		3069182	0					
ANR	3069241	ArgumentList	envName		3069182	1					
ANR	3069242	Argument	envName		3069182	0					
ANR	3069243	Identifier	envName		3069182	0					
ANR	3069244	IfStatement	if ( tmp != NULL )		3069182	9					
ANR	3069245	Condition	tmp != NULL	9056:6:277962:277972	3069182	0	True				
ANR	3069246	EqualityExpression	tmp != NULL		3069182	0		!=			
ANR	3069247	Identifier	tmp		3069182	0					
ANR	3069248	Identifier	NULL		3069182	1					
ANR	3069249	CompoundStatement		25:20:858:858	3069182	1					
ANR	3069250	ExpressionStatement	inheritbuf = strdup ( tmp )	9057:2:277980:278006	3069182	0	True				
ANR	3069251	AssignmentExpression	inheritbuf = strdup ( tmp )		3069182	0		=			
ANR	3069252	Identifier	inheritbuf		3069182	0					
ANR	3069253	CallExpression	strdup ( tmp )		3069182	1					
ANR	3069254	Callee	strdup		3069182	0					
ANR	3069255	Identifier	strdup		3069182	0					
ANR	3069256	ArgumentList	tmp		3069182	1					
ANR	3069257	Argument	tmp		3069182	0					
ANR	3069258	Identifier	tmp		3069182	0					
ANR	3069259	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""%s: \\""%s\\""\\n"" , envName , inheritbuf )"	9058:2:278010:278071	3069182	1	True				
ANR	3069260	CallExpression	"dprintf ( D_DAEMONCORE , ""%s: \\""%s\\""\\n"" , envName , inheritbuf )"		3069182	0					
ANR	3069261	Callee	dprintf		3069182	0					
ANR	3069262	Identifier	dprintf		3069182	0					
ANR	3069263	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069264	Argument	D_DAEMONCORE		3069182	0					
ANR	3069265	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069266	Argument	"""%s: \\""%s\\""\\n"""		3069182	1					
ANR	3069267	PrimaryExpression	"""%s: \\""%s\\""\\n"""		3069182	0					
ANR	3069268	Argument	envName		3069182	2					
ANR	3069269	Identifier	envName		3069182	0					
ANR	3069270	Argument	inheritbuf		3069182	3					
ANR	3069271	Identifier	inheritbuf		3069182	0					
ANR	3069272	ExpressionStatement	UnsetEnv ( envName )	9059:2:278075:278094	3069182	2	True				
ANR	3069273	CallExpression	UnsetEnv ( envName )		3069182	0					
ANR	3069274	Callee	UnsetEnv		3069182	0					
ANR	3069275	Identifier	UnsetEnv		3069182	0					
ANR	3069276	ArgumentList	envName		3069182	1					
ANR	3069277	Argument	envName		3069182	0					
ANR	3069278	Identifier	envName		3069182	0					
ANR	3069279	ElseStatement	else		3069182	0					
ANR	3069280	CompoundStatement		29:8:986:986	3069182	0					
ANR	3069281	ExpressionStatement	"inheritbuf = strdup ( """" )"	9061:2:278108:278133	3069182	0	True				
ANR	3069282	AssignmentExpression	"inheritbuf = strdup ( """" )"		3069182	0		=			
ANR	3069283	Identifier	inheritbuf		3069182	0					
ANR	3069284	CallExpression	"strdup ( """" )"		3069182	1					
ANR	3069285	Callee	strdup		3069182	0					
ANR	3069286	Identifier	strdup		3069182	0					
ANR	3069287	ArgumentList	""""""		3069182	1					
ANR	3069288	Argument	""""""		3069182	0					
ANR	3069289	PrimaryExpression	""""""		3069182	0					
ANR	3069290	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""%s: is NULL\\n"" , envName )"	9062:2:278137:278187	3069182	1	True				
ANR	3069291	CallExpression	"dprintf ( D_DAEMONCORE , ""%s: is NULL\\n"" , envName )"		3069182	0					
ANR	3069292	Callee	dprintf		3069182	0					
ANR	3069293	Identifier	dprintf		3069182	0					
ANR	3069294	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069295	Argument	D_DAEMONCORE		3069182	0					
ANR	3069296	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069297	Argument	"""%s: is NULL\\n"""		3069182	1					
ANR	3069298	PrimaryExpression	"""%s: is NULL\\n"""		3069182	0					
ANR	3069299	Argument	envName		3069182	2					
ANR	3069300	Identifier	envName		3069182	0					
ANR	3069301	IdentifierDeclStatement	"StringList inherit_list ( inheritbuf , "" "" ) ;"	9065:1:278194:278233	3069182	10	True				
ANR	3069302	IdentifierDecl	"inherit_list ( inheritbuf , "" "" )"		3069182	0					
ANR	3069303	IdentifierDeclType	StringList		3069182	0					
ANR	3069304	Identifier	inherit_list		3069182	1					
ANR	3069305	Expression	"inheritbuf , "" """		3069182	2					
ANR	3069306	Identifier	inheritbuf		3069182	0					
ANR	3069307	PrimaryExpression	""" """		3069182	1					
ANR	3069308	IfStatement	if ( inheritbuf != NULL )		3069182	11					
ANR	3069309	Condition	inheritbuf != NULL	9066:6:278241:278258	3069182	0	True				
ANR	3069310	EqualityExpression	inheritbuf != NULL		3069182	0		!=			
ANR	3069311	Identifier	inheritbuf		3069182	0					
ANR	3069312	Identifier	NULL		3069182	1					
ANR	3069313	CompoundStatement		35:27:1144:1144	3069182	1					
ANR	3069314	ExpressionStatement	free ( inheritbuf )	9067:2:278266:278284	3069182	0	True				
ANR	3069315	CallExpression	free ( inheritbuf )		3069182	0					
ANR	3069316	Callee	free		3069182	0					
ANR	3069317	Identifier	free		3069182	0					
ANR	3069318	ArgumentList	inheritbuf		3069182	1					
ANR	3069319	Argument	inheritbuf		3069182	0					
ANR	3069320	Identifier	inheritbuf		3069182	0					
ANR	3069321	ExpressionStatement	inheritbuf = NULL	9068:2:278288:278305	3069182	1	True				
ANR	3069322	AssignmentExpression	inheritbuf = NULL		3069182	0		=			
ANR	3069323	Identifier	inheritbuf		3069182	0					
ANR	3069324	Identifier	NULL		3069182	1					
ANR	3069325	ExpressionStatement	inherit_list . rewind ( )	9070:1:278311:278332	3069182	12	True				
ANR	3069326	CallExpression	inherit_list . rewind ( )		3069182	0					
ANR	3069327	Callee	inherit_list . rewind		3069182	0					
ANR	3069328	MemberAccess	inherit_list . rewind		3069182	0					
ANR	3069329	Identifier	inherit_list		3069182	0					
ANR	3069330	Identifier	rewind		3069182	1					
ANR	3069331	ArgumentList			3069182	1					
ANR	3069332	IfStatement	if ( ( ptmp = inherit_list . next ( ) ) != NULL && * ptmp )		3069182	13					
ANR	3069333	Condition	( ptmp = inherit_list . next ( ) ) != NULL && * ptmp	9071:6:278340:278382	3069182	0	True				
ANR	3069334	AndExpression	( ptmp = inherit_list . next ( ) ) != NULL && * ptmp		3069182	0		&&			
ANR	3069335	EqualityExpression	( ptmp = inherit_list . next ( ) ) != NULL		3069182	0		!=			
ANR	3069336	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069337	Identifier	ptmp		3069182	0					
ANR	3069338	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069339	Callee	inherit_list . next		3069182	0					
ANR	3069340	MemberAccess	inherit_list . next		3069182	0					
ANR	3069341	Identifier	inherit_list		3069182	0					
ANR	3069342	Identifier	next		3069182	1					
ANR	3069343	ArgumentList			3069182	1					
ANR	3069344	Identifier	NULL		3069182	1					
ANR	3069345	UnaryOperationExpression	* ptmp		3069182	1					
ANR	3069346	UnaryOperator	*		3069182	0					
ANR	3069347	Identifier	ptmp		3069182	1					
ANR	3069348	CompoundStatement		88:2:2826:2875	3069182	1					
ANR	3069349	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Parent PID = %s\\n"" , ptmp )"	9075:2:278479:278525	3069182	0	True				
ANR	3069350	CallExpression	"dprintf ( D_DAEMONCORE , ""Parent PID = %s\\n"" , ptmp )"		3069182	0					
ANR	3069351	Callee	dprintf		3069182	0					
ANR	3069352	Identifier	dprintf		3069182	0					
ANR	3069353	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069354	Argument	D_DAEMONCORE		3069182	0					
ANR	3069355	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069356	Argument	"""Parent PID = %s\\n"""		3069182	1					
ANR	3069357	PrimaryExpression	"""Parent PID = %s\\n"""		3069182	0					
ANR	3069358	Argument	ptmp		3069182	2					
ANR	3069359	Identifier	ptmp		3069182	0					
ANR	3069360	ExpressionStatement	ppid = atoi ( ptmp )	9076:2:278529:278546	3069182	1	True				
ANR	3069361	AssignmentExpression	ppid = atoi ( ptmp )		3069182	0		=			
ANR	3069362	Identifier	ppid		3069182	0					
ANR	3069363	CallExpression	atoi ( ptmp )		3069182	1					
ANR	3069364	Callee	atoi		3069182	0					
ANR	3069365	Identifier	atoi		3069182	0					
ANR	3069366	ArgumentList	ptmp		3069182	1					
ANR	3069367	Argument	ptmp		3069182	0					
ANR	3069368	Identifier	ptmp		3069182	0					
ANR	3069369	Statement	PidEntry	9077:2:278550:278557	3069182	2	True				
ANR	3069370	Statement	*	9077:11:278559:278559	3069182	3	True				
ANR	3069371	Statement	pidtmp	9077:12:278560:278565	3069182	4	True				
ANR	3069372	Statement	=	9077:19:278567:278567	3069182	5	True				
ANR	3069373	Statement	new	9077:21:278569:278571	3069182	6	True				
ANR	3069374	ExpressionStatement	PidEntry	9077:25:278573:278581	3069182	7	True				
ANR	3069375	Identifier	PidEntry		3069182	0					
ANR	3069376	ExpressionStatement	pidtmp -> pid = ppid	9078:2:278585:278603	3069182	8	True				
ANR	3069377	AssignmentExpression	pidtmp -> pid = ppid		3069182	0		=			
ANR	3069378	PtrMemberAccess	pidtmp -> pid		3069182	0					
ANR	3069379	Identifier	pidtmp		3069182	0					
ANR	3069380	Identifier	pid		3069182	1					
ANR	3069381	Identifier	ppid		3069182	1					
ANR	3069382	ExpressionStatement	ptmp = inherit_list . next ( )	9079:2:278607:278631	3069182	9	True				
ANR	3069383	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069384	Identifier	ptmp		3069182	0					
ANR	3069385	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069386	Callee	inherit_list . next		3069182	0					
ANR	3069387	MemberAccess	inherit_list . next		3069182	0					
ANR	3069388	Identifier	inherit_list		3069182	0					
ANR	3069389	Identifier	next		3069182	1					
ANR	3069390	ArgumentList			3069182	1					
ANR	3069391	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Parent Command Sock = %s\\n"" , ptmp )"	9080:2:278635:278690	3069182	10	True				
ANR	3069392	CallExpression	"dprintf ( D_DAEMONCORE , ""Parent Command Sock = %s\\n"" , ptmp )"		3069182	0					
ANR	3069393	Callee	dprintf		3069182	0					
ANR	3069394	Identifier	dprintf		3069182	0					
ANR	3069395	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069396	Argument	D_DAEMONCORE		3069182	0					
ANR	3069397	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069398	Argument	"""Parent Command Sock = %s\\n"""		3069182	1					
ANR	3069399	PrimaryExpression	"""Parent Command Sock = %s\\n"""		3069182	0					
ANR	3069400	Argument	ptmp		3069182	2					
ANR	3069401	Identifier	ptmp		3069182	0					
ANR	3069402	ExpressionStatement	pidtmp -> sinful_string = ptmp	9081:2:278694:278722	3069182	11	True				
ANR	3069403	AssignmentExpression	pidtmp -> sinful_string = ptmp		3069182	0		=			
ANR	3069404	PtrMemberAccess	pidtmp -> sinful_string		3069182	0					
ANR	3069405	Identifier	pidtmp		3069182	0					
ANR	3069406	Identifier	sinful_string		3069182	1					
ANR	3069407	Identifier	ptmp		3069182	1					
ANR	3069408	ExpressionStatement	pidtmp -> is_local = TRUE	9082:2:278726:278749	3069182	12	True				
ANR	3069409	AssignmentExpression	pidtmp -> is_local = TRUE		3069182	0		=			
ANR	3069410	PtrMemberAccess	pidtmp -> is_local		3069182	0					
ANR	3069411	Identifier	pidtmp		3069182	0					
ANR	3069412	Identifier	is_local		3069182	1					
ANR	3069413	Identifier	TRUE		3069182	1					
ANR	3069414	ExpressionStatement	pidtmp -> parent_is_local = TRUE	9083:2:278753:278783	3069182	13	True				
ANR	3069415	AssignmentExpression	pidtmp -> parent_is_local = TRUE		3069182	0		=			
ANR	3069416	PtrMemberAccess	pidtmp -> parent_is_local		3069182	0					
ANR	3069417	Identifier	pidtmp		3069182	0					
ANR	3069418	Identifier	parent_is_local		3069182	1					
ANR	3069419	Identifier	TRUE		3069182	1					
ANR	3069420	ExpressionStatement	pidtmp -> reaper_id = 0	9084:2:278787:278808	3069182	14	True				
ANR	3069421	AssignmentExpression	pidtmp -> reaper_id = 0		3069182	0		=			
ANR	3069422	PtrMemberAccess	pidtmp -> reaper_id		3069182	0					
ANR	3069423	Identifier	pidtmp		3069182	0					
ANR	3069424	Identifier	reaper_id		3069182	1					
ANR	3069425	PrimaryExpression	0		3069182	1					
ANR	3069426	ExpressionStatement	pidtmp -> hung_tid = - 1	9085:2:278812:278833	3069182	15	True				
ANR	3069427	AssignmentExpression	pidtmp -> hung_tid = - 1		3069182	0		=			
ANR	3069428	PtrMemberAccess	pidtmp -> hung_tid		3069182	0					
ANR	3069429	Identifier	pidtmp		3069182	0					
ANR	3069430	Identifier	hung_tid		3069182	1					
ANR	3069431	UnaryOperationExpression	- 1		3069182	1					
ANR	3069432	UnaryOperator	-		3069182	0					
ANR	3069433	PrimaryExpression	1		3069182	1					
ANR	3069434	ExpressionStatement	pidtmp -> was_not_responding = FALSE	9086:2:278837:278871	3069182	16	True				
ANR	3069435	AssignmentExpression	pidtmp -> was_not_responding = FALSE		3069182	0		=			
ANR	3069436	PtrMemberAccess	pidtmp -> was_not_responding		3069182	0					
ANR	3069437	Identifier	pidtmp		3069182	0					
ANR	3069438	Identifier	was_not_responding		3069182	1					
ANR	3069439	Identifier	FALSE		3069182	1					
ANR	3069440	ExpressionStatement	pidtmp -> deallocate = 0L	9088:2:278888:278911	3069182	17	True				
ANR	3069441	AssignmentExpression	pidtmp -> deallocate = 0L		3069182	0		=			
ANR	3069442	PtrMemberAccess	pidtmp -> deallocate		3069182	0					
ANR	3069443	Identifier	pidtmp		3069182	0					
ANR	3069444	Identifier	deallocate		3069182	1					
ANR	3069445	PrimaryExpression	0L		3069182	1					
ANR	3069446	Statement	pidtmp	9090:2:278916:278921	3069182	18	True				
ANR	3069447	Statement	->	9090:8:278922:278923	3069182	19	True				
ANR	3069448	Statement	hProcess	9090:10:278924:278931	3069182	20	True				
ANR	3069449	Statement	=	9090:19:278933:278933	3069182	21	True				
ANR	3069450	Statement	::	9090:21:278935:278936	3069182	22	True				
ANR	3069451	ExpressionStatement	"OpenProcess ( SYNCHRONIZE | PROCESS_QUERY_INFORMATION , FALSE , ppid )"	9090:23:278937:279008	3069182	23	True				
ANR	3069452	CallExpression	"OpenProcess ( SYNCHRONIZE | PROCESS_QUERY_INFORMATION , FALSE , ppid )"		3069182	0					
ANR	3069453	Callee	OpenProcess		3069182	0					
ANR	3069454	Identifier	OpenProcess		3069182	0					
ANR	3069455	ArgumentList	SYNCHRONIZE | PROCESS_QUERY_INFORMATION		3069182	1					
ANR	3069456	Argument	SYNCHRONIZE | PROCESS_QUERY_INFORMATION		3069182	0					
ANR	3069457	InclusiveOrExpression	SYNCHRONIZE | PROCESS_QUERY_INFORMATION		3069182	0		|			
ANR	3069458	Identifier	SYNCHRONIZE		3069182	0					
ANR	3069459	Identifier	PROCESS_QUERY_INFORMATION		3069182	1					
ANR	3069460	Argument	FALSE		3069182	1					
ANR	3069461	Identifier	FALSE		3069182	0					
ANR	3069462	Argument	ppid		3069182	2					
ANR	3069463	Identifier	ppid		3069182	0					
ANR	3069464	IdentifierDeclStatement	bool watch_ppid = true ;	9102:2:279464:279486	3069182	24	True				
ANR	3069465	IdentifierDecl	watch_ppid = true		3069182	0					
ANR	3069466	IdentifierDeclType	bool		3069182	0					
ANR	3069467	Identifier	watch_ppid		3069182	1					
ANR	3069468	AssignmentExpression	watch_ppid = true		3069182	2		=			
ANR	3069469	Identifier	true		3069182	0					
ANR	3069470	Identifier	true		3069182	1					
ANR	3069471	IfStatement	if ( pidtmp -> hProcess == NULL )		3069182	25					
ANR	3069472	Condition	pidtmp -> hProcess == NULL	9104:7:279496:279519	3069182	0	True				
ANR	3069473	EqualityExpression	pidtmp -> hProcess == NULL		3069182	0		==			
ANR	3069474	PtrMemberAccess	pidtmp -> hProcess		3069182	0					
ANR	3069475	Identifier	pidtmp		3069182	0					
ANR	3069476	Identifier	hProcess		3069182	1					
ANR	3069477	Identifier	NULL		3069182	1					
ANR	3069478	CompoundStatement		73:34:2405:2405	3069182	1					
ANR	3069479	IfStatement	if ( GetLastError ( ) == ERROR_ACCESS_DENIED )		3069182	0					
ANR	3069480	Condition	GetLastError ( ) == ERROR_ACCESS_DENIED	9105:8:279533:279569	3069182	0	True				
ANR	3069481	EqualityExpression	GetLastError ( ) == ERROR_ACCESS_DENIED		3069182	0		==			
ANR	3069482	CallExpression	GetLastError ( )		3069182	0					
ANR	3069483	Callee	GetLastError		3069182	0					
ANR	3069484	Identifier	GetLastError		3069182	0					
ANR	3069485	ArgumentList			3069182	1					
ANR	3069486	Identifier	ERROR_ACCESS_DENIED		3069182	1					
ANR	3069487	CompoundStatement		74:48:2455:2455	3069182	1					
ANR	3069488	Statement	dprintf	9106:4:279579:279585	3069182	0	True				
ANR	3069489	Statement	(	9106:11:279586:279586	3069182	1	True				
ANR	3069490	Statement	D_FULLDEBUG	9106:12:279587:279597	3069182	2	True				
ANR	3069491	Statement	","	9106:23:279598:279598	3069182	3	True				
ANR	3069492	Statement	"""OpenProcess() failed - """	9106:25:279600:279624	3069182	4	True				
ANR	3069493	Statement	"""ACCESS DENIED. We can't watch parent process.\\n"""	9107:6:279632:279680	3069182	5	True				
ANR	3069494	Statement	)	9107:55:279681:279681	3069182	6	True				
ANR	3069495	ExpressionStatement		9107:56:279682:279682	3069182	7	True				
ANR	3069496	ExpressionStatement	watch_ppid = false	9108:4:279688:279706	3069182	8	True				
ANR	3069497	AssignmentExpression	watch_ppid = false		3069182	0		=			
ANR	3069498	Identifier	watch_ppid		3069182	0					
ANR	3069499	Identifier	false		3069182	1					
ANR	3069500	ElseStatement	else		3069182	0					
ANR	3069501	CompoundStatement		78:10:2600:2600	3069182	0					
ANR	3069502	ExpressionStatement	"dprintf ( D_ALWAYS , ""OpenProcess() failed - Error %d\\n"" , GetLastError ( ) )"	9110:4:279724:279803	3069182	0	True				
ANR	3069503	CallExpression	"dprintf ( D_ALWAYS , ""OpenProcess() failed - Error %d\\n"" , GetLastError ( ) )"		3069182	0					
ANR	3069504	Callee	dprintf		3069182	0					
ANR	3069505	Identifier	dprintf		3069182	0					
ANR	3069506	ArgumentList	D_ALWAYS		3069182	1					
ANR	3069507	Argument	D_ALWAYS		3069182	0					
ANR	3069508	Identifier	D_ALWAYS		3069182	0					
ANR	3069509	Argument	"""OpenProcess() failed - Error %d\\n"""		3069182	1					
ANR	3069510	PrimaryExpression	"""OpenProcess() failed - Error %d\\n"""		3069182	0					
ANR	3069511	Argument	GetLastError ( )		3069182	2					
ANR	3069512	CallExpression	GetLastError ( )		3069182	0					
ANR	3069513	Callee	GetLastError		3069182	0					
ANR	3069514	Identifier	GetLastError		3069182	0					
ANR	3069515	ArgumentList			3069182	1					
ANR	3069516	ExpressionStatement	pidtmp -> hThread = NULL	9115:2:279817:279839	3069182	26	True				
ANR	3069517	AssignmentExpression	pidtmp -> hThread = NULL		3069182	0		=			
ANR	3069518	PtrMemberAccess	pidtmp -> hThread		3069182	0					
ANR	3069519	Identifier	pidtmp		3069182	0					
ANR	3069520	Identifier	hThread		3069182	1					
ANR	3069521	Identifier	NULL		3069182	1					
ANR	3069522	ExpressionStatement	pidtmp -> pipeEnd = NULL	9116:2:279884:279906	3069182	27	True				
ANR	3069523	AssignmentExpression	pidtmp -> pipeEnd = NULL		3069182	0		=			
ANR	3069524	PtrMemberAccess	pidtmp -> pipeEnd		3069182	0					
ANR	3069525	Identifier	pidtmp		3069182	0					
ANR	3069526	Identifier	pipeEnd		3069182	1					
ANR	3069527	Identifier	NULL		3069182	1					
ANR	3069528	ExpressionStatement	pidtmp -> deallocate = 0L	9117:2:279910:279933	3069182	28	True				
ANR	3069529	AssignmentExpression	pidtmp -> deallocate = 0L		3069182	0		=			
ANR	3069530	PtrMemberAccess	pidtmp -> deallocate		3069182	0					
ANR	3069531	Identifier	pidtmp		3069182	0					
ANR	3069532	Identifier	deallocate		3069182	1					
ANR	3069533	PrimaryExpression	0L		3069182	1					
ANR	3069534	IdentifierDeclStatement	"int insert_result = pidTable -> insert ( ppid , pidtmp ) ;"	9119:2:279944:279993	3069182	29	True				
ANR	3069535	IdentifierDecl	"insert_result = pidTable -> insert ( ppid , pidtmp )"		3069182	0					
ANR	3069536	IdentifierDeclType	int		3069182	0					
ANR	3069537	Identifier	insert_result		3069182	1					
ANR	3069538	AssignmentExpression	"insert_result = pidTable -> insert ( ppid , pidtmp )"		3069182	2		=			
ANR	3069539	Identifier	insert_result		3069182	0					
ANR	3069540	CallExpression	"pidTable -> insert ( ppid , pidtmp )"		3069182	1					
ANR	3069541	Callee	pidTable -> insert		3069182	0					
ANR	3069542	PtrMemberAccess	pidTable -> insert		3069182	0					
ANR	3069543	Identifier	pidTable		3069182	0					
ANR	3069544	Identifier	insert		3069182	1					
ANR	3069545	ArgumentList	ppid		3069182	1					
ANR	3069546	Argument	ppid		3069182	0					
ANR	3069547	Identifier	ppid		3069182	0					
ANR	3069548	Argument	pidtmp		3069182	1					
ANR	3069549	Identifier	pidtmp		3069182	0					
ANR	3069550	ExpressionStatement	assert ( insert_result == 0 )	9120:2:279997:280025	3069182	30	True				
ANR	3069551	CallExpression	assert ( insert_result == 0 )		3069182	0					
ANR	3069552	Callee	assert		3069182	0					
ANR	3069553	Identifier	assert		3069182	0					
ANR	3069554	ArgumentList	insert_result == 0		3069182	1					
ANR	3069555	Argument	insert_result == 0		3069182	0					
ANR	3069556	EqualityExpression	insert_result == 0		3069182	0		==			
ANR	3069557	Identifier	insert_result		3069182	0					
ANR	3069558	PrimaryExpression	0		3069182	1					
ANR	3069559	IfStatement	if ( watch_ppid )		3069182	31					
ANR	3069560	Condition	watch_ppid	9122:7:280047:280056	3069182	0	True				
ANR	3069561	Identifier	watch_ppid		3069182	0					
ANR	3069562	CompoundStatement		91:20:2942:2942	3069182	1					
ANR	3069563	ExpressionStatement	assert ( pidtmp -> hProcess )	9123:3:280065:280089	3069182	0	True				
ANR	3069564	CallExpression	assert ( pidtmp -> hProcess )		3069182	0					
ANR	3069565	Callee	assert		3069182	0					
ANR	3069566	Identifier	assert		3069182	0					
ANR	3069567	ArgumentList	pidtmp -> hProcess		3069182	1					
ANR	3069568	Argument	pidtmp -> hProcess		3069182	0					
ANR	3069569	PtrMemberAccess	pidtmp -> hProcess		3069182	0					
ANR	3069570	Identifier	pidtmp		3069182	0					
ANR	3069571	Identifier	hProcess		3069182	1					
ANR	3069572	ExpressionStatement	WatchPid ( pidtmp )	9124:3:280094:280110	3069182	1	True				
ANR	3069573	CallExpression	WatchPid ( pidtmp )		3069182	0					
ANR	3069574	Callee	WatchPid		3069182	0					
ANR	3069575	Identifier	WatchPid		3069182	0					
ANR	3069576	ArgumentList	pidtmp		3069182	1					
ANR	3069577	Argument	pidtmp		3069182	0					
ANR	3069578	Identifier	pidtmp		3069182	0					
ANR	3069579	ExpressionStatement	ptmp = inherit_list . next ( )	9129:2:280151:280175	3069182	32	True				
ANR	3069580	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069581	Identifier	ptmp		3069182	0					
ANR	3069582	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069583	Callee	inherit_list . next		3069182	0					
ANR	3069584	MemberAccess	inherit_list . next		3069182	0					
ANR	3069585	Identifier	inherit_list		3069182	0					
ANR	3069586	Identifier	next		3069182	1					
ANR	3069587	ArgumentList			3069182	1					
ANR	3069588	WhileStatement	while ( ptmp && ( * ptmp != '0' ) )		3069182	33					
ANR	3069589	Condition	ptmp && ( * ptmp != '0' )	9130:10:280187:280208	3069182	0	True				
ANR	3069590	AndExpression	ptmp && ( * ptmp != '0' )		3069182	0		&&			
ANR	3069591	Identifier	ptmp		3069182	0					
ANR	3069592	EqualityExpression	* ptmp != '0'		3069182	1		!=			
ANR	3069593	UnaryOperationExpression	* ptmp		3069182	0					
ANR	3069594	UnaryOperator	*		3069182	0					
ANR	3069595	Identifier	ptmp		3069182	1					
ANR	3069596	PrimaryExpression	'0'		3069182	1					
ANR	3069597	CompoundStatement		99:35:3094:3094	3069182	1					
ANR	3069598	IfStatement	if ( numInheritedSocks >= MAX_SOCKS_INHERITED )		3069182	0					
ANR	3069599	Condition	numInheritedSocks >= MAX_SOCKS_INHERITED	9131:7:280221:280260	3069182	0	True				
ANR	3069600	RelationalExpression	numInheritedSocks >= MAX_SOCKS_INHERITED		3069182	0		>=			
ANR	3069601	Identifier	numInheritedSocks		3069182	0					
ANR	3069602	Identifier	MAX_SOCKS_INHERITED		3069182	1					
ANR	3069603	CompoundStatement		100:49:3145:3145	3069182	1					
ANR	3069604	ExpressionStatement	"EXCEPT ( ""MAX_SOCKS_INHERITED reached."" )"	9132:4:280269:280307	3069182	0	True				
ANR	3069605	CallExpression	"EXCEPT ( ""MAX_SOCKS_INHERITED reached."" )"		3069182	0					
ANR	3069606	Callee	EXCEPT		3069182	0					
ANR	3069607	Identifier	EXCEPT		3069182	0					
ANR	3069608	ArgumentList	"""MAX_SOCKS_INHERITED reached."""		3069182	1					
ANR	3069609	Argument	"""MAX_SOCKS_INHERITED reached."""		3069182	0					
ANR	3069610	PrimaryExpression	"""MAX_SOCKS_INHERITED reached."""		3069182	0					
ANR	3069611	SwitchStatement	switch ( * ptmp )		3069182	1					
ANR	3069612	Condition	* ptmp	9134:12:280326:280330	3069182	0	True				
ANR	3069613	UnaryOperationExpression	* ptmp		3069182	0					
ANR	3069614	UnaryOperator	*		3069182	0					
ANR	3069615	Identifier	ptmp		3069182	1					
ANR	3069616	CompoundStatement		103:20:3216:3216	3069182	1					
ANR	3069617	Label	case '1' :	9135:4:280340:280349	3069182	0	True				
ANR	3069618	ExpressionStatement	dc_rsock = new ReliSock ( )	9137:5:280383:280408	3069182	1	True				
ANR	3069619	AssignmentExpression	dc_rsock = new ReliSock ( )		3069182	0		=			
ANR	3069620	Identifier	dc_rsock		3069182	0					
ANR	3069621	UnaryExpression	new ReliSock ( )		3069182	1					
ANR	3069622	ExpressionStatement	ptmp = inherit_list . next ( )	9138:5:280415:280439	3069182	2	True				
ANR	3069623	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069624	Identifier	ptmp		3069182	0					
ANR	3069625	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069626	Callee	inherit_list . next		3069182	0					
ANR	3069627	MemberAccess	inherit_list . next		3069182	0					
ANR	3069628	Identifier	inherit_list		3069182	0					
ANR	3069629	Identifier	next		3069182	1					
ANR	3069630	ArgumentList			3069182	1					
ANR	3069631	ExpressionStatement	dc_rsock -> serialize ( ptmp )	9139:5:280446:280471	3069182	3	True				
ANR	3069632	CallExpression	dc_rsock -> serialize ( ptmp )		3069182	0					
ANR	3069633	Callee	dc_rsock -> serialize		3069182	0					
ANR	3069634	PtrMemberAccess	dc_rsock -> serialize		3069182	0					
ANR	3069635	Identifier	dc_rsock		3069182	0					
ANR	3069636	Identifier	serialize		3069182	1					
ANR	3069637	ArgumentList	ptmp		3069182	1					
ANR	3069638	Argument	ptmp		3069182	0					
ANR	3069639	Identifier	ptmp		3069182	0					
ANR	3069640	ExpressionStatement	dc_rsock -> set_inheritable ( FALSE )	9140:5:280478:280510	3069182	4	True				
ANR	3069641	CallExpression	dc_rsock -> set_inheritable ( FALSE )		3069182	0					
ANR	3069642	Callee	dc_rsock -> set_inheritable		3069182	0					
ANR	3069643	PtrMemberAccess	dc_rsock -> set_inheritable		3069182	0					
ANR	3069644	Identifier	dc_rsock		3069182	0					
ANR	3069645	Identifier	set_inheritable		3069182	1					
ANR	3069646	ArgumentList	FALSE		3069182	1					
ANR	3069647	Argument	FALSE		3069182	0					
ANR	3069648	Identifier	FALSE		3069182	0					
ANR	3069649	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Inherited a ReliSock\\n"" )"	9141:5:280517:280563	3069182	5	True				
ANR	3069650	CallExpression	"dprintf ( D_DAEMONCORE , ""Inherited a ReliSock\\n"" )"		3069182	0					
ANR	3069651	Callee	dprintf		3069182	0					
ANR	3069652	Identifier	dprintf		3069182	0					
ANR	3069653	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069654	Argument	D_DAEMONCORE		3069182	0					
ANR	3069655	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069656	Argument	"""Inherited a ReliSock\\n"""		3069182	1					
ANR	3069657	PrimaryExpression	"""Inherited a ReliSock\\n"""		3069182	0					
ANR	3069658	ExpressionStatement	inheritedSocks [ numInheritedSocks ++ ] = ( Stream * ) dc_rsock	9143:5:280598:280654	3069182	6	True				
ANR	3069659	AssignmentExpression	inheritedSocks [ numInheritedSocks ++ ] = ( Stream * ) dc_rsock		3069182	0		=			
ANR	3069660	ArrayIndexing	inheritedSocks [ numInheritedSocks ++ ]		3069182	0					
ANR	3069661	Identifier	inheritedSocks		3069182	0					
ANR	3069662	PostIncDecOperationExpression	numInheritedSocks ++		3069182	1					
ANR	3069663	Identifier	numInheritedSocks		3069182	0					
ANR	3069664	IncDec	++		3069182	1					
ANR	3069665	CastExpression	( Stream * ) dc_rsock		3069182	1					
ANR	3069666	CastTarget	Stream *		3069182	0					
ANR	3069667	Identifier	dc_rsock		3069182	1					
ANR	3069668	BreakStatement	break ;	9144:5:280661:280666	3069182	7	True				
ANR	3069669	Label	case '2' :	9145:4:280672:280680	3069182	8	True				
ANR	3069670	ExpressionStatement	dc_ssock = new SafeSock ( )	9146:5:280687:280712	3069182	9	True				
ANR	3069671	AssignmentExpression	dc_ssock = new SafeSock ( )		3069182	0		=			
ANR	3069672	Identifier	dc_ssock		3069182	0					
ANR	3069673	UnaryExpression	new SafeSock ( )		3069182	1					
ANR	3069674	ExpressionStatement	ptmp = inherit_list . next ( )	9147:5:280719:280743	3069182	10	True				
ANR	3069675	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069676	Identifier	ptmp		3069182	0					
ANR	3069677	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069678	Callee	inherit_list . next		3069182	0					
ANR	3069679	MemberAccess	inherit_list . next		3069182	0					
ANR	3069680	Identifier	inherit_list		3069182	0					
ANR	3069681	Identifier	next		3069182	1					
ANR	3069682	ArgumentList			3069182	1					
ANR	3069683	ExpressionStatement	dc_ssock -> serialize ( ptmp )	9148:5:280750:280775	3069182	11	True				
ANR	3069684	CallExpression	dc_ssock -> serialize ( ptmp )		3069182	0					
ANR	3069685	Callee	dc_ssock -> serialize		3069182	0					
ANR	3069686	PtrMemberAccess	dc_ssock -> serialize		3069182	0					
ANR	3069687	Identifier	dc_ssock		3069182	0					
ANR	3069688	Identifier	serialize		3069182	1					
ANR	3069689	ArgumentList	ptmp		3069182	1					
ANR	3069690	Argument	ptmp		3069182	0					
ANR	3069691	Identifier	ptmp		3069182	0					
ANR	3069692	ExpressionStatement	dc_ssock -> set_inheritable ( FALSE )	9149:5:280782:280814	3069182	12	True				
ANR	3069693	CallExpression	dc_ssock -> set_inheritable ( FALSE )		3069182	0					
ANR	3069694	Callee	dc_ssock -> set_inheritable		3069182	0					
ANR	3069695	PtrMemberAccess	dc_ssock -> set_inheritable		3069182	0					
ANR	3069696	Identifier	dc_ssock		3069182	0					
ANR	3069697	Identifier	set_inheritable		3069182	1					
ANR	3069698	ArgumentList	FALSE		3069182	1					
ANR	3069699	Argument	FALSE		3069182	0					
ANR	3069700	Identifier	FALSE		3069182	0					
ANR	3069701	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Inherited a SafeSock\\n"" )"	9150:5:280821:280867	3069182	13	True				
ANR	3069702	CallExpression	"dprintf ( D_DAEMONCORE , ""Inherited a SafeSock\\n"" )"		3069182	0					
ANR	3069703	Callee	dprintf		3069182	0					
ANR	3069704	Identifier	dprintf		3069182	0					
ANR	3069705	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069706	Argument	D_DAEMONCORE		3069182	0					
ANR	3069707	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069708	Argument	"""Inherited a SafeSock\\n"""		3069182	1					
ANR	3069709	PrimaryExpression	"""Inherited a SafeSock\\n"""		3069182	0					
ANR	3069710	ExpressionStatement	inheritedSocks [ numInheritedSocks ++ ] = ( Stream * ) dc_ssock	9152:5:280902:280958	3069182	14	True				
ANR	3069711	AssignmentExpression	inheritedSocks [ numInheritedSocks ++ ] = ( Stream * ) dc_ssock		3069182	0		=			
ANR	3069712	ArrayIndexing	inheritedSocks [ numInheritedSocks ++ ]		3069182	0					
ANR	3069713	Identifier	inheritedSocks		3069182	0					
ANR	3069714	PostIncDecOperationExpression	numInheritedSocks ++		3069182	1					
ANR	3069715	Identifier	numInheritedSocks		3069182	0					
ANR	3069716	IncDec	++		3069182	1					
ANR	3069717	CastExpression	( Stream * ) dc_ssock		3069182	1					
ANR	3069718	CastTarget	Stream *		3069182	0					
ANR	3069719	Identifier	dc_ssock		3069182	1					
ANR	3069720	BreakStatement	break ;	9153:5:280965:280970	3069182	15	True				
ANR	3069721	Label	default :	9154:4:280976:280983	3069182	16	True				
ANR	3069722	Identifier	default		3069182	0					
ANR	3069723	ExpressionStatement	"EXCEPT ( ""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"" , * ptmp , ( int ) * ptmp )"	9155:5:280990:281082	3069182	17	True				
ANR	3069724	CallExpression	"EXCEPT ( ""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"" , * ptmp , ( int ) * ptmp )"		3069182	0					
ANR	3069725	Callee	EXCEPT		3069182	0					
ANR	3069726	Identifier	EXCEPT		3069182	0					
ANR	3069727	ArgumentList	"""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"""		3069182	1					
ANR	3069728	Argument	"""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"""		3069182	0					
ANR	3069729	PrimaryExpression	"""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"""		3069182	0					
ANR	3069730	Argument	* ptmp		3069182	1					
ANR	3069731	UnaryOperationExpression	* ptmp		3069182	0					
ANR	3069732	UnaryOperator	*		3069182	0					
ANR	3069733	Identifier	ptmp		3069182	1					
ANR	3069734	Argument	( int ) * ptmp		3069182	2					
ANR	3069735	CastExpression	( int ) * ptmp		3069182	0					
ANR	3069736	CastTarget	int		3069182	0					
ANR	3069737	UnaryOperationExpression	* ptmp		3069182	1					
ANR	3069738	UnaryOperator	*		3069182	0					
ANR	3069739	Identifier	ptmp		3069182	1					
ANR	3069740	BreakStatement	break ;	9156:5:281089:281094	3069182	18	True				
ANR	3069741	ExpressionStatement	ptmp = inherit_list . next ( )	9158:3:281121:281145	3069182	2	True				
ANR	3069742	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069743	Identifier	ptmp		3069182	0					
ANR	3069744	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069745	Callee	inherit_list . next		3069182	0					
ANR	3069746	MemberAccess	inherit_list . next		3069182	0					
ANR	3069747	Identifier	inherit_list		3069182	0					
ANR	3069748	Identifier	next		3069182	1					
ANR	3069749	ArgumentList			3069182	1					
ANR	3069750	ExpressionStatement	inheritedSocks [ numInheritedSocks ] = NULL	9160:2:281153:281193	3069182	34	True				
ANR	3069751	AssignmentExpression	inheritedSocks [ numInheritedSocks ] = NULL		3069182	0		=			
ANR	3069752	ArrayIndexing	inheritedSocks [ numInheritedSocks ]		3069182	0					
ANR	3069753	Identifier	inheritedSocks		3069182	0					
ANR	3069754	Identifier	numInheritedSocks		3069182	1					
ANR	3069755	Identifier	NULL		3069182	1					
ANR	3069756	ExpressionStatement	dc_rsock = NULL	9165:2:281361:281376	3069182	35	True				
ANR	3069757	AssignmentExpression	dc_rsock = NULL		3069182	0		=			
ANR	3069758	Identifier	dc_rsock		3069182	0					
ANR	3069759	Identifier	NULL		3069182	1					
ANR	3069760	ExpressionStatement	dc_ssock = NULL	9166:2:281380:281395	3069182	36	True				
ANR	3069761	AssignmentExpression	dc_ssock = NULL		3069182	0		=			
ANR	3069762	Identifier	dc_ssock		3069182	0					
ANR	3069763	Identifier	NULL		3069182	1					
ANR	3069764	ExpressionStatement	ptmp = inherit_list . next ( )	9167:2:281399:281423	3069182	37	True				
ANR	3069765	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069766	Identifier	ptmp		3069182	0					
ANR	3069767	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069768	Callee	inherit_list . next		3069182	0					
ANR	3069769	MemberAccess	inherit_list . next		3069182	0					
ANR	3069770	Identifier	inherit_list		3069182	0					
ANR	3069771	Identifier	next		3069182	1					
ANR	3069772	ArgumentList			3069182	1					
ANR	3069773	IfStatement	"if ( ptmp && strncmp ( ptmp , ""SharedPort:"" , 11 ) == 0 )"		3069182	38					
ANR	3069774	Condition	"ptmp && strncmp ( ptmp , ""SharedPort:"" , 11 ) == 0"	9168:6:281431:281471	3069182	0	True				
ANR	3069775	AndExpression	"ptmp && strncmp ( ptmp , ""SharedPort:"" , 11 ) == 0"		3069182	0		&&			
ANR	3069776	Identifier	ptmp		3069182	0					
ANR	3069777	EqualityExpression	"strncmp ( ptmp , ""SharedPort:"" , 11 ) == 0"		3069182	1		==			
ANR	3069778	CallExpression	"strncmp ( ptmp , ""SharedPort:"" , 11 )"		3069182	0					
ANR	3069779	Callee	strncmp		3069182	0					
ANR	3069780	Identifier	strncmp		3069182	0					
ANR	3069781	ArgumentList	ptmp		3069182	1					
ANR	3069782	Argument	ptmp		3069182	0					
ANR	3069783	Identifier	ptmp		3069182	0					
ANR	3069784	Argument	"""SharedPort:"""		3069182	1					
ANR	3069785	PrimaryExpression	"""SharedPort:"""		3069182	0					
ANR	3069786	Argument	11		3069182	2					
ANR	3069787	PrimaryExpression	11		3069182	0					
ANR	3069788	PrimaryExpression	0		3069182	1					
ANR	3069789	CompoundStatement		137:50:4357:4357	3069182	1					
ANR	3069790	ExpressionStatement	ptmp += 11	9169:3:281480:281490	3069182	0	True				
ANR	3069791	AssignmentExpression	ptmp += 11		3069182	0		+=			
ANR	3069792	Identifier	ptmp		3069182	0					
ANR	3069793	PrimaryExpression	11		3069182	1					
ANR	3069794	Statement	delete	9170:3:281495:281500	3069182	1	True				
ANR	3069795	ExpressionStatement	m_shared_port_endpoint	9170:10:281502:281524	3069182	2	True				
ANR	3069796	Identifier	m_shared_port_endpoint		3069182	0					
ANR	3069797	ExpressionStatement	m_shared_port_endpoint = new SharedPortEndpoint ( )	9171:3:281529:281578	3069182	3	True				
ANR	3069798	AssignmentExpression	m_shared_port_endpoint = new SharedPortEndpoint ( )		3069182	0		=			
ANR	3069799	Identifier	m_shared_port_endpoint		3069182	0					
ANR	3069800	UnaryExpression	new SharedPortEndpoint ( )		3069182	1					
ANR	3069801	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Inheriting a shared port pipe.\\n"" )"	9172:3:281583:281640	3069182	4	True				
ANR	3069802	CallExpression	"dprintf ( D_DAEMONCORE , ""Inheriting a shared port pipe.\\n"" )"		3069182	0					
ANR	3069803	Callee	dprintf		3069182	0					
ANR	3069804	Identifier	dprintf		3069182	0					
ANR	3069805	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069806	Argument	D_DAEMONCORE		3069182	0					
ANR	3069807	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069808	Argument	"""Inheriting a shared port pipe.\\n"""		3069182	1					
ANR	3069809	PrimaryExpression	"""Inheriting a shared port pipe.\\n"""		3069182	0					
ANR	3069810	ExpressionStatement	m_shared_port_endpoint -> deserialize ( ptmp )	9173:3:281645:281686	3069182	5	True				
ANR	3069811	CallExpression	m_shared_port_endpoint -> deserialize ( ptmp )		3069182	0					
ANR	3069812	Callee	m_shared_port_endpoint -> deserialize		3069182	0					
ANR	3069813	PtrMemberAccess	m_shared_port_endpoint -> deserialize		3069182	0					
ANR	3069814	Identifier	m_shared_port_endpoint		3069182	0					
ANR	3069815	Identifier	deserialize		3069182	1					
ANR	3069816	ArgumentList	ptmp		3069182	1					
ANR	3069817	Argument	ptmp		3069182	0					
ANR	3069818	Identifier	ptmp		3069182	0					
ANR	3069819	ExpressionStatement	ptmp = inherit_list . next ( )	9174:3:281691:281715	3069182	6	True				
ANR	3069820	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069821	Identifier	ptmp		3069182	0					
ANR	3069822	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069823	Callee	inherit_list . next		3069182	0					
ANR	3069824	MemberAccess	inherit_list . next		3069182	0					
ANR	3069825	Identifier	inherit_list		3069182	0					
ANR	3069826	Identifier	next		3069182	1					
ANR	3069827	ArgumentList			3069182	1					
ANR	3069828	IfStatement	"if ( ptmp && ( strcmp ( ptmp , ""0"" ) != 0 ) )"		3069182	39					
ANR	3069829	Condition	"ptmp && ( strcmp ( ptmp , ""0"" ) != 0 )"	9176:7:281728:281758	3069182	0	True				
ANR	3069830	AndExpression	"ptmp && ( strcmp ( ptmp , ""0"" ) != 0 )"		3069182	0		&&			
ANR	3069831	Identifier	ptmp		3069182	0					
ANR	3069832	EqualityExpression	"strcmp ( ptmp , ""0"" ) != 0"		3069182	1		!=			
ANR	3069833	CallExpression	"strcmp ( ptmp , ""0"" )"		3069182	0					
ANR	3069834	Callee	strcmp		3069182	0					
ANR	3069835	Identifier	strcmp		3069182	0					
ANR	3069836	ArgumentList	ptmp		3069182	1					
ANR	3069837	Argument	ptmp		3069182	0					
ANR	3069838	Identifier	ptmp		3069182	0					
ANR	3069839	Argument	"""0"""		3069182	1					
ANR	3069840	PrimaryExpression	"""0"""		3069182	0					
ANR	3069841	PrimaryExpression	0		3069182	1					
ANR	3069842	CompoundStatement		145:41:4644:4644	3069182	1					
ANR	3069843	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Inheriting Command Sockets\\n"" )"	9177:3:281767:281819	3069182	0	True				
ANR	3069844	CallExpression	"dprintf ( D_DAEMONCORE , ""Inheriting Command Sockets\\n"" )"		3069182	0					
ANR	3069845	Callee	dprintf		3069182	0					
ANR	3069846	Identifier	dprintf		3069182	0					
ANR	3069847	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069848	Argument	D_DAEMONCORE		3069182	0					
ANR	3069849	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069850	Argument	"""Inheriting Command Sockets\\n"""		3069182	1					
ANR	3069851	PrimaryExpression	"""Inheriting Command Sockets\\n"""		3069182	0					
ANR	3069852	ExpressionStatement	dc_rsock = new ReliSock ( )	9178:3:281824:281849	3069182	1	True				
ANR	3069853	AssignmentExpression	dc_rsock = new ReliSock ( )		3069182	0		=			
ANR	3069854	Identifier	dc_rsock		3069182	0					
ANR	3069855	UnaryExpression	new ReliSock ( )		3069182	1					
ANR	3069856	ExpressionStatement	( ( ReliSock * ) dc_rsock ) -> serialize ( ptmp )	9179:3:281854:281893	3069182	2	True				
ANR	3069857	CallExpression	( ( ReliSock * ) dc_rsock ) -> serialize ( ptmp )		3069182	0					
ANR	3069858	Callee	( ( ReliSock * ) dc_rsock ) -> serialize		3069182	0					
ANR	3069859	PtrMemberAccess	( ( ReliSock * ) dc_rsock ) -> serialize		3069182	0					
ANR	3069860	CastExpression	( ReliSock * ) dc_rsock		3069182	0					
ANR	3069861	CastTarget	ReliSock *		3069182	0					
ANR	3069862	Identifier	dc_rsock		3069182	1					
ANR	3069863	Identifier	serialize		3069182	1					
ANR	3069864	ArgumentList	ptmp		3069182	1					
ANR	3069865	Argument	ptmp		3069182	0					
ANR	3069866	Identifier	ptmp		3069182	0					
ANR	3069867	ExpressionStatement	dc_rsock -> set_inheritable ( FALSE )	9180:3:281898:281930	3069182	3	True				
ANR	3069868	CallExpression	dc_rsock -> set_inheritable ( FALSE )		3069182	0					
ANR	3069869	Callee	dc_rsock -> set_inheritable		3069182	0					
ANR	3069870	PtrMemberAccess	dc_rsock -> set_inheritable		3069182	0					
ANR	3069871	Identifier	dc_rsock		3069182	0					
ANR	3069872	Identifier	set_inheritable		3069182	1					
ANR	3069873	ArgumentList	FALSE		3069182	1					
ANR	3069874	Argument	FALSE		3069182	0					
ANR	3069875	Identifier	FALSE		3069182	0					
ANR	3069876	ExpressionStatement	ptmp = inherit_list . next ( )	9181:3:281935:281959	3069182	4	True				
ANR	3069877	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069878	Identifier	ptmp		3069182	0					
ANR	3069879	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069880	Callee	inherit_list . next		3069182	0					
ANR	3069881	MemberAccess	inherit_list . next		3069182	0					
ANR	3069882	Identifier	inherit_list		3069182	0					
ANR	3069883	Identifier	next		3069182	1					
ANR	3069884	ArgumentList			3069182	1					
ANR	3069885	IfStatement	"if ( ptmp && ( strcmp ( ptmp , ""0"" ) != 0 ) )"		3069182	40					
ANR	3069886	Condition	"ptmp && ( strcmp ( ptmp , ""0"" ) != 0 )"	9183:7:281972:282002	3069182	0	True				
ANR	3069887	AndExpression	"ptmp && ( strcmp ( ptmp , ""0"" ) != 0 )"		3069182	0		&&			
ANR	3069888	Identifier	ptmp		3069182	0					
ANR	3069889	EqualityExpression	"strcmp ( ptmp , ""0"" ) != 0"		3069182	1		!=			
ANR	3069890	CallExpression	"strcmp ( ptmp , ""0"" )"		3069182	0					
ANR	3069891	Callee	strcmp		3069182	0					
ANR	3069892	Identifier	strcmp		3069182	0					
ANR	3069893	ArgumentList	ptmp		3069182	1					
ANR	3069894	Argument	ptmp		3069182	0					
ANR	3069895	Identifier	ptmp		3069182	0					
ANR	3069896	Argument	"""0"""		3069182	1					
ANR	3069897	PrimaryExpression	"""0"""		3069182	0					
ANR	3069898	PrimaryExpression	0		3069182	1					
ANR	3069899	CompoundStatement		152:41:4888:4888	3069182	1					
ANR	3069900	IfStatement	if ( ! m_wants_dc_udp_self )		3069182	0					
ANR	3069901	Condition	! m_wants_dc_udp_self	9184:7:282015:282034	3069182	0	True				
ANR	3069902	UnaryOperationExpression	! m_wants_dc_udp_self		3069182	0					
ANR	3069903	UnaryOperator	!		3069182	0					
ANR	3069904	Identifier	m_wants_dc_udp_self		3069182	1					
ANR	3069905	CompoundStatement		153:30:4920:4920	3069182	1					
ANR	3069906	ExpressionStatement	Sock :: close_serialized_socket ( ptmp )	9187:4:282162:282197	3069182	0	True				
ANR	3069907	CallExpression	Sock :: close_serialized_socket ( ptmp )		3069182	0					
ANR	3069908	Callee	Sock :: close_serialized_socket		3069182	0					
ANR	3069909	Identifier	Sock :: close_serialized_socket		3069182	0					
ANR	3069910	ArgumentList	ptmp		3069182	1					
ANR	3069911	Argument	ptmp		3069182	0					
ANR	3069912	Identifier	ptmp		3069182	0					
ANR	3069913	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removing inherited UDP command socket.\\n"" )"	9188:4:282203:282267	3069182	1	True				
ANR	3069914	CallExpression	"dprintf ( D_DAEMONCORE , ""Removing inherited UDP command socket.\\n"" )"		3069182	0					
ANR	3069915	Callee	dprintf		3069182	0					
ANR	3069916	Identifier	dprintf		3069182	0					
ANR	3069917	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069918	Argument	D_DAEMONCORE		3069182	0					
ANR	3069919	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069920	Argument	"""Removing inherited UDP command socket.\\n"""		3069182	1					
ANR	3069921	PrimaryExpression	"""Removing inherited UDP command socket.\\n"""		3069182	0					
ANR	3069922	ElseStatement	else		3069182	0					
ANR	3069923	CompoundStatement		159:8:5164:5164	3069182	0					
ANR	3069924	ExpressionStatement	dc_ssock = new SafeSock ( )	9191:4:282288:282313	3069182	0	True				
ANR	3069925	AssignmentExpression	dc_ssock = new SafeSock ( )		3069182	0		=			
ANR	3069926	Identifier	dc_ssock		3069182	0					
ANR	3069927	UnaryExpression	new SafeSock ( )		3069182	1					
ANR	3069928	ExpressionStatement	dc_ssock -> serialize ( ptmp )	9192:4:282319:282344	3069182	1	True				
ANR	3069929	CallExpression	dc_ssock -> serialize ( ptmp )		3069182	0					
ANR	3069930	Callee	dc_ssock -> serialize		3069182	0					
ANR	3069931	PtrMemberAccess	dc_ssock -> serialize		3069182	0					
ANR	3069932	Identifier	dc_ssock		3069182	0					
ANR	3069933	Identifier	serialize		3069182	1					
ANR	3069934	ArgumentList	ptmp		3069182	1					
ANR	3069935	Argument	ptmp		3069182	0					
ANR	3069936	Identifier	ptmp		3069182	0					
ANR	3069937	ExpressionStatement	dc_ssock -> set_inheritable ( FALSE )	9193:4:282350:282382	3069182	2	True				
ANR	3069938	CallExpression	dc_ssock -> set_inheritable ( FALSE )		3069182	0					
ANR	3069939	Callee	dc_ssock -> set_inheritable		3069182	0					
ANR	3069940	PtrMemberAccess	dc_ssock -> set_inheritable		3069182	0					
ANR	3069941	Identifier	dc_ssock		3069182	0					
ANR	3069942	Identifier	set_inheritable		3069182	1					
ANR	3069943	ArgumentList	FALSE		3069182	1					
ANR	3069944	Argument	FALSE		3069182	0					
ANR	3069945	Identifier	FALSE		3069182	0					
ANR	3069946	ExpressionStatement	ptmp = inherit_list . next ( )	9196:3:282393:282417	3069182	1	True				
ANR	3069947	AssignmentExpression	ptmp = inherit_list . next ( )		3069182	0		=			
ANR	3069948	Identifier	ptmp		3069182	0					
ANR	3069949	CallExpression	inherit_list . next ( )		3069182	1					
ANR	3069950	Callee	inherit_list . next		3069182	0					
ANR	3069951	MemberAccess	inherit_list . next		3069182	0					
ANR	3069952	Identifier	inherit_list		3069182	0					
ANR	3069953	Identifier	next		3069182	1					
ANR	3069954	ArgumentList			3069182	1					
ANR	3069955	IdentifierDeclStatement	const char * privEnvName = EnvGetName ( ENV_PRIVATE ) ;	9206:1:282678:282729	3069182	14	True				
ANR	3069956	IdentifierDecl	* privEnvName = EnvGetName ( ENV_PRIVATE )		3069182	0					
ANR	3069957	IdentifierDeclType	const char *		3069182	0					
ANR	3069958	Identifier	privEnvName		3069182	1					
ANR	3069959	AssignmentExpression	* privEnvName = EnvGetName ( ENV_PRIVATE )		3069182	2		=			
ANR	3069960	Identifier	privEnvName		3069182	0					
ANR	3069961	CallExpression	EnvGetName ( ENV_PRIVATE )		3069182	1					
ANR	3069962	Callee	EnvGetName		3069182	0					
ANR	3069963	Identifier	EnvGetName		3069182	0					
ANR	3069964	ArgumentList	ENV_PRIVATE		3069182	1					
ANR	3069965	Argument	ENV_PRIVATE		3069182	0					
ANR	3069966	Identifier	ENV_PRIVATE		3069182	0					
ANR	3069967	IdentifierDeclStatement	const char * privTmp = GetEnv ( privEnvName ) ;	9207:1:282732:282775	3069182	15	True				
ANR	3069968	IdentifierDecl	* privTmp = GetEnv ( privEnvName )		3069182	0					
ANR	3069969	IdentifierDeclType	const char *		3069182	0					
ANR	3069970	Identifier	privTmp		3069182	1					
ANR	3069971	AssignmentExpression	* privTmp = GetEnv ( privEnvName )		3069182	2		=			
ANR	3069972	Identifier	privTmp		3069182	0					
ANR	3069973	CallExpression	GetEnv ( privEnvName )		3069182	1					
ANR	3069974	Callee	GetEnv		3069182	0					
ANR	3069975	Identifier	GetEnv		3069182	0					
ANR	3069976	ArgumentList	privEnvName		3069182	1					
ANR	3069977	Argument	privEnvName		3069182	0					
ANR	3069978	Identifier	privEnvName		3069182	0					
ANR	3069979	IfStatement	if ( privTmp != NULL )		3069182	16					
ANR	3069980	Condition	privTmp != NULL	9208:6:282783:282797	3069182	0	True				
ANR	3069981	EqualityExpression	privTmp != NULL		3069182	0		!=			
ANR	3069982	Identifier	privTmp		3069182	0					
ANR	3069983	Identifier	NULL		3069182	1					
ANR	3069984	CompoundStatement		177:24:5683:5683	3069182	1					
ANR	3069985	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Processing %s from parent\\n"" , privEnvName )"	9209:2:282805:282873	3069182	0	True				
ANR	3069986	CallExpression	"dprintf ( D_DAEMONCORE , ""Processing %s from parent\\n"" , privEnvName )"		3069182	0					
ANR	3069987	Callee	dprintf		3069182	0					
ANR	3069988	Identifier	dprintf		3069182	0					
ANR	3069989	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3069990	Argument	D_DAEMONCORE		3069182	0					
ANR	3069991	Identifier	D_DAEMONCORE		3069182	0					
ANR	3069992	Argument	"""Processing %s from parent\\n"""		3069182	1					
ANR	3069993	PrimaryExpression	"""Processing %s from parent\\n"""		3069182	0					
ANR	3069994	Argument	privEnvName		3069182	2					
ANR	3069995	Identifier	privEnvName		3069182	0					
ANR	3069996	IfStatement	if ( ! privTmp )		3069182	17					
ANR	3069997	Condition	! privTmp	9211:4:282882:282889	3069182	0	True				
ANR	3069998	UnaryOperationExpression	! privTmp		3069182	0					
ANR	3069999	UnaryOperator	!		3069182	0					
ANR	3070000	Identifier	privTmp		3069182	1					
ANR	3070001	CompoundStatement		181:1:5775:5775	3069182	1					
ANR	3070002	ReturnStatement	return ;	9213:2:282897:282903	3069182	0	True				
ANR	3070003	IdentifierDeclStatement	"StringList private_list ( privTmp , "" "" ) ;"	9216:1:282911:282948	3069182	18	True				
ANR	3070004	IdentifierDecl	"private_list ( privTmp , "" "" )"		3069182	0					
ANR	3070005	IdentifierDeclType	StringList		3069182	0					
ANR	3070006	Identifier	private_list		3069182	1					
ANR	3070007	Expression	"privTmp , "" """		3069182	2					
ANR	3070008	Identifier	privTmp		3069182	0					
ANR	3070009	PrimaryExpression	""" """		3069182	1					
ANR	3070010	ExpressionStatement	UnsetEnv ( privEnvName )	9217:1:282951:282974	3069182	19	True				
ANR	3070011	CallExpression	UnsetEnv ( privEnvName )		3069182	0					
ANR	3070012	Callee	UnsetEnv		3069182	0					
ANR	3070013	Identifier	UnsetEnv		3069182	0					
ANR	3070014	ArgumentList	privEnvName		3069182	1					
ANR	3070015	Argument	privEnvName		3069182	0					
ANR	3070016	Identifier	privEnvName		3069182	0					
ANR	3070017	ExpressionStatement	private_list . rewind ( )	9219:1:282978:282999	3069182	20	True				
ANR	3070018	CallExpression	private_list . rewind ( )		3069182	0					
ANR	3070019	Callee	private_list . rewind		3069182	0					
ANR	3070020	MemberAccess	private_list . rewind		3069182	0					
ANR	3070021	Identifier	private_list		3069182	0					
ANR	3070022	Identifier	rewind		3069182	1					
ANR	3070023	ArgumentList			3069182	1					
ANR	3070024	WhileStatement	while ( ( ptmp = private_list . next ( ) ) != NULL )		3069182	21					
ANR	3070025	Condition	( ptmp = private_list . next ( ) ) != NULL	9220:7:283008:283043	3069182	0	True				
ANR	3070026	EqualityExpression	( ptmp = private_list . next ( ) ) != NULL		3069182	0		!=			
ANR	3070027	AssignmentExpression	ptmp = private_list . next ( )		3069182	0		=			
ANR	3070028	Identifier	ptmp		3069182	0					
ANR	3070029	CallExpression	private_list . next ( )		3069182	1					
ANR	3070030	Callee	private_list . next		3069182	0					
ANR	3070031	MemberAccess	private_list . next		3069182	0					
ANR	3070032	Identifier	private_list		3069182	0					
ANR	3070033	Identifier	next		3069182	1					
ANR	3070034	ArgumentList			3069182	1					
ANR	3070035	Identifier	NULL		3069182	1					
ANR	3070036	CompoundStatement		190:1:5929:5929	3069182	1					
ANR	3070037	IfStatement	"if ( ptmp && strncmp ( ptmp , ""SessionKey:"" , 11 ) == 0 )"		3069182	0					
ANR	3070038	Condition	"ptmp && strncmp ( ptmp , ""SessionKey:"" , 11 ) == 0"	9222:6:283055:283095	3069182	0	True				
ANR	3070039	AndExpression	"ptmp && strncmp ( ptmp , ""SessionKey:"" , 11 ) == 0"		3069182	0		&&			
ANR	3070040	Identifier	ptmp		3069182	0					
ANR	3070041	EqualityExpression	"strncmp ( ptmp , ""SessionKey:"" , 11 ) == 0"		3069182	1		==			
ANR	3070042	CallExpression	"strncmp ( ptmp , ""SessionKey:"" , 11 )"		3069182	0					
ANR	3070043	Callee	strncmp		3069182	0					
ANR	3070044	Identifier	strncmp		3069182	0					
ANR	3070045	ArgumentList	ptmp		3069182	1					
ANR	3070046	Argument	ptmp		3069182	0					
ANR	3070047	Identifier	ptmp		3069182	0					
ANR	3070048	Argument	"""SessionKey:"""		3069182	1					
ANR	3070049	PrimaryExpression	"""SessionKey:"""		3069182	0					
ANR	3070050	Argument	11		3069182	2					
ANR	3070051	PrimaryExpression	11		3069182	0					
ANR	3070052	PrimaryExpression	0		3069182	1					
ANR	3070053	CompoundStatement		207:3:6432:6443	3069182	1					
ANR	3070054	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removing session key.\\n"" )"	9223:3:283104:283152	3069182	0	True				
ANR	3070055	CallExpression	"dprintf ( D_DAEMONCORE , ""Removing session key.\\n"" )"		3069182	0					
ANR	3070056	Callee	dprintf		3069182	0					
ANR	3070057	Identifier	dprintf		3069182	0					
ANR	3070058	ArgumentList	D_DAEMONCORE		3069182	1					
ANR	3070059	Argument	D_DAEMONCORE		3069182	0					
ANR	3070060	Identifier	D_DAEMONCORE		3069182	0					
ANR	3070061	Argument	"""Removing session key.\\n"""		3069182	1					
ANR	3070062	PrimaryExpression	"""Removing session key.\\n"""		3069182	0					
ANR	3070063	IdentifierDeclStatement	ClaimIdParser claimid ( ptmp + 11 ) ;	9224:3:283157:283187	3069182	1	True				
ANR	3070064	IdentifierDecl	claimid ( ptmp + 11 )		3069182	0					
ANR	3070065	IdentifierDeclType	ClaimIdParser		3069182	0					
ANR	3070066	Identifier	claimid		3069182	1					
ANR	3070067	AdditiveExpression	ptmp + 11		3069182	2		+			
ANR	3070068	Identifier	ptmp		3069182	0					
ANR	3070069	PrimaryExpression	11		3069182	1					
ANR	3070070	IdentifierDeclStatement	"bool rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , claimid . secSessionId ( ) , claimid . secSessionKey ( ) , claimid . secSessionInfo ( ) , CONDOR_PARENT_FQU , NULL , 0 ) ;"	9225:3:283192:283389	3069182	2	True				
ANR	3070071	IdentifierDecl	"rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , claimid . secSessionId ( ) , claimid . secSessionKey ( ) , claimid . secSessionInfo ( ) , CONDOR_PARENT_FQU , NULL , 0 )"		3069182	0					
ANR	3070072	IdentifierDeclType	bool		3069182	0					
ANR	3070073	Identifier	rc		3069182	1					
ANR	3070074	AssignmentExpression	"rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , claimid . secSessionId ( ) , claimid . secSessionKey ( ) , claimid . secSessionInfo ( ) , CONDOR_PARENT_FQU , NULL , 0 )"		3069182	2		=			
ANR	3070075	Identifier	rc		3069182	0					
ANR	3070076	CallExpression	"getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , claimid . secSessionId ( ) , claimid . secSessionKey ( ) , claimid . secSessionInfo ( ) , CONDOR_PARENT_FQU , NULL , 0 )"		3069182	1					
ANR	3070077	Callee	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		3069182	0					
ANR	3070078	PtrMemberAccess	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		3069182	0					
ANR	3070079	CallExpression	getSecMan ( )		3069182	0					
ANR	3070080	Callee	getSecMan		3069182	0					
ANR	3070081	Identifier	getSecMan		3069182	0					
ANR	3070082	ArgumentList			3069182	1					
ANR	3070083	Identifier	CreateNonNegotiatedSecuritySession		3069182	1					
ANR	3070084	ArgumentList	DAEMON		3069182	1					
ANR	3070085	Argument	DAEMON		3069182	0					
ANR	3070086	Identifier	DAEMON		3069182	0					
ANR	3070087	Argument	claimid . secSessionId ( )		3069182	1					
ANR	3070088	CallExpression	claimid . secSessionId ( )		3069182	0					
ANR	3070089	Callee	claimid . secSessionId		3069182	0					
ANR	3070090	MemberAccess	claimid . secSessionId		3069182	0					
ANR	3070091	Identifier	claimid		3069182	0					
ANR	3070092	Identifier	secSessionId		3069182	1					
ANR	3070093	ArgumentList			3069182	1					
ANR	3070094	Argument	claimid . secSessionKey ( )		3069182	2					
ANR	3070095	CallExpression	claimid . secSessionKey ( )		3069182	0					
ANR	3070096	Callee	claimid . secSessionKey		3069182	0					
ANR	3070097	MemberAccess	claimid . secSessionKey		3069182	0					
ANR	3070098	Identifier	claimid		3069182	0					
ANR	3070099	Identifier	secSessionKey		3069182	1					
ANR	3070100	ArgumentList			3069182	1					
ANR	3070101	Argument	claimid . secSessionInfo ( )		3069182	3					
ANR	3070102	CallExpression	claimid . secSessionInfo ( )		3069182	0					
ANR	3070103	Callee	claimid . secSessionInfo		3069182	0					
ANR	3070104	MemberAccess	claimid . secSessionInfo		3069182	0					
ANR	3070105	Identifier	claimid		3069182	0					
ANR	3070106	Identifier	secSessionInfo		3069182	1					
ANR	3070107	ArgumentList			3069182	1					
ANR	3070108	Argument	CONDOR_PARENT_FQU		3069182	4					
ANR	3070109	Identifier	CONDOR_PARENT_FQU		3069182	0					
ANR	3070110	Argument	NULL		3069182	5					
ANR	3070111	Identifier	NULL		3069182	0					
ANR	3070112	Argument	0		3069182	6					
ANR	3070113	PrimaryExpression	0		3069182	0					
ANR	3070114	IfStatement	if ( ! rc )		3069182	3					
ANR	3070115	Condition	! rc	9233:6:283397:283399	3069182	0	True				
ANR	3070116	UnaryOperationExpression	! rc		3069182	0					
ANR	3070117	UnaryOperator	!		3069182	0					
ANR	3070118	Identifier	rc		3069182	1					
ANR	3070119	CompoundStatement		203:3:6287:6287	3069182	1					
ANR	3070120	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error: Failed to recreate security session in child daemon.\\n"" )"	9235:4:283411:283493	3069182	0	True				
ANR	3070121	CallExpression	"dprintf ( D_ALWAYS , ""Error: Failed to recreate security session in child daemon.\\n"" )"		3069182	0					
ANR	3070122	Callee	dprintf		3069182	0					
ANR	3070123	Identifier	dprintf		3069182	0					
ANR	3070124	ArgumentList	D_ALWAYS		3069182	1					
ANR	3070125	Argument	D_ALWAYS		3069182	0					
ANR	3070126	Identifier	D_ALWAYS		3069182	0					
ANR	3070127	Argument	"""Error: Failed to recreate security session in child daemon.\\n"""		3069182	1					
ANR	3070128	PrimaryExpression	"""Error: Failed to recreate security session in child daemon.\\n"""		3069182	0					
ANR	3070129	IdentifierDeclStatement	IpVerify * ipv = getSecMan ( ) -> getIpVerify ( ) ;	9237:3:283503:283545	3069182	4	True				
ANR	3070130	IdentifierDecl	* ipv = getSecMan ( ) -> getIpVerify ( )		3069182	0					
ANR	3070131	IdentifierDeclType	IpVerify *		3069182	0					
ANR	3070132	Identifier	ipv		3069182	1					
ANR	3070133	AssignmentExpression	* ipv = getSecMan ( ) -> getIpVerify ( )		3069182	2		=			
ANR	3070134	Identifier	ipv		3069182	0					
ANR	3070135	CallExpression	getSecMan ( ) -> getIpVerify ( )		3069182	1					
ANR	3070136	Callee	getSecMan ( ) -> getIpVerify		3069182	0					
ANR	3070137	PtrMemberAccess	getSecMan ( ) -> getIpVerify		3069182	0					
ANR	3070138	CallExpression	getSecMan ( )		3069182	0					
ANR	3070139	Callee	getSecMan		3069182	0					
ANR	3070140	Identifier	getSecMan		3069182	0					
ANR	3070141	ArgumentList			3069182	1					
ANR	3070142	Identifier	getIpVerify		3069182	1					
ANR	3070143	ArgumentList			3069182	1					
ANR	3070144	IdentifierDeclStatement	MyString id ;	9238:3:283550:283561	3069182	5	True				
ANR	3070145	IdentifierDecl	id		3069182	0					
ANR	3070146	IdentifierDeclType	MyString		3069182	0					
ANR	3070147	Identifier	id		3069182	1					
ANR	3070148	ExpressionStatement	"id . sprintf ( ""%s"" , CONDOR_PARENT_FQU )"	9239:3:283566:283601	3069182	6	True				
ANR	3070149	CallExpression	"id . sprintf ( ""%s"" , CONDOR_PARENT_FQU )"		3069182	0					
ANR	3070150	Callee	id . sprintf		3069182	0					
ANR	3070151	MemberAccess	id . sprintf		3069182	0					
ANR	3070152	Identifier	id		3069182	0					
ANR	3070153	Identifier	sprintf		3069182	1					
ANR	3070154	ArgumentList	"""%s"""		3069182	1					
ANR	3070155	Argument	"""%s"""		3069182	0					
ANR	3070156	PrimaryExpression	"""%s"""		3069182	0					
ANR	3070157	Argument	CONDOR_PARENT_FQU		3069182	1					
ANR	3070158	Identifier	CONDOR_PARENT_FQU		3069182	0					
ANR	3070159	ExpressionStatement	"ipv -> PunchHole ( DAEMON , id )"	9240:3:283606:283632	3069182	7	True				
ANR	3070160	CallExpression	"ipv -> PunchHole ( DAEMON , id )"		3069182	0					
ANR	3070161	Callee	ipv -> PunchHole		3069182	0					
ANR	3070162	PtrMemberAccess	ipv -> PunchHole		3069182	0					
ANR	3070163	Identifier	ipv		3069182	0					
ANR	3070164	Identifier	PunchHole		3069182	1					
ANR	3070165	ArgumentList	DAEMON		3069182	1					
ANR	3070166	Argument	DAEMON		3069182	0					
ANR	3070167	Identifier	DAEMON		3069182	0					
ANR	3070168	Argument	id		3069182	1					
ANR	3070169	Identifier	id		3069182	0					
ANR	3070170	ReturnType	void		3069182	1					
ANR	3070171	Identifier	DaemonCore :: Inherit		3069182	2					
ANR	3070172	ParameterList			3069182	3					
ANR	3070173	CFGEntryNode	ENTRY		3069182		True				
ANR	3070174	CFGExitNode	EXIT		3069182		True				
ANR	3070175	Symbol	ENV_INHERIT		3069182						
ANR	3070176	Symbol	watch_ppid		3069182						
ANR	3070177	Symbol	pidtmp -> pipeEnd		3069182						
ANR	3070178	Symbol	claimid . secSessionInfo		3069182						
ANR	3070179	Symbol	numInheritedSocks		3069182						
ANR	3070180	Symbol	claimid		3069182						
ANR	3070181	Symbol	* getSecMan		3069182						
ANR	3070182	Symbol	claimid . secSessionKey		3069182						
ANR	3070183	Symbol	ERROR_ACCESS_DENIED		3069182						
ANR	3070184	Symbol	strncmp		3069182						
ANR	3070185	Symbol	SYNCHRONIZE		3069182						
ANR	3070186	Symbol	ptmp		3069182						
ANR	3070187	Symbol	inherit_list . next		3069182						
ANR	3070188	Symbol	tmp		3069182						
ANR	3070189	Symbol	CONDOR_PARENT_FQU		3069182						
ANR	3070190	Symbol	id		3069182						
ANR	3070191	Symbol	m_wants_dc_udp_self		3069182						
ANR	3070192	Symbol	already_inherited		3069182						
ANR	3070193	Symbol	strcmp		3069182						
ANR	3070194	Symbol	NULL		3069182						
ANR	3070195	Symbol	pidtmp -> hProcess		3069182						
ANR	3070196	Symbol	privTmp		3069182						
ANR	3070197	Symbol	TRUE		3069182						
ANR	3070198	Symbol	* pidtmp		3069182						
ANR	3070199	Symbol	getSecMan		3069182						
ANR	3070200	Symbol	ipv		3069182						
ANR	3070201	Symbol	ppid		3069182						
ANR	3070202	Symbol	rc		3069182						
ANR	3070203	Symbol	pidtmp -> reaper_id		3069182						
ANR	3070204	Symbol	envName		3069182						
ANR	3070205	Symbol	GetLastError		3069182						
ANR	3070206	Symbol	true		3069182						
ANR	3070207	Symbol	pidtmp -> sinful_string		3069182						
ANR	3070208	Symbol	* inheritedSocks		3069182						
ANR	3070209	Symbol	pidtmp		3069182						
ANR	3070210	Symbol	GetEnv		3069182						
ANR	3070211	Symbol	DAEMON		3069182						
ANR	3070212	Symbol	pidtmp -> is_local		3069182						
ANR	3070213	Symbol	inheritbuf		3069182						
ANR	3070214	Symbol	* pidTable		3069182						
ANR	3070215	Symbol	pidtmp -> was_not_responding		3069182						
ANR	3070216	Symbol	pidtmp -> deallocate		3069182						
ANR	3070217	Symbol	EnvGetName		3069182						
ANR	3070218	Symbol	inheritedSocks		3069182						
ANR	3070219	Symbol	dc_ssock		3069182						
ANR	3070220	Symbol	pidtmp -> hung_tid		3069182						
ANR	3070221	Symbol	atoi		3069182						
ANR	3070222	Symbol	pidTable		3069182						
ANR	3070223	Symbol	dc_rsock		3069182						
ANR	3070224	Symbol	claimid . secSessionId		3069182						
ANR	3070225	Symbol	private_list . next		3069182						
ANR	3070226	Symbol	D_DAEMONCORE		3069182						
ANR	3070227	Symbol	pidTable -> insert		3069182						
ANR	3070228	Symbol	* numInheritedSocks		3069182						
ANR	3070229	Symbol	false		3069182						
ANR	3070230	Symbol	D_ALWAYS		3069182						
ANR	3070231	Symbol	inherit_list		3069182						
ANR	3070232	Symbol	MAX_SOCKS_INHERITED		3069182						
ANR	3070233	Symbol	insert_result		3069182						
ANR	3070234	Symbol	privEnvName		3069182						
ANR	3070235	Symbol	getSecMan ( ) -> getIpVerify		3069182						
ANR	3070236	Symbol	pidtmp -> pid		3069182						
ANR	3070237	Symbol	ENV_PRIVATE		3069182						
ANR	3070238	Symbol	m_shared_port_endpoint		3069182						
ANR	3070239	Symbol	pidtmp -> hThread		3069182						
ANR	3070240	Symbol	FALSE		3069182						
ANR	3070241	Symbol	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		3069182						
ANR	3070242	Symbol	strdup		3069182						
ANR	3070243	Symbol	PROCESS_QUERY_INFORMATION		3069182						
ANR	3070244	Symbol	private_list		3069182						
ANR	3070245	Symbol	* ptmp		3069182						
ANR	3070246	Symbol	pidtmp -> parent_is_local		3069182						
ANR	3070247	Function	DaemonCore :: SetDaemonSockName	9246:0:283651:283746							
ANR	3070248	FunctionDef	DaemonCore :: SetDaemonSockName (char const * sock_name)		3070247	0					
ANR	3070249	CompoundStatement		9248:0:283711:283746	3070247	0					
ANR	3070250	ExpressionStatement	m_daemon_sock_name = sock_name	9249:1:283714:283744	3070247	0	True				
ANR	3070251	AssignmentExpression	m_daemon_sock_name = sock_name		3070247	0		=			
ANR	3070252	Identifier	m_daemon_sock_name		3070247	0					
ANR	3070253	Identifier	sock_name		3070247	1					
ANR	3070254	ReturnType	void		3070247	1					
ANR	3070255	Identifier	DaemonCore :: SetDaemonSockName		3070247	2					
ANR	3070256	ParameterList	char const * sock_name		3070247	3					
ANR	3070257	Parameter	char const * sock_name	9247:31:283687:283707	3070247	0	True				
ANR	3070258	ParameterType	char const *		3070247	0					
ANR	3070259	Identifier	sock_name		3070247	1					
ANR	3070260	CFGEntryNode	ENTRY		3070247		True				
ANR	3070261	CFGExitNode	EXIT		3070247		True				
ANR	3070262	Symbol	m_daemon_sock_name		3070247						
ANR	3070263	Symbol	sock_name		3070247						
ANR	3070264	Function	DaemonCore :: InitDCCommandSocket	9252:0:283749:288173							
ANR	3070265	FunctionDef	DaemonCore :: InitDCCommandSocket (int command_port)		3070264	0					
ANR	3070266	CompoundStatement		9254:0:283806:288173	3070264	0					
ANR	3070267	IfStatement	if ( command_port == 0 )		3070264	0					
ANR	3070268	Condition	command_port == 0	9255:5:283813:283829	3070264	0	True				
ANR	3070269	EqualityExpression	command_port == 0		3070264	0		==			
ANR	3070270	Identifier	command_port		3070264	0					
ANR	3070271	PrimaryExpression	0		3070264	1					
ANR	3070272	CompoundStatement		2:25:26:26	3070264	1					
ANR	3070273	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: No command port requested.\\n"" )"	9257:2:283878:283941	3070264	0	True				
ANR	3070274	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: No command port requested.\\n"" )"		3070264	0					
ANR	3070275	Callee	dprintf		3070264	0					
ANR	3070276	Identifier	dprintf		3070264	0					
ANR	3070277	ArgumentList	D_ALWAYS		3070264	1					
ANR	3070278	Argument	D_ALWAYS		3070264	0					
ANR	3070279	Identifier	D_ALWAYS		3070264	0					
ANR	3070280	Argument	"""DaemonCore: No command port requested.\\n"""		3070264	1					
ANR	3070281	PrimaryExpression	"""DaemonCore: No command port requested.\\n"""		3070264	0					
ANR	3070282	ReturnStatement	return ;	9258:2:283945:283951	3070264	1	True				
ANR	3070283	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Setting up command socket\\n"" )"	9261:1:283958:284012	3070264	1	True				
ANR	3070284	CallExpression	"dprintf ( D_DAEMONCORE , ""Setting up command socket\\n"" )"		3070264	0					
ANR	3070285	Callee	dprintf		3070264	0					
ANR	3070286	Identifier	dprintf		3070264	0					
ANR	3070287	ArgumentList	D_DAEMONCORE		3070264	1					
ANR	3070288	Argument	D_DAEMONCORE		3070264	0					
ANR	3070289	Identifier	D_DAEMONCORE		3070264	0					
ANR	3070290	Argument	"""Setting up command socket\\n"""		3070264	1					
ANR	3070291	PrimaryExpression	"""Setting up command socket\\n"""		3070264	0					
ANR	3070292	ExpressionStatement	Inherit ( )	9264:1:284072:284081	3070264	2	True				
ANR	3070293	CallExpression	Inherit ( )		3070264	0					
ANR	3070294	Callee	Inherit		3070264	0					
ANR	3070295	Identifier	Inherit		3070264	0					
ANR	3070296	ArgumentList			3070264	1					
ANR	3070297	ExpressionStatement	InitSharedPort ( true )	9267:1:284143:284163	3070264	3	True				
ANR	3070298	CallExpression	InitSharedPort ( true )		3070264	0					
ANR	3070299	Callee	InitSharedPort		3070264	0					
ANR	3070300	Identifier	InitSharedPort		3070264	0					
ANR	3070301	ArgumentList	true		3070264	1					
ANR	3070302	Argument	true		3070264	0					
ANR	3070303	Identifier	true		3070264	0					
ANR	3070304	IfStatement	if ( ! m_shared_port_endpoint && ( dc_rsock == NULL || ( m_wants_dc_udp_self && dc_ssock == NULL ) ) )		3070264	4					
ANR	3070305	Condition	! m_shared_port_endpoint && ( dc_rsock == NULL || ( m_wants_dc_udp_self && dc_ssock == NULL ) )	9271:5:284281:284370	3070264	0	True				
ANR	3070306	AndExpression	! m_shared_port_endpoint && ( dc_rsock == NULL || ( m_wants_dc_udp_self && dc_ssock == NULL ) )		3070264	0		&&			
ANR	3070307	UnaryOperationExpression	! m_shared_port_endpoint		3070264	0					
ANR	3070308	UnaryOperator	!		3070264	0					
ANR	3070309	Identifier	m_shared_port_endpoint		3070264	1					
ANR	3070310	OrExpression	dc_rsock == NULL || ( m_wants_dc_udp_self && dc_ssock == NULL )		3070264	1		||			
ANR	3070311	EqualityExpression	dc_rsock == NULL		3070264	0		==			
ANR	3070312	Identifier	dc_rsock		3070264	0					
ANR	3070313	Identifier	NULL		3070264	1					
ANR	3070314	AndExpression	m_wants_dc_udp_self && dc_ssock == NULL		3070264	1		&&			
ANR	3070315	Identifier	m_wants_dc_udp_self		3070264	0					
ANR	3070316	EqualityExpression	dc_ssock == NULL		3070264	1		==			
ANR	3070317	Identifier	dc_ssock		3070264	0					
ANR	3070318	Identifier	NULL		3070264	1					
ANR	3070319	CompoundStatement		18:98:567:567	3070264	1					
ANR	3070320	IfStatement	if ( ! dc_rsock )		3070264	0					
ANR	3070321	Condition	! dc_rsock	9272:6:284382:284390	3070264	0	True				
ANR	3070322	UnaryOperationExpression	! dc_rsock		3070264	0					
ANR	3070323	UnaryOperator	!		3070264	0					
ANR	3070324	Identifier	dc_rsock		3070264	1					
ANR	3070325	CompoundStatement		19:18:587:587	3070264	1					
ANR	3070326	Statement	dc_rsock	9273:3:284399:284406	3070264	0	True				
ANR	3070327	Statement	=	9273:12:284408:284408	3070264	1	True				
ANR	3070328	Statement	new	9273:14:284410:284412	3070264	2	True				
ANR	3070329	ExpressionStatement	ReliSock	9273:18:284414:284422	3070264	3	True				
ANR	3070330	Identifier	ReliSock		3070264	0					
ANR	3070331	IfStatement	if ( ! dc_rsock )		3070264	1					
ANR	3070332	Condition	! dc_rsock	9275:6:284434:284442	3070264	0	True				
ANR	3070333	UnaryOperationExpression	! dc_rsock		3070264	0					
ANR	3070334	UnaryOperator	!		3070264	0					
ANR	3070335	Identifier	dc_rsock		3070264	1					
ANR	3070336	CompoundStatement		22:18:639:639	3070264	1					
ANR	3070337	ExpressionStatement	"EXCEPT ( ""Unable to create command Relisock"" )"	9276:3:284451:284496	3070264	0	True				
ANR	3070338	CallExpression	"EXCEPT ( ""Unable to create command Relisock"" )"		3070264	0					
ANR	3070339	Callee	EXCEPT		3070264	0					
ANR	3070340	Identifier	EXCEPT		3070264	0					
ANR	3070341	ArgumentList	"""Unable to create command Relisock"""		3070264	1					
ANR	3070342	Argument	"""Unable to create command Relisock"""		3070264	0					
ANR	3070343	PrimaryExpression	"""Unable to create command Relisock"""		3070264	0					
ANR	3070344	IfStatement	if ( m_wants_dc_udp_self )		3070264	2					
ANR	3070345	Condition	m_wants_dc_udp_self	9278:6:284508:284526	3070264	0	True				
ANR	3070346	Identifier	m_wants_dc_udp_self		3070264	0					
ANR	3070347	CompoundStatement		25:27:722:722	3070264	1					
ANR	3070348	IfStatement	if ( ! dc_ssock )		3070264	0					
ANR	3070349	Condition	! dc_ssock	9279:7:284538:284546	3070264	0	True				
ANR	3070350	UnaryOperationExpression	! dc_ssock		3070264	0					
ANR	3070351	UnaryOperator	!		3070264	0					
ANR	3070352	Identifier	dc_ssock		3070264	1					
ANR	3070353	CompoundStatement		26:19:743:743	3070264	1					
ANR	3070354	Statement	dc_ssock	9280:4:284556:284563	3070264	0	True				
ANR	3070355	Statement	=	9280:13:284565:284565	3070264	1	True				
ANR	3070356	Statement	new	9280:15:284567:284569	3070264	2	True				
ANR	3070357	ExpressionStatement	SafeSock	9280:19:284571:284579	3070264	3	True				
ANR	3070358	Identifier	SafeSock		3070264	0					
ANR	3070359	IfStatement	if ( ! dc_ssock )		3070264	1					
ANR	3070360	Condition	! dc_ssock	9282:7:284593:284601	3070264	0	True				
ANR	3070361	UnaryOperationExpression	! dc_ssock		3070264	0					
ANR	3070362	UnaryOperator	!		3070264	0					
ANR	3070363	Identifier	dc_ssock		3070264	1					
ANR	3070364	CompoundStatement		29:19:798:798	3070264	1					
ANR	3070365	ExpressionStatement	"EXCEPT ( ""Unable to create command SafeSock"" )"	9283:4:284611:284656	3070264	0	True				
ANR	3070366	CallExpression	"EXCEPT ( ""Unable to create command SafeSock"" )"		3070264	0					
ANR	3070367	Callee	EXCEPT		3070264	0					
ANR	3070368	Identifier	EXCEPT		3070264	0					
ANR	3070369	ArgumentList	"""Unable to create command SafeSock"""		3070264	1					
ANR	3070370	Argument	"""Unable to create command SafeSock"""		3070264	0					
ANR	3070371	PrimaryExpression	"""Unable to create command SafeSock"""		3070264	0					
ANR	3070372	ElseStatement	else		3070264	0					
ANR	3070373	CompoundStatement		33:7:867:867	3070264	0					
ANR	3070374	ExpressionStatement	ASSERT ( dc_ssock == NULL )	9287:3:284679:284703	3070264	0	True				
ANR	3070375	CallExpression	ASSERT ( dc_ssock == NULL )		3070264	0					
ANR	3070376	Callee	ASSERT		3070264	0					
ANR	3070377	Identifier	ASSERT		3070264	0					
ANR	3070378	ArgumentList	dc_ssock == NULL		3070264	1					
ANR	3070379	Argument	dc_ssock == NULL		3070264	0					
ANR	3070380	EqualityExpression	dc_ssock == NULL		3070264	0		==			
ANR	3070381	Identifier	dc_ssock		3070264	0					
ANR	3070382	Identifier	NULL		3070264	1					
ANR	3070383	ExpressionStatement	"InitCommandSockets ( command_port , dc_rsock , dc_ssock , true )"	9290:2:284776:284834	3070264	3	True				
ANR	3070384	CallExpression	"InitCommandSockets ( command_port , dc_rsock , dc_ssock , true )"		3070264	0					
ANR	3070385	Callee	InitCommandSockets		3070264	0					
ANR	3070386	Identifier	InitCommandSockets		3070264	0					
ANR	3070387	ArgumentList	command_port		3070264	1					
ANR	3070388	Argument	command_port		3070264	0					
ANR	3070389	Identifier	command_port		3070264	0					
ANR	3070390	Argument	dc_rsock		3070264	1					
ANR	3070391	Identifier	dc_rsock		3070264	0					
ANR	3070392	Argument	dc_ssock		3070264	2					
ANR	3070393	Identifier	dc_ssock		3070264	0					
ANR	3070394	Argument	true		3070264	3					
ANR	3070395	Identifier	true		3070264	0					
ANR	3070396	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) )		3070264	5					
ANR	3070397	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR )	9296:5:285009:285059	3070264	0	True				
ANR	3070398	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR )		3070264	0					
ANR	3070399	Callee	get_mySubSystem ( ) -> isType		3070264	0					
ANR	3070400	PtrMemberAccess	get_mySubSystem ( ) -> isType		3070264	0					
ANR	3070401	CallExpression	get_mySubSystem ( )		3070264	0					
ANR	3070402	Callee	get_mySubSystem		3070264	0					
ANR	3070403	Identifier	get_mySubSystem		3070264	0					
ANR	3070404	ArgumentList			3070264	1					
ANR	3070405	Identifier	isType		3070264	1					
ANR	3070406	ArgumentList	SUBSYSTEM_TYPE_COLLECTOR		3070264	1					
ANR	3070407	Argument	SUBSYSTEM_TYPE_COLLECTOR		3070264	0					
ANR	3070408	Identifier	SUBSYSTEM_TYPE_COLLECTOR		3070264	0					
ANR	3070409	CompoundStatement		47:2:1326:1338	3070264	1					
ANR	3070410	IdentifierDeclStatement	int desired_size ;	9297:2:285067:285083	3070264	0	True				
ANR	3070411	IdentifierDecl	desired_size		3070264	0					
ANR	3070412	IdentifierDeclType	int		3070264	0					
ANR	3070413	Identifier	desired_size		3070264	1					
ANR	3070414	IdentifierDeclStatement	MyString msg ;	9300:2:285133:285145	3070264	1	True				
ANR	3070415	IdentifierDecl	msg		3070264	0					
ANR	3070416	IdentifierDeclType	MyString		3070264	0					
ANR	3070417	Identifier	msg		3070264	1					
ANR	3070418	IfStatement	if ( dc_ssock )		3070264	2					
ANR	3070419	Condition	dc_ssock	9302:6:285154:285161	3070264	0	True				
ANR	3070420	Identifier	dc_ssock		3070264	0					
ANR	3070421	CompoundStatement		54:3:1547:1601	3070264	1					
ANR	3070422	ExpressionStatement	"desired_size = param_integer ( ""COLLECTOR_SOCKET_BUFSIZE"" , 10000 * 1024 , 1024 )"	9305:3:285262:285349	3070264	0	True				
ANR	3070423	AssignmentExpression	"desired_size = param_integer ( ""COLLECTOR_SOCKET_BUFSIZE"" , 10000 * 1024 , 1024 )"		3070264	0		=			
ANR	3070424	Identifier	desired_size		3070264	0					
ANR	3070425	CallExpression	"param_integer ( ""COLLECTOR_SOCKET_BUFSIZE"" , 10000 * 1024 , 1024 )"		3070264	1					
ANR	3070426	Callee	param_integer		3070264	0					
ANR	3070427	Identifier	param_integer		3070264	0					
ANR	3070428	ArgumentList	"""COLLECTOR_SOCKET_BUFSIZE"""		3070264	1					
ANR	3070429	Argument	"""COLLECTOR_SOCKET_BUFSIZE"""		3070264	0					
ANR	3070430	PrimaryExpression	"""COLLECTOR_SOCKET_BUFSIZE"""		3070264	0					
ANR	3070431	Argument	10000 * 1024		3070264	1					
ANR	3070432	MultiplicativeExpression	10000 * 1024		3070264	0		*			
ANR	3070433	PrimaryExpression	10000		3070264	0					
ANR	3070434	PrimaryExpression	1024		3070264	1					
ANR	3070435	Argument	1024		3070264	2					
ANR	3070436	PrimaryExpression	1024		3070264	0					
ANR	3070437	IdentifierDeclStatement	int final_udp = dc_ssock -> set_os_buffers ( desired_size ) ;	9307:3:285354:285408	3070264	1	True				
ANR	3070438	IdentifierDecl	final_udp = dc_ssock -> set_os_buffers ( desired_size )		3070264	0					
ANR	3070439	IdentifierDeclType	int		3070264	0					
ANR	3070440	Identifier	final_udp		3070264	1					
ANR	3070441	AssignmentExpression	final_udp = dc_ssock -> set_os_buffers ( desired_size )		3070264	2		=			
ANR	3070442	Identifier	final_udp		3070264	0					
ANR	3070443	CallExpression	dc_ssock -> set_os_buffers ( desired_size )		3070264	1					
ANR	3070444	Callee	dc_ssock -> set_os_buffers		3070264	0					
ANR	3070445	PtrMemberAccess	dc_ssock -> set_os_buffers		3070264	0					
ANR	3070446	Identifier	dc_ssock		3070264	0					
ANR	3070447	Identifier	set_os_buffers		3070264	1					
ANR	3070448	ArgumentList	desired_size		3070264	1					
ANR	3070449	Argument	desired_size		3070264	0					
ANR	3070450	Identifier	desired_size		3070264	0					
ANR	3070451	ExpressionStatement	msg += ( int ) ( final_udp / 1024 )	9308:3:285413:285443	3070264	2	True				
ANR	3070452	AssignmentExpression	msg += ( int ) ( final_udp / 1024 )		3070264	0		+=			
ANR	3070453	Identifier	msg		3070264	0					
ANR	3070454	CastExpression	( int ) ( final_udp / 1024 )		3070264	1					
ANR	3070455	CastTarget	int		3070264	0					
ANR	3070456	MultiplicativeExpression	final_udp / 1024		3070264	1		/			
ANR	3070457	Identifier	final_udp		3070264	0					
ANR	3070458	PrimaryExpression	1024		3070264	1					
ANR	3070459	ExpressionStatement	"msg += ""k (UDP), """	9309:3:285448:285466	3070264	3	True				
ANR	3070460	AssignmentExpression	"msg += ""k (UDP), """		3070264	0		+=			
ANR	3070461	Identifier	msg		3070264	0					
ANR	3070462	PrimaryExpression	"""k (UDP), """		3070264	1					
ANR	3070463	IfStatement	if ( dc_rsock )		3070264	3					
ANR	3070464	Condition	dc_rsock	9314:6:285614:285621	3070264	0	True				
ANR	3070465	Identifier	dc_rsock		3070264	0					
ANR	3070466	CompoundStatement		64:3:1918:1980	3070264	1					
ANR	3070467	ExpressionStatement	"desired_size = param_integer ( ""COLLECTOR_TCP_SOCKET_BUFSIZE"" , 128 * 1024 , 1024 )"	9315:3:285630:285720	3070264	0	True				
ANR	3070468	AssignmentExpression	"desired_size = param_integer ( ""COLLECTOR_TCP_SOCKET_BUFSIZE"" , 128 * 1024 , 1024 )"		3070264	0		=			
ANR	3070469	Identifier	desired_size		3070264	0					
ANR	3070470	CallExpression	"param_integer ( ""COLLECTOR_TCP_SOCKET_BUFSIZE"" , 128 * 1024 , 1024 )"		3070264	1					
ANR	3070471	Callee	param_integer		3070264	0					
ANR	3070472	Identifier	param_integer		3070264	0					
ANR	3070473	ArgumentList	"""COLLECTOR_TCP_SOCKET_BUFSIZE"""		3070264	1					
ANR	3070474	Argument	"""COLLECTOR_TCP_SOCKET_BUFSIZE"""		3070264	0					
ANR	3070475	PrimaryExpression	"""COLLECTOR_TCP_SOCKET_BUFSIZE"""		3070264	0					
ANR	3070476	Argument	128 * 1024		3070264	1					
ANR	3070477	MultiplicativeExpression	128 * 1024		3070264	0		*			
ANR	3070478	PrimaryExpression	128		3070264	0					
ANR	3070479	PrimaryExpression	1024		3070264	1					
ANR	3070480	Argument	1024		3070264	2					
ANR	3070481	PrimaryExpression	1024		3070264	0					
ANR	3070482	IdentifierDeclStatement	"int final_tcp = dc_rsock -> set_os_buffers ( desired_size , true ) ;"	9317:3:285725:285787	3070264	1	True				
ANR	3070483	IdentifierDecl	"final_tcp = dc_rsock -> set_os_buffers ( desired_size , true )"		3070264	0					
ANR	3070484	IdentifierDeclType	int		3070264	0					
ANR	3070485	Identifier	final_tcp		3070264	1					
ANR	3070486	AssignmentExpression	"final_tcp = dc_rsock -> set_os_buffers ( desired_size , true )"		3070264	2		=			
ANR	3070487	Identifier	final_tcp		3070264	0					
ANR	3070488	CallExpression	"dc_rsock -> set_os_buffers ( desired_size , true )"		3070264	1					
ANR	3070489	Callee	dc_rsock -> set_os_buffers		3070264	0					
ANR	3070490	PtrMemberAccess	dc_rsock -> set_os_buffers		3070264	0					
ANR	3070491	Identifier	dc_rsock		3070264	0					
ANR	3070492	Identifier	set_os_buffers		3070264	1					
ANR	3070493	ArgumentList	desired_size		3070264	1					
ANR	3070494	Argument	desired_size		3070264	0					
ANR	3070495	Identifier	desired_size		3070264	0					
ANR	3070496	Argument	true		3070264	1					
ANR	3070497	Identifier	true		3070264	0					
ANR	3070498	ExpressionStatement	msg += ( int ) ( final_tcp / 1024 )	9319:3:285793:285823	3070264	2	True				
ANR	3070499	AssignmentExpression	msg += ( int ) ( final_tcp / 1024 )		3070264	0		+=			
ANR	3070500	Identifier	msg		3070264	0					
ANR	3070501	CastExpression	( int ) ( final_tcp / 1024 )		3070264	1					
ANR	3070502	CastTarget	int		3070264	0					
ANR	3070503	MultiplicativeExpression	final_tcp / 1024		3070264	1		/			
ANR	3070504	Identifier	final_tcp		3070264	0					
ANR	3070505	PrimaryExpression	1024		3070264	1					
ANR	3070506	ExpressionStatement	"msg += ""k (TCP)"""	9320:3:285828:285844	3070264	3	True				
ANR	3070507	AssignmentExpression	"msg += ""k (TCP)"""		3070264	0		+=			
ANR	3070508	Identifier	msg		3070264	0					
ANR	3070509	PrimaryExpression	"""k (TCP)"""		3070264	1					
ANR	3070510	IfStatement	if ( ! msg . IsEmpty ( ) )		3070264	4					
ANR	3070511	Condition	! msg . IsEmpty ( )	9322:6:285856:285869	3070264	0	True				
ANR	3070512	UnaryOperationExpression	! msg . IsEmpty ( )		3070264	0					
ANR	3070513	UnaryOperator	!		3070264	0					
ANR	3070514	CallExpression	msg . IsEmpty ( )		3070264	1					
ANR	3070515	Callee	msg . IsEmpty		3070264	0					
ANR	3070516	MemberAccess	msg . IsEmpty		3070264	0					
ANR	3070517	Identifier	msg		3070264	0					
ANR	3070518	Identifier	IsEmpty		3070264	1					
ANR	3070519	ArgumentList			3070264	1					
ANR	3070520	CompoundStatement		69:23:2066:2066	3070264	1					
ANR	3070521	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Reset OS socket buffer size to %s\\n"" , msg . Value ( ) )"	9323:3:285878:285955	3070264	0	True				
ANR	3070522	CallExpression	"dprintf ( D_FULLDEBUG , ""Reset OS socket buffer size to %s\\n"" , msg . Value ( ) )"		3070264	0					
ANR	3070523	Callee	dprintf		3070264	0					
ANR	3070524	Identifier	dprintf		3070264	0					
ANR	3070525	ArgumentList	D_FULLDEBUG		3070264	1					
ANR	3070526	Argument	D_FULLDEBUG		3070264	0					
ANR	3070527	Identifier	D_FULLDEBUG		3070264	0					
ANR	3070528	Argument	"""Reset OS socket buffer size to %s\\n"""		3070264	1					
ANR	3070529	PrimaryExpression	"""Reset OS socket buffer size to %s\\n"""		3070264	0					
ANR	3070530	Argument	msg . Value ( )		3070264	2					
ANR	3070531	CallExpression	msg . Value ( )		3070264	0					
ANR	3070532	Callee	msg . Value		3070264	0					
ANR	3070533	MemberAccess	msg . Value		3070264	0					
ANR	3070534	Identifier	msg		3070264	0					
ANR	3070535	Identifier	Value		3070264	1					
ANR	3070536	ArgumentList			3070264	1					
ANR	3070537	IfStatement	if ( dc_rsock )		3070264	6					
ANR	3070538	Condition	dc_rsock	9332:5:286167:286174	3070264	0	True				
ANR	3070539	Identifier	dc_rsock		3070264	0					
ANR	3070540	CompoundStatement		79:16:2371:2371	3070264	1					
ANR	3070541	ExpressionStatement	Register_Command_Socket ( ( Stream * ) dc_rsock )	9333:2:286182:286226	3070264	0	True				
ANR	3070542	CallExpression	Register_Command_Socket ( ( Stream * ) dc_rsock )		3070264	0					
ANR	3070543	Callee	Register_Command_Socket		3070264	0					
ANR	3070544	Identifier	Register_Command_Socket		3070264	0					
ANR	3070545	ArgumentList	( Stream * ) dc_rsock		3070264	1					
ANR	3070546	Argument	( Stream * ) dc_rsock		3070264	0					
ANR	3070547	CastExpression	( Stream * ) dc_rsock		3070264	0					
ANR	3070548	CastTarget	Stream *		3070264	0					
ANR	3070549	Identifier	dc_rsock		3070264	1					
ANR	3070550	IfStatement	if ( dc_ssock )		3070264	7					
ANR	3070551	Condition	dc_ssock	9335:5:286236:286243	3070264	0	True				
ANR	3070552	Identifier	dc_ssock		3070264	0					
ANR	3070553	CompoundStatement		82:15:2439:2439	3070264	1					
ANR	3070554	ExpressionStatement	Register_Command_Socket ( ( Stream * ) dc_ssock )	9336:2:286250:286294	3070264	0	True				
ANR	3070555	CallExpression	Register_Command_Socket ( ( Stream * ) dc_ssock )		3070264	0					
ANR	3070556	Callee	Register_Command_Socket		3070264	0					
ANR	3070557	Identifier	Register_Command_Socket		3070264	0					
ANR	3070558	ArgumentList	( Stream * ) dc_ssock		3070264	1					
ANR	3070559	Argument	( Stream * ) dc_ssock		3070264	0					
ANR	3070560	CastExpression	( Stream * ) dc_ssock		3070264	0					
ANR	3070561	CastTarget	Stream *		3070264	0					
ANR	3070562	Identifier	dc_ssock		3070264	1					
ANR	3070563	IdentifierDeclStatement	char const * addr = publicNetworkIpAddr ( ) ;	9338:1:286300:286340	3070264	8	True				
ANR	3070564	IdentifierDecl	* addr = publicNetworkIpAddr ( )		3070264	0					
ANR	3070565	IdentifierDeclType	char const *		3070264	0					
ANR	3070566	Identifier	addr		3070264	1					
ANR	3070567	AssignmentExpression	* addr = publicNetworkIpAddr ( )		3070264	2		=			
ANR	3070568	Identifier	addr		3070264	0					
ANR	3070569	CallExpression	publicNetworkIpAddr ( )		3070264	1					
ANR	3070570	Callee	publicNetworkIpAddr		3070264	0					
ANR	3070571	Identifier	publicNetworkIpAddr		3070264	0					
ANR	3070572	ArgumentList			3070264	1					
ANR	3070573	IfStatement	if ( addr )		3070264	9					
ANR	3070574	Condition	addr	9339:5:286347:286350	3070264	0	True				
ANR	3070575	Identifier	addr		3070264	0					
ANR	3070576	CompoundStatement		86:12:2547:2547	3070264	1					
ANR	3070577	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: command socket at %s\\n"" , addr )"	9340:2:286358:286420	3070264	0	True				
ANR	3070578	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: command socket at %s\\n"" , addr )"		3070264	0					
ANR	3070579	Callee	dprintf		3070264	0					
ANR	3070580	Identifier	dprintf		3070264	0					
ANR	3070581	ArgumentList	D_ALWAYS		3070264	1					
ANR	3070582	Argument	D_ALWAYS		3070264	0					
ANR	3070583	Identifier	D_ALWAYS		3070264	0					
ANR	3070584	Argument	"""DaemonCore: command socket at %s\\n"""		3070264	1					
ANR	3070585	PrimaryExpression	"""DaemonCore: command socket at %s\\n"""		3070264	0					
ANR	3070586	Argument	addr		3070264	2					
ANR	3070587	Identifier	addr		3070264	0					
ANR	3070588	IdentifierDeclStatement	char const * priv_addr = privateNetworkIpAddr ( ) ;	9342:1:286426:286472	3070264	10	True				
ANR	3070589	IdentifierDecl	* priv_addr = privateNetworkIpAddr ( )		3070264	0					
ANR	3070590	IdentifierDeclType	char const *		3070264	0					
ANR	3070591	Identifier	priv_addr		3070264	1					
ANR	3070592	AssignmentExpression	* priv_addr = privateNetworkIpAddr ( )		3070264	2		=			
ANR	3070593	Identifier	priv_addr		3070264	0					
ANR	3070594	CallExpression	privateNetworkIpAddr ( )		3070264	1					
ANR	3070595	Callee	privateNetworkIpAddr		3070264	0					
ANR	3070596	Identifier	privateNetworkIpAddr		3070264	0					
ANR	3070597	ArgumentList			3070264	1					
ANR	3070598	IfStatement	if ( priv_addr )		3070264	11					
ANR	3070599	Condition	priv_addr	9343:5:286479:286487	3070264	0	True				
ANR	3070600	Identifier	priv_addr		3070264	0					
ANR	3070601	CompoundStatement		90:17:2684:2684	3070264	1					
ANR	3070602	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: private command socket at %s\\n"" , priv_addr )"	9344:2:286495:286570	3070264	0	True				
ANR	3070603	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: private command socket at %s\\n"" , priv_addr )"		3070264	0					
ANR	3070604	Callee	dprintf		3070264	0					
ANR	3070605	Identifier	dprintf		3070264	0					
ANR	3070606	ArgumentList	D_ALWAYS		3070264	1					
ANR	3070607	Argument	D_ALWAYS		3070264	0					
ANR	3070608	Identifier	D_ALWAYS		3070264	0					
ANR	3070609	Argument	"""DaemonCore: private command socket at %s\\n"""		3070264	1					
ANR	3070610	PrimaryExpression	"""DaemonCore: private command socket at %s\\n"""		3070264	0					
ANR	3070611	Argument	priv_addr		3070264	2					
ANR	3070612	Identifier	priv_addr		3070264	0					
ANR	3070613	IfStatement	if ( dc_rsock && m_shared_port_endpoint )		3070264	12					
ANR	3070614	Condition	dc_rsock && m_shared_port_endpoint	9347:5:286581:286614	3070264	0	True				
ANR	3070615	AndExpression	dc_rsock && m_shared_port_endpoint		3070264	0		&&			
ANR	3070616	Identifier	dc_rsock		3070264	0					
ANR	3070617	Identifier	m_shared_port_endpoint		3070264	1					
ANR	3070618	CompoundStatement		94:42:2811:2811	3070264	1					
ANR	3070619	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: non-shared command socket at %s\\n"" , dc_rsock -> get_sinful ( ) )"	9350:2:286732:286828	3070264	0	True				
ANR	3070620	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: non-shared command socket at %s\\n"" , dc_rsock -> get_sinful ( ) )"		3070264	0					
ANR	3070621	Callee	dprintf		3070264	0					
ANR	3070622	Identifier	dprintf		3070264	0					
ANR	3070623	ArgumentList	D_ALWAYS		3070264	1					
ANR	3070624	Argument	D_ALWAYS		3070264	0					
ANR	3070625	Identifier	D_ALWAYS		3070264	0					
ANR	3070626	Argument	"""DaemonCore: non-shared command socket at %s\\n"""		3070264	1					
ANR	3070627	PrimaryExpression	"""DaemonCore: non-shared command socket at %s\\n"""		3070264	0					
ANR	3070628	Argument	dc_rsock -> get_sinful ( )		3070264	2					
ANR	3070629	CallExpression	dc_rsock -> get_sinful ( )		3070264	0					
ANR	3070630	Callee	dc_rsock -> get_sinful		3070264	0					
ANR	3070631	PtrMemberAccess	dc_rsock -> get_sinful		3070264	0					
ANR	3070632	Identifier	dc_rsock		3070264	0					
ANR	3070633	Identifier	get_sinful		3070264	1					
ANR	3070634	ArgumentList			3070264	1					
ANR	3070635	IfStatement	if ( ! dc_ssock )		3070264	13					
ANR	3070636	Condition	! dc_ssock	9354:5:286839:286847	3070264	0	True				
ANR	3070637	UnaryOperationExpression	! dc_ssock		3070264	0					
ANR	3070638	UnaryOperator	!		3070264	0					
ANR	3070639	Identifier	dc_ssock		3070264	1					
ANR	3070640	CompoundStatement		101:16:3043:3043	3070264	1					
ANR	3070641	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: UDP Command socket not created.\\n"" )"	9355:2:286854:286924	3070264	0	True				
ANR	3070642	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: UDP Command socket not created.\\n"" )"		3070264	0					
ANR	3070643	Callee	dprintf		3070264	0					
ANR	3070644	Identifier	dprintf		3070264	0					
ANR	3070645	ArgumentList	D_FULLDEBUG		3070264	1					
ANR	3070646	Argument	D_FULLDEBUG		3070264	0					
ANR	3070647	Identifier	D_FULLDEBUG		3070264	0					
ANR	3070648	Argument	"""DaemonCore: UDP Command socket not created.\\n"""		3070264	1					
ANR	3070649	PrimaryExpression	"""DaemonCore: UDP Command socket not created.\\n"""		3070264	0					
ANR	3070650	IfStatement	if ( dc_rsock )		3070264	14					
ANR	3070651	Condition	dc_rsock	9362:5:287126:287133	3070264	0	True				
ANR	3070652	Identifier	dc_rsock		3070264	0					
ANR	3070653	CompoundStatement		109:16:3330:3330	3070264	1					
ANR	3070654	IfStatement	if ( dc_rsock -> my_addr ( ) . is_loopback ( ) )		3070264	0					
ANR	3070655	Condition	dc_rsock -> my_addr ( ) . is_loopback ( )	9363:7:287146:287178	3070264	0	True				
ANR	3070656	CallExpression	dc_rsock -> my_addr ( ) . is_loopback ( )		3070264	0					
ANR	3070657	Callee	dc_rsock -> my_addr ( ) . is_loopback		3070264	0					
ANR	3070658	MemberAccess	dc_rsock -> my_addr ( ) . is_loopback		3070264	0					
ANR	3070659	CallExpression	dc_rsock -> my_addr ( )		3070264	0					
ANR	3070660	Callee	dc_rsock -> my_addr		3070264	0					
ANR	3070661	PtrMemberAccess	dc_rsock -> my_addr		3070264	0					
ANR	3070662	Identifier	dc_rsock		3070264	0					
ANR	3070663	Identifier	my_addr		3070264	1					
ANR	3070664	ArgumentList			3070264	1					
ANR	3070665	Identifier	is_loopback		3070264	1					
ANR	3070666	ArgumentList			3070264	1					
ANR	3070667	CompoundStatement		110:43:3375:3375	3070264	1					
ANR	3070668	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Condor is running on the loopback address (127.0.0.1)\\n"" )"	9364:3:287187:287274	3070264	0	True				
ANR	3070669	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Condor is running on the loopback address (127.0.0.1)\\n"" )"		3070264	0					
ANR	3070670	Callee	dprintf		3070264	0					
ANR	3070671	Identifier	dprintf		3070264	0					
ANR	3070672	ArgumentList	D_ALWAYS		3070264	1					
ANR	3070673	Argument	D_ALWAYS		3070264	0					
ANR	3070674	Identifier	D_ALWAYS		3070264	0					
ANR	3070675	Argument	"""WARNING: Condor is running on the loopback address (127.0.0.1)\\n"""		3070264	1					
ANR	3070676	PrimaryExpression	"""WARNING: Condor is running on the loopback address (127.0.0.1)\\n"""		3070264	0					
ANR	3070677	ExpressionStatement	"dprintf ( D_ALWAYS , ""         of this machine, and is not visible to other hosts!\\n"" )"	9365:3:287279:287364	3070264	1	True				
ANR	3070678	CallExpression	"dprintf ( D_ALWAYS , ""         of this machine, and is not visible to other hosts!\\n"" )"		3070264	0					
ANR	3070679	Callee	dprintf		3070264	0					
ANR	3070680	Identifier	dprintf		3070264	0					
ANR	3070681	ArgumentList	D_ALWAYS		3070264	1					
ANR	3070682	Argument	D_ALWAYS		3070264	0					
ANR	3070683	Identifier	D_ALWAYS		3070264	0					
ANR	3070684	Argument	"""         of this machine, and is not visible to other hosts!\\n"""		3070264	1					
ANR	3070685	PrimaryExpression	"""         of this machine, and is not visible to other hosts!\\n"""		3070264	0					
ANR	3070686	ExpressionStatement	drop_addr_file ( )	9371:1:287467:287483	3070264	15	True				
ANR	3070687	CallExpression	drop_addr_file ( )		3070264	0					
ANR	3070688	Callee	drop_addr_file		3070264	0					
ANR	3070689	Identifier	drop_addr_file		3070264	0					
ANR	3070690	ArgumentList			3070264	1					
ANR	3070691	Statement	static	9375:1:287540:287545	3070264	16	True				
ANR	3070692	IdentifierDeclStatement	int already_registered = false ;	9375:8:287547:287577	3070264	17	True				
ANR	3070693	IdentifierDecl	already_registered = false		3070264	0					
ANR	3070694	IdentifierDeclType	int		3070264	0					
ANR	3070695	Identifier	already_registered		3070264	1					
ANR	3070696	AssignmentExpression	already_registered = false		3070264	2		=			
ANR	3070697	Identifier	false		3070264	0					
ANR	3070698	Identifier	false		3070264	1					
ANR	3070699	IfStatement	if ( ! already_registered )		3070264	18					
ANR	3070700	Condition	! already_registered	9376:5:287584:287602	3070264	0	True				
ANR	3070701	UnaryOperationExpression	! already_registered		3070264	0					
ANR	3070702	UnaryOperator	!		3070264	0					
ANR	3070703	Identifier	already_registered		3070264	1					
ANR	3070704	CompoundStatement		123:27:3799:3799	3070264	1					
ANR	3070705	ExpressionStatement	already_registered = true	9377:2:287610:287635	3070264	0	True				
ANR	3070706	AssignmentExpression	already_registered = true		3070264	0		=			
ANR	3070707	Identifier	already_registered		3070264	0					
ANR	3070708	Identifier	true		3070264	1					
ANR	3070709	ExpressionStatement	"daemonCore -> Register_Command ( DC_RAISESIGNAL , ""DC_RAISESIGNAL"" , ( CommandHandlercpp ) & DaemonCore :: HandleSigCommand , ""HandleSigCommand()"" , daemonCore , DAEMON )"	9380:2:287699:287861	3070264	1	True				
ANR	3070710	CallExpression	"daemonCore -> Register_Command ( DC_RAISESIGNAL , ""DC_RAISESIGNAL"" , ( CommandHandlercpp ) & DaemonCore :: HandleSigCommand , ""HandleSigCommand()"" , daemonCore , DAEMON )"		3070264	0					
ANR	3070711	Callee	daemonCore -> Register_Command		3070264	0					
ANR	3070712	PtrMemberAccess	daemonCore -> Register_Command		3070264	0					
ANR	3070713	Identifier	daemonCore		3070264	0					
ANR	3070714	Identifier	Register_Command		3070264	1					
ANR	3070715	ArgumentList	DC_RAISESIGNAL		3070264	1					
ANR	3070716	Argument	DC_RAISESIGNAL		3070264	0					
ANR	3070717	Identifier	DC_RAISESIGNAL		3070264	0					
ANR	3070718	Argument	"""DC_RAISESIGNAL"""		3070264	1					
ANR	3070719	PrimaryExpression	"""DC_RAISESIGNAL"""		3070264	0					
ANR	3070720	Argument	( CommandHandlercpp ) & DaemonCore :: HandleSigCommand		3070264	2					
ANR	3070721	CastExpression	( CommandHandlercpp ) & DaemonCore :: HandleSigCommand		3070264	0					
ANR	3070722	CastTarget	CommandHandlercpp		3070264	0					
ANR	3070723	UnaryOperationExpression	& DaemonCore :: HandleSigCommand		3070264	1					
ANR	3070724	UnaryOperator	&		3070264	0					
ANR	3070725	Identifier	DaemonCore :: HandleSigCommand		3070264	1					
ANR	3070726	Argument	"""HandleSigCommand()"""		3070264	3					
ANR	3070727	PrimaryExpression	"""HandleSigCommand()"""		3070264	0					
ANR	3070728	Argument	daemonCore		3070264	4					
ANR	3070729	Identifier	daemonCore		3070264	0					
ANR	3070730	Argument	DAEMON		3070264	5					
ANR	3070731	Identifier	DAEMON		3070264	0					
ANR	3070732	ExpressionStatement	"daemonCore -> Register_Command ( DC_CHILDALIVE , ""DC_CHILDALIVE"" , ( CommandHandlercpp ) & DaemonCore :: HandleChildAliveCommand , ""HandleChildAliveCommand"" , daemonCore , DAEMON , D_FULLDEBUG )"	9386:2:287981:288168	3070264	2	True				
ANR	3070733	CallExpression	"daemonCore -> Register_Command ( DC_CHILDALIVE , ""DC_CHILDALIVE"" , ( CommandHandlercpp ) & DaemonCore :: HandleChildAliveCommand , ""HandleChildAliveCommand"" , daemonCore , DAEMON , D_FULLDEBUG )"		3070264	0					
ANR	3070734	Callee	daemonCore -> Register_Command		3070264	0					
ANR	3070735	PtrMemberAccess	daemonCore -> Register_Command		3070264	0					
ANR	3070736	Identifier	daemonCore		3070264	0					
ANR	3070737	Identifier	Register_Command		3070264	1					
ANR	3070738	ArgumentList	DC_CHILDALIVE		3070264	1					
ANR	3070739	Argument	DC_CHILDALIVE		3070264	0					
ANR	3070740	Identifier	DC_CHILDALIVE		3070264	0					
ANR	3070741	Argument	"""DC_CHILDALIVE"""		3070264	1					
ANR	3070742	PrimaryExpression	"""DC_CHILDALIVE"""		3070264	0					
ANR	3070743	Argument	( CommandHandlercpp ) & DaemonCore :: HandleChildAliveCommand		3070264	2					
ANR	3070744	CastExpression	( CommandHandlercpp ) & DaemonCore :: HandleChildAliveCommand		3070264	0					
ANR	3070745	CastTarget	CommandHandlercpp		3070264	0					
ANR	3070746	UnaryOperationExpression	& DaemonCore :: HandleChildAliveCommand		3070264	1					
ANR	3070747	UnaryOperator	&		3070264	0					
ANR	3070748	Identifier	DaemonCore :: HandleChildAliveCommand		3070264	1					
ANR	3070749	Argument	"""HandleChildAliveCommand"""		3070264	3					
ANR	3070750	PrimaryExpression	"""HandleChildAliveCommand"""		3070264	0					
ANR	3070751	Argument	daemonCore		3070264	4					
ANR	3070752	Identifier	daemonCore		3070264	0					
ANR	3070753	Argument	DAEMON		3070264	5					
ANR	3070754	Identifier	DAEMON		3070264	0					
ANR	3070755	Argument	D_FULLDEBUG		3070264	6					
ANR	3070756	Identifier	D_FULLDEBUG		3070264	0					
ANR	3070757	ReturnType	void		3070264	1					
ANR	3070758	Identifier	DaemonCore :: InitDCCommandSocket		3070264	2					
ANR	3070759	ParameterList	int command_port		3070264	3					
ANR	3070760	Parameter	int command_port	9253:33:283787:283802	3070264	0	True				
ANR	3070761	ParameterType	int		3070264	0					
ANR	3070762	Identifier	command_port		3070264	1					
ANR	3070763	CFGEntryNode	ENTRY		3070264		True				
ANR	3070764	CFGExitNode	EXIT		3070264		True				
ANR	3070765	Symbol	msg		3070264						
ANR	3070766	Symbol	& DaemonCore :: HandleChildAliveCommand		3070264						
ANR	3070767	Symbol	DC_CHILDALIVE		3070264						
ANR	3070768	Symbol	publicNetworkIpAddr		3070264						
ANR	3070769	Symbol	already_registered		3070264						
ANR	3070770	Symbol	final_udp		3070264						
ANR	3070771	Symbol	& DaemonCore :: HandleSigCommand		3070264						
ANR	3070772	Symbol	msg . IsEmpty		3070264						
ANR	3070773	Symbol	privateNetworkIpAddr		3070264						
ANR	3070774	Symbol	dc_rsock -> set_os_buffers		3070264						
ANR	3070775	Symbol	SUBSYSTEM_TYPE_COLLECTOR		3070264						
ANR	3070776	Symbol	dc_ssock		3070264						
ANR	3070777	Symbol	* dc_ssock		3070264						
ANR	3070778	Symbol	DC_RAISESIGNAL		3070264						
ANR	3070779	Symbol	daemonCore		3070264						
ANR	3070780	Symbol	desired_size		3070264						
ANR	3070781	Symbol	addr		3070264						
ANR	3070782	Symbol	dc_ssock -> set_os_buffers		3070264						
ANR	3070783	Symbol	* dc_rsock		3070264						
ANR	3070784	Symbol	m_wants_dc_udp_self		3070264						
ANR	3070785	Symbol	dc_rsock -> my_addr ( ) . is_loopback		3070264						
ANR	3070786	Symbol	get_mySubSystem ( ) -> isType		3070264						
ANR	3070787	Symbol	dc_rsock -> my_addr		3070264						
ANR	3070788	Symbol	dc_rsock		3070264						
ANR	3070789	Symbol	NULL		3070264						
ANR	3070790	Symbol	D_DAEMONCORE		3070264						
ANR	3070791	Symbol	* get_mySubSystem		3070264						
ANR	3070792	Symbol	D_ALWAYS		3070264						
ANR	3070793	Symbol	priv_addr		3070264						
ANR	3070794	Symbol	false		3070264						
ANR	3070795	Symbol	dc_rsock -> get_sinful		3070264						
ANR	3070796	Symbol	final_tcp		3070264						
ANR	3070797	Symbol	D_FULLDEBUG		3070264						
ANR	3070798	Symbol	command_port		3070264						
ANR	3070799	Symbol	msg . Value		3070264						
ANR	3070800	Symbol	m_shared_port_endpoint		3070264						
ANR	3070801	Symbol	true		3070264						
ANR	3070802	Symbol	param_integer		3070264						
ANR	3070803	Symbol	DAEMON		3070264						
ANR	3070804	Symbol	get_mySubSystem		3070264						
ANR	3070805	Function	DaemonCore :: HandleDC_SIGCHLD	9395:0:288191:290120							
ANR	3070806	FunctionDef	DaemonCore :: HandleDC_SIGCHLD (int sig)		3070805	0					
ANR	3070807	CompoundStatement		9397:0:288233:290120	3070805	0					
ANR	3070808	IdentifierDeclStatement	pid_t pid ;	9402:1:288441:288450	3070805	0	True				
ANR	3070809	IdentifierDecl	pid		3070805	0					
ANR	3070810	IdentifierDeclType	pid_t		3070805	0					
ANR	3070811	Identifier	pid		3070805	1					
ANR	3070812	IdentifierDeclStatement	int status ;	9403:1:288453:288463	3070805	1	True				
ANR	3070813	IdentifierDecl	status		3070805	0					
ANR	3070814	IdentifierDeclType	int		3070805	0					
ANR	3070815	Identifier	status		3070805	1					
ANR	3070816	IdentifierDeclStatement	WaitpidEntry wait_entry ;	9404:1:288466:288489	3070805	2	True				
ANR	3070817	IdentifierDecl	wait_entry		3070805	0					
ANR	3070818	IdentifierDeclType	WaitpidEntry		3070805	0					
ANR	3070819	Identifier	wait_entry		3070805	1					
ANR	3070820	IdentifierDeclStatement	bool first_time = true ;	9405:1:288492:288514	3070805	3	True				
ANR	3070821	IdentifierDecl	first_time = true		3070805	0					
ANR	3070822	IdentifierDeclType	bool		3070805	0					
ANR	3070823	Identifier	first_time		3070805	1					
ANR	3070824	AssignmentExpression	first_time = true		3070805	2		=			
ANR	3070825	Identifier	true		3070805	0					
ANR	3070826	Identifier	true		3070805	1					
ANR	3070827	ExpressionStatement	assert ( sig == SIGCHLD )	9408:1:288519:288543	3070805	4	True				
ANR	3070828	CallExpression	assert ( sig == SIGCHLD )		3070805	0					
ANR	3070829	Callee	assert		3070805	0					
ANR	3070830	Identifier	assert		3070805	0					
ANR	3070831	ArgumentList	sig == SIGCHLD		3070805	1					
ANR	3070832	Argument	sig == SIGCHLD		3070805	0					
ANR	3070833	EqualityExpression	sig == SIGCHLD		3070805	0		==			
ANR	3070834	Identifier	sig		3070805	0					
ANR	3070835	Identifier	SIGCHLD		3070805	1					
ANR	3070836	ForStatement	for ( ; ; )		3070805	5					
ANR	3070837	CompoundStatement		14:9:321:321	3070805	0					
ANR	3070838	ExpressionStatement	errno = 0	9411:2:288559:288568	3070805	0	True				
ANR	3070839	AssignmentExpression	errno = 0		3070805	0		=			
ANR	3070840	Identifier	errno		3070805	0					
ANR	3070841	PrimaryExpression	0		3070805	1					
ANR	3070842	IfStatement	"if ( ( pid = waitpid ( - 1 , & status , WNOHANG ) ) <= 0 )"		3070805	1					
ANR	3070843	Condition	"( pid = waitpid ( - 1 , & status , WNOHANG ) ) <= 0"	9412:12:288582:288621	3070805	0	True				
ANR	3070844	RelationalExpression	"( pid = waitpid ( - 1 , & status , WNOHANG ) ) <= 0"		3070805	0		<=			
ANR	3070845	AssignmentExpression	"pid = waitpid ( - 1 , & status , WNOHANG )"		3070805	0		=			
ANR	3070846	Identifier	pid		3070805	0					
ANR	3070847	CallExpression	"waitpid ( - 1 , & status , WNOHANG )"		3070805	1					
ANR	3070848	Callee	waitpid		3070805	0					
ANR	3070849	Identifier	waitpid		3070805	0					
ANR	3070850	ArgumentList	- 1		3070805	1					
ANR	3070851	Argument	- 1		3070805	0					
ANR	3070852	UnaryOperationExpression	- 1		3070805	0					
ANR	3070853	UnaryOperator	-		3070805	0					
ANR	3070854	PrimaryExpression	1		3070805	1					
ANR	3070855	Argument	& status		3070805	1					
ANR	3070856	UnaryOperationExpression	& status		3070805	0					
ANR	3070857	UnaryOperator	&		3070805	0					
ANR	3070858	Identifier	status		3070805	1					
ANR	3070859	Argument	WNOHANG		3070805	2					
ANR	3070860	Identifier	WNOHANG		3070805	0					
ANR	3070861	PrimaryExpression	0		3070805	1					
ANR	3070862	CompoundStatement		16:55:391:391	3070805	1					
ANR	3070863	IfStatement	if ( errno == EINTR )		3070805	0					
ANR	3070864	Condition	errno == EINTR	9413:7:288634:288647	3070805	0	True				
ANR	3070865	EqualityExpression	errno == EINTR		3070805	0		==			
ANR	3070866	Identifier	errno		3070805	0					
ANR	3070867	Identifier	EINTR		3070805	1					
ANR	3070868	CompoundStatement		17:24:417:417	3070805	1					
ANR	3070869	ContinueStatement	continue ;	9420:4:288972:288980	3070805	0	True				
ANR	3070870	IfStatement	if ( errno == ECHILD || errno == EAGAIN || errno == 0 )		3070805	1					
ANR	3070871	Condition	errno == ECHILD || errno == EAGAIN || errno == 0	9423:7:288995:289042	3070805	0	True				
ANR	3070872	OrExpression	errno == ECHILD || errno == EAGAIN || errno == 0		3070805	0		||			
ANR	3070873	EqualityExpression	errno == ECHILD		3070805	0		==			
ANR	3070874	Identifier	errno		3070805	0					
ANR	3070875	Identifier	ECHILD		3070805	1					
ANR	3070876	OrExpression	errno == EAGAIN || errno == 0		3070805	1		||			
ANR	3070877	EqualityExpression	errno == EAGAIN		3070805	0		==			
ANR	3070878	Identifier	errno		3070805	0					
ANR	3070879	Identifier	EAGAIN		3070805	1					
ANR	3070880	EqualityExpression	errno == 0		3070805	1		==			
ANR	3070881	Identifier	errno		3070805	0					
ANR	3070882	PrimaryExpression	0		3070805	1					
ANR	3070883	CompoundStatement		27:58:812:812	3070805	1					
ANR	3070884	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: No more children processes to reap.\\n"" )"	9424:4:289052:289134	3070805	0	True				
ANR	3070885	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: No more children processes to reap.\\n"" )"		3070805	0					
ANR	3070886	Callee	dprintf		3070805	0					
ANR	3070887	Identifier	dprintf		3070805	0					
ANR	3070888	ArgumentList	D_FULLDEBUG		3070805	1					
ANR	3070889	Argument	D_FULLDEBUG		3070805	0					
ANR	3070890	Identifier	D_FULLDEBUG		3070805	0					
ANR	3070891	Argument	"""DaemonCore: No more children processes to reap.\\n"""		3070805	1					
ANR	3070892	PrimaryExpression	"""DaemonCore: No more children processes to reap.\\n"""		3070805	0					
ANR	3070893	ElseStatement	else		3070805	0					
ANR	3070894	CompoundStatement		30:10:912:912	3070805	0					
ANR	3070895	ExpressionStatement	"dprintf ( D_ALWAYS , ""waitpid() returned %d, errno = %d\\n"" , pid , errno )"	9428:4:289205:289282	3070805	0	True				
ANR	3070896	CallExpression	"dprintf ( D_ALWAYS , ""waitpid() returned %d, errno = %d\\n"" , pid , errno )"		3070805	0					
ANR	3070897	Callee	dprintf		3070805	0					
ANR	3070898	Identifier	dprintf		3070805	0					
ANR	3070899	ArgumentList	D_ALWAYS		3070805	1					
ANR	3070900	Argument	D_ALWAYS		3070805	0					
ANR	3070901	Identifier	D_ALWAYS		3070805	0					
ANR	3070902	Argument	"""waitpid() returned %d, errno = %d\\n"""		3070805	1					
ANR	3070903	PrimaryExpression	"""waitpid() returned %d, errno = %d\\n"""		3070805	0					
ANR	3070904	Argument	pid		3070805	2					
ANR	3070905	Identifier	pid		3070805	0					
ANR	3070906	Argument	errno		3070805	3					
ANR	3070907	Identifier	errno		3070805	0					
ANR	3070908	BreakStatement	break ;	9431:12:289301:289306	3070805	2	True				
ANR	3070909	IfStatement	if ( WIFSIGNALED ( status ) && WTERMSIG ( status ) == SIGTRAP )		3070805	2					
ANR	3070910	Condition	WIFSIGNALED ( status ) && WTERMSIG ( status ) == SIGTRAP	9434:6:289417:289466	3070805	0	True				
ANR	3070911	AndExpression	WIFSIGNALED ( status ) && WTERMSIG ( status ) == SIGTRAP		3070805	0		&&			
ANR	3070912	CallExpression	WIFSIGNALED ( status )		3070805	0					
ANR	3070913	Callee	WIFSIGNALED		3070805	0					
ANR	3070914	Identifier	WIFSIGNALED		3070805	0					
ANR	3070915	ArgumentList	status		3070805	1					
ANR	3070916	Argument	status		3070805	0					
ANR	3070917	Identifier	status		3070805	0					
ANR	3070918	EqualityExpression	WTERMSIG ( status ) == SIGTRAP		3070805	1		==			
ANR	3070919	CallExpression	WTERMSIG ( status )		3070805	0					
ANR	3070920	Callee	WTERMSIG		3070805	0					
ANR	3070921	Identifier	WTERMSIG		3070805	0					
ANR	3070922	ArgumentList	status		3070805	1					
ANR	3070923	Argument	status		3070805	0					
ANR	3070924	Identifier	status		3070805	0					
ANR	3070925	Identifier	SIGTRAP		3070805	1					
ANR	3070926	CompoundStatement		38:59:1236:1236	3070805	1					
ANR	3070927	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""received SIGCHLD from stopped TDP process\\n"" )"	9440:3:289757:289825	3070805	0	True				
ANR	3070928	CallExpression	"dprintf ( D_FULLDEBUG , ""received SIGCHLD from stopped TDP process\\n"" )"		3070805	0					
ANR	3070929	Callee	dprintf		3070805	0					
ANR	3070930	Identifier	dprintf		3070805	0					
ANR	3070931	ArgumentList	D_FULLDEBUG		3070805	1					
ANR	3070932	Argument	D_FULLDEBUG		3070805	0					
ANR	3070933	Identifier	D_FULLDEBUG		3070805	0					
ANR	3070934	Argument	"""received SIGCHLD from stopped TDP process\\n"""		3070805	1					
ANR	3070935	PrimaryExpression	"""received SIGCHLD from stopped TDP process\\n"""		3070805	0					
ANR	3070936	ContinueStatement	continue ;	9441:3:289830:289838	3070805	1	True				
ANR	3070937	ExpressionStatement	wait_entry . child_pid = pid	9446:2:289910:289936	3070805	3	True				
ANR	3070938	AssignmentExpression	wait_entry . child_pid = pid		3070805	0		=			
ANR	3070939	MemberAccess	wait_entry . child_pid		3070805	0					
ANR	3070940	Identifier	wait_entry		3070805	0					
ANR	3070941	Identifier	child_pid		3070805	1					
ANR	3070942	Identifier	pid		3070805	1					
ANR	3070943	ExpressionStatement	wait_entry . exit_status = status	9447:2:289940:289971	3070805	4	True				
ANR	3070944	AssignmentExpression	wait_entry . exit_status = status		3070805	0		=			
ANR	3070945	MemberAccess	wait_entry . exit_status		3070805	0					
ANR	3070946	Identifier	wait_entry		3070805	0					
ANR	3070947	Identifier	exit_status		3070805	1					
ANR	3070948	Identifier	status		3070805	1					
ANR	3070949	ExpressionStatement	WaitpidQueue . enqueue ( wait_entry )	9448:2:289975:290007	3070805	5	True				
ANR	3070950	CallExpression	WaitpidQueue . enqueue ( wait_entry )		3070805	0					
ANR	3070951	Callee	WaitpidQueue . enqueue		3070805	0					
ANR	3070952	MemberAccess	WaitpidQueue . enqueue		3070805	0					
ANR	3070953	Identifier	WaitpidQueue		3070805	0					
ANR	3070954	Identifier	enqueue		3070805	1					
ANR	3070955	ArgumentList	wait_entry		3070805	1					
ANR	3070956	Argument	wait_entry		3070805	0					
ANR	3070957	Identifier	wait_entry		3070805	0					
ANR	3070958	IfStatement	if ( first_time )		3070805	6					
ANR	3070959	Condition	first_time	9449:6:290015:290024	3070805	0	True				
ANR	3070960	Identifier	first_time		3070805	0					
ANR	3070961	CompoundStatement		53:18:1793:1793	3070805	1					
ANR	3070962	ExpressionStatement	"Send_Signal ( mypid , DC_SERVICEWAITPIDS )"	9450:3:290032:290072	3070805	0	True				
ANR	3070963	CallExpression	"Send_Signal ( mypid , DC_SERVICEWAITPIDS )"		3070805	0					
ANR	3070964	Callee	Send_Signal		3070805	0					
ANR	3070965	Identifier	Send_Signal		3070805	0					
ANR	3070966	ArgumentList	mypid		3070805	1					
ANR	3070967	Argument	mypid		3070805	0					
ANR	3070968	Identifier	mypid		3070805	0					
ANR	3070969	Argument	DC_SERVICEWAITPIDS		3070805	1					
ANR	3070970	Identifier	DC_SERVICEWAITPIDS		3070805	0					
ANR	3070971	ExpressionStatement	first_time = false	9451:3:290077:290095	3070805	1	True				
ANR	3070972	AssignmentExpression	first_time = false		3070805	0		=			
ANR	3070973	Identifier	first_time		3070805	0					
ANR	3070974	Identifier	false		3070805	1					
ANR	3070975	ReturnStatement	return TRUE ;	9456:1:290107:290118	3070805	6	True				
ANR	3070976	Identifier	TRUE		3070805	0					
ANR	3070977	ReturnType	int		3070805	1					
ANR	3070978	Identifier	DaemonCore :: HandleDC_SIGCHLD		3070805	2					
ANR	3070979	ParameterList	int sig		3070805	3					
ANR	3070980	Parameter	int sig	9396:29:288224:288230	3070805	0	True				
ANR	3070981	ParameterType	int		3070805	0					
ANR	3070982	Identifier	sig		3070805	1					
ANR	3070983	CFGEntryNode	ENTRY		3070805		True				
ANR	3070984	CFGExitNode	EXIT		3070805		True				
ANR	3070985	InfiniteForNode	true		3070805		True				
ANR	3070986	Symbol	wait_entry . child_pid		3070805						
ANR	3070987	Symbol	EINTR		3070805						
ANR	3070988	Symbol	ECHILD		3070805						
ANR	3070989	Symbol	DC_SERVICEWAITPIDS		3070805						
ANR	3070990	Symbol	pid		3070805						
ANR	3070991	Symbol	sig		3070805						
ANR	3070992	Symbol	first_time		3070805						
ANR	3070993	Symbol	SIGTRAP		3070805						
ANR	3070994	Symbol	WNOHANG		3070805						
ANR	3070995	Symbol	WIFSIGNALED		3070805						
ANR	3070996	Symbol	errno		3070805						
ANR	3070997	Symbol	mypid		3070805						
ANR	3070998	Symbol	EAGAIN		3070805						
ANR	3070999	Symbol	D_ALWAYS		3070805						
ANR	3071000	Symbol	false		3070805						
ANR	3071001	Symbol	TRUE		3070805						
ANR	3071002	Symbol	D_FULLDEBUG		3070805						
ANR	3071003	Symbol	& status		3070805						
ANR	3071004	Symbol	WaitpidQueue		3070805						
ANR	3071005	Symbol	SIGCHLD		3070805						
ANR	3071006	Symbol	wait_entry		3070805						
ANR	3071007	Symbol	wait_entry . exit_status		3070805						
ANR	3071008	Symbol	true		3070805						
ANR	3071009	Symbol	WTERMSIG		3070805						
ANR	3071010	Symbol	status		3070805						
ANR	3071011	Symbol	waitpid		3070805						
ANR	3071012	DeclStmt									
ANR	3071013	Decl							WaitpidEntry	WaitpidEntry	wait_entry
ANR	3071014	Function	pidWatcherThread	9487:0:290789:298433							
ANR	3071015	FunctionDef	pidWatcherThread (void * arg)		3071014	0					
ANR	3071016	CompoundStatement		9489:0:290828:298433	3071014	0					
ANR	3071017	IdentifierDeclStatement	DaemonCore :: PidWatcherEntry * entry ;	9490:1:290831:290865	3071014	0	True				
ANR	3071018	IdentifierDecl	* entry		3071014	0					
ANR	3071019	IdentifierDeclType	DaemonCore :: PidWatcherEntry *		3071014	0					
ANR	3071020	Identifier	entry		3071014	1					
ANR	3071021	IdentifierDeclStatement	int i ;	9491:1:290868:290873	3071014	1	True				
ANR	3071022	IdentifierDecl	i		3071014	0					
ANR	3071023	IdentifierDeclType	int		3071014	0					
ANR	3071024	Identifier	i		3071014	1					
ANR	3071025	IdentifierDeclStatement	unsigned int numentries ;	9492:1:290876:290899	3071014	2	True				
ANR	3071026	IdentifierDecl	numentries		3071014	0					
ANR	3071027	IdentifierDeclType	unsigned int		3071014	0					
ANR	3071028	Identifier	numentries		3071014	1					
ANR	3071029	IdentifierDeclStatement	bool must_send_signal = false ;	9493:1:290902:290931	3071014	3	True				
ANR	3071030	IdentifierDecl	must_send_signal = false		3071014	0					
ANR	3071031	IdentifierDeclType	bool		3071014	0					
ANR	3071032	Identifier	must_send_signal		3071014	1					
ANR	3071033	AssignmentExpression	must_send_signal = false		3071014	2		=			
ANR	3071034	Identifier	false		3071014	0					
ANR	3071035	Identifier	false		3071014	1					
ANR	3071036	IdentifierDeclStatement	HANDLE hKids [ MAXIMUM_WAIT_OBJECTS ] ;	9494:1:290934:290968	3071014	4	True				
ANR	3071037	IdentifierDecl	hKids [ MAXIMUM_WAIT_OBJECTS ]		3071014	0					
ANR	3071038	IdentifierDeclType	HANDLE [ MAXIMUM_WAIT_OBJECTS ]		3071014	0					
ANR	3071039	Identifier	hKids		3071014	1					
ANR	3071040	Identifier	MAXIMUM_WAIT_OBJECTS		3071014	2					
ANR	3071041	IdentifierDeclStatement	int last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5 ;	9495:1:290971:291022	3071014	5	True				
ANR	3071042	IdentifierDecl	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		3071014	0					
ANR	3071043	IdentifierDeclType	int		3071014	0					
ANR	3071044	Identifier	last_pidentry_exited		3071014	1					
ANR	3071045	AssignmentExpression	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		3071014	2		=			
ANR	3071046	Identifier	last_pidentry_exited		3071014	0					
ANR	3071047	AdditiveExpression	MAXIMUM_WAIT_OBJECTS + 5		3071014	1		+			
ANR	3071048	Identifier	MAXIMUM_WAIT_OBJECTS		3071014	0					
ANR	3071049	PrimaryExpression	5		3071014	1					
ANR	3071050	IdentifierDeclStatement	unsigned int exited_pid ;	9496:1:291025:291048	3071014	6	True				
ANR	3071051	IdentifierDecl	exited_pid		3071014	0					
ANR	3071052	IdentifierDeclType	unsigned int		3071014	0					
ANR	3071053	Identifier	exited_pid		3071014	1					
ANR	3071054	IdentifierDeclStatement	DWORD result ;	9497:1:291051:291063	3071014	7	True				
ANR	3071055	IdentifierDecl	result		3071014	0					
ANR	3071056	IdentifierDeclType	DWORD		3071014	0					
ANR	3071057	Identifier	result		3071014	1					
ANR	3071058	IdentifierDeclStatement	Queue < DaemonCore :: WaitpidEntry > MyExitedQueue ;	9498:1:291066:291111	3071014	8	True				
ANR	3071059	IdentifierDecl	MyExitedQueue		3071014	0					
ANR	3071060	IdentifierDeclType	Queue < DaemonCore :: WaitpidEntry >		3071014	0					
ANR	3071061	Identifier	MyExitedQueue		3071014	1					
ANR	3071062	IdentifierDeclStatement	DaemonCore :: WaitpidEntry wait_entry ;	9499:1:291114:291149	3071014	9	True				
ANR	3071063	IdentifierDecl	wait_entry		3071014	0					
ANR	3071064	IdentifierDeclType	DaemonCore :: WaitpidEntry		3071014	0					
ANR	3071065	Identifier	wait_entry		3071014	1					
ANR	3071066	ExpressionStatement	entry = ( DaemonCore :: PidWatcherEntry * ) arg	9501:1:291153:291196	3071014	10	True				
ANR	3071067	AssignmentExpression	entry = ( DaemonCore :: PidWatcherEntry * ) arg		3071014	0		=			
ANR	3071068	Identifier	entry		3071014	0					
ANR	3071069	CastExpression	( DaemonCore :: PidWatcherEntry * ) arg		3071014	1					
ANR	3071070	CastTarget	DaemonCore :: PidWatcherEntry *		3071014	0					
ANR	3071071	Identifier	arg		3071014	1					
ANR	3071072	ForStatement	for ( ; ; )		3071014	11					
ANR	3071073	CompoundStatement		15:10:380:380	3071014	0					
ANR	3071074	Statement	::	9505:1:291213:291214	3071014	0	True				
ANR	3071075	ExpressionStatement	EnterCriticalSection ( & ( entry -> crit_section ) )	9505:3:291215:291259	3071014	1	True				
ANR	3071076	CallExpression	EnterCriticalSection ( & ( entry -> crit_section ) )		3071014	0					
ANR	3071077	Callee	EnterCriticalSection		3071014	0					
ANR	3071078	Identifier	EnterCriticalSection		3071014	0					
ANR	3071079	ArgumentList	& ( entry -> crit_section )		3071014	1					
ANR	3071080	Argument	& ( entry -> crit_section )		3071014	0					
ANR	3071081	UnaryOperationExpression	& ( entry -> crit_section )		3071014	0					
ANR	3071082	UnaryOperator	&		3071014	0					
ANR	3071083	PtrMemberAccess	entry -> crit_section		3071014	1					
ANR	3071084	Identifier	entry		3071014	0					
ANR	3071085	Identifier	crit_section		3071014	1					
ANR	3071086	ExpressionStatement	numentries = 0	9506:1:291262:291276	3071014	2	True				
ANR	3071087	AssignmentExpression	numentries = 0		3071014	0		=			
ANR	3071088	Identifier	numentries		3071014	0					
ANR	3071089	PrimaryExpression	0		3071014	1					
ANR	3071090	ForStatement	for ( i = 0 ; i < entry -> nEntries ; i ++ )		3071014	3					
ANR	3071091	ForInit	i = 0 ;	9507:6:291284:291287	3071014	0	True				
ANR	3071092	AssignmentExpression	i = 0		3071014	0		=			
ANR	3071093	Identifier	i		3071014	0					
ANR	3071094	PrimaryExpression	0		3071014	1					
ANR	3071095	Condition	i < entry -> nEntries	9507:11:291289:291307	3071014	1	True				
ANR	3071096	RelationalExpression	i < entry -> nEntries		3071014	0		<			
ANR	3071097	Identifier	i		3071014	0					
ANR	3071098	PtrMemberAccess	entry -> nEntries		3071014	1					
ANR	3071099	Identifier	entry		3071014	0					
ANR	3071100	Identifier	nEntries		3071014	1					
ANR	3071101	PostIncDecOperationExpression	i ++	9507:32:291310:291312	3071014	2	True				
ANR	3071102	Identifier	i		3071014	0					
ANR	3071103	IncDec	++		3071014	1					
ANR	3071104	CompoundStatement		19:38:487:487	3071014	3					
ANR	3071105	IfStatement	if ( ( i != last_pidentry_exited ) && ( entry -> pidentries [ i ] ) )		3071014	0					
ANR	3071106	Condition	( i != last_pidentry_exited ) && ( entry -> pidentries [ i ] )	9508:7:291325:291377	3071014	0	True				
ANR	3071107	AndExpression	( i != last_pidentry_exited ) && ( entry -> pidentries [ i ] )		3071014	0		&&			
ANR	3071108	EqualityExpression	i != last_pidentry_exited		3071014	0		!=			
ANR	3071109	Identifier	i		3071014	0					
ANR	3071110	Identifier	last_pidentry_exited		3071014	1					
ANR	3071111	ArrayIndexing	entry -> pidentries [ i ]		3071014	1					
ANR	3071112	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071113	Identifier	entry		3071014	0					
ANR	3071114	Identifier	pidentries		3071014	1					
ANR	3071115	Identifier	i		3071014	1					
ANR	3071116	CompoundStatement		20:63:552:552	3071014	1					
ANR	3071117	IfStatement	"if ( InterlockedExchange ( & ( entry -> pidentries [ i ] -> deallocate ) , 0L ) )"		3071014	0					
ANR	3071118	Condition	"InterlockedExchange ( & ( entry -> pidentries [ i ] -> deallocate ) , 0L )"	9509:7:291390:291448	3071014	0	True				
ANR	3071119	CallExpression	"InterlockedExchange ( & ( entry -> pidentries [ i ] -> deallocate ) , 0L )"		3071014	0					
ANR	3071120	Callee	InterlockedExchange		3071014	0					
ANR	3071121	Identifier	InterlockedExchange		3071014	0					
ANR	3071122	ArgumentList	& ( entry -> pidentries [ i ] -> deallocate )		3071014	1					
ANR	3071123	Argument	& ( entry -> pidentries [ i ] -> deallocate )		3071014	0					
ANR	3071124	UnaryOperationExpression	& ( entry -> pidentries [ i ] -> deallocate )		3071014	0					
ANR	3071125	UnaryOperator	&		3071014	0					
ANR	3071126	PtrMemberAccess	entry -> pidentries [ i ] -> deallocate		3071014	1					
ANR	3071127	ArrayIndexing	entry -> pidentries [ i ]		3071014	0					
ANR	3071128	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071129	Identifier	entry		3071014	0					
ANR	3071130	Identifier	pidentries		3071014	1					
ANR	3071131	Identifier	i		3071014	1					
ANR	3071132	Identifier	deallocate		3071014	1					
ANR	3071133	Argument	0L		3071014	1					
ANR	3071134	PrimaryExpression	0L		3071014	0					
ANR	3071135	CompoundStatement		22:3:625:625	3071014	1					
ANR	3071136	ExpressionStatement	entry -> pidentries [ i ] -> pipeEnd -> set_unregistered ( )	9515:4:291640:291689	3071014	0	True				
ANR	3071137	CallExpression	entry -> pidentries [ i ] -> pipeEnd -> set_unregistered ( )		3071014	0					
ANR	3071138	Callee	entry -> pidentries [ i ] -> pipeEnd -> set_unregistered		3071014	0					
ANR	3071139	PtrMemberAccess	entry -> pidentries [ i ] -> pipeEnd -> set_unregistered		3071014	0					
ANR	3071140	PtrMemberAccess	entry -> pidentries [ i ] -> pipeEnd		3071014	0					
ANR	3071141	ArrayIndexing	entry -> pidentries [ i ]		3071014	0					
ANR	3071142	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071143	Identifier	entry		3071014	0					
ANR	3071144	Identifier	pidentries		3071014	1					
ANR	3071145	Identifier	i		3071014	1					
ANR	3071146	Identifier	pipeEnd		3071014	1					
ANR	3071147	Identifier	set_unregistered		3071014	1					
ANR	3071148	ArgumentList			3071014	1					
ANR	3071149	ExpressionStatement	entry -> pidentries [ i ] = NULL	9516:4:291695:291722	3071014	1	True				
ANR	3071150	AssignmentExpression	entry -> pidentries [ i ] = NULL		3071014	0		=			
ANR	3071151	ArrayIndexing	entry -> pidentries [ i ]		3071014	0					
ANR	3071152	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071153	Identifier	entry		3071014	0					
ANR	3071154	Identifier	pidentries		3071014	1					
ANR	3071155	Identifier	i		3071014	1					
ANR	3071156	Identifier	NULL		3071014	1					
ANR	3071157	ContinueStatement	continue ;	9517:4:291728:291736	3071014	2	True				
ANR	3071158	ExpressionStatement	hKids [ numentries ] = entry -> pidentries [ i ] -> hProcess	9519:3:291769:291819	3071014	1	True				
ANR	3071159	AssignmentExpression	hKids [ numentries ] = entry -> pidentries [ i ] -> hProcess		3071014	0		=			
ANR	3071160	ArrayIndexing	hKids [ numentries ]		3071014	0					
ANR	3071161	Identifier	hKids		3071014	0					
ANR	3071162	Identifier	numentries		3071014	1					
ANR	3071163	PtrMemberAccess	entry -> pidentries [ i ] -> hProcess		3071014	1					
ANR	3071164	ArrayIndexing	entry -> pidentries [ i ]		3071014	0					
ANR	3071165	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071166	Identifier	entry		3071014	0					
ANR	3071167	Identifier	pidentries		3071014	1					
ANR	3071168	Identifier	i		3071014	1					
ANR	3071169	Identifier	hProcess		3071014	1					
ANR	3071170	IfStatement	if ( hKids [ numentries ] == NULL )		3071014	2					
ANR	3071171	Condition	hKids [ numentries ] == NULL	9521:8:291884:291908	3071014	0	True				
ANR	3071172	EqualityExpression	hKids [ numentries ] == NULL		3071014	0		==			
ANR	3071173	ArrayIndexing	hKids [ numentries ]		3071014	0					
ANR	3071174	Identifier	hKids		3071014	0					
ANR	3071175	Identifier	numentries		3071014	1					
ANR	3071176	Identifier	NULL		3071014	1					
ANR	3071177	CompoundStatement		33:36:1083:1083	3071014	1					
ANR	3071178	ExpressionStatement	hKids [ numentries ] = entry -> pidentries [ i ] -> hThread	9523:4:291969:292018	3071014	0	True				
ANR	3071179	AssignmentExpression	hKids [ numentries ] = entry -> pidentries [ i ] -> hThread		3071014	0		=			
ANR	3071180	ArrayIndexing	hKids [ numentries ]		3071014	0					
ANR	3071181	Identifier	hKids		3071014	0					
ANR	3071182	Identifier	numentries		3071014	1					
ANR	3071183	PtrMemberAccess	entry -> pidentries [ i ] -> hThread		3071014	1					
ANR	3071184	ArrayIndexing	entry -> pidentries [ i ]		3071014	0					
ANR	3071185	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071186	Identifier	entry		3071014	0					
ANR	3071187	Identifier	pidentries		3071014	1					
ANR	3071188	Identifier	i		3071014	1					
ANR	3071189	Identifier	hThread		3071014	1					
ANR	3071190	IfStatement	if ( hKids [ numentries ] == NULL )		3071014	3					
ANR	3071191	Condition	hKids [ numentries ] == NULL	9525:8:292033:292057	3071014	0	True				
ANR	3071192	EqualityExpression	hKids [ numentries ] == NULL		3071014	0		==			
ANR	3071193	ArrayIndexing	hKids [ numentries ]		3071014	0					
ANR	3071194	Identifier	hKids		3071014	0					
ANR	3071195	Identifier	numentries		3071014	1					
ANR	3071196	Identifier	NULL		3071014	1					
ANR	3071197	CompoundStatement		37:36:1232:1232	3071014	1					
ANR	3071198	ExpressionStatement	hKids [ numentries ] = entry -> pidentries [ i ] -> pipeEnd -> pre_wait ( )	9530:4:292234:292295	3071014	0	True				
ANR	3071199	AssignmentExpression	hKids [ numentries ] = entry -> pidentries [ i ] -> pipeEnd -> pre_wait ( )		3071014	0		=			
ANR	3071200	ArrayIndexing	hKids [ numentries ]		3071014	0					
ANR	3071201	Identifier	hKids		3071014	0					
ANR	3071202	Identifier	numentries		3071014	1					
ANR	3071203	CallExpression	entry -> pidentries [ i ] -> pipeEnd -> pre_wait ( )		3071014	1					
ANR	3071204	Callee	entry -> pidentries [ i ] -> pipeEnd -> pre_wait		3071014	0					
ANR	3071205	PtrMemberAccess	entry -> pidentries [ i ] -> pipeEnd -> pre_wait		3071014	0					
ANR	3071206	PtrMemberAccess	entry -> pidentries [ i ] -> pipeEnd		3071014	0					
ANR	3071207	ArrayIndexing	entry -> pidentries [ i ]		3071014	0					
ANR	3071208	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071209	Identifier	entry		3071014	0					
ANR	3071210	Identifier	pidentries		3071014	1					
ANR	3071211	Identifier	i		3071014	1					
ANR	3071212	Identifier	pipeEnd		3071014	1					
ANR	3071213	Identifier	pre_wait		3071014	1					
ANR	3071214	ArgumentList			3071014	1					
ANR	3071215	ExpressionStatement	entry -> pidentries [ numentries ] = entry -> pidentries [ i ]	9532:3:292305:292357	3071014	4	True				
ANR	3071216	AssignmentExpression	entry -> pidentries [ numentries ] = entry -> pidentries [ i ]		3071014	0		=			
ANR	3071217	ArrayIndexing	entry -> pidentries [ numentries ]		3071014	0					
ANR	3071218	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071219	Identifier	entry		3071014	0					
ANR	3071220	Identifier	pidentries		3071014	1					
ANR	3071221	Identifier	numentries		3071014	1					
ANR	3071222	ArrayIndexing	entry -> pidentries [ i ]		3071014	1					
ANR	3071223	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071224	Identifier	entry		3071014	0					
ANR	3071225	Identifier	pidentries		3071014	1					
ANR	3071226	Identifier	i		3071014	1					
ANR	3071227	ExpressionStatement	numentries ++	9533:3:292362:292374	3071014	5	True				
ANR	3071228	PostIncDecOperationExpression	numentries ++		3071014	0					
ANR	3071229	Identifier	numentries		3071014	0					
ANR	3071230	IncDec	++		3071014	1					
ANR	3071231	ExpressionStatement	hKids [ numentries ] = entry -> event	9536:1:292384:292416	3071014	4	True				
ANR	3071232	AssignmentExpression	hKids [ numentries ] = entry -> event		3071014	0		=			
ANR	3071233	ArrayIndexing	hKids [ numentries ]		3071014	0					
ANR	3071234	Identifier	hKids		3071014	0					
ANR	3071235	Identifier	numentries		3071014	1					
ANR	3071236	PtrMemberAccess	entry -> event		3071014	1					
ANR	3071237	Identifier	entry		3071014	0					
ANR	3071238	Identifier	event		3071014	1					
ANR	3071239	ExpressionStatement	entry -> nEntries = numentries	9537:1:292419:292447	3071014	5	True				
ANR	3071240	AssignmentExpression	entry -> nEntries = numentries		3071014	0		=			
ANR	3071241	PtrMemberAccess	entry -> nEntries		3071014	0					
ANR	3071242	Identifier	entry		3071014	0					
ANR	3071243	Identifier	nEntries		3071014	1					
ANR	3071244	Identifier	numentries		3071014	1					
ANR	3071245	Statement	::	9538:1:292450:292451	3071014	6	True				
ANR	3071246	ExpressionStatement	LeaveCriticalSection ( & ( entry -> crit_section ) )	9538:3:292452:292496	3071014	7	True				
ANR	3071247	CallExpression	LeaveCriticalSection ( & ( entry -> crit_section ) )		3071014	0					
ANR	3071248	Callee	LeaveCriticalSection		3071014	0					
ANR	3071249	Identifier	LeaveCriticalSection		3071014	0					
ANR	3071250	ArgumentList	& ( entry -> crit_section )		3071014	1					
ANR	3071251	Argument	& ( entry -> crit_section )		3071014	0					
ANR	3071252	UnaryOperationExpression	& ( entry -> crit_section )		3071014	0					
ANR	3071253	UnaryOperator	&		3071014	0					
ANR	3071254	PtrMemberAccess	entry -> crit_section		3071014	1					
ANR	3071255	Identifier	entry		3071014	0					
ANR	3071256	Identifier	crit_section		3071014	1					
ANR	3071257	IfStatement	if ( numentries == 0 && ! must_send_signal )		3071014	8					
ANR	3071258	Condition	numentries == 0 && ! must_send_signal	9543:6:292641:292676	3071014	0	True				
ANR	3071259	AndExpression	numentries == 0 && ! must_send_signal		3071014	0		&&			
ANR	3071260	EqualityExpression	numentries == 0		3071014	0		==			
ANR	3071261	Identifier	numentries		3071014	0					
ANR	3071262	PrimaryExpression	0		3071014	1					
ANR	3071263	UnaryOperationExpression	! must_send_signal		3071014	1					
ANR	3071264	UnaryOperator	!		3071014	0					
ANR	3071265	Identifier	must_send_signal		3071014	1					
ANR	3071266	ReturnStatement	return TRUE ;	9544:2:292682:292693	3071014	1	True				
ANR	3071267	Identifier	TRUE		3071014	0					
ANR	3071268	ExpressionStatement	result = WAIT_TIMEOUT	9557:1:293380:293401	3071014	9	True				
ANR	3071269	AssignmentExpression	result = WAIT_TIMEOUT		3071014	0		=			
ANR	3071270	Identifier	result		3071014	0					
ANR	3071271	Identifier	WAIT_TIMEOUT		3071014	1					
ANR	3071272	IfStatement	if ( numentries )		3071014	10					
ANR	3071273	Condition	numentries	9560:5:293542:293551	3071014	0	True				
ANR	3071274	Identifier	numentries		3071014	0					
ANR	3071275	CompoundStatement		72:17:2725:2725	3071014	1					
ANR	3071276	Statement	result	9561:2:293558:293563	3071014	0	True				
ANR	3071277	Statement	=	9561:9:293565:293565	3071014	1	True				
ANR	3071278	Statement	::	9561:11:293567:293568	3071014	2	True				
ANR	3071279	ExpressionStatement	"WaitForMultipleObjects ( numentries + 1 , hKids , FALSE , 0 )"	9561:13:293569:293624	3071014	3	True				
ANR	3071280	CallExpression	"WaitForMultipleObjects ( numentries + 1 , hKids , FALSE , 0 )"		3071014	0					
ANR	3071281	Callee	WaitForMultipleObjects		3071014	0					
ANR	3071282	Identifier	WaitForMultipleObjects		3071014	0					
ANR	3071283	ArgumentList	numentries + 1		3071014	1					
ANR	3071284	Argument	numentries + 1		3071014	0					
ANR	3071285	AdditiveExpression	numentries + 1		3071014	0		+			
ANR	3071286	Identifier	numentries		3071014	0					
ANR	3071287	PrimaryExpression	1		3071014	1					
ANR	3071288	Argument	hKids		3071014	1					
ANR	3071289	Identifier	hKids		3071014	0					
ANR	3071290	Argument	FALSE		3071014	2					
ANR	3071291	Identifier	FALSE		3071014	0					
ANR	3071292	Argument	0		3071014	3					
ANR	3071293	PrimaryExpression	0		3071014	0					
ANR	3071294	IfStatement	if ( result == WAIT_TIMEOUT )		3071014	11					
ANR	3071295	Condition	result == WAIT_TIMEOUT	9563:6:293635:293656	3071014	0	True				
ANR	3071296	EqualityExpression	result == WAIT_TIMEOUT		3071014	0		==			
ANR	3071297	Identifier	result		3071014	0					
ANR	3071298	Identifier	WAIT_TIMEOUT		3071014	1					
ANR	3071299	CompoundStatement		81:2:3068:3086	3071014	1					
ANR	3071300	IdentifierDeclStatement	bool notify_failed ;	9569:2:293897:293915	3071014	0	True				
ANR	3071301	IdentifierDecl	notify_failed		3071014	0					
ANR	3071302	IdentifierDeclType	bool		3071014	0					
ANR	3071303	Identifier	notify_failed		3071014	1					
ANR	3071304	WhileStatement	while ( must_send_signal )		3071014	1					
ANR	3071305	Condition	must_send_signal	9570:10:293927:293942	3071014	0	True				
ANR	3071306	Identifier	must_send_signal		3071014	0					
ANR	3071307	CompoundStatement		92:3:3502:3602	3071014	1					
ANR	3071308	Statement	::	9574:3:294050:294051	3071014	0	True				
ANR	3071309	ExpressionStatement	EnterCriticalSection ( & Big_fat_mutex )	9574:5:294052:294088	3071014	1	True				
ANR	3071310	CallExpression	EnterCriticalSection ( & Big_fat_mutex )		3071014	0					
ANR	3071311	Callee	EnterCriticalSection		3071014	0					
ANR	3071312	Identifier	EnterCriticalSection		3071014	0					
ANR	3071313	ArgumentList	& Big_fat_mutex		3071014	1					
ANR	3071314	Argument	& Big_fat_mutex		3071014	0					
ANR	3071315	UnaryOperationExpression	& Big_fat_mutex		3071014	0					
ANR	3071316	UnaryOperator	&		3071014	0					
ANR	3071317	Identifier	Big_fat_mutex		3071014	1					
ANR	3071318	IdentifierDeclStatement	"Daemon d ( DT_ANY , daemonCore -> privateNetworkIpAddr ( ) ) ;"	9577:3:294228:294282	3071014	2	True				
ANR	3071319	IdentifierDecl	"d ( DT_ANY , daemonCore -> privateNetworkIpAddr ( ) )"		3071014	0					
ANR	3071320	IdentifierDeclType	Daemon		3071014	0					
ANR	3071321	Identifier	d		3071014	1					
ANR	3071322	Expression	"DT_ANY , daemonCore -> privateNetworkIpAddr ( )"		3071014	2					
ANR	3071323	Identifier	DT_ANY		3071014	0					
ANR	3071324	CallExpression	daemonCore -> privateNetworkIpAddr ( )		3071014	1					
ANR	3071325	Callee	daemonCore -> privateNetworkIpAddr		3071014	0					
ANR	3071326	PtrMemberAccess	daemonCore -> privateNetworkIpAddr		3071014	0					
ANR	3071327	Identifier	daemonCore		3071014	0					
ANR	3071328	Identifier	privateNetworkIpAddr		3071014	1					
ANR	3071329	ArgumentList			3071014	1					
ANR	3071330	IdentifierDeclStatement	SafeSock ssock ;	9578:9:294293:294307	3071014	3	True				
ANR	3071331	IdentifierDecl	ssock		3071014	0					
ANR	3071332	IdentifierDeclType	SafeSock		3071014	0					
ANR	3071333	Identifier	ssock		3071014	1					
ANR	3071334	IdentifierDeclStatement	ReliSock rsock ;	9579:3:294312:294326	3071014	4	True				
ANR	3071335	IdentifierDecl	rsock		3071014	0					
ANR	3071336	IdentifierDeclType	ReliSock		3071014	0					
ANR	3071337	Identifier	rsock		3071014	1					
ANR	3071338	IdentifierDeclStatement	Sock & sock = ( d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock ) ? * ( Sock * ) & ssock : * ( Sock * ) & rsock ;	9580:3:294331:294431	3071014	5	True				
ANR	3071339	IdentifierDecl	& sock = ( d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock ) ? * ( Sock * ) & ssock : * ( Sock * ) & rsock		3071014	0					
ANR	3071340	IdentifierDeclType	Sock &		3071014	0					
ANR	3071341	Identifier	sock		3071014	1					
ANR	3071342	AssignmentExpression	& sock = ( d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock ) ? * ( Sock * ) & ssock : * ( Sock * ) & rsock		3071014	2		=			
ANR	3071343	Identifier	sock		3071014	0					
ANR	3071344	ConditionalExpression	( d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock ) ? * ( Sock * ) & ssock : * ( Sock * ) & rsock		3071014	1					
ANR	3071345	Condition	d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock		3071014	0					
ANR	3071346	AndExpression	d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock		3071014	0		&&			
ANR	3071347	CallExpression	d . hasUDPCommandPort ( )		3071014	0					
ANR	3071348	Callee	d . hasUDPCommandPort		3071014	0					
ANR	3071349	MemberAccess	d . hasUDPCommandPort		3071014	0					
ANR	3071350	Identifier	d		3071014	0					
ANR	3071351	Identifier	hasUDPCommandPort		3071014	1					
ANR	3071352	ArgumentList			3071014	1					
ANR	3071353	PtrMemberAccess	daemonCore -> dc_ssock		3071014	1					
ANR	3071354	Identifier	daemonCore		3071014	0					
ANR	3071355	Identifier	dc_ssock		3071014	1					
ANR	3071356	UnaryOperationExpression	* ( Sock * ) & ssock		3071014	1					
ANR	3071357	UnaryOperator	*		3071014	0					
ANR	3071358	CastExpression	( Sock * ) & ssock		3071014	1					
ANR	3071359	CastTarget	Sock *		3071014	0					
ANR	3071360	UnaryOperationExpression	& ssock		3071014	1					
ANR	3071361	UnaryOperator	&		3071014	0					
ANR	3071362	Identifier	ssock		3071014	1					
ANR	3071363	UnaryOperationExpression	* ( Sock * ) & rsock		3071014	2					
ANR	3071364	UnaryOperator	*		3071014	0					
ANR	3071365	CastExpression	( Sock * ) & rsock		3071014	1					
ANR	3071366	CastTarget	Sock *		3071014	0					
ANR	3071367	UnaryOperationExpression	& rsock		3071014	1					
ANR	3071368	UnaryOperator	&		3071014	0					
ANR	3071369	Identifier	rsock		3071014	1					
ANR	3071370	ExpressionStatement	"notify_failed = ! d . connectSock ( & sock , 1 ) || ! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true ) || ! sock . end_of_message ( )"	9583:3:294498:294635	3071014	6	True				
ANR	3071371	AssignmentExpression	"notify_failed = ! d . connectSock ( & sock , 1 ) || ! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true ) || ! sock . end_of_message ( )"		3071014	0		=			
ANR	3071372	Identifier	notify_failed		3071014	0					
ANR	3071373	OrExpression	"! d . connectSock ( & sock , 1 ) || ! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true ) || ! sock . end_of_message ( )"		3071014	1		||			
ANR	3071374	UnaryOperationExpression	"! d . connectSock ( & sock , 1 )"		3071014	0					
ANR	3071375	UnaryOperator	!		3071014	0					
ANR	3071376	CallExpression	"d . connectSock ( & sock , 1 )"		3071014	1					
ANR	3071377	Callee	d . connectSock		3071014	0					
ANR	3071378	MemberAccess	d . connectSock		3071014	0					
ANR	3071379	Identifier	d		3071014	0					
ANR	3071380	Identifier	connectSock		3071014	1					
ANR	3071381	ArgumentList	& sock		3071014	1					
ANR	3071382	Argument	& sock		3071014	0					
ANR	3071383	UnaryOperationExpression	& sock		3071014	0					
ANR	3071384	UnaryOperator	&		3071014	0					
ANR	3071385	Identifier	sock		3071014	1					
ANR	3071386	Argument	1		3071014	1					
ANR	3071387	PrimaryExpression	1		3071014	0					
ANR	3071388	OrExpression	"! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true ) || ! sock . end_of_message ( )"		3071014	1		||			
ANR	3071389	UnaryOperationExpression	"! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true )"		3071014	0					
ANR	3071390	UnaryOperator	!		3071014	0					
ANR	3071391	CallExpression	"d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true )"		3071014	1					
ANR	3071392	Callee	d . startCommand		3071014	0					
ANR	3071393	MemberAccess	d . startCommand		3071014	0					
ANR	3071394	Identifier	d		3071014	0					
ANR	3071395	Identifier	startCommand		3071014	1					
ANR	3071396	ArgumentList	DC_NOP		3071014	1					
ANR	3071397	Argument	DC_NOP		3071014	0					
ANR	3071398	Identifier	DC_NOP		3071014	0					
ANR	3071399	Argument	& sock		3071014	1					
ANR	3071400	UnaryOperationExpression	& sock		3071014	0					
ANR	3071401	UnaryOperator	&		3071014	0					
ANR	3071402	Identifier	sock		3071014	1					
ANR	3071403	Argument	1		3071014	2					
ANR	3071404	PrimaryExpression	1		3071014	0					
ANR	3071405	Argument	NULL		3071014	3					
ANR	3071406	Identifier	NULL		3071014	0					
ANR	3071407	Argument	"""DC_NOP"""		3071014	4					
ANR	3071408	PrimaryExpression	"""DC_NOP"""		3071014	0					
ANR	3071409	Argument	true		3071014	5					
ANR	3071410	Identifier	true		3071014	0					
ANR	3071411	UnaryOperationExpression	! sock . end_of_message ( )		3071014	1					
ANR	3071412	UnaryOperator	!		3071014	0					
ANR	3071413	CallExpression	sock . end_of_message ( )		3071014	1					
ANR	3071414	Callee	sock . end_of_message		3071014	0					
ANR	3071415	MemberAccess	sock . end_of_message		3071014	0					
ANR	3071416	Identifier	sock		3071014	0					
ANR	3071417	Identifier	end_of_message		3071014	1					
ANR	3071418	ArgumentList			3071014	1					
ANR	3071419	IfStatement	if ( ! MyExitedQueue . IsEmpty ( ) )		3071014	7					
ANR	3071420	Condition	! MyExitedQueue . IsEmpty ( )	9594:8:294942:294965	3071014	0	True				
ANR	3071421	UnaryOperationExpression	! MyExitedQueue . IsEmpty ( )		3071014	0					
ANR	3071422	UnaryOperator	!		3071014	0					
ANR	3071423	CallExpression	MyExitedQueue . IsEmpty ( )		3071014	1					
ANR	3071424	Callee	MyExitedQueue . IsEmpty		3071014	0					
ANR	3071425	MemberAccess	MyExitedQueue . IsEmpty		3071014	0					
ANR	3071426	Identifier	MyExitedQueue		3071014	0					
ANR	3071427	Identifier	IsEmpty		3071014	1					
ANR	3071428	ArgumentList			3071014	1					
ANR	3071429	CompoundStatement		106:35:4140:4140	3071014	1					
ANR	3071430	ExpressionStatement	"daemonCore -> HandleSig ( _DC_RAISESIGNAL , DC_SERVICEWAITPIDS )"	9595:4:294975:295032	3071014	0	True				
ANR	3071431	CallExpression	"daemonCore -> HandleSig ( _DC_RAISESIGNAL , DC_SERVICEWAITPIDS )"		3071014	0					
ANR	3071432	Callee	daemonCore -> HandleSig		3071014	0					
ANR	3071433	PtrMemberAccess	daemonCore -> HandleSig		3071014	0					
ANR	3071434	Identifier	daemonCore		3071014	0					
ANR	3071435	Identifier	HandleSig		3071014	1					
ANR	3071436	ArgumentList	_DC_RAISESIGNAL		3071014	1					
ANR	3071437	Argument	_DC_RAISESIGNAL		3071014	0					
ANR	3071438	Identifier	_DC_RAISESIGNAL		3071014	0					
ANR	3071439	Argument	DC_SERVICEWAITPIDS		3071014	1					
ANR	3071440	Identifier	DC_SERVICEWAITPIDS		3071014	0					
ANR	3071441	WhileStatement	while ( MyExitedQueue . dequeue ( wait_entry ) == 0 )		3071014	8					
ANR	3071442	Condition	MyExitedQueue . dequeue ( wait_entry ) == 0	9597:10:295049:295084	3071014	0	True				
ANR	3071443	EqualityExpression	MyExitedQueue . dequeue ( wait_entry ) == 0		3071014	0		==			
ANR	3071444	CallExpression	MyExitedQueue . dequeue ( wait_entry )		3071014	0					
ANR	3071445	Callee	MyExitedQueue . dequeue		3071014	0					
ANR	3071446	MemberAccess	MyExitedQueue . dequeue		3071014	0					
ANR	3071447	Identifier	MyExitedQueue		3071014	0					
ANR	3071448	Identifier	dequeue		3071014	1					
ANR	3071449	ArgumentList	wait_entry		3071014	1					
ANR	3071450	Argument	wait_entry		3071014	0					
ANR	3071451	Identifier	wait_entry		3071014	0					
ANR	3071452	PrimaryExpression	0		3071014	1					
ANR	3071453	CompoundStatement		109:48:4258:4258	3071014	1					
ANR	3071454	ExpressionStatement	daemonCore -> WaitpidQueue . enqueue ( wait_entry )	9598:4:295093:295139	3071014	0	True				
ANR	3071455	CallExpression	daemonCore -> WaitpidQueue . enqueue ( wait_entry )		3071014	0					
ANR	3071456	Callee	daemonCore -> WaitpidQueue . enqueue		3071014	0					
ANR	3071457	MemberAccess	daemonCore -> WaitpidQueue . enqueue		3071014	0					
ANR	3071458	PtrMemberAccess	daemonCore -> WaitpidQueue		3071014	0					
ANR	3071459	Identifier	daemonCore		3071014	0					
ANR	3071460	Identifier	WaitpidQueue		3071014	1					
ANR	3071461	Identifier	enqueue		3071014	1					
ANR	3071462	ArgumentList	wait_entry		3071014	1					
ANR	3071463	Argument	wait_entry		3071014	0					
ANR	3071464	Identifier	wait_entry		3071014	0					
ANR	3071465	ExpressionStatement	notify_failed = ! daemonCore -> Do_Wake_up_select ( )	9605:3:295415:295464	3071014	9	True				
ANR	3071466	AssignmentExpression	notify_failed = ! daemonCore -> Do_Wake_up_select ( )		3071014	0		=			
ANR	3071467	Identifier	notify_failed		3071014	0					
ANR	3071468	UnaryOperationExpression	! daemonCore -> Do_Wake_up_select ( )		3071014	1					
ANR	3071469	UnaryOperator	!		3071014	0					
ANR	3071470	CallExpression	daemonCore -> Do_Wake_up_select ( )		3071014	1					
ANR	3071471	Callee	daemonCore -> Do_Wake_up_select		3071014	0					
ANR	3071472	PtrMemberAccess	daemonCore -> Do_Wake_up_select		3071014	0					
ANR	3071473	Identifier	daemonCore		3071014	0					
ANR	3071474	Identifier	Do_Wake_up_select		3071014	1					
ANR	3071475	ArgumentList			3071014	1					
ANR	3071476	Statement	::	9607:3:295470:295471	3071014	10	True				
ANR	3071477	ExpressionStatement	LeaveCriticalSection ( & Big_fat_mutex )	9607:5:295472:295508	3071014	11	True				
ANR	3071478	CallExpression	LeaveCriticalSection ( & Big_fat_mutex )		3071014	0					
ANR	3071479	Callee	LeaveCriticalSection		3071014	0					
ANR	3071480	Identifier	LeaveCriticalSection		3071014	0					
ANR	3071481	ArgumentList	& Big_fat_mutex		3071014	1					
ANR	3071482	Argument	& Big_fat_mutex		3071014	0					
ANR	3071483	UnaryOperationExpression	& Big_fat_mutex		3071014	0					
ANR	3071484	UnaryOperator	&		3071014	0					
ANR	3071485	Identifier	Big_fat_mutex		3071014	1					
ANR	3071486	IfStatement	if ( notify_failed )		3071014	12					
ANR	3071487	Condition	notify_failed	9609:17:295551:295563	3071014	0	True				
ANR	3071488	Identifier	notify_failed		3071014	0					
ANR	3071489	CompoundStatement		122:3:4741:4741	3071014	1					
ANR	3071490	Statement	dprintf	9613:4:295692:295698	3071014	0	True				
ANR	3071491	Statement	(	9613:11:295699:295699	3071014	1	True				
ANR	3071492	Statement	D_ALWAYS	9613:12:295700:295707	3071014	2	True				
ANR	3071493	Statement	","	9613:20:295708:295708	3071014	3	True				
ANR	3071494	Statement	"""PidWatcher thread couldn't notify main thread """	9614:5:295715:295762	3071014	4	True				
ANR	3071495	Statement	"""(exited_pid=%d)\\n"""	9615:5:295769:295787	3071014	5	True				
ANR	3071496	Statement	","	9615:24:295788:295788	3071014	6	True				
ANR	3071497	Statement	exited_pid	9615:26:295790:295799	3071014	7	True				
ANR	3071498	Statement	)	9615:36:295800:295800	3071014	8	True				
ANR	3071499	ExpressionStatement		9615:37:295801:295801	3071014	9	True				
ANR	3071500	Statement	::	9617:4:295808:295809	3071014	10	True				
ANR	3071501	ExpressionStatement	Sleep ( 500 )	9617:6:295810:295820	3071014	11	True				
ANR	3071502	CallExpression	Sleep ( 500 )		3071014	0					
ANR	3071503	Callee	Sleep		3071014	0					
ANR	3071504	Identifier	Sleep		3071014	0					
ANR	3071505	ArgumentList	500		3071014	1					
ANR	3071506	Argument	500		3071014	0					
ANR	3071507	PrimaryExpression	500		3071014	0					
ANR	3071508	ElseStatement	else		3071014	0					
ANR	3071509	CompoundStatement		130:10:5041:5041	3071014	0					
ANR	3071510	ExpressionStatement	must_send_signal = false	9619:4:295876:295900	3071014	0	True				
ANR	3071511	AssignmentExpression	must_send_signal = false		3071014	0		=			
ANR	3071512	Identifier	must_send_signal		3071014	0					
ANR	3071513	Identifier	false		3071014	1					
ANR	3071514	IfStatement	if ( numentries == 0 )		3071014	2					
ANR	3071515	Condition	numentries == 0	9622:6:295917:295931	3071014	0	True				
ANR	3071516	EqualityExpression	numentries == 0		3071014	0		==			
ANR	3071517	Identifier	numentries		3071014	0					
ANR	3071518	PrimaryExpression	0		3071014	1					
ANR	3071519	CompoundStatement		134:23:5105:5105	3071014	1					
ANR	3071520	ReturnStatement	return TRUE ;	9625:3:296020:296031	3071014	0	True				
ANR	3071521	Identifier	TRUE		3071014	0					
ANR	3071522	Statement	result	9629:2:296108:296113	3071014	3	True				
ANR	3071523	Statement	=	9629:9:296115:296115	3071014	4	True				
ANR	3071524	Statement	::	9629:11:296117:296118	3071014	5	True				
ANR	3071525	ExpressionStatement	"WaitForMultipleObjects ( numentries + 1 , hKids , FALSE , INFINITE )"	9629:13:296119:296181	3071014	6	True				
ANR	3071526	CallExpression	"WaitForMultipleObjects ( numentries + 1 , hKids , FALSE , INFINITE )"		3071014	0					
ANR	3071527	Callee	WaitForMultipleObjects		3071014	0					
ANR	3071528	Identifier	WaitForMultipleObjects		3071014	0					
ANR	3071529	ArgumentList	numentries + 1		3071014	1					
ANR	3071530	Argument	numentries + 1		3071014	0					
ANR	3071531	AdditiveExpression	numentries + 1		3071014	0		+			
ANR	3071532	Identifier	numentries		3071014	0					
ANR	3071533	PrimaryExpression	1		3071014	1					
ANR	3071534	Argument	hKids		3071014	1					
ANR	3071535	Identifier	hKids		3071014	0					
ANR	3071536	Argument	FALSE		3071014	2					
ANR	3071537	Identifier	FALSE		3071014	0					
ANR	3071538	Argument	INFINITE		3071014	3					
ANR	3071539	Identifier	INFINITE		3071014	0					
ANR	3071540	IfStatement	if ( result == WAIT_FAILED )		3071014	12					
ANR	3071541	Condition	result == WAIT_FAILED	9633:6:296194:296214	3071014	0	True				
ANR	3071542	EqualityExpression	result == WAIT_FAILED		3071014	0		==			
ANR	3071543	Identifier	result		3071014	0					
ANR	3071544	Identifier	WAIT_FAILED		3071014	1					
ANR	3071545	CompoundStatement		145:30:5389:5389	3071014	1					
ANR	3071546	ExpressionStatement	"EXCEPT ( ""WaitForMultipleObjects Failed"" )"	9634:2:296222:296261	3071014	0	True				
ANR	3071547	CallExpression	"EXCEPT ( ""WaitForMultipleObjects Failed"" )"		3071014	0					
ANR	3071548	Callee	EXCEPT		3071014	0					
ANR	3071549	Identifier	EXCEPT		3071014	0					
ANR	3071550	ArgumentList	"""WaitForMultipleObjects Failed"""		3071014	1					
ANR	3071551	Argument	"""WaitForMultipleObjects Failed"""		3071014	0					
ANR	3071552	PrimaryExpression	"""WaitForMultipleObjects Failed"""		3071014	0					
ANR	3071553	ExpressionStatement	result = result - WAIT_OBJECT_0	9637:1:296268:296299	3071014	13	True				
ANR	3071554	AssignmentExpression	result = result - WAIT_OBJECT_0		3071014	0		=			
ANR	3071555	Identifier	result		3071014	0					
ANR	3071556	AdditiveExpression	result - WAIT_OBJECT_0		3071014	1		-			
ANR	3071557	Identifier	result		3071014	0					
ANR	3071558	Identifier	WAIT_OBJECT_0		3071014	1					
ANR	3071559	IfStatement	if ( ( result < numentries ) && ( result >= 0 ) )		3071014	14					
ANR	3071560	Condition	( result < numentries ) && ( result >= 0 )	9643:6:296538:296575	3071014	0	True				
ANR	3071561	AndExpression	( result < numentries ) && ( result >= 0 )		3071014	0		&&			
ANR	3071562	RelationalExpression	result < numentries		3071014	0		<			
ANR	3071563	Identifier	result		3071014	0					
ANR	3071564	Identifier	numentries		3071014	1					
ANR	3071565	RelationalExpression	result >= 0		3071014	1		>=			
ANR	3071566	Identifier	result		3071014	0					
ANR	3071567	PrimaryExpression	0		3071014	1					
ANR	3071568	CompoundStatement		155:47:5750:5750	3071014	1					
ANR	3071569	ExpressionStatement	last_pidentry_exited = result	9645:2:296584:296613	3071014	0	True				
ANR	3071570	AssignmentExpression	last_pidentry_exited = result		3071014	0		=			
ANR	3071571	Identifier	last_pidentry_exited		3071014	0					
ANR	3071572	Identifier	result		3071014	1					
ANR	3071573	IfStatement	if ( entry -> pidentries [ result ] -> pipeEnd )		3071014	1					
ANR	3071574	Condition	entry -> pidentries [ result ] -> pipeEnd	9651:7:296824:296857	3071014	0	True				
ANR	3071575	PtrMemberAccess	entry -> pidentries [ result ] -> pipeEnd		3071014	0					
ANR	3071576	ArrayIndexing	entry -> pidentries [ result ]		3071014	0					
ANR	3071577	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071578	Identifier	entry		3071014	0					
ANR	3071579	Identifier	pidentries		3071014	1					
ANR	3071580	Identifier	result		3071014	1					
ANR	3071581	Identifier	pipeEnd		3071014	1					
ANR	3071582	CompoundStatement		163:44:6032:6032	3071014	1					
ANR	3071583	ExpressionStatement	exited_pid = 0	9652:3:296866:296880	3071014	0	True				
ANR	3071584	AssignmentExpression	exited_pid = 0		3071014	0		=			
ANR	3071585	Identifier	exited_pid		3071014	0					
ANR	3071586	PrimaryExpression	0		3071014	1					
ANR	3071587	IfStatement	if ( entry -> pidentries [ result ] -> deallocate )		3071014	1					
ANR	3071588	Condition	entry -> pidentries [ result ] -> deallocate	9653:7:296889:296925	3071014	0	True				
ANR	3071589	PtrMemberAccess	entry -> pidentries [ result ] -> deallocate		3071014	0					
ANR	3071590	ArrayIndexing	entry -> pidentries [ result ]		3071014	0					
ANR	3071591	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071592	Identifier	entry		3071014	0					
ANR	3071593	Identifier	pidentries		3071014	1					
ANR	3071594	Identifier	result		3071014	1					
ANR	3071595	Identifier	deallocate		3071014	1					
ANR	3071596	CompoundStatement		165:46:6099:6099	3071014	1					
ANR	3071597	ExpressionStatement	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5	9658:4:297182:297229	3071014	0	True				
ANR	3071598	AssignmentExpression	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		3071014	0		=			
ANR	3071599	Identifier	last_pidentry_exited		3071014	0					
ANR	3071600	AdditiveExpression	MAXIMUM_WAIT_OBJECTS + 5		3071014	1		+			
ANR	3071601	Identifier	MAXIMUM_WAIT_OBJECTS		3071014	0					
ANR	3071602	PrimaryExpression	5		3071014	1					
ANR	3071603	ElseStatement	else		3071014	0					
ANR	3071604	CompoundStatement		171:10:6412:6412	3071014	0					
ANR	3071605	IfStatement	if ( entry -> pidentries [ result ] -> pipeEnd -> post_wait ( ) )		3071014	0					
ANR	3071606	Condition	entry -> pidentries [ result ] -> pipeEnd -> post_wait ( )	9661:8:297302:297348	3071014	0	True				
ANR	3071607	CallExpression	entry -> pidentries [ result ] -> pipeEnd -> post_wait ( )		3071014	0					
ANR	3071608	Callee	entry -> pidentries [ result ] -> pipeEnd -> post_wait		3071014	0					
ANR	3071609	PtrMemberAccess	entry -> pidentries [ result ] -> pipeEnd -> post_wait		3071014	0					
ANR	3071610	PtrMemberAccess	entry -> pidentries [ result ] -> pipeEnd		3071014	0					
ANR	3071611	ArrayIndexing	entry -> pidentries [ result ]		3071014	0					
ANR	3071612	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071613	Identifier	entry		3071014	0					
ANR	3071614	Identifier	pidentries		3071014	1					
ANR	3071615	Identifier	result		3071014	1					
ANR	3071616	Identifier	pipeEnd		3071014	1					
ANR	3071617	Identifier	post_wait		3071014	1					
ANR	3071618	ArgumentList			3071014	1					
ANR	3071619	CompoundStatement		173:57:6522:6522	3071014	1					
ANR	3071620	ExpressionStatement	"InterlockedExchange ( & ( entry -> pidentries [ result ] -> pipeReady ) , 1L )"	9663:5:297399:297462	3071014	0	True				
ANR	3071621	CallExpression	"InterlockedExchange ( & ( entry -> pidentries [ result ] -> pipeReady ) , 1L )"		3071014	0					
ANR	3071622	Callee	InterlockedExchange		3071014	0					
ANR	3071623	Identifier	InterlockedExchange		3071014	0					
ANR	3071624	ArgumentList	& ( entry -> pidentries [ result ] -> pipeReady )		3071014	1					
ANR	3071625	Argument	& ( entry -> pidentries [ result ] -> pipeReady )		3071014	0					
ANR	3071626	UnaryOperationExpression	& ( entry -> pidentries [ result ] -> pipeReady )		3071014	0					
ANR	3071627	UnaryOperator	&		3071014	0					
ANR	3071628	PtrMemberAccess	entry -> pidentries [ result ] -> pipeReady		3071014	1					
ANR	3071629	ArrayIndexing	entry -> pidentries [ result ]		3071014	0					
ANR	3071630	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071631	Identifier	entry		3071014	0					
ANR	3071632	Identifier	pidentries		3071014	1					
ANR	3071633	Identifier	result		3071014	1					
ANR	3071634	Identifier	pipeReady		3071014	1					
ANR	3071635	Argument	1L		3071014	1					
ANR	3071636	PrimaryExpression	1L		3071014	0					
ANR	3071637	ExpressionStatement	must_send_signal = true	9664:5:297469:297492	3071014	1	True				
ANR	3071638	AssignmentExpression	must_send_signal = true		3071014	0		=			
ANR	3071639	Identifier	must_send_signal		3071014	0					
ANR	3071640	Identifier	true		3071014	1					
ANR	3071641	ElseStatement	else		3071014	0					
ANR	3071642	CompoundStatement		178:9:6680:6680	3071014	0					
ANR	3071643	ExpressionStatement	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5	9668:5:297541:297588	3071014	0	True				
ANR	3071644	AssignmentExpression	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		3071014	0		=			
ANR	3071645	Identifier	last_pidentry_exited		3071014	0					
ANR	3071646	AdditiveExpression	MAXIMUM_WAIT_OBJECTS + 5		3071014	1		+			
ANR	3071647	Identifier	MAXIMUM_WAIT_OBJECTS		3071014	0					
ANR	3071648	PrimaryExpression	5		3071014	1					
ANR	3071649	ElseStatement	else		3071014	0					
ANR	3071650	CompoundStatement		183:9:6781:6781	3071014	0					
ANR	3071651	ExpressionStatement	exited_pid = entry -> pidentries [ result ] -> pid	9672:3:297615:297658	3071014	0	True				
ANR	3071652	AssignmentExpression	exited_pid = entry -> pidentries [ result ] -> pid		3071014	0		=			
ANR	3071653	Identifier	exited_pid		3071014	0					
ANR	3071654	PtrMemberAccess	entry -> pidentries [ result ] -> pid		3071014	1					
ANR	3071655	ArrayIndexing	entry -> pidentries [ result ]		3071014	0					
ANR	3071656	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071657	Identifier	entry		3071014	0					
ANR	3071658	Identifier	pidentries		3071014	1					
ANR	3071659	Identifier	result		3071014	1					
ANR	3071660	Identifier	pid		3071014	1					
ANR	3071661	IfStatement	if ( exited_pid )		3071014	2					
ANR	3071662	Condition	exited_pid	9675:7:297672:297681	3071014	0	True				
ANR	3071663	Identifier	exited_pid		3071014	0					
ANR	3071664	CompoundStatement		187:20:6856:6856	3071014	1					
ANR	3071665	ExpressionStatement	wait_entry . child_pid = exited_pid	9679:3:297863:297896	3071014	0	True				
ANR	3071666	AssignmentExpression	wait_entry . child_pid = exited_pid		3071014	0		=			
ANR	3071667	MemberAccess	wait_entry . child_pid		3071014	0					
ANR	3071668	Identifier	wait_entry		3071014	0					
ANR	3071669	Identifier	child_pid		3071014	1					
ANR	3071670	Identifier	exited_pid		3071014	1					
ANR	3071671	ExpressionStatement	wait_entry . exit_status = 0	9680:3:297901:297927	3071014	1	True				
ANR	3071672	AssignmentExpression	wait_entry . exit_status = 0		3071014	0		=			
ANR	3071673	MemberAccess	wait_entry . exit_status		3071014	0					
ANR	3071674	Identifier	wait_entry		3071014	0					
ANR	3071675	Identifier	exit_status		3071014	1					
ANR	3071676	PrimaryExpression	0		3071014	1					
ANR	3071677	ExpressionStatement	MyExitedQueue . enqueue ( wait_entry )	9681:3:297963:297996	3071014	2	True				
ANR	3071678	CallExpression	MyExitedQueue . enqueue ( wait_entry )		3071014	0					
ANR	3071679	Callee	MyExitedQueue . enqueue		3071014	0					
ANR	3071680	MemberAccess	MyExitedQueue . enqueue		3071014	0					
ANR	3071681	Identifier	MyExitedQueue		3071014	0					
ANR	3071682	Identifier	enqueue		3071014	1					
ANR	3071683	ArgumentList	wait_entry		3071014	1					
ANR	3071684	Argument	wait_entry		3071014	0					
ANR	3071685	Identifier	wait_entry		3071014	0					
ANR	3071686	ExpressionStatement	must_send_signal = true	9682:3:298001:298024	3071014	3	True				
ANR	3071687	AssignmentExpression	must_send_signal = true		3071014	0		=			
ANR	3071688	Identifier	must_send_signal		3071014	0					
ANR	3071689	Identifier	true		3071014	1					
ANR	3071690	ExpressionStatement	entry -> pidentries [ result ] -> watcherEvent = NULL	9687:2:298123:298169	3071014	3	True				
ANR	3071691	AssignmentExpression	entry -> pidentries [ result ] -> watcherEvent = NULL		3071014	0		=			
ANR	3071692	PtrMemberAccess	entry -> pidentries [ result ] -> watcherEvent		3071014	0					
ANR	3071693	ArrayIndexing	entry -> pidentries [ result ]		3071014	0					
ANR	3071694	PtrMemberAccess	entry -> pidentries		3071014	0					
ANR	3071695	Identifier	entry		3071014	0					
ANR	3071696	Identifier	pidentries		3071014	1					
ANR	3071697	Identifier	result		3071014	1					
ANR	3071698	Identifier	watcherEvent		3071014	1					
ANR	3071699	Identifier	NULL		3071014	1					
ANR	3071700	ElseStatement	else		3071014	0					
ANR	3071701	CompoundStatement		201:8:7351:7351	3071014	0					
ANR	3071702	ExpressionStatement	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5	9693:2:298348:298395	3071014	0	True				
ANR	3071703	AssignmentExpression	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		3071014	0		=			
ANR	3071704	Identifier	last_pidentry_exited		3071014	0					
ANR	3071705	AdditiveExpression	MAXIMUM_WAIT_OBJECTS + 5		3071014	1		+			
ANR	3071706	Identifier	MAXIMUM_WAIT_OBJECTS		3071014	0					
ANR	3071707	PrimaryExpression	5		3071014	1					
ANR	3071708	ReturnType	unsigned		3071014	1					
ANR	3071709	Identifier	pidWatcherThread		3071014	2					
ANR	3071710	ParameterList	void * arg		3071014	3					
ANR	3071711	Parameter	void * arg	9488:18:290816:290824	3071014	0	True				
ANR	3071712	ParameterType	void *		3071014	0					
ANR	3071713	Identifier	arg		3071014	1					
ANR	3071714	CFGEntryNode	ENTRY		3071014		True				
ANR	3071715	CFGExitNode	EXIT		3071014		True				
ANR	3071716	InfiniteForNode	true		3071014		True				
ANR	3071717	Symbol	entry -> pidentries [ result ] -> pipeEnd		3071014						
ANR	3071718	Symbol	must_send_signal		3071014						
ANR	3071719	Symbol	entry -> pidentries [ result ] -> watcherEvent		3071014						
ANR	3071720	Symbol	wait_entry . child_pid		3071014						
ANR	3071721	Symbol	* * entry		3071014						
ANR	3071722	Symbol	entry -> pidentries [ i ] -> hProcess		3071014						
ANR	3071723	Symbol	d . hasUDPCommandPort		3071014						
ANR	3071724	Symbol	entry -> nEntries		3071014						
ANR	3071725	Symbol	entry -> pidentries [ i ] -> pipeEnd		3071014						
ANR	3071726	Symbol	DC_SERVICEWAITPIDS		3071014						
ANR	3071727	Symbol	DC_NOP		3071014						
ANR	3071728	Symbol	* numentries		3071014						
ANR	3071729	Symbol	entry -> pidentries [ result ] -> deallocate		3071014						
ANR	3071730	Symbol	& entry -> pidentries [ result ] -> pipeReady		3071014						
ANR	3071731	Symbol	WAIT_TIMEOUT		3071014						
ANR	3071732	Symbol	WAIT_FAILED		3071014						
ANR	3071733	Symbol	& entry -> crit_section		3071014						
ANR	3071734	Symbol	* * * entry -> pidentries		3071014						
ANR	3071735	Symbol	_DC_RAISESIGNAL		3071014						
ANR	3071736	Symbol	numentries		3071014						
ANR	3071737	Symbol	* * i		3071014						
ANR	3071738	Symbol	NULL		3071014						
ANR	3071739	Symbol	daemonCore -> WaitpidQueue		3071014						
ANR	3071740	Symbol	* * * entry		3071014						
ANR	3071741	Symbol	hKids		3071014						
ANR	3071742	Symbol	TRUE		3071014						
ANR	3071743	Symbol	* * result		3071014						
ANR	3071744	Symbol	entry -> pidentries [ result ] -> pipeEnd -> post_wait		3071014						
ANR	3071745	Symbol	& sock		3071014						
ANR	3071746	Symbol	last_pidentry_exited		3071014						
ANR	3071747	Symbol	& Big_fat_mutex		3071014						
ANR	3071748	Symbol	entry		3071014						
ANR	3071749	Symbol	d . startCommand		3071014						
ANR	3071750	Symbol	* daemonCore		3071014						
ANR	3071751	Symbol	wait_entry		3071014						
ANR	3071752	Symbol	* * * i		3071014						
ANR	3071753	Symbol	true		3071014						
ANR	3071754	Symbol	* * entry -> pidentries		3071014						
ANR	3071755	Symbol	ssock		3071014						
ANR	3071756	Symbol	notify_failed		3071014						
ANR	3071757	Symbol	* hKids		3071014						
ANR	3071758	Symbol	exited_pid		3071014						
ANR	3071759	Symbol	rsock		3071014						
ANR	3071760	Symbol	d . connectSock		3071014						
ANR	3071761	Symbol	result		3071014						
ANR	3071762	Symbol	MAXIMUM_WAIT_OBJECTS		3071014						
ANR	3071763	Symbol	sock . end_of_message		3071014						
ANR	3071764	Symbol	* result		3071014						
ANR	3071765	Symbol	* entry -> pidentries		3071014						
ANR	3071766	Symbol	daemonCore -> dc_ssock		3071014						
ANR	3071767	Symbol	arg		3071014						
ANR	3071768	Symbol	& entry -> pidentries [ i ] -> deallocate		3071014						
ANR	3071769	Symbol	daemonCore		3071014						
ANR	3071770	Symbol	WAIT_OBJECT_0		3071014						
ANR	3071771	Symbol	MyExitedQueue		3071014						
ANR	3071772	Symbol	InterlockedExchange		3071014						
ANR	3071773	Symbol	* entry		3071014						
ANR	3071774	Symbol	* ( Sock * ) & rsock		3071014						
ANR	3071775	Symbol	* * * result		3071014						
ANR	3071776	Symbol	d		3071014						
ANR	3071777	Symbol	MyExitedQueue . IsEmpty		3071014						
ANR	3071778	Symbol	* entry -> pidentries [ result ] -> pipeEnd		3071014						
ANR	3071779	Symbol	false		3071014						
ANR	3071780	Symbol	i		3071014						
ANR	3071781	Symbol	* entry -> pidentries [ i ] -> pipeEnd		3071014						
ANR	3071782	Symbol	INFINITE		3071014						
ANR	3071783	Symbol	* ( Sock * ) & ssock		3071014						
ANR	3071784	Symbol	& ssock		3071014						
ANR	3071785	Symbol	daemonCore -> Do_Wake_up_select		3071014						
ANR	3071786	Symbol	* * * * entry		3071014						
ANR	3071787	Symbol	entry -> pidentries [ result ] -> pid		3071014						
ANR	3071788	Symbol	entry -> pidentries [ i ] -> hThread		3071014						
ANR	3071789	Symbol	sock		3071014						
ANR	3071790	Symbol	* i		3071014						
ANR	3071791	Symbol	entry -> pidentries		3071014						
ANR	3071792	Symbol	MyExitedQueue . dequeue		3071014						
ANR	3071793	Symbol	entry -> pidentries [ i ] -> pipeEnd -> pre_wait		3071014						
ANR	3071794	Symbol	wait_entry . exit_status		3071014						
ANR	3071795	Symbol	& rsock		3071014						
ANR	3071796	Symbol	entry -> event		3071014						
ANR	3071797	Symbol	FALSE		3071014						
ANR	3071798	Function	DaemonCore :: WatchPid	9701:0:298496:300471							
ANR	3071799	FunctionDef	DaemonCore :: WatchPid (PidEntry * pidentry)		3071798	0					
ANR	3071800	CompoundStatement		9703:0:298541:300471	3071798	0					
ANR	3071801	IdentifierDeclStatement	struct PidWatcherEntry * entry = NULL ;	9704:1:298544:298580	3071798	0	True				
ANR	3071802	IdentifierDecl	* entry = NULL		3071798	0					
ANR	3071803	IdentifierDeclType	struct PidWatcherEntry *		3071798	0					
ANR	3071804	Identifier	entry		3071798	1					
ANR	3071805	AssignmentExpression	* entry = NULL		3071798	2		=			
ANR	3071806	Identifier	NULL		3071798	0					
ANR	3071807	Identifier	NULL		3071798	1					
ANR	3071808	IdentifierDeclStatement	int alldone = FALSE ;	9705:1:298583:298602	3071798	1	True				
ANR	3071809	IdentifierDecl	alldone = FALSE		3071798	0					
ANR	3071810	IdentifierDeclType	int		3071798	0					
ANR	3071811	Identifier	alldone		3071798	1					
ANR	3071812	AssignmentExpression	alldone = FALSE		3071798	2		=			
ANR	3071813	Identifier	FALSE		3071798	0					
ANR	3071814	Identifier	FALSE		3071798	1					
ANR	3071815	IfStatement	if ( pidentry -> pipeEnd )		3071798	2					
ANR	3071816	Condition	pidentry -> pipeEnd	9709:5:298735:298751	3071798	0	True				
ANR	3071817	PtrMemberAccess	pidentry -> pipeEnd		3071798	0					
ANR	3071818	Identifier	pidentry		3071798	0					
ANR	3071819	Identifier	pipeEnd		3071798	1					
ANR	3071820	CompoundStatement		7:24:212:212	3071798	1					
ANR	3071821	ExpressionStatement	pidentry -> pipeEnd -> set_watched ( )	9710:2:298758:298790	3071798	0	True				
ANR	3071822	CallExpression	pidentry -> pipeEnd -> set_watched ( )		3071798	0					
ANR	3071823	Callee	pidentry -> pipeEnd -> set_watched		3071798	0					
ANR	3071824	PtrMemberAccess	pidentry -> pipeEnd -> set_watched		3071798	0					
ANR	3071825	PtrMemberAccess	pidentry -> pipeEnd		3071798	0					
ANR	3071826	Identifier	pidentry		3071798	0					
ANR	3071827	Identifier	pipeEnd		3071798	1					
ANR	3071828	Identifier	set_watched		3071798	1					
ANR	3071829	ArgumentList			3071798	1					
ANR	3071830	ExpressionStatement	PidWatcherList . Rewind ( )	9714:1:298863:298886	3071798	3	True				
ANR	3071831	CallExpression	PidWatcherList . Rewind ( )		3071798	0					
ANR	3071832	Callee	PidWatcherList . Rewind		3071798	0					
ANR	3071833	MemberAccess	PidWatcherList . Rewind		3071798	0					
ANR	3071834	Identifier	PidWatcherList		3071798	0					
ANR	3071835	Identifier	Rewind		3071798	1					
ANR	3071836	ArgumentList			3071798	1					
ANR	3071837	WhileStatement	while ( ( entry = PidWatcherList . Next ( ) ) )		3071798	4					
ANR	3071838	Condition	entry = PidWatcherList . Next ( )	9715:9:298897:298925	3071798	0	True				
ANR	3071839	AssignmentExpression	entry = PidWatcherList . Next ( )		3071798	0		=			
ANR	3071840	Identifier	entry		3071798	0					
ANR	3071841	CallExpression	PidWatcherList . Next ( )		3071798	1					
ANR	3071842	Callee	PidWatcherList . Next		3071798	0					
ANR	3071843	MemberAccess	PidWatcherList . Next		3071798	0					
ANR	3071844	Identifier	PidWatcherList		3071798	0					
ANR	3071845	Identifier	Next		3071798	1					
ANR	3071846	ArgumentList			3071798	1					
ANR	3071847	CompoundStatement		13:41:387:387	3071798	1					
ANR	3071848	Statement	::	9717:2:298934:298935	3071798	0	True				
ANR	3071849	ExpressionStatement	EnterCriticalSection ( & ( entry -> crit_section ) )	9717:4:298936:298980	3071798	1	True				
ANR	3071850	CallExpression	EnterCriticalSection ( & ( entry -> crit_section ) )		3071798	0					
ANR	3071851	Callee	EnterCriticalSection		3071798	0					
ANR	3071852	Identifier	EnterCriticalSection		3071798	0					
ANR	3071853	ArgumentList	& ( entry -> crit_section )		3071798	1					
ANR	3071854	Argument	& ( entry -> crit_section )		3071798	0					
ANR	3071855	UnaryOperationExpression	& ( entry -> crit_section )		3071798	0					
ANR	3071856	UnaryOperator	&		3071798	0					
ANR	3071857	PtrMemberAccess	entry -> crit_section		3071798	1					
ANR	3071858	Identifier	entry		3071798	0					
ANR	3071859	Identifier	crit_section		3071798	1					
ANR	3071860	IfStatement	if ( entry -> nEntries == 0 )		3071798	2					
ANR	3071861	Condition	entry -> nEntries == 0	9719:7:298990:299009	3071798	0	True				
ANR	3071862	EqualityExpression	entry -> nEntries == 0		3071798	0		==			
ANR	3071863	PtrMemberAccess	entry -> nEntries		3071798	0					
ANR	3071864	Identifier	entry		3071798	0					
ANR	3071865	Identifier	nEntries		3071798	1					
ANR	3071866	PrimaryExpression	0		3071798	1					
ANR	3071867	CompoundStatement		17:30:471:471	3071798	1					
ANR	3071868	Statement	::	9722:3:299141:299142	3071798	0	True				
ANR	3071869	ExpressionStatement	DeleteCriticalSection ( & ( entry -> crit_section ) )	9722:5:299143:299188	3071798	1	True				
ANR	3071870	CallExpression	DeleteCriticalSection ( & ( entry -> crit_section ) )		3071798	0					
ANR	3071871	Callee	DeleteCriticalSection		3071798	0					
ANR	3071872	Identifier	DeleteCriticalSection		3071798	0					
ANR	3071873	ArgumentList	& ( entry -> crit_section )		3071798	1					
ANR	3071874	Argument	& ( entry -> crit_section )		3071798	0					
ANR	3071875	UnaryOperationExpression	& ( entry -> crit_section )		3071798	0					
ANR	3071876	UnaryOperator	&		3071798	0					
ANR	3071877	PtrMemberAccess	entry -> crit_section		3071798	1					
ANR	3071878	Identifier	entry		3071798	0					
ANR	3071879	Identifier	crit_section		3071798	1					
ANR	3071880	Statement	::	9723:3:299193:299194	3071798	2	True				
ANR	3071881	ExpressionStatement	CloseHandle ( entry -> event )	9723:5:299195:299220	3071798	3	True				
ANR	3071882	CallExpression	CloseHandle ( entry -> event )		3071798	0					
ANR	3071883	Callee	CloseHandle		3071798	0					
ANR	3071884	Identifier	CloseHandle		3071798	0					
ANR	3071885	ArgumentList	entry -> event		3071798	1					
ANR	3071886	Argument	entry -> event		3071798	0					
ANR	3071887	PtrMemberAccess	entry -> event		3071798	0					
ANR	3071888	Identifier	entry		3071798	0					
ANR	3071889	Identifier	event		3071798	1					
ANR	3071890	Statement	::	9724:3:299225:299226	3071798	4	True				
ANR	3071891	ExpressionStatement	CloseHandle ( entry -> hThread )	9724:5:299227:299254	3071798	5	True				
ANR	3071892	CallExpression	CloseHandle ( entry -> hThread )		3071798	0					
ANR	3071893	Callee	CloseHandle		3071798	0					
ANR	3071894	Identifier	CloseHandle		3071798	0					
ANR	3071895	ArgumentList	entry -> hThread		3071798	1					
ANR	3071896	Argument	entry -> hThread		3071798	0					
ANR	3071897	PtrMemberAccess	entry -> hThread		3071798	0					
ANR	3071898	Identifier	entry		3071798	0					
ANR	3071899	Identifier	hThread		3071798	1					
ANR	3071900	ExpressionStatement	PidWatcherList . DeleteCurrent ( )	9725:3:299259:299289	3071798	6	True				
ANR	3071901	CallExpression	PidWatcherList . DeleteCurrent ( )		3071798	0					
ANR	3071902	Callee	PidWatcherList . DeleteCurrent		3071798	0					
ANR	3071903	MemberAccess	PidWatcherList . DeleteCurrent		3071798	0					
ANR	3071904	Identifier	PidWatcherList		3071798	0					
ANR	3071905	Identifier	DeleteCurrent		3071798	1					
ANR	3071906	ArgumentList			3071798	1					
ANR	3071907	Statement	delete	9726:3:299294:299299	3071798	7	True				
ANR	3071908	ExpressionStatement	entry	9726:10:299301:299306	3071798	8	True				
ANR	3071909	Identifier	entry		3071798	0					
ANR	3071910	ContinueStatement	continue ;	9727:3:299311:299319	3071798	9	True				
ANR	3071911	IfStatement	if ( entry -> nEntries < ( MAXIMUM_WAIT_OBJECTS - 1 ) )		3071798	3					
ANR	3071912	Condition	entry -> nEntries < ( MAXIMUM_WAIT_OBJECTS - 1 )	9730:7:299382:299427	3071798	0	True				
ANR	3071913	RelationalExpression	entry -> nEntries < ( MAXIMUM_WAIT_OBJECTS - 1 )		3071798	0		<			
ANR	3071914	PtrMemberAccess	entry -> nEntries		3071798	0					
ANR	3071915	Identifier	entry		3071798	0					
ANR	3071916	Identifier	nEntries		3071798	1					
ANR	3071917	AdditiveExpression	MAXIMUM_WAIT_OBJECTS - 1		3071798	1		-			
ANR	3071918	Identifier	MAXIMUM_WAIT_OBJECTS		3071798	0					
ANR	3071919	PrimaryExpression	1		3071798	1					
ANR	3071920	CompoundStatement		28:56:889:889	3071798	1					
ANR	3071921	ExpressionStatement	entry -> pidentries [ entry -> nEntries ] = pidentry	9732:3:299463:299508	3071798	0	True				
ANR	3071922	AssignmentExpression	entry -> pidentries [ entry -> nEntries ] = pidentry		3071798	0		=			
ANR	3071923	ArrayIndexing	entry -> pidentries [ entry -> nEntries ]		3071798	0					
ANR	3071924	PtrMemberAccess	entry -> pidentries		3071798	0					
ANR	3071925	Identifier	entry		3071798	0					
ANR	3071926	Identifier	pidentries		3071798	1					
ANR	3071927	PtrMemberAccess	entry -> nEntries		3071798	1					
ANR	3071928	Identifier	entry		3071798	0					
ANR	3071929	Identifier	nEntries		3071798	1					
ANR	3071930	Identifier	pidentry		3071798	1					
ANR	3071931	ExpressionStatement	pidentry -> watcherEvent = entry -> event	9733:3:299513:299550	3071798	1	True				
ANR	3071932	AssignmentExpression	pidentry -> watcherEvent = entry -> event		3071798	0		=			
ANR	3071933	PtrMemberAccess	pidentry -> watcherEvent		3071798	0					
ANR	3071934	Identifier	pidentry		3071798	0					
ANR	3071935	Identifier	watcherEvent		3071798	1					
ANR	3071936	PtrMemberAccess	entry -> event		3071798	1					
ANR	3071937	Identifier	entry		3071798	0					
ANR	3071938	Identifier	event		3071798	1					
ANR	3071939	ExpressionStatement	( entry -> nEntries ) ++	9734:3:299555:299574	3071798	2	True				
ANR	3071940	PostIncDecOperationExpression	( entry -> nEntries ) ++		3071798	0					
ANR	3071941	PtrMemberAccess	entry -> nEntries		3071798	0					
ANR	3071942	Identifier	entry		3071798	0					
ANR	3071943	Identifier	nEntries		3071798	1					
ANR	3071944	IncDec	++		3071798	1					
ANR	3071945	Statement	if	9735:3:299579:299580	3071798	3	True				
ANR	3071946	Statement	(	9735:6:299582:299582	3071798	4	True				
ANR	3071947	Statement	!	9735:8:299584:299584	3071798	5	True				
ANR	3071948	Statement	::	9735:9:299585:299586	3071798	6	True				
ANR	3071949	Statement	SetEvent	9735:11:299587:299594	3071798	7	True				
ANR	3071950	Statement	(	9735:19:299595:299595	3071798	8	True				
ANR	3071951	Statement	entry	9735:20:299596:299600	3071798	9	True				
ANR	3071952	Statement	->	9735:25:299601:299602	3071798	10	True				
ANR	3071953	Statement	event	9735:27:299603:299607	3071798	11	True				
ANR	3071954	Statement	)	9735:32:299608:299608	3071798	12	True				
ANR	3071955	Statement	)	9735:34:299610:299610	3071798	13	True				
ANR	3071956	CompoundStatement		33:36:1070:1070	3071798	14					
ANR	3071957	ExpressionStatement	"EXCEPT ( ""SetEvent failed"" )"	9736:4:299618:299643	3071798	0	True				
ANR	3071958	CallExpression	"EXCEPT ( ""SetEvent failed"" )"		3071798	0					
ANR	3071959	Callee	EXCEPT		3071798	0					
ANR	3071960	Identifier	EXCEPT		3071798	0					
ANR	3071961	ArgumentList	"""SetEvent failed"""		3071798	1					
ANR	3071962	Argument	"""SetEvent failed"""		3071798	0					
ANR	3071963	PrimaryExpression	"""SetEvent failed"""		3071798	0					
ANR	3071964	ExpressionStatement	alldone = TRUE	9738:3:299653:299667	3071798	15	True				
ANR	3071965	AssignmentExpression	alldone = TRUE		3071798	0		=			
ANR	3071966	Identifier	alldone		3071798	0					
ANR	3071967	Identifier	TRUE		3071798	1					
ANR	3071968	Statement	::	9741:2:299676:299677	3071798	4	True				
ANR	3071969	ExpressionStatement	LeaveCriticalSection ( & ( entry -> crit_section ) )	9741:4:299678:299722	3071798	5	True				
ANR	3071970	CallExpression	LeaveCriticalSection ( & ( entry -> crit_section ) )		3071798	0					
ANR	3071971	Callee	LeaveCriticalSection		3071798	0					
ANR	3071972	Identifier	LeaveCriticalSection		3071798	0					
ANR	3071973	ArgumentList	& ( entry -> crit_section )		3071798	1					
ANR	3071974	Argument	& ( entry -> crit_section )		3071798	0					
ANR	3071975	UnaryOperationExpression	& ( entry -> crit_section )		3071798	0					
ANR	3071976	UnaryOperator	&		3071798	0					
ANR	3071977	PtrMemberAccess	entry -> crit_section		3071798	1					
ANR	3071978	Identifier	entry		3071798	0					
ANR	3071979	Identifier	crit_section		3071798	1					
ANR	3071980	IfStatement	if ( alldone == TRUE )		3071798	6					
ANR	3071981	Condition	alldone == TRUE	9743:6:299731:299745	3071798	0	True				
ANR	3071982	EqualityExpression	alldone == TRUE		3071798	0		==			
ANR	3071983	Identifier	alldone		3071798	0					
ANR	3071984	Identifier	TRUE		3071798	1					
ANR	3071985	ReturnStatement	return TRUE ;	9744:3:299752:299763	3071798	1	True				
ANR	3071986	Identifier	TRUE		3071798	0					
ANR	3071987	Statement	entry	9749:1:299897:299901	3071798	5	True				
ANR	3071988	Statement	=	9749:7:299903:299903	3071798	6	True				
ANR	3071989	Statement	new	9749:9:299905:299907	3071798	7	True				
ANR	3071990	ExpressionStatement	PidWatcherEntry	9749:13:299909:299924	3071798	8	True				
ANR	3071991	Identifier	PidWatcherEntry		3071798	0					
ANR	3071992	Statement	::	9750:1:299927:299928	3071798	9	True				
ANR	3071993	ExpressionStatement	InitializeCriticalSection ( & ( entry -> crit_section ) )	9750:3:299929:299978	3071798	10	True				
ANR	3071994	CallExpression	InitializeCriticalSection ( & ( entry -> crit_section ) )		3071798	0					
ANR	3071995	Callee	InitializeCriticalSection		3071798	0					
ANR	3071996	Identifier	InitializeCriticalSection		3071798	0					
ANR	3071997	ArgumentList	& ( entry -> crit_section )		3071798	1					
ANR	3071998	Argument	& ( entry -> crit_section )		3071798	0					
ANR	3071999	UnaryOperationExpression	& ( entry -> crit_section )		3071798	0					
ANR	3072000	UnaryOperator	&		3071798	0					
ANR	3072001	PtrMemberAccess	entry -> crit_section		3071798	1					
ANR	3072002	Identifier	entry		3071798	0					
ANR	3072003	Identifier	crit_section		3071798	1					
ANR	3072004	Statement	entry	9751:1:299981:299985	3071798	11	True				
ANR	3072005	Statement	->	9751:6:299986:299987	3071798	12	True				
ANR	3072006	Statement	event	9751:8:299988:299992	3071798	13	True				
ANR	3072007	Statement	=	9751:14:299994:299994	3071798	14	True				
ANR	3072008	Statement	::	9751:16:299996:299997	3071798	15	True				
ANR	3072009	ExpressionStatement	"CreateEvent ( NULL , FALSE , FALSE , NULL )"	9751:18:299998:300032	3071798	16	True				
ANR	3072010	CallExpression	"CreateEvent ( NULL , FALSE , FALSE , NULL )"		3071798	0					
ANR	3072011	Callee	CreateEvent		3071798	0					
ANR	3072012	Identifier	CreateEvent		3071798	0					
ANR	3072013	ArgumentList	NULL		3071798	1					
ANR	3072014	Argument	NULL		3071798	0					
ANR	3072015	Identifier	NULL		3071798	0					
ANR	3072016	Argument	FALSE		3071798	1					
ANR	3072017	Identifier	FALSE		3071798	0					
ANR	3072018	Argument	FALSE		3071798	2					
ANR	3072019	Identifier	FALSE		3071798	0					
ANR	3072020	Argument	NULL		3071798	3					
ANR	3072021	Identifier	NULL		3071798	0					
ANR	3072022	IfStatement	if ( entry -> event == NULL )		3071798	17					
ANR	3072023	Condition	entry -> event == NULL	9752:6:300060:300079	3071798	0	True				
ANR	3072024	EqualityExpression	entry -> event == NULL		3071798	0		==			
ANR	3072025	PtrMemberAccess	entry -> event		3071798	0					
ANR	3072026	Identifier	entry		3071798	0					
ANR	3072027	Identifier	event		3071798	1					
ANR	3072028	Identifier	NULL		3071798	1					
ANR	3072029	CompoundStatement		50:29:1541:1541	3071798	1					
ANR	3072030	ExpressionStatement	"EXCEPT ( ""CreateEvent failed"" )"	9753:2:300087:300115	3071798	0	True				
ANR	3072031	CallExpression	"EXCEPT ( ""CreateEvent failed"" )"		3071798	0					
ANR	3072032	Callee	EXCEPT		3071798	0					
ANR	3072033	Identifier	EXCEPT		3071798	0					
ANR	3072034	ArgumentList	"""CreateEvent failed"""		3071798	1					
ANR	3072035	Argument	"""CreateEvent failed"""		3071798	0					
ANR	3072036	PrimaryExpression	"""CreateEvent failed"""		3071798	0					
ANR	3072037	ExpressionStatement	entry -> pidentries [ 0 ] = pidentry	9755:1:300121:300152	3071798	18	True				
ANR	3072038	AssignmentExpression	entry -> pidentries [ 0 ] = pidentry		3071798	0		=			
ANR	3072039	ArrayIndexing	entry -> pidentries [ 0 ]		3071798	0					
ANR	3072040	PtrMemberAccess	entry -> pidentries		3071798	0					
ANR	3072041	Identifier	entry		3071798	0					
ANR	3072042	Identifier	pidentries		3071798	1					
ANR	3072043	PrimaryExpression	0		3071798	1					
ANR	3072044	Identifier	pidentry		3071798	1					
ANR	3072045	ExpressionStatement	pidentry -> watcherEvent = entry -> event	9756:1:300155:300192	3071798	19	True				
ANR	3072046	AssignmentExpression	pidentry -> watcherEvent = entry -> event		3071798	0		=			
ANR	3072047	PtrMemberAccess	pidentry -> watcherEvent		3071798	0					
ANR	3072048	Identifier	pidentry		3071798	0					
ANR	3072049	Identifier	watcherEvent		3071798	1					
ANR	3072050	PtrMemberAccess	entry -> event		3071798	1					
ANR	3072051	Identifier	entry		3071798	0					
ANR	3072052	Identifier	event		3071798	1					
ANR	3072053	ExpressionStatement	entry -> nEntries = 1	9757:1:300195:300214	3071798	20	True				
ANR	3072054	AssignmentExpression	entry -> nEntries = 1		3071798	0		=			
ANR	3072055	PtrMemberAccess	entry -> nEntries		3071798	0					
ANR	3072056	Identifier	entry		3071798	0					
ANR	3072057	Identifier	nEntries		3071798	1					
ANR	3072058	PrimaryExpression	1		3071798	1					
ANR	3072059	IdentifierDeclStatement	unsigned threadId ;	9758:1:300217:300234	3071798	21	True				
ANR	3072060	IdentifierDecl	threadId		3071798	0					
ANR	3072061	IdentifierDeclType	unsigned		3071798	0					
ANR	3072062	Identifier	threadId		3071798	1					
ANR	3072063	ExpressionStatement	"entry -> hThread = ( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) pidWatcherThread , entry , 0 , & threadId )"	9759:1:300237:300353	3071798	22	True				
ANR	3072064	AssignmentExpression	"entry -> hThread = ( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) pidWatcherThread , entry , 0 , & threadId )"		3071798	0		=			
ANR	3072065	PtrMemberAccess	entry -> hThread		3071798	0					
ANR	3072066	Identifier	entry		3071798	0					
ANR	3072067	Identifier	hThread		3071798	1					
ANR	3072068	CastExpression	"( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) pidWatcherThread , entry , 0 , & threadId )"		3071798	1					
ANR	3072069	CastTarget	HANDLE		3071798	0					
ANR	3072070	CallExpression	"_beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) pidWatcherThread , entry , 0 , & threadId )"		3071798	1					
ANR	3072071	Callee	_beginthreadex		3071798	0					
ANR	3072072	Identifier	_beginthreadex		3071798	0					
ANR	3072073	ArgumentList	NULL		3071798	1					
ANR	3072074	Argument	NULL		3071798	0					
ANR	3072075	Identifier	NULL		3071798	0					
ANR	3072076	Argument	1024		3071798	1					
ANR	3072077	PrimaryExpression	1024		3071798	0					
ANR	3072078	Argument	( CRT_THREAD_HANDLER ) pidWatcherThread		3071798	2					
ANR	3072079	CastExpression	( CRT_THREAD_HANDLER ) pidWatcherThread		3071798	0					
ANR	3072080	CastTarget	CRT_THREAD_HANDLER		3071798	0					
ANR	3072081	Identifier	pidWatcherThread		3071798	1					
ANR	3072082	Argument	entry		3071798	3					
ANR	3072083	Identifier	entry		3071798	0					
ANR	3072084	Argument	0		3071798	4					
ANR	3072085	PrimaryExpression	0		3071798	0					
ANR	3072086	Argument	& threadId		3071798	5					
ANR	3072087	UnaryOperationExpression	& threadId		3071798	0					
ANR	3072088	UnaryOperator	&		3071798	0					
ANR	3072089	Identifier	threadId		3071798	1					
ANR	3072090	IfStatement	if ( entry -> hThread == NULL )		3071798	23					
ANR	3072091	Condition	entry -> hThread == NULL	9762:6:300361:300382	3071798	0	True				
ANR	3072092	EqualityExpression	entry -> hThread == NULL		3071798	0		==			
ANR	3072093	PtrMemberAccess	entry -> hThread		3071798	0					
ANR	3072094	Identifier	entry		3071798	0					
ANR	3072095	Identifier	hThread		3071798	1					
ANR	3072096	Identifier	NULL		3071798	1					
ANR	3072097	CompoundStatement		60:31:1844:1844	3071798	1					
ANR	3072098	ExpressionStatement	"EXCEPT ( ""CreateThread failed"" )"	9763:2:300390:300419	3071798	0	True				
ANR	3072099	CallExpression	"EXCEPT ( ""CreateThread failed"" )"		3071798	0					
ANR	3072100	Callee	EXCEPT		3071798	0					
ANR	3072101	Identifier	EXCEPT		3071798	0					
ANR	3072102	ArgumentList	"""CreateThread failed"""		3071798	1					
ANR	3072103	Argument	"""CreateThread failed"""		3071798	0					
ANR	3072104	PrimaryExpression	"""CreateThread failed"""		3071798	0					
ANR	3072105	ExpressionStatement	PidWatcherList . Append ( entry )	9766:1:300426:300454	3071798	24	True				
ANR	3072106	CallExpression	PidWatcherList . Append ( entry )		3071798	0					
ANR	3072107	Callee	PidWatcherList . Append		3071798	0					
ANR	3072108	MemberAccess	PidWatcherList . Append		3071798	0					
ANR	3072109	Identifier	PidWatcherList		3071798	0					
ANR	3072110	Identifier	Append		3071798	1					
ANR	3072111	ArgumentList	entry		3071798	1					
ANR	3072112	Argument	entry		3071798	0					
ANR	3072113	Identifier	entry		3071798	0					
ANR	3072114	ReturnStatement	return TRUE ;	9768:1:300458:300469	3071798	25	True				
ANR	3072115	Identifier	TRUE		3071798	0					
ANR	3072116	ReturnType	int		3071798	1					
ANR	3072117	Identifier	DaemonCore :: WatchPid		3071798	2					
ANR	3072118	ParameterList	PidEntry * pidentry		3071798	3					
ANR	3072119	Parameter	PidEntry * pidentry	9702:21:298521:298538	3071798	0	True				
ANR	3072120	ParameterType	PidEntry *		3071798	0					
ANR	3072121	Identifier	pidentry		3071798	1					
ANR	3072122	CFGEntryNode	ENTRY		3071798		True				
ANR	3072123	CFGExitNode	EXIT		3071798		True				
ANR	3072124	Symbol	pidentry -> pipeEnd		3071798						
ANR	3072125	Symbol	* * entry		3071798						
ANR	3072126	Symbol	entry -> nEntries		3071798						
ANR	3072127	Symbol	* pidentry		3071798						
ANR	3072128	Symbol	PidWatcherList . Next		3071798						
ANR	3072129	Symbol	_beginthreadex		3071798						
ANR	3072130	Symbol	alldone		3071798						
ANR	3072131	Symbol	threadId		3071798						
ANR	3072132	Symbol	MAXIMUM_WAIT_OBJECTS		3071798						
ANR	3072133	Symbol	* entry -> pidentries		3071798						
ANR	3072134	Symbol	pidWatcherThread		3071798						
ANR	3072135	Symbol	& entry -> crit_section		3071798						
ANR	3072136	Symbol	pidentry		3071798						
ANR	3072137	Symbol	* entry		3071798						
ANR	3072138	Symbol	pidentry -> watcherEvent		3071798						
ANR	3072139	Symbol	NULL		3071798						
ANR	3072140	Symbol	TRUE		3071798						
ANR	3072141	Symbol	PidWatcherList		3071798						
ANR	3072142	Symbol	entry		3071798						
ANR	3072143	Symbol	entry -> pidentries		3071798						
ANR	3072144	Symbol	& threadId		3071798						
ANR	3072145	Symbol	* entry -> nEntries		3071798						
ANR	3072146	Symbol	entry -> hThread		3071798						
ANR	3072147	Symbol	entry -> event		3071798						
ANR	3072148	Symbol	FALSE		3071798						
ANR	3072149	Function	DaemonCore :: CallReaper	9774:0:300496:301723							
ANR	3072150	FunctionDef	"DaemonCore :: CallReaper (int reaper_id , char const * whatexited , pid_t pid , int exit_status)"		3072149	0					
ANR	3072151	CompoundStatement		9776:0:300591:301723	3072149	0					
ANR	3072152	IdentifierDeclStatement	ReapEnt * reaper = NULL ;	9777:1:300594:300616	3072149	0	True				
ANR	3072153	IdentifierDecl	* reaper = NULL		3072149	0					
ANR	3072154	IdentifierDeclType	ReapEnt *		3072149	0					
ANR	3072155	Identifier	reaper		3072149	1					
ANR	3072156	AssignmentExpression	* reaper = NULL		3072149	2		=			
ANR	3072157	Identifier	NULL		3072149	0					
ANR	3072158	Identifier	NULL		3072149	1					
ANR	3072159	IfStatement	if ( reaper_id > 0 )		3072149	1					
ANR	3072160	Condition	reaper_id > 0	9779:5:300624:300636	3072149	0	True				
ANR	3072161	RelationalExpression	reaper_id > 0		3072149	0		>			
ANR	3072162	Identifier	reaper_id		3072149	0					
ANR	3072163	PrimaryExpression	0		3072149	1					
ANR	3072164	CompoundStatement		4:21:48:48	3072149	1					
ANR	3072165	ExpressionStatement	reaper = & ( reapTable [ reaper_id - 1 ] )	9780:2:300644:300678	3072149	0	True				
ANR	3072166	AssignmentExpression	reaper = & ( reapTable [ reaper_id - 1 ] )		3072149	0		=			
ANR	3072167	Identifier	reaper		3072149	0					
ANR	3072168	UnaryOperationExpression	& ( reapTable [ reaper_id - 1 ] )		3072149	1					
ANR	3072169	UnaryOperator	&		3072149	0					
ANR	3072170	ArrayIndexing	reapTable [ reaper_id - 1 ]		3072149	1					
ANR	3072171	Identifier	reapTable		3072149	0					
ANR	3072172	AdditiveExpression	reaper_id - 1		3072149	1		-			
ANR	3072173	Identifier	reaper_id		3072149	0					
ANR	3072174	PrimaryExpression	1		3072149	1					
ANR	3072175	IfStatement	if ( ! reaper || ! ( reaper -> handler || reaper -> handlercpp ) )		3072149	2					
ANR	3072176	Condition	! reaper || ! ( reaper -> handler || reaper -> handlercpp )	9782:5:300688:300738	3072149	0	True				
ANR	3072177	OrExpression	! reaper || ! ( reaper -> handler || reaper -> handlercpp )		3072149	0		||			
ANR	3072178	UnaryOperationExpression	! reaper		3072149	0					
ANR	3072179	UnaryOperator	!		3072149	0					
ANR	3072180	Identifier	reaper		3072149	1					
ANR	3072181	UnaryOperationExpression	! ( reaper -> handler || reaper -> handlercpp )		3072149	1					
ANR	3072182	UnaryOperator	!		3072149	0					
ANR	3072183	OrExpression	reaper -> handler || reaper -> handlercpp		3072149	1		||			
ANR	3072184	PtrMemberAccess	reaper -> handler		3072149	0					
ANR	3072185	Identifier	reaper		3072149	0					
ANR	3072186	Identifier	handler		3072149	1					
ANR	3072187	PtrMemberAccess	reaper -> handlercpp		3072149	1					
ANR	3072188	Identifier	reaper		3072149	0					
ANR	3072189	Identifier	handlercpp		3072149	1					
ANR	3072190	CompoundStatement		7:59:150:150	3072149	1					
ANR	3072191	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore: %s %lu exited with status %d; no registered reaper\\n"" , whatexited , ( unsigned long ) pid , exit_status )"	9784:3:300774:300915	3072149	0	True				
ANR	3072192	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore: %s %lu exited with status %d; no registered reaper\\n"" , whatexited , ( unsigned long ) pid , exit_status )"		3072149	0					
ANR	3072193	Callee	dprintf		3072149	0					
ANR	3072194	Identifier	dprintf		3072149	0					
ANR	3072195	ArgumentList	D_DAEMONCORE		3072149	1					
ANR	3072196	Argument	D_DAEMONCORE		3072149	0					
ANR	3072197	Identifier	D_DAEMONCORE		3072149	0					
ANR	3072198	Argument	"""DaemonCore: %s %lu exited with status %d; no registered reaper\\n"""		3072149	1					
ANR	3072199	PrimaryExpression	"""DaemonCore: %s %lu exited with status %d; no registered reaper\\n"""		3072149	0					
ANR	3072200	Argument	whatexited		3072149	2					
ANR	3072201	Identifier	whatexited		3072149	0					
ANR	3072202	Argument	( unsigned long ) pid		3072149	3					
ANR	3072203	CastExpression	( unsigned long ) pid		3072149	0					
ANR	3072204	CastTarget	unsigned long		3072149	0					
ANR	3072205	Identifier	pid		3072149	1					
ANR	3072206	Argument	exit_status		3072149	4					
ANR	3072207	Identifier	exit_status		3072149	0					
ANR	3072208	ReturnStatement	return ;	9787:2:300919:300925	3072149	1	True				
ANR	3072209	ExpressionStatement	curr_dataptr = & ( reaper -> data_ptr )	9791:1:300975:301009	3072149	3	True				
ANR	3072210	AssignmentExpression	curr_dataptr = & ( reaper -> data_ptr )		3072149	0		=			
ANR	3072211	Identifier	curr_dataptr		3072149	0					
ANR	3072212	UnaryOperationExpression	& ( reaper -> data_ptr )		3072149	1					
ANR	3072213	UnaryOperator	&		3072149	0					
ANR	3072214	PtrMemberAccess	reaper -> data_ptr		3072149	1					
ANR	3072215	Identifier	reaper		3072149	0					
ANR	3072216	Identifier	data_ptr		3072149	1					
ANR	3072217	IdentifierDeclStatement	const char * hdescrip = reaper -> handler_descrip ;	9794:1:301032:301078	3072149	4	True				
ANR	3072218	IdentifierDecl	* hdescrip = reaper -> handler_descrip		3072149	0					
ANR	3072219	IdentifierDeclType	const char *		3072149	0					
ANR	3072220	Identifier	hdescrip		3072149	1					
ANR	3072221	AssignmentExpression	* hdescrip = reaper -> handler_descrip		3072149	2		=			
ANR	3072222	Identifier	hdescrip		3072149	0					
ANR	3072223	PtrMemberAccess	reaper -> handler_descrip		3072149	1					
ANR	3072224	Identifier	reaper		3072149	0					
ANR	3072225	Identifier	handler_descrip		3072149	1					
ANR	3072226	IfStatement	if ( ! hdescrip )		3072149	5					
ANR	3072227	Condition	! hdescrip	9795:6:301086:301094	3072149	0	True				
ANR	3072228	UnaryOperationExpression	! hdescrip		3072149	0					
ANR	3072229	UnaryOperator	!		3072149	0					
ANR	3072230	Identifier	hdescrip		3072149	1					
ANR	3072231	CompoundStatement		20:18:506:506	3072149	1					
ANR	3072232	ExpressionStatement	hdescrip = EMPTY_DESCRIP	9796:2:301102:301126	3072149	0	True				
ANR	3072233	AssignmentExpression	hdescrip = EMPTY_DESCRIP		3072149	0		=			
ANR	3072234	Identifier	hdescrip		3072149	0					
ANR	3072235	Identifier	EMPTY_DESCRIP		3072149	1					
ANR	3072236	Statement	dprintf	9798:1:301132:301138	3072149	6	True				
ANR	3072237	Statement	(	9798:8:301139:301139	3072149	7	True				
ANR	3072238	Statement	D_COMMAND	9798:9:301140:301148	3072149	8	True				
ANR	3072239	Statement	","	9798:18:301149:301149	3072149	9	True				
ANR	3072240	Statement	"""DaemonCore: %s %lu exited with status %d, invoking reaper """	9799:2:301153:301212	3072149	10	True				
ANR	3072241	Statement	"""%d <%s>\\n"""	9800:2:301216:301226	3072149	11	True				
ANR	3072242	Statement	","	9800:13:301227:301227	3072149	12	True				
ANR	3072243	Statement	whatexited	9801:2:301231:301240	3072149	13	True				
ANR	3072244	Statement	","	9801:12:301241:301241	3072149	14	True				
ANR	3072245	Statement	(	9801:14:301243:301243	3072149	15	True				
ANR	3072246	Statement	unsigned	9801:15:301244:301251	3072149	16	True				
ANR	3072247	Statement	long	9801:24:301253:301256	3072149	17	True				
ANR	3072248	Statement	)	9801:28:301257:301257	3072149	18	True				
ANR	3072249	Statement	pid	9801:29:301258:301260	3072149	19	True				
ANR	3072250	Statement	","	9801:32:301261:301261	3072149	20	True				
ANR	3072251	Statement	exit_status	9801:34:301263:301273	3072149	21	True				
ANR	3072252	Statement	","	9801:45:301274:301274	3072149	22	True				
ANR	3072253	Statement	reaper_id	9801:47:301276:301284	3072149	23	True				
ANR	3072254	Statement	","	9801:56:301285:301285	3072149	24	True				
ANR	3072255	Statement	hdescrip	9801:58:301287:301294	3072149	25	True				
ANR	3072256	Statement	)	9801:66:301295:301295	3072149	26	True				
ANR	3072257	ExpressionStatement		9801:67:301296:301296	3072149	27	True				
ANR	3072258	IfStatement	if ( reaper -> handler )		3072149	28					
ANR	3072259	Condition	reaper -> handler	9803:6:301305:301319	3072149	0	True				
ANR	3072260	PtrMemberAccess	reaper -> handler		3072149	0					
ANR	3072261	Identifier	reaper		3072149	0					
ANR	3072262	Identifier	handler		3072149	1					
ANR	3072263	CompoundStatement		28:24:731:731	3072149	1					
ANR	3072264	ExpressionStatement	"( * ( reaper -> handler ) ) ( reaper -> service , pid , exit_status )"	9805:2:301344:301397	3072149	0	True				
ANR	3072265	CallExpression	"( * ( reaper -> handler ) ) ( reaper -> service , pid , exit_status )"		3072149	0					
ANR	3072266	Callee	* ( reaper -> handler )		3072149	0					
ANR	3072267	UnaryOperationExpression	* ( reaper -> handler )		3072149	0					
ANR	3072268	UnaryOperator	*		3072149	0					
ANR	3072269	PtrMemberAccess	reaper -> handler		3072149	1					
ANR	3072270	Identifier	reaper		3072149	0					
ANR	3072271	Identifier	handler		3072149	1					
ANR	3072272	ArgumentList	reaper -> service		3072149	1					
ANR	3072273	Argument	reaper -> service		3072149	0					
ANR	3072274	PtrMemberAccess	reaper -> service		3072149	0					
ANR	3072275	Identifier	reaper		3072149	0					
ANR	3072276	Identifier	service		3072149	1					
ANR	3072277	Argument	pid		3072149	1					
ANR	3072278	Identifier	pid		3072149	0					
ANR	3072279	Argument	exit_status		3072149	2					
ANR	3072280	Identifier	exit_status		3072149	0					
ANR	3072281	ElseStatement	else		3072149	0					
ANR	3072282	IfStatement	if ( reaper -> handlercpp )		3072149	0					
ANR	3072283	Condition	reaper -> handlercpp	9807:11:301413:301430	3072149	0	True				
ANR	3072284	PtrMemberAccess	reaper -> handlercpp		3072149	0					
ANR	3072285	Identifier	reaper		3072149	0					
ANR	3072286	Identifier	handlercpp		3072149	1					
ANR	3072287	CompoundStatement		32:32:842:842	3072149	1					
ANR	3072288	Statement	(	9809:2:301457:301457	3072149	0	True				
ANR	3072289	Statement	reaper	9809:3:301458:301463	3072149	1	True				
ANR	3072290	Statement	->	9809:9:301464:301465	3072149	2	True				
ANR	3072291	Statement	service	9809:11:301466:301472	3072149	3	True				
ANR	3072292	Statement	->*	9809:18:301473:301475	3072149	4	True				
ANR	3072293	Statement	(	9809:21:301476:301476	3072149	5	True				
ANR	3072294	Statement	reaper	9809:22:301477:301482	3072149	6	True				
ANR	3072295	Statement	->	9809:28:301483:301484	3072149	7	True				
ANR	3072296	Statement	handlercpp	9809:30:301485:301494	3072149	8	True				
ANR	3072297	Statement	)	9809:40:301495:301495	3072149	9	True				
ANR	3072298	Statement	)	9809:41:301496:301496	3072149	10	True				
ANR	3072299	ExpressionStatement	"pid , exit_status"	9809:42:301497:301514	3072149	11	True				
ANR	3072300	Expression	"pid , exit_status"		3072149	0					
ANR	3072301	Identifier	pid		3072149	0					
ANR	3072302	Identifier	exit_status		3072149	1					
ANR	3072303	ExpressionStatement	"dprintf ( D_COMMAND , ""DaemonCore: return from reaper for pid %lu\\n"" , ( unsigned long ) pid )"	9812:1:301521:301610	3072149	29	True				
ANR	3072304	CallExpression	"dprintf ( D_COMMAND , ""DaemonCore: return from reaper for pid %lu\\n"" , ( unsigned long ) pid )"		3072149	0					
ANR	3072305	Callee	dprintf		3072149	0					
ANR	3072306	Identifier	dprintf		3072149	0					
ANR	3072307	ArgumentList	D_COMMAND		3072149	1					
ANR	3072308	Argument	D_COMMAND		3072149	0					
ANR	3072309	Identifier	D_COMMAND		3072149	0					
ANR	3072310	Argument	"""DaemonCore: return from reaper for pid %lu\\n"""		3072149	1					
ANR	3072311	PrimaryExpression	"""DaemonCore: return from reaper for pid %lu\\n"""		3072149	0					
ANR	3072312	Argument	( unsigned long ) pid		3072149	2					
ANR	3072313	CastExpression	( unsigned long ) pid		3072149	0					
ANR	3072314	CastTarget	unsigned long		3072149	0					
ANR	3072315	Identifier	pid		3072149	1					
ANR	3072316	ExpressionStatement	CheckPrivState ( )	9816:1:301659:301675	3072149	30	True				
ANR	3072317	CallExpression	CheckPrivState ( )		3072149	0					
ANR	3072318	Callee	CheckPrivState		3072149	0					
ANR	3072319	Identifier	CheckPrivState		3072149	0					
ANR	3072320	ArgumentList			3072149	1					
ANR	3072321	ExpressionStatement	curr_dataptr = NULL	9819:1:301702:301721	3072149	31	True				
ANR	3072322	AssignmentExpression	curr_dataptr = NULL		3072149	0		=			
ANR	3072323	Identifier	curr_dataptr		3072149	0					
ANR	3072324	Identifier	NULL		3072149	1					
ANR	3072325	ReturnType	void		3072149	1					
ANR	3072326	Identifier	DaemonCore :: CallReaper		3072149	2					
ANR	3072327	ParameterList	"int reaper_id , char const * whatexited , pid_t pid , int exit_status"		3072149	3					
ANR	3072328	Parameter	int reaper_id	9775:23:300524:300536	3072149	0	True				
ANR	3072329	ParameterType	int		3072149	0					
ANR	3072330	Identifier	reaper_id		3072149	1					
ANR	3072331	Parameter	char const * whatexited	9775:38:300539:300560	3072149	1	True				
ANR	3072332	ParameterType	char const *		3072149	0					
ANR	3072333	Identifier	whatexited		3072149	1					
ANR	3072334	Parameter	pid_t pid	9775:62:300563:300571	3072149	2	True				
ANR	3072335	ParameterType	pid_t		3072149	0					
ANR	3072336	Identifier	pid		3072149	1					
ANR	3072337	Parameter	int exit_status	9775:73:300574:300588	3072149	3	True				
ANR	3072338	ParameterType	int		3072149	0					
ANR	3072339	Identifier	exit_status		3072149	1					
ANR	3072340	CFGEntryNode	ENTRY		3072149		True				
ANR	3072341	CFGExitNode	EXIT		3072149		True				
ANR	3072342	Symbol	& reaper -> data_ptr		3072149						
ANR	3072343	Symbol	reaper -> handler		3072149						
ANR	3072344	Symbol	NULL		3072149						
ANR	3072345	Symbol	reaper_id		3072149						
ANR	3072346	Symbol	D_DAEMONCORE		3072149						
ANR	3072347	Symbol	hdescrip		3072149						
ANR	3072348	Symbol	pid		3072149						
ANR	3072349	Symbol	reaper		3072149						
ANR	3072350	Symbol	exit_status		3072149						
ANR	3072351	Symbol	curr_dataptr		3072149						
ANR	3072352	Symbol	reaper -> handlercpp		3072149						
ANR	3072353	Symbol	reaper -> service		3072149						
ANR	3072354	Symbol	reapTable		3072149						
ANR	3072355	Symbol	EMPTY_DESCRIP		3072149						
ANR	3072356	Symbol	whatexited		3072149						
ANR	3072357	Symbol	reaper -> handler_descrip		3072149						
ANR	3072358	Symbol	* reaper		3072149						
ANR	3072359	Symbol	D_COMMAND		3072149						
ANR	3072360	Function	DaemonCore :: HandleProcessExit	9825:0:301948:306052							
ANR	3072361	FunctionDef	"DaemonCore :: HandleProcessExit (pid_t pid , int exit_status)"		3072360	0					
ANR	3072362	CompoundStatement		9826:0:302010:306052	3072360	0					
ANR	3072363	IdentifierDeclStatement	PidEntry * pidentry ;	9827:1:302013:302031	3072360	0	True				
ANR	3072364	IdentifierDecl	* pidentry		3072360	0					
ANR	3072365	IdentifierDeclType	PidEntry *		3072360	0					
ANR	3072366	Identifier	pidentry		3072360	1					
ANR	3072367	IdentifierDeclStatement	"const char * whatexited = ""pid"" ;"	9828:1:302034:302064	3072360	1	True				
ANR	3072368	IdentifierDecl	"* whatexited = ""pid"""		3072360	0					
ANR	3072369	IdentifierDeclType	const char *		3072360	0					
ANR	3072370	Identifier	whatexited		3072360	1					
ANR	3072371	AssignmentExpression	"* whatexited = ""pid"""		3072360	2		=			
ANR	3072372	Identifier	whatexited		3072360	0					
ANR	3072373	PrimaryExpression	"""pid"""		3072360	1					
ANR	3072374	IdentifierDeclStatement	int i ;	9829:1:302096:302101	3072360	2	True				
ANR	3072375	IdentifierDecl	i		3072360	0					
ANR	3072376	IdentifierDeclType	int		3072360	0					
ANR	3072377	Identifier	i		3072360	1					
ANR	3072378	IfStatement	"if ( pidTable -> lookup ( pid , pidentry ) == - 1 )"		3072360	3					
ANR	3072379	Condition	"pidTable -> lookup ( pid , pidentry ) == - 1"	9832:6:302167:302202	3072360	0	True				
ANR	3072380	EqualityExpression	"pidTable -> lookup ( pid , pidentry ) == - 1"		3072360	0		==			
ANR	3072381	CallExpression	"pidTable -> lookup ( pid , pidentry )"		3072360	0					
ANR	3072382	Callee	pidTable -> lookup		3072360	0					
ANR	3072383	PtrMemberAccess	pidTable -> lookup		3072360	0					
ANR	3072384	Identifier	pidTable		3072360	0					
ANR	3072385	Identifier	lookup		3072360	1					
ANR	3072386	ArgumentList	pid		3072360	1					
ANR	3072387	Argument	pid		3072360	0					
ANR	3072388	Identifier	pid		3072360	0					
ANR	3072389	Argument	pidentry		3072360	1					
ANR	3072390	Identifier	pidentry		3072360	0					
ANR	3072391	UnaryOperationExpression	- 1		3072360	1					
ANR	3072392	UnaryOperator	-		3072360	0					
ANR	3072393	PrimaryExpression	1		3072360	1					
ANR	3072394	CompoundStatement		7:45:195:195	3072360	1					
ANR	3072395	IfStatement	if ( defaultReaper != - 1 )		3072360	0					
ANR	3072396	Condition	defaultReaper != - 1	9834:6:302215:302231	3072360	0	True				
ANR	3072397	EqualityExpression	defaultReaper != - 1		3072360	0		!=			
ANR	3072398	Identifier	defaultReaper		3072360	0					
ANR	3072399	UnaryOperationExpression	- 1		3072360	1					
ANR	3072400	UnaryOperator	-		3072360	0					
ANR	3072401	PrimaryExpression	1		3072360	1					
ANR	3072402	CompoundStatement		9:26:224:224	3072360	1					
ANR	3072403	Statement	pidentry	9835:3:302240:302247	3072360	0	True				
ANR	3072404	Statement	=	9835:12:302249:302249	3072360	1	True				
ANR	3072405	Statement	new	9835:14:302251:302253	3072360	2	True				
ANR	3072406	ExpressionStatement	PidEntry	9835:18:302255:302263	3072360	3	True				
ANR	3072407	Identifier	PidEntry		3072360	0					
ANR	3072408	ExpressionStatement	ASSERT ( pidentry )	9836:3:302268:302284	3072360	4	True				
ANR	3072409	CallExpression	ASSERT ( pidentry )		3072360	0					
ANR	3072410	Callee	ASSERT		3072360	0					
ANR	3072411	Identifier	ASSERT		3072360	0					
ANR	3072412	ArgumentList	pidentry		3072360	1					
ANR	3072413	Argument	pidentry		3072360	0					
ANR	3072414	Identifier	pidentry		3072360	0					
ANR	3072415	ExpressionStatement	pidentry -> parent_is_local = TRUE	9837:3:302289:302321	3072360	5	True				
ANR	3072416	AssignmentExpression	pidentry -> parent_is_local = TRUE		3072360	0		=			
ANR	3072417	PtrMemberAccess	pidentry -> parent_is_local		3072360	0					
ANR	3072418	Identifier	pidentry		3072360	0					
ANR	3072419	Identifier	parent_is_local		3072360	1					
ANR	3072420	Identifier	TRUE		3072360	1					
ANR	3072421	ExpressionStatement	pidentry -> reaper_id = defaultReaper	9838:3:302326:302361	3072360	6	True				
ANR	3072422	AssignmentExpression	pidentry -> reaper_id = defaultReaper		3072360	0		=			
ANR	3072423	PtrMemberAccess	pidentry -> reaper_id		3072360	0					
ANR	3072424	Identifier	pidentry		3072360	0					
ANR	3072425	Identifier	reaper_id		3072360	1					
ANR	3072426	Identifier	defaultReaper		3072360	1					
ANR	3072427	ExpressionStatement	pidentry -> hung_tid = - 1	9839:3:302366:302389	3072360	7	True				
ANR	3072428	AssignmentExpression	pidentry -> hung_tid = - 1		3072360	0		=			
ANR	3072429	PtrMemberAccess	pidentry -> hung_tid		3072360	0					
ANR	3072430	Identifier	pidentry		3072360	0					
ANR	3072431	Identifier	hung_tid		3072360	1					
ANR	3072432	UnaryOperationExpression	- 1		3072360	1					
ANR	3072433	UnaryOperator	-		3072360	0					
ANR	3072434	PrimaryExpression	1		3072360	1					
ANR	3072435	ExpressionStatement	pidentry -> new_process_group = FALSE	9840:3:302394:302429	3072360	8	True				
ANR	3072436	AssignmentExpression	pidentry -> new_process_group = FALSE		3072360	0		=			
ANR	3072437	PtrMemberAccess	pidentry -> new_process_group		3072360	0					
ANR	3072438	Identifier	pidentry		3072360	0					
ANR	3072439	Identifier	new_process_group		3072360	1					
ANR	3072440	Identifier	FALSE		3072360	1					
ANR	3072441	ElseStatement	else		3072360	0					
ANR	3072442	CompoundStatement		16:9:429:429	3072360	0					
ANR	3072443	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Unknown process exited (popen?) - pid=%d\\n"" , pid )"	9846:3:302544:302619	3072360	0	True				
ANR	3072444	CallExpression	"dprintf ( D_DAEMONCORE , ""Unknown process exited (popen?) - pid=%d\\n"" , pid )"		3072360	0					
ANR	3072445	Callee	dprintf		3072360	0					
ANR	3072446	Identifier	dprintf		3072360	0					
ANR	3072447	ArgumentList	D_DAEMONCORE		3072360	1					
ANR	3072448	Argument	D_DAEMONCORE		3072360	0					
ANR	3072449	Identifier	D_DAEMONCORE		3072360	0					
ANR	3072450	Argument	"""Unknown process exited (popen?) - pid=%d\\n"""		3072360	1					
ANR	3072451	PrimaryExpression	"""Unknown process exited (popen?) - pid=%d\\n"""		3072360	0					
ANR	3072452	Argument	pid		3072360	2					
ANR	3072453	Identifier	pid		3072360	0					
ANR	3072454	ReturnStatement	return FALSE ;	9848:3:302624:302636	3072360	1	True				
ANR	3072455	Identifier	FALSE		3072360	0					
ANR	3072456	ForStatement	for ( i = 1 ; i <= 2 ; i ++ )		3072360	4					
ANR	3072457	ForInit	i = 1 ;	9854:6:302777:302780	3072360	0	True				
ANR	3072458	AssignmentExpression	i = 1		3072360	0		=			
ANR	3072459	Identifier	i		3072360	0					
ANR	3072460	PrimaryExpression	1		3072360	1					
ANR	3072461	Condition	i <= 2	9854:11:302782:302785	3072360	1	True				
ANR	3072462	RelationalExpression	i <= 2		3072360	0		<=			
ANR	3072463	Identifier	i		3072360	0					
ANR	3072464	PrimaryExpression	2		3072360	1					
ANR	3072465	PostIncDecOperationExpression	i ++	9854:17:302788:302790	3072360	2	True				
ANR	3072466	Identifier	i		3072360	0					
ANR	3072467	IncDec	++		3072360	1					
ANR	3072468	CompoundStatement		29:22:782:782	3072360	3					
ANR	3072469	IfStatement	if ( pidentry -> std_pipes [ i ] != DC_STD_FD_NOPIPE )		3072360	0					
ANR	3072470	Condition	pidentry -> std_pipes [ i ] != DC_STD_FD_NOPIPE	9855:6:302801:302842	3072360	0	True				
ANR	3072471	EqualityExpression	pidentry -> std_pipes [ i ] != DC_STD_FD_NOPIPE		3072360	0		!=			
ANR	3072472	ArrayIndexing	pidentry -> std_pipes [ i ]		3072360	0					
ANR	3072473	PtrMemberAccess	pidentry -> std_pipes		3072360	0					
ANR	3072474	Identifier	pidentry		3072360	0					
ANR	3072475	Identifier	std_pipes		3072360	1					
ANR	3072476	Identifier	i		3072360	1					
ANR	3072477	Identifier	DC_STD_FD_NOPIPE		3072360	1					
ANR	3072478	CompoundStatement		30:50:834:834	3072360	1					
ANR	3072479	ExpressionStatement	pidentry -> pipeHandler ( pidentry -> std_pipes [ i ] )	9856:3:302850:302895	3072360	0	True				
ANR	3072480	CallExpression	pidentry -> pipeHandler ( pidentry -> std_pipes [ i ] )		3072360	0					
ANR	3072481	Callee	pidentry -> pipeHandler		3072360	0					
ANR	3072482	PtrMemberAccess	pidentry -> pipeHandler		3072360	0					
ANR	3072483	Identifier	pidentry		3072360	0					
ANR	3072484	Identifier	pipeHandler		3072360	1					
ANR	3072485	ArgumentList	pidentry -> std_pipes [ i ]		3072360	1					
ANR	3072486	Argument	pidentry -> std_pipes [ i ]		3072360	0					
ANR	3072487	ArrayIndexing	pidentry -> std_pipes [ i ]		3072360	0					
ANR	3072488	PtrMemberAccess	pidentry -> std_pipes		3072360	0					
ANR	3072489	Identifier	pidentry		3072360	0					
ANR	3072490	Identifier	std_pipes		3072360	1					
ANR	3072491	Identifier	i		3072360	1					
ANR	3072492	ExpressionStatement	Close_Pipe ( pidentry -> std_pipes [ i ] )	9857:3:302900:302934	3072360	1	True				
ANR	3072493	CallExpression	Close_Pipe ( pidentry -> std_pipes [ i ] )		3072360	0					
ANR	3072494	Callee	Close_Pipe		3072360	0					
ANR	3072495	Identifier	Close_Pipe		3072360	0					
ANR	3072496	ArgumentList	pidentry -> std_pipes [ i ]		3072360	1					
ANR	3072497	Argument	pidentry -> std_pipes [ i ]		3072360	0					
ANR	3072498	ArrayIndexing	pidentry -> std_pipes [ i ]		3072360	0					
ANR	3072499	PtrMemberAccess	pidentry -> std_pipes		3072360	0					
ANR	3072500	Identifier	pidentry		3072360	0					
ANR	3072501	Identifier	std_pipes		3072360	1					
ANR	3072502	Identifier	i		3072360	1					
ANR	3072503	ExpressionStatement	pidentry -> std_pipes [ i ] = DC_STD_FD_NOPIPE	9858:3:302939:302980	3072360	2	True				
ANR	3072504	AssignmentExpression	pidentry -> std_pipes [ i ] = DC_STD_FD_NOPIPE		3072360	0		=			
ANR	3072505	ArrayIndexing	pidentry -> std_pipes [ i ]		3072360	0					
ANR	3072506	PtrMemberAccess	pidentry -> std_pipes		3072360	0					
ANR	3072507	Identifier	pidentry		3072360	0					
ANR	3072508	Identifier	std_pipes		3072360	1					
ANR	3072509	Identifier	i		3072360	1					
ANR	3072510	Identifier	DC_STD_FD_NOPIPE		3072360	1					
ANR	3072511	IfStatement	if ( pidentry -> std_pipes [ 0 ] != DC_STD_FD_NOPIPE )		3072360	5					
ANR	3072512	Condition	pidentry -> std_pipes [ 0 ] != DC_STD_FD_NOPIPE	9863:5:303057:303098	3072360	0	True				
ANR	3072513	EqualityExpression	pidentry -> std_pipes [ 0 ] != DC_STD_FD_NOPIPE		3072360	0		!=			
ANR	3072514	ArrayIndexing	pidentry -> std_pipes [ 0 ]		3072360	0					
ANR	3072515	PtrMemberAccess	pidentry -> std_pipes		3072360	0					
ANR	3072516	Identifier	pidentry		3072360	0					
ANR	3072517	Identifier	std_pipes		3072360	1					
ANR	3072518	PrimaryExpression	0		3072360	1					
ANR	3072519	Identifier	DC_STD_FD_NOPIPE		3072360	1					
ANR	3072520	CompoundStatement		38:49:1090:1090	3072360	1					
ANR	3072521	ExpressionStatement	Close_Pipe ( pidentry -> std_pipes [ 0 ] )	9864:2:303105:303139	3072360	0	True				
ANR	3072522	CallExpression	Close_Pipe ( pidentry -> std_pipes [ 0 ] )		3072360	0					
ANR	3072523	Callee	Close_Pipe		3072360	0					
ANR	3072524	Identifier	Close_Pipe		3072360	0					
ANR	3072525	ArgumentList	pidentry -> std_pipes [ 0 ]		3072360	1					
ANR	3072526	Argument	pidentry -> std_pipes [ 0 ]		3072360	0					
ANR	3072527	ArrayIndexing	pidentry -> std_pipes [ 0 ]		3072360	0					
ANR	3072528	PtrMemberAccess	pidentry -> std_pipes		3072360	0					
ANR	3072529	Identifier	pidentry		3072360	0					
ANR	3072530	Identifier	std_pipes		3072360	1					
ANR	3072531	PrimaryExpression	0		3072360	1					
ANR	3072532	ExpressionStatement	pidentry -> std_pipes [ 0 ] = DC_STD_FD_NOPIPE	9865:2:303143:303184	3072360	1	True				
ANR	3072533	AssignmentExpression	pidentry -> std_pipes [ 0 ] = DC_STD_FD_NOPIPE		3072360	0		=			
ANR	3072534	ArrayIndexing	pidentry -> std_pipes [ 0 ]		3072360	0					
ANR	3072535	PtrMemberAccess	pidentry -> std_pipes		3072360	0					
ANR	3072536	Identifier	pidentry		3072360	0					
ANR	3072537	Identifier	std_pipes		3072360	1					
ANR	3072538	PrimaryExpression	0		3072360	1					
ANR	3072539	Identifier	DC_STD_FD_NOPIPE		3072360	1					
ANR	3072540	ExpressionStatement	clearSession ( pid )	9869:4:303270:303287	3072360	6	True				
ANR	3072541	CallExpression	clearSession ( pid )		3072360	0					
ANR	3072542	Callee	clearSession		3072360	0					
ANR	3072543	Identifier	clearSession		3072360	0					
ANR	3072544	ArgumentList	pid		3072360	1					
ANR	3072545	Argument	pid		3072360	0					
ANR	3072546	Identifier	pid		3072360	0					
ANR	3072547	ExpressionStatement	pidentry -> deallocate = 0L	9875:1:303500:303525	3072360	7	True				
ANR	3072548	AssignmentExpression	pidentry -> deallocate = 0L		3072360	0		=			
ANR	3072549	PtrMemberAccess	pidentry -> deallocate		3072360	0					
ANR	3072550	Identifier	pidentry		3072360	0					
ANR	3072551	Identifier	deallocate		3072360	1					
ANR	3072552	PrimaryExpression	0L		3072360	1					
ANR	3072553	IfStatement	if ( pidentry -> is_local )		3072360	8					
ANR	3072554	Condition	pidentry -> is_local	9877:6:303562:303579	3072360	0	True				
ANR	3072555	PtrMemberAccess	pidentry -> is_local		3072360	0					
ANR	3072556	Identifier	pidentry		3072360	0					
ANR	3072557	Identifier	is_local		3072360	1					
ANR	3072558	CompoundStatement		53:2:1576:1589	3072360	1					
ANR	3072559	IdentifierDeclStatement	DWORD winexit ;	9878:2:303587:303600	3072360	0	True				
ANR	3072560	IdentifierDecl	winexit		3072360	0					
ANR	3072561	IdentifierDeclType	DWORD		3072360	0					
ANR	3072562	Identifier	winexit		3072360	1					
ANR	3072563	IfStatement	if ( pidentry -> hProcess )		3072360	1					
ANR	3072564	Condition	pidentry -> hProcess	9882:7:303703:303720	3072360	0	True				
ANR	3072565	PtrMemberAccess	pidentry -> hProcess		3072360	0					
ANR	3072566	Identifier	pidentry		3072360	0					
ANR	3072567	Identifier	hProcess		3072360	1					
ANR	3072568	CompoundStatement		57:28:1713:1713	3072360	1					
ANR	3072569	Statement	if	9884:3:303752:303753	3072360	0	True				
ANR	3072570	Statement	(	9884:6:303755:303755	3072360	1	True				
ANR	3072571	Statement	!	9884:8:303757:303757	3072360	2	True				
ANR	3072572	Statement	::	9884:9:303758:303759	3072360	3	True				
ANR	3072573	Statement	GetExitCodeProcess	9884:11:303760:303777	3072360	4	True				
ANR	3072574	Statement	(	9884:29:303778:303778	3072360	5	True				
ANR	3072575	Statement	pidentry	9884:30:303779:303786	3072360	6	True				
ANR	3072576	Statement	->	9884:38:303787:303788	3072360	7	True				
ANR	3072577	Statement	hProcess	9884:40:303789:303796	3072360	8	True				
ANR	3072578	Statement	","	9884:48:303797:303797	3072360	9	True				
ANR	3072579	Statement	&	9884:49:303798:303798	3072360	10	True				
ANR	3072580	Statement	winexit	9884:50:303799:303805	3072360	11	True				
ANR	3072581	Statement	)	9884:57:303806:303806	3072360	12	True				
ANR	3072582	Statement	)	9884:59:303808:303808	3072360	13	True				
ANR	3072583	CompoundStatement		59:61:1799:1799	3072360	14					
ANR	3072584	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Cannot get exit status for pid = %d\\n"" , pid )"	9885:4:303816:303892	3072360	0	True				
ANR	3072585	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Cannot get exit status for pid = %d\\n"" , pid )"		3072360	0					
ANR	3072586	Callee	dprintf		3072360	0					
ANR	3072587	Identifier	dprintf		3072360	0					
ANR	3072588	ArgumentList	D_ALWAYS		3072360	1					
ANR	3072589	Argument	D_ALWAYS		3072360	0					
ANR	3072590	Identifier	D_ALWAYS		3072360	0					
ANR	3072591	Argument	"""WARNING: Cannot get exit status for pid = %d\\n"""		3072360	1					
ANR	3072592	PrimaryExpression	"""WARNING: Cannot get exit status for pid = %d\\n"""		3072360	0					
ANR	3072593	Argument	pid		3072360	2					
ANR	3072594	Identifier	pid		3072360	0					
ANR	3072595	ReturnStatement	return FALSE ;	9887:4:303898:303910	3072360	1	True				
ANR	3072596	Identifier	FALSE		3072360	0					
ANR	3072597	ElseStatement	else		3072360	0					
ANR	3072598	CompoundStatement		64:9:1915:1915	3072360	0					
ANR	3072599	Statement	if	9891:3:303983:303984	3072360	0	True				
ANR	3072600	Statement	(	9891:6:303986:303986	3072360	1	True				
ANR	3072601	Statement	!	9891:8:303988:303988	3072360	2	True				
ANR	3072602	Statement	::	9891:9:303989:303990	3072360	3	True				
ANR	3072603	Statement	GetExitCodeThread	9891:11:303991:304007	3072360	4	True				
ANR	3072604	Statement	(	9891:28:304008:304008	3072360	5	True				
ANR	3072605	Statement	pidentry	9891:29:304009:304016	3072360	6	True				
ANR	3072606	Statement	->	9891:37:304017:304018	3072360	7	True				
ANR	3072607	Statement	hThread	9891:39:304019:304025	3072360	8	True				
ANR	3072608	Statement	","	9891:46:304026:304026	3072360	9	True				
ANR	3072609	Statement	&	9891:47:304027:304027	3072360	10	True				
ANR	3072610	Statement	winexit	9891:48:304028:304034	3072360	11	True				
ANR	3072611	Statement	)	9891:55:304035:304035	3072360	12	True				
ANR	3072612	Statement	)	9891:57:304037:304037	3072360	13	True				
ANR	3072613	CompoundStatement		66:59:2028:2028	3072360	14					
ANR	3072614	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Cannot get exit status for tid = %d\\n"" , pid )"	9892:4:304045:304121	3072360	0	True				
ANR	3072615	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Cannot get exit status for tid = %d\\n"" , pid )"		3072360	0					
ANR	3072616	Callee	dprintf		3072360	0					
ANR	3072617	Identifier	dprintf		3072360	0					
ANR	3072618	ArgumentList	D_ALWAYS		3072360	1					
ANR	3072619	Argument	D_ALWAYS		3072360	0					
ANR	3072620	Identifier	D_ALWAYS		3072360	0					
ANR	3072621	Argument	"""WARNING: Cannot get exit status for tid = %d\\n"""		3072360	1					
ANR	3072622	PrimaryExpression	"""WARNING: Cannot get exit status for tid = %d\\n"""		3072360	0					
ANR	3072623	Argument	pid		3072360	2					
ANR	3072624	Identifier	pid		3072360	0					
ANR	3072625	ReturnStatement	return FALSE ;	9894:4:304127:304139	3072360	1	True				
ANR	3072626	Identifier	FALSE		3072360	0					
ANR	3072627	ExpressionStatement	"whatexited = ""tid"""	9896:3:304149:304167	3072360	15	True				
ANR	3072628	AssignmentExpression	"whatexited = ""tid"""		3072360	0		=			
ANR	3072629	Identifier	whatexited		3072360	0					
ANR	3072630	PrimaryExpression	"""tid"""		3072360	1					
ANR	3072631	IfStatement	if ( winexit == STILL_ACTIVE )		3072360	2					
ANR	3072632	Condition	winexit == STILL_ACTIVE	9898:7:304180:304202	3072360	0	True				
ANR	3072633	EqualityExpression	winexit == STILL_ACTIVE		3072360	0		==			
ANR	3072634	Identifier	winexit		3072360	0					
ANR	3072635	Identifier	STILL_ACTIVE		3072360	1					
ANR	3072636	CompoundStatement		73:33:2195:2195	3072360	1					
ANR	3072637	ExpressionStatement	"EXCEPT ( ""DaemonCore: HandleProcessExit() and %s %d still running"" , whatexited , pid )"	9899:3:304234:304320	3072360	0	True				
ANR	3072638	CallExpression	"EXCEPT ( ""DaemonCore: HandleProcessExit() and %s %d still running"" , whatexited , pid )"		3072360	0					
ANR	3072639	Callee	EXCEPT		3072360	0					
ANR	3072640	Identifier	EXCEPT		3072360	0					
ANR	3072641	ArgumentList	"""DaemonCore: HandleProcessExit() and %s %d still running"""		3072360	1					
ANR	3072642	Argument	"""DaemonCore: HandleProcessExit() and %s %d still running"""		3072360	0					
ANR	3072643	PrimaryExpression	"""DaemonCore: HandleProcessExit() and %s %d still running"""		3072360	0					
ANR	3072644	Argument	whatexited		3072360	1					
ANR	3072645	Identifier	whatexited		3072360	0					
ANR	3072646	Argument	pid		3072360	2					
ANR	3072647	Identifier	pid		3072360	0					
ANR	3072648	ExpressionStatement	exit_status = winexit	9902:2:304328:304349	3072360	3	True				
ANR	3072649	AssignmentExpression	exit_status = winexit		3072360	0		=			
ANR	3072650	Identifier	exit_status		3072360	0					
ANR	3072651	Identifier	winexit		3072360	1					
ANR	3072652	IfStatement	if ( pidentry -> parent_is_local )		3072360	9					
ANR	3072653	Condition	pidentry -> parent_is_local	9908:6:304494:304518	3072360	0	True				
ANR	3072654	PtrMemberAccess	pidentry -> parent_is_local		3072360	0					
ANR	3072655	Identifier	pidentry		3072360	0					
ANR	3072656	Identifier	parent_is_local		3072360	1					
ANR	3072657	CompoundStatement		83:34:2511:2511	3072360	1					
ANR	3072658	ExpressionStatement	"CallReaper ( pidentry -> reaper_id , whatexited , pid , exit_status )"	9909:2:304526:304589	3072360	0	True				
ANR	3072659	CallExpression	"CallReaper ( pidentry -> reaper_id , whatexited , pid , exit_status )"		3072360	0					
ANR	3072660	Callee	CallReaper		3072360	0					
ANR	3072661	Identifier	CallReaper		3072360	0					
ANR	3072662	ArgumentList	pidentry -> reaper_id		3072360	1					
ANR	3072663	Argument	pidentry -> reaper_id		3072360	0					
ANR	3072664	PtrMemberAccess	pidentry -> reaper_id		3072360	0					
ANR	3072665	Identifier	pidentry		3072360	0					
ANR	3072666	Identifier	reaper_id		3072360	1					
ANR	3072667	Argument	whatexited		3072360	1					
ANR	3072668	Identifier	whatexited		3072360	0					
ANR	3072669	Argument	pid		3072360	2					
ANR	3072670	Identifier	pid		3072360	0					
ANR	3072671	Argument	exit_status		3072360	3					
ANR	3072672	Identifier	exit_status		3072360	0					
ANR	3072673	ElseStatement	else		3072360	0					
ANR	3072674	CompoundStatement		85:8:2588:2588	3072360	0					
ANR	3072675	IfStatement	if ( pidentry -> new_process_group == TRUE )		3072360	10					
ANR	3072676	Condition	pidentry -> new_process_group == TRUE	9918:5:304849:304883	3072360	0	True				
ANR	3072677	EqualityExpression	pidentry -> new_process_group == TRUE		3072360	0		==			
ANR	3072678	PtrMemberAccess	pidentry -> new_process_group		3072360	0					
ANR	3072679	Identifier	pidentry		3072360	0					
ANR	3072680	Identifier	new_process_group		3072360	1					
ANR	3072681	Identifier	TRUE		3072360	1					
ANR	3072682	CompoundStatement		93:42:2875:2875	3072360	1					
ANR	3072683	ExpressionStatement	ASSERT ( m_proc_family != NULL )	9919:2:304890:304919	3072360	0	True				
ANR	3072684	CallExpression	ASSERT ( m_proc_family != NULL )		3072360	0					
ANR	3072685	Callee	ASSERT		3072360	0					
ANR	3072686	Identifier	ASSERT		3072360	0					
ANR	3072687	ArgumentList	m_proc_family != NULL		3072360	1					
ANR	3072688	Argument	m_proc_family != NULL		3072360	0					
ANR	3072689	EqualityExpression	m_proc_family != NULL		3072360	0		!=			
ANR	3072690	Identifier	m_proc_family		3072360	0					
ANR	3072691	Identifier	NULL		3072360	1					
ANR	3072692	IfStatement	if ( ! m_proc_family -> unregister_family ( pid ) )		3072360	1					
ANR	3072693	Condition	! m_proc_family -> unregister_family ( pid )	9920:6:304927:304964	3072360	0	True				
ANR	3072694	UnaryOperationExpression	! m_proc_family -> unregister_family ( pid )		3072360	0					
ANR	3072695	UnaryOperator	!		3072360	0					
ANR	3072696	CallExpression	m_proc_family -> unregister_family ( pid )		3072360	1					
ANR	3072697	Callee	m_proc_family -> unregister_family		3072360	0					
ANR	3072698	PtrMemberAccess	m_proc_family -> unregister_family		3072360	0					
ANR	3072699	Identifier	m_proc_family		3072360	0					
ANR	3072700	Identifier	unregister_family		3072360	1					
ANR	3072701	ArgumentList	pid		3072360	1					
ANR	3072702	Argument	pid		3072360	0					
ANR	3072703	Identifier	pid		3072360	0					
ANR	3072704	CompoundStatement		95:46:2956:2956	3072360	1					
ANR	3072705	ExpressionStatement	"dprintf ( D_ALWAYS , ""error unregistering pid %u with the procd\\n"" , pid )"	9921:3:304972:305063	3072360	0	True				
ANR	3072706	CallExpression	"dprintf ( D_ALWAYS , ""error unregistering pid %u with the procd\\n"" , pid )"		3072360	0					
ANR	3072707	Callee	dprintf		3072360	0					
ANR	3072708	Identifier	dprintf		3072360	0					
ANR	3072709	ArgumentList	D_ALWAYS		3072360	1					
ANR	3072710	Argument	D_ALWAYS		3072360	0					
ANR	3072711	Identifier	D_ALWAYS		3072360	0					
ANR	3072712	Argument	"""error unregistering pid %u with the procd\\n"""		3072360	1					
ANR	3072713	PrimaryExpression	"""error unregistering pid %u with the procd\\n"""		3072360	0					
ANR	3072714	Argument	pid		3072360	2					
ANR	3072715	Identifier	pid		3072360	0					
ANR	3072716	IfStatement	if ( pidentry -> child_session_id )		3072360	11					
ANR	3072717	Condition	pidentry -> child_session_id	9927:4:305111:305136	3072360	0	True				
ANR	3072718	PtrMemberAccess	pidentry -> child_session_id		3072360	0					
ANR	3072719	Identifier	pidentry		3072360	0					
ANR	3072720	Identifier	child_session_id		3072360	1					
ANR	3072721	ExpressionStatement	getSecMan ( ) -> session_cache -> remove ( pidentry -> child_session_id )	9928:2:305141:305203	3072360	1	True				
ANR	3072722	CallExpression	getSecMan ( ) -> session_cache -> remove ( pidentry -> child_session_id )		3072360	0					
ANR	3072723	Callee	getSecMan ( ) -> session_cache -> remove		3072360	0					
ANR	3072724	PtrMemberAccess	getSecMan ( ) -> session_cache -> remove		3072360	0					
ANR	3072725	PtrMemberAccess	getSecMan ( ) -> session_cache		3072360	0					
ANR	3072726	CallExpression	getSecMan ( )		3072360	0					
ANR	3072727	Callee	getSecMan		3072360	0					
ANR	3072728	Identifier	getSecMan		3072360	0					
ANR	3072729	ArgumentList			3072360	1					
ANR	3072730	Identifier	session_cache		3072360	1					
ANR	3072731	Identifier	remove		3072360	1					
ANR	3072732	ArgumentList	pidentry -> child_session_id		3072360	1					
ANR	3072733	Argument	pidentry -> child_session_id		3072360	0					
ANR	3072734	PtrMemberAccess	pidentry -> child_session_id		3072360	0					
ANR	3072735	Identifier	pidentry		3072360	0					
ANR	3072736	Identifier	child_session_id		3072360	1					
ANR	3072737	ExpressionStatement	pidTable -> remove ( pid )	9931:1:305279:305300	3072360	12	True				
ANR	3072738	CallExpression	pidTable -> remove ( pid )		3072360	0					
ANR	3072739	Callee	pidTable -> remove		3072360	0					
ANR	3072740	PtrMemberAccess	pidTable -> remove		3072360	0					
ANR	3072741	Identifier	pidTable		3072360	0					
ANR	3072742	Identifier	remove		3072360	1					
ANR	3072743	ArgumentList	pid		3072360	1					
ANR	3072744	Argument	pid		3072360	0					
ANR	3072745	Identifier	pid		3072360	0					
ANR	3072746	Statement	::	9934:1:305341:305342	3072360	13	True				
ANR	3072747	ExpressionStatement	CloseHandle ( pidentry -> hThread )	9934:3:305343:305373	3072360	14	True				
ANR	3072748	CallExpression	CloseHandle ( pidentry -> hThread )		3072360	0					
ANR	3072749	Callee	CloseHandle		3072360	0					
ANR	3072750	Identifier	CloseHandle		3072360	0					
ANR	3072751	ArgumentList	pidentry -> hThread		3072360	1					
ANR	3072752	Argument	pidentry -> hThread		3072360	0					
ANR	3072753	PtrMemberAccess	pidentry -> hThread		3072360	0					
ANR	3072754	Identifier	pidentry		3072360	0					
ANR	3072755	Identifier	hThread		3072360	1					
ANR	3072756	IfStatement	if ( pidentry -> hProcess )		3072360	15					
ANR	3072757	Condition	pidentry -> hProcess	9936:5:305439:305456	3072360	0	True				
ANR	3072758	PtrMemberAccess	pidentry -> hProcess		3072360	0					
ANR	3072759	Identifier	pidentry		3072360	0					
ANR	3072760	Identifier	hProcess		3072360	1					
ANR	3072761	CompoundStatement		111:25:3448:3448	3072360	1					
ANR	3072762	Statement	::	9937:2:305463:305464	3072360	0	True				
ANR	3072763	ExpressionStatement	CloseHandle ( pidentry -> hProcess )	9937:4:305465:305496	3072360	1	True				
ANR	3072764	CallExpression	CloseHandle ( pidentry -> hProcess )		3072360	0					
ANR	3072765	Callee	CloseHandle		3072360	0					
ANR	3072766	Identifier	CloseHandle		3072360	0					
ANR	3072767	ArgumentList	pidentry -> hProcess		3072360	1					
ANR	3072768	Argument	pidentry -> hProcess		3072360	0					
ANR	3072769	PtrMemberAccess	pidentry -> hProcess		3072360	0					
ANR	3072770	Identifier	pidentry		3072360	0					
ANR	3072771	Identifier	hProcess		3072360	1					
ANR	3072772	IfStatement	if ( pidentry -> hung_tid != - 1 )		3072360	16					
ANR	3072773	Condition	pidentry -> hung_tid != - 1	9941:6:305555:305578	3072360	0	True				
ANR	3072774	EqualityExpression	pidentry -> hung_tid != - 1		3072360	0		!=			
ANR	3072775	PtrMemberAccess	pidentry -> hung_tid		3072360	0					
ANR	3072776	Identifier	pidentry		3072360	0					
ANR	3072777	Identifier	hung_tid		3072360	1					
ANR	3072778	UnaryOperationExpression	- 1		3072360	1					
ANR	3072779	UnaryOperator	-		3072360	0					
ANR	3072780	PrimaryExpression	1		3072360	1					
ANR	3072781	CompoundStatement		116:33:3571:3571	3072360	1					
ANR	3072782	ExpressionStatement	Cancel_Timer ( pidentry -> hung_tid )	9942:2:305586:305618	3072360	0	True				
ANR	3072783	CallExpression	Cancel_Timer ( pidentry -> hung_tid )		3072360	0					
ANR	3072784	Callee	Cancel_Timer		3072360	0					
ANR	3072785	Identifier	Cancel_Timer		3072360	0					
ANR	3072786	ArgumentList	pidentry -> hung_tid		3072360	1					
ANR	3072787	Argument	pidentry -> hung_tid		3072360	0					
ANR	3072788	PtrMemberAccess	pidentry -> hung_tid		3072360	0					
ANR	3072789	Identifier	pidentry		3072360	0					
ANR	3072790	Identifier	hung_tid		3072360	1					
ANR	3072791	Statement	delete	9945:1:305652:305657	3072360	17	True				
ANR	3072792	ExpressionStatement	pidentry	9945:8:305659:305667	3072360	18	True				
ANR	3072793	Identifier	pidentry		3072360	0					
ANR	3072794	IfStatement	if ( pid == ppid )		3072360	19					
ANR	3072795	Condition	pid == ppid	9950:5:305849:305859	3072360	0	True				
ANR	3072796	EqualityExpression	pid == ppid		3072360	0		==			
ANR	3072797	Identifier	pid		3072360	0					
ANR	3072798	Identifier	ppid		3072360	1					
ANR	3072799	CompoundStatement		125:18:3851:3851	3072360	1					
ANR	3072800	ExpressionStatement	"dprintf ( D_ALWAYS , ""Our Parent process (pid %lu) exited; shutting down\\n"" , ( unsigned long ) pid )"	9951:2:305866:305967	3072360	0	True				
ANR	3072801	CallExpression	"dprintf ( D_ALWAYS , ""Our Parent process (pid %lu) exited; shutting down\\n"" , ( unsigned long ) pid )"		3072360	0					
ANR	3072802	Callee	dprintf		3072360	0					
ANR	3072803	Identifier	dprintf		3072360	0					
ANR	3072804	ArgumentList	D_ALWAYS		3072360	1					
ANR	3072805	Argument	D_ALWAYS		3072360	0					
ANR	3072806	Identifier	D_ALWAYS		3072360	0					
ANR	3072807	Argument	"""Our Parent process (pid %lu) exited; shutting down\\n"""		3072360	1					
ANR	3072808	PrimaryExpression	"""Our Parent process (pid %lu) exited; shutting down\\n"""		3072360	0					
ANR	3072809	Argument	( unsigned long ) pid		3072360	2					
ANR	3072810	CastExpression	( unsigned long ) pid		3072360	0					
ANR	3072811	CastTarget	unsigned long		3072360	0					
ANR	3072812	Identifier	pid		3072360	1					
ANR	3072813	ExpressionStatement	"Send_Signal ( mypid , SIGTERM )"	9954:2:305971:305997	3072360	1	True				
ANR	3072814	CallExpression	"Send_Signal ( mypid , SIGTERM )"		3072360	0					
ANR	3072815	Callee	Send_Signal		3072360	0					
ANR	3072816	Identifier	Send_Signal		3072360	0					
ANR	3072817	ArgumentList	mypid		3072360	1					
ANR	3072818	Argument	mypid		3072360	0					
ANR	3072819	Identifier	mypid		3072360	0					
ANR	3072820	Argument	SIGTERM		3072360	1					
ANR	3072821	Identifier	SIGTERM		3072360	0					
ANR	3072822	ReturnStatement	return TRUE ;	9957:1:306039:306050	3072360	20	True				
ANR	3072823	Identifier	TRUE		3072360	0					
ANR	3072824	ReturnType	int		3072360	1					
ANR	3072825	Identifier	DaemonCore :: HandleProcessExit		3072360	2					
ANR	3072826	ParameterList	"pid_t pid , int exit_status"		3072360	3					
ANR	3072827	Parameter	pid_t pid	9825:34:301982:301990	3072360	0	True				
ANR	3072828	ParameterType	pid_t		3072360	0					
ANR	3072829	Identifier	pid		3072360	1					
ANR	3072830	Parameter	int exit_status	9825:45:301993:302007	3072360	1	True				
ANR	3072831	ParameterType	int		3072360	0					
ANR	3072832	Identifier	exit_status		3072360	1					
ANR	3072833	CFGEntryNode	ENTRY		3072360		True				
ANR	3072834	CFGExitNode	EXIT		3072360		True				
ANR	3072835	Symbol	* pidentry -> std_pipes		3072360						
ANR	3072836	Symbol	getSecMan ( ) -> session_cache		3072360						
ANR	3072837	Symbol	* pidTable		3072360						
ANR	3072838	Symbol	pidentry -> parent_is_local		3072360						
ANR	3072839	Symbol	* pidentry		3072360						
ANR	3072840	Symbol	pidentry -> is_local		3072360						
ANR	3072841	Symbol	pid		3072360						
ANR	3072842	Symbol	defaultReaper		3072360						
ANR	3072843	Symbol	pidentry -> new_process_group		3072360						
ANR	3072844	Symbol	winexit		3072360						
ANR	3072845	Symbol	exit_status		3072360						
ANR	3072846	Symbol	* getSecMan		3072360						
ANR	3072847	Symbol	pidentry -> std_pipes		3072360						
ANR	3072848	Symbol	pidTable -> lookup		3072360						
ANR	3072849	Symbol	m_proc_family -> unregister_family		3072360						
ANR	3072850	Symbol	DC_STD_FD_NOPIPE		3072360						
ANR	3072851	Symbol	m_proc_family		3072360						
ANR	3072852	Symbol	SIGTERM		3072360						
ANR	3072853	Symbol	* * pidentry		3072360						
ANR	3072854	Symbol	pidentry		3072360						
ANR	3072855	Symbol	* m_proc_family		3072360						
ANR	3072856	Symbol	pidTable		3072360						
ANR	3072857	Symbol	pidentry -> child_session_id		3072360						
ANR	3072858	Symbol	pidentry -> deallocate		3072360						
ANR	3072859	Symbol	NULL		3072360						
ANR	3072860	Symbol	D_DAEMONCORE		3072360						
ANR	3072861	Symbol	pidentry -> hProcess		3072360						
ANR	3072862	Symbol	mypid		3072360						
ANR	3072863	Symbol	D_ALWAYS		3072360						
ANR	3072864	Symbol	i		3072360						
ANR	3072865	Symbol	TRUE		3072360						
ANR	3072866	Symbol	STILL_ACTIVE		3072360						
ANR	3072867	Symbol	getSecMan		3072360						
ANR	3072868	Symbol	ppid		3072360						
ANR	3072869	Symbol	pidentry -> hung_tid		3072360						
ANR	3072870	Symbol	pidentry -> reaper_id		3072360						
ANR	3072871	Symbol	* i		3072360						
ANR	3072872	Symbol	pidentry -> hThread		3072360						
ANR	3072873	Symbol	whatexited		3072360						
ANR	3072874	Symbol	FALSE		3072360						
ANR	3072875	Function	DaemonCore :: GetExceptionString	9960:0:306055:306474							
ANR	3072876	FunctionDef	DaemonCore :: GetExceptionString (int sig)		3072875	0					
ANR	3072877	CompoundStatement		9961:0:306107:306474	3072875	0					
ANR	3072878	Statement	static	9962:1:306110:306115	3072875	0	True				
ANR	3072879	IdentifierDeclStatement	char exception_string [ 80 ] ;	9962:8:306117:306142	3072875	1	True				
ANR	3072880	IdentifierDecl	exception_string [ 80 ]		3072875	0					
ANR	3072881	IdentifierDeclType	char [ 80 ]		3072875	0					
ANR	3072882	Identifier	exception_string		3072875	1					
ANR	3072883	PrimaryExpression	80		3072875	2					
ANR	3072884	ExpressionStatement	"sprintf ( exception_string , ""exception %s"" , ExceptionHandler :: GetExceptionString ( sig ) )"	9965:1:306159:306244	3072875	2	True				
ANR	3072885	CallExpression	"sprintf ( exception_string , ""exception %s"" , ExceptionHandler :: GetExceptionString ( sig ) )"		3072875	0					
ANR	3072886	Callee	sprintf		3072875	0					
ANR	3072887	Identifier	sprintf		3072875	0					
ANR	3072888	ArgumentList	exception_string		3072875	1					
ANR	3072889	Argument	exception_string		3072875	0					
ANR	3072890	Identifier	exception_string		3072875	0					
ANR	3072891	Argument	"""exception %s"""		3072875	1					
ANR	3072892	PrimaryExpression	"""exception %s"""		3072875	0					
ANR	3072893	Argument	ExceptionHandler :: GetExceptionString ( sig )		3072875	2					
ANR	3072894	CallExpression	ExceptionHandler :: GetExceptionString ( sig )		3072875	0					
ANR	3072895	Callee	ExceptionHandler :: GetExceptionString		3072875	0					
ANR	3072896	Identifier	ExceptionHandler :: GetExceptionString		3072875	0					
ANR	3072897	ArgumentList	sig		3072875	1					
ANR	3072898	Argument	sig		3072875	0					
ANR	3072899	Identifier	sig		3072875	0					
ANR	3072900	ReturnStatement	return exception_string ;	9978:1:306449:306472	3072875	3	True				
ANR	3072901	Identifier	exception_string		3072875	0					
ANR	3072902	ReturnType	const char *		3072875	1					
ANR	3072903	Identifier	DaemonCore :: GetExceptionString		3072875	2					
ANR	3072904	ParameterList	int sig		3072875	3					
ANR	3072905	Parameter	int sig	9960:43:306098:306104	3072875	0	True				
ANR	3072906	ParameterType	int		3072875	0					
ANR	3072907	Identifier	sig		3072875	1					
ANR	3072908	CFGEntryNode	ENTRY		3072875		True				
ANR	3072909	CFGExitNode	EXIT		3072875		True				
ANR	3072910	Symbol	sig		3072875						
ANR	3072911	Symbol	ExceptionHandler :: GetExceptionString		3072875						
ANR	3072912	Symbol	exception_string		3072875						
ANR	3072913	DeclStmt									
ANR	3072914	Decl							pid_t	pid_t	child_pid
ANR	3072915	DeclStmt									
ANR	3072916	Decl							unsigned int	unsigned int	timeout_secs
ANR	3072917	DeclStmt									
ANR	3072918	Decl							PidEntry	PidEntry *	pidentry
ANR	3072919	DeclStmt									
ANR	3072920	Decl							int	int	ret_value
ANR	3072921	DeclStmt									
ANR	3072922	Decl							double	double	dprintf_lock_delay
ANR	3072923	DeclStmt									
ANR	3072924	Decl							time_t	time_t	last_email
ANR	3072925	DeclStmt									
ANR	3072926	Decl							std :: string	std :: string	subject
ANR	3072927	DeclStmt									
ANR	3072928	Decl							FILE	FILE *	mailer
ANR	3072929	Function	DaemonCore :: HungChildTimeout	10088:0:310153:313440							
ANR	3072930	FunctionDef	DaemonCore :: HungChildTimeout ()		3072929	0					
ANR	3072931	CompoundStatement		10089:0:310188:313440	3072929	0					
ANR	3072932	IdentifierDeclStatement	pid_t hung_child_pid ;	10090:1:310191:310211	3072929	0	True				
ANR	3072933	IdentifierDecl	hung_child_pid		3072929	0					
ANR	3072934	IdentifierDeclType	pid_t		3072929	0					
ANR	3072935	Identifier	hung_child_pid		3072929	1					
ANR	3072936	IdentifierDeclStatement	pid_t * hung_child_pid_ptr ;	10091:1:310214:310239	3072929	1	True				
ANR	3072937	IdentifierDecl	* hung_child_pid_ptr		3072929	0					
ANR	3072938	IdentifierDeclType	pid_t *		3072929	0					
ANR	3072939	Identifier	hung_child_pid_ptr		3072929	1					
ANR	3072940	IdentifierDeclStatement	PidEntry * pidentry ;	10092:1:310242:310260	3072929	2	True				
ANR	3072941	IdentifierDecl	* pidentry		3072929	0					
ANR	3072942	IdentifierDeclType	PidEntry *		3072929	0					
ANR	3072943	Identifier	pidentry		3072929	1					
ANR	3072944	IdentifierDeclStatement	bool first_time = true ;	10093:1:310263:310285	3072929	3	True				
ANR	3072945	IdentifierDecl	first_time = true		3072929	0					
ANR	3072946	IdentifierDeclType	bool		3072929	0					
ANR	3072947	Identifier	first_time		3072929	1					
ANR	3072948	AssignmentExpression	first_time = true		3072929	2		=			
ANR	3072949	Identifier	true		3072929	0					
ANR	3072950	Identifier	true		3072929	1					
ANR	3072951	ExpressionStatement	hung_child_pid_ptr = ( pid_t * ) GetDataPtr ( )	10096:1:310355:310396	3072929	4	True				
ANR	3072952	AssignmentExpression	hung_child_pid_ptr = ( pid_t * ) GetDataPtr ( )		3072929	0		=			
ANR	3072953	Identifier	hung_child_pid_ptr		3072929	0					
ANR	3072954	CastExpression	( pid_t * ) GetDataPtr ( )		3072929	1					
ANR	3072955	CastTarget	pid_t *		3072929	0					
ANR	3072956	CallExpression	GetDataPtr ( )		3072929	1					
ANR	3072957	Callee	GetDataPtr		3072929	0					
ANR	3072958	Identifier	GetDataPtr		3072929	0					
ANR	3072959	ArgumentList			3072929	1					
ANR	3072960	ExpressionStatement	hung_child_pid = * hung_child_pid_ptr	10097:1:310399:310435	3072929	5	True				
ANR	3072961	AssignmentExpression	hung_child_pid = * hung_child_pid_ptr		3072929	0		=			
ANR	3072962	Identifier	hung_child_pid		3072929	0					
ANR	3072963	UnaryOperationExpression	* hung_child_pid_ptr		3072929	1					
ANR	3072964	UnaryOperator	*		3072929	0					
ANR	3072965	Identifier	hung_child_pid_ptr		3072929	1					
ANR	3072966	IfStatement	"if ( ( pidTable -> lookup ( hung_child_pid , pidentry ) < 0 ) )"		3072929	6					
ANR	3072967	Condition	"pidTable -> lookup ( hung_child_pid , pidentry ) < 0"	10099:5:310443:310490	3072929	0	True				
ANR	3072968	RelationalExpression	"pidTable -> lookup ( hung_child_pid , pidentry ) < 0"		3072929	0		<			
ANR	3072969	CallExpression	"pidTable -> lookup ( hung_child_pid , pidentry )"		3072929	0					
ANR	3072970	Callee	pidTable -> lookup		3072929	0					
ANR	3072971	PtrMemberAccess	pidTable -> lookup		3072929	0					
ANR	3072972	Identifier	pidTable		3072929	0					
ANR	3072973	Identifier	lookup		3072929	1					
ANR	3072974	ArgumentList	hung_child_pid		3072929	1					
ANR	3072975	Argument	hung_child_pid		3072929	0					
ANR	3072976	Identifier	hung_child_pid		3072929	0					
ANR	3072977	Argument	pidentry		3072929	1					
ANR	3072978	Identifier	pidentry		3072929	0					
ANR	3072979	PrimaryExpression	0		3072929	1					
ANR	3072980	CompoundStatement		11:55:304:304	3072929	1					
ANR	3072981	ReturnStatement	return FALSE ;	10101:2:310558:310570	3072929	0	True				
ANR	3072982	Identifier	FALSE		3072929	0					
ANR	3072983	ExpressionStatement	pidentry -> hung_tid = - 1	10106:1:310678:310701	3072929	7	True				
ANR	3072984	AssignmentExpression	pidentry -> hung_tid = - 1		3072929	0		=			
ANR	3072985	PtrMemberAccess	pidentry -> hung_tid		3072929	0					
ANR	3072986	Identifier	pidentry		3072929	0					
ANR	3072987	Identifier	hung_tid		3072929	1					
ANR	3072988	UnaryOperationExpression	- 1		3072929	1					
ANR	3072989	UnaryOperator	-		3072929	0					
ANR	3072990	PrimaryExpression	1		3072929	1					
ANR	3072991	IfStatement	if ( ProcessExitedButNotReaped ( hung_child_pid ) )		3072929	8					
ANR	3072992	Condition	ProcessExitedButNotReaped ( hung_child_pid )	10108:5:310709:310751	3072929	0	True				
ANR	3072993	CallExpression	ProcessExitedButNotReaped ( hung_child_pid )		3072929	0					
ANR	3072994	Callee	ProcessExitedButNotReaped		3072929	0					
ANR	3072995	Identifier	ProcessExitedButNotReaped		3072929	0					
ANR	3072996	ArgumentList	hung_child_pid		3072929	1					
ANR	3072997	Argument	hung_child_pid		3072929	0					
ANR	3072998	Identifier	hung_child_pid		3072929	0					
ANR	3072999	CompoundStatement		20:51:566:566	3072929	1					
ANR	3073000	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Canceling hung child timer for pid %d, because it has exited but has not been reaped yet.\\n"" , hung_child_pid )"	10111:2:310858:310987	3072929	0	True				
ANR	3073001	CallExpression	"dprintf ( D_FULLDEBUG , ""Canceling hung child timer for pid %d, because it has exited but has not been reaped yet.\\n"" , hung_child_pid )"		3072929	0					
ANR	3073002	Callee	dprintf		3072929	0					
ANR	3073003	Identifier	dprintf		3072929	0					
ANR	3073004	ArgumentList	D_FULLDEBUG		3072929	1					
ANR	3073005	Argument	D_FULLDEBUG		3072929	0					
ANR	3073006	Identifier	D_FULLDEBUG		3072929	0					
ANR	3073007	Argument	"""Canceling hung child timer for pid %d, because it has exited but has not been reaped yet.\\n"""		3072929	1					
ANR	3073008	PrimaryExpression	"""Canceling hung child timer for pid %d, because it has exited but has not been reaped yet.\\n"""		3072929	0					
ANR	3073009	Argument	hung_child_pid		3072929	2					
ANR	3073010	Identifier	hung_child_pid		3072929	0					
ANR	3073011	ReturnStatement	return FALSE ;	10112:2:310991:311003	3072929	1	True				
ANR	3073012	Identifier	FALSE		3072929	0					
ANR	3073013	IfStatement	if ( pidentry -> was_not_responding )		3072929	9					
ANR	3073014	Condition	pidentry -> was_not_responding	10117:5:311109:311136	3072929	0	True				
ANR	3073015	PtrMemberAccess	pidentry -> was_not_responding		3072929	0					
ANR	3073016	Identifier	pidentry		3072929	0					
ANR	3073017	Identifier	was_not_responding		3072929	1					
ANR	3073018	CompoundStatement		29:36:951:951	3072929	1					
ANR	3073019	ExpressionStatement	first_time = false	10118:2:311144:311162	3072929	0	True				
ANR	3073020	AssignmentExpression	first_time = false		3072929	0		=			
ANR	3073021	Identifier	first_time		3072929	0					
ANR	3073022	Identifier	false		3072929	1					
ANR	3073023	ElseStatement	else		3072929	0					
ANR	3073024	CompoundStatement		32:6:984:984	3072929	0					
ANR	3073025	ExpressionStatement	pidentry -> was_not_responding = TRUE	10121:1:311176:311211	3072929	0	True				
ANR	3073026	AssignmentExpression	pidentry -> was_not_responding = TRUE		3072929	0		=			
ANR	3073027	PtrMemberAccess	pidentry -> was_not_responding		3072929	0					
ANR	3073028	Identifier	pidentry		3072929	0					
ANR	3073029	Identifier	was_not_responding		3072929	1					
ANR	3073030	Identifier	TRUE		3072929	1					
ANR	3073031	ExpressionStatement	ServiceCommandSocket ( )	10133:1:311829:311851	3072929	10	True				
ANR	3073032	CallExpression	ServiceCommandSocket ( )		3072929	0					
ANR	3073033	Callee	ServiceCommandSocket		3072929	0					
ANR	3073034	Identifier	ServiceCommandSocket		3072929	0					
ANR	3073035	ArgumentList			3072929	1					
ANR	3073036	IfStatement	"if ( ( pidTable -> lookup ( hung_child_pid , pidentry ) < 0 ) )"		3072929	11					
ANR	3073037	Condition	"pidTable -> lookup ( hung_child_pid , pidentry ) < 0"	10138:5:312055:312102	3072929	0	True				
ANR	3073038	RelationalExpression	"pidTable -> lookup ( hung_child_pid , pidentry ) < 0"		3072929	0		<			
ANR	3073039	CallExpression	"pidTable -> lookup ( hung_child_pid , pidentry )"		3072929	0					
ANR	3073040	Callee	pidTable -> lookup		3072929	0					
ANR	3073041	PtrMemberAccess	pidTable -> lookup		3072929	0					
ANR	3073042	Identifier	pidTable		3072929	0					
ANR	3073043	Identifier	lookup		3072929	1					
ANR	3073044	ArgumentList	hung_child_pid		3072929	1					
ANR	3073045	Argument	hung_child_pid		3072929	0					
ANR	3073046	Identifier	hung_child_pid		3072929	0					
ANR	3073047	Argument	pidentry		3072929	1					
ANR	3073048	Identifier	pidentry		3072929	0					
ANR	3073049	PrimaryExpression	0		3072929	1					
ANR	3073050	CompoundStatement		50:55:1916:1916	3072929	1					
ANR	3073051	ReturnStatement	return FALSE ;	10140:2:312178:312190	3072929	0	True				
ANR	3073052	Identifier	FALSE		3072929	0					
ANR	3073053	IfStatement	if ( pidentry -> was_not_responding == FALSE )		3072929	12					
ANR	3073054	Condition	pidentry -> was_not_responding == FALSE	10144:6:312258:312294	3072929	0	True				
ANR	3073055	EqualityExpression	pidentry -> was_not_responding == FALSE		3072929	0		==			
ANR	3073056	PtrMemberAccess	pidentry -> was_not_responding		3072929	0					
ANR	3073057	Identifier	pidentry		3072929	0					
ANR	3073058	Identifier	was_not_responding		3072929	1					
ANR	3073059	Identifier	FALSE		3072929	1					
ANR	3073060	CompoundStatement		56:46:2109:2109	3072929	1					
ANR	3073061	ReturnStatement	return FALSE ;	10146:2:312331:312343	3072929	0	True				
ANR	3073062	Identifier	FALSE		3072929	0					
ANR	3073063	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Child pid %d appears hung! Killing it hard.\\n"" , hung_child_pid )"	10149:1:312350:312440	3072929	13	True				
ANR	3073064	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Child pid %d appears hung! Killing it hard.\\n"" , hung_child_pid )"		3072929	0					
ANR	3073065	Callee	dprintf		3072929	0					
ANR	3073066	Identifier	dprintf		3072929	0					
ANR	3073067	ArgumentList	D_ALWAYS		3072929	1					
ANR	3073068	Argument	D_ALWAYS		3072929	0					
ANR	3073069	Identifier	D_ALWAYS		3072929	0					
ANR	3073070	Argument	"""ERROR: Child pid %d appears hung! Killing it hard.\\n"""		3072929	1					
ANR	3073071	PrimaryExpression	"""ERROR: Child pid %d appears hung! Killing it hard.\\n"""		3072929	0					
ANR	3073072	Argument	hung_child_pid		3072929	2					
ANR	3073073	Identifier	hung_child_pid		3072929	0					
ANR	3073074	IdentifierDeclStatement	"bool want_core = param_boolean ( ""NOT_RESPONDING_WANT_CORE"" , false ) ;"	10153:1:312474:312541	3072929	14	True				
ANR	3073075	IdentifierDecl	"want_core = param_boolean ( ""NOT_RESPONDING_WANT_CORE"" , false )"		3072929	0					
ANR	3073076	IdentifierDeclType	bool		3072929	0					
ANR	3073077	Identifier	want_core		3072929	1					
ANR	3073078	AssignmentExpression	"want_core = param_boolean ( ""NOT_RESPONDING_WANT_CORE"" , false )"		3072929	2		=			
ANR	3073079	Identifier	want_core		3072929	0					
ANR	3073080	CallExpression	"param_boolean ( ""NOT_RESPONDING_WANT_CORE"" , false )"		3072929	1					
ANR	3073081	Callee	param_boolean		3072929	0					
ANR	3073082	Identifier	param_boolean		3072929	0					
ANR	3073083	ArgumentList	"""NOT_RESPONDING_WANT_CORE"""		3072929	1					
ANR	3073084	Argument	"""NOT_RESPONDING_WANT_CORE"""		3072929	0					
ANR	3073085	PrimaryExpression	"""NOT_RESPONDING_WANT_CORE"""		3072929	0					
ANR	3073086	Argument	false		3072929	1					
ANR	3073087	Identifier	false		3072929	0					
ANR	3073088	IfStatement	if ( want_core )		3072929	15					
ANR	3073089	Condition	want_core	10155:5:312562:312570	3072929	0	True				
ANR	3073090	Identifier	want_core		3072929	0					
ANR	3073091	CompoundStatement		67:17:2385:2385	3072929	1					
ANR	3073092	IfStatement	if ( ! first_time )		3072929	0					
ANR	3073093	Condition	! first_time	10161:6:312888:312898	3072929	0	True				
ANR	3073094	UnaryOperationExpression	! first_time		3072929	0					
ANR	3073095	UnaryOperator	!		3072929	0					
ANR	3073096	Identifier	first_time		3072929	1					
ANR	3073097	CompoundStatement		73:20:2713:2713	3072929	1					
ANR	3073098	ExpressionStatement	"dprintf ( D_ALWAYS , ""Child pid %d is still hung!  Perhaps it hung while generating a core file.  Killing it harder.\\n"" , hung_child_pid )"	10162:3:312907:313044	3072929	0	True				
ANR	3073099	CallExpression	"dprintf ( D_ALWAYS , ""Child pid %d is still hung!  Perhaps it hung while generating a core file.  Killing it harder.\\n"" , hung_child_pid )"		3072929	0					
ANR	3073100	Callee	dprintf		3072929	0					
ANR	3073101	Identifier	dprintf		3072929	0					
ANR	3073102	ArgumentList	D_ALWAYS		3072929	1					
ANR	3073103	Argument	D_ALWAYS		3072929	0					
ANR	3073104	Identifier	D_ALWAYS		3072929	0					
ANR	3073105	Argument	"""Child pid %d is still hung!  Perhaps it hung while generating a core file.  Killing it harder.\\n"""		3072929	1					
ANR	3073106	PrimaryExpression	"""Child pid %d is still hung!  Perhaps it hung while generating a core file.  Killing it harder.\\n"""		3072929	0					
ANR	3073107	Argument	hung_child_pid		3072929	2					
ANR	3073108	Identifier	hung_child_pid		3072929	0					
ANR	3073109	ExpressionStatement	want_core = false	10164:3:313049:313066	3072929	1	True				
ANR	3073110	AssignmentExpression	want_core = false		3072929	0		=			
ANR	3073111	Identifier	want_core		3072929	0					
ANR	3073112	Identifier	false		3072929	1					
ANR	3073113	ElseStatement	else		3072929	0					
ANR	3073114	CompoundStatement		79:3:2895:2928	3072929	0					
ANR	3073115	IdentifierDeclStatement	const int want_core_timeout = 600 ;	10167:3:313084:313117	3072929	0	True				
ANR	3073116	IdentifierDecl	want_core_timeout = 600		3072929	0					
ANR	3073117	IdentifierDeclType	const int		3072929	0					
ANR	3073118	Identifier	want_core_timeout		3072929	1					
ANR	3073119	AssignmentExpression	want_core_timeout = 600		3072929	2		=			
ANR	3073120	Identifier	want_core_timeout		3072929	0					
ANR	3073121	PrimaryExpression	600		3072929	1					
ANR	3073122	ExpressionStatement	"pidentry -> hung_tid = Register_Timer ( want_core_timeout , ( TimerHandlercpp ) & DaemonCore :: HungChildTimeout , ""DaemonCore::HungChildTimeout"" , this )"	10168:3:313122:313287	3072929	1	True				
ANR	3073123	AssignmentExpression	"pidentry -> hung_tid = Register_Timer ( want_core_timeout , ( TimerHandlercpp ) & DaemonCore :: HungChildTimeout , ""DaemonCore::HungChildTimeout"" , this )"		3072929	0		=			
ANR	3073124	PtrMemberAccess	pidentry -> hung_tid		3072929	0					
ANR	3073125	Identifier	pidentry		3072929	0					
ANR	3073126	Identifier	hung_tid		3072929	1					
ANR	3073127	CallExpression	"Register_Timer ( want_core_timeout , ( TimerHandlercpp ) & DaemonCore :: HungChildTimeout , ""DaemonCore::HungChildTimeout"" , this )"		3072929	1					
ANR	3073128	Callee	Register_Timer		3072929	0					
ANR	3073129	Identifier	Register_Timer		3072929	0					
ANR	3073130	ArgumentList	want_core_timeout		3072929	1					
ANR	3073131	Argument	want_core_timeout		3072929	0					
ANR	3073132	Identifier	want_core_timeout		3072929	0					
ANR	3073133	Argument	( TimerHandlercpp ) & DaemonCore :: HungChildTimeout		3072929	1					
ANR	3073134	CastExpression	( TimerHandlercpp ) & DaemonCore :: HungChildTimeout		3072929	0					
ANR	3073135	CastTarget	TimerHandlercpp		3072929	0					
ANR	3073136	UnaryOperationExpression	& DaemonCore :: HungChildTimeout		3072929	1					
ANR	3073137	UnaryOperator	&		3072929	0					
ANR	3073138	Identifier	DaemonCore :: HungChildTimeout		3072929	1					
ANR	3073139	Argument	"""DaemonCore::HungChildTimeout"""		3072929	2					
ANR	3073140	PrimaryExpression	"""DaemonCore::HungChildTimeout"""		3072929	0					
ANR	3073141	Argument	this		3072929	3					
ANR	3073142	Identifier	this		3072929	0					
ANR	3073143	ExpressionStatement	ASSERT ( pidentry -> hung_tid != - 1 )	10172:3:313292:313326	3072929	2	True				
ANR	3073144	CallExpression	ASSERT ( pidentry -> hung_tid != - 1 )		3072929	0					
ANR	3073145	Callee	ASSERT		3072929	0					
ANR	3073146	Identifier	ASSERT		3072929	0					
ANR	3073147	ArgumentList	pidentry -> hung_tid != - 1		3072929	1					
ANR	3073148	Argument	pidentry -> hung_tid != - 1		3072929	0					
ANR	3073149	EqualityExpression	pidentry -> hung_tid != - 1		3072929	0		!=			
ANR	3073150	PtrMemberAccess	pidentry -> hung_tid		3072929	0					
ANR	3073151	Identifier	pidentry		3072929	0					
ANR	3073152	Identifier	hung_tid		3072929	1					
ANR	3073153	UnaryOperationExpression	- 1		3072929	1					
ANR	3073154	UnaryOperator	-		3072929	0					
ANR	3073155	PrimaryExpression	1		3072929	1					
ANR	3073156	ExpressionStatement	Register_DataPtr ( & pidentry -> pid )	10173:3:313331:313365	3072929	3	True				
ANR	3073157	CallExpression	Register_DataPtr ( & pidentry -> pid )		3072929	0					
ANR	3073158	Callee	Register_DataPtr		3072929	0					
ANR	3073159	Identifier	Register_DataPtr		3072929	0					
ANR	3073160	ArgumentList	& pidentry -> pid		3072929	1					
ANR	3073161	Argument	& pidentry -> pid		3072929	0					
ANR	3073162	UnaryOperationExpression	& pidentry -> pid		3072929	0					
ANR	3073163	UnaryOperator	&		3072929	0					
ANR	3073164	PtrMemberAccess	pidentry -> pid		3072929	1					
ANR	3073165	Identifier	pidentry		3072929	0					
ANR	3073166	Identifier	pid		3072929	1					
ANR	3073167	ExpressionStatement	"Shutdown_Fast ( hung_child_pid , want_core )"	10177:1:313382:313423	3072929	16	True				
ANR	3073168	CallExpression	"Shutdown_Fast ( hung_child_pid , want_core )"		3072929	0					
ANR	3073169	Callee	Shutdown_Fast		3072929	0					
ANR	3073170	Identifier	Shutdown_Fast		3072929	0					
ANR	3073171	ArgumentList	hung_child_pid		3072929	1					
ANR	3073172	Argument	hung_child_pid		3072929	0					
ANR	3073173	Identifier	hung_child_pid		3072929	0					
ANR	3073174	Argument	want_core		3072929	1					
ANR	3073175	Identifier	want_core		3072929	0					
ANR	3073176	ReturnStatement	return TRUE ;	10179:1:313427:313438	3072929	17	True				
ANR	3073177	Identifier	TRUE		3072929	0					
ANR	3073178	ReturnType	int		3072929	1					
ANR	3073179	Identifier	DaemonCore :: HungChildTimeout		3072929	2					
ANR	3073180	ParameterList			3072929	3					
ANR	3073181	CFGEntryNode	ENTRY		3072929		True				
ANR	3073182	CFGExitNode	EXIT		3072929		True				
ANR	3073183	Symbol	hung_child_pid		3072929						
ANR	3073184	Symbol	want_core		3072929						
ANR	3073185	Symbol	* pidTable		3072929						
ANR	3073186	Symbol	* pidentry		3072929						
ANR	3073187	Symbol	pidTable -> lookup		3072929						
ANR	3073188	Symbol	first_time		3072929						
ANR	3073189	Symbol	* hung_child_pid_ptr		3072929						
ANR	3073190	Symbol	pidentry		3072929						
ANR	3073191	Symbol	pidTable		3072929						
ANR	3073192	Symbol	want_core_timeout		3072929						
ANR	3073193	Symbol	Register_Timer		3072929						
ANR	3073194	Symbol	false		3072929						
ANR	3073195	Symbol	D_ALWAYS		3072929						
ANR	3073196	Symbol	& DaemonCore :: HungChildTimeout		3072929						
ANR	3073197	Symbol	this		3072929						
ANR	3073198	Symbol	TRUE		3072929						
ANR	3073199	Symbol	GetDataPtr		3072929						
ANR	3073200	Symbol	D_FULLDEBUG		3072929						
ANR	3073201	Symbol	param_boolean		3072929						
ANR	3073202	Symbol	pidentry -> was_not_responding		3072929						
ANR	3073203	Symbol	pidentry -> hung_tid		3072929						
ANR	3073204	Symbol	ProcessExitedButNotReaped		3072929						
ANR	3073205	Symbol	hung_child_pid_ptr		3072929						
ANR	3073206	Symbol	& pidentry -> pid		3072929						
ANR	3073207	Symbol	true		3072929						
ANR	3073208	Symbol	FALSE		3072929						
ANR	3073209	Function	DaemonCore :: Was_Not_Responding	10182:0:313443:313685							
ANR	3073210	FunctionDef	DaemonCore :: Was_Not_Responding (pid_t pid)		3073209	0					
ANR	3073211	CompoundStatement		10183:0:313489:313685	3073209	0					
ANR	3073212	IdentifierDeclStatement	PidEntry * pidentry ;	10184:1:313492:313510	3073209	0	True				
ANR	3073213	IdentifierDecl	* pidentry		3073209	0					
ANR	3073214	IdentifierDeclType	PidEntry *		3073209	0					
ANR	3073215	Identifier	pidentry		3073209	1					
ANR	3073216	IfStatement	"if ( ( pidTable -> lookup ( pid , pidentry ) < 0 ) )"		3073209	1					
ANR	3073217	Condition	"pidTable -> lookup ( pid , pidentry ) < 0"	10186:5:313518:313554	3073209	0	True				
ANR	3073218	RelationalExpression	"pidTable -> lookup ( pid , pidentry ) < 0"		3073209	0		<			
ANR	3073219	CallExpression	"pidTable -> lookup ( pid , pidentry )"		3073209	0					
ANR	3073220	Callee	pidTable -> lookup		3073209	0					
ANR	3073221	PtrMemberAccess	pidTable -> lookup		3073209	0					
ANR	3073222	Identifier	pidTable		3073209	0					
ANR	3073223	Identifier	lookup		3073209	1					
ANR	3073224	ArgumentList	pid		3073209	1					
ANR	3073225	Argument	pid		3073209	0					
ANR	3073226	Identifier	pid		3073209	0					
ANR	3073227	Argument	pidentry		3073209	1					
ANR	3073228	Identifier	pidentry		3073209	0					
ANR	3073229	PrimaryExpression	0		3073209	1					
ANR	3073230	CompoundStatement		4:44:67:67	3073209	1					
ANR	3073231	ReturnStatement	return FALSE ;	10189:2:313629:313641	3073209	0	True				
ANR	3073232	Identifier	FALSE		3073209	0					
ANR	3073233	ReturnStatement	return pidentry -> was_not_responding ;	10192:1:313648:313683	3073209	2	True				
ANR	3073234	PtrMemberAccess	pidentry -> was_not_responding		3073209	0					
ANR	3073235	Identifier	pidentry		3073209	0					
ANR	3073236	Identifier	was_not_responding		3073209	1					
ANR	3073237	ReturnType	int		3073209	1					
ANR	3073238	Identifier	DaemonCore :: Was_Not_Responding		3073209	2					
ANR	3073239	ParameterList	pid_t pid		3073209	3					
ANR	3073240	Parameter	pid_t pid	10182:35:313478:313486	3073209	0	True				
ANR	3073241	ParameterType	pid_t		3073209	0					
ANR	3073242	Identifier	pid		3073209	1					
ANR	3073243	CFGEntryNode	ENTRY		3073209		True				
ANR	3073244	CFGExitNode	EXIT		3073209		True				
ANR	3073245	Symbol	pidTable		3073209						
ANR	3073246	Symbol	pidTable -> lookup		3073209						
ANR	3073247	Symbol	* pidTable		3073209						
ANR	3073248	Symbol	* pidentry		3073209						
ANR	3073249	Symbol	pid		3073209						
ANR	3073250	Symbol	FALSE		3073209						
ANR	3073251	Symbol	pidentry -> was_not_responding		3073209						
ANR	3073252	Symbol	pidentry		3073209						
ANR	3073253	Function	DaemonCore :: SendAliveToParent	10196:0:313689:317358							
ANR	3073254	FunctionDef	DaemonCore :: SendAliveToParent ()		3073253	0					
ANR	3073255	CompoundStatement		10197:0:313725:317358	3073253	0					
ANR	3073256	IdentifierDeclStatement	MyString parent_sinful_string_buf ;	10198:1:313728:313761	3073253	0	True				
ANR	3073257	IdentifierDecl	parent_sinful_string_buf		3073253	0					
ANR	3073258	IdentifierDeclType	MyString		3073253	0					
ANR	3073259	Identifier	parent_sinful_string_buf		3073253	1					
ANR	3073260	IdentifierDeclStatement	char const * parent_sinful_string ;	10199:1:313764:313796	3073253	1	True				
ANR	3073261	IdentifierDecl	* parent_sinful_string		3073253	0					
ANR	3073262	IdentifierDeclType	char const *		3073253	0					
ANR	3073263	Identifier	parent_sinful_string		3073253	1					
ANR	3073264	IdentifierDeclStatement	char const * tmp ;	10200:1:313799:313814	3073253	2	True				
ANR	3073265	IdentifierDecl	* tmp		3073253	0					
ANR	3073266	IdentifierDeclType	char const *		3073253	0					
ANR	3073267	Identifier	tmp		3073253	1					
ANR	3073268	IdentifierDeclStatement	int ret_val ;	10201:1:313817:313828	3073253	3	True				
ANR	3073269	IdentifierDecl	ret_val		3073253	0					
ANR	3073270	IdentifierDeclType	int		3073253	0					
ANR	3073271	Identifier	ret_val		3073253	1					
ANR	3073272	Statement	static	10202:1:313831:313836	3073253	4	True				
ANR	3073273	IdentifierDeclStatement	bool first_time = true ;	10202:8:313838:313860	3073253	5	True				
ANR	3073274	IdentifierDecl	first_time = true		3073253	0					
ANR	3073275	IdentifierDeclType	bool		3073253	0					
ANR	3073276	Identifier	first_time		3073253	1					
ANR	3073277	AssignmentExpression	first_time = true		3073253	2		=			
ANR	3073278	Identifier	true		3073253	0					
ANR	3073279	Identifier	true		3073253	1					
ANR	3073280	IdentifierDeclStatement	int number_of_tries = 3 ;	10203:1:313863:313886	3073253	6	True				
ANR	3073281	IdentifierDecl	number_of_tries = 3		3073253	0					
ANR	3073282	IdentifierDeclType	int		3073253	0					
ANR	3073283	Identifier	number_of_tries		3073253	1					
ANR	3073284	AssignmentExpression	number_of_tries = 3		3073253	2		=			
ANR	3073285	Identifier	number_of_tries		3073253	0					
ANR	3073286	PrimaryExpression	3		3073253	1					
ANR	3073287	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: in SendAliveToParent()\\n"" )"	10205:1:313890:313949	3073253	7	True				
ANR	3073288	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: in SendAliveToParent()\\n"" )"		3073253	0					
ANR	3073289	Callee	dprintf		3073253	0					
ANR	3073290	Identifier	dprintf		3073253	0					
ANR	3073291	ArgumentList	D_FULLDEBUG		3073253	1					
ANR	3073292	Argument	D_FULLDEBUG		3073253	0					
ANR	3073293	Identifier	D_FULLDEBUG		3073253	0					
ANR	3073294	Argument	"""DaemonCore: in SendAliveToParent()\\n"""		3073253	1					
ANR	3073295	PrimaryExpression	"""DaemonCore: in SendAliveToParent()\\n"""		3073253	0					
ANR	3073296	IfStatement	if ( ! ppid )		3073253	8					
ANR	3073297	Condition	! ppid	10207:6:313958:313962	3073253	0	True				
ANR	3073298	UnaryOperationExpression	! ppid		3073253	0					
ANR	3073299	UnaryOperator	!		3073253	0					
ANR	3073300	Identifier	ppid		3073253	1					
ANR	3073301	CompoundStatement		11:14:240:240	3073253	1					
ANR	3073302	ReturnStatement	return FALSE ;	10209:2:314014:314026	3073253	0	True				
ANR	3073303	Identifier	FALSE		3073253	0					
ANR	3073304	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN ) )		3073253	9					
ANR	3073305	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )	10219:5:314472:314573	3073253	0	True				
ANR	3073306	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		3073253	0		||			
ANR	3073307	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP )		3073253	0					
ANR	3073308	Callee	get_mySubSystem ( ) -> isType		3073253	0					
ANR	3073309	PtrMemberAccess	get_mySubSystem ( ) -> isType		3073253	0					
ANR	3073310	CallExpression	get_mySubSystem ( )		3073253	0					
ANR	3073311	Callee	get_mySubSystem		3073253	0					
ANR	3073312	Identifier	get_mySubSystem		3073253	0					
ANR	3073313	ArgumentList			3073253	1					
ANR	3073314	Identifier	isType		3073253	1					
ANR	3073315	ArgumentList	SUBSYSTEM_TYPE_GAHP		3073253	1					
ANR	3073316	Argument	SUBSYSTEM_TYPE_GAHP		3073253	0					
ANR	3073317	Identifier	SUBSYSTEM_TYPE_GAHP		3073253	0					
ANR	3073318	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		3073253	1					
ANR	3073319	Callee	get_mySubSystem ( ) -> isType		3073253	0					
ANR	3073320	PtrMemberAccess	get_mySubSystem ( ) -> isType		3073253	0					
ANR	3073321	CallExpression	get_mySubSystem ( )		3073253	0					
ANR	3073322	Callee	get_mySubSystem		3073253	0					
ANR	3073323	Identifier	get_mySubSystem		3073253	0					
ANR	3073324	ArgumentList			3073253	1					
ANR	3073325	Identifier	isType		3073253	1					
ANR	3073326	ArgumentList	SUBSYSTEM_TYPE_DAGMAN		3073253	1					
ANR	3073327	Argument	SUBSYSTEM_TYPE_DAGMAN		3073253	0					
ANR	3073328	Identifier	SUBSYSTEM_TYPE_DAGMAN		3073253	0					
ANR	3073329	CompoundStatement		25:1:851:851	3073253	1					
ANR	3073330	ReturnStatement	return FALSE ;	10222:2:314581:314593	3073253	0	True				
ANR	3073331	Identifier	FALSE		3073253	0					
ANR	3073332	IfStatement	if ( ! Is_Pid_Alive ( ppid ) )		3073253	10					
ANR	3073333	Condition	! Is_Pid_Alive ( ppid )	10231:6:314914:314932	3073253	0	True				
ANR	3073334	UnaryOperationExpression	! Is_Pid_Alive ( ppid )		3073253	0					
ANR	3073335	UnaryOperator	!		3073253	0					
ANR	3073336	CallExpression	Is_Pid_Alive ( ppid )		3073253	1					
ANR	3073337	Callee	Is_Pid_Alive		3073253	0					
ANR	3073338	Identifier	Is_Pid_Alive		3073253	0					
ANR	3073339	ArgumentList	ppid		3073253	1					
ANR	3073340	Argument	ppid		3073253	0					
ANR	3073341	Identifier	ppid		3073253	0					
ANR	3073342	CompoundStatement		35:28:1210:1210	3073253	1					
ANR	3073343	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: in SendAliveToParent() - ppid %ul disappeared!\\n"" , ppid )"	10232:2:314940:315036	3073253	0	True				
ANR	3073344	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: in SendAliveToParent() - ppid %ul disappeared!\\n"" , ppid )"		3073253	0					
ANR	3073345	Callee	dprintf		3073253	0					
ANR	3073346	Identifier	dprintf		3073253	0					
ANR	3073347	ArgumentList	D_FULLDEBUG		3073253	1					
ANR	3073348	Argument	D_FULLDEBUG		3073253	0					
ANR	3073349	Identifier	D_FULLDEBUG		3073253	0					
ANR	3073350	Argument	"""DaemonCore: in SendAliveToParent() - ppid %ul disappeared!\\n"""		3073253	1					
ANR	3073351	PrimaryExpression	"""DaemonCore: in SendAliveToParent() - ppid %ul disappeared!\\n"""		3073253	0					
ANR	3073352	Argument	ppid		3073253	2					
ANR	3073353	Identifier	ppid		3073253	0					
ANR	3073354	ReturnStatement	return FALSE ;	10235:2:315040:315052	3073253	1	True				
ANR	3073355	Identifier	FALSE		3073253	0					
ANR	3073356	ExpressionStatement	tmp = InfoCommandSinfulString ( ppid )	10238:1:315059:315094	3073253	11	True				
ANR	3073357	AssignmentExpression	tmp = InfoCommandSinfulString ( ppid )		3073253	0		=			
ANR	3073358	Identifier	tmp		3073253	0					
ANR	3073359	CallExpression	InfoCommandSinfulString ( ppid )		3073253	1					
ANR	3073360	Callee	InfoCommandSinfulString		3073253	0					
ANR	3073361	Identifier	InfoCommandSinfulString		3073253	0					
ANR	3073362	ArgumentList	ppid		3073253	1					
ANR	3073363	Argument	ppid		3073253	0					
ANR	3073364	Identifier	ppid		3073253	0					
ANR	3073365	IfStatement	if ( tmp )		3073253	12					
ANR	3073366	Condition	tmp	10239:6:315102:315104	3073253	0	True				
ANR	3073367	Identifier	tmp		3073253	0					
ANR	3073368	CompoundStatement		43:12:1382:1382	3073253	1					
ANR	3073369	ExpressionStatement	parent_sinful_string_buf = tmp	10242:2:315221:315251	3073253	0	True				
ANR	3073370	AssignmentExpression	parent_sinful_string_buf = tmp		3073253	0		=			
ANR	3073371	Identifier	parent_sinful_string_buf		3073253	0					
ANR	3073372	Identifier	tmp		3073253	1					
ANR	3073373	ExpressionStatement	parent_sinful_string = parent_sinful_string_buf . Value ( )	10243:2:315255:315310	3073253	1	True				
ANR	3073374	AssignmentExpression	parent_sinful_string = parent_sinful_string_buf . Value ( )		3073253	0		=			
ANR	3073375	Identifier	parent_sinful_string		3073253	0					
ANR	3073376	CallExpression	parent_sinful_string_buf . Value ( )		3073253	1					
ANR	3073377	Callee	parent_sinful_string_buf . Value		3073253	0					
ANR	3073378	MemberAccess	parent_sinful_string_buf . Value		3073253	0					
ANR	3073379	Identifier	parent_sinful_string_buf		3073253	0					
ANR	3073380	Identifier	Value		3073253	1					
ANR	3073381	ArgumentList			3073253	1					
ANR	3073382	ElseStatement	else		3073253	0					
ANR	3073383	CompoundStatement		48:8:1594:1594	3073253	0					
ANR	3073384	Statement	dprintf	10245:2:315324:315330	3073253	0	True				
ANR	3073385	Statement	(	10245:9:315331:315331	3073253	1	True				
ANR	3073386	Statement	D_FULLDEBUG	10245:10:315332:315342	3073253	2	True				
ANR	3073387	Statement	","	10245:21:315343:315343	3073253	3	True				
ANR	3073388	Statement	"""DaemonCore: No parent_sinful_string. """	10245:22:315344:315382	3073253	4	True				
ANR	3073389	Statement	"""SendAliveToParent() failed.\\n"""	10246:3:315387:315417	3073253	5	True				
ANR	3073390	Statement	)	10246:34:315418:315418	3073253	6	True				
ANR	3073391	ExpressionStatement		10246:35:315419:315419	3073253	7	True				
ANR	3073392	ReturnStatement	return FALSE ;	10248:2:315450:315462	3073253	8	True				
ANR	3073393	Identifier	FALSE		3073253	0					
ANR	3073394	IfStatement	"if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTER ) && param_boolean ( ""GLEXEC_STARTER"" , false ) )"		3073253	13					
ANR	3073395	Condition	"get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTER ) && param_boolean ( ""GLEXEC_STARTER"" , false )"	10257:6:315841:315935	3073253	0	True				
ANR	3073396	AndExpression	"get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTER ) && param_boolean ( ""GLEXEC_STARTER"" , false )"		3073253	0		&&			
ANR	3073397	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTER )		3073253	0					
ANR	3073398	Callee	get_mySubSystem ( ) -> isType		3073253	0					
ANR	3073399	PtrMemberAccess	get_mySubSystem ( ) -> isType		3073253	0					
ANR	3073400	CallExpression	get_mySubSystem ( )		3073253	0					
ANR	3073401	Callee	get_mySubSystem		3073253	0					
ANR	3073402	Identifier	get_mySubSystem		3073253	0					
ANR	3073403	ArgumentList			3073253	1					
ANR	3073404	Identifier	isType		3073253	1					
ANR	3073405	ArgumentList	SUBSYSTEM_TYPE_STARTER		3073253	1					
ANR	3073406	Argument	SUBSYSTEM_TYPE_STARTER		3073253	0					
ANR	3073407	Identifier	SUBSYSTEM_TYPE_STARTER		3073253	0					
ANR	3073408	CallExpression	"param_boolean ( ""GLEXEC_STARTER"" , false )"		3073253	1					
ANR	3073409	Callee	param_boolean		3073253	0					
ANR	3073410	Identifier	param_boolean		3073253	0					
ANR	3073411	ArgumentList	"""GLEXEC_STARTER"""		3073253	1					
ANR	3073412	Argument	"""GLEXEC_STARTER"""		3073253	0					
ANR	3073413	PrimaryExpression	"""GLEXEC_STARTER"""		3073253	0					
ANR	3073414	Argument	false		3073253	1					
ANR	3073415	Identifier	false		3073253	0					
ANR	3073416	CompoundStatement		63:1:2214:2214	3073253	1					
ANR	3073417	ExpressionStatement	first_time = false	10260:2:315944:315962	3073253	0	True				
ANR	3073418	AssignmentExpression	first_time = false		3073253	0		=			
ANR	3073419	Identifier	first_time		3073253	0					
ANR	3073420	Identifier	false		3073253	1					
ANR	3073421	IdentifierDeclStatement	double dprintf_lock_delay = dprintf_get_lock_delay ( ) ;	10263:1:315969:316021	3073253	14	True				
ANR	3073422	IdentifierDecl	dprintf_lock_delay = dprintf_get_lock_delay ( )		3073253	0					
ANR	3073423	IdentifierDeclType	double		3073253	0					
ANR	3073424	Identifier	dprintf_lock_delay		3073253	1					
ANR	3073425	AssignmentExpression	dprintf_lock_delay = dprintf_get_lock_delay ( )		3073253	2		=			
ANR	3073426	Identifier	dprintf_lock_delay		3073253	0					
ANR	3073427	CallExpression	dprintf_get_lock_delay ( )		3073253	1					
ANR	3073428	Callee	dprintf_get_lock_delay		3073253	0					
ANR	3073429	Identifier	dprintf_get_lock_delay		3073253	0					
ANR	3073430	ArgumentList			3073253	1					
ANR	3073431	ExpressionStatement	dprintf_reset_lock_delay ( )	10264:1:316024:316050	3073253	15	True				
ANR	3073432	CallExpression	dprintf_reset_lock_delay ( )		3073253	0					
ANR	3073433	Callee	dprintf_reset_lock_delay		3073253	0					
ANR	3073434	Identifier	dprintf_reset_lock_delay		3073253	0					
ANR	3073435	ArgumentList			3073253	1					
ANR	3073436	IdentifierDeclStatement	bool blocking = first_time ;	10266:1:316054:316080	3073253	16	True				
ANR	3073437	IdentifierDecl	blocking = first_time		3073253	0					
ANR	3073438	IdentifierDeclType	bool		3073253	0					
ANR	3073439	Identifier	blocking		3073253	1					
ANR	3073440	AssignmentExpression	blocking = first_time		3073253	2		=			
ANR	3073441	Identifier	first_time		3073253	0					
ANR	3073442	Identifier	first_time		3073253	1					
ANR	3073443	IdentifierDeclStatement	"classy_counted_ptr < Daemon > d = new Daemon ( DT_ANY , parent_sinful_string ) ;"	10267:1:316083:316153	3073253	17	True				
ANR	3073444	IdentifierDecl	"d = new Daemon ( DT_ANY , parent_sinful_string )"		3073253	0					
ANR	3073445	IdentifierDeclType	classy_counted_ptr < Daemon >		3073253	0					
ANR	3073446	Identifier	d		3073253	1					
ANR	3073447	AssignmentExpression	"d = new Daemon ( DT_ANY , parent_sinful_string )"		3073253	2		=			
ANR	3073448	Identifier	d		3073253	0					
ANR	3073449	Expression	"DT_ANY , parent_sinful_string"		3073253	1					
ANR	3073450	Identifier	DT_ANY		3073253	0					
ANR	3073451	Identifier	parent_sinful_string		3073253	1					
ANR	3073452	IdentifierDeclStatement	"classy_counted_ptr < ChildAliveMsg > msg = new ChildAliveMsg ( mypid , max_hang_time , number_of_tries , dprintf_lock_delay , blocking ) ;"	10268:1:316156:316278	3073253	18	True				
ANR	3073453	IdentifierDecl	"msg = new ChildAliveMsg ( mypid , max_hang_time , number_of_tries , dprintf_lock_delay , blocking )"		3073253	0					
ANR	3073454	IdentifierDeclType	classy_counted_ptr < ChildAliveMsg >		3073253	0					
ANR	3073455	Identifier	msg		3073253	1					
ANR	3073456	AssignmentExpression	"msg = new ChildAliveMsg ( mypid , max_hang_time , number_of_tries , dprintf_lock_delay , blocking )"		3073253	2		=			
ANR	3073457	Identifier	msg		3073253	0					
ANR	3073458	Expression	"mypid , max_hang_time , number_of_tries , dprintf_lock_delay , blocking"		3073253	1					
ANR	3073459	Identifier	mypid		3073253	0					
ANR	3073460	Expression	"max_hang_time , number_of_tries , dprintf_lock_delay , blocking"		3073253	1					
ANR	3073461	Identifier	max_hang_time		3073253	0					
ANR	3073462	Expression	"number_of_tries , dprintf_lock_delay , blocking"		3073253	1					
ANR	3073463	Identifier	number_of_tries		3073253	0					
ANR	3073464	Expression	"dprintf_lock_delay , blocking"		3073253	1					
ANR	3073465	Identifier	dprintf_lock_delay		3073253	0					
ANR	3073466	Identifier	blocking		3073253	1					
ANR	3073467	IdentifierDeclStatement	int timeout = m_child_alive_period / number_of_tries ;	10270:1:316282:316334	3073253	19	True				
ANR	3073468	IdentifierDecl	timeout = m_child_alive_period / number_of_tries		3073253	0					
ANR	3073469	IdentifierDeclType	int		3073253	0					
ANR	3073470	Identifier	timeout		3073253	1					
ANR	3073471	AssignmentExpression	timeout = m_child_alive_period / number_of_tries		3073253	2		=			
ANR	3073472	Identifier	timeout		3073253	0					
ANR	3073473	MultiplicativeExpression	m_child_alive_period / number_of_tries		3073253	1		/			
ANR	3073474	Identifier	m_child_alive_period		3073253	0					
ANR	3073475	Identifier	number_of_tries		3073253	1					
ANR	3073476	IfStatement	if ( timeout < 60 )		3073253	20					
ANR	3073477	Condition	timeout < 60	10271:5:316341:316352	3073253	0	True				
ANR	3073478	RelationalExpression	timeout < 60		3073253	0		<			
ANR	3073479	Identifier	timeout		3073253	0					
ANR	3073480	PrimaryExpression	60		3073253	1					
ANR	3073481	CompoundStatement		75:20:2630:2630	3073253	1					
ANR	3073482	ExpressionStatement	timeout = 60	10272:2:316360:316372	3073253	0	True				
ANR	3073483	AssignmentExpression	timeout = 60		3073253	0		=			
ANR	3073484	Identifier	timeout		3073253	0					
ANR	3073485	PrimaryExpression	60		3073253	1					
ANR	3073486	ExpressionStatement	msg -> setDeadlineTimeout ( timeout )	10274:1:316379:316413	3073253	21	True				
ANR	3073487	CallExpression	msg -> setDeadlineTimeout ( timeout )		3073253	0					
ANR	3073488	Callee	msg -> setDeadlineTimeout		3073253	0					
ANR	3073489	PtrMemberAccess	msg -> setDeadlineTimeout		3073253	0					
ANR	3073490	Identifier	msg		3073253	0					
ANR	3073491	Identifier	setDeadlineTimeout		3073253	1					
ANR	3073492	ArgumentList	timeout		3073253	1					
ANR	3073493	Argument	timeout		3073253	0					
ANR	3073494	Identifier	timeout		3073253	0					
ANR	3073495	ExpressionStatement	msg -> setTimeout ( timeout )	10275:1:316416:316442	3073253	22	True				
ANR	3073496	CallExpression	msg -> setTimeout ( timeout )		3073253	0					
ANR	3073497	Callee	msg -> setTimeout		3073253	0					
ANR	3073498	PtrMemberAccess	msg -> setTimeout		3073253	0					
ANR	3073499	Identifier	msg		3073253	0					
ANR	3073500	Identifier	setTimeout		3073253	1					
ANR	3073501	ArgumentList	timeout		3073253	1					
ANR	3073502	Argument	timeout		3073253	0					
ANR	3073503	Identifier	timeout		3073253	0					
ANR	3073504	IfStatement	if ( blocking || ! d -> hasUDPCommandPort ( ) || ! m_wants_dc_udp )		3073253	23					
ANR	3073505	Condition	blocking || ! d -> hasUDPCommandPort ( ) || ! m_wants_dc_udp	10277:5:316450:316503	3073253	0	True				
ANR	3073506	OrExpression	blocking || ! d -> hasUDPCommandPort ( ) || ! m_wants_dc_udp		3073253	0		||			
ANR	3073507	Identifier	blocking		3073253	0					
ANR	3073508	OrExpression	! d -> hasUDPCommandPort ( ) || ! m_wants_dc_udp		3073253	1		||			
ANR	3073509	UnaryOperationExpression	! d -> hasUDPCommandPort ( )		3073253	0					
ANR	3073510	UnaryOperator	!		3073253	0					
ANR	3073511	CallExpression	d -> hasUDPCommandPort ( )		3073253	1					
ANR	3073512	Callee	d -> hasUDPCommandPort		3073253	0					
ANR	3073513	PtrMemberAccess	d -> hasUDPCommandPort		3073253	0					
ANR	3073514	Identifier	d		3073253	0					
ANR	3073515	Identifier	hasUDPCommandPort		3073253	1					
ANR	3073516	ArgumentList			3073253	1					
ANR	3073517	UnaryOperationExpression	! m_wants_dc_udp		3073253	1					
ANR	3073518	UnaryOperator	!		3073253	0					
ANR	3073519	Identifier	m_wants_dc_udp		3073253	1					
ANR	3073520	CompoundStatement		81:62:2781:2781	3073253	1					
ANR	3073521	ExpressionStatement	msg -> setStreamType ( Stream :: reli_sock )	10278:2:316511:316550	3073253	0	True				
ANR	3073522	CallExpression	msg -> setStreamType ( Stream :: reli_sock )		3073253	0					
ANR	3073523	Callee	msg -> setStreamType		3073253	0					
ANR	3073524	PtrMemberAccess	msg -> setStreamType		3073253	0					
ANR	3073525	Identifier	msg		3073253	0					
ANR	3073526	Identifier	setStreamType		3073253	1					
ANR	3073527	ArgumentList	Stream :: reli_sock		3073253	1					
ANR	3073528	Argument	Stream :: reli_sock		3073253	0					
ANR	3073529	Identifier	Stream :: reli_sock		3073253	0					
ANR	3073530	ElseStatement	else		3073253	0					
ANR	3073531	CompoundStatement		84:6:2837:2837	3073253	0					
ANR	3073532	ExpressionStatement	msg -> setStreamType ( Stream :: safe_sock )	10281:2:316567:316606	3073253	0	True				
ANR	3073533	CallExpression	msg -> setStreamType ( Stream :: safe_sock )		3073253	0					
ANR	3073534	Callee	msg -> setStreamType		3073253	0					
ANR	3073535	PtrMemberAccess	msg -> setStreamType		3073253	0					
ANR	3073536	Identifier	msg		3073253	0					
ANR	3073537	Identifier	setStreamType		3073253	1					
ANR	3073538	ArgumentList	Stream :: safe_sock		3073253	1					
ANR	3073539	Argument	Stream :: safe_sock		3073253	0					
ANR	3073540	Identifier	Stream :: safe_sock		3073253	0					
ANR	3073541	IfStatement	if ( blocking )		3073253	24					
ANR	3073542	Condition	blocking	10284:5:316618:316625	3073253	0	True				
ANR	3073543	Identifier	blocking		3073253	0					
ANR	3073544	CompoundStatement		88:16:2903:2903	3073253	1					
ANR	3073545	ExpressionStatement	d -> sendBlockingMsg ( msg . get ( ) )	10285:2:316633:316664	3073253	0	True				
ANR	3073546	CallExpression	d -> sendBlockingMsg ( msg . get ( ) )		3073253	0					
ANR	3073547	Callee	d -> sendBlockingMsg		3073253	0					
ANR	3073548	PtrMemberAccess	d -> sendBlockingMsg		3073253	0					
ANR	3073549	Identifier	d		3073253	0					
ANR	3073550	Identifier	sendBlockingMsg		3073253	1					
ANR	3073551	ArgumentList	msg . get ( )		3073253	1					
ANR	3073552	Argument	msg . get ( )		3073253	0					
ANR	3073553	CallExpression	msg . get ( )		3073253	0					
ANR	3073554	Callee	msg . get		3073253	0					
ANR	3073555	MemberAccess	msg . get		3073253	0					
ANR	3073556	Identifier	msg		3073253	0					
ANR	3073557	Identifier	get		3073253	1					
ANR	3073558	ArgumentList			3073253	1					
ANR	3073559	ExpressionStatement	ret_val = msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED	10286:2:316668:316728	3073253	1	True				
ANR	3073560	AssignmentExpression	ret_val = msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED		3073253	0		=			
ANR	3073561	Identifier	ret_val		3073253	0					
ANR	3073562	EqualityExpression	msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED		3073253	1		==			
ANR	3073563	CallExpression	msg -> deliveryStatus ( )		3073253	0					
ANR	3073564	Callee	msg -> deliveryStatus		3073253	0					
ANR	3073565	PtrMemberAccess	msg -> deliveryStatus		3073253	0					
ANR	3073566	Identifier	msg		3073253	0					
ANR	3073567	Identifier	deliveryStatus		3073253	1					
ANR	3073568	ArgumentList			3073253	1					
ANR	3073569	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3073253	1					
ANR	3073570	ElseStatement	else		3073253	0					
ANR	3073571	CompoundStatement		92:6:3015:3015	3073253	0					
ANR	3073572	ExpressionStatement	d -> sendMsg ( msg . get ( ) )	10289:2:316745:316768	3073253	0	True				
ANR	3073573	CallExpression	d -> sendMsg ( msg . get ( ) )		3073253	0					
ANR	3073574	Callee	d -> sendMsg		3073253	0					
ANR	3073575	PtrMemberAccess	d -> sendMsg		3073253	0					
ANR	3073576	Identifier	d		3073253	0					
ANR	3073577	Identifier	sendMsg		3073253	1					
ANR	3073578	ArgumentList	msg . get ( )		3073253	1					
ANR	3073579	Argument	msg . get ( )		3073253	0					
ANR	3073580	CallExpression	msg . get ( )		3073253	0					
ANR	3073581	Callee	msg . get		3073253	0					
ANR	3073582	MemberAccess	msg . get		3073253	0					
ANR	3073583	Identifier	msg		3073253	0					
ANR	3073584	Identifier	get		3073253	1					
ANR	3073585	ArgumentList			3073253	1					
ANR	3073586	ExpressionStatement	ret_val = TRUE	10290:2:316772:316786	3073253	1	True				
ANR	3073587	AssignmentExpression	ret_val = TRUE		3073253	0		=			
ANR	3073588	Identifier	ret_val		3073253	0					
ANR	3073589	Identifier	TRUE		3073253	1					
ANR	3073590	IfStatement	if ( first_time )		3073253	25					
ANR	3073591	Condition	first_time	10293:6:316799:316808	3073253	0	True				
ANR	3073592	Identifier	first_time		3073253	0					
ANR	3073593	CompoundStatement		97:19:3086:3086	3073253	1					
ANR	3073594	ExpressionStatement	first_time = false	10294:2:316816:316834	3073253	0	True				
ANR	3073595	AssignmentExpression	first_time = false		3073253	0		=			
ANR	3073596	Identifier	first_time		3073253	0					
ANR	3073597	Identifier	false		3073253	1					
ANR	3073598	IfStatement	if ( ret_val == FALSE )		3073253	1					
ANR	3073599	Condition	ret_val == FALSE	10295:7:316843:316858	3073253	0	True				
ANR	3073600	EqualityExpression	ret_val == FALSE		3073253	0		==			
ANR	3073601	Identifier	ret_val		3073253	0					
ANR	3073602	Identifier	FALSE		3073253	1					
ANR	3073603	CompoundStatement		99:26:3136:3136	3073253	1					
ANR	3073604	ExpressionStatement	"EXCEPT ( ""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"" , parent_sinful_string )"	10296:3:316867:316953	3073253	0	True				
ANR	3073605	CallExpression	"EXCEPT ( ""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"" , parent_sinful_string )"		3073253	0					
ANR	3073606	Callee	EXCEPT		3073253	0					
ANR	3073607	Identifier	EXCEPT		3073253	0					
ANR	3073608	ArgumentList	"""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"""		3073253	1					
ANR	3073609	Argument	"""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"""		3073253	0					
ANR	3073610	PrimaryExpression	"""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"""		3073253	0					
ANR	3073611	Argument	parent_sinful_string		3073253	1					
ANR	3073612	Identifier	parent_sinful_string		3073253	0					
ANR	3073613	IfStatement	if ( ret_val == FALSE )		3073253	26					
ANR	3073614	Condition	ret_val == FALSE	10301:5:316968:316983	3073253	0	True				
ANR	3073615	EqualityExpression	ret_val == FALSE		3073253	0		==			
ANR	3073616	Identifier	ret_val		3073253	0					
ANR	3073617	Identifier	FALSE		3073253	1					
ANR	3073618	CompoundStatement		105:23:3260:3260	3073253	1					
ANR	3073619	Statement	dprintf	10302:2:316990:316996	3073253	0	True				
ANR	3073620	Statement	(	10302:9:316997:316997	3073253	1	True				
ANR	3073621	Statement	D_ALWAYS	10302:10:316998:317005	3073253	2	True				
ANR	3073622	Statement	","	10302:18:317006:317006	3073253	3	True				
ANR	3073623	Statement	"""DaemonCore: Leaving SendAliveToParent() - """	10302:19:317007:317050	3073253	4	True				
ANR	3073624	Statement	"""FAILED sending to %s\\n"""	10303:3:317055:317078	3073253	5	True				
ANR	3073625	Statement	","	10303:27:317079:317079	3073253	6	True				
ANR	3073626	Statement	parent_sinful_string	10304:3:317084:317103	3073253	7	True				
ANR	3073627	Statement	)	10304:23:317104:317104	3073253	8	True				
ANR	3073628	ExpressionStatement		10304:24:317105:317105	3073253	9	True				
ANR	3073629	ElseStatement	else		3073253	0					
ANR	3073630	IfStatement	if ( msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED )		3073253	0					
ANR	3073631	Condition	msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED	10305:12:317119:317168	3073253	0	True				
ANR	3073632	EqualityExpression	msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED		3073253	0		==			
ANR	3073633	CallExpression	msg -> deliveryStatus ( )		3073253	0					
ANR	3073634	Callee	msg -> deliveryStatus		3073253	0					
ANR	3073635	PtrMemberAccess	msg -> deliveryStatus		3073253	0					
ANR	3073636	Identifier	msg		3073253	0					
ANR	3073637	Identifier	deliveryStatus		3073253	1					
ANR	3073638	ArgumentList			3073253	1					
ANR	3073639	Identifier	DCMsg :: DELIVERY_SUCCEEDED		3073253	1					
ANR	3073640	CompoundStatement		109:65:3446:3446	3073253	1					
ANR	3073641	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: Leaving SendAliveToParent() - success\\n"" )"	10306:2:317176:317250	3073253	0	True				
ANR	3073642	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: Leaving SendAliveToParent() - success\\n"" )"		3073253	0					
ANR	3073643	Callee	dprintf		3073253	0					
ANR	3073644	Identifier	dprintf		3073253	0					
ANR	3073645	ArgumentList	D_FULLDEBUG		3073253	1					
ANR	3073646	Argument	D_FULLDEBUG		3073253	0					
ANR	3073647	Identifier	D_FULLDEBUG		3073253	0					
ANR	3073648	Argument	"""DaemonCore: Leaving SendAliveToParent() - success\\n"""		3073253	1					
ANR	3073649	PrimaryExpression	"""DaemonCore: Leaving SendAliveToParent() - success\\n"""		3073253	0					
ANR	3073650	ElseStatement	else		3073253	0					
ANR	3073651	CompoundStatement		111:8:3534:3534	3073253	0					
ANR	3073652	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: Leaving SendAliveToParent() - pending\\n"" )"	10308:2:317264:317338	3073253	0	True				
ANR	3073653	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: Leaving SendAliveToParent() - pending\\n"" )"		3073253	0					
ANR	3073654	Callee	dprintf		3073253	0					
ANR	3073655	Identifier	dprintf		3073253	0					
ANR	3073656	ArgumentList	D_FULLDEBUG		3073253	1					
ANR	3073657	Argument	D_FULLDEBUG		3073253	0					
ANR	3073658	Identifier	D_FULLDEBUG		3073253	0					
ANR	3073659	Argument	"""DaemonCore: Leaving SendAliveToParent() - pending\\n"""		3073253	1					
ANR	3073660	PrimaryExpression	"""DaemonCore: Leaving SendAliveToParent() - pending\\n"""		3073253	0					
ANR	3073661	ReturnStatement	return TRUE ;	10311:1:317345:317356	3073253	27	True				
ANR	3073662	Identifier	TRUE		3073253	0					
ANR	3073663	ReturnType	int		3073253	1					
ANR	3073664	Identifier	DaemonCore :: SendAliveToParent		3073253	2					
ANR	3073665	ParameterList			3073253	3					
ANR	3073666	CFGEntryNode	ENTRY		3073253		True				
ANR	3073667	CFGExitNode	EXIT		3073253		True				
ANR	3073668	Symbol	msg		3073253						
ANR	3073669	Symbol	msg -> deliveryStatus		3073253						
ANR	3073670	Symbol	Stream :: safe_sock		3073253						
ANR	3073671	Symbol	DT_ANY		3073253						
ANR	3073672	Symbol	timeout		3073253						
ANR	3073673	Symbol	InfoCommandSinfulString		3073253						
ANR	3073674	Symbol	Is_Pid_Alive		3073253						
ANR	3073675	Symbol	max_hang_time		3073253						
ANR	3073676	Symbol	SUBSYSTEM_TYPE_DAGMAN		3073253						
ANR	3073677	Symbol	tmp		3073253						
ANR	3073678	Symbol	first_time		3073253						
ANR	3073679	Symbol	blocking		3073253						
ANR	3073680	Symbol	d -> hasUDPCommandPort		3073253						
ANR	3073681	Symbol	m_wants_dc_udp		3073253						
ANR	3073682	Symbol	Stream :: reli_sock		3073253						
ANR	3073683	Symbol	msg . get		3073253						
ANR	3073684	Symbol	parent_sinful_string_buf . Value		3073253						
ANR	3073685	Symbol	parent_sinful_string		3073253						
ANR	3073686	Symbol	m_child_alive_period		3073253						
ANR	3073687	Symbol	get_mySubSystem ( ) -> isType		3073253						
ANR	3073688	Symbol	d		3073253						
ANR	3073689	Symbol	* get_mySubSystem		3073253						
ANR	3073690	Symbol	dprintf_lock_delay		3073253						
ANR	3073691	Symbol	dprintf_get_lock_delay		3073253						
ANR	3073692	Symbol	mypid		3073253						
ANR	3073693	Symbol	false		3073253						
ANR	3073694	Symbol	TRUE		3073253						
ANR	3073695	Symbol	D_FULLDEBUG		3073253						
ANR	3073696	Symbol	param_boolean		3073253						
ANR	3073697	Symbol	* msg		3073253						
ANR	3073698	Symbol	ret_val		3073253						
ANR	3073699	Symbol	SUBSYSTEM_TYPE_STARTER		3073253						
ANR	3073700	Symbol	* d		3073253						
ANR	3073701	Symbol	ppid		3073253						
ANR	3073702	Symbol	number_of_tries		3073253						
ANR	3073703	Symbol	DCMsg :: DELIVERY_SUCCEEDED		3073253						
ANR	3073704	Symbol	parent_sinful_string_buf		3073253						
ANR	3073705	Symbol	true		3073253						
ANR	3073706	Symbol	FALSE		3073253						
ANR	3073707	Symbol	get_mySubSystem		3073253						
ANR	3073708	Symbol	SUBSYSTEM_TYPE_GAHP		3073253						
ANR	3073709	Function	DaemonCore :: ParseArgsString	10315:0:317375:318322							
ANR	3073710	FunctionDef	DaemonCore :: ParseArgsString (const char * str)		3073709	0					
ANR	3073711	CompoundStatement		10316:0:317427:318322	3073709	0					
ANR	3073712	IdentifierDeclStatement	"char separator1 , separator2 ;"	10317:1:317430:317457	3073709	0	True				
ANR	3073713	IdentifierDecl	separator1		3073709	0					
ANR	3073714	IdentifierDeclType	char		3073709	0					
ANR	3073715	Identifier	separator1		3073709	1					
ANR	3073716	IdentifierDecl	separator2		3073709	1					
ANR	3073717	IdentifierDeclType	char		3073709	0					
ANR	3073718	Identifier	separator2		3073709	1					
ANR	3073719	IdentifierDeclStatement	int maxlength ;	10318:1:317460:317473	3073709	1	True				
ANR	3073720	IdentifierDecl	maxlength		3073709	0					
ANR	3073721	IdentifierDeclType	int		3073709	0					
ANR	3073722	Identifier	maxlength		3073709	1					
ANR	3073723	IdentifierDeclStatement	"char * * argv , * arg ;"	10319:1:317476:317493	3073709	2	True				
ANR	3073724	IdentifierDecl	* * argv		3073709	0					
ANR	3073725	IdentifierDeclType	char * *		3073709	0					
ANR	3073726	Identifier	argv		3073709	1					
ANR	3073727	IdentifierDecl	* arg		3073709	1					
ANR	3073728	IdentifierDeclType	char *		3073709	0					
ANR	3073729	Identifier	arg		3073709	1					
ANR	3073730	IdentifierDeclStatement	int nargs = 0 ;	10320:1:317496:317507	3073709	3	True				
ANR	3073731	IdentifierDecl	nargs = 0		3073709	0					
ANR	3073732	IdentifierDeclType	int		3073709	0					
ANR	3073733	Identifier	nargs		3073709	1					
ANR	3073734	AssignmentExpression	nargs = 0		3073709	2		=			
ANR	3073735	Identifier	nargs		3073709	0					
ANR	3073736	PrimaryExpression	0		3073709	1					
ANR	3073737	ExpressionStatement	separator1 = ' '	10322:1:317511:317527	3073709	4	True				
ANR	3073738	AssignmentExpression	separator1 = ' '		3073709	0		=			
ANR	3073739	Identifier	separator1		3073709	0					
ANR	3073740	PrimaryExpression	' '		3073709	1					
ANR	3073741	ExpressionStatement	separator2 = '\\t'	10323:1:317530:317547	3073709	5	True				
ANR	3073742	AssignmentExpression	separator2 = '\\t'		3073709	0		=			
ANR	3073743	Identifier	separator2		3073709	0					
ANR	3073744	PrimaryExpression	'\\t'		3073709	1					
ANR	3073745	ExpressionStatement	maxlength = strlen ( str ) + 1	10331:1:317715:317740	3073709	6	True				
ANR	3073746	AssignmentExpression	maxlength = strlen ( str ) + 1		3073709	0		=			
ANR	3073747	Identifier	maxlength		3073709	0					
ANR	3073748	AdditiveExpression	strlen ( str ) + 1		3073709	1		+			
ANR	3073749	CallExpression	strlen ( str )		3073709	0					
ANR	3073750	Callee	strlen		3073709	0					
ANR	3073751	Identifier	strlen		3073709	0					
ANR	3073752	ArgumentList	str		3073709	1					
ANR	3073753	Argument	str		3073709	0					
ANR	3073754	Identifier	str		3073709	0					
ANR	3073755	PrimaryExpression	1		3073709	1					
ANR	3073756	Statement	argv	10333:1:317744:317747	3073709	7	True				
ANR	3073757	Statement	=	10333:6:317749:317749	3073709	8	True				
ANR	3073758	Statement	new	10333:8:317751:317753	3073709	9	True				
ANR	3073759	Statement	char	10333:12:317755:317758	3073709	10	True				
ANR	3073760	Statement	*	10333:16:317759:317759	3073709	11	True				
ANR	3073761	Statement	[	10333:17:317760:317760	3073709	12	True				
ANR	3073762	Statement	maxlength	10333:18:317761:317769	3073709	13	True				
ANR	3073763	Statement	]	10333:27:317770:317770	3073709	14	True				
ANR	3073764	ExpressionStatement		10333:28:317771:317771	3073709	15	True				
ANR	3073765	WhileStatement	while ( * str )		3073709	16					
ANR	3073766	Condition	* str	10336:7:317823:317826	3073709	0	True				
ANR	3073767	UnaryOperationExpression	* str		3073709	0					
ANR	3073768	UnaryOperator	*		3073709	0					
ANR	3073769	Identifier	str		3073709	1					
ANR	3073770	CompoundStatement		21:13:401:401	3073709	1					
ANR	3073771	WhileStatement	while ( * str == separator1 || * str == separator2 )		3073709	0					
ANR	3073772	Condition	* str == separator1 || * str == separator2	10338:9:317885:317924	3073709	0	True				
ANR	3073773	OrExpression	* str == separator1 || * str == separator2		3073709	0		||			
ANR	3073774	EqualityExpression	* str == separator1		3073709	0		==			
ANR	3073775	UnaryOperationExpression	* str		3073709	0					
ANR	3073776	UnaryOperator	*		3073709	0					
ANR	3073777	Identifier	str		3073709	1					
ANR	3073778	Identifier	separator1		3073709	1					
ANR	3073779	EqualityExpression	* str == separator2		3073709	1		==			
ANR	3073780	UnaryOperationExpression	* str		3073709	0					
ANR	3073781	UnaryOperator	*		3073709	0					
ANR	3073782	Identifier	str		3073709	1					
ANR	3073783	Identifier	separator2		3073709	1					
ANR	3073784	CompoundStatement		23:52:500:500	3073709	1					
ANR	3073785	ExpressionStatement	str ++	10339:3:317933:317938	3073709	0	True				
ANR	3073786	PostIncDecOperationExpression	str ++		3073709	0					
ANR	3073787	Identifier	str		3073709	0					
ANR	3073788	IncDec	++		3073709	1					
ANR	3073789	IfStatement	if ( * str )		3073709	1					
ANR	3073790	Condition	* str	10343:5:317986:317989	3073709	0	True				
ANR	3073791	UnaryOperationExpression	* str		3073709	0					
ANR	3073792	UnaryOperator	*		3073709	0					
ANR	3073793	Identifier	str		3073709	1					
ANR	3073794	CompoundStatement		28:11:564:564	3073709	1					
ANR	3073795	ExpressionStatement	argv [ nargs ] = new char [ maxlength ]	10346:3:318029:318062	3073709	0	True				
ANR	3073796	AssignmentExpression	argv [ nargs ] = new char [ maxlength ]		3073709	0		=			
ANR	3073797	ArrayIndexing	argv [ nargs ]		3073709	0					
ANR	3073798	Identifier	argv		3073709	0					
ANR	3073799	Identifier	nargs		3073709	1					
ANR	3073800	Identifier	maxlength		3073709	1					
ANR	3073801	ExpressionStatement	arg = argv [ nargs ]	10349:3:318110:318127	3073709	1	True				
ANR	3073802	AssignmentExpression	arg = argv [ nargs ]		3073709	0		=			
ANR	3073803	Identifier	arg		3073709	0					
ANR	3073804	ArrayIndexing	argv [ nargs ]		3073709	1					
ANR	3073805	Identifier	argv		3073709	0					
ANR	3073806	Identifier	nargs		3073709	1					
ANR	3073807	WhileStatement	while ( * str && * str != separator1 && * str != separator2 )		3073709	2					
ANR	3073808	Condition	* str && * str != separator1 && * str != separator2	10350:10:318139:318186	3073709	0	True				
ANR	3073809	AndExpression	* str && * str != separator1 && * str != separator2		3073709	0		&&			
ANR	3073810	UnaryOperationExpression	* str		3073709	0					
ANR	3073811	UnaryOperator	*		3073709	0					
ANR	3073812	Identifier	str		3073709	1					
ANR	3073813	AndExpression	* str != separator1 && * str != separator2		3073709	1		&&			
ANR	3073814	EqualityExpression	* str != separator1		3073709	0		!=			
ANR	3073815	UnaryOperationExpression	* str		3073709	0					
ANR	3073816	UnaryOperator	*		3073709	0					
ANR	3073817	Identifier	str		3073709	1					
ANR	3073818	Identifier	separator1		3073709	1					
ANR	3073819	EqualityExpression	* str != separator2		3073709	1		!=			
ANR	3073820	UnaryOperationExpression	* str		3073709	0					
ANR	3073821	UnaryOperator	*		3073709	0					
ANR	3073822	Identifier	str		3073709	1					
ANR	3073823	Identifier	separator2		3073709	1					
ANR	3073824	CompoundStatement		35:61:762:762	3073709	1					
ANR	3073825	ExpressionStatement	* arg ++ = * str ++	10351:4:318196:318211	3073709	0	True				
ANR	3073826	AssignmentExpression	* arg ++ = * str ++		3073709	0		=			
ANR	3073827	UnaryOperationExpression	* arg ++		3073709	0					
ANR	3073828	UnaryOperator	*		3073709	0					
ANR	3073829	PostIncDecOperationExpression	arg ++		3073709	1					
ANR	3073830	Identifier	arg		3073709	0					
ANR	3073831	IncDec	++		3073709	1					
ANR	3073832	UnaryOperationExpression	* str ++		3073709	1					
ANR	3073833	UnaryOperator	*		3073709	0					
ANR	3073834	PostIncDecOperationExpression	str ++		3073709	1					
ANR	3073835	Identifier	str		3073709	0					
ANR	3073836	IncDec	++		3073709	1					
ANR	3073837	ExpressionStatement	* arg = 0	10353:3:318221:318229	3073709	3	True				
ANR	3073838	AssignmentExpression	* arg = 0		3073709	0		=			
ANR	3073839	UnaryOperationExpression	* arg		3073709	0					
ANR	3073840	UnaryOperator	*		3073709	0					
ANR	3073841	Identifier	arg		3073709	1					
ANR	3073842	PrimaryExpression	0		3073709	1					
ANR	3073843	ExpressionStatement	nargs ++	10356:3:318273:318280	3073709	4	True				
ANR	3073844	PostIncDecOperationExpression	nargs ++		3073709	0					
ANR	3073845	Identifier	nargs		3073709	0					
ANR	3073846	IncDec	++		3073709	1					
ANR	3073847	ExpressionStatement	argv [ nargs ] = 0	10360:1:318291:318306	3073709	17	True				
ANR	3073848	AssignmentExpression	argv [ nargs ] = 0		3073709	0		=			
ANR	3073849	ArrayIndexing	argv [ nargs ]		3073709	0					
ANR	3073850	Identifier	argv		3073709	0					
ANR	3073851	Identifier	nargs		3073709	1					
ANR	3073852	PrimaryExpression	0		3073709	1					
ANR	3073853	ReturnStatement	return argv ;	10361:1:318309:318320	3073709	18	True				
ANR	3073854	Identifier	argv		3073709	0					
ANR	3073855	ReturnType	char * *		3073709	1					
ANR	3073856	Identifier	DaemonCore :: ParseArgsString		3073709	2					
ANR	3073857	ParameterList	const char * str		3073709	3					
ANR	3073858	Parameter	const char * str	10315:35:317410:317424	3073709	0	True				
ANR	3073859	ParameterType	const char *		3073709	0					
ANR	3073860	Identifier	str		3073709	1					
ANR	3073861	CFGEntryNode	ENTRY		3073709		True				
ANR	3073862	CFGExitNode	EXIT		3073709		True				
ANR	3073863	Symbol	maxlength		3073709						
ANR	3073864	Symbol	* str ++		3073709						
ANR	3073865	Symbol	* nargs		3073709						
ANR	3073866	Symbol	* argv		3073709						
ANR	3073867	Symbol	argv		3073709						
ANR	3073868	Symbol	str		3073709						
ANR	3073869	Symbol	nargs		3073709						
ANR	3073870	Symbol	strlen		3073709						
ANR	3073871	Symbol	* arg ++		3073709						
ANR	3073872	Symbol	arg		3073709						
ANR	3073873	Symbol	* str		3073709						
ANR	3073874	Symbol	separator2		3073709						
ANR	3073875	Symbol	separator1		3073709						
ANR	3073876	Symbol	* arg		3073709						
ANR	3073877	Function	BindAnyCommandPort	10365:0:318332:319157							
ANR	3073878	FunctionDef	"BindAnyCommandPort (ReliSock * rsock , SafeSock * ssock)"		3073877	0					
ANR	3073879	CompoundStatement		10367:0:318389:319157	3073877	0					
ANR	3073880	ForStatement	for ( int i = 0 ; i < 1000 ; i ++ )		3073877	0					
ANR	3073881	ForInit	int i = 0 ;	10368:5:318396:318405	3073877	0	True				
ANR	3073882	IdentifierDeclStatement	int i = 0 ;		3073877	0					
ANR	3073883	IdentifierDecl	i = 0		3073877	0					
ANR	3073884	IdentifierDeclType	int		3073877	0					
ANR	3073885	Identifier	i		3073877	1					
ANR	3073886	AssignmentExpression	i = 0		3073877	2		=			
ANR	3073887	Identifier	i		3073877	0					
ANR	3073888	PrimaryExpression	0		3073877	1					
ANR	3073889	Condition	i < 1000	10368:16:318407:318414	3073877	1	True				
ANR	3073890	RelationalExpression	i < 1000		3073877	0		<			
ANR	3073891	Identifier	i		3073877	0					
ANR	3073892	PrimaryExpression	1000		3073877	1					
ANR	3073893	PostIncDecOperationExpression	i ++	10368:26:318417:318419	3073877	2	True				
ANR	3073894	Identifier	i		3073877	0					
ANR	3073895	IncDec	++		3073877	1					
ANR	3073896	CompoundStatement		2:31:32:32	3073877	3					
ANR	3073897	IfStatement	if ( ! rsock -> bind ( FALSE ) )		3073877	0					
ANR	3073898	Condition	! rsock -> bind ( FALSE )	10370:7:318492:318510	3073877	0	True				
ANR	3073899	UnaryOperationExpression	! rsock -> bind ( FALSE )		3073877	0					
ANR	3073900	UnaryOperator	!		3073877	0					
ANR	3073901	CallExpression	rsock -> bind ( FALSE )		3073877	1					
ANR	3073902	Callee	rsock -> bind		3073877	0					
ANR	3073903	PtrMemberAccess	rsock -> bind		3073877	0					
ANR	3073904	Identifier	rsock		3073877	0					
ANR	3073905	Identifier	bind		3073877	1					
ANR	3073906	ArgumentList	FALSE		3073877	1					
ANR	3073907	Argument	FALSE		3073877	0					
ANR	3073908	Identifier	FALSE		3073877	0					
ANR	3073909	CompoundStatement		4:29:124:124	3073877	1					
ANR	3073910	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to bind to command ReliSock\\n"" )"	10371:3:318519:318576	3073877	0	True				
ANR	3073911	CallExpression	"dprintf ( D_ALWAYS , ""Failed to bind to command ReliSock\\n"" )"		3073877	0					
ANR	3073912	Callee	dprintf		3073877	0					
ANR	3073913	Identifier	dprintf		3073877	0					
ANR	3073914	ArgumentList	D_ALWAYS		3073877	1					
ANR	3073915	Argument	D_ALWAYS		3073877	0					
ANR	3073916	Identifier	D_ALWAYS		3073877	0					
ANR	3073917	Argument	"""Failed to bind to command ReliSock\\n"""		3073877	1					
ANR	3073918	PrimaryExpression	"""Failed to bind to command ReliSock\\n"""		3073877	0					
ANR	3073919	ExpressionStatement	"dprintf ( D_ALWAYS , ""(Make sure your IP address is correct in /etc/hosts.)\\n"" )"	10374:3:318596:318672	3073877	1	True				
ANR	3073920	CallExpression	"dprintf ( D_ALWAYS , ""(Make sure your IP address is correct in /etc/hosts.)\\n"" )"		3073877	0					
ANR	3073921	Callee	dprintf		3073877	0					
ANR	3073922	Identifier	dprintf		3073877	0					
ANR	3073923	ArgumentList	D_ALWAYS		3073877	1					
ANR	3073924	Argument	D_ALWAYS		3073877	0					
ANR	3073925	Identifier	D_ALWAYS		3073877	0					
ANR	3073926	Argument	"""(Make sure your IP address is correct in /etc/hosts.)\\n"""		3073877	1					
ANR	3073927	PrimaryExpression	"""(Make sure your IP address is correct in /etc/hosts.)\\n"""		3073877	0					
ANR	3073928	ExpressionStatement	"dprintf ( D_ALWAYS , ""(Your system network settings might be invalid.)\\n"" )"	10377:3:318697:318768	3073877	2	True				
ANR	3073929	CallExpression	"dprintf ( D_ALWAYS , ""(Your system network settings might be invalid.)\\n"" )"		3073877	0					
ANR	3073930	Callee	dprintf		3073877	0					
ANR	3073931	Identifier	dprintf		3073877	0					
ANR	3073932	ArgumentList	D_ALWAYS		3073877	1					
ANR	3073933	Argument	D_ALWAYS		3073877	0					
ANR	3073934	Identifier	D_ALWAYS		3073877	0					
ANR	3073935	Argument	"""(Your system network settings might be invalid.)\\n"""		3073877	1					
ANR	3073936	PrimaryExpression	"""(Your system network settings might be invalid.)\\n"""		3073877	0					
ANR	3073937	ReturnStatement	return FALSE ;	10380:3:318781:318793	3073877	3	True				
ANR	3073938	Identifier	FALSE		3073877	0					
ANR	3073939	IfStatement	"if ( ssock && ! ssock -> bind ( FALSE , rsock -> get_port ( ) ) )"		3073877	1					
ANR	3073940	Condition	"ssock && ! ssock -> bind ( FALSE , rsock -> get_port ( ) )"	10385:6:318978:319024	3073877	0	True				
ANR	3073941	AndExpression	"ssock && ! ssock -> bind ( FALSE , rsock -> get_port ( ) )"		3073877	0		&&			
ANR	3073942	Identifier	ssock		3073877	0					
ANR	3073943	UnaryOperationExpression	"! ssock -> bind ( FALSE , rsock -> get_port ( ) )"		3073877	1					
ANR	3073944	UnaryOperator	!		3073877	0					
ANR	3073945	CallExpression	"ssock -> bind ( FALSE , rsock -> get_port ( ) )"		3073877	1					
ANR	3073946	Callee	ssock -> bind		3073877	0					
ANR	3073947	PtrMemberAccess	ssock -> bind		3073877	0					
ANR	3073948	Identifier	ssock		3073877	0					
ANR	3073949	Identifier	bind		3073877	1					
ANR	3073950	ArgumentList	FALSE		3073877	1					
ANR	3073951	Argument	FALSE		3073877	0					
ANR	3073952	Identifier	FALSE		3073877	0					
ANR	3073953	Argument	rsock -> get_port ( )		3073877	1					
ANR	3073954	CallExpression	rsock -> get_port ( )		3073877	0					
ANR	3073955	Callee	rsock -> get_port		3073877	0					
ANR	3073956	PtrMemberAccess	rsock -> get_port		3073877	0					
ANR	3073957	Identifier	rsock		3073877	0					
ANR	3073958	Identifier	get_port		3073877	1					
ANR	3073959	ArgumentList			3073877	1					
ANR	3073960	CompoundStatement		19:55:637:637	3073877	1					
ANR	3073961	ExpressionStatement	rsock -> close ( )	10386:3:319032:319046	3073877	0	True				
ANR	3073962	CallExpression	rsock -> close ( )		3073877	0					
ANR	3073963	Callee	rsock -> close		3073877	0					
ANR	3073964	PtrMemberAccess	rsock -> close		3073877	0					
ANR	3073965	Identifier	rsock		3073877	0					
ANR	3073966	Identifier	close		3073877	1					
ANR	3073967	ArgumentList			3073877	1					
ANR	3073968	ContinueStatement	continue ;	10387:3:319051:319059	3073877	1	True				
ANR	3073969	ReturnStatement	return TRUE ;	10389:2:319067:319078	3073877	2	True				
ANR	3073970	Identifier	TRUE		3073877	0					
ANR	3073971	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error: BindAnyCommandPort failed!\\n"" )"	10391:1:319084:319140	3073877	1	True				
ANR	3073972	CallExpression	"dprintf ( D_ALWAYS , ""Error: BindAnyCommandPort failed!\\n"" )"		3073877	0					
ANR	3073973	Callee	dprintf		3073877	0					
ANR	3073974	Identifier	dprintf		3073877	0					
ANR	3073975	ArgumentList	D_ALWAYS		3073877	1					
ANR	3073976	Argument	D_ALWAYS		3073877	0					
ANR	3073977	Identifier	D_ALWAYS		3073877	0					
ANR	3073978	Argument	"""Error: BindAnyCommandPort failed!\\n"""		3073877	1					
ANR	3073979	PrimaryExpression	"""Error: BindAnyCommandPort failed!\\n"""		3073877	0					
ANR	3073980	ReturnStatement	return FALSE ;	10392:1:319143:319155	3073877	2	True				
ANR	3073981	Identifier	FALSE		3073877	0					
ANR	3073982	ReturnType	int		3073877	1					
ANR	3073983	Identifier	BindAnyCommandPort		3073877	2					
ANR	3073984	ParameterList	"ReliSock * rsock , SafeSock * ssock"		3073877	3					
ANR	3073985	Parameter	ReliSock * rsock	10366:19:318355:318369	3073877	0	True				
ANR	3073986	ParameterType	ReliSock *		3073877	0					
ANR	3073987	Identifier	rsock		3073877	1					
ANR	3073988	Parameter	SafeSock * ssock	10366:36:318372:318386	3073877	1	True				
ANR	3073989	ParameterType	SafeSock *		3073877	0					
ANR	3073990	Identifier	ssock		3073877	1					
ANR	3073991	CFGEntryNode	ENTRY		3073877		True				
ANR	3073992	CFGExitNode	EXIT		3073877		True				
ANR	3073993	Symbol	D_ALWAYS		3073877						
ANR	3073994	Symbol	i		3073877						
ANR	3073995	Symbol	rsock -> get_port		3073877						
ANR	3073996	Symbol	TRUE		3073877						
ANR	3073997	Symbol	rsock		3073877						
ANR	3073998	Symbol	FALSE		3073877						
ANR	3073999	Symbol	* ssock		3073877						
ANR	3074000	Symbol	ssock -> bind		3073877						
ANR	3074001	Symbol	ssock		3073877						
ANR	3074002	Symbol	* rsock		3073877						
ANR	3074003	Symbol	rsock -> bind		3073877						
ANR	3074004	Function	InitCommandSockets	10395:0:319160:322578							
ANR	3074005	FunctionDef	"InitCommandSockets (int port , ReliSock * rsock , SafeSock * ssock , bool fatal)"		3074004	0					
ANR	3074006	CompoundStatement		10397:0:319240:322578	3074004	0					
ANR	3074007	ExpressionStatement	ASSERT ( port != 0 )	10410:1:319838:319855	3074004	0	True				
ANR	3074008	CallExpression	ASSERT ( port != 0 )		3074004	0					
ANR	3074009	Callee	ASSERT		3074004	0					
ANR	3074010	Identifier	ASSERT		3074004	0					
ANR	3074011	ArgumentList	port != 0		3074004	1					
ANR	3074012	Argument	port != 0		3074004	0					
ANR	3074013	EqualityExpression	port != 0		3074004	0		!=			
ANR	3074014	Identifier	port		3074004	0					
ANR	3074015	PrimaryExpression	0		3074004	1					
ANR	3074016	IfStatement	if ( port <= 1 )		3074004	1					
ANR	3074017	Condition	port <= 1	10411:5:319862:319870	3074004	0	True				
ANR	3074018	RelationalExpression	port <= 1		3074004	0		<=			
ANR	3074019	Identifier	port		3074004	0					
ANR	3074020	PrimaryExpression	1		3074004	1					
ANR	3074021	CompoundStatement		15:16:632:632	3074004	1					
ANR	3074022	IfStatement	"if ( ! BindAnyCommandPort ( rsock , ssock ) )"		3074004	0					
ANR	3074023	Condition	"! BindAnyCommandPort ( rsock , ssock )"	10413:6:319922:319954	3074004	0	True				
ANR	3074024	UnaryOperationExpression	"! BindAnyCommandPort ( rsock , ssock )"		3074004	0					
ANR	3074025	UnaryOperator	!		3074004	0					
ANR	3074026	CallExpression	"BindAnyCommandPort ( rsock , ssock )"		3074004	1					
ANR	3074027	Callee	BindAnyCommandPort		3074004	0					
ANR	3074028	Identifier	BindAnyCommandPort		3074004	0					
ANR	3074029	ArgumentList	rsock		3074004	1					
ANR	3074030	Argument	rsock		3074004	0					
ANR	3074031	Identifier	rsock		3074004	0					
ANR	3074032	Argument	ssock		3074004	1					
ANR	3074033	Identifier	ssock		3074004	0					
ANR	3074034	CompoundStatement		17:42:717:717	3074004	1					
ANR	3074035	IfStatement	if ( fatal )		3074004	0					
ANR	3074036	Condition	fatal	10414:7:319967:319971	3074004	0	True				
ANR	3074037	Identifier	fatal		3074004	0					
ANR	3074038	CompoundStatement		18:14:733:733	3074004	1					
ANR	3074039	ExpressionStatement	"EXCEPT ( ""BindAnyCommandPort() failed"" )"	10415:4:319980:320017	3074004	0	True				
ANR	3074040	CallExpression	"EXCEPT ( ""BindAnyCommandPort() failed"" )"		3074004	0					
ANR	3074041	Callee	EXCEPT		3074004	0					
ANR	3074042	Identifier	EXCEPT		3074004	0					
ANR	3074043	ArgumentList	"""BindAnyCommandPort() failed"""		3074004	1					
ANR	3074044	Argument	"""BindAnyCommandPort() failed"""		3074004	0					
ANR	3074045	PrimaryExpression	"""BindAnyCommandPort() failed"""		3074004	0					
ANR	3074046	ElseStatement	else		3074004	0					
ANR	3074047	CompoundStatement		21:8:791:791	3074004	0					
ANR	3074048	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""BindAnyCommandPort() failed\\n"" )"	10418:4:320038:320100	3074004	0	True				
ANR	3074049	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""BindAnyCommandPort() failed\\n"" )"		3074004	0					
ANR	3074050	Callee	dprintf		3074004	0					
ANR	3074051	Identifier	dprintf		3074004	0					
ANR	3074052	ArgumentList	D_ALWAYS | D_FAILURE		3074004	1					
ANR	3074053	Argument	D_ALWAYS | D_FAILURE		3074004	0					
ANR	3074054	InclusiveOrExpression	D_ALWAYS | D_FAILURE		3074004	0		|			
ANR	3074055	Identifier	D_ALWAYS		3074004	0					
ANR	3074056	Identifier	D_FAILURE		3074004	1					
ANR	3074057	Argument	"""BindAnyCommandPort() failed\\n"""		3074004	1					
ANR	3074058	PrimaryExpression	"""BindAnyCommandPort() failed\\n"""		3074004	0					
ANR	3074059	ReturnStatement	return false ;	10419:4:320106:320118	3074004	1	True				
ANR	3074060	Identifier	false		3074004	0					
ANR	3074061	IfStatement	if ( ! rsock -> listen ( ) )		3074004	1					
ANR	3074062	Condition	! rsock -> listen ( )	10423:6:320136:320151	3074004	0	True				
ANR	3074063	UnaryOperationExpression	! rsock -> listen ( )		3074004	0					
ANR	3074064	UnaryOperator	!		3074004	0					
ANR	3074065	CallExpression	rsock -> listen ( )		3074004	1					
ANR	3074066	Callee	rsock -> listen		3074004	0					
ANR	3074067	PtrMemberAccess	rsock -> listen		3074004	0					
ANR	3074068	Identifier	rsock		3074004	0					
ANR	3074069	Identifier	listen		3074004	1					
ANR	3074070	ArgumentList			3074004	1					
ANR	3074071	CompoundStatement		27:25:914:914	3074004	1					
ANR	3074072	IfStatement	if ( fatal )		3074004	0					
ANR	3074073	Condition	fatal	10424:7:320164:320168	3074004	0	True				
ANR	3074074	Identifier	fatal		3074004	0					
ANR	3074075	CompoundStatement		28:14:930:930	3074004	1					
ANR	3074076	ExpressionStatement	"EXCEPT ( ""Failed to post listen on command ReliSock"" )"	10425:4:320177:320230	3074004	0	True				
ANR	3074077	CallExpression	"EXCEPT ( ""Failed to post listen on command ReliSock"" )"		3074004	0					
ANR	3074078	Callee	EXCEPT		3074004	0					
ANR	3074079	Identifier	EXCEPT		3074004	0					
ANR	3074080	ArgumentList	"""Failed to post listen on command ReliSock"""		3074004	1					
ANR	3074081	Argument	"""Failed to post listen on command ReliSock"""		3074004	0					
ANR	3074082	PrimaryExpression	"""Failed to post listen on command ReliSock"""		3074004	0					
ANR	3074083	ElseStatement	else		3074004	0					
ANR	3074084	CompoundStatement		31:8:1004:1004	3074004	0					
ANR	3074085	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to post listen on command ReliSock\\n"" )"	10428:4:320251:320333	3074004	0	True				
ANR	3074086	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to post listen on command ReliSock\\n"" )"		3074004	0					
ANR	3074087	Callee	dprintf		3074004	0					
ANR	3074088	Identifier	dprintf		3074004	0					
ANR	3074089	ArgumentList	D_ALWAYS | D_FAILURE		3074004	1					
ANR	3074090	Argument	D_ALWAYS | D_FAILURE		3074004	0					
ANR	3074091	InclusiveOrExpression	D_ALWAYS | D_FAILURE		3074004	0		|			
ANR	3074092	Identifier	D_ALWAYS		3074004	0					
ANR	3074093	Identifier	D_FAILURE		3074004	1					
ANR	3074094	Argument	"""Failed to post listen on command ReliSock\\n"""		3074004	1					
ANR	3074095	PrimaryExpression	"""Failed to post listen on command ReliSock\\n"""		3074004	0					
ANR	3074096	ReturnStatement	return false ;	10430:4:320339:320351	3074004	1	True				
ANR	3074097	Identifier	false		3074004	0					
ANR	3074098	ElseStatement	else		3074004	0					
ANR	3074099	CompoundStatement		41:2:1206:1234	3074004	0					
ANR	3074100	IdentifierDeclStatement	int on = 1 ;	10436:2:320433:320443	3074004	0	True				
ANR	3074101	IdentifierDecl	on = 1		3074004	0					
ANR	3074102	IdentifierDeclType	int		3074004	0					
ANR	3074103	Identifier	on		3074004	1					
ANR	3074104	AssignmentExpression	on = 1		3074004	2		=			
ANR	3074105	Identifier	on		3074004	0					
ANR	3074106	PrimaryExpression	1		3074004	1					
ANR	3074107	IdentifierDeclStatement	int so_option = SO_REUSEADDR ;	10437:2:320447:320475	3074004	1	True				
ANR	3074108	IdentifierDecl	so_option = SO_REUSEADDR		3074004	0					
ANR	3074109	IdentifierDeclType	int		3074004	0					
ANR	3074110	Identifier	so_option		3074004	1					
ANR	3074111	AssignmentExpression	so_option = SO_REUSEADDR		3074004	2		=			
ANR	3074112	Identifier	SO_REUSEADDR		3074004	0					
ANR	3074113	Identifier	SO_REUSEADDR		3074004	1					
ANR	3074114	ExpressionStatement	so_option = SO_EXCLUSIVEADDRUSE	10446:2:320776:320807	3074004	2	True				
ANR	3074115	AssignmentExpression	so_option = SO_EXCLUSIVEADDRUSE		3074004	0		=			
ANR	3074116	Identifier	so_option		3074004	0					
ANR	3074117	Identifier	SO_EXCLUSIVEADDRUSE		3074004	1					
ANR	3074118	IfStatement	"if ( ! rsock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) ) )"		3074004	3					
ANR	3074119	Condition	"! rsock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"	10453:6:321028:321102	3074004	0	True				
ANR	3074120	UnaryOperationExpression	"! rsock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		3074004	0					
ANR	3074121	UnaryOperator	!		3074004	0					
ANR	3074122	CallExpression	"rsock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		3074004	1					
ANR	3074123	Callee	rsock -> setsockopt		3074004	0					
ANR	3074124	PtrMemberAccess	rsock -> setsockopt		3074004	0					
ANR	3074125	Identifier	rsock		3074004	0					
ANR	3074126	Identifier	setsockopt		3074004	1					
ANR	3074127	ArgumentList	SOL_SOCKET		3074004	1					
ANR	3074128	Argument	SOL_SOCKET		3074004	0					
ANR	3074129	Identifier	SOL_SOCKET		3074004	0					
ANR	3074130	Argument	so_option		3074004	1					
ANR	3074131	Identifier	so_option		3074004	0					
ANR	3074132	Argument	( char * ) & on		3074004	2					
ANR	3074133	CastExpression	( char * ) & on		3074004	0					
ANR	3074134	CastTarget	char *		3074004	0					
ANR	3074135	UnaryOperationExpression	& on		3074004	1					
ANR	3074136	UnaryOperator	&		3074004	0					
ANR	3074137	Identifier	on		3074004	1					
ANR	3074138	Argument	sizeof ( on )		3074004	3					
ANR	3074139	SizeofExpression	sizeof ( on )		3074004	0					
ANR	3074140	Sizeof	sizeof		3074004	0					
ANR	3074141	SizeofOperand	on		3074004	1					
ANR	3074142	CompoundStatement		58:36:1865:1865	3074004	1					
ANR	3074143	IfStatement	if ( fatal )		3074004	0					
ANR	3074144	Condition	fatal	10455:7:321115:321119	3074004	0	True				
ANR	3074145	Identifier	fatal		3074004	0					
ANR	3074146	CompoundStatement		59:14:1881:1881	3074004	1					
ANR	3074147	ExpressionStatement	"EXCEPT ( ""setsockopt() SO_REUSEADDR failed on TCP command port"" )"	10456:4:321128:321190	3074004	0	True				
ANR	3074148	CallExpression	"EXCEPT ( ""setsockopt() SO_REUSEADDR failed on TCP command port"" )"		3074004	0					
ANR	3074149	Callee	EXCEPT		3074004	0					
ANR	3074150	Identifier	EXCEPT		3074004	0					
ANR	3074151	ArgumentList	"""setsockopt() SO_REUSEADDR failed on TCP command port"""		3074004	1					
ANR	3074152	Argument	"""setsockopt() SO_REUSEADDR failed on TCP command port"""		3074004	0					
ANR	3074153	PrimaryExpression	"""setsockopt() SO_REUSEADDR failed on TCP command port"""		3074004	0					
ANR	3074154	ElseStatement	else		3074004	0					
ANR	3074155	CompoundStatement		62:8:1964:1964	3074004	0					
ANR	3074156	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""setsockopt() SO_REUSEADDR failed on TCP command port\\n"" )"	10459:4:321211:321304	3074004	0	True				
ANR	3074157	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""setsockopt() SO_REUSEADDR failed on TCP command port\\n"" )"		3074004	0					
ANR	3074158	Callee	dprintf		3074004	0					
ANR	3074159	Identifier	dprintf		3074004	0					
ANR	3074160	ArgumentList	D_ALWAYS | D_FAILURE		3074004	1					
ANR	3074161	Argument	D_ALWAYS | D_FAILURE		3074004	0					
ANR	3074162	InclusiveOrExpression	D_ALWAYS | D_FAILURE		3074004	0		|			
ANR	3074163	Identifier	D_ALWAYS		3074004	0					
ANR	3074164	Identifier	D_FAILURE		3074004	1					
ANR	3074165	Argument	"""setsockopt() SO_REUSEADDR failed on TCP command port\\n"""		3074004	1					
ANR	3074166	PrimaryExpression	"""setsockopt() SO_REUSEADDR failed on TCP command port\\n"""		3074004	0					
ANR	3074167	ReturnStatement	return false ;	10461:4:321310:321322	3074004	1	True				
ANR	3074168	Identifier	false		3074004	0					
ANR	3074169	IfStatement	"if ( ssock && ! ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) ) )"		3074004	4					
ANR	3074170	Condition	"ssock && ! ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"	10464:6:321339:321425	3074004	0	True				
ANR	3074171	AndExpression	"ssock && ! ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		3074004	0		&&			
ANR	3074172	Identifier	ssock		3074004	0					
ANR	3074173	UnaryOperationExpression	"! ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		3074004	1					
ANR	3074174	UnaryOperator	!		3074004	0					
ANR	3074175	CallExpression	"ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		3074004	1					
ANR	3074176	Callee	ssock -> setsockopt		3074004	0					
ANR	3074177	PtrMemberAccess	ssock -> setsockopt		3074004	0					
ANR	3074178	Identifier	ssock		3074004	0					
ANR	3074179	Identifier	setsockopt		3074004	1					
ANR	3074180	ArgumentList	SOL_SOCKET		3074004	1					
ANR	3074181	Argument	SOL_SOCKET		3074004	0					
ANR	3074182	Identifier	SOL_SOCKET		3074004	0					
ANR	3074183	Argument	so_option		3074004	1					
ANR	3074184	Identifier	so_option		3074004	0					
ANR	3074185	Argument	( char * ) & on		3074004	2					
ANR	3074186	CastExpression	( char * ) & on		3074004	0					
ANR	3074187	CastTarget	char *		3074004	0					
ANR	3074188	UnaryOperationExpression	& on		3074004	1					
ANR	3074189	UnaryOperator	&		3074004	0					
ANR	3074190	Identifier	on		3074004	1					
ANR	3074191	Argument	sizeof ( on )		3074004	3					
ANR	3074192	SizeofExpression	sizeof ( on )		3074004	0					
ANR	3074193	Sizeof	sizeof		3074004	0					
ANR	3074194	SizeofOperand	on		3074004	1					
ANR	3074195	CompoundStatement		70:36:2188:2188	3074004	1					
ANR	3074196	IfStatement	if ( fatal )		3074004	0					
ANR	3074197	Condition	fatal	10467:7:321438:321442	3074004	0	True				
ANR	3074198	Identifier	fatal		3074004	0					
ANR	3074199	CompoundStatement		71:14:2204:2204	3074004	1					
ANR	3074200	ExpressionStatement	"EXCEPT ( ""setsockopt() SO_REUSEADDR failed on UDP command port"" )"	10468:4:321451:321513	3074004	0	True				
ANR	3074201	CallExpression	"EXCEPT ( ""setsockopt() SO_REUSEADDR failed on UDP command port"" )"		3074004	0					
ANR	3074202	Callee	EXCEPT		3074004	0					
ANR	3074203	Identifier	EXCEPT		3074004	0					
ANR	3074204	ArgumentList	"""setsockopt() SO_REUSEADDR failed on UDP command port"""		3074004	1					
ANR	3074205	Argument	"""setsockopt() SO_REUSEADDR failed on UDP command port"""		3074004	0					
ANR	3074206	PrimaryExpression	"""setsockopt() SO_REUSEADDR failed on UDP command port"""		3074004	0					
ANR	3074207	ElseStatement	else		3074004	0					
ANR	3074208	CompoundStatement		74:8:2287:2287	3074004	0					
ANR	3074209	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""setsockopt() SO_REUSEADDR failed on UDP command port\\n"" )"	10471:4:321534:321627	3074004	0	True				
ANR	3074210	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""setsockopt() SO_REUSEADDR failed on UDP command port\\n"" )"		3074004	0					
ANR	3074211	Callee	dprintf		3074004	0					
ANR	3074212	Identifier	dprintf		3074004	0					
ANR	3074213	ArgumentList	D_ALWAYS | D_FAILURE		3074004	1					
ANR	3074214	Argument	D_ALWAYS | D_FAILURE		3074004	0					
ANR	3074215	InclusiveOrExpression	D_ALWAYS | D_FAILURE		3074004	0		|			
ANR	3074216	Identifier	D_ALWAYS		3074004	0					
ANR	3074217	Identifier	D_FAILURE		3074004	1					
ANR	3074218	Argument	"""setsockopt() SO_REUSEADDR failed on UDP command port\\n"""		3074004	1					
ANR	3074219	PrimaryExpression	"""setsockopt() SO_REUSEADDR failed on UDP command port\\n"""		3074004	0					
ANR	3074220	ReturnStatement	return false ;	10473:4:321633:321645	3074004	1	True				
ANR	3074221	Identifier	false		3074004	0					
ANR	3074222	IfStatement	"if ( ! rsock -> setsockopt ( IPPROTO_TCP , TCP_NODELAY , ( char * ) & on , sizeof ( on ) ) )"		3074004	5					
ANR	3074223	Condition	"! rsock -> setsockopt ( IPPROTO_TCP , TCP_NODELAY , ( char * ) & on , sizeof ( on ) )"	10481:6:321835:321912	3074004	0	True				
ANR	3074224	UnaryOperationExpression	"! rsock -> setsockopt ( IPPROTO_TCP , TCP_NODELAY , ( char * ) & on , sizeof ( on ) )"		3074004	0					
ANR	3074225	UnaryOperator	!		3074004	0					
ANR	3074226	CallExpression	"rsock -> setsockopt ( IPPROTO_TCP , TCP_NODELAY , ( char * ) & on , sizeof ( on ) )"		3074004	1					
ANR	3074227	Callee	rsock -> setsockopt		3074004	0					
ANR	3074228	PtrMemberAccess	rsock -> setsockopt		3074004	0					
ANR	3074229	Identifier	rsock		3074004	0					
ANR	3074230	Identifier	setsockopt		3074004	1					
ANR	3074231	ArgumentList	IPPROTO_TCP		3074004	1					
ANR	3074232	Argument	IPPROTO_TCP		3074004	0					
ANR	3074233	Identifier	IPPROTO_TCP		3074004	0					
ANR	3074234	Argument	TCP_NODELAY		3074004	1					
ANR	3074235	Identifier	TCP_NODELAY		3074004	0					
ANR	3074236	Argument	( char * ) & on		3074004	2					
ANR	3074237	CastExpression	( char * ) & on		3074004	0					
ANR	3074238	CastTarget	char *		3074004	0					
ANR	3074239	UnaryOperationExpression	& on		3074004	1					
ANR	3074240	UnaryOperator	&		3074004	0					
ANR	3074241	Identifier	on		3074004	1					
ANR	3074242	Argument	sizeof ( on )		3074004	3					
ANR	3074243	SizeofExpression	sizeof ( on )		3074004	0					
ANR	3074244	Sizeof	sizeof		3074004	0					
ANR	3074245	SizeofOperand	on		3074004	1					
ANR	3074246	CompoundStatement		86:36:2675:2675	3074004	1					
ANR	3074247	ExpressionStatement	"dprintf ( D_ALWAYS , ""Warning: setsockopt() TCP_NODELAY failed\\n"" )"	10483:3:321921:321984	3074004	0	True				
ANR	3074248	CallExpression	"dprintf ( D_ALWAYS , ""Warning: setsockopt() TCP_NODELAY failed\\n"" )"		3074004	0					
ANR	3074249	Callee	dprintf		3074004	0					
ANR	3074250	Identifier	dprintf		3074004	0					
ANR	3074251	ArgumentList	D_ALWAYS		3074004	1					
ANR	3074252	Argument	D_ALWAYS		3074004	0					
ANR	3074253	Identifier	D_ALWAYS		3074004	0					
ANR	3074254	Argument	"""Warning: setsockopt() TCP_NODELAY failed\\n"""		3074004	1					
ANR	3074255	PrimaryExpression	"""Warning: setsockopt() TCP_NODELAY failed\\n"""		3074004	0					
ANR	3074256	IfStatement	if ( ! rsock -> listen ( port ) )		3074004	6					
ANR	3074257	Condition	! rsock -> listen ( port )	10486:6:321997:322016	3074004	0	True				
ANR	3074258	UnaryOperationExpression	! rsock -> listen ( port )		3074004	0					
ANR	3074259	UnaryOperator	!		3074004	0					
ANR	3074260	CallExpression	rsock -> listen ( port )		3074004	1					
ANR	3074261	Callee	rsock -> listen		3074004	0					
ANR	3074262	PtrMemberAccess	rsock -> listen		3074004	0					
ANR	3074263	Identifier	rsock		3074004	0					
ANR	3074264	Identifier	listen		3074004	1					
ANR	3074265	ArgumentList	port		3074004	1					
ANR	3074266	Argument	port		3074004	0					
ANR	3074267	Identifier	port		3074004	0					
ANR	3074268	CompoundStatement		90:28:2778:2778	3074004	1					
ANR	3074269	IfStatement	if ( fatal )		3074004	0					
ANR	3074270	Condition	fatal	10487:7:322028:322032	3074004	0	True				
ANR	3074271	Identifier	fatal		3074004	0					
ANR	3074272	CompoundStatement		91:14:2794:2794	3074004	1					
ANR	3074273	ExpressionStatement	"EXCEPT ( ""Failed to listen(%d) on TCP command socket."" , port )"	10488:4:322041:322100	3074004	0	True				
ANR	3074274	CallExpression	"EXCEPT ( ""Failed to listen(%d) on TCP command socket."" , port )"		3074004	0					
ANR	3074275	Callee	EXCEPT		3074004	0					
ANR	3074276	Identifier	EXCEPT		3074004	0					
ANR	3074277	ArgumentList	"""Failed to listen(%d) on TCP command socket."""		3074004	1					
ANR	3074278	Argument	"""Failed to listen(%d) on TCP command socket."""		3074004	0					
ANR	3074279	PrimaryExpression	"""Failed to listen(%d) on TCP command socket."""		3074004	0					
ANR	3074280	Argument	port		3074004	1					
ANR	3074281	Identifier	port		3074004	0					
ANR	3074282	ElseStatement	else		3074004	0					
ANR	3074283	CompoundStatement		94:8:2874:2874	3074004	0					
ANR	3074284	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to listen(%d) on TCP command socket.\\n"" , port )"	10491:4:322121:322211	3074004	0	True				
ANR	3074285	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to listen(%d) on TCP command socket.\\n"" , port )"		3074004	0					
ANR	3074286	Callee	dprintf		3074004	0					
ANR	3074287	Identifier	dprintf		3074004	0					
ANR	3074288	ArgumentList	D_ALWAYS | D_FAILURE		3074004	1					
ANR	3074289	Argument	D_ALWAYS | D_FAILURE		3074004	0					
ANR	3074290	InclusiveOrExpression	D_ALWAYS | D_FAILURE		3074004	0		|			
ANR	3074291	Identifier	D_ALWAYS		3074004	0					
ANR	3074292	Identifier	D_FAILURE		3074004	1					
ANR	3074293	Argument	"""Failed to listen(%d) on TCP command socket.\\n"""		3074004	1					
ANR	3074294	PrimaryExpression	"""Failed to listen(%d) on TCP command socket.\\n"""		3074004	0					
ANR	3074295	Argument	port		3074004	2					
ANR	3074296	Identifier	port		3074004	0					
ANR	3074297	ReturnStatement	return false ;	10493:4:322217:322229	3074004	1	True				
ANR	3074298	Identifier	false		3074004	0					
ANR	3074299	IfStatement	"if ( ssock && ! ssock -> bind ( FALSE , port ) )"		3074004	7					
ANR	3074300	Condition	"ssock && ! ssock -> bind ( FALSE , port )"	10497:6:322308:322341	3074004	0	True				
ANR	3074301	AndExpression	"ssock && ! ssock -> bind ( FALSE , port )"		3074004	0		&&			
ANR	3074302	Identifier	ssock		3074004	0					
ANR	3074303	UnaryOperationExpression	"! ssock -> bind ( FALSE , port )"		3074004	1					
ANR	3074304	UnaryOperator	!		3074004	0					
ANR	3074305	CallExpression	"ssock -> bind ( FALSE , port )"		3074004	1					
ANR	3074306	Callee	ssock -> bind		3074004	0					
ANR	3074307	PtrMemberAccess	ssock -> bind		3074004	0					
ANR	3074308	Identifier	ssock		3074004	0					
ANR	3074309	Identifier	bind		3074004	1					
ANR	3074310	ArgumentList	FALSE		3074004	1					
ANR	3074311	Argument	FALSE		3074004	0					
ANR	3074312	Identifier	FALSE		3074004	0					
ANR	3074313	Argument	port		3074004	1					
ANR	3074314	Identifier	port		3074004	0					
ANR	3074315	CompoundStatement		101:42:3103:3103	3074004	1					
ANR	3074316	IfStatement	if ( fatal )		3074004	0					
ANR	3074317	Condition	fatal	10498:7:322353:322357	3074004	0	True				
ANR	3074318	Identifier	fatal		3074004	0					
ANR	3074319	CompoundStatement		102:14:3119:3119	3074004	1					
ANR	3074320	ExpressionStatement	"EXCEPT ( ""Failed to bind(%d) on UDP command socket."" , port )"	10499:4:322366:322423	3074004	0	True				
ANR	3074321	CallExpression	"EXCEPT ( ""Failed to bind(%d) on UDP command socket."" , port )"		3074004	0					
ANR	3074322	Callee	EXCEPT		3074004	0					
ANR	3074323	Identifier	EXCEPT		3074004	0					
ANR	3074324	ArgumentList	"""Failed to bind(%d) on UDP command socket."""		3074004	1					
ANR	3074325	Argument	"""Failed to bind(%d) on UDP command socket."""		3074004	0					
ANR	3074326	PrimaryExpression	"""Failed to bind(%d) on UDP command socket."""		3074004	0					
ANR	3074327	Argument	port		3074004	1					
ANR	3074328	Identifier	port		3074004	0					
ANR	3074329	ElseStatement	else		3074004	0					
ANR	3074330	CompoundStatement		105:8:3197:3197	3074004	0					
ANR	3074331	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to bind(%d) on UDP command socket.\\n"" , port )"	10502:4:322444:322532	3074004	0	True				
ANR	3074332	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to bind(%d) on UDP command socket.\\n"" , port )"		3074004	0					
ANR	3074333	Callee	dprintf		3074004	0					
ANR	3074334	Identifier	dprintf		3074004	0					
ANR	3074335	ArgumentList	D_ALWAYS | D_FAILURE		3074004	1					
ANR	3074336	Argument	D_ALWAYS | D_FAILURE		3074004	0					
ANR	3074337	InclusiveOrExpression	D_ALWAYS | D_FAILURE		3074004	0		|			
ANR	3074338	Identifier	D_ALWAYS		3074004	0					
ANR	3074339	Identifier	D_FAILURE		3074004	1					
ANR	3074340	Argument	"""Failed to bind(%d) on UDP command socket.\\n"""		3074004	1					
ANR	3074341	PrimaryExpression	"""Failed to bind(%d) on UDP command socket.\\n"""		3074004	0					
ANR	3074342	Argument	port		3074004	2					
ANR	3074343	Identifier	port		3074004	0					
ANR	3074344	ReturnStatement	return false ;	10504:4:322538:322550	3074004	1	True				
ANR	3074345	Identifier	false		3074004	0					
ANR	3074346	ReturnStatement	return true ;	10508:1:322565:322576	3074004	2	True				
ANR	3074347	Identifier	true		3074004	0					
ANR	3074348	ReturnType	bool		3074004	1					
ANR	3074349	Identifier	InitCommandSockets		3074004	2					
ANR	3074350	ParameterList	"int port , ReliSock * rsock , SafeSock * ssock , bool fatal"		3074004	3					
ANR	3074351	Parameter	int port	10396:19:319184:319191	3074004	0	True				
ANR	3074352	ParameterType	int		3074004	0					
ANR	3074353	Identifier	port		3074004	1					
ANR	3074354	Parameter	ReliSock * rsock	10396:29:319194:319208	3074004	1	True				
ANR	3074355	ParameterType	ReliSock *		3074004	0					
ANR	3074356	Identifier	rsock		3074004	1					
ANR	3074357	Parameter	SafeSock * ssock	10396:46:319211:319225	3074004	2	True				
ANR	3074358	ParameterType	SafeSock *		3074004	0					
ANR	3074359	Identifier	ssock		3074004	1					
ANR	3074360	Parameter	bool fatal	10396:63:319228:319237	3074004	3	True				
ANR	3074361	ParameterType	bool		3074004	0					
ANR	3074362	Identifier	fatal		3074004	1					
ANR	3074363	CFGEntryNode	ENTRY		3074004		True				
ANR	3074364	CFGExitNode	EXIT		3074004		True				
ANR	3074365	Symbol	so_option		3074004						
ANR	3074366	Symbol	SO_EXCLUSIVEADDRUSE		3074004						
ANR	3074367	Symbol	ssock -> setsockopt		3074004						
ANR	3074368	Symbol	D_ALWAYS		3074004						
ANR	3074369	Symbol	false		3074004						
ANR	3074370	Symbol	& on		3074004						
ANR	3074371	Symbol	rsock		3074004						
ANR	3074372	Symbol	SO_REUSEADDR		3074004						
ANR	3074373	Symbol	* ssock		3074004						
ANR	3074374	Symbol	D_FAILURE		3074004						
ANR	3074375	Symbol	ssock -> bind		3074004						
ANR	3074376	Symbol	TCP_NODELAY		3074004						
ANR	3074377	Symbol	fatal		3074004						
ANR	3074378	Symbol	SOL_SOCKET		3074004						
ANR	3074379	Symbol	BindAnyCommandPort		3074004						
ANR	3074380	Symbol	rsock -> listen		3074004						
ANR	3074381	Symbol	port		3074004						
ANR	3074382	Symbol	IPPROTO_TCP		3074004						
ANR	3074383	Symbol	true		3074004						
ANR	3074384	Symbol	FALSE		3074004						
ANR	3074385	Symbol	ssock		3074004						
ANR	3074386	Symbol	* rsock		3074004						
ANR	3074387	Symbol	on		3074004						
ANR	3074388	Symbol	rsock -> setsockopt		3074004						
ANR	3074389	Function	DaemonCore :: ProcessExitedButNotReaped	10512:0:322582:322791							
ANR	3074390	FunctionDef	DaemonCore :: ProcessExitedButNotReaped (pid_t pid)		3074389	0					
ANR	3074391	CompoundStatement		10513:0:322636:322791	3074389	0					
ANR	3074392	IdentifierDeclStatement	WaitpidEntry wait_entry ;	10516:1:322654:322677	3074389	0	True				
ANR	3074393	IdentifierDecl	wait_entry		3074389	0					
ANR	3074394	IdentifierDeclType	WaitpidEntry		3074389	0					
ANR	3074395	Identifier	wait_entry		3074389	1					
ANR	3074396	ExpressionStatement	wait_entry . child_pid = pid	10517:1:322680:322706	3074389	1	True				
ANR	3074397	AssignmentExpression	wait_entry . child_pid = pid		3074389	0		=			
ANR	3074398	MemberAccess	wait_entry . child_pid		3074389	0					
ANR	3074399	Identifier	wait_entry		3074389	0					
ANR	3074400	Identifier	child_pid		3074389	1					
ANR	3074401	Identifier	pid		3074389	1					
ANR	3074402	IfStatement	if ( WaitpidQueue . IsMember ( wait_entry ) )		3074389	2					
ANR	3074403	Condition	WaitpidQueue . IsMember ( wait_entry )	10519:4:322713:322745	3074389	0	True				
ANR	3074404	CallExpression	WaitpidQueue . IsMember ( wait_entry )		3074389	0					
ANR	3074405	Callee	WaitpidQueue . IsMember		3074389	0					
ANR	3074406	MemberAccess	WaitpidQueue . IsMember		3074389	0					
ANR	3074407	Identifier	WaitpidQueue		3074389	0					
ANR	3074408	Identifier	IsMember		3074389	1					
ANR	3074409	ArgumentList	wait_entry		3074389	1					
ANR	3074410	Argument	wait_entry		3074389	0					
ANR	3074411	Identifier	wait_entry		3074389	0					
ANR	3074412	CompoundStatement		7:39:111:111	3074389	1					
ANR	3074413	ReturnStatement	return true ;	10520:2:322752:322763	3074389	0	True				
ANR	3074414	Identifier	true		3074389	0					
ANR	3074415	ReturnStatement	return false ;	10524:1:322777:322789	3074389	3	True				
ANR	3074416	Identifier	false		3074389	0					
ANR	3074417	ReturnType	bool		3074389	1					
ANR	3074418	Identifier	DaemonCore :: ProcessExitedButNotReaped		3074389	2					
ANR	3074419	ParameterList	pid_t pid		3074389	3					
ANR	3074420	Parameter	pid_t pid	10512:43:322625:322633	3074389	0	True				
ANR	3074421	ParameterType	pid_t		3074389	0					
ANR	3074422	Identifier	pid		3074389	1					
ANR	3074423	CFGEntryNode	ENTRY		3074389		True				
ANR	3074424	CFGExitNode	EXIT		3074389		True				
ANR	3074425	Symbol	WaitpidQueue		3074389						
ANR	3074426	Symbol	WaitpidQueue . IsMember		3074389						
ANR	3074427	Symbol	wait_entry . child_pid		3074389						
ANR	3074428	Symbol	wait_entry		3074389						
ANR	3074429	Symbol	true		3074389						
ANR	3074430	Symbol	false		3074389						
ANR	3074431	Symbol	pid		3074389						
ANR	3074432	Function	DaemonCore :: Is_Pid_Alive	10534:0:323147:325334							
ANR	3074433	FunctionDef	DaemonCore :: Is_Pid_Alive (pid_t pid)		3074432	0					
ANR	3074434	CompoundStatement		10535:0:323187:325334	3074432	0					
ANR	3074435	IdentifierDeclStatement	int status = FALSE ;	10536:1:323190:323208	3074432	0	True				
ANR	3074436	IdentifierDecl	status = FALSE		3074432	0					
ANR	3074437	IdentifierDeclType	int		3074432	0					
ANR	3074438	Identifier	status		3074432	1					
ANR	3074439	AssignmentExpression	status = FALSE		3074432	2		=			
ANR	3074440	Identifier	FALSE		3074432	0					
ANR	3074441	Identifier	FALSE		3074432	1					
ANR	3074442	IfStatement	if ( ProcessExitedButNotReaped ( pid ) )		3074432	1					
ANR	3074443	Condition	ProcessExitedButNotReaped ( pid )	10544:5:323378:323407	3074432	0	True				
ANR	3074444	CallExpression	ProcessExitedButNotReaped ( pid )		3074432	0					
ANR	3074445	Callee	ProcessExitedButNotReaped		3074432	0					
ANR	3074446	Identifier	ProcessExitedButNotReaped		3074432	0					
ANR	3074447	ArgumentList	pid		3074432	1					
ANR	3074448	Argument	pid		3074432	0					
ANR	3074449	Identifier	pid		3074432	0					
ANR	3074450	CompoundStatement		10:38:223:223	3074432	1					
ANR	3074451	ExpressionStatement	status = TRUE	10545:2:323415:323428	3074432	0	True				
ANR	3074452	AssignmentExpression	status = TRUE		3074432	0		=			
ANR	3074453	Identifier	status		3074432	0					
ANR	3074454	Identifier	TRUE		3074432	1					
ANR	3074455	ReturnStatement	return status ;	10546:2:323432:323445	3074432	1	True				
ANR	3074456	Identifier	status		3074432	0					
ANR	3074457	ElseStatement	else		3074432	0					
ANR	3074458	CompoundStatement		24:8:661:661	3074432	0					
ANR	3074459	IfStatement	if ( errno == EPERM )		3074432	0					
ANR	3074460	Condition	errno == EPERM	10564:7:324095:324108	3074432	0	True				
ANR	3074461	EqualityExpression	errno == EPERM		3074432	0		==			
ANR	3074462	Identifier	errno		3074432	0					
ANR	3074463	Identifier	EPERM		3074432	1					
ANR	3074464	CompoundStatement		30:24:924:924	3074432	1					
ANR	3074465	Statement	dprintf	10565:3:324117:324123	3074432	0	True				
ANR	3074466	Statement	(	10565:10:324124:324124	3074432	1	True				
ANR	3074467	Statement	D_FULLDEBUG	10565:11:324125:324135	3074432	2	True				
ANR	3074468	Statement	","	10565:22:324136:324136	3074432	3	True				
ANR	3074469	Statement	"""DaemonCore::IsPidAlive(): kill returned """	10565:24:324138:324179	3074432	4	True				
ANR	3074470	Statement	"""EPERM, assuming pid %d is alive.\\n"""	10566:4:324185:324220	3074432	5	True				
ANR	3074471	Statement	","	10566:40:324221:324221	3074432	6	True				
ANR	3074472	Statement	pid	10566:42:324223:324225	3074432	7	True				
ANR	3074473	Statement	)	10566:45:324226:324226	3074432	8	True				
ANR	3074474	ExpressionStatement		10566:46:324227:324227	3074432	9	True				
ANR	3074475	ExpressionStatement	status = TRUE	10567:3:324232:324245	3074432	10	True				
ANR	3074476	AssignmentExpression	status = TRUE		3074432	0		=			
ANR	3074477	Identifier	status		3074432	0					
ANR	3074478	Identifier	TRUE		3074432	1					
ANR	3074479	ElseStatement	else		3074432	0					
ANR	3074480	CompoundStatement		34:9:1068:1068	3074432	0					
ANR	3074481	Statement	dprintf	10569:3:324261:324267	3074432	0	True				
ANR	3074482	Statement	(	10569:10:324268:324268	3074432	1	True				
ANR	3074483	Statement	D_FULLDEBUG	10569:11:324269:324279	3074432	2	True				
ANR	3074484	Statement	","	10569:22:324280:324280	3074432	3	True				
ANR	3074485	Statement	"""DaemonCore::IsPidAlive(): kill returned """	10569:24:324282:324323	3074432	4	True				
ANR	3074486	Statement	"""errno %d, assuming pid %d is dead.\\n"""	10570:4:324329:324366	3074432	5	True				
ANR	3074487	Statement	","	10570:42:324367:324367	3074432	6	True				
ANR	3074488	Statement	errno	10570:44:324369:324373	3074432	7	True				
ANR	3074489	Statement	","	10570:49:324374:324374	3074432	8	True				
ANR	3074490	Statement	pid	10570:51:324376:324378	3074432	9	True				
ANR	3074491	Statement	)	10570:54:324379:324379	3074432	10	True				
ANR	3074492	ExpressionStatement		10570:55:324380:324380	3074432	11	True				
ANR	3074493	ExpressionStatement	status = FALSE	10571:3:324385:324399	3074432	12	True				
ANR	3074494	AssignmentExpression	status = FALSE		3074432	0		=			
ANR	3074495	Identifier	status		3074432	0					
ANR	3074496	Identifier	FALSE		3074432	1					
ANR	3074497	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	10553:1:323747:323780	3074432	2	True				
ANR	3074498	IdentifierDecl	priv = set_root_priv ( )		3074432	0					
ANR	3074499	IdentifierDeclType	priv_state		3074432	0					
ANR	3074500	Identifier	priv		3074432	1					
ANR	3074501	AssignmentExpression	priv = set_root_priv ( )		3074432	2		=			
ANR	3074502	Identifier	priv		3074432	0					
ANR	3074503	CallExpression	set_root_priv ( )		3074432	1					
ANR	3074504	Callee	set_root_priv		3074432	0					
ANR	3074505	Identifier	set_root_priv		3074432	0					
ANR	3074506	ArgumentList			3074432	1					
ANR	3074507	ExpressionStatement	errno = 0	10555:1:323784:323793	3074432	3	True				
ANR	3074508	AssignmentExpression	errno = 0		3074432	0		=			
ANR	3074509	Identifier	errno		3074432	0					
ANR	3074510	PrimaryExpression	0		3074432	1					
ANR	3074511	Statement	if	10556:1:323796:323797	3074432	4	True				
ANR	3074512	Statement	(	10556:4:323799:323799	3074432	5	True				
ANR	3074513	Statement	::	10556:6:323801:323802	3074432	6	True				
ANR	3074514	Statement	kill	10556:8:323803:323806	3074432	7	True				
ANR	3074515	Statement	(	10556:12:323807:323807	3074432	8	True				
ANR	3074516	Statement	pid	10556:13:323808:323810	3074432	9	True				
ANR	3074517	Statement	","	10556:16:323811:323811	3074432	10	True				
ANR	3074518	Statement	0	10556:17:323812:323812	3074432	11	True				
ANR	3074519	Statement	)	10556:18:323813:323813	3074432	12	True				
ANR	3074520	Statement	==	10556:20:323815:323816	3074432	13	True				
ANR	3074521	Statement	0	10556:23:323818:323818	3074432	14	True				
ANR	3074522	Statement	)	10556:25:323820:323820	3074432	15	True				
ANR	3074523	CompoundStatement		22:27:634:634	3074432	16					
ANR	3074524	ExpressionStatement	status = TRUE	10557:2:323826:323839	3074432	0	True				
ANR	3074525	AssignmentExpression	status = TRUE		3074432	0		=			
ANR	3074526	Identifier	status		3074432	0					
ANR	3074527	Identifier	TRUE		3074432	1					
ANR	3074528	ExpressionStatement	set_priv ( priv )	10574:1:324434:324448	3074432	17	True				
ANR	3074529	CallExpression	set_priv ( priv )		3074432	0					
ANR	3074530	Callee	set_priv		3074432	0					
ANR	3074531	Identifier	set_priv		3074432	0					
ANR	3074532	ArgumentList	priv		3074432	1					
ANR	3074533	Argument	priv		3074432	0					
ANR	3074534	Identifier	priv		3074432	0					
ANR	3074535	ReturnStatement	return status ;	10601:1:325319:325332	3074432	18	True				
ANR	3074536	Identifier	status		3074432	0					
ANR	3074537	ReturnType	int		3074432	1					
ANR	3074538	Identifier	DaemonCore :: Is_Pid_Alive		3074432	2					
ANR	3074539	ParameterList	pid_t pid		3074432	3					
ANR	3074540	Parameter	pid_t pid	10534:29:323176:323184	3074432	0	True				
ANR	3074541	ParameterType	pid_t		3074432	0					
ANR	3074542	Identifier	pid		3074432	1					
ANR	3074543	CFGEntryNode	ENTRY		3074432		True				
ANR	3074544	CFGExitNode	EXIT		3074432		True				
ANR	3074545	Symbol	errno		3074432						
ANR	3074546	Symbol	ProcessExitedButNotReaped		3074432						
ANR	3074547	Symbol	EPERM		3074432						
ANR	3074548	Symbol	TRUE		3074432						
ANR	3074549	Symbol	pid		3074432						
ANR	3074550	Symbol	FALSE		3074432						
ANR	3074551	Symbol	set_root_priv		3074432						
ANR	3074552	Symbol	priv		3074432						
ANR	3074553	Symbol	status		3074432						
ANR	3074554	Function	DaemonCore :: Register_Priv_State	10605:0:325338:325491							
ANR	3074555	FunctionDef	DaemonCore :: Register_Priv_State (priv_state priv)		3074554	0					
ANR	3074556	CompoundStatement		10607:0:325400:325491	3074554	0					
ANR	3074557	IdentifierDeclStatement	priv_state old_priv = Default_Priv_State ;	10608:1:325403:325443	3074554	0	True				
ANR	3074558	IdentifierDecl	old_priv = Default_Priv_State		3074554	0					
ANR	3074559	IdentifierDeclType	priv_state		3074554	0					
ANR	3074560	Identifier	old_priv		3074554	1					
ANR	3074561	AssignmentExpression	old_priv = Default_Priv_State		3074554	2		=			
ANR	3074562	Identifier	Default_Priv_State		3074554	0					
ANR	3074563	Identifier	Default_Priv_State		3074554	1					
ANR	3074564	ExpressionStatement	Default_Priv_State = priv	10609:1:325446:325471	3074554	1	True				
ANR	3074565	AssignmentExpression	Default_Priv_State = priv		3074554	0		=			
ANR	3074566	Identifier	Default_Priv_State		3074554	0					
ANR	3074567	Identifier	priv		3074554	1					
ANR	3074568	ReturnStatement	return old_priv ;	10610:1:325474:325489	3074554	2	True				
ANR	3074569	Identifier	old_priv		3074554	0					
ANR	3074570	ReturnType	priv_state		3074554	1					
ANR	3074571	Identifier	DaemonCore :: Register_Priv_State		3074554	2					
ANR	3074572	ParameterList	priv_state priv		3074554	3					
ANR	3074573	Parameter	priv_state priv	10606:33:325382:325396	3074554	0	True				
ANR	3074574	ParameterType	priv_state		3074554	0					
ANR	3074575	Identifier	priv		3074554	1					
ANR	3074576	CFGEntryNode	ENTRY		3074554		True				
ANR	3074577	CFGExitNode	EXIT		3074554		True				
ANR	3074578	Symbol	old_priv		3074554						
ANR	3074579	Symbol	priv		3074554						
ANR	3074580	Symbol	Default_Priv_State		3074554						
ANR	3074581	Function	DaemonCore :: CheckConfigSecurity	10613:0:325494:326246							
ANR	3074582	FunctionDef	"DaemonCore :: CheckConfigSecurity (const char * config , Sock * sock)"		3074581	0					
ANR	3074583	CompoundStatement		10615:0:325565:326246	3074581	0					
ANR	3074584	IdentifierDeclStatement	"StringList all_attrs ( config , ""\\n"" ) ;"	10619:1:325695:325730	3074581	0	True				
ANR	3074585	IdentifierDecl	"all_attrs ( config , ""\\n"" )"		3074581	0					
ANR	3074586	IdentifierDeclType	StringList		3074581	0					
ANR	3074587	Identifier	all_attrs		3074581	1					
ANR	3074588	Expression	"config , ""\\n"""		3074581	2					
ANR	3074589	Identifier	config		3074581	0					
ANR	3074590	PrimaryExpression	"""\\n"""		3074581	1					
ANR	3074591	IdentifierDeclStatement	bool all_attrs_okay = true ;	10623:1:325861:325888	3074581	1	True				
ANR	3074592	IdentifierDecl	all_attrs_okay = true		3074581	0					
ANR	3074593	IdentifierDeclType	bool		3074581	0					
ANR	3074594	Identifier	all_attrs_okay		3074581	1					
ANR	3074595	AssignmentExpression	all_attrs_okay = true		3074581	2		=			
ANR	3074596	Identifier	true		3074581	0					
ANR	3074597	Identifier	true		3074581	1					
ANR	3074598	IdentifierDeclStatement	char * single_attr ;	10625:1:325892:325909	3074581	2	True				
ANR	3074599	IdentifierDecl	* single_attr		3074581	0					
ANR	3074600	IdentifierDeclType	char *		3074581	0					
ANR	3074601	Identifier	single_attr		3074581	1					
ANR	3074602	ExpressionStatement	all_attrs . rewind ( )	10626:1:325912:325930	3074581	3	True				
ANR	3074603	CallExpression	all_attrs . rewind ( )		3074581	0					
ANR	3074604	Callee	all_attrs . rewind		3074581	0					
ANR	3074605	MemberAccess	all_attrs . rewind		3074581	0					
ANR	3074606	Identifier	all_attrs		3074581	0					
ANR	3074607	Identifier	rewind		3074581	1					
ANR	3074608	ArgumentList			3074581	1					
ANR	3074609	WhileStatement	while ( all_attrs_okay && ( single_attr = all_attrs . next ( ) ) )		3074581	4					
ANR	3074610	Condition	all_attrs_okay && ( single_attr = all_attrs . next ( ) )	10630:8:326048:326097	3074581	0	True				
ANR	3074611	AndExpression	all_attrs_okay && ( single_attr = all_attrs . next ( ) )		3074581	0		&&			
ANR	3074612	Identifier	all_attrs_okay		3074581	0					
ANR	3074613	AssignmentExpression	single_attr = all_attrs . next ( )		3074581	1		=			
ANR	3074614	Identifier	single_attr		3074581	0					
ANR	3074615	CallExpression	all_attrs . next ( )		3074581	1					
ANR	3074616	Callee	all_attrs . next		3074581	0					
ANR	3074617	MemberAccess	all_attrs . next		3074581	0					
ANR	3074618	Identifier	all_attrs		3074581	0					
ANR	3074619	Identifier	next		3074581	1					
ANR	3074620	ArgumentList			3074581	1					
ANR	3074621	CompoundStatement		16:60:534:534	3074581	1					
ANR	3074622	IfStatement	"if ( ! CheckConfigAttrSecurity ( single_attr , sock ) )"		3074581	0					
ANR	3074623	Condition	"! CheckConfigAttrSecurity ( single_attr , sock )"	10632:6:326140:326182	3074581	0	True				
ANR	3074624	UnaryOperationExpression	"! CheckConfigAttrSecurity ( single_attr , sock )"		3074581	0					
ANR	3074625	UnaryOperator	!		3074581	0					
ANR	3074626	CallExpression	"CheckConfigAttrSecurity ( single_attr , sock )"		3074581	1					
ANR	3074627	Callee	CheckConfigAttrSecurity		3074581	0					
ANR	3074628	Identifier	CheckConfigAttrSecurity		3074581	0					
ANR	3074629	ArgumentList	single_attr		3074581	1					
ANR	3074630	Argument	single_attr		3074581	0					
ANR	3074631	Identifier	single_attr		3074581	0					
ANR	3074632	Argument	sock		3074581	1					
ANR	3074633	Identifier	sock		3074581	0					
ANR	3074634	CompoundStatement		18:51:619:619	3074581	1					
ANR	3074635	ExpressionStatement	all_attrs_okay = false	10633:3:326190:326212	3074581	0	True				
ANR	3074636	AssignmentExpression	all_attrs_okay = false		3074581	0		=			
ANR	3074637	Identifier	all_attrs_okay		3074581	0					
ANR	3074638	Identifier	false		3074581	1					
ANR	3074639	ReturnStatement	return all_attrs_okay ;	10637:1:326223:326244	3074581	5	True				
ANR	3074640	Identifier	all_attrs_okay		3074581	0					
ANR	3074641	ReturnType	bool		3074581	1					
ANR	3074642	Identifier	DaemonCore :: CheckConfigSecurity		3074581	2					
ANR	3074643	ParameterList	"const char * config , Sock * sock"		3074581	3					
ANR	3074644	Parameter	const char * config	10614:33:325532:325549	3074581	0	True				
ANR	3074645	ParameterType	const char *		3074581	0					
ANR	3074646	Identifier	config		3074581	1					
ANR	3074647	Parameter	Sock * sock	10614:53:325552:325561	3074581	1	True				
ANR	3074648	ParameterType	Sock *		3074581	0					
ANR	3074649	Identifier	sock		3074581	1					
ANR	3074650	CFGEntryNode	ENTRY		3074581		True				
ANR	3074651	CFGExitNode	EXIT		3074581		True				
ANR	3074652	Symbol	sock		3074581						
ANR	3074653	Symbol	all_attrs		3074581						
ANR	3074654	Symbol	single_attr		3074581						
ANR	3074655	Symbol	CheckConfigAttrSecurity		3074581						
ANR	3074656	Symbol	true		3074581						
ANR	3074657	Symbol	false		3074581						
ANR	3074658	Symbol	all_attrs . next		3074581						
ANR	3074659	Symbol	config		3074581						
ANR	3074660	Symbol	all_attrs_okay		3074581						
ANR	3074661	Function	DaemonCore :: CheckConfigAttrSecurity	10642:0:326251:328379							
ANR	3074662	FunctionDef	"DaemonCore :: CheckConfigAttrSecurity (const char * name , Sock * sock)"		3074661	0					
ANR	3074663	CompoundStatement		10644:0:326324:328379	3074661	0					
ANR	3074664	IdentifierDeclStatement	const char * ip_str ;	10645:1:326327:326345	3074661	0	True				
ANR	3074665	IdentifierDecl	* ip_str		3074661	0					
ANR	3074666	IdentifierDeclType	const char *		3074661	0					
ANR	3074667	Identifier	ip_str		3074661	1					
ANR	3074668	IdentifierDeclStatement	int i ;	10646:1:326348:326353	3074661	1	True				
ANR	3074669	IdentifierDecl	i		3074661	0					
ANR	3074670	IdentifierDeclType	int		3074661	0					
ANR	3074671	Identifier	i		3074661	1					
ANR	3074672	ExpressionStatement	"dprintf ( D_ALWAYS , ""CheckConfigSecurity: name is: %s\\n"" , name )"	10649:2:326390:326453	3074661	2	True				
ANR	3074673	CallExpression	"dprintf ( D_ALWAYS , ""CheckConfigSecurity: name is: %s\\n"" , name )"		3074661	0					
ANR	3074674	Callee	dprintf		3074661	0					
ANR	3074675	Identifier	dprintf		3074661	0					
ANR	3074676	ArgumentList	D_ALWAYS		3074661	1					
ANR	3074677	Argument	D_ALWAYS		3074661	0					
ANR	3074678	Identifier	D_ALWAYS		3074661	0					
ANR	3074679	Argument	"""CheckConfigSecurity: name is: %s\\n"""		3074661	1					
ANR	3074680	PrimaryExpression	"""CheckConfigSecurity: name is: %s\\n"""		3074661	0					
ANR	3074681	Argument	name		3074661	2					
ANR	3074682	Identifier	name		3074661	0					
ANR	3074683	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		3074661	3					
ANR	3074684	ForInit	i = 0 ;	10658:6:326813:326816	3074661	0	True				
ANR	3074685	AssignmentExpression	i = 0		3074661	0		=			
ANR	3074686	Identifier	i		3074661	0					
ANR	3074687	PrimaryExpression	0		3074661	1					
ANR	3074688	Condition	i < LAST_PERM	10658:11:326818:326828	3074661	1	True				
ANR	3074689	RelationalExpression	i < LAST_PERM		3074661	0		<			
ANR	3074690	Identifier	i		3074661	0					
ANR	3074691	Identifier	LAST_PERM		3074661	1					
ANR	3074692	PostIncDecOperationExpression	i ++	10658:24:326831:326833	3074661	2	True				
ANR	3074693	Identifier	i		3074661	0					
ANR	3074694	IncDec	++		3074661	1					
ANR	3074695	CompoundStatement		32:2:918:939	3074661	3					
ANR	3074696	IfStatement	if ( i == ALLOW )		3074661	0					
ANR	3074697	Condition	i == ALLOW	10661:6:326906:326915	3074661	0	True				
ANR	3074698	EqualityExpression	i == ALLOW		3074661	0		==			
ANR	3074699	Identifier	i		3074661	0					
ANR	3074700	Identifier	ALLOW		3074661	1					
ANR	3074701	CompoundStatement		18:19:594:594	3074661	1					
ANR	3074702	ContinueStatement	continue ;	10662:3:326924:326932	3074661	0	True				
ANR	3074703	IfStatement	if ( ! SettableAttrsLists [ i ] )		3074661	1					
ANR	3074704	Condition	! SettableAttrsLists [ i ]	10665:6:326945:326967	3074661	0	True				
ANR	3074705	UnaryOperationExpression	! SettableAttrsLists [ i ]		3074661	0					
ANR	3074706	UnaryOperator	!		3074661	0					
ANR	3074707	ArrayIndexing	SettableAttrsLists [ i ]		3074661	1					
ANR	3074708	Identifier	SettableAttrsLists		3074661	0					
ANR	3074709	Identifier	i		3074661	1					
ANR	3074710	CompoundStatement		22:32:646:646	3074661	1					
ANR	3074711	ContinueStatement	continue ;	10667:3:327029:327037	3074661	0	True				
ANR	3074712	IdentifierDeclStatement	MyString command_desc ;	10675:2:327243:327264	3074661	2	True				
ANR	3074713	IdentifierDecl	command_desc		3074661	0					
ANR	3074714	IdentifierDeclType	MyString		3074661	0					
ANR	3074715	Identifier	command_desc		3074661	1					
ANR	3074716	ExpressionStatement	"command_desc . sprintf ( ""remote config %s"" , name )"	10676:2:327268:327313	3074661	3	True				
ANR	3074717	CallExpression	"command_desc . sprintf ( ""remote config %s"" , name )"		3074661	0					
ANR	3074718	Callee	command_desc . sprintf		3074661	0					
ANR	3074719	MemberAccess	command_desc . sprintf		3074661	0					
ANR	3074720	Identifier	command_desc		3074661	0					
ANR	3074721	Identifier	sprintf		3074661	1					
ANR	3074722	ArgumentList	"""remote config %s"""		3074661	1					
ANR	3074723	Argument	"""remote config %s"""		3074661	0					
ANR	3074724	PrimaryExpression	"""remote config %s"""		3074661	0					
ANR	3074725	Argument	name		3074661	1					
ANR	3074726	Identifier	name		3074661	0					
ANR	3074727	IfStatement	"if ( Verify ( command_desc . Value ( ) , ( DCpermission ) i , sock -> peer_addr ( ) , sock -> getFullyQualifiedUser ( ) ) )"		3074661	4					
ANR	3074728	Condition	"Verify ( command_desc . Value ( ) , ( DCpermission ) i , sock -> peer_addr ( ) , sock -> getFullyQualifiedUser ( ) )"	10678:6:327322:327415	3074661	0	True				
ANR	3074729	CallExpression	"Verify ( command_desc . Value ( ) , ( DCpermission ) i , sock -> peer_addr ( ) , sock -> getFullyQualifiedUser ( ) )"		3074661	0					
ANR	3074730	Callee	Verify		3074661	0					
ANR	3074731	Identifier	Verify		3074661	0					
ANR	3074732	ArgumentList	command_desc . Value ( )		3074661	1					
ANR	3074733	Argument	command_desc . Value ( )		3074661	0					
ANR	3074734	CallExpression	command_desc . Value ( )		3074661	0					
ANR	3074735	Callee	command_desc . Value		3074661	0					
ANR	3074736	MemberAccess	command_desc . Value		3074661	0					
ANR	3074737	Identifier	command_desc		3074661	0					
ANR	3074738	Identifier	Value		3074661	1					
ANR	3074739	ArgumentList			3074661	1					
ANR	3074740	Argument	( DCpermission ) i		3074661	1					
ANR	3074741	CastExpression	( DCpermission ) i		3074661	0					
ANR	3074742	CastTarget	DCpermission		3074661	0					
ANR	3074743	Identifier	i		3074661	1					
ANR	3074744	Argument	sock -> peer_addr ( )		3074661	2					
ANR	3074745	CallExpression	sock -> peer_addr ( )		3074661	0					
ANR	3074746	Callee	sock -> peer_addr		3074661	0					
ANR	3074747	PtrMemberAccess	sock -> peer_addr		3074661	0					
ANR	3074748	Identifier	sock		3074661	0					
ANR	3074749	Identifier	peer_addr		3074661	1					
ANR	3074750	ArgumentList			3074661	1					
ANR	3074751	Argument	sock -> getFullyQualifiedUser ( )		3074661	3					
ANR	3074752	CallExpression	sock -> getFullyQualifiedUser ( )		3074661	0					
ANR	3074753	Callee	sock -> getFullyQualifiedUser		3074661	0					
ANR	3074754	PtrMemberAccess	sock -> getFullyQualifiedUser		3074661	0					
ANR	3074755	Identifier	sock		3074661	0					
ANR	3074756	Identifier	getFullyQualifiedUser		3074661	1					
ANR	3074757	ArgumentList			3074661	1					
ANR	3074758	CompoundStatement		35:102:1093:1093	3074661	1					
ANR	3074759	IfStatement	if ( ( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard ( name ) )		3074661	0					
ANR	3074760	Condition	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard ( name )	10681:7:327520:327584	3074661	0	True				
ANR	3074761	CallExpression	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard ( name )		3074661	0					
ANR	3074762	Callee	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard		3074661	0					
ANR	3074763	PtrMemberAccess	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard		3074661	0					
ANR	3074764	ArrayIndexing	SettableAttrsLists [ i ]		3074661	0					
ANR	3074765	Identifier	SettableAttrsLists		3074661	0					
ANR	3074766	Identifier	i		3074661	1					
ANR	3074767	Identifier	contains_anycase_withwildcard		3074661	1					
ANR	3074768	ArgumentList	name		3074661	1					
ANR	3074769	Argument	name		3074661	0					
ANR	3074770	Identifier	name		3074661	0					
ANR	3074771	CompoundStatement		39:42:1263:1263	3074661	1					
ANR	3074772	Statement	dprintf	10686:4:327667:327673	3074661	0	True				
ANR	3074773	Statement	(	10686:11:327674:327674	3074661	1	True				
ANR	3074774	Statement	D_ALWAYS	10686:13:327676:327683	3074661	2	True				
ANR	3074775	Statement	","	10686:21:327684:327684	3074661	3	True				
ANR	3074776	Statement	"""CheckConfigSecurity: """	10686:23:327686:327708	3074661	4	True				
ANR	3074777	Statement	"""found %s at access level %s\\n"""	10687:7:327717:327747	3074661	5	True				
ANR	3074778	Statement	","	10687:38:327748:327748	3074661	6	True				
ANR	3074779	Statement	name	10687:40:327750:327753	3074661	7	True				
ANR	3074780	Statement	","	10687:44:327754:327754	3074661	8	True				
ANR	3074781	Statement	PermString	10688:7:327763:327772	3074661	9	True				
ANR	3074782	Statement	(	10688:17:327773:327773	3074661	10	True				
ANR	3074783	Statement	(	10688:18:327774:327774	3074661	11	True				
ANR	3074784	Statement	DCpermission	10688:19:327775:327786	3074661	12	True				
ANR	3074785	Statement	)	10688:31:327787:327787	3074661	13	True				
ANR	3074786	Statement	i	10688:32:327788:327788	3074661	14	True				
ANR	3074787	Statement	)	10688:33:327789:327789	3074661	15	True				
ANR	3074788	Statement	)	10688:35:327791:327791	3074661	16	True				
ANR	3074789	ExpressionStatement		10688:36:327792:327792	3074661	17	True				
ANR	3074790	ReturnStatement	return true ;	10691:4:327806:327817	3074661	18	True				
ANR	3074791	Identifier	true		3074661	0					
ANR	3074792	ExpressionStatement	ip_str = sock -> peer_ip_str ( )	10702:1:328129:328157	3074661	4	True				
ANR	3074793	AssignmentExpression	ip_str = sock -> peer_ip_str ( )		3074661	0		=			
ANR	3074794	Identifier	ip_str		3074661	0					
ANR	3074795	CallExpression	sock -> peer_ip_str ( )		3074661	1					
ANR	3074796	Callee	sock -> peer_ip_str		3074661	0					
ANR	3074797	PtrMemberAccess	sock -> peer_ip_str		3074661	0					
ANR	3074798	Identifier	sock		3074661	0					
ANR	3074799	Identifier	peer_ip_str		3074661	1					
ANR	3074800	ArgumentList			3074661	1					
ANR	3074801	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Someone at %s is trying to modify \\""%s\\""\\n"" , ip_str , name )"	10705:1:328181:328277	3074661	5	True				
ANR	3074802	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Someone at %s is trying to modify \\""%s\\""\\n"" , ip_str , name )"		3074661	0					
ANR	3074803	Callee	dprintf		3074661	0					
ANR	3074804	Identifier	dprintf		3074661	0					
ANR	3074805	ArgumentList	D_ALWAYS		3074661	1					
ANR	3074806	Argument	D_ALWAYS		3074661	0					
ANR	3074807	Identifier	D_ALWAYS		3074661	0					
ANR	3074808	Argument	"""WARNING: Someone at %s is trying to modify \\""%s\\""\\n"""		3074661	1					
ANR	3074809	PrimaryExpression	"""WARNING: Someone at %s is trying to modify \\""%s\\""\\n"""		3074661	0					
ANR	3074810	Argument	ip_str		3074661	2					
ANR	3074811	Identifier	ip_str		3074661	0					
ANR	3074812	Argument	name		3074661	3					
ANR	3074813	Identifier	name		3074661	0					
ANR	3074814	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Potential security problem, request refused\\n"" )"	10708:1:328280:328361	3074661	6	True				
ANR	3074815	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Potential security problem, request refused\\n"" )"		3074661	0					
ANR	3074816	Callee	dprintf		3074661	0					
ANR	3074817	Identifier	dprintf		3074661	0					
ANR	3074818	ArgumentList	D_ALWAYS		3074661	1					
ANR	3074819	Argument	D_ALWAYS		3074661	0					
ANR	3074820	Identifier	D_ALWAYS		3074661	0					
ANR	3074821	Argument	"""WARNING: Potential security problem, request refused\\n"""		3074661	1					
ANR	3074822	PrimaryExpression	"""WARNING: Potential security problem, request refused\\n"""		3074661	0					
ANR	3074823	ReturnStatement	return false ;	10711:1:328365:328377	3074661	7	True				
ANR	3074824	Identifier	false		3074661	0					
ANR	3074825	ReturnType	bool		3074661	1					
ANR	3074826	Identifier	DaemonCore :: CheckConfigAttrSecurity		3074661	2					
ANR	3074827	ParameterList	"const char * name , Sock * sock"		3074661	3					
ANR	3074828	Parameter	const char * name	10643:37:326293:326308	3074661	0	True				
ANR	3074829	ParameterType	const char *		3074661	0					
ANR	3074830	Identifier	name		3074661	1					
ANR	3074831	Parameter	Sock * sock	10643:55:326311:326320	3074661	1	True				
ANR	3074832	ParameterType	Sock *		3074661	0					
ANR	3074833	Identifier	sock		3074661	1					
ANR	3074834	CFGEntryNode	ENTRY		3074661		True				
ANR	3074835	CFGExitNode	EXIT		3074661		True				
ANR	3074836	Symbol	LAST_PERM		3074661						
ANR	3074837	Symbol	* * i		3074661						
ANR	3074838	Symbol	D_ALWAYS		3074661						
ANR	3074839	Symbol	false		3074661						
ANR	3074840	Symbol	i		3074661						
ANR	3074841	Symbol	sock -> peer_ip_str		3074661						
ANR	3074842	Symbol	sock -> peer_addr		3074661						
ANR	3074843	Symbol	sock -> getFullyQualifiedUser		3074661						
ANR	3074844	Symbol	sock		3074661						
ANR	3074845	Symbol	* i		3074661						
ANR	3074846	Symbol	* SettableAttrsLists		3074661						
ANR	3074847	Symbol	command_desc . Value		3074661						
ANR	3074848	Symbol	SettableAttrsLists		3074661						
ANR	3074849	Symbol	command_desc		3074661						
ANR	3074850	Symbol	name		3074661						
ANR	3074851	Symbol	true		3074661						
ANR	3074852	Symbol	* * SettableAttrsLists		3074661						
ANR	3074853	Symbol	Verify		3074661						
ANR	3074854	Symbol	ip_str		3074661						
ANR	3074855	Symbol	ALLOW		3074661						
ANR	3074856	Symbol	* sock		3074661						
ANR	3074857	Symbol	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard		3074661						
ANR	3074858	Function	DaemonCore :: InitSettableAttrsLists	10715:0:328383:329699							
ANR	3074859	FunctionDef	DaemonCore :: InitSettableAttrsLists ()		3074858	0					
ANR	3074860	CompoundStatement		10717:0:328431:329699	3074858	0					
ANR	3074861	IdentifierDeclStatement	int i ;	10718:1:328434:328439	3074858	0	True				
ANR	3074862	IdentifierDecl	i		3074858	0					
ANR	3074863	IdentifierDeclType	int		3074858	0					
ANR	3074864	Identifier	i		3074858	1					
ANR	3074865	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		3074858	1					
ANR	3074866	ForInit	i = 0 ;	10721:6:328508:328511	3074858	0	True				
ANR	3074867	AssignmentExpression	i = 0		3074858	0		=			
ANR	3074868	Identifier	i		3074858	0					
ANR	3074869	PrimaryExpression	0		3074858	1					
ANR	3074870	Condition	i < LAST_PERM	10721:11:328513:328523	3074858	1	True				
ANR	3074871	RelationalExpression	i < LAST_PERM		3074858	0		<			
ANR	3074872	Identifier	i		3074858	0					
ANR	3074873	Identifier	LAST_PERM		3074858	1					
ANR	3074874	PostIncDecOperationExpression	i ++	10721:24:328526:328528	3074858	2	True				
ANR	3074875	Identifier	i		3074858	0					
ANR	3074876	IncDec	++		3074858	1					
ANR	3074877	CompoundStatement		5:30:100:100	3074858	3					
ANR	3074878	IfStatement	if ( SettableAttrsLists [ i ] )		3074858	0					
ANR	3074879	Condition	SettableAttrsLists [ i ]	10722:6:328540:328560	3074858	0	True				
ANR	3074880	ArrayIndexing	SettableAttrsLists [ i ]		3074858	0					
ANR	3074881	Identifier	SettableAttrsLists		3074858	0					
ANR	3074882	Identifier	i		3074858	1					
ANR	3074883	CompoundStatement		6:30:132:132	3074858	1					
ANR	3074884	Statement	delete	10723:3:328569:328574	3074858	0	True				
ANR	3074885	ExpressionStatement	SettableAttrsLists [ i ]	10723:10:328576:328597	3074858	1	True				
ANR	3074886	ArrayIndexing	SettableAttrsLists [ i ]		3074858	0					
ANR	3074887	Identifier	SettableAttrsLists		3074858	0					
ANR	3074888	Identifier	i		3074858	1					
ANR	3074889	ExpressionStatement	SettableAttrsLists [ i ] = NULL	10724:3:328602:328630	3074858	2	True				
ANR	3074890	AssignmentExpression	SettableAttrsLists [ i ] = NULL		3074858	0		=			
ANR	3074891	ArrayIndexing	SettableAttrsLists [ i ]		3074858	0					
ANR	3074892	Identifier	SettableAttrsLists		3074858	0					
ANR	3074893	Identifier	i		3074858	1					
ANR	3074894	Identifier	NULL		3074858	1					
ANR	3074895	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		3074858	2					
ANR	3074896	ForInit	i = 0 ;	10732:6:328886:328889	3074858	0	True				
ANR	3074897	AssignmentExpression	i = 0		3074858	0		=			
ANR	3074898	Identifier	i		3074858	0					
ANR	3074899	PrimaryExpression	0		3074858	1					
ANR	3074900	Condition	i < LAST_PERM	10732:11:328891:328901	3074858	1	True				
ANR	3074901	RelationalExpression	i < LAST_PERM		3074858	0		<			
ANR	3074902	Identifier	i		3074858	0					
ANR	3074903	Identifier	LAST_PERM		3074858	1					
ANR	3074904	PostIncDecOperationExpression	i ++	10732:24:328904:328906	3074858	2	True				
ANR	3074905	Identifier	i		3074858	0					
ANR	3074906	IncDec	++		3074858	1					
ANR	3074907	CompoundStatement		16:30:478:478	3074858	3					
ANR	3074908	IfStatement	if ( i == ALLOW )		3074858	0					
ANR	3074909	Condition	i == ALLOW	10734:6:328978:328987	3074858	0	True				
ANR	3074910	EqualityExpression	i == ALLOW		3074858	0		==			
ANR	3074911	Identifier	i		3074858	0					
ANR	3074912	Identifier	ALLOW		3074858	1					
ANR	3074913	CompoundStatement		18:19:559:559	3074858	1					
ANR	3074914	ContinueStatement	continue ;	10735:3:328996:329004	3074858	0	True				
ANR	3074915	IfStatement	"if ( InitSettableAttrsList ( get_mySubSystem ( ) -> getName ( ) , i ) )"		3074858	1					
ANR	3074916	Condition	"InitSettableAttrsList ( get_mySubSystem ( ) -> getName ( ) , i )"	10737:6:329016:329069	3074858	0	True				
ANR	3074917	CallExpression	"InitSettableAttrsList ( get_mySubSystem ( ) -> getName ( ) , i )"		3074858	0					
ANR	3074918	Callee	InitSettableAttrsList		3074858	0					
ANR	3074919	Identifier	InitSettableAttrsList		3074858	0					
ANR	3074920	ArgumentList	get_mySubSystem ( ) -> getName ( )		3074858	1					
ANR	3074921	Argument	get_mySubSystem ( ) -> getName ( )		3074858	0					
ANR	3074922	CallExpression	get_mySubSystem ( ) -> getName ( )		3074858	0					
ANR	3074923	Callee	get_mySubSystem ( ) -> getName		3074858	0					
ANR	3074924	PtrMemberAccess	get_mySubSystem ( ) -> getName		3074858	0					
ANR	3074925	CallExpression	get_mySubSystem ( )		3074858	0					
ANR	3074926	Callee	get_mySubSystem		3074858	0					
ANR	3074927	Identifier	get_mySubSystem		3074858	0					
ANR	3074928	ArgumentList			3074858	1					
ANR	3074929	Identifier	getName		3074858	1					
ANR	3074930	ArgumentList			3074858	1					
ANR	3074931	Argument	i		3074858	1					
ANR	3074932	Identifier	i		3074858	0					
ANR	3074933	CompoundStatement		21:63:641:641	3074858	1					
ANR	3074934	ContinueStatement	continue ;	10739:3:329129:329137	3074858	0	True				
ANR	3074935	ExpressionStatement	"InitSettableAttrsList ( NULL , i )"	10744:2:329323:329355	3074858	2	True				
ANR	3074936	CallExpression	"InitSettableAttrsList ( NULL , i )"		3074858	0					
ANR	3074937	Callee	InitSettableAttrsList		3074858	0					
ANR	3074938	Identifier	InitSettableAttrsList		3074858	0					
ANR	3074939	ArgumentList	NULL		3074858	1					
ANR	3074940	Argument	NULL		3074858	0					
ANR	3074941	Identifier	NULL		3074858	0					
ANR	3074942	Argument	i		3074858	1					
ANR	3074943	Identifier	i		3074858	0					
ANR	3074944	IdentifierDeclStatement	char * tmp ;	10749:1:329440:329449	3074858	3	True				
ANR	3074945	IdentifierDecl	* tmp		3074858	0					
ANR	3074946	IdentifierDeclType	char *		3074858	0					
ANR	3074947	Identifier	tmp		3074858	1					
ANR	3074948	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		3074858	4					
ANR	3074949	ForInit	i = 0 ;	10750:6:329457:329460	3074858	0	True				
ANR	3074950	AssignmentExpression	i = 0		3074858	0		=			
ANR	3074951	Identifier	i		3074858	0					
ANR	3074952	PrimaryExpression	0		3074858	1					
ANR	3074953	Condition	i < LAST_PERM	10750:11:329462:329472	3074858	1	True				
ANR	3074954	RelationalExpression	i < LAST_PERM		3074858	0		<			
ANR	3074955	Identifier	i		3074858	0					
ANR	3074956	Identifier	LAST_PERM		3074858	1					
ANR	3074957	PostIncDecOperationExpression	i ++	10750:24:329475:329477	3074858	2	True				
ANR	3074958	Identifier	i		3074858	0					
ANR	3074959	IncDec	++		3074858	1					
ANR	3074960	CompoundStatement		34:30:1049:1049	3074858	3					
ANR	3074961	IfStatement	if ( SettableAttrsLists [ i ] )		3074858	0					
ANR	3074962	Condition	SettableAttrsLists [ i ]	10751:6:329489:329509	3074858	0	True				
ANR	3074963	ArrayIndexing	SettableAttrsLists [ i ]		3074858	0					
ANR	3074964	Identifier	SettableAttrsLists		3074858	0					
ANR	3074965	Identifier	i		3074858	1					
ANR	3074966	CompoundStatement		35:30:1081:1081	3074858	1					
ANR	3074967	ExpressionStatement	tmp = ( SettableAttrsLists [ i ] ) -> print_to_string ( )	10752:3:329518:329566	3074858	0	True				
ANR	3074968	AssignmentExpression	tmp = ( SettableAttrsLists [ i ] ) -> print_to_string ( )		3074858	0		=			
ANR	3074969	Identifier	tmp		3074858	0					
ANR	3074970	CallExpression	( SettableAttrsLists [ i ] ) -> print_to_string ( )		3074858	1					
ANR	3074971	Callee	( SettableAttrsLists [ i ] ) -> print_to_string		3074858	0					
ANR	3074972	PtrMemberAccess	( SettableAttrsLists [ i ] ) -> print_to_string		3074858	0					
ANR	3074973	ArrayIndexing	SettableAttrsLists [ i ]		3074858	0					
ANR	3074974	Identifier	SettableAttrsLists		3074858	0					
ANR	3074975	Identifier	i		3074858	1					
ANR	3074976	Identifier	print_to_string		3074858	1					
ANR	3074977	ArgumentList			3074858	1					
ANR	3074978	ExpressionStatement	"dprintf ( D_ALWAYS , ""SettableAttrList[%s]: %s\\n"" , PermString ( ( DCpermission ) i ) , tmp ? tmp : """" )"	10753:3:329571:329667	3074858	1	True				
ANR	3074979	CallExpression	"dprintf ( D_ALWAYS , ""SettableAttrList[%s]: %s\\n"" , PermString ( ( DCpermission ) i ) , tmp ? tmp : """" )"		3074858	0					
ANR	3074980	Callee	dprintf		3074858	0					
ANR	3074981	Identifier	dprintf		3074858	0					
ANR	3074982	ArgumentList	D_ALWAYS		3074858	1					
ANR	3074983	Argument	D_ALWAYS		3074858	0					
ANR	3074984	Identifier	D_ALWAYS		3074858	0					
ANR	3074985	Argument	"""SettableAttrList[%s]: %s\\n"""		3074858	1					
ANR	3074986	PrimaryExpression	"""SettableAttrList[%s]: %s\\n"""		3074858	0					
ANR	3074987	Argument	PermString ( ( DCpermission ) i )		3074858	2					
ANR	3074988	CallExpression	PermString ( ( DCpermission ) i )		3074858	0					
ANR	3074989	Callee	PermString		3074858	0					
ANR	3074990	Identifier	PermString		3074858	0					
ANR	3074991	ArgumentList	( DCpermission ) i		3074858	1					
ANR	3074992	Argument	( DCpermission ) i		3074858	0					
ANR	3074993	CastExpression	( DCpermission ) i		3074858	0					
ANR	3074994	CastTarget	DCpermission		3074858	0					
ANR	3074995	Identifier	i		3074858	1					
ANR	3074996	Argument	"tmp ? tmp : """""		3074858	3					
ANR	3074997	ConditionalExpression	"tmp ? tmp : """""		3074858	0					
ANR	3074998	Condition	tmp		3074858	0					
ANR	3074999	Identifier	tmp		3074858	0					
ANR	3075000	Identifier	tmp		3074858	1					
ANR	3075001	PrimaryExpression	""""""		3074858	2					
ANR	3075002	ExpressionStatement	free ( tmp )	10755:3:329672:329683	3074858	2	True				
ANR	3075003	CallExpression	free ( tmp )		3074858	0					
ANR	3075004	Callee	free		3074858	0					
ANR	3075005	Identifier	free		3074858	0					
ANR	3075006	ArgumentList	tmp		3074858	1					
ANR	3075007	Argument	tmp		3074858	0					
ANR	3075008	Identifier	tmp		3074858	0					
ANR	3075009	ReturnType	void		3074858	1					
ANR	3075010	Identifier	DaemonCore :: InitSettableAttrsLists		3074858	2					
ANR	3075011	ParameterList			3074858	3					
ANR	3075012	CFGEntryNode	ENTRY		3074858		True				
ANR	3075013	CFGExitNode	EXIT		3074858		True				
ANR	3075014	Symbol	LAST_PERM		3074858						
ANR	3075015	Symbol	* * i		3074858						
ANR	3075016	Symbol	NULL		3074858						
ANR	3075017	Symbol	get_mySubSystem ( ) -> getName		3074858						
ANR	3075018	Symbol	* get_mySubSystem		3074858						
ANR	3075019	Symbol	D_ALWAYS		3074858						
ANR	3075020	Symbol	i		3074858						
ANR	3075021	Symbol	InitSettableAttrsList		3074858						
ANR	3075022	Symbol	* i		3074858						
ANR	3075023	Symbol	* SettableAttrsLists		3074858						
ANR	3075024	Symbol	tmp		3074858						
ANR	3075025	Symbol	SettableAttrsLists		3074858						
ANR	3075026	Symbol	* * SettableAttrsLists		3074858						
ANR	3075027	Symbol	( SettableAttrsLists [ i ] ) -> print_to_string		3074858						
ANR	3075028	Symbol	PermString		3074858						
ANR	3075029	Symbol	get_mySubSystem		3074858						
ANR	3075030	Symbol	ALLOW		3074858						
ANR	3075031	DeclStmt									
ANR	3075032	Decl							MyString	MyString	param_name
ANR	3075033	DeclStmt									
ANR	3075034	Decl							char	char *	tmp
ANR	3075035	Function	DaemonCore :: getKeyCache	10787:0:330271:330341							
ANR	3075036	FunctionDef	DaemonCore :: getKeyCache ()		3075035	0					
ANR	3075037	CompoundStatement		10788:26:330307:330341	3075035	0					
ANR	3075038	ReturnStatement	return sec_man -> session_cache ;	10789:1:330310:330339	3075035	0	True				
ANR	3075039	PtrMemberAccess	sec_man -> session_cache		3075035	0					
ANR	3075040	Identifier	sec_man		3075035	0					
ANR	3075041	Identifier	session_cache		3075035	1					
ANR	3075042	ReturnType	KeyCache *		3075035	1					
ANR	3075043	Identifier	DaemonCore :: getKeyCache		3075035	2					
ANR	3075044	ParameterList			3075035	3					
ANR	3075045	CFGEntryNode	ENTRY		3075035		True				
ANR	3075046	CFGExitNode	EXIT		3075035		True				
ANR	3075047	Symbol	sec_man -> session_cache		3075035						
ANR	3075048	Symbol	* sec_man		3075035						
ANR	3075049	Symbol	sec_man		3075035						
ANR	3075050	Function	DaemonCore :: getSecMan	10792:0:330344:330400							
ANR	3075051	FunctionDef	DaemonCore :: getSecMan ()		3075050	0					
ANR	3075052	CompoundStatement		10793:0:330378:330400	3075050	0					
ANR	3075053	ReturnStatement	return sec_man ;	10794:4:330384:330398	3075050	0	True				
ANR	3075054	Identifier	sec_man		3075050	0					
ANR	3075055	ReturnType	SecMan *		3075050	1					
ANR	3075056	Identifier	DaemonCore :: getSecMan		3075050	2					
ANR	3075057	ParameterList			3075050	3					
ANR	3075058	CFGEntryNode	ENTRY		3075050		True				
ANR	3075059	CFGExitNode	EXIT		3075050		True				
ANR	3075060	Symbol	sec_man		3075050						
ANR	3075061	Function	DaemonCore :: clearSession	10797:0:330403:330984							
ANR	3075062	FunctionDef	DaemonCore :: clearSession (pid_t pid)		3075061	0					
ANR	3075063	CompoundStatement		10798:0:330446:330984	3075061	0					
ANR	3075064	IfStatement	if ( sec_man )		3075061	0					
ANR	3075065	Condition	sec_man	10802:4:330626:330632	3075061	0	True				
ANR	3075066	Identifier	sec_man		3075061	0					
ANR	3075067	CompoundStatement		5:13:188:188	3075061	1					
ANR	3075068	ExpressionStatement	"sec_man -> invalidateByParentAndPid ( sec_man -> my_unique_id ( ) , pid )"	10803:2:330639:330702	3075061	0	True				
ANR	3075069	CallExpression	"sec_man -> invalidateByParentAndPid ( sec_man -> my_unique_id ( ) , pid )"		3075061	0					
ANR	3075070	Callee	sec_man -> invalidateByParentAndPid		3075061	0					
ANR	3075071	PtrMemberAccess	sec_man -> invalidateByParentAndPid		3075061	0					
ANR	3075072	Identifier	sec_man		3075061	0					
ANR	3075073	Identifier	invalidateByParentAndPid		3075061	1					
ANR	3075074	ArgumentList	sec_man -> my_unique_id ( )		3075061	1					
ANR	3075075	Argument	sec_man -> my_unique_id ( )		3075061	0					
ANR	3075076	CallExpression	sec_man -> my_unique_id ( )		3075061	0					
ANR	3075077	Callee	sec_man -> my_unique_id		3075061	0					
ANR	3075078	PtrMemberAccess	sec_man -> my_unique_id		3075061	0					
ANR	3075079	Identifier	sec_man		3075061	0					
ANR	3075080	Identifier	my_unique_id		3075061	1					
ANR	3075081	ArgumentList			3075061	1					
ANR	3075082	Argument	pid		3075061	1					
ANR	3075083	Identifier	pid		3075061	0					
ANR	3075084	IdentifierDeclStatement	PidEntry * pidentry = NULL ;	10807:4:330784:330810	3075061	1	True				
ANR	3075085	IdentifierDecl	* pidentry = NULL		3075061	0					
ANR	3075086	IdentifierDeclType	PidEntry *		3075061	0					
ANR	3075087	Identifier	pidentry		3075061	1					
ANR	3075088	AssignmentExpression	* pidentry = NULL		3075061	2		=			
ANR	3075089	Identifier	NULL		3075061	0					
ANR	3075090	Identifier	NULL		3075061	1					
ANR	3075091	IfStatement	"if ( pidTable -> lookup ( pid , pidentry ) != - 1 )"		3075061	2					
ANR	3075092	Condition	"pidTable -> lookup ( pid , pidentry ) != - 1"	10809:9:330822:330857	3075061	0	True				
ANR	3075093	EqualityExpression	"pidTable -> lookup ( pid , pidentry ) != - 1"		3075061	0		!=			
ANR	3075094	CallExpression	"pidTable -> lookup ( pid , pidentry )"		3075061	0					
ANR	3075095	Callee	pidTable -> lookup		3075061	0					
ANR	3075096	PtrMemberAccess	pidTable -> lookup		3075061	0					
ANR	3075097	Identifier	pidTable		3075061	0					
ANR	3075098	Identifier	lookup		3075061	1					
ANR	3075099	ArgumentList	pid		3075061	1					
ANR	3075100	Argument	pid		3075061	0					
ANR	3075101	Identifier	pid		3075061	0					
ANR	3075102	Argument	pidentry		3075061	1					
ANR	3075103	Identifier	pidentry		3075061	0					
ANR	3075104	UnaryOperationExpression	- 1		3075061	1					
ANR	3075105	UnaryOperator	-		3075061	0					
ANR	3075106	PrimaryExpression	1		3075061	1					
ANR	3075107	CompoundStatement		12:48:414:414	3075061	1					
ANR	3075108	IfStatement	if ( sec_man && pidentry )		3075061	0					
ANR	3075109	Condition	sec_man && pidentry	10810:12:330875:330893	3075061	0	True				
ANR	3075110	AndExpression	sec_man && pidentry		3075061	0		&&			
ANR	3075111	Identifier	sec_man		3075061	0					
ANR	3075112	Identifier	pidentry		3075061	1					
ANR	3075113	CompoundStatement		13:33:449:449	3075061	1					
ANR	3075114	ExpressionStatement	sec_man -> invalidateHost ( pidentry -> sinful_string . Value ( ) )	10811:12:330910:330966	3075061	0	True				
ANR	3075115	CallExpression	sec_man -> invalidateHost ( pidentry -> sinful_string . Value ( ) )		3075061	0					
ANR	3075116	Callee	sec_man -> invalidateHost		3075061	0					
ANR	3075117	PtrMemberAccess	sec_man -> invalidateHost		3075061	0					
ANR	3075118	Identifier	sec_man		3075061	0					
ANR	3075119	Identifier	invalidateHost		3075061	1					
ANR	3075120	ArgumentList	pidentry -> sinful_string . Value ( )		3075061	1					
ANR	3075121	Argument	pidentry -> sinful_string . Value ( )		3075061	0					
ANR	3075122	CallExpression	pidentry -> sinful_string . Value ( )		3075061	0					
ANR	3075123	Callee	pidentry -> sinful_string . Value		3075061	0					
ANR	3075124	MemberAccess	pidentry -> sinful_string . Value		3075061	0					
ANR	3075125	PtrMemberAccess	pidentry -> sinful_string		3075061	0					
ANR	3075126	Identifier	pidentry		3075061	0					
ANR	3075127	Identifier	sinful_string		3075061	1					
ANR	3075128	Identifier	Value		3075061	1					
ANR	3075129	ArgumentList			3075061	1					
ANR	3075130	ReturnType	void		3075061	1					
ANR	3075131	Identifier	DaemonCore :: clearSession		3075061	2					
ANR	3075132	ParameterList	pid_t pid		3075061	3					
ANR	3075133	Parameter	pid_t pid	10797:32:330435:330443	3075061	0	True				
ANR	3075134	ParameterType	pid_t		3075061	0					
ANR	3075135	Identifier	pid		3075061	1					
ANR	3075136	CFGEntryNode	ENTRY		3075061		True				
ANR	3075137	CFGExitNode	EXIT		3075061		True				
ANR	3075138	Symbol	pidTable		3075061						
ANR	3075139	Symbol	* sec_man		3075061						
ANR	3075140	Symbol	NULL		3075061						
ANR	3075141	Symbol	pidTable -> lookup		3075061						
ANR	3075142	Symbol	pidentry -> sinful_string . Value		3075061						
ANR	3075143	Symbol	* pidTable		3075061						
ANR	3075144	Symbol	pidentry -> sinful_string		3075061						
ANR	3075145	Symbol	* pidentry		3075061						
ANR	3075146	Symbol	pid		3075061						
ANR	3075147	Symbol	sec_man		3075061						
ANR	3075148	Symbol	sec_man -> my_unique_id		3075061						
ANR	3075149	Symbol	pidentry		3075061						
ANR	3075150	Function	DaemonCore :: invalidateSessionCache	10816:0:330987:331158							
ANR	3075151	FunctionDef	DaemonCore :: invalidateSessionCache ()		3075150	0					
ANR	3075152	CompoundStatement		10817:0:331031:331158	3075150	0					
ANR	3075153	ReturnStatement	return ;	10819:1:331085:331091	3075150	0	True				
ANR	3075154	IfStatement	if ( sec_man )		3075150	1					
ANR	3075155	Condition	sec_man	10821:8:331102:331108	3075150	0	True				
ANR	3075156	Identifier	sec_man		3075150	0					
ANR	3075157	CompoundStatement		5:17:79:79	3075150	1					
ANR	3075158	ExpressionStatement	sec_man -> invalidateAllCache ( )	10822:8:331121:331150	3075150	0	True				
ANR	3075159	CallExpression	sec_man -> invalidateAllCache ( )		3075150	0					
ANR	3075160	Callee	sec_man -> invalidateAllCache		3075150	0					
ANR	3075161	PtrMemberAccess	sec_man -> invalidateAllCache		3075150	0					
ANR	3075162	Identifier	sec_man		3075150	0					
ANR	3075163	Identifier	invalidateAllCache		3075150	1					
ANR	3075164	ArgumentList			3075150	1					
ANR	3075165	ReturnType	void		3075150	1					
ANR	3075166	Identifier	DaemonCore :: invalidateSessionCache		3075150	2					
ANR	3075167	ParameterList			3075150	3					
ANR	3075168	CFGEntryNode	ENTRY		3075150		True				
ANR	3075169	CFGExitNode	EXIT		3075150		True				
ANR	3075170	Symbol	sec_man		3075150						
ANR	3075171	Function	DaemonCore :: set_cookie	10827:0:331162:331781							
ANR	3075172	FunctionDef	"DaemonCore :: set_cookie (int len , const unsigned char * data)"		3075171	0					
ANR	3075173	CompoundStatement		10827:68:331230:331781	3075171	0					
ANR	3075174	IfStatement	if ( _cookie_data )		3075171	0					
ANR	3075175	Condition	_cookie_data	10828:5:331237:331248	3075171	0	True				
ANR	3075176	Identifier	_cookie_data		3075171	0					
ANR	3075177	CompoundStatement		2:19:20:20	3075171	1					
ANR	3075178	IfStatement	if ( _cookie_data_old )		3075171	0					
ANR	3075179	Condition	_cookie_data_old	10832:7:331376:331391	3075171	0	True				
ANR	3075180	Identifier	_cookie_data_old		3075171	0					
ANR	3075181	CompoundStatement		6:26:164:164	3075171	1					
ANR	3075182	ExpressionStatement	free ( _cookie_data_old )	10833:3:331400:331422	3075171	0	True				
ANR	3075183	CallExpression	free ( _cookie_data_old )		3075171	0					
ANR	3075184	Callee	free		3075171	0					
ANR	3075185	Identifier	free		3075171	0					
ANR	3075186	ArgumentList	_cookie_data_old		3075171	1					
ANR	3075187	Argument	_cookie_data_old		3075171	0					
ANR	3075188	Identifier	_cookie_data_old		3075171	0					
ANR	3075189	ExpressionStatement	_cookie_data_old = _cookie_data	10835:2:331430:331461	3075171	1	True				
ANR	3075190	AssignmentExpression	_cookie_data_old = _cookie_data		3075171	0		=			
ANR	3075191	Identifier	_cookie_data_old		3075171	0					
ANR	3075192	Identifier	_cookie_data		3075171	1					
ANR	3075193	ExpressionStatement	_cookie_len_old = _cookie_len	10836:2:331465:331495	3075171	2	True				
ANR	3075194	AssignmentExpression	_cookie_len_old = _cookie_len		3075171	0		=			
ANR	3075195	Identifier	_cookie_len_old		3075171	0					
ANR	3075196	Identifier	_cookie_len		3075171	1					
ANR	3075197	ExpressionStatement	_cookie_data = NULL	10839:2:331539:331558	3075171	3	True				
ANR	3075198	AssignmentExpression	_cookie_data = NULL		3075171	0		=			
ANR	3075199	Identifier	_cookie_data		3075171	0					
ANR	3075200	Identifier	NULL		3075171	1					
ANR	3075201	ExpressionStatement	_cookie_len = 0	10840:2:331562:331578	3075171	4	True				
ANR	3075202	AssignmentExpression	_cookie_len = 0		3075171	0		=			
ANR	3075203	Identifier	_cookie_len		3075171	0					
ANR	3075204	PrimaryExpression	0		3075171	1					
ANR	3075205	IfStatement	if ( data )		3075171	1					
ANR	3075206	Condition	data	10843:5:331589:331592	3075171	0	True				
ANR	3075207	Identifier	data		3075171	0					
ANR	3075208	CompoundStatement		17:11:364:364	3075171	1					
ANR	3075209	ExpressionStatement	_cookie_data = ( unsigned char * ) malloc ( len )	10844:2:331599:331643	3075171	0	True				
ANR	3075210	AssignmentExpression	_cookie_data = ( unsigned char * ) malloc ( len )		3075171	0		=			
ANR	3075211	Identifier	_cookie_data		3075171	0					
ANR	3075212	CastExpression	( unsigned char * ) malloc ( len )		3075171	1					
ANR	3075213	CastTarget	unsigned char *		3075171	0					
ANR	3075214	CallExpression	malloc ( len )		3075171	1					
ANR	3075215	Callee	malloc		3075171	0					
ANR	3075216	Identifier	malloc		3075171	0					
ANR	3075217	ArgumentList	len		3075171	1					
ANR	3075218	Argument	len		3075171	0					
ANR	3075219	Identifier	len		3075171	0					
ANR	3075220	IfStatement	if ( ! _cookie_data )		3075171	1					
ANR	3075221	Condition	! _cookie_data	10845:6:331651:331663	3075171	0	True				
ANR	3075222	UnaryOperationExpression	! _cookie_data		3075171	0					
ANR	3075223	UnaryOperator	!		3075171	0					
ANR	3075224	Identifier	_cookie_data		3075171	1					
ANR	3075225	CompoundStatement		19:21:435:435	3075171	1					
ANR	3075226	ReturnStatement	return false ;	10847:3:331688:331700	3075171	0	True				
ANR	3075227	Identifier	false		3075171	0					
ANR	3075228	ExpressionStatement	_cookie_len = len	10849:2:331708:331725	3075171	2	True				
ANR	3075229	AssignmentExpression	_cookie_len = len		3075171	0		=			
ANR	3075230	Identifier	_cookie_len		3075171	0					
ANR	3075231	Identifier	len		3075171	1					
ANR	3075232	ExpressionStatement	"memcpy ( _cookie_data , data , len )"	10850:2:331729:331761	3075171	3	True				
ANR	3075233	CallExpression	"memcpy ( _cookie_data , data , len )"		3075171	0					
ANR	3075234	Callee	memcpy		3075171	0					
ANR	3075235	Identifier	memcpy		3075171	0					
ANR	3075236	ArgumentList	_cookie_data		3075171	1					
ANR	3075237	Argument	_cookie_data		3075171	0					
ANR	3075238	Identifier	_cookie_data		3075171	0					
ANR	3075239	Argument	data		3075171	1					
ANR	3075240	Identifier	data		3075171	0					
ANR	3075241	Argument	len		3075171	2					
ANR	3075242	Identifier	len		3075171	0					
ANR	3075243	ReturnStatement	return true ;	10853:1:331768:331779	3075171	2	True				
ANR	3075244	Identifier	true		3075171	0					
ANR	3075245	ReturnType	bool		3075171	1					
ANR	3075246	Identifier	DaemonCore :: set_cookie		3075171	2					
ANR	3075247	ParameterList	"int len , const unsigned char * data"		3075171	3					
ANR	3075248	Parameter	int len	10827:31:331193:331199	3075171	0	True				
ANR	3075249	ParameterType	int		3075171	0					
ANR	3075250	Identifier	len		3075171	1					
ANR	3075251	Parameter	const unsigned char * data	10827:40:331202:331226	3075171	1	True				
ANR	3075252	ParameterType	const unsigned char *		3075171	0					
ANR	3075253	Identifier	data		3075171	1					
ANR	3075254	CFGEntryNode	ENTRY		3075171		True				
ANR	3075255	CFGExitNode	EXIT		3075171		True				
ANR	3075256	Symbol	malloc		3075171						
ANR	3075257	Symbol	_cookie_len_old		3075171						
ANR	3075258	Symbol	NULL		3075171						
ANR	3075259	Symbol	len		3075171						
ANR	3075260	Symbol	data		3075171						
ANR	3075261	Symbol	_cookie_data		3075171						
ANR	3075262	Symbol	_cookie_data_old		3075171						
ANR	3075263	Symbol	false		3075171						
ANR	3075264	Symbol	true		3075171						
ANR	3075265	Symbol	_cookie_len		3075171						
ANR	3075266	Function	DaemonCore :: get_cookie	10856:0:331784:332065							
ANR	3075267	FunctionDef	"DaemonCore :: get_cookie (int & len , unsigned char * & data)"		3075266	0					
ANR	3075268	CompoundStatement		10856:64:331848:332065	3075266	0					
ANR	3075269	IfStatement	if ( data != NULL )		3075266	0					
ANR	3075270	Condition	data != NULL	10857:5:331855:331866	3075266	0	True				
ANR	3075271	EqualityExpression	data != NULL		3075266	0		!=			
ANR	3075272	Identifier	data		3075266	0					
ANR	3075273	Identifier	NULL		3075266	1					
ANR	3075274	CompoundStatement		2:19:20:20	3075266	1					
ANR	3075275	ReturnStatement	return false ;	10858:2:331873:331885	3075266	0	True				
ANR	3075276	Identifier	false		3075266	0					
ANR	3075277	ExpressionStatement	data = ( unsigned char * ) malloc ( _cookie_len )	10860:1:331891:331935	3075266	1	True				
ANR	3075278	AssignmentExpression	data = ( unsigned char * ) malloc ( _cookie_len )		3075266	0		=			
ANR	3075279	Identifier	data		3075266	0					
ANR	3075280	CastExpression	( unsigned char * ) malloc ( _cookie_len )		3075266	1					
ANR	3075281	CastTarget	unsigned char *		3075266	0					
ANR	3075282	CallExpression	malloc ( _cookie_len )		3075266	1					
ANR	3075283	Callee	malloc		3075266	0					
ANR	3075284	Identifier	malloc		3075266	0					
ANR	3075285	ArgumentList	_cookie_len		3075266	1					
ANR	3075286	Argument	_cookie_len		3075266	0					
ANR	3075287	Identifier	_cookie_len		3075266	0					
ANR	3075288	IfStatement	if ( ! data )		3075266	2					
ANR	3075289	Condition	! data	10861:5:331942:331946	3075266	0	True				
ANR	3075290	UnaryOperationExpression	! data		3075266	0					
ANR	3075291	UnaryOperator	!		3075266	0					
ANR	3075292	Identifier	data		3075266	1					
ANR	3075293	CompoundStatement		6:12:100:100	3075266	1					
ANR	3075294	ReturnStatement	return false ;	10863:2:331969:331981	3075266	0	True				
ANR	3075295	Identifier	false		3075266	0					
ANR	3075296	ExpressionStatement	len = _cookie_len	10866:1:331988:332005	3075266	3	True				
ANR	3075297	AssignmentExpression	len = _cookie_len		3075266	0		=			
ANR	3075298	Identifier	len		3075266	0					
ANR	3075299	Identifier	_cookie_len		3075266	1					
ANR	3075300	ExpressionStatement	"memcpy ( data , _cookie_data , _cookie_len )"	10867:1:332008:332048	3075266	4	True				
ANR	3075301	CallExpression	"memcpy ( data , _cookie_data , _cookie_len )"		3075266	0					
ANR	3075302	Callee	memcpy		3075266	0					
ANR	3075303	Identifier	memcpy		3075266	0					
ANR	3075304	ArgumentList	data		3075266	1					
ANR	3075305	Argument	data		3075266	0					
ANR	3075306	Identifier	data		3075266	0					
ANR	3075307	Argument	_cookie_data		3075266	1					
ANR	3075308	Identifier	_cookie_data		3075266	0					
ANR	3075309	Argument	_cookie_len		3075266	2					
ANR	3075310	Identifier	_cookie_len		3075266	0					
ANR	3075311	ReturnStatement	return true ;	10869:1:332052:332063	3075266	5	True				
ANR	3075312	Identifier	true		3075266	0					
ANR	3075313	ReturnType	bool		3075266	1					
ANR	3075314	Identifier	DaemonCore :: get_cookie		3075266	2					
ANR	3075315	ParameterList	"int & len , unsigned char * & data"		3075266	3					
ANR	3075316	Parameter	int & len	10856:31:331815:331822	3075266	0	True				
ANR	3075317	ParameterType	int &		3075266	0					
ANR	3075318	Identifier	len		3075266	1					
ANR	3075319	Parameter	unsigned char * & data	10856:41:331825:331844	3075266	1	True				
ANR	3075320	ParameterType	unsigned char * &		3075266	0					
ANR	3075321	Identifier	data		3075266	1					
ANR	3075322	CFGEntryNode	ENTRY		3075266		True				
ANR	3075323	CFGExitNode	EXIT		3075266		True				
ANR	3075324	Symbol	malloc		3075266						
ANR	3075325	Symbol	NULL		3075266						
ANR	3075326	Symbol	len		3075266						
ANR	3075327	Symbol	data		3075266						
ANR	3075328	Symbol	_cookie_data		3075266						
ANR	3075329	Symbol	false		3075266						
ANR	3075330	Symbol	true		3075266						
ANR	3075331	Symbol	_cookie_len		3075266						
ANR	3075332	Function	DaemonCore :: cookie_is_valid	10872:0:332068:332669							
ANR	3075333	FunctionDef	DaemonCore :: cookie_is_valid (const unsigned char * data)		3075332	0					
ANR	3075334	CompoundStatement		10872:64:332132:332669	3075332	0					
ANR	3075335	IfStatement	if ( data == NULL || _cookie_data == NULL )		3075332	0					
ANR	3075336	Condition	data == NULL || _cookie_data == NULL	10874:6:332141:332176	3075332	0	True				
ANR	3075337	OrExpression	data == NULL || _cookie_data == NULL		3075332	0		||			
ANR	3075338	EqualityExpression	data == NULL		3075332	0		==			
ANR	3075339	Identifier	data		3075332	0					
ANR	3075340	Identifier	NULL		3075332	1					
ANR	3075341	EqualityExpression	_cookie_data == NULL		3075332	1		==			
ANR	3075342	Identifier	_cookie_data		3075332	0					
ANR	3075343	Identifier	NULL		3075332	1					
ANR	3075344	CompoundStatement		3:45:47:47	3075332	1					
ANR	3075345	ReturnStatement	return false ;	10875:2:332184:332196	3075332	0	True				
ANR	3075346	Identifier	false		3075332	0					
ANR	3075347	IfStatement	"if ( strcmp ( ( const char * ) _cookie_data , ( const char * ) data ) == 0 )"		3075332	1					
ANR	3075348	Condition	"strcmp ( ( const char * ) _cookie_data , ( const char * ) data ) == 0"	10878:6:332208:332264	3075332	0	True				
ANR	3075349	EqualityExpression	"strcmp ( ( const char * ) _cookie_data , ( const char * ) data ) == 0"		3075332	0		==			
ANR	3075350	CallExpression	"strcmp ( ( const char * ) _cookie_data , ( const char * ) data )"		3075332	0					
ANR	3075351	Callee	strcmp		3075332	0					
ANR	3075352	Identifier	strcmp		3075332	0					
ANR	3075353	ArgumentList	( const char * ) _cookie_data		3075332	1					
ANR	3075354	Argument	( const char * ) _cookie_data		3075332	0					
ANR	3075355	CastExpression	( const char * ) _cookie_data		3075332	0					
ANR	3075356	CastTarget	const char *		3075332	0					
ANR	3075357	Identifier	_cookie_data		3075332	1					
ANR	3075358	Argument	( const char * ) data		3075332	1					
ANR	3075359	CastExpression	( const char * ) data		3075332	0					
ANR	3075360	CastTarget	const char *		3075332	0					
ANR	3075361	Identifier	data		3075332	1					
ANR	3075362	PrimaryExpression	0		3075332	1					
ANR	3075363	CompoundStatement		7:66:135:135	3075332	1					
ANR	3075364	ReturnStatement	return true ;	10880:2:332316:332327	3075332	0	True				
ANR	3075365	Identifier	true		3075332	0					
ANR	3075366	ElseStatement	else		3075332	0					
ANR	3075367	IfStatement	if ( _cookie_data_old != NULL )		3075332	0					
ANR	3075368	Condition	_cookie_data_old != NULL	10881:13:332342:332365	3075332	0	True				
ANR	3075369	EqualityExpression	_cookie_data_old != NULL		3075332	0		!=			
ANR	3075370	Identifier	_cookie_data_old		3075332	0					
ANR	3075371	Identifier	NULL		3075332	1					
ANR	3075372	CompoundStatement		10:40:236:236	3075332	1					
ANR	3075373	IfStatement	"if ( strcmp ( ( const char * ) _cookie_data_old , ( const char * ) data ) == 0 )"		3075332	0					
ANR	3075374	Condition	"strcmp ( ( const char * ) _cookie_data_old , ( const char * ) data ) == 0"	10887:7:332487:332547	3075332	0	True				
ANR	3075375	EqualityExpression	"strcmp ( ( const char * ) _cookie_data_old , ( const char * ) data ) == 0"		3075332	0		==			
ANR	3075376	CallExpression	"strcmp ( ( const char * ) _cookie_data_old , ( const char * ) data )"		3075332	0					
ANR	3075377	Callee	strcmp		3075332	0					
ANR	3075378	Identifier	strcmp		3075332	0					
ANR	3075379	ArgumentList	( const char * ) _cookie_data_old		3075332	1					
ANR	3075380	Argument	( const char * ) _cookie_data_old		3075332	0					
ANR	3075381	CastExpression	( const char * ) _cookie_data_old		3075332	0					
ANR	3075382	CastTarget	const char *		3075332	0					
ANR	3075383	Identifier	_cookie_data_old		3075332	1					
ANR	3075384	Argument	( const char * ) data		3075332	1					
ANR	3075385	CastExpression	( const char * ) data		3075332	0					
ANR	3075386	CastTarget	const char *		3075332	0					
ANR	3075387	Identifier	data		3075332	1					
ANR	3075388	PrimaryExpression	0		3075332	1					
ANR	3075389	CompoundStatement		16:71:418:418	3075332	1					
ANR	3075390	ReturnStatement	return true ;	10888:3:332556:332567	3075332	0	True				
ANR	3075391	Identifier	true		3075332	0					
ANR	3075392	ElseStatement	else		3075332	0					
ANR	3075393	CompoundStatement		18:9:445:445	3075332	0					
ANR	3075394	ReturnStatement	return false ;	10892:3:332609:332621	3075332	0	True				
ANR	3075395	Identifier	false		3075332	0					
ANR	3075396	ReturnStatement	return false ;	10895:1:332631:332643	3075332	2	True				
ANR	3075397	Identifier	false		3075332	0					
ANR	3075398	ReturnType	bool		3075332	1					
ANR	3075399	Identifier	DaemonCore :: cookie_is_valid		3075332	2					
ANR	3075400	ParameterList	const unsigned char * data		3075332	3					
ANR	3075401	Parameter	const unsigned char * data	10872:36:332104:332128	3075332	0	True				
ANR	3075402	ParameterType	const unsigned char *		3075332	0					
ANR	3075403	Identifier	data		3075332	1					
ANR	3075404	CFGEntryNode	ENTRY		3075332		True				
ANR	3075405	CFGExitNode	EXIT		3075332		True				
ANR	3075406	Symbol	strcmp		3075332						
ANR	3075407	Symbol	NULL		3075332						
ANR	3075408	Symbol	data		3075332						
ANR	3075409	Symbol	_cookie_data		3075332						
ANR	3075410	Symbol	_cookie_data_old		3075332						
ANR	3075411	Symbol	false		3075332						
ANR	3075412	Symbol	true		3075332						
ANR	3075413	Function	DaemonCore :: GetPeacefulShutdown	10898:0:332672:332740							
ANR	3075414	FunctionDef	DaemonCore :: GetPeacefulShutdown ()		3075413	0					
ANR	3075415	CompoundStatement		10899:34:332711:332740	3075413	0					
ANR	3075416	ReturnStatement	return peaceful_shutdown ;	10900:1:332714:332738	3075413	0	True				
ANR	3075417	Identifier	peaceful_shutdown		3075413	0					
ANR	3075418	ReturnType	bool		3075413	1					
ANR	3075419	Identifier	DaemonCore :: GetPeacefulShutdown		3075413	2					
ANR	3075420	ParameterList			3075413	3					
ANR	3075421	CFGEntryNode	ENTRY		3075413		True				
ANR	3075422	CFGExitNode	EXIT		3075413		True				
ANR	3075423	Symbol	peaceful_shutdown		3075413						
ANR	3075424	Function	DaemonCore :: SetPeacefulShutdown	10903:0:332743:332822							
ANR	3075425	FunctionDef	DaemonCore :: SetPeacefulShutdown (bool value)		3075424	0					
ANR	3075426	CompoundStatement		10904:44:332792:332822	3075424	0					
ANR	3075427	ExpressionStatement	peaceful_shutdown = value	10905:1:332795:332820	3075424	0	True				
ANR	3075428	AssignmentExpression	peaceful_shutdown = value		3075424	0		=			
ANR	3075429	Identifier	peaceful_shutdown		3075424	0					
ANR	3075430	Identifier	value		3075424	1					
ANR	3075431	ReturnType	void		3075424	1					
ANR	3075432	Identifier	DaemonCore :: SetPeacefulShutdown		3075424	2					
ANR	3075433	ParameterList	bool value		3075424	3					
ANR	3075434	Parameter	bool value	10904:32:332780:332789	3075424	0	True				
ANR	3075435	ParameterType	bool		3075424	0					
ANR	3075436	Identifier	value		3075424	1					
ANR	3075437	CFGEntryNode	ENTRY		3075424		True				
ANR	3075438	CFGExitNode	EXIT		3075424		True				
ANR	3075439	Symbol	peaceful_shutdown		3075424						
ANR	3075440	Symbol	value		3075424						
ANR	3075441	Function	DaemonCore :: RegisterTimeSkipCallback	10908:0:332825:333144							
ANR	3075442	FunctionDef	"DaemonCore :: RegisterTimeSkipCallback (TimeSkipFunc fnc , void * data)"		3075441	0					
ANR	3075443	CompoundStatement		10910:0:332899:333144	3075441	0					
ANR	3075444	Statement	TimeSkipWatcher	10911:1:332902:332916	3075441	0	True				
ANR	3075445	Statement	*	10911:17:332918:332918	3075441	1	True				
ANR	3075446	Statement	watcher	10911:19:332920:332926	3075441	2	True				
ANR	3075447	Statement	=	10911:27:332928:332928	3075441	3	True				
ANR	3075448	Statement	new	10911:29:332930:332932	3075441	4	True				
ANR	3075449	ExpressionStatement	TimeSkipWatcher	10911:33:332934:332949	3075441	5	True				
ANR	3075450	Identifier	TimeSkipWatcher		3075441	0					
ANR	3075451	ExpressionStatement	ASSERT ( fnc )	10912:1:332952:332963	3075441	6	True				
ANR	3075452	CallExpression	ASSERT ( fnc )		3075441	0					
ANR	3075453	Callee	ASSERT		3075441	0					
ANR	3075454	Identifier	ASSERT		3075441	0					
ANR	3075455	ArgumentList	fnc		3075441	1					
ANR	3075456	Argument	fnc		3075441	0					
ANR	3075457	Identifier	fnc		3075441	0					
ANR	3075458	ExpressionStatement	watcher -> fn = fnc	10913:1:332966:332983	3075441	7	True				
ANR	3075459	AssignmentExpression	watcher -> fn = fnc		3075441	0		=			
ANR	3075460	PtrMemberAccess	watcher -> fn		3075441	0					
ANR	3075461	Identifier	watcher		3075441	0					
ANR	3075462	Identifier	fn		3075441	1					
ANR	3075463	Identifier	fnc		3075441	1					
ANR	3075464	ExpressionStatement	watcher -> data = data	10914:1:332986:333006	3075441	8	True				
ANR	3075465	AssignmentExpression	watcher -> data = data		3075441	0		=			
ANR	3075466	PtrMemberAccess	watcher -> data		3075441	0					
ANR	3075467	Identifier	watcher		3075441	0					
ANR	3075468	Identifier	data		3075441	1					
ANR	3075469	Identifier	data		3075441	1					
ANR	3075470	IfStatement	if ( ! m_TimeSkipWatchers . Append ( watcher ) )		3075441	9					
ANR	3075471	Condition	! m_TimeSkipWatchers . Append ( watcher )	10915:5:333013:333048	3075441	0	True				
ANR	3075472	UnaryOperationExpression	! m_TimeSkipWatchers . Append ( watcher )		3075441	0					
ANR	3075473	UnaryOperator	!		3075441	0					
ANR	3075474	CallExpression	m_TimeSkipWatchers . Append ( watcher )		3075441	1					
ANR	3075475	Callee	m_TimeSkipWatchers . Append		3075441	0					
ANR	3075476	MemberAccess	m_TimeSkipWatchers . Append		3075441	0					
ANR	3075477	Identifier	m_TimeSkipWatchers		3075441	0					
ANR	3075478	Identifier	Append		3075441	1					
ANR	3075479	ArgumentList	watcher		3075441	1					
ANR	3075480	Argument	watcher		3075441	0					
ANR	3075481	Identifier	watcher		3075441	0					
ANR	3075482	CompoundStatement		6:43:151:151	3075441	1					
ANR	3075483	ExpressionStatement	"EXCEPT ( ""Unable to register time skip callback.  Possible out of memory condition."" )"	10916:2:333055:333138	3075441	0	True				
ANR	3075484	CallExpression	"EXCEPT ( ""Unable to register time skip callback.  Possible out of memory condition."" )"		3075441	0					
ANR	3075485	Callee	EXCEPT		3075441	0					
ANR	3075486	Identifier	EXCEPT		3075441	0					
ANR	3075487	ArgumentList	"""Unable to register time skip callback.  Possible out of memory condition."""		3075441	1					
ANR	3075488	Argument	"""Unable to register time skip callback.  Possible out of memory condition."""		3075441	0					
ANR	3075489	PrimaryExpression	"""Unable to register time skip callback.  Possible out of memory condition."""		3075441	0					
ANR	3075490	ReturnType	void		3075441	1					
ANR	3075491	Identifier	DaemonCore :: RegisterTimeSkipCallback		3075441	2					
ANR	3075492	ParameterList	"TimeSkipFunc fnc , void * data"		3075441	3					
ANR	3075493	Parameter	TimeSkipFunc fnc	10909:37:332868:332883	3075441	0	True				
ANR	3075494	ParameterType	TimeSkipFunc		3075441	0					
ANR	3075495	Identifier	fnc		3075441	1					
ANR	3075496	Parameter	void * data	10909:55:332886:332896	3075441	1	True				
ANR	3075497	ParameterType	void *		3075441	0					
ANR	3075498	Identifier	data		3075441	1					
ANR	3075499	CFGEntryNode	ENTRY		3075441		True				
ANR	3075500	CFGExitNode	EXIT		3075441		True				
ANR	3075501	Symbol	watcher		3075441						
ANR	3075502	Symbol	m_TimeSkipWatchers . Append		3075441						
ANR	3075503	Symbol	data		3075441						
ANR	3075504	Symbol	watcher -> data		3075441						
ANR	3075505	Symbol	watcher -> fn		3075441						
ANR	3075506	Symbol	fnc		3075441						
ANR	3075507	Symbol	* watcher		3075441						
ANR	3075508	Symbol	m_TimeSkipWatchers		3075441						
ANR	3075509	Function	DaemonCore :: UnregisterTimeSkipCallback	10920:0:333147:333515							
ANR	3075510	FunctionDef	"DaemonCore :: UnregisterTimeSkipCallback (TimeSkipFunc fnc , void * data)"		3075509	0					
ANR	3075511	CompoundStatement		10922:0:333223:333515	3075509	0					
ANR	3075512	ExpressionStatement	m_TimeSkipWatchers . Rewind ( )	10923:1:333226:333253	3075509	0	True				
ANR	3075513	CallExpression	m_TimeSkipWatchers . Rewind ( )		3075509	0					
ANR	3075514	Callee	m_TimeSkipWatchers . Rewind		3075509	0					
ANR	3075515	MemberAccess	m_TimeSkipWatchers . Rewind		3075509	0					
ANR	3075516	Identifier	m_TimeSkipWatchers		3075509	0					
ANR	3075517	Identifier	Rewind		3075509	1					
ANR	3075518	ArgumentList			3075509	1					
ANR	3075519	IdentifierDeclStatement	TimeSkipWatcher * p ;	10924:1:333256:333275	3075509	1	True				
ANR	3075520	IdentifierDecl	* p		3075509	0					
ANR	3075521	IdentifierDeclType	TimeSkipWatcher *		3075509	0					
ANR	3075522	Identifier	p		3075509	1					
ANR	3075523	WhileStatement	while ( ( p = m_TimeSkipWatchers . Next ( ) ) )		3075509	2					
ANR	3075524	Condition	p = m_TimeSkipWatchers . Next ( )	10925:8:333285:333315	3075509	0	True				
ANR	3075525	AssignmentExpression	p = m_TimeSkipWatchers . Next ( )		3075509	0		=			
ANR	3075526	Identifier	p		3075509	0					
ANR	3075527	CallExpression	m_TimeSkipWatchers . Next ( )		3075509	1					
ANR	3075528	Callee	m_TimeSkipWatchers . Next		3075509	0					
ANR	3075529	MemberAccess	m_TimeSkipWatchers . Next		3075509	0					
ANR	3075530	Identifier	m_TimeSkipWatchers		3075509	0					
ANR	3075531	Identifier	Next		3075509	1					
ANR	3075532	ArgumentList			3075509	1					
ANR	3075533	CompoundStatement		4:42:95:95	3075509	1					
ANR	3075534	IfStatement	if ( p -> fn == fnc && p -> data == data )		3075509	0					
ANR	3075535	Condition	p -> fn == fnc && p -> data == data	10926:5:333326:333356	3075509	0	True				
ANR	3075536	AndExpression	p -> fn == fnc && p -> data == data		3075509	0		&&			
ANR	3075537	EqualityExpression	p -> fn == fnc		3075509	0		==			
ANR	3075538	PtrMemberAccess	p -> fn		3075509	0					
ANR	3075539	Identifier	p		3075509	0					
ANR	3075540	Identifier	fn		3075509	1					
ANR	3075541	Identifier	fnc		3075509	1					
ANR	3075542	EqualityExpression	p -> data == data		3075509	1		==			
ANR	3075543	PtrMemberAccess	p -> data		3075509	0					
ANR	3075544	Identifier	p		3075509	0					
ANR	3075545	Identifier	data		3075509	1					
ANR	3075546	Identifier	data		3075509	1					
ANR	3075547	CompoundStatement		5:38:135:135	3075509	1					
ANR	3075548	ExpressionStatement	m_TimeSkipWatchers . DeleteCurrent ( )	10927:3:333364:333398	3075509	0	True				
ANR	3075549	CallExpression	m_TimeSkipWatchers . DeleteCurrent ( )		3075509	0					
ANR	3075550	Callee	m_TimeSkipWatchers . DeleteCurrent		3075509	0					
ANR	3075551	MemberAccess	m_TimeSkipWatchers . DeleteCurrent		3075509	0					
ANR	3075552	Identifier	m_TimeSkipWatchers		3075509	0					
ANR	3075553	Identifier	DeleteCurrent		3075509	1					
ANR	3075554	ArgumentList			3075509	1					
ANR	3075555	ReturnStatement	return ;	10928:3:333403:333409	3075509	1	True				
ANR	3075556	ExpressionStatement	"EXCEPT ( ""Attempted to remove time skip watcher (%p, %p), but it was not registered"" , fnc , data )"	10931:1:333419:333513	3075509	3	True				
ANR	3075557	CallExpression	"EXCEPT ( ""Attempted to remove time skip watcher (%p, %p), but it was not registered"" , fnc , data )"		3075509	0					
ANR	3075558	Callee	EXCEPT		3075509	0					
ANR	3075559	Identifier	EXCEPT		3075509	0					
ANR	3075560	ArgumentList	"""Attempted to remove time skip watcher (%p, %p), but it was not registered"""		3075509	1					
ANR	3075561	Argument	"""Attempted to remove time skip watcher (%p, %p), but it was not registered"""		3075509	0					
ANR	3075562	PrimaryExpression	"""Attempted to remove time skip watcher (%p, %p), but it was not registered"""		3075509	0					
ANR	3075563	Argument	fnc		3075509	1					
ANR	3075564	Identifier	fnc		3075509	0					
ANR	3075565	Argument	data		3075509	2					
ANR	3075566	Identifier	data		3075509	0					
ANR	3075567	ReturnType	void		3075509	1					
ANR	3075568	Identifier	DaemonCore :: UnregisterTimeSkipCallback		3075509	2					
ANR	3075569	ParameterList	"TimeSkipFunc fnc , void * data"		3075509	3					
ANR	3075570	Parameter	TimeSkipFunc fnc	10921:39:333192:333207	3075509	0	True				
ANR	3075571	ParameterType	TimeSkipFunc		3075509	0					
ANR	3075572	Identifier	fnc		3075509	1					
ANR	3075573	Parameter	void * data	10921:57:333210:333220	3075509	1	True				
ANR	3075574	ParameterType	void *		3075509	0					
ANR	3075575	Identifier	data		3075509	1					
ANR	3075576	CFGEntryNode	ENTRY		3075509		True				
ANR	3075577	CFGExitNode	EXIT		3075509		True				
ANR	3075578	Symbol	p		3075509						
ANR	3075579	Symbol	m_TimeSkipWatchers . Next		3075509						
ANR	3075580	Symbol	data		3075509						
ANR	3075581	Symbol	p -> data		3075509						
ANR	3075582	Symbol	fnc		3075509						
ANR	3075583	Symbol	* p		3075509						
ANR	3075584	Symbol	p -> fn		3075509						
ANR	3075585	Symbol	m_TimeSkipWatchers		3075509						
ANR	3075586	Function	DaemonCore :: CheckForTimeSkip	10934:0:333518:334989							
ANR	3075587	FunctionDef	"DaemonCore :: CheckForTimeSkip (time_t time_before , time_t okay_delta)"		3075586	0					
ANR	3075588	CompoundStatement		10936:0:333591:334989	3075586	0					
ANR	3075589	IfStatement	if ( m_TimeSkipWatchers . Number ( ) == 0 )		3075586	0					
ANR	3075590	Condition	m_TimeSkipWatchers . Number ( ) == 0	10937:4:333597:333628	3075586	0	True				
ANR	3075591	EqualityExpression	m_TimeSkipWatchers . Number ( ) == 0		3075586	0		==			
ANR	3075592	CallExpression	m_TimeSkipWatchers . Number ( )		3075586	0					
ANR	3075593	Callee	m_TimeSkipWatchers . Number		3075586	0					
ANR	3075594	MemberAccess	m_TimeSkipWatchers . Number		3075586	0					
ANR	3075595	Identifier	m_TimeSkipWatchers		3075586	0					
ANR	3075596	Identifier	Number		3075586	1					
ANR	3075597	ArgumentList			3075586	1					
ANR	3075598	PrimaryExpression	0		3075586	1					
ANR	3075599	CompoundStatement		2:38:39:39	3075586	1					
ANR	3075600	ReturnStatement	return ;	10939:2:333674:333680	3075586	0	True				
ANR	3075601	IdentifierDeclStatement	time_t time_after = time ( NULL ) ;	10944:1:333752:333782	3075586	1	True				
ANR	3075602	IdentifierDecl	time_after = time ( NULL )		3075586	0					
ANR	3075603	IdentifierDeclType	time_t		3075586	0					
ANR	3075604	Identifier	time_after		3075586	1					
ANR	3075605	AssignmentExpression	time_after = time ( NULL )		3075586	2		=			
ANR	3075606	Identifier	time_after		3075586	0					
ANR	3075607	CallExpression	time ( NULL )		3075586	1					
ANR	3075608	Callee	time		3075586	0					
ANR	3075609	Identifier	time		3075586	0					
ANR	3075610	ArgumentList	NULL		3075586	1					
ANR	3075611	Argument	NULL		3075586	0					
ANR	3075612	Identifier	NULL		3075586	0					
ANR	3075613	IdentifierDeclStatement	int delta = 0 ;	10945:1:333785:333798	3075586	2	True				
ANR	3075614	IdentifierDecl	delta = 0		3075586	0					
ANR	3075615	IdentifierDeclType	int		3075586	0					
ANR	3075616	Identifier	delta		3075586	1					
ANR	3075617	AssignmentExpression	delta = 0		3075586	2		=			
ANR	3075618	Identifier	delta		3075586	0					
ANR	3075619	PrimaryExpression	0		3075586	1					
ANR	3075620	IfStatement	if ( ( time_after + MAX_TIME_SKIP ) < time_before )		3075586	3					
ANR	3075621	Condition	( time_after + MAX_TIME_SKIP ) < time_before	10951:4:334024:334065	3075586	0	True				
ANR	3075622	RelationalExpression	( time_after + MAX_TIME_SKIP ) < time_before		3075586	0		<			
ANR	3075623	AdditiveExpression	time_after + MAX_TIME_SKIP		3075586	0		+			
ANR	3075624	Identifier	time_after		3075586	0					
ANR	3075625	Identifier	MAX_TIME_SKIP		3075586	1					
ANR	3075626	Identifier	time_before		3075586	1					
ANR	3075627	CompoundStatement		16:48:476:476	3075586	1					
ANR	3075628	ExpressionStatement	delta = - ( int ) ( time_before - time_after )	10958:2:334266:334306	3075586	0	True				
ANR	3075629	AssignmentExpression	delta = - ( int ) ( time_before - time_after )		3075586	0		=			
ANR	3075630	Identifier	delta		3075586	0					
ANR	3075631	UnaryOperationExpression	- ( int ) ( time_before - time_after )		3075586	1					
ANR	3075632	UnaryOperator	-		3075586	0					
ANR	3075633	CastExpression	( int ) ( time_before - time_after )		3075586	1					
ANR	3075634	CastTarget	int		3075586	0					
ANR	3075635	AdditiveExpression	time_before - time_after		3075586	1		-			
ANR	3075636	Identifier	time_before		3075586	0					
ANR	3075637	Identifier	time_after		3075586	1					
ANR	3075638	IfStatement	if ( ( time_before + okay_delta * 2 + MAX_TIME_SKIP ) < time_after )		3075586	4					
ANR	3075639	Condition	( time_before + okay_delta * 2 + MAX_TIME_SKIP ) < time_after	10960:4:334315:334371	3075586	0	True				
ANR	3075640	RelationalExpression	( time_before + okay_delta * 2 + MAX_TIME_SKIP ) < time_after		3075586	0		<			
ANR	3075641	AdditiveExpression	time_before + okay_delta * 2 + MAX_TIME_SKIP		3075586	0		+			
ANR	3075642	Identifier	time_before		3075586	0					
ANR	3075643	AdditiveExpression	okay_delta * 2 + MAX_TIME_SKIP		3075586	1		+			
ANR	3075644	MultiplicativeExpression	okay_delta * 2		3075586	0		*			
ANR	3075645	Identifier	okay_delta		3075586	0					
ANR	3075646	PrimaryExpression	2		3075586	1					
ANR	3075647	Identifier	MAX_TIME_SKIP		3075586	1					
ANR	3075648	Identifier	time_after		3075586	1					
ANR	3075649	CompoundStatement		25:63:782:782	3075586	1					
ANR	3075650	ExpressionStatement	delta = time_after - time_before - okay_delta	10967:2:334532:334577	3075586	0	True				
ANR	3075651	AssignmentExpression	delta = time_after - time_before - okay_delta		3075586	0		=			
ANR	3075652	Identifier	delta		3075586	0					
ANR	3075653	AdditiveExpression	time_after - time_before - okay_delta		3075586	1		-			
ANR	3075654	Identifier	time_after		3075586	0					
ANR	3075655	AdditiveExpression	time_before - okay_delta		3075586	1		-			
ANR	3075656	Identifier	time_before		3075586	0					
ANR	3075657	Identifier	okay_delta		3075586	1					
ANR	3075658	IfStatement	if ( delta == 0 )		3075586	5					
ANR	3075659	Condition	delta == 0	10969:4:334586:334595	3075586	0	True				
ANR	3075660	EqualityExpression	delta == 0		3075586	0		==			
ANR	3075661	Identifier	delta		3075586	0					
ANR	3075662	PrimaryExpression	0		3075586	1					
ANR	3075663	CompoundStatement		34:16:1006:1006	3075586	1					
ANR	3075664	ReturnStatement	return ;	10971:2:334668:334674	3075586	0	True				
ANR	3075665	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Time skip noticed.  The system clock jumped approximately %d seconds.\\n"" , delta )"	10973:1:334680:334782	3075586	6	True				
ANR	3075666	CallExpression	"dprintf ( D_FULLDEBUG , ""Time skip noticed.  The system clock jumped approximately %d seconds.\\n"" , delta )"		3075586	0					
ANR	3075667	Callee	dprintf		3075586	0					
ANR	3075668	Identifier	dprintf		3075586	0					
ANR	3075669	ArgumentList	D_FULLDEBUG		3075586	1					
ANR	3075670	Argument	D_FULLDEBUG		3075586	0					
ANR	3075671	Identifier	D_FULLDEBUG		3075586	0					
ANR	3075672	Argument	"""Time skip noticed.  The system clock jumped approximately %d seconds.\\n"""		3075586	1					
ANR	3075673	PrimaryExpression	"""Time skip noticed.  The system clock jumped approximately %d seconds.\\n"""		3075586	0					
ANR	3075674	Argument	delta		3075586	2					
ANR	3075675	Identifier	delta		3075586	0					
ANR	3075676	ExpressionStatement	m_TimeSkipWatchers . Rewind ( )	10976:1:334849:334876	3075586	7	True				
ANR	3075677	CallExpression	m_TimeSkipWatchers . Rewind ( )		3075586	0					
ANR	3075678	Callee	m_TimeSkipWatchers . Rewind		3075586	0					
ANR	3075679	MemberAccess	m_TimeSkipWatchers . Rewind		3075586	0					
ANR	3075680	Identifier	m_TimeSkipWatchers		3075586	0					
ANR	3075681	Identifier	Rewind		3075586	1					
ANR	3075682	ArgumentList			3075586	1					
ANR	3075683	IdentifierDeclStatement	TimeSkipWatcher * p ;	10977:1:334879:334898	3075586	8	True				
ANR	3075684	IdentifierDecl	* p		3075586	0					
ANR	3075685	IdentifierDeclType	TimeSkipWatcher *		3075586	0					
ANR	3075686	Identifier	p		3075586	1					
ANR	3075687	WhileStatement	while ( ( p = m_TimeSkipWatchers . Next ( ) ) )		3075586	9					
ANR	3075688	Condition	p = m_TimeSkipWatchers . Next ( )	10978:8:334908:334938	3075586	0	True				
ANR	3075689	AssignmentExpression	p = m_TimeSkipWatchers . Next ( )		3075586	0		=			
ANR	3075690	Identifier	p		3075586	0					
ANR	3075691	CallExpression	m_TimeSkipWatchers . Next ( )		3075586	1					
ANR	3075692	Callee	m_TimeSkipWatchers . Next		3075586	0					
ANR	3075693	MemberAccess	m_TimeSkipWatchers . Next		3075586	0					
ANR	3075694	Identifier	m_TimeSkipWatchers		3075586	0					
ANR	3075695	Identifier	Next		3075586	1					
ANR	3075696	ArgumentList			3075586	1					
ANR	3075697	CompoundStatement		43:42:1350:1350	3075586	1					
ANR	3075698	ExpressionStatement	ASSERT ( p -> fn )	10979:2:334946:334959	3075586	0	True				
ANR	3075699	CallExpression	ASSERT ( p -> fn )		3075586	0					
ANR	3075700	Callee	ASSERT		3075586	0					
ANR	3075701	Identifier	ASSERT		3075586	0					
ANR	3075702	ArgumentList	p -> fn		3075586	1					
ANR	3075703	Argument	p -> fn		3075586	0					
ANR	3075704	PtrMemberAccess	p -> fn		3075586	0					
ANR	3075705	Identifier	p		3075586	0					
ANR	3075706	Identifier	fn		3075586	1					
ANR	3075707	ExpressionStatement	"p -> fn ( p -> data , delta )"	10980:2:334963:334984	3075586	1	True				
ANR	3075708	CallExpression	"p -> fn ( p -> data , delta )"		3075586	0					
ANR	3075709	Callee	p -> fn		3075586	0					
ANR	3075710	PtrMemberAccess	p -> fn		3075586	0					
ANR	3075711	Identifier	p		3075586	0					
ANR	3075712	Identifier	fn		3075586	1					
ANR	3075713	ArgumentList	p -> data		3075586	1					
ANR	3075714	Argument	p -> data		3075586	0					
ANR	3075715	PtrMemberAccess	p -> data		3075586	0					
ANR	3075716	Identifier	p		3075586	0					
ANR	3075717	Identifier	data		3075586	1					
ANR	3075718	Argument	delta		3075586	1					
ANR	3075719	Identifier	delta		3075586	0					
ANR	3075720	ReturnType	void		3075586	1					
ANR	3075721	Identifier	DaemonCore :: CheckForTimeSkip		3075586	2					
ANR	3075722	ParameterList	"time_t time_before , time_t okay_delta"		3075586	3					
ANR	3075723	Parameter	time_t time_before	10935:29:333552:333569	3075586	0	True				
ANR	3075724	ParameterType	time_t		3075586	0					
ANR	3075725	Identifier	time_before		3075586	1					
ANR	3075726	Parameter	time_t okay_delta	10935:49:333572:333588	3075586	1	True				
ANR	3075727	ParameterType	time_t		3075586	0					
ANR	3075728	Identifier	okay_delta		3075586	1					
ANR	3075729	CFGEntryNode	ENTRY		3075586		True				
ANR	3075730	CFGExitNode	EXIT		3075586		True				
ANR	3075731	Symbol	m_TimeSkipWatchers . Next		3075586						
ANR	3075732	Symbol	NULL		3075586						
ANR	3075733	Symbol	p -> data		3075586						
ANR	3075734	Symbol	delta		3075586						
ANR	3075735	Symbol	D_FULLDEBUG		3075586						
ANR	3075736	Symbol	p -> fn		3075586						
ANR	3075737	Symbol	okay_delta		3075586						
ANR	3075738	Symbol	m_TimeSkipWatchers		3075586						
ANR	3075739	Symbol	p		3075586						
ANR	3075740	Symbol	time_before		3075586						
ANR	3075741	Symbol	MAX_TIME_SKIP		3075586						
ANR	3075742	Symbol	* p		3075586						
ANR	3075743	Symbol	time		3075586						
ANR	3075744	Symbol	time_after		3075586						
ANR	3075745	Symbol	m_TimeSkipWatchers . Number		3075586						
ANR	3075746	Function	DaemonCore :: UpdateLocalAd	10985:0:334993:336465							
ANR	3075747	FunctionDef	"DaemonCore :: UpdateLocalAd (ClassAd * daemonAd , char const * fname)"		3075746	0					
ANR	3075748	CompoundStatement		10987:0:335062:336465	3075746	0					
ANR	3075749	IdentifierDeclStatement	FILE * AD_FILE ;	10988:4:335068:335084	3075746	0	True				
ANR	3075750	IdentifierDecl	* AD_FILE		3075746	0					
ANR	3075751	IdentifierDeclType	FILE *		3075746	0					
ANR	3075752	Identifier	AD_FILE		3075746	1					
ANR	3075753	IfStatement	if ( ! fname )		3075746	1					
ANR	3075754	Condition	! fname	10990:5:335092:335097	3075746	0	True				
ANR	3075755	UnaryOperationExpression	! fname		3075746	0					
ANR	3075756	UnaryOperator	!		3075746	0					
ANR	3075757	Identifier	fname		3075746	1					
ANR	3075758	CompoundStatement		5:2:42:67	3075746	1					
ANR	3075759	IdentifierDeclStatement	char localAd_path [ 100 ] ;	10991:2:335105:335130	3075746	0	True				
ANR	3075760	IdentifierDecl	localAd_path [ 100 ]		3075746	0					
ANR	3075761	IdentifierDeclType	char [ 100 ]		3075746	0					
ANR	3075762	Identifier	localAd_path		3075746	1					
ANR	3075763	PrimaryExpression	100		3075746	2					
ANR	3075764	ExpressionStatement	"sprintf ( localAd_path , ""%s_DAEMON_AD_FILE"" , get_mySubSystem ( ) -> getName ( ) )"	10992:2:335134:335208	3075746	1	True				
ANR	3075765	CallExpression	"sprintf ( localAd_path , ""%s_DAEMON_AD_FILE"" , get_mySubSystem ( ) -> getName ( ) )"		3075746	0					
ANR	3075766	Callee	sprintf		3075746	0					
ANR	3075767	Identifier	sprintf		3075746	0					
ANR	3075768	ArgumentList	localAd_path		3075746	1					
ANR	3075769	Argument	localAd_path		3075746	0					
ANR	3075770	Identifier	localAd_path		3075746	0					
ANR	3075771	Argument	"""%s_DAEMON_AD_FILE"""		3075746	1					
ANR	3075772	PrimaryExpression	"""%s_DAEMON_AD_FILE"""		3075746	0					
ANR	3075773	Argument	get_mySubSystem ( ) -> getName ( )		3075746	2					
ANR	3075774	CallExpression	get_mySubSystem ( ) -> getName ( )		3075746	0					
ANR	3075775	Callee	get_mySubSystem ( ) -> getName		3075746	0					
ANR	3075776	PtrMemberAccess	get_mySubSystem ( ) -> getName		3075746	0					
ANR	3075777	CallExpression	get_mySubSystem ( )		3075746	0					
ANR	3075778	Callee	get_mySubSystem		3075746	0					
ANR	3075779	Identifier	get_mySubSystem		3075746	0					
ANR	3075780	ArgumentList			3075746	1					
ANR	3075781	Identifier	getName		3075746	1					
ANR	3075782	ArgumentList			3075746	1					
ANR	3075783	IfStatement	if ( localAdFile )		3075746	2					
ANR	3075784	Condition	localAdFile	10996:6:335305:335315	3075746	0	True				
ANR	3075785	Identifier	localAdFile		3075746	0					
ANR	3075786	CompoundStatement		10:20:256:256	3075746	1					
ANR	3075787	ExpressionStatement	free ( localAdFile )	10997:3:335324:335343	3075746	0	True				
ANR	3075788	CallExpression	free ( localAdFile )		3075746	0					
ANR	3075789	Callee	free		3075746	0					
ANR	3075790	Identifier	free		3075746	0					
ANR	3075791	ArgumentList	localAdFile		3075746	1					
ANR	3075792	Argument	localAdFile		3075746	0					
ANR	3075793	Identifier	localAdFile		3075746	0					
ANR	3075794	ExpressionStatement	localAdFile = param ( localAd_path )	10999:2:335351:335386	3075746	3	True				
ANR	3075795	AssignmentExpression	localAdFile = param ( localAd_path )		3075746	0		=			
ANR	3075796	Identifier	localAdFile		3075746	0					
ANR	3075797	CallExpression	param ( localAd_path )		3075746	1					
ANR	3075798	Callee	param		3075746	0					
ANR	3075799	Identifier	param		3075746	0					
ANR	3075800	ArgumentList	localAd_path		3075746	1					
ANR	3075801	Argument	localAd_path		3075746	0					
ANR	3075802	Identifier	localAd_path		3075746	0					
ANR	3075803	ExpressionStatement	fname = localAdFile	11000:2:335390:335409	3075746	4	True				
ANR	3075804	AssignmentExpression	fname = localAdFile		3075746	0		=			
ANR	3075805	Identifier	fname		3075746	0					
ANR	3075806	Identifier	localAdFile		3075746	1					
ANR	3075807	IfStatement	if ( fname )		3075746	2					
ANR	3075808	Condition	fname	11003:8:335423:335427	3075746	0	True				
ANR	3075809	Identifier	fname		3075746	0					
ANR	3075810	CompoundStatement		18:2:372:395	3075746	1					
ANR	3075811	IdentifierDeclStatement	MyString newLocalAdFile ;	11004:2:335435:335458	3075746	0	True				
ANR	3075812	IdentifierDecl	newLocalAdFile		3075746	0					
ANR	3075813	IdentifierDeclType	MyString		3075746	0					
ANR	3075814	Identifier	newLocalAdFile		3075746	1					
ANR	3075815	ExpressionStatement	"newLocalAdFile . sprintf ( ""%s.new"" , fname )"	11005:2:335462:335500	3075746	1	True				
ANR	3075816	CallExpression	"newLocalAdFile . sprintf ( ""%s.new"" , fname )"		3075746	0					
ANR	3075817	Callee	newLocalAdFile . sprintf		3075746	0					
ANR	3075818	MemberAccess	newLocalAdFile . sprintf		3075746	0					
ANR	3075819	Identifier	newLocalAdFile		3075746	0					
ANR	3075820	Identifier	sprintf		3075746	1					
ANR	3075821	ArgumentList	"""%s.new"""		3075746	1					
ANR	3075822	Argument	"""%s.new"""		3075746	0					
ANR	3075823	PrimaryExpression	"""%s.new"""		3075746	0					
ANR	3075824	Argument	fname		3075746	1					
ANR	3075825	Identifier	fname		3075746	0					
ANR	3075826	IfStatement	"if ( ( AD_FILE = safe_fopen_wrapper_follow ( newLocalAdFile . Value ( ) , ""w"" ) ) )"		3075746	2					
ANR	3075827	Condition	"AD_FILE = safe_fopen_wrapper_follow ( newLocalAdFile . Value ( ) , ""w"" )"	11006:12:335514:335579	3075746	0	True				
ANR	3075828	AssignmentExpression	"AD_FILE = safe_fopen_wrapper_follow ( newLocalAdFile . Value ( ) , ""w"" )"		3075746	0		=			
ANR	3075829	Identifier	AD_FILE		3075746	0					
ANR	3075830	CallExpression	"safe_fopen_wrapper_follow ( newLocalAdFile . Value ( ) , ""w"" )"		3075746	1					
ANR	3075831	Callee	safe_fopen_wrapper_follow		3075746	0					
ANR	3075832	Identifier	safe_fopen_wrapper_follow		3075746	0					
ANR	3075833	ArgumentList	newLocalAdFile . Value ( )		3075746	1					
ANR	3075834	Argument	newLocalAdFile . Value ( )		3075746	0					
ANR	3075835	CallExpression	newLocalAdFile . Value ( )		3075746	0					
ANR	3075836	Callee	newLocalAdFile . Value		3075746	0					
ANR	3075837	MemberAccess	newLocalAdFile . Value		3075746	0					
ANR	3075838	Identifier	newLocalAdFile		3075746	0					
ANR	3075839	Identifier	Value		3075746	1					
ANR	3075840	ArgumentList			3075746	1					
ANR	3075841	Argument	"""w"""		3075746	1					
ANR	3075842	PrimaryExpression	"""w"""		3075746	0					
ANR	3075843	CompoundStatement		20:81:520:520	3075746	1					
ANR	3075844	ExpressionStatement	daemonAd -> fPrint ( AD_FILE )	11007:12:335597:335622	3075746	0	True				
ANR	3075845	CallExpression	daemonAd -> fPrint ( AD_FILE )		3075746	0					
ANR	3075846	Callee	daemonAd -> fPrint		3075746	0					
ANR	3075847	PtrMemberAccess	daemonAd -> fPrint		3075746	0					
ANR	3075848	Identifier	daemonAd		3075746	0					
ANR	3075849	Identifier	fPrint		3075746	1					
ANR	3075850	ArgumentList	AD_FILE		3075746	1					
ANR	3075851	Argument	AD_FILE		3075746	0					
ANR	3075852	Identifier	AD_FILE		3075746	0					
ANR	3075853	ExpressionStatement	fclose ( AD_FILE )	11008:12:335636:335653	3075746	1	True				
ANR	3075854	CallExpression	fclose ( AD_FILE )		3075746	0					
ANR	3075855	Callee	fclose		3075746	0					
ANR	3075856	Identifier	fclose		3075746	0					
ANR	3075857	ArgumentList	AD_FILE		3075746	1					
ANR	3075858	Argument	AD_FILE		3075746	0					
ANR	3075859	Identifier	AD_FILE		3075746	0					
ANR	3075860	IfStatement	"if ( rotate_file ( newLocalAdFile . Value ( ) , fname ) != 0 )"		3075746	2					
ANR	3075861	Condition	"rotate_file ( newLocalAdFile . Value ( ) , fname ) != 0"	11009:7:335662:335705	3075746	0	True				
ANR	3075862	EqualityExpression	"rotate_file ( newLocalAdFile . Value ( ) , fname ) != 0"		3075746	0		!=			
ANR	3075863	CallExpression	"rotate_file ( newLocalAdFile . Value ( ) , fname )"		3075746	0					
ANR	3075864	Callee	rotate_file		3075746	0					
ANR	3075865	Identifier	rotate_file		3075746	0					
ANR	3075866	ArgumentList	newLocalAdFile . Value ( )		3075746	1					
ANR	3075867	Argument	newLocalAdFile . Value ( )		3075746	0					
ANR	3075868	CallExpression	newLocalAdFile . Value ( )		3075746	0					
ANR	3075869	Callee	newLocalAdFile . Value		3075746	0					
ANR	3075870	MemberAccess	newLocalAdFile . Value		3075746	0					
ANR	3075871	Identifier	newLocalAdFile		3075746	0					
ANR	3075872	Identifier	Value		3075746	1					
ANR	3075873	ArgumentList			3075746	1					
ANR	3075874	Argument	fname		3075746	1					
ANR	3075875	Identifier	fname		3075746	0					
ANR	3075876	PrimaryExpression	0		3075746	1					
ANR	3075877	CompoundStatement		23:54:646:646	3075746	1					
ANR	3075878	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: WARNING: failed to rotate %s to %s\\n"" , newLocalAdFile . Value ( ) , fname )"	11016:4:336007:336129	3075746	0	True				
ANR	3075879	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: WARNING: failed to rotate %s to %s\\n"" , newLocalAdFile . Value ( ) , fname )"		3075746	0					
ANR	3075880	Callee	dprintf		3075746	0					
ANR	3075881	Identifier	dprintf		3075746	0					
ANR	3075882	ArgumentList	D_ALWAYS		3075746	1					
ANR	3075883	Argument	D_ALWAYS		3075746	0					
ANR	3075884	Identifier	D_ALWAYS		3075746	0					
ANR	3075885	Argument	"""DaemonCore: WARNING: failed to rotate %s to %s\\n"""		3075746	1					
ANR	3075886	PrimaryExpression	"""DaemonCore: WARNING: failed to rotate %s to %s\\n"""		3075746	0					
ANR	3075887	Argument	newLocalAdFile . Value ( )		3075746	2					
ANR	3075888	CallExpression	newLocalAdFile . Value ( )		3075746	0					
ANR	3075889	Callee	newLocalAdFile . Value		3075746	0					
ANR	3075890	MemberAccess	newLocalAdFile . Value		3075746	0					
ANR	3075891	Identifier	newLocalAdFile		3075746	0					
ANR	3075892	Identifier	Value		3075746	1					
ANR	3075893	ArgumentList			3075746	1					
ANR	3075894	Argument	fname		3075746	3					
ANR	3075895	Identifier	fname		3075746	0					
ANR	3075896	ElseStatement	else		3075746	0					
ANR	3075897	CompoundStatement		41:15:1227:1227	3075746	0					
ANR	3075898	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open daemon address file %s\\n"" , newLocalAdFile . Value ( ) )"	11028:12:336304:336447	3075746	0	True				
ANR	3075899	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open daemon address file %s\\n"" , newLocalAdFile . Value ( ) )"		3075746	0					
ANR	3075900	Callee	dprintf		3075746	0					
ANR	3075901	Identifier	dprintf		3075746	0					
ANR	3075902	ArgumentList	D_ALWAYS		3075746	1					
ANR	3075903	Argument	D_ALWAYS		3075746	0					
ANR	3075904	Identifier	D_ALWAYS		3075746	0					
ANR	3075905	Argument	"""DaemonCore: ERROR: Can't open daemon address file %s\\n"""		3075746	1					
ANR	3075906	PrimaryExpression	"""DaemonCore: ERROR: Can't open daemon address file %s\\n"""		3075746	0					
ANR	3075907	Argument	newLocalAdFile . Value ( )		3075746	2					
ANR	3075908	CallExpression	newLocalAdFile . Value ( )		3075746	0					
ANR	3075909	Callee	newLocalAdFile . Value		3075746	0					
ANR	3075910	MemberAccess	newLocalAdFile . Value		3075746	0					
ANR	3075911	Identifier	newLocalAdFile		3075746	0					
ANR	3075912	Identifier	Value		3075746	1					
ANR	3075913	ArgumentList			3075746	1					
ANR	3075914	ReturnType	void		3075746	1					
ANR	3075915	Identifier	DaemonCore :: UpdateLocalAd		3075746	2					
ANR	3075916	ParameterList	"ClassAd * daemonAd , char const * fname"		3075746	3					
ANR	3075917	Parameter	ClassAd * daemonAd	10986:26:335024:335040	3075746	0	True				
ANR	3075918	ParameterType	ClassAd *		3075746	0					
ANR	3075919	Identifier	daemonAd		3075746	1					
ANR	3075920	Parameter	char const * fname	10986:44:335042:335058	3075746	1	True				
ANR	3075921	ParameterType	char const *		3075746	0					
ANR	3075922	Identifier	fname		3075746	1					
ANR	3075923	CFGEntryNode	ENTRY		3075746		True				
ANR	3075924	CFGExitNode	EXIT		3075746		True				
ANR	3075925	Symbol	localAdFile		3075746						
ANR	3075926	Symbol	fname		3075746						
ANR	3075927	Symbol	localAd_path		3075746						
ANR	3075928	Symbol	AD_FILE		3075746						
ANR	3075929	Symbol	newLocalAdFile . Value		3075746						
ANR	3075930	Symbol	get_mySubSystem ( ) -> getName		3075746						
ANR	3075931	Symbol	* get_mySubSystem		3075746						
ANR	3075932	Symbol	D_ALWAYS		3075746						
ANR	3075933	Symbol	newLocalAdFile		3075746						
ANR	3075934	Symbol	param		3075746						
ANR	3075935	Symbol	daemonAd		3075746						
ANR	3075936	Symbol	rotate_file		3075746						
ANR	3075937	Symbol	get_mySubSystem		3075746						
ANR	3075938	Symbol	safe_fopen_wrapper_follow		3075746						
ANR	3075939	Function	DaemonCore :: publish	11036:0:336469:337261							
ANR	3075940	FunctionDef	DaemonCore :: publish (ClassAd * ad)		3075939	0					
ANR	3075941	CompoundStatement		11037:33:336507:337261	3075939	0					
ANR	3075942	IdentifierDeclStatement	const char * tmp ;	11038:1:336510:336525	3075939	0	True				
ANR	3075943	IdentifierDecl	* tmp		3075939	0					
ANR	3075944	IdentifierDeclType	const char *		3075939	0					
ANR	3075945	Identifier	tmp		3075939	1					
ANR	3075946	ExpressionStatement	config_fill_ad ( ad )	11042:1:336612:336630	3075939	1	True				
ANR	3075947	CallExpression	config_fill_ad ( ad )		3075939	0					
ANR	3075948	Callee	config_fill_ad		3075939	0					
ANR	3075949	Identifier	config_fill_ad		3075939	0					
ANR	3075950	ArgumentList	ad		3075939	1					
ANR	3075951	Argument	ad		3075939	0					
ANR	3075952	Identifier	ad		3075939	0					
ANR	3075953	ExpressionStatement	"ad -> Assign ( ATTR_MY_CURRENT_TIME , ( int ) time ( NULL ) )"	11045:1:336671:336720	3075939	2	True				
ANR	3075954	CallExpression	"ad -> Assign ( ATTR_MY_CURRENT_TIME , ( int ) time ( NULL ) )"		3075939	0					
ANR	3075955	Callee	ad -> Assign		3075939	0					
ANR	3075956	PtrMemberAccess	ad -> Assign		3075939	0					
ANR	3075957	Identifier	ad		3075939	0					
ANR	3075958	Identifier	Assign		3075939	1					
ANR	3075959	ArgumentList	ATTR_MY_CURRENT_TIME		3075939	1					
ANR	3075960	Argument	ATTR_MY_CURRENT_TIME		3075939	0					
ANR	3075961	Identifier	ATTR_MY_CURRENT_TIME		3075939	0					
ANR	3075962	Argument	( int ) time ( NULL )		3075939	1					
ANR	3075963	CastExpression	( int ) time ( NULL )		3075939	0					
ANR	3075964	CastTarget	int		3075939	0					
ANR	3075965	CallExpression	time ( NULL )		3075939	1					
ANR	3075966	Callee	time		3075939	0					
ANR	3075967	Identifier	time		3075939	0					
ANR	3075968	ArgumentList	NULL		3075939	1					
ANR	3075969	Argument	NULL		3075939	0					
ANR	3075970	Identifier	NULL		3075939	0					
ANR	3075971	ExpressionStatement	"ad -> Assign ( ATTR_MACHINE , get_local_fqdn ( ) . Value ( ) )"	11048:1:336786:336836	3075939	3	True				
ANR	3075972	CallExpression	"ad -> Assign ( ATTR_MACHINE , get_local_fqdn ( ) . Value ( ) )"		3075939	0					
ANR	3075973	Callee	ad -> Assign		3075939	0					
ANR	3075974	PtrMemberAccess	ad -> Assign		3075939	0					
ANR	3075975	Identifier	ad		3075939	0					
ANR	3075976	Identifier	Assign		3075939	1					
ANR	3075977	ArgumentList	ATTR_MACHINE		3075939	1					
ANR	3075978	Argument	ATTR_MACHINE		3075939	0					
ANR	3075979	Identifier	ATTR_MACHINE		3075939	0					
ANR	3075980	Argument	get_local_fqdn ( ) . Value ( )		3075939	1					
ANR	3075981	CallExpression	get_local_fqdn ( ) . Value ( )		3075939	0					
ANR	3075982	Callee	get_local_fqdn ( ) . Value		3075939	0					
ANR	3075983	MemberAccess	get_local_fqdn ( ) . Value		3075939	0					
ANR	3075984	CallExpression	get_local_fqdn ( )		3075939	0					
ANR	3075985	Callee	get_local_fqdn		3075939	0					
ANR	3075986	Identifier	get_local_fqdn		3075939	0					
ANR	3075987	ArgumentList			3075939	1					
ANR	3075988	Identifier	Value		3075939	1					
ANR	3075989	ArgumentList			3075939	1					
ANR	3075990	ExpressionStatement	tmp = privateNetworkName ( )	11051:1:336892:336918	3075939	4	True				
ANR	3075991	AssignmentExpression	tmp = privateNetworkName ( )		3075939	0		=			
ANR	3075992	Identifier	tmp		3075939	0					
ANR	3075993	CallExpression	privateNetworkName ( )		3075939	1					
ANR	3075994	Callee	privateNetworkName		3075939	0					
ANR	3075995	Identifier	privateNetworkName		3075939	0					
ANR	3075996	ArgumentList			3075939	1					
ANR	3075997	IfStatement	if ( tmp )		3075939	5					
ANR	3075998	Condition	tmp	11052:5:336925:336927	3075939	0	True				
ANR	3075999	Identifier	tmp		3075939	0					
ANR	3076000	CompoundStatement		16:10:422:422	3075939	1					
ANR	3076001	ExpressionStatement	"ad -> Assign ( ATTR_PRIVATE_NETWORK_NAME , tmp )"	11057:2:337131:337173	3075939	0	True				
ANR	3076002	CallExpression	"ad -> Assign ( ATTR_PRIVATE_NETWORK_NAME , tmp )"		3075939	0					
ANR	3076003	Callee	ad -> Assign		3075939	0					
ANR	3076004	PtrMemberAccess	ad -> Assign		3075939	0					
ANR	3076005	Identifier	ad		3075939	0					
ANR	3076006	Identifier	Assign		3075939	1					
ANR	3076007	ArgumentList	ATTR_PRIVATE_NETWORK_NAME		3075939	1					
ANR	3076008	Argument	ATTR_PRIVATE_NETWORK_NAME		3075939	0					
ANR	3076009	Identifier	ATTR_PRIVATE_NETWORK_NAME		3075939	0					
ANR	3076010	Argument	tmp		3075939	1					
ANR	3076011	Identifier	tmp		3075939	0					
ANR	3076012	ExpressionStatement	tmp = publicNetworkIpAddr ( )	11060:1:337180:337207	3075939	6	True				
ANR	3076013	AssignmentExpression	tmp = publicNetworkIpAddr ( )		3075939	0		=			
ANR	3076014	Identifier	tmp		3075939	0					
ANR	3076015	CallExpression	publicNetworkIpAddr ( )		3075939	1					
ANR	3076016	Callee	publicNetworkIpAddr		3075939	0					
ANR	3076017	Identifier	publicNetworkIpAddr		3075939	0					
ANR	3076018	ArgumentList			3075939	1					
ANR	3076019	IfStatement	if ( tmp )		3075939	7					
ANR	3076020	Condition	tmp	11061:5:337214:337216	3075939	0	True				
ANR	3076021	Identifier	tmp		3075939	0					
ANR	3076022	CompoundStatement		25:11:712:712	3075939	1					
ANR	3076023	ExpressionStatement	"ad -> Assign ( ATTR_MY_ADDRESS , tmp )"	11062:2:337224:337256	3075939	0	True				
ANR	3076024	CallExpression	"ad -> Assign ( ATTR_MY_ADDRESS , tmp )"		3075939	0					
ANR	3076025	Callee	ad -> Assign		3075939	0					
ANR	3076026	PtrMemberAccess	ad -> Assign		3075939	0					
ANR	3076027	Identifier	ad		3075939	0					
ANR	3076028	Identifier	Assign		3075939	1					
ANR	3076029	ArgumentList	ATTR_MY_ADDRESS		3075939	1					
ANR	3076030	Argument	ATTR_MY_ADDRESS		3075939	0					
ANR	3076031	Identifier	ATTR_MY_ADDRESS		3075939	0					
ANR	3076032	Argument	tmp		3075939	1					
ANR	3076033	Identifier	tmp		3075939	0					
ANR	3076034	ReturnType	void		3075939	1					
ANR	3076035	Identifier	DaemonCore :: publish		3075939	2					
ANR	3076036	ParameterList	ClassAd * ad		3075939	3					
ANR	3076037	Parameter	ClassAd * ad	11037:20:336494:336504	3075939	0	True				
ANR	3076038	ParameterType	ClassAd *		3075939	0					
ANR	3076039	Identifier	ad		3075939	1					
ANR	3076040	CFGEntryNode	ENTRY		3075939		True				
ANR	3076041	CFGExitNode	EXIT		3075939		True				
ANR	3076042	Symbol	ad		3075939						
ANR	3076043	Symbol	NULL		3075939						
ANR	3076044	Symbol	get_local_fqdn ( ) . Value		3075939						
ANR	3076045	Symbol	tmp		3075939						
ANR	3076046	Symbol	publicNetworkIpAddr		3075939						
ANR	3076047	Symbol	ATTR_MY_CURRENT_TIME		3075939						
ANR	3076048	Symbol	time		3075939						
ANR	3076049	Symbol	get_local_fqdn		3075939						
ANR	3076050	Symbol	ATTR_PRIVATE_NETWORK_NAME		3075939						
ANR	3076051	Symbol	ATTR_MY_ADDRESS		3075939						
ANR	3076052	Symbol	privateNetworkName		3075939						
ANR	3076053	Symbol	ATTR_MACHINE		3075939						
ANR	3076054	Function	DaemonCore :: initCollectorList	11067:0:337265:337404							
ANR	3076055	FunctionDef	DaemonCore :: initCollectorList ()		3076054	0					
ANR	3076056	CompoundStatement		11068:32:337302:337404	3076054	0					
ANR	3076057	IfStatement	if ( m_collector_list )		3076054	0					
ANR	3076058	Condition	m_collector_list	11069:5:337309:337324	3076054	0	True				
ANR	3076059	Identifier	m_collector_list		3076054	0					
ANR	3076060	CompoundStatement		2:23:24:24	3076054	1					
ANR	3076061	Statement	delete	11070:2:337331:337336	3076054	0	True				
ANR	3076062	ExpressionStatement	m_collector_list	11070:9:337338:337354	3076054	1	True				
ANR	3076063	Identifier	m_collector_list		3076054	0					
ANR	3076064	ExpressionStatement	m_collector_list = CollectorList :: create ( )	11072:1:337360:337402	3076054	1	True				
ANR	3076065	AssignmentExpression	m_collector_list = CollectorList :: create ( )		3076054	0		=			
ANR	3076066	Identifier	m_collector_list		3076054	0					
ANR	3076067	CallExpression	CollectorList :: create ( )		3076054	1					
ANR	3076068	Callee	CollectorList :: create		3076054	0					
ANR	3076069	Identifier	CollectorList :: create		3076054	0					
ANR	3076070	ArgumentList			3076054	1					
ANR	3076071	ReturnType	void		3076054	1					
ANR	3076072	Identifier	DaemonCore :: initCollectorList		3076054	2					
ANR	3076073	ParameterList			3076054	3					
ANR	3076074	CFGEntryNode	ENTRY		3076054		True				
ANR	3076075	CFGExitNode	EXIT		3076054		True				
ANR	3076076	Symbol	m_collector_list		3076054						
ANR	3076077	Symbol	CollectorList :: create		3076054						
ANR	3076078	Function	DaemonCore :: getCollectorList	11076:0:337408:337482							
ANR	3076079	FunctionDef	DaemonCore :: getCollectorList ()		3076078	0					
ANR	3076080	CompoundStatement		11077:31:337454:337482	3076078	0					
ANR	3076081	ReturnStatement	return m_collector_list ;	11078:1:337457:337480	3076078	0	True				
ANR	3076082	Identifier	m_collector_list		3076078	0					
ANR	3076083	ReturnType	CollectorList *		3076078	1					
ANR	3076084	Identifier	DaemonCore :: getCollectorList		3076078	2					
ANR	3076085	ParameterList			3076078	3					
ANR	3076086	CFGEntryNode	ENTRY		3076078		True				
ANR	3076087	CFGExitNode	EXIT		3076078		True				
ANR	3076088	Symbol	m_collector_list		3076078						
ANR	3076089	Function	DaemonCore :: sendUpdates	11082:0:337486:338452							
ANR	3076090	FunctionDef	"DaemonCore :: sendUpdates (int cmd , ClassAd * ad1 , ClassAd * ad2 , bool nonblock)"		3076089	0					
ANR	3076091	CompoundStatement		11084:0:337568:338452	3076089	0					
ANR	3076092	ExpressionStatement	ASSERT ( ad1 )	11085:1:337571:337582	3076089	0	True				
ANR	3076093	CallExpression	ASSERT ( ad1 )		3076089	0					
ANR	3076094	Callee	ASSERT		3076089	0					
ANR	3076095	Identifier	ASSERT		3076089	0					
ANR	3076096	ArgumentList	ad1		3076089	1					
ANR	3076097	Argument	ad1		3076089	0					
ANR	3076098	Identifier	ad1		3076089	0					
ANR	3076099	ExpressionStatement	ASSERT ( m_collector_list )	11086:1:337585:337609	3076089	1	True				
ANR	3076100	CallExpression	ASSERT ( m_collector_list )		3076089	0					
ANR	3076101	Callee	ASSERT		3076089	0					
ANR	3076102	Identifier	ASSERT		3076089	0					
ANR	3076103	ArgumentList	m_collector_list		3076089	1					
ANR	3076104	Argument	m_collector_list		3076089	0					
ANR	3076105	Identifier	m_collector_list		3076089	0					
ANR	3076106	IfStatement	"if ( ! m_in_daemon_shutdown_fast && evalExpr ( ad1 , ""DAEMON_SHUTDOWN_FAST"" , ATTR_DAEMON_SHUTDOWN_FAST , ""starting fast shutdown"" ) )"		3076089	2					
ANR	3076107	Condition	"! m_in_daemon_shutdown_fast && evalExpr ( ad1 , ""DAEMON_SHUTDOWN_FAST"" , ATTR_DAEMON_SHUTDOWN_FAST , ""starting fast shutdown"" )"	11089:5:337684:337810	3076089	0	True				
ANR	3076108	AndExpression	"! m_in_daemon_shutdown_fast && evalExpr ( ad1 , ""DAEMON_SHUTDOWN_FAST"" , ATTR_DAEMON_SHUTDOWN_FAST , ""starting fast shutdown"" )"		3076089	0		&&			
ANR	3076109	UnaryOperationExpression	! m_in_daemon_shutdown_fast		3076089	0					
ANR	3076110	UnaryOperator	!		3076089	0					
ANR	3076111	Identifier	m_in_daemon_shutdown_fast		3076089	1					
ANR	3076112	CallExpression	"evalExpr ( ad1 , ""DAEMON_SHUTDOWN_FAST"" , ATTR_DAEMON_SHUTDOWN_FAST , ""starting fast shutdown"" )"		3076089	1					
ANR	3076113	Callee	evalExpr		3076089	0					
ANR	3076114	Identifier	evalExpr		3076089	0					
ANR	3076115	ArgumentList	ad1		3076089	1					
ANR	3076116	Argument	ad1		3076089	0					
ANR	3076117	Identifier	ad1		3076089	0					
ANR	3076118	Argument	"""DAEMON_SHUTDOWN_FAST"""		3076089	1					
ANR	3076119	PrimaryExpression	"""DAEMON_SHUTDOWN_FAST"""		3076089	0					
ANR	3076120	Argument	ATTR_DAEMON_SHUTDOWN_FAST		3076089	2					
ANR	3076121	Identifier	ATTR_DAEMON_SHUTDOWN_FAST		3076089	0					
ANR	3076122	Argument	"""starting fast shutdown"""		3076089	3					
ANR	3076123	PrimaryExpression	"""starting fast shutdown"""		3076089	0					
ANR	3076124	CompoundStatement		8:32:244:244	3076089	1					
ANR	3076125	ExpressionStatement	m_wants_restart = false	11093:2:337881:337904	3076089	0	True				
ANR	3076126	AssignmentExpression	m_wants_restart = false		3076089	0		=			
ANR	3076127	Identifier	m_wants_restart		3076089	0					
ANR	3076128	Identifier	false		3076089	1					
ANR	3076129	ExpressionStatement	m_in_daemon_shutdown_fast = true	11094:2:337908:337940	3076089	1	True				
ANR	3076130	AssignmentExpression	m_in_daemon_shutdown_fast = true		3076089	0		=			
ANR	3076131	Identifier	m_in_daemon_shutdown_fast		3076089	0					
ANR	3076132	Identifier	true		3076089	1					
ANR	3076133	ExpressionStatement	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGQUIT )"	11095:2:337944:338000	3076089	2	True				
ANR	3076134	CallExpression	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGQUIT )"		3076089	0					
ANR	3076135	Callee	daemonCore -> Send_Signal		3076089	0					
ANR	3076136	PtrMemberAccess	daemonCore -> Send_Signal		3076089	0					
ANR	3076137	Identifier	daemonCore		3076089	0					
ANR	3076138	Identifier	Send_Signal		3076089	1					
ANR	3076139	ArgumentList	daemonCore -> getpid ( )		3076089	1					
ANR	3076140	Argument	daemonCore -> getpid ( )		3076089	0					
ANR	3076141	CallExpression	daemonCore -> getpid ( )		3076089	0					
ANR	3076142	Callee	daemonCore -> getpid		3076089	0					
ANR	3076143	PtrMemberAccess	daemonCore -> getpid		3076089	0					
ANR	3076144	Identifier	daemonCore		3076089	0					
ANR	3076145	Identifier	getpid		3076089	1					
ANR	3076146	ArgumentList			3076089	1					
ANR	3076147	Argument	SIGQUIT		3076089	1					
ANR	3076148	Identifier	SIGQUIT		3076089	0					
ANR	3076149	ElseStatement	else		3076089	0					
ANR	3076150	IfStatement	"if ( ! m_in_daemon_shutdown && evalExpr ( ad1 , ""DAEMON_SHUTDOWN"" , ATTR_DAEMON_SHUTDOWN , ""starting graceful shutdown"" ) )"		3076089	0					
ANR	3076151	Condition	"! m_in_daemon_shutdown && evalExpr ( ad1 , ""DAEMON_SHUTDOWN"" , ATTR_DAEMON_SHUTDOWN , ""starting graceful shutdown"" )"	11097:10:338015:338134	3076089	0	True				
ANR	3076152	AndExpression	"! m_in_daemon_shutdown && evalExpr ( ad1 , ""DAEMON_SHUTDOWN"" , ATTR_DAEMON_SHUTDOWN , ""starting graceful shutdown"" )"		3076089	0		&&			
ANR	3076153	UnaryOperationExpression	! m_in_daemon_shutdown		3076089	0					
ANR	3076154	UnaryOperator	!		3076089	0					
ANR	3076155	Identifier	m_in_daemon_shutdown		3076089	1					
ANR	3076156	CallExpression	"evalExpr ( ad1 , ""DAEMON_SHUTDOWN"" , ATTR_DAEMON_SHUTDOWN , ""starting graceful shutdown"" )"		3076089	1					
ANR	3076157	Callee	evalExpr		3076089	0					
ANR	3076158	Identifier	evalExpr		3076089	0					
ANR	3076159	ArgumentList	ad1		3076089	1					
ANR	3076160	Argument	ad1		3076089	0					
ANR	3076161	Identifier	ad1		3076089	0					
ANR	3076162	Argument	"""DAEMON_SHUTDOWN"""		3076089	1					
ANR	3076163	PrimaryExpression	"""DAEMON_SHUTDOWN"""		3076089	0					
ANR	3076164	Argument	ATTR_DAEMON_SHUTDOWN		3076089	2					
ANR	3076165	Identifier	ATTR_DAEMON_SHUTDOWN		3076089	0					
ANR	3076166	Argument	"""starting graceful shutdown"""		3076089	3					
ANR	3076167	PrimaryExpression	"""starting graceful shutdown"""		3076089	0					
ANR	3076168	CompoundStatement		16:38:568:568	3076089	1					
ANR	3076169	ExpressionStatement	m_wants_restart = false	11100:2:338141:338164	3076089	0	True				
ANR	3076170	AssignmentExpression	m_wants_restart = false		3076089	0		=			
ANR	3076171	Identifier	m_wants_restart		3076089	0					
ANR	3076172	Identifier	false		3076089	1					
ANR	3076173	ExpressionStatement	m_in_daemon_shutdown = true	11101:2:338168:338195	3076089	1	True				
ANR	3076174	AssignmentExpression	m_in_daemon_shutdown = true		3076089	0		=			
ANR	3076175	Identifier	m_in_daemon_shutdown		3076089	0					
ANR	3076176	Identifier	true		3076089	1					
ANR	3076177	ExpressionStatement	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGTERM )"	11102:2:338199:338255	3076089	2	True				
ANR	3076178	CallExpression	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGTERM )"		3076089	0					
ANR	3076179	Callee	daemonCore -> Send_Signal		3076089	0					
ANR	3076180	PtrMemberAccess	daemonCore -> Send_Signal		3076089	0					
ANR	3076181	Identifier	daemonCore		3076089	0					
ANR	3076182	Identifier	Send_Signal		3076089	1					
ANR	3076183	ArgumentList	daemonCore -> getpid ( )		3076089	1					
ANR	3076184	Argument	daemonCore -> getpid ( )		3076089	0					
ANR	3076185	CallExpression	daemonCore -> getpid ( )		3076089	0					
ANR	3076186	Callee	daemonCore -> getpid		3076089	0					
ANR	3076187	PtrMemberAccess	daemonCore -> getpid		3076089	0					
ANR	3076188	Identifier	daemonCore		3076089	0					
ANR	3076189	Identifier	getpid		3076089	1					
ANR	3076190	ArgumentList			3076089	1					
ANR	3076191	Argument	SIGTERM		3076089	1					
ANR	3076192	Identifier	SIGTERM		3076089	0					
ANR	3076193	ReturnStatement	"return m_collector_list -> sendUpdates ( cmd , ad1 , ad2 , nonblock ) ;"	11107:1:338389:338450	3076089	3	True				
ANR	3076194	CallExpression	"m_collector_list -> sendUpdates ( cmd , ad1 , ad2 , nonblock )"		3076089	0					
ANR	3076195	Callee	m_collector_list -> sendUpdates		3076089	0					
ANR	3076196	PtrMemberAccess	m_collector_list -> sendUpdates		3076089	0					
ANR	3076197	Identifier	m_collector_list		3076089	0					
ANR	3076198	Identifier	sendUpdates		3076089	1					
ANR	3076199	ArgumentList	cmd		3076089	1					
ANR	3076200	Argument	cmd		3076089	0					
ANR	3076201	Identifier	cmd		3076089	0					
ANR	3076202	Argument	ad1		3076089	1					
ANR	3076203	Identifier	ad1		3076089	0					
ANR	3076204	Argument	ad2		3076089	2					
ANR	3076205	Identifier	ad2		3076089	0					
ANR	3076206	Argument	nonblock		3076089	3					
ANR	3076207	Identifier	nonblock		3076089	0					
ANR	3076208	ReturnType	int		3076089	1					
ANR	3076209	Identifier	DaemonCore :: sendUpdates		3076089	2					
ANR	3076210	ParameterList	"int cmd , ClassAd * ad1 , ClassAd * ad2 , bool nonblock"		3076089	3					
ANR	3076211	Parameter	int cmd	11083:25:337515:337521	3076089	0	True				
ANR	3076212	ParameterType	int		3076089	0					
ANR	3076213	Identifier	cmd		3076089	1					
ANR	3076214	Parameter	ClassAd * ad1	11083:34:337524:337535	3076089	1	True				
ANR	3076215	ParameterType	ClassAd *		3076089	0					
ANR	3076216	Identifier	ad1		3076089	1					
ANR	3076217	Parameter	ClassAd * ad2	11083:48:337538:337549	3076089	2	True				
ANR	3076218	ParameterType	ClassAd *		3076089	0					
ANR	3076219	Identifier	ad2		3076089	1					
ANR	3076220	Parameter	bool nonblock	11083:62:337552:337564	3076089	3	True				
ANR	3076221	ParameterType	bool		3076089	0					
ANR	3076222	Identifier	nonblock		3076089	1					
ANR	3076223	CFGEntryNode	ENTRY		3076089		True				
ANR	3076224	CFGExitNode	EXIT		3076089		True				
ANR	3076225	Symbol	nonblock		3076089						
ANR	3076226	Symbol	SIGQUIT		3076089						
ANR	3076227	Symbol	ATTR_DAEMON_SHUTDOWN		3076089						
ANR	3076228	Symbol	false		3076089						
ANR	3076229	Symbol	daemonCore -> getpid		3076089						
ANR	3076230	Symbol	ATTR_DAEMON_SHUTDOWN_FAST		3076089						
ANR	3076231	Symbol	ad2		3076089						
ANR	3076232	Symbol	m_collector_list		3076089						
ANR	3076233	Symbol	ad1		3076089						
ANR	3076234	Symbol	* m_collector_list		3076089						
ANR	3076235	Symbol	m_wants_restart		3076089						
ANR	3076236	Symbol	* daemonCore		3076089						
ANR	3076237	Symbol	daemonCore		3076089						
ANR	3076238	Symbol	m_in_daemon_shutdown_fast		3076089						
ANR	3076239	Symbol	true		3076089						
ANR	3076240	Symbol	m_in_daemon_shutdown		3076089						
ANR	3076241	Symbol	cmd		3076089						
ANR	3076242	Symbol	SIGTERM		3076089						
ANR	3076243	Symbol	evalExpr		3076089						
ANR	3076244	Symbol	m_collector_list -> sendUpdates		3076089						
ANR	3076245	Function	DaemonCore :: wantsRestart	11111:0:338456:338515							
ANR	3076246	FunctionDef	DaemonCore :: wantsRestart ()		3076245	0					
ANR	3076247	CompoundStatement		11113:0:338488:338515	3076245	0					
ANR	3076248	ReturnStatement	return m_wants_restart ;	11114:1:338491:338513	3076245	0	True				
ANR	3076249	Identifier	m_wants_restart		3076245	0					
ANR	3076250	ReturnType	bool		3076245	1					
ANR	3076251	Identifier	DaemonCore :: wantsRestart		3076245	2					
ANR	3076252	ParameterList			3076245	3					
ANR	3076253	CFGEntryNode	ENTRY		3076245		True				
ANR	3076254	CFGExitNode	EXIT		3076245		True				
ANR	3076255	Symbol	m_wants_restart		3076245						
ANR	3076256	Function	DaemonCore :: evalExpr	11118:0:338519:339180							
ANR	3076257	FunctionDef	"DaemonCore :: evalExpr (ClassAd * ad , const char * param_name , const char * attr_name , const char * message)"		3076256	0					
ANR	3076258	CompoundStatement		11121:0:338635:339180	3076256	0					
ANR	3076259	IdentifierDeclStatement	bool value = false ;	11122:1:338638:338656	3076256	0	True				
ANR	3076260	IdentifierDecl	value = false		3076256	0					
ANR	3076261	IdentifierDeclType	bool		3076256	0					
ANR	3076262	Identifier	value		3076256	1					
ANR	3076263	AssignmentExpression	value = false		3076256	2		=			
ANR	3076264	Identifier	false		3076256	0					
ANR	3076265	Identifier	false		3076256	1					
ANR	3076266	IdentifierDeclStatement	char * expr = param ( param_name ) ;	11123:1:338659:338689	3076256	1	True				
ANR	3076267	IdentifierDecl	* expr = param ( param_name )		3076256	0					
ANR	3076268	IdentifierDeclType	char *		3076256	0					
ANR	3076269	Identifier	expr		3076256	1					
ANR	3076270	AssignmentExpression	* expr = param ( param_name )		3076256	2		=			
ANR	3076271	Identifier	expr		3076256	0					
ANR	3076272	CallExpression	param ( param_name )		3076256	1					
ANR	3076273	Callee	param		3076256	0					
ANR	3076274	Identifier	param		3076256	0					
ANR	3076275	ArgumentList	param_name		3076256	1					
ANR	3076276	Argument	param_name		3076256	0					
ANR	3076277	Identifier	param_name		3076256	0					
ANR	3076278	IfStatement	if ( ! expr )		3076256	2					
ANR	3076279	Condition	! expr	11124:5:338696:338700	3076256	0	True				
ANR	3076280	UnaryOperationExpression	! expr		3076256	0					
ANR	3076281	UnaryOperator	!		3076256	0					
ANR	3076282	Identifier	expr		3076256	1					
ANR	3076283	CompoundStatement		4:12:67:67	3076256	1					
ANR	3076284	ExpressionStatement	expr = param ( attr_name )	11125:2:338707:338730	3076256	0	True				
ANR	3076285	AssignmentExpression	expr = param ( attr_name )		3076256	0		=			
ANR	3076286	Identifier	expr		3076256	0					
ANR	3076287	CallExpression	param ( attr_name )		3076256	1					
ANR	3076288	Callee	param		3076256	0					
ANR	3076289	Identifier	param		3076256	0					
ANR	3076290	ArgumentList	attr_name		3076256	1					
ANR	3076291	Argument	attr_name		3076256	0					
ANR	3076292	Identifier	attr_name		3076256	0					
ANR	3076293	IfStatement	if ( expr )		3076256	3					
ANR	3076294	Condition	expr	11127:5:338740:338743	3076256	0	True				
ANR	3076295	Identifier	expr		3076256	0					
ANR	3076296	CompoundStatement		15:2:304:318	3076256	1					
ANR	3076297	IfStatement	"if ( ! ad -> AssignExpr ( attr_name , expr ) )"		3076256	0					
ANR	3076298	Condition	"! ad -> AssignExpr ( attr_name , expr )"	11128:6:338754:338785	3076256	0	True				
ANR	3076299	UnaryOperationExpression	"! ad -> AssignExpr ( attr_name , expr )"		3076256	0					
ANR	3076300	UnaryOperator	!		3076256	0					
ANR	3076301	CallExpression	"ad -> AssignExpr ( attr_name , expr )"		3076256	1					
ANR	3076302	Callee	ad -> AssignExpr		3076256	0					
ANR	3076303	PtrMemberAccess	ad -> AssignExpr		3076256	0					
ANR	3076304	Identifier	ad		3076256	0					
ANR	3076305	Identifier	AssignExpr		3076256	1					
ANR	3076306	ArgumentList	attr_name		3076256	1					
ANR	3076307	Argument	attr_name		3076256	0					
ANR	3076308	Identifier	attr_name		3076256	0					
ANR	3076309	Argument	expr		3076256	1					
ANR	3076310	Identifier	expr		3076256	0					
ANR	3076311	CompoundStatement		8:40:152:152	3076256	1					
ANR	3076312	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""ERROR: Failed to parse %s expression \\""%s\\""\\n"" , attr_name , expr )"	11129:3:338793:338900	3076256	0	True				
ANR	3076313	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""ERROR: Failed to parse %s expression \\""%s\\""\\n"" , attr_name , expr )"		3076256	0					
ANR	3076314	Callee	dprintf		3076256	0					
ANR	3076315	Identifier	dprintf		3076256	0					
ANR	3076316	ArgumentList	D_ALWAYS | D_FAILURE		3076256	1					
ANR	3076317	Argument	D_ALWAYS | D_FAILURE		3076256	0					
ANR	3076318	InclusiveOrExpression	D_ALWAYS | D_FAILURE		3076256	0		|			
ANR	3076319	Identifier	D_ALWAYS		3076256	0					
ANR	3076320	Identifier	D_FAILURE		3076256	1					
ANR	3076321	Argument	"""ERROR: Failed to parse %s expression \\""%s\\""\\n"""		3076256	1					
ANR	3076322	PrimaryExpression	"""ERROR: Failed to parse %s expression \\""%s\\""\\n"""		3076256	0					
ANR	3076323	Argument	attr_name		3076256	2					
ANR	3076324	Identifier	attr_name		3076256	0					
ANR	3076325	Argument	expr		3076256	3					
ANR	3076326	Identifier	expr		3076256	0					
ANR	3076327	ExpressionStatement	free ( expr )	11132:3:338905:338915	3076256	1	True				
ANR	3076328	CallExpression	free ( expr )		3076256	0					
ANR	3076329	Callee	free		3076256	0					
ANR	3076330	Identifier	free		3076256	0					
ANR	3076331	ArgumentList	expr		3076256	1					
ANR	3076332	Argument	expr		3076256	0					
ANR	3076333	Identifier	expr		3076256	0					
ANR	3076334	ReturnStatement	return false ;	11133:3:338920:338932	3076256	2	True				
ANR	3076335	Identifier	false		3076256	0					
ANR	3076336	IdentifierDeclStatement	int result = 0 ;	11135:2:338940:338954	3076256	1	True				
ANR	3076337	IdentifierDecl	result = 0		3076256	0					
ANR	3076338	IdentifierDeclType	int		3076256	0					
ANR	3076339	Identifier	result		3076256	1					
ANR	3076340	AssignmentExpression	result = 0		3076256	2		=			
ANR	3076341	Identifier	result		3076256	0					
ANR	3076342	PrimaryExpression	0		3076256	1					
ANR	3076343	IfStatement	"if ( ad -> EvalBool ( attr_name , NULL , result ) && result )"		3076256	2					
ANR	3076344	Condition	"ad -> EvalBool ( attr_name , NULL , result ) && result"	11136:6:338962:339008	3076256	0	True				
ANR	3076345	AndExpression	"ad -> EvalBool ( attr_name , NULL , result ) && result"		3076256	0		&&			
ANR	3076346	CallExpression	"ad -> EvalBool ( attr_name , NULL , result )"		3076256	0					
ANR	3076347	Callee	ad -> EvalBool		3076256	0					
ANR	3076348	PtrMemberAccess	ad -> EvalBool		3076256	0					
ANR	3076349	Identifier	ad		3076256	0					
ANR	3076350	Identifier	EvalBool		3076256	1					
ANR	3076351	ArgumentList	attr_name		3076256	1					
ANR	3076352	Argument	attr_name		3076256	0					
ANR	3076353	Identifier	attr_name		3076256	0					
ANR	3076354	Argument	NULL		3076256	1					
ANR	3076355	Identifier	NULL		3076256	0					
ANR	3076356	Argument	result		3076256	2					
ANR	3076357	Identifier	result		3076256	0					
ANR	3076358	Identifier	result		3076256	1					
ANR	3076359	CompoundStatement		16:55:375:375	3076256	1					
ANR	3076360	ExpressionStatement	"dprintf ( D_ALWAYS , ""The %s expression \\""%s\\"" evaluated to TRUE: %s\\n"" , attr_name , expr , message )"	11137:3:339016:339125	3076256	0	True				
ANR	3076361	CallExpression	"dprintf ( D_ALWAYS , ""The %s expression \\""%s\\"" evaluated to TRUE: %s\\n"" , attr_name , expr , message )"		3076256	0					
ANR	3076362	Callee	dprintf		3076256	0					
ANR	3076363	Identifier	dprintf		3076256	0					
ANR	3076364	ArgumentList	D_ALWAYS		3076256	1					
ANR	3076365	Argument	D_ALWAYS		3076256	0					
ANR	3076366	Identifier	D_ALWAYS		3076256	0					
ANR	3076367	Argument	"""The %s expression \\""%s\\"" evaluated to TRUE: %s\\n"""		3076256	1					
ANR	3076368	PrimaryExpression	"""The %s expression \\""%s\\"" evaluated to TRUE: %s\\n"""		3076256	0					
ANR	3076369	Argument	attr_name		3076256	2					
ANR	3076370	Identifier	attr_name		3076256	0					
ANR	3076371	Argument	expr		3076256	3					
ANR	3076372	Identifier	expr		3076256	0					
ANR	3076373	Argument	message		3076256	4					
ANR	3076374	Identifier	message		3076256	0					
ANR	3076375	ExpressionStatement	value = true	11140:3:339130:339142	3076256	1	True				
ANR	3076376	AssignmentExpression	value = true		3076256	0		=			
ANR	3076377	Identifier	value		3076256	0					
ANR	3076378	Identifier	true		3076256	1					
ANR	3076379	ExpressionStatement	free ( expr )	11142:2:339150:339160	3076256	3	True				
ANR	3076380	CallExpression	free ( expr )		3076256	0					
ANR	3076381	Callee	free		3076256	0					
ANR	3076382	Identifier	free		3076256	0					
ANR	3076383	ArgumentList	expr		3076256	1					
ANR	3076384	Argument	expr		3076256	0					
ANR	3076385	Identifier	expr		3076256	0					
ANR	3076386	ReturnStatement	return value ;	11144:1:339166:339178	3076256	4	True				
ANR	3076387	Identifier	value		3076256	0					
ANR	3076388	ReturnType	bool		3076256	1					
ANR	3076389	Identifier	DaemonCore :: evalExpr		3076256	2					
ANR	3076390	ParameterList	"ClassAd * ad , const char * param_name , const char * attr_name , const char * message"		3076256	3					
ANR	3076391	Parameter	ClassAd * ad	11119:22:338546:338556	3076256	0	True				
ANR	3076392	ParameterType	ClassAd *		3076256	0					
ANR	3076393	Identifier	ad		3076256	1					
ANR	3076394	Parameter	const char * param_name	11119:35:338559:338580	3076256	1	True				
ANR	3076395	ParameterType	const char *		3076256	0					
ANR	3076396	Identifier	param_name		3076256	1					
ANR	3076397	Parameter	const char * attr_name	11120:7:338590:338610	3076256	2	True				
ANR	3076398	ParameterType	const char *		3076256	0					
ANR	3076399	Identifier	attr_name		3076256	1					
ANR	3076400	Parameter	const char * message	11120:30:338613:338631	3076256	3	True				
ANR	3076401	ParameterType	const char *		3076256	0					
ANR	3076402	Identifier	message		3076256	1					
ANR	3076403	CFGEntryNode	ENTRY		3076256		True				
ANR	3076404	CFGExitNode	EXIT		3076256		True				
ANR	3076405	Symbol	ad		3076256						
ANR	3076406	Symbol	NULL		3076256						
ANR	3076407	Symbol	attr_name		3076256						
ANR	3076408	Symbol	ad -> EvalBool		3076256						
ANR	3076409	Symbol	false		3076256						
ANR	3076410	Symbol	D_ALWAYS		3076256						
ANR	3076411	Symbol	* ad		3076256						
ANR	3076412	Symbol	D_FAILURE		3076256						
ANR	3076413	Symbol	message		3076256						
ANR	3076414	Symbol	result		3076256						
ANR	3076415	Symbol	param		3076256						
ANR	3076416	Symbol	ad -> AssignExpr		3076256						
ANR	3076417	Symbol	true		3076256						
ANR	3076418	Symbol	expr		3076256						
ANR	3076419	Symbol	param_name		3076256						
ANR	3076420	Symbol	value		3076256						
ANR	3076421	Function	DaemonCore :: PidEntry :: PidEntry	11147:0:339183:339657							
ANR	3076422	FunctionDef	DaemonCore :: PidEntry :: PidEntry ()		3076421	0					
ANR	3076423	CompoundStatement		11156:0:339379:339657	3076421	0					
ANR	3076424	ForStatement	for ( int i = 0 ; i < 3 ; ++ i )		3076421	0					
ANR	3076425	ForInit	int i = 0 ;	11157:6:339387:339394	3076421	0	True				
ANR	3076426	IdentifierDeclStatement	int i = 0 ;		3076421	0					
ANR	3076427	IdentifierDecl	i = 0		3076421	0					
ANR	3076428	IdentifierDeclType	int		3076421	0					
ANR	3076429	Identifier	i		3076421	1					
ANR	3076430	AssignmentExpression	i = 0		3076421	2		=			
ANR	3076431	Identifier	i		3076421	0					
ANR	3076432	PrimaryExpression	0		3076421	1					
ANR	3076433	Condition	i < 3	11157:14:339395:339397	3076421	1	True				
ANR	3076434	RelationalExpression	i < 3		3076421	0		<			
ANR	3076435	Identifier	i		3076421	0					
ANR	3076436	PrimaryExpression	3		3076421	1					
ANR	3076437	UnaryExpression	++ i	11157:18:339399:339401	3076421	2	True				
ANR	3076438	IncDec	++		3076421	0					
ANR	3076439	Identifier	i		3076421	1					
ANR	3076440	CompoundStatement		2:23:24:24	3076421	3					
ANR	3076441	ExpressionStatement	pipe_buf [ i ] = NULL	11158:2:339408:339426	3076421	0	True				
ANR	3076442	AssignmentExpression	pipe_buf [ i ] = NULL		3076421	0		=			
ANR	3076443	ArrayIndexing	pipe_buf [ i ]		3076421	0					
ANR	3076444	Identifier	pipe_buf		3076421	0					
ANR	3076445	Identifier	i		3076421	1					
ANR	3076446	Identifier	NULL		3076421	1					
ANR	3076447	ExpressionStatement	std_pipes [ i ] = DC_STD_FD_NOPIPE	11159:2:339430:339461	3076421	1	True				
ANR	3076448	AssignmentExpression	std_pipes [ i ] = DC_STD_FD_NOPIPE		3076421	0		=			
ANR	3076449	ArrayIndexing	std_pipes [ i ]		3076421	0					
ANR	3076450	Identifier	std_pipes		3076421	0					
ANR	3076451	Identifier	i		3076421	1					
ANR	3076452	Identifier	DC_STD_FD_NOPIPE		3076421	1					
ANR	3076453	ExpressionStatement	penvid . num = PIDENVID_MAX	11161:1:339467:339492	3076421	1	True				
ANR	3076454	AssignmentExpression	penvid . num = PIDENVID_MAX		3076421	0		=			
ANR	3076455	MemberAccess	penvid . num		3076421	0					
ANR	3076456	Identifier	penvid		3076421	0					
ANR	3076457	Identifier	num		3076421	1					
ANR	3076458	Identifier	PIDENVID_MAX		3076421	1					
ANR	3076459	ForStatement	for ( int i = 0 ; i < PIDENVID_MAX ; ++ i )		3076421	2					
ANR	3076460	ForInit	int i = 0 ;	11162:6:339500:339509	3076421	0	True				
ANR	3076461	IdentifierDeclStatement	int i = 0 ;		3076421	0					
ANR	3076462	IdentifierDecl	i = 0		3076421	0					
ANR	3076463	IdentifierDeclType	int		3076421	0					
ANR	3076464	Identifier	i		3076421	1					
ANR	3076465	AssignmentExpression	i = 0		3076421	2		=			
ANR	3076466	Identifier	i		3076421	0					
ANR	3076467	PrimaryExpression	0		3076421	1					
ANR	3076468	Condition	i < PIDENVID_MAX	11162:16:339510:339523	3076421	1	True				
ANR	3076469	RelationalExpression	i < PIDENVID_MAX		3076421	0		<			
ANR	3076470	Identifier	i		3076421	0					
ANR	3076471	Identifier	PIDENVID_MAX		3076421	1					
ANR	3076472	UnaryExpression	++ i	11162:32:339526:339528	3076421	2	True				
ANR	3076473	IncDec	++		3076421	0					
ANR	3076474	Identifier	i		3076421	1					
ANR	3076475	CompoundStatement		7:37:151:151	3076421	3					
ANR	3076476	ExpressionStatement	penvid . ancestors [ i ] . active = 0	11163:2:339535:339563	3076421	0	True				
ANR	3076477	AssignmentExpression	penvid . ancestors [ i ] . active = 0		3076421	0		=			
ANR	3076478	MemberAccess	penvid . ancestors [ i ] . active		3076421	0					
ANR	3076479	ArrayIndexing	penvid . ancestors [ i ]		3076421	0					
ANR	3076480	MemberAccess	penvid . ancestors		3076421	0					
ANR	3076481	Identifier	penvid		3076421	0					
ANR	3076482	Identifier	ancestors		3076421	1					
ANR	3076483	Identifier	i		3076421	1					
ANR	3076484	Identifier	active		3076421	1					
ANR	3076485	PrimaryExpression	0		3076421	1					
ANR	3076486	ForStatement	for ( unsigned int j = 0 ; j < PIDENVID_ENVID_SIZE ; ++ j )		3076421	1					
ANR	3076487	ForInit	unsigned int j = 0 ;	11164:7:339572:339588	3076421	0	True				
ANR	3076488	IdentifierDeclStatement	unsigned int j = 0 ;		3076421	0					
ANR	3076489	IdentifierDecl	j = 0		3076421	0					
ANR	3076490	IdentifierDeclType	unsigned int		3076421	0					
ANR	3076491	Identifier	j		3076421	1					
ANR	3076492	AssignmentExpression	j = 0		3076421	2		=			
ANR	3076493	Identifier	j		3076421	0					
ANR	3076494	PrimaryExpression	0		3076421	1					
ANR	3076495	Condition	j < PIDENVID_ENVID_SIZE	11164:24:339589:339609	3076421	1	True				
ANR	3076496	RelationalExpression	j < PIDENVID_ENVID_SIZE		3076421	0		<			
ANR	3076497	Identifier	j		3076421	0					
ANR	3076498	Identifier	PIDENVID_ENVID_SIZE		3076421	1					
ANR	3076499	UnaryExpression	++ j	11164:46:339611:339613	3076421	2	True				
ANR	3076500	IncDec	++		3076421	0					
ANR	3076501	Identifier	j		3076421	1					
ANR	3076502	ExpressionStatement	penvid . ancestors [ i ] . envid [ j ] = '\\0'	11165:3:339619:339652	3076421	3	True				
ANR	3076503	AssignmentExpression	penvid . ancestors [ i ] . envid [ j ] = '\\0'		3076421	0		=			
ANR	3076504	ArrayIndexing	penvid . ancestors [ i ] . envid [ j ]		3076421	0					
ANR	3076505	MemberAccess	penvid . ancestors [ i ] . envid		3076421	0					
ANR	3076506	ArrayIndexing	penvid . ancestors [ i ]		3076421	0					
ANR	3076507	MemberAccess	penvid . ancestors		3076421	0					
ANR	3076508	Identifier	penvid		3076421	0					
ANR	3076509	Identifier	ancestors		3076421	1					
ANR	3076510	Identifier	i		3076421	1					
ANR	3076511	Identifier	envid		3076421	1					
ANR	3076512	Identifier	j		3076421	1					
ANR	3076513	PrimaryExpression	'\\0'		3076421	1					
ANR	3076514	Identifier	DaemonCore :: PidEntry :: PidEntry		3076421	1					
ANR	3076515	ParameterList			3076421	2					
ANR	3076516	CFGEntryNode	ENTRY		3076421		True				
ANR	3076517	CFGExitNode	EXIT		3076421		True				
ANR	3076518	Symbol	* * i		3076421						
ANR	3076519	Symbol	NULL		3076421						
ANR	3076520	Symbol	penvid . ancestors		3076421						
ANR	3076521	Symbol	* penvid . ancestors		3076421						
ANR	3076522	Symbol	std_pipes		3076421						
ANR	3076523	Symbol	penvid . num		3076421						
ANR	3076524	Symbol	i		3076421						
ANR	3076525	Symbol	penvid . ancestors [ i ] . active		3076421						
ANR	3076526	Symbol	j		3076421						
ANR	3076527	Symbol	penvid . ancestors [ i ] . envid		3076421						
ANR	3076528	Symbol	pipe_buf		3076421						
ANR	3076529	Symbol	PIDENVID_ENVID_SIZE		3076421						
ANR	3076530	Symbol	* * penvid		3076421						
ANR	3076531	Symbol	* i		3076421						
ANR	3076532	Symbol	* std_pipes		3076421						
ANR	3076533	Symbol	* penvid		3076421						
ANR	3076534	Symbol	* j		3076421						
ANR	3076535	Symbol	* penvid . ancestors [ i ] . envid		3076421						
ANR	3076536	Symbol	penvid		3076421						
ANR	3076537	Symbol	DC_STD_FD_NOPIPE		3076421						
ANR	3076538	Symbol	PIDENVID_MAX		3076421						
ANR	3076539	Symbol	* * penvid . ancestors		3076421						
ANR	3076540	Symbol	* pipe_buf		3076421						
ANR	3076541	Function	DaemonCore :: PidEntry :: ~PidEntry	11169:0:339660:340229							
ANR	3076542	FunctionDef	DaemonCore :: PidEntry :: ~PidEntry ()		3076541	0					
ANR	3076543	CompoundStatement		11169:34:339694:340229	3076541	0					
ANR	3076544	IdentifierDeclStatement	int i ;	11170:1:339697:339702	3076541	0	True				
ANR	3076545	IdentifierDecl	i		3076541	0					
ANR	3076546	IdentifierDeclType	int		3076541	0					
ANR	3076547	Identifier	i		3076541	1					
ANR	3076548	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		3076541	1					
ANR	3076549	ForInit	i = 0 ;	11171:6:339710:339713	3076541	0	True				
ANR	3076550	AssignmentExpression	i = 0		3076541	0		=			
ANR	3076551	Identifier	i		3076541	0					
ANR	3076552	PrimaryExpression	0		3076541	1					
ANR	3076553	Condition	i <= 2	11171:11:339715:339718	3076541	1	True				
ANR	3076554	RelationalExpression	i <= 2		3076541	0		<=			
ANR	3076555	Identifier	i		3076541	0					
ANR	3076556	PrimaryExpression	2		3076541	1					
ANR	3076557	PostIncDecOperationExpression	i ++	11171:17:339721:339723	3076541	2	True				
ANR	3076558	Identifier	i		3076541	0					
ANR	3076559	IncDec	++		3076541	1					
ANR	3076560	CompoundStatement		3:22:31:31	3076541	3					
ANR	3076561	IfStatement	if ( pipe_buf [ i ] )		3076541	0					
ANR	3076562	Condition	pipe_buf [ i ]	11172:6:339734:339744	3076541	0	True				
ANR	3076563	ArrayIndexing	pipe_buf [ i ]		3076541	0					
ANR	3076564	Identifier	pipe_buf		3076541	0					
ANR	3076565	Identifier	i		3076541	1					
ANR	3076566	CompoundStatement		4:19:52:52	3076541	1					
ANR	3076567	Statement	delete	11173:3:339752:339757	3076541	0	True				
ANR	3076568	ExpressionStatement	pipe_buf [ i ]	11173:10:339759:339770	3076541	1	True				
ANR	3076569	ArrayIndexing	pipe_buf [ i ]		3076541	0					
ANR	3076570	Identifier	pipe_buf		3076541	0					
ANR	3076571	Identifier	i		3076541	1					
ANR	3076572	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		3076541	2					
ANR	3076573	ForInit	i = 0 ;	11177:6:339855:339858	3076541	0	True				
ANR	3076574	AssignmentExpression	i = 0		3076541	0		=			
ANR	3076575	Identifier	i		3076541	0					
ANR	3076576	PrimaryExpression	0		3076541	1					
ANR	3076577	Condition	i <= 2	11177:11:339860:339863	3076541	1	True				
ANR	3076578	RelationalExpression	i <= 2		3076541	0		<=			
ANR	3076579	Identifier	i		3076541	0					
ANR	3076580	PrimaryExpression	2		3076541	1					
ANR	3076581	PostIncDecOperationExpression	i ++	11177:17:339866:339868	3076541	2	True				
ANR	3076582	Identifier	i		3076541	0					
ANR	3076583	IncDec	++		3076541	1					
ANR	3076584	CompoundStatement		9:22:176:176	3076541	3					
ANR	3076585	IfStatement	if ( std_pipes [ i ] != DC_STD_FD_NOPIPE )		3076541	0					
ANR	3076586	Condition	std_pipes [ i ] != DC_STD_FD_NOPIPE	11178:6:339879:339910	3076541	0	True				
ANR	3076587	EqualityExpression	std_pipes [ i ] != DC_STD_FD_NOPIPE		3076541	0		!=			
ANR	3076588	ArrayIndexing	std_pipes [ i ]		3076541	0					
ANR	3076589	Identifier	std_pipes		3076541	0					
ANR	3076590	Identifier	i		3076541	1					
ANR	3076591	Identifier	DC_STD_FD_NOPIPE		3076541	1					
ANR	3076592	CompoundStatement		10:40:218:218	3076541	1					
ANR	3076593	ExpressionStatement	daemonCore -> Close_Pipe ( std_pipes [ i ] )	11179:3:339918:339954	3076541	0	True				
ANR	3076594	CallExpression	daemonCore -> Close_Pipe ( std_pipes [ i ] )		3076541	0					
ANR	3076595	Callee	daemonCore -> Close_Pipe		3076541	0					
ANR	3076596	PtrMemberAccess	daemonCore -> Close_Pipe		3076541	0					
ANR	3076597	Identifier	daemonCore		3076541	0					
ANR	3076598	Identifier	Close_Pipe		3076541	1					
ANR	3076599	ArgumentList	std_pipes [ i ]		3076541	1					
ANR	3076600	Argument	std_pipes [ i ]		3076541	0					
ANR	3076601	ArrayIndexing	std_pipes [ i ]		3076541	0					
ANR	3076602	Identifier	std_pipes		3076541	0					
ANR	3076603	Identifier	i		3076541	1					
ANR	3076604	IfStatement	if ( ! shared_port_fname . IsEmpty ( ) )		3076541	3					
ANR	3076605	Condition	! shared_port_fname . IsEmpty ( )	11183:5:339969:339996	3076541	0	True				
ANR	3076606	UnaryOperationExpression	! shared_port_fname . IsEmpty ( )		3076541	0					
ANR	3076607	UnaryOperator	!		3076541	0					
ANR	3076608	CallExpression	shared_port_fname . IsEmpty ( )		3076541	1					
ANR	3076609	Callee	shared_port_fname . IsEmpty		3076541	0					
ANR	3076610	MemberAccess	shared_port_fname . IsEmpty		3076541	0					
ANR	3076611	Identifier	shared_port_fname		3076541	0					
ANR	3076612	Identifier	IsEmpty		3076541	1					
ANR	3076613	ArgumentList			3076541	1					
ANR	3076614	CompoundStatement		15:36:305:305	3076541	1					
ANR	3076615	ExpressionStatement	SharedPortEndpoint :: RemoveSocket ( shared_port_fname . Value ( ) )	11187:2:340108:340169	3076541	0	True				
ANR	3076616	CallExpression	SharedPortEndpoint :: RemoveSocket ( shared_port_fname . Value ( ) )		3076541	0					
ANR	3076617	Callee	SharedPortEndpoint :: RemoveSocket		3076541	0					
ANR	3076618	Identifier	SharedPortEndpoint :: RemoveSocket		3076541	0					
ANR	3076619	ArgumentList	shared_port_fname . Value ( )		3076541	1					
ANR	3076620	Argument	shared_port_fname . Value ( )		3076541	0					
ANR	3076621	CallExpression	shared_port_fname . Value ( )		3076541	0					
ANR	3076622	Callee	shared_port_fname . Value		3076541	0					
ANR	3076623	MemberAccess	shared_port_fname . Value		3076541	0					
ANR	3076624	Identifier	shared_port_fname		3076541	0					
ANR	3076625	Identifier	Value		3076541	1					
ANR	3076626	ArgumentList			3076541	1					
ANR	3076627	IfStatement	if ( child_session_id )		3076541	4					
ANR	3076628	Condition	child_session_id	11190:4:340185:340200	3076541	0	True				
ANR	3076629	Identifier	child_session_id		3076541	0					
ANR	3076630	ExpressionStatement	free ( child_session_id )	11191:2:340205:340227	3076541	1	True				
ANR	3076631	CallExpression	free ( child_session_id )		3076541	0					
ANR	3076632	Callee	free		3076541	0					
ANR	3076633	Identifier	free		3076541	0					
ANR	3076634	ArgumentList	child_session_id		3076541	1					
ANR	3076635	Argument	child_session_id		3076541	0					
ANR	3076636	Identifier	child_session_id		3076541	0					
ANR	3076637	Identifier	DaemonCore :: PidEntry :: ~PidEntry		3076541	1					
ANR	3076638	ParameterList			3076541	2					
ANR	3076639	CFGEntryNode	ENTRY		3076541		True				
ANR	3076640	CFGExitNode	EXIT		3076541		True				
ANR	3076641	Symbol	* i		3076541						
ANR	3076642	Symbol	* std_pipes		3076541						
ANR	3076643	Symbol	shared_port_fname . Value		3076541						
ANR	3076644	Symbol	std_pipes		3076541						
ANR	3076645	Symbol	daemonCore		3076541						
ANR	3076646	Symbol	i		3076541						
ANR	3076647	Symbol	DC_STD_FD_NOPIPE		3076541						
ANR	3076648	Symbol	child_session_id		3076541						
ANR	3076649	Symbol	shared_port_fname . IsEmpty		3076541						
ANR	3076650	Symbol	shared_port_fname		3076541						
ANR	3076651	Symbol	pipe_buf		3076541						
ANR	3076652	Symbol	* pipe_buf		3076541						
ANR	3076653	Function	DaemonCore :: PidEntry :: pipeHandler	11195:0:340233:342090							
ANR	3076654	FunctionDef	DaemonCore :: PidEntry :: pipeHandler (int pipe_fd)		3076653	0					
ANR	3076655	CompoundStatement		11196:47:340284:342090	3076653	0					
ANR	3076656	IdentifierDeclStatement	char buf [ DC_PIPE_BUF_SIZE + 1 ] ;	11197:4:340290:340320	3076653	0	True				
ANR	3076657	IdentifierDecl	buf [ DC_PIPE_BUF_SIZE + 1 ]		3076653	0					
ANR	3076658	IdentifierDeclType	char [ DC_PIPE_BUF_SIZE + 1 ]		3076653	0					
ANR	3076659	Identifier	buf		3076653	1					
ANR	3076660	AdditiveExpression	DC_PIPE_BUF_SIZE + 1		3076653	2		+			
ANR	3076661	Identifier	DC_PIPE_BUF_SIZE		3076653	0					
ANR	3076662	PrimaryExpression	1		3076653	1					
ANR	3076663	IdentifierDeclStatement	"int bytes , max_read_bytes , max_buffer ;"	11198:4:340326:340363	3076653	1	True				
ANR	3076664	IdentifierDecl	bytes		3076653	0					
ANR	3076665	IdentifierDeclType	int		3076653	0					
ANR	3076666	Identifier	bytes		3076653	1					
ANR	3076667	IdentifierDecl	max_read_bytes		3076653	1					
ANR	3076668	IdentifierDeclType	int		3076653	0					
ANR	3076669	Identifier	max_read_bytes		3076653	1					
ANR	3076670	IdentifierDecl	max_buffer		3076653	2					
ANR	3076671	IdentifierDeclType	int		3076653	0					
ANR	3076672	Identifier	max_buffer		3076653	1					
ANR	3076673	IdentifierDeclStatement	int pipe_index = 0 ;	11199:1:340366:340384	3076653	2	True				
ANR	3076674	IdentifierDecl	pipe_index = 0		3076653	0					
ANR	3076675	IdentifierDeclType	int		3076653	0					
ANR	3076676	Identifier	pipe_index		3076653	1					
ANR	3076677	AssignmentExpression	pipe_index = 0		3076653	2		=			
ANR	3076678	Identifier	pipe_index		3076653	0					
ANR	3076679	PrimaryExpression	0		3076653	1					
ANR	3076680	IdentifierDeclStatement	MyString * cur_buf = NULL ;	11200:1:340387:340411	3076653	3	True				
ANR	3076681	IdentifierDecl	* cur_buf = NULL		3076653	0					
ANR	3076682	IdentifierDeclType	MyString *		3076653	0					
ANR	3076683	Identifier	cur_buf		3076653	1					
ANR	3076684	AssignmentExpression	* cur_buf = NULL		3076653	2		=			
ANR	3076685	Identifier	NULL		3076653	0					
ANR	3076686	Identifier	NULL		3076653	1					
ANR	3076687	IdentifierDeclStatement	const char * pipe_desc = NULL ;	11201:1:340414:340440	3076653	4	True				
ANR	3076688	IdentifierDecl	* pipe_desc = NULL		3076653	0					
ANR	3076689	IdentifierDeclType	const char *		3076653	0					
ANR	3076690	Identifier	pipe_desc		3076653	1					
ANR	3076691	AssignmentExpression	* pipe_desc = NULL		3076653	2		=			
ANR	3076692	Identifier	NULL		3076653	0					
ANR	3076693	Identifier	NULL		3076653	1					
ANR	3076694	IfStatement	if ( std_pipes [ 1 ] == pipe_fd )		3076653	5					
ANR	3076695	Condition	std_pipes [ 1 ] == pipe_fd	11202:5:340447:340469	3076653	0	True				
ANR	3076696	EqualityExpression	std_pipes [ 1 ] == pipe_fd		3076653	0		==			
ANR	3076697	ArrayIndexing	std_pipes [ 1 ]		3076653	0					
ANR	3076698	Identifier	std_pipes		3076653	0					
ANR	3076699	PrimaryExpression	1		3076653	1					
ANR	3076700	Identifier	pipe_fd		3076653	1					
ANR	3076701	CompoundStatement		7:30:187:187	3076653	1					
ANR	3076702	ExpressionStatement	pipe_index = 1	11203:2:340476:340490	3076653	0	True				
ANR	3076703	AssignmentExpression	pipe_index = 1		3076653	0		=			
ANR	3076704	Identifier	pipe_index		3076653	0					
ANR	3076705	PrimaryExpression	1		3076653	1					
ANR	3076706	ExpressionStatement	"pipe_desc = ""stdout"""	11204:2:340494:340514	3076653	1	True				
ANR	3076707	AssignmentExpression	"pipe_desc = ""stdout"""		3076653	0		=			
ANR	3076708	Identifier	pipe_desc		3076653	0					
ANR	3076709	PrimaryExpression	"""stdout"""		3076653	1					
ANR	3076710	ElseStatement	else		3076653	0					
ANR	3076711	IfStatement	if ( std_pipes [ 2 ] == pipe_fd )		3076653	0					
ANR	3076712	Condition	std_pipes [ 2 ] == pipe_fd	11206:10:340529:340551	3076653	0	True				
ANR	3076713	EqualityExpression	std_pipes [ 2 ] == pipe_fd		3076653	0		==			
ANR	3076714	ArrayIndexing	std_pipes [ 2 ]		3076653	0					
ANR	3076715	Identifier	std_pipes		3076653	0					
ANR	3076716	PrimaryExpression	2		3076653	1					
ANR	3076717	Identifier	pipe_fd		3076653	1					
ANR	3076718	CompoundStatement		11:35:269:269	3076653	1					
ANR	3076719	ExpressionStatement	pipe_index = 2	11207:2:340558:340572	3076653	0	True				
ANR	3076720	AssignmentExpression	pipe_index = 2		3076653	0		=			
ANR	3076721	Identifier	pipe_index		3076653	0					
ANR	3076722	PrimaryExpression	2		3076653	1					
ANR	3076723	ExpressionStatement	"pipe_desc = ""stderr"""	11208:2:340576:340596	3076653	1	True				
ANR	3076724	AssignmentExpression	"pipe_desc = ""stderr"""		3076653	0		=			
ANR	3076725	Identifier	pipe_desc		3076653	0					
ANR	3076726	PrimaryExpression	"""stderr"""		3076653	1					
ANR	3076727	ElseStatement	else		3076653	0					
ANR	3076728	CompoundStatement		15:6:322:322	3076653	0					
ANR	3076729	ExpressionStatement	"EXCEPT ( ""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"" , ( int ) pid , pipe_fd )"	11211:2:340611:340704	3076653	0	True				
ANR	3076730	CallExpression	"EXCEPT ( ""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"" , ( int ) pid , pipe_fd )"		3076653	0					
ANR	3076731	Callee	EXCEPT		3076653	0					
ANR	3076732	Identifier	EXCEPT		3076653	0					
ANR	3076733	ArgumentList	"""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"""		3076653	1					
ANR	3076734	Argument	"""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"""		3076653	0					
ANR	3076735	PrimaryExpression	"""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"""		3076653	0					
ANR	3076736	Argument	( int ) pid		3076653	1					
ANR	3076737	CastExpression	( int ) pid		3076653	0					
ANR	3076738	CastTarget	int		3076653	0					
ANR	3076739	Identifier	pid		3076653	1					
ANR	3076740	Argument	pipe_fd		3076653	2					
ANR	3076741	Identifier	pipe_fd		3076653	0					
ANR	3076742	IfStatement	if ( pipe_buf [ pipe_index ] == NULL )		3076653	6					
ANR	3076743	Condition	pipe_buf [ pipe_index ] == NULL	11215:5:340715:340742	3076653	0	True				
ANR	3076744	EqualityExpression	pipe_buf [ pipe_index ] == NULL		3076653	0		==			
ANR	3076745	ArrayIndexing	pipe_buf [ pipe_index ]		3076653	0					
ANR	3076746	Identifier	pipe_buf		3076653	0					
ANR	3076747	Identifier	pipe_index		3076653	1					
ANR	3076748	Identifier	NULL		3076653	1					
ANR	3076749	CompoundStatement		20:35:460:460	3076653	1					
ANR	3076750	Statement	pipe_buf	11217:2:340796:340803	3076653	0	True				
ANR	3076751	Statement	[	11217:10:340804:340804	3076653	1	True				
ANR	3076752	Statement	pipe_index	11217:11:340805:340814	3076653	2	True				
ANR	3076753	Statement	]	11217:21:340815:340815	3076653	3	True				
ANR	3076754	Statement	=	11217:23:340817:340817	3076653	4	True				
ANR	3076755	Statement	new	11217:25:340819:340821	3076653	5	True				
ANR	3076756	ExpressionStatement	MyString	11217:29:340823:340831	3076653	6	True				
ANR	3076757	Identifier	MyString		3076653	0					
ANR	3076758	ExpressionStatement	cur_buf = pipe_buf [ pipe_index ]	11219:1:340837:340867	3076653	7	True				
ANR	3076759	AssignmentExpression	cur_buf = pipe_buf [ pipe_index ]		3076653	0		=			
ANR	3076760	Identifier	cur_buf		3076653	0					
ANR	3076761	ArrayIndexing	pipe_buf [ pipe_index ]		3076653	1					
ANR	3076762	Identifier	pipe_buf		3076653	0					
ANR	3076763	Identifier	pipe_index		3076653	1					
ANR	3076764	ExpressionStatement	max_buffer = daemonCore -> Get_Max_Pipe_Buffer ( )	11222:1:340938:340984	3076653	8	True				
ANR	3076765	AssignmentExpression	max_buffer = daemonCore -> Get_Max_Pipe_Buffer ( )		3076653	0		=			
ANR	3076766	Identifier	max_buffer		3076653	0					
ANR	3076767	CallExpression	daemonCore -> Get_Max_Pipe_Buffer ( )		3076653	1					
ANR	3076768	Callee	daemonCore -> Get_Max_Pipe_Buffer		3076653	0					
ANR	3076769	PtrMemberAccess	daemonCore -> Get_Max_Pipe_Buffer		3076653	0					
ANR	3076770	Identifier	daemonCore		3076653	0					
ANR	3076771	Identifier	Get_Max_Pipe_Buffer		3076653	1					
ANR	3076772	ArgumentList			3076653	1					
ANR	3076773	ExpressionStatement	max_read_bytes = max_buffer - cur_buf -> Length ( )	11224:1:340988:341035	3076653	9	True				
ANR	3076774	AssignmentExpression	max_read_bytes = max_buffer - cur_buf -> Length ( )		3076653	0		=			
ANR	3076775	Identifier	max_read_bytes		3076653	0					
ANR	3076776	AdditiveExpression	max_buffer - cur_buf -> Length ( )		3076653	1		-			
ANR	3076777	Identifier	max_buffer		3076653	0					
ANR	3076778	CallExpression	cur_buf -> Length ( )		3076653	1					
ANR	3076779	Callee	cur_buf -> Length		3076653	0					
ANR	3076780	PtrMemberAccess	cur_buf -> Length		3076653	0					
ANR	3076781	Identifier	cur_buf		3076653	0					
ANR	3076782	Identifier	Length		3076653	1					
ANR	3076783	ArgumentList			3076653	1					
ANR	3076784	IfStatement	if ( max_read_bytes > DC_PIPE_BUF_SIZE )		3076653	10					
ANR	3076785	Condition	max_read_bytes > DC_PIPE_BUF_SIZE	11225:5:341042:341074	3076653	0	True				
ANR	3076786	RelationalExpression	max_read_bytes > DC_PIPE_BUF_SIZE		3076653	0		>			
ANR	3076787	Identifier	max_read_bytes		3076653	0					
ANR	3076788	Identifier	DC_PIPE_BUF_SIZE		3076653	1					
ANR	3076789	CompoundStatement		30:40:792:792	3076653	1					
ANR	3076790	ExpressionStatement	max_read_bytes = DC_PIPE_BUF_SIZE	11226:2:341081:341114	3076653	0	True				
ANR	3076791	AssignmentExpression	max_read_bytes = DC_PIPE_BUF_SIZE		3076653	0		=			
ANR	3076792	Identifier	max_read_bytes		3076653	0					
ANR	3076793	Identifier	DC_PIPE_BUF_SIZE		3076653	1					
ANR	3076794	ExpressionStatement	"bytes = daemonCore -> Read_Pipe ( pipe_fd , buf , max_read_bytes )"	11229:1:341121:341180	3076653	11	True				
ANR	3076795	AssignmentExpression	"bytes = daemonCore -> Read_Pipe ( pipe_fd , buf , max_read_bytes )"		3076653	0		=			
ANR	3076796	Identifier	bytes		3076653	0					
ANR	3076797	CallExpression	"daemonCore -> Read_Pipe ( pipe_fd , buf , max_read_bytes )"		3076653	1					
ANR	3076798	Callee	daemonCore -> Read_Pipe		3076653	0					
ANR	3076799	PtrMemberAccess	daemonCore -> Read_Pipe		3076653	0					
ANR	3076800	Identifier	daemonCore		3076653	0					
ANR	3076801	Identifier	Read_Pipe		3076653	1					
ANR	3076802	ArgumentList	pipe_fd		3076653	1					
ANR	3076803	Argument	pipe_fd		3076653	0					
ANR	3076804	Identifier	pipe_fd		3076653	0					
ANR	3076805	Argument	buf		3076653	1					
ANR	3076806	Identifier	buf		3076653	0					
ANR	3076807	Argument	max_read_bytes		3076653	2					
ANR	3076808	Identifier	max_read_bytes		3076653	0					
ANR	3076809	IfStatement	if ( bytes > 0 )		3076653	12					
ANR	3076810	Condition	bytes > 0	11230:5:341187:341195	3076653	0	True				
ANR	3076811	RelationalExpression	bytes > 0		3076653	0		>			
ANR	3076812	Identifier	bytes		3076653	0					
ANR	3076813	PrimaryExpression	0		3076653	1					
ANR	3076814	CompoundStatement		35:16:913:913	3076653	1					
ANR	3076815	ExpressionStatement	buf [ bytes ] = '\\0'	11235:2:341440:341457	3076653	0	True				
ANR	3076816	AssignmentExpression	buf [ bytes ] = '\\0'		3076653	0		=			
ANR	3076817	ArrayIndexing	buf [ bytes ]		3076653	0					
ANR	3076818	Identifier	buf		3076653	0					
ANR	3076819	Identifier	bytes		3076653	1					
ANR	3076820	PrimaryExpression	'\\0'		3076653	1					
ANR	3076821	ExpressionStatement	* cur_buf += buf	11236:2:341461:341476	3076653	1	True				
ANR	3076822	AssignmentExpression	* cur_buf += buf		3076653	0		+=			
ANR	3076823	UnaryOperationExpression	* cur_buf		3076653	0					
ANR	3076824	UnaryOperator	*		3076653	0					
ANR	3076825	Identifier	cur_buf		3076653	1					
ANR	3076826	Identifier	buf		3076653	1					
ANR	3076827	IfStatement	if ( cur_buf -> Length ( ) >= max_buffer )		3076653	2					
ANR	3076828	Condition	cur_buf -> Length ( ) >= max_buffer	11238:6:341485:341515	3076653	0	True				
ANR	3076829	RelationalExpression	cur_buf -> Length ( ) >= max_buffer		3076653	0		>=			
ANR	3076830	CallExpression	cur_buf -> Length ( )		3076653	0					
ANR	3076831	Callee	cur_buf -> Length		3076653	0					
ANR	3076832	PtrMemberAccess	cur_buf -> Length		3076653	0					
ANR	3076833	Identifier	cur_buf		3076653	0					
ANR	3076834	Identifier	Length		3076653	1					
ANR	3076835	ArgumentList			3076653	1					
ANR	3076836	Identifier	max_buffer		3076653	1					
ANR	3076837	CompoundStatement		43:39:1233:1233	3076653	1					
ANR	3076838	Statement	dprintf	11239:3:341523:341529	3076653	0	True				
ANR	3076839	Statement	(	11239:10:341530:341530	3076653	1	True				
ANR	3076840	Statement	D_DAEMONCORE	11239:11:341531:341542	3076653	2	True				
ANR	3076841	Statement	","	11239:23:341543:341543	3076653	3	True				
ANR	3076842	Statement	"""DC %s pipe closed for """	11239:25:341545:341568	3076653	4	True				
ANR	3076843	Statement	"""pid %d because max bytes (%d)"""	11240:5:341575:341605	3076653	5	True				
ANR	3076844	Statement	"""read\\n"""	11241:5:341612:341619	3076653	6	True				
ANR	3076845	Statement	","	11241:13:341620:341620	3076653	7	True				
ANR	3076846	Statement	pipe_desc	11241:15:341622:341630	3076653	8	True				
ANR	3076847	Statement	","	11241:24:341631:341631	3076653	9	True				
ANR	3076848	Statement	(	11241:26:341633:341633	3076653	10	True				
ANR	3076849	Statement	int	11241:27:341634:341636	3076653	11	True				
ANR	3076850	Statement	)	11241:30:341637:341637	3076653	12	True				
ANR	3076851	Statement	pid	11241:31:341638:341640	3076653	13	True				
ANR	3076852	Statement	","	11241:34:341641:341641	3076653	14	True				
ANR	3076853	Statement	max_buffer	11242:5:341648:341657	3076653	15	True				
ANR	3076854	Statement	)	11242:15:341658:341658	3076653	16	True				
ANR	3076855	ExpressionStatement		11242:16:341659:341659	3076653	17	True				
ANR	3076856	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_fd )	11243:3:341664:341695	3076653	18	True				
ANR	3076857	CallExpression	daemonCore -> Close_Pipe ( pipe_fd )		3076653	0					
ANR	3076858	Callee	daemonCore -> Close_Pipe		3076653	0					
ANR	3076859	PtrMemberAccess	daemonCore -> Close_Pipe		3076653	0					
ANR	3076860	Identifier	daemonCore		3076653	0					
ANR	3076861	Identifier	Close_Pipe		3076653	1					
ANR	3076862	ArgumentList	pipe_fd		3076653	1					
ANR	3076863	Argument	pipe_fd		3076653	0					
ANR	3076864	Identifier	pipe_fd		3076653	0					
ANR	3076865	ExpressionStatement	std_pipes [ pipe_index ] = DC_STD_FD_NOPIPE	11244:3:341700:341740	3076653	19	True				
ANR	3076866	AssignmentExpression	std_pipes [ pipe_index ] = DC_STD_FD_NOPIPE		3076653	0		=			
ANR	3076867	ArrayIndexing	std_pipes [ pipe_index ]		3076653	0					
ANR	3076868	Identifier	std_pipes		3076653	0					
ANR	3076869	Identifier	pipe_index		3076653	1					
ANR	3076870	Identifier	DC_STD_FD_NOPIPE		3076653	1					
ANR	3076871	ElseStatement	else		3076653	0					
ANR	3076872	IfStatement	if ( ( bytes < 0 ) && ( ( EWOULDBLOCK != errno ) && ( EAGAIN != errno ) ) )		3076653	0					
ANR	3076873	Condition	( bytes < 0 ) && ( ( EWOULDBLOCK != errno ) && ( EAGAIN != errno ) )	11247:10:341759:341818	3076653	0	True				
ANR	3076874	AndExpression	( bytes < 0 ) && ( ( EWOULDBLOCK != errno ) && ( EAGAIN != errno ) )		3076653	0		&&			
ANR	3076875	RelationalExpression	bytes < 0		3076653	0		<			
ANR	3076876	Identifier	bytes		3076653	0					
ANR	3076877	PrimaryExpression	0		3076653	1					
ANR	3076878	AndExpression	( EWOULDBLOCK != errno ) && ( EAGAIN != errno )		3076653	1		&&			
ANR	3076879	EqualityExpression	EWOULDBLOCK != errno		3076653	0		!=			
ANR	3076880	Identifier	EWOULDBLOCK		3076653	0					
ANR	3076881	Identifier	errno		3076653	1					
ANR	3076882	EqualityExpression	EAGAIN != errno		3076653	1		!=			
ANR	3076883	Identifier	EAGAIN		3076653	0					
ANR	3076884	Identifier	errno		3076653	1					
ANR	3076885	CompoundStatement		52:72:1536:1536	3076653	1					
ANR	3076886	Statement	dprintf	11250:2:341907:341913	3076653	0	True				
ANR	3076887	Statement	(	11250:9:341914:341914	3076653	1	True				
ANR	3076888	Statement	D_ALWAYS	11250:10:341915:341922	3076653	2	True				
ANR	3076889	Statement	|	11250:18:341923:341923	3076653	3	True				
ANR	3076890	Statement	D_FAILURE	11250:19:341924:341932	3076653	4	True				
ANR	3076891	Statement	","	11250:28:341933:341933	3076653	5	True				
ANR	3076892	Statement	"""DC pipeHandler: """	11250:30:341935:341952	3076653	6	True				
ANR	3076893	Statement	"""read %s failed for pid %d: '%s' (errno: %d)\\n"""	11251:4:341958:342004	3076653	7	True				
ANR	3076894	Statement	","	11251:51:342005:342005	3076653	8	True				
ANR	3076895	Statement	pipe_desc	11252:4:342011:342019	3076653	9	True				
ANR	3076896	Statement	","	11252:13:342020:342020	3076653	10	True				
ANR	3076897	Statement	(	11252:15:342022:342022	3076653	11	True				
ANR	3076898	Statement	int	11252:16:342023:342025	3076653	12	True				
ANR	3076899	Statement	)	11252:19:342026:342026	3076653	13	True				
ANR	3076900	Statement	pid	11252:20:342027:342029	3076653	14	True				
ANR	3076901	Statement	","	11252:23:342030:342030	3076653	15	True				
ANR	3076902	Statement	strerror	11252:25:342032:342039	3076653	16	True				
ANR	3076903	Statement	(	11252:33:342040:342040	3076653	17	True				
ANR	3076904	Statement	errno	11252:34:342041:342045	3076653	18	True				
ANR	3076905	Statement	)	11252:39:342046:342046	3076653	19	True				
ANR	3076906	Statement	","	11252:40:342047:342047	3076653	20	True				
ANR	3076907	Statement	errno	11252:42:342049:342053	3076653	21	True				
ANR	3076908	Statement	)	11252:47:342054:342054	3076653	22	True				
ANR	3076909	ExpressionStatement		11252:48:342055:342055	3076653	23	True				
ANR	3076910	ReturnStatement	return FALSE ;	11253:2:342059:342071	3076653	24	True				
ANR	3076911	Identifier	FALSE		3076653	0					
ANR	3076912	ReturnStatement	return TRUE ;	11255:1:342077:342088	3076653	13	True				
ANR	3076913	Identifier	TRUE		3076653	0					
ANR	3076914	ReturnType	int		3076653	1					
ANR	3076915	Identifier	DaemonCore :: PidEntry :: pipeHandler		3076653	2					
ANR	3076916	ParameterList	int pipe_fd		3076653	3					
ANR	3076917	Parameter	int pipe_fd	11196:34:340271:340281	3076653	0	True				
ANR	3076918	ParameterType	int		3076653	0					
ANR	3076919	Identifier	pipe_fd		3076653	1					
ANR	3076920	CFGEntryNode	ENTRY		3076653		True				
ANR	3076921	CFGExitNode	EXIT		3076653		True				
ANR	3076922	Symbol	std_pipes		3076653						
ANR	3076923	Symbol	pid		3076653						
ANR	3076924	Symbol	pipe_desc		3076653						
ANR	3076925	Symbol	* bytes		3076653						
ANR	3076926	Symbol	DC_PIPE_BUF_SIZE		3076653						
ANR	3076927	Symbol	* std_pipes		3076653						
ANR	3076928	Symbol	cur_buf		3076653						
ANR	3076929	Symbol	daemonCore		3076653						
ANR	3076930	Symbol	max_read_bytes		3076653						
ANR	3076931	Symbol	DC_STD_FD_NOPIPE		3076653						
ANR	3076932	Symbol	pipe_index		3076653						
ANR	3076933	Symbol	* buf		3076653						
ANR	3076934	Symbol	errno		3076653						
ANR	3076935	Symbol	NULL		3076653						
ANR	3076936	Symbol	cur_buf -> Length		3076653						
ANR	3076937	Symbol	* pipe_index		3076653						
ANR	3076938	Symbol	EAGAIN		3076653						
ANR	3076939	Symbol	TRUE		3076653						
ANR	3076940	Symbol	pipe_buf		3076653						
ANR	3076941	Symbol	pipe_fd		3076653						
ANR	3076942	Symbol	max_buffer		3076653						
ANR	3076943	Symbol	buf		3076653						
ANR	3076944	Symbol	daemonCore -> Read_Pipe		3076653						
ANR	3076945	Symbol	bytes		3076653						
ANR	3076946	Symbol	* daemonCore		3076653						
ANR	3076947	Symbol	EWOULDBLOCK		3076653						
ANR	3076948	Symbol	FALSE		3076653						
ANR	3076949	Symbol	* cur_buf		3076653						
ANR	3076950	Symbol	* pipe_buf		3076653						
ANR	3076951	Symbol	daemonCore -> Get_Max_Pipe_Buffer		3076653						
ANR	3076952	Function	DaemonCore :: PidEntry :: pipeFullWrite	11259:0:342094:343401							
ANR	3076953	FunctionDef	DaemonCore :: PidEntry :: pipeFullWrite (int fd)		3076952	0					
ANR	3076954	CompoundStatement		11261:0:342142:343401	3076952	0					
ANR	3076955	IdentifierDeclStatement	int bytes_written = 0 ;	11262:1:342145:342166	3076952	0	True				
ANR	3076956	IdentifierDecl	bytes_written = 0		3076952	0					
ANR	3076957	IdentifierDeclType	int		3076952	0					
ANR	3076958	Identifier	bytes_written		3076952	1					
ANR	3076959	AssignmentExpression	bytes_written = 0		3076952	2		=			
ANR	3076960	Identifier	bytes_written		3076952	0					
ANR	3076961	PrimaryExpression	0		3076952	1					
ANR	3076962	IdentifierDeclStatement	void * data_left = NULL ;	11263:1:342169:342191	3076952	1	True				
ANR	3076963	IdentifierDecl	* data_left = NULL		3076952	0					
ANR	3076964	IdentifierDeclType	void *		3076952	0					
ANR	3076965	Identifier	data_left		3076952	1					
ANR	3076966	AssignmentExpression	* data_left = NULL		3076952	2		=			
ANR	3076967	Identifier	NULL		3076952	0					
ANR	3076968	Identifier	NULL		3076952	1					
ANR	3076969	IdentifierDeclStatement	int total_len = 0 ;	11264:1:342194:342211	3076952	2	True				
ANR	3076970	IdentifierDecl	total_len = 0		3076952	0					
ANR	3076971	IdentifierDeclType	int		3076952	0					
ANR	3076972	Identifier	total_len		3076952	1					
ANR	3076973	AssignmentExpression	total_len = 0		3076952	2		=			
ANR	3076974	Identifier	total_len		3076952	0					
ANR	3076975	PrimaryExpression	0		3076952	1					
ANR	3076976	IfStatement	if ( pipe_buf [ 0 ] != NULL )		3076952	3					
ANR	3076977	Condition	pipe_buf [ 0 ] != NULL	11266:5:342219:342237	3076952	0	True				
ANR	3076978	EqualityExpression	pipe_buf [ 0 ] != NULL		3076952	0		!=			
ANR	3076979	ArrayIndexing	pipe_buf [ 0 ]		3076952	0					
ANR	3076980	Identifier	pipe_buf		3076952	0					
ANR	3076981	PrimaryExpression	0		3076952	1					
ANR	3076982	Identifier	NULL		3076952	1					
ANR	3076983	CompoundStatement		7:1:98:98	3076952	1					
ANR	3076984	ExpressionStatement	data_left = ( void * ) ( ( ( const char * ) pipe_buf [ 0 ] -> Value ( ) ) + stdin_offset )	11268:2:342245:342317	3076952	0	True				
ANR	3076985	AssignmentExpression	data_left = ( void * ) ( ( ( const char * ) pipe_buf [ 0 ] -> Value ( ) ) + stdin_offset )		3076952	0		=			
ANR	3076986	Identifier	data_left		3076952	0					
ANR	3076987	CastExpression	( void * ) ( ( ( const char * ) pipe_buf [ 0 ] -> Value ( ) ) + stdin_offset )		3076952	1					
ANR	3076988	CastTarget	void *		3076952	0					
ANR	3076989	AdditiveExpression	( ( const char * ) pipe_buf [ 0 ] -> Value ( ) ) + stdin_offset		3076952	1		+			
ANR	3076990	CastExpression	( const char * ) pipe_buf [ 0 ] -> Value ( )		3076952	0					
ANR	3076991	CastTarget	const char *		3076952	0					
ANR	3076992	CallExpression	pipe_buf [ 0 ] -> Value ( )		3076952	1					
ANR	3076993	Callee	pipe_buf [ 0 ] -> Value		3076952	0					
ANR	3076994	PtrMemberAccess	pipe_buf [ 0 ] -> Value		3076952	0					
ANR	3076995	ArrayIndexing	pipe_buf [ 0 ]		3076952	0					
ANR	3076996	Identifier	pipe_buf		3076952	0					
ANR	3076997	PrimaryExpression	0		3076952	1					
ANR	3076998	Identifier	Value		3076952	1					
ANR	3076999	ArgumentList			3076952	1					
ANR	3077000	Identifier	stdin_offset		3076952	1					
ANR	3077001	ExpressionStatement	total_len = pipe_buf [ 0 ] -> Length ( )	11269:2:342321:342354	3076952	1	True				
ANR	3077002	AssignmentExpression	total_len = pipe_buf [ 0 ] -> Length ( )		3076952	0		=			
ANR	3077003	Identifier	total_len		3076952	0					
ANR	3077004	CallExpression	pipe_buf [ 0 ] -> Length ( )		3076952	1					
ANR	3077005	Callee	pipe_buf [ 0 ] -> Length		3076952	0					
ANR	3077006	PtrMemberAccess	pipe_buf [ 0 ] -> Length		3076952	0					
ANR	3077007	ArrayIndexing	pipe_buf [ 0 ]		3076952	0					
ANR	3077008	Identifier	pipe_buf		3076952	0					
ANR	3077009	PrimaryExpression	0		3076952	1					
ANR	3077010	Identifier	Length		3076952	1					
ANR	3077011	ArgumentList			3076952	1					
ANR	3077012	ExpressionStatement	"bytes_written = daemonCore -> Write_Pipe ( fd , data_left , total_len - stdin_offset )"	11270:2:342358:342437	3076952	2	True				
ANR	3077013	AssignmentExpression	"bytes_written = daemonCore -> Write_Pipe ( fd , data_left , total_len - stdin_offset )"		3076952	0		=			
ANR	3077014	Identifier	bytes_written		3076952	0					
ANR	3077015	CallExpression	"daemonCore -> Write_Pipe ( fd , data_left , total_len - stdin_offset )"		3076952	1					
ANR	3077016	Callee	daemonCore -> Write_Pipe		3076952	0					
ANR	3077017	PtrMemberAccess	daemonCore -> Write_Pipe		3076952	0					
ANR	3077018	Identifier	daemonCore		3076952	0					
ANR	3077019	Identifier	Write_Pipe		3076952	1					
ANR	3077020	ArgumentList	fd		3076952	1					
ANR	3077021	Argument	fd		3076952	0					
ANR	3077022	Identifier	fd		3076952	0					
ANR	3077023	Argument	data_left		3076952	1					
ANR	3077024	Identifier	data_left		3076952	0					
ANR	3077025	Argument	total_len - stdin_offset		3076952	2					
ANR	3077026	AdditiveExpression	total_len - stdin_offset		3076952	0		-			
ANR	3077027	Identifier	total_len		3076952	0					
ANR	3077028	Identifier	stdin_offset		3076952	1					
ANR	3077029	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore::PidEntry::pipeFullWrite: Total bytes to write = %d, bytes written this pass = %d\\n"" , total_len , bytes_written )"	11271:2:342441:342586	3076952	3	True				
ANR	3077030	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore::PidEntry::pipeFullWrite: Total bytes to write = %d, bytes written this pass = %d\\n"" , total_len , bytes_written )"		3076952	0					
ANR	3077031	Callee	dprintf		3076952	0					
ANR	3077032	Identifier	dprintf		3076952	0					
ANR	3077033	ArgumentList	D_DAEMONCORE		3076952	1					
ANR	3077034	Argument	D_DAEMONCORE		3076952	0					
ANR	3077035	Identifier	D_DAEMONCORE		3076952	0					
ANR	3077036	Argument	"""DaemonCore::PidEntry::pipeFullWrite: Total bytes to write = %d, bytes written this pass = %d\\n"""		3076952	1					
ANR	3077037	PrimaryExpression	"""DaemonCore::PidEntry::pipeFullWrite: Total bytes to write = %d, bytes written this pass = %d\\n"""		3076952	0					
ANR	3077038	Argument	total_len		3076952	2					
ANR	3077039	Identifier	total_len		3076952	0					
ANR	3077040	Argument	bytes_written		3076952	3					
ANR	3077041	Identifier	bytes_written		3076952	0					
ANR	3077042	IfStatement	if ( 0 <= bytes_written )		3076952	4					
ANR	3077043	Condition	0 <= bytes_written	11274:5:342597:342614	3076952	0	True				
ANR	3077044	RelationalExpression	0 <= bytes_written		3076952	0		<=			
ANR	3077045	PrimaryExpression	0		3076952	0					
ANR	3077046	Identifier	bytes_written		3076952	1					
ANR	3077047	CompoundStatement		15:1:475:475	3076952	1					
ANR	3077048	ExpressionStatement	stdin_offset = stdin_offset + bytes_written	11276:2:342622:342665	3076952	0	True				
ANR	3077049	AssignmentExpression	stdin_offset = stdin_offset + bytes_written		3076952	0		=			
ANR	3077050	Identifier	stdin_offset		3076952	0					
ANR	3077051	AdditiveExpression	stdin_offset + bytes_written		3076952	1		+			
ANR	3077052	Identifier	stdin_offset		3076952	0					
ANR	3077053	Identifier	bytes_written		3076952	1					
ANR	3077054	IfStatement	if ( ( stdin_offset == total_len ) || ( pipe_buf [ 0 ] == NULL ) )		3076952	1					
ANR	3077055	Condition	( stdin_offset == total_len ) || ( pipe_buf [ 0 ] == NULL )	11277:6:342673:342724	3076952	0	True				
ANR	3077056	OrExpression	( stdin_offset == total_len ) || ( pipe_buf [ 0 ] == NULL )		3076952	0		||			
ANR	3077057	EqualityExpression	stdin_offset == total_len		3076952	0		==			
ANR	3077058	Identifier	stdin_offset		3076952	0					
ANR	3077059	Identifier	total_len		3076952	1					
ANR	3077060	EqualityExpression	pipe_buf [ 0 ] == NULL		3076952	1		==			
ANR	3077061	ArrayIndexing	pipe_buf [ 0 ]		3076952	0					
ANR	3077062	Identifier	pipe_buf		3076952	0					
ANR	3077063	PrimaryExpression	0		3076952	1					
ANR	3077064	Identifier	NULL		3076952	1					
ANR	3077065	CompoundStatement		18:2:586:586	3076952	1					
ANR	3077066	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore::PidEntry::pipeFullWrite: Closing Stdin Pipe\\n"" )"	11279:3:342734:342816	3076952	0	True				
ANR	3077067	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore::PidEntry::pipeFullWrite: Closing Stdin Pipe\\n"" )"		3076952	0					
ANR	3077068	Callee	dprintf		3076952	0					
ANR	3077069	Identifier	dprintf		3076952	0					
ANR	3077070	ArgumentList	D_DAEMONCORE		3076952	1					
ANR	3077071	Argument	D_DAEMONCORE		3076952	0					
ANR	3077072	Identifier	D_DAEMONCORE		3076952	0					
ANR	3077073	Argument	"""DaemonCore::PidEntry::pipeFullWrite: Closing Stdin Pipe\\n"""		3076952	1					
ANR	3077074	PrimaryExpression	"""DaemonCore::PidEntry::pipeFullWrite: Closing Stdin Pipe\\n"""		3076952	0					
ANR	3077075	ExpressionStatement	daemonCore -> Close_Stdin_Pipe ( pid )	11281:3:342865:342898	3076952	1	True				
ANR	3077076	CallExpression	daemonCore -> Close_Stdin_Pipe ( pid )		3076952	0					
ANR	3077077	Callee	daemonCore -> Close_Stdin_Pipe		3076952	0					
ANR	3077078	PtrMemberAccess	daemonCore -> Close_Stdin_Pipe		3076952	0					
ANR	3077079	Identifier	daemonCore		3076952	0					
ANR	3077080	Identifier	Close_Stdin_Pipe		3076952	1					
ANR	3077081	ArgumentList	pid		3076952	1					
ANR	3077082	Argument	pid		3076952	0					
ANR	3077083	Identifier	pid		3076952	0					
ANR	3077084	ElseStatement	else		3076952	0					
ANR	3077085	IfStatement	if ( errno != EINTR && errno != EAGAIN )		3076952	0					
ANR	3077086	Condition	errno != EINTR && errno != EAGAIN	11284:10:342917:342949	3076952	0	True				
ANR	3077087	AndExpression	errno != EINTR && errno != EAGAIN		3076952	0		&&			
ANR	3077088	EqualityExpression	errno != EINTR		3076952	0		!=			
ANR	3077089	Identifier	errno		3076952	0					
ANR	3077090	Identifier	EINTR		3076952	1					
ANR	3077091	EqualityExpression	errno != EAGAIN		3076952	1		!=			
ANR	3077092	Identifier	errno		3076952	0					
ANR	3077093	Identifier	EAGAIN		3076952	1					
ANR	3077094	CompoundStatement		25:1:810:810	3076952	1					
ANR	3077095	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore::PidEntry::pipeFullWrite: Unable to write to fd %d (errno = %d).  Aborting write attempts.\\n"" , fd , errno )"	11288:2:343055:343190	3076952	0	True				
ANR	3077096	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore::PidEntry::pipeFullWrite: Unable to write to fd %d (errno = %d).  Aborting write attempts.\\n"" , fd , errno )"		3076952	0					
ANR	3077097	Callee	dprintf		3076952	0					
ANR	3077098	Identifier	dprintf		3076952	0					
ANR	3077099	ArgumentList	D_ALWAYS		3076952	1					
ANR	3077100	Argument	D_ALWAYS		3076952	0					
ANR	3077101	Identifier	D_ALWAYS		3076952	0					
ANR	3077102	Argument	"""DaemonCore::PidEntry::pipeFullWrite: Unable to write to fd %d (errno = %d).  Aborting write attempts.\\n"""		3076952	1					
ANR	3077103	PrimaryExpression	"""DaemonCore::PidEntry::pipeFullWrite: Unable to write to fd %d (errno = %d).  Aborting write attempts.\\n"""		3076952	0					
ANR	3077104	Argument	fd		3076952	2					
ANR	3077105	Identifier	fd		3076952	0					
ANR	3077106	Argument	errno		3076952	3					
ANR	3077107	Identifier	errno		3076952	0					
ANR	3077108	ExpressionStatement	daemonCore -> Close_Stdin_Pipe ( pid )	11289:2:343194:343227	3076952	1	True				
ANR	3077109	CallExpression	daemonCore -> Close_Stdin_Pipe ( pid )		3076952	0					
ANR	3077110	Callee	daemonCore -> Close_Stdin_Pipe		3076952	0					
ANR	3077111	PtrMemberAccess	daemonCore -> Close_Stdin_Pipe		3076952	0					
ANR	3077112	Identifier	daemonCore		3076952	0					
ANR	3077113	Identifier	Close_Stdin_Pipe		3076952	1					
ANR	3077114	ArgumentList	pid		3076952	1					
ANR	3077115	Argument	pid		3076952	0					
ANR	3077116	Identifier	pid		3076952	0					
ANR	3077117	ElseStatement	else		3076952	0					
ANR	3077118	CompoundStatement		32:1:1096:1096	3076952	0					
ANR	3077119	ExpressionStatement	"dprintf ( D_DAEMONCORE | D_FULLDEBUG , ""DaemonCore::PidEntry::pipeFullWrite: Failed to write to fd %d (errno = %d).  Will try again.\\n"" , fd , errno )"	11293:2:343243:343385	3076952	0	True				
ANR	3077120	CallExpression	"dprintf ( D_DAEMONCORE | D_FULLDEBUG , ""DaemonCore::PidEntry::pipeFullWrite: Failed to write to fd %d (errno = %d).  Will try again.\\n"" , fd , errno )"		3076952	0					
ANR	3077121	Callee	dprintf		3076952	0					
ANR	3077122	Identifier	dprintf		3076952	0					
ANR	3077123	ArgumentList	D_DAEMONCORE | D_FULLDEBUG		3076952	1					
ANR	3077124	Argument	D_DAEMONCORE | D_FULLDEBUG		3076952	0					
ANR	3077125	InclusiveOrExpression	D_DAEMONCORE | D_FULLDEBUG		3076952	0		|			
ANR	3077126	Identifier	D_DAEMONCORE		3076952	0					
ANR	3077127	Identifier	D_FULLDEBUG		3076952	1					
ANR	3077128	Argument	"""DaemonCore::PidEntry::pipeFullWrite: Failed to write to fd %d (errno = %d).  Will try again.\\n"""		3076952	1					
ANR	3077129	PrimaryExpression	"""DaemonCore::PidEntry::pipeFullWrite: Failed to write to fd %d (errno = %d).  Will try again.\\n"""		3076952	0					
ANR	3077130	Argument	fd		3076952	2					
ANR	3077131	Identifier	fd		3076952	0					
ANR	3077132	Argument	errno		3076952	3					
ANR	3077133	Identifier	errno		3076952	0					
ANR	3077134	ReturnStatement	return 0 ;	11295:1:343391:343399	3076952	5	True				
ANR	3077135	PrimaryExpression	0		3076952	0					
ANR	3077136	ReturnType	int		3076952	1					
ANR	3077137	Identifier	DaemonCore :: PidEntry :: pipeFullWrite		3076952	2					
ANR	3077138	ParameterList	int fd		3076952	3					
ANR	3077139	Parameter	int fd	11260:36:342134:342139	3076952	0	True				
ANR	3077140	ParameterType	int		3076952	0					
ANR	3077141	Identifier	fd		3076952	1					
ANR	3077142	CFGEntryNode	ENTRY		3076952		True				
ANR	3077143	CFGExitNode	EXIT		3076952		True				
ANR	3077144	Symbol	errno		3076952						
ANR	3077145	Symbol	NULL		3076952						
ANR	3077146	Symbol	D_DAEMONCORE		3076952						
ANR	3077147	Symbol	total_len		3076952						
ANR	3077148	Symbol	EINTR		3076952						
ANR	3077149	Symbol	EAGAIN		3076952						
ANR	3077150	Symbol	D_ALWAYS		3076952						
ANR	3077151	Symbol	pid		3076952						
ANR	3077152	Symbol	D_FULLDEBUG		3076952						
ANR	3077153	Symbol	* * pipe_buf		3076952						
ANR	3077154	Symbol	pipe_buf		3076952						
ANR	3077155	Symbol	data_left		3076952						
ANR	3077156	Symbol	bytes_written		3076952						
ANR	3077157	Symbol	stdin_offset		3076952						
ANR	3077158	Symbol	pipe_buf [ 0 ] -> Length		3076952						
ANR	3077159	Symbol	* daemonCore		3076952						
ANR	3077160	Symbol	daemonCore		3076952						
ANR	3077161	Symbol	daemonCore -> Write_Pipe		3076952						
ANR	3077162	Symbol	fd		3076952						
ANR	3077163	Symbol	* pipe_buf		3076952						
ANR	3077164	Symbol	pipe_buf [ 0 ] -> Value		3076952						
ANR	3077165	Function	DaemonCore :: send_invalidate_session	11298:0:343404:344033							
ANR	3077166	FunctionDef	"DaemonCore :: send_invalidate_session (const char * sinful , const char * sessid)"		3077165	0					
ANR	3077167	CompoundStatement		11298:84:343488:344033	3077165	0					
ANR	3077168	IfStatement	if ( ! sinful )		3077165	0					
ANR	3077169	Condition	! sinful	11299:6:343496:343502	3077165	0	True				
ANR	3077170	UnaryOperationExpression	! sinful		3077165	0					
ANR	3077171	UnaryOperator	!		3077165	0					
ANR	3077172	Identifier	sinful		3077165	1					
ANR	3077173	CompoundStatement		2:16:17:17	3077165	1					
ANR	3077174	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: couldn't invalidate session %s... don't know who it is from!\\n"" , sessid )"	11300:2:343510:343621	3077165	0	True				
ANR	3077175	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: couldn't invalidate session %s... don't know who it is from!\\n"" , sessid )"		3077165	0					
ANR	3077176	Callee	dprintf		3077165	0					
ANR	3077177	Identifier	dprintf		3077165	0					
ANR	3077178	ArgumentList	D_SECURITY		3077165	1					
ANR	3077179	Argument	D_SECURITY		3077165	0					
ANR	3077180	Identifier	D_SECURITY		3077165	0					
ANR	3077181	Argument	"""DC_AUTHENTICATE: couldn't invalidate session %s... don't know who it is from!\\n"""		3077165	1					
ANR	3077182	PrimaryExpression	"""DC_AUTHENTICATE: couldn't invalidate session %s... don't know who it is from!\\n"""		3077165	0					
ANR	3077183	Argument	sessid		3077165	2					
ANR	3077184	Identifier	sessid		3077165	0					
ANR	3077185	ReturnStatement	return ;	11301:2:343625:343631	3077165	1	True				
ANR	3077186	IdentifierDeclStatement	"classy_counted_ptr < Daemon > daemon = new Daemon ( DT_ANY , sinful , NULL ) ;"	11304:1:343638:343704	3077165	1	True				
ANR	3077187	IdentifierDecl	"daemon = new Daemon ( DT_ANY , sinful , NULL )"		3077165	0					
ANR	3077188	IdentifierDeclType	classy_counted_ptr < Daemon >		3077165	0					
ANR	3077189	Identifier	daemon		3077165	1					
ANR	3077190	AssignmentExpression	"daemon = new Daemon ( DT_ANY , sinful , NULL )"		3077165	2		=			
ANR	3077191	Identifier	daemon		3077165	0					
ANR	3077192	Expression	"DT_ANY , sinful , NULL"		3077165	1					
ANR	3077193	Identifier	DT_ANY		3077165	0					
ANR	3077194	Expression	"sinful , NULL"		3077165	1					
ANR	3077195	Identifier	sinful		3077165	0					
ANR	3077196	Identifier	NULL		3077165	1					
ANR	3077197	IdentifierDeclStatement	"classy_counted_ptr < DCStringMsg > msg = new DCStringMsg ( DC_INVALIDATE_KEY , sessid ) ;"	11306:1:343708:343794	3077165	2	True				
ANR	3077198	IdentifierDecl	"msg = new DCStringMsg ( DC_INVALIDATE_KEY , sessid )"		3077165	0					
ANR	3077199	IdentifierDeclType	classy_counted_ptr < DCStringMsg >		3077165	0					
ANR	3077200	Identifier	msg		3077165	1					
ANR	3077201	AssignmentExpression	"msg = new DCStringMsg ( DC_INVALIDATE_KEY , sessid )"		3077165	2		=			
ANR	3077202	Identifier	msg		3077165	0					
ANR	3077203	Expression	"DC_INVALIDATE_KEY , sessid"		3077165	1					
ANR	3077204	Identifier	DC_INVALIDATE_KEY		3077165	0					
ANR	3077205	Identifier	sessid		3077165	1					
ANR	3077206	ExpressionStatement	msg -> setSuccessDebugLevel ( D_SECURITY )	11310:1:343798:343835	3077165	3	True				
ANR	3077207	CallExpression	msg -> setSuccessDebugLevel ( D_SECURITY )		3077165	0					
ANR	3077208	Callee	msg -> setSuccessDebugLevel		3077165	0					
ANR	3077209	PtrMemberAccess	msg -> setSuccessDebugLevel		3077165	0					
ANR	3077210	Identifier	msg		3077165	0					
ANR	3077211	Identifier	setSuccessDebugLevel		3077165	1					
ANR	3077212	ArgumentList	D_SECURITY		3077165	1					
ANR	3077213	Argument	D_SECURITY		3077165	0					
ANR	3077214	Identifier	D_SECURITY		3077165	0					
ANR	3077215	ExpressionStatement	msg -> setRawProtocol ( true )	11311:1:343838:343863	3077165	4	True				
ANR	3077216	CallExpression	msg -> setRawProtocol ( true )		3077165	0					
ANR	3077217	Callee	msg -> setRawProtocol		3077165	0					
ANR	3077218	PtrMemberAccess	msg -> setRawProtocol		3077165	0					
ANR	3077219	Identifier	msg		3077165	0					
ANR	3077220	Identifier	setRawProtocol		3077165	1					
ANR	3077221	ArgumentList	true		3077165	1					
ANR	3077222	Argument	true		3077165	0					
ANR	3077223	Identifier	true		3077165	0					
ANR	3077224	IfStatement	if ( m_invalidate_sessions_via_tcp )		3077165	5					
ANR	3077225	Condition	m_invalidate_sessions_via_tcp	11313:5:343871:343899	3077165	0	True				
ANR	3077226	Identifier	m_invalidate_sessions_via_tcp		3077165	0					
ANR	3077227	CompoundStatement		16:37:414:414	3077165	1					
ANR	3077228	ExpressionStatement	msg -> setStreamType ( Stream :: reli_sock )	11314:2:343907:343944	3077165	0	True				
ANR	3077229	CallExpression	msg -> setStreamType ( Stream :: reli_sock )		3077165	0					
ANR	3077230	Callee	msg -> setStreamType		3077165	0					
ANR	3077231	PtrMemberAccess	msg -> setStreamType		3077165	0					
ANR	3077232	Identifier	msg		3077165	0					
ANR	3077233	Identifier	setStreamType		3077165	1					
ANR	3077234	ArgumentList	Stream :: reli_sock		3077165	1					
ANR	3077235	Argument	Stream :: reli_sock		3077165	0					
ANR	3077236	Identifier	Stream :: reli_sock		3077165	0					
ANR	3077237	ElseStatement	else		3077165	0					
ANR	3077238	CompoundStatement		19:6:466:466	3077165	0					
ANR	3077239	ExpressionStatement	msg -> setStreamType ( Stream :: safe_sock )	11317:2:343959:343996	3077165	0	True				
ANR	3077240	CallExpression	msg -> setStreamType ( Stream :: safe_sock )		3077165	0					
ANR	3077241	Callee	msg -> setStreamType		3077165	0					
ANR	3077242	PtrMemberAccess	msg -> setStreamType		3077165	0					
ANR	3077243	Identifier	msg		3077165	0					
ANR	3077244	Identifier	setStreamType		3077165	1					
ANR	3077245	ArgumentList	Stream :: safe_sock		3077165	1					
ANR	3077246	Argument	Stream :: safe_sock		3077165	0					
ANR	3077247	Identifier	Stream :: safe_sock		3077165	0					
ANR	3077248	ExpressionStatement	daemon -> sendMsg ( msg . get ( ) )	11320:1:344003:344031	3077165	6	True				
ANR	3077249	CallExpression	daemon -> sendMsg ( msg . get ( ) )		3077165	0					
ANR	3077250	Callee	daemon -> sendMsg		3077165	0					
ANR	3077251	PtrMemberAccess	daemon -> sendMsg		3077165	0					
ANR	3077252	Identifier	daemon		3077165	0					
ANR	3077253	Identifier	sendMsg		3077165	1					
ANR	3077254	ArgumentList	msg . get ( )		3077165	1					
ANR	3077255	Argument	msg . get ( )		3077165	0					
ANR	3077256	CallExpression	msg . get ( )		3077165	0					
ANR	3077257	Callee	msg . get		3077165	0					
ANR	3077258	MemberAccess	msg . get		3077165	0					
ANR	3077259	Identifier	msg		3077165	0					
ANR	3077260	Identifier	get		3077165	1					
ANR	3077261	ArgumentList			3077165	1					
ANR	3077262	ReturnType	void		3077165	1					
ANR	3077263	Identifier	DaemonCore :: send_invalidate_session		3077165	2					
ANR	3077264	ParameterList	"const char * sinful , const char * sessid"		3077165	3					
ANR	3077265	Parameter	const char * sinful	11298:43:343447:343464	3077165	0	True				
ANR	3077266	ParameterType	const char *		3077165	0					
ANR	3077267	Identifier	sinful		3077165	1					
ANR	3077268	Parameter	const char * sessid	11298:63:343467:343484	3077165	1	True				
ANR	3077269	ParameterType	const char *		3077165	0					
ANR	3077270	Identifier	sessid		3077165	1					
ANR	3077271	CFGEntryNode	ENTRY		3077165		True				
ANR	3077272	CFGExitNode	EXIT		3077165		True				
ANR	3077273	Symbol	msg		3077165						
ANR	3077274	Symbol	NULL		3077165						
ANR	3077275	Symbol	D_SECURITY		3077165						
ANR	3077276	Symbol	Stream :: safe_sock		3077165						
ANR	3077277	Symbol	DT_ANY		3077165						
ANR	3077278	Symbol	sessid		3077165						
ANR	3077279	Symbol	daemon		3077165						
ANR	3077280	Symbol	true		3077165						
ANR	3077281	Symbol	Stream :: reli_sock		3077165						
ANR	3077282	Symbol	msg . get		3077165						
ANR	3077283	Symbol	DC_INVALIDATE_KEY		3077165						
ANR	3077284	Symbol	sinful		3077165						
ANR	3077285	Symbol	m_invalidate_sessions_via_tcp		3077165						
