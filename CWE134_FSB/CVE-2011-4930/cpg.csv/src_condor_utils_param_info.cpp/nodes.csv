command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4831320	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_param_info.cpp								
ANR	4831321	DeclStmt									
ANR	4831322	Decl							bucket_t	bucket_t * *	param_info
ANR	4831323	Function	param_info_init	44:0:1226:1954							
ANR	4831324	FunctionDef	param_info_init ()		4831323	0					
ANR	4831325	CompoundStatement		46:0:1250:1954	4831323	0					
ANR	4831326	Statement	static	47:1:1253:1258	4831323	0	True				
ANR	4831327	IdentifierDeclStatement	int done_once = 0 ;	47:8:1260:1277	4831323	1	True				
ANR	4831328	IdentifierDecl	done_once = 0		4831323	0					
ANR	4831329	IdentifierDeclType	int		4831323	0					
ANR	4831330	Identifier	done_once		4831323	1					
ANR	4831331	AssignmentExpression	done_once = 0		4831323	2		=			
ANR	4831332	Identifier	done_once		4831323	0					
ANR	4831333	PrimaryExpression	0		4831323	1					
ANR	4831334	IfStatement	if ( done_once == 1 )		4831323	2					
ANR	4831335	Condition	done_once == 1	50:5:1350:1363	4831323	0	True				
ANR	4831336	EqualityExpression	done_once == 1		4831323	0		==			
ANR	4831337	Identifier	done_once		4831323	0					
ANR	4831338	PrimaryExpression	1		4831323	1					
ANR	4831339	CompoundStatement		5:21:115:115	4831323	1					
ANR	4831340	ReturnStatement	return ;	51:2:1370:1376	4831323	0	True				
ANR	4831341	ExpressionStatement	done_once = 1	55:1:1428:1441	4831323	3	True				
ANR	4831342	AssignmentExpression	done_once = 1		4831323	0		=			
ANR	4831343	Identifier	done_once		4831323	0					
ANR	4831344	PrimaryExpression	1		4831323	1					
ANR	4831345	ExpressionStatement	param_info_hash_create ( & param_info )	57:1:1445:1480	4831323	4	True				
ANR	4831346	CallExpression	param_info_hash_create ( & param_info )		4831323	0					
ANR	4831347	Callee	param_info_hash_create		4831323	0					
ANR	4831348	Identifier	param_info_hash_create		4831323	0					
ANR	4831349	ArgumentList	& param_info		4831323	1					
ANR	4831350	Argument	& param_info		4831323	0					
ANR	4831351	UnaryOperationExpression	& param_info		4831323	0					
ANR	4831352	UnaryOperator	&		4831323	0					
ANR	4831353	Identifier	param_info		4831323	1					
ANR	4831354	ForStatement	for ( int ii = 0 ; ii < ( int ) ( sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] ) ) ; ++ ii )		4831323	5					
ANR	4831355	ForInit	int ii = 0 ;	63:9:1765:1775	4831323	0	True				
ANR	4831356	IdentifierDeclStatement	int ii = 0 ;		4831323	0					
ANR	4831357	IdentifierDecl	ii = 0		4831323	0					
ANR	4831358	IdentifierDeclType	int		4831323	0					
ANR	4831359	Identifier	ii		4831323	1					
ANR	4831360	AssignmentExpression	ii = 0		4831323	2		=			
ANR	4831361	Identifier	ii		4831323	0					
ANR	4831362	PrimaryExpression	0		4831323	1					
ANR	4831363	Condition	ii < ( int ) ( sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] ) )	63:21:1777:1854	4831323	1	True				
ANR	4831364	RelationalExpression	ii < ( int ) ( sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] ) )		4831323	0		<			
ANR	4831365	Identifier	ii		4831323	0					
ANR	4831366	CastExpression	( int ) ( sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] ) )		4831323	1					
ANR	4831367	CastTarget	int		4831323	0					
ANR	4831368	MultiplicativeExpression	sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] )		4831323	1		/			
ANR	4831369	SizeofExpression	sizeof ( g_param_info_init_table )		4831323	0					
ANR	4831370	Sizeof	sizeof		4831323	0					
ANR	4831371	SizeofOperand	g_param_info_init_table		4831323	1					
ANR	4831372	SizeofExpression	sizeof ( g_param_info_init_table [ 0 ] )		4831323	1					
ANR	4831373	Sizeof	sizeof		4831323	0					
ANR	4831374	ArrayIndexing	g_param_info_init_table [ 0 ]		4831323	1					
ANR	4831375	Identifier	g_param_info_init_table		4831323	0					
ANR	4831376	PrimaryExpression	0		4831323	1					
ANR	4831377	UnaryExpression	++ ii	63:101:1857:1860	4831323	2	True				
ANR	4831378	IncDec	++		4831323	0					
ANR	4831379	Identifier	ii		4831323	1					
ANR	4831380	CompoundStatement		19:7:619:619	4831323	3					
ANR	4831381	ExpressionStatement	"param_info_hash_insert ( param_info , g_param_info_init_table [ ii ] )"	65:7:1879:1942	4831323	0	True				
ANR	4831382	CallExpression	"param_info_hash_insert ( param_info , g_param_info_init_table [ ii ] )"		4831323	0					
ANR	4831383	Callee	param_info_hash_insert		4831323	0					
ANR	4831384	Identifier	param_info_hash_insert		4831323	0					
ANR	4831385	ArgumentList	param_info		4831323	1					
ANR	4831386	Argument	param_info		4831323	0					
ANR	4831387	Identifier	param_info		4831323	0					
ANR	4831388	Argument	g_param_info_init_table [ ii ]		4831323	1					
ANR	4831389	ArrayIndexing	g_param_info_init_table [ ii ]		4831323	0					
ANR	4831390	Identifier	g_param_info_init_table		4831323	0					
ANR	4831391	Identifier	ii		4831323	1					
ANR	4831392	ReturnType	void		4831323	1					
ANR	4831393	Identifier	param_info_init		4831323	2					
ANR	4831394	ParameterList			4831323	3					
ANR	4831395	CFGEntryNode	ENTRY		4831323		True				
ANR	4831396	CFGExitNode	EXIT		4831323		True				
ANR	4831397	Symbol	ii		4831323						
ANR	4831398	Symbol	* g_param_info_init_table		4831323						
ANR	4831399	Symbol	g_param_info_init_table		4831323						
ANR	4831400	Symbol	* ii		4831323						
ANR	4831401	Symbol	& param_info		4831323						
ANR	4831402	Symbol	done_once		4831323						
ANR	4831403	Symbol	param_info		4831323						
ANR	4831404	Function	param_default_string	70:0:1957:2305							
ANR	4831405	FunctionDef	param_default_string (const char * param)		4831404	0					
ANR	4831406	CompoundStatement		72:0:2009:2305	4831404	0					
ANR	4831407	IdentifierDeclStatement	const param_info_t * p ;	73:1:2012:2033	4831404	0	True				
ANR	4831408	IdentifierDecl	* p		4831404	0					
ANR	4831409	IdentifierDeclType	const param_info_t *		4831404	0					
ANR	4831410	Identifier	p		4831404	1					
ANR	4831411	IdentifierDeclStatement	const char * ret = NULL ;	74:1:2036:2058	4831404	1	True				
ANR	4831412	IdentifierDecl	* ret = NULL		4831404	0					
ANR	4831413	IdentifierDeclType	const char *		4831404	0					
ANR	4831414	Identifier	ret		4831404	1					
ANR	4831415	AssignmentExpression	* ret = NULL		4831404	2		=			
ANR	4831416	Identifier	NULL		4831404	0					
ANR	4831417	Identifier	NULL		4831404	1					
ANR	4831418	ExpressionStatement	param_info_init ( )	76:1:2062:2079	4831404	2	True				
ANR	4831419	CallExpression	param_info_init ( )		4831404	0					
ANR	4831420	Callee	param_info_init		4831404	0					
ANR	4831421	Identifier	param_info_init		4831404	0					
ANR	4831422	ArgumentList			4831404	1					
ANR	4831423	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	77:1:2082:2127	4831404	3	True				
ANR	4831424	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		4831404	0		=			
ANR	4831425	Identifier	p		4831404	0					
ANR	4831426	CallExpression	"param_info_hash_lookup ( param_info , param )"		4831404	1					
ANR	4831427	Callee	param_info_hash_lookup		4831404	0					
ANR	4831428	Identifier	param_info_hash_lookup		4831404	0					
ANR	4831429	ArgumentList	param_info		4831404	1					
ANR	4831430	Argument	param_info		4831404	0					
ANR	4831431	Identifier	param_info		4831404	0					
ANR	4831432	Argument	param		4831404	1					
ANR	4831433	Identifier	param		4831404	0					
ANR	4831434	IfStatement	if ( p && p -> default_valid )		4831404	4					
ANR	4831435	Condition	p && p -> default_valid	81:5:2243:2263	4831404	0	True				
ANR	4831436	AndExpression	p && p -> default_valid		4831404	0		&&			
ANR	4831437	Identifier	p		4831404	0					
ANR	4831438	PtrMemberAccess	p -> default_valid		4831404	1					
ANR	4831439	Identifier	p		4831404	0					
ANR	4831440	Identifier	default_valid		4831404	1					
ANR	4831441	CompoundStatement		10:28:256:256	4831404	1					
ANR	4831442	ExpressionStatement	ret = p -> str_val	82:2:2270:2286	4831404	0	True				
ANR	4831443	AssignmentExpression	ret = p -> str_val		4831404	0		=			
ANR	4831444	Identifier	ret		4831404	0					
ANR	4831445	PtrMemberAccess	p -> str_val		4831404	1					
ANR	4831446	Identifier	p		4831404	0					
ANR	4831447	Identifier	str_val		4831404	1					
ANR	4831448	ReturnStatement	return ret ;	85:1:2293:2303	4831404	5	True				
ANR	4831449	Identifier	ret		4831404	0					
ANR	4831450	ReturnType	const char *		4831404	1					
ANR	4831451	Identifier	param_default_string		4831404	2					
ANR	4831452	ParameterList	const char * param		4831404	3					
ANR	4831453	Parameter	const char * param	71:21:1990:2006	4831404	0	True				
ANR	4831454	ParameterType	const char *		4831404	0					
ANR	4831455	Identifier	param		4831404	1					
ANR	4831456	CFGEntryNode	ENTRY		4831404		True				
ANR	4831457	CFGExitNode	EXIT		4831404		True				
ANR	4831458	Symbol	p		4831404						
ANR	4831459	Symbol	ret		4831404						
ANR	4831460	Symbol	NULL		4831404						
ANR	4831461	Symbol	param		4831404						
ANR	4831462	Symbol	p -> str_val		4831404						
ANR	4831463	Symbol	p -> default_valid		4831404						
ANR	4831464	Symbol	param_info_hash_lookup		4831404						
ANR	4831465	Symbol	* p		4831404						
ANR	4831466	Symbol	param_info		4831404						
ANR	4831467	Function	param_default_integer	88:0:2308:2725							
ANR	4831468	FunctionDef	"param_default_integer (const char * param , int * valid)"		4831467	0					
ANR	4831469	CompoundStatement		89:53:2365:2725	4831467	0					
ANR	4831470	IdentifierDeclStatement	const param_info_t * p ;	90:1:2368:2389	4831467	0	True				
ANR	4831471	IdentifierDecl	* p		4831467	0					
ANR	4831472	IdentifierDeclType	const param_info_t *		4831467	0					
ANR	4831473	Identifier	p		4831467	1					
ANR	4831474	IdentifierDeclStatement	int ret = 0 ;	91:1:2392:2403	4831467	1	True				
ANR	4831475	IdentifierDecl	ret = 0		4831467	0					
ANR	4831476	IdentifierDeclType	int		4831467	0					
ANR	4831477	Identifier	ret		4831467	1					
ANR	4831478	AssignmentExpression	ret = 0		4831467	2		=			
ANR	4831479	Identifier	ret		4831467	0					
ANR	4831480	PrimaryExpression	0		4831467	1					
ANR	4831481	ExpressionStatement	param_info_init ( )	93:1:2407:2424	4831467	2	True				
ANR	4831482	CallExpression	param_info_init ( )		4831467	0					
ANR	4831483	Callee	param_info_init		4831467	0					
ANR	4831484	Identifier	param_info_init		4831467	0					
ANR	4831485	ArgumentList			4831467	1					
ANR	4831486	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	95:1:2428:2473	4831467	3	True				
ANR	4831487	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		4831467	0		=			
ANR	4831488	Identifier	p		4831467	0					
ANR	4831489	CallExpression	"param_info_hash_lookup ( param_info , param )"		4831467	1					
ANR	4831490	Callee	param_info_hash_lookup		4831467	0					
ANR	4831491	Identifier	param_info_hash_lookup		4831467	0					
ANR	4831492	ArgumentList	param_info		4831467	1					
ANR	4831493	Argument	param_info		4831467	0					
ANR	4831494	Identifier	param_info		4831467	0					
ANR	4831495	Argument	param		4831467	1					
ANR	4831496	Identifier	param		4831467	0					
ANR	4831497	IfStatement	if ( p && ( p -> type == PARAM_TYPE_INT || p -> type == PARAM_TYPE_BOOL ) )		4831467	4					
ANR	4831498	Condition	p && ( p -> type == PARAM_TYPE_INT || p -> type == PARAM_TYPE_BOOL )	97:5:2481:2542	4831467	0	True				
ANR	4831499	AndExpression	p && ( p -> type == PARAM_TYPE_INT || p -> type == PARAM_TYPE_BOOL )		4831467	0		&&			
ANR	4831500	Identifier	p		4831467	0					
ANR	4831501	OrExpression	p -> type == PARAM_TYPE_INT || p -> type == PARAM_TYPE_BOOL		4831467	1		||			
ANR	4831502	EqualityExpression	p -> type == PARAM_TYPE_INT		4831467	0		==			
ANR	4831503	PtrMemberAccess	p -> type		4831467	0					
ANR	4831504	Identifier	p		4831467	0					
ANR	4831505	Identifier	type		4831467	1					
ANR	4831506	Identifier	PARAM_TYPE_INT		4831467	1					
ANR	4831507	EqualityExpression	p -> type == PARAM_TYPE_BOOL		4831467	1		==			
ANR	4831508	PtrMemberAccess	p -> type		4831467	0					
ANR	4831509	Identifier	p		4831467	0					
ANR	4831510	Identifier	type		4831467	1					
ANR	4831511	Identifier	PARAM_TYPE_BOOL		4831467	1					
ANR	4831512	CompoundStatement		9:69:179:179	4831467	1					
ANR	4831513	ExpressionStatement	* valid = p -> default_valid	98:8:2555:2580	4831467	0	True				
ANR	4831514	AssignmentExpression	* valid = p -> default_valid		4831467	0		=			
ANR	4831515	UnaryOperationExpression	* valid		4831467	0					
ANR	4831516	UnaryOperator	*		4831467	0					
ANR	4831517	Identifier	valid		4831467	1					
ANR	4831518	PtrMemberAccess	p -> default_valid		4831467	1					
ANR	4831519	Identifier	p		4831467	0					
ANR	4831520	Identifier	default_valid		4831467	1					
ANR	4831521	IfStatement	if ( * valid )		4831467	1					
ANR	4831522	Condition	* valid	99:12:2594:2599	4831467	0	True				
ANR	4831523	UnaryOperationExpression	* valid		4831467	0					
ANR	4831524	UnaryOperator	*		4831467	0					
ANR	4831525	Identifier	valid		4831467	1					
ANR	4831526	Statement	ret	100:12:2614:2616	4831467	1	True				
ANR	4831527	Statement	=	100:16:2618:2618	4831467	2	True				
ANR	4831528	Statement	reinterpret_cast	100:18:2620:2635	4831467	3	True				
ANR	4831529	Statement	<	100:34:2636:2636	4831467	4	True				
ANR	4831530	Statement	const	100:35:2637:2641	4831467	5	True				
ANR	4831531	Statement	param_info_PARAM_TYPE_INT	100:41:2643:2667	4831467	6	True				
ANR	4831532	Statement	*	100:66:2668:2668	4831467	7	True				
ANR	4831533	Statement	>	100:67:2669:2669	4831467	8	True				
ANR	4831534	ExpressionStatement	( p ) -> int_val	100:68:2670:2682	4831467	9	True				
ANR	4831535	PtrMemberAccess	( p ) -> int_val		4831467	0					
ANR	4831536	Identifier	p		4831467	0					
ANR	4831537	Identifier	int_val		4831467	1					
ANR	4831538	ElseStatement	else		4831467	0					
ANR	4831539	CompoundStatement		13:8:326:326	4831467	0					
ANR	4831540	ExpressionStatement	* valid = 0	102:2:2696:2706	4831467	0	True				
ANR	4831541	AssignmentExpression	* valid = 0		4831467	0		=			
ANR	4831542	UnaryOperationExpression	* valid		4831467	0					
ANR	4831543	UnaryOperator	*		4831467	0					
ANR	4831544	Identifier	valid		4831467	1					
ANR	4831545	PrimaryExpression	0		4831467	1					
ANR	4831546	ReturnStatement	return ret ;	105:1:2713:2723	4831467	5	True				
ANR	4831547	Identifier	ret		4831467	0					
ANR	4831548	ReturnType	int		4831467	1					
ANR	4831549	Identifier	param_default_integer		4831467	2					
ANR	4831550	ParameterList	"const char * param , int * valid"		4831467	3					
ANR	4831551	Parameter	const char * param	89:22:2334:2350	4831467	0	True				
ANR	4831552	ParameterType	const char *		4831467	0					
ANR	4831553	Identifier	param		4831467	1					
ANR	4831554	Parameter	int * valid	89:41:2353:2362	4831467	1	True				
ANR	4831555	ParameterType	int *		4831467	0					
ANR	4831556	Identifier	valid		4831467	1					
ANR	4831557	CFGEntryNode	ENTRY		4831467		True				
ANR	4831558	CFGExitNode	EXIT		4831467		True				
ANR	4831559	Symbol	valid		4831467						
ANR	4831560	Symbol	p		4831467						
ANR	4831561	Symbol	ret		4831467						
ANR	4831562	Symbol	param		4831467						
ANR	4831563	Symbol	p -> default_valid		4831467						
ANR	4831564	Symbol	param_info_hash_lookup		4831467						
ANR	4831565	Symbol	PARAM_TYPE_BOOL		4831467						
ANR	4831566	Symbol	* p		4831467						
ANR	4831567	Symbol	* valid		4831467						
ANR	4831568	Symbol	PARAM_TYPE_INT		4831467						
ANR	4831569	Symbol	p -> type		4831467						
ANR	4831570	Symbol	param_info		4831467						
ANR	4831571	Function	param_default_boolean	108:0:2728:2839							
ANR	4831572	FunctionDef	"param_default_boolean (const char * param , int * valid)"		4831571	0					
ANR	4831573	CompoundStatement		109:53:2785:2839	4831571	0					
ANR	4831574	ReturnStatement	"return ( param_default_integer ( param , valid ) != 0 ) ;"	110:1:2788:2837	4831571	0	True				
ANR	4831575	EqualityExpression	"param_default_integer ( param , valid ) != 0"		4831571	0		!=			
ANR	4831576	CallExpression	"param_default_integer ( param , valid )"		4831571	0					
ANR	4831577	Callee	param_default_integer		4831571	0					
ANR	4831578	Identifier	param_default_integer		4831571	0					
ANR	4831579	ArgumentList	param		4831571	1					
ANR	4831580	Argument	param		4831571	0					
ANR	4831581	Identifier	param		4831571	0					
ANR	4831582	Argument	valid		4831571	1					
ANR	4831583	Identifier	valid		4831571	0					
ANR	4831584	PrimaryExpression	0		4831571	1					
ANR	4831585	ReturnType	int		4831571	1					
ANR	4831586	Identifier	param_default_boolean		4831571	2					
ANR	4831587	ParameterList	"const char * param , int * valid"		4831571	3					
ANR	4831588	Parameter	const char * param	109:22:2754:2770	4831571	0	True				
ANR	4831589	ParameterType	const char *		4831571	0					
ANR	4831590	Identifier	param		4831571	1					
ANR	4831591	Parameter	int * valid	109:41:2773:2782	4831571	1	True				
ANR	4831592	ParameterType	int *		4831571	0					
ANR	4831593	Identifier	valid		4831571	1					
ANR	4831594	CFGEntryNode	ENTRY		4831571		True				
ANR	4831595	CFGExitNode	EXIT		4831571		True				
ANR	4831596	Symbol	valid		4831571						
ANR	4831597	Symbol	param		4831571						
ANR	4831598	Symbol	param_default_integer		4831571						
ANR	4831599	Function	param_default_double	113:0:2842:3232							
ANR	4831600	FunctionDef	"param_default_double (const char * param , int * valid)"		4831599	0					
ANR	4831601	CompoundStatement		114:52:2901:3232	4831599	0					
ANR	4831602	IdentifierDeclStatement	const param_info_t * p ;	117:1:2906:2927	4831599	0	True				
ANR	4831603	IdentifierDecl	* p		4831599	0					
ANR	4831604	IdentifierDeclType	const param_info_t *		4831599	0					
ANR	4831605	Identifier	p		4831599	1					
ANR	4831606	IdentifierDeclStatement	double ret = 0.0 ;	118:1:2930:2946	4831599	1	True				
ANR	4831607	IdentifierDecl	ret = 0.0		4831599	0					
ANR	4831608	IdentifierDeclType	double		4831599	0					
ANR	4831609	Identifier	ret		4831599	1					
ANR	4831610	AssignmentExpression	ret = 0.0		4831599	2		=			
ANR	4831611	Identifier	ret		4831599	0					
ANR	4831612	PrimaryExpression	0.0		4831599	1					
ANR	4831613	ExpressionStatement	param_info_init ( )	120:1:2950:2967	4831599	2	True				
ANR	4831614	CallExpression	param_info_init ( )		4831599	0					
ANR	4831615	Callee	param_info_init		4831599	0					
ANR	4831616	Identifier	param_info_init		4831599	0					
ANR	4831617	ArgumentList			4831599	1					
ANR	4831618	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	122:1:2971:3016	4831599	3	True				
ANR	4831619	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		4831599	0		=			
ANR	4831620	Identifier	p		4831599	0					
ANR	4831621	CallExpression	"param_info_hash_lookup ( param_info , param )"		4831599	1					
ANR	4831622	Callee	param_info_hash_lookup		4831599	0					
ANR	4831623	Identifier	param_info_hash_lookup		4831599	0					
ANR	4831624	ArgumentList	param_info		4831599	1					
ANR	4831625	Argument	param_info		4831599	0					
ANR	4831626	Identifier	param_info		4831599	0					
ANR	4831627	Argument	param		4831599	1					
ANR	4831628	Identifier	param		4831599	0					
ANR	4831629	IfStatement	if ( p && ( p -> type == PARAM_TYPE_DOUBLE ) )		4831599	4					
ANR	4831630	Condition	p && ( p -> type == PARAM_TYPE_DOUBLE )	124:5:3024:3058	4831599	0	True				
ANR	4831631	AndExpression	p && ( p -> type == PARAM_TYPE_DOUBLE )		4831599	0		&&			
ANR	4831632	Identifier	p		4831599	0					
ANR	4831633	EqualityExpression	p -> type == PARAM_TYPE_DOUBLE		4831599	1		==			
ANR	4831634	PtrMemberAccess	p -> type		4831599	0					
ANR	4831635	Identifier	p		4831599	0					
ANR	4831636	Identifier	type		4831599	1					
ANR	4831637	Identifier	PARAM_TYPE_DOUBLE		4831599	1					
ANR	4831638	CompoundStatement		11:42:159:159	4831599	1					
ANR	4831639	ExpressionStatement	* valid = p -> default_valid	125:2:3065:3090	4831599	0	True				
ANR	4831640	AssignmentExpression	* valid = p -> default_valid		4831599	0		=			
ANR	4831641	UnaryOperationExpression	* valid		4831599	0					
ANR	4831642	UnaryOperator	*		4831599	0					
ANR	4831643	Identifier	valid		4831599	1					
ANR	4831644	PtrMemberAccess	p -> default_valid		4831599	1					
ANR	4831645	Identifier	p		4831599	0					
ANR	4831646	Identifier	default_valid		4831599	1					
ANR	4831647	IfStatement	if ( * valid )		4831599	1					
ANR	4831648	Condition	* valid	126:12:3104:3109	4831599	0	True				
ANR	4831649	UnaryOperationExpression	* valid		4831599	0					
ANR	4831650	UnaryOperator	*		4831599	0					
ANR	4831651	Identifier	valid		4831599	1					
ANR	4831652	Statement	ret	127:6:3118:3120	4831599	1	True				
ANR	4831653	Statement	=	127:10:3122:3122	4831599	2	True				
ANR	4831654	Statement	reinterpret_cast	127:12:3124:3139	4831599	3	True				
ANR	4831655	Statement	<	127:28:3140:3140	4831599	4	True				
ANR	4831656	Statement	const	127:29:3141:3145	4831599	5	True				
ANR	4831657	Statement	param_info_PARAM_TYPE_DOUBLE	127:35:3147:3174	4831599	6	True				
ANR	4831658	Statement	*	127:63:3175:3175	4831599	7	True				
ANR	4831659	Statement	>	127:64:3176:3176	4831599	8	True				
ANR	4831660	ExpressionStatement	( p ) -> dbl_val	127:65:3177:3189	4831599	9	True				
ANR	4831661	PtrMemberAccess	( p ) -> dbl_val		4831599	0					
ANR	4831662	Identifier	p		4831599	0					
ANR	4831663	Identifier	dbl_val		4831599	1					
ANR	4831664	ElseStatement	else		4831599	0					
ANR	4831665	CompoundStatement		15:8:297:297	4831599	0					
ANR	4831666	ExpressionStatement	* valid = 0	129:2:3203:3213	4831599	0	True				
ANR	4831667	AssignmentExpression	* valid = 0		4831599	0		=			
ANR	4831668	UnaryOperationExpression	* valid		4831599	0					
ANR	4831669	UnaryOperator	*		4831599	0					
ANR	4831670	Identifier	valid		4831599	1					
ANR	4831671	PrimaryExpression	0		4831599	1					
ANR	4831672	ReturnStatement	return ret ;	132:1:3220:3230	4831599	5	True				
ANR	4831673	Identifier	ret		4831599	0					
ANR	4831674	ReturnType	double		4831599	1					
ANR	4831675	Identifier	param_default_double		4831599	2					
ANR	4831676	ParameterList	"const char * param , int * valid"		4831599	3					
ANR	4831677	Parameter	const char * param	114:21:2870:2886	4831599	0	True				
ANR	4831678	ParameterType	const char *		4831599	0					
ANR	4831679	Identifier	param		4831599	1					
ANR	4831680	Parameter	int * valid	114:40:2889:2898	4831599	1	True				
ANR	4831681	ParameterType	int *		4831599	0					
ANR	4831682	Identifier	valid		4831599	1					
ANR	4831683	CFGEntryNode	ENTRY		4831599		True				
ANR	4831684	CFGExitNode	EXIT		4831599		True				
ANR	4831685	Symbol	valid		4831599						
ANR	4831686	Symbol	p		4831599						
ANR	4831687	Symbol	ret		4831599						
ANR	4831688	Symbol	param		4831599						
ANR	4831689	Symbol	p -> default_valid		4831599						
ANR	4831690	Symbol	param_info_hash_lookup		4831599						
ANR	4831691	Symbol	PARAM_TYPE_DOUBLE		4831599						
ANR	4831692	Symbol	* p		4831599						
ANR	4831693	Symbol	* valid		4831599						
ANR	4831694	Symbol	p -> type		4831599						
ANR	4831695	Symbol	param_info		4831599						
ANR	4831696	Function	param_range_integer	135:0:3235:3897							
ANR	4831697	FunctionDef	"param_range_integer (const char * param , int * min , int * max)"		4831696	0					
ANR	4831698	CompoundStatement		136:59:3298:3897	4831696	0					
ANR	4831699	IdentifierDeclStatement	const param_info_t * p ;	138:1:3302:3323	4831696	0	True				
ANR	4831700	IdentifierDecl	* p		4831696	0					
ANR	4831701	IdentifierDeclType	const param_info_t *		4831696	0					
ANR	4831702	Identifier	p		4831696	1					
ANR	4831703	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	140:1:3327:3372	4831696	1	True				
ANR	4831704	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		4831696	0		=			
ANR	4831705	Identifier	p		4831696	0					
ANR	4831706	CallExpression	"param_info_hash_lookup ( param_info , param )"		4831696	1					
ANR	4831707	Callee	param_info_hash_lookup		4831696	0					
ANR	4831708	Identifier	param_info_hash_lookup		4831696	0					
ANR	4831709	ArgumentList	param_info		4831696	1					
ANR	4831710	Argument	param_info		4831696	0					
ANR	4831711	Identifier	param_info		4831696	0					
ANR	4831712	Argument	param		4831696	1					
ANR	4831713	Identifier	param		4831696	0					
ANR	4831714	IfStatement	if ( p )		4831696	2					
ANR	4831715	Condition	p	142:5:3380:3380	4831696	0	True				
ANR	4831716	Identifier	p		4831696	0					
ANR	4831717	CompoundStatement		7:8:84:84	4831696	1					
ANR	4831718	IfStatement	if ( p -> type != PARAM_TYPE_INT )		4831696	0					
ANR	4831719	Condition	p -> type != PARAM_TYPE_INT	143:6:3391:3415	4831696	0	True				
ANR	4831720	EqualityExpression	p -> type != PARAM_TYPE_INT		4831696	0		!=			
ANR	4831721	PtrMemberAccess	p -> type		4831696	0					
ANR	4831722	Identifier	p		4831696	0					
ANR	4831723	Identifier	type		4831696	1					
ANR	4831724	Identifier	PARAM_TYPE_INT		4831696	1					
ANR	4831725	CompoundStatement		8:33:119:119	4831696	1					
ANR	4831726	ReturnStatement	return - 1 ;	144:3:3423:3432	4831696	0	True				
ANR	4831727	UnaryOperationExpression	- 1		4831696	0					
ANR	4831728	UnaryOperator	-		4831696	0					
ANR	4831729	PrimaryExpression	1		4831696	1					
ANR	4831730	IfStatement	if ( ! p -> range_valid )		4831696	1					
ANR	4831731	Condition	! p -> range_valid	146:13:3451:3466	4831696	0	True				
ANR	4831732	UnaryOperationExpression	! p -> range_valid		4831696	0					
ANR	4831733	UnaryOperator	!		4831696	0					
ANR	4831734	PtrMemberAccess	p -> range_valid		4831696	1					
ANR	4831735	Identifier	p		4831696	0					
ANR	4831736	Identifier	range_valid		4831696	1					
ANR	4831737	CompoundStatement		11:31:170:170	4831696	1					
ANR	4831738	ExpressionStatement	* min = INT_MIN	147:12:3483:3497	4831696	0	True				
ANR	4831739	AssignmentExpression	* min = INT_MIN		4831696	0		=			
ANR	4831740	UnaryOperationExpression	* min		4831696	0					
ANR	4831741	UnaryOperator	*		4831696	0					
ANR	4831742	Identifier	min		4831696	1					
ANR	4831743	Identifier	INT_MIN		4831696	1					
ANR	4831744	ExpressionStatement	* max = INT_MAX	148:12:3511:3525	4831696	1	True				
ANR	4831745	AssignmentExpression	* max = INT_MAX		4831696	0		=			
ANR	4831746	UnaryOperationExpression	* max		4831696	0					
ANR	4831747	UnaryOperator	*		4831696	0					
ANR	4831748	Identifier	max		4831696	1					
ANR	4831749	Identifier	INT_MAX		4831696	1					
ANR	4831750	ElseStatement	else		4831696	0					
ANR	4831751	CompoundStatement		14:15:243:243	4831696	0					
ANR	4831752	Statement	*	150:6:3550:3550	4831696	0	True				
ANR	4831753	Statement	min	150:7:3551:3553	4831696	1	True				
ANR	4831754	Statement	=	150:11:3555:3555	4831696	2	True				
ANR	4831755	Statement	reinterpret_cast	150:13:3557:3572	4831696	3	True				
ANR	4831756	Statement	<	150:29:3573:3573	4831696	4	True				
ANR	4831757	Statement	const	150:30:3574:3578	4831696	5	True				
ANR	4831758	Statement	param_info_PARAM_TYPE_INT_ranged	150:36:3580:3611	4831696	6	True				
ANR	4831759	Statement	*	150:68:3612:3612	4831696	7	True				
ANR	4831760	Statement	>	150:69:3613:3613	4831696	8	True				
ANR	4831761	ExpressionStatement	( p ) -> int_min	150:70:3614:3626	4831696	9	True				
ANR	4831762	PtrMemberAccess	( p ) -> int_min		4831696	0					
ANR	4831763	Identifier	p		4831696	0					
ANR	4831764	Identifier	int_min		4831696	1					
ANR	4831765	Statement	*	151:6:3634:3634	4831696	10	True				
ANR	4831766	Statement	max	151:7:3635:3637	4831696	11	True				
ANR	4831767	Statement	=	151:11:3639:3639	4831696	12	True				
ANR	4831768	Statement	reinterpret_cast	151:13:3641:3656	4831696	13	True				
ANR	4831769	Statement	<	151:29:3657:3657	4831696	14	True				
ANR	4831770	Statement	const	151:30:3658:3662	4831696	15	True				
ANR	4831771	Statement	param_info_PARAM_TYPE_INT_ranged	151:36:3664:3695	4831696	16	True				
ANR	4831772	Statement	*	151:68:3696:3696	4831696	17	True				
ANR	4831773	Statement	>	151:69:3697:3697	4831696	18	True				
ANR	4831774	ExpressionStatement	( p ) -> int_max	151:70:3698:3710	4831696	19	True				
ANR	4831775	PtrMemberAccess	( p ) -> int_max		4831696	0					
ANR	4831776	Identifier	p		4831696	0					
ANR	4831777	Identifier	int_max		4831696	1					
ANR	4831778	ElseStatement	else		4831696	0					
ANR	4831779	CompoundStatement		18:8:431:431	4831696	0					
ANR	4831780	ReturnStatement	return - 1 ;	156:2:3872:3881	4831696	0	True				
ANR	4831781	UnaryOperationExpression	- 1		4831696	0					
ANR	4831782	UnaryOperator	-		4831696	0					
ANR	4831783	PrimaryExpression	1		4831696	1					
ANR	4831784	ReturnStatement	return 0 ;	158:1:3887:3895	4831696	3	True				
ANR	4831785	PrimaryExpression	0		4831696	0					
ANR	4831786	ReturnType	int		4831696	1					
ANR	4831787	Identifier	param_range_integer		4831696	2					
ANR	4831788	ParameterList	"const char * param , int * min , int * max"		4831696	3					
ANR	4831789	Parameter	const char * param	136:20:3259:3275	4831696	0	True				
ANR	4831790	ParameterType	const char *		4831696	0					
ANR	4831791	Identifier	param		4831696	1					
ANR	4831792	Parameter	int * min	136:39:3278:3285	4831696	1	True				
ANR	4831793	ParameterType	int *		4831696	0					
ANR	4831794	Identifier	min		4831696	1					
ANR	4831795	Parameter	int * max	136:49:3288:3295	4831696	2	True				
ANR	4831796	ParameterType	int *		4831696	0					
ANR	4831797	Identifier	max		4831696	1					
ANR	4831798	CFGEntryNode	ENTRY		4831696		True				
ANR	4831799	CFGExitNode	EXIT		4831696		True				
ANR	4831800	Symbol	max		4831696						
ANR	4831801	Symbol	PARAM_TYPE_INT		4831696						
ANR	4831802	Symbol	p -> type		4831696						
ANR	4831803	Symbol	p -> range_valid		4831696						
ANR	4831804	Symbol	INT_MIN		4831696						
ANR	4831805	Symbol	* max		4831696						
ANR	4831806	Symbol	p		4831696						
ANR	4831807	Symbol	min		4831696						
ANR	4831808	Symbol	param		4831696						
ANR	4831809	Symbol	param_info_hash_lookup		4831696						
ANR	4831810	Symbol	INT_MAX		4831696						
ANR	4831811	Symbol	* p		4831696						
ANR	4831812	Symbol	* min		4831696						
ANR	4831813	Symbol	param_info		4831696						
ANR	4831814	Function	param_range_double	161:0:3900:4573							
ANR	4831815	FunctionDef	"param_range_double (const char * param , double * min , double * max)"		4831814	0					
ANR	4831816	CompoundStatement		162:64:3968:4573	4831814	0					
ANR	4831817	IdentifierDeclStatement	const param_info_t * p ;	164:1:3972:3993	4831814	0	True				
ANR	4831818	IdentifierDecl	* p		4831814	0					
ANR	4831819	IdentifierDeclType	const param_info_t *		4831814	0					
ANR	4831820	Identifier	p		4831814	1					
ANR	4831821	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	166:1:3997:4042	4831814	1	True				
ANR	4831822	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		4831814	0		=			
ANR	4831823	Identifier	p		4831814	0					
ANR	4831824	CallExpression	"param_info_hash_lookup ( param_info , param )"		4831814	1					
ANR	4831825	Callee	param_info_hash_lookup		4831814	0					
ANR	4831826	Identifier	param_info_hash_lookup		4831814	0					
ANR	4831827	ArgumentList	param_info		4831814	1					
ANR	4831828	Argument	param_info		4831814	0					
ANR	4831829	Identifier	param_info		4831814	0					
ANR	4831830	Argument	param		4831814	1					
ANR	4831831	Identifier	param		4831814	0					
ANR	4831832	IfStatement	if ( p )		4831814	2					
ANR	4831833	Condition	p	168:5:4050:4050	4831814	0	True				
ANR	4831834	Identifier	p		4831814	0					
ANR	4831835	CompoundStatement		7:8:84:84	4831814	1					
ANR	4831836	IfStatement	if ( p -> type != PARAM_TYPE_DOUBLE )		4831814	0					
ANR	4831837	Condition	p -> type != PARAM_TYPE_DOUBLE	169:5:4060:4087	4831814	0	True				
ANR	4831838	EqualityExpression	p -> type != PARAM_TYPE_DOUBLE		4831814	0		!=			
ANR	4831839	PtrMemberAccess	p -> type		4831814	0					
ANR	4831840	Identifier	p		4831814	0					
ANR	4831841	Identifier	type		4831814	1					
ANR	4831842	Identifier	PARAM_TYPE_DOUBLE		4831814	1					
ANR	4831843	CompoundStatement		8:35:121:121	4831814	1					
ANR	4831844	ReturnStatement	return - 1 ;	170:3:4095:4104	4831814	0	True				
ANR	4831845	UnaryOperationExpression	- 1		4831814	0					
ANR	4831846	UnaryOperator	-		4831814	0					
ANR	4831847	PrimaryExpression	1		4831814	1					
ANR	4831848	IfStatement	if ( ! p -> range_valid )		4831814	1					
ANR	4831849	Condition	! p -> range_valid	172:13:4123:4138	4831814	0	True				
ANR	4831850	UnaryOperationExpression	! p -> range_valid		4831814	0					
ANR	4831851	UnaryOperator	!		4831814	0					
ANR	4831852	PtrMemberAccess	p -> range_valid		4831814	1					
ANR	4831853	Identifier	p		4831814	0					
ANR	4831854	Identifier	range_valid		4831814	1					
ANR	4831855	CompoundStatement		11:31:172:172	4831814	1					
ANR	4831856	ExpressionStatement	* min = DBL_MIN	173:12:4155:4169	4831814	0	True				
ANR	4831857	AssignmentExpression	* min = DBL_MIN		4831814	0		=			
ANR	4831858	UnaryOperationExpression	* min		4831814	0					
ANR	4831859	UnaryOperator	*		4831814	0					
ANR	4831860	Identifier	min		4831814	1					
ANR	4831861	Identifier	DBL_MIN		4831814	1					
ANR	4831862	ExpressionStatement	* max = DBL_MAX	174:12:4183:4197	4831814	1	True				
ANR	4831863	AssignmentExpression	* max = DBL_MAX		4831814	0		=			
ANR	4831864	UnaryOperationExpression	* max		4831814	0					
ANR	4831865	UnaryOperator	*		4831814	0					
ANR	4831866	Identifier	max		4831814	1					
ANR	4831867	Identifier	DBL_MAX		4831814	1					
ANR	4831868	ElseStatement	else		4831814	0					
ANR	4831869	CompoundStatement		14:15:245:245	4831814	0					
ANR	4831870	Statement	*	176:6:4222:4222	4831814	0	True				
ANR	4831871	Statement	min	176:7:4223:4225	4831814	1	True				
ANR	4831872	Statement	=	176:11:4227:4227	4831814	2	True				
ANR	4831873	Statement	reinterpret_cast	176:13:4229:4244	4831814	3	True				
ANR	4831874	Statement	<	176:29:4245:4245	4831814	4	True				
ANR	4831875	Statement	const	176:30:4246:4250	4831814	5	True				
ANR	4831876	Statement	param_info_PARAM_TYPE_DOUBLE_ranged	176:36:4252:4286	4831814	6	True				
ANR	4831877	Statement	*	176:71:4287:4287	4831814	7	True				
ANR	4831878	Statement	>	176:72:4288:4288	4831814	8	True				
ANR	4831879	ExpressionStatement	( p ) -> dbl_min	176:73:4289:4301	4831814	9	True				
ANR	4831880	PtrMemberAccess	( p ) -> dbl_min		4831814	0					
ANR	4831881	Identifier	p		4831814	0					
ANR	4831882	Identifier	dbl_min		4831814	1					
ANR	4831883	Statement	*	177:6:4309:4309	4831814	10	True				
ANR	4831884	Statement	max	177:7:4310:4312	4831814	11	True				
ANR	4831885	Statement	=	177:11:4314:4314	4831814	12	True				
ANR	4831886	Statement	reinterpret_cast	177:13:4316:4331	4831814	13	True				
ANR	4831887	Statement	<	177:29:4332:4332	4831814	14	True				
ANR	4831888	Statement	const	177:30:4333:4337	4831814	15	True				
ANR	4831889	Statement	param_info_PARAM_TYPE_DOUBLE_ranged	177:36:4339:4373	4831814	16	True				
ANR	4831890	Statement	*	177:71:4374:4374	4831814	17	True				
ANR	4831891	Statement	>	177:72:4375:4375	4831814	18	True				
ANR	4831892	ExpressionStatement	( p ) -> dbl_max	177:73:4376:4388	4831814	19	True				
ANR	4831893	PtrMemberAccess	( p ) -> dbl_max		4831814	0					
ANR	4831894	Identifier	p		4831814	0					
ANR	4831895	Identifier	dbl_max		4831814	1					
ANR	4831896	ElseStatement	else		4831814	0					
ANR	4831897	CompoundStatement		18:8:439:439	4831814	0					
ANR	4831898	ReturnStatement	return - 1 ;	182:2:4548:4557	4831814	0	True				
ANR	4831899	UnaryOperationExpression	- 1		4831814	0					
ANR	4831900	UnaryOperator	-		4831814	0					
ANR	4831901	PrimaryExpression	1		4831814	1					
ANR	4831902	ReturnStatement	return 0 ;	184:1:4563:4571	4831814	3	True				
ANR	4831903	PrimaryExpression	0		4831814	0					
ANR	4831904	ReturnType	int		4831814	1					
ANR	4831905	Identifier	param_range_double		4831814	2					
ANR	4831906	ParameterList	"const char * param , double * min , double * max"		4831814	3					
ANR	4831907	Parameter	const char * param	162:19:3923:3939	4831814	0	True				
ANR	4831908	ParameterType	const char *		4831814	0					
ANR	4831909	Identifier	param		4831814	1					
ANR	4831910	Parameter	double * min	162:38:3942:3952	4831814	1	True				
ANR	4831911	ParameterType	double *		4831814	0					
ANR	4831912	Identifier	min		4831814	1					
ANR	4831913	Parameter	double * max	162:51:3955:3965	4831814	2	True				
ANR	4831914	ParameterType	double *		4831814	0					
ANR	4831915	Identifier	max		4831814	1					
ANR	4831916	CFGEntryNode	ENTRY		4831814		True				
ANR	4831917	CFGExitNode	EXIT		4831814		True				
ANR	4831918	Symbol	DBL_MIN		4831814						
ANR	4831919	Symbol	max		4831814						
ANR	4831920	Symbol	PARAM_TYPE_DOUBLE		4831814						
ANR	4831921	Symbol	p -> type		4831814						
ANR	4831922	Symbol	p -> range_valid		4831814						
ANR	4831923	Symbol	* max		4831814						
ANR	4831924	Symbol	p		4831814						
ANR	4831925	Symbol	DBL_MAX		4831814						
ANR	4831926	Symbol	min		4831814						
ANR	4831927	Symbol	param		4831814						
ANR	4831928	Symbol	param_info_hash_lookup		4831814						
ANR	4831929	Symbol	* p		4831814						
ANR	4831930	Symbol	* min		4831814						
ANR	4831931	Symbol	param_info		4831814						
ANR	4831932	Function	compute_range	189:0:4636:5735							
ANR	4831933	FunctionDef	"compute_range (const char * range , char * * range_start , char * * range_end)"		4831932	0					
ANR	4831934	CompoundStatement		190:71:4719:5735	4831932	0					
ANR	4831935	IdentifierDeclStatement	"const char * c1 = NULL , * c2 = NULL , * c3 = NULL ;"	192:1:4723:4771	4831932	0	True				
ANR	4831936	IdentifierDecl	* c1 = NULL		4831932	0					
ANR	4831937	IdentifierDeclType	const char *		4831932	0					
ANR	4831938	Identifier	c1		4831932	1					
ANR	4831939	AssignmentExpression	* c1 = NULL		4831932	2		=			
ANR	4831940	Identifier	NULL		4831932	0					
ANR	4831941	Identifier	NULL		4831932	1					
ANR	4831942	IdentifierDecl	* c2 = NULL		4831932	1					
ANR	4831943	IdentifierDeclType	const char *		4831932	0					
ANR	4831944	Identifier	c2		4831932	1					
ANR	4831945	AssignmentExpression	* c2 = NULL		4831932	2		=			
ANR	4831946	Identifier	NULL		4831932	0					
ANR	4831947	Identifier	NULL		4831932	1					
ANR	4831948	IdentifierDecl	* c3 = NULL		4831932	2					
ANR	4831949	IdentifierDeclType	const char *		4831932	0					
ANR	4831950	Identifier	c3		4831932	1					
ANR	4831951	AssignmentExpression	* c3 = NULL		4831932	2		=			
ANR	4831952	Identifier	NULL		4831932	0					
ANR	4831953	Identifier	NULL		4831932	1					
ANR	4831954	ForStatement	for ( c1 = range ; isspace ( * c1 ) ; c1 ++ )		4831932	1					
ANR	4831955	ForInit	c1 = range ;	194:6:4780:4788	4831932	0	True				
ANR	4831956	AssignmentExpression	c1 = range		4831932	0		=			
ANR	4831957	Identifier	c1		4831932	0					
ANR	4831958	Identifier	range		4831932	1					
ANR	4831959	Condition	isspace ( * c1 )	194:16:4790:4801	4831932	1	True				
ANR	4831960	CallExpression	isspace ( * c1 )		4831932	0					
ANR	4831961	Callee	isspace		4831932	0					
ANR	4831962	Identifier	isspace		4831932	0					
ANR	4831963	ArgumentList	* c1		4831932	1					
ANR	4831964	Argument	* c1		4831932	0					
ANR	4831965	UnaryOperationExpression	* c1		4831932	0					
ANR	4831966	UnaryOperator	*		4831932	0					
ANR	4831967	Identifier	c1		4831932	1					
ANR	4831968	PostIncDecOperationExpression	c1 ++	194:30:4804:4807	4831932	2	True				
ANR	4831969	Identifier	c1		4831932	0					
ANR	4831970	IncDec	++		4831932	1					
ANR	4831971	ExpressionStatement		194:35:4809:4809	4831932	3	True				
ANR	4831972	ForStatement	"for ( c2 = c1 ; * c2 && * c2 != ',' ; c2 ++ )"		4831932	2					
ANR	4831973	ForInit	c2 = c1 ;	196:6:4847:4852	4831932	0	True				
ANR	4831974	AssignmentExpression	c2 = c1		4831932	0		=			
ANR	4831975	Identifier	c2		4831932	0					
ANR	4831976	Identifier	c1		4831932	1					
ANR	4831977	Condition	"* c2 && * c2 != ','"	196:13:4854:4868	4831932	1	True				
ANR	4831978	AndExpression	"* c2 && * c2 != ','"		4831932	0		&&			
ANR	4831979	UnaryOperationExpression	* c2		4831932	0					
ANR	4831980	UnaryOperator	*		4831932	0					
ANR	4831981	Identifier	c2		4831932	1					
ANR	4831982	EqualityExpression	"* c2 != ','"		4831932	1		!=			
ANR	4831983	UnaryOperationExpression	* c2		4831932	0					
ANR	4831984	UnaryOperator	*		4831932	0					
ANR	4831985	Identifier	c2		4831932	1					
ANR	4831986	PrimaryExpression	"','"		4831932	1					
ANR	4831987	PostIncDecOperationExpression	c2 ++	196:30:4871:4874	4831932	2	True				
ANR	4831988	Identifier	c2		4831932	0					
ANR	4831989	IncDec	++		4831932	1					
ANR	4831990	ExpressionStatement		196:35:4876:4876	4831932	3	True				
ANR	4831991	IfStatement	"if ( c1 == c2 || ( strcmp ( c1 , "".*"" ) == 0 ) )"		4831932	3					
ANR	4831992	Condition	"c1 == c2 || ( strcmp ( c1 , "".*"" ) == 0 )"	199:5:5012:5044	4831932	0	True				
ANR	4831993	OrExpression	"c1 == c2 || ( strcmp ( c1 , "".*"" ) == 0 )"		4831932	0		||			
ANR	4831994	EqualityExpression	c1 == c2		4831932	0		==			
ANR	4831995	Identifier	c1		4831932	0					
ANR	4831996	Identifier	c2		4831932	1					
ANR	4831997	EqualityExpression	"strcmp ( c1 , "".*"" ) == 0"		4831932	1		==			
ANR	4831998	CallExpression	"strcmp ( c1 , "".*"" )"		4831932	0					
ANR	4831999	Callee	strcmp		4831932	0					
ANR	4832000	Identifier	strcmp		4831932	0					
ANR	4832001	ArgumentList	c1		4831932	1					
ANR	4832002	Argument	c1		4831932	0					
ANR	4832003	Identifier	c1		4831932	0					
ANR	4832004	Argument	""".*"""		4831932	1					
ANR	4832005	PrimaryExpression	""".*"""		4831932	0					
ANR	4832006	PrimaryExpression	0		4831932	1					
ANR	4832007	CompoundStatement		10:40:327:327	4831932	1					
ANR	4832008	ExpressionStatement	* range_start = ( char * ) malloc ( sizeof ( char ) )	200:2:5051:5094	4831932	0	True				
ANR	4832009	AssignmentExpression	* range_start = ( char * ) malloc ( sizeof ( char ) )		4831932	0		=			
ANR	4832010	UnaryOperationExpression	* range_start		4831932	0					
ANR	4832011	UnaryOperator	*		4831932	0					
ANR	4832012	Identifier	range_start		4831932	1					
ANR	4832013	CastExpression	( char * ) malloc ( sizeof ( char ) )		4831932	1					
ANR	4832014	CastTarget	char *		4831932	0					
ANR	4832015	CallExpression	malloc ( sizeof ( char ) )		4831932	1					
ANR	4832016	Callee	malloc		4831932	0					
ANR	4832017	Identifier	malloc		4831932	0					
ANR	4832018	ArgumentList	sizeof ( char )		4831932	1					
ANR	4832019	Argument	sizeof ( char )		4831932	0					
ANR	4832020	SizeofExpression	sizeof ( char )		4831932	0					
ANR	4832021	Sizeof	sizeof		4831932	0					
ANR	4832022	SizeofOperand	char		4831932	1					
ANR	4832023	ExpressionStatement	* * range_start = '\\0'	201:2:5098:5118	4831932	1	True				
ANR	4832024	AssignmentExpression	* * range_start = '\\0'		4831932	0		=			
ANR	4832025	UnaryOperationExpression	* * range_start		4831932	0					
ANR	4832026	UnaryOperator	*		4831932	0					
ANR	4832027	UnaryOperationExpression	* range_start		4831932	1					
ANR	4832028	UnaryOperator	*		4831932	0					
ANR	4832029	Identifier	range_start		4831932	1					
ANR	4832030	PrimaryExpression	'\\0'		4831932	1					
ANR	4832031	ExpressionStatement	* range_end = ( char * ) malloc ( sizeof ( char ) )	202:2:5122:5162	4831932	2	True				
ANR	4832032	AssignmentExpression	* range_end = ( char * ) malloc ( sizeof ( char ) )		4831932	0		=			
ANR	4832033	UnaryOperationExpression	* range_end		4831932	0					
ANR	4832034	UnaryOperator	*		4831932	0					
ANR	4832035	Identifier	range_end		4831932	1					
ANR	4832036	CastExpression	( char * ) malloc ( sizeof ( char ) )		4831932	1					
ANR	4832037	CastTarget	char *		4831932	0					
ANR	4832038	CallExpression	malloc ( sizeof ( char ) )		4831932	1					
ANR	4832039	Callee	malloc		4831932	0					
ANR	4832040	Identifier	malloc		4831932	0					
ANR	4832041	ArgumentList	sizeof ( char )		4831932	1					
ANR	4832042	Argument	sizeof ( char )		4831932	0					
ANR	4832043	SizeofExpression	sizeof ( char )		4831932	0					
ANR	4832044	Sizeof	sizeof		4831932	0					
ANR	4832045	SizeofOperand	char		4831932	1					
ANR	4832046	ExpressionStatement	* * range_end = '\\0'	203:2:5166:5184	4831932	3	True				
ANR	4832047	AssignmentExpression	* * range_end = '\\0'		4831932	0		=			
ANR	4832048	UnaryOperationExpression	* * range_end		4831932	0					
ANR	4832049	UnaryOperator	*		4831932	0					
ANR	4832050	UnaryOperationExpression	* range_end		4831932	1					
ANR	4832051	UnaryOperator	*		4831932	0					
ANR	4832052	Identifier	range_end		4831932	1					
ANR	4832053	PrimaryExpression	'\\0'		4831932	1					
ANR	4832054	ElseStatement	else		4831932	0					
ANR	4832055	CompoundStatement		15:8:474:474	4831932	0					
ANR	4832056	ForStatement	for ( c3 = c2 - 1 ; isspace ( * c3 ) ; c3 -- )		4831932	0					
ANR	4832057	ForInit	c3 = c2 - 1 ;	207:7:5225:5232	4831932	0	True				
ANR	4832058	AssignmentExpression	c3 = c2 - 1		4831932	0		=			
ANR	4832059	Identifier	c3		4831932	0					
ANR	4832060	AdditiveExpression	c2 - 1		4831932	1		-			
ANR	4832061	Identifier	c2		4831932	0					
ANR	4832062	PrimaryExpression	1		4831932	1					
ANR	4832063	Condition	isspace ( * c3 )	207:16:5234:5245	4831932	1	True				
ANR	4832064	CallExpression	isspace ( * c3 )		4831932	0					
ANR	4832065	Callee	isspace		4831932	0					
ANR	4832066	Identifier	isspace		4831932	0					
ANR	4832067	ArgumentList	* c3		4831932	1					
ANR	4832068	Argument	* c3		4831932	0					
ANR	4832069	UnaryOperationExpression	* c3		4831932	0					
ANR	4832070	UnaryOperator	*		4831932	0					
ANR	4832071	Identifier	c3		4831932	1					
ANR	4832072	PostIncDecOperationExpression	c3 --	207:30:5248:5251	4831932	2	True				
ANR	4832073	Identifier	c3		4831932	0					
ANR	4832074	IncDec	--		4831932	1					
ANR	4832075	ExpressionStatement		207:35:5253:5253	4831932	3	True				
ANR	4832076	ExpressionStatement	"* range_start = ( char * ) calloc ( ( c3 - c1 + 2 ) , sizeof ( char ) )"	208:2:5294:5348	4831932	1	True				
ANR	4832077	AssignmentExpression	"* range_start = ( char * ) calloc ( ( c3 - c1 + 2 ) , sizeof ( char ) )"		4831932	0		=			
ANR	4832078	UnaryOperationExpression	* range_start		4831932	0					
ANR	4832079	UnaryOperator	*		4831932	0					
ANR	4832080	Identifier	range_start		4831932	1					
ANR	4832081	CastExpression	"( char * ) calloc ( ( c3 - c1 + 2 ) , sizeof ( char ) )"		4831932	1					
ANR	4832082	CastTarget	char *		4831932	0					
ANR	4832083	CallExpression	"calloc ( ( c3 - c1 + 2 ) , sizeof ( char ) )"		4831932	1					
ANR	4832084	Callee	calloc		4831932	0					
ANR	4832085	Identifier	calloc		4831932	0					
ANR	4832086	ArgumentList	c3 - c1 + 2		4831932	1					
ANR	4832087	Argument	c3 - c1 + 2		4831932	0					
ANR	4832088	AdditiveExpression	c3 - c1 + 2		4831932	0		-			
ANR	4832089	Identifier	c3		4831932	0					
ANR	4832090	AdditiveExpression	c1 + 2		4831932	1		+			
ANR	4832091	Identifier	c1		4831932	0					
ANR	4832092	PrimaryExpression	2		4831932	1					
ANR	4832093	Argument	sizeof ( char )		4831932	1					
ANR	4832094	SizeofExpression	sizeof ( char )		4831932	0					
ANR	4832095	Sizeof	sizeof		4831932	0					
ANR	4832096	SizeofOperand	char		4831932	1					
ANR	4832097	ExpressionStatement	"strncat ( * range_start , c1 , c3 - c1 + 1 )"	209:2:5352:5386	4831932	2	True				
ANR	4832098	CallExpression	"strncat ( * range_start , c1 , c3 - c1 + 1 )"		4831932	0					
ANR	4832099	Callee	strncat		4831932	0					
ANR	4832100	Identifier	strncat		4831932	0					
ANR	4832101	ArgumentList	* range_start		4831932	1					
ANR	4832102	Argument	* range_start		4831932	0					
ANR	4832103	UnaryOperationExpression	* range_start		4831932	0					
ANR	4832104	UnaryOperator	*		4831932	0					
ANR	4832105	Identifier	range_start		4831932	1					
ANR	4832106	Argument	c1		4831932	1					
ANR	4832107	Identifier	c1		4831932	0					
ANR	4832108	Argument	c3 - c1 + 1		4831932	2					
ANR	4832109	AdditiveExpression	c3 - c1 + 1		4831932	0		-			
ANR	4832110	Identifier	c3		4831932	0					
ANR	4832111	AdditiveExpression	c1 + 1		4831932	1		+			
ANR	4832112	Identifier	c1		4831932	0					
ANR	4832113	PrimaryExpression	1		4831932	1					
ANR	4832114	ForStatement	for ( c1 = c2 ; * c1 ; c1 ++ )		4831932	3					
ANR	4832115	ForInit	c1 = c2 ;	212:7:5415:5420	4831932	0	True				
ANR	4832116	AssignmentExpression	c1 = c2		4831932	0		=			
ANR	4832117	Identifier	c1		4831932	0					
ANR	4832118	Identifier	c2		4831932	1					
ANR	4832119	Condition	* c1	212:14:5422:5424	4831932	1	True				
ANR	4832120	UnaryOperationExpression	* c1		4831932	0					
ANR	4832121	UnaryOperator	*		4831932	0					
ANR	4832122	Identifier	c1		4831932	1					
ANR	4832123	PostIncDecOperationExpression	c1 ++	212:19:5427:5430	4831932	2	True				
ANR	4832124	Identifier	c1		4831932	0					
ANR	4832125	IncDec	++		4831932	1					
ANR	4832126	ExpressionStatement		212:24:5432:5432	4831932	3	True				
ANR	4832127	ForStatement	for ( c3 = c1 - 1 ; isspace ( * c3 ) ; c3 -- )		4831932	4					
ANR	4832128	ForInit	c3 = c1 - 1 ;	213:7:5502:5509	4831932	0	True				
ANR	4832129	AssignmentExpression	c3 = c1 - 1		4831932	0		=			
ANR	4832130	Identifier	c3		4831932	0					
ANR	4832131	AdditiveExpression	c1 - 1		4831932	1		-			
ANR	4832132	Identifier	c1		4831932	0					
ANR	4832133	PrimaryExpression	1		4831932	1					
ANR	4832134	Condition	isspace ( * c3 )	213:16:5511:5522	4831932	1	True				
ANR	4832135	CallExpression	isspace ( * c3 )		4831932	0					
ANR	4832136	Callee	isspace		4831932	0					
ANR	4832137	Identifier	isspace		4831932	0					
ANR	4832138	ArgumentList	* c3		4831932	1					
ANR	4832139	Argument	* c3		4831932	0					
ANR	4832140	UnaryOperationExpression	* c3		4831932	0					
ANR	4832141	UnaryOperator	*		4831932	0					
ANR	4832142	Identifier	c3		4831932	1					
ANR	4832143	PostIncDecOperationExpression	c3 --	213:30:5525:5528	4831932	2	True				
ANR	4832144	Identifier	c3		4831932	0					
ANR	4832145	IncDec	--		4831932	1					
ANR	4832146	ExpressionStatement		213:35:5530:5530	4831932	3	True				
ANR	4832147	ForStatement	for ( c2 ++ ; c2 <= c1 && isspace ( * c2 ) ; c2 ++ )		4831932	5					
ANR	4832148	ForInit	c2 ++ ;	214:7:5576:5580	4831932	0	True				
ANR	4832149	PostIncDecOperationExpression	c2 ++		4831932	0					
ANR	4832150	Identifier	c2		4831932	0					
ANR	4832151	IncDec	++		4831932	1					
ANR	4832152	Condition	c2 <= c1 && isspace ( * c2 )	214:13:5582:5603	4831932	1	True				
ANR	4832153	AndExpression	c2 <= c1 && isspace ( * c2 )		4831932	0		&&			
ANR	4832154	RelationalExpression	c2 <= c1		4831932	0		<=			
ANR	4832155	Identifier	c2		4831932	0					
ANR	4832156	Identifier	c1		4831932	1					
ANR	4832157	CallExpression	isspace ( * c2 )		4831932	1					
ANR	4832158	Callee	isspace		4831932	0					
ANR	4832159	Identifier	isspace		4831932	0					
ANR	4832160	ArgumentList	* c2		4831932	1					
ANR	4832161	Argument	* c2		4831932	0					
ANR	4832162	UnaryOperationExpression	* c2		4831932	0					
ANR	4832163	UnaryOperator	*		4831932	0					
ANR	4832164	Identifier	c2		4831932	1					
ANR	4832165	PostIncDecOperationExpression	c2 ++	214:37:5606:5609	4831932	2	True				
ANR	4832166	Identifier	c2		4831932	0					
ANR	4832167	IncDec	++		4831932	1					
ANR	4832168	ExpressionStatement		214:42:5611:5611	4831932	3	True				
ANR	4832169	ExpressionStatement	"* range_end = ( char * ) calloc ( ( c3 - c2 + 2 ) , sizeof ( char ) )"	215:2:5641:5693	4831932	6	True				
ANR	4832170	AssignmentExpression	"* range_end = ( char * ) calloc ( ( c3 - c2 + 2 ) , sizeof ( char ) )"		4831932	0		=			
ANR	4832171	UnaryOperationExpression	* range_end		4831932	0					
ANR	4832172	UnaryOperator	*		4831932	0					
ANR	4832173	Identifier	range_end		4831932	1					
ANR	4832174	CastExpression	"( char * ) calloc ( ( c3 - c2 + 2 ) , sizeof ( char ) )"		4831932	1					
ANR	4832175	CastTarget	char *		4831932	0					
ANR	4832176	CallExpression	"calloc ( ( c3 - c2 + 2 ) , sizeof ( char ) )"		4831932	1					
ANR	4832177	Callee	calloc		4831932	0					
ANR	4832178	Identifier	calloc		4831932	0					
ANR	4832179	ArgumentList	c3 - c2 + 2		4831932	1					
ANR	4832180	Argument	c3 - c2 + 2		4831932	0					
ANR	4832181	AdditiveExpression	c3 - c2 + 2		4831932	0		-			
ANR	4832182	Identifier	c3		4831932	0					
ANR	4832183	AdditiveExpression	c2 + 2		4831932	1		+			
ANR	4832184	Identifier	c2		4831932	0					
ANR	4832185	PrimaryExpression	2		4831932	1					
ANR	4832186	Argument	sizeof ( char )		4831932	1					
ANR	4832187	SizeofExpression	sizeof ( char )		4831932	0					
ANR	4832188	Sizeof	sizeof		4831932	0					
ANR	4832189	SizeofOperand	char		4831932	1					
ANR	4832190	ExpressionStatement	"strncat ( * range_end , c2 , c3 - c2 + 1 )"	216:2:5697:5729	4831932	7	True				
ANR	4832191	CallExpression	"strncat ( * range_end , c2 , c3 - c2 + 1 )"		4831932	0					
ANR	4832192	Callee	strncat		4831932	0					
ANR	4832193	Identifier	strncat		4831932	0					
ANR	4832194	ArgumentList	* range_end		4831932	1					
ANR	4832195	Argument	* range_end		4831932	0					
ANR	4832196	UnaryOperationExpression	* range_end		4831932	0					
ANR	4832197	UnaryOperator	*		4831932	0					
ANR	4832198	Identifier	range_end		4831932	1					
ANR	4832199	Argument	c2		4831932	1					
ANR	4832200	Identifier	c2		4831932	0					
ANR	4832201	Argument	c3 - c2 + 1		4831932	2					
ANR	4832202	AdditiveExpression	c3 - c2 + 1		4831932	0		-			
ANR	4832203	Identifier	c3		4831932	0					
ANR	4832204	AdditiveExpression	c2 + 1		4831932	1		+			
ANR	4832205	Identifier	c2		4831932	0					
ANR	4832206	PrimaryExpression	1		4831932	1					
ANR	4832207	ReturnType	static void		4831932	1					
ANR	4832208	Identifier	compute_range		4831932	2					
ANR	4832209	ParameterList	"const char * range , char * * range_start , char * * range_end"		4831932	3					
ANR	4832210	Parameter	const char * range	190:14:4662:4678	4831932	0	True				
ANR	4832211	ParameterType	const char *		4831932	0					
ANR	4832212	Identifier	range		4831932	1					
ANR	4832213	Parameter	char * * range_start	190:33:4681:4698	4831932	1	True				
ANR	4832214	ParameterType	char * *		4831932	0					
ANR	4832215	Identifier	range_start		4831932	1					
ANR	4832216	Parameter	char * * range_end	190:53:4701:4716	4831932	2	True				
ANR	4832217	ParameterType	char * *		4831932	0					
ANR	4832218	Identifier	range_end		4831932	1					
ANR	4832219	CFGEntryNode	ENTRY		4831932		True				
ANR	4832220	CFGExitNode	EXIT		4831932		True				
ANR	4832221	Symbol	strcmp		4831932						
ANR	4832222	Symbol	range_end		4831932						
ANR	4832223	Symbol	malloc		4831932						
ANR	4832224	Symbol	* * range_start		4831932						
ANR	4832225	Symbol	NULL		4831932						
ANR	4832226	Symbol	range_start		4831932						
ANR	4832227	Symbol	isspace		4831932						
ANR	4832228	Symbol	* range_end		4831932						
ANR	4832229	Symbol	range		4831932						
ANR	4832230	Symbol	calloc		4831932						
ANR	4832231	Symbol	c1		4831932						
ANR	4832232	Symbol	c2		4831932						
ANR	4832233	Symbol	c3		4831932						
ANR	4832234	Symbol	* * range_end		4831932						
ANR	4832235	Symbol	* c3		4831932						
ANR	4832236	Symbol	* c2		4831932						
ANR	4832237	Symbol	* range_start		4831932						
ANR	4832238	Symbol	* c1		4831932						
ANR	4832239	Function	validate_integer_range_lower_bound	221:0:5738:6269							
ANR	4832240	FunctionDef	"validate_integer_range_lower_bound (const char * range_start , int * min)"		4832239	0					
ANR	4832241	CompoundStatement		222:70:5819:6269	4832239	0					
ANR	4832242	IdentifierDeclStatement	char * end_ptr ;	224:1:5823:5836	4832239	0	True				
ANR	4832243	IdentifierDecl	* end_ptr		4832239	0					
ANR	4832244	IdentifierDeclType	char *		4832239	0					
ANR	4832245	Identifier	end_ptr		4832239	1					
ANR	4832246	IdentifierDeclStatement	int valid ;	225:1:5839:5848	4832239	1	True				
ANR	4832247	IdentifierDecl	valid		4832239	0					
ANR	4832248	IdentifierDeclType	int		4832239	0					
ANR	4832249	Identifier	valid		4832239	1					
ANR	4832250	IfStatement	if ( * range_start )		4832239	2					
ANR	4832251	Condition	* range_start	227:5:5856:5867	4832239	0	True				
ANR	4832252	UnaryOperationExpression	* range_start		4832239	0					
ANR	4832253	UnaryOperator	*		4832239	0					
ANR	4832254	Identifier	range_start		4832239	1					
ANR	4832255	CompoundStatement		6:19:50:50	4832239	1					
ANR	4832256	ExpressionStatement	"* min = strtol ( range_start , & end_ptr , 10 )"	228:2:5874:5912	4832239	0	True				
ANR	4832257	AssignmentExpression	"* min = strtol ( range_start , & end_ptr , 10 )"		4832239	0		=			
ANR	4832258	UnaryOperationExpression	* min		4832239	0					
ANR	4832259	UnaryOperator	*		4832239	0					
ANR	4832260	Identifier	min		4832239	1					
ANR	4832261	CallExpression	"strtol ( range_start , & end_ptr , 10 )"		4832239	1					
ANR	4832262	Callee	strtol		4832239	0					
ANR	4832263	Identifier	strtol		4832239	0					
ANR	4832264	ArgumentList	range_start		4832239	1					
ANR	4832265	Argument	range_start		4832239	0					
ANR	4832266	Identifier	range_start		4832239	0					
ANR	4832267	Argument	& end_ptr		4832239	1					
ANR	4832268	UnaryOperationExpression	& end_ptr		4832239	0					
ANR	4832269	UnaryOperator	&		4832239	0					
ANR	4832270	Identifier	end_ptr		4832239	1					
ANR	4832271	Argument	10		4832239	2					
ANR	4832272	PrimaryExpression	10		4832239	0					
ANR	4832273	IfStatement	if ( end_ptr != range_start )		4832239	1					
ANR	4832274	Condition	end_ptr != range_start	230:6:5964:5985	4832239	0	True				
ANR	4832275	EqualityExpression	end_ptr != range_start		4832239	0		!=			
ANR	4832276	Identifier	end_ptr		4832239	0					
ANR	4832277	Identifier	range_start		4832239	1					
ANR	4832278	CompoundStatement		9:30:168:168	4832239	1					
ANR	4832279	ForStatement	for ( ; isspace ( * end_ptr ) ; end_ptr ++ )		4832239	0					
ANR	4832280	Condition	isspace ( * end_ptr )	232:11:6066:6082	4832239	0	True				
ANR	4832281	CallExpression	isspace ( * end_ptr )		4832239	0					
ANR	4832282	Callee	isspace		4832239	0					
ANR	4832283	Identifier	isspace		4832239	0					
ANR	4832284	ArgumentList	* end_ptr		4832239	1					
ANR	4832285	Argument	* end_ptr		4832239	0					
ANR	4832286	UnaryOperationExpression	* end_ptr		4832239	0					
ANR	4832287	UnaryOperator	*		4832239	0					
ANR	4832288	Identifier	end_ptr		4832239	1					
ANR	4832289	PostIncDecOperationExpression	end_ptr ++	232:30:6085:6093	4832239	1	True				
ANR	4832290	Identifier	end_ptr		4832239	0					
ANR	4832291	IncDec	++		4832239	1					
ANR	4832292	ExpressionStatement		232:40:6095:6095	4832239	2	True				
ANR	4832293	ExpressionStatement	valid = ( * end_ptr == '\\0' )	233:3:6100:6126	4832239	1	True				
ANR	4832294	AssignmentExpression	valid = ( * end_ptr == '\\0' )		4832239	0		=			
ANR	4832295	Identifier	valid		4832239	0					
ANR	4832296	EqualityExpression	* end_ptr == '\\0'		4832239	1		==			
ANR	4832297	UnaryOperationExpression	* end_ptr		4832239	0					
ANR	4832298	UnaryOperator	*		4832239	0					
ANR	4832299	Identifier	end_ptr		4832239	1					
ANR	4832300	PrimaryExpression	'\\0'		4832239	1					
ANR	4832301	ElseStatement	else		4832239	0					
ANR	4832302	CompoundStatement		13:9:317:317	4832239	0					
ANR	4832303	ExpressionStatement	valid = 0	235:3:6142:6151	4832239	0	True				
ANR	4832304	AssignmentExpression	valid = 0		4832239	0		=			
ANR	4832305	Identifier	valid		4832239	0					
ANR	4832306	PrimaryExpression	0		4832239	1					
ANR	4832307	ElseStatement	else		4832239	0					
ANR	4832308	CompoundStatement		16:8:345:345	4832239	0					
ANR	4832309	ExpressionStatement	valid = 0	238:2:6169:6178	4832239	0	True				
ANR	4832310	AssignmentExpression	valid = 0		4832239	0		=			
ANR	4832311	Identifier	valid		4832239	0					
ANR	4832312	PrimaryExpression	0		4832239	1					
ANR	4832313	IfStatement	if ( ! valid )		4832239	3					
ANR	4832314	Condition	! valid	241:5:6189:6194	4832239	0	True				
ANR	4832315	UnaryOperationExpression	! valid		4832239	0					
ANR	4832316	UnaryOperator	!		4832239	0					
ANR	4832317	Identifier	valid		4832239	1					
ANR	4832318	CompoundStatement		20:13:377:377	4832239	1					
ANR	4832319	ExpressionStatement	* min = INT_MIN	243:2:6234:6248	4832239	0	True				
ANR	4832320	AssignmentExpression	* min = INT_MIN		4832239	0		=			
ANR	4832321	UnaryOperationExpression	* min		4832239	0					
ANR	4832322	UnaryOperator	*		4832239	0					
ANR	4832323	Identifier	min		4832239	1					
ANR	4832324	Identifier	INT_MIN		4832239	1					
ANR	4832325	ReturnStatement	return valid ;	246:1:6255:6267	4832239	4	True				
ANR	4832326	Identifier	valid		4832239	0					
ANR	4832327	ReturnType	static int		4832239	1					
ANR	4832328	Identifier	validate_integer_range_lower_bound		4832239	2					
ANR	4832329	ParameterList	"const char * range_start , int * min"		4832239	3					
ANR	4832330	Parameter	const char * range_start	222:35:5784:5806	4832239	0	True				
ANR	4832331	ParameterType	const char *		4832239	0					
ANR	4832332	Identifier	range_start		4832239	1					
ANR	4832333	Parameter	int * min	222:60:5809:5816	4832239	1	True				
ANR	4832334	ParameterType	int *		4832239	0					
ANR	4832335	Identifier	min		4832239	1					
ANR	4832336	CFGEntryNode	ENTRY		4832239		True				
ANR	4832337	CFGExitNode	EXIT		4832239		True				
ANR	4832338	Symbol	valid		4832239						
ANR	4832339	Symbol	end_ptr		4832239						
ANR	4832340	Symbol	min		4832239						
ANR	4832341	Symbol	strtol		4832239						
ANR	4832342	Symbol	* range_start		4832239						
ANR	4832343	Symbol	& end_ptr		4832239						
ANR	4832344	Symbol	range_start		4832239						
ANR	4832345	Symbol	isspace		4832239						
ANR	4832346	Symbol	* min		4832239						
ANR	4832347	Symbol	* end_ptr		4832239						
ANR	4832348	Symbol	INT_MIN		4832239						
ANR	4832349	Function	validate_integer_range_upper_bound	249:0:6272:6795							
ANR	4832350	FunctionDef	"validate_integer_range_upper_bound (const char * range_end , int * max)"		4832349	0					
ANR	4832351	CompoundStatement		250:68:6351:6795	4832349	0					
ANR	4832352	IdentifierDeclStatement	char * end_ptr ;	252:1:6355:6368	4832349	0	True				
ANR	4832353	IdentifierDecl	* end_ptr		4832349	0					
ANR	4832354	IdentifierDeclType	char *		4832349	0					
ANR	4832355	Identifier	end_ptr		4832349	1					
ANR	4832356	IdentifierDeclStatement	int valid ;	253:1:6371:6380	4832349	1	True				
ANR	4832357	IdentifierDecl	valid		4832349	0					
ANR	4832358	IdentifierDeclType	int		4832349	0					
ANR	4832359	Identifier	valid		4832349	1					
ANR	4832360	IfStatement	if ( * range_end )		4832349	2					
ANR	4832361	Condition	* range_end	255:5:6388:6397	4832349	0	True				
ANR	4832362	UnaryOperationExpression	* range_end		4832349	0					
ANR	4832363	UnaryOperator	*		4832349	0					
ANR	4832364	Identifier	range_end		4832349	1					
ANR	4832365	CompoundStatement		6:17:48:48	4832349	1					
ANR	4832366	ExpressionStatement	"* max = strtol ( range_end , & end_ptr , 10 )"	256:2:6404:6440	4832349	0	True				
ANR	4832367	AssignmentExpression	"* max = strtol ( range_end , & end_ptr , 10 )"		4832349	0		=			
ANR	4832368	UnaryOperationExpression	* max		4832349	0					
ANR	4832369	UnaryOperator	*		4832349	0					
ANR	4832370	Identifier	max		4832349	1					
ANR	4832371	CallExpression	"strtol ( range_end , & end_ptr , 10 )"		4832349	1					
ANR	4832372	Callee	strtol		4832349	0					
ANR	4832373	Identifier	strtol		4832349	0					
ANR	4832374	ArgumentList	range_end		4832349	1					
ANR	4832375	Argument	range_end		4832349	0					
ANR	4832376	Identifier	range_end		4832349	0					
ANR	4832377	Argument	& end_ptr		4832349	1					
ANR	4832378	UnaryOperationExpression	& end_ptr		4832349	0					
ANR	4832379	UnaryOperator	&		4832349	0					
ANR	4832380	Identifier	end_ptr		4832349	1					
ANR	4832381	Argument	10		4832349	2					
ANR	4832382	PrimaryExpression	10		4832349	0					
ANR	4832383	IfStatement	if ( end_ptr != range_end )		4832349	1					
ANR	4832384	Condition	end_ptr != range_end	258:6:6492:6511	4832349	0	True				
ANR	4832385	EqualityExpression	end_ptr != range_end		4832349	0		!=			
ANR	4832386	Identifier	end_ptr		4832349	0					
ANR	4832387	Identifier	range_end		4832349	1					
ANR	4832388	CompoundStatement		9:28:162:162	4832349	1					
ANR	4832389	ForStatement	for ( ; isspace ( * end_ptr ) ; end_ptr ++ )		4832349	0					
ANR	4832390	Condition	isspace ( * end_ptr )	260:11:6592:6608	4832349	0	True				
ANR	4832391	CallExpression	isspace ( * end_ptr )		4832349	0					
ANR	4832392	Callee	isspace		4832349	0					
ANR	4832393	Identifier	isspace		4832349	0					
ANR	4832394	ArgumentList	* end_ptr		4832349	1					
ANR	4832395	Argument	* end_ptr		4832349	0					
ANR	4832396	UnaryOperationExpression	* end_ptr		4832349	0					
ANR	4832397	UnaryOperator	*		4832349	0					
ANR	4832398	Identifier	end_ptr		4832349	1					
ANR	4832399	PostIncDecOperationExpression	end_ptr ++	260:30:6611:6619	4832349	1	True				
ANR	4832400	Identifier	end_ptr		4832349	0					
ANR	4832401	IncDec	++		4832349	1					
ANR	4832402	ExpressionStatement		260:40:6621:6621	4832349	2	True				
ANR	4832403	ExpressionStatement	valid = ( * end_ptr == '\\0' )	261:3:6626:6652	4832349	1	True				
ANR	4832404	AssignmentExpression	valid = ( * end_ptr == '\\0' )		4832349	0		=			
ANR	4832405	Identifier	valid		4832349	0					
ANR	4832406	EqualityExpression	* end_ptr == '\\0'		4832349	1		==			
ANR	4832407	UnaryOperationExpression	* end_ptr		4832349	0					
ANR	4832408	UnaryOperator	*		4832349	0					
ANR	4832409	Identifier	end_ptr		4832349	1					
ANR	4832410	PrimaryExpression	'\\0'		4832349	1					
ANR	4832411	ElseStatement	else		4832349	0					
ANR	4832412	CompoundStatement		13:9:311:311	4832349	0					
ANR	4832413	ExpressionStatement	valid = 0	263:3:6668:6677	4832349	0	True				
ANR	4832414	AssignmentExpression	valid = 0		4832349	0		=			
ANR	4832415	Identifier	valid		4832349	0					
ANR	4832416	PrimaryExpression	0		4832349	1					
ANR	4832417	ElseStatement	else		4832349	0					
ANR	4832418	CompoundStatement		16:8:339:339	4832349	0					
ANR	4832419	ExpressionStatement	valid = 0	266:2:6695:6704	4832349	0	True				
ANR	4832420	AssignmentExpression	valid = 0		4832349	0		=			
ANR	4832421	Identifier	valid		4832349	0					
ANR	4832422	PrimaryExpression	0		4832349	1					
ANR	4832423	IfStatement	if ( ! valid )		4832349	3					
ANR	4832424	Condition	! valid	269:5:6715:6720	4832349	0	True				
ANR	4832425	UnaryOperationExpression	! valid		4832349	0					
ANR	4832426	UnaryOperator	!		4832349	0					
ANR	4832427	Identifier	valid		4832349	1					
ANR	4832428	CompoundStatement		20:13:371:371	4832349	1					
ANR	4832429	ExpressionStatement	* max = INT_MAX	271:2:6760:6774	4832349	0	True				
ANR	4832430	AssignmentExpression	* max = INT_MAX		4832349	0		=			
ANR	4832431	UnaryOperationExpression	* max		4832349	0					
ANR	4832432	UnaryOperator	*		4832349	0					
ANR	4832433	Identifier	max		4832349	1					
ANR	4832434	Identifier	INT_MAX		4832349	1					
ANR	4832435	ReturnStatement	return valid ;	274:1:6781:6793	4832349	4	True				
ANR	4832436	Identifier	valid		4832349	0					
ANR	4832437	ReturnType	static int		4832349	1					
ANR	4832438	Identifier	validate_integer_range_upper_bound		4832349	2					
ANR	4832439	ParameterList	"const char * range_end , int * max"		4832349	3					
ANR	4832440	Parameter	const char * range_end	250:35:6318:6338	4832349	0	True				
ANR	4832441	ParameterType	const char *		4832349	0					
ANR	4832442	Identifier	range_end		4832349	1					
ANR	4832443	Parameter	int * max	250:58:6341:6348	4832349	1	True				
ANR	4832444	ParameterType	int *		4832349	0					
ANR	4832445	Identifier	max		4832349	1					
ANR	4832446	CFGEntryNode	ENTRY		4832349		True				
ANR	4832447	CFGExitNode	EXIT		4832349		True				
ANR	4832448	Symbol	valid		4832349						
ANR	4832449	Symbol	range_end		4832349						
ANR	4832450	Symbol	end_ptr		4832349						
ANR	4832451	Symbol	max		4832349						
ANR	4832452	Symbol	strtol		4832349						
ANR	4832453	Symbol	& end_ptr		4832349						
ANR	4832454	Symbol	* range_end		4832349						
ANR	4832455	Symbol	isspace		4832349						
ANR	4832456	Symbol	INT_MAX		4832349						
ANR	4832457	Symbol	* end_ptr		4832349						
ANR	4832458	Symbol	* max		4832349						
ANR	4832459	Function	validate_double_range_lower_bound	277:0:6798:7331							
ANR	4832460	FunctionDef	"validate_double_range_lower_bound (const char * range_start , double * min)"		4832459	0					
ANR	4832461	CompoundStatement		278:72:6881:7331	4832459	0					
ANR	4832462	IdentifierDeclStatement	char * end_ptr ;	280:1:6885:6898	4832459	0	True				
ANR	4832463	IdentifierDecl	* end_ptr		4832459	0					
ANR	4832464	IdentifierDeclType	char *		4832459	0					
ANR	4832465	Identifier	end_ptr		4832459	1					
ANR	4832466	IdentifierDeclStatement	int valid ;	281:1:6901:6910	4832459	1	True				
ANR	4832467	IdentifierDecl	valid		4832459	0					
ANR	4832468	IdentifierDeclType	int		4832459	0					
ANR	4832469	Identifier	valid		4832459	1					
ANR	4832470	IfStatement	if ( * range_start )		4832459	2					
ANR	4832471	Condition	* range_start	283:5:6918:6929	4832459	0	True				
ANR	4832472	UnaryOperationExpression	* range_start		4832459	0					
ANR	4832473	UnaryOperator	*		4832459	0					
ANR	4832474	Identifier	range_start		4832459	1					
ANR	4832475	CompoundStatement		6:19:50:50	4832459	1					
ANR	4832476	ExpressionStatement	"* min = strtol ( range_start , & end_ptr , 10 )"	284:2:6936:6974	4832459	0	True				
ANR	4832477	AssignmentExpression	"* min = strtol ( range_start , & end_ptr , 10 )"		4832459	0		=			
ANR	4832478	UnaryOperationExpression	* min		4832459	0					
ANR	4832479	UnaryOperator	*		4832459	0					
ANR	4832480	Identifier	min		4832459	1					
ANR	4832481	CallExpression	"strtol ( range_start , & end_ptr , 10 )"		4832459	1					
ANR	4832482	Callee	strtol		4832459	0					
ANR	4832483	Identifier	strtol		4832459	0					
ANR	4832484	ArgumentList	range_start		4832459	1					
ANR	4832485	Argument	range_start		4832459	0					
ANR	4832486	Identifier	range_start		4832459	0					
ANR	4832487	Argument	& end_ptr		4832459	1					
ANR	4832488	UnaryOperationExpression	& end_ptr		4832459	0					
ANR	4832489	UnaryOperator	&		4832459	0					
ANR	4832490	Identifier	end_ptr		4832459	1					
ANR	4832491	Argument	10		4832459	2					
ANR	4832492	PrimaryExpression	10		4832459	0					
ANR	4832493	IfStatement	if ( end_ptr != range_start )		4832459	1					
ANR	4832494	Condition	end_ptr != range_start	286:6:7026:7047	4832459	0	True				
ANR	4832495	EqualityExpression	end_ptr != range_start		4832459	0		!=			
ANR	4832496	Identifier	end_ptr		4832459	0					
ANR	4832497	Identifier	range_start		4832459	1					
ANR	4832498	CompoundStatement		9:30:168:168	4832459	1					
ANR	4832499	ForStatement	for ( ; isspace ( * end_ptr ) ; end_ptr ++ )		4832459	0					
ANR	4832500	Condition	isspace ( * end_ptr )	288:11:7128:7144	4832459	0	True				
ANR	4832501	CallExpression	isspace ( * end_ptr )		4832459	0					
ANR	4832502	Callee	isspace		4832459	0					
ANR	4832503	Identifier	isspace		4832459	0					
ANR	4832504	ArgumentList	* end_ptr		4832459	1					
ANR	4832505	Argument	* end_ptr		4832459	0					
ANR	4832506	UnaryOperationExpression	* end_ptr		4832459	0					
ANR	4832507	UnaryOperator	*		4832459	0					
ANR	4832508	Identifier	end_ptr		4832459	1					
ANR	4832509	PostIncDecOperationExpression	end_ptr ++	288:30:7147:7155	4832459	1	True				
ANR	4832510	Identifier	end_ptr		4832459	0					
ANR	4832511	IncDec	++		4832459	1					
ANR	4832512	ExpressionStatement		288:40:7157:7157	4832459	2	True				
ANR	4832513	ExpressionStatement	valid = ( * end_ptr == '\\0' )	289:3:7162:7188	4832459	1	True				
ANR	4832514	AssignmentExpression	valid = ( * end_ptr == '\\0' )		4832459	0		=			
ANR	4832515	Identifier	valid		4832459	0					
ANR	4832516	EqualityExpression	* end_ptr == '\\0'		4832459	1		==			
ANR	4832517	UnaryOperationExpression	* end_ptr		4832459	0					
ANR	4832518	UnaryOperator	*		4832459	0					
ANR	4832519	Identifier	end_ptr		4832459	1					
ANR	4832520	PrimaryExpression	'\\0'		4832459	1					
ANR	4832521	ElseStatement	else		4832459	0					
ANR	4832522	CompoundStatement		13:9:317:317	4832459	0					
ANR	4832523	ExpressionStatement	valid = 0	291:3:7204:7213	4832459	0	True				
ANR	4832524	AssignmentExpression	valid = 0		4832459	0		=			
ANR	4832525	Identifier	valid		4832459	0					
ANR	4832526	PrimaryExpression	0		4832459	1					
ANR	4832527	ElseStatement	else		4832459	0					
ANR	4832528	CompoundStatement		16:8:345:345	4832459	0					
ANR	4832529	ExpressionStatement	valid = 0	294:2:7231:7240	4832459	0	True				
ANR	4832530	AssignmentExpression	valid = 0		4832459	0		=			
ANR	4832531	Identifier	valid		4832459	0					
ANR	4832532	PrimaryExpression	0		4832459	1					
ANR	4832533	IfStatement	if ( ! valid )		4832459	3					
ANR	4832534	Condition	! valid	297:5:7251:7256	4832459	0	True				
ANR	4832535	UnaryOperationExpression	! valid		4832459	0					
ANR	4832536	UnaryOperator	!		4832459	0					
ANR	4832537	Identifier	valid		4832459	1					
ANR	4832538	CompoundStatement		20:13:377:377	4832459	1					
ANR	4832539	ExpressionStatement	* min = DBL_MIN	299:2:7296:7310	4832459	0	True				
ANR	4832540	AssignmentExpression	* min = DBL_MIN		4832459	0		=			
ANR	4832541	UnaryOperationExpression	* min		4832459	0					
ANR	4832542	UnaryOperator	*		4832459	0					
ANR	4832543	Identifier	min		4832459	1					
ANR	4832544	Identifier	DBL_MIN		4832459	1					
ANR	4832545	ReturnStatement	return valid ;	302:1:7317:7329	4832459	4	True				
ANR	4832546	Identifier	valid		4832459	0					
ANR	4832547	ReturnType	static int		4832459	1					
ANR	4832548	Identifier	validate_double_range_lower_bound		4832459	2					
ANR	4832549	ParameterList	"const char * range_start , double * min"		4832459	3					
ANR	4832550	Parameter	const char * range_start	278:34:6843:6865	4832459	0	True				
ANR	4832551	ParameterType	const char *		4832459	0					
ANR	4832552	Identifier	range_start		4832459	1					
ANR	4832553	Parameter	double * min	278:59:6868:6878	4832459	1	True				
ANR	4832554	ParameterType	double *		4832459	0					
ANR	4832555	Identifier	min		4832459	1					
ANR	4832556	CFGEntryNode	ENTRY		4832459		True				
ANR	4832557	CFGExitNode	EXIT		4832459		True				
ANR	4832558	Symbol	valid		4832459						
ANR	4832559	Symbol	end_ptr		4832459						
ANR	4832560	Symbol	min		4832459						
ANR	4832561	Symbol	DBL_MIN		4832459						
ANR	4832562	Symbol	strtol		4832459						
ANR	4832563	Symbol	* range_start		4832459						
ANR	4832564	Symbol	& end_ptr		4832459						
ANR	4832565	Symbol	range_start		4832459						
ANR	4832566	Symbol	isspace		4832459						
ANR	4832567	Symbol	* min		4832459						
ANR	4832568	Symbol	* end_ptr		4832459						
ANR	4832569	Function	validate_double_range_upper_bound	305:0:7334:7856							
ANR	4832570	FunctionDef	"validate_double_range_upper_bound (const char * range_end , double * max)"		4832569	0					
ANR	4832571	CompoundStatement		306:70:7415:7856	4832569	0					
ANR	4832572	IdentifierDeclStatement	char * end_ptr ;	308:1:7419:7432	4832569	0	True				
ANR	4832573	IdentifierDecl	* end_ptr		4832569	0					
ANR	4832574	IdentifierDeclType	char *		4832569	0					
ANR	4832575	Identifier	end_ptr		4832569	1					
ANR	4832576	IdentifierDeclStatement	int valid ;	309:1:7435:7444	4832569	1	True				
ANR	4832577	IdentifierDecl	valid		4832569	0					
ANR	4832578	IdentifierDeclType	int		4832569	0					
ANR	4832579	Identifier	valid		4832569	1					
ANR	4832580	IfStatement	if ( * range_end )		4832569	2					
ANR	4832581	Condition	* range_end	311:5:7452:7461	4832569	0	True				
ANR	4832582	UnaryOperationExpression	* range_end		4832569	0					
ANR	4832583	UnaryOperator	*		4832569	0					
ANR	4832584	Identifier	range_end		4832569	1					
ANR	4832585	CompoundStatement		6:17:48:48	4832569	1					
ANR	4832586	ExpressionStatement	"* max = strtod ( range_end , & end_ptr )"	312:2:7468:7501	4832569	0	True				
ANR	4832587	AssignmentExpression	"* max = strtod ( range_end , & end_ptr )"		4832569	0		=			
ANR	4832588	UnaryOperationExpression	* max		4832569	0					
ANR	4832589	UnaryOperator	*		4832569	0					
ANR	4832590	Identifier	max		4832569	1					
ANR	4832591	CallExpression	"strtod ( range_end , & end_ptr )"		4832569	1					
ANR	4832592	Callee	strtod		4832569	0					
ANR	4832593	Identifier	strtod		4832569	0					
ANR	4832594	ArgumentList	range_end		4832569	1					
ANR	4832595	Argument	range_end		4832569	0					
ANR	4832596	Identifier	range_end		4832569	0					
ANR	4832597	Argument	& end_ptr		4832569	1					
ANR	4832598	UnaryOperationExpression	& end_ptr		4832569	0					
ANR	4832599	UnaryOperator	&		4832569	0					
ANR	4832600	Identifier	end_ptr		4832569	1					
ANR	4832601	IfStatement	if ( end_ptr != range_end )		4832569	1					
ANR	4832602	Condition	end_ptr != range_end	314:6:7553:7572	4832569	0	True				
ANR	4832603	EqualityExpression	end_ptr != range_end		4832569	0		!=			
ANR	4832604	Identifier	end_ptr		4832569	0					
ANR	4832605	Identifier	range_end		4832569	1					
ANR	4832606	CompoundStatement		9:28:159:159	4832569	1					
ANR	4832607	ForStatement	for ( ; isspace ( * end_ptr ) ; end_ptr ++ )		4832569	0					
ANR	4832608	Condition	isspace ( * end_ptr )	316:11:7653:7669	4832569	0	True				
ANR	4832609	CallExpression	isspace ( * end_ptr )		4832569	0					
ANR	4832610	Callee	isspace		4832569	0					
ANR	4832611	Identifier	isspace		4832569	0					
ANR	4832612	ArgumentList	* end_ptr		4832569	1					
ANR	4832613	Argument	* end_ptr		4832569	0					
ANR	4832614	UnaryOperationExpression	* end_ptr		4832569	0					
ANR	4832615	UnaryOperator	*		4832569	0					
ANR	4832616	Identifier	end_ptr		4832569	1					
ANR	4832617	PostIncDecOperationExpression	end_ptr ++	316:30:7672:7680	4832569	1	True				
ANR	4832618	Identifier	end_ptr		4832569	0					
ANR	4832619	IncDec	++		4832569	1					
ANR	4832620	ExpressionStatement		316:40:7682:7682	4832569	2	True				
ANR	4832621	ExpressionStatement	valid = ( * end_ptr == '\\0' )	317:3:7687:7713	4832569	1	True				
ANR	4832622	AssignmentExpression	valid = ( * end_ptr == '\\0' )		4832569	0		=			
ANR	4832623	Identifier	valid		4832569	0					
ANR	4832624	EqualityExpression	* end_ptr == '\\0'		4832569	1		==			
ANR	4832625	UnaryOperationExpression	* end_ptr		4832569	0					
ANR	4832626	UnaryOperator	*		4832569	0					
ANR	4832627	Identifier	end_ptr		4832569	1					
ANR	4832628	PrimaryExpression	'\\0'		4832569	1					
ANR	4832629	ElseStatement	else		4832569	0					
ANR	4832630	CompoundStatement		13:9:308:308	4832569	0					
ANR	4832631	ExpressionStatement	valid = 0	319:3:7729:7738	4832569	0	True				
ANR	4832632	AssignmentExpression	valid = 0		4832569	0		=			
ANR	4832633	Identifier	valid		4832569	0					
ANR	4832634	PrimaryExpression	0		4832569	1					
ANR	4832635	ElseStatement	else		4832569	0					
ANR	4832636	CompoundStatement		16:8:336:336	4832569	0					
ANR	4832637	ExpressionStatement	valid = 0	322:2:7756:7765	4832569	0	True				
ANR	4832638	AssignmentExpression	valid = 0		4832569	0		=			
ANR	4832639	Identifier	valid		4832569	0					
ANR	4832640	PrimaryExpression	0		4832569	1					
ANR	4832641	IfStatement	if ( ! valid )		4832569	3					
ANR	4832642	Condition	! valid	325:5:7776:7781	4832569	0	True				
ANR	4832643	UnaryOperationExpression	! valid		4832569	0					
ANR	4832644	UnaryOperator	!		4832569	0					
ANR	4832645	Identifier	valid		4832569	1					
ANR	4832646	CompoundStatement		20:13:368:368	4832569	1					
ANR	4832647	ExpressionStatement	* max = DBL_MAX	327:2:7821:7835	4832569	0	True				
ANR	4832648	AssignmentExpression	* max = DBL_MAX		4832569	0		=			
ANR	4832649	UnaryOperationExpression	* max		4832569	0					
ANR	4832650	UnaryOperator	*		4832569	0					
ANR	4832651	Identifier	max		4832569	1					
ANR	4832652	Identifier	DBL_MAX		4832569	1					
ANR	4832653	ReturnStatement	return valid ;	330:1:7842:7854	4832569	4	True				
ANR	4832654	Identifier	valid		4832569	0					
ANR	4832655	ReturnType	static int		4832569	1					
ANR	4832656	Identifier	validate_double_range_upper_bound		4832569	2					
ANR	4832657	ParameterList	"const char * range_end , double * max"		4832569	3					
ANR	4832658	Parameter	const char * range_end	306:34:7379:7399	4832569	0	True				
ANR	4832659	ParameterType	const char *		4832569	0					
ANR	4832660	Identifier	range_end		4832569	1					
ANR	4832661	Parameter	double * max	306:57:7402:7412	4832569	1	True				
ANR	4832662	ParameterType	double *		4832569	0					
ANR	4832663	Identifier	max		4832569	1					
ANR	4832664	CFGEntryNode	ENTRY		4832569		True				
ANR	4832665	CFGExitNode	EXIT		4832569		True				
ANR	4832666	Symbol	valid		4832569						
ANR	4832667	Symbol	range_end		4832569						
ANR	4832668	Symbol	DBL_MAX		4832569						
ANR	4832669	Symbol	end_ptr		4832569						
ANR	4832670	Symbol	max		4832569						
ANR	4832671	Symbol	& end_ptr		4832569						
ANR	4832672	Symbol	* range_end		4832569						
ANR	4832673	Symbol	isspace		4832569						
ANR	4832674	Symbol	* end_ptr		4832569						
ANR	4832675	Symbol	strtod		4832569						
ANR	4832676	Symbol	* max		4832569						
ANR	4832677	Function	validate_regex	333:0:7859:8907							
ANR	4832678	FunctionDef	"validate_regex (const char * pattern , const char * subject)"		4832677	0					
ANR	4832679	CompoundStatement		334:57:7927:8907	4832677	0					
ANR	4832680	IdentifierDeclStatement	pcre * re ;	336:1:7931:7939	4832677	0	True				
ANR	4832681	IdentifierDecl	* re		4832677	0					
ANR	4832682	IdentifierDeclType	pcre *		4832677	0					
ANR	4832683	Identifier	re		4832677	1					
ANR	4832684	IdentifierDeclStatement	const char * err ;	337:1:7942:7957	4832677	1	True				
ANR	4832685	IdentifierDecl	* err		4832677	0					
ANR	4832686	IdentifierDeclType	const char *		4832677	0					
ANR	4832687	Identifier	err		4832677	1					
ANR	4832688	IdentifierDeclStatement	int err_index ;	338:1:7960:7973	4832677	2	True				
ANR	4832689	IdentifierDecl	err_index		4832677	0					
ANR	4832690	IdentifierDeclType	int		4832677	0					
ANR	4832691	Identifier	err_index		4832677	1					
ANR	4832692	IdentifierDeclStatement	int group_count ;	339:4:7979:7994	4832677	3	True				
ANR	4832693	IdentifierDecl	group_count		4832677	0					
ANR	4832694	IdentifierDeclType	int		4832677	0					
ANR	4832695	Identifier	group_count		4832677	1					
ANR	4832696	IdentifierDeclStatement	int oveccount ;	340:1:7997:8010	4832677	4	True				
ANR	4832697	IdentifierDecl	oveccount		4832677	0					
ANR	4832698	IdentifierDeclType	int		4832677	0					
ANR	4832699	Identifier	oveccount		4832677	1					
ANR	4832700	IdentifierDeclStatement	int * ovector ;	341:1:8013:8025	4832677	5	True				
ANR	4832701	IdentifierDecl	* ovector		4832677	0					
ANR	4832702	IdentifierDeclType	int *		4832677	0					
ANR	4832703	Identifier	ovector		4832677	1					
ANR	4832704	IdentifierDeclStatement	int matches ;	342:1:8028:8039	4832677	6	True				
ANR	4832705	IdentifierDecl	matches		4832677	0					
ANR	4832706	IdentifierDeclType	int		4832677	0					
ANR	4832707	Identifier	matches		4832677	1					
ANR	4832708	IdentifierDeclStatement	int i ;	343:1:8042:8047	4832677	7	True				
ANR	4832709	IdentifierDecl	i		4832677	0					
ANR	4832710	IdentifierDeclType	int		4832677	0					
ANR	4832711	Identifier	i		4832677	1					
ANR	4832712	IdentifierDeclStatement	int is_valid = 0 ;	344:1:8050:8066	4832677	8	True				
ANR	4832713	IdentifierDecl	is_valid = 0		4832677	0					
ANR	4832714	IdentifierDeclType	int		4832677	0					
ANR	4832715	Identifier	is_valid		4832677	1					
ANR	4832716	AssignmentExpression	is_valid = 0		4832677	2		=			
ANR	4832717	Identifier	is_valid		4832677	0					
ANR	4832718	PrimaryExpression	0		4832677	1					
ANR	4832719	IdentifierDeclStatement	int subject_len ;	345:1:8069:8084	4832677	9	True				
ANR	4832720	IdentifierDecl	subject_len		4832677	0					
ANR	4832721	IdentifierDeclType	int		4832677	0					
ANR	4832722	Identifier	subject_len		4832677	1					
ANR	4832723	ExpressionStatement	"re = pcre_compile ( pattern , 0 , & err , & err_index , NULL )"	348:1:8130:8183	4832677	10	True				
ANR	4832724	AssignmentExpression	"re = pcre_compile ( pattern , 0 , & err , & err_index , NULL )"		4832677	0		=			
ANR	4832725	Identifier	re		4832677	0					
ANR	4832726	CallExpression	"pcre_compile ( pattern , 0 , & err , & err_index , NULL )"		4832677	1					
ANR	4832727	Callee	pcre_compile		4832677	0					
ANR	4832728	Identifier	pcre_compile		4832677	0					
ANR	4832729	ArgumentList	pattern		4832677	1					
ANR	4832730	Argument	pattern		4832677	0					
ANR	4832731	Identifier	pattern		4832677	0					
ANR	4832732	Argument	0		4832677	1					
ANR	4832733	PrimaryExpression	0		4832677	0					
ANR	4832734	Argument	& err		4832677	2					
ANR	4832735	UnaryOperationExpression	& err		4832677	0					
ANR	4832736	UnaryOperator	&		4832677	0					
ANR	4832737	Identifier	err		4832677	1					
ANR	4832738	Argument	& err_index		4832677	3					
ANR	4832739	UnaryOperationExpression	& err_index		4832677	0					
ANR	4832740	UnaryOperator	&		4832677	0					
ANR	4832741	Identifier	err_index		4832677	1					
ANR	4832742	Argument	NULL		4832677	4					
ANR	4832743	Identifier	NULL		4832677	0					
ANR	4832744	ExpressionStatement	"pcre_fullinfo ( re , NULL , PCRE_INFO_CAPTURECOUNT , & group_count )"	351:1:8264:8325	4832677	11	True				
ANR	4832745	CallExpression	"pcre_fullinfo ( re , NULL , PCRE_INFO_CAPTURECOUNT , & group_count )"		4832677	0					
ANR	4832746	Callee	pcre_fullinfo		4832677	0					
ANR	4832747	Identifier	pcre_fullinfo		4832677	0					
ANR	4832748	ArgumentList	re		4832677	1					
ANR	4832749	Argument	re		4832677	0					
ANR	4832750	Identifier	re		4832677	0					
ANR	4832751	Argument	NULL		4832677	1					
ANR	4832752	Identifier	NULL		4832677	0					
ANR	4832753	Argument	PCRE_INFO_CAPTURECOUNT		4832677	2					
ANR	4832754	Identifier	PCRE_INFO_CAPTURECOUNT		4832677	0					
ANR	4832755	Argument	& group_count		4832677	3					
ANR	4832756	UnaryOperationExpression	& group_count		4832677	0					
ANR	4832757	UnaryOperator	&		4832677	0					
ANR	4832758	Identifier	group_count		4832677	1					
ANR	4832759	ExpressionStatement	oveccount = 2 * ( group_count + 1 )	352:1:8328:8361	4832677	12	True				
ANR	4832760	AssignmentExpression	oveccount = 2 * ( group_count + 1 )		4832677	0		=			
ANR	4832761	Identifier	oveccount		4832677	0					
ANR	4832762	MultiplicativeExpression	2 * ( group_count + 1 )		4832677	1		*			
ANR	4832763	PrimaryExpression	2		4832677	0					
ANR	4832764	AdditiveExpression	group_count + 1		4832677	1		+			
ANR	4832765	Identifier	group_count		4832677	0					
ANR	4832766	PrimaryExpression	1		4832677	1					
ANR	4832767	ExpressionStatement	ovector = ( int * ) malloc ( oveccount * sizeof ( int ) )	353:1:8392:8440	4832677	13	True				
ANR	4832768	AssignmentExpression	ovector = ( int * ) malloc ( oveccount * sizeof ( int ) )		4832677	0		=			
ANR	4832769	Identifier	ovector		4832677	0					
ANR	4832770	CastExpression	( int * ) malloc ( oveccount * sizeof ( int ) )		4832677	1					
ANR	4832771	CastTarget	int *		4832677	0					
ANR	4832772	CallExpression	malloc ( oveccount * sizeof ( int ) )		4832677	1					
ANR	4832773	Callee	malloc		4832677	0					
ANR	4832774	Identifier	malloc		4832677	0					
ANR	4832775	ArgumentList	oveccount * sizeof ( int )		4832677	1					
ANR	4832776	Argument	oveccount * sizeof ( int )		4832677	0					
ANR	4832777	MultiplicativeExpression	oveccount * sizeof ( int )		4832677	0		*			
ANR	4832778	Identifier	oveccount		4832677	0					
ANR	4832779	SizeofExpression	sizeof ( int )		4832677	1					
ANR	4832780	Sizeof	sizeof		4832677	0					
ANR	4832781	SizeofOperand	int		4832677	1					
ANR	4832782	IfStatement	if ( ! ovector )		4832677	14					
ANR	4832783	Condition	! ovector	355:5:8448:8455	4832677	0	True				
ANR	4832784	UnaryOperationExpression	! ovector		4832677	0					
ANR	4832785	UnaryOperator	!		4832677	0					
ANR	4832786	Identifier	ovector		4832677	1					
ANR	4832787	CompoundStatement		22:15:530:530	4832677	1					
ANR	4832788	ExpressionStatement	"EXCEPT ( ""unable to allocated memory for regex group info in validate_regex"" )"	356:2:8462:8537	4832677	0	True				
ANR	4832789	CallExpression	"EXCEPT ( ""unable to allocated memory for regex group info in validate_regex"" )"		4832677	0					
ANR	4832790	Callee	EXCEPT		4832677	0					
ANR	4832791	Identifier	EXCEPT		4832677	0					
ANR	4832792	ArgumentList	"""unable to allocated memory for regex group info in validate_regex"""		4832677	1					
ANR	4832793	Argument	"""unable to allocated memory for regex group info in validate_regex"""		4832677	0					
ANR	4832794	PrimaryExpression	"""unable to allocated memory for regex group info in validate_regex"""		4832677	0					
ANR	4832795	ExpressionStatement	subject_len = strlen ( subject )	359:1:8544:8573	4832677	15	True				
ANR	4832796	AssignmentExpression	subject_len = strlen ( subject )		4832677	0		=			
ANR	4832797	Identifier	subject_len		4832677	0					
ANR	4832798	CallExpression	strlen ( subject )		4832677	1					
ANR	4832799	Callee	strlen		4832677	0					
ANR	4832800	Identifier	strlen		4832677	0					
ANR	4832801	ArgumentList	subject		4832677	1					
ANR	4832802	Argument	subject		4832677	0					
ANR	4832803	Identifier	subject		4832677	0					
ANR	4832804	ExpressionStatement	"matches = pcre_exec ( re , NULL , subject , subject_len , 0 , 0 , ovector , oveccount )"	362:1:8594:8671	4832677	16	True				
ANR	4832805	AssignmentExpression	"matches = pcre_exec ( re , NULL , subject , subject_len , 0 , 0 , ovector , oveccount )"		4832677	0		=			
ANR	4832806	Identifier	matches		4832677	0					
ANR	4832807	CallExpression	"pcre_exec ( re , NULL , subject , subject_len , 0 , 0 , ovector , oveccount )"		4832677	1					
ANR	4832808	Callee	pcre_exec		4832677	0					
ANR	4832809	Identifier	pcre_exec		4832677	0					
ANR	4832810	ArgumentList	re		4832677	1					
ANR	4832811	Argument	re		4832677	0					
ANR	4832812	Identifier	re		4832677	0					
ANR	4832813	Argument	NULL		4832677	1					
ANR	4832814	Identifier	NULL		4832677	0					
ANR	4832815	Argument	subject		4832677	2					
ANR	4832816	Identifier	subject		4832677	0					
ANR	4832817	Argument	subject_len		4832677	3					
ANR	4832818	Identifier	subject_len		4832677	0					
ANR	4832819	Argument	0		4832677	4					
ANR	4832820	PrimaryExpression	0		4832677	0					
ANR	4832821	Argument	0		4832677	5					
ANR	4832822	PrimaryExpression	0		4832677	0					
ANR	4832823	Argument	ovector		4832677	6					
ANR	4832824	Identifier	ovector		4832677	0					
ANR	4832825	Argument	oveccount		4832677	7					
ANR	4832826	Identifier	oveccount		4832677	0					
ANR	4832827	ForStatement	for ( i = 0 ; i < matches ; i ++ )		4832677	17					
ANR	4832828	ForInit	i = 0 ;	365:6:8737:8740	4832677	0	True				
ANR	4832829	AssignmentExpression	i = 0		4832677	0		=			
ANR	4832830	Identifier	i		4832677	0					
ANR	4832831	PrimaryExpression	0		4832677	1					
ANR	4832832	Condition	i < matches	365:11:8742:8750	4832677	1	True				
ANR	4832833	RelationalExpression	i < matches		4832677	0		<			
ANR	4832834	Identifier	i		4832677	0					
ANR	4832835	Identifier	matches		4832677	1					
ANR	4832836	PostIncDecOperationExpression	i ++	365:22:8753:8755	4832677	2	True				
ANR	4832837	Identifier	i		4832677	0					
ANR	4832838	IncDec	++		4832677	1					
ANR	4832839	CompoundStatement		32:27:830:830	4832677	3					
ANR	4832840	IfStatement	if ( ovector [ i * 2 ] == 0 && ovector [ i * 2 + 1 ] == subject_len )		4832677	0					
ANR	4832841	Condition	ovector [ i * 2 ] == 0 && ovector [ i * 2 + 1 ] == subject_len	366:6:8766:8815	4832677	0	True				
ANR	4832842	AndExpression	ovector [ i * 2 ] == 0 && ovector [ i * 2 + 1 ] == subject_len		4832677	0		&&			
ANR	4832843	EqualityExpression	ovector [ i * 2 ] == 0		4832677	0		==			
ANR	4832844	ArrayIndexing	ovector [ i * 2 ]		4832677	0					
ANR	4832845	Identifier	ovector		4832677	0					
ANR	4832846	MultiplicativeExpression	i * 2		4832677	1		*			
ANR	4832847	Identifier	i		4832677	0					
ANR	4832848	PrimaryExpression	2		4832677	1					
ANR	4832849	PrimaryExpression	0		4832677	1					
ANR	4832850	EqualityExpression	ovector [ i * 2 + 1 ] == subject_len		4832677	1		==			
ANR	4832851	ArrayIndexing	ovector [ i * 2 + 1 ]		4832677	0					
ANR	4832852	Identifier	ovector		4832677	0					
ANR	4832853	AdditiveExpression	i * 2 + 1		4832677	1		+			
ANR	4832854	MultiplicativeExpression	i * 2		4832677	0		*			
ANR	4832855	Identifier	i		4832677	0					
ANR	4832856	PrimaryExpression	2		4832677	1					
ANR	4832857	PrimaryExpression	1		4832677	1					
ANR	4832858	Identifier	subject_len		4832677	1					
ANR	4832859	CompoundStatement		33:58:890:890	4832677	1					
ANR	4832860	ExpressionStatement	is_valid = 1	367:3:8823:8835	4832677	0	True				
ANR	4832861	AssignmentExpression	is_valid = 1		4832677	0		=			
ANR	4832862	Identifier	is_valid		4832677	0					
ANR	4832863	PrimaryExpression	1		4832677	1					
ANR	4832864	BreakStatement	break ;	368:3:8840:8845	4832677	1	True				
ANR	4832865	ExpressionStatement	free ( ovector )	372:1:8856:8869	4832677	18	True				
ANR	4832866	CallExpression	free ( ovector )		4832677	0					
ANR	4832867	Callee	free		4832677	0					
ANR	4832868	Identifier	free		4832677	0					
ANR	4832869	ArgumentList	ovector		4832677	1					
ANR	4832870	Argument	ovector		4832677	0					
ANR	4832871	Identifier	ovector		4832677	0					
ANR	4832872	ExpressionStatement	pcre_free ( re )	374:1:8873:8886	4832677	19	True				
ANR	4832873	CallExpression	pcre_free ( re )		4832677	0					
ANR	4832874	Callee	pcre_free		4832677	0					
ANR	4832875	Identifier	pcre_free		4832677	0					
ANR	4832876	ArgumentList	re		4832677	1					
ANR	4832877	Argument	re		4832677	0					
ANR	4832878	Identifier	re		4832677	0					
ANR	4832879	ReturnStatement	return is_valid ;	376:1:8890:8905	4832677	20	True				
ANR	4832880	Identifier	is_valid		4832677	0					
ANR	4832881	ReturnType	static int		4832677	1					
ANR	4832882	Identifier	validate_regex		4832677	2					
ANR	4832883	ParameterList	"const char * pattern , const char * subject"		4832677	3					
ANR	4832884	Parameter	const char * pattern	334:15:7885:7903	4832677	0	True				
ANR	4832885	ParameterType	const char *		4832677	0					
ANR	4832886	Identifier	pattern		4832677	1					
ANR	4832887	Parameter	const char * subject	334:36:7906:7924	4832677	1	True				
ANR	4832888	ParameterType	const char *		4832677	0					
ANR	4832889	Identifier	subject		4832677	1					
ANR	4832890	CFGEntryNode	ENTRY		4832677		True				
ANR	4832891	CFGExitNode	EXIT		4832677		True				
ANR	4832892	Symbol	malloc		4832677						
ANR	4832893	Symbol	NULL		4832677						
ANR	4832894	Symbol	err		4832677						
ANR	4832895	Symbol	group_count		4832677						
ANR	4832896	Symbol	pcre_exec		4832677						
ANR	4832897	Symbol	subject		4832677						
ANR	4832898	Symbol	& group_count		4832677						
ANR	4832899	Symbol	pattern		4832677						
ANR	4832900	Symbol	oveccount		4832677						
ANR	4832901	Symbol	i		4832677						
ANR	4832902	Symbol	& err		4832677						
ANR	4832903	Symbol	matches		4832677						
ANR	4832904	Symbol	pcre_compile		4832677						
ANR	4832905	Symbol	strlen		4832677						
ANR	4832906	Symbol	* ovector		4832677						
ANR	4832907	Symbol	subject_len		4832677						
ANR	4832908	Symbol	re		4832677						
ANR	4832909	Symbol	* i		4832677						
ANR	4832910	Symbol	is_valid		4832677						
ANR	4832911	Symbol	PCRE_INFO_CAPTURECOUNT		4832677						
ANR	4832912	Symbol	& err_index		4832677						
ANR	4832913	Symbol	err_index		4832677						
ANR	4832914	Symbol	ovector		4832677						
ANR	4832915	Function	iterate_params	380:0:8917:9105							
ANR	4832916	FunctionDef	"iterate_params (int ( * callPerElement ) ( const param_info_t * , void * ) , void * user_data)"		4832915	0					
ANR	4832917	CompoundStatement		383:21:9038:9105	4832915	0					
ANR	4832918	ExpressionStatement	"param_info_hash_iterate ( param_info , callPerElement , user_data )"	384:1:9041:9103	4832915	0	True				
ANR	4832919	CallExpression	"param_info_hash_iterate ( param_info , callPerElement , user_data )"		4832915	0					
ANR	4832920	Callee	param_info_hash_iterate		4832915	0					
ANR	4832921	Identifier	param_info_hash_iterate		4832915	0					
ANR	4832922	ArgumentList	param_info		4832915	1					
ANR	4832923	Argument	param_info		4832915	0					
ANR	4832924	Identifier	param_info		4832915	0					
ANR	4832925	Argument	callPerElement		4832915	1					
ANR	4832926	Identifier	callPerElement		4832915	0					
ANR	4832927	Argument	user_data		4832915	2					
ANR	4832928	Identifier	user_data		4832915	0					
ANR	4832929	ReturnType	void		4832915	1					
ANR	4832930	Identifier	iterate_params		4832915	2					
ANR	4832931	ParameterList	"int ( * callPerElement ) ( const param_info_t * , void * ) , void * user_data"		4832915	3					
ANR	4832932	Parameter	"int ( * callPerElement ) ( const param_info_t * , void * )"	381:15:8937:9014	4832915	0	True				
ANR	4832933	ParameterType	"(( const param_info_t * , void * ) int) *"		4832915	0					
ANR	4832934	Identifier	callPerElement		4832915	1					
ANR	4832935	Parameter	void * user_data	383:4:9021:9035	4832915	1	True				
ANR	4832936	ParameterType	void *		4832915	0					
ANR	4832937	Identifier	user_data		4832915	1					
ANR	4832938	CFGEntryNode	ENTRY		4832915		True				
ANR	4832939	CFGExitNode	EXIT		4832915		True				
ANR	4832940	Symbol	callPerElement		4832915						
ANR	4832941	Symbol	user_data		4832915						
ANR	4832942	Symbol	param_info		4832915						
