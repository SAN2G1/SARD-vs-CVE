command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4603434	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_compat_classad_util.cpp								
ANR	4603435	Function	Parse	28:0:998:1827							
ANR	4603436	FunctionDef	"Parse (const char * str , MyString & name , classad :: ExprTree * & tree , int * pos)"		4603435	0					
ANR	4603437	CompoundStatement		29:0:1075:1827	4603435	0					
ANR	4603438	IdentifierDeclStatement	classad :: ClassAdParser parser ;	30:1:1078:1107	4603435	0	True				
ANR	4603439	IdentifierDecl	parser		4603435	0					
ANR	4603440	IdentifierDeclType	classad :: ClassAdParser		4603435	0					
ANR	4603441	Identifier	parser		4603435	1					
ANR	4603442	IdentifierDeclStatement	classad :: ClassAd * newAd ;	31:1:1110:1133	4603435	1	True				
ANR	4603443	IdentifierDecl	* newAd		4603435	0					
ANR	4603444	IdentifierDeclType	classad :: ClassAd *		4603435	0					
ANR	4603445	Identifier	newAd		4603435	1					
ANR	4603446	IfStatement	if ( pos )		4603435	2					
ANR	4603447	Condition	pos	34:6:1196:1198	4603435	0	True				
ANR	4603448	Identifier	pos		4603435	0					
ANR	4603449	CompoundStatement		6:12:126:126	4603435	1					
ANR	4603450	ExpressionStatement	* pos = 0	35:2:1206:1214	4603435	0	True				
ANR	4603451	AssignmentExpression	* pos = 0		4603435	0		=			
ANR	4603452	UnaryOperationExpression	* pos		4603435	0					
ANR	4603453	UnaryOperator	*		4603435	0					
ANR	4603454	Identifier	pos		4603435	1					
ANR	4603455	PrimaryExpression	0		4603435	1					
ANR	4603456	IdentifierDeclStatement	"std :: string newAdStr = ""["" ;"	41:1:1407:1433	4603435	3	True				
ANR	4603457	IdentifierDecl	"newAdStr = ""["""		4603435	0					
ANR	4603458	IdentifierDeclType	std :: string		4603435	0					
ANR	4603459	Identifier	newAdStr		4603435	1					
ANR	4603460	AssignmentExpression	"newAdStr = ""["""		4603435	2		=			
ANR	4603461	Identifier	newAdStr		4603435	0					
ANR	4603462	PrimaryExpression	"""["""		4603435	1					
ANR	4603463	ExpressionStatement	newAdStr . append ( compat_classad :: ConvertEscapingOldToNew ( str ) )	42:1:1436:1501	4603435	4	True				
ANR	4603464	CallExpression	newAdStr . append ( compat_classad :: ConvertEscapingOldToNew ( str ) )		4603435	0					
ANR	4603465	Callee	newAdStr . append		4603435	0					
ANR	4603466	MemberAccess	newAdStr . append		4603435	0					
ANR	4603467	Identifier	newAdStr		4603435	0					
ANR	4603468	Identifier	append		4603435	1					
ANR	4603469	ArgumentList	compat_classad :: ConvertEscapingOldToNew ( str )		4603435	1					
ANR	4603470	Argument	compat_classad :: ConvertEscapingOldToNew ( str )		4603435	0					
ANR	4603471	CallExpression	compat_classad :: ConvertEscapingOldToNew ( str )		4603435	0					
ANR	4603472	Callee	compat_classad :: ConvertEscapingOldToNew		4603435	0					
ANR	4603473	Identifier	compat_classad :: ConvertEscapingOldToNew		4603435	0					
ANR	4603474	ArgumentList	str		4603435	1					
ANR	4603475	Argument	str		4603435	0					
ANR	4603476	Identifier	str		4603435	0					
ANR	4603477	ExpressionStatement	"newAdStr += ""]"""	43:1:1504:1519	4603435	5	True				
ANR	4603478	AssignmentExpression	"newAdStr += ""]"""		4603435	0		+=			
ANR	4603479	Identifier	newAdStr		4603435	0					
ANR	4603480	PrimaryExpression	"""]"""		4603435	1					
ANR	4603481	ExpressionStatement	newAd = parser . ParseClassAd ( newAdStr )	44:1:1522:1561	4603435	6	True				
ANR	4603482	AssignmentExpression	newAd = parser . ParseClassAd ( newAdStr )		4603435	0		=			
ANR	4603483	Identifier	newAd		4603435	0					
ANR	4603484	CallExpression	parser . ParseClassAd ( newAdStr )		4603435	1					
ANR	4603485	Callee	parser . ParseClassAd		4603435	0					
ANR	4603486	MemberAccess	parser . ParseClassAd		4603435	0					
ANR	4603487	Identifier	parser		4603435	0					
ANR	4603488	Identifier	ParseClassAd		4603435	1					
ANR	4603489	ArgumentList	newAdStr		4603435	1					
ANR	4603490	Argument	newAdStr		4603435	0					
ANR	4603491	Identifier	newAdStr		4603435	0					
ANR	4603492	IfStatement	if ( newAd == NULL )		4603435	7					
ANR	4603493	Condition	newAd == NULL	45:6:1569:1581	4603435	0	True				
ANR	4603494	EqualityExpression	newAd == NULL		4603435	0		==			
ANR	4603495	Identifier	newAd		4603435	0					
ANR	4603496	Identifier	NULL		4603435	1					
ANR	4603497	CompoundStatement		17:22:509:509	4603435	1					
ANR	4603498	ExpressionStatement	tree = NULL	46:2:1589:1600	4603435	0	True				
ANR	4603499	AssignmentExpression	tree = NULL		4603435	0		=			
ANR	4603500	Identifier	tree		4603435	0					
ANR	4603501	Identifier	NULL		4603435	1					
ANR	4603502	ReturnStatement	return 1 ;	47:2:1604:1612	4603435	1	True				
ANR	4603503	PrimaryExpression	1		4603435	0					
ANR	4603504	IfStatement	if ( newAd -> size ( ) != 1 )		4603435	8					
ANR	4603505	Condition	newAd -> size ( ) != 1	49:6:1623:1640	4603435	0	True				
ANR	4603506	EqualityExpression	newAd -> size ( ) != 1		4603435	0		!=			
ANR	4603507	CallExpression	newAd -> size ( )		4603435	0					
ANR	4603508	Callee	newAd -> size		4603435	0					
ANR	4603509	PtrMemberAccess	newAd -> size		4603435	0					
ANR	4603510	Identifier	newAd		4603435	0					
ANR	4603511	Identifier	size		4603435	1					
ANR	4603512	ArgumentList			4603435	1					
ANR	4603513	PrimaryExpression	1		4603435	1					
ANR	4603514	CompoundStatement		21:27:568:568	4603435	1					
ANR	4603515	Statement	delete	50:2:1648:1653	4603435	0	True				
ANR	4603516	ExpressionStatement	newAd	50:9:1655:1660	4603435	1	True				
ANR	4603517	Identifier	newAd		4603435	0					
ANR	4603518	ExpressionStatement	tree = NULL	51:2:1664:1675	4603435	2	True				
ANR	4603519	AssignmentExpression	tree = NULL		4603435	0		=			
ANR	4603520	Identifier	tree		4603435	0					
ANR	4603521	Identifier	NULL		4603435	1					
ANR	4603522	ReturnStatement	return 1 ;	52:2:1679:1687	4603435	3	True				
ANR	4603523	PrimaryExpression	1		4603435	0					
ANR	4603524	IdentifierDeclStatement	classad :: ClassAd :: iterator itr = newAd -> begin ( ) ;	55:1:1695:1742	4603435	9	True				
ANR	4603525	IdentifierDecl	itr = newAd -> begin ( )		4603435	0					
ANR	4603526	IdentifierDeclType	classad :: ClassAd :: iterator		4603435	0					
ANR	4603527	Identifier	itr		4603435	1					
ANR	4603528	AssignmentExpression	itr = newAd -> begin ( )		4603435	2		=			
ANR	4603529	Identifier	itr		4603435	0					
ANR	4603530	CallExpression	newAd -> begin ( )		4603435	1					
ANR	4603531	Callee	newAd -> begin		4603435	0					
ANR	4603532	PtrMemberAccess	newAd -> begin		4603435	0					
ANR	4603533	Identifier	newAd		4603435	0					
ANR	4603534	Identifier	begin		4603435	1					
ANR	4603535	ArgumentList			4603435	1					
ANR	4603536	ExpressionStatement	name = itr -> first . c_str ( )	56:1:1745:1770	4603435	10	True				
ANR	4603537	AssignmentExpression	name = itr -> first . c_str ( )		4603435	0		=			
ANR	4603538	Identifier	name		4603435	0					
ANR	4603539	CallExpression	itr -> first . c_str ( )		4603435	1					
ANR	4603540	Callee	itr -> first . c_str		4603435	0					
ANR	4603541	MemberAccess	itr -> first . c_str		4603435	0					
ANR	4603542	PtrMemberAccess	itr -> first		4603435	0					
ANR	4603543	Identifier	itr		4603435	0					
ANR	4603544	Identifier	first		4603435	1					
ANR	4603545	Identifier	c_str		4603435	1					
ANR	4603546	ArgumentList			4603435	1					
ANR	4603547	ExpressionStatement	tree = itr -> second -> Copy ( )	57:1:1773:1799	4603435	11	True				
ANR	4603548	AssignmentExpression	tree = itr -> second -> Copy ( )		4603435	0		=			
ANR	4603549	Identifier	tree		4603435	0					
ANR	4603550	CallExpression	itr -> second -> Copy ( )		4603435	1					
ANR	4603551	Callee	itr -> second -> Copy		4603435	0					
ANR	4603552	PtrMemberAccess	itr -> second -> Copy		4603435	0					
ANR	4603553	PtrMemberAccess	itr -> second		4603435	0					
ANR	4603554	Identifier	itr		4603435	0					
ANR	4603555	Identifier	second		4603435	1					
ANR	4603556	Identifier	Copy		4603435	1					
ANR	4603557	ArgumentList			4603435	1					
ANR	4603558	Statement	delete	58:1:1802:1807	4603435	12	True				
ANR	4603559	ExpressionStatement	newAd	58:8:1809:1814	4603435	13	True				
ANR	4603560	Identifier	newAd		4603435	0					
ANR	4603561	ReturnStatement	return 0 ;	59:1:1817:1825	4603435	14	True				
ANR	4603562	PrimaryExpression	0		4603435	0					
ANR	4603563	ReturnType	int		4603435	1					
ANR	4603564	Identifier	Parse		4603435	2					
ANR	4603565	ParameterList	"const char * str , MyString & name , classad :: ExprTree * & tree , int * pos"		4603435	3					
ANR	4603566	Parameter	const char * str	28:10:1008:1021	4603435	0	True				
ANR	4603567	ParameterType	const char *		4603435	0					
ANR	4603568	Identifier	str		4603435	1					
ANR	4603569	Parameter	MyString & name	28:26:1024:1037	4603435	1	True				
ANR	4603570	ParameterType	MyString &		4603435	0					
ANR	4603571	Identifier	name		4603435	1					
ANR	4603572	Parameter	classad :: ExprTree * & tree	28:42:1040:1063	4603435	2	True				
ANR	4603573	ParameterType	classad :: ExprTree * &		4603435	0					
ANR	4603574	Identifier	tree		4603435	1					
ANR	4603575	Parameter	int * pos	28:68:1066:1072	4603435	3	True				
ANR	4603576	ParameterType	int *		4603435	0					
ANR	4603577	Identifier	pos		4603435	1					
ANR	4603578	CFGEntryNode	ENTRY		4603435		True				
ANR	4603579	CFGExitNode	EXIT		4603435		True				
ANR	4603580	Symbol	NULL		4603435						
ANR	4603581	Symbol	newAdStr		4603435						
ANR	4603582	Symbol	newAd -> size		4603435						
ANR	4603583	Symbol	itr		4603435						
ANR	4603584	Symbol	tree		4603435						
ANR	4603585	Symbol	compat_classad :: ConvertEscapingOldToNew		4603435						
ANR	4603586	Symbol	itr -> first . c_str		4603435						
ANR	4603587	Symbol	parser . ParseClassAd		4603435						
ANR	4603588	Symbol	* itr		4603435						
ANR	4603589	Symbol	str		4603435						
ANR	4603590	Symbol	* newAd		4603435						
ANR	4603591	Symbol	parser		4603435						
ANR	4603592	Symbol	pos		4603435						
ANR	4603593	Symbol	name		4603435						
ANR	4603594	Symbol	* itr -> second		4603435						
ANR	4603595	Symbol	itr -> first		4603435						
ANR	4603596	Symbol	* * itr		4603435						
ANR	4603597	Symbol	newAd		4603435						
ANR	4603598	Symbol	* pos		4603435						
ANR	4603599	Symbol	newAd -> begin		4603435						
ANR	4603600	Symbol	itr -> second		4603435						
ANR	4603601	Symbol	itr -> second -> Copy		4603435						
ANR	4603602	Function	ParseClassAdRvalExpr	64:0:1876:2184							
ANR	4603603	FunctionDef	"ParseClassAdRvalExpr (const char * s , classad :: ExprTree * & tree , int * pos)"		4603602	0					
ANR	4603604	CompoundStatement		65:0:1949:2184	4603602	0					
ANR	4603605	IdentifierDeclStatement	classad :: ClassAdParser parser ;	66:1:1952:1981	4603602	0	True				
ANR	4603606	IdentifierDecl	parser		4603602	0					
ANR	4603607	IdentifierDeclType	classad :: ClassAdParser		4603602	0					
ANR	4603608	Identifier	parser		4603602	1					
ANR	4603609	IdentifierDeclStatement	std :: string str = compat_classad :: ConvertEscapingOldToNew ( s ) ;	67:1:1984:2046	4603602	1	True				
ANR	4603610	IdentifierDecl	str = compat_classad :: ConvertEscapingOldToNew ( s )		4603602	0					
ANR	4603611	IdentifierDeclType	std :: string		4603602	0					
ANR	4603612	Identifier	str		4603602	1					
ANR	4603613	AssignmentExpression	str = compat_classad :: ConvertEscapingOldToNew ( s )		4603602	2		=			
ANR	4603614	Identifier	str		4603602	0					
ANR	4603615	CallExpression	compat_classad :: ConvertEscapingOldToNew ( s )		4603602	1					
ANR	4603616	Callee	compat_classad :: ConvertEscapingOldToNew		4603602	0					
ANR	4603617	Identifier	compat_classad :: ConvertEscapingOldToNew		4603602	0					
ANR	4603618	ArgumentList	s		4603602	1					
ANR	4603619	Argument	s		4603602	0					
ANR	4603620	Identifier	s		4603602	0					
ANR	4603621	IfStatement	"if ( parser . ParseExpression ( str , tree , true ) )"		4603602	2					
ANR	4603622	Condition	"parser . ParseExpression ( str , tree , true )"	68:6:2054:2094	4603602	0	True				
ANR	4603623	CallExpression	"parser . ParseExpression ( str , tree , true )"		4603602	0					
ANR	4603624	Callee	parser . ParseExpression		4603602	0					
ANR	4603625	MemberAccess	parser . ParseExpression		4603602	0					
ANR	4603626	Identifier	parser		4603602	0					
ANR	4603627	Identifier	ParseExpression		4603602	1					
ANR	4603628	ArgumentList	str		4603602	1					
ANR	4603629	Argument	str		4603602	0					
ANR	4603630	Identifier	str		4603602	0					
ANR	4603631	Argument	tree		4603602	1					
ANR	4603632	Identifier	tree		4603602	0					
ANR	4603633	Argument	true		4603602	2					
ANR	4603634	Identifier	true		4603602	0					
ANR	4603635	CompoundStatement		4:50:148:148	4603602	1					
ANR	4603636	ReturnStatement	return 0 ;	69:2:2102:2110	4603602	0	True				
ANR	4603637	PrimaryExpression	0		4603602	0					
ANR	4603638	ElseStatement	else		4603602	0					
ANR	4603639	CompoundStatement		6:8:170:170	4603602	0					
ANR	4603640	ExpressionStatement	tree = NULL	71:2:2124:2135	4603602	0	True				
ANR	4603641	AssignmentExpression	tree = NULL		4603602	0		=			
ANR	4603642	Identifier	tree		4603602	0					
ANR	4603643	Identifier	NULL		4603602	1					
ANR	4603644	IfStatement	if ( pos )		4603602	1					
ANR	4603645	Condition	pos	72:7:2144:2146	4603602	0	True				
ANR	4603646	Identifier	pos		4603602	0					
ANR	4603647	CompoundStatement		8:13:200:200	4603602	1					
ANR	4603648	ExpressionStatement	* pos = 0	73:3:2155:2163	4603602	0	True				
ANR	4603649	AssignmentExpression	* pos = 0		4603602	0		=			
ANR	4603650	UnaryOperationExpression	* pos		4603602	0					
ANR	4603651	UnaryOperator	*		4603602	0					
ANR	4603652	Identifier	pos		4603602	1					
ANR	4603653	PrimaryExpression	0		4603602	1					
ANR	4603654	ReturnStatement	return 1 ;	75:2:2171:2179	4603602	2	True				
ANR	4603655	PrimaryExpression	1		4603602	0					
ANR	4603656	ReturnType	int		4603602	1					
ANR	4603657	Identifier	ParseClassAdRvalExpr		4603602	2					
ANR	4603658	ParameterList	"const char * s , classad :: ExprTree * & tree , int * pos"		4603602	3					
ANR	4603659	Parameter	const char * s	64:25:1901:1912	4603602	0	True				
ANR	4603660	ParameterType	const char *		4603602	0					
ANR	4603661	Identifier	s		4603602	1					
ANR	4603662	Parameter	classad :: ExprTree * & tree	64:39:1915:1937	4603602	1	True				
ANR	4603663	ParameterType	classad :: ExprTree * &		4603602	0					
ANR	4603664	Identifier	tree		4603602	1					
ANR	4603665	Parameter	int * pos	64:64:1940:1946	4603602	2	True				
ANR	4603666	ParameterType	int *		4603602	0					
ANR	4603667	Identifier	pos		4603602	1					
ANR	4603668	CFGEntryNode	ENTRY		4603602		True				
ANR	4603669	CFGExitNode	EXIT		4603602		True				
ANR	4603670	Symbol	str		4603602						
ANR	4603671	Symbol	s		4603602						
ANR	4603672	Symbol	NULL		4603602						
ANR	4603673	Symbol	parser		4603602						
ANR	4603674	Symbol	parser . ParseExpression		4603602						
ANR	4603675	Symbol	pos		4603602						
ANR	4603676	Symbol	tree		4603602						
ANR	4603677	Symbol	true		4603602						
ANR	4603678	Symbol	compat_classad :: ConvertEscapingOldToNew		4603602						
ANR	4603679	Symbol	* pos		4603602						
ANR	4603680	Function	ExprTreeToString	81:0:2233:2463							
ANR	4603681	FunctionDef	ExprTreeToString (classad :: ExprTree * expr)		4603680	0					
ANR	4603682	CompoundStatement		82:0:2289:2463	4603680	0					
ANR	4603683	Statement	static	83:1:2292:2297	4603680	0	True				
ANR	4603684	IdentifierDeclStatement	std :: string buffer ;	83:8:2299:2317	4603680	1	True				
ANR	4603685	IdentifierDecl	buffer		4603680	0					
ANR	4603686	IdentifierDeclType	std :: string		4603680	0					
ANR	4603687	Identifier	buffer		4603680	1					
ANR	4603688	IdentifierDeclStatement	classad :: ClassAdUnParser unparser ;	84:1:2320:2353	4603680	2	True				
ANR	4603689	IdentifierDecl	unparser		4603680	0					
ANR	4603690	IdentifierDeclType	classad :: ClassAdUnParser		4603680	0					
ANR	4603691	Identifier	unparser		4603680	1					
ANR	4603692	ExpressionStatement	"buffer = """""	86:1:2357:2368	4603680	3	True				
ANR	4603693	AssignmentExpression	"buffer = """""		4603680	0		=			
ANR	4603694	Identifier	buffer		4603680	0					
ANR	4603695	PrimaryExpression	""""""		4603680	1					
ANR	4603696	ExpressionStatement	unparser . SetOldClassAd ( true )	87:1:2371:2401	4603680	4	True				
ANR	4603697	CallExpression	unparser . SetOldClassAd ( true )		4603680	0					
ANR	4603698	Callee	unparser . SetOldClassAd		4603680	0					
ANR	4603699	MemberAccess	unparser . SetOldClassAd		4603680	0					
ANR	4603700	Identifier	unparser		4603680	0					
ANR	4603701	Identifier	SetOldClassAd		4603680	1					
ANR	4603702	ArgumentList	true		4603680	1					
ANR	4603703	Argument	true		4603680	0					
ANR	4603704	Identifier	true		4603680	0					
ANR	4603705	ExpressionStatement	"unparser . Unparse ( buffer , expr )"	88:1:2404:2436	4603680	5	True				
ANR	4603706	CallExpression	"unparser . Unparse ( buffer , expr )"		4603680	0					
ANR	4603707	Callee	unparser . Unparse		4603680	0					
ANR	4603708	MemberAccess	unparser . Unparse		4603680	0					
ANR	4603709	Identifier	unparser		4603680	0					
ANR	4603710	Identifier	Unparse		4603680	1					
ANR	4603711	ArgumentList	buffer		4603680	1					
ANR	4603712	Argument	buffer		4603680	0					
ANR	4603713	Identifier	buffer		4603680	0					
ANR	4603714	Argument	expr		4603680	1					
ANR	4603715	Identifier	expr		4603680	0					
ANR	4603716	ReturnStatement	return buffer . c_str ( ) ;	90:1:2440:2461	4603680	6	True				
ANR	4603717	CallExpression	buffer . c_str ( )		4603680	0					
ANR	4603718	Callee	buffer . c_str		4603680	0					
ANR	4603719	MemberAccess	buffer . c_str		4603680	0					
ANR	4603720	Identifier	buffer		4603680	0					
ANR	4603721	Identifier	c_str		4603680	1					
ANR	4603722	ArgumentList			4603680	1					
ANR	4603723	ReturnType	const char *		4603680	1					
ANR	4603724	Identifier	ExprTreeToString		4603680	2					
ANR	4603725	ParameterList	classad :: ExprTree * expr		4603680	3					
ANR	4603726	Parameter	classad :: ExprTree * expr	81:30:2263:2285	4603680	0	True				
ANR	4603727	ParameterType	classad :: ExprTree *		4603680	0					
ANR	4603728	Identifier	expr		4603680	1					
ANR	4603729	CFGEntryNode	ENTRY		4603680		True				
ANR	4603730	CFGExitNode	EXIT		4603680		True				
ANR	4603731	Symbol	buffer . c_str		4603680						
ANR	4603732	Symbol	true		4603680						
ANR	4603733	Symbol	expr		4603680						
ANR	4603734	Symbol	unparser		4603680						
ANR	4603735	Symbol	buffer		4603680						
ANR	4603736	Function	EvalBool	93:0:2466:3799							
ANR	4603737	FunctionDef	"EvalBool (compat_classad :: ClassAd * ad , const char * constraint)"		4603736	0					
ANR	4603738	CompoundStatement		94:0:2533:3799	4603736	0					
ANR	4603739	Statement	static	95:1:2536:2541	4603736	0	True				
ANR	4603740	IdentifierDeclStatement	classad :: ExprTree * tree = NULL ;	95:8:2543:2573	4603736	1	True				
ANR	4603741	IdentifierDecl	* tree = NULL		4603736	0					
ANR	4603742	IdentifierDeclType	classad :: ExprTree *		4603736	0					
ANR	4603743	Identifier	tree		4603736	1					
ANR	4603744	AssignmentExpression	* tree = NULL		4603736	2		=			
ANR	4603745	Identifier	NULL		4603736	0					
ANR	4603746	Identifier	NULL		4603736	1					
ANR	4603747	Statement	static	96:1:2576:2581	4603736	2	True				
ANR	4603748	IdentifierDeclStatement	char * saved_constraint = NULL ;	96:8:2583:2613	4603736	3	True				
ANR	4603749	IdentifierDecl	* saved_constraint = NULL		4603736	0					
ANR	4603750	IdentifierDeclType	char *		4603736	0					
ANR	4603751	Identifier	saved_constraint		4603736	1					
ANR	4603752	AssignmentExpression	* saved_constraint = NULL		4603736	2		=			
ANR	4603753	Identifier	NULL		4603736	0					
ANR	4603754	Identifier	NULL		4603736	1					
ANR	4603755	IdentifierDeclStatement	compat_classad :: EvalResult result ;	97:1:2616:2649	4603736	4	True				
ANR	4603756	IdentifierDecl	result		4603736	0					
ANR	4603757	IdentifierDeclType	compat_classad :: EvalResult		4603736	0					
ANR	4603758	Identifier	result		4603736	1					
ANR	4603759	IdentifierDeclStatement	bool constraint_changed = true ;	98:1:2652:2682	4603736	5	True				
ANR	4603760	IdentifierDecl	constraint_changed = true		4603736	0					
ANR	4603761	IdentifierDeclType	bool		4603736	0					
ANR	4603762	Identifier	constraint_changed		4603736	1					
ANR	4603763	AssignmentExpression	constraint_changed = true		4603736	2		=			
ANR	4603764	Identifier	true		4603736	0					
ANR	4603765	Identifier	true		4603736	1					
ANR	4603766	IfStatement	if ( saved_constraint )		4603736	6					
ANR	4603767	Condition	saved_constraint	100:6:2691:2706	4603736	0	True				
ANR	4603768	Identifier	saved_constraint		4603736	0					
ANR	4603769	CompoundStatement		7:25:176:176	4603736	1					
ANR	4603770	IfStatement	"if ( strcmp ( saved_constraint , constraint ) == 0 )"		4603736	0					
ANR	4603771	Condition	"strcmp ( saved_constraint , constraint ) == 0"	101:7:2719:2758	4603736	0	True				
ANR	4603772	EqualityExpression	"strcmp ( saved_constraint , constraint ) == 0"		4603736	0		==			
ANR	4603773	CallExpression	"strcmp ( saved_constraint , constraint )"		4603736	0					
ANR	4603774	Callee	strcmp		4603736	0					
ANR	4603775	Identifier	strcmp		4603736	0					
ANR	4603776	ArgumentList	saved_constraint		4603736	1					
ANR	4603777	Argument	saved_constraint		4603736	0					
ANR	4603778	Identifier	saved_constraint		4603736	0					
ANR	4603779	Argument	constraint		4603736	1					
ANR	4603780	Identifier	constraint		4603736	0					
ANR	4603781	PrimaryExpression	0		4603736	1					
ANR	4603782	CompoundStatement		8:50:228:228	4603736	1					
ANR	4603783	ExpressionStatement	constraint_changed = false	102:3:2767:2793	4603736	0	True				
ANR	4603784	AssignmentExpression	constraint_changed = false		4603736	0		=			
ANR	4603785	Identifier	constraint_changed		4603736	0					
ANR	4603786	Identifier	false		4603736	1					
ANR	4603787	IfStatement	if ( constraint_changed )		4603736	7					
ANR	4603788	Condition	constraint_changed	106:6:2809:2826	4603736	0	True				
ANR	4603789	Identifier	constraint_changed		4603736	0					
ANR	4603790	CompoundStatement		23:2:496:530	4603736	1					
ANR	4603791	IfStatement	if ( saved_constraint )		4603736	0					
ANR	4603792	Condition	saved_constraint	108:7:2896:2911	4603736	0	True				
ANR	4603793	Identifier	saved_constraint		4603736	0					
ANR	4603794	CompoundStatement		15:26:381:381	4603736	1					
ANR	4603795	ExpressionStatement	free ( saved_constraint )	109:3:2920:2942	4603736	0	True				
ANR	4603796	CallExpression	free ( saved_constraint )		4603736	0					
ANR	4603797	Callee	free		4603736	0					
ANR	4603798	Identifier	free		4603736	0					
ANR	4603799	ArgumentList	saved_constraint		4603736	1					
ANR	4603800	Argument	saved_constraint		4603736	0					
ANR	4603801	Identifier	saved_constraint		4603736	0					
ANR	4603802	ExpressionStatement	saved_constraint = NULL	110:3:2947:2970	4603736	1	True				
ANR	4603803	AssignmentExpression	saved_constraint = NULL		4603736	0		=			
ANR	4603804	Identifier	saved_constraint		4603736	0					
ANR	4603805	Identifier	NULL		4603736	1					
ANR	4603806	IfStatement	if ( tree )		4603736	1					
ANR	4603807	Condition	tree	112:7:2983:2986	4603736	0	True				
ANR	4603808	Identifier	tree		4603736	0					
ANR	4603809	CompoundStatement		19:14:456:456	4603736	1					
ANR	4603810	Statement	delete	113:3:2995:3000	4603736	0	True				
ANR	4603811	ExpressionStatement	tree	113:10:3002:3006	4603736	1	True				
ANR	4603812	Identifier	tree		4603736	0					
ANR	4603813	ExpressionStatement	tree = NULL	114:3:3011:3022	4603736	2	True				
ANR	4603814	AssignmentExpression	tree = NULL		4603736	0		=			
ANR	4603815	Identifier	tree		4603736	0					
ANR	4603816	Identifier	NULL		4603736	1					
ANR	4603817	IdentifierDeclStatement	classad :: ExprTree * tmp_tree = NULL ;	116:2:3030:3064	4603736	2	True				
ANR	4603818	IdentifierDecl	* tmp_tree = NULL		4603736	0					
ANR	4603819	IdentifierDeclType	classad :: ExprTree *		4603736	0					
ANR	4603820	Identifier	tmp_tree		4603736	1					
ANR	4603821	AssignmentExpression	* tmp_tree = NULL		4603736	2		=			
ANR	4603822	Identifier	NULL		4603736	0					
ANR	4603823	Identifier	NULL		4603736	1					
ANR	4603824	IfStatement	"if ( ParseClassAdRvalExpr ( constraint , tmp_tree ) != 0 )"		4603736	3					
ANR	4603825	Condition	"ParseClassAdRvalExpr ( constraint , tmp_tree ) != 0"	117:7:3073:3121	4603736	0	True				
ANR	4603826	EqualityExpression	"ParseClassAdRvalExpr ( constraint , tmp_tree ) != 0"		4603736	0		!=			
ANR	4603827	CallExpression	"ParseClassAdRvalExpr ( constraint , tmp_tree )"		4603736	0					
ANR	4603828	Callee	ParseClassAdRvalExpr		4603736	0					
ANR	4603829	Identifier	ParseClassAdRvalExpr		4603736	0					
ANR	4603830	ArgumentList	constraint		4603736	1					
ANR	4603831	Argument	constraint		4603736	0					
ANR	4603832	Identifier	constraint		4603736	0					
ANR	4603833	Argument	tmp_tree		4603736	1					
ANR	4603834	Identifier	tmp_tree		4603736	0					
ANR	4603835	PrimaryExpression	0		4603736	1					
ANR	4603836	CompoundStatement		24:59:591:591	4603736	1					
ANR	4603837	ExpressionStatement	"dprintf ( D_ALWAYS , ""can't parse constraint: %s\\n"" , constraint )"	118:3:3130:3197	4603736	0	True				
ANR	4603838	CallExpression	"dprintf ( D_ALWAYS , ""can't parse constraint: %s\\n"" , constraint )"		4603736	0					
ANR	4603839	Callee	dprintf		4603736	0					
ANR	4603840	Identifier	dprintf		4603736	0					
ANR	4603841	ArgumentList	D_ALWAYS		4603736	1					
ANR	4603842	Argument	D_ALWAYS		4603736	0					
ANR	4603843	Identifier	D_ALWAYS		4603736	0					
ANR	4603844	Argument	"""can't parse constraint: %s\\n"""		4603736	1					
ANR	4603845	PrimaryExpression	"""can't parse constraint: %s\\n"""		4603736	0					
ANR	4603846	Argument	constraint		4603736	2					
ANR	4603847	Identifier	constraint		4603736	0					
ANR	4603848	ReturnStatement	return false ;	120:3:3202:3214	4603736	1	True				
ANR	4603849	Identifier	false		4603736	0					
ANR	4603850	ExpressionStatement	tree = compat_classad :: RemoveExplicitTargetRefs ( tmp_tree )	122:2:3222:3281	4603736	4	True				
ANR	4603851	AssignmentExpression	tree = compat_classad :: RemoveExplicitTargetRefs ( tmp_tree )		4603736	0		=			
ANR	4603852	Identifier	tree		4603736	0					
ANR	4603853	CallExpression	compat_classad :: RemoveExplicitTargetRefs ( tmp_tree )		4603736	1					
ANR	4603854	Callee	compat_classad :: RemoveExplicitTargetRefs		4603736	0					
ANR	4603855	Identifier	compat_classad :: RemoveExplicitTargetRefs		4603736	0					
ANR	4603856	ArgumentList	tmp_tree		4603736	1					
ANR	4603857	Argument	tmp_tree		4603736	0					
ANR	4603858	Identifier	tmp_tree		4603736	0					
ANR	4603859	Statement	delete	123:2:3285:3290	4603736	5	True				
ANR	4603860	ExpressionStatement	tmp_tree	123:9:3292:3300	4603736	6	True				
ANR	4603861	Identifier	tmp_tree		4603736	0					
ANR	4603862	ExpressionStatement	saved_constraint = strdup ( constraint )	124:2:3304:3343	4603736	7	True				
ANR	4603863	AssignmentExpression	saved_constraint = strdup ( constraint )		4603736	0		=			
ANR	4603864	Identifier	saved_constraint		4603736	0					
ANR	4603865	CallExpression	strdup ( constraint )		4603736	1					
ANR	4603866	Callee	strdup		4603736	0					
ANR	4603867	Identifier	strdup		4603736	0					
ANR	4603868	ArgumentList	constraint		4603736	1					
ANR	4603869	Argument	constraint		4603736	0					
ANR	4603870	Identifier	constraint		4603736	0					
ANR	4603871	IfStatement	"if ( ! EvalExprTree ( tree , ad , NULL , & result ) )"		4603736	8					
ANR	4603872	Condition	"! EvalExprTree ( tree , ad , NULL , & result )"	129:6:3487:3526	4603736	0	True				
ANR	4603873	UnaryOperationExpression	"! EvalExprTree ( tree , ad , NULL , & result )"		4603736	0					
ANR	4603874	UnaryOperator	!		4603736	0					
ANR	4603875	CallExpression	"EvalExprTree ( tree , ad , NULL , & result )"		4603736	1					
ANR	4603876	Callee	EvalExprTree		4603736	0					
ANR	4603877	Identifier	EvalExprTree		4603736	0					
ANR	4603878	ArgumentList	tree		4603736	1					
ANR	4603879	Argument	tree		4603736	0					
ANR	4603880	Identifier	tree		4603736	0					
ANR	4603881	Argument	ad		4603736	1					
ANR	4603882	Identifier	ad		4603736	0					
ANR	4603883	Argument	NULL		4603736	2					
ANR	4603884	Identifier	NULL		4603736	0					
ANR	4603885	Argument	& result		4603736	3					
ANR	4603886	UnaryOperationExpression	& result		4603736	0					
ANR	4603887	UnaryOperator	&		4603736	0					
ANR	4603888	Identifier	result		4603736	1					
ANR	4603889	CompoundStatement		36:49:996:996	4603736	1					
ANR	4603890	ExpressionStatement	"dprintf ( D_ALWAYS , ""can't evaluate constraint: %s\\n"" , constraint )"	130:2:3534:3600	4603736	0	True				
ANR	4603891	CallExpression	"dprintf ( D_ALWAYS , ""can't evaluate constraint: %s\\n"" , constraint )"		4603736	0					
ANR	4603892	Callee	dprintf		4603736	0					
ANR	4603893	Identifier	dprintf		4603736	0					
ANR	4603894	ArgumentList	D_ALWAYS		4603736	1					
ANR	4603895	Argument	D_ALWAYS		4603736	0					
ANR	4603896	Identifier	D_ALWAYS		4603736	0					
ANR	4603897	Argument	"""can't evaluate constraint: %s\\n"""		4603736	1					
ANR	4603898	PrimaryExpression	"""can't evaluate constraint: %s\\n"""		4603736	0					
ANR	4603899	Argument	constraint		4603736	2					
ANR	4603900	Identifier	constraint		4603736	0					
ANR	4603901	ReturnStatement	return false ;	131:2:3604:3616	4603736	1	True				
ANR	4603902	Identifier	false		4603736	0					
ANR	4603903	IfStatement	if ( result . type == compat_classad :: LX_INTEGER )		4603736	9					
ANR	4603904	Condition	result . type == compat_classad :: LX_INTEGER	133:6:3627:3667	4603736	0	True				
ANR	4603905	EqualityExpression	result . type == compat_classad :: LX_INTEGER		4603736	0		==			
ANR	4603906	MemberAccess	result . type		4603736	0					
ANR	4603907	Identifier	result		4603736	0					
ANR	4603908	Identifier	type		4603736	1					
ANR	4603909	Identifier	compat_classad :: LX_INTEGER		4603736	1					
ANR	4603910	CompoundStatement		40:50:1137:1137	4603736	1					
ANR	4603911	ReturnStatement	return ( bool ) result . i ;	134:2:3675:3696	4603736	0	True				
ANR	4603912	CastExpression	( bool ) result . i		4603736	0					
ANR	4603913	CastTarget	bool		4603736	0					
ANR	4603914	MemberAccess	result . i		4603736	1					
ANR	4603915	Identifier	result		4603736	0					
ANR	4603916	Identifier	i		4603736	1					
ANR	4603917	ExpressionStatement	"dprintf ( D_ALWAYS , ""constraint (%s) does not evaluate to bool\\n"" , constraint )"	136:1:3702:3782	4603736	10	True				
ANR	4603918	CallExpression	"dprintf ( D_ALWAYS , ""constraint (%s) does not evaluate to bool\\n"" , constraint )"		4603736	0					
ANR	4603919	Callee	dprintf		4603736	0					
ANR	4603920	Identifier	dprintf		4603736	0					
ANR	4603921	ArgumentList	D_ALWAYS		4603736	1					
ANR	4603922	Argument	D_ALWAYS		4603736	0					
ANR	4603923	Identifier	D_ALWAYS		4603736	0					
ANR	4603924	Argument	"""constraint (%s) does not evaluate to bool\\n"""		4603736	1					
ANR	4603925	PrimaryExpression	"""constraint (%s) does not evaluate to bool\\n"""		4603736	0					
ANR	4603926	Argument	constraint		4603736	2					
ANR	4603927	Identifier	constraint		4603736	0					
ANR	4603928	ReturnStatement	return false ;	138:1:3785:3797	4603736	11	True				
ANR	4603929	Identifier	false		4603736	0					
ANR	4603930	ReturnType	bool		4603736	1					
ANR	4603931	Identifier	EvalBool		4603736	2					
ANR	4603932	ParameterList	"compat_classad :: ClassAd * ad , const char * constraint"		4603736	3					
ANR	4603933	Parameter	compat_classad :: ClassAd * ad	93:14:2480:2506	4603736	0	True				
ANR	4603934	ParameterType	compat_classad :: ClassAd *		4603736	0					
ANR	4603935	Identifier	ad		4603736	1					
ANR	4603936	Parameter	const char * constraint	93:43:2509:2530	4603736	1	True				
ANR	4603937	ParameterType	const char *		4603736	0					
ANR	4603938	Identifier	constraint		4603736	1					
ANR	4603939	CFGEntryNode	ENTRY		4603736		True				
ANR	4603940	CFGExitNode	EXIT		4603736		True				
ANR	4603941	Symbol	strcmp		4603736						
ANR	4603942	Symbol	compat_classad :: LX_INTEGER		4603736						
ANR	4603943	Symbol	constraint_changed		4603736						
ANR	4603944	Symbol	ad		4603736						
ANR	4603945	Symbol	NULL		4603736						
ANR	4603946	Symbol	result . i		4603736						
ANR	4603947	Symbol	EvalExprTree		4603736						
ANR	4603948	Symbol	tree		4603736						
ANR	4603949	Symbol	false		4603736						
ANR	4603950	Symbol	D_ALWAYS		4603736						
ANR	4603951	Symbol	result . type		4603736						
ANR	4603952	Symbol	result		4603736						
ANR	4603953	Symbol	saved_constraint		4603736						
ANR	4603954	Symbol	ParseClassAdRvalExpr		4603736						
ANR	4603955	Symbol	& result		4603736						
ANR	4603956	Symbol	true		4603736						
ANR	4603957	Symbol	tmp_tree		4603736						
ANR	4603958	Symbol	constraint		4603736						
ANR	4603959	Symbol	strdup		4603736						
ANR	4603960	Symbol	compat_classad :: RemoveExplicitTargetRefs		4603736						
ANR	4603961	Function	EvalBool	141:0:3802:4216							
ANR	4603962	FunctionDef	"EvalBool (compat_classad :: ClassAd * ad , classad :: ExprTree * tree)"		4603961	0					
ANR	4603963	CompoundStatement		142:0:3870:4216	4603961	0					
ANR	4603964	IdentifierDeclStatement	compat_classad :: EvalResult result ;	143:1:3873:3906	4603961	0	True				
ANR	4603965	IdentifierDecl	result		4603961	0					
ANR	4603966	IdentifierDeclType	compat_classad :: EvalResult		4603961	0					
ANR	4603967	Identifier	result		4603961	1					
ANR	4603968	IfStatement	"if ( ! EvalExprTree ( tree , ad , NULL , & result ) )"		4603961	1					
ANR	4603969	Condition	"! EvalExprTree ( tree , ad , NULL , & result )"	147:6:4047:4086	4603961	0	True				
ANR	4603970	UnaryOperationExpression	"! EvalExprTree ( tree , ad , NULL , & result )"		4603961	0					
ANR	4603971	UnaryOperator	!		4603961	0					
ANR	4603972	CallExpression	"EvalExprTree ( tree , ad , NULL , & result )"		4603961	1					
ANR	4603973	Callee	EvalExprTree		4603961	0					
ANR	4603974	Identifier	EvalExprTree		4603961	0					
ANR	4603975	ArgumentList	tree		4603961	1					
ANR	4603976	Argument	tree		4603961	0					
ANR	4603977	Identifier	tree		4603961	0					
ANR	4603978	Argument	ad		4603961	1					
ANR	4603979	Identifier	ad		4603961	0					
ANR	4603980	Argument	NULL		4603961	2					
ANR	4603981	Identifier	NULL		4603961	0					
ANR	4603982	Argument	& result		4603961	3					
ANR	4603983	UnaryOperationExpression	& result		4603961	0					
ANR	4603984	UnaryOperator	&		4603961	0					
ANR	4603985	Identifier	result		4603961	1					
ANR	4603986	CompoundStatement		6:49:219:219	4603961	1					
ANR	4603987	ReturnStatement	return false ;	148:2:4102:4114	4603961	0	True				
ANR	4603988	Identifier	false		4603961	0					
ANR	4603989	IfStatement	if ( result . type == compat_classad :: LX_INTEGER )		4603961	2					
ANR	4603990	Condition	result . type == compat_classad :: LX_INTEGER	151:6:4126:4166	4603961	0	True				
ANR	4603991	EqualityExpression	result . type == compat_classad :: LX_INTEGER		4603961	0		==			
ANR	4603992	MemberAccess	result . type		4603961	0					
ANR	4603993	Identifier	result		4603961	0					
ANR	4603994	Identifier	type		4603961	1					
ANR	4603995	Identifier	compat_classad :: LX_INTEGER		4603961	1					
ANR	4603996	CompoundStatement		10:50:299:299	4603961	1					
ANR	4603997	ReturnStatement	return ( bool ) result . i ;	152:2:4174:4195	4603961	0	True				
ANR	4603998	CastExpression	( bool ) result . i		4603961	0					
ANR	4603999	CastTarget	bool		4603961	0					
ANR	4604000	MemberAccess	result . i		4603961	1					
ANR	4604001	Identifier	result		4603961	0					
ANR	4604002	Identifier	i		4603961	1					
ANR	4604003	ReturnStatement	return false ;	155:1:4202:4214	4603961	3	True				
ANR	4604004	Identifier	false		4603961	0					
ANR	4604005	ReturnType	bool		4603961	1					
ANR	4604006	Identifier	EvalBool		4603961	2					
ANR	4604007	ParameterList	"compat_classad :: ClassAd * ad , classad :: ExprTree * tree"		4603961	3					
ANR	4604008	Parameter	compat_classad :: ClassAd * ad	141:14:3816:3842	4603961	0	True				
ANR	4604009	ParameterType	compat_classad :: ClassAd *		4603961	0					
ANR	4604010	Identifier	ad		4603961	1					
ANR	4604011	Parameter	classad :: ExprTree * tree	141:43:3845:3867	4603961	1	True				
ANR	4604012	ParameterType	classad :: ExprTree *		4603961	0					
ANR	4604013	Identifier	tree		4603961	1					
ANR	4604014	CFGEntryNode	ENTRY		4603961		True				
ANR	4604015	CFGExitNode	EXIT		4603961		True				
ANR	4604016	Symbol	result		4603961						
ANR	4604017	Symbol	compat_classad :: LX_INTEGER		4603961						
ANR	4604018	Symbol	ad		4603961						
ANR	4604019	Symbol	NULL		4603961						
ANR	4604020	Symbol	result . i		4603961						
ANR	4604021	Symbol	& result		4603961						
ANR	4604022	Symbol	EvalExprTree		4603961						
ANR	4604023	Symbol	tree		4603961						
ANR	4604024	Symbol	false		4603961						
ANR	4604025	Symbol	result . type		4603961						
ANR	4604026	Function	ClassAdsAreSame	158:0:4219:5412							
ANR	4604027	FunctionDef	"ClassAdsAreSame (compat_classad :: ClassAd * ad1 , compat_classad :: ClassAd * ad2 , StringList * ignored_attrs , bool verbose)"		4604026	0					
ANR	4604028	CompoundStatement		159:0:4344:5412	4604026	0					
ANR	4604029	IdentifierDeclStatement	"classad :: ExprTree * ad1_expr , * ad2_expr ;"	160:1:4347:4385	4604026	0	True				
ANR	4604030	IdentifierDecl	* ad1_expr		4604026	0					
ANR	4604031	IdentifierDeclType	classad :: ExprTree *		4604026	0					
ANR	4604032	Identifier	ad1_expr		4604026	1					
ANR	4604033	IdentifierDecl	* ad2_expr		4604026	1					
ANR	4604034	IdentifierDeclType	classad :: ExprTree *		4604026	0					
ANR	4604035	Identifier	ad2_expr		4604026	1					
ANR	4604036	IdentifierDeclStatement	const char * attr_name ;	161:1:4388:4409	4604026	1	True				
ANR	4604037	IdentifierDecl	* attr_name		4604026	0					
ANR	4604038	IdentifierDeclType	const char *		4604026	0					
ANR	4604039	Identifier	attr_name		4604026	1					
ANR	4604040	ExpressionStatement	ad2 -> ResetExpr ( )	162:1:4412:4428	4604026	2	True				
ANR	4604041	CallExpression	ad2 -> ResetExpr ( )		4604026	0					
ANR	4604042	Callee	ad2 -> ResetExpr		4604026	0					
ANR	4604043	PtrMemberAccess	ad2 -> ResetExpr		4604026	0					
ANR	4604044	Identifier	ad2		4604026	0					
ANR	4604045	Identifier	ResetExpr		4604026	1					
ANR	4604046	ArgumentList			4604026	1					
ANR	4604047	IdentifierDeclStatement	bool found_diff = false ;	163:1:4431:4454	4604026	3	True				
ANR	4604048	IdentifierDecl	found_diff = false		4604026	0					
ANR	4604049	IdentifierDeclType	bool		4604026	0					
ANR	4604050	Identifier	found_diff		4604026	1					
ANR	4604051	AssignmentExpression	found_diff = false		4604026	2		=			
ANR	4604052	Identifier	false		4604026	0					
ANR	4604053	Identifier	false		4604026	1					
ANR	4604054	WhileStatement	"while ( ad2 -> NextExpr ( attr_name , ad2_expr ) && ! found_diff )"		4604026	4					
ANR	4604055	Condition	"ad2 -> NextExpr ( attr_name , ad2_expr ) && ! found_diff"	164:8:4464:4513	4604026	0	True				
ANR	4604056	AndExpression	"ad2 -> NextExpr ( attr_name , ad2_expr ) && ! found_diff"		4604026	0		&&			
ANR	4604057	CallExpression	"ad2 -> NextExpr ( attr_name , ad2_expr )"		4604026	0					
ANR	4604058	Callee	ad2 -> NextExpr		4604026	0					
ANR	4604059	PtrMemberAccess	ad2 -> NextExpr		4604026	0					
ANR	4604060	Identifier	ad2		4604026	0					
ANR	4604061	Identifier	NextExpr		4604026	1					
ANR	4604062	ArgumentList	attr_name		4604026	1					
ANR	4604063	Argument	attr_name		4604026	0					
ANR	4604064	Identifier	attr_name		4604026	0					
ANR	4604065	Argument	ad2_expr		4604026	1					
ANR	4604066	Identifier	ad2_expr		4604026	0					
ANR	4604067	UnaryOperationExpression	! found_diff		4604026	1					
ANR	4604068	UnaryOperator	!		4604026	0					
ANR	4604069	Identifier	found_diff		4604026	1					
ANR	4604070	CompoundStatement		6:61:172:172	4604026	1					
ANR	4604071	IfStatement	if ( ignored_attrs && ignored_attrs -> contains_anycase ( attr_name ) )		4604026	0					
ANR	4604072	Condition	ignored_attrs && ignored_attrs -> contains_anycase ( attr_name )	165:6:4525:4583	4604026	0	True				
ANR	4604073	AndExpression	ignored_attrs && ignored_attrs -> contains_anycase ( attr_name )		4604026	0		&&			
ANR	4604074	Identifier	ignored_attrs		4604026	0					
ANR	4604075	CallExpression	ignored_attrs -> contains_anycase ( attr_name )		4604026	1					
ANR	4604076	Callee	ignored_attrs -> contains_anycase		4604026	0					
ANR	4604077	PtrMemberAccess	ignored_attrs -> contains_anycase		4604026	0					
ANR	4604078	Identifier	ignored_attrs		4604026	0					
ANR	4604079	Identifier	contains_anycase		4604026	1					
ANR	4604080	ArgumentList	attr_name		4604026	1					
ANR	4604081	Argument	attr_name		4604026	0					
ANR	4604082	Identifier	attr_name		4604026	0					
ANR	4604083	CompoundStatement		7:68:242:242	4604026	1					
ANR	4604084	IfStatement	if ( verbose )		4604026	0					
ANR	4604085	Condition	verbose	166:7:4596:4602	4604026	0	True				
ANR	4604086	Identifier	verbose		4604026	0					
ANR	4604087	CompoundStatement		8:17:261:261	4604026	1					
ANR	4604088	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ClassAdsAreSame(): skipping \\""%s\\""\\n"" , attr_name )"	167:4:4612:4692	4604026	0	True				
ANR	4604089	CallExpression	"dprintf ( D_FULLDEBUG , ""ClassAdsAreSame(): skipping \\""%s\\""\\n"" , attr_name )"		4604026	0					
ANR	4604090	Callee	dprintf		4604026	0					
ANR	4604091	Identifier	dprintf		4604026	0					
ANR	4604092	ArgumentList	D_FULLDEBUG		4604026	1					
ANR	4604093	Argument	D_FULLDEBUG		4604026	0					
ANR	4604094	Identifier	D_FULLDEBUG		4604026	0					
ANR	4604095	Argument	"""ClassAdsAreSame(): skipping \\""%s\\""\\n"""		4604026	1					
ANR	4604096	PrimaryExpression	"""ClassAdsAreSame(): skipping \\""%s\\""\\n"""		4604026	0					
ANR	4604097	Argument	attr_name		4604026	2					
ANR	4604098	Identifier	attr_name		4604026	0					
ANR	4604099	ContinueStatement	continue ;	170:3:4702:4710	4604026	1	True				
ANR	4604100	ExpressionStatement	ad1_expr = ad1 -> LookupExpr ( attr_name )	172:2:4718:4757	4604026	1	True				
ANR	4604101	AssignmentExpression	ad1_expr = ad1 -> LookupExpr ( attr_name )		4604026	0		=			
ANR	4604102	Identifier	ad1_expr		4604026	0					
ANR	4604103	CallExpression	ad1 -> LookupExpr ( attr_name )		4604026	1					
ANR	4604104	Callee	ad1 -> LookupExpr		4604026	0					
ANR	4604105	PtrMemberAccess	ad1 -> LookupExpr		4604026	0					
ANR	4604106	Identifier	ad1		4604026	0					
ANR	4604107	Identifier	LookupExpr		4604026	1					
ANR	4604108	ArgumentList	attr_name		4604026	1					
ANR	4604109	Argument	attr_name		4604026	0					
ANR	4604110	Identifier	attr_name		4604026	0					
ANR	4604111	IfStatement	if ( ! ad1_expr )		4604026	2					
ANR	4604112	Condition	! ad1_expr	173:6:4765:4774	4604026	0	True				
ANR	4604113	UnaryOperationExpression	! ad1_expr		4604026	0					
ANR	4604114	UnaryOperator	!		4604026	0					
ANR	4604115	Identifier	ad1_expr		4604026	1					
ANR	4604116	CompoundStatement		15:19:433:433	4604026	1					
ANR	4604117	IfStatement	if ( verbose )		4604026	0					
ANR	4604118	Condition	verbose	176:7:4864:4870	4604026	0	True				
ANR	4604119	Identifier	verbose		4604026	0					
ANR	4604120	CompoundStatement		18:17:529:529	4604026	1					
ANR	4604121	Statement	dprintf	177:4:4880:4886	4604026	0	True				
ANR	4604122	Statement	(	177:11:4887:4887	4604026	1	True				
ANR	4604123	Statement	D_FULLDEBUG	177:13:4889:4899	4604026	2	True				
ANR	4604124	Statement	","	177:24:4900:4900	4604026	3	True				
ANR	4604125	Statement	"""ClassAdsAreSame(): """	177:26:4902:4922	4604026	4	True				
ANR	4604126	Statement	"""ad2 contains %s and ad1 does not\\n"""	178:7:4931:4966	4604026	5	True				
ANR	4604127	Statement	","	178:43:4967:4967	4604026	6	True				
ANR	4604128	Statement	attr_name	178:45:4969:4977	4604026	7	True				
ANR	4604129	Statement	)	178:55:4979:4979	4604026	8	True				
ANR	4604130	ExpressionStatement		178:56:4980:4980	4604026	9	True				
ANR	4604131	ExpressionStatement	found_diff = true	180:3:4990:5007	4604026	1	True				
ANR	4604132	AssignmentExpression	found_diff = true		4604026	0		=			
ANR	4604133	Identifier	found_diff		4604026	0					
ANR	4604134	Identifier	true		4604026	1					
ANR	4604135	BreakStatement	break ;	181:3:5012:5017	4604026	2	True				
ANR	4604136	IfStatement	if ( ad1_expr -> SameAs ( ad2_expr ) )		4604026	3					
ANR	4604137	Condition	ad1_expr -> SameAs ( ad2_expr )	183:6:5029:5056	4604026	0	True				
ANR	4604138	CallExpression	ad1_expr -> SameAs ( ad2_expr )		4604026	0					
ANR	4604139	Callee	ad1_expr -> SameAs		4604026	0					
ANR	4604140	PtrMemberAccess	ad1_expr -> SameAs		4604026	0					
ANR	4604141	Identifier	ad1_expr		4604026	0					
ANR	4604142	Identifier	SameAs		4604026	1					
ANR	4604143	ArgumentList	ad2_expr		4604026	1					
ANR	4604144	Argument	ad2_expr		4604026	0					
ANR	4604145	Identifier	ad2_expr		4604026	0					
ANR	4604146	CompoundStatement		25:37:715:715	4604026	1					
ANR	4604147	IfStatement	if ( verbose )		4604026	0					
ANR	4604148	Condition	verbose	184:7:5069:5075	4604026	0	True				
ANR	4604149	Identifier	verbose		4604026	0					
ANR	4604150	CompoundStatement		26:17:734:734	4604026	1					
ANR	4604151	Statement	dprintf	185:4:5085:5091	4604026	0	True				
ANR	4604152	Statement	(	185:11:5092:5092	4604026	1	True				
ANR	4604153	Statement	D_FULLDEBUG	185:13:5094:5104	4604026	2	True				
ANR	4604154	Statement	","	185:24:5105:5105	4604026	3	True				
ANR	4604155	Statement	"""ClassAdsAreSame(): value of %s in """	185:26:5107:5142	4604026	4	True				
ANR	4604156	Statement	"""ad1 matches value in ad2\\n"""	186:7:5151:5178	4604026	5	True				
ANR	4604157	Statement	","	186:35:5179:5179	4604026	6	True				
ANR	4604158	Statement	attr_name	186:37:5181:5189	4604026	7	True				
ANR	4604159	Statement	)	186:47:5191:5191	4604026	8	True				
ANR	4604160	ExpressionStatement		186:48:5192:5192	4604026	9	True				
ANR	4604161	ElseStatement	else		4604026	0					
ANR	4604162	CompoundStatement		30:9:863:863	4604026	0					
ANR	4604163	IfStatement	if ( verbose )		4604026	0					
ANR	4604164	Condition	verbose	189:7:5217:5223	4604026	0	True				
ANR	4604165	Identifier	verbose		4604026	0					
ANR	4604166	CompoundStatement		31:17:882:882	4604026	1					
ANR	4604167	Statement	dprintf	190:4:5233:5239	4604026	0	True				
ANR	4604168	Statement	(	190:11:5240:5240	4604026	1	True				
ANR	4604169	Statement	D_FULLDEBUG	190:13:5242:5252	4604026	2	True				
ANR	4604170	Statement	","	190:24:5253:5253	4604026	3	True				
ANR	4604171	Statement	"""ClassAdsAreSame(): value of %s in """	190:26:5255:5290	4604026	4	True				
ANR	4604172	Statement	"""ad1 is different than in ad2\\n"""	191:7:5299:5330	4604026	5	True				
ANR	4604173	Statement	","	191:39:5331:5331	4604026	6	True				
ANR	4604174	Statement	attr_name	191:41:5333:5341	4604026	7	True				
ANR	4604175	Statement	)	191:51:5343:5343	4604026	8	True				
ANR	4604176	ExpressionStatement		191:52:5344:5344	4604026	9	True				
ANR	4604177	ExpressionStatement	found_diff = true	193:3:5354:5371	4604026	1	True				
ANR	4604178	AssignmentExpression	found_diff = true		4604026	0		=			
ANR	4604179	Identifier	found_diff		4604026	0					
ANR	4604180	Identifier	true		4604026	1					
ANR	4604181	BreakStatement	break ;	194:3:5376:5381	4604026	2	True				
ANR	4604182	ReturnStatement	return ! found_diff ;	197:1:5391:5410	4604026	5	True				
ANR	4604183	UnaryOperationExpression	! found_diff		4604026	0					
ANR	4604184	UnaryOperator	!		4604026	0					
ANR	4604185	Identifier	found_diff		4604026	1					
ANR	4604186	ReturnType	bool		4604026	1					
ANR	4604187	Identifier	ClassAdsAreSame		4604026	2					
ANR	4604188	ParameterList	"compat_classad :: ClassAd * ad1 , compat_classad :: ClassAd * ad2 , StringList * ignored_attrs , bool verbose"		4604026	3					
ANR	4604189	Parameter	compat_classad :: ClassAd * ad1	158:22:4241:4268	4604026	0	True				
ANR	4604190	ParameterType	compat_classad :: ClassAd *		4604026	0					
ANR	4604191	Identifier	ad1		4604026	1					
ANR	4604192	Parameter	compat_classad :: ClassAd * ad2	158:52:4271:4299	4604026	1	True				
ANR	4604193	ParameterType	compat_classad :: ClassAd *		4604026	0					
ANR	4604194	Identifier	ad2		4604026	1					
ANR	4604195	Parameter	StringList * ignored_attrs	158:83:4302:4326	4604026	2	True				
ANR	4604196	ParameterType	StringList *		4604026	0					
ANR	4604197	Identifier	ignored_attrs		4604026	1					
ANR	4604198	Parameter	bool verbose	158:110:4329:4340	4604026	3	True				
ANR	4604199	ParameterType	bool		4604026	0					
ANR	4604200	Identifier	verbose		4604026	1					
ANR	4604201	CFGEntryNode	ENTRY		4604026		True				
ANR	4604202	CFGExitNode	EXIT		4604026		True				
ANR	4604203	Symbol	attr_name		4604026						
ANR	4604204	Symbol	* ad2		4604026						
ANR	4604205	Symbol	* ad1		4604026						
ANR	4604206	Symbol	ignored_attrs		4604026						
ANR	4604207	Symbol	false		4604026						
ANR	4604208	Symbol	* ignored_attrs		4604026						
ANR	4604209	Symbol	D_FULLDEBUG		4604026						
ANR	4604210	Symbol	ad1_expr -> SameAs		4604026						
ANR	4604211	Symbol	ad2		4604026						
ANR	4604212	Symbol	ad1		4604026						
ANR	4604213	Symbol	verbose		4604026						
ANR	4604214	Symbol	ad1_expr		4604026						
ANR	4604215	Symbol	ad2 -> NextExpr		4604026						
ANR	4604216	Symbol	ad1 -> LookupExpr		4604026						
ANR	4604217	Symbol	found_diff		4604026						
ANR	4604218	Symbol	ad2_expr		4604026						
ANR	4604219	Symbol	true		4604026						
ANR	4604220	Symbol	ignored_attrs -> contains_anycase		4604026						
ANR	4604221	Symbol	* ad1_expr		4604026						
ANR	4604222	Function	EvalExprTree	200:0:5415:7048							
ANR	4604223	FunctionDef	"EvalExprTree (classad :: ExprTree * expr , compat_classad :: ClassAd * source , compat_classad :: ClassAd * target , compat_classad :: EvalResult * result)"		4604222	0					
ANR	4604224	CompoundStatement		202:0:5567:7048	4604222	0					
ANR	4604225	IdentifierDeclStatement	int rc = TRUE ;	203:1:5570:5583	4604222	0	True				
ANR	4604226	IdentifierDecl	rc = TRUE		4604222	0					
ANR	4604227	IdentifierDeclType	int		4604222	0					
ANR	4604228	Identifier	rc		4604222	1					
ANR	4604229	AssignmentExpression	rc = TRUE		4604222	2		=			
ANR	4604230	Identifier	TRUE		4604222	0					
ANR	4604231	Identifier	TRUE		4604222	1					
ANR	4604232	IfStatement	if ( ! expr || ! source || ! result )		4604222	1					
ANR	4604233	Condition	! expr || ! source || ! result	204:6:5591:5617	4604222	0	True				
ANR	4604234	OrExpression	! expr || ! source || ! result		4604222	0		||			
ANR	4604235	UnaryOperationExpression	! expr		4604222	0					
ANR	4604236	UnaryOperator	!		4604222	0					
ANR	4604237	Identifier	expr		4604222	1					
ANR	4604238	OrExpression	! source || ! result		4604222	1		||			
ANR	4604239	UnaryOperationExpression	! source		4604222	0					
ANR	4604240	UnaryOperator	!		4604222	0					
ANR	4604241	Identifier	source		4604222	1					
ANR	4604242	UnaryOperationExpression	! result		4604222	1					
ANR	4604243	UnaryOperator	!		4604222	0					
ANR	4604244	Identifier	result		4604222	1					
ANR	4604245	CompoundStatement		3:36:53:53	4604222	1					
ANR	4604246	ReturnStatement	return FALSE ;	205:2:5625:5637	4604222	0	True				
ANR	4604247	Identifier	FALSE		4604222	0					
ANR	4604248	IdentifierDeclStatement	classad :: Value val ;	208:1:5644:5662	4604222	2	True				
ANR	4604249	IdentifierDecl	val		4604222	0					
ANR	4604250	IdentifierDeclType	classad :: Value		4604222	0					
ANR	4604251	Identifier	val		4604222	1					
ANR	4604252	IdentifierDeclStatement	const classad :: ClassAd * old_scope = expr -> GetParentScope ( ) ;	209:1:5665:5723	4604222	3	True				
ANR	4604253	IdentifierDecl	* old_scope = expr -> GetParentScope ( )		4604222	0					
ANR	4604254	IdentifierDeclType	const classad :: ClassAd *		4604222	0					
ANR	4604255	Identifier	old_scope		4604222	1					
ANR	4604256	AssignmentExpression	* old_scope = expr -> GetParentScope ( )		4604222	2		=			
ANR	4604257	Identifier	old_scope		4604222	0					
ANR	4604258	CallExpression	expr -> GetParentScope ( )		4604222	1					
ANR	4604259	Callee	expr -> GetParentScope		4604222	0					
ANR	4604260	PtrMemberAccess	expr -> GetParentScope		4604222	0					
ANR	4604261	Identifier	expr		4604222	0					
ANR	4604262	Identifier	GetParentScope		4604222	1					
ANR	4604263	ArgumentList			4604222	1					
ANR	4604264	IdentifierDeclStatement	classad :: MatchClassAd * mad = NULL ;	210:1:5726:5759	4604222	4	True				
ANR	4604265	IdentifierDecl	* mad = NULL		4604222	0					
ANR	4604266	IdentifierDeclType	classad :: MatchClassAd *		4604222	0					
ANR	4604267	Identifier	mad		4604222	1					
ANR	4604268	AssignmentExpression	* mad = NULL		4604222	2		=			
ANR	4604269	Identifier	NULL		4604222	0					
ANR	4604270	Identifier	NULL		4604222	1					
ANR	4604271	ExpressionStatement	expr -> SetParentScope ( source )	212:1:5763:5793	4604222	5	True				
ANR	4604272	CallExpression	expr -> SetParentScope ( source )		4604222	0					
ANR	4604273	Callee	expr -> SetParentScope		4604222	0					
ANR	4604274	PtrMemberAccess	expr -> SetParentScope		4604222	0					
ANR	4604275	Identifier	expr		4604222	0					
ANR	4604276	Identifier	SetParentScope		4604222	1					
ANR	4604277	ArgumentList	source		4604222	1					
ANR	4604278	Argument	source		4604222	0					
ANR	4604279	Identifier	source		4604222	0					
ANR	4604280	IfStatement	if ( target && target != source )		4604222	6					
ANR	4604281	Condition	target && target != source	213:6:5801:5826	4604222	0	True				
ANR	4604282	AndExpression	target && target != source		4604222	0		&&			
ANR	4604283	Identifier	target		4604222	0					
ANR	4604284	EqualityExpression	target != source		4604222	1		!=			
ANR	4604285	Identifier	target		4604222	0					
ANR	4604286	Identifier	source		4604222	1					
ANR	4604287	CompoundStatement		12:35:262:262	4604222	1					
ANR	4604288	ExpressionStatement	"mad = compat_classad :: getTheMatchAd ( source , target )"	214:2:5834:5887	4604222	0	True				
ANR	4604289	AssignmentExpression	"mad = compat_classad :: getTheMatchAd ( source , target )"		4604222	0		=			
ANR	4604290	Identifier	mad		4604222	0					
ANR	4604291	CallExpression	"compat_classad :: getTheMatchAd ( source , target )"		4604222	1					
ANR	4604292	Callee	compat_classad :: getTheMatchAd		4604222	0					
ANR	4604293	Identifier	compat_classad :: getTheMatchAd		4604222	0					
ANR	4604294	ArgumentList	source		4604222	1					
ANR	4604295	Argument	source		4604222	0					
ANR	4604296	Identifier	source		4604222	0					
ANR	4604297	Argument	target		4604222	1					
ANR	4604298	Identifier	target		4604222	0					
ANR	4604299	ElseStatement	else		4604222	0					
ANR	4604300	CompoundStatement		14:8:329:329	4604222	0					
ANR	4604301	ExpressionStatement	compat_classad :: getTheMyRef ( source )	216:2:5901:5938	4604222	0	True				
ANR	4604302	CallExpression	compat_classad :: getTheMyRef ( source )		4604222	0					
ANR	4604303	Callee	compat_classad :: getTheMyRef		4604222	0					
ANR	4604304	Identifier	compat_classad :: getTheMyRef		4604222	0					
ANR	4604305	ArgumentList	source		4604222	1					
ANR	4604306	Argument	source		4604222	0					
ANR	4604307	Identifier	source		4604222	0					
ANR	4604308	IfStatement	"if ( source -> EvaluateExpr ( expr , val ) )"		4604222	7					
ANR	4604309	Condition	"source -> EvaluateExpr ( expr , val )"	218:6:5949:5981	4604222	0	True				
ANR	4604310	CallExpression	"source -> EvaluateExpr ( expr , val )"		4604222	0					
ANR	4604311	Callee	source -> EvaluateExpr		4604222	0					
ANR	4604312	PtrMemberAccess	source -> EvaluateExpr		4604222	0					
ANR	4604313	Identifier	source		4604222	0					
ANR	4604314	Identifier	EvaluateExpr		4604222	1					
ANR	4604315	ArgumentList	expr		4604222	1					
ANR	4604316	Argument	expr		4604222	0					
ANR	4604317	Identifier	expr		4604222	0					
ANR	4604318	Argument	val		4604222	1					
ANR	4604319	Identifier	val		4604222	0					
ANR	4604320	CompoundStatement		17:42:417:417	4604222	1					
ANR	4604321	SwitchStatement	switch ( val . GetType ( ) )		4604222	0					
ANR	4604322	Condition	val . GetType ( )	219:11:5998:6010	4604222	0	True				
ANR	4604323	CallExpression	val . GetType ( )		4604222	0					
ANR	4604324	Callee	val . GetType		4604222	0					
ANR	4604325	MemberAccess	val . GetType		4604222	0					
ANR	4604326	Identifier	val		4604222	0					
ANR	4604327	Identifier	GetType		4604222	1					
ANR	4604328	ArgumentList			4604222	1					
ANR	4604329	CompoundStatement		18:27:446:446	4604222	1					
ANR	4604330	Label	case classad :: Value :: ERROR_VALUE :	220:2:6018:6050	4604222	0	True				
ANR	4604331	Identifier	classad :: Value :: ERROR_VALUE		4604222	0					
ANR	4604332	ExpressionStatement	result -> type = compat_classad :: LX_ERROR	221:3:6055:6094	4604222	1	True				
ANR	4604333	AssignmentExpression	result -> type = compat_classad :: LX_ERROR		4604222	0		=			
ANR	4604334	PtrMemberAccess	result -> type		4604222	0					
ANR	4604335	Identifier	result		4604222	0					
ANR	4604336	Identifier	type		4604222	1					
ANR	4604337	Identifier	compat_classad :: LX_ERROR		4604222	1					
ANR	4604338	BreakStatement	break ;	222:3:6099:6104	4604222	2	True				
ANR	4604339	Label	case classad :: Value :: UNDEFINED_VALUE :	223:2:6108:6144	4604222	3	True				
ANR	4604340	Identifier	classad :: Value :: UNDEFINED_VALUE		4604222	0					
ANR	4604341	ExpressionStatement	result -> type = compat_classad :: LX_UNDEFINED	224:3:6149:6192	4604222	4	True				
ANR	4604342	AssignmentExpression	result -> type = compat_classad :: LX_UNDEFINED		4604222	0		=			
ANR	4604343	PtrMemberAccess	result -> type		4604222	0					
ANR	4604344	Identifier	result		4604222	0					
ANR	4604345	Identifier	type		4604222	1					
ANR	4604346	Identifier	compat_classad :: LX_UNDEFINED		4604222	1					
ANR	4604347	BreakStatement	break ;	225:3:6197:6202	4604222	5	True				
ANR	4604348	Label	case classad :: Value :: BOOLEAN_VALUE :	226:2:6206:6240	4604222	6	True				
ANR	4604349	Identifier	classad :: Value :: BOOLEAN_VALUE		4604222	0					
ANR	4604350	CompoundStatement		27:3:725:731	4604222	7					
ANR	4604351	ExpressionStatement	result -> type = compat_classad :: LX_INTEGER	227:3:6247:6288	4604222	0	True				
ANR	4604352	AssignmentExpression	result -> type = compat_classad :: LX_INTEGER		4604222	0		=			
ANR	4604353	PtrMemberAccess	result -> type		4604222	0					
ANR	4604354	Identifier	result		4604222	0					
ANR	4604355	Identifier	type		4604222	1					
ANR	4604356	Identifier	compat_classad :: LX_INTEGER		4604222	1					
ANR	4604357	IdentifierDeclStatement	bool v ;	228:3:6293:6299	4604222	1	True				
ANR	4604358	IdentifierDecl	v		4604222	0					
ANR	4604359	IdentifierDeclType	bool		4604222	0					
ANR	4604360	Identifier	v		4604222	1					
ANR	4604361	ExpressionStatement	val . IsBooleanValue ( v )	229:3:6304:6327	4604222	2	True				
ANR	4604362	CallExpression	val . IsBooleanValue ( v )		4604222	0					
ANR	4604363	Callee	val . IsBooleanValue		4604222	0					
ANR	4604364	MemberAccess	val . IsBooleanValue		4604222	0					
ANR	4604365	Identifier	val		4604222	0					
ANR	4604366	Identifier	IsBooleanValue		4604222	1					
ANR	4604367	ArgumentList	v		4604222	1					
ANR	4604368	Argument	v		4604222	0					
ANR	4604369	Identifier	v		4604222	0					
ANR	4604370	ExpressionStatement	result -> i = v ? 1 : 0	230:3:6332:6353	4604222	3	True				
ANR	4604371	AssignmentExpression	result -> i = v ? 1 : 0		4604222	0		=			
ANR	4604372	PtrMemberAccess	result -> i		4604222	0					
ANR	4604373	Identifier	result		4604222	0					
ANR	4604374	Identifier	i		4604222	1					
ANR	4604375	ConditionalExpression	v ? 1 : 0		4604222	1					
ANR	4604376	Condition	v		4604222	0					
ANR	4604377	Identifier	v		4604222	0					
ANR	4604378	PrimaryExpression	1		4604222	1					
ANR	4604379	PrimaryExpression	0		4604222	2					
ANR	4604380	BreakStatement	break ;	231:3:6358:6363	4604222	4	True				
ANR	4604381	Label	case classad :: Value :: INTEGER_VALUE :	233:2:6371:6405	4604222	8	True				
ANR	4604382	Identifier	classad :: Value :: INTEGER_VALUE		4604222	0					
ANR	4604383	ExpressionStatement	result -> type = compat_classad :: LX_INTEGER	234:3:6410:6451	4604222	9	True				
ANR	4604384	AssignmentExpression	result -> type = compat_classad :: LX_INTEGER		4604222	0		=			
ANR	4604385	PtrMemberAccess	result -> type		4604222	0					
ANR	4604386	Identifier	result		4604222	0					
ANR	4604387	Identifier	type		4604222	1					
ANR	4604388	Identifier	compat_classad :: LX_INTEGER		4604222	1					
ANR	4604389	ExpressionStatement	val . IsIntegerValue ( result -> i )	235:3:6456:6487	4604222	10	True				
ANR	4604390	CallExpression	val . IsIntegerValue ( result -> i )		4604222	0					
ANR	4604391	Callee	val . IsIntegerValue		4604222	0					
ANR	4604392	MemberAccess	val . IsIntegerValue		4604222	0					
ANR	4604393	Identifier	val		4604222	0					
ANR	4604394	Identifier	IsIntegerValue		4604222	1					
ANR	4604395	ArgumentList	result -> i		4604222	1					
ANR	4604396	Argument	result -> i		4604222	0					
ANR	4604397	PtrMemberAccess	result -> i		4604222	0					
ANR	4604398	Identifier	result		4604222	0					
ANR	4604399	Identifier	i		4604222	1					
ANR	4604400	BreakStatement	break ;	236:3:6492:6497	4604222	11	True				
ANR	4604401	Label	case classad :: Value :: REAL_VALUE :	237:2:6501:6532	4604222	12	True				
ANR	4604402	Identifier	classad :: Value :: REAL_VALUE		4604222	0					
ANR	4604403	CompoundStatement		38:3:1015:1023	4604222	13					
ANR	4604404	ExpressionStatement	result -> type = compat_classad :: LX_FLOAT	238:3:6539:6578	4604222	0	True				
ANR	4604405	AssignmentExpression	result -> type = compat_classad :: LX_FLOAT		4604222	0		=			
ANR	4604406	PtrMemberAccess	result -> type		4604222	0					
ANR	4604407	Identifier	result		4604222	0					
ANR	4604408	Identifier	type		4604222	1					
ANR	4604409	Identifier	compat_classad :: LX_FLOAT		4604222	1					
ANR	4604410	IdentifierDeclStatement	double d ;	239:3:6583:6591	4604222	1	True				
ANR	4604411	IdentifierDecl	d		4604222	0					
ANR	4604412	IdentifierDeclType	double		4604222	0					
ANR	4604413	Identifier	d		4604222	1					
ANR	4604414	ExpressionStatement	val . IsRealValue ( d )	240:3:6596:6616	4604222	2	True				
ANR	4604415	CallExpression	val . IsRealValue ( d )		4604222	0					
ANR	4604416	Callee	val . IsRealValue		4604222	0					
ANR	4604417	MemberAccess	val . IsRealValue		4604222	0					
ANR	4604418	Identifier	val		4604222	0					
ANR	4604419	Identifier	IsRealValue		4604222	1					
ANR	4604420	ArgumentList	d		4604222	1					
ANR	4604421	Argument	d		4604222	0					
ANR	4604422	Identifier	d		4604222	0					
ANR	4604423	ExpressionStatement	result -> f = d	241:3:6621:6634	4604222	3	True				
ANR	4604424	AssignmentExpression	result -> f = d		4604222	0		=			
ANR	4604425	PtrMemberAccess	result -> f		4604222	0					
ANR	4604426	Identifier	result		4604222	0					
ANR	4604427	Identifier	f		4604222	1					
ANR	4604428	Identifier	d		4604222	1					
ANR	4604429	BreakStatement	break ;	242:3:6639:6644	4604222	4	True				
ANR	4604430	Label	case classad :: Value :: STRING_VALUE :	244:2:6652:6685	4604222	14	True				
ANR	4604431	Identifier	classad :: Value :: STRING_VALUE		4604222	0					
ANR	4604432	CompoundStatement		45:3:1169:1182	4604222	15					
ANR	4604433	ExpressionStatement	result -> type = compat_classad :: LX_STRING	245:3:6692:6732	4604222	0	True				
ANR	4604434	AssignmentExpression	result -> type = compat_classad :: LX_STRING		4604222	0		=			
ANR	4604435	PtrMemberAccess	result -> type		4604222	0					
ANR	4604436	Identifier	result		4604222	0					
ANR	4604437	Identifier	type		4604222	1					
ANR	4604438	Identifier	compat_classad :: LX_STRING		4604222	1					
ANR	4604439	IdentifierDeclStatement	std :: string s ;	246:3:6737:6750	4604222	1	True				
ANR	4604440	IdentifierDecl	s		4604222	0					
ANR	4604441	IdentifierDeclType	std :: string		4604222	0					
ANR	4604442	Identifier	s		4604222	1					
ANR	4604443	ExpressionStatement	val . IsStringValue ( s )	247:3:6755:6777	4604222	2	True				
ANR	4604444	CallExpression	val . IsStringValue ( s )		4604222	0					
ANR	4604445	Callee	val . IsStringValue		4604222	0					
ANR	4604446	MemberAccess	val . IsStringValue		4604222	0					
ANR	4604447	Identifier	val		4604222	0					
ANR	4604448	Identifier	IsStringValue		4604222	1					
ANR	4604449	ArgumentList	s		4604222	1					
ANR	4604450	Argument	s		4604222	0					
ANR	4604451	Identifier	s		4604222	0					
ANR	4604452	ExpressionStatement	result -> s = strnewp ( s . c_str ( ) )	248:3:6782:6814	4604222	3	True				
ANR	4604453	AssignmentExpression	result -> s = strnewp ( s . c_str ( ) )		4604222	0		=			
ANR	4604454	PtrMemberAccess	result -> s		4604222	0					
ANR	4604455	Identifier	result		4604222	0					
ANR	4604456	Identifier	s		4604222	1					
ANR	4604457	CallExpression	strnewp ( s . c_str ( ) )		4604222	1					
ANR	4604458	Callee	strnewp		4604222	0					
ANR	4604459	Identifier	strnewp		4604222	0					
ANR	4604460	ArgumentList	s . c_str ( )		4604222	1					
ANR	4604461	Argument	s . c_str ( )		4604222	0					
ANR	4604462	CallExpression	s . c_str ( )		4604222	0					
ANR	4604463	Callee	s . c_str		4604222	0					
ANR	4604464	MemberAccess	s . c_str		4604222	0					
ANR	4604465	Identifier	s		4604222	0					
ANR	4604466	Identifier	c_str		4604222	1					
ANR	4604467	ArgumentList			4604222	1					
ANR	4604468	BreakStatement	break ;	249:3:6819:6824	4604222	4	True				
ANR	4604469	Label	default :	251:2:6832:6839	4604222	16	True				
ANR	4604470	Identifier	default		4604222	0					
ANR	4604471	ExpressionStatement	rc = FALSE	252:3:6844:6854	4604222	17	True				
ANR	4604472	AssignmentExpression	rc = FALSE		4604222	0		=			
ANR	4604473	Identifier	rc		4604222	0					
ANR	4604474	Identifier	FALSE		4604222	1					
ANR	4604475	ElseStatement	else		4604222	0					
ANR	4604476	CompoundStatement		53:8:1300:1300	4604222	0					
ANR	4604477	ExpressionStatement	rc = FALSE	255:2:6872:6882	4604222	0	True				
ANR	4604478	AssignmentExpression	rc = FALSE		4604222	0		=			
ANR	4604479	Identifier	rc		4604222	0					
ANR	4604480	Identifier	FALSE		4604222	1					
ANR	4604481	IfStatement	if ( mad )		4604222	8					
ANR	4604482	Condition	mad	258:6:6894:6896	4604222	0	True				
ANR	4604483	Identifier	mad		4604222	0					
ANR	4604484	CompoundStatement		57:12:1332:1332	4604222	1					
ANR	4604485	ExpressionStatement	compat_classad :: releaseTheMatchAd ( )	259:2:6904:6939	4604222	0	True				
ANR	4604486	CallExpression	compat_classad :: releaseTheMatchAd ( )		4604222	0					
ANR	4604487	Callee	compat_classad :: releaseTheMatchAd		4604222	0					
ANR	4604488	Identifier	compat_classad :: releaseTheMatchAd		4604222	0					
ANR	4604489	ArgumentList			4604222	1					
ANR	4604490	ElseStatement	else		4604222	0					
ANR	4604491	CompoundStatement		59:8:1381:1381	4604222	0					
ANR	4604492	ExpressionStatement	compat_classad :: releaseTheMyRef ( source )	261:2:6953:6994	4604222	0	True				
ANR	4604493	CallExpression	compat_classad :: releaseTheMyRef ( source )		4604222	0					
ANR	4604494	Callee	compat_classad :: releaseTheMyRef		4604222	0					
ANR	4604495	Identifier	compat_classad :: releaseTheMyRef		4604222	0					
ANR	4604496	ArgumentList	source		4604222	1					
ANR	4604497	Argument	source		4604222	0					
ANR	4604498	Identifier	source		4604222	0					
ANR	4604499	ExpressionStatement	expr -> SetParentScope ( old_scope )	263:1:7000:7033	4604222	9	True				
ANR	4604500	CallExpression	expr -> SetParentScope ( old_scope )		4604222	0					
ANR	4604501	Callee	expr -> SetParentScope		4604222	0					
ANR	4604502	PtrMemberAccess	expr -> SetParentScope		4604222	0					
ANR	4604503	Identifier	expr		4604222	0					
ANR	4604504	Identifier	SetParentScope		4604222	1					
ANR	4604505	ArgumentList	old_scope		4604222	1					
ANR	4604506	Argument	old_scope		4604222	0					
ANR	4604507	Identifier	old_scope		4604222	0					
ANR	4604508	ReturnStatement	return rc ;	265:1:7037:7046	4604222	10	True				
ANR	4604509	Identifier	rc		4604222	0					
ANR	4604510	ReturnType	int		4604222	1					
ANR	4604511	Identifier	EvalExprTree		4604222	2					
ANR	4604512	ParameterList	"classad :: ExprTree * expr , compat_classad :: ClassAd * source , compat_classad :: ClassAd * target , compat_classad :: EvalResult * result"		4604222	3					
ANR	4604513	Parameter	classad :: ExprTree * expr	200:18:5433:5455	4604222	0	True				
ANR	4604514	ParameterType	classad :: ExprTree *		4604222	0					
ANR	4604515	Identifier	expr		4604222	1					
ANR	4604516	Parameter	compat_classad :: ClassAd * source	200:43:5458:5488	4604222	1	True				
ANR	4604517	ParameterType	compat_classad :: ClassAd *		4604222	0					
ANR	4604518	Identifier	source		4604222	1					
ANR	4604519	Parameter	compat_classad :: ClassAd * target	201:6:5497:5527	4604222	2	True				
ANR	4604520	ParameterType	compat_classad :: ClassAd *		4604222	0					
ANR	4604521	Identifier	target		4604222	1					
ANR	4604522	Parameter	compat_classad :: EvalResult * result	201:39:5530:5563	4604222	3	True				
ANR	4604523	ParameterType	compat_classad :: EvalResult *		4604222	0					
ANR	4604524	Identifier	result		4604222	1					
ANR	4604525	CFGEntryNode	ENTRY		4604222		True				
ANR	4604526	CFGExitNode	EXIT		4604222		True				
ANR	4604527	Symbol	compat_classad :: LX_INTEGER		4604222						
ANR	4604528	Symbol	result -> s		4604222						
ANR	4604529	Symbol	old_scope		4604222						
ANR	4604530	Symbol	compat_classad :: LX_STRING		4604222						
ANR	4604531	Symbol	source		4604222						
ANR	4604532	Symbol	s . c_str		4604222						
ANR	4604533	Symbol	source -> EvaluateExpr		4604222						
ANR	4604534	Symbol	result		4604222						
ANR	4604535	Symbol	mad		4604222						
ANR	4604536	Symbol	val . GetType		4604222						
ANR	4604537	Symbol	compat_classad :: LX_ERROR		4604222						
ANR	4604538	Symbol	* result		4604222						
ANR	4604539	Symbol	* source		4604222						
ANR	4604540	Symbol	compat_classad :: LX_UNDEFINED		4604222						
ANR	4604541	Symbol	strnewp		4604222						
ANR	4604542	Symbol	expr		4604222						
ANR	4604543	Symbol	val		4604222						
ANR	4604544	Symbol	NULL		4604222						
ANR	4604545	Symbol	d		4604222						
ANR	4604546	Symbol	TRUE		4604222						
ANR	4604547	Symbol	compat_classad :: LX_FLOAT		4604222						
ANR	4604548	Symbol	result -> type		4604222						
ANR	4604549	Symbol	target		4604222						
ANR	4604550	Symbol	rc		4604222						
ANR	4604551	Symbol	expr -> GetParentScope		4604222						
ANR	4604552	Symbol	s		4604222						
ANR	4604553	Symbol	* expr		4604222						
ANR	4604554	Symbol	compat_classad :: getTheMatchAd		4604222						
ANR	4604555	Symbol	v		4604222						
ANR	4604556	Symbol	result -> i		4604222						
ANR	4604557	Symbol	FALSE		4604222						
ANR	4604558	Symbol	result -> f		4604222						
ANR	4604559	Function	IsAMatch	268:0:7051:7296							
ANR	4604560	FunctionDef	"IsAMatch (compat_classad :: ClassAd * ad1 , compat_classad :: ClassAd * ad2)"		4604559	0					
ANR	4604561	CompoundStatement		269:0:7127:7296	4604559	0					
ANR	4604562	IdentifierDeclStatement	"classad :: MatchClassAd * mad = compat_classad :: getTheMatchAd ( ad1 , ad2 ) ;"	270:1:7130:7200	4604559	0	True				
ANR	4604563	IdentifierDecl	"* mad = compat_classad :: getTheMatchAd ( ad1 , ad2 )"		4604559	0					
ANR	4604564	IdentifierDeclType	classad :: MatchClassAd *		4604559	0					
ANR	4604565	Identifier	mad		4604559	1					
ANR	4604566	AssignmentExpression	"* mad = compat_classad :: getTheMatchAd ( ad1 , ad2 )"		4604559	2		=			
ANR	4604567	Identifier	mad		4604559	0					
ANR	4604568	CallExpression	"compat_classad :: getTheMatchAd ( ad1 , ad2 )"		4604559	1					
ANR	4604569	Callee	compat_classad :: getTheMatchAd		4604559	0					
ANR	4604570	Identifier	compat_classad :: getTheMatchAd		4604559	0					
ANR	4604571	ArgumentList	ad1		4604559	1					
ANR	4604572	Argument	ad1		4604559	0					
ANR	4604573	Identifier	ad1		4604559	0					
ANR	4604574	Argument	ad2		4604559	1					
ANR	4604575	Identifier	ad2		4604559	0					
ANR	4604576	IdentifierDeclStatement	bool result = mad -> symmetricMatch ( ) ;	272:1:7204:7239	4604559	1	True				
ANR	4604577	IdentifierDecl	result = mad -> symmetricMatch ( )		4604559	0					
ANR	4604578	IdentifierDeclType	bool		4604559	0					
ANR	4604579	Identifier	result		4604559	1					
ANR	4604580	AssignmentExpression	result = mad -> symmetricMatch ( )		4604559	2		=			
ANR	4604581	Identifier	result		4604559	0					
ANR	4604582	CallExpression	mad -> symmetricMatch ( )		4604559	1					
ANR	4604583	Callee	mad -> symmetricMatch		4604559	0					
ANR	4604584	PtrMemberAccess	mad -> symmetricMatch		4604559	0					
ANR	4604585	Identifier	mad		4604559	0					
ANR	4604586	Identifier	symmetricMatch		4604559	1					
ANR	4604587	ArgumentList			4604559	1					
ANR	4604588	ExpressionStatement	compat_classad :: releaseTheMatchAd ( )	274:1:7243:7278	4604559	2	True				
ANR	4604589	CallExpression	compat_classad :: releaseTheMatchAd ( )		4604559	0					
ANR	4604590	Callee	compat_classad :: releaseTheMatchAd		4604559	0					
ANR	4604591	Identifier	compat_classad :: releaseTheMatchAd		4604559	0					
ANR	4604592	ArgumentList			4604559	1					
ANR	4604593	ReturnStatement	return result ;	275:1:7281:7294	4604559	3	True				
ANR	4604594	Identifier	result		4604559	0					
ANR	4604595	ReturnType	bool		4604559	1					
ANR	4604596	Identifier	IsAMatch		4604559	2					
ANR	4604597	ParameterList	"compat_classad :: ClassAd * ad1 , compat_classad :: ClassAd * ad2"		4604559	3					
ANR	4604598	Parameter	compat_classad :: ClassAd * ad1	268:15:7066:7093	4604559	0	True				
ANR	4604599	ParameterType	compat_classad :: ClassAd *		4604559	0					
ANR	4604600	Identifier	ad1		4604559	1					
ANR	4604601	Parameter	compat_classad :: ClassAd * ad2	268:45:7096:7123	4604559	1	True				
ANR	4604602	ParameterType	compat_classad :: ClassAd *		4604559	0					
ANR	4604603	Identifier	ad2		4604559	1					
ANR	4604604	CFGEntryNode	ENTRY		4604559		True				
ANR	4604605	CFGExitNode	EXIT		4604559		True				
ANR	4604606	Symbol	result		4604559						
ANR	4604607	Symbol	mad		4604559						
ANR	4604608	Symbol	compat_classad :: getTheMatchAd		4604559						
ANR	4604609	Symbol	mad -> symmetricMatch		4604559						
ANR	4604610	Symbol	* mad		4604559						
ANR	4604611	Symbol	ad2		4604559						
ANR	4604612	Symbol	ad1		4604559						
ANR	4604613	Function	IsAHalfMatch	278:0:7299:8049							
ANR	4604614	FunctionDef	"IsAHalfMatch (compat_classad :: ClassAd * my , compat_classad :: ClassAd * target)"		4604613	0					
ANR	4604615	CompoundStatement		279:0:7381:8049	4604613	0					
ANR	4604616	IdentifierDeclStatement	char const * my_target_type = my -> GetTargetTypeName ( ) ;	283:1:7564:7616	4604613	0	True				
ANR	4604617	IdentifierDecl	* my_target_type = my -> GetTargetTypeName ( )		4604613	0					
ANR	4604618	IdentifierDeclType	char const *		4604613	0					
ANR	4604619	Identifier	my_target_type		4604613	1					
ANR	4604620	AssignmentExpression	* my_target_type = my -> GetTargetTypeName ( )		4604613	2		=			
ANR	4604621	Identifier	my_target_type		4604613	0					
ANR	4604622	CallExpression	my -> GetTargetTypeName ( )		4604613	1					
ANR	4604623	Callee	my -> GetTargetTypeName		4604613	0					
ANR	4604624	PtrMemberAccess	my -> GetTargetTypeName		4604613	0					
ANR	4604625	Identifier	my		4604613	0					
ANR	4604626	Identifier	GetTargetTypeName		4604613	1					
ANR	4604627	ArgumentList			4604613	1					
ANR	4604628	IdentifierDeclStatement	char const * target_type = target -> GetMyTypeName ( ) ;	284:1:7619:7668	4604613	1	True				
ANR	4604629	IdentifierDecl	* target_type = target -> GetMyTypeName ( )		4604613	0					
ANR	4604630	IdentifierDeclType	char const *		4604613	0					
ANR	4604631	Identifier	target_type		4604613	1					
ANR	4604632	AssignmentExpression	* target_type = target -> GetMyTypeName ( )		4604613	2		=			
ANR	4604633	Identifier	target_type		4604613	0					
ANR	4604634	CallExpression	target -> GetMyTypeName ( )		4604613	1					
ANR	4604635	Callee	target -> GetMyTypeName		4604613	0					
ANR	4604636	PtrMemberAccess	target -> GetMyTypeName		4604613	0					
ANR	4604637	Identifier	target		4604613	0					
ANR	4604638	Identifier	GetMyTypeName		4604613	1					
ANR	4604639	ArgumentList			4604613	1					
ANR	4604640	IfStatement	if ( ! my_target_type )		4604613	2					
ANR	4604641	Condition	! my_target_type	285:5:7675:7689	4604613	0	True				
ANR	4604642	UnaryOperationExpression	! my_target_type		4604613	0					
ANR	4604643	UnaryOperator	!		4604613	0					
ANR	4604644	Identifier	my_target_type		4604613	1					
ANR	4604645	CompoundStatement		7:23:311:311	4604613	1					
ANR	4604646	ExpressionStatement	"my_target_type = """""	286:2:7697:7716	4604613	0	True				
ANR	4604647	AssignmentExpression	"my_target_type = """""		4604613	0		=			
ANR	4604648	Identifier	my_target_type		4604613	0					
ANR	4604649	PrimaryExpression	""""""		4604613	1					
ANR	4604650	IfStatement	if ( ! target_type )		4604613	3					
ANR	4604651	Condition	! target_type	288:5:7726:7737	4604613	0	True				
ANR	4604652	UnaryOperationExpression	! target_type		4604613	0					
ANR	4604653	UnaryOperator	!		4604613	0					
ANR	4604654	Identifier	target_type		4604613	1					
ANR	4604655	CompoundStatement		10:20:359:359	4604613	1					
ANR	4604656	ExpressionStatement	"target_type = """""	289:2:7745:7761	4604613	0	True				
ANR	4604657	AssignmentExpression	"target_type = """""		4604613	0		=			
ANR	4604658	Identifier	target_type		4604613	0					
ANR	4604659	PrimaryExpression	""""""		4604613	1					
ANR	4604660	IfStatement	"if ( strcasecmp ( target_type , my_target_type ) && strcasecmp ( my_target_type , ANY_ADTYPE ) )"		4604613	4					
ANR	4604661	Condition	"strcasecmp ( target_type , my_target_type ) && strcasecmp ( my_target_type , ANY_ADTYPE )"	291:5:7771:7851	4604613	0	True				
ANR	4604662	AndExpression	"strcasecmp ( target_type , my_target_type ) && strcasecmp ( my_target_type , ANY_ADTYPE )"		4604613	0		&&			
ANR	4604663	CallExpression	"strcasecmp ( target_type , my_target_type )"		4604613	0					
ANR	4604664	Callee	strcasecmp		4604613	0					
ANR	4604665	Identifier	strcasecmp		4604613	0					
ANR	4604666	ArgumentList	target_type		4604613	1					
ANR	4604667	Argument	target_type		4604613	0					
ANR	4604668	Identifier	target_type		4604613	0					
ANR	4604669	Argument	my_target_type		4604613	1					
ANR	4604670	Identifier	my_target_type		4604613	0					
ANR	4604671	CallExpression	"strcasecmp ( my_target_type , ANY_ADTYPE )"		4604613	1					
ANR	4604672	Callee	strcasecmp		4604613	0					
ANR	4604673	Identifier	strcasecmp		4604613	0					
ANR	4604674	ArgumentList	my_target_type		4604613	1					
ANR	4604675	Argument	my_target_type		4604613	0					
ANR	4604676	Identifier	my_target_type		4604613	0					
ANR	4604677	Argument	ANY_ADTYPE		4604613	1					
ANR	4604678	Identifier	ANY_ADTYPE		4604613	0					
ANR	4604679	CompoundStatement		15:1:474:474	4604613	1					
ANR	4604680	ReturnStatement	return false ;	294:2:7860:7872	4604613	0	True				
ANR	4604681	Identifier	false		4604613	0					
ANR	4604682	IdentifierDeclStatement	"classad :: MatchClassAd * mad = compat_classad :: getTheMatchAd ( my , target ) ;"	297:1:7879:7951	4604613	5	True				
ANR	4604683	IdentifierDecl	"* mad = compat_classad :: getTheMatchAd ( my , target )"		4604613	0					
ANR	4604684	IdentifierDeclType	classad :: MatchClassAd *		4604613	0					
ANR	4604685	Identifier	mad		4604613	1					
ANR	4604686	AssignmentExpression	"* mad = compat_classad :: getTheMatchAd ( my , target )"		4604613	2		=			
ANR	4604687	Identifier	mad		4604613	0					
ANR	4604688	CallExpression	"compat_classad :: getTheMatchAd ( my , target )"		4604613	1					
ANR	4604689	Callee	compat_classad :: getTheMatchAd		4604613	0					
ANR	4604690	Identifier	compat_classad :: getTheMatchAd		4604613	0					
ANR	4604691	ArgumentList	my		4604613	1					
ANR	4604692	Argument	my		4604613	0					
ANR	4604693	Identifier	my		4604613	0					
ANR	4604694	Argument	target		4604613	1					
ANR	4604695	Identifier	target		4604613	0					
ANR	4604696	IdentifierDeclStatement	bool result = mad -> rightMatchesLeft ( ) ;	299:1:7955:7992	4604613	6	True				
ANR	4604697	IdentifierDecl	result = mad -> rightMatchesLeft ( )		4604613	0					
ANR	4604698	IdentifierDeclType	bool		4604613	0					
ANR	4604699	Identifier	result		4604613	1					
ANR	4604700	AssignmentExpression	result = mad -> rightMatchesLeft ( )		4604613	2		=			
ANR	4604701	Identifier	result		4604613	0					
ANR	4604702	CallExpression	mad -> rightMatchesLeft ( )		4604613	1					
ANR	4604703	Callee	mad -> rightMatchesLeft		4604613	0					
ANR	4604704	PtrMemberAccess	mad -> rightMatchesLeft		4604613	0					
ANR	4604705	Identifier	mad		4604613	0					
ANR	4604706	Identifier	rightMatchesLeft		4604613	1					
ANR	4604707	ArgumentList			4604613	1					
ANR	4604708	ExpressionStatement	compat_classad :: releaseTheMatchAd ( )	301:1:7996:8031	4604613	7	True				
ANR	4604709	CallExpression	compat_classad :: releaseTheMatchAd ( )		4604613	0					
ANR	4604710	Callee	compat_classad :: releaseTheMatchAd		4604613	0					
ANR	4604711	Identifier	compat_classad :: releaseTheMatchAd		4604613	0					
ANR	4604712	ArgumentList			4604613	1					
ANR	4604713	ReturnStatement	return result ;	302:1:8034:8047	4604613	8	True				
ANR	4604714	Identifier	result		4604613	0					
ANR	4604715	ReturnType	bool		4604613	1					
ANR	4604716	Identifier	IsAHalfMatch		4604613	2					
ANR	4604717	ParameterList	"compat_classad :: ClassAd * my , compat_classad :: ClassAd * target"		4604613	3					
ANR	4604718	Parameter	compat_classad :: ClassAd * my	278:19:7318:7344	4604613	0	True				
ANR	4604719	ParameterType	compat_classad :: ClassAd *		4604613	0					
ANR	4604720	Identifier	my		4604613	1					
ANR	4604721	Parameter	compat_classad :: ClassAd * target	278:48:7347:7377	4604613	1	True				
ANR	4604722	ParameterType	compat_classad :: ClassAd *		4604613	0					
ANR	4604723	Identifier	target		4604613	1					
ANR	4604724	CFGEntryNode	ENTRY		4604613		True				
ANR	4604725	CFGExitNode	EXIT		4604613		True				
ANR	4604726	Symbol	mad -> rightMatchesLeft		4604613						
ANR	4604727	Symbol	target_type		4604613						
ANR	4604728	Symbol	false		4604613						
ANR	4604729	Symbol	my		4604613						
ANR	4604730	Symbol	target		4604613						
ANR	4604731	Symbol	* target		4604613						
ANR	4604732	Symbol	result		4604613						
ANR	4604733	Symbol	* my		4604613						
ANR	4604734	Symbol	mad		4604613						
ANR	4604735	Symbol	target -> GetMyTypeName		4604613						
ANR	4604736	Symbol	compat_classad :: getTheMatchAd		4604613						
ANR	4604737	Symbol	ANY_ADTYPE		4604613						
ANR	4604738	Symbol	my -> GetTargetTypeName		4604613						
ANR	4604739	Symbol	* mad		4604613						
ANR	4604740	Symbol	my_target_type		4604613						
ANR	4604741	Symbol	strcasecmp		4604613						
ANR	4604742	Function	AttrList_setPublishServerTime	305:0:8052:8155							
ANR	4604743	FunctionDef	AttrList_setPublishServerTime (bool publish)		4604742	0					
ANR	4604744	CompoundStatement		306:0:8103:8155	4604742	0					
ANR	4604745	ExpressionStatement	AttrList_setPublishServerTimeMangled ( publish )	307:1:8106:8153	4604742	0	True				
ANR	4604746	CallExpression	AttrList_setPublishServerTimeMangled ( publish )		4604742	0					
ANR	4604747	Callee	AttrList_setPublishServerTimeMangled		4604742	0					
ANR	4604748	Identifier	AttrList_setPublishServerTimeMangled		4604742	0					
ANR	4604749	ArgumentList	publish		4604742	1					
ANR	4604750	Argument	publish		4604742	0					
ANR	4604751	Identifier	publish		4604742	0					
ANR	4604752	ReturnType	void		4604742	1					
ANR	4604753	Identifier	AttrList_setPublishServerTime		4604742	2					
ANR	4604754	ParameterList	bool publish		4604742	3					
ANR	4604755	Parameter	bool publish	305:36:8088:8099	4604742	0	True				
ANR	4604756	ParameterType	bool		4604742	0					
ANR	4604757	Identifier	publish		4604742	1					
ANR	4604758	CFGEntryNode	ENTRY		4604742		True				
ANR	4604759	CFGExitNode	EXIT		4604742		True				
ANR	4604760	Symbol	publish		4604742						
